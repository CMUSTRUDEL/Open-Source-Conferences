Title: RailsConf 2020 CE - Webpacker, It-Just-Works, But How? by Justin Gordon
Publication date: 2020-05-05
Playlist: RailsConf 2020 CE
Description: 
	Webpacker, It-Just-Works, But How? by Justin Gordon

How does the Webpacker gem provide "it-just-works" webpack integration with Rails? That simplicity did not come easily. The rich functionality, complexity, and rapid evolution of the webpack ecosystem necessitated extension points beyond a simple Ruby config file.

Yet you need to know almost nothing about webpack to leverage the modern JavaScript ecosystem. But what if you want to extend the standard configuration? What information might help you upgrade webpack and webpacker in the future?

This talk will explain the magical plumbing of Webpacker so you can leverage the webpack ecosystem on your terms.

For the talk slides, email Justin at justin@shakacode.com

_________

Justin has been a passionate user of webpack since early 2014 when he just could not stand copy-pasting one more jQuery file into his Rails project. In 2015, he created the gem "React on Rails," which integrated server-side rendered React and Webpack with Rails long before the Webpacker gem. These days, as CEO of ShakaCode.com, he helps companies optimize their Rails websites. He and his ShakaCode team also build Rails apps with modern front-ends, including their startup app, HiChee.com.
Captions: 
	00:00:09,170 --> 00:00:11,110
- Hi, my name is Justin Gordon.

00:00:11,110 --> 00:00:16,040
Welcome to my talk, Webpacker, It Just Works, But How?

00:00:16,040 --> 00:00:18,660
So, why listen to me?

00:00:18,660 --> 00:00:26,010
Well, I know a little bit about webpack and React and Ruby on Rails and a bit about webpacker,

00:00:26,010 --> 00:00:31,020
I've been working on this topic since 2014, when I wrote this article about how to integrate

00:00:31,020 --> 00:00:34,840
webpack with Ruby on Rails.

00:00:34,840 --> 00:00:40,600
Then in 2015 I created this library, React on Rails, it's probably one of the most popular

00:00:40,600 --> 00:00:45,500
ways to integrate Ruby on Rails with React with Server-side rendering.

00:00:45,500 --> 00:00:53,170
The library's got about 4.2 million downloads, maybe about 540000 websites use it and I've

00:00:53,170 --> 00:00:57,620
been working on my own consulting company, ShakaCode, since then and we help a lot of

00:00:57,620 --> 00:01:02,790
companies out especially using React on Rails.

00:01:02,790 --> 00:01:04,260
So why did I create this talk?

00:01:04,260 --> 00:01:10,310
I was doing a project for my ShakaCode client Popmenu, which has sites like this, restaurant

00:01:10,310 --> 00:01:16,290
websites, this is a React on Rails site and we're setting up loadable components for code

00:01:16,290 --> 00:01:22,250
splitting and trying to make it work with react-refresh-webpack-plugin So, and that

00:01:22,250 --> 00:01:23,369
gives you hot reloading.

00:01:23,369 --> 00:01:28,119
So you got hot reloading, you got code splitting, we've got this website.

00:01:28,119 --> 00:01:29,929
How hard could this be?

00:01:29,929 --> 00:01:32,710
Well, it turns out it's pretty darn hard.

00:01:32,710 --> 00:01:37,840
And so that got me digging really deep into rails/webpacker and figuring out a lot of

00:01:37,840 --> 00:01:38,840
things about it.

00:01:38,840 --> 00:01:41,049
And I thought, wow, I could share all this with you.

00:01:41,049 --> 00:01:42,680
So what's the problem we're solving?

00:01:42,680 --> 00:01:43,680
What's the goal?

00:01:43,680 --> 00:01:48,469
I read this great quote today, no joke, I literally read this today, "When you understand

00:01:48,469 --> 00:01:52,079
the problem, "what to do becomes obvious.

00:01:52,079 --> 00:01:54,869
"Understanding comes from multiple perspectives."

00:01:54,869 --> 00:01:58,840
That's from a great source called, Farnam Street.

00:01:58,840 --> 00:02:00,159
So here's what we're doing.

00:02:00,159 --> 00:02:06,470
We're trying to put Rails plus webpack together and we're trying to make it just work.

00:02:06,470 --> 00:02:08,640
So what does it mean by that?

00:02:08,640 --> 00:02:10,310
Works for who?

00:02:10,310 --> 00:02:15,250
So first of all, it's gotta work for the end users of web applications.

00:02:15,250 --> 00:02:21,380
We really need great performance because slow websites, basically people, they leave slow

00:02:21,380 --> 00:02:23,299
websites, they suck.

00:02:23,299 --> 00:02:25,130
So it works for developers.

00:02:25,130 --> 00:02:31,040
We want an easy write and maintain the code and it's got to work for the rails/webpacker

00:02:31,040 --> 00:02:36,680
maintainers 'cause it's not only helps those contributing, but it also serves as documentation

00:02:36,680 --> 00:02:39,040
for those using the library.

00:02:39,040 --> 00:02:42,260
So what are the main parts of "It just works?"

00:02:42,260 --> 00:02:48,320
So first of all, we want minimal to zero configuration needed a webpack.

00:02:48,320 --> 00:02:51,519
So I'll make it easy for Rails developers.

00:02:51,519 --> 00:02:56,250
We want the Rails view helpers support fingerprinting and bundle splitting.

00:02:56,250 --> 00:03:01,799
We've got something called the webpack-dev-server and wanna make that easy to run.

00:03:01,799 --> 00:03:07,049
And webpack compilation, we wanna make sure it happens when it's necessary and we also

00:03:07,049 --> 00:03:12,790
wanna make it easy to set up your project for production deployment.

00:03:12,790 --> 00:03:19,549
So Rails has long had asset preparation with rails/sprockets, but with Rail 6, had this

00:03:19,549 --> 00:03:24,880
nice little release note, webpacker is now the default JavaScript bundler for Rails through

00:03:24,880 --> 00:03:27,239
the new app/javascript directory.

00:03:27,239 --> 00:03:29,439
So we're gonna create rails/webpacker.

00:03:29,439 --> 00:03:33,930
What are the main parts to rails/webpacker, the two main parts are gonna be orchestrating

00:03:33,930 --> 00:03:41,140
webpack to create the manifest.json and also the static assets, the JS, the CSS files,

00:03:41,140 --> 00:03:42,159
et cetera.

00:03:42,159 --> 00:03:48,070
We're also gonna have to provide view helpers so that the views can display the script and

00:03:48,070 --> 00:03:52,000
the link tags so that the browser will know what files to download.

00:03:52,000 --> 00:03:56,780
So it doesn't sound too hard, but there are some main challenges.

00:03:56,780 --> 00:04:02,120
First of all the webpack output and the Rails view helper output are gonna vary by the Rails

00:04:02,120 --> 00:04:03,489
env.

00:04:03,489 --> 00:04:07,989
So the development environments can optimize for the developer experience.

00:04:07,989 --> 00:04:13,410
The production environment is gonna be optimizing for the end-user experience, for the browser

00:04:13,410 --> 00:04:14,410
experience.

00:04:14,410 --> 00:04:20,880
So the webpack, another challenges is, is that we've got the webpack-dev-server for

00:04:20,880 --> 00:04:22,660
the development time.

00:04:22,660 --> 00:04:27,700
And that's gonna be different than when we're actually creating assets statically over in

00:04:27,700 --> 00:04:29,060
the public directory.

00:04:29,060 --> 00:04:33,300
So when you're doing development you can either have, your assets can be in the public directory

00:04:33,300 --> 00:04:36,760
or they could be coming from the webpack-dev-server and I'll tell you more about that in a little

00:04:36,760 --> 00:04:38,190
bit.

00:04:38,190 --> 00:04:42,220
And also thirdly, you might also have the additional challenge as you're creating a

00:04:42,220 --> 00:04:44,500
separate bundle for server-rendering.

00:04:44,500 --> 00:04:48,780
A separate webpack, we'd create some separate files for that.

00:04:48,780 --> 00:04:51,610
So what is the overall rails/webpacker flow?

00:04:51,610 --> 00:04:56,560
I'm gonna come back to this diagram many times throughout this talk The main thing is, is

00:04:56,560 --> 00:05:02,150
that we've got to be able to orchestrate webpack, and so how are we gonna do that?

00:05:02,150 --> 00:05:07,570
Well, first of all, we're gonna have some settings in this config/webpacker.yml file.

00:05:07,570 --> 00:05:10,360
Now, why did we put it in a YAML file?

00:05:10,360 --> 00:05:15,700
We put in a YAML file because both Rails and the JavaScript code are gonna need to access

00:05:15,700 --> 00:05:16,900
that.

00:05:16,900 --> 00:05:22,650
We're also gonna have some JavaScript files that are gonna set up our webpack config that's

00:05:22,650 --> 00:05:27,450
gonna go under the rails/webpacker libraries and other Ruby code.

00:05:27,450 --> 00:05:30,260
It's gonna create this webpack config object.

00:05:30,260 --> 00:05:32,100
It's gonna run webpack.

00:05:32,100 --> 00:05:38,070
That's gonna create this manifest.json, the static assets, that's gonna go into Rails

00:05:38,070 --> 00:05:45,320
and that's gonna create your HTML on your, it's gonna create the HTML sent over to Rails.

00:05:45,320 --> 00:05:52,160
It's gonna have the right asset tags also Rails is gonna be ready to serve those statically

00:05:52,160 --> 00:05:54,140
created assets.

00:05:54,140 --> 00:05:56,920
So let's do a demo of this.

00:05:56,920 --> 00:05:58,760
Give you a little quick demo of the end result.

00:05:58,760 --> 00:06:08,910
I created a sample application here on GitHub, shakacode/webpacker-examples.

00:06:08,910 --> 00:06:13,190
I'm gonna start up Rails.

00:06:13,190 --> 00:06:17,470
I've cleared out my webpack directory in public.

00:06:17,470 --> 00:06:20,410
So the files are not there.

00:06:20,410 --> 00:06:27,690
In order for to get webpack to compile Rails, we're gonna actually go over to the application,

00:06:27,690 --> 00:06:32,660
hit refresh.

00:06:32,660 --> 00:06:36,050
Now notice webpacker's compiling.

00:06:36,050 --> 00:06:43,760
So everything's up to date.

00:06:43,760 --> 00:06:49,220
Notice here we got some files were served as showing our network tab with what files

00:06:49,220 --> 00:06:50,770
were served.

00:06:50,770 --> 00:06:57,160
And if I go and I view the page source, I can see that this is the end result.

00:06:57,160 --> 00:07:03,140
This is what we wanted to show up on the HTML that was generated by Rails.

00:07:03,140 --> 00:07:07,340
We're linking over to the files created by webpack.

00:07:07,340 --> 00:07:13,810
And that's what rails/webpacker does it orchestrated webpack, and it got us so that we got these

00:07:13,810 --> 00:07:15,610
files on our web page.

00:07:15,610 --> 00:07:17,780
So how do the new view helpers work?

00:07:17,780 --> 00:07:23,130
Well, I wanna put this in the context of our overall rails/webpacker flow.

00:07:23,130 --> 00:07:26,000
Right now, we're focused at the bottom.

00:07:26,000 --> 00:07:32,950
We're focused on how Rails will deliver the HTML with the asset tags and how Rails is

00:07:32,950 --> 00:07:36,220
gonna deliver the assets for the web page.

00:07:36,220 --> 00:07:40,270
So let's take a look at this in more detail.

00:07:40,270 --> 00:07:49,020
So on our view, our index.html.erb, we're gonna use the rails/webpacker helper stylesheet_packs_with_chunks_tag,

00:07:49,020 --> 00:07:52,370
and it's gonna have a string in there that's "home".

00:07:52,370 --> 00:07:59,110
Now that "home" corresponds to our file that's over in our packs directory.

00:07:59,110 --> 00:08:04,070
And that's what makes up for this entry point here "home".

00:08:04,070 --> 00:08:10,380
And so in the public/webpack/development/manifest.json, if you'll open up that file which is produced

00:08:10,380 --> 00:08:14,110
by webpack, it's gonna have an entry in there, "home".

00:08:14,110 --> 00:08:20,580
So if you were to take also a look in your config/webpacker.yml, it's got this public_output_path:

00:08:20,580 --> 00:08:24,850
webpack/development, and that's where the files get created by webpack.

00:08:24,850 --> 00:08:30,580
So notice webpack puts the files directly in the output directory that can be publicly

00:08:30,580 --> 00:08:32,919
served by Rails.

00:08:32,919 --> 00:08:38,289
So we've got the manifest.json, and that's gonna feed into the view helpers.

00:08:38,289 --> 00:08:42,990
We've got the public_output_path from the YAML file that feeds into the view helpers

00:08:42,990 --> 00:08:47,050
and that results in the HTML for the browser.

00:08:47,050 --> 00:08:55,279
And as I just showed you a second ago, that HTML, the browser shows you this webpack/development/JS/runtime-home

00:08:55,279 --> 00:09:03,290
that corresponds right there to this manifest.json and that was produced by webpack and that's

00:09:03,290 --> 00:09:06,069
how it all ties together.

00:09:06,069 --> 00:09:11,850
Also, if you were to take a look at those different chunks, you could see what's in

00:09:11,850 --> 00:09:12,850
those.

00:09:12,850 --> 00:09:19,089
In the example that I've given you where you can download it off of the GitHub site.

00:09:19,089 --> 00:09:24,189
What I did was I'm wanting to show split chunks working and so what he did is I have one page

00:09:24,189 --> 00:09:30,490
that has moment.js and another page that has both lodash and moment.js and another page

00:09:30,490 --> 00:09:32,760
that has neither of those.

00:09:32,760 --> 00:09:37,220
So what happens is that we end up with several different chunks.

00:09:37,220 --> 00:09:41,980
And that way, depending on what page you're viewing, we serve just the right chunks to

00:09:41,980 --> 00:09:43,329
the browser.

00:09:43,329 --> 00:09:48,420
In other words, it would be a complete waste if we sent all this JavaScript to the browser

00:09:48,420 --> 00:09:51,529
every time because somebody might never go to one of those pages.

00:09:51,529 --> 00:09:55,990
And our goal is only send the browser the JavaScript that's needed.

00:09:55,990 --> 00:10:00,800
This is actually one of the key differences with using Sprockets.

00:10:00,800 --> 00:10:04,829
Because with Sprockets, Sprockets doesn't have this automated way of breaking stuff

00:10:04,829 --> 00:10:10,680
into chunks based on how you've set up your application.

00:10:10,680 --> 00:10:15,070
So how does webpack know to do the right thing?

00:10:15,070 --> 00:10:21,550
Well now let's take a look at the top of the overall, the roadmap for rails/webpacker.

00:10:21,550 --> 00:10:24,389
So how are we gonna orchestrate webpacker.

00:10:24,389 --> 00:10:32,399
Excuse me, how is webpacker library gonna orchestrate webpack, so it's creating the

00:10:32,399 --> 00:10:38,709
right stuff, which will get fed into Rails?

00:10:38,709 --> 00:10:40,829
So this is how it works.

00:10:40,829 --> 00:10:43,230
We've got our webpack configuration.

00:10:43,230 --> 00:10:49,430
As I mentioned there are these different JavaScript files and these JavaScript files correspond

00:10:49,430 --> 00:10:51,759
to your environments.

00:10:51,759 --> 00:10:57,730
Now the only ones that actually correspond the environments are the development.js, production.js

00:10:57,730 --> 00:10:59,259
and the test.js files.

00:10:59,259 --> 00:11:04,500
This environment.js.file, that's a common file that's imported, excuse me, required

00:11:04,500 --> 00:11:07,600
by the development and the production files.

00:11:07,600 --> 00:11:13,899
Also remember this webpacker.yml file of standard directories and other things is incredibly

00:11:13,899 --> 00:11:18,360
important also for the JavaScript side of the webpack equation.

00:11:18,360 --> 00:11:22,839
On our Client-Side files, we've got these entry points.

00:11:22,839 --> 00:11:24,490
I was showing you the home one.

00:11:24,490 --> 00:11:26,269
The home one's very simple.

00:11:26,269 --> 00:11:32,650
It's not including a bunch of the other stuff that's used by the example that's using lodash

00:11:32,650 --> 00:11:35,329
and moment, for example.

00:11:35,329 --> 00:11:39,220
We also have this package.json, that's very important as well.

00:11:39,220 --> 00:11:44,800
The package.json gives you access to lots and lots and lots of different modules, just

00:11:44,800 --> 00:11:46,689
like the RubyGems.

00:11:46,689 --> 00:11:52,510
So what happens is, is that we take that webpack configuration, we take all those files, all

00:11:52,510 --> 00:11:56,850
your JavaScript files and it could also be images, et cetera.

00:11:56,850 --> 00:12:03,529
All those Client-Side files, all your package.json, we're gonna shove that into webpack and out

00:12:03,529 --> 00:12:11,360
of it we're gonna get in your public webpack location, defined in your webpacker.yml, lots

00:12:11,360 --> 00:12:13,120
and lots and lots of files.

00:12:13,120 --> 00:12:18,019
And most importantly, we're gonna get this manifest file because the manifest file is

00:12:18,019 --> 00:12:25,399
gonna be able to tell Rails, Hey, this file maps to this bundle, for example.

00:12:25,399 --> 00:12:30,449
So how did we get, so now how is webpack gonna actually run?

00:12:30,449 --> 00:12:37,480
Well, when you install rails/webpacker, rails/webpacker installs a bin file, bin webpack, and inside

00:12:37,480 --> 00:12:42,320
that bin file it's gonna call the webpackRunner.

00:12:42,320 --> 00:12:46,610
So with the ARGVs that you pass into it, and this is the one for webpack, there's another

00:12:46,610 --> 00:12:48,699
one for the webpack-dev-server.

00:12:48,699 --> 00:12:54,649
And the main thing about this file that you need to know is that it's gonna load up the

00:12:54,649 --> 00:12:56,860
appropriate webpack_config.

00:12:56,860 --> 00:13:00,430
Notice config/webpack and your NODE_ENV.

00:13:00,430 --> 00:13:02,899
Notice, not your RAILS_ENV.

00:13:02,899 --> 00:13:08,389
You can configure your NODE_ENV and that gives you the flexibility to configure only what's

00:13:08,389 --> 00:13:15,800
gonna be produced by webpack and your JavaScript files So again, what does this mean?

00:13:15,800 --> 00:13:20,680
Config/webpack like say for development, that would be development.js.

00:13:20,680 --> 00:13:25,999
As I mentioned a second ago, you've got something like this in your development directory, your

00:13:25,999 --> 00:13:29,629
development.js file.

00:13:29,629 --> 00:13:32,529
And again, this is the overall flow that's happening.

00:13:32,529 --> 00:13:37,569
All this stuff is being orchestrated to get those files ready for Rails.

00:13:37,569 --> 00:13:44,220
So for example, the production.js file that contains anything that's specific to production.

00:13:44,220 --> 00:13:49,779
Inside that file, it references this environment.js file as I mentioned, it's a common setup.

00:13:49,779 --> 00:13:56,829
The key thing is that this line here, line five, the end result of this file is the export

00:13:56,829 --> 00:14:04,269
of a plain JavaScript Object, which is the webpack config and that exact webpack config

00:14:04,269 --> 00:14:13,230
you can see documented over here on the webpack site, webpack.js.org/configuration.

00:14:13,230 --> 00:14:16,879
Also note in the environment.js file.

00:14:16,879 --> 00:14:22,119
That's where you put customizations that would apply to all your different environments.

00:14:22,119 --> 00:14:29,129
Next, let's go under the hood and take a deeper look at what's going on.

00:14:29,129 --> 00:14:34,540
Let's say we want to see what your webpack configuration is so we could do some debugging.

00:14:34,540 --> 00:14:38,860
Well, let's go back over into my Console.

00:14:38,860 --> 00:14:52,470
Let me quit the app, quit the Rails app and I'm gonna use, I'm gonna run bin/webpack --debug.

00:14:52,470 --> 00:14:59,899
So when I run that, what's gonna happen is that this opened up the debugger.

00:14:59,899 --> 00:15:03,470
Notice I changed the default setup a little bit.

00:15:03,470 --> 00:15:09,740
So rather than just exporting environment to WebpackConfig, what I'm doing is I'm setting

00:15:09,740 --> 00:15:14,269
it to a variable so that I can inspect it.

00:15:14,269 --> 00:15:19,779
So I could inspect it over here, but I think I'd rather inspect it in my Console 'cause

00:15:19,779 --> 00:15:22,449
it gives me a little more space.

00:15:22,449 --> 00:15:29,439
So webpackConfiguration, dig in and I can go look and see what's in here.

00:15:29,439 --> 00:15:33,759
Like look the filename, this is what's, the filenames gonna be that.

00:15:33,759 --> 00:15:37,040
I can see my path there.

00:15:37,040 --> 00:15:39,249
Most importantly, I can see the publicPath.

00:15:39,249 --> 00:15:42,110
This is where we're telling webpack to put this stuff.

00:15:42,110 --> 00:15:48,600
If I go look in the plugins I can see that, Hey, there's this EnvironmentPlugin.

00:15:48,600 --> 00:15:52,459
Notably there's also this MiniCSS Plugin.

00:15:52,459 --> 00:15:57,180
Keep in mind that this is a JavaScript Object that contains other objects.

00:15:57,180 --> 00:16:01,499
It's not just a plain old, say like JSON file.

00:16:01,499 --> 00:16:04,519
So it's not quite so easy to print in your Console.

00:16:04,519 --> 00:16:09,790
So what's really awesome about being able to dig in and check out your webpack config

00:16:09,790 --> 00:16:17,830
is now you can go over to webpack.js.org and I can go to the documentation directory and

00:16:17,830 --> 00:16:19,730
I can look up some of this documentation.

00:16:19,730 --> 00:16:28,300
Like for example, here's like the entry points for, now what's also interesting about webpack

00:16:28,300 --> 00:16:34,009
is that, excuse me, the entry points is that the entry points here are configured by the

00:16:34,009 --> 00:16:37,699
packs directory So you these were all configured there.

00:16:37,699 --> 00:16:45,209
So again we're tying something like the entry points here, tying the documentation here

00:16:45,209 --> 00:16:54,720
over to the actual Object, and that's the Object that's produced by, when we go back

00:16:54,720 --> 00:17:01,149
to our main diagram, that's produced by running rails/webpacker, it takes all these files

00:17:01,149 --> 00:17:05,760
and creates this config Object which is gonna run webpack, which is gonna send everything

00:17:05,760 --> 00:17:08,880
into Rails.

00:17:08,880 --> 00:17:15,459
So maybe you've noticed that your package.json doesn't contain webpack or babel.

00:17:15,459 --> 00:17:19,680
What plugins and what version am I using?

00:17:19,680 --> 00:17:20,680
Hmm.

00:17:20,680 --> 00:17:23,920
Well, let's take a look at how your package.json might look.

00:17:23,920 --> 00:17:28,750
And this is from the demo application that I've got up on GitHub.

00:17:28,750 --> 00:17:33,490
So Rails puts in a bunch of these things by default, puts in rails/webpacker.

00:17:33,490 --> 00:17:37,780
And here are a couple things that I added for my project just to show you off some big

00:17:37,780 --> 00:17:42,380
large bundles from lodash and moment, and I put it in the webpack-bundle-analyzer.

00:17:42,380 --> 00:17:46,110
But where's webpack, that's very strange.

00:17:46,110 --> 00:17:47,110
Or is it?

00:17:47,110 --> 00:17:51,980
Well, when you're including dependencies from Node modules, it's a little bit like RubyGems.

00:17:51,980 --> 00:17:54,790
They can include many other dependencies.

00:17:54,790 --> 00:17:59,520
So in order to figure out, we're gonna really want to know what these dependencies are pulling

00:17:59,520 --> 00:18:00,520
in.

00:18:00,520 --> 00:18:04,580
Especially for rails/webpacker, because that's gonna be specifying all the different plugins

00:18:04,580 --> 00:18:06,880
for webpack.

00:18:06,880 --> 00:18:10,320
And also it's gonna be having the webpack version.

00:18:10,320 --> 00:18:12,690
And that's very important.

00:18:12,690 --> 00:18:19,140
So in order to find what versions you've got, you've got a couple options.

00:18:19,140 --> 00:18:23,980
Probably the one that's the first place to go to, I would recommend, is go over to GitHub,

00:18:23,980 --> 00:18:30,400
go to the rails/webpacker project and make sure though that you browse the correct version

00:18:30,400 --> 00:18:34,660
number for whatever version of webpack you're using.

00:18:34,660 --> 00:18:38,300
Right now webpacker as of this recording's up to 5.1.1.

00:18:38,300 --> 00:18:42,530
So if you're on version four and then you go and you look at the file on master and

00:18:42,530 --> 00:18:49,700
then you start looking at the documentation for, say babel at 7.9 or whatever node-sass

00:18:49,700 --> 00:18:55,450
at 4.13, et cetera, and it's totally different, well you're gonna be in a world of pain.

00:18:55,450 --> 00:19:00,240
I can't tell you how many times I've been through endless yak shaving going something

00:19:00,240 --> 00:19:06,860
should work, I swear I'm doing the code just for the documentation, just the way the documentation

00:19:06,860 --> 00:19:07,860
says.

00:19:07,860 --> 00:19:12,170
And then finally I realize that the version I've got doesn't correspond to the documentation

00:19:12,170 --> 00:19:13,250
I've got.

00:19:13,250 --> 00:19:16,620
So make sure that you've got the right tag.

00:19:16,620 --> 00:19:23,350
And so pick the tag and then when you browse over to the package.json for rails/webpacker,

00:19:23,350 --> 00:19:25,810
you'll be able to see the correct versions.

00:19:25,810 --> 00:19:32,300
So another thing that you might do is you might also run npm ls webpack or any one of

00:19:32,300 --> 00:19:36,010
these other libraries and see which is the one included.

00:19:36,010 --> 00:19:46,090
So in our case it's webpack 4.42.1 which you can see at the bottom is 4.42.1 right there.

00:19:46,090 --> 00:19:51,740
So just by the way, here's another thing to watch out for, the webpack docs, there is

00:19:51,740 --> 00:19:55,400
no place to see the older versions of the docs.

00:19:55,400 --> 00:19:59,730
So by the way, they actually did find an issue about that.

00:19:59,730 --> 00:20:03,240
So it's just something to be aware of.

00:20:03,240 --> 00:20:09,050
The webpack doesn't change that much from version to version, but just be careful there.

00:20:09,050 --> 00:20:13,170
Another thing is you might want to override one of those versions that you're pulling

00:20:13,170 --> 00:20:14,590
in from webpack.

00:20:14,590 --> 00:20:16,250
How do you do that?

00:20:16,250 --> 00:20:19,240
Well, there's a thing called Yarn resolutions.

00:20:19,240 --> 00:20:23,750
So you put in a resolutions area and you might be able to say, hey, I really want babel/core

00:20:23,750 --> 00:20:29,660
7.9 or babel/core version eight or babel/core version 25, whatever.

00:20:29,660 --> 00:20:31,650
Well, this is the way you do it.

00:20:31,650 --> 00:20:36,300
So your package.json contains this resolutions area.

00:20:36,300 --> 00:20:42,770
So here's a tip, you want to minimize your deviations from the standard webpacker configurations,

00:20:42,770 --> 00:20:47,410
which is basically the very, very simple one, which pretty much has nothing in it.

00:20:47,410 --> 00:20:50,290
And I'm talking mostly about the JavaScript part.

00:20:50,290 --> 00:20:52,610
I'm not talking about the webpacker YAML part.

00:20:52,610 --> 00:20:56,860
I'm talking about your JavaScript part, which would be your environment.js which applies

00:20:56,860 --> 00:21:03,940
to all your files or maybe your production.js et cetera.

00:21:03,940 --> 00:21:09,150
As I mentioned over in the slides, going back a few, right here.

00:21:09,150 --> 00:21:15,650
So if you start putting in lots of stuff in this production.js file right there and environment.js

00:21:15,650 --> 00:21:23,911
et cetera, then what's gonna happen is that when you're gonna be doing an update, you're

00:21:23,911 --> 00:21:29,560
gonna have to really check all the documentation really, really carefully.

00:21:29,560 --> 00:21:34,210
So just by the way, that's actually, this is the sort of work that I've been helping

00:21:34,210 --> 00:21:37,390
out lots of companies over the number of years.

00:21:37,390 --> 00:21:42,760
It's just getting through all this stuff because a lot of companies need more customized configurations,

00:21:42,760 --> 00:21:46,230
but it's kind of a lot of work to keep things up to date.

00:21:46,230 --> 00:21:49,880
So because I'm doing the same exact thing for a lot of different companies, I'm pretty

00:21:49,880 --> 00:21:52,580
darn efficient at it.

00:21:52,580 --> 00:21:58,520
So here's another tip, how do you create separate bundles for client and server rendering using

00:21:58,520 --> 00:21:59,590
rails/webpacker?

00:21:59,590 --> 00:22:03,500
And the answer is the webpack multicompiler.

00:22:03,500 --> 00:22:08,300
You can find a link to that in my notes in my slides.

00:22:08,300 --> 00:22:10,360
And so what does that actually mean?

00:22:10,360 --> 00:22:16,270
What it means is that webpack can export an array of configs, not just an Object.

00:22:16,270 --> 00:22:19,800
Remember I told you that our output is supposed to be an Object.

00:22:19,800 --> 00:22:24,420
Well, it turns out that you can actually have an array of config.

00:22:24,420 --> 00:22:31,720
So in this example here, I'm saying merge this clientEnvironment.toWebpackConfig.

00:22:31,720 --> 00:22:37,460
And so then it's gonna basically create this clientConfig and that's there, and the serverConfig

00:22:37,460 --> 00:22:41,250
is already just a standard JavaScript Object.

00:22:41,250 --> 00:22:42,250
So there you go.

00:22:42,250 --> 00:22:48,080
So that's how you could set up two totally separate webpack configuration Objects.

00:22:48,080 --> 00:22:52,540
So you get a different client configuration and different, excuse me, so you get a different

00:22:52,540 --> 00:22:55,811
configuration use for your client bundle and for your server bundle.

00:22:55,811 --> 00:23:02,670
And that's extremely common that you're gonna need to do that if you're server rendering

00:23:02,670 --> 00:23:04,880
So here's another common question.

00:23:04,880 --> 00:23:11,890
Can you use view helpers without the rails/webpacker configuration of the webpack config?

00:23:11,890 --> 00:23:15,020
And the answer is absolutely.

00:23:15,020 --> 00:23:20,990
In fact, this has been, this actually this question here, and we're actually, I've been

00:23:20,990 --> 00:23:27,640
digging into rails/webpacker because all the React on Rails customers that I deal with,

00:23:27,640 --> 00:23:31,440
we have custom webpack configurations.

00:23:31,440 --> 00:23:38,700
And so what I've done is I figured out how to use the rails/webpacker library so that

00:23:38,700 --> 00:23:44,870
I'm carefully pulling in stuff from the NMO file and other settings from the rails/webpacker

00:23:44,870 --> 00:23:49,230
library, But I'm not pulling in the whole webpack config.

00:23:49,230 --> 00:23:51,390
So absolutely it's possible.

00:23:51,390 --> 00:23:58,580
And the key tip is use the rails/webpacker Node package from your customized JavaScript

00:23:58,580 --> 00:24:04,710
to configure webpacker, configure webpack, excuse me.

00:24:04,710 --> 00:24:09,290
So once again, this is the overall flow and here's a little diagram of this, is we can

00:24:09,290 --> 00:24:15,400
replace this whole top part of the diagram with your own custom setup for webpack.

00:24:15,400 --> 00:24:20,720
You're still gonna get the same manifest.json, JS, CSS, Fonts, et cetera.

00:24:20,720 --> 00:24:24,000
Probably the most important thing you're gonna do with your own custom setup for webpack

00:24:24,000 --> 00:24:27,770
is you have to make sure it gets a manifest.json, right?

00:24:27,770 --> 00:24:34,480
Besides that, if you wanna get hot reload, hot module reloading working right, you definitely

00:24:34,480 --> 00:24:39,060
are gonna wanna pay careful attention to using that node package library.

00:24:39,060 --> 00:24:41,520
So I wrote down here a few bullets of the tips.

00:24:41,520 --> 00:24:47,540
You can use the view helper, skip the webpack configuration and just use that node package.

00:24:47,540 --> 00:24:54,160
Could be 'cause you definitely are gonna need parts of what's in config/wepacker.yml So

00:24:54,160 --> 00:24:58,030
next, what is the best way to run Rails for development?

00:24:58,030 --> 00:25:03,750
I gave you a little demo earlier on of what happens when you run rails s.

00:25:03,750 --> 00:25:11,170
So when you run rails s and if you just, this is option one run rails s don't run anything

00:25:11,170 --> 00:25:12,170
else.

00:25:12,170 --> 00:25:13,170
And just set compile to true.

00:25:13,170 --> 00:25:15,150
Well, let me tell you what happens.

00:25:15,150 --> 00:25:19,850
The web request arrives, you've changed some JavaScript, et cetera, maybe you've synced

00:25:19,850 --> 00:25:21,480
up from GitHub.

00:25:21,480 --> 00:25:27,700
What happens is is that webpack compilation will be skipped if the compile option is false,

00:25:27,700 --> 00:25:30,860
well here we got to true, or the webpack-dev-server's running.

00:25:30,860 --> 00:25:34,590
As I mentioned, this is the case, you're not even running the webpack-dev-server.

00:25:34,590 --> 00:25:35,880
Well guess what?

00:25:35,880 --> 00:25:38,880
We're gonna compute a cache key for all your assets.

00:25:38,880 --> 00:25:39,970
This is a bit time consuming.

00:25:39,970 --> 00:25:45,960
We have to read every single one of the files, all your JavaScript files and computer cache

00:25:45,960 --> 00:25:49,460
key, which is basically an MD5 and a bunch of other stuff.

00:25:49,460 --> 00:25:55,250
We're also gonna read that saved cache key from the last webpack compile.

00:25:55,250 --> 00:25:59,530
So warning, this is really slow if you have many files.

00:25:59,530 --> 00:26:01,810
So why is it so slow?

00:26:01,810 --> 00:26:10,980
Well, guess what, in the example that I just showed you, it turns out that we don't actually

00:26:10,980 --> 00:26:12,760
compute that cache key once.

00:26:12,760 --> 00:26:16,460
I've got three calls to the webpacker view helpers.

00:26:16,460 --> 00:26:21,680
And what happens is you notice, and you could do this in your own little test setup, is

00:26:21,680 --> 00:26:26,180
that webpacker prints its friendly, informative message, hey, everything's up-to-date.

00:26:26,180 --> 00:26:31,430
Nothing to do, Well, it wasn't quite nothing to do because webpacker read every one of

00:26:31,430 --> 00:26:36,700
your Client-Side files and it computed the cache key, it computed giant cache key from

00:26:36,700 --> 00:26:37,700
all that stuff.

00:26:37,700 --> 00:26:39,160
And it did it three times.

00:26:39,160 --> 00:26:41,130
This is a tiniest of tiny apps.

00:26:41,130 --> 00:26:45,820
I think the number of files in the app is less than the fingers on your hands.

00:26:45,820 --> 00:26:51,190
So the compile time went to 20 sec, or the serving time on Rails went from 27 milliseconds,

00:26:51,190 --> 00:26:57,741
when this is happening, to if you set compile to false and maybe you're running, you're

00:26:57,741 --> 00:27:02,270
doing something else to compile your files, which I'll show you in a second, then it's

00:27:02,270 --> 00:27:05,000
only 13 milliseconds.

00:27:05,000 --> 00:27:12,650
Also notice that the allocations here, is a huge number of Ruby allocations that had

00:27:12,650 --> 00:27:13,650
to be created.

00:27:13,650 --> 00:27:21,260
So again, bottom line is that don't just turn compile on and skip doing something and skip

00:27:21,260 --> 00:27:24,500
one of the next few options.

00:27:24,500 --> 00:27:29,040
So this is option number two, run webpack in watch mode.

00:27:29,040 --> 00:27:34,191
So what you do here is you run rails s in one Console and you run bin/webpack --watch

00:27:34,191 --> 00:27:40,330
in another Console or you might have a proc file, you might run that with Foreman or recently

00:27:40,330 --> 00:27:46,450
I've been using something called Overmind since it lets you easily connect to the Rails,

00:27:46,450 --> 00:27:48,310
as for some debugging stuff.

00:27:48,310 --> 00:27:52,110
But basically just you're gonna run two processes.

00:27:52,110 --> 00:27:53,540
And one's watch.

00:27:53,540 --> 00:28:00,010
Make sure you set compile to false because if you run watch with compile set to true,

00:28:00,010 --> 00:28:04,200
you're still gonna be doing all that work if computing does cache keys and doing the

00:28:04,200 --> 00:28:05,200
compilation.

00:28:05,200 --> 00:28:08,020
Well, you would probably figure that out pretty fast.

00:28:08,020 --> 00:28:13,340
So when the web requests arrive, Rail skips calling webpack compilation, if you set the

00:28:13,340 --> 00:28:16,310
compile option to false, as I just mentioned.

00:28:16,310 --> 00:28:23,750
So this is fast and why webpack's highly optimized for this scenario and webpack will be regenerating

00:28:23,750 --> 00:28:27,540
the file, the bundles, anytime you Save.

00:28:27,540 --> 00:28:33,931
So option number three for running your webpack stuff is to run rails s in one terminal and

00:28:33,931 --> 00:28:37,750
run the webpack-dev-server and another terminal.

00:28:37,750 --> 00:28:45,430
So what happens then is that the webpack-dev-server will proactively compute your bundles just

00:28:45,430 --> 00:28:47,870
like running watch.

00:28:47,870 --> 00:28:53,230
And so here's the interesting thing is that the webpack-dev-server is actually a mini

00:28:53,230 --> 00:28:55,400
web server to serve your assets.

00:28:55,400 --> 00:29:02,560
But if you went and you looked at your source file for what's comes out of your Rails, you

00:29:02,560 --> 00:29:07,740
go view-source, you're gonna see inside there there's nothing different when you're running

00:29:07,740 --> 00:29:10,060
the webpack-dev-server.

00:29:10,060 --> 00:29:15,400
So this is again a little part of the magic of how it just works for rails/webpacker.

00:29:15,400 --> 00:29:20,750
So what happens is, is that, well first of all, when the web requests arrives, Rails

00:29:20,750 --> 00:29:25,830
is gonna skip the webpack compilation, maybe set compile to false but it's also, rails/web

00:29:25,830 --> 00:29:33,230
packer is set up to detect if the webpack-dev-server is running by checking wherever you've configured

00:29:33,230 --> 00:29:35,200
it on localhost port 3035.

00:29:35,200 --> 00:29:38,320
So it actually does a little ping there.

00:29:38,320 --> 00:29:43,600
So then this is a really neat thing, is that rather than changing the view helpers to put

00:29:43,600 --> 00:29:49,670
different output on your Rails view, when you're running the dev server, rails/web packer

00:29:49,670 --> 00:29:53,660
actually sets up a proxy to the webpack-dev-server.

00:29:53,660 --> 00:29:55,080
So where is that set up?

00:29:55,080 --> 00:30:00,700
If you go look in the lib webpacker railtie in the source code, it's right here.

00:30:00,700 --> 00:30:07,090
There's a little initializer for webpacker.proxy and it sets up app.middleware.insert_before

00:30:07,090 --> 00:30:13,550
and sets up the DevServerProxy right there and that's where it is.

00:30:13,550 --> 00:30:17,890
And here's where all this stuff is set up inside your YAML file.

00:30:17,890 --> 00:30:26,120
And so that ties into running the webpack-dev-server and it also ties into what Rails is gonna

00:30:26,120 --> 00:30:29,070
do in terms of the proxy.

00:30:29,070 --> 00:30:33,280
So I think that's pretty neat.

00:30:33,280 --> 00:30:38,980
So my config development.js is really tiny.

00:30:38,980 --> 00:30:43,200
Where the heck did all these config values come from?

00:30:43,200 --> 00:30:48,070
You might be looking in here and let's say this is your Small development JavaScript,

00:30:48,070 --> 00:30:54,440
development.js file, It's just got a few lines, this is from the installer for webpacker.

00:30:54,440 --> 00:31:00,760
Constant environment, require environment and the const webpackConfiguration is environment.toWebpackConfig.

00:31:00,760 --> 00:31:05,290
There are a couple extra lines here where I run the debugger, but basically this is

00:31:05,290 --> 00:31:08,180
an environment to webpack config.

00:31:08,180 --> 00:31:13,020
So you pulled this out, this thing right here, we got from environment.

00:31:13,020 --> 00:31:14,020
Hmm.

00:31:14,020 --> 00:31:15,470
Well let's go see what's in there.

00:31:15,470 --> 00:31:18,860
Notice this is my local ./environment file, same directory.

00:31:18,860 --> 00:31:24,030
So in that file, it's got a few lines in here.

00:31:24,030 --> 00:31:29,421
And in this file here I've got maybe some plugins you're gonna put in here, maybe you're

00:31:29,421 --> 00:31:31,410
gonna call split chunks.

00:31:31,410 --> 00:31:33,480
And then you're gonna export that.

00:31:33,480 --> 00:31:37,390
So, again, very very tiny.

00:31:37,390 --> 00:31:43,720
So what's special here is you call const environment equals require Rails/webpacker.

00:31:43,720 --> 00:31:48,000
So this, the no library for rails/webpacker.

00:31:48,000 --> 00:31:53,880
Remember not the RubyGem library, but the node library for rails/webpacker sets up all

00:31:53,880 --> 00:31:58,200
the default settings, and it's not just completely default, default.

00:31:58,200 --> 00:32:04,080
These are the defaults for rails/webpacker, but it is gonna be per your specific environment

00:32:04,080 --> 00:32:07,190
whether or not it's development or production, et cetera.

00:32:07,190 --> 00:32:10,350
And that's what's going to go in this variable.

00:32:10,350 --> 00:32:15,410
The final part of the rails/webpacker magic that I wanna talk about is getting your assets

00:32:15,410 --> 00:32:16,790
deployed.

00:32:16,790 --> 00:32:20,460
So normally before, you've probably already got something, where you're already running

00:32:20,460 --> 00:32:24,050
rake assets precompile for deployment.

00:32:24,050 --> 00:32:29,270
Well, turns out that rails/webpacker does this for you automatically.

00:32:29,270 --> 00:32:31,820
And here's the actual code that does this.

00:32:31,820 --> 00:32:36,720
If you were to go look in the rails/webpacker source code, there's a compile.rake file.

00:32:36,720 --> 00:32:42,420
And inside there it has this method here, def enhance_assets_precompile.

00:32:42,420 --> 00:32:48,550
And what it does is this basically enhances the assets precompile.

00:32:48,550 --> 00:32:54,140
It adds a dependency to make sure that Yarn gets installed and then it calls the webpacker

00:32:54,140 --> 00:33:01,160
compile task, which that, essentially orchestrates webpack to build all the assets.

00:33:01,160 --> 00:33:03,260
So that is the magic there.

00:33:03,260 --> 00:33:09,870
Here's, by the way, here's a webpacker rake task here where it will call webpacker compile.

00:33:09,870 --> 00:33:12,100
Well, congratulations.

00:33:12,100 --> 00:33:16,710
You've just about made it to the end of my rails/webpacker presentation.

00:33:16,710 --> 00:33:21,000
So I wanna give you a real brief summary again of what this is all about.

00:33:21,000 --> 00:33:27,430
First of all, the main parts of the overall flow are first of all the config webpacker

00:33:27,430 --> 00:33:28,840
YAML file.

00:33:28,840 --> 00:33:33,750
That file is special because that contains values that are read by both the Ruby on Rails

00:33:33,750 --> 00:33:41,500
server and also the JavaScript code that configures this webpack config Object.

00:33:41,500 --> 00:33:48,350
And then you also are gonna have a file per node environment, meaning development test

00:33:48,350 --> 00:33:50,460
and production.

00:33:50,460 --> 00:33:54,520
And that's a place where you can further customize webpack.

00:33:54,520 --> 00:34:00,180
Those things get put together with the rails/webpacker library, and we create this config Object.

00:34:00,180 --> 00:34:05,990
So there's a little bit of Ruby code as well that runs, runs all this and that's the orchestration

00:34:05,990 --> 00:34:08,280
of webpack.

00:34:08,280 --> 00:34:11,790
And so once again remember, we're just creating this config Object.

00:34:11,790 --> 00:34:17,169
We stuff it into webpack and boom, out we get the manifest.json and we get our other

00:34:17,169 --> 00:34:23,750
static assets, JavaScript, CSS, Fonts, Images, et cetera, everything your browser needs except

00:34:23,750 --> 00:34:27,559
the Ruby on Rails code of course, which your browser doesn't need.

00:34:27,559 --> 00:34:33,019
And then that goes into your Rails server and Rails will know from that manifest exactly

00:34:33,019 --> 00:34:38,260
what sort of asset tags to put on the pages it sends back to the browser.

00:34:38,260 --> 00:34:46,019
And because rails/webpacker configured webpack so that it deployed the actual static assets

00:34:46,019 --> 00:34:48,659
directly to the public directory.

00:34:48,659 --> 00:34:53,649
That's how we got the assets for the webpage ready to go.

00:34:53,649 --> 00:34:55,089
Congratulations.

00:34:55,089 --> 00:34:56,649
You've reached the end of the talk.

00:34:56,649 --> 00:35:00,819
Hopefully at this point you really have a good understanding of how we can combine Rails

00:35:00,819 --> 00:35:07,279
and webpack using the rails/webpacker Jam and Node module so that we can orchestrate

00:35:07,279 --> 00:35:13,950
webpack and give the Rail server exactly what it needs to give you the results that you

00:35:13,950 --> 00:35:20,050
want so that all your Client-Side assets are optimized for development, for production,

00:35:20,050 --> 00:35:21,809
et cetera.

00:35:21,809 --> 00:35:26,069
So I showed you how it works and hopefully that's gonna help you configure things a lot

00:35:26,069 --> 00:35:31,069
better and basically, just not end up with a lot of yak shaving, right?

00:35:31,069 --> 00:35:33,440
It can't be that hard.

00:35:33,440 --> 00:35:38,140
Well I think with all this stuff, it's pretty expected you're gonna have some yak shaving.

00:35:38,140 --> 00:35:45,240
So on this last slide I've got some resources here in case you end up yak shaving rails/webpacker,

00:35:45,240 --> 00:35:50,140
server-side rendering, maybe you're using React on Rails, but you wanna get better web

00:35:50,140 --> 00:35:51,569
performance.

00:35:51,569 --> 00:35:53,970
So I've got a link on this last side too.

00:35:53,970 --> 00:35:56,999
There's a Slack Workspace with an invite link.

00:35:56,999 --> 00:36:01,200
There's a forum where I tried, if you have a good question, I try to answer questions

00:36:01,200 --> 00:36:02,200
there.

00:36:02,200 --> 00:36:05,920
Try to put up content all the time and I've got my email on this page as well.

00:36:05,920 --> 00:36:08,029
So feel free to reach out.

00:36:08,029 --> 00:36:13,430
This is my specialty kinda yak shaving webpack and putting it all together.

00:36:13,430 --> 00:36:15,730
Been doing this for a long time.

00:36:15,730 --> 00:36:16,809
So thank you again.

00:36:16,809 --> 00:36:19,549
Thank you so much for attending my talk.

00:36:19,549 --> 00:36:24,740
And by the way, if you do get the slides, there are some bonus slides, which I did not

00:36:24,740 --> 00:36:26,640
cover in the talk.

00:36:26,640 --> 00:36:32,339
So definitely stuff deep into the weeds of how the Node module works and some other stuff

00:36:32,339 --> 00:36:34,160
like that.

00:36:34,160 --> 00:36:39,549
Quick thanks to Jetbrains, ShakaCode's customers, Clubhouse, et cetera.

00:36:39,549 --> 00:36:42,099
You can see all this stuff on the slides.

00:36:42,099 --> 00:36:47,089
So thanks again for attending my talk and I really hope you don't end up with too much

00:36:47,089 --> 00:36:50,789
yak shaving on rails/web packer in the future.

00:36:50,789 --> 00:36:51,789
Thanks.

00:36:51,789 --> 00:36:51,849

YouTube URL: https://www.youtube.com/watch?v=sJLoOpc5LD8


