Title: RailsConf 2020 CE - Inoculating Rails Auth Against Bug Bounty Hunters by Jason Meller
Publication date: 2020-04-24
Playlist: RailsConf 2020 CE
Description: 
	Inoculating Rails Auth Against Bug Bounty Hunters by Jason Meller

You’ve rolled up your sleeves and built the most secure custom auth ever conceived by a dev team. Suddenly, your CTO informs you that your app will be participating in the Org's new Bug Bounty program. Terror fills your heart as you imagine security experts making mince-meat of your beautiful auth system. If only you knew their game plan... Kolide’s CEO, Jason Meller has been rolling his own Rails auth for over a decade and has the bug bounty receipts to prove it. In this talk, he will walk you through Kolide's actual bounty reports so you can level up your team’s auth system.

__________

Jason Meller is the CEO and Founder of Kolide, a security focused infrastructure analytics company. Jason has spent the majority of his 11 year career building tools and products in Ruby on Rails to aid cyber security professionals with the goal of ultimately making the field more accessible to newcomers.
Captions: 
	00:00:08,530 --> 00:00:13,510
hi everybody my name is Jason Miller I'm

00:00:11,679 --> 00:00:15,519
the CEO and founder of collide and this

00:00:13,510 --> 00:00:18,400
is inoculating rails off against bug

00:00:15,519 --> 00:00:21,520
bounty hunters railsconf 2020 cat

00:00:18,400 --> 00:00:24,910
tradition so a little bit about me

00:00:21,520 --> 00:00:27,880
before we get started so I guess the

00:00:24,910 --> 00:00:29,200
first half of my life I essentially was

00:00:27,880 --> 00:00:31,899
kind of like a little bit of a script

00:00:29,200 --> 00:00:33,760
kitty I've been sort of someone who's

00:00:31,899 --> 00:00:36,190
spent most of her life breaking things

00:00:33,760 --> 00:00:39,070
and then around 2010 I discovered rails

00:00:36,190 --> 00:00:40,690
and as someone who started off their

00:00:39,070 --> 00:00:42,969
career as a cyber security professional

00:00:40,690 --> 00:00:45,190
I found that my passion was basically

00:00:42,969 --> 00:00:48,850
building web apps for folks who really

00:00:45,190 --> 00:00:51,010
wanted to fight the bad guys so my

00:00:48,850 --> 00:00:53,469
career has basically been built on top

00:00:51,010 --> 00:00:56,109
of you know user experience coupled with

00:00:53,469 --> 00:00:58,059
cybersecurity and trying to build good

00:00:56,109 --> 00:01:01,479
tools for defenders and people who

00:00:58,059 --> 00:01:03,249
really care about security issues so as

00:01:01,479 --> 00:01:04,960
part of that you know that the thing

00:01:03,249 --> 00:01:07,300
that I like to do I founded a company

00:01:04,960 --> 00:01:10,120
called collide and essentially cloud is

00:01:07,300 --> 00:01:12,670
just it's a rails app it's a security

00:01:10,120 --> 00:01:14,740
app for devices instead of locking them

00:01:12,670 --> 00:01:17,140
down which we think is a really bad idea

00:01:14,740 --> 00:01:18,729
especially for folks or engineers and

00:01:17,140 --> 00:01:21,250
they need to take full advantage of the

00:01:18,729 --> 00:01:23,320
device that they have it actually looks

00:01:21,250 --> 00:01:26,799
for issues like security and policy

00:01:23,320 --> 00:01:29,590
issues and notifies you on slack when it

00:01:26,799 --> 00:01:31,270
detects those issues so instead of like

00:01:29,590 --> 00:01:33,310
you know having things where you can't

00:01:31,270 --> 00:01:34,600
actually adjust your firewall or you

00:01:33,310 --> 00:01:36,189
know you can't actually change any of

00:01:34,600 --> 00:01:37,390
the settings of your laptop we

00:01:36,189 --> 00:01:38,619
essentially have a little hand on your

00:01:37,390 --> 00:01:41,619
shoulder letting you know when you're in

00:01:38,619 --> 00:01:43,979
violation of major events that put your

00:01:41,619 --> 00:01:46,539
company at risk these are things like

00:01:43,979 --> 00:01:48,820
unencrypted SSH keys that might be used

00:01:46,539 --> 00:01:50,649
to access production or things like oh

00:01:48,820 --> 00:01:52,119
you have a backup of the production

00:01:50,649 --> 00:01:53,859
database on your hard drive and it

00:01:52,119 --> 00:01:55,659
really needs to be removed these are the

00:01:53,859 --> 00:01:57,880
types of things that we detect and we

00:01:55,659 --> 00:01:59,469
try to do that instead of looking for

00:01:57,880 --> 00:02:01,090
things that are more like fear

00:01:59,469 --> 00:02:02,890
uncertainty and doubt like you know

00:02:01,090 --> 00:02:06,670
advanced threat actors and things of

00:02:02,890 --> 00:02:08,259
that nature so because collides our

00:02:06,670 --> 00:02:10,780
rails app we had to make a lot of

00:02:08,259 --> 00:02:12,490
decisions about you know the different

00:02:10,780 --> 00:02:12,900
security practices that we wanted to

00:02:12,490 --> 00:02:15,750
have

00:02:12,900 --> 00:02:17,730
an application so the first thing that

00:02:15,750 --> 00:02:20,430
came up obviously was authentication

00:02:17,730 --> 00:02:22,500
it's a traditional SAS b2b web app and

00:02:20,430 --> 00:02:24,180
just like most of those that needed to

00:02:22,500 --> 00:02:25,709
have the ability for some of you look

00:02:24,180 --> 00:02:28,079
simply login with their username and

00:02:25,709 --> 00:02:29,909
password so like everybody else is sort

00:02:28,079 --> 00:02:32,359
of this build versus by analysis that we

00:02:29,909 --> 00:02:35,220
had to do the key was you know could we

00:02:32,359 --> 00:02:37,019
you know kind of just put in a library

00:02:35,220 --> 00:02:38,220
like devise or did it make sense for us

00:02:37,019 --> 00:02:40,290
to really kind of build stuff from

00:02:38,220 --> 00:02:41,879
scratch and most of the time the answer

00:02:40,290 --> 00:02:43,349
is you really want to focus on the core

00:02:41,879 --> 00:02:46,950
parts of your application and not

00:02:43,349 --> 00:02:48,480
necessarily build you know the extra

00:02:46,950 --> 00:02:50,069
features that need to be there for your

00:02:48,480 --> 00:02:52,620
app to work but I've probably been

00:02:50,069 --> 00:02:54,629
perfected by others in our case though

00:02:52,620 --> 00:02:56,120
we had a little bit of a different you

00:02:54,629 --> 00:02:58,799
know calculus when we made that decision

00:02:56,120 --> 00:03:00,540
the first is that were security company

00:02:58,799 --> 00:03:02,970
so it was really important to us that we

00:03:00,540 --> 00:03:05,700
totally owned and were responsible for

00:03:02,970 --> 00:03:07,920
the authentication flow and from that

00:03:05,700 --> 00:03:10,170
perspective the key deciding factor

00:03:07,920 --> 00:03:12,299
there was that we really had to feel

00:03:10,170 --> 00:03:14,489
that we were in a position where we

00:03:12,299 --> 00:03:15,989
could make the changes necessary as best

00:03:14,489 --> 00:03:18,000
practices developed so if there was a

00:03:15,989 --> 00:03:20,519
new way to really do authentication that

00:03:18,000 --> 00:03:22,379
made our app really you know a hundred

00:03:20,519 --> 00:03:23,730
times more secure we needed to be in a

00:03:22,379 --> 00:03:26,190
position where we understood the entire

00:03:23,730 --> 00:03:28,260
flow correctly the second and most

00:03:26,190 --> 00:03:31,620
important thing was really because we're

00:03:28,260 --> 00:03:33,150
a b2b SAS app we knew that ultimately we

00:03:31,620 --> 00:03:35,459
were gonna have to build an every Bell

00:03:33,150 --> 00:03:36,900
and whistle around off most b2b SAS apps

00:03:35,459 --> 00:03:39,659
they have to deal with password based

00:03:36,900 --> 00:03:41,729
off they have to do SSO saml-based SSO

00:03:39,659 --> 00:03:43,560
with things like akhtar one login they

00:03:41,729 --> 00:03:48,930
typically have a auth so they're you

00:03:43,560 --> 00:03:51,030
know allowing people with office 365 or

00:03:48,930 --> 00:03:52,099
G suite these are things that we knew

00:03:51,030 --> 00:03:54,599
that we were going to need to add

00:03:52,099 --> 00:03:55,889
including multi-factor authentication so

00:03:54,599 --> 00:03:57,269
we wanted to make sure that we were

00:03:55,889 --> 00:03:59,970
building on a foundation that really

00:03:57,269 --> 00:04:01,769
made sense for us I think the key here

00:03:59,970 --> 00:04:03,989
is that we didn't take the decision

00:04:01,769 --> 00:04:06,150
lightly and we realized that auth was

00:04:03,989 --> 00:04:08,220
gonna be a lot of work in fact compared

00:04:06,150 --> 00:04:09,780
to them you know minimal Viable Product

00:04:08,220 --> 00:04:12,389
that we ended up producing as a start-up

00:04:09,780 --> 00:04:14,310
it was probably like 60 or 70% of the

00:04:12,389 --> 00:04:16,500
lines of code that we wrote in Ruby was

00:04:14,310 --> 00:04:17,849
to really handle the auth process and I

00:04:16,500 --> 00:04:19,289
think that's a realistic expectation

00:04:17,849 --> 00:04:21,029
when you're building a new app is that

00:04:19,289 --> 00:04:23,729
you need to get off right you can't

00:04:21,029 --> 00:04:25,650
really MVP off especially for a business

00:04:23,729 --> 00:04:25,920
app and so you're really signing it for

00:04:25,650 --> 00:04:27,780
a lot

00:04:25,920 --> 00:04:30,000
responsibilities that you have to be

00:04:27,780 --> 00:04:32,310
cognizant of if you're not up for that

00:04:30,000 --> 00:04:33,810
responsibility I think that's okay and I

00:04:32,310 --> 00:04:34,920
think that's something that you just

00:04:33,810 --> 00:04:37,050
should be intentional about that

00:04:34,920 --> 00:04:39,510
decision and if you're wondering oh is

00:04:37,050 --> 00:04:40,920
devize still a great solution for this I

00:04:39,510 --> 00:04:42,930
think it's a pretty good solution out of

00:04:40,920 --> 00:04:44,760
the box today I think with some changes

00:04:42,930 --> 00:04:46,230
around password complexity which we're

00:04:44,760 --> 00:04:47,640
gonna talk about a little bit later I

00:04:46,230 --> 00:04:51,210
think it can actually be a really great

00:04:47,640 --> 00:04:54,660
solution so the crux of this talk is

00:04:51,210 --> 00:04:57,510
really about bug bounty programs so what

00:04:54,660 --> 00:04:58,500
is a bug bounty program well I want to

00:04:57,510 --> 00:05:00,210
start off with a little bit of a

00:04:58,500 --> 00:05:01,740
scenario that you know bug bounty

00:05:00,210 --> 00:05:03,870
programs were really designed to address

00:05:01,740 --> 00:05:05,190
and kind of talk through the ways that

00:05:03,870 --> 00:05:07,650
you don't really want to deal with this

00:05:05,190 --> 00:05:09,870
issue so let's imagine a scenario where

00:05:07,650 --> 00:05:11,640
hacker has discovered severe

00:05:09,870 --> 00:05:13,980
vulnerability in your application and

00:05:11,640 --> 00:05:17,310
they're willing to disclose it but only

00:05:13,980 --> 00:05:19,110
for you know a payment well the common

00:05:17,310 --> 00:05:21,630
approach before bug bounty programs

00:05:19,110 --> 00:05:33,060
became popular was something to this

00:05:21,630 --> 00:05:35,220
effect we don't negotiate with

00:05:33,060 --> 00:05:38,490
terrorists so what does that mean in

00:05:35,220 --> 00:05:40,830
practice so a lot of folks they really

00:05:38,490 --> 00:05:42,480
get defensive right away when it hacker

00:05:40,830 --> 00:05:44,190
reaches out to them they found something

00:05:42,480 --> 00:05:46,110
wrong with their application they feel

00:05:44,190 --> 00:05:47,490
anger they feel like they're being taken

00:05:46,110 --> 00:05:50,430
for a ride they feel like they're being

00:05:47,490 --> 00:05:52,140
shaken down and that kind of causes them

00:05:50,430 --> 00:05:53,550
to do some things that actually don't

00:05:52,140 --> 00:05:55,020
end up being in their best interest

00:05:53,550 --> 00:05:56,550
they'll get their lawyer involved which

00:05:55,020 --> 00:05:59,150
will give them a lot of expensive advice

00:05:56,550 --> 00:06:02,310
you know maybe issue some you know

00:05:59,150 --> 00:06:04,260
statements or sort of like you know bad

00:06:02,310 --> 00:06:05,880
things to the attacker that really

00:06:04,260 --> 00:06:07,560
aren't going to be effective they're

00:06:05,880 --> 00:06:09,810
gonna threaten you you know you may end

00:06:07,560 --> 00:06:11,460
up threatening the attacker if they end

00:06:09,810 --> 00:06:13,350
up disclosing any vulnerability that

00:06:11,460 --> 00:06:15,510
they found yet you're not willing to pay

00:06:13,350 --> 00:06:17,400
for it which is kind of weird and you

00:06:15,510 --> 00:06:19,770
may even attempt to implement

00:06:17,400 --> 00:06:21,840
ineffectual technical controls you may

00:06:19,770 --> 00:06:23,610
go to your engineers and say listen we

00:06:21,840 --> 00:06:25,890
need to block this guy's IP address we

00:06:23,610 --> 00:06:26,940
need to delete all their accounts and we

00:06:25,890 --> 00:06:30,210
just don't want them to be able to

00:06:26,940 --> 00:06:32,220
access the application again so what are

00:06:30,210 --> 00:06:32,790
the outcomes if you end up going this

00:06:32,220 --> 00:06:35,370
route

00:06:32,790 --> 00:06:37,680
well the outcomes end up being things

00:06:35,370 --> 00:06:39,060
like well you're not gonna pay for the

00:06:37,680 --> 00:06:40,139
vulnerability so let's just sell

00:06:39,060 --> 00:06:42,480
to the highest bidder which is an

00:06:40,139 --> 00:06:44,820
effective strategy for the hacker if

00:06:42,480 --> 00:06:46,380
your service is really popular and if

00:06:44,820 --> 00:06:47,700
there's no bidders well maybe they can

00:06:46,380 --> 00:06:50,490
leverage that vulnerability to actually

00:06:47,700 --> 00:06:52,110
do things like exfiltrate you know users

00:06:50,490 --> 00:06:53,880
from your database or actually even get

00:06:52,110 --> 00:06:56,310
password dumps of hashes and things like

00:06:53,880 --> 00:06:58,410
that but perhaps you know maybe the

00:06:56,310 --> 00:07:00,660
hacker isn't a criminal well at the very

00:06:58,410 --> 00:07:02,630
least you know instead of doing things

00:07:00,660 --> 00:07:05,550
that are going to you know further

00:07:02,630 --> 00:07:06,570
extort you they're gonna just post about

00:07:05,550 --> 00:07:08,130
it on their blog you know they're

00:07:06,570 --> 00:07:10,530
probably proud of the things that they

00:07:08,130 --> 00:07:12,270
did and they want to be able to you know

00:07:10,530 --> 00:07:14,070
talk about it and likely they're gonna

00:07:12,270 --> 00:07:16,020
include the conversations that they had

00:07:14,070 --> 00:07:17,580
with you including all the legal threats

00:07:16,020 --> 00:07:20,550
that you may have given them things like

00:07:17,580 --> 00:07:22,200
that basically what I'm saying is 99% of

00:07:20,550 --> 00:07:24,479
in these scenarios your company's gonna

00:07:22,200 --> 00:07:26,700
be worse off and your unwillingness to

00:07:24,479 --> 00:07:30,030
reward someone is really gonna you know

00:07:26,700 --> 00:07:31,800
basically end up costing you from a

00:07:30,030 --> 00:07:33,960
security perspective reputational

00:07:31,800 --> 00:07:36,810
perspective and you know it's just gonna

00:07:33,960 --> 00:07:38,970
hurt your business overall so let's just

00:07:36,810 --> 00:07:40,830
kind of talk a little bit about the

00:07:38,970 --> 00:07:42,720
perspective of the attacker

00:07:40,830 --> 00:07:44,510
you know the hacker the the researcher

00:07:42,720 --> 00:07:49,260
whatever you'd like to call them and

00:07:44,510 --> 00:07:51,479
what kind of causes them to really want

00:07:49,260 --> 00:07:53,669
to do responsible disclosure well if you

00:07:51,479 --> 00:07:55,289
think like someone even in in the past I

00:07:53,669 --> 00:07:58,080
was sort of in this in this camp was I

00:07:55,289 --> 00:07:59,580
really liked breaking things I loved you

00:07:58,080 --> 00:08:01,979
know coming up with creative solution to

00:07:59,580 --> 00:08:03,810
work around apparent security that was

00:08:01,979 --> 00:08:06,060
in place and I wanted to do that all day

00:08:03,810 --> 00:08:07,610
long the problem is is that at least

00:08:06,060 --> 00:08:09,870
when I was doing in the 90s and early

00:08:07,610 --> 00:08:11,610
2000s there was really no way to do that

00:08:09,870 --> 00:08:13,680
and also be on the right side of the law

00:08:11,610 --> 00:08:15,840
I was constantly thinking about Oh am I

00:08:13,680 --> 00:08:17,250
in a position where I'm doing something

00:08:15,840 --> 00:08:19,200
that's going to eventually have the FBI

00:08:17,250 --> 00:08:20,820
knocking down my door but I want to be

00:08:19,200 --> 00:08:22,830
able to do it constantly so is there a

00:08:20,820 --> 00:08:24,510
way for me to earn money from this well

00:08:22,830 --> 00:08:26,070
with responsible disclosure kind of

00:08:24,510 --> 00:08:29,190
through a bug bounty program you're

00:08:26,070 --> 00:08:31,289
helping your you're helping the

00:08:29,190 --> 00:08:34,200
attackers essentially get to a point

00:08:31,289 --> 00:08:35,459
where they can enjoy what they do they

00:08:34,200 --> 00:08:37,620
can actually have it be their full-time

00:08:35,459 --> 00:08:39,360
job and then not have to kind of have a

00:08:37,620 --> 00:08:40,950
you know looking over their shoulder

00:08:39,360 --> 00:08:43,020
where they're worried about like the FBI

00:08:40,950 --> 00:08:44,880
or the CIA getting involved with their

00:08:43,020 --> 00:08:47,400
activities and so you're providing a

00:08:44,880 --> 00:08:49,740
legal and potentially profitable way for

00:08:47,400 --> 00:08:51,450
them to practice their craft and it's a

00:08:49,740 --> 00:08:52,300
win for them but it's also win for you

00:08:51,450 --> 00:08:54,720
because you're getting

00:08:52,300 --> 00:08:57,279
what ends up being a highly discounted

00:08:54,720 --> 00:09:00,070
continuous penetration test for your

00:08:57,279 --> 00:09:01,630
application so this is why this exists

00:09:00,070 --> 00:09:03,250
it's not because it's charity or

00:09:01,630 --> 00:09:04,750
something that you want to do to kind of

00:09:03,250 --> 00:09:06,339
quell hackers it's because there's value

00:09:04,750 --> 00:09:08,980
to your business and actually moving

00:09:06,339 --> 00:09:10,990
forward with a bug bounty program so

00:09:08,980 --> 00:09:12,160
let's say I've convinced you and you

00:09:10,990 --> 00:09:13,720
want to move forward with a bug bounty

00:09:12,160 --> 00:09:16,779
program you're signing up for like

00:09:13,720 --> 00:09:18,910
hacker one at this exact moment what are

00:09:16,779 --> 00:09:20,769
some of the pitfalls and how you may

00:09:18,910 --> 00:09:22,810
incorrectly implement this bug bounty

00:09:20,769 --> 00:09:24,970
program well the biggest thing is that

00:09:22,810 --> 00:09:27,579
you may still be on the defensive when

00:09:24,970 --> 00:09:29,079
someone actually starts probing your

00:09:27,579 --> 00:09:32,200
application for vulnerabilities

00:09:29,079 --> 00:09:33,760
typically researchers hackers they they

00:09:32,200 --> 00:09:35,680
end up you know kind of creating a lot

00:09:33,760 --> 00:09:37,180
of noise through exceptions in your

00:09:35,680 --> 00:09:38,320
application you'll see them probing

00:09:37,180 --> 00:09:40,329
different controllers so you know

00:09:38,320 --> 00:09:41,709
passing invalid formats these are gonna

00:09:40,329 --> 00:09:43,420
be noisy and you're gonna become aware

00:09:41,709 --> 00:09:45,430
of them and it's at that moment that you

00:09:43,420 --> 00:09:47,290
have to make a critical decision is this

00:09:45,430 --> 00:09:48,730
person actually impacting the app in a

00:09:47,290 --> 00:09:50,769
way that other users are gonna have a

00:09:48,730 --> 00:09:52,300
degraded experience or they just

00:09:50,769 --> 00:09:54,880
creating like a lot of noise for my team

00:09:52,300 --> 00:09:56,740
to look through and generally it's okay

00:09:54,880 --> 00:09:58,839
and if it's more of the latter than the

00:09:56,740 --> 00:10:00,490
former I employee to let them finish

00:09:58,839 --> 00:10:02,350
their job because they may end up

00:10:00,490 --> 00:10:03,640
providing you with a really valuable bug

00:10:02,350 --> 00:10:05,350
report sure you're gonna have to pay for

00:10:03,640 --> 00:10:06,880
it but you're gonna learn something that

00:10:05,350 --> 00:10:08,529
you didn't know at the end of the day if

00:10:06,880 --> 00:10:11,260
you stop that work early on you're

00:10:08,529 --> 00:10:14,920
you're essentially negating all the

00:10:11,260 --> 00:10:16,690
benefit of the program ultimately a lot

00:10:14,920 --> 00:10:20,170
of the other bullets here are related to

00:10:16,690 --> 00:10:22,570
kind of minimizing or finding a way of

00:10:20,170 --> 00:10:24,850
weaseling out of doing the reward for a

00:10:22,570 --> 00:10:26,279
valid bug bounty report either you know

00:10:24,850 --> 00:10:28,420
through like kind of a bad faith

00:10:26,279 --> 00:10:30,100
argument around the impact of the

00:10:28,420 --> 00:10:31,149
reports so you can actually minimize the

00:10:30,100 --> 00:10:33,610
amount of money you want to pay out

00:10:31,149 --> 00:10:35,529
paying out less than you know something

00:10:33,610 --> 00:10:38,020
like hacker one is actually recommending

00:10:35,529 --> 00:10:40,690
through their program or you know you've

00:10:38,020 --> 00:10:42,370
you someone has repeated a bug that you

00:10:40,690 --> 00:10:43,899
got but you didn't end up fixing in a

00:10:42,370 --> 00:10:45,730
timely manner but you're just gonna say

00:10:43,899 --> 00:10:47,560
we don't get any value of this because

00:10:45,730 --> 00:10:49,480
we already knew it existed I think

00:10:47,560 --> 00:10:51,910
that's the wrong way to go and the

00:10:49,480 --> 00:10:54,040
reason why is you're actually you want

00:10:51,910 --> 00:10:56,019
to incentivize those those attackers to

00:10:54,040 --> 00:10:58,120
come back and you want them to actually

00:10:56,019 --> 00:10:59,440
you know work through beyond like the

00:10:58,120 --> 00:11:00,459
basic vole nura bilities that they're

00:10:59,440 --> 00:11:02,260
finding so even though they might be

00:11:00,459 --> 00:11:04,660
finding repeats at first if you

00:11:02,260 --> 00:11:05,980
financially incentivize them above the

00:11:04,660 --> 00:11:07,120
normal payout amount

00:11:05,980 --> 00:11:10,090
you're gonna be in a position where

00:11:07,120 --> 00:11:12,040
they're actually going to be coming back

00:11:10,090 --> 00:11:13,810
to your app and actually you know

00:11:12,040 --> 00:11:16,510
running it through its paces and you

00:11:13,810 --> 00:11:17,710
might find some new stuff as well the

00:11:16,510 --> 00:11:19,690
biggest problem though that you can

00:11:17,710 --> 00:11:21,820
maybe find yourself in is you end up

00:11:19,690 --> 00:11:24,160
kind of over legislating your bug bounty

00:11:21,820 --> 00:11:26,560
program and you end up placing a lot of

00:11:24,160 --> 00:11:28,840
things at a scope in fact valve was

00:11:26,560 --> 00:11:30,370
guilty of this exact thing last summer

00:11:28,840 --> 00:11:32,290
so I'm going to use them as a little bit

00:11:30,370 --> 00:11:34,930
of a use case here and talk about the

00:11:32,290 --> 00:11:37,900
wrong way to approach this so last

00:11:34,930 --> 00:11:40,600
summer major headline draft about that

00:11:37,900 --> 00:11:42,580
Valve through their Steam client which

00:11:40,600 --> 00:11:45,010
the headline was hacker dropped steam

00:11:42,580 --> 00:11:47,680
zero day after being banned from valve

00:11:45,010 --> 00:11:48,760
bug bounty program this is huge and it's

00:11:47,680 --> 00:11:49,870
definitely one of those things that you

00:11:48,760 --> 00:11:51,880
don't want to see as a company a

00:11:49,870 --> 00:11:53,350
headline about you so there's two

00:11:51,880 --> 00:11:54,580
critical things that caused this to

00:11:53,350 --> 00:11:56,560
happen we're gonna walk through the

00:11:54,580 --> 00:11:58,360
entire scenario but for Valve's bug

00:11:56,560 --> 00:12:00,790
bounty program they ended up getting a

00:11:58,360 --> 00:12:02,740
lot of reports around vulnerabilities

00:12:00,790 --> 00:12:04,990
that required one or two things the

00:12:02,740 --> 00:12:07,300
first was attacks that required the

00:12:04,990 --> 00:12:09,910
ability to drop files and arbitrary

00:12:07,300 --> 00:12:11,980
locations on the users file system and

00:12:09,910 --> 00:12:14,500
the second one was attacks that required

00:12:11,980 --> 00:12:16,000
physical access to the users device and

00:12:14,500 --> 00:12:17,170
there was just so many these reports

00:12:16,000 --> 00:12:18,520
that are getting they were like we can't

00:12:17,170 --> 00:12:20,290
pay for all these we're not going to be

00:12:18,520 --> 00:12:22,210
able to fix all of them so we're just

00:12:20,290 --> 00:12:25,540
gonna not pay out and they're just out

00:12:22,210 --> 00:12:26,860
of scope so this let's see how this this

00:12:25,540 --> 00:12:29,110
played out in reality with this

00:12:26,860 --> 00:12:30,760
particular hacker so the hacker ended up

00:12:29,110 --> 00:12:32,560
reporting a series of privilege

00:12:30,760 --> 00:12:34,330
escalation vulnerabilities about the

00:12:32,560 --> 00:12:36,580
Steam client but they required either

00:12:34,330 --> 00:12:37,900
one or both of the out of scope

00:12:36,580 --> 00:12:38,320
vulnerabilities that we mentioned

00:12:37,900 --> 00:12:40,210
earlier

00:12:38,320 --> 00:12:42,610
so valves for their credit they

00:12:40,210 --> 00:12:44,020
responded right away but they responded

00:12:42,610 --> 00:12:45,580
with the report being not applicable

00:12:44,020 --> 00:12:48,490
because it was out of scope for the

00:12:45,580 --> 00:12:49,990
program so it shouldn't surprise you

00:12:48,490 --> 00:12:51,580
that okay well the hacker something to

00:12:49,990 --> 00:12:52,960
be paid for this so they're gonna kind

00:12:51,580 --> 00:12:54,880
of revert back to what I was talking

00:12:52,960 --> 00:12:57,660
about earlier they're gonna immediately

00:12:54,880 --> 00:13:00,580
disclose the vulnerability finally

00:12:57,660 --> 00:13:02,860
because they hated to have have actually

00:13:00,580 --> 00:13:05,500
banned him from their bug bounty program

00:13:02,860 --> 00:13:06,850
which was just ridiculous suddenly

00:13:05,500 --> 00:13:08,460
something wasn't worth paying out for

00:13:06,850 --> 00:13:10,510
but because they were so angry he

00:13:08,460 --> 00:13:14,140
disclosed it publicly they're actually

00:13:10,510 --> 00:13:16,870
banning it now this is where the story

00:13:14,140 --> 00:13:18,190
takes a turn the hacker continued you

00:13:16,870 --> 00:13:19,459
know to find more serious loner

00:13:18,190 --> 00:13:21,379
abilities in the Steam client that

00:13:19,459 --> 00:13:24,050
didn't necessarily require these out of

00:13:21,379 --> 00:13:25,579
scope vulnerabilities but because they

00:13:24,050 --> 00:13:28,429
were banned from the bug bounty program

00:13:25,579 --> 00:13:30,050
and sort of persona non-grata they just

00:13:28,429 --> 00:13:31,459
immediately describe disclose them as

00:13:30,050 --> 00:13:34,040
zero day vulnerabilities because they

00:13:31,459 --> 00:13:36,350
couldn't report and as a result you know

00:13:34,040 --> 00:13:37,459
there's a PR nightmare for valve users

00:13:36,350 --> 00:13:39,709
aren't safe and it was a horrible

00:13:37,459 --> 00:13:41,839
outcome the ultimate takeaway here is

00:13:39,709 --> 00:13:44,619
that there is a headline test that you

00:13:41,839 --> 00:13:46,639
should be applying to every

00:13:44,619 --> 00:13:49,399
vulnerability report that you get if

00:13:46,639 --> 00:13:51,290
it's really truly not a big deal then it

00:13:49,399 --> 00:13:53,809
should pass this test and the test is

00:13:51,290 --> 00:13:55,579
simply this before deciding not to pay

00:13:53,809 --> 00:13:57,290
imagine the report becomes a headline

00:13:55,579 --> 00:13:59,360
and your favorite newspaper Washington

00:13:57,290 --> 00:14:01,220
Post you know New York Times whatever

00:13:59,360 --> 00:14:02,990
are you still okay with that headline

00:14:01,220 --> 00:14:05,360
being there and not paying because if

00:14:02,990 --> 00:14:06,589
the answer is no you should pay up for

00:14:05,360 --> 00:14:08,569
obvious reasons because there's nothing

00:14:06,589 --> 00:14:10,339
stopping that person from simply

00:14:08,569 --> 00:14:12,019
publishing the results results a

00:14:10,339 --> 00:14:16,850
journalist finding it and becoming a

00:14:12,019 --> 00:14:19,339
headline so we now live in a world full

00:14:16,850 --> 00:14:20,839
of bug bounty programs probably many of

00:14:19,339 --> 00:14:22,369
the organizations you work for already

00:14:20,839 --> 00:14:23,480
have one set up maybe they can be

00:14:22,369 --> 00:14:25,369
upgrade with some of the advice they

00:14:23,480 --> 00:14:27,860
just gave but ultimately they're there

00:14:25,369 --> 00:14:30,740
so now hackers are sort of they're faced

00:14:27,860 --> 00:14:33,259
with the economics of actually being in

00:14:30,740 --> 00:14:34,850
business as a bug bounty hunter and when

00:14:33,259 --> 00:14:37,459
I say bug bounty hunter I'm talking

00:14:34,850 --> 00:14:40,069
about someone who's really doing this in

00:14:37,459 --> 00:14:41,629
an automated fashion and they're

00:14:40,069 --> 00:14:44,449
numerating as many organizations as

00:14:41,629 --> 00:14:46,040
possible so that they can actually reap

00:14:44,449 --> 00:14:48,079
the max amount of financial gain that

00:14:46,040 --> 00:14:50,449
they can so their process is very simple

00:14:48,079 --> 00:14:52,449
and numerate companies use automated

00:14:50,449 --> 00:14:54,350
tools to find kind of low-hanging fruit

00:14:52,449 --> 00:14:55,910
continue to manually inspect those

00:14:54,350 --> 00:14:56,899
companies for more things pull

00:14:55,910 --> 00:14:58,549
everything together and like an

00:14:56,899 --> 00:15:01,069
automated report with pre generates

00:14:58,549 --> 00:15:04,100
snippets and then submit wait and then

00:15:01,069 --> 00:15:06,139
profit so there really is an art though

00:15:04,100 --> 00:15:08,119
to finding these vulnerabilities because

00:15:06,139 --> 00:15:09,769
if you think about them on a spectrum

00:15:08,119 --> 00:15:11,209
you have sort of low payout

00:15:09,769 --> 00:15:12,980
vulnerabilities that are valid but

00:15:11,209 --> 00:15:14,389
they're not damaging and then you have

00:15:12,980 --> 00:15:15,920
high payout vulnerabilities where

00:15:14,389 --> 00:15:17,480
there's this massive impact of the

00:15:15,920 --> 00:15:19,610
business they want to be on that right

00:15:17,480 --> 00:15:22,160
side and then on the other side of the

00:15:19,610 --> 00:15:24,709
spectrum you have manual discovery the

00:15:22,160 --> 00:15:27,199
amount of you know actual effort hours

00:15:24,709 --> 00:15:28,999
of singular effort that that hacker has

00:15:27,199 --> 00:15:31,549
to put in versus can I just use

00:15:28,999 --> 00:15:32,620
automated tools to find them so you know

00:15:31,549 --> 00:15:33,730
obviously where we're going with

00:15:32,620 --> 00:15:35,560
this is that they want to be in that

00:15:33,730 --> 00:15:39,610
upper right quadrant that's where all

00:15:35,560 --> 00:15:41,650
that the high payout chief action is now

00:15:39,610 --> 00:15:43,840
that really consists of like things like

00:15:41,650 --> 00:15:45,400
that are in the a wasp top-10 you have

00:15:43,840 --> 00:15:46,060
sequel injection basic cross-site

00:15:45,400 --> 00:15:47,830
scripting

00:15:46,060 --> 00:15:49,960
you know broken off just straight-up

00:15:47,830 --> 00:15:51,340
broken off medications session replay

00:15:49,960 --> 00:15:52,810
attacks we're not gonna get into the

00:15:51,340 --> 00:15:53,920
nitty-gritty of these I definitely

00:15:52,810 --> 00:15:55,390
implore you to look into what they are

00:15:53,920 --> 00:15:57,070
if you're not familiar with them but you

00:15:55,390 --> 00:15:59,860
may not be because rails really does a

00:15:57,070 --> 00:16:01,510
great job of mitigating these at a basic

00:15:59,860 --> 00:16:02,830
level of course it's still up to you to

00:16:01,510 --> 00:16:04,900
make sure that you're not working around

00:16:02,830 --> 00:16:06,610
those mitigations but for the most part

00:16:04,900 --> 00:16:08,710
rails is there and for the most part

00:16:06,610 --> 00:16:10,480
most mature applications have a lot of

00:16:08,710 --> 00:16:12,460
these solved anyway so it's really

00:16:10,480 --> 00:16:14,590
behooves you know someone who's trying

00:16:12,460 --> 00:16:16,210
to be an economic hacker to not really

00:16:14,590 --> 00:16:18,040
focus on these because that low-hanging

00:16:16,210 --> 00:16:20,650
fruit has already been picked so what

00:16:18,040 --> 00:16:22,840
can they do in relation to you know

00:16:20,650 --> 00:16:24,550
still getting the highest payout for the

00:16:22,840 --> 00:16:26,770
least amount of effort well the goal is

00:16:24,550 --> 00:16:28,420
and what we sort of call vulnerability

00:16:26,770 --> 00:16:29,860
chin so what they're gonna start doing

00:16:28,420 --> 00:16:31,930
is they're gonna start trying to find

00:16:29,860 --> 00:16:34,450
lower payout that they can still

00:16:31,930 --> 00:16:37,780
automatically discover but once they do

00:16:34,450 --> 00:16:39,190
can they actually do things where

00:16:37,780 --> 00:16:42,520
they're actually chaining them together

00:16:39,190 --> 00:16:44,590
with maybe lower or even higher payout

00:16:42,520 --> 00:16:47,620
manual vulnerabilities to actually have

00:16:44,590 --> 00:16:51,190
them um you know a multiplier effect to

00:16:47,620 --> 00:16:52,780
improve their outcome so the goal here

00:16:51,190 --> 00:16:55,150
is like can we actually take all these

00:16:52,780 --> 00:16:56,650
things together and combine them

00:16:55,150 --> 00:16:58,570
together in a giant chaining

00:16:56,650 --> 00:17:01,570
vulnerability and generate something

00:16:58,570 --> 00:17:03,490
that's just completely unspeakable evil

00:17:01,570 --> 00:17:07,750
that a company's gonna pay out big bucks

00:17:03,490 --> 00:17:09,850
for so and in my world we call that

00:17:07,750 --> 00:17:12,160
chaining vulnerabilities essentially

00:17:09,850 --> 00:17:13,900
what couldn't hunters do to turn turns

00:17:12,160 --> 00:17:15,640
seemingly innocuous low payout

00:17:13,900 --> 00:17:19,630
vulnerabilities into major

00:17:15,640 --> 00:17:21,940
payout monsters so chaining

00:17:19,630 --> 00:17:24,160
vulnerabilities here's a real report

00:17:21,940 --> 00:17:25,900
that we received this is very early on

00:17:24,160 --> 00:17:27,040
the collides life is for an app that we

00:17:25,900 --> 00:17:28,690
no longer have anymore

00:17:27,040 --> 00:17:30,130
but just like I talked about in the

00:17:28,690 --> 00:17:32,020
abstract I really wanted to share real

00:17:30,130 --> 00:17:33,700
reports so that you guys get a sense of

00:17:32,020 --> 00:17:36,460
the types of things that we actually see

00:17:33,700 --> 00:17:38,620
in the wild so this is again we use

00:17:36,460 --> 00:17:41,620
hacker 1 for our bug bounty program we

00:17:38,620 --> 00:17:43,240
ended up paying $1,350 for this and for

00:17:41,620 --> 00:17:44,430
us at a time we were a fledgling startup

00:17:43,240 --> 00:17:46,350
we didn't have an

00:17:44,430 --> 00:17:47,940
you know in our bank account this is a

00:17:46,350 --> 00:17:50,160
really big deal for us to be able to pay

00:17:47,940 --> 00:17:52,830
this out but you'll see why in a second

00:17:50,160 --> 00:17:54,450
so there's five chain vulnerabilities

00:17:52,830 --> 00:17:56,100
that made this end up working in I'll

00:17:54,450 --> 00:17:57,180
talk about the outcome of how these

00:17:56,100 --> 00:17:58,710
chain building abilities there but

00:17:57,180 --> 00:18:01,050
you'll you'll see that there there's a

00:17:58,710 --> 00:18:02,760
lot of innocuous stuff here first it was

00:18:01,050 --> 00:18:05,070
a store you know cross-site scripting

00:18:02,760 --> 00:18:06,720
attack which is never good the second

00:18:05,070 --> 00:18:08,550
was even though we had a content

00:18:06,720 --> 00:18:10,020
security policy to kind of mitigate some

00:18:08,550 --> 00:18:11,580
of the risk around a cross-site

00:18:10,020 --> 00:18:15,390
scripting attack they were able to

00:18:11,580 --> 00:18:17,400
bypass that we had some several low

00:18:15,390 --> 00:18:19,260
value cookies in our app they weren't

00:18:17,400 --> 00:18:20,700
the session cookie was protected but we

00:18:19,260 --> 00:18:23,700
had some like kind of trivial cookies

00:18:20,700 --> 00:18:26,580
like holding like the email for the

00:18:23,700 --> 00:18:27,540
remember me form for pre-populating

00:18:26,580 --> 00:18:31,650
email address and like the off and

00:18:27,540 --> 00:18:33,300
things like that and then we kind of had

00:18:31,650 --> 00:18:34,860
this ability for someone to write any

00:18:33,300 --> 00:18:36,600
value that they wanted so when they were

00:18:34,860 --> 00:18:38,040
logging in and this sort of two-phase

00:18:36,600 --> 00:18:39,570
logging set up where you put in your

00:18:38,040 --> 00:18:42,330
email address and then we redirect you

00:18:39,570 --> 00:18:43,590
to the right login flow they just could

00:18:42,330 --> 00:18:45,120
put in whatever they want we would

00:18:43,590 --> 00:18:46,440
remember that email address for next

00:18:45,120 --> 00:18:47,730
time but they realize it could be

00:18:46,440 --> 00:18:50,790
anything it didn't have to be an email

00:18:47,730 --> 00:18:52,500
address and then based on that there was

00:18:50,790 --> 00:18:54,840
sort of this idea around a theoretical

00:18:52,500 --> 00:18:57,600
open redirect now all these you know

00:18:54,840 --> 00:19:00,210
vulnerabilities by themselves we're

00:18:57,600 --> 00:19:01,980
talking about like $100 maybe $150 for

00:19:00,210 --> 00:19:03,450
some of them the theoretical attack is

00:19:01,980 --> 00:19:06,120
obviously useless unless you're chaining

00:19:03,450 --> 00:19:08,310
it together so we're in a position where

00:19:06,120 --> 00:19:10,440
you know individually we're talking like

00:19:08,310 --> 00:19:12,750
little peanut stuff maybe not the

00:19:10,440 --> 00:19:14,970
chrysler scripting but you know what the

00:19:12,750 --> 00:19:16,800
CSP bypass becomes more valuable so the

00:19:14,970 --> 00:19:18,630
value grows as you kind of move down the

00:19:16,800 --> 00:19:20,100
chain but ultimately what they were able

00:19:18,630 --> 00:19:23,760
to do is they were actually able to

00:19:20,100 --> 00:19:26,730
redirect users after login by actually

00:19:23,760 --> 00:19:28,320
forcing a cookie to onto their device

00:19:26,730 --> 00:19:30,630
that would actually cause them to

00:19:28,320 --> 00:19:32,370
redirect it to a spoofed page off site

00:19:30,630 --> 00:19:34,200
to actually collect their credentials

00:19:32,370 --> 00:19:35,190
so using this chain of vulnerabilities

00:19:34,200 --> 00:19:37,860
they were able to do something kind of

00:19:35,190 --> 00:19:39,240
unspeakably evil and if we had this type

00:19:37,860 --> 00:19:40,650
of vulnerability in our app today now

00:19:39,240 --> 00:19:42,630
that we have hundreds of customers are

00:19:40,650 --> 00:19:45,360
doing well financially we would have

00:19:42,630 --> 00:19:48,150
paid out probably 10 15 maybe even 20

00:19:45,360 --> 00:19:50,670
acts this amount you know because of the

00:19:48,150 --> 00:19:52,440
proportionate impact that this had so it

00:19:50,670 --> 00:19:54,570
was fortunate that we had a bug bounty

00:19:52,440 --> 00:19:56,070
program early to kind of catch this but

00:19:54,570 --> 00:19:58,140
it goes to show you how these chain

00:19:56,070 --> 00:20:00,720
donor abilities can really

00:19:58,140 --> 00:20:03,570
so what is your goal you want to

00:20:00,720 --> 00:20:05,820
inoculate your app against easy to find

00:20:03,570 --> 00:20:07,890
but obscure bugs especially in the

00:20:05,820 --> 00:20:09,600
authentication region because most apps

00:20:07,890 --> 00:20:11,550
have off so they're gonna focus their

00:20:09,600 --> 00:20:12,540
automated attacks there and that will

00:20:11,550 --> 00:20:14,940
allow you to prevent something like a

00:20:12,540 --> 00:20:17,940
500 dollar bug from becoming a ten

00:20:14,940 --> 00:20:19,800
thousand dollar bug so really quickly

00:20:17,940 --> 00:20:21,960
what we're gonna do is we're gonna talk

00:20:19,800 --> 00:20:23,970
about another real bug bounty report

00:20:21,960 --> 00:20:26,340
that colide received this one we only

00:20:23,970 --> 00:20:28,650
paid $250 for because we didn't have

00:20:26,340 --> 00:20:30,720
that chaining that I'm talking about but

00:20:28,650 --> 00:20:33,030
let's go into it the basic premise of

00:20:30,720 --> 00:20:34,050
this attack was that right off the bat

00:20:33,030 --> 00:20:36,030
they're coming in with an assumption

00:20:34,050 --> 00:20:38,490
that the attacker already has access to

00:20:36,030 --> 00:20:39,720
a user's account so they've already

00:20:38,490 --> 00:20:41,760
established that it's a big assumption

00:20:39,720 --> 00:20:43,470
but we'll go into it the second

00:20:41,760 --> 00:20:44,760
assumption that we can make is that

00:20:43,470 --> 00:20:46,170
because they have access to the account

00:20:44,760 --> 00:20:48,120
they have a valid session cookie that

00:20:46,170 --> 00:20:50,070
they can replay to us at any time we'll

00:20:48,120 --> 00:20:51,450
take that session cookie and it's

00:20:50,070 --> 00:20:54,450
essentially like a password right they

00:20:51,450 --> 00:20:58,980
could just log in essentially from there

00:20:54,450 --> 00:21:00,300
they discovered that if a victim knew

00:20:58,980 --> 00:21:02,700
that they were there they're like I got

00:21:00,300 --> 00:21:04,530
to reset my password to lock this person

00:21:02,700 --> 00:21:06,480
out it wouldn't matter even though the

00:21:04,530 --> 00:21:08,250
password reset their session remained

00:21:06,480 --> 00:21:09,930
valid and they could continue to use

00:21:08,250 --> 00:21:12,360
that person's account no matter how they

00:21:09,930 --> 00:21:14,010
change their off so ultimately the

00:21:12,360 --> 00:21:16,830
problem here is that the attacker

00:21:14,010 --> 00:21:19,320
retains access indefinitely by replaying

00:21:16,830 --> 00:21:22,710
that singular existing valid session

00:21:19,320 --> 00:21:24,420
over and over again so why was this a

00:21:22,710 --> 00:21:26,520
big problem in our rails app if you know

00:21:24,420 --> 00:21:29,310
I've been doing this for 10 years and

00:21:26,520 --> 00:21:31,140
you know we've been doing it and how is

00:21:29,310 --> 00:21:32,520
how was this able to slip by well I

00:21:31,140 --> 00:21:33,990
think this is one of those cases where

00:21:32,520 --> 00:21:36,150
rails just happens to be especially

00:21:33,990 --> 00:21:38,550
vulnerable and the big reason why is by

00:21:36,150 --> 00:21:40,800
default rails the session store uses

00:21:38,550 --> 00:21:43,590
cookies and cookies just don't lend

00:21:40,800 --> 00:21:45,660
themselves to serve initiated revocation

00:21:43,590 --> 00:21:47,250
so if I'm a server and I want to get you

00:21:45,660 --> 00:21:48,390
know that cookie off someone's computer

00:21:47,250 --> 00:21:50,760
and I want to make sure that it's

00:21:48,390 --> 00:21:52,920
invalid it's kind of not obvious on how

00:21:50,760 --> 00:21:55,080
I would maybe want to do that and the

00:21:52,920 --> 00:21:57,270
other issue is that you know using

00:21:55,080 --> 00:21:59,670
something like has secure password you

00:21:57,270 --> 00:22:01,890
know it isn't as batteries included as

00:21:59,670 --> 00:22:03,330
something like devises where this is

00:22:01,890 --> 00:22:05,520
sort of thoughtful in the past and reset

00:22:03,330 --> 00:22:07,530
flows so this is a perfect example of we

00:22:05,520 --> 00:22:09,930
rolled our own off very early on in the

00:22:07,530 --> 00:22:11,460
the history of the company and we ended

00:22:09,930 --> 00:22:13,740
up doing something worse than what was

00:22:11,460 --> 00:22:15,060
available on the market so this is one

00:22:13,740 --> 00:22:18,750
of the downsides of actually rolling

00:22:15,060 --> 00:22:20,280
your own authentication so let's analyze

00:22:18,750 --> 00:22:24,960
the vulnerability chain here really

00:22:20,280 --> 00:22:27,000
quickly so we first have the actual

00:22:24,960 --> 00:22:28,470
reported vulnerability and that's really

00:22:27,000 --> 00:22:30,360
there's two segments that there's lack

00:22:28,470 --> 00:22:32,400
of session revocation there's no

00:22:30,360 --> 00:22:35,040
mechanism at off worth and the second is

00:22:32,400 --> 00:22:37,140
even if there was a mechanism which

00:22:35,040 --> 00:22:38,460
there isn't we're not actually utilizing

00:22:37,140 --> 00:22:40,350
it to actually protect any high risk

00:22:38,460 --> 00:22:42,180
actions so this is the main thing that

00:22:40,350 --> 00:22:43,980
we want to focus on but the things that

00:22:42,180 --> 00:22:45,930
are really important to think about is

00:22:43,980 --> 00:22:49,040
that assumption earlier the attacker

00:22:45,930 --> 00:22:51,780
already has access to the users account

00:22:49,040 --> 00:22:53,880
well why well is it because we have a

00:22:51,780 --> 00:22:55,500
poor password quality issue is there

00:22:53,880 --> 00:22:57,630
valid account enumeration were they able

00:22:55,500 --> 00:22:59,490
to guess you know a valid account and

00:22:57,630 --> 00:23:01,890
then use that you know poor pasture

00:22:59,490 --> 00:23:03,210
quality gain access that way or maybe

00:23:01,890 --> 00:23:04,770
there was just a lack of multi-factor

00:23:03,210 --> 00:23:06,510
off which would have stopped them even

00:23:04,770 --> 00:23:07,620
if they knew the password or maybe they

00:23:06,510 --> 00:23:09,300
didn't even know the password at all

00:23:07,620 --> 00:23:11,190
which was likely and they were just able

00:23:09,300 --> 00:23:13,380
to get access to the session cookie you

00:23:11,190 --> 00:23:15,600
know via cross-site scripting so this is

00:23:13,380 --> 00:23:17,520
a perfect example of how you know this

00:23:15,600 --> 00:23:19,110
bacon assumption which may kind of force

00:23:17,520 --> 00:23:20,280
you to get defensive and say oh I don't

00:23:19,110 --> 00:23:22,740
want to pay after this vulnerability

00:23:20,280 --> 00:23:24,480
because the the premise is so ridiculous

00:23:22,740 --> 00:23:25,560
they already have access well if you

00:23:24,480 --> 00:23:27,540
actually think through that you may

00:23:25,560 --> 00:23:28,440
actually learn a little bit about you

00:23:27,540 --> 00:23:30,540
know thinking through those scenarios

00:23:28,440 --> 00:23:31,950
you might be in a position where you can

00:23:30,540 --> 00:23:34,080
improve the security of your app and

00:23:31,950 --> 00:23:35,730
it's these types of things where this

00:23:34,080 --> 00:23:37,170
will multiply the payout if they can

00:23:35,730 --> 00:23:38,880
actually show this part where they don't

00:23:37,170 --> 00:23:41,880
have to start off with the assumption of

00:23:38,880 --> 00:23:44,220
I'm already in then it becomes a much

00:23:41,880 --> 00:23:46,830
more serious manner it's much easier to

00:23:44,220 --> 00:23:48,750
save this was a headline this sounds

00:23:46,830 --> 00:23:50,220
like a really bad vulnerability but

00:23:48,750 --> 00:23:52,410
what's even worse is after the

00:23:50,220 --> 00:23:54,990
vulnerability is what is the impact of

00:23:52,410 --> 00:23:57,000
that vulnerability in real terms are

00:23:54,990 --> 00:23:59,010
they able to go in and lock the user out

00:23:57,000 --> 00:24:00,540
permanently can they destroy sensitive

00:23:59,010 --> 00:24:02,610
information can they exfiltrate

00:24:00,540 --> 00:24:04,620
sensitive information if you don't have

00:24:02,610 --> 00:24:06,420
mitigations in place to kind of limit

00:24:04,620 --> 00:24:09,120
the impact of these vulnerabilities you

00:24:06,420 --> 00:24:11,730
again are gonna pay out massive dollars

00:24:09,120 --> 00:24:12,720
so what we're gonna do is we're gonna

00:24:11,730 --> 00:24:15,000
take a short break

00:24:12,720 --> 00:24:16,740
and then we're gonna actually dive into

00:24:15,000 --> 00:24:18,210
each one of these little segments here

00:24:16,740 --> 00:24:20,130
and we're gonna talk a little bit about

00:24:18,210 --> 00:24:22,770
how we can solve them

00:24:20,130 --> 00:24:25,890
one at a time so we'll be right back

00:24:22,770 --> 00:24:27,480
alright welcome back so when we left off

00:24:25,890 --> 00:24:30,630
we're gonna talk a little bit about how

00:24:27,480 --> 00:24:32,520
we wanted to actually dive into each one

00:24:30,630 --> 00:24:35,070
of these pieces of vulnerability Shana

00:24:32,520 --> 00:24:36,990
and learn about how we can inoculate our

00:24:35,070 --> 00:24:39,870
off to actually mitigate those

00:24:36,990 --> 00:24:42,540
vulnerability so let's dive in so let's

00:24:39,870 --> 00:24:44,550
talk about the session revocation so the

00:24:42,540 --> 00:24:47,040
goal here is we want to invalidate all

00:24:44,550 --> 00:24:49,080
sessions when a user resets their

00:24:47,040 --> 00:24:51,540
password and the first thing that I

00:24:49,080 --> 00:24:53,160
would normally reach for before I learn

00:24:51,540 --> 00:24:54,870
about a different method was really just

00:24:53,160 --> 00:24:56,370
let's do this on the server you know if

00:24:54,870 --> 00:24:58,320
the cookie is really the source of truth

00:24:56,370 --> 00:25:00,480
it's hard for me to kind of reason about

00:24:58,320 --> 00:25:01,800
how we can just take that cookie off so

00:25:00,480 --> 00:25:02,580
in this computer it's client-side

00:25:01,800 --> 00:25:03,750
controlled

00:25:02,580 --> 00:25:05,640
they're gonna be able to prevent me from

00:25:03,750 --> 00:25:07,440
expiring it you know if I send it a

00:25:05,640 --> 00:25:09,120
command so let's just store the source

00:25:07,440 --> 00:25:10,710
of truth on the server and just have the

00:25:09,120 --> 00:25:12,420
cookie be like a reference to that row

00:25:10,710 --> 00:25:13,650
in the database and then all we have to

00:25:12,420 --> 00:25:15,630
do is just delete that row in the

00:25:13,650 --> 00:25:18,150
database when we want to invalidate all

00:25:15,630 --> 00:25:19,470
the sessions which is great it works and

00:25:18,150 --> 00:25:21,690
in fact there's a gem to do this it

00:25:19,470 --> 00:25:24,570
actually used to be built into rails

00:25:21,690 --> 00:25:25,800
itself it got spun as a gem and you can

00:25:24,570 --> 00:25:27,780
just kind of change the implementation

00:25:25,800 --> 00:25:29,040
of the session store to use active

00:25:27,780 --> 00:25:31,410
record for instance or you could have

00:25:29,040 --> 00:25:32,880
one for Redis and essentially you have

00:25:31,410 --> 00:25:34,770
now the source of trees on the server

00:25:32,880 --> 00:25:38,130
you knock out that row everybody's

00:25:34,770 --> 00:25:40,140
invalidated now the problem with this is

00:25:38,130 --> 00:25:42,150
that you've now added a new database

00:25:40,140 --> 00:25:44,520
lookup per request so if you're at a

00:25:42,150 --> 00:25:46,140
high performance situation that might be

00:25:44,520 --> 00:25:48,120
something that you don't want to do but

00:25:46,140 --> 00:25:49,860
the biggest issue is that reals just

00:25:48,120 --> 00:25:52,320
think sessions are really cheap and free

00:25:49,860 --> 00:25:54,120
because they're cookie based by default

00:25:52,320 --> 00:25:55,560
so it's making sessions all over the

00:25:54,120 --> 00:25:57,090
place and when you don't want it to like

00:25:55,560 --> 00:25:58,740
maybe you have your marketing site in

00:25:57,090 --> 00:25:59,970
there it's gonna create sessions when

00:25:58,740 --> 00:26:01,350
you're there you're unauthenticated

00:25:59,970 --> 00:26:02,700
you're on the login screen you just

00:26:01,350 --> 00:26:04,620
signed out now you have a new session

00:26:02,700 --> 00:26:06,330
and so because you're creating all these

00:26:04,620 --> 00:26:08,100
sessions and then you have old expired

00:26:06,330 --> 00:26:09,330
sessions you need to kind of reason

00:26:08,100 --> 00:26:11,700
about how you're gonna clean up this

00:26:09,330 --> 00:26:13,260
table on a regular basis the Redis you

00:26:11,700 --> 00:26:15,480
know you can use expiration keys and

00:26:13,260 --> 00:26:17,580
things like that but with the database

00:26:15,480 --> 00:26:19,860
you know you may have some real you know

00:26:17,580 --> 00:26:21,360
cron like jobs that you have to run on a

00:26:19,860 --> 00:26:23,310
regular basis to make sure that that

00:26:21,360 --> 00:26:25,950
tables that fill up and doesn't cause

00:26:23,310 --> 00:26:27,840
like a major catastrophe later on when

00:26:25,950 --> 00:26:30,119
you know you know the database like

00:26:27,840 --> 00:26:31,199
exceeds the next men of rose allowed for

00:26:30,119 --> 00:26:33,929
you know let's say you're like your

00:26:31,199 --> 00:26:35,999
Heroku plan or something like that so I

00:26:33,929 --> 00:26:37,829
think that you know server site set up

00:26:35,999 --> 00:26:39,659
sessions are definitely a valid approach

00:26:37,829 --> 00:26:41,009
but I think there's a lot easier way to

00:26:39,659 --> 00:26:45,539
do this on the client-side and it really

00:26:41,009 --> 00:26:47,699
talks about how you can actually change

00:26:45,539 --> 00:26:49,409
up you know the standard practice for

00:26:47,699 --> 00:26:50,129
how you actually set the session in the

00:26:49,409 --> 00:26:52,199
first place

00:26:50,129 --> 00:26:54,599
so most sign-in actions they look like

00:26:52,199 --> 00:26:56,639
this you have a post for like a sessions

00:26:54,599 --> 00:26:58,679
control or you create and you just look

00:26:56,639 --> 00:27:01,169
up that user's email you pass you know

00:26:58,679 --> 00:27:03,389
make sure that the password is there and

00:27:01,169 --> 00:27:05,699
it's it's correct and then you just

00:27:03,389 --> 00:27:08,879
essentially you know set the session

00:27:05,699 --> 00:27:10,769
hash with the user ID of the person you

00:27:08,879 --> 00:27:13,139
just you just authenticated and then

00:27:10,769 --> 00:27:14,729
when you look this up in subsequent

00:27:13,139 --> 00:27:16,469
requests you just make sure that that

00:27:14,729 --> 00:27:19,049
user exists and then they're logged in

00:27:16,469 --> 00:27:20,789
now this approach works this is how most

00:27:19,049 --> 00:27:24,029
people do it but the problem is is that

00:27:20,789 --> 00:27:25,829
this valid session is this immutable ID

00:27:24,029 --> 00:27:27,089
you're not gonna change the users ID

00:27:25,829 --> 00:27:29,069
because of all the foreign key

00:27:27,089 --> 00:27:30,539
associations with it and so it's never

00:27:29,069 --> 00:27:32,639
gonna change and therefore you've kind

00:27:30,539 --> 00:27:36,089
of created this crafted this perfectly

00:27:32,639 --> 00:27:38,399
valid permanently valid cookie that

00:27:36,089 --> 00:27:40,259
anyone can use to you know log in as

00:27:38,399 --> 00:27:42,179
this user in the future and that's what

00:27:40,259 --> 00:27:43,819
we want to avoid we need to be able to

00:27:42,179 --> 00:27:47,159
actually revoke these on a case-by-case

00:27:43,819 --> 00:27:49,669
basis so to actually do that it's a

00:27:47,159 --> 00:27:53,789
really quick fix all you have to do is

00:27:49,669 --> 00:27:57,389
generate a separate you know temporary

00:27:53,789 --> 00:27:59,429
token and then set that along with the

00:27:57,389 --> 00:28:01,289
user ID like you would normally set so

00:27:59,429 --> 00:28:03,749
you can set the token you know on create

00:28:01,289 --> 00:28:05,969
and you know just using something like

00:28:03,749 --> 00:28:08,369
secure random hacks and you generate a

00:28:05,969 --> 00:28:09,659
random hexadecimal number and you store

00:28:08,369 --> 00:28:10,919
that along with the session then when

00:28:09,659 --> 00:28:12,839
you go to validate it later

00:28:10,919 --> 00:28:14,999
you're not only checking if that user ID

00:28:12,839 --> 00:28:16,919
exists but you're also checking if that

00:28:14,999 --> 00:28:19,619
session token matches what's currently

00:28:16,919 --> 00:28:21,269
in the user then when you want to you

00:28:19,619 --> 00:28:23,009
know reset all other sessions that say

00:28:21,269 --> 00:28:24,509
someone's resetting their password all

00:28:23,009 --> 00:28:26,729
you have to do is just update that

00:28:24,509 --> 00:28:28,889
user's attributes where you're rolling

00:28:26,729 --> 00:28:30,929
that that token do a new thing and then

00:28:28,889 --> 00:28:34,409
you're in a position where you just

00:28:30,929 --> 00:28:36,839
simply change their current session with

00:28:34,409 --> 00:28:38,399
the new token and then the result will

00:28:36,839 --> 00:28:39,809
be everybody's logged out except the

00:28:38,399 --> 00:28:42,509
user who's actually resetting their

00:28:39,809 --> 00:28:43,180
passwords again pros here is minimal

00:28:42,509 --> 00:28:44,560
code you're not

00:28:43,180 --> 00:28:46,300
doing an extra database lookup you have

00:28:44,560 --> 00:28:48,460
to look up the user table anyway and

00:28:46,300 --> 00:28:50,230
it's a safe technique devises actually

00:28:48,460 --> 00:28:53,860
this is how they accomplish it by using

00:28:50,230 --> 00:28:56,590
server-side sessions now the only hunt

00:28:53,860 --> 00:28:58,060
here is that you have to you know target

00:28:56,590 --> 00:29:00,370
everybody at once you can't like just

00:28:58,060 --> 00:29:04,450
pick and choose specific sessions if you

00:29:00,370 --> 00:29:06,850
want to so now that we have that middle

00:29:04,450 --> 00:29:08,530
problem sort of resolved let's now talk

00:29:06,850 --> 00:29:10,150
about where the real money is it's like

00:29:08,530 --> 00:29:11,860
let's talk about how did the attacker

00:29:10,150 --> 00:29:14,110
already have access to the users account

00:29:11,860 --> 00:29:15,700
in our case we were all set on all these

00:29:14,110 --> 00:29:17,320
things but this is the type of thing

00:29:15,700 --> 00:29:19,030
that I wanted to talk about because it's

00:29:17,320 --> 00:29:20,890
really required from an inoculation

00:29:19,030 --> 00:29:22,480
perspective to make sure that you're

00:29:20,890 --> 00:29:26,440
resistant to you know these

00:29:22,480 --> 00:29:28,480
multiplication paths so the biggest one

00:29:26,440 --> 00:29:30,420
is this is give you a whole presentation

00:29:28,480 --> 00:29:32,560
in saw this poor password quality and

00:29:30,420 --> 00:29:34,600
it's really hard to get this right

00:29:32,560 --> 00:29:36,250
because the change is so much and

00:29:34,600 --> 00:29:38,830
Basecamp is a perfect example they had

00:29:36,250 --> 00:29:41,200
an incident last year where people were

00:29:38,830 --> 00:29:43,120
able to get into other folks Basecamp

00:29:41,200 --> 00:29:45,430
accounts essentially because they had

00:29:43,120 --> 00:29:47,290
reuse passwords from other services like

00:29:45,430 --> 00:29:48,910
LinkedIn and Facebook and things like

00:29:47,290 --> 00:29:52,090
that where those passwords that had

00:29:48,910 --> 00:29:54,190
leaked in the past so it's important

00:29:52,090 --> 00:29:55,660
that you got this right and I think it's

00:29:54,190 --> 00:29:57,310
important to also state that you

00:29:55,660 --> 00:29:59,980
shouldn't be scared of using passwords

00:29:57,310 --> 00:30:01,600
because this is this is tough because if

00:29:59,980 --> 00:30:04,150
you just shy away from passwords and you

00:30:01,600 --> 00:30:07,570
require stuff like oh oh off or single

00:30:04,150 --> 00:30:09,400
sign-on you're kind of causing your

00:30:07,570 --> 00:30:11,380
users to have to engage with some of

00:30:09,400 --> 00:30:14,320
these other companies like like Google

00:30:11,380 --> 00:30:16,270
who may not have their privacy interests

00:30:14,320 --> 00:30:17,650
at heart in order for them to just

00:30:16,270 --> 00:30:19,510
simply use your application so I think

00:30:17,650 --> 00:30:21,400
using your path having password based

00:30:19,510 --> 00:30:23,230
off is I think a noble cause and I think

00:30:21,400 --> 00:30:25,060
it's important but it's important that

00:30:23,230 --> 00:30:27,190
if you do decide to do it that you're

00:30:25,060 --> 00:30:29,740
gonna actually you know manage those

00:30:27,190 --> 00:30:31,390
risks so I would say the new minimum

00:30:29,740 --> 00:30:33,460
requirements your passwords like throw

00:30:31,390 --> 00:30:35,560
away everything you knew the first thing

00:30:33,460 --> 00:30:38,110
is a sophisticated password complexity

00:30:35,560 --> 00:30:39,160
checking capability and you want to make

00:30:38,110 --> 00:30:41,560
sure that you're doing things that

00:30:39,160 --> 00:30:43,090
aren't ODEs old-school like oh I want to

00:30:41,560 --> 00:30:44,740
look for you know make sure they have

00:30:43,090 --> 00:30:47,500
this amount of symbols or the length has

00:30:44,740 --> 00:30:49,390
to be above this but below this or the

00:30:47,500 --> 00:30:51,850
pass were asked to expire arbitrarily

00:30:49,390 --> 00:30:53,920
every three you know three months those

00:30:51,850 --> 00:30:55,950
are all things that actually had no real

00:30:53,920 --> 00:30:57,570
basis in real research that proved

00:30:55,950 --> 00:30:59,580
they actually prevent brute-force

00:30:57,570 --> 00:31:00,330
attacks or improve the security of

00:30:59,580 --> 00:31:02,550
passwords

00:31:00,330 --> 00:31:05,280
you're gonna want you know a real tool

00:31:02,550 --> 00:31:09,690
that's actually bumping up that password

00:31:05,280 --> 00:31:10,860
against locale specific dictionaries the

00:31:09,690 --> 00:31:12,990
other thing is you want to be able to

00:31:10,860 --> 00:31:14,430
continuously check these passwords every

00:31:12,990 --> 00:31:15,930
time the user signs in and when of

00:31:14,430 --> 00:31:17,430
course when they first create them to

00:31:15,930 --> 00:31:19,230
make sure that they weren't disclosed in

00:31:17,430 --> 00:31:21,420
Prior breaches I'll talk about how to do

00:31:19,230 --> 00:31:23,340
that in a second and as I mentioned

00:31:21,420 --> 00:31:26,100
earlier you want to rethink this prior

00:31:23,340 --> 00:31:28,320
accepted practices so here are the tools

00:31:26,100 --> 00:31:32,700
that you can use to get this done we've

00:31:28,320 --> 00:31:34,560
used zxc vb n which is mouthful but it's

00:31:32,700 --> 00:31:36,690
from Dropbox and it's this great

00:31:34,560 --> 00:31:37,920
client-side JavaScript utility that

00:31:36,690 --> 00:31:39,810
allows you to build screens like this

00:31:37,920 --> 00:31:42,660
where you're generating like a really

00:31:39,810 --> 00:31:44,520
well reason through score of from a

00:31:42,660 --> 00:31:46,620
password Inc perspective and then you

00:31:44,520 --> 00:31:48,840
can actually give them really great user

00:31:46,620 --> 00:31:50,880
experience around why that password may

00:31:48,840 --> 00:31:52,440
not be good in this case you know this

00:31:50,880 --> 00:31:53,850
is a commonly used password so it's

00:31:52,440 --> 00:31:55,890
taking advantage of a dictionary in the

00:31:53,850 --> 00:31:57,540
back end it's all client-side it's

00:31:55,890 --> 00:31:59,100
really fast and it's really small I

00:31:57,540 --> 00:32:00,600
highly recommend you check it out and

00:31:59,100 --> 00:32:02,100
then of course with something like an

00:32:00,600 --> 00:32:04,860
exec yes you can run this in the backend

00:32:02,100 --> 00:32:06,300
and enforce a certain score so that you

00:32:04,860 --> 00:32:10,200
could just write a rails validation for

00:32:06,300 --> 00:32:12,600
it if you want the second tool that I

00:32:10,200 --> 00:32:14,760
highly recommend is pwned this is a gem

00:32:12,600 --> 00:32:17,100
and it uses the have I been poned

00:32:14,760 --> 00:32:18,900
service which you if you've ever used

00:32:17,100 --> 00:32:20,490
you just go there and you put in you

00:32:18,900 --> 00:32:22,110
know your email address and it'll

00:32:20,490 --> 00:32:23,400
actually tell you all the services that

00:32:22,110 --> 00:32:26,820
may have leaked your password in the

00:32:23,400 --> 00:32:28,200
past you have a way of it maybe in this

00:32:26,820 --> 00:32:30,120
actually allows you to interact with

00:32:28,200 --> 00:32:32,160
that programmatically by sending

00:32:30,120 --> 00:32:33,990
anonymized chunks of the past from not

00:32:32,160 --> 00:32:36,120
the full path so just little chunks of

00:32:33,990 --> 00:32:37,530
it to validate whether or not that

00:32:36,120 --> 00:32:38,910
password may have been a part of a

00:32:37,530 --> 00:32:40,830
breach or not and you can create a

00:32:38,910 --> 00:32:42,420
screen like this I highly recommend that

00:32:40,830 --> 00:32:44,280
you not only check out the gem but all

00:32:42,420 --> 00:32:46,350
the white papers associated with that

00:32:44,280 --> 00:32:47,880
anonymity model because it's really cool

00:32:46,350 --> 00:32:50,550
and I think it's one of those things

00:32:47,880 --> 00:32:51,660
where you can get a lot of value and if

00:32:50,550 --> 00:32:53,070
you're a little scared about the API

00:32:51,660 --> 00:32:54,840
there's ways that you can actually bring

00:32:53,070 --> 00:33:00,120
in all that information locally to do

00:32:54,840 --> 00:33:01,380
those comparisons the ultimately the

00:33:00,120 --> 00:33:03,150
other thing that I want to talk about is

00:33:01,380 --> 00:33:04,380
valid account enumeration I'm not gonna

00:33:03,150 --> 00:33:07,320
spend a lot of time in this but

00:33:04,380 --> 00:33:08,940
ultimately this is sort of up to you a

00:33:07,320 --> 00:33:09,419
lot of folks decide just to accept the

00:33:08,940 --> 00:33:11,759
risk

00:33:09,419 --> 00:33:14,009
but what is this at the end of the day

00:33:11,759 --> 00:33:15,570
it's oh I'm resetting the password and

00:33:14,009 --> 00:33:17,639
there's an error message that tells me I

00:33:15,570 --> 00:33:18,839
haven't signed up yet that's the type of

00:33:17,639 --> 00:33:21,479
thing in an attack we can use to

00:33:18,839 --> 00:33:23,549
validate that an arbitrary email might

00:33:21,479 --> 00:33:25,289
already have an account there what I've

00:33:23,549 --> 00:33:27,479
seen a lot of folks do is to say oh you

00:33:25,289 --> 00:33:30,119
know on the password screen or the login

00:33:27,479 --> 00:33:31,739
screen we're not going to disclose

00:33:30,119 --> 00:33:33,839
whether mechanics is but for the past

00:33:31,739 --> 00:33:35,700
reset screen we are because of the

00:33:33,839 --> 00:33:37,589
support burden and then this is one of

00:33:35,700 --> 00:33:39,959
those things where you just have to do

00:33:37,589 --> 00:33:42,389
it or not do it you can't kind of do it

00:33:39,959 --> 00:33:44,969
halfway and you really need a signal to

00:33:42,389 --> 00:33:47,039
the the researcher that you either you

00:33:44,969 --> 00:33:49,559
know are all upfront about doing this or

00:33:47,039 --> 00:33:51,479
you know you you've decided that we're

00:33:49,559 --> 00:33:52,979
gonna just maximise on the UX and lower

00:33:51,479 --> 00:33:54,659
the support burden and let any

00:33:52,979 --> 00:33:56,279
unauthenticated user know if they have

00:33:54,659 --> 00:33:58,799
an account or not based on them

00:33:56,279 --> 00:34:00,329
inputting an email address the reason

00:33:58,799 --> 00:34:01,919
why you have to kind of think this way

00:34:00,329 --> 00:34:03,839
is that the effort to get this done is

00:34:01,919 --> 00:34:05,879
actually quite high for a password based

00:34:03,839 --> 00:34:07,049
authentication with OAuth you don't

00:34:05,879 --> 00:34:09,089
necessarily have to spend a lot of time

00:34:07,049 --> 00:34:10,559
on it because you've already valid that

00:34:09,089 --> 00:34:12,599
they own the email address so delivering

00:34:10,559 --> 00:34:14,429
error messages to them in that vein is

00:34:12,599 --> 00:34:15,480
fine but if someone's just putting in

00:34:14,429 --> 00:34:17,519
the email address in a forgot password

00:34:15,480 --> 00:34:20,700
form you have to really think carefully

00:34:17,519 --> 00:34:22,529
so I put together a checklist here

00:34:20,700 --> 00:34:24,149
around the places that we really had to

00:34:22,529 --> 00:34:26,849
think about this so I mentioned password

00:34:24,149 --> 00:34:28,710
reset new signups is another common one

00:34:26,849 --> 00:34:32,549
one that's often forgotten though is

00:34:28,710 --> 00:34:34,769
inviting users via email onto your team

00:34:32,549 --> 00:34:36,389
from within the application especially

00:34:34,769 --> 00:34:38,309
in like a single tenant setting where a

00:34:36,389 --> 00:34:40,740
user can only belong to one you know

00:34:38,309 --> 00:34:42,059
team or organization you don't want that

00:34:40,740 --> 00:34:44,819
place to be the place where you can

00:34:42,059 --> 00:34:47,549
reveal maybe to an unrelated team or org

00:34:44,819 --> 00:34:49,289
that another email address exists so

00:34:47,549 --> 00:34:51,000
just take a look at this slide later and

00:34:49,289 --> 00:34:53,220
kind of look through how we message

00:34:51,000 --> 00:34:54,659
these things and recognize that there's

00:34:53,220 --> 00:34:56,759
a lot of nuance here and there's a lot

00:34:54,659 --> 00:34:59,839
of email that you have to write to kind

00:34:56,759 --> 00:35:02,430
of cover all these different scenarios

00:34:59,839 --> 00:35:05,579
finally in this section I want to talk

00:35:02,430 --> 00:35:07,440
about multi-factor off again if you're

00:35:05,579 --> 00:35:12,089
not using password off and you're just

00:35:07,440 --> 00:35:13,500
relying on the multi-factor offices that

00:35:12,089 --> 00:35:15,509
are using that's fine but if you are

00:35:13,500 --> 00:35:17,940
doing password off I highly recommend

00:35:15,509 --> 00:35:20,680
doing multi-factor office it's almost

00:35:17,940 --> 00:35:22,390
unacceptable at this point because

00:35:20,680 --> 00:35:24,309
the eat of the security implications of

00:35:22,390 --> 00:35:25,750
you know sure you're letting them lying

00:35:24,309 --> 00:35:26,920
with a password but you're not giving

00:35:25,750 --> 00:35:29,500
them the right tools really protect

00:35:26,920 --> 00:35:31,569
their account so the key thing here is

00:35:29,500 --> 00:35:33,430
that unlike passwords where there is

00:35:31,569 --> 00:35:35,529
change but you know we've mostly dialed

00:35:33,430 --> 00:35:37,359
in the best practices the best practices

00:35:35,529 --> 00:35:39,760
here are changing all the time good

00:35:37,359 --> 00:35:41,710
example that is SMS SMS based

00:35:39,760 --> 00:35:44,470
multi-factor authentication methods

00:35:41,710 --> 00:35:46,480
methods are no longer acceptable so even

00:35:44,470 --> 00:35:48,700
even as a backup and and the real goal

00:35:46,480 --> 00:35:50,890
here is you want to switch over to soft

00:35:48,700 --> 00:35:52,690
tokens that are time-based or things

00:35:50,890 --> 00:35:54,160
like web off end which allow you to log

00:35:52,690 --> 00:35:56,920
in with like something like a you baqi

00:35:54,160 --> 00:35:58,510
or like the touch ID sensor on your

00:35:56,920 --> 00:36:01,900
device something with like a secure

00:35:58,510 --> 00:36:03,099
Enclave so the goal here is that you

00:36:01,900 --> 00:36:06,430
want to be on top of those best

00:36:03,099 --> 00:36:07,839
practices you want to have ways of you

00:36:06,430 --> 00:36:09,400
know insuring people get locked out of

00:36:07,839 --> 00:36:11,410
there with like generating backup codes

00:36:09,400 --> 00:36:13,750
but you also want to ensure that they're

00:36:11,410 --> 00:36:15,309
putting them in password managers I mean

00:36:13,750 --> 00:36:17,170
collide one of the checks that we have

00:36:15,309 --> 00:36:19,329
on devices it's just looking for these

00:36:17,170 --> 00:36:21,250
things that exist the download folder in

00:36:19,329 --> 00:36:22,660
plaintext you know they're Heroku

00:36:21,250 --> 00:36:24,160
two-factor codes their chief sweetie

00:36:22,660 --> 00:36:25,029
factor codes they're getting up to

00:36:24,160 --> 00:36:26,529
factor codes

00:36:25,029 --> 00:36:27,970
everybody puts them in their downloads

00:36:26,529 --> 00:36:29,920
folder and they forget about it they

00:36:27,970 --> 00:36:32,319
need to be in something like one

00:36:29,920 --> 00:36:33,819
password or at best like they're at

00:36:32,319 --> 00:36:36,700
worst like something like their keychain

00:36:33,819 --> 00:36:38,559
so the other important thing to remember

00:36:36,700 --> 00:36:40,839
here is you want to have a policy for

00:36:38,559 --> 00:36:42,190
what to do about totally locked out

00:36:40,839 --> 00:36:43,900
users you didn't download their codes

00:36:42,190 --> 00:36:45,789
they have no like secondary method of

00:36:43,900 --> 00:36:47,200
getting in and they're just locked out

00:36:45,789 --> 00:36:49,329
you want to come up with that policy

00:36:47,200 --> 00:36:51,339
before it happens so that you're not

00:36:49,329 --> 00:36:54,160
kind of applying this case-by-case bias

00:36:51,339 --> 00:36:56,589
oh well we know this guy and you know it

00:36:54,160 --> 00:36:58,299
sounds like he's you know it sounds like

00:36:56,589 --> 00:36:59,799
the email is fine that he's emailing us

00:36:58,299 --> 00:37:01,960
from no you have to come up with a

00:36:59,799 --> 00:37:03,609
policy beforehand and make sure that you

00:37:01,960 --> 00:37:04,809
follow it to the letter before you

00:37:03,609 --> 00:37:07,630
endeavor to build a multi-factor

00:37:04,809 --> 00:37:08,980
authentication solution on the useful

00:37:07,630 --> 00:37:11,440
gems resources section of the slide

00:37:08,980 --> 00:37:12,819
check out what Basecamp did in terms of

00:37:11,440 --> 00:37:14,380
how they set up their two-factor off

00:37:12,819 --> 00:37:16,029
they have a lot of great resources there

00:37:14,380 --> 00:37:18,160
and I think they did an excellent job

00:37:16,029 --> 00:37:21,520
writing it up from a feature perspective

00:37:18,160 --> 00:37:22,960
and how they built it perspective last

00:37:21,520 --> 00:37:24,670
one in this section is cross-site

00:37:22,960 --> 00:37:26,380
scripting I'm not going to spend a lot

00:37:24,670 --> 00:37:28,000
of ton of time explaining what

00:37:26,380 --> 00:37:30,069
cross-site scripting is but just think

00:37:28,000 --> 00:37:33,130
of it as an attacker can just you know

00:37:30,069 --> 00:37:34,180
leverage unsafe valuation of j/s to run

00:37:33,130 --> 00:37:36,010
any arbitrage

00:37:34,180 --> 00:37:38,050
our paccheri client-side code in the

00:37:36,010 --> 00:37:40,300
victim's browser which is really bad and

00:37:38,050 --> 00:37:42,490
the key thing to remember here is that

00:37:40,300 --> 00:37:44,320
this is usually the missing ingredient

00:37:42,490 --> 00:37:46,900
that attacker needs to complete a high

00:37:44,320 --> 00:37:49,060
impact vulnerability chain so there's

00:37:46,900 --> 00:37:50,440
two ways to avoid this the first is you

00:37:49,060 --> 00:37:53,260
know make sure you really think about

00:37:50,440 --> 00:37:55,120
every usage of HTML safe and that you're

00:37:53,260 --> 00:37:56,500
using like on the client side you know a

00:37:55,120 --> 00:37:59,890
lot of things that know how to escape

00:37:56,500 --> 00:38:01,960
HTML like you know you know basic

00:37:59,890 --> 00:38:03,490
templating systems you know react does

00:38:01,960 --> 00:38:04,630
that by default but you want to make

00:38:03,490 --> 00:38:08,800
sure that you're not doing crazy stuff

00:38:04,630 --> 00:38:11,170
like can categories or input in there if

00:38:08,800 --> 00:38:13,000
your diligence around this fails your

00:38:11,170 --> 00:38:15,220
last run line of defense is really

00:38:13,000 --> 00:38:17,080
content security policy and this is

00:38:15,220 --> 00:38:18,850
built into rails 6 and it's available

00:38:17,080 --> 00:38:21,010
via the secure header gem if you're

00:38:18,850 --> 00:38:23,380
before rails 6 and the goal here is to

00:38:21,010 --> 00:38:26,140
create a browser-based policy that will

00:38:23,380 --> 00:38:27,580
block any arbitrary execution of

00:38:26,140 --> 00:38:30,160
JavaScript based on rules that you

00:38:27,580 --> 00:38:33,330
define and I say this is the last rung

00:38:30,160 --> 00:38:35,410
of defense because if you don't do this

00:38:33,330 --> 00:38:38,410
if you don't think about it that way

00:38:35,410 --> 00:38:40,240
you'll end up becoming lacs around your

00:38:38,410 --> 00:38:41,440
diligence around cross-site scripting in

00:38:40,240 --> 00:38:43,360
general because you think that you have

00:38:41,440 --> 00:38:45,250
this protective effect but it's really

00:38:43,360 --> 00:38:47,890
the last barrier before the attacker

00:38:45,250 --> 00:38:50,200
gets to win so we talked about this

00:38:47,890 --> 00:38:52,810
earlier you know in our kind of example

00:38:50,200 --> 00:38:55,210
scenario they did bypass the CSP well

00:38:52,810 --> 00:38:57,370
why in our case we had a CSP set up from

00:38:55,210 --> 00:38:58,660
secure headers but the default you know

00:38:57,370 --> 00:39:02,260
when you don't specify a full

00:38:58,660 --> 00:39:04,780
configuration is to allow any SSL served

00:39:02,260 --> 00:39:06,790
JavaScript to execute without

00:39:04,780 --> 00:39:08,560
restriction and that's a big problem

00:39:06,790 --> 00:39:11,170
because all it takes for an attack we

00:39:08,560 --> 00:39:13,480
really bypass the CSP is to simply

00:39:11,170 --> 00:39:15,910
register domain and get a valid SSL

00:39:13,480 --> 00:39:18,010
certificate so you need to make sure

00:39:15,910 --> 00:39:19,480
that when you build your CSP you're

00:39:18,010 --> 00:39:20,920
taking all that to an account you're

00:39:19,480 --> 00:39:23,260
taking an approach of block everything

00:39:20,920 --> 00:39:28,260
first and then only allow domains and

00:39:23,260 --> 00:39:30,610
scripts that are you know known to you

00:39:28,260 --> 00:39:32,740
preferably don't use even domains use

00:39:30,610 --> 00:39:35,170
nonsense and hashes to verify the

00:39:32,740 --> 00:39:37,210
scripts contact with contents and then

00:39:35,170 --> 00:39:38,830
run your CSP through a third-party

00:39:37,210 --> 00:39:41,170
evaluator like the one that I have

00:39:38,830 --> 00:39:43,210
linked here which will show you all the

00:39:41,170 --> 00:39:44,890
different potential attack vectors that

00:39:43,210 --> 00:39:46,480
might still be possible with the CSP

00:39:44,890 --> 00:39:47,630
that you've decided this is gonna cause

00:39:46,480 --> 00:39:49,400
a lot of pain if you haven't

00:39:47,630 --> 00:39:51,020
your application you're gonna have to go

00:39:49,400 --> 00:39:53,030
in you have a look at all your usage of

00:39:51,020 --> 00:39:54,710
JavaScript and likely change a lot of

00:39:53,030 --> 00:39:57,640
stuff but it's worth it at the end this

00:39:54,710 --> 00:40:00,800
will really save your tail

00:39:57,640 --> 00:40:02,900
alright last piece is how do we mitigate

00:40:00,800 --> 00:40:05,720
the impact well audit logging is a

00:40:02,900 --> 00:40:07,250
no-brainer because if I was you know if

00:40:05,720 --> 00:40:08,750
I was a victim with someone taking over

00:40:07,250 --> 00:40:10,640
my account I want to be able to know

00:40:08,750 --> 00:40:12,200
exactly what they did and enumerate that

00:40:10,640 --> 00:40:13,400
the damage they threw there there's a

00:40:12,200 --> 00:40:14,840
lot of great gems for this we're not

00:40:13,400 --> 00:40:18,560
gonna go into it the thing that I want

00:40:14,840 --> 00:40:20,420
to focus on is Pastore prompting so

00:40:18,560 --> 00:40:22,790
password be prompting is we have it on

00:40:20,420 --> 00:40:24,560
the right here is you have essentially a

00:40:22,790 --> 00:40:25,880
protected action like changing your

00:40:24,560 --> 00:40:27,890
email address and instead of just

00:40:25,880 --> 00:40:29,210
letting them do that Yury prompt them

00:40:27,890 --> 00:40:30,800
for their credentials to make sure that

00:40:29,210 --> 00:40:32,510
it's really them this is really

00:40:30,800 --> 00:40:33,800
effective if the attacker only has like

00:40:32,510 --> 00:40:36,200
a session cookie they don't actually

00:40:33,800 --> 00:40:37,490
know the true credentials and you can

00:40:36,200 --> 00:40:40,040
actually stop them from doing a lot of

00:40:37,490 --> 00:40:41,510
damage the key here is two things one is

00:40:40,040 --> 00:40:43,040
you want to make sure that you enumerate

00:40:41,510 --> 00:40:44,600
all the high-risk actions that you

00:40:43,040 --> 00:40:46,280
really want to wrap this around and I've

00:40:44,600 --> 00:40:47,780
done so in the slide below there's

00:40:46,280 --> 00:40:50,030
likely more that you'll need to consider

00:40:47,780 --> 00:40:52,520
things to watch out for or anything

00:40:50,030 --> 00:40:54,230
related to then be able to escalate

00:40:52,520 --> 00:40:56,390
privileges of other users invite new

00:40:54,230 --> 00:40:58,060
users in create other API credentials

00:40:56,390 --> 00:41:00,230
things that allow them to maintain

00:40:58,060 --> 00:41:02,450
persistence on that you know

00:41:00,230 --> 00:41:03,590
organizations account the second thing

00:41:02,450 --> 00:41:06,100
is there's more of a user experience

00:41:03,590 --> 00:41:08,750
thing is you want to really avoid

00:41:06,100 --> 00:41:10,820
constantly prompting them when it seems

00:41:08,750 --> 00:41:12,680
unnecessary good example this is I've

00:41:10,820 --> 00:41:13,790
just signed in and then I'm going in to

00:41:12,680 --> 00:41:15,530
reach Ange my email and then it

00:41:13,790 --> 00:41:17,120
reprocess me even though I just put in

00:41:15,530 --> 00:41:18,650
my password this is where something like

00:41:17,120 --> 00:41:21,770
a pseudo mode where you're sort of

00:41:18,650 --> 00:41:23,450
simulating like the time-based allow

00:41:21,770 --> 00:41:25,130
everybody through to perform privilege

00:41:23,450 --> 00:41:28,340
action actions because they just signed

00:41:25,130 --> 00:41:30,650
in type of a type of experience github

00:41:28,340 --> 00:41:34,310
has this and I'm gonna walk you through

00:41:30,650 --> 00:41:35,780
how we got this done in clawed so it's

00:41:34,310 --> 00:41:38,450
actually really easy what we're looking

00:41:35,780 --> 00:41:40,670
at right now is an active active

00:41:38,450 --> 00:41:43,270
controller concern or active support

00:41:40,670 --> 00:41:45,890
concern that we mix into a controller

00:41:43,270 --> 00:41:47,870
and then all we have to do is just call

00:41:45,890 --> 00:41:49,670
this before action require verification

00:41:47,870 --> 00:41:51,590
which we enumerate kind of what we're

00:41:49,670 --> 00:41:53,690
doing there first thing we check for is

00:41:51,590 --> 00:41:55,730
you know the are they in that sudo

00:41:53,690 --> 00:41:57,620
window and the way that we do that is

00:41:55,730 --> 00:41:59,600
through a protected cookie where we're

00:41:57,620 --> 00:42:01,070
sort of signing a time stamping if the

00:41:59,600 --> 00:42:03,740
time stamp exceeds one hour

00:42:01,070 --> 00:42:04,730
we say that you know that's invalid and

00:42:03,740 --> 00:42:08,450
they now need to go through the

00:42:04,730 --> 00:42:09,770
verification process and if it is valid

00:42:08,450 --> 00:42:12,110
then we just let them skip through and

00:42:09,770 --> 00:42:13,160
perform the action uninterrupted but if

00:42:12,110 --> 00:42:15,740
they have to perform this verification

00:42:13,160 --> 00:42:17,780
process the key thing to know is this

00:42:15,740 --> 00:42:19,130
section right here you're going to want

00:42:17,780 --> 00:42:21,230
to save everything that they were doing

00:42:19,130 --> 00:42:23,150
what path were they trying to access

00:42:21,230 --> 00:42:24,800
what was the request method that they

00:42:23,150 --> 00:42:27,350
were coming in with was it a get was it

00:42:24,800 --> 00:42:28,330
a post was it a patch and if it was one

00:42:27,350 --> 00:42:30,680
of those things what were the parameters

00:42:28,330 --> 00:42:32,990
that they were utilizing in that request

00:42:30,680 --> 00:42:34,820
the key reason you want to do this is

00:42:32,990 --> 00:42:37,400
you want to simulate all that later

00:42:34,820 --> 00:42:39,680
after they've done their authentication

00:42:37,400 --> 00:42:40,910
process and the way that we do that is

00:42:39,680 --> 00:42:43,340
you take all this information from the

00:42:40,910 --> 00:42:45,200
session and we generate a hidden form we

00:42:43,340 --> 00:42:46,610
automatically submit that or if they

00:42:45,200 --> 00:42:48,200
have JavaScript disabled we just have

00:42:46,610 --> 00:42:50,090
them click a button and then that

00:42:48,200 --> 00:42:50,900
submits exactly what they were intending

00:42:50,090 --> 00:42:52,670
to you in the first place

00:42:50,900 --> 00:42:54,800
and they get redirected to the page that

00:42:52,670 --> 00:42:56,780
they expect so again the goal here is to

00:42:54,800 --> 00:42:58,190
utilize this information you want to

00:42:56,780 --> 00:43:00,110
create a hidden form after they've

00:42:58,190 --> 00:43:01,730
signed in and then you can send them

00:43:00,110 --> 00:43:03,890
right back to where they were going

00:43:01,730 --> 00:43:07,640
through with very little a minimal

00:43:03,890 --> 00:43:09,920
impact on the experience so we're almost

00:43:07,640 --> 00:43:11,300
at a time so let's wrap up I think

00:43:09,920 --> 00:43:12,980
there's three takeaways I'd like you to

00:43:11,300 --> 00:43:14,750
take away from this presentation the

00:43:12,980 --> 00:43:15,830
first is decide whether or not you're up

00:43:14,750 --> 00:43:18,650
for the challenge of rolling your own

00:43:15,830 --> 00:43:20,600
off I think that at least for us the

00:43:18,650 --> 00:43:22,520
security company it was a no-brainer but

00:43:20,600 --> 00:43:25,160
for your application whether it's b2b or

00:43:22,520 --> 00:43:26,630
b2c it really kind of comes down to the

00:43:25,160 --> 00:43:28,580
things that you want to prioritize in

00:43:26,630 --> 00:43:29,930
your business if you are ready to roll

00:43:28,580 --> 00:43:32,750
your own off I think you have to be

00:43:29,930 --> 00:43:35,360
ready to treat it like as well as the

00:43:32,750 --> 00:43:36,950
rest of your product if you don't have a

00:43:35,360 --> 00:43:38,810
bug bounty program you should be

00:43:36,950 --> 00:43:40,190
creating one you should you know looking

00:43:38,810 --> 00:43:42,200
at all the recommendations we made and

00:43:40,190 --> 00:43:45,290
how to not make massive errors and how

00:43:42,200 --> 00:43:46,760
you treat the you know the hackers and

00:43:45,290 --> 00:43:48,980
the researchers that are submitting

00:43:46,760 --> 00:43:51,020
reports there and then understand that

00:43:48,980 --> 00:43:52,370
every time that you pay for one of those

00:43:51,020 --> 00:43:54,380
reports you should be celebrating

00:43:52,370 --> 00:43:57,710
because you're actually saving a lot of

00:43:54,380 --> 00:43:58,910
pain and anguish you know in terms of

00:43:57,710 --> 00:44:01,160
getting that information other way

00:43:58,910 --> 00:44:03,440
either through a nefarious actor who

00:44:01,160 --> 00:44:04,700
isn't responsibly disclosing or through

00:44:03,440 --> 00:44:06,970
a very very expensive

00:44:04,700 --> 00:44:09,290
you know pen test that you have to do

00:44:06,970 --> 00:44:11,690
more frequent basis because you're not

00:44:09,290 --> 00:44:13,020
getting these regular bug bounty reports

00:44:11,690 --> 00:44:14,880
through your

00:44:13,020 --> 00:44:16,710
finally if you decided to a bug bounty

00:44:14,880 --> 00:44:18,570
program which you should you need to

00:44:16,710 --> 00:44:20,370
inoculate to off of your app so you

00:44:18,570 --> 00:44:21,720
don't have to pay out large dollars for

00:44:20,370 --> 00:44:23,700
chained together vulnerabilities using

00:44:21,720 --> 00:44:25,020
the techniques that we described there's

00:44:23,700 --> 00:44:28,260
one resource I want to leave you with

00:44:25,020 --> 00:44:30,630
it's this rail security guide so this

00:44:28,260 --> 00:44:31,860
guy's been around forever it's it's I

00:44:30,630 --> 00:44:33,840
still think it's in really good shape

00:44:31,860 --> 00:44:35,160
and it's worth a read through it covers

00:44:33,840 --> 00:44:38,610
a lot of the topics that we mentioned

00:44:35,160 --> 00:44:40,620
today and combined with some of the the

00:44:38,610 --> 00:44:43,230
topics that we talked about earlier I

00:44:40,620 --> 00:44:45,210
think you'll be ready to really level up

00:44:43,230 --> 00:44:47,220
the the rails application that you have

00:44:45,210 --> 00:44:50,040
whether it's author other parts of the

00:44:47,220 --> 00:44:50,490
app and with that I thank you for your

00:44:50,040 --> 00:44:51,720
time

00:44:50,490 --> 00:44:53,670
feel free to contact me with any

00:44:51,720 --> 00:44:56,430
questions or comments at any of these

00:44:53,670 --> 00:44:58,880
places listed on the slide thank you and

00:44:56,430 --> 00:44:58,880

YouTube URL: https://www.youtube.com/watch?v=K7zo-wnvcLs


