Title: RailsConf 2020 CE - Mistakes Were Made by Jesse Spevack
Publication date: 2020-04-24
Playlist: RailsConf 2020 CE
Description: 
	Mistakes Were Made by Jesse Spevack

We picked the wrong technology. We worked in silos. We prematurely optimized. We introduced too many changes at once. And yet somehow we delivered a system that is integral to a shopping rewards app used by millions across the United States. I want to tell you the story of how the best of intentions led to crucial blunders. In this public, honest, and vulnerable post-mortem I will share the missteps I made so that you can avoid them.

__________

Jesse Spevack is a father of twins, skier, marathoner, and Senior Platform Engineer at Ibotta, a cash back for shopping app whose mission is to make every purchase rewarding. Before getting into the tech world, Jesse worked in public K-12 education for 11 years in teaching, school leadership, and consulting. Jesse transitioned from education into technology by way of the Turing School of Software Design, a Denver based code school with a Ruby-centric curriculum.
Captions: 
	00:00:08,640 --> 00:00:13,440
I want to thank the rails comp team for

00:00:11,850 --> 00:00:15,240
selecting my talk for the memorable

00:00:13,440 --> 00:00:17,460
post-mortems track and putting this

00:00:15,240 --> 00:00:19,890
wonderful couch conference together in

00:00:17,460 --> 00:00:22,500
what we all know are very difficult

00:00:19,890 --> 00:00:24,900
circumstances I can only imagine how

00:00:22,500 --> 00:00:26,939
much work went into the planning of the

00:00:24,900 --> 00:00:29,520
conference and then how much more was

00:00:26,939 --> 00:00:32,340
needed for the replanting so a huge

00:00:29,520 --> 00:00:36,210
thanks to the Ruby central team you all

00:00:32,340 --> 00:00:37,950
are heroes and I am very grateful and I

00:00:36,210 --> 00:00:41,399
want to thank all of you out there for

00:00:37,950 --> 00:00:42,750
choosing to watch my talk I hope all of

00:00:41,399 --> 00:00:45,750
you and your loved ones are in good

00:00:42,750 --> 00:00:49,050
health and safe my name is Jesse Spivak

00:00:45,750 --> 00:00:51,269
I'm a senior engineer at ibotta I'm also

00:00:49,050 --> 00:00:53,489
a recovering educator and a father of

00:00:51,269 --> 00:00:56,820
twins you can follow me on twitter at

00:00:53,489 --> 00:00:59,219
planet efficacy for the best combination

00:00:56,820 --> 00:01:02,309
of rails political outrage and fish

00:00:59,219 --> 00:01:04,949
content on the Internet I use he/him

00:01:02,309 --> 00:01:07,650
pronouns I want to call out that there's

00:01:04,949 --> 00:01:09,750
a reasonable degree of safety in me

00:01:07,650 --> 00:01:12,360
giving a talk about making mistakes in

00:01:09,750 --> 00:01:14,759
this year's railsconf memorable post

00:01:12,360 --> 00:01:16,560
mortems track I'm privileged to

00:01:14,759 --> 00:01:18,810
typically enjoy a presumption of

00:01:16,560 --> 00:01:21,329
competence I don't have to worry about

00:01:18,810 --> 00:01:23,759
not being taken seriously after owning

00:01:21,329 --> 00:01:27,000
up to a mistake and I also don't have to

00:01:23,759 --> 00:01:29,790
worry that my mistakes might reflect on

00:01:27,000 --> 00:01:33,869
others who share my race gender religion

00:01:29,790 --> 00:01:35,790
and other markers of identity so the

00:01:33,869 --> 00:01:38,159
goal of this presentation is for me to

00:01:35,790 --> 00:01:40,740
talk about four major mistakes I made it

00:01:38,159 --> 00:01:43,320
on the project I worked on this year I'm

00:01:40,740 --> 00:01:45,869
gonna be honest and vulnerable so that

00:01:43,320 --> 00:01:47,490
you can avoid these missteps best case

00:01:45,869 --> 00:01:49,829
scenario you walk away from this talk

00:01:47,490 --> 00:01:52,520
with a few ideas about how to not get

00:01:49,829 --> 00:01:54,899
paged six times at 3:00 in the morning

00:01:52,520 --> 00:01:56,850
the four major mistakes I want to tell

00:01:54,899 --> 00:01:59,729
you about are picking the wrong

00:01:56,850 --> 00:02:02,579
technology siloing work between members

00:01:59,729 --> 00:02:05,130
of a team premature optimizations and

00:02:02,579 --> 00:02:08,460
making too many changes to a system at

00:02:05,130 --> 00:02:11,400
once all of these mistakes stemmed from

00:02:08,460 --> 00:02:13,440
good intentions but in the end they came

00:02:11,400 --> 00:02:16,769
close to zooming the project altogether

00:02:13,440 --> 00:02:18,720
I made these mistakes in the context of

00:02:16,769 --> 00:02:21,480
a project I worked on over the course of

00:02:18,720 --> 00:02:22,000
about six months a tabata a cashback for

00:02:21,480 --> 00:02:24,370
shopping

00:02:22,000 --> 00:02:27,730
with millions of users built in Denver

00:02:24,370 --> 00:02:29,950
Colorado over the past six years I bada

00:02:27,730 --> 00:02:33,010
has awarded over six hundred and eighty

00:02:29,950 --> 00:02:35,980
two million dollars to its users which

00:02:33,010 --> 00:02:39,100
we call savers there have been over 170

00:02:35,980 --> 00:02:42,130
million offers redeemed on our platform

00:02:39,100 --> 00:02:45,580
since railsconf last year and currently

00:02:42,130 --> 00:02:48,580
we have about 145 developers we have a

00:02:45,580 --> 00:02:52,780
majestic Rails monolith on Rails 5.1

00:02:48,580 --> 00:02:54,910
soon to be 5.2 god help me and over the

00:02:52,780 --> 00:02:57,730
last two years we've been moving to a

00:02:54,910 --> 00:03:00,580
service architecture composed mostly of

00:02:57,730 --> 00:03:03,340
Java Kotlin and node micro services I

00:03:00,580 --> 00:03:05,020
have feelings but they are beyond the

00:03:03,340 --> 00:03:08,350
scope of this talk so suffice it to say

00:03:05,020 --> 00:03:11,200
that given the scale and complexity of

00:03:08,350 --> 00:03:14,140
what we do I'm incredibly proud to be a

00:03:11,200 --> 00:03:16,390
member of the about a team the project I

00:03:14,140 --> 00:03:19,180
began around this time a little over a

00:03:16,390 --> 00:03:21,340
year ago was to take one aspect of the

00:03:19,180 --> 00:03:24,280
financial domain of our rails app and

00:03:21,340 --> 00:03:26,440
move it into a micro service for some

00:03:24,280 --> 00:03:28,420
additional context about the project I

00:03:26,440 --> 00:03:30,130
want to pause for a second to give an

00:03:28,420 --> 00:03:33,370
overview of the system we're talking

00:03:30,130 --> 00:03:36,160
about brands pay ibotta to run coupons

00:03:33,370 --> 00:03:39,160
or offers in our iPhone and Android apps

00:03:36,160 --> 00:03:41,920
which pay cash to our users in return

00:03:39,160 --> 00:03:43,750
for the purchases they make I work in

00:03:41,920 --> 00:03:45,730
the domain that tries to make smart

00:03:43,750 --> 00:03:48,400
predictions about when we should remove

00:03:45,730 --> 00:03:50,440
offers from the app so that we don't

00:03:48,400 --> 00:03:53,410
exceed budgets set in the contracts with

00:03:50,440 --> 00:03:54,820
our brand clients a year ago we had a

00:03:53,410 --> 00:03:57,130
system in place called real-time

00:03:54,820 --> 00:04:00,190
expiration service with two main

00:03:57,130 --> 00:04:02,830
purposes first real-time expiration

00:04:00,190 --> 00:04:06,060
service tracked budget usage for all

00:04:02,830 --> 00:04:09,610
content in our application using Redis

00:04:06,060 --> 00:04:12,340
second by a scheduled job all pertinent

00:04:09,610 --> 00:04:14,350
data was read from Redis and enriched

00:04:12,340 --> 00:04:16,780
with additional business information

00:04:14,350 --> 00:04:18,910
stored in our database information like

00:04:16,780 --> 00:04:22,590
which offers belong to which contracts

00:04:18,910 --> 00:04:25,210
the job then iterated over each contract

00:04:22,590 --> 00:04:28,060
calculated an expected date of budget

00:04:25,210 --> 00:04:31,180
exhaustion and adjusted expiration dates

00:04:28,060 --> 00:04:33,460
on our coupons accordingly we decided to

00:04:31,180 --> 00:04:35,449
move the new system which we dubbed

00:04:33,460 --> 00:04:38,090
real-time exploration service version

00:04:35,449 --> 00:04:40,639
two out of the majestic monolith to

00:04:38,090 --> 00:04:42,770
improve performance and decrease

00:04:40,639 --> 00:04:44,539
coupling such that we could add

00:04:42,770 --> 00:04:45,020
functionality more flexibly in the

00:04:44,539 --> 00:04:47,779
future

00:04:45,020 --> 00:04:49,729
in particular we were interested in

00:04:47,779 --> 00:04:51,639
iterating on smarter and more

00:04:49,729 --> 00:04:53,719
complicated prediction algorithms

00:04:51,639 --> 00:04:56,059
additionally the system had a costly

00:04:53,719 --> 00:04:58,520
dependency we were hoping to remove from

00:04:56,059 --> 00:05:02,059
the monolith entirely thereby decreasing

00:04:58,520 --> 00:05:05,509
our monthly AWS bill so now the story

00:05:02,059 --> 00:05:07,339
begins we had a great opportunity to

00:05:05,509 --> 00:05:10,159
make an impact on I bought us bottom

00:05:07,339 --> 00:05:12,469
line we wanted to staff up the team in

00:05:10,159 --> 00:05:14,330
order to accelerate development so we

00:05:12,469 --> 00:05:17,479
hired a new engineer with a background

00:05:14,330 --> 00:05:19,279
in tracking high-volume at events we

00:05:17,479 --> 00:05:21,949
were really excited to get her involved

00:05:19,279 --> 00:05:23,839
in a project as soon as possible when we

00:05:21,949 --> 00:05:26,599
began to scope out the project with our

00:05:23,839 --> 00:05:30,110
team we naturally began to discuss which

00:05:26,599 --> 00:05:32,689
technology we thought might be the best

00:05:30,110 --> 00:05:35,300
fit for the problem space our new

00:05:32,689 --> 00:05:37,729
co-worker was arted that this was a

00:05:35,300 --> 00:05:40,279
perfect use case for Scala her favorite

00:05:37,729 --> 00:05:43,069
language and akka a framework for

00:05:40,279 --> 00:05:45,379
building concurrent distributed systems

00:05:43,069 --> 00:05:47,180
I remember sitting in the planning

00:05:45,379 --> 00:05:49,430
meeting with my team our manager and

00:05:47,180 --> 00:05:51,589
members of the architecture team whom we

00:05:49,430 --> 00:05:53,300
needed to get buy-in from about

00:05:51,589 --> 00:05:55,639
introducing new technology in this

00:05:53,300 --> 00:05:57,110
critical system one of the most senior

00:05:55,639 --> 00:05:59,240
architects asked a ton of tough

00:05:57,110 --> 00:06:01,879
questions and our new teammate did not

00:05:59,240 --> 00:06:03,709
shy away from her conviction the message

00:06:01,879 --> 00:06:05,689
I walked away with was you're making new

00:06:03,709 --> 00:06:08,389
bed and you're gonna have to lay in it

00:06:05,689 --> 00:06:10,580
we could use akka but we have to accept

00:06:08,389 --> 00:06:12,889
responsibility for this decision and we

00:06:10,580 --> 00:06:14,779
would not have the benefit of any

00:06:12,889 --> 00:06:17,899
significant institutional knowledge or

00:06:14,779 --> 00:06:20,360
experience here's where the first best

00:06:17,899 --> 00:06:24,020
intention was not enough to ensure a

00:06:20,360 --> 00:06:25,639
perfectly executed project the team had

00:06:24,020 --> 00:06:27,740
the good intention of picking the right

00:06:25,639 --> 00:06:29,899
technology for the problem we saw a

00:06:27,740 --> 00:06:32,120
problem space that we thought our newest

00:06:29,899 --> 00:06:34,610
teammates favorite tech could help solve

00:06:32,120 --> 00:06:36,860
as a team we tried to compromise with

00:06:34,610 --> 00:06:38,539
the larger engineering organization by

00:06:36,860 --> 00:06:40,909
splitting the difference on language and

00:06:38,539 --> 00:06:43,459
framework we went with Kotlin which is a

00:06:40,909 --> 00:06:44,959
JVM language and there were already

00:06:43,459 --> 00:06:47,360
several services in production written

00:06:44,959 --> 00:06:48,800
in it not to mention our entire our

00:06:47,360 --> 00:06:52,789
entire Android app

00:06:48,800 --> 00:06:55,250
we also went with akka now this was not

00:06:52,789 --> 00:06:58,009
a mistake because of some fundamental

00:06:55,250 --> 00:07:00,409
flaw in common Anaka

00:06:58,009 --> 00:07:03,500
I actually really like Colin and I kind

00:07:00,409 --> 00:07:05,690
of understand akka this was not a

00:07:03,500 --> 00:07:08,389
mistake because these technologies were

00:07:05,690 --> 00:07:10,310
not suited for our problem I've seen

00:07:08,389 --> 00:07:12,530
many discussion threads arguing that

00:07:10,310 --> 00:07:14,780
technology X is better than technology Y

00:07:12,530 --> 00:07:17,060
and after considerable back-and-forth

00:07:14,780 --> 00:07:19,039
someone knew chimes in that both

00:07:17,060 --> 00:07:21,289
technologies are perfectly adequate and

00:07:19,039 --> 00:07:23,569
the original poster should just pick the

00:07:21,289 --> 00:07:26,030
one she likes the best so I'll say it

00:07:23,569 --> 00:07:28,759
again I'm not hating on Anka or Colin

00:07:26,030 --> 00:07:31,039
here picking these technologies was a

00:07:28,759 --> 00:07:33,139
mistake because no one on the team had

00:07:31,039 --> 00:07:35,870
ever written any production grade Colin

00:07:33,139 --> 00:07:38,110
and only one of us in the entire company

00:07:35,870 --> 00:07:40,699
had any experience with akka the

00:07:38,110 --> 00:07:43,039
technology was a bad fit for our company

00:07:40,699 --> 00:07:45,080
and our team it's fine to use new

00:07:43,039 --> 00:07:47,840
technologies for a proof-of-concept a

00:07:45,080 --> 00:07:50,539
feature bake-off or even a system of

00:07:47,840 --> 00:07:52,759
secondary importance but our system if

00:07:50,539 --> 00:07:55,130
we got it wrong could cost millions of

00:07:52,759 --> 00:07:58,069
dollars we picked the wrong technology

00:07:55,130 --> 00:07:59,990
and as a result we had to fight a bunch

00:07:58,069 --> 00:08:03,050
of plumbing battles that slowed our

00:07:59,990 --> 00:08:05,029
progress in retrospect we should have

00:08:03,050 --> 00:08:06,979
used a more conventional stack for our

00:08:05,029 --> 00:08:09,620
companies such as Java spraying and

00:08:06,979 --> 00:08:12,370
camel or if I could really have my wave

00:08:09,620 --> 00:08:15,229
Ruby and rails or maybe Sinatra

00:08:12,370 --> 00:08:17,599
sometimes it makes sense to take a

00:08:15,229 --> 00:08:19,729
gamble with a new technology and expand

00:08:17,599 --> 00:08:21,440
the team skill set I've heard the advice

00:08:19,729 --> 00:08:23,779
that software developers should pick up

00:08:21,440 --> 00:08:25,610
a new language every year but this

00:08:23,779 --> 00:08:27,289
project was just too important and

00:08:25,610 --> 00:08:31,069
selecting tools that did not fit the

00:08:27,289 --> 00:08:33,500
team led to the next mistake in my

00:08:31,069 --> 00:08:36,349
experience teams of developers are at

00:08:33,500 --> 00:08:39,380
their best when they swarm on a common

00:08:36,349 --> 00:08:41,539
problem within a domain in those cases

00:08:39,380 --> 00:08:44,390
work moves quickly and knowledge is

00:08:41,539 --> 00:08:47,300
share across the team effortlessly as

00:08:44,390 --> 00:08:49,100
you may have already guessed this was

00:08:47,300 --> 00:08:51,890
not the case on real-time exploration

00:08:49,100 --> 00:08:54,260
service version 2 my second mistake was

00:08:51,890 --> 00:08:57,260
siloing work while none of us were

00:08:54,260 --> 00:08:59,839
expert in Colin at the start my teammate

00:08:57,260 --> 00:09:01,279
was very experienced with akka I had a

00:08:59,839 --> 00:09:02,329
lot of experience in our rails with

00:09:01,279 --> 00:09:04,429
monolith

00:09:02,329 --> 00:09:06,290
this was not the only project we were

00:09:04,429 --> 00:09:08,629
focused on at this time last year I

00:09:06,290 --> 00:09:10,910
bought it tends to move fast and has

00:09:08,629 --> 00:09:13,339
multiple priorities so to get real-time

00:09:10,910 --> 00:09:16,850
exploration service version 2 delivered

00:09:13,339 --> 00:09:18,799
we siloed work my teammate took most of

00:09:16,850 --> 00:09:20,269
the akka and cotton stories and I

00:09:18,799 --> 00:09:23,360
handled the integration with the Rails

00:09:20,269 --> 00:09:25,790
monolith our intentions were to deliver

00:09:23,360 --> 00:09:28,489
the project faster than expected and to

00:09:25,790 --> 00:09:30,860
do that we siloed work this was a big

00:09:28,489 --> 00:09:33,049
mistake well in the short term it

00:09:30,860 --> 00:09:35,360
accelerated our development over the

00:09:33,049 --> 00:09:37,879
life of the project and beyond not

00:09:35,360 --> 00:09:39,410
having a shared deep understanding of

00:09:37,879 --> 00:09:42,079
both systems actually slowed us down

00:09:39,410 --> 00:09:44,119
significantly when it came time for me

00:09:42,079 --> 00:09:46,309
to modify code written by my teammate I

00:09:44,119 --> 00:09:48,170
was completely lost and we missed the

00:09:46,309 --> 00:09:51,619
opportunity for me to show my domain

00:09:48,170 --> 00:09:53,660
knowledge of our finance system this

00:09:51,619 --> 00:09:56,059
went from manageable risk at the

00:09:53,660 --> 00:09:57,889
beginning it's a serious problem a few

00:09:56,059 --> 00:10:00,230
months into the project when my teammate

00:09:57,889 --> 00:10:02,209
joined a different team and this is the

00:10:00,230 --> 00:10:05,059
real issue with siloed knowledge teams

00:10:02,209 --> 00:10:07,069
change people move to new jobs in my

00:10:05,059 --> 00:10:09,860
case luckily my teammate just moved to a

00:10:07,069 --> 00:10:12,079
new area in the office but any system

00:10:09,860 --> 00:10:13,819
that is dependent on the knowledge of

00:10:12,079 --> 00:10:17,089
one software developer is prone to

00:10:13,819 --> 00:10:19,279
failure in retrospect the right move

00:10:17,089 --> 00:10:21,919
would have been to slow down and pair on

00:10:19,279 --> 00:10:25,249
work until we felt comfortable in the

00:10:21,919 --> 00:10:27,019
others domain then we could have moved

00:10:25,249 --> 00:10:29,839
much faster over the full project

00:10:27,019 --> 00:10:31,730
lifespan and knowing now that might seem

00:10:29,839 --> 00:10:33,980
eight was going to switch teams not

00:10:31,730 --> 00:10:36,860
getting fluent in both systems was just

00:10:33,980 --> 00:10:39,139
obviously the wrong call while we were

00:10:36,860 --> 00:10:40,929
silo in work we were also making the

00:10:39,139 --> 00:10:43,249
additional mistake of prematurely

00:10:40,929 --> 00:10:46,429
optimizing various components in our

00:10:43,249 --> 00:10:49,009
system premature optimization can be an

00:10:46,429 --> 00:10:50,809
easy trap to fall into it feels great to

00:10:49,009 --> 00:10:53,509
think about the most efficient way to

00:10:50,809 --> 00:10:55,910
process some data or imagine the system

00:10:53,509 --> 00:10:59,209
at ten or a hundred times anticipated

00:10:55,910 --> 00:11:02,119
scale but in the pragmatic programmer by

00:10:59,209 --> 00:11:04,009
Andy Hunt and Dave Thomas they say that

00:11:02,119 --> 00:11:06,199
you should work on optimizing a piece of

00:11:04,009 --> 00:11:07,149
code only when you know it as a

00:11:06,199 --> 00:11:09,319
bottleneck

00:11:07,149 --> 00:11:11,179
unfortunately I read the pragmatic

00:11:09,319 --> 00:11:12,529
programmer six months into this project

00:11:11,179 --> 00:11:14,660
which meant that I had basically

00:11:12,529 --> 00:11:15,470
undertaken six months worth of premature

00:11:14,660 --> 00:11:17,390
optimization

00:11:15,470 --> 00:11:21,050
before I could benefit from Andy and

00:11:17,390 --> 00:11:23,480
Dave's wisdom we began to prematurely

00:11:21,050 --> 00:11:25,400
optimize on both ends of our system we

00:11:23,480 --> 00:11:27,950
were thinking multiple steps ahead of

00:11:25,400 --> 00:11:29,450
where we actually were or needed to be

00:11:27,950 --> 00:11:31,340
on the rail side

00:11:29,450 --> 00:11:34,520
I was hoping to preempt any unnecessary

00:11:31,340 --> 00:11:36,170
data base trips I had come across this

00:11:34,520 --> 00:11:38,000
issue in the past so I thought by

00:11:36,170 --> 00:11:40,640
implementing some simple caching I'd

00:11:38,000 --> 00:11:42,440
ensure that our database would not get

00:11:40,640 --> 00:11:46,220
hit too hard when we turned the service

00:11:42,440 --> 00:11:48,440
on oh how little I knew by implementing

00:11:46,220 --> 00:11:50,570
caching before we actually needed it I

00:11:48,440 --> 00:11:52,490
made it really hard to debug some of the

00:11:50,570 --> 00:11:55,760
issues we encountered when we began to

00:11:52,490 --> 00:11:57,500
slowly roll out the system this is

00:11:55,760 --> 00:12:00,320
especially frustrating because at the

00:11:57,500 --> 00:12:02,890
start we turned the system on for only a

00:12:00,320 --> 00:12:05,660
single set of offers under one contract

00:12:02,890 --> 00:12:07,970
at that level of traffic there would be

00:12:05,660 --> 00:12:10,730
absolutely zero threat to the database

00:12:07,970 --> 00:12:13,610
so no problem for my treasured caching

00:12:10,730 --> 00:12:15,770
to solve so while we were running with a

00:12:13,610 --> 00:12:18,110
thousandth of the traffic we were

00:12:15,770 --> 00:12:20,600
building for and the cache was not at

00:12:18,110 --> 00:12:23,240
all helping our database it was actually

00:12:20,600 --> 00:12:27,200
making it horribly painful to debug the

00:12:23,240 --> 00:12:28,790
initial problems on the akka and we were

00:12:27,200 --> 00:12:31,760
building a system that out-of-the-box

00:12:28,790 --> 00:12:35,360
could process about 10,000 times more

00:12:31,760 --> 00:12:37,280
volume than we needed my team jokes now

00:12:35,360 --> 00:12:40,340
that we built an f1 race car when we

00:12:37,280 --> 00:12:42,440
really needed a wheelbarrow we also were

00:12:40,340 --> 00:12:44,900
building for the distant future instead

00:12:42,440 --> 00:12:47,180
of delivering incremental value we

00:12:44,900 --> 00:12:49,310
started asking what ifs about the future

00:12:47,180 --> 00:12:51,770
features that we'd like to add and

00:12:49,310 --> 00:12:54,620
started building them before we had a

00:12:51,770 --> 00:12:56,750
strong foundation for example we

00:12:54,620 --> 00:12:58,880
anticipated eventually turning over the

00:12:56,750 --> 00:13:01,190
prediction algorithm logic to our

00:12:58,880 --> 00:13:04,000
analytics team by way of an Amazon

00:13:01,190 --> 00:13:07,010
lambda function or machine learning call

00:13:04,000 --> 00:13:10,520
instead of solving that problem when we

00:13:07,010 --> 00:13:12,860
knew more or had our service actually

00:13:10,520 --> 00:13:14,840
running and giving us feedback we

00:13:12,860 --> 00:13:17,690
started to build out the data that these

00:13:14,840 --> 00:13:20,540
anticipated models might need right away

00:13:17,690 --> 00:13:23,180
again our intentions were in the right

00:13:20,540 --> 00:13:25,490
place we were trying to imagine the

00:13:23,180 --> 00:13:27,770
future where volume performance and

00:13:25,490 --> 00:13:29,270
complexity were far higher than the

00:13:27,770 --> 00:13:31,550
immediate short-term and

00:13:29,270 --> 00:13:33,380
medium-term needs while premature

00:13:31,550 --> 00:13:35,030
optimization can be a fun engineering

00:13:33,380 --> 00:13:37,790
challenge and it certainly made me feel

00:13:35,030 --> 00:13:39,710
smart at times it inevitably made me

00:13:37,790 --> 00:13:41,930
feel dumb when I realized that I'd spent

00:13:39,710 --> 00:13:44,180
all that time and energy solving an

00:13:41,930 --> 00:13:46,460
imaginary problem and when trying to

00:13:44,180 --> 00:13:47,960
solve those imaginary problems I ended

00:13:46,460 --> 00:13:50,630
up creating a lot of additional

00:13:47,960 --> 00:13:54,440
complexity which turned into a very real

00:13:50,630 --> 00:13:57,380
problem in hindsight imaginary problems

00:13:54,440 --> 00:14:00,620
are not problems I have learned to try

00:13:57,380 --> 00:14:02,810
to adopt a mindset of solving immediate

00:14:00,620 --> 00:14:04,970
problems and I've become fond of the

00:14:02,810 --> 00:14:07,010
same that sounds like a problem for

00:14:04,970 --> 00:14:10,430
future us when I catch myself falling

00:14:07,010 --> 00:14:13,460
off track we picked the wrong technology

00:14:10,430 --> 00:14:16,310
for our team an organization we siloed

00:14:13,460 --> 00:14:18,470
work and we prematurely optimized on top

00:14:16,310 --> 00:14:21,140
of that we made probably our biggest

00:14:18,470 --> 00:14:24,110
mistake we introduced too many changes

00:14:21,140 --> 00:14:26,690
at one time in some ways this dovetails

00:14:24,110 --> 00:14:29,090
with premature optimization real-time

00:14:26,690 --> 00:14:32,630
exploration service version 2 relied on

00:14:29,090 --> 00:14:35,030
both new input data and new processing

00:14:32,630 --> 00:14:36,740
we had it running in various dry mode

00:14:35,030 --> 00:14:39,830
states where we could compare the

00:14:36,740 --> 00:14:42,770
results of v1 and v2 the problem was

00:14:39,830 --> 00:14:45,140
that we changed both input data and our

00:14:42,770 --> 00:14:48,170
algorithm for processing the data at the

00:14:45,140 --> 00:14:50,210
same time as a result when comparing the

00:14:48,170 --> 00:14:52,910
two systems we were really doing an

00:14:50,210 --> 00:14:54,980
apples to oranges comparison this is

00:14:52,910 --> 00:14:56,840
something that I think comes up when

00:14:54,980 --> 00:14:59,750
moving a piece of a monolith into a

00:14:56,840 --> 00:15:02,240
micro service how do you know the micro

00:14:59,750 --> 00:15:05,630
service is working as expected if it is

00:15:02,240 --> 00:15:08,180
actually not meant to exactly replicate

00:15:05,630 --> 00:15:09,860
the functionality it's replacing our

00:15:08,180 --> 00:15:12,380
intention here was to have a more

00:15:09,860 --> 00:15:14,630
reliable and trusted data source as well

00:15:12,380 --> 00:15:16,310
as more accurate processing but we ended

00:15:14,630 --> 00:15:18,080
up having a tough time building

00:15:16,310 --> 00:15:19,460
confidence in our system because

00:15:18,080 --> 00:15:22,760
multiple pieces were changing

00:15:19,460 --> 00:15:24,680
simultaneously one thing I've noticed

00:15:22,760 --> 00:15:27,260
when working with really experienced

00:15:24,680 --> 00:15:29,270
engineers for example Justin Hart who is

00:15:27,260 --> 00:15:32,840
one of the first engineers at ibotta is

00:15:29,270 --> 00:15:35,300
that they make really bite-sized changes

00:15:32,840 --> 00:15:37,700
to the systems they work on then they

00:15:35,300 --> 00:15:40,490
verify those changes have the intended

00:15:37,700 --> 00:15:42,250
and expected results only after

00:15:40,490 --> 00:15:44,920
verification do they move on

00:15:42,250 --> 00:15:45,610
exchange there are no assumptions no

00:15:44,920 --> 00:15:47,650
shortcuts

00:15:45,610 --> 00:15:50,140
but in the end slow and steady wins the

00:15:47,650 --> 00:15:52,120
race instead of making changes to what

00:15:50,140 --> 00:15:54,610
data stream we used as our source and

00:15:52,120 --> 00:15:57,130
how we process the data we should have

00:15:54,610 --> 00:15:59,680
replicated the smallest possible unit of

00:15:57,130 --> 00:16:01,270
value for the business and iterated we

00:15:59,680 --> 00:16:03,850
should have started with the input data

00:16:01,270 --> 00:16:05,290
and verified it against the old data we

00:16:03,850 --> 00:16:07,980
then should have switched the old

00:16:05,290 --> 00:16:10,690
service on to the new data and verified

00:16:07,980 --> 00:16:12,970
only after being confident in the source

00:16:10,690 --> 00:16:15,550
data should we then have moved on to the

00:16:12,970 --> 00:16:19,620
prediction algorithm or I made four big

00:16:15,550 --> 00:16:23,080
mistakes so how does the story end I

00:16:19,620 --> 00:16:25,840
love the idea of a memorable post-mortem

00:16:23,080 --> 00:16:28,480
track at railsconf failure is feedback

00:16:25,840 --> 00:16:30,100
failure is an amazing teacher I learned

00:16:28,480 --> 00:16:32,800
so much over the course of this project

00:16:30,100 --> 00:16:34,390
and I'm a much better developer for

00:16:32,800 --> 00:16:37,390
having gone through this experience of

00:16:34,390 --> 00:16:39,250
making these four big mistakes but my

00:16:37,390 --> 00:16:41,860
story does not end with a traditional

00:16:39,250 --> 00:16:44,830
post mortem meeting or document although

00:16:41,860 --> 00:16:47,050
I've done that many many times you see

00:16:44,830 --> 00:16:49,210
even though I made these four big

00:16:47,050 --> 00:16:51,190
mistakes there were some things that we

00:16:49,210 --> 00:16:54,220
did get right that enabled us to deliver

00:16:51,190 --> 00:16:56,410
the project and affect an estimated 1.5

00:16:54,220 --> 00:16:58,420
million dollars in annual eyes

00:16:56,410 --> 00:17:01,360
operational expense savings this year

00:16:58,420 --> 00:17:03,460
alone we communicated our progress to

00:17:01,360 --> 00:17:04,810
our stakeholders we presented our work

00:17:03,460 --> 00:17:07,060
with varying levels of technical

00:17:04,810 --> 00:17:09,339
specificity to various internal

00:17:07,060 --> 00:17:11,199
audiences on top of that we didn't wait

00:17:09,339 --> 00:17:13,569
until delivering the project to have our

00:17:11,199 --> 00:17:15,520
post mortem or retrospective we

00:17:13,569 --> 00:17:18,490
discussed as a team the mistakes that

00:17:15,520 --> 00:17:21,370
were made and work to mitigate them I

00:17:18,490 --> 00:17:23,319
took common courses online I started a

00:17:21,370 --> 00:17:25,780
baby's first common study group on our

00:17:23,319 --> 00:17:27,490
engineering team I pulled in an engineer

00:17:25,780 --> 00:17:29,890
who'd been deep in Colin for the past

00:17:27,490 --> 00:17:31,990
year to do a code review with me on a

00:17:29,890 --> 00:17:34,300
feature I was working on I ripped out my

00:17:31,990 --> 00:17:35,890
ridiculous cache we stopped planning

00:17:34,300 --> 00:17:37,960
from the distant future and coming up

00:17:35,890 --> 00:17:40,150
with imaginary problems and started to

00:17:37,960 --> 00:17:41,920
focus on the immediate goal of a hundred

00:17:40,150 --> 00:17:45,010
percent traffic move from the monolith

00:17:41,920 --> 00:17:47,950
to the micro service and somehow we did

00:17:45,010 --> 00:17:49,840
and that's why I felt it was important

00:17:47,950 --> 00:17:51,790
to give this talk I was eager to share

00:17:49,840 --> 00:17:54,730
my mistakes picking the wrong technology

00:17:51,790 --> 00:17:56,140
silently work premature optimization and

00:17:54,730 --> 00:17:58,330
making too many change

00:17:56,140 --> 00:18:00,520
at once with my railsconf brothers and

00:17:58,330 --> 00:18:03,520
sisters so that hopefully I can help you

00:18:00,520 --> 00:18:05,620
avoid making them yourself I feel really

00:18:03,520 --> 00:18:06,970
fortunate to be a part of an incredible

00:18:05,620 --> 00:18:09,220
engineering team at ibotta

00:18:06,970 --> 00:18:12,220
and to have come into coding as a career

00:18:09,220 --> 00:18:13,840
changer by way of the Turing school of

00:18:12,220 --> 00:18:16,300
software and design in Denver Colorado

00:18:13,840 --> 00:18:18,850
I'm grateful for this rails community

00:18:16,300 --> 00:18:20,230
and I want to thank all of you out there

00:18:18,850 --> 00:18:22,900
for watching my top if you have

00:18:20,230 --> 00:18:25,960
questions feel free to reach out stay

00:18:22,900 --> 00:18:28,020
safe and I appreciate your time thank

00:18:25,960 --> 00:18:28,020

YouTube URL: https://www.youtube.com/watch?v=2-m4_srVuNY


