Title: RailsConf 2020 CE - Measure Twice, Cut Once by Alec Clarke
Publication date: 2020-04-24
Playlist: RailsConf 2020 CE
Description: 
	Measure Twice, Cut Once by Alec Clarke

"Woodworking and writing code go hand in hand, right?

On the surface these two activities may seem different, but the skills, tools, and mindset required to create quality furniture are consistent with the qualities required to write code that delights both the customer and developer.

As a woodworking hobbyist and software developer, I was amazed at how learning to build a table taught me to be a more impactful developer. In this talk weâ€™ll discover how woodworking can teach us to move fast and not break things, be more consistent in our execution, and deliver lasting value to customers."

__________

Alec is a software developer and woodworking enthusiast who works remotely from Kingston, Ontario for Clio where he focuses on creating an enjoyable and effortless experience between law firms and their clients.
Captions: 
	00:00:09,269 --> 00:00:14,530
welcome to this couch edition of

00:00:11,460 --> 00:00:17,170
railsconf 2020

00:00:14,530 --> 00:00:20,020
my name's Alec I'm a senior software

00:00:17,170 --> 00:00:22,390
developer at Clio where we work on

00:00:20,020 --> 00:00:26,200
transforming the practice of law for

00:00:22,390 --> 00:00:28,840
good now early on I was introduced to

00:00:26,200 --> 00:00:31,630
woodworking that's been many afternoons

00:00:28,840 --> 00:00:33,280
in my grandfather's workshop watching

00:00:31,630 --> 00:00:37,170
him turn these rough cuts of material

00:00:33,280 --> 00:00:39,370
and a beautiful pieces of furniture that

00:00:37,170 --> 00:00:42,370
ability make that type of transformation

00:00:39,370 --> 00:00:45,129
really stuck with me so it was no

00:00:42,370 --> 00:00:48,820
surprise that a number of years later I

00:00:45,129 --> 00:00:51,070
also took up woodworking I started with

00:00:48,820 --> 00:00:54,510
the beginner projects like picture

00:00:51,070 --> 00:00:56,829
frames and building this box and

00:00:54,510 --> 00:00:59,499
eventually after honing my skills for

00:00:56,829 --> 00:01:03,989
some time I graduated to more advanced

00:00:59,499 --> 00:01:06,280
topics like building this rocking chair

00:01:03,989 --> 00:01:08,800
now as I graduated school

00:01:06,280 --> 00:01:11,530
and I moved away to start my career as a

00:01:08,800 --> 00:01:14,830
developer I lost touch with woodworking

00:01:11,530 --> 00:01:17,290
and it wasn't until this past year that

00:01:14,830 --> 00:01:19,570
I was able to rekindle that passion when

00:01:17,290 --> 00:01:22,000
I decided to enroll in furniture

00:01:19,570 --> 00:01:26,890
building courses on my local community

00:01:22,000 --> 00:01:30,149
college now the focal point of the first

00:01:26,890 --> 00:01:33,180
course was building this shaker table

00:01:30,149 --> 00:01:36,310
the shaker design is relatively simple

00:01:33,180 --> 00:01:39,189
it has nice clean lines and tapers cut

00:01:36,310 --> 00:01:43,869
on each leg and small details that give

00:01:39,189 --> 00:01:46,119
it a very classic look it's a relatively

00:01:43,869 --> 00:01:48,670
simple build itself but it does a great

00:01:46,119 --> 00:01:52,149
job of introducing beginner woodworkers

00:01:48,670 --> 00:01:57,000
to the basic techniques required to make

00:01:52,149 --> 00:01:58,960
quality furniture now going into this I

00:01:57,000 --> 00:02:01,780
expected to learn plenty about

00:01:58,960 --> 00:02:04,270
woodworking but I was surprised that I

00:02:01,780 --> 00:02:08,490
also learnt quite a bit about writing

00:02:04,270 --> 00:02:11,620
better code and being a better developer

00:02:08,490 --> 00:02:13,330
so in this talk I want to walk through

00:02:11,620 --> 00:02:15,850
the journey of learning to build this

00:02:13,330 --> 00:02:17,800
table and three of the lessons it taught

00:02:15,850 --> 00:02:21,090
me about being a more impactful

00:02:17,800 --> 00:02:25,300
developer and no better place to start

00:02:21,090 --> 00:02:27,460
that was safety first the first lessons

00:02:25,300 --> 00:02:30,850
in the workshop are always

00:02:27,460 --> 00:02:32,740
safety at least they should be if you

00:02:30,850 --> 00:02:35,260
want to end up with as many fingers as

00:02:32,740 --> 00:02:36,430
he started with and that was no

00:02:35,260 --> 00:02:39,820
different than the course that I was

00:02:36,430 --> 00:02:42,520
taking we took time to understand how

00:02:39,820 --> 00:02:45,610
each tool worked what its purpose was

00:02:42,520 --> 00:02:47,800
the risks associated with using them and

00:02:45,610 --> 00:02:50,440
how to protect ourselves from hitting

00:02:47,800 --> 00:02:53,880
critical issues and being able to

00:02:50,440 --> 00:02:58,960
recover quickly when things do go wrong

00:02:53,880 --> 00:03:02,590
as an example this is the table saw it's

00:02:58,960 --> 00:03:04,870
usually the workhorse of most shops it's

00:03:02,590 --> 00:03:08,710
used for making straight accurate cuts

00:03:04,870 --> 00:03:10,870
and doing it very efficiently it's an

00:03:08,710 --> 00:03:13,960
important tool to get used to because

00:03:10,870 --> 00:03:17,650
it's used in at least one step of most

00:03:13,960 --> 00:03:22,540
projects but it's also responsible for

00:03:17,650 --> 00:03:25,210
the most workshop accidents however many

00:03:22,540 --> 00:03:27,340
of these accidents can be prevented when

00:03:25,210 --> 00:03:31,930
we use the standard safety mechanisms

00:03:27,340 --> 00:03:34,120
for operating the saw these are things

00:03:31,930 --> 00:03:37,270
like using a blade guard whenever

00:03:34,120 --> 00:03:39,780
possible the blade guard is simply a

00:03:37,270 --> 00:03:42,400
plastic shield that sits over the blade

00:03:39,780 --> 00:03:45,190
it allows the material being cut to

00:03:42,400 --> 00:03:49,300
slide under the blade keeping your hand

00:03:45,190 --> 00:03:52,960
from accidentally contacting it on a

00:03:49,300 --> 00:03:54,700
similar note this is a push stick well

00:03:52,960 --> 00:03:58,930
it might seem like a very primitive tool

00:03:54,700 --> 00:04:01,960
and it is the push that keeps your hand

00:03:58,930 --> 00:04:05,020
at a safe proximity from the blade when

00:04:01,960 --> 00:04:07,330
making narrow cuts it also provides

00:04:05,020 --> 00:04:09,400
extra leverage to push that material

00:04:07,330 --> 00:04:12,630
completely through the cut without

00:04:09,400 --> 00:04:15,520
having to lean over the blade to do so

00:04:12,630 --> 00:04:17,739
so these safety mechanisms and others

00:04:15,520 --> 00:04:20,590
like them are easy to build into a

00:04:17,739 --> 00:04:23,320
checklist each and every time we use the

00:04:20,590 --> 00:04:26,740
saw they prevent us from hitting

00:04:23,320 --> 00:04:29,170
critical issues and they also ensure

00:04:26,740 --> 00:04:33,880
that we have a long safe career in the

00:04:29,170 --> 00:04:36,720
workshop now when we chip code we might

00:04:33,880 --> 00:04:39,130
not be at risk of losing a finger

00:04:36,720 --> 00:04:39,700
however that doesn't mean we shouldn't

00:04:39,130 --> 00:04:41,590
take

00:04:39,700 --> 00:04:43,990
shouldn't and can't take steps to

00:04:41,590 --> 00:04:46,600
prevent ourselves from hitting critical

00:04:43,990 --> 00:04:50,680
issues and being able to recover from

00:04:46,600 --> 00:04:52,660
them if and when they do pop up so to

00:04:50,680 --> 00:04:54,790
see what that could look like let's

00:04:52,660 --> 00:04:58,780
introduce the contrived rails app

00:04:54,790 --> 00:05:02,080
example for this doc it'll be an online

00:04:58,780 --> 00:05:05,440
storefront for our artisan tree table

00:05:02,080 --> 00:05:07,390
furniture store where our customers can

00:05:05,440 --> 00:05:11,950
go ahead and place orders for finely

00:05:07,390 --> 00:05:14,680
crafted handmade furniture and in our

00:05:11,950 --> 00:05:18,430
app we have a material purchaser class

00:05:14,680 --> 00:05:20,290
as orders are placed we need to go ahead

00:05:18,430 --> 00:05:23,230
and actually purchase the material to

00:05:20,290 --> 00:05:26,740
build them so the purchase material for

00:05:23,230 --> 00:05:30,970
method accepts an order and a list of

00:05:26,740 --> 00:05:32,730
project materials as its arguments it

00:05:30,970 --> 00:05:35,170
then iterates through the materials

00:05:32,730 --> 00:05:37,870
sending a request to their art lumber

00:05:35,170 --> 00:05:40,720
supplier to make sure we purchase what

00:05:37,870 --> 00:05:42,610
we need and after that's all done we go

00:05:40,720 --> 00:05:46,990
ahead and mark the order as having

00:05:42,610 --> 00:05:49,750
material purchased now lately we've had

00:05:46,990 --> 00:05:51,940
a requirement change the lumber we're

00:05:49,750 --> 00:05:57,880
getting back from our supplier is just

00:05:51,940 --> 00:06:00,400
ok well Bree luan is the best lumber now

00:05:57,880 --> 00:06:02,860
lucky for us both these suppliers have a

00:06:00,400 --> 00:06:06,130
consistent API and this is really only

00:06:02,860 --> 00:06:10,660
change we need to make so let's go ahead

00:06:06,130 --> 00:06:14,340
and chip that then our air monitoring

00:06:10,660 --> 00:06:17,400
starts to detect some exceptions and we

00:06:14,340 --> 00:06:20,170
quickly realize we just shipped a bug

00:06:17,400 --> 00:06:22,720
each new order that's being created is

00:06:20,170 --> 00:06:27,040
failing to have material purchased for

00:06:22,720 --> 00:06:31,300
it so as fast as we can we get a revert

00:06:27,040 --> 00:06:33,850
going get sign off on that revert wait

00:06:31,300 --> 00:06:37,480
for our painfully slow CI process to

00:06:33,850 --> 00:06:41,260
finish then we can merge it go ahead and

00:06:37,480 --> 00:06:44,200
deploy it now that's a pretty painful

00:06:41,260 --> 00:06:47,830
process to get a quick fix back into

00:06:44,200 --> 00:06:51,190
production yet if we had taken a safety

00:06:47,830 --> 00:06:53,880
first mindset upfront things could have

00:06:51,190 --> 00:06:53,880
gone a lot differently

00:06:54,400 --> 00:06:58,840
ideally we could have wrapped our change

00:06:56,660 --> 00:07:01,760
in some sort of conditional that

00:06:58,840 --> 00:07:04,070
basically said hey well everything is

00:07:01,760 --> 00:07:07,520
going as expected continue to use this

00:07:04,070 --> 00:07:09,380
new code and if it isn't go back to

00:07:07,520 --> 00:07:14,450
using the old code that we already

00:07:09,380 --> 00:07:17,030
trusted but really this condition could

00:07:14,450 --> 00:07:20,900
take a step forward by making sure that

00:07:17,030 --> 00:07:23,720
it only allowed a subset of accounts to

00:07:20,900 --> 00:07:25,460
actually access that new code and it

00:07:23,720 --> 00:07:28,880
would incrementally roll out to the

00:07:25,460 --> 00:07:31,550
remainder over time giving us the

00:07:28,880 --> 00:07:36,220
ability to test the waters before we

00:07:31,550 --> 00:07:38,870
exposed our entire user base to a bug

00:07:36,220 --> 00:07:41,810
we'd also want it to be consistent so

00:07:38,870 --> 00:07:44,600
that once a customer was using a new

00:07:41,810 --> 00:07:48,730
code path it would continue to do so and

00:07:44,600 --> 00:07:51,920
it win flip-flop between the two and

00:07:48,730 --> 00:07:54,550
lastly and most importantly we would

00:07:51,920 --> 00:07:57,050
want the ability to rollback instantly

00:07:54,550 --> 00:08:03,550
no need to go through the deploy process

00:07:57,050 --> 00:08:06,440
at all so let's go ahead and build that

00:08:03,550 --> 00:08:10,760
we start by creating a new resource

00:08:06,440 --> 00:08:13,100
called the stage rule out state rollout

00:08:10,760 --> 00:08:17,750
is going to handle all this type of

00:08:13,100 --> 00:08:20,180
incremental rollout logic for us and to

00:08:17,750 --> 00:08:23,600
start there we'll work with the

00:08:20,180 --> 00:08:26,380
migration in the staged rollouts table

00:08:23,600 --> 00:08:30,020
we'll define two columns of interest

00:08:26,380 --> 00:08:32,840
first being the name column this will

00:08:30,020 --> 00:08:35,180
basically give us an understandable name

00:08:32,840 --> 00:08:37,280
to give us some context to the code

00:08:35,180 --> 00:08:39,440
we're rolling out because we might want

00:08:37,280 --> 00:08:44,030
to use this in many places not just for

00:08:39,440 --> 00:08:46,820
one specific change then we define a

00:08:44,030 --> 00:08:48,530
started out column to indicate when that

00:08:46,820 --> 00:08:53,690
change has started to roll out to

00:08:48,530 --> 00:08:57,130
customers jumping to the model will

00:08:53,690 --> 00:08:59,390
implement a ramp up time of eight hours

00:08:57,130 --> 00:09:02,300
indicating how long it takes to go from

00:08:59,390 --> 00:09:04,750
zero percent of user traffic to a

00:09:02,300 --> 00:09:04,750
hundred percent

00:09:05,230 --> 00:09:12,470
then we build a percent enabled method

00:09:08,710 --> 00:09:15,200
simply simply return the percentage of

00:09:12,470 --> 00:09:17,780
how far into that ramp up process we are

00:09:15,200 --> 00:09:21,950
for a given rollout once it's been

00:09:17,780 --> 00:09:23,990
started but we need a kind of better

00:09:21,950 --> 00:09:27,380
interface to use it than just calling

00:09:23,990 --> 00:09:30,080
the model itself so we go ahead and

00:09:27,380 --> 00:09:32,540
build a rollout service the rollout

00:09:30,080 --> 00:09:35,120
service has an enabled for method that

00:09:32,540 --> 00:09:37,700
given the name of a rollout and an

00:09:35,120 --> 00:09:40,460
account ID will return a boolean

00:09:37,700 --> 00:09:42,440
indicating whether or not that account

00:09:40,460 --> 00:09:45,260
has access to the new code we roll you

00:09:42,440 --> 00:09:47,510
know but we want that response to be

00:09:45,260 --> 00:09:51,230
consistent so once it's true it'll

00:09:47,510 --> 00:09:54,650
always be true to do that we take two

00:09:51,230 --> 00:09:57,880
steps the first is we create or find the

00:09:54,650 --> 00:10:01,640
rollout based on the name we're given

00:09:57,880 --> 00:10:03,500
then using some modular arithmetic we'll

00:10:01,640 --> 00:10:07,160
define a formula to give us that

00:10:03,500 --> 00:10:09,020
consistent response back now I'm not

00:10:07,160 --> 00:10:12,020
gonna dive into the math of exactly

00:10:09,020 --> 00:10:15,650
what's going on here so I invite you to

00:10:12,020 --> 00:10:18,280
after finishing this talk come back

00:10:15,650 --> 00:10:20,900
pause it take a look through yourself

00:10:18,280 --> 00:10:23,900
however I do want to point out that this

00:10:20,900 --> 00:10:26,740
type of strategy has a major benefit of

00:10:23,900 --> 00:10:29,660
not relying on any sort of persistence

00:10:26,740 --> 00:10:34,720
to keep the state of whether or not

00:10:29,660 --> 00:10:34,720
account has access to a given stage Rolo

00:10:35,020 --> 00:10:41,240
now one last step for us here is that we

00:10:39,170 --> 00:10:43,400
need to be able to roll back instantly

00:10:41,240 --> 00:10:45,740
and to make that happen

00:10:43,400 --> 00:10:48,830
we'll connect our stage role at resource

00:10:45,740 --> 00:10:51,530
to the admin panel and we'll provide a

00:10:48,830 --> 00:10:54,950
simple UX that allows us to start stop

00:10:51,530 --> 00:11:00,320
or pause the rule level without having

00:10:54,950 --> 00:11:02,960
to change any code at all so coming back

00:11:00,320 --> 00:11:05,210
to our hypothetical goal we said earlier

00:11:02,960 --> 00:11:08,270
really all we need to do to make that

00:11:05,210 --> 00:11:10,730
reality let's change the condition to

00:11:08,270 --> 00:11:14,950
call the rollout service enabled for

00:11:10,730 --> 00:11:17,260
method and there we go

00:11:14,950 --> 00:11:19,900
now when we go ahead and ship that

00:11:17,260 --> 00:11:22,960
change work inevitably gonna hit the

00:11:19,900 --> 00:11:24,940
same bug we did earlier but that bug is

00:11:22,960 --> 00:11:28,210
only gonna affect a subset of accounts

00:11:24,940 --> 00:11:30,910
because we're rolling it out and getting

00:11:28,210 --> 00:11:35,970
back to a stable state is just one click

00:11:30,910 --> 00:11:39,100
away so now we're finally back to normal

00:11:35,970 --> 00:11:42,510
except for all those orders that are now

00:11:39,100 --> 00:11:45,340
missing material to be built from well

00:11:42,510 --> 00:11:48,700
let's let's fix that by jumping into the

00:11:45,340 --> 00:11:51,400
production rails console we'll work our

00:11:48,700 --> 00:11:53,830
magic here find all the orders that are

00:11:51,400 --> 00:11:57,220
missing material and go ahead and

00:11:53,830 --> 00:12:01,060
repurchase that I mean nothing could go

00:11:57,220 --> 00:12:03,940
wrong with that approach except this

00:12:01,060 --> 00:12:05,860
isn't testable and there's no way to

00:12:03,940 --> 00:12:09,520
really undo that once you've pressed

00:12:05,860 --> 00:12:11,500
enter there it goes not really

00:12:09,520 --> 00:12:13,510
reviewable unless someone's either

00:12:11,500 --> 00:12:15,430
screen-sharing or standing over your

00:12:13,510 --> 00:12:19,990
shoulder but that's still not a great

00:12:15,430 --> 00:12:23,310
approach there and most importantly or

00:12:19,990 --> 00:12:26,320
at least equally as important is that to

00:12:23,310 --> 00:12:28,300
run this developers have to have access

00:12:26,320 --> 00:12:30,310
to the production environment meaning

00:12:28,300 --> 00:12:35,140
that they also have access to all

00:12:30,310 --> 00:12:37,990
customer sensitive data so if we can't

00:12:35,140 --> 00:12:43,840
do this safely how can we get a quick

00:12:37,990 --> 00:12:47,740
fix out and do it safely well we know we

00:12:43,840 --> 00:12:49,480
would need to be testable we also know

00:12:47,740 --> 00:12:51,640
that it would be a one-off fix this

00:12:49,480 --> 00:12:56,790
isn't code that would be run many times

00:12:51,640 --> 00:12:58,390
and each fix is kind of unique and

00:12:56,790 --> 00:13:00,760
definitely you would have to be

00:12:58,390 --> 00:13:07,150
hands-off no production access required

00:13:00,760 --> 00:13:09,430
a good starting place might be created a

00:13:07,150 --> 00:13:13,510
new application job to run the fix for

00:13:09,430 --> 00:13:16,330
us we would use the same fix we wanted

00:13:13,510 --> 00:13:18,520
to run in the production console add it

00:13:16,330 --> 00:13:21,730
into an application job and you know

00:13:18,520 --> 00:13:26,380
that's very easily testable no problem

00:13:21,730 --> 00:13:29,470
testing that as far as one off though

00:13:26,380 --> 00:13:30,080
the application job doesn't really give

00:13:29,470 --> 00:13:34,730
us any fun

00:13:30,080 --> 00:13:37,640
shonali for that so why not inherit from

00:13:34,730 --> 00:13:42,830
a new type of job called a maintenance

00:13:37,640 --> 00:13:47,149
job in the maintenance job we'll define

00:13:42,830 --> 00:13:49,610
a version to be re later defined by any

00:13:47,149 --> 00:13:52,000
subclass of the meanest job and this

00:13:49,610 --> 00:13:54,980
version will give us a time stamp to

00:13:52,000 --> 00:13:58,910
provide some sort of one-off running

00:13:54,980 --> 00:14:02,300
capability then we'll create a

00:13:58,910 --> 00:14:06,260
maintenance run record that simply

00:14:02,300 --> 00:14:09,950
stores that version for us and make sure

00:14:06,260 --> 00:14:13,610
it's persisted now back in the

00:14:09,950 --> 00:14:16,610
maintenance job class before before we

00:14:13,610 --> 00:14:19,100
ever in queue any new maintenance jobs

00:14:16,610 --> 00:14:22,399
we make sure to record that maintenance

00:14:19,100 --> 00:14:25,040
run we had a runnable check then that

00:14:22,399 --> 00:14:27,019
basically says if this maintenance run

00:14:25,040 --> 00:14:32,149
has already been recorded for a given

00:14:27,019 --> 00:14:33,769
version it's no longer runnable and so

00:14:32,149 --> 00:14:36,050
now we have that one-off functionality

00:14:33,769 --> 00:14:38,570
we're looking for but we still need to

00:14:36,050 --> 00:14:41,930
make it hands-off so there's two more

00:14:38,570 --> 00:14:44,810
steps to do that the first is we define

00:14:41,930 --> 00:14:47,750
a run pending jobs method for the

00:14:44,810 --> 00:14:50,140
maintenance job it finds all descendants

00:14:47,750 --> 00:14:52,490
of the class that are still run about

00:14:50,140 --> 00:14:57,050
then it keys them up to be performed

00:14:52,490 --> 00:14:59,480
later and to tie it all together as part

00:14:57,050 --> 00:15:02,800
of our deploy script we simply kick off

00:14:59,480 --> 00:15:06,950
that run pending jobs method each time

00:15:02,800 --> 00:15:10,610
that means that as soon as we ship a new

00:15:06,950 --> 00:15:12,949
maintenance job fix we can ensure that

00:15:10,610 --> 00:15:18,380
it will automatically be in queued and

00:15:12,949 --> 00:15:20,230
run for us so coming back to our fix for

00:15:18,380 --> 00:15:22,459
the orders that are missing material

00:15:20,230 --> 00:15:25,550
we've already inherited from the

00:15:22,459 --> 00:15:30,350
maintenance job all we need to do now is

00:15:25,550 --> 00:15:33,430
define a new version and that code will

00:15:30,350 --> 00:15:33,430
be fixed for us

00:15:33,680 --> 00:15:39,200
by taking a safety-first mindset and

00:15:35,870 --> 00:15:42,080
building in safety mechanisms we save

00:15:39,200 --> 00:15:44,149
ourselves a lot of time from having to

00:15:42,080 --> 00:15:47,950
scramble and figure out how to fix them

00:15:44,149 --> 00:15:51,589
later and we also prevent a lot of pain

00:15:47,950 --> 00:15:56,750
from our customers as they wait for us

00:15:51,589 --> 00:16:00,410
to get those fixes of lesson to solid

00:15:56,750 --> 00:16:03,320
foundations after learning how to safely

00:16:00,410 --> 00:16:05,660
conduct ourselves in the workshop it was

00:16:03,320 --> 00:16:08,570
actually time to now move to learn to

00:16:05,660 --> 00:16:12,470
build the table and our starting point

00:16:08,570 --> 00:16:14,330
was with the rough material so what if

00:16:12,470 --> 00:16:16,370
we were to go ahead and actually start

00:16:14,330 --> 00:16:20,600
cutting pieces of the table out of this

00:16:16,370 --> 00:16:22,180
material and slapping them together we'd

00:16:20,600 --> 00:16:25,459
probably end up with something

00:16:22,180 --> 00:16:29,110
resembling this an important step in

00:16:25,459 --> 00:16:32,510
woodworking is the lumber prep process

00:16:29,110 --> 00:16:34,580
this process aims to eliminate the

00:16:32,510 --> 00:16:37,399
different types of deformations that

00:16:34,580 --> 00:16:41,089
naturally occur in wood things like bows

00:16:37,399 --> 00:16:43,459
or twists in the lumber itself we need

00:16:41,089 --> 00:16:45,800
to remove those defects so that we have

00:16:43,459 --> 00:16:50,540
a solid state to build from and each

00:16:45,800 --> 00:16:52,900
subsequent step and to help us do that

00:16:50,540 --> 00:16:56,060
there's really two machines that are

00:16:52,900 --> 00:17:00,890
really useful in getting us there the

00:16:56,060 --> 00:17:05,059
first is a jointer a jointer it has a

00:17:00,890 --> 00:17:08,329
long flatbed and in the middle there's a

00:17:05,059 --> 00:17:10,490
rotating cutter head so each time the

00:17:08,329 --> 00:17:12,800
material or the lumber is passed over it

00:17:10,490 --> 00:17:16,910
it removes a very small amount of

00:17:12,800 --> 00:17:19,010
material so if a board has a few high

00:17:16,910 --> 00:17:22,370
points that need to be removed to get to

00:17:19,010 --> 00:17:25,429
that flat state it slowly removes those

00:17:22,370 --> 00:17:29,240
high points until the lumber is exactly

00:17:25,429 --> 00:17:31,640
and perfectly flat with the jointer we

00:17:29,240 --> 00:17:36,230
aim to get one face of the material flat

00:17:31,640 --> 00:17:39,080
and one edge straight from there we move

00:17:36,230 --> 00:17:41,000
to the thickness planer now the

00:17:39,080 --> 00:17:43,340
thickness planer basically works as an

00:17:41,000 --> 00:17:45,169
inverse to what the jointer did it

00:17:43,340 --> 00:17:46,350
removes a small amount of Tyrael from

00:17:45,169 --> 00:17:49,500
the top

00:17:46,350 --> 00:17:51,389
of the lumber itself now that we've

00:17:49,500 --> 00:17:54,029
already have a flat bottom for the

00:17:51,389 --> 00:18:00,169
material it will make sure that that top

00:17:54,029 --> 00:18:03,299
is parallel to and as we run it through

00:18:00,169 --> 00:18:06,029
we also get the added benefit of getting

00:18:03,299 --> 00:18:09,750
the exact thickness for that lumber that

00:18:06,029 --> 00:18:12,419
we're looking for so as I started with

00:18:09,750 --> 00:18:13,470
this rough material after I had taken

00:18:12,419 --> 00:18:17,509
time to prep it

00:18:13,470 --> 00:18:21,299
I got a nice solid flat and straight

00:18:17,509 --> 00:18:25,049
foundation to go ahead and start to cut

00:18:21,299 --> 00:18:27,379
out the table legs now there's no way I

00:18:25,049 --> 00:18:30,210
could have gone in for straight and

00:18:27,379 --> 00:18:33,620
consistent table legs without having to

00:18:30,210 --> 00:18:33,620
go through that lumber prep process

00:18:34,039 --> 00:18:40,320
often times when writing code we also

00:18:36,779 --> 00:18:42,750
start in a rough state it's rare that we

00:18:40,320 --> 00:18:46,860
get a chance to start from a new clean

00:18:42,750 --> 00:18:49,259
spot so why not take time to prep that

00:18:46,860 --> 00:18:52,950
code before we add any additional

00:18:49,259 --> 00:18:54,600
changes to it coming back to the

00:18:52,950 --> 00:18:56,820
material purchaser that we looked at

00:18:54,600 --> 00:18:59,909
earlier we know that even though we

00:18:56,820 --> 00:19:03,330
wrapped that change in a rollout we were

00:18:59,909 --> 00:19:06,049
still hitting a bug so let's open up

00:19:03,330 --> 00:19:08,279
that method and take a bit of a more

00:19:06,049 --> 00:19:11,789
detailed look to see where that could

00:19:08,279 --> 00:19:13,590
come from and as we do that we see maybe

00:19:11,789 --> 00:19:17,450
that method was in a pretty rough state

00:19:13,590 --> 00:19:21,179
to start with and digging in a bit more

00:19:17,450 --> 00:19:22,129
we see the bug and this came from human

00:19:21,179 --> 00:19:25,200
error

00:19:22,129 --> 00:19:29,250
with the best lumber supplier we made a

00:19:25,200 --> 00:19:32,909
mistake and we use the wrong index to

00:19:29,250 --> 00:19:36,990
access the type value from the material

00:19:32,909 --> 00:19:39,629
array now ideally what we would have

00:19:36,990 --> 00:19:42,509
done in the first place is take time to

00:19:39,629 --> 00:19:45,330
prep the material purchaser class before

00:19:42,509 --> 00:19:50,909
we even added this rollout and this new

00:19:45,330 --> 00:19:54,629
lumber provider so let's rewind and get

00:19:50,909 --> 00:19:57,809
back there now back at the state where

00:19:54,629 --> 00:19:58,880
we haven't added any role of yet we know

00:19:57,809 --> 00:20:02,000
that

00:19:58,880 --> 00:20:04,340
the first pass of our code prep we want

00:20:02,000 --> 00:20:08,140
to go ahead and address the most glaring

00:20:04,340 --> 00:20:11,000
issue and that's this material array and

00:20:08,140 --> 00:20:14,050
understanding the index structure around

00:20:11,000 --> 00:20:17,030
it to start to clean that up

00:20:14,050 --> 00:20:19,640
we'll introduce a new class for the

00:20:17,030 --> 00:20:21,770
material itself this will hold on to the

00:20:19,640 --> 00:20:25,150
details about the thickness width length

00:20:21,770 --> 00:20:27,440
and type of the material being purchased

00:20:25,150 --> 00:20:30,740
then in the purchase material form

00:20:27,440 --> 00:20:34,330
method we'll map all of the incoming

00:20:30,740 --> 00:20:36,770
materials to a new material instance

00:20:34,330 --> 00:20:39,290
that allows us to then update the

00:20:36,770 --> 00:20:41,660
parameters to use the kind of semantic

00:20:39,290 --> 00:20:46,120
value from that material instance

00:20:41,660 --> 00:20:49,250
instead of a line on the index structure

00:20:46,120 --> 00:20:51,320
next using some of activesupport

00:20:49,250 --> 00:20:53,990
magic we can actually just call it to

00:20:51,320 --> 00:20:56,330
JSON on the material instance itself

00:20:53,990 --> 00:21:02,240
saving us from having to explicitly

00:20:56,330 --> 00:21:05,210
define each parameter then we'll move

00:21:02,240 --> 00:21:07,630
the supplier URI out of the loop because

00:21:05,210 --> 00:21:11,720
it really only needs to be defined once

00:21:07,630 --> 00:21:14,510
and at that point our codes already in a

00:21:11,720 --> 00:21:18,350
much more stable state with a flat

00:21:14,510 --> 00:21:22,100
surface so when we come in to add Aria

00:21:18,350 --> 00:21:26,060
or rollout really all we need to do is

00:21:22,100 --> 00:21:30,560
wrap the URI itself and the rest remains

00:21:26,060 --> 00:21:32,960
consistent taking the time to make sure

00:21:30,560 --> 00:21:36,950
that the code were working with has a

00:21:32,960 --> 00:21:39,770
solid foundation as many benefits it

00:21:36,950 --> 00:21:41,450
gives us the standing of what the code

00:21:39,770 --> 00:21:44,350
was doing in the first place and it

00:21:41,450 --> 00:21:51,050
gives us a clear and consistent

00:21:44,350 --> 00:21:55,730
structure to build from less than three

00:21:51,050 --> 00:21:59,030
quality control now after cutting out

00:21:55,730 --> 00:22:01,760
the table legs on our previous step we

00:21:59,030 --> 00:22:05,620
knew that the shaker design required

00:22:01,760 --> 00:22:08,300
that these legs have tapers cut in them

00:22:05,620 --> 00:22:11,390
so there's a number of ways we could do

00:22:08,300 --> 00:22:12,230
that one being that you would trace out

00:22:11,390 --> 00:22:16,730
the taper and

00:22:12,230 --> 00:22:19,760
pencil on each leg then move to the

00:22:16,730 --> 00:22:23,059
bandsaw and do our best free hand cut to

00:22:19,760 --> 00:22:25,309
get us kind of a rough cut of the actual

00:22:23,059 --> 00:22:27,799
taper itself but we would want to stay

00:22:25,309 --> 00:22:29,690
on the outside because we would want to

00:22:27,799 --> 00:22:34,690
get to that final dimension using the

00:22:29,690 --> 00:22:37,279
sander now this isn't a bad approach but

00:22:34,690 --> 00:22:41,240
it would only really be useful for

00:22:37,279 --> 00:22:43,220
making maybe one or two cuts but each

00:22:41,240 --> 00:22:45,350
table we were working with needed eight

00:22:43,220 --> 00:22:47,960
tapers cut and there were twenty

00:22:45,350 --> 00:22:50,000
students in the class so if we were to

00:22:47,960 --> 00:22:51,590
use that it would have we would be in

00:22:50,000 --> 00:22:54,740
the core we would be in the class for a

00:22:51,590 --> 00:22:57,380
long time and the variance between the

00:22:54,740 --> 00:23:02,659
quality of each taper would be all over

00:22:57,380 --> 00:23:04,789
the place alternatively we could spend

00:23:02,659 --> 00:23:09,529
some time up front and create a table so

00:23:04,789 --> 00:23:12,649
I dig this jig would hold each table leg

00:23:09,529 --> 00:23:15,649
at a consistent angle corresponding to

00:23:12,649 --> 00:23:17,570
the tape worker cutting on one pass of

00:23:15,649 --> 00:23:20,600
the saw he would cut the exact taper

00:23:17,570 --> 00:23:23,539
we're looking for and it would cut that

00:23:20,600 --> 00:23:27,320
exact taper consistently for each table

00:23:23,539 --> 00:23:31,130
leg resulting in a quality that

00:23:27,320 --> 00:23:34,909
resulting in quality and also resulting

00:23:31,130 --> 00:23:39,380
in a reduction of overhead of trying to

00:23:34,909 --> 00:23:41,630
maintain that quality now just like the

00:23:39,380 --> 00:23:44,929
tapers that we're cutting with the on

00:23:41,630 --> 00:23:46,880
the table legs themselves the projects

00:23:44,929 --> 00:23:49,070
and teams we work with there's usually

00:23:46,880 --> 00:23:51,529
patterns that we want to be able to

00:23:49,070 --> 00:23:54,409
reproduce but we want to be able to make

00:23:51,529 --> 00:23:59,210
sure that that quality is always

00:23:54,409 --> 00:24:01,820
consistent coming back to the meatus job

00:23:59,210 --> 00:24:06,049
we created earlier this is a great

00:24:01,820 --> 00:24:07,700
structure for us to be able to use but

00:24:06,049 --> 00:24:11,059
we haven't taken any steps to actually

00:24:07,700 --> 00:24:13,730
make it reusable if we wanted a new

00:24:11,059 --> 00:24:17,960
maintenance job we might have to look at

00:24:13,730 --> 00:24:20,870
a previous example then go ahead and do

00:24:17,960 --> 00:24:23,269
some coffee pasta see if it works for

00:24:20,870 --> 00:24:24,410
our next quick fix and we might not

00:24:23,269 --> 00:24:27,380
realize that that verge

00:24:24,410 --> 00:24:29,720
numbers has a lot of meaning and if we

00:24:27,380 --> 00:24:34,490
went out and shipped that it would never

00:24:29,720 --> 00:24:37,430
be run for us so luckily rails comes to

00:24:34,490 --> 00:24:41,240
the rescue here out of the box we get

00:24:37,430 --> 00:24:42,920
the rails generator generator and with

00:24:41,240 --> 00:24:46,520
that we can build a maintenance job

00:24:42,920 --> 00:24:49,340
generator what that gives us is the

00:24:46,520 --> 00:24:52,580
boiler plate to create a new generator

00:24:49,340 --> 00:24:54,920
for every new maintenance job and to

00:24:52,580 --> 00:24:57,500
make that actually into flesh it out we

00:24:54,920 --> 00:24:58,910
really don't need that many steps we'll

00:24:57,500 --> 00:25:02,690
create a template for the maintenance

00:24:58,910 --> 00:25:04,040
job itself and we'll take the overhead

00:25:02,690 --> 00:25:05,870
will reduce the overhead of

00:25:04,040 --> 00:25:08,300
understanding that version number and

00:25:05,870 --> 00:25:10,700
specifying anyone away from the

00:25:08,300 --> 00:25:13,240
developer and we'll define it for them

00:25:10,700 --> 00:25:15,710
I'll simply grab the current timestamp

00:25:13,240 --> 00:25:19,640
give it a specific format and we're

00:25:15,710 --> 00:25:22,880
looking for that we'll make sure that we

00:25:19,640 --> 00:25:26,900
also add a template to create a test for

00:25:22,880 --> 00:25:28,880
the mainus job we hope that everyone is

00:25:26,900 --> 00:25:31,370
testing every new fix they're sending

00:25:28,880 --> 00:25:33,860
out but maybe they won't so well I'm

00:25:31,370 --> 00:25:35,990
sure that that test is there and does

00:25:33,860 --> 00:25:38,240
ensure that it's really tested will make

00:25:35,990 --> 00:25:42,380
it fail by default so they have to come

00:25:38,240 --> 00:25:44,390
back in addresses then the maintenance

00:25:42,380 --> 00:25:47,570
job generator really only needs to do

00:25:44,390 --> 00:25:50,930
two things given a new maintenance job

00:25:47,570 --> 00:25:53,540
name it simply creates the maintenance

00:25:50,930 --> 00:25:55,280
job file using the template and the

00:25:53,540 --> 00:25:59,770
maintenance job tests using the other

00:25:55,280 --> 00:26:03,190
template so firing that up to fix things

00:25:59,770 --> 00:26:06,530
we get exactly what we were looking for

00:26:03,190 --> 00:26:08,540
consistent quality where the version is

00:26:06,530 --> 00:26:12,680
defined for us we know that that's a

00:26:08,540 --> 00:26:15,290
valid version that will be run and we

00:26:12,680 --> 00:26:22,100
ensure that every fix is going to be

00:26:15,290 --> 00:26:25,610
tested ensuring quality is a important

00:26:22,100 --> 00:26:27,110
step in any project that we work on but

00:26:25,610 --> 00:26:30,860
making sure that we can reduce the

00:26:27,110 --> 00:26:33,470
overhead of actually making that quality

00:26:30,860 --> 00:26:35,810
happen is also an important step and it

00:26:33,470 --> 00:26:40,940
frees us up to focus on the new

00:26:35,810 --> 00:26:42,890
and exciting challenges ahead now while

00:26:40,940 --> 00:26:45,740
this wraps up the three lessons that

00:26:42,890 --> 00:26:49,940
I'll talk about today the journey to

00:26:45,740 --> 00:26:52,790
build that table didn't stop here after

00:26:49,940 --> 00:26:54,230
cutting up the table legs and making

00:26:52,790 --> 00:26:56,540
sure those type of tapers were

00:26:54,230 --> 00:26:59,720
consistent the rest of the pieces

00:26:56,540 --> 00:27:02,180
started to come together and after some

00:26:59,720 --> 00:27:06,980
time the tables started to take shape

00:27:02,180 --> 00:27:10,610
and eventually we had our table come to

00:27:06,980 --> 00:27:13,250
fruition now there's no way I would have

00:27:10,610 --> 00:27:15,890
gotten to this final state without

00:27:13,250 --> 00:27:18,740
having taken a safety first mindset the

00:27:15,890 --> 00:27:21,110
entire time making sure that I had a

00:27:18,740 --> 00:27:24,320
solid foundation with every piece that I

00:27:21,110 --> 00:27:27,080
was working with and having mechanisms

00:27:24,320 --> 00:27:31,040
in place to ensure that the quality was

00:27:27,080 --> 00:27:33,620
kept consistent as well as my own

00:27:31,040 --> 00:27:36,590
woodworking journey continues beyond

00:27:33,620 --> 00:27:40,670
this table I'm not going to be surprised

00:27:36,590 --> 00:27:46,150
at its ability to influence the way I

00:27:40,670 --> 00:27:46,150
write code thanks for your time

00:27:51,929 --> 00:27:53,990

YouTube URL: https://www.youtube.com/watch?v=7zW_BBiTLAY


