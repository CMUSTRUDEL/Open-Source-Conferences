Title: RailsConf 2020 CE - Tidy First? by Kent Beck
Publication date: 2020-04-24
Playlist: RailsConf 2020 CE
Description: 
	Tidy First? by Kent Beck

"Software design is an exercise in human relationships. 

You have to change some ugly code. Should you tidy it first before you change it? Reflected in this simple, daily-repeated question are all the elements of software design: coupling/cohesion, economics, psychology, and sociology."

__________

In 45 years of programming, Kent hasn't been satisfied for more than a day at a time. Not with the tools, the techniques, the outcomes, and most of all not with his own understanding. These days he works at Gusto, the small business payroll and benefits provider.
Captions: 
	00:00:08,830 --> 00:00:16,360
get back from gusto here talking today

00:00:12,910 --> 00:00:19,300
about a study that I've begun into

00:00:16,360 --> 00:00:21,009
software design I figured I've been

00:00:19,300 --> 00:00:22,960
doing it for 40 years it was time I

00:00:21,009 --> 00:00:26,109
understood a little bit about what was

00:00:22,960 --> 00:00:29,260
going on and as always happens at the

00:00:26,109 --> 00:00:31,180
beginning of a study I realize that

00:00:29,260 --> 00:00:33,370
there's a lot that I know in my gut that

00:00:31,180 --> 00:00:35,500
I can't articulate so I started writing

00:00:33,370 --> 00:00:38,100
things down and the first thing that

00:00:35,500 --> 00:00:42,100
came out of my pen was a shock to me I

00:00:38,100 --> 00:00:45,549
wrote software design is an exercise in

00:00:42,100 --> 00:00:48,610
human relationships and I thought no no

00:00:45,549 --> 00:00:51,220
no no I'm gonna write about coupling and

00:00:48,610 --> 00:00:53,949
cohesion and power law distributions and

00:00:51,220 --> 00:00:56,080
things like that not not about human

00:00:53,949 --> 00:00:58,089
relationships but the more I thought

00:00:56,080 --> 00:01:00,309
about it the more I realized yeah the

00:00:58,089 --> 00:01:03,909
essence of software design the things

00:01:00,309 --> 00:01:06,970
that make it really hard are human

00:01:03,909 --> 00:01:08,710
factors not necessarily the technical

00:01:06,970 --> 00:01:11,950
things that I'm much more comfortable

00:01:08,710 --> 00:01:16,150
dealing with so in today's presentation

00:01:11,950 --> 00:01:18,040
I'll tell you about the two most

00:01:16,150 --> 00:01:21,400
important human relationships in

00:01:18,040 --> 00:01:24,070
software design and then I'll give you

00:01:21,400 --> 00:01:29,140
an experiment that you can run to help

00:01:24,070 --> 00:01:32,380
you improve the relationships that that

00:01:29,140 --> 00:01:35,740
you have in your teams around software

00:01:32,380 --> 00:01:39,580
design so I'm gonna divide the world

00:01:35,740 --> 00:01:42,490
into two kinds of people the first kind

00:01:39,580 --> 00:01:44,980
of people use some software they might

00:01:42,490 --> 00:01:47,350
want to see its behavior change but they

00:01:44,980 --> 00:01:48,670
can't actually enact those changes

00:01:47,350 --> 00:01:52,840
themselves and I'll call those people

00:01:48,670 --> 00:01:55,270
waiters contrast that to people who can

00:01:52,840 --> 00:01:58,120
make the changes to the behavior and

00:01:55,270 --> 00:02:00,280
I'll call them changers and it's this

00:01:58,120 --> 00:02:02,320
relationship between waiters and

00:02:00,280 --> 00:02:04,750
changers that's the first of those two

00:02:02,320 --> 00:02:08,940
relationships I was talking about that

00:02:04,750 --> 00:02:12,940
make software design such a challenge

00:02:08,940 --> 00:02:15,280
the the problem is not in the long run

00:02:12,940 --> 00:02:19,030
in the long run everybody wants to see

00:02:15,280 --> 00:02:21,250
the system change and evolve and they'd

00:02:19,030 --> 00:02:21,950
like it to happen as quickly as possible

00:02:21,250 --> 00:02:26,810
but no

00:02:21,950 --> 00:02:29,720
quickly in the short run though the the

00:02:26,810 --> 00:02:32,330
incentives of waiters and changers can

00:02:29,720 --> 00:02:34,459
diverge significantly and that's because

00:02:32,330 --> 00:02:39,890
the pictures that they have of software

00:02:34,459 --> 00:02:43,519
development are so different so here at

00:02:39,890 --> 00:02:46,489
some level software development is a

00:02:43,519 --> 00:02:49,519
sequence of ideas that turn into

00:02:46,489 --> 00:02:52,730
behavior changes in the software that

00:02:49,519 --> 00:02:54,920
sparked more ideas the more behavior

00:02:52,730 --> 00:02:58,370
changes and this is the cycle that goes

00:02:54,920 --> 00:03:02,030
on and on and both parties see this

00:02:58,370 --> 00:03:05,299
cycle in the same way they see this flow

00:03:02,030 --> 00:03:08,569
of behavior changes as the software

00:03:05,299 --> 00:03:10,880
evolves beneath the surface though

00:03:08,569 --> 00:03:14,000
there's another set of changes going on

00:03:10,880 --> 00:03:17,299
the changers know that the structure of

00:03:14,000 --> 00:03:22,069
the system dramatically affects the cost

00:03:17,299 --> 00:03:24,709
of making behavior changes and so some

00:03:22,069 --> 00:03:28,819
of the investment in development goes

00:03:24,709 --> 00:03:31,250
into changes to the structure but those

00:03:28,819 --> 00:03:33,530
changes to the structure aren't visible

00:03:31,250 --> 00:03:36,940
to the waiters and here's where we have

00:03:33,530 --> 00:03:41,260
the the conflict in the relationship

00:03:36,940 --> 00:03:47,239
there's a couple of classic dysfunctions

00:03:41,260 --> 00:03:51,319
one is where the changes the behavior

00:03:47,239 --> 00:03:53,150
take all the precedents and so the

00:03:51,319 --> 00:03:55,250
structure gets worse and worse and then

00:03:53,150 --> 00:03:58,700
eventually it becomes impossible to make

00:03:55,250 --> 00:04:01,489
changes to the behavior and then like

00:03:58,700 --> 00:04:03,350
whose fault is that and you used to be

00:04:01,489 --> 00:04:05,680
able to make these kind of changes in an

00:04:03,350 --> 00:04:11,150
instant and now it takes you weeks and

00:04:05,680 --> 00:04:13,340
that doesn't work out well but too much

00:04:11,150 --> 00:04:15,230
investment in structure or too much

00:04:13,340 --> 00:04:18,950
investment especially at the wrong time

00:04:15,230 --> 00:04:21,169
is also damaging to the relationship so

00:04:18,950 --> 00:04:23,539
if we go and make the perfect structure

00:04:21,169 --> 00:04:25,840
this is the classic second sense system

00:04:23,539 --> 00:04:27,710
syndrome we're gonna make all these

00:04:25,840 --> 00:04:29,870
investments in the structure of the

00:04:27,710 --> 00:04:32,900
system so we get it right this time

00:04:29,870 --> 00:04:35,330
the behavior of the system doesn't

00:04:32,900 --> 00:04:39,229
change the waiters

00:04:35,330 --> 00:04:41,629
are getting impatient and there's no end

00:04:39,229 --> 00:04:44,389
to the amount of investment you can make

00:04:41,629 --> 00:04:46,759
in the structure especially if you've

00:04:44,389 --> 00:04:49,159
just been through that first dysfunction

00:04:46,759 --> 00:04:51,860
where you know that if you don't get it

00:04:49,159 --> 00:04:55,669
right now you'll never get it right and

00:04:51,860 --> 00:05:01,030
so we have this divergence of incentives

00:04:55,669 --> 00:05:03,229
between waiters and changers and

00:05:01,030 --> 00:05:05,900
maintaining that relationship is

00:05:03,229 --> 00:05:07,909
critical to software development and

00:05:05,900 --> 00:05:10,759
software design can play a part in that

00:05:07,909 --> 00:05:13,310
we have to find some way to balance the

00:05:10,759 --> 00:05:15,949
needs of the two parties to balance the

00:05:13,310 --> 00:05:19,159
investment in structure and in behavior

00:05:15,949 --> 00:05:21,860
to sequence that so that everybody gets

00:05:19,159 --> 00:05:27,319
as much of their needs met as possible

00:05:21,860 --> 00:05:30,229
for as long as possible the second set

00:05:27,319 --> 00:05:33,110
of relationships are relationships that

00:05:30,229 --> 00:05:37,330
changers have two other changers say I

00:05:33,110 --> 00:05:40,219
want to change some API that you call

00:05:37,330 --> 00:05:43,009
inside the system we're both changers

00:05:40,219 --> 00:05:46,039
but the work that I do affects the work

00:05:43,009 --> 00:05:48,800
that you do my relationship with you is

00:05:46,039 --> 00:05:51,379
really important if I go and make

00:05:48,800 --> 00:05:54,409
breaking changes to the API and I say oh

00:05:51,379 --> 00:05:57,620
it's your problem to go in and update to

00:05:54,409 --> 00:05:59,270
the new version then you're not gonna be

00:05:57,620 --> 00:06:01,699
really happy with me cuz you've got

00:05:59,270 --> 00:06:04,389
behavior changes to go and implement and

00:06:01,699 --> 00:06:07,810
you don't have time for my shenanigans

00:06:04,389 --> 00:06:12,349
so maintaining those relationships

00:06:07,810 --> 00:06:16,339
changer to changer is also important and

00:06:12,349 --> 00:06:18,949
difficult and challenging so there we

00:06:16,339 --> 00:06:21,370
have it this is two of the fundamental

00:06:18,949 --> 00:06:24,710
relationships that make software design

00:06:21,370 --> 00:06:28,069
difficult between waiters and changers

00:06:24,710 --> 00:06:30,889
and between changers and changers so

00:06:28,069 --> 00:06:34,520
what can we do about it let me set up

00:06:30,889 --> 00:06:41,060
the experiment for you there are I've

00:06:34,520 --> 00:06:42,589
observed four stages to software design

00:06:41,060 --> 00:06:44,959
enlightenment I'll call it although

00:06:42,589 --> 00:06:48,050
maybe enlightenment stew strong word you

00:06:44,959 --> 00:06:48,830
tell me when we're done in the beginning

00:06:48,050 --> 00:06:51,020
when you're just

00:06:48,830 --> 00:06:55,460
starting to program and you can get

00:06:51,020 --> 00:06:58,640
programs working all you do is you make

00:06:55,460 --> 00:07:01,850
a bunch of changes to the system you

00:06:58,640 --> 00:07:03,650
don't really even have a sense of you're

00:07:01,850 --> 00:07:05,270
just making changes you're in the middle

00:07:03,650 --> 00:07:06,980
of some if statement you decide a

00:07:05,270 --> 00:07:08,780
variable as the wrong name and you

00:07:06,980 --> 00:07:11,390
change the variable name and then you

00:07:08,780 --> 00:07:13,040
finish the if statement and so it's just

00:07:11,390 --> 00:07:17,750
a bunch of changes and when there's a

00:07:13,040 --> 00:07:21,080
glop of those changes you you take that

00:07:17,750 --> 00:07:23,750
out that's level one then somebody gives

00:07:21,080 --> 00:07:26,210
you a copy of martin fowler's

00:07:23,750 --> 00:07:29,300
refactoring book and you realize there's

00:07:26,210 --> 00:07:32,180
two flavors to these changes there are

00:07:29,300 --> 00:07:35,140
the structural changes the refactorings

00:07:32,180 --> 00:07:38,120
and the behavioral changes and they are

00:07:35,140 --> 00:07:39,680
fundamentally different and in fact you

00:07:38,120 --> 00:07:42,050
shouldn't mix them you should wear one

00:07:39,680 --> 00:07:44,150
hat at a time I'm changing the structure

00:07:42,050 --> 00:07:46,640
now I'm changing the behavior now I'm

00:07:44,150 --> 00:07:48,230
changing the structure so you're if

00:07:46,640 --> 00:07:50,630
you're in the middle of changing an

00:07:48,230 --> 00:07:53,420
if-statement you wouldn't then suddenly

00:07:50,630 --> 00:07:55,940
start changing the names of variables

00:07:53,420 --> 00:07:58,520
you wait until you're finished with the

00:07:55,940 --> 00:08:00,890
if statement then start changing

00:07:58,520 --> 00:08:03,380
variable names and then go and add

00:08:00,890 --> 00:08:05,270
another case and back and forth and back

00:08:03,380 --> 00:08:07,730
and forth so that's level two when you

00:08:05,270 --> 00:08:10,180
just become aware of the difference

00:08:07,730 --> 00:08:14,000
between structure and behavior changes

00:08:10,180 --> 00:08:18,440
level three is where you start playing

00:08:14,000 --> 00:08:21,350
chess where you think ah I'm going to

00:08:18,440 --> 00:08:24,970
make this structure change so that this

00:08:21,350 --> 00:08:28,010
behavior change is easier to implement

00:08:24,970 --> 00:08:29,960
or you say well I'm going to change the

00:08:28,010 --> 00:08:31,700
behavior which is gonna make the

00:08:29,960 --> 00:08:33,320
structure a little bit uglier so then

00:08:31,700 --> 00:08:37,190
I'm gonna have to make some structure

00:08:33,320 --> 00:08:40,250
changes when I'm finished and now you're

00:08:37,190 --> 00:08:43,100
thinking a few moves ahead in time

00:08:40,250 --> 00:08:47,150
you're sequencing what you're doing and

00:08:43,100 --> 00:08:50,750
this is where you get into the phrase

00:08:47,150 --> 00:08:51,470
that I coined for it is make easy make

00:08:50,750 --> 00:08:55,990
the change

00:08:51,470 --> 00:09:00,410
easy poof then make the easy change

00:08:55,990 --> 00:09:03,010
where you're not just the changes you

00:09:00,410 --> 00:09:05,150
make are not just differential

00:09:03,010 --> 00:09:06,710
differentiated because there's behavior

00:09:05,150 --> 00:09:10,160
and structure changes but you're

00:09:06,710 --> 00:09:12,980
deliberately deciding what order to do

00:09:10,160 --> 00:09:18,410
them in to make your work as a developer

00:09:12,980 --> 00:09:20,180
easier and if you haven't started doing

00:09:18,410 --> 00:09:20,930
that I recommend that you give that a

00:09:20,180 --> 00:09:24,080
try

00:09:20,930 --> 00:09:25,880
you know sometimes software development

00:09:24,080 --> 00:09:29,300
feels like it's just really really hard

00:09:25,880 --> 00:09:33,320
and the the more experience I get the

00:09:29,300 --> 00:09:35,060
more I realize you know it if it's hard

00:09:33,320 --> 00:09:38,210
that's a sign that I'm doing something

00:09:35,060 --> 00:09:41,540
wrong sometimes I mean sometimes it's

00:09:38,210 --> 00:09:46,190
just genuinely hard but sometimes I need

00:09:41,540 --> 00:09:49,780
to make my work easy and feel good about

00:09:46,190 --> 00:09:54,110
the easy work that results

00:09:49,780 --> 00:09:57,410
so the experiment though that I'm gonna

00:09:54,110 --> 00:10:00,050
suggest to you is that once you learn to

00:09:57,410 --> 00:10:04,100
sequence behavior and structure changes

00:10:00,050 --> 00:10:08,350
you start dividing up the changes that

00:10:04,100 --> 00:10:11,780
you make into little tiny pull requests

00:10:08,350 --> 00:10:14,180
that is I make a little change to the

00:10:11,780 --> 00:10:17,540
behavior and then that goes to

00:10:14,180 --> 00:10:19,490
production and then I make a few changes

00:10:17,540 --> 00:10:22,070
to the structure and then those go to

00:10:19,490 --> 00:10:25,490
production before I make the next change

00:10:22,070 --> 00:10:28,970
and some more structure and some more

00:10:25,490 --> 00:10:31,610
behavior that every one of these little

00:10:28,970 --> 00:10:37,330
bits of code leaves you with the system

00:10:31,610 --> 00:10:42,440
that's running and valid and works and

00:10:37,330 --> 00:10:44,900
any given PR only contains structure

00:10:42,440 --> 00:10:48,460
changes or behavior changes but you

00:10:44,900 --> 00:10:51,740
never mix the two and that's because

00:10:48,460 --> 00:10:53,630
structure changes are reversible if I

00:10:51,740 --> 00:10:55,610
extract a helper method and then we

00:10:53,630 --> 00:10:57,730
decide now we don't want to do that you

00:10:55,610 --> 00:10:59,780
just inline it in a way you go

00:10:57,730 --> 00:11:01,610
hopefully you have tools that help you

00:10:59,780 --> 00:11:03,820
with that but even if you don't you can

00:11:01,610 --> 00:11:06,700
do it manually and it's not terrible

00:11:03,820 --> 00:11:11,930
behavior changes tend to be irreversible

00:11:06,700 --> 00:11:13,820
so if as a gussto we we've accidentally

00:11:11,930 --> 00:11:16,490
file a bunch of

00:11:13,820 --> 00:11:20,330
wrong tax reports that's not something

00:11:16,490 --> 00:11:23,600
that you can just get revert made it's

00:11:20,330 --> 00:11:28,280
there's permanent consequences out there

00:11:23,600 --> 00:11:31,370
so as a reviewer looking at behavior

00:11:28,280 --> 00:11:33,650
changes you need to know well what are

00:11:31,370 --> 00:11:36,940
the test cases and what's the back-up

00:11:33,650 --> 00:11:39,230
plan and so on but structure changes

00:11:36,940 --> 00:11:41,840
assuming they're going in a reasonable

00:11:39,230 --> 00:11:45,380
direction don't require the same level

00:11:41,840 --> 00:11:48,290
of scrutiny so there's the experiment to

00:11:45,380 --> 00:11:50,960
try to divide your p ARS up into much

00:11:48,290 --> 00:11:53,570
smaller p RS which either change the

00:11:50,960 --> 00:11:55,520
behavior of the system or the structure

00:11:53,570 --> 00:11:57,290
of the system now sometimes that means

00:11:55,520 --> 00:12:01,820
that you're going to change the behavior

00:11:57,290 --> 00:12:05,120
in a different order than you would that

00:12:01,820 --> 00:12:08,210
is you might like the Keystone in an

00:12:05,120 --> 00:12:11,870
arch you might make the changes to the

00:12:08,210 --> 00:12:15,110
user interface at the very end of a

00:12:11,870 --> 00:12:16,850
project as opposed to maybe you if

00:12:15,110 --> 00:12:19,580
you're just developing and you're gonna

00:12:16,850 --> 00:12:21,500
have a one big PR you change the user

00:12:19,580 --> 00:12:27,500
interface whenever you felt like it in

00:12:21,500 --> 00:12:30,590
this style with these smaller divs you

00:12:27,500 --> 00:12:33,560
would make that change to the user

00:12:30,590 --> 00:12:36,080
visible changes to the behavior at the

00:12:33,560 --> 00:12:38,600
very end of this long sequence but there

00:12:36,080 --> 00:12:41,230
might be tens or hundreds of PRS leading

00:12:38,600 --> 00:12:45,380
up to it that make that final change

00:12:41,230 --> 00:12:48,050
really small and simple and the change

00:12:45,380 --> 00:12:51,140
of the system as a whole isn't large

00:12:48,050 --> 00:12:53,540
when you do that so how does that relate

00:12:51,140 --> 00:13:00,020
to these relationships that we're

00:12:53,540 --> 00:13:04,790
talking about a big cost in the

00:13:00,020 --> 00:13:07,220
relationship is a variance of delay so I

00:13:04,790 --> 00:13:08,900
gave you that example of you used to be

00:13:07,220 --> 00:13:14,210
able to do this in a day and now it

00:13:08,900 --> 00:13:16,670
takes you a month the this style where

00:13:14,210 --> 00:13:19,370
you have a sequence of behavior and

00:13:16,670 --> 00:13:22,580
structure changes gives you many many

00:13:19,370 --> 00:13:27,440
more options as a changer to move

00:13:22,580 --> 00:13:31,790
behavior earlier in the sequence

00:13:27,440 --> 00:13:34,490
or if you if you need it to deliver

00:13:31,790 --> 00:13:36,200
valve visible value to a waiter or you

00:13:34,490 --> 00:13:38,150
can move it later in the sequence if

00:13:36,200 --> 00:13:40,430
there's no urgency and some structure

00:13:38,150 --> 00:13:44,270
changes would be would be valuable

00:13:40,430 --> 00:13:46,670
long-term for the system by dividing

00:13:44,270 --> 00:13:49,100
your pr's up into the sequence of either

00:13:46,670 --> 00:13:51,920
behavior or structure changes you have

00:13:49,100 --> 00:13:56,510
many many more options to make sure that

00:13:51,920 --> 00:13:59,470
the waiters are always getting a steady

00:13:56,510 --> 00:14:04,760
flow of what it is that they want as a

00:13:59,470 --> 00:14:07,640
changer you you can then be a better

00:14:04,760 --> 00:14:09,500
partner to them and the same is true for

00:14:07,640 --> 00:14:14,900
the changer to change your relationships

00:14:09,500 --> 00:14:16,340
if I'm gonna change an API i if i'm care

00:14:14,900 --> 00:14:21,260
about our relationship

00:14:16,340 --> 00:14:23,990
I might start the new API implemented in

00:14:21,260 --> 00:14:28,070
terms of the old API and then go and

00:14:23,990 --> 00:14:30,140
help you to call this new API when all

00:14:28,070 --> 00:14:33,350
the migrations have happened then I can

00:14:30,140 --> 00:14:35,690
remove the old one that's a and then I

00:14:33,350 --> 00:14:38,630
can change the behavior to whatever I

00:14:35,690 --> 00:14:41,390
wanted to do so I've taken what would

00:14:38,630 --> 00:14:44,470
have been one atomic change and I've

00:14:41,390 --> 00:14:47,840
broken up into parts and I've done that

00:14:44,470 --> 00:14:51,980
not for technical reasons but because I

00:14:47,840 --> 00:14:55,040
care about my relationship as a changer

00:14:51,980 --> 00:14:57,260
with other changers just as I broke up

00:14:55,040 --> 00:14:59,510
behavior changes into smaller bits

00:14:57,260 --> 00:15:01,510
because I as a changer care about my

00:14:59,510 --> 00:15:05,030
relationship with waiters

00:15:01,510 --> 00:15:07,700
so there you have it there's lots of

00:15:05,030 --> 00:15:09,800
good refactoring you can do there's lots

00:15:07,700 --> 00:15:13,339
of coupling and cohesion that's that

00:15:09,800 --> 00:15:16,070
explains how this all works and why it

00:15:13,339 --> 00:15:21,020
works and so on but I want to leave you

00:15:16,070 --> 00:15:24,140
with that one insight took me a long

00:15:21,020 --> 00:15:26,300
time to figure it out that software

00:15:24,140 --> 00:15:28,640
design is an exercise in human

00:15:26,300 --> 00:15:31,130
relationships but that we as

00:15:28,640 --> 00:15:33,560
technologists have many tools at our

00:15:31,130 --> 00:15:35,510
disposal to do a better job of

00:15:33,560 --> 00:15:38,450
maintaining our part of those

00:15:35,510 --> 00:15:41,260
relationships thank you very much I hope

00:15:38,450 --> 00:15:41,260

YouTube URL: https://www.youtube.com/watch?v=BFFY9Zor6zw


