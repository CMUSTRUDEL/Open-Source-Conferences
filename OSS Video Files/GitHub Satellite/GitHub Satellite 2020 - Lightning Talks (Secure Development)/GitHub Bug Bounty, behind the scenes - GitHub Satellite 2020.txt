Title: GitHub Bug Bounty, behind the scenes - GitHub Satellite 2020
Publication date: 2020-05-06
Playlist: GitHub Satellite 2020 - Lightning Talks (Secure Development)
Description: 
	Presented by Brian Anglin

GitHub Satellite: A community connected by code

On May 6th, we threw a free virtual event featuring developers working together on the worldâ€™s software, announcements from the GitHub team, and inspiring performances by artists who code.

More information: https://githubsatellite.com
Schedule: https://githubsatellite.com/schedule/
Captions: 
	00:00:00,000 --> 00:00:04,529
hi I'm Brian and I work on the github

00:00:02,190 --> 00:00:05,940
application security team and today I'm

00:00:04,529 --> 00:00:07,560
gonna talk about github bug bounty

00:00:05,940 --> 00:00:09,929
program and take you a bit behind the

00:00:07,560 --> 00:00:12,120
scenes if you're not familiar github bug

00:00:09,929 --> 00:00:14,400
bounty program Awards researchers for

00:00:12,120 --> 00:00:16,560
security findings that they report over

00:00:14,400 --> 00:00:20,060
the past six years we paid out over a

00:00:16,560 --> 00:00:22,560
million dollars to security researchers

00:00:20,060 --> 00:00:25,859
usually if you're looking from the

00:00:22,560 --> 00:00:27,779
outside in you see a submission and then

00:00:25,859 --> 00:00:28,320
eventually a bounty if the report was

00:00:27,779 --> 00:00:30,990
valid

00:00:28,320 --> 00:00:32,850
now that time in between is actually

00:00:30,990 --> 00:00:34,260
really interesting but we don't often

00:00:32,850 --> 00:00:35,730
get a chance to talk about it so that's

00:00:34,260 --> 00:00:37,980
what I want to explain today what

00:00:35,730 --> 00:00:40,680
happens between someone submitting an

00:00:37,980 --> 00:00:43,860
issue and about me getting paid so one

00:00:40,680 --> 00:00:45,660
day I saw this come through slack not an

00:00:43,860 --> 00:00:47,309
aardvark reported all flow can be

00:00:45,660 --> 00:00:50,820
completely bypassed using cross-site

00:00:47,309 --> 00:00:53,039
head requests so our o'the flow allows

00:00:50,820 --> 00:00:56,399
third party integrators to act on behalf

00:00:53,039 --> 00:00:59,280
of github users normally this is gated

00:00:56,399 --> 00:01:02,129
by users having to explicitly opt-in to

00:00:59,280 --> 00:01:04,140
this connection however not an aardvark

00:01:02,129 --> 00:01:07,229
is saying this can be bypassed by using

00:01:04,140 --> 00:01:09,810
a cross-site head request if this report

00:01:07,229 --> 00:01:11,700
is indeed true this is a really severe

00:01:09,810 --> 00:01:14,430
issue because it basically means anyone

00:01:11,700 --> 00:01:15,900
can access anyone elses github account

00:01:14,430 --> 00:01:20,490
and act on their behalf

00:01:15,900 --> 00:01:23,369
oh no this is a legitimate issue so now

00:01:20,490 --> 00:01:25,530
it's time to get everyone on board so we

00:01:23,369 --> 00:01:28,740
spin up a zoom call set up Google Docs

00:01:25,530 --> 00:01:30,270
and keep chatting through slack so we

00:01:28,740 --> 00:01:31,560
loop in three different teams that are

00:01:30,270 --> 00:01:33,960
mainly responsible for dealing with this

00:01:31,560 --> 00:01:36,240
issue security instrument response team

00:01:33,960 --> 00:01:38,430
their job is to figure out has this been

00:01:36,240 --> 00:01:40,799
exploited in the wild my team the

00:01:38,430 --> 00:01:42,479
application security team asks how and

00:01:40,799 --> 00:01:45,210
when was this introduced are there

00:01:42,479 --> 00:01:47,310
similar vulnerable code paths and is our

00:01:45,210 --> 00:01:47,880
github enterprise server appliance also

00:01:47,310 --> 00:01:50,369
vulnerable

00:01:47,880 --> 00:01:54,210
finally engineering get started working

00:01:50,369 --> 00:01:56,460
on a fix so as these teams are working

00:01:54,210 --> 00:01:59,159
we identified that there's no evidence

00:01:56,460 --> 00:02:01,140
of exploitation this is great we checked

00:01:59,159 --> 00:02:02,969
our logs and we found the only people to

00:02:01,140 --> 00:02:04,560
access the path that would indicate that

00:02:02,969 --> 00:02:07,740
this has been exploited where the

00:02:04,560 --> 00:02:09,959
researcher and our team unfortunately

00:02:07,740 --> 00:02:12,300
this issue was introduced a while ago we

00:02:09,959 --> 00:02:13,900
found similar vulnerable code paths and

00:02:12,300 --> 00:02:16,200
we found that our github

00:02:13,900 --> 00:02:19,060
server appliance is also vulnerable

00:02:16,200 --> 00:02:20,459
luckily this is a pretty easy issue to

00:02:19,060 --> 00:02:23,140
patch

00:02:20,459 --> 00:02:25,299
luckily engineering gotta fix the fluid

00:02:23,140 --> 00:02:27,159
in about three hours this is awesome

00:02:25,299 --> 00:02:31,000
this means github comm is no longer

00:02:27,159 --> 00:02:32,109
vulnerable to this issue however we have

00:02:31,000 --> 00:02:34,720
to make sure we Crowell starts using

00:02:32,109 --> 00:02:37,120
down our eyes we went through and fixed

00:02:34,720 --> 00:02:38,950
all similar code paths we identified we

00:02:37,120 --> 00:02:41,319
prepared github Enterprise Server back

00:02:38,950 --> 00:02:45,670
ports and we decided on a payout for the

00:02:41,319 --> 00:02:47,109
researcher now some key insights so it's

00:02:45,670 --> 00:02:49,510
really important to keep everyone on the

00:02:47,109 --> 00:02:51,790
same page since this issue is new to us

00:02:49,510 --> 00:02:53,379
and everyone's trying to figure out how

00:02:51,790 --> 00:02:54,760
it works and what we need to do to fix

00:02:53,379 --> 00:02:56,530
it it's really important to share

00:02:54,760 --> 00:02:57,819
information across our team the

00:02:56,530 --> 00:03:00,189
engineering team and the security

00:02:57,819 --> 00:03:02,109
incident response team it's important to

00:03:00,189 --> 00:03:04,870
react quickly since this is such an

00:03:02,109 --> 00:03:06,370
impactful issue any extra minute that it

00:03:04,870 --> 00:03:09,340
spends available in our production

00:03:06,370 --> 00:03:11,590
infrastructure is causing risk to our

00:03:09,340 --> 00:03:14,349
customers data so we want to react as

00:03:11,590 --> 00:03:16,930
quickly as possible and we never want to

00:03:14,349 --> 00:03:18,910
leave loose ends so we made sure and

00:03:16,930 --> 00:03:21,129
that we patched all github Enterprise

00:03:18,910 --> 00:03:23,829
Server versions that were vulnerable to

00:03:21,129 --> 00:03:25,510
this issue and we tested each one to

00:03:23,829 --> 00:03:28,889
make sure that our patch was applicable

00:03:25,510 --> 00:03:31,989
to all those previous supported versions

00:03:28,889 --> 00:03:35,099
so that's a peek behind the scenes of

00:03:31,989 --> 00:03:35,099

YouTube URL: https://www.youtube.com/watch?v=92bIsr8EqB8


