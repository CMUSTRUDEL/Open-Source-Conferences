Title: Putting GitHub at your fingertips - GitHub Satellite 2020
Publication date: 2020-05-07
Playlist: GitHub Satellite 2020 - Work
Description: 
	Let’s face it, the future of software is where you can accomplish your tasks wherever you want and however you prefer to work. Accordingly, GitHub has expanded its toolset to provide you new experiences this year via GitHub Mobile and GitHub CLI Beta and improved experiences via GitHub Desktop. These three products represent the extended GitHub experience to provide you the right tools to be productive with your work at your fingertips. You deserve nothing less.

In this talk, we’ll take a deeper dive into typical Git and GitHub workflows like pushing your code and opening a pull request, reviewing code, and switching contexts and how you can increase your productivity by leveraging GitHub Mobile, CLI Beta, and Desktop.

GitHub Satellite: A community connected by code

On May 6th, we threw a free virtual event featuring developers working together on the world’s software, announcements from the GitHub team, and inspiring performances by artists who code.

More information: https://githubsatellite.com
Schedule: https://githubsatellite.com/schedule/
Captions: 
	00:00:00,399 --> 00:00:05,520
intro to let's see all right it's

00:00:03,199 --> 00:00:06,960
putting github at your fingertips very

00:00:05,520 --> 00:00:08,240
excited about this session

00:00:06,960 --> 00:00:10,000
this session is going to be brought to

00:00:08,240 --> 00:00:12,559
you by neha

00:00:10,000 --> 00:00:14,240
she's a senior engineering manager i get

00:00:12,559 --> 00:00:16,560
she's passionate about making tech

00:00:14,240 --> 00:00:19,750
industry easier and more inclusive

00:00:16,560 --> 00:00:26,280
i'll let you take it from here neja

00:00:19,750 --> 00:00:26,280
[Music]

00:00:29,679 --> 00:00:34,079
thank you as introduced i'm neha and i'm

00:00:32,480 --> 00:00:35,280
part of the team that builds github's

00:00:34,079 --> 00:00:36,880
client applications

00:00:35,280 --> 00:00:39,600
which is how i refer to the group of

00:00:36,880 --> 00:00:41,120
products that is mobile cli and desktop

00:00:39,600 --> 00:00:42,640
so we've shipped a lot of stuff in the

00:00:41,120 --> 00:00:44,079
past year to bridge gaps that you've

00:00:42,640 --> 00:00:45,600
been facing as our users

00:00:44,079 --> 00:00:48,399
and that's actually how github mobile

00:00:45,600 --> 00:00:50,320
and github cli came about this year

00:00:48,399 --> 00:00:51,760
our angle is pretty simple it's about

00:00:50,320 --> 00:00:53,199
meeting you where you are and helping

00:00:51,760 --> 00:00:54,000
you create a workflow that feels like

00:00:53,199 --> 00:00:56,079
home for you

00:00:54,000 --> 00:00:58,000
and that's more important now than ever

00:00:56,079 --> 00:01:00,000
gibbs tool should be serving you and

00:00:58,000 --> 00:01:02,079
help be flexible in supporting you and

00:01:00,000 --> 00:01:03,600
how you adjust to doing your work

00:01:02,079 --> 00:01:05,280
whether that's on your computer or on

00:01:03,600 --> 00:01:06,640
your phone so i'm here to share some

00:01:05,280 --> 00:01:08,799
ways you can do that depending on your

00:01:06,640 --> 00:01:10,320
needs and preferences

00:01:08,799 --> 00:01:12,400
the bulk of this session will cover

00:01:10,320 --> 00:01:14,159
these existing git and github workflows

00:01:12,400 --> 00:01:15,680
and i'll layer in how you might augment

00:01:14,159 --> 00:01:17,840
those workflows using

00:01:15,680 --> 00:01:19,280
client applications but i've left a

00:01:17,840 --> 00:01:19,840
little bit of time at the end of the

00:01:19,280 --> 00:01:21,920
talk

00:01:19,840 --> 00:01:23,680
to talk about key features give you a

00:01:21,920 --> 00:01:26,000
sneak peek about what's coming up

00:01:23,680 --> 00:01:28,479
and to share my one pager on how to try

00:01:26,000 --> 00:01:30,479
these tools and give us feedback

00:01:28,479 --> 00:01:31,680
all right so let's get started i can't

00:01:30,479 --> 00:01:33,680
see you so i'm just going to assume

00:01:31,680 --> 00:01:36,720
you're as excited as i am about this

00:01:33,680 --> 00:01:39,200
because it's time to reflect all right

00:01:36,720 --> 00:01:40,400
so you're at home maybe you put on some

00:01:39,200 --> 00:01:42,320
real pants today

00:01:40,400 --> 00:01:43,920
probably not though and you get to your

00:01:42,320 --> 00:01:44,479
computer because it's time to write some

00:01:43,920 --> 00:01:47,439
code

00:01:44,479 --> 00:01:49,040
that's a simple task right wrong so

00:01:47,439 --> 00:01:50,720
there's so many things that you need to

00:01:49,040 --> 00:01:51,920
do before you get one task done

00:01:50,720 --> 00:01:53,840
and that starts with sorting through

00:01:51,920 --> 00:01:54,399
your tasks picking it working on the

00:01:53,840 --> 00:01:56,000
task

00:01:54,399 --> 00:01:57,840
requesting others to review it and

00:01:56,000 --> 00:02:00,560
eventually merging into the code base

00:01:57,840 --> 00:02:01,600
maybe you're even kicking off a release

00:02:00,560 --> 00:02:03,759
there's nothing

00:02:01,600 --> 00:02:05,520
like reliving how complicated we've made

00:02:03,759 --> 00:02:06,880
this world than by explaining it to

00:02:05,520 --> 00:02:08,319
someone who's not in tech

00:02:06,880 --> 00:02:10,319
it's a lot of steps and it can feel

00:02:08,319 --> 00:02:10,720
unnecessary at times we've all been

00:02:10,319 --> 00:02:12,800
there

00:02:10,720 --> 00:02:14,480
part of our job as technologists is to

00:02:12,800 --> 00:02:15,040
figure out how we can simplify these

00:02:14,480 --> 00:02:18,000
tasks

00:02:15,040 --> 00:02:18,480
so let's base break the base case down

00:02:18,000 --> 00:02:20,239
so

00:02:18,480 --> 00:02:21,599
first we have our get workflows which

00:02:20,239 --> 00:02:22,319
you mostly perform on your local

00:02:21,599 --> 00:02:23,840
computer

00:02:22,319 --> 00:02:25,599
this represents the majority of our

00:02:23,840 --> 00:02:27,360
branch and commit flows but

00:02:25,599 --> 00:02:29,040
there are a few times even after you

00:02:27,360 --> 00:02:30,560
open a pull request where you might need

00:02:29,040 --> 00:02:31,120
to work locally like when you're making

00:02:30,560 --> 00:02:32,800
changes

00:02:31,120 --> 00:02:34,239
testing a pull request or tagging a

00:02:32,800 --> 00:02:36,000
release then

00:02:34,239 --> 00:02:37,599
we have the github workflows which are

00:02:36,000 --> 00:02:39,200
usually concentrated around managing

00:02:37,599 --> 00:02:41,120
your tasks code reviewing

00:02:39,200 --> 00:02:42,720
merging and releasing this doesn't

00:02:41,120 --> 00:02:44,640
include other apps you might use like a

00:02:42,720 --> 00:02:47,120
project or task manager your editor

00:02:44,640 --> 00:02:48,480
or any other scripts you have to run so

00:02:47,120 --> 00:02:50,480
we saw the base case

00:02:48,480 --> 00:02:52,400
let's talk about github desktop if

00:02:50,480 --> 00:02:54,160
you're a github desktop user chances are

00:02:52,400 --> 00:02:55,680
you don't mind using a gui especially

00:02:54,160 --> 00:02:56,640
for your local tasks that git would

00:02:55,680 --> 00:02:58,959
otherwise cover

00:02:56,640 --> 00:03:01,519
in fact you might prefer it that's why

00:02:58,959 --> 00:03:03,599
github desktops workflows cover almost

00:03:01,519 --> 00:03:05,599
all of git workflows shown here with a

00:03:03,599 --> 00:03:07,280
little smidgen of github tasks to save

00:03:05,599 --> 00:03:09,519
you another back and forth cycle

00:03:07,280 --> 00:03:11,280
but in general desktop doesn't cover a

00:03:09,519 --> 00:03:12,480
lot of github flows because github's

00:03:11,280 --> 00:03:14,400
also an amazing gui

00:03:12,480 --> 00:03:16,159
and so its responsibilities more to get

00:03:14,400 --> 00:03:17,440
to you to where you need to go faster

00:03:16,159 --> 00:03:18,720
than it is to duplicate all of the

00:03:17,440 --> 00:03:21,200
workflows

00:03:18,720 --> 00:03:22,480
now on the other hand github cli is for

00:03:21,200 --> 00:03:23,280
people that prefer to use their

00:03:22,480 --> 00:03:25,360
terminals

00:03:23,280 --> 00:03:27,360
so instead github cli brings the

00:03:25,360 --> 00:03:29,519
workflows that you do on github

00:03:27,360 --> 00:03:30,799
to your terminal so you can execute them

00:03:29,519 --> 00:03:32,239
alongside git

00:03:30,799 --> 00:03:33,840
that's why you'll see a lot of overlap

00:03:32,239 --> 00:03:34,480
with github workflows but not get

00:03:33,840 --> 00:03:36,319
workflo

00:03:34,480 --> 00:03:38,400
flows unless there is a github component

00:03:36,319 --> 00:03:40,319
associated with it

00:03:38,400 --> 00:03:42,239
and finally github mobile is for those

00:03:40,319 --> 00:03:43,920
github on-the-go tasks that you might do

00:03:42,239 --> 00:03:44,799
intermittently or you could do in under

00:03:43,920 --> 00:03:46,640
five minutes

00:03:44,799 --> 00:03:48,319
because because it's unlikely that

00:03:46,640 --> 00:03:50,159
you're currently coding on your phone

00:03:48,319 --> 00:03:52,000
it helps you concentrate on helping you

00:03:50,159 --> 00:03:52,959
manage your tasks review code and merge

00:03:52,000 --> 00:03:54,400
it

00:03:52,959 --> 00:03:56,000
so in a nutshell those are the five

00:03:54,400 --> 00:03:56,319
tools that you have to customize right

00:03:56,000 --> 00:03:59,360
get

00:03:56,319 --> 00:04:01,120
github.com desktop cli and mobile it

00:03:59,360 --> 00:04:02,480
looks a bit chaotic here but it helps to

00:04:01,120 --> 00:04:03,840
keep in mind that depending on your

00:04:02,480 --> 00:04:05,760
situation and preference

00:04:03,840 --> 00:04:07,200
we provide you these alternatives when

00:04:05,760 --> 00:04:09,200
it can speed up your work and make you

00:04:07,200 --> 00:04:10,879
more productive

00:04:09,200 --> 00:04:12,959
and the best part is that we're actively

00:04:10,879 --> 00:04:14,640
releasing new things you can already see

00:04:12,959 --> 00:04:16,320
how some of these coming soon features

00:04:14,640 --> 00:04:17,759
round out our workflow coverage

00:04:16,320 --> 00:04:19,600
and i'll hint at some of them as we go

00:04:17,759 --> 00:04:21,440
along okay so

00:04:19,600 --> 00:04:23,520
i've done all the telling i need to do

00:04:21,440 --> 00:04:25,040
so far but i'd also like to show you how

00:04:23,520 --> 00:04:26,240
your workflow can change by stepping

00:04:25,040 --> 00:04:27,840
through each of the steps

00:04:26,240 --> 00:04:29,600
and showing you how the base case and

00:04:27,840 --> 00:04:32,000
how what what the base case looks like

00:04:29,600 --> 00:04:34,080
and how you might augment them

00:04:32,000 --> 00:04:35,919
real quick before we get started we've

00:04:34,080 --> 00:04:37,360
i've laid out my slides in a certain way

00:04:35,919 --> 00:04:38,880
to help you keep track of what's going

00:04:37,360 --> 00:04:39,840
on because there's a lot that goes into

00:04:38,880 --> 00:04:41,360
your workflow right

00:04:39,840 --> 00:04:43,520
so here's a few things to look out for

00:04:41,360 --> 00:04:45,919
in these slides so on the left hand side

00:04:43,520 --> 00:04:47,440
i'll keep track of your task and so

00:04:45,919 --> 00:04:49,840
it aligns with the workflow diagram that

00:04:47,440 --> 00:04:51,199
i introduced and on the right hand side

00:04:49,840 --> 00:04:52,880
i have the tool that i'm talking about

00:04:51,199 --> 00:04:54,720
and that's color coded too so we'll be

00:04:52,880 --> 00:04:56,400
bouncing between these different tools

00:04:54,720 --> 00:04:58,160
because that's the point of the talk

00:04:56,400 --> 00:05:00,400
just keep an eye out

00:04:58,160 --> 00:05:02,080
all right first things first at the

00:05:00,400 --> 00:05:03,440
beginning or end of the day or at an end

00:05:02,080 --> 00:05:04,960
of a task you're going to want to check

00:05:03,440 --> 00:05:06,240
in the mission control and hear what

00:05:04,960 --> 00:05:07,120
you've been missing out on since you've

00:05:06,240 --> 00:05:08,800
been gone

00:05:07,120 --> 00:05:10,560
so usually you might go to github

00:05:08,800 --> 00:05:11,600
notification pages which helps you see

00:05:10,560 --> 00:05:13,680
what's happening across

00:05:11,600 --> 00:05:14,960
multiple repositories according to the

00:05:13,680 --> 00:05:16,560
filters that you choose

00:05:14,960 --> 00:05:18,160
additionally you might create an issue

00:05:16,560 --> 00:05:19,280
and eventually you select a task to

00:05:18,160 --> 00:05:20,960
assign yourself

00:05:19,280 --> 00:05:22,479
that's the basic landscape of task

00:05:20,960 --> 00:05:23,280
management and selection which happens

00:05:22,479 --> 00:05:24,720
on.com

00:05:23,280 --> 00:05:26,960
but if you're not already browsing

00:05:24,720 --> 00:05:28,639
on.com there are a few things you can do

00:05:26,960 --> 00:05:30,960
with github's client applications that

00:05:28,639 --> 00:05:33,039
help you manage your tasks

00:05:30,960 --> 00:05:34,800
github desktop provides the options to

00:05:33,039 --> 00:05:36,320
one create an issue which you can do

00:05:34,800 --> 00:05:37,360
from the menu item i didn't include that

00:05:36,320 --> 00:05:39,280
in the screenshot

00:05:37,360 --> 00:05:40,400
and then two check out a list of pull

00:05:39,280 --> 00:05:41,440
requests that you can open your

00:05:40,400 --> 00:05:42,720
repository

00:05:41,440 --> 00:05:44,880
and it'll give you a little bit of a

00:05:42,720 --> 00:05:46,479
signal on status to help you understand

00:05:44,880 --> 00:05:48,960
what's changed

00:05:46,479 --> 00:05:50,800
i know it's silly but desktop lets me go

00:05:48,960 --> 00:05:52,639
to lets me create an issue with one

00:05:50,800 --> 00:05:54,080
shortcut so that's my go-to

00:05:52,639 --> 00:05:55,919
it's definitely way easier than clicking

00:05:54,080 --> 00:05:57,360
around in a browser

00:05:55,919 --> 00:05:59,360
if you want to manage some of your tasks

00:05:57,360 --> 00:06:02,080
by the terminal with github cli

00:05:59,360 --> 00:06:03,840
there's tons of commands you can use my

00:06:02,080 --> 00:06:05,280
favorite one is sheet here so that's

00:06:03,840 --> 00:06:06,639
ghpr status

00:06:05,280 --> 00:06:08,319
because it gives me just enough

00:06:06,639 --> 00:06:08,880
information to figure out what my next

00:06:08,319 --> 00:06:11,039
move is

00:06:08,880 --> 00:06:12,560
do i respond to an outstanding pr or do

00:06:11,039 --> 00:06:14,319
i review someone else's

00:06:12,560 --> 00:06:16,880
by the way this works for issues too so

00:06:14,319 --> 00:06:18,319
you can try out gh issue status and then

00:06:16,880 --> 00:06:21,520
you can use the view command to view

00:06:18,319 --> 00:06:22,800
more context you can also create issues

00:06:21,520 --> 00:06:24,479
with the predictable command

00:06:22,800 --> 00:06:26,720
gh issue create you see there's a

00:06:24,479 --> 00:06:28,240
pattern here right i love that it lets

00:06:26,720 --> 00:06:30,080
you select your issue templates and

00:06:28,240 --> 00:06:32,240
gives you prompts to type in your title

00:06:30,080 --> 00:06:34,240
which obviously is mandatory and then

00:06:32,240 --> 00:06:36,319
you can type in your body or skip it

00:06:34,240 --> 00:06:38,160
and then select what you want to do next

00:06:36,319 --> 00:06:39,840
i usually find myself skipping the body

00:06:38,160 --> 00:06:41,039
to type in the browser so i can preview

00:06:39,840 --> 00:06:42,880
my markdown

00:06:41,039 --> 00:06:44,639
the best part is if you want to skip any

00:06:42,880 --> 00:06:46,840
of the prompts you can pass in flags and

00:06:44,639 --> 00:06:48,479
i'll provide an example with pr's later

00:06:46,840 --> 00:06:49,680
on now

00:06:48,479 --> 00:06:51,520
most of the time when it comes to

00:06:49,680 --> 00:06:53,120
triaging i'm just so productive

00:06:51,520 --> 00:06:54,639
and on top of my game that i need to do

00:06:53,120 --> 00:06:57,759
it on the go

00:06:54,639 --> 00:06:59,280
i'm lying so real talk i'm really lazy

00:06:57,759 --> 00:07:02,720
and i hate getting out of bed

00:06:59,280 --> 00:07:04,319
so mobile's mo notification menu um

00:07:02,720 --> 00:07:05,919
is what i use the most when i want to

00:07:04,319 --> 00:07:07,840
see if anything's blocking on me so i

00:07:05,919 --> 00:07:10,160
can justify sleeping another hour

00:07:07,840 --> 00:07:11,759
which is a hot tip for me i am not

00:07:10,160 --> 00:07:12,800
liable for the consequences though if

00:07:11,759 --> 00:07:15,440
you try it

00:07:12,800 --> 00:07:17,280
so you can also create issues within

00:07:15,440 --> 00:07:18,880
mobile and assign yourself to the tasks

00:07:17,280 --> 00:07:21,199
so that by the time you get back to your

00:07:18,880 --> 00:07:22,400
computer you can just get started

00:07:21,199 --> 00:07:24,240
what i like about all of these

00:07:22,400 --> 00:07:25,840
alternatives for managing tasks

00:07:24,240 --> 00:07:27,280
is that in whatever github tool you're

00:07:25,840 --> 00:07:28,160
using if you want to check out what's

00:07:27,280 --> 00:07:29,759
new in the world

00:07:28,160 --> 00:07:32,080
you can check it out just from where you

00:07:29,759 --> 00:07:34,479
are all right stage two

00:07:32,080 --> 00:07:35,360
branches now that you know what you want

00:07:34,479 --> 00:07:36,960
to work on

00:07:35,360 --> 00:07:38,000
you have to prepare your environment by

00:07:36,960 --> 00:07:39,680
getting the right into the right

00:07:38,000 --> 00:07:40,800
repository and branching

00:07:39,680 --> 00:07:43,120
at some point you have to create your

00:07:40,800 --> 00:07:44,479
repository or clone your repositories or

00:07:43,120 --> 00:07:45,919
fork the repository

00:07:44,479 --> 00:07:47,520
and then you have to get that url and

00:07:45,919 --> 00:07:49,840
you have to clone it locally right

00:07:47,520 --> 00:07:51,280
so then after that you have it's time to

00:07:49,840 --> 00:07:53,360
create your branches which you can do on

00:07:51,280 --> 00:07:54,800
github.com so i kind of showed this here

00:07:53,360 --> 00:07:56,720
but usually the majority of that work

00:07:54,800 --> 00:07:58,479
happens locally

00:07:56,720 --> 00:08:00,160
once you get to your local machine if

00:07:58,479 --> 00:08:02,080
you don't have the repository yet

00:08:00,160 --> 00:08:03,599
you'll do this one-time task of pasting

00:08:02,080 --> 00:08:05,280
the url to clone the repo and then

00:08:03,599 --> 00:08:07,520
create the branch you want to work on

00:08:05,280 --> 00:08:09,360
and also by the way if you're on a fork

00:08:07,520 --> 00:08:10,560
you also have to set your own upstream

00:08:09,360 --> 00:08:12,800
and you can't even get the updates

00:08:10,560 --> 00:08:14,720
easily so it's kind of a mess yes

00:08:12,800 --> 00:08:16,720
using github and git to clone a

00:08:14,720 --> 00:08:18,639
repository feels inefficient

00:08:16,720 --> 00:08:20,240
to me let's look at how we can make this

00:08:18,639 --> 00:08:22,160
easier

00:08:20,240 --> 00:08:24,319
github desktop lets you easily switch

00:08:22,160 --> 00:08:26,080
between repositories and it even detects

00:08:24,319 --> 00:08:26,800
if you're on a protected branch if you

00:08:26,080 --> 00:08:28,639
have that

00:08:26,800 --> 00:08:30,080
feature enabled so that you have a

00:08:28,639 --> 00:08:31,759
seamless way to create a branch and

00:08:30,080 --> 00:08:33,680
start your work

00:08:31,759 --> 00:08:35,279
in the larger scheme of things desktop

00:08:33,680 --> 00:08:36,719
lets you clone repositories

00:08:35,279 --> 00:08:38,240
create them and even handles your

00:08:36,719 --> 00:08:38,880
workflow by setting your upstream for

00:08:38,240 --> 00:08:40,320
you

00:08:38,880 --> 00:08:42,080
this is my go-to for getting

00:08:40,320 --> 00:08:45,600
repositories because i can see what i've

00:08:42,080 --> 00:08:48,240
added in the repository menu i love that

00:08:45,600 --> 00:08:49,040
github cli also lets you create clone

00:08:48,240 --> 00:08:50,720
and fork

00:08:49,040 --> 00:08:52,399
for forking it even offers to add a

00:08:50,720 --> 00:08:54,160
remote which you can see here

00:08:52,399 --> 00:08:55,920
and it's a subtle touch but one of my

00:08:54,160 --> 00:08:57,360
favorite things is how github cli

00:08:55,920 --> 00:08:59,279
responds to your commands even

00:08:57,360 --> 00:09:00,959
even when things are going well so i

00:08:59,279 --> 00:09:02,480
love i just get these check marks so it

00:09:00,959 --> 00:09:03,920
says when the fork's been created when

00:09:02,480 --> 00:09:05,200
my origin's been renamed

00:09:03,920 --> 00:09:07,519
it feels like i'm the boss and my

00:09:05,200 --> 00:09:09,120
computer is giving me good news you know

00:09:07,519 --> 00:09:11,120
both desktop and cli handle your

00:09:09,120 --> 00:09:12,720
repositories without switching contacts

00:09:11,120 --> 00:09:14,480
copying information and don't make you

00:09:12,720 --> 00:09:17,680
look up how to set your up streams

00:09:14,480 --> 00:09:20,000
or syncyourlocaland.com repositories

00:09:17,680 --> 00:09:21,279
okay hooray we've made it to the stage

00:09:20,000 --> 00:09:22,720
where you know what you want to change

00:09:21,279 --> 00:09:23,440
in the code base so that's the commit

00:09:22,720 --> 00:09:25,600
stage

00:09:23,440 --> 00:09:27,360
this is a time where it's to write this

00:09:25,600 --> 00:09:29,040
is the time where we write those changes

00:09:27,360 --> 00:09:30,720
and it actually took me way too long to

00:09:29,040 --> 00:09:32,000
figure out that for smaller commits you

00:09:30,720 --> 00:09:33,600
can write that code directly in

00:09:32,000 --> 00:09:35,360
github.com and commit it

00:09:33,600 --> 00:09:37,360
i do this when i'm updating readme's or

00:09:35,360 --> 00:09:39,360
copy basically when i don't need to run

00:09:37,360 --> 00:09:41,440
tests before opening the pull request

00:09:39,360 --> 00:09:43,279
although as you learned this morning

00:09:41,440 --> 00:09:43,839
this is where github code spaces really

00:09:43,279 --> 00:09:45,200
shines

00:09:43,839 --> 00:09:47,360
so if you're interested in trying that

00:09:45,200 --> 00:09:47,920
out you can edit build and commit in one

00:09:47,360 --> 00:09:49,440
tool

00:09:47,920 --> 00:09:52,080
and you can make much more complex

00:09:49,440 --> 00:09:53,680
changes for now let's assume you're

00:09:52,080 --> 00:09:54,160
working locally and you have coded the

00:09:53,680 --> 00:09:56,800
fix

00:09:54,160 --> 00:09:58,160
with your favorite editor for me i'm

00:09:56,800 --> 00:09:59,839
just rushing through these steps to get

00:09:58,160 --> 00:10:01,519
it over with as fast as possible

00:09:59,839 --> 00:10:03,360
committing should never be a huge part

00:10:01,519 --> 00:10:05,200
of my workflow and yet it can be

00:10:03,360 --> 00:10:06,720
and this is an example of some of the

00:10:05,200 --> 00:10:07,680
get commands that you might have to use

00:10:06,720 --> 00:10:09,600
each time

00:10:07,680 --> 00:10:11,760
my personal list is a lot longer because

00:10:09,600 --> 00:10:13,519
i type git status compulsively i mean i

00:10:11,760 --> 00:10:14,959
type in almost every other command

00:10:13,519 --> 00:10:16,959
because i don't trust anything that git

00:10:14,959 --> 00:10:18,560
does and i don't trust anything that i

00:10:16,959 --> 00:10:19,760
do either and i kind of need that

00:10:18,560 --> 00:10:21,760
assurance to make sure that everything

00:10:19,760 --> 00:10:24,720
is going as planned

00:10:21,760 --> 00:10:26,320
how can we make this easier on ourselves

00:10:24,720 --> 00:10:28,560
right now if i'm making it if i'm not

00:10:26,320 --> 00:10:30,320
making a change on github.com i love

00:10:28,560 --> 00:10:32,240
using github desktop because it provides

00:10:30,320 --> 00:10:32,959
me a gui that shows diffs with syntax

00:10:32,240 --> 00:10:34,959
highlighting

00:10:32,959 --> 00:10:36,640
it lets me partially commit with check

00:10:34,959 --> 00:10:38,320
boxes and selecting lines

00:10:36,640 --> 00:10:41,200
it shows me what i've selected when i'm

00:10:38,320 --> 00:10:42,640
committing my code who needs git status

00:10:41,200 --> 00:10:44,240
you want to create your code you want to

00:10:42,640 --> 00:10:44,640
credit your co-author there's a spot for

00:10:44,240 --> 00:10:46,880
that

00:10:44,640 --> 00:10:48,399
and here i'm actually crediting amanda

00:10:46,880 --> 00:10:50,640
pinsker who helped me create the slides

00:10:48,399 --> 00:10:51,920
for this talk so thanks amanda

00:10:50,640 --> 00:10:54,240
once you're done committing you might

00:10:51,920 --> 00:10:55,920
find yourself fetching origin rebasing

00:10:54,240 --> 00:10:57,279
resolving any conflicts that come about

00:10:55,920 --> 00:10:59,200
before you're ready to push

00:10:57,279 --> 00:11:00,560
desktop provides all of these stuff with

00:10:59,200 --> 00:11:03,839
a pretty basic gui

00:11:00,560 --> 00:11:05,760
and this is how you can move forward but

00:11:03,839 --> 00:11:08,320
it's also just as important to know how

00:11:05,760 --> 00:11:09,839
you can go back because regrets are real

00:11:08,320 --> 00:11:11,920
github desktop addresses this by

00:11:09,839 --> 00:11:13,600
providing you an undo button button to

00:11:11,920 --> 00:11:15,360
bring back changes from the last commit

00:11:13,600 --> 00:11:17,200
and a revert option to create a new

00:11:15,360 --> 00:11:19,760
commit to represent those changes

00:11:17,200 --> 00:11:21,600
and yes you can do this with aliases but

00:11:19,760 --> 00:11:23,360
i find that the visual cues here of

00:11:21,600 --> 00:11:25,200
showing the commit before i do

00:11:23,360 --> 00:11:26,880
something instead of passing in a sha

00:11:25,200 --> 00:11:28,640
has made me a lot more confident before

00:11:26,880 --> 00:11:29,760
i'm taking these risks with an alias

00:11:28,640 --> 00:11:31,680
that i probably don't remember the

00:11:29,760 --> 00:11:33,600
contents of

00:11:31,680 --> 00:11:35,120
now after you've pushed your code things

00:11:33,600 --> 00:11:38,079
get interesting which brings us to

00:11:35,120 --> 00:11:39,920
stage four code review code reviewing

00:11:38,079 --> 00:11:41,200
has two parts basically right creating a

00:11:39,920 --> 00:11:43,279
pull request and actually

00:11:41,200 --> 00:11:45,040
reviewing the code it's muscle memory

00:11:43,279 --> 00:11:46,880
for us now but creating the pull request

00:11:45,040 --> 00:11:49,040
itself requires so many steps

00:11:46,880 --> 00:11:51,440
and this is why both local tools provide

00:11:49,040 --> 00:11:54,959
alternatives

00:11:51,440 --> 00:11:56,880
oops github desktop provides a pull

00:11:54,959 --> 00:11:58,320
request option if you have a branch with

00:11:56,880 --> 00:11:59,760
pushed commits on it and no

00:11:58,320 --> 00:12:01,279
corresponding pull request

00:11:59,760 --> 00:12:02,800
so you don't have to remember all that

00:12:01,279 --> 00:12:04,000
it just kind of knows when it's time for

00:12:02,800 --> 00:12:05,440
you to create a pull request

00:12:04,000 --> 00:12:08,320
and you can click on that button to get

00:12:05,440 --> 00:12:11,600
navigated directly to the page to create

00:12:08,320 --> 00:12:13,920
to the on.com

00:12:11,600 --> 00:12:15,680
gibcli takes a different approach and it

00:12:13,920 --> 00:12:16,560
lets you create the prior directly in

00:12:15,680 --> 00:12:18,720
the terminal

00:12:16,560 --> 00:12:20,320
complete with titles and a body and

00:12:18,720 --> 00:12:23,360
later this month you'll be able to add

00:12:20,320 --> 00:12:25,120
labels and reviewers too this is huge if

00:12:23,360 --> 00:12:26,240
you already didn't know what to write of

00:12:25,120 --> 00:12:28,240
course you should be able to do it

00:12:26,240 --> 00:12:30,320
without going onto.com

00:12:28,240 --> 00:12:31,680
this example shows how you can sign all

00:12:30,320 --> 00:12:33,519
of that with flags alone

00:12:31,680 --> 00:12:34,800
as you can see it spits out your created

00:12:33,519 --> 00:12:36,800
pull request url

00:12:34,800 --> 00:12:38,240
and then you can navigate to the browser

00:12:36,800 --> 00:12:39,440
if you want or

00:12:38,240 --> 00:12:41,200
there's some other things that you can

00:12:39,440 --> 00:12:42,800
do you can pass in the web flag and you

00:12:41,200 --> 00:12:44,720
can go directly to the web

00:12:42,800 --> 00:12:46,000
just like the way that github desktop

00:12:44,720 --> 00:12:47,920
does or for fun

00:12:46,000 --> 00:12:49,440
there's a fill flag that'll autofill

00:12:47,920 --> 00:12:51,440
your title and description based on your

00:12:49,440 --> 00:12:53,040
commit messages

00:12:51,440 --> 00:12:54,720
another hot tip is that if you're in a

00:12:53,040 --> 00:12:55,839
repository and you don't have push

00:12:54,720 --> 00:12:57,760
permission to it

00:12:55,839 --> 00:12:59,600
submitting your pull request will allow

00:12:57,760 --> 00:13:02,240
you to create a fork so you can keep on

00:12:59,600 --> 00:13:03,839
going which i really love

00:13:02,240 --> 00:13:05,440
once you create your pull request you're

00:13:03,839 --> 00:13:07,120
in this new limbo right you're waiting

00:13:05,440 --> 00:13:09,040
for just another round of taking a

00:13:07,120 --> 00:13:11,519
review or seeing responses and

00:13:09,040 --> 00:13:12,880
adding these comments so whenever you

00:13:11,519 --> 00:13:14,399
have to make these changes

00:13:12,880 --> 00:13:16,079
especially if you do them locally to

00:13:14,399 --> 00:13:16,720
push them up you're kind of straddling

00:13:16,079 --> 00:13:20,000
between

00:13:16,720 --> 00:13:21,519
github yet again github desktop

00:13:20,000 --> 00:13:24,000
lets you go straight from your pull

00:13:21,519 --> 00:13:26,959
request to check out your branch locally

00:13:24,000 --> 00:13:28,399
it opens a branch in desktop and offers

00:13:26,959 --> 00:13:30,320
to stash your changes

00:13:28,399 --> 00:13:33,279
so you can check out the code build it

00:13:30,320 --> 00:13:33,279
and push your commits

00:13:33,760 --> 00:13:37,440
github cli also does something similar

00:13:36,160 --> 00:13:39,040
you could see your pull request

00:13:37,440 --> 00:13:40,480
or the ones requesting your review with

00:13:39,040 --> 00:13:41,199
peer status which we've talked about

00:13:40,480 --> 00:13:42,959
before

00:13:41,199 --> 00:13:44,639
and check it out directly either by the

00:13:42,959 --> 00:13:45,120
pull request number or by the branch

00:13:44,639 --> 00:13:46,800
name

00:13:45,120 --> 00:13:50,240
and soon you'll be able to give a basic

00:13:46,800 --> 00:13:52,240
review too i'm so excited for that

00:13:50,240 --> 00:13:53,519
but if you don't need to build your code

00:13:52,240 --> 00:13:55,680
or test the code locally

00:13:53,519 --> 00:13:56,880
which my absolute favorite way to review

00:13:55,680 --> 00:13:58,480
code is on my phone

00:13:56,880 --> 00:14:00,320
i can leave comments onlines and i can

00:13:58,480 --> 00:14:02,480
review the pr as a whole and as an

00:14:00,320 --> 00:14:04,639
engineering manager i'm rarely reviewing

00:14:02,480 --> 00:14:06,240
majorly technical code i think my teens

00:14:04,639 --> 00:14:07,920
have taken pity on themselves and

00:14:06,240 --> 00:14:08,959
limited me to reviewing release notes

00:14:07,920 --> 00:14:10,959
and some simpler stuff

00:14:08,959 --> 00:14:12,560
which is fine by me i can do most of my

00:14:10,959 --> 00:14:14,720
reviews on github mobile now

00:14:12,560 --> 00:14:15,920
and if i ever have complex comments

00:14:14,720 --> 00:14:16,800
they'll just have to wait for me to come

00:14:15,920 --> 00:14:20,160
back to my desk

00:14:16,800 --> 00:14:21,760
so they asked for this at the last stage

00:14:20,160 --> 00:14:24,079
if you're ready to smash that merge

00:14:21,760 --> 00:14:25,839
button and maybe even initiate a release

00:14:24,079 --> 00:14:27,440
i've seen most cases where github has

00:14:25,839 --> 00:14:29,040
done this but

00:14:27,440 --> 00:14:31,279
technically you can do this on git as

00:14:29,040 --> 00:14:32,240
well so the pro tip is if you rebase or

00:14:31,279 --> 00:14:33,760
merge on

00:14:32,240 --> 00:14:35,600
master into your branch github will

00:14:33,760 --> 00:14:37,040
actually recognize it and you might also

00:14:35,600 --> 00:14:39,279
have hooks that recognize and initiate

00:14:37,040 --> 00:14:41,600
releases based on tags

00:14:39,279 --> 00:14:43,199
now you can't do this yet but you'll

00:14:41,600 --> 00:14:44,959
also be able to view and create

00:14:43,199 --> 00:14:46,560
tags so you don't need git for any of

00:14:44,959 --> 00:14:47,760
these steps you can check out this

00:14:46,560 --> 00:14:49,440
little teaser here

00:14:47,760 --> 00:14:51,120
and this has actually been a requested

00:14:49,440 --> 00:14:52,560
feature for a while so we're really

00:14:51,120 --> 00:14:56,079
excited to be able to provide it

00:14:52,560 --> 00:14:58,079
soon not yet soon

00:14:56,079 --> 00:14:59,839
with github cli you'll be able to do

00:14:58,079 --> 00:15:01,360
some of this also you can use the pr

00:14:59,839 --> 00:15:02,399
status to see which pull requests have

00:15:01,360 --> 00:15:04,480
gotten approved

00:15:02,399 --> 00:15:05,760
and are ready for to be merged and soon

00:15:04,480 --> 00:15:07,120
you'll be able to merge those pull

00:15:05,760 --> 00:15:08,560
requests and even delete the branch

00:15:07,120 --> 00:15:10,639
locally and on github

00:15:08,560 --> 00:15:11,760
which saves you a pruning step so that's

00:15:10,639 --> 00:15:13,040
something that we haven't been able to

00:15:11,760 --> 00:15:15,120
have before

00:15:13,040 --> 00:15:16,160
soon you can also close pull requests

00:15:15,120 --> 00:15:17,279
even if you don't

00:15:16,160 --> 00:15:20,800
if you realize that you don't need to

00:15:17,279 --> 00:15:22,560
work on it anymore without going on.com

00:15:20,800 --> 00:15:24,240
maybe you wanted to merge but you were

00:15:22,560 --> 00:15:25,440
waiting for ci to pass and you didn't

00:15:24,240 --> 00:15:26,160
want to be chained to your desk while

00:15:25,440 --> 00:15:28,000
you waited

00:15:26,160 --> 00:15:29,600
github mobile gives you the freedom

00:15:28,000 --> 00:15:32,480
because now you can merge pull requests

00:15:29,600 --> 00:15:33,839
on your phone no computer required

00:15:32,480 --> 00:15:35,199
so now that we've seen the basic

00:15:33,839 --> 00:15:36,560
end-to-end workflow i'm going to take

00:15:35,199 --> 00:15:38,000
you through a snapshot of the key

00:15:36,560 --> 00:15:40,639
features in case there's anything else

00:15:38,000 --> 00:15:41,839
you want to try out so this is what

00:15:40,639 --> 00:15:43,120
desktop has to offer

00:15:41,839 --> 00:15:45,279
and we actually talked about a ton of

00:15:43,120 --> 00:15:46,959
these features already something i

00:15:45,279 --> 00:15:48,959
didn't mention is that github desktop

00:15:46,959 --> 00:15:50,720
supports enterprise and proxies and it

00:15:48,959 --> 00:15:52,000
even provides an onboarding tutorial to

00:15:50,720 --> 00:15:54,639
get you acquainted with the git and

00:15:52,000 --> 00:15:56,720
github workflow within desktop

00:15:54,639 --> 00:15:58,639
i'm also a big fan of how it handles

00:15:56,720 --> 00:15:59,759
conflicts it gives you a progress bar as

00:15:58,639 --> 00:16:01,120
you've gone through a rebase

00:15:59,759 --> 00:16:03,199
and if you've ever struggled through the

00:16:01,120 --> 00:16:03,839
question is this rebase going to be ever

00:16:03,199 --> 00:16:05,839
over

00:16:03,839 --> 00:16:08,399
the project progress bar is a lifesaver

00:16:05,839 --> 00:16:10,560
it gives me hope

00:16:08,399 --> 00:16:12,160
github cli dropped its beta a few weeks

00:16:10,560 --> 00:16:13,199
a few months ago not a few weeks ago a

00:16:12,160 --> 00:16:15,199
few months ago

00:16:13,199 --> 00:16:16,399
so this is this feature list is a little

00:16:15,199 --> 00:16:18,000
bit thinner but if you've

00:16:16,399 --> 00:16:19,600
been following along they're rapidly

00:16:18,000 --> 00:16:21,600
coming out with new features

00:16:19,600 --> 00:16:22,720
in the most recent ship you can get and

00:16:21,600 --> 00:16:24,320
set your config

00:16:22,720 --> 00:16:26,480
which means that you can set your git

00:16:24,320 --> 00:16:27,680
protocol to ssh instead of it defaulting

00:16:26,480 --> 00:16:30,880
to https

00:16:27,680 --> 00:16:32,880
i really like that it also gets

00:16:30,880 --> 00:16:34,639
has a pretty solid help menu and it has

00:16:32,880 --> 00:16:35,440
an online manual that includes example

00:16:34,639 --> 00:16:37,600
of usages

00:16:35,440 --> 00:16:40,000
i use the online manual all the time so

00:16:37,600 --> 00:16:41,600
i encourage you to check it out

00:16:40,000 --> 00:16:43,519
finally the workflows that we went

00:16:41,600 --> 00:16:45,440
through only touched a small sampling of

00:16:43,519 --> 00:16:46,800
github mobile's functionality

00:16:45,440 --> 00:16:48,639
my favorite ones that i haven't

00:16:46,800 --> 00:16:50,240
mentioned are being able to triage with

00:16:48,639 --> 00:16:51,839
labels

00:16:50,240 --> 00:16:53,440
and which i need to do as a good open

00:16:51,839 --> 00:16:55,680
source contributor and

00:16:53,440 --> 00:16:57,600
adding reactions as i check out issues

00:16:55,680 --> 00:16:59,360
it's such a little thing but i get such

00:16:57,600 --> 00:17:01,199
a rush of dopamine every single time i

00:16:59,360 --> 00:17:02,560
can emote with a heart or a rocket

00:17:01,199 --> 00:17:04,480
and let someone know that i'm reading

00:17:02,560 --> 00:17:06,160
their comments which

00:17:04,480 --> 00:17:08,720
i'm obviously doing because i can do

00:17:06,160 --> 00:17:10,400
that on github mobile

00:17:08,720 --> 00:17:12,000
as promised there are few features

00:17:10,400 --> 00:17:13,919
shipped in the last month in the last

00:17:12,000 --> 00:17:16,559
few months on what's coming up

00:17:13,919 --> 00:17:18,319
most notably github cli and github

00:17:16,559 --> 00:17:20,240
mobile are committed to joining github

00:17:18,319 --> 00:17:22,559
desktop and supporting github enterprise

00:17:20,240 --> 00:17:24,319
by the end of the year so this is just a

00:17:22,559 --> 00:17:25,839
tiny portion of the plan changes the

00:17:24,319 --> 00:17:26,240
best way to keep track of what's coming

00:17:25,839 --> 00:17:27,439
up

00:17:26,240 --> 00:17:29,679
is to make sure that you're checking out

00:17:27,439 --> 00:17:31,520
github's blog or following the github or

00:17:29,679 --> 00:17:33,280
gh changelog twitter accounts that

00:17:31,520 --> 00:17:35,360
update you on the latest changes

00:17:33,280 --> 00:17:36,640
but since you've made it this far i'll

00:17:35,360 --> 00:17:38,480
share one more secret

00:17:36,640 --> 00:17:40,000
on how you can get a sneak peek i

00:17:38,480 --> 00:17:42,880
haven't mentioned it yet but desktop and

00:17:40,000 --> 00:17:44,559
cli are open source projects which means

00:17:42,880 --> 00:17:46,720
that they have open source project

00:17:44,559 --> 00:17:48,480
boards as well on the repository

00:17:46,720 --> 00:17:50,559
so you can see the status of prs as

00:17:48,480 --> 00:17:52,240
they're coming along and github desktop

00:17:50,559 --> 00:17:54,400
actually has a link to its beta

00:17:52,240 --> 00:17:56,080
in the repositories and readme so if you

00:17:54,400 --> 00:17:58,000
want to check out this new tag feature

00:17:56,080 --> 00:18:00,080
it's up on beta now

00:17:58,000 --> 00:18:01,520
the caveat is that you obsess house beta

00:18:00,080 --> 00:18:02,880
can be a little bit buggier but the team

00:18:01,520 --> 00:18:05,120
is pretty responsive if you find

00:18:02,880 --> 00:18:06,880
anything weird

00:18:05,120 --> 00:18:08,480
and finally here's how you can try them

00:18:06,880 --> 00:18:09,039
out and i hope you do so all three

00:18:08,480 --> 00:18:11,280
products

00:18:09,039 --> 00:18:12,799
have marketing sites and it can give you

00:18:11,280 --> 00:18:14,400
an overview of some of the features and

00:18:12,799 --> 00:18:15,760
let you know how to check out their apps

00:18:14,400 --> 00:18:17,840
each of these also have their own

00:18:15,760 --> 00:18:19,280
versions of release notes so you can see

00:18:17,840 --> 00:18:20,480
what's been shipped recently either

00:18:19,280 --> 00:18:23,280
through the marketing site or

00:18:20,480 --> 00:18:24,400
then from mobile on the app itself if

00:18:23,280 --> 00:18:26,799
you have feedback

00:18:24,400 --> 00:18:28,080
you can open an issue directly into cli

00:18:26,799 --> 00:18:31,200
or desktops open source

00:18:28,080 --> 00:18:33,039
projects and you can always email mobile

00:18:31,200 --> 00:18:35,280
feedback at github.com for mobile to

00:18:33,039 --> 00:18:36,960
share what you think cli also has a

00:18:35,280 --> 00:18:38,000
feedback survey that's linked on help

00:18:36,960 --> 00:18:41,120
it's help docs

00:18:38,000 --> 00:18:42,880
um it's in this help command and on the

00:18:41,120 --> 00:18:43,120
repositories need me which you can fill

00:18:42,880 --> 00:18:46,640
out

00:18:43,120 --> 00:18:48,160
and uh use what you need so keep in mind

00:18:46,640 --> 00:18:49,280
that these are hard working people and

00:18:48,160 --> 00:18:49,840
they're just doing the best that they

00:18:49,280 --> 00:18:52,320
can

00:18:49,840 --> 00:18:54,160
so the best way to help them out is to

00:18:52,320 --> 00:18:56,240
share context on what you need

00:18:54,160 --> 00:18:58,160
how bad the pain is and like what

00:18:56,240 --> 00:18:58,799
actually is affecting your workflow or

00:18:58,160 --> 00:19:01,120
what you might

00:18:58,799 --> 00:19:02,640
want to use it for that the more

00:19:01,120 --> 00:19:04,720
information that you provide to us

00:19:02,640 --> 00:19:07,200
the better we can make better the better

00:19:04,720 --> 00:19:09,280
decisions that we can make

00:19:07,200 --> 00:19:10,799
all right we did it we just went through

00:19:09,280 --> 00:19:12,559
a bunch of ways that you can change up

00:19:10,799 --> 00:19:14,559
your workflows using github desktop

00:19:12,559 --> 00:19:16,880
github cli and github mobile which is

00:19:14,559 --> 00:19:18,320
approximately 50 alternatives

00:19:16,880 --> 00:19:19,760
i don't expect you to have all these

00:19:18,320 --> 00:19:20,799
memorized but you can always refer back

00:19:19,760 --> 00:19:22,720
to this diagram

00:19:20,799 --> 00:19:24,480
to see what you might want to try out

00:19:22,720 --> 00:19:25,360
these tools are meant to extend and

00:19:24,480 --> 00:19:27,440
augment your

00:19:25,360 --> 00:19:29,200
experience nothing more and think about

00:19:27,440 --> 00:19:30,480
it this way how many times have you

00:19:29,200 --> 00:19:32,720
tabbed over your browser

00:19:30,480 --> 00:19:33,760
only to get distracted by all the tabs

00:19:32,720 --> 00:19:35,039
the email counter

00:19:33,760 --> 00:19:37,520
the slack bubbles the twitter

00:19:35,039 --> 00:19:38,240
notifications if i want to stay focused

00:19:37,520 --> 00:19:40,240
i'm going to need an

00:19:38,240 --> 00:19:41,760
army of bodyguards guiding me to the

00:19:40,240 --> 00:19:44,000
back door of my next page

00:19:41,760 --> 00:19:45,679
because i absolutely will get distracted

00:19:44,000 --> 00:19:47,039
a lot of these alternatives do that for

00:19:45,679 --> 00:19:48,559
you

00:19:47,039 --> 00:19:50,240
this is where i leave you but i'm not

00:19:48,559 --> 00:19:52,320
gone forever i'm still here for q

00:19:50,240 --> 00:19:53,679
a and github satellite has a discussion

00:19:52,320 --> 00:19:54,960
open for each session today

00:19:53,679 --> 00:19:56,799
so you can check mine out and ask

00:19:54,960 --> 00:19:58,160
questions about any of the applications

00:19:56,799 --> 00:19:59,919
and my teammates are standing by to

00:19:58,160 --> 00:20:01,840
respond to you directly

00:19:59,919 --> 00:20:04,559
that's all i'm ready for questions what

00:20:01,840 --> 00:20:04,559
do you have for me

00:20:05,200 --> 00:20:12,080
whoa that was an amazing amazing talk

00:20:08,960 --> 00:20:12,799
it wasn't 50 000 different types it was

00:20:12,080 --> 00:20:15,600
fine it was

00:20:12,799 --> 00:20:16,799
accounted get github.com get on desktop

00:20:15,600 --> 00:20:20,000
get up cli

00:20:16,799 --> 00:20:22,559
get up model i just mobile i just love

00:20:20,000 --> 00:20:24,080
it i'm excited i'm so excited and i the

00:20:22,559 --> 00:20:26,000
thing that blew my mind

00:20:24,080 --> 00:20:27,760
is the fact that submitting a pull

00:20:26,000 --> 00:20:29,039
request will create a fork for you in a

00:20:27,760 --> 00:20:32,720
repo if you don't have

00:20:29,039 --> 00:20:36,320
push access get out of town that is such

00:20:32,720 --> 00:20:37,520
an awesome feature uh but before i go

00:20:36,320 --> 00:20:39,440
off

00:20:37,520 --> 00:20:41,039
people have been asking questions so i

00:20:39,440 --> 00:20:43,280
don't want to chew up all the time

00:20:41,039 --> 00:20:44,559
fan girl in this set of products i want

00:20:43,280 --> 00:20:45,120
to make sure we can get straight to the

00:20:44,559 --> 00:20:46,799
questions

00:20:45,120 --> 00:20:49,200
and let chad come in and ask his own

00:20:46,799 --> 00:20:50,080
questions as well so github user pluma

00:20:49,200 --> 00:20:53,799
says

00:20:50,080 --> 00:20:56,960
dozen will github for windows work with

00:20:53,799 --> 00:20:59,120
wsl2 they want to know

00:20:56,960 --> 00:21:01,440
they are will github for windows work

00:20:59,120 --> 00:21:02,960
with wsl

00:21:01,440 --> 00:21:04,480
i think that that's a great question for

00:21:02,960 --> 00:21:05,840
our discussion so you can get the answer

00:21:04,480 --> 00:21:08,640
directly from the developers

00:21:05,840 --> 00:21:09,840
um so i'll make sure i'll make sure to

00:21:08,640 --> 00:21:12,400
check into the discussion make sure you

00:21:09,840 --> 00:21:17,280
get your answer directly there

00:21:12,400 --> 00:21:18,960
yeah cool yeah yeah so i'm a vim user so

00:21:17,280 --> 00:21:19,600
and i'm really tired of tabs in the

00:21:18,960 --> 00:21:21,520
browser

00:21:19,600 --> 00:21:23,200
so i can really really really see myself

00:21:21,520 --> 00:21:24,880
using a lot of cli

00:21:23,200 --> 00:21:26,480
um the cats out of the bags that i heard

00:21:24,880 --> 00:21:28,080
a preview of your talk yesterday

00:21:26,480 --> 00:21:29,679
you got me really jazzed so i've been

00:21:28,080 --> 00:21:32,400
trying out get up desktop

00:21:29,679 --> 00:21:34,240
cli and mobile all morning one thing i

00:21:32,400 --> 00:21:34,880
was hoping for on mobile that i didn't

00:21:34,240 --> 00:21:36,960
find

00:21:34,880 --> 00:21:39,360
was getting up projects is that on the

00:21:36,960 --> 00:21:39,360
roadmap

00:21:39,600 --> 00:21:44,000
yes so by yes i mean yes i'm really

00:21:42,720 --> 00:21:45,840
excited to answer your question

00:21:44,000 --> 00:21:47,919
so let me uh try and explain where we

00:21:45,840 --> 00:21:47,919
are

00:21:48,080 --> 00:21:52,880
so so with cli we've kind of started

00:21:51,280 --> 00:21:54,559
with these main workflows that everyone

00:21:52,880 --> 00:21:56,320
works in and so we're really interested

00:21:54,559 --> 00:21:57,280
in getting feedback as to what you might

00:21:56,320 --> 00:21:59,600
use them for

00:21:57,280 --> 00:22:01,120
and like particularly at what part in

00:21:59,600 --> 00:22:02,559
your workflow are you looking to look at

00:22:01,120 --> 00:22:03,200
your project and what do you want to do

00:22:02,559 --> 00:22:05,919
with it

00:22:03,200 --> 00:22:07,760
for a desktop we've kind of started new

00:22:05,919 --> 00:22:10,400
integrations within the last year and

00:22:07,760 --> 00:22:12,000
that's prs and issues so we kind of have

00:22:10,400 --> 00:22:13,840
this building of what your end-to-end

00:22:12,000 --> 00:22:15,039
workflow might be and so we're kind of

00:22:13,840 --> 00:22:17,039
figuring out how we might want to

00:22:15,039 --> 00:22:19,520
integrate projects in because as we said

00:22:17,039 --> 00:22:21,120
before when you are on a gui we can

00:22:19,520 --> 00:22:22,400
easily direct you to another gui as long

00:22:21,120 --> 00:22:23,600
as we direct you to the right

00:22:22,400 --> 00:22:25,039
place so it's something that we're

00:22:23,600 --> 00:22:26,559
thinking about but we want to be really

00:22:25,039 --> 00:22:28,080
conscientious about how to do it

00:22:26,559 --> 00:22:29,760
and for mobile this is something that

00:22:28,080 --> 00:22:31,360
they're interested in in exploring and

00:22:29,760 --> 00:22:32,880
so one of the best ways to give your

00:22:31,360 --> 00:22:35,520
thoughts is to go to the

00:22:32,880 --> 00:22:37,200
email address that i provided um and or

00:22:35,520 --> 00:22:38,320
to talk about it in discussions and kind

00:22:37,200 --> 00:22:40,640
of give the feedback and what you're

00:22:38,320 --> 00:22:44,480
looking for

00:22:40,640 --> 00:22:47,520
cool so so github user

00:22:44,480 --> 00:22:49,919
shiv shivay lamba has a question

00:22:47,520 --> 00:22:52,640
can github code spaces be accessed from

00:22:49,919 --> 00:22:54,880
github desktop

00:22:52,640 --> 00:22:56,720
so right now since codespaces is at the

00:22:54,880 --> 00:22:58,080
beginning stages we don't have direct

00:22:56,720 --> 00:22:59,919
integration but this is actually a

00:22:58,080 --> 00:23:01,280
conversation we're having very actively

00:22:59,919 --> 00:23:03,120
we're interested in figuring out how we

00:23:01,280 --> 00:23:03,919
can connect the two especially in a

00:23:03,120 --> 00:23:05,679
world where

00:23:03,919 --> 00:23:06,960
you are basically on the web and you

00:23:05,679 --> 00:23:08,640
have this environment if you ever need

00:23:06,960 --> 00:23:10,320
to go locally we want to be able

00:23:08,640 --> 00:23:10,799
especially if there's demand so let us

00:23:10,320 --> 00:23:12,080
know

00:23:10,799 --> 00:23:13,039
we want to be able to provide that for

00:23:12,080 --> 00:23:15,760
you if this is something that you're

00:23:13,039 --> 00:23:15,760
interested in doing

00:23:16,720 --> 00:23:20,640
cool so as i mentioned i anticipate i'd

00:23:19,360 --> 00:23:24,240
spend most of my time

00:23:20,640 --> 00:23:26,000
in the cli more than more than desktop

00:23:24,240 --> 00:23:27,520
because i don't write that much code but

00:23:26,000 --> 00:23:28,880
i'm still thinking about how and when to

00:23:27,520 --> 00:23:31,200
use what so

00:23:28,880 --> 00:23:32,400
as you're uh an engineering manager and

00:23:31,200 --> 00:23:33,919
i'm an engineering manager

00:23:32,400 --> 00:23:36,720
what kind of workflow do you recommend

00:23:33,919 --> 00:23:39,039
for managers

00:23:36,720 --> 00:23:40,799
all right so for the most part i kind of

00:23:39,039 --> 00:23:42,960
joked about it earlier i do most of my

00:23:40,799 --> 00:23:44,880
work on.com because i'm editing copy or

00:23:42,960 --> 00:23:46,720
i'm doing a readme or release notes

00:23:44,880 --> 00:23:48,400
um but there are a few cases where i

00:23:46,720 --> 00:23:49,440
might want to test something locally

00:23:48,400 --> 00:23:51,919
in the case that i want to test

00:23:49,440 --> 00:23:53,760
something locally um

00:23:51,919 --> 00:23:55,440
or if especially if my reviews requested

00:23:53,760 --> 00:23:55,760
there's kind of like this way to check

00:23:55,440 --> 00:23:57,600
out

00:23:55,760 --> 00:23:59,679
you can check it out on cli or desktop

00:23:57,600 --> 00:24:00,799
so i like to directly get directed to

00:23:59,679 --> 00:24:03,279
cli or desktop

00:24:00,799 --> 00:24:05,120
and um if i know exactly what i want to

00:24:03,279 --> 00:24:06,559
do chances are i have to build her i

00:24:05,120 --> 00:24:07,919
have to run it in my terminal so that's

00:24:06,559 --> 00:24:10,880
where i start using cli

00:24:07,919 --> 00:24:11,440
so i can use pr status at that point and

00:24:10,880 --> 00:24:13,520
i can

00:24:11,440 --> 00:24:14,960
basically use all the tools that i need

00:24:13,520 --> 00:24:17,919
to to make sure that i provide my

00:24:14,960 --> 00:24:20,080
my feedback if i'm looking into a new

00:24:17,919 --> 00:24:22,159
repository um brand new

00:24:20,080 --> 00:24:23,360
because as a manager um and especially

00:24:22,159 --> 00:24:25,120
at github we manage

00:24:23,360 --> 00:24:26,880
we have like all of our work on github

00:24:25,120 --> 00:24:28,880
and so i'm going through about like

00:24:26,880 --> 00:24:31,200
30 repositories i do all of that

00:24:28,880 --> 00:24:34,000
management on github desktop

00:24:31,200 --> 00:24:35,600
but finally like i honestly i'm on the

00:24:34,000 --> 00:24:37,440
go a lot or i might be going back and

00:24:35,600 --> 00:24:39,039
forth and so when it comes to figuring

00:24:37,440 --> 00:24:39,440
out a is there anything that's blocking

00:24:39,039 --> 00:24:41,200
me

00:24:39,440 --> 00:24:42,640
because i have all these repositories

00:24:41,200 --> 00:24:44,480
that i have to go in between

00:24:42,640 --> 00:24:45,760
mobile is my go-to to kind of see is if

00:24:44,480 --> 00:24:47,440
there's anything blocking

00:24:45,760 --> 00:24:49,919
and then when i come to my computer i'm

00:24:47,440 --> 00:24:50,559
like focused and i can use uh cli to do

00:24:49,919 --> 00:24:52,400
the builds

00:24:50,559 --> 00:24:54,240
or a desktop to kind of work through my

00:24:52,400 --> 00:24:55,720
repositories and do any sort of commits

00:24:54,240 --> 00:24:58,840
and see like my little pretty diff

00:24:55,720 --> 00:25:00,559
[Music]

00:24:58,840 --> 00:25:02,880
cool i

00:25:00,559 --> 00:25:03,840
have a question also something else i've

00:25:02,880 --> 00:25:06,080
been thinking about

00:25:03,840 --> 00:25:07,279
is how do all of them because there's a

00:25:06,080 --> 00:25:08,720
lot of them how

00:25:07,279 --> 00:25:11,520
how are we thinking about integrating

00:25:08,720 --> 00:25:14,000
all of them together

00:25:11,520 --> 00:25:14,720
like the workflow is specific right now

00:25:14,000 --> 00:25:16,640
yeah like

00:25:14,720 --> 00:25:18,880
basically a world where you could bounce

00:25:16,640 --> 00:25:19,520
between github desktop and github cli

00:25:18,880 --> 00:25:21,200
etc

00:25:19,520 --> 00:25:22,559
and like to mobile i think like it's a

00:25:21,200 --> 00:25:24,240
little harder to imagine a world where

00:25:22,559 --> 00:25:27,200
you might bump from mobile to

00:25:24,240 --> 00:25:28,720
um to cli or desktop one of the best

00:25:27,200 --> 00:25:30,640
parts about all of this is that all of

00:25:28,720 --> 00:25:32,480
your information is being synced right

00:25:30,640 --> 00:25:34,159
so the minute you push up your work from

00:25:32,480 --> 00:25:35,919
cli and desktop it goes to

00:25:34,159 --> 00:25:37,360
com and then that means that information

00:25:35,919 --> 00:25:39,520
synced with your mobile account

00:25:37,360 --> 00:25:41,200
so that is one of the ways we use is

00:25:39,520 --> 00:25:42,880
kind of like to sync through github and

00:25:41,200 --> 00:25:43,840
that's like i kind of showed you that if

00:25:42,880 --> 00:25:46,000
you wanted to

00:25:43,840 --> 00:25:46,960
check out your um your pr you can kind

00:25:46,000 --> 00:25:49,200
of go directly from

00:25:46,960 --> 00:25:50,559
com to your pr and so those are kind of

00:25:49,200 --> 00:25:52,159
like one of some of the ways that we've

00:25:50,559 --> 00:25:54,240
recently worked in and if you remember

00:25:52,159 --> 00:25:55,600
the code spaces tutorial this morning

00:25:54,240 --> 00:25:57,279
um you could there's also this code

00:25:55,600 --> 00:25:59,279
button and so it allows you to check out

00:25:57,279 --> 00:26:00,480
you have desktop that way for example

00:25:59,279 --> 00:26:02,159
now between github

00:26:00,480 --> 00:26:04,320
and cli we don't have a direct

00:26:02,159 --> 00:26:05,840
integration yet but if this is

00:26:04,320 --> 00:26:06,799
something that you're interested in i

00:26:05,840 --> 00:26:07,440
know i'm going to sound like a broken

00:26:06,799 --> 00:26:10,240
record but

00:26:07,440 --> 00:26:11,760
i really do mean it i want to know okay

00:26:10,240 --> 00:26:13,679
what is the point that you're interested

00:26:11,760 --> 00:26:15,039
in going from desktop to cli so that we

00:26:13,679 --> 00:26:17,039
make sure that we build the right thing

00:26:15,039 --> 00:26:18,400
and that's one of the best parts about

00:26:17,039 --> 00:26:19,760
being in an open source world

00:26:18,400 --> 00:26:21,120
is that i can ask you that question and

00:26:19,760 --> 00:26:22,320
then you can actually directly answer

00:26:21,120 --> 00:26:25,679
that question at any time

00:26:22,320 --> 00:26:28,240
at your leisure so

00:26:25,679 --> 00:26:29,440
seven questions go ahead titu yeah this

00:26:28,240 --> 00:26:31,120
is a quick one um so what does it look

00:26:29,440 --> 00:26:32,000
like for someone to contribute to the

00:26:31,120 --> 00:26:35,120
open source

00:26:32,000 --> 00:26:35,120
um projects we've got

00:26:35,200 --> 00:26:38,720
right so for there's two and so with

00:26:37,760 --> 00:26:40,799
github cli

00:26:38,720 --> 00:26:43,200
and github desktop what you'll want to

00:26:40,799 --> 00:26:44,159
do is if you have a bug or if you have a

00:26:43,200 --> 00:26:45,840
feature request

00:26:44,159 --> 00:26:47,279
the best way to get started is to go

00:26:45,840 --> 00:26:49,520
ahead open an issue

00:26:47,279 --> 00:26:50,799
um you'll usually see people we have

00:26:49,520 --> 00:26:52,320
like a commitment to make sure that we

00:26:50,799 --> 00:26:53,279
respond to everyone within a week but

00:26:52,320 --> 00:26:55,919
you'll see people

00:26:53,279 --> 00:26:57,600
respond a lot faster we have great time

00:26:55,919 --> 00:26:58,960
zone coverage and so there's really

00:26:57,600 --> 00:26:59,520
people who are interested in hearing

00:26:58,960 --> 00:27:00,799
more

00:26:59,520 --> 00:27:02,400
you might hear from anyone you might

00:27:00,799 --> 00:27:03,840
hear from our qa you might hear from our

00:27:02,400 --> 00:27:05,760
designer you might hear from our product

00:27:03,840 --> 00:27:07,039
manager or the developers themselves

00:27:05,760 --> 00:27:08,559
and so that's the best way to get

00:27:07,039 --> 00:27:09,760
started if you have an id of something

00:27:08,559 --> 00:27:11,520
you really want to implement

00:27:09,760 --> 00:27:13,360
going into issues helps us make sure

00:27:11,520 --> 00:27:15,360
that we can kind of

00:27:13,360 --> 00:27:16,960
solve the problem correctly together and

00:27:15,360 --> 00:27:18,399
then if you want to open a pull request

00:27:16,960 --> 00:27:19,919
you can kind of request that and then

00:27:18,399 --> 00:27:20,399
we'll even help you get the pull request

00:27:19,919 --> 00:27:21,840
over

00:27:20,399 --> 00:27:22,880
the line especially if it's something

00:27:21,840 --> 00:27:25,600
that we've all agreed that we want to

00:27:22,880 --> 00:27:25,600
work on together

00:27:26,080 --> 00:27:30,000
thank you so much neha thank you

00:27:30,960 --> 00:27:35,840
thanks for having me

00:27:37,039 --> 00:27:39,120

YouTube URL: https://www.youtube.com/watch?v=FOLCaZ9CbzA


