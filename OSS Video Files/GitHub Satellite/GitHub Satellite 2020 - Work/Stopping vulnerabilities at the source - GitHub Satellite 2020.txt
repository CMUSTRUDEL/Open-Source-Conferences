Title: Stopping vulnerabilities at the source - GitHub Satellite 2020
Publication date: 2020-05-07
Playlist: GitHub Satellite 2020 - Work
Description: 
	Presented by Grey Baker and Pavel Avgustinov, GitHub

Wouldn’t it be better if we could stop vulnerabilities from ever getting merged into our code base? By building security into our core workflows on GitHub and sharing the amazing knowledge of the combined global security community, we’re aiming to drastically reduce the number of vulnerabilities that get through your pull requests. In this session, we'll go deep into the CodeQL queries that help us find vulnerabilities across the source code, and how to create a query once you're aware of a new exploit, attack vector, or CVE. 

GitHub Satellite: A community connected by code

On May 6th, we threw a free virtual event featuring developers working together on the world’s software, announcements from the GitHub team, and inspiring performances by artists who code.

More information: https://githubsatellite.com
Schedule: https://githubsatellite.com/schedule/
Captions: 
	00:00:00,450 --> 00:00:04,110
let's hear from our friend mr. great

00:00:02,550 --> 00:00:06,089
Baker you heard from him in the keynote

00:00:04,110 --> 00:00:07,859
he's gonna come back and talk to us more

00:00:06,089 --> 00:00:08,370
about stopping vulnerabilities at the

00:00:07,859 --> 00:00:11,160
source

00:00:08,370 --> 00:00:13,320
we're also joining us is Pavel Augustine

00:00:11,160 --> 00:00:15,660
Oh breakfast that last night Pablo I

00:00:13,320 --> 00:00:17,310
love you his handle is p0 and always

00:00:15,660 --> 00:00:19,410
will be mocking zero but they're gonna

00:00:17,310 --> 00:00:21,359
come and talk to us about stopping

00:00:19,410 --> 00:00:23,220
vulnerabilities at the source and I am

00:00:21,359 --> 00:00:25,109
so excited to have more information

00:00:23,220 --> 00:00:27,830
about this wonderful tool take it away

00:00:25,109 --> 00:00:27,830
Pavel gray

00:00:34,220 --> 00:00:36,520
[Music]

00:00:36,260 --> 00:00:39,609
you

00:00:36,520 --> 00:00:39,609
[Music]

00:00:43,730 --> 00:00:48,239
Pavel and I here to talk to you about

00:00:46,109 --> 00:00:51,870
stopping vulnerabilities at the source

00:00:48,239 --> 00:00:54,030
so you've got me gray and PM for

00:00:51,870 --> 00:00:55,440
advanced security and I'm delighted to

00:00:54,030 --> 00:00:57,030
have Pavel here he's a director of

00:00:55,440 --> 00:01:03,180
engineering at github and he's the

00:00:57,030 --> 00:01:06,119
co-creator of code QL hi everyone so

00:01:03,180 --> 00:01:08,190
we're gonna be talking me through the

00:01:06,119 --> 00:01:09,899
state of security to start with and then

00:01:08,190 --> 00:01:12,210
I'm gonna talk to you about how code

00:01:09,899 --> 00:01:14,759
scanning works how it can embed natively

00:01:12,210 --> 00:01:16,740
into github for you and then Parvez

00:01:14,759 --> 00:01:18,840
gonna talk a bit more about the queries

00:01:16,740 --> 00:01:21,990
underneath it and how code ql the

00:01:18,840 --> 00:01:23,970
underlying engine works so let's get

00:01:21,990 --> 00:01:27,960
started I'll power through this security

00:01:23,970 --> 00:01:32,039
stuff fast you saw net show this slide

00:01:27,960 --> 00:01:34,470
more coding is more problem this is such

00:01:32,039 --> 00:01:36,899
a stubborn link between lines of code

00:01:34,470 --> 00:01:40,020
written and security threats and what it

00:01:36,899 --> 00:01:41,549
says is we're not getting better we're

00:01:40,020 --> 00:01:44,069
not getting better at preventing

00:01:41,549 --> 00:01:46,319
security vulnerabilities from entering

00:01:44,069 --> 00:01:48,719
our applications and there were a bunch

00:01:46,319 --> 00:01:51,360
of reasons for that one of them is this

00:01:48,719 --> 00:01:55,020
security researchers are hopelessly

00:01:51,360 --> 00:01:58,200
outnumbered today for every security

00:01:55,020 --> 00:02:00,659
researcher they're around 570 developers

00:01:58,200 --> 00:02:03,930
what hope do security researchers have

00:02:00,659 --> 00:02:06,539
giving timely analysis to prevent

00:02:03,930 --> 00:02:10,829
vulnerabilities the best that we can do

00:02:06,539 --> 00:02:13,140
with that kind of ratio is reactive and

00:02:10,829 --> 00:02:16,230
then we hear a lot of talk about dev sec

00:02:13,140 --> 00:02:18,329
ops but in so many organizations this is

00:02:16,230 --> 00:02:22,019
still an aspiration rather than an

00:02:18,329 --> 00:02:24,900
achievement this graph shows you static

00:02:22,019 --> 00:02:26,850
analysis scans the frequency of them for

00:02:24,900 --> 00:02:28,600
folks that are running static analysis

00:02:26,850 --> 00:02:32,110
already

00:02:28,600 --> 00:02:34,150
and as you can see less than 10% of

00:02:32,110 --> 00:02:36,930
folks that are running security scans

00:02:34,150 --> 00:02:40,590
are doing so more than once a week and

00:02:36,930 --> 00:02:44,320
almost nobody is scanning every commit

00:02:40,590 --> 00:02:46,510
we haven't really embedded security into

00:02:44,320 --> 00:02:48,310
the developer workflow we have better

00:02:46,510 --> 00:02:50,530
processes for security teams better

00:02:48,310 --> 00:02:52,300
tooling but it's not being the

00:02:50,530 --> 00:02:53,410
responsibility of developers and when

00:02:52,300 --> 00:02:55,870
it's not the responsibility of

00:02:53,410 --> 00:02:57,550
developers it's not something where we

00:02:55,870 --> 00:03:00,100
can really prevent vulnerabilities

00:02:57,550 --> 00:03:02,260
before they enter our applications and

00:03:00,100 --> 00:03:04,780
don't forget this was for applications

00:03:02,260 --> 00:03:08,650
that are actually using static analysis

00:03:04,780 --> 00:03:11,350
that are doing security scans at all the

00:03:08,650 --> 00:03:13,120
vast majority of us don't have any kind

00:03:11,350 --> 00:03:17,920
of support mated security to link

00:03:13,120 --> 00:03:20,800
running on our applications so what do

00:03:17,920 --> 00:03:24,220
we do about it well we've built github

00:03:20,800 --> 00:03:27,490
code scanning to help and the idea is

00:03:24,220 --> 00:03:30,820
simple it's that we introduce security

00:03:27,490 --> 00:03:35,620
review as an automated process at the

00:03:30,820 --> 00:03:39,430
pull request this diagram shows the kind

00:03:35,620 --> 00:03:41,650
of age-old git flow where you branch off

00:03:39,430 --> 00:03:43,480
of master you start making some commits

00:03:41,650 --> 00:03:46,210
and then you submit a pull request and

00:03:43,480 --> 00:03:47,560
that pull request gets discussed there

00:03:46,210 --> 00:03:49,870
might be some motivations that are

00:03:47,560 --> 00:03:53,740
required more discussion but eventually

00:03:49,870 --> 00:03:57,210
it ends up back on master automated code

00:03:53,740 --> 00:04:00,800
scanning insert automated security

00:03:57,210 --> 00:04:03,290
review at the pull request time

00:04:00,800 --> 00:04:05,270
and in every commit that you're making

00:04:03,290 --> 00:04:06,440
after that pull request as well so that

00:04:05,270 --> 00:04:07,610
you can see whether or not any

00:04:06,440 --> 00:04:10,670
vulnerabilities you fit you've

00:04:07,610 --> 00:04:13,340
introduced have been fixed and it'll

00:04:10,670 --> 00:04:15,680
also allows you to run automated scans

00:04:13,340 --> 00:04:18,739
on your master branch on a periodic

00:04:15,680 --> 00:04:21,260
basis so that you know that even if it's

00:04:18,739 --> 00:04:24,020
not due to new code you're up to date

00:04:21,260 --> 00:04:26,090
with the latest scans all of like open

00:04:24,020 --> 00:04:27,620
source queries that are being created

00:04:26,090 --> 00:04:29,570
all the time you've got the latest

00:04:27,620 --> 00:04:32,090
security research running against your

00:04:29,570 --> 00:04:34,040
repository so I'm going to show you a

00:04:32,090 --> 00:04:35,990
demo of that in action if you watch the

00:04:34,040 --> 00:04:37,430
keynote you'll have seen some of this

00:04:35,990 --> 00:04:38,960
but I'm going to demo a completely

00:04:37,430 --> 00:04:40,880
different vulnerability here it's

00:04:38,960 --> 00:04:42,110
another case that code scanning can pick

00:04:40,880 --> 00:04:45,260
up and I'm going to talk you through

00:04:42,110 --> 00:04:50,060
some of the subtleties in the setup of

00:04:45,260 --> 00:04:52,490
code scanning so here we are this demo

00:04:50,060 --> 00:04:54,230
is based on concourse and I'm going to

00:04:52,490 --> 00:04:56,330
show just how easy it is to set up code

00:04:54,230 --> 00:04:59,510
scanning again I said before it's just

00:04:56,330 --> 00:05:02,060
for clicks so you scroll down click set

00:04:59,510 --> 00:05:04,760
up code scanning on your Reaper and then

00:05:02,060 --> 00:05:06,860
we'll set up we end but I do want to

00:05:04,760 --> 00:05:10,030
call out the partnerships that github

00:05:06,860 --> 00:05:13,100
has and how code scanning is extensible

00:05:10,030 --> 00:05:15,350
everything we build at github we try to

00:05:13,100 --> 00:05:17,360
build extensively we add api's for it

00:05:15,350 --> 00:05:20,060
and in this case we have the ability for

00:05:17,360 --> 00:05:22,010
partners to input into all of the

00:05:20,060 --> 00:05:25,160
interfaces that you're going to see with

00:05:22,010 --> 00:05:27,980
code scanning we have shift left and

00:05:25,160 --> 00:05:29,840
robocop integrations ready to go today

00:05:27,980 --> 00:05:32,860
but we also have integrations coming

00:05:29,840 --> 00:05:35,720
soon from solar source from ankle for

00:05:32,860 --> 00:05:37,850
container scanning and from a number of

00:05:35,720 --> 00:05:39,290
other companies and we have - the

00:05:37,850 --> 00:05:42,350
integrations in the marketplace as well

00:05:39,290 --> 00:05:46,340
from a wasp's at the most popular desk

00:05:42,350 --> 00:05:48,980
tool in the world ok let's click in to

00:05:46,340 --> 00:05:51,350
the code key well setup flow I saw

00:05:48,980 --> 00:05:53,840
through this in the keynote but because

00:05:51,350 --> 00:05:56,480
we're in actions we've got complete

00:05:53,840 --> 00:05:59,090
control over when code scanning runs and

00:05:56,480 --> 00:06:01,100
we've also got the ability to customize

00:05:59,090 --> 00:06:03,470
it now in most cases

00:06:01,100 --> 00:06:05,960
Kokoro will run straight out of the box

00:06:03,470 --> 00:06:09,020
with no customization required but if

00:06:05,960 --> 00:06:12,620
you're using a built language like Java

00:06:09,020 --> 00:06:14,660
or perhaps C++ or C you might need to

00:06:12,620 --> 00:06:16,670
customize the build steps in order

00:06:14,660 --> 00:06:19,070
to get code scanning working it's

00:06:16,670 --> 00:06:20,480
nothing to argument arduous it's exactly

00:06:19,070 --> 00:06:22,430
the same kind of customization you'd

00:06:20,480 --> 00:06:24,770
make to get your CI running and because

00:06:22,430 --> 00:06:27,080
we're in actions you can make all those

00:06:24,770 --> 00:06:29,480
changes straightforwardly and you can

00:06:27,080 --> 00:06:35,170
see here code scanning supports go

00:06:29,480 --> 00:06:37,220
JavaScript c-sharp Python C C++ and Java

00:06:35,170 --> 00:06:40,120
okay let's get this committed and

00:06:37,220 --> 00:06:40,120
started running

00:06:41,789 --> 00:06:47,289
it's that easy and again code scanning

00:06:44,830 --> 00:06:48,910
is now me running on every push and on a

00:06:47,289 --> 00:06:50,919
schedule on this week and if I click

00:06:48,910 --> 00:06:53,020
across the actions tab there it is

00:06:50,919 --> 00:06:54,909
running its first scan we're not gonna

00:06:53,020 --> 00:06:56,319
wait for that we don't have time so

00:06:54,909 --> 00:06:59,039
instead I'm gonna show you the results

00:06:56,319 --> 00:07:00,909
once it's runs this is the same repo

00:06:59,039 --> 00:07:03,009
these would just run a little bit

00:07:00,909 --> 00:07:04,599
earlier and you can see the analysis ran

00:07:03,009 --> 00:07:07,720
took eight minutes in this case this is

00:07:04,599 --> 00:07:11,139
a big reaper and hounds three results

00:07:07,720 --> 00:07:13,539
because this is a fork but an old fork

00:07:11,139 --> 00:07:16,900
of Concours and it's a vulnerable

00:07:13,539 --> 00:07:21,250
version Concours had a vulnerability in

00:07:16,900 --> 00:07:24,729
2019 that allowed for potentially well

00:07:21,250 --> 00:07:26,949
it allowed you to inject data into the

00:07:24,729 --> 00:07:29,860
database so this is an SQL injection

00:07:26,949 --> 00:07:34,210
vulnerability and it had that because it

00:07:29,860 --> 00:07:37,120
had unsafe quoting so if you would have

00:07:34,210 --> 00:07:39,099
input data and cocci well has picked up

00:07:37,120 --> 00:07:40,659
because this is Jason that's getting

00:07:39,099 --> 00:07:44,680
Marshall that this is almost certainly a

00:07:40,659 --> 00:07:47,409
user input if any of that had a single

00:07:44,680 --> 00:07:50,130
quote in it then that could be used to

00:07:47,409 --> 00:07:50,130
escape

00:07:50,510 --> 00:07:57,590
the closing quotes in this database

00:07:54,830 --> 00:07:59,660
command and that's obviously extremely

00:07:57,590 --> 00:08:00,950
problematic if you can escape a database

00:07:59,660 --> 00:08:02,450
command you can do some sorts of

00:08:00,950 --> 00:08:04,790
nefarious things like dropping the date

00:08:02,450 --> 00:08:06,890
place it's really bad so the team

00:08:04,790 --> 00:08:09,380
responded to this quickly once it was

00:08:06,890 --> 00:08:11,750
disclosed they patched it it was issued

00:08:09,380 --> 00:08:13,220
a CVA you know the majority of folks are

00:08:11,750 --> 00:08:15,230
you know going to be running a safe

00:08:13,220 --> 00:08:18,110
version particularly if you've got any

00:08:15,230 --> 00:08:20,060
of github z-- supply chain to learning

00:08:18,110 --> 00:08:21,920
such as dependable not automated

00:08:20,060 --> 00:08:24,560
security fixes running you'll get those

00:08:21,920 --> 00:08:26,780
fixes and be able to react very fast but

00:08:24,560 --> 00:08:28,400
with code canning and code QL they could

00:08:26,780 --> 00:08:30,080
have prevented this from ever being

00:08:28,400 --> 00:08:32,320
introduced if those tools have been

00:08:30,080 --> 00:08:35,270
available

00:08:32,320 --> 00:08:38,300
now I want to talk to you about the flow

00:08:35,270 --> 00:08:41,570
in the pool request when something isn't

00:08:38,300 --> 00:08:45,050
a vulnerability every security scanning

00:08:41,570 --> 00:08:48,080
tool has false positives as well as true

00:08:45,050 --> 00:08:49,520
positives we're incredibly proud of the

00:08:48,080 --> 00:08:55,340
true positive rate on Kokua

00:08:49,520 --> 00:08:57,260
in fact we see less than 30% of the

00:08:55,340 --> 00:08:59,600
vulnerabilities that we flag are ever

00:08:57,260 --> 00:09:03,140
marked as false positives the other 70%

00:08:59,600 --> 00:09:05,630
get addressed in pull requests but if

00:09:03,140 --> 00:09:07,610
you need to flag something say it's a

00:09:05,630 --> 00:09:09,950
vulnerability but it's just in your test

00:09:07,610 --> 00:09:12,290
code rather than in your production code

00:09:09,950 --> 00:09:13,700
it's straightforward to do so code

00:09:12,290 --> 00:09:17,540
scanning is never going to get in your

00:09:13,700 --> 00:09:21,470
way all you do is hit the pros and say

00:09:17,540 --> 00:09:23,720
used in Texas and as you'll see this

00:09:21,470 --> 00:09:26,420
pull request which had a broken bill

00:09:23,720 --> 00:09:30,320
before now has poked you well passing

00:09:26,420 --> 00:09:32,990
and this would be free too much if

00:09:30,320 --> 00:09:36,080
you're on a security team you'll want to

00:09:32,990 --> 00:09:39,200
see this because when we've marked that

00:09:36,080 --> 00:09:42,260
we haven't removed it in any way and if

00:09:39,200 --> 00:09:45,680
I click into that I can see an audit

00:09:42,260 --> 00:09:49,310
trail for this which shows that I chose

00:09:45,680 --> 00:09:54,050
to close this as used in tests 22

00:09:49,310 --> 00:09:56,240
seconds ago the idea is to make it easy

00:09:54,050 --> 00:09:59,300
for developers to get what they need

00:09:56,240 --> 00:10:01,730
done and for those that are cutting code

00:09:59,300 --> 00:10:03,770
every day to be that first line of

00:10:01,730 --> 00:10:05,480
defense but for there'd always be an

00:10:03,770 --> 00:10:08,450
audit trail which be straightforward for

00:10:05,480 --> 00:10:10,730
you as a security researcher to make

00:10:08,450 --> 00:10:12,440
sure that your tooling is being used the

00:10:10,730 --> 00:10:14,510
way it should and we're looking to

00:10:12,440 --> 00:10:16,400
introduce new policies around but would

00:10:14,510 --> 00:10:18,350
mean only a security researcher can mark

00:10:16,400 --> 00:10:21,760
something else as a false positive if

00:10:18,350 --> 00:10:21,760
you want to have that set up

00:10:23,680 --> 00:10:29,750
okay I showed you a vulnerability there

00:10:27,260 --> 00:10:32,750
a real one in concourse that was patched

00:10:29,750 --> 00:10:35,030
in 2019 but I could have shown you any

00:10:32,750 --> 00:10:37,160
number of other demos which will some of

00:10:35,030 --> 00:10:40,910
these in the keynote but they were even

00:10:37,160 --> 00:10:43,610
to list on slide all of these are

00:10:40,910 --> 00:10:46,150
serious all of these were fixed the

00:10:43,610 --> 00:10:48,980
maintainer for them did a fantastic job

00:10:46,150 --> 00:10:50,810
but with Coke ul and with code scanning

00:10:48,980 --> 00:10:52,940
they could have been prevented entirely

00:10:50,810 --> 00:10:54,830
and I hope is that we're going to reduce

00:10:52,940 --> 00:10:56,330
the number of CVS that we're seeing

00:10:54,830 --> 00:10:58,790
because more of these things are going

00:10:56,330 --> 00:11:00,290
to be caught in pull requests and before

00:10:58,790 --> 00:11:03,800
they ever hit master and certainly

00:11:00,290 --> 00:11:06,560
before they released I also talked a

00:11:03,800 --> 00:11:08,570
little bit about the co QL queries one

00:11:06,560 --> 00:11:11,420
of super powers of coke ul is that those

00:11:08,570 --> 00:11:13,280
queries are open source that allows

00:11:11,420 --> 00:11:15,830
contributors from the world's leading

00:11:13,280 --> 00:11:18,830
security teams and independent security

00:11:15,830 --> 00:11:20,570
researchers to be contributing to us the

00:11:18,830 --> 00:11:22,730
sum total of our knowledge of

00:11:20,570 --> 00:11:24,980
vulnerabilities and protecting the

00:11:22,730 --> 00:11:27,080
world's open source it also allows an

00:11:24,980 --> 00:11:29,300
iterative approach to these queries

00:11:27,080 --> 00:11:32,690
where false positives can be refined out

00:11:29,300 --> 00:11:35,270
and any true pod the mist can be added

00:11:32,690 --> 00:11:38,150
in and to talk to you more about that

00:11:35,270 --> 00:11:41,060
process of writing code QL and refining

00:11:38,150 --> 00:11:42,650
it we've got parvo as a co-creator of

00:11:41,060 --> 00:11:44,690
coqui well this gonna be a bit like

00:11:42,650 --> 00:11:47,020
learning guitar from Jimi Hendrix but

00:11:44,690 --> 00:11:50,710
Pavel's promised me he's gonna go slow

00:11:47,020 --> 00:11:50,710
Pawel over to you

00:11:51,569 --> 00:11:56,639
thanks very much great that's quite the

00:11:54,220 --> 00:11:59,860
intro that's you that you gave me there

00:11:56,639 --> 00:12:01,329
great presentation on the on the code

00:11:59,860 --> 00:12:04,119
scanning side and what we're trying to

00:12:01,329 --> 00:12:06,009
do with building this all into the

00:12:04,119 --> 00:12:08,439
developer workflow what I thought

00:12:06,009 --> 00:12:10,869
I would do it show you a little bit

00:12:08,439 --> 00:12:13,720
behind the scenes how do we actually get

00:12:10,869 --> 00:12:15,879
some of these vulnerabilities at ported

00:12:13,720 --> 00:12:17,470
best fun how do we find them what's the

00:12:15,879 --> 00:12:19,749
security researchers workflow rather

00:12:17,470 --> 00:12:22,629
than a developers so I'm going to base

00:12:19,749 --> 00:12:25,059
this on the Express project which

00:12:22,629 --> 00:12:27,970
as you can see is an admin interface for

00:12:25,059 --> 00:12:32,920
MongoDB it's built on top of node.js and

00:12:27,970 --> 00:12:36,579
Express with code QL the general idea is

00:12:32,920 --> 00:12:38,379
that we treat the source code as data we

00:12:36,579 --> 00:12:42,069
allow you to write arbitrary queries

00:12:38,379 --> 00:12:44,589
over it and there is a large number of

00:12:42,069 --> 00:12:47,769
free packaged analysis building blocks

00:12:44,589 --> 00:12:49,629
that you can combine and use together in

00:12:47,769 --> 00:12:53,170
order to quickly express what you're

00:12:49,629 --> 00:12:56,170
interested in so here I am in Visual

00:12:53,170 --> 00:12:57,910
Studio code as as we said before this is

00:12:56,170 --> 00:13:00,879
everything is live so please bear with

00:12:57,910 --> 00:13:03,549
me if something breaks I floated a

00:13:00,879 --> 00:13:06,069
database representing Express now

00:13:03,549 --> 00:13:08,769
if I'm just starting to look at it one

00:13:06,069 --> 00:13:10,449
of the things I would commonly focus on

00:13:08,769 --> 00:13:13,509
is how the application deals with

00:13:10,449 --> 00:13:16,990
network data and we saw on the github

00:13:13,509 --> 00:13:19,569
repo page but Express uses the

00:13:16,990 --> 00:13:21,850
Express framework so as a starting point

00:13:19,569 --> 00:13:25,509
we might actually write a query that

00:13:21,850 --> 00:13:28,779
uses the code ql library models for

00:13:25,509 --> 00:13:31,749
express to show us all of the route

00:13:28,779 --> 00:13:34,600
handlers that are defined in the code

00:13:31,749 --> 00:13:36,579
base now a root end ler is essentially a

00:13:34,600 --> 00:13:39,040
JavaScript function which is registered

00:13:36,579 --> 00:13:41,139
with the framework and we'll process

00:13:39,040 --> 00:13:43,869
Network data so let's take a look at

00:13:41,139 --> 00:13:47,410
some of the examples this is a fairly

00:13:43,869 --> 00:13:49,869
typical pattern we're registering with

00:13:47,410 --> 00:13:52,149
Express this function it takes the

00:13:49,869 --> 00:13:55,029
request object and the response object

00:13:52,149 --> 00:13:57,189
and a bunch of other parameters and data

00:13:55,029 --> 00:13:59,049
from the URL which is potentially

00:13:57,189 --> 00:14:01,629
controlled by a malicious attacker is

00:13:59,049 --> 00:14:03,650
presented to the JavaScript code for

00:14:01,629 --> 00:14:07,250
example like this

00:14:03,650 --> 00:14:09,770
dot query exposes the querystring of the

00:14:07,250 --> 00:14:11,690
URL and I might have been tricked into

00:14:09,770 --> 00:14:16,160
tricked into clicking a particular URL

00:14:11,690 --> 00:14:18,230
by an attacker so what can we do with

00:14:16,160 --> 00:14:20,570
all that I think the the most

00:14:18,230 --> 00:14:23,300
interesting question when we're looking

00:14:20,570 --> 00:14:25,400
at network data an application is where

00:14:23,300 --> 00:14:27,200
does it flow and how is it used what

00:14:25,400 --> 00:14:29,810
could an attacker do to subvert my

00:14:27,200 --> 00:14:35,420
expectations as the developer by

00:14:29,810 --> 00:14:37,820
providing especially crafted in the

00:14:35,420 --> 00:14:40,279
interest of time a little bit I'm going

00:14:37,820 --> 00:14:43,820
to literally go to other data flow cheat

00:14:40,279 --> 00:14:46,940
sheet which is one of the pages on the

00:14:43,820 --> 00:14:51,980
learning code qlae website and i'm going

00:14:46,940 --> 00:14:55,760
to copy this template query for doing

00:14:51,980 --> 00:14:59,029
taint tracking faith tracking is a

00:14:55,760 --> 00:15:01,339
common type of analysis where we want to

00:14:59,029 --> 00:15:06,170
explore how data propagates in an

00:15:01,339 --> 00:15:09,320
application and so here the full details

00:15:06,170 --> 00:15:10,910
aren't terribly important but what I do

00:15:09,320 --> 00:15:14,980
want to draw your attention to is that I

00:15:10,910 --> 00:15:17,330
simply have to fill in to essentially

00:15:14,980 --> 00:15:19,779
blank spaces in the templates the first

00:15:17,330 --> 00:15:22,430
one indicates what the sources of

00:15:19,779 --> 00:15:25,670
tainted data are for my particular

00:15:22,430 --> 00:15:27,500
analysis and the second will say what

00:15:25,670 --> 00:15:31,610
other syncs where do I want the tative

00:15:27,500 --> 00:15:33,290
data to not get now I already told you

00:15:31,610 --> 00:15:35,150
what my sources are going to be I'm

00:15:33,290 --> 00:15:38,240
looking for essentially a code that does

00:15:35,150 --> 00:15:40,220
something like this record query dot

00:15:38,240 --> 00:15:42,529
user would read the query property of

00:15:40,220 --> 00:15:45,110
the request object and then take the

00:15:42,529 --> 00:15:47,720
user parameter of the HTTP request how

00:15:45,110 --> 00:15:50,830
do we phrase this in code ql' well there

00:15:47,720 --> 00:15:55,130
are many ways inevitably but one example

00:15:50,830 --> 00:15:59,660
is that I can look for parameter nodes

00:15:55,130 --> 00:16:03,210
on which we read the property and the

00:15:59,660 --> 00:16:05,670
property that we read is called query

00:16:03,210 --> 00:16:09,420
I'm just going to make this window a

00:16:05,670 --> 00:16:11,670
little bit no well now that's for the

00:16:09,420 --> 00:16:14,220
sink this is kind of where a little bit

00:16:11,670 --> 00:16:16,950
of creativity comes into it depending on

00:16:14,220 --> 00:16:19,410
how we define this we might find places

00:16:16,950 --> 00:16:21,510
where the network data reaches a sequel

00:16:19,410 --> 00:16:23,430
query and allows the database compromise

00:16:21,510 --> 00:16:26,370
a sequel injection or we might find

00:16:23,430 --> 00:16:27,630
places where it reaches the HTML body of

00:16:26,370 --> 00:16:30,870
the output documents and give us

00:16:27,630 --> 00:16:32,760
cross-site scripting in exploration mode

00:16:30,870 --> 00:16:36,960
maybe I don't want to pin myself down

00:16:32,760 --> 00:16:39,030
already I want to kind of audit lots of

00:16:36,960 --> 00:16:40,950
interesting places where the application

00:16:39,030 --> 00:16:44,730
does something unfamiliar with the

00:16:40,950 --> 00:16:49,140
network data and so what I'm going to to

00:16:44,730 --> 00:16:54,420
look for this cases where the network

00:16:49,140 --> 00:16:56,220
data is passed as an argument to an

00:16:54,420 --> 00:16:59,220
invoke note that's what you call

00:16:56,220 --> 00:17:00,450
something in JavaScript but just then

00:16:59,220 --> 00:17:02,040
it's going to give you very many results

00:17:00,450 --> 00:17:04,380
actually I'm going to narrow it down

00:17:02,040 --> 00:17:07,320
further I'm going to say I'm looking for

00:17:04,380 --> 00:17:09,270
places where you call a function that is

00:17:07,320 --> 00:17:12,600
not defined in the current project so

00:17:09,270 --> 00:17:16,200
either it's a built in like eval or it's

00:17:12,600 --> 00:17:17,910
from a dependency and so we in order to

00:17:16,200 --> 00:17:19,920
understand whether it's risky we need to

00:17:17,910 --> 00:17:22,709
understand what the dependency is doing

00:17:19,920 --> 00:17:26,310
the way that I would do that method I

00:17:22,709 --> 00:17:29,100
would say not exists and get that call

00:17:26,310 --> 00:17:30,480
me so we're looking for an invoke note

00:17:29,100 --> 00:17:32,340
for which we don't know what it's

00:17:30,480 --> 00:17:34,460
calling it's going to quickly format

00:17:32,340 --> 00:17:37,110
this to give us a better view on it and

00:17:34,460 --> 00:17:41,400
that's it I'm going to run this query

00:17:37,110 --> 00:17:43,710
and note that I haven't yet specifically

00:17:41,400 --> 00:17:45,180
restricted the results to definitely be

00:17:43,710 --> 00:17:47,280
vulnerabilities this is very much an

00:17:45,180 --> 00:17:49,800
exploratory query and I'm going to have

00:17:47,280 --> 00:17:51,810
to apply my judgment to see which

00:17:49,800 --> 00:17:56,580
results are interesting and which are

00:17:51,810 --> 00:17:58,470
not this is a fairly common pattern when

00:17:56,580 --> 00:18:02,190
you are first getting to know a

00:17:58,470 --> 00:18:03,690
particular project or codebase and it's

00:18:02,190 --> 00:18:05,940
very helpful to be able to quickly zoom

00:18:03,690 --> 00:18:09,990
in on the places where network data is

00:18:05,940 --> 00:18:12,060
handled in this case we see 17 results

00:18:09,990 --> 00:18:14,340
being reported so let's actually take a

00:18:12,060 --> 00:18:19,620
look at some of

00:18:14,340 --> 00:18:21,809
here we have indeed a read from the

00:18:19,620 --> 00:18:24,210
query string of the projection parameter

00:18:21,809 --> 00:18:27,179
and the analysis tells me that it ends

00:18:24,210 --> 00:18:29,130
up as an argument here you can actually

00:18:27,179 --> 00:18:31,200
see how it happens on this very screen

00:18:29,130 --> 00:18:33,270
we assign it to the JSON projection

00:18:31,200 --> 00:18:35,460
variable and this variable is then

00:18:33,270 --> 00:18:39,210
interpolated into this string and

00:18:35,460 --> 00:18:41,130
concatenate it with some URL computed by

00:18:39,210 --> 00:18:44,240
another function before being passed to

00:18:41,130 --> 00:18:47,370
result redirect and this is actually the

00:18:44,240 --> 00:18:50,760
Express API for redirecting the response

00:18:47,370 --> 00:18:51,960
to another page so a priori this could

00:18:50,760 --> 00:18:53,909
already be an open redirect

00:18:51,960 --> 00:18:56,220
vulnerability but actually we're safe it

00:18:53,909 --> 00:18:59,669
was safe because there is a question

00:18:56,220 --> 00:19:02,250
mark before the network data is added to

00:18:59,669 --> 00:19:05,789
the URL and so at best we're going to be

00:19:02,250 --> 00:19:08,130
able to control the parameters okay so

00:19:05,789 --> 00:19:09,210
far so good let's hold it some of the

00:19:08,130 --> 00:19:11,429
others so you can see there are actually

00:19:09,210 --> 00:19:13,679
six rows that refer to this particular

00:19:11,429 --> 00:19:16,140
URL construction and that's because

00:19:13,679 --> 00:19:18,330
there are six different parts of the

00:19:16,140 --> 00:19:20,130
query string that can end up there it's

00:19:18,330 --> 00:19:22,710
the skip or key or value or type

00:19:20,130 --> 00:19:26,179
parameter and so on so all of these seem

00:19:22,710 --> 00:19:29,880
okay let's take a look at this one here

00:19:26,179 --> 00:19:31,110
this query string is derived from this

00:19:29,880 --> 00:19:32,909
string rather it's derived from the

00:19:31,110 --> 00:19:35,970
network data and is passed to the m dot

00:19:32,909 --> 00:19:37,679
run in new context this is this if

00:19:35,970 --> 00:19:39,240
you're familiar yeah i actually a

00:19:37,679 --> 00:19:41,580
function that will take a piece of

00:19:39,240 --> 00:19:43,770
string as evaluated this javascript so

00:19:41,580 --> 00:19:45,990
if this is true that's actually a code

00:19:43,770 --> 00:19:49,919
injection vulnerability where does it

00:19:45,990 --> 00:19:54,110
come from well over here yes it's a read

00:19:49,919 --> 00:19:56,309
of part of the request but it's a fairly

00:19:54,110 --> 00:19:58,380
it's a completely different file it's

00:19:56,309 --> 00:20:01,169
unclear how the data might get there

00:19:58,380 --> 00:20:03,630
except that the Coquille analysis has

00:20:01,169 --> 00:20:07,020
shown us its reasoning by giving us the

00:20:03,630 --> 00:20:09,960
path here so we assign the query to a

00:20:07,020 --> 00:20:13,350
variable called JSON query pass it to

00:20:09,960 --> 00:20:14,730
this function called to safe B's on in

00:20:13,350 --> 00:20:16,679
that function we pass it to another

00:20:14,730 --> 00:20:19,289
function in this function we do several

00:20:16,679 --> 00:20:22,409
string replacements which don't actually

00:20:19,289 --> 00:20:25,200
do anything to protect us from a code

00:20:22,409 --> 00:20:26,740
injection and here we are passing it to

00:20:25,200 --> 00:20:29,980
node.js

00:20:26,740 --> 00:20:32,620
so you can see how starting from almost

00:20:29,980 --> 00:20:34,360
nothing I was able to quickly zoom in on

00:20:32,620 --> 00:20:36,840
the places of interest in this codebase

00:20:34,360 --> 00:20:39,610
and inspect how the network data is used

00:20:36,840 --> 00:20:42,100
of course the good news is you don't

00:20:39,610 --> 00:20:44,350
have to do this every time there are

00:20:42,100 --> 00:20:47,230
hundreds of open source queries that

00:20:44,350 --> 00:20:50,800
have been contributed to the coat closet

00:20:47,230 --> 00:20:54,370
area and of course code injection is in

00:20:50,800 --> 00:20:56,320
fact one of them so you can see that I

00:20:54,370 --> 00:21:00,760
could if instead run this out-of-the-box

00:20:56,320 --> 00:21:03,790
query to find this vulnerability and in

00:21:00,760 --> 00:21:07,000
fact this finds a few more interesting

00:21:03,790 --> 00:21:08,950
results including cases where the dates

00:21:07,000 --> 00:21:12,400
that comes from the body of the request

00:21:08,950 --> 00:21:15,130
so that's HTTP POST a similar so the the

00:21:12,400 --> 00:21:18,429
analysis model understands enough about

00:21:15,130 --> 00:21:23,650
the Express API to show us this well

00:21:18,429 --> 00:21:24,970
let's quickly report this to the project

00:21:23,650 --> 00:21:26,590
well of course I wouldn't be showing

00:21:24,970 --> 00:21:29,890
this to you if it really was a zero date

00:21:26,590 --> 00:21:32,620
if we go to the Security tab and look at

00:21:29,890 --> 00:21:35,380
the security advisories in fact this is

00:21:32,620 --> 00:21:37,630
exactly the CVE that is listed there

00:21:35,380 --> 00:21:40,050
that we discovered it has been patched

00:21:37,630 --> 00:21:42,070
in a recent version of Romeo Express and

00:21:40,050 --> 00:21:43,960
what's worth noting is that was

00:21:42,070 --> 00:21:46,809
discovered by Jonathan light show of the

00:21:43,960 --> 00:21:52,780
gradle security team by perusing the

00:21:46,809 --> 00:21:53,950
results of code QL analysis so hopefully

00:21:52,780 --> 00:21:56,350
it gives you an overview of how you

00:21:53,950 --> 00:21:58,870
might approach building up a code QL

00:21:56,350 --> 00:22:01,210
query from scratch and exploring what's

00:21:58,870 --> 00:22:03,190
possible if I've piqued your interest I

00:22:01,210 --> 00:22:04,570
would like to draw your attention to the

00:22:03,190 --> 00:22:06,460
workshops tomorrow there are two

00:22:04,570 --> 00:22:09,160
workshops organized by the security lab

00:22:06,460 --> 00:22:11,350
at github that teach you how to find

00:22:09,160 --> 00:22:13,900
security vulnerabilities in Java code

00:22:11,350 --> 00:22:14,200
and in JavaScript code essentially from

00:22:13,900 --> 00:22:16,510
scratch

00:22:14,200 --> 00:22:19,290
please join us there and thank you very

00:22:16,510 --> 00:22:19,290
much for your attention

00:22:23,200 --> 00:22:26,710
you so much pollen grade that was

00:22:25,269 --> 00:22:28,389
awesome hearing about all the code

00:22:26,710 --> 00:22:32,350
scanning you know lots of love for code

00:22:28,389 --> 00:22:34,299
QL but you know we just love it so much

00:22:32,350 --> 00:22:36,370
my favorite part was four clicks to set

00:22:34,299 --> 00:22:38,230
up you know being a lazy engineer or as

00:22:36,370 --> 00:22:40,630
I like to call it an efficient engineer

00:22:38,230 --> 00:22:43,690
that's probably you know my favorite

00:22:40,630 --> 00:22:47,169
setup of all this so where can folks go

00:22:43,690 --> 00:22:49,899
ask more Martin if you want to go ask

00:22:47,169 --> 00:22:51,669
more if you come along - Caleb satellite

00:22:49,899 --> 00:22:53,440
comm slash discussions you can ask

00:22:51,669 --> 00:22:55,720
questions answers we're gonna speed

00:22:53,440 --> 00:22:57,730
along now so if we just say goodbye to

00:22:55,720 --> 00:22:59,200
Pavel and gray they're gonna be heading

00:22:57,730 --> 00:23:01,769
into the discussion so see you later

00:22:59,200 --> 00:23:01,769
champs

00:23:01,770 --> 00:23:04,799

YouTube URL: https://www.youtube.com/watch?v=58N0_0HCDPE


