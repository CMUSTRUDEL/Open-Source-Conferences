Title: Dependency hell - Or, Developers' perception of software dependencies - GitHub Satellite 2020
Publication date: 2020-05-07
Playlist: GitHub Satellite 2020 - Work
Description: 
	Presented by Ivan Pashchenko, Postdoctoral Research Fellow, University of Trento

Security vulnerabilities introduced by software dependencies can lead to severe incidents. Take for example, the Equifax breach, when the private data of more than 143 million people became publicly available due to a security vulnerability in an outdated software dependency. Despite the fact that GitHub Security Alerts and other tools allow software developers to check free open-source dependencies, developers still aren't paying enough attention to their security. In this talk, Ivan will discuss the perceptions of developers coming from 25 companies located in nine countries—and will present the insights on their practices, from the selection of software dependencies and updating of software dependencies to automating the dependency-management process and the mitigation of bugs and vulnerabilities in dependencies where a fixed version doesn't exist. Armed with this new knowledge, participants will discover the implications of the most popular dependency-management strategies, and from there will be able to improve the dependency management of their own software projects.

GitHub Satellite: A community connected by code

On May 6th, we threw a free virtual event featuring developers working together on the world’s software, announcements from the GitHub team, and inspiring performances by artists who code.

More information: https://githubsatellite.com
Schedule: https://githubsatellite.com/schedule/
Captions: 
	00:00:00,910 --> 00:00:07,019
[Music]

00:00:10,080 --> 00:00:15,730
however one thanks Martin for the

00:00:12,730 --> 00:00:17,980
introduction thanks Danny yeah this is

00:00:15,730 --> 00:00:19,600
even from its away I'm doing my postdoc

00:00:17,980 --> 00:00:22,090
in software security at the University

00:00:19,600 --> 00:00:24,850
of Trento and today I'm talking to you

00:00:22,090 --> 00:00:26,470
from the beautiful Italian Alps even

00:00:24,850 --> 00:00:28,480
though these days we are required to

00:00:26,470 --> 00:00:30,760
stay at home and watch our plane I

00:00:28,480 --> 00:00:33,399
invite you to the butyl hike to the

00:00:30,760 --> 00:00:35,440
short walk in the mountains and in the

00:00:33,399 --> 00:00:37,359
meantime I will tell you the story about

00:00:35,440 --> 00:00:41,229
developers perception of software

00:00:37,359 --> 00:00:43,929
dependencies well imagine we are on our

00:00:41,229 --> 00:00:46,629
way so take a bags jump on the board and

00:00:43,929 --> 00:00:48,940
let's hit the road well on the way you

00:00:46,629 --> 00:00:51,879
let me start with the story of the

00:00:48,940 --> 00:00:53,559
equifax company if you facts is one of

00:00:51,879 --> 00:00:56,530
the largest multinational consumer

00:00:53,559 --> 00:00:58,299
credit reporting agencies it collects

00:00:56,530 --> 00:01:01,089
and sells credit and demographic data

00:00:58,299 --> 00:01:02,920
like names credit card details driver

00:01:01,089 --> 00:01:05,950
licenses social security numbers etc

00:01:02,920 --> 00:01:09,610
it's a large amount of sensitive

00:01:05,950 --> 00:01:13,920
personal data of more than 800 million

00:01:09,610 --> 00:01:16,869
people a huge pay to huggers isn't it in

00:01:13,920 --> 00:01:19,689
2017 indeed Equifax announced a cyber

00:01:16,869 --> 00:01:25,509
security breach let's have a look at its

00:01:19,689 --> 00:01:27,880
timeline on March 6 2017 they was a

00:01:25,509 --> 00:01:31,179
vulnerability affected I purchased rats

00:01:27,880 --> 00:01:33,070
library disclosed the vulnerability was

00:01:31,179 --> 00:01:36,009
severe as it allowed remote common

00:01:33,070 --> 00:01:39,039
execution along with the vulnerability

00:01:36,009 --> 00:01:41,189
at the same day they were exploit in the

00:01:39,039 --> 00:01:45,479
fixed version of the library available

00:01:41,189 --> 00:01:51,600
however if he first did not react on it

00:01:45,479 --> 00:01:54,189
on May 13th 72 days both disclosure

00:01:51,600 --> 00:01:56,649
hackers discovered the Equifax consumer

00:01:54,189 --> 00:01:59,679
complaint web portal used vulnerable

00:01:56,649 --> 00:02:01,240
patches trans dependency and hackers

00:01:59,679 --> 00:02:05,170
were able to get access to the web

00:02:01,240 --> 00:02:07,630
server so for the next 77 days

00:02:05,170 --> 00:02:10,090
they managed to get to customers data

00:02:07,630 --> 00:02:12,000
due to the absence of proper

00:02:10,090 --> 00:02:14,250
segmentation in the network

00:02:12,000 --> 00:02:16,410
and they also discovered some admin

00:02:14,250 --> 00:02:20,340
passwords on the effexor are stored in

00:02:16,410 --> 00:02:22,290
plain text so after the British

00:02:20,340 --> 00:02:24,810
discovery in the 29th of July

00:02:22,290 --> 00:02:27,660
Equifax kept the bridge secret for 40

00:02:24,810 --> 00:02:30,480
days until the 7th of September when he

00:02:27,660 --> 00:02:34,320
finally told to the world that the

00:02:30,480 --> 00:02:37,710
critical personal data of more than 145

00:02:34,320 --> 00:02:39,720
million people were stolen due to a

00:02:37,710 --> 00:02:43,620
security vulnerability in a vulnerable

00:02:39,720 --> 00:02:48,810
dependency quite dramatic very dramatic

00:02:43,620 --> 00:02:50,790
isn't it well in the meantime we have a

00:02:48,810 --> 00:02:53,730
writer starting point so let's start

00:02:50,790 --> 00:02:55,800
walking out to the mountain peaks but so

00:02:53,730 --> 00:02:58,350
coming back to dependencies let's check

00:02:55,800 --> 00:03:01,560
what's changed since the time of the

00:02:58,350 --> 00:03:04,670
graphics bridge so from the academic

00:03:01,560 --> 00:03:07,410
side there is a lot of research going on

00:03:04,670 --> 00:03:10,020
you see I just typed our vulnerable

00:03:07,410 --> 00:03:15,980
dependencies and Google Scholar returned

00:03:10,020 --> 00:03:19,290
me about 130 key results 130 keep papers

00:03:15,980 --> 00:03:20,910
from industry they appeared a bunch of

00:03:19,290 --> 00:03:23,600
tools that allow us to check

00:03:20,910 --> 00:03:26,040
dependencies a top of our projects

00:03:23,600 --> 00:03:27,959
github security alert service allows

00:03:26,040 --> 00:03:30,390
developers who maintain the projects

00:03:27,959 --> 00:03:33,300
that would have to check their

00:03:30,390 --> 00:03:35,690
dependencies and Pam has a built-in

00:03:33,300 --> 00:03:37,830
independency checker and being old it

00:03:35,690 --> 00:03:40,140
eclipses stadion by up and

00:03:37,830 --> 00:03:43,049
language-specific tools it can be used

00:03:40,140 --> 00:03:44,910
for java python sneaking sources clear

00:03:43,049 --> 00:03:47,100
our multi language dependency analysis

00:03:44,910 --> 00:03:51,120
tools well that's quite a lot of options

00:03:47,100 --> 00:03:53,370
but what about developers do they

00:03:51,120 --> 00:03:55,950
actually follow the suggested practices

00:03:53,370 --> 00:04:01,160
do they use the dependency management

00:03:55,950 --> 00:04:04,980
tools to answer these questions we

00:04:01,160 --> 00:04:06,420
carried out a study with 2,500 press

00:04:04,980 --> 00:04:09,690
developers coming from 10 different

00:04:06,420 --> 00:04:12,180
countries Italy Germany Russia Vietnam

00:04:09,690 --> 00:04:15,390
United Kingdom Spain the Netherlands

00:04:12,180 --> 00:04:17,519
Croatia Slovenia Lithuania these

00:04:15,390 --> 00:04:20,160
developers are involved in development

00:04:17,519 --> 00:04:23,099
of desktop mobile web and embedded

00:04:20,160 --> 00:04:24,240
applications they work in large or small

00:04:23,099 --> 00:04:25,889
medium enterprises

00:04:24,240 --> 00:04:28,379
lead user group

00:04:25,889 --> 00:04:30,499
and actively contribute or even lead a

00:04:28,379 --> 00:04:33,810
large free Libre open-source projects

00:04:30,499 --> 00:04:37,349
they develop in C C++ Java JavaScript

00:04:33,810 --> 00:04:39,749
and Python so together with these

00:04:37,349 --> 00:04:41,279
developers we discussed dependency

00:04:39,749 --> 00:04:46,020
management process from every possible

00:04:41,279 --> 00:04:48,629
angle and today based on these

00:04:46,020 --> 00:04:51,080
interviews I will share with you our

00:04:48,629 --> 00:04:55,229
observations on the following aspects

00:04:51,080 --> 00:04:58,099
selection of new dependencies updating

00:04:55,229 --> 00:05:00,599
of existing already used dependencies

00:04:58,099 --> 00:05:03,770
after mating dependency management on

00:05:00,599 --> 00:05:06,659
usage of dependency management tools

00:05:03,770 --> 00:05:08,610
mitigation of Vong of mitigation

00:05:06,659 --> 00:05:12,960
vulnerabilities when no fix available

00:05:08,610 --> 00:05:16,289
and well let me start with the first

00:05:12,960 --> 00:05:18,029
aspect selection of new dependencies the

00:05:16,289 --> 00:05:20,310
most interesting observation about it

00:05:18,029 --> 00:05:23,610
that selection in dependencies is not an

00:05:20,310 --> 00:05:26,339
easy task developers have to check

00:05:23,610 --> 00:05:28,080
various sources and combine different

00:05:26,339 --> 00:05:29,669
kinds of information to understand

00:05:28,080 --> 00:05:31,199
whether they want to include a

00:05:29,669 --> 00:05:34,650
particular library to their project or

00:05:31,199 --> 00:05:37,770
not this task requires time and

00:05:34,650 --> 00:05:40,949
experience in large enterprises

00:05:37,770 --> 00:05:44,430
Alysse they exist specific departments

00:05:40,949 --> 00:05:46,409
and specific people who do this job the

00:05:44,430 --> 00:05:48,599
pre-select dependencies and put them

00:05:46,409 --> 00:05:52,050
into a pool of people pre-approved

00:05:48,599 --> 00:05:54,089
libraries so the developers of such

00:05:52,050 --> 00:05:55,589
companies are safe to use any library

00:05:54,089 --> 00:05:58,500
from the pre-approved list in their

00:05:55,589 --> 00:06:01,259
projects if a developer needs some

00:05:58,500 --> 00:06:03,479
particular functionality she can ask for

00:06:01,259 --> 00:06:05,969
a new level to be checked and after

00:06:03,479 --> 00:06:08,099
clearing this Tigra would be included in

00:06:05,969 --> 00:06:11,689
the list of pre-approved libraries if

00:06:08,099 --> 00:06:15,629
not cleared eternity will be suggested

00:06:11,689 --> 00:06:18,449
for small companies as amis such

00:06:15,629 --> 00:06:20,250
approach is quite expensive in the best

00:06:18,449 --> 00:06:22,319
case scenario a team of people who

00:06:20,250 --> 00:06:25,020
performed selection transforms into

00:06:22,319 --> 00:06:27,740
software architect or an experienced

00:06:25,020 --> 00:06:30,839
developer who selects libraries

00:06:27,740 --> 00:06:33,419
otherwise developers just look at some

00:06:30,839 --> 00:06:35,219
matters of a library in general they are

00:06:33,419 --> 00:06:39,590
looking for popularity and the goods

00:06:35,219 --> 00:06:42,230
come in support of a library as well

00:06:39,590 --> 00:06:44,210
as this matrix would mean for them fast

00:06:42,230 --> 00:06:46,850
appearance of functionality and security

00:06:44,210 --> 00:06:49,370
fixes and the developers will not remain

00:06:46,850 --> 00:06:51,050
alone with you with their problems if

00:06:49,370 --> 00:06:53,090
something happens they can ask the

00:06:51,050 --> 00:06:56,330
library in tears and receive a fast

00:06:53,090 --> 00:06:59,660
response a solution for their issues you

00:06:56,330 --> 00:07:01,130
know this description reminds me a

00:06:59,660 --> 00:07:04,370
formulation of a dynamic programming

00:07:01,130 --> 00:07:06,950
problem indeed we have a lot of repeated

00:07:04,370 --> 00:07:08,570
actions developers look for exactly the

00:07:06,950 --> 00:07:11,030
same information for the same libraries

00:07:08,570 --> 00:07:12,740
the Google library name check its

00:07:11,030 --> 00:07:15,080
discussions at Stack Overflow check

00:07:12,740 --> 00:07:16,610
codex the positron is library check

00:07:15,080 --> 00:07:18,830
number of stars forms project

00:07:16,610 --> 00:07:20,900
contributors maybe they also check

00:07:18,830 --> 00:07:24,140
number of open issues if the project is

00:07:20,900 --> 00:07:25,730
stored on github all these to decide

00:07:24,140 --> 00:07:28,760
whether the library is good enough to be

00:07:25,730 --> 00:07:33,500
included so what would be the solution

00:07:28,760 --> 00:07:35,420
to optimize this process for me the

00:07:33,500 --> 00:07:38,420
solution would be to cache the repeat at

00:07:35,420 --> 00:07:41,450
work or like we call it in dynamic

00:07:38,420 --> 00:07:43,670
programming memorization so there is a

00:07:41,450 --> 00:07:46,070
need to combine this kind of information

00:07:43,670 --> 00:07:49,160
together and present it in the form of

00:07:46,070 --> 00:07:51,980
mathematics that shows the library is

00:07:49,160 --> 00:07:55,220
well supported mature and not affected

00:07:51,980 --> 00:07:57,860
by security vulnerabilities in the form

00:07:55,220 --> 00:07:59,750
this is used in large enterprises when

00:07:57,860 --> 00:08:02,930
they have a pool of pre-approved

00:07:59,750 --> 00:08:09,200
libraries but this feature is also much

00:08:02,930 --> 00:08:10,700
requested by travelers okay so what

00:08:09,200 --> 00:08:12,920
about already selected and used

00:08:10,700 --> 00:08:16,700
libraries here there are two major

00:08:12,920 --> 00:08:19,760
issues awarness and lack of resources to

00:08:16,700 --> 00:08:22,220
control the penances in large

00:08:19,760 --> 00:08:25,760
enterprises there might be a bit more

00:08:22,220 --> 00:08:27,650
resources all they may they might have a

00:08:25,760 --> 00:08:29,560
policy something like things so all

00:08:27,650 --> 00:08:31,730
issues before go into production so

00:08:29,560 --> 00:08:33,820
developers have to fix issues in

00:08:31,730 --> 00:08:36,980
software the premises if there are any

00:08:33,820 --> 00:08:39,590
in small companies or for individual

00:08:36,980 --> 00:08:42,110
developers the resources are multi mitad

00:08:39,590 --> 00:08:44,840
hence developers prefer to postpone

00:08:42,110 --> 00:08:46,490
updates because they don't want to break

00:08:44,840 --> 00:08:48,140
the project's in case there would be

00:08:46,490 --> 00:08:50,490
some breaking changes in the

00:08:48,140 --> 00:08:53,290
dependencies

00:08:50,490 --> 00:08:56,830
the intersection about security here

00:08:53,290 --> 00:09:00,190
that many developers reported a security

00:08:56,830 --> 00:09:02,920
fixes for good while supported popular

00:09:00,190 --> 00:09:06,970
libraries typically do not introduce any

00:09:02,920 --> 00:09:10,350
breaking changes also this fixes they

00:09:06,970 --> 00:09:13,510
were kind of a deer fast so

00:09:10,350 --> 00:09:14,620
vulnerabilities motivate for updating if

00:09:13,510 --> 00:09:18,340
they are severe

00:09:14,620 --> 00:09:23,550
widely known and dicks versions is it a

00:09:18,340 --> 00:09:25,870
dot so what's the implication here our

00:09:23,550 --> 00:09:29,200
separation between functionality and

00:09:25,870 --> 00:09:31,360
security is necessary ideally a

00:09:29,200 --> 00:09:32,980
developer should be able to see okay

00:09:31,360 --> 00:09:36,120
this version has functionality changes

00:09:32,980 --> 00:09:39,910
and this version only security changes

00:09:36,120 --> 00:09:41,710
this way she could plan the update if

00:09:39,910 --> 00:09:44,170
she sees a new dependency version with

00:09:41,710 --> 00:09:46,720
only security changes then she can plan

00:09:44,170 --> 00:09:48,640
to adopt it fast for functionality

00:09:46,720 --> 00:09:51,510
changes she can decide whether she need

00:09:48,640 --> 00:09:54,370
such functionality and plan its adoption

00:09:51,510 --> 00:09:57,310
then on top of this there should be a

00:09:54,370 --> 00:10:01,320
direct indication whether there are any

00:09:57,310 --> 00:10:05,440
break it changes down to the dependency

00:10:01,320 --> 00:10:07,780
so vulnerability fixes should be well

00:10:05,440 --> 00:10:14,760
indicated free from breaking changes and

00:10:07,780 --> 00:10:18,910
free from functionality improvements ok

00:10:14,760 --> 00:10:21,430
going to ultimatum as I mentioned

00:10:18,910 --> 00:10:23,020
developers lack awareness of existence

00:10:21,430 --> 00:10:25,990
of issues in dependencies and like

00:10:23,020 --> 00:10:27,790
resources to cope with these issues in

00:10:25,990 --> 00:10:30,750
theory of tomato dependency management

00:10:27,790 --> 00:10:33,820
tools are there to help developers

00:10:30,750 --> 00:10:37,150
however the major observation is that

00:10:33,820 --> 00:10:39,250
developers do not trust these tools they

00:10:37,150 --> 00:10:41,680
do not allow us to perform sensitive

00:10:39,250 --> 00:10:44,770
tasks like for example update of

00:10:41,680 --> 00:10:46,930
software dependency so the tools if used

00:10:44,770 --> 00:10:49,270
only facilitate finding vulnerabilities

00:10:46,930 --> 00:10:51,910
that effects of the dependencies for

00:10:49,270 --> 00:10:53,980
their projects however if a tool

00:10:51,910 --> 00:10:57,070
produces too many false positives or low

00:10:53,980 --> 00:11:00,040
priority alerts and I heard several

00:10:57,070 --> 00:11:02,170
developers anomalies so developers just

00:11:00,040 --> 00:11:03,230
decide to ignore such tools they

00:11:02,170 --> 00:11:06,200
perceive

00:11:03,230 --> 00:11:09,080
this alert as spam and switch the social

00:11:06,200 --> 00:11:11,360
channels of their dependencies so the

00:11:09,080 --> 00:11:13,670
developers say well if there is a new

00:11:11,360 --> 00:11:15,350
version or a significant event that I

00:11:13,670 --> 00:11:18,380
can just discover from the social

00:11:15,350 --> 00:11:21,410
channel so with the implications for

00:11:18,380 --> 00:11:25,070
tool developers dependency analysis

00:11:21,410 --> 00:11:28,880
tools should first during a rate only

00:11:25,070 --> 00:11:31,580
irrelevant alerts so these alerts are

00:11:28,880 --> 00:11:35,060
not perceived by developers as spam very

00:11:31,580 --> 00:11:37,910
importantly second dependence analysis

00:11:35,060 --> 00:11:41,120
tool should show the affected components

00:11:37,910 --> 00:11:43,490
of the dependent project so developers

00:11:41,120 --> 00:11:45,860
could immediately decide how severe is

00:11:43,490 --> 00:11:48,040
the impact for example whether core

00:11:45,860 --> 00:11:51,560
component is affected or not

00:11:48,040 --> 00:11:54,410
finally dependence analysis tools should

00:11:51,560 --> 00:11:57,410
suggest a fixed version and if it's

00:11:54,410 --> 00:12:00,020
adoption introducing breaking changes so

00:11:57,410 --> 00:12:02,920
developers could estimate the cost of a

00:12:00,020 --> 00:12:02,920
fix and plan it properly

00:12:03,790 --> 00:12:08,450
unfortunately not all security fixes

00:12:06,230 --> 00:12:10,910
appear fast and there could be cases

00:12:08,450 --> 00:12:13,430
when there is no fixed version of the

00:12:10,910 --> 00:12:17,210
dependency available so how do the Vella

00:12:13,430 --> 00:12:19,310
percent again such as NARS first they

00:12:17,210 --> 00:12:22,400
try to assess if vulnerability impacts

00:12:19,310 --> 00:12:24,500
them their projects their customers if

00:12:22,400 --> 00:12:26,840
not for example of a project only used

00:12:24,500 --> 00:12:30,170
for internal reasons developers might

00:12:26,840 --> 00:12:31,820
decide not to do anything and just wait

00:12:30,170 --> 00:12:35,180
for the fixed version or community or

00:12:31,820 --> 00:12:37,310
ground if the vulnerability effects

00:12:35,180 --> 00:12:40,100
their projects and especially their

00:12:37,310 --> 00:12:41,600
customers developers check if there is

00:12:40,100 --> 00:12:45,320
any activity going around the

00:12:41,600 --> 00:12:48,070
vulnerability developers see that

00:12:45,320 --> 00:12:50,930
security pics is expected to appear fast

00:12:48,070 --> 00:12:54,290
they might decide to apply a temporary

00:12:50,930 --> 00:12:56,630
solution like disable affected

00:12:54,290 --> 00:12:59,380
functionality of their project or roll

00:12:56,630 --> 00:13:01,790
back to previous save dependence version

00:12:59,380 --> 00:13:03,680
well if the fix is not going to appear

00:13:01,790 --> 00:13:07,820
fast and then developers might decide to

00:13:03,680 --> 00:13:10,190
switch to another library several

00:13:07,820 --> 00:13:13,460
experts developers reported that they do

00:13:10,190 --> 00:13:17,070
not wait for others to fix the issues so

00:13:13,460 --> 00:13:19,920
they go directly to dependency project

00:13:17,070 --> 00:13:21,830
okay fix it and create pool requests to

00:13:19,920 --> 00:13:23,880
make the fix available for the community

00:13:21,830 --> 00:13:25,950
several developers from large

00:13:23,880 --> 00:13:29,820
enterprises told me that they actually

00:13:25,950 --> 00:13:31,860
do this on regular basis and even Bush

00:13:29,820 --> 00:13:35,070
project maintenance to accept pool

00:13:31,860 --> 00:13:40,200
requests and release new fixed versus

00:13:35,070 --> 00:13:42,060
faster so how depends analysis tools

00:13:40,200 --> 00:13:46,440
could support developers in such a

00:13:42,060 --> 00:13:49,050
situation first they could determine

00:13:46,440 --> 00:13:51,690
part of the analyzed project affected by

00:13:49,050 --> 00:13:55,560
the vulnerability so developers could

00:13:51,690 --> 00:13:57,690
quickly disable it second dependency

00:13:55,560 --> 00:14:00,930
analysis tools can facilitate access to

00:13:57,690 --> 00:14:02,430
the dependent source code so skill

00:14:00,930 --> 00:14:07,350
developers could go and fix the

00:14:02,430 --> 00:14:10,230
vulnerability directly they think the

00:14:07,350 --> 00:14:12,510
tools also can suggest an alternative

00:14:10,230 --> 00:14:13,980
library and ID list made the amount of

00:14:12,510 --> 00:14:19,010
changes necessary to switch to this

00:14:13,980 --> 00:14:23,070
library so developers can have a plan B

00:14:19,010 --> 00:14:24,930
well and at this point we actually end

00:14:23,070 --> 00:14:28,500
our journey so we reach the big

00:14:24,930 --> 00:14:30,450
congratulations and so just really let

00:14:28,500 --> 00:14:34,500
me just wrap up with the main takeaways

00:14:30,450 --> 00:14:37,740
of my talk so for every developer who

00:14:34,500 --> 00:14:40,100
uses dependencies security of project

00:14:37,740 --> 00:14:42,810
dependencies is really really important

00:14:40,100 --> 00:14:45,450
second for every developer who creates

00:14:42,810 --> 00:14:47,220
libraries to get more adoption of your

00:14:45,450 --> 00:14:52,560
libraries security and functionality

00:14:47,220 --> 00:14:55,470
should not be mixed and lastly for every

00:14:52,560 --> 00:14:58,080
dependency to creator developers are

00:14:55,470 --> 00:14:59,820
aware about your tool but currently

00:14:58,080 --> 00:15:04,740
existing tools require find unity of

00:14:59,820 --> 00:15:07,110
satisfy developers needs so today we

00:15:04,740 --> 00:15:10,020
learned how to make dependency secure

00:15:07,110 --> 00:15:11,910
and I can't wait to share more in our

00:15:10,020 --> 00:15:15,380
current Q&A discussion

00:15:11,910 --> 00:15:15,380
thanks for being with me

00:15:19,490 --> 00:15:24,000
thanks very much Eve and that was a

00:15:21,420 --> 00:15:26,190
great night I enjoyed it so yeah thanks

00:15:24,000 --> 00:15:28,170
for taking us through that it was you

00:15:26,190 --> 00:15:30,600
know really you showed you research

00:15:28,170 --> 00:15:33,120
shows how hard it is to keep up to date

00:15:30,600 --> 00:15:36,000
with defenses security is just you know

00:15:33,120 --> 00:15:38,660
too hard it's really really tricky to do

00:15:36,000 --> 00:15:40,860
as a developer but it's also good cuz um

00:15:38,660 --> 00:15:43,860
quite a lot of the recommendations seem

00:15:40,860 --> 00:15:45,630
to you know sort of help the girl of

00:15:43,860 --> 00:15:47,220
advanced security features that gray and

00:15:45,630 --> 00:15:49,170
Pavel was showing us easier earlier

00:15:47,220 --> 00:15:51,569
definitely seem to adhere to a lot of

00:15:49,170 --> 00:15:53,160
your research recommendation so yeah I'm

00:15:51,569 --> 00:15:55,680
fertile oh this is quick but no

00:15:53,160 --> 00:15:57,870
dependencies are scary anyway so yeah

00:15:55,680 --> 00:16:00,449
Dana what about you what do you what do

00:15:57,870 --> 00:16:02,310
you think the session and you know I

00:16:00,449 --> 00:16:04,829
just think it's fascinating like how we

00:16:02,310 --> 00:16:06,569
take for granted all of the the nuances

00:16:04,829 --> 00:16:08,639
we have when we write code you know and

00:16:06,569 --> 00:16:10,829
especially when you have mono monolith

00:16:08,639 --> 00:16:12,690
or monolith application there's just so

00:16:10,829 --> 00:16:14,370
many dependencies you're like library

00:16:12,690 --> 00:16:16,949
after library after library and then we

00:16:14,370 --> 00:16:19,800
go into these new architectures where

00:16:16,949 --> 00:16:21,420
it's a shy slight shift but then you

00:16:19,800 --> 00:16:23,130
have services compounded with new

00:16:21,420 --> 00:16:25,230
dependencies that have new libraries and

00:16:23,130 --> 00:16:26,790
packages and so it's just awesome that

00:16:25,230 --> 00:16:28,470
we're focusing on there and trying to

00:16:26,790 --> 00:16:30,149
bring down that fear because it is scary

00:16:28,470 --> 00:16:31,589
you don't want to be the person making a

00:16:30,149 --> 00:16:34,290
breaking change you don't want to be the

00:16:31,589 --> 00:16:36,240
person that's like oh no like I've

00:16:34,290 --> 00:16:37,740
missed this in my dependency tree and so

00:16:36,240 --> 00:16:40,649
it's just fascinating the research

00:16:37,740 --> 00:16:42,180
that's happening here but I want to kick

00:16:40,649 --> 00:16:44,790
it over to some questions that we have

00:16:42,180 --> 00:16:46,259
coming in so as we've been saying if you

00:16:44,790 --> 00:16:47,850
want to ask something right now or take

00:16:46,259 --> 00:16:50,550
them live you can go over to github

00:16:47,850 --> 00:16:52,500
satellite comm slash discussions and me

00:16:50,550 --> 00:16:55,230
and Martin will be queuing them up but

00:16:52,500 --> 00:16:56,910
we got one right now come in from all

00:16:55,230 --> 00:16:58,889
right not

00:16:56,910 --> 00:17:02,399
Tanny wants to know are there any tools

00:16:58,889 --> 00:17:07,799
for doing for doing I think I got the

00:17:02,399 --> 00:17:10,020
wrong Q&A is Martin oh no Danny was yeah

00:17:07,799 --> 00:17:12,150
no not Tanny wants to know are there any

00:17:10,020 --> 00:17:14,189
tools for doing the packages eval

00:17:12,150 --> 00:17:16,020
metrics that you can recommend so they

00:17:14,189 --> 00:17:17,250
want to know you know utilizing your

00:17:16,020 --> 00:17:18,720
research like what tools would you

00:17:17,250 --> 00:17:22,429
recommend to go in and find those

00:17:18,720 --> 00:17:22,429
dependencies besides github of course

00:17:22,549 --> 00:17:30,520
okay great question yeah I mean

00:17:27,820 --> 00:17:32,320
definitely so if you if you are using

00:17:30,520 --> 00:17:34,900
these hop foster knee and maintaining

00:17:32,320 --> 00:17:36,670
your projects well hub provides a very

00:17:34,900 --> 00:17:40,150
good service for that

00:17:36,670 --> 00:17:43,450
what's besides of these so just for your

00:17:40,150 --> 00:17:46,510
tools there are several tools available

00:17:43,450 --> 00:17:51,130
like for example sneak is a great tool

00:17:46,510 --> 00:17:56,140
and it's provide some good functionality

00:17:51,130 --> 00:17:57,700
then I think it also provides a lot of

00:17:56,140 --> 00:18:00,430
functionality for free so you can just

00:17:57,700 --> 00:18:02,740
try it then there are some more tools

00:18:00,430 --> 00:18:06,190
which are paid like for example source

00:18:02,740 --> 00:18:08,560
clear but yeah I mean personally

00:18:06,190 --> 00:18:12,310
personally I have not used it but people

00:18:08,560 --> 00:18:14,470
say it's great yeah what's I think a

00:18:12,310 --> 00:18:16,600
good and what is used that for example

00:18:14,470 --> 00:18:19,630
and I think that's really great what the

00:18:16,600 --> 00:18:22,240
NPM guys are doing so they they just

00:18:19,630 --> 00:18:25,390
integrated to the dependency analysis

00:18:22,240 --> 00:18:27,160
tool in the Amika system and so you can

00:18:25,390 --> 00:18:30,640
just type in PM audit and you already

00:18:27,160 --> 00:18:34,150
receive some time analysis of

00:18:30,640 --> 00:18:37,710
dependencies in your JavaScript project

00:18:34,150 --> 00:18:39,310
so I think that's fantastic from yeah

00:18:37,710 --> 00:18:41,140
that's fantastic

00:18:39,310 --> 00:18:43,120
yeah so got another question here from

00:18:41,140 --> 00:18:44,800
oh I like this daily you let me

00:18:43,120 --> 00:18:45,190
pronounce the hard usernames brilliant

00:18:44,800 --> 00:18:51,280
well done

00:18:45,190 --> 00:18:52,960
so from nassif nassif him tears OA om

00:18:51,280 --> 00:18:54,340
think sorry about that for butchering

00:18:52,960 --> 00:18:56,740
your your handle again

00:18:54,340 --> 00:18:58,330
how do developers in your research how

00:18:56,740 --> 00:18:59,710
the developers usually investigate if

00:18:58,330 --> 00:19:02,830
the vulnerability in the dependency

00:18:59,710 --> 00:19:04,420
affects their project or not you know

00:19:02,830 --> 00:19:06,040
assuming that such investigation will

00:19:04,420 --> 00:19:08,950
influence a developer's decision on

00:19:06,040 --> 00:19:10,300
updating that if you know the

00:19:08,950 --> 00:19:21,190
vulnerability how do they usually

00:19:10,300 --> 00:19:24,010
research that so well so if I understand

00:19:21,190 --> 00:19:28,600
the question correctly so basically I I

00:19:24,010 --> 00:19:32,110
heard the two stories so this depends on

00:19:28,600 --> 00:19:35,530
the MIS kind of the type of they they

00:19:32,110 --> 00:19:37,570
let say the develop the vulnerabilities

00:19:35,530 --> 00:19:40,830
discovered so if there is a fixed

00:19:37,570 --> 00:19:44,080
version for this vulnerability then

00:19:40,830 --> 00:19:45,760
then typically and the libraries are

00:19:44,080 --> 00:19:52,450
kind of good and well supported

00:19:45,760 --> 00:19:56,620
so then typically there is some so so

00:19:52,450 --> 00:19:59,170
developers kind of okay so how can i

00:19:56,620 --> 00:20:00,940
frame it well okay so sorry for for this

00:19:59,170 --> 00:20:04,090
introduction that's yeah

00:20:00,940 --> 00:20:07,810
so well first what yes some developers

00:20:04,090 --> 00:20:09,520
basically they are they did sometimes

00:20:07,810 --> 00:20:12,760
just no that's okay they using these

00:20:09,520 --> 00:20:15,190
dependencies right so but typically this

00:20:12,760 --> 00:20:17,500
this is kind of the first layer layer of

00:20:15,190 --> 00:20:20,410
dependencies like what is the directly

00:20:17,500 --> 00:20:21,880
configure from their projects and so for

00:20:20,410 --> 00:20:23,770
these dependencies they typically just

00:20:21,880 --> 00:20:25,840
the keep it in mind

00:20:23,770 --> 00:20:28,930
that's addy use this dependence and then

00:20:25,840 --> 00:20:30,970
they kind of read somewhere and now in

00:20:28,930 --> 00:20:32,950
some social media and Twitter or in

00:20:30,970 --> 00:20:36,160
somewhere that we there is there's a

00:20:32,950 --> 00:20:38,200
problem with this dependency and this

00:20:36,160 --> 00:20:40,180
problem is like if it's discussed a lot

00:20:38,200 --> 00:20:43,170
so they start to see okay

00:20:40,180 --> 00:20:46,210
maybe I should also cannot updated but

00:20:43,170 --> 00:20:48,100
and that's the most common practice that

00:20:46,210 --> 00:20:51,640
I heard that's what they do

00:20:48,100 --> 00:20:54,250
but actually nowadays the the the

00:20:51,640 --> 00:20:56,980
situation is much worse because we have

00:20:54,250 --> 00:20:58,840
a lot of like transitive dependencies

00:20:56,980 --> 00:21:00,700
that are hidden and sometimes as a

00:20:58,840 --> 00:21:02,980
developer you don't even know that so

00:21:00,700 --> 00:21:06,850
you're kind of dependent on this library

00:21:02,980 --> 00:21:09,820
and so even if vulnerability like a cure

00:21:06,850 --> 00:21:12,130
there then the only way for you to know

00:21:09,820 --> 00:21:14,560
about it is just to use the dependency

00:21:12,130 --> 00:21:16,750
manager tool dependency analysis tool so

00:21:14,560 --> 00:21:20,770
this dependency analysis tool I kind of

00:21:16,750 --> 00:21:25,390
alerts you and so and then you start to

00:21:20,770 --> 00:21:28,870
see the okay you also have the this

00:21:25,390 --> 00:21:34,000
problem and so these situations are much

00:21:28,870 --> 00:21:36,940
more complicated and for this what what

00:21:34,000 --> 00:21:43,660
developers told me what they do the idea

00:21:36,940 --> 00:21:47,050
try to kind of so they kind of so they

00:21:43,660 --> 00:21:49,030
can print the dependency right to the

00:21:47,050 --> 00:21:49,660
top level first and so to make it

00:21:49,030 --> 00:21:52,380
manageable

00:21:49,660 --> 00:21:52,380
oh the

00:21:53,190 --> 00:22:09,400
I mean I need a blackboard to tell them

00:22:01,810 --> 00:22:11,650
all this your to describe I totally feel

00:22:09,400 --> 00:22:13,810
you it's we used to work on for our

00:22:11,650 --> 00:22:15,730
heart you didn't have the visibility

00:22:13,810 --> 00:22:18,160
into your code and now all these amazing

00:22:15,730 --> 00:22:19,510
tool sets so you can you can monitor in

00:22:18,160 --> 00:22:21,700
real time can understand your

00:22:19,510 --> 00:22:23,350
dependencies before you ship you can you

00:22:21,700 --> 00:22:24,940
know get automatic remediation of

00:22:23,350 --> 00:22:27,250
vulnerabilities I'm gonna tell you you

00:22:24,940 --> 00:22:29,080
know yeah we are I think was it last

00:22:27,250 --> 00:22:30,880
year its satellite or the universe we

00:22:29,080 --> 00:22:33,160
released dependent bot and that thing

00:22:30,880 --> 00:22:40,990
has saved my ass so many times because

00:22:33,160 --> 00:22:42,430
dependencies are hard this automatic

00:22:40,990 --> 00:22:45,250
solution they are really really helpful

00:22:42,430 --> 00:22:47,650
and I mean this is a this is a breath of

00:22:45,250 --> 00:22:54,460
air and I mean this is fantastic that we

00:22:47,650 --> 00:22:56,440
have them that's Martin have all the

00:22:54,460 --> 00:22:58,180
hard names okay I am cuz I know what

00:22:56,440 --> 00:23:02,710
being a new Texican I can't pronounce

00:22:58,180 --> 00:23:05,200
anything I just make up my own words so

00:23:02,710 --> 00:23:07,500
Jamie Sloan that's right I took the easy

00:23:05,200 --> 00:23:10,240
line at Jamie Swan and I should be Swami

00:23:07,500 --> 00:23:12,640
Swami or Sloan you know what I love you

00:23:10,240 --> 00:23:14,050
much love they want to know open-source

00:23:12,640 --> 00:23:15,790
software gives us the benefits of

00:23:14,050 --> 00:23:17,620
collaboration quick delivery so

00:23:15,790 --> 00:23:19,990
developing ways we can stay secure why

00:23:17,620 --> 00:23:22,480
not losing that is the way to go they

00:23:19,990 --> 00:23:24,010
agree so what about crowdsourcing these

00:23:22,480 --> 00:23:25,660
fixes that y'all are finding and

00:23:24,010 --> 00:23:27,250
delivering them to the line they want to

00:23:25,660 --> 00:23:28,810
know like how can we apply this research

00:23:27,250 --> 00:23:31,380
since we'll set that y'all are utilizing

00:23:28,810 --> 00:23:35,320
him and give it back to the community I

00:23:31,380 --> 00:23:38,050
think that's a great idea and I would be

00:23:35,320 --> 00:23:40,590
really happy if this is actually this

00:23:38,050 --> 00:23:44,830
would be actually possible to to do it

00:23:40,590 --> 00:23:47,560
and but I think in in a way open-source

00:23:44,830 --> 00:23:50,290
allows us to to perform these cause I

00:23:47,560 --> 00:23:53,440
mean dependent dependencies are

00:23:50,290 --> 00:23:55,420
typically open-source and so anyone can

00:23:53,440 --> 00:23:58,450
just go and fix it the problem here that

00:23:55,420 --> 00:24:01,330
vulnerability is like vulnerability

00:23:58,450 --> 00:24:05,180
fixes are might be bit more difficult to

00:24:01,330 --> 00:24:07,970
implement and they require some

00:24:05,180 --> 00:24:10,750
expertise to create a fix at least

00:24:07,970 --> 00:24:14,570
that's what developers told me so

00:24:10,750 --> 00:24:17,720
because if you do not fix it correctly

00:24:14,570 --> 00:24:19,580
then everyone is just thinks that okay

00:24:17,720 --> 00:24:23,000
it's fixed so it's safe and they can use

00:24:19,580 --> 00:24:28,130
it and yeah but if it's not done it's a

00:24:23,000 --> 00:24:30,560
problem so so yeah so there should be

00:24:28,130 --> 00:24:34,600
some way how to basically control the

00:24:30,560 --> 00:24:39,620
quality of such fixes yeah that's what I

00:24:34,600 --> 00:24:41,420
know the question from hex rx hex rx was

00:24:39,620 --> 00:24:43,790
asking do you think the unit test

00:24:41,420 --> 00:24:45,740
coverage is a significant metric by the

00:24:43,790 --> 00:24:47,120
way I've got some research I'm gonna I'm

00:24:45,740 --> 00:24:55,370
gonna throw back at you with this one

00:24:47,120 --> 00:24:57,140
but God what do you think okay actually

00:24:55,370 --> 00:25:00,140
I also participated to one of the

00:24:57,140 --> 00:25:02,810
researchers away we we tried actually to

00:25:00,140 --> 00:25:04,250
look if we can write some tests to

00:25:02,810 --> 00:25:08,960
succeed some of the vulnerabilities and

00:25:04,250 --> 00:25:11,690
well in our research we discover that

00:25:08,960 --> 00:25:15,110
it's not always possible to just fire

00:25:11,690 --> 00:25:18,470
all of them and that well this is called

00:25:15,110 --> 00:25:21,440
reachability analysis and so sometimes

00:25:18,470 --> 00:25:23,960
you can just find that so there is a

00:25:21,440 --> 00:25:26,810
connection like statically but then you

00:25:23,960 --> 00:25:29,000
can also try to run some unit tests and

00:25:26,810 --> 00:25:31,970
this would be the dynamic analysis and

00:25:29,000 --> 00:25:35,540
that will guys if it can trigger the

00:25:31,970 --> 00:25:40,220
vulnerability then it's for sure it's

00:25:35,540 --> 00:25:42,950
for sure executable but if not then what

00:25:40,220 --> 00:25:45,350
I mean if there is still this connection

00:25:42,950 --> 00:25:48,160
that is reported by a static analysis

00:25:45,350 --> 00:25:52,940
then it still should be kind of fixed so

00:25:48,160 --> 00:25:56,540
answering the question yes the dynamic

00:25:52,940 --> 00:25:58,400
analysis so it's the unit testing it's

00:25:56,540 --> 00:26:02,630
it can help you find vulnerabilities

00:25:58,400 --> 00:26:04,670
it's for unit testing report you

00:26:02,630 --> 00:26:11,720
something then it's for sure you need to

00:26:04,670 --> 00:26:13,910
fix it but for the other part so here I

00:26:11,720 --> 00:26:15,860
would say that we need to combine the

00:26:13,910 --> 00:26:18,110
two things so you need to combine the

00:26:15,860 --> 00:26:19,140
unit tests with also some static

00:26:18,110 --> 00:26:23,429
resolutions

00:26:19,140 --> 00:26:23,760
like with Ribeira talents and so on got

00:26:23,429 --> 00:26:26,250
it

00:26:23,760 --> 00:26:30,150
that's fantastic yeah they'll send out a

00:26:26,250 --> 00:26:32,100
tweet to research paper read a while ago

00:26:30,150 --> 00:26:34,950
so at Martin Woodward on Twitter if you

00:26:32,100 --> 00:26:38,040
want to get that but it's it basically

00:26:34,950 --> 00:26:39,929
it linked not test coverage to the

00:26:38,040 --> 00:26:43,320
biggest source of issues and things like

00:26:39,929 --> 00:26:44,910
that and it wasn't you know static code

00:26:43,320 --> 00:26:47,070
analysis errors or some of these such

00:26:44,910 --> 00:26:49,380
things actually the metric that most

00:26:47,070 --> 00:26:51,720
accurately predicted where errors were

00:26:49,380 --> 00:26:54,600
going to occur was organizational

00:26:51,720 --> 00:26:56,990
complexity so how how crazy is your org

00:26:54,600 --> 00:26:59,070
chart and it's amazing how much you know

00:26:56,990 --> 00:27:00,510
problems would come about in software

00:26:59,070 --> 00:27:03,000
development they're actually because of

00:27:00,510 --> 00:27:05,580
the the people the wetware rather than

00:27:03,000 --> 00:27:08,280
you know getting above 80% on your test

00:27:05,580 --> 00:27:10,140
coverage or whatever anyway right well

00:27:08,280 --> 00:27:11,190
even that was a great session so thank

00:27:10,140 --> 00:27:13,740
you very much for your time we really

00:27:11,190 --> 00:27:15,330
appreciated that so speech later he's

00:27:13,740 --> 00:27:17,010
gonna be in Q&A if you wanna get in

00:27:15,330 --> 00:27:22,190
contact so see you later on thank you

00:27:17,010 --> 00:27:22,190

YouTube URL: https://www.youtube.com/watch?v=GtLZp6DbcE4


