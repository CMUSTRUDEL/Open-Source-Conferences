Title: Accelerating cloud native deployment with GitHub Actions and AWS - GitHub Satellite 2020
Publication date: 2020-05-07
Playlist: GitHub Satellite 2020 - Work
Description: 
	Presented by Christian Weber, Amazon AWS

For many developers, deploying to the cloud is a challenging journey: Selecting the 'right' tools, writing deployment scripts, and choosing a cloud provider can be a daunting task for developers looking to go Cloud Native for their application, and their organization. GitHub Actions and AWS can make developers' lives easier. But how do you get started? How can a developer deliver an idea and deploy it to the cloud without friction?
 
In this talk, Christian Weber will cover the best practices of using GitHub Actions and AWS, including writing agnostic deployment scripts with GitHub Actions to share across teams; commonly overlooked security risks when deploying via an AWS Pipeline; and how to use GitHub Actions and AWS for A/B and Blue/Green deployment techniques.


GitHub Satellite: A community connected by code

On May 6th, we threw a free virtual event featuring developers working together on the worldâ€™s software, announcements from the GitHub team, and inspiring performances by artists who code.

More information: https://githubsatellite.com
Schedule: https://githubsatellite.com/schedule/
Captions: 
	00:00:09,519 --> 00:00:13,840
thank you

00:00:10,320 --> 00:00:14,719
thank you chado thank you and emoji for

00:00:13,840 --> 00:00:17,119
that introduction

00:00:14,719 --> 00:00:18,800
i'm really excited to be here and first

00:00:17,119 --> 00:00:21,279
of all i just wanted to thank github

00:00:18,800 --> 00:00:22,720
uh for the opportunity to come speak at

00:00:21,279 --> 00:00:24,320
github satellite today

00:00:22,720 --> 00:00:25,840
uh this is the first time that i'm

00:00:24,320 --> 00:00:27,039
presenting at a conference from the

00:00:25,840 --> 00:00:29,439
comfort of my own home

00:00:27,039 --> 00:00:30,160
so it's pretty nice to be here in

00:00:29,439 --> 00:00:32,000
chicago

00:00:30,160 --> 00:00:33,840
uh while reaching uh everyone around the

00:00:32,000 --> 00:00:36,160
world so thank you for that

00:00:33,840 --> 00:00:36,880
and then also i'd like to thank aws for

00:00:36,160 --> 00:00:39,680
allowing me

00:00:36,880 --> 00:00:40,640
to present at this conference as well so

00:00:39,680 --> 00:00:42,079
as jado said

00:00:40,640 --> 00:00:43,760
my name is christian weber i am a

00:00:42,079 --> 00:00:45,840
developer advocate at aws

00:00:43,760 --> 00:00:47,360
and what i'm focused on is developer

00:00:45,840 --> 00:00:49,280
user experience

00:00:47,360 --> 00:00:51,360
and tooling and all of the dev tools

00:00:49,280 --> 00:00:53,199
that aws has on our platform so if

00:00:51,360 --> 00:00:56,879
you've ever used tools like

00:00:53,199 --> 00:00:59,840
code build code commit cloud9 the aws

00:00:56,879 --> 00:01:00,960
cdks uh the cloud development kit and so

00:00:59,840 --> 00:01:03,280
on and so forth

00:01:00,960 --> 00:01:04,640
those are the tools that my team covers

00:01:03,280 --> 00:01:07,680
and what we're focused on

00:01:04,640 --> 00:01:09,200
is really helping engineers and users

00:01:07,680 --> 00:01:11,360
and our customers

00:01:09,200 --> 00:01:13,360
use our tools that integrates into their

00:01:11,360 --> 00:01:15,119
workload because we want to meet

00:01:13,360 --> 00:01:16,400
customers and developers where they're

00:01:15,119 --> 00:01:18,240
at

00:01:16,400 --> 00:01:20,080
so really what i'm looking forward to

00:01:18,240 --> 00:01:22,560
presenting in this talk is meeting

00:01:20,080 --> 00:01:23,920
a customer where they're at and helping

00:01:22,560 --> 00:01:26,400
them use

00:01:23,920 --> 00:01:28,880
our tools integrated with the github and

00:01:26,400 --> 00:01:32,880
github actions platform

00:01:28,880 --> 00:01:35,680
just some quick housekeeping

00:01:32,880 --> 00:01:36,720
aws is still hiring like crazy so during

00:01:35,680 --> 00:01:38,840
this time if you

00:01:36,720 --> 00:01:41,119
are looking for work or need help

00:01:38,840 --> 00:01:42,640
navigating applying for aws

00:01:41,119 --> 00:01:44,320
feel free to reach out to me on twitter

00:01:42,640 --> 00:01:45,520
that is my twitter handle and it will be

00:01:44,320 --> 00:01:47,280
available throughout

00:01:45,520 --> 00:01:50,240
i'm really looking forward to talking

00:01:47,280 --> 00:01:52,880
with all of you uh today

00:01:50,240 --> 00:01:53,680
so to jump into this uh first i want to

00:01:52,880 --> 00:01:58,159
start with

00:01:53,680 --> 00:02:01,360
why this is important to me and why um

00:01:58,159 --> 00:02:01,360
i think this is really important

00:02:02,320 --> 00:02:07,680
so before i join aws

00:02:05,600 --> 00:02:09,360
and before i join the technology sector

00:02:07,680 --> 00:02:10,879
i spent about seven years working in

00:02:09,360 --> 00:02:13,040
financial services

00:02:10,879 --> 00:02:15,120
uh from the operations side of the house

00:02:13,040 --> 00:02:16,000
so if you can think of something to do

00:02:15,120 --> 00:02:18,800
in operations

00:02:16,000 --> 00:02:19,920
chances are i served that role i did

00:02:18,800 --> 00:02:22,879
level one support

00:02:19,920 --> 00:02:24,640
level two support level three support i

00:02:22,879 --> 00:02:26,800
even wrote release automation pipelines

00:02:24,640 --> 00:02:28,720
i helped manage those pipelines

00:02:26,800 --> 00:02:30,480
uh i helped integrate monitoring

00:02:28,720 --> 00:02:31,599
solutions into the software that we were

00:02:30,480 --> 00:02:34,000
observing

00:02:31,599 --> 00:02:35,760
i pretty much did it all and as i

00:02:34,000 --> 00:02:36,959
transitioned out of financial services

00:02:35,760 --> 00:02:39,280
and moved into

00:02:36,959 --> 00:02:41,040
the tech sector about five years ago i

00:02:39,280 --> 00:02:43,360
started noticing when talking to new

00:02:41,040 --> 00:02:45,599
customers in contemporary industries

00:02:43,360 --> 00:02:47,360
that other organizations and other

00:02:45,599 --> 00:02:48,959
industries were moving a lot faster than

00:02:47,360 --> 00:02:50,080
organizations that have a lot of

00:02:48,959 --> 00:02:54,239
constraints around

00:02:50,080 --> 00:02:56,879
security compliance and auditing and so

00:02:54,239 --> 00:02:57,519
that experience that i had i wanted to

00:02:56,879 --> 00:02:59,519
take that

00:02:57,519 --> 00:03:01,519
perspective and think about that lens of

00:02:59,519 --> 00:03:05,519
experience as i

00:03:01,519 --> 00:03:06,800
um began my career in technology so

00:03:05,519 --> 00:03:09,120
when i started putting together this

00:03:06,800 --> 00:03:10,800
talk what i really wanted to cover was

00:03:09,120 --> 00:03:12,400
what does that organization look like

00:03:10,800 --> 00:03:14,319
that is beginning their cloud

00:03:12,400 --> 00:03:15,840
cloud journey you know a lot of

00:03:14,319 --> 00:03:17,599
organizations are

00:03:15,840 --> 00:03:19,760
adopting cloud native technology and

00:03:17,599 --> 00:03:22,239
cloud-native application development

00:03:19,760 --> 00:03:23,840
but a lot of times they struggle with

00:03:22,239 --> 00:03:26,000
existing methodologies

00:03:23,840 --> 00:03:27,760
or they try a lift and shift sort of

00:03:26,000 --> 00:03:29,360
methodology in terms of how they're

00:03:27,760 --> 00:03:31,920
delivering software

00:03:29,360 --> 00:03:33,200
and they struggle to deliver as fast as

00:03:31,920 --> 00:03:35,440
some of their competitors

00:03:33,200 --> 00:03:37,440
and so really what i wanted to show here

00:03:35,440 --> 00:03:37,920
is the art of the possible and what we

00:03:37,440 --> 00:03:41,040
can

00:03:37,920 --> 00:03:43,360
do to help developers deliver faster

00:03:41,040 --> 00:03:44,720
so i'd like to tell you a story of a

00:03:43,360 --> 00:03:47,040
fictional organization

00:03:44,720 --> 00:03:48,239
that is trying to overcome these

00:03:47,040 --> 00:03:50,560
constraints

00:03:48,239 --> 00:03:51,760
and they're doing that with two really

00:03:50,560 --> 00:03:53,760
exciting teams

00:03:51,760 --> 00:03:55,360
two great engineers by the name of sarah

00:03:53,760 --> 00:03:56,959
and jen who are our heroes throughout

00:03:55,360 --> 00:03:58,720
this journey

00:03:56,959 --> 00:04:00,480
we're gonna navigate the conversations

00:03:58,720 --> 00:04:02,319
that they have to help

00:04:00,480 --> 00:04:04,400
understand why they're using pull

00:04:02,319 --> 00:04:05,599
request-based workflows using tools like

00:04:04,400 --> 00:04:10,000
elastic bean stock

00:04:05,599 --> 00:04:13,040
and github actions we'll then segue into

00:04:10,000 --> 00:04:16,640
well now that they've taken a change how

00:04:13,040 --> 00:04:16,640
do they deliver code to production

00:04:17,440 --> 00:04:21,040
so to meet these groups and who they are

00:04:20,160 --> 00:04:22,720
let's

00:04:21,040 --> 00:04:24,639
put them into two categories let's put

00:04:22,720 --> 00:04:27,199
them into application development

00:04:24,639 --> 00:04:28,560
and our uh production team our

00:04:27,199 --> 00:04:30,880
operations team

00:04:28,560 --> 00:04:31,680
so team sarah is responsible for

00:04:30,880 --> 00:04:35,120
development

00:04:31,680 --> 00:04:36,880
and uh testing our application set

00:04:35,120 --> 00:04:38,800
and team gen is delivering this

00:04:36,880 --> 00:04:40,880
application to production

00:04:38,800 --> 00:04:42,960
while they collaborate the organization

00:04:40,880 --> 00:04:44,720
that they work for is still constrained

00:04:42,960 --> 00:04:46,000
by their security and compliance

00:04:44,720 --> 00:04:48,080
requirements and that

00:04:46,000 --> 00:04:49,440
sarah's team does not have access to the

00:04:48,080 --> 00:04:50,800
production environment in which they're

00:04:49,440 --> 00:04:54,240
deploying code

00:04:50,800 --> 00:04:57,040
so how can we help and these

00:04:54,240 --> 00:04:58,080
two teams were brought on specifically

00:04:57,040 --> 00:05:00,800
because

00:04:58,080 --> 00:05:02,560
their organization recently moved from

00:05:00,800 --> 00:05:04,240
waterfall-style development and that

00:05:02,560 --> 00:05:06,880
they were receiving requirements

00:05:04,240 --> 00:05:08,560
and tearing that down into a structured

00:05:06,880 --> 00:05:10,479
release management process

00:05:08,560 --> 00:05:12,320
and are now experimenting with

00:05:10,479 --> 00:05:13,280
methodologies such as continuous

00:05:12,320 --> 00:05:16,000
integration

00:05:13,280 --> 00:05:17,680
and continuous delivery so sarah and jen

00:05:16,000 --> 00:05:18,080
are our experts and they've been brought

00:05:17,680 --> 00:05:21,440
on

00:05:18,080 --> 00:05:22,880
to help navigate this um new way of

00:05:21,440 --> 00:05:25,120
thinking and this new way of working for

00:05:22,880 --> 00:05:26,800
this organization

00:05:25,120 --> 00:05:28,720
at the same time they're always also

00:05:26,800 --> 00:05:30,240
responsible for developing new cloud

00:05:28,720 --> 00:05:31,680
native applications

00:05:30,240 --> 00:05:33,759
so one of the first things that they've

00:05:31,680 --> 00:05:35,280
been working on is an application to

00:05:33,759 --> 00:05:36,639
help relieve stress within their

00:05:35,280 --> 00:05:39,360
organization

00:05:36,639 --> 00:05:39,919
in the industry that they work in it's

00:05:39,360 --> 00:05:42,160
uh

00:05:39,919 --> 00:05:44,000
oftentimes very stressful for their end

00:05:42,160 --> 00:05:46,400
users and their customers

00:05:44,000 --> 00:05:47,039
meaning that money can be lost very

00:05:46,400 --> 00:05:49,600
quickly

00:05:47,039 --> 00:05:50,320
or money can be made very quickly but

00:05:49,600 --> 00:05:51,919
either way

00:05:50,320 --> 00:05:53,360
it is a very high impact and high

00:05:51,919 --> 00:05:55,120
stressful environment

00:05:53,360 --> 00:05:56,720
so they worked together and they

00:05:55,120 --> 00:05:58,560
delivered an application that is

00:05:56,720 --> 00:06:00,000
absolutely mission critical to the

00:05:58,560 --> 00:06:01,759
delivery uh

00:06:00,000 --> 00:06:03,440
to the to the business value to the

00:06:01,759 --> 00:06:04,560
value of their business

00:06:03,440 --> 00:06:07,120
and what this mission critical

00:06:04,560 --> 00:06:09,600
application does is when a user is under

00:06:07,120 --> 00:06:11,199
periods of extreme stress and duress

00:06:09,600 --> 00:06:13,759
they can go to an internal web

00:06:11,199 --> 00:06:15,919
application or an internal website

00:06:13,759 --> 00:06:17,440
that is hosted by a very cute dog that

00:06:15,919 --> 00:06:20,080
gives them their favorite

00:06:17,440 --> 00:06:21,199
or random dad joke they can go here at

00:06:20,080 --> 00:06:22,800
any time of the day

00:06:21,199 --> 00:06:25,280
click on it and now they've got a brand

00:06:22,800 --> 00:06:27,039
new joke so this is very important for

00:06:25,280 --> 00:06:28,880
those users they need to have this

00:06:27,039 --> 00:06:29,360
website up and running at any given

00:06:28,880 --> 00:06:31,919
moment

00:06:29,360 --> 00:06:33,440
they need to scale and most importantly

00:06:31,919 --> 00:06:34,000
they need those two teams need to be

00:06:33,440 --> 00:06:37,120
able to work

00:06:34,000 --> 00:06:39,759
together to deliver and deploy

00:06:37,120 --> 00:06:41,199
so when sarah and jen began working

00:06:39,759 --> 00:06:43,840
together

00:06:41,199 --> 00:06:46,080
on this new application one of the first

00:06:43,840 --> 00:06:48,319
things that they had to decide was

00:06:46,080 --> 00:06:49,759
what code base or what technology am i

00:06:48,319 --> 00:06:51,440
going to use

00:06:49,759 --> 00:06:53,680
and they started doing some research and

00:06:51,440 --> 00:06:55,440
they found common ground

00:06:53,680 --> 00:06:56,720
and the engineers that worked on both

00:06:55,440 --> 00:06:59,199
sides of the business

00:06:56,720 --> 00:07:01,039
and they found that the common language

00:06:59,199 --> 00:07:02,720
and the common framework that was most

00:07:01,039 --> 00:07:05,599
uh used between the two groups was

00:07:02,720 --> 00:07:07,280
python so they chose flask a lightweight

00:07:05,599 --> 00:07:09,360
web application framework

00:07:07,280 --> 00:07:10,880
specifically because it allowed them to

00:07:09,360 --> 00:07:12,319
include all of their frontend code and

00:07:10,880 --> 00:07:14,160
all of their back-end code

00:07:12,319 --> 00:07:17,840
as well as their database models within

00:07:14,160 --> 00:07:17,840
the application

00:07:18,400 --> 00:07:22,720
in addition to that they decided that

00:07:21,039 --> 00:07:24,240
they wanted all of their application

00:07:22,720 --> 00:07:24,800
infrastructure which they were treating

00:07:24,240 --> 00:07:26,720
as code

00:07:24,800 --> 00:07:29,360
to live right next to the code base as

00:07:26,720 --> 00:07:31,919
well so when they got to delivery they

00:07:29,360 --> 00:07:34,240
wouldn't have to navigate very far

00:07:31,919 --> 00:07:36,000
and they could experiment and use it as

00:07:34,240 --> 00:07:38,240
they would their regular application

00:07:36,000 --> 00:07:38,240
code

00:07:38,479 --> 00:07:42,960
next once they decided on that the next

00:07:41,599 --> 00:07:44,160
thing that they had to think about and

00:07:42,960 --> 00:07:46,639
make a decision on

00:07:44,160 --> 00:07:49,039
was the application architecture where

00:07:46,639 --> 00:07:50,080
exactly amounts of software and how am i

00:07:49,039 --> 00:07:52,240
going to host it

00:07:50,080 --> 00:07:53,440
am i going to use a traditional server

00:07:52,240 --> 00:07:57,120
am i going to use

00:07:53,440 --> 00:07:58,879
a regular ec2 instance am i going to

00:07:57,120 --> 00:08:00,479
manage all of the security updates and

00:07:58,879 --> 00:08:02,160
the patches and

00:08:00,479 --> 00:08:04,080
as sarah and jen talked about it what

00:08:02,160 --> 00:08:05,680
they realized they needed was an ability

00:08:04,080 --> 00:08:07,360
to deliver code quickly

00:08:05,680 --> 00:08:08,960
and move on to the next feature so their

00:08:07,360 --> 00:08:11,440
developers could focus on

00:08:08,960 --> 00:08:12,879
new tasks as they came in so as they

00:08:11,440 --> 00:08:14,639
looked at all the options

00:08:12,879 --> 00:08:17,680
the platform that fit best for that

00:08:14,639 --> 00:08:20,400
organization was elastic bean stock

00:08:17,680 --> 00:08:21,440
and for them the benefits were obvious

00:08:20,400 --> 00:08:23,360
for them

00:08:21,440 --> 00:08:25,120
they wanted to move quickly but more

00:08:23,360 --> 00:08:27,919
importantly they wanted to maintain

00:08:25,120 --> 00:08:29,440
infrastructure they needed to maintain

00:08:27,919 --> 00:08:30,319
their infrastructure in a streamlined

00:08:29,440 --> 00:08:31,840
fashion

00:08:30,319 --> 00:08:33,919
they didn't want to have to manually

00:08:31,840 --> 00:08:35,440
spin up and connect resources

00:08:33,919 --> 00:08:36,880
and they wanted to be able to again

00:08:35,440 --> 00:08:37,519
deploy code and move on to the next

00:08:36,880 --> 00:08:38,800
feature

00:08:37,519 --> 00:08:40,719
so when they looked at how elastic

00:08:38,800 --> 00:08:44,720
beanstalk could solve their issue

00:08:40,719 --> 00:08:47,440
they saw that all of it was deployed

00:08:44,720 --> 00:08:49,120
automatically and they could focus on

00:08:47,440 --> 00:08:51,839
the change sets at hand no worry

00:08:49,120 --> 00:08:53,040
no worrying about security groups

00:08:51,839 --> 00:08:54,080
setting up their own elastic load

00:08:53,040 --> 00:08:55,600
balancers

00:08:54,080 --> 00:08:57,519
or setting up their own uh within an

00:08:55,600 --> 00:08:59,440
availability zone no having to worry

00:08:57,519 --> 00:09:01,040
about auto scaling and so forth

00:08:59,440 --> 00:09:02,720
and then for their database layer they

00:09:01,040 --> 00:09:05,360
chose amazon rds

00:09:02,720 --> 00:09:08,160
a managed managed database service for

00:09:05,360 --> 00:09:11,360
their mysql backend

00:09:08,160 --> 00:09:13,360
so this is great but now the next thing

00:09:11,360 --> 00:09:14,880
happens a feature change a feature

00:09:13,360 --> 00:09:18,240
request comes in

00:09:14,880 --> 00:09:18,880
so if you remember the website uh that i

00:09:18,240 --> 00:09:20,800
posted here

00:09:18,880 --> 00:09:22,800
a few slides ago sarah and jen are

00:09:20,800 --> 00:09:25,200
responsible for a website that has a

00:09:22,800 --> 00:09:27,760
very uh important need in the business

00:09:25,200 --> 00:09:30,399
right to help developers relieve stress

00:09:27,760 --> 00:09:30,880
and they recently got feedback from a

00:09:30,399 --> 00:09:33,680
team

00:09:30,880 --> 00:09:34,959
that is relying on this application and

00:09:33,680 --> 00:09:37,519
let them know that

00:09:34,959 --> 00:09:38,800
while the application was great the

00:09:37,519 --> 00:09:40,480
background color was a little bit

00:09:38,800 --> 00:09:41,760
straining on the eyes and when they were

00:09:40,480 --> 00:09:44,000
going there to

00:09:41,760 --> 00:09:44,959
help them feel better throughout the day

00:09:44,000 --> 00:09:46,560
they think it would be a little bit

00:09:44,959 --> 00:09:48,080
nicer if

00:09:46,560 --> 00:09:49,440
maybe that background color was just a

00:09:48,080 --> 00:09:50,080
little bit easier on the eyes it doesn't

00:09:49,440 --> 00:09:53,279
have to be a lot

00:09:50,080 --> 00:09:54,480
but what could they do about that so in

00:09:53,279 --> 00:09:57,600
this new way

00:09:54,480 --> 00:09:58,720
in this new model of delivering software

00:09:57,600 --> 00:10:01,760
what does that look like for the

00:09:58,720 --> 00:10:04,880
individual developer how can they

00:10:01,760 --> 00:10:06,640
uh deliver a change well for the

00:10:04,880 --> 00:10:08,560
individual developer

00:10:06,640 --> 00:10:10,240
nothing uh nothing much has to change

00:10:08,560 --> 00:10:12,000
unless they need it to

00:10:10,240 --> 00:10:13,600
so in this case a developer would clone

00:10:12,000 --> 00:10:15,279
a repository locally

00:10:13,600 --> 00:10:16,880
they would get it up and running as per

00:10:15,279 --> 00:10:17,839
a development environment so they would

00:10:16,880 --> 00:10:19,839
use the

00:10:17,839 --> 00:10:21,279
internal flask web server or internal

00:10:19,839 --> 00:10:24,000
flask development server to make a

00:10:21,279 --> 00:10:27,279
change they would go into a css document

00:10:24,000 --> 00:10:29,680
they would uh edit the body

00:10:27,279 --> 00:10:30,959
tag in there to be a little bit softer

00:10:29,680 --> 00:10:33,519
color so in this case

00:10:30,959 --> 00:10:35,600
a little bit slightly more yellow to be

00:10:33,519 --> 00:10:40,079
easier on the eyes

00:10:35,600 --> 00:10:40,079
and go ahead and make that change and

00:10:40,240 --> 00:10:43,360
be okay with it now in the traditional

00:10:42,720 --> 00:10:45,040
uh

00:10:43,360 --> 00:10:47,839
world of application delivery where this

00:10:45,040 --> 00:10:49,440
organization was before

00:10:47,839 --> 00:10:51,200
this change was a little bit hard to get

00:10:49,440 --> 00:10:52,959
feedback on and it was difficult for a

00:10:51,200 --> 00:10:53,920
developer to push this out to another

00:10:52,959 --> 00:10:55,360
environment

00:10:53,920 --> 00:10:56,959
what they would have to do is package up

00:10:55,360 --> 00:10:59,200
that software package up all the

00:10:56,959 --> 00:11:01,360
dependencies

00:10:59,200 --> 00:11:03,200
send that over to another team either

00:11:01,360 --> 00:11:04,800
through email or some sort of drop

00:11:03,200 --> 00:11:06,480
and then they would have to hope that

00:11:04,800 --> 00:11:07,519
that uh they had provided enough

00:11:06,480 --> 00:11:11,440
instructions

00:11:07,519 --> 00:11:13,200
and uh have that to be delivered

00:11:11,440 --> 00:11:15,600
now sarah and jen knew that they didn't

00:11:13,200 --> 00:11:16,880
want to repeat this kind of process

00:11:15,600 --> 00:11:18,399
and they took a look at the tools that

00:11:16,880 --> 00:11:19,680
they had and they knew that git and

00:11:18,399 --> 00:11:21,279
github were

00:11:19,680 --> 00:11:23,200
two important tools they were using with

00:11:21,279 --> 00:11:24,480
this and they figured that there had to

00:11:23,200 --> 00:11:27,600
be a better way

00:11:24,480 --> 00:11:29,760
to help get feedback very quickly

00:11:27,600 --> 00:11:31,120
so that what they decided on was that

00:11:29,760 --> 00:11:33,519
they were going to decide that they

00:11:31,120 --> 00:11:35,040
for their test environments and for

00:11:33,519 --> 00:11:37,040
their development environments

00:11:35,040 --> 00:11:38,560
the pull request was going to be the

00:11:37,040 --> 00:11:39,920
change set was going to be the entire

00:11:38,560 --> 00:11:42,160
scope of change for

00:11:39,920 --> 00:11:44,560
their developer they also had a

00:11:42,160 --> 00:11:46,480
requirement that

00:11:44,560 --> 00:11:47,600
no environment was going to be set up

00:11:46,480 --> 00:11:49,600
beforehand so

00:11:47,600 --> 00:11:51,600
no managing infrastructure no managing a

00:11:49,600 --> 00:11:53,440
test server or uat server

00:11:51,600 --> 00:11:54,639
essentially we want these we want this

00:11:53,440 --> 00:11:57,200
infrastructure to be

00:11:54,639 --> 00:11:59,279
event driven we want our environment

00:11:57,200 --> 00:12:00,880
configuration to live with our code

00:11:59,279 --> 00:12:02,560
and at the same time because we have

00:12:00,880 --> 00:12:04,079
that requirement around

00:12:02,560 --> 00:12:06,560
developers not having access to

00:12:04,079 --> 00:12:08,800
production we have to keep our main line

00:12:06,560 --> 00:12:10,480
or our release branch protected at all

00:12:08,800 --> 00:12:12,000
times so a developer

00:12:10,480 --> 00:12:13,680
shouldn't be able to go in there click

00:12:12,000 --> 00:12:14,959
the button and then all of a sudden in

00:12:13,680 --> 00:12:16,240
production we have a change because

00:12:14,959 --> 00:12:17,680
that's the constraint within our

00:12:16,240 --> 00:12:20,320
organization

00:12:17,680 --> 00:12:20,880
so that brings up quite a challenge for

00:12:20,320 --> 00:12:22,560
sarah

00:12:20,880 --> 00:12:24,720
and and jen because they have all these

00:12:22,560 --> 00:12:26,480
constraints and how can they work

00:12:24,720 --> 00:12:28,639
together and collaborate

00:12:26,480 --> 00:12:30,240
to understand how each other is working

00:12:28,639 --> 00:12:31,760
well that's exactly what they did they

00:12:30,240 --> 00:12:33,279
had to collaborate and understand each

00:12:31,760 --> 00:12:36,720
other's changes

00:12:33,279 --> 00:12:38,480
and how people were applying changes so

00:12:36,720 --> 00:12:40,240
in our case how would sarah's

00:12:38,480 --> 00:12:44,000
application development team

00:12:40,240 --> 00:12:45,120
test a change well sarah and jen worked

00:12:44,000 --> 00:12:46,720
together quite a bit

00:12:45,120 --> 00:12:48,880
and they came up with a solution around

00:12:46,720 --> 00:12:50,959
actions and github actions

00:12:48,880 --> 00:12:52,639
and what they decided on was that the

00:12:50,959 --> 00:12:54,399
pull request would represent their

00:12:52,639 --> 00:12:56,880
development environment

00:12:54,399 --> 00:12:58,079
and in github there is a very handy

00:12:56,880 --> 00:12:59,680
feature

00:12:58,079 --> 00:13:02,320
on the back end that says for every time

00:12:59,680 --> 00:13:04,399
an event like a pull request is open

00:13:02,320 --> 00:13:06,320
we can trigger a github action to

00:13:04,399 --> 00:13:08,720
execute on our behalf

00:13:06,320 --> 00:13:10,000
and what that action can do is go out to

00:13:08,720 --> 00:13:12,079
aws

00:13:10,000 --> 00:13:13,760
send it some information about our pull

00:13:12,079 --> 00:13:15,200
request and go ahead and deploy that

00:13:13,760 --> 00:13:18,160
infrastructure

00:13:15,200 --> 00:13:19,680
this allowed this team to get a

00:13:18,160 --> 00:13:21,839
production

00:13:19,680 --> 00:13:23,200
like environment without long-running

00:13:21,839 --> 00:13:24,800
infrastructure

00:13:23,200 --> 00:13:27,040
sarah and jenna talked about this

00:13:24,800 --> 00:13:27,839
because long-running infrastructure in

00:13:27,040 --> 00:13:30,480
their

00:13:27,839 --> 00:13:32,399
organization caused a lot of prior pain

00:13:30,480 --> 00:13:33,760
in that

00:13:32,399 --> 00:13:35,839
servers that were running for a long

00:13:33,760 --> 00:13:37,680
time tended to have dependency drift

00:13:35,839 --> 00:13:40,079
and tended to become very unique and

00:13:37,680 --> 00:13:41,120
very hard to maintain so when a test was

00:13:40,079 --> 00:13:43,760
going through a

00:13:41,120 --> 00:13:45,680
server like this it was very often hard

00:13:43,760 --> 00:13:47,360
to understand whether or not

00:13:45,680 --> 00:13:49,680
it would stay the same and deploy just

00:13:47,360 --> 00:13:51,199
the same in production

00:13:49,680 --> 00:13:53,360
another requirement that they needed in

00:13:51,199 --> 00:13:54,639
this sort of workflow was the ability to

00:13:53,360 --> 00:13:57,120
promote this environment

00:13:54,639 --> 00:13:57,680
via a blue green deployment methodology

00:13:57,120 --> 00:13:58,959
because

00:13:57,680 --> 00:14:00,959
when they were deploying front-end

00:13:58,959 --> 00:14:01,519
changes like this they needed to be able

00:14:00,959 --> 00:14:03,120
to get

00:14:01,519 --> 00:14:05,440
feedback from their users through

00:14:03,120 --> 00:14:08,079
methods such as a b testing

00:14:05,440 --> 00:14:10,560
so what happened here is actions was

00:14:08,079 --> 00:14:12,000
able to facilitate all of this

00:14:10,560 --> 00:14:14,800
and i know what you're thinking right

00:14:12,000 --> 00:14:15,440
now this is a lot of information to take

00:14:14,800 --> 00:14:17,440
in

00:14:15,440 --> 00:14:18,800
and by the way it kind of sounds magical

00:14:17,440 --> 00:14:20,959
in a way

00:14:18,800 --> 00:14:23,920
how is all of this possible what is the

00:14:20,959 --> 00:14:27,120
magic trick what is the secret sauce

00:14:23,920 --> 00:14:29,360
and i'm sorry to inform you there really

00:14:27,120 --> 00:14:31,519
is no magic trick for this

00:14:29,360 --> 00:14:33,120
what happened here was sarah and jen

00:14:31,519 --> 00:14:36,079
came together

00:14:33,120 --> 00:14:37,440
collaborated and understood each other's

00:14:36,079 --> 00:14:39,199
requirements

00:14:37,440 --> 00:14:41,360
because they were working together on a

00:14:39,199 --> 00:14:44,079
common goal and a common

00:14:41,360 --> 00:14:46,000
stream of information they understood

00:14:44,079 --> 00:14:48,240
what the steps were necessary

00:14:46,000 --> 00:14:50,240
to create a repeatable environment

00:14:48,240 --> 00:14:51,519
without having to do it manually

00:14:50,240 --> 00:14:53,519
because they knew even if they were able

00:14:51,519 --> 00:14:55,199
to define all of the manual steps in a

00:14:53,519 --> 00:14:57,440
run book

00:14:55,199 --> 00:14:58,880
sometimes a human error happens and

00:14:57,440 --> 00:15:00,720
while that was okay

00:14:58,880 --> 00:15:02,639
they knew there was a better way to make

00:15:00,720 --> 00:15:04,240
this repeatable so they chose github

00:15:02,639 --> 00:15:06,480
actions for that

00:15:04,240 --> 00:15:07,920
and the way that they structured it was

00:15:06,480 --> 00:15:08,800
they wanted to make sure that they had a

00:15:07,920 --> 00:15:10,639
build environment

00:15:08,800 --> 00:15:12,320
that was so they created a build

00:15:10,639 --> 00:15:13,519
environment with the elastic beanstalk

00:15:12,320 --> 00:15:15,839
cli

00:15:13,519 --> 00:15:18,399
showing that they could just download

00:15:15,839 --> 00:15:20,320
the the cli application

00:15:18,399 --> 00:15:22,240
they could run it install all of its

00:15:20,320 --> 00:15:24,160
necessary dependencies

00:15:22,240 --> 00:15:26,240
and then once that was done they could

00:15:24,160 --> 00:15:28,240
then go into their uh

00:15:26,240 --> 00:15:30,160
testing whether that was linting with

00:15:28,240 --> 00:15:32,560
flake8 or running their own

00:15:30,160 --> 00:15:33,600
unit test and pi test they could execute

00:15:32,560 --> 00:15:35,440
all of those tests

00:15:33,600 --> 00:15:36,959
before it was delivered to their test

00:15:35,440 --> 00:15:38,639
environment to make sure that there

00:15:36,959 --> 00:15:42,480
wouldn't be any gotchas when it was

00:15:38,639 --> 00:15:44,160
sent out to a qa or a uat environment

00:15:42,480 --> 00:15:46,320
once all of that was done then they

00:15:44,160 --> 00:15:48,560
could move into the actual deployment

00:15:46,320 --> 00:15:51,199
phase of their test change

00:15:48,560 --> 00:15:54,560
so rather than hard code all of their

00:15:51,199 --> 00:15:57,279
parameters for aws like their aws tokens

00:15:54,560 --> 00:15:58,399
they started using github's secret uh

00:15:57,279 --> 00:16:00,240
parameter store

00:15:58,399 --> 00:16:02,240
that will would allow them to store

00:16:00,240 --> 00:16:03,759
their parameters in one place

00:16:02,240 --> 00:16:06,079
and then be able to update that in

00:16:03,759 --> 00:16:07,759
github actions by importing them as

00:16:06,079 --> 00:16:09,759
environment variables

00:16:07,759 --> 00:16:12,240
once all that was done they could then

00:16:09,759 --> 00:16:13,839
begin the process of deploying

00:16:12,240 --> 00:16:15,360
a brand new elastic beanstalk

00:16:13,839 --> 00:16:17,360
application

00:16:15,360 --> 00:16:18,880
and what that did is it did a few things

00:16:17,360 --> 00:16:21,360
for us it allowed us

00:16:18,880 --> 00:16:22,320
to see this environment but most

00:16:21,360 --> 00:16:24,560
importantly

00:16:22,320 --> 00:16:27,040
it allowed our stakeholders to see our

00:16:24,560 --> 00:16:30,480
change as quickly as possible

00:16:27,040 --> 00:16:32,480
so what this did for the uh

00:16:30,480 --> 00:16:34,560
individual stakeholder is it created a

00:16:32,480 --> 00:16:36,639
brand new website that anybody in that

00:16:34,560 --> 00:16:38,800
organization could go to

00:16:36,639 --> 00:16:39,759
and it was based on the name of the

00:16:38,800 --> 00:16:42,880
repository

00:16:39,759 --> 00:16:44,639
the repository owner and the pr number

00:16:42,880 --> 00:16:46,399
so for somebody managing all this

00:16:44,639 --> 00:16:48,639
infrastructure they could easily go into

00:16:46,399 --> 00:16:50,399
a console or make an api call

00:16:48,639 --> 00:16:52,240
to see exactly how many environments

00:16:50,399 --> 00:16:55,839
they have running at any given time

00:16:52,240 --> 00:16:57,040
and to see what exactly is running

00:16:55,839 --> 00:16:58,560
they decided that they needed this

00:16:57,040 --> 00:16:59,920
infrastructure to live as long as they

00:16:58,560 --> 00:17:01,279
needed it so if they needed more

00:16:59,920 --> 00:17:03,199
stakeholder feedback on

00:17:01,279 --> 00:17:04,319
bigger changes they could let it live as

00:17:03,199 --> 00:17:06,000
long as they needed it

00:17:04,319 --> 00:17:08,559
so no automated deleting or anything

00:17:06,000 --> 00:17:11,120
like that and at the same time

00:17:08,559 --> 00:17:12,160
because it was scoped to a pull request

00:17:11,120 --> 00:17:14,720
they could then get

00:17:12,160 --> 00:17:15,280
uh invite stakeholders back to the code

00:17:14,720 --> 00:17:17,280
review

00:17:15,280 --> 00:17:18,480
and let them sign off from there if they

00:17:17,280 --> 00:17:20,400
decided to

00:17:18,480 --> 00:17:24,240
so all of that collaboration lives with

00:17:20,400 --> 00:17:24,240
the code and stays with the code

00:17:27,039 --> 00:17:30,160
so perfect world we've got a brand new

00:17:29,679 --> 00:17:31,919
change

00:17:30,160 --> 00:17:34,000
right sarah and jen have done a great

00:17:31,919 --> 00:17:36,000
job at up until this point

00:17:34,000 --> 00:17:37,679
and now we're at a little bit of a

00:17:36,000 --> 00:17:39,600
crossroads here

00:17:37,679 --> 00:17:41,200
how do we end up deploying this change

00:17:39,600 --> 00:17:42,480
to production because

00:17:41,200 --> 00:17:45,120
even though we've gotten all the way to

00:17:42,480 --> 00:17:47,760
this point we still have that issue of

00:17:45,120 --> 00:17:48,720
well sarah's team cannot deliver this to

00:17:47,760 --> 00:17:52,000
production

00:17:48,720 --> 00:17:53,600
jen's team has to do that so let's go

00:17:52,000 --> 00:17:55,840
back to our previous slide where we

00:17:53,600 --> 00:17:58,240
talked about our delivery process

00:17:55,840 --> 00:17:59,919
and now we've shifted from the top uh

00:17:58,240 --> 00:18:01,520
part of the action which is sending our

00:17:59,919 --> 00:18:04,640
pull request event

00:18:01,520 --> 00:18:05,840
to elastic beanstalk via actions now

00:18:04,640 --> 00:18:07,280
we're gonna go ahead and begin on the

00:18:05,840 --> 00:18:10,720
bottom half of our process

00:18:07,280 --> 00:18:12,960
which says when a pull request is merged

00:18:10,720 --> 00:18:14,559
we're going to trigger a new event and

00:18:12,960 --> 00:18:15,520
we're going to send that event to code

00:18:14,559 --> 00:18:17,039
pipeline

00:18:15,520 --> 00:18:18,960
based on the event that is triggered

00:18:17,039 --> 00:18:20,320
from when we merge that code to our

00:18:18,960 --> 00:18:21,600
release branch

00:18:20,320 --> 00:18:23,679
and at that point we're going to use

00:18:21,600 --> 00:18:27,120
code pipeline to further

00:18:23,679 --> 00:18:29,679
solidify and create a linear deployment

00:18:27,120 --> 00:18:32,000
that allows us to stagger all of our

00:18:29,679 --> 00:18:34,320
deployments and still get stakeholders

00:18:32,000 --> 00:18:36,000
continued stakeholders sign off and

00:18:34,320 --> 00:18:38,720
again this allows us to keep

00:18:36,000 --> 00:18:40,640
us in a methodology that allows us to

00:18:38,720 --> 00:18:42,240
deliver in a blue-green fashion

00:18:40,640 --> 00:18:44,720
but at the same time gives us

00:18:42,240 --> 00:18:47,360
traceability because again we are tying

00:18:44,720 --> 00:18:49,120
this back to the get pull request

00:18:47,360 --> 00:18:52,559
and github pull requests and all of the

00:18:49,120 --> 00:18:54,320
commits within that repository

00:18:52,559 --> 00:18:56,080
so that's where this handoff comes into

00:18:54,320 --> 00:18:58,480
play how can we

00:18:56,080 --> 00:18:59,679
actually get this delivered to

00:18:58,480 --> 00:19:01,200
production

00:18:59,679 --> 00:19:03,760
and that's where code pipeline plays a

00:19:01,200 --> 00:19:04,720
pivotal role here again it triggers on

00:19:03,760 --> 00:19:07,919
that big green

00:19:04,720 --> 00:19:10,880
button and it allows the developer

00:19:07,919 --> 00:19:12,559
to separate their responsibility to

00:19:10,880 --> 00:19:14,720
their operations team

00:19:12,559 --> 00:19:15,679
and now team gen can safely deliver this

00:19:14,720 --> 00:19:19,200
production

00:19:15,679 --> 00:19:22,240
elastic beanstalk environment without

00:19:19,200 --> 00:19:24,000
additional intervention again we talked

00:19:22,240 --> 00:19:26,559
about what the requirements were

00:19:24,000 --> 00:19:28,240
for this organization they needed to be

00:19:26,559 --> 00:19:29,200
able to deploy this in a blue-green

00:19:28,240 --> 00:19:30,720
fashion

00:19:29,200 --> 00:19:33,520
so how are they going to be able to do

00:19:30,720 --> 00:19:35,679
that do they do that with code pipeline

00:19:33,520 --> 00:19:37,200
well it becomes a par it becomes a

00:19:35,679 --> 00:19:39,600
simple part of their process

00:19:37,200 --> 00:19:42,000
where in addition to code pipeline

00:19:39,600 --> 00:19:44,400
they're going to use aws route fee

00:19:42,000 --> 00:19:45,600
with weighted routing policies that

00:19:44,400 --> 00:19:48,080
directs traffic

00:19:45,600 --> 00:19:49,440
based on the rules that they set so what

00:19:48,080 --> 00:19:52,880
they've done here

00:19:49,440 --> 00:19:53,760
is created two record sets for their

00:19:52,880 --> 00:19:56,559
website

00:19:53,760 --> 00:19:58,320
so when anybody comes to their website

00:19:56,559 --> 00:20:00,320
the majority of the traffic

00:19:58,320 --> 00:20:02,480
which will go to their blue environment

00:20:00,320 --> 00:20:04,480
which is their existing environment

00:20:02,480 --> 00:20:05,520
and when they introduce that brand new

00:20:04,480 --> 00:20:07,919
change

00:20:05,520 --> 00:20:09,679
they will only send a segment of that

00:20:07,919 --> 00:20:13,039
traffic there

00:20:09,679 --> 00:20:16,000
what that allows uh them to do is

00:20:13,039 --> 00:20:18,080
observation and testing so they can

00:20:16,000 --> 00:20:18,960
release to production to a small set of

00:20:18,080 --> 00:20:21,679
users

00:20:18,960 --> 00:20:23,520
so if they have a hundred active users

00:20:21,679 --> 00:20:25,039
only 10 users will see this change

00:20:23,520 --> 00:20:26,720
until they decide to route all the

00:20:25,039 --> 00:20:29,280
traffic to the new environment

00:20:26,720 --> 00:20:30,720
to the uh to the merged environment so

00:20:29,280 --> 00:20:31,760
now we can do things like capture

00:20:30,720 --> 00:20:33,679
telemetry

00:20:31,760 --> 00:20:35,120
we could even do a b testing and which

00:20:33,679 --> 00:20:36,640
would allow us to capture the metrics to

00:20:35,120 --> 00:20:39,039
maybe understand

00:20:36,640 --> 00:20:40,880
how often or how long are users sitting

00:20:39,039 --> 00:20:42,880
on that page now with the brand new uh

00:20:40,880 --> 00:20:45,280
background color

00:20:42,880 --> 00:20:46,960
once they have come to an agreement on

00:20:45,280 --> 00:20:48,080
that this production this change looks

00:20:46,960 --> 00:20:49,440
okay

00:20:48,080 --> 00:20:51,360
they can simply delete the old

00:20:49,440 --> 00:20:53,760
environment and promote

00:20:51,360 --> 00:20:57,120
the green environment to blue and route

00:20:53,760 --> 00:20:59,919
all of the traffic through there

00:20:57,120 --> 00:21:02,640
and this allows them to really lock

00:20:59,919 --> 00:21:04,720
things down

00:21:02,640 --> 00:21:06,240
and this is all driven by code pipeline

00:21:04,720 --> 00:21:07,679
so again we talked about the what the

00:21:06,240 --> 00:21:09,200
requirements were

00:21:07,679 --> 00:21:11,360
and this is what code pipeline looks

00:21:09,200 --> 00:21:12,480
like in action i will say that this is a

00:21:11,360 --> 00:21:14,640
very simple

00:21:12,480 --> 00:21:15,520
for jen and sarah this is a very simple

00:21:14,640 --> 00:21:17,200
deployment

00:21:15,520 --> 00:21:18,799
but these can be as complex as an

00:21:17,200 --> 00:21:21,200
organization requires

00:21:18,799 --> 00:21:22,080
so if you have a situation where in the

00:21:21,200 --> 00:21:23,840
past

00:21:22,080 --> 00:21:26,480
you've been bitten by issues where

00:21:23,840 --> 00:21:28,080
people are deploying ahead of you or

00:21:26,480 --> 00:21:30,080
deploying while you're testing your

00:21:28,080 --> 00:21:31,760
functional test which causes your

00:21:30,080 --> 00:21:33,520
production environment to break

00:21:31,760 --> 00:21:35,120
code pipeline is helping not only a

00:21:33,520 --> 00:21:36,559
senate uh sarah and jen

00:21:35,120 --> 00:21:38,240
mitigate that but would also help you

00:21:36,559 --> 00:21:40,000
mitigate that as well

00:21:38,240 --> 00:21:41,760
so what that means is that everything is

00:21:40,000 --> 00:21:44,240
queuing up for your uh

00:21:41,760 --> 00:21:46,240
for your deployment pipeline and in this

00:21:44,240 --> 00:21:47,919
case how we design this

00:21:46,240 --> 00:21:49,360
is that every time a source check-in

00:21:47,919 --> 00:21:51,360
comes in

00:21:49,360 --> 00:21:52,480
it will automatically require an

00:21:51,360 --> 00:21:55,919
additional layer

00:21:52,480 --> 00:21:58,480
of approval from your uh

00:21:55,919 --> 00:22:01,440
approval team now that approval team is

00:21:58,480 --> 00:22:03,120
defined as an i uh within an iam policy

00:22:01,440 --> 00:22:06,960
as a subset of users

00:22:03,120 --> 00:22:10,640
that you yourself can define

00:22:06,960 --> 00:22:13,360
so what this gives you is the ability to

00:22:10,640 --> 00:22:15,760
have traceability and auditability as

00:22:13,360 --> 00:22:18,080
well as gating all of your deployments

00:22:15,760 --> 00:22:19,679
none of these deployments will occur in

00:22:18,080 --> 00:22:20,960
this scenario until somebody has

00:22:19,679 --> 00:22:24,480
approved it

00:22:20,960 --> 00:22:24,480
now that brings up a really interesting

00:22:24,840 --> 00:22:29,840
question

00:22:26,159 --> 00:22:30,720
what happens when a developer pushes a

00:22:29,840 --> 00:22:33,679
new change

00:22:30,720 --> 00:22:34,400
and they want to leapfrog well in this

00:22:33,679 --> 00:22:36,480
case

00:22:34,400 --> 00:22:37,440
we don't allow leapfrogging we only

00:22:36,480 --> 00:22:40,159
allow

00:22:37,440 --> 00:22:41,280
approvals for changes as they come in

00:22:40,159 --> 00:22:42,960
sequentially

00:22:41,280 --> 00:22:44,720
because when sarah and jen were looking

00:22:42,960 --> 00:22:45,280
at this organization they understood

00:22:44,720 --> 00:22:47,280
that

00:22:45,280 --> 00:22:49,760
this was the best way for the this team

00:22:47,280 --> 00:22:51,520
in this organization to deliver software

00:22:49,760 --> 00:22:52,960
but it can be absolutely configured so

00:22:51,520 --> 00:22:54,720
if you have an example of

00:22:52,960 --> 00:22:56,000
maybe needing to run a database

00:22:54,720 --> 00:22:57,360
migration because you

00:22:56,000 --> 00:22:58,960
a developer cannot run a database

00:22:57,360 --> 00:23:00,080
migration themselves or an operations

00:22:58,960 --> 00:23:01,760
vault cannot do that

00:23:00,080 --> 00:23:03,120
you can certainly set that as a substep

00:23:01,760 --> 00:23:04,720
and bring that in

00:23:03,120 --> 00:23:07,360
bring in the necessary team to do that

00:23:04,720 --> 00:23:09,200
for you as well

00:23:07,360 --> 00:23:10,960
and then most importantly what you get

00:23:09,200 --> 00:23:14,080
is the ability to have

00:23:10,960 --> 00:23:15,120
execution history the most important

00:23:14,080 --> 00:23:16,559
thing for

00:23:15,120 --> 00:23:18,240
highly regulated industries that are

00:23:16,559 --> 00:23:19,360
delivering software is to have that

00:23:18,240 --> 00:23:21,200
traceability

00:23:19,360 --> 00:23:23,039
and that auditability and to be able to

00:23:21,200 --> 00:23:24,000
understand that if a bug does get

00:23:23,039 --> 00:23:25,440
delivered to production

00:23:24,000 --> 00:23:27,120
it's certainly not the end of the world

00:23:25,440 --> 00:23:29,760
but we do need to to

00:23:27,120 --> 00:23:30,960
understand where that was introduced and

00:23:29,760 --> 00:23:34,640
when we start deploying

00:23:30,960 --> 00:23:37,039
code within a subset of a pull request

00:23:34,640 --> 00:23:39,039
we can then see and keep that grouped to

00:23:37,039 --> 00:23:40,480
our code pipeline deployments as well

00:23:39,039 --> 00:23:42,080
you'll see on the left hand side that

00:23:40,480 --> 00:23:43,120
there's a column for source revisions

00:23:42,080 --> 00:23:44,960
and you'll see the

00:23:43,120 --> 00:23:46,240
shock commit right there and code

00:23:44,960 --> 00:23:48,320
pipeline with the native github

00:23:46,240 --> 00:23:50,400
integration will automatically go

00:23:48,320 --> 00:23:51,600
back to that commit to show you that

00:23:50,400 --> 00:23:54,799
point in history

00:23:51,600 --> 00:23:56,559
of when that change was introduced you

00:23:54,799 --> 00:23:58,080
also get source artifacts that are

00:23:56,559 --> 00:24:00,880
automatically created

00:23:58,080 --> 00:24:03,039
so if you have a situation where maybe

00:24:00,880 --> 00:24:04,720
your organization is being audited

00:24:03,039 --> 00:24:07,600
six months from now and you need to be

00:24:04,720 --> 00:24:10,080
able to go back well now you have a copy

00:24:07,600 --> 00:24:11,679
at a point in time at that commit that

00:24:10,080 --> 00:24:13,840
you can provide to that auditor

00:24:11,679 --> 00:24:15,679
or if you have an external contractor

00:24:13,840 --> 00:24:17,679
that needs access to source code but you

00:24:15,679 --> 00:24:19,600
have a very stringent

00:24:17,679 --> 00:24:20,960
security policy around who gets access

00:24:19,600 --> 00:24:22,000
to a repository

00:24:20,960 --> 00:24:25,120
well you can certainly send them that

00:24:22,000 --> 00:24:26,960
source artifact as well

00:24:25,120 --> 00:24:28,559
and then you also have the capability of

00:24:26,960 --> 00:24:31,039
rolling back and rolling forward

00:24:28,559 --> 00:24:32,400
so if a change needs to be reverted you

00:24:31,039 --> 00:24:35,039
can certainly use

00:24:32,400 --> 00:24:36,880
a revert pr in github which will then

00:24:35,039 --> 00:24:40,640
send your change as it needs to

00:24:36,880 --> 00:24:42,240
through the code pipeline so

00:24:40,640 --> 00:24:44,000
we've talked about quite a bit here

00:24:42,240 --> 00:24:47,440
today and some of these

00:24:44,000 --> 00:24:50,320
uh some of these methodologies can seem

00:24:47,440 --> 00:24:52,080
almost impossible for some organizations

00:24:50,320 --> 00:24:54,080
and i will say that there is no silver

00:24:52,080 --> 00:24:57,200
bullet to any of this

00:24:54,080 --> 00:24:59,279
what this solution came down to was two

00:24:57,200 --> 00:25:02,559
teams collaborating with each other

00:24:59,279 --> 00:25:04,159
and finding out ways that each other's

00:25:02,559 --> 00:25:05,279
teams were working and how they could

00:25:04,159 --> 00:25:06,960
meet in the middle

00:25:05,279 --> 00:25:08,799
because we think about how software is

00:25:06,960 --> 00:25:11,360
being delivered today

00:25:08,799 --> 00:25:12,880
and what we've seen prior to the past

00:25:11,360 --> 00:25:14,799
we're seeing a more community

00:25:12,880 --> 00:25:16,400
focused style of software development

00:25:14,799 --> 00:25:19,360
where we're not just employees

00:25:16,400 --> 00:25:20,799
we're becoming citizens of the code that

00:25:19,360 --> 00:25:23,120
we're delivering and deploying and we're

00:25:20,799 --> 00:25:25,760
becoming citizens within our teams

00:25:23,120 --> 00:25:27,679
and so we're breaking down silos and

00:25:25,760 --> 00:25:29,360
we're building trust

00:25:27,679 --> 00:25:31,200
the only way that teams are going to be

00:25:29,360 --> 00:25:33,200
able to move faster

00:25:31,200 --> 00:25:34,320
is by developing processes and

00:25:33,200 --> 00:25:37,039
mechanisms

00:25:34,320 --> 00:25:38,559
that each other's teams can use to help

00:25:37,039 --> 00:25:40,720
and from there you'll start building a

00:25:38,559 --> 00:25:42,320
culture of transparency and trust

00:25:40,720 --> 00:25:44,000
which i think is probably more important

00:25:42,320 --> 00:25:45,120
than just about anything i've talked

00:25:44,000 --> 00:25:47,600
about today

00:25:45,120 --> 00:25:49,200
but i wanted to thank you for uh taking

00:25:47,600 --> 00:25:50,080
the time to listen today and i hope

00:25:49,200 --> 00:25:52,400
you're staying safe

00:25:50,080 --> 00:25:53,760
safe and i hope you're staying healthy

00:25:52,400 --> 00:25:55,840
um i will be on

00:25:53,760 --> 00:25:57,520
the github discussion uh forum for the

00:25:55,840 --> 00:25:58,880
next 30 minutes to answer any questions

00:25:57,520 --> 00:26:00,159
that you might have around code pipeline

00:25:58,880 --> 00:26:02,480
and github actions

00:26:00,159 --> 00:26:04,880
or any other questions that you might

00:26:02,480 --> 00:26:11,840
have so again thank you so much and

00:26:04,880 --> 00:26:11,840
have a great day

00:26:14,240 --> 00:26:16,320

YouTube URL: https://www.youtube.com/watch?v=rOaShvTmZFk


