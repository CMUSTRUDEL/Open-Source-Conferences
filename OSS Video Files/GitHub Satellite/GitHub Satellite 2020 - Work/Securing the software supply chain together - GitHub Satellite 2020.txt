Title: Securing the software supply chain together - GitHub Satellite 2020
Publication date: 2020-05-07
Playlist: GitHub Satellite 2020 - Work
Description: 
	Presented by Maya Kaczorowski, Product Manager, Software Supply Chain Security, GitHub

Writing secure code is hard in its own right, but understanding what vulnerabilities exist in your code— and how to keep up to date with the latest patches—is daunting for even the most sophisticated software teams. In this session, you'll learn how GitHub is making it easier to secure your software supply chain, and how to get started in protecting your code and its dependencies.

GitHub Satellite: A community connected by code

On May 6th, we threw a free virtual event featuring developers working together on the world’s software, announcements from the GitHub team, and inspiring performances by artists who code.

More information: https://githubsatellite.com
Schedule: https://githubsatellite.com/schedule/
Captions: 
	00:00:09,440 --> 00:00:12,960
and i love the way

00:00:10,719 --> 00:00:14,799
like because when you talk about devops

00:00:12,960 --> 00:00:17,440
and in a source they often both come

00:00:14,799 --> 00:00:19,199
down to like just as much or even more

00:00:17,440 --> 00:00:21,199
so the cultural shift as opposed to a

00:00:19,199 --> 00:00:23,039
technological shift so i think she like

00:00:21,199 --> 00:00:24,800
absolutely narrowed it on the head and

00:00:23,039 --> 00:00:26,480
just agrees i'm like

00:00:24,800 --> 00:00:28,240
i have an image now of like all these

00:00:26,480 --> 00:00:29,679
like it companies are like little people

00:00:28,240 --> 00:00:30,930
walking around like flags like

00:00:29,679 --> 00:00:33,520
revolution

00:00:30,930 --> 00:00:35,360
[Laughter]

00:00:33,520 --> 00:00:37,440
well this would give up something like

00:00:35,360 --> 00:00:39,840
this

00:00:37,440 --> 00:00:41,680
we leave revolutions at github satellite

00:00:39,840 --> 00:00:42,559
but enough about leading revolutions

00:00:41,680 --> 00:00:44,800
we've got

00:00:42,559 --> 00:00:46,399
some really cool things happening for

00:00:44,800 --> 00:00:48,239
the rest of like i think we've got maybe

00:00:46,399 --> 00:00:48,800
a couple hours left oh my gosh it's

00:00:48,239 --> 00:00:50,800
going so

00:00:48,800 --> 00:00:52,879
quick i know so would you like to give

00:00:50,800 --> 00:00:54,640
us four more sessions would you like to

00:00:52,879 --> 00:00:56,079
give us a quick taster of what those

00:00:54,640 --> 00:00:58,480
four sessions are going to look like and

00:00:56,079 --> 00:00:59,440
just a little bit more yes after our

00:00:58,480 --> 00:01:01,520
next session

00:00:59,440 --> 00:01:03,680
we actually have becca zanstein coming

00:01:01,520 --> 00:01:04,479
on to talk about collaboration beyond

00:01:03,680 --> 00:01:06,240
the code

00:01:04,479 --> 00:01:08,400
and after that we're having brian

00:01:06,240 --> 00:01:11,280
douglas always known as b

00:01:08,400 --> 00:01:12,400
dougie to give top 10 tips for project

00:01:11,280 --> 00:01:14,720
maintainers so

00:01:12,400 --> 00:01:17,360
we're not done we're not done it's still

00:01:14,720 --> 00:01:19,840
going i'm pretty excited

00:01:17,360 --> 00:01:20,960
so much more coming all the exciting

00:01:19,840 --> 00:01:24,240
stuff

00:01:20,960 --> 00:01:24,799
yes so and i want to make sure everybody

00:01:24,240 --> 00:01:27,360
remembers

00:01:24,799 --> 00:01:29,119
uh go to getupsatelite.com discussions

00:01:27,360 --> 00:01:31,040
that's where you can ask questions with

00:01:29,119 --> 00:01:32,479
denise right now for the next 30 minutes

00:01:31,040 --> 00:01:33,280
and for all of our speakers that are

00:01:32,479 --> 00:01:35,360
coming up

00:01:33,280 --> 00:01:36,560
but speaking of coming up mitch do you

00:01:35,360 --> 00:01:40,000
mind if i introduce

00:01:36,560 --> 00:01:42,640
our next speaker uh you can do the

00:01:40,000 --> 00:01:43,840
honors go for it thank you so very much

00:01:42,640 --> 00:01:45,520
i love doing this

00:01:43,840 --> 00:01:47,520
our next speaker has a background in

00:01:45,520 --> 00:01:50,159
cryptography and game theory

00:01:47,520 --> 00:01:52,159
and has this magical skill to bake

00:01:50,159 --> 00:01:52,880
without following a recipe and it's

00:01:52,159 --> 00:01:55,280
still

00:01:52,880 --> 00:01:57,040
doing well this person is a product

00:01:55,280 --> 00:01:59,520
manager here at github and the name of

00:01:57,040 --> 00:02:00,880
her talk is securing the software supply

00:01:59,520 --> 00:02:05,360
chain together

00:02:00,880 --> 00:02:05,360
please help me introduce maya

00:02:06,840 --> 00:02:12,009
khacharovsky

00:02:08,800 --> 00:02:12,009
[Music]

00:02:12,800 --> 00:02:16,720
awesome thank you so much so today um

00:02:15,440 --> 00:02:18,000
welcome to gift up satellite first of

00:02:16,720 --> 00:02:18,879
all so happy that you could join us

00:02:18,000 --> 00:02:20,480
virtually

00:02:18,879 --> 00:02:21,599
um my name is maya khacharovsky as we

00:02:20,480 --> 00:02:22,400
just introduced and i'm a product

00:02:21,599 --> 00:02:23,760
manager

00:02:22,400 --> 00:02:25,680
working on software supply chain

00:02:23,760 --> 00:02:27,599
security at github today we'll be

00:02:25,680 --> 00:02:30,000
talking about what we can do together to

00:02:27,599 --> 00:02:32,239
secure the software supply chain

00:02:30,000 --> 00:02:33,840
in our short time we'll cover what a

00:02:32,239 --> 00:02:35,440
software supply chain is and why you

00:02:33,840 --> 00:02:37,680
should care about securing it

00:02:35,440 --> 00:02:38,720
how github helps you secure your

00:02:37,680 --> 00:02:40,160
software supply chain

00:02:38,720 --> 00:02:42,239
and what you can do as a developer

00:02:40,160 --> 00:02:43,840
maintainer or researcher

00:02:42,239 --> 00:02:46,160
and give you a quick summary of what you

00:02:43,840 --> 00:02:48,480
can do starting today

00:02:46,160 --> 00:02:50,080
so first off what's a supply chain well

00:02:48,480 --> 00:02:51,920
it's anything that you depend on to

00:02:50,080 --> 00:02:53,680
deliver your end product

00:02:51,920 --> 00:02:55,120
for a pharmaceutical company it's the

00:02:53,680 --> 00:02:56,720
provenance and the verification of

00:02:55,120 --> 00:02:58,159
ingredients that go into each drug to

00:02:56,720 --> 00:02:59,519
enjoy high quality

00:02:58,159 --> 00:03:01,200
for a chocolate bar that you buy at the

00:02:59,519 --> 00:03:02,159
store it's the list of ingredients and

00:03:01,200 --> 00:03:03,920
some information on

00:03:02,159 --> 00:03:05,200
nutritional content maybe organic

00:03:03,920 --> 00:03:06,480
ingredients and maybe production

00:03:05,200 --> 00:03:08,560
facilities

00:03:06,480 --> 00:03:09,840
so then what's a software supply chain

00:03:08,560 --> 00:03:10,400
well it's everything that goes into your

00:03:09,840 --> 00:03:12,640
software

00:03:10,400 --> 00:03:13,920
and where it comes from who wrote it

00:03:12,640 --> 00:03:15,519
when it was contributed

00:03:13,920 --> 00:03:17,840
how it's been reviewed for security

00:03:15,519 --> 00:03:19,280
issues any known vulnerabilities

00:03:17,840 --> 00:03:21,360
supported versions

00:03:19,280 --> 00:03:23,040
license information if applicable

00:03:21,360 --> 00:03:25,120
everything everything and anything

00:03:23,040 --> 00:03:26,239
it's everything that you could need or

00:03:25,120 --> 00:03:27,599
could want to know

00:03:26,239 --> 00:03:29,920
about the software that you're running

00:03:27,599 --> 00:03:31,599
to help you determine your risk profile

00:03:29,920 --> 00:03:33,760
so a software supply chain then is

00:03:31,599 --> 00:03:34,239
anything that goes into or affects your

00:03:33,760 --> 00:03:36,560
code

00:03:34,239 --> 00:03:38,239
from development through your ci cd

00:03:36,560 --> 00:03:40,640
pipeline until it gets deployed into

00:03:38,239 --> 00:03:40,640
production

00:03:41,200 --> 00:03:44,959
why does a software supply chain matter

00:03:43,120 --> 00:03:47,680
as a concept

00:03:44,959 --> 00:03:48,159
well software dependencies are pervasive

00:03:47,680 --> 00:03:50,319
it's

00:03:48,159 --> 00:03:51,680
normal for your projects to use hundreds

00:03:50,319 --> 00:03:52,400
or even thousands of open source

00:03:51,680 --> 00:03:54,879
dependencies

00:03:52,400 --> 00:03:57,120
that you didn't write yourself industry

00:03:54,879 --> 00:03:59,360
data suggests that anywhere from 85 to

00:03:57,120 --> 00:04:01,040
97 percent of enterprise code bases come

00:03:59,360 --> 00:04:02,959
from open source

00:04:01,040 --> 00:04:04,560
but those are things that you depend on

00:04:02,959 --> 00:04:06,000
in your software

00:04:04,560 --> 00:04:08,000
and if one of those dependencies has a

00:04:06,000 --> 00:04:10,000
vulnerability then chances are that you

00:04:08,000 --> 00:04:11,280
have a vulnerability as well

00:04:10,000 --> 00:04:13,120
being able to leverage the work of

00:04:11,280 --> 00:04:14,720
thousands of open source developers

00:04:13,120 --> 00:04:16,560
means that thousands of strangers

00:04:14,720 --> 00:04:17,759
effectively have commit access to your

00:04:16,560 --> 00:04:19,759
production code

00:04:17,759 --> 00:04:21,280
so an innocent mistake or a malicious

00:04:19,759 --> 00:04:24,160
attack to your supply chain

00:04:21,280 --> 00:04:25,759
can affect you deeply now when we talk

00:04:24,160 --> 00:04:27,440
about your dependencies

00:04:25,759 --> 00:04:28,880
what's scary isn't as much your internal

00:04:27,440 --> 00:04:30,479
dependencies that you develop because

00:04:28,880 --> 00:04:32,479
hopefully you have controls in place to

00:04:30,479 --> 00:04:33,600
say prevent developers from pushing code

00:04:32,479 --> 00:04:35,199
from their bathtub

00:04:33,600 --> 00:04:37,199
or are you restricted to a super admin

00:04:35,199 --> 00:04:39,280
rights what is scary though

00:04:37,199 --> 00:04:40,960
are your third party dependencies

00:04:39,280 --> 00:04:42,240
externally like open source code that

00:04:40,960 --> 00:04:44,160
your developers pull in

00:04:42,240 --> 00:04:45,840
because although open source is easy for

00:04:44,160 --> 00:04:47,440
developers that means that it's also

00:04:45,840 --> 00:04:49,040
easy for attackers

00:04:47,440 --> 00:04:50,560
and i don't want to scare you i want you

00:04:49,040 --> 00:04:52,000
to keep using open source code i want

00:04:50,560 --> 00:04:52,639
you to keep contributing to open source

00:04:52,000 --> 00:04:54,000
code

00:04:52,639 --> 00:04:56,000
i just want you to do it thoughtfully

00:04:54,000 --> 00:04:57,600
from a security point of view

00:04:56,000 --> 00:04:59,759
so what kinds of software supply chain

00:04:57,600 --> 00:05:00,960
vulnerabilities are there and do attacks

00:04:59,759 --> 00:05:02,160
actually happen

00:05:00,960 --> 00:05:05,680
let's start with the attacks first

00:05:02,160 --> 00:05:05,680
because that always comes up

00:05:06,160 --> 00:05:09,759
so unfortunately supply chain

00:05:08,560 --> 00:05:11,360
compromises are real

00:05:09,759 --> 00:05:13,840
we've seen quite a few attacks in recent

00:05:11,360 --> 00:05:15,039
years across many different ecosystems

00:05:13,840 --> 00:05:17,199
there are several different methods to

00:05:15,039 --> 00:05:19,440
attack your supply chain inserting

00:05:17,199 --> 00:05:21,199
malicious code directly into dependency

00:05:19,440 --> 00:05:23,680
taking over a maintainer account or a

00:05:21,199 --> 00:05:26,479
project compromising a build tool

00:05:23,680 --> 00:05:27,919
signing keys or distribution tool or

00:05:26,479 --> 00:05:29,360
even typo spotting which is when an

00:05:27,919 --> 00:05:30,960
attacker creates a malicious package

00:05:29,360 --> 00:05:31,840
with a very similar name to a known

00:05:30,960 --> 00:05:33,919
package

00:05:31,840 --> 00:05:36,000
hoping that users accidentally download

00:05:33,919 --> 00:05:37,759
it all of these supply chain compromises

00:05:36,000 --> 00:05:38,960
are occurring in the wild

00:05:37,759 --> 00:05:40,800
to highlight a few examples that you

00:05:38,960 --> 00:05:44,160
might be familiar with first

00:05:40,800 --> 00:05:45,199
gen 2 on june 28 2018 maintainers of the

00:05:44,160 --> 00:05:46,960
gen 2 linux

00:05:45,199 --> 00:05:48,720
distribution were notified that they had

00:05:46,960 --> 00:05:49,680
been removed from gen 2's github

00:05:48,720 --> 00:05:51,680
organization

00:05:49,680 --> 00:05:53,360
an attacker had used credential stuffing

00:05:51,680 --> 00:05:53,919
which is reusing passwords from another

00:05:53,360 --> 00:05:55,919
site

00:05:53,919 --> 00:05:57,520
somewhere else to gain access to an

00:05:55,919 --> 00:05:59,520
administrator's account

00:05:57,520 --> 00:06:01,520
then created a dummy admin account and

00:05:59,520 --> 00:06:03,520
removed other admins

00:06:01,520 --> 00:06:05,280
they had also added or attempted to add

00:06:03,520 --> 00:06:07,199
malicious code to several repos to

00:06:05,280 --> 00:06:09,360
rmrf so that users running the code

00:06:07,199 --> 00:06:11,039
would delete their data accidentally

00:06:09,360 --> 00:06:12,720
thankfully this was noticed by an admin

00:06:11,039 --> 00:06:14,479
within a matter of minutes due to github

00:06:12,720 --> 00:06:16,319
email alerts and within an hour

00:06:14,479 --> 00:06:18,319
gentoo was working with github support

00:06:16,319 --> 00:06:18,720
on the issue the attacker had tried to

00:06:18,319 --> 00:06:20,960
make

00:06:18,720 --> 00:06:22,319
six commits in a span of four hours but

00:06:20,960 --> 00:06:24,400
these were all reverted and it's not

00:06:22,319 --> 00:06:26,319
suspected that any end users ran the

00:06:24,400 --> 00:06:27,919
compromised code

00:06:26,319 --> 00:06:29,759
another example event stream that you're

00:06:27,919 --> 00:06:30,639
probably familiar with in the fall of

00:06:29,759 --> 00:06:32,080
00:06:30,639 --> 00:06:34,160
the user volunteered to take over the

00:06:32,080 --> 00:06:35,440
event stream project on github

00:06:34,160 --> 00:06:37,280
though it has more than two million

00:06:35,440 --> 00:06:38,720
downloads like open source projects it

00:06:37,280 --> 00:06:40,160
could be better supported

00:06:38,720 --> 00:06:41,360
and so the author welcomed the extra

00:06:40,160 --> 00:06:42,639
help and even gave the newcomer

00:06:41,360 --> 00:06:44,479
publishing rights

00:06:42,639 --> 00:06:46,319
i want to emphasize that the author is

00:06:44,479 --> 00:06:47,520
not to blame here because

00:06:46,319 --> 00:06:49,360
we should have better ways to support

00:06:47,520 --> 00:06:50,720
these developers and also verify trust

00:06:49,360 --> 00:06:52,960
of our ecosystem

00:06:50,720 --> 00:06:54,080
so what happened next well on september

00:06:52,960 --> 00:06:55,759
9th 2018

00:06:54,080 --> 00:06:58,080
the new user added a new dependency to

00:06:55,759 --> 00:06:59,680
event stream flat map stream

00:06:58,080 --> 00:07:01,280
and then rewrote the code about a week

00:06:59,680 --> 00:07:02,720
later to actually no longer require that

00:07:01,280 --> 00:07:04,800
dependency

00:07:02,720 --> 00:07:06,000
that removal was made in the code base

00:07:04,800 --> 00:07:08,080
but it wasn't pushed through to where

00:07:06,000 --> 00:07:10,240
the library is hosted on npm

00:07:08,080 --> 00:07:12,160
then on october 5th another user added

00:07:10,240 --> 00:07:13,919
malware to flatmap stream

00:07:12,160 --> 00:07:15,680
so then anyone who built or used event

00:07:13,919 --> 00:07:16,639
stream and pulled in the latest version

00:07:15,680 --> 00:07:18,880
of flatmap stream

00:07:16,639 --> 00:07:21,039
would receive this malware the malware

00:07:18,880 --> 00:07:22,880
was very specific it targeted developers

00:07:21,039 --> 00:07:24,080
of a specific cryptocurrency wallet the

00:07:22,880 --> 00:07:25,680
dash copay wallet

00:07:24,080 --> 00:07:28,080
to try to insert malicious code in the

00:07:25,680 --> 00:07:29,520
wallet itself this was discovered almost

00:07:28,080 --> 00:07:30,000
two months later and unfortunately the

00:07:29,520 --> 00:07:31,520
malware

00:07:30,000 --> 00:07:34,319
did make it into a handful of releases

00:07:31,520 --> 00:07:36,479
of dash copay before being remediated

00:07:34,319 --> 00:07:37,520
and before you ask no i have no idea

00:07:36,479 --> 00:07:38,800
what was going on the summer of

00:07:37,520 --> 00:07:40,800
2018. i don't know why there were so

00:07:38,800 --> 00:07:42,639
many attacks there but

00:07:40,800 --> 00:07:44,639
almost all of the time the aims of these

00:07:42,639 --> 00:07:46,560
attacks is the same like other security

00:07:44,639 --> 00:07:48,160
attacks it's almost always about money

00:07:46,560 --> 00:07:50,560
that's usually malware to mine

00:07:48,160 --> 00:07:52,319
cryptocurrency say or as part of about

00:07:50,560 --> 00:07:54,240
as part of a botnet but it might also be

00:07:52,319 --> 00:07:55,919
a backdoor to allow for future malware

00:07:54,240 --> 00:07:56,879
or data exfiltration if the package ends

00:07:55,919 --> 00:07:59,039
up in a particularly you know

00:07:56,879 --> 00:08:00,800
interesting juicy place

00:07:59,039 --> 00:08:02,560
in some cases an attacker could also be

00:08:00,800 --> 00:08:04,800
aiming just to disrupt the service and

00:08:02,560 --> 00:08:06,479
take it offline

00:08:04,800 --> 00:08:07,919
now i often see security vendors trying

00:08:06,479 --> 00:08:09,039
to sell their products and viewpoints

00:08:07,919 --> 00:08:10,560
with fear

00:08:09,039 --> 00:08:12,319
the sky is falling and you need this new

00:08:10,560 --> 00:08:14,000
security tool that's

00:08:12,319 --> 00:08:15,759
really not what we're trying to do here

00:08:14,000 --> 00:08:16,960
i want to talk about attacks because i

00:08:15,759 --> 00:08:18,240
know that i'm going to get asked about

00:08:16,960 --> 00:08:19,680
attacks but i do not want to be

00:08:18,240 --> 00:08:20,879
fear-mongering

00:08:19,680 --> 00:08:23,120
we're talking about the attacks to level

00:08:20,879 --> 00:08:23,680
set and educate these attacks happen but

00:08:23,120 --> 00:08:25,680
they are

00:08:23,680 --> 00:08:27,199
rare we are working to help make the

00:08:25,680 --> 00:08:28,560
whole supply chain more secure

00:08:27,199 --> 00:08:30,000
so although we see these compromises

00:08:28,560 --> 00:08:30,879
occur in the wild and we do need to

00:08:30,000 --> 00:08:32,880
address them

00:08:30,879 --> 00:08:34,479
the reality is that most of our concerns

00:08:32,880 --> 00:08:38,800
with the software supply chain

00:08:34,479 --> 00:08:38,800
is just forgetting to patch your code

00:08:39,279 --> 00:08:42,719
the issue in supply chain security is

00:08:41,440 --> 00:08:44,640
unpatched software

00:08:42,719 --> 00:08:46,720
it's not open source use and it's not

00:08:44,640 --> 00:08:48,480
software supply chain compromises

00:08:46,720 --> 00:08:49,920
think about it this way if a component

00:08:48,480 --> 00:08:51,279
in your code base is open source

00:08:49,920 --> 00:08:53,440
and it's likely that quite a bit is as

00:08:51,279 --> 00:08:55,279
we talked about earlier then if any of

00:08:53,440 --> 00:08:57,200
those dependencies have vulnerabilities

00:08:55,279 --> 00:08:58,959
you are potentially affected

00:08:57,200 --> 00:09:00,399
how can you address that issue

00:08:58,959 --> 00:09:00,880
thankfully maintainers are pretty good

00:09:00,399 --> 00:09:03,440
at well

00:09:00,880 --> 00:09:04,399
you know maintaining it's estimated that

00:09:03,440 --> 00:09:06,080
00:09:04,399 --> 00:09:09,200
of vulnerabilities in open source are

00:09:06,080 --> 00:09:12,320
disclosed with a patch already available

00:09:09,200 --> 00:09:14,080
it's your job to deploy that patch

00:09:12,320 --> 00:09:15,680
what you want to be really really good

00:09:14,080 --> 00:09:16,640
at is knowing when there's a new

00:09:15,680 --> 00:09:20,800
vulnerability

00:09:16,640 --> 00:09:23,360
and patching it at the same time

00:09:20,800 --> 00:09:24,080
developers and security teams today find

00:09:23,360 --> 00:09:25,839
this hard

00:09:24,080 --> 00:09:28,240
and i would go even further 52 percent

00:09:25,839 --> 00:09:29,600
of developers find it painful to update

00:09:28,240 --> 00:09:31,360
vulnerable components

00:09:29,600 --> 00:09:33,040
so that's what i want to focus on today

00:09:31,360 --> 00:09:34,560
this is something that should be easy

00:09:33,040 --> 00:09:36,959
this is automatable and it's something

00:09:34,560 --> 00:09:38,080
that we can make easy

00:09:36,959 --> 00:09:39,839
so now that we understand where the

00:09:38,080 --> 00:09:40,240
issues are making it easy for you to

00:09:39,839 --> 00:09:41,920
address

00:09:40,240 --> 00:09:43,519
known vulnerabilities and also dealing

00:09:41,920 --> 00:09:44,800
with those rare compromises

00:09:43,519 --> 00:09:46,800
let me paint the picture for you of what

00:09:44,800 --> 00:09:48,399
github is trying to do here

00:09:46,800 --> 00:09:50,320
our goal is for github to lead and

00:09:48,399 --> 00:09:52,160
enable developers maintainers

00:09:50,320 --> 00:09:53,600
enterprises and researchers in securing

00:09:52,160 --> 00:09:54,959
the world software

00:09:53,600 --> 00:09:56,160
we want to make consumption of open

00:09:54,959 --> 00:09:57,760
source software something that all

00:09:56,160 --> 00:09:59,040
developers can do with confidence so

00:09:57,760 --> 00:10:00,720
that they have more faith in the

00:09:59,040 --> 00:10:02,800
security of open source code

00:10:00,720 --> 00:10:04,079
than in their own code we want to make

00:10:02,800 --> 00:10:05,920
security of open source software

00:10:04,079 --> 00:10:07,200
as automated as possible so that the

00:10:05,920 --> 00:10:08,240
community can scale to secure all

00:10:07,200 --> 00:10:10,160
software

00:10:08,240 --> 00:10:11,920
that means a couple of things first it

00:10:10,160 --> 00:10:13,680
means that ensuring that the open source

00:10:11,920 --> 00:10:15,360
community has the tools they need to

00:10:13,680 --> 00:10:16,480
securely develop and maintain open

00:10:15,360 --> 00:10:18,560
source projects

00:10:16,480 --> 00:10:20,160
that means automation it means not

00:10:18,560 --> 00:10:20,959
needing maintainers to invest time which

00:10:20,160 --> 00:10:22,800
they don't have

00:10:20,959 --> 00:10:24,640
into patch management vulnerability

00:10:22,800 --> 00:10:28,079
reporting cve issuance

00:10:24,640 --> 00:10:30,079
we want to help you second it meeters

00:10:28,079 --> 00:10:31,760
enterprises and developers

00:10:30,079 --> 00:10:33,440
to provide and utilize information to

00:10:31,760 --> 00:10:34,880
decide which dependencies they want to

00:10:33,440 --> 00:10:36,320
use in their supply chain

00:10:34,880 --> 00:10:38,079
and how they want to consume these in

00:10:36,320 --> 00:10:39,600
order to minimize risk

00:10:38,079 --> 00:10:41,920
that means knowing what you are

00:10:39,600 --> 00:10:43,600
consuming and having automated processes

00:10:41,920 --> 00:10:46,560
to use this information

00:10:43,600 --> 00:10:48,000
reading the label and then acting on it

00:10:46,560 --> 00:10:49,760
and thirdly it means empowering

00:10:48,000 --> 00:10:50,480
enterprises to understand and control

00:10:49,760 --> 00:10:52,720
what code

00:10:50,480 --> 00:10:53,680
binaries and packages they use based on

00:10:52,720 --> 00:10:56,480
their security

00:10:53,680 --> 00:10:58,240
privacy licensing and audit requirements

00:10:56,480 --> 00:11:00,560
letting you make decisions that work for

00:10:58,240 --> 00:11:01,920
your business and with your requirements

00:11:00,560 --> 00:11:03,120
and that's where we're headed that's how

00:11:01,920 --> 00:11:05,360
we're going to tackle the issues that we

00:11:03,120 --> 00:11:06,560
see in software supply chain today

00:11:05,360 --> 00:11:08,880
and we're just a couple of steps along

00:11:06,560 --> 00:11:09,760
that journey right now so in delivering

00:11:08,880 --> 00:11:12,000
on that vision

00:11:09,760 --> 00:11:13,760
we need to make sure that our tools work

00:11:12,000 --> 00:11:15,279
for all users

00:11:13,760 --> 00:11:16,959
that means making sure github software

00:11:15,279 --> 00:11:18,480
supply chain security tools

00:11:16,959 --> 00:11:20,480
are great for a few specific sets of

00:11:18,480 --> 00:11:22,000
people developers

00:11:20,480 --> 00:11:24,399
and that includes enterprise security

00:11:22,000 --> 00:11:26,959
teams maintainers

00:11:24,399 --> 00:11:28,000
and security researchers let's talk

00:11:26,959 --> 00:11:30,240
about developers first

00:11:28,000 --> 00:11:31,839
because well github puts developers

00:11:30,240 --> 00:11:33,760
first

00:11:31,839 --> 00:11:35,600
as a developer you want to know what

00:11:33,760 --> 00:11:36,800
dependencies you use

00:11:35,600 --> 00:11:38,720
know about vulnerabilities in those

00:11:36,800 --> 00:11:41,040
dependencies patch them

00:11:38,720 --> 00:11:42,560
and then get back to work when you hear

00:11:41,040 --> 00:11:43,440
about a new volume on hacker news or

00:11:42,560 --> 00:11:45,040
twitter you're like

00:11:43,440 --> 00:11:46,959
damn i didn't want to be doing that

00:11:45,040 --> 00:11:48,720
today i'm busy i have to go feed my

00:11:46,959 --> 00:11:51,680
sourdough starter later

00:11:48,720 --> 00:11:53,440
so how does github help you well first

00:11:51,680 --> 00:11:56,079
to know what dependencies you have

00:11:53,440 --> 00:11:58,000
use dependency graph dependency graph

00:11:56,079 --> 00:11:59,760
identifies all upstream dependencies and

00:11:58,000 --> 00:12:01,440
public downstream dependents of a

00:11:59,760 --> 00:12:03,040
repository or package

00:12:01,440 --> 00:12:04,240
you can see your project's dependencies

00:12:03,040 --> 00:12:06,000
and some other properties like

00:12:04,240 --> 00:12:07,920
vulnerability information

00:12:06,000 --> 00:12:09,519
to generate this information dependency

00:12:07,920 --> 00:12:10,320
graph needs read-only access to a

00:12:09,519 --> 00:12:12,399
repository

00:12:10,320 --> 00:12:14,079
to access information on explicit

00:12:12,399 --> 00:12:15,519
declared dependencies

00:12:14,079 --> 00:12:17,680
which is a standard format for each

00:12:15,519 --> 00:12:19,120
ecosystem for example package.json files

00:12:17,680 --> 00:12:20,880
for npm

00:12:19,120 --> 00:12:22,480
we parse all known package manifest

00:12:20,880 --> 00:12:24,480
files in a user's repository and then

00:12:22,480 --> 00:12:26,720
use this to construct a graph with known

00:12:24,480 --> 00:12:28,399
dependency names and versions

00:12:26,720 --> 00:12:30,480
items are added to dependency graph

00:12:28,399 --> 00:12:32,000
basically when you add a new dependency

00:12:30,480 --> 00:12:33,760
that is when you push a change to the

00:12:32,000 --> 00:12:35,680
default branch that changes the manifest

00:12:33,760 --> 00:12:37,440
file for that repo

00:12:35,680 --> 00:12:39,360
dependency graph is on for public repos

00:12:37,440 --> 00:12:40,560
by default but must be enabled for

00:12:39,360 --> 00:12:42,079
private repos

00:12:40,560 --> 00:12:43,440
if you enable it for private repos then

00:12:42,079 --> 00:12:44,800
the owner of any of your dependencies

00:12:43,440 --> 00:12:46,480
doesn't see that info it's one-way

00:12:44,800 --> 00:12:47,839
visibility

00:12:46,480 --> 00:12:49,040
and if you're using github enterprise

00:12:47,839 --> 00:12:50,399
edition you also have access to

00:12:49,040 --> 00:12:51,760
dependency insights where your

00:12:50,399 --> 00:12:53,279
organization can view the summary of

00:12:51,760 --> 00:12:55,519
their dependencies and vulnerabilities

00:12:53,279 --> 00:12:57,360
across repositories

00:12:55,519 --> 00:12:58,880
so now that you have information about

00:12:57,360 --> 00:13:00,160
your dependencies you

00:12:58,880 --> 00:13:02,160
have time to feed your sourdough starter

00:13:00,160 --> 00:13:03,839
that's great but tonight was a big night

00:13:02,160 --> 00:13:05,839
i was going to cut my hair

00:13:03,839 --> 00:13:07,760
so how do i know if i actually need to

00:13:05,839 --> 00:13:08,720
apply a patch

00:13:07,760 --> 00:13:10,880
well once you know about your

00:13:08,720 --> 00:13:12,720
dependencies you want to know when they

00:13:10,880 --> 00:13:14,639
have new vulnerabilities

00:13:12,720 --> 00:13:16,320
you can do this with security alerts for

00:13:14,639 --> 00:13:17,839
vulnerable dependencies

00:13:16,320 --> 00:13:20,160
you'll be alerted when your repo has a

00:13:17,839 --> 00:13:20,480
newly discovered vulnerability to do

00:13:20,160 --> 00:13:22,320
this

00:13:20,480 --> 00:13:24,160
github compares the information in the

00:13:22,320 --> 00:13:25,519
dependency graph to the information in a

00:13:24,160 --> 00:13:27,440
github's advisory database which i'll

00:13:25,519 --> 00:13:30,000
talk about in a few minutes

00:13:27,440 --> 00:13:32,240
a security alert can either be sent to

00:13:30,000 --> 00:13:34,399
uh sorry it can either be sent when

00:13:32,240 --> 00:13:36,000
any push happens to the default branch

00:13:34,399 --> 00:13:37,839
that contains a manifest file that is

00:13:36,000 --> 00:13:39,279
you added a new dependency and so we

00:13:37,839 --> 00:13:41,760
check any vulnerabilities

00:13:39,279 --> 00:13:42,480
in that dependency or when a new

00:13:41,760 --> 00:13:44,800
vulnerability

00:13:42,480 --> 00:13:46,399
record is added to the database that is

00:13:44,800 --> 00:13:48,240
a new vulnerability is discovered

00:13:46,399 --> 00:13:50,720
so we alert any repositories that are

00:13:48,240 --> 00:13:52,560
vulnerable the alert is sent to repo

00:13:50,720 --> 00:13:54,320
owners by default

00:13:52,560 --> 00:13:55,760
this takes into account versions so if

00:13:54,320 --> 00:13:57,120
you're running a newer version of a

00:13:55,760 --> 00:13:59,199
dependency that's already been patched

00:13:57,120 --> 00:14:00,800
then we won't bother you

00:13:59,199 --> 00:14:02,240
similarly security alerts are on by

00:14:00,800 --> 00:14:03,760
default for public repos

00:14:02,240 --> 00:14:05,440
but you need to opt in and enable these

00:14:03,760 --> 00:14:06,800
for private repos

00:14:05,440 --> 00:14:08,160
and with that you know about your

00:14:06,800 --> 00:14:09,519
dependencies and you know that they're

00:14:08,160 --> 00:14:11,120
vulnerable so you can take a break

00:14:09,519 --> 00:14:12,480
tonight and cut your hair

00:14:11,120 --> 00:14:15,199
but wait you still need to actually

00:14:12,480 --> 00:14:16,880
apply the patch i mean as a developer i

00:14:15,199 --> 00:14:17,519
actually have to code this is terrible i

00:14:16,880 --> 00:14:20,480
was going to watch

00:14:17,519 --> 00:14:22,079
tiger king tonight thankfully we made

00:14:20,480 --> 00:14:23,360
this easy for you too

00:14:22,079 --> 00:14:25,040
the pentabot will send you a pull

00:14:23,360 --> 00:14:25,680
request to update a dependency to the

00:14:25,040 --> 00:14:27,120
minimum

00:14:25,680 --> 00:14:29,360
version that resolves a known

00:14:27,120 --> 00:14:31,040
vulnerability this is done automatically

00:14:29,360 --> 00:14:32,240
based on known vulnerabilities and known

00:14:31,040 --> 00:14:34,160
patched versions

00:14:32,240 --> 00:14:35,680
dependable security updates create a

00:14:34,160 --> 00:14:37,120
pull request to update package

00:14:35,680 --> 00:14:39,440
dependencies in a lock file

00:14:37,120 --> 00:14:41,199
by proposing a change to the lock file

00:14:39,440 --> 00:14:42,639
when i say the minimum change i mean

00:14:41,199 --> 00:14:44,000
that it's the first version with the

00:14:42,639 --> 00:14:44,560
patch because a small change is easier

00:14:44,000 --> 00:14:46,480
for you to

00:14:44,560 --> 00:14:48,160
review and easier to merge and we want

00:14:46,480 --> 00:14:49,600
you to keep moving forward

00:14:48,160 --> 00:14:51,519
in fact once you turn on dependency

00:14:49,600 --> 00:14:53,360
graph and security alerts

00:14:51,519 --> 00:14:54,720
then dependable security updates are

00:14:53,360 --> 00:14:57,600
automatically enabled

00:14:54,720 --> 00:14:58,000
easy and that really is so easy you can

00:14:57,600 --> 00:14:59,680
review

00:14:58,000 --> 00:15:01,680
it you know review the pull request

00:14:59,680 --> 00:15:02,639
check the test results or your cicd

00:15:01,680 --> 00:15:04,160
results that you have for that pull

00:15:02,639 --> 00:15:06,000
request and then make the fix and then

00:15:04,160 --> 00:15:07,839
get back to tiger king you cool cats and

00:15:06,000 --> 00:15:10,160
kittens

00:15:07,839 --> 00:15:11,760
and we've seen a lot of you use this

00:15:10,160 --> 00:15:13,680
since dependable security updates were

00:15:11,760 --> 00:15:15,920
integrated into github natively

00:15:13,680 --> 00:15:17,839
we've generated and seen you merge a ton

00:15:15,920 --> 00:15:19,760
of pr's over 750

00:15:17,839 --> 00:15:22,000
000 pr's in fact and over 4 million

00:15:19,760 --> 00:15:23,279
total including dependable preview

00:15:22,000 --> 00:15:25,519
we're glad that we could make patching

00:15:23,279 --> 00:15:26,639
easier for you we've also seen

00:15:25,519 --> 00:15:28,639
anecdotally

00:15:26,639 --> 00:15:30,399
when we had an error in generating

00:15:28,639 --> 00:15:30,959
dependable prs which thankfully is now

00:15:30,399 --> 00:15:32,959
fixed

00:15:30,959 --> 00:15:35,120
that when you receive a pr you're almost

00:15:32,959 --> 00:15:36,639
twice as likely to patch it within a day

00:15:35,120 --> 00:15:38,160
and one and a half times more likely to

00:15:36,639 --> 00:15:39,519
patch within a week than when you don't

00:15:38,160 --> 00:15:42,480
receive a pr

00:15:39,519 --> 00:15:44,079
and that's super critical in fact for

00:15:42,480 --> 00:15:45,920
repos that have dependable security

00:15:44,079 --> 00:15:49,440
updates enabled since ga

00:15:45,920 --> 00:15:50,639
the mean time to repair mttr is only 40

00:15:49,440 --> 00:15:53,519
days

00:15:50,639 --> 00:15:54,000
now that sounds you know good or bad how

00:15:53,519 --> 00:15:55,759
do i know

00:15:54,000 --> 00:15:57,120
well fortunately or unfortunately i

00:15:55,759 --> 00:15:58,720
can't compare this to repos without

00:15:57,120 --> 00:16:00,320
these features enabled on github

00:15:58,720 --> 00:16:01,759
because we respect your privacy and if

00:16:00,320 --> 00:16:03,360
you don't turn the feature on then we

00:16:01,759 --> 00:16:05,440
don't know about your vulnerabilities

00:16:03,360 --> 00:16:06,880
so i have to compare to industry metrics

00:16:05,440 --> 00:16:09,600
the industry says that this currently

00:16:06,880 --> 00:16:11,440
takes months sonotype says that mttr

00:16:09,600 --> 00:16:14,560
for time from von disclosure to patch in

00:16:11,440 --> 00:16:16,399
a project is 180 days

00:16:14,560 --> 00:16:18,720
and sneak finds this for open source

00:16:16,399 --> 00:16:20,399
projects to be more than two years

00:16:18,720 --> 00:16:22,639
getting your repo down to just 40 days

00:16:20,399 --> 00:16:24,079
is a huge improvement

00:16:22,639 --> 00:16:25,759
unfortunately today we can't always

00:16:24,079 --> 00:16:26,240
generate a pr for you and we're working

00:16:25,759 --> 00:16:27,680
on this

00:16:26,240 --> 00:16:29,920
we're continuing to invest here in the

00:16:27,680 --> 00:16:32,079
ecosystem coverage for alerts and prs

00:16:29,920 --> 00:16:34,000
and making it easier to review test and

00:16:32,079 --> 00:16:35,440
merge these pr's

00:16:34,000 --> 00:16:36,639
and since acquiring the pen about a year

00:16:35,440 --> 00:16:38,240
ago we're continuing to add

00:16:36,639 --> 00:16:39,120
functionality into the core github

00:16:38,240 --> 00:16:40,720
product

00:16:39,120 --> 00:16:42,079
look out soon for dependable version

00:16:40,720 --> 00:16:43,680
updates which will send you a pull

00:16:42,079 --> 00:16:45,440
request to update a dependency to the

00:16:43,680 --> 00:16:46,560
latest stable version

00:16:45,440 --> 00:16:48,079
you're already familiar with this

00:16:46,560 --> 00:16:48,639
functionality if you're a dependable

00:16:48,079 --> 00:16:50,079
user

00:16:48,639 --> 00:16:52,639
prior to the github acquisition but this

00:16:50,079 --> 00:16:54,000
will be new to github native depend upon

00:16:52,639 --> 00:16:55,920
and this helps improve your security as

00:16:54,000 --> 00:16:56,560
well right when it's really critical bug

00:16:55,920 --> 00:16:59,040
hits

00:16:56,560 --> 00:17:00,800
you need to be able to quickly patch in

00:16:59,040 --> 00:17:02,240
general patches will only come out for

00:17:00,800 --> 00:17:03,279
the latest supported versions of a

00:17:02,240 --> 00:17:04,799
dependency

00:17:03,279 --> 00:17:07,199
and so regularly updating your

00:17:04,799 --> 00:17:09,039
dependencies means that a change will be

00:17:07,199 --> 00:17:11,360
relatively minor and so it's less likely

00:17:09,039 --> 00:17:11,360
to break

00:17:11,439 --> 00:17:14,559
all right so we talked about developers

00:17:13,679 --> 00:17:16,799
now let's talk about

00:17:14,559 --> 00:17:18,160
maintainers you also have a critical

00:17:16,799 --> 00:17:18,880
role in keeping the software supply

00:17:18,160 --> 00:17:20,640
chain secure

00:17:18,880 --> 00:17:22,959
and that's properly disclosing when you

00:17:20,640 --> 00:17:25,360
find a new vulnerability in your project

00:17:22,959 --> 00:17:26,640
and patching it when you find a new

00:17:25,360 --> 00:17:28,640
vulnerability in your project

00:17:26,640 --> 00:17:30,400
you can create a security advisory to

00:17:28,640 --> 00:17:32,400
develop and publish the fix

00:17:30,400 --> 00:17:33,520
in a private draft advisory and in a

00:17:32,400 --> 00:17:35,840
private fork

00:17:33,520 --> 00:17:37,120
you can discuss and fix your issue and

00:17:35,840 --> 00:17:38,400
then publish information when you're

00:17:37,120 --> 00:17:39,840
ready to go public like once you've

00:17:38,400 --> 00:17:41,520
developed a fix

00:17:39,840 --> 00:17:43,520
if applicable maintainers can also

00:17:41,520 --> 00:17:45,200
request a cve directly from github for

00:17:43,520 --> 00:17:46,320
their vulnerability

00:17:45,200 --> 00:17:48,640
vulnerabilities are published to

00:17:46,320 --> 00:17:50,240
github's advisory database which is an

00:17:48,640 --> 00:17:51,760
open source database of vulnerabilities

00:17:50,240 --> 00:17:52,799
for several ecosystems supported on

00:17:51,760 --> 00:17:55,280
github

00:17:52,799 --> 00:17:57,120
it's licensed under creative commons 4.0

00:17:55,280 --> 00:17:58,720
so it's free to use with attribution

00:17:57,120 --> 00:18:00,960
because we think that this data should

00:17:58,720 --> 00:18:02,720
be free and easily accessible so that

00:18:00,960 --> 00:18:05,039
anyone can use it to verify and patch

00:18:02,720 --> 00:18:06,400
their code the github advisory database

00:18:05,039 --> 00:18:07,520
is what powers our features like

00:18:06,400 --> 00:18:08,559
security alerts for vulnerable

00:18:07,520 --> 00:18:10,880
dependencies

00:18:08,559 --> 00:18:12,240
and the dependability security updates

00:18:10,880 --> 00:18:14,720
how do you even

00:18:12,240 --> 00:18:16,320
know if you have a vulnerability though

00:18:14,720 --> 00:18:17,600
well you might find it using a tool like

00:18:16,320 --> 00:18:19,440
code scanning which was talked about in

00:18:17,600 --> 00:18:21,280
the keynote this morning

00:18:19,440 --> 00:18:22,799
and if you're lucky a researcher or

00:18:21,280 --> 00:18:24,640
community member reports issues directly

00:18:22,799 --> 00:18:26,080
to you

00:18:24,640 --> 00:18:28,480
now let me tell you the number one pain

00:18:26,080 --> 00:18:30,240
point of security researchers today

00:18:28,480 --> 00:18:31,520
it's not knowing who to go to with a

00:18:30,240 --> 00:18:33,919
vulnerability it's trying to do the

00:18:31,520 --> 00:18:35,440
right thing and having no way to do it

00:18:33,919 --> 00:18:37,200
so many researchers that i know who

00:18:35,440 --> 00:18:37,520
chose to go public with a zero day which

00:18:37,200 --> 00:18:38,720
is

00:18:37,520 --> 00:18:40,799
a vulnerability without a patch

00:18:38,720 --> 00:18:44,160
available it's because they tried to

00:18:40,799 --> 00:18:46,400
contact maintainers and got no response

00:18:44,160 --> 00:18:48,320
in the 2019 state of open source

00:18:46,400 --> 00:18:50,240
security report from sneak

00:18:48,320 --> 00:18:51,679
they found that if you had a if you had

00:18:50,240 --> 00:18:55,360
a disclosure policy

00:18:51,679 --> 00:18:58,400
73 of incoming reports would be private

00:18:55,360 --> 00:18:59,919
and if you didn't only 21 would that's

00:18:58,400 --> 00:19:01,280
people bashing their heads against a

00:18:59,919 --> 00:19:03,039
wall trying to help you and trying to do

00:19:01,280 --> 00:19:05,440
the right thing

00:19:03,039 --> 00:19:07,120
so what do you do it's actually

00:19:05,440 --> 00:19:08,799
surprisingly straightforward

00:19:07,120 --> 00:19:10,799
lay out your security disclosure and

00:19:08,799 --> 00:19:12,720
reporting policy in a security.md

00:19:10,799 --> 00:19:14,400
markdown file for your repo

00:19:12,720 --> 00:19:16,160
this describes everything researchers

00:19:14,400 --> 00:19:17,120
and users need to report a potential

00:19:16,160 --> 00:19:18,880
vulnerability

00:19:17,120 --> 00:19:20,320
for example you might include a security

00:19:18,880 --> 00:19:22,320
ad email account

00:19:20,320 --> 00:19:24,480
you can create per project policies or

00:19:22,320 --> 00:19:27,679
automatically apply one security policy

00:19:24,480 --> 00:19:29,280
to every repository in an organization

00:19:27,679 --> 00:19:30,640
if i could wave a magic wand and make

00:19:29,280 --> 00:19:31,840
all maintainers do something to improve

00:19:30,640 --> 00:19:34,240
their security

00:19:31,840 --> 00:19:35,679
well this is actually not it it's 2fa

00:19:34,240 --> 00:19:37,440
but this is a very close second

00:19:35,679 --> 00:19:39,520
so please consider adding a security

00:19:37,440 --> 00:19:41,039
markdown file to state your disclosure

00:19:39,520 --> 00:19:42,640
policy

00:19:41,039 --> 00:19:45,120
and if you're a researcher and you find

00:19:42,640 --> 00:19:46,640
a vulnerability in open source repo

00:19:45,120 --> 00:19:49,200
back me up here go check out that

00:19:46,640 --> 00:19:50,640
security md file and see what you find

00:19:49,200 --> 00:19:52,400
to make this even easier when you're

00:19:50,640 --> 00:19:55,120
filing an issue in a repo say

00:19:52,400 --> 00:19:57,120
about a vulnerability if the repo has a

00:19:55,120 --> 00:19:58,559
security policy it surfaced to you right

00:19:57,120 --> 00:19:59,600
in that reporting flow

00:19:58,559 --> 00:20:01,600
click through to check out the

00:19:59,600 --> 00:20:03,200
security.md file and the recommended way

00:20:01,600 --> 00:20:04,960
to report an issue

00:20:03,200 --> 00:20:06,799
even if not please try to report the

00:20:04,960 --> 00:20:09,679
vulnerability privately

00:20:06,799 --> 00:20:11,039
to other contacts that you find online

00:20:09,679 --> 00:20:12,960
and soon we'll make it easier for you to

00:20:11,039 --> 00:20:14,480
get recognition for the work that you do

00:20:12,960 --> 00:20:16,080
as part of security advisories

00:20:14,480 --> 00:20:17,039
maintainers can credit anyone who helped

00:20:16,080 --> 00:20:18,880
discover the issue

00:20:17,039 --> 00:20:20,640
or develop a fix as part right as part

00:20:18,880 --> 00:20:22,080
of the advisory these will show up as

00:20:20,640 --> 00:20:23,840
part of the vulnerabilities published in

00:20:22,080 --> 00:20:25,200
the advisory database

00:20:23,840 --> 00:20:26,720
thank you for the ongoing work that you

00:20:25,200 --> 00:20:28,960
do to support the security of our open

00:20:26,720 --> 00:20:31,600
source code

00:20:28,960 --> 00:20:33,120
so let's do a demo we'll recap what we

00:20:31,600 --> 00:20:34,240
talked about today and what developers

00:20:33,120 --> 00:20:36,960
can do

00:20:34,240 --> 00:20:38,480
we will create a new private repo we'll

00:20:36,960 --> 00:20:39,520
enable dependency graph

00:20:38,480 --> 00:20:41,120
security alerts for vulnerable

00:20:39,520 --> 00:20:42,080
dependencies and depend about security

00:20:41,120 --> 00:20:43,679
updates

00:20:42,080 --> 00:20:45,200
then we'll commit a package manifest

00:20:43,679 --> 00:20:46,640
file and

00:20:45,200 --> 00:20:48,640
watch the magic happen we'll be able to

00:20:46,640 --> 00:20:50,159
see our dependencies be notified of

00:20:48,640 --> 00:20:51,600
vulnerable dependencies

00:20:50,159 --> 00:20:54,240
and receive prs to fix those

00:20:51,600 --> 00:20:55,600
dependencies and then patch

00:20:54,240 --> 00:20:56,720
and you'll see uh too bad there aren't

00:20:55,600 --> 00:20:57,600
commercial breaks anymore because you

00:20:56,720 --> 00:20:59,840
could do this all in

00:20:57,600 --> 00:21:01,679
commercial break for tiger king so first

00:20:59,840 --> 00:21:05,280
i'm in my organization here

00:21:01,679 --> 00:21:08,480
and i am going to create a new repo and

00:21:05,280 --> 00:21:10,480
my satellite demo

00:21:08,480 --> 00:21:11,919
great and i'm going to create a private

00:21:10,480 --> 00:21:13,280
repo because like i said these features

00:21:11,919 --> 00:21:14,480
are enabled for public reboot by default

00:21:13,280 --> 00:21:17,360
so you specifically want to see what it

00:21:14,480 --> 00:21:22,320
looks like on private repos

00:21:17,360 --> 00:21:22,320
i create a new private repo and

00:21:22,559 --> 00:21:26,000
now that i have that going the first

00:21:24,000 --> 00:21:29,120
thing i'm going to do is commit a

00:21:26,000 --> 00:21:32,080
manifest file on my repo

00:21:29,120 --> 00:21:32,799
so i'm using java so i'm creating a

00:21:32,080 --> 00:21:35,120
project

00:21:32,799 --> 00:21:36,640
object uh manifest file which i always

00:21:35,120 --> 00:21:38,159
thought was a funny word to say

00:21:36,640 --> 00:21:40,480
have a bunch of dependencies specified

00:21:38,159 --> 00:21:42,159
in that i'm a great developer i'm

00:21:40,480 --> 00:21:44,000
committing straight to master please

00:21:42,159 --> 00:21:46,480
don't be like me

00:21:44,000 --> 00:21:48,159
okay let's go over the security tab in

00:21:46,480 --> 00:21:49,600
the security tab you'll see the new

00:21:48,159 --> 00:21:51,520
way of enabling a bunch of features that

00:21:49,600 --> 00:21:52,400
we talked about earlier today in grey's

00:21:51,520 --> 00:21:54,240
talk

00:21:52,400 --> 00:21:55,520
and one of these items is dependency

00:21:54,240 --> 00:21:57,039
alerts so we're going to go ahead and

00:21:55,520 --> 00:21:58,880
click on that

00:21:57,039 --> 00:22:00,720
and first i'll allow github to perform

00:21:58,880 --> 00:22:02,159
read-only access this is to access the

00:22:00,720 --> 00:22:02,880
actual contents of the package manifest

00:22:02,159 --> 00:22:04,480
file

00:22:02,880 --> 00:22:05,679
and then i'll enable dependency graph

00:22:04,480 --> 00:22:07,440
and security alerts and those little

00:22:05,679 --> 00:22:08,080
green check marks means that i'm good to

00:22:07,440 --> 00:22:10,000
go

00:22:08,080 --> 00:22:11,200
and as i mentioned earlier once you

00:22:10,000 --> 00:22:12,880
enable dependency graph and security

00:22:11,200 --> 00:22:14,799
alerts then dependable security updates

00:22:12,880 --> 00:22:18,000
are also enabled by default

00:22:14,799 --> 00:22:21,039
so let's go over into insights

00:22:18,000 --> 00:22:22,480
and i'll click on dependency graph and i

00:22:21,039 --> 00:22:22,960
should see all my dependencies right

00:22:22,480 --> 00:22:25,120
here

00:22:22,960 --> 00:22:26,640
so what's in that package manifest file

00:22:25,120 --> 00:22:29,440
includes xmp core

00:22:26,640 --> 00:22:30,559
android svg jackson databind et cetera

00:22:29,440 --> 00:22:32,159
and so i understand what all my

00:22:30,559 --> 00:22:34,080
dependencies are and you'll see

00:22:32,159 --> 00:22:36,000
you know just in that time that i

00:22:34,080 --> 00:22:37,280
committed and enabled that functionality

00:22:36,000 --> 00:22:38,480
it's already discovered some known

00:22:37,280 --> 00:22:39,200
security vulnerabilities and some of

00:22:38,480 --> 00:22:40,720
those you know

00:22:39,200 --> 00:22:42,240
aren't looking aren't looking great so

00:22:40,720 --> 00:22:44,080
let's go let's go see those security

00:22:42,240 --> 00:22:46,240
alerts that i have

00:22:44,080 --> 00:22:47,200
so my security alerts it tells me that i

00:22:46,240 --> 00:22:49,840
have um

00:22:47,200 --> 00:22:54,640
five open security alerts and wow one of

00:22:49,840 --> 00:22:56,640
them is critical let's click on that one

00:22:54,640 --> 00:22:58,080
so this tells me that my security alert

00:22:56,640 --> 00:23:01,919
is in jackson data bind

00:22:58,080 --> 00:23:03,280
uh it tells me how to remediate my uh

00:23:01,919 --> 00:23:05,600
the vulnerability that i have here i

00:23:03,280 --> 00:23:07,120
need to update to a to a later version

00:23:05,600 --> 00:23:08,880
and it tells me which cves this is

00:23:07,120 --> 00:23:10,640
related to and there are a lot of them a

00:23:08,880 --> 00:23:12,640
lot of moderates and criticals and highs

00:23:10,640 --> 00:23:14,559
this is not looking good

00:23:12,640 --> 00:23:16,159
and so i need to update this and

00:23:14,559 --> 00:23:17,200
actually apply the fix and thankfully

00:23:16,159 --> 00:23:18,720
you'll see right at the top here

00:23:17,200 --> 00:23:20,000
dependable has actually already opened a

00:23:18,720 --> 00:23:22,559
pull request

00:23:20,000 --> 00:23:23,679
so let's click on that dependibot has

00:23:22,559 --> 00:23:26,000
opened a pull request

00:23:23,679 --> 00:23:27,280
to upgrade my vulnerability so i upgrade

00:23:26,000 --> 00:23:30,240
my dependency to a

00:23:27,280 --> 00:23:31,440
uh no longer vulnerable version um it

00:23:30,240 --> 00:23:32,720
says that it fixes the security

00:23:31,440 --> 00:23:34,799
vulnerability

00:23:32,720 --> 00:23:38,799
and in the package manifest file it

00:23:34,799 --> 00:23:40,480
moves it from 2.8.11 to 2.9.10.4

00:23:38,799 --> 00:23:42,159
so if i had some cicd checks they might

00:23:40,480 --> 00:23:44,480
run here i'm good to go

00:23:42,159 --> 00:23:45,679
i'm going to merge that thank you to

00:23:44,480 --> 00:23:47,760
pentabot for fixing

00:23:45,679 --> 00:23:50,159
the issues that i have there and you'll

00:23:47,760 --> 00:23:54,159
see that security vulnerability

00:23:50,159 --> 00:23:56,640
is gone because we fixed it great

00:23:54,159 --> 00:23:58,640
so to quickly recap that what do we do

00:23:56,640 --> 00:23:59,840
we created a new repo we enabled some

00:23:58,640 --> 00:24:01,120
features and then you saw within a

00:23:59,840 --> 00:24:02,640
matter of minutes

00:24:01,120 --> 00:24:04,320
that we actually had a pull request to

00:24:02,640 --> 00:24:07,840
fix issues in your project

00:24:04,320 --> 00:24:09,120
minutes that was awesome okay

00:24:07,840 --> 00:24:11,039
looking across how vulnerabilities are

00:24:09,120 --> 00:24:12,559
discovered and remediated then

00:24:11,039 --> 00:24:14,080
for security researchers you know what

00:24:12,559 --> 00:24:15,760
is gonna do for security researchers

00:24:14,080 --> 00:24:18,000
once you identify vulnerability

00:24:15,760 --> 00:24:19,679
please report it check the security.md

00:24:18,000 --> 00:24:21,600
file if the repo has one to understand

00:24:19,679 --> 00:24:23,279
their vulnerability reporting policy

00:24:21,600 --> 00:24:24,799
for maintainer make sure that you have a

00:24:23,279 --> 00:24:26,240
security md file with your policy

00:24:24,799 --> 00:24:27,039
there's one thing you can do right away

00:24:26,240 --> 00:24:30,480
it's this

00:24:27,039 --> 00:24:31,520
well and enable 2fa then if or when you

00:24:30,480 --> 00:24:32,000
receive information about a new

00:24:31,520 --> 00:24:33,440
vulnerability

00:24:32,000 --> 00:24:35,039
in your project you can privately

00:24:33,440 --> 00:24:36,640
discuss and create a fix

00:24:35,039 --> 00:24:37,840
and then publish a security advisory

00:24:36,640 --> 00:24:39,279
detailing information about the

00:24:37,840 --> 00:24:41,440
vulnerability

00:24:39,279 --> 00:24:42,720
and soon give credit where credit is due

00:24:41,440 --> 00:24:45,039
to those that helped discover the

00:24:42,720 --> 00:24:47,440
vulnerability or develop the fix

00:24:45,039 --> 00:24:48,640
for developers you want to know what

00:24:47,440 --> 00:24:49,600
dependencies you use

00:24:48,640 --> 00:24:51,120
you know want to know about the

00:24:49,600 --> 00:24:53,360
vulnerabilities of those dependencies

00:24:51,120 --> 00:24:54,799
patch them and then get back to work

00:24:53,360 --> 00:24:56,480
dependency graph helps you understand

00:24:54,799 --> 00:24:57,840
your project's dependencies

00:24:56,480 --> 00:24:59,520
security alerts for vulnerable

00:24:57,840 --> 00:25:01,200
dependencies let you know when one of

00:24:59,520 --> 00:25:03,039
those contains a vulnerability

00:25:01,200 --> 00:25:04,320
and dependable security updates sends

00:25:03,039 --> 00:25:06,960
you a pull request to automatically

00:25:04,320 --> 00:25:08,159
suggest an update to a fixed version

00:25:06,960 --> 00:25:09,919
and soon you'll be able to use

00:25:08,159 --> 00:25:11,440
dependable version updates to keep your

00:25:09,919 --> 00:25:12,240
dependencies up to date on an ongoing

00:25:11,440 --> 00:25:13,440
basis

00:25:12,240 --> 00:25:14,720
and if there's one thing that you do

00:25:13,440 --> 00:25:15,600
today is enable these features for your

00:25:14,720 --> 00:25:17,039
private repos

00:25:15,600 --> 00:25:18,320
they're already on for your public repos

00:25:17,039 --> 00:25:19,840
by default but please go into your

00:25:18,320 --> 00:25:22,400
settings and enable them for any private

00:25:19,840 --> 00:25:23,679
repos that you manage

00:25:22,400 --> 00:25:25,120
and there are lots of other capabilities

00:25:23,679 --> 00:25:26,720
that github offers in the security space

00:25:25,120 --> 00:25:27,919
that we didn't talk about here

00:25:26,720 --> 00:25:30,000
primarily to help you discover new

00:25:27,919 --> 00:25:31,039
vulnerabilities in code code scanning

00:25:30,000 --> 00:25:33,120
uses code ql

00:25:31,039 --> 00:25:34,400
a semantic code analysis engine to query

00:25:33,120 --> 00:25:35,200
code for potential vulnerability

00:25:34,400 --> 00:25:37,039
patterns

00:25:35,200 --> 00:25:38,480
and secret scanning revokes secrets that

00:25:37,039 --> 00:25:40,000
you've committed to public repos

00:25:38,480 --> 00:25:42,000
and alerts your secrets and code in your

00:25:40,000 --> 00:25:43,760
private repos so all together

00:25:42,000 --> 00:25:45,600
you can use a suite of github security

00:25:43,760 --> 00:25:48,559
features to help secure your code

00:25:45,600 --> 00:25:49,520
throughout your development lifecycle to

00:25:48,559 --> 00:25:51,200
learn more

00:25:49,520 --> 00:25:54,799
check out github's overview of security

00:25:51,200 --> 00:25:54,799
features at the link below

00:25:55,120 --> 00:25:58,559
thank you looking forward to q a

00:25:59,360 --> 00:26:02,240
thank you so much that wonderful

00:26:01,440 --> 00:26:03,919
presentation

00:26:02,240 --> 00:26:05,679
[Music]

00:26:03,919 --> 00:26:07,760
i also love the way you just like

00:26:05,679 --> 00:26:09,440
dropped in all the things that people

00:26:07,760 --> 00:26:11,360
are doing in isolation like

00:26:09,440 --> 00:26:13,200
feeding their sourdough starter cutting

00:26:11,360 --> 00:26:14,080
their own hair and watching taiyaki i'm

00:26:13,200 --> 00:26:16,080
just like

00:26:14,080 --> 00:26:17,840
that is just gonna resonate with so many

00:26:16,080 --> 00:26:18,159
people now you don't need to cut your

00:26:17,840 --> 00:26:20,480
hair

00:26:18,159 --> 00:26:25,840
jared you're fine just get them are you

00:26:20,480 --> 00:26:25,840
kidding me she told me to cut my hair

00:26:26,799 --> 00:26:29,600
this weekend or something for this

00:26:28,159 --> 00:26:32,240
presentation like you're seeing all my

00:26:29,600 --> 00:26:35,679
colleagues that have fresh new haircuts

00:26:32,240 --> 00:26:37,440
i just like sit at myself like you know

00:26:35,679 --> 00:26:38,960
while my security vulnerabilities are

00:26:37,440 --> 00:26:41,440
being fixed automatically

00:26:38,960 --> 00:26:42,640
love it so good now we have a couple of

00:26:41,440 --> 00:26:44,000
questions coming through from the

00:26:42,640 --> 00:26:45,679
discussions i probably have time for

00:26:44,000 --> 00:26:48,559
maybe one or two questions

00:26:45,679 --> 00:26:50,559
jared what have i got yeah and i just

00:26:48,559 --> 00:26:52,159
need to say like i'm not cutting my hair

00:26:50,559 --> 00:26:54,320
if i cut my hair it looked like i jumped

00:26:52,159 --> 00:26:54,799
into a lawnmower so i'm gonna leave that

00:26:54,320 --> 00:26:58,480
to you

00:26:54,799 --> 00:27:01,840
or more skill but going to the questions

00:26:58,480 --> 00:27:04,400
we have uh from g.a beach are there

00:27:01,840 --> 00:27:06,559
plans to expose an api endpoint to check

00:27:04,400 --> 00:27:09,120
the vulnerability alerts are enabled on

00:27:06,559 --> 00:27:09,120
a repo

00:27:09,440 --> 00:27:12,480
oh to check i see that just whether or

00:27:11,520 --> 00:27:13,520
not it's enabled

00:27:12,480 --> 00:27:15,679
yeah that's really something that we're

00:27:13,520 --> 00:27:16,080
looking into i know that um being able

00:27:15,679 --> 00:27:18,159
to

00:27:16,080 --> 00:27:19,840
to manage all of this information via

00:27:18,159 --> 00:27:21,440
api endpoints and web hooks is something

00:27:19,840 --> 00:27:22,399
that we want to make really easy for you

00:27:21,440 --> 00:27:24,159
because i know a lot of you have built

00:27:22,399 --> 00:27:25,760
custom tooling on top of this

00:27:24,159 --> 00:27:27,679
um so that's certainly part of what we

00:27:25,760 --> 00:27:29,760
like to do

00:27:27,679 --> 00:27:31,440
that's awesome i think they're going to

00:27:29,760 --> 00:27:33,840
be super excited for that

00:27:31,440 --> 00:27:34,640
so i think we got time for a couple more

00:27:33,840 --> 00:27:37,360
i think so

00:27:34,640 --> 00:27:38,000
so next question okay what does it do

00:27:37,360 --> 00:27:40,480
what is this

00:27:38,000 --> 00:27:43,919
yeah what does the dependency graph use

00:27:40,480 --> 00:27:43,919
to determine my dependencies

00:27:44,240 --> 00:27:47,760
the dependency graph looks at a couple

00:27:46,159 --> 00:27:49,120
of different things it primarily looks

00:27:47,760 --> 00:27:52,080
at your lock files

00:27:49,120 --> 00:27:53,520
to determine your dependencies and it

00:27:52,080 --> 00:27:54,240
also takes into account transitive

00:27:53,520 --> 00:27:56,320
dependencies

00:27:54,240 --> 00:27:58,159
so if you're um if your if your

00:27:56,320 --> 00:28:00,799
dependencies have other dependencies

00:27:58,159 --> 00:28:02,000
then it looks at those as well so we we

00:28:00,799 --> 00:28:02,880
look at the the versions that you

00:28:02,000 --> 00:28:04,320
specifically include

00:28:02,880 --> 00:28:07,840
in in your lock file packed manifest

00:28:04,320 --> 00:28:10,399
files um to determine what you're using

00:28:07,840 --> 00:28:11,200
outstanding okay i think we have time

00:28:10,399 --> 00:28:14,320
for one more

00:28:11,200 --> 00:28:17,120
and then maybe we can get your last tip

00:28:14,320 --> 00:28:19,039
maya all right last question if i find a

00:28:17,120 --> 00:28:21,200
vulnerability in a github project

00:28:19,039 --> 00:28:23,919
but i'm not the maintainer can i publish

00:28:21,200 --> 00:28:26,559
a security advisory

00:28:23,919 --> 00:28:26,960
you cannot today um we want to make

00:28:26,559 --> 00:28:28,399
those

00:28:26,960 --> 00:28:29,919
we want we would like you to talk to the

00:28:28,399 --> 00:28:30,240
maintainers directly and figure out how

00:28:29,919 --> 00:28:33,919
to

00:28:30,240 --> 00:28:36,240
how to create the fix and the advisory

00:28:33,919 --> 00:28:38,480
although we hear you we get this request

00:28:36,240 --> 00:28:39,600
a lot like a lot a lot

00:28:38,480 --> 00:28:40,799
um and so it's something we're

00:28:39,600 --> 00:28:42,840
definitely thinking about doing in the

00:28:40,799 --> 00:28:45,840
future

00:28:42,840 --> 00:28:45,840
outstanding

00:28:47,830 --> 00:28:50,799
[Laughter]

00:28:48,960 --> 00:28:52,480
now apart from cutting your own hair

00:28:50,799 --> 00:28:53,679
watching dieting and feeding your

00:28:52,480 --> 00:28:56,720
sourdough starter

00:28:53,679 --> 00:28:59,120
what is your number one top takeaway tip

00:28:56,720 --> 00:29:01,360
for this maya

00:28:59,120 --> 00:29:02,720
um not even related to my presentation

00:29:01,360 --> 00:29:05,760
but enable 2fa

00:29:02,720 --> 00:29:06,159
like so many swatching compromises come

00:29:05,760 --> 00:29:08,640
from

00:29:06,159 --> 00:29:09,679
what account taken if you all unable to

00:29:08,640 --> 00:29:13,840
fa

00:29:09,679 --> 00:29:13,840
i might be out of a job

00:29:15,360 --> 00:29:19,200
please okay so every single person out

00:29:18,080 --> 00:29:23,039
there

00:29:19,200 --> 00:29:25,520
watching right now go and able to fa

00:29:23,039 --> 00:29:26,640
um i mean look we love you maya so

00:29:25,520 --> 00:29:28,159
you're not going to be out of a job i

00:29:26,640 --> 00:29:30,080
don't think you know

00:29:28,159 --> 00:29:31,440
we'll find some cool things you can just

00:29:30,080 --> 00:29:32,799
bake cool things for us and kind of

00:29:31,440 --> 00:29:36,480
frontier would be great

00:29:32,799 --> 00:29:38,159
so i think it'd be fine man enable 2fa

00:29:36,480 --> 00:29:39,679
and then thank you so so much for

00:29:38,159 --> 00:29:40,399
joining us and offering up all your

00:29:39,679 --> 00:29:41,840
advice next

00:29:40,399 --> 00:29:43,360
days my is going to be over in the

00:29:41,840 --> 00:29:44,960
discussions for the next half an hour

00:29:43,360 --> 00:29:52,159
thanks maya

00:29:44,960 --> 00:29:52,159

YouTube URL: https://www.youtube.com/watch?v=XwKTUji5HtY


