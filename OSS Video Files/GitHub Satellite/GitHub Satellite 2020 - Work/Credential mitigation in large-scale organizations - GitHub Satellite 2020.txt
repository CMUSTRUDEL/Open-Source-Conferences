Title: Credential mitigation in large-scale organizations - GitHub Satellite 2020
Publication date: 2020-05-07
Playlist: GitHub Satellite 2020 - Work
Description: 
	Presented by Tobias Gabriel and Nikolas Krätzschmar, SAP.

GitHub Satellite: A community connected by code

On May 6th, we threw a free virtual event featuring developers working together on the world’s software, announcements from the GitHub team, and inspiring performances by artists who code.

More information: https://githubsatellite.com
Schedule: https://githubsatellite.com/schedule/
Captions: 
	00:00:01,159 --> 00:00:06,720
so what we have coming ups access

00:00:04,140 --> 00:00:08,309
credential large-scale organizations and

00:00:06,720 --> 00:00:08,970
we're gonna have two amazing speakers

00:00:08,309 --> 00:00:11,519
joining us

00:00:08,970 --> 00:00:13,620
Tobias Gabriel developer at sa P yeah

00:00:11,519 --> 00:00:15,389
you know me I can't wait for that AI rap

00:00:13,620 --> 00:00:18,240
battle I'm sorry it's been on my mind

00:00:15,389 --> 00:00:20,460
all day 12:40 Pacific gonna wash it on

00:00:18,240 --> 00:00:22,560
and Nicholas catch Meyer who's a student

00:00:20,460 --> 00:00:24,539
s AP developer and they're gonna tell

00:00:22,560 --> 00:00:27,359
you all about what they've been learning

00:00:24,539 --> 00:00:28,859
and using how to make it and get help

00:00:27,359 --> 00:00:30,779
more effective for people that are

00:00:28,859 --> 00:00:47,760
learning so take it away to Baia San

00:00:30,779 --> 00:00:50,910
Nicolas high and vacant from my site as

00:00:47,760 --> 00:00:53,190
well today we want to give you an quick

00:00:50,910 --> 00:00:55,410
overview in the next 20 minutes what we

00:00:53,190 --> 00:00:58,320
learned from our adventures in

00:00:55,410 --> 00:01:01,410
credential mitigation at s AP and what

00:00:58,320 --> 00:01:03,719
things we did there s vs. Dylan topic in

00:01:01,410 --> 00:01:05,700
motion for us we will not go into too

00:01:03,719 --> 00:01:08,010
much deeper detail about the actual

00:01:05,700 --> 00:01:11,580
findings but rather focus on the tools

00:01:08,010 --> 00:01:13,799
and processes we used for that the Fed

00:01:11,580 --> 00:01:17,189
let the that being said let me quickly

00:01:13,799 --> 00:01:19,860
introduce ourselves my name is Tobias

00:01:17,189 --> 00:01:22,259
and I'm a developer at the tools team at

00:01:19,860 --> 00:01:24,470
sa pier where my main focus is on

00:01:22,259 --> 00:01:26,549
everything around github from style

00:01:24,470 --> 00:01:28,650
administrating our internal github

00:01:26,549 --> 00:01:32,100
servers over doing git and github

00:01:28,650 --> 00:01:35,369
trainings as well as doing working on

00:01:32,100 --> 00:01:37,439
cross topics like this one I'm today

00:01:35,369 --> 00:01:39,180
joined by Nico who is a master student

00:01:37,439 --> 00:01:41,280
in our team and did most of the

00:01:39,180 --> 00:01:43,890
technical implementation of the scanner

00:01:41,280 --> 00:01:47,159
and they'll also later go into detail

00:01:43,890 --> 00:01:48,930
about that we both work for sapa which

00:01:47,159 --> 00:01:51,299
is one of the largest enterprise

00:01:48,930 --> 00:01:54,810
software vendors in the world and has

00:01:51,299 --> 00:01:56,909
over 30,000 developers with that many

00:01:54,810 --> 00:02:00,659
developers we also have a quite big

00:01:56,909 --> 00:02:03,210
codebase currently we have over 250,000

00:02:00,659 --> 00:02:06,149
repositories hosted on our main github

00:02:03,210 --> 00:02:10,440
server as well as roughly five terabyte

00:02:06,149 --> 00:02:12,480
of compressed source code with a push to

00:02:10,440 --> 00:02:13,740
Mariner source meaning that we would

00:02:12,480 --> 00:02:15,570
like to open up more

00:02:13,740 --> 00:02:18,720
of his repository so that every

00:02:15,570 --> 00:02:21,570
colleague can see them and reuse code we

00:02:18,720 --> 00:02:24,840
wanted to make sure but no credentials

00:02:21,570 --> 00:02:26,640
by accident get leaked there it happens

00:02:24,840 --> 00:02:29,910
and probably already happened every one

00:02:26,640 --> 00:02:32,340
of you myself including but you by

00:02:29,910 --> 00:02:35,550
accident commits on fire push it up and

00:02:32,340 --> 00:02:37,860
then never for never come back to clean

00:02:35,550 --> 00:02:41,130
that up so you have some password or

00:02:37,860 --> 00:02:43,140
some credentials leaked via and by limb

00:02:41,130 --> 00:02:46,890
private repositories but not critical

00:02:43,140 --> 00:02:49,500
when opening up were two organizations

00:02:46,890 --> 00:02:51,930
or whole enterprises we wanted to make

00:02:49,500 --> 00:02:53,660
sure to reduce the risk bear as much as

00:02:51,930 --> 00:02:56,310
possible

00:02:53,660 --> 00:02:58,950
however the that many repositories our

00:02:56,310 --> 00:03:01,860
challenge was now to firstly figure out

00:02:58,950 --> 00:03:03,720
how big of an issue this is and how many

00:03:01,860 --> 00:03:08,070
credentials are there actually in our

00:03:03,720 --> 00:03:10,590
source code and to focus on that I'm now

00:03:08,070 --> 00:03:12,810
handing over to Niko who they go into

00:03:10,590 --> 00:03:16,110
details how we implemented what things

00:03:12,810 --> 00:03:18,990
we had to keep in mind where and what

00:03:16,110 --> 00:03:23,760
consideration we needed to take from

00:03:18,990 --> 00:03:26,670
there Niko take a bit alike yep thanks

00:03:23,760 --> 00:03:30,390
to be us I'm Nicolas also welcome

00:03:26,670 --> 00:03:32,970
everyone from my side ok first to define

00:03:30,390 --> 00:03:35,970
what we were actually scanning for we

00:03:32,970 --> 00:03:38,070
opted to limit our search to just static

00:03:35,970 --> 00:03:41,160
patterns that can be easily identified

00:03:38,070 --> 00:03:43,500
by a regular expressions as this

00:03:41,160 --> 00:03:47,040
appeared to be sufficient for most types

00:03:43,500 --> 00:03:49,860
of authentication tokens for example all

00:03:47,040 --> 00:03:52,530
AWS keys always begin with the same

00:03:49,860 --> 00:03:54,090
leading character sequence or take

00:03:52,530 --> 00:03:56,970
google cloud certificates

00:03:54,090 --> 00:03:59,310
those are JSON objects that have some

00:03:56,970 --> 00:04:02,400
constant fields so you can easily match

00:03:59,310 --> 00:04:04,830
against those also and mostly just out

00:04:02,400 --> 00:04:06,840
of curiosity we looked for Bitcoin

00:04:04,830 --> 00:04:10,560
private keys just to see if anyone

00:04:06,840 --> 00:04:13,230
actually committed those scanning for

00:04:10,560 --> 00:04:15,990
secrets in git repositories is not

00:04:13,230 --> 00:04:18,209
actually a new problem so there already

00:04:15,990 --> 00:04:21,870
exists a handful of tools out there to

00:04:18,209 --> 00:04:24,419
do so and even just its lock utility

00:04:21,870 --> 00:04:27,330
already sa built in parameter to perform

00:04:24,419 --> 00:04:30,150
reg X matching then there is a

00:04:27,330 --> 00:04:32,220
pretty nice tool called get leaks which

00:04:30,150 --> 00:04:34,500
uses a slightly more sophisticated

00:04:32,220 --> 00:04:37,080
approach to identify secrets than just

00:04:34,500 --> 00:04:40,050
plain regular expressions by also

00:04:37,080 --> 00:04:41,879
employing entropy measurements and now

00:04:40,050 --> 00:04:43,860
while both of these tools are great and

00:04:41,879 --> 00:04:45,719
we would in fact highly encourage anyone

00:04:43,860 --> 00:04:48,060
facing a similar problem to give them a

00:04:45,719 --> 00:04:51,150
try first they were simply not

00:04:48,060 --> 00:04:53,039
performant enough at our scale so

00:04:51,150 --> 00:04:55,560
instead we decided to implement our own

00:04:53,039 --> 00:04:57,509
solution drawing inspiration from those

00:04:55,560 --> 00:05:02,430
existing tools but with a more

00:04:57,509 --> 00:05:04,139
performance focused approach the first

00:05:02,430 --> 00:05:06,780
challenge we faced in implementing this

00:05:04,139 --> 00:05:10,110
was how to extract all the repositories

00:05:06,780 --> 00:05:13,440
content across all branches for the

00:05:10,110 --> 00:05:17,759
entire commit history as it offers

00:05:13,440 --> 00:05:21,240
multiple ways you can do this you can

00:05:17,759 --> 00:05:23,340
use git lock to display the history and

00:05:21,240 --> 00:05:27,569
it will show you the petrous between

00:05:23,340 --> 00:05:30,300
each commit or alternatively KitKat file

00:05:27,569 --> 00:05:33,440
may be used in batch mode to just dump

00:05:30,300 --> 00:05:36,240
the contents of all block objects so

00:05:33,440 --> 00:05:39,150
essentially a snapshot of each file

00:05:36,240 --> 00:05:43,080
after any changes and not just the

00:05:39,150 --> 00:05:45,330
changes that occurred to evaluate these

00:05:43,080 --> 00:05:47,430
two options we compared them against

00:05:45,330 --> 00:05:49,710
each other on a set of hundred test

00:05:47,430 --> 00:05:52,469
repositories that we randomly sampled

00:05:49,710 --> 00:05:55,620
from our entire code base and as you can

00:05:52,469 --> 00:05:58,949
see here the git cat file based approach

00:05:55,620 --> 00:06:00,810
is significantly faster however this

00:05:58,949 --> 00:06:03,659
comes at the cost of producing more

00:06:00,810 --> 00:06:05,639
output meaning a substantial amount of

00:06:03,659 --> 00:06:07,009
additional data to be scanned in the

00:06:05,639 --> 00:06:09,449
next step

00:06:07,009 --> 00:06:12,180
therefore whichever of these two option

00:06:09,449 --> 00:06:17,310
is preferable will highly depend on the

00:06:12,180 --> 00:06:19,319
regex scanner throughput capabilities to

00:06:17,310 --> 00:06:21,089
perform the actual pattern matching we

00:06:19,319 --> 00:06:24,479
looked at various reg X tools out there

00:06:21,089 --> 00:06:26,490
and during some initial research we

00:06:24,479 --> 00:06:29,029
quickly discovered that standard grep

00:06:26,490 --> 00:06:31,620
was just not going to be up to the task

00:06:29,029 --> 00:06:35,610
primarily due to its lack of multi-line

00:06:31,620 --> 00:06:38,399
pattern support so instead we looked at

00:06:35,610 --> 00:06:40,409
pcre grep as a mostly comparable

00:06:38,399 --> 00:06:43,080
alternative that does indeed support

00:06:40,409 --> 00:06:46,770
multi-line mode and also some more

00:06:43,080 --> 00:06:49,680
complex patterns with that we were able

00:06:46,770 --> 00:06:51,810
to scan all blobs from the hundred test

00:06:49,680 --> 00:06:55,649
repositories in just over a hundred

00:06:51,810 --> 00:06:57,899
seconds in this process we also got some

00:06:55,649 --> 00:07:00,870
support from Laos from github

00:06:57,899 --> 00:07:03,509
professional services team and he

00:07:00,870 --> 00:07:07,440
pointed us towards using Intel hyper

00:07:03,509 --> 00:07:09,479
scan library there's a high performance

00:07:07,440 --> 00:07:13,050
regular expression matching library that

00:07:09,479 --> 00:07:14,810
works by recompiling patterns and tuning

00:07:13,050 --> 00:07:17,669
them to a specific CPUs

00:07:14,810 --> 00:07:19,490
microarchitecture by using vector

00:07:17,669 --> 00:07:22,979
instructions and some other magic

00:07:19,490 --> 00:07:25,979
optimizations this is also by the way

00:07:22,979 --> 00:07:30,089
what was used for token scanning on

00:07:25,979 --> 00:07:32,219
github.com as you can see this yielded a

00:07:30,089 --> 00:07:34,560
huge performance boost bringing down the

00:07:32,219 --> 00:07:39,930
time to just 17 seconds to scan the

00:07:34,560 --> 00:07:41,729
blobs of our 100 test repositories now

00:07:39,930 --> 00:07:43,800
looking back at the two options

00:07:41,729 --> 00:07:46,800
discussed earlier for how to extract the

00:07:43,800 --> 00:07:49,110
repositories content it becomes clear

00:07:46,800 --> 00:07:51,779
that the scanner throughput is not the

00:07:49,110 --> 00:07:53,009
limiting factor therefore the option of

00:07:51,779 --> 00:07:56,159
just outputting

00:07:53,009 --> 00:07:57,990
all objects so the KitKat file based

00:07:56,159 --> 00:08:00,599
approach should be preferable because

00:07:57,990 --> 00:08:02,069
the slightly longer time needed to

00:08:00,599 --> 00:08:04,409
perform pattern matching on the

00:08:02,069 --> 00:08:06,599
additional data is more than made up for

00:08:04,409 --> 00:08:10,080
by the time safe not computing

00:08:06,599 --> 00:08:12,509
differences between files and putting

00:08:10,080 --> 00:08:15,360
this all together it takes 40 seconds to

00:08:12,509 --> 00:08:19,979
both extract and scan the contents of

00:08:15,360 --> 00:08:21,959
all hundred repositories another

00:08:19,979 --> 00:08:24,509
observation we made was that of this

00:08:21,959 --> 00:08:27,300
time actually a pretty large chunk was

00:08:24,509 --> 00:08:29,729
spent on just a very few individually

00:08:27,300 --> 00:08:33,000
large files and those were oral binary

00:08:29,729 --> 00:08:36,269
blobs or some otherwise auto-generated

00:08:33,000 --> 00:08:37,979
files that probably shouldn't have been

00:08:36,269 --> 00:08:40,409
checked in to get in the first place but

00:08:37,979 --> 00:08:41,819
that's all another problem and more

00:08:40,409 --> 00:08:44,850
importantly they didn't contain any

00:08:41,819 --> 00:08:47,910
secrets or if they did those were all

00:08:44,850 --> 00:08:50,610
just false positives so we decided we

00:08:47,910 --> 00:08:52,740
could safely ignore them and we did that

00:08:50,610 --> 00:08:53,290
by implementing a filter to skip over

00:08:52,740 --> 00:08:55,779
any

00:08:53,290 --> 00:08:57,519
file larger than one megabyte and this

00:08:55,779 --> 00:09:02,110
allowed us to further cut down the

00:08:57,519 --> 00:09:04,269
runtime to just 22 seconds okay with all

00:09:02,110 --> 00:09:07,690
this in place we decided to run this on

00:09:04,269 --> 00:09:10,899
our entire code base of over 250,000

00:09:07,690 --> 00:09:13,029
repositories and at first we considered

00:09:10,899 --> 00:09:15,160
cloning them to a separate machine to

00:09:13,029 --> 00:09:18,160
perform the scanning there like we did

00:09:15,160 --> 00:09:19,959
for the test repositories but as you can

00:09:18,160 --> 00:09:23,259
imagine that quickly ran into a couple

00:09:19,959 --> 00:09:25,269
of problems primarily how to get access

00:09:23,259 --> 00:09:27,819
to all the repositories including the

00:09:25,269 --> 00:09:30,130
private ones but more importantly this

00:09:27,819 --> 00:09:33,310
approach would essentially be equivalent

00:09:30,130 --> 00:09:35,529
to spamming our own github instance also

00:09:33,310 --> 00:09:36,940
would just take too long just a copying

00:09:35,529 --> 00:09:41,019
probably takes longer than the entire

00:09:36,940 --> 00:09:42,790
scanning but luckily we already have a

00:09:41,019 --> 00:09:46,720
server with a full copy of all

00:09:42,790 --> 00:09:48,819
repositories our backup machine running

00:09:46,720 --> 00:09:51,250
on the backup we have direct access to

00:09:48,819 --> 00:09:53,649
all repositories while at the same time

00:09:51,250 --> 00:09:58,120
not taking away resources on the

00:09:53,649 --> 00:10:01,389
production github instance on there the

00:09:58,120 --> 00:10:04,649
scan drop is run in parallel on a per

00:10:01,389 --> 00:10:07,480
repository basis and the main threat

00:10:04,649 --> 00:10:11,019
gets the list of repositories to scan

00:10:07,480 --> 00:10:14,519
and then assigns them to the workers sub

00:10:11,019 --> 00:10:16,959
processes in a round robin fashion and

00:10:14,519 --> 00:10:19,959
doing it this way we already chief good

00:10:16,959 --> 00:10:21,910
enough load balancing so we saw no need

00:10:19,959 --> 00:10:25,720
to implement any more complicated

00:10:21,910 --> 00:10:29,110
scheduling techniques with the setup

00:10:25,720 --> 00:10:32,380
running on 128 worker threads we were

00:10:29,110 --> 00:10:34,630
able to perform a full scan of the

00:10:32,380 --> 00:10:37,389
entire five terabytes of compressed

00:10:34,630 --> 00:10:40,180
repository data in just four hours and

00:10:37,389 --> 00:10:42,720
that left us with a list of findings

00:10:40,180 --> 00:10:45,310
each potentially being a leaked secret

00:10:42,720 --> 00:10:46,930
now with this I'm handing back to Tobias

00:10:45,310 --> 00:10:49,300
to talk to you about what we did with

00:10:46,930 --> 00:10:52,269
those findings how we post process them

00:10:49,300 --> 00:10:54,189
and also about some of the non-technical

00:10:52,269 --> 00:10:58,899
observations we made rolling out this

00:10:54,189 --> 00:11:00,939
tool yeah thank you very much Nico for

00:10:58,899 --> 00:11:03,399
that and with the skin are now in place

00:11:00,939 --> 00:11:06,189
and we actually run the scan on a daily

00:11:03,399 --> 00:11:07,030
basis we are able to get every day a

00:11:06,189 --> 00:11:09,820
list of

00:11:07,030 --> 00:11:12,340
tensho secrets which match our given

00:11:09,820 --> 00:11:14,830
patterns and probably to no one's

00:11:12,340 --> 00:11:17,860
surprise we found quite a few more than

00:11:14,830 --> 00:11:20,020
one and actually so many but we didn't

00:11:17,860 --> 00:11:22,750
want to manually implement and follow a

00:11:20,020 --> 00:11:25,390
process or sent around some excess or

00:11:22,750 --> 00:11:28,600
things like that so we needed now to

00:11:25,390 --> 00:11:31,870
take our findings our match patterns and

00:11:28,600 --> 00:11:33,880
go into more detail about them of what

00:11:31,870 --> 00:11:37,450
they are if they are indeed valid and

00:11:33,880 --> 00:11:39,430
things like that to show you at one

00:11:37,450 --> 00:11:42,370
example what we did is select their

00:11:39,430 --> 00:11:44,920
books they look like this and already

00:11:42,370 --> 00:11:48,220
contain an a secret value at the end

00:11:44,920 --> 00:11:51,370
which you can use to post to a specific

00:11:48,220 --> 00:11:53,470
channel so you only need that this URL

00:11:51,370 --> 00:11:56,680
and can do in progress and the message

00:11:53,470 --> 00:11:59,020
gets sent through a channel without any

00:11:56,680 --> 00:12:00,910
further information so this is a

00:11:59,020 --> 00:12:04,120
credential and you probably don't want

00:12:00,910 --> 00:12:06,490
that accessible to everyone while it is

00:12:04,120 --> 00:12:08,680
not the end of a word if somebody has

00:12:06,490 --> 00:12:11,260
bet they they can still spam your

00:12:08,680 --> 00:12:13,960
channel and you probably don't want but

00:12:11,260 --> 00:12:15,820
if you just look at this tool and I can

00:12:13,960 --> 00:12:18,430
say that one is Method and the other one

00:12:15,820 --> 00:12:20,680
is invalid you don't you can't see which

00:12:18,430 --> 00:12:23,710
one is actually still valid and should

00:12:20,680 --> 00:12:26,770
probably be mitigated however what we

00:12:23,710 --> 00:12:29,140
could do is we just try to send a

00:12:26,770 --> 00:12:31,660
message to them and if we see that it

00:12:29,140 --> 00:12:33,490
succeeds we know it's valid and if we

00:12:31,660 --> 00:12:36,490
see an error message we know that it's

00:12:33,490 --> 00:12:39,610
invalid and we actually did that and saw

00:12:36,490 --> 00:12:41,770
that one of these two they are still

00:12:39,610 --> 00:12:44,500
valid and should probably be mitigated

00:12:41,770 --> 00:12:46,480
while the other one was already invalid

00:12:44,500 --> 00:12:50,230
or never valid in the first place and

00:12:46,480 --> 00:12:52,570
didn't need mitigation and with this we

00:12:50,230 --> 00:12:54,790
solve in our case but the majority of

00:12:52,570 --> 00:12:57,040
the select web folks we've matched with

00:12:54,790 --> 00:12:58,630
our scanner previously where indeed

00:12:57,040 --> 00:13:02,020
active and Bennet and should be

00:12:58,630 --> 00:13:04,690
mitigated the same process of

00:13:02,020 --> 00:13:07,150
verification can be also applied to ABBA

00:13:04,690 --> 00:13:09,120
we call them Service credentials which

00:13:07,150 --> 00:13:11,650
are for

00:13:09,120 --> 00:13:15,460
accounts which from a central service

00:13:11,650 --> 00:13:18,670
like cloud accounts GCP accounts or AWS

00:13:15,460 --> 00:13:21,430
accounts or even the Bitcoin Keys Niko

00:13:18,670 --> 00:13:24,640
mentioned earlier because Bitcoin keys

00:13:21,430 --> 00:13:26,680
are in base 58 encoded and you can match

00:13:24,640 --> 00:13:30,040
for them and if you receive a list of

00:13:26,680 --> 00:13:32,350
strings you can try just try them out if

00:13:30,040 --> 00:13:35,310
they are valid and we actually found a

00:13:32,350 --> 00:13:38,110
single Bitcoin key in our code base

00:13:35,310 --> 00:13:41,350
unfortunately the corresponding Bitcoin

00:13:38,110 --> 00:13:43,900
wallet was already empty after having

00:13:41,350 --> 00:13:46,600
now this list of verified credentials

00:13:43,900 --> 00:13:49,150
the next step would be to start and

00:13:46,600 --> 00:13:51,070
mitigation process and to quickly

00:13:49,150 --> 00:13:52,990
summarize what we have now we have an

00:13:51,070 --> 00:13:55,990
scanning process in place which takes

00:13:52,990 --> 00:13:58,420
the data from the Becca scan spam on

00:13:55,990 --> 00:14:01,150
regular basis and then tries to validate

00:13:58,420 --> 00:14:03,640
them if they are service credentials

00:14:01,150 --> 00:14:05,380
against a central service however the

00:14:03,640 --> 00:14:07,120
that many findings and so many

00:14:05,380 --> 00:14:07,540
development teams we didn't want to

00:14:07,120 --> 00:14:10,390
create

00:14:07,540 --> 00:14:13,000
Excellus or manually send emails around

00:14:10,390 --> 00:14:15,640
but rather opted to implement a full

00:14:13,000 --> 00:14:18,310
service for wet because it outed service

00:14:15,640 --> 00:14:21,310
which takes in these findings and then

00:14:18,310 --> 00:14:24,310
notifies responsible service owners

00:14:21,310 --> 00:14:27,250
meaning if we can identify them cloud

00:14:24,310 --> 00:14:30,070
account owners slack owners and things

00:14:27,250 --> 00:14:33,430
like that or in case of more generic

00:14:30,070 --> 00:14:35,950
secrets like the LS our keys or private

00:14:33,430 --> 00:14:38,350
keys or even passwords we opted to

00:14:35,950 --> 00:14:41,290
notify every responsible repository

00:14:38,350 --> 00:14:45,610
owner so they can review them and decide

00:14:41,290 --> 00:14:46,090
if they want to mitigate them even

00:14:45,610 --> 00:14:48,370
before

00:14:46,090 --> 00:14:51,040
Toton scanning github announced earlier

00:14:48,370 --> 00:14:54,180
today we think that it can replace some

00:14:51,040 --> 00:14:58,120
of the parts of the scanner but with and

00:14:54,180 --> 00:15:00,220
then we can focus more on the specific

00:14:58,120 --> 00:15:02,800
thing things like my audit service and

00:15:00,220 --> 00:15:04,450
they actually noticed when we started

00:15:02,800 --> 00:15:07,930
rolling out by audit service to our

00:15:04,450 --> 00:15:09,820
development teams that we received quite

00:15:07,930 --> 00:15:12,370
a bit of feedback on what things were

00:15:09,820 --> 00:15:14,230
good and what things were bad and so I

00:15:12,370 --> 00:15:17,020
wanted to give you also now a bit more

00:15:14,230 --> 00:15:20,970
insight into things we found to be

00:15:17,020 --> 00:15:23,190
important and consider rating that

00:15:20,970 --> 00:15:26,009
the most important thing we noticed is

00:15:23,190 --> 00:15:28,889
that you need to try to have as few

00:15:26,009 --> 00:15:31,829
false positives as possible probably

00:15:28,889 --> 00:15:34,019
already all everybody had in security

00:15:31,829 --> 00:15:37,980
scanner that sent out like 300 messages

00:15:34,019 --> 00:15:40,199
and two of them is valid and this ends

00:15:37,980 --> 00:15:40,889
up with development teams ignoring with

00:15:40,199 --> 00:15:43,769
messages

00:15:40,889 --> 00:15:47,690
so the of highest importance to us was

00:15:43,769 --> 00:15:50,759
to ensure an SI occurs city as possible

00:15:47,690 --> 00:15:53,399
one thing to actually that is trying to

00:15:50,759 --> 00:15:55,470
verify credentials as soon as you have

00:15:53,399 --> 00:15:57,480
them even with checking against a

00:15:55,470 --> 00:16:01,230
central service if they are for some

00:15:57,480 --> 00:16:03,600
servers or even in case of ellasar Keys

00:16:01,230 --> 00:16:07,529
checking if they are invalid error sake

00:16:03,600 --> 00:16:09,959
and not only matching in pattern what we

00:16:07,529 --> 00:16:12,509
also notice is that a lot of credentials

00:16:09,959 --> 00:16:16,100
are in dependency folders like vendor

00:16:12,509 --> 00:16:18,779
for go or not mod gears for no GS and

00:16:16,100 --> 00:16:22,040
probably imported from other sources

00:16:18,779 --> 00:16:24,569
like github.com and so we opted to

00:16:22,040 --> 00:16:27,240
exclude them as if they are valid

00:16:24,569 --> 00:16:30,060
credentials they probably should already

00:16:27,240 --> 00:16:32,699
been mitigated at the source and we

00:16:30,060 --> 00:16:35,459
didn't want to include them again to

00:16:32,699 --> 00:16:38,970
send out the second thing if you send

00:16:35,459 --> 00:16:41,370
out notification to people and our

00:16:38,970 --> 00:16:43,380
development colleagues was that the

00:16:41,370 --> 00:16:45,930
first question we receive yeah and what

00:16:43,380 --> 00:16:48,990
should we do no so very important was to

00:16:45,930 --> 00:16:53,100
include relevant guides directly where

00:16:48,990 --> 00:16:55,829
the notification is as fair so things

00:16:53,100 --> 00:16:58,050
like cloud accounts how to check the

00:16:55,829 --> 00:17:00,899
audit lock and what's suspicious

00:16:58,050 --> 00:17:03,449
activities to watch out for how to

00:17:00,899 --> 00:17:07,939
rotate relevant a cloud accounts as well

00:17:03,449 --> 00:17:11,339
as where to store our credentials

00:17:07,939 --> 00:17:14,039
additionally what is important is to

00:17:11,339 --> 00:17:16,049
have somebody as in contact where teams

00:17:14,039 --> 00:17:18,750
can reach out in case they have IVA

00:17:16,049 --> 00:17:21,120
questions or if they noticed abuse of

00:17:18,750 --> 00:17:23,280
some accounts so that this can be

00:17:21,120 --> 00:17:26,579
escalated and properly handed and

00:17:23,280 --> 00:17:28,950
doesn't end up in a void and the last

00:17:26,579 --> 00:17:30,990
thing we implemented mainly to track

00:17:28,950 --> 00:17:32,920
progress our safe was an automatic

00:17:30,990 --> 00:17:36,130
revalidation of all

00:17:32,920 --> 00:17:39,370
and potential patterns be matched every

00:17:36,130 --> 00:17:42,160
day so we have been every day and list

00:17:39,370 --> 00:17:44,980
of credentials which are which we know

00:17:42,160 --> 00:17:46,900
if they get mitigated on net and as well

00:17:44,980 --> 00:17:49,060
take the burden from the response of

00:17:46,900 --> 00:17:51,400
their development colleagues to manually

00:17:49,060 --> 00:17:53,710
flag for dentists as mitigated or not

00:17:51,400 --> 00:17:56,290
and don't bug teams about credentials

00:17:53,710 --> 00:17:58,420
which are already no longer valid the

00:17:56,290 --> 00:18:00,880
Fed we can also make sure that if

00:17:58,420 --> 00:18:03,280
credentials don't get updated or

00:18:00,880 --> 00:18:06,220
mitigated in time we can either take a

00:18:03,280 --> 00:18:07,770
look at them ourselves or escalate it as

00:18:06,220 --> 00:18:11,950
necessary

00:18:07,770 --> 00:18:13,960
and professor in mind this concludes our

00:18:11,950 --> 00:18:16,600
presentation I hope you could take some

00:18:13,960 --> 00:18:20,830
things away when implementing it

00:18:16,600 --> 00:18:22,540
yourself or then looking for bet and I

00:18:20,830 --> 00:18:34,690
think we have another ten minute for

00:18:22,540 --> 00:18:36,550
open questions now thanks coach thanks

00:18:34,690 --> 00:18:40,100
that was fantastic so I really

00:18:36,550 --> 00:18:44,730
appreciate the attention we had lots of

00:18:40,100 --> 00:18:44,730
[Laughter]

00:18:49,020 --> 00:19:03,220
go ahead curious way of that oh yeah no

00:19:00,640 --> 00:19:05,580
it was the push day and the sauce was

00:19:03,220 --> 00:19:09,760
really good to hear about you know with

00:19:05,580 --> 00:19:11,920
how we how we how you had do it in real

00:19:09,760 --> 00:19:14,200
life and we've got a session coming up

00:19:11,920 --> 00:19:17,680
gosh is very early in the morning our

00:19:14,200 --> 00:19:19,000
time in Europe here but Denis coop is

00:19:17,680 --> 00:19:20,740
coming on later on today

00:19:19,000 --> 00:19:22,330
he's obviously mastered min the source

00:19:20,740 --> 00:19:24,010
and you know talking about how in a

00:19:22,330 --> 00:19:26,080
source is going to be good for free and

00:19:24,010 --> 00:19:28,750
open source sustainability but what was

00:19:26,080 --> 00:19:32,440
fantastic really was to kind of see you

00:19:28,750 --> 00:19:34,480
know si P doing in a source for real and

00:19:32,440 --> 00:19:35,800
then you know of the things you have to

00:19:34,480 --> 00:19:38,050
take care of so that was amazing

00:19:35,800 --> 00:19:39,910
obviously you know doing a bunch of reg

00:19:38,050 --> 00:19:42,700
X scares me well there we go what about

00:19:39,910 --> 00:19:44,320
you Dana where's your highlights

00:19:42,700 --> 00:19:46,359
I'm gonna tell you finding that Bitcoin

00:19:44,320 --> 00:19:48,100
key I'm just bummed that y'all aren't

00:19:46,359 --> 00:19:50,080
crypto rich you should have been crypto

00:19:48,100 --> 00:19:52,389
rich you just stood up in crypto ready

00:19:50,080 --> 00:19:54,429
now everybody watchin part and then you

00:19:52,389 --> 00:19:55,929
actually something how accept how

00:19:54,429 --> 00:19:58,029
excited did y'all get when you found

00:19:55,929 --> 00:20:03,129
that oh this is my own question outside

00:19:58,029 --> 00:20:04,929
I would have been ecstatic good yeah I

00:20:03,129 --> 00:20:08,350
actually when we found that we found

00:20:04,929 --> 00:20:11,320
rather many patterns which match them so

00:20:08,350 --> 00:20:13,299
I was surprised how many were there and

00:20:11,320 --> 00:20:15,429
when we implemented some further

00:20:13,299 --> 00:20:18,009
verification to see how many of these

00:20:15,429 --> 00:20:21,340
are actually valid matches or just false

00:20:18,009 --> 00:20:22,960
positives and been starting that and

00:20:21,340 --> 00:20:25,269
applying that unlike the first hundred

00:20:22,960 --> 00:20:28,869
matches we saw no positive I was already

00:20:25,269 --> 00:20:30,940
pumped and then at the last point we

00:20:28,869 --> 00:20:32,950
still found one and then I also

00:20:30,940 --> 00:20:37,359
copy/paste but over to check if there's

00:20:32,950 --> 00:20:39,100
anything on the wallet and yeah but it's

00:20:37,359 --> 00:20:47,169
probably a good sign that we didn't

00:20:39,100 --> 00:21:05,320
found one so at least I would have found

00:20:47,169 --> 00:21:07,509
that key sources solution yeah so

00:21:05,320 --> 00:21:10,210
currently we don't have concrete plans

00:21:07,509 --> 00:21:12,940
to open source it mainly out of a reason

00:21:10,210 --> 00:21:16,359
that we have a lot of very specific hex

00:21:12,940 --> 00:21:20,799
in there which apply to our specific use

00:21:16,359 --> 00:21:22,480
case and our internal services but if

00:21:20,799 --> 00:21:24,489
you are interested in some of the more

00:21:22,480 --> 00:21:27,190
details I think we can write up some of

00:21:24,489 --> 00:21:30,759
the more generic things so the core

00:21:27,190 --> 00:21:33,489
implementation of the scanning is rather

00:21:30,759 --> 00:21:36,639
straightforward and I think we can see

00:21:33,489 --> 00:21:38,679
if we can provide for something but I'll

00:21:36,639 --> 00:21:45,609
take a look at that in detail

00:21:38,679 --> 00:21:49,619
no ABI fantastic we had a question also

00:21:45,609 --> 00:21:52,269
from Randy our 5:05 and they were saying

00:21:49,619 --> 00:21:53,470
successive scans only faster than the

00:21:52,269 --> 00:21:56,019
first you know the one that you

00:21:53,470 --> 00:21:56,580
mentioned took four hours by eating any

00:21:56,019 --> 00:21:59,340
check-in

00:21:56,580 --> 00:22:02,250
changed repos webhooks that sort of

00:21:59,340 --> 00:22:05,790
thing yep

00:22:02,250 --> 00:22:08,040
not with weapons but we're looking if

00:22:05,790 --> 00:22:12,330
any fault within the repository actually

00:22:08,040 --> 00:22:14,490
changed but then so far if anything

00:22:12,330 --> 00:22:17,730
changed and we're still rescanning the

00:22:14,490 --> 00:22:21,660
entire repository but only the ones that

00:22:17,730 --> 00:22:26,070
changed got it and then we've got

00:22:21,660 --> 00:22:28,620
another question here from K robots they

00:22:26,070 --> 00:22:30,840
were asking is it possible to have these

00:22:28,620 --> 00:22:33,060
scans run before users are able to make

00:22:30,840 --> 00:22:34,530
pull requests so is there any way you

00:22:33,060 --> 00:22:36,120
know it's like a pre-commit hook that

00:22:34,530 --> 00:22:38,400
sort of thing to stop them getting into

00:22:36,120 --> 00:22:40,110
a branch or what do you do if they're in

00:22:38,400 --> 00:22:44,820
in the pull request you know are they

00:22:40,110 --> 00:22:48,240
not in history yeah so the first thing

00:22:44,820 --> 00:22:50,220
and I already plan to include that in my

00:22:48,240 --> 00:22:54,330
presentation but actually missed there

00:22:50,220 --> 00:22:56,280
was that including on scanning for

00:22:54,330 --> 00:22:58,230
credentials in repositories only the

00:22:56,280 --> 00:23:00,540
second step the first step is that you

00:22:58,230 --> 00:23:03,210
would like to prevent them getting there

00:23:00,540 --> 00:23:05,490
at all so you don't need to trigger an

00:23:03,210 --> 00:23:06,900
mitigation process because as soon as

00:23:05,490 --> 00:23:09,030
credentials on github

00:23:06,900 --> 00:23:11,070
you should probably need to rotate their

00:23:09,030 --> 00:23:14,160
credentials and not only remove them

00:23:11,070 --> 00:23:17,280
from the history the vet being said for

00:23:14,160 --> 00:23:21,000
example the get lock utility or if I

00:23:17,280 --> 00:23:23,640
remember correct every AWS labs also has

00:23:21,000 --> 00:23:26,460
an tooling but you can include as a

00:23:23,640 --> 00:23:28,830
pre-commit hook to scan for patterns and

00:23:26,460 --> 00:23:31,550
then decline the push or the commit

00:23:28,830 --> 00:23:34,110
directly on the development machine

00:23:31,550 --> 00:23:36,180
however the scanning solution we

00:23:34,110 --> 00:23:38,310
implemented was more focused on

00:23:36,180 --> 00:23:40,740
performance and as Nico mentioned

00:23:38,310 --> 00:23:43,650
earlier is rather optimized on the skin

00:23:40,740 --> 00:23:47,610
infrastructure so not an tool which

00:23:43,650 --> 00:23:52,420
every developer can run on their own on

00:23:47,610 --> 00:23:55,210
their own but yeah and the

00:23:52,420 --> 00:23:56,920
that's really interesting so do you have

00:23:55,210 --> 00:23:58,450
any this is a question for me now not

00:23:56,920 --> 00:23:59,740
from the audience sorry but anyway I'll

00:23:58,450 --> 00:24:02,790
get back to you in a minute folks

00:23:59,740 --> 00:24:05,350
so do you have any tooling that you use

00:24:02,790 --> 00:24:07,360
you know when for developers to kind of

00:24:05,350 --> 00:24:09,670
sell their local get environments and

00:24:07,360 --> 00:24:12,190
get their you know their email addresses

00:24:09,670 --> 00:24:13,270
settle properly get there any pre-commit

00:24:12,190 --> 00:24:16,630
hooks anything like that sort of

00:24:13,270 --> 00:24:19,900
property in their local environment yeah

00:24:16,630 --> 00:24:21,640
so we have don't have an fully script to

00:24:19,900 --> 00:24:24,280
run it as most people are already

00:24:21,640 --> 00:24:27,220
grabbed a family of git and how to set

00:24:24,280 --> 00:24:30,010
it up but we have an very handy Quick

00:24:27,220 --> 00:24:31,750
Start Guide which says bitch' email

00:24:30,010 --> 00:24:34,840
address you should set and how you set

00:24:31,750 --> 00:24:37,390
it up so bad development colleagues can

00:24:34,840 --> 00:24:39,570
quickly get ramped up on git and the

00:24:37,390 --> 00:24:41,920
great thing about git is actually but

00:24:39,570 --> 00:24:44,170
most of the people actually I rather

00:24:41,920 --> 00:24:48,040
family love it already and don't need a

00:24:44,170 --> 00:24:50,590
long onboarding trail for that so the

00:24:48,040 --> 00:24:53,020
internal documentation we have around it

00:24:50,590 --> 00:24:55,000
is rather limited and fear would fare

00:24:53,020 --> 00:24:58,480
quite a lot on already but open

00:24:55,000 --> 00:25:00,880
knowledge which is available publicity

00:24:58,480 --> 00:25:05,050
and so that's also a great thing about

00:25:00,880 --> 00:25:08,820
git but everything you can find online

00:25:05,050 --> 00:25:11,640
and don't have to have some pay what

00:25:08,820 --> 00:25:14,770
tools around that yes

00:25:11,640 --> 00:25:17,260
that's fantastic yellow and so I helped

00:25:14,770 --> 00:25:20,140
how nice their work over Microsoft while

00:25:17,260 --> 00:25:22,720
ago and I helped out with that when the

00:25:20,140 --> 00:25:23,800
windows team were adopting it and one of

00:25:22,720 --> 00:25:25,630
the things that they had was some

00:25:23,800 --> 00:25:27,580
posters around you know the five stages

00:25:25,630 --> 00:25:29,350
of git as they were coming up to speed

00:25:27,580 --> 00:25:31,600
instead of the five stages of grief you

00:25:29,350 --> 00:25:32,950
know so it's quite interesting source in

00:25:31,600 --> 00:25:34,630
the training that different people need

00:25:32,950 --> 00:25:36,310
as you migrate them and it's brilliant

00:25:34,630 --> 00:25:38,010
that your community we're just able to

00:25:36,310 --> 00:25:40,570
pick up and run so that's fantastic

00:25:38,010 --> 00:25:43,090
another question here from Jamie Sloan

00:25:40,570 --> 00:25:45,370
have you looked into how you can work

00:25:43,090 --> 00:25:47,530
closely with service applications

00:25:45,370 --> 00:25:49,390
you know seeing the development

00:25:47,530 --> 00:25:50,770
communities more and more moving in that

00:25:49,390 --> 00:25:53,610
direction that you are you looking into

00:25:50,770 --> 00:25:53,610
service much yet

00:25:54,790 --> 00:26:00,160
generally speaking or in the context of

00:25:57,490 --> 00:26:01,840
creation HP in mutton yeah no not really

00:26:00,160 --> 00:26:03,160
with credentials because I think in

00:26:01,840 --> 00:26:04,480
terms of credentials it's not much

00:26:03,160 --> 00:26:05,740
different is it's just in the config

00:26:04,480 --> 00:26:10,539
files and things it's

00:26:05,740 --> 00:26:12,820
in general yeah yeah so me myself not

00:26:10,539 --> 00:26:15,520
directly there are parts of s AP which

00:26:12,820 --> 00:26:17,950
look in Tibet but I'm not the correct

00:26:15,520 --> 00:26:21,520
person or a correct team to talk too

00:26:17,950 --> 00:26:21,820
much detail about that one yeah no

00:26:21,520 --> 00:26:28,059
worries

00:26:21,820 --> 00:26:30,250
Dana so go Lincoln H want to know can

00:26:28,059 --> 00:26:32,350
you detect API secret keys I could

00:26:30,250 --> 00:26:35,429
answer this but I'm gonna let y'all

00:26:32,350 --> 00:26:35,429
answer this one

00:26:36,390 --> 00:26:44,770
Nicole want to take that back

00:26:40,659 --> 00:26:48,130
pencil kind of API like most usually of

00:26:44,770 --> 00:26:50,080
like a fairly constant pattern curve

00:26:48,130 --> 00:26:53,850
that you can match against so most of

00:26:50,080 --> 00:26:53,850
them we match was pretty good accuracy

00:26:57,270 --> 00:27:04,899
API specifically yeah I Niko how much

00:27:02,770 --> 00:27:07,240
yeah what's it like you know you're a

00:27:04,899 --> 00:27:08,320
student in between and you're working s

00:27:07,240 --> 00:27:10,659
AP now as well

00:27:08,320 --> 00:27:12,760
how have you been finding this what's

00:27:10,659 --> 00:27:14,620
the what's the thing you've been

00:27:12,760 --> 00:27:15,870
learning that you wish to kind of taught

00:27:14,620 --> 00:27:18,970
you at school

00:27:15,870 --> 00:27:21,700
yes really nice like both they are to

00:27:18,970 --> 00:27:23,980
actually program properly like they

00:27:21,700 --> 00:27:26,830
probably do at university usually far

00:27:23,980 --> 00:27:29,350
less advanced also I think I probably

00:27:26,830 --> 00:27:31,840
learn more while working than at

00:27:29,350 --> 00:27:33,010
university actually because just if you

00:27:31,840 --> 00:27:34,690
have a problem and then you're

00:27:33,010 --> 00:27:37,000
researching information for this you

00:27:34,690 --> 00:27:39,010
directly know how to apply the new

00:27:37,000 --> 00:27:44,080
knowledge so it just sticks better I

00:27:39,010 --> 00:27:45,820
think you know I I just had such a sweet

00:27:44,080 --> 00:27:47,679
spot in my heart for students and

00:27:45,820 --> 00:27:48,970
learners and you hear you know no matter

00:27:47,679 --> 00:27:50,289
if you're going to university or you

00:27:48,970 --> 00:27:51,970
taking an apprenticeship or an

00:27:50,289 --> 00:27:54,820
internship you know I love our github

00:27:51,970 --> 00:27:56,590
interns get enough real-world experience

00:27:54,820 --> 00:27:59,289
is so awesome and important getting to

00:27:56,590 --> 00:28:02,289
do real cool stuff in real life I mean

00:27:59,289 --> 00:28:03,640
for me it's like I know I think about it

00:28:02,289 --> 00:28:05,710
there's been like 20 years since I've

00:28:03,640 --> 00:28:07,750
had actually you know do some studying

00:28:05,710 --> 00:28:10,390
in university I know it's hard to

00:28:07,750 --> 00:28:12,850
imagine but I just getting the

00:28:10,390 --> 00:28:15,549
opportunity you stuff for real and live

00:28:12,850 --> 00:28:16,800
in that size of an environment and it is

00:28:15,549 --> 00:28:18,030
so important the word

00:28:16,800 --> 00:28:19,710
that y'all are doing or doing so I'm

00:28:18,030 --> 00:28:22,620
important you know as a VP of

00:28:19,710 --> 00:28:24,030
engineering like is one of the things

00:28:22,620 --> 00:28:27,030
that keeps me up at night it's like oh

00:28:24,030 --> 00:28:29,880
no do we accidentally put a key into a

00:28:27,030 --> 00:28:31,830
repo because it happens like if don't if

00:28:29,880 --> 00:28:34,290
any developer out there says oh I've

00:28:31,830 --> 00:28:36,570
never done that I'm calling I'm calling

00:28:34,290 --> 00:28:38,580
you know I'm gonna be yes on that like

00:28:36,570 --> 00:28:39,690
I've even done it like you ever been

00:28:38,580 --> 00:28:49,560
well I bet Martin's done it a whole

00:28:39,690 --> 00:28:50,970
bunch too okay maybe I'll maybe do this

00:28:49,560 --> 00:28:53,190
I think this is the future you know

00:28:50,970 --> 00:28:55,770
having this end in automation that

00:28:53,190 --> 00:28:57,140
secures the world's cold it's just it's

00:28:55,770 --> 00:28:59,550
just fantastic

00:28:57,140 --> 00:29:01,400
more questions coming in for discussions

00:28:59,550 --> 00:29:03,660
yeah I think we have time for one more

00:29:01,400 --> 00:29:06,660
well let's just say one more question so

00:29:03,660 --> 00:29:09,270
the scanning that you've got and does it

00:29:06,660 --> 00:29:11,060
only work with github Enterprise Server

00:29:09,270 --> 00:29:14,730
or would it work with you know

00:29:11,060 --> 00:29:24,290
google.com Enterprise accounts or or

00:29:14,730 --> 00:29:26,520
even say github teen account act the

00:29:24,290 --> 00:29:29,600
actual scanning port that we implemented

00:29:26,520 --> 00:29:33,300
it's not your top specific it just uses

00:29:29,600 --> 00:29:35,280
like just calls to get so that can be

00:29:33,300 --> 00:29:38,040
run on anything but then some of the

00:29:35,280 --> 00:29:40,230
metadata extraction part are we doing to

00:29:38,040 --> 00:29:41,850
find who the repository owner is and

00:29:40,230 --> 00:29:45,210
that kind of stuff that's get up

00:29:41,850 --> 00:29:47,850
Enterprise specific but with reusing it

00:29:45,210 --> 00:29:49,710
on get up comm you would then actually

00:29:47,850 --> 00:29:51,840
have to first obviously clone them all

00:29:49,710 --> 00:29:53,280
to a separate machine because wouldn't

00:29:51,840 --> 00:29:55,080
have quite a nice performance a way of

00:29:53,280 --> 00:29:57,210
right now where it can leverage the fact

00:29:55,080 --> 00:30:04,200
that we already have a full copy on the

00:29:57,210 --> 00:30:06,660
backup machine right I'm well thank you

00:30:04,200 --> 00:30:09,060
thank you so much again for joining us

00:30:06,660 --> 00:30:11,250
tobias and it was a great and

00:30:09,060 --> 00:30:14,190
interesting talk we're so happy to have

00:30:11,250 --> 00:30:15,440
you here with us today yeah thank you

00:30:14,190 --> 00:30:18,980
too

00:30:15,440 --> 00:30:18,980
yep thanks

00:30:20,610 --> 00:30:22,670

YouTube URL: https://www.youtube.com/watch?v=kCo0OJZHRX8


