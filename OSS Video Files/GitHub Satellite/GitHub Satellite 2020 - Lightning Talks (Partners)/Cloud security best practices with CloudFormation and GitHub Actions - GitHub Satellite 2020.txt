Title: Cloud security best practices with CloudFormation and GitHub Actions - GitHub Satellite 2020
Publication date: 2020-05-06
Playlist: GitHub Satellite 2020 - Lightning Talks (Partners)
Description: 
	Presented by Jon Jozwiak, Bridgecrew

GitHub Satellite: A community connected by code

On May 6th, we threw a free virtual event featuring developers working together on the worldâ€™s software, announcements from the GitHub team, and inspiring performances by artists who code.

More information: https://githubsatellite.com
Schedule: https://githubsatellite.com/schedule/
Captions: 
	00:00:00,030 --> 00:00:03,510
hi I'm John John Surya and I'm a

00:00:02,100 --> 00:00:05,819
Solutions Architect at bridge true

00:00:03,510 --> 00:00:07,500
bridge through our goals might cloud

00:00:05,819 --> 00:00:09,330
security simple and one way we do that

00:00:07,500 --> 00:00:11,190
is by caching misconfigurations at Build

00:00:09,330 --> 00:00:13,170
time prior to a developer deploying

00:00:11,190 --> 00:00:14,820
infrastructure today I'm going to talk

00:00:13,170 --> 00:00:17,010
to you about chekhov our open source

00:00:14,820 --> 00:00:19,020
static code analysis tool that can be

00:00:17,010 --> 00:00:20,939
used to analyze cloud information

00:00:19,020 --> 00:00:22,439
terraform and kubernetes manifests to

00:00:20,939 --> 00:00:24,119
identify miss configurations

00:00:22,439 --> 00:00:25,800
I'm also going to talk to you about our

00:00:24,119 --> 00:00:29,279
github action that can be used to check

00:00:25,800 --> 00:00:30,960
off recently Gartner research found that

00:00:29,279 --> 00:00:33,239
over 90 percent of data breaches in the

00:00:30,960 --> 00:00:35,070
cloud are the result of human error from

00:00:33,239 --> 00:00:37,020
Miss configuring cloud services at

00:00:35,070 --> 00:00:39,390
Bridge crew we initially worked with our

00:00:37,020 --> 00:00:42,059
customers to work on their AWS

00:00:39,390 --> 00:00:44,430
violations or security issues and

00:00:42,059 --> 00:00:45,809
remediate them at runtime but what we

00:00:44,430 --> 00:00:47,940
found was a lot of customers are using

00:00:45,809 --> 00:00:50,100
confirmation or terraform to deploy

00:00:47,940 --> 00:00:52,230
their infrastructure and even if we fix

00:00:50,100 --> 00:00:55,170
at run time the miss configuration will

00:00:52,230 --> 00:00:57,210
simply be provisioned once again and

00:00:55,170 --> 00:00:58,770
that's really where chekhov comes in so

00:00:57,210 --> 00:01:00,210
check out comes with a library of over

00:00:58,770 --> 00:01:01,590
100 checks to ensure that you're

00:01:00,210 --> 00:01:04,309
deploying following security best

00:01:01,590 --> 00:01:07,560
practices on AWS edger and Google cloud

00:01:04,309 --> 00:01:10,560
and this way you can catch the issue as

00:01:07,560 --> 00:01:12,150
a developer at build time and fix the

00:01:10,560 --> 00:01:15,750
issue rather than having to wait to run

00:01:12,150 --> 00:01:17,340
time and track down who who created the

00:01:15,750 --> 00:01:19,619
Miss configuration in the context around

00:01:17,340 --> 00:01:23,549
the resource and so let's look at what

00:01:19,619 --> 00:01:27,780
check-off looks like first alright so

00:01:23,549 --> 00:01:29,670
here is just my terminal and you can see

00:01:27,780 --> 00:01:32,000
I've got a sample CloudFormation

00:01:29,670 --> 00:01:34,439
template that deploys some insecure

00:01:32,000 --> 00:01:37,229
resources in this case it deploys the

00:01:34,439 --> 00:01:39,150
ec2 instance it's got some access and

00:01:37,229 --> 00:01:41,610
secret keys there some unencrypted

00:01:39,150 --> 00:01:44,100
volumes s3 buckets that are configured

00:01:41,610 --> 00:01:47,130
incorrectly so a number of things and

00:01:44,100 --> 00:01:49,200
chekov just runs that command line you

00:01:47,130 --> 00:01:50,700
can see against a single template it can

00:01:49,200 --> 00:01:52,680
also run against multiple files or a

00:01:50,700 --> 00:01:55,200
directory of files and what it will

00:01:52,680 --> 00:01:58,170
output is just the violations that it

00:01:55,200 --> 00:02:00,840
finds so something like security group

00:01:58,170 --> 00:02:04,200
that doesn't have a description or a

00:02:00,840 --> 00:02:05,310
port 22 that's open to the world so

00:02:04,200 --> 00:02:06,990
there's a number of different checks

00:02:05,310 --> 00:02:10,950
here these are just ones that come up

00:02:06,990 --> 00:02:12,300
here so that's a powerful to run ad hoc

00:02:10,950 --> 00:02:14,850
but really

00:02:12,300 --> 00:02:16,590
again how action brings us to life so if

00:02:14,850 --> 00:02:18,960
you look here if you're interested

00:02:16,590 --> 00:02:21,030
here's Chekov and our code it's at

00:02:18,960 --> 00:02:23,220
github complex bridge crew io sighs

00:02:21,030 --> 00:02:27,270
Chekov I'm feel free to look at that try

00:02:23,220 --> 00:02:30,660
it out we're welcome for contributions

00:02:27,270 --> 00:02:33,120
as well so please have a look there we

00:02:30,660 --> 00:02:34,620
also have created github action so

00:02:33,120 --> 00:02:36,570
here's a gift of action you can see an

00:02:34,620 --> 00:02:38,400
example of the run or you can pull the

00:02:36,570 --> 00:02:40,020
latest version and get the details there

00:02:38,400 --> 00:02:42,960
that's available in the github

00:02:40,020 --> 00:02:45,870
marketplace and if you click here you'll

00:02:42,960 --> 00:02:48,600
see here's just the github repo that I'm

00:02:45,870 --> 00:02:50,430
using that has my insecure confirmation

00:02:48,600 --> 00:02:53,100
template setting up the github action

00:02:50,430 --> 00:02:55,770
was very simple you just need to create

00:02:53,100 --> 00:02:57,690
this one main demo file and you'll see

00:02:55,770 --> 00:03:00,510
here what we're doing is on push to

00:02:57,690 --> 00:03:02,550
master on pull request to master we are

00:03:00,510 --> 00:03:04,230
going to run this workflow and the

00:03:02,550 --> 00:03:05,850
workflow is going to do two things it's

00:03:04,230 --> 00:03:07,890
going to check out the repository and

00:03:05,850 --> 00:03:11,040
it's going to run check off against it

00:03:07,890 --> 00:03:16,440
and so here if you look at actions and

00:03:11,040 --> 00:03:19,370
against your scan you can see a previous

00:03:16,440 --> 00:03:22,170
scan that I did this is against the same

00:03:19,370 --> 00:03:25,170
repo so you'll see the the same type of

00:03:22,170 --> 00:03:26,700
failures but here you can you can run

00:03:25,170 --> 00:03:29,730
this and you'll see the same output that

00:03:26,700 --> 00:03:32,730
you would otherwise see on command-line

00:03:29,730 --> 00:03:34,800
and so really the power here is that as

00:03:32,730 --> 00:03:36,180
a developer I can catch these issues as

00:03:34,800 --> 00:03:39,930
soon as somebody raises a pull request

00:03:36,180 --> 00:03:42,150
or mergers to master and I can prevent

00:03:39,930 --> 00:03:43,890
that and so to stop insecure

00:03:42,150 --> 00:03:46,470
infrastructure so we'd really like you

00:03:43,890 --> 00:03:50,010
to check out Chekov and our github

00:03:46,470 --> 00:03:53,640
action if you're interested in automated

00:03:50,010 --> 00:03:55,770
remediation please check us out at WWE

00:03:53,640 --> 00:03:57,480
crowd where we can actually provide a

00:03:55,770 --> 00:04:00,530
remediation in code for these issues

00:03:57,480 --> 00:04:00,530

YouTube URL: https://www.youtube.com/watch?v=edhL-XL0oOI


