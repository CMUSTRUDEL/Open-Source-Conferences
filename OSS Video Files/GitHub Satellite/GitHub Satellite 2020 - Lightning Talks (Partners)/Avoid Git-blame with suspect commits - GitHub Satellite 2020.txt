Title: Avoid Git-blame with suspect commits - GitHub Satellite 2020
Publication date: 2020-05-06
Playlist: GitHub Satellite 2020 - Lightning Talks (Partners)
Description: 
	Vlad Cretu, Sentry.io

GitHub Satellite: A community connected by code

On May 6th, we threw a free virtual event featuring developers working together on the worldâ€™s software, announcements from the GitHub team, and inspiring performances by artists who code.

More information: https://githubsatellite.com
Schedule: https://githubsatellite.com/schedule/
Captions: 
	00:00:00,030 --> 00:00:06,029
hi my name is Vlad and I work a century

00:00:03,210 --> 00:00:08,069
in the cycling talk we look at how we

00:00:06,029 --> 00:00:11,730
can avoid the get played game with

00:00:08,069 --> 00:00:13,559
century and suspect comets before I

00:00:11,730 --> 00:00:15,839
start the demo I'd like to take you to

00:00:13,559 --> 00:00:17,730
our documentation site first so you can

00:00:15,839 --> 00:00:20,430
learn how to set up your project to

00:00:17,730 --> 00:00:23,460
enable this capability so go to dark

00:00:20,430 --> 00:00:26,609
stats entry data you guides follow with

00:00:23,460 --> 00:00:28,320
the front editorial link and on the left

00:00:26,609 --> 00:00:30,359
hand side you'll see a series of steps

00:00:28,320 --> 00:00:33,559
that they keep from creating a brand new

00:00:30,359 --> 00:00:36,690
project to adopting the century SDK

00:00:33,559 --> 00:00:40,260
capturing your first error learning to

00:00:36,690 --> 00:00:42,629
use source maps and finally integrating

00:00:40,260 --> 00:00:44,719
with a source repository in our case

00:00:42,629 --> 00:00:49,020
github to enable capabilities like

00:00:44,719 --> 00:00:51,570
suspect commits my goal in this

00:00:49,020 --> 00:00:53,489
lightning talk is to persuade you enough

00:00:51,570 --> 00:00:56,070
and perhaps maybe even make it furious

00:00:53,489 --> 00:00:57,840
enough to try out this functionality so

00:00:56,070 --> 00:01:00,960
that you can make the most out of your

00:00:57,840 --> 00:01:06,450
experience with century so let's get

00:01:00,960 --> 00:01:09,979
started imagine you and your friends

00:01:06,450 --> 00:01:12,680
started an online hardware store

00:01:09,979 --> 00:01:16,530
perhaps a serve your local neighborhood

00:01:12,680 --> 00:01:18,060
let's test it out you just list I'm

00:01:16,530 --> 00:01:21,240
gonna get a few nails the hammer and

00:01:18,060 --> 00:01:24,720
think about the weekend projects so we

00:01:21,240 --> 00:01:26,400
run into an error what happens right now

00:01:24,720 --> 00:01:28,770
is that century is the K captured the

00:01:26,400 --> 00:01:31,439
center and send it to the service to

00:01:28,770 --> 00:01:33,869
process it you as a developer receive a

00:01:31,439 --> 00:01:35,400
notification taking you to the central

00:01:33,869 --> 00:01:41,390
dashboard where you can get more

00:01:35,400 --> 00:01:51,479
information about the error so let's

00:01:41,390 --> 00:01:54,329
drill into it alright so we can learn

00:01:51,479 --> 00:01:56,630
from here that we have we are trying to

00:01:54,329 --> 00:02:01,020
execute the function that doesn't exist

00:01:56,630 --> 00:02:03,950
it's an application that jus line 102 so

00:02:01,020 --> 00:02:07,380
the next thing that I'd like to learn is

00:02:03,950 --> 00:02:11,680
discover which commit introduced this

00:02:07,380 --> 00:02:15,069
code so I go to suspect commit

00:02:11,680 --> 00:02:17,349
and my approach is always to inspect the

00:02:15,069 --> 00:02:19,150
newest commits and work backwards so

00:02:17,349 --> 00:02:19,450
here the news commits happens four hours

00:02:19,150 --> 00:02:25,090
ago

00:02:19,450 --> 00:02:26,769
so let's expect that all right so there

00:02:25,090 --> 00:02:28,510
e there you have it so I know that this

00:02:26,769 --> 00:02:32,079
commit is what introduced the errors

00:02:28,510 --> 00:02:34,780
that are affecting our customers so the

00:02:32,079 --> 00:02:37,120
next thing for us right now is to assign

00:02:34,780 --> 00:02:40,719
this issue to the person who created

00:02:37,120 --> 00:02:46,450
this commit because they are the best at

00:02:40,719 --> 00:02:50,799
following up right now all right so that

00:02:46,450 --> 00:02:53,680
we can move on so let's step back for a

00:02:50,799 --> 00:02:56,769
second let's see what just have right we

00:02:53,680 --> 00:03:00,669
released our set wave of customers ran

00:02:56,769 --> 00:03:03,310
into an issue we got notified and while

00:03:00,669 --> 00:03:06,730
being in the browser with a few clicks

00:03:03,310 --> 00:03:09,519
who are able to identify which commit

00:03:06,730 --> 00:03:12,099
caused the problems that our customers

00:03:09,519 --> 00:03:14,409
are running into and through that

00:03:12,099 --> 00:03:17,260
discover which engineer is best equipped

00:03:14,409 --> 00:03:19,239
to solve this issue right so because of

00:03:17,260 --> 00:03:24,489
suspect commits our time to resolution

00:03:19,239 --> 00:03:26,290
is significantly decreased now obviously

00:03:24,489 --> 00:03:28,780
you can drop into a shell and can read

00:03:26,290 --> 00:03:30,669
command line and whatnot right but here

00:03:28,780 --> 00:03:32,949
you can provide this functionality we're

00:03:30,669 --> 00:03:35,260
staying in a browser experience and this

00:03:32,949 --> 00:03:36,819
is very very very powerful we

00:03:35,260 --> 00:03:39,579
essentially are certainly using this

00:03:36,819 --> 00:03:43,509
feature and we are hoping that you get

00:03:39,579 --> 00:03:45,370
to learn more about it and yeah try it

00:03:43,509 --> 00:03:47,519
out tell us what you think thank you so

00:03:45,370 --> 00:03:47,519

YouTube URL: https://www.youtube.com/watch?v=PqA5Cnf7T4w


