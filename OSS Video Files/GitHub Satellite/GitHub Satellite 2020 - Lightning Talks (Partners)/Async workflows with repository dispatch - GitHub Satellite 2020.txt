Title: Async workflows with repository dispatch - GitHub Satellite 2020
Publication date: 2020-05-06
Playlist: GitHub Satellite 2020 - Lightning Talks (Partners)
Description: 
	Presented by Joe Lust, Mable

GitHub Satellite: A community connected by code

On May 6th, we threw a free virtual event featuring developers working together on the worldâ€™s software, announcements from the GitHub team, and inspiring performances by artists who code.

More information: https://githubsatellite.com
Schedule: https://githubsatellite.com/schedule/
Captions: 
	00:00:00,000 --> 00:00:05,299
protip Aysen workflows repository

00:00:03,389 --> 00:00:09,120
dispatch let's do it

00:00:05,299 --> 00:00:11,370
i'm joe lost you can fork me on github a

00:00:09,120 --> 00:00:15,719
twisted pair and you can tweet me on

00:00:11,370 --> 00:00:17,760
twitter at lost coder so what are

00:00:15,719 --> 00:00:20,430
asynchronous workflows why are they

00:00:17,760 --> 00:00:23,460
important to you well let's say for

00:00:20,430 --> 00:00:25,470
example that you've built a CVD scanning

00:00:23,460 --> 00:00:27,630
tool that tool runs on your servers

00:00:25,470 --> 00:00:29,699
outside of github but it might actually

00:00:27,630 --> 00:00:32,369
take a long time for those scans to

00:00:29,699 --> 00:00:35,010
complete historically you might have

00:00:32,369 --> 00:00:37,440
made a get of action that sits and pulls

00:00:35,010 --> 00:00:39,329
after sending out to your server and

00:00:37,440 --> 00:00:41,520
waits and waits and waits until that

00:00:39,329 --> 00:00:44,100
scan is done burning perhaps half an

00:00:41,520 --> 00:00:45,539
hour of your users build minutes now

00:00:44,100 --> 00:00:48,300
certainly you don't want to waste that

00:00:45,539 --> 00:00:50,879
time what if there's a way that you

00:00:48,300 --> 00:00:52,559
could call back in asynchronously

00:00:50,879 --> 00:00:55,640
when you were done and continue that

00:00:52,559 --> 00:00:56,760
build well now there is and it's called

00:00:55,640 --> 00:01:00,300
repository

00:00:56,760 --> 00:01:02,609
dispatch a repository dispatch event is

00:01:00,300 --> 00:01:06,060
an event and github API that you can

00:01:02,609 --> 00:01:08,939
call save for example your github map to

00:01:06,060 --> 00:01:11,700
trigger an event in a specific github

00:01:08,939 --> 00:01:14,549
repository this event can be any type of

00:01:11,700 --> 00:01:16,680
event that you define and it can carry

00:01:14,549 --> 00:01:19,110
any payload and metadata that you like

00:01:16,680 --> 00:01:20,790
this is very powerful because now you're

00:01:19,110 --> 00:01:24,299
no longer constrained by github x'

00:01:20,790 --> 00:01:26,939
events and get-ups domain model so once

00:01:24,299 --> 00:01:30,240
this look like well let's look at a bill

00:01:26,939 --> 00:01:32,460
that maybe is using this CME tool in the

00:01:30,240 --> 00:01:34,890
specification of that workflow we can

00:01:32,460 --> 00:01:37,530
see repository dispatch and the types

00:01:34,890 --> 00:01:40,710
we're telling the workflow that we only

00:01:37,530 --> 00:01:43,409
care about the CV each XPath type so now

00:01:40,710 --> 00:01:46,140
when your external service calls back in

00:01:43,409 --> 00:01:50,070
firing that event we're going to trigger

00:01:46,140 --> 00:01:51,869
just this workflow and on top of that we

00:01:50,070 --> 00:01:53,939
can see here with the CVE checks

00:01:51,869 --> 00:01:55,950
completed and successful that we were

00:01:53,939 --> 00:01:58,920
running this shipping job and that job

00:01:55,950 --> 00:02:00,450
is actually accessing the metadata from

00:01:58,920 --> 00:02:01,979
that event that's been brought into

00:02:00,450 --> 00:02:06,240
scope by a github workflows

00:02:01,979 --> 00:02:08,369
automatically using that data we can do

00:02:06,240 --> 00:02:11,039
all sorts of useful things such as the

00:02:08,369 --> 00:02:13,300
second example where not everything went

00:02:11,039 --> 00:02:15,100
well during our CVS can

00:02:13,300 --> 00:02:17,830
so a different event respired through

00:02:15,100 --> 00:02:21,250
repository dispatch the CVT checks they

00:02:17,830 --> 00:02:24,790
own event and now we're using a third

00:02:21,250 --> 00:02:27,430
party action for example chasing echoes

00:02:24,790 --> 00:02:30,160
create issue action to make an issue

00:02:27,430 --> 00:02:33,400
against that repository and note what

00:02:30,160 --> 00:02:35,790
the CV was by changing the title to the

00:02:33,400 --> 00:02:39,160
actual payload it came out of that event

00:02:35,790 --> 00:02:42,940
as you can see now we're enabling the

00:02:39,160 --> 00:02:45,340
users of the CVE tool for example to do

00:02:42,940 --> 00:02:47,620
whatever they want combined these events

00:02:45,340 --> 00:02:51,010
in any way they see fit that's useful to

00:02:47,620 --> 00:02:53,410
them inside their workflows and to time

00:02:51,010 --> 00:02:56,080
the original job to a third party

00:02:53,410 --> 00:02:58,330
service kick it off asynchronously and

00:02:56,080 --> 00:02:59,770
come back into another workflow tying

00:02:58,330 --> 00:03:03,760
everything together in an event-driven

00:02:59,770 --> 00:03:05,200
manner now you might think this seems

00:03:03,760 --> 00:03:07,750
like something you could already do and

00:03:05,200 --> 00:03:09,490
it is true previous when you could fire

00:03:07,750 --> 00:03:11,980
a lot of events but you were limited to

00:03:09,490 --> 00:03:14,140
events that happen inside github just

00:03:11,980 --> 00:03:16,780
somebody making a comment somebody

00:03:14,140 --> 00:03:19,120
pushing and commit somebody merging a

00:03:16,780 --> 00:03:20,980
full request but now you can create

00:03:19,120 --> 00:03:23,050
whatever events you want that are

00:03:20,980 --> 00:03:26,350
relevant to your apps and you can fire

00:03:23,050 --> 00:03:28,450
them to those repositories enable users

00:03:26,350 --> 00:03:30,610
and customers to build and workflows

00:03:28,450 --> 00:03:32,739
that are event-driven and work for them

00:03:30,610 --> 00:03:36,010
and whatever permutations they can

00:03:32,739 --> 00:03:39,390
imagine given that what are you gonna do

00:03:36,010 --> 00:03:39,390

YouTube URL: https://www.youtube.com/watch?v=-xrFNFby7hc


