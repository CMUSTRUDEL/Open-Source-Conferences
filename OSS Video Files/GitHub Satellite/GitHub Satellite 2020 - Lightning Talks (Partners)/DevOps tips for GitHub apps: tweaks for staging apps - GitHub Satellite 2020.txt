Title: DevOps tips for GitHub apps: tweaks for staging apps - GitHub Satellite 2020
Publication date: 2020-05-06
Playlist: GitHub Satellite 2020 - Lightning Talks (Partners)
Description: 
	Presented by Chad Carlson, Platform.Sh

GitHub Satellite: A community connected by code

On May 6th, we threw a free virtual event featuring developers working together on the worldâ€™s software, announcements from the GitHub team, and inspiring performances by artists who code.

More information: https://githubsatellite.com
Schedule: https://githubsatellite.com/schedule/
Captions: 
	00:00:00,000 --> 00:00:05,490
hello there my name is Chad Carlson you

00:00:02,639 --> 00:00:07,710
can find me on github at Chad W Carlson

00:00:05,490 --> 00:00:11,190
and I work for the developer relations

00:00:07,710 --> 00:00:13,259
team at platform SH my pro tips today

00:00:11,190 --> 00:00:15,540
relate to setting up your pro bot

00:00:13,259 --> 00:00:17,850
application for a modern development

00:00:15,540 --> 00:00:19,650
workflow simplifying the registration

00:00:17,850 --> 00:00:22,199
process at the point of allowing you to

00:00:19,650 --> 00:00:24,930
actually register open pull requests of

00:00:22,199 --> 00:00:27,029
your application and test those changes

00:00:24,930 --> 00:00:28,619
on an entirely separate application

00:00:27,029 --> 00:00:31,590
before merging them into your production

00:00:28,619 --> 00:00:33,870
app all I wanted to do first off was

00:00:31,590 --> 00:00:36,210
deploy the simple hello world Pro bot

00:00:33,870 --> 00:00:38,700
app and start delivering to my

00:00:36,210 --> 00:00:41,550
repositories when I started to do that I

00:00:38,700 --> 00:00:44,010
found that first off that I wanted to

00:00:41,550 --> 00:00:46,230
simplify that first registration step

00:00:44,010 --> 00:00:48,719
performing that first handshake with

00:00:46,230 --> 00:00:51,000
github I mean typically as I had seen it

00:00:48,719 --> 00:00:54,030
at that point it was a lot of putting

00:00:51,000 --> 00:00:56,390
that first registration call to github

00:00:54,030 --> 00:00:58,500
and a lot of manual setting of

00:00:56,390 --> 00:01:01,620
credentials from that registered

00:00:58,500 --> 00:01:04,110
application as that real first step and

00:01:01,620 --> 00:01:07,880
I ran into the first problem which I'm

00:01:04,110 --> 00:01:10,439
sure isn't unique to platform SH was the

00:01:07,880 --> 00:01:13,080
environment that the project is deployed

00:01:10,439 --> 00:01:15,630
on in our system is a read-only file

00:01:13,080 --> 00:01:17,250
system so I'm able to give it the name

00:01:15,630 --> 00:01:19,020
of my application use all the

00:01:17,250 --> 00:01:22,409
credentials I've set up or all the

00:01:19,020 --> 00:01:24,900
information I've set up in my manifest

00:01:22,409 --> 00:01:27,030
file but that's about as far as I can

00:01:24,900 --> 00:01:28,680
get and it would reject the registration

00:01:27,030 --> 00:01:30,689
that's because github was trying to

00:01:28,680 --> 00:01:33,810
write to my dot M file on my read-only

00:01:30,689 --> 00:01:36,060
file system so first tip I have for

00:01:33,810 --> 00:01:37,470
those of you who are probably gonna run

00:01:36,060 --> 00:01:41,990
into something similar if you're trying

00:01:37,470 --> 00:01:46,200
to make this registration simplify is I

00:01:41,990 --> 00:01:48,450
created a mounted directory inside my

00:01:46,200 --> 00:01:50,909
project that had write access and then

00:01:48,450 --> 00:01:54,210
sim linked it to that dot M file making

00:01:50,909 --> 00:01:57,149
that small change was enough for github

00:01:54,210 --> 00:02:00,060
to write those initial credentials to my

00:01:57,149 --> 00:02:02,009
project and finish registering my

00:02:00,060 --> 00:02:03,960
application get me set to start

00:02:02,009 --> 00:02:06,960
delivering to my repositories once they

00:02:03,960 --> 00:02:09,840
were installed the second let's say I

00:02:06,960 --> 00:02:13,480
have my app and I've deployed and synced

00:02:09,840 --> 00:02:16,959
it to my github repo ver I'm where I'm

00:02:13,480 --> 00:02:18,790
actually have the code what happens if I

00:02:16,959 --> 00:02:21,569
branch what happens if I open a pull

00:02:18,790 --> 00:02:26,650
request the way our integration works is

00:02:21,569 --> 00:02:29,500
that if I define a directory with this

00:02:26,650 --> 00:02:32,260
write access even if I delete that file

00:02:29,500 --> 00:02:34,299
that dot M file that I have separately

00:02:32,260 --> 00:02:37,299
registered for like let's say a staging

00:02:34,299 --> 00:02:39,310
environment when I perform a merge on to

00:02:37,299 --> 00:02:42,790
my production app it's going to

00:02:39,310 --> 00:02:46,060
overwrite the contents of that directory

00:02:42,790 --> 00:02:47,829
with with the write access and obviously

00:02:46,060 --> 00:02:49,329
that's not what I want to happen I want

00:02:47,829 --> 00:02:51,430
the credentials from my production app

00:02:49,329 --> 00:02:53,319
to stay the same do what I want on a

00:02:51,430 --> 00:02:55,959
staging version of the application and

00:02:53,319 --> 00:02:57,549
then continue with that workflow from

00:02:55,959 --> 00:02:59,829
there on out and not affect production

00:02:57,549 --> 00:03:02,019
anything other than the code I change

00:02:59,829 --> 00:03:04,450
for the behavior of the application I

00:03:02,019 --> 00:03:07,750
can do this through the CLI in our

00:03:04,450 --> 00:03:09,640
system but would be to delete that dot M

00:03:07,750 --> 00:03:10,209
file as soon as possible as soon as you

00:03:09,640 --> 00:03:12,370
can

00:03:10,209 --> 00:03:14,019
right before you delete it take out the

00:03:12,370 --> 00:03:16,450
contents of that file and convert them

00:03:14,019 --> 00:03:19,389
into environment variables specific to

00:03:16,450 --> 00:03:21,130
that branch that way that you're not

00:03:19,389 --> 00:03:23,260
going to get anything overwritten on

00:03:21,130 --> 00:03:25,150
your production environment and you're

00:03:23,260 --> 00:03:27,880
still gonna have completely segregated

00:03:25,150 --> 00:03:30,310
apps full with the credentials that have

00:03:27,880 --> 00:03:32,079
been registered with github for as long

00:03:30,310 --> 00:03:33,310
as you need that open even if you wanted

00:03:32,079 --> 00:03:36,639
to continue to have a staging

00:03:33,310 --> 00:03:40,389
environment always open lastly I have a

00:03:36,639 --> 00:03:43,959
manifest file for my proba app in the

00:03:40,389 --> 00:03:46,450
repository and now in my project it's

00:03:43,959 --> 00:03:49,540
actually deployed and during that first

00:03:46,450 --> 00:03:52,780
handshake it's using this name attribute

00:03:49,540 --> 00:03:55,090
to fill out the field for that first

00:03:52,780 --> 00:03:57,700
registration called a github the what I

00:03:55,090 --> 00:04:01,030
did just as our team was playing around

00:03:57,700 --> 00:04:04,120
with it right at the end of the of the

00:04:01,030 --> 00:04:07,000
build process when it's become available

00:04:04,120 --> 00:04:09,819
what URL my application actually is

00:04:07,000 --> 00:04:11,290
going to be served from and what branch

00:04:09,819 --> 00:04:13,510
its on it this kind of information

00:04:11,290 --> 00:04:16,359
specific to the environment parse out

00:04:13,510 --> 00:04:18,579
that manifest file and rewrite that name

00:04:16,359 --> 00:04:20,620
attribute to have just something in

00:04:18,579 --> 00:04:22,690
print the parentheses specific to the

00:04:20,620 --> 00:04:24,130
name of the branch I'm working on try to

00:04:22,690 --> 00:04:25,060
register the app that's automatically

00:04:24,130 --> 00:04:27,910
going to have the

00:04:25,060 --> 00:04:29,620
the branch there so it doesn't clash

00:04:27,910 --> 00:04:31,510
with the name of the production app and

00:04:29,620 --> 00:04:33,460
you can keep them separated if you have

00:04:31,510 --> 00:04:36,460
a bunch of apps for one organization

00:04:33,460 --> 00:04:39,370
account for example so even if you're

00:04:36,460 --> 00:04:41,770
never planning on using platform dot Sh

00:04:39,370 --> 00:04:43,870
feel free to check out the template that

00:04:41,770 --> 00:04:47,260
we created and see exactly how the code

00:04:43,870 --> 00:04:49,150
i've described is working and you can

00:04:47,260 --> 00:04:50,800
set up some isolated development and

00:04:49,150 --> 00:04:53,889
staging environments for your pro bot

00:04:50,800 --> 00:04:55,389
apps yourself that's my five minutes I

00:04:53,889 --> 00:04:57,760
hope you guys enjoy the rest of the

00:04:55,389 --> 00:04:58,630
satellite and our staying safe and

00:04:57,760 --> 00:05:01,410
healthy out there

00:04:58,630 --> 00:05:01,410

YouTube URL: https://www.youtube.com/watch?v=afkI-8jA1GU


