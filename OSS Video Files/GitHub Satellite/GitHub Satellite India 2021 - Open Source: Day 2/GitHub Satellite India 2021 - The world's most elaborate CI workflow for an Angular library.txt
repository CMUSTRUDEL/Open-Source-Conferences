Title: GitHub Satellite India 2021 - The world's most elaborate CI workflow for an Angular library
Publication date: 2021-03-28
Playlist: GitHub Satellite India 2021 - Open Source: Day 2
Description: 
	Presented by Lars Gyrup Brink Nielsen, Frontend Architect @ Systemate A/S

Using a GitHub Actions workflow running 50 jobs per workflow run, Node.js, and SonarCloud, Lumberjack maintains end-to-end compatibility across several versions of Angular and TypeScript in a single codebase.

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:06,879 --> 00:00:11,440
hello

00:00:07,680 --> 00:00:13,280
what a lovely day um i'm lars brink from

00:00:11,440 --> 00:00:14,480
system made in denmark and today i'm

00:00:13,280 --> 00:00:16,800
going to be sharing

00:00:14,480 --> 00:00:18,480
how we applied github actions to a

00:00:16,800 --> 00:00:21,439
library i'm maintaining

00:00:18,480 --> 00:00:23,199
so this is about a library called

00:00:21,439 --> 00:00:25,039
lumberjack

00:00:23,199 --> 00:00:27,039
and let's see a few features of that

00:00:25,039 --> 00:00:27,840
library it's a logging library for

00:00:27,039 --> 00:00:30,400
angular

00:00:27,840 --> 00:00:32,399
it has six configurable logging levels

00:00:30,400 --> 00:00:34,800
very robust error handling

00:00:32,399 --> 00:00:36,320
and it has a plugin based architecture

00:00:34,800 --> 00:00:37,440
as you see on the right hand side of the

00:00:36,320 --> 00:00:39,280
screen

00:00:37,440 --> 00:00:40,960
your application is communicating with

00:00:39,280 --> 00:00:44,000
the lumberjack api

00:00:40,960 --> 00:00:48,719
and behind that is one or more log

00:00:44,000 --> 00:00:50,879
drivers and to demonstrate that plugin

00:00:48,719 --> 00:00:52,719
architecture built into the library is

00:00:50,879 --> 00:00:54,480
two common drivers

00:00:52,719 --> 00:00:56,800
a browser console driver that will

00:00:54,480 --> 00:01:00,960
display the logs in the browser console

00:00:56,800 --> 00:01:04,159
and an http log driver that will

00:01:00,960 --> 00:01:06,640
use your backend with a simple interface

00:01:04,159 --> 00:01:07,200
and the nice thing is that the community

00:01:06,640 --> 00:01:09,439
provides

00:01:07,200 --> 00:01:11,280
more drivers for example for azure

00:01:09,439 --> 00:01:14,320
application insights

00:01:11,280 --> 00:01:16,159
and google firestore

00:01:14,320 --> 00:01:18,159
and you can even build your own that

00:01:16,159 --> 00:01:20,400
fits your project which is

00:01:18,159 --> 00:01:22,320
relatively straightforward and the

00:01:20,400 --> 00:01:24,159
library also comes with what's known as

00:01:22,320 --> 00:01:26,320
angular schematics which is used for

00:01:24,159 --> 00:01:28,720
code generation and code mods

00:01:26,320 --> 00:01:30,720
and most importantly for today's talk it

00:01:28,720 --> 00:01:34,079
has verified cross-version

00:01:30,720 --> 00:01:36,400
angular compatibility that means that

00:01:34,079 --> 00:01:38,079
we support multiple major and minor

00:01:36,400 --> 00:01:41,439
versions of angular

00:01:38,079 --> 00:01:44,799
from one major version of lumberjack

00:01:41,439 --> 00:01:44,799
version 2.x right now

00:01:44,960 --> 00:01:48,880
a bit more about lumberjack we have six

00:01:47,520 --> 00:01:51,200
d6 log levels

00:01:48,880 --> 00:01:52,880
and angle has the concept of development

00:01:51,200 --> 00:01:54,720
mode and production mode

00:01:52,880 --> 00:01:56,560
in development mode all the log levels

00:01:54,720 --> 00:01:59,200
will be active by default

00:01:56,560 --> 00:02:01,280
in production mode the debug and trace

00:01:59,200 --> 00:02:03,119
levels are disabled

00:02:01,280 --> 00:02:04,479
of course this can be overwritten using

00:02:03,119 --> 00:02:06,560
configuration

00:02:04,479 --> 00:02:08,000
even to the point that you can configure

00:02:06,560 --> 00:02:09,920
it on the log driver

00:02:08,000 --> 00:02:12,319
itself different from the other lock

00:02:09,920 --> 00:02:12,319
drivers

00:02:12,640 --> 00:02:16,319
so we wanted this cross version

00:02:14,319 --> 00:02:18,959
compatibility with angular type script

00:02:16,319 --> 00:02:21,360
and related dependencies

00:02:18,959 --> 00:02:22,959
so we looked for github actions to solve

00:02:21,360 --> 00:02:24,319
this problem

00:02:22,959 --> 00:02:25,920
this is the problem we're trying to

00:02:24,319 --> 00:02:27,760
solve as you can see here in the the

00:02:25,920 --> 00:02:28,959
right hand side we have a compatibility

00:02:27,760 --> 00:02:31,120
matrix between

00:02:28,959 --> 00:02:32,400
angular cli angular node.js and

00:02:31,120 --> 00:02:34,080
typescript

00:02:32,400 --> 00:02:36,239
there's eight different versions of

00:02:34,080 --> 00:02:39,360
angular supporting six

00:02:36,239 --> 00:02:40,080
versions of typescript two major node.js

00:02:39,360 --> 00:02:42,080
versions

00:02:40,080 --> 00:02:43,360
and that's 30 possible combination of

00:02:42,080 --> 00:02:45,920
dependencies

00:02:43,360 --> 00:02:48,239
so how could we solve this maybe a

00:02:45,920 --> 00:02:50,640
project per combination

00:02:48,239 --> 00:02:53,040
with a demo application maybe some unit

00:02:50,640 --> 00:02:55,680
integration or end-to-end test

00:02:53,040 --> 00:02:57,120
um this was an initial stable version of

00:02:55,680 --> 00:02:59,040
our library and we thought this

00:02:57,120 --> 00:03:00,560
could quickly become unmaintainable

00:02:59,040 --> 00:03:02,400
because

00:03:00,560 --> 00:03:04,720
several versions of angular released

00:03:02,400 --> 00:03:07,680
each year

00:03:04,720 --> 00:03:10,640
so the solution was we wanted to use the

00:03:07,680 --> 00:03:12,959
angular cli workspace structure you see

00:03:10,640 --> 00:03:13,920
part of our repo here on the right hand

00:03:12,959 --> 00:03:16,080
side

00:03:13,920 --> 00:03:18,800
and we wanted a single source code based

00:03:16,080 --> 00:03:20,959
solution so you can see we have

00:03:18,800 --> 00:03:22,560
the lumberjack app is a demo app it has

00:03:20,959 --> 00:03:25,040
an end-to-end test suite

00:03:22,560 --> 00:03:26,560
in the next folder it has a schematics

00:03:25,040 --> 00:03:29,120
target application

00:03:26,560 --> 00:03:31,200
i'll get back to that because it also

00:03:29,120 --> 00:03:33,920
has an end-to-end test suite

00:03:31,200 --> 00:03:35,760
and in the bottom we see there's a bunch

00:03:33,920 --> 00:03:37,760
of tools that some node.js scripts

00:03:35,760 --> 00:03:40,560
integrating our different

00:03:37,760 --> 00:03:41,760
tool chain in our ci workflow and

00:03:40,560 --> 00:03:44,000
finally

00:03:41,760 --> 00:03:44,959
so we have the single source code based

00:03:44,000 --> 00:03:47,360
solution

00:03:44,959 --> 00:03:48,480
and will have a github actions job run

00:03:47,360 --> 00:03:51,440
per combination

00:03:48,480 --> 00:03:51,440
of dependencies

00:03:51,680 --> 00:03:55,200
so we have in total 50 jobs being run

00:03:54,000 --> 00:03:57,680
per ci

00:03:55,200 --> 00:03:59,200
run through 49 of them are github

00:03:57,680 --> 00:04:02,239
actions the last one is

00:03:59,200 --> 00:04:04,239
run in sonar cloud we have between 10

00:04:02,239 --> 00:04:06,480
and 30 jobs run in parallel

00:04:04,239 --> 00:04:08,480
we're an open source project so we get

00:04:06,480 --> 00:04:10,400
basically unlimited

00:04:08,480 --> 00:04:12,000
github action minutes from github so

00:04:10,400 --> 00:04:13,519
thank you very much for that

00:04:12,000 --> 00:04:16,320
or this would not even have been

00:04:13,519 --> 00:04:18,720
possible uh the whole workflow takes

00:04:16,320 --> 00:04:21,840
around six minutes in total it's by

00:04:18,720 --> 00:04:24,000
49 jobs at this point um

00:04:21,840 --> 00:04:25,919
so yeah that's that's pretty neat setup

00:04:24,000 --> 00:04:28,160
and we spent

00:04:25,919 --> 00:04:29,370
a few months perfecting this setup so

00:04:28,160 --> 00:04:30,560
that that's really nice

00:04:29,370 --> 00:04:33,280
[Music]

00:04:30,560 --> 00:04:34,479
the different jobs we see um the build

00:04:33,280 --> 00:04:36,720
job is the first one

00:04:34,479 --> 00:04:38,240
it runs a production library built using

00:04:36,720 --> 00:04:40,880
the latest versions

00:04:38,240 --> 00:04:42,880
of all the tools and angle and so on and

00:04:40,880 --> 00:04:43,600
then it uploads a build artifact with

00:04:42,880 --> 00:04:45,840
that

00:04:43,600 --> 00:04:48,800
package which is exactly the package

00:04:45,840 --> 00:04:51,360
that will later be published to npm

00:04:48,800 --> 00:04:52,720
the lint job runs formatting checks and

00:04:51,360 --> 00:04:54,800
checks the lensing rules

00:04:52,720 --> 00:04:56,000
it also uses the latest versions of

00:04:54,800 --> 00:04:58,880
tools the tool

00:04:56,000 --> 00:04:59,440
chain and all the dependencies the sonar

00:04:58,880 --> 00:05:02,080
job

00:04:59,440 --> 00:05:03,919
generates test coverage and lint reports

00:05:02,080 --> 00:05:06,880
then it uploads them to sonar cloud for

00:05:03,919 --> 00:05:08,720
further processing

00:05:06,880 --> 00:05:10,080
and in the right hand side we see that

00:05:08,720 --> 00:05:12,080
the jobs that depend

00:05:10,080 --> 00:05:14,880
on the build job and we'll get back to

00:05:12,080 --> 00:05:14,880
that in a second

00:05:15,199 --> 00:05:18,720
the first job that doesn't depend on the

00:05:17,360 --> 00:05:22,320
build job is the

00:05:18,720 --> 00:05:25,039
lib or library job it uses the latest

00:05:22,320 --> 00:05:26,960
major note just version supported by

00:05:25,039 --> 00:05:28,560
angular version 12.

00:05:26,960 --> 00:05:30,160
and it has these all these eight

00:05:28,560 --> 00:05:33,440
versions of angular

00:05:30,160 --> 00:05:35,280
which combined have fif five versions of

00:05:33,440 --> 00:05:39,120
typescript supported

00:05:35,280 --> 00:05:40,240
so we'll have a ci run for this job per

00:05:39,120 --> 00:05:42,080
combination

00:05:40,240 --> 00:05:43,440
of dependencies as you can see in the

00:05:42,080 --> 00:05:46,479
right hand side

00:05:43,440 --> 00:05:49,759
it's actually eight

00:05:46,479 --> 00:05:51,199
runs in total they're called matrix lags

00:05:49,759 --> 00:05:52,240
the one you saw on the right hand side

00:05:51,199 --> 00:05:54,800
before

00:05:52,240 --> 00:05:56,160
so for each of those runs the setup

00:05:54,800 --> 00:05:58,479
process is that it

00:05:56,160 --> 00:05:59,440
first installs the angular version

00:05:58,479 --> 00:06:04,319
specified by

00:05:59,440 --> 00:06:06,880
the ci matrix then it installs the

00:06:04,319 --> 00:06:08,240
typescript version and other related

00:06:06,880 --> 00:06:10,160
dependencies

00:06:08,240 --> 00:06:12,160
with that setup out of the way now we

00:06:10,160 --> 00:06:13,280
can run the main content of this job

00:06:12,160 --> 00:06:15,440
which is

00:06:13,280 --> 00:06:17,120
run the unit and the integration test

00:06:15,440 --> 00:06:19,280
for our development

00:06:17,120 --> 00:06:21,280
projects which are test utilities

00:06:19,280 --> 00:06:23,440
internally for the library

00:06:21,280 --> 00:06:24,639
then this the unit and integration test

00:06:23,440 --> 00:06:26,960
for the library itself

00:06:24,639 --> 00:06:28,400
and finally we even have unit and

00:06:26,960 --> 00:06:30,000
integration test for the angular

00:06:28,400 --> 00:06:33,120
schematics that are used for code

00:06:30,000 --> 00:06:35,199
generation and code mods

00:06:33,120 --> 00:06:37,039
the next job is the app job this one

00:06:35,199 --> 00:06:40,000
does depend on the build

00:06:37,039 --> 00:06:40,560
job it has a similar range but it adds

00:06:40,000 --> 00:06:42,400
another

00:06:40,560 --> 00:06:45,039
major version of node.js because some of

00:06:42,400 --> 00:06:47,840
these angular versions support

00:06:45,039 --> 00:06:49,919
node version 10 as well so now we have

00:06:47,840 --> 00:06:53,520
more matrix legs

00:06:49,919 --> 00:06:54,400
we have 16 in total so it adds another

00:06:53,520 --> 00:06:56,720
setup step

00:06:54,400 --> 00:06:58,720
install the version of node specified by

00:06:56,720 --> 00:07:00,880
the ci matrix

00:06:58,720 --> 00:07:02,000
it has some additional setup steps here

00:07:00,880 --> 00:07:05,360
because now we're getting

00:07:02,000 --> 00:07:05,919
to we want to test the library from a

00:07:05,360 --> 00:07:08,560
real

00:07:05,919 --> 00:07:11,120
application so typescript has this

00:07:08,560 --> 00:07:15,120
concept of path mappings

00:07:11,120 --> 00:07:18,240
which allows code to import

00:07:15,120 --> 00:07:20,720
code using a package name but the code

00:07:18,240 --> 00:07:21,919
might be in the same repo if you set up

00:07:20,720 --> 00:07:23,680
the path mappings and

00:07:21,919 --> 00:07:25,039
we have that in the repo but we want to

00:07:23,680 --> 00:07:27,520
delete that

00:07:25,039 --> 00:07:28,639
so that the next step step here makes

00:07:27,520 --> 00:07:30,560
sense

00:07:28,639 --> 00:07:32,319
so we're downloading that build artifact

00:07:30,560 --> 00:07:34,000
from the build job that's the package

00:07:32,319 --> 00:07:36,479
that will ship to npm

00:07:34,000 --> 00:07:37,840
we're moving it into node modules folder

00:07:36,479 --> 00:07:40,720
and the reason for that

00:07:37,840 --> 00:07:42,639
is this next step the angular

00:07:40,720 --> 00:07:44,639
compatibility compiler

00:07:42,639 --> 00:07:47,039
it's a bit of a temporary solution

00:07:44,639 --> 00:07:49,199
because angular is currently

00:07:47,039 --> 00:07:51,120
migrating from the previous generation

00:07:49,199 --> 00:07:53,120
compiler called view engine

00:07:51,120 --> 00:07:55,120
to the current generation angular

00:07:53,120 --> 00:07:57,120
compiler called ib

00:07:55,120 --> 00:07:58,960
and right now we're in a situation where

00:07:57,120 --> 00:08:00,560
angular libraries are compiled with the

00:07:58,960 --> 00:08:03,039
previous generation

00:08:00,560 --> 00:08:04,240
so whenever an application installs an

00:08:03,039 --> 00:08:06,479
angular library

00:08:04,240 --> 00:08:07,520
it will have to run it through the ngcc

00:08:06,479 --> 00:08:12,400
compiler

00:08:07,520 --> 00:08:14,479
to uplevel it to iv instructions

00:08:12,400 --> 00:08:15,599
so we want to make sure we support that

00:08:14,479 --> 00:08:18,479
tool as well

00:08:15,599 --> 00:08:19,360
as long as it's necessary with all of

00:08:18,479 --> 00:08:21,360
this set up

00:08:19,360 --> 00:08:24,240
out of the way now we can run the demo

00:08:21,360 --> 00:08:26,560
applications unit and integration tests

00:08:24,240 --> 00:08:29,199
and we will also do do a production

00:08:26,560 --> 00:08:32,719
build of that application so we have

00:08:29,199 --> 00:08:34,240
an end to end um on the unit and

00:08:32,719 --> 00:08:35,839
integration test level we have an end to

00:08:34,240 --> 00:08:38,839
end setup

00:08:35,839 --> 00:08:40,880
which is as close as you get to real

00:08:38,839 --> 00:08:42,880
application

00:08:40,880 --> 00:08:44,159
the next job is the end-to-end testing

00:08:42,880 --> 00:08:46,720
job we

00:08:44,159 --> 00:08:48,480
see the same setup as before only one

00:08:46,720 --> 00:08:51,279
version of node

00:08:48,480 --> 00:08:53,200
um but that is eight matrix lags in

00:08:51,279 --> 00:08:54,560
total and we have exactly the same setup

00:08:53,200 --> 00:08:56,800
as the previous

00:08:54,560 --> 00:08:59,519
job but now we're running end-to-end

00:08:56,800 --> 00:09:01,600
tests using the tool called protractor

00:08:59,519 --> 00:09:03,120
that will use a real browser in this

00:09:01,600 --> 00:09:03,839
case we install the latest version of

00:09:03,120 --> 00:09:05,920
google chrome

00:09:03,839 --> 00:09:07,760
then we run all the end to end tests for

00:09:05,920 --> 00:09:11,600
our demo application

00:09:07,760 --> 00:09:11,600
using the real package bundle

00:09:11,680 --> 00:09:15,440
the final job we have is the schematics

00:09:13,680 --> 00:09:18,160
and time testing job

00:09:15,440 --> 00:09:18,720
and we support almost every version here

00:09:18,160 --> 00:09:21,519
in this

00:09:18,720 --> 00:09:23,600
setup there is one detail missing about

00:09:21,519 --> 00:09:26,160
angular 9.0 because of the jest

00:09:23,600 --> 00:09:27,360
issue with typescript but we feel pretty

00:09:26,160 --> 00:09:29,920
conf com

00:09:27,360 --> 00:09:34,640
confident that that we support even

00:09:29,920 --> 00:09:36,720
version 9.0 since we we are testing 9.1

00:09:34,640 --> 00:09:38,240
in this job we have the same setup as

00:09:36,720 --> 00:09:40,240
the two previous jobs

00:09:38,240 --> 00:09:41,519
but now we run the end-to-end test for

00:09:40,240 --> 00:09:43,120
the schematics

00:09:41,519 --> 00:09:45,519
and schematics are used through the

00:09:43,120 --> 00:09:48,000
command line so we will have a

00:09:45,519 --> 00:09:48,880
freshly generated angular project the

00:09:48,000 --> 00:09:52,000
target

00:09:48,880 --> 00:09:53,839
project for schematics and then we run

00:09:52,000 --> 00:09:56,399
from the command line

00:09:53,839 --> 00:09:58,959
it's called ng-add it adds the package

00:09:56,399 --> 00:10:02,320
to the application and then it registers

00:09:58,959 --> 00:10:04,399
the library with with angular and sets

00:10:02,320 --> 00:10:07,200
up basic configuration

00:10:04,399 --> 00:10:07,839
and in the future we'll we're working on

00:10:07,200 --> 00:10:11,120
some

00:10:07,839 --> 00:10:13,279
tools for generating code for using

00:10:11,120 --> 00:10:14,800
the library for example to add your own

00:10:13,279 --> 00:10:17,279
log driver

00:10:14,800 --> 00:10:18,959
so we're doing this for every major

00:10:17,279 --> 00:10:21,040
minor version of angular and typescript

00:10:18,959 --> 00:10:24,079
support it

00:10:21,040 --> 00:10:25,839
a few more details about the ci matrix

00:10:24,079 --> 00:10:27,680
workflow

00:10:25,839 --> 00:10:30,000
you have probably seen this setup node

00:10:27,680 --> 00:10:33,200
action from github before

00:10:30,000 --> 00:10:34,399
and you might only have passed it a

00:10:33,200 --> 00:10:36,399
single version

00:10:34,399 --> 00:10:37,600
but here we have the ci matrix and

00:10:36,399 --> 00:10:39,360
github actions

00:10:37,600 --> 00:10:41,839
so we have two versions of node so

00:10:39,360 --> 00:10:43,760
there's there will be two jobs

00:10:41,839 --> 00:10:45,279
and each of them will specify version of

00:10:43,760 --> 00:10:48,640
node that we interpolate

00:10:45,279 --> 00:10:51,040
using matrix.node version

00:10:48,640 --> 00:10:52,399
so we wanted a similar setup for angular

00:10:51,040 --> 00:10:56,480
so now we have two times

00:10:52,399 --> 00:10:58,800
eight 16 matrix lags in this job

00:10:56,480 --> 00:11:01,040
and we passed to angular version

00:10:58,800 --> 00:11:02,320
parameter repository matrix.angular

00:11:01,040 --> 00:11:04,720
version

00:11:02,320 --> 00:11:07,360
interpolated so that comes from the ci

00:11:04,720 --> 00:11:09,200
matrix run

00:11:07,360 --> 00:11:10,560
but if you look closely at this action

00:11:09,200 --> 00:11:12,560
it's called ng worker

00:11:10,560 --> 00:11:15,200
slash angle versions action it's a

00:11:12,560 --> 00:11:17,360
package or a github action we created

00:11:15,200 --> 00:11:19,680
specifically for this library

00:11:17,360 --> 00:11:23,200
but uh as we'll see in a minute that

00:11:19,680 --> 00:11:25,760
there's it's meant to be reused across

00:11:23,200 --> 00:11:27,680
any angular library for for ci setup so

00:11:25,760 --> 00:11:29,200
that's pretty nice

00:11:27,680 --> 00:11:30,200
so we have it published on the github

00:11:29,200 --> 00:11:31,680
actions marketplace

00:11:30,200 --> 00:11:33,760
[Music]

00:11:31,680 --> 00:11:35,360
what it does is it accepts this input

00:11:33,760 --> 00:11:37,040
parameter of the angular version

00:11:35,360 --> 00:11:39,680
and here's an example of a list

00:11:37,040 --> 00:11:41,839
parameter it then goes and replaces

00:11:39,680 --> 00:11:43,360
more than 20 angular typescript and

00:11:41,839 --> 00:11:46,399
related dependencies

00:11:43,360 --> 00:11:48,640
in package.json and each combination of

00:11:46,399 --> 00:11:51,120
dependencies has been verified by us

00:11:48,640 --> 00:11:53,360
to still be in a working state because

00:11:51,120 --> 00:11:55,360
we all know that over time dependencies

00:11:53,360 --> 00:11:58,480
and especially subdependencies

00:11:55,360 --> 00:11:58,880
they degrade and sometimes break but we

00:11:58,480 --> 00:12:01,279
we

00:11:58,880 --> 00:12:02,880
have found a combination of dependencies

00:12:01,279 --> 00:12:06,079
that's actually working

00:12:02,880 --> 00:12:08,160
and we're using that in this library

00:12:06,079 --> 00:12:10,240
so to sum up the workflow we have

00:12:08,160 --> 00:12:12,399
achieved is this

00:12:10,240 --> 00:12:14,320
we have this simple single source code

00:12:12,399 --> 00:12:16,240
based solution

00:12:14,320 --> 00:12:18,240
we have this purpose-built github action

00:12:16,240 --> 00:12:21,519
that can be reused and we have already

00:12:18,240 --> 00:12:23,200
got an interest from two

00:12:21,519 --> 00:12:25,600
very popular angular libraries so we

00:12:23,200 --> 00:12:27,839
look forward to collaborating with them

00:12:25,600 --> 00:12:29,600
for them to use our github action we

00:12:27,839 --> 00:12:30,160
have a fast parallelized git of actions

00:12:29,600 --> 00:12:32,320
workflow

00:12:30,160 --> 00:12:33,839
and each combination of dependencies is

00:12:32,320 --> 00:12:36,079
run in isolation

00:12:33,839 --> 00:12:38,639
both both for our unit and integration

00:12:36,079 --> 00:12:42,240
test our end-to-end test and even

00:12:38,639 --> 00:12:43,600
the entrance for the angular schematics

00:12:42,240 --> 00:12:45,760
so working with price version

00:12:43,600 --> 00:12:48,079
compatibility is suddenly easy

00:12:45,760 --> 00:12:50,000
we can release features and patches

00:12:48,079 --> 00:12:51,680
across eight angular versions six

00:12:50,000 --> 00:12:53,040
typescript versions and two major

00:12:51,680 --> 00:12:56,320
node.js versions

00:12:53,040 --> 00:12:58,320
from a single source code base and

00:12:56,320 --> 00:13:00,399
every time we manage to use backwards

00:12:58,320 --> 00:13:02,079
incompatible api and syntax it's

00:13:00,399 --> 00:13:05,360
immediately detected

00:13:02,079 --> 00:13:05,920
well not locally but as soon as you pass

00:13:05,360 --> 00:13:08,240
it to

00:13:05,920 --> 00:13:09,760
you push it to the ci within six minutes

00:13:08,240 --> 00:13:11,040
you'll know whether it's compatible with

00:13:09,760 --> 00:13:13,200
all the different versions

00:13:11,040 --> 00:13:15,120
and if it's not you'll know exactly

00:13:13,200 --> 00:13:16,240
which combination of dependencies has

00:13:15,120 --> 00:13:18,399
the issue

00:13:16,240 --> 00:13:20,000
and you're even technically able to

00:13:18,399 --> 00:13:23,360
reproduce that using the github

00:13:20,000 --> 00:13:24,079
action locally so we're adding verified

00:13:23,360 --> 00:13:25,839
support for

00:13:24,079 --> 00:13:27,680
a new version of angle and typescript

00:13:25,839 --> 00:13:29,279
the node.js is usually as simple

00:13:27,680 --> 00:13:32,160
as adding a value to a list of

00:13:29,279 --> 00:13:35,120
parameters in our ci workflow

00:13:32,160 --> 00:13:37,920
and let me tell you this is an amazing

00:13:35,120 --> 00:13:39,600
workflow as a library maintainer

00:13:37,920 --> 00:13:41,839
thank you very much for listening this

00:13:39,600 --> 00:13:42,399
is my twitter handle and the url for the

00:13:41,839 --> 00:13:48,399
library

00:13:42,399 --> 00:13:50,480
lumberjack see you all later

00:13:48,399 --> 00:13:50,480

YouTube URL: https://www.youtube.com/watch?v=2KySyHU3fKo


