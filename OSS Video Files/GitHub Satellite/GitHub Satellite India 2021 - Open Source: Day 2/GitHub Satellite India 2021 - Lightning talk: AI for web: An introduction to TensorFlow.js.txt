Title: GitHub Satellite India 2021 - Lightning talk: AI for web: An introduction to TensorFlow.js
Publication date: 2021-03-28
Playlist: GitHub Satellite India 2021 - Open Source: Day 2
Description: 
	Presented by Shivay Lamba, Production Engineer @ Layer5

Conventional methods of uploading machine learning models for web applications can be a daunting task for web developers who specialize in Javascript. This is where Tensorflow.JS (TFJS) comes into the picture.

In this talk, you'll get an introduction to TensorFlow.jsâ€”and learn how this powerful tool helps create dynamic web apps using machine learning.


As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:03,040 --> 00:00:07,040
everyone who are watching

00:00:04,480 --> 00:00:08,160
uh this lighting talk i'm so i am

00:00:07,040 --> 00:00:10,719
currently a tensorflow

00:00:08,160 --> 00:00:11,280
js sig member and working group member

00:00:10,719 --> 00:00:13,519
as well

00:00:11,280 --> 00:00:14,880
and i was also previously a google uh

00:00:13,519 --> 00:00:16,240
tensorflow coding mentor

00:00:14,880 --> 00:00:17,920
and i'm currently also a production

00:00:16,240 --> 00:00:19,760
engineer at layer 5.

00:00:17,920 --> 00:00:21,359
so the talk of my uh lightning

00:00:19,760 --> 00:00:22,560
presentation is machine learning for the

00:00:21,359 --> 00:00:24,960
web and introduction

00:00:22,560 --> 00:00:25,599
to tensorflow.js so without wasting

00:00:24,960 --> 00:00:28,480
further ado

00:00:25,599 --> 00:00:30,160
let's get started the first question is

00:00:28,480 --> 00:00:32,480
you know people ask is why

00:00:30,160 --> 00:00:34,160
machine learning in javascript so for

00:00:32,480 --> 00:00:36,000
the one of the first reasons that

00:00:34,160 --> 00:00:37,360
we want to first introduce is what

00:00:36,000 --> 00:00:39,200
exactly is tensorflow

00:00:37,360 --> 00:00:40,879
so tensorflow is a free and open source

00:00:39,200 --> 00:00:42,559
library that is created by the team at

00:00:40,879 --> 00:00:43,760
google and is used for a lot of

00:00:42,559 --> 00:00:44,559
different kind of machine learning

00:00:43,760 --> 00:00:46,640
applications

00:00:44,559 --> 00:00:47,760
particularly in deep learning and neural

00:00:46,640 --> 00:00:49,920
networks and

00:00:47,760 --> 00:00:50,960
the question is that why introduce

00:00:49,920 --> 00:00:53,199
machine learning

00:00:50,960 --> 00:00:54,480
in javascript at the same time so

00:00:53,199 --> 00:00:56,239
javascript actually has

00:00:54,480 --> 00:00:58,000
a lot of different unique selling points

00:00:56,239 --> 00:01:00,160
when it comes to consideration

00:00:58,000 --> 00:01:01,199
of the type language because of its

00:01:00,160 --> 00:01:03,680
lower latency

00:01:01,199 --> 00:01:05,680
about user privacy and then also writing

00:01:03,680 --> 00:01:06,280
code in just one single language that is

00:01:05,680 --> 00:01:09,520
using

00:01:06,280 --> 00:01:11,520
tensorflow.js right so uh and

00:01:09,520 --> 00:01:13,119
again one of the biggest reasons is that

00:01:11,520 --> 00:01:15,759
we can use machine learning with

00:01:13,119 --> 00:01:18,320
javascript in any kind of an environment

00:01:15,759 --> 00:01:20,080
javascript is the world's most popular

00:01:18,320 --> 00:01:20,479
programming language and it finds its

00:01:20,080 --> 00:01:23,280
use

00:01:20,479 --> 00:01:24,400
in the browsers in the servers in the

00:01:23,280 --> 00:01:26,799
desktops in

00:01:24,400 --> 00:01:28,320
mobile computing devices and also in iot

00:01:26,799 --> 00:01:30,640
that is internet of things devices

00:01:28,320 --> 00:01:32,320
and to sort of note down a few examples

00:01:30,640 --> 00:01:32,799
of one of the most popular browsers that

00:01:32,320 --> 00:01:35,680
we use

00:01:32,799 --> 00:01:37,280
like chrome safari mozilla or uh running

00:01:35,680 --> 00:01:38,159
your code on the server side using

00:01:37,280 --> 00:01:40,159
node.js

00:01:38,159 --> 00:01:41,680
or having like a mobile based

00:01:40,159 --> 00:01:43,040
application uh built using a

00:01:41,680 --> 00:01:45,280
cross-platform platform like

00:01:43,040 --> 00:01:46,399
react native or having a desktop-based

00:01:45,280 --> 00:01:48,399
uh

00:01:46,399 --> 00:01:50,000
development environment like electron js

00:01:48,399 --> 00:01:52,240
or using node.js with

00:01:50,000 --> 00:01:53,680
raspberry pi to create really wonderful

00:01:52,240 --> 00:01:55,680
iot based devices

00:01:53,680 --> 00:01:57,200
javascript has support for all of these

00:01:55,680 --> 00:01:59,439
different spectrum of devices

00:01:57,200 --> 00:02:00,320
and you can introduce machine learning

00:01:59,439 --> 00:02:01,840
with javascript

00:02:00,320 --> 00:02:03,600
you know one of the biggest reasons why

00:02:01,840 --> 00:02:04,399
we want to do that is for creative

00:02:03,600 --> 00:02:07,680
professionals

00:02:04,399 --> 00:02:08,000
who are only learning javascript it can

00:02:07,680 --> 00:02:09,520
be very

00:02:08,000 --> 00:02:11,440
difficult for them to probably learn

00:02:09,520 --> 00:02:13,440
another type of language like python

00:02:11,440 --> 00:02:14,959
and introduce machine learning models in

00:02:13,440 --> 00:02:18,160
a cross-platform application

00:02:14,959 --> 00:02:19,200
or that uses both python and also uses

00:02:18,160 --> 00:02:21,120
javascript so

00:02:19,200 --> 00:02:22,640
because of the versatility of javascript

00:02:21,120 --> 00:02:24,239
it finds great use to

00:02:22,640 --> 00:02:26,239
include machine learning in all of these

00:02:24,239 --> 00:02:28,879
different kind of devices and

00:02:26,239 --> 00:02:30,160
developer experiences at the same time

00:02:28,879 --> 00:02:32,959
and the biggest

00:02:30,160 --> 00:02:33,920
fundamental of the tensorflow.js library

00:02:32,959 --> 00:02:36,239
is that we can

00:02:33,920 --> 00:02:36,959
either use the existing models that are

00:02:36,239 --> 00:02:39,200
pre-built

00:02:36,959 --> 00:02:41,280
or we can create our own or we can also

00:02:39,200 --> 00:02:44,319
use the concept of transfer learning

00:02:41,280 --> 00:02:46,879
to retrain our existing uh data

00:02:44,319 --> 00:02:47,440
sets with these models at the same time

00:02:46,879 --> 00:02:49,760
and

00:02:47,440 --> 00:02:51,360
coming on to uh you know because of the

00:02:49,760 --> 00:02:54,160
versatility of javascript

00:02:51,360 --> 00:02:55,680
we can use uh javascript and machine

00:02:54,160 --> 00:02:56,160
learning in all of the other different

00:02:55,680 --> 00:02:58,480
type

00:02:56,160 --> 00:03:00,000
or type of applications that can be used

00:02:58,480 --> 00:03:01,280
with javascript so that includes things

00:03:00,000 --> 00:03:02,959
like augmented reality

00:03:01,280 --> 00:03:04,319
or let's say gesture based interactions

00:03:02,959 --> 00:03:06,000
or sound recognition

00:03:04,319 --> 00:03:07,760
and all of these different types of

00:03:06,000 --> 00:03:10,879
applications that we build

00:03:07,760 --> 00:03:12,560
in uh the web platforms can be coupled

00:03:10,879 --> 00:03:13,760
with tensorflow.js to create machine

00:03:12,560 --> 00:03:16,480
learning experiences

00:03:13,760 --> 00:03:17,840
that are going to blow your mind with

00:03:16,480 --> 00:03:18,560
some of the examples that we'll be

00:03:17,840 --> 00:03:20,800
showing you

00:03:18,560 --> 00:03:22,239
so the first category of uh the such

00:03:20,800 --> 00:03:22,800
kind of models are the pre-trained

00:03:22,239 --> 00:03:24,480
models

00:03:22,800 --> 00:03:26,400
now these are completely easy to use

00:03:24,480 --> 00:03:28,480
javascript classes that have been built

00:03:26,400 --> 00:03:30,560
and are completely open sourced are can

00:03:28,480 --> 00:03:33,040
be used with a single line of code

00:03:30,560 --> 00:03:34,560
uh by embedding that to your javascript

00:03:33,040 --> 00:03:36,480
based project at the same time

00:03:34,560 --> 00:03:37,599
and there are many situations when you

00:03:36,480 --> 00:03:40,799
might not need

00:03:37,599 --> 00:03:42,799
like to use uh or create like a

00:03:40,799 --> 00:03:44,720
specific model and you can directly just

00:03:42,799 --> 00:03:46,319
use some of the previous models for

00:03:44,720 --> 00:03:48,239
small applications that we are trying to

00:03:46,319 --> 00:03:50,000
build and a few examples of

00:03:48,239 --> 00:03:51,840
those include things like image

00:03:50,000 --> 00:03:53,519
classification object detection body

00:03:51,840 --> 00:03:55,760
segmentation pose estimation

00:03:53,519 --> 00:03:56,720
and also things related to nlp like text

00:03:55,760 --> 00:03:58,799
toxicity

00:03:56,720 --> 00:04:01,280
or for example let's say speech commands

00:03:58,799 --> 00:04:02,799
all of those come in handy and to visit

00:04:01,280 --> 00:04:04,560
these models you can simply go to

00:04:02,799 --> 00:04:06,799
tensorflow.org

00:04:04,560 --> 00:04:07,599
js slash models and you'll find the

00:04:06,799 --> 00:04:09,120
github links

00:04:07,599 --> 00:04:11,439
for all of these different models at the

00:04:09,120 --> 00:04:13,680
same time now

00:04:11,439 --> 00:04:15,439
a few examples of these include for

00:04:13,680 --> 00:04:17,040
example object recognition that is one

00:04:15,439 --> 00:04:19,040
of the most fundamental

00:04:17,040 --> 00:04:21,280
deep learning or machine learning based

00:04:19,040 --> 00:04:23,520
uh projects that can be taken up and

00:04:21,280 --> 00:04:24,960
focused which is a really popular uh

00:04:23,520 --> 00:04:27,840
object uh recognition

00:04:24,960 --> 00:04:30,000
model uh also available in tensorflow.js

00:04:27,840 --> 00:04:30,560
and it can be trained up to 90 different

00:04:30,000 --> 00:04:33,360
classes

00:04:30,560 --> 00:04:35,120
so as you can see in this uh picture

00:04:33,360 --> 00:04:37,199
that uh we have a

00:04:35,120 --> 00:04:38,560
picture of two dogs and it can actually

00:04:37,199 --> 00:04:41,040
create bounding boxes

00:04:38,560 --> 00:04:42,160
on these dogs images of these dogs and

00:04:41,040 --> 00:04:44,639
give a really great

00:04:42,160 --> 00:04:45,360
confidence at the same time to uh the

00:04:44,639 --> 00:04:47,840
pictures

00:04:45,360 --> 00:04:48,720
so it's really great in doing it quick

00:04:47,840 --> 00:04:50,880
and also

00:04:48,720 --> 00:04:52,320
is highly accurate at the same time now

00:04:50,880 --> 00:04:54,400
there's another example of

00:04:52,320 --> 00:04:56,000
a face mesh now face mesh is a model

00:04:54,400 --> 00:04:58,360
that is just three megabytes

00:04:56,000 --> 00:05:01,280
in size and it actually recognizes over

00:04:58,360 --> 00:05:03,440
468 different landmarks on your face

00:05:01,280 --> 00:05:04,800
and uh again as you can see that it's

00:05:03,440 --> 00:05:07,840
really popular and

00:05:04,800 --> 00:05:09,840
being used right now in production in uh

00:05:07,840 --> 00:05:10,880
in places like l'oreal which you can see

00:05:09,840 --> 00:05:12,960
on the right-hand side

00:05:10,880 --> 00:05:13,919
uh being used in uh production

00:05:12,960 --> 00:05:16,000
environments and

00:05:13,919 --> 00:05:17,919
uh being actually used in products that

00:05:16,000 --> 00:05:20,080
are ready to go and ready to ship

00:05:17,919 --> 00:05:22,000
as and when required then there's

00:05:20,080 --> 00:05:24,479
another uh model that we have uh

00:05:22,000 --> 00:05:26,320
that basically is the body segmentation

00:05:24,479 --> 00:05:27,440
that can basically distinguish 24

00:05:26,320 --> 00:05:30,080
different body areas

00:05:27,440 --> 00:05:32,320
in human bodies and it can also do that

00:05:30,080 --> 00:05:33,199
in real time and also across multiple

00:05:32,320 --> 00:05:35,039
different bodies

00:05:33,199 --> 00:05:36,880
so there's this need it doesn't need to

00:05:35,039 --> 00:05:37,360
be just one single body as you can see

00:05:36,880 --> 00:05:38,639
in this

00:05:37,360 --> 00:05:40,400
video there are three different

00:05:38,639 --> 00:05:42,400
individuals whose bodies are being

00:05:40,400 --> 00:05:44,880
segmented as compared to the background

00:05:42,400 --> 00:05:45,680
in real time and again without any

00:05:44,880 --> 00:05:48,800
performance

00:05:45,680 --> 00:05:49,600
overheads at all now with a bit of

00:05:48,800 --> 00:05:51,199
creativity

00:05:49,600 --> 00:05:53,520
we can emulate a lot of different

00:05:51,199 --> 00:05:54,160
superpowers using tensorflow.js at the

00:05:53,520 --> 00:05:56,960
same time

00:05:54,160 --> 00:05:57,600
and just to sort of show you examples of

00:05:56,960 --> 00:06:00,240
cross

00:05:57,600 --> 00:06:01,520
uh development applications over here

00:06:00,240 --> 00:06:03,600
this a person

00:06:01,520 --> 00:06:05,120
who's from a community a tensorflow js

00:06:03,600 --> 00:06:07,520
community in the united states

00:06:05,120 --> 00:06:08,160
has created this amazing laser

00:06:07,520 --> 00:06:10,080
application

00:06:08,160 --> 00:06:11,280
using webgl shaders and with

00:06:10,080 --> 00:06:13,520
tensorflow.js

00:06:11,280 --> 00:06:14,720
and these are just some of the examples

00:06:13,520 --> 00:06:16,800
that you know we can think of

00:06:14,720 --> 00:06:18,160
to create some kind of unique creative

00:06:16,800 --> 00:06:20,080
applications then

00:06:18,160 --> 00:06:21,919
there is a jason mays who is a

00:06:20,080 --> 00:06:22,560
tensorflow.js developer advocate at

00:06:21,919 --> 00:06:25,919
google

00:06:22,560 --> 00:06:26,400
is using a combination of webrtc a frame

00:06:25,919 --> 00:06:28,720
that is

00:06:26,400 --> 00:06:29,600
uh augmented reality 3js and also

00:06:28,720 --> 00:06:32,000
tensorflow.js

00:06:29,600 --> 00:06:33,840
to teleport himself to another

00:06:32,000 --> 00:06:34,960
environment by using a combination of

00:06:33,840 --> 00:06:37,600
all of these different

00:06:34,960 --> 00:06:38,560
three uh different uh technologies and

00:06:37,600 --> 00:06:40,319
combining them very

00:06:38,560 --> 00:06:42,080
seamlessly to create really fun

00:06:40,319 --> 00:06:43,600
applications now there is another one

00:06:42,080 --> 00:06:46,319
that was created by jason

00:06:43,600 --> 00:06:48,400
was a real-time clothing size estimation

00:06:46,319 --> 00:06:51,199
that uses the body segmentation model

00:06:48,400 --> 00:06:52,400
and can provide you the details of your

00:06:51,199 --> 00:06:55,440
body size by just

00:06:52,400 --> 00:06:57,440
scanning your entire body and within

00:06:55,440 --> 00:06:58,800
the next 10-15 minutes it can provide

00:06:57,440 --> 00:07:02,160
you a very quick

00:06:58,800 --> 00:07:04,479
uh body size estimation for your

00:07:02,160 --> 00:07:05,280
so that you this could be used probably

00:07:04,479 --> 00:07:08,160
uh in

00:07:05,280 --> 00:07:08,960
uh sites like amazon or other kind of uh

00:07:08,160 --> 00:07:10,639
real world

00:07:08,960 --> 00:07:12,000
applications or when it comes to any

00:07:10,639 --> 00:07:14,160
kind of estimation that needs

00:07:12,000 --> 00:07:15,280
so not just related to the closing size

00:07:14,160 --> 00:07:17,759
at the same time

00:07:15,280 --> 00:07:19,440
now the idea is that we can combine

00:07:17,759 --> 00:07:22,080
different types of tech

00:07:19,440 --> 00:07:23,759
with uh the tensorflow.js and again this

00:07:22,080 --> 00:07:26,240
shows a really great example

00:07:23,759 --> 00:07:26,960
where basically we are using web xr that

00:07:26,240 --> 00:07:28,639
is uh

00:07:26,960 --> 00:07:30,160
the mixed reality and we are also using

00:07:28,639 --> 00:07:33,280
webgl to create this

00:07:30,160 --> 00:07:35,120
3d uh rendering of an augmented reality

00:07:33,280 --> 00:07:37,039
uh application where for example which

00:07:35,120 --> 00:07:39,520
sort of scans an image and creates

00:07:37,039 --> 00:07:40,319
a real-world model of an augmented

00:07:39,520 --> 00:07:42,960
reality model

00:07:40,319 --> 00:07:44,960
of this uh statue right so the idea is

00:07:42,960 --> 00:07:45,919
that we can combine different types of

00:07:44,960 --> 00:07:48,560
technologies

00:07:45,919 --> 00:07:49,759
uh that are supported and web very

00:07:48,560 --> 00:07:51,759
seamlessly and

00:07:49,759 --> 00:07:53,360
again the integration is usually very

00:07:51,759 --> 00:07:56,000
simple at the same time

00:07:53,360 --> 00:07:57,680
now the second part is using transfer

00:07:56,000 --> 00:07:59,680
learning so basically retraining

00:07:57,680 --> 00:08:01,360
some of the existing models that we have

00:07:59,680 --> 00:08:02,240
to work with your own data to sort of

00:08:01,360 --> 00:08:04,720
customize

00:08:02,240 --> 00:08:06,560
those uh models to your own data to

00:08:04,720 --> 00:08:08,160
provide you better accuracy and better

00:08:06,560 --> 00:08:09,919
functionality at the same time so

00:08:08,160 --> 00:08:11,039
transfer learning is essentially taking

00:08:09,919 --> 00:08:13,840
an existing model

00:08:11,039 --> 00:08:15,280
and use it to basically uh apply to

00:08:13,840 --> 00:08:17,360
similar kind of problems or

00:08:15,280 --> 00:08:18,960
in some kind of domain such as probably

00:08:17,360 --> 00:08:21,919
like you know like say recognizing

00:08:18,960 --> 00:08:23,440
a cat instead of a dog right so again uh

00:08:21,919 --> 00:08:24,960
there are two different ways in which we

00:08:23,440 --> 00:08:25,440
can use the transfer learning one of the

00:08:24,960 --> 00:08:27,599
most

00:08:25,440 --> 00:08:29,280
easiest ones is teachable machines so

00:08:27,599 --> 00:08:31,440
basically this is super easy

00:08:29,280 --> 00:08:33,360
way to actually use transfer learning

00:08:31,440 --> 00:08:34,399
and it's a completely web-based platform

00:08:33,360 --> 00:08:36,959
that allows you to

00:08:34,399 --> 00:08:38,159
either do things like object recognition

00:08:36,959 --> 00:08:41,440
post estimations

00:08:38,159 --> 00:08:42,159
or things on audio so it's very simple

00:08:41,440 --> 00:08:45,279
uh you just

00:08:42,159 --> 00:08:47,600
take an input you provide uh classes and

00:08:45,279 --> 00:08:48,959
the examples of those using video or

00:08:47,600 --> 00:08:51,279
audio or images

00:08:48,959 --> 00:08:52,160
and then you simply just put it on train

00:08:51,279 --> 00:08:55,279
and as you can see

00:08:52,160 --> 00:08:55,680
that it provides you uh in real time uh

00:08:55,279 --> 00:08:58,320
the

00:08:55,680 --> 00:08:59,040
uh predictions and that predictions can

00:08:58,320 --> 00:09:00,880
also

00:08:59,040 --> 00:09:02,399
be exported and can be used with your

00:09:00,880 --> 00:09:05,200
web application either

00:09:02,399 --> 00:09:05,680
using uh the javascript models or using

00:09:05,200 --> 00:09:07,680
uh

00:09:05,680 --> 00:09:09,680
let's say tensorflow lite and any other

00:09:07,680 --> 00:09:10,880
kind of different tensorflow embeddings

00:09:09,680 --> 00:09:13,760
that we can think of

00:09:10,880 --> 00:09:15,440
and if your data is in gigabytes or if

00:09:13,760 --> 00:09:17,600
you want to create a production ready

00:09:15,440 --> 00:09:19,279
model we can also use the cloud automl

00:09:17,600 --> 00:09:20,160
that basically lets you train custom

00:09:19,279 --> 00:09:22,800
engine models

00:09:20,160 --> 00:09:23,920
and if you have data in more than

00:09:22,800 --> 00:09:26,160
gigabytes in size

00:09:23,920 --> 00:09:28,320
it can simply just use this and we can

00:09:26,160 --> 00:09:30,240
deploy that directly to tensorflow.js

00:09:28,320 --> 00:09:31,839
once we deploy it it creates basically

00:09:30,240 --> 00:09:35,760
the small.json file

00:09:31,839 --> 00:09:38,480
that essentially has uh the entire uh

00:09:35,760 --> 00:09:38,800
model of how it works and we can use

00:09:38,480 --> 00:09:40,800
that

00:09:38,800 --> 00:09:41,920
simply with our application at the same

00:09:40,800 --> 00:09:43,920
time and

00:09:41,920 --> 00:09:45,360
this is a very small example of a code

00:09:43,920 --> 00:09:47,360
so in the first two lines

00:09:45,360 --> 00:09:49,600
you see is what we have imported the

00:09:47,360 --> 00:09:50,560
tensorflow.js library and also the auto

00:09:49,600 --> 00:09:52,720
ml library

00:09:50,560 --> 00:09:53,839
uh in this third line you see we have

00:09:52,720 --> 00:09:56,399
simply just uh

00:09:53,839 --> 00:09:57,040
taken an image of a daisy that is a

00:09:56,399 --> 00:09:59,279
flower

00:09:57,040 --> 00:10:00,880
and we have just given it the id of

00:09:59,279 --> 00:10:03,040
daisy for the image

00:10:00,880 --> 00:10:05,279
and then the script that you see is not

00:10:03,040 --> 00:10:06,000
more than five lines in length and what

00:10:05,279 --> 00:10:08,160
we do in this

00:10:06,000 --> 00:10:09,600
uh what we do in this is that we have

00:10:08,160 --> 00:10:11,279
created an async function

00:10:09,600 --> 00:10:12,880
because uh the machine learning models

00:10:11,279 --> 00:10:14,320
take some time to load so

00:10:12,880 --> 00:10:16,240
we would want to make the predictions

00:10:14,320 --> 00:10:18,240
only after the model has been loaded

00:10:16,240 --> 00:10:20,000
so what we do is that we use an async

00:10:18,240 --> 00:10:20,640
function or an asynchronous function in

00:10:20,000 --> 00:10:23,440
javascript

00:10:20,640 --> 00:10:24,160
to first load our image classification

00:10:23,440 --> 00:10:26,560
model

00:10:24,160 --> 00:10:27,600
from our model.json file that has the

00:10:26,560 --> 00:10:29,279
characteristics or

00:10:27,600 --> 00:10:31,360
basically the dependencies of our

00:10:29,279 --> 00:10:31,760
machine learning model and then we just

00:10:31,360 --> 00:10:33,920
uh

00:10:31,760 --> 00:10:34,880
use the const image to get the document

00:10:33,920 --> 00:10:37,120
by id for

00:10:34,880 --> 00:10:38,079
our flower so we can get that particular

00:10:37,120 --> 00:10:40,000
image id

00:10:38,079 --> 00:10:42,079
and then what we do is that we simply

00:10:40,000 --> 00:10:43,839
run the predictions uh using

00:10:42,079 --> 00:10:45,519
this and we use the classify to

00:10:43,839 --> 00:10:47,440
basically classify okay what type

00:10:45,519 --> 00:10:48,800
of flower is it so it will basically

00:10:47,440 --> 00:10:51,279
tell you what is

00:10:48,800 --> 00:10:51,920
the classification or the label of the

00:10:51,279 --> 00:10:54,640
image

00:10:51,920 --> 00:10:56,079
right and the probably the last one and

00:10:54,640 --> 00:10:58,560
the most powerful one is

00:10:56,079 --> 00:10:59,760
writing your own code intensive projects

00:10:58,560 --> 00:11:01,200
so tensorflow

00:10:59,760 --> 00:11:03,680
basically provides you two different

00:11:01,200 --> 00:11:04,160
types of apis one is the layers api that

00:11:03,680 --> 00:11:06,560
is

00:11:04,160 --> 00:11:07,600
very similar to how keras works on top

00:11:06,560 --> 00:11:09,440
of tensorflow

00:11:07,600 --> 00:11:12,000
and that allows you to use some high

00:11:09,440 --> 00:11:14,000
level functions but we also have the ops

00:11:12,000 --> 00:11:16,079
api or that is the lower level api

00:11:14,000 --> 00:11:17,519
where you can also you know change the

00:11:16,079 --> 00:11:20,160
mathematical functions like

00:11:17,519 --> 00:11:22,000
the linear algebra uh functions in your

00:11:20,160 --> 00:11:23,839
code that provides you a lot more

00:11:22,000 --> 00:11:26,240
flexibility and functionality when it

00:11:23,839 --> 00:11:28,399
comes to changing or writing your own

00:11:26,240 --> 00:11:29,600
code now this sort of gives you the

00:11:28,399 --> 00:11:31,839
architecture of

00:11:29,600 --> 00:11:33,680
what we have discussed so far so the top

00:11:31,839 --> 00:11:35,519
level is the pre-built models

00:11:33,680 --> 00:11:37,440
the next one is the layers api that's

00:11:35,519 --> 00:11:39,760
similar to how keras has been built

00:11:37,440 --> 00:11:41,519
and finally we have at the most low

00:11:39,760 --> 00:11:43,279
level the ops api

00:11:41,519 --> 00:11:44,640
and this basically allows it to run

00:11:43,279 --> 00:11:46,720
either on the client side

00:11:44,640 --> 00:11:48,399
or on the server side or the client side

00:11:46,720 --> 00:11:49,200
with basically is the interaction with

00:11:48,399 --> 00:11:51,920
the browser

00:11:49,200 --> 00:11:54,000
we can have the support for the cpu or

00:11:51,920 --> 00:11:55,519
webgl that is web accelerated graphics

00:11:54,000 --> 00:11:57,920
or we have web assembly

00:11:55,519 --> 00:11:59,200
that used as the backend for powering

00:11:57,920 --> 00:12:00,000
the machine learning models in the

00:11:59,200 --> 00:12:01,680
client side

00:12:00,000 --> 00:12:03,360
and we also have the server side that

00:12:01,680 --> 00:12:05,120
basically runs in node.js

00:12:03,360 --> 00:12:07,440
that is the tensorflow cpu or the

00:12:05,120 --> 00:12:08,480
tensorflow gpu basically using the cuda

00:12:07,440 --> 00:12:10,639
cores and

00:12:08,480 --> 00:12:11,839
the uh same power that python based

00:12:10,639 --> 00:12:14,959
models can be using

00:12:11,839 --> 00:12:16,639
at the same time and as you can see that

00:12:14,959 --> 00:12:18,320
we can either use some of the pre-built

00:12:16,639 --> 00:12:20,399
models that are there uh in

00:12:18,320 --> 00:12:21,920
tensorflow so if you have a python based

00:12:20,399 --> 00:12:22,399
model we can use the tensorflow saved

00:12:21,920 --> 00:12:24,800
model

00:12:22,399 --> 00:12:26,240
to be directly imported in the node.js

00:12:24,800 --> 00:12:28,480
in the server side or we can use the

00:12:26,240 --> 00:12:29,680
tfgs converter that basically converts

00:12:28,480 --> 00:12:31,920
a machine learning model written in

00:12:29,680 --> 00:12:34,560
python to a one written in

00:12:31,920 --> 00:12:35,839
uh javascript and again as you can see

00:12:34,560 --> 00:12:37,279
from the model that uh

00:12:35,839 --> 00:12:39,200
from the model inference basically this

00:12:37,279 --> 00:12:40,560
is a mobile net model that we have

00:12:39,200 --> 00:12:42,160
and as you can see the difference

00:12:40,560 --> 00:12:43,040
between the performance of python based

00:12:42,160 --> 00:12:45,120
model and

00:12:43,040 --> 00:12:47,200
like a javascript based model is very

00:12:45,120 --> 00:12:47,760
minuscule and the difference is not that

00:12:47,200 --> 00:12:50,240
much

00:12:47,760 --> 00:12:52,000
right and uh again this shows another

00:12:50,240 --> 00:12:54,880
example of an uh

00:12:52,000 --> 00:12:56,399
of like um an np based model that is the

00:12:54,880 --> 00:13:00,000
distilbert model and

00:12:56,399 --> 00:13:01,440
as you can see that this is actually

00:13:00,000 --> 00:13:02,560
better as compared to the one that we

00:13:01,440 --> 00:13:04,399
see in python

00:13:02,560 --> 00:13:06,000
now there are also five different you

00:13:04,399 --> 00:13:07,760
know super uh

00:13:06,000 --> 00:13:09,760
powers that you get with the client side

00:13:07,760 --> 00:13:11,760
so one of the biggest one is privacy

00:13:09,760 --> 00:13:13,760
you get lower latency because we're not

00:13:11,760 --> 00:13:14,320
having a dedicated server we get a lower

00:13:13,760 --> 00:13:16,399
cost

00:13:14,320 --> 00:13:17,440
and again interactivity at the same time

00:13:16,399 --> 00:13:19,279
and also we

00:13:17,440 --> 00:13:21,440
if you're using it on the server side

00:13:19,279 --> 00:13:23,839
then you basically get the power of

00:13:21,440 --> 00:13:24,639
javascript just in time compiler or we

00:13:23,839 --> 00:13:26,399
can also just

00:13:24,639 --> 00:13:28,000
write in just one particular language

00:13:26,399 --> 00:13:29,760
and of course we can run

00:13:28,000 --> 00:13:31,120
models that are much more powerful as

00:13:29,760 --> 00:13:33,920
compared to the client side because

00:13:31,120 --> 00:13:34,480
of the dedicated cpu and gpu power that

00:13:33,920 --> 00:13:37,279
comes

00:13:34,480 --> 00:13:37,600
with uh node.js so these are some of the

00:13:37,279 --> 00:13:39,440
uh

00:13:37,600 --> 00:13:40,800
server-side benefits at the same time

00:13:39,440 --> 00:13:42,480
now just to

00:13:40,800 --> 00:13:43,600
share some of the resources uh basically

00:13:42,480 --> 00:13:45,760
you can visit all of these different

00:13:43,600 --> 00:13:49,120
links the website tensorflow.org

00:13:45,760 --> 00:13:51,120
js and the models on testfloat.org

00:13:49,120 --> 00:13:52,720
models and again you can visit all these

00:13:51,120 --> 00:13:54,320
different links to get started with

00:13:52,720 --> 00:13:56,160
tensorflow.js at the same time

00:13:54,320 --> 00:13:58,079
and uh you can join the community by

00:13:56,160 --> 00:13:59,360
using a hashtag made with this and you

00:13:58,079 --> 00:14:02,240
can follow this on twitter

00:13:59,360 --> 00:14:02,720
and on uh links like linkedin and again

00:14:02,240 --> 00:14:04,720
uh

00:14:02,720 --> 00:14:06,320
thank you so much for uh staying in

00:14:04,720 --> 00:14:07,600
touch and you can follow me on these

00:14:06,320 --> 00:14:10,320
links to get started

00:14:07,600 --> 00:14:13,600
again thank you so much for uh seeing

00:14:10,320 --> 00:14:13,600
and i hope that you like the

00:14:14,839 --> 00:14:17,839

YouTube URL: https://www.youtube.com/watch?v=RmcMORdFMQA


