Title: TODO to issue: Managing TODO comments with GitHub Actions - GitHub Satellite 2020
Publication date: 2020-05-06
Playlist: GitHub Satellite 2020 - Lightning Talks (GitHub Actions)
Description: 
	Presented by Alastair Mooney

GitHub Satellite: A community connected by code

On May 6th, we threw a free virtual event featuring developers working together on the worldâ€™s software, announcements from the GitHub team, and inspiring performances by artists who code.

More information: https://githubsatellite.com
Schedule: https://githubsatellite.com/schedule/
Captions: 
	00:00:00,030 --> 00:00:03,810
hi my name is Alistair I'm gonna talk

00:00:02,159 --> 00:00:06,180
about the action that I built for the

00:00:03,810 --> 00:00:08,760
github hackathon the action that I built

00:00:06,180 --> 00:00:10,469
is called to do to issue and it does

00:00:08,760 --> 00:00:12,660
what it says on the tin moment it

00:00:10,469 --> 00:00:15,360
converts newly added to do comments in

00:00:12,660 --> 00:00:18,510
your code to github issues when you push

00:00:15,360 --> 00:00:19,890
a commit so to do Tzar a convenient way

00:00:18,510 --> 00:00:22,080
to write down tasks and things that you

00:00:19,890 --> 00:00:23,430
need to look at as your code in but i

00:00:22,080 --> 00:00:25,740
found that they can get a bit unwieldy

00:00:23,430 --> 00:00:29,279
when they start to build up and it can

00:00:25,740 --> 00:00:31,349
sometimes get isolated in your ide not

00:00:29,279 --> 00:00:33,420
visible to others so i really just

00:00:31,349 --> 00:00:35,870
wanted to try and come up with way way

00:00:33,420 --> 00:00:38,910
of tracking and managing them better of

00:00:35,870 --> 00:00:41,820
avoiding unnecessary duplication

00:00:38,910 --> 00:00:43,670
re-entering things again and generally

00:00:41,820 --> 00:00:46,559
just trying to improve the visibility of

00:00:43,670 --> 00:00:48,739
the issues that we need to look at not

00:00:46,559 --> 00:00:51,360
just for me but for any collaborators I

00:00:48,739 --> 00:00:53,610
saw the hackathon advertised on Twitter

00:00:51,360 --> 00:00:56,160
and how to taken part in one before a

00:00:53,610 --> 00:00:58,500
fire sounded like fun I haven't use

00:00:56,160 --> 00:01:00,239
github action before either and after

00:00:58,500 --> 00:01:02,370
looking into it a little bit it seemed

00:01:00,239 --> 00:01:04,140
like a way of enables to develop quite

00:01:02,370 --> 00:01:06,510
rapid solution to the problem that I've

00:01:04,140 --> 00:01:08,850
been thinking about and when I added in

00:01:06,510 --> 00:01:11,130
github issues to the mix it all just

00:01:08,850 --> 00:01:14,250
seemed to click together make sense so I

00:01:11,130 --> 00:01:16,020
decided to build something in terms of

00:01:14,250 --> 00:01:18,600
how the action works the first line of

00:01:16,020 --> 00:01:20,759
the comment is set as the issue title

00:01:18,600 --> 00:01:23,759
and any subsequent lines are added to

00:01:20,759 --> 00:01:27,030
the body of the issue it also attaches a

00:01:23,759 --> 00:01:29,220
code snippet containing the to-do tries

00:01:27,030 --> 00:01:32,970
to highlight it correctly based on the

00:01:29,220 --> 00:01:35,840
language and it also attaches a link to

00:01:32,970 --> 00:01:38,280
the line in the file where the to do is

00:01:35,840 --> 00:01:40,829
finally if you remove it to do comment

00:01:38,280 --> 00:01:43,680
and push a commit it'll try and close

00:01:40,829 --> 00:01:47,310
the Associated issue and post a link to

00:01:43,680 --> 00:01:49,229
the commit where the issue was closed if

00:01:47,310 --> 00:01:51,630
you don't use the key word to do in your

00:01:49,229 --> 00:01:52,979
code Ian have I did the option to change

00:01:51,630 --> 00:01:55,079
that to something else in the workflow

00:01:52,979 --> 00:01:57,030
file I do quite a bit of Python

00:01:55,079 --> 00:01:59,310
development and use the keyword to do

00:01:57,030 --> 00:02:01,649
quite a lot but if you use another

00:01:59,310 --> 00:02:04,770
language there's the option to change

00:02:01,649 --> 00:02:07,619
that so the action can work for you in

00:02:04,770 --> 00:02:09,629
terms of how its benefited me I can now

00:02:07,619 --> 00:02:11,700
see areas of my code a lot better they

00:02:09,629 --> 00:02:13,620
need attention it's given me generally a

00:02:11,700 --> 00:02:15,599
better overview of things and

00:02:13,620 --> 00:02:18,000
that's a visibility of things that I

00:02:15,599 --> 00:02:20,160
need to be looking at get the bass you

00:02:18,000 --> 00:02:22,920
get up issues is a great way of doing

00:02:20,160 --> 00:02:25,769
that it's it's tried and tested and it

00:02:22,920 --> 00:02:27,239
just seems to fit this quite well it's

00:02:25,769 --> 00:02:29,670
still early days but I'm hoping that

00:02:27,239 --> 00:02:32,250
it's gonna streamline my workflow quite

00:02:29,670 --> 00:02:35,099
a bit and just generally make my life

00:02:32,250 --> 00:02:37,069
easier really in terms of the future of

00:02:35,099 --> 00:02:40,170
the action I've already changed the

00:02:37,069 --> 00:02:42,360
action quite a bit since I first started

00:02:40,170 --> 00:02:44,489
working on it he's gone through a few

00:02:42,360 --> 00:02:45,720
iterations and I've improved it based on

00:02:44,489 --> 00:02:48,120
suggestions from other users

00:02:45,720 --> 00:02:50,489
I didn't really expect it to get as much

00:02:48,120 --> 00:02:52,709
attention as it has but focus keeps just

00:02:50,489 --> 00:02:54,989
in improvement I'll try my best to look

00:02:52,709 --> 00:02:56,370
at them note the very least the action

00:02:54,989 --> 00:02:58,349
is still a pre-production release so I'm

00:02:56,370 --> 00:03:00,870
hoping to put out a production ready

00:02:58,349 --> 00:03:03,390
version soon after a bit more testing

00:03:00,870 --> 00:03:06,349
but that's my action to do to issue

00:03:03,390 --> 00:03:06,349

YouTube URL: https://www.youtube.com/watch?v=LNLSka7bpbM


