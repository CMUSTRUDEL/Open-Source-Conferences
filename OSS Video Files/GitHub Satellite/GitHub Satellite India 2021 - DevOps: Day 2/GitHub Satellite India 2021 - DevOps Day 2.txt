Title: GitHub Satellite India 2021 - DevOps Day 2
Publication date: 2021-03-27
Playlist: GitHub Satellite India 2021 - DevOps: Day 2
Description: 
	A community connected by code. March 26-27, India

Join us virtually for two days dedicated to celebrating India's developer community. Expect announcements from GitHub leaders, hands-on workshops, and inspiring performances by artists who code.

Increase efficiency, automate workflows, and create secure software all at once.

https://githubsatellite.com
Captions: 
	00:00:14,920 --> 00:00:17,920
so

00:03:30,840 --> 00:03:33,840
so

00:03:44,840 --> 00:03:47,840
so

00:03:58,840 --> 00:04:01,840
so

00:07:56,840 --> 00:07:59,840
so

00:08:52,839 --> 00:08:55,839
so

00:09:06,839 --> 00:09:09,839
so

00:09:34,839 --> 00:09:37,839
so

00:09:48,839 --> 00:09:51,839
so

00:10:02,839 --> 00:10:05,839
do

00:12:36,839 --> 00:12:39,839
so

00:15:38,839 --> 00:15:41,839
so

00:24:58,840 --> 00:25:01,840
so

00:25:40,840 --> 00:25:43,840
so

00:26:22,840 --> 00:26:25,840
so

00:27:18,840 --> 00:27:21,840
so

00:27:46,840 --> 00:27:49,840
so

00:28:15,120 --> 00:28:17,840
this

00:29:10,840 --> 00:29:13,840
me

00:29:24,840 --> 00:29:27,840
so

00:29:38,840 --> 00:29:41,840
so

00:31:58,840 --> 00:32:01,840
so

00:35:42,839 --> 00:35:45,839
do

00:35:56,839 --> 00:35:59,839
do

00:36:52,240 --> 00:36:55,599
hello and welcome to day two of

00:36:54,320 --> 00:36:57,599
satellite india

00:36:55,599 --> 00:36:58,720
i'm shonku and i want to thank you for

00:36:57,599 --> 00:37:00,320
joining us today

00:36:58,720 --> 00:37:02,160
we've got another packed day of

00:37:00,320 --> 00:37:03,680
programming and to start off

00:37:02,160 --> 00:37:05,839
i want to take you through a tour of

00:37:03,680 --> 00:37:07,040
github's products to show off some of

00:37:05,839 --> 00:37:08,640
our latest features

00:37:07,040 --> 00:37:10,720
and to show you how you can use them

00:37:08,640 --> 00:37:11,839
together to build software across the

00:37:10,720 --> 00:37:13,680
world

00:37:11,839 --> 00:37:15,520
now yesterday erica was here to

00:37:13,680 --> 00:37:16,240
celebrate all the amazing things that

00:37:15,520 --> 00:37:19,040
are going on

00:37:16,240 --> 00:37:20,839
in the github community in india growth

00:37:19,040 --> 00:37:24,720
of the community here has been

00:37:20,839 --> 00:37:27,040
incredible in the last year 1.8 million

00:37:24,720 --> 00:37:28,800
developers have joined github from india

00:37:27,040 --> 00:37:31,520
and over a million developers have

00:37:28,800 --> 00:37:34,320
created their first repo on github

00:37:31,520 --> 00:37:35,440
india has now become the fastest growing

00:37:34,320 --> 00:37:37,200
country in the world

00:37:35,440 --> 00:37:39,599
in terms of developers contributing to

00:37:37,200 --> 00:37:41,839
open source that is amazing

00:37:39,599 --> 00:37:43,760
erica has also announced a new set of

00:37:41,839 --> 00:37:45,040
github programs in india that we're very

00:37:43,760 --> 00:37:46,800
excited about

00:37:45,040 --> 00:37:48,720
the github grants for open source

00:37:46,800 --> 00:37:51,040
program which will provide

00:37:48,720 --> 00:37:52,160
10 million rupees of grants to open

00:37:51,040 --> 00:37:54,480
source projects

00:37:52,160 --> 00:37:55,839
based here in india the github

00:37:54,480 --> 00:37:57,359
accelerate program

00:37:55,839 --> 00:37:59,680
which will partner with startup

00:37:57,359 --> 00:38:01,680
accelerators and the indian government

00:37:59,680 --> 00:38:03,839
to expand support to over a thousand

00:38:01,680 --> 00:38:05,839
startups with our complete platform and

00:38:03,839 --> 00:38:06,960
finally the github externship program

00:38:05,839 --> 00:38:08,720
for students

00:38:06,960 --> 00:38:10,000
which will provide participating

00:38:08,720 --> 00:38:12,800
students a chance to get

00:38:10,000 --> 00:38:14,000
real-world experience working with

00:38:12,800 --> 00:38:15,680
software companies

00:38:14,000 --> 00:38:17,680
and we're really thrilled to see what

00:38:15,680 --> 00:38:20,480
you are accomplishing

00:38:17,680 --> 00:38:21,760
with github here in india this community

00:38:20,480 --> 00:38:24,240
is poised to double

00:38:21,760 --> 00:38:25,520
in the next two years and we're excited

00:38:24,240 --> 00:38:28,240
to see what you will build

00:38:25,520 --> 00:38:30,720
with github next now github is the

00:38:28,240 --> 00:38:33,280
world's largest developer community

00:38:30,720 --> 00:38:34,880
and it is for a purpose and that purpose

00:38:33,280 --> 00:38:36,880
is to build together

00:38:34,880 --> 00:38:38,960
we think of software development as the

00:38:36,880 --> 00:38:41,119
world's largest team sport

00:38:38,960 --> 00:38:42,320
and we believe that it is a sport

00:38:41,119 --> 00:38:44,640
without borders

00:38:42,320 --> 00:38:46,160
now i was born in india and i moved to

00:38:44,640 --> 00:38:48,320
canada when i was young

00:38:46,160 --> 00:38:50,160
to study computer science and i had to

00:38:48,320 --> 00:38:51,760
move again to the united states

00:38:50,160 --> 00:38:53,280
to take advantage of the best

00:38:51,760 --> 00:38:55,280
opportunities in tech

00:38:53,280 --> 00:38:57,119
that was the reality back then right if

00:38:55,280 --> 00:38:58,880
you wanted an opportunity you had to

00:38:57,119 --> 00:39:01,200
move to go find it

00:38:58,880 --> 00:39:02,800
remote learning remote work global

00:39:01,200 --> 00:39:04,400
companies these were all concepts that

00:39:02,800 --> 00:39:07,040
were unheard of

00:39:04,400 --> 00:39:08,000
but today it is possible for a team of

00:39:07,040 --> 00:39:10,160
strangers

00:39:08,000 --> 00:39:12,400
to come together from across the world

00:39:10,160 --> 00:39:14,720
and build incredible things together

00:39:12,400 --> 00:39:15,599
and this is what we see on github every

00:39:14,720 --> 00:39:18,160
single day

00:39:15,599 --> 00:39:18,800
collaborations and contributions from

00:39:18,160 --> 00:39:21,839
developers

00:39:18,800 --> 00:39:23,920
all over the world in real time and it's

00:39:21,839 --> 00:39:26,160
also increasingly the reality at work

00:39:23,920 --> 00:39:27,359
teams of all shapes and sizes companies

00:39:26,160 --> 00:39:28,960
from all over the world

00:39:27,359 --> 00:39:31,200
are going remote and they're going

00:39:28,960 --> 00:39:32,960
worldwide to tap into the best

00:39:31,200 --> 00:39:36,000
developers whether they come from

00:39:32,960 --> 00:39:38,400
mumbai or mombasa or miami

00:39:36,000 --> 00:39:39,440
and those developers need to be able to

00:39:38,400 --> 00:39:41,920
work together

00:39:39,440 --> 00:39:43,680
on projects from wherever they are

00:39:41,920 --> 00:39:46,560
that's what i love about github github

00:39:43,680 --> 00:39:48,720
was built for this kind of collaboration

00:39:46,560 --> 00:39:50,240
so today i want to take you on a tour

00:39:48,720 --> 00:39:53,280
through github's products

00:39:50,240 --> 00:39:56,400
and show you how you can use them to

00:39:53,280 --> 00:39:58,320
build from wherever you are now

00:39:56,400 --> 00:40:00,720
do you remember your first time joining

00:39:58,320 --> 00:40:02,400
a software team i know i do that thrill

00:40:00,720 --> 00:40:03,359
of writing code and committing it for

00:40:02,400 --> 00:40:05,280
the first time

00:40:03,359 --> 00:40:06,640
and seeing it in a product right but

00:40:05,280 --> 00:40:07,599
first there were all those things you

00:40:06,640 --> 00:40:10,000
had to go through

00:40:07,599 --> 00:40:11,040
right setting up your dev box setting up

00:40:10,000 --> 00:40:12,640
your tools

00:40:11,040 --> 00:40:14,960
getting your code and looking through it

00:40:12,640 --> 00:40:15,520
to learn going through docs and style

00:40:14,960 --> 00:40:16,960
guides

00:40:15,520 --> 00:40:18,720
all of those things that you had to

00:40:16,960 --> 00:40:19,200
learn before you can contribute

00:40:18,720 --> 00:40:21,839
something

00:40:19,200 --> 00:40:22,640
without messing it up even with the best

00:40:21,839 --> 00:40:25,359
mentor

00:40:22,640 --> 00:40:27,520
to help you that could take days and the

00:40:25,359 --> 00:40:29,839
reality is today you have to do that

00:40:27,520 --> 00:40:31,599
all the time developers almost never

00:40:29,839 --> 00:40:33,599
work on just one thing

00:40:31,599 --> 00:40:36,240
you're always having to switch context

00:40:33,599 --> 00:40:37,359
work on different projects fixing live

00:40:36,240 --> 00:40:39,839
site incidents

00:40:37,359 --> 00:40:41,359
contributing to other teams code or even

00:40:39,839 --> 00:40:44,880
just learning something new

00:40:41,359 --> 00:40:47,920
that is not easy on average it takes

00:40:44,880 --> 00:40:49,359
over 23 minutes to switch context and

00:40:47,920 --> 00:40:51,119
get into the flow

00:40:49,359 --> 00:40:52,560
and that is if you've got everything set

00:40:51,119 --> 00:40:53,200
up for you often it can take a lot

00:40:52,560 --> 00:40:56,319
longer

00:40:53,200 --> 00:40:58,480
so github we care about this a lot we

00:40:56,319 --> 00:40:59,119
want developers to be able to get into

00:40:58,480 --> 00:41:01,280
the flow

00:40:59,119 --> 00:41:02,880
get into the code and contribute whether

00:41:01,280 --> 00:41:03,440
they're joining a project for the first

00:41:02,880 --> 00:41:05,119
time

00:41:03,440 --> 00:41:06,560
or just getting back into it after a

00:41:05,119 --> 00:41:09,359
while to show you

00:41:06,560 --> 00:41:11,040
how github helps you get in the flow

00:41:09,359 --> 00:41:12,560
here's neha

00:41:11,040 --> 00:41:14,079
hi i'm neha i'm the director of

00:41:12,560 --> 00:41:15,680
engineering here at github for the team

00:41:14,079 --> 00:41:17,119
that works on discussions

00:41:15,680 --> 00:41:18,960
i'm pleased to announce that we've now

00:41:17,119 --> 00:41:20,000
enabled discussions on private repos and

00:41:18,960 --> 00:41:22,000
that means for this private

00:41:20,000 --> 00:41:23,359
repo we can have our team conversations

00:41:22,000 --> 00:41:25,280
here and leave our issues

00:41:23,359 --> 00:41:27,359
for tracking our work here we have some

00:41:25,280 --> 00:41:29,119
internal chat about skylines these cool

00:41:27,359 --> 00:41:30,720
3d printed contribution graphs that

00:41:29,119 --> 00:41:31,119
people have created using a website we

00:41:30,720 --> 00:41:32,720
built

00:41:31,119 --> 00:41:34,400
but we also use discussions to talk

00:41:32,720 --> 00:41:35,359
about ideas in the team and with others

00:41:34,400 --> 00:41:37,440
in the company

00:41:35,359 --> 00:41:39,200
my teammate diana had an idea here the

00:41:37,440 --> 00:41:40,720
other day about adding a year selector

00:41:39,200 --> 00:41:42,720
to the page and i really like that

00:41:40,720 --> 00:41:44,079
so i want us to work on this um so let's

00:41:42,720 --> 00:41:45,280
create an issue from this discussion

00:41:44,079 --> 00:41:46,640
thread and track the work

00:41:45,280 --> 00:41:48,960
so i'm just going to go in here

00:41:46,640 --> 00:41:50,480
reference the issue give it a title

00:41:48,960 --> 00:41:52,000
and then i can just scroll down and i

00:41:50,480 --> 00:41:53,599
can create the issue

00:41:52,000 --> 00:41:55,040
so this shouldn't be too hard and i'm

00:41:53,599 --> 00:41:56,640
thinking i might be the one to pick this

00:41:55,040 --> 00:41:57,920
up and so we can do it together let's

00:41:56,640 --> 00:41:59,200
just take a quick look

00:41:57,920 --> 00:42:01,280
so i'm going to go over i'm going to

00:41:59,200 --> 00:42:02,960
assign the issue to myself and you can

00:42:01,280 --> 00:42:04,960
see that this isn't the code base that i

00:42:02,960 --> 00:42:06,640
work in every day this is just for fun

00:42:04,960 --> 00:42:08,480
so rather than downloading all the

00:42:06,640 --> 00:42:09,920
dependencies to my machine and getting a

00:42:08,480 --> 00:42:10,560
full development environment set up

00:42:09,920 --> 00:42:12,880
locally

00:42:10,560 --> 00:42:14,880
i can open a code space right here in

00:42:12,880 --> 00:42:16,640
github and i can get my own personal dev

00:42:14,880 --> 00:42:18,640
box in the cloud right away

00:42:16,640 --> 00:42:20,160
and this isn't just running the visual

00:42:18,640 --> 00:42:21,680
code editor in the cloud

00:42:20,160 --> 00:42:23,599
this is a full-blown personal

00:42:21,680 --> 00:42:25,760
development environment in the cloud

00:42:23,599 --> 00:42:27,040
so for example if i like go over to the

00:42:25,760 --> 00:42:29,520
terminal and i type in

00:42:27,040 --> 00:42:30,079
npm run dev here in the console i can

00:42:29,520 --> 00:42:32,800
get the

00:42:30,079 --> 00:42:33,839
full local development and experience as

00:42:32,800 --> 00:42:36,720
if i'd had the code

00:42:33,839 --> 00:42:38,560
locally on my machine codespaces even

00:42:36,720 --> 00:42:39,359
sees when my code is running a server on

00:42:38,560 --> 00:42:41,599
localhost

00:42:39,359 --> 00:42:42,400
and so it'll let me connect to it across

00:42:41,599 --> 00:42:44,319
the internet

00:42:42,400 --> 00:42:46,240
taking care of all of the htgps

00:42:44,319 --> 00:42:47,440
tunneling and authentication to ensure

00:42:46,240 --> 00:42:49,040
only i can see

00:42:47,440 --> 00:42:51,839
what is running on my dev box in the

00:42:49,040 --> 00:42:52,720
cloud so let me type in my github id

00:42:51,839 --> 00:42:55,520
nerd neha

00:42:52,720 --> 00:42:56,960
and let me check out this awesome graph

00:42:55,520 --> 00:42:57,839
so this site's pretty awesome it's got

00:42:56,960 --> 00:42:59,760
like a

00:42:57,839 --> 00:43:02,240
nice soundtrack and the coolest part is

00:42:59,760 --> 00:43:04,720
it's running on my dev box in the cloud

00:43:02,240 --> 00:43:06,800
but yeah 2020 isn't really a year i want

00:43:04,720 --> 00:43:08,160
to remember so let's get started on that

00:43:06,800 --> 00:43:10,560
issue that diana mentioned

00:43:08,160 --> 00:43:12,480
by adding a year selector here

00:43:10,560 --> 00:43:13,680
codespaces is already authenticated with

00:43:12,480 --> 00:43:15,520
github so actually

00:43:13,680 --> 00:43:16,960
i can actually just go to the github

00:43:15,520 --> 00:43:20,079
extension in vs code

00:43:16,960 --> 00:43:21,760
and it has my issues already listed so

00:43:20,079 --> 00:43:22,720
if i click on it you can see the issues

00:43:21,760 --> 00:43:24,160
listed here

00:43:22,720 --> 00:43:26,560
i'm going to find the issue that i

00:43:24,160 --> 00:43:28,000
created and start working on my issue

00:43:26,560 --> 00:43:29,440
and you can see that it's already

00:43:28,000 --> 00:43:30,560
created a new feature branch for me to

00:43:29,440 --> 00:43:32,400
add my changes

00:43:30,560 --> 00:43:34,319
so all i have to do now is take a look

00:43:32,400 --> 00:43:36,800
at the files so i'm going to go over

00:43:34,319 --> 00:43:39,040
i'm going to find the form part which i

00:43:36,800 --> 00:43:40,560
happen to know is called hero.view

00:43:39,040 --> 00:43:42,160
and i know that the code that i want to

00:43:40,560 --> 00:43:42,880
add in is between the at symbol and the

00:43:42,160 --> 00:43:44,480
submit button

00:43:42,880 --> 00:43:46,000
so i'm going to quickly add the code for

00:43:44,480 --> 00:43:47,920
a year selector and then i'm going to

00:43:46,000 --> 00:43:49,760
hit save

00:43:47,920 --> 00:43:51,359
now this is a full development

00:43:49,760 --> 00:43:52,480
environment so if i just jump back into

00:43:51,359 --> 00:43:54,400
my application

00:43:52,480 --> 00:43:55,920
we can see it's refreshing just as if i

00:43:54,400 --> 00:43:57,680
was running code locally

00:43:55,920 --> 00:43:58,960
and it'll start to bring up the selector

00:43:57,680 --> 00:44:00,720
there it is so

00:43:58,960 --> 00:44:02,400
i'm going to type in my username again

00:44:00,720 --> 00:44:02,800
and i'm going to test it with the 2018

00:44:02,400 --> 00:44:04,160
year

00:44:02,800 --> 00:44:06,400
i know that i had like a pretty good

00:44:04,160 --> 00:44:07,520
year that year um and also i had this

00:44:06,400 --> 00:44:08,560
like great break for summer and

00:44:07,520 --> 00:44:11,440
thanksgiving

00:44:08,560 --> 00:44:12,400
so i want to see if those show up uh and

00:44:11,440 --> 00:44:15,520
so

00:44:12,400 --> 00:44:17,760
here we go okay so you can see oh

00:44:15,520 --> 00:44:19,599
okay so you can see my skyline and you

00:44:17,760 --> 00:44:20,960
can see that like i even at the end

00:44:19,599 --> 00:44:22,319
there's like some nice gaps it's when i

00:44:20,960 --> 00:44:25,040
took my end of your vacation

00:44:22,319 --> 00:44:26,480
super seriously um and so this is all

00:44:25,040 --> 00:44:27,839
running in my private development

00:44:26,480 --> 00:44:29,599
machine in the cloud

00:44:27,839 --> 00:44:31,200
um i can come in i can mess with the

00:44:29,599 --> 00:44:32,960
graph i can scroll around

00:44:31,200 --> 00:44:34,800
and so i know that this works and i'm

00:44:32,960 --> 00:44:36,240
ready let's commit this and let's share

00:44:34,800 --> 00:44:38,000
the changes with the team

00:44:36,240 --> 00:44:39,920
so what i want to do now is i want to go

00:44:38,000 --> 00:44:41,680
back to my editor and i want to first

00:44:39,920 --> 00:44:43,599
commit that change locally so i'm going

00:44:41,680 --> 00:44:45,119
to go into the get view

00:44:43,599 --> 00:44:46,400
um and you can notice it already

00:44:45,119 --> 00:44:47,280
includes a link to the issue that we're

00:44:46,400 --> 00:44:49,760
working on

00:44:47,280 --> 00:44:50,480
and so um then i can go ahead i can

00:44:49,760 --> 00:44:51,680
commit it

00:44:50,480 --> 00:44:53,280
and now i'm going to create a pull

00:44:51,680 --> 00:44:54,800
request so i can do that by going

00:44:53,280 --> 00:44:56,240
straight to the extension

00:44:54,800 --> 00:44:58,240
um and then i'm going to go into my

00:44:56,240 --> 00:44:59,040
github view i'm going to create a new

00:44:58,240 --> 00:45:00,319
pull request

00:44:59,040 --> 00:45:02,000
it's going to figure out which branch i

00:45:00,319 --> 00:45:02,640
want to compare to and it's going to

00:45:02,000 --> 00:45:05,040
even

00:45:02,640 --> 00:45:06,079
publish the branch for me so i'm just

00:45:05,040 --> 00:45:08,319
going to scroll down here

00:45:06,079 --> 00:45:10,000
hit create and then i can create the

00:45:08,319 --> 00:45:11,680
pull request and it's going to do all of

00:45:10,000 --> 00:45:13,200
the work of publishing the branch

00:45:11,680 --> 00:45:14,800
pushing the changes in the server and

00:45:13,200 --> 00:45:15,440
even creating the pull request in the

00:45:14,800 --> 00:45:17,040
server

00:45:15,440 --> 00:45:20,079
so you can see my pr it's like right

00:45:17,040 --> 00:45:22,240
here so if i go back into my repo

00:45:20,079 --> 00:45:24,079
on github i can navigate over to the

00:45:22,240 --> 00:45:25,839
pull request tab so let's do that really

00:45:24,079 --> 00:45:29,119
quickly

00:45:25,839 --> 00:45:31,440
and there you can see my pr is available

00:45:29,119 --> 00:45:32,800
uh your selector for graph and you can

00:45:31,440 --> 00:45:33,599
see that it's ready for my team to

00:45:32,800 --> 00:45:35,119
review

00:45:33,599 --> 00:45:37,119
and i can see that the ci builds have

00:45:35,119 --> 00:45:39,680
already kicked off so i can

00:45:37,119 --> 00:45:41,520
to verify my change so let me go in i'm

00:45:39,680 --> 00:45:42,240
going to tag this with the enhancement

00:45:41,520 --> 00:45:44,000
label

00:45:42,240 --> 00:45:45,599
and then i'm going to you make use of

00:45:44,000 --> 00:45:47,040
this super cool new feature it's called

00:45:45,599 --> 00:45:49,359
auto merge and github

00:45:47,040 --> 00:45:51,520
and so what i'm doing here is i'm having

00:45:49,359 --> 00:45:52,880
the pr get merged automatically as soon

00:45:51,520 --> 00:45:54,640
as all the checks are complete

00:45:52,880 --> 00:45:56,160
and the code has been reviewed by the

00:45:54,640 --> 00:45:56,640
team and so i don't have to do anything

00:45:56,160 --> 00:45:58,240
here

00:45:56,640 --> 00:46:00,000
and this leaves me free to get on with

00:45:58,240 --> 00:46:03,040
my next change in the meantime let me

00:46:00,000 --> 00:46:03,040
hand you back to shinku

00:46:03,119 --> 00:46:07,200
thanks neha now once you've written your

00:46:06,560 --> 00:46:08,960
code

00:46:07,200 --> 00:46:11,040
it's time to get it reviewed and

00:46:08,960 --> 00:46:13,280
committed now code reviews have

00:46:11,040 --> 00:46:15,200
also changed in this new world used to

00:46:13,280 --> 00:46:16,640
be that you could invite someone over to

00:46:15,200 --> 00:46:18,240
look over your shoulder

00:46:16,640 --> 00:46:20,400
review your changes and give you a quick

00:46:18,240 --> 00:46:22,880
thumbs up but now that you're working on

00:46:20,400 --> 00:46:24,880
a distributed or remote team

00:46:22,880 --> 00:46:26,400
you still need that review you just need

00:46:24,880 --> 00:46:29,440
new ways to do it

00:46:26,400 --> 00:46:31,839
now on github everything about code

00:46:29,440 --> 00:46:33,599
revolves around the pull request and the

00:46:31,839 --> 00:46:35,440
code review experience

00:46:33,599 --> 00:46:36,800
pull requests were designed to let

00:46:35,440 --> 00:46:39,599
strangers review

00:46:36,800 --> 00:46:41,280
and collaborate and commit code together

00:46:39,599 --> 00:46:42,480
now during the last year as teams have

00:46:41,280 --> 00:46:45,680
become more remote

00:46:42,480 --> 00:46:47,599
we've seen something amazing on github

00:46:45,680 --> 00:46:49,200
developers are actually submitting pull

00:46:47,599 --> 00:46:51,440
requests for code reviews

00:46:49,200 --> 00:46:53,680
more often than ever before as much as

00:46:51,440 --> 00:46:56,160
30 percent more frequently

00:46:53,680 --> 00:46:58,640
and when they do those pull requests are

00:46:56,160 --> 00:47:00,640
getting reviewed faster than ever before

00:46:58,640 --> 00:47:02,319
and that's good news if your prs are

00:47:00,640 --> 00:47:04,480
more frequent and smaller

00:47:02,319 --> 00:47:06,240
they're easier to review and that leads

00:47:04,480 --> 00:47:08,480
to higher quality code reviews

00:47:06,240 --> 00:47:09,599
and higher quality code and when they're

00:47:08,480 --> 00:47:11,680
easier to review

00:47:09,599 --> 00:47:12,640
they also get reviewed faster which

00:47:11,680 --> 00:47:16,000
means that they get

00:47:12,640 --> 00:47:18,400
committed faster and shipped faster

00:47:16,000 --> 00:47:19,760
better prs also means not just having

00:47:18,400 --> 00:47:22,880
human helpers

00:47:19,760 --> 00:47:25,760
but the bots github actions

00:47:22,880 --> 00:47:27,920
and our amazing ecosystem provides an

00:47:25,760 --> 00:47:29,280
integrated ci platform with thousands of

00:47:27,920 --> 00:47:31,040
custom actions

00:47:29,280 --> 00:47:33,040
written by our community that can

00:47:31,040 --> 00:47:35,760
automate all sorts of reviews

00:47:33,040 --> 00:47:37,040
running your unit tests applying linters

00:47:35,760 --> 00:47:39,040
and style guides

00:47:37,040 --> 00:47:40,880
checking your dependencies and just

00:47:39,040 --> 00:47:44,319
helping you commit better code

00:47:40,880 --> 00:47:45,760
to show us more here is a tool i'm atul

00:47:44,319 --> 00:47:46,720
and i work on the databases team here in

00:47:45,760 --> 00:47:48,240
hazard bar

00:47:46,720 --> 00:47:49,920
this is the pr from neha where she has

00:47:48,240 --> 00:47:51,040
added a new ear selector to the site

00:47:49,920 --> 00:47:52,640
that we are building

00:47:51,040 --> 00:47:53,920
for every change we make to this site we

00:47:52,640 --> 00:47:55,200
build and test it automatically using

00:47:53,920 --> 00:47:56,640
data actions

00:47:55,200 --> 00:47:58,880
let me show you the ci build for neha's

00:47:56,640 --> 00:48:00,160
latest changes if i go into the summary

00:47:58,880 --> 00:48:02,079
view you can see the brand new

00:48:00,160 --> 00:48:03,599
visualizer showing us running the build

00:48:02,079 --> 00:48:04,160
and test steps on both mac and linux

00:48:03,599 --> 00:48:06,079
machines

00:48:04,160 --> 00:48:07,839
all at the same time this takes

00:48:06,079 --> 00:48:09,040
advantage of data actions and our hosted

00:48:07,839 --> 00:48:09,599
build runners which provide you with

00:48:09,040 --> 00:48:12,000
secure

00:48:09,599 --> 00:48:12,880
build servers on demand all of this

00:48:12,000 --> 00:48:15,119
infrastructure is

00:48:12,880 --> 00:48:16,480
managed for you by our team at github so

00:48:15,119 --> 00:48:17,440
that you can add new build machines

00:48:16,480 --> 00:48:19,760
whenever you need them

00:48:17,440 --> 00:48:21,119
for either linux windows or the mac

00:48:19,760 --> 00:48:22,319
let's go back let's look at how the

00:48:21,119 --> 00:48:24,079
build is configured

00:48:22,319 --> 00:48:25,680
our workflows are defined in the dark

00:48:24,079 --> 00:48:27,040
data folder under workflows

00:48:25,680 --> 00:48:30,319
we are going to look at the ci bill

00:48:27,040 --> 00:48:31,920
first we can see that it is triggered by

00:48:30,319 --> 00:48:33,280
new changes in the main branch but also

00:48:31,920 --> 00:48:34,640
by any pull requests that are targeting

00:48:33,280 --> 00:48:36,319
the main branch

00:48:34,640 --> 00:48:37,680
we also define which operating system

00:48:36,319 --> 00:48:39,440
and node versions we want to run our

00:48:37,680 --> 00:48:41,280
build on and then we build our code

00:48:39,440 --> 00:48:44,480
on the linter and do a full test shoot

00:48:41,280 --> 00:48:46,400
pass the actions community is fantastic

00:48:44,480 --> 00:48:47,599
with over 7000 open source actions in

00:48:46,400 --> 00:48:49,599
the marketplace

00:48:47,599 --> 00:48:51,119
in the ci build we have added an awesome

00:48:49,599 --> 00:48:52,960
community action from tim lukas and

00:48:51,119 --> 00:48:54,160
joseph peterson that will update draft

00:48:52,960 --> 00:48:56,319
release note for you

00:48:54,160 --> 00:48:57,920
based on your issues and full requests

00:48:56,319 --> 00:48:59,119
so that's that's the power of community

00:48:57,920 --> 00:49:01,359
for you

00:48:59,119 --> 00:49:03,040
that you can use to change your ci we

00:49:01,359 --> 00:49:04,880
also create and deploy a test

00:49:03,040 --> 00:49:06,400
environment in the cloud for every

00:49:04,880 --> 00:49:08,000
single pull request

00:49:06,400 --> 00:49:09,760
this makes it easy for us to review the

00:49:08,000 --> 00:49:11,599
changes in a working environment

00:49:09,760 --> 00:49:12,960
so let's take a look at the dev test and

00:49:11,599 --> 00:49:14,720
development workflow which is run

00:49:12,960 --> 00:49:16,079
in parallel alongside our ci bit so as

00:49:14,720 --> 00:49:17,440
you saw this is triggered by

00:49:16,079 --> 00:49:19,520
pushes to main along with new pull

00:49:17,440 --> 00:49:21,040
request we come in get the code and then

00:49:19,520 --> 00:49:22,640
deploy it to our cloud provider using a

00:49:21,040 --> 00:49:23,839
secret which we store securely inside

00:49:22,640 --> 00:49:26,160
github's built-in

00:49:23,839 --> 00:49:27,680
secret store we've also added a job to

00:49:26,160 --> 00:49:28,960
this workflow that will come back and

00:49:27,680 --> 00:49:31,359
destroy the environment when the pull

00:49:28,960 --> 00:49:34,160
request is closed to keep our costs down

00:49:31,359 --> 00:49:36,480
so let's go back to the pr from uh the

00:49:34,160 --> 00:49:39,680
pr from neha and review it

00:49:36,480 --> 00:49:41,440
um let's scroll down i can see the link

00:49:39,680 --> 00:49:43,760
a link that has been added by the

00:49:41,440 --> 00:49:45,200
deployment so i can click on that and

00:49:43,760 --> 00:49:47,920
quickly test the changes without having

00:49:45,200 --> 00:49:49,680
to install anything myself

00:49:47,920 --> 00:49:51,280
i can see that the new here selector is

00:49:49,680 --> 00:49:54,400
there so let's just enter a name

00:49:51,280 --> 00:49:56,640
and select right here 2018 and then take

00:49:54,400 --> 00:50:00,559
a look at the graph

00:49:56,640 --> 00:50:00,559
the graph is uh loading

00:50:01,119 --> 00:50:06,960
and yeah i think the

00:50:04,559 --> 00:50:08,720
contribution block looks good it has the

00:50:06,960 --> 00:50:10,319
ear as well so i think the ear selector

00:50:08,720 --> 00:50:12,079
is working you're able to select the ear

00:50:10,319 --> 00:50:13,920
as well as

00:50:12,079 --> 00:50:15,280
sheet on the contribution graph so let's

00:50:13,920 --> 00:50:19,440
go back to the pr

00:50:15,280 --> 00:50:22,880
and let's review the code um

00:50:19,440 --> 00:50:23,440
the code the code looks good so let's

00:50:22,880 --> 00:50:27,119
just say

00:50:23,440 --> 00:50:29,119
lgtm and quickly approve the code

00:50:27,119 --> 00:50:30,800
now because they has enabled auto merge

00:50:29,119 --> 00:50:31,839
as soon as i approve the change the code

00:50:30,800 --> 00:50:33,280
is deployed

00:50:31,839 --> 00:50:35,040
the code is merged automatically and

00:50:33,280 --> 00:50:36,880
data actions take care of destroying the

00:50:35,040 --> 00:50:40,480
test environment for me

00:50:36,880 --> 00:50:40,480
so everything just works end-to-end

00:50:41,520 --> 00:50:47,040
thank you now by using

00:50:44,559 --> 00:50:48,319
github pull requests and actions we are

00:50:47,040 --> 00:50:51,839
seeing our customers

00:50:48,319 --> 00:50:54,400
ship code to production way more often

00:50:51,839 --> 00:50:55,599
but it's not just enough to ship faster

00:50:54,400 --> 00:50:58,640
you also have to ship

00:50:55,599 --> 00:51:00,960
safely and securely one leaked secret

00:50:58,640 --> 00:51:02,240
one vulnerable piece of code one

00:51:00,960 --> 00:51:05,280
insecure dependency

00:51:02,240 --> 00:51:07,280
can cost you time cost you money and

00:51:05,280 --> 00:51:09,040
cost your customers trust

00:51:07,280 --> 00:51:11,119
now we're humans and humans make

00:51:09,040 --> 00:51:12,960
mistakes it turns out

00:51:11,119 --> 00:51:14,640
the majority of security vulnerabilities

00:51:12,960 --> 00:51:16,800
are just human mistakes

00:51:14,640 --> 00:51:18,400
and once those mistakes get into code

00:51:16,800 --> 00:51:20,319
they're hard to get out

00:51:18,400 --> 00:51:22,640
so if you can fix those mistakes before

00:51:20,319 --> 00:51:23,680
you ship or even before you commit code

00:51:22,640 --> 00:51:25,839
that's great

00:51:23,680 --> 00:51:27,520
and if you can't then the quicker you

00:51:25,839 --> 00:51:28,480
can fix them once they're found the

00:51:27,520 --> 00:51:30,880
better

00:51:28,480 --> 00:51:31,520
so with github security tool security

00:51:30,880 --> 00:51:33,440
where it

00:51:31,520 --> 00:51:35,440
makes the most sense right into the

00:51:33,440 --> 00:51:37,920
developer workflow

00:51:35,440 --> 00:51:39,040
so you can find and fix these issues

00:51:37,920 --> 00:51:43,040
more quickly

00:51:39,040 --> 00:51:44,880
so to show us more here is niroshan

00:51:43,040 --> 00:51:46,480
hello everyone my name is niroshan

00:51:44,880 --> 00:51:48,640
rajadheri and i'm part of the

00:51:46,480 --> 00:51:49,599
application security field team here at

00:51:48,640 --> 00:51:50,880
github

00:51:49,599 --> 00:51:52,240
and i'm going to talk to you about the

00:51:50,880 --> 00:51:54,720
work we've been doing in this space

00:51:52,240 --> 00:51:57,040
through a quick demonstration

00:51:54,720 --> 00:51:59,599
in our example here we have advanced

00:51:57,040 --> 00:52:01,520
security enabled in our organization

00:51:59,599 --> 00:52:03,200
and this allows us to easily switch on

00:52:01,520 --> 00:52:04,800
code scanning and secret scanning for

00:52:03,200 --> 00:52:06,559
our private repos

00:52:04,800 --> 00:52:09,599
but everyone can still use these

00:52:06,559 --> 00:52:11,200
features on your public repos for free

00:52:09,599 --> 00:52:13,760
just go to the security section of your

00:52:11,200 --> 00:52:15,680
repo settings and switch it on there

00:52:13,760 --> 00:52:17,359
i can get an overview of the security

00:52:15,680 --> 00:52:19,760
situation for my project from the

00:52:17,359 --> 00:52:21,839
security tab in the repo

00:52:19,760 --> 00:52:23,920
beginning with supply chain issues here

00:52:21,839 --> 00:52:25,440
we have dependebot enabled

00:52:23,920 --> 00:52:27,440
it is automatically looking for

00:52:25,440 --> 00:52:29,359
vulnerabilities with my dependencies and

00:52:27,440 --> 00:52:32,319
it will create a pull request for me

00:52:29,359 --> 00:52:32,800
if one of them needs updating looking

00:52:32,319 --> 00:52:34,800
here

00:52:32,800 --> 00:52:36,000
i see dependebot is telling me about a

00:52:34,800 --> 00:52:38,480
new release of

00:52:36,000 --> 00:52:40,160
one of the actions that atoll was using

00:52:38,480 --> 00:52:42,079
it's a minor revision so i'm going to go

00:52:40,160 --> 00:52:44,079
ahead and approve this change to keep us

00:52:42,079 --> 00:52:45,839
up to date

00:52:44,079 --> 00:52:47,760
all the tests are passing so i'm going

00:52:45,839 --> 00:52:49,760
to go ahead and merge this change

00:52:47,760 --> 00:52:52,160
now even our build processes can be kept

00:52:49,760 --> 00:52:54,400
up to date with dependerbot

00:52:52,160 --> 00:52:56,640
back to the security tab i see that

00:52:54,400 --> 00:52:59,359
secret scanning is also active

00:52:56,640 --> 00:53:01,280
let's take a look to see if any of my

00:52:59,359 --> 00:53:01,760
team accidentally checked in secrets or

00:53:01,280 --> 00:53:03,839
api

00:53:01,760 --> 00:53:05,440
tokens so we can stop them from being

00:53:03,839 --> 00:53:07,200
externalized

00:53:05,440 --> 00:53:09,040
if we look at the closed issues we can

00:53:07,200 --> 00:53:09,760
see one of my developers accidentally

00:53:09,040 --> 00:53:12,240
checked in

00:53:09,760 --> 00:53:13,680
code that included a token in the past

00:53:12,240 --> 00:53:16,079
so we've actually revoked that and

00:53:13,680 --> 00:53:17,839
removed it from the code

00:53:16,079 --> 00:53:19,520
so that's known vulnerabilities and

00:53:17,839 --> 00:53:20,960
sequence taken care of

00:53:19,520 --> 00:53:24,000
but what about our unknown

00:53:20,960 --> 00:53:26,079
vulnerabilities with codeql from github

00:53:24,000 --> 00:53:27,760
we're able to scan our code base looking

00:53:26,079 --> 00:53:29,839
for code which could be introducing

00:53:27,760 --> 00:53:31,680
potential security vulnerabilities into

00:53:29,839 --> 00:53:33,760
the code that we're writing

00:53:31,680 --> 00:53:36,319
as you can see it's identified one here

00:53:33,760 --> 00:53:38,559
for me i can show the code part that was

00:53:36,319 --> 00:53:40,480
found with code cures analysis tools

00:53:38,559 --> 00:53:42,079
and i can see that this is definitely an

00:53:40,480 --> 00:53:43,920
issue however

00:53:42,079 --> 00:53:46,400
it doesn't look like it'll lead to a

00:53:43,920 --> 00:53:48,079
major exploit in our case

00:53:46,400 --> 00:53:50,400
but let's create a quick issue from the

00:53:48,079 --> 00:53:52,079
code so we don't forget about it

00:53:50,400 --> 00:53:54,160
this should be a simple fix to

00:53:52,079 --> 00:53:55,359
explicitly tostring the value from the

00:53:54,160 --> 00:53:57,280
url

00:53:55,359 --> 00:53:59,359
i'll also mark this as a good first

00:53:57,280 --> 00:54:00,720
issue in case someone wants to pick this

00:53:59,359 --> 00:54:03,040
one up

00:54:00,720 --> 00:54:04,559
once i'm happy we'll save the issue to

00:54:03,040 --> 00:54:06,720
make sure we don't lose track of the

00:54:04,559 --> 00:54:08,880
work we want to do

00:54:06,720 --> 00:54:10,720
excellent we'll get back to working on

00:54:08,880 --> 00:54:12,480
that right away

00:54:10,720 --> 00:54:14,319
while we've had the security tab on your

00:54:12,480 --> 00:54:16,079
project for a little while now

00:54:14,319 --> 00:54:17,599
today i'm pleased to announce that

00:54:16,079 --> 00:54:19,440
enterprises with github advanced

00:54:17,599 --> 00:54:21,680
security now have a security tab

00:54:19,440 --> 00:54:23,359
added to their organizations where you

00:54:21,680 --> 00:54:26,079
can get a quick summary of

00:54:23,359 --> 00:54:27,839
all the projects you also have an

00:54:26,079 --> 00:54:29,599
overview of all the projects in your

00:54:27,839 --> 00:54:32,079
organization and what the status

00:54:29,599 --> 00:54:33,680
of their security features i'm also

00:54:32,079 --> 00:54:35,760
pleased to announce that this is now

00:54:33,680 --> 00:54:37,680
available to teams who can see the

00:54:35,760 --> 00:54:40,960
security status of the repositories

00:54:37,680 --> 00:54:43,200
that they administer with that back to

00:54:40,960 --> 00:54:46,319
you shanku

00:54:43,200 --> 00:54:46,799
thank you nirushan now we've got our

00:54:46,319 --> 00:54:49,760
code

00:54:46,799 --> 00:54:51,119
written reviewed and committed where our

00:54:49,760 --> 00:54:53,920
code really belongs

00:54:51,119 --> 00:54:55,119
is in our users hands and that means

00:54:53,920 --> 00:54:57,119
shipping

00:54:55,119 --> 00:54:58,799
doing the functional testing sharing

00:54:57,119 --> 00:54:59,920
with stakeholders and getting them to

00:54:58,799 --> 00:55:01,599
sign off

00:54:59,920 --> 00:55:03,040
and releasing the production and

00:55:01,599 --> 00:55:05,680
celebrating together

00:55:03,040 --> 00:55:07,520
now github's new tools were designed to

00:55:05,680 --> 00:55:08,240
make it easy to test and release

00:55:07,520 --> 00:55:12,880
together

00:55:08,240 --> 00:55:15,359
as a team to show us more here's katie

00:55:12,880 --> 00:55:16,880
thanks chanku hey everyone now we have a

00:55:15,359 --> 00:55:17,359
release that's ready to head out the

00:55:16,880 --> 00:55:19,280
door

00:55:17,359 --> 00:55:20,480
thanks to a tool we already have a draft

00:55:19,280 --> 00:55:22,079
of our release notes

00:55:20,480 --> 00:55:24,400
let's edit a new release based on the

00:55:22,079 --> 00:55:27,680
draft notes

00:55:24,400 --> 00:55:29,440
first i'm going to set the title

00:55:27,680 --> 00:55:34,720
then i'll check the draft notes that

00:55:29,440 --> 00:55:36,400
were automatically created to be honest

00:55:34,720 --> 00:55:37,680
these look pretty good already so i'm

00:55:36,400 --> 00:55:38,960
going to go ahead and publish this

00:55:37,680 --> 00:55:41,119
release

00:55:38,960 --> 00:55:43,040
now we have a workflow set up in actions

00:55:41,119 --> 00:55:43,920
to be triggered by the publication of a

00:55:43,040 --> 00:55:46,880
release

00:55:43,920 --> 00:55:48,000
with our new workflow visualization ui

00:55:46,880 --> 00:55:51,599
you can see the release is now

00:55:48,000 --> 00:55:53,040
deploying to staging then it'll run some

00:55:51,599 --> 00:55:56,319
end to end smoke tests

00:55:53,040 --> 00:55:58,319
before finally deploying to production

00:55:56,319 --> 00:55:59,839
while all of that is running let me show

00:55:58,319 --> 00:56:01,599
you how i've set this up

00:55:59,839 --> 00:56:03,839
let's take a look at the code in another

00:56:01,599 --> 00:56:06,599
tab in the github

00:56:03,839 --> 00:56:09,440
workflows folder we'll find the

00:56:06,599 --> 00:56:11,680
releases.yaml file

00:56:09,440 --> 00:56:13,520
in the release yaml you can see i've set

00:56:11,680 --> 00:56:16,079
up a couple of different triggers

00:56:13,520 --> 00:56:17,920
a manual trigger with workflow dispatch

00:56:16,079 --> 00:56:20,319
as well as triggers based on when a

00:56:17,920 --> 00:56:23,760
release is published

00:56:20,319 --> 00:56:26,079
in the deploy staging job i specify

00:56:23,760 --> 00:56:27,520
the environment name and url where this

00:56:26,079 --> 00:56:29,520
will be available

00:56:27,520 --> 00:56:31,680
you can see i'm also requesting the

00:56:29,520 --> 00:56:34,480
published token secret from github's

00:56:31,680 --> 00:56:36,640
built-in encrypted secrets fault

00:56:34,480 --> 00:56:37,760
after that job is completed we run our

00:56:36,640 --> 00:56:41,119
smoke test

00:56:37,760 --> 00:56:43,920
then a deployed production again

00:56:41,119 --> 00:56:44,480
specifying the environment name and url

00:56:43,920 --> 00:56:46,720
before

00:56:44,480 --> 00:56:47,680
calling the same action with published

00:56:46,720 --> 00:56:51,040
token as

00:56:47,680 --> 00:56:52,960
a secret now these steps are identical

00:56:51,040 --> 00:56:54,640
yet they publish to different places

00:56:52,960 --> 00:56:56,480
that's because we define a different

00:56:54,640 --> 00:56:58,240
publish token for each environment

00:56:56,480 --> 00:56:59,760
let me show you how we do this i head

00:56:58,240 --> 00:57:02,480
into project settings

00:56:59,760 --> 00:57:02,799
then in the new environment section i

00:57:02,480 --> 00:57:06,079
have

00:57:02,799 --> 00:57:08,240
staging and production

00:57:06,079 --> 00:57:10,480
on the staging environment you can see

00:57:08,240 --> 00:57:13,599
we have a published token defined

00:57:10,480 --> 00:57:13,920
in github's encrypted secret vault even

00:57:13,599 --> 00:57:16,400
as

00:57:13,920 --> 00:57:18,480
admin i only have access to update this

00:57:16,400 --> 00:57:20,960
i can't view it in the ui

00:57:18,480 --> 00:57:21,599
going back to production i have the

00:57:20,960 --> 00:57:23,440
production

00:57:21,599 --> 00:57:24,799
publish token defined in our secrets

00:57:23,440 --> 00:57:26,640
here as well

00:57:24,799 --> 00:57:28,240
but what's more interesting is that you

00:57:26,640 --> 00:57:30,400
can see i've set this up to require

00:57:28,240 --> 00:57:31,280
manual approval before code is deployed

00:57:30,400 --> 00:57:32,960
to production

00:57:31,280 --> 00:57:35,119
only people from this team can permit

00:57:32,960 --> 00:57:37,520
code to go live and there's a full audit

00:57:35,119 --> 00:57:40,000
trail to see who approved it

00:57:37,520 --> 00:57:41,200
great staging has been deployed and our

00:57:40,000 --> 00:57:43,200
smoke tests have run

00:57:41,200 --> 00:57:44,960
let's take a quick look at the staging

00:57:43,200 --> 00:57:47,200
environment

00:57:44,960 --> 00:57:49,359
awesome looks good i'm going to enter my

00:57:47,200 --> 00:57:55,839
id to test out my own graph and make

00:57:49,359 --> 00:57:55,839
sure everything's working well

00:57:56,079 --> 00:57:59,359
everything seems to be working well nate

00:57:58,000 --> 00:58:00,720
has code is included

00:57:59,359 --> 00:58:03,200
so i'm going to approve the release to

00:58:00,720 --> 00:58:03,200
production

00:58:06,240 --> 00:58:09,520
back in the github ui i can click on

00:58:08,079 --> 00:58:11,920
review deployments

00:58:09,520 --> 00:58:13,760
select the environment and leave a quick

00:58:11,920 --> 00:58:18,480
comment

00:58:13,760 --> 00:58:20,559
approve the deploy there we go

00:58:18,480 --> 00:58:22,319
deploying to production is underway

00:58:20,559 --> 00:58:24,960
again with a different publish token

00:58:22,319 --> 00:58:24,960
from staging

00:58:26,400 --> 00:58:32,079
and with that we're deployed i'm going

00:58:28,319 --> 00:58:32,079
to click the url just to validate

00:58:33,520 --> 00:58:37,920
great head over to skyline.github.com if

00:58:36,799 --> 00:58:39,680
you want to check out your own

00:58:37,920 --> 00:58:43,440
contribution graph in 3d

00:58:39,680 --> 00:58:46,079
back to you shanku thank you katie

00:58:43,440 --> 00:58:47,119
so there we are a complete way to build

00:58:46,079 --> 00:58:49,440
end to end

00:58:47,119 --> 00:58:50,960
join a team get into the code make your

00:58:49,440 --> 00:58:52,880
first contribution

00:58:50,960 --> 00:58:54,799
get code reviewed with your peers with

00:58:52,880 --> 00:58:57,280
the help of automated ci

00:58:54,799 --> 00:58:59,040
to keep your code and your secrets and

00:58:57,280 --> 00:59:01,920
your dependencies secure

00:58:59,040 --> 00:59:02,240
and test and ship and celebrate together

00:59:01,920 --> 00:59:05,280
now

00:59:02,240 --> 00:59:06,160
all asynchronous all remote friendly all

00:59:05,280 --> 00:59:08,240
available from

00:59:06,160 --> 00:59:09,359
anywhere in the world on github's planet

00:59:08,240 --> 00:59:11,680
scale cloud

00:59:09,359 --> 00:59:14,319
now software teams all across the world

00:59:11,680 --> 00:59:16,839
are using github to do incredible things

00:59:14,319 --> 00:59:19,119
one set story comes from india's own

00:59:16,839 --> 00:59:21,359
infosys

00:59:19,119 --> 00:59:23,040
like our most visionary clients partners

00:59:21,359 --> 00:59:25,200
our goal is to become a completely

00:59:23,040 --> 00:59:28,480
knowledge and data driven organization

00:59:25,200 --> 00:59:30,240
with agility built into our core so that

00:59:28,480 --> 00:59:31,520
we can sense all the business changes

00:59:30,240 --> 00:59:34,240
happening around us

00:59:31,520 --> 00:59:35,200
and continuously evolve in response at

00:59:34,240 --> 00:59:36,880
infosys

00:59:35,200 --> 00:59:38,799
we are envisioning ourselves to be a

00:59:36,880 --> 00:59:40,000
live enterprise powered by our digital

00:59:38,799 --> 00:59:42,240
platforms

00:59:40,000 --> 00:59:43,359
our developers architects and

00:59:42,240 --> 00:59:45,359
practitioners

00:59:43,359 --> 00:59:47,680
are at the forefront of this leading it

00:59:45,359 --> 00:59:48,799
for us and our endeavor is to enhance

00:59:47,680 --> 00:59:51,040
their experience

00:59:48,799 --> 00:59:52,960
make them highly effective and efficient

00:59:51,040 --> 00:59:55,440
in everything that they are doing

00:59:52,960 --> 00:59:57,599
our digital platforms for productivity

00:59:55,440 --> 01:00:00,160
and the engineering tools ecosystem

00:59:57,599 --> 01:00:02,240
allows us to do this at scale and drive

01:00:00,160 --> 01:00:05,040
any change at the organization level

01:00:02,240 --> 01:00:05,760
in an accelerated manner our engineering

01:00:05,040 --> 01:00:08,720
tools

01:00:05,760 --> 01:00:10,000
and the continuously evolving ecosystem

01:00:08,720 --> 01:00:12,720
of home grown

01:00:10,000 --> 01:00:14,799
open source and off the shelf tooling

01:00:12,720 --> 01:00:17,839
forms an important cog in the wheel

01:00:14,799 --> 01:00:19,440
to drive agility and scale in a secured

01:00:17,839 --> 01:00:22,799
manner

01:00:19,440 --> 01:00:26,240
for instance infosys devsecops platform

01:00:22,799 --> 01:00:26,880
polycloud meridian leap modernization

01:00:26,240 --> 01:00:28,880
suit

01:00:26,880 --> 01:00:30,799
are some of the examples of assets that

01:00:28,880 --> 01:00:32,480
power this for us

01:00:30,799 --> 01:00:34,799
github is a critical element of this

01:00:32,480 --> 01:00:36,480
ecosystem and is central to driving

01:00:34,799 --> 01:00:39,839
developer productivity

01:00:36,480 --> 01:00:40,079
secure sdlc inner sourcing reusability

01:00:39,839 --> 01:00:41,760
and

01:00:40,079 --> 01:00:44,559
augmenting the developer analytics for

01:00:41,760 --> 01:00:46,880
us it is unifying the experience of

01:00:44,559 --> 01:00:47,680
of our developers by a variety of

01:00:46,880 --> 01:00:50,480
integrations

01:00:47,680 --> 01:00:52,000
around the robust devsecops ecosystem it

01:00:50,480 --> 01:00:53,440
is also a key enabler

01:00:52,000 --> 01:00:55,599
for a live enterprise store and

01:00:53,440 --> 01:00:56,319
marketplace where we plan to bring

01:00:55,599 --> 01:00:58,000
together

01:00:56,319 --> 01:01:00,880
the community of cloud builders on

01:00:58,000 --> 01:01:03,839
cobalt from amongst our partners

01:01:00,880 --> 01:01:04,720
clients open source academia and the

01:01:03,839 --> 01:01:06,720
startups

01:01:04,720 --> 01:01:08,240
to drive contributions and consumption

01:01:06,720 --> 01:01:10,559
of various assets

01:01:08,240 --> 01:01:12,720
as well as enhance the ecosystem with an

01:01:10,559 --> 01:01:14,400
open source first thinking

01:01:12,720 --> 01:01:16,160
something i believe that any

01:01:14,400 --> 01:01:18,319
forward-looking enterprise

01:01:16,160 --> 01:01:20,559
engineering teams and developers would

01:01:18,319 --> 01:01:22,400
appreciate in a big big way

01:01:20,559 --> 01:01:25,040
as the github team continues to drive

01:01:22,400 --> 01:01:26,640
the roadmap i look forward to seeing

01:01:25,040 --> 01:01:28,400
several of the new capabilities around

01:01:26,640 --> 01:01:30,960
security code scanning

01:01:28,400 --> 01:01:32,400
telemetry observability analytics and

01:01:30,960 --> 01:01:35,119
github actions

01:01:32,400 --> 01:01:35,599
that can keep on taking us ahead in our

01:01:35,119 --> 01:01:39,599
journey

01:01:35,599 --> 01:01:41,599
as a live enterprise it is exciting to

01:01:39,599 --> 01:01:43,760
see what companies like infosys

01:01:41,599 --> 01:01:44,720
and you the developer community here in

01:01:43,760 --> 01:01:47,200
india

01:01:44,720 --> 01:01:48,799
how you're using github every day to

01:01:47,200 --> 01:01:51,359
create amazing things

01:01:48,799 --> 01:01:52,480
thank you you inspire us to keep making

01:01:51,359 --> 01:01:54,799
github better

01:01:52,480 --> 01:01:55,599
in just the last six months we have

01:01:54,799 --> 01:01:58,160
shipped over

01:01:55,599 --> 01:01:59,839
100 new features and improvements

01:01:58,160 --> 01:02:00,880
including many of the features you just

01:01:59,839 --> 01:02:02,720
saw

01:02:00,880 --> 01:02:04,400
all you need to do to get started with

01:02:02,720 --> 01:02:07,680
github is available

01:02:04,400 --> 01:02:09,280
for free on github.com for developers

01:02:07,680 --> 01:02:11,280
and teams of any size

01:02:09,280 --> 01:02:13,039
so if you're just learning to code or

01:02:11,280 --> 01:02:15,440
contributing to open source

01:02:13,039 --> 01:02:16,559
or starting a new team or or starting

01:02:15,440 --> 01:02:19,760
your own startup

01:02:16,559 --> 01:02:21,920
you can do that on github for free today

01:02:19,760 --> 01:02:23,920
all right thank you for joining us on

01:02:21,920 --> 01:02:26,480
this tour today this was fun to do

01:02:23,920 --> 01:02:28,079
i hope you enjoy using github as much as

01:02:26,480 --> 01:02:30,240
we love building it

01:02:28,079 --> 01:02:32,400
as it turns out we're not just building

01:02:30,240 --> 01:02:35,039
developer tools for global teams

01:02:32,400 --> 01:02:35,440
we are one ourselves github has always

01:02:35,039 --> 01:02:38,160
been

01:02:35,440 --> 01:02:40,799
a remote first company and we now have

01:02:38,160 --> 01:02:43,520
developers from over 15 countries

01:02:40,799 --> 01:02:44,640
working together as one team and a big

01:02:43,520 --> 01:02:46,720
part of our team

01:02:44,640 --> 01:02:48,799
is the github team in india they're

01:02:46,720 --> 01:02:51,520
building github on github

01:02:48,799 --> 01:02:53,280
with the rest of us so in closing it's

01:02:51,520 --> 01:02:56,480
my pleasure to introduce you

01:02:53,280 --> 01:02:58,799
to the github team here in india i am

01:02:56,480 --> 01:03:01,680
sanjay malpani i work from hyderabad

01:02:58,799 --> 01:03:02,559
as vp of software engineering i love our

01:03:01,680 --> 01:03:04,720
dedication

01:03:02,559 --> 01:03:07,680
and focus on building one of the

01:03:04,720 --> 01:03:10,160
greatest developer experiences

01:03:07,680 --> 01:03:12,240
country manager of github in india based

01:03:10,160 --> 01:03:14,160
in delhi i love working at github

01:03:12,240 --> 01:03:16,799
because i get an opportunity to support

01:03:14,160 --> 01:03:18,000
developers students and customers that

01:03:16,799 --> 01:03:19,760
are driving india's growth

01:03:18,000 --> 01:03:21,520
i'm atul malvia director product

01:03:19,760 --> 01:03:22,960
management at github i love working in

01:03:21,520 --> 01:03:24,640
the top across catalyst for the world

01:03:22,960 --> 01:03:26,559
build software hi this is divya

01:03:24,640 --> 01:03:27,839
vaishnavi director of product for github

01:03:26,559 --> 01:03:30,160
education i love

01:03:27,839 --> 01:03:32,319
being at github as i can empower the

01:03:30,160 --> 01:03:32,960
lives of students and teachers across

01:03:32,319 --> 01:03:34,720
the globe

01:03:32,960 --> 01:03:36,880
i am mohit enterprise solutions

01:03:34,720 --> 01:03:39,200
specialist for asia region i have the

01:03:36,880 --> 01:03:40,160
opportunity to do the best work of my

01:03:39,200 --> 01:03:41,920
career so far

01:03:40,160 --> 01:03:43,599
i'm namas and i'm the regional sales

01:03:41,920 --> 01:03:45,520
director for github india

01:03:43,599 --> 01:03:47,200
and i just love the fact that i'm able

01:03:45,520 --> 01:03:48,079
to empower the developers with the right

01:03:47,200 --> 01:03:50,160
set of tools

01:03:48,079 --> 01:03:51,119
to become the best in them hi this is

01:03:50,160 --> 01:03:53,119
pulkit agarwal

01:03:51,119 --> 01:03:55,039
i'm product manager here at github india

01:03:53,119 --> 01:03:55,920
github to me is an open platform a free

01:03:55,039 --> 01:03:57,920
marketplace

01:03:55,920 --> 01:03:59,839
hi i'm richard senior director for

01:03:57,920 --> 01:04:02,000
software engineering i get to empower

01:03:59,839 --> 01:04:05,039
developers of today and tomorrow

01:04:02,000 --> 01:04:07,760
this is satya what i do and my teams do

01:04:05,039 --> 01:04:08,240
impacts millions of developers across

01:04:07,760 --> 01:04:10,319
the world

01:04:08,240 --> 01:04:12,640
i'm shaishan gunsit i'm product manager

01:04:10,319 --> 01:04:14,640
for the github marketplace together we

01:04:12,640 --> 01:04:16,640
make the best software solutions come to

01:04:14,640 --> 01:04:18,799
life my name is

01:04:16,640 --> 01:04:20,160
the head of finance for github india i

01:04:18,799 --> 01:04:22,480
love working for github

01:04:20,160 --> 01:04:23,280
because of the amazing people around me

01:04:22,480 --> 01:04:25,760
i'm usha

01:04:23,280 --> 01:04:26,559
product manager at github i love working

01:04:25,760 --> 01:04:29,039
at github

01:04:26,559 --> 01:04:30,559
because everything that i do can impact

01:04:29,039 --> 01:04:32,880
millions of developers

01:04:30,559 --> 01:04:41,839
who love to share their work and build

01:04:32,880 --> 01:04:41,839
some great software products together

01:04:44,799 --> 01:04:49,359
good morning india and i'm super excited

01:04:47,200 --> 01:04:52,799
to reconnect with you all again today on

01:04:49,359 --> 01:04:55,680
day two of github satellite india

01:04:52,799 --> 01:04:56,559
a warm warm welcome to you all and this

01:04:55,680 --> 01:04:58,079
is mohit

01:04:56,559 --> 01:05:00,559
enterprise solutions specialist at

01:04:58,079 --> 01:05:02,079
github joining you live from delhi

01:05:00,559 --> 01:05:06,640
and let's make some noise for the

01:05:02,079 --> 01:05:06,640
bestest co-host divya vaishnavi

01:05:06,839 --> 01:05:14,079
yay namaste and hello and welcome

01:05:10,480 --> 01:05:16,880
everyone to github satellite india 2021

01:05:14,079 --> 01:05:18,799
i am vivia vashnavi director of product

01:05:16,880 --> 01:05:22,240
and live streaming live

01:05:18,799 --> 01:05:24,480
from hyderabad day one was so much

01:05:22,240 --> 01:05:25,440
fun and day two has started at such a

01:05:24,480 --> 01:05:28,160
high note

01:05:25,440 --> 01:05:29,520
i still can't get over the big programs

01:05:28,160 --> 01:05:32,160
launched yesterday

01:05:29,520 --> 01:05:33,599
what was the highlight for you but

01:05:32,160 --> 01:05:37,280
before we start

01:05:33,599 --> 01:05:40,720
can i get a cup of coffee too please

01:05:37,280 --> 01:05:44,000
uh-huh diva you will have to win it

01:05:40,720 --> 01:05:47,039
so let me ask you something okay

01:05:44,000 --> 01:05:48,720
yesterday we announced a new program for

01:05:47,039 --> 01:05:51,760
the future software developers

01:05:48,720 --> 01:05:54,400
in india what was that

01:05:51,760 --> 01:05:55,920
oh i got that that's the github

01:05:54,400 --> 01:05:58,799
externships program

01:05:55,920 --> 01:05:59,760
and what you know students don't get the

01:05:58,799 --> 01:06:03,039
opportunities

01:05:59,760 --> 01:06:04,880
to get mentorship to learn on real

01:06:03,039 --> 01:06:06,079
problems and this program actually

01:06:04,880 --> 01:06:09,200
connects the dots

01:06:06,079 --> 01:06:12,160
it connects open source companies and

01:06:09,200 --> 01:06:14,799
students all together so what was the

01:06:12,160 --> 01:06:16,799
big highlight for you

01:06:14,799 --> 01:06:18,640
before that just take it away and make

01:06:16,799 --> 01:06:23,359
this coffee yours

01:06:18,640 --> 01:06:24,960
oh yes thank you

01:06:23,359 --> 01:06:27,039
yes the big highlight for me was

01:06:24,960 --> 01:06:27,839
actually celebrating the colors the

01:06:27,039 --> 01:06:30,240
cultures

01:06:27,839 --> 01:06:31,520
and the developer tribe here in india

01:06:30,240 --> 01:06:34,000
but now today

01:06:31,520 --> 01:06:37,280
it's time for day two and what an

01:06:34,000 --> 01:06:41,920
electrifying keynote yet again

01:06:37,280 --> 01:06:45,680
oh yes such an amazing keynote by chanco

01:06:41,920 --> 01:06:46,480
showcase of products and 100 plus

01:06:45,680 --> 01:06:49,440
features

01:06:46,480 --> 01:06:51,599
released in the last six months so next

01:06:49,440 --> 01:06:52,079
time you go on github and find a new

01:06:51,599 --> 01:06:54,319
goodie

01:06:52,079 --> 01:06:56,160
don't be surprised we are active at work

01:06:54,319 --> 01:06:59,599
here code spaces

01:06:56,160 --> 01:07:02,799
to reduce your time and develop from

01:06:59,599 --> 01:07:05,359
any box anywhere on the world

01:07:02,799 --> 01:07:06,799
releases for continuous deployment

01:07:05,359 --> 01:07:10,319
obviously discussions

01:07:06,799 --> 01:07:13,920
issues you name it and we have it all

01:07:10,319 --> 01:07:14,880
folks today is actually a day of github

01:07:13,920 --> 01:07:17,200
we share

01:07:14,880 --> 01:07:19,280
under the hood what is happening in

01:07:17,200 --> 01:07:21,520
github how github is built

01:07:19,280 --> 01:07:22,720
using github how github uses

01:07:21,520 --> 01:07:26,319
collaboration

01:07:22,720 --> 01:07:27,200
with github and ship using github ml ops

01:07:26,319 --> 01:07:29,039
with github

01:07:27,200 --> 01:07:31,440
everything github github github github

01:07:29,039 --> 01:07:31,440
github

01:07:32,720 --> 01:07:36,400
oh yes it's going to be amazing so david

01:07:34,880 --> 01:07:39,200
i have a small challenge for you

01:07:36,400 --> 01:07:39,760
and i am giving you a chance to win

01:07:39,200 --> 01:07:43,119
these

01:07:39,760 --> 01:07:44,240
amazing github goodies and make them all

01:07:43,119 --> 01:07:46,880
yours

01:07:44,240 --> 01:07:48,720
but only if you answer my questions and

01:07:46,880 --> 01:07:51,039
if i answer yours

01:07:48,720 --> 01:07:53,440
i will empty your shelves out there and

01:07:51,039 --> 01:07:55,520
will get all the goodies

01:07:53,440 --> 01:07:58,240
let's see who does that who empties the

01:07:55,520 --> 01:07:59,920
shelves i'm up for it okay

01:07:58,240 --> 01:08:02,559
okay so here is my first question for

01:07:59,920 --> 01:08:05,599
you we announced

01:08:02,559 --> 01:08:08,160
a lovely yoga cat yesterday

01:08:05,599 --> 01:08:09,280
and we shared it with everybody i'm sure

01:08:08,160 --> 01:08:11,760
you noticed it

01:08:09,280 --> 01:08:12,480
you got to tell me what is the yoga pose

01:08:11,760 --> 01:08:16,480
in which yoga

01:08:12,480 --> 01:08:19,679
cat is sitting oh my god

01:08:16,480 --> 01:08:22,719
is it the nindra mudra

01:08:19,679 --> 01:08:26,080
no no no no it's

01:08:22,719 --> 01:08:26,960
the lotus pose the padmasana and with

01:08:26,080 --> 01:08:30,000
that

01:08:26,960 --> 01:08:33,520
i'm gonna get a goodie from you

01:08:30,000 --> 01:08:33,520
okay here you go

01:08:33,600 --> 01:08:37,520
you've been here and i'm so excited to

01:08:36,080 --> 01:08:40,400
just kick off the day now

01:08:37,520 --> 01:08:41,920
i wish that we are you were right but

01:08:40,400 --> 01:08:44,480
audience

01:08:41,920 --> 01:08:45,359
tune in and i'm so much excited to hear

01:08:44,480 --> 01:08:48,159
from you again

01:08:45,359 --> 01:08:49,920
on twitter so hashtag satellite tell us

01:08:48,159 --> 01:08:51,839
what you thought about the keynote

01:08:49,920 --> 01:08:53,520
what you like the most from day one and

01:08:51,839 --> 01:08:55,040
most importantly what are you looking

01:08:53,520 --> 01:08:57,920
forward to and excited about

01:08:55,040 --> 01:08:59,040
in day two in day two again we have two

01:08:57,920 --> 01:09:01,600
channels for you

01:08:59,040 --> 01:09:02,640
one on devops second on open source and

01:09:01,600 --> 01:09:04,960
if you're watching us

01:09:02,640 --> 01:09:07,199
on getupsatellite.com you can change the

01:09:04,960 --> 01:09:09,359
channels on the top

01:09:07,199 --> 01:09:11,440
go check out current and anisha who did

01:09:09,359 --> 01:09:13,839
an amazing job yesterday

01:09:11,440 --> 01:09:16,080
and we won't mind that at all come back

01:09:13,839 --> 01:09:19,120
whenever you want and if you miss any of

01:09:16,080 --> 01:09:21,600
the talks here you can get that

01:09:19,120 --> 01:09:24,319
on demand later on 29th march that's

01:09:21,600 --> 01:09:27,279
karen anisha for you

01:09:24,319 --> 01:09:28,080
and here is the attendee survey just go

01:09:27,279 --> 01:09:30,480
we want to hear

01:09:28,080 --> 01:09:31,759
your feedback click on the link below

01:09:30,480 --> 01:09:34,799
the video and share

01:09:31,759 --> 01:09:37,359
your feedback as well as discuss

01:09:34,799 --> 01:09:38,159
with us on discussions on any topic you

01:09:37,359 --> 01:09:40,480
want to discuss

01:09:38,159 --> 01:09:41,759
during the session post the session use

01:09:40,480 --> 01:09:44,560
discussions to discuss

01:09:41,759 --> 01:09:46,640
with us so come to discussions talk to

01:09:44,560 --> 01:09:49,199
us with our subject matter experts

01:09:46,640 --> 01:09:50,880
the speakers and mohit and i will bring

01:09:49,199 --> 01:09:54,480
questions from there

01:09:50,880 --> 01:09:55,600
live with the speakers yesterday's

01:09:54,480 --> 01:09:58,960
workshop

01:09:55,600 --> 01:10:00,080
were super awesome we have like so many

01:09:58,960 --> 01:10:02,800
folks asking

01:10:00,080 --> 01:10:04,640
to register more so folks will come back

01:10:02,800 --> 01:10:07,280
with more workshops like this

01:10:04,640 --> 01:10:07,840
but remember today again the workshop

01:10:07,280 --> 01:10:10,239
starts

01:10:07,840 --> 01:10:11,600
at 3 p.m if you have not signed up go

01:10:10,239 --> 01:10:15,040
ahead and sign up

01:10:11,600 --> 01:10:18,080
so what's coming up today mohit

01:10:15,040 --> 01:10:18,880
we got so much on both the channels at

01:10:18,080 --> 01:10:21,920
devops

01:10:18,880 --> 01:10:22,640
we are gonna getting into mlaps workflow

01:10:21,920 --> 01:10:24,560
automation

01:10:22,640 --> 01:10:26,159
and github actions and we have got

01:10:24,560 --> 01:10:27,920
speakers from github

01:10:26,159 --> 01:10:29,840
as well as some of our favorite

01:10:27,920 --> 01:10:31,520
customers who will be talking to you and

01:10:29,840 --> 01:10:33,199
answering all your queries

01:10:31,520 --> 01:10:34,640
on open source we'll be covering about

01:10:33,199 --> 01:10:38,080
the ci workflows

01:10:34,640 --> 01:10:39,199
ai for the web and how to do github like

01:10:38,080 --> 01:10:44,159
a boss

01:10:39,199 --> 01:10:47,840
so without further ado let's get into it

01:10:44,159 --> 01:10:48,239
okay so the first session is overview of

01:10:47,840 --> 01:10:51,360
how

01:10:48,239 --> 01:10:53,760
we build our platform or sneak pew into

01:10:51,360 --> 01:10:54,560
our engineering culture and development

01:10:53,760 --> 01:10:57,120
in india

01:10:54,560 --> 01:10:58,320
and it gives me immense pleasure to

01:10:57,120 --> 01:11:00,239
invite

01:10:58,320 --> 01:11:02,000
and introduce the person who's doing the

01:11:00,239 --> 01:11:03,760
talk that's sanjay malphani

01:11:02,000 --> 01:11:05,520
i've worked closely with him for the

01:11:03,760 --> 01:11:08,560
last five six years

01:11:05,520 --> 01:11:11,360
no he's a developer at heart and a minor

01:11:08,560 --> 01:11:12,159
for data sanjay malpani is the vp of

01:11:11,360 --> 01:11:14,960
engineering

01:11:12,159 --> 01:11:17,280
software engineering at github he loves

01:11:14,960 --> 01:11:18,159
to engineer solutions to real customer

01:11:17,280 --> 01:11:20,000
problems

01:11:18,159 --> 01:11:22,000
has worked in multiple startups and

01:11:20,000 --> 01:11:24,320
large enterprises both in india

01:11:22,000 --> 01:11:25,520
and us and like i said leads the

01:11:24,320 --> 01:11:29,760
engineering team

01:11:25,520 --> 01:11:30,719
in india remember to engage with us on

01:11:29,760 --> 01:11:34,960
discussions

01:11:30,719 --> 01:11:34,960
with that sanjay take it away

01:11:35,520 --> 01:11:39,440
hi thank you deviant mohit hello

01:11:38,400 --> 01:11:41,600
everyone

01:11:39,440 --> 01:11:44,239
thanks for tuning in to this session and

01:11:41,600 --> 01:11:47,199
staying on to this track

01:11:44,239 --> 01:11:48,320
today um i'm going to talk to you about

01:11:47,199 --> 01:11:49,760
how we build

01:11:48,320 --> 01:11:52,640
github i'm going to give you the

01:11:49,760 --> 01:11:55,840
insider's view but before i start

01:11:52,640 --> 01:11:58,800
i am vp of software engineering i work

01:11:55,840 --> 01:12:00,159
uh from hyderabad uh we have a large

01:11:58,800 --> 01:12:01,600
presence of

01:12:00,159 --> 01:12:03,920
you know engineering team here and we'll

01:12:01,600 --> 01:12:06,320
talk about it a little bit more

01:12:03,920 --> 01:12:07,040
so in today's talk what i'm going to

01:12:06,320 --> 01:12:09,920
share is

01:12:07,040 --> 01:12:11,920
our engineering practices our tooling

01:12:09,920 --> 01:12:15,120
and our automation

01:12:11,920 --> 01:12:17,120
this will probably give you some hints

01:12:15,120 --> 01:12:18,960
and some of the practices that you can

01:12:17,120 --> 01:12:22,560
use building your own

01:12:18,960 --> 01:12:24,719
software using github

01:12:22,560 --> 01:12:26,560
apart from that if you really like what

01:12:24,719 --> 01:12:28,719
we do and the exciting

01:12:26,560 --> 01:12:30,159
work that we do you can always reach out

01:12:28,719 --> 01:12:34,320
to me on my handle

01:12:30,159 --> 01:12:37,040
later on but before we get started about

01:12:34,320 --> 01:12:38,400
how we build github let me actually give

01:12:37,040 --> 01:12:41,440
you a sense of

01:12:38,400 --> 01:12:43,040
the scale at which these software have

01:12:41,440 --> 01:12:45,840
to operate

01:12:43,040 --> 01:12:46,880
the best way to start about the scale is

01:12:45,840 --> 01:12:50,480
to sort of know

01:12:46,880 --> 01:12:53,040
how many developers are using it

01:12:50,480 --> 01:12:54,159
so you do know that the github is the

01:12:53,040 --> 01:12:56,159
home for developer

01:12:54,159 --> 01:12:58,239
across the world what does it really

01:12:56,159 --> 01:13:00,239
translate to what it translates to is

01:12:58,239 --> 01:13:04,800
that we have 56 million

01:13:00,239 --> 01:13:07,199
developers that work and use github

01:13:04,800 --> 01:13:08,000
they have created hundreds of 100

01:13:07,199 --> 01:13:11,280
million

01:13:08,000 --> 01:13:14,320
repos and by the way this number

01:13:11,280 --> 01:13:15,840
is uh you know continues to grow

01:13:14,320 --> 01:13:17,679
now when you look at it from these

01:13:15,840 --> 01:13:20,320
numbers perspective

01:13:17,679 --> 01:13:21,679
what is the infrastructure that we use

01:13:20,320 --> 01:13:24,080
to sort of support

01:13:21,679 --> 01:13:24,719
these many developers we are running

01:13:24,080 --> 01:13:26,640
this stuff

01:13:24,719 --> 01:13:28,640
our infrastructure which is just i'm

01:13:26,640 --> 01:13:32,239
talking about github.com

01:13:28,640 --> 01:13:36,080
our public site it uses close to 50

01:13:32,239 --> 01:13:40,159
000 cores of cpu it hosts about

01:13:36,080 --> 01:13:42,560
uh 26 000 cubitis pods

01:13:40,159 --> 01:13:43,679
so what it really means is that whatever

01:13:42,560 --> 01:13:46,719
you do

01:13:43,679 --> 01:13:49,760
whatever work that we do and it needs to

01:13:46,719 --> 01:13:52,159
run at the scale and it goes out to so

01:13:49,760 --> 01:13:53,840
many developers isn't that cool

01:13:52,159 --> 01:13:56,320
by the way this numbers that i'm talking

01:13:53,840 --> 01:13:57,440
about is expected to grow from 56

01:13:56,320 --> 01:14:01,040
million developer

01:13:57,440 --> 01:14:02,800
to 100 million by 2025 isn't it cool

01:14:01,040 --> 01:14:04,239
the kind of scale that we need to deal

01:14:02,800 --> 01:14:07,040
with

01:14:04,239 --> 01:14:07,920
now that's just the scale of how it is

01:14:07,040 --> 01:14:10,080
being used

01:14:07,920 --> 01:14:11,920
but let me dive deeper now and tell you

01:14:10,080 --> 01:14:14,239
that you know from an engineer

01:14:11,920 --> 01:14:16,239
who is at github what does it really

01:14:14,239 --> 01:14:18,400
mean so we are about thousand

01:14:16,239 --> 01:14:20,480
plus engineers who are working on this

01:14:18,400 --> 01:14:23,360
product simultaneously ashtangku talked

01:14:20,480 --> 01:14:26,239
about across the world

01:14:23,360 --> 01:14:27,199
we this translates to about 600 000

01:14:26,239 --> 01:14:30,239
builds

01:14:27,199 --> 01:14:33,199
in a month and that takes about

01:14:30,239 --> 01:14:34,960
half an hour to build in 98 percentile

01:14:33,199 --> 01:14:38,320
of the time

01:14:34,960 --> 01:14:40,640
we care about how that experience is for

01:14:38,320 --> 01:14:42,320
the developer so we also monitor

01:14:40,640 --> 01:14:44,719
what is the reliability of this build

01:14:42,320 --> 01:14:47,120
system that we have

01:14:44,719 --> 01:14:47,840
once you've done the build you know we

01:14:47,120 --> 01:14:51,120
also watch

01:14:47,840 --> 01:14:53,920
how long does it take to deploy these

01:14:51,120 --> 01:14:54,640
onto our production site so in the last

01:14:53,920 --> 01:14:57,760
month

01:14:54,640 --> 01:15:01,679
we made 535 deployments

01:14:57,760 --> 01:15:03,440
into our production site these 535

01:15:01,679 --> 01:15:06,640
deployments were the results of

01:15:03,440 --> 01:15:08,400
4 000 plus prs that were generated to be

01:15:06,640 --> 01:15:10,800
deployed onto the production

01:15:08,400 --> 01:15:11,440
so you can see that you know look not we

01:15:10,800 --> 01:15:13,920
sort of

01:15:11,440 --> 01:15:16,000
seem to do some magic to make it into

01:15:13,920 --> 01:15:16,880
file 35 deployment we actually create a

01:15:16,000 --> 01:15:19,120
train

01:15:16,880 --> 01:15:21,120
which combines multiple pr's and then

01:15:19,120 --> 01:15:23,600
deploy them together

01:15:21,120 --> 01:15:24,640
this entire deployment finishes in two

01:15:23,600 --> 01:15:28,400
and a half hours to

01:15:24,640 --> 01:15:31,440
2.8 hours in the 90th percentile

01:15:28,400 --> 01:15:35,360
so you can see that a

01:15:31,440 --> 01:15:37,199
pr from build to deploy for 90th

01:15:35,360 --> 01:15:38,719
percentile of a time takes about three

01:15:37,199 --> 01:15:41,280
and a half hours

01:15:38,719 --> 01:15:42,960
amazing isn't it as a developer i start

01:15:41,280 --> 01:15:44,480
working on something and i'm ready

01:15:42,960 --> 01:15:46,640
and that's available on production to

01:15:44,480 --> 01:15:48,719
all all of my users

01:15:46,640 --> 01:15:50,239
in three and a half hours that's really

01:15:48,719 --> 01:15:52,800
is the is the

01:15:50,239 --> 01:15:53,600
kind of then we develop we deploy under

01:15:52,800 --> 01:15:55,920
production

01:15:53,600 --> 01:15:58,239
and then we operate this live site and

01:15:55,920 --> 01:16:00,000
this loop continues

01:15:58,239 --> 01:16:02,800
the biggest focus in this loop is that

01:16:00,000 --> 01:16:06,080
we want to make sure that it's reliable

01:16:02,800 --> 01:16:08,640
it is secure and it is fast

01:16:06,080 --> 01:16:09,360
which means that i can repeat you know

01:16:08,640 --> 01:16:11,040
quicker

01:16:09,360 --> 01:16:13,199
so you saw that right that you know from

01:16:11,040 --> 01:16:14,159
develop to deploy it only take three and

01:16:13,199 --> 01:16:15,920
a half hours

01:16:14,159 --> 01:16:18,880
and this is something we are not happy

01:16:15,920 --> 01:16:21,760
we want to continue to improve on it

01:16:18,880 --> 01:16:22,400
the other thing about this devops cycle

01:16:21,760 --> 01:16:25,520
is

01:16:22,400 --> 01:16:28,320
it's focused on developer on team

01:16:25,520 --> 01:16:28,960
and so we have made sure that this cycle

01:16:28,320 --> 01:16:31,199
can be run

01:16:28,960 --> 01:16:32,480
independently with each developer and

01:16:31,199 --> 01:16:34,320
each team

01:16:32,480 --> 01:16:35,760
that empowers them right that empowers

01:16:34,320 --> 01:16:36,560
them to sort of say that whenever they

01:16:35,760 --> 01:16:39,199
are ready

01:16:36,560 --> 01:16:41,360
they can deploy and this is this just

01:16:39,199 --> 01:16:42,719
creates a very different kind of energy

01:16:41,360 --> 01:16:45,040
in the team

01:16:42,719 --> 01:16:46,239
we also make sure that everything is

01:16:45,040 --> 01:16:49,120
written down

01:16:46,239 --> 01:16:50,400
so that increase the trust in the people

01:16:49,120 --> 01:16:53,760
in the developer

01:16:50,400 --> 01:16:57,840
right and and it really creates

01:16:53,760 --> 01:16:59,679
a kind of collaboration built on a trust

01:16:57,840 --> 01:17:02,880
and we have made sure that we also have

01:16:59,679 --> 01:17:06,000
tools that we are using processes

01:17:02,880 --> 01:17:09,440
that we're using that encourages this

01:17:06,000 --> 01:17:10,640
this collaboration we use slack we use

01:17:09,440 --> 01:17:12,880
github

01:17:10,640 --> 01:17:13,920
to sort of document our you know

01:17:12,880 --> 01:17:16,159
discussions

01:17:13,920 --> 01:17:18,000
and you will see this in the examples as

01:17:16,159 --> 01:17:21,520
i go forward

01:17:18,000 --> 01:17:23,520
so let me start with planning first

01:17:21,520 --> 01:17:26,400
so our planning the first thing that we

01:17:23,520 --> 01:17:28,840
start off with is a public roadmap

01:17:26,400 --> 01:17:31,280
so you can go to our github public

01:17:28,840 --> 01:17:33,760
website and you will find that

01:17:31,280 --> 01:17:34,880
we have put out a public roadmap this

01:17:33,760 --> 01:17:39,199
public roadmap

01:17:34,880 --> 01:17:41,840
is our intent to let our customers know

01:17:39,199 --> 01:17:42,960
what we are planning to release in in

01:17:41,840 --> 01:17:46,080
coming quarter

01:17:42,960 --> 01:17:47,360
or few quarters down the line

01:17:46,080 --> 01:17:49,840
it's very important because our

01:17:47,360 --> 01:17:53,120
customers depend depend on us

01:17:49,840 --> 01:17:55,679
on our features that we are providing

01:17:53,120 --> 01:17:56,320
so i have only picked up a one quarter

01:17:55,679 --> 01:17:58,320
worth of

01:17:56,320 --> 01:17:59,520
you know small slice but you can go to

01:17:58,320 --> 01:18:02,719
site and look at

01:17:59,520 --> 01:18:06,960
others this is backed by

01:18:02,719 --> 01:18:09,520
the okr which is an internal process

01:18:06,960 --> 01:18:10,800
the objective and key results is what

01:18:09,520 --> 01:18:13,360
every team does

01:18:10,800 --> 01:18:14,159
every quarter so every quarter we come

01:18:13,360 --> 01:18:17,360
together

01:18:14,159 --> 01:18:19,440
as a company and decide what would we do

01:18:17,360 --> 01:18:20,880
for that quarter what are the objectives

01:18:19,440 --> 01:18:22,000
and the key results that we want to

01:18:20,880 --> 01:18:23,920
achieve

01:18:22,000 --> 01:18:26,080
when all the teams come together it's

01:18:23,920 --> 01:18:28,719
also easier to make sure that

01:18:26,080 --> 01:18:29,600
the dependencies with each other is also

01:18:28,719 --> 01:18:32,719
sorted out

01:18:29,600 --> 01:18:35,360
so in this example the objective is that

01:18:32,719 --> 01:18:36,719
we want to make sure that student

01:18:35,360 --> 01:18:40,239
developers

01:18:36,719 --> 01:18:43,040
make github global campus to home this

01:18:40,239 --> 01:18:43,840
objective have a clear key results

01:18:43,040 --> 01:18:45,840
defined

01:18:43,840 --> 01:18:47,520
and as you can see each of these

01:18:45,840 --> 01:18:49,840
objectives has a

01:18:47,520 --> 01:18:52,480
particular person who's responsible for

01:18:49,840 --> 01:18:54,800
it and then we continue to track this

01:18:52,480 --> 01:18:56,640
over the quarter every month we score

01:18:54,800 --> 01:18:58,239
ourselves course correct wherever is

01:18:56,640 --> 01:19:01,520
needed

01:18:58,239 --> 01:19:03,199
this okr then translates into initiative

01:19:01,520 --> 01:19:04,880
this is really the kind of work that we

01:19:03,199 --> 01:19:06,239
will end up doing to make sure that

01:19:04,880 --> 01:19:09,120
those key results are

01:19:06,239 --> 01:19:10,640
uh something that we can achieve from

01:19:09,120 --> 01:19:13,760
these initiatives

01:19:10,640 --> 01:19:14,719
we translate them down to epics epics

01:19:13,760 --> 01:19:17,840
are the

01:19:14,719 --> 01:19:20,320
the smallest piece of work that we bring

01:19:17,840 --> 01:19:23,600
it down to the customer

01:19:20,320 --> 01:19:26,159
so you can see when you look at it that

01:19:23,600 --> 01:19:27,520
we're being very intentional we want to

01:19:26,159 --> 01:19:30,080
make sure that we

01:19:27,520 --> 01:19:32,320
tell customers what we want to do and

01:19:30,080 --> 01:19:34,560
that intentionality is backed up

01:19:32,320 --> 01:19:35,520
by a process in okr which is written

01:19:34,560 --> 01:19:37,679
down

01:19:35,520 --> 01:19:39,440
complete transparency each team knows

01:19:37,679 --> 01:19:42,480
what the other team is doing

01:19:39,440 --> 01:19:43,679
and as well it creates a shared aligned

01:19:42,480 --> 01:19:46,800
goals

01:19:43,679 --> 01:19:48,239
and in initiative in epics we have made

01:19:46,800 --> 01:19:51,040
sure that this world

01:19:48,239 --> 01:19:52,960
is divided into small enough chunk that

01:19:51,040 --> 01:19:55,520
can be validated on its own

01:19:52,960 --> 01:19:56,080
and course corrected and you also notice

01:19:55,520 --> 01:19:58,480
that

01:19:56,080 --> 01:19:59,840
we create a lot of high prioritizations

01:19:58,480 --> 01:20:03,280
we are focused on

01:19:59,840 --> 01:20:05,120
only fewer things that really matters

01:20:03,280 --> 01:20:07,040
now that i talked about planning there

01:20:05,120 --> 01:20:07,840
is one thing that happens is that at the

01:20:07,040 --> 01:20:11,120
end of the day

01:20:07,840 --> 01:20:12,480
end of the end of the deployment we also

01:20:11,120 --> 01:20:14,880
have every month something called the

01:20:12,480 --> 01:20:16,880
change log i didn't show that because

01:20:14,880 --> 01:20:18,800
look most of the times what we start off

01:20:16,880 --> 01:20:19,760
is not necessarily all the time it gets

01:20:18,800 --> 01:20:22,719
to the chain block

01:20:19,760 --> 01:20:24,320
just like any other software well let me

01:20:22,719 --> 01:20:27,199
talk about the develop

01:20:24,320 --> 01:20:27,920
phase now now that we have a plan now

01:20:27,199 --> 01:20:31,040
the developer

01:20:27,920 --> 01:20:33,840
knows what needs to be done those

01:20:31,040 --> 01:20:35,199
initiated so those epics get translated

01:20:33,840 --> 01:20:37,920
into the features

01:20:35,199 --> 01:20:38,719
so in this example the epic is to sort

01:20:37,920 --> 01:20:40,880
of uh

01:20:38,719 --> 01:20:42,320
take our ms team's integration with

01:20:40,880 --> 01:20:45,440
github

01:20:42,320 --> 01:20:47,840
generally available so in that

01:20:45,440 --> 01:20:48,960
epic we need to do one feature called

01:20:47,840 --> 01:20:51,360
reminders

01:20:48,960 --> 01:20:53,440
uh for both personal and the team so you

01:20:51,360 --> 01:20:55,760
can see that very clearly in the future

01:20:53,440 --> 01:20:56,960
we identify the engineer who's

01:20:55,760 --> 01:20:58,800
responsible

01:20:56,960 --> 01:21:01,280
the product manager who's responsible

01:20:58,800 --> 01:21:04,560
and the designer was responsible

01:21:01,280 --> 01:21:07,280
to work on this feature these three form

01:21:04,560 --> 01:21:07,679
a team to deliver a feature there are

01:21:07,280 --> 01:21:10,000
such

01:21:07,679 --> 01:21:11,679
there are success criteria that are very

01:21:10,000 --> 01:21:14,719
clearly defined

01:21:11,679 --> 01:21:15,679
and in most cases you'll also see that

01:21:14,719 --> 01:21:18,000
you know

01:21:15,679 --> 01:21:18,880
what are the features or user stories

01:21:18,000 --> 01:21:21,840
that we need to do

01:21:18,880 --> 01:21:22,400
to complete this feature in some cases

01:21:21,840 --> 01:21:24,719
when

01:21:22,400 --> 01:21:25,520
it is not clear we start things with the

01:21:24,719 --> 01:21:28,480
spike

01:21:25,520 --> 01:21:30,080
which really helps us identify

01:21:28,480 --> 01:21:30,960
everything that is required for this

01:21:30,080 --> 01:21:33,280
feature

01:21:30,960 --> 01:21:34,080
so in this case once the spikes were

01:21:33,280 --> 01:21:36,639
done

01:21:34,080 --> 01:21:39,440
all other work and the user stories were

01:21:36,639 --> 01:21:42,800
identified very clearly

01:21:39,440 --> 01:21:44,000
but as the spikes were going on the way

01:21:42,800 --> 01:21:46,400
the theme would work

01:21:44,000 --> 01:21:47,199
is that continue to document their

01:21:46,400 --> 01:21:49,360
finding

01:21:47,199 --> 01:21:50,639
and this documentation really happens

01:21:49,360 --> 01:21:53,040
either on the issue

01:21:50,639 --> 01:21:55,120
or it happens in the repo itself and

01:21:53,040 --> 01:21:57,600
this provides a great means

01:21:55,120 --> 01:22:00,000
for everybody in the team to participate

01:21:57,600 --> 01:22:01,600
in fact outside the team as well because

01:22:00,000 --> 01:22:02,880
everything is visible to everybody and

01:22:01,600 --> 01:22:05,040
you can see that some of the

01:22:02,880 --> 01:22:07,280
conversation here that is going on

01:22:05,040 --> 01:22:08,480
and so not only that everybody got to

01:22:07,280 --> 01:22:11,199
participate

01:22:08,480 --> 01:22:13,280
we also have now historical

01:22:11,199 --> 01:22:14,960
documentation that anybody can come in

01:22:13,280 --> 01:22:17,120
and understand the context

01:22:14,960 --> 01:22:18,159
in which the decision was made and then

01:22:17,120 --> 01:22:20,239
they can actually

01:22:18,159 --> 01:22:22,080
take the next sort of decision uh

01:22:20,239 --> 01:22:24,719
appropriately

01:22:22,080 --> 01:22:25,199
once these things are sorted out a user

01:22:24,719 --> 01:22:28,719
story

01:22:25,199 --> 01:22:32,400
is then converted into tasks very clear

01:22:28,719 --> 01:22:35,199
end goals testing everything identified

01:22:32,400 --> 01:22:35,760
and eventually that results into a pr

01:22:35,199 --> 01:22:37,760
where

01:22:35,760 --> 01:22:39,280
team can collaborate further to provide

01:22:37,760 --> 01:22:41,040
the feedback to make sure

01:22:39,280 --> 01:22:43,600
that the developer is not not missing

01:22:41,040 --> 01:22:46,719
out something important

01:22:43,600 --> 01:22:48,880
once you've done that the pr is ready

01:22:46,719 --> 01:22:50,400
now we are trying to sort of take this

01:22:48,880 --> 01:22:52,320
pr to the deployment

01:22:50,400 --> 01:22:53,840
so the first thing that we do is to sort

01:22:52,320 --> 01:22:56,960
of uh test it

01:22:53,840 --> 01:22:58,560
right and we have lots of tests and

01:22:56,960 --> 01:23:01,199
which continues to grow

01:22:58,560 --> 01:23:02,560
but i mean the number you know roughly

01:23:01,199 --> 01:23:04,800
today is about

01:23:02,560 --> 01:23:06,639
five seven thousand test suite in the

01:23:04,800 --> 01:23:09,280
5000 files

01:23:06,639 --> 01:23:10,800
and this thing keeps growing so now this

01:23:09,280 --> 01:23:12,800
is the very important thing

01:23:10,800 --> 01:23:14,639
when you see this pr process is a very

01:23:12,800 --> 01:23:16,960
comprehensive pr process

01:23:14,639 --> 01:23:18,880
the reason we have this such a

01:23:16,960 --> 01:23:19,360
comprehensive pr process is to make sure

01:23:18,880 --> 01:23:22,400
that we

01:23:19,360 --> 01:23:25,040
validate but at the same time keep the

01:23:22,400 --> 01:23:26,320
time for validation to be short and so

01:23:25,040 --> 01:23:28,960
that's why we

01:23:26,320 --> 01:23:31,199
turn off multiple parallel ci jobs we

01:23:28,960 --> 01:23:34,880
have also divided ci jobs

01:23:31,199 --> 01:23:36,239
between what is must to do before the pr

01:23:34,880 --> 01:23:39,600
is related to deployment

01:23:36,239 --> 01:23:42,880
to what can be done in a deferred way

01:23:39,600 --> 01:23:43,440
so as you can see we start required ci

01:23:42,880 --> 01:23:44,880
job

01:23:43,440 --> 01:23:47,520
which needs to complete and then

01:23:44,880 --> 01:23:48,000
long-running ci job once the required ci

01:23:47,520 --> 01:23:50,239
jobs are

01:23:48,000 --> 01:23:51,600
complete this pull request is ready for

01:23:50,239 --> 01:23:54,400
the deployment and i'll talk about

01:23:51,600 --> 01:23:57,440
deployment in the next slide

01:23:54,400 --> 01:23:58,960
but as i said we want to make sure that

01:23:57,440 --> 01:24:01,679
we continue to validate

01:23:58,960 --> 01:24:03,840
all other scenarios and that's where our

01:24:01,679 --> 01:24:06,480
long-running ci job continues

01:24:03,840 --> 01:24:08,159
and the way it happens is the developers

01:24:06,480 --> 01:24:10,239
need to continue to monitor

01:24:08,159 --> 01:24:12,239
and see if there are any issues and they

01:24:10,239 --> 01:24:15,600
quickly get to either fixing the test

01:24:12,239 --> 01:24:18,719
or a code that gets deployed immediately

01:24:15,600 --> 01:24:22,239
but if there is some issue with

01:24:18,719 --> 01:24:22,800
the deployment and the and the in in the

01:24:22,239 --> 01:24:24,960
ci

01:24:22,800 --> 01:24:26,480
and uh you know developer has not been

01:24:24,960 --> 01:24:28,320
able to sort of address it in a

01:24:26,480 --> 01:24:30,719
stipulated time

01:24:28,320 --> 01:24:32,560
we get into what we call is the

01:24:30,719 --> 01:24:34,800
compliance or a corrective path

01:24:32,560 --> 01:24:36,080
where you know we stop the entire

01:24:34,800 --> 01:24:38,639
pipeline stop

01:24:36,080 --> 01:24:39,840
all the deployments and all hands are on

01:24:38,639 --> 01:24:42,880
deck to make sure

01:24:39,840 --> 01:24:45,440
that we fix the problem uh immediately

01:24:42,880 --> 01:24:46,960
it could be rolling forward or it could

01:24:45,440 --> 01:24:48,800
be rolling back the change which has

01:24:46,960 --> 01:24:50,480
caused the issue

01:24:48,800 --> 01:24:52,639
now that i've talked to you about what

01:24:50,480 --> 01:24:54,239
the pr process is and the pr is ready

01:24:52,639 --> 01:24:56,560
for the deployment

01:24:54,239 --> 01:24:59,199
now let me take you through how does

01:24:56,560 --> 01:25:02,239
that really work

01:24:59,199 --> 01:25:06,239
so the deployment process at the

01:25:02,239 --> 01:25:08,239
github is a is a safe rollout process

01:25:06,239 --> 01:25:10,400
what we really do is once the pr is

01:25:08,239 --> 01:25:13,440
ready we only deploy it

01:25:10,400 --> 01:25:15,440
on the two percent users

01:25:13,440 --> 01:25:17,440
which means that the change can only be

01:25:15,440 --> 01:25:20,719
seen by two percent users

01:25:17,440 --> 01:25:23,840
from there we move to exposing that

01:25:20,719 --> 01:25:26,800
to 20 of the user and once

01:25:23,840 --> 01:25:27,920
we find everything is fine we really

01:25:26,800 --> 01:25:31,120
deploy it for the

01:25:27,920 --> 01:25:32,000
every user and then the pr is ready for

01:25:31,120 --> 01:25:34,880
the merge

01:25:32,000 --> 01:25:35,600
but as we are going through this phases

01:25:34,880 --> 01:25:38,880
we

01:25:35,600 --> 01:25:42,239
the developer gets a time to validate

01:25:38,880 --> 01:25:45,040
if the changes that they put out has a

01:25:42,239 --> 01:25:46,560
has expected impact and that expected

01:25:45,040 --> 01:25:48,400
impact would be on two types

01:25:46,560 --> 01:25:50,480
one is that you know you're looking at

01:25:48,400 --> 01:25:53,360
your business metrics and trying to see

01:25:50,480 --> 01:25:54,000
that you know they have the right right

01:25:53,360 --> 01:25:56,639
impact

01:25:54,000 --> 01:25:57,440
does it is it meeting our business

01:25:56,639 --> 01:25:59,600
requirement

01:25:57,440 --> 01:26:01,120
the second one is that we look for

01:25:59,600 --> 01:26:03,440
exceptions or a

01:26:01,120 --> 01:26:04,560
quality related thing to make sure that

01:26:03,440 --> 01:26:06,960
the change is not

01:26:04,560 --> 01:26:08,880
really causing any issue in the

01:26:06,960 --> 01:26:11,120
production for our customer

01:26:08,880 --> 01:26:12,320
are you know time based which means that

01:26:11,120 --> 01:26:14,480
you know we go from

01:26:12,320 --> 01:26:16,639
one stage to the other stage but the

01:26:14,480 --> 01:26:19,440
developer has a full control

01:26:16,639 --> 01:26:20,400
if they want to sort of uh you know hold

01:26:19,440 --> 01:26:22,239
for some more

01:26:20,400 --> 01:26:23,520
time so that they can do their manual

01:26:22,239 --> 01:26:26,000
testing if they were

01:26:23,520 --> 01:26:27,679
not able to complete within the time or

01:26:26,000 --> 01:26:28,320
if they find some issue they can roll

01:26:27,679 --> 01:26:31,600
back from

01:26:28,320 --> 01:26:32,320
any point of view over the year over the

01:26:31,600 --> 01:26:35,280
time

01:26:32,320 --> 01:26:36,639
we actually introduced this middle uh

01:26:35,280 --> 01:26:39,040
stage with the 20

01:26:36,639 --> 01:26:40,000
calorie because we found that two

01:26:39,040 --> 01:26:42,560
percent

01:26:40,000 --> 01:26:43,280
uh canary does find issues but there are

01:26:42,560 --> 01:26:45,679
times that

01:26:43,280 --> 01:26:46,639
you know the corner cases those issues

01:26:45,679 --> 01:26:48,960
may not be

01:26:46,639 --> 01:26:50,000
you know visible with two percent and we

01:26:48,960 --> 01:26:51,360
found that 20

01:26:50,000 --> 01:26:53,920
actually works better and hence we

01:26:51,360 --> 01:26:57,280
introduced this uh another stage

01:26:53,920 --> 01:27:00,480
so combined with this two stages

01:26:57,280 --> 01:27:04,159
really helps us make sure that uh

01:27:00,480 --> 01:27:06,800
we are we are deploying it safely that

01:27:04,159 --> 01:27:07,440
our customers get to use the features

01:27:06,800 --> 01:27:10,480
soon

01:27:07,440 --> 01:27:11,920
but we ensure that it's not disturbing

01:27:10,480 --> 01:27:15,280
or there are no quality issues

01:27:11,920 --> 01:27:16,000
in our deployment now that i've told you

01:27:15,280 --> 01:27:19,440
about

01:27:16,000 --> 01:27:20,480
how we plan develop and deploy and roll

01:27:19,440 --> 01:27:23,760
out

01:27:20,480 --> 01:27:26,960
let me now talk about what do we do

01:27:23,760 --> 01:27:30,159
when every with our production site

01:27:26,960 --> 01:27:33,440
like any other production site

01:27:30,159 --> 01:27:37,040
we monitor it we use data dock for

01:27:33,440 --> 01:27:39,840
metrics we use sentry for our exceptions

01:27:37,040 --> 01:27:42,239
in splunk for our logs

01:27:39,840 --> 01:27:43,920
we have made sure that we have built

01:27:42,239 --> 01:27:46,080
good amount of alerts

01:27:43,920 --> 01:27:48,400
around these so that you know we get to

01:27:46,080 --> 01:27:51,600
know the any issue on the live site

01:27:48,400 --> 01:27:54,800
early on and these alerts

01:27:51,600 --> 01:27:58,320
um are routed to either page of duty

01:27:54,800 --> 01:27:59,760
which you know uh which which wakes up

01:27:58,320 --> 01:28:02,159
the person on call

01:27:59,760 --> 01:28:03,040
and the engineer on the call takes on to

01:28:02,159 --> 01:28:05,199
that

01:28:03,040 --> 01:28:06,320
issue that has come in we make sure that

01:28:05,199 --> 01:28:07,679
it is uh

01:28:06,320 --> 01:28:09,520
you know done such a way that the

01:28:07,679 --> 01:28:11,679
appropriate team is

01:28:09,520 --> 01:28:13,360
actually get involved now there are

01:28:11,679 --> 01:28:14,320
other issues that may not be of that

01:28:13,360 --> 01:28:16,560
severity

01:28:14,320 --> 01:28:18,159
we continue to track them on the slack

01:28:16,560 --> 01:28:20,719
and in our day time

01:28:18,159 --> 01:28:21,280
address those issues as and when they

01:28:20,719 --> 01:28:23,120
come

01:28:21,280 --> 01:28:24,560
but these are all about when the

01:28:23,120 --> 01:28:25,840
actually the problem happens on the

01:28:24,560 --> 01:28:28,880
production side

01:28:25,840 --> 01:28:29,760
but we also continue to monitor our

01:28:28,880 --> 01:28:32,239
services

01:28:29,760 --> 01:28:33,360
what we call a service level objective

01:28:32,239 --> 01:28:36,800
in this case

01:28:33,360 --> 01:28:38,880
the classroom microservice have defined

01:28:36,800 --> 01:28:40,400
two service level objective that is

01:28:38,880 --> 01:28:43,120
exception in the health

01:28:40,400 --> 01:28:44,800
and they have a clear objective goal

01:28:43,120 --> 01:28:47,760
that they want to achieve

01:28:44,800 --> 01:28:48,320
and it is get monitored every week every

01:28:47,760 --> 01:28:52,159
quarter

01:28:48,320 --> 01:28:54,560
and every month and this slo

01:28:52,159 --> 01:28:56,000
review really happens on every weekly

01:28:54,560 --> 01:28:58,480
basis at the highest level

01:28:56,000 --> 01:28:59,120
of engineering leadership the reason for

01:28:58,480 --> 01:29:01,520
doing that

01:28:59,120 --> 01:29:03,360
is to make sure that everybody is

01:29:01,520 --> 01:29:06,639
focused on making sure

01:29:03,360 --> 01:29:09,679
our live site our production site

01:29:06,639 --> 01:29:11,920
is always reliable and available

01:29:09,679 --> 01:29:12,800
we also do it at the highest level to

01:29:11,920 --> 01:29:16,560
make sure that

01:29:12,800 --> 01:29:18,560
we identify these patterns uh from

01:29:16,560 --> 01:29:20,239
from any other service but apply to

01:29:18,560 --> 01:29:22,840
everywhere else so that

01:29:20,239 --> 01:29:24,000
customers don't find the same issues

01:29:22,840 --> 01:29:27,199
again

01:29:24,000 --> 01:29:30,239
so i hope i've given you a good sense of

01:29:27,199 --> 01:29:32,960
you know how we build github

01:29:30,239 --> 01:29:35,520
using github but with any other

01:29:32,960 --> 01:29:38,000
engineering system or any other system

01:29:35,520 --> 01:29:39,360
we continue to focus on what needs to be

01:29:38,000 --> 01:29:42,800
done further

01:29:39,360 --> 01:29:45,760
we continuously improve this

01:29:42,800 --> 01:29:47,520
we monitor two things very closely the

01:29:45,760 --> 01:29:48,480
cycle time that we talked about the

01:29:47,520 --> 01:29:50,560
developer

01:29:48,480 --> 01:29:52,719
raising the pr to the time it takes the

01:29:50,560 --> 01:29:55,360
deployment we keep identifying

01:29:52,719 --> 01:29:56,480
any opportunity there to optimize and

01:29:55,360 --> 01:29:58,159
reduce the time

01:29:56,480 --> 01:30:00,800
the second part of it that we continue

01:29:58,159 --> 01:30:02,480
to monitor is the life side reliability

01:30:00,800 --> 01:30:05,520
security and availability

01:30:02,480 --> 01:30:07,760
and we continue to make sure that as

01:30:05,520 --> 01:30:09,199
our users are increasing that the

01:30:07,760 --> 01:30:11,840
service is holding

01:30:09,199 --> 01:30:12,880
with that scale and we make those

01:30:11,840 --> 01:30:14,960
changes

01:30:12,880 --> 01:30:16,560
ahead of time as we start to see any

01:30:14,960 --> 01:30:18,880
issues with them

01:30:16,560 --> 01:30:19,760
we continue to use more of the github

01:30:18,880 --> 01:30:21,920
using uh

01:30:19,760 --> 01:30:23,040
building the github uh you saw some of

01:30:21,920 --> 01:30:26,000
the things that we did

01:30:23,040 --> 01:30:27,440
how we use issues how we how we use the

01:30:26,000 --> 01:30:30,400
you know the pr process

01:30:27,440 --> 01:30:31,440
to do our design reviews uh but you know

01:30:30,400 --> 01:30:33,920
we'll continue to

01:30:31,440 --> 01:30:36,159
we continue to evolve to use code spaces

01:30:33,920 --> 01:30:39,199
or actions and things like that

01:30:36,159 --> 01:30:41,920
and eventually we have multiple skus off

01:30:39,199 --> 01:30:42,560
uh you know github uh what i talked to

01:30:41,920 --> 01:30:45,520
you about

01:30:42,560 --> 01:30:46,560
is predominantly github.com but we also

01:30:45,520 --> 01:30:50,159
have ghes

01:30:46,560 --> 01:30:53,920
we have github enterprise cloud and uh

01:30:50,159 --> 01:30:55,280
you know ghae and uh today the developer

01:30:53,920 --> 01:30:57,920
actually has a different

01:30:55,280 --> 01:30:59,679
developer life cycle uh for each of

01:30:57,920 --> 01:31:01,600
these and we continue to work

01:30:59,679 --> 01:31:02,880
to make sure that the same developer

01:31:01,600 --> 01:31:04,960
life cycle works for

01:31:02,880 --> 01:31:06,880
all of this queue making sure that it's

01:31:04,960 --> 01:31:10,000
easier for developer and as well as

01:31:06,880 --> 01:31:13,280
for a customer there is a feature parity

01:31:10,000 --> 01:31:15,199
with this i want you to remember that

01:31:13,280 --> 01:31:17,040
you know we have built a great

01:31:15,199 --> 01:31:20,639
automation processes

01:31:17,040 --> 01:31:22,560
which empowers our engineers it is their

01:31:20,639 --> 01:31:23,199
experiences their productivity it really

01:31:22,560 --> 01:31:26,080
helps us

01:31:23,199 --> 01:31:26,480
get the best out of the work best best

01:31:26,080 --> 01:31:28,840
work

01:31:26,480 --> 01:31:31,280
out of them we've created a lot of

01:31:28,840 --> 01:31:34,239
transparency everything is documented

01:31:31,280 --> 01:31:35,679
and that transparency leads to the trust

01:31:34,239 --> 01:31:38,800
and community building

01:31:35,679 --> 01:31:42,320
and inner sourcing within our company

01:31:38,800 --> 01:31:43,679
and finally we measure what matters and

01:31:42,320 --> 01:31:45,360
continue to improve

01:31:43,679 --> 01:31:46,880
and hopefully you will find some other

01:31:45,360 --> 01:31:49,679
things from here

01:31:46,880 --> 01:31:50,719
to apply to your own uh application

01:31:49,679 --> 01:31:53,440
building

01:31:50,719 --> 01:31:54,080
we continue to talk about these uh on

01:31:53,440 --> 01:31:56,000
our blog

01:31:54,080 --> 01:31:58,239
getup.blog and the categories

01:31:56,000 --> 01:32:00,080
engineering where you can see most of

01:31:58,239 --> 01:32:01,360
these things that we continue to come

01:32:00,080 --> 01:32:04,560
back and talk to our

01:32:01,360 --> 01:32:07,360
uh you know our developers

01:32:04,560 --> 01:32:07,760
thank you thanks for uh staying with me

01:32:07,360 --> 01:32:13,840
uh

01:32:07,760 --> 01:32:13,840
in this session we'll move to q a

01:32:15,440 --> 01:32:19,040
what an insightful talk sanjay thank you

01:32:17,840 --> 01:32:21,040
very much for that

01:32:19,040 --> 01:32:23,040
especially the bits on empowering

01:32:21,040 --> 01:32:23,600
engineers and building processes around

01:32:23,040 --> 01:32:26,480
it

01:32:23,600 --> 01:32:27,520
transparency and measuring for impact in

01:32:26,480 --> 01:32:30,239
what matters

01:32:27,520 --> 01:32:31,120
wonderful learnings for all of us here

01:32:30,239 --> 01:32:32,800
we got some

01:32:31,120 --> 01:32:34,560
amazing questions from you from our

01:32:32,800 --> 01:32:37,199
viewers and first up

01:32:34,560 --> 01:32:38,320
is you got so much of diverse

01:32:37,199 --> 01:32:40,480
experiences

01:32:38,320 --> 01:32:41,600
across different organizations startups

01:32:40,480 --> 01:32:44,320
enterprises

01:32:41,600 --> 01:32:45,679
what is that one thing that really

01:32:44,320 --> 01:32:48,800
stands out and you like

01:32:45,679 --> 01:32:48,800
about being at github

01:32:50,080 --> 01:32:55,840
yeah i mean i like so many things about

01:32:53,520 --> 01:32:58,639
being at github you're really making me

01:32:55,840 --> 01:33:01,520
choose the one and only one thing

01:32:58,639 --> 01:33:02,800
um you know the one thing when i joined

01:33:01,520 --> 01:33:06,719
github

01:33:02,800 --> 01:33:10,480
that was really unique was how much love

01:33:06,719 --> 01:33:12,400
you get when you wear the github branded

01:33:10,480 --> 01:33:13,840
clothing or you care about the github

01:33:12,400 --> 01:33:17,520
branded goodies

01:33:13,840 --> 01:33:19,120
um you know it's so so i'm so proud

01:33:17,520 --> 01:33:20,880
that you know look this is what really

01:33:19,120 --> 01:33:22,639
happens um

01:33:20,880 --> 01:33:24,960
and when you look at it you know

01:33:22,639 --> 01:33:27,600
sometimes you wonder is it accidental

01:33:24,960 --> 01:33:28,080
but really it's not accidental as i have

01:33:27,600 --> 01:33:29,440
sort of

01:33:28,080 --> 01:33:30,880
learned about it and this is the one

01:33:29,440 --> 01:33:31,600
thing that i like about it a lot of the

01:33:30,880 --> 01:33:34,400
times

01:33:31,600 --> 01:33:36,400
i go in and talk about hey if we do this

01:33:34,400 --> 01:33:38,080
this is what it means to us this is what

01:33:36,400 --> 01:33:41,679
means to our business and

01:33:38,080 --> 01:33:42,239
i get corrected whatever we do it has to

01:33:41,679 --> 01:33:44,480
be

01:33:42,239 --> 01:33:46,000
centered around the developer what does

01:33:44,480 --> 01:33:48,639
it mean to the developer

01:33:46,000 --> 01:33:50,639
what are we doing to improve their

01:33:48,639 --> 01:33:52,880
experience their productivity

01:33:50,639 --> 01:33:53,679
and make them work in a global

01:33:52,880 --> 01:33:55,440
environment

01:33:53,679 --> 01:33:58,320
where there is a community there is a

01:33:55,440 --> 01:34:00,480
trust and so that is the biggest

01:33:58,320 --> 01:34:01,760
one thing that is different we are

01:34:00,480 --> 01:34:06,159
totally and

01:34:01,760 --> 01:34:06,159
100 focused only on developers

01:34:06,880 --> 01:34:10,560
i'm sure everybody hearing here would be

01:34:09,360 --> 01:34:13,840
super delighted

01:34:10,560 --> 01:34:14,239
to learn that every day we think about

01:34:13,840 --> 01:34:17,199
them

01:34:14,239 --> 01:34:18,159
so much sanjay also from the whole

01:34:17,199 --> 01:34:21,280
journey and the

01:34:18,159 --> 01:34:25,280
workflow that you share uh

01:34:21,280 --> 01:34:27,440
what's one talent or

01:34:25,280 --> 01:34:29,120
like a cultural or a technical challenge

01:34:27,440 --> 01:34:31,199
that you would want to share with folks

01:34:29,120 --> 01:34:32,880
hearing on the devops channel

01:34:31,199 --> 01:34:36,239
as an inspiration of what they can look

01:34:32,880 --> 01:34:39,440
at and how can they overcome that

01:34:36,239 --> 01:34:41,199
yeah so i i github is

01:34:39,440 --> 01:34:43,679
i mean a good one there's lots of

01:34:41,199 --> 01:34:46,239
challenges right i mean a

01:34:43,679 --> 01:34:47,679
company which is growing we talked about

01:34:46,239 --> 01:34:49,520
56 million

01:34:47,679 --> 01:34:50,880
users going to go up to 100 million in

01:34:49,520 --> 01:34:53,679
01:34:50,880 --> 01:34:54,320
or there is no depth of challenges that

01:34:53,679 --> 01:34:57,840
we see

01:34:54,320 --> 01:35:00,159
day in day out right um and

01:34:57,840 --> 01:35:02,000
but if you think about it what has been

01:35:00,159 --> 01:35:03,280
for the last six to 12 months what has

01:35:02,000 --> 01:35:05,440
been a big challenge

01:35:03,280 --> 01:35:06,800
the one thing that our company is going

01:35:05,440 --> 01:35:09,199
through is from a small

01:35:06,800 --> 01:35:10,800
company to a you know a medium-sized

01:35:09,199 --> 01:35:13,119
large company where a lot of

01:35:10,800 --> 01:35:14,080
a lot of enterprises lot of communities

01:35:13,119 --> 01:35:16,560
depend on

01:35:14,080 --> 01:35:17,760
their day-to-day work and what we found

01:35:16,560 --> 01:35:20,880
was that

01:35:17,760 --> 01:35:22,000
as a team while we were doing the right

01:35:20,880 --> 01:35:24,239
set of things

01:35:22,000 --> 01:35:25,119
each one was following their own you

01:35:24,239 --> 01:35:27,199
know process

01:35:25,119 --> 01:35:29,280
practices and we have now become

01:35:27,199 --> 01:35:31,760
intentional about making sure

01:35:29,280 --> 01:35:32,639
that there is a uniformity without

01:35:31,760 --> 01:35:34,880
missing out the

01:35:32,639 --> 01:35:35,679
empowerment for each team to do what

01:35:34,880 --> 01:35:38,000
they want to do

01:35:35,679 --> 01:35:39,600
so you saw the public roadmap right this

01:35:38,000 --> 01:35:41,119
was not something that we used to do we

01:35:39,600 --> 01:35:41,600
started doing it because you know that's

01:35:41,119 --> 01:35:43,840
really

01:35:41,600 --> 01:35:44,639
tells our customers that what they can

01:35:43,840 --> 01:35:46,480
depend on

01:35:44,639 --> 01:35:47,679
and the same thing internally you saw

01:35:46,480 --> 01:35:50,400
slu you know

01:35:47,679 --> 01:35:50,960
we still provide each team to sort of

01:35:50,400 --> 01:35:52,960
say that

01:35:50,960 --> 01:35:54,080
what they want to measure but at the

01:35:52,960 --> 01:35:56,080
same time

01:35:54,080 --> 01:35:57,840
it is a process that we have developed

01:35:56,080 --> 01:35:59,360
now across the teams

01:35:57,840 --> 01:36:01,040
and we meet at the highest level of

01:35:59,360 --> 01:36:02,320
leadership to make sure what is

01:36:01,040 --> 01:36:03,920
happening on one side

01:36:02,320 --> 01:36:05,520
the other side learns about it and

01:36:03,920 --> 01:36:07,119
quickly reacts to it

01:36:05,520 --> 01:36:09,040
so that's really has been the one of the

01:36:07,119 --> 01:36:11,440
biggest uh you know

01:36:09,040 --> 01:36:12,400
cultural changes so to say that we are

01:36:11,440 --> 01:36:14,560
going through

01:36:12,400 --> 01:36:15,600
um but as i said there's no earth of

01:36:14,560 --> 01:36:20,000
challenges at

01:36:15,600 --> 01:36:21,360
github amazing to hear that and yes

01:36:20,000 --> 01:36:23,199
absolutely

01:36:21,360 --> 01:36:26,639
uh we got one more question for you and

01:36:23,199 --> 01:36:29,199
am i also allowed to ask you a question

01:36:26,639 --> 01:36:29,199
absolutely

01:36:29,760 --> 01:36:34,159
all right you talked about how good

01:36:32,239 --> 01:36:36,159
great you felt about the talk

01:36:34,159 --> 01:36:38,400
i mean that one number that i care the

01:36:36,159 --> 01:36:40,880
most i want to ask you if you actually

01:36:38,400 --> 01:36:41,920
you know paid attention to it how long

01:36:40,880 --> 01:36:44,719
does it take for a

01:36:41,920 --> 01:36:48,239
developer when the pr is ready to

01:36:44,719 --> 01:36:50,320
deploying it to the production site

01:36:48,239 --> 01:36:52,880
i got this three and a half hours you

01:36:50,320 --> 01:36:56,960
had said

01:36:52,880 --> 01:36:56,960
uh every time

01:36:57,679 --> 01:37:01,360
ah no not every time

01:37:02,159 --> 01:37:05,280
well you got my question so i i didn't

01:37:04,639 --> 01:37:07,040
ask you about

01:37:05,280 --> 01:37:09,040
the reliability but yes it's three and a

01:37:07,040 --> 01:37:11,760
half hours in the 90

01:37:09,040 --> 01:37:13,119
reliability so yeah the way you want you

01:37:11,760 --> 01:37:16,400
may want to take something from

01:37:13,119 --> 01:37:19,440
uh you know mohit now yeah

01:37:16,400 --> 01:37:21,520
i'm gonna i'm gonna take a goodie

01:37:19,440 --> 01:37:22,719
thank you so much sanjay again it was

01:37:21,520 --> 01:37:25,600
such an insightful

01:37:22,719 --> 01:37:26,639
session i just loved having you here and

01:37:25,600 --> 01:37:29,440
sharing the whole

01:37:26,639 --> 01:37:31,040
workflow with everyone how github is

01:37:29,440 --> 01:37:32,960
built using github

01:37:31,040 --> 01:37:35,280
folks remember sanjay is going to stay

01:37:32,960 --> 01:37:37,600
with us in discussions so head over

01:37:35,280 --> 01:37:38,960
to discussions and ask all your other

01:37:37,600 --> 01:37:41,199
questions from sanjay

01:37:38,960 --> 01:37:42,639
thank you sanjay again bye thank you and

01:37:41,199 --> 01:37:49,840
look forward to engaging with you on the

01:37:42,639 --> 01:37:49,840
discussion channel

01:37:55,199 --> 01:37:59,520
so i just want a goodie where's my

01:37:58,400 --> 01:38:02,560
goodie

01:37:59,520 --> 01:38:05,119
hey you winner i'm gonna miss my greedy

01:38:02,560 --> 01:38:05,119
there you go

01:38:07,920 --> 01:38:14,639
yay i got it awesome

01:38:12,159 --> 01:38:17,119
thank you okay let's jump into the next

01:38:14,639 --> 01:38:19,360
session for today

01:38:17,119 --> 01:38:20,159
uh we are going to talk about how you

01:38:19,360 --> 01:38:22,560
can create

01:38:20,159 --> 01:38:23,199
your own github apps and your own github

01:38:22,560 --> 01:38:25,360
actions

01:38:23,199 --> 01:38:27,520
and we're going to share examples of

01:38:25,360 --> 01:38:29,760
resources to help you with those

01:38:27,520 --> 01:38:30,719
so that you can make your own action or

01:38:29,760 --> 01:38:33,679
your own app

01:38:30,719 --> 01:38:34,239
and we have got shashank bunsen in the

01:38:33,679 --> 01:38:37,679
house

01:38:34,239 --> 01:38:40,719
the product manager for github

01:38:37,679 --> 01:38:42,239
shashank has 15 plus years of building

01:38:40,719 --> 01:38:43,840
and managing software

01:38:42,239 --> 01:38:46,639
and having lived through the

01:38:43,840 --> 01:38:49,280
transformation of multi-year releases

01:38:46,639 --> 01:38:51,119
to on-demand deployment shashank shares

01:38:49,280 --> 01:38:53,440
a deep sense of value

01:38:51,119 --> 01:38:54,320
in sharing and collaborating a very good

01:38:53,440 --> 01:38:55,679
friend of mine

01:38:54,320 --> 01:38:59,520
i'm really looking forward to hearing

01:38:55,679 --> 01:39:01,600
from you shashank

01:38:59,520 --> 01:39:03,760
i am also very excited about this

01:39:01,600 --> 01:39:05,840
session it actually

01:39:03,760 --> 01:39:07,199
extends the capabilities that github

01:39:05,840 --> 01:39:10,159
gives

01:39:07,199 --> 01:39:10,800
and take it forward to make it suit your

01:39:10,159 --> 01:39:13,280
needs

01:39:10,800 --> 01:39:14,560
and is also one of the biggest ways

01:39:13,280 --> 01:39:17,360
folks come

01:39:14,560 --> 01:39:18,719
like contribute to the community so

01:39:17,360 --> 01:39:21,280
shashank

01:39:18,719 --> 01:39:22,239
over to you folks remember engage with

01:39:21,280 --> 01:39:26,000
us on discussions

01:39:22,239 --> 01:39:40,239
mohit and i will bring the questions for

01:39:26,000 --> 01:39:43,280
you from discussions over to you sasha

01:39:40,239 --> 01:39:46,080
thank you thank you mohamed

01:39:43,280 --> 01:39:48,080
and welcome everybody to satellite india

01:39:46,080 --> 01:39:51,040
01:39:48,080 --> 01:39:52,480
as as mohit and shared what we're going

01:39:51,040 --> 01:39:55,119
to talk today is

01:39:52,480 --> 01:39:56,320
how you can create and share your own

01:39:55,119 --> 01:40:00,800
github apps

01:39:56,320 --> 01:40:03,199
and github actions before we get to

01:40:00,800 --> 01:40:05,199
it my name is shashank bansil i am a

01:40:03,199 --> 01:40:07,520
director of product management here at

01:40:05,199 --> 01:40:09,040
github taking care of the github

01:40:07,520 --> 01:40:11,520
ecosystem

01:40:09,040 --> 01:40:12,159
and that's really the platform that

01:40:11,520 --> 01:40:14,960
enables

01:40:12,159 --> 01:40:17,920
you to contribute your solutions and

01:40:14,960 --> 01:40:21,520
help the community at large

01:40:17,920 --> 01:40:22,000
um to start a journey with let's let's

01:40:21,520 --> 01:40:25,040
probably

01:40:22,000 --> 01:40:28,159
ask what's in it for us what's in it for

01:40:25,040 --> 01:40:32,560
you why do we have the ecosystem

01:40:28,159 --> 01:40:36,320
and a core part of github's philosophy

01:40:32,560 --> 01:40:39,040
is is to enable choice so we provide

01:40:36,320 --> 01:40:39,600
choice to end users provide choice to

01:40:39,040 --> 01:40:42,639
you

01:40:39,600 --> 01:40:44,800
as a consumer so that you can customize

01:40:42,639 --> 01:40:46,880
your workflows you can customize your

01:40:44,800 --> 01:40:50,239
software development journey

01:40:46,880 --> 01:40:53,360
with the tools and services you love

01:40:50,239 --> 01:40:55,679
it provides you a bunch of them built in

01:40:53,360 --> 01:40:57,840
but you can bring in your own complement

01:40:55,679 --> 01:41:00,960
it enhance the workflow

01:40:57,840 --> 01:41:04,400
make the best out of it and that

01:41:00,960 --> 01:41:05,440
choice the is part of that choice is

01:41:04,400 --> 01:41:07,760
offered by you

01:41:05,440 --> 01:41:08,480
so you can contribute you can come in

01:41:07,760 --> 01:41:11,920
and help

01:41:08,480 --> 01:41:14,719
us build that choice for planet skill

01:41:11,920 --> 01:41:17,119
developer community

01:41:14,719 --> 01:41:18,000
and that's what the ecosystem team

01:41:17,119 --> 01:41:20,320
focuses on

01:41:18,000 --> 01:41:23,840
enabling you to do that and that is

01:41:20,320 --> 01:41:26,159
where apps and actions come in here

01:41:23,840 --> 01:41:27,199
while you do that you build a brand for

01:41:26,159 --> 01:41:30,080
yourself

01:41:27,199 --> 01:41:32,800
the github community knows you as the

01:41:30,080 --> 01:41:35,440
developer as the github handle

01:41:32,800 --> 01:41:37,280
add value to software development across

01:41:35,440 --> 01:41:40,560
the board

01:41:37,280 --> 01:41:44,239
and build your own business

01:41:40,560 --> 01:41:44,960
plan implies business that's what's in

01:41:44,239 --> 01:41:46,719
it for you

01:41:44,960 --> 01:41:48,800
and that's why it's important for github

01:41:46,719 --> 01:41:52,480
as well to complete win-win

01:41:48,800 --> 01:41:52,480
making each other successful

01:41:52,880 --> 01:41:58,719
um before i before i get further into

01:41:56,080 --> 01:41:59,760
apps and actions how about we we try and

01:41:58,719 --> 01:42:02,080
build something

01:41:59,760 --> 01:42:03,920
what better way to start up talk to

01:42:02,080 --> 01:42:07,360
start our session

01:42:03,920 --> 01:42:08,960
than by doing something hands-on

01:42:07,360 --> 01:42:11,040
so i picked up a problem here the

01:42:08,960 --> 01:42:12,800
problem i picked up that we want to

01:42:11,040 --> 01:42:15,280
solve together is

01:42:12,800 --> 01:42:17,280
we saw github release in the keynote we

01:42:15,280 --> 01:42:20,480
saw github release being the platform

01:42:17,280 --> 01:42:23,119
to release what we are building

01:42:20,480 --> 01:42:25,199
what i want to solve today is whenever a

01:42:23,119 --> 01:42:27,040
github release is created

01:42:25,199 --> 01:42:29,119
i am in the product i'm in the business

01:42:27,040 --> 01:42:30,400
my software is a library so i want to

01:42:29,119 --> 01:42:33,760
compile that library

01:42:30,400 --> 01:42:36,320
build it and upload the built artifacts

01:42:33,760 --> 01:42:38,159
automatically to my release so when i

01:42:36,320 --> 01:42:41,520
really publish the release

01:42:38,159 --> 01:42:43,760
the built artifacts go out

01:42:41,520 --> 01:42:44,639
that's what i want to do and i want to

01:42:43,760 --> 01:42:47,600
enable an

01:42:44,639 --> 01:42:50,719
actions workflow do this automatically i

01:42:47,600 --> 01:42:52,639
don't want to do this manually

01:42:50,719 --> 01:42:55,280
i start researching about it i come

01:42:52,639 --> 01:42:59,440
across the cli

01:42:55,280 --> 01:43:02,719
extremely powerful command line utility

01:42:59,440 --> 01:43:07,040
that uh works with

01:43:02,719 --> 01:43:10,719
all the github github resources

01:43:07,040 --> 01:43:11,360
including github release so using the gh

01:43:10,719 --> 01:43:14,639
release

01:43:11,360 --> 01:43:17,679
create or gh release upload i can

01:43:14,639 --> 01:43:20,880
modify existing github releases

01:43:17,679 --> 01:43:22,880
and using a command line

01:43:20,880 --> 01:43:24,320
so i decide to use that what better way

01:43:22,880 --> 01:43:26,159
than doing it than running just a

01:43:24,320 --> 01:43:28,480
command

01:43:26,159 --> 01:43:30,639
and i sketch out my workflow it's a high

01:43:28,480 --> 01:43:31,600
level workflow actions handle that i've

01:43:30,639 --> 01:43:35,199
sketched out

01:43:31,600 --> 01:43:37,920
which does the build that tests

01:43:35,199 --> 01:43:39,600
my library automatically and after it

01:43:37,920 --> 01:43:42,800
does i'm gonna add a youtube

01:43:39,600 --> 01:43:43,600
uh added command to upload the release

01:43:42,800 --> 01:43:48,080
using

01:43:43,600 --> 01:43:50,480
ghg support but i want to focus on this

01:43:48,080 --> 01:43:53,040
part of that workflow before i can

01:43:50,480 --> 01:43:55,280
really use the github cli

01:43:53,040 --> 01:43:56,560
i need to set that up on my runner i

01:43:55,280 --> 01:43:58,960
need to download it

01:43:56,560 --> 01:44:01,520
install it make sure it's ready so that

01:43:58,960 --> 01:44:02,800
i can use the command

01:44:01,520 --> 01:44:04,800
and this is what we are going to build

01:44:02,800 --> 01:44:05,119
today we are going to build an action

01:44:04,800 --> 01:44:08,480
that

01:44:05,119 --> 01:44:09,920
does the setup that that creates this

01:44:08,480 --> 01:44:13,119
and prepares my runner

01:44:09,920 --> 01:44:16,480
to be able to run the command a quick

01:44:13,119 --> 01:44:17,199
look into the into the constituents of

01:44:16,480 --> 01:44:20,320
this command

01:44:17,199 --> 01:44:22,159
so it consists of a repository it's a

01:44:20,320 --> 01:44:23,840
public repository in which i will share

01:44:22,159 --> 01:44:26,000
my actions code

01:44:23,840 --> 01:44:27,040
followed by the version i want to use

01:44:26,000 --> 01:44:31,920
represented as

01:44:27,040 --> 01:44:34,880
a tag and the inputs that actually needs

01:44:31,920 --> 01:44:36,560
without further ado let me jump and

01:44:34,880 --> 01:44:38,960
let's start trying to build this

01:44:36,560 --> 01:44:38,960
together

01:44:39,360 --> 01:44:43,119
so i go to my browser here

01:44:44,960 --> 01:44:52,159
just give me a

01:44:48,400 --> 01:44:52,159
maybe i need to share things again

01:44:57,040 --> 01:45:03,440
okay so i am in my browser

01:45:00,480 --> 01:45:04,960
and to start building my action uh the

01:45:03,440 --> 01:45:07,679
first thing i do is

01:45:04,960 --> 01:45:09,199
there is this javascript action template

01:45:07,679 --> 01:45:11,440
repository

01:45:09,199 --> 01:45:14,159
and and the actions workflow github has

01:45:11,440 --> 01:45:17,440
already shared this template repository

01:45:14,159 --> 01:45:19,199
to simplify you to simplify everybody

01:45:17,440 --> 01:45:21,920
start building your own actions

01:45:19,199 --> 01:45:23,119
i'm going to rely on this i'm going to

01:45:21,920 --> 01:45:26,560
use this template

01:45:23,119 --> 01:45:29,679
and clone it into my own repository that

01:45:26,560 --> 01:45:32,080
that i'll modify into the action i need

01:45:29,679 --> 01:45:33,600
make sure you mark it public the actions

01:45:32,080 --> 01:45:35,760
repositories need to be

01:45:33,600 --> 01:45:37,280
public so the action learners can access

01:45:35,760 --> 01:45:40,159
that

01:45:37,280 --> 01:45:41,440
i have already done that and created

01:45:40,159 --> 01:45:44,960
this repository

01:45:41,440 --> 01:45:47,440
uh in that process note i call that

01:45:44,960 --> 01:45:50,480
example setup gh and it's generated from

01:45:47,440 --> 01:45:50,480
the javascript action

01:45:51,040 --> 01:45:54,800
once i have this there are really three

01:45:53,280 --> 01:45:58,480
files that i

01:45:54,800 --> 01:46:00,880
go modify to prepare my action

01:45:58,480 --> 01:46:01,719
the first file which is important is

01:46:00,880 --> 01:46:04,880
what is called

01:46:01,719 --> 01:46:07,360
actions.yaml so it's it's it's really

01:46:04,880 --> 01:46:10,840
the declaration of my action

01:46:07,360 --> 01:46:13,199
so you know i i provide a name to my

01:46:10,840 --> 01:46:15,600
action and then i just

01:46:13,199 --> 01:46:17,280
give an input to what are the versions

01:46:15,600 --> 01:46:19,760
that i will expect

01:46:17,280 --> 01:46:20,719
any users to provide me i've given a

01:46:19,760 --> 01:46:23,920
default value

01:46:20,719 --> 01:46:27,199
in case the version is not provided i

01:46:23,920 --> 01:46:30,560
will install 1.2.0

01:46:27,199 --> 01:46:33,119
and so that's that's really the action

01:46:30,560 --> 01:46:34,960
gamma so i update the yaml file for name

01:46:33,119 --> 01:46:38,239
description branding and inputs

01:46:34,960 --> 01:46:41,280
so that's the first change that i make

01:46:38,239 --> 01:46:43,679
the second file i need to change is

01:46:41,280 --> 01:46:45,199
what is the javascript that runs my

01:46:43,679 --> 01:46:48,800
action so basically the

01:46:45,199 --> 01:46:51,119
core heart of my actions and

01:46:48,800 --> 01:46:54,320
and update this code to really do that

01:46:51,119 --> 01:46:57,440
download and install

01:46:54,320 --> 01:46:59,360
the actions sdk provides me a bunch of

01:46:57,440 --> 01:47:01,920
packages in this case i'm using

01:46:59,360 --> 01:47:02,960
core and tool cache as the two packages

01:47:01,920 --> 01:47:07,360
that

01:47:02,960 --> 01:47:09,760
i'm gonna rely on to give me a utilities

01:47:07,360 --> 01:47:13,280
to give me ready to use functions

01:47:09,760 --> 01:47:15,280
to simplify my actions code

01:47:13,280 --> 01:47:17,679
like for example in this case when i

01:47:15,280 --> 01:47:20,320
want to download from a url i want to do

01:47:17,679 --> 01:47:22,400
girl the tool cache gives me download

01:47:20,320 --> 01:47:25,600
tool as a function so i don't have to

01:47:22,400 --> 01:47:27,760
write my own code to actually download

01:47:25,600 --> 01:47:28,639
similarly i have the extract function

01:47:27,760 --> 01:47:32,080
available

01:47:28,639 --> 01:47:35,679
to do the unzip to do unzip or

01:47:32,080 --> 01:47:37,920
extract it from a card file and then the

01:47:35,679 --> 01:47:40,480
core module gives me operating system

01:47:37,920 --> 01:47:41,119
manipulations like i finally added to

01:47:40,480 --> 01:47:44,239
the path

01:47:41,119 --> 01:47:48,960
so when i say gh release after that

01:47:44,239 --> 01:47:52,639
the runner finds the github client path

01:47:48,960 --> 01:47:54,880
and just by these small uh

01:47:52,639 --> 01:47:56,719
lines of code it practically look like

01:47:54,880 --> 01:47:59,280
pseudocode written in here

01:47:56,719 --> 01:47:59,920
i think i have my end-to-end action

01:47:59,280 --> 01:48:02,800
running

01:47:59,920 --> 01:48:04,480
it's completely functional this node.js

01:48:02,800 --> 01:48:09,119
script i can run

01:48:04,480 --> 01:48:11,679
outside in an action and do the job

01:48:09,119 --> 01:48:14,239
last but not the least i want to give a

01:48:11,679 --> 01:48:16,560
good readme file to my depository

01:48:14,239 --> 01:48:17,520
so that anybody who lands on this

01:48:16,560 --> 01:48:20,159
repository

01:48:17,520 --> 01:48:22,800
understands what the action does and

01:48:20,159 --> 01:48:22,800
what it's about

01:48:24,320 --> 01:48:27,600
that's it so i i have my action right up

01:48:26,880 --> 01:48:30,639
and running

01:48:27,600 --> 01:48:32,239
i have it built now is the time to share

01:48:30,639 --> 01:48:36,000
it further

01:48:32,239 --> 01:48:38,000
to share it i have a

01:48:36,000 --> 01:48:39,760
hint here but i can really share it on

01:48:38,000 --> 01:48:41,679
the marketplace

01:48:39,760 --> 01:48:42,800
i will start creating the release you

01:48:41,679 --> 01:48:45,360
see

01:48:42,800 --> 01:48:46,000
the github automatically passes the

01:48:45,360 --> 01:48:49,040
actions

01:48:46,000 --> 01:48:50,400
repository understand shows you what it

01:48:49,040 --> 01:48:53,840
will look like

01:48:50,400 --> 01:48:56,239
and i need to give a category

01:48:53,840 --> 01:48:57,360
let's call it utilities for now for this

01:48:56,239 --> 01:49:00,000
one

01:48:57,360 --> 01:49:01,920
and give it a release title and i can

01:49:00,000 --> 01:49:04,880
publish this release

01:49:01,920 --> 01:49:06,239
once i do that my action would be live

01:49:04,880 --> 01:49:09,119
on the marketplace

01:49:06,239 --> 01:49:11,280
like for example this entry action is

01:49:09,119 --> 01:49:14,639
and the readme file that we created

01:49:11,280 --> 01:49:19,520
is automatically shown here to help

01:49:14,639 --> 01:49:19,520
end users understand my action better

01:49:22,080 --> 01:49:28,719
so that's it we did it we have an action

01:49:26,840 --> 01:49:31,920
build

01:49:28,719 --> 01:49:33,679
and we use the cross-platform it's

01:49:31,920 --> 01:49:35,199
cross-platform it works on linux and

01:49:33,679 --> 01:49:37,199
windows and mac

01:49:35,199 --> 01:49:38,960
we use community tooling we use the

01:49:37,199 --> 01:49:40,320
libraries available

01:49:38,960 --> 01:49:42,719
we didn't have to write a lot of code

01:49:40,320 --> 01:49:45,040
ourselves and we contributed it back

01:49:42,719 --> 01:49:48,400
we are enhancing the entire makeup

01:49:45,040 --> 01:49:51,440
community while using what they have

01:49:48,400 --> 01:49:53,520
why is that simple that's

01:49:51,440 --> 01:49:54,639
a complete action built right from

01:49:53,520 --> 01:49:58,880
scratch

01:49:54,639 --> 01:50:01,760
in in 10 15 minutes that we spend

01:49:58,880 --> 01:50:02,880
um let's change tracks so now that we

01:50:01,760 --> 01:50:04,800
have built something let's

01:50:02,880 --> 01:50:07,119
look zoom out look at our integration

01:50:04,800 --> 01:50:11,040
journey with github overall

01:50:07,119 --> 01:50:12,960
and as you would uh understand

01:50:11,040 --> 01:50:15,679
and like any software it consists of

01:50:12,960 --> 01:50:18,560
plan built and release

01:50:15,679 --> 01:50:20,560
in terms of planning github provides

01:50:18,560 --> 01:50:23,920
three ways to integrate

01:50:20,560 --> 01:50:26,800
with github there is github or

01:50:23,920 --> 01:50:29,280
app and github action we just page the

01:50:26,800 --> 01:50:32,400
github action

01:50:29,280 --> 01:50:34,719
in to understand the github app better

01:50:32,400 --> 01:50:35,840
a simple way to think about it it's a

01:50:34,719 --> 01:50:39,040
bond

01:50:35,840 --> 01:50:39,760
and completely autonomous execution

01:50:39,040 --> 01:50:42,880
entity

01:50:39,760 --> 01:50:45,119
that can independently uh communicate

01:50:42,880 --> 01:50:47,199
with the github resources

01:50:45,119 --> 01:50:50,080
even driven actors that are responding

01:50:47,199 --> 01:50:52,080
to events happening

01:50:50,080 --> 01:50:54,880
you maintain and operate it on your

01:50:52,080 --> 01:50:58,000
compute and it just responds to even

01:50:54,880 --> 01:50:59,040
coming in it gets its own fine grained

01:50:58,000 --> 01:51:01,840
permissions

01:50:59,040 --> 01:51:03,920
and and that's what helps it be very

01:51:01,840 --> 01:51:06,080
effective and powerful

01:51:03,920 --> 01:51:08,400
you probably don't have time today to go

01:51:06,080 --> 01:51:11,679
deep into building github apps

01:51:08,400 --> 01:51:14,080
uh but i wanna point you to probot

01:51:11,679 --> 01:51:14,800
so it's a framework available that helps

01:51:14,080 --> 01:51:18,320
you

01:51:14,800 --> 01:51:20,560
build github apps there are a set of

01:51:18,320 --> 01:51:21,599
example github app shared with you with

01:51:20,560 --> 01:51:24,719
code available

01:51:21,599 --> 01:51:27,040
so you head to robot.github.io

01:51:24,719 --> 01:51:28,960
and it will give you all the utilities

01:51:27,040 --> 01:51:31,599
all the help available to build your own

01:51:28,960 --> 01:51:31,599
github app

01:51:31,840 --> 01:51:37,679
if you want to know more there is a

01:51:35,199 --> 01:51:39,119
complete demo day series that we did

01:51:37,679 --> 01:51:41,280
earlier this year

01:51:39,119 --> 01:51:42,560
it's available on youtube and on the

01:51:41,280 --> 01:51:45,199
partner center

01:51:42,560 --> 01:51:46,159
so you can look at that a step-by-step

01:51:45,199 --> 01:51:48,000
video

01:51:46,159 --> 01:51:50,960
step-by-step guide that helps you build

01:51:48,000 --> 01:51:50,960
big web apps further

01:51:51,440 --> 01:51:57,199
uh second up let's talk about what apps

01:51:54,719 --> 01:51:59,360
so what apps i call them as

01:51:57,199 --> 01:52:02,800
authorizations for third-party

01:51:59,360 --> 01:52:03,520
services and clients anywhere that you

01:52:02,800 --> 01:52:06,159
need to say

01:52:03,520 --> 01:52:06,719
login as github and then the client and

01:52:06,159 --> 01:52:09,840
the

01:52:06,719 --> 01:52:10,800
um and the services can operate as the

01:52:09,840 --> 01:52:13,840
user

01:52:10,800 --> 01:52:16,080
that's where we use github app or sorry

01:52:13,840 --> 01:52:18,400
excuse me uh

01:52:16,080 --> 01:52:19,280
examples being you want to plug in an

01:52:18,400 --> 01:52:22,080
ide

01:52:19,280 --> 01:52:24,159
and say hey i want my code to be synced

01:52:22,080 --> 01:52:25,760
up so whenever there's github desktop

01:52:24,159 --> 01:52:28,239
kit of cli

01:52:25,760 --> 01:52:31,520
vs code all of those use what apps

01:52:28,239 --> 01:52:34,560
behind the scenes

01:52:31,520 --> 01:52:36,480
they are not as powerful as github apps

01:52:34,560 --> 01:52:38,159
they don't get fine grade permissions

01:52:36,480 --> 01:52:40,400
it's really the user permission that's

01:52:38,159 --> 01:52:43,520
getting limit and given to the client

01:52:40,400 --> 01:52:47,280
but very effective when it's just about

01:52:43,520 --> 01:52:47,280
logging in like a user operating

01:52:47,360 --> 01:52:53,760
and and last up github actions

01:52:51,040 --> 01:52:55,040
essentially i call them as independent

01:52:53,760 --> 01:52:58,080
units of work

01:52:55,040 --> 01:53:00,880
that can run effectlessly execute

01:52:58,080 --> 01:53:01,840
on computes not owned by you so they

01:53:00,880 --> 01:53:03,760
will run it on

01:53:01,840 --> 01:53:05,679
github runners that could be owned by

01:53:03,760 --> 01:53:08,960
github or the customer

01:53:05,679 --> 01:53:12,239
to do an explicit amount of work

01:53:08,960 --> 01:53:14,000
like we set up the github cli and then

01:53:12,239 --> 01:53:15,679
we had another action to upload the

01:53:14,000 --> 01:53:15,920
release so there are two good examples

01:53:15,679 --> 01:53:19,119
of

01:53:15,920 --> 01:53:20,960
actions well how end users use it is

01:53:19,119 --> 01:53:22,719
they chain together a series of these

01:53:20,960 --> 01:53:24,880
actions for an end-to-end purpose

01:53:22,719 --> 01:53:27,760
so that's that's really good actions for

01:53:24,880 --> 01:53:31,280
you

01:53:27,760 --> 01:53:34,719
anecdotally this is a view of

01:53:31,280 --> 01:53:37,199
volume between these three we see

01:53:34,719 --> 01:53:38,480
most github actions being billed in

01:53:37,199 --> 01:53:40,639
terms of numbers

01:53:38,480 --> 01:53:41,840
on the marketplace are close to 8 000

01:53:40,639 --> 01:53:45,280
guitar actions

01:53:41,840 --> 01:53:46,560
and 400 gigabytes and that's not a

01:53:45,280 --> 01:53:49,440
testimony of

01:53:46,560 --> 01:53:51,440
their power that's just a testimony of

01:53:49,440 --> 01:53:53,280
the amount of effort it takes to

01:53:51,440 --> 01:53:55,520
build them the amount of operational

01:53:53,280 --> 01:53:57,440
cost it takes to run them

01:53:55,520 --> 01:53:59,520
arguably github apps are way more

01:53:57,440 --> 01:54:01,199
powerful way more uh

01:53:59,520 --> 01:54:03,119
you can do more amount of things you can

01:54:01,199 --> 01:54:05,119
bring in your own compute you can bring

01:54:03,119 --> 01:54:08,080
in your own

01:54:05,119 --> 01:54:09,760
logic that can help developers but

01:54:08,080 --> 01:54:10,239
github actions are those simple things

01:54:09,760 --> 01:54:13,040
that

01:54:10,239 --> 01:54:14,000
that help you get started quickly and

01:54:13,040 --> 01:54:17,520
interact with an

01:54:14,000 --> 01:54:20,239
external system via apis or cli

01:54:17,520 --> 01:54:22,320
or that yeah that's that's really the

01:54:20,239 --> 01:54:24,320
smallest number of the lord

01:54:22,320 --> 01:54:26,960
uh but they're very effective for the

01:54:24,320 --> 01:54:30,480
purpose they have

01:54:26,960 --> 01:54:33,199
um you may you may ask me

01:54:30,480 --> 01:54:35,760
okay great i understand all three but

01:54:33,199 --> 01:54:37,280
but which is the one that i should use

01:54:35,760 --> 01:54:37,760
so i'm going to leave you with this

01:54:37,280 --> 01:54:40,400
small

01:54:37,760 --> 01:54:42,480
cheat sheet of sorts comparing github

01:54:40,400 --> 01:54:44,719
actions with github apps

01:54:42,480 --> 01:54:46,400
right both of them are event driven

01:54:44,719 --> 01:54:48,239
actors pickup action workflows

01:54:46,400 --> 01:54:51,520
triggering when events happen

01:54:48,239 --> 01:54:54,880
it have apps respond to events on github

01:54:51,520 --> 01:54:56,719
uh but how do they compare is

01:54:54,880 --> 01:54:58,719
essentially on the screen let me just

01:54:56,719 --> 01:55:02,000
quickly walk through it

01:54:58,719 --> 01:55:04,560
github actions run on github runners

01:55:02,000 --> 01:55:06,639
compute not owned by you so whenever

01:55:04,560 --> 01:55:09,920
your solution can practically run

01:55:06,639 --> 01:55:10,639
independently on arana you would use

01:55:09,920 --> 01:55:13,360
that

01:55:10,639 --> 01:55:14,239
they interact with other systems outside

01:55:13,360 --> 01:55:17,199
github

01:55:14,239 --> 01:55:19,520
via api of cli it's not a lot of

01:55:17,199 --> 01:55:22,239
heavyweight code running within the

01:55:19,520 --> 01:55:23,599
action whereas github apps are fully

01:55:22,239 --> 01:55:25,520
functional web apps

01:55:23,599 --> 01:55:26,960
fully functional solutions that you can

01:55:25,520 --> 01:55:30,320
host on the cloud

01:55:26,960 --> 01:55:32,159
and respond to events from github

01:55:30,320 --> 01:55:33,440
so for long solutions for more

01:55:32,159 --> 01:55:35,440
heavyweight solutions

01:55:33,440 --> 01:55:36,480
database or simple lightweight

01:55:35,440 --> 01:55:39,599
interactions

01:55:36,480 --> 01:55:40,560
can have actions github actions run

01:55:39,599 --> 01:55:43,599
headlessly

01:55:40,560 --> 01:55:45,520
they don't have a ui whereas in most

01:55:43,599 --> 01:55:46,000
cases what we have seen is github apps

01:55:45,520 --> 01:55:48,480
bring their

01:55:46,000 --> 01:55:50,159
own ui once you post a web app you also

01:55:48,480 --> 01:55:52,239
bring in a web page with it

01:55:50,159 --> 01:55:54,400
which can have user interaction which

01:55:52,239 --> 01:55:57,920
can show you results we can add

01:55:54,400 --> 01:55:59,520
value to the processing that you get

01:55:57,920 --> 01:56:01,840
most github action workflows are

01:55:59,520 --> 01:56:03,599
stateless you don't store a lot of data

01:56:01,840 --> 01:56:06,400
you don't have data storage

01:56:03,599 --> 01:56:07,360
beyond what you can interact over api

01:56:06,400 --> 01:56:09,679
and cli

01:56:07,360 --> 01:56:12,719
but with github apps there are databases

01:56:09,679 --> 01:56:14,960
at play there's a lot of storage so

01:56:12,719 --> 01:56:17,360
that's basically your solution ends up

01:56:14,960 --> 01:56:19,760
having persistent data

01:56:17,360 --> 01:56:21,760
the most critical part of the difference

01:56:19,760 --> 01:56:24,239
github apps works with a fixed set of

01:56:21,760 --> 01:56:27,040
permissions decided by github

01:56:24,239 --> 01:56:28,000
so we pass a github token to the action

01:56:27,040 --> 01:56:30,400
and that token

01:56:28,000 --> 01:56:32,880
has a fixed set of permissions it can

01:56:30,400 --> 01:56:34,000
run on any execution workflow so any

01:56:32,880 --> 01:56:35,679
elector which

01:56:34,000 --> 01:56:37,119
includes your action will be able to run

01:56:35,679 --> 01:56:40,239
that

01:56:37,119 --> 01:56:42,000
github apps have a fine grade permission

01:56:40,239 --> 01:56:44,000
model you can really say what

01:56:42,000 --> 01:56:46,800
permission does my app need and build

01:56:44,000 --> 01:56:48,639
that confidence within consumers

01:56:46,800 --> 01:56:49,920
you need not have all the permissions

01:56:48,639 --> 01:56:51,840
that you need to have

01:56:49,920 --> 01:56:53,119
and there's an administrative workflow

01:56:51,840 --> 01:56:55,840
enterprises love that

01:56:53,119 --> 01:56:57,119
to say what i it can only run on

01:56:55,840 --> 01:57:00,960
repositories

01:56:57,119 --> 01:57:04,159
after it's installed by an item

01:57:00,960 --> 01:57:06,080
so more control for administrators there

01:57:04,159 --> 01:57:07,840
and last but not the least github apps

01:57:06,080 --> 01:57:08,560
are standalone they do one thing at a

01:57:07,840 --> 01:57:10,320
time

01:57:08,560 --> 01:57:13,520
actions can be changed together to

01:57:10,320 --> 01:57:13,520
fulfill a bigger purpose

01:57:14,960 --> 01:57:19,360
the next part of our journey the build

01:57:17,520 --> 01:57:20,159
journey so github gives you a set of

01:57:19,360 --> 01:57:24,560
resources

01:57:20,159 --> 01:57:27,040
out there in terms of docs sdks apis

01:57:24,560 --> 01:57:30,000
uh i want to particularly highlight the

01:57:27,040 --> 01:57:32,000
sdk so there's opticate.github.io and

01:57:30,000 --> 01:57:33,199
you land there you will find a bunch of

01:57:32,000 --> 01:57:35,520
sdks

01:57:33,199 --> 01:57:36,719
managed by the community so the go sdk

01:57:35,520 --> 01:57:39,280
to the python sdk

01:57:36,719 --> 01:57:41,119
that help that simplify how you can

01:57:39,280 --> 01:57:43,599
interact with github and empower your

01:57:41,119 --> 01:57:45,920
solutions

01:57:43,599 --> 01:57:48,040
not just that so there is partner center

01:57:45,920 --> 01:57:49,920
at github so it's available on

01:57:48,040 --> 01:57:52,400
partner.github.com

01:57:49,920 --> 01:57:53,520
it is a collation of resources a

01:57:52,400 --> 01:57:57,199
collection of

01:57:53,520 --> 01:57:59,840
all the uh examples

01:57:57,199 --> 01:58:00,719
all the presentations that you have to

01:57:59,840 --> 01:58:02,960
help you build

01:58:00,719 --> 01:58:05,119
integrity and extent so it's built

01:58:02,960 --> 01:58:05,520
together by partners like you so you can

01:58:05,119 --> 01:58:08,080
go

01:58:05,520 --> 01:58:10,239
join the partner program and get access

01:58:08,080 --> 01:58:12,320
to all the resources collated

01:58:10,239 --> 01:58:15,040
across the world and interact with other

01:58:12,320 --> 01:58:15,040
partners as well

01:58:16,400 --> 01:58:20,080
let's move to the last part of the

01:58:18,000 --> 01:58:20,719
journey so we have planned what we want

01:58:20,080 --> 01:58:22,320
to build

01:58:20,719 --> 01:58:24,960
we have built it using the resources

01:58:22,320 --> 01:58:26,880
that we have now is the time to release

01:58:24,960 --> 01:58:28,239
so we looked at it earlier with the

01:58:26,880 --> 01:58:30,239
actions

01:58:28,239 --> 01:58:32,840
that's where the marketplace so github

01:58:30,239 --> 01:58:35,520
provides what we call the github

01:58:32,840 --> 01:58:37,920
marketplace i call it the window to the

01:58:35,520 --> 01:58:39,599
world for your tools

01:58:37,920 --> 01:58:41,360
whenever you have a solution whenever

01:58:39,599 --> 01:58:44,000
you have a tool and you want to share it

01:58:41,360 --> 01:58:45,840
the marketplace is the means to do that

01:58:44,000 --> 01:58:49,199
there are 400 plus apps

01:58:45,840 --> 01:58:51,840
and close to 7600 actions

01:58:49,199 --> 01:58:53,280
on marketplace already and growing over

01:58:51,840 --> 01:58:55,760
time

01:58:53,280 --> 01:58:57,199
so you list your listing and listing on

01:58:55,760 --> 01:58:58,880
marketplace is pretty simple

01:58:57,199 --> 01:59:01,360
all you have to do is fill up the

01:58:58,880 --> 01:59:03,599
description for your app in action

01:59:01,360 --> 01:59:05,280
and it goes live on the marketplace like

01:59:03,599 --> 01:59:08,800
you saw

01:59:05,280 --> 01:59:10,320
not just that you can also do a sense of

01:59:08,800 --> 01:59:13,440
verification for

01:59:10,320 --> 01:59:13,760
your organization it's a means for you

01:59:13,440 --> 01:59:16,880
to

01:59:13,760 --> 01:59:20,080
really get credit really a test on your

01:59:16,880 --> 01:59:22,719
apps and actions being built by you

01:59:20,080 --> 01:59:23,440
you see it's easy on github for somebody

01:59:22,719 --> 01:59:25,520
to

01:59:23,440 --> 01:59:27,360
say i publish this and the name of the

01:59:25,520 --> 01:59:30,159
handle might look very similar to your

01:59:27,360 --> 01:59:30,159
new handle

01:59:30,560 --> 01:59:33,760
you might get confused differentiating

01:59:32,880 --> 01:59:35,760
that

01:59:33,760 --> 01:59:37,119
so by doing the publisher verification

01:59:35,760 --> 01:59:38,560
you get the credit

01:59:37,119 --> 01:59:40,880
you make sure your organizational

01:59:38,560 --> 01:59:43,119
identity is verified by github

01:59:40,880 --> 01:59:44,320
and that tracks transfer to your apps

01:59:43,119 --> 01:59:45,679
and actions as well

01:59:44,320 --> 01:59:48,480
giving you the extra level of

01:59:45,679 --> 01:59:50,960
credibility that extra level of proof

01:59:48,480 --> 01:59:50,960
of things

01:59:51,840 --> 01:59:57,760
uh and that is what we had today so

01:59:56,000 --> 02:00:00,639
thank you for joining satellite thank

01:59:57,760 --> 02:00:04,560
you for coming and listening to me

02:00:00,639 --> 02:00:06,239
i hope i was able to help you with

02:00:04,560 --> 02:00:08,239
understanding the layout of apps and

02:00:06,239 --> 02:00:10,239
actions and

02:00:08,239 --> 02:00:11,679
and hope to see your apps actions come

02:00:10,239 --> 02:00:14,080
on the marketplace

02:00:11,679 --> 02:00:14,080
thank you

02:00:17,040 --> 02:00:23,679
thank you sashank this was great layoff

02:00:20,639 --> 02:00:25,599
plan of apps and actions

02:00:23,679 --> 02:00:27,599
let's start with questions so the first

02:00:25,599 --> 02:00:30,639
question that

02:00:27,599 --> 02:00:32,639
i think folks would want to know is any

02:00:30,639 --> 02:00:35,119
github integrations that you really

02:00:32,639 --> 02:00:35,119
recommend

02:00:36,320 --> 02:00:43,040
you see as github my our

02:00:39,599 --> 02:00:45,760
platform is really to enable

02:00:43,040 --> 02:00:48,000
all of you get the best out of it right

02:00:45,760 --> 02:00:50,560
so when you write a tool or solution

02:00:48,000 --> 02:00:51,760
it's as important as the one github root

02:00:50,560 --> 02:00:54,239
itself

02:00:51,760 --> 02:00:54,880
so my recommendation would not be based

02:00:54,239 --> 02:00:57,840
on use

02:00:54,880 --> 02:01:00,080
a solution a versus b head to the

02:00:57,840 --> 02:01:02,480
marketplace search for what you need

02:01:00,080 --> 02:01:04,800
if you need a ci to just look for ci

02:01:02,480 --> 02:01:07,360
solutions on the marketplace

02:01:04,800 --> 02:01:09,440
and choose for yourself we are an open

02:01:07,360 --> 02:01:12,080
source company we enable

02:01:09,440 --> 02:01:12,880
everyone to get a fair uh lay of the

02:01:12,080 --> 02:01:14,880
land

02:01:12,880 --> 02:01:16,800
and i want you to make your own choices

02:01:14,880 --> 02:01:19,520
based on what works for you

02:01:16,800 --> 02:01:20,080
so i'm not going to name integration but

02:01:19,520 --> 02:01:23,840
i'm going to

02:01:20,080 --> 02:01:26,480
preach what you should do

02:01:23,840 --> 02:01:27,920
wow that's pretty smart and we got

02:01:26,480 --> 02:01:28,960
another one on the same lines for you

02:01:27,920 --> 02:01:33,920
shank

02:01:28,960 --> 02:01:33,920
how do i know about quality of an app

02:01:34,800 --> 02:01:38,000
yeah great question so that's actually

02:01:36,880 --> 02:01:41,440
something

02:01:38,000 --> 02:01:44,400
that comes to me very often right like

02:01:41,440 --> 02:01:44,800
there are like i said there are 400 apps

02:01:44,400 --> 02:01:47,040
02:01:44,800 --> 02:01:49,040
000 actions which one is better than

02:01:47,040 --> 02:01:51,520
others

02:01:49,040 --> 02:01:53,119
and and you see i going by the open

02:01:51,520 --> 02:01:56,560
source principles again

02:01:53,119 --> 02:01:58,239
it's really about you rating them you

02:01:56,560 --> 02:02:00,320
waiting them to say

02:01:58,239 --> 02:02:01,840
which one works better which one gives

02:02:00,320 --> 02:02:04,000
you the best support

02:02:01,840 --> 02:02:05,040
at the end of the day you want to use an

02:02:04,000 --> 02:02:08,400
app or an action

02:02:05,040 --> 02:02:08,880
that's functional and supported that we

02:02:08,400 --> 02:02:11,840
get an

02:02:08,880 --> 02:02:13,199
update in case you hit an issue on which

02:02:11,840 --> 02:02:15,440
is what we try for

02:02:13,199 --> 02:02:16,719
so if you hit the marketplace you will

02:02:15,440 --> 02:02:19,679
first of all

02:02:16,719 --> 02:02:20,239
like i see the publisher verification

02:02:19,679 --> 02:02:22,719
badge

02:02:20,239 --> 02:02:23,679
that i talked about which tells you that

02:02:22,719 --> 02:02:26,239
the publisher

02:02:23,679 --> 02:02:27,920
is genuine that publisher's identity is

02:02:26,239 --> 02:02:29,599
verified by data

02:02:27,920 --> 02:02:32,960
if you drop them in email if you reach

02:02:29,599 --> 02:02:34,880
out to them you will get a response

02:02:32,960 --> 02:02:36,000
and besides that there are indicators

02:02:34,880 --> 02:02:38,960
like stars

02:02:36,000 --> 02:02:40,000
indicators like update time that you can

02:02:38,960 --> 02:02:41,840
see

02:02:40,000 --> 02:02:43,679
and just like you would use an open

02:02:41,840 --> 02:02:45,199
source library you should look at

02:02:43,679 --> 02:02:47,679
apps and actions as open source

02:02:45,199 --> 02:02:49,920
libraries to choose from

02:02:47,679 --> 02:02:51,199
and and that's what i mean by you make

02:02:49,920 --> 02:02:53,840
your own decisions

02:02:51,199 --> 02:02:57,199
we enable you with information but

02:02:53,840 --> 02:02:57,199
decision is really ours

02:02:58,080 --> 02:03:02,560
so we spoke about uh from a consumer

02:03:00,960 --> 02:03:05,199
point of view when i'm using

02:03:02,560 --> 02:03:06,400
or wanting to use uh apps and actions if

02:03:05,199 --> 02:03:08,080
i think from a

02:03:06,400 --> 02:03:10,800
contributor point of view or as a

02:03:08,080 --> 02:03:11,440
publisher uh what are the ways that i

02:03:10,800 --> 02:03:14,719
can

02:03:11,440 --> 02:03:15,840
ensure my app or my action gets the

02:03:14,719 --> 02:03:20,159
maximum

02:03:15,840 --> 02:03:20,159
footfall or more people get to use it

02:03:20,239 --> 02:03:26,320
yeah so um pretty much

02:03:24,159 --> 02:03:28,719
the first okay i'll maybe be preachy

02:03:26,320 --> 02:03:31,920
here on this one

02:03:28,719 --> 02:03:34,800
if you are writing an app or an action

02:03:31,920 --> 02:03:36,560
my i would advocate you to build a good

02:03:34,800 --> 02:03:38,560
listing page

02:03:36,560 --> 02:03:40,080
write a good readme for your action

02:03:38,560 --> 02:03:41,119
write a good listing page with

02:03:40,080 --> 02:03:43,360
screenshots

02:03:41,119 --> 02:03:44,239
so that end users can understand what

02:03:43,360 --> 02:03:47,119
you do

02:03:44,239 --> 02:03:49,599
can give you feedback on what you do

02:03:47,119 --> 02:03:52,639
maintain a repository on github

02:03:49,599 --> 02:03:54,560
where consumers can open issues against

02:03:52,639 --> 02:03:57,440
your app or action

02:03:54,560 --> 02:03:59,679
can give you feedback through that means

02:03:57,440 --> 02:04:02,560
and last but not the least

02:03:59,679 --> 02:04:03,199
get that publisher verification back so

02:04:02,560 --> 02:04:05,920
there is

02:04:03,199 --> 02:04:07,440
a minimum level of curation that github

02:04:05,920 --> 02:04:09,840
can help you with

02:04:07,440 --> 02:04:11,920
by doing those three things besides the

02:04:09,840 --> 02:04:15,040
regular ones of

02:04:11,920 --> 02:04:17,199
more front doors for yours so blogging

02:04:15,040 --> 02:04:20,400
about it writing about it

02:04:17,199 --> 02:04:22,000
you get more eyeballs on it and by

02:04:20,400 --> 02:04:23,520
giving the right level of support by

02:04:22,000 --> 02:04:27,199
helping the community

02:04:23,520 --> 02:04:27,199
you will be the popular actor

02:04:27,599 --> 02:04:31,599
thanks shashank you were very loud and

02:04:29,920 --> 02:04:32,639
clear that we need to stick to the

02:04:31,599 --> 02:04:35,199
fundamentals

02:04:32,639 --> 02:04:36,719
and thanks a lot for the insightful

02:04:35,199 --> 02:04:39,199
answers to all the questions

02:04:36,719 --> 02:04:41,040
viewers shashank is not going anywhere

02:04:39,199 --> 02:04:41,520
he's gonna stick with you for another 30

02:04:41,040 --> 02:04:44,079
minutes

02:04:41,520 --> 02:04:45,040
but in get up discussions so you know

02:04:44,079 --> 02:04:47,040
where to catch him

02:04:45,040 --> 02:04:48,960
and get all your queries answered

02:04:47,040 --> 02:04:53,840
shashank we'll see you next time

02:04:48,960 --> 02:04:53,840
thank you bye

02:04:59,360 --> 02:05:06,000
so much good stuff so far

02:05:02,480 --> 02:05:09,360
but there is more to come coming up on

02:05:06,000 --> 02:05:09,760
devops channel is a session on mlogs and

02:05:09,360 --> 02:05:12,880
how

02:05:09,760 --> 02:05:15,840
github uses github to collaborate

02:05:12,880 --> 02:05:16,320
later on the oss channel is how to get

02:05:15,840 --> 02:05:20,239
up

02:05:16,320 --> 02:05:24,000
like a boss as well as the state of ui

02:05:20,239 --> 02:05:27,119
and ux in open source both channels

02:05:24,000 --> 02:05:34,159
will have a great closing sessions from

02:05:27,119 --> 02:05:36,719
our very own manish sharma

02:05:34,159 --> 02:05:37,440
and we are loving all the active all the

02:05:36,719 --> 02:05:39,040
comments

02:05:37,440 --> 02:05:41,440
all the activity that is happening on

02:05:39,040 --> 02:05:44,560
twitter right now so keep tweeting to us

02:05:41,440 --> 02:05:47,360
at github india hashtag github

02:05:44,560 --> 02:05:49,280
satellite and tell us what you are most

02:05:47,360 --> 02:05:50,239
excited about seeing today tell us your

02:05:49,280 --> 02:05:52,560
favorite moments

02:05:50,239 --> 02:05:53,520
we are all ears to hear what you gotta

02:05:52,560 --> 02:05:55,360
say and

02:05:53,520 --> 02:05:57,679
we are gonna comment on everything that

02:05:55,360 --> 02:06:00,000
you're talking about

02:05:57,679 --> 02:06:01,199
yeah or also maybe share how you're

02:06:00,000 --> 02:06:04,079
watching us

02:06:01,199 --> 02:06:05,360
so share snippets of where you are where

02:06:04,079 --> 02:06:08,480
you're watching us

02:06:05,360 --> 02:06:11,360
from so moving to the next session

02:06:08,480 --> 02:06:12,880
is a session a lightning talk about

02:06:11,360 --> 02:06:15,520
accelerating

02:06:12,880 --> 02:06:16,800
inner develop with kubernetes

02:06:15,520 --> 02:06:21,040
applications with

02:06:16,800 --> 02:06:22,400
scaffold and how scaffold can help you

02:06:21,040 --> 02:06:25,840
create a production

02:06:22,400 --> 02:06:26,480
ready ci cd pipeline sharing all about

02:06:25,840 --> 02:06:30,000
that

02:06:26,480 --> 02:06:33,119
is ashish chaudhry a senior developer

02:06:30,000 --> 02:06:34,320
from city he's an active blogger a

02:06:33,119 --> 02:06:37,440
technical writer

02:06:34,320 --> 02:06:40,639
who obviously loves java spring

02:06:37,440 --> 02:06:43,840
devops and the cloud and he

02:06:40,639 --> 02:06:46,639
is a big advocate of open source

02:06:43,840 --> 02:06:46,639
technologies

02:06:47,040 --> 02:06:50,159
remember to engage with us on

02:06:48,320 --> 02:06:59,840
discussions with that ashish

02:06:50,159 --> 02:06:59,840
take it away

02:07:02,639 --> 02:07:08,639
yeah so uh hi hi everyone

02:07:06,000 --> 02:07:10,560
uh welcome to get up satellite uh my

02:07:08,639 --> 02:07:13,199
name is ashish chaudhary and thanks for

02:07:10,560 --> 02:07:15,040
such a great introduction and so since

02:07:13,199 --> 02:07:17,840
this is a lightning talk i

02:07:15,040 --> 02:07:19,280
will be i have to be a little bit quick

02:07:17,840 --> 02:07:20,960
but i will also make sure that you

02:07:19,280 --> 02:07:21,360
understand the concept that i'm trying

02:07:20,960 --> 02:07:23,599
to

02:07:21,360 --> 02:07:24,560
convey the message in this lightning

02:07:23,599 --> 02:07:26,880
talk so

02:07:24,560 --> 02:07:28,000
the topic of this lighting top is excel

02:07:26,880 --> 02:07:30,719
how you can use

02:07:28,000 --> 02:07:33,360
a tool called as a scaffold this is an

02:07:30,719 --> 02:07:34,960
open source tool developed by google

02:07:33,360 --> 02:07:37,199
so you know you can accelerate

02:07:34,960 --> 02:07:40,480
accelerate your inner development loop

02:07:37,199 --> 02:07:42,000
and as uh so as uh

02:07:40,480 --> 02:07:44,560
as it was explained in in the

02:07:42,000 --> 02:07:46,320
introduction uh that i was for a

02:07:44,560 --> 02:07:48,560
financial services company city group i

02:07:46,320 --> 02:07:51,040
worked there as a senior developer

02:07:48,560 --> 02:07:52,960
and let's just uh you know quickly go

02:07:51,040 --> 02:07:54,560
through the agenda for this talk so this

02:07:52,960 --> 02:07:56,000
is what we are going to cover in this

02:07:54,560 --> 02:07:57,520
presentation

02:07:56,000 --> 02:07:59,280
uh so first we will talk about

02:07:57,520 --> 02:08:01,360
application development inner and outer

02:07:59,280 --> 02:08:03,760
loop and then

02:08:01,360 --> 02:08:05,360
we will talk about related to one of the

02:08:03,760 --> 02:08:07,119
concept is how is the current developer

02:08:05,360 --> 02:08:09,840
experience with kubernetes

02:08:07,119 --> 02:08:11,440
and how scaffold can help that you know

02:08:09,840 --> 02:08:13,840
improving that

02:08:11,440 --> 02:08:16,079
developer experience and then we will

02:08:13,840 --> 02:08:18,560
definitely talk about github actions

02:08:16,079 --> 02:08:20,480
and there will be a demo on how you can

02:08:18,560 --> 02:08:23,440
build and deploy a java application

02:08:20,480 --> 02:08:26,400
using github actions and scaffold

02:08:23,440 --> 02:08:27,040
and then there will be some references

02:08:26,400 --> 02:08:29,119
which you can

02:08:27,040 --> 02:08:30,320
after this talk you can go through for

02:08:29,119 --> 02:08:33,679
your uh to

02:08:30,320 --> 02:08:36,239
get some understanding on the topic and

02:08:33,679 --> 02:08:39,599
so this is pretty much we are going to

02:08:36,239 --> 02:08:43,280
cover today so let's get started

02:08:39,599 --> 02:08:44,960
so let me uh talk about the

02:08:43,280 --> 02:08:47,199
application development inner and outer

02:08:44,960 --> 02:08:50,239
loop so this is not a new concept

02:08:47,199 --> 02:08:51,920
the term may look like a bit new but

02:08:50,239 --> 02:08:53,440
the way we have been developing

02:08:51,920 --> 02:08:54,000
application over the years as a

02:08:53,440 --> 02:08:57,360
developer

02:08:54,000 --> 02:08:59,199
it's pretty much the same so this so

02:08:57,360 --> 02:09:01,040
when you start you know working on an

02:08:59,199 --> 02:09:03,440
application or you work on a

02:09:01,040 --> 02:09:05,119
story item so you you are in your inner

02:09:03,440 --> 02:09:06,560
development tool so basically this is

02:09:05,119 --> 02:09:08,560
where you are you know you do

02:09:06,560 --> 02:09:10,159
you are doing coding you are building

02:09:08,560 --> 02:09:10,639
testing and verifying everything in your

02:09:10,159 --> 02:09:13,760
local

02:09:10,639 --> 02:09:16,480
if possible in your case and

02:09:13,760 --> 02:09:18,400
so most of the time we do we we as a

02:09:16,480 --> 02:09:20,960
developer spend time in the

02:09:18,400 --> 02:09:21,920
inner development group and then

02:09:20,960 --> 02:09:24,239
obviously when

02:09:21,920 --> 02:09:26,000
you know uh you feel comfortable that

02:09:24,239 --> 02:09:28,639
your changes are fine you can

02:09:26,000 --> 02:09:29,040
share your changes with other you do a

02:09:28,639 --> 02:09:31,599
git

02:09:29,040 --> 02:09:32,480
get push and merge your pull request and

02:09:31,599 --> 02:09:34,639
then

02:09:32,480 --> 02:09:35,760
your entire cicd pipeline comes with a

02:09:34,639 --> 02:09:39,440
picture so this is

02:09:35,760 --> 02:09:40,960
where your you know outer development

02:09:39,440 --> 02:09:42,800
comes into the picture and obviously you

02:09:40,960 --> 02:09:44,079
are doing bunch of things there

02:09:42,800 --> 02:09:46,320
you are running your integration

02:09:44,079 --> 02:09:49,760
functional test and

02:09:46,320 --> 02:09:51,119
your sonar sonar checks code quality

02:09:49,760 --> 02:09:54,159
checks and then finally

02:09:51,119 --> 02:09:55,840
the application gets deployed so with

02:09:54,159 --> 02:09:58,639
this being in the

02:09:55,840 --> 02:10:00,239
we've been doing this for all the years

02:09:58,639 --> 02:10:02,000
so how does it changes

02:10:00,239 --> 02:10:04,480
uh when kubernetes come come into the

02:10:02,000 --> 02:10:05,520
picture so uh so this is uh these are

02:10:04,480 --> 02:10:08,400
some of the steps

02:10:05,520 --> 02:10:09,360
uh that uh we as a developer you know

02:10:08,400 --> 02:10:11,199
typically have to

02:10:09,360 --> 02:10:12,719
go through once we start to you know

02:10:11,199 --> 02:10:13,199
thinking about making application cloud

02:10:12,719 --> 02:10:16,079
native

02:10:13,199 --> 02:10:17,119
so so like for instance if you are um

02:10:16,079 --> 02:10:18,719
you have to build that

02:10:17,119 --> 02:10:20,239
build your application image you have to

02:10:18,719 --> 02:10:21,520
tag it and then push it

02:10:20,239 --> 02:10:24,079
and obviously you have to create your

02:10:21,520 --> 02:10:24,719
kubernetes manifest and if there is any

02:10:24,079 --> 02:10:27,840
change

02:10:24,719 --> 02:10:29,840
and so you and you have to

02:10:27,840 --> 02:10:31,520
manually update in most of the cases

02:10:29,840 --> 02:10:33,679
your kubernetes manifest so that it

02:10:31,520 --> 02:10:35,920
points to the correct image version

02:10:33,679 --> 02:10:37,040
and then obviously you have to deploy

02:10:35,920 --> 02:10:38,880
and test and

02:10:37,040 --> 02:10:41,040
you know verify your changes so if

02:10:38,880 --> 02:10:42,880
anything goes wrong in any of these

02:10:41,040 --> 02:10:44,880
steps and if you see your changes are

02:10:42,880 --> 02:10:46,400
not correct or if you you have to

02:10:44,880 --> 02:10:49,040
so you have to repeat that entire

02:10:46,400 --> 02:10:50,480
lifecycle so there is uh

02:10:49,040 --> 02:10:52,079
so kubernetes introduce lot of

02:10:50,480 --> 02:10:53,119
complexity into the development

02:10:52,079 --> 02:10:56,400
lifecycle

02:10:53,119 --> 02:10:58,480
and related to that is like so if

02:10:56,400 --> 02:11:00,560
if we as a developer like how do we feel

02:10:58,480 --> 02:11:01,920
about the developer experience that we

02:11:00,560 --> 02:11:05,040
have with kubernetes

02:11:01,920 --> 02:11:07,119
in general so let's talk about the

02:11:05,040 --> 02:11:08,560
kubernetes experience that we as a

02:11:07,119 --> 02:11:12,079
developer feel whether

02:11:08,560 --> 02:11:14,560
how how we feel while interacting

02:11:12,079 --> 02:11:16,000
with the communities in general as a

02:11:14,560 --> 02:11:18,800
developer

02:11:16,000 --> 02:11:20,159
so as a developer i'm the primary thing

02:11:18,800 --> 02:11:22,960
that i

02:11:20,159 --> 02:11:23,599
am interested in you know i'm i want to

02:11:22,960 --> 02:11:26,719
build

02:11:23,599 --> 02:11:27,679
build the product or add futures ahead

02:11:26,719 --> 02:11:29,599
and

02:11:27,679 --> 02:11:31,440
exciting new features to the product or

02:11:29,599 --> 02:11:35,119
something like that so most of this

02:11:31,440 --> 02:11:36,639
is related or revolves around coding

02:11:35,119 --> 02:11:39,040
and as a developer i might not be

02:11:36,639 --> 02:11:41,119
interested in knowing kubernetes so

02:11:39,040 --> 02:11:43,440
even though it will definitely be going

02:11:41,119 --> 02:11:45,920
a good skill skill set to have

02:11:43,440 --> 02:11:47,520
but do as a developer do i really need

02:11:45,920 --> 02:11:49,119
to know how my application is going to

02:11:47,520 --> 02:11:49,440
be containerized or where it is going to

02:11:49,119 --> 02:11:51,920
be

02:11:49,440 --> 02:11:52,960
deployed so kubernetes is definitely a

02:11:51,920 --> 02:11:54,400
great tool but

02:11:52,960 --> 02:11:56,639
there are some hardest that we as a

02:11:54,400 --> 02:11:57,679
developer need to understand we also

02:11:56,639 --> 02:12:00,560
need to understand that

02:11:57,679 --> 02:12:01,199
developers are not kubernetes experts

02:12:00,560 --> 02:12:03,520
and this is

02:12:01,199 --> 02:12:04,719
you know one of you know fun way of

02:12:03,520 --> 02:12:07,040
looking at it

02:12:04,719 --> 02:12:08,719
so if some if someone say that

02:12:07,040 --> 02:12:09,679
developing application with kubernetes

02:12:08,719 --> 02:12:12,800
is easy

02:12:09,679 --> 02:12:13,760
so uh i i will respectfully disagree it

02:12:12,800 --> 02:12:15,599
is not easy

02:12:13,760 --> 02:12:16,880
so no uh so as we have seen in the

02:12:15,599 --> 02:12:20,000
previous slide so there are

02:12:16,880 --> 02:12:23,360
a lot of you know additional steps added

02:12:20,000 --> 02:12:25,840
so with that being in picture um

02:12:23,360 --> 02:12:26,400
it is definitely not easy so we as a

02:12:25,840 --> 02:12:28,800
developer

02:12:26,400 --> 02:12:30,400
uh we need better tooling so that can

02:12:28,800 --> 02:12:33,040
help us to you know

02:12:30,400 --> 02:12:33,440
handle this lot of boilerplate part of

02:12:33,040 --> 02:12:36,320
you know

02:12:33,440 --> 02:12:37,920
building pushing and deploying so there

02:12:36,320 --> 02:12:38,560
has to be some bad better tooling around

02:12:37,920 --> 02:12:42,960
instant

02:12:38,560 --> 02:12:45,599
instead of we going you know into the uh

02:12:42,960 --> 02:12:46,800
reinvent wheel sort of mindset and

02:12:45,599 --> 02:12:49,199
develop things of

02:12:46,800 --> 02:12:50,800
of our own so this is where scaffold

02:12:49,199 --> 02:12:53,280
comes into the picture

02:12:50,800 --> 02:12:53,920
and it it helps developer in automating

02:12:53,280 --> 02:12:57,360
a lot of

02:12:53,920 --> 02:12:59,760
those stuffs and so

02:12:57,360 --> 02:13:02,239
scaffold is really a powerful tool it's

02:12:59,760 --> 02:13:04,320
an open source tool you can use it

02:13:02,239 --> 02:13:06,400
if you are facing such challenges and

02:13:04,320 --> 02:13:08,239
the primary primarily the problem that

02:13:06,400 --> 02:13:11,199
it solves is like you know

02:13:08,239 --> 02:13:12,560
how you can uh handle the workflow of

02:13:11,199 --> 02:13:14,719
your

02:13:12,560 --> 02:13:16,000
so typically your build push deploy

02:13:14,719 --> 02:13:19,119
cycle gets automated

02:13:16,000 --> 02:13:21,679
with help of scaffold

02:13:19,119 --> 02:13:22,159
and as you as a developer you can focus

02:13:21,679 --> 02:13:24,800
on

02:13:22,159 --> 02:13:25,360
the most important part which is writing

02:13:24,800 --> 02:13:28,800
code

02:13:25,360 --> 02:13:31,920
so you can go back and focus on

02:13:28,800 --> 02:13:32,480
you know solving real uh real life

02:13:31,920 --> 02:13:35,679
problems

02:13:32,480 --> 02:13:37,520
and you know all those things and

02:13:35,679 --> 02:13:39,199
so let's get into little bit into

02:13:37,520 --> 02:13:42,239
scaffold like uh

02:13:39,199 --> 02:13:42,880
party the architecture of scaffold so as

02:13:42,239 --> 02:13:45,840
you can see

02:13:42,880 --> 02:13:47,760
scaffold and the main uh the thing that

02:13:45,840 --> 02:13:49,280
i like most about scaffold is that it

02:13:47,760 --> 02:13:52,239
has a pluggable architecture

02:13:49,280 --> 02:13:53,760
you can pick a build tool of build or

02:13:52,239 --> 02:13:56,079
deploy tool of your choice

02:13:53,760 --> 02:13:57,920
you may be using uh docker in your local

02:13:56,079 --> 02:13:58,800
and then you might be using something

02:13:57,920 --> 02:14:00,560
build back or

02:13:58,800 --> 02:14:02,719
jab or maybe one plugin for your

02:14:00,560 --> 02:14:03,280
deployment and in your local you might

02:14:02,719 --> 02:14:05,520
be using

02:14:03,280 --> 02:14:06,320
cube cutter for deployment and then for

02:14:05,520 --> 02:14:08,400
your

02:14:06,320 --> 02:14:10,159
production scenario you are using helm

02:14:08,400 --> 02:14:13,280
so it has all those features

02:14:10,159 --> 02:14:16,000
you know you you can pretty much

02:14:13,280 --> 02:14:17,440
play with any build tool of your choice

02:14:16,000 --> 02:14:20,880
and it has its own

02:14:17,440 --> 02:14:24,239
tagging strategy to tag the images

02:14:20,880 --> 02:14:25,520
and so let's now let's talk about like

02:14:24,239 --> 02:14:27,679
how scaffold

02:14:25,520 --> 02:14:28,960
works like what are the things that you

02:14:27,679 --> 02:14:31,280
know how it

02:14:28,960 --> 02:14:32,880
the two as a tool it works so if you

02:14:31,280 --> 02:14:35,920
look at this diagram

02:14:32,880 --> 02:14:37,280
uh so at the bottom if you see there are

02:14:35,920 --> 02:14:40,000
two commands scaffold dev

02:14:37,280 --> 02:14:40,639
and scaffold run so these are the most

02:14:40,000 --> 02:14:43,119
uh

02:14:40,639 --> 02:14:44,079
used command with scaffold so when you

02:14:43,119 --> 02:14:47,440
run scaffold

02:14:44,079 --> 02:14:49,280
what actually happens is that it looks

02:14:47,440 --> 02:14:50,880
it what it has its own file watcher

02:14:49,280 --> 02:14:52,400
mechanism so it

02:14:50,880 --> 02:14:54,159
looks for any changes in your source

02:14:52,400 --> 02:14:55,679
code and if it feels that there is a

02:14:54,159 --> 02:14:57,199
need to compile then it will do the

02:14:55,679 --> 02:14:57,840
whole compilation of the application

02:14:57,199 --> 02:15:00,960
otherwise

02:14:57,840 --> 02:15:03,760
it has the you know capability or

02:15:00,960 --> 02:15:04,719
it's it has that intelligence so that it

02:15:03,760 --> 02:15:06,719
can not only

02:15:04,719 --> 02:15:09,520
just sync the file and restart your code

02:15:06,719 --> 02:15:12,560
and it can skip the build and push part

02:15:09,520 --> 02:15:14,159
so this is and this can accelerate your

02:15:12,560 --> 02:15:15,920
inner development loop and obviously you

02:15:14,159 --> 02:15:17,599
can not only use for local development

02:15:15,920 --> 02:15:19,920
you can do it for remote

02:15:17,599 --> 02:15:22,079
and remote deployment like for if you

02:15:19,920 --> 02:15:24,000
are using gke for instance then you can

02:15:22,079 --> 02:15:27,520
definitely use carbon run command so

02:15:24,000 --> 02:15:29,840
scaffold run is a sort of you know

02:15:27,520 --> 02:15:31,040
end-to-end city pipeline sort of command

02:15:29,840 --> 02:15:33,040
so it runs your

02:15:31,040 --> 02:15:35,280
entire workflow at once while scaffold

02:15:33,040 --> 02:15:37,599
dev is a continuous

02:15:35,280 --> 02:15:39,599
mode command in which it also stream

02:15:37,599 --> 02:15:41,360
logs which is a really cool feature and

02:15:39,599 --> 02:15:42,960
once your ports are started you can

02:15:41,360 --> 02:15:44,960
in your local you can definitely see

02:15:42,960 --> 02:15:47,040
their application is get started and up

02:15:44,960 --> 02:15:49,760
and running

02:15:47,040 --> 02:15:51,599
so this is how scaffold uh typical

02:15:49,760 --> 02:15:52,960
workflow with scaffold is

02:15:51,599 --> 02:15:55,040
and and this is the scaffold

02:15:52,960 --> 02:15:56,560
configuration files which which is how

02:15:55,040 --> 02:15:58,960
stuff would understand like what it

02:15:56,560 --> 02:16:00,719
need to do when you run the scaffold dab

02:15:58,960 --> 02:16:03,360
or stop hold run command

02:16:00,719 --> 02:16:04,000
so for instance in this image you can

02:16:03,360 --> 02:16:06,480
see that

02:16:04,000 --> 02:16:07,760
i'm using jib as a maven plugin so jib

02:16:06,480 --> 02:16:08,800
allows you to containerize your

02:16:07,760 --> 02:16:10,719
application

02:16:08,800 --> 02:16:12,000
uh so you input is your source code and

02:16:10,719 --> 02:16:14,159
the output is your

02:16:12,000 --> 02:16:15,679
uh containerized image and then with

02:16:14,159 --> 02:16:18,320
cube catal we are deploying

02:16:15,679 --> 02:16:20,639
uh we have so this is how scaffold

02:16:18,320 --> 02:16:22,880
configuration works

02:16:20,639 --> 02:16:23,840
so light camera and github actions so

02:16:22,880 --> 02:16:25,840
github actions

02:16:23,840 --> 02:16:28,320
is i think one of the cool feature that

02:16:25,840 --> 02:16:30,159
within the comfort of your

02:16:28,320 --> 02:16:31,360
github repository you can create your ci

02:16:30,159 --> 02:16:33,120
cd pipeline

02:16:31,360 --> 02:16:34,960
and there is a there is a great market

02:16:33,120 --> 02:16:36,639
place available for you know to

02:16:34,960 --> 02:16:38,960
choose any date of action available

02:16:36,639 --> 02:16:42,000
there based upon your need

02:16:38,960 --> 02:16:43,760
so before you know

02:16:42,000 --> 02:16:45,519
i jump to my demo i just wanted to give

02:16:43,760 --> 02:16:46,960
a quick uh

02:16:45,519 --> 02:16:48,160
understanding about the how data

02:16:46,960 --> 02:16:48,800
vaccines are what are the main

02:16:48,160 --> 02:16:50,880
components

02:16:48,800 --> 02:16:52,399
in that so it's mainly work on the event

02:16:50,880 --> 02:16:55,519
mechanism

02:16:52,399 --> 02:16:56,559
uh it whenever any for example whenever

02:16:55,519 --> 02:16:58,719
someone

02:16:56,559 --> 02:17:00,399
there is any pull request or push

02:16:58,719 --> 02:17:02,880
changes done on your branch then

02:17:00,399 --> 02:17:04,160
it triggers your workflow so workflows

02:17:02,880 --> 02:17:06,479
typically you have a ml

02:17:04,160 --> 02:17:07,200
syntax file in which you define your

02:17:06,479 --> 02:17:09,040
jobs

02:17:07,200 --> 02:17:10,479
and then you have some steps and actions

02:17:09,040 --> 02:17:13,040
which gets executed

02:17:10,479 --> 02:17:14,639
actions are basically such as whether

02:17:13,040 --> 02:17:16,319
you wanted to check out the repository

02:17:14,639 --> 02:17:17,359
or install some tool like for example

02:17:16,319 --> 02:17:20,639
java

02:17:17,359 --> 02:17:22,160
and then finally there is a runner which

02:17:20,639 --> 02:17:23,280
is your server instance where everything

02:17:22,160 --> 02:17:25,519
gets run

02:17:23,280 --> 02:17:26,479
uh this entire workflow get executed and

02:17:25,519 --> 02:17:28,960
it

02:17:26,479 --> 02:17:31,040
and you can see the it you can see the

02:17:28,960 --> 02:17:32,639
logs in the data repository itself

02:17:31,040 --> 02:17:33,760
whether the actions are successful or

02:17:32,639 --> 02:17:36,880
not

02:17:33,760 --> 02:17:39,439
and so this is a really

02:17:36,880 --> 02:17:40,399
cool way of you know creating cicd

02:17:39,439 --> 02:17:43,120
pipeline from your

02:17:40,399 --> 02:17:44,240
comfort of your id so next i wanted to

02:17:43,120 --> 02:17:47,679
give a

02:17:44,240 --> 02:17:49,840
quick demo about how you can you know

02:17:47,679 --> 02:17:51,359
create ci cd pipe pipeline with the

02:17:49,840 --> 02:17:54,479
comfort of your id

02:17:51,359 --> 02:17:56,080
comfort of your github repository so so

02:17:54,479 --> 02:17:59,120
this is my data repository

02:17:56,080 --> 02:18:00,160
and this repository uh is a pringle

02:17:59,120 --> 02:18:02,639
trust application

02:18:00,160 --> 02:18:04,319
and uh it exposes states endpoint and

02:18:02,639 --> 02:18:06,160
once you hit the end point it display

02:18:04,319 --> 02:18:08,479
indian states and their capitals

02:18:06,160 --> 02:18:10,559
nothing fancy here so let me just give

02:18:08,479 --> 02:18:14,240
you a quick walkthrough of the

02:18:10,559 --> 02:18:14,880
yaml file so so this ml file is

02:18:14,240 --> 02:18:17,760
typically

02:18:14,880 --> 02:18:18,960
in your git dot github uh root directory

02:18:17,760 --> 02:18:20,960
and then these are some of the

02:18:18,960 --> 02:18:23,200
prerequisite required like you need a

02:18:20,960 --> 02:18:24,960
since we are deploying 2gke you need a

02:18:23,200 --> 02:18:27,359
google cloud project and container

02:18:24,960 --> 02:18:28,240
registry and kubernetes engine api needs

02:18:27,359 --> 02:18:29,840
to be enabled

02:18:28,240 --> 02:18:31,599
and obviously you need to have a gta

02:18:29,840 --> 02:18:33,359
cluster which i already have

02:18:31,599 --> 02:18:34,800
and then you need some specific roles

02:18:33,359 --> 02:18:38,240
for you for you to be

02:18:34,800 --> 02:18:40,960
enabled you know so that you can push or

02:18:38,240 --> 02:18:42,160
deploy to using your service account key

02:18:40,960 --> 02:18:45,120
service account key

02:18:42,160 --> 02:18:45,760
is going to be used as a id for this

02:18:45,120 --> 02:18:47,359
deployment

02:18:45,760 --> 02:18:48,960
think of it like as a functional id or

02:18:47,359 --> 02:18:53,040
something so

02:18:48,960 --> 02:18:54,559
and this is my gta cluster

02:18:53,040 --> 02:18:56,319
yes it's up and running there are two

02:18:54,559 --> 02:18:59,200
nodes and

02:18:56,319 --> 02:19:00,160
uh yeah so this is the clip catal

02:18:59,200 --> 02:19:01,519
command we will

02:19:00,160 --> 02:19:03,040
this is the cloud cell environment and

02:19:01,519 --> 02:19:04,479
this is my container registry there is

02:19:03,040 --> 02:19:07,200
no image available there

02:19:04,479 --> 02:19:08,880
but after this deployment there will be

02:19:07,200 --> 02:19:10,960
and these in the environment section you

02:19:08,880 --> 02:19:12,880
see that we have defined some secrets

02:19:10,960 --> 02:19:14,399
and these secrets are available in the

02:19:12,880 --> 02:19:16,160
github defined

02:19:14,399 --> 02:19:17,840
itself in the github repository in the

02:19:16,160 --> 02:19:20,880
in the secret section

02:19:17,840 --> 02:19:22,479
and in the job section as you can see it

02:19:20,880 --> 02:19:25,200
runs on ubuntu

02:19:22,479 --> 02:19:26,080
latest which means it's on on the ubuntu

02:19:25,200 --> 02:19:28,719
machine

02:19:26,080 --> 02:19:29,359
and the job there are steps like

02:19:28,719 --> 02:19:31,760
checking out

02:19:29,359 --> 02:19:32,960
uh repository for master branch then i'm

02:19:31,760 --> 02:19:34,319
installing java

02:19:32,960 --> 02:19:36,000
so all the dependencies that are

02:19:34,319 --> 02:19:38,960
required to make this action

02:19:36,000 --> 02:19:40,880
work is listed over here obviously i

02:19:38,960 --> 02:19:43,040
need google cloud sdk so that i can

02:19:40,880 --> 02:19:45,200
communicate with my gpa cluster

02:19:43,040 --> 02:19:47,040
and it requires some service account key

02:19:45,200 --> 02:19:48,160
and project id which are injected as

02:19:47,040 --> 02:19:50,720
secret

02:19:48,160 --> 02:19:51,680
at the runtime and then obviously i need

02:19:50,720 --> 02:19:54,319
uh scaffold

02:19:51,680 --> 02:19:55,840
to be run the final command and if you

02:19:54,319 --> 02:19:56,720
see at the bottom there is a scaffold

02:19:55,840 --> 02:19:58,880
run command

02:19:56,720 --> 02:20:00,720
so this is this will eventually going to

02:19:58,880 --> 02:20:02,479
kick our entire workflow

02:20:00,720 --> 02:20:03,760
and then i will just verify everything

02:20:02,479 --> 02:20:06,960
with the

02:20:03,760 --> 02:20:10,160
get all command so

02:20:06,960 --> 02:20:10,479
um so what i will try to do now is i

02:20:10,160 --> 02:20:15,040
will

02:20:10,479 --> 02:20:17,439
you know create a pull request and

02:20:15,040 --> 02:20:18,080
so in this uh i'm just going this pull

02:20:17,439 --> 02:20:22,319
request will

02:20:18,080 --> 02:20:23,920
eventually create an event and i'm just

02:20:22,319 --> 02:20:26,160
merging my changes from develop to

02:20:23,920 --> 02:20:29,439
master brand actually it should be

02:20:26,160 --> 02:20:31,520
main branch uh sorry about that so

02:20:29,439 --> 02:20:32,720
i have just created the pull request and

02:20:31,520 --> 02:20:35,920
uh now

02:20:32,720 --> 02:20:36,479
uh i i so these are the changes that i

02:20:35,920 --> 02:20:37,920
have done

02:20:36,479 --> 02:20:40,160
these are mostly the commands i have

02:20:37,920 --> 02:20:43,680
added nothing fancy here

02:20:40,160 --> 02:20:46,319
and yeah so i can now safely merge the

02:20:43,680 --> 02:20:48,720
pull request

02:20:46,319 --> 02:20:50,560
so once i confirm the merge we will soon

02:20:48,720 --> 02:20:53,040
we will head to the actions tab

02:20:50,560 --> 02:20:55,040
and you can see that action that the

02:20:53,040 --> 02:20:56,880
workflow has kicked in it is

02:20:55,040 --> 02:20:58,319
based upon the event and it has started

02:20:56,880 --> 02:21:00,960
the deployment

02:20:58,319 --> 02:21:02,720
so it will step by step do all the steps

02:21:00,960 --> 02:21:04,479
that we have defined in the workflow ml

02:21:02,720 --> 02:21:06,399
file so it has already checked out the

02:21:04,479 --> 02:21:09,439
code installed java

02:21:06,399 --> 02:21:10,240
and uh so it will do everything what we

02:21:09,439 --> 02:21:12,479
have

02:21:10,240 --> 02:21:14,000
you know described in the workflow ml

02:21:12,479 --> 02:21:17,200
file

02:21:14,000 --> 02:21:18,800
and uh so it's trying to download all

02:21:17,200 --> 02:21:19,680
the dependencies required to make this

02:21:18,800 --> 02:21:23,040
work

02:21:19,680 --> 02:21:25,760
and so yeah

02:21:23,040 --> 02:21:26,479
just taking its own tweet time so it's

02:21:25,760 --> 02:21:28,800
able to connect

02:21:26,479 --> 02:21:30,160
cluster yeah so this is the main uh so

02:21:28,800 --> 02:21:32,160
this scaffold run what it

02:21:30,160 --> 02:21:34,000
it will do now it will build the image

02:21:32,160 --> 02:21:36,720
containerize our application

02:21:34,000 --> 02:21:37,760
and also push it to a container registry

02:21:36,720 --> 02:21:40,720
to our

02:21:37,760 --> 02:21:41,359
gcr registry so it has started the build

02:21:40,720 --> 02:21:42,640
right now

02:21:41,359 --> 02:21:45,120
so it is downloading the maven

02:21:42,640 --> 02:21:48,000
dependency and soon after that it will

02:21:45,120 --> 02:21:49,359
uh create a containerized image of our

02:21:48,000 --> 02:21:51,359
application

02:21:49,359 --> 02:21:52,720
and once that is done it will push and

02:21:51,359 --> 02:21:55,359
deploy to

02:21:52,720 --> 02:21:56,880
gk using everything using scaffold so

02:21:55,359 --> 02:21:58,960
scaffold run command c

02:21:56,880 --> 02:21:59,920
is doing everything here so as you can

02:21:58,960 --> 02:22:02,160
see the

02:21:59,920 --> 02:22:04,000
image is created and as you can see

02:22:02,160 --> 02:22:06,319
parts are also started so we will

02:22:04,000 --> 02:22:09,840
quickly check whether the image is

02:22:06,319 --> 02:22:11,520
pushed through gcr or not yeah so image

02:22:09,840 --> 02:22:13,120
is already pushed so we are good

02:22:11,520 --> 02:22:14,560
i think the workflow is completed and

02:22:13,120 --> 02:22:18,000
everything looks green

02:22:14,560 --> 02:22:20,399
which is really great and now uh

02:22:18,000 --> 02:22:22,000
one of the verification will do in cloud

02:22:20,399 --> 02:22:25,439
shell we will just run the same

02:22:22,000 --> 02:22:28,720
queue cuttle command and this should

02:22:25,439 --> 02:22:30,479
give us the correct output and

02:22:28,720 --> 02:22:32,240
so what i'm looking for is the external

02:22:30,479 --> 02:22:32,640
ip because the service type that i have

02:22:32,240 --> 02:22:36,640
used

02:22:32,640 --> 02:22:38,720
is load balancer so that

02:22:36,640 --> 02:22:39,680
it is exposed for internal uh sorry

02:22:38,720 --> 02:22:41,840
external access

02:22:39,680 --> 02:22:43,680
so i will just copy the ip address and

02:22:41,840 --> 02:22:46,720
just hit the url

02:22:43,680 --> 02:22:48,240
and yeah so this is the expected output

02:22:46,720 --> 02:22:50,720
this is pretty much we were expecting

02:22:48,240 --> 02:22:53,200
and this actually completes our

02:22:50,720 --> 02:22:54,800
demo so what we have learned is in this

02:22:53,200 --> 02:22:55,760
demo is that we have deployed the

02:22:54,800 --> 02:23:00,319
application to

02:22:55,760 --> 02:23:00,319
uh gke cluster and

02:23:00,800 --> 02:23:04,240
and this is the entire csd workflow we

02:23:02,640 --> 02:23:07,040
have created just now

02:23:04,240 --> 02:23:07,840
so these are some of the references that

02:23:07,040 --> 02:23:09,760
you can go through

02:23:07,840 --> 02:23:11,359
after this lightning talk the source

02:23:09,760 --> 02:23:12,800
code is available and

02:23:11,359 --> 02:23:14,880
one article that you can go through if

02:23:12,800 --> 02:23:17,359
you wanted to know more about scaffold

02:23:14,880 --> 02:23:19,120
and some scaffold documentation and

02:23:17,359 --> 02:23:19,680
scaffold data repository if you want to

02:23:19,120 --> 02:23:21,040
go through

02:23:19,680 --> 02:23:24,319
and these are some other way you can

02:23:21,040 --> 02:23:26,319
connect with me i'm available on twitter

02:23:24,319 --> 02:23:28,000
if you want to follow me for some

02:23:26,319 --> 02:23:31,359
awesome java tech related stuff

02:23:28,000 --> 02:23:34,080
and um this is my github username and

02:23:31,359 --> 02:23:35,920
my blog url and also available on social

02:23:34,080 --> 02:23:38,399
i'm in the

02:23:35,920 --> 02:23:39,520
net professional networking site uh

02:23:38,399 --> 02:23:42,560
linkedin

02:23:39,520 --> 02:23:44,080
so thank you thank you very much uh i'm

02:23:42,560 --> 02:23:46,000
really grateful for

02:23:44,080 --> 02:23:47,200
this opportunity and i wanted to thank

02:23:46,000 --> 02:23:50,800
the entire uh

02:23:47,200 --> 02:23:51,120
github team so thank you so i will see

02:23:50,800 --> 02:23:54,720
you

02:23:51,120 --> 02:23:55,600
uh in the discussions now so still then

02:23:54,720 --> 02:24:01,840
yeah

02:23:55,600 --> 02:24:01,840
thank you

02:24:05,040 --> 02:24:08,479
wow that was a great lightning talk

02:24:07,760 --> 02:24:10,720
isn't it

02:24:08,479 --> 02:24:11,600
connecting inner loop with the outer

02:24:10,720 --> 02:24:15,200
loop as well as

02:24:11,600 --> 02:24:18,479
how scaffold can help with your complete

02:24:15,200 --> 02:24:19,120
ci cd pipeline i hope folks a lot of you

02:24:18,479 --> 02:24:22,000
got

02:24:19,120 --> 02:24:23,840
insights on how you can do that too

02:24:22,000 --> 02:24:26,880
remember ashish is with us

02:24:23,840 --> 02:24:28,560
in discussions so go ahead and connect

02:24:26,880 --> 02:24:30,880
with him connect with others who are

02:24:28,560 --> 02:24:34,960
using kubernetes and scaffold

02:24:30,880 --> 02:24:38,319
and learn from there on discussions

02:24:34,960 --> 02:24:39,120
mohit i had one question for you i know

02:24:38,319 --> 02:24:42,319
you are

02:24:39,120 --> 02:24:45,359
a solutions specialist at github

02:24:42,319 --> 02:24:46,000
why not share an insight and if you do

02:24:45,359 --> 02:24:49,280
it well

02:24:46,000 --> 02:24:50,319
i'll give you a goodie share an insight

02:24:49,280 --> 02:24:52,720
tell us about

02:24:50,319 --> 02:24:53,520
a specific industry which has been able

02:24:52,720 --> 02:24:56,640
to

02:24:53,520 --> 02:25:00,319
leverage github like for unique

02:24:56,640 --> 02:25:02,720
use cases absolutely absolutely

02:25:00,319 --> 02:25:04,720
okay so i'm going to tell you a specific

02:25:02,720 --> 02:25:08,720
use case for financial services

02:25:04,720 --> 02:25:11,920
industry uh so typically the

02:25:08,720 --> 02:25:12,800
the banks and financial bfsi customers

02:25:11,920 --> 02:25:15,200
in india

02:25:12,800 --> 02:25:15,920
they lean on a lot of isb solutions

02:25:15,200 --> 02:25:18,720
right

02:25:15,920 --> 02:25:20,479
who build specific ip for them and what

02:25:18,720 --> 02:25:22,000
happens is that the banks and fsi

02:25:20,479 --> 02:25:24,399
customers have a requirement

02:25:22,000 --> 02:25:26,800
to collaborate with not just the

02:25:24,399 --> 02:25:29,040
developers within their own organization

02:25:26,800 --> 02:25:30,240
but also with the developers in the isvs

02:25:29,040 --> 02:25:32,640
organizations right

02:25:30,240 --> 02:25:33,680
and hence you can guess now that the

02:25:32,640 --> 02:25:36,080
requirement for them

02:25:33,680 --> 02:25:36,960
is to really provide these two set of

02:25:36,080 --> 02:25:39,439
developers

02:25:36,960 --> 02:25:41,200
a secure platform to collaborate on the

02:25:39,439 --> 02:25:43,600
piece of code that is getting developed

02:25:41,200 --> 02:25:44,399
and for that github enterprise is the

02:25:43,600 --> 02:25:47,520
perfect

02:25:44,399 --> 02:25:47,520
fitting solution

02:25:48,720 --> 02:25:55,200
awesome you get a huge

02:25:52,720 --> 02:25:55,200
for that

02:25:56,319 --> 02:26:00,479
i don't want to get rid of the humor

02:26:04,840 --> 02:26:10,080
yay

02:26:06,560 --> 02:26:13,200
we're gonna get into our next session

02:26:10,080 --> 02:26:16,399
a second rapid fire lightning talk

02:26:13,200 --> 02:26:18,080
on workflow dispatch and how the

02:26:16,399 --> 02:26:20,640
automation has been in the past

02:26:18,080 --> 02:26:22,640
present and future story about

02:26:20,640 --> 02:26:25,920
discovering a faster way to develop

02:26:22,640 --> 02:26:27,600
internal tools with github actions using

02:26:25,920 --> 02:26:30,399
workflow dispatch

02:26:27,600 --> 02:26:31,760
we got vishnu bharti in the house he is

02:26:30,399 --> 02:26:34,479
a software engineer at

02:26:31,760 --> 02:26:35,439
hasura he loves building developer tools

02:26:34,479 --> 02:26:38,319
and have spent

02:26:35,439 --> 02:26:39,280
a lot of years of his career doing that

02:26:38,319 --> 02:26:42,399
at scale

02:26:39,280 --> 02:26:43,120
he regularly blogs at vishnu bharti dot

02:26:42,399 --> 02:26:46,319
codes

02:26:43,120 --> 02:26:48,399
and guess what he munches chocolates

02:26:46,319 --> 02:26:49,520
while coding that's the secret to the

02:26:48,399 --> 02:26:52,640
wonderful software

02:26:49,520 --> 02:26:55,840
that he is writing and we're gonna hear

02:26:52,640 --> 02:26:58,000
right from vishnu vishnu super excited

02:26:55,840 --> 02:26:59,680
to hear what you have got in store for

02:26:58,000 --> 02:27:03,840
us here it is

02:26:59,680 --> 02:27:03,840
take it away

02:27:09,439 --> 02:27:14,840
hello hi

02:27:12,640 --> 02:27:17,040
i hope you are having a great day at

02:27:14,840 --> 02:27:17,600
satellite today we are going to speak

02:27:17,040 --> 02:27:20,000
about

02:27:17,600 --> 02:27:21,040
workflow dispatch in github actions and

02:27:20,000 --> 02:27:23,520
how it's helping

02:27:21,040 --> 02:27:26,000
to do automation for the past present

02:27:23,520 --> 02:27:26,000
and future

02:27:26,160 --> 02:27:29,200
a little bit about myself i am vishnu

02:27:28,560 --> 02:27:31,680
bharati

02:27:29,200 --> 02:27:33,760
i currently work as a engineer at kasura

02:27:31,680 --> 02:27:35,920
building developer tools for developers

02:27:33,760 --> 02:27:38,560
who are building developer tools

02:27:35,920 --> 02:27:39,680
and you can find me on the internet as

02:27:38,560 --> 02:27:42,080
cripnal

02:27:39,680 --> 02:27:43,200
and here's a really fancy picture of me

02:27:42,080 --> 02:27:45,600
having a

02:27:43,200 --> 02:27:46,560
having power rangers wallpaper and bsnl

02:27:45,600 --> 02:27:50,160
modem back in the

02:27:46,560 --> 02:27:53,840
2000s all right

02:27:50,160 --> 02:27:55,600
so today's agenda is we'll first see

02:27:53,840 --> 02:27:56,720
what workflow dispatch in github action

02:27:55,600 --> 02:27:59,520
says

02:27:56,720 --> 02:28:01,359
we'll see some of the internals and

02:27:59,520 --> 02:28:04,560
devtools at asura

02:28:01,359 --> 02:28:06,720
uh then we'll talk about

02:28:04,560 --> 02:28:07,840
what i call the past present and future

02:28:06,720 --> 02:28:10,800
problem and

02:28:07,840 --> 02:28:10,800
uh solution to it

02:28:11,359 --> 02:28:18,399
what is workflow dispatch uh

02:28:14,720 --> 02:28:22,000
workflow dispatch is a special kind of

02:28:18,399 --> 02:28:24,960
workflow in github actions which

02:28:22,000 --> 02:28:26,000
you can write that will take a set of

02:28:24,960 --> 02:28:29,200
inputs

02:28:26,000 --> 02:28:30,720
and run it manually whenever you like it

02:28:29,200 --> 02:28:32,640
from the github ui

02:28:30,720 --> 02:28:34,800
so if you are familiar with datum

02:28:32,640 --> 02:28:37,600
actions you might have seen this

02:28:34,800 --> 02:28:38,399
ui where you can see the workflow runs

02:28:37,600 --> 02:28:42,160
for

02:28:38,399 --> 02:28:46,000
any event that triggers a workflow

02:28:42,160 --> 02:28:49,200
but workflow dispatch has this special

02:28:46,000 --> 02:28:50,560
uh ui where you can provide a set of

02:28:49,200 --> 02:28:54,240
inputs that you like

02:28:50,560 --> 02:28:57,200
and press the run workflow button to

02:28:54,240 --> 02:28:59,600
run the workflows whenever you like cool

02:28:57,200 --> 02:29:02,800
so it's kind of like a manual thing

02:28:59,600 --> 02:29:05,359
that you trigger right uh

02:29:02,800 --> 02:29:06,080
you might ask what it has to do with

02:29:05,359 --> 02:29:09,200
automation

02:29:06,080 --> 02:29:13,040
but yeah we will kind of see what the

02:29:09,200 --> 02:29:17,359
kind of power it gives okay so how do we

02:29:13,040 --> 02:29:21,359
write the workflow dispatch first

02:29:17,359 --> 02:29:23,760
it's like mentioning it's like any other

02:29:21,359 --> 02:29:25,280
uh workflow workflows that you write in

02:29:23,760 --> 02:29:27,520
your github actions you just create a

02:29:25,280 --> 02:29:29,680
vml file and have a name

02:29:27,520 --> 02:29:31,200
and in the on section you will say

02:29:29,680 --> 02:29:33,120
workflow dispatch

02:29:31,200 --> 02:29:34,560
uh usually if it's like a pull request

02:29:33,120 --> 02:29:35,920
or something some other event you will

02:29:34,560 --> 02:29:38,160
mention the event here right instead of

02:29:35,920 --> 02:29:41,359
that we will mention workflow dispatch

02:29:38,160 --> 02:29:42,479
and give a set of inputs the input

02:29:41,359 --> 02:29:45,520
section here

02:29:42,479 --> 02:29:48,399
will whatever you are giving in this

02:29:45,520 --> 02:29:51,920
input sections will exactly translate

02:29:48,399 --> 02:29:53,200
to that in the ui uh where your users

02:29:51,920 --> 02:29:57,040
can actually

02:29:53,200 --> 02:30:00,160
uh give their inputs and

02:29:57,040 --> 02:30:03,280
after that it's the normal thing where

02:30:00,160 --> 02:30:04,080
you can give a bunch of logic that based

02:30:03,280 --> 02:30:07,680
on your inputs

02:30:04,080 --> 02:30:11,120
that your data workflow can execute

02:30:07,680 --> 02:30:12,000
so here so this this piece of yaml i

02:30:11,120 --> 02:30:15,359
took it from

02:30:12,000 --> 02:30:19,840
our protection code which we use

02:30:15,359 --> 02:30:19,840
to trigger manually trigger uh

02:30:20,880 --> 02:30:24,080
manually trigger previews for pull

02:30:23,040 --> 02:30:27,280
requests

02:30:24,080 --> 02:30:29,040
uh so we the inputs that it takes is

02:30:27,280 --> 02:30:31,200
a link to the pull request and the

02:30:29,040 --> 02:30:34,800
commission

02:30:31,200 --> 02:30:36,960
from which which should be taken for the

02:30:34,800 --> 02:30:38,080
preview app to deploy if you leave it

02:30:36,960 --> 02:30:39,760
empty it will

02:30:38,080 --> 02:30:41,439
just take the latest commission so you

02:30:39,760 --> 02:30:43,439
can kind of mention all these kind of

02:30:41,439 --> 02:30:46,800
conditions there

02:30:43,439 --> 02:30:48,560
and the workflow takes it and deploys a

02:30:46,800 --> 02:30:51,200
review app for that pull request

02:30:48,560 --> 02:30:52,240
and comments on the pull request like

02:30:51,200 --> 02:30:56,399
this

02:30:52,240 --> 02:30:58,560
you might be wondering what to do with

02:30:56,399 --> 02:31:00,399
these kind of things right like you

02:30:58,560 --> 02:31:03,760
might you you can just

02:31:00,399 --> 02:31:06,640
trigger the job whenever you want

02:31:03,760 --> 02:31:07,680
but the thing is once you have this core

02:31:06,640 --> 02:31:10,080
logic

02:31:07,680 --> 02:31:12,000
uh that you can run whenever you like

02:31:10,080 --> 02:31:15,439
you can build on top of it

02:31:12,000 --> 02:31:17,840
for example uh we

02:31:15,439 --> 02:31:20,080
we built a slash command kind of

02:31:17,840 --> 02:31:21,760
interface on top of products patch

02:31:20,080 --> 02:31:24,640
basically whenever someone comments

02:31:21,760 --> 02:31:27,200
slash hiroko deploy on a pull request

02:31:24,640 --> 02:31:29,120
we would actually trigger the workflow

02:31:27,200 --> 02:31:31,439
dispatch via the github api

02:31:29,120 --> 02:31:32,399
and the workflow dispatch runs and

02:31:31,439 --> 02:31:34,160
comments

02:31:32,399 --> 02:31:36,479
like this that's why we had the commands

02:31:34,160 --> 02:31:39,200
there so this kind of workflow

02:31:36,479 --> 02:31:41,359
is usually normal in azure where we kind

02:31:39,200 --> 02:31:43,520
of

02:31:41,359 --> 02:31:46,800
comment stuff on the pull request itself

02:31:43,520 --> 02:31:46,800
to get like immediate feedback

02:31:46,960 --> 02:31:54,479
okay so here are some lists of

02:31:50,880 --> 02:31:54,800
internal tools such as we have a review

02:31:54,479 --> 02:31:56,880
app

02:31:54,800 --> 02:31:59,040
for pull requests we have a project for

02:31:56,880 --> 02:32:02,399
shadow over which we'll be seeing next

02:31:59,040 --> 02:32:04,880
uh we have some more bots uh

02:32:02,399 --> 02:32:06,720
if you see most of them are written as

02:32:04,880 --> 02:32:09,680
workflow dispatchers

02:32:06,720 --> 02:32:10,640
uh you might be wondering why right

02:32:09,680 --> 02:32:14,720
that's

02:32:10,640 --> 02:32:18,000
uh to understand that we will need to

02:32:14,720 --> 02:32:21,280
understand uh how we were writing

02:32:18,000 --> 02:32:23,040
a bots and internal tools before before

02:32:21,280 --> 02:32:24,800
workflow dispatches what we used to do

02:32:23,040 --> 02:32:27,760
is

02:32:24,800 --> 02:32:29,040
we used to have a how github web books

02:32:27,760 --> 02:32:31,280
configured

02:32:29,040 --> 02:32:32,800
and whenever we want a internal tool for

02:32:31,280 --> 02:32:34,479
example let's say we want a

02:32:32,800 --> 02:32:36,319
tool that deploys preview app software

02:32:34,479 --> 02:32:37,600
request we will write a node.js server

02:32:36,319 --> 02:32:39,680
or any other server

02:32:37,600 --> 02:32:40,640
and host it on somewhere for example we

02:32:39,680 --> 02:32:43,359
had a

02:32:40,640 --> 02:32:44,640
we have on here node.js server hosted on

02:32:43,359 --> 02:32:48,000
versal and

02:32:44,640 --> 02:32:48,800
we had another tool uh written in python

02:32:48,000 --> 02:32:52,080
and

02:32:48,800 --> 02:32:52,479
hosted on kubernetes so if you want to

02:32:52,080 --> 02:32:55,200
add

02:32:52,479 --> 02:32:56,160
something new you you either need to go

02:32:55,200 --> 02:32:59,840
and edit them

02:32:56,160 --> 02:33:02,560
and or create a new server and host it

02:32:59,840 --> 02:33:04,319
on something and configure your books to

02:33:02,560 --> 02:33:05,760
be received from there

02:33:04,319 --> 02:33:07,520
the thing with this is all these

02:33:05,760 --> 02:33:10,319
environments might be limiting

02:33:07,520 --> 02:33:11,920
for example it might be hard to do

02:33:10,319 --> 02:33:15,200
docker builds

02:33:11,920 --> 02:33:16,240
on node.js server right or running on

02:33:15,200 --> 02:33:19,280
version

02:33:16,240 --> 02:33:23,120
uh so because it's

02:33:19,280 --> 02:33:26,479
it's stateless

02:33:23,120 --> 02:33:28,160
so the the whole the it was causing kind

02:33:26,479 --> 02:33:30,000
of friction where you need to do all

02:33:28,160 --> 02:33:32,560
this hosting and

02:33:30,000 --> 02:33:33,600
creating new servers every time so this

02:33:32,560 --> 02:33:37,359
is the current

02:33:33,600 --> 02:33:39,040
state of internal tools uh we

02:33:37,359 --> 02:33:41,040
whenever we whenever someone wants to

02:33:39,040 --> 02:33:44,960
write an internal tool we just write a

02:33:41,040 --> 02:33:47,040
workflow dispatch first and

02:33:44,960 --> 02:33:48,800
manually like give it to some some

02:33:47,040 --> 02:33:49,120
developers who are interested in running

02:33:48,800 --> 02:33:50,960
it

02:33:49,120 --> 02:33:53,600
and they will run it they can trigger it

02:33:50,960 --> 02:33:57,520
from the browser and at the same time

02:33:53,600 --> 02:34:00,000
uh once we are okay with the automation

02:33:57,520 --> 02:34:01,600
what we will do is we just run one

02:34:00,000 --> 02:34:04,479
server on version

02:34:01,600 --> 02:34:06,399
that kind of handles all the books and

02:34:04,479 --> 02:34:11,120
kind of delegates the

02:34:06,399 --> 02:34:11,120
requests to workflow dispatchers

02:34:11,520 --> 02:34:16,080
so this kind of workflow if you want to

02:34:14,319 --> 02:34:17,520
add a new automation

02:34:16,080 --> 02:34:19,680
you don't need to write a new server

02:34:17,520 --> 02:34:22,880
instead you just write a yaml file

02:34:19,680 --> 02:34:24,560
and just run a workflow dispatch

02:34:22,880 --> 02:34:26,479
within an instant like you can start

02:34:24,560 --> 02:34:27,920
triggering it manually or

02:34:26,479 --> 02:34:29,680
whenever you are feeling confident you

02:34:27,920 --> 02:34:32,800
can adjust

02:34:29,680 --> 02:34:37,359
merge apr in your delegation server

02:34:32,800 --> 02:34:37,359
that triggers them for your web books

02:34:38,080 --> 02:34:42,560
okay up next is the

02:34:41,120 --> 02:34:44,800
what i call the past present in the

02:34:42,560 --> 02:34:46,880
future problem uh we'll try to

02:34:44,800 --> 02:34:50,399
understand this by

02:34:46,880 --> 02:34:52,720
uh seeing a

02:34:50,399 --> 02:34:54,080
scenario that happens at hashtag every

02:34:52,720 --> 02:34:56,720
day uh so

02:34:54,080 --> 02:34:58,160
asura is a has a graphql engine open

02:34:56,720 --> 02:35:01,600
source project which is being

02:34:58,160 --> 02:35:03,760
like used by a lot of people uh

02:35:01,600 --> 02:35:05,439
and also we we have a commercial product

02:35:03,760 --> 02:35:08,319
which uses the

02:35:05,439 --> 02:35:09,439
uh open source graphql engine code

02:35:08,319 --> 02:35:13,280
inside that

02:35:09,439 --> 02:35:15,680
in order to make sure that uh

02:35:13,280 --> 02:35:17,840
changes made in open source does not

02:35:15,680 --> 02:35:21,120
break anything in our commercial product

02:35:17,840 --> 02:35:24,640
uh we we have to

02:35:21,120 --> 02:35:28,160
like we have a monorepo

02:35:24,640 --> 02:35:30,960
which actually syncs code from uh

02:35:28,160 --> 02:35:31,680
the open source project and kind of

02:35:30,960 --> 02:35:34,640
syncs it back

02:35:31,680 --> 02:35:36,560
we will see the workflow here whenever

02:35:34,640 --> 02:35:38,399
open source contributor

02:35:36,560 --> 02:35:41,280
tries to contribute to graphql engine

02:35:38,399 --> 02:35:44,640
they just open a pr first

02:35:41,280 --> 02:35:49,200
after that what

02:35:44,640 --> 02:35:52,080
we do is we have a workflow dispatch

02:35:49,200 --> 02:35:54,000
that shadows their pull request

02:35:52,080 --> 02:35:56,240
shadowing essentially means uh

02:35:54,000 --> 02:35:57,520
transforms their code so that it's in

02:35:56,240 --> 02:35:59,120
the right places

02:35:57,520 --> 02:36:02,240
uh in our mono report directory

02:35:59,120 --> 02:36:04,640
structure uh and opens pr

02:36:02,240 --> 02:36:05,920
uh on the moon repo this monopoly is

02:36:04,640 --> 02:36:08,160
internal and private

02:36:05,920 --> 02:36:10,080
uh so what happens next is our hashrate

02:36:08,160 --> 02:36:14,160
member uh reviews the code

02:36:10,080 --> 02:36:17,920
and the ci runs uh and if and once

02:36:14,160 --> 02:36:20,720
and if the change seem to break our

02:36:17,920 --> 02:36:22,000
commercial version uh we'll fix those

02:36:20,720 --> 02:36:24,560
things the

02:36:22,000 --> 02:36:26,640
asura basically the team member will be

02:36:24,560 --> 02:36:30,160
working on the shadow appear

02:36:26,640 --> 02:36:31,680
once the uh that's merged back to the

02:36:30,160 --> 02:36:35,359
monorepo

02:36:31,680 --> 02:36:38,720
it mean we already we have a push

02:36:35,359 --> 02:36:42,560
workflow in github actions that uh

02:36:38,720 --> 02:36:45,040
sync back sync back the

02:36:42,560 --> 02:36:46,080
commit only to the graphql engine oss

02:36:45,040 --> 02:36:49,120
repo

02:36:46,080 --> 02:36:50,640
and we have a bot that says thank you to

02:36:49,120 --> 02:36:52,960
the open source contributor

02:36:50,640 --> 02:36:54,800
so this is the whole workflow where the

02:36:52,960 --> 02:36:58,080
code comes in from the oss and

02:36:54,800 --> 02:37:01,280
that gets into our private repo and

02:36:58,080 --> 02:37:02,240
goes back into our graphql engine voices

02:37:01,280 --> 02:37:05,200
right

02:37:02,240 --> 02:37:05,520
so if you take this tool uh the past is

02:37:05,200 --> 02:37:07,520
like

02:37:05,520 --> 02:37:09,520
you know whenever whenever i want to

02:37:07,520 --> 02:37:13,280
create this tool the past is like

02:37:09,520 --> 02:37:15,280
i want to work make this tool work for

02:37:13,280 --> 02:37:16,560
already open pull requests and i want to

02:37:15,280 --> 02:37:19,760
open uh make this

02:37:16,560 --> 02:37:22,720
tool work for uh

02:37:19,760 --> 02:37:23,840
the early adopters uh whenever i'm

02:37:22,720 --> 02:37:25,920
building that tool

02:37:23,840 --> 02:37:28,080
uh i might be getting feedback instantly

02:37:25,920 --> 02:37:30,560
and the ultimate goal is to

02:37:28,080 --> 02:37:32,479
automate it whenever some new pull

02:37:30,560 --> 02:37:34,479
requests come in uh

02:37:32,479 --> 02:37:36,080
before we had that automation in place

02:37:34,479 --> 02:37:39,280
the product or shadow in place

02:37:36,080 --> 02:37:41,520
we want to do that uh

02:37:39,280 --> 02:37:44,479
first we naively went with a pull

02:37:41,520 --> 02:37:48,479
request approach and figured out that

02:37:44,479 --> 02:37:51,280
it kind of uh restricts us

02:37:48,479 --> 02:37:51,600
from some things the thing is if i'm

02:37:51,280 --> 02:37:54,000
doing

02:37:51,600 --> 02:37:54,960
on pull request you can just shadow pull

02:37:54,000 --> 02:37:58,240
requests

02:37:54,960 --> 02:38:01,600
that are coming in after the uh

02:37:58,240 --> 02:38:02,880
automation is in place before

02:38:01,600 --> 02:38:05,280
you can't trigger it for already

02:38:02,880 --> 02:38:07,680
existing pull request or

02:38:05,280 --> 02:38:09,359
uh you know whenever you're working on

02:38:07,680 --> 02:38:11,280
it and you if you want to

02:38:09,359 --> 02:38:13,040
just release it to some people in your

02:38:11,280 --> 02:38:14,479
org

02:38:13,040 --> 02:38:16,800
we can't do it without onput request

02:38:14,479 --> 02:38:18,800
it's completely futuristic and even

02:38:16,800 --> 02:38:20,800
rerunning on hotfixes you need to merge

02:38:18,800 --> 02:38:23,920
your automation code to main branch and

02:38:20,800 --> 02:38:26,000
uh kind of get feedback from there

02:38:23,920 --> 02:38:27,280
but if you take workload dispatches

02:38:26,000 --> 02:38:29,600
since it's manual

02:38:27,280 --> 02:38:31,600
you can just put your link to the

02:38:29,600 --> 02:38:34,399
already existing pars

02:38:31,600 --> 02:38:35,760
and you can run the automation uh for

02:38:34,399 --> 02:38:37,280
early adopters you can share the links

02:38:35,760 --> 02:38:40,640
before sharing it to everyone

02:38:37,280 --> 02:38:42,720
uh and kind of do it and more

02:38:40,640 --> 02:38:44,080
i'll tell more about the early adoption

02:38:42,720 --> 02:38:47,600
and the hotfixes part

02:38:44,080 --> 02:38:50,080
after the slide uh kind of and

02:38:47,600 --> 02:38:52,080
of course the shadow pr as i told will

02:38:50,080 --> 02:38:52,800
han will have that delegation server

02:38:52,080 --> 02:38:55,520
that

02:38:52,800 --> 02:38:56,000
that you can kind of use to get the web

02:38:55,520 --> 02:38:59,280
books

02:38:56,000 --> 02:39:02,640
and uh and like

02:38:59,280 --> 02:39:04,399
automatically uh shadow new pr's

02:39:02,640 --> 02:39:05,920
if you see this right the hot fixes on

02:39:04,399 --> 02:39:09,439
the other part the core

02:39:05,920 --> 02:39:12,240
the core uh thing that i love about uh

02:39:09,439 --> 02:39:14,080
workflow dispatches is that it has this

02:39:12,240 --> 02:39:17,120
branch-based workflows

02:39:14,080 --> 02:39:19,760
you can trigger workflow dispatches from

02:39:17,120 --> 02:39:22,720
any branch you like

02:39:19,760 --> 02:39:24,399
which means that if i have had that

02:39:22,720 --> 02:39:24,880
automation in place and if i want to do

02:39:24,399 --> 02:39:27,920
a bug

02:39:24,880 --> 02:39:31,520
fix i don't

02:39:27,920 --> 02:39:33,280
want to like wait for it to be merged

02:39:31,520 --> 02:39:34,960
i can just quickly write a branch and

02:39:33,280 --> 02:39:37,680
have that bug fix in that and

02:39:34,960 --> 02:39:39,840
give it even for rolling out new

02:39:37,680 --> 02:39:41,600
automation we can have this

02:39:39,840 --> 02:39:42,880
we can have the code in a separate

02:39:41,600 --> 02:39:46,319
branch and

02:39:42,880 --> 02:39:49,520
uh we can kind of give that

02:39:46,319 --> 02:39:50,880
to the early adopters and ask them to

02:39:49,520 --> 02:39:54,399
trigger from this branch

02:39:50,880 --> 02:39:57,920
so that you get this like they get to

02:39:54,399 --> 02:39:57,920
use it before anyone else

02:39:58,319 --> 02:40:04,880
this branch-based workflow had been like

02:40:01,359 --> 02:40:09,200
very uh helpful for us especially

02:40:04,880 --> 02:40:12,720
uh you know to like test out and stuff

02:40:09,200 --> 02:40:15,359
so in summary i would say

02:40:12,720 --> 02:40:18,000
workflow dispatch is awesome definitely

02:40:15,359 --> 02:40:18,000
give it a try

02:40:18,479 --> 02:40:21,680
it's it might be kind of seem like a

02:40:20,800 --> 02:40:24,240
manual thing

02:40:21,680 --> 02:40:25,200
but i would say that the future of

02:40:24,240 --> 02:40:27,920
automation

02:40:25,200 --> 02:40:29,359
is the ability to trigger it manually it

02:40:27,920 --> 02:40:33,520
gives a whole lot of

02:40:29,359 --> 02:40:36,880
flexibilities so yep give it a try

02:40:33,520 --> 02:40:39,200
cool uh thank you i hope you had a good

02:40:36,880 --> 02:40:39,200
session

02:40:46,840 --> 02:40:51,040
bye

02:40:48,399 --> 02:40:52,479
i loved how he mentioned that future of

02:40:51,040 --> 02:40:53,279
automation is that will be triggered

02:40:52,479 --> 02:40:54,720
manually

02:40:53,279 --> 02:40:57,040
what an incremental approach to

02:40:54,720 --> 02:40:59,439
automation great talk

02:40:57,040 --> 02:41:00,880
and uh viewers uh you can head over to

02:40:59,439 --> 02:41:03,520
github discussions and

02:41:00,880 --> 02:41:05,040
catch him live for next 30 minutes get

02:41:03,520 --> 02:41:06,080
your queries answered it's a very

02:41:05,040 --> 02:41:09,439
interesting uh

02:41:06,080 --> 02:41:09,439
talk out there which just happened

02:41:09,520 --> 02:41:16,880
so just get him on discussions

02:41:13,040 --> 02:41:16,880
and have you checked the voices

02:41:18,399 --> 02:41:22,000
have started holy early this they're

02:41:20,960 --> 02:41:24,319
playing holy

02:41:22,000 --> 02:41:26,880
and having a blast there so remember

02:41:24,319 --> 02:41:27,200
folks you can go to the oss channel as

02:41:26,880 --> 02:41:30,000
well

02:41:27,200 --> 02:41:31,600
and check the content out there as well

02:41:30,000 --> 02:41:33,680
as

02:41:31,600 --> 02:41:35,520
attendee survey we want to hear your

02:41:33,680 --> 02:41:38,560
feedback so click on a link below

02:41:35,520 --> 02:41:40,080
and share all about your feedback and

02:41:38,560 --> 02:41:43,200
how you liking github

02:41:40,080 --> 02:41:44,960
india satellite okay so coming to the

02:41:43,200 --> 02:41:46,479
next session and this is a really

02:41:44,960 --> 02:41:49,920
interesting topic

02:41:46,479 --> 02:41:52,720
uh of a favorite of for many bringing

02:41:49,920 --> 02:41:56,399
machine learning and operations together

02:41:52,720 --> 02:41:57,279
ml ops and how data scientists and

02:41:56,399 --> 02:41:59,680
engineers

02:41:57,279 --> 02:42:00,399
can start communicating collaborating

02:41:59,680 --> 02:42:03,600
better

02:42:00,399 --> 02:42:05,840
how to create that workflow so bringing

02:42:03,600 --> 02:42:09,439
in is the next session is all about

02:42:05,840 --> 02:42:10,640
mlaps using github as ecosystem gets

02:42:09,439 --> 02:42:13,200
more complex

02:42:10,640 --> 02:42:13,840
deploying mlaps gets harder let's

02:42:13,200 --> 02:42:17,120
understand

02:42:13,840 --> 02:42:20,560
how can we do that whole mlops lifecycle

02:42:17,120 --> 02:42:23,680
in github sharing all about that is

02:42:20,560 --> 02:42:26,720
shruti chaturvedi a backend ai developer

02:42:23,680 --> 02:42:29,840
at corexa ai a howard v code

02:42:26,720 --> 02:42:32,800
lead technology fellow a certified

02:42:29,840 --> 02:42:34,560
microsoft trainer are developing ai

02:42:32,800 --> 02:42:38,319
solutions and

02:42:34,560 --> 02:42:38,319
leading and part of the

02:42:38,640 --> 02:42:43,760
as well as a stanford ambassador really

02:42:41,840 --> 02:42:47,520
looking forward to this talk

02:42:43,760 --> 02:42:55,840
by shruti on ml of using github

02:42:47,520 --> 02:42:55,840
over to you should be

02:43:01,920 --> 02:43:07,680
hello and good morning well

02:43:05,200 --> 02:43:08,640
we're clocking in at noon but i hope you

02:43:07,680 --> 02:43:10,479
had a wonderful

02:43:08,640 --> 02:43:12,160
morning listening to the amazing

02:43:10,479 --> 02:43:14,640
sessions we had lined up for

02:43:12,160 --> 02:43:15,920
get up satellite india thanks for tuning

02:43:14,640 --> 02:43:18,960
in to this session

02:43:15,920 --> 02:43:20,960
my name is shruti chaturvedi and i am a

02:43:18,960 --> 02:43:23,920
backend engineer building scalable

02:43:20,960 --> 02:43:26,240
solutions at connexadi

02:43:23,920 --> 02:43:28,000
imagine a world where teams would not

02:43:26,240 --> 02:43:29,680
have to spend months trying to

02:43:28,000 --> 02:43:31,760
recreate experiments their colleagues

02:43:29,680 --> 02:43:34,000
did and the good news is

02:43:31,760 --> 02:43:35,600
in this session we'll take a sneak peek

02:43:34,000 --> 02:43:38,399
right into that world

02:43:35,600 --> 02:43:39,040
we'll be looking at github as an amazing

02:43:38,399 --> 02:43:42,800
tool

02:43:39,040 --> 02:43:45,680
to build test deploy monitor

02:43:42,800 --> 02:43:46,160
and version ml models and assets to

02:43:45,680 --> 02:43:49,120
allow

02:43:46,160 --> 02:43:52,640
faster and iterative development so it's

02:43:49,120 --> 02:43:54,800
pretty amazing and let's get started

02:43:52,640 --> 02:43:56,560
so emma lops is essentially an

02:43:54,800 --> 02:43:58,720
engineering approach

02:43:56,560 --> 02:44:00,880
to accelerate the adoption of machine

02:43:58,720 --> 02:44:02,560
learning into your business solutions

02:44:00,880 --> 02:44:04,000
and when you're looking at continuous

02:44:02,560 --> 02:44:07,600
x's in mlaps there

02:44:04,000 --> 02:44:09,200
are quite a few so continuously training

02:44:07,600 --> 02:44:11,600
your models to achieve better

02:44:09,200 --> 02:44:12,160
performance and higher accuracy over

02:44:11,600 --> 02:44:13,840
time

02:44:12,160 --> 02:44:16,000
so whether that's through retuning your

02:44:13,840 --> 02:44:17,279
hyper parameters or changing the base

02:44:16,000 --> 02:44:19,120
algorithms itself

02:44:17,279 --> 02:44:20,880
all of that counts as continuous

02:44:19,120 --> 02:44:23,120
training

02:44:20,880 --> 02:44:24,960
continuously delivering your updated

02:44:23,120 --> 02:44:28,160
models to the end users

02:44:24,960 --> 02:44:29,840
because that's a crucial step

02:44:28,160 --> 02:44:31,520
we then have a continuous integration

02:44:29,840 --> 02:44:33,920
which is an important concept

02:44:31,520 --> 02:44:35,279
in devops and mlaps alike which means

02:44:33,920 --> 02:44:38,160
you're continuously

02:44:35,279 --> 02:44:38,880
integrating your local changes across to

02:44:38,160 --> 02:44:41,760
production

02:44:38,880 --> 02:44:42,560
code which then gets continuously

02:44:41,760 --> 02:44:46,080
delivered

02:44:42,560 --> 02:44:48,080
to the end users and continuous

02:44:46,080 --> 02:44:49,920
monitoring to make sure that your data

02:44:48,080 --> 02:44:51,680
assets and pipelines work the way you

02:44:49,920 --> 02:44:54,160
want

02:44:51,680 --> 02:44:54,880
so by using github at the center of ml

02:44:54,160 --> 02:44:58,240
ops

02:44:54,880 --> 02:45:00,880
enables building ml models versioning

02:44:58,240 --> 02:45:01,760
data and assets tracking and testing ml

02:45:00,880 --> 02:45:04,240
experiments

02:45:01,760 --> 02:45:05,840
and deploying machine learning solutions

02:45:04,240 --> 02:45:07,439
super easy

02:45:05,840 --> 02:45:09,279
so these are some of the tools and

02:45:07,439 --> 02:45:11,680
services we will be using to build a

02:45:09,279 --> 02:45:13,439
binary classification pipeline

02:45:11,680 --> 02:45:15,920
so we are using something called a dvc

02:45:13,439 --> 02:45:18,240
or a data version control which is a

02:45:15,920 --> 02:45:20,960
open source tool available for free to

02:45:18,240 --> 02:45:22,960
use and it sits right on top of git

02:45:20,960 --> 02:45:24,240
and we'll be using it to build and

02:45:22,960 --> 02:45:26,560
version our pipeline

02:45:24,240 --> 02:45:27,279
and we'll use github to orchestrate the

02:45:26,560 --> 02:45:30,399
pipeline

02:45:27,279 --> 02:45:32,399
and also to enable us to share those

02:45:30,399 --> 02:45:34,479
versioned assets between different team

02:45:32,399 --> 02:45:38,000
members

02:45:34,479 --> 02:45:39,120
all right so let's move into the coding

02:45:38,000 --> 02:45:40,240
now

02:45:39,120 --> 02:45:41,680
we will be building a binary

02:45:40,240 --> 02:45:43,439
classification pipeline as i said

02:45:41,680 --> 02:45:45,040
earlier and we are using a cancer

02:45:43,439 --> 02:45:46,800
survival data set

02:45:45,040 --> 02:45:48,319
all of the code is being hosted by

02:45:46,800 --> 02:45:50,960
github and dvc

02:45:48,319 --> 02:45:52,800
will very beautifully push all of the

02:45:50,960 --> 02:45:55,600
data pointers onto github

02:45:52,800 --> 02:45:56,160
on all of the tracked assets as well

02:45:55,600 --> 02:45:58,160
also

02:45:56,160 --> 02:46:00,399
we'll be looking at some super cool

02:45:58,160 --> 02:46:03,040
automation tool called github workflows

02:46:00,399 --> 02:46:05,359
to do a lot of the heavy lifting for us

02:46:03,040 --> 02:46:07,200
and also solve the problem of comparing

02:46:05,359 --> 02:46:10,240
performance between different

02:46:07,200 --> 02:46:13,680
models with that let's

02:46:10,240 --> 02:46:15,920
head over to github

02:46:13,680 --> 02:46:19,040
and we will begin by cloning this github

02:46:15,920 --> 02:46:21,359
repository onto our local system so this

02:46:19,040 --> 02:46:22,080
is going to act as our source of truth

02:46:21,359 --> 02:46:24,640
and

02:46:22,080 --> 02:46:26,000
whatever is into the master branch right

02:46:24,640 --> 02:46:28,560
now is what is onto

02:46:26,000 --> 02:46:30,240
production so whatever is here is being

02:46:28,560 --> 02:46:32,800
supplied to my consumers

02:46:30,240 --> 02:46:34,880
and my job as a data scientist who is

02:46:32,800 --> 02:46:36,160
joining this team is going to be taking

02:46:34,880 --> 02:46:38,399
this accuracy

02:46:36,160 --> 02:46:40,720
and making it more accurate right and

02:46:38,399 --> 02:46:43,200
like it seems pretty feasible

02:46:40,720 --> 02:46:44,160
so let's see if we are capable of doing

02:46:43,200 --> 02:46:47,279
that

02:46:44,160 --> 02:46:49,600
uh let's switch over and see what do we

02:46:47,279 --> 02:46:49,600
have

02:46:51,120 --> 02:46:54,359
so here we have three different scripts

02:46:52,960 --> 02:46:58,560
and we'll begin by looking at

02:46:54,359 --> 02:47:00,720
getdata.pi so this is where we are

02:46:58,560 --> 02:47:03,439
getting our data from and storing it in

02:47:00,720 --> 02:47:06,319
our local system as haberman dot csv

02:47:03,439 --> 02:47:08,880
so let's switch and see how our data

02:47:06,319 --> 02:47:08,880
looks like

02:47:10,880 --> 02:47:16,319
all right so we have three different

02:47:14,000 --> 02:47:18,000
independent variables and one dependent

02:47:16,319 --> 02:47:19,120
variables and this is what we are trying

02:47:18,000 --> 02:47:21,359
to predict whether

02:47:19,120 --> 02:47:22,240
a person survived after cancer treatment

02:47:21,359 --> 02:47:24,000
or not

02:47:22,240 --> 02:47:25,439
um so all of these are numerical this is

02:47:24,000 --> 02:47:28,240
the age of a person the year in which

02:47:25,439 --> 02:47:29,920
the operation was conducted so 1964 here

02:47:28,240 --> 02:47:31,920
and the third column is an indication of

02:47:29,920 --> 02:47:34,080
how spread out the cancer was

02:47:31,920 --> 02:47:36,640
and again one means that a person

02:47:34,080 --> 02:47:40,720
survived and two means that it did not

02:47:36,640 --> 02:47:42,720
um let's switch back over to we as code

02:47:40,720 --> 02:47:44,399
and look into our process data script so

02:47:42,720 --> 02:47:47,040
this is where we are taking that

02:47:44,399 --> 02:47:49,439
dependent variable values of one and two

02:47:47,040 --> 02:47:50,080
and encoding that into a more standard

02:47:49,439 --> 02:47:51,840
format

02:47:50,080 --> 02:47:53,279
by using a label encoder and

02:47:51,840 --> 02:47:55,120
transforming into zero and

02:47:53,279 --> 02:47:58,000
one and storing that into our local

02:47:55,120 --> 02:47:59,840
system as haberman process.csv

02:47:58,000 --> 02:48:01,359
after that's done we're gonna move into

02:47:59,840 --> 02:48:02,960
training script

02:48:01,359 --> 02:48:04,560
um and this is where we are loading our

02:48:02,960 --> 02:48:06,800
haberman process.csv

02:48:04,560 --> 02:48:08,720
transforming that into a data frame and

02:48:06,800 --> 02:48:09,680
then we're running a normalizer just to

02:48:08,720 --> 02:48:11,760
ensure that all of

02:48:09,680 --> 02:48:14,640
our the independent variables are

02:48:11,760 --> 02:48:17,279
normalized across their values

02:48:14,640 --> 02:48:18,319
so what's into production right now and

02:48:17,279 --> 02:48:20,160
what my users

02:48:18,319 --> 02:48:21,680
are receiving is a simple logistic

02:48:20,160 --> 02:48:24,399
regression model right

02:48:21,680 --> 02:48:25,600
like makes sense why the accuracy wasn't

02:48:24,399 --> 02:48:27,800
so great

02:48:25,600 --> 02:48:29,760
um and we are pulling in parameters from

02:48:27,800 --> 02:48:31,520
params.eml files so that's a pretty

02:48:29,760 --> 02:48:33,760
interesting file make note of that we'll

02:48:31,520 --> 02:48:35,920
be looking at in a second

02:48:33,760 --> 02:48:38,399
we also have a bunch of metrics we have

02:48:35,920 --> 02:48:40,880
accuracy specificity and sensitivity

02:48:38,399 --> 02:48:44,800
and what we are doing with those metrics

02:48:40,880 --> 02:48:46,080
is dumping them into a metrics.json file

02:48:44,800 --> 02:48:47,840
and what this is going to do in the

02:48:46,080 --> 02:48:49,359
future is help

02:48:47,840 --> 02:48:51,920
the code reviewers and the mergers to

02:48:49,359 --> 02:48:54,160
look at metrics.json at a master branch

02:48:51,920 --> 02:48:55,600
and metrics.json at a different branch

02:48:54,160 --> 02:48:57,439
which we are working on

02:48:55,600 --> 02:48:59,120
and be able to tell if this is something

02:48:57,439 --> 02:49:01,840
that they want to merge based on the

02:48:59,120 --> 02:49:03,920
accuracy and all the metrics

02:49:01,840 --> 02:49:05,120
a little bit of continuous delivery

02:49:03,920 --> 02:49:07,680
aspect here

02:49:05,120 --> 02:49:09,279
we are using a github workflow the super

02:49:07,680 --> 02:49:10,479
interesting tool that i talked about

02:49:09,279 --> 02:49:12,560
we'll be looking at how we have

02:49:10,479 --> 02:49:14,720
configured that so as soon as a model

02:49:12,560 --> 02:49:16,640
is pushed onto master so as soon as

02:49:14,720 --> 02:49:17,520
maybe we have a pull request into master

02:49:16,640 --> 02:49:20,479
we are going to

02:49:17,520 --> 02:49:22,800
put the final model into uh the

02:49:20,479 --> 02:49:25,600
inference service so what i am using is

02:49:22,800 --> 02:49:27,439
aws but it can really be anything

02:49:25,600 --> 02:49:28,960
switch over to params.yaml and this is

02:49:27,439 --> 02:49:30,720
where we have defined all of our

02:49:28,960 --> 02:49:32,720
hyperparameters you know we just have

02:49:30,720 --> 02:49:33,760
two but you can define however many you

02:49:32,720 --> 02:49:36,319
like

02:49:33,760 --> 02:49:36,800
and this is where my training data

02:49:36,319 --> 02:49:38,560
script

02:49:36,800 --> 02:49:40,960
or this script right here is calling my

02:49:38,560 --> 02:49:43,120
parameters from so i'll only have to

02:49:40,960 --> 02:49:44,000
tune them and change them here rather

02:49:43,120 --> 02:49:45,279
than

02:49:44,000 --> 02:49:47,279
you know switching back and forth

02:49:45,279 --> 02:49:49,600
between train data and different scripts

02:49:47,279 --> 02:49:50,720
now how i want to design my pipeline is

02:49:49,600 --> 02:49:52,160
for all of these steps to run

02:49:50,720 --> 02:49:54,080
sequentially getting the data

02:49:52,160 --> 02:49:56,560
processing the data training the data

02:49:54,080 --> 02:49:58,399
and also i want a way so that my

02:49:56,560 --> 02:49:59,760
as soon as my parameters change the

02:49:58,399 --> 02:50:01,439
training script should run again and

02:49:59,760 --> 02:50:03,439
produce a new model

02:50:01,439 --> 02:50:04,479
so how we have configured that is

02:50:03,439 --> 02:50:06,720
through dvc

02:50:04,479 --> 02:50:08,800
pipeline and this is the pipeline config

02:50:06,720 --> 02:50:10,080
file so dvc.yaml so we have three

02:50:08,800 --> 02:50:11,760
different stages

02:50:10,080 --> 02:50:13,279
and all of them are going to run

02:50:11,760 --> 02:50:15,680
sequentially

02:50:13,279 --> 02:50:17,600
and dbc is tracking each of these stages

02:50:15,680 --> 02:50:20,160
and it's going to track the outputs and

02:50:17,600 --> 02:50:23,520
the dependencies of each of these stages

02:50:20,160 --> 02:50:26,080
together so as soon as a person runs

02:50:23,520 --> 02:50:27,200
um their pipeline using dvc repro what

02:50:26,080 --> 02:50:29,200
dbc is going to do

02:50:27,200 --> 02:50:30,880
is look into its local cache folder

02:50:29,200 --> 02:50:33,200
which we do not have right now since we

02:50:30,880 --> 02:50:35,120
have not run the pipeline and it's going

02:50:33,200 --> 02:50:36,720
to see if a particular script has

02:50:35,120 --> 02:50:37,200
changed or if a particular data is

02:50:36,720 --> 02:50:40,240
missing

02:50:37,200 --> 02:50:41,520
and dvc is only going to run that stage

02:50:40,240 --> 02:50:43,120
so consider that you're gone on a

02:50:41,520 --> 02:50:46,240
vacation for two months and then you

02:50:43,120 --> 02:50:49,120
return back and params.yaml has changed

02:50:46,240 --> 02:50:50,160
like significantly so you pull all of

02:50:49,120 --> 02:50:51,760
your code from github

02:50:50,160 --> 02:50:53,600
and all you'll have to do is run dvc

02:50:51,760 --> 02:50:55,439
repro and it's going to

02:50:53,600 --> 02:50:56,800
see what has changed going to run the

02:50:55,439 --> 02:50:58,800
train data script

02:50:56,800 --> 02:51:01,600
going to produce the final model and put

02:50:58,800 --> 02:51:02,080
that in your local system to ensure that

02:51:01,600 --> 02:51:04,880
you

02:51:02,080 --> 02:51:07,120
have the exact same experiment and model

02:51:04,880 --> 02:51:10,880
that your colleagues do

02:51:07,120 --> 02:51:13,920
let's just take a look at um what do we

02:51:10,880 --> 02:51:14,319
have okay not the command i wanted to

02:51:13,920 --> 02:51:19,200
run

02:51:14,319 --> 02:51:22,720
but never mind we are going to try again

02:51:19,200 --> 02:51:24,720
okay let's clear this out run dbc

02:51:22,720 --> 02:51:27,520
status just to see where we are in this

02:51:24,720 --> 02:51:27,520
whole process

02:51:29,600 --> 02:51:34,240
okay so none of these files are in my

02:51:31,359 --> 02:51:35,279
cache so when i run dvc repro dvc is

02:51:34,240 --> 02:51:37,920
going to

02:51:35,279 --> 02:51:39,840
run all of these stages pull in a new

02:51:37,920 --> 02:51:41,760
cache folder over here

02:51:39,840 --> 02:51:43,279
in the dbc folder and as it goes through

02:51:41,760 --> 02:51:46,240
the stages it's going to

02:51:43,279 --> 02:51:47,840
put the outputs in the cache so as it's

02:51:46,240 --> 02:51:50,160
going through a different stage

02:51:47,840 --> 02:51:52,800
it's going to get the output and put

02:51:50,160 --> 02:51:54,960
that into cache

02:51:52,800 --> 02:51:56,720
let's see if that happens and if you're

02:51:54,960 --> 02:51:59,439
lucky enough to see that

02:51:56,720 --> 02:52:01,279
okay well it seems that we are kind of

02:51:59,439 --> 02:52:04,640
lucky

02:52:01,279 --> 02:52:06,000
okay it seems to be working and as soon

02:52:04,640 --> 02:52:08,479
as this is completed

02:52:06,000 --> 02:52:10,000
what happens is if i was to turn over to

02:52:08,479 --> 02:52:12,880
my git ignore

02:52:10,000 --> 02:52:13,359
so github is not tracking all of these

02:52:12,880 --> 02:52:15,760
um

02:52:13,359 --> 02:52:17,040
data files instead of what we are

02:52:15,760 --> 02:52:20,000
pushing on to github

02:52:17,040 --> 02:52:20,640
is actually pointers to where my data is

02:52:20,000 --> 02:52:22,640
is stored

02:52:20,640 --> 02:52:24,720
and that's honestly such a smart way

02:52:22,640 --> 02:52:26,240
because you have pointers to each of the

02:52:24,720 --> 02:52:27,520
versions of the assets that you're

02:52:26,240 --> 02:52:30,720
producing

02:52:27,520 --> 02:52:32,319
so now what i i want to do is check out

02:52:30,720 --> 02:52:34,800
a new branch

02:52:32,319 --> 02:52:35,600
and let's see let's switch over to train

02:52:34,800 --> 02:52:39,840
data

02:52:35,600 --> 02:52:44,240
where is it okay and what we want to do

02:52:39,840 --> 02:52:47,520
is use a multinomial naive base model

02:52:44,240 --> 02:52:48,160
you know since our job is to make this

02:52:47,520 --> 02:52:51,680
whole

02:52:48,160 --> 02:52:54,720
system more accurate let's

02:52:51,680 --> 02:52:57,200
try out uh okay

02:52:54,720 --> 02:52:58,160
perfect let's try multinomial naive

02:52:57,200 --> 02:53:00,640
bayes

02:52:58,160 --> 02:53:01,760
and here is our classifier so i'm just

02:53:00,640 --> 02:53:05,600
going to

02:53:01,760 --> 02:53:08,720
change it to using multinomial and b

02:53:05,600 --> 02:53:10,800
and we're going to comment this line out

02:53:08,720 --> 02:53:11,760
so now what i want to do is run dbc

02:53:10,800 --> 02:53:13,120
repro again

02:53:11,760 --> 02:53:15,120
so the training data is the only script

02:53:13,120 --> 02:53:16,000
that has changed it's going to reproduce

02:53:15,120 --> 02:53:18,399
a new uh

02:53:16,000 --> 02:53:20,479
model and it will put that into my cache

02:53:18,399 --> 02:53:24,720
and i am going to track that

02:53:20,479 --> 02:53:26,640
particular new model with github

02:53:24,720 --> 02:53:28,160
so soon as that's done let's take a

02:53:26,640 --> 02:53:30,960
screensh um

02:53:28,160 --> 02:53:33,120
start off where we at or you know just

02:53:30,960 --> 02:53:37,279
just to make sure that

02:53:33,120 --> 02:53:41,200
everything remains intact doesn't break

02:53:37,279 --> 02:53:43,680
all right so let's push this on to

02:53:41,200 --> 02:53:44,319
origin and as we push it onto github

02:53:43,680 --> 02:53:46,479
we'll see

02:53:44,319 --> 02:53:48,080
such a cool thing that's gonna trigger

02:53:46,479 --> 02:53:49,760
there so

02:53:48,080 --> 02:53:51,120
should we switch over to github and see

02:53:49,760 --> 02:53:55,279
what's going on

02:53:51,120 --> 02:53:55,279
all right head over to the actions tab

02:53:56,720 --> 02:54:00,800
uh let's see awesome so something just

02:53:59,600 --> 02:54:03,359
got queued

02:54:00,800 --> 02:54:05,439
and it seems to be running a workflow

02:54:03,359 --> 02:54:06,000
right it's it's like a whole bunch of

02:54:05,439 --> 02:54:08,080
steps which

02:54:06,000 --> 02:54:09,520
are running so where did we configure it

02:54:08,080 --> 02:54:11,279
and how is this running

02:54:09,520 --> 02:54:13,040
all super good questions which we are

02:54:11,279 --> 02:54:14,720
going to answer

02:54:13,040 --> 02:54:17,840
so let's look at the github slash

02:54:14,720 --> 02:54:19,760
workflows and workflow.yaml file

02:54:17,840 --> 02:54:22,000
okay so what workflow is essentially

02:54:19,760 --> 02:54:22,560
defining on high level what needs to be

02:54:22,000 --> 02:54:25,279
done

02:54:22,560 --> 02:54:25,680
and what i want is as soon as i push on

02:54:25,279 --> 02:54:28,319
to

02:54:25,680 --> 02:54:29,920
uh any branch onto github i want to run

02:54:28,319 --> 02:54:31,600
this particular script

02:54:29,920 --> 02:54:33,279
i want to run this job called run

02:54:31,600 --> 02:54:36,319
pipeline which is going to run

02:54:33,279 --> 02:54:36,960
on an ubuntu latest machine and in

02:54:36,319 --> 02:54:38,720
ubuntu

02:54:36,960 --> 02:54:40,880
all of this machine is actually

02:54:38,720 --> 02:54:43,920
configured with this container which has

02:54:40,880 --> 02:54:46,080
pip install dvc etc and all of this

02:54:43,920 --> 02:54:47,040
is running on github provision machines

02:54:46,080 --> 02:54:50,080
called github

02:54:47,040 --> 02:54:52,160
runners and github runner is

02:54:50,080 --> 02:54:55,120
going to be configured with something

02:54:52,160 --> 02:54:56,560
called so we're running these as steps

02:54:55,120 --> 02:54:58,240
and when we have these steps you're

02:54:56,560 --> 02:54:59,200
using something called an action and

02:54:58,240 --> 02:55:01,920
that's like a

02:54:59,200 --> 02:55:02,240
a predefined sort of term or predefined

02:55:01,920 --> 02:55:04,000
uh

02:55:02,240 --> 02:55:05,439
tasks that we want to do so here what we

02:55:04,000 --> 02:55:07,120
want to do is check out

02:55:05,439 --> 02:55:08,560
action slash checkout we want to check

02:55:07,120 --> 02:55:10,560
out all of our code

02:55:08,560 --> 02:55:12,160
onto that github runner so so that

02:55:10,560 --> 02:55:12,880
github runner will be able to look at my

02:55:12,160 --> 02:55:15,279
code and then

02:55:12,880 --> 02:55:17,040
do whatever it wants to do so it has

02:55:15,279 --> 02:55:19,120
these secrets on github token

02:55:17,040 --> 02:55:21,200
which is getting it access to read and

02:55:19,120 --> 02:55:22,960
writing from my repository which we'll

02:55:21,200 --> 02:55:24,800
look at where the secrets are stored so

02:55:22,960 --> 02:55:26,399
as soon as it has all the code onto the

02:55:24,800 --> 02:55:27,520
runner we are going to install the

02:55:26,399 --> 02:55:30,000
requirements we are

02:55:27,520 --> 02:55:31,760
have we're going to reproduce the entire

02:55:30,000 --> 02:55:34,640
same pipeline that we did in our

02:55:31,760 --> 02:55:35,359
local system by using dvc repro we're

02:55:34,640 --> 02:55:37,680
going to

02:55:35,359 --> 02:55:40,000
fetch the like the how the tree is

02:55:37,680 --> 02:55:41,359
looking like on github

02:55:40,000 --> 02:55:43,040
and then there are two things that we're

02:55:41,359 --> 02:55:44,960
doing which are super cool is we're

02:55:43,040 --> 02:55:47,359
looking at the metrics.json and

02:55:44,960 --> 02:55:49,439
params.yaml at the master branch

02:55:47,359 --> 02:55:50,880
and then we're looking at uh metrics.js

02:55:49,439 --> 02:55:52,000
and params or yamaha different branch

02:55:50,880 --> 02:55:54,479
and comparing them

02:55:52,000 --> 02:55:56,080
and then we're sending that as a comment

02:55:54,479 --> 02:55:58,240
to that particular comment

02:55:56,080 --> 02:55:59,600
and what that's going to do is again

02:55:58,240 --> 02:56:01,600
help the code reviewer see and

02:55:59,600 --> 02:56:02,560
understand if this is something they

02:56:01,600 --> 02:56:04,960
want to push

02:56:02,560 --> 02:56:06,640
into production so this action still

02:56:04,960 --> 02:56:07,439
seems to be running meanwhile let's

02:56:06,640 --> 02:56:10,560
switch back

02:56:07,439 --> 02:56:12,960
and check out oh wait did it okay we

02:56:10,560 --> 02:56:16,640
will come back to that in a bit

02:56:12,960 --> 02:56:20,960
let's also check out uh

02:56:16,640 --> 02:56:24,479
another branch and let's try lda here

02:56:20,960 --> 02:56:27,680
so what i'm going to do is

02:56:24,479 --> 02:56:29,040
from let's have a discriminate analysis

02:56:27,680 --> 02:56:32,160
right

02:56:29,040 --> 02:56:34,960
i i i'm just going to try out all of my

02:56:32,160 --> 02:56:38,720
luck and see which model works best

02:56:34,960 --> 02:56:38,720
and take credit for all of that work

02:56:38,840 --> 02:56:45,439
so let's also

02:56:42,000 --> 02:56:47,279
comment this line out so again we are

02:56:45,439 --> 02:56:49,359
going to do the exact same step we are

02:56:47,279 --> 02:56:50,160
going to run dvc repro to ensure that

02:56:49,359 --> 02:56:52,319
our new model

02:56:50,160 --> 02:56:53,200
is on us and it's also with our

02:56:52,319 --> 02:56:55,439
teammates

02:56:53,200 --> 02:56:56,720
you know like team working with the team

02:56:55,439 --> 02:56:57,600
is really important to ensure that

02:56:56,720 --> 02:57:01,680
everything

02:56:57,600 --> 02:57:05,200
runs smoothly okay

02:57:01,680 --> 02:57:09,760
so once that's done let's

02:57:05,200 --> 02:57:12,960
add our files and make a git comment

02:57:09,760 --> 02:57:16,720
let's say lda

02:57:12,960 --> 02:57:19,200
not a super descriptive comment

02:57:16,720 --> 02:57:19,760
but that works git push origin and let's

02:57:19,200 --> 02:57:22,000
do

02:57:19,760 --> 02:57:22,800
let's push it to lda so from previous

02:57:22,000 --> 02:57:24,160
experience we know

02:57:22,800 --> 02:57:26,399
an action should have been triggered

02:57:24,160 --> 02:57:26,399
right

02:57:27,600 --> 02:57:32,560
okay well not yet

02:57:30,640 --> 02:57:34,160
it's so it just got pushed and it's

02:57:32,560 --> 02:57:37,359
running so let it run

02:57:34,160 --> 02:57:37,840
we can look to our push that we made

02:57:37,359 --> 02:57:40,880
onto

02:57:37,840 --> 02:57:42,880
the multinomial knife base model and see

02:57:40,880 --> 02:57:44,960
what do we have on there we know that we

02:57:42,880 --> 02:57:46,640
were looking for a comment right

02:57:44,960 --> 02:57:49,279
and let's see what this comment is going

02:57:46,640 --> 02:57:52,000
to look like

02:57:49,279 --> 02:57:52,560
okay so it seems that we kind of did

02:57:52,000 --> 02:57:54,880
worse

02:57:52,560 --> 02:57:56,880
by using a multinomial live based model

02:57:54,880 --> 02:57:58,479
and right now i'm a code reviewer

02:57:56,880 --> 02:58:00,160
right i don't want to push this into

02:57:58,479 --> 02:58:02,640
master because um

02:58:00,160 --> 02:58:03,359
the sensitivity the accuracy really not

02:58:02,640 --> 02:58:05,520
what i like

02:58:03,359 --> 02:58:07,439
so i'm just going to do nothing with

02:58:05,520 --> 02:58:09,359
that and i'm going to wait on lda which

02:58:07,439 --> 02:58:12,080
my team member has pushed

02:58:09,359 --> 02:58:13,040
okay so switching back let's look over

02:58:12,080 --> 02:58:15,520
to the other

02:58:13,040 --> 02:58:18,080
um deployment file that we have which is

02:58:15,520 --> 02:58:19,120
called deploy to aws and this is another

02:58:18,080 --> 02:58:20,800
github workflow

02:58:19,120 --> 02:58:22,240
what i want to do here is directly

02:58:20,800 --> 02:58:25,120
deploy to aws

02:58:22,240 --> 02:58:26,720
so as soon as i push on to master or the

02:58:25,120 --> 02:58:27,760
code reviewers push on to master what

02:58:26,720 --> 02:58:30,319
this is going to do

02:58:27,760 --> 02:58:32,000
is take all of the code package into a

02:58:30,319 --> 02:58:32,960
zip folder and then put it directly into

02:58:32,000 --> 02:58:34,479
aws i

02:58:32,960 --> 02:58:36,080
will not have to do anything will not

02:58:34,479 --> 02:58:38,319
have to switch over to aws

02:58:36,080 --> 02:58:39,359
you know will not have to configure um

02:58:38,319 --> 02:58:42,399
steps over there

02:58:39,359 --> 02:58:43,680
very simple very nice uh so here are

02:58:42,399 --> 02:58:44,880
certain environment variables which we

02:58:43,680 --> 02:58:47,680
are using in this

02:58:44,880 --> 02:58:49,600
workflow so again like last time we were

02:58:47,680 --> 02:58:50,720
checking out this repository onto the

02:58:49,600 --> 02:58:52,720
github runner

02:58:50,720 --> 02:58:54,160
then we are creating a deployment

02:58:52,720 --> 02:58:57,600
package using

02:58:54,160 --> 02:59:00,240
um like a standard command line tool

02:58:57,600 --> 02:59:02,080
um and then we are configuring aws using

02:59:00,240 --> 02:59:04,080
something called aws actions and these

02:59:02,080 --> 02:59:05,439
are actions made available by aws

02:59:04,080 --> 02:59:06,399
themselves so these are open source you

02:59:05,439 --> 02:59:08,160
can check them out

02:59:06,399 --> 02:59:09,840
and what this particular action is going

02:59:08,160 --> 02:59:12,800
to do is check out

02:59:09,840 --> 02:59:14,000
um or it's going to configure the aws

02:59:12,800 --> 02:59:16,560
cli onto the github

02:59:14,000 --> 02:59:18,640
runner with secrets and access key id

02:59:16,560 --> 02:59:20,720
just to ensure that that github runner

02:59:18,640 --> 02:59:22,080
has access to all of my resources so

02:59:20,720 --> 02:59:24,399
it's able to pull

02:59:22,080 --> 02:59:26,240
or push or you know read and write onto

02:59:24,399 --> 02:59:29,040
different resources here it's just

02:59:26,240 --> 02:59:30,000
s3 and where these secrets are stored is

02:59:29,040 --> 02:59:33,040
back here onto

02:59:30,000 --> 02:59:35,920
settings switching over to

02:59:33,040 --> 02:59:37,040
secrets this is where we have secrets

02:59:35,920 --> 02:59:38,479
defined and you can create a new

02:59:37,040 --> 02:59:42,080
repository secret

02:59:38,479 --> 02:59:45,279
and that's how your workflow.yml file

02:59:42,080 --> 02:59:49,439
is using these secrets from so

02:59:45,279 --> 02:59:52,720
that is for the second script

02:59:49,439 --> 02:59:54,000
let's see what happened with our actions

02:59:52,720 --> 02:59:57,200
okay so that's good that it got

02:59:54,000 --> 02:59:57,920
completed and okay so this was an lda

02:59:57,200 --> 02:59:59,439
branch

02:59:57,920 --> 03:00:01,200
let's see what's going on with this

02:59:59,439 --> 03:00:03,359
branch we are hoping to see

03:00:01,200 --> 03:00:04,720
something better like something positive

03:00:03,359 --> 03:00:07,279
at least

03:00:04,720 --> 03:00:09,120
so okay that's a good sign we have a

03:00:07,279 --> 03:00:10,240
quite significant change in accuracy and

03:00:09,120 --> 03:00:12,319
sensitivity

03:00:10,240 --> 03:00:14,319
um i don't really care about maybe

03:00:12,319 --> 03:00:15,760
specificity here so what i'm going to do

03:00:14,319 --> 03:00:17,200
is i'm just going to create a pull

03:00:15,760 --> 03:00:19,600
request onto master

03:00:17,200 --> 03:00:20,960
and we know that as i compare my pull

03:00:19,600 --> 03:00:24,319
request with master

03:00:20,960 --> 03:00:27,040
our second workflow yaml file which was

03:00:24,319 --> 03:00:27,920
to deploy to aws is going to get

03:00:27,040 --> 03:00:31,600
triggered

03:00:27,920 --> 03:00:33,920
so switching back here let's refresh

03:00:31,600 --> 03:00:38,000
this

03:00:33,920 --> 03:00:42,399
okay not yet okay let's see if we

03:00:38,000 --> 03:00:45,279
actually um merged changes

03:00:42,399 --> 03:00:45,279
okay still

03:00:46,319 --> 03:00:51,760
okay never mind we never merged it let's

03:00:48,960 --> 03:00:53,920
confirm the merge

03:00:51,760 --> 03:00:55,840
so now we should go back to actions and

03:00:53,920 --> 03:00:56,560
see something so that's good so we have

03:00:55,840 --> 03:00:59,040
two

03:00:56,560 --> 03:00:59,600
of our um workflows running we have a

03:00:59,040 --> 03:01:02,080
deploy

03:00:59,600 --> 03:01:04,080
to aws workflow and we have a the one

03:01:02,080 --> 03:01:04,800
that we were using previously to compare

03:01:04,080 --> 03:01:07,040
metrics

03:01:04,800 --> 03:01:09,120
so as soon as these get completed we can

03:01:07,040 --> 03:01:09,439
switch over to aws and see what's going

03:01:09,120 --> 03:01:13,359
to

03:01:09,439 --> 03:01:15,200
happen right um let's see so this

03:01:13,359 --> 03:01:16,800
is okay this got completed so that's

03:01:15,200 --> 03:01:17,120
good also one thing that i wanted to

03:01:16,800 --> 03:01:18,720
show

03:01:17,120 --> 03:01:20,720
is what would happen if there was an

03:01:18,720 --> 03:01:22,720
edit in your script right so

03:01:20,720 --> 03:01:24,479
if i made an intentional letter earlier

03:01:22,720 --> 03:01:25,439
just for demonstration and i wanted to

03:01:24,479 --> 03:01:27,040
show as there is an

03:01:25,439 --> 03:01:28,960
error you can go and check into your

03:01:27,040 --> 03:01:30,880
laws where exactly is that error and you

03:01:28,960 --> 03:01:31,279
will be able to resolve it and run it

03:01:30,880 --> 03:01:33,359
again

03:01:31,279 --> 03:01:35,120
so i absolutely love that continuous

03:01:33,359 --> 03:01:36,319
testing and monitoring part just to make

03:01:35,120 --> 03:01:40,640
sure that everything works

03:01:36,319 --> 03:01:42,960
so switch over to um s3

03:01:40,640 --> 03:01:45,120
and let's refresh this and we should

03:01:42,960 --> 03:01:47,120
have a new zip deployment file if

03:01:45,120 --> 03:01:49,760
everything if everything works including

03:01:47,120 --> 03:01:53,840
my internet

03:01:49,760 --> 03:01:55,840
okay ooh awesome i'm so glad so

03:01:53,840 --> 03:01:57,680
this is our zip deployment file and this

03:01:55,840 --> 03:02:00,640
contains all the updated code

03:01:57,680 --> 03:02:01,840
so anyone i can you know if i have some

03:02:00,640 --> 03:02:03,520
different setup which is using

03:02:01,840 --> 03:02:05,760
deployment from here we can switch back

03:02:03,520 --> 03:02:09,279
and use that

03:02:05,760 --> 03:02:12,399
so that was for me using

03:02:09,279 --> 03:02:14,560
a very you know a big way

03:02:12,399 --> 03:02:16,319
and a very sort of complete way of doing

03:02:14,560 --> 03:02:18,319
an end-to-end machine learning

03:02:16,319 --> 03:02:20,000
uh pipeline you're versioning the system

03:02:18,319 --> 03:02:21,120
you're testing it you're configuring it

03:02:20,000 --> 03:02:23,279
you're trying and

03:02:21,120 --> 03:02:25,279
making sure that different algorithms

03:02:23,279 --> 03:02:27,200
are getting configured and your branch

03:02:25,279 --> 03:02:29,120
managers are able to see

03:02:27,200 --> 03:02:30,800
and um sort of tell if this is something

03:02:29,120 --> 03:02:33,920
that they want to go into production

03:02:30,800 --> 03:02:34,800
and i really do think that with um with

03:02:33,920 --> 03:02:37,520
aws

03:02:34,800 --> 03:02:38,000
and with github actions and workflows

03:02:37,520 --> 03:02:41,279
every

03:02:38,000 --> 03:02:44,479
development of any sort is really sky is

03:02:41,279 --> 03:02:46,160
the limit essentially so

03:02:44,479 --> 03:02:48,319
that's a wrap for this session and it's

03:02:46,160 --> 03:02:50,080
time for q a you can also head over to

03:02:48,319 --> 03:02:51,920
github satellite.com

03:02:50,080 --> 03:02:53,840
discussions we're going to be there and

03:02:51,920 --> 03:02:56,080
answering all your questions about

03:02:53,840 --> 03:02:58,720
um getting workflows and actions and how

03:02:56,080 --> 03:03:02,240
we're using it and how you can use it

03:02:58,720 --> 03:03:05,439
all right so thank you so much let's

03:03:02,240 --> 03:03:08,640
head back thank you shruti

03:03:05,439 --> 03:03:09,439
that was an awesome session and love the

03:03:08,640 --> 03:03:11,680
demo

03:03:09,439 --> 03:03:13,760
gods as well as internet gods like

03:03:11,680 --> 03:03:16,640
everybody played along

03:03:13,760 --> 03:03:17,279
the first question that i have for you

03:03:16,640 --> 03:03:20,319
is

03:03:17,279 --> 03:03:21,359
how has data version controls like dvc's

03:03:20,319 --> 03:03:26,319
functionality

03:03:21,359 --> 03:03:29,200
been amplified by github

03:03:26,319 --> 03:03:30,080
yeah so i i really like this question

03:03:29,200 --> 03:03:32,319
because

03:03:30,080 --> 03:03:33,840
imagine if you have like a team of

03:03:32,319 --> 03:03:35,760
people you're working with right and

03:03:33,840 --> 03:03:37,200
like you have data coming in every day

03:03:35,760 --> 03:03:38,640
and like you're trying to build you're

03:03:37,200 --> 03:03:41,680
trying to version

03:03:38,640 --> 03:03:43,439
and it gets so complicated that there's

03:03:41,680 --> 03:03:45,040
no way for you you're versioning it but

03:03:43,439 --> 03:03:46,800
there's no way for you to share

03:03:45,040 --> 03:03:48,800
those versions between your team so

03:03:46,800 --> 03:03:50,479
maybe you're emailing one person maybe

03:03:48,800 --> 03:03:52,080
you're whatsapping your code and your

03:03:50,479 --> 03:03:54,319
data to the other person

03:03:52,080 --> 03:03:56,319
and like just imagine that one person

03:03:54,319 --> 03:03:58,000
gets one data the other person gets

03:03:56,319 --> 03:03:59,520
the other data which is not going to

03:03:58,000 --> 03:04:01,920
work for your team

03:03:59,520 --> 03:04:03,439
so get up a very central role that it's

03:04:01,920 --> 03:04:06,319
playing is making sure that

03:04:03,439 --> 03:04:07,600
every team member can switch between um

03:04:06,319 --> 03:04:09,279
different versions and

03:04:07,600 --> 03:04:10,960
it acts as a source of truth and

03:04:09,279 --> 03:04:12,720
everything works for

03:04:10,960 --> 03:04:14,080
the entire team rather than just the

03:04:12,720 --> 03:04:16,560
person who um

03:04:14,080 --> 03:04:19,439
is working on that particular assets and

03:04:16,560 --> 03:04:19,439
those questions

03:04:20,479 --> 03:04:25,200
great great thanks for that insight we

03:04:23,279 --> 03:04:28,640
also learned in your introduction

03:04:25,200 --> 03:04:31,279
about you being at connexa.ai which is

03:04:28,640 --> 03:04:32,160
all women-led startup would love to hear

03:04:31,279 --> 03:04:34,720
more about

03:04:32,160 --> 03:04:36,240
how is it working like at that place and

03:04:34,720 --> 03:04:39,600
what is the story behind it so tell us

03:04:36,240 --> 03:04:39,600
more about connexar rdi

03:04:39,840 --> 03:04:44,319
yeah absolutely i absolutely love

03:04:42,399 --> 03:04:45,439
working there it's all women it's all

03:04:44,319 --> 03:04:47,200
women of color

03:04:45,439 --> 03:04:49,359
who are running the team all super

03:04:47,200 --> 03:04:51,359
powerful and how it was this actually

03:04:49,359 --> 03:04:52,880
started during these code months and

03:04:51,359 --> 03:04:56,080
during the lockdown where

03:04:52,880 --> 03:04:56,319
the ceo thought that there's not a lot

03:04:56,080 --> 03:04:58,319
of

03:04:56,319 --> 03:05:00,960
women who are leading in the space of

03:04:58,319 --> 03:05:04,000
a.i and leading in the space of startups

03:05:00,960 --> 03:05:06,000
so maria that's the person who's

03:05:04,000 --> 03:05:07,120
leading it sheath high you know let's

03:05:06,000 --> 03:05:09,920
let's get together

03:05:07,120 --> 03:05:11,840
a team of amazing women developers who

03:05:09,920 --> 03:05:12,160
are really excited about getting into

03:05:11,840 --> 03:05:15,359
this

03:05:12,160 --> 03:05:17,840
space and like building software um and

03:05:15,359 --> 03:05:18,560
within like two months there was so much

03:05:17,840 --> 03:05:20,720
positive

03:05:18,560 --> 03:05:22,640
comments and like positive feedback we

03:05:20,720 --> 03:05:24,319
were receiving from people and we are

03:05:22,640 --> 03:05:27,520
just going to launch our new

03:05:24,319 --> 03:05:27,840
mvp product and it's so so fun working

03:05:27,520 --> 03:05:29,680
with

03:05:27,840 --> 03:05:31,279
dynamic women from you know even

03:05:29,680 --> 03:05:32,720
different countries we have people from

03:05:31,279 --> 03:05:36,319
portugal from brazil

03:05:32,720 --> 03:05:38,240
from canada all amazing and um

03:05:36,319 --> 03:05:40,080
and over there as well you know i'm

03:05:38,240 --> 03:05:41,920
always sort of uh

03:05:40,080 --> 03:05:44,479
pushing for using github actions i'm

03:05:41,920 --> 03:05:46,560
like let's go this is such a great

03:05:44,479 --> 03:05:47,760
this is such a great system because i am

03:05:46,560 --> 03:05:49,439
managing like several less

03:05:47,760 --> 03:05:51,120
infrastructure deployments there

03:05:49,439 --> 03:05:52,960
and i'm always like you know what let's

03:05:51,120 --> 03:05:56,960
use github action that's so cool

03:05:52,960 --> 03:05:57,680
absolutely love it thank you and a big

03:05:56,960 --> 03:05:59,920
shout out to

03:05:57,680 --> 03:06:01,120
all your leaders there for thinking

03:05:59,920 --> 03:06:03,120
about it and starting

03:06:01,120 --> 03:06:04,240
something which like all of you feel so

03:06:03,120 --> 03:06:07,920
passionate about yes

03:06:04,240 --> 03:06:10,960
big shout out to all of them there

03:06:07,920 --> 03:06:13,359
the question i have for you is

03:06:10,960 --> 03:06:14,880
in the roadmap for actions like what are

03:06:13,359 --> 03:06:17,920
the what are the big pieces you're

03:06:14,880 --> 03:06:17,920
looking forward to

03:06:19,680 --> 03:06:25,439
yeah um well whatever i'm thinking of

03:06:23,279 --> 03:06:28,800
actions or like github actions

03:06:25,439 --> 03:06:31,200
uh there's such a great space and like

03:06:28,800 --> 03:06:32,240
first of all an amazing developer

03:06:31,200 --> 03:06:33,920
community

03:06:32,240 --> 03:06:35,680
who is like building the actions to make

03:06:33,920 --> 03:06:37,680
sure that all of the platforms and the

03:06:35,680 --> 03:06:38,319
systems you know you have aws you have

03:06:37,680 --> 03:06:41,520
azure

03:06:38,319 --> 03:06:42,000
in gcp which was the the session we had

03:06:41,520 --> 03:06:45,760
earlier

03:06:42,000 --> 03:06:48,560
which was using actions and gcp

03:06:45,760 --> 03:06:50,399
uh it's such a wholesome environment of

03:06:48,560 --> 03:06:52,479
building and making sure that

03:06:50,399 --> 03:06:54,160
uh all of the developer community

03:06:52,479 --> 03:06:55,520
whether they're building with python or

03:06:54,160 --> 03:06:58,000
whether they're building with java

03:06:55,520 --> 03:07:00,080
javascript they're all um they'll feel

03:06:58,000 --> 03:07:02,399
comfortable and that's such a big thing

03:07:00,080 --> 03:07:03,760
um and especially how it gets configured

03:07:02,399 --> 03:07:04,720
and built together with the github

03:07:03,760 --> 03:07:06,880
workflow

03:07:04,720 --> 03:07:08,479
i also the openness that you have you

03:07:06,880 --> 03:07:09,279
can like choose between different

03:07:08,479 --> 03:07:11,760
options

03:07:09,279 --> 03:07:12,640
and just the dogs themselves they're so

03:07:11,760 --> 03:07:15,359
cool

03:07:12,640 --> 03:07:16,880
uh absolutely you know i'm always

03:07:15,359 --> 03:07:18,479
looking at the marketplace and always

03:07:16,880 --> 03:07:21,680
gets so excited i'm like whoa a new

03:07:18,479 --> 03:07:24,720
action in the marketplace that's so cool

03:07:21,680 --> 03:07:26,960
uh so yeah that i would always

03:07:24,720 --> 03:07:30,000
um support and push for github actions

03:07:26,960 --> 03:07:30,000
as much as i can

03:07:30,080 --> 03:07:34,160
wow that was music to my ears and you

03:07:33,120 --> 03:07:36,080
talk about

03:07:34,160 --> 03:07:37,359
a lot of github features and

03:07:36,080 --> 03:07:38,800
capabilities here

03:07:37,359 --> 03:07:40,800
we got this interesting question to

03:07:38,800 --> 03:07:41,680
almost every speaker and here it is for

03:07:40,800 --> 03:07:43,760
you as well

03:07:41,680 --> 03:07:45,520
if you go to pick one feature this is

03:07:43,760 --> 03:07:49,200
which is your favorite in github

03:07:45,520 --> 03:07:50,479
what would that be and now this time you

03:07:49,200 --> 03:07:53,840
can see i would say

03:07:50,479 --> 03:07:56,000
it's probably

03:07:53,840 --> 03:07:58,240
it's probably discussions that's what

03:07:56,000 --> 03:08:00,319
i'm gonna say

03:07:58,240 --> 03:08:01,600
because it's bringing that developer

03:08:00,319 --> 03:08:03,760
community together

03:08:01,600 --> 03:08:04,720
you know like we are able to talk we are

03:08:03,760 --> 03:08:07,120
able to discuss

03:08:04,720 --> 03:08:08,800
things and it's such always such a good

03:08:07,120 --> 03:08:10,479
thing to receive feedback

03:08:08,800 --> 03:08:12,240
right and just like talk with the

03:08:10,479 --> 03:08:13,520
community and github has such an amazing

03:08:12,240 --> 03:08:15,760
developer community and

03:08:13,520 --> 03:08:16,720
it's always growing yes and that's so

03:08:15,760 --> 03:08:19,279
cool that this

03:08:16,720 --> 03:08:20,000
feature was implemented you can go in

03:08:19,279 --> 03:08:22,080
you can talk

03:08:20,000 --> 03:08:23,359
you can talk about what you want to

03:08:22,080 --> 03:08:24,720
build you can talk about what the

03:08:23,359 --> 03:08:26,560
problems are

03:08:24,720 --> 03:08:28,640
i i i would always say get up

03:08:26,560 --> 03:08:30,960
discussions all the actions will come

03:08:28,640 --> 03:08:33,760
second

03:08:30,960 --> 03:08:36,240
wow i love talking to you you're like a

03:08:33,760 --> 03:08:36,880
super fan of github so i thank you so

03:08:36,240 --> 03:08:40,720
much

03:08:36,880 --> 03:08:41,520
there another one that i see coming up

03:08:40,720 --> 03:08:44,880
is

03:08:41,520 --> 03:08:47,359
how especially again coming to ml ops

03:08:44,880 --> 03:08:48,800
bringing data scientists and engineers

03:08:47,359 --> 03:08:52,640
together like what's

03:08:48,800 --> 03:08:55,359
one one thing you would want to share

03:08:52,640 --> 03:08:57,920
of how can they start collaborating much

03:08:55,359 --> 03:08:57,920
more better

03:08:58,720 --> 03:09:02,240
yeah no that's a really wonderful

03:09:00,840 --> 03:09:04,720
question um

03:09:02,240 --> 03:09:05,359
and i would say that you know it's such

03:09:04,720 --> 03:09:07,760
a broad

03:09:05,359 --> 03:09:10,000
infrastructure like ml and ml ops is

03:09:07,760 --> 03:09:12,960
such a broad infrastructure

03:09:10,000 --> 03:09:15,279
um and with their different aspects you

03:09:12,960 --> 03:09:17,040
know you have the etl with data then you

03:09:15,279 --> 03:09:18,960
have like the training of it then you

03:09:17,040 --> 03:09:22,399
have the deploying of it

03:09:18,960 --> 03:09:23,200
um but it's such a central system

03:09:22,399 --> 03:09:25,120
especially

03:09:23,200 --> 03:09:26,880
with like tools and services like github

03:09:25,120 --> 03:09:29,359
it's like such a central system

03:09:26,880 --> 03:09:30,000
that whatever everyone is working on

03:09:29,359 --> 03:09:32,960
they can

03:09:30,000 --> 03:09:33,520
collaborate very easily and also they

03:09:32,960 --> 03:09:36,560
can

03:09:33,520 --> 03:09:38,560
um sort of see the team movement as they

03:09:36,560 --> 03:09:41,760
move through different processes

03:09:38,560 --> 03:09:44,000
so the the whole ecosystem of developer

03:09:41,760 --> 03:09:45,840
engineers and ml ops

03:09:44,000 --> 03:09:47,279
i think it's uh it's a great

03:09:45,840 --> 03:09:49,279
infrastructure for

03:09:47,279 --> 03:09:51,359
especially for me i love being in this

03:09:49,279 --> 03:09:53,359
infrastructure and i love being able to

03:09:51,359 --> 03:09:55,680
contribute to not just

03:09:53,359 --> 03:09:57,200
the ml part of deploying things or not

03:09:55,680 --> 03:09:59,439
just the ml part of

03:09:57,200 --> 03:10:00,640
training the data itself but also the

03:09:59,439 --> 03:10:02,399
whole infrastructure of

03:10:00,640 --> 03:10:04,720
how or where the data is coming in from

03:10:02,399 --> 03:10:06,720
and how we can design it and how we can

03:10:04,720 --> 03:10:08,399
make it more suitable to the users that

03:10:06,720 --> 03:10:08,880
continuous feedback from the team and

03:10:08,399 --> 03:10:12,399
users

03:10:08,880 --> 03:10:15,840
super essential

03:10:12,399 --> 03:10:16,560
wow you packed a lot of goodness in this

03:10:15,840 --> 03:10:18,399
talk

03:10:16,560 --> 03:10:19,760
and we're gonna tell our viewers that

03:10:18,399 --> 03:10:21,920
you are not leaving them for

03:10:19,760 --> 03:10:23,359
another 30 minutes and you will be with

03:10:21,920 --> 03:10:25,920
them at github

03:10:23,359 --> 03:10:26,399
discussions so we'll take your leave and

03:10:25,920 --> 03:10:29,279
uh

03:10:26,399 --> 03:10:31,040
bye bye shruti but viewers do throw all

03:10:29,279 --> 03:10:41,840
your queries all your questions to her

03:10:31,040 --> 03:10:41,840
at github discussions

03:10:44,080 --> 03:10:48,720
ah so we're getting close to the end

03:10:47,200 --> 03:10:51,040
i don't know i have a happy and sad

03:10:48,720 --> 03:10:54,720
feeling it's been so good

03:10:51,040 --> 03:10:57,439
uh but yes uh we also coming to an

03:10:54,720 --> 03:10:57,439
end to it

03:11:02,640 --> 03:11:06,319
folks remember to share with us on

03:11:05,040 --> 03:11:10,000
twitter

03:11:06,319 --> 03:11:12,399
github satellite and share with us your

03:11:10,000 --> 03:11:15,279
favorite moments your favorite session

03:11:12,399 --> 03:11:16,239
as well as what you've been loving where

03:11:15,279 --> 03:11:20,640
are you watching

03:11:16,239 --> 03:11:20,640
us from so share everything at github

03:11:20,840 --> 03:11:26,800
satellite okay divya

03:11:23,279 --> 03:11:30,399
i got one last chance for you to win

03:11:26,800 --> 03:11:33,920
this awesome octopus are you up for it

03:11:30,399 --> 03:11:36,720
all you got to do is tell me

03:11:33,920 --> 03:11:39,520
why should a student subscribe for the

03:11:36,720 --> 03:11:39,520
developer pack

03:11:39,920 --> 03:11:45,279
okay students do you have money

03:11:43,279 --> 03:11:47,439
can you buy all the tools that mohit and

03:11:45,279 --> 03:11:51,040
i or everybody in github can

03:11:47,439 --> 03:11:54,319
no right the best way to get access

03:11:51,040 --> 03:11:56,640
to top industry tools is by

03:11:54,319 --> 03:11:58,000
applying to the student developer pack

03:11:56,640 --> 03:12:01,120
you get

03:11:58,000 --> 03:12:04,960
tools hundred plus tools worth of 200

03:12:01,120 --> 03:12:06,720
000 dollars and you get all of that free

03:12:04,960 --> 03:12:09,840
if you apply for

03:12:06,720 --> 03:12:11,279
the developer pack and you can then

03:12:09,840 --> 03:12:13,120
develop code

03:12:11,279 --> 03:12:14,560
it just democratizes software

03:12:13,120 --> 03:12:16,479
development isn't it you'll have the

03:12:14,560 --> 03:12:19,520
same tools that everybody in github

03:12:16,479 --> 03:12:22,560
in the company in the industry has so go

03:12:19,520 --> 03:12:24,960
go to education.github.com

03:12:22,560 --> 03:12:26,960
you said it the best way possible and

03:12:24,960 --> 03:12:33,040
there you go emptying my shells

03:12:26,960 --> 03:12:36,479
one more time

03:12:33,040 --> 03:12:40,160
oh i love this thank you

03:12:36,479 --> 03:12:42,399
so much and folks go get the student

03:12:40,160 --> 03:12:45,359
developer back

03:12:42,399 --> 03:12:46,560
absolutely and with that let's jump into

03:12:45,359 --> 03:12:49,840
our next session

03:12:46,560 --> 03:12:52,560
which is about how github uses github

03:12:49,840 --> 03:12:53,200
for collaboration right we just don't

03:12:52,560 --> 03:12:55,520
make

03:12:53,200 --> 03:12:56,399
the tools but we use them ourselves as

03:12:55,520 --> 03:12:59,439
well

03:12:56,399 --> 03:13:01,359
we're gonna hear a lot about how

03:12:59,439 --> 03:13:03,120
internally kedup is getting used across

03:13:01,359 --> 03:13:04,880
the organization we developers

03:13:03,120 --> 03:13:07,200
beat the sales teams meet the marketing

03:13:04,880 --> 03:13:07,200
teams

03:13:08,319 --> 03:13:11,600
i want to steal this opportunity from

03:13:09,920 --> 03:13:14,560
you mohith to introduce

03:13:11,600 --> 03:13:15,279
satish he is one of my favorite

03:13:14,560 --> 03:13:18,640
engineering

03:13:15,279 --> 03:13:20,319
counterparts someone who i go to for

03:13:18,640 --> 03:13:23,359
advice as well as

03:13:20,319 --> 03:13:26,080
our in-house rapper so sharing

03:13:23,359 --> 03:13:27,920
all about github for collaboration is

03:13:26,080 --> 03:13:29,840
shatish kumar

03:13:27,920 --> 03:13:32,560
he's a staff engineering manager at

03:13:29,840 --> 03:13:34,960
github leads the chat ops area

03:13:32,560 --> 03:13:35,920
and is passionate about leveraging

03:13:34,960 --> 03:13:38,560
technology

03:13:35,920 --> 03:13:39,920
to create an impact at scale for

03:13:38,560 --> 03:13:43,520
developer products and

03:13:39,920 --> 03:13:44,319
platforms to achieve more so over to you

03:13:43,520 --> 03:13:57,840
satish

03:13:44,319 --> 03:13:57,840
and rocket

03:14:02,399 --> 03:14:07,359
namaste everyone welcome to github

03:14:04,720 --> 03:14:07,359
satellite

03:14:08,840 --> 03:14:14,160
github is a place where

03:14:12,319 --> 03:14:16,160
github is a place where people build

03:14:14,160 --> 03:14:18,319
software

03:14:16,160 --> 03:14:19,200
every day millions of developers use

03:14:18,319 --> 03:14:21,520
github

03:14:19,200 --> 03:14:22,960
to create things that touch billions of

03:14:21,520 --> 03:14:25,120
people

03:14:22,960 --> 03:14:26,880
to be at github is an awesome

03:14:25,120 --> 03:14:29,359
responsibility

03:14:26,880 --> 03:14:30,319
and i lead the chat ops integration team

03:14:29,359 --> 03:14:32,399
in github

03:14:30,319 --> 03:14:33,359
building products like slack and teams

03:14:32,399 --> 03:14:35,600
github

03:14:33,359 --> 03:14:38,319
with a goal to amplify engineering

03:14:35,600 --> 03:14:38,319
productivity

03:14:41,840 --> 03:14:46,960
let's start with numbers chat ops is a

03:14:45,359 --> 03:14:49,600
team of nine engineers

03:14:46,960 --> 03:14:51,600
and the team has done 80 deployments in

03:14:49,600 --> 03:14:54,160
last four weeks

03:14:51,600 --> 03:14:56,160
making the average to four deployments

03:14:54,160 --> 03:14:58,239
per working day

03:14:56,160 --> 03:15:00,399
it is truly awesome from a devops

03:14:58,239 --> 03:15:02,800
metrics point of view

03:15:00,399 --> 03:15:04,160
i let you all guess what the other phone

03:15:02,800 --> 03:15:06,720
numbers are

03:15:04,160 --> 03:15:09,200
and post your answers in the github

03:15:06,720 --> 03:15:09,200
discussion

03:15:10,479 --> 03:15:16,319
or twitter and use hashtag github

03:15:13,760 --> 03:15:16,319
satellite

03:15:17,120 --> 03:15:21,040
there is a story behind these numbers

03:15:19,520 --> 03:15:24,239
that makes them magical

03:15:21,040 --> 03:15:28,319
and absolutely motivating for my team

03:15:24,239 --> 03:15:29,680
the story of emotions started last year

03:15:28,319 --> 03:15:31,760
in march 2020

03:15:29,680 --> 03:15:33,359
and i still remember sitting in a

03:15:31,760 --> 03:15:35,439
conference room

03:15:33,359 --> 03:15:36,800
with leadership team pitching the idea

03:15:35,439 --> 03:15:40,640
to build the vision

03:15:36,800 --> 03:15:43,920
of building a unified chat ops platform

03:15:40,640 --> 03:15:45,680
my team was super excited to build this

03:15:43,920 --> 03:15:49,840
vision

03:15:45,680 --> 03:15:49,840
project execution barely started

03:15:51,520 --> 03:15:54,720
and everyone in the company was asked to

03:15:53,600 --> 03:15:58,640
work from home

03:15:54,720 --> 03:16:00,880
due to pandemic major blow to team

03:15:58,640 --> 03:16:03,840
collaboration resulted in

03:16:00,880 --> 03:16:03,840
reduced team velocity

03:16:04,800 --> 03:16:09,760
keeping the team velocity aside every

03:16:07,760 --> 03:16:12,399
engineer was

03:16:09,760 --> 03:16:13,359
going through varying emotions making

03:16:12,399 --> 03:16:17,600
them feel

03:16:13,359 --> 03:16:21,040
anxious isolated annoyed worried

03:16:17,600 --> 03:16:24,880
and sometimes frozen and stuck

03:16:21,040 --> 03:16:27,600
but this is fast coming back to present

03:16:24,880 --> 03:16:29,279
we are just a couple of weeks away from

03:16:27,600 --> 03:16:30,479
shipping our fourth deliverable and

03:16:29,279 --> 03:16:34,000
making the

03:16:30,479 --> 03:16:37,200
vision a reality in april

03:16:34,000 --> 03:16:38,800
in next couple of weeks i'm super

03:16:37,200 --> 03:16:41,840
excited

03:16:38,800 --> 03:16:45,760
to share the journey of unified chat

03:16:41,840 --> 03:16:49,040
i'm super excited my team's journey

03:16:45,760 --> 03:16:49,040
and give a walkthrough of

03:16:49,359 --> 03:16:56,640
how github uses github for collaboration

03:16:53,200 --> 03:16:57,359
i mean inclusive collaboration and along

03:16:56,640 --> 03:16:59,520
the way

03:16:57,359 --> 03:17:00,479
share practices and processes in

03:16:59,520 --> 03:17:02,479
engineering

03:17:00,479 --> 03:17:03,600
that help us shift faster whether we

03:17:02,479 --> 03:17:07,600
work from home

03:17:03,600 --> 03:17:08,080
or office in simple words collaboration

03:17:07,600 --> 03:17:10,720
means

03:17:08,080 --> 03:17:11,520
working with others by end of this

03:17:10,720 --> 03:17:13,680
session

03:17:11,520 --> 03:17:15,920
we will learn about eight key elements

03:17:13,680 --> 03:17:16,880
to enable an effective and inclusive

03:17:15,920 --> 03:17:19,359
collaboration

03:17:16,880 --> 03:17:22,160
collaborative culture in organization

03:17:19,359 --> 03:17:22,160
using github

03:17:23,200 --> 03:17:26,880
the code that powers github.com mostly

03:17:26,080 --> 03:17:29,359
resides

03:17:26,880 --> 03:17:30,319
in a monorepo it's surprising but that's

03:17:29,359 --> 03:17:34,239
the facts

03:17:30,319 --> 03:17:37,120
and to enable team academy every team

03:17:34,239 --> 03:17:39,520
own repository setup specifically for

03:17:37,120 --> 03:17:41,359
the issues and team documentation

03:17:39,520 --> 03:17:42,640
allowing them to tune their day-to-day

03:17:41,359 --> 03:17:44,720
process

03:17:42,640 --> 03:17:46,960
there are also teams which maintain

03:17:44,720 --> 03:17:51,279
their code in dedicated repo

03:17:46,960 --> 03:17:51,279
i have got a picture of slack repository

03:17:51,439 --> 03:17:56,239
which stores the chat ops code and the

03:17:53,680 --> 03:17:58,800
team has

03:17:56,239 --> 03:18:00,000
enabled almost all the features of

03:17:58,800 --> 03:18:02,560
github

03:18:00,000 --> 03:18:03,760
structurally everything in github

03:18:02,560 --> 03:18:06,640
organization

03:18:03,760 --> 03:18:08,800
starts with the repository there is a

03:18:06,640 --> 03:18:12,000
repository for everything

03:18:08,800 --> 03:18:16,080
literally for onboarding job posting

03:18:12,000 --> 03:18:19,439
benefits values even entitlements

03:18:16,080 --> 03:18:22,479
are maintained in a repository

03:18:19,439 --> 03:18:24,880
the best part of the setup is

03:18:22,479 --> 03:18:25,920
it helps everyone in the company to find

03:18:24,880 --> 03:18:29,520
the information

03:18:25,920 --> 03:18:29,520
quickly and easily

03:18:30,000 --> 03:18:34,080
planning and tracking is standardized

03:18:31,920 --> 03:18:36,160
across teams in github

03:18:34,080 --> 03:18:39,200
the goals translate into small

03:18:36,160 --> 03:18:42,960
consistently sized issues classified as

03:18:39,200 --> 03:18:46,319
initiatives epics features and tasks

03:18:42,960 --> 03:18:48,960
to track work across all of engineering

03:18:46,319 --> 03:18:50,720
and this facilitates us to speak a

03:18:48,960 --> 03:18:52,880
consistent language

03:18:50,720 --> 03:18:56,399
in terms of scoping and prioritization

03:18:52,880 --> 03:18:59,120
while collaborating with teams

03:18:56,399 --> 03:19:01,600
project boards are used across teams to

03:18:59,120 --> 03:19:03,279
organize and prioritize the work

03:19:01,600 --> 03:19:04,720
project boards are made up of issues

03:19:03,279 --> 03:19:06,319
pull requests and notes that are

03:19:04,720 --> 03:19:08,399
categorized as cards in different

03:19:06,319 --> 03:19:10,640
columns

03:19:08,399 --> 03:19:12,479
team project boards are accessible

03:19:10,640 --> 03:19:15,040
across organization

03:19:12,479 --> 03:19:15,840
and anybody in github can discover this

03:19:15,040 --> 03:19:18,960
project board

03:19:15,840 --> 03:19:20,399
easily just by searching and they can

03:19:18,960 --> 03:19:21,680
start collaborating either by

03:19:20,399 --> 03:19:23,680
subscribing to an issue of their

03:19:21,680 --> 03:19:24,800
interest or maybe share their thoughts

03:19:23,680 --> 03:19:28,239
or comments

03:19:24,800 --> 03:19:30,000
to enhance the future if something is a

03:19:28,239 --> 03:19:33,200
priority

03:19:30,000 --> 03:19:35,120
yes it's a priority for the whole team

03:19:33,200 --> 03:19:36,399
and we limit the number of in-progress

03:19:35,120 --> 03:19:39,840
epics to

03:19:36,399 --> 03:19:41,600
two for a team of size eight and this

03:19:39,840 --> 03:19:43,760
has been a great way

03:19:41,600 --> 03:19:47,439
to have a focused execution on

03:19:43,760 --> 03:19:50,560
delivering high customer value faster

03:19:47,439 --> 03:19:53,040
we have seen increased team bonding

03:19:50,560 --> 03:19:54,080
as there is developer engagement among

03:19:53,040 --> 03:19:56,160
people

03:19:54,080 --> 03:19:58,640
as there is deeper engagement among team

03:19:56,160 --> 03:20:03,040
members to work together

03:19:58,640 --> 03:20:03,040
closely towards a common and shared goal

03:20:03,439 --> 03:20:07,279
issue templates issue templates play a

03:20:06,319 --> 03:20:09,840
wider

03:20:07,279 --> 03:20:12,239
thinking consistency by customization

03:20:09,840 --> 03:20:14,239
and standardization of the information

03:20:12,239 --> 03:20:15,680
captured and github issues when they are

03:20:14,239 --> 03:20:19,600
created

03:20:15,680 --> 03:20:19,600
let's take an example of a github issue

03:20:20,239 --> 03:20:25,120
which is created using epics which is

03:20:23,120 --> 03:20:27,359
created using templates

03:20:25,120 --> 03:20:30,720
the labels are automatically included

03:20:27,359 --> 03:20:32,479
when an issue is opened using templates

03:20:30,720 --> 03:20:34,000
labels are used to classify different

03:20:32,479 --> 03:20:37,520
types of issues epic

03:20:34,000 --> 03:20:41,200
feature and others and issues can have

03:20:37,520 --> 03:20:43,840
as many labels as we want

03:20:41,200 --> 03:20:44,640
epic is focused on a specific problem

03:20:43,840 --> 03:20:47,040
statement

03:20:44,640 --> 03:20:48,000
and epic acts as a shared goal for a

03:20:47,040 --> 03:20:51,600
group of

03:20:48,000 --> 03:20:53,279
engineers working on it an epic is a

03:20:51,600 --> 03:20:56,960
group of features

03:20:53,279 --> 03:21:00,000
captured as task list inscription

03:20:56,960 --> 03:21:02,399
and task list has clickable check boxes

03:21:00,000 --> 03:21:04,560
we just go and select and unselect this

03:21:02,399 --> 03:21:06,720
check boxes

03:21:04,560 --> 03:21:08,080
to track the progress of if a feature is

03:21:06,720 --> 03:21:10,080
complete or not

03:21:08,080 --> 03:21:12,000
and these help us to track the progress

03:21:10,080 --> 03:21:16,080
easily with minimal

03:21:12,000 --> 03:21:17,840
follow-ups and if you see

03:21:16,080 --> 03:21:19,439
there are milestones set which sets the

03:21:17,840 --> 03:21:21,279
right expectation with the state

03:21:19,439 --> 03:21:24,160
stakeholders on when this epic is going

03:21:21,279 --> 03:21:27,120
to be shipped and the same epic

03:21:24,160 --> 03:21:28,160
shows up in multiple project dashboards

03:21:27,120 --> 03:21:30,319
for tracking

03:21:28,160 --> 03:21:32,399
at different management levels if you

03:21:30,319 --> 03:21:34,000
see the c chat of project dashboard is

03:21:32,399 --> 03:21:36,160
the dashboard owned by my team

03:21:34,000 --> 03:21:37,279
apart from that this epic is also

03:21:36,160 --> 03:21:40,399
getting tracked into

03:21:37,279 --> 03:21:40,399
two other dashboards

03:21:40,560 --> 03:21:46,800
moving to feature a feature acts as a

03:21:44,319 --> 03:21:49,439
unit of work for around two weeks

03:21:46,800 --> 03:21:51,359
and anything greater than two weeks is

03:21:49,439 --> 03:21:53,359
moved to different feature

03:21:51,359 --> 03:21:56,000
thereby enabling us to do work

03:21:53,359 --> 03:21:58,080
parallelization

03:21:56,000 --> 03:21:59,760
so in this way we can have multiple

03:21:58,080 --> 03:22:02,080
engineers working on the same epic and

03:21:59,760 --> 03:22:04,399
different features

03:22:02,080 --> 03:22:05,439
a feature is usually assigned to one

03:22:04,399 --> 03:22:08,080
engineer

03:22:05,439 --> 03:22:10,239
giving them an opportunity to take

03:22:08,080 --> 03:22:12,640
complete accountability to drive the

03:22:10,239 --> 03:22:15,040
feature to completion

03:22:12,640 --> 03:22:16,960
and feature is a group of tasks and

03:22:15,040 --> 03:22:18,560
similarly the way we use in epics we

03:22:16,960 --> 03:22:21,840
make use of task list to track the

03:22:18,560 --> 03:22:21,840
progress of all these tasks

03:22:22,319 --> 03:22:26,720
the best part of using task this year is

03:22:25,120 --> 03:22:27,120
we have something called definition of

03:22:26,720 --> 03:22:28,880
done

03:22:27,120 --> 03:22:30,880
and capturing a list of tasks to be

03:22:28,880 --> 03:22:33,120
completed as task list sets the right

03:22:30,880 --> 03:22:35,279
expectation with the engineer

03:22:33,120 --> 03:22:38,160
working on the feature in terms of what

03:22:35,279 --> 03:22:41,120
needs to be completed

03:22:38,160 --> 03:22:42,640
and features only show up in the team

03:22:41,120 --> 03:22:45,200
dashboard

03:22:42,640 --> 03:22:47,439
but no one is stopping them to monitor

03:22:45,200 --> 03:22:49,359
in our dashboards too

03:22:47,439 --> 03:22:51,040
and features are shipped as and when

03:22:49,359 --> 03:22:53,279
they are complete

03:22:51,040 --> 03:22:55,120
empowering the team to ship often

03:22:53,279 --> 03:22:58,160
iterate fast and encourage

03:22:55,120 --> 03:23:00,160
calculated risk taking unlike epic

03:22:58,160 --> 03:23:03,840
feature is only tracked in team level

03:23:00,160 --> 03:23:03,840
project dashboard as i mentioned

03:23:04,479 --> 03:23:09,359
is the discussion happening all the

03:23:07,600 --> 03:23:13,279
action happens in issues

03:23:09,359 --> 03:23:15,920
github issues let's take an example of

03:23:13,279 --> 03:23:18,319
a issue created in a bug bash done by

03:23:15,920 --> 03:23:20,479
the team

03:23:18,319 --> 03:23:21,520
the issue was created by a product

03:23:20,479 --> 03:23:23,359
manager

03:23:21,520 --> 03:23:25,040
putting a title in the details in the

03:23:23,359 --> 03:23:27,680
description and then

03:23:25,040 --> 03:23:29,200
a senior engineer trages the issue and

03:23:27,680 --> 03:23:31,439
the engineer

03:23:29,200 --> 03:23:32,479
questionnaire makes use of the ad

03:23:31,439 --> 03:23:36,319
mention

03:23:32,479 --> 03:23:39,920
functionality to start the collaboration

03:23:36,319 --> 03:23:41,600
from github issues ed mentioned results

03:23:39,920 --> 03:23:44,479
in sending a notification to the

03:23:41,600 --> 03:23:46,800
engineer who was mentioned

03:23:44,479 --> 03:23:48,479
and it mentions provide a flexible way

03:23:46,800 --> 03:23:50,080
to get the right people involved in the

03:23:48,479 --> 03:23:52,319
issue

03:23:50,080 --> 03:23:53,359
once the engineer gets the notification

03:23:52,319 --> 03:23:55,680
they click the link

03:23:53,359 --> 03:23:57,040
available in the notification come back

03:23:55,680 --> 03:23:59,120
to get a issue

03:23:57,040 --> 03:24:00,319
and the collaboration starts from there

03:23:59,120 --> 03:24:02,960
and if you can see

03:24:00,319 --> 03:24:04,080
the bug was closed in the same day and

03:24:02,960 --> 03:24:06,160
primarily because

03:24:04,080 --> 03:24:07,120
the entire collaboration started from

03:24:06,160 --> 03:24:10,239
github issue

03:24:07,120 --> 03:24:12,399
and apart from getting things done

03:24:10,239 --> 03:24:13,760
capturing everything at one place in

03:24:12,399 --> 03:24:16,800
github issues

03:24:13,760 --> 03:24:18,399
helps us to maintain the context and the

03:24:16,800 --> 03:24:21,600
history of actions

03:24:18,399 --> 03:24:23,600
which enables information discovery

03:24:21,600 --> 03:24:26,640
and the decisions taken can be referred

03:24:23,600 --> 03:24:28,800
in future by the way if you are

03:24:26,640 --> 03:24:31,680
wondering what all goes into the issue

03:24:28,800 --> 03:24:32,800
then literally everything is captured

03:24:31,680 --> 03:24:36,080
every detail

03:24:32,800 --> 03:24:36,640
from spec clarification design proposals

03:24:36,080 --> 03:24:39,040
design

03:24:36,640 --> 03:24:41,439
chatter meeting notes decision taken

03:24:39,040 --> 03:24:44,319
literally everything

03:24:41,439 --> 03:24:46,000
you also use discussions discussions are

03:24:44,319 --> 03:24:47,600
used for brainstorming

03:24:46,000 --> 03:24:49,760
when there are new initiatives and when

03:24:47,600 --> 03:24:54,000
we know it's going to take longer

03:24:49,760 --> 03:24:56,560
they're also used for team building like

03:24:54,000 --> 03:24:58,560
how was the weekend what were you doing

03:24:56,560 --> 03:25:00,319
what's your plan for the coming weekend

03:24:58,560 --> 03:25:02,319
and all these gets into discussion

03:25:00,319 --> 03:25:05,040
discussions are we use

03:25:02,319 --> 03:25:06,160
not only for technical but also for fun

03:25:05,040 --> 03:25:09,840
elements i'm

03:25:06,160 --> 03:25:09,840
increasing the collaboration in the team

03:25:14,640 --> 03:25:19,120
how do we keep everybody in the entire

03:25:16,640 --> 03:25:21,600
organization to be aligned on the status

03:25:19,120 --> 03:25:22,880
then we have a concept of status update

03:25:21,600 --> 03:25:26,239
comment

03:25:22,880 --> 03:25:29,120
it is just like a comment on the epic

03:25:26,239 --> 03:25:30,880
which covers the status whether it is

03:25:29,120 --> 03:25:33,600
red green or yellow towards the

03:25:30,880 --> 03:25:36,880
projected ship date

03:25:33,600 --> 03:25:38,160
apart from that we encourage having

03:25:36,880 --> 03:25:40,880
video

03:25:38,160 --> 03:25:41,600
demo video links and these demo video

03:25:40,880 --> 03:25:43,760
links

03:25:41,600 --> 03:25:46,080
can be from anywhere it could be a small

03:25:43,760 --> 03:25:48,479
working prototype coming from a

03:25:46,080 --> 03:25:49,359
developer environment or production or

03:25:48,479 --> 03:25:52,000
staging

03:25:49,359 --> 03:25:55,040
they don't need to be only collected or

03:25:52,000 --> 03:25:59,120
recorded in production

03:25:55,040 --> 03:26:01,760
and we believe in demos and not memos

03:25:59,120 --> 03:26:02,560
so the other part of standard status

03:26:01,760 --> 03:26:05,680
update

03:26:02,560 --> 03:26:06,160
is risks and mitigations this helps us

03:26:05,680 --> 03:26:08,560
to set

03:26:06,160 --> 03:26:10,160
right expectation with our stakeholders

03:26:08,560 --> 03:26:12,319
and we call out dependencies

03:26:10,160 --> 03:26:14,319
dependencies and risks that we have

03:26:12,319 --> 03:26:19,840
which can delay our shift date

03:26:14,319 --> 03:26:19,840
and we also share the mitigation plan

03:26:22,080 --> 03:26:28,479
moving to next once the design is closed

03:26:26,080 --> 03:26:29,439
the core part of the engineer who wants

03:26:28,479 --> 03:26:31,279
to go and

03:26:29,439 --> 03:26:33,439
develop and ship the product as soon as

03:26:31,279 --> 03:26:35,279
possible in the whole exercise of

03:26:33,439 --> 03:26:38,479
shipping this after coding

03:26:35,279 --> 03:26:41,120
i want to talk about the best chat ops

03:26:38,479 --> 03:26:42,319
chat ops is about conversation driven

03:26:41,120 --> 03:26:46,560
development

03:26:42,319 --> 03:26:48,479
by bringing the tools into conversation

03:26:46,560 --> 03:26:50,399
every organization or most of the

03:26:48,479 --> 03:26:51,520
organization makes use of slack and

03:26:50,399 --> 03:26:54,560
teams

03:26:51,520 --> 03:26:57,520
for day-to-day interactions in chat and

03:26:54,560 --> 03:26:58,720
chat ops is one which brings all the

03:26:57,520 --> 03:27:00,640
tools and processes

03:26:58,720 --> 03:27:03,439
into the conversation where the

03:27:00,640 --> 03:27:03,439
engineers are

03:27:06,000 --> 03:27:11,520
this is an example of a pull request

03:27:08,160 --> 03:27:11,520
created by an engineer

03:27:11,840 --> 03:27:16,800
and in this we encourage engineers to

03:27:16,239 --> 03:27:20,000
capture

03:27:16,800 --> 03:27:22,000
design changes and also user experience

03:27:20,000 --> 03:27:24,560
and if the change results in a user

03:27:22,000 --> 03:27:26,800
experience change then

03:27:24,560 --> 03:27:29,040
putting before and after experience

03:27:26,800 --> 03:27:32,080
helps the reviewers to get the context

03:27:29,040 --> 03:27:32,080
and review faster

03:27:33,520 --> 03:27:37,920
this pr is also linked to an issue and

03:27:35,840 --> 03:27:38,399
as soon as this pr is merged that issue

03:27:37,920 --> 03:27:42,319
will

03:27:38,399 --> 03:27:46,160
get automatically closed

03:27:42,319 --> 03:27:48,319
the pr is assigned to reviewers and

03:27:46,160 --> 03:27:50,239
to make sure none of the prs are getting

03:27:48,319 --> 03:27:52,720
into production without review

03:27:50,239 --> 03:27:54,080
we have branch protection rules set on

03:27:52,720 --> 03:27:57,840
our repository

03:27:54,080 --> 03:27:58,720
which helps us to ensure that every line

03:27:57,840 --> 03:28:00,399
of code

03:27:58,720 --> 03:28:02,479
getting into production is reviewed by

03:28:00,399 --> 03:28:04,720
the engineer

03:28:02,479 --> 03:28:08,160
apart from this the quality is also

03:28:04,720 --> 03:28:11,760
baked into the whole pr workflow process

03:28:08,160 --> 03:28:12,720
we leverage actions and actions help us

03:28:11,760 --> 03:28:15,120
to automate

03:28:12,720 --> 03:28:17,120
customize and execute our software

03:28:15,120 --> 03:28:20,479
development workflows

03:28:17,120 --> 03:28:23,359
these are the list of actions available

03:28:20,479 --> 03:28:25,600
in my team's repository and to give an

03:28:23,359 --> 03:28:27,840
example we use code coverage

03:28:25,600 --> 03:28:29,200
as part of our pr workflow and as soon

03:28:27,840 --> 03:28:32,160
as the pr is raised

03:28:29,200 --> 03:28:32,800
the code coverage tool runs and post the

03:28:32,160 --> 03:28:35,520
outcome

03:28:32,800 --> 03:28:37,359
of that in a tabular format and if there

03:28:35,520 --> 03:28:40,800
is a dip of even 0.5

03:28:37,359 --> 03:28:43,040
in unit test coverage then

03:28:40,800 --> 03:28:45,439
the pr even if it's approved it can't be

03:28:43,040 --> 03:28:45,439
merged

03:28:48,560 --> 03:28:54,479
okay now let's go to the pr workflow

03:28:52,640 --> 03:28:55,760
the author creates the pr and ads

03:28:54,479 --> 03:28:58,319
reviewers

03:28:55,760 --> 03:29:01,600
and then the reviewer receives the

03:28:58,319 --> 03:29:03,840
request notification on slack github app

03:29:01,600 --> 03:29:04,720
slack github app is the chat ops

03:29:03,840 --> 03:29:07,760
offering

03:29:04,720 --> 03:29:08,960
from github apart from slack we also

03:29:07,760 --> 03:29:12,720
have teams github

03:29:08,960 --> 03:29:14,640
app available in the teams marketplace

03:29:12,720 --> 03:29:17,040
so once the notification is received by

03:29:14,640 --> 03:29:18,880
the reviewer they navigate to the pr

03:29:17,040 --> 03:29:20,720
from the link in the notification

03:29:18,880 --> 03:29:22,640
reviews the pr and leaves the comment

03:29:20,720 --> 03:29:26,080
for changes

03:29:22,640 --> 03:29:26,080
and once the comments are left

03:29:26,239 --> 03:29:30,479
in this case the reviewer is asking for

03:29:28,080 --> 03:29:31,680
a couple of changes from the author

03:29:30,479 --> 03:29:34,560
and then the author receives the

03:29:31,680 --> 03:29:37,120
notification and

03:29:34,560 --> 03:29:39,120
modifies comes addresses the pr command

03:29:37,120 --> 03:29:42,160
then ed mentions the reviewer

03:29:39,120 --> 03:29:44,000
since the comments are addressed

03:29:42,160 --> 03:29:45,439
the reviewer gets a notification goes to

03:29:44,000 --> 03:29:48,560
the pr

03:29:45,439 --> 03:29:52,160
reviews the changes and approves the pr

03:29:48,560 --> 03:29:55,040
that's it and once the pr is approved

03:29:52,160 --> 03:29:56,080
the author of the pr gets a notification

03:29:55,040 --> 03:29:59,359
on the github

03:29:56,080 --> 03:30:01,600
app now what next

03:29:59,359 --> 03:30:03,760
the pr is approved code is ready to get

03:30:01,600 --> 03:30:06,319
birds deployed in production

03:30:03,760 --> 03:30:07,279
and deployment in one way is a complex

03:30:06,319 --> 03:30:09,120
process

03:30:07,279 --> 03:30:12,479
if even there is a new engineer in the

03:30:09,120 --> 03:30:16,399
team right they need to understand a lot

03:30:12,479 --> 03:30:19,439
but in github deployments are simplified

03:30:16,399 --> 03:30:22,800
right now i am going to show you

03:30:19,439 --> 03:30:25,600
the real power of chat ops the engineer

03:30:22,800 --> 03:30:26,399
in this case heads to chat ops of slack

03:30:25,600 --> 03:30:28,720
channel

03:30:26,399 --> 03:30:29,680
and delegates the work of deployment by

03:30:28,720 --> 03:30:33,520
running a simple

03:30:29,680 --> 03:30:34,319
dot deploy command the work is delegated

03:30:33,520 --> 03:30:37,920
to

03:30:34,319 --> 03:30:41,279
none other than hubot

03:30:37,920 --> 03:30:41,279
huboid is github's

03:30:42,000 --> 03:30:45,680
huboid is github's most friendly

03:30:44,880 --> 03:30:49,040
efficient

03:30:45,680 --> 03:30:51,359
and collaborative employee almost

03:30:49,040 --> 03:30:52,080
every github developer interacts with

03:30:51,359 --> 03:30:55,279
youbot

03:30:52,080 --> 03:30:59,279
literally every day multiple times

03:30:55,279 --> 03:31:01,120
and hubot is a robot we just ask the hue

03:30:59,279 --> 03:31:02,880
bot to do the deployment

03:31:01,120 --> 03:31:04,160
with a single command and the job is

03:31:02,880 --> 03:31:07,520
taken care

03:31:04,160 --> 03:31:10,479
the deployment is done what next

03:31:07,520 --> 03:31:10,479
time for a party

03:31:11,439 --> 03:31:15,200
the engineer is super happy and the

03:31:13,439 --> 03:31:17,120
engineer goes to the channel

03:31:15,200 --> 03:31:19,120
and shares the completion of the epic

03:31:17,120 --> 03:31:22,239
the team

03:31:19,120 --> 03:31:24,160
the team starts to sparkle the engineers

03:31:22,239 --> 03:31:25,600
who contributed towards team goal by

03:31:24,160 --> 03:31:28,399
shipping the epic

03:31:25,600 --> 03:31:30,479
the dot dot sparkle command that you are

03:31:28,399 --> 03:31:33,120
seeing on the screen is a hubot command

03:31:30,479 --> 03:31:33,760
used to recognize team members effort

03:31:33,120 --> 03:31:37,279
cue what

03:31:33,760 --> 03:31:40,399
not only does complex things it plays an

03:31:37,279 --> 03:31:41,600
instrumental role in bringing fun and

03:31:40,399 --> 03:31:44,800
spread joy

03:31:41,600 --> 03:31:44,800
within the organization

03:31:45,200 --> 03:31:48,319
this brings me back

03:31:48,479 --> 03:31:55,840
to how chat ops team used github for

03:31:52,840 --> 03:31:55,840
collaboration

03:31:57,760 --> 03:32:02,080
as i said earlier was an emotional

03:32:00,160 --> 03:32:04,239
journey when i think about the last year

03:32:02,080 --> 03:32:06,960
when we started in march

03:32:04,239 --> 03:32:08,399
and the team used github for

03:32:06,960 --> 03:32:11,439
collaboration

03:32:08,399 --> 03:32:15,279
and the product helped us to navigate

03:32:11,439 --> 03:32:19,359
a transition from our emotions of

03:32:15,279 --> 03:32:23,359
isolation nervousness helplessness

03:32:19,359 --> 03:32:26,800
out of control to be creative

03:32:23,359 --> 03:32:29,680
confident inquisitive amazed

03:32:26,800 --> 03:32:29,680
and joyful

03:32:30,880 --> 03:32:37,040
now let's do a quick recap

03:32:34,160 --> 03:32:40,160
here is the glimpse of github features

03:32:37,040 --> 03:32:42,399
showcased in this session

03:32:40,160 --> 03:32:43,439
embracing the right practices and

03:32:42,399 --> 03:32:46,640
processes

03:32:43,439 --> 03:32:49,279
along with these github features

03:32:46,640 --> 03:32:51,279
act as a catalyst in boosting the key

03:32:49,279 --> 03:32:53,760
elements of collaboration

03:32:51,279 --> 03:32:55,359
and creates a culture of effective and

03:32:53,760 --> 03:32:58,160
inclusive collaboration in an

03:32:55,359 --> 03:32:58,160
organization

03:32:59,840 --> 03:33:04,479
moving to the puzzle i am hoping

03:33:02,560 --> 03:33:06,560
everyone was able to

03:33:04,479 --> 03:33:10,160
crack this and post the answers either

03:33:06,560 --> 03:33:12,720
in github discussion or on twitter

03:33:10,160 --> 03:33:16,319
let me decode this for you as i said 80

03:33:12,720 --> 03:33:18,479
deployments by team in last four weeks

03:33:16,319 --> 03:33:19,520
making an average of four deployments

03:33:18,479 --> 03:33:22,239
per working day

03:33:19,520 --> 03:33:24,479
the rest of the numbers are and you're

03:33:22,239 --> 03:33:27,200
able to achieve this 80 deployments

03:33:24,479 --> 03:33:29,120
by working on 66 issues which were

03:33:27,200 --> 03:33:31,760
closed in last four weeks

03:33:29,120 --> 03:33:33,760
351 issue comments which shows the

03:33:31,760 --> 03:33:34,880
amount of collaboration we do on these

03:33:33,760 --> 03:33:37,680
issues

03:33:34,880 --> 03:33:40,000
72 pr's were raised and almost every pr

03:33:37,680 --> 03:33:42,880
lands into production

03:33:40,000 --> 03:33:47,840
253 pr comments to ensure the code is

03:33:42,880 --> 03:33:47,840
sent with high quality

03:33:48,239 --> 03:33:52,319
that's it from my side thank you

03:33:56,000 --> 03:33:59,439
oh my god satish what an amazing

03:33:58,239 --> 03:34:01,760
rendition of that

03:33:59,439 --> 03:34:02,880
one year journey hats off to you for

03:34:01,760 --> 03:34:05,760
that and what

03:34:02,880 --> 03:34:06,800
those numbers really blew my mind up

03:34:05,760 --> 03:34:09,200
right

03:34:06,800 --> 03:34:09,920
before we jump into q a we heard that

03:34:09,200 --> 03:34:13,200
you are

03:34:09,920 --> 03:34:16,080
in-house rapper at github so

03:34:13,200 --> 03:34:16,960
will you just do a small bit for us and

03:34:16,080 --> 03:34:21,120
all our viewers

03:34:16,960 --> 03:34:23,520
right away are you sure you want me to

03:34:21,120 --> 03:34:23,520
do that

03:34:24,720 --> 03:34:31,520
100 waiting for it okay i have to get in

03:34:28,560 --> 03:34:31,520
the mood first then

03:34:34,479 --> 03:34:40,239
code issues pr discussions are action

03:34:37,680 --> 03:34:41,600
code issues pr discussions are actions

03:34:40,239 --> 03:34:44,479
every feature is

03:34:41,600 --> 03:34:46,000
built with passion it mentions and

03:34:44,479 --> 03:34:49,279
notifications

03:34:46,000 --> 03:34:52,720
enables inclusive collaboration

03:34:49,279 --> 03:34:56,239
oh my future generation do check out

03:34:52,720 --> 03:34:57,680
github education code spaces is the new

03:34:56,239 --> 03:35:00,319
workstation

03:34:57,680 --> 03:35:01,359
github is developers ultimate

03:35:00,319 --> 03:35:04,640
destination

03:35:01,359 --> 03:35:04,640
ultimate destination

03:35:04,880 --> 03:35:07,840
what a drumroll

03:35:08,720 --> 03:35:16,800
yes like once more once more

03:35:12,080 --> 03:35:16,800
that was awesome satish i love it

03:35:16,960 --> 03:35:22,479
we should really yeah by the way i don't

03:35:19,040 --> 03:35:22,479
wrap i just try to rhyme

03:35:22,840 --> 03:35:27,040
lines

03:35:24,560 --> 03:35:28,880
come on it was amazing it was amazing

03:35:27,040 --> 03:35:31,200
let's submit to q a now we got a bunch

03:35:28,880 --> 03:35:31,200
for you

03:35:32,720 --> 03:35:36,840
yes i have to now get back in the zone

03:35:34,880 --> 03:35:39,520
to ask you

03:35:36,840 --> 03:35:42,000
questions

03:35:39,520 --> 03:35:43,200
okay so you talked about uh the

03:35:42,000 --> 03:35:46,080
emotional journey

03:35:43,200 --> 03:35:49,439
what was the biggest turning point there

03:35:46,080 --> 03:35:49,439
for you as well as your team

03:35:49,920 --> 03:35:55,040
yeah so if i recall it correctly to be

03:35:53,520 --> 03:35:58,160
very honest

03:35:55,040 --> 03:36:02,479
personally i was also struggling to

03:35:58,160 --> 03:36:02,479
through that phase right

03:36:02,560 --> 03:36:07,040
this was the second time in my entire

03:36:04,880 --> 03:36:09,520
professional career

03:36:07,040 --> 03:36:10,160
where i was feeling helpless and out of

03:36:09,520 --> 03:36:13,040
control

03:36:10,160 --> 03:36:13,040
to help my team

03:36:14,720 --> 03:36:22,160
and you have to think what help really

03:36:18,399 --> 03:36:24,000
it's not a big thing but i think

03:36:22,160 --> 03:36:26,640
the weekly check-ins that we started

03:36:24,000 --> 03:36:28,960
after our scrum every monday

03:36:26,640 --> 03:36:30,800
we have scrum every day right and then

03:36:28,960 --> 03:36:34,160
we started this

03:36:30,800 --> 03:36:35,600
way of interacting with folks doing a

03:36:34,160 --> 03:36:38,880
weekly check-in

03:36:35,600 --> 03:36:39,680
on mondays where we used to share with

03:36:38,880 --> 03:36:41,760
each other

03:36:39,680 --> 03:36:43,200
how everyone is go what everyone is

03:36:41,760 --> 03:36:46,080
going through

03:36:43,200 --> 03:36:46,880
just speak out and what is working for

03:36:46,080 --> 03:36:51,279
them

03:36:46,880 --> 03:36:54,080
that's it right and this whole concept

03:36:51,279 --> 03:36:56,239
made everyone realize everyone is going

03:36:54,080 --> 03:36:58,160
through the same phase we are not alone

03:36:56,239 --> 03:36:59,600
the whole world is going through this

03:36:58,160 --> 03:37:03,760
and we need to work together

03:36:59,600 --> 03:37:06,680
as a team to find out how to

03:37:03,760 --> 03:37:07,840
come out of or how to handle this

03:37:06,680 --> 03:37:10,319
unprecedented

03:37:07,840 --> 03:37:12,960
complicated and hard situation that the

03:37:10,319 --> 03:37:14,479
whole world started seeing last year

03:37:12,960 --> 03:37:16,160
so if i have to pick one thing then it

03:37:14,479 --> 03:37:17,840
was that weekly

03:37:16,160 --> 03:37:20,000
check-ins that we started doing with the

03:37:17,840 --> 03:37:20,000
team

03:37:20,960 --> 03:37:24,399
very insightful thanks for being so

03:37:22,800 --> 03:37:25,279
honest and transparently kind of

03:37:24,399 --> 03:37:27,359
bringing these

03:37:25,279 --> 03:37:28,640
and talking about these things we got

03:37:27,359 --> 03:37:30,960
one more for you

03:37:28,640 --> 03:37:31,920
what was the most challenging key

03:37:30,960 --> 03:37:34,560
element

03:37:31,920 --> 03:37:36,960
in leveling up on collaboration across

03:37:34,560 --> 03:37:36,960
the teams

03:37:37,920 --> 03:37:41,200
interesting so what i showed was eight

03:37:40,720 --> 03:37:44,399
key

03:37:41,200 --> 03:37:46,399
elements of collaboration see in

03:37:44,399 --> 03:37:47,760
simplicity collaboration means working

03:37:46,399 --> 03:37:49,840
with others

03:37:47,760 --> 03:37:51,520
but that is not that easy when we work

03:37:49,840 --> 03:37:53,200
with like 2000 people in the

03:37:51,520 --> 03:37:55,040
organization or even when we work with

03:37:53,200 --> 03:37:59,120
10 people or when we have five people at

03:37:55,040 --> 03:38:01,680
phone rights

03:37:59,120 --> 03:38:04,239
the most challenging one is always

03:38:01,680 --> 03:38:07,680
bringing in that inclusion part

03:38:04,239 --> 03:38:09,359
in the whole collaboration story

03:38:07,680 --> 03:38:12,000
that is the most difficult one we talk

03:38:09,359 --> 03:38:15,760
about diversity a lot right

03:38:12,000 --> 03:38:18,319
but if there is no inclusion

03:38:15,760 --> 03:38:20,560
it is very difficult to make the

03:38:18,319 --> 03:38:23,279
diversity successful

03:38:20,560 --> 03:38:24,560
in an environment and this is something

03:38:23,279 --> 03:38:27,840
that we achieved

03:38:24,560 --> 03:38:29,760
by writing a lot in this async mode

03:38:27,840 --> 03:38:31,520
and we started sharing and putting those

03:38:29,760 --> 03:38:34,000
in discussions issues

03:38:31,520 --> 03:38:35,840
everywhere where the team was able to

03:38:34,000 --> 03:38:38,560
see who is doing what

03:38:35,840 --> 03:38:40,399
and they had an opportunity to come back

03:38:38,560 --> 03:38:43,199
read about the proposals

03:38:40,399 --> 03:38:44,880
share their thoughts and contribute and

03:38:43,199 --> 03:38:48,319
share the diverse opinions

03:38:44,880 --> 03:38:51,520
in this way as a team

03:38:48,319 --> 03:38:55,840
able to come to a inclusive

03:38:51,520 --> 03:38:55,840
and conclusive conclusion

03:38:58,399 --> 03:39:02,560
but it's a journey we are fully not

03:39:00,640 --> 03:39:05,760
there yet we are still learning

03:39:02,560 --> 03:39:09,439
it's not that we are perfect but i'm

03:39:05,760 --> 03:39:12,479
extremely happy to see the graph

03:39:09,439 --> 03:39:14,640
the way it went up and you're still

03:39:12,479 --> 03:39:17,439
learning and there's a lot to learn

03:39:14,640 --> 03:39:18,720
and github is the way to make use of all

03:39:17,439 --> 03:39:22,720
these in the right way

03:39:18,720 --> 03:39:24,960
to make everything successful i'm joyful

03:39:22,720 --> 03:39:24,960
too

03:39:25,600 --> 03:39:29,359
thank you sateesh thank you again for

03:39:27,520 --> 03:39:32,479
your vulnerability and

03:39:29,359 --> 03:39:34,000
sharing from your heart uh this was

03:39:32,479 --> 03:39:36,239
really insightful and

03:39:34,000 --> 03:39:37,120
again things that everybody around us

03:39:36,239 --> 03:39:39,760
can learn

03:39:37,120 --> 03:39:40,640
as well again thank you for a great

03:39:39,760 --> 03:39:43,439
session

03:39:40,640 --> 03:39:43,680
and remember folks satish will be with

03:39:43,439 --> 03:39:45,760
us

03:39:43,680 --> 03:39:47,760
in discussions so you can have your

03:39:45,760 --> 03:39:50,319
heart to heart chats with him

03:39:47,760 --> 03:39:51,120
there as well and ask him all the

03:39:50,319 --> 03:39:54,560
questions

03:39:51,120 --> 03:39:57,760
folks discuss with satish on discussions

03:39:54,560 --> 03:40:05,840
thank you thank you again satish bye-bye

03:39:57,760 --> 03:40:05,840
thank you namaste namaste

03:40:09,359 --> 03:40:16,080
okay here we are the final session of

03:40:12,880 --> 03:40:19,120
github satellite india 2021

03:40:16,080 --> 03:40:22,960
hope you enjoyed it as much as

03:40:19,120 --> 03:40:25,120
we enjoyed hosting you all thanks a lot

03:40:22,960 --> 03:40:26,160
thank you very very much for sharing

03:40:25,120 --> 03:40:28,800
your comments

03:40:26,160 --> 03:40:30,960
talking to us on all the platforms and

03:40:28,800 --> 03:40:33,279
hanging out with us for these two days

03:40:30,960 --> 03:40:35,199
and a huge shout out to current and

03:40:33,279 --> 03:40:37,120
anisha on the oss channel

03:40:35,199 --> 03:40:38,800
who equally engaged you and brought so

03:40:37,120 --> 03:40:41,520
much insightful conversations

03:40:38,800 --> 03:40:43,359
to you all and an extra special shout

03:40:41,520 --> 03:40:44,000
out for all the guests and all the

03:40:43,359 --> 03:40:46,399
speakers

03:40:44,000 --> 03:40:47,359
who came across engaged with you all and

03:40:46,399 --> 03:40:51,199
brought such

03:40:47,359 --> 03:40:51,199
knowledge of nuggets for all of us

03:40:51,439 --> 03:40:58,960
last two days has been so much fun

03:40:54,479 --> 03:41:02,000
like so many months and weeks of work

03:40:58,960 --> 03:41:05,040
in in such awesome joy

03:41:02,000 --> 03:41:08,000
experience like mohit said hope you

03:41:05,040 --> 03:41:09,840
folks enjoyed as much as we did and to

03:41:08,000 --> 03:41:12,560
adding to the thank you notes mohit

03:41:09,840 --> 03:41:14,640
i want to say a big thank you to you for

03:41:12,560 --> 03:41:17,359
being the best co-host

03:41:14,640 --> 03:41:18,239
everybody backstage thank you so much

03:41:17,359 --> 03:41:22,000
lauren

03:41:18,239 --> 03:41:22,640
brian hayley tammy thank you this was

03:41:22,000 --> 03:41:25,279
not been

03:41:22,640 --> 03:41:26,000
fun without you folks so thank you so

03:41:25,279 --> 03:41:29,760
much

03:41:26,000 --> 03:41:32,399
for that and

03:41:29,760 --> 03:41:32,960
yes and uh don't worry about all the

03:41:32,399 --> 03:41:35,279
content

03:41:32,960 --> 03:41:37,439
and thank you for my awesome goodies as

03:41:35,279 --> 03:41:37,439
well

03:41:37,680 --> 03:41:42,880
absolutely absolutely and don't worry

03:41:41,040 --> 03:41:44,800
all the content that you watched here if

03:41:42,880 --> 03:41:47,359
you want to relive any of the movement

03:41:44,800 --> 03:41:48,319
you can go to kitab satellite.com and

03:41:47,359 --> 03:41:50,399
all these

03:41:48,319 --> 03:41:52,160
beautiful movements are right here for

03:41:50,399 --> 03:41:53,199
you any whenever you want you can

03:41:52,160 --> 03:41:55,439
consume them

03:41:53,199 --> 03:41:57,600
and remember we really want to hear from

03:41:55,439 --> 03:41:59,359
you and want to improve on areas

03:41:57,600 --> 03:42:02,000
do better than what we did this time so

03:41:59,359 --> 03:42:04,080
go fill out the attendee survey

03:42:02,000 --> 03:42:06,319
it's right here for you to share your

03:42:04,080 --> 03:42:08,560
thoughts with us

03:42:06,319 --> 03:42:11,120
and share with us on twitter we are

03:42:08,560 --> 03:42:11,120
continuing

03:42:17,120 --> 03:42:23,920
and we'll come back to you now

03:42:20,560 --> 03:42:25,120
let's go to the last session of the day

03:42:23,920 --> 03:42:28,319
and it's time

03:42:25,120 --> 03:42:31,600
for the final session by manish

03:42:28,319 --> 03:42:36,000
sharma general manager of github

03:42:31,600 --> 03:42:36,560
india avid reader in 2005 he actually

03:42:36,000 --> 03:42:40,600
started

03:42:36,560 --> 03:42:43,439
the first online book library called

03:42:40,600 --> 03:42:45,520
bookmebook.com and to continue with the

03:42:43,439 --> 03:42:46,479
passion of reading books and sharing it

03:42:45,520 --> 03:42:49,600
with everybody

03:42:46,479 --> 03:42:50,640
in every walk of life manisha is based

03:42:49,600 --> 03:42:54,160
in delhi

03:42:50,640 --> 03:42:58,000
and enjoys learning guitar as well as

03:42:54,160 --> 03:43:00,880
video games so manish

03:42:58,000 --> 03:43:02,560
over to you one second mohit manish is

03:43:00,880 --> 03:43:03,920
your boss do you want to share a snippet

03:43:02,560 --> 03:43:06,160
about him

03:43:03,920 --> 03:43:08,479
oh absolutely i'll share a small secret

03:43:06,160 --> 03:43:11,279
manish is a coffee connoisseur

03:43:08,479 --> 03:43:13,120
from what means to use how to crush them

03:43:11,279 --> 03:43:15,439
how to brew the best coffee

03:43:13,120 --> 03:43:17,040
you can ask him about anything under the

03:43:15,439 --> 03:43:18,960
sky about coffees

03:43:17,040 --> 03:43:20,080
so manish looking forward to hearing

03:43:18,960 --> 03:43:35,840
from you

03:43:20,080 --> 03:43:35,840
take it away manish over to you

03:43:38,560 --> 03:43:44,000
you've been excellent hosts um i'm sure

03:43:41,920 --> 03:43:46,239
everybody enjoyed the last two days

03:43:44,000 --> 03:43:47,040
and all the fancy stuff that you've been

03:43:46,239 --> 03:43:50,560
doing

03:43:47,040 --> 03:43:52,239
i've discovered two secrets one mohit is

03:43:50,560 --> 03:43:54,960
a great bhangra dancer

03:43:52,239 --> 03:43:57,120
so you know stay tuned for more meetups

03:43:54,960 --> 03:43:59,520
where you will see him in action

03:43:57,120 --> 03:44:00,640
and i also found out that karan loves to

03:43:59,520 --> 03:44:03,279
play holi

03:44:00,640 --> 03:44:03,760
so i'm sure it was fun for all of you

03:44:03,279 --> 03:44:05,520
but

03:44:03,760 --> 03:44:07,680
most of all thank you to each and every

03:44:05,520 --> 03:44:08,880
one of you for being with us over the

03:44:07,680 --> 03:44:11,359
last two days

03:44:08,880 --> 03:44:12,479
as we celebrated the india developer

03:44:11,359 --> 03:44:15,920
community

03:44:12,479 --> 03:44:17,600
it has been a pleasure uh serving all of

03:44:15,920 --> 03:44:19,680
you over the last one year

03:44:17,600 --> 03:44:21,920
and we are overwhelmed with all the love

03:44:19,680 --> 03:44:24,319
the engagement that you've given

03:44:21,920 --> 03:44:26,239
the session started yesterday with erica

03:44:24,319 --> 03:44:26,640
sharing with all of us how we've grown

03:44:26,239 --> 03:44:29,439
to

03:44:26,640 --> 03:44:31,520
more than 5.8 million developers from

03:44:29,439 --> 03:44:34,479
india who call github their home

03:44:31,520 --> 03:44:36,399
it is super super exciting to see that

03:44:34,479 --> 03:44:37,199
we added 1.8 million over the last one

03:44:36,399 --> 03:44:38,960
year

03:44:37,199 --> 03:44:40,800
but what's more exciting and current

03:44:38,960 --> 03:44:43,680
talked about how i always love

03:44:40,800 --> 03:44:44,000
anything open source has been seeing

03:44:43,680 --> 03:44:46,239
that

03:44:44,000 --> 03:44:48,000
indian developers have been driving the

03:44:46,239 --> 03:44:48,720
most engagement on open source over the

03:44:48,000 --> 03:44:52,000
last one year

03:44:48,720 --> 03:44:55,359
on github this is just fascinating

03:44:52,000 --> 03:44:57,439
you know i come from a very uh different

03:44:55,359 --> 03:44:59,199
era i i started coding in the last

03:44:57,439 --> 03:44:59,680
century i always like to say this

03:44:59,199 --> 03:45:01,760
because

03:44:59,680 --> 03:45:03,040
i keep people guessing you know what my

03:45:01,760 --> 03:45:06,479
real age is

03:45:03,040 --> 03:45:07,840
um but it's so great to see the

03:45:06,479 --> 03:45:10,239
changes that have been happening in the

03:45:07,840 --> 03:45:11,279
ecosystem with young developers like

03:45:10,239 --> 03:45:13,359
yourselves

03:45:11,279 --> 03:45:14,880
innovating and contributing back to the

03:45:13,359 --> 03:45:17,920
open source community

03:45:14,880 --> 03:45:20,000
so we thank you for all the support

03:45:17,920 --> 03:45:21,600
the last two days have been great uh i

03:45:20,000 --> 03:45:24,160
know it has been

03:45:21,600 --> 03:45:25,680
a power pack session with so many

03:45:24,160 --> 03:45:28,000
content coming your way

03:45:25,680 --> 03:45:29,920
but as karen mentioned all of these 22

03:45:28,000 --> 03:45:32,399
sessions will be available for you

03:45:29,920 --> 03:45:33,359
on demand for you to go and check

03:45:32,399 --> 03:45:36,239
whenever you

03:45:33,359 --> 03:45:37,279
feel comfortable or have time to do so

03:45:36,239 --> 03:45:40,399
once again

03:45:37,279 --> 03:45:42,479
thank you so much

03:45:40,399 --> 03:45:44,319
i also want to talk about what shanku

03:45:42,479 --> 03:45:46,560
and the engineering team

03:45:44,319 --> 03:45:48,319
took you through in the morning there is

03:45:46,560 --> 03:45:48,880
a lot of convergence that is happening

03:45:48,319 --> 03:45:50,960
across

03:45:48,880 --> 03:45:51,920
security across development

03:45:50,960 --> 03:45:54,640
collaboration

03:45:51,920 --> 03:45:56,239
especially in today's world where

03:45:54,640 --> 03:45:59,279
everybody is distributed

03:45:56,239 --> 03:46:00,239
we have so many customers from india who

03:45:59,279 --> 03:46:02,800
are really driving

03:46:00,239 --> 03:46:04,319
innovation and leveraging github for

03:46:02,800 --> 03:46:05,439
getting their teams to collaborate and

03:46:04,319 --> 03:46:09,120
build software

03:46:05,439 --> 03:46:10,640
and these customers are all of all sizes

03:46:09,120 --> 03:46:13,040
whether large or small

03:46:10,640 --> 03:46:14,479
from any industry whether they are

03:46:13,040 --> 03:46:16,399
companies that are transforming into

03:46:14,479 --> 03:46:17,760
software companies or bond digital

03:46:16,399 --> 03:46:21,760
companies

03:46:17,760 --> 03:46:23,920
and one such large organization is

03:46:21,760 --> 03:46:25,600
cognition needs no introduction they are

03:46:23,920 --> 03:46:28,479
one of the largest

03:46:25,600 --> 03:46:30,080
developer companies in the world with

03:46:28,479 --> 03:46:34,000
teams and customers

03:46:30,080 --> 03:46:36,720
across the globe uh that they service

03:46:34,000 --> 03:46:37,359
let's hear from hari who is the avp

03:46:36,720 --> 03:46:40,560
enterprise

03:46:37,359 --> 03:46:42,319
architect at coppesant on how they are

03:46:40,560 --> 03:46:46,319
driving transformation

03:46:42,319 --> 03:46:46,319
and developer productivity using github

03:46:46,640 --> 03:46:53,680
hello everyone cognizant's internal

03:46:50,399 --> 03:46:56,239
i.t team serves one of the largest

03:46:53,680 --> 03:46:57,040
enterprises in the world with 300 000

03:46:56,239 --> 03:47:00,920
employees

03:46:57,040 --> 03:47:03,600
worldwide it's a fortune 192 company

03:47:00,920 --> 03:47:06,319
16.7 billion dollars in revenue

03:47:03,600 --> 03:47:10,319
companies critical business operations

03:47:06,319 --> 03:47:12,880
runs on internal systems and processes

03:47:10,319 --> 03:47:14,160
as part of the cognizant's digital

03:47:12,880 --> 03:47:16,800
insight strategy

03:47:14,160 --> 03:47:17,680
which is about transforming the internal

03:47:16,800 --> 03:47:20,080
processes

03:47:17,680 --> 03:47:21,840
and internal systems it is based on

03:47:20,080 --> 03:47:24,800
three pronged approach

03:47:21,840 --> 03:47:26,399
first is modernizing employee experience

03:47:24,800 --> 03:47:29,120
second is building a strong

03:47:26,399 --> 03:47:32,080
data and integration foundation third is

03:47:29,120 --> 03:47:35,680
modernizing our application ecosystem

03:47:32,080 --> 03:47:37,279
on enterprises cloud first mobile first

03:47:35,680 --> 03:47:40,080
strategy

03:47:37,279 --> 03:47:41,120
we have to be kind of very nimble and

03:47:40,080 --> 03:47:44,800
agile

03:47:41,120 --> 03:47:46,000
in our processes and we also need a

03:47:44,800 --> 03:47:48,160
cultural shift

03:47:46,000 --> 03:47:49,840
in terms of how we deliver our products

03:47:48,160 --> 03:47:52,080
and services

03:47:49,840 --> 03:47:53,199
our entire engineering processes and

03:47:52,080 --> 03:47:57,120
tools have undergone

03:47:53,199 --> 03:47:59,199
transformation using github and devops

03:47:57,120 --> 03:48:00,560
hundreds of software professionals now

03:47:59,199 --> 03:48:03,359
on github

03:48:00,560 --> 03:48:05,040
the conversation is shifting towards how

03:48:03,359 --> 03:48:07,279
do i engineer the code

03:48:05,040 --> 03:48:10,640
how do i internalize the best practices

03:48:07,279 --> 03:48:10,640
available in the industry

03:48:11,840 --> 03:48:15,840
thank you hari let me now talk about

03:48:14,319 --> 03:48:18,319
some of the programs that

03:48:15,840 --> 03:48:19,840
erika mentioned and i'm sure all of you

03:48:18,319 --> 03:48:22,800
are as excited as

03:48:19,840 --> 03:48:24,720
i am when we announced it yesterday and

03:48:22,800 --> 03:48:25,920
these programs are really going to drive

03:48:24,720 --> 03:48:28,080
the engagement for

03:48:25,920 --> 03:48:29,359
developer communities across students

03:48:28,080 --> 03:48:32,319
startups

03:48:29,359 --> 03:48:33,439
and the open source community many of

03:48:32,319 --> 03:48:35,520
you have already

03:48:33,439 --> 03:48:37,040
started applying for these programs i am

03:48:35,520 --> 03:48:38,800
so overwhelmed

03:48:37,040 --> 03:48:40,319
by the mails that we've received from

03:48:38,800 --> 03:48:42,560
each and every one of you over the last

03:48:40,319 --> 03:48:45,199
24 hours since we announced this

03:48:42,560 --> 03:48:46,160
i do request you to leverage these

03:48:45,199 --> 03:48:48,640
programs and

03:48:46,160 --> 03:48:50,479
give feedback a lot of these programs we

03:48:48,640 --> 03:48:51,920
have created over the last one year

03:48:50,479 --> 03:48:53,040
based on the feedback that each and

03:48:51,920 --> 03:48:56,160
every one of you

03:48:53,040 --> 03:48:57,760
gave on what you expect from github

03:48:56,160 --> 03:48:59,520
we are really looking forward to

03:48:57,760 --> 03:49:00,080
feedback coming our way for creating

03:48:59,520 --> 03:49:02,000
more such

03:49:00,080 --> 03:49:03,840
programs to drive the engagement with

03:49:02,000 --> 03:49:06,800
developers like yourself

03:49:03,840 --> 03:49:07,439
and the whole purpose of this is you

03:49:06,800 --> 03:49:10,399
know to get

03:49:07,439 --> 03:49:11,760
more and more developers on the platform

03:49:10,399 --> 03:49:14,720
i like it

03:49:11,760 --> 03:49:15,520
there is a huge generational shift

03:49:14,720 --> 03:49:18,800
that's happening

03:49:15,520 --> 03:49:20,399
in the industry today with more than 500

03:49:18,800 --> 03:49:20,960
million applications that are slated to

03:49:20,399 --> 03:49:24,239
be written

03:49:20,960 --> 03:49:25,359
by 2023 which is more than the last 40

03:49:24,239 --> 03:49:27,760
years combined

03:49:25,359 --> 03:49:28,880
i think it's a great opportunity for

03:49:27,760 --> 03:49:31,120
open source

03:49:28,880 --> 03:49:32,720
for students who are stepping into the

03:49:31,120 --> 03:49:35,279
software development world

03:49:32,720 --> 03:49:37,359
and also for enterprises to leverage

03:49:35,279 --> 03:49:39,520
github to really build software

03:49:37,359 --> 03:49:41,359
and that's been our purpose ever since

03:49:39,520 --> 03:49:42,960
we started our operations last year to

03:49:41,359 --> 03:49:45,600
serve you better

03:49:42,960 --> 03:49:47,680
to be closer to what you would require

03:49:45,600 --> 03:49:49,439
from a platform like github as we push

03:49:47,680 --> 03:49:52,000
the boundaries of

03:49:49,439 --> 03:49:53,439
developing applications to move human

03:49:52,000 --> 03:49:56,080
progress

03:49:53,439 --> 03:49:57,439
so really excited to be here and in a

03:49:56,080 --> 03:49:59,600
way it's been great

03:49:57,439 --> 03:50:01,279
um doing this virtual session with you i

03:49:59,600 --> 03:50:02,000
can share that you know last year when

03:50:01,279 --> 03:50:05,520
we were

03:50:02,000 --> 03:50:08,000
kicking off um our operations we did our

03:50:05,520 --> 03:50:09,279
kickoff on valentine's day 14 february

03:50:08,000 --> 03:50:11,439
03:50:09,279 --> 03:50:13,040
it's so vivid in my mind uh it feels

03:50:11,439 --> 03:50:14,080
like 10 years but it's only been one

03:50:13,040 --> 03:50:17,040
year

03:50:14,080 --> 03:50:17,920
we were you know expecting 250 300

03:50:17,040 --> 03:50:20,399
people to show up

03:50:17,920 --> 03:50:22,319
and we had 2 2000 people show up at the

03:50:20,399 --> 03:50:25,040
event and it was a physical event

03:50:22,319 --> 03:50:25,680
and we were overwhelmed by the love that

03:50:25,040 --> 03:50:28,399
we got

03:50:25,680 --> 03:50:30,160
from developers and i'm sure by now

03:50:28,399 --> 03:50:31,840
doing this virtual we were able to reach

03:50:30,160 --> 03:50:34,000
out to more and more developers

03:50:31,840 --> 03:50:36,000
across the length and breadth of india

03:50:34,000 --> 03:50:37,600
so really excited and i'm

03:50:36,000 --> 03:50:40,399
thankful that you were able to spend

03:50:37,600 --> 03:50:43,359
that time with us

03:50:40,399 --> 03:50:44,319
as a next step i would request that each

03:50:43,359 --> 03:50:46,800
of you

03:50:44,319 --> 03:50:48,560
follow our repository on github this is

03:50:46,800 --> 03:50:49,520
a public repository that we've created

03:50:48,560 --> 03:50:51,520
to share

03:50:49,520 --> 03:50:52,800
more details about three programs that

03:50:51,520 --> 03:50:55,600
we've announced

03:50:52,800 --> 03:50:57,840
and also on an ongoing basis we will

03:50:55,600 --> 03:51:00,000
keep sharing meetups hackathons

03:50:57,840 --> 03:51:02,080
more programs and you can use the

03:51:00,000 --> 03:51:04,800
discussion boards to interact with

03:51:02,080 --> 03:51:05,279
the india team on how we can engage with

03:51:04,800 --> 03:51:08,000
you

03:51:05,279 --> 03:51:08,000
a lot better

03:51:08,479 --> 03:51:11,840
i think closing satellite would be

03:51:09,920 --> 03:51:13,520
incomplete

03:51:11,840 --> 03:51:16,239
without me talking about my favorite

03:51:13,520 --> 03:51:19,279
moment which is you know yoga cat

03:51:16,239 --> 03:51:21,920
which we've unveiled for india i i just

03:51:19,279 --> 03:51:23,920
i just love this mona of car and i'm

03:51:21,920 --> 03:51:26,640
sure you can see the details in the

03:51:23,920 --> 03:51:27,760
lotus petals that show the git

03:51:26,640 --> 03:51:30,800
operations

03:51:27,760 --> 03:51:33,359
um for a community connected by code

03:51:30,800 --> 03:51:34,319
like india this is i think a wonderful

03:51:33,359 --> 03:51:36,720
representation

03:51:34,319 --> 03:51:38,239
of you know what github is and what it

03:51:36,720 --> 03:51:40,800
means for india

03:51:38,239 --> 03:51:42,479
thank you very much everybody i wish you

03:51:40,800 --> 03:51:44,720
a very happy holi

03:51:42,479 --> 03:51:46,560
um for those who are going to be

03:51:44,720 --> 03:51:47,279
attending the workshop all the best i

03:51:46,560 --> 03:51:49,359
hope you

03:51:47,279 --> 03:51:51,760
have a great time learning from our

03:51:49,359 --> 03:51:54,960
engineering team on how to use

03:51:51,760 --> 03:51:59,840
github in a more powerful thing

03:51:54,960 --> 03:51:59,840
thank you and have a good weekend

03:52:24,840 --> 03:52:27,840
so

03:52:52,840 --> 03:52:55,840
so

03:53:06,840 --> 03:53:09,840
so

03:53:46,880 --> 03:53:48,960

YouTube URL: https://www.youtube.com/watch?v=YXBFTDdf1-E


