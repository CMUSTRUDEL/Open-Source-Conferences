Title: GitHub Satellite India 2021 - From right to left: Security and secure development
Publication date: 2021-03-28
Playlist: GitHub Satellite India 2021 - DevOps: Day 1
Description: 
	Presented by Nickolas Means, Director of Engineering, Supply Chain Security @ GitHub

As security is becoming increasingly critical to software, secure development and “shifting-left” is also becoming more important. In this session, Nickolas Means of GitHub will walk you through best practices of secure development. He'll also discuss how GitHub’s code-scanning, secret-scanning, and advanced security can help you build more secure software.

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:01,120 --> 00:00:04,879
with that nicholas take it away

00:00:06,160 --> 00:00:10,160
[Music]

00:00:08,400 --> 00:00:11,599
hey good morning everyone it is an

00:00:10,160 --> 00:00:14,240
absolute pleasure to be with you this

00:00:11,599 --> 00:00:15,759
morning at github satellite india

00:00:14,240 --> 00:00:17,119
like divya said my name is nicholas

00:00:15,759 --> 00:00:19,199
means i'm director of engineering for

00:00:17,119 --> 00:00:21,359
supply chain security at github

00:00:19,199 --> 00:00:23,119
uh i'm joining you this morning from

00:00:21,359 --> 00:00:23,760
austin texas in the united states where

00:00:23,119 --> 00:00:26,960
it's about

00:00:23,760 --> 00:00:28,840
30 minutes past midnight so i'm doing my

00:00:26,960 --> 00:00:30,000
best to bring that late night energy for

00:00:28,840 --> 00:00:33,600
y'all

00:00:30,000 --> 00:00:36,079
um i i hate to be this obvious

00:00:33,600 --> 00:00:37,360
but a talk about software security in

00:00:36,079 --> 00:00:39,680
00:00:37,360 --> 00:00:40,960
almost has to start by talking about

00:00:39,680 --> 00:00:42,879
solar gate

00:00:40,960 --> 00:00:44,879
the breach of secure systems worldwide

00:00:42,879 --> 00:00:46,800
through a supply chain attack

00:00:44,879 --> 00:00:49,039
malicious actors inserted code into a

00:00:46,800 --> 00:00:51,039
legitimate solarwinds library

00:00:49,039 --> 00:00:52,559
and used as a backdoor into systems

00:00:51,039 --> 00:00:54,079
around the world as the vulnerable

00:00:52,559 --> 00:00:55,039
library was installed via software

00:00:54,079 --> 00:00:57,520
update

00:00:55,039 --> 00:00:59,359
now this was a huge incident it got a

00:00:57,520 --> 00:01:02,000
ton of media coverage

00:00:59,359 --> 00:01:04,000
but the reality is that most software

00:01:02,000 --> 00:01:06,000
vulnerability incidents aren't nearly

00:01:04,000 --> 00:01:08,720
this visible

00:01:06,000 --> 00:01:11,200
in fact you probably have one waiting to

00:01:08,720 --> 00:01:12,960
happen in your code base right now

00:01:11,200 --> 00:01:14,400
according to the varicode state of

00:01:12,960 --> 00:01:18,080
security report

00:01:14,400 --> 00:01:20,880
83 percent of applications have at least

00:01:18,080 --> 00:01:22,799
one security vulnerability now what this

00:01:20,880 --> 00:01:24,080
means is if your company maintains one

00:01:22,799 --> 00:01:26,240
application

00:01:24,080 --> 00:01:27,280
you've got a four in five chance that

00:01:26,240 --> 00:01:29,759
it's got at least

00:01:27,280 --> 00:01:31,840
one vulnerability that a dedicated

00:01:29,759 --> 00:01:33,119
hacker could find and exploit

00:01:31,840 --> 00:01:35,439
if you maintain more than one

00:01:33,119 --> 00:01:38,799
application your odds are nearly

00:01:35,439 --> 00:01:40,400
100 so if you're not doing something to

00:01:38,799 --> 00:01:41,439
find those security vulnerabilities and

00:01:40,400 --> 00:01:44,560
mitigate them

00:01:41,439 --> 00:01:46,560
you're putting your users at risk

00:01:44,560 --> 00:01:48,320
and it turns out that developers

00:01:46,560 --> 00:01:50,159
introduce security vulnerabilities at a

00:01:48,320 --> 00:01:51,759
fairly consistent rate

00:01:50,159 --> 00:01:53,680
relative to the number of lines of code

00:01:51,759 --> 00:01:55,280
we create now

00:01:53,680 --> 00:01:57,280
to be clear this doesn't mean that

00:01:55,280 --> 00:01:59,119
you're a bad developer

00:01:57,280 --> 00:02:00,640
it just shows that creating secure

00:01:59,119 --> 00:02:03,040
software is hard

00:02:00,640 --> 00:02:04,960
i mean think about it to create

00:02:03,040 --> 00:02:08,319
perfectly secure software

00:02:04,960 --> 00:02:10,399
you have to be right 100 of the time

00:02:08,319 --> 00:02:12,319
to introduce a vulnerability you only

00:02:10,399 --> 00:02:14,239
have to be wrong once

00:02:12,319 --> 00:02:15,680
multiply these odds across an entire

00:02:14,239 --> 00:02:17,440
software development team

00:02:15,680 --> 00:02:18,879
and you start to see the scope of the

00:02:17,440 --> 00:02:22,720
problem

00:02:18,879 --> 00:02:24,160
so what do we do well again from the

00:02:22,720 --> 00:02:26,000
state of the octavers report

00:02:24,160 --> 00:02:28,720
we have some good evidence that teams

00:02:26,000 --> 00:02:31,040
that adopt devsecops practices

00:02:28,720 --> 00:02:32,720
significantly reduce the amount of time

00:02:31,040 --> 00:02:33,760
it takes them to remediate security

00:02:32,720 --> 00:02:36,879
vulnerabilities

00:02:33,760 --> 00:02:38,800
in their code base specifically

00:02:36,879 --> 00:02:41,120
teams that run security scans as part of

00:02:38,800 --> 00:02:45,440
their everyday development practices

00:02:41,120 --> 00:02:47,360
find and fix vulnerabilities faster

00:02:45,440 --> 00:02:49,040
now if we operate with the assumption

00:02:47,360 --> 00:02:50,000
that we're going to introduce security

00:02:49,040 --> 00:02:51,680
vulnerabilities into

00:02:50,000 --> 00:02:53,519
our code because they're almost

00:02:51,680 --> 00:02:56,400
impossible to avoid

00:02:53,519 --> 00:02:58,800
then this metric mean time to remediate

00:02:56,400 --> 00:03:00,400
becomes the one that we care about

00:02:58,800 --> 00:03:02,080
if we're going to inadvertently

00:03:00,400 --> 00:03:04,239
introduce vulnerabilities

00:03:02,080 --> 00:03:07,280
then the important thing is finding and

00:03:04,239 --> 00:03:07,280
fixing them quickly

00:03:07,519 --> 00:03:12,000
so how do we increase the speed at which

00:03:09,440 --> 00:03:14,560
we find and fix vulnerabilities

00:03:12,000 --> 00:03:15,519
well we shift our security practices

00:03:14,560 --> 00:03:19,120
left

00:03:15,519 --> 00:03:21,040
now what does that mean well let's take

00:03:19,120 --> 00:03:22,560
a look at a fairly typical

00:03:21,040 --> 00:03:24,080
feature development timeline for a

00:03:22,560 --> 00:03:25,440
software team

00:03:24,080 --> 00:03:27,280
you kick off a feature with some

00:03:25,440 --> 00:03:27,840
planning and some design work you build

00:03:27,280 --> 00:03:29,680
it

00:03:27,840 --> 00:03:31,440
you test it and then if you have a

00:03:29,680 --> 00:03:32,000
security team look at your feature at

00:03:31,440 --> 00:03:34,480
all

00:03:32,000 --> 00:03:35,920
it happens right before launch after the

00:03:34,480 --> 00:03:37,920
feature is already built

00:03:35,920 --> 00:03:39,680
and when it's extremely expensive to

00:03:37,920 --> 00:03:41,280
make a change

00:03:39,680 --> 00:03:43,040
because it's so expensive to make a

00:03:41,280 --> 00:03:45,440
change only the biggest

00:03:43,040 --> 00:03:46,080
problems get fixed before launch which

00:03:45,440 --> 00:03:49,040
means

00:03:46,080 --> 00:03:50,239
inevitably you find vulnerabilities

00:03:49,040 --> 00:03:52,799
after your feature has

00:03:50,239 --> 00:03:54,239
already been deployed you've exposed

00:03:52,799 --> 00:03:56,159
yourself to the vulnerability

00:03:54,239 --> 00:03:57,840
and generated costly remediation work

00:03:56,159 --> 00:04:01,280
that you now have to take care of at the

00:03:57,840 --> 00:04:05,760
expense of feature development

00:04:01,280 --> 00:04:05,760
so what's different when we shift left

00:04:06,000 --> 00:04:09,519
well first you need to give your

00:04:07,599 --> 00:04:11,040
development teams tools to help them

00:04:09,519 --> 00:04:14,159
spot security problems

00:04:11,040 --> 00:04:16,239
early in the development process github

00:04:14,159 --> 00:04:18,000
has focused on building security tools

00:04:16,239 --> 00:04:19,600
to empower developers

00:04:18,000 --> 00:04:21,120
to discover issues early in the

00:04:19,600 --> 00:04:22,560
development process

00:04:21,120 --> 00:04:26,240
and i'll talk more about how you can

00:04:22,560 --> 00:04:26,240
leverage those tools in just a moment

00:04:26,400 --> 00:04:30,160
second you need to move your security

00:04:29,040 --> 00:04:32,479
review process from

00:04:30,160 --> 00:04:35,120
after the feature is built and tested to

00:04:32,479 --> 00:04:36,960
much earlier in the process

00:04:35,120 --> 00:04:38,720
you want your security team to be part

00:04:36,960 --> 00:04:39,680
of your feature planning process so they

00:04:38,720 --> 00:04:42,160
can help you design

00:04:39,680 --> 00:04:43,040
security into the feature as you build

00:04:42,160 --> 00:04:44,880
it

00:04:43,040 --> 00:04:46,479
it's much less of a review and much more

00:04:44,880 --> 00:04:47,919
of a collaboration

00:04:46,479 --> 00:04:49,840
in contrast to the more traditional

00:04:47,919 --> 00:04:50,960
model where security is one more hurdle

00:04:49,840 --> 00:04:53,040
that you need to clear

00:04:50,960 --> 00:04:55,440
to get your feature to production or

00:04:53,040 --> 00:04:57,280
worse where security comes along after a

00:04:55,440 --> 00:04:58,639
feature is already launched and demands

00:04:57,280 --> 00:05:01,360
changes

00:04:58,639 --> 00:05:04,080
this security consultation model is such

00:05:01,360 --> 00:05:05,840
an empowering way for developers to work

00:05:04,080 --> 00:05:07,600
and it sets your developers and security

00:05:05,840 --> 00:05:09,440
engineers up for a productive

00:05:07,600 --> 00:05:11,759
collaborative relationship instead of a

00:05:09,440 --> 00:05:13,440
contentious one

00:05:11,759 --> 00:05:15,600
now these changes in tooling and

00:05:13,440 --> 00:05:17,600
practices mean that you're much more

00:05:15,600 --> 00:05:20,479
likely to find security problems

00:05:17,600 --> 00:05:21,280
early in the feature life cycle like we

00:05:20,479 --> 00:05:23,360
said earlier

00:05:21,280 --> 00:05:24,960
even though it's largely impossible to

00:05:23,360 --> 00:05:26,400
avoid inadvertently introducing

00:05:24,960 --> 00:05:27,919
vulnerabilities

00:05:26,400 --> 00:05:29,840
you find them as early in the

00:05:27,919 --> 00:05:31,840
development process as you can

00:05:29,840 --> 00:05:35,280
before they're deployed and when it's

00:05:31,840 --> 00:05:36,960
still easy for you to make changes

00:05:35,280 --> 00:05:38,639
now i mentioned earlier that github is

00:05:36,960 --> 00:05:40,639
focused on building tooling around

00:05:38,639 --> 00:05:41,440
empowering developers to fix security

00:05:40,639 --> 00:05:44,320
issues

00:05:41,440 --> 00:05:47,680
early in the development process so

00:05:44,320 --> 00:05:49,600
let's talk a bit about those tools now

00:05:47,680 --> 00:05:52,320
github advanced security is our suite of

00:05:49,600 --> 00:05:54,080
developer-focused security tools

00:05:52,320 --> 00:05:55,680
these tools are all designed to help you

00:05:54,080 --> 00:05:57,680
write more secure code

00:05:55,680 --> 00:05:59,759
by identifying security issues earlier

00:05:57,680 --> 00:06:01,840
in the development process

00:05:59,759 --> 00:06:04,000
within advanced security we have three

00:06:01,840 --> 00:06:06,000
main product feature areas

00:06:04,000 --> 00:06:07,280
the first is secure dependencies

00:06:06,000 --> 00:06:08,800
features focused on helping you

00:06:07,280 --> 00:06:09,759
understand what dependencies you're

00:06:08,800 --> 00:06:12,000
using

00:06:09,759 --> 00:06:13,919
and how you're using them these are

00:06:12,000 --> 00:06:17,520
classic software composition analysis

00:06:13,919 --> 00:06:20,400
tools but with a developer focused bent

00:06:17,520 --> 00:06:22,160
second is secure code these features are

00:06:20,400 --> 00:06:23,440
focused on helping you ensure the code

00:06:22,160 --> 00:06:25,600
that your team writes

00:06:23,440 --> 00:06:27,199
is secure through static analysis

00:06:25,600 --> 00:06:29,759
scanning

00:06:27,199 --> 00:06:31,520
and finally secure secrets building a

00:06:29,759 --> 00:06:32,560
modern software architecture means

00:06:31,520 --> 00:06:34,240
linking a set of

00:06:32,560 --> 00:06:35,840
interdependent tools and services and

00:06:34,240 --> 00:06:37,280
all of those tools and services require

00:06:35,840 --> 00:06:38,960
credentials

00:06:37,280 --> 00:06:40,319
this set of features is focused on

00:06:38,960 --> 00:06:41,840
helping you make sure that you don't

00:06:40,319 --> 00:06:44,960
accidentally leak

00:06:41,840 --> 00:06:47,039
any of those secrets

00:06:44,960 --> 00:06:48,400
so let's start by talking about secure

00:06:47,039 --> 00:06:49,759
dependencies

00:06:48,400 --> 00:06:51,919
making sure the code that you're

00:06:49,759 --> 00:06:55,120
importing into your project is secure

00:06:51,919 --> 00:06:56,560
and safe to use first

00:06:55,120 --> 00:06:58,639
i'm going to talk about a few tools

00:06:56,560 --> 00:07:00,319
within secure dependencies first

00:06:58,639 --> 00:07:02,240
our friendly dependency updating robot

00:07:00,319 --> 00:07:04,160
depend the bot which helps you keep your

00:07:02,240 --> 00:07:07,120
dependencies up to date with alerts

00:07:04,160 --> 00:07:08,639
and automated pull requests second

00:07:07,120 --> 00:07:10,240
dependency review

00:07:08,639 --> 00:07:11,919
which empowers code reviewers with

00:07:10,240 --> 00:07:13,039
insights on dependency changes in a pull

00:07:11,919 --> 00:07:15,199
request

00:07:13,039 --> 00:07:16,160
and finally dependency graph which helps

00:07:15,199 --> 00:07:19,280
you understand what

00:07:16,160 --> 00:07:19,280
software you depend on

00:07:19,440 --> 00:07:23,360
first let's talk about depend-a-bot now

00:07:22,160 --> 00:07:25,440
there's a couple of different things

00:07:23,360 --> 00:07:27,680
that dependable can do for you

00:07:25,440 --> 00:07:29,039
first it can help you spot and remediate

00:07:27,680 --> 00:07:30,560
dependencies with security

00:07:29,039 --> 00:07:32,000
vulnerabilities

00:07:30,560 --> 00:07:33,520
when a vulnerability is published for

00:07:32,000 --> 00:07:34,639
the version of a dependency you use in

00:07:33,520 --> 00:07:37,440
your code base

00:07:34,639 --> 00:07:39,120
dependabot will let you know in most

00:07:37,440 --> 00:07:41,039
cases dependable can generate a pull

00:07:39,120 --> 00:07:42,880
request for you automatically to update

00:07:41,039 --> 00:07:44,400
your project to a safe version of that

00:07:42,880 --> 00:07:46,560
dependency

00:07:44,400 --> 00:07:48,240
and if dependable can't update your code

00:07:46,560 --> 00:07:49,840
for you say because the vulnerable

00:07:48,240 --> 00:07:51,440
version is directly specified as a

00:07:49,840 --> 00:07:52,400
dependency of another dependency in your

00:07:51,440 --> 00:07:54,319
project

00:07:52,400 --> 00:07:56,879
dependebot will send you an alert to

00:07:54,319 --> 00:07:58,240
notify you and to give you steps on how

00:07:56,879 --> 00:08:00,000
steps you can take to resolve the

00:07:58,240 --> 00:08:01,840
problem

00:08:00,000 --> 00:08:03,759
dependable can also keep all of your

00:08:01,840 --> 00:08:05,360
dependencies not just ones with security

00:08:03,759 --> 00:08:06,800
vulnerabilities up to date for you

00:08:05,360 --> 00:08:08,879
automatically

00:08:06,800 --> 00:08:10,800
bumping dependencies each time a new

00:08:08,879 --> 00:08:12,319
version is released

00:08:10,800 --> 00:08:14,000
this keeps you from being exposed to a

00:08:12,319 --> 00:08:16,400
vulnerability discovered in an older

00:08:14,000 --> 00:08:17,919
version of a dependency or worse

00:08:16,400 --> 00:08:19,599
getting stuck in a situation where it's

00:08:17,919 --> 00:08:20,800
difficult to migrate off of an old

00:08:19,599 --> 00:08:23,599
version of a dependency

00:08:20,800 --> 00:08:24,080
because you're so many versions behind

00:08:23,599 --> 00:08:25,840
now

00:08:24,080 --> 00:08:27,120
the key thing that i can tell you about

00:08:25,840 --> 00:08:28,400
dependable

00:08:27,120 --> 00:08:30,720
is that repositories that have

00:08:28,400 --> 00:08:33,839
dependable security updates enabled

00:08:30,720 --> 00:08:36,080
fix vulnerabilities on average 1.4 times

00:08:33,839 --> 00:08:37,919
faster than repositories that aren't

00:08:36,080 --> 00:08:39,599
using dependable so if you're focused on

00:08:37,919 --> 00:08:40,880
mean time to resolution for security

00:08:39,599 --> 00:08:42,240
vulnerabilities

00:08:40,880 --> 00:08:45,120
this is one of the key ways you can

00:08:42,240 --> 00:08:45,120
address that metric

00:08:45,279 --> 00:08:49,519
next dependency review is a relatively

00:08:47,920 --> 00:08:51,279
new feature to help you understand what

00:08:49,519 --> 00:08:52,800
dependency changes are being made in a

00:08:51,279 --> 00:08:55,120
pull request

00:08:52,800 --> 00:08:57,040
for each dependency you use you can see

00:08:55,120 --> 00:08:59,519
how old the version you're using is

00:08:57,040 --> 00:09:01,680
how widely used that dependency is and

00:08:59,519 --> 00:09:03,040
what license it was released under

00:09:01,680 --> 00:09:04,800
but the critical feature is that

00:09:03,040 --> 00:09:07,120
dependency review will flag any

00:09:04,800 --> 00:09:08,560
vulnerable dependencies for you

00:09:07,120 --> 00:09:10,320
you can see in this screenshot the

00:09:08,560 --> 00:09:12,080
dependency review has flagged a critical

00:09:10,320 --> 00:09:13,600
security vulnerability in the json web

00:09:12,080 --> 00:09:15,920
token package

00:09:13,600 --> 00:09:17,839
by reviewing this at pr time you can

00:09:15,920 --> 00:09:18,640
make sure that it never gets deployed to

00:09:17,839 --> 00:09:21,519
production

00:09:18,640 --> 00:09:21,519
in the first place

00:09:21,760 --> 00:09:25,519
and finally the github dependency graph

00:09:24,000 --> 00:09:27,279
is the secret sauce of our dependency

00:09:25,519 --> 00:09:29,680
security features

00:09:27,279 --> 00:09:30,880
dependency graph helps you and github

00:09:29,680 --> 00:09:32,080
understand what packages you're

00:09:30,880 --> 00:09:33,760
dependent upon

00:09:32,080 --> 00:09:35,360
so that we can bring you the valuable

00:09:33,760 --> 00:09:37,519
information and depend about security

00:09:35,360 --> 00:09:39,040
alerts and dependency review

00:09:37,519 --> 00:09:40,720
the dependency graph has support for

00:09:39,040 --> 00:09:43,440
the.net java

00:09:40,720 --> 00:09:44,560
javascript php python and ruby

00:09:43,440 --> 00:09:46,959
ecosystems

00:09:44,560 --> 00:09:47,839
so if your code base is in any of these

00:09:46,959 --> 00:09:49,680
languages

00:09:47,839 --> 00:09:52,399
you should definitely take advantage of

00:09:49,680 --> 00:09:52,399
these features

00:09:56,000 --> 00:09:58,880
okay so we've covered code that other

00:09:57,760 --> 00:10:00,720
people are writing and that you're

00:09:58,880 --> 00:10:02,399
including in your code base

00:10:00,720 --> 00:10:03,920
let's shift gears a little bit and talk

00:10:02,399 --> 00:10:05,680
about making the code that your team

00:10:03,920 --> 00:10:07,040
is producing more secure with our secure

00:10:05,680 --> 00:10:08,480
code features

00:10:07,040 --> 00:10:10,240
these are tools to help you spot

00:10:08,480 --> 00:10:13,279
potential security problems in the new

00:10:10,240 --> 00:10:14,959
code you and your team produce

00:10:13,279 --> 00:10:17,040
again i'm going to talk about a few

00:10:14,959 --> 00:10:18,880
features within secure code

00:10:17,040 --> 00:10:20,240
first code scanning is a rich user

00:10:18,880 --> 00:10:22,160
interface for understanding and

00:10:20,240 --> 00:10:23,600
responding to alerts generated by static

00:10:22,160 --> 00:10:25,279
analysis tools

00:10:23,600 --> 00:10:27,920
helping you make the most of the rich

00:10:25,279 --> 00:10:30,320
information that these tools produce

00:10:27,920 --> 00:10:32,560
next codeql is github's advanced

00:10:30,320 --> 00:10:34,240
semantic code analysis engine

00:10:32,560 --> 00:10:35,760
it's focused on helping you find

00:10:34,240 --> 00:10:37,040
security vulnerabilities in the code

00:10:35,760 --> 00:10:39,839
your team produces

00:10:37,040 --> 00:10:40,800
displaying the results in code scanning

00:10:39,839 --> 00:10:42,720
and finally

00:10:40,800 --> 00:10:44,560
support for third-party analyzers which

00:10:42,720 --> 00:10:45,600
let you extend the built-in analysis of

00:10:44,560 --> 00:10:47,360
code ql

00:10:45,600 --> 00:10:50,959
with the results of any standards

00:10:47,360 --> 00:10:54,000
compliant static analysis tool

00:10:50,959 --> 00:10:55,760
so first let's talk about code scanning

00:10:54,000 --> 00:10:57,440
code scanning is a rich user interface

00:10:55,760 --> 00:10:59,120
that allows you to review and understand

00:10:57,440 --> 00:11:01,839
the results from security scans

00:10:59,120 --> 00:11:03,360
right in the pr flow it brings you the

00:11:01,839 --> 00:11:04,480
information at code review time when

00:11:03,360 --> 00:11:06,079
you're primed to act

00:11:04,480 --> 00:11:07,760
on it when the code is still fresh in

00:11:06,079 --> 00:11:09,839
your mind

00:11:07,760 --> 00:11:11,760
in this screenshot you can see a code ql

00:11:09,839 --> 00:11:12,880
result indicating a potential denial of

00:11:11,760 --> 00:11:15,279
service attack

00:11:12,880 --> 00:11:16,720
because of missing rate limiting it

00:11:15,279 --> 00:11:18,240
shows you the line of code where it

00:11:16,720 --> 00:11:20,000
found the problem

00:11:18,240 --> 00:11:21,839
and it gives you rich data about what

00:11:20,000 --> 00:11:22,959
exactly is going on

00:11:21,839 --> 00:11:24,880
and the steps you should take to

00:11:22,959 --> 00:11:26,480
remediate it

00:11:24,880 --> 00:11:28,079
you can review results from third party

00:11:26,480 --> 00:11:30,320
static analysis tools in the same

00:11:28,079 --> 00:11:32,079
way and our code scanning interface

00:11:30,320 --> 00:11:33,040
supports displaying results from github

00:11:32,079 --> 00:11:36,320
actions builds

00:11:33,040 --> 00:11:37,680
as well as third-party cicd tools so you

00:11:36,320 --> 00:11:38,640
don't have to move your build

00:11:37,680 --> 00:11:40,839
infrastructure

00:11:38,640 --> 00:11:42,640
to take advantage of this rich feature

00:11:40,839 --> 00:11:45,760
set

00:11:42,640 --> 00:11:47,920
next let's talk about code ql

00:11:45,760 --> 00:11:49,839
codeql is our revolutionary semantic

00:11:47,920 --> 00:11:51,760
analysis engine that allows us to scan

00:11:49,839 --> 00:11:53,360
your code base for complex patterns

00:11:51,760 --> 00:11:54,959
that indicate a potential security

00:11:53,360 --> 00:11:57,040
vulnerability

00:11:54,959 --> 00:11:58,160
it's powered by more than 2 000 open

00:11:57,040 --> 00:11:59,440
source queries

00:11:58,160 --> 00:12:01,440
and there are new queries added

00:11:59,440 --> 00:12:04,160
regularly by the github security lab

00:12:01,440 --> 00:12:05,680
and the broader codeql community to give

00:12:04,160 --> 00:12:08,800
you an idea of the power of

00:12:05,680 --> 00:12:10,800
available to you with code ql 24

00:12:08,800 --> 00:12:12,079
of recent javascript cves and open

00:12:10,800 --> 00:12:13,920
source libraries

00:12:12,079 --> 00:12:15,120
would have been identified by codeql

00:12:13,920 --> 00:12:18,880
before they were ever

00:12:15,120 --> 00:12:22,160
released codeql is available in c

00:12:18,880 --> 00:12:25,279
c plus c sharp go javascript

00:12:22,160 --> 00:12:27,760
java python and typescript and it can

00:12:25,279 --> 00:12:29,040
detect over 160 different categories of

00:12:27,760 --> 00:12:31,120
vulnerabilities

00:12:29,040 --> 00:12:33,200
including unvalidated input cross-site

00:12:31,120 --> 00:12:35,200
scripting improper escaping

00:12:33,200 --> 00:12:37,279
integer overflow and denial of service

00:12:35,200 --> 00:12:39,519
attacks

00:12:37,279 --> 00:12:41,120
and circling back to where we started my

00:12:39,519 --> 00:12:42,000
colleague baz the director of product

00:12:41,120 --> 00:12:44,079
for code scanning

00:12:42,000 --> 00:12:45,440
just published this blog post last week

00:12:44,079 --> 00:12:47,600
on the github blog

00:12:45,440 --> 00:12:48,560
detailing how you can use codeql and

00:12:47,600 --> 00:12:50,560
code scanning

00:12:48,560 --> 00:12:51,920
to detect traces of solargate in your

00:12:50,560 --> 00:12:52,800
build infrastructure where it could be

00:12:51,920 --> 00:12:55,120
used to infect

00:12:52,800 --> 00:12:56,880
other systems in your network the

00:12:55,120 --> 00:12:59,040
security research team at microsoft

00:12:56,880 --> 00:13:00,079
developed codeql queries to find traces

00:12:59,040 --> 00:13:01,920
of solargate

00:13:00,079 --> 00:13:04,240
and contributed those queries back to

00:13:01,920 --> 00:13:05,440
the community where everyone can benefit

00:13:04,240 --> 00:13:07,519
from them

00:13:05,440 --> 00:13:08,800
this contribution model is a huge part

00:13:07,519 --> 00:13:12,959
of what makes code ql

00:13:08,800 --> 00:13:14,480
so powerful and finally let's talk about

00:13:12,959 --> 00:13:15,519
third-party tool support in code

00:13:14,480 --> 00:13:17,040
scanning

00:13:15,519 --> 00:13:18,560
code scanning is designed around the

00:13:17,040 --> 00:13:20,079
serif standard so if you use a

00:13:18,560 --> 00:13:22,639
third-party static analysis

00:13:20,079 --> 00:13:24,000
tool that can output results in serif

00:13:22,639 --> 00:13:26,000
you can view those results

00:13:24,000 --> 00:13:27,680
right alongside codeql results in the

00:13:26,000 --> 00:13:29,200
code scanning ui

00:13:27,680 --> 00:13:34,639
the list on the right is some of the

00:13:29,200 --> 00:13:37,839
tools that you can easily integrate

00:13:34,639 --> 00:13:39,920
finally let's talk about secure secrets

00:13:37,839 --> 00:13:41,440
like i mentioned earlier modern software

00:13:39,920 --> 00:13:42,720
architectures are often a sim

00:13:41,440 --> 00:13:44,800
an assembly of interconnected

00:13:42,720 --> 00:13:46,480
applications and services

00:13:44,800 --> 00:13:49,120
and each of those separate tools

00:13:46,480 --> 00:13:50,959
requires credentials for integration

00:13:49,120 --> 00:13:52,480
our secure secrets product area is

00:13:50,959 --> 00:13:54,160
focused on making sure you don't

00:13:52,480 --> 00:13:55,680
accidentally commit those credentials

00:13:54,160 --> 00:13:57,839
into your repository

00:13:55,680 --> 00:14:00,160
potentially leaking them internally or

00:13:57,839 --> 00:14:01,680
externally

00:14:00,160 --> 00:14:03,760
we have a couple of flavors of secret

00:14:01,680 --> 00:14:05,440
scanning one focused on avoiding

00:14:03,760 --> 00:14:06,240
disclosure of secrets in open source

00:14:05,440 --> 00:14:08,000
code

00:14:06,240 --> 00:14:11,680
and one focused on the best practice of

00:14:08,000 --> 00:14:13,279
not committing secrets in private code

00:14:11,680 --> 00:14:15,760
first let's talk about secret scanning

00:14:13,279 --> 00:14:18,000
for public repositories

00:14:15,760 --> 00:14:18,880
scans each incoming commit in all public

00:14:18,000 --> 00:14:22,240
repositories

00:14:18,880 --> 00:14:24,160
across all of github at tremendous scale

00:14:22,240 --> 00:14:26,240
for known secret formats like login

00:14:24,160 --> 00:14:27,839
credentials or api tokens from partner

00:14:26,240 --> 00:14:30,240
service providers

00:14:27,839 --> 00:14:31,519
when we find one we notify the service

00:14:30,240 --> 00:14:33,279
that issued that credential that we

00:14:31,519 --> 00:14:34,800
found it disclosed publicly

00:14:33,279 --> 00:14:36,480
so that they can remediate it according

00:14:34,800 --> 00:14:38,720
to their standard procedures for

00:14:36,480 --> 00:14:40,240
accidentally disclosed tokens

00:14:38,720 --> 00:14:41,760
this usually takes the form of their

00:14:40,240 --> 00:14:42,720
revoking the token and letting you know

00:14:41,760 --> 00:14:46,399
that it needs to be

00:14:42,720 --> 00:14:46,399
rotated and replaced with a new token

00:14:47,120 --> 00:14:50,240
next secret scanning for private

00:14:48,720 --> 00:14:52,079
repositories

00:14:50,240 --> 00:14:54,000
when you enable this for repository

00:14:52,079 --> 00:14:55,839
github scans the full history of that

00:14:54,000 --> 00:14:56,480
repository to find any secrets and old

00:14:55,839 --> 00:14:58,720
commits

00:14:56,480 --> 00:15:00,240
so that you can get clean and it alerts

00:14:58,720 --> 00:15:02,240
you if any new ones are committed so

00:15:00,240 --> 00:15:04,160
that you can stay clean

00:15:02,240 --> 00:15:05,839
now these are credentials that have been

00:15:04,160 --> 00:15:08,320
disclosed privately

00:15:05,839 --> 00:15:09,839
inside of your organization so instead

00:15:08,320 --> 00:15:11,600
of reporting them to partner service

00:15:09,839 --> 00:15:13,760
providers for revocation

00:15:11,600 --> 00:15:15,600
we report them to you so that you can

00:15:13,760 --> 00:15:17,920
decide what to do about them

00:15:15,600 --> 00:15:18,959
we of course strongly recommend revoking

00:15:17,920 --> 00:15:23,360
and rotating

00:15:18,959 --> 00:15:23,360
but that choice is entirely up to you

00:15:23,600 --> 00:15:26,880
these are some of the partner companies

00:15:24,959 --> 00:15:29,839
whose tokens github secret scanning both

00:15:26,880 --> 00:15:32,000
public and private can detect for you

00:15:29,839 --> 00:15:33,600
we'll also soon be launching in beta the

00:15:32,000 --> 00:15:36,480
ability for customers using private

00:15:33,600 --> 00:15:38,079
secret scanning to match custom patterns

00:15:36,480 --> 00:15:39,839
this will let you detect an alert on

00:15:38,079 --> 00:15:41,839
internal token formats and tokens from

00:15:39,839 --> 00:15:45,440
providers that we don't support natively

00:15:41,839 --> 00:15:45,440
that might be found in your code base

00:15:45,920 --> 00:15:50,079
okay so we've talked about features

00:15:47,519 --> 00:15:51,680
across all three security feature areas

00:15:50,079 --> 00:15:53,440
but i have one more feature to share

00:15:51,680 --> 00:15:55,199
with you that ties all three of these

00:15:53,440 --> 00:15:56,639
areas together

00:15:55,199 --> 00:15:58,480
it's a brand new feature that you'll

00:15:56,639 --> 00:16:00,639
hear more about in the satellite day 2

00:15:58,480 --> 00:16:03,519
keynote tomorrow morning

00:16:00,639 --> 00:16:05,199
it's our new org level security overview

00:16:03,519 --> 00:16:07,600
and it's launching in beta for github

00:16:05,199 --> 00:16:09,519
enterprise cloud customers

00:16:07,600 --> 00:16:10,800
security overview does exactly what the

00:16:09,519 --> 00:16:12,560
name says

00:16:10,800 --> 00:16:14,320
it gives you an overview of security

00:16:12,560 --> 00:16:16,160
feature enablement and alert counts

00:16:14,320 --> 00:16:18,880
across secure dependencies

00:16:16,160 --> 00:16:20,639
secure code and secure secrets as well

00:16:18,880 --> 00:16:23,839
as a risk determination based on the

00:16:20,639 --> 00:16:23,839
number of unresolved alerts

00:16:23,920 --> 00:16:28,000
if you unfold the view at the top you

00:16:26,079 --> 00:16:30,160
can see a breakdown of repo risk and

00:16:28,000 --> 00:16:32,639
enablement on a per alert type basis

00:16:30,160 --> 00:16:34,480
across your entire organization

00:16:32,639 --> 00:16:36,000
in this case you can see that this

00:16:34,480 --> 00:16:38,320
organization is doing well with

00:16:36,000 --> 00:16:40,160
secret scanning and depend-abod adoption

00:16:38,320 --> 00:16:41,519
but lagging a bit behind on code

00:16:40,160 --> 00:16:43,360
scanning

00:16:41,519 --> 00:16:44,880
on the other hand you can see that this

00:16:43,360 --> 00:16:46,399
organization has an awful lot of

00:16:44,880 --> 00:16:48,079
dependable alerts that they need to pay

00:16:46,399 --> 00:16:49,839
attention to

00:16:48,079 --> 00:16:51,440
this view is incredibly powerful in

00:16:49,839 --> 00:16:52,959
helping you understand your overall

00:16:51,440 --> 00:16:56,639
security posture

00:16:52,959 --> 00:16:59,440
at a glance and if you fold it back

00:16:56,639 --> 00:17:00,480
up you can see a per repo risk level and

00:16:59,440 --> 00:17:02,639
alert counts for

00:17:00,480 --> 00:17:04,160
each of code scanning secret scanning

00:17:02,639 --> 00:17:05,600
and upon

00:17:04,160 --> 00:17:07,120
you can sort this table by feature

00:17:05,600 --> 00:17:09,199
enablement if you're working to adopt

00:17:07,120 --> 00:17:10,880
these features across your organization

00:17:09,199 --> 00:17:12,559
by overall risk level if you're working

00:17:10,880 --> 00:17:14,559
to focus your remediation efforts on the

00:17:12,559 --> 00:17:16,400
most important repositories

00:17:14,559 --> 00:17:18,319
and by the count of a specific alert

00:17:16,400 --> 00:17:20,160
type if you want to focus on remediating

00:17:18,319 --> 00:17:21,919
one type of alert

00:17:20,160 --> 00:17:23,439
security overview ties all of our

00:17:21,919 --> 00:17:25,919
security features together

00:17:23,439 --> 00:17:29,360
in a really powerful way and we're very

00:17:25,919 --> 00:17:32,480
excited to get it into your hands

00:17:29,360 --> 00:17:34,000
so to bring us to a close what should

00:17:32,480 --> 00:17:36,400
you do next

00:17:34,000 --> 00:17:38,320
well if you want to shift left you need

00:17:36,400 --> 00:17:39,520
to make sure that everyone on your team

00:17:38,320 --> 00:17:41,520
has the tools

00:17:39,520 --> 00:17:42,880
and the information to spot potential

00:17:41,520 --> 00:17:45,360
security issues

00:17:42,880 --> 00:17:47,120
before they become a problem you need to

00:17:45,360 --> 00:17:48,400
involve your security team early in the

00:17:47,120 --> 00:17:51,679
development life cycle

00:17:48,400 --> 00:17:53,360
to design secure features from the start

00:17:51,679 --> 00:17:54,880
the tools in github advanced security

00:17:53,360 --> 00:17:57,039
can definitely help

00:17:54,880 --> 00:17:58,880
but shifting left is a mindset that your

00:17:57,039 --> 00:18:01,200
whole team will need to adopt

00:17:58,880 --> 00:18:01,919
in order to find vulnerabilities early

00:18:01,200 --> 00:18:05,039
and deliver

00:18:01,919 --> 00:18:06,320
more secure code if you'd like to learn

00:18:05,039 --> 00:18:07,440
more about the security tools that

00:18:06,320 --> 00:18:10,240
github offers

00:18:07,440 --> 00:18:11,840
please visit github.com features

00:18:10,240 --> 00:18:13,039
security

00:18:11,840 --> 00:18:14,799
all right that's all i've got this

00:18:13,039 --> 00:18:16,000
evening thank you so much for being here

00:18:14,799 --> 00:18:17,360
for my talk

00:18:16,000 --> 00:18:18,880
i'll definitely be in the discussion

00:18:17,360 --> 00:18:20,400
later to answer any questions you might

00:18:18,880 --> 00:18:21,360
have but please stick around for a few

00:18:20,400 --> 00:18:24,000
minutes here

00:18:21,360 --> 00:18:29,840
for q a with our hosts first again thank

00:18:24,000 --> 00:18:29,840
you so much for being here

00:18:32,000 --> 00:18:36,080
thank you very much for this amazing

00:18:34,080 --> 00:18:39,679
session

00:18:36,080 --> 00:18:40,000
absolutely my pleasure a big shout out

00:18:39,679 --> 00:18:43,120
to

00:18:40,000 --> 00:18:45,280
all the eastern community in india

00:18:43,120 --> 00:18:46,400
thank you for being with us and being

00:18:45,280 --> 00:18:48,960
part of this

00:18:46,400 --> 00:18:49,679
india developer journey thank you

00:18:48,960 --> 00:18:52,799
nicholas

00:18:49,679 --> 00:18:56,640
the night energy really showed up

00:18:52,799 --> 00:18:59,280
let's jump to the questions now

00:18:56,640 --> 00:19:01,039
absolutely i got the first one here from

00:18:59,280 --> 00:19:03,600
our audience

00:19:01,039 --> 00:19:04,320
nicholas can you tell us more about how

00:19:03,600 --> 00:19:06,720
development

00:19:04,320 --> 00:19:09,120
and security teams work together at

00:19:06,720 --> 00:19:11,679
github

00:19:09,120 --> 00:19:13,760
yeah absolutely uh we have a phenomenal

00:19:11,679 --> 00:19:16,320
application security team here at github

00:19:13,760 --> 00:19:18,320
um they very much have that pragmatic

00:19:16,320 --> 00:19:19,919
consultative mindset that i was i was

00:19:18,320 --> 00:19:21,440
talking about in the talk

00:19:19,919 --> 00:19:23,200
to the point that engineers at github

00:19:21,440 --> 00:19:24,400
are eager to consult with them early in

00:19:23,200 --> 00:19:26,640
a project

00:19:24,400 --> 00:19:29,120
our security team comes alongside helps

00:19:26,640 --> 00:19:30,960
understand the threat model of a feature

00:19:29,120 --> 00:19:32,559
the potential attack surface area that

00:19:30,960 --> 00:19:34,799
feature might generate

00:19:32,559 --> 00:19:36,400
and they suggest small and pragmatic

00:19:34,799 --> 00:19:38,000
changes to the design to help mitigate

00:19:36,400 --> 00:19:40,320
some of those attacks

00:19:38,000 --> 00:19:41,360
it's very much they're seeking to come

00:19:40,320 --> 00:19:44,080
alongside

00:19:41,360 --> 00:19:46,240
and provide pragmatic recommendations to

00:19:44,080 --> 00:19:47,679
address things that are part of the

00:19:46,240 --> 00:19:50,000
the threat model of that feature rather

00:19:47,679 --> 00:19:51,840
than resolve everything possible

00:19:50,000 --> 00:19:53,360
a good example my group recently commit

00:19:51,840 --> 00:19:54,799
completed a hack week

00:19:53,360 --> 00:19:56,240
and there were a couple of projects

00:19:54,799 --> 00:19:57,520
coming out of that hack week that

00:19:56,240 --> 00:19:58,559
engineers i mean these are these are

00:19:57,520 --> 00:20:00,799
small features that we were able to

00:19:58,559 --> 00:20:02,720
complete in the span of a week

00:20:00,799 --> 00:20:04,400
but still engineers on the team reached

00:20:02,720 --> 00:20:06,480
out to our application security team for

00:20:04,400 --> 00:20:07,760
consultation on them to make sure that

00:20:06,480 --> 00:20:08,960
we were considering all the angles that

00:20:07,760 --> 00:20:11,280
we needed to be

00:20:08,960 --> 00:20:13,039
so it's it's this rich consultative

00:20:11,280 --> 00:20:14,880
relationship not the gacha culture that

00:20:13,039 --> 00:20:16,400
i've seen sometimes in previous

00:20:14,880 --> 00:20:19,360
companies i've worked at

00:20:16,400 --> 00:20:21,120
and if if security team creates that

00:20:19,360 --> 00:20:23,120
kind of environment that makes engineers

00:20:21,120 --> 00:20:26,000
really eager to engage with them

00:20:23,120 --> 00:20:26,000
and seek their help

00:20:27,679 --> 00:20:34,320
wow that's a good cohesion going there

00:20:31,280 --> 00:20:35,280
you talked a lot about sonargate and the

00:20:34,320 --> 00:20:38,559
supply chain

00:20:35,280 --> 00:20:41,919
attacks what do you think is driving the

00:20:38,559 --> 00:20:44,080
increase in these kind of attacks

00:20:41,919 --> 00:20:46,880
well i think i think it's all tied in

00:20:44,080 --> 00:20:48,159
with how we build software now

00:20:46,880 --> 00:20:50,320
you know if you think about how software

00:20:48,159 --> 00:20:52,080
was built 20 years ago code reuse was

00:20:50,320 --> 00:20:53,600
mostly an academic pursuit it wasn't

00:20:52,080 --> 00:20:55,039
really a practical thing that anybody

00:20:53,600 --> 00:20:56,960
did

00:20:55,039 --> 00:20:59,039
now we've kind of gotten to this place

00:20:56,960 --> 00:21:00,720
where we reuse software all the time by

00:20:59,039 --> 00:21:03,039
bringing open source dependencies into

00:21:00,720 --> 00:21:04,640
our projects and when we do that we're

00:21:03,039 --> 00:21:05,440
inviting people that we don't know under

00:21:04,640 --> 00:21:06,799
our code base

00:21:05,440 --> 00:21:09,039
by way of the libraries that they

00:21:06,799 --> 00:21:10,960
maintain so we've gotten

00:21:09,039 --> 00:21:13,679
really good at reusing code it's almost

00:21:10,960 --> 00:21:16,159
become second nature to us now

00:21:13,679 --> 00:21:16,960
and we rarely invent things from scratch

00:21:16,159 --> 00:21:19,440
but

00:21:16,960 --> 00:21:21,200
we've really not started or just

00:21:19,440 --> 00:21:24,080
starting to wrestle with how to do that

00:21:21,200 --> 00:21:25,840
safely you know we're trying to figure

00:21:24,080 --> 00:21:27,280
out how can you invite other people into

00:21:25,840 --> 00:21:28,640
your code base but make sure that the

00:21:27,280 --> 00:21:29,520
code that you're bringing in is safe

00:21:28,640 --> 00:21:31,200
because

00:21:29,520 --> 00:21:33,360
you know if you're bringing in a library

00:21:31,200 --> 00:21:34,960
that's got 40 000 lines of code it's

00:21:33,360 --> 00:21:36,480
pretty impractical to go and read all of

00:21:34,960 --> 00:21:38,559
that code there has to be some component

00:21:36,480 --> 00:21:40,240
of trust built in

00:21:38,559 --> 00:21:41,840
at the same time we're kind of far far

00:21:40,240 --> 00:21:43,520
enough along the adoption path of open

00:21:41,840 --> 00:21:45,200
source now there's enough companies

00:21:43,520 --> 00:21:46,960
using it there's enough rich targets

00:21:45,200 --> 00:21:48,240
using open source software

00:21:46,960 --> 00:21:49,520
that it makes a pretty rich attack

00:21:48,240 --> 00:21:51,679
surface so we're starting to see the

00:21:49,520 --> 00:21:53,440
pace of those attacks pick up

00:21:51,679 --> 00:21:55,440
and this is going to be you know we're

00:21:53,440 --> 00:21:57,200
we're seeing it in the news a lot now

00:21:55,440 --> 00:21:58,640
i expect that to continue i don't i

00:21:57,200 --> 00:22:02,080
don't think supply chain attacks are

00:21:58,640 --> 00:22:02,080
going to go away anytime soon

00:22:02,880 --> 00:22:06,799
now that's very insightful especially

00:22:04,880 --> 00:22:09,679
the shift that you explained

00:22:06,799 --> 00:22:10,240
on reuse of code in the enterprise setup

00:22:09,679 --> 00:22:12,320
as well

00:22:10,240 --> 00:22:13,919
thanks for that we got next one question

00:22:12,320 --> 00:22:16,559
here uh can you talk

00:22:13,919 --> 00:22:16,960
a little more about how github's tool

00:22:16,559 --> 00:22:18,960
help

00:22:16,960 --> 00:22:21,600
make you less vulnerable to these kind

00:22:18,960 --> 00:22:23,840
of attacks that we just discussed

00:22:21,600 --> 00:22:25,360
yeah absolutely i mean it kind of all

00:22:23,840 --> 00:22:26,000
goes back to where we started talking

00:22:25,360 --> 00:22:28,799
about mean

00:22:26,000 --> 00:22:29,360
time to resolution you kind of have to

00:22:28,799 --> 00:22:31,039
assume

00:22:29,360 --> 00:22:32,400
that you're going to have security

00:22:31,039 --> 00:22:34,640
vulnerabilities in your code just

00:22:32,400 --> 00:22:36,240
because it's so difficult to

00:22:34,640 --> 00:22:37,600
write completely secure code again you

00:22:36,240 --> 00:22:38,960
only have to make one mistake to

00:22:37,600 --> 00:22:40,720
introduce a vulnerability where you have

00:22:38,960 --> 00:22:42,320
to be perfect all the time to completely

00:22:40,720 --> 00:22:43,919
avoid it

00:22:42,320 --> 00:22:45,280
so as we're bringing these libraries in

00:22:43,919 --> 00:22:46,320
we have to assume that we are going to

00:22:45,280 --> 00:22:47,600
introduce libraries that have

00:22:46,320 --> 00:22:49,360
vulnerabilities

00:22:47,600 --> 00:22:51,039
so our goal isn't necessarily to make

00:22:49,360 --> 00:22:52,400
sure we never bring a vulnerability into

00:22:51,039 --> 00:22:53,679
our code base

00:22:52,400 --> 00:22:55,919
it's to make sure that we respond to

00:22:53,679 --> 00:22:58,080
them as quickly as we can when we do

00:22:55,919 --> 00:22:59,440
discover one and so dependable is

00:22:58,080 --> 00:23:00,799
critical for this because it helps you

00:22:59,440 --> 00:23:02,480
update your code as soon as a new

00:23:00,799 --> 00:23:03,919
vulnerability is published

00:23:02,480 --> 00:23:05,760
again we'll send you that alert or that

00:23:03,919 --> 00:23:06,240
pull request as soon as we've identified

00:23:05,760 --> 00:23:08,000
that

00:23:06,240 --> 00:23:09,360
that dependency that's vulnerable and

00:23:08,000 --> 00:23:10,880
that it's something that you use in your

00:23:09,360 --> 00:23:12,640
repository

00:23:10,880 --> 00:23:14,240
and dependency review is also helpful

00:23:12,640 --> 00:23:16,480
because it helps keep you from

00:23:14,240 --> 00:23:18,720
accidentally adding a known vulnerable

00:23:16,480 --> 00:23:20,559
version of a library into your code base

00:23:18,720 --> 00:23:22,080
so if it's known vulnerable we want to

00:23:20,559 --> 00:23:23,440
keep it out of your code base

00:23:22,080 --> 00:23:24,799
if it's in your code base and we

00:23:23,440 --> 00:23:26,799
discover that it's vulnerable we want

00:23:24,799 --> 00:23:28,080
you to remediate that as quickly as you

00:23:26,799 --> 00:23:31,600
possibly can and

00:23:28,080 --> 00:23:31,600
and resolve that vulnerability

00:23:32,480 --> 00:23:38,880
totally makes sense the next

00:23:35,600 --> 00:23:39,520
question is a little personal um you've

00:23:38,880 --> 00:23:42,720
been

00:23:39,520 --> 00:23:44,720
in the business of supply

00:23:42,720 --> 00:23:46,640
securing supply chain for a long time

00:23:44,720 --> 00:23:51,520
what is your favorite feature

00:23:46,640 --> 00:23:54,480
or like the best one that you love

00:23:51,520 --> 00:23:55,919
oh that's a good one um you're right i

00:23:54,480 --> 00:23:57,440
have been working in the space at github

00:23:55,919 --> 00:23:58,960
for a while and and

00:23:57,440 --> 00:24:00,799
i don't know i have i have a real

00:23:58,960 --> 00:24:02,320
fondness for just

00:24:00,799 --> 00:24:04,400
vulnerable dependency alerts because

00:24:02,320 --> 00:24:05,840
it's where we started it was the first

00:24:04,400 --> 00:24:07,279
security feature that we wrote the first

00:24:05,840 --> 00:24:09,279
security product feature that we rolled

00:24:07,279 --> 00:24:10,799
out the emails that we sent you

00:24:09,279 --> 00:24:12,960
to tell you that you had a vulnerable

00:24:10,799 --> 00:24:14,880
dependency in your repository

00:24:12,960 --> 00:24:16,640
we've iterated over those alerts a lot

00:24:14,880 --> 00:24:18,240
over the last couple of years

00:24:16,640 --> 00:24:20,480
it used to be that you would get one

00:24:18,240 --> 00:24:22,240
email for every repository that you had

00:24:20,480 --> 00:24:23,520
a vulnerable dependency in

00:24:22,240 --> 00:24:26,000
and now we're to the point that we roll

00:24:23,520 --> 00:24:27,600
that up to when there's a vulnerability

00:24:26,000 --> 00:24:28,960
published we send you one email about

00:24:27,600 --> 00:24:31,039
that vulnerability

00:24:28,960 --> 00:24:32,880
that contains all of the repositories

00:24:31,039 --> 00:24:33,679
that that have that vulnerability in it

00:24:32,880 --> 00:24:34,960
so

00:24:33,679 --> 00:24:36,400
we've tried to reduce the noise we've

00:24:34,960 --> 00:24:37,440
tried to make those alerts more useful

00:24:36,400 --> 00:24:39,679
but it's still

00:24:37,440 --> 00:24:41,760
it's still sort of the meat and potatoes

00:24:39,679 --> 00:24:44,000
of keeping your application secure

00:24:41,760 --> 00:24:45,120
just knowing that you might have one of

00:24:44,000 --> 00:24:48,000
those vulnerabilities in there being

00:24:45,120 --> 00:24:48,000
able to identify it

00:24:50,080 --> 00:24:54,320
that's great that's great to know uh

00:24:51,919 --> 00:24:55,679
nick and beside this obviously uh

00:24:54,320 --> 00:24:57,919
security is your favorite

00:24:55,679 --> 00:25:00,159
but what about your favorite feature in

00:24:57,919 --> 00:25:02,000
github outside of security tell us about

00:25:00,159 --> 00:25:04,640
that as well

00:25:02,000 --> 00:25:05,279
outside of security you know i really

00:25:04,640 --> 00:25:07,679
love

00:25:05,279 --> 00:25:09,200
what we're doing with github code spaces

00:25:07,679 --> 00:25:10,799
i've really enjoyed getting to play with

00:25:09,200 --> 00:25:12,240
that feature and i'm

00:25:10,799 --> 00:25:13,760
super excited for us to be able to roll

00:25:12,240 --> 00:25:15,200
that out to a wider audience because

00:25:13,760 --> 00:25:17,520
it's going to be such a cool thing when

00:25:15,200 --> 00:25:17,520
we do

00:25:18,720 --> 00:25:22,640
absolutely absolutely launching a

00:25:21,039 --> 00:25:24,640
full-blown coding environment

00:25:22,640 --> 00:25:25,919
right from the repo is no less than

00:25:24,640 --> 00:25:27,440
magic and

00:25:25,919 --> 00:25:29,360
everybody's really looking forward to it

00:25:27,440 --> 00:25:32,000
including myself

00:25:29,360 --> 00:25:33,279
yes uh it's gonna be an industry-wide

00:25:32,000 --> 00:25:35,279
game changer

00:25:33,279 --> 00:25:36,559
thank you nicholas again for joining us

00:25:35,279 --> 00:25:39,120
so late at your night

00:25:36,559 --> 00:25:40,880
and answering all the questions folks

00:25:39,120 --> 00:25:43,039
remember nicholas is continuing

00:25:40,880 --> 00:25:44,559
to be staying with us he will be at

00:25:43,039 --> 00:25:47,120
discussion so

00:25:44,559 --> 00:25:48,559
send all your good questions to him then

00:25:47,120 --> 00:25:51,279
thank you again nicholas

00:25:48,559 --> 00:25:51,679
bye yep thank you see you over there

00:25:51,279 --> 00:25:55,279
yeah

00:25:51,679 --> 00:25:57,840
bye yup and uh

00:25:55,279 --> 00:25:57,840

YouTube URL: https://www.youtube.com/watch?v=X4_JAKwPBCw


