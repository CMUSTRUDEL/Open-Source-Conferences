Title: GitHub Satellite India 2021 - Resilience testing with GitHub Actions using LitmusChaos
Publication date: 2021-03-28
Playlist: GitHub Satellite India 2021 - DevOps: Day 1
Description: 
	Presented by Uma Mukkara, Maintainer @ LitmusChaos / CEO @ ChaosNative

Since Kubernetes has achieved mainstream adoption, achieving safe upgrades and resilience in production has become a challenge when the delivery of changes are happening at a much faster pace than before. Fortunately, new Chaos Engineering tools have emerged to meet the needs of resilience engineering of Kubernetes. In this session, Uma will talk about the importance of building application resilience testing into CI pipeline stages using GitHub Actions. Uma will do a couple of LitmusChaos experiments and demonstrate the functioning and usage of the Actions. Then, he'll touch upon best practices for running GitHub Actions on Azure and on native Kubernetes. There will also be a 5- to 10-minute Q&A after the demo.

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:06,170 --> 00:00:09,599
[Music]

00:00:07,680 --> 00:00:12,639
hello folks

00:00:09,599 --> 00:00:16,320
good morning excited to be here

00:00:12,639 --> 00:00:19,920
i am um today i'll be speaking about

00:00:16,320 --> 00:00:23,279
resilience testing with litmus chaos

00:00:19,920 --> 00:00:24,960
and github actions pretty exciting topic

00:00:23,279 --> 00:00:26,400
considering that we have a lot of

00:00:24,960 --> 00:00:29,840
development going on

00:00:26,400 --> 00:00:32,079
uh in the world today with kubernetes at

00:00:29,840 --> 00:00:35,040
mainstream

00:00:32,079 --> 00:00:35,920
so let's jump into it a little bit about

00:00:35,040 --> 00:00:39,680
myself

00:00:35,920 --> 00:00:42,320
um i've been a technology architect

00:00:39,680 --> 00:00:42,800
in the last decade i've been doing a lot

00:00:42,320 --> 00:00:45,120
of

00:00:42,800 --> 00:00:46,960
entrepreneurial stuff with the cloudbyte

00:00:45,120 --> 00:00:49,840
being my first startup

00:00:46,960 --> 00:00:50,879
and eventually moved on to kubernetes

00:00:49,840 --> 00:00:53,440
with open ebs

00:00:50,879 --> 00:00:53,920
open source project for storage and

00:00:53,440 --> 00:00:56,480
there

00:00:53,920 --> 00:00:58,000
we started uh writing chaos engineering

00:00:56,480 --> 00:01:00,719
tools for open evs

00:00:58,000 --> 00:01:02,000
which became litmus project and

00:01:00,719 --> 00:01:06,320
eventually became

00:01:02,000 --> 00:01:09,760
a cncf project for chaos engineering

00:01:06,320 --> 00:01:11,119
and we wanted to focus more on

00:01:09,760 --> 00:01:13,439
taking this chaos engineering

00:01:11,119 --> 00:01:17,119
capabilities to larger community

00:01:13,439 --> 00:01:17,520
uh like developers sres and we spun off

00:01:17,119 --> 00:01:20,720
from

00:01:17,520 --> 00:01:23,439
my data to become kiosk native

00:01:20,720 --> 00:01:25,119
as an independent company to focus

00:01:23,439 --> 00:01:26,000
primarily on chaos engineering for

00:01:25,119 --> 00:01:29,119
kubernetes

00:01:26,000 --> 00:01:30,479
and surrounding ecosystem so what we are

00:01:29,119 --> 00:01:34,000
going to talk today

00:01:30,479 --> 00:01:35,200
is really about how we can take chaos

00:01:34,000 --> 00:01:38,400
engineering

00:01:35,200 --> 00:01:39,759
to developers using github actions

00:01:38,400 --> 00:01:41,360
of course you can do it in many other

00:01:39,759 --> 00:01:42,799
ways but today we're going to talk about

00:01:41,360 --> 00:01:45,040
github actions

00:01:42,799 --> 00:01:47,360
and in that process we'll touch a little

00:01:45,040 --> 00:01:49,360
bit about uh what is chaos engineering

00:01:47,360 --> 00:01:52,240
what is cloud native chaos engineering

00:01:49,360 --> 00:01:53,439
what is litmus and i'll probably show

00:01:52,240 --> 00:01:55,680
how we've been using

00:01:53,439 --> 00:01:56,719
a github actions for our own project

00:01:55,680 --> 00:01:59,280
which is litmus

00:01:56,719 --> 00:02:00,000
and how you can use litmus and github

00:01:59,280 --> 00:02:02,479
actions

00:02:00,000 --> 00:02:03,439
together to do some kiosk engineering

00:02:02,479 --> 00:02:05,680
and improve

00:02:03,439 --> 00:02:08,239
the resilience of your own application

00:02:05,680 --> 00:02:10,560
or platform

00:02:08,239 --> 00:02:12,400
so let's talk a little bit about um

00:02:10,560 --> 00:02:16,080
cloud native developers

00:02:12,400 --> 00:02:18,480
right so we're all now already

00:02:16,080 --> 00:02:20,239
in the cloud native space and it's all

00:02:18,480 --> 00:02:23,040
about micro services

00:02:20,239 --> 00:02:24,959
right so what why the developer mindset

00:02:23,040 --> 00:02:26,800
has to be a little bit different about

00:02:24,959 --> 00:02:28,800
the cloud native ecosystem the

00:02:26,800 --> 00:02:31,840
development of uh

00:02:28,800 --> 00:02:33,360
application in such a system right the

00:02:31,840 --> 00:02:34,319
first primary difference is as a

00:02:33,360 --> 00:02:37,920
developer

00:02:34,319 --> 00:02:40,959
you are expected to ship things faster

00:02:37,920 --> 00:02:43,280
right and that's the whole hype about uh

00:02:40,959 --> 00:02:44,879
microservices the reason why uh

00:02:43,280 --> 00:02:48,480
kubernetes and uh

00:02:44,879 --> 00:02:51,120
containers are so famous now right and

00:02:48,480 --> 00:02:52,959
they are also coming much faster to you

00:02:51,120 --> 00:02:53,680
your development environment is also

00:02:52,959 --> 00:02:56,800
changing

00:02:53,680 --> 00:02:59,280
right and the pipelines are large

00:02:56,800 --> 00:03:00,959
complex and they're expected to do a lot

00:02:59,280 --> 00:03:01,760
more job than what they used to do

00:03:00,959 --> 00:03:05,360
earlier

00:03:01,760 --> 00:03:05,680
right and as developers your ecosystem

00:03:05,360 --> 00:03:07,920
is

00:03:05,680 --> 00:03:08,800
changing a lot underneath in which

00:03:07,920 --> 00:03:11,440
you're developing

00:03:08,800 --> 00:03:14,159
which you're testing and that is

00:03:11,440 --> 00:03:16,840
expected to be very sturdy otherwise uh

00:03:14,159 --> 00:03:18,159
you are you're really slowing down your

00:03:16,840 --> 00:03:20,239
ecosystem

00:03:18,159 --> 00:03:21,840
all right so i want to be able to depend

00:03:20,239 --> 00:03:24,000
on my tasks and i want to

00:03:21,840 --> 00:03:24,879
be able to depend on the underlying

00:03:24,000 --> 00:03:27,440
stack as well

00:03:24,879 --> 00:03:28,159
right so what is chaos engineering for

00:03:27,440 --> 00:03:30,640
developers

00:03:28,159 --> 00:03:31,440
right so just to summarize you've been

00:03:30,640 --> 00:03:34,239
developing

00:03:31,440 --> 00:03:35,840
your application with your cdi pipelines

00:03:34,239 --> 00:03:38,959
and you used to test them

00:03:35,840 --> 00:03:40,640
but now you also have a continuous

00:03:38,959 --> 00:03:41,680
verification of your underlying

00:03:40,640 --> 00:03:43,599
infrastructure

00:03:41,680 --> 00:03:46,000
as well as your underlying micro

00:03:43,599 --> 00:03:48,000
services that you run your pipeline on

00:03:46,000 --> 00:03:49,280
so that's really chaos engineering for

00:03:48,000 --> 00:03:50,959
developers really mean

00:03:49,280 --> 00:03:52,799
it's adding chaos engineering to your

00:03:50,959 --> 00:03:55,120
safe pipelines right

00:03:52,799 --> 00:03:56,799
so what is chaos engineering we all know

00:03:55,120 --> 00:03:58,840
that it's all about

00:03:56,799 --> 00:04:01,360
reducing down times because they're very

00:03:58,840 --> 00:04:03,280
expensive you move your testing on to

00:04:01,360 --> 00:04:06,400
the right side of your devops loop

00:04:03,280 --> 00:04:06,799
don't wait test keep testing right and

00:04:06,400 --> 00:04:09,120
uh

00:04:06,799 --> 00:04:11,200
usually it's been an after thought

00:04:09,120 --> 00:04:13,760
process you burn something

00:04:11,200 --> 00:04:14,560
you know an expensive uh outcome will

00:04:13,760 --> 00:04:18,239
come

00:04:14,560 --> 00:04:21,519
and as a result you are expected to

00:04:18,239 --> 00:04:22,880
um you know fix it and the rca is the

00:04:21,519 --> 00:04:25,520
practice chaos engineering

00:04:22,880 --> 00:04:28,639
right so it's been a mostly traditional

00:04:25,520 --> 00:04:31,280
one not many tools have been there

00:04:28,639 --> 00:04:32,320
in a way that you can automate them at

00:04:31,280 --> 00:04:34,639
high scale

00:04:32,320 --> 00:04:35,919
and uh generally it's a reactive stuff

00:04:34,639 --> 00:04:38,800
you've not been seeing

00:04:35,919 --> 00:04:40,560
uh chaos engineering as part of ci cd uh

00:04:38,800 --> 00:04:43,280
so far that aggressively

00:04:40,560 --> 00:04:45,199
except that you know last a year or so

00:04:43,280 --> 00:04:46,400
with so much of stuff happening around

00:04:45,199 --> 00:04:49,759
cacd

00:04:46,400 --> 00:04:53,120
uh faster stuff happening in

00:04:49,759 --> 00:04:55,520
in in the left shift mode of operations

00:04:53,120 --> 00:04:56,400
you're seeing chaos engineering as a way

00:04:55,520 --> 00:04:58,320
to do it

00:04:56,400 --> 00:05:00,160
and this is really propelled by the

00:04:58,320 --> 00:05:02,639
adoption of kubernetes as you see

00:05:00,160 --> 00:05:06,080
kubernetes is moving mainstream

00:05:02,639 --> 00:05:09,360
and you are seeing more dynamism

00:05:06,080 --> 00:05:11,360
and the chaos engineering has begun

00:05:09,360 --> 00:05:12,400
to catch up you know the people's

00:05:11,360 --> 00:05:14,320
mindset

00:05:12,400 --> 00:05:16,320
and we believe that you know it's

00:05:14,320 --> 00:05:18,000
already on the path to mainstream

00:05:16,320 --> 00:05:18,479
adoption as you would have seen many

00:05:18,000 --> 00:05:20,400
people

00:05:18,479 --> 00:05:22,320
talking about how chaos engineering is

00:05:20,400 --> 00:05:24,320
going to play our main role

00:05:22,320 --> 00:05:25,440
in this year and probably next year and

00:05:24,320 --> 00:05:28,320
years to come

00:05:25,440 --> 00:05:30,160
in that so there is going to be more of

00:05:28,320 --> 00:05:30,639
more chaos engineering in cloud native

00:05:30,160 --> 00:05:32,960
space

00:05:30,639 --> 00:05:34,720
and that's why uh cloud native chaos

00:05:32,960 --> 00:05:37,440
engineering is a topic uh you know

00:05:34,720 --> 00:05:39,440
we define certain principles right so

00:05:37,440 --> 00:05:41,680
it's got to be open source you need to

00:05:39,440 --> 00:05:42,400
have this chaos experiments pretty well

00:05:41,680 --> 00:05:44,880
organized

00:05:42,400 --> 00:05:47,360
well tested it has to have operators

00:05:44,880 --> 00:05:49,919
with open api and lifecycle management

00:05:47,360 --> 00:05:52,000
it has to scale well and probably get

00:05:49,919 --> 00:05:54,560
ops is the right answer

00:05:52,000 --> 00:05:56,560
to manage chaos engineering and then

00:05:54,560 --> 00:06:00,960
when you introduce certain issues

00:05:56,560 --> 00:06:03,280
um or bugs you find them using

00:06:00,960 --> 00:06:06,080
fault injection you need to debug them

00:06:03,280 --> 00:06:08,560
so observability is a very key factor

00:06:06,080 --> 00:06:09,199
so when you do chaos engineering in this

00:06:08,560 --> 00:06:11,199
way

00:06:09,199 --> 00:06:12,479
uh you can call that as cloud native

00:06:11,199 --> 00:06:13,919
chaos engineering these are the

00:06:12,479 --> 00:06:15,600
principles that we defined couple of

00:06:13,919 --> 00:06:17,360
years ago before

00:06:15,600 --> 00:06:18,639
we started the journey of chaos

00:06:17,360 --> 00:06:20,880
engineering

00:06:18,639 --> 00:06:22,479
in late months the project which is now

00:06:20,880 --> 00:06:24,639
a cncf project

00:06:22,479 --> 00:06:26,560
is really based on these principles

00:06:24,639 --> 00:06:29,840
right so it is open source

00:06:26,560 --> 00:06:32,960
and it is having a chaos hub and

00:06:29,840 --> 00:06:35,280
a lot of uh operator work has gone in

00:06:32,960 --> 00:06:36,560
and githubs and open observability are

00:06:35,280 --> 00:06:39,520
just around the corner

00:06:36,560 --> 00:06:39,919
with the titans all right as a project

00:06:39,520 --> 00:06:42,240
it's

00:06:39,919 --> 00:06:45,039
pretty famous i would say uh we have

00:06:42,240 --> 00:06:46,880
about close to 50 000 installations

00:06:45,039 --> 00:06:48,960
all over the place that we know of there

00:06:46,880 --> 00:06:51,199
may be more uh what i'm

00:06:48,960 --> 00:06:52,080
really excited about is this project

00:06:51,199 --> 00:06:54,080
apart from

00:06:52,080 --> 00:06:55,919
the maintenance kiosk native there are

00:06:54,080 --> 00:06:57,440
other people who are contributing very

00:06:55,919 --> 00:06:58,639
very actively including some of the

00:06:57,440 --> 00:07:00,800
larger companies

00:06:58,639 --> 00:07:02,479
recently red hat also became one of the

00:07:00,800 --> 00:07:04,160
main adapters

00:07:02,479 --> 00:07:06,560
and the contributions have been very

00:07:04,160 --> 00:07:09,039
very helpful right

00:07:06,560 --> 00:07:10,639
so where do we use litmus right

00:07:09,039 --> 00:07:11,440
obviously you know i just talked about

00:07:10,639 --> 00:07:14,080
the ci

00:07:11,440 --> 00:07:14,639
pipelines use case uh we'll talk more

00:07:14,080 --> 00:07:18,960
about it

00:07:14,639 --> 00:07:20,000
uh in shortly and the other two areas

00:07:18,960 --> 00:07:23,360
are

00:07:20,000 --> 00:07:24,800
as an extension of ci uh chaos

00:07:23,360 --> 00:07:28,000
engineering is used

00:07:24,800 --> 00:07:29,599
as a trigger to do cd and then post cd

00:07:28,000 --> 00:07:32,000
as well right so i just

00:07:29,599 --> 00:07:32,880
deployed it is my application working as

00:07:32,000 --> 00:07:35,440
behaving

00:07:32,880 --> 00:07:37,199
behaving as expected and of course chaos

00:07:35,440 --> 00:07:37,440
engineering has been having the use case

00:07:37,199 --> 00:07:40,479
of

00:07:37,440 --> 00:07:41,759
uh randomized testing in production not

00:07:40,479 --> 00:07:43,919
reproduction right

00:07:41,759 --> 00:07:45,440
so overall litmus is a cross-cloud

00:07:43,919 --> 00:07:48,720
multi-tenant platform

00:07:45,440 --> 00:07:50,879
you will be able to see these three use

00:07:48,720 --> 00:07:53,360
cases used properly

00:07:50,879 --> 00:07:54,400
so a little bit about what is litmus as

00:07:53,360 --> 00:07:56,000
a brief you know

00:07:54,400 --> 00:07:57,680
it's a helm chart with a lot of

00:07:56,000 --> 00:08:01,199
experiments already available

00:07:57,680 --> 00:08:02,720
and you can take them as is or you can

00:08:01,199 --> 00:08:04,879
pull them into your private git

00:08:02,720 --> 00:08:05,919
repository and then create your own

00:08:04,879 --> 00:08:07,199
private chaos hub

00:08:05,919 --> 00:08:09,759
and collaborate with your own team

00:08:07,199 --> 00:08:12,639
members right so that's private key also

00:08:09,759 --> 00:08:14,720
so when you install a litmus uh through

00:08:12,639 --> 00:08:16,800
a helm chart you get a nice portal

00:08:14,720 --> 00:08:18,960
that's where your centralized cross

00:08:16,800 --> 00:08:21,919
cloud are multi-cloud

00:08:18,960 --> 00:08:23,199
control plane for your chaos engineering

00:08:21,919 --> 00:08:26,319
and then once you

00:08:23,199 --> 00:08:27,520
set that up you can run kiosk workflows

00:08:26,319 --> 00:08:30,319
anywhere

00:08:27,520 --> 00:08:32,320
any kubernetes or non-kubernetes uh you

00:08:30,319 --> 00:08:34,560
can run them on cloud platforms

00:08:32,320 --> 00:08:35,760
vms bare metals and you can store all

00:08:34,560 --> 00:08:38,479
this configuration

00:08:35,760 --> 00:08:39,519
and and get centralized so that you can

00:08:38,479 --> 00:08:42,159
automate them

00:08:39,519 --> 00:08:43,360
you can put some uh you know or back

00:08:42,159 --> 00:08:45,760
rules around it

00:08:43,360 --> 00:08:48,080
manage the versioning of them and this

00:08:45,760 --> 00:08:51,279
works very well with any other git ops

00:08:48,080 --> 00:08:53,680
platforms such as argo cd or plug cd

00:08:51,279 --> 00:08:55,680
so in a nutshell it you you have a

00:08:53,680 --> 00:08:57,920
portal where you can manage chaos

00:08:55,680 --> 00:09:00,080
and see what's going on and you can run

00:08:57,920 --> 00:09:02,160
chaos experiments on any target

00:09:00,080 --> 00:09:04,080
either kubernetes or non-kubernetes or

00:09:02,160 --> 00:09:07,440
any public cloud

00:09:04,080 --> 00:09:10,160
you know all versions are supported

00:09:07,440 --> 00:09:10,560
so workflow is is really uh the next

00:09:10,160 --> 00:09:12,800
step

00:09:10,560 --> 00:09:14,800
in chaos engineering where you can

00:09:12,800 --> 00:09:16,720
create scenarios on the flow

00:09:14,800 --> 00:09:18,880
a set of experiments pull together

00:09:16,720 --> 00:09:21,519
either in sequence or in parallel

00:09:18,880 --> 00:09:22,000
consolidate the result and then push the

00:09:21,519 --> 00:09:24,000
metrics

00:09:22,000 --> 00:09:26,160
back to a centralized monitoring place

00:09:24,000 --> 00:09:27,200
so we've integrated this with the argo

00:09:26,160 --> 00:09:30,000
workflows

00:09:27,200 --> 00:09:30,560
it works very well right now litmus has

00:09:30,000 --> 00:09:32,560
got

00:09:30,560 --> 00:09:34,560
a lot of experiments that's already

00:09:32,560 --> 00:09:35,600
there and a lot more are coming as it is

00:09:34,560 --> 00:09:38,800
open source

00:09:35,600 --> 00:09:41,440
community continuously you know and adds

00:09:38,800 --> 00:09:43,760
this list right and then it works on

00:09:41,440 --> 00:09:45,600
non-kubernetes targets also for example

00:09:43,760 --> 00:09:48,560
all platforms or vmware

00:09:45,600 --> 00:09:49,120
openstack all such stuff so coming back

00:09:48,560 --> 00:09:51,279
to

00:09:49,120 --> 00:09:52,640
how you can use the main use case that

00:09:51,279 --> 00:09:55,120
we are talking about today

00:09:52,640 --> 00:09:55,920
how can you use chaos in ci pipelines

00:09:55,120 --> 00:09:59,920
and

00:09:55,920 --> 00:10:00,560
more more interestingly how you can use

00:09:59,920 --> 00:10:02,480
it in

00:10:00,560 --> 00:10:04,079
github actions right so what we have

00:10:02,480 --> 00:10:07,040
done is we have developed

00:10:04,079 --> 00:10:07,920
a ci library on top of litmus which you

00:10:07,040 --> 00:10:10,640
can actually

00:10:07,920 --> 00:10:12,079
use as a chaos stage all you just need

00:10:10,640 --> 00:10:14,959
to do is you know

00:10:12,079 --> 00:10:15,360
you implement a chaos action that calls

00:10:14,959 --> 00:10:17,440
this

00:10:15,360 --> 00:10:19,760
library function and then the entire

00:10:17,440 --> 00:10:22,640
litmus experiment just gets uh

00:10:19,760 --> 00:10:24,320
executed automatically so it's as simple

00:10:22,640 --> 00:10:27,360
as just calling this api

00:10:24,320 --> 00:10:29,440
and then you're you're good so uh very

00:10:27,360 --> 00:10:32,000
the same infrastructure can be used

00:10:29,440 --> 00:10:33,360
or is being used with other pipelines

00:10:32,000 --> 00:10:36,640
too spinnaker or

00:10:33,360 --> 00:10:37,279
captain or gitlab so let's go ahead and

00:10:36,640 --> 00:10:40,800
actually

00:10:37,279 --> 00:10:43,360
uh show uh chaos actions um

00:10:40,800 --> 00:10:44,240
in in reality right so how we've been

00:10:43,360 --> 00:10:46,560
using

00:10:44,240 --> 00:10:47,440
so when chaos when github actions was

00:10:46,560 --> 00:10:50,800
introduced

00:10:47,440 --> 00:10:51,360
we ourselves uh litmus project uh moved

00:10:50,800 --> 00:10:54,399
our

00:10:51,360 --> 00:10:56,640
ci uh from something else to github

00:10:54,399 --> 00:10:58,560
actions so we are using it of actions

00:10:56,640 --> 00:11:00,480
and we're using chaos to test our own

00:10:58,560 --> 00:11:03,120
chaos engineering code

00:11:00,480 --> 00:11:04,079
i'll show how we have been using it but

00:11:03,120 --> 00:11:06,240
primarily

00:11:04,079 --> 00:11:07,760
with if you want to introduce github

00:11:06,240 --> 00:11:08,480
actions you just introduce a new

00:11:07,760 --> 00:11:11,360
workflow

00:11:08,480 --> 00:11:12,240
or a stage right and you call that as

00:11:11,360 --> 00:11:14,240
chaos stage

00:11:12,240 --> 00:11:15,680
and then you keep calling uh chaos

00:11:14,240 --> 00:11:17,920
experiments

00:11:15,680 --> 00:11:19,360
or chaos actions within it right it

00:11:17,920 --> 00:11:21,440
generally includes

00:11:19,360 --> 00:11:22,480
um you call certain functions that

00:11:21,440 --> 00:11:24,320
installs litmus

00:11:22,480 --> 00:11:26,560
and at the end of the chaos stage of the

00:11:24,320 --> 00:11:29,760
workflow you clean up bitmus

00:11:26,560 --> 00:11:32,800
and in the middle you can call uh

00:11:29,760 --> 00:11:35,279
as many chaos experiments as your as

00:11:32,800 --> 00:11:37,920
your platform or application deserve

00:11:35,279 --> 00:11:38,560
you can do them in uh parallel or in

00:11:37,920 --> 00:11:41,839
sequence

00:11:38,560 --> 00:11:45,120
right so you can also use

00:11:41,839 --> 00:11:47,440
chaos actions against

00:11:45,120 --> 00:11:48,640
an external kubernetes cluster we

00:11:47,440 --> 00:11:50,480
support

00:11:48,640 --> 00:11:53,600
passing cube config through environment

00:11:50,480 --> 00:11:56,880
variables and the rest of it works fine

00:11:53,600 --> 00:11:59,839
as similar to a local pipeline so

00:11:56,880 --> 00:12:00,320
as part of your github uh trigger you

00:11:59,839 --> 00:12:02,959
can

00:12:00,320 --> 00:12:04,160
call entire chaos by plane on a remote

00:12:02,959 --> 00:12:07,680
kubernetes cluster

00:12:04,160 --> 00:12:11,120
and you can test it as well right so

00:12:07,680 --> 00:12:14,320
let's see them in action so we can go

00:12:11,120 --> 00:12:18,160
to we have published uh

00:12:14,320 --> 00:12:20,560
chaos actions litmus chaos actions on

00:12:18,160 --> 00:12:22,839
on the marketplace so you can go and

00:12:20,560 --> 00:12:24,959
search for

00:12:22,839 --> 00:12:29,360
chaos

00:12:24,959 --> 00:12:32,399
so you'll see kubernetes chaos here

00:12:29,360 --> 00:12:33,600
and what we have done is we have

00:12:32,399 --> 00:12:37,120
actually created

00:12:33,600 --> 00:12:39,440
one single action and call

00:12:37,120 --> 00:12:41,040
any experiment that you wish to execute

00:12:39,440 --> 00:12:43,600
as an environment variable

00:12:41,040 --> 00:12:44,160
so it's it's pretty easy you don't have

00:12:43,600 --> 00:12:45,839
to learn

00:12:44,160 --> 00:12:47,680
a lot of actions it's just one action

00:12:45,839 --> 00:12:50,880
right now we're trying to implement

00:12:47,680 --> 00:12:52,580
more uh probably workflows

00:12:50,880 --> 00:12:53,920
so you can just uh

00:12:52,580 --> 00:12:56,240
[Music]

00:12:53,920 --> 00:12:57,519
use this one single action and then it

00:12:56,240 --> 00:13:00,880
really uh

00:12:57,519 --> 00:13:04,560
includes three steps as i said first you

00:13:00,880 --> 00:13:06,959
include a script to deploy

00:13:04,560 --> 00:13:09,440
bitmas and then later to clean it in the

00:13:06,959 --> 00:13:11,760
middle you call this

00:13:09,440 --> 00:13:13,839
actions and then call what is the

00:13:11,760 --> 00:13:15,040
experiment or where the target is the

00:13:13,839 --> 00:13:17,519
application through all

00:13:15,040 --> 00:13:19,440
environmental variables right and these

00:13:17,519 --> 00:13:21,920
are the environmental variables as

00:13:19,440 --> 00:13:23,200
as you keep tuning it you are in control

00:13:21,920 --> 00:13:25,519
of what experiment

00:13:23,200 --> 00:13:26,480
should be executed against which target

00:13:25,519 --> 00:13:29,279
right

00:13:26,480 --> 00:13:29,920
and uh i have a sample project that i'm

00:13:29,279 --> 00:13:34,079
going to show

00:13:29,920 --> 00:13:37,440
right now uh it's a simple uh

00:13:34,079 --> 00:13:40,480
project where we're going to have

00:13:37,440 --> 00:13:41,440
a chaos action so let me go here and

00:13:40,480 --> 00:13:44,959
explain

00:13:41,440 --> 00:13:48,079
how this workflow is written

00:13:44,959 --> 00:13:48,560
so this is a demo chaos action and it

00:13:48,079 --> 00:13:52,000
uses

00:13:48,560 --> 00:13:53,760
uh chaos i mean the github actions

00:13:52,000 --> 00:13:55,199
all we're going to do is set up a

00:13:53,760 --> 00:13:58,240
kubernetes cluster

00:13:55,199 --> 00:14:01,440
kind cluster on the fly and install

00:13:58,240 --> 00:14:03,360
uh nginx that's one stage so

00:14:01,440 --> 00:14:04,639
then i'm going to introduce the chaos

00:14:03,360 --> 00:14:07,839
stage right

00:14:04,639 --> 00:14:09,760
so it's all about setup litmus

00:14:07,839 --> 00:14:11,279
it's as simple as that and then run a

00:14:09,760 --> 00:14:14,320
couple of experiments

00:14:11,279 --> 00:14:16,079
uh i'm just calling this actions

00:14:14,320 --> 00:14:18,480
chaos actions with this environment

00:14:16,079 --> 00:14:19,519
variables you can see chaos experiment

00:14:18,480 --> 00:14:22,079
is modulate

00:14:19,519 --> 00:14:23,199
and the same action i call again with a

00:14:22,079 --> 00:14:26,160
different experiment

00:14:23,199 --> 00:14:28,480
right and uh you're all set then of

00:14:26,160 --> 00:14:31,279
course i'm going to delete uh litmus

00:14:28,480 --> 00:14:32,000
uninstall it most at the end of it so

00:14:31,279 --> 00:14:35,600
you go

00:14:32,000 --> 00:14:39,199
and see this in action uh let me just go

00:14:35,600 --> 00:14:41,519
run it just for the sake of it

00:14:39,199 --> 00:14:42,560
and while it gets launched it might take

00:14:41,519 --> 00:14:45,920
a minute i can

00:14:42,560 --> 00:14:46,399
go and see uh show you how uh this was

00:14:45,920 --> 00:14:49,519
done

00:14:46,399 --> 00:14:50,720
uh earlier right so it's really about uh

00:14:49,519 --> 00:14:53,199
setting up litmus

00:14:50,720 --> 00:14:55,519
and uh running a couple of experiments

00:14:53,199 --> 00:14:55,760
and uninstalling it rest of it is your

00:14:55,519 --> 00:14:58,880
own

00:14:55,760 --> 00:15:02,079
action pipeline right so if you go and

00:14:58,880 --> 00:15:04,480
uh see this modulate experiment all you

00:15:02,079 --> 00:15:05,360
called is just one line but we do the

00:15:04,480 --> 00:15:07,600
heavy lifting

00:15:05,360 --> 00:15:08,399
underneath and the developer should not

00:15:07,600 --> 00:15:10,959
be

00:15:08,399 --> 00:15:12,800
worried about uh you know what goes on

00:15:10,959 --> 00:15:13,440
underneath but you can generally go and

00:15:12,800 --> 00:15:15,519
see

00:15:13,440 --> 00:15:17,040
you know what goes on and uh you know

00:15:15,519 --> 00:15:18,880
what the results

00:15:17,040 --> 00:15:20,880
of course you can integrate this with a

00:15:18,880 --> 00:15:22,079
lot of monitoring tools which i'm not

00:15:20,880 --> 00:15:25,600
talking about it

00:15:22,079 --> 00:15:28,240
but what it really is is

00:15:25,600 --> 00:15:28,880
a simple way to execute chaos into your

00:15:28,240 --> 00:15:32,000
pipelines

00:15:28,880 --> 00:15:35,120
right and uh this is our repository

00:15:32,000 --> 00:15:39,199
where we've been using uh github

00:15:35,120 --> 00:15:41,440
actions as a way of testing our own

00:15:39,199 --> 00:15:42,560
merged code and as you can see that we

00:15:41,440 --> 00:15:45,680
got build

00:15:42,560 --> 00:15:46,240
and we got your e2e pipelines and that's

00:15:45,680 --> 00:15:49,279
where

00:15:46,240 --> 00:15:53,120
we are running our own um

00:15:49,279 --> 00:15:56,639
chaos actions right so let's go and see

00:15:53,120 --> 00:15:58,320
one run pipeline so you will see some a

00:15:56,639 --> 00:16:00,800
lot of generic tests

00:15:58,320 --> 00:16:03,279
this generic test or you know set up

00:16:00,800 --> 00:16:04,000
lateness and for every code much that we

00:16:03,279 --> 00:16:06,399
do

00:16:04,000 --> 00:16:07,440
we go on test if our own experiments are

00:16:06,399 --> 00:16:09,360
working or not

00:16:07,440 --> 00:16:11,839
so if you are looking at how to execute

00:16:09,360 --> 00:16:14,240
a particular experiment you can go to

00:16:11,839 --> 00:16:16,399
our own pipelines and see how we are

00:16:14,240 --> 00:16:18,880
using chaos actions and github

00:16:16,399 --> 00:16:20,639
uh kios experiments and github actions

00:16:18,880 --> 00:16:24,480
you can just take that as an example

00:16:20,639 --> 00:16:27,040
and then do them so with that um

00:16:24,480 --> 00:16:28,160
i think you know i would like to uh take

00:16:27,040 --> 00:16:31,519
some questions

00:16:28,160 --> 00:16:34,160
uh if there are any right so

00:16:31,519 --> 00:16:34,720
in in summary it's it's really a very

00:16:34,160 --> 00:16:38,560
very

00:16:34,720 --> 00:16:40,959
uh straightforward way of using

00:16:38,560 --> 00:16:41,680
github actions and litmus chaos we try

00:16:40,959 --> 00:16:45,040
to make it

00:16:41,680 --> 00:16:45,040
as simple as possible

00:16:52,639 --> 00:16:57,759
much appreciated for such a wonderful

00:16:55,360 --> 00:17:00,160
session

00:16:57,759 --> 00:17:01,199
and a huge shout out to the wonderful

00:17:00,160 --> 00:17:03,680
and wacky

00:17:01,199 --> 00:17:05,199
western india developer community and

00:17:03,680 --> 00:17:08,640
with that let's jump into

00:17:05,199 --> 00:17:11,839
the q a diva okay the

00:17:08,640 --> 00:17:14,559
question for you uma is

00:17:11,839 --> 00:17:18,160
are developing to use chaos engineering

00:17:14,559 --> 00:17:20,640
or is it mainly for operations

00:17:18,160 --> 00:17:21,360
it's been for operations traditionally

00:17:20,640 --> 00:17:23,679
but that's

00:17:21,360 --> 00:17:24,559
we are in the new world where cloud

00:17:23,679 --> 00:17:27,919
native

00:17:24,559 --> 00:17:30,720
ecosystem is changing the way we do id

00:17:27,919 --> 00:17:33,039
right so chaos engineering in my opinion

00:17:30,720 --> 00:17:34,400
is going to be a common place in

00:17:33,039 --> 00:17:36,400
developer's tool set

00:17:34,400 --> 00:17:38,720
right so that's what we are set out to

00:17:36,400 --> 00:17:39,440
do and we are at the beginning of that

00:17:38,720 --> 00:17:41,760
cycle

00:17:39,440 --> 00:17:42,799
right so first of all you need to create

00:17:41,760 --> 00:17:45,039
a good tool set

00:17:42,799 --> 00:17:46,000
an open source tool set that's easy to

00:17:45,039 --> 00:17:49,360
use and it

00:17:46,000 --> 00:17:51,280
makes a lot of sense uh by using it

00:17:49,360 --> 00:17:52,640
and if it produces results developers

00:17:51,280 --> 00:17:54,640
will take take it

00:17:52,640 --> 00:17:57,440
and as i discussed in this session we

00:17:54,640 --> 00:18:00,160
expect developers to start looking at

00:17:57,440 --> 00:18:01,600
uh the test uh not only negative tests

00:18:00,160 --> 00:18:04,080
but there are chaos tests

00:18:01,600 --> 00:18:05,440
outside your own code that your code

00:18:04,080 --> 00:18:07,280
should really depend on

00:18:05,440 --> 00:18:09,120
so it's really going to be for

00:18:07,280 --> 00:18:11,600
developers um

00:18:09,120 --> 00:18:13,039
already now in a small percentage but

00:18:11,600 --> 00:18:14,320
there's going to be more percentage of

00:18:13,039 --> 00:18:17,360
developers using

00:18:14,320 --> 00:18:17,360
chaos very soon

00:18:17,600 --> 00:18:20,640
wow that's going to change a lot of

00:18:18,960 --> 00:18:23,039
things and thanks a lot for

00:18:20,640 --> 00:18:23,919
kind of enlightening us on to that next

00:18:23,039 --> 00:18:26,720
one up

00:18:23,919 --> 00:18:27,280
we have for you is what are the most

00:18:26,720 --> 00:18:30,240
common

00:18:27,280 --> 00:18:33,360
chaos actions do you see uh getting used

00:18:30,240 --> 00:18:36,080
by the users as of now

00:18:33,360 --> 00:18:36,960
right um the scales actions a lot of

00:18:36,080 --> 00:18:39,520
them are there

00:18:36,960 --> 00:18:41,760
i mean chaos experiments there is only

00:18:39,520 --> 00:18:42,880
one chaos action that we have written

00:18:41,760 --> 00:18:45,280
right now

00:18:42,880 --> 00:18:47,440
using which you can introduce whatever

00:18:45,280 --> 00:18:48,880
the chaos experiment that you want using

00:18:47,440 --> 00:18:51,760
the environmental variable

00:18:48,880 --> 00:18:53,360
right and usually either developers or

00:18:51,760 --> 00:18:54,799
whoever is trying to do chaos and

00:18:53,360 --> 00:18:57,280
studying in the beginning

00:18:54,799 --> 00:18:58,480
they would want to take the most simple

00:18:57,280 --> 00:19:02,160
chaos experiments

00:18:58,480 --> 00:19:04,080
right so port eviction and port delayed

00:19:02,160 --> 00:19:06,480
is is a very common thing right

00:19:04,080 --> 00:19:08,880
kubernetes can kick any part out

00:19:06,480 --> 00:19:10,640
based on the resource constraints so you

00:19:08,880 --> 00:19:12,400
it's safe to do a port delay

00:19:10,640 --> 00:19:14,640
right because kubernetes is mainstream

00:19:12,400 --> 00:19:17,360
right now so you go and actually

00:19:14,640 --> 00:19:20,400
use such chaos experiments to learn the

00:19:17,360 --> 00:19:23,679
benefits of chaos and how to use chaos

00:19:20,400 --> 00:19:26,320
and you generally people use

00:19:23,679 --> 00:19:27,360
port delay to cpu hog memory hog because

00:19:26,320 --> 00:19:30,480
you know these are

00:19:27,360 --> 00:19:31,120
less intrusive and you learn but

00:19:30,480 --> 00:19:34,400
generally

00:19:31,120 --> 00:19:36,000
what we also see is people go all the

00:19:34,400 --> 00:19:38,240
way to the extent of

00:19:36,000 --> 00:19:40,640
breaking some infrastructure for example

00:19:38,240 --> 00:19:44,000
a disk fail right or disk delete

00:19:40,640 --> 00:19:46,880
or network loss network uh

00:19:44,000 --> 00:19:48,799
delay all this kind of thing one of the

00:19:46,880 --> 00:19:51,600
other common things that we have seen is

00:19:48,799 --> 00:19:52,400
what happens if my kubernetes itself uh

00:19:51,600 --> 00:19:55,679
gets stuck

00:19:52,400 --> 00:19:56,080
right so how do i simulate the scenario

00:19:55,679 --> 00:19:57,760
of

00:19:56,080 --> 00:19:59,200
something wrong going in the kubernetes

00:19:57,760 --> 00:20:02,080
itself and

00:19:59,200 --> 00:20:04,240
you take a cue blade out right so we

00:20:02,080 --> 00:20:07,440
have a cubelet kill experiment

00:20:04,240 --> 00:20:10,559
uh that's where people find oh okay

00:20:07,440 --> 00:20:12,880
so it's pretty easy to test my code

00:20:10,559 --> 00:20:13,600
uh when kubernetes is under trouble you

00:20:12,880 --> 00:20:15,919
just call

00:20:13,600 --> 00:20:17,440
a chaos action with cubelet dom and

00:20:15,919 --> 00:20:18,640
within minutes you'll be able to

00:20:17,440 --> 00:20:21,200
actually test

00:20:18,640 --> 00:20:25,039
uh whether your code is able to sustain

00:20:21,200 --> 00:20:25,039
your service is able to sustain or not

00:20:26,320 --> 00:20:29,520
that's that's insightful thank you so

00:20:28,640 --> 00:20:32,080
much

00:20:29,520 --> 00:20:33,919
uh what more can we expect in the future

00:20:32,080 --> 00:20:36,320
with github actions from kiosk

00:20:33,919 --> 00:20:39,280
perspective

00:20:36,320 --> 00:20:39,840
right um our first goal is really you

00:20:39,280 --> 00:20:42,640
know

00:20:39,840 --> 00:20:43,760
because we like github actions um

00:20:42,640 --> 00:20:45,760
because we are on github

00:20:43,760 --> 00:20:46,880
right so we've been using other ci

00:20:45,760 --> 00:20:49,120
platforms

00:20:46,880 --> 00:20:50,080
and let's actually move on to github

00:20:49,120 --> 00:20:53,440
actions so

00:20:50,080 --> 00:20:56,400
we wrote what we needed uh to begin with

00:20:53,440 --> 00:20:57,440
and recently we have added a lot of

00:20:56,400 --> 00:21:00,880
capabilities

00:20:57,440 --> 00:21:03,679
uh into chaos tool uh

00:21:00,880 --> 00:21:04,799
litmus to make it uh useful for

00:21:03,679 --> 00:21:07,840
enterprise users

00:21:04,799 --> 00:21:08,799
uh who use uh i know large deployments

00:21:07,840 --> 00:21:11,840
and all

00:21:08,799 --> 00:21:13,120
so as part of that we created chaos

00:21:11,840 --> 00:21:15,760
workflows

00:21:13,120 --> 00:21:17,520
right which are nothing but a set of

00:21:15,760 --> 00:21:19,679
experiments you can put together

00:21:17,520 --> 00:21:20,880
you can stitch together to create a

00:21:19,679 --> 00:21:23,039
chaos scenario

00:21:20,880 --> 00:21:24,000
right usually the problems happen not

00:21:23,039 --> 00:21:26,400
because a small

00:21:24,000 --> 00:21:27,360
fault has happened but because you know

00:21:26,400 --> 00:21:29,760
something

00:21:27,360 --> 00:21:32,000
you know a dual failure or triple

00:21:29,760 --> 00:21:33,679
failure happened in an unexpected way

00:21:32,000 --> 00:21:35,840
you wanted to simulate all this stuff

00:21:33,679 --> 00:21:38,640
and that's what a chaos workflow can do

00:21:35,840 --> 00:21:39,360
and you can automate that also so can i

00:21:38,640 --> 00:21:41,600
introduce

00:21:39,360 --> 00:21:42,960
chaos workflows through github actions

00:21:41,600 --> 00:21:44,400
right of course it's going to be a

00:21:42,960 --> 00:21:48,159
little bit more

00:21:44,400 --> 00:21:50,960
um difficult than or

00:21:48,159 --> 00:21:51,200
cumbersome than a simple chaos action of

00:21:50,960 --> 00:21:53,760
an

00:21:51,200 --> 00:21:54,559
experiment but that's what we are trying

00:21:53,760 --> 00:21:57,679
to

00:21:54,559 --> 00:21:58,559
look at developing bring in uh chaos

00:21:57,679 --> 00:22:01,840
workflows

00:21:58,559 --> 00:22:03,919
uh as a way uh to test uh complex

00:22:01,840 --> 00:22:04,640
scenarios in your pipelines using github

00:22:03,919 --> 00:22:07,360
actions

00:22:04,640 --> 00:22:07,919
so we might write uh one more chaos

00:22:07,360 --> 00:22:12,000
action

00:22:07,919 --> 00:22:12,880
called chaos workflow and then we are

00:22:12,000 --> 00:22:15,600
also looking

00:22:12,880 --> 00:22:17,039
forward to integrate some analytics you

00:22:15,600 --> 00:22:18,640
know if github is providing

00:22:17,039 --> 00:22:20,159
uh some analytics or in general

00:22:18,640 --> 00:22:23,120
prometheus is a way

00:22:20,159 --> 00:22:25,360
uh to observe the analytics of the ci

00:22:23,120 --> 00:22:27,600
platforms as well right so

00:22:25,360 --> 00:22:28,720
uh the observability and workflows are

00:22:27,600 --> 00:22:31,520
the next things that

00:22:28,720 --> 00:22:31,520
we're trying to do

00:22:32,960 --> 00:22:36,559
that's great and uh we will just take

00:22:35,440 --> 00:22:38,960
one more before

00:22:36,559 --> 00:22:40,000
we let you go to github discussions and

00:22:38,960 --> 00:22:41,840
this is again a question

00:22:40,000 --> 00:22:43,440
which everybody got asked what is your

00:22:41,840 --> 00:22:46,320
favorite github feature

00:22:43,440 --> 00:22:46,320
that you use the most

00:22:46,720 --> 00:22:49,760
um i know a lot of people would like to

00:22:48,640 --> 00:22:52,080
say

00:22:49,760 --> 00:22:53,760
uh you know the latest feature i'm

00:22:52,080 --> 00:22:54,960
pretty excited of course github actions

00:22:53,760 --> 00:22:58,400
we like them

00:22:54,960 --> 00:23:01,440
but you know as an open source um

00:22:58,400 --> 00:23:04,159
maintainer i want my community uh

00:23:01,440 --> 00:23:04,640
to be working very well on github right

00:23:04,159 --> 00:23:08,159
so

00:23:04,640 --> 00:23:10,400
the age old feature github issues right

00:23:08,159 --> 00:23:12,240
we've been using everybody uses github

00:23:10,400 --> 00:23:12,799
issues as a way to ask questions as a

00:23:12,240 --> 00:23:14,720
way to

00:23:12,799 --> 00:23:16,400
go and find answers right you ask a

00:23:14,720 --> 00:23:18,559
question you answer

00:23:16,400 --> 00:23:19,840
and then a year down the line somebody

00:23:18,559 --> 00:23:22,400
faces the same question

00:23:19,840 --> 00:23:23,600
you know they're all google indexed and

00:23:22,400 --> 00:23:25,520
you search on google

00:23:23,600 --> 00:23:26,880
it takes you to github issue thread

00:23:25,520 --> 00:23:29,120
right so

00:23:26,880 --> 00:23:30,240
i don't know it's a simple feature uh no

00:23:29,120 --> 00:23:32,640
complexity but

00:23:30,240 --> 00:23:34,159
in terms of uh the productivity that we

00:23:32,640 --> 00:23:37,280
get out of github issues

00:23:34,159 --> 00:23:38,960
the entire community gets is really

00:23:37,280 --> 00:23:41,279
awesome

00:23:38,960 --> 00:23:42,000
oh yes the collaboration it uh it

00:23:41,279 --> 00:23:44,480
enhances

00:23:42,000 --> 00:23:45,120
is really really awesome thank you for

00:23:44,480 --> 00:23:47,600
calling that

00:23:45,120 --> 00:23:48,480
out uh uma and thank you again for

00:23:47,600 --> 00:23:51,039
joining us

00:23:48,480 --> 00:23:52,720
folks remember to connect with uma on

00:23:51,039 --> 00:23:54,640
discussions and take the chaos

00:23:52,720 --> 00:23:57,360
engineering discussion forward

00:23:54,640 --> 00:23:59,120
thank you again for joining thank you

00:23:57,360 --> 00:24:01,840
for inviting me great to be here nice

00:23:59,120 --> 00:24:01,840
talking to you guys

00:24:02,840 --> 00:24:06,400
bye

00:24:05,220 --> 00:24:08,480
[Music]

00:24:06,400 --> 00:24:08,480

YouTube URL: https://www.youtube.com/watch?v=K7E-z5u8q1s


