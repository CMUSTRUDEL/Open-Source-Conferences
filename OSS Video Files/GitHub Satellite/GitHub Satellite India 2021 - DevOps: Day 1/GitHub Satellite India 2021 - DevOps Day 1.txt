Title: GitHub Satellite India 2021 - DevOps Day 1
Publication date: 2021-03-26
Playlist: GitHub Satellite India 2021 - DevOps: Day 1
Description: 
	A community connected by code. March 26-27, India

Join us virtually for two days dedicated to celebrating India's developer community. Expect announcements from GitHub leaders, hands-on workshops, and inspiring performances by artists who code.

Increase efficiency, automate workflows, and create secure software all at once.

https://githubsatellite.com
Captions: 
	00:01:10,840 --> 00:01:13,840
down

00:01:52,840 --> 00:01:55,840
my

00:02:06,840 --> 00:02:09,840
my

00:02:20,840 --> 00:02:23,840
so

00:03:16,840 --> 00:03:19,840
so

00:04:26,840 --> 00:04:29,840
foreign

00:05:36,840 --> 00:05:39,840
so

00:07:00,840 --> 00:07:03,840
my

00:07:14,840 --> 00:07:17,840
so

00:07:56,840 --> 00:07:59,840
now

00:08:10,840 --> 00:08:13,840
so

00:10:16,839 --> 00:10:19,839
do

00:14:14,839 --> 00:14:17,839
so

00:15:38,839 --> 00:15:41,839
so

00:18:12,840 --> 00:18:15,840
so

00:20:32,840 --> 00:20:35,840
so

00:21:14,840 --> 00:21:17,840
so

00:21:28,840 --> 00:21:31,840
so

00:21:56,840 --> 00:21:59,840
so

00:22:10,840 --> 00:22:13,840
so

00:22:38,840 --> 00:22:41,840
so

00:23:20,840 --> 00:23:23,840
so

00:23:48,840 --> 00:23:51,840
so

00:24:44,840 --> 00:24:47,840
six

00:27:04,840 --> 00:27:07,840
so

00:27:18,840 --> 00:27:21,840
so

00:27:32,840 --> 00:27:35,840
so

00:28:14,840 --> 00:28:17,840
so

00:29:52,840 --> 00:29:55,840
so

00:30:20,840 --> 00:30:23,840
so

00:30:34,840 --> 00:30:37,840
so

00:32:26,840 --> 00:32:29,840
so

00:32:40,840 --> 00:32:43,840
do

00:32:54,840 --> 00:32:57,840
so

00:34:32,839 --> 00:34:36,960
so

00:34:34,320 --> 00:34:38,320
hello everybody and thank you for being

00:34:36,960 --> 00:34:41,440
here for the first

00:34:38,320 --> 00:34:43,200
ever github satellite india i

00:34:41,440 --> 00:34:45,359
so wish i could be there with you in

00:34:43,200 --> 00:34:47,280
person today but i'm delighted to be

00:34:45,359 --> 00:34:48,240
joining you from our office here in san

00:34:47,280 --> 00:34:50,000
francisco

00:34:48,240 --> 00:34:51,679
and you're actually the first folks to

00:34:50,000 --> 00:34:54,240
get to see our beautiful

00:34:51,679 --> 00:34:56,240
new remodel so thank you for being here

00:34:54,240 --> 00:34:59,200
with us

00:34:56,240 --> 00:35:00,960
today i'm excited to announce three new

00:34:59,200 --> 00:35:03,119
programs to support

00:35:00,960 --> 00:35:05,520
current and future developers here in

00:35:03,119 --> 00:35:07,599
india but before we get to that

00:35:05,520 --> 00:35:09,839
i just want to take a moment to reflect

00:35:07,599 --> 00:35:12,560
back over the course of the last year

00:35:09,839 --> 00:35:13,359
and celebrate the growth energy and

00:35:12,560 --> 00:35:16,400
passion

00:35:13,359 --> 00:35:18,560
of the developer community in india i

00:35:16,400 --> 00:35:20,800
can't believe that it was a year ago

00:35:18,560 --> 00:35:21,920
that we launched in india and it's still

00:35:20,800 --> 00:35:24,960
one of my favorite

00:35:21,920 --> 00:35:26,640
experiences since joining github as i

00:35:24,960 --> 00:35:27,440
told folks when i arrived back to the

00:35:26,640 --> 00:35:30,160
u.s

00:35:27,440 --> 00:35:31,680
the positive energy and drive here is

00:35:30,160 --> 00:35:33,760
palpable

00:35:31,680 --> 00:35:34,960
it was such a thrill to get to be there

00:35:33,760 --> 00:35:37,920
for our first

00:35:34,960 --> 00:35:39,359
ever meetup in india and meet some of

00:35:37,920 --> 00:35:41,920
our campus experts

00:35:39,359 --> 00:35:44,720
hear from project maintainers and get to

00:35:41,920 --> 00:35:46,640
know developers from across the country

00:35:44,720 --> 00:35:48,240
getting to meet up with folks in india

00:35:46,640 --> 00:35:48,640
and learn about the work you were doing

00:35:48,240 --> 00:35:51,520
was

00:35:48,640 --> 00:35:53,440
truly inspirational and i could not be

00:35:51,520 --> 00:35:54,720
more thrilled to kick off github

00:35:53,440 --> 00:35:57,040
satellite india

00:35:54,720 --> 00:35:58,000
and celebrate the achievements and the

00:35:57,040 --> 00:36:00,720
potential

00:35:58,000 --> 00:36:01,839
of this thriving community i don't think

00:36:00,720 --> 00:36:04,079
there's a question in

00:36:01,839 --> 00:36:04,880
anyone's minds that india is an

00:36:04,079 --> 00:36:07,599
innovation

00:36:04,880 --> 00:36:08,640
powerhouse and software is right at the

00:36:07,599 --> 00:36:11,200
center

00:36:08,640 --> 00:36:12,079
there is so much incredible engineering

00:36:11,200 --> 00:36:15,520
talent here

00:36:12,079 --> 00:36:18,240
that we already have over 150 hovers in

00:36:15,520 --> 00:36:19,920
india but the best part of all of this

00:36:18,240 --> 00:36:23,119
is that it's brought us closer to

00:36:19,920 --> 00:36:25,119
you to the developer community here in

00:36:23,119 --> 00:36:27,520
india and given us exposure to the

00:36:25,119 --> 00:36:29,520
vibrant community that you've built

00:36:27,520 --> 00:36:31,040
you've joined us for quarterly meetups

00:36:29,520 --> 00:36:31,839
to talk about the projects you're

00:36:31,040 --> 00:36:34,000
working on

00:36:31,839 --> 00:36:35,599
the challenges you're facing and the

00:36:34,000 --> 00:36:38,480
vision for the future

00:36:35,599 --> 00:36:40,560
you've participated in more than 140

00:36:38,480 --> 00:36:43,040
hackathons and tech workshops

00:36:40,560 --> 00:36:45,359
in just the last 12 months and some

00:36:43,040 --> 00:36:46,880
incredible work and brilliant ideas have

00:36:45,359 --> 00:36:48,720
come out of these events

00:36:46,880 --> 00:36:50,720
and you joined us in the lost votes

00:36:48,720 --> 00:36:53,200
campaign to work towards solving the

00:36:50,720 --> 00:36:55,359
challenges of electoral migration

00:36:53,200 --> 00:36:57,040
dreaming up and building solutions to

00:36:55,359 --> 00:36:58,720
support remote voting

00:36:57,040 --> 00:37:00,720
for indian citizens who are not

00:36:58,720 --> 00:37:02,720
physically present in their registered

00:37:00,720 --> 00:37:05,280
city on election day

00:37:02,720 --> 00:37:07,359
thousands of india's best tech minds

00:37:05,280 --> 00:37:08,160
came together to create a technology

00:37:07,359 --> 00:37:10,560
solution

00:37:08,160 --> 00:37:12,720
to solve this problem on github and

00:37:10,560 --> 00:37:14,800
we're so proud of the work that is still

00:37:12,720 --> 00:37:15,520
being done to support this important

00:37:14,800 --> 00:37:17,839
effort

00:37:15,520 --> 00:37:19,440
it's been an incredible year and that's

00:37:17,839 --> 00:37:21,599
thanks to all of you

00:37:19,440 --> 00:37:23,839
and the passion innovation and

00:37:21,599 --> 00:37:24,800
creativity that you bring to the github

00:37:23,839 --> 00:37:28,320
platform

00:37:24,800 --> 00:37:30,720
every single day so let's take a quick

00:37:28,320 --> 00:37:34,640
look at the last year in review

00:37:30,720 --> 00:37:36,960
in the last year alone more than 1.8

00:37:34,640 --> 00:37:39,440
million developers have joined github

00:37:36,960 --> 00:37:44,160
the developer community in india

00:37:39,440 --> 00:37:47,359
now totals 5.8 million developers strong

00:37:44,160 --> 00:37:50,079
together you've created 7.3

00:37:47,359 --> 00:37:50,480
million repositories in the last year

00:37:50,079 --> 00:37:53,839
that's

00:37:50,480 --> 00:37:55,680
81 more than the year before

00:37:53,839 --> 00:37:57,440
think of the potential of all of these

00:37:55,680 --> 00:37:59,920
new projects

00:37:57,440 --> 00:38:00,560
the number of contributions commits

00:37:59,920 --> 00:38:03,839
issues

00:38:00,560 --> 00:38:06,880
gifts prs team discussions increased by

00:38:03,839 --> 00:38:08,880
75 percent in india and that's compared

00:38:06,880 --> 00:38:09,839
to about 40 percent of the rest of the

00:38:08,880 --> 00:38:12,160
world

00:38:09,839 --> 00:38:13,359
in public open source repositories

00:38:12,160 --> 00:38:15,839
specifically

00:38:13,359 --> 00:38:16,880
the number of contributors increased by

00:38:15,839 --> 00:38:19,359
80 percent

00:38:16,880 --> 00:38:20,640
over the previous year and most

00:38:19,359 --> 00:38:23,599
strikingly

00:38:20,640 --> 00:38:26,079
a million developers in india created

00:38:23,599 --> 00:38:27,040
their first repository on github this

00:38:26,079 --> 00:38:29,200
year

00:38:27,040 --> 00:38:31,200
that's equivalent to a developer in

00:38:29,200 --> 00:38:32,160
india creating their first repo on

00:38:31,200 --> 00:38:35,440
github

00:38:32,160 --> 00:38:37,520
every 30 seconds throughout the year a

00:38:35,440 --> 00:38:38,800
million developers creating their first

00:38:37,520 --> 00:38:42,640
repo

00:38:38,800 --> 00:38:44,480
wow these numbers are incredible

00:38:42,640 --> 00:38:47,280
the growth of the community here will

00:38:44,480 --> 00:38:49,760
not only accelerate the indian economy

00:38:47,280 --> 00:38:52,079
but have a lasting positive impact

00:38:49,760 --> 00:38:54,240
across the world

00:38:52,079 --> 00:38:56,240
all of these numbers mean that india is

00:38:54,240 --> 00:38:58,960
the fastest growing country

00:38:56,240 --> 00:39:01,119
in the world in terms of developers

00:38:58,960 --> 00:39:03,599
contributing to open source

00:39:01,119 --> 00:39:05,680
this is incredible and we're grateful

00:39:03,599 --> 00:39:06,880
that so many of you put your trust in

00:39:05,680 --> 00:39:09,839
github

00:39:06,880 --> 00:39:11,839
after all as we say at github the open

00:39:09,839 --> 00:39:13,599
source community is incredibly

00:39:11,839 --> 00:39:15,599
interconnected

00:39:13,599 --> 00:39:16,960
in the coming years we're going to see

00:39:15,599 --> 00:39:20,079
more contributors

00:39:16,960 --> 00:39:22,400
more projects more creativity and more

00:39:20,079 --> 00:39:24,320
world-changing technology created in

00:39:22,400 --> 00:39:26,240
india than ever before

00:39:24,320 --> 00:39:28,640
and github will be here to support all

00:39:26,240 --> 00:39:29,839
of you and the developers that will join

00:39:28,640 --> 00:39:33,040
us in the future

00:39:29,839 --> 00:39:36,400
as this community continues to grow and

00:39:33,040 --> 00:39:38,160
thrive so how do we know that the future

00:39:36,400 --> 00:39:40,480
is so bright in india

00:39:38,160 --> 00:39:42,320
take a look at this small sample of the

00:39:40,480 --> 00:39:45,680
many open source projects

00:39:42,320 --> 00:39:46,720
anchored here in india chatwoot bagisto

00:39:45,680 --> 00:39:49,599
erp next

00:39:46,720 --> 00:39:50,960
hopscotch caliber this is just the tip

00:39:49,599 --> 00:39:53,119
of the iceberg

00:39:50,960 --> 00:39:54,400
open source projects in india are

00:39:53,119 --> 00:39:58,000
improving commerce

00:39:54,400 --> 00:40:01,280
communication business growth education

00:39:58,000 --> 00:40:03,760
travel and so much more several of these

00:40:01,280 --> 00:40:05,680
projects are participating in satellite

00:40:03,760 --> 00:40:06,800
so i hope you'll tune in to hear what

00:40:05,680 --> 00:40:09,520
they have to say

00:40:06,800 --> 00:40:10,000
and see how you can get involved here's

00:40:09,520 --> 00:40:12,640
a quick

00:40:10,000 --> 00:40:14,640
preview from sorev over at bagisto to

00:40:12,640 --> 00:40:18,000
share a little bit about the project

00:40:14,640 --> 00:40:22,160
and the bagisto community hello

00:40:18,000 --> 00:40:23,839
i'm saurav patek maintainer of bagisto

00:40:22,160 --> 00:40:25,280
begisto is an open source e-commerce

00:40:23,839 --> 00:40:28,800
platform that is built

00:40:25,280 --> 00:40:31,119
on laravel with the code-driven approach

00:40:28,800 --> 00:40:32,480
community-oriented solution legacy

00:40:31,119 --> 00:40:34,400
machine learning feature

00:40:32,480 --> 00:40:36,720
biggest you can handle sophisticated

00:40:34,400 --> 00:40:37,200
e-commerce websites with over a billion

00:40:36,720 --> 00:40:40,720
product

00:40:37,200 --> 00:40:42,160
skus with minimized latency this makes

00:40:40,720 --> 00:40:45,280
the e-commerce ecosystem

00:40:42,160 --> 00:40:46,240
best place for our audience open source

00:40:45,280 --> 00:40:49,520
is like a community

00:40:46,240 --> 00:40:51,599
and for us community is our own family

00:40:49,520 --> 00:40:53,760
magazine lives where its community live

00:40:51,599 --> 00:40:55,760
that is on github

00:40:53,760 --> 00:40:57,440
magazine growth over the past two years

00:40:55,760 --> 00:40:59,440
is very much attributed

00:40:57,440 --> 00:41:00,800
to our wonderful community around the

00:40:59,440 --> 00:41:03,119
world

00:41:00,800 --> 00:41:04,160
getup is not just a cold hosting

00:41:03,119 --> 00:41:06,480
platform for us

00:41:04,160 --> 00:41:09,119
it's more like a place where our

00:41:06,480 --> 00:41:11,280
community feels like home

00:41:09,119 --> 00:41:13,200
github is that one umbrella which has

00:41:11,280 --> 00:41:15,760
kept our community together

00:41:13,200 --> 00:41:17,599
fostered easy collaboration and helped

00:41:15,760 --> 00:41:20,560
to access our project growth

00:41:17,599 --> 00:41:22,240
through data driven analytics we would

00:41:20,560 --> 00:41:24,480
like to extend our thanks to github

00:41:22,240 --> 00:41:26,079
for driving the open source ecosystem in

00:41:24,480 --> 00:41:28,319
india thus resulting

00:41:26,079 --> 00:41:29,359
the very first story in e-commerce

00:41:28,319 --> 00:41:33,280
domain that is

00:41:29,359 --> 00:41:35,760
vegas still made in india thank you

00:41:33,280 --> 00:41:37,359
i love bagisto's focus on building a

00:41:35,760 --> 00:41:40,240
home for their community

00:41:37,359 --> 00:41:41,200
both in india and around the world

00:41:40,240 --> 00:41:44,160
thanks sorov

00:41:41,200 --> 00:41:46,160
for joining us now let me introduce you

00:41:44,160 --> 00:41:47,520
to someone else who i find truly

00:41:46,160 --> 00:41:50,240
inspiring

00:41:47,520 --> 00:41:52,319
sheikha mishra is from lucknow india

00:41:50,240 --> 00:41:54,400
she's a maintainer for magento

00:41:52,319 --> 00:41:56,720
which is an open source e-commerce

00:41:54,400 --> 00:41:59,200
framework that serves as the foundation

00:41:56,720 --> 00:42:00,560
for more than a hundred thousand online

00:41:59,200 --> 00:42:03,160
stores

00:42:00,560 --> 00:42:04,480
what i love about chica is she really

00:42:03,160 --> 00:42:07,760
embraces

00:42:04,480 --> 00:42:10,720
the spirit of open source she considers

00:42:07,760 --> 00:42:13,280
every aspect of her role as a maintainer

00:42:10,720 --> 00:42:15,119
down to the simplest comment on an issue

00:42:13,280 --> 00:42:18,400
to be a responsibility

00:42:15,119 --> 00:42:20,079
and an opportunity to be inclusive

00:42:18,400 --> 00:42:21,839
to support and recognize the

00:42:20,079 --> 00:42:23,520
contributions of others

00:42:21,839 --> 00:42:25,520
and to receive that support and

00:42:23,520 --> 00:42:27,760
recognition in return

00:42:25,520 --> 00:42:29,760
she calls the 30 plus magento

00:42:27,760 --> 00:42:33,119
maintainers that she works with

00:42:29,760 --> 00:42:34,079
a huge empowering community and with

00:42:33,119 --> 00:42:36,560
each commit

00:42:34,079 --> 00:42:37,200
they build on each other's work enhance

00:42:36,560 --> 00:42:39,920
their own

00:42:37,200 --> 00:42:40,880
skills and make the entire project

00:42:39,920 --> 00:42:44,160
stronger

00:42:40,880 --> 00:42:47,200
and better this mindset

00:42:44,160 --> 00:42:48,319
support appreciation recognition and

00:42:47,200 --> 00:42:50,079
skill building

00:42:48,319 --> 00:42:51,599
is what has made the open source

00:42:50,079 --> 00:42:54,880
community the driver of

00:42:51,599 --> 00:42:56,880
so much growth and innovation chica and

00:42:54,880 --> 00:42:57,599
the countless other developers like her

00:42:56,880 --> 00:42:59,760
in india

00:42:57,599 --> 00:43:02,160
who are embracing these qualities are

00:42:59,760 --> 00:43:04,720
actually lowering the barrier of entry

00:43:02,160 --> 00:43:07,200
for new developers to open source

00:43:04,720 --> 00:43:09,920
this is going to be a huge contributor

00:43:07,200 --> 00:43:12,160
to the growth of open source in india

00:43:09,920 --> 00:43:14,319
and by the way sheik is presenting on a

00:43:12,160 --> 00:43:16,400
panel shortly after this keynote

00:43:14,319 --> 00:43:19,280
so i hope you'll join and listen to what

00:43:16,400 --> 00:43:21,440
she has to say

00:43:19,280 --> 00:43:22,800
an individual developer has the

00:43:21,440 --> 00:43:25,760
potential to have an

00:43:22,800 --> 00:43:26,079
exponential impact on the community and

00:43:25,760 --> 00:43:29,440
on

00:43:26,079 --> 00:43:31,839
tech innovation overall last year

00:43:29,440 --> 00:43:33,359
we launched the github stars program as

00:43:31,839 --> 00:43:35,520
a way to recognize

00:43:33,359 --> 00:43:36,720
highlight and elevate the work of

00:43:35,520 --> 00:43:39,359
contributors who go

00:43:36,720 --> 00:43:40,400
above and beyond to build and contribute

00:43:39,359 --> 00:43:43,359
to healthy

00:43:40,400 --> 00:43:46,720
and thriving open source communities

00:43:43,359 --> 00:43:49,520
stars get early access to new features

00:43:46,720 --> 00:43:51,359
give feedback to github leaders attend

00:43:49,520 --> 00:43:54,960
and present at github events

00:43:51,359 --> 00:43:57,359
and help shape the future of github

00:43:54,960 --> 00:43:59,119
we recently welcomed our first three

00:43:57,359 --> 00:44:02,400
github stars in india

00:43:59,119 --> 00:44:04,079
nishkarsh santosh and vineet

00:44:02,400 --> 00:44:06,079
all of them are passionate about

00:44:04,079 --> 00:44:07,280
collaboration and growing the open

00:44:06,079 --> 00:44:09,599
source community

00:44:07,280 --> 00:44:11,119
and produce great content to share their

00:44:09,599 --> 00:44:12,960
knowledge with others

00:44:11,119 --> 00:44:15,280
we're looking forward to adding more

00:44:12,960 --> 00:44:17,359
developers in india to the github stars

00:44:15,280 --> 00:44:20,000
program so that we can all benefit from

00:44:17,359 --> 00:44:22,640
their experience and their perspective

00:44:20,000 --> 00:44:23,599
stories like shika's niche karshas

00:44:22,640 --> 00:44:25,680
santosh's and

00:44:23,599 --> 00:44:27,760
benitez and the millions of other

00:44:25,680 --> 00:44:30,560
developers who've found their passion in

00:44:27,760 --> 00:44:32,160
open source are truly inspiring

00:44:30,560 --> 00:44:34,319
each of you who are part of this

00:44:32,160 --> 00:44:34,960
community are what keep open source

00:44:34,319 --> 00:44:37,680
thriving

00:44:34,960 --> 00:44:38,240
and growing developing not just your own

00:44:37,680 --> 00:44:40,480
talent

00:44:38,240 --> 00:44:42,240
but inviting new folks into the open

00:44:40,480 --> 00:44:42,880
source community and supporting their

00:44:42,240 --> 00:44:45,440
growth

00:44:42,880 --> 00:44:46,880
to build software that benefits us all

00:44:45,440 --> 00:44:49,920
and as we all know

00:44:46,880 --> 00:44:52,160
many if not most developers do not get

00:44:49,920 --> 00:44:53,200
to work on open source as their primary

00:44:52,160 --> 00:44:55,599
occupation

00:44:53,200 --> 00:44:56,800
but the open source work you're doing is

00:44:55,599 --> 00:44:59,040
essential

00:44:56,800 --> 00:45:01,040
and we want to do more to support some

00:44:59,040 --> 00:45:01,920
of the key projects being built by

00:45:01,040 --> 00:45:05,760
developers in

00:45:01,920 --> 00:45:07,680
india so to support and make possible

00:45:05,760 --> 00:45:09,440
more great work by the open source

00:45:07,680 --> 00:45:12,240
community here in india

00:45:09,440 --> 00:45:12,880
i am delighted to announce the github

00:45:12,240 --> 00:45:16,400
india

00:45:12,880 --> 00:45:18,960
open source grants program this brand

00:45:16,400 --> 00:45:22,000
new program will offer grants for a sum

00:45:18,960 --> 00:45:23,680
total of 10 million rupees

00:45:22,000 --> 00:45:26,079
to open source maintainers and

00:45:23,680 --> 00:45:28,079
contributors to support their work as

00:45:26,079 --> 00:45:28,880
they continue to build world-class

00:45:28,079 --> 00:45:31,119
software

00:45:28,880 --> 00:45:32,720
that makes an impact for india and the

00:45:31,119 --> 00:45:34,880
rest of the world

00:45:32,720 --> 00:45:36,640
any open source project based out of

00:45:34,880 --> 00:45:38,480
india will be able to apply

00:45:36,640 --> 00:45:39,760
and we're working with representatives

00:45:38,480 --> 00:45:42,400
from academia

00:45:39,760 --> 00:45:43,359
the software industry and within github

00:45:42,400 --> 00:45:46,240
to select the

00:45:43,359 --> 00:45:47,839
grant recipients i'm so glad that we're

00:45:46,240 --> 00:45:50,319
launching this new program

00:45:47,839 --> 00:45:52,319
and i can't wait to see the impact that

00:45:50,319 --> 00:45:54,480
these recipients are able to have with

00:45:52,319 --> 00:45:56,960
additional financial support to invest

00:45:54,480 --> 00:45:59,040
in their projects

00:45:56,960 --> 00:46:01,680
now let's talk more about what

00:45:59,040 --> 00:46:04,160
businesses here in india are building

00:46:01,680 --> 00:46:05,680
enterprises in india are at the leading

00:46:04,160 --> 00:46:07,760
edge of innovation

00:46:05,680 --> 00:46:10,240
and as they grow they continue to have

00:46:07,760 --> 00:46:12,400
greater and more complex needs

00:46:10,240 --> 00:46:14,000
they're looking for more automation

00:46:12,400 --> 00:46:16,000
better integrations

00:46:14,000 --> 00:46:18,079
and streamline workflows that empower

00:46:16,000 --> 00:46:19,119
their development teams to do their best

00:46:18,079 --> 00:46:21,200
work

00:46:19,119 --> 00:46:23,599
as an integrated part of the open source

00:46:21,200 --> 00:46:25,599
community github is proud to serve the

00:46:23,599 --> 00:46:27,839
next generation of developers

00:46:25,599 --> 00:46:30,720
whether they're in the enterprise or at

00:46:27,839 --> 00:46:32,560
up-and-coming startups as they scale

00:46:30,720 --> 00:46:34,960
our aim is to be the home for all

00:46:32,560 --> 00:46:35,520
developers and a key part of that

00:46:34,960 --> 00:46:37,839
mission

00:46:35,520 --> 00:46:40,079
is to deliver excellent experiences to

00:46:37,839 --> 00:46:43,359
the millions of developers who use

00:46:40,079 --> 00:46:45,680
github within the enterprise

00:46:43,359 --> 00:46:47,839
many of the largest and most demanding

00:46:45,680 --> 00:46:49,440
organizations on the planet rely on

00:46:47,839 --> 00:46:52,560
github to be fast

00:46:49,440 --> 00:46:54,560
efficient reliable and secure

00:46:52,560 --> 00:46:56,720
we invest heavily in our enterprise

00:46:54,560 --> 00:46:58,960
offering and in less than a year

00:46:56,720 --> 00:47:00,880
we've seen more than a three times

00:46:58,960 --> 00:47:03,119
increase in adoption of github

00:47:00,880 --> 00:47:04,240
enterprise by businesses based here in

00:47:03,119 --> 00:47:06,240
india

00:47:04,240 --> 00:47:07,359
so many of you are turning to github for

00:47:06,240 --> 00:47:09,440
the software development

00:47:07,359 --> 00:47:12,000
needs of your teams and we're thrilled

00:47:09,440 --> 00:47:14,160
to be here to work alongside you

00:47:12,000 --> 00:47:16,400
in india we're seeing an increasing

00:47:14,160 --> 00:47:17,280
number of startups embrace github to

00:47:16,400 --> 00:47:18,960
provide the best

00:47:17,280 --> 00:47:20,720
possible experiences to their

00:47:18,960 --> 00:47:23,280
development teams

00:47:20,720 --> 00:47:25,280
india has the largest number of unicorns

00:47:23,280 --> 00:47:26,800
outside the u.s and china

00:47:25,280 --> 00:47:28,319
and these are companies that have

00:47:26,800 --> 00:47:30,800
complex needs

00:47:28,319 --> 00:47:32,160
they have certifications and regulations

00:47:30,800 --> 00:47:35,200
to comply with

00:47:32,160 --> 00:47:37,920
huge amounts of data to protect and tons

00:47:35,200 --> 00:47:40,000
of technologies and systems to integrate

00:47:37,920 --> 00:47:42,319
as a startup founder myself

00:47:40,000 --> 00:47:43,760
i know how important that having access

00:47:42,319 --> 00:47:46,960
to the right tools

00:47:43,760 --> 00:47:48,880
processes and support can be and it's

00:47:46,960 --> 00:47:50,880
key to keeping your business growing at

00:47:48,880 --> 00:47:53,119
maximum velocity

00:47:50,880 --> 00:47:55,280
inmobi is one of these fast growing

00:47:53,119 --> 00:47:57,920
companies and they've joined us today to

00:47:55,280 --> 00:48:00,960
talk a little bit about their experience

00:47:57,920 --> 00:48:04,880
please join me in welcoming inmobi cto

00:48:00,960 --> 00:48:07,520
rohit chatter hi i'm rohit chatter

00:48:04,880 --> 00:48:08,079
teacher in movie marketing cloud the

00:48:07,520 --> 00:48:11,280
first

00:48:08,079 --> 00:48:13,119
indian unicom startup in moby is an

00:48:11,280 --> 00:48:15,119
in-app advertising platform

00:48:13,119 --> 00:48:16,720
for the digital marketers who are

00:48:15,119 --> 00:48:20,079
looking for hyper group

00:48:16,720 --> 00:48:23,520
the one-stop shop for my techniques

00:48:20,079 --> 00:48:23,839
the engineering team at inmobi with 400

00:48:23,520 --> 00:48:25,839
plus

00:48:23,839 --> 00:48:27,680
engineers are constantly working on the

00:48:25,839 --> 00:48:29,040
cutting-edge technology

00:48:27,680 --> 00:48:30,880
and challenging the status quo and

00:48:29,040 --> 00:48:34,160
constantly innovating

00:48:30,880 --> 00:48:36,079
at the heart of this is github

00:48:34,160 --> 00:48:38,160
developer live starts and ends with

00:48:36,079 --> 00:48:41,599
coding and data helps us

00:48:38,160 --> 00:48:44,880
to do that effectively and efficiently

00:48:41,599 --> 00:48:47,040
the tons of features of the tub enables

00:48:44,880 --> 00:48:49,119
us to collaborate integrate and bring

00:48:47,040 --> 00:48:50,480
the tax factor for a high scale attack

00:48:49,119 --> 00:48:52,240
platform

00:48:50,480 --> 00:48:53,760
we are looking forward for many more new

00:48:52,240 --> 00:48:57,280
features coming our way

00:48:53,760 --> 00:49:00,319
to deliver our platform needs seamlessly

00:48:57,280 --> 00:49:02,800
thank you thanks rohit

00:49:00,319 --> 00:49:04,880
now let's hear from a young company

00:49:02,800 --> 00:49:05,280
that's relying on github to provide the

00:49:04,880 --> 00:49:08,079
best

00:49:05,280 --> 00:49:10,319
possible experience to its developers

00:49:08,079 --> 00:49:12,000
udon is a unicorn startup that's

00:49:10,319 --> 00:49:14,720
bringing manufacturers

00:49:12,000 --> 00:49:16,800
traders retailers and wholesalers

00:49:14,720 --> 00:49:18,240
together into one platform for

00:49:16,800 --> 00:49:20,400
enterprise commerce

00:49:18,240 --> 00:49:22,880
they're using automation many

00:49:20,400 --> 00:49:25,040
integrations and streamline workflows to

00:49:22,880 --> 00:49:26,160
support over a thousand developers on

00:49:25,040 --> 00:49:27,920
github

00:49:26,160 --> 00:49:30,400
i'll let udon's head of software

00:49:27,920 --> 00:49:34,319
engineering and application development

00:49:30,400 --> 00:49:36,079
kaushik to tell you more hi i'm kaushik

00:49:34,319 --> 00:49:37,920
i had software engineering and

00:49:36,079 --> 00:49:41,200
application development at ran

00:49:37,920 --> 00:49:44,000
when a new engineer comes on board

00:49:41,200 --> 00:49:45,599
he already is aware of github so from an

00:49:44,000 --> 00:49:48,400
onboarding standpoint

00:49:45,599 --> 00:49:50,720
from understanding a tool standpoint

00:49:48,400 --> 00:49:53,760
that has already been taken care of

00:49:50,720 --> 00:49:57,119
purely because of the kind of reach

00:49:53,760 --> 00:49:58,079
that github has github has been doing

00:49:57,119 --> 00:50:01,760
over the years

00:49:58,079 --> 00:50:01,760
is it's been able to

00:50:01,839 --> 00:50:05,839
think of developer workflows and how do

00:50:04,079 --> 00:50:08,800
you end up optimizing

00:50:05,839 --> 00:50:09,680
those workflows does and when i say

00:50:08,800 --> 00:50:11,359
optimizing

00:50:09,680 --> 00:50:13,680
bringing in the right kind of

00:50:11,359 --> 00:50:16,960
automations which might be required

00:50:13,680 --> 00:50:19,520
which ends up minimizing

00:50:16,960 --> 00:50:21,200
interrupts that a developer typically

00:50:19,520 --> 00:50:23,680
has to go through

00:50:21,200 --> 00:50:24,559
there are certain repetitive tasks right

00:50:23,680 --> 00:50:26,720
which

00:50:24,559 --> 00:50:28,640
you would want to take off the plate of

00:50:26,720 --> 00:50:32,000
an engineer

00:50:28,640 --> 00:50:34,960
github actions enables us to plug in

00:50:32,000 --> 00:50:36,720
various kinds of linter tools that can

00:50:34,960 --> 00:50:40,079
actually help in

00:50:36,720 --> 00:50:42,240
automating some of these uh you know

00:50:40,079 --> 00:50:43,280
pr reviews for example that need to

00:50:42,240 --> 00:50:45,040
happen and

00:50:43,280 --> 00:50:47,200
at some point in time depending upon the

00:50:45,040 --> 00:50:50,319
quality of that code

00:50:47,200 --> 00:50:53,520
or to push into a build pipeline

00:50:50,319 --> 00:50:56,720
thus optimizing our ci cd right

00:50:53,520 --> 00:50:59,040
having that much more time for the

00:50:56,720 --> 00:51:01,440
engineers to focus on the real problems

00:50:59,040 --> 00:51:03,280
while the ones which are repetitive

00:51:01,440 --> 00:51:05,520
which a lot of engineers see as

00:51:03,280 --> 00:51:07,200
interrupts right being taken away from

00:51:05,520 --> 00:51:09,440
them

00:51:07,200 --> 00:51:11,440
i love hearing about the ways these

00:51:09,440 --> 00:51:12,400
companies are using github to build

00:51:11,440 --> 00:51:14,640
their business

00:51:12,400 --> 00:51:16,960
and the way all of you are growing your

00:51:14,640 --> 00:51:19,440
businesses on our platform

00:51:16,960 --> 00:51:22,319
but of course most startups aren't

00:51:19,440 --> 00:51:24,960
unicorns with thousands of developers

00:51:22,319 --> 00:51:27,200
most consist of a few dedicated people

00:51:24,960 --> 00:51:30,800
who are working hard to solve a problem

00:51:27,200 --> 00:51:33,359
and make an impact and like the unicorn

00:51:30,800 --> 00:51:35,040
these startups need access to tools to

00:51:33,359 --> 00:51:37,440
help them work efficiently

00:51:35,040 --> 00:51:39,359
overcome challenges and attract the

00:51:37,440 --> 00:51:41,200
right talent

00:51:39,359 --> 00:51:42,720
we want to support these startups

00:51:41,200 --> 00:51:43,280
whether they're early on in their

00:51:42,720 --> 00:51:45,760
journey

00:51:43,280 --> 00:51:47,359
or are taking off after finding product

00:51:45,760 --> 00:51:49,440
market fit

00:51:47,359 --> 00:51:52,000
last year along with our investment

00:51:49,440 --> 00:51:54,000
partners we ran a pilot of a startup

00:51:52,000 --> 00:51:56,960
program to offer github's full

00:51:54,000 --> 00:51:59,280
enterprise platform to startups in india

00:51:56,960 --> 00:52:02,720
the program was a huge success

00:51:59,280 --> 00:52:04,800
with over 200 startups participating

00:52:02,720 --> 00:52:06,800
those companies are doing incredible

00:52:04,800 --> 00:52:08,640
things cowis space

00:52:06,800 --> 00:52:10,640
is building a solution to solve the

00:52:08,640 --> 00:52:11,760
geospatial requirements of tech

00:52:10,640 --> 00:52:14,160
companies

00:52:11,760 --> 00:52:17,359
clear quote is creating an ai led

00:52:14,160 --> 00:52:19,920
automation app for vehicle inspections

00:52:17,359 --> 00:52:21,760
and air meet is bringing people together

00:52:19,920 --> 00:52:22,960
which is more important this year than

00:52:21,760 --> 00:52:25,280
ever before

00:52:22,960 --> 00:52:26,880
by providing a platform for hosting

00:52:25,280 --> 00:52:29,680
virtual events

00:52:26,880 --> 00:52:32,079
it is an honor to be just a tiny part in

00:52:29,680 --> 00:52:34,079
the grow stories of these companies

00:52:32,079 --> 00:52:36,079
and we know that there are so many more

00:52:34,079 --> 00:52:38,160
exciting startups out there

00:52:36,079 --> 00:52:40,160
that's why today i'm thrilled to

00:52:38,160 --> 00:52:42,720
announce the expanded

00:52:40,160 --> 00:52:43,520
github accelerate program which will

00:52:42,720 --> 00:52:45,760
welcome a

00:52:43,520 --> 00:52:47,280
thousand companies across india in the

00:52:45,760 --> 00:52:49,280
next year

00:52:47,280 --> 00:52:50,720
these companies will get access to

00:52:49,280 --> 00:52:52,960
nearly 2 million

00:52:50,720 --> 00:52:54,000
rupees worth of github enterprise

00:52:52,960 --> 00:52:56,640
licenses

00:52:54,000 --> 00:52:57,920
and access to the github team so they'll

00:52:56,640 --> 00:53:01,040
get a full

00:52:57,920 --> 00:53:02,480
devsecops platform to accelerate their

00:53:01,040 --> 00:53:04,960
growth

00:53:02,480 --> 00:53:07,200
as a next step in expanding the program

00:53:04,960 --> 00:53:08,800
we're working in partnership with vcs

00:53:07,200 --> 00:53:10,960
and accelerators across

00:53:08,800 --> 00:53:12,720
india to extend the program to their

00:53:10,960 --> 00:53:14,319
portfolio companies

00:53:12,720 --> 00:53:16,160
we look forward to seeing what these

00:53:14,319 --> 00:53:18,720
companies build when we look back on

00:53:16,160 --> 00:53:21,040
them a year from now

00:53:18,720 --> 00:53:22,160
speaking of innovation and growth at

00:53:21,040 --> 00:53:24,160
github we believe

00:53:22,160 --> 00:53:26,240
it's just as important to support the

00:53:24,160 --> 00:53:28,960
next generation of developers as

00:53:26,240 --> 00:53:30,880
it is to support the current one the

00:53:28,960 --> 00:53:33,359
student population in india is

00:53:30,880 --> 00:53:35,119
incredible in its size and depth

00:53:33,359 --> 00:53:37,280
and we are fortunate to be partnering

00:53:35,119 --> 00:53:38,960
with so many great universities across

00:53:37,280 --> 00:53:41,599
the country

00:53:38,960 --> 00:53:42,000
in the last year alone we've added more

00:53:41,599 --> 00:53:44,480
than a

00:53:42,000 --> 00:53:46,559
hundred higher education institutions to

00:53:44,480 --> 00:53:50,319
github's educational program

00:53:46,559 --> 00:53:52,480
which is supported by 74 campus experts

00:53:50,319 --> 00:53:54,559
during our launch last year i was able

00:53:52,480 --> 00:53:56,880
to have lunch with a few of these folks

00:53:54,559 --> 00:53:59,040
and i was blown away by the energy and

00:53:56,880 --> 00:54:00,559
the passion and the dedication they have

00:53:59,040 --> 00:54:02,400
to supporting others

00:54:00,559 --> 00:54:04,079
in learning to use github and

00:54:02,400 --> 00:54:05,520
participating in the open source

00:54:04,079 --> 00:54:07,920
community

00:54:05,520 --> 00:54:10,079
let's hear from gunnika and sanskar who

00:54:07,920 --> 00:54:12,240
are doing incredible work to bring more

00:54:10,079 --> 00:54:14,960
students into the developer community

00:54:12,240 --> 00:54:17,520
along with their peers across india

00:54:14,960 --> 00:54:18,640
hi everyone my name is sanskai a campus

00:54:17,520 --> 00:54:20,720
expert from new delhi

00:54:18,640 --> 00:54:22,319
hi everyone i'm vinika vatra a guitar

00:54:20,720 --> 00:54:25,200
campus expert from india

00:54:22,319 --> 00:54:27,119
for me being a campus expert is having

00:54:25,200 --> 00:54:29,040
the ability and responsibility

00:54:27,119 --> 00:54:31,280
to empower student communities the

00:54:29,040 --> 00:54:32,800
program has helped me organize a number

00:54:31,280 --> 00:54:34,800
of events with ease

00:54:32,800 --> 00:54:36,880
by equipping me with the required tools

00:54:34,800 --> 00:54:38,720
and resources but most importantly

00:54:36,880 --> 00:54:40,720
it gave me an opportunity to meet with

00:54:38,720 --> 00:54:42,640
so many people that i never even

00:54:40,720 --> 00:54:44,319
dreamt of meeting off all the best to

00:54:42,640 --> 00:54:46,000
everyone who is planning to apply

00:54:44,319 --> 00:54:47,520
and it will surely be one of the best

00:54:46,000 --> 00:54:49,280
decisions of your life i'm really

00:54:47,520 --> 00:54:51,839
thankful for github education

00:54:49,280 --> 00:54:53,920
to managing and creating this program

00:54:51,839 --> 00:54:56,160
thank you so much

00:54:53,920 --> 00:54:58,160
thanks to you both for that i find your

00:54:56,160 --> 00:54:59,040
energy and commitment to supporting

00:54:58,160 --> 00:55:01,839
others so

00:54:59,040 --> 00:55:02,480
inspiring and thanks to you and many

00:55:01,839 --> 00:55:05,920
others

00:55:02,480 --> 00:55:07,760
we've seen a whopping 142

00:55:05,920 --> 00:55:09,920
growth in the number of students

00:55:07,760 --> 00:55:11,599
participating in the campus program over

00:55:09,920 --> 00:55:13,920
the last year

00:55:11,599 --> 00:55:16,240
that has brought us to over a hundred

00:55:13,920 --> 00:55:18,960
thousand students in india

00:55:16,240 --> 00:55:19,520
with the campus program students across

00:55:18,960 --> 00:55:22,079
many of

00:55:19,520 --> 00:55:24,559
india's higher education institutions

00:55:22,079 --> 00:55:27,280
have access to github's full products

00:55:24,559 --> 00:55:29,359
we throughout their time as students the

00:55:27,280 --> 00:55:31,359
student ecosystem is incredibly

00:55:29,359 --> 00:55:33,520
important to the continued growth and

00:55:31,359 --> 00:55:35,440
pace of innovation in india

00:55:33,520 --> 00:55:37,920
and the more that we can do to equip the

00:55:35,440 --> 00:55:39,440
developers innovators and solution

00:55:37,920 --> 00:55:42,319
builders of tomorrow

00:55:39,440 --> 00:55:43,359
the brighter our future will look

00:55:42,319 --> 00:55:44,960
related to this

00:55:43,359 --> 00:55:46,799
if you're a student and you're not

00:55:44,960 --> 00:55:48,000
already familiar with the github student

00:55:46,799 --> 00:55:50,480
developer pack

00:55:48,000 --> 00:55:51,280
be sure to check it out it offers over

00:55:50,480 --> 00:55:54,000
00:55:51,280 --> 00:55:56,160
million rupees worth of access to free

00:55:54,000 --> 00:55:58,640
software and services to student

00:55:56,160 --> 00:56:01,359
developers

00:55:58,640 --> 00:56:04,000
today i'm excited to announce another

00:56:01,359 --> 00:56:07,599
new program for student developers

00:56:04,000 --> 00:56:10,000
the github india externship program

00:56:07,599 --> 00:56:12,079
this builds on top of github's campus

00:56:10,000 --> 00:56:13,200
program by offering participating

00:56:12,079 --> 00:56:15,280
students with a unique

00:56:13,200 --> 00:56:17,680
opportunity to engage with companies in

00:56:15,280 --> 00:56:18,720
india and get hands-on development

00:56:17,680 --> 00:56:21,440
experience

00:56:18,720 --> 00:56:22,799
outside of the classroom the program

00:56:21,440 --> 00:56:25,359
offers a three-month

00:56:22,799 --> 00:56:27,040
paid externship to work on open source

00:56:25,359 --> 00:56:28,079
projects in partnership with tech

00:56:27,040 --> 00:56:30,720
companies

00:56:28,079 --> 00:56:32,480
in return top tech companies get an

00:56:30,720 --> 00:56:34,319
opportunity to start building the

00:56:32,480 --> 00:56:36,720
relationships with developers that they

00:56:34,319 --> 00:56:39,359
may want to hire in the future

00:56:36,720 --> 00:56:41,599
the github india externship program

00:56:39,359 --> 00:56:44,000
really helps connect the dots between

00:56:41,599 --> 00:56:45,040
open source the next generation of

00:56:44,000 --> 00:56:48,880
developers

00:56:45,040 --> 00:56:48,880
and companies throughout india

00:56:48,960 --> 00:56:54,079
this is such an incredible community and

00:56:51,599 --> 00:56:54,799
github is honored to be a small part of

00:56:54,079 --> 00:56:57,520
it

00:56:54,799 --> 00:56:58,000
over the last year it's been a privilege

00:56:57,520 --> 00:57:00,079
to follow

00:56:58,000 --> 00:57:02,240
the journeys of so many wonderful

00:57:00,079 --> 00:57:04,319
developers and amazing projects and

00:57:02,240 --> 00:57:06,559
companies here in india

00:57:04,319 --> 00:57:08,400
we want to do everything that we can to

00:57:06,559 --> 00:57:10,400
support your growth

00:57:08,400 --> 00:57:12,400
the three programs that we're announcing

00:57:10,400 --> 00:57:13,280
today are uniquely available to

00:57:12,400 --> 00:57:16,400
developers in

00:57:13,280 --> 00:57:17,599
india the github open source grant

00:57:16,400 --> 00:57:19,599
program to provide

00:57:17,599 --> 00:57:21,760
financial support to open source

00:57:19,599 --> 00:57:24,319
developers so they can continue

00:57:21,760 --> 00:57:25,760
their important work the github

00:57:24,319 --> 00:57:28,319
accelerate program

00:57:25,760 --> 00:57:30,960
to help support a thousand startups in

00:57:28,319 --> 00:57:33,359
india in the next year with a complete

00:57:30,960 --> 00:57:34,319
devsecops platform for their development

00:57:33,359 --> 00:57:37,119
teams

00:57:34,319 --> 00:57:37,839
and the github india externship program

00:57:37,119 --> 00:57:40,000
to provide

00:57:37,839 --> 00:57:41,359
relevant work experience to student

00:57:40,000 --> 00:57:43,440
developers

00:57:41,359 --> 00:57:45,599
with programs like these and the

00:57:43,440 --> 00:57:48,319
incredible creativity

00:57:45,599 --> 00:57:50,319
energy and passion of all of you we're

00:57:48,319 --> 00:57:52,319
confident that we've only scratched the

00:57:50,319 --> 00:57:55,280
surface of the growth potential

00:57:52,319 --> 00:57:56,319
in the developer community here in india

00:57:55,280 --> 00:57:59,119
in fact

00:57:56,319 --> 00:58:01,440
by the third anniversary of github india

00:57:59,119 --> 00:58:04,160
in february 2023

00:58:01,440 --> 00:58:05,440
we believe more than 10 million

00:58:04,160 --> 00:58:07,839
developers in india

00:58:05,440 --> 00:58:10,240
will be calling github home india is

00:58:07,839 --> 00:58:12,160
uniquely positioned to continue to drive

00:58:10,240 --> 00:58:13,280
innovation that accelerates human

00:58:12,160 --> 00:58:15,359
progress

00:58:13,280 --> 00:58:17,599
the indian developer community is a

00:58:15,359 --> 00:58:19,040
tightly integrated part of the global

00:58:17,599 --> 00:58:20,960
developer community

00:58:19,040 --> 00:58:22,079
with developers collaborating and

00:58:20,960 --> 00:58:25,359
innovating across

00:58:22,079 --> 00:58:27,119
the globe thank you for joining me today

00:58:25,359 --> 00:58:28,799
as we kick off our first github

00:58:27,119 --> 00:58:30,960
satellite in india

00:58:28,799 --> 00:58:33,359
i'm looking forward to hearing from many

00:58:30,960 --> 00:58:35,599
of you over the next couple of days

00:58:33,359 --> 00:58:37,839
and continuing to find energy and

00:58:35,599 --> 00:58:38,960
inspiration in your contributions to

00:58:37,839 --> 00:58:42,240
open source

00:58:38,960 --> 00:58:45,200
and global technology as a whole and

00:58:42,240 --> 00:58:47,040
i cannot wait until i can come back and

00:58:45,200 --> 00:58:50,160
meet with you in person

00:58:47,040 --> 00:58:52,559
until then enjoy satellite and keep on

00:58:50,160 --> 00:58:52,559
shipping

00:59:01,839 --> 00:59:05,359
namaste salaam

00:59:06,799 --> 00:59:12,480
india 2021 what a

00:59:09,920 --> 00:59:13,520
celebration of indian developer

00:59:12,480 --> 00:59:17,040
community

00:59:13,520 --> 00:59:20,559
showcase of local developers projects

00:59:17,040 --> 00:59:23,920
companies and happy anniversary india

00:59:20,559 --> 00:59:26,960
i'm divya vashnavi and joining me

00:59:23,920 --> 00:59:30,960
is the very awesome

00:59:26,960 --> 00:59:34,400
how's the josh mohit super high man

00:59:30,960 --> 00:59:37,440
and why wouldn't it be what a fantastic

00:59:34,400 --> 00:59:40,160
keynote right this is muhit

00:59:37,440 --> 00:59:42,160
joining from del valoki delhi and a warm

00:59:40,160 --> 00:59:45,200
warm welcome to you all

00:59:42,160 --> 00:59:46,079
when are you joining from divya i'm

00:59:45,200 --> 00:59:48,960
calling in from

00:59:46,079 --> 00:59:52,079
the city of pearls hyderabad a special

00:59:48,960 --> 00:59:55,359
swagatam to all of you joining from here

00:59:52,079 --> 00:59:59,040
mohit you are in delhi i'm in hyderabad

00:59:55,359 --> 01:00:01,280
why not give everyone a tour of india

00:59:59,040 --> 01:00:03,040
and celebrate the developer community

01:00:01,280 --> 01:00:05,839
what say

01:00:03,040 --> 01:00:06,720
awesome so coming to myself i'm director

01:00:05,839 --> 01:00:09,200
of product

01:00:06,720 --> 01:00:10,960
for github education yes you heard about

01:00:09,200 --> 01:00:11,839
all the awesome works that we do in the

01:00:10,960 --> 01:00:14,480
keynote

01:00:11,839 --> 01:00:16,640
i love working at github where we help

01:00:14,480 --> 01:00:19,520
democratize software and give students

01:00:16,640 --> 01:00:22,160
all that they need to develop best code

01:00:19,520 --> 01:00:24,160
so excited to be your host for devops

01:00:22,160 --> 01:00:25,119
and the cultural transformation that it

01:00:24,160 --> 01:00:28,640
brings

01:00:25,119 --> 01:00:31,119
what do you do for github mohit

01:00:28,640 --> 01:00:32,640
i am enterprise solutions specialist and

01:00:31,119 --> 01:00:33,920
it's been an awesome journey to work

01:00:32,640 --> 01:00:35,839
with organizations

01:00:33,920 --> 01:00:38,000
on their application organization and

01:00:35,839 --> 01:00:40,720
digital transformation priorities

01:00:38,000 --> 01:00:42,559
and the crux of that for me has been how

01:00:40,720 --> 01:00:45,760
organizations are enabling

01:00:42,559 --> 01:00:48,559
developers to write better quality code

01:00:45,760 --> 01:00:50,319
at a faster pace right and i'm super

01:00:48,559 --> 01:00:51,680
excited to be at the devops channel

01:00:50,319 --> 01:00:53,760
today because here

01:00:51,680 --> 01:00:55,280
we're gonna talk about a lot of

01:00:53,760 --> 01:00:59,280
interesting conversations about

01:00:55,280 --> 01:00:59,280
application development practices

01:00:59,440 --> 01:01:04,079
you know what today is also more special

01:01:02,079 --> 01:01:06,880
to me because i was part of

01:01:04,079 --> 01:01:08,319
the first celebration in bangalore where

01:01:06,880 --> 01:01:11,520
on valentine's day

01:01:08,319 --> 01:01:14,720
we celebrated and started the love

01:01:11,520 --> 01:01:18,240
of indian developer uh folks and

01:01:14,720 --> 01:01:19,119
this is also me goofing up in universe

01:01:18,240 --> 01:01:22,240
with daniel

01:01:19,119 --> 01:01:25,200
so it's been so much fun

01:01:22,240 --> 01:01:27,359
and what a keynote oh my god such

01:01:25,200 --> 01:01:28,960
amazing announcements what are your

01:01:27,359 --> 01:01:31,520
thoughts there

01:01:28,960 --> 01:01:33,440
wow that was really really thrilling and

01:01:31,520 --> 01:01:34,400
i need your full attention to really

01:01:33,440 --> 01:01:38,160
walk me through you that

01:01:34,400 --> 01:01:41,040
once again first up a huge open source

01:01:38,160 --> 01:01:41,680
grant of one crore indian rupees to

01:01:41,040 --> 01:01:43,760
support

01:01:41,680 --> 01:01:45,200
the moderators and contributors who are

01:01:43,760 --> 01:01:48,319
driving innovative work

01:01:45,200 --> 01:01:48,960
all across india second we are extending

01:01:48,319 --> 01:01:52,400
the github

01:01:48,960 --> 01:01:55,359
accelerate program via more accelerators

01:01:52,400 --> 01:01:57,119
incubators and vcs and will be extending

01:01:55,359 --> 01:02:00,480
the program to up to 1000

01:01:57,119 --> 01:02:03,440
startups and my personal favorite is

01:02:00,480 --> 01:02:04,000
github externship program which will

01:02:03,440 --> 01:02:06,400
bring

01:02:04,000 --> 01:02:07,839
the future software developers the

01:02:06,400 --> 01:02:10,079
growing student community

01:02:07,839 --> 01:02:11,760
a lot more closer to companies who are

01:02:10,079 --> 01:02:13,440
betting on open source software and

01:02:11,760 --> 01:02:16,559
building innovative solutions

01:02:13,440 --> 01:02:18,880
wow there was just a lot of

01:02:16,559 --> 01:02:20,240
lot of announcements for everybody out

01:02:18,880 --> 01:02:22,000
there in the software development

01:02:20,240 --> 01:02:23,920
ecosystem and i'm so excited to see all

01:02:22,000 --> 01:02:26,559
of that

01:02:23,920 --> 01:02:27,119
and we want to hear from you on what you

01:02:26,559 --> 01:02:28,720
feel

01:02:27,119 --> 01:02:30,400
about all the announcements that that

01:02:28,720 --> 01:02:31,039
were made what are you looking forward

01:02:30,400 --> 01:02:33,440
to today

01:02:31,039 --> 01:02:34,319
so share all your comments with us at

01:02:33,440 --> 01:02:36,400
our handle

01:02:34,319 --> 01:02:38,319
get up india with hashtag github

01:02:36,400 --> 01:02:41,119
satellite and if you want to hit

01:02:38,319 --> 01:02:41,760
us up directly you can reach myself and

01:02:41,119 --> 01:02:46,160
divya

01:02:41,760 --> 01:02:48,799
at divya vashnavi and mohita 87

01:02:46,160 --> 01:02:50,640
actually mohit i see already a lot of

01:02:48,799 --> 01:02:53,680
excitement happening on

01:02:50,640 --> 01:02:54,960
twitter um khushboo verma is really

01:02:53,680 --> 01:02:58,640
excited about

01:02:54,960 --> 01:03:01,280
re memorizing the last year celebration

01:02:58,640 --> 01:03:02,559
anand natarajan about all the focus that

01:03:01,280 --> 01:03:05,359
is coming in india so

01:03:02,559 --> 01:03:07,119
folks keep that going and we are all

01:03:05,359 --> 01:03:10,559
ears and listening to you

01:03:07,119 --> 01:03:13,760
okay so let's come to the event this is

01:03:10,559 --> 01:03:16,799
a live broadcast two days of content

01:03:13,760 --> 01:03:17,520
four hours a day and workshops to learn

01:03:16,799 --> 01:03:20,880
it all

01:03:17,520 --> 01:03:21,760
with action you are on the devops

01:03:20,880 --> 01:03:23,920
channel

01:03:21,760 --> 01:03:25,200
your favorite channel uh where we'll

01:03:23,920 --> 01:03:28,960
obviously be talking about

01:03:25,200 --> 01:03:31,359
all about devops join karan and anisha

01:03:28,960 --> 01:03:32,480
on the oss channel as they covered the

01:03:31,359 --> 01:03:34,400
state of

01:03:32,480 --> 01:03:35,920
open source if you're watching this on

01:03:34,400 --> 01:03:37,920
github satellite.com

01:03:35,920 --> 01:03:41,039
you can change the channels from the top

01:03:37,920 --> 01:03:43,920
nav bar but remember to unmute when you

01:03:41,039 --> 01:03:46,640
move channels mohit what are the other

01:03:43,920 --> 01:03:48,319
ways people can interact and learn

01:03:46,640 --> 01:03:51,119
there is always more for those who want

01:03:48,319 --> 01:03:52,240
more so our broadcast ends at 1 30 pm

01:03:51,119 --> 01:03:54,799
ist but

01:03:52,240 --> 01:03:55,760
we will have workshops for all of you

01:03:54,799 --> 01:03:58,160
where you will get

01:03:55,760 --> 01:04:00,160
hands-on experience right beside github

01:03:58,160 --> 01:04:03,920
expert so if you have not registered yet

01:04:00,160 --> 01:04:03,920
go grab a seat right away

01:04:05,680 --> 01:04:09,680
and like moed said there's always more

01:04:08,160 --> 01:04:11,839
for folks who want more

01:04:09,680 --> 01:04:12,720
so remember to also engage with us in

01:04:11,839 --> 01:04:15,039
discussions

01:04:12,720 --> 01:04:16,960
github subject matter experts as well as

01:04:15,039 --> 01:04:19,280
all the speakers who join us today

01:04:16,960 --> 01:04:20,960
will be on discussions connecting with

01:04:19,280 --> 01:04:23,200
you and it's also a time when you can

01:04:20,960 --> 01:04:25,839
connect with each other and build your

01:04:23,200 --> 01:04:27,119
community mohit and i will also take

01:04:25,839 --> 01:04:30,559
questions from there

01:04:27,119 --> 01:04:33,839
and bring it to discussions so

01:04:30,559 --> 01:04:36,960
let's get the ball rolling and what's

01:04:33,839 --> 01:04:38,640
the first session about it's your

01:04:36,960 --> 01:04:41,200
favorite divya it's github

01:04:38,640 --> 01:04:42,319
actions we're gonna learn a lot about

01:04:41,200 --> 01:04:43,920
all the new features

01:04:42,319 --> 01:04:46,240
and what's more coming up in github

01:04:43,920 --> 01:04:48,720
actions from none other than

01:04:46,240 --> 01:04:49,920
chris patterson product manager at

01:04:48,720 --> 01:04:51,520
github

01:04:49,920 --> 01:04:53,760
and something very interesting about

01:04:51,520 --> 01:04:56,480
chris is you name a coding language

01:04:53,760 --> 01:04:58,240
and he has got his hands on it right

01:04:56,480 --> 01:05:00,880
currently he is working on enabling

01:04:58,240 --> 01:05:02,720
software developers at github to

01:05:00,880 --> 01:05:05,039
automate their workflows through github

01:05:02,720 --> 01:05:05,039
actions

01:05:05,280 --> 01:05:11,599
remember folks engage with us and

01:05:08,480 --> 01:05:23,200
chris on discussions and take it

01:05:11,599 --> 01:05:26,640
away chris the first session

01:05:23,200 --> 01:05:28,480
um thank you so much deviant mohit for

01:05:26,640 --> 01:05:31,200
that very kind introduction

01:05:28,480 --> 01:05:31,520
as i say my name is chris patterson i am

01:05:31,200 --> 01:05:34,400
a

01:05:31,520 --> 01:05:36,079
staff program manager here at github and

01:05:34,400 --> 01:05:38,079
today i am coming with you

01:05:36,079 --> 01:05:39,520
coming to you from kerry north carolina

01:05:38,079 --> 01:05:41,520
in the united states

01:05:39,520 --> 01:05:43,280
um and we're going to give kind of a

01:05:41,520 --> 01:05:44,640
tour of some of the new things that we

01:05:43,280 --> 01:05:46,720
have been working on

01:05:44,640 --> 01:05:48,400
with github actions over the past

01:05:46,720 --> 01:05:51,200
several months

01:05:48,400 --> 01:05:52,400
but before we do that i do want to give

01:05:51,200 --> 01:05:54,319
a big shout out to

01:05:52,400 --> 01:05:56,640
a bunch of my colleagues in india who i

01:05:54,319 --> 01:05:59,200
have worked with for almost 15 years

01:05:56,640 --> 01:06:01,760
i'm incredibly excited that github is

01:05:59,200 --> 01:06:03,280
now in india and that i'm able to

01:06:01,760 --> 01:06:05,920
work with the developer community there

01:06:03,280 --> 01:06:08,880
more than all we have here's some photos

01:06:05,920 --> 01:06:09,520
of me during several of my trips uh to

01:06:08,880 --> 01:06:11,280
india

01:06:09,520 --> 01:06:12,880
uh hyderabad has been the primary

01:06:11,280 --> 01:06:15,599
location so i've got gokanda

01:06:12,880 --> 01:06:16,799
and i've even driven um in india one of

01:06:15,599 --> 01:06:18,720
my colleagues uh

01:06:16,799 --> 01:06:21,200
loaned me his car and that was a quite

01:06:18,720 --> 01:06:24,000
an exciting experience

01:06:21,200 --> 01:06:26,400
but enough about me let's go on to talk

01:06:24,000 --> 01:06:29,839
more about actions

01:06:26,400 --> 01:06:30,960
so today i want to cover four different

01:06:29,839 --> 01:06:32,960
areas

01:06:30,960 --> 01:06:34,000
that we have been working on in github

01:06:32,960 --> 01:06:36,400
actions

01:06:34,000 --> 01:06:37,520
uh to help improve things and for a

01:06:36,400 --> 01:06:39,599
number of different

01:06:37,520 --> 01:06:40,640
places so we're talking about continuous

01:06:39,599 --> 01:06:42,640
delivery

01:06:40,640 --> 01:06:45,200
uh we shipped a bunch of new features

01:06:42,640 --> 01:06:46,880
about continuous delivery at universe

01:06:45,200 --> 01:06:48,720
we've made some enhancements since then

01:06:46,880 --> 01:06:50,559
have really been working to

01:06:48,720 --> 01:06:52,480
take the feedback from the community and

01:06:50,559 --> 01:06:55,119
improve those things

01:06:52,480 --> 01:06:56,640
we've been working very hard on making

01:06:55,119 --> 01:06:59,440
actions more secure and

01:06:56,640 --> 01:07:00,880
this is a big focus of mine personally

01:06:59,440 --> 01:07:02,960
actually and if you think about things

01:07:00,880 --> 01:07:05,119
like the recent solarwinds issues

01:07:02,960 --> 01:07:06,000
where you know ci can absolutely be a

01:07:05,119 --> 01:07:08,400
potential

01:07:06,000 --> 01:07:09,520
uh place where security can you know you

01:07:08,400 --> 01:07:10,960
can create security holes in your

01:07:09,520 --> 01:07:12,640
software development infrastructure

01:07:10,960 --> 01:07:14,960
github actions being secure is

01:07:12,640 --> 01:07:17,599
incredibly important

01:07:14,960 --> 01:07:18,640
enterprise as erica mentioned in the

01:07:17,599 --> 01:07:21,280
keynote

01:07:18,640 --> 01:07:22,799
enterprise server has got a very

01:07:21,280 --> 01:07:24,880
important place

01:07:22,799 --> 01:07:26,880
in the overall portfolio github and

01:07:24,880 --> 01:07:30,319
we've just seen huge adoption of it

01:07:26,880 --> 01:07:32,480
over the past year and one of the key

01:07:30,319 --> 01:07:33,920
features that a lot of our customers on

01:07:32,480 --> 01:07:35,920
enterprise server have been waiting for

01:07:33,920 --> 01:07:36,559
is github actions and it's it's finally

01:07:35,920 --> 01:07:39,920
here

01:07:36,559 --> 01:07:40,960
and then finally scale on github.com in

01:07:39,920 --> 01:07:43,520
our cloud

01:07:40,960 --> 01:07:44,880
we have hundreds of thousands of repos

01:07:43,520 --> 01:07:46,799
that rely on actions

01:07:44,880 --> 01:07:48,319
every day and we need to make sure we

01:07:46,799 --> 01:07:51,039
can scale to

01:07:48,319 --> 01:07:53,599
reach to to provide all of the necessary

01:07:51,039 --> 01:07:53,599
resources

01:07:53,680 --> 01:07:57,200
so a little bit about actions and how

01:07:56,079 --> 01:07:59,599
it's grown

01:07:57,200 --> 01:08:01,839
github actions is just a bit over a year

01:07:59,599 --> 01:08:04,319
old at this point

01:08:01,839 --> 01:08:05,839
and from a perspective of the community

01:08:04,319 --> 01:08:08,400
embracing it it's just been

01:08:05,839 --> 01:08:10,160
absolutely incredible in the marketplace

01:08:08,400 --> 01:08:11,599
there's about seven thousand or

01:08:10,160 --> 01:08:13,359
a little more than seven thousand

01:08:11,599 --> 01:08:15,280
available different actions you can use

01:08:13,359 --> 01:08:18,159
in your github actions workflows

01:08:15,280 --> 01:08:18,560
and if i look across github.com it only

01:08:18,159 --> 01:08:21,440
not

01:08:18,560 --> 01:08:23,279
at um all of the actions that are used

01:08:21,440 --> 01:08:25,839
kind of on a monthly basis it's really

01:08:23,279 --> 01:08:27,600
closer to about 15 000 different

01:08:25,839 --> 01:08:28,880
actions used in workflows and so it

01:08:27,600 --> 01:08:29,839
means there's a lot of people who are

01:08:28,880 --> 01:08:31,839
using them

01:08:29,839 --> 01:08:34,319
uh just within their own organizations

01:08:31,839 --> 01:08:36,799
and that's incredible to see

01:08:34,319 --> 01:08:38,159
from a scale perspective you know the

01:08:36,799 --> 01:08:40,640
growth is just

01:08:38,159 --> 01:08:42,159
skyrocketing we're now just in the

01:08:40,640 --> 01:08:44,000
github.com cloud this

01:08:42,159 --> 01:08:47,359
this only includes the runners that we

01:08:44,000 --> 01:08:49,679
host more than 125 million jobs a month

01:08:47,359 --> 01:08:51,920
and growing at an astounding rate

01:08:49,679 --> 01:08:53,120
and all of that in the community has

01:08:51,920 --> 01:08:56,000
really brought us to be

01:08:53,120 --> 01:08:56,319
the number one ci platform on github in

01:08:56,000 --> 01:08:58,239
just

01:08:56,319 --> 01:08:59,839
over a year and it's incredible and

01:08:58,239 --> 01:09:00,640
we're incredibly honored to have you

01:08:59,839 --> 01:09:04,400
guys

01:09:00,640 --> 01:09:05,359
as part of that now github enterprise

01:09:04,400 --> 01:09:08,239
server

01:09:05,359 --> 01:09:09,920
um actions is generally available on

01:09:08,239 --> 01:09:11,600
github enterprise server three

01:09:09,920 --> 01:09:13,279
you can set up your enterprise server

01:09:11,600 --> 01:09:14,319
you can configure actions you can run

01:09:13,279 --> 01:09:17,120
workflows

01:09:14,319 --> 01:09:19,040
you can use actions in your workflows

01:09:17,120 --> 01:09:20,640
locally in your server as well as

01:09:19,040 --> 01:09:22,319
through github connect you can take

01:09:20,640 --> 01:09:23,199
advantage of that incredible actions

01:09:22,319 --> 01:09:25,600
community

01:09:23,199 --> 01:09:26,400
that i just talked about so we've really

01:09:25,600 --> 01:09:28,319
enabled

01:09:26,400 --> 01:09:31,920
github enterprise server to reach out

01:09:28,319 --> 01:09:31,920
and take advantage of the cloud

01:09:32,640 --> 01:09:37,279
now the next thing i want to talk about

01:09:34,480 --> 01:09:39,679
is continuous delivery

01:09:37,279 --> 01:09:41,120
so when we started down this journey

01:09:39,679 --> 01:09:42,960
everybody said well i you know github

01:09:41,120 --> 01:09:44,799
actions is an automation platform i can

01:09:42,960 --> 01:09:48,319
do continuous delivery with it today

01:09:44,799 --> 01:09:49,759
and of course you can but um

01:09:48,319 --> 01:09:51,440
the thing that we wanted to do is make

01:09:49,759 --> 01:09:52,319
sure that you could do continuous

01:09:51,440 --> 01:09:55,120
delivery

01:09:52,319 --> 01:09:56,400
in a way uh that was more secure that

01:09:55,120 --> 01:09:57,920
could be better that had

01:09:56,400 --> 01:09:59,440
some of the core capabilities that

01:09:57,920 --> 01:10:01,760
people expect

01:09:59,440 --> 01:10:04,000
uh things like you know manual approvals

01:10:01,760 --> 01:10:07,679
and other kinds of rules

01:10:04,000 --> 01:10:09,760
and so as part of the conversation today

01:10:07,679 --> 01:10:10,719
i want to talk about sort of five-ish

01:10:09,760 --> 01:10:12,880
new uh

01:10:10,719 --> 01:10:14,880
capabilities some we've talked a little

01:10:12,880 --> 01:10:17,360
bit about at universe some are new

01:10:14,880 --> 01:10:18,480
uh since then that we are bringing in

01:10:17,360 --> 01:10:21,520
the overall space

01:10:18,480 --> 01:10:22,239
around uh continuous delivery devops

01:10:21,520 --> 01:10:25,600
security

01:10:22,239 --> 01:10:26,880
for github actions so the first one was

01:10:25,600 --> 01:10:28,719
just the simple

01:10:26,880 --> 01:10:30,400
i want to be able to visualize and see

01:10:28,719 --> 01:10:32,480
what's going on in my workflows

01:10:30,400 --> 01:10:33,840
and this is a feature we did ship at

01:10:32,480 --> 01:10:35,120
universe so we've enhanced it quite a

01:10:33,840 --> 01:10:37,679
bit since then to

01:10:35,120 --> 01:10:38,239
improve the performance and add a few

01:10:37,679 --> 01:10:40,480
little more

01:10:38,239 --> 01:10:41,840
tweaks to it to make it better uh but

01:10:40,480 --> 01:10:43,280
it's great to be able to see

01:10:41,840 --> 01:10:44,640
how your workflow is progressing

01:10:43,280 --> 01:10:46,159
particularly if you have a complex

01:10:44,640 --> 01:10:48,640
deployment pipeline or

01:10:46,159 --> 01:10:50,480
a large matrix to help understand what's

01:10:48,640 --> 01:10:52,800
left what's going on

01:10:50,480 --> 01:10:55,920
it's just a great addition to the

01:10:52,800 --> 01:10:58,239
overall experience

01:10:55,920 --> 01:11:00,480
the second area to talk about is the

01:10:58,239 --> 01:11:01,760
environment protection rules

01:11:00,480 --> 01:11:03,280
whenever you've got a continuous

01:11:01,760 --> 01:11:04,880
delivery workflow that's deployed into

01:11:03,280 --> 01:11:06,400
say a production environment

01:11:04,880 --> 01:11:08,159
it can be important for a lot of

01:11:06,400 --> 01:11:09,360
organizations to make sure there's two

01:11:08,159 --> 01:11:11,040
sets of eyes

01:11:09,360 --> 01:11:12,480
uh who are approving these things so

01:11:11,040 --> 01:11:13,679
there's the developer that approved the

01:11:12,480 --> 01:11:16,320
source code

01:11:13,679 --> 01:11:17,679
and then there is some other person a

01:11:16,320 --> 01:11:20,080
release manager

01:11:17,679 --> 01:11:22,320
engineer somebody who says it's okay to

01:11:20,080 --> 01:11:24,400
deploy to production

01:11:22,320 --> 01:11:26,080
with the environment protection rules we

01:11:24,400 --> 01:11:27,840
we started out with just two and we've

01:11:26,080 --> 01:11:29,920
actually added one since then

01:11:27,840 --> 01:11:31,600
and over time we plan to make this an

01:11:29,920 --> 01:11:33,360
extensibility point

01:11:31,600 --> 01:11:35,520
to enable you to plug in your own

01:11:33,360 --> 01:11:38,400
systems to allow you to control

01:11:35,520 --> 01:11:40,560
when things deploy the main protection

01:11:38,400 --> 01:11:42,719
rules are this required reviewers

01:11:40,560 --> 01:11:43,679
uh rule that basically says that

01:11:42,719 --> 01:11:46,400
somebody within

01:11:43,679 --> 01:11:48,000
a team or an individual has to approve a

01:11:46,400 --> 01:11:49,360
job before it goes through

01:11:48,000 --> 01:11:51,040
and then we'll talk a little bit more

01:11:49,360 --> 01:11:54,640
through the demo about exactly what

01:11:51,040 --> 01:11:58,480
happens at that point

01:11:54,640 --> 01:11:59,440
secrets um github actions has had

01:11:58,480 --> 01:12:02,480
secrets since

01:11:59,440 --> 01:12:03,840
it first launched but those secrets were

01:12:02,480 --> 01:12:05,760
bound to the repository in the

01:12:03,840 --> 01:12:06,800
repository only and that meant that any

01:12:05,760 --> 01:12:09,040
workflow

01:12:06,800 --> 01:12:11,280
in that repository could just reference

01:12:09,040 --> 01:12:13,120
the secret and get that value

01:12:11,280 --> 01:12:14,640
and obviously that works fine for a

01:12:13,120 --> 01:12:16,159
number of scenarios but in something

01:12:14,640 --> 01:12:19,440
like a production deployment

01:12:16,159 --> 01:12:21,199
it's just not sufficient so we wanted

01:12:19,440 --> 01:12:22,400
the ability to scope these secrets to an

01:12:21,199 --> 01:12:24,719
environment so we introduced

01:12:22,400 --> 01:12:26,320
environment specific secrets and those

01:12:24,719 --> 01:12:28,560
work by

01:12:26,320 --> 01:12:30,719
making sure that whenever uh github

01:12:28,560 --> 01:12:32,000
actions workflow runs and references an

01:12:30,719 --> 01:12:34,320
environment

01:12:32,000 --> 01:12:36,159
the protection rules have to pass before

01:12:34,320 --> 01:12:37,679
that job starts and before it gets

01:12:36,159 --> 01:12:38,640
access to the secrets and so you could

01:12:37,679 --> 01:12:40,480
have

01:12:38,640 --> 01:12:42,880
a secret called deploy key that is

01:12:40,480 --> 01:12:45,440
scoped to say the repository that

01:12:42,880 --> 01:12:47,360
the development environment can use and

01:12:45,440 --> 01:12:48,320
then another secret that's the same name

01:12:47,360 --> 01:12:49,360
so you don't have to change your

01:12:48,320 --> 01:12:51,199
workflow

01:12:49,360 --> 01:12:53,040
but has a different value that is

01:12:51,199 --> 01:12:56,800
protected by the

01:12:53,040 --> 01:12:56,800
protection rules for production

01:12:58,560 --> 01:13:02,719
it's always important to know what has

01:13:01,199 --> 01:13:04,719
been deployed where

01:13:02,719 --> 01:13:06,400
and this is one of these capabilities

01:13:04,719 --> 01:13:07,120
that github has actually had for a long

01:13:06,400 --> 01:13:08,719
time

01:13:07,120 --> 01:13:09,920
if you're very familiar with github you

01:13:08,719 --> 01:13:11,280
might know there's this thing called the

01:13:09,920 --> 01:13:13,840
deployments api

01:13:11,280 --> 01:13:15,440
and that really shows you a list of the

01:13:13,840 --> 01:13:17,040
activity of deployments to different

01:13:15,440 --> 01:13:18,159
environments and can tell you exactly

01:13:17,040 --> 01:13:19,760
which commit

01:13:18,159 --> 01:13:22,480
has been deployed to a particular

01:13:19,760 --> 01:13:24,800
environment and so as part of our

01:13:22,480 --> 01:13:26,800
goal to really build actions and build

01:13:24,800 --> 01:13:28,640
it deeply integrated into github

01:13:26,800 --> 01:13:30,159
we instead of creating something new to

01:13:28,640 --> 01:13:31,600
track your deployments actions just

01:13:30,159 --> 01:13:32,960
plugs right into this

01:13:31,600 --> 01:13:34,320
and this is also nice because it's

01:13:32,960 --> 01:13:36,400
another place that's extensible in

01:13:34,320 --> 01:13:38,080
github for even third parties

01:13:36,400 --> 01:13:40,080
and we'll look at how actions plugs into

01:13:38,080 --> 01:13:41,040
the deployment api to give you that

01:13:40,080 --> 01:13:44,880
strong

01:13:41,040 --> 01:13:47,600
element of history and finally

01:13:44,880 --> 01:13:49,440
security features uh this is a actually

01:13:47,600 --> 01:13:51,760
a preview of a feature that hasn't quite

01:13:49,440 --> 01:13:54,239
shipped yet but will be shipping soon

01:13:51,760 --> 01:13:55,199
um we've done a bunch of work in github

01:13:54,239 --> 01:13:57,199
actions to

01:13:55,199 --> 01:13:58,239
improve security we've done some blog

01:13:57,199 --> 01:13:59,920
posts we've done a bunch of

01:13:58,239 --> 01:14:01,679
documentation

01:13:59,920 --> 01:14:03,360
we've made some changes to the way we

01:14:01,679 --> 01:14:04,960
process environment variables and things

01:14:03,360 --> 01:14:06,320
and they're continuing to

01:14:04,960 --> 01:14:08,159
work with the security security

01:14:06,320 --> 01:14:10,800
community both at github

01:14:08,159 --> 01:14:12,800
and out in other security researchers to

01:14:10,800 --> 01:14:14,480
find and fix any issues

01:14:12,800 --> 01:14:16,320
one of the core tenets of security

01:14:14,480 --> 01:14:18,640
obviously is leased access

01:14:16,320 --> 01:14:20,080
and by default when github action

01:14:18,640 --> 01:14:22,080
shipped it had

01:14:20,080 --> 01:14:24,320
this secret called github token which is

01:14:22,080 --> 01:14:26,480
really just a github apps token

01:14:24,320 --> 01:14:27,920
and it had pretty broad permissions

01:14:26,480 --> 01:14:29,360
within the repo it could read and write

01:14:27,920 --> 01:14:30,880
source code read and write issues pull

01:14:29,360 --> 01:14:34,239
requests etc

01:14:30,880 --> 01:14:36,480
and it works well in a lot of cases but

01:14:34,239 --> 01:14:38,400
you know because github actions is such

01:14:36,480 --> 01:14:39,600
so much of an automation platform

01:14:38,400 --> 01:14:41,600
there's lots of different kinds of

01:14:39,600 --> 01:14:42,560
things people do like this example of a

01:14:41,600 --> 01:14:44,800
cleanup pr

01:14:42,560 --> 01:14:46,320
or i've got a workflow that just looks

01:14:44,800 --> 01:14:49,040
at issue comments and

01:14:46,320 --> 01:14:50,640
does some processing in those cases i

01:14:49,040 --> 01:14:51,760
don't need those broad permissions i

01:14:50,640 --> 01:14:53,360
really want to have a very

01:14:51,760 --> 01:14:55,679
narrow set of permissions and so we're

01:14:53,360 --> 01:14:57,120
introducing a new permissions block

01:14:55,679 --> 01:14:59,120
which is actually available at the

01:14:57,120 --> 01:15:01,679
workflow level and the job level

01:14:59,120 --> 01:15:02,400
and you can go in and change the

01:15:01,679 --> 01:15:04,239
permissions

01:15:02,400 --> 01:15:05,920
for this particular workflow and so in

01:15:04,239 --> 01:15:07,520
this example i've got just contents read

01:15:05,920 --> 01:15:08,800
so all i can do is read the source i

01:15:07,520 --> 01:15:10,800
can't write the source

01:15:08,800 --> 01:15:12,880
and having the ability to control that

01:15:10,800 --> 01:15:14,480
with uh give you least access we think

01:15:12,880 --> 01:15:17,600
is going to be

01:15:14,480 --> 01:15:19,360
very valuable and just continue to help

01:15:17,600 --> 01:15:21,440
improve the security of github actions

01:15:19,360 --> 01:15:23,360
in the future

01:15:21,440 --> 01:15:25,280
so what i want to do is walk you through

01:15:23,360 --> 01:15:27,600
a demo of how some of these things come

01:15:25,280 --> 01:15:27,600
together

01:15:28,000 --> 01:15:31,600
so i'm going to switch over to a repo

01:15:29,600 --> 01:15:33,440
here which is a popular

01:15:31,600 --> 01:15:34,960
github repos by language it's a pretty

01:15:33,440 --> 01:15:36,640
simple application

01:15:34,960 --> 01:15:38,960
that basically just looks at all the

01:15:36,640 --> 01:15:40,000
github repos and lets you sort them by

01:15:38,960 --> 01:15:43,280
language

01:15:40,000 --> 01:15:45,920
and in this particular case i've got

01:15:43,280 --> 01:15:46,640
um a couple of different workflows set

01:15:45,920 --> 01:15:49,199
up to do

01:15:46,640 --> 01:15:49,840
some different things for me so to get

01:15:49,199 --> 01:15:51,840
started

01:15:49,840 --> 01:15:53,040
i'm going to go add a new feature or a

01:15:51,840 --> 01:15:56,400
new language

01:15:53,040 --> 01:15:58,159
simply go into my code pull this up

01:15:56,400 --> 01:16:01,920
i'm gonna edit this and i'm just gonna

01:15:58,159 --> 01:16:01,920
add i don't know let's go with ruby

01:16:02,560 --> 01:16:09,440
so really simple add ruby go down

01:16:06,480 --> 01:16:10,560
we'll create a branch for it call it

01:16:09,440 --> 01:16:13,760
chris pat patch three

01:16:10,560 --> 01:16:17,199
that's fine adding ruby

01:16:13,760 --> 01:16:19,040
and propose this change get presented

01:16:17,199 --> 01:16:21,840
with our normal pull request dialog

01:16:19,040 --> 01:16:24,080
create that pull request and wait for

01:16:21,840 --> 01:16:25,600
actions to kick off and then

01:16:24,080 --> 01:16:28,800
in a couple of seconds here we should

01:16:25,600 --> 01:16:30,480
see uh actions jobs kicking off to start

01:16:28,800 --> 01:16:31,920
working through the various workflows

01:16:30,480 --> 01:16:33,199
various parts of my workflow and so the

01:16:31,920 --> 01:16:34,960
first thing it's going to do is go build

01:16:33,199 --> 01:16:36,640
this pull request

01:16:34,960 --> 01:16:37,760
and let's go take a look at while we're

01:16:36,640 --> 01:16:39,360
waiting for that to build we're going to

01:16:37,760 --> 01:16:40,960
take a look at what this workflow is

01:16:39,360 --> 01:16:42,239
doing

01:16:40,960 --> 01:16:44,960
so in this case i've got a couple of

01:16:42,239 --> 01:16:47,040
different workflows i've got my deploy

01:16:44,960 --> 01:16:48,960
and we can see it's triggered off a pull

01:16:47,040 --> 01:16:51,120
request when it's targeting main

01:16:48,960 --> 01:16:52,880
it is uh triggered off or triggered off

01:16:51,120 --> 01:16:54,320
a push for maine and it does a couple of

01:16:52,880 --> 01:16:55,040
different things so i've got a build job

01:16:54,320 --> 01:16:58,000
here

01:16:55,040 --> 01:17:00,080
checks out sets up node um using our

01:16:58,000 --> 01:17:03,040
caching capability it caches the node

01:17:00,080 --> 01:17:05,520
modules which should speed things up

01:17:03,040 --> 01:17:07,760
um and then uses a couple of different

01:17:05,520 --> 01:17:09,520
other actions which are really great so

01:17:07,760 --> 01:17:11,520
we had our basic script one but the ones

01:17:09,520 --> 01:17:14,239
i want to call attention to here are

01:17:11,520 --> 01:17:16,000
these docker login and the docker of the

01:17:14,239 --> 01:17:17,920
setup build x docker login and then the

01:17:16,000 --> 01:17:20,960
docker build and push action

01:17:17,920 --> 01:17:23,040
um these are built by docker uh in

01:17:20,960 --> 01:17:24,480
concert with uh with github we worked

01:17:23,040 --> 01:17:27,679
with them on it and they are just

01:17:24,480 --> 01:17:29,280
a great example of a partner who's taken

01:17:27,679 --> 01:17:31,360
the power github actions and built some

01:17:29,280 --> 01:17:33,280
great core functionality

01:17:31,360 --> 01:17:36,239
and made it available for the community

01:17:33,280 --> 01:17:38,320
that we like to rely on

01:17:36,239 --> 01:17:40,159
now in this next job i've got this

01:17:38,320 --> 01:17:40,800
deploy to review environment so what

01:17:40,159 --> 01:17:44,239
this does

01:17:40,800 --> 01:17:44,880
is it creates a review of my app so it

01:17:44,239 --> 01:17:48,159
creates a

01:17:44,880 --> 01:17:50,480
unique website with a new unique url

01:17:48,159 --> 01:17:52,400
for my app in the review lab and i can

01:17:50,480 --> 01:17:54,000
see it only runs on pull requests so i'm

01:17:52,400 --> 01:17:56,560
using the power of github actions and

01:17:54,000 --> 01:17:58,719
the conditional syntax there

01:17:56,560 --> 01:17:59,679
and i can also see that i'm taking

01:17:58,719 --> 01:18:01,360
advantage of

01:17:59,679 --> 01:18:03,600
one of the core capabilities of actions

01:18:01,360 --> 01:18:06,640
of having them output information

01:18:03,600 --> 01:18:09,600
so we see this other action that is from

01:18:06,640 --> 01:18:11,600
azure another one of our partners and it

01:18:09,600 --> 01:18:13,040
knows how to deploy to azure web apps

01:18:11,600 --> 01:18:14,640
and what it does is it takes the

01:18:13,040 --> 01:18:16,239
container in this case that i built

01:18:14,640 --> 01:18:18,640
deploys to azure web apps and outputs

01:18:16,239 --> 01:18:19,360
the url and lets me bind it directly in

01:18:18,640 --> 01:18:21,679
here

01:18:19,360 --> 01:18:23,840
and we'll show how that pulls together

01:18:21,679 --> 01:18:25,920
some core traceability

01:18:23,840 --> 01:18:27,280
so we go back and take a look at our

01:18:25,920 --> 01:18:29,840
actions workflow

01:18:27,280 --> 01:18:31,040
we should see that it's moving along so

01:18:29,840 --> 01:18:33,360
we can see that

01:18:31,040 --> 01:18:35,520
deployed review is started and as one of

01:18:33,360 --> 01:18:38,239
these nice features in the visualization

01:18:35,520 --> 01:18:40,080
i can see the progress it's made but i

01:18:38,239 --> 01:18:42,880
can also see right here in my

01:18:40,080 --> 01:18:43,600
actions view the url it goes to and even

01:18:42,880 --> 01:18:45,280
further

01:18:43,600 --> 01:18:46,719
if i happen to come into the pull

01:18:45,280 --> 01:18:48,560
request first

01:18:46,719 --> 01:18:50,159
i get this nice view right here in the

01:18:48,560 --> 01:18:52,159
pull request i can see the exact

01:18:50,159 --> 01:18:54,400
environments this was deployed to

01:18:52,159 --> 01:18:55,760
i can get a link to the actions run that

01:18:54,400 --> 01:18:57,199
it went to and of course i could click

01:18:55,760 --> 01:19:00,400
on and view that deployment

01:18:57,199 --> 01:19:02,000
and i can see that ruby has been added

01:19:00,400 --> 01:19:04,320
and that is just awesome so i can click

01:19:02,000 --> 01:19:06,719
on ruby it looks great

01:19:04,320 --> 01:19:08,719
so what i'm going to do is go in and

01:19:06,719 --> 01:19:11,760
merge this pull request

01:19:08,719 --> 01:19:13,600
and confirm the merge and

01:19:11,760 --> 01:19:15,040
let that code go and it's going to start

01:19:13,600 --> 01:19:17,280
my next workflow

01:19:15,040 --> 01:19:18,159
so if everything worked out well we see

01:19:17,280 --> 01:19:21,360
that

01:19:18,159 --> 01:19:22,719
our merge pull request is kicked off and

01:19:21,360 --> 01:19:23,920
it's going to start the next build job

01:19:22,719 --> 01:19:25,199
so let's go take a look and see how this

01:19:23,920 --> 01:19:26,960
workflow is going to complete

01:19:25,199 --> 01:19:28,640
and actually we can see in this case two

01:19:26,960 --> 01:19:31,760
different workflows picked off

01:19:28,640 --> 01:19:33,920
i clicked off this uh this cleanup pr so

01:19:31,760 --> 01:19:35,679
in this case i've got a job that's going

01:19:33,920 --> 01:19:36,080
to delete my review slot and this is

01:19:35,679 --> 01:19:38,480
taking

01:19:36,080 --> 01:19:39,199
advantage of that new capability we

01:19:38,480 --> 01:19:42,239
talked about

01:19:39,199 --> 01:19:44,719
for limiting permissions so in this case

01:19:42,239 --> 01:19:47,120
my cleanup pr

01:19:44,719 --> 01:19:48,400
workflow goes and deletes that and

01:19:47,120 --> 01:19:50,239
deletes that deployment

01:19:48,400 --> 01:19:51,600
of my application that i made for the

01:19:50,239 --> 01:19:53,520
pull request

01:19:51,600 --> 01:19:55,280
and so i'm not wasting money right cloud

01:19:53,520 --> 01:19:55,920
resources cost money i want to make sure

01:19:55,280 --> 01:19:58,719
there

01:19:55,920 --> 01:20:00,400
they go but in this case i only need

01:19:58,719 --> 01:20:02,000
read of the source code i actually don't

01:20:00,400 --> 01:20:02,400
need any other permission so i was able

01:20:02,000 --> 01:20:04,320
to

01:20:02,400 --> 01:20:06,239
lock down the permissions for this

01:20:04,320 --> 01:20:09,280
particular workflow

01:20:06,239 --> 01:20:09,760
and make sure that it just it um it only

01:20:09,280 --> 01:20:11,840
does

01:20:09,760 --> 01:20:13,360
exactly what it needs to do that way if

01:20:11,840 --> 01:20:15,920
for whatever reason

01:20:13,360 --> 01:20:18,159
i i've done something uh not quite right

01:20:15,920 --> 01:20:21,440
or there's some other issue

01:20:18,159 --> 01:20:24,560
i am protecting myself now

01:20:21,440 --> 01:20:26,480
in the workflow that does the deployment

01:20:24,560 --> 01:20:28,000
if i go look at the next set of jobs so

01:20:26,480 --> 01:20:30,080
i had deployed a review

01:20:28,000 --> 01:20:31,040
we see i also have deployed a staging in

01:20:30,080 --> 01:20:34,880
this case

01:20:31,040 --> 01:20:36,719
this one only runs if the ref is on main

01:20:34,880 --> 01:20:38,080
and this gets important for some of the

01:20:36,719 --> 01:20:39,679
environment protection rules that we'll

01:20:38,080 --> 01:20:41,199
take a look at here in a second

01:20:39,679 --> 01:20:44,159
so in this case i'm going to deploy the

01:20:41,199 --> 01:20:47,360
staging it's very similar to the other

01:20:44,159 --> 01:20:48,320
job and then after that it deploys to

01:20:47,360 --> 01:20:49,600
saging

01:20:48,320 --> 01:20:50,960
if everything looks good it's going to

01:20:49,600 --> 01:20:52,560
go under production but of course i

01:20:50,960 --> 01:20:53,199
don't want things to just immediately go

01:20:52,560 --> 01:20:55,360
to production

01:20:53,199 --> 01:20:57,280
right i want to have some sort of

01:20:55,360 --> 01:20:58,480
approval or step in there to make sure

01:20:57,280 --> 01:21:02,320
things

01:20:58,480 --> 01:21:04,320
aren't just moving along so to do that

01:21:02,320 --> 01:21:05,840
in my settings i have this new section

01:21:04,320 --> 01:21:08,239
called environments

01:21:05,840 --> 01:21:09,679
and we see here that i've got review lab

01:21:08,239 --> 01:21:11,120
staging and production if i look at

01:21:09,679 --> 01:21:12,880
production

01:21:11,120 --> 01:21:15,440
i have two protection rules configured

01:21:12,880 --> 01:21:17,360
on this so in this case i got required

01:21:15,440 --> 01:21:19,199
reviewers which i happen to be one for

01:21:17,360 --> 01:21:19,920
this demo but you can also make sure

01:21:19,199 --> 01:21:21,920
that it's

01:21:19,920 --> 01:21:24,159
somebody else on your team or some other

01:21:21,920 --> 01:21:24,560
team but i also have this other one that

01:21:24,159 --> 01:21:26,480
we've

01:21:24,560 --> 01:21:28,320
introduced recently called deployment

01:21:26,480 --> 01:21:30,000
branches and what this says is

01:21:28,320 --> 01:21:32,159
only workflows that are triggered from

01:21:30,000 --> 01:21:35,199
the main bridge in this case

01:21:32,159 --> 01:21:36,639
are able to deploy to this environment

01:21:35,199 --> 01:21:38,320
in fact we've got a couple of different

01:21:36,639 --> 01:21:40,880
settings so i can say

01:21:38,320 --> 01:21:42,159
all branches i could say only protected

01:21:40,880 --> 01:21:44,320
branches or in this case

01:21:42,159 --> 01:21:46,480
my selected branch and you also see i

01:21:44,320 --> 01:21:48,560
have my azure subscription secret

01:21:46,480 --> 01:21:50,000
and this is a the same name but a

01:21:48,560 --> 01:21:52,639
different secret

01:21:50,000 --> 01:21:54,639
from the one in my repository and my

01:21:52,639 --> 01:21:57,920
workflow only gets access

01:21:54,639 --> 01:22:01,280
to this secret when it runs

01:21:57,920 --> 01:22:02,400
against this um this environment

01:22:01,280 --> 01:22:05,840
and it can only run against the

01:22:02,400 --> 01:22:08,639
environment after the rules have passed

01:22:05,840 --> 01:22:10,480
so if we go back and look here at our

01:22:08,639 --> 01:22:12,159
actions workflow

01:22:10,480 --> 01:22:14,400
we can see it's deployed to staging in

01:22:12,159 --> 01:22:17,360
just a second it should complete that

01:22:14,400 --> 01:22:18,719
and go to production and then we'll get

01:22:17,360 --> 01:22:21,040
a notification

01:22:18,719 --> 01:22:22,719
uh that i need to approve it

01:22:21,040 --> 01:22:23,360
notifications are incredibly important

01:22:22,719 --> 01:22:25,760
at github

01:22:23,360 --> 01:22:26,400
and you know whether it's a pull request

01:22:25,760 --> 01:22:29,760
review

01:22:26,400 --> 01:22:32,000
or um or anything else

01:22:29,760 --> 01:22:33,440
being able to get that notification when

01:22:32,000 --> 01:22:35,920
and where you need it

01:22:33,440 --> 01:22:38,000
particularly in the web in email or in

01:22:35,920 --> 01:22:39,360
the incredible github mobile app

01:22:38,000 --> 01:22:41,679
so you can unblock your team is

01:22:39,360 --> 01:22:44,080
important another feature that we're

01:22:41,679 --> 01:22:46,239
launching very soon in

01:22:44,080 --> 01:22:47,520
concert with the mobile team is the

01:22:46,239 --> 01:22:50,320
ability to have

01:22:47,520 --> 01:22:50,800
these review notifications on the mobile

01:22:50,320 --> 01:22:52,400
app

01:22:50,800 --> 01:22:54,080
you'll see more about that soon but

01:22:52,400 --> 01:22:55,600
again this is a kind of a quick sneak

01:22:54,080 --> 01:22:57,679
peek

01:22:55,600 --> 01:22:59,120
of course it'll be there for ios and

01:22:57,679 --> 01:23:02,400
android

01:22:59,120 --> 01:23:07,760
go back and take a look here

01:23:02,400 --> 01:23:10,560
it's taking a quick second

01:23:07,760 --> 01:23:13,120
of course click through it's fully

01:23:10,560 --> 01:23:16,960
interactive to see what's going on

01:23:13,120 --> 01:23:21,840
go back and take a look here at

01:23:16,960 --> 01:23:21,840
my old notifications

01:23:37,120 --> 01:23:40,480
all right how many there let's go back

01:23:40,000 --> 01:23:41,760
and look

01:23:40,480 --> 01:23:44,239
all right so now we're deployed to

01:23:41,760 --> 01:23:46,560
production so we see here

01:23:44,239 --> 01:23:48,159
it's popped up it's stopped so the

01:23:46,560 --> 01:23:49,360
workflow is paused it's no longer

01:23:48,159 --> 01:23:51,120
running on a runner

01:23:49,360 --> 01:23:52,800
it's simply waiting for somebody to come

01:23:51,120 --> 01:23:54,880
along improvement and says

01:23:52,800 --> 01:23:57,040
me chris pax i triggered this workflow

01:23:54,880 --> 01:23:58,719
as request review to play to production

01:23:57,040 --> 01:24:00,480
i can of course click review deployments

01:23:58,719 --> 01:24:02,320
here and if

01:24:00,480 --> 01:24:03,520
company look at notifications i can see

01:24:02,320 --> 01:24:06,320
right here that

01:24:03,520 --> 01:24:08,080
i see this nice notification that tells

01:24:06,320 --> 01:24:10,480
me that i'm looking for review

01:24:08,080 --> 01:24:12,159
and i can rapidly get the information i

01:24:10,480 --> 01:24:13,679
need to unblock the team so if i click

01:24:12,159 --> 01:24:16,239
on that

01:24:13,679 --> 01:24:17,280
it'll navigate me here click on review

01:24:16,239 --> 01:24:22,560
requested

01:24:17,280 --> 01:24:22,560
say it looks good good ship it

01:24:24,719 --> 01:24:30,080
proven deploy and this job will pick up

01:24:28,080 --> 01:24:32,320
and deploy my application to

01:24:30,080 --> 01:24:34,480
the production version of my website and

01:24:32,320 --> 01:24:36,159
keep on going

01:24:34,480 --> 01:24:37,600
so that's a quick tour of some of the

01:24:36,159 --> 01:24:40,320
new capabilities we have

01:24:37,600 --> 01:24:41,760
in github actions in fact i've got one

01:24:40,320 --> 01:24:46,080
more little thing i want to show you

01:24:41,760 --> 01:24:47,520
so there there's always a case where

01:24:46,080 --> 01:24:49,440
a particular environment typically

01:24:47,520 --> 01:24:51,600
production wants to make sure that only

01:24:49,440 --> 01:24:52,800
one thing can deploy to it at a time

01:24:51,600 --> 01:24:55,600
and so we're introducing a new

01:24:52,800 --> 01:24:56,960
capability that will ship in a few weeks

01:24:55,600 --> 01:24:58,639
that's being tested right here which

01:24:56,960 --> 01:24:59,360
will allow me to serialize those

01:24:58,639 --> 01:25:01,679
deployments

01:24:59,360 --> 01:25:03,520
so keep an eye out for that it should be

01:25:01,679 --> 01:25:06,480
really interesting i've got some great

01:25:03,520 --> 01:25:08,000
uh content coming to to really help you

01:25:06,480 --> 01:25:10,000
again drive those continuous delivery

01:25:08,000 --> 01:25:12,800
workflows and just use github actions to

01:25:10,000 --> 01:25:14,560
its fullest

01:25:12,800 --> 01:25:16,320
so with that said i want to thank you so

01:25:14,560 --> 01:25:19,280
much for

01:25:16,320 --> 01:25:20,719
coming to my talk and hopefully using

01:25:19,280 --> 01:25:22,400
github actions

01:25:20,719 --> 01:25:24,239
i look forward to spending the next

01:25:22,400 --> 01:25:27,840
little bit answering your questions

01:25:24,239 --> 01:25:27,840
and helping you learn more

01:25:35,040 --> 01:25:40,000
that means thank you chris that was

01:25:38,840 --> 01:25:42,480
awesome

01:25:40,000 --> 01:25:43,120
thank you shout out to our developer

01:25:42,480 --> 01:25:45,440
community

01:25:43,120 --> 01:25:49,040
in the west india we love you all and

01:25:45,440 --> 01:25:49,040
welcome to get up satellite

01:25:50,239 --> 01:25:58,560
and for that let's jump into the q a

01:25:55,199 --> 01:26:01,679
awesome so the first question um

01:25:58,560 --> 01:26:02,639
craze that we see here is we've talked

01:26:01,679 --> 01:26:05,679
about

01:26:02,639 --> 01:26:06,800
continuous development and that being in

01:26:05,679 --> 01:26:09,440
the beta

01:26:06,800 --> 01:26:10,880
can you speak more about that and share

01:26:09,440 --> 01:26:12,320
like when would that be generally

01:26:10,880 --> 01:26:14,880
available

01:26:12,320 --> 01:26:15,520
absolutely so all the features i showed

01:26:14,880 --> 01:26:18,560
you today

01:26:15,520 --> 01:26:19,679
minus the um i think the mobile app

01:26:18,560 --> 01:26:21,280
hasn't quite shipped and that

01:26:19,679 --> 01:26:22,159
serialization feature that we're looking

01:26:21,280 --> 01:26:24,560
at have

01:26:22,159 --> 01:26:25,920
shipped to github.com and are available

01:26:24,560 --> 01:26:28,239
um

01:26:25,920 --> 01:26:29,840
we chose to make the features that we

01:26:28,239 --> 01:26:30,960
shipped at universa beta because we

01:26:29,840 --> 01:26:32,400
wanted to have some time to get some

01:26:30,960 --> 01:26:33,600
feedback and we also knew that we

01:26:32,400 --> 01:26:35,120
weren't quite done

01:26:33,600 --> 01:26:36,880
with the core set of features that we

01:26:35,120 --> 01:26:39,199
wanted to have available for

01:26:36,880 --> 01:26:40,800
our customers and finally from just an

01:26:39,199 --> 01:26:42,159
engineering health perspective

01:26:40,800 --> 01:26:44,080
we wanted to make sure that we could

01:26:42,159 --> 01:26:45,679
monitor them we could support them we

01:26:44,080 --> 01:26:46,960
knew it was happening all of the things

01:26:45,679 --> 01:26:48,480
that you you know you have to do when

01:26:46,960 --> 01:26:51,040
you run a service

01:26:48,480 --> 01:26:52,320
so we think we're about a month away

01:26:51,040 --> 01:26:54,960
from calling them ga

01:26:52,320 --> 01:26:55,760
a couple of small things left to ship a

01:26:54,960 --> 01:26:58,480
few more

01:26:55,760 --> 01:27:00,000
small bugs to fix and sometime during uh

01:26:58,480 --> 01:27:00,400
the month of april we think we'll call

01:27:00,000 --> 01:27:03,360
these

01:27:00,400 --> 01:27:04,960
ga and then make them and they're

01:27:03,360 --> 01:27:06,960
already widely available at everybody

01:27:04,960 --> 01:27:09,120
it's completely open beta but

01:27:06,960 --> 01:27:10,880
uh that general availability also

01:27:09,120 --> 01:27:12,560
unlocks it so we can ship them in the

01:27:10,880 --> 01:27:14,320
next version of github enterprise server

01:27:12,560 --> 01:27:16,800
so github enterprise server

01:27:14,320 --> 01:27:18,159
uh there's i think an update three one

01:27:16,800 --> 01:27:19,840
is coming soon

01:27:18,159 --> 01:27:21,440
um and then there'll be another one

01:27:19,840 --> 01:27:22,719
after that so it won't be in the 3-1

01:27:21,440 --> 01:27:24,400
version but we want to make sure all

01:27:22,719 --> 01:27:28,480
these hit the the

01:27:24,400 --> 01:27:31,840
3.2 that comes after that

01:27:28,480 --> 01:27:35,440
awesome that's very insightful uh chris

01:27:31,840 --> 01:27:37,520
also mentioned that github action is ga

01:27:35,440 --> 01:27:39,760
on the enterprise server why is it

01:27:37,520 --> 01:27:42,800
important

01:27:39,760 --> 01:27:44,560
so as we heard in the keynote from erica

01:27:42,800 --> 01:27:46,000
github enterprise server is just a very

01:27:44,560 --> 01:27:48,320
important part of the overall

01:27:46,000 --> 01:27:50,239
github product family and we have lots

01:27:48,320 --> 01:27:50,960
of customers for a wide variety of

01:27:50,239 --> 01:27:54,159
reasons

01:27:50,960 --> 01:27:55,600
that need to use it and not having every

01:27:54,159 --> 01:27:56,960
single feature that's available on

01:27:55,600 --> 01:27:58,880
github.com

01:27:56,960 --> 01:28:01,120
is is just not acceptable right they

01:27:58,880 --> 01:28:01,679
want to have all of the power of github

01:28:01,120 --> 01:28:04,000
but run

01:28:01,679 --> 01:28:05,360
in their own data centers github actions

01:28:04,000 --> 01:28:06,719
was one of the largest features that

01:28:05,360 --> 01:28:08,800
just wasn't there yet

01:28:06,719 --> 01:28:09,920
um and it took us a long time it took

01:28:08,800 --> 01:28:12,880
almost a full year

01:28:09,920 --> 01:28:14,400
of very dedicated development from a

01:28:12,880 --> 01:28:16,880
good percentage of the team

01:28:14,400 --> 01:28:18,239
in order to take github actions and

01:28:16,880 --> 01:28:20,639
bring it to get up enterprise server

01:28:18,239 --> 01:28:24,000
there was a significant amount of effort

01:28:20,639 --> 01:28:26,239
um to do that and

01:28:24,000 --> 01:28:27,440
now that it's there a lot of customers

01:28:26,239 --> 01:28:29,199
very large customers who have been

01:28:27,440 --> 01:28:30,400
asking for it are happy and starting to

01:28:29,199 --> 01:28:32,320
adopt

01:28:30,400 --> 01:28:34,800
and again it's all about making sure

01:28:32,320 --> 01:28:36,639
that github enterprise server

01:28:34,800 --> 01:28:38,400
sells the full vision and the full value

01:28:36,639 --> 01:28:39,600
that people expect from github.com but

01:28:38,400 --> 01:28:41,040
in your data center

01:28:39,600 --> 01:28:43,120
i think one of the other unique things

01:28:41,040 --> 01:28:45,600
we did with actions which i'm not

01:28:43,120 --> 01:28:47,280
which is kind of been done before is

01:28:45,600 --> 01:28:48,880
really start to think about github

01:28:47,280 --> 01:28:50,239
enterprise server as an extension of

01:28:48,880 --> 01:28:52,320
github.com

01:28:50,239 --> 01:28:54,000
so through github enterprise connect you

01:28:52,320 --> 01:28:55,040
can connect your server to your

01:28:54,000 --> 01:28:58,159
github.com

01:28:55,040 --> 01:28:59,679
enterprise and allow your developers who

01:28:58,159 --> 01:29:01,280
are running workflows there to take

01:28:59,679 --> 01:29:03,360
advantage of the marketplace of the

01:29:01,280 --> 01:29:06,320
community of actions that's available

01:29:03,360 --> 01:29:07,600
on github.com there's some controls and

01:29:06,320 --> 01:29:09,920
things you have in there

01:29:07,600 --> 01:29:11,360
to make sure to to provide some rails

01:29:09,920 --> 01:29:13,199
and some guidelines

01:29:11,360 --> 01:29:14,719
but we do think it's important that just

01:29:13,199 --> 01:29:16,639
because you need to run

01:29:14,719 --> 01:29:19,040
everything in your data center for very

01:29:16,639 --> 01:29:20,880
good reasons that you're also able to

01:29:19,040 --> 01:29:21,440
take advantage of the open source

01:29:20,880 --> 01:29:24,960
community

01:29:21,440 --> 01:29:27,920
as much as possible

01:29:24,960 --> 01:29:28,480
oh yes that is especially github connect

01:29:27,920 --> 01:29:31,360
will

01:29:28,480 --> 01:29:32,400
be really really useful for enterprises

01:29:31,360 --> 01:29:34,480
now coming to again

01:29:32,400 --> 01:29:35,520
enterprise need and that whole devops

01:29:34,480 --> 01:29:37,840
cycle you

01:29:35,520 --> 01:29:39,840
talked a little about granular

01:29:37,840 --> 01:29:43,120
permissions control feature

01:29:39,840 --> 01:29:46,080
do you want to share more about that

01:29:43,120 --> 01:29:47,280
sure um as i mentioned in the demo one

01:29:46,080 --> 01:29:50,400
of the key things

01:29:47,280 --> 01:29:51,440
is to make sure that um our one a key

01:29:50,400 --> 01:29:55,280
security tenant

01:29:51,440 --> 01:29:55,679
um is least access right and all things

01:29:55,280 --> 01:29:57,199
you do

01:29:55,679 --> 01:29:59,520
you want to make sure that you give

01:29:57,199 --> 01:30:00,560
people the least access possible or you

01:29:59,520 --> 01:30:02,400
give a process

01:30:00,560 --> 01:30:04,639
especially automation that's a that's a

01:30:02,400 --> 01:30:08,639
really ripe area for

01:30:04,639 --> 01:30:09,679
attack and uh as we started github

01:30:08,639 --> 01:30:12,000
actions

01:30:09,679 --> 01:30:13,600
just for a variety of reasons we we

01:30:12,000 --> 01:30:15,840
built it where we actually did

01:30:13,600 --> 01:30:18,000
narrow the permissions from a standard

01:30:15,840 --> 01:30:19,520
github app so typically

01:30:18,000 --> 01:30:21,760
when you have a standard github app you

01:30:19,520 --> 01:30:24,639
give it a list of repos you say this has

01:30:21,760 --> 01:30:26,480
some set of permissions to this set of

01:30:24,639 --> 01:30:28,080
repos well with github actions

01:30:26,480 --> 01:30:30,480
we at least narrowed that to a single

01:30:28,080 --> 01:30:32,000
repo now within that repo you still had

01:30:30,480 --> 01:30:33,920
fairly broad permissions because we

01:30:32,000 --> 01:30:35,520
wanted people to be able to automate

01:30:33,920 --> 01:30:38,080
all kinds of things you know they want

01:30:35,520 --> 01:30:41,440
to automate ci but they also automate

01:30:38,080 --> 01:30:44,560
issue bots and we see amazing

01:30:41,440 --> 01:30:46,159
variety of different things so the

01:30:44,560 --> 01:30:47,760
github apps token could read write

01:30:46,159 --> 01:30:49,120
source can read write issues read write

01:30:47,760 --> 01:30:50,239
prs et cetera you can go look at the

01:30:49,120 --> 01:30:52,880
documentation and see

01:30:50,239 --> 01:30:53,679
all of the capabilities it has but of

01:30:52,880 --> 01:30:56,639
course

01:30:53,679 --> 01:30:57,199
any given workflow any given workflow

01:30:56,639 --> 01:30:58,719
doesn't

01:30:57,199 --> 01:31:01,280
necessarily need to be able to do all

01:30:58,719 --> 01:31:02,719
those things and we have had requests

01:31:01,280 --> 01:31:05,360
from this in the community

01:31:02,719 --> 01:31:06,880
uh and certainly as we wanted to get

01:31:05,360 --> 01:31:08,560
there it just took us a while but as

01:31:06,880 --> 01:31:11,280
part of this push that we've been

01:31:08,560 --> 01:31:12,159
really working on uh this past couple of

01:31:11,280 --> 01:31:13,760
months

01:31:12,159 --> 01:31:15,920
we thought it was the right time to go

01:31:13,760 --> 01:31:17,600
and implement this new feature and so

01:31:15,920 --> 01:31:19,520
what it lets you do is that permissions

01:31:17,600 --> 01:31:20,800
lock basically lets you customize the

01:31:19,520 --> 01:31:22,960
permissions of the

01:31:20,800 --> 01:31:24,639
github token that are generated for

01:31:22,960 --> 01:31:26,159
every specific run and you can actually

01:31:24,639 --> 01:31:28,960
do it at two levels

01:31:26,159 --> 01:31:30,400
you can say the whole workflow has a

01:31:28,960 --> 01:31:33,520
token of this set of permissions

01:31:30,400 --> 01:31:35,280
or you can say just a job and why that's

01:31:33,520 --> 01:31:36,080
important is i could do something like

01:31:35,280 --> 01:31:39,199
say

01:31:36,080 --> 01:31:42,639
um have a dependable workflow and maybe

01:31:39,199 --> 01:31:46,080
it can the first job that actually

01:31:42,639 --> 01:31:49,040
pulls the untrusted source from

01:31:46,080 --> 01:31:51,199
the pull request open by dependable has

01:31:49,040 --> 01:31:52,400
just read source option like it only can

01:31:51,199 --> 01:31:53,840
only read source or maybe it can

01:31:52,400 --> 01:31:54,880
resource and write issues or something

01:31:53,840 --> 01:31:56,800
like that

01:31:54,880 --> 01:31:58,639
and so i can run that potentially

01:31:56,800 --> 01:32:00,639
untrusted workload in a very

01:31:58,639 --> 01:32:03,520
narrow set of permissions and then if

01:32:00,639 --> 01:32:05,679
that passes i can then have a second job

01:32:03,520 --> 01:32:06,960
that maybe merges the pr or does

01:32:05,679 --> 01:32:07,920
something else that requires higher

01:32:06,960 --> 01:32:10,320
permissions

01:32:07,920 --> 01:32:11,760
but i don't execute any untrusted code

01:32:10,320 --> 01:32:13,120
as part of that so i don't have the

01:32:11,760 --> 01:32:15,840
ability for say

01:32:13,120 --> 01:32:17,679
a compromise dependency to come in and

01:32:15,840 --> 01:32:18,800
insert something into my repo so it's

01:32:17,679 --> 01:32:21,520
really about that

01:32:18,800 --> 01:32:23,120
fine grain control to really give you

01:32:21,520 --> 01:32:26,960
that least access for whatever

01:32:23,120 --> 01:32:29,440
the scenario is

01:32:26,960 --> 01:32:30,159
wow that's that's very very insightful

01:32:29,440 --> 01:32:31,520
uh chris

01:32:30,159 --> 01:32:34,480
we're getting a lot of questions and

01:32:31,520 --> 01:32:37,440
we'll take just one last here

01:32:34,480 --> 01:32:40,080
any idea by when private repos uh would

01:32:37,440 --> 01:32:42,000
get environments in actions

01:32:40,080 --> 01:32:43,280
so private repos have environments with

01:32:42,000 --> 01:32:45,440
actions today but

01:32:43,280 --> 01:32:47,520
they're only part of the enterprise sku

01:32:45,440 --> 01:32:49,600
so you have to have an enterprise plan

01:32:47,520 --> 01:32:50,880
to use environments with private repos

01:32:49,600 --> 01:32:52,239
it's something that we're taking you

01:32:50,880 --> 01:32:53,920
know we certainly have seen the feedback

01:32:52,239 --> 01:32:54,719
from the community that people wanted in

01:32:53,920 --> 01:32:56,080
team

01:32:54,719 --> 01:32:58,080
um it is something that we are

01:32:56,080 --> 01:33:01,360
discussing uh but today

01:32:58,080 --> 01:33:03,280
we we sort of because the environments

01:33:01,360 --> 01:33:05,520
uh protection rules and things like that

01:33:03,280 --> 01:33:07,840
are very um compliance oriented

01:33:05,520 --> 01:33:09,920
et cetera we sort of group them with the

01:33:07,840 --> 01:33:13,199
other sets of features that tend to be

01:33:09,920 --> 01:33:13,199
uh in that enterprise plan

01:33:13,280 --> 01:33:16,639
great great and this question was from

01:33:15,040 --> 01:33:19,199
the pain

01:33:16,639 --> 01:33:19,920
thanks a lot chris and uh for our

01:33:19,199 --> 01:33:21,520
audience

01:33:19,920 --> 01:33:23,280
let me share with you that chris is not

01:33:21,520 --> 01:33:25,600
going anywhere he is with you all

01:33:23,280 --> 01:33:26,400
for the next 30 minutes at github

01:33:25,600 --> 01:33:29,199
discussions

01:33:26,400 --> 01:33:29,600
so post all your queries get all his all

01:33:29,199 --> 01:33:32,880
your

01:33:29,600 --> 01:33:34,800
answers uh from him and he's joining you

01:33:32,880 --> 01:33:36,000
at his midnight so take as much as

01:33:34,800 --> 01:33:38,159
possible from him

01:33:36,000 --> 01:33:39,920
bye bye chris we'll let you go and enjoy

01:33:38,159 --> 01:33:41,280
your time with our viewers at getup

01:33:39,920 --> 01:33:50,480
discussions

01:33:41,280 --> 01:33:53,040
bye-bye thank you so much

01:33:50,480 --> 01:33:53,920
that was a great talk and we want to

01:33:53,040 --> 01:33:57,360
hear from

01:33:53,920 --> 01:34:00,800
all of you out there tell us how

01:33:57,360 --> 01:34:04,159
we're doing join us and celebrate

01:34:00,800 --> 01:34:06,480
the community um we want to hear

01:34:04,159 --> 01:34:07,840
everything about you as well share your

01:34:06,480 --> 01:34:11,520
favorite head gears

01:34:07,840 --> 01:34:13,840
and hashtag github satellite so

01:34:11,520 --> 01:34:14,880
coming to the next session it's all

01:34:13,840 --> 01:34:17,920
about

01:34:14,880 --> 01:34:19,760
shifting left in security we know and

01:34:17,920 --> 01:34:21,600
we've kind of put it in practice as well

01:34:19,760 --> 01:34:23,360
shifting left when it comes to

01:34:21,600 --> 01:34:26,239
testing and let's start thinking about

01:34:23,360 --> 01:34:30,000
that with respect to security as well

01:34:26,239 --> 01:34:30,880
so shift left and security and secure

01:34:30,000 --> 01:34:34,080
development

01:34:30,880 --> 01:34:36,960
shared by nicholas means director of

01:34:34,080 --> 01:34:37,440
engineering at github he's joining us

01:34:36,960 --> 01:34:39,760
from

01:34:37,440 --> 01:34:41,760
austin thank you nicholas for being

01:34:39,760 --> 01:34:44,800
there at your midnight

01:34:41,760 --> 01:34:46,239
phyllis loves nothing more than a story

01:34:44,800 --> 01:34:49,679
of engineering triumph

01:34:46,239 --> 01:34:52,159
obviously at github and when he's not

01:34:49,679 --> 01:34:54,080
stuck with wikipedia reading loop he

01:34:52,159 --> 01:34:55,920
spends his day focused making the

01:34:54,080 --> 01:34:59,040
software supply chain

01:34:55,920 --> 01:35:02,880
safer and growing the perfect

01:34:59,040 --> 01:35:05,280
cup of coffee

01:35:02,880 --> 01:35:08,320
wow and remember to engage with us on

01:35:05,280 --> 01:35:08,320
github discussions

01:35:13,600 --> 01:35:17,280
with that nicholas take it away

01:35:20,880 --> 01:35:24,080
hey good morning everyone it is an

01:35:22,560 --> 01:35:26,400
absolute pleasure to be with you this

01:35:24,080 --> 01:35:28,239
morning at github satellite india

01:35:26,400 --> 01:35:29,679
uh like divya said my name is nicholas

01:35:28,239 --> 01:35:31,679
means i'm director of engineering for

01:35:29,679 --> 01:35:33,840
supply chain security at github

01:35:31,679 --> 01:35:35,600
uh i'm joining you this morning from

01:35:33,840 --> 01:35:36,239
austin texas in the united states where

01:35:35,600 --> 01:35:39,520
it's about

01:35:36,239 --> 01:35:41,119
30 minutes past midnight so i'm doing my

01:35:39,520 --> 01:35:42,480
best to bring that late night energy for

01:35:41,119 --> 01:35:46,159
y'all

01:35:42,480 --> 01:35:48,639
um i i hate to be this obvious

01:35:46,159 --> 01:35:49,920
but a talk about software security in

01:35:48,639 --> 01:35:52,159
01:35:49,920 --> 01:35:53,520
almost has to start by talking about

01:35:52,159 --> 01:35:55,440
solar gate

01:35:53,520 --> 01:35:57,440
the breach of secure systems worldwide

01:35:55,440 --> 01:35:59,280
through a supply chain attack

01:35:57,440 --> 01:36:01,520
malicious actors inserted code into a

01:35:59,280 --> 01:36:03,600
legitimate solarwinds library

01:36:01,520 --> 01:36:05,040
and used as a backdoor into systems

01:36:03,600 --> 01:36:06,560
around the world as the vulnerable

01:36:05,040 --> 01:36:07,600
library was installed via software

01:36:06,560 --> 01:36:10,000
update

01:36:07,600 --> 01:36:11,840
now this was a huge incident it got a

01:36:10,000 --> 01:36:14,560
ton of media coverage

01:36:11,840 --> 01:36:16,560
but the reality is that most software

01:36:14,560 --> 01:36:18,560
vulnerability incidents aren't nearly

01:36:16,560 --> 01:36:21,199
this visible

01:36:18,560 --> 01:36:22,400
in fact you probably have one waiting to

01:36:21,199 --> 01:36:25,040
happen in your code base

01:36:22,400 --> 01:36:26,239
right now according to the varicode

01:36:25,040 --> 01:36:29,600
state of security

01:36:26,239 --> 01:36:32,880
report 83 of applications

01:36:29,600 --> 01:36:34,480
have at least one security vulnerability

01:36:32,880 --> 01:36:36,560
now what this means is if your company

01:36:34,480 --> 01:36:38,800
maintains one application

01:36:36,560 --> 01:36:39,840
you've got a four in five chance that

01:36:38,800 --> 01:36:42,320
it's got at least

01:36:39,840 --> 01:36:44,320
one vulnerability that a dedicated

01:36:42,320 --> 01:36:45,600
hacker could find and exploit

01:36:44,320 --> 01:36:47,920
if you maintain more than one

01:36:45,600 --> 01:36:51,280
application your odds are nearly

01:36:47,920 --> 01:36:52,960
100 so if you're not doing something to

01:36:51,280 --> 01:36:54,000
find those security vulnerabilities and

01:36:52,960 --> 01:36:57,119
mitigate them

01:36:54,000 --> 01:36:59,040
you're putting your users at risk

01:36:57,119 --> 01:37:00,880
and it turns out that developers

01:36:59,040 --> 01:37:02,719
introduce security vulnerabilities at a

01:37:00,880 --> 01:37:04,320
fairly consistent rate

01:37:02,719 --> 01:37:06,159
relative to the number of lines of code

01:37:04,320 --> 01:37:07,760
we create now

01:37:06,159 --> 01:37:09,760
to be clear this doesn't mean that

01:37:07,760 --> 01:37:11,600
you're a bad developer

01:37:09,760 --> 01:37:13,199
it just shows that creating secure

01:37:11,600 --> 01:37:15,600
software is hard

01:37:13,199 --> 01:37:17,440
i mean think about it to create

01:37:15,600 --> 01:37:20,800
perfectly secure software

01:37:17,440 --> 01:37:22,960
you have to be right 100 of the time

01:37:20,800 --> 01:37:24,880
to introduce a vulnerability you only

01:37:22,960 --> 01:37:26,719
have to be wrong once

01:37:24,880 --> 01:37:28,239
multiply these odds across an entire

01:37:26,719 --> 01:37:30,000
software development team

01:37:28,239 --> 01:37:31,360
and you start to see the scope of the

01:37:30,000 --> 01:37:35,280
problem

01:37:31,360 --> 01:37:36,719
so what do we do well again from the

01:37:35,280 --> 01:37:38,560
state of the octoverse report

01:37:36,719 --> 01:37:41,280
we have some good evidence that teams

01:37:38,560 --> 01:37:43,520
that adopt devsecops practices

01:37:41,280 --> 01:37:45,280
significantly reduce the amount of time

01:37:43,520 --> 01:37:46,320
it takes them to remediate security

01:37:45,280 --> 01:37:49,360
vulnerabilities

01:37:46,320 --> 01:37:51,360
in their code base specifically

01:37:49,360 --> 01:37:53,600
teams that run security scans as part of

01:37:51,360 --> 01:37:58,000
their everyday development practices

01:37:53,600 --> 01:37:59,840
find and fix vulnerabilities faster

01:37:58,000 --> 01:38:01,600
now if we operate with the assumption

01:37:59,840 --> 01:38:03,360
that we're going to introduce security

01:38:01,600 --> 01:38:04,800
vulnerabilities into our code

01:38:03,360 --> 01:38:07,280
because they're almost impossible to

01:38:04,800 --> 01:38:09,600
avoid then this metric

01:38:07,280 --> 01:38:11,360
mean time to remediate becomes the one

01:38:09,600 --> 01:38:12,960
that we care about

01:38:11,360 --> 01:38:14,639
if we're going to inadvertently

01:38:12,960 --> 01:38:16,719
introduce vulnerabilities

01:38:14,639 --> 01:38:19,840
then the important thing is finding and

01:38:16,719 --> 01:38:19,840
fixing them quickly

01:38:20,080 --> 01:38:24,560
so how do we increase the speed at which

01:38:21,920 --> 01:38:27,119
we find and fix vulnerabilities

01:38:24,560 --> 01:38:28,000
well we shift our security practices

01:38:27,119 --> 01:38:31,040
left

01:38:28,000 --> 01:38:32,639
now what does that mean

01:38:31,040 --> 01:38:35,040
well let's take a look at a fairly

01:38:32,639 --> 01:38:36,639
typical feature development timeline for

01:38:35,040 --> 01:38:38,000
a software team

01:38:36,639 --> 01:38:39,840
you kick off a feature with some

01:38:38,000 --> 01:38:40,400
planning and some design work you build

01:38:39,840 --> 01:38:42,159
it

01:38:40,400 --> 01:38:43,920
you test it and then if you have a

01:38:42,159 --> 01:38:44,480
security team look at your feature at

01:38:43,920 --> 01:38:47,040
all

01:38:44,480 --> 01:38:48,400
it happens right before launch after the

01:38:47,040 --> 01:38:50,480
feature is already built

01:38:48,400 --> 01:38:52,239
and when it's extremely expensive to

01:38:50,480 --> 01:38:53,840
make a change

01:38:52,239 --> 01:38:55,600
because it's so expensive to make a

01:38:53,840 --> 01:38:57,920
change only the biggest

01:38:55,600 --> 01:38:58,639
problems get fixed before launch which

01:38:57,920 --> 01:39:01,600
means

01:38:58,639 --> 01:39:03,440
inevitably you find vulnerabilities

01:39:01,600 --> 01:39:04,639
after your feature has already been

01:39:03,440 --> 01:39:05,840
deployed

01:39:04,639 --> 01:39:07,840
you've exposed yourself to the

01:39:05,840 --> 01:39:09,440
vulnerability and generated costly

01:39:07,840 --> 01:39:11,280
remediation work that you now have to

01:39:09,440 --> 01:39:13,840
take care of at the expense of feature

01:39:11,280 --> 01:39:18,320
development

01:39:13,840 --> 01:39:18,320
so what's different when we shift left

01:39:18,560 --> 01:39:22,080
well first you need to give your

01:39:20,159 --> 01:39:23,520
development teams tools to help them

01:39:22,080 --> 01:39:26,719
spot security problems

01:39:23,520 --> 01:39:28,800
early in the development process github

01:39:26,719 --> 01:39:30,560
has focused on building security tools

01:39:28,800 --> 01:39:32,080
to empower developers

01:39:30,560 --> 01:39:33,600
to discover issues early in the

01:39:32,080 --> 01:39:35,040
development process

01:39:33,600 --> 01:39:38,719
and i'll talk more about how you can

01:39:35,040 --> 01:39:38,719
leverage those tools in just a moment

01:39:38,960 --> 01:39:43,600
second you need to move your security

01:39:41,600 --> 01:39:44,800
review process from after the feature is

01:39:43,600 --> 01:39:48,000
built and tested

01:39:44,800 --> 01:39:49,760
to much earlier in the process you want

01:39:48,000 --> 01:39:51,360
your security team to be part of your

01:39:49,760 --> 01:39:52,239
feature planning process so they can

01:39:51,360 --> 01:39:54,719
help you design

01:39:52,239 --> 01:39:55,600
security into the feature as you build

01:39:54,719 --> 01:39:57,360
it

01:39:55,600 --> 01:39:58,960
it's much less of a review and much more

01:39:57,360 --> 01:40:00,480
of a collaboration

01:39:58,960 --> 01:40:02,400
in contrast to the more traditional

01:40:00,480 --> 01:40:03,440
model where security is one more hurdle

01:40:02,400 --> 01:40:05,600
that you need to clear

01:40:03,440 --> 01:40:08,000
to get your feature to production or

01:40:05,600 --> 01:40:09,760
worse where security comes along after a

01:40:08,000 --> 01:40:11,199
feature is already launched and demands

01:40:09,760 --> 01:40:13,920
changes

01:40:11,199 --> 01:40:16,639
this security consultation model is such

01:40:13,920 --> 01:40:18,400
an empowering way for developers to work

01:40:16,639 --> 01:40:20,159
and it sets your developers and security

01:40:18,400 --> 01:40:22,000
engineers up for a productive

01:40:20,159 --> 01:40:24,320
collaborative relationship instead of a

01:40:22,000 --> 01:40:26,000
contentious one

01:40:24,320 --> 01:40:28,159
now these changes in tooling and

01:40:26,000 --> 01:40:30,080
practices mean that you're much more

01:40:28,159 --> 01:40:33,040
likely to find security problems

01:40:30,080 --> 01:40:33,840
early in the feature life cycle like we

01:40:33,040 --> 01:40:35,920
said earlier

01:40:33,840 --> 01:40:37,440
even though it's largely impossible to

01:40:35,920 --> 01:40:38,960
avoid inadvertently introducing

01:40:37,440 --> 01:40:40,480
vulnerabilities

01:40:38,960 --> 01:40:42,320
you find them as early in the

01:40:40,480 --> 01:40:44,400
development process as you can

01:40:42,320 --> 01:40:47,840
before they're deployed and when it's

01:40:44,400 --> 01:40:49,520
still easy for you to make changes

01:40:47,840 --> 01:40:51,119
now i mentioned earlier that github is

01:40:49,520 --> 01:40:53,199
focused on building tooling around

01:40:51,119 --> 01:40:54,000
empowering developers to fix security

01:40:53,199 --> 01:40:56,880
issues

01:40:54,000 --> 01:41:00,239
early in the development process so

01:40:56,880 --> 01:41:02,080
let's talk a bit about those tools now

01:41:00,239 --> 01:41:04,880
github advanced security is our suite of

01:41:02,080 --> 01:41:06,639
developer-focused security tools

01:41:04,880 --> 01:41:08,159
these tools are all designed to help you

01:41:06,639 --> 01:41:10,239
write more secure code

01:41:08,159 --> 01:41:12,320
by identifying security issues earlier

01:41:10,239 --> 01:41:14,320
in the development process

01:41:12,320 --> 01:41:16,560
within advanced security we have three

01:41:14,320 --> 01:41:18,480
main product feature areas

01:41:16,560 --> 01:41:19,840
the first is secure dependencies

01:41:18,480 --> 01:41:21,280
features focused on helping you

01:41:19,840 --> 01:41:22,239
understand what dependencies you're

01:41:21,280 --> 01:41:24,560
using

01:41:22,239 --> 01:41:26,400
and how you're using them these are

01:41:24,560 --> 01:41:30,080
classic software composition analysis

01:41:26,400 --> 01:41:32,960
tools but with a developer-focused bent

01:41:30,080 --> 01:41:34,719
second is secure code these features are

01:41:32,960 --> 01:41:36,000
focused on helping you ensure the code

01:41:34,719 --> 01:41:38,080
that your team writes

01:41:36,000 --> 01:41:39,679
is secure through static analysis

01:41:38,080 --> 01:41:42,320
scanning

01:41:39,679 --> 01:41:44,000
and finally secure secrets building a

01:41:42,320 --> 01:41:45,119
modern software architecture means

01:41:44,000 --> 01:41:46,719
linking a set of

01:41:45,119 --> 01:41:48,400
interdependent tools and services and

01:41:46,719 --> 01:41:49,840
all of those tools and services require

01:41:48,400 --> 01:41:51,440
credentials

01:41:49,840 --> 01:41:52,880
this set of features is focused on

01:41:51,440 --> 01:41:54,400
helping you make sure that you don't

01:41:52,880 --> 01:41:57,520
accidentally leak

01:41:54,400 --> 01:41:59,520
any of those secrets

01:41:57,520 --> 01:42:00,960
so let's start by talking about secure

01:41:59,520 --> 01:42:02,239
dependencies

01:42:00,960 --> 01:42:04,400
making sure the code that you're

01:42:02,239 --> 01:42:07,679
importing into your project is secure

01:42:04,400 --> 01:42:09,119
and safe to use first

01:42:07,679 --> 01:42:11,199
i'm going to talk about a few tools

01:42:09,119 --> 01:42:12,840
within secure dependencies first

01:42:11,199 --> 01:42:14,800
our friendly dependency updating robot

01:42:12,840 --> 01:42:16,719
dependabot which helps you keep your

01:42:14,800 --> 01:42:19,600
dependencies up to date with alerts

01:42:16,719 --> 01:42:21,119
and automated pull requests second

01:42:19,600 --> 01:42:22,719
dependency review

01:42:21,119 --> 01:42:24,400
which empowers code reviewers with

01:42:22,719 --> 01:42:25,520
insights on dependency changes in a pull

01:42:24,400 --> 01:42:27,679
request

01:42:25,520 --> 01:42:29,600
and finally dependency graph which helps

01:42:27,679 --> 01:42:31,760
you understand what software you depend

01:42:29,600 --> 01:42:31,760
on

01:42:32,000 --> 01:42:35,920
first let's talk about dependable now

01:42:34,639 --> 01:42:37,920
there's a couple of different things

01:42:35,920 --> 01:42:40,159
that dependable can do for you

01:42:37,920 --> 01:42:41,520
first it can help you spot and remediate

01:42:40,159 --> 01:42:43,119
dependencies with security

01:42:41,520 --> 01:42:44,560
vulnerabilities

01:42:43,119 --> 01:42:46,000
when a vulnerability is published for

01:42:44,560 --> 01:42:47,119
the version of a dependency you use in

01:42:46,000 --> 01:42:50,000
your code base

01:42:47,119 --> 01:42:51,679
dependabot will let you know in most

01:42:50,000 --> 01:42:53,600
cases dependibot can generate a pull

01:42:51,679 --> 01:42:55,440
request for you automatically to update

01:42:53,600 --> 01:42:56,960
your project to a safe version of that

01:42:55,440 --> 01:42:59,119
dependency

01:42:56,960 --> 01:43:00,800
and if dependable can't update your code

01:42:59,119 --> 01:43:02,400
for you say because the vulnerable

01:43:00,800 --> 01:43:04,000
version is directly specified as a

01:43:02,400 --> 01:43:04,960
dependency of another dependency in your

01:43:04,000 --> 01:43:06,800
project

01:43:04,960 --> 01:43:09,440
dependable will send you an alert to

01:43:06,800 --> 01:43:10,800
notify you and to give you steps on how

01:43:09,440 --> 01:43:12,480
steps you can take to resolve the

01:43:10,800 --> 01:43:14,320
problem

01:43:12,480 --> 01:43:16,320
dependable can also keep all of your

01:43:14,320 --> 01:43:17,840
dependencies not just ones with security

01:43:16,320 --> 01:43:19,280
vulnerabilities up to date for you

01:43:17,840 --> 01:43:21,440
automatically

01:43:19,280 --> 01:43:23,280
bumping dependencies each time a new

01:43:21,440 --> 01:43:24,880
version is released

01:43:23,280 --> 01:43:26,560
this keeps you from being exposed to a

01:43:24,880 --> 01:43:28,880
vulnerability discovered in an older

01:43:26,560 --> 01:43:30,480
version of a dependency or worse

01:43:28,880 --> 01:43:32,080
getting stuck in a situation where it's

01:43:30,480 --> 01:43:33,360
difficult to migrate off of an old

01:43:32,080 --> 01:43:36,159
version of a dependency

01:43:33,360 --> 01:43:36,639
because you're so many versions behind

01:43:36,159 --> 01:43:38,400
now

01:43:36,639 --> 01:43:39,679
the key thing that i can tell you about

01:43:38,400 --> 01:43:41,199
dependable

01:43:39,679 --> 01:43:43,280
is that repositories that have depend

01:43:41,199 --> 01:43:45,760
about security updates enabled

01:43:43,280 --> 01:43:46,400
fixed vulnerabilities on average 1.4

01:43:45,760 --> 01:43:48,639
times

01:43:46,400 --> 01:43:50,480
faster than repositories that aren't

01:43:48,639 --> 01:43:52,159
using dependable so if you're focused on

01:43:50,480 --> 01:43:53,440
mean time to resolution for security

01:43:52,159 --> 01:43:54,800
vulnerabilities

01:43:53,440 --> 01:43:57,679
this is one of the key ways you can

01:43:54,800 --> 01:43:57,679
address that metric

01:43:57,840 --> 01:44:02,080
next dependency review is a relatively

01:44:00,480 --> 01:44:03,760
new feature to help you understand what

01:44:02,080 --> 01:44:05,360
dependency changes are being made in a

01:44:03,760 --> 01:44:07,600
pull request

01:44:05,360 --> 01:44:09,520
for each dependency you use you can see

01:44:07,600 --> 01:44:12,080
how old the version you're using is

01:44:09,520 --> 01:44:14,239
how widely used that dependency is and

01:44:12,080 --> 01:44:15,600
what license it was released under

01:44:14,239 --> 01:44:17,280
but the critical feature is that

01:44:15,600 --> 01:44:19,679
dependency review will flag any

01:44:17,280 --> 01:44:21,119
vulnerable dependencies for you

01:44:19,679 --> 01:44:22,800
you can see in this screenshot the

01:44:21,119 --> 01:44:24,639
dependency review has flagged a critical

01:44:22,800 --> 01:44:26,080
security vulnerability in the json web

01:44:24,639 --> 01:44:28,480
token package

01:44:26,080 --> 01:44:30,400
by reviewing this at pr time you can

01:44:28,480 --> 01:44:31,199
make sure that it never gets deployed to

01:44:30,400 --> 01:44:34,320
production

01:44:31,199 --> 01:44:36,480
in the first place

01:44:34,320 --> 01:44:38,080
and finally the github dependency graph

01:44:36,480 --> 01:44:39,760
is the secret sauce of our dependency

01:44:38,080 --> 01:44:42,159
security features

01:44:39,760 --> 01:44:43,440
dependency graph helps you and github

01:44:42,159 --> 01:44:44,639
understand what packages you're

01:44:43,440 --> 01:44:46,239
dependent upon

01:44:44,639 --> 01:44:47,920
so that we can bring you the valuable

01:44:46,239 --> 01:44:50,080
information and depend about security

01:44:47,920 --> 01:44:51,520
alerts in dependency review

01:44:50,080 --> 01:44:53,199
the dependency graph has support for

01:44:51,520 --> 01:44:55,920
the.net java

01:44:53,199 --> 01:44:57,119
javascript php python and ruby

01:44:55,920 --> 01:44:59,440
ecosystems

01:44:57,119 --> 01:45:00,320
so if your code base is in any of these

01:44:59,440 --> 01:45:02,239
languages

01:45:00,320 --> 01:45:04,880
you should definitely take advantage of

01:45:02,239 --> 01:45:04,880
these features

01:45:08,560 --> 01:45:11,440
okay so we've covered code that other

01:45:10,239 --> 01:45:13,199
people are writing and that you're

01:45:11,440 --> 01:45:14,960
including in your code base

01:45:13,199 --> 01:45:16,560
let's shift gears a little bit and talk

01:45:14,960 --> 01:45:18,239
about making the code that your team is

01:45:16,560 --> 01:45:19,600
producing more secure with our secure

01:45:18,239 --> 01:45:21,040
code features

01:45:19,600 --> 01:45:22,719
these are tools to help you spot

01:45:21,040 --> 01:45:25,840
potential security problems in the new

01:45:22,719 --> 01:45:27,440
code you and your team produce

01:45:25,840 --> 01:45:29,520
again i'm going to talk about a few

01:45:27,440 --> 01:45:31,440
features within secure code

01:45:29,520 --> 01:45:32,719
first code scanning is a rich user

01:45:31,440 --> 01:45:34,719
interface for understanding and

01:45:32,719 --> 01:45:36,159
responding to alerts generated by static

01:45:34,719 --> 01:45:37,840
analysis tools

01:45:36,159 --> 01:45:40,400
helping you make the most of the rich

01:45:37,840 --> 01:45:42,800
information that these tools produce

01:45:40,400 --> 01:45:44,080
next codeql is github's advanced

01:45:42,800 --> 01:45:46,800
semantic code analysis

01:45:44,080 --> 01:45:48,239
engine it's focused on helping you find

01:45:46,800 --> 01:45:49,520
security vulnerabilities in the code

01:45:48,239 --> 01:45:52,320
your team produces

01:45:49,520 --> 01:45:53,360
displaying the results in code scanning

01:45:52,320 --> 01:45:55,280
and finally

01:45:53,360 --> 01:45:57,119
support for third-party analyzers which

01:45:55,280 --> 01:45:58,159
let you extend the built-in analysis of

01:45:57,119 --> 01:45:59,920
codeql

01:45:58,159 --> 01:46:03,440
with the results of any standards

01:45:59,920 --> 01:46:06,560
compliant static analysis tool

01:46:03,440 --> 01:46:08,320
so first let's talk about code scanning

01:46:06,560 --> 01:46:09,920
code scanning is a rich user interface

01:46:08,320 --> 01:46:11,600
that allows you to review and understand

01:46:09,920 --> 01:46:14,320
the results from security scans

01:46:11,600 --> 01:46:15,920
right in the pr flow it brings you the

01:46:14,320 --> 01:46:17,040
information at code review time when

01:46:15,920 --> 01:46:18,560
you're primed to act

01:46:17,040 --> 01:46:20,320
on it when the code is still fresh in

01:46:18,560 --> 01:46:22,320
your mind

01:46:20,320 --> 01:46:24,320
in this screenshot you can see a codeql

01:46:22,320 --> 01:46:25,360
result indicating a potential denial of

01:46:24,320 --> 01:46:27,840
service attack

01:46:25,360 --> 01:46:29,280
because of missing rate limiting it

01:46:27,840 --> 01:46:30,800
shows you the line of code where it

01:46:29,280 --> 01:46:32,560
found the problem

01:46:30,800 --> 01:46:34,400
and it gives you rich data about what

01:46:32,560 --> 01:46:35,520
exactly is going on

01:46:34,400 --> 01:46:37,440
and the steps you should take to

01:46:35,520 --> 01:46:39,040
remediate it

01:46:37,440 --> 01:46:41,520
you can review results from third-party

01:46:39,040 --> 01:46:43,280
static analysis tools in the same way

01:46:41,520 --> 01:46:44,960
and our code scanning interface supports

01:46:43,280 --> 01:46:45,520
displaying results from github actions

01:46:44,960 --> 01:46:48,639
builds

01:46:45,520 --> 01:46:50,159
as well as third-party ci cd tools so

01:46:48,639 --> 01:46:51,199
you don't have to move your build

01:46:50,159 --> 01:46:52,880
infrastructure

01:46:51,199 --> 01:46:55,199
to take advantage of this rich feature

01:46:52,880 --> 01:46:58,320
set

01:46:55,199 --> 01:47:00,480
next let's talk about code ql

01:46:58,320 --> 01:47:02,320
codeql is our revolutionary semantic

01:47:00,480 --> 01:47:04,320
analysis engine that allows us to scan

01:47:02,320 --> 01:47:05,840
your code base for complex patterns

01:47:04,320 --> 01:47:07,520
that indicate a potential security

01:47:05,840 --> 01:47:09,520
vulnerability

01:47:07,520 --> 01:47:10,639
it's powered by more than 2 000 open

01:47:09,520 --> 01:47:12,000
source queries

01:47:10,639 --> 01:47:13,920
and there are new queries added

01:47:12,000 --> 01:47:16,560
regularly by the github security lab

01:47:13,920 --> 01:47:18,159
and the broader code ql community to

01:47:16,560 --> 01:47:21,280
give you an idea of the power of

01:47:18,159 --> 01:47:23,280
available to you with code ql 24

01:47:21,280 --> 01:47:24,560
of recent javascript cves and open

01:47:23,280 --> 01:47:26,400
source libraries

01:47:24,560 --> 01:47:27,679
would have been identified by codeql

01:47:26,400 --> 01:47:31,360
before they were ever

01:47:27,679 --> 01:47:34,719
released codeql is available in c

01:47:31,360 --> 01:47:37,760
c plus c sharp go javascript

01:47:34,719 --> 01:47:40,320
java python and typescript and it can

01:47:37,760 --> 01:47:41,600
detect over 160 different categories of

01:47:40,320 --> 01:47:43,600
vulnerabilities

01:47:41,600 --> 01:47:45,760
including unvalidated input cross-site

01:47:43,600 --> 01:47:48,840
scripting improper escaping

01:47:45,760 --> 01:47:50,000
integer overflow and denial of service

01:47:48,840 --> 01:47:52,080
attacks

01:47:50,000 --> 01:47:53,600
circling back to where we started my

01:47:52,080 --> 01:47:55,360
colleague baz the director of product

01:47:53,600 --> 01:47:58,000
for code scanning just published this

01:47:55,360 --> 01:48:00,159
blog post last week on the github blog

01:47:58,000 --> 01:48:01,119
detailing how you can use code ql and

01:48:00,159 --> 01:48:03,040
code scanning

01:48:01,119 --> 01:48:04,480
to detect traces of selorogate in your

01:48:03,040 --> 01:48:06,159
build infrastructure where it could be

01:48:04,480 --> 01:48:07,520
used to infect other systems in your

01:48:06,159 --> 01:48:09,440
network

01:48:07,520 --> 01:48:11,600
the security research team at microsoft

01:48:09,440 --> 01:48:12,639
developed codeql queries to find traces

01:48:11,600 --> 01:48:14,400
of solargate

01:48:12,639 --> 01:48:16,719
and contributed those queries back to

01:48:14,400 --> 01:48:19,360
the community where everyone can benefit

01:48:16,719 --> 01:48:21,600
from them this contribution model is a

01:48:19,360 --> 01:48:24,159
huge part of what makes code ql so

01:48:21,600 --> 01:48:26,080
powerful

01:48:24,159 --> 01:48:28,080
and finally let's talk about third-party

01:48:26,080 --> 01:48:29,600
tool support in code scanning

01:48:28,080 --> 01:48:31,040
code scanning is designed around the

01:48:29,600 --> 01:48:33,119
serif standards so if you use a

01:48:31,040 --> 01:48:35,520
third-party static analysis tool

01:48:33,119 --> 01:48:37,600
that can output results in serif you can

01:48:35,520 --> 01:48:40,239
view those results right alongside code

01:48:37,600 --> 01:48:41,760
ql results in the code scanning ui

01:48:40,239 --> 01:48:47,199
the list on the right is some of the

01:48:41,760 --> 01:48:50,320
tools that you can easily integrate

01:48:47,199 --> 01:48:52,480
finally let's talk about secure secrets

01:48:50,320 --> 01:48:54,000
like i mentioned earlier modern software

01:48:52,480 --> 01:48:55,280
architectures are often a sim

01:48:54,000 --> 01:48:57,360
an assembly of interconnected

01:48:55,280 --> 01:48:59,040
applications and services

01:48:57,360 --> 01:49:01,679
and each of those separate tools

01:48:59,040 --> 01:49:03,440
requires credentials for integration

01:49:01,679 --> 01:49:04,960
our secure secrets product area is

01:49:03,440 --> 01:49:06,639
focused on making sure you don't

01:49:04,960 --> 01:49:08,239
accidentally commit those credentials

01:49:06,639 --> 01:49:10,400
into your repository

01:49:08,239 --> 01:49:12,639
potentially leaking them internally or

01:49:10,400 --> 01:49:14,239
externally

01:49:12,639 --> 01:49:16,320
we have a couple of flavors of secret

01:49:14,239 --> 01:49:17,920
scanning one focused on avoiding

01:49:16,320 --> 01:49:18,800
disclosure of secrets in open source

01:49:17,920 --> 01:49:20,480
code

01:49:18,800 --> 01:49:24,159
and one focused on the best practice of

01:49:20,480 --> 01:49:25,760
not committing secrets in private code

01:49:24,159 --> 01:49:28,800
first let's talk about secret scanning

01:49:25,760 --> 01:49:30,560
for public repositories github scans

01:49:28,800 --> 01:49:31,920
each incoming commit in all public

01:49:30,560 --> 01:49:35,040
repositories across

01:49:31,920 --> 01:49:35,440
all of github at tremendous scale for

01:49:35,040 --> 01:49:37,360
known

01:49:35,440 --> 01:49:39,119
secret formats like login credentials or

01:49:37,360 --> 01:49:40,400
api tokens from partner service

01:49:39,119 --> 01:49:42,719
providers

01:49:40,400 --> 01:49:44,080
when we find one we notify the service

01:49:42,719 --> 01:49:45,840
that issued that credential that we

01:49:44,080 --> 01:49:47,360
found it disclosed publicly

01:49:45,840 --> 01:49:48,960
so that they can remediate it according

01:49:47,360 --> 01:49:51,199
to their standard procedures for

01:49:48,960 --> 01:49:52,719
accidentally disclosed tokens

01:49:51,199 --> 01:49:54,320
this usually takes the form of their

01:49:52,719 --> 01:49:56,159
revoking the token and letting you know

01:49:54,320 --> 01:49:58,880
that it needs to be rotated and replaced

01:49:56,159 --> 01:49:58,880
with a new token

01:49:59,599 --> 01:50:02,800
next secret scanning for private

01:50:01,280 --> 01:50:04,560
repositories

01:50:02,800 --> 01:50:05,920
when you enable this for a repository

01:50:04,560 --> 01:50:07,760
github scans the full

01:50:05,920 --> 01:50:09,040
history of that repository to find any

01:50:07,760 --> 01:50:10,639
secrets and old commits

01:50:09,040 --> 01:50:12,159
so that you can get clean if any new

01:50:10,639 --> 01:50:13,520
ones are committed so that you can stay

01:50:12,159 --> 01:50:15,440
clean

01:50:13,520 --> 01:50:17,119
now these are credentials that have been

01:50:15,440 --> 01:50:19,520
disclosed privately

01:50:17,119 --> 01:50:21,040
inside of your organization so instead

01:50:19,520 --> 01:50:22,800
of reporting them to partner service

01:50:21,040 --> 01:50:24,960
providers for revocation

01:50:22,800 --> 01:50:26,880
we report them to you so that you can

01:50:24,960 --> 01:50:29,199
decide what to do about them

01:50:26,880 --> 01:50:30,159
we of course strongly recommend revoking

01:50:29,199 --> 01:50:34,560
and rotating

01:50:30,159 --> 01:50:34,560
but that choice is entirely up to you

01:50:34,800 --> 01:50:38,080
these are some of the partner companies

01:50:36,239 --> 01:50:39,119
whose tokens github secret scanning both

01:50:38,080 --> 01:50:42,159
public and private

01:50:39,119 --> 01:50:43,679
can detect for you we'll also soon be

01:50:42,159 --> 01:50:45,520
launching in beta the ability for

01:50:43,679 --> 01:50:47,679
customers using private secret scanning

01:50:45,520 --> 01:50:49,280
to match custom patterns

01:50:47,679 --> 01:50:51,119
this will let you detect an alert on

01:50:49,280 --> 01:50:53,040
internal token formats and tokens from

01:50:51,119 --> 01:50:56,639
providers that we don't support natively

01:50:53,040 --> 01:50:56,639
that might be found in your code base

01:50:57,199 --> 01:51:01,360
okay so we've talked about features

01:50:58,800 --> 01:51:02,880
across all three security feature areas

01:51:01,360 --> 01:51:04,719
but i have one more feature to share

01:51:02,880 --> 01:51:06,400
with you that ties all three of these

01:51:04,719 --> 01:51:07,920
areas together

01:51:06,400 --> 01:51:09,760
it's a brand new feature that you'll

01:51:07,920 --> 01:51:11,920
hear more about in the satellite day 2

01:51:09,760 --> 01:51:14,719
keynote tomorrow morning

01:51:11,920 --> 01:51:16,480
it's our new org level security overview

01:51:14,719 --> 01:51:18,800
and it's launching in beta for github

01:51:16,480 --> 01:51:20,719
enterprise cloud customers

01:51:18,800 --> 01:51:22,000
security overview does exactly what the

01:51:20,719 --> 01:51:23,760
name says

01:51:22,000 --> 01:51:25,520
it gives you an overview of security

01:51:23,760 --> 01:51:27,440
feature enablement and alert counts

01:51:25,520 --> 01:51:30,080
across secure dependencies

01:51:27,440 --> 01:51:31,840
secure code and secure secrets as well

01:51:30,080 --> 01:51:35,119
as a risk determination based on the

01:51:31,840 --> 01:51:37,280
number of unresolved alerts

01:51:35,119 --> 01:51:39,280
if you unfold the view at the top you

01:51:37,280 --> 01:51:41,360
can see a breakdown of repo risk and

01:51:39,280 --> 01:51:43,840
enablement on a per alert type basis

01:51:41,360 --> 01:51:45,760
across your entire organization

01:51:43,840 --> 01:51:47,520
in this case you can see that this

01:51:45,760 --> 01:51:49,520
organization is doing well with secret

01:51:47,520 --> 01:51:51,360
scanning and dependable adoption

01:51:49,520 --> 01:51:52,800
but lagging a bit behind on code

01:51:51,360 --> 01:51:54,639
scanning

01:51:52,800 --> 01:51:56,159
on the other hand you can see that this

01:51:54,639 --> 01:51:57,599
organization has an awful lot of

01:51:56,159 --> 01:51:59,360
dependable alerts that they need to pay

01:51:57,599 --> 01:52:01,040
attention to

01:51:59,360 --> 01:52:02,639
this view is incredibly powerful in

01:52:01,040 --> 01:52:04,159
helping you understand your overall

01:52:02,639 --> 01:52:08,719
security posture

01:52:04,159 --> 01:52:10,719
at a glance and if you fold it back up

01:52:08,719 --> 01:52:11,760
you can see a per repo risk level and

01:52:10,719 --> 01:52:13,840
alert counts for

01:52:11,760 --> 01:52:15,440
each of code scanning secret scanning

01:52:13,840 --> 01:52:16,880
and depend-abot

01:52:15,440 --> 01:52:18,320
you can sort this table by feature

01:52:16,880 --> 01:52:20,480
enablement if you're working to adopt

01:52:18,320 --> 01:52:22,080
these features across your organization

01:52:20,480 --> 01:52:23,760
by overall risk level if you're working

01:52:22,080 --> 01:52:25,840
to focus your remediation efforts on the

01:52:23,760 --> 01:52:27,599
most important repositories

01:52:25,840 --> 01:52:29,520
and by the count of a specific alert

01:52:27,599 --> 01:52:30,000
type if you want to focus on remediating

01:52:29,520 --> 01:52:33,040
one type

01:52:30,000 --> 01:52:34,639
of alert security overview ties all of

01:52:33,040 --> 01:52:37,199
our security features together

01:52:34,639 --> 01:52:40,560
in a really powerful way and we're very

01:52:37,199 --> 01:52:43,679
excited to get it into your hands

01:52:40,560 --> 01:52:44,000
so to bring us to a close what should

01:52:43,679 --> 01:52:47,360
you do

01:52:44,000 --> 01:52:49,040
next well if you want to shift left

01:52:47,360 --> 01:52:50,719
you need to make sure that everyone on

01:52:49,040 --> 01:52:52,800
your team has the tools

01:52:50,719 --> 01:52:54,080
and the information to spot potential

01:52:52,800 --> 01:52:56,560
security issues

01:52:54,080 --> 01:52:58,320
before they become a problem you need to

01:52:56,560 --> 01:52:59,679
involve your security team early in the

01:52:58,320 --> 01:53:02,880
development life cycle

01:52:59,679 --> 01:53:04,560
to design secure features from the start

01:53:02,880 --> 01:53:06,159
the tools in github advanced security

01:53:04,560 --> 01:53:08,239
can definitely help

01:53:06,159 --> 01:53:10,159
but shifting left is a mindset that your

01:53:08,239 --> 01:53:12,480
whole team will need to adopt

01:53:10,159 --> 01:53:13,199
in order to find vulnerabilities early

01:53:12,480 --> 01:53:16,239
and deliver

01:53:13,199 --> 01:53:17,520
more secure code if you'd like to learn

01:53:16,239 --> 01:53:18,639
more about the security tools that

01:53:17,520 --> 01:53:21,440
github offers

01:53:18,639 --> 01:53:23,040
please visit github.com features

01:53:21,440 --> 01:53:24,239
security

01:53:23,040 --> 01:53:26,000
all right that's all i've got this

01:53:24,239 --> 01:53:27,199
evening thank you so much for being here

01:53:26,000 --> 01:53:28,560
for my talk

01:53:27,199 --> 01:53:30,080
i'll definitely be in the discussion

01:53:28,560 --> 01:53:31,599
later to answer any questions you might

01:53:30,080 --> 01:53:32,639
have but please stick around for a few

01:53:31,599 --> 01:53:35,280
minutes here

01:53:32,639 --> 01:53:41,840
for q a with our hosts first again thank

01:53:35,280 --> 01:53:41,840
you so much for being here

01:53:43,199 --> 01:53:47,280
thank you very much for this amazing

01:53:45,280 --> 01:53:50,880
session

01:53:47,280 --> 01:53:51,280
absolutely my pleasure a big shout out

01:53:50,880 --> 01:53:54,320
to

01:53:51,280 --> 01:53:56,560
all the eastern community in india

01:53:54,320 --> 01:53:57,599
thank you for being with us and being

01:53:56,560 --> 01:54:00,239
part of this

01:53:57,599 --> 01:54:00,880
india developer journey thank you

01:54:00,239 --> 01:54:04,080
nicholas

01:54:00,880 --> 01:54:07,920
the night energy really showed up

01:54:04,080 --> 01:54:09,119
let's jump to the questions now

01:54:07,920 --> 01:54:12,239
absolutely i got

01:54:09,119 --> 01:54:14,880
the first one here from our audience

01:54:12,239 --> 01:54:16,800
nicholas can you tell us more about how

01:54:14,880 --> 01:54:20,320
development and security teams

01:54:16,800 --> 01:54:22,880
work together at github

01:54:20,320 --> 01:54:25,040
yeah absolutely uh we have a phenomenal

01:54:22,880 --> 01:54:27,599
application security team here at github

01:54:25,040 --> 01:54:29,520
um they very much have that pragmatic

01:54:27,599 --> 01:54:31,119
consultative mindset that i was i was

01:54:29,520 --> 01:54:32,639
talking about in the talk

01:54:31,119 --> 01:54:34,400
to the point that engineers at github

01:54:32,639 --> 01:54:35,599
are eager to consult with them early in

01:54:34,400 --> 01:54:37,840
a project

01:54:35,599 --> 01:54:40,320
our security team comes alongside helps

01:54:37,840 --> 01:54:42,239
understand the threat model of a feature

01:54:40,320 --> 01:54:43,760
the potential attack surface area that

01:54:42,239 --> 01:54:46,080
feature might generate

01:54:43,760 --> 01:54:47,599
and they suggest small and pragmatic

01:54:46,080 --> 01:54:49,280
changes to the design to help mitigate

01:54:47,599 --> 01:54:51,520
some of those attacks

01:54:49,280 --> 01:54:52,560
it's very much they're seeking to come

01:54:51,520 --> 01:54:55,360
alongside

01:54:52,560 --> 01:54:57,440
and provide pragmatic recommendations to

01:54:55,360 --> 01:54:58,880
address things that are part of the

01:54:57,440 --> 01:55:01,360
the threat model of that feature rather

01:54:58,880 --> 01:55:03,119
than resolve everything possible

01:55:01,360 --> 01:55:04,560
a good example my group recently commit

01:55:03,119 --> 01:55:06,080
completed a hack week

01:55:04,560 --> 01:55:07,440
and there were a couple of projects

01:55:06,080 --> 01:55:08,800
coming out of that hack week that

01:55:07,440 --> 01:55:09,840
engineers i mean these are these are

01:55:08,800 --> 01:55:12,000
small features that we were able to

01:55:09,840 --> 01:55:13,920
complete in the span of a week

01:55:12,000 --> 01:55:15,679
but still engineers on the team reached

01:55:13,920 --> 01:55:17,119
out to our application security team for

01:55:15,679 --> 01:55:18,400
consultation on them

01:55:17,119 --> 01:55:20,159
to make sure that we were considering

01:55:18,400 --> 01:55:22,560
all the angles that we needed to be

01:55:20,159 --> 01:55:24,320
so it's it's this rich consultative

01:55:22,560 --> 01:55:26,080
relationship not the gacha culture that

01:55:24,320 --> 01:55:27,599
i've seen sometimes in previous

01:55:26,080 --> 01:55:30,639
companies i've worked at

01:55:27,599 --> 01:55:32,320
and if if security team creates that

01:55:30,639 --> 01:55:34,400
kind of environment it makes engineers

01:55:32,320 --> 01:55:37,199
really eager to engage with them

01:55:34,400 --> 01:55:37,199
and seek their help

01:55:38,880 --> 01:55:45,440
wow that's a good cohesion going there

01:55:42,480 --> 01:55:46,000
you talked a lot about solar gauge and

01:55:45,440 --> 01:55:48,880
the supply

01:55:46,000 --> 01:55:49,599
chain attacks what do you think is

01:55:48,880 --> 01:55:53,119
driving

01:55:49,599 --> 01:55:55,360
the increase in these kind of attacks

01:55:53,119 --> 01:55:56,560
well i think i think it's all tied in

01:55:55,360 --> 01:55:58,960
with how we build

01:55:56,560 --> 01:56:00,719
software now you know if you think about

01:55:58,960 --> 01:56:02,639
how software was built 20 years ago

01:56:00,719 --> 01:56:04,000
code reuse was mostly an academic

01:56:02,639 --> 01:56:06,320
pursuit it wasn't really a practical

01:56:04,000 --> 01:56:08,239
thing that anybody did

01:56:06,320 --> 01:56:09,520
now we've kind of gotten to this place

01:56:08,239 --> 01:56:11,119
where we use software

01:56:09,520 --> 01:56:13,199
all the time by bringing open source

01:56:11,119 --> 01:56:14,639
dependencies into our projects

01:56:13,199 --> 01:56:16,159
and when we do that we're inviting

01:56:14,639 --> 01:56:16,639
people that we don't know under our code

01:56:16,159 --> 01:56:18,000
base

01:56:16,639 --> 01:56:20,239
by way of the libraries that they

01:56:18,000 --> 01:56:22,159
maintain so we've gotten

01:56:20,239 --> 01:56:24,880
really good at reusing code it's almost

01:56:22,159 --> 01:56:27,360
become second nature to us now

01:56:24,880 --> 01:56:28,239
and we rarely invent things from scratch

01:56:27,360 --> 01:56:30,719
but

01:56:28,239 --> 01:56:32,480
we've really not started or just

01:56:30,719 --> 01:56:35,040
starting to wrestle with how to do that

01:56:32,480 --> 01:56:36,639
safely um you know we're trying to

01:56:35,040 --> 01:56:38,239
figure out how can you invite other

01:56:36,639 --> 01:56:39,599
people into your code base but make sure

01:56:38,239 --> 01:56:40,800
that the code that you're bringing in is

01:56:39,599 --> 01:56:42,400
safe because

01:56:40,800 --> 01:56:44,560
you know if you're bringing in a library

01:56:42,400 --> 01:56:46,239
that's got 40 000 lines of code it's

01:56:44,560 --> 01:56:47,679
pretty impractical to go and read all of

01:56:46,239 --> 01:56:49,760
that code there has to be some component

01:56:47,679 --> 01:56:51,520
of trust built in

01:56:49,760 --> 01:56:53,119
at the same time we're kind of far far

01:56:51,520 --> 01:56:54,719
enough along the adoption path of open

01:56:53,119 --> 01:56:56,480
source now there's enough companies

01:56:54,719 --> 01:56:58,639
using it there's enough rich targets

01:56:56,480 --> 01:57:00,159
using open source software that it makes

01:56:58,639 --> 01:57:01,360
a pretty rich attack surface so we're

01:57:00,159 --> 01:57:02,960
starting to see the pace of those

01:57:01,360 --> 01:57:04,639
attacks pick up

01:57:02,960 --> 01:57:06,639
and this is going to be you know we're

01:57:04,639 --> 01:57:08,480
we're seeing it in the news a lot now

01:57:06,639 --> 01:57:09,920
i expect that to continue i don't i

01:57:08,480 --> 01:57:13,280
don't think supply chain attacks are

01:57:09,920 --> 01:57:13,280
going to go away anytime soon

01:57:14,159 --> 01:57:18,000
now that's very insightful especially

01:57:16,159 --> 01:57:20,880
the shift that you explained

01:57:18,000 --> 01:57:21,520
on reuse of code in the enterprise setup

01:57:20,880 --> 01:57:23,520
as well

01:57:21,520 --> 01:57:26,320
thanks for that we got next one question

01:57:23,520 --> 01:57:27,840
here uh can you talk a little more about

01:57:26,320 --> 01:57:30,080
how github's tool

01:57:27,840 --> 01:57:32,800
help make you less vulnerable to these

01:57:30,080 --> 01:57:35,119
kind of attacks that we just discussed

01:57:32,800 --> 01:57:36,639
yeah absolutely i mean it kind of all

01:57:35,119 --> 01:57:39,199
goes back to where we started talking

01:57:36,639 --> 01:57:41,119
about mean time to resolution

01:57:39,199 --> 01:57:42,960
you kind of have to assume that you're

01:57:41,119 --> 01:57:44,320
going to have security vulnerabilities

01:57:42,960 --> 01:57:45,840
in your code just because it's so

01:57:44,320 --> 01:57:47,440
difficult to

01:57:45,840 --> 01:57:48,800
write completely secure code again you

01:57:47,440 --> 01:57:50,239
only have to make one mistake to

01:57:48,800 --> 01:57:51,920
introduce a vulnerability where you have

01:57:50,239 --> 01:57:53,520
to be perfect all the time to completely

01:57:51,920 --> 01:57:55,119
avoid it

01:57:53,520 --> 01:57:56,480
so as we're bringing these libraries in

01:57:55,119 --> 01:57:57,599
we have to assume that we are going to

01:57:56,480 --> 01:57:58,800
introduce libraries that have

01:57:57,599 --> 01:58:00,560
vulnerabilities

01:57:58,800 --> 01:58:02,239
so our goal isn't necessarily to make

01:58:00,560 --> 01:58:03,679
sure we never bring a vulnerability into

01:58:02,239 --> 01:58:04,960
our code base

01:58:03,679 --> 01:58:07,119
it's to make sure that we respond to

01:58:04,960 --> 01:58:08,320
them as quickly as we can when we do

01:58:07,119 --> 01:58:09,920
discover one

01:58:08,320 --> 01:58:11,440
and so dependable is critical for this

01:58:09,920 --> 01:58:13,760
because it helps you update your code as

01:58:11,440 --> 01:58:15,199
soon as a new vulnerability is published

01:58:13,760 --> 01:58:17,040
again we'll send you that alert or that

01:58:15,199 --> 01:58:17,440
pull request as soon as we've identified

01:58:17,040 --> 01:58:19,280
that

01:58:17,440 --> 01:58:20,560
that dependency that's vulnerable and

01:58:19,280 --> 01:58:22,080
that it's something that you use in your

01:58:20,560 --> 01:58:23,920
repository

01:58:22,080 --> 01:58:25,440
and dependency review is also helpful

01:58:23,920 --> 01:58:27,760
because it helps keep you from

01:58:25,440 --> 01:58:29,920
accidentally adding a known vulnerable

01:58:27,760 --> 01:58:31,760
version of a library into your code base

01:58:29,920 --> 01:58:33,360
so if it's known vulnerable we want to

01:58:31,760 --> 01:58:34,639
keep it out of your code base

01:58:33,360 --> 01:58:36,000
if it's in your code base and we

01:58:34,639 --> 01:58:38,000
discover that it's vulnerable we want

01:58:36,000 --> 01:58:38,880
you to remediate that as quickly as you

01:58:38,000 --> 01:58:42,880
possibly can

01:58:38,880 --> 01:58:42,880
and and resolve that vulnerability

01:58:43,760 --> 01:58:49,840
totally makes sense the next

01:58:46,800 --> 01:58:53,920
question is a little personal um

01:58:49,840 --> 01:58:55,920
you've been in the business of supply

01:58:53,920 --> 01:58:57,840
securing supply chain for a long time

01:58:55,920 --> 01:59:02,719
what is your favorite feature

01:58:57,840 --> 01:59:05,760
or like the the best one that you love

01:59:02,719 --> 01:59:07,119
oh that's a good one um you're right i

01:59:05,760 --> 01:59:08,719
have been working in the space at github

01:59:07,119 --> 01:59:10,159
for a while and and

01:59:08,719 --> 01:59:12,080
i don't know i have i have a real

01:59:10,159 --> 01:59:13,520
fondness for just

01:59:12,080 --> 01:59:15,599
vulnerable dependency alerts because

01:59:13,520 --> 01:59:17,119
it's where we started it was the first

01:59:15,599 --> 01:59:18,560
security feature that we wrote for

01:59:17,119 --> 01:59:19,040
security product feature that we rolled

01:59:18,560 --> 01:59:21,280
out the

01:59:19,040 --> 01:59:22,639
emails that we sent you to tell you that

01:59:21,280 --> 01:59:24,239
you had a vulnerable dependency in your

01:59:22,639 --> 01:59:26,080
repository

01:59:24,239 --> 01:59:27,840
we've iterated over those alerts a lot

01:59:26,080 --> 01:59:29,520
over the last couple of years

01:59:27,840 --> 01:59:31,760
it used to be that you would get one

01:59:29,520 --> 01:59:33,440
email for every repository that you had

01:59:31,760 --> 01:59:34,800
a vulnerable dependency in

01:59:33,440 --> 01:59:37,199
and now we're to the point that we roll

01:59:34,800 --> 01:59:38,880
that up to when there's a vulnerability

01:59:37,199 --> 01:59:40,239
published we send you one email about

01:59:38,880 --> 01:59:42,320
that vulnerability

01:59:40,239 --> 01:59:44,159
that contains all of the repositories

01:59:42,320 --> 01:59:46,239
that have that vulnerability in it

01:59:44,159 --> 01:59:47,599
so we've tried to reduce the noise we've

01:59:46,239 --> 01:59:48,719
tried to make those alerts more useful

01:59:47,599 --> 01:59:50,960
but it's still

01:59:48,719 --> 01:59:52,960
it's still sort of the meat and potatoes

01:59:50,960 --> 01:59:55,199
of keeping your application secure

01:59:52,960 --> 01:59:56,400
just knowing that you might have one of

01:59:55,199 --> 01:59:59,840
those vulnerabilities in there being

01:59:56,400 --> 01:59:59,840
able to identify it

02:00:01,360 --> 02:00:05,280
that's great that's great to know nick

02:00:03,760 --> 02:00:07,679
and beside this obviously

02:00:05,280 --> 02:00:09,679
uh security is your favorite but what

02:00:07,679 --> 02:00:11,679
about your favorite feature in github

02:00:09,679 --> 02:00:13,199
outside of security tell us about that

02:00:11,679 --> 02:00:15,840
as well

02:00:13,199 --> 02:00:16,560
outside of security uh you know i really

02:00:15,840 --> 02:00:18,960
love

02:00:16,560 --> 02:00:20,480
what we're doing with github code spaces

02:00:18,960 --> 02:00:22,080
i've really enjoyed getting to play with

02:00:20,480 --> 02:00:23,440
that feature and i am

02:00:22,080 --> 02:00:25,040
super excited for us to be able to roll

02:00:23,440 --> 02:00:26,480
that out to a wider audience because

02:00:25,040 --> 02:00:28,800
it's going to be such a cool thing when

02:00:26,480 --> 02:00:28,800
we do

02:00:30,000 --> 02:00:34,239
absolutely absolutely launching a

02:00:32,320 --> 02:00:35,119
full-blown coding environment right from

02:00:34,239 --> 02:00:37,599
the repo

02:00:35,119 --> 02:00:39,040
is no less than magic and everybody's

02:00:37,599 --> 02:00:40,560
really looking forward to it including

02:00:39,040 --> 02:00:43,199
myself

02:00:40,560 --> 02:00:44,480
yes uh it's gonna be an industry-wide

02:00:43,199 --> 02:00:46,560
game changer

02:00:44,480 --> 02:00:48,080
thank you nicholas again for joining us

02:00:46,560 --> 02:00:50,320
so late at your night and

02:00:48,080 --> 02:00:52,239
answering all the questions folks

02:00:50,320 --> 02:00:53,360
remember nicholas is continually gonna

02:00:52,239 --> 02:00:56,320
be staying with us

02:00:53,360 --> 02:00:57,840
he will be at discussions so send all

02:00:56,320 --> 02:01:00,480
your good questions to him

02:00:57,840 --> 02:01:02,560
then thank you again nicholas bye yep

02:01:00,480 --> 02:01:05,599
thank you see you over there

02:01:02,560 --> 02:01:09,840
yeah bye yup and

02:01:05,599 --> 02:01:09,840
uh as we

02:01:12,320 --> 02:01:16,880
hello all we are in the devops channel

02:01:15,119 --> 02:01:18,880
but as we told you earlier

02:01:16,880 --> 02:01:20,639
there is another open source channel as

02:01:18,880 --> 02:01:21,360
well where there is a lot of good action

02:01:20,639 --> 02:01:24,400
going on

02:01:21,360 --> 02:01:26,480
we got current and anisha who are who

02:01:24,400 --> 02:01:28,960
are talking a lot of interesting stuff

02:01:26,480 --> 02:01:29,520
that you would want to pop in and look

02:01:28,960 --> 02:01:31,440
out for

02:01:29,520 --> 02:01:33,520
don't worry you won't miss anything here

02:01:31,440 --> 02:01:37,040
all sessions will be available on demand

02:01:33,520 --> 02:01:37,679
later and we are loving your comments on

02:01:37,040 --> 02:01:40,239
twitter

02:01:37,679 --> 02:01:41,280
keep it rolling at github india hashtag

02:01:40,239 --> 02:01:42,880
getup satellite

02:01:41,280 --> 02:01:44,560
we are going through each one of it and

02:01:42,880 --> 02:01:44,880
we're going to get back to you on all of

02:01:44,560 --> 02:01:47,760
them

02:01:44,880 --> 02:01:47,760
so keep rolling

02:01:48,320 --> 02:01:54,560
so moving on to the next session

02:01:51,520 --> 02:01:57,440
is a session about how

02:01:54,560 --> 02:01:58,400
linkard transforms code into running

02:01:57,440 --> 02:02:00,480
software

02:01:58,400 --> 02:02:01,679
handling complex build and release

02:02:00,480 --> 02:02:04,800
workflows with

02:02:01,679 --> 02:02:07,679
actions packages and more and more do

02:02:04,800 --> 02:02:10,000
you know who's doing the session

02:02:07,679 --> 02:02:10,000
yes

02:02:10,800 --> 02:02:15,760
and he's a software engineer at bind he

02:02:13,920 --> 02:02:16,719
also spends his time contributing to

02:02:15,760 --> 02:02:19,360
other open source

02:02:16,719 --> 02:02:20,000
projects like service mesh interface

02:02:19,360 --> 02:02:22,719
tracing

02:02:20,000 --> 02:02:24,000
and a lot lot more and recently he has

02:02:22,719 --> 02:02:26,800
been very interested

02:02:24,000 --> 02:02:28,960
in rust i'm excited about that now right

02:02:26,800 --> 02:02:31,679
apart from work he enjoys a good

02:02:28,960 --> 02:02:33,679
relaxing evening run followed by a nice

02:02:31,679 --> 02:02:36,239
book podcast before bedtime

02:02:33,679 --> 02:02:37,040
truly a multitasker i'm all waiting to

02:02:36,239 --> 02:02:39,760
now hear

02:02:37,040 --> 02:02:39,760
from tyrone

02:02:40,080 --> 02:02:43,280
remember to engage with arun on github

02:02:41,920 --> 02:02:47,840
discussions as well

02:02:43,280 --> 02:02:47,840
so terun take it away

02:02:58,840 --> 02:03:03,760
yep yep so hello everyone

02:03:02,159 --> 02:03:06,159
in today's talk we'll see how linkedin

02:03:03,760 --> 02:03:08,400
transforms

02:03:06,159 --> 02:03:10,159
we'll see how lingerie transforms goes

02:03:08,400 --> 02:03:11,119
according to running software so my name

02:03:10,159 --> 02:03:14,159
is saron

02:03:11,119 --> 02:03:17,440
uh so later

02:03:14,159 --> 02:03:18,080
so let me introduce myself uh my name is

02:03:17,440 --> 02:03:19,840
taran

02:03:18,080 --> 02:03:21,599
portlavade i'm one of the maintainers of

02:03:19,840 --> 02:03:22,560
the lingerie project which is a cnc of

02:03:21,599 --> 02:03:24,639
integrated services

02:03:22,560 --> 02:03:26,159
project uh so currently i work at

02:03:24,639 --> 02:03:28,159
buoyant who are one of the

02:03:26,159 --> 02:03:29,360
main sponsors of the linkedin project

02:03:28,159 --> 02:03:30,800
previously i was at

02:03:29,360 --> 02:03:32,480
previously i was an intern with cnc

02:03:30,800 --> 02:03:34,320
working on linkedin before that i did my

02:03:32,480 --> 02:03:36,239
google summer of course with linkedin

02:03:34,320 --> 02:03:37,840
uh so as you can see there is a pattern

02:03:36,239 --> 02:03:39,599
here and you could you could safely

02:03:37,840 --> 02:03:42,000
assume that i know some stuff

02:03:39,599 --> 02:03:44,000
i know some stuff here on github uh so i

02:03:42,000 --> 02:03:44,800
primarily write golang with some rust

02:03:44,000 --> 02:03:47,920
here and there

02:03:44,800 --> 02:03:49,760
you can find me at turn.xyz now let's

02:03:47,920 --> 02:03:51,520
get into the dock

02:03:49,760 --> 02:03:53,199
so so before we see how linkard it

02:03:51,520 --> 02:03:55,040
transforms

02:03:53,199 --> 02:03:56,639
its own code into running software first

02:03:55,040 --> 02:03:58,079
we'll see why is it important

02:03:56,639 --> 02:03:59,440
to have automated testing building and

02:03:58,079 --> 02:04:00,960
deployment for any project right it

02:03:59,440 --> 02:04:02,639
could be open source or not

02:04:00,960 --> 02:04:04,719
it is important because it increases

02:04:02,639 --> 02:04:06,480
developer velocity developer velocity is

02:04:04,719 --> 02:04:08,000
a very important business metric because

02:04:06,480 --> 02:04:08,960
it helps you ship faster make your

02:04:08,000 --> 02:04:10,960
customers happy

02:04:08,960 --> 02:04:13,360
so if you have if you have an automated

02:04:10,960 --> 02:04:16,159
testing building and deployment

02:04:13,360 --> 02:04:16,719
go pipeline you could you could you

02:04:16,159 --> 02:04:18,480
could worry

02:04:16,719 --> 02:04:19,920
you could worry you could worry less

02:04:18,480 --> 02:04:22,000
about breaking stuff or doing this

02:04:19,920 --> 02:04:24,239
manual manual deployment

02:04:22,000 --> 02:04:25,840
go to this process and focus on your on

02:04:24,239 --> 02:04:27,199
the business logic right uh it also

02:04:25,840 --> 02:04:28,960
helps you shift with

02:04:27,199 --> 02:04:30,560
shift with confidence because when you

02:04:28,960 --> 02:04:32,159
have automated testing in place right

02:04:30,560 --> 02:04:33,440
most of the common cases would be tested

02:04:32,159 --> 02:04:35,679
and you can safely assume that

02:04:33,440 --> 02:04:37,040
the common case would work as any user

02:04:35,679 --> 02:04:38,560
would expect

02:04:37,040 --> 02:04:40,320
it also removes the failure point

02:04:38,560 --> 02:04:41,199
between writing code and deployment

02:04:40,320 --> 02:04:42,639
right because

02:04:41,199 --> 02:04:45,040
because if you have manual steps

02:04:42,639 --> 02:04:46,800
obviously as you know man

02:04:45,040 --> 02:04:48,480
it could go something in the process

02:04:46,800 --> 02:04:49,840
could play could break something in the

02:04:48,480 --> 02:04:51,199
pipeline group

02:04:49,840 --> 02:04:53,280
would break etc but if you have an

02:04:51,199 --> 02:04:55,440
automated one that you that you

02:04:53,280 --> 02:04:57,199
that you that have written with clear

02:04:55,440 --> 02:04:59,840
corner cases being covered it's much

02:04:57,199 --> 02:05:01,040
more safer and easier to have a pipeline

02:04:59,840 --> 02:05:03,040
like that

02:05:01,040 --> 02:05:04,400
obviously you would not want to release

02:05:03,040 --> 02:05:05,199
you would not want to manually go

02:05:04,400 --> 02:05:06,719
through the process of

02:05:05,199 --> 02:05:08,639
doing a release right every time it's

02:05:06,719 --> 02:05:09,679
the same old process and and if you

02:05:08,639 --> 02:05:10,880
and especially if you're doing it

02:05:09,679 --> 02:05:11,840
frequently if you're going to release

02:05:10,880 --> 02:05:13,920
stuff frequently

02:05:11,840 --> 02:05:14,880
which i assume a lot of people do right

02:05:13,920 --> 02:05:16,960
now uh

02:05:14,880 --> 02:05:18,400
it will obviously it'll obviously become

02:05:16,960 --> 02:05:20,079
a clear body like because

02:05:18,400 --> 02:05:21,440
it is making people focus on that

02:05:20,079 --> 02:05:23,199
instead of the business logic

02:05:21,440 --> 02:05:24,400
so that so if you're automated that if

02:05:23,199 --> 02:05:24,960
you automate that process it's much

02:05:24,400 --> 02:05:27,520
easier

02:05:24,960 --> 02:05:28,800
for the whole process right obviously if

02:05:27,520 --> 02:05:30,320
you have automatic if you have a

02:05:28,800 --> 02:05:31,679
pipeline like that the delivery process

02:05:30,320 --> 02:05:33,360
is streamlined and it will work as you

02:05:31,679 --> 02:05:34,000
expected you're not relying on a single

02:05:33,360 --> 02:05:37,440
person to do

02:05:34,000 --> 02:05:39,920
that etc now now that we spoke about the

02:05:37,440 --> 02:05:42,000
importance of cic right let's see

02:05:39,920 --> 02:05:43,920
how it how we let's see how it relates

02:05:42,000 --> 02:05:45,440
to open those projects right

02:05:43,920 --> 02:05:46,880
i mean as you might expect it's even

02:05:45,440 --> 02:05:48,560
more important right because now the

02:05:46,880 --> 02:05:49,679
stakeholders are across companies and

02:05:48,560 --> 02:05:52,239
time zones

02:05:49,679 --> 02:05:54,239
uh because because the maintainers are

02:05:52,239 --> 02:05:56,719
across

02:05:54,239 --> 02:05:57,440
stickers for geographies and so are the

02:05:56,719 --> 02:05:58,960
users right

02:05:57,440 --> 02:06:00,639
so it's important that you're not

02:05:58,960 --> 02:06:03,520
depending on a single person

02:06:00,639 --> 02:06:04,960
to do a release process right obviously

02:06:03,520 --> 02:06:06,960
open those projects or any other

02:06:04,960 --> 02:06:09,040
or any other project would always prefer

02:06:06,960 --> 02:06:10,400
standardize the process over individual

02:06:09,040 --> 02:06:12,320
magic right because the process

02:06:10,400 --> 02:06:14,159
is always a better one than relying on a

02:06:12,320 --> 02:06:16,320
single person or an individual

02:06:14,159 --> 02:06:18,239
or an individual right obviously it will

02:06:16,320 --> 02:06:19,599
also it will also very much reduce the

02:06:18,239 --> 02:06:21,280
burden on maintenance because

02:06:19,599 --> 02:06:21,760
maintainers have to do an all-around job

02:06:21,280 --> 02:06:24,800
of

02:06:21,760 --> 02:06:27,360
having uh seeing the issues

02:06:24,800 --> 02:06:29,920
making a road map talking to the users

02:06:27,360 --> 02:06:29,920
and stuff

02:06:30,480 --> 02:06:34,880
obviously and also writing code so so it

02:06:33,440 --> 02:06:36,719
is important that

02:06:34,880 --> 02:06:38,639
if there is any manual process that can

02:06:36,719 --> 02:06:39,840
be automated it should be opera it

02:06:38,639 --> 02:06:42,000
should be automated

02:06:39,840 --> 02:06:45,840
in in open those projects so so that you

02:06:42,000 --> 02:06:49,280
can reduce burden on maintainers right

02:06:45,840 --> 02:06:50,960
now let's before seeing it before diving

02:06:49,280 --> 02:06:52,880
into the linkedin project uh

02:06:50,960 --> 02:06:54,239
so the csd of linkedin project let us

02:06:52,880 --> 02:06:55,440
first understand the requirements of a

02:06:54,239 --> 02:06:56,400
project like this so linkedin is an

02:06:55,440 --> 02:06:58,960
ultra lightweight

02:06:56,400 --> 02:06:58,960
ultra fast

02:07:00,880 --> 02:07:04,320
we have been in production for four plus

02:07:02,400 --> 02:07:06,159
years we have a very active community

02:07:04,320 --> 02:07:07,360
we do weekly edge releases so that you

02:07:06,159 --> 02:07:09,280
can be on the cutting edge

02:07:07,360 --> 02:07:11,040
and see what's happening in the in the

02:07:09,280 --> 02:07:12,480
project and we also do a stable release

02:07:11,040 --> 02:07:14,560
every two months

02:07:12,480 --> 02:07:16,239
we also have an open governance and we

02:07:14,560 --> 02:07:17,840
are part of the we are part of the cloud

02:07:16,239 --> 02:07:18,400
native computing foundation which also

02:07:17,840 --> 02:07:20,560
has

02:07:18,400 --> 02:07:21,840
uh projects like kubernetes prometheus

02:07:20,560 --> 02:07:24,239
etcetera

02:07:21,840 --> 02:07:27,360
so so liquidity so what is a service

02:07:24,239 --> 02:07:29,119
mission is essentially

02:07:27,360 --> 02:07:30,719
two things the control plane and the

02:07:29,119 --> 02:07:32,560
data plane the control plane is like the

02:07:30,719 --> 02:07:35,280
brain of the service mesh

02:07:32,560 --> 02:07:37,040
and the data plane is your applications

02:07:35,280 --> 02:07:38,400
to which the proxy is injected as you

02:07:37,040 --> 02:07:40,320
can see in the figure here

02:07:38,400 --> 02:07:42,079
all your applications will have proxy as

02:07:40,320 --> 02:07:44,079
part of their manifest

02:07:42,079 --> 02:07:45,760
uh so so this means that all your two

02:07:44,079 --> 02:07:47,679
and three traffic from your application

02:07:45,760 --> 02:07:49,520
will always go through the proxy uh

02:07:47,679 --> 02:07:51,280
because of that the proxy can give you

02:07:49,520 --> 02:07:52,800
benefits like automated

02:07:51,280 --> 02:07:54,639
mtls you don't have to configure

02:07:52,800 --> 02:07:56,480
anything it will also give you traffic

02:07:54,639 --> 02:07:59,920
shaping canada deployments and all these

02:07:56,480 --> 02:08:01,040
things right so so obviously the

02:07:59,920 --> 02:08:02,639
assumption is that

02:08:01,040 --> 02:08:05,119
the requirements of a project like this

02:08:02,639 --> 02:08:06,880
is that it should accommodate docker

02:08:05,119 --> 02:08:09,040
so if you're going to build if you're

02:08:06,880 --> 02:08:10,000
going to build a pipeline for a project

02:08:09,040 --> 02:08:11,520
like this we

02:08:10,000 --> 02:08:12,480
would have a you would have the

02:08:11,520 --> 02:08:14,239
following requirements if you

02:08:12,480 --> 02:08:15,520
recommended docker

02:08:14,239 --> 02:08:16,880
kubernetes and other container

02:08:15,520 --> 02:08:18,079
technologies it should integrate well

02:08:16,880 --> 02:08:19,440
with existing

02:08:18,079 --> 02:08:20,880
existing github parameters because it's

02:08:19,440 --> 02:08:22,560
an open source project everything is

02:08:20,880 --> 02:08:24,639
done on github and it would be really

02:08:22,560 --> 02:08:26,320
nice to have a variable integration

02:08:24,639 --> 02:08:26,719
between the ci and the github right like

02:08:26,320 --> 02:08:28,639
to

02:08:26,719 --> 02:08:29,920
like to be able to see the checks in the

02:08:28,639 --> 02:08:33,119
pr in the pr

02:08:29,920 --> 02:08:35,760
view uh to be able to see to be able to

02:08:33,119 --> 02:08:37,040
to be able to trigger work for tickers

02:08:35,760 --> 02:08:38,320
based on the events etc

02:08:37,040 --> 02:08:39,440
obviously it should also have a simpler

02:08:38,320 --> 02:08:40,400
authentication on the authorization

02:08:39,440 --> 02:08:43,040
model right because

02:08:40,400 --> 02:08:45,119
open those projects are already a lot of

02:08:43,040 --> 02:08:46,880
work and if you want to focus on things

02:08:45,119 --> 02:08:47,599
like authorization are back for external

02:08:46,880 --> 02:08:49,920
services

02:08:47,599 --> 02:08:51,040
it's it's too much work as as you might

02:08:49,920 --> 02:08:52,400
expect obviously

02:08:51,040 --> 02:08:54,400
it would also be very nice to have a

02:08:52,400 --> 02:08:56,079
pipeline ecosystem right to you to use

02:08:54,400 --> 02:08:57,599
commonly needed workflow logics like

02:08:56,079 --> 02:08:59,280
for example if you want to do a docker

02:08:57,599 --> 02:09:00,159
push as part of your pipeline you would

02:08:59,280 --> 02:09:02,239
not want to

02:09:00,159 --> 02:09:03,520
go and build the whole an install script

02:09:02,239 --> 02:09:05,119
that installs docker

02:09:03,520 --> 02:09:06,960
and everything right you want it you

02:09:05,119 --> 02:09:07,440
want a module that you can directly use

02:09:06,960 --> 02:09:08,719
and run

02:09:07,440 --> 02:09:11,280
so it's important that there's an

02:09:08,719 --> 02:09:12,480
ecosystem out there uh

02:09:11,280 --> 02:09:14,000
obviously it should also build on the

02:09:12,480 --> 02:09:15,199
same mantra of everything than in the

02:09:14,000 --> 02:09:16,400
open right because it's an open source

02:09:15,199 --> 02:09:17,599
project everyone should be able to see

02:09:16,400 --> 02:09:18,800
what's happening in this year they

02:09:17,599 --> 02:09:21,679
should be able to understand stuff

02:09:18,800 --> 02:09:22,320
etcetera as obviously as you would might

02:09:21,679 --> 02:09:24,800
expect

02:09:22,320 --> 02:09:26,320
github actions fills all the fills all

02:09:24,800 --> 02:09:27,199
the requirements so github actions is a

02:09:26,320 --> 02:09:31,040
ci cd

02:09:27,199 --> 02:09:32,960
uh cicd csd project on github that

02:09:31,040 --> 02:09:35,360
allows you to build test deploy

02:09:32,960 --> 02:09:36,960
apply code right from github the other

02:09:35,360 --> 02:09:38,480
awesome part is that it's free for open

02:09:36,960 --> 02:09:39,679
those projects this means that open

02:09:38,480 --> 02:09:41,119
those projects slightly incurred you

02:09:39,679 --> 02:09:43,840
don't have to worry about the

02:09:41,119 --> 02:09:44,159
payment or the ownership of the ca etc

02:09:43,840 --> 02:09:46,159
it

02:09:44,159 --> 02:09:47,760
just works out of the box just like the

02:09:46,159 --> 02:09:50,400
code that you would store

02:09:47,760 --> 02:09:50,400
on github

02:09:52,960 --> 02:09:57,119
now now now let us dive into the

02:09:55,599 --> 02:09:58,960
workflows of the

02:09:57,119 --> 02:10:00,719
you know of the digital project so

02:09:58,960 --> 02:10:01,760
workflow is a primitive on github

02:10:00,719 --> 02:10:03,360
actions which allows you to have a

02:10:01,760 --> 02:10:05,520
configurable automated process

02:10:03,360 --> 02:10:06,639
made up of multiple jobs each workflow

02:10:05,520 --> 02:10:08,880
has a trigger

02:10:06,639 --> 02:10:10,719
on which you would want to run this on

02:10:08,880 --> 02:10:14,239
which you would want to run the

02:10:10,719 --> 02:10:14,719
run the jobs right so so it's it's like

02:10:14,239 --> 02:10:17,840
a

02:10:14,719 --> 02:10:20,320
unit of works yeah you unit of ca so

02:10:17,840 --> 02:10:22,159
in line 30 we have the following

02:10:20,320 --> 02:10:23,920
workflows we have integration tests we

02:10:22,159 --> 02:10:27,280
have release we have static checks

02:10:23,920 --> 02:10:30,239
and we have unit tests now before diving

02:10:27,280 --> 02:10:31,599
into these workflows let us first

02:10:30,239 --> 02:10:32,320
understand what happens when you raise a

02:10:31,599 --> 02:10:34,719
pr

02:10:32,320 --> 02:10:36,000
for linkedin so whenever you say

02:10:34,719 --> 02:10:38,320
whenever you raise a pr

02:10:36,000 --> 02:10:40,000
on linkedin the static checks the unit

02:10:38,320 --> 02:10:43,599
is on the integration test

02:10:40,000 --> 02:10:45,199
workflows are run are run by github

02:10:43,599 --> 02:10:46,719
automatically and you would

02:10:45,199 --> 02:10:49,280
you would directly see the update on the

02:10:46,719 --> 02:10:50,960
pr itself

02:10:49,280 --> 02:10:53,440
and there is the release workflow right

02:10:50,960 --> 02:10:54,880
for example if you uh because linked is

02:10:53,440 --> 02:10:55,760
a project and you obviously want to do

02:10:54,880 --> 02:10:57,679
releases

02:10:55,760 --> 02:10:59,440
of their of the latest development

02:10:57,679 --> 02:11:02,000
etcetera right so there is a workflow

02:10:59,440 --> 02:11:04,400
separate for it so so for every release

02:11:02,000 --> 02:11:07,440
workflow we do unit test and release

02:11:04,400 --> 02:11:08,880
uh it is so the important thing to

02:11:07,440 --> 02:11:10,639
to note here is that the release of

02:11:08,880 --> 02:11:12,560
workflow is only invoked for

02:11:10,639 --> 02:11:13,920
tag pushers so this means that we get

02:11:12,560 --> 02:11:16,239
the whole release process

02:11:13,920 --> 02:11:18,079
by permissions to be able to push attack

02:11:16,239 --> 02:11:19,599
so it means that if you are a maintainer

02:11:18,079 --> 02:11:20,639
of the project you get these permissions

02:11:19,599 --> 02:11:22,400
and then

02:11:20,639 --> 02:11:23,599
can then release and all the github

02:11:22,400 --> 02:11:24,800
actions thing is the same you're not

02:11:23,599 --> 02:11:26,639
it's not another thing that you have to

02:11:24,800 --> 02:11:28,000
worry about it's not another

02:11:26,639 --> 02:11:31,199
thing that you would have to configure

02:11:28,000 --> 02:11:32,719
etc so now let's dive into each of these

02:11:31,199 --> 02:11:34,480
each of these workflows so first we'll

02:11:32,719 --> 02:11:36,480
dive into static checks starting six is

02:11:34,480 --> 02:11:38,560
obviously the simpler part of the whole

02:11:36,480 --> 02:11:39,599
of the low workflow in the static tricks

02:11:38,560 --> 02:11:40,800
we check the

02:11:39,599 --> 02:11:42,960
we check the correctness of the code

02:11:40,800 --> 02:11:43,360
that we can for example we can easily

02:11:42,960 --> 02:11:45,599
check

02:11:43,360 --> 02:11:47,119
if the goal line code is automatically

02:11:45,599 --> 02:11:48,400
is linked correctly or formatted

02:11:47,119 --> 02:11:50,079
correctly because you don't want to

02:11:48,400 --> 02:11:51,520
obviously follow some standards on the

02:11:50,079 --> 02:11:53,520
code um

02:11:51,520 --> 02:11:54,960
there is also some readme that we

02:11:53,520 --> 02:11:57,840
generate directly from code

02:11:54,960 --> 02:11:59,920
so so we check if the readme is updated

02:11:57,840 --> 02:12:01,840
and has all the latest changes etc we

02:11:59,920 --> 02:12:05,199
also have some linters etc

02:12:01,840 --> 02:12:08,800
so on the right you can see

02:12:05,199 --> 02:12:10,159
you can see the workflow.js you know of

02:12:08,800 --> 02:12:12,079
the static tricks as you can see it is

02:12:10,159 --> 02:12:13,840
invoked for all pull requests and some

02:12:12,079 --> 02:12:16,000
and pushes and and these jobs are

02:12:13,840 --> 02:12:19,119
divided here here in the workflow

02:12:16,000 --> 02:12:19,679
manifest next we'll see here it is uh so

02:12:19,119 --> 02:12:22,960
we have

02:12:19,679 --> 02:12:24,960
unit is written in go and javascript

02:12:22,960 --> 02:12:26,880
for each pupil request we run this unit

02:12:24,960 --> 02:12:28,639
test as you can see it follows the same

02:12:26,880 --> 02:12:30,880
it follows the same workflow ml as a

02:12:28,639 --> 02:12:32,960
previous static checks

02:12:30,880 --> 02:12:34,880
now now we'll get now we'll get into the

02:12:32,960 --> 02:12:37,440
hard parts integration tests

02:12:34,880 --> 02:12:38,400
integration does allows you to test the

02:12:37,440 --> 02:12:40,079
link

02:12:38,400 --> 02:12:41,679
integration test allows you to test a

02:12:40,079 --> 02:12:43,040
project

02:12:41,679 --> 02:12:44,719
like a user right like essentially

02:12:43,040 --> 02:12:46,639
performing some actions and seeing

02:12:44,719 --> 02:12:48,159
and seeing if it is correctly working or

02:12:46,639 --> 02:12:50,320
not right so for

02:12:48,159 --> 02:12:51,599
for that to happen we do need the images

02:12:50,320 --> 02:12:52,960
of the whole counter plate components

02:12:51,599 --> 02:12:53,679
right there the whole components in

02:12:52,960 --> 02:12:56,000
linkedin

02:12:53,679 --> 02:12:57,760
that are present in linkedin so so we do

02:12:56,000 --> 02:12:59,599
a docker build of all these images

02:12:57,760 --> 02:13:01,599
of all the images that the linkedin

02:12:59,599 --> 02:13:03,199
project uses and then we do integration

02:13:01,599 --> 02:13:04,880
tests we use those images and run

02:13:03,199 --> 02:13:06,800
integration tests we have all kinds of

02:13:04,880 --> 02:13:09,040
integration just based on a feature etc

02:13:06,800 --> 02:13:10,320
we also do a static cli test for windows

02:13:09,040 --> 02:13:12,239
just to say

02:13:10,320 --> 02:13:14,079
go so just to see if the binary is

02:13:12,239 --> 02:13:16,079
working on windows or not so

02:13:14,079 --> 02:13:17,920
now we'll dive into docker builds right

02:13:16,079 --> 02:13:18,639
linkedin involves multiple components

02:13:17,920 --> 02:13:20,000
right as

02:13:18,639 --> 02:13:21,360
you saw earlier recently there are a lot

02:13:20,000 --> 02:13:22,800
of docker images and some of them get

02:13:21,360 --> 02:13:25,599
individual docker files

02:13:22,800 --> 02:13:27,679
now these files are across folders right

02:13:25,599 --> 02:13:29,040
so you would not want to manually run

02:13:27,679 --> 02:13:31,199
individual docker build on each of the

02:13:29,040 --> 02:13:32,320
files so obviously our solution is to

02:13:31,199 --> 02:13:35,440
have bash scripts

02:13:32,320 --> 02:13:37,199
that allows you to run docker builds for

02:13:35,440 --> 02:13:38,079
all the images every time so we do if

02:13:37,199 --> 02:13:40,239
you do docker

02:13:38,079 --> 02:13:41,840
if you run this docker build script it

02:13:40,239 --> 02:13:44,560
builds all the images

02:13:41,840 --> 02:13:45,360
the images yeah as you might expect so

02:13:44,560 --> 02:13:46,800
uh the

02:13:45,360 --> 02:13:48,480
the other thing is that the other

02:13:46,800 --> 02:13:49,920
important thing that uh that i think you

02:13:48,480 --> 02:13:50,560
should anyone should really take of it

02:13:49,920 --> 02:13:53,440
is to

02:13:50,560 --> 02:13:54,880
always cashy builds so so because we

02:13:53,440 --> 02:13:55,119
have a lot of darker images and these

02:13:54,880 --> 02:13:58,239
are

02:13:55,119 --> 02:14:01,119
heavy heavy for sure this means that uh

02:13:58,239 --> 02:14:02,639
that's the build process you know it

02:14:01,119 --> 02:14:03,440
takes quite a time so it's important

02:14:02,639 --> 02:14:05,840
that all the

02:14:03,440 --> 02:14:06,639
all the all the build images are cached

02:14:05,840 --> 02:14:08,400
across

02:14:06,639 --> 02:14:09,840
across branches so there is there is an

02:14:08,400 --> 02:14:11,599
extension on github actions called

02:14:09,840 --> 02:14:13,760
github action cache which is used to

02:14:11,599 --> 02:14:14,880
speed up builds by cap by caching layers

02:14:13,760 --> 02:14:17,040
across the repository

02:14:14,880 --> 02:14:19,040
so this means that even external pr's

02:14:17,040 --> 02:14:20,719
etc will also get the same first class

02:14:19,040 --> 02:14:22,000
experience of a fast docker bit which is

02:14:20,719 --> 02:14:23,840
awesome

02:14:22,000 --> 02:14:25,360
and github action cache is actually a

02:14:23,840 --> 02:14:27,280
pretty generalized cache

02:14:25,360 --> 02:14:28,800
extension so you can use use it not only

02:14:27,280 --> 02:14:29,440
for docker images but all but for all

02:14:28,800 --> 02:14:31,920
kinds of

02:14:29,440 --> 02:14:33,599
stuff uh we also use the docker build

02:14:31,920 --> 02:14:34,800
kit so docker build kit is not enabled

02:14:33,599 --> 02:14:36,320
by default but

02:14:34,800 --> 02:14:37,920
if you enable it it speeds up your

02:14:36,320 --> 02:14:40,320
process it speeds up your

02:14:37,920 --> 02:14:42,159
builds by a bit because it because it's

02:14:40,320 --> 02:14:43,840
the latest version of the whole build

02:14:42,159 --> 02:14:45,599
docker building it it improves

02:14:43,840 --> 02:14:46,400
concurrency and other enhancements that

02:14:45,599 --> 02:14:48,079
makes it

02:14:46,400 --> 02:14:49,440
easier that makes the whole build

02:14:48,079 --> 02:14:51,920
process faster

02:14:49,440 --> 02:14:53,360
now one other hack another neat hack

02:14:51,920 --> 02:14:55,199
that we also use is that all docker

02:14:53,360 --> 02:14:55,840
images are published as pr artifacts

02:14:55,199 --> 02:14:58,079
what is that

02:14:55,840 --> 02:14:59,119
so like so let's dive into that so every

02:14:58,079 --> 02:15:00,719
time every time they

02:14:59,119 --> 02:15:03,040
there is a github action github action

02:15:00,719 --> 02:15:05,760
allows you to publish a artifact file

02:15:03,040 --> 02:15:06,320
that you can that you can publish into

02:15:05,760 --> 02:15:08,960
the pr

02:15:06,320 --> 02:15:10,320
which means that uh users can download

02:15:08,960 --> 02:15:11,760
the artifact etc it could be your

02:15:10,320 --> 02:15:15,040
binaries it could be anything

02:15:11,760 --> 02:15:16,400
so what you could does is that every

02:15:15,040 --> 02:15:18,239
time we build all these images we

02:15:16,400 --> 02:15:19,840
package them into a zip file

02:15:18,239 --> 02:15:21,840
and we upload that as an artifact on

02:15:19,840 --> 02:15:23,360
github so this means that if you're if

02:15:21,840 --> 02:15:25,040
you're not able to run

02:15:23,360 --> 02:15:26,880
all the docker build right because of

02:15:25,040 --> 02:15:27,760
accessibility reasons or sometimes even

02:15:26,880 --> 02:15:29,119
for me i don't

02:15:27,760 --> 02:15:31,119
i don't enjoy doing the docker builds

02:15:29,119 --> 02:15:31,760
all the time so so i would just run the

02:15:31,119 --> 02:15:34,719
script

02:15:31,760 --> 02:15:36,480
bin install beer and go expand the

02:15:34,719 --> 02:15:39,040
number of the pr it directly

02:15:36,480 --> 02:15:40,480
downloads the zip file for that pr and

02:15:39,040 --> 02:15:42,239
it unboxes it and then

02:15:40,480 --> 02:15:44,320
it it loads those images into the

02:15:42,239 --> 02:15:45,360
cluster directly which is pretty cool if

02:15:44,320 --> 02:15:46,880
you think about it

02:15:45,360 --> 02:15:49,199
so that you don't have to do the whole

02:15:46,880 --> 02:15:50,960
build process every time so

02:15:49,199 --> 02:15:52,320
so so you're letting the cia do its job

02:15:50,960 --> 02:15:55,840
and then also reusing that

02:15:52,320 --> 02:15:57,679
uh the binary the artifacts here

02:15:55,840 --> 02:15:59,119
so the obvious question that we get a

02:15:57,679 --> 02:16:00,800
lot of time is that how do you run

02:15:59,119 --> 02:16:01,679
integration to say on a on a kubernetes

02:16:00,800 --> 02:16:03,920
cluster right because

02:16:01,679 --> 02:16:05,920
because it is obviously as you might

02:16:03,920 --> 02:16:08,320
expect so what we do is that uh in

02:16:05,920 --> 02:16:11,360
linkedin we use k3d and kind

02:16:08,320 --> 02:16:14,079
as the go and go

02:16:11,360 --> 02:16:15,760
as the default kubernetes distributions

02:16:14,079 --> 02:16:17,520
to run integration test so so this means

02:16:15,760 --> 02:16:19,760
that because k3d and kind

02:16:17,520 --> 02:16:21,040
are ultra lightweight etc this means

02:16:19,760 --> 02:16:23,920
that you can run them on a ci

02:16:21,040 --> 02:16:25,280
or on a very small machine etc all our

02:16:23,920 --> 02:16:27,760
integration tests right

02:16:25,280 --> 02:16:29,520
the ones we saw in the slide never

02:16:27,760 --> 02:16:31,199
depend on a specific kubernetes

02:16:29,520 --> 02:16:32,719
distribution they are pretty common

02:16:31,199 --> 02:16:34,000
integration so this means that you can

02:16:32,719 --> 02:16:37,359
transfer about the

02:16:34,000 --> 02:16:38,719
underlying indicates your distribution

02:16:37,359 --> 02:16:41,519
and use the cloud provider

02:16:38,719 --> 02:16:43,920
etc so so it is pretty easy to swap a

02:16:41,519 --> 02:16:43,920
runtime

02:16:44,160 --> 02:16:47,280
and also so every time we do image

02:16:45,840 --> 02:16:48,080
inside we need a way to load those

02:16:47,280 --> 02:16:50,639
images into

02:16:48,080 --> 02:16:51,679
the cluster so this is possible because

02:16:50,639 --> 02:16:53,200
both of the

02:16:51,679 --> 02:16:55,040
both of the queries are distributions

02:16:53,200 --> 02:16:55,679
allow you to load images into the

02:16:55,040 --> 02:16:56,960
cluster so

02:16:55,679 --> 02:16:58,840
this is much easier we also have a

02:16:56,960 --> 02:17:00,559
helper script that makes it further

02:16:58,840 --> 02:17:02,800
easier

02:17:00,559 --> 02:17:03,599
so so as i mentioned uh all our

02:17:02,800 --> 02:17:05,200
kubernetes

02:17:03,599 --> 02:17:07,040
so all our integration tests are written

02:17:05,200 --> 02:17:09,920
in google and are invoked from dash

02:17:07,040 --> 02:17:11,439
why is that so because you would want to

02:17:09,920 --> 02:17:12,639
write integration tests in a flexible

02:17:11,439 --> 02:17:14,399
manner you would want to

02:17:12,639 --> 02:17:15,679
you would want to write you would want

02:17:14,399 --> 02:17:17,679
to you'd want to

02:17:15,679 --> 02:17:19,040
make it debugging easy right then

02:17:17,679 --> 02:17:20,160
integration displays etc so it's

02:17:19,040 --> 02:17:20,960
important that there's a powerful

02:17:20,160 --> 02:17:23,280
language right

02:17:20,960 --> 02:17:25,840
so we use this golang for that and we

02:17:23,280 --> 02:17:27,120
are and we abstract those units on bash

02:17:25,840 --> 02:17:28,800
because now if you use

02:17:27,120 --> 02:17:30,800
i mean you know if you use google and if

02:17:28,800 --> 02:17:31,760
you're and if the user has to directly

02:17:30,800 --> 02:17:33,679
talk to go

02:17:31,760 --> 02:17:35,439
to run it as it means that it is pretty

02:17:33,679 --> 02:17:36,319
complicated the user facing stuff is

02:17:35,439 --> 02:17:37,920
pretty complicated

02:17:36,319 --> 02:17:39,679
so we have bash scripts that abstract

02:17:37,920 --> 02:17:41,359
away that logic and have same defaults

02:17:39,679 --> 02:17:43,120
that you can override so whenever you're

02:17:41,359 --> 02:17:44,479
done bin test run it runs

02:17:43,120 --> 02:17:46,080
all the integration press and shows you

02:17:44,479 --> 02:17:46,880
the output so there is an example here

02:17:46,080 --> 02:17:48,800
we have the

02:17:46,880 --> 02:17:50,559
we have the testing go line and then we

02:17:48,800 --> 02:17:51,359
have the script wrapping that test so

02:17:50,559 --> 02:17:54,080
whenever you do

02:17:51,359 --> 02:17:54,559
run deep test it it runs that on its own

02:17:54,080 --> 02:17:56,880
also

02:17:54,559 --> 02:17:58,160
the bas the cm scripts are run by the ci

02:17:56,880 --> 02:17:59,840
too so this means that

02:17:58,160 --> 02:18:01,359
you get a consistent experience locally

02:17:59,840 --> 02:18:02,960
on the scene so whenever there is a

02:18:01,359 --> 02:18:04,479
there is a failure in this year you can

02:18:02,960 --> 02:18:04,880
you should be able to replicate the same

02:18:04,479 --> 02:18:06,639
here

02:18:04,880 --> 02:18:08,479
it's not a different thing it makes the

02:18:06,639 --> 02:18:11,040
whole process much easier debugging

02:18:08,479 --> 02:18:14,399
failures much easier

02:18:11,040 --> 02:18:14,960
uh so so so as i said uh so there is a

02:18:14,399 --> 02:18:17,200
bin test

02:18:14,960 --> 02:18:18,559
uh script to which you pass the name of

02:18:17,200 --> 02:18:19,840
the integration that

02:18:18,559 --> 02:18:21,679
integration test that you would want to

02:18:19,840 --> 02:18:24,080
run and then you pass the whole

02:18:21,679 --> 02:18:25,920
binary url it runs those integration

02:18:24,080 --> 02:18:27,519
tests using this version of the

02:18:25,920 --> 02:18:30,319
link id and and you should be able to

02:18:27,519 --> 02:18:31,840
see the output etc

02:18:30,319 --> 02:18:33,840
uh as you might expect the integration

02:18:31,840 --> 02:18:36,960
test also follows the same pull request

02:18:33,840 --> 02:18:39,200
trigger with push also and there are all

02:18:36,960 --> 02:18:40,559
these jobs that are present

02:18:39,200 --> 02:18:41,920
now let's talk about the release clause

02:18:40,559 --> 02:18:42,319
right which is like the most exciting

02:18:41,920 --> 02:18:45,280
part

02:18:42,319 --> 02:18:47,280
so in lingudin uh we don't do manually

02:18:45,280 --> 02:18:47,679
releases so it is automated every time

02:18:47,280 --> 02:18:49,679
you do

02:18:47,679 --> 02:18:51,359
every time we every time one of the

02:18:49,679 --> 02:18:53,359
maintenance do a git push all the

02:18:51,359 --> 02:18:54,719
uh all this workflow is done

02:18:53,359 --> 02:18:56,479
automatically and the

02:18:54,719 --> 02:18:57,840
and the artifacts are published the end

02:18:56,479 --> 02:18:59,200
charts are published the images are

02:18:57,840 --> 02:19:02,319
pushed into daw into

02:18:59,200 --> 02:19:03,840
into a registry etc so so let so

02:19:02,319 --> 02:19:05,519
obviously as you might expect the

02:19:03,840 --> 02:19:07,200
trigger is a push instead of a pull

02:19:05,519 --> 02:19:09,359
request because you do not want to run

02:19:07,200 --> 02:19:10,399
release on a pull request so the release

02:19:09,359 --> 02:19:11,840
workflow is like this

02:19:10,399 --> 02:19:13,679
it includes the same docker bits and

02:19:11,840 --> 02:19:15,519
integration tests right like we saw

02:19:13,679 --> 02:19:17,120
we saw in the build workflow some we

02:19:15,519 --> 02:19:18,719
also have an additional integration test

02:19:17,120 --> 02:19:19,599
where we ran the same integration based

02:19:18,719 --> 02:19:22,000
on

02:19:19,599 --> 02:19:23,920
on an arm cluster the arm cluster is a

02:19:22,000 --> 02:19:26,160
the arm vm is on an external

02:19:23,920 --> 02:19:28,960
external cloud provider that the ca ssh

02:19:26,160 --> 02:19:30,559
is into and runs the same test

02:19:28,960 --> 02:19:32,479
obviously the binaries are published

02:19:30,559 --> 02:19:34,160
into github releases and and chocolatey

02:19:32,479 --> 02:19:34,719
for windows film charts are published

02:19:34,160 --> 02:19:37,439
into

02:19:34,719 --> 02:19:39,120
a gcp bucket uh we are also waiting for

02:19:37,439 --> 02:19:40,960
github packages to support element

02:19:39,120 --> 02:19:42,080
charts so that we can spa we can publish

02:19:40,960 --> 02:19:43,920
those health charts into

02:19:42,080 --> 02:19:45,439
into github package registry which which

02:19:43,920 --> 02:19:47,040
would be really awesome the website is

02:19:45,439 --> 02:19:49,920
also updated about the release

02:19:47,040 --> 02:19:50,399
uh the only leftover thing that is done

02:19:49,920 --> 02:19:51,680
by the

02:19:50,399 --> 02:19:53,200
internet is to send out release

02:19:51,680 --> 02:19:54,240
announcements so which is pretty cool if

02:19:53,200 --> 02:19:56,319
you think about it so the

02:19:54,240 --> 02:19:57,520
maintenance push babysit the cia just to

02:19:56,319 --> 02:19:59,359
see if everything worked

02:19:57,520 --> 02:20:00,840
and then do a announcement on the slack

02:19:59,359 --> 02:20:04,000
on the email

02:20:00,840 --> 02:20:06,000
go you are on the mailing list

02:20:04,000 --> 02:20:07,920
so so where do the images go right we

02:20:06,000 --> 02:20:09,680
publish them into github packages

02:20:07,920 --> 02:20:11,439
github applications is a relatively new

02:20:09,680 --> 02:20:14,319
offering that allows you to publish

02:20:11,439 --> 02:20:17,439
uh dependencies like npm dependencies

02:20:14,319 --> 02:20:17,439
etcetera and then

02:20:21,680 --> 02:20:25,840
to publish all our docker images as you

02:20:23,920 --> 02:20:29,200
saw here we publish all these images

02:20:25,840 --> 02:20:29,200
into into github packages

02:20:29,600 --> 02:20:33,120
so in twitter packages there is the

02:20:31,680 --> 02:20:35,200
github container register which is the

02:20:33,120 --> 02:20:38,720
offering for docker images

02:20:35,200 --> 02:20:40,640
so because you are using ghcr uh

02:20:38,720 --> 02:20:42,800
the github container registry we don't

02:20:40,640 --> 02:20:44,399
need to manage external registry secrets

02:20:42,800 --> 02:20:46,479
oss or projects like us don't have to

02:20:44,399 --> 02:20:47,520
worry about uh paying and managing the

02:20:46,479 --> 02:20:48,960
ownership right it also supports

02:20:47,520 --> 02:20:49,760
multi-architects or docker images too

02:20:48,960 --> 02:20:52,720
which is awesome

02:20:49,760 --> 02:20:54,560
for linkedin if the migration to github

02:20:52,720 --> 02:20:55,439
container registry from gcr we were on

02:20:54,560 --> 02:20:57,280
we were on google

02:20:55,439 --> 02:20:58,479
we were on google container to go

02:20:57,280 --> 02:21:00,960
register before

02:20:58,479 --> 02:21:03,040
was very simple like as you saw here we

02:21:00,960 --> 02:21:04,399
had to change all the image names across

02:21:03,040 --> 02:21:06,240
across the usages and across the

02:21:04,399 --> 02:21:08,080
publishing thing and android it worked

02:21:06,240 --> 02:21:09,439
it was pretty cool and i would highlight

02:21:08,080 --> 02:21:10,160
so i just used to check it out if you

02:21:09,439 --> 02:21:12,479
haven't

02:21:10,160 --> 02:21:14,000
so so now that we now that we completed

02:21:12,479 --> 02:21:16,160
how we saw how lingard does

02:21:14,000 --> 02:21:18,080
its own ci we'll we'll see what should

02:21:16,160 --> 02:21:20,720
be the takeaways from this stock

02:21:18,080 --> 02:21:22,399
uh always caching docker bits use github

02:21:20,720 --> 02:21:23,520
actions cache it improves your builds by

02:21:22,399 --> 02:21:27,040
a lot

02:21:23,520 --> 02:21:28,080
also also also impress parallelism right

02:21:27,040 --> 02:21:29,600
because

02:21:28,080 --> 02:21:31,760
because as we saw in integration tests

02:21:29,600 --> 02:21:34,800
all our integration tests are ran across

02:21:31,760 --> 02:21:36,560
say ah are paralyzed and rack are ran

02:21:34,800 --> 02:21:37,920
across individual kubernetes clusters so

02:21:36,560 --> 02:21:39,359
this means that all

02:21:37,920 --> 02:21:41,200
all are running parallel and you can see

02:21:39,359 --> 02:21:42,399
the output much faster

02:21:41,200 --> 02:21:43,600
also also if you are if you are

02:21:42,399 --> 02:21:45,120
depending on kubernetes use a

02:21:43,600 --> 02:21:46,399
lightweight distribution like kai and or

02:21:45,120 --> 02:21:48,399
kkk

02:21:46,399 --> 02:21:50,080
as is all in the example uh try to use a

02:21:48,399 --> 02:21:51,439
powerful language like golan to write

02:21:50,080 --> 02:21:54,479
the test and then abstract

02:21:51,439 --> 02:21:54,960
them with bash rma file to make the user

02:21:54,479 --> 02:21:57,600
experience

02:21:54,960 --> 02:21:59,280
friendly right to run the units also use

02:21:57,600 --> 02:21:59,840
github actions artifact like we saw

02:21:59,280 --> 02:22:01,680
right we

02:21:59,840 --> 02:22:03,200
we were publishing the images as a zip

02:22:01,680 --> 02:22:05,359
file that you can use locally

02:22:03,200 --> 02:22:06,880
so so if you can if you can try to do

02:22:05,359 --> 02:22:08,319
that it doesn't have to be

02:22:06,880 --> 02:22:10,560
when it offer images it could be some

02:22:08,319 --> 02:22:12,399
binaries etc it makes it

02:22:10,560 --> 02:22:14,000
it improves it it improves the

02:22:12,399 --> 02:22:16,600
accessibility by a lot because

02:22:14,000 --> 02:22:18,399
not everyone can run the say the whole

02:22:16,600 --> 02:22:21,040
document process

02:22:18,399 --> 02:22:21,680
so there is another github annotations

02:22:21,040 --> 02:22:23,520
thing

02:22:21,680 --> 02:22:25,120
which allows you so whenever the ci

02:22:23,520 --> 02:22:26,560
fails right it's hard to debug because

02:22:25,120 --> 02:22:27,760
it's a black box running on the internet

02:22:26,560 --> 02:22:29,439
etc

02:22:27,760 --> 02:22:31,200
so there is an extension called github

02:22:29,439 --> 02:22:33,280
annotations which allows you to

02:22:31,200 --> 02:22:35,439
uh write these error managers in a much

02:22:33,280 --> 02:22:37,760
better much more friendlier way so

02:22:35,439 --> 02:22:39,760
whenever an issue occurs in the ci you

02:22:37,760 --> 02:22:41,840
can automatically see that happens

02:22:39,760 --> 02:22:43,680
see that that happens see that failure

02:22:41,840 --> 02:22:45,520
in the codex server which is pretty cool

02:22:43,680 --> 02:22:47,680
also embrace your package industry it

02:22:45,520 --> 02:22:48,720
just works and goes well with most

02:22:47,680 --> 02:22:49,840
business products

02:22:48,720 --> 02:22:51,120
one other important tip that i would

02:22:49,840 --> 02:22:52,319
like to use whenever you're using

02:22:51,120 --> 02:22:55,040
external tools

02:22:52,319 --> 02:22:56,960
uh so so obviously you your integration

02:22:55,040 --> 02:22:58,399
test would have some expectation on some

02:22:56,960 --> 02:23:00,319
some external tools should be present

02:22:58,399 --> 02:23:02,880
like helen kind linked

02:23:00,319 --> 02:23:04,000
lint etc so what we do is that for each

02:23:02,880 --> 02:23:06,399
for each external tool

02:23:04,000 --> 02:23:07,040
the that will depend on we have and we

02:23:06,399 --> 02:23:09,760
have a

02:23:07,040 --> 02:23:11,120
script we have these scripts in the in

02:23:09,760 --> 02:23:13,200
the bin folder

02:23:11,120 --> 02:23:14,160
so for example if you say this is the

02:23:13,200 --> 02:23:16,479
script for

02:23:14,160 --> 02:23:18,000
k3d so what the script is doing is that

02:23:16,479 --> 02:23:20,399
whenever you look bin slash

02:23:18,000 --> 02:23:21,439
bin slash k3 it automatically download

02:23:20,399 --> 02:23:25,040
the binary if

02:23:21,439 --> 02:23:27,200
there isn't one and

02:23:25,040 --> 02:23:28,800
uses it so this means that your ci has

02:23:27,200 --> 02:23:30,560
no expectations on what

02:23:28,800 --> 02:23:32,000
your what the node should contain

02:23:30,560 --> 02:23:34,080
etcetera uh if

02:23:32,000 --> 02:23:36,240
if the binary is not there the go the

02:23:34,080 --> 02:23:38,160
script will automatically get that

02:23:36,240 --> 02:23:40,640
goes to get that binary and run it for

02:23:38,160 --> 02:23:43,200
you which is pretty cool

02:23:40,640 --> 02:23:44,640
yep yep thank you so there are some

02:23:43,200 --> 02:23:46,399
resources here to check out the whole

02:23:44,640 --> 02:23:47,439
github cis the build test release

02:23:46,399 --> 02:23:49,120
process etc

02:23:47,439 --> 02:23:52,479
now feel free to ask any questions if

02:23:49,120 --> 02:23:52,479
you haven't that's me

02:24:10,560 --> 02:24:13,600
so let's start with the first set of

02:24:12,720 --> 02:24:15,680
questions

02:24:13,600 --> 02:24:17,120
the first one i have for you tarun and i

02:24:15,680 --> 02:24:18,319
love the tips that you had shared

02:24:17,120 --> 02:24:22,399
whether it was

02:24:18,319 --> 02:24:25,840
caching dockers uh package registry

02:24:22,399 --> 02:24:26,720
uh and annotations the thing i would

02:24:25,840 --> 02:24:29,040
want to hear

02:24:26,720 --> 02:24:30,080
is like how was your overall experience

02:24:29,040 --> 02:24:33,280
using github

02:24:30,080 --> 02:24:33,280
for hosting linkedin

02:24:34,399 --> 02:24:37,439
you know obviously like any other

02:24:35,680 --> 02:24:39,359
project we started out

02:24:37,439 --> 02:24:41,120
with the opinion to run only the code

02:24:39,359 --> 02:24:41,520
right to have to have a place to host

02:24:41,120 --> 02:24:44,000
for

02:24:41,520 --> 02:24:45,359
to be to review stuff etc but as every

02:24:44,000 --> 02:24:46,720
other feature

02:24:45,359 --> 02:24:48,399
your features started coming in right

02:24:46,720 --> 02:24:50,479
like for example actions for example

02:24:48,399 --> 02:24:52,640
packages right now code space et cetera

02:24:50,479 --> 02:24:54,319
they were really ahead in adopting that

02:24:52,640 --> 02:24:55,920
like for example for packages

02:24:54,319 --> 02:24:57,439
i think we adopted it on the same day

02:24:55,920 --> 02:24:59,439
that was g8 so

02:24:57,439 --> 02:25:01,120
so every time we adopted our jobs became

02:24:59,439 --> 02:25:02,560
much easier so without doing anything

02:25:01,120 --> 02:25:04,080
right now we just replace

02:25:02,560 --> 02:25:06,479
some other some external stuff with

02:25:04,080 --> 02:25:08,720
github and it works like awesome so

02:25:06,479 --> 02:25:10,160
we have been pretty happy with github

02:25:08,720 --> 02:25:10,960
and i don't think we can find a better

02:25:10,160 --> 02:25:15,359
place for

02:25:10,960 --> 02:25:17,920
lingerie wow so glad to hear that

02:25:15,359 --> 02:25:19,840
such a sweet comment okay i got next

02:25:17,920 --> 02:25:22,560
question for you

02:25:19,840 --> 02:25:24,399
so uh important things that you would

02:25:22,560 --> 02:25:28,640
recommend to run complex

02:25:24,399 --> 02:25:28,640
humanities workflow on github actions

02:25:28,720 --> 02:25:33,120
yep that's a good question and

02:25:31,920 --> 02:25:35,600
because of the crazy adoption of

02:25:33,120 --> 02:25:38,080
kubernetes it has been a problem for a

02:25:35,600 --> 02:25:39,920
lot of people so so always use a lighter

02:25:38,080 --> 02:25:40,319
distribution like kind of k3d right

02:25:39,920 --> 02:25:42,160
which

02:25:40,319 --> 02:25:44,080
which which have the same api which has

02:25:42,160 --> 02:25:45,840
the same implementation of kubernetes

02:25:44,080 --> 02:25:47,359
but takes away all the extra stuff right

02:25:45,840 --> 02:25:48,000
like for example api server extensions

02:25:47,359 --> 02:25:49,920
etc

02:25:48,000 --> 02:25:51,760
a lot of logics like you don't actually

02:25:49,920 --> 02:25:53,520
need them so so kind and creative they

02:25:51,760 --> 02:25:54,640
remove those stuff and make sure that

02:25:53,520 --> 02:25:56,560
you get a lightweight distribution of

02:25:54,640 --> 02:25:58,880
kubernetes that you can run on the ci

02:25:56,560 --> 02:26:00,080
etc so always use a thing like that and

02:25:58,880 --> 02:26:02,160
especially for

02:26:00,080 --> 02:26:03,840
for complex builds right for complex

02:26:02,160 --> 02:26:05,359
integration best it means that

02:26:03,840 --> 02:26:07,040
it means that you're running you're

02:26:05,359 --> 02:26:07,760
running a lot of things on the c8 so

02:26:07,040 --> 02:26:09,359
this means that

02:26:07,760 --> 02:26:11,280
it is very hard to debug stuff on this

02:26:09,359 --> 02:26:12,240
here because you can't see into it etc

02:26:11,280 --> 02:26:14,319
it's a black box

02:26:12,240 --> 02:26:16,240
right so it's important that you have

02:26:14,319 --> 02:26:18,479
you have error

02:26:16,240 --> 02:26:20,080
no you have error messages go that are

02:26:18,479 --> 02:26:21,920
clear to understand and

02:26:20,080 --> 02:26:23,600
you and also use github annotations

02:26:21,920 --> 02:26:25,520
extension right there which will point

02:26:23,600 --> 02:26:26,160
out you the line where the cipher and et

02:26:25,520 --> 02:26:27,840
cetera so

02:26:26,160 --> 02:26:29,200
the so the ecosystem is pretty awesome

02:26:27,840 --> 02:26:31,040
for github and for every

02:26:29,200 --> 02:26:32,960
problem that that can come across there

02:26:31,040 --> 02:26:33,439
is a there is probably an extension out

02:26:32,960 --> 02:26:35,680
there

02:26:33,439 --> 02:26:37,920
and they should probably try to use that

02:26:35,680 --> 02:26:37,920
yeah

02:26:38,319 --> 02:26:42,240
yeah the marketplace is like really

02:26:41,600 --> 02:26:44,479
thriving

02:26:42,240 --> 02:26:46,240
and the amount of community

02:26:44,479 --> 02:26:49,280
contributions we see there

02:26:46,240 --> 02:26:51,920
is is mind-boggling um the

02:26:49,280 --> 02:26:52,800
other question that we have is with

02:26:51,920 --> 02:26:55,840
respect to

02:26:52,800 --> 02:26:58,640
like the future roadmap

02:26:55,840 --> 02:27:02,800
that um github has in terms of the new

02:26:58,640 --> 02:27:05,840
github features like what are you

02:27:02,800 --> 02:27:07,439
yep look there are a lot of them

02:27:05,840 --> 02:27:09,040
actually so i've been using github code

02:27:07,439 --> 02:27:10,479
places actually like

02:27:09,040 --> 02:27:12,960
like whenever it was released i tried

02:27:10,479 --> 02:27:14,319
out or uh so i'm in the beta and it was

02:27:12,960 --> 02:27:16,080
really fun like

02:27:14,319 --> 02:27:18,080
whenever i'm on the go it's easy to

02:27:16,080 --> 02:27:19,520
create an a to create an environment

02:27:18,080 --> 02:27:20,160
change stuff i'm sure it'll it'll

02:27:19,520 --> 02:27:22,240
improve the

02:27:20,160 --> 02:27:24,560
accessibility for open those projects a

02:27:22,240 --> 02:27:27,760
lot for a lot of users uh

02:27:24,560 --> 02:27:29,040
so so so not only they not only go

02:27:27,760 --> 02:27:30,640
not only new features right like for

02:27:29,040 --> 02:27:32,640
example every existing feature like for

02:27:30,640 --> 02:27:34,880
example github package industries there

02:27:32,640 --> 02:27:36,160
and there is there is help support being

02:27:34,880 --> 02:27:37,439
worked on so like every other

02:27:36,160 --> 02:27:39,359
improvement is like a direct

02:27:37,439 --> 02:27:40,800
benefit for projects like this right you

02:27:39,359 --> 02:27:42,080
should just be able to see what's

02:27:40,800 --> 02:27:43,280
happening and just integration

02:27:42,080 --> 02:27:44,880
integrate that you don't have to build

02:27:43,280 --> 02:27:45,920
stuff etcetera so so innovation is

02:27:44,880 --> 02:27:46,960
happening across

02:27:45,920 --> 02:27:49,520
across a lot of features like for

02:27:46,960 --> 02:27:51,040
example in security we heavily depend on

02:27:49,520 --> 02:27:52,560
we have really depend on depend on what

02:27:51,040 --> 02:27:54,319
to where it automatically updates our

02:27:52,560 --> 02:27:55,840
dependencies etc so it makes our job

02:27:54,319 --> 02:27:57,600
much easier we don't have to track

02:27:55,840 --> 02:27:59,120
depend on this example so there are

02:27:57,600 --> 02:27:59,840
improvements happening at every feature

02:27:59,120 --> 02:28:01,439
that you

02:27:59,840 --> 02:28:03,120
know that is here on github so i think

02:28:01,439 --> 02:28:03,840
we are pretty excited for the roadmap

02:28:03,120 --> 02:28:06,319
for example

02:28:03,840 --> 02:28:07,680
in chats thing that we go that is spoken

02:28:06,319 --> 02:28:10,640
about there are a lot of things that i

02:28:07,680 --> 02:28:10,640
could mention for sure

02:28:11,040 --> 02:28:15,359
great great all whatever you said is

02:28:13,120 --> 02:28:18,640
music to my ears

02:28:15,359 --> 02:28:20,399
and up next is a question which is on uh

02:28:18,640 --> 02:28:24,000
how we introduced you right

02:28:20,399 --> 02:28:25,760
so from evening runs to a book or a

02:28:24,000 --> 02:28:26,479
podcast before bedtime tell us more

02:28:25,760 --> 02:28:29,040
about

02:28:26,479 --> 02:28:30,720
what more do you do in your extra time

02:28:29,040 --> 02:28:32,720
and how do you package all of that

02:28:30,720 --> 02:28:34,160
while also contributing a lot of open

02:28:32,720 --> 02:28:35,680
source projects very excited to know

02:28:34,160 --> 02:28:41,359
this

02:28:35,680 --> 02:28:42,800
yep so one uh one important privilege

02:28:41,359 --> 02:28:44,479
that i have is that i get to work on

02:28:42,800 --> 02:28:46,479
open source and go

02:28:44,479 --> 02:28:48,479
go as my day job so so i'm getting paid

02:28:46,479 --> 02:28:49,120
to do open those which is pretty cool

02:28:48,479 --> 02:28:52,319
and i think

02:28:49,120 --> 02:28:55,760
and i think it's really awesome uh

02:28:52,319 --> 02:28:56,399
and because because my work is based on

02:28:55,760 --> 02:28:58,080
oss

02:28:56,399 --> 02:29:00,319
and go so i get to discuss a lot with

02:28:58,080 --> 02:29:01,840
users on the slack etc so it's like an

02:29:00,319 --> 02:29:03,760
all-rounder job right like being a

02:29:01,840 --> 02:29:05,520
maintainer you're not just not just

02:29:03,760 --> 02:29:06,800
writing code you're talking to users

02:29:05,520 --> 02:29:08,240
you're trying to debug their issues

02:29:06,800 --> 02:29:09,840
you're trying to see what's happening in

02:29:08,240 --> 02:29:11,280
the ecosystem etcetera so i'm really

02:29:09,840 --> 02:29:13,280
enjoying my job because it's

02:29:11,280 --> 02:29:14,560
because it's really multi-phase it's all

02:29:13,280 --> 02:29:18,000
just writing code it's about

02:29:14,560 --> 02:29:20,240
helping the users etc i think

02:29:18,000 --> 02:29:21,200
yeah i think open source has a really

02:29:20,240 --> 02:29:24,160
really important

02:29:21,200 --> 02:29:24,720
thing for uh people like this and i also

02:29:24,160 --> 02:29:26,880
see that

02:29:24,720 --> 02:29:28,240
uh ecosystem is thriving right for

02:29:26,880 --> 02:29:29,840
example in countries like india we are

02:29:28,240 --> 02:29:30,960
seeing a lot more open those projects

02:29:29,840 --> 02:29:32,720
maintainers from here

02:29:30,960 --> 02:29:34,319
working on popular projects like like

02:29:32,720 --> 02:29:36,080
kubernetes etc so i think

02:29:34,319 --> 02:29:38,160
yeah yes still pretty early into the

02:29:36,080 --> 02:29:40,000
whole open source

02:29:38,160 --> 02:29:41,520
into the open source journey across

02:29:40,000 --> 02:29:44,479
across the world uh

02:29:41,520 --> 02:29:45,600
one uh so i'm so coming across to my

02:29:44,479 --> 02:29:47,680
hobbies

02:29:45,600 --> 02:29:49,920
because i get i mean because i work from

02:29:47,680 --> 02:29:51,359
home etc it's much easier for me to have

02:29:49,920 --> 02:29:52,640
hobbies etc because i don't have to

02:29:51,359 --> 02:29:55,840
commute etc

02:29:52,640 --> 02:29:57,760
uh no so i try to

02:29:55,840 --> 02:29:59,040
because this open source work is pretty

02:29:57,760 --> 02:30:02,319
hefty on me i try to

02:29:59,040 --> 02:30:03,920
i try to relax by doing other thing

02:30:02,319 --> 02:30:06,000
other things like running etc yeah

02:30:03,920 --> 02:30:08,640
that's awesome

02:30:06,000 --> 02:30:09,040
wow love your spirit and more power to

02:30:08,640 --> 02:30:11,359
you

02:30:09,040 --> 02:30:12,960
keep doing what you're doing we love all

02:30:11,359 --> 02:30:14,399
the work and exciting energy that you

02:30:12,960 --> 02:30:17,040
bring to the ecosystem

02:30:14,399 --> 02:30:18,399
and note audience that tarun is going to

02:30:17,040 --> 02:30:19,200
hang around with us in github

02:30:18,399 --> 02:30:21,280
discussions

02:30:19,200 --> 02:30:23,359
and you know a lot about him now to ask

02:30:21,280 --> 02:30:25,600
questions from all across

02:30:23,359 --> 02:30:26,960
uh the areas that he touched so by their

02:30:25,600 --> 02:30:28,479
own huge shout out to you

02:30:26,960 --> 02:30:30,240
you're gonna be hanging out with our

02:30:28,479 --> 02:30:32,399
audience for next 30 minutes thank you

02:30:30,240 --> 02:30:35,040
so much for that

02:30:32,399 --> 02:30:35,040
yep this was fun

02:30:41,280 --> 02:30:45,439
a lot of good content coming to you this

02:30:44,640 --> 02:30:49,040
afternoon

02:30:45,439 --> 02:30:51,760
plus a whole day tomorrow coming up

02:30:49,040 --> 02:30:52,640
on the devops channel now is building

02:30:51,760 --> 02:30:55,760
event driven

02:30:52,640 --> 02:30:57,920
apps on kubernetes with fission and

02:30:55,760 --> 02:31:00,880
coming up on oss channel

02:30:57,920 --> 02:31:01,760
is actually a great panel discussion on

02:31:00,880 --> 02:31:04,800
how github

02:31:01,760 --> 02:31:05,520
is helping fight forward 19. both

02:31:04,800 --> 02:31:08,399
channels

02:31:05,520 --> 02:31:10,160
have a special closing session by none

02:31:08,399 --> 02:31:12,960
other than martin woodward

02:31:10,160 --> 02:31:14,479
so don't forget to switch back forth

02:31:12,960 --> 02:31:17,280
between channels

02:31:14,479 --> 02:31:19,040
enjoy the content do see what you really

02:31:17,280 --> 02:31:20,960
want to see and then you can watch any

02:31:19,040 --> 02:31:22,080
of that later as well because all of

02:31:20,960 --> 02:31:26,840
this will be available

02:31:22,080 --> 02:31:29,840
on github satellite.com so mohit

02:31:26,840 --> 02:31:29,840
what

02:31:29,920 --> 02:31:35,439
yup we got another power pack session

02:31:33,439 --> 02:31:36,800
it's going to be about even driven apps

02:31:35,439 --> 02:31:38,640
on kubernetes with

02:31:36,800 --> 02:31:39,840
phishing we're going to talk about how

02:31:38,640 --> 02:31:42,560
people are using

02:31:39,840 --> 02:31:43,439
functions as a service on kubernetes and

02:31:42,560 --> 02:31:46,960
how to build

02:31:43,439 --> 02:31:48,720
event-driven apps with fission we have

02:31:46,960 --> 02:31:50,960
vishal biani in the house for this

02:31:48,720 --> 02:31:52,960
session he's the cto of

02:31:50,960 --> 02:31:54,080
infra cloud technologies a huge shout

02:31:52,960 --> 02:31:56,080
out to vishal

02:31:54,080 --> 02:31:58,000
he's a contributor to fission of course

02:31:56,080 --> 02:31:58,880
fast and simple serverless functions for

02:31:58,000 --> 02:32:01,200
communities

02:31:58,880 --> 02:32:02,080
and is also the organic kubernetes and

02:32:01,200 --> 02:32:04,319
cncf

02:32:02,080 --> 02:32:05,359
meetup huge shout out for that and he

02:32:04,319 --> 02:32:07,920
loves good books

02:32:05,359 --> 02:32:08,399
he loves running and he especially loves

02:32:07,920 --> 02:32:11,840
high

02:32:08,399 --> 02:32:11,840
altitude mountains

02:32:15,040 --> 02:32:25,840
and remember audience please engage with

02:32:17,359 --> 02:32:25,840
him on discussions

02:32:26,640 --> 02:32:30,800
hi everyone uh my name is vishal biani

02:32:29,280 --> 02:32:32,160
uh i'm cton forward in fact cloud

02:32:30,800 --> 02:32:34,479
technologies

02:32:32,160 --> 02:32:35,840
i'm also a fashion maintainer uh and i'm

02:32:34,479 --> 02:32:37,120
pretty active organizer of kubernetes

02:32:35,840 --> 02:32:38,640
pooling so we'd love to connect you

02:32:37,120 --> 02:32:40,720
there

02:32:38,640 --> 02:32:42,160
cool so today we are going to talk about

02:32:40,720 --> 02:32:44,000
building event-driven applications on

02:32:42,160 --> 02:32:46,240
kubernetes with fashion

02:32:44,000 --> 02:32:47,840
now before when we go there i think the

02:32:46,240 --> 02:32:48,800
first question that comes to your mind

02:32:47,840 --> 02:32:50,479
may be

02:32:48,800 --> 02:32:52,240
why i care about function as a service

02:32:50,479 --> 02:32:54,399
platform on top of kubernetes

02:32:52,240 --> 02:32:55,680
when we have cloud provider you know

02:32:54,399 --> 02:32:57,920
managed uh

02:32:55,680 --> 02:32:59,280
function platforms i think there are

02:32:57,920 --> 02:33:00,800
some use cases and there are some

02:32:59,280 --> 02:33:02,479
scenarios where i think the fast and

02:33:00,800 --> 02:33:02,880
cooperative really shines and we'll walk

02:33:02,479 --> 02:33:05,200
through

02:33:02,880 --> 02:33:06,240
some of those scenarios so today if you

02:33:05,200 --> 02:33:07,920
look at developers

02:33:06,240 --> 02:33:09,920
they develop functions they develop

02:33:07,920 --> 02:33:11,920
micro services they develop source code

02:33:09,920 --> 02:33:13,520
they also build docker images

02:33:11,920 --> 02:33:15,760
uh will it not be nice to have a

02:33:13,520 --> 02:33:17,359
consistent way to deploy and not worry

02:33:15,760 --> 02:33:18,880
about the underlying runtime or not

02:33:17,359 --> 02:33:19,200
worry about what platform i'm deploying

02:33:18,880 --> 02:33:22,080
to

02:33:19,200 --> 02:33:23,359
all of these artifacts so today i think

02:33:22,080 --> 02:33:23,840
the developer's choice pretty much is

02:33:23,359 --> 02:33:25,439
clear

02:33:23,840 --> 02:33:27,760
we want to deploy all these things onto

02:33:25,439 --> 02:33:28,960
kubernetes in some form or fashion

02:33:27,760 --> 02:33:31,280
and this kubernetes could be sitting on

02:33:28,960 --> 02:33:31,760
top of other cloud one cloud or you know

02:33:31,280 --> 02:33:34,560
on

02:33:31,760 --> 02:33:35,520
you know on premise bare metal machines

02:33:34,560 --> 02:33:37,120
but as a developer

02:33:35,520 --> 02:33:38,640
i don't want to worry about what is the

02:33:37,120 --> 02:33:39,280
underlying platform i want to worry

02:33:38,640 --> 02:33:41,040
about the code

02:33:39,280 --> 02:33:41,840
i want to worry about how much value i

02:33:41,040 --> 02:33:43,200
can deliver you know with my

02:33:41,840 --> 02:33:45,439
applications

02:33:43,200 --> 02:33:46,800
so one thing is consistency of being

02:33:45,439 --> 02:33:48,640
able to deploy different

02:33:46,800 --> 02:33:49,840
types of workloads right from functions

02:33:48,640 --> 02:33:51,680
to microservices

02:33:49,840 --> 02:33:52,960
and then not compromising on the

02:33:51,680 --> 02:33:54,880
underlying

02:33:52,960 --> 02:33:56,560
things like scale or operability or you

02:33:54,880 --> 02:33:58,000
know being able to scale as the demand

02:33:56,560 --> 02:34:00,560
grows and then being able to scale down

02:33:58,000 --> 02:34:02,240
when the demand kind of vanishes

02:34:00,560 --> 02:34:03,760
the second factor i believe when we

02:34:02,240 --> 02:34:05,280
develop all these different applications

02:34:03,760 --> 02:34:07,280
you know whether it is services

02:34:05,280 --> 02:34:08,800
or functions or you know using docker

02:34:07,280 --> 02:34:10,479
images or so forth

02:34:08,800 --> 02:34:12,000
i want to integrate with them you know

02:34:10,479 --> 02:34:14,479
with a bunch of systems

02:34:12,000 --> 02:34:16,479
it could be a message queue system it

02:34:14,479 --> 02:34:17,760
could be a database uh it could be a

02:34:16,479 --> 02:34:18,880
monitoring system

02:34:17,760 --> 02:34:20,479
and i want to write all these

02:34:18,880 --> 02:34:22,080
integrations as a developer without

02:34:20,479 --> 02:34:23,680
having to worry about how do i connect

02:34:22,080 --> 02:34:24,720
to this how do i make it work there is

02:34:23,680 --> 02:34:26,319
one part

02:34:24,720 --> 02:34:27,760
the second part is i don't want my

02:34:26,319 --> 02:34:29,280
workers to sit idle

02:34:27,760 --> 02:34:30,399
when there are no messages or no events

02:34:29,280 --> 02:34:31,200
happening in my message queue for

02:34:30,399 --> 02:34:32,800
example

02:34:31,200 --> 02:34:34,399
i want the workers to be spinned up only

02:34:32,800 --> 02:34:36,479
when there is some event

02:34:34,399 --> 02:34:38,319
consume those events once the consume

02:34:36,479 --> 02:34:39,760
thing is done processing is done

02:34:38,319 --> 02:34:42,080
shut down the number of processors back

02:34:39,760 --> 02:34:43,200
to zero maybe right so

02:34:42,080 --> 02:34:46,240
i think something like that will be

02:34:43,200 --> 02:34:48,640
really ideal for you know developers

02:34:46,240 --> 02:34:50,479
apart from these two key factors uh i

02:34:48,640 --> 02:34:52,240
think a lot of times you also want the

02:34:50,479 --> 02:34:53,280
control of the underlying infrastructure

02:34:52,240 --> 02:34:54,640
you know what is the operating system

02:34:53,280 --> 02:34:56,319
what are the patches running are there

02:34:54,640 --> 02:34:59,040
any security issues

02:34:56,319 --> 02:35:00,560
and stuff like that you also want a

02:34:59,040 --> 02:35:02,160
fine-grained scaling control

02:35:00,560 --> 02:35:04,240
uh for example being able to scale out

02:35:02,160 --> 02:35:06,080
or scaling as required

02:35:04,240 --> 02:35:07,680
and you don't want any time out or you

02:35:06,080 --> 02:35:09,439
know any other limits on to how do you

02:35:07,680 --> 02:35:11,359
run these functions or micro services

02:35:09,439 --> 02:35:13,200
you know whether on cloud on-premise

02:35:11,359 --> 02:35:14,640
with a similar experience

02:35:13,200 --> 02:35:16,319
and i think one key point you might have

02:35:14,640 --> 02:35:17,359
noticed in all of these is a developer

02:35:16,319 --> 02:35:19,840
productivity

02:35:17,359 --> 02:35:20,880
how do we make sure as a developer we

02:35:19,840 --> 02:35:22,720
are productive

02:35:20,880 --> 02:35:24,240
we are able to deploy things build

02:35:22,720 --> 02:35:26,000
things fast without having to worry

02:35:24,240 --> 02:35:27,040
about the underlying infrastructure and

02:35:26,000 --> 02:35:31,040
just scale out you know

02:35:27,040 --> 02:35:33,280
on on demand now we talked about

02:35:31,040 --> 02:35:34,479
why fast and kubernetes matters but i

02:35:33,280 --> 02:35:35,920
think there are some scenarios

02:35:34,479 --> 02:35:37,600
where you shouldn't probably think about

02:35:35,920 --> 02:35:39,680
fast and kubernetes and let me call them

02:35:37,600 --> 02:35:42,000
out very clearly

02:35:39,680 --> 02:35:43,840
so for example if you're doing only a

02:35:42,000 --> 02:35:45,359
few hundred invocations you know of a

02:35:43,840 --> 02:35:46,479
function per a day

02:35:45,359 --> 02:35:48,560
it doesn't make sense for you to

02:35:46,479 --> 02:35:50,000
maintain the kubernetes cluster the rest

02:35:48,560 --> 02:35:51,040
of the machinery to make that happen on

02:35:50,000 --> 02:35:52,960
top of that

02:35:51,040 --> 02:35:54,960
so anything at a very small scale i

02:35:52,960 --> 02:35:56,160
would really not use fission or any

02:35:54,960 --> 02:35:58,399
fast platform you know on top of

02:35:56,160 --> 02:36:00,800
kubernetes i would simply go with

02:35:58,399 --> 02:36:03,120
cloud provider uh provided you know

02:36:00,800 --> 02:36:05,120
manage like function services

02:36:03,120 --> 02:36:06,160
uh also there are a lot of companies

02:36:05,120 --> 02:36:07,600
which start small

02:36:06,160 --> 02:36:08,880
let's say a couple of engineers together

02:36:07,600 --> 02:36:10,160
you start with a single cloud you don't

02:36:08,880 --> 02:36:11,200
really worry about multi-cloud and those

02:36:10,160 --> 02:36:12,880
kind of things right

02:36:11,200 --> 02:36:14,479
that is not a point at which you should

02:36:12,880 --> 02:36:16,479
be thinking about a fast platform on top

02:36:14,479 --> 02:36:18,880
of kubernetes i would really use as many

02:36:16,479 --> 02:36:20,960
as possible cloud managed services

02:36:18,880 --> 02:36:22,479
and scale my business you know early on

02:36:20,960 --> 02:36:24,479
and not think about all these factors

02:36:22,479 --> 02:36:27,040
very early in my business

02:36:24,479 --> 02:36:28,560
also workloads which are very static or

02:36:27,040 --> 02:36:30,640
workloads you know which are not driven

02:36:28,560 --> 02:36:32,160
driven at all i think fast on kubernetes

02:36:30,640 --> 02:36:33,520
is not a great candidate

02:36:32,160 --> 02:36:36,479
and and i would rather use managed

02:36:33,520 --> 02:36:38,960
services from cloud providers

02:36:36,479 --> 02:36:40,479
great now having looked at a fast and

02:36:38,960 --> 02:36:41,359
kubernetes why it matters and why you

02:36:40,479 --> 02:36:43,040
should worry about it

02:36:41,359 --> 02:36:45,760
and you know why when you should not

02:36:43,040 --> 02:36:47,520
really use it let's talk about fission

02:36:45,760 --> 02:36:48,880
so fission is a fast platform on top of

02:36:47,520 --> 02:36:50,640
kubernetes uh

02:36:48,880 --> 02:36:52,479
it's a simple and you know easy to use

02:36:50,640 --> 02:36:54,399
platform for developers

02:36:52,479 --> 02:36:55,920
uh you can write code or you can provide

02:36:54,399 --> 02:36:57,520
docker images either ways

02:36:55,920 --> 02:36:59,359
the concepts of docker and kubernetes

02:36:57,520 --> 02:37:01,120
can be abstracted from the developers

02:36:59,359 --> 02:37:02,399
you can export them if you want but you

02:37:01,120 --> 02:37:03,840
know as a general rule if you don't want

02:37:02,399 --> 02:37:04,960
to worry about docker or kubernetes or

02:37:03,840 --> 02:37:07,359
building docker files

02:37:04,960 --> 02:37:08,640
all that is abstracted out from you uh

02:37:07,359 --> 02:37:10,640
we maintain something called as a

02:37:08,640 --> 02:37:12,479
warm pool uh it adds a latency of 100

02:37:10,640 --> 02:37:14,479
milliseconds but it gives you the

02:37:12,479 --> 02:37:15,600
benefits of you know not being able to

02:37:14,479 --> 02:37:16,880
or not consuming

02:37:15,600 --> 02:37:18,160
the entire infrastructure when there is

02:37:16,880 --> 02:37:18,880
no load on the infrastructure so to

02:37:18,160 --> 02:37:19,920
speak

02:37:18,880 --> 02:37:21,439
and there are a bunch of other things

02:37:19,920 --> 02:37:22,960
right from you know how it is

02:37:21,439 --> 02:37:23,439
integrating with event sources and bunch

02:37:22,960 --> 02:37:25,359
of

02:37:23,439 --> 02:37:27,359
things like that we'll we'll look at in

02:37:25,359 --> 02:37:29,600
a couple of slides

02:37:27,359 --> 02:37:31,439
so while we are here here is a framework

02:37:29,600 --> 02:37:32,880
which makes developers job super easy

02:37:31,439 --> 02:37:34,800
i would love if you can go to github

02:37:32,880 --> 02:37:38,080
fashion and and start the project

02:37:34,800 --> 02:37:38,080
and and definitely follow us

02:37:39,040 --> 02:37:42,640
cool so let's understand what fission

02:37:40,880 --> 02:37:43,120
can do for you as a developer how does

02:37:42,640 --> 02:37:44,560
it work

02:37:43,120 --> 02:37:47,040
what all it supports you know what you

02:37:44,560 --> 02:37:48,399
can do with fission

02:37:47,040 --> 02:37:50,160
so the first thing is friction fits on

02:37:48,399 --> 02:37:51,760
top of kubernetes so kubernetes is the

02:37:50,160 --> 02:37:52,720
platform you absolutely need for running

02:37:51,760 --> 02:37:54,399
fashion

02:37:52,720 --> 02:37:56,080
we also very heavily use a project

02:37:54,399 --> 02:37:57,520
called cada it's a

02:37:56,080 --> 02:37:59,359
kubernetes event driven auto scaling

02:37:57,520 --> 02:38:00,560
that is a long form and it allows you to

02:37:59,359 --> 02:38:02,240
integrate with a bunch of

02:38:00,560 --> 02:38:04,399
you know sources message queues

02:38:02,240 --> 02:38:06,880
databases and whatnot

02:38:04,399 --> 02:38:08,240
now as a developer on fashion you can

02:38:06,880 --> 02:38:09,120
write functions you can also write

02:38:08,240 --> 02:38:10,479
microservices

02:38:09,120 --> 02:38:12,880
you can provide source code or you can

02:38:10,479 --> 02:38:14,640
provide docker images

02:38:12,880 --> 02:38:16,479
irrespective of what you provide the way

02:38:14,640 --> 02:38:17,040
you build deploy and then execute and

02:38:16,479 --> 02:38:20,399
run that

02:38:17,040 --> 02:38:20,399
is consistent from your point of view

02:38:21,040 --> 02:38:25,280
now it also supports a bunch of

02:38:22,960 --> 02:38:27,120
languages right from java to golang to

02:38:25,280 --> 02:38:28,560
python rubypull.net

02:38:27,120 --> 02:38:30,319
so you can write in any language that

02:38:28,560 --> 02:38:31,439
you want and the experience is more or

02:38:30,319 --> 02:38:33,040
less consistent across all these

02:38:31,439 --> 02:38:34,319
language platforms

02:38:33,040 --> 02:38:36,080
now once you've written a function or a

02:38:34,319 --> 02:38:37,520
micro service in any of these languages

02:38:36,080 --> 02:38:39,680
you ideally would want to call them

02:38:37,520 --> 02:38:41,280
right so you can call them using http

02:38:39,680 --> 02:38:42,800
or you can call them using cron job kind

02:38:41,280 --> 02:38:44,240
of parameters so you can say

02:38:42,800 --> 02:38:45,600
every hour or every minute you know this

02:38:44,240 --> 02:38:46,800
function or this micro service gets

02:38:45,600 --> 02:38:48,560
called

02:38:46,800 --> 02:38:50,000
but you can also call them using bunch

02:38:48,560 --> 02:38:53,120
of event driven

02:38:50,000 --> 02:38:55,200
uh you know sources so

02:38:53,120 --> 02:38:56,720
you can use any of you know amazon

02:38:55,200 --> 02:38:59,760
kinesis or nats

02:38:56,720 --> 02:39:01,359
or azure event hub or kafka or radius

02:38:59,760 --> 02:39:02,240
anytime something happens in any of

02:39:01,359 --> 02:39:04,080
these

02:39:02,240 --> 02:39:05,520
data systems you can say a function

02:39:04,080 --> 02:39:08,000
should get triggered or invoked

02:39:05,520 --> 02:39:08,000
basically

02:39:08,319 --> 02:39:10,720
but i think one of the most different

02:39:09,520 --> 02:39:12,319
factors is when you're operating a

02:39:10,720 --> 02:39:13,520
complex platform like fiction and

02:39:12,319 --> 02:39:15,200
kubernetes you need

02:39:13,520 --> 02:39:16,640
absolute details as to what is happening

02:39:15,200 --> 02:39:18,080
if something goes wrong

02:39:16,640 --> 02:39:20,160
and that's where we really you know

02:39:18,080 --> 02:39:21,439
integrate well with all the underlying

02:39:20,160 --> 02:39:23,520
auxiliary systems whether it's

02:39:21,439 --> 02:39:24,000
prometheus or elastic or eager for

02:39:23,520 --> 02:39:25,040
distributed

02:39:24,000 --> 02:39:26,399
tracing or graph enough for

02:39:25,040 --> 02:39:28,479
visualization and you know alerting

02:39:26,399 --> 02:39:30,880
basically

02:39:28,479 --> 02:39:32,000
cool now having looked at uh you know

02:39:30,880 --> 02:39:34,080
why fast matters

02:39:32,000 --> 02:39:35,680
uh having talked about what fiction does

02:39:34,080 --> 02:39:38,080
let's dive into the code and you know

02:39:35,680 --> 02:39:39,040
let's let's get some stuff running so

02:39:38,080 --> 02:39:41,200
i'm going to do quick

02:39:39,040 --> 02:39:42,720
two demos the first one is a simple

02:39:41,200 --> 02:39:43,600
hello world so you get a sense of how

02:39:42,720 --> 02:39:45,680
fashion works

02:39:43,600 --> 02:39:49,120
what it does and you know what a hello

02:39:45,680 --> 02:39:49,120
world looks like so let's let's go right

02:39:50,840 --> 02:39:54,080
there so

02:39:52,880 --> 02:39:55,680
first of all i'm going to create an

02:39:54,080 --> 02:39:56,800
environment which is nothing but the

02:39:55,680 --> 02:39:59,760
underlying runtime

02:39:56,800 --> 02:39:59,760
for any function

02:40:00,560 --> 02:40:03,920
secondly i'm going to use a simple

02:40:02,319 --> 02:40:07,760
hello.js piece of code

02:40:03,920 --> 02:40:10,000
and create a function now what does this

02:40:07,760 --> 02:40:12,160
uh hello.js do let's let's take a quick

02:40:10,000 --> 02:40:13,920
look

02:40:12,160 --> 02:40:16,000
so hero.js is nothing but a simple

02:40:13,920 --> 02:40:18,160
node.js function it is returning a hello

02:40:16,000 --> 02:40:19,760
world and a status code of 200.

02:40:18,160 --> 02:40:21,279
it follows a specific syntax when it

02:40:19,760 --> 02:40:23,680
comes to function but you know it's

02:40:21,279 --> 02:40:25,200
relatively simple in terms of the logic

02:40:23,680 --> 02:40:26,640
good so now we have the function we have

02:40:25,200 --> 02:40:27,359
the environment running let's test it

02:40:26,640 --> 02:40:29,520
out

02:40:27,359 --> 02:40:31,439
i'm just gonna do fission function test

02:40:29,520 --> 02:40:33,760
and hello js and let's see how it works

02:40:31,439 --> 02:40:35,040
great here is our hello world now of

02:40:33,760 --> 02:40:36,160
course hello world is great

02:40:35,040 --> 02:40:38,000
but you know we need something more

02:40:36,160 --> 02:40:39,279
concrete something more realistic so to

02:40:38,000 --> 02:40:41,680
speak right

02:40:39,279 --> 02:40:43,279
so i'm gonna do another small demo let's

02:40:41,680 --> 02:40:45,040
say i have a producer function

02:40:43,279 --> 02:40:46,240
uh it is producing messages this could

02:40:45,040 --> 02:40:47,760
be anything this could be your iot

02:40:46,240 --> 02:40:49,680
device this could be your

02:40:47,760 --> 02:40:50,800
you know pos applications which are

02:40:49,680 --> 02:40:52,319
rendering events

02:40:50,800 --> 02:40:54,319
and those events are getting dropped

02:40:52,319 --> 02:40:56,000
into a kafka topic

02:40:54,319 --> 02:40:57,920
now as soon as there's a message in the

02:40:56,000 --> 02:40:58,640
kafka topic i want another function to

02:40:57,920 --> 02:41:01,040
be invoked

02:40:58,640 --> 02:41:02,800
called consumer this consumer function

02:41:01,040 --> 02:41:04,399
is going to invoke messages or consume

02:41:02,800 --> 02:41:06,160
messages from your topic

02:41:04,399 --> 02:41:07,760
and process them if it is able to

02:41:06,160 --> 02:41:09,439
successfully process them it will put

02:41:07,760 --> 02:41:10,960
the response back into another kafka

02:41:09,439 --> 02:41:12,479
queue called response

02:41:10,960 --> 02:41:13,760
but for any reason it is not able to

02:41:12,479 --> 02:41:14,960
process there is some error there is

02:41:13,760 --> 02:41:16,560
some exception

02:41:14,960 --> 02:41:17,920
it is going to put that into another

02:41:16,560 --> 02:41:19,120
queue called error so you can you know

02:41:17,920 --> 02:41:22,000
separately process them

02:41:19,120 --> 02:41:23,200
later now one good thing you know i want

02:41:22,000 --> 02:41:25,200
to call it here again is

02:41:23,200 --> 02:41:26,800
when you're listening to kafka messages

02:41:25,200 --> 02:41:28,720
coming into kafka topic

02:41:26,800 --> 02:41:30,880
i don't want x number of words to be

02:41:28,720 --> 02:41:33,439
always running and listening to kafka

02:41:30,880 --> 02:41:34,880
what i really want is there is no power

02:41:33,439 --> 02:41:36,880
running or no application running

02:41:34,880 --> 02:41:38,160
only when messages arrive those parts

02:41:36,880 --> 02:41:39,760
are horizontally scaled out

02:41:38,160 --> 02:41:40,960
and actually delivering messages so

02:41:39,760 --> 02:41:42,960
let's go and you know see how this is

02:41:40,960 --> 02:41:44,399
going to work

02:41:42,960 --> 02:41:46,800
now if you look at the bottom half of my

02:41:44,399 --> 02:41:48,800
screen there are two functions i have

02:41:46,800 --> 02:41:50,240
one is the consumer function uh which is

02:41:48,800 --> 02:41:51,920
what i was talking about the consumer

02:41:50,240 --> 02:41:52,960
side of story and then there's a

02:41:51,920 --> 02:41:54,720
producer function which is actually

02:41:52,960 --> 02:41:56,880
going to produce these messages

02:41:54,720 --> 02:41:58,960
what connects both of these and the

02:41:56,880 --> 02:42:01,680
kafka topic is something called as a

02:41:58,960 --> 02:42:03,120
mq trigger a message queue trigger so

02:42:01,680 --> 02:42:04,000
the name of the message to trigger is

02:42:03,120 --> 02:42:05,359
kafka test

02:42:04,000 --> 02:42:07,680
it is going to invoke a function called

02:42:05,359 --> 02:42:08,960
consumer and the type of message queue

02:42:07,680 --> 02:42:10,319
is kafka

02:42:08,960 --> 02:42:12,640
it is going to listen on the request

02:42:10,319 --> 02:42:13,920
topic for any messages arriving and

02:42:12,640 --> 02:42:15,120
it is going to send all the messages

02:42:13,920 --> 02:42:16,319
which are processed successfully to

02:42:15,120 --> 02:42:17,840
response topic

02:42:16,319 --> 02:42:20,000
and any errors that happen they are

02:42:17,840 --> 02:42:22,160
going to get sent to error topic

02:42:20,000 --> 02:42:23,600
it's also going to try three times

02:42:22,160 --> 02:42:24,720
before you know it decides to put

02:42:23,600 --> 02:42:26,720
anything in the error queue

02:42:24,720 --> 02:42:28,080
and and you can look at also lastly the

02:42:26,720 --> 02:42:30,560
content type of application

02:42:28,080 --> 02:42:32,000
or or the messages basically now before

02:42:30,560 --> 02:42:33,520
we go and you know actually execute this

02:42:32,000 --> 02:42:34,720
and i show you the you know processing

02:42:33,520 --> 02:42:36,080
of functions

02:42:34,720 --> 02:42:38,240
let me actually go and show you the code

02:42:36,080 --> 02:42:40,880
of you know all this

02:42:38,240 --> 02:42:42,640
so put into a function now producer

02:42:40,880 --> 02:42:43,520
function called simple protocol it uses

02:42:42,640 --> 02:42:46,080
a handler method

02:42:43,520 --> 02:42:47,200
uh it's a go program by the way uh and

02:42:46,080 --> 02:42:50,160
you know it has a certain

02:42:47,200 --> 02:42:51,520
uh argument that it needs all it is

02:42:50,160 --> 02:42:52,160
doing is connecting to your kafka

02:42:51,520 --> 02:42:53,600
message

02:42:52,160 --> 02:42:55,680
queue and you know processing those

02:42:53,600 --> 02:42:57,120
messages uh and there are about thousand

02:42:55,680 --> 02:42:58,720
messages we are going to produce and put

02:42:57,120 --> 02:43:00,880
into a kafka queue

02:42:58,720 --> 02:43:01,920
and once it is done it is you know it is

02:43:00,880 --> 02:43:04,319
going to exit the function is going to

02:43:01,920 --> 02:43:06,000
exit and then its job basically

02:43:04,319 --> 02:43:07,680
now once the messages have arrived in

02:43:06,000 --> 02:43:08,880
kafka queue it is going to get picked up

02:43:07,680 --> 02:43:10,160
by another

02:43:08,880 --> 02:43:12,319
you know component which is going to

02:43:10,160 --> 02:43:14,160
call the consumer.js function

02:43:12,319 --> 02:43:15,439
and contributing not a lot it is just

02:43:14,160 --> 02:43:16,880
picking up the message that it received

02:43:15,439 --> 02:43:18,319
from the kafka queue and it is printing

02:43:16,880 --> 02:43:19,600
it out that hey this is the response you

02:43:18,319 --> 02:43:20,880
know so to speak

02:43:19,600 --> 02:43:22,800
that's all there is in terms of

02:43:20,880 --> 02:43:26,000
functions

02:43:22,800 --> 02:43:27,680
now what i'm going to do is i'm going to

02:43:26,000 --> 02:43:29,120
invoke the function producer so it's

02:43:27,680 --> 02:43:30,319
going to produce a thousand messages but

02:43:29,120 --> 02:43:37,680
before i go there

02:43:30,319 --> 02:43:39,040
i want to show you something important

02:43:37,680 --> 02:43:40,399
so as you can see right now in the

02:43:39,040 --> 02:43:41,600
default line space i don't have any

02:43:40,399 --> 02:43:43,840
parts

02:43:41,600 --> 02:43:44,640
once i start producing messages what i'm

02:43:43,840 --> 02:43:46,080
expecting is

02:43:44,640 --> 02:43:47,920
there are a parts which are created on

02:43:46,080 --> 02:43:49,600
the fly which will actually start

02:43:47,920 --> 02:43:50,240
consuming messages from my kafka queue

02:43:49,600 --> 02:43:53,200
so let's

02:43:50,240 --> 02:43:53,200
put them on the watch mode

02:43:53,920 --> 02:43:58,640
in the second window now i'm going to

02:43:55,520 --> 02:43:58,640
call my producer function

02:44:02,479 --> 02:44:05,680
so this particular gonna produce now

02:44:04,319 --> 02:44:08,399
about thousand order messages

02:44:05,680 --> 02:44:09,279
and and we'll see two things happening

02:44:08,399 --> 02:44:10,720
one thing is that

02:44:09,279 --> 02:44:13,200
more parts will be treated here as the

02:44:10,720 --> 02:44:15,200
messages start arriving

02:44:13,200 --> 02:44:19,840
now as you can see one part has been

02:44:15,200 --> 02:44:19,840
created for consuming these messages

02:44:20,560 --> 02:44:23,600
and it is running in state and if i look

02:44:22,399 --> 02:44:25,920
at the logs of that

02:44:23,600 --> 02:44:25,920
power

02:44:27,200 --> 02:44:30,880
i can see it is producing about or it is

02:44:29,279 --> 02:44:33,200
consuming you know the 20th or 21st

02:44:30,880 --> 02:44:35,600
messages

02:44:33,200 --> 02:44:36,319
now right now it is only one part

02:44:35,600 --> 02:44:37,920
running

02:44:36,319 --> 02:44:40,160
and it is consuming the early set of

02:44:37,920 --> 02:44:41,840
messages but as it realizes

02:44:40,160 --> 02:44:43,600
there are more messages than a single

02:44:41,840 --> 02:44:46,399
part can handle

02:44:43,600 --> 02:44:47,840
this is actually going to auto scale so

02:44:46,399 --> 02:44:49,680
right now we see only part

02:44:47,840 --> 02:44:52,080
one part and and we'll see in a couple

02:44:49,680 --> 02:44:53,600
of you know uh seconds or maybe a minute

02:44:52,080 --> 02:44:54,880
a couple more parts getting spinned up

02:44:53,600 --> 02:44:55,279
and consuming all the messages that are

02:44:54,880 --> 02:44:57,439
getting

02:44:55,279 --> 02:45:00,240
you know uh written in the by the

02:44:57,439 --> 02:45:01,760
producer in our in our case

02:45:00,240 --> 02:45:03,760
all right so that's that's a very quick

02:45:01,760 --> 02:45:05,120
and simple demo uh what we can do is we

02:45:03,760 --> 02:45:06,319
can we can let the auto scaling happen

02:45:05,120 --> 02:45:07,040
here and we can come back and watch it a

02:45:06,319 --> 02:45:08,479
little later

02:45:07,040 --> 02:45:09,760
and we'll continue for rest of the

02:45:08,479 --> 02:45:12,160
presentation and you know talk through

02:45:09,760 --> 02:45:12,160
other things

02:45:12,479 --> 02:45:15,680
right another example you know that is

02:45:14,800 --> 02:45:17,840
again available

02:45:15,680 --> 02:45:18,720
uh on the on the github repository of

02:45:17,840 --> 02:45:20,240
fashion

02:45:18,720 --> 02:45:22,080
uh we actually use a six set of

02:45:20,240 --> 02:45:23,600
functions uh one of them is a kafka

02:45:22,080 --> 02:45:25,120
producer very similar to our producer

02:45:23,600 --> 02:45:26,800
that we just saw right now

02:45:25,120 --> 02:45:29,040
uh that produces messages put them in a

02:45:26,800 --> 02:45:31,279
kafka queue and then

02:45:29,040 --> 02:45:32,720
there are about you know six other

02:45:31,279 --> 02:45:34,240
functions one of them is the consumer

02:45:32,720 --> 02:45:35,120
the consumer basically picks up messages

02:45:34,240 --> 02:45:36,800
from kafka

02:45:35,120 --> 02:45:39,359
does some messaging of the data and put

02:45:36,800 --> 02:45:41,520
them into redis the other four functions

02:45:39,359 --> 02:45:43,520
really read redis data and and you know

02:45:41,520 --> 02:45:44,880
provide it as an api endpoint

02:45:43,520 --> 02:45:46,880
and the last function is the web

02:45:44,880 --> 02:45:47,439
function it basically queries the api in

02:45:46,880 --> 02:45:48,800
points

02:45:47,439 --> 02:45:50,880
and show you all the you know nice

02:45:48,800 --> 02:45:52,160
statistics now i'm not going to run this

02:45:50,880 --> 02:45:54,319
it'll probably take another hour for us

02:45:52,160 --> 02:45:55,279
to try it out and show entire code and

02:45:54,319 --> 02:45:56,720
the working

02:45:55,279 --> 02:45:58,560
but you can go and check it out on this

02:45:56,720 --> 02:46:00,000
repository and there is also a

02:45:58,560 --> 02:46:00,880
screenshot and a demo of you know this

02:46:00,000 --> 02:46:04,399
working in in

02:46:00,880 --> 02:46:06,160
you know live basically

02:46:04,399 --> 02:46:08,399
cool let's go and see if there is more

02:46:06,160 --> 02:46:11,359
messages or more parts getting

02:46:08,399 --> 02:46:13,840
you know produced right i think it is

02:46:11,359 --> 02:46:15,920
still consuming about 235 odd messages

02:46:13,840 --> 02:46:17,200
uh if it is if it finds more than one

02:46:15,920 --> 02:46:17,439
consumer growth it will probably scale

02:46:17,200 --> 02:46:18,880
out

02:46:17,439 --> 02:46:20,240
uh but if it doesn't it may not scale

02:46:18,880 --> 02:46:22,000
out uh and i don't know which way how

02:46:20,240 --> 02:46:23,439
configured right now

02:46:22,000 --> 02:46:25,520
but but you get a gist of this once

02:46:23,439 --> 02:46:27,279
these thousand messages are consumed

02:46:25,520 --> 02:46:28,560
the part that is running kafka is is

02:46:27,279 --> 02:46:29,680
gonna get shut down

02:46:28,560 --> 02:46:32,000
and you know it is gonna get back to

02:46:29,680 --> 02:46:33,520
zero state so that is a truly elastic

02:46:32,000 --> 02:46:34,479
infrastructure that you can scale out

02:46:33,520 --> 02:46:36,960
and scale in

02:46:34,479 --> 02:46:38,640
as per your requirements and and still

02:46:36,960 --> 02:46:40,080
able to you know build event driven

02:46:38,640 --> 02:46:41,520
applications which react

02:46:40,080 --> 02:46:42,800
when there is an event and we don't

02:46:41,520 --> 02:46:44,960
react when there is no events out of

02:46:42,800 --> 02:46:44,960
speech

02:46:45,439 --> 02:46:49,279
great now one thing i would like to talk

02:46:47,520 --> 02:46:51,600
about is contributing

02:46:49,279 --> 02:46:53,040
uh not just to vision to any open source

02:46:51,600 --> 02:46:54,640
project and i want to

02:46:53,040 --> 02:46:57,920
bring a personal anecdote you know from

02:46:54,640 --> 02:47:01,279
my journey of open source

02:46:57,920 --> 02:47:03,359
so i really started my career

02:47:01,279 --> 02:47:05,040
into the enterprise software uh i was a

02:47:03,359 --> 02:47:06,399
mechanical engineer by education so most

02:47:05,040 --> 02:47:06,960
of what i did was you know learning on

02:47:06,399 --> 02:47:08,479
the job

02:47:06,960 --> 02:47:10,640
in my early years of you know software

02:47:08,479 --> 02:47:11,600
engineering career i worked with

02:47:10,640 --> 02:47:13,520
enterprise companies

02:47:11,600 --> 02:47:15,040
not a lot of open source uh of course i

02:47:13,520 --> 02:47:15,840
did use open source like java and other

02:47:15,040 --> 02:47:17,359
things

02:47:15,840 --> 02:47:19,040
but most of the things that i did or

02:47:17,359 --> 02:47:20,319
that i work on were closed source

02:47:19,040 --> 02:47:24,319
and you know driven by commercial

02:47:20,319 --> 02:47:25,520
companies i think around 2010 11

02:47:24,319 --> 02:47:27,680
i discovered a project called cloud

02:47:25,520 --> 02:47:29,040
foundry it was a past platform uh very

02:47:27,680 --> 02:47:30,560
promising and you know very interesting

02:47:29,040 --> 02:47:32,399
probably ahead of its time

02:47:30,560 --> 02:47:33,920
and i discovered the value of you know

02:47:32,399 --> 02:47:35,439
open source software i could download

02:47:33,920 --> 02:47:36,000
the entire stack i could rent it on my

02:47:35,439 --> 02:47:37,760
machine

02:47:36,000 --> 02:47:39,439
try it out fix the bug fix the

02:47:37,760 --> 02:47:40,319
documentation send something back

02:47:39,439 --> 02:47:42,399
upstream

02:47:40,319 --> 02:47:45,120
so i joined github you know as any

02:47:42,399 --> 02:47:47,920
developer would do back in the day

02:47:45,120 --> 02:47:49,279
um i think the early years of my github

02:47:47,920 --> 02:47:50,160
and general open source activity i was

02:47:49,279 --> 02:47:52,240
still you know watching from the

02:47:50,160 --> 02:47:54,000
sidelines you know see what is happening

02:47:52,240 --> 02:47:55,680
maybe look at a few projects maybe there

02:47:54,000 --> 02:47:57,200
is a few issues if you try out something

02:47:55,680 --> 02:47:59,359
maybe there is a small documentation

02:47:57,200 --> 02:48:00,000
patch maybe fix one word here one word

02:47:59,359 --> 02:48:01,520
there

02:48:00,000 --> 02:48:03,200
but i was really happy you know i could

02:48:01,520 --> 02:48:06,880
contribute in my own small ways

02:48:03,200 --> 02:48:09,439
in my own tiny ways to open source

02:48:06,880 --> 02:48:10,000
over time you know i took small baby

02:48:09,439 --> 02:48:12,560
steps

02:48:10,000 --> 02:48:14,240
uh so i created a small stack workshop

02:48:12,560 --> 02:48:15,040
basically i learned sal stack as part of

02:48:14,240 --> 02:48:16,240
my work

02:48:15,040 --> 02:48:17,520
salt stack is again you know another

02:48:16,240 --> 02:48:18,160
open source configuration management

02:48:17,520 --> 02:48:19,439
tool

02:48:18,160 --> 02:48:21,200
and i realized there is not a single

02:48:19,439 --> 02:48:22,800
demo out there where you can spin up

02:48:21,200 --> 02:48:24,640
you know three boxes of vagrant on your

02:48:22,800 --> 02:48:25,520
own machine and play around you know

02:48:24,640 --> 02:48:26,960
with salt

02:48:25,520 --> 02:48:28,399
uh the way you would do with a very

02:48:26,960 --> 02:48:29,439
realistic kind of you know application

02:48:28,399 --> 02:48:31,200
or demo

02:48:29,439 --> 02:48:33,200
so i built out a small utility uh you

02:48:31,200 --> 02:48:34,240
know put that out in in the open source

02:48:33,200 --> 02:48:35,359
i talked about it to a couple of my

02:48:34,240 --> 02:48:36,399
colleagues my friends and they were

02:48:35,359 --> 02:48:37,279
really happy that you know they could

02:48:36,399 --> 02:48:39,279
actually

02:48:37,279 --> 02:48:40,319
clone it up it and you know they could

02:48:39,279 --> 02:48:41,040
they could actually start playing with

02:48:40,319 --> 02:48:43,279
salt

02:48:41,040 --> 02:48:44,880
so that's a great great satisfaction uh

02:48:43,279 --> 02:48:46,319
you know from giving back to community

02:48:44,880 --> 02:48:48,080
and you know making somebody's learning

02:48:46,319 --> 02:48:50,319
easy

02:48:48,080 --> 02:48:51,920
and around 2017 i started with fishing

02:48:50,319 --> 02:48:53,040
uh i i didn't know golang you know for

02:48:51,920 --> 02:48:54,240
example when i started with christian i

02:48:53,040 --> 02:48:56,160
learned it on the job

02:48:54,240 --> 02:48:57,520
i started continuing to solve features

02:48:56,160 --> 02:48:59,760
small documentation patches

02:48:57,520 --> 02:49:00,960
uh small bugs over time you know i

02:48:59,760 --> 02:49:02,479
started converting bigger and bigger

02:49:00,960 --> 02:49:03,680
features and eventually you know i'm

02:49:02,479 --> 02:49:04,560
maintaining the fission project as of

02:49:03,680 --> 02:49:07,600
today

02:49:04,560 --> 02:49:08,800
so i want to say you know don't don't

02:49:07,600 --> 02:49:09,920
uh think you know that you have to start

02:49:08,800 --> 02:49:10,640
big don't think that you'll do

02:49:09,920 --> 02:49:12,399
everything you know

02:49:10,640 --> 02:49:14,479
right from the beginning very big start

02:49:12,399 --> 02:49:14,960
small starts helping in smaller ways you

02:49:14,479 --> 02:49:16,319
can

02:49:14,960 --> 02:49:17,680
eventually you will reach a point you

02:49:16,319 --> 02:49:19,920
know where you'll start contributing in

02:49:17,680 --> 02:49:21,600
bigger and bigger ways

02:49:19,920 --> 02:49:23,439
now after expression is concerned you

02:49:21,600 --> 02:49:25,600
can go to fashion you know dot dot

02:49:23,439 --> 02:49:27,920
vision or io such docs contributing

02:49:25,600 --> 02:49:29,279
and you know build code on your machine

02:49:27,920 --> 02:49:31,120
and see how it is working

02:49:29,279 --> 02:49:32,800
if you run into any shoes please join

02:49:31,120 --> 02:49:34,560
slack you ask questions to you know

02:49:32,800 --> 02:49:36,640
contributors other community members

02:49:34,560 --> 02:49:39,359
they're very you know happy and you know

02:49:36,640 --> 02:49:40,560
friendly to help others

02:49:39,359 --> 02:49:42,880
also there's another project you know

02:49:40,560 --> 02:49:44,720
that i'm kind of practically

02:49:42,880 --> 02:49:47,200
quite involved into is is called bot

02:49:44,720 --> 02:49:49,760
cube it's a chatbot for kubernetes uh

02:49:47,200 --> 02:49:51,520
works on top of you know microsoft

02:49:49,760 --> 02:49:53,520
teams matter modes slack bunch of chat

02:49:51,520 --> 02:49:55,120
platforms and again you know very nice

02:49:53,520 --> 02:49:56,560
project to start contributing

02:49:55,120 --> 02:49:58,080
make small changes understand you know

02:49:56,560 --> 02:50:00,720
infrastructure understand systems and so

02:49:58,080 --> 02:50:00,720
on and so forth

02:50:00,880 --> 02:50:05,040
cool uh let's see and go you know if our

02:50:03,600 --> 02:50:07,600
parts have scaled out our messages are

02:50:05,040 --> 02:50:08,880
still consuming okay so we are about 715

02:50:07,600 --> 02:50:10,640
i don't think it did scale out because

02:50:08,880 --> 02:50:12,399
there's probably only one consumer group

02:50:10,640 --> 02:50:14,080
but if i had more than you know one two

02:50:12,399 --> 02:50:16,160
three four consumer groups then it would

02:50:14,080 --> 02:50:18,000
have scaled like three four parts

02:50:16,160 --> 02:50:19,359
uh and consumed all the messages and you

02:50:18,000 --> 02:50:20,880
can see by

02:50:19,359 --> 02:50:22,399
probably in couple more minutes uh

02:50:20,880 --> 02:50:23,040
thousand messages will be consumed and

02:50:22,399 --> 02:50:24,720
done

02:50:23,040 --> 02:50:26,160
and and the part will be uh you know

02:50:24,720 --> 02:50:27,520
shut down the one that was consuming

02:50:26,160 --> 02:50:29,840
messages

02:50:27,520 --> 02:50:31,040
so great uh that's a simple demo uh if

02:50:29,840 --> 02:50:32,560
you have any questions i'm happy to take

02:50:31,040 --> 02:50:34,240
them on the github discussions as well

02:50:32,560 --> 02:50:37,840
uh but you know thanks for listening to

02:50:34,240 --> 02:50:37,840
me uh patiently

02:50:45,200 --> 02:50:48,640
you have brought in a lot of energy a

02:50:47,120 --> 02:50:50,560
lot of shine in our

02:50:48,640 --> 02:50:52,720
head of satellite event thank you so

02:50:50,560 --> 02:50:56,000
much for that

02:50:52,720 --> 02:50:58,160
thank you thanks for the speech

02:50:56,000 --> 02:50:58,160
to

02:50:59,840 --> 02:51:03,520
celebrating and a big shout out to all

02:51:02,479 --> 02:51:06,080
our community

02:51:03,520 --> 02:51:07,200
in north of india folks out there make

02:51:06,080 --> 02:51:09,200
some noise

02:51:07,200 --> 02:51:10,880
share with us on twitter hashtag github

02:51:09,200 --> 02:51:12,720
satellite thank you

02:51:10,880 --> 02:51:15,920
the session was really awesome let's

02:51:12,720 --> 02:51:17,680
jump to the questions now

02:51:15,920 --> 02:51:19,200
yes vishal we got questions for you and

02:51:17,680 --> 02:51:21,840
i'll take the first one

02:51:19,200 --> 02:51:25,040
how does one build a chain of even

02:51:21,840 --> 02:51:25,040
functions with fission

02:51:26,640 --> 02:51:29,760
yeah that's a great question uh there is

02:51:29,439 --> 02:51:31,359
a

02:51:29,760 --> 02:51:32,800
project called fission workflows which

02:51:31,359 --> 02:51:34,479
allows you to do that to some extent

02:51:32,800 --> 02:51:36,160
uh but also our users you know they have

02:51:34,479 --> 02:51:38,800
actually built out their own custom

02:51:36,160 --> 02:51:40,479
logic to uh build a chain of functions

02:51:38,800 --> 02:51:42,319
they basically use message queues as

02:51:40,479 --> 02:51:44,080
a way of organizating so one function

02:51:42,319 --> 02:51:45,040
produces something it you know puts into

02:51:44,080 --> 02:51:46,240
a message and there's some other

02:51:45,040 --> 02:51:47,520
function listening to it

02:51:46,240 --> 02:51:49,439
and that just builds the chain of

02:51:47,520 --> 02:51:51,840
functions you know that you can execute

02:51:49,439 --> 02:51:51,840
basically

02:51:53,600 --> 02:51:59,920
awesome um when it comes to

02:51:57,040 --> 02:52:02,000
lambda or azure functions like when are

02:51:59,920 --> 02:52:04,720
those better to use as compared to

02:52:02,000 --> 02:52:07,760
fission for example

02:52:04,720 --> 02:52:08,319
absolutely i think uh for anybody who is

02:52:07,760 --> 02:52:10,319
new

02:52:08,319 --> 02:52:11,840
uh in general to computing or let's say

02:52:10,319 --> 02:52:13,439
you know fast i would highly recommend

02:52:11,840 --> 02:52:15,359
them using lambda or you know azure

02:52:13,439 --> 02:52:17,120
functions they are great starting point

02:52:15,359 --> 02:52:18,319
they give you a lot of value without

02:52:17,120 --> 02:52:19,920
having to understand all of the

02:52:18,319 --> 02:52:21,840
underlying you know nuts and bolts of

02:52:19,920 --> 02:52:23,200
you know infrastructure

02:52:21,840 --> 02:52:24,960
so i think they are a great starting

02:52:23,200 --> 02:52:26,319
point uh and in fact i would say even

02:52:24,960 --> 02:52:27,920
for smaller businesses early stage

02:52:26,319 --> 02:52:29,520
businesses they are great value add they

02:52:27,920 --> 02:52:30,960
give you so much power without having to

02:52:29,520 --> 02:52:32,479
worry about the infrastructure

02:52:30,960 --> 02:52:34,240
only beyond a certain point when you

02:52:32,479 --> 02:52:36,240
start scaling out i would really think

02:52:34,240 --> 02:52:37,279
about fast and kubernetes as a strategy

02:52:36,240 --> 02:52:38,720
or you know if it is going to give me

02:52:37,279 --> 02:52:40,840
something more than what i get

02:52:38,720 --> 02:52:43,359
from adult functions or lambda for

02:52:40,840 --> 02:52:45,040
example

02:52:43,359 --> 02:52:46,960
that's a great advice for how one should

02:52:45,040 --> 02:52:47,760
look at transitioning from one stack to

02:52:46,960 --> 02:52:49,840
another

02:52:47,760 --> 02:52:51,359
and we got another one and you shared a

02:52:49,840 --> 02:52:53,200
lot about the projects

02:52:51,359 --> 02:52:54,880
uh where you are contributing vishal and

02:52:53,200 --> 02:52:56,960
i think that's a lot to this

02:52:54,880 --> 02:52:58,560
so audience is asking here how do i get

02:52:56,960 --> 02:53:02,640
involved in fission

02:52:58,560 --> 02:53:02,640
and start contributing to it

02:53:03,040 --> 02:53:06,960
sure sure uh i think the the first and

02:53:05,920 --> 02:53:09,600
foremost thing i would do

02:53:06,960 --> 02:53:11,120
you know is go check out the project and

02:53:09,600 --> 02:53:13,040
try it out forget about contributing but

02:53:11,120 --> 02:53:15,040
also understand what it does right

02:53:13,040 --> 02:53:16,080
build a simple function deploy it see if

02:53:15,040 --> 02:53:17,680
it works right

02:53:16,080 --> 02:53:19,120
if you again run into any issues join

02:53:17,680 --> 02:53:20,240
the slack people are happy to help you

02:53:19,120 --> 02:53:21,600
know and guide you

02:53:20,240 --> 02:53:23,359
once you understood what the project

02:53:21,600 --> 02:53:24,960
does then i would go and look at the

02:53:23,359 --> 02:53:25,920
good first issues on fiction or any

02:53:24,960 --> 02:53:27,680
repository i think most of the

02:53:25,920 --> 02:53:29,760
repositories do follow the standard

02:53:27,680 --> 02:53:31,200
and find out a very small issue in the

02:53:29,760 --> 02:53:32,000
area that you are comfortable with maybe

02:53:31,200 --> 02:53:33,600
with a message queue

02:53:32,000 --> 02:53:35,439
maybe with a database maybe something

02:53:33,600 --> 02:53:36,479
you know simple as linting code for

02:53:35,439 --> 02:53:38,319
example right

02:53:36,479 --> 02:53:39,840
and start contributing what that will do

02:53:38,319 --> 02:53:40,960
is that will give you an idea of the

02:53:39,840 --> 02:53:43,520
project structure

02:53:40,960 --> 02:53:45,359
how to build how to deploy once my first

02:53:43,520 --> 02:53:46,640
you know b6 simple bug is done

02:53:45,359 --> 02:53:48,640
then i would go and you know figure out

02:53:46,640 --> 02:53:50,840
more complex bugs smaller features and

02:53:48,640 --> 02:53:52,880
get more and more involved into the

02:53:50,840 --> 02:53:56,080
project

02:53:52,880 --> 02:53:58,080
thank you that's a great advice um

02:53:56,080 --> 02:53:59,600
any special messaging for say our

02:53:58,080 --> 02:54:02,319
student community out there

02:53:59,600 --> 02:54:05,520
and early developers anything different

02:54:02,319 --> 02:54:09,600
you would want to suggest them

02:54:05,520 --> 02:54:11,040
uh yeah uh i think uh i i do advise you

02:54:09,600 --> 02:54:11,680
know a few of my family and you know

02:54:11,040 --> 02:54:14,080
friends

02:54:11,680 --> 02:54:16,080
were students i think uh start basic

02:54:14,080 --> 02:54:18,800
start small started the simple language

02:54:16,080 --> 02:54:20,800
but definitely go to depth of it and

02:54:18,800 --> 02:54:22,880
have a lot of attention to detail

02:54:20,800 --> 02:54:24,880
and today you know we are lucky in 2021

02:54:22,880 --> 02:54:27,920
we have so many tools whether it is a

02:54:24,880 --> 02:54:29,040
browser-based ide or you know github

02:54:27,920 --> 02:54:31,040
github actions

02:54:29,040 --> 02:54:32,240
we can do so many things without

02:54:31,040 --> 02:54:33,520
actually having to know

02:54:32,240 --> 02:54:35,840
and you know build everything on your

02:54:33,520 --> 02:54:36,800
own machine uh so i would say pick up

02:54:35,840 --> 02:54:38,640
one language

02:54:36,800 --> 02:54:39,600
get great at it and beyond that explore

02:54:38,640 --> 02:54:40,800
your interest you know whether it is

02:54:39,600 --> 02:54:42,240
into systems or ai

02:54:40,800 --> 02:54:44,399
or machine learning or big data you know

02:54:42,240 --> 02:54:45,760
whatever it may be and slowly really you

02:54:44,399 --> 02:54:49,840
know progress with open source projects

02:54:45,760 --> 02:54:49,840
because there is so much out there

02:54:50,000 --> 02:54:53,040
thanks thanks for sharing that and i

02:54:51,359 --> 02:54:54,000
wish all of this was available for me as

02:54:53,040 --> 02:54:57,120
well

02:54:54,000 --> 02:54:58,560
as i was growing up so vishal you

02:54:57,120 --> 02:54:59,359
mentioned something very interesting

02:54:58,560 --> 02:55:01,760
about the

02:54:59,359 --> 02:55:03,840
pune kubernetes and cncf meetup would

02:55:01,760 --> 02:55:05,279
love to know more on how it started

02:55:03,840 --> 02:55:07,840
and where it is today what is your

02:55:05,279 --> 02:55:07,840
future plan

02:55:08,240 --> 02:55:11,359
absolutely absolutely yeah that's a

02:55:09,920 --> 02:55:13,359
topic close to my heart

02:55:11,359 --> 02:55:14,720
uh i think when kubernetes was very

02:55:13,359 --> 02:55:16,160
early and

02:55:14,720 --> 02:55:17,600
still the dominant orchestrator so to

02:55:16,160 --> 02:55:19,120
speak i i thought missiles will take

02:55:17,600 --> 02:55:20,160
over but uh i realized kubernetes a lot

02:55:19,120 --> 02:55:22,160
of power

02:55:20,160 --> 02:55:23,520
i started the meetup because uh there

02:55:22,160 --> 02:55:25,040
were a few people that

02:55:23,520 --> 02:55:26,399
we knew about kubernetes and we thought

02:55:25,040 --> 02:55:26,960
it's a good idea to share with broader

02:55:26,399 --> 02:55:28,479
community

02:55:26,960 --> 02:55:29,920
and hopefully more people will join us

02:55:28,479 --> 02:55:32,000
so when the first meetup we did it was

02:55:29,920 --> 02:55:33,359
just eight people including myself

02:55:32,000 --> 02:55:35,520
and over time you know it has grown to

02:55:33,359 --> 02:55:37,120
now almost 2000 people actively

02:55:35,520 --> 02:55:38,880
in the in the meetup group but also 50

02:55:37,120 --> 02:55:40,880
60 joining us every month

02:55:38,880 --> 02:55:43,040
uh we talk about you know all the basic

02:55:40,880 --> 02:55:45,120
topics and some advanced topics as well

02:55:43,040 --> 02:55:46,640
and and learn from each other basically

02:55:45,120 --> 02:55:47,760
that's the goal and and that was the

02:55:46,640 --> 02:55:49,840
original idea that you know

02:55:47,760 --> 02:55:51,359
what i know if i can share and you know

02:55:49,840 --> 02:55:52,479
others share from their learnings the

02:55:51,359 --> 02:55:54,160
mutual learnings will be

02:55:52,479 --> 02:55:58,560
met together more than you know what we

02:55:54,160 --> 02:56:01,120
can do individually

02:55:58,560 --> 02:56:02,560
uh i'm sure folks who are listening in

02:56:01,120 --> 02:56:05,680
would want to also know

02:56:02,560 --> 02:56:05,680
how can they join in

02:56:06,399 --> 02:56:10,240
absolutely so just how to go to

02:56:08,160 --> 02:56:11,520
meetup.com kubernetes pune

02:56:10,240 --> 02:56:13,200
and and if you're already a member of

02:56:11,520 --> 02:56:14,720
meetup you just join the group if you're

02:56:13,200 --> 02:56:19,200
not just sign up for meetup.com

02:56:14,720 --> 02:56:19,200
and and join you know kubernetes.com

02:56:20,640 --> 02:56:24,640
great great that's that's great and uh

02:56:23,200 --> 02:56:26,479
this question has been coming up for

02:56:24,640 --> 02:56:27,120
almost every speaker out here so there

02:56:26,479 --> 02:56:29,120
it is for you

02:56:27,120 --> 02:56:30,880
charles what's your favorite set of

02:56:29,120 --> 02:56:34,000
features at github

02:56:30,880 --> 02:56:36,800
and what do you use the most

02:56:34,000 --> 02:56:39,040
yeah absolutely absolutely uh if you ask

02:56:36,800 --> 02:56:41,520
me what is my most favorite one today

02:56:39,040 --> 02:56:42,960
it definitely has to be you know the vs

02:56:41,520 --> 02:56:43,520
code on github where you can open a

02:56:42,960 --> 02:56:46,240
browser

02:56:43,520 --> 02:56:46,640
you know ide and start developing i

02:56:46,240 --> 02:56:47,920
think

02:56:46,640 --> 02:56:49,520
the other one that i really like is the

02:56:47,920 --> 02:56:50,160
github actions because it gives you a

02:56:49,520 --> 02:56:51,760
truly

02:56:50,160 --> 02:56:53,760
integrated workflow right from source

02:56:51,760 --> 02:56:55,200
code management to writing code to ci 3d

02:56:53,760 --> 02:56:57,600
all in a browser window

02:56:55,200 --> 02:57:00,800
so i think the vs code in browser is my

02:56:57,600 --> 02:57:00,800
most favorite feature i must say

02:57:01,200 --> 02:57:04,240
wow so it's actually coming really close

02:57:03,600 --> 02:57:08,080
most like

02:57:04,240 --> 02:57:11,760
code spaces and actions and that's what

02:57:08,080 --> 02:57:14,960
uh we've been hearing from folks as well

02:57:11,760 --> 02:57:18,720
absolutely when it comes to uh

02:57:14,960 --> 02:57:21,439
other projects that you contribute to

02:57:18,720 --> 02:57:22,560
is this usually in the same area or do

02:57:21,439 --> 02:57:24,800
you

02:57:22,560 --> 02:57:25,760
do you prefer like again from an advice

02:57:24,800 --> 02:57:28,479
to others as well

02:57:25,760 --> 02:57:31,760
would you prefer to deepen in one area

02:57:28,479 --> 02:57:31,760
or explore multiple

02:57:32,319 --> 02:57:36,560
sure i think in past i tried to do

02:57:35,120 --> 02:57:37,920
multiple but i think

02:57:36,560 --> 02:57:39,439
at least personally from my perspective

02:57:37,920 --> 02:57:40,880
what happens is when you spread yourself

02:57:39,439 --> 02:57:42,240
too thin into too many you know areas

02:57:40,880 --> 02:57:44,080
and you don't get depth

02:57:42,240 --> 02:57:45,279
i prefer to focus on one area for

02:57:44,080 --> 02:57:46,720
example even if you look at just

02:57:45,279 --> 02:57:48,080
you know infrastructure there are

02:57:46,720 --> 02:57:48,960
probably hundreds of projects out there

02:57:48,080 --> 02:57:50,080
and i don't think you can again

02:57:48,960 --> 02:57:50,960
contribute to all hundreds of them

02:57:50,080 --> 02:57:53,760
anyways

02:57:50,960 --> 02:57:55,439
so i would really focus on one area uh

02:57:53,760 --> 02:57:56,960
get depth into that and then choose a

02:57:55,439 --> 02:57:58,319
few projects that you can contribute to

02:57:56,960 --> 02:57:59,680
you know consistently i believe the

02:57:58,319 --> 02:58:00,479
consistency over time you know is a lot

02:57:59,680 --> 02:58:01,920
more important

02:58:00,479 --> 02:58:04,160
than contributing to x number of

02:58:01,920 --> 02:58:05,920
projects uh if you're early in your

02:58:04,160 --> 02:58:07,279
career or your college student

02:58:05,920 --> 02:58:08,880
who still don't know what you want to do

02:58:07,279 --> 02:58:09,840
whether it's system design or big data

02:58:08,880 --> 02:58:11,439
or machine learning

02:58:09,840 --> 02:58:13,279
it's okay to explore it's okay to be a

02:58:11,439 --> 02:58:14,560
little open but at some point you have

02:58:13,279 --> 02:58:15,920
to take a call and say hey i'm going to

02:58:14,560 --> 02:58:17,439
focus on this one area

02:58:15,920 --> 02:58:21,279
and consistently spend my time over

02:58:17,439 --> 02:58:21,279
let's say you know next couple of years

02:58:22,240 --> 02:58:26,240
that's great that's great advice and uh

02:58:24,479 --> 02:58:26,960
definitely very very useful for all our

02:58:26,240 --> 02:58:28,720
audience

02:58:26,960 --> 02:58:30,399
and vishal with that we'll wrap up the

02:58:28,720 --> 02:58:32,240
question and answers here but

02:58:30,399 --> 02:58:34,000
for our audience you're gonna hang

02:58:32,240 --> 02:58:35,200
around in the discussions room with them

02:58:34,000 --> 02:58:37,760
for next 30 minutes

02:58:35,200 --> 02:58:40,160
so everybody out there do catch him for

02:58:37,760 --> 02:58:41,600
all the amazing work that he's doing

02:58:40,160 --> 02:58:43,359
learn from him his experiential

02:58:41,600 --> 02:58:44,800
knowledge especially about how to

02:58:43,359 --> 02:58:46,880
contribute and getting started

02:58:44,800 --> 02:58:47,920
with the open source projects with that

02:58:46,880 --> 02:58:49,359
bye vishal

02:58:47,920 --> 02:58:51,520
and we will see you in the github

02:58:49,359 --> 02:59:01,840
actions room leave you there with all

02:58:51,520 --> 02:59:01,840
our audience

02:59:02,720 --> 02:59:09,680
folks remember to share us

02:59:06,080 --> 02:59:12,880
on twitter hashtag github satellite

02:59:09,680 --> 02:59:15,920
if you're coming in some gear there

02:59:12,880 --> 02:59:18,800
i know you are in delhi and a punjabi

02:59:15,920 --> 02:59:19,200
i'm sure everybody around here wanna see

02:59:18,800 --> 02:59:22,880
some

02:59:19,200 --> 02:59:22,880
moves what say

02:59:23,439 --> 02:59:27,760
you don't have to get me started on that

02:59:25,680 --> 02:59:30,080
that's a no trigger for me

02:59:27,760 --> 02:59:30,080
yes

02:59:30,800 --> 02:59:33,760
okay let's start

02:59:34,800 --> 02:59:39,200
folks we would want to have you share

02:59:37,600 --> 02:59:41,520
your moments with us

02:59:39,200 --> 02:59:43,760
as well show us your bhangra show us

02:59:41,520 --> 02:59:44,720
your garbage show us all your moves you

02:59:43,760 --> 02:59:47,120
have there

02:59:44,720 --> 02:59:47,920
and pour the love on hashtag github

02:59:47,120 --> 02:59:50,880
satellite

02:59:47,920 --> 02:59:52,399
you can tag mohit juneja 87 or myself

02:59:50,880 --> 02:59:56,080
divya vaishnavi

02:59:52,399 --> 02:59:57,840
also remember to do the attendee survey

02:59:56,080 --> 02:59:59,439
we want to hear your feedback you'll

02:59:57,840 --> 03:00:04,080
find that linked below

02:59:59,439 --> 03:00:07,760
the video mohit i think that was oh

03:00:04,080 --> 03:00:11,040
let's come back to the session

03:00:07,760 --> 03:00:13,359
oh wow let's now you will have to pack

03:00:11,040 --> 03:00:14,080
all my chaotic energy into something

03:00:13,359 --> 03:00:16,800
called as

03:00:14,080 --> 03:00:17,920
chaos engineering yes we have a very

03:00:16,800 --> 03:00:20,560
interesting topic

03:00:17,920 --> 03:00:21,680
for all of you resilience testing with

03:00:20,560 --> 03:00:24,080
get up actions

03:00:21,680 --> 03:00:25,359
using litmus chaos you're gonna learn

03:00:24,080 --> 03:00:27,359
about the importance of

03:00:25,359 --> 03:00:30,399
chaos engineering and the basics of

03:00:27,359 --> 03:00:33,680
running chaos experiments

03:00:30,399 --> 03:00:34,560
and sharing all about that is uma

03:00:33,680 --> 03:00:38,160
mukhara

03:00:34,560 --> 03:00:40,319
he's a ceo of chaos native

03:00:38,160 --> 03:00:42,399
his current passion is obviously about

03:00:40,319 --> 03:00:44,479
bringing chaos engineering capabilities

03:00:42,399 --> 03:00:47,680
to developers at scale

03:00:44,479 --> 03:00:50,479
in the cloud native space and how

03:00:47,680 --> 03:00:52,000
to make the tool sets like litmus more

03:00:50,479 --> 03:00:54,479
robust and available

03:00:52,000 --> 03:00:56,080
to everyone remember folks to engage

03:00:54,479 --> 03:00:58,080
with us in discussions

03:00:56,080 --> 03:00:59,279
post your questions there and mohit and

03:00:58,080 --> 03:01:03,439
i will bring

03:00:59,279 --> 03:01:07,840
those in life with uma over to you uma

03:01:03,439 --> 03:01:07,840
looking forward to chaos engineering

03:01:15,120 --> 03:01:20,160
hello folks good morning excited to be

03:01:18,880 --> 03:01:23,920
here

03:01:20,160 --> 03:01:27,439
i am um today i'll be speaking about

03:01:23,920 --> 03:01:30,880
resilience testing with litmus chaos

03:01:27,439 --> 03:01:32,560
and github actions pretty exciting topic

03:01:30,880 --> 03:01:34,240
considering that we have a lot of

03:01:32,560 --> 03:01:37,439
development going on

03:01:34,240 --> 03:01:40,800
in the world today with kubernetes at

03:01:37,439 --> 03:01:43,520
mainstream so let's

03:01:40,800 --> 03:01:45,120
jump into it a little bit about myself

03:01:43,520 --> 03:01:47,439
um

03:01:45,120 --> 03:01:48,399
i've been a technology architect in the

03:01:47,439 --> 03:01:50,399
last

03:01:48,399 --> 03:01:51,760
decade i've been doing a lot of

03:01:50,399 --> 03:01:53,520
entrepreneurial stuff

03:01:51,760 --> 03:01:55,359
with the cloudbyte being my first

03:01:53,520 --> 03:01:58,399
startup and eventually

03:01:55,359 --> 03:02:00,800
moved on to kubernetes with open ebs

03:01:58,399 --> 03:02:03,439
open source project for storage

03:02:00,800 --> 03:02:05,600
and there we started uh writing chaos

03:02:03,439 --> 03:02:08,240
engineering tools for open ebs

03:02:05,600 --> 03:02:09,520
which became litmus project and

03:02:08,240 --> 03:02:13,920
eventually became

03:02:09,520 --> 03:02:17,279
a cncf project for chaos engineering

03:02:13,920 --> 03:02:18,720
and we wanted to focus more on

03:02:17,279 --> 03:02:20,960
taking this chaos engineering

03:02:18,720 --> 03:02:24,720
capabilities to larger community

03:02:20,960 --> 03:02:26,080
uh like developers sres and we spun off

03:02:24,720 --> 03:02:29,200
from my data

03:02:26,080 --> 03:02:30,479
to become kiosk native as an independent

03:02:29,200 --> 03:02:32,640
company to

03:02:30,479 --> 03:02:33,600
focus primarily on chaos engineering for

03:02:32,640 --> 03:02:36,720
kubernetes

03:02:33,600 --> 03:02:38,000
and surrounding ecosystem so what we are

03:02:36,720 --> 03:02:41,520
going to talk today

03:02:38,000 --> 03:02:42,800
is really about how we can take chaos

03:02:41,520 --> 03:02:46,000
engineering

03:02:42,800 --> 03:02:47,279
to developers using github actions uh

03:02:46,000 --> 03:02:48,960
of course you can do it in many other

03:02:47,279 --> 03:02:50,319
ways but today we're going to talk about

03:02:48,960 --> 03:02:52,640
github actions

03:02:50,319 --> 03:02:53,359
and in that process we'll touch a little

03:02:52,640 --> 03:02:55,279
bit about

03:02:53,359 --> 03:02:56,960
uh what is chaos engineering what is

03:02:55,279 --> 03:02:59,760
cloud native chaos engineering

03:02:56,960 --> 03:03:02,000
what is litmus and i'll probably show

03:02:59,760 --> 03:03:04,240
how we've been using a github actions

03:03:02,000 --> 03:03:06,800
for our own project which is litmus

03:03:04,240 --> 03:03:07,600
and how you can use litmus and github

03:03:06,800 --> 03:03:10,000
actions

03:03:07,600 --> 03:03:10,960
together to do some chaos engineering

03:03:10,000 --> 03:03:13,279
and improve

03:03:10,960 --> 03:03:15,760
the resilience of your own application

03:03:13,279 --> 03:03:18,080
or platform

03:03:15,760 --> 03:03:18,960
so let's talk a little bit about um

03:03:18,080 --> 03:03:22,080
cloud native

03:03:18,960 --> 03:03:25,520
developers right so we're all

03:03:22,080 --> 03:03:28,240
now already in the cloud native space

03:03:25,520 --> 03:03:29,040
and it's all about micro services right

03:03:28,240 --> 03:03:31,040
so what

03:03:29,040 --> 03:03:32,560
why the developer mindset has to be a

03:03:31,040 --> 03:03:34,319
little bit different about

03:03:32,560 --> 03:03:36,319
the cloud native ecosystem the

03:03:34,319 --> 03:03:39,359
development of uh

03:03:36,319 --> 03:03:40,880
application in such a system right the

03:03:39,359 --> 03:03:41,840
first primary difference is as a

03:03:40,880 --> 03:03:45,520
developer

03:03:41,840 --> 03:03:48,479
you are expected to shift things faster

03:03:45,520 --> 03:03:49,920
right and that's the whole hype about uh

03:03:48,479 --> 03:03:53,359
microservices the reason

03:03:49,920 --> 03:03:56,800
why uh kubernetes and uh containers are

03:03:53,359 --> 03:03:58,720
so famous now right and uh they are also

03:03:56,800 --> 03:04:00,479
coming much faster to you

03:03:58,720 --> 03:04:01,920
your development environment is also

03:04:00,479 --> 03:04:05,120
changing right

03:04:01,920 --> 03:04:07,200
and the pipelines are large complex

03:04:05,120 --> 03:04:09,359
and they're expected to do a lot more

03:04:07,200 --> 03:04:12,880
job than what they used to do earlier

03:04:09,359 --> 03:04:13,279
right and as developers your ecosystem

03:04:12,880 --> 03:04:15,439
is

03:04:13,279 --> 03:04:16,399
changing a lot underneath in which

03:04:15,439 --> 03:04:18,960
you're developing

03:04:16,399 --> 03:04:21,680
which you're testing and that is

03:04:18,960 --> 03:04:22,000
expected to be very sturdy otherwise uh

03:04:21,680 --> 03:04:24,000
you

03:04:22,000 --> 03:04:25,760
are you're really slowing down your

03:04:24,000 --> 03:04:27,760
ecosystem

03:04:25,760 --> 03:04:29,359
all right so i want to be able to depend

03:04:27,760 --> 03:04:31,520
on my tasks and i want to

03:04:29,359 --> 03:04:32,399
be able to depend on the underlying

03:04:31,520 --> 03:04:35,040
stack as well

03:04:32,399 --> 03:04:37,359
right so what is chaos engineering for

03:04:35,040 --> 03:04:40,000
developers right so just to summarize

03:04:37,359 --> 03:04:40,720
you've been developing your application

03:04:40,000 --> 03:04:43,359
with your

03:04:40,720 --> 03:04:44,479
ci pipelines and you used to test them

03:04:43,359 --> 03:04:47,279
but now

03:04:44,479 --> 03:04:49,279
you also have a continuous verification

03:04:47,279 --> 03:04:51,120
of your underlying infrastructure

03:04:49,279 --> 03:04:53,520
as well as your underlying micro

03:04:51,120 --> 03:04:55,600
services that you run your pipeline on

03:04:53,520 --> 03:04:57,680
so that's really chaos engineering for

03:04:55,600 --> 03:04:59,600
developers really mean it's adding chaos

03:04:57,680 --> 03:05:02,000
engineering to your ca pipelines

03:04:59,600 --> 03:05:02,720
right so what is chaos engineering we

03:05:02,000 --> 03:05:05,520
all know

03:05:02,720 --> 03:05:07,439
that it's all about reducing down times

03:05:05,520 --> 03:05:09,200
because they're very expensive

03:05:07,439 --> 03:05:10,880
you move your testing on to the right

03:05:09,200 --> 03:05:14,000
side of your devops loop

03:05:10,880 --> 03:05:16,640
don't wait test keep testing right and

03:05:14,000 --> 03:05:17,279
uh usually it's been an afterthought

03:05:16,640 --> 03:05:20,800
process

03:05:17,279 --> 03:05:24,000
you burn something you know an expensive

03:05:20,800 --> 03:05:27,359
outcome will come and as a result

03:05:24,000 --> 03:05:29,760
you are expected to um you know fix it

03:05:27,359 --> 03:05:31,439
and the rca is the practice chaos

03:05:29,760 --> 03:05:33,600
engineering right so

03:05:31,439 --> 03:05:35,200
it's been a mostly traditional one not

03:05:33,600 --> 03:05:38,640
many tools i've been there

03:05:35,200 --> 03:05:41,200
uh in a way that you can automate them

03:05:38,640 --> 03:05:42,160
at high scale and uh generally it's a

03:05:41,200 --> 03:05:44,160
reactive stuff

03:05:42,160 --> 03:05:46,080
you've not been seeing uh chaos

03:05:44,160 --> 03:05:48,960
engineering as part of ci cd

03:05:46,080 --> 03:05:49,840
uh so far that aggressively except that

03:05:48,960 --> 03:05:52,080
you know last

03:05:49,840 --> 03:05:54,000
a year or so with so much of stuff

03:05:52,080 --> 03:05:57,760
happening around cacd

03:05:54,000 --> 03:06:00,640
uh faster stuff happening in

03:05:57,760 --> 03:06:01,359
in the left shift mode of operations

03:06:00,640 --> 03:06:03,359
you're

03:06:01,359 --> 03:06:04,479
seeing chaos engineering as a way to do

03:06:03,359 --> 03:06:06,560
it and this is

03:06:04,479 --> 03:06:08,640
really propelled by the adoption of

03:06:06,560 --> 03:06:10,240
kubernetes as you see kubernetes is

03:06:08,640 --> 03:06:13,600
moving mainstream

03:06:10,240 --> 03:06:16,960
and you are seeing more dynamism

03:06:13,600 --> 03:06:18,960
and the chaos engineering has begun

03:06:16,960 --> 03:06:20,000
to catch up you know the people's

03:06:18,960 --> 03:06:21,920
mindset

03:06:20,000 --> 03:06:23,200
and we believe that uh you know it's

03:06:21,920 --> 03:06:24,960
already on the path

03:06:23,200 --> 03:06:26,880
to mainstream adoption as you would have

03:06:24,960 --> 03:06:28,479
seen many people talking about

03:06:26,880 --> 03:06:29,920
how chaos engineering is going to play

03:06:28,479 --> 03:06:31,920
our main role

03:06:29,920 --> 03:06:33,040
in this year and probably next year and

03:06:31,920 --> 03:06:35,840
years to come

03:06:33,040 --> 03:06:37,680
in that so there is going to be more of

03:06:35,840 --> 03:06:39,520
more chaos engineering in cloud native

03:06:37,680 --> 03:06:41,200
space and that's why

03:06:39,520 --> 03:06:42,560
cloud native chaos engineering is a

03:06:41,200 --> 03:06:45,200
topic you know we

03:06:42,560 --> 03:06:47,200
define certain principles right so it's

03:06:45,200 --> 03:06:49,200
got to be open source you need to have

03:06:47,200 --> 03:06:50,000
this chaos experiments pretty well

03:06:49,200 --> 03:06:52,479
organized

03:06:50,000 --> 03:06:54,880
well tested it has to have operators

03:06:52,479 --> 03:06:57,439
with open api and life cycle management

03:06:54,880 --> 03:06:58,000
it has to scale well and probably get

03:06:57,439 --> 03:07:00,960
ups is

03:06:58,000 --> 03:07:01,840
the right answer to manage chaos

03:07:00,960 --> 03:07:03,439
engineering

03:07:01,840 --> 03:07:05,120
and then when you introduce certain

03:07:03,439 --> 03:07:08,479
issues um

03:07:05,120 --> 03:07:10,880
or bugs you find them using

03:07:08,479 --> 03:07:13,680
fault injection you need to debug them

03:07:10,880 --> 03:07:16,160
so observability is a very key factor

03:07:13,680 --> 03:07:16,720
so when you do chaos engineering in this

03:07:16,160 --> 03:07:18,720
way

03:07:16,720 --> 03:07:20,000
uh you can call that as cloud native

03:07:18,720 --> 03:07:21,520
chaos engineering these are the

03:07:20,000 --> 03:07:23,120
principles that we defined couple of

03:07:21,520 --> 03:07:24,880
years ago before

03:07:23,120 --> 03:07:26,240
we started the journey of chaos

03:07:24,880 --> 03:07:28,479
engineering

03:07:26,240 --> 03:07:30,080
in late months the project which is now

03:07:28,479 --> 03:07:32,240
a cncf project

03:07:30,080 --> 03:07:34,080
is really based on these principles

03:07:32,240 --> 03:07:37,439
right so it is open source

03:07:34,080 --> 03:07:40,560
and it is having a chaos hub and

03:07:37,439 --> 03:07:42,800
a lot of operator work has gone in

03:07:40,560 --> 03:07:44,160
and githubs and open observability are

03:07:42,800 --> 03:07:47,120
just around the corner

03:07:44,160 --> 03:07:47,520
with the titans all right it's a project

03:07:47,120 --> 03:07:50,399
it's

03:07:47,520 --> 03:07:51,520
pretty famous i would say we have about

03:07:50,399 --> 03:07:53,840
close to 50 000

03:07:51,520 --> 03:07:55,520
installations all over the place that we

03:07:53,840 --> 03:07:58,240
know of there may be more

03:07:55,520 --> 03:07:59,680
uh what i'm really excited about is this

03:07:58,240 --> 03:08:01,680
project apart from

03:07:59,680 --> 03:08:03,439
the maintenance chaos native there are

03:08:01,680 --> 03:08:04,960
other people who are contributing very

03:08:03,439 --> 03:08:06,240
very actively including some of the

03:08:04,960 --> 03:08:08,399
larger companies

03:08:06,240 --> 03:08:10,000
recently red hat also became one of the

03:08:08,399 --> 03:08:11,680
main adapters

03:08:10,000 --> 03:08:14,080
and the contributions have been very

03:08:11,680 --> 03:08:16,560
very helpful right

03:08:14,080 --> 03:08:17,279
so where do we use litmus right

03:08:16,560 --> 03:08:19,040
obviously

03:08:17,279 --> 03:08:20,880
you know i just talked about the ci

03:08:19,040 --> 03:08:24,399
pipelines use case

03:08:20,880 --> 03:08:27,600
we'll talk more about it shortly

03:08:24,399 --> 03:08:31,520
and the other two areas are

03:08:27,600 --> 03:08:32,319
as an extension of ci chaos engineering

03:08:31,520 --> 03:08:35,600
is used

03:08:32,319 --> 03:08:37,200
as a trigger to do cd and then post cd

03:08:35,600 --> 03:08:39,600
as well right so i just

03:08:37,200 --> 03:08:40,399
deployed it is my application working as

03:08:39,600 --> 03:08:42,960
behaving

03:08:40,399 --> 03:08:44,720
behaving as expected and of course chaos

03:08:42,960 --> 03:08:46,000
engineering has been having the use case

03:08:44,720 --> 03:08:48,000
of

03:08:46,000 --> 03:08:49,279
randomized testing in production not

03:08:48,000 --> 03:08:51,439
reproduction right

03:08:49,279 --> 03:08:53,040
so overall litmus is a cross-cloud

03:08:51,439 --> 03:08:56,240
multi-tenant platform

03:08:53,040 --> 03:08:56,880
you will be able to see these three use

03:08:56,240 --> 03:08:59,840
cases

03:08:56,880 --> 03:09:00,640
used properly so a little bit about what

03:08:59,840 --> 03:09:02,880
is litmus

03:09:00,640 --> 03:09:04,399
as a brief you know it's a helm chart

03:09:02,880 --> 03:09:05,279
with a lot of experiments already

03:09:04,399 --> 03:09:08,720
available

03:09:05,279 --> 03:09:10,240
and you can take them as is or you can

03:09:08,720 --> 03:09:12,399
pull them into your private git

03:09:10,240 --> 03:09:14,240
repository and then create your own

03:09:12,399 --> 03:09:15,840
private chaos hub and collaborate with

03:09:14,240 --> 03:09:17,279
your own team members right so that's

03:09:15,840 --> 03:09:20,239
private key also

03:09:17,279 --> 03:09:22,239
so when you install uh litmus uh through

03:09:20,239 --> 03:09:22,960
a helm chart you get a nice portal

03:09:22,239 --> 03:09:25,439
that's where

03:09:22,960 --> 03:09:26,560
your centralized cross cloud or

03:09:25,439 --> 03:09:29,520
multi-cloud

03:09:26,560 --> 03:09:30,000
control plane for your chaos engineering

03:09:29,520 --> 03:09:33,279
and then

03:09:30,000 --> 03:09:35,120
once you set that up you can run kiosks

03:09:33,279 --> 03:09:38,080
workflows anywhere

03:09:35,120 --> 03:09:38,640
any kubernetes or non-kubernetes you can

03:09:38,080 --> 03:09:41,359
run them

03:09:38,640 --> 03:09:43,439
on cloud platforms vms bare metals and

03:09:41,359 --> 03:09:46,080
you can store all this configuration

03:09:43,439 --> 03:09:47,120
in and get centralized so that you can

03:09:46,080 --> 03:09:49,680
automate them

03:09:47,120 --> 03:09:50,880
you can put some uh you know uh or back

03:09:49,680 --> 03:09:53,279
rules around it

03:09:50,880 --> 03:09:55,600
manage the versioning of them and this

03:09:53,279 --> 03:09:58,880
works very well with any other githubs

03:09:55,600 --> 03:10:01,279
platforms such as argo cd or plus cd

03:09:58,880 --> 03:10:03,439
so in a nutshell it you you have a

03:10:01,279 --> 03:10:04,720
portal where you can manage chaos and

03:10:03,439 --> 03:10:07,040
see what's going on

03:10:04,720 --> 03:10:08,640
and you can run chaos experiments on any

03:10:07,040 --> 03:10:11,040
target either kubernetes or

03:10:08,640 --> 03:10:14,239
non-kubernetes or any public cloud

03:10:11,040 --> 03:10:15,040
um you know all all versions are

03:10:14,239 --> 03:10:17,680
supported

03:10:15,040 --> 03:10:18,160
so workflow is is really uh the next

03:10:17,680 --> 03:10:20,319
step

03:10:18,160 --> 03:10:22,399
in chaos engineering where you can

03:10:20,319 --> 03:10:24,319
create scenarios on the flow

03:10:22,399 --> 03:10:26,399
a set of experiments pulled together

03:10:24,319 --> 03:10:29,040
either in sequence or in parallel

03:10:26,399 --> 03:10:31,120
consolidate the result and then push the

03:10:29,040 --> 03:10:31,600
metrics back to a centralized monitoring

03:10:31,120 --> 03:10:33,680
place

03:10:31,600 --> 03:10:36,160
so we have integrated this with the argo

03:10:33,680 --> 03:10:38,880
workflows and it works very well

03:10:36,160 --> 03:10:40,720
right now litmus has got a lot of

03:10:38,880 --> 03:10:43,120
experiments that's already there and a

03:10:40,720 --> 03:10:46,399
lot more are coming as it is open source

03:10:43,120 --> 03:10:48,960
community continuously you know and adds

03:10:46,399 --> 03:10:51,279
this list right and then it works on

03:10:48,960 --> 03:10:53,200
non-kubernetes targets also for example

03:10:51,279 --> 03:10:56,080
all platforms or vmware

03:10:53,200 --> 03:10:56,720
openstack all such stuff so coming back

03:10:56,080 --> 03:10:58,800
to

03:10:56,720 --> 03:11:00,239
how you can use the main use case that

03:10:58,800 --> 03:11:02,720
we are talking about today

03:11:00,239 --> 03:11:03,439
how can you use chaos in ci pipelines

03:11:02,720 --> 03:11:07,439
and

03:11:03,439 --> 03:11:08,160
more more interestingly how you can use

03:11:07,439 --> 03:11:10,000
it in

03:11:08,160 --> 03:11:11,600
github actions right so what we have

03:11:10,000 --> 03:11:14,560
done is we have developed

03:11:11,600 --> 03:11:15,520
a ci library on top of litmus which you

03:11:14,560 --> 03:11:18,239
can actually

03:11:15,520 --> 03:11:19,680
use as a chaos stage all you just need

03:11:18,239 --> 03:11:22,479
to do is you know

03:11:19,680 --> 03:11:22,880
you implement a chaos action that calls

03:11:22,479 --> 03:11:24,960
this

03:11:22,880 --> 03:11:27,359
library function and then the entire

03:11:24,960 --> 03:11:30,239
litmus experiment just gets

03:11:27,359 --> 03:11:31,359
executed automatically so it's as simple

03:11:30,239 --> 03:11:34,560
as just calling this

03:11:31,359 --> 03:11:36,800
api and then you're good so

03:11:34,560 --> 03:11:38,160
very the same infrastructure can be used

03:11:36,800 --> 03:11:40,960
or is being used

03:11:38,160 --> 03:11:42,720
with other pipelines too spinnaker or

03:11:40,960 --> 03:11:46,000
captain or gitlab

03:11:42,720 --> 03:11:49,120
so let's go ahead and actually uh show

03:11:46,000 --> 03:11:52,160
uh chaos actions um in in

03:11:49,120 --> 03:11:54,160
reality right so how we've been using so

03:11:52,160 --> 03:11:55,439
when chaos when github actions was

03:11:54,160 --> 03:11:58,960
introduced we

03:11:55,439 --> 03:12:02,000
ourselves uh litmus project uh moved our

03:11:58,960 --> 03:12:04,160
ci uh from something else to github

03:12:02,000 --> 03:12:06,160
actions so we are using github actions

03:12:04,160 --> 03:12:07,760
and we're using chaos to test our own

03:12:06,160 --> 03:12:10,640
chaos engineering code

03:12:07,760 --> 03:12:11,680
uh i'll show how we've been using it but

03:12:10,640 --> 03:12:13,840
primarily

03:12:11,680 --> 03:12:15,359
with if you want to introduce github

03:12:13,840 --> 03:12:16,000
actions you just introduce a new

03:12:15,359 --> 03:12:18,960
workflow

03:12:16,000 --> 03:12:19,840
or a stage right and you call that as

03:12:18,960 --> 03:12:21,760
chaos stage

03:12:19,840 --> 03:12:23,200
and then you keep calling uh chaos

03:12:21,760 --> 03:12:25,439
experiments um

03:12:23,200 --> 03:12:26,960
or chaos actions within it right it

03:12:25,439 --> 03:12:28,960
generally includes

03:12:26,960 --> 03:12:30,880
um you call certain functions that

03:12:28,960 --> 03:12:32,960
installs litmus and at the end of the

03:12:30,880 --> 03:12:34,160
chaos stage of the workflow you clean up

03:12:32,960 --> 03:12:37,600
bitmus

03:12:34,160 --> 03:12:40,160
and in the middle you can call uh as

03:12:37,600 --> 03:12:42,880
many chaos experiments as your

03:12:40,160 --> 03:12:44,720
as your platform or application deserve

03:12:42,880 --> 03:12:47,760
you can do them in

03:12:44,720 --> 03:12:48,880
parallel or in sequence right so you can

03:12:47,760 --> 03:12:52,640
also

03:12:48,880 --> 03:12:55,040
use chaos uh actions against uh

03:12:52,640 --> 03:12:56,239
an external kubernetes cluster uh we

03:12:55,040 --> 03:12:58,000
support uh

03:12:56,239 --> 03:13:01,200
passing cube config through environment

03:12:58,000 --> 03:13:04,399
variables and the rest of it works fine

03:13:01,200 --> 03:13:07,920
as uh similar to a local pipeline so

03:13:04,399 --> 03:13:10,560
as part of your github trigger you can

03:13:07,920 --> 03:13:12,479
call entire chaos pipeline on a remote

03:13:10,560 --> 03:13:13,840
kubernetes cluster and you can test it

03:13:12,479 --> 03:13:17,359
as well

03:13:13,840 --> 03:13:21,920
right so uh let's see them in action so

03:13:17,359 --> 03:13:25,760
we can go to we have published uh

03:13:21,920 --> 03:13:28,160
chaos actions litmus care sections on

03:13:25,760 --> 03:13:29,439
on the marketplace so you can go and

03:13:28,160 --> 03:13:31,920
search for

03:13:29,439 --> 03:13:31,920
chaos

03:13:32,560 --> 03:13:40,000
so you'll see kubernetes chaos here

03:13:36,880 --> 03:13:41,120
and what we have done is we have

03:13:40,000 --> 03:13:44,720
actually created

03:13:41,120 --> 03:13:47,040
one single action and call

03:13:44,720 --> 03:13:48,560
any experiment that you wish to execute

03:13:47,040 --> 03:13:51,120
as an environment variable

03:13:48,560 --> 03:13:53,120
so it's it's pretty easy you don't have

03:13:51,120 --> 03:13:54,640
to learn a lot of actions it's just one

03:13:53,120 --> 03:13:55,200
action right now we're trying to

03:13:54,640 --> 03:13:58,479
implement

03:13:55,200 --> 03:14:02,479
more uh probably workflows um

03:13:58,479 --> 03:14:03,279
so you can just uh use this one single

03:14:02,479 --> 03:14:05,920
action

03:14:03,279 --> 03:14:07,760
and then it really uh includes three

03:14:05,920 --> 03:14:11,200
steps as i said first

03:14:07,760 --> 03:14:14,000
you include a script to

03:14:11,200 --> 03:14:14,319
deploy it must and then later to clean

03:14:14,000 --> 03:14:16,479
it

03:14:14,319 --> 03:14:18,239
in the middle you need in the middle you

03:14:16,479 --> 03:14:20,640
call this

03:14:18,239 --> 03:14:21,520
actions and then call what is the

03:14:20,640 --> 03:14:23,359
experiment or

03:14:21,520 --> 03:14:25,359
where the target is the application

03:14:23,359 --> 03:14:27,200
through all environmental variables

03:14:25,359 --> 03:14:29,680
right and these are the environmental

03:14:27,200 --> 03:14:32,000
variables as as you keep tuning it

03:14:29,680 --> 03:14:33,520
you are in control of what experiment

03:14:32,000 --> 03:14:36,399
should be executed against

03:14:33,520 --> 03:14:37,520
which target right and uh i have a

03:14:36,399 --> 03:14:40,319
sample project

03:14:37,520 --> 03:14:40,880
that i'm going to show right now it's a

03:14:40,319 --> 03:14:44,319
simple

03:14:40,880 --> 03:14:47,680
uh project where

03:14:44,319 --> 03:14:50,800
we're going to have a chaos action

03:14:47,680 --> 03:14:53,840
so let me go here and explain how this

03:14:50,800 --> 03:14:56,880
workflow is uh written

03:14:53,840 --> 03:14:58,160
so this is a demo chaos action and uh it

03:14:56,880 --> 03:15:01,040
uses uh

03:14:58,160 --> 03:15:02,160
chaos uh i mean the github actions all

03:15:01,040 --> 03:15:04,960
we're going to do is

03:15:02,160 --> 03:15:06,080
set up a kubernetes cluster kind cluster

03:15:04,960 --> 03:15:10,319
on the fly

03:15:06,080 --> 03:15:12,239
and install uh nginx that's one stage so

03:15:10,319 --> 03:15:13,439
then i'm going to introduce a chaos

03:15:12,239 --> 03:15:16,960
stage right

03:15:13,439 --> 03:15:17,840
so it's all about setup litmus it's as

03:15:16,960 --> 03:15:20,640
simple as that

03:15:17,840 --> 03:15:21,359
and then run a couple of experiments uh

03:15:20,640 --> 03:15:24,160
i'm just

03:15:21,359 --> 03:15:25,760
calling this actions chaos actions with

03:15:24,160 --> 03:15:28,399
this environment variables

03:15:25,760 --> 03:15:30,399
you can see chaos experiment is modulate

03:15:28,399 --> 03:15:33,840
and the same action i call again

03:15:30,399 --> 03:15:34,720
with a different experiment right and uh

03:15:33,840 --> 03:15:36,560
you're all set

03:15:34,720 --> 03:15:38,640
then of course i'm going to delete uh

03:15:36,560 --> 03:15:39,600
litmus uh uninstall it once at the end

03:15:38,640 --> 03:15:42,960
of it

03:15:39,600 --> 03:15:46,399
so you go and see this in action

03:15:42,960 --> 03:15:48,080
uh let me just go run it just for the

03:15:46,399 --> 03:15:50,319
sake of it

03:15:48,080 --> 03:15:51,359
and while it gets launched it might take

03:15:50,319 --> 03:15:55,200
a minute i can

03:15:51,359 --> 03:15:58,399
go and see uh show you how this was done

03:15:55,200 --> 03:16:01,200
uh earlier right so it's really about

03:15:58,399 --> 03:16:02,080
setting up big mess and running couple

03:16:01,200 --> 03:16:04,319
of experiments

03:16:02,080 --> 03:16:05,920
and uninstalling it rest of it is your

03:16:04,319 --> 03:16:08,800
own action pipeline

03:16:05,920 --> 03:16:10,319
right so if you go and uh see this

03:16:08,800 --> 03:16:13,040
modulate experiment

03:16:10,319 --> 03:16:14,160
all you called is just one line but we

03:16:13,040 --> 03:16:16,479
do the heavy lifting

03:16:14,160 --> 03:16:17,279
underneath and the developer should not

03:16:16,479 --> 03:16:19,840
be

03:16:17,279 --> 03:16:21,600
worried about uh you know what goes on

03:16:19,840 --> 03:16:22,239
underneath but you can generally go and

03:16:21,600 --> 03:16:24,399
see

03:16:22,239 --> 03:16:25,840
you know what goes on and uh you know

03:16:24,399 --> 03:16:27,760
what the results

03:16:25,840 --> 03:16:29,040
of course you can integrate this with a

03:16:27,760 --> 03:16:32,720
lot of monitoring tools

03:16:29,040 --> 03:16:35,600
which are not talking about it but

03:16:32,720 --> 03:16:38,479
what it really is is simple way to

03:16:35,600 --> 03:16:41,120
execute chaos into your pipelines right

03:16:38,479 --> 03:16:42,239
and uh this is our repository where

03:16:41,120 --> 03:16:45,840
we've been using

03:16:42,239 --> 03:16:48,960
uh github actions as a way

03:16:45,840 --> 03:16:51,439
of testing our own uh merged code

03:16:48,960 --> 03:16:52,720
and as you can see that and we got your

03:16:51,439 --> 03:16:55,200
e2e pipelines

03:16:52,720 --> 03:16:56,800
and that's where we are running our own

03:16:55,200 --> 03:16:59,920
um

03:16:56,800 --> 03:17:03,040
chaos actions right so let's go and

03:16:59,920 --> 03:17:05,120
see one uh run pipeline

03:17:03,040 --> 03:17:07,040
so you will see some a lot of generic

03:17:05,120 --> 03:17:09,520
tests this generic tests

03:17:07,040 --> 03:17:11,520
are you know set up late pass and for

03:17:09,520 --> 03:17:13,920
every code much that we do

03:17:11,520 --> 03:17:14,960
we go on test if our own experiments are

03:17:13,920 --> 03:17:16,880
working or not

03:17:14,960 --> 03:17:19,359
so if you are looking at how to execute

03:17:16,880 --> 03:17:21,760
a particular experiment you can go to

03:17:19,359 --> 03:17:24,399
our own pipelines and see how we are

03:17:21,760 --> 03:17:26,479
using chaos actions and github

03:17:24,399 --> 03:17:28,160
kiosks experiments and github actions

03:17:26,479 --> 03:17:32,000
you can just take that as an example

03:17:28,160 --> 03:17:34,560
and then and do them so with that um

03:17:32,000 --> 03:17:35,680
i think you know i would like to uh take

03:17:34,560 --> 03:17:39,040
some questions

03:17:35,680 --> 03:17:41,680
uh if there are any right so

03:17:39,040 --> 03:17:42,239
in in summary it's it's really a very

03:17:41,680 --> 03:17:46,080
very

03:17:42,239 --> 03:17:48,479
uh straightforward way of using

03:17:46,080 --> 03:17:49,200
github actions and litmus chaos we try

03:17:48,479 --> 03:17:55,840
to make it

03:17:49,200 --> 03:17:55,840
as simple as possible

03:18:00,160 --> 03:18:05,279
much appreciated for such a wonderful

03:18:02,880 --> 03:18:07,680
session

03:18:05,279 --> 03:18:08,720
and a huge shout out to the wonderful

03:18:07,680 --> 03:18:11,200
and wacky

03:18:08,720 --> 03:18:12,000
western india developer community and

03:18:11,200 --> 03:18:15,359
with that let's

03:18:12,000 --> 03:18:19,359
jump into the q a diva

03:18:15,359 --> 03:18:22,479
okay the question for you uma is

03:18:19,359 --> 03:18:25,680
our devil to use chaos engineering or is

03:18:22,479 --> 03:18:28,160
it mainly for operations

03:18:25,680 --> 03:18:28,880
it's been for operations traditionally

03:18:28,160 --> 03:18:31,200
but that's

03:18:28,880 --> 03:18:32,080
we are in the new world where cloud

03:18:31,200 --> 03:18:35,439
native

03:18:32,080 --> 03:18:38,239
ecosystem is changing the way we do id

03:18:35,439 --> 03:18:39,439
right so chaos engineering in my opinion

03:18:38,239 --> 03:18:41,920
is going to be

03:18:39,439 --> 03:18:43,359
a common place in developer's tool set

03:18:41,920 --> 03:18:45,200
right so that's what we are

03:18:43,359 --> 03:18:46,960
set out to do and we are at the

03:18:45,200 --> 03:18:49,279
beginning of that cycle

03:18:46,960 --> 03:18:50,000
right so first of all you need to create

03:18:49,279 --> 03:18:52,399
a good tool

03:18:50,000 --> 03:18:53,120
set an open source tool set that's easy

03:18:52,399 --> 03:18:56,080
to use

03:18:53,120 --> 03:18:56,880
and it makes a lot of sense uh by using

03:18:56,080 --> 03:18:58,800
it

03:18:56,880 --> 03:19:00,160
and if it produces results developers

03:18:58,800 --> 03:19:02,160
will take take it

03:19:00,160 --> 03:19:05,279
and as i discussed in this session we

03:19:02,160 --> 03:19:07,840
expect developers to start looking at

03:19:05,279 --> 03:19:09,120
the test uh not only negative tests but

03:19:07,840 --> 03:19:11,600
there are chaos tests

03:19:09,120 --> 03:19:12,960
outside your own code that your code

03:19:11,600 --> 03:19:14,800
should really depend on

03:19:12,960 --> 03:19:16,640
so it's really going to be for

03:19:14,800 --> 03:19:19,120
developers

03:19:16,640 --> 03:19:20,560
already now in a small percentage but

03:19:19,120 --> 03:19:21,840
there's going to be more percentage of

03:19:20,560 --> 03:19:24,880
developers using

03:19:21,840 --> 03:19:24,880
chaos very soon

03:19:25,120 --> 03:19:28,160
wow that's going to change a lot of

03:19:26,479 --> 03:19:30,560
things and thanks a lot for

03:19:28,160 --> 03:19:31,200
kind of enlightening us on to that next

03:19:30,560 --> 03:19:33,920
one up

03:19:31,200 --> 03:19:34,800
uh we have for you uh um is what are the

03:19:33,920 --> 03:19:37,760
most common

03:19:34,800 --> 03:19:40,880
chaos actions do you see uh getting used

03:19:37,760 --> 03:19:43,600
by the users as of now

03:19:40,880 --> 03:19:44,479
right um the scales actions a lot of

03:19:43,600 --> 03:19:47,040
them are there

03:19:44,479 --> 03:19:49,279
i mean chaos experiments there is only

03:19:47,040 --> 03:19:50,399
one chaos action that we have written

03:19:49,279 --> 03:19:52,800
right now

03:19:50,399 --> 03:19:54,640
using which you can introduce whatever

03:19:52,800 --> 03:19:57,200
the chaos experiment that you want

03:19:54,640 --> 03:19:58,160
using the environmental variable right

03:19:57,200 --> 03:20:00,160
and usually

03:19:58,160 --> 03:20:02,319
either developers or whoever is trying

03:20:00,160 --> 03:20:04,800
to do chaos and trading in the beginning

03:20:02,319 --> 03:20:06,399
they would want to take the most simple

03:20:04,800 --> 03:20:09,680
chaos experiments right

03:20:06,399 --> 03:20:11,600
so port eviction and port delete

03:20:09,680 --> 03:20:14,000
is is a very common thing right

03:20:11,600 --> 03:20:16,399
kubernetes can kick any part out

03:20:14,000 --> 03:20:18,160
based on the resource constraints so you

03:20:16,399 --> 03:20:19,920
it's safe to do a port delay

03:20:18,160 --> 03:20:22,160
right because kubernetes is mainstreamed

03:20:19,920 --> 03:20:24,880
right now so you go and actually

03:20:22,160 --> 03:20:27,920
use such chaos experiments to learn the

03:20:24,880 --> 03:20:28,880
benefits of chaos and how to use chaos

03:20:27,920 --> 03:20:32,000
and

03:20:28,880 --> 03:20:33,520
you generally people use port delay to

03:20:32,000 --> 03:20:35,120
cpu hog memory hog

03:20:33,520 --> 03:20:36,800
because you know these are less

03:20:35,120 --> 03:20:39,840
intrusive and

03:20:36,800 --> 03:20:43,040
you learn but generally what we also see

03:20:39,840 --> 03:20:43,520
is people go all the way to the extent

03:20:43,040 --> 03:20:45,760
of

03:20:43,520 --> 03:20:48,160
breaking some infrastructure for example

03:20:45,760 --> 03:20:51,520
a disk fell right or this delay

03:20:48,160 --> 03:20:54,399
or network loss network uh

03:20:51,520 --> 03:20:56,000
delay all this kind of thing one of the

03:20:54,399 --> 03:20:58,800
other common things that we have seen

03:20:56,000 --> 03:20:59,120
is what happens if my kubernetes itself

03:20:58,800 --> 03:21:02,399
uh

03:20:59,120 --> 03:21:04,479
gets stuck right so how do i simulate

03:21:02,399 --> 03:21:06,160
the scenario of something wrong going

03:21:04,479 --> 03:21:09,600
into kubernetes itself

03:21:06,160 --> 03:21:11,760
and you take a cue blade out right so we

03:21:09,600 --> 03:21:14,960
have a cubelet kill experiment

03:21:11,760 --> 03:21:18,080
uh that's where people find oh okay

03:21:14,960 --> 03:21:20,399
so it's pretty easy to test my code

03:21:18,080 --> 03:21:21,120
uh when kubernetes under trouble you

03:21:20,399 --> 03:21:23,439
just call

03:21:21,120 --> 03:21:24,960
a chaos action with cubelet down and

03:21:23,439 --> 03:21:26,160
within minutes you'll be able to

03:21:24,960 --> 03:21:28,720
actually test

03:21:26,160 --> 03:21:32,560
uh whether your code is able to sustain

03:21:28,720 --> 03:21:32,560
your service is able to sustain or not

03:21:33,840 --> 03:21:37,120
that's that's insightful thank you so

03:21:36,160 --> 03:21:39,600
much

03:21:37,120 --> 03:21:41,439
uh what more can we expect in the future

03:21:39,600 --> 03:21:43,840
with github actions from kiosks

03:21:41,439 --> 03:21:46,800
perspective

03:21:43,840 --> 03:21:47,359
right um our first goal is really you

03:21:46,800 --> 03:21:50,160
know

03:21:47,359 --> 03:21:51,279
because we like github actions um

03:21:50,160 --> 03:21:53,279
because we are on github

03:21:51,279 --> 03:21:54,399
right so we've been using other ci

03:21:53,279 --> 03:21:56,640
platforms

03:21:54,399 --> 03:21:57,600
and uh let's actually move on to github

03:21:56,640 --> 03:22:00,960
actions so

03:21:57,600 --> 03:22:03,920
we wrote what we needed uh to begin with

03:22:00,960 --> 03:22:05,840
and recently we have added a lot of

03:22:03,920 --> 03:22:09,279
capabilities

03:22:05,840 --> 03:22:11,760
into chaos tool uh litmus

03:22:09,279 --> 03:22:12,640
to make it uh useful for enterprise

03:22:11,760 --> 03:22:16,319
users

03:22:12,640 --> 03:22:19,359
who use i know large deployments and all

03:22:16,319 --> 03:22:20,640
so as part of that we created chaos

03:22:19,359 --> 03:22:23,279
workflows

03:22:20,640 --> 03:22:25,040
right which are nothing but a set of

03:22:23,279 --> 03:22:27,200
experiments you can put together

03:22:25,040 --> 03:22:28,399
you can stitch together to create a

03:22:27,200 --> 03:22:30,560
chaos scenario

03:22:28,399 --> 03:22:31,520
right usually the problems happen not

03:22:30,560 --> 03:22:33,920
because the small

03:22:31,520 --> 03:22:34,880
fault has happened but because you know

03:22:33,920 --> 03:22:37,279
something

03:22:34,880 --> 03:22:39,520
you know a dual failure or a triple

03:22:37,279 --> 03:22:41,200
failure happened in an unexpected way

03:22:39,520 --> 03:22:43,359
you wanted to simulate all this stuff

03:22:41,200 --> 03:22:46,160
and that's what a chaos workflow can do

03:22:43,359 --> 03:22:46,880
and you can automate that also so can i

03:22:46,160 --> 03:22:49,120
introduce

03:22:46,880 --> 03:22:50,479
chaos workflows through github actions

03:22:49,120 --> 03:22:51,040
right of course it's going to be a

03:22:50,479 --> 03:22:54,399
little bit

03:22:51,040 --> 03:22:57,520
more um difficult

03:22:54,399 --> 03:23:00,000
than or cumbersome than a simple

03:22:57,520 --> 03:23:00,560
chaos action of an experiment but that's

03:23:00,000 --> 03:23:03,680
what

03:23:00,560 --> 03:23:07,680
we are trying to look at developing

03:23:03,680 --> 03:23:10,319
bring in uh chaos workflows uh as a way

03:23:07,680 --> 03:23:12,160
uh to test uh complex scenarios in your

03:23:10,319 --> 03:23:14,880
pipelines using github actions

03:23:12,160 --> 03:23:15,520
so we might write uh one more chaos

03:23:14,880 --> 03:23:19,279
action

03:23:15,520 --> 03:23:21,920
called chaos workflow and then

03:23:19,279 --> 03:23:23,040
we are also looking forward to integrate

03:23:21,920 --> 03:23:24,960
some analytics

03:23:23,040 --> 03:23:27,040
you know if github is providing some

03:23:24,960 --> 03:23:28,160
analytics or in general prometheus is a

03:23:27,040 --> 03:23:30,640
way

03:23:28,160 --> 03:23:31,600
to observe the analytics of the ci

03:23:30,640 --> 03:23:34,479
platforms as well

03:23:31,600 --> 03:23:36,239
right so uh the observability and

03:23:34,479 --> 03:23:39,040
workflows are the next things that

03:23:36,239 --> 03:23:39,040
we're trying to do

03:23:40,479 --> 03:23:44,080
that's great and uh we will just take

03:23:42,960 --> 03:23:46,479
one more before

03:23:44,080 --> 03:23:48,160
we let you go to github discussions and

03:23:46,479 --> 03:23:49,920
this is again a question which everybody

03:23:48,160 --> 03:23:53,840
got asked what is your favorite

03:23:49,920 --> 03:23:53,840
github feature that you use the most

03:23:54,239 --> 03:23:57,279
um i know a lot of people would like to

03:23:56,160 --> 03:23:59,600
say

03:23:57,279 --> 03:24:01,279
uh you know the latest feature i'm

03:23:59,600 --> 03:24:02,479
pretty excited of course github actions

03:24:01,279 --> 03:24:05,920
we like them

03:24:02,479 --> 03:24:08,960
but you know as an open source um

03:24:05,920 --> 03:24:11,600
maintainer i want my community uh

03:24:08,960 --> 03:24:12,160
to be working very well on github right

03:24:11,600 --> 03:24:15,680
so

03:24:12,160 --> 03:24:17,920
the age-old feature github issues right

03:24:15,680 --> 03:24:19,760
we've been using everybody uses github

03:24:17,920 --> 03:24:20,319
issues as a way to ask questions as a

03:24:19,760 --> 03:24:22,239
way to

03:24:20,319 --> 03:24:23,920
go and find answers right you ask a

03:24:22,239 --> 03:24:26,080
question you answer

03:24:23,920 --> 03:24:27,359
and then a year down the line somebody

03:24:26,080 --> 03:24:29,920
faces the same question

03:24:27,359 --> 03:24:31,120
you know they're all google indexed and

03:24:29,920 --> 03:24:33,040
you search on google

03:24:31,120 --> 03:24:34,399
it takes you to github issue thread

03:24:33,040 --> 03:24:36,640
right so

03:24:34,399 --> 03:24:37,840
i don't know it's a simple feature no

03:24:36,640 --> 03:24:40,399
complexity but

03:24:37,840 --> 03:24:41,680
in terms of the productivity that we get

03:24:40,399 --> 03:24:44,800
out of github issues

03:24:41,680 --> 03:24:46,479
the entire community gets is really

03:24:44,800 --> 03:24:49,520
awesome

03:24:46,479 --> 03:24:52,000
oh yes the collaboration it enhances

03:24:49,520 --> 03:24:53,680
is really really awesome thank you for

03:24:52,000 --> 03:24:56,000
calling that out

03:24:53,680 --> 03:24:57,120
uma and thank you again for joining us

03:24:56,000 --> 03:24:59,439
folks remember

03:24:57,120 --> 03:25:01,200
to connect with uma on discussions and

03:24:59,439 --> 03:25:02,160
take the chaos engineering discussion

03:25:01,200 --> 03:25:04,880
forward

03:25:02,160 --> 03:25:06,640
thank you again for joining thank you

03:25:04,880 --> 03:25:09,840
for inviting me great to be here nice

03:25:06,640 --> 03:25:09,840
talking to you guys bye

03:25:21,120 --> 03:25:24,399
i see the via where you're getting at

03:25:23,600 --> 03:25:27,920
hold on

03:25:24,399 --> 03:25:30,479
i know you are smart so now

03:25:27,920 --> 03:25:31,920
let's celebrate a home for all

03:25:30,479 --> 03:25:35,040
developers that is

03:25:31,920 --> 03:25:37,439
github and celebrating

03:25:35,040 --> 03:25:39,680
indian developer community actually the

03:25:37,439 --> 03:25:42,960
world's developer community

03:25:39,680 --> 03:25:46,319
on github so everybody join us

03:25:42,960 --> 03:25:48,319
and let's get this celebration going

03:25:46,319 --> 03:25:51,840
i'm a little sad we're coming to the end

03:25:48,319 --> 03:25:51,840
of session one

03:25:52,880 --> 03:25:56,640
yes we have reached our final session of

03:25:55,520 --> 03:25:59,760
day one and

03:25:56,640 --> 03:26:02,800
what a energy pack day right and

03:25:59,760 --> 03:26:06,640
for this session we have a very special

03:26:02,800 --> 03:26:08,720
guest one and only martin woodward

03:26:06,640 --> 03:26:10,800
the man who needs no introduction

03:26:08,720 --> 03:26:12,960
director of developer relations

03:26:10,800 --> 03:26:14,640
at github martin hosted the enterprise

03:26:12,960 --> 03:26:17,359
channel at universe 2020

03:26:14,640 --> 03:26:18,000
and it was rad and energetic and we all

03:26:17,359 --> 03:26:20,319
look up to him

03:26:18,000 --> 03:26:21,200
as a role model on how to really bring

03:26:20,319 --> 03:26:23,200
that energy

03:26:21,200 --> 03:26:25,439
right to our community martin will be

03:26:23,200 --> 03:26:28,560
talking about the stars program

03:26:25,439 --> 03:26:33,040
meetups the release radar and a lot more

03:26:28,560 --> 03:26:38,319
that community loves hearing about

03:26:33,040 --> 03:26:38,319
you know just take it away i'm sure

03:26:38,880 --> 03:26:42,080
you know what i'm sure people want to

03:26:41,120 --> 03:26:45,680
create their

03:26:42,080 --> 03:26:49,200
own octocats as well like we have

03:26:45,680 --> 03:26:49,200
mona so uh

03:26:49,520 --> 03:26:53,520
so uh folks go ahead you can go to

03:26:52,200 --> 03:26:55,840
october

03:26:53,520 --> 03:26:56,880
and create your own actor cat you can

03:26:55,840 --> 03:26:59,600
actually

03:26:56,880 --> 03:27:00,239
order for swag whether it's t-shirts

03:26:59,600 --> 03:27:02,640
caps

03:27:00,239 --> 03:27:03,520
mugs you can use that as well so go to

03:27:02,640 --> 03:27:06,399
hashtag

03:27:03,520 --> 03:27:07,040
github satellite and do that we're also

03:27:06,399 --> 03:27:09,040
hearing

03:27:07,040 --> 03:27:10,880
a lot from all of you we want to hear

03:27:09,040 --> 03:27:14,000
more so create more noise

03:27:10,880 --> 03:27:16,239
i see roshan kumar patron saying he's

03:27:14,000 --> 03:27:17,120
enjoying all the sessions that are

03:27:16,239 --> 03:27:20,160
happening

03:27:17,120 --> 03:27:23,439
uh man of modi talking about

03:27:20,160 --> 03:27:27,359
the india being a big potential

03:27:23,439 --> 03:27:30,560
contributor so i'm just enjoying it

03:27:27,359 --> 03:27:33,040
what was your favorite part

03:27:30,560 --> 03:27:35,439
oh my favorite part is something that

03:27:33,040 --> 03:27:38,479
i'm not sure if everybody has noticed

03:27:35,439 --> 03:27:39,680
on our new profile page on twitter you

03:27:38,479 --> 03:27:43,200
check it out

03:27:39,680 --> 03:27:46,160
because we have got our very own yoga

03:27:43,200 --> 03:27:46,800
cat the one thing that really unites

03:27:46,160 --> 03:27:50,160
india

03:27:46,800 --> 03:27:50,720
is nothing but yoga and we have your

03:27:50,160 --> 03:27:53,840
favorite

03:27:50,720 --> 03:27:56,800
octocat in a new avatar go check out

03:27:53,840 --> 03:27:57,279
our new face on twitter and just look

03:27:56,800 --> 03:28:00,000
out

03:27:57,279 --> 03:28:00,720
how the new yokato cat looks to you and

03:28:00,000 --> 03:28:03,439
we're gonna be

03:28:00,720 --> 03:28:05,040
all ears listen to your comments hashtag

03:28:03,439 --> 03:28:08,080
get up satellite

03:28:05,040 --> 03:28:09,760
tweet us on github india and we're gonna

03:28:08,080 --> 03:28:10,960
listen to each and every comment that

03:28:09,760 --> 03:28:12,399
you're gonna share with us

03:28:10,960 --> 03:28:14,880
and if you want to hit me and then we

03:28:12,399 --> 03:28:18,479
have directly absolutely go ahead

03:28:14,880 --> 03:28:21,600
at divya version and move it to 87

03:28:18,479 --> 03:28:23,279
you got all of us for you answering

03:28:21,600 --> 03:28:26,239
everything that you can ask there

03:28:23,279 --> 03:28:26,239
waiting for your comments

03:28:26,960 --> 03:28:33,760
wow i i love the yoga cat

03:28:30,479 --> 03:28:36,000
like it has that zen like feeling to it

03:28:33,760 --> 03:28:39,040
right

03:28:36,000 --> 03:28:39,040
have you created your

03:28:39,520 --> 03:28:43,359
a bit more those of you who are thinking

03:28:41,840 --> 03:28:45,680
what the yukata cat is doing

03:28:43,359 --> 03:28:46,960
actually you get a cat is sitting in a

03:28:45,680 --> 03:28:50,840
yoga-like position

03:28:46,960 --> 03:28:53,840
giving you a message to keep calm and

03:28:50,840 --> 03:28:53,840
cold

03:28:54,080 --> 03:28:59,600
oh yes have you created your own octa

03:28:57,040 --> 03:28:59,600
cat yet

03:29:01,840 --> 03:29:05,600
i am gonna create one for sure now but

03:29:03,920 --> 03:29:07,120
this one is already my favorite

03:29:05,600 --> 03:29:09,359
there have been a lot i've played around

03:29:07,120 --> 03:29:11,520
with but nothing like this one

03:29:09,359 --> 03:29:12,640
has stolen my heart away i'm gonna keep

03:29:11,520 --> 03:29:14,319
a big print of it

03:29:12,640 --> 03:29:16,319
next time up here online right there in

03:29:14,319 --> 03:29:19,600
my backdrop

03:29:16,319 --> 03:29:22,479
yeah i'm gonna do that too

03:29:19,600 --> 03:29:23,600
i i've created my own octa cat as well

03:29:22,479 --> 03:29:27,600
uh i called it

03:29:23,600 --> 03:29:31,279
the watercat uh which has uh

03:29:27,600 --> 03:29:34,000
wow yes i think that's a great idea

03:29:31,279 --> 03:29:34,960
i'm gonna go get some swag and get it on

03:29:34,000 --> 03:29:38,080
my background

03:29:34,960 --> 03:29:40,160
next time when we see you

03:29:38,080 --> 03:29:41,120
talking of backgrounds divya your

03:29:40,160 --> 03:29:43,600
background looks

03:29:41,120 --> 03:29:45,200
so colorful and i'm really excited to

03:29:43,600 --> 03:29:48,720
know what it's really all about

03:29:45,200 --> 03:29:52,479
tell us more oh yes so all of these

03:29:48,720 --> 03:29:55,680
are uh paintings done by my daughter

03:29:52,479 --> 03:29:59,920
um she's really good so yes i

03:29:55,680 --> 03:30:05,120
i grabbed her room for for today

03:29:59,920 --> 03:30:05,120
wow you got one lucky child artist

03:30:05,359 --> 03:30:09,840
wow that's so awesome so nice and it's

03:30:08,000 --> 03:30:13,760
looking so vibrant and so colorful

03:30:09,840 --> 03:30:13,760
i wish i could win or steal one of these

03:30:13,920 --> 03:30:18,560
i can gift you one okay so let's jump

03:30:17,040 --> 03:30:31,840
into the closing session

03:30:18,560 --> 03:30:31,840
with martin

03:31:39,760 --> 03:31:41,840
bye

03:32:30,880 --> 03:32:35,439
mohit you wanna do some martin moves

03:32:33,760 --> 03:32:38,080
there

03:32:35,439 --> 03:32:38,479
absolutely absolutely i can't forget

03:32:38,080 --> 03:32:50,880
them

03:32:38,479 --> 03:32:53,120
so why don't we bring it back

03:32:50,880 --> 03:32:53,920
oh i'm loving this doesn't it bring back

03:32:53,120 --> 03:32:57,279
the good

03:32:53,920 --> 03:33:00,080
memories from universe for you oh yes

03:32:57,279 --> 03:33:00,720
it was so much fun three days of awesome

03:33:00,080 --> 03:33:05,120
fun

03:33:00,720 --> 03:33:07,760
and i'm enjoying satellite as well

03:33:05,120 --> 03:33:10,160
wow this has been so so energetic and i

03:33:07,760 --> 03:33:11,279
see lot and lot of comments about yoga

03:33:10,160 --> 03:33:13,600
to cat right now

03:33:11,279 --> 03:33:15,439
i hear anan saying that yoga got

03:33:13,600 --> 03:33:19,120
launched github's very own

03:33:15,439 --> 03:33:20,640
octocat is awesome keep calm and good

03:33:19,120 --> 03:33:22,479
that's gonna be the new t-shirt client

03:33:20,640 --> 03:33:27,200
i'm sure how about yes

03:33:22,479 --> 03:33:29,760
are you gonna get it printed diva oh yes

03:33:27,200 --> 03:33:31,640
i or maybe you should you should gift me

03:33:29,760 --> 03:33:34,239
one

03:33:31,640 --> 03:33:36,399
absolutely i see you're winning a lot of

03:33:34,239 --> 03:33:39,920
gifts today huh

03:33:36,399 --> 03:33:42,880
yes i am and totally totally

03:33:39,920 --> 03:33:42,880
enjoying this

03:33:43,760 --> 03:33:49,200
let's get going for martin's closing

03:33:46,800 --> 03:33:49,200
session

03:33:57,040 --> 03:34:00,319
hey everybody thanks for that fantastic

03:33:58,960 --> 03:34:01,840
welcome uh yeah

03:34:00,319 --> 03:34:03,439
and thanks everybody as i said i'm

03:34:01,840 --> 03:34:04,880
martin woodward i'm the director of job

03:34:03,439 --> 03:34:06,720
operations here at gil

03:34:04,880 --> 03:34:07,920
and it's my absolute pleasure to be able

03:34:06,720 --> 03:34:10,800
to wrap up what's been

03:34:07,920 --> 03:34:11,120
a truly fantastic day for us all i've

03:34:10,800 --> 03:34:12,880
been

03:34:11,120 --> 03:34:14,479
in since about uh four o'clock this

03:34:12,880 --> 03:34:16,239
morning i'm based in the uk here it's

03:34:14,479 --> 03:34:17,920
now seven a.m live

03:34:16,239 --> 03:34:19,920
and so i want to say thank you to

03:34:17,920 --> 03:34:21,600
everybody uh you know thanks to the

03:34:19,920 --> 03:34:22,720
wonderful host for keeping us company

03:34:21,600 --> 03:34:24,640
during the day today

03:34:22,720 --> 03:34:26,880
to aniston coron on the open source

03:34:24,640 --> 03:34:28,479
channel and then uh divio mohit over on

03:34:26,880 --> 03:34:30,479
the devops channel rocking some

03:34:28,479 --> 03:34:31,120
fantastic headwear i have to say sorry

03:34:30,479 --> 03:34:32,479
my uh

03:34:31,120 --> 03:34:34,319
my head's looking particularly bare

03:34:32,479 --> 03:34:35,359
today but there we go and thanks for

03:34:34,319 --> 03:34:37,279
joining us you know

03:34:35,359 --> 03:34:39,520
we really really really do appreciate

03:34:37,279 --> 03:34:40,720
the time and also the welcome you've

03:34:39,520 --> 03:34:43,279
given github here in

03:34:40,720 --> 03:34:44,960
india um when we opened the office just

03:34:43,279 --> 03:34:46,880
over a year ago you know we really

03:34:44,960 --> 03:34:48,239
really felt the the love of the india

03:34:46,880 --> 03:34:50,560
developer community

03:34:48,239 --> 03:34:52,560
and that's only grown as we've been

03:34:50,560 --> 03:34:53,200
growing our engineering team in india as

03:34:52,560 --> 03:34:54,880
well

03:34:53,200 --> 03:34:56,479
and that's you know despite everything

03:34:54,880 --> 03:34:56,960
that's been going on over the past 12

03:34:56,479 --> 03:34:58,640
months

03:34:56,960 --> 03:35:00,239
the challenges we've all had to face

03:34:58,640 --> 03:35:00,720
getting used to our new ways of working

03:35:00,239 --> 03:35:02,239
so

03:35:00,720 --> 03:35:03,840
thank you very much for joining us

03:35:02,239 --> 03:35:05,760
online and also

03:35:03,840 --> 03:35:07,359
thank you for sharing your octocats with

03:35:05,760 --> 03:35:09,279
us if you've been people been heading

03:35:07,359 --> 03:35:11,200
over to myoctocat.com

03:35:09,279 --> 03:35:12,560
sharing their octocats on social media

03:35:11,200 --> 03:35:13,120
so thanks for doing that i brought some

03:35:12,560 --> 03:35:14,560
of them in

03:35:13,120 --> 03:35:16,399
here live that got shared in the past

03:35:14,560 --> 03:35:18,319
couple of hours and thanks for joining

03:35:16,399 --> 03:35:19,520
us over in discussions i was just over

03:35:18,319 --> 03:35:21,279
in there this morning

03:35:19,520 --> 03:35:22,720
um some great questions some great

03:35:21,279 --> 03:35:24,479
discussions happening and people just

03:35:22,720 --> 03:35:25,120
saying hi and introducing themselves as

03:35:24,479 --> 03:35:28,080
well

03:35:25,120 --> 03:35:29,520
so thanks to you know this great and

03:35:28,080 --> 03:35:30,399
being part of this great github

03:35:29,520 --> 03:35:32,720
community it's

03:35:30,399 --> 03:35:33,920
really it's been a real pleasure today

03:35:32,720 --> 03:35:36,399
the github india

03:35:33,920 --> 03:35:37,600
um community has really been growing

03:35:36,399 --> 03:35:41,120
over the past year

03:35:37,600 --> 03:35:43,200
as erica said this morning um 1.8

03:35:41,120 --> 03:35:44,720
million developers have joined us in the

03:35:43,200 --> 03:35:47,520
github community here in india

03:35:44,720 --> 03:35:48,720
that's just insane numbers it's so thank

03:35:47,520 --> 03:35:51,760
you very very much

03:35:48,720 --> 03:35:53,359
this is the equivalent to a developer in

03:35:51,760 --> 03:35:56,960
india creating their first

03:35:53,359 --> 03:35:58,479
repo every 30 seconds so while i've been

03:35:56,960 --> 03:36:00,720
jibber jabbering on people have been

03:35:58,479 --> 03:36:01,520
creating repos and it's every single 30

03:36:00,720 --> 03:36:04,319
seconds

03:36:01,520 --> 03:36:05,600
and it's not just um people using github

03:36:04,319 --> 03:36:08,080
for work either

03:36:05,600 --> 03:36:10,239
it's as erica said this morning india is

03:36:08,080 --> 03:36:13,040
now the fastest growing open source

03:36:10,239 --> 03:36:15,200
uh contributor in the world so everybody

03:36:13,040 --> 03:36:17,520
in india has been contributing massively

03:36:15,200 --> 03:36:19,279
and the potential for india and indian

03:36:17,520 --> 03:36:22,080
developers to positively impact the

03:36:19,279 --> 03:36:24,080
world is unbelievable as we saw in

03:36:22,080 --> 03:36:25,840
the covid session earlier on talking

03:36:24,080 --> 03:36:28,560
about the impact for good there

03:36:25,840 --> 03:36:30,399
and also just thanks to all the amazing

03:36:28,560 --> 03:36:32,720
open source contributions that are

03:36:30,399 --> 03:36:35,520
making the world a better place

03:36:32,720 --> 03:36:37,520
we're proud to host a growing collection

03:36:35,520 --> 03:36:39,600
of projects that are built in or

03:36:37,520 --> 03:36:40,239
receiving significant contributions from

03:36:39,600 --> 03:36:42,000
india

03:36:40,239 --> 03:36:43,840
if you visit our made in india

03:36:42,000 --> 03:36:45,279
collection on github you can learn more

03:36:43,840 --> 03:36:48,080
that's github.com

03:36:45,279 --> 03:36:50,239
collection made in india and if you're a

03:36:48,080 --> 03:36:52,560
maintainer of a project in india

03:36:50,239 --> 03:36:53,439
we'd love to feature your project on

03:36:52,560 --> 03:36:55,359
this list

03:36:53,439 --> 03:36:57,520
so if you head on over to that address

03:36:55,359 --> 03:36:59,439
there and you can send a pull request in

03:36:57,520 --> 03:37:01,600
to add your project into this list today

03:36:59,439 --> 03:37:03,040
please do we would love to feature you

03:37:01,600 --> 03:37:04,399
and uh you can also tell us about your

03:37:03,040 --> 03:37:05,279
project in discussions if you want or if

03:37:04,399 --> 03:37:06,800
you want to get some feedback or

03:37:05,279 --> 03:37:08,239
anything else like that i'd love to love

03:37:06,800 --> 03:37:11,439
to listen it

03:37:08,239 --> 03:37:13,520
um now with um india

03:37:11,439 --> 03:37:16,239
as erica mentioned to help support these

03:37:13,520 --> 03:37:18,560
projects erica also announced the

03:37:16,239 --> 03:37:20,080
github grants for open source and this

03:37:18,560 --> 03:37:21,040
is a brand new program that you can

03:37:20,080 --> 03:37:23,200
learn about in

03:37:21,040 --> 03:37:24,880
in that in the same discussions repo you

03:37:23,200 --> 03:37:27,920
can learn about the program there

03:37:24,880 --> 03:37:29,359
and it offers um grants for a total or

03:37:27,920 --> 03:37:32,080
some of 10 million

03:37:29,359 --> 03:37:33,600
rupees to open source maintainers to

03:37:32,080 --> 03:37:34,960
support their work as they continue to

03:37:33,600 --> 03:37:36,720
build world-class software

03:37:34,960 --> 03:37:38,080
that really makes an impact for india

03:37:36,720 --> 03:37:40,800
but across the world

03:37:38,080 --> 03:37:42,399
and open source projects based out of

03:37:40,800 --> 03:37:44,080
india will be able to apply

03:37:42,399 --> 03:37:45,920
and we're using working with some

03:37:44,080 --> 03:37:47,600
representatives from academia from the

03:37:45,920 --> 03:37:49,840
software industry as well as

03:37:47,600 --> 03:37:51,439
from within github to um select the

03:37:49,840 --> 03:37:53,040
grant recipients

03:37:51,439 --> 03:37:55,120
um i'm really glad that we're launching

03:37:53,040 --> 03:37:56,640
this program as well i just can't

03:37:55,120 --> 03:37:58,239
um you know i'm really looking forward

03:37:56,640 --> 03:38:00,560
to seeing the impact that the

03:37:58,239 --> 03:38:02,319
recipients are able to have with this

03:38:00,560 --> 03:38:03,439
additional financial support that we're

03:38:02,319 --> 03:38:05,200
providing

03:38:03,439 --> 03:38:06,960
we want to help open source projects get

03:38:05,200 --> 03:38:08,479
as much visibility as possible and

03:38:06,960 --> 03:38:09,520
that's something i'm very very very

03:38:08,479 --> 03:38:11,120
passionate about

03:38:09,520 --> 03:38:12,960
and that's why we use our social

03:38:11,120 --> 03:38:13,680
channels to try and help promote open

03:38:12,960 --> 03:38:17,520
source

03:38:13,680 --> 03:38:20,000
and we also host a regular release radar

03:38:17,520 --> 03:38:21,359
where every month we feature open source

03:38:20,000 --> 03:38:23,439
projects that have just had a major

03:38:21,359 --> 03:38:25,359
release a major milestone

03:38:23,439 --> 03:38:27,040
so we love to give these projects a

03:38:25,359 --> 03:38:27,760
shout out to our audience on social

03:38:27,040 --> 03:38:29,920
media

03:38:27,760 --> 03:38:31,680
and let them know you know what to check

03:38:29,920 --> 03:38:33,359
out what's cool what's happening

03:38:31,680 --> 03:38:35,120
if you've your favorite open source

03:38:33,359 --> 03:38:36,399
project has had a major release then be

03:38:35,120 --> 03:38:39,359
sure to let us know by

03:38:36,399 --> 03:38:40,160
tagging it with gh release radar or by

03:38:39,359 --> 03:38:43,279
sending it to

03:38:40,160 --> 03:38:45,120
github on twitter and um we've just got

03:38:43,279 --> 03:38:46,479
this fantastic community and that's what

03:38:45,120 --> 03:38:48,080
we've seen today and that's what you

03:38:46,479 --> 03:38:49,520
know despite us all being remote

03:38:48,080 --> 03:38:51,199
despite us all coming from the different

03:38:49,520 --> 03:38:53,199
locations around the world

03:38:51,199 --> 03:38:54,640
it's just fantastic to see this

03:38:53,199 --> 03:38:57,600
community come together

03:38:54,640 --> 03:38:59,760
but especially in india um over the past

03:38:57,600 --> 03:39:00,640
year we've launched a new program as

03:38:59,760 --> 03:39:02,880
eric mentioned

03:39:00,640 --> 03:39:04,640
uh to highlight the fantastic leader in

03:39:02,880 --> 03:39:06,840
leaders in our communities

03:39:04,640 --> 03:39:09,279
we call that the the github stars

03:39:06,840 --> 03:39:10,640
program and the github stars program

03:39:09,279 --> 03:39:14,399
exists to lift up

03:39:10,640 --> 03:39:15,120
um people who inspire who educate you

03:39:14,399 --> 03:39:16,720
nurture

03:39:15,120 --> 03:39:18,160
in your communities you know you always

03:39:16,720 --> 03:39:19,840
see these people they're the people who

03:39:18,160 --> 03:39:22,319
are always volunteering

03:39:19,840 --> 03:39:23,359
always stepping up and really driving

03:39:22,319 --> 03:39:25,040
communities

03:39:23,359 --> 03:39:26,479
there are a fantastic group of people

03:39:25,040 --> 03:39:28,720
across the world who've been

03:39:26,479 --> 03:39:29,760
incredibly active in building local

03:39:28,720 --> 03:39:32,080
communities and

03:39:29,760 --> 03:39:32,800
helping online and helping others as

03:39:32,080 --> 03:39:34,399
well

03:39:32,800 --> 03:39:36,239
and i'm very pleased to say two of our

03:39:34,399 --> 03:39:38,080
stars who are indian stars

03:39:36,239 --> 03:39:40,319
uh been presenting here at satellite we

03:39:38,080 --> 03:39:43,520
had santosh on earlier and then

03:39:40,319 --> 03:39:45,760
uh nicholas is running a workshop where

03:39:43,520 --> 03:39:47,439
um is if you haven't signed up for the

03:39:45,760 --> 03:39:48,479
workshops actually if you want to head

03:39:47,439 --> 03:39:50,319
on over

03:39:48,479 --> 03:39:52,479
the space is quite limited but remember

03:39:50,319 --> 03:39:54,479
that all money for the workshops

03:39:52,479 --> 03:39:56,319
um all the money raised is going to

03:39:54,479 --> 03:39:57,760
local charities in india as well

03:39:56,319 --> 03:39:59,680
and as i say nishka she's going to be

03:39:57,760 --> 03:40:01,600
presenting one of those workshops

03:39:59,680 --> 03:40:03,279
and if you know someone in your local

03:40:01,600 --> 03:40:04,000
community someone in your developer

03:40:03,279 --> 03:40:05,920
community

03:40:04,000 --> 03:40:07,520
that's using github to help other

03:40:05,920 --> 03:40:09,760
developers and help people

03:40:07,520 --> 03:40:11,359
learn to help people get better and

03:40:09,760 --> 03:40:12,960
raise up through

03:40:11,359 --> 03:40:14,720
get better as open source contributors

03:40:12,960 --> 03:40:16,960
or as developers and if you think

03:40:14,720 --> 03:40:19,600
they've got what it takes to be a star

03:40:16,960 --> 03:40:20,640
then please visit stars.gable.com to

03:40:19,600 --> 03:40:22,720
nominate them

03:40:20,640 --> 03:40:23,760
um it's a it's a it's a small very

03:40:22,720 --> 03:40:25,920
exclusive group

03:40:23,760 --> 03:40:27,680
um of them really some of the most

03:40:25,920 --> 03:40:28,560
inspirational people in the community

03:40:27,680 --> 03:40:30,640
that we've got you know

03:40:28,560 --> 03:40:32,080
over 56 million developers but we are

03:40:30,640 --> 03:40:34,319
adding new people every week

03:40:32,080 --> 03:40:36,080
so uh let us know who's a star in your

03:40:34,319 --> 03:40:38,319
eyes that'd be fantastic

03:40:36,080 --> 03:40:39,199
and one of the things do that our stars

03:40:38,319 --> 03:40:41,279
do a lot of

03:40:39,199 --> 03:40:42,319
is to educate and sort of share their

03:40:41,279 --> 03:40:45,199
knowledge

03:40:42,319 --> 03:40:46,479
and so as we start to open back up over

03:40:45,199 --> 03:40:48,560
the next year

03:40:46,479 --> 03:40:49,600
if you're hosting an in-person meetup

03:40:48,560 --> 03:40:51,920
around github

03:40:49,600 --> 03:40:53,920
then do reach out to us in discussions

03:40:51,920 --> 03:40:54,560
um we'd love to send you some stickers

03:40:53,920 --> 03:40:56,960
to hand out

03:40:54,560 --> 03:40:58,800
see how else we can help and remember

03:40:56,960 --> 03:41:00,000
that we've got our virtual meet up for

03:40:58,800 --> 03:41:01,920
indian developers

03:41:00,000 --> 03:41:03,680
which streams live or you can catch

03:41:01,920 --> 03:41:05,520
replays on youtube

03:41:03,680 --> 03:41:07,279
and that happens you know regularly it's

03:41:05,520 --> 03:41:08,960
not just satellite india we have these

03:41:07,279 --> 03:41:10,319
regular virtual meetups as well where

03:41:08,960 --> 03:41:11,840
you can where you can get in contact

03:41:10,319 --> 03:41:13,920
with local developers

03:41:11,840 --> 03:41:15,279
so be sure to stick around after these

03:41:13,920 --> 03:41:18,319
virtual meetups and there's lots of

03:41:15,279 --> 03:41:20,560
great conversation happening as well

03:41:18,319 --> 03:41:22,239
while these streams are aimed very much

03:41:20,560 --> 03:41:23,120
at pro developers and open source

03:41:22,239 --> 03:41:25,520
maintainers i

03:41:23,120 --> 03:41:27,760
have say every stream that i've been in

03:41:25,520 --> 03:41:28,399
every single stream no matter what time

03:41:27,760 --> 03:41:31,120
zone

03:41:28,399 --> 03:41:33,680
has just been full of some of the

03:41:31,120 --> 03:41:35,680
amazing passionate people from the

03:41:33,680 --> 03:41:37,279
education community in india

03:41:35,680 --> 03:41:38,960
and we've just been overjoyed with the

03:41:37,279 --> 03:41:41,439
participation from students

03:41:38,960 --> 03:41:42,160
and just the the hunger there has been

03:41:41,439 --> 03:41:45,120
to learn

03:41:42,160 --> 03:41:45,520
i'm always just completely blown away by

03:41:45,120 --> 03:41:47,840
the

03:41:45,520 --> 03:41:49,120
the energy and the passion that the

03:41:47,840 --> 03:41:51,680
students in india have

03:41:49,120 --> 03:41:52,960
in supporting open source uh in using

03:41:51,680 --> 03:41:54,560
github and just you know really

03:41:52,960 --> 03:41:56,800
participating in the community it's

03:41:54,560 --> 03:41:58,239
fantastic to see and there's obviously

03:41:56,800 --> 03:42:00,080
such an amazing

03:41:58,239 --> 03:42:01,840
future coming up through the that

03:42:00,080 --> 03:42:04,080
community so um

03:42:01,840 --> 03:42:05,680
you can just you know really feel the

03:42:04,080 --> 03:42:07,120
passion for hunger and learning as well

03:42:05,680 --> 03:42:09,760
it's just amazing

03:42:07,120 --> 03:42:11,040
uh one of things has also been great to

03:42:09,760 --> 03:42:13,359
see is that the

03:42:11,040 --> 03:42:14,560
faculty the academic staff in india have

03:42:13,359 --> 03:42:16,880
been some of the most

03:42:14,560 --> 03:42:19,120
responsive in the world actually in

03:42:16,880 --> 03:42:21,840
terms of helping their students

03:42:19,120 --> 03:42:24,479
get the skills for jobs and also learn

03:42:21,840 --> 03:42:27,199
how to contribute into open source

03:42:24,479 --> 03:42:29,279
in the last year alone we've had more

03:42:27,199 --> 03:42:32,000
than a hundred higher education

03:42:29,279 --> 03:42:32,880
institutions join github's education

03:42:32,000 --> 03:42:35,120
programs

03:42:32,880 --> 03:42:37,439
um and we've also that's been supported

03:42:35,120 --> 03:42:38,720
by an amazing 74 volunteer campus

03:42:37,439 --> 03:42:41,199
experts in india

03:42:38,720 --> 03:42:43,040
in the student body there are well over

03:42:41,199 --> 03:42:44,880
a hundred thousand students now signed

03:42:43,040 --> 03:42:46,560
up to our educational programs and with

03:42:44,880 --> 03:42:49,120
the campus program

03:42:46,560 --> 03:42:50,880
students across many of india's higher

03:42:49,120 --> 03:42:52,640
education institutions have access to

03:42:50,880 --> 03:42:55,359
github's full product suite

03:42:52,640 --> 03:42:57,120
as throughout their time as students the

03:42:55,359 --> 03:42:58,800
student ecosystem is incredibly

03:42:57,120 --> 03:43:00,800
important to the continued growth and

03:42:58,800 --> 03:43:02,479
pace of innovation in india and as i say

03:43:00,800 --> 03:43:04,319
it's just such a bright future

03:43:02,479 --> 03:43:06,479
looking ahead of us there as we look

03:43:04,319 --> 03:43:09,600
towards that community

03:43:06,479 --> 03:43:12,640
and the more we can do to equip them uh

03:43:09,600 --> 03:43:14,000
as developers as innovators the solution

03:43:12,640 --> 03:43:16,160
builders of tomorrow

03:43:14,000 --> 03:43:17,520
the brighter our future is going to look

03:43:16,160 --> 03:43:19,920
which is why we have the

03:43:17,520 --> 03:43:21,279
the github student pack and if you're a

03:43:19,920 --> 03:43:22,479
student in india and you're not already

03:43:21,279 --> 03:43:24,640
familiar with it

03:43:22,479 --> 03:43:26,399
be sure to check it out um the pack

03:43:24,640 --> 03:43:28,720
contains over 14

03:43:26,399 --> 03:43:29,600
million rupees worth of free software

03:43:28,720 --> 03:43:32,479
and services

03:43:29,600 --> 03:43:34,479
to help every student developer so not

03:43:32,479 --> 03:43:37,199
just from github but from partners and

03:43:34,479 --> 03:43:39,640
and other people that we work with so if

03:43:37,199 --> 03:43:40,880
you head on over to

03:43:39,640 --> 03:43:42,800
education.github.compack

03:43:40,880 --> 03:43:44,880
and you can learn all about learn more

03:43:42,800 --> 03:43:46,960
and learn how to get qualified for the

03:43:44,880 --> 03:43:49,520
student developer pack

03:43:46,960 --> 03:43:50,960
and then when you're starting to get you

03:43:49,520 --> 03:43:52,640
know looking at getting some work

03:43:50,960 --> 03:43:54,640
experience this is something my own

03:43:52,640 --> 03:43:56,720
uh eldest son is doing right now is he's

03:43:54,640 --> 03:43:59,520
thinking about going from education

03:43:56,720 --> 03:44:00,319
into the workforce um erica also

03:43:59,520 --> 03:44:02,800
announced the

03:44:00,319 --> 03:44:03,439
github india externship program this

03:44:02,800 --> 03:44:05,040
morning

03:44:03,439 --> 03:44:07,600
and this builds on top of github's

03:44:05,040 --> 03:44:09,520
campus experts by offering participation

03:44:07,600 --> 03:44:10,960
participating students a unique

03:44:09,520 --> 03:44:12,399
opportunity to work with some of the

03:44:10,960 --> 03:44:14,080
leading companies in india

03:44:12,399 --> 03:44:15,680
and get hands-on development experience

03:44:14,080 --> 03:44:17,439
outside of the classroom

03:44:15,680 --> 03:44:19,359
the program offers three months paid

03:44:17,439 --> 03:44:19,920
externship to open source projects in

03:44:19,359 --> 03:44:21,680
partners

03:44:19,920 --> 03:44:23,760
in partnership with tech companies and

03:44:21,680 --> 03:44:24,399
in return these top tech companies get

03:44:23,760 --> 03:44:25,920
to start

03:44:24,399 --> 03:44:28,000
building relationships with developers

03:44:25,920 --> 03:44:28,399
they may want to hire when they graduate

03:44:28,000 --> 03:44:31,760
and

03:44:28,399 --> 03:44:33,279
also um help make sure open source is

03:44:31,760 --> 03:44:34,720
getting the contributions that it needs

03:44:33,279 --> 03:44:36,960
to be supported

03:44:34,720 --> 03:44:38,720
the gear of india externship program you

03:44:36,960 --> 03:44:40,640
know really helps connect the dots

03:44:38,720 --> 03:44:41,920
between open source the next generation

03:44:40,640 --> 03:44:44,160
of software developers

03:44:41,920 --> 03:44:45,600
and successful and growing companies so

03:44:44,160 --> 03:44:47,040
definitely check that out if that's of

03:44:45,600 --> 03:44:48,560
interest

03:44:47,040 --> 03:44:50,560
ryan so let's look at what's coming up

03:44:48,560 --> 03:44:51,840
tomorrow we've got a brilliant day lined

03:44:50,560 --> 03:44:54,239
up for us tomorrow and

03:44:51,840 --> 03:44:56,399
loads and loads of great content did you

03:44:54,239 --> 03:44:57,840
know that we've shipped over a hundred

03:44:56,399 --> 03:44:59,439
features to get up in the past six

03:44:57,840 --> 03:45:00,479
months we're shipping features every

03:44:59,439 --> 03:45:02,800
single day

03:45:00,479 --> 03:45:04,399
um tomorrow morning my boss shanku will

03:45:02,800 --> 03:45:06,160
be joining us with the caster characters

03:45:04,399 --> 03:45:08,000
from across the entire company

03:45:06,160 --> 03:45:10,000
and the entire globe and joining you

03:45:08,000 --> 03:45:10,960
here and he's going to take us on this

03:45:10,000 --> 03:45:12,479
demo pack

03:45:10,960 --> 03:45:14,080
session i think there's only about six

03:45:12,479 --> 03:45:15,840
minutes of talking the rest of the time

03:45:14,080 --> 03:45:17,439
is just all demos

03:45:15,840 --> 03:45:18,720
where we're going to go all the way

03:45:17,439 --> 03:45:19,920
through github showing you all the

03:45:18,720 --> 03:45:21,680
latest features

03:45:19,920 --> 03:45:23,760
including one or two brand new features

03:45:21,680 --> 03:45:25,279
that'll get their first exclusive look

03:45:23,760 --> 03:45:27,520
tomorrow morning for you

03:45:25,279 --> 03:45:28,800
in the keynote session uh first thing

03:45:27,520 --> 03:45:30,479
tomorrow morning

03:45:28,800 --> 03:45:32,080
it promises to be a fantastic session

03:45:30,479 --> 03:45:34,160
definitely worth tuning in for

03:45:32,080 --> 03:45:35,520
and actually straight after that session

03:45:34,160 --> 03:45:36,479
we'll be splitting back into the two

03:45:35,520 --> 03:45:38,880
channels again

03:45:36,479 --> 03:45:40,960
i'm a good friend of vp he's a vp of

03:45:38,880 --> 03:45:42,160
software engineering uh sanjay mulphani

03:45:40,960 --> 03:45:43,840
he's going to be joining us from

03:45:42,160 --> 03:45:45,600
hyderabad to talk about the work the

03:45:43,840 --> 03:45:46,640
github engineering team are doing here

03:45:45,600 --> 03:45:48,399
in india

03:45:46,640 --> 03:45:50,479
and the work they do and some of the

03:45:48,399 --> 03:45:52,000
lessons they've learned along the way

03:45:50,479 --> 03:45:54,000
and with all the fantastic sessions you

03:45:52,000 --> 03:45:55,680
know dr varelsa the co-founder of julie

03:45:54,000 --> 03:45:57,520
computing is going to be talking

03:45:55,680 --> 03:45:59,199
uh one of my friends shashank bazaar is

03:45:57,520 --> 03:46:00,080
going to be talking about github actions

03:45:59,199 --> 03:46:02,239
and that's

03:46:00,080 --> 03:46:03,680
and then my uh my good friend mitch

03:46:02,239 --> 03:46:04,399
manners will be joining us live from

03:46:03,680 --> 03:46:06,239
australia

03:46:04,399 --> 03:46:08,080
to tell you how to get up like a boss so

03:46:06,239 --> 03:46:10,160
definitely check that session out

03:46:08,080 --> 03:46:11,680
and just like today the open source

03:46:10,160 --> 03:46:13,520
track will have a bunch of lightning

03:46:11,680 --> 03:46:16,080
talks some things like tensorflow

03:46:13,520 --> 03:46:17,439
kubernetes emma lots using github all

03:46:16,080 --> 03:46:18,239
that sort of stuff so definitely check

03:46:17,439 --> 03:46:20,560
that out

03:46:18,239 --> 03:46:22,800
and remember it promises to be a

03:46:20,560 --> 03:46:24,000
fantastic day but you can get started on

03:46:22,800 --> 03:46:26,160
github.com for free

03:46:24,000 --> 03:46:28,319
right now it's free to developers and

03:46:26,160 --> 03:46:30,399
teams of any size for private projects

03:46:28,319 --> 03:46:32,160
as well as for open source projects

03:46:30,399 --> 03:46:33,600
so if you're learning to code if your

03:46:32,160 --> 03:46:35,279
country reaches open source or if you're

03:46:33,600 --> 03:46:36,000
starting a new private project or

03:46:35,279 --> 03:46:38,560
startup

03:46:36,000 --> 03:46:39,199
you can do that on github for free today

03:46:38,560 --> 03:46:40,560
right

03:46:39,199 --> 03:46:42,160
okay that's enough for joining me for

03:46:40,560 --> 03:46:43,199
this quick wrap-up so thanks very much i

03:46:42,160 --> 03:46:44,800
hope you enjoyed getting

03:46:43,199 --> 03:46:46,560
using github as much as we enjoy

03:46:44,800 --> 03:46:47,840
building it i'm going to head back over

03:46:46,560 --> 03:46:50,080
into discussions

03:46:47,840 --> 03:46:51,600
right now so you can join us and ask

03:46:50,080 --> 03:46:53,520
questions in the chat down there

03:46:51,600 --> 03:46:55,120
but in the meantime thank you very much

03:46:53,520 --> 03:46:56,800
for joining us today and i'm looking

03:46:55,120 --> 03:46:59,279
forward to seeing you tomorrow take care

03:46:56,800 --> 03:46:59,279
bye

03:47:03,520 --> 03:47:07,920
thank you there martin for such an

03:47:05,439 --> 03:47:09,439
awesome closing session and going over

03:47:07,920 --> 03:47:10,960
everything that was shared today and

03:47:09,439 --> 03:47:13,359
what's coming up

03:47:10,960 --> 03:47:15,120
all of you thank you so much for joining

03:47:13,359 --> 03:47:17,279
us a lot of great

03:47:15,120 --> 03:47:18,160
contentiously the launch of great

03:47:17,279 --> 03:47:21,840
programs for

03:47:18,160 --> 03:47:24,239
startups students accidents security

03:47:21,840 --> 03:47:25,680
linkered vision chaos engineering we

03:47:24,239 --> 03:47:28,000
covered it all

03:47:25,680 --> 03:47:29,760
hit us on twitter and let us know what

03:47:28,000 --> 03:47:33,359
were your favorite sessions

03:47:29,760 --> 03:47:36,800
key quotes that you really liked and

03:47:33,359 --> 03:47:38,560
hit mohit junaid 87 or divya vashnavi

03:47:36,800 --> 03:47:41,199
and we would want to see more

03:47:38,560 --> 03:47:43,040
of you in the headgear or in the dance

03:47:41,199 --> 03:47:44,960
moves

03:47:43,040 --> 03:47:46,720
so mohit what's happening tomorrow

03:47:44,960 --> 03:47:49,120
absolutely

03:47:46,720 --> 03:47:50,000
absolutely what energetic day and for

03:47:49,120 --> 03:47:52,479
tomorrow

03:47:50,000 --> 03:47:54,479
we have more amazing sessions for you at

03:47:52,479 --> 03:47:56,880
devops channel we're gonna talk about

03:47:54,479 --> 03:47:57,920
how you can create your own github apps

03:47:56,880 --> 03:48:00,239
and your own github

03:47:57,920 --> 03:48:01,359
actions we're gonna talk about mlogs

03:48:00,239 --> 03:48:03,040
using github

03:48:01,359 --> 03:48:05,040
and we're also going to talk about how

03:48:03,040 --> 03:48:06,399
github uses github

03:48:05,040 --> 03:48:08,399
in our own organization for

03:48:06,399 --> 03:48:10,399
collaboration isn't that amazing

03:48:08,399 --> 03:48:12,160
and we got another channel just like

03:48:10,399 --> 03:48:14,640
today the open source channel

03:48:12,160 --> 03:48:15,439
where current and anesha will continue

03:48:14,640 --> 03:48:17,840
and will bring

03:48:15,439 --> 03:48:19,680
so much awesomeness to you starting from

03:48:17,840 --> 03:48:22,399
building julia in the open

03:48:19,680 --> 03:48:23,920
crossing the border of languages and the

03:48:22,399 --> 03:48:26,960
state of uiux in

03:48:23,920 --> 03:48:30,160
open source a power packed day 2

03:48:26,960 --> 03:48:31,359
which you cannot miss it was lovely to

03:48:30,160 --> 03:48:34,560
have you

03:48:31,359 --> 03:48:37,840
and by the way the day does not end here

03:48:34,560 --> 03:48:40,319
we got workshops at 3 p.m today for you

03:48:37,840 --> 03:48:41,439
hands-on experience with github experts

03:48:40,319 --> 03:48:44,880
you cannot miss

03:48:41,439 --> 03:48:44,880
to learn all the action

03:48:45,120 --> 03:48:48,560
so we're gonna see you tomorrow with all

03:48:47,120 --> 03:48:52,319
the love all the energy

03:48:48,560 --> 03:48:52,319
have a great day see you again

03:48:52,640 --> 03:48:57,840
let's have some fun the party hasn't

03:48:54,800 --> 03:48:57,840
ended yet

03:50:04,840 --> 03:50:07,840
so

03:50:55,040 --> 03:50:57,120

YouTube URL: https://www.youtube.com/watch?v=v2n2XJWgrbs


