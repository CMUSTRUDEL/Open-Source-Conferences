Title: GitHub Satellite India 2021 - Building event driven apps on Kubernetes with Fission
Publication date: 2021-03-28
Playlist: GitHub Satellite India 2021 - DevOps: Day 1
Description: 
	Presented by Vishal Biyani, CTO @ InfraCloud Technologies

FaaS abstracts us from the underlying mechanism and makes it easy & fast to build and deploy applications. The open source project Fission enables FaaS on Kubernetes and makes it easy to build and deploy event-driven applications on Kubernetes - without having to understand Kubernetes concepts in depth. In this session, Vishal Biyani, a maintainer of the Fission project walks us through the uses of FaaS, how Fission enables FaaS on Kubernetes and the journey of contributing to open source.

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:00,080 --> 00:00:04,960
uh remember audience please engage with

00:00:02,000 --> 00:00:04,960
him on discussions

00:00:06,200 --> 00:00:09,339
[Music]

00:00:11,280 --> 00:00:15,519
hi everyone uh my name is vishal biani

00:00:14,320 --> 00:00:17,520
i'm cto and forward infected

00:00:15,519 --> 00:00:18,480
technologies i'm also a fashion

00:00:17,520 --> 00:00:20,080
maintainer

00:00:18,480 --> 00:00:21,279
uh and i'm pretty active organizer of

00:00:20,080 --> 00:00:23,199
kubernetes pooling so we'd love to

00:00:21,279 --> 00:00:25,359
connect you there

00:00:23,199 --> 00:00:26,720
cool so today we are going to talk about

00:00:25,359 --> 00:00:28,560
building event different applications on

00:00:26,720 --> 00:00:30,880
kubernetes with fission

00:00:28,560 --> 00:00:32,480
now before when we go there i think the

00:00:30,880 --> 00:00:33,360
first question that comes to your mind

00:00:32,480 --> 00:00:35,120
may be

00:00:33,360 --> 00:00:36,800
why care about function as a service

00:00:35,120 --> 00:00:39,040
platform on top of kubernetes

00:00:36,800 --> 00:00:40,239
when we have cloud provider you know

00:00:39,040 --> 00:00:42,480
managed uh

00:00:40,239 --> 00:00:43,840
function platforms i think there are

00:00:42,480 --> 00:00:44,960
some use cases and there are some

00:00:43,840 --> 00:00:46,480
scenarios where i think

00:00:44,960 --> 00:00:47,920
the fast and kubernetes really shines

00:00:46,480 --> 00:00:49,280
and we'll walk through some of those

00:00:47,920 --> 00:00:51,039
scenarios

00:00:49,280 --> 00:00:52,879
so today if you look at developers they

00:00:51,039 --> 00:00:53,680
develop functions they develop micro

00:00:52,879 --> 00:00:55,120
services

00:00:53,680 --> 00:00:57,760
they develop source code they also build

00:00:55,120 --> 00:00:58,000
docker images uh will it not be nice to

00:00:57,760 --> 00:01:00,320
have

00:00:58,000 --> 00:01:02,000
a consistent way to deploy and not worry

00:01:00,320 --> 00:01:03,440
about the underlying runtime or not

00:01:02,000 --> 00:01:03,760
worry about what platform i'm deploying

00:01:03,440 --> 00:01:06,720
to

00:01:03,760 --> 00:01:08,000
all of these artifacts so today i think

00:01:06,720 --> 00:01:08,479
the developer's choice pretty much is

00:01:08,000 --> 00:01:10,080
clear

00:01:08,479 --> 00:01:12,320
we want to deploy all these things onto

00:01:10,080 --> 00:01:13,600
kubernetes in some form or fashion

00:01:12,320 --> 00:01:15,920
and this kubernetes could be sitting on

00:01:13,600 --> 00:01:16,320
top of other cloud one cloud or you know

00:01:15,920 --> 00:01:19,119
on

00:01:16,320 --> 00:01:20,880
you know on premise bare metal machines

00:01:19,119 --> 00:01:21,280
but as a developer i don't want to worry

00:01:20,880 --> 00:01:22,960
about

00:01:21,280 --> 00:01:24,400
what is the underlying platform i want

00:01:22,960 --> 00:01:25,280
to worry about the code i want to worry

00:01:24,400 --> 00:01:26,479
about how much

00:01:25,280 --> 00:01:29,280
value i can deliver you know with my

00:01:26,479 --> 00:01:29,759
applications so one thing is consistency

00:01:29,280 --> 00:01:31,920
of

00:01:29,759 --> 00:01:33,280
being able to deploy different types of

00:01:31,920 --> 00:01:34,400
workloads right from functions to

00:01:33,280 --> 00:01:36,240
microservices

00:01:34,400 --> 00:01:37,600
and then not compromising on the

00:01:36,240 --> 00:01:39,439
underlying

00:01:37,600 --> 00:01:40,720
things like scale or operability or you

00:01:39,439 --> 00:01:42,159
know being able to scale as

00:01:40,720 --> 00:01:43,360
the demand grows and then being able to

00:01:42,159 --> 00:01:45,119
scale down when the demand kind of

00:01:43,360 --> 00:01:46,799
vanishes

00:01:45,119 --> 00:01:48,399
the second factor i believe when we

00:01:46,799 --> 00:01:49,920
develop all these different applications

00:01:48,399 --> 00:01:51,840
you know whether it is services

00:01:49,920 --> 00:01:53,360
or functions or you know using docker

00:01:51,840 --> 00:01:55,119
images or so forth

00:01:53,360 --> 00:01:56,560
i want to integrate with them you know

00:01:55,119 --> 00:01:59,040
with a bunch of systems

00:01:56,560 --> 00:02:00,320
it could be a message queue system it

00:01:59,040 --> 00:02:02,640
could be a database

00:02:00,320 --> 00:02:04,000
uh it could be a monitoring system and i

00:02:02,640 --> 00:02:04,719
want to write all these integrations as

00:02:04,000 --> 00:02:06,399
a developer

00:02:04,719 --> 00:02:08,080
without having to worry about how do i

00:02:06,399 --> 00:02:09,360
connect to this how do i make it work

00:02:08,080 --> 00:02:10,959
that is one part

00:02:09,360 --> 00:02:12,879
the second part is i don't want my

00:02:10,959 --> 00:02:14,400
workers to sit idle when there are no

00:02:12,879 --> 00:02:15,840
messages or no events happening in my

00:02:14,400 --> 00:02:17,440
message queue for example

00:02:15,840 --> 00:02:18,959
i want the workers to be spinned up only

00:02:17,440 --> 00:02:21,040
when there is some event

00:02:18,959 --> 00:02:22,879
consume those events once the consume

00:02:21,040 --> 00:02:24,400
thing is done processing is done

00:02:22,879 --> 00:02:26,640
shut down the number of processors back

00:02:24,400 --> 00:02:27,760
to zero maybe right so

00:02:26,640 --> 00:02:30,879
i think something like that would be

00:02:27,760 --> 00:02:33,280
really ideal for you know developers

00:02:30,879 --> 00:02:35,120
apart from these two key factors uh i

00:02:33,280 --> 00:02:36,800
think a lot of times you also want the

00:02:35,120 --> 00:02:37,840
control of the underlying infrastructure

00:02:36,800 --> 00:02:38,959
you know what is the operating system

00:02:37,840 --> 00:02:41,440
what are the patches running

00:02:38,959 --> 00:02:42,720
are there any security issues and stuff

00:02:41,440 --> 00:02:44,560
like that

00:02:42,720 --> 00:02:46,560
you also want a fine grained scaling

00:02:44,560 --> 00:02:47,440
control for example being able to scale

00:02:46,560 --> 00:02:50,239
out or scaling

00:02:47,440 --> 00:02:51,920
as required and you don't want any time

00:02:50,239 --> 00:02:53,120
out or you know any other limits on to

00:02:51,920 --> 00:02:54,080
how do you run these functions or

00:02:53,120 --> 00:02:56,000
microservices

00:02:54,080 --> 00:02:57,760
you know whether on cloud on-premise

00:02:56,000 --> 00:02:59,200
with a similar experience

00:02:57,760 --> 00:03:00,959
and i think one key point you might have

00:02:59,200 --> 00:03:02,000
noticed in all of these is a developer

00:03:00,959 --> 00:03:04,480
productivity

00:03:02,000 --> 00:03:05,440
how do we make sure as a developer we

00:03:04,480 --> 00:03:07,360
are productive

00:03:05,440 --> 00:03:08,879
we are able to deploy things build

00:03:07,360 --> 00:03:10,560
things fast without having to worry

00:03:08,879 --> 00:03:11,599
about the underlying infrastructure and

00:03:10,560 --> 00:03:15,680
just scale out you know

00:03:11,599 --> 00:03:17,840
on on demand now we talked about

00:03:15,680 --> 00:03:19,519
why fast and kubernetes matters but i

00:03:17,840 --> 00:03:20,879
think there are some scenarios where you

00:03:19,519 --> 00:03:22,480
shouldn't probably think about fast and

00:03:20,879 --> 00:03:24,319
kubernetes and let me call them out very

00:03:22,480 --> 00:03:26,560
clearly

00:03:24,319 --> 00:03:28,400
so for example if you're doing only a

00:03:26,560 --> 00:03:28,879
few hundred invocations you know of a

00:03:28,400 --> 00:03:31,120
function

00:03:28,879 --> 00:03:32,720
per day it doesn't make sense for you to

00:03:31,120 --> 00:03:34,239
maintain the kubernetes cluster

00:03:32,720 --> 00:03:36,400
the rest of the machinery to make that

00:03:34,239 --> 00:03:37,440
happen on top of that so anything at a

00:03:36,400 --> 00:03:39,599
very small scale

00:03:37,440 --> 00:03:40,720
i would really not use fission or any

00:03:39,599 --> 00:03:41,760
fast platform you know on top of

00:03:40,720 --> 00:03:44,480
kubernetes

00:03:41,760 --> 00:03:45,120
i would simply go with cloud provider uh

00:03:44,480 --> 00:03:47,760
provided

00:03:45,120 --> 00:03:48,239
you know managed like function services

00:03:47,760 --> 00:03:50,000
uh

00:03:48,239 --> 00:03:51,360
also there are a lot of companies which

00:03:50,000 --> 00:03:52,239
start small let's say a couple of

00:03:51,360 --> 00:03:53,439
engineers together

00:03:52,239 --> 00:03:54,720
you start with a single cloud you don't

00:03:53,439 --> 00:03:55,760
really worry about multi-cloud and those

00:03:54,720 --> 00:03:57,519
kind of things right

00:03:55,760 --> 00:03:59,120
that is not a point at which you should

00:03:57,519 --> 00:04:01,120
be thinking about a fast platform on top

00:03:59,120 --> 00:04:03,439
of kubernetes i would really use as many

00:04:01,120 --> 00:04:05,519
as possible cloud managed services

00:04:03,439 --> 00:04:07,040
and scale my business you know early on

00:04:05,519 --> 00:04:09,120
and not think about all these factors

00:04:07,040 --> 00:04:11,599
very early in my business

00:04:09,120 --> 00:04:12,239
also workloads which are very static or

00:04:11,599 --> 00:04:14,239
workloads

00:04:12,239 --> 00:04:15,760
which are not driven driven at all i

00:04:14,239 --> 00:04:16,720
think fast on communities is not a great

00:04:15,760 --> 00:04:18,079
candidate

00:04:16,720 --> 00:04:21,040
and and i would rather use managed

00:04:18,079 --> 00:04:23,600
services from cloud providers

00:04:21,040 --> 00:04:25,040
great now having looked at a fast and

00:04:23,600 --> 00:04:26,960
kubernetes why it matters and why you

00:04:25,040 --> 00:04:28,880
should worry about it and you know why

00:04:26,960 --> 00:04:30,320
when you should not really use it let's

00:04:28,880 --> 00:04:32,160
talk about fission

00:04:30,320 --> 00:04:33,440
so fishing is a fast platform on top of

00:04:32,160 --> 00:04:35,280
kubernetes uh

00:04:33,440 --> 00:04:37,040
it's a simple and you know easy to use

00:04:35,280 --> 00:04:38,960
platform for developers

00:04:37,040 --> 00:04:40,560
uh you can write code or you can provide

00:04:38,960 --> 00:04:42,080
docker images either ways

00:04:40,560 --> 00:04:43,919
the concepts of docker and kubernetes

00:04:42,080 --> 00:04:45,759
can be abstracted from the developers

00:04:43,919 --> 00:04:47,040
you can expose them if you want but you

00:04:45,759 --> 00:04:48,400
know as a general rule if you don't want

00:04:47,040 --> 00:04:49,520
to worry about docker or kubernetes or

00:04:48,400 --> 00:04:52,160
building docker files

00:04:49,520 --> 00:04:54,160
all that is abstracted out from you we

00:04:52,160 --> 00:04:55,919
maintain something called as a warm pool

00:04:54,160 --> 00:04:57,840
it adds a latency of 100 milliseconds

00:04:55,919 --> 00:04:59,120
but it gives you the benefits of you

00:04:57,840 --> 00:05:00,720
know not being able to

00:04:59,120 --> 00:05:02,000
or not consuming the entire

00:05:00,720 --> 00:05:03,440
infrastructure when there is no load on

00:05:02,000 --> 00:05:04,479
infrastructure so to speak

00:05:03,440 --> 00:05:06,000
and there are a bunch of other things

00:05:04,479 --> 00:05:07,520
right from you know how it is

00:05:06,000 --> 00:05:07,840
integrating with even sources and bunch

00:05:07,520 --> 00:05:09,919
of

00:05:07,840 --> 00:05:11,919
uh things like that we will look at in a

00:05:09,919 --> 00:05:14,160
couple of slides

00:05:11,919 --> 00:05:16,080
so while we are here here is a framework

00:05:14,160 --> 00:05:17,520
which makes developers job super easy

00:05:16,080 --> 00:05:19,360
i would love if you can go to the github

00:05:17,520 --> 00:05:22,639
vision and start the project

00:05:19,360 --> 00:05:22,639
and definitely follow us

00:05:23,600 --> 00:05:27,199
cool so let's understand what fission

00:05:25,440 --> 00:05:27,759
can do for you as a developer how does

00:05:27,199 --> 00:05:29,199
it work

00:05:27,759 --> 00:05:31,600
what all it supports you know what you

00:05:29,199 --> 00:05:32,960
can do with fission

00:05:31,600 --> 00:05:34,720
so the first thing is friction fits on

00:05:32,960 --> 00:05:36,400
top of kubernetes so kubernetes is the

00:05:34,720 --> 00:05:37,280
platform you absolutely need for running

00:05:36,400 --> 00:05:38,960
fashion

00:05:37,280 --> 00:05:40,639
we also very heavily use a project

00:05:38,960 --> 00:05:42,160
called cada it's a

00:05:40,639 --> 00:05:44,000
kubernetes event driven auto scaling

00:05:42,160 --> 00:05:45,120
that is a long form and it allows you to

00:05:44,000 --> 00:05:46,800
integrate with a bunch of

00:05:45,120 --> 00:05:49,039
you know sources message queues

00:05:46,800 --> 00:05:51,440
databases and whatnot

00:05:49,039 --> 00:05:53,120
now as a developer on fusion you can

00:05:51,440 --> 00:05:54,880
write functions you can also write micro

00:05:53,120 --> 00:05:57,520
services you can provide source code or

00:05:54,880 --> 00:05:59,280
you can provide docker images

00:05:57,520 --> 00:06:01,120
irrespective of what you provide the way

00:05:59,280 --> 00:06:01,600
you build deploy and then execute and

00:06:01,120 --> 00:06:05,039
run that

00:06:01,600 --> 00:06:05,039
is consistent from your point of view

00:06:05,600 --> 00:06:09,840
now it also supports a bunch of

00:06:07,520 --> 00:06:11,759
languages right from java to golang to

00:06:09,840 --> 00:06:13,120
python rubypull.net

00:06:11,759 --> 00:06:14,880
so you can write in any language that

00:06:13,120 --> 00:06:16,080
you want and the experience is more or

00:06:14,880 --> 00:06:17,680
less consistent across all these

00:06:16,080 --> 00:06:18,960
language platforms

00:06:17,680 --> 00:06:20,720
now once you've written a function or a

00:06:18,960 --> 00:06:22,080
microservice in any of these languages

00:06:20,720 --> 00:06:24,240
you ideally would want to call them

00:06:22,080 --> 00:06:25,919
right so you can call them using http

00:06:24,240 --> 00:06:27,919
or you can call them as in cron job kind

00:06:25,919 --> 00:06:29,199
of parameters so you can say every hour

00:06:27,919 --> 00:06:31,360
or every minute you know this function

00:06:29,199 --> 00:06:33,199
or this microservice gets called

00:06:31,360 --> 00:06:34,639
but you can also call them using bunch

00:06:33,199 --> 00:06:37,680
of event driven

00:06:34,639 --> 00:06:39,840
uh you know sources so

00:06:37,680 --> 00:06:41,360
you can use any of you know amazon

00:06:39,840 --> 00:06:44,400
kinesis or nats

00:06:41,360 --> 00:06:46,000
or azure event hub or kafka or redis

00:06:44,400 --> 00:06:47,680
anytime something happens in any of

00:06:46,000 --> 00:06:49,280
these data systems

00:06:47,680 --> 00:06:52,560
you can say a function should get

00:06:49,280 --> 00:06:52,560
triggered or invoked basically

00:06:52,880 --> 00:06:55,360
but i think one of the most different

00:06:54,160 --> 00:06:56,800
factors is when you're operating a

00:06:55,360 --> 00:06:59,039
complex platform like fiction

00:06:56,800 --> 00:07:00,240
and kubernetes you need absolute details

00:06:59,039 --> 00:07:01,280
as to what is happening if something

00:07:00,240 --> 00:07:02,720
goes wrong

00:07:01,280 --> 00:07:04,800
and that's where we really you know

00:07:02,720 --> 00:07:06,319
integrate well with all the underlying

00:07:04,800 --> 00:07:08,160
observability systems whether it's from

00:07:06,319 --> 00:07:09,680
ethios or elastic or jager for

00:07:08,160 --> 00:07:10,960
distributed tracing or graphing for

00:07:09,680 --> 00:07:13,120
visualization and you know alerting

00:07:10,960 --> 00:07:15,759
basically

00:07:13,120 --> 00:07:16,639
cool now having looked at you know why

00:07:15,759 --> 00:07:18,720
fast matters

00:07:16,639 --> 00:07:20,319
uh having talked about what fiction does

00:07:18,720 --> 00:07:22,479
let's dive into the code and you know

00:07:20,319 --> 00:07:24,880
let's let's get some stuff running

00:07:22,479 --> 00:07:26,560
so i'm gonna do quick two demos uh the

00:07:24,880 --> 00:07:28,160
first one is a simple hello world so you

00:07:26,560 --> 00:07:30,319
get a sense of how fashion works

00:07:28,160 --> 00:07:31,759
what it does and you know what a hello

00:07:30,319 --> 00:07:33,919
world looks like so let's let's go right

00:07:31,759 --> 00:07:33,919
there

00:07:36,479 --> 00:07:40,319
so first of all i'm going to create an

00:07:38,639 --> 00:07:41,440
environment which is nothing but the

00:07:40,319 --> 00:07:45,120
underlying runtime

00:07:41,440 --> 00:07:46,879
for any function

00:07:45,120 --> 00:07:48,479
secondly i'm going to use a simple

00:07:46,879 --> 00:07:52,800
hello.js piece of code

00:07:48,479 --> 00:07:54,560
and create a function now what does this

00:07:52,800 --> 00:07:56,720
hello.js do let's let's take a quick

00:07:54,560 --> 00:07:58,560
look

00:07:56,720 --> 00:08:00,560
so hello.js is nothing but a simple

00:07:58,560 --> 00:08:02,800
nodejs function it is returning a hello

00:08:00,560 --> 00:08:04,400
world and a status code of 200.

00:08:02,800 --> 00:08:05,840
it follows a specific syntax when it

00:08:04,400 --> 00:08:08,319
comes to function but you know it's

00:08:05,840 --> 00:08:09,759
relatively simple in terms of the logic

00:08:08,319 --> 00:08:12,080
good so now we have the function we have

00:08:09,759 --> 00:08:12,960
the amount running let's test it out so

00:08:12,080 --> 00:08:15,039
i'm just gonna do

00:08:12,960 --> 00:08:16,000
efficient function test and hello.js and

00:08:15,039 --> 00:08:18,400
let's see how it works

00:08:16,000 --> 00:08:19,599
great here is our hello world now of

00:08:18,400 --> 00:08:20,720
course hello world is great

00:08:19,599 --> 00:08:22,560
but you know we need something more

00:08:20,720 --> 00:08:23,840
concrete something more realistic so to

00:08:22,560 --> 00:08:26,240
speak right

00:08:23,840 --> 00:08:27,840
so i'm gonna do another small demo let's

00:08:26,240 --> 00:08:29,599
say i have a producer function

00:08:27,840 --> 00:08:30,800
uh it is producing messages this could

00:08:29,599 --> 00:08:32,399
be anything this could be your iot

00:08:30,800 --> 00:08:34,240
device this could be your

00:08:32,399 --> 00:08:35,440
you know uh pos applications which are

00:08:34,240 --> 00:08:36,959
generating events

00:08:35,440 --> 00:08:38,959
and those events are getting dropped

00:08:36,959 --> 00:08:40,560
into a kafka topic

00:08:38,959 --> 00:08:42,560
now as soon as there is a message in the

00:08:40,560 --> 00:08:44,560
kafka topic i want another function to

00:08:42,560 --> 00:08:46,320
be invoked called consumer

00:08:44,560 --> 00:08:48,080
this consumer function is gonna invoke

00:08:46,320 --> 00:08:49,040
messages or consume messages from your

00:08:48,080 --> 00:08:50,720
topic

00:08:49,040 --> 00:08:52,399
and process them if it is able to

00:08:50,720 --> 00:08:54,080
successfully process them it will put

00:08:52,399 --> 00:08:55,519
the response back into another kafka

00:08:54,080 --> 00:08:57,040
queue called response

00:08:55,519 --> 00:08:58,320
but for any reason it is not able to

00:08:57,040 --> 00:08:59,519
process there is some error there is

00:08:58,320 --> 00:09:01,200
some exception

00:08:59,519 --> 00:09:02,480
it is going to put that into another

00:09:01,200 --> 00:09:03,680
queue called error so you can you know

00:09:02,480 --> 00:09:06,560
separately process them

00:09:03,680 --> 00:09:08,160
later now one good thing you know i want

00:09:06,560 --> 00:09:09,360
to call it here again is when you're

00:09:08,160 --> 00:09:11,839
listening to kafka

00:09:09,360 --> 00:09:13,680
messages coming into kafka topic i don't

00:09:11,839 --> 00:09:15,519
want x number of workers to be always

00:09:13,680 --> 00:09:18,080
running and listening to kafka

00:09:15,519 --> 00:09:19,440
what i really want is there is no power

00:09:18,080 --> 00:09:21,440
running or no application running

00:09:19,440 --> 00:09:23,279
only when messages arrive those parts

00:09:21,440 --> 00:09:24,880
are horizontally scaled out and actually

00:09:23,279 --> 00:09:27,600
delivering messages so let's go and you

00:09:24,880 --> 00:09:28,959
know see how this is going to work

00:09:27,600 --> 00:09:31,440
now if you look at the bottom half of my

00:09:28,959 --> 00:09:33,440
screen there are two functions i have

00:09:31,440 --> 00:09:34,800
one is the consumer function which is

00:09:33,440 --> 00:09:36,480
what i was talking about the consumer

00:09:34,800 --> 00:09:37,600
side of story and then there's a

00:09:36,480 --> 00:09:39,360
producer function which is actually

00:09:37,600 --> 00:09:41,440
going to produce these messages

00:09:39,360 --> 00:09:42,480
what connects both of these and the

00:09:41,440 --> 00:09:44,240
kafka topic

00:09:42,480 --> 00:09:46,080
is something called as a mqtrigger a

00:09:44,240 --> 00:09:47,680
message q trigger

00:09:46,080 --> 00:09:49,440
so the name of the message to trigger is

00:09:47,680 --> 00:09:50,000
kafka test it is going to invoke a

00:09:49,440 --> 00:09:52,240
function called

00:09:50,000 --> 00:09:53,600
consumer and the type of message queue

00:09:52,240 --> 00:09:54,880
is kafka

00:09:53,600 --> 00:09:57,279
it is going to listen on the request

00:09:54,880 --> 00:09:58,480
topic for any messages arriving and

00:09:57,279 --> 00:09:59,680
it is going to send all the messages

00:09:58,480 --> 00:10:00,880
which are processed successfully to

00:09:59,680 --> 00:10:02,480
response topic

00:10:00,880 --> 00:10:04,640
and any errors that happen they are

00:10:02,480 --> 00:10:07,120
going to get sent to error topic

00:10:04,640 --> 00:10:08,560
it's also gonna try three times before

00:10:07,120 --> 00:10:09,279
you know it decides to put anything in

00:10:08,560 --> 00:10:11,279
the error queue

00:10:09,279 --> 00:10:13,040
and and you can look at also lastly the

00:10:11,279 --> 00:10:14,720
content type of application or or the

00:10:13,040 --> 00:10:16,079
messages basically

00:10:14,720 --> 00:10:17,519
now before we go and you know actually

00:10:16,079 --> 00:10:19,279
execute this and i show you the you know

00:10:17,519 --> 00:10:20,720
processing of functions

00:10:19,279 --> 00:10:22,800
let me actually go and show you the code

00:10:20,720 --> 00:10:25,519
of you know all this

00:10:22,800 --> 00:10:27,200
so productive function now predictor

00:10:25,519 --> 00:10:28,160
function called simple protocol it uses

00:10:27,200 --> 00:10:30,720
a handler method

00:10:28,160 --> 00:10:32,480
uh it's a go program by the way uh and

00:10:30,720 --> 00:10:34,959
you know it has a certain uh

00:10:32,480 --> 00:10:36,720
argument that it needs all it is doing

00:10:34,959 --> 00:10:38,240
is connecting to your kafka message

00:10:36,720 --> 00:10:40,240
queue and you know processing those

00:10:38,240 --> 00:10:41,760
messages uh and there are about thousand

00:10:40,240 --> 00:10:43,360
messages we are gonna produce and put

00:10:41,760 --> 00:10:45,519
into a kafka queue

00:10:43,360 --> 00:10:46,560
and once it is done it is you know it is

00:10:45,519 --> 00:10:48,959
going to exit the function is going to

00:10:46,560 --> 00:10:50,560
exit and then it shop basically

00:10:48,959 --> 00:10:52,320
now once the messages have arrived in

00:10:50,560 --> 00:10:53,440
kafka queue it is going to get picked up

00:10:52,320 --> 00:10:54,800
by another

00:10:53,440 --> 00:10:56,959
you know component which is going to

00:10:54,800 --> 00:10:58,720
call the consumer.js function

00:10:56,959 --> 00:11:00,079
and contributing not a lot it is just

00:10:58,720 --> 00:11:01,519
picking up the message that it received

00:11:00,079 --> 00:11:02,880
from the kafka queue and it is printing

00:11:01,519 --> 00:11:04,160
it out that hey this is the response you

00:11:02,880 --> 00:11:05,519
know so to speak

00:11:04,160 --> 00:11:07,440
that's all there is in terms of

00:11:05,519 --> 00:11:10,640
functions

00:11:07,440 --> 00:11:12,320
now what i'm going to do is i'm going to

00:11:10,640 --> 00:11:13,760
invoke the function producer so it's

00:11:12,320 --> 00:11:14,880
going to produce a thousand messages but

00:11:13,760 --> 00:11:18,880
before i go there

00:11:14,880 --> 00:11:18,880
i want to show you something important

00:11:22,320 --> 00:11:26,240
so as you can see right now in the

00:11:23,600 --> 00:11:28,399
default in space i don't have any parts

00:11:26,240 --> 00:11:29,680
once i start producing messages what i'm

00:11:28,399 --> 00:11:31,839
expecting is there are

00:11:29,680 --> 00:11:33,279
parts which are created on the fly which

00:11:31,839 --> 00:11:34,240
will actually start consuming messages

00:11:33,279 --> 00:11:37,760
from my kafka queue

00:11:34,240 --> 00:11:37,760
so let's put them on the watch more

00:11:38,480 --> 00:11:43,839
in the second window now i'm going to

00:11:40,079 --> 00:11:43,839
call my producer function

00:11:47,120 --> 00:11:50,240
so this particular gonna produce now

00:11:48,959 --> 00:11:52,959
about thousand order messages

00:11:50,240 --> 00:11:53,920
and and we'll see two things happening

00:11:52,959 --> 00:11:55,360
one thing is that

00:11:53,920 --> 00:11:57,760
more parts will be treated here as the

00:11:55,360 --> 00:11:59,760
messages start arriving

00:11:57,760 --> 00:12:03,200
now as you can see one part has been

00:11:59,760 --> 00:12:03,200
created for consuming these messages

00:12:05,200 --> 00:12:08,839
and it is running in state and if i look

00:12:06,959 --> 00:12:11,760
at the logs of that

00:12:08,839 --> 00:12:13,839
part

00:12:11,760 --> 00:12:15,519
i can see it is producing about or it is

00:12:13,839 --> 00:12:17,760
consuming you know the 20th or 21st

00:12:15,519 --> 00:12:20,160
messages

00:12:17,760 --> 00:12:20,959
now right now it is only one part

00:12:20,160 --> 00:12:22,560
running

00:12:20,959 --> 00:12:24,800
and it is consuming the early set of

00:12:22,560 --> 00:12:26,399
messages but as it realizes

00:12:24,800 --> 00:12:28,160
there are more messages than a single

00:12:26,399 --> 00:12:30,959
part can handle

00:12:28,160 --> 00:12:32,480
this is actually going to auto scale so

00:12:30,959 --> 00:12:34,480
right now we see only part

00:12:32,480 --> 00:12:36,720
one part and we'll see in a couple of

00:12:34,480 --> 00:12:38,160
you know a second or maybe a minute

00:12:36,720 --> 00:12:39,519
a couple more parts getting spinned up

00:12:38,160 --> 00:12:40,480
and consuming all the messages that are

00:12:39,519 --> 00:12:42,880
getting you know

00:12:40,480 --> 00:12:44,800
uh written in the by the producer in our

00:12:42,880 --> 00:12:46,399
in our case

00:12:44,800 --> 00:12:48,320
all right so that's that's a very quick

00:12:46,399 --> 00:12:49,760
and simple demo uh what we can do is we

00:12:48,320 --> 00:12:51,040
can we can let the auto scaling happen

00:12:49,760 --> 00:12:51,680
here and we can come back and watch it a

00:12:51,040 --> 00:12:53,120
little later

00:12:51,680 --> 00:12:54,320
and we'll continue for rest of the

00:12:53,120 --> 00:12:56,800
presentation and you know talk through

00:12:54,320 --> 00:12:56,800
other things

00:12:57,040 --> 00:13:00,240
right another example you know that is

00:12:59,360 --> 00:13:02,399
again available

00:13:00,240 --> 00:13:03,360
uh under on the github repository of

00:13:02,399 --> 00:13:04,800
session

00:13:03,360 --> 00:13:06,720
uh we actually use a six set of

00:13:04,800 --> 00:13:08,160
functions uh one of them is a kafka

00:13:06,720 --> 00:13:09,920
producer very similar to our producer

00:13:08,160 --> 00:13:11,440
that we just saw right now

00:13:09,920 --> 00:13:13,600
that produces messages put them in a

00:13:11,440 --> 00:13:15,920
kafka cube and then

00:13:13,600 --> 00:13:17,360
there are about you know six other

00:13:15,920 --> 00:13:18,880
functions one of them is the consumer

00:13:17,360 --> 00:13:19,680
the consumer basically picks up messages

00:13:18,880 --> 00:13:21,440
from kafka

00:13:19,680 --> 00:13:23,920
that's the messaging of the data and put

00:13:21,440 --> 00:13:26,160
them into redis the other four functions

00:13:23,920 --> 00:13:28,079
really read redis data and you know

00:13:26,160 --> 00:13:29,519
provide it as an api endpoint

00:13:28,079 --> 00:13:31,519
and the last function is the web

00:13:29,519 --> 00:13:32,079
function it basically queries the api in

00:13:31,519 --> 00:13:33,360
points

00:13:32,079 --> 00:13:35,440
and show you all you know nice

00:13:33,360 --> 00:13:36,720
statistics now i'm not going to run this

00:13:35,440 --> 00:13:38,480
it'll probably take another hour for us

00:13:36,720 --> 00:13:40,480
to try it out and show entire

00:13:38,480 --> 00:13:42,399
code and working but you can go and

00:13:40,480 --> 00:13:43,839
check it out on this repository

00:13:42,399 --> 00:13:45,519
and there is also a screenshot and a

00:13:43,839 --> 00:13:48,959
demo of you know this working in in

00:13:45,519 --> 00:13:50,800
you know live basically

00:13:48,959 --> 00:13:53,040
cool let's go and see if there is more

00:13:50,800 --> 00:13:55,920
messages or more parts getting

00:13:53,040 --> 00:13:58,399
you know produced right i think it is

00:13:55,920 --> 00:14:00,480
still consuming about 235 order messages

00:13:58,399 --> 00:14:01,760
uh if it is if it finds more than one

00:14:00,480 --> 00:14:02,079
consumer growth it will probably scale

00:14:01,760 --> 00:14:03,440
out

00:14:02,079 --> 00:14:04,800
uh but if it doesn't it may not scale

00:14:03,440 --> 00:14:06,639
out uh and i don't know which way how

00:14:04,800 --> 00:14:08,079
configured right now

00:14:06,639 --> 00:14:10,079
but but you get the gist of this once

00:14:08,079 --> 00:14:11,920
these thousand messages are consumed

00:14:10,079 --> 00:14:13,120
the part that is running calf cut is is

00:14:11,920 --> 00:14:14,240
gonna get shut down

00:14:13,120 --> 00:14:16,639
and you know it is gonna get back to

00:14:14,240 --> 00:14:18,160
zero state so that is a truly elastic

00:14:16,639 --> 00:14:19,040
infrastructure that you can scale out

00:14:18,160 --> 00:14:21,600
and scale in

00:14:19,040 --> 00:14:23,199
as per your requirements and and still

00:14:21,600 --> 00:14:24,720
able to you know build event driven

00:14:23,199 --> 00:14:26,079
applications which react

00:14:24,720 --> 00:14:30,079
when there is an event and we don't

00:14:26,079 --> 00:14:32,160
react when there is no event so to speak

00:14:30,079 --> 00:14:33,920
great now one thing i would like to talk

00:14:32,160 --> 00:14:36,160
about is contributing

00:14:33,920 --> 00:14:37,600
uh not just to vision to any open source

00:14:36,160 --> 00:14:39,199
project and i want to

00:14:37,600 --> 00:14:42,839
bring a personal anecdote you know from

00:14:39,199 --> 00:14:45,920
my journey of open source

00:14:42,839 --> 00:14:48,000
so i really started my career

00:14:45,920 --> 00:14:49,680
into the enterprise software uh i was a

00:14:48,000 --> 00:14:51,040
mechanical engineer by education so most

00:14:49,680 --> 00:14:51,600
of what i did was you know learning on

00:14:51,040 --> 00:14:53,120
the job

00:14:51,600 --> 00:14:55,199
in my early years of you know software

00:14:53,120 --> 00:14:56,240
engineering career i worked with

00:14:55,199 --> 00:14:58,160
enterprise companies

00:14:56,240 --> 00:14:59,680
not a lot of open source uh of course i

00:14:58,160 --> 00:15:00,399
did use open source like java and other

00:14:59,680 --> 00:15:01,920
things

00:15:00,399 --> 00:15:03,680
but most of the things that i did or

00:15:01,920 --> 00:15:04,959
that i work on were closed source

00:15:03,680 --> 00:15:08,880
and you know driven by commercial

00:15:04,959 --> 00:15:10,160
companies i think around 2010 11

00:15:08,880 --> 00:15:12,240
i discovered a project called cloud

00:15:10,160 --> 00:15:13,600
foundry it was a past platform uh very

00:15:12,240 --> 00:15:15,120
promising and you know very interesting

00:15:13,600 --> 00:15:16,959
probably ahead of its time

00:15:15,120 --> 00:15:18,480
and i discovered the value of you know

00:15:16,959 --> 00:15:20,000
open source software i could download

00:15:18,480 --> 00:15:20,639
the entire stack i could run it on my

00:15:20,000 --> 00:15:22,320
machine

00:15:20,639 --> 00:15:24,000
try it out fix the bug fix the

00:15:22,320 --> 00:15:24,959
documentation send something back

00:15:24,000 --> 00:15:26,959
upstream

00:15:24,959 --> 00:15:29,759
why join github you know as any

00:15:26,959 --> 00:15:32,560
developer would do back in the day

00:15:29,759 --> 00:15:33,839
um i think the early years of my github

00:15:32,560 --> 00:15:34,800
and general open source activity was

00:15:33,839 --> 00:15:36,880
still you know watching from the

00:15:34,800 --> 00:15:38,639
sidelines you know see what is happening

00:15:36,880 --> 00:15:40,320
maybe look at a few projects maybe there

00:15:38,639 --> 00:15:42,320
is a few issues if you try out something

00:15:40,320 --> 00:15:44,639
maybe it is a small documentation patch

00:15:42,320 --> 00:15:46,160
maybe fix one word here one word there

00:15:44,639 --> 00:15:47,839
but i was really happy you know i could

00:15:46,160 --> 00:15:51,519
contribute in my own small ways

00:15:47,839 --> 00:15:54,000
in my own tiny ways to open source

00:15:51,519 --> 00:15:54,639
over time you know i took small baby

00:15:54,000 --> 00:15:57,199
steps

00:15:54,639 --> 00:15:58,720
uh so i created a solid stack workshop

00:15:57,199 --> 00:15:59,600
basically i learned salt stack as part

00:15:58,720 --> 00:16:00,880
of my work

00:15:59,600 --> 00:16:02,079
salt stack is again you know another

00:16:00,880 --> 00:16:02,720
open source configuration management

00:16:02,079 --> 00:16:04,079
tool

00:16:02,720 --> 00:16:05,839
and i realized there is not a single

00:16:04,079 --> 00:16:07,360
demo out there where you can spin up

00:16:05,839 --> 00:16:09,199
you know three boxes of vagrant on your

00:16:07,360 --> 00:16:10,079
own machine and play around you know

00:16:09,199 --> 00:16:11,600
with salt

00:16:10,079 --> 00:16:13,040
uh the way you would do with a very

00:16:11,600 --> 00:16:14,000
realistic kind of you know application

00:16:13,040 --> 00:16:16,160
or demo

00:16:14,000 --> 00:16:18,079
so i built a small utility uh you know

00:16:16,160 --> 00:16:19,360
put that out in the open source i talked

00:16:18,079 --> 00:16:20,560
about it a couple of my colleagues my

00:16:19,360 --> 00:16:22,880
friends and they were really happy that

00:16:20,560 --> 00:16:24,160
you know they could actually clone it

00:16:22,880 --> 00:16:25,759
up it and you know they could they could

00:16:24,160 --> 00:16:26,639
actually start playing with salt so

00:16:25,759 --> 00:16:28,240
that's a great

00:16:26,639 --> 00:16:29,759
great satisfaction uh you know from

00:16:28,240 --> 00:16:30,240
giving back to community and you know

00:16:29,759 --> 00:16:33,839
making

00:16:30,240 --> 00:16:35,199
somebody's learning easy and around 2017

00:16:33,839 --> 00:16:36,480
i started with fishing

00:16:35,199 --> 00:16:37,600
i didn't know golang you know for

00:16:36,480 --> 00:16:38,880
example when i started with christian i

00:16:37,600 --> 00:16:40,720
learned it on the job

00:16:38,880 --> 00:16:42,160
i started continuing to solve features

00:16:40,720 --> 00:16:44,399
small documentation patches

00:16:42,160 --> 00:16:45,519
uh small bugs over time you know i

00:16:44,399 --> 00:16:47,040
started converting bigger and bigger

00:16:45,519 --> 00:16:48,240
features and eventually you know i'm

00:16:47,040 --> 00:16:49,199
maintaining the fission project as of

00:16:48,240 --> 00:16:52,399
today

00:16:49,199 --> 00:16:53,600
so i want to say you know don't don't

00:16:52,399 --> 00:16:54,800
think you know that you're to start big

00:16:53,600 --> 00:16:56,240
don't think that you'll do everything

00:16:54,800 --> 00:16:56,639
you know right from the beginning very

00:16:56,240 --> 00:16:58,720
big

00:16:56,639 --> 00:17:00,560
start small starts helping in smaller

00:16:58,720 --> 00:17:01,600
ways you can eventually you will reach a

00:17:00,560 --> 00:17:04,559
point you know where you'll start

00:17:01,600 --> 00:17:06,160
contributing in bigger and bigger ways

00:17:04,559 --> 00:17:07,679
now after expression is concerned you

00:17:06,160 --> 00:17:08,880
can go to fashion you know

00:17:07,679 --> 00:17:11,760
dodge.fashion.ios

00:17:08,880 --> 00:17:13,120
docs contributing and you know build

00:17:11,760 --> 00:17:13,919
code on your machine and see how it is

00:17:13,120 --> 00:17:15,760
working

00:17:13,919 --> 00:17:17,439
if you run into any shoes please join

00:17:15,760 --> 00:17:19,199
slack ask questions to you know

00:17:17,439 --> 00:17:21,199
contributors other community members

00:17:19,199 --> 00:17:23,280
they're very you know happy and you know

00:17:21,199 --> 00:17:25,199
friendly to help others

00:17:23,280 --> 00:17:27,520
uh also there's another project you know

00:17:25,199 --> 00:17:29,280
that i'm kind of practically

00:17:27,520 --> 00:17:32,080
quite involved into is it's called what

00:17:29,280 --> 00:17:34,320
cube it's a chatbot for kubernetes works

00:17:32,080 --> 00:17:36,080
on top of you know microsoft

00:17:34,320 --> 00:17:37,360
teams matter modes slack bunch of chat

00:17:36,080 --> 00:17:38,559
platforms and

00:17:37,360 --> 00:17:40,559
again you know very nice project to

00:17:38,559 --> 00:17:41,760
start contributing make small changes

00:17:40,559 --> 00:17:43,120
understand you know infrastructure

00:17:41,760 --> 00:17:45,440
understand systems and so on and so

00:17:43,120 --> 00:17:45,440
forth

00:17:45,520 --> 00:17:49,600
cool uh let's see and go you know if our

00:17:48,240 --> 00:17:52,240
parts have scaled out our messages are

00:17:49,600 --> 00:17:53,440
still consuming okay so we are about 715

00:17:52,240 --> 00:17:55,200
i don't think it did scale out because

00:17:53,440 --> 00:17:56,960
there's probably only one consumer group

00:17:55,200 --> 00:17:58,240
but if i had more than you know one two

00:17:56,960 --> 00:17:59,520
three four consumer groups

00:17:58,240 --> 00:18:01,760
then it would have scaled like three

00:17:59,520 --> 00:18:02,320
four parts uh and consumed all the

00:18:01,760 --> 00:18:04,640
messages

00:18:02,320 --> 00:18:06,400
and you can see by probably in couple

00:18:04,640 --> 00:18:07,600
more minutes a thousand messages will be

00:18:06,400 --> 00:18:09,280
consumed and done

00:18:07,600 --> 00:18:10,720
and and the part will be uh you know

00:18:09,280 --> 00:18:12,080
shut down the one that was consuming

00:18:10,720 --> 00:18:14,400
messages

00:18:12,080 --> 00:18:15,600
so great uh that's a simple demo uh if

00:18:14,400 --> 00:18:17,200
you have any questions i'm happy to take

00:18:15,600 --> 00:18:18,799
them on the github discussions as well

00:18:17,200 --> 00:18:21,760
uh but you know thanks for listening to

00:18:18,799 --> 00:18:21,760
me uh patiently

00:18:26,720 --> 00:18:29,840
we

00:18:28,090 --> 00:18:31,760
[Music]

00:18:29,840 --> 00:18:33,200
you have brought in a lot of energy a

00:18:31,760 --> 00:18:35,200
lot of shine in our

00:18:33,200 --> 00:18:37,280
head of satellite event thank you so

00:18:35,200 --> 00:18:43,840
much for that

00:18:37,280 --> 00:18:43,840
thank you thanks for the uh

00:18:44,400 --> 00:18:49,440
celebrating and a big shout out to all

00:18:47,039 --> 00:18:52,000
our community in north of india

00:18:49,440 --> 00:18:53,440
folks out there make some noise share

00:18:52,000 --> 00:18:56,000
with us on twitter

00:18:53,440 --> 00:18:57,840
github satellite thank you the session

00:18:56,000 --> 00:19:00,480
was really awesome let's jump to the

00:18:57,840 --> 00:19:02,320
questions now

00:19:00,480 --> 00:19:03,760
yes vishal record questions for you and

00:19:02,320 --> 00:19:06,480
i'll take the first one

00:19:03,760 --> 00:19:07,039
how does one build a chain of even

00:19:06,480 --> 00:19:11,280
functions

00:19:07,039 --> 00:19:14,000
with fission

00:19:11,280 --> 00:19:14,320
yeah that's a great question uh there is

00:19:14,000 --> 00:19:15,919
a

00:19:14,320 --> 00:19:17,360
project called fashion workflows which

00:19:15,919 --> 00:19:19,120
allows you to do that to some extent

00:19:17,360 --> 00:19:20,799
uh but also our users you know they have

00:19:19,120 --> 00:19:23,600
actually built out their own custom

00:19:20,799 --> 00:19:25,039
logic to build a chain of functions they

00:19:23,600 --> 00:19:26,880
basically use message queue as

00:19:25,039 --> 00:19:28,720
a way of origin stating so one function

00:19:26,880 --> 00:19:29,679
produces something it you know puts into

00:19:28,720 --> 00:19:30,880
a message queue and there is some other

00:19:29,679 --> 00:19:32,160
function listening to it

00:19:30,880 --> 00:19:36,000
and that just builds a chain of

00:19:32,160 --> 00:19:36,000
functions you know that you can execute

00:19:36,840 --> 00:19:41,679
basically

00:19:38,240 --> 00:19:44,559
awesome um when it comes to

00:19:41,679 --> 00:19:46,559
lambda or azure functions like when are

00:19:44,559 --> 00:19:49,280
those better to use as compared to

00:19:46,559 --> 00:19:52,400
fission for example

00:19:49,280 --> 00:19:52,960
absolutely i think uh for anybody who is

00:19:52,400 --> 00:19:54,880
new

00:19:52,960 --> 00:19:56,400
uh in general to computing or let's say

00:19:54,880 --> 00:19:58,000
you know fast i would highly recommend

00:19:56,400 --> 00:20:00,000
them using lambda or you know azure

00:19:58,000 --> 00:20:01,679
functions they're a great starting point

00:20:00,000 --> 00:20:02,880
they give you a lot of value without

00:20:01,679 --> 00:20:04,559
having to understand all of the

00:20:02,880 --> 00:20:06,480
underlying you know nuts and bolts of

00:20:04,559 --> 00:20:07,440
you know infrastructure

00:20:06,480 --> 00:20:09,200
so i think they are they're a great

00:20:07,440 --> 00:20:10,720
starting point uh and in fact i would

00:20:09,200 --> 00:20:12,080
say even for smaller businesses early

00:20:10,720 --> 00:20:12,400
stage businesses they are great value

00:20:12,080 --> 00:20:13,840
add

00:20:12,400 --> 00:20:15,520
they give you so much power without

00:20:13,840 --> 00:20:17,120
having to worry about the infrastructure

00:20:15,520 --> 00:20:18,799
only beyond a certain point when you

00:20:17,120 --> 00:20:20,000
start scaling out i would really think

00:20:18,799 --> 00:20:21,520
about fast and kubernetes

00:20:20,000 --> 00:20:22,720
as a strategy or you know if it is going

00:20:21,520 --> 00:20:23,280
to give me something more than what i

00:20:22,720 --> 00:20:24,960
get

00:20:23,280 --> 00:20:27,200
from azure functions or lambda for

00:20:24,960 --> 00:20:27,200
example

00:20:27,919 --> 00:20:31,520
that's a great advice for how one should

00:20:29,600 --> 00:20:32,320
look at transitioning from one stack to

00:20:31,520 --> 00:20:34,320
another

00:20:32,320 --> 00:20:36,000
and we got another one and uh you shared

00:20:34,320 --> 00:20:37,679
a lot about the projects

00:20:36,000 --> 00:20:39,440
uh where you are contributing michelle

00:20:37,679 --> 00:20:41,600
and i think that's like to this

00:20:39,440 --> 00:20:43,120
so audience is asking here how do i get

00:20:41,600 --> 00:20:47,280
involved in fishing

00:20:43,120 --> 00:20:47,280
and start contributing to it

00:20:47,600 --> 00:20:51,600
sure sure uh i think the the first and

00:20:50,480 --> 00:20:54,159
foremost thing i would do

00:20:51,600 --> 00:20:55,760
you know is go check out the project and

00:20:54,159 --> 00:20:57,600
try it out forget about contributing but

00:20:55,760 --> 00:20:59,679
also understand what it does right

00:20:57,600 --> 00:21:00,640
build a simple function deploy it see if

00:20:59,679 --> 00:21:02,240
it works right

00:21:00,640 --> 00:21:03,760
if you again run into any issues join

00:21:02,240 --> 00:21:04,880
the slack people are happy to help you

00:21:03,760 --> 00:21:06,240
know and guide you

00:21:04,880 --> 00:21:08,000
once you understood what the project

00:21:06,240 --> 00:21:09,520
does then i would go and look at the

00:21:08,000 --> 00:21:10,880
good first issues on fiction or any

00:21:09,520 --> 00:21:12,240
repository i think most of the qualities

00:21:10,880 --> 00:21:14,320
do follow the standard

00:21:12,240 --> 00:21:15,760
and find out a very small issue in the

00:21:14,320 --> 00:21:17,039
area that you are comfortable with maybe

00:21:15,760 --> 00:21:17,679
with a message queue maybe with a

00:21:17,039 --> 00:21:19,360
database

00:21:17,679 --> 00:21:21,120
maybe something you know simple as

00:21:19,360 --> 00:21:22,960
linting code for example right

00:21:21,120 --> 00:21:24,480
and start contributing what that will do

00:21:22,960 --> 00:21:25,520
is that will give you an idea of the

00:21:24,480 --> 00:21:28,080
project structure

00:21:25,520 --> 00:21:30,240
how to build how to deploy once my first

00:21:28,080 --> 00:21:31,280
you know bfx simple bug is done then i

00:21:30,240 --> 00:21:33,200
would go and you know figure out

00:21:31,280 --> 00:21:34,320
more complex bugs smaller features and

00:21:33,200 --> 00:21:36,720
get more and more involved into the

00:21:34,320 --> 00:21:36,720
project

00:21:37,440 --> 00:21:42,720
thank you that's a great advice

00:21:40,640 --> 00:21:44,159
any special messaging for say our

00:21:42,720 --> 00:21:46,960
student community out there

00:21:44,159 --> 00:21:50,080
and early developers anything different

00:21:46,960 --> 00:21:50,080
you would want to suggest them

00:21:50,159 --> 00:21:56,320
uh yeah i think i i do advise you know a

00:21:54,400 --> 00:21:58,640
few of my family and your friends

00:21:56,320 --> 00:22:00,720
were students i think uh start basic

00:21:58,640 --> 00:22:03,360
start small start with a simple language

00:22:00,720 --> 00:22:05,360
but definitely go to depth of it and

00:22:03,360 --> 00:22:07,520
have a lot of attention to detail

00:22:05,360 --> 00:22:09,520
and today you know we are lucky in 2021

00:22:07,520 --> 00:22:12,559
we have so many tools whether it is a

00:22:09,520 --> 00:22:13,679
browser-based ide or you know github

00:22:12,559 --> 00:22:15,679
github actions

00:22:13,679 --> 00:22:17,360
we can do so many things without

00:22:15,679 --> 00:22:19,200
actually having to know and you know

00:22:17,360 --> 00:22:21,360
build everything on your own machine

00:22:19,200 --> 00:22:23,200
uh so i would say pick up one language

00:22:21,360 --> 00:22:24,159
get great at it and beyond that explore

00:22:23,200 --> 00:22:26,080
your interests you know whether it is

00:22:24,159 --> 00:22:27,840
intro systems or ai or machine learning

00:22:26,080 --> 00:22:29,600
or big data you know whatever it may be

00:22:27,840 --> 00:22:30,880
and slowly really you know progress with

00:22:29,600 --> 00:22:33,440
open source projects because there is so

00:22:30,880 --> 00:22:33,440
much out there

00:22:34,640 --> 00:22:37,679
thanks thanks for sharing that and i

00:22:36,000 --> 00:22:38,640
wish all of this was available for me as

00:22:37,679 --> 00:22:41,679
well

00:22:38,640 --> 00:22:43,120
as i was growing up so vishal uh you

00:22:41,679 --> 00:22:44,000
mentioned something very interesting

00:22:43,120 --> 00:22:46,400
about the

00:22:44,000 --> 00:22:48,400
pune communities and cncf meetup would

00:22:46,400 --> 00:22:49,840
love to know more on how it started

00:22:48,400 --> 00:22:52,480
and where it is today what is your

00:22:49,840 --> 00:22:52,480
future plan

00:22:52,880 --> 00:22:55,919
absolutely absolutely yeah that's a

00:22:54,480 --> 00:22:58,000
topic close to my heart

00:22:55,919 --> 00:22:59,280
uh i think when kubernetes was very

00:22:58,000 --> 00:23:01,120
early and

00:22:59,280 --> 00:23:02,880
still the dominant orchestrator to speak

00:23:01,120 --> 00:23:04,720
i thought missiles will take over but uh

00:23:02,880 --> 00:23:06,720
i realized kubernetes a lot of power

00:23:04,720 --> 00:23:08,080
i started the meetup because uh there

00:23:06,720 --> 00:23:09,679
were a few people that

00:23:08,080 --> 00:23:10,960
we knew about kubernetes and we thought

00:23:09,679 --> 00:23:11,600
it's a good idea to share with broader

00:23:10,960 --> 00:23:13,120
community

00:23:11,600 --> 00:23:14,559
and hopefully more people will join us

00:23:13,120 --> 00:23:16,640
so when the first meetup we did it was

00:23:14,559 --> 00:23:18,000
just eight people including myself

00:23:16,640 --> 00:23:20,400
and over time you know it has grown to

00:23:18,000 --> 00:23:22,080
now almost 2000 people actively in the

00:23:20,400 --> 00:23:23,520
in the meetup group but also 50 60

00:23:22,080 --> 00:23:25,440
joining us every month

00:23:23,520 --> 00:23:27,600
uh we talk about you know all the basic

00:23:25,440 --> 00:23:29,039
topics and some advanced topics as well

00:23:27,600 --> 00:23:30,799
and and uh learn from each other

00:23:29,039 --> 00:23:32,320
basically i mean that's the goal and and

00:23:30,799 --> 00:23:34,480
that was the original idea that you know

00:23:32,320 --> 00:23:36,000
what i know if i can share and you know

00:23:34,480 --> 00:23:37,120
others share from their learnings the

00:23:36,000 --> 00:23:38,720
mutual learnings will be

00:23:37,120 --> 00:23:41,520
met together more than you know what we

00:23:38,720 --> 00:23:41,520
can do individually

00:23:43,200 --> 00:23:47,200
uh i'm sure folks who are listening in

00:23:45,760 --> 00:23:50,960
would want to also know

00:23:47,200 --> 00:23:52,720
how can they join in

00:23:50,960 --> 00:23:54,880
absolutely so here's how to go to

00:23:52,720 --> 00:23:56,159
meetup.com kubernetes pune

00:23:54,880 --> 00:23:57,760
and and if you're already a member of

00:23:56,159 --> 00:23:59,360
meetup you just join the group if you're

00:23:57,760 --> 00:24:02,799
not just sign up for meetup.com

00:23:59,360 --> 00:24:02,799
and join you know kubernetes and

00:24:02,840 --> 00:24:07,840
poolyonmeetup.com

00:24:05,200 --> 00:24:09,200
great great that's that's great and uh

00:24:07,840 --> 00:24:11,039
this question has been coming up for

00:24:09,200 --> 00:24:12,400
almost every speaker out here so there

00:24:11,039 --> 00:24:14,559
it is for you

00:24:12,400 --> 00:24:15,520
what's your favorite set of features at

00:24:14,559 --> 00:24:18,640
github

00:24:15,520 --> 00:24:21,520
and what do you use the most

00:24:18,640 --> 00:24:23,279
yeah absolutely absolutely if you ask me

00:24:21,520 --> 00:24:25,840
what is my most favorite one today

00:24:23,279 --> 00:24:27,520
uh it definitely has to be you know the

00:24:25,840 --> 00:24:28,159
vs code on github where you can open a

00:24:27,520 --> 00:24:30,880
browser

00:24:28,159 --> 00:24:31,279
you know ide and start developing i

00:24:30,880 --> 00:24:32,559
think

00:24:31,279 --> 00:24:34,159
the other one that i really like is the

00:24:32,559 --> 00:24:36,159
github actions because it gives you a

00:24:34,159 --> 00:24:37,679
truly integrated workflow right from

00:24:36,159 --> 00:24:39,760
source code management to writing code

00:24:37,679 --> 00:24:41,760
to ci cd all in a browser window

00:24:39,760 --> 00:24:45,440
so so i think the vs code in browser is

00:24:41,760 --> 00:24:45,440
my most favorite feature i must say

00:24:45,840 --> 00:24:48,880
wow so it's actually coming really close

00:24:48,159 --> 00:24:52,640
most like

00:24:48,880 --> 00:24:56,320
code spaces and actions and that's what

00:24:52,640 --> 00:24:59,520
uh we've been hearing from folks as well

00:24:56,320 --> 00:25:03,279
absolutely when it comes to

00:24:59,520 --> 00:25:06,080
other projects that you contribute to

00:25:03,279 --> 00:25:07,120
is this usually in the same area or do

00:25:06,080 --> 00:25:09,360
you

00:25:07,120 --> 00:25:10,320
do you prefer like again from an advice

00:25:09,360 --> 00:25:13,039
to others as well

00:25:10,320 --> 00:25:16,320
would you prefer to deepen in one area

00:25:13,039 --> 00:25:16,320
or explore multiple

00:25:16,880 --> 00:25:20,400
sure uh i think in past i tried to do

00:25:19,679 --> 00:25:22,000
multiple

00:25:20,400 --> 00:25:23,440
uh but i think at least personally from

00:25:22,000 --> 00:25:24,880
my perspective what happens is then you

00:25:23,440 --> 00:25:26,799
spread yourself too thin into too many

00:25:24,880 --> 00:25:28,640
you know areas and you don't get depth

00:25:26,799 --> 00:25:29,919
i prefer to focus on one area for

00:25:28,640 --> 00:25:31,279
example even if you look at just

00:25:29,919 --> 00:25:32,720
you know infrastructure there are

00:25:31,279 --> 00:25:33,520
probably hundreds of projects out there

00:25:32,720 --> 00:25:34,640
and i don't think you can again

00:25:33,520 --> 00:25:35,600
contribute to all hundreds of them

00:25:34,640 --> 00:25:38,400
anyways

00:25:35,600 --> 00:25:39,760
so i would really focus on one area uh

00:25:38,400 --> 00:25:40,799
get depth into that and then

00:25:39,760 --> 00:25:42,559
choose a few projects that you can

00:25:40,799 --> 00:25:43,840
contribute to you know consistently i

00:25:42,559 --> 00:25:45,120
believe the consistency over time you

00:25:43,840 --> 00:25:46,480
know is a lot more important

00:25:45,120 --> 00:25:48,720
than contributing to x number of

00:25:46,480 --> 00:25:49,200
projects uh if you're early in your

00:25:48,720 --> 00:25:51,039
career

00:25:49,200 --> 00:25:52,159
or your college student who still don't

00:25:51,039 --> 00:25:53,919
know what you want to do whether it's

00:25:52,159 --> 00:25:54,480
system design or big data or machine

00:25:53,919 --> 00:25:56,080
learning

00:25:54,480 --> 00:25:57,919
it's okay to explore it's okay to be a

00:25:56,080 --> 00:25:59,200
little open but at some point you have

00:25:57,919 --> 00:26:00,559
to take a call and say hey i'm gonna

00:25:59,200 --> 00:26:02,000
focus on this one area

00:26:00,559 --> 00:26:05,840
and consistently spend my time over

00:26:02,000 --> 00:26:05,840
let's say you know next couple of years

00:26:06,799 --> 00:26:10,000
that's great that's great advice and

00:26:09,039 --> 00:26:12,159
definitely very very

00:26:10,000 --> 00:26:13,840
useful for all our audience and vishal

00:26:12,159 --> 00:26:14,960
with that we'll wrap up the question and

00:26:13,840 --> 00:26:16,799
answers here but

00:26:14,960 --> 00:26:18,640
for our audience you're gonna hang

00:26:16,799 --> 00:26:19,760
around in the discussions room with them

00:26:18,640 --> 00:26:22,400
for next 30 minutes

00:26:19,760 --> 00:26:24,720
so everybody out there do catch him for

00:26:22,400 --> 00:26:26,240
all the amazing work that he's doing

00:26:24,720 --> 00:26:28,000
learn from him his experiential

00:26:26,240 --> 00:26:29,679
knowledge especially about how to

00:26:28,000 --> 00:26:30,880
contribute and getting started with the

00:26:29,679 --> 00:26:33,520
open source projects

00:26:30,880 --> 00:26:35,360
with that bye vishal and we will see you

00:26:33,520 --> 00:26:39,840
in the get up actions room

00:26:35,360 --> 00:26:39,840
leave you there with all our audience

00:26:40,490 --> 00:26:43,589

YouTube URL: https://www.youtube.com/watch?v=IDttO3N2RmA


