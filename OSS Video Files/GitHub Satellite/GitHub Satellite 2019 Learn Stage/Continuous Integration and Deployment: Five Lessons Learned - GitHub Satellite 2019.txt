Title: Continuous Integration and Deployment: Five Lessons Learned - GitHub Satellite 2019
Publication date: 2019-05-25
Playlist: GitHub Satellite 2019 Learn Stage
Description: 
	Presented by Simina Pasat, Director of Product Management, and Jamie Cool, Director of Program Management, Microsoft

As builders, we love taking a step back, learning from our users and understanding how they use the tools we build. We looked at some of the most popular open source projects on GitHub, and we talked with enterprises using GitHub for their code, collaboration and automation. In this presentation, we 'll share five lessons learned when it comes to continuous integration and deployments.

About GitHub Satellite 2019
A community connected by code

Explore our interconnected communityâ€”and how collaboration turns ideas into innovations.

Join us in November at San Francisco's Palace of Fine Arts for GitHub Universe - https://githubuniverse.com/
Captions: 
	00:00:01,520 --> 00:00:07,040
thank you so much for being here today

00:00:03,919 --> 00:00:09,519
for joining us at github satellite

00:00:07,040 --> 00:00:10,719
personally i'm super excited about the

00:00:09,519 --> 00:00:13,280
keynote

00:00:10,719 --> 00:00:15,360
and i hope that every single one of you

00:00:13,280 --> 00:00:18,320
found something really exciting in the

00:00:15,360 --> 00:00:18,320
keynote as well

00:00:18,720 --> 00:00:23,439
so i want you all to take a moment and

00:00:21,680 --> 00:00:26,480
think about the last time

00:00:23,439 --> 00:00:28,800
when you made a change in your lives

00:00:26,480 --> 00:00:30,480
maybe it was a small change like maybe

00:00:28,800 --> 00:00:31,279
you had some pretzels this morning

00:00:30,480 --> 00:00:34,239
instead of your

00:00:31,279 --> 00:00:35,440
the usual cereal cup or maybe it was a

00:00:34,239 --> 00:00:40,719
really big change

00:00:35,440 --> 00:00:40,719
like changing your job or having a child

00:00:40,800 --> 00:00:44,320
no matter of the changes that we make in

00:00:43,280 --> 00:00:47,360
our lives

00:00:44,320 --> 00:00:50,879
big or small they have an

00:00:47,360 --> 00:00:53,360
impact on our lives

00:00:50,879 --> 00:00:54,480
so what if when you make a change in

00:00:53,360 --> 00:00:57,280
your life

00:00:54,480 --> 00:00:58,239
you could firstly try it out see how it

00:00:57,280 --> 00:01:00,640
goes

00:00:58,239 --> 00:01:01,520
learn about the side effects and then

00:01:00,640 --> 00:01:04,479
make it happen

00:01:01,520 --> 00:01:06,320
when you know it's going to be fine i

00:01:04,479 --> 00:01:07,680
will let you think about if you want to

00:01:06,320 --> 00:01:10,640
do that in your life

00:01:07,680 --> 00:01:11,600
or if you prefer living your life as it

00:01:10,640 --> 00:01:13,920
is today

00:01:11,600 --> 00:01:14,720
but in the next half an hour we want to

00:01:13,920 --> 00:01:16,640
talk to you

00:01:14,720 --> 00:01:18,000
about how we make changes in the

00:01:16,640 --> 00:01:19,759
software projects

00:01:18,000 --> 00:01:23,280
and the lessons we learned from making

00:01:19,759 --> 00:01:23,280
changes in our projects

00:01:23,600 --> 00:01:28,000
so there's over 100 million repositories

00:01:26,640 --> 00:01:30,479
on github

00:01:28,000 --> 00:01:31,200
so this means that we and every single

00:01:30,479 --> 00:01:34,079
one of you

00:01:31,200 --> 00:01:37,200
have tons of opportunities to learn from

00:01:34,079 --> 00:01:39,200
these projects and from their practices

00:01:37,200 --> 00:01:40,640
and today we want to share with you some

00:01:39,200 --> 00:01:42,960
of the lessons we learned

00:01:40,640 --> 00:01:43,920
from some of the open source projects on

00:01:42,960 --> 00:01:46,560
github

00:01:43,920 --> 00:01:47,360
and from some of the enterprises in the

00:01:46,560 --> 00:01:49,759
way that they do

00:01:47,360 --> 00:01:52,880
automation continuous integration and

00:01:49,759 --> 00:01:52,880
continuous deployment

00:01:53,520 --> 00:01:56,640
my name is semina passat and i'm a

00:01:55,680 --> 00:01:59,360
product manager

00:01:56,640 --> 00:02:02,159
here at github and i used to work in the

00:01:59,360 --> 00:02:05,280
developer space for the last years

00:02:02,159 --> 00:02:07,840
i worked on services for gaming in xbox

00:02:05,280 --> 00:02:10,399
i worked on mobile developer tools and

00:02:07,840 --> 00:02:14,239
now i'm so excited to join github

00:02:10,399 --> 00:02:16,160
the home for you developers and as i was

00:02:14,239 --> 00:02:18,800
walking here today to the venue

00:02:16,160 --> 00:02:21,280
i was so happy to see many developers

00:02:18,800 --> 00:02:24,239
who made github what it is today

00:02:21,280 --> 00:02:24,640
and also many of our partners people

00:02:24,239 --> 00:02:27,520
like

00:02:24,640 --> 00:02:28,800
travis ci and companies like circle

00:02:27,520 --> 00:02:31,840
without them

00:02:28,800 --> 00:02:34,000
github wouldn't be what it is today

00:02:31,840 --> 00:02:35,360
i'm so excited to have here today on

00:02:34,000 --> 00:02:39,519
stage one of our

00:02:35,360 --> 00:02:41,680
cool partners jamie cool thanks amita

00:02:39,519 --> 00:02:43,200
so samina told me about uh 10 minutes

00:02:41,680 --> 00:02:45,120
ago backstage he was going to introduce

00:02:43,200 --> 00:02:47,200
me with a cool joke i just kind of

00:02:45,120 --> 00:02:50,080
smiled and nodded politely

00:02:47,200 --> 00:02:51,440
yeah i've heard that one a few times so

00:02:50,080 --> 00:02:53,760
i've been at microsoft now

00:02:51,440 --> 00:02:55,200
for about 20 years and yeah i know

00:02:53,760 --> 00:02:56,959
that's a long time

00:02:55,200 --> 00:02:58,800
most of the time i've spent in the

00:02:56,959 --> 00:03:00,239
developer space in one form or another

00:02:58,800 --> 00:03:01,840
whether it was the first version of

00:03:00,239 --> 00:03:04,159
the.net framework

00:03:01,840 --> 00:03:06,640
visual studio but more recently i've

00:03:04,159 --> 00:03:09,920
been building services for developers

00:03:06,640 --> 00:03:12,159
one of those services is a ciacd service

00:03:09,920 --> 00:03:14,560
last month we did about 30 million

00:03:12,159 --> 00:03:17,040
different builds and deployments

00:03:14,560 --> 00:03:18,879
our customers are all types whether

00:03:17,040 --> 00:03:20,480
they're external customers or whether

00:03:18,879 --> 00:03:23,519
they're internal customers

00:03:20,480 --> 00:03:25,120
like azure or office whether they're

00:03:23,519 --> 00:03:27,120
small customers or whether they're large

00:03:25,120 --> 00:03:30,400
customers like windows who has

00:03:27,120 --> 00:03:33,120
somehow a 400 gigabyte git repository

00:03:30,400 --> 00:03:33,760
for their source code and in the process

00:03:33,120 --> 00:03:35,920
of this

00:03:33,760 --> 00:03:38,239
you know i've seen kind of more change

00:03:35,920 --> 00:03:39,040
in the cicd space in our engineering

00:03:38,239 --> 00:03:40,640
systems

00:03:39,040 --> 00:03:42,879
than really any other place and i've

00:03:40,640 --> 00:03:45,440
seen the degree of impact that makes

00:03:42,879 --> 00:03:46,560
i've also seen an experience in many

00:03:45,440 --> 00:03:48,640
cases the hard way

00:03:46,560 --> 00:03:50,560
a bunch of the lessons of what doing it

00:03:48,640 --> 00:03:52,080
right and doing it wrong can mean

00:03:50,560 --> 00:03:53,760
so i'm excited here to just share some

00:03:52,080 --> 00:03:54,959
of those learnings so samina why don't

00:03:53,760 --> 00:03:57,280
we go ahead and get started

00:03:54,959 --> 00:03:59,120
thank you for joining us so before we

00:03:57,280 --> 00:04:01,840
jump into the lessons learned

00:03:59,120 --> 00:04:04,239
i want to take a few minutes and really

00:04:01,840 --> 00:04:04,720
get us on the same page with what cicd

00:04:04,239 --> 00:04:08,080
means

00:04:04,720 --> 00:04:11,680
and what it means within github

00:04:08,080 --> 00:04:13,760
as you know it all starts with code

00:04:11,680 --> 00:04:15,120
and coffee for some of us but mostly

00:04:13,760 --> 00:04:18,079
code

00:04:15,120 --> 00:04:18,959
so as we work on our code at some point

00:04:18,079 --> 00:04:22,160
we think

00:04:18,959 --> 00:04:25,199
we think our changes are good to go

00:04:22,160 --> 00:04:27,520
and then the fun begins we want to make

00:04:25,199 --> 00:04:29,840
sure that our tests are passing

00:04:27,520 --> 00:04:31,600
that the builds are green and when

00:04:29,840 --> 00:04:33,759
everything looks good to go and our

00:04:31,600 --> 00:04:37,440
teammates give their thumbs up

00:04:33,759 --> 00:04:39,199
we are ready to deploy our changes

00:04:37,440 --> 00:04:40,960
it's good to firstly deploy them to a

00:04:39,199 --> 00:04:41,680
staging environment to a testing

00:04:40,960 --> 00:04:44,160
environment

00:04:41,680 --> 00:04:44,800
where people in our teams can try things

00:04:44,160 --> 00:04:47,040
out

00:04:44,800 --> 00:04:48,160
see how it goes maybe we have a qa

00:04:47,040 --> 00:04:50,160
department

00:04:48,160 --> 00:04:52,320
and when things are really good we are

00:04:50,160 --> 00:04:56,000
ready to try them and test them to

00:04:52,320 --> 00:04:58,160
we're ready to put them to production

00:04:56,000 --> 00:05:00,400
when we're in the production we're not

00:04:58,160 --> 00:05:02,560
done yet

00:05:00,400 --> 00:05:04,400
we have to validate and learn and to

00:05:02,560 --> 00:05:06,479
make sure that what we shipped

00:05:04,400 --> 00:05:08,880
is working properly that we have the

00:05:06,479 --> 00:05:11,280
right monitoring in place

00:05:08,880 --> 00:05:13,199
that we listen to our users feedback we

00:05:11,280 --> 00:05:14,160
catch bugs early we listen to our

00:05:13,199 --> 00:05:16,479
support channel

00:05:14,160 --> 00:05:18,479
and as you know the list goes on and on

00:05:16,479 --> 00:05:21,840
and on

00:05:18,479 --> 00:05:24,240
also the fun doesn't stop there because

00:05:21,840 --> 00:05:26,479
as we learn from our customers we are

00:05:24,240 --> 00:05:31,199
back to the coding stage and it all goes

00:05:26,479 --> 00:05:33,919
in a loop so i want to take a moment

00:05:31,199 --> 00:05:34,400
and think about what build and deploy

00:05:33,919 --> 00:05:38,240
means

00:05:34,400 --> 00:05:40,560
at github at github

00:05:38,240 --> 00:05:41,440
we always believed in the power of the

00:05:40,560 --> 00:05:44,479
ecosystem

00:05:41,440 --> 00:05:48,080
and the partners around us and even back

00:05:44,479 --> 00:05:50,960
in the early days we we opened up api

00:05:48,080 --> 00:05:53,120
endpoints and webhooks and from day one

00:05:50,960 --> 00:05:54,000
we were amazed to see all the great

00:05:53,120 --> 00:05:57,039
integration

00:05:54,000 --> 00:06:00,960
and experiences that were that were

00:05:57,039 --> 00:06:03,199
enabled for our joint customers

00:06:00,960 --> 00:06:04,960
but no matter how great these

00:06:03,199 --> 00:06:06,880
experiences were

00:06:04,960 --> 00:06:08,400
there was a big problem people couldn't

00:06:06,880 --> 00:06:11,520
discover them

00:06:08,400 --> 00:06:14,560
so we have done what everybody was doing

00:06:11,520 --> 00:06:16,160
introduced the github marketplace in the

00:06:14,560 --> 00:06:19,039
github marketplace

00:06:16,160 --> 00:06:20,160
it works like any other marketplace

00:06:19,039 --> 00:06:22,880
publishers

00:06:20,160 --> 00:06:24,080
publish their apps consumers come to the

00:06:22,880 --> 00:06:26,160
marketplace

00:06:24,080 --> 00:06:27,280
browse what's there they decide for the

00:06:26,160 --> 00:06:30,960
best tool for them

00:06:27,280 --> 00:06:33,680
and they start using it that was great

00:06:30,960 --> 00:06:34,479
but the journey continued we also

00:06:33,680 --> 00:06:37,120
learned

00:06:34,479 --> 00:06:37,759
that our customers our developers wanted

00:06:37,120 --> 00:06:40,080
to stay

00:06:37,759 --> 00:06:42,160
in github for as long as possible and

00:06:40,080 --> 00:06:43,280
not change context from one place to

00:06:42,160 --> 00:06:45,680
another

00:06:43,280 --> 00:06:47,520
so we introduced rich integrations

00:06:45,680 --> 00:06:50,560
things like the checks api

00:06:47,520 --> 00:06:52,080
and the check status so developers could

00:06:50,560 --> 00:06:55,440
use github to start

00:06:52,080 --> 00:06:58,080
to re-run builds to see

00:06:55,440 --> 00:07:00,840
the code annotations and all the details

00:06:58,080 --> 00:07:02,639
within github without leaving the

00:07:00,840 --> 00:07:06,240
interface

00:07:02,639 --> 00:07:08,880
the journey continued and just last year

00:07:06,240 --> 00:07:10,639
at github universe which is our fall

00:07:08,880 --> 00:07:12,800
conference in san francisco

00:07:10,639 --> 00:07:14,639
so at github universe we announced

00:07:12,800 --> 00:07:18,160
github actions

00:07:14,639 --> 00:07:21,440
github actions was more than ci and cd

00:07:18,160 --> 00:07:23,599
it was repository automation and over

00:07:21,440 --> 00:07:26,319
the last six or seven months we were

00:07:23,599 --> 00:07:28,479
absolutely amazed and humbled to see all

00:07:26,319 --> 00:07:29,039
the ways you developers to github

00:07:28,479 --> 00:07:31,680
actions

00:07:29,039 --> 00:07:33,680
in your own workflows and to see how our

00:07:31,680 --> 00:07:36,960
partners and integrators

00:07:33,680 --> 00:07:38,000
to github actions and put them back on

00:07:36,960 --> 00:07:42,319
the marketplace

00:07:38,000 --> 00:07:44,879
in new workflows for our joint customers

00:07:42,319 --> 00:07:46,240
so i hope now we pretty much all talk

00:07:44,879 --> 00:07:49,919
about the same thing

00:07:46,240 --> 00:07:59,840
when we talk about cicd so let's go

00:07:49,919 --> 00:07:59,840
and see the first lesson that we have

00:07:59,919 --> 00:08:05,840
okay so the first lesson is an amazingly

00:08:03,680 --> 00:08:06,720
deep and insightful one so it starts

00:08:05,840 --> 00:08:10,639
with

00:08:06,720 --> 00:08:13,599
doing ci is a good idea okay

00:08:10,639 --> 00:08:16,319
now i'm willing to bet that most of you

00:08:13,599 --> 00:08:18,960
in some form are already doing ci

00:08:16,319 --> 00:08:19,919
but ci comes in a lot of different forms

00:08:18,960 --> 00:08:22,160
right so

00:08:19,919 --> 00:08:24,319
from the simplest and let's call it bob

00:08:22,160 --> 00:08:26,160
ci and that basically means every once

00:08:24,319 --> 00:08:28,240
in a while bob will do a build

00:08:26,160 --> 00:08:30,000
using the machine under his desk and

00:08:28,240 --> 00:08:32,479
then you deploy that

00:08:30,000 --> 00:08:34,800
to every night you know you'll have an

00:08:32,479 --> 00:08:37,120
automated build that will run

00:08:34,800 --> 00:08:39,599
to every time a change goes into the

00:08:37,120 --> 00:08:41,440
trunk you have a ci build that good that

00:08:39,599 --> 00:08:44,880
runs that's getting better

00:08:41,440 --> 00:08:47,440
to every single change that

00:08:44,880 --> 00:08:49,120
before it gets into the trunk has ci and

00:08:47,440 --> 00:08:50,160
automation run and you're getting a lot

00:08:49,120 --> 00:08:51,760
better now

00:08:50,160 --> 00:08:53,360
but then you're getting to the point of

00:08:51,760 --> 00:08:54,560
are you running all of the right

00:08:53,360 --> 00:08:56,640
automation

00:08:54,560 --> 00:08:58,480
as early as you can in all of the right

00:08:56,640 --> 00:08:59,200
places and really the core of the lesson

00:08:58,480 --> 00:09:00,880
is

00:08:59,200 --> 00:09:02,240
you want to be running as much

00:09:00,880 --> 00:09:04,880
automation as

00:09:02,240 --> 00:09:07,120
early as you can in the process because

00:09:04,880 --> 00:09:08,640
the earlier you run the automation

00:09:07,120 --> 00:09:10,080
the higher return you're going to get

00:09:08,640 --> 00:09:11,680
because you're going to find these

00:09:10,080 --> 00:09:15,040
checks simpler

00:09:11,680 --> 00:09:18,320
and you know github really has

00:09:15,040 --> 00:09:21,040
fundamentally changed how this works so

00:09:18,320 --> 00:09:22,320
the first time i saw pull requests 10

00:09:21,040 --> 00:09:24,640
years ago at this point

00:09:22,320 --> 00:09:26,240
i thought yeah it's another tool to do

00:09:24,640 --> 00:09:27,680
code review that's nice we already have

00:09:26,240 --> 00:09:28,560
kind of code reviews but this is a nice

00:09:27,680 --> 00:09:30,560
version

00:09:28,560 --> 00:09:33,040
like i was wrong i didn't get it then

00:09:30,560 --> 00:09:35,760
right what pull requests really are

00:09:33,040 --> 00:09:37,040
is the workflow for your developer right

00:09:35,760 --> 00:09:40,160
and that workflow

00:09:37,040 --> 00:09:41,360
lets you seamlessly integrate things

00:09:40,160 --> 00:09:44,320
like ci

00:09:41,360 --> 00:09:45,200
and cd into the daily life cycle of the

00:09:44,320 --> 00:09:47,040
developer

00:09:45,200 --> 00:09:49,440
so before we had pull requests at

00:09:47,040 --> 00:09:50,000
microsoft we had literally dozens of

00:09:49,440 --> 00:09:51,760
internally

00:09:50,000 --> 00:09:53,200
built systems that were all different

00:09:51,760 --> 00:09:54,480
versions of what we called gauntlet

00:09:53,200 --> 00:09:55,360
systems because you had to run the

00:09:54,480 --> 00:09:57,440
gauntlets

00:09:55,360 --> 00:09:58,800
before you could get your change into

00:09:57,440 --> 00:10:01,200
the trunk branch

00:09:58,800 --> 00:10:02,959
and all of them were taxes right they

00:10:01,200 --> 00:10:04,240
were these separate tools you had to go

00:10:02,959 --> 00:10:04,560
and do and that's that's kind of the

00:10:04,240 --> 00:10:06,480
name

00:10:04,560 --> 00:10:07,680
running the gauntlet but with pull

00:10:06,480 --> 00:10:09,760
requests

00:10:07,680 --> 00:10:11,200
it is essentially this valuable thing

00:10:09,760 --> 00:10:12,880
and the thing about it is the more

00:10:11,200 --> 00:10:14,560
automation the more you tie to pull

00:10:12,880 --> 00:10:15,920
request the more valuable becomes not

00:10:14,560 --> 00:10:18,079
just for the organization

00:10:15,920 --> 00:10:20,399
but for the developer himself we see

00:10:18,079 --> 00:10:22,800
people all the time at microsoft

00:10:20,399 --> 00:10:23,760
they will go in and create a pull

00:10:22,800 --> 00:10:26,320
request

00:10:23,760 --> 00:10:26,800
just to have the automation that is tied

00:10:26,320 --> 00:10:29,200
to that

00:10:26,800 --> 00:10:31,519
run before they even submit it to get

00:10:29,200 --> 00:10:33,440
changes reviewed for it

00:10:31,519 --> 00:10:35,440
the nice thing that github has really

00:10:33,440 --> 00:10:37,200
done well in my opinion is

00:10:35,440 --> 00:10:38,720
make it seamless to integrate in so i

00:10:37,200 --> 00:10:40,959
mentioned that you know with our

00:10:38,720 --> 00:10:42,320
system we do about 30 million builds a

00:10:40,959 --> 00:10:43,839
large number of those

00:10:42,320 --> 00:10:45,920
are builds coming from github

00:10:43,839 --> 00:10:47,440
repositories and via all of the

00:10:45,920 --> 00:10:49,120
extensibility

00:10:47,440 --> 00:10:51,279
that samina was talking about things

00:10:49,120 --> 00:10:54,240
like checks where it lets us

00:10:51,279 --> 00:10:55,040
as ci system publish back information

00:10:54,240 --> 00:10:58,079
about

00:10:55,040 --> 00:10:59,760
the build into github they can then

00:10:58,079 --> 00:11:01,680
seamlessly display it as part of that

00:10:59,760 --> 00:11:04,480
developer workflow so here you see

00:11:01,680 --> 00:11:05,519
a pull request looking at the checks ui

00:11:04,480 --> 00:11:07,519
and this checks ui

00:11:05,519 --> 00:11:09,279
has a whole bunch of different services

00:11:07,519 --> 00:11:12,320
from codecovs travis ci

00:11:09,279 --> 00:11:12,880
sonar azure pipelines all pushing data

00:11:12,320 --> 00:11:14,959
back

00:11:12,880 --> 00:11:17,200
that get integrated into the actual pull

00:11:14,959 --> 00:11:19,200
request and then here in this visual

00:11:17,200 --> 00:11:21,600
you can see in the actual conversational

00:11:19,200 --> 00:11:22,399
flow github is giving you information

00:11:21,600 --> 00:11:24,160
about

00:11:22,399 --> 00:11:25,760
not just the people that are reviewing

00:11:24,160 --> 00:11:27,040
your code but essentially the systems

00:11:25,760 --> 00:11:28,800
that are reviewing your code

00:11:27,040 --> 00:11:30,240
and making that a seamless part of the

00:11:28,800 --> 00:11:32,480
workflow and

00:11:30,240 --> 00:11:34,000
you know really this makes it something

00:11:32,480 --> 00:11:35,360
that there's no reason not to take

00:11:34,000 --> 00:11:36,640
advantage of it there's no reason not to

00:11:35,360 --> 00:11:38,000
go and do it and it's

00:11:36,640 --> 00:11:41,040
you know basically a good thing for

00:11:38,000 --> 00:11:43,279
developers as opposed to attacks

00:11:41,040 --> 00:11:44,880
the other thing that this does is it

00:11:43,279 --> 00:11:47,200
really enables

00:11:44,880 --> 00:11:48,720
shared contribution across both open

00:11:47,200 --> 00:11:50,160
source and enterprises

00:11:48,720 --> 00:11:51,920
i can't tell you how many times i've

00:11:50,160 --> 00:11:55,040
been in situations

00:11:51,920 --> 00:11:57,200
where team a needs something from team b

00:11:55,040 --> 00:11:58,639
and team b is too busy to do that thing

00:11:57,200 --> 00:12:00,959
for team a and thus

00:11:58,639 --> 00:12:02,160
conflict arises in negotiation and all

00:12:00,959 --> 00:12:04,320
this kind of thing

00:12:02,160 --> 00:12:05,279
team a would be happy to go do the work

00:12:04,320 --> 00:12:08,240
for team b

00:12:05,279 --> 00:12:10,320
in their code but they can't because

00:12:08,240 --> 00:12:12,240
there's too many obstacles in the way

00:12:10,320 --> 00:12:13,519
the biggest thing i've seen is that once

00:12:12,240 --> 00:12:15,680
you start to have

00:12:13,519 --> 00:12:17,120
you know automation cicd in place for

00:12:15,680 --> 00:12:18,880
this it unlocks that because

00:12:17,120 --> 00:12:20,560
as soon as you have automation that

00:12:18,880 --> 00:12:22,160
allows you to know

00:12:20,560 --> 00:12:24,240
that the change you're submitting is

00:12:22,160 --> 00:12:25,680
actually going to work and not regress

00:12:24,240 --> 00:12:27,200
you and not take you backwards it makes

00:12:25,680 --> 00:12:28,639
you as the team trying to contribute it

00:12:27,200 --> 00:12:30,240
more comfortable doing it and it makes

00:12:28,639 --> 00:12:32,160
the receiving team more likely to be

00:12:30,240 --> 00:12:34,079
willing to take it and unlock it

00:12:32,160 --> 00:12:36,000
and i see this across the enterprise i

00:12:34,079 --> 00:12:37,440
see this across open source

00:12:36,000 --> 00:12:39,279
even at microsoft one of the big

00:12:37,440 --> 00:12:40,639
initiatives that we've had internally

00:12:39,279 --> 00:12:41,519
with our engineering systems the last

00:12:40,639 --> 00:12:43,440
five years

00:12:41,519 --> 00:12:45,760
has been to try and move towards a

00:12:43,440 --> 00:12:47,279
dynamic where the culture of the company

00:12:45,760 --> 00:12:50,800
the culture of the teams

00:12:47,279 --> 00:12:52,240
is much more about a similar one to the

00:12:50,800 --> 00:12:53,519
open source one where teams are

00:12:52,240 --> 00:12:54,560
empowered to be able to make those

00:12:53,519 --> 00:12:56,240
contributions

00:12:54,560 --> 00:12:58,160
and cicd is a big part of that because

00:12:56,240 --> 00:12:59,839
it helps enable trust

00:12:58,160 --> 00:13:01,360
so samia you have any other tips about

00:12:59,839 --> 00:13:06,399
helping to enable trust

00:13:01,360 --> 00:13:08,000
i do um so

00:13:06,399 --> 00:13:09,760
as i was saying there's tons of

00:13:08,000 --> 00:13:12,800
repositories on github

00:13:09,760 --> 00:13:14,399
so as a repository owner or a maintainer

00:13:12,800 --> 00:13:16,800
you want to find ways to

00:13:14,399 --> 00:13:17,519
quickly communicate to the repository

00:13:16,800 --> 00:13:20,480
viewers

00:13:17,519 --> 00:13:21,839
what the repository is about and as a

00:13:20,480 --> 00:13:23,760
developer

00:13:21,839 --> 00:13:26,000
we want to be able to quickly go to a

00:13:23,760 --> 00:13:28,399
repository and understand

00:13:26,000 --> 00:13:30,000
what is that repository about if i want

00:13:28,399 --> 00:13:32,240
to use the library

00:13:30,000 --> 00:13:34,560
i want to make sure that the library is

00:13:32,240 --> 00:13:37,839
something that is actively maintained

00:13:34,560 --> 00:13:40,880
that it has a lot of downloads that

00:13:37,839 --> 00:13:42,560
there there's a secure library because i

00:13:40,880 --> 00:13:45,760
will take this dependency

00:13:42,560 --> 00:13:48,399
for the many years to come in my project

00:13:45,760 --> 00:13:50,399
and readme badges are a great way to

00:13:48,399 --> 00:13:52,320
achieve that because they provide the

00:13:50,399 --> 00:13:55,279
first timers to first viewers

00:13:52,320 --> 00:13:57,440
and to old timers quick details about

00:13:55,279 --> 00:14:00,399
the repository

00:13:57,440 --> 00:14:01,760
so let's look for example at reac native

00:14:00,399 --> 00:14:05,519
this is one of the most

00:14:01,760 --> 00:14:07,519
popular projects on github what it means

00:14:05,519 --> 00:14:09,040
is that there's also a lot of people who

00:14:07,519 --> 00:14:10,880
are looking at the project

00:14:09,040 --> 00:14:12,560
they want to use it and they want to

00:14:10,880 --> 00:14:16,240
contribute on it

00:14:12,560 --> 00:14:17,360
so react native has a few badges some of

00:14:16,240 --> 00:14:20,320
the notable ones

00:14:17,360 --> 00:14:21,920
is that they welcome prs that's great

00:14:20,320 --> 00:14:24,880
even better they're under

00:14:21,920 --> 00:14:26,800
mit license and if i'm interested to

00:14:24,880 --> 00:14:28,320
learn more about them i can also follow

00:14:26,800 --> 00:14:30,800
them on twitter

00:14:28,320 --> 00:14:32,000
but even more i can also see that the

00:14:30,800 --> 00:14:34,160
builds are passing

00:14:32,000 --> 00:14:35,120
and there this is a package this is a

00:14:34,160 --> 00:14:37,120
live

00:14:35,120 --> 00:14:39,920
open source project that is actually

00:14:37,120 --> 00:14:39,920
getting maintained

00:14:40,000 --> 00:14:46,800
another example is pandas this is a data

00:14:43,920 --> 00:14:48,880
analysis library for python

00:14:46,800 --> 00:14:51,040
and here we have the same details but

00:14:48,880 --> 00:14:53,199
even more we can see that there's over 4

00:14:51,040 --> 00:14:54,000
million downloads that happen for this

00:14:53,199 --> 00:14:56,480
library

00:14:54,000 --> 00:14:57,040
so if i decide to take a dependency on

00:14:56,480 --> 00:14:59,440
it

00:14:57,040 --> 00:15:00,959
i have pretty good trust that people are

00:14:59,440 --> 00:15:02,320
going to maintain because there are so

00:15:00,959 --> 00:15:04,480
many other

00:15:02,320 --> 00:15:06,000
repositories and people depending on

00:15:04,480 --> 00:15:08,240
this library

00:15:06,000 --> 00:15:10,800
i can also see that the releases are on

00:15:08,240 --> 00:15:12,560
pi pi so i can quickly go to pi pi and

00:15:10,800 --> 00:15:14,560
download their latest release

00:15:12,560 --> 00:15:16,639
and i can also learn that their builds

00:15:14,560 --> 00:15:20,079
are passing and they also have a pretty

00:15:16,639 --> 00:15:20,079
good code coverage 91

00:15:20,160 --> 00:15:25,120
so now a quick story about badges i used

00:15:22,800 --> 00:15:27,600
to be a scout for many years in my life

00:15:25,120 --> 00:15:29,120
and i used to collect badges i had like

00:15:27,600 --> 00:15:31,040
15 badges on my

00:15:29,120 --> 00:15:33,519
shirt i can still remember it there were

00:15:31,040 --> 00:15:35,360
16 in total and i was missing one

00:15:33,519 --> 00:15:37,279
but the bottom line was that i was so

00:15:35,360 --> 00:15:39,839
proud to wear that shirt because

00:15:37,279 --> 00:15:41,519
everybody who was meeting me could see

00:15:39,839 --> 00:15:44,160
what are my achievements at what

00:15:41,519 --> 00:15:46,079
what i can do and it's the same thing

00:15:44,160 --> 00:15:48,240
when you put up badges on your github

00:15:46,079 --> 00:15:50,560
repository on the readme

00:15:48,240 --> 00:15:52,320
so i hope that you will go home today

00:15:50,560 --> 00:15:57,440
and put some readme badges

00:15:52,320 --> 00:15:57,440
on your repo all right jamie what's next

00:15:57,519 --> 00:16:02,079
so one of the big kind of changes that

00:16:01,040 --> 00:16:03,920
has happened

00:16:02,079 --> 00:16:06,000
inside of microsoft over the last 10

00:16:03,920 --> 00:16:08,800
years has been going from

00:16:06,000 --> 00:16:09,920
a server company where we ship servers

00:16:08,800 --> 00:16:11,600
to customers

00:16:09,920 --> 00:16:12,880
every two years hopefully every two

00:16:11,600 --> 00:16:13,839
years didn't always work out that way

00:16:12,880 --> 00:16:16,800
actually

00:16:13,839 --> 00:16:17,920
um to shipping a service to becoming a

00:16:16,800 --> 00:16:19,680
cloud company

00:16:17,920 --> 00:16:21,040
and that's driven a whole bunch of

00:16:19,680 --> 00:16:22,399
change in terms of our energy

00:16:21,040 --> 00:16:24,320
engineering system and a whole bunch of

00:16:22,399 --> 00:16:25,920
learnings one of the things that we are

00:16:24,320 --> 00:16:27,600
always trying to identify is like what

00:16:25,920 --> 00:16:28,160
are the things that we can do that will

00:16:27,600 --> 00:16:31,519
make

00:16:28,160 --> 00:16:34,160
the biggest differences in our ability

00:16:31,519 --> 00:16:37,360
to ship fast and the thing that we found

00:16:34,160 --> 00:16:40,320
is that nothing is more indicative

00:16:37,360 --> 00:16:42,240
of how fast you can ship to a service as

00:16:40,320 --> 00:16:44,880
the time it takes you

00:16:42,240 --> 00:16:46,320
to validate that a given code change is

00:16:44,880 --> 00:16:48,320
not taking you backwards

00:16:46,320 --> 00:16:50,399
is not regressing you because if you

00:16:48,320 --> 00:16:52,399
know that is true then

00:16:50,399 --> 00:16:53,519
you can decide how fast you want to ship

00:16:52,399 --> 00:16:54,959
that change out

00:16:53,519 --> 00:16:56,720
as you want but if you're not sure it's

00:16:54,959 --> 00:16:58,399
not taking you backwards then it's going

00:16:56,720 --> 00:16:59,839
to slow you down

00:16:58,399 --> 00:17:01,839
and in order to be able to achieve that

00:16:59,839 --> 00:17:03,199
you've got to invest in your automation

00:17:01,839 --> 00:17:04,559
it's got to be fast it's got to be

00:17:03,199 --> 00:17:06,079
reliable and if it's not it actually

00:17:04,559 --> 00:17:06,400
becomes counterproductive so let me tell

00:17:06,079 --> 00:17:09,520
you

00:17:06,400 --> 00:17:11,120
a story of testing so

00:17:09,520 --> 00:17:13,600
when i first joined microsoft the way

00:17:11,120 --> 00:17:15,520
testing worked is we had a test team

00:17:13,600 --> 00:17:17,039
test team was a bunch of manual testers

00:17:15,520 --> 00:17:18,480
so we would author this big test plan

00:17:17,039 --> 00:17:19,919
when we were doing a feature

00:17:18,480 --> 00:17:21,280
and then the feature would get done and

00:17:19,919 --> 00:17:21,919
then the test team would go through and

00:17:21,280 --> 00:17:23,600
run through

00:17:21,919 --> 00:17:25,520
this all to this test plan they'd file a

00:17:23,600 --> 00:17:26,799
bunch of bugs we'd fix the bugs

00:17:25,520 --> 00:17:28,160
they would introduce new bugs we'd

00:17:26,799 --> 00:17:29,919
repeat the cycle and we'd go back and

00:17:28,160 --> 00:17:32,080
forth as part of this and we realized

00:17:29,919 --> 00:17:34,000
this probably didn't work very well so

00:17:32,080 --> 00:17:36,000
then the next phase of testing

00:17:34,000 --> 00:17:37,919
is we brought in a whole set of

00:17:36,000 --> 00:17:39,280
automated testers so this was again

00:17:37,919 --> 00:17:40,320
still a separate test team

00:17:39,280 --> 00:17:42,160
but they would write a bunch of

00:17:40,320 --> 00:17:44,160
automated tests and the automated tests

00:17:42,160 --> 00:17:48,080
that the test team write you know were

00:17:44,160 --> 00:17:50,000
very large very complete test systems

00:17:48,080 --> 00:17:51,919
they typically were functional tests

00:17:50,000 --> 00:17:54,320
which means they were top of the stack

00:17:51,919 --> 00:17:55,360
after you deployed it you know that set

00:17:54,320 --> 00:17:57,520
of things

00:17:55,360 --> 00:17:59,039
and then we tried to move to the service

00:17:57,520 --> 00:18:00,320
world and really what you want to be

00:17:59,039 --> 00:18:01,039
able to have is you want to be able to

00:18:00,320 --> 00:18:03,120
have

00:18:01,039 --> 00:18:04,720
a reasonable set of tests run before the

00:18:03,120 --> 00:18:05,039
changes even get checked in the master

00:18:04,720 --> 00:18:06,320
so

00:18:05,039 --> 00:18:08,320
if we take those set of tests that we

00:18:06,320 --> 00:18:08,880
have and you try to put those then in

00:18:08,320 --> 00:18:10,720
the way

00:18:08,880 --> 00:18:12,080
of the engineer being able to get their

00:18:10,720 --> 00:18:14,240
code into the

00:18:12,080 --> 00:18:15,600
into the trunk branch turns out you

00:18:14,240 --> 00:18:17,360
generate a lot of conflict because if

00:18:15,600 --> 00:18:19,520
those tests aren't fast and they weren't

00:18:17,360 --> 00:18:20,880
necessarily fast because ui tests aren't

00:18:19,520 --> 00:18:22,400
always fast functional tests where you

00:18:20,880 --> 00:18:23,039
have to deploy things aren't necessarily

00:18:22,400 --> 00:18:24,799
fast

00:18:23,039 --> 00:18:26,160
they also tended to be flaky because of

00:18:24,799 --> 00:18:27,679
all those same sets of things

00:18:26,160 --> 00:18:29,120
and then you would get a revolt because

00:18:27,679 --> 00:18:30,559
you basically put obstacles in the way

00:18:29,120 --> 00:18:32,559
of the engineering team that they

00:18:30,559 --> 00:18:34,400
you know weren't bought into so now the

00:18:32,559 --> 00:18:35,840
way it works is the engineering team is

00:18:34,400 --> 00:18:37,120
responsible for quality

00:18:35,840 --> 00:18:39,039
they're responsible for all of the

00:18:37,120 --> 00:18:40,240
testing you know

00:18:39,039 --> 00:18:41,919
and a bunch of products have gone

00:18:40,240 --> 00:18:42,880
through journeys like you know mine have

00:18:41,919 --> 00:18:44,480
gone through

00:18:42,880 --> 00:18:46,160
where we took those test suites and then

00:18:44,480 --> 00:18:48,559
we intentionally went through and you

00:18:46,160 --> 00:18:50,080
you refactor it and you pull it down to

00:18:48,559 --> 00:18:52,320
the set of things like you know we call

00:18:50,080 --> 00:18:53,440
them l0s but basically unit tests that

00:18:52,320 --> 00:18:55,600
are very fast

00:18:53,440 --> 00:18:57,200
very reliable and we have tens of

00:18:55,600 --> 00:18:59,120
thousands of these they take about four

00:18:57,200 --> 00:19:01,120
or five minutes to run typically

00:18:59,120 --> 00:19:02,240
those get run on every single change as

00:19:01,120 --> 00:19:05,120
part of our

00:19:02,240 --> 00:19:07,120
um our prs then we have a set of other

00:19:05,120 --> 00:19:08,559
automation that you do want to run there

00:19:07,120 --> 00:19:10,400
are functional tests that you want to

00:19:08,559 --> 00:19:11,520
run once the change is a little further

00:19:10,400 --> 00:19:13,280
in the progression

00:19:11,520 --> 00:19:14,640
and you decide where you're going to put

00:19:13,280 --> 00:19:16,400
each of these sets of things so you

00:19:14,640 --> 00:19:19,679
decide where you're going to pay

00:19:16,400 --> 00:19:21,440
the price in terms of speed so

00:19:19,679 --> 00:19:22,880
investing in your automation deciding

00:19:21,440 --> 00:19:25,360
where you're running what set

00:19:22,880 --> 00:19:26,799
of of operations and make the earlier it

00:19:25,360 --> 00:19:28,000
is in the life cycle make the fat make

00:19:26,799 --> 00:19:30,160
it fast

00:19:28,000 --> 00:19:32,080
the other thing you can go and do is you

00:19:30,160 --> 00:19:34,559
can throw compute at it so

00:19:32,080 --> 00:19:36,080
compute is cheap compute is getting

00:19:34,559 --> 00:19:38,799
cheaper

00:19:36,080 --> 00:19:40,640
developers are expensive developers are

00:19:38,799 --> 00:19:42,960
getting more expensive

00:19:40,640 --> 00:19:44,320
so anything you can parallelize you

00:19:42,960 --> 00:19:46,880
should paralyze

00:19:44,320 --> 00:19:48,720
so whether you know you use my product

00:19:46,880 --> 00:19:51,760
or whether you use another product

00:19:48,720 --> 00:19:53,840
travis or circle or you know aws

00:19:51,760 --> 00:19:54,960
even or google like you should pay them

00:19:53,840 --> 00:19:57,360
money you should

00:19:54,960 --> 00:19:58,880
you should you know buy the compute you

00:19:57,360 --> 00:20:00,240
know anytime you do the math and you're

00:19:58,880 --> 00:20:01,440
there looking like yeah do i want to

00:20:00,240 --> 00:20:02,080
spend an extra thousand dollars on

00:20:01,440 --> 00:20:03,840
compute

00:20:02,080 --> 00:20:05,600
then you do the math of like increased

00:20:03,840 --> 00:20:06,400
productivity for your developers that

00:20:05,600 --> 00:20:08,240
you're paying

00:20:06,400 --> 00:20:09,919
how much more times how many developers

00:20:08,240 --> 00:20:11,039
that you've got the return is almost

00:20:09,919 --> 00:20:13,919
always there

00:20:11,039 --> 00:20:15,440
so here's an example this is the vs code

00:20:13,919 --> 00:20:16,880
build the vs code build

00:20:15,440 --> 00:20:18,559
you know they need to build in windows

00:20:16,880 --> 00:20:20,159
linux and mac

00:20:18,559 --> 00:20:21,360
you know you could go and serialize that

00:20:20,159 --> 00:20:24,640
or you could just throw three machines

00:20:21,360 --> 00:20:24,640
at it do it at the same time

00:20:24,880 --> 00:20:29,440
here's another one libgit2 libgit2 also

00:20:28,080 --> 00:20:30,559
needs to build on multiple operating

00:20:29,440 --> 00:20:31,840
systems but has a bunch of different

00:20:30,559 --> 00:20:33,520
flavors

00:20:31,840 --> 00:20:35,840
go through machines at it go do them all

00:20:33,520 --> 00:20:37,919
at the same time if you've got

00:20:35,840 --> 00:20:40,000
40 000 unit tests and all of those can

00:20:37,919 --> 00:20:41,760
be run you know at the same time

00:20:40,000 --> 00:20:43,440
go through machines at it and paralyze

00:20:41,760 --> 00:20:43,840
it it makes a big difference like we

00:20:43,440 --> 00:20:46,720
have us

00:20:43,840 --> 00:20:48,000
at microsoft we typically you know we'll

00:20:46,720 --> 00:20:50,559
have builds like the office

00:20:48,000 --> 00:20:52,240
build take four or five hours unless we

00:20:50,559 --> 00:20:54,159
put 25 machines on it then it takes a

00:20:52,240 --> 00:20:55,679
lot less time to go paralyze it it makes

00:20:54,159 --> 00:20:56,960
a huge difference and i can tell you the

00:20:55,679 --> 00:20:59,200
difference in

00:20:56,960 --> 00:21:00,840
the morale of the team once they've gone

00:20:59,200 --> 00:21:02,480
through that process makes a huge

00:21:00,840 --> 00:21:05,440
difference

00:21:02,480 --> 00:21:07,760
another lesson is automate everything so

00:21:05,440 --> 00:21:08,880
we talk about cicd so this is bill we

00:21:07,760 --> 00:21:11,280
typically talk about build

00:21:08,880 --> 00:21:12,720
talking about test but it doesn't have

00:21:11,280 --> 00:21:14,400
to stop there

00:21:12,720 --> 00:21:16,080
so the first time the product that i

00:21:14,400 --> 00:21:19,600
work on moved from being a server

00:21:16,080 --> 00:21:22,080
product to a cloud product essentially

00:21:19,600 --> 00:21:23,440
the deployment mechanism for doing that

00:21:22,080 --> 00:21:26,640
was to go have vlad

00:21:23,440 --> 00:21:29,039
run a 25 step you know document to do

00:21:26,640 --> 00:21:31,440
the deployment and vlad was exactly the

00:21:29,039 --> 00:21:34,400
right guy to be doing that deployment

00:21:31,440 --> 00:21:35,840
but it didn't always work reliably for

00:21:34,400 --> 00:21:37,520
obvious reasons as part of it and then

00:21:35,840 --> 00:21:39,600
once we started to deploy

00:21:37,520 --> 00:21:41,520
to multiple data centers and you had to

00:21:39,600 --> 00:21:42,240
re-repeat it in different forms that

00:21:41,520 --> 00:21:45,440
became

00:21:42,240 --> 00:21:47,600
much more of a problem and so we went

00:21:45,440 --> 00:21:49,440
through a process of investing a ton

00:21:47,600 --> 00:21:50,799
to get not just test automated

00:21:49,440 --> 00:21:52,960
deployment automated

00:21:50,799 --> 00:21:55,280
and we didn't go from 25 to fully

00:21:52,960 --> 00:21:57,360
automated overnight it was 25 steps and

00:21:55,280 --> 00:21:58,559
10 steps then five steps then two steps

00:21:57,360 --> 00:22:00,240
then one step

00:21:58,559 --> 00:22:01,600
i think that's a really good approach to

00:22:00,240 --> 00:22:03,280
help you get there with all these things

00:22:01,600 --> 00:22:03,679
is if you try to go from where you are

00:22:03,280 --> 00:22:05,520
now

00:22:03,679 --> 00:22:06,799
to the final state you'd want to be at

00:22:05,520 --> 00:22:08,320
in one huge step like

00:22:06,799 --> 00:22:10,559
odds are you're not going to have the

00:22:08,320 --> 00:22:12,640
organizational willpower to go do it

00:22:10,559 --> 00:22:14,240
but you need to find a way to get there

00:22:12,640 --> 00:22:16,480
the other thing this lets you do though

00:22:14,240 --> 00:22:18,559
is once you have deployment automated

00:22:16,480 --> 00:22:20,799
it lets you continue to pool automation

00:22:18,559 --> 00:22:23,200
earlier into the life cycle

00:22:20,799 --> 00:22:24,960
so here's an example so this is just a

00:22:23,200 --> 00:22:26,240
dashboard i pulled off of you know what

00:22:24,960 --> 00:22:28,400
the engineering system that we

00:22:26,240 --> 00:22:30,480
the engineering system that we use and

00:22:28,400 --> 00:22:33,600
what happens here is anytime

00:22:30,480 --> 00:22:35,280
a change hits master we will go

00:22:33,600 --> 00:22:37,280
and we will deploy all of the micro

00:22:35,280 --> 00:22:39,440
services that are part of

00:22:37,280 --> 00:22:41,120
that's that particular service and then

00:22:39,440 --> 00:22:42,480
we will run the functional test on it so

00:22:41,120 --> 00:22:44,320
these tests take a little longer these

00:22:42,480 --> 00:22:46,240
tests will usually take 20 to 25 minutes

00:22:44,320 --> 00:22:47,840
to fully go do this as part of it

00:22:46,240 --> 00:22:50,000
and there's a whole suite of them so

00:22:47,840 --> 00:22:52,240
each of these rows are a microservice

00:22:50,000 --> 00:22:54,799
and each of the columns are a build

00:22:52,240 --> 00:22:55,679
so if you get a column that is all green

00:22:54,799 --> 00:22:57,280
then you know

00:22:55,679 --> 00:22:58,880
this one has had like that full set of

00:22:57,280 --> 00:22:59,280
functional tests running as part of it

00:22:58,880 --> 00:23:01,679
so

00:22:59,280 --> 00:23:02,799
what this means is that you know the

00:23:01,679 --> 00:23:04,400
developer

00:23:02,799 --> 00:23:06,159
once they get a change in the master we

00:23:04,400 --> 00:23:08,159
know about half an hour later whether

00:23:06,159 --> 00:23:09,919
this change across all of our services

00:23:08,159 --> 00:23:11,440
is in a state that we could deploy now

00:23:09,919 --> 00:23:13,679
if we want it as part of it

00:23:11,440 --> 00:23:15,039
and this used to take days before for us

00:23:13,679 --> 00:23:16,400
to really go and do but because we got

00:23:15,039 --> 00:23:18,640
all this automated you can pool all of

00:23:16,400 --> 00:23:19,679
this earlier and early in the life cycle

00:23:18,640 --> 00:23:22,640
the other thing that you can do with

00:23:19,679 --> 00:23:23,520
this is that the developer is now

00:23:22,640 --> 00:23:26,880
empowered

00:23:23,520 --> 00:23:28,159
so if the developer wants to do a full

00:23:26,880 --> 00:23:29,360
set of tests here even though it takes

00:23:28,159 --> 00:23:30,880
you know half an hour

00:23:29,360 --> 00:23:32,720
they can go and opt in and do it and a

00:23:30,880 --> 00:23:34,640
lot of times they'll do that because

00:23:32,720 --> 00:23:36,159
this is a bigger more disruptive change

00:23:34,640 --> 00:23:38,799
as part of this

00:23:36,159 --> 00:23:40,320
so the other thing and i mentioned

00:23:38,799 --> 00:23:41,840
before that our deployment started to

00:23:40,320 --> 00:23:44,159
break down as we got more complex

00:23:41,840 --> 00:23:47,200
topologies we started to deploy out

00:23:44,159 --> 00:23:47,600
is you can have automation and even if

00:23:47,200 --> 00:23:50,080
you

00:23:47,600 --> 00:23:51,600
have to deploy to four environments you

00:23:50,080 --> 00:23:52,720
can know that if it deploys to those

00:23:51,600 --> 00:23:54,559
four environments

00:23:52,720 --> 00:23:56,000
it will deploy reliably it will deploy

00:23:54,559 --> 00:23:57,840
the same way which is good

00:23:56,000 --> 00:24:00,080
because if i look at the actual matrix

00:23:57,840 --> 00:24:01,760
that we have for my service we deploy to

00:24:00,080 --> 00:24:04,000
about 20 different data centers

00:24:01,760 --> 00:24:05,679
all over the world and each of these go

00:24:04,000 --> 00:24:07,679
to different rings so we'll deploy to

00:24:05,679 --> 00:24:09,279
ourselves first then we'll deploy to a

00:24:07,679 --> 00:24:10,720
bunch of other internal customers we'll

00:24:09,279 --> 00:24:12,400
deploy to early adopters

00:24:10,720 --> 00:24:13,760
we'll deploy to the us we'll deploy to

00:24:12,400 --> 00:24:15,440
europe you know it'll go through each of

00:24:13,760 --> 00:24:16,000
these rings of data centers as part of

00:24:15,440 --> 00:24:17,520
it

00:24:16,000 --> 00:24:19,120
and each of these you can see kind of

00:24:17,520 --> 00:24:19,520
the dependencies in how we do it but

00:24:19,120 --> 00:24:22,159
because

00:24:19,520 --> 00:24:24,000
all the deployment is automated we know

00:24:22,159 --> 00:24:25,600
it's going to reliably work the same way

00:24:24,000 --> 00:24:26,159
on each of them and it lets us then have

00:24:25,600 --> 00:24:27,840
control

00:24:26,159 --> 00:24:29,360
to manage the life cycle of the change

00:24:27,840 --> 00:24:29,760
whether we want it to roll out in an

00:24:29,360 --> 00:24:31,200
hour

00:24:29,760 --> 00:24:32,320
because it's a change we have to get out

00:24:31,200 --> 00:24:33,360
because it's critical and we want it to

00:24:32,320 --> 00:24:35,039
go fast

00:24:33,360 --> 00:24:36,559
or whether this is a big disruptive

00:24:35,039 --> 00:24:38,080
change and we want it to roll out and

00:24:36,559 --> 00:24:39,600
let it bake for half a day before we

00:24:38,080 --> 00:24:40,799
roll it out to the next room and next

00:24:39,600 --> 00:24:43,520
spring and next string

00:24:40,799 --> 00:24:45,200
you have that control so this is an

00:24:43,520 --> 00:24:46,960
example of

00:24:45,200 --> 00:24:48,880
services and how you can go do this but

00:24:46,960 --> 00:24:51,440
samina people are really building

00:24:48,880 --> 00:24:53,200
all different types of applications

00:24:51,440 --> 00:24:54,320
that's right there is not only servers

00:24:53,200 --> 00:24:56,960
there that need to be

00:24:54,320 --> 00:24:58,960
deployed to 20 different data centers

00:24:56,960 --> 00:25:00,720
there's also things like packages and

00:24:58,960 --> 00:25:03,600
libraries

00:25:00,720 --> 00:25:05,039
and if you're building a library then

00:25:03,600 --> 00:25:06,720
you have different needs

00:25:05,039 --> 00:25:09,679
and different needs have different

00:25:06,720 --> 00:25:11,919
solutions and there's no two single

00:25:09,679 --> 00:25:14,080
projects that have the same solution

00:25:11,919 --> 00:25:16,640
there is no one one-size-fits-all when

00:25:14,080 --> 00:25:18,799
we talk about automation

00:25:16,640 --> 00:25:20,240
so now let's imagine that you're a

00:25:18,799 --> 00:25:22,480
maintainer or maybe you really are a

00:25:20,240 --> 00:25:25,360
maintainer working on a library

00:25:22,480 --> 00:25:26,480
and what you want to do is to get your

00:25:25,360 --> 00:25:29,840
changes

00:25:26,480 --> 00:25:31,919
pushed to to a package registry so that

00:25:29,840 --> 00:25:33,440
any of your consumers can download the

00:25:31,919 --> 00:25:35,440
new package

00:25:33,440 --> 00:25:37,600
there's a lot of package registries out

00:25:35,440 --> 00:25:39,679
there and today i want to talk about one

00:25:37,600 --> 00:25:41,919
of them

00:25:39,679 --> 00:25:43,120
two weeks ago we announced github

00:25:41,919 --> 00:25:45,679
package registry

00:25:43,120 --> 00:25:47,279
which is a package management service

00:25:45,679 --> 00:25:49,919
for developers and teams

00:25:47,279 --> 00:25:51,200
where they can push public packages and

00:25:49,919 --> 00:25:53,120
private packages

00:25:51,200 --> 00:25:55,120
next to their source code next to their

00:25:53,120 --> 00:25:56,960
repositories

00:25:55,120 --> 00:25:58,400
that means that for developers and teams

00:25:56,960 --> 00:26:00,559
they can go to github

00:25:58,400 --> 00:26:01,760
and decide what are the right packages

00:26:00,559 --> 00:26:05,360
that they want to use

00:26:01,760 --> 00:26:07,039
in their projects so you can sign up for

00:26:05,360 --> 00:26:09,039
the beta and you can check out all the

00:26:07,039 --> 00:26:10,880
details and the features later

00:26:09,039 --> 00:26:13,279
but today i want to walk you through one

00:26:10,880 --> 00:26:16,400
example of a team that has

00:26:13,279 --> 00:26:19,520
a specific workflow for them the

00:26:16,400 --> 00:26:21,039
master branch is a source of truth this

00:26:19,520 --> 00:26:22,080
means that whenever something hits

00:26:21,039 --> 00:26:25,200
master

00:26:22,080 --> 00:26:27,600
they want to package everything

00:26:25,200 --> 00:26:29,679
and ship it to github package registry

00:26:27,600 --> 00:26:30,480
and to do that they will use a github

00:26:29,679 --> 00:26:33,520
action

00:26:30,480 --> 00:26:36,480
which listens to an event that says hey

00:26:33,520 --> 00:26:37,600
a pr was merged and will start packaging

00:26:36,480 --> 00:26:40,159
everything

00:26:37,600 --> 00:26:41,360
publish it to github package registry

00:26:40,159 --> 00:26:52,320
and then comment back

00:26:41,360 --> 00:26:55,120
on the pr

00:26:52,320 --> 00:26:57,039
all right the video is working great um

00:26:55,120 --> 00:27:00,000
okay so this is the action

00:26:57,039 --> 00:27:01,120
now let us make a small change in the

00:27:00,000 --> 00:27:04,480
package json

00:27:01,120 --> 00:27:05,760
so we can see how this action is working

00:27:04,480 --> 00:27:07,600
so i'll make a small change in the

00:27:05,760 --> 00:27:10,080
description i use

00:27:07,600 --> 00:27:10,960
an example of a library it's called pkg

00:27:10,080 --> 00:27:12,720
cloud

00:27:10,960 --> 00:27:14,720
it does a bunch of abstractions for

00:27:12,720 --> 00:27:17,600
different cloud providers

00:27:14,720 --> 00:27:18,559
so i will say this is an awesome library

00:27:17,600 --> 00:27:20,240
i will change

00:27:18,559 --> 00:27:23,360
the version the main version in this

00:27:20,240 --> 00:27:25,679
case and i will create a new branch

00:27:23,360 --> 00:27:26,880
and to open this will open a pull

00:27:25,679 --> 00:27:29,360
request

00:27:26,880 --> 00:27:30,799
so i'm proposing the change i'm creating

00:27:29,360 --> 00:27:33,840
a pull request

00:27:30,799 --> 00:27:34,960
and now in real life as jamie told us

00:27:33,840 --> 00:27:37,360
we're gonna have some

00:27:34,960 --> 00:27:39,520
ci some unit tests we're gonna have a

00:27:37,360 --> 00:27:41,520
bunch of our teammates giving us great

00:27:39,520 --> 00:27:42,080
suggestions about how we can make our

00:27:41,520 --> 00:27:44,720
changes

00:27:42,080 --> 00:27:45,679
even better and finally we're gonna

00:27:44,720 --> 00:27:48,480
merge

00:27:45,679 --> 00:27:49,679
we're gonna merge the pull request now

00:27:48,480 --> 00:27:52,399
the github action

00:27:49,679 --> 00:27:54,640
has picked up the event and will start

00:27:52,399 --> 00:27:57,760
the workflow

00:27:54,640 --> 00:28:01,440
so the github action detected that

00:27:57,760 --> 00:28:04,480
there is a new publish a new event to

00:28:01,440 --> 00:28:06,399
merge the pr to master and it will start

00:28:04,480 --> 00:28:06,960
different builds it will package the

00:28:06,399 --> 00:28:08,640
library

00:28:06,960 --> 00:28:11,600
and it will get it ready to be published

00:28:08,640 --> 00:28:14,880
to github package registry

00:28:11,600 --> 00:28:16,720
when the package is published anybody

00:28:14,880 --> 00:28:19,520
with access to the repository

00:28:16,720 --> 00:28:21,440
can go to the package details and start

00:28:19,520 --> 00:28:25,120
installing the package

00:28:21,440 --> 00:28:26,080
so in this case the action is still

00:28:25,120 --> 00:28:28,559
running

00:28:26,080 --> 00:28:29,200
and once it's published into gpr it will

00:28:28,559 --> 00:28:32,000
comment

00:28:29,200 --> 00:28:32,000
back to the pr

00:28:35,679 --> 00:28:42,240
so this is an example for an npm

00:28:39,679 --> 00:28:44,000
package but github package registry also

00:28:42,240 --> 00:28:47,039
works for docker

00:28:44,000 --> 00:28:48,799
nougat maven and ruby so and there's

00:28:47,039 --> 00:28:49,520
more coming so we encourage you to try

00:28:48,799 --> 00:28:51,360
it out

00:28:49,520 --> 00:28:52,880
so okay in the meanwhile the action is

00:28:51,360 --> 00:28:55,760
finished it completed

00:28:52,880 --> 00:28:57,039
so if i go back to the pull request the

00:28:55,760 --> 00:28:59,520
action has

00:28:57,039 --> 00:29:00,880
posted back to the pull request so that

00:28:59,520 --> 00:29:03,760
every contributors

00:29:00,880 --> 00:29:05,600
can see where the package is located and

00:29:03,760 --> 00:29:07,600
here on the package detail page

00:29:05,600 --> 00:29:09,120
they can see how to install the package

00:29:07,600 --> 00:29:11,360
what are the details

00:29:09,120 --> 00:29:13,440
number of downloads and also those

00:29:11,360 --> 00:29:16,240
readme badges that we talked

00:29:13,440 --> 00:29:16,240
about before

00:29:16,480 --> 00:29:20,080
so the bottom line here is that no

00:29:18,799 --> 00:29:22,720
matter what

00:29:20,080 --> 00:29:24,080
what service or package or type of

00:29:22,720 --> 00:29:26,240
library you're working on

00:29:24,080 --> 00:29:28,559
and no matter what type of tools you're

00:29:26,240 --> 00:29:30,960
using to publish it

00:29:28,559 --> 00:29:34,320
the important part is to customize your

00:29:30,960 --> 00:29:36,399
workflows based on your own needs

00:29:34,320 --> 00:29:38,000
so i know there's lunch time soon so

00:29:36,399 --> 00:29:40,799
let's do a quick recap

00:29:38,000 --> 00:29:41,440
and then we can all head out to lunch so

00:29:40,799 --> 00:29:44,159
the most

00:29:41,440 --> 00:29:44,799
important lesson that jamie told us

00:29:44,159 --> 00:29:48,159
thank you

00:29:44,799 --> 00:29:50,000
is to start doing ci so start small

00:29:48,159 --> 00:29:52,640
it's not going to be easy we know that

00:29:50,000 --> 00:29:55,520
but it's really going to pay off

00:29:52,640 --> 00:29:56,640
the easiest lesson from today is to use

00:29:55,520 --> 00:29:58,559
readme badges

00:29:56,640 --> 00:30:00,480
it literally takes a few minutes to do

00:29:58,559 --> 00:30:02,000
it and you will see the benefits

00:30:00,480 --> 00:30:04,159
yourself

00:30:02,000 --> 00:30:06,399
and then once you start doing that we

00:30:04,159 --> 00:30:09,200
encourage you to make everything faster

00:30:06,399 --> 00:30:10,480
to iterate on things to ship the value

00:30:09,200 --> 00:30:14,320
to your customers

00:30:10,480 --> 00:30:16,880
and to learn from them so with that

00:30:14,320 --> 00:30:18,880
i think we're almost done yeah i mean we

00:30:16,880 --> 00:30:19,679
had half an hour to talk about cicd

00:30:18,880 --> 00:30:21,360
that's

00:30:19,679 --> 00:30:23,039
kind of not enough time to go deep on

00:30:21,360 --> 00:30:24,640
much of anything so

00:30:23,039 --> 00:30:26,880
i guess i would just leave you with one

00:30:24,640 --> 00:30:29,039
thought you know if you're

00:30:26,880 --> 00:30:31,600
if you're not to a place where you know

00:30:29,039 --> 00:30:33,200
you have the cicd

00:30:31,600 --> 00:30:34,960
system that you want like to the

00:30:33,200 --> 00:30:36,720
maturity level

00:30:34,960 --> 00:30:38,799
that that you wanted to be at you just

00:30:36,720 --> 00:30:39,200
haven't found the time to go invest in

00:30:38,799 --> 00:30:41,919
it and i

00:30:39,200 --> 00:30:43,520
i see this all the time people don't

00:30:41,919 --> 00:30:44,000
find the time to go and do this because

00:30:43,520 --> 00:30:45,600
it's

00:30:44,000 --> 00:30:48,159
you know not feature development it's

00:30:45,600 --> 00:30:49,679
kind of ancillary work as part of it

00:30:48,159 --> 00:30:51,440
i see them not do it and i see them get

00:30:49,679 --> 00:30:52,960
burned i see them get burned in terms of

00:30:51,440 --> 00:30:54,720
quality i see them get burned in terms

00:30:52,960 --> 00:30:57,279
of not being able to move fast

00:30:54,720 --> 00:30:58,960
to the degree they want in my experience

00:30:57,279 --> 00:31:01,200
nothing else makes as

00:30:58,960 --> 00:31:02,960
high a return on investment as making

00:31:01,200 --> 00:31:04,000
sure that you have the automation in

00:31:02,960 --> 00:31:05,120
place for the product that you're

00:31:04,000 --> 00:31:07,919
working on

00:31:05,120 --> 00:31:08,399
um so with that i think we're ready to

00:31:07,919 --> 00:31:10,240
break

00:31:08,399 --> 00:31:12,240
uh samina thank you very much for having

00:31:10,240 --> 00:31:13,760
me here

00:31:12,240 --> 00:31:15,519
and if you have any questions or

00:31:13,760 --> 00:31:17,200
comments or concerns me and i would be

00:31:15,519 --> 00:31:33,840
happy to answer them

00:31:17,200 --> 00:31:33,840
thanks thank you

00:31:35,600 --> 00:31:37,679

YouTube URL: https://www.youtube.com/watch?v=4LDgzgfX0Us


