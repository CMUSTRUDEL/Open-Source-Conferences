Title: PHP UK Conference 2017 - Michele Orselli - Hopping in the Clouds: migration between cloud providers
Publication date: 2017-04-03
Playlist: PHP UK Conference 2017
Description: 
	Today there are a lot of cloud providers, with a wide range of offers. Web projects usually have continuously changing needs: what worked well yesterday may not be enough today. These two facts became quite obvious for us while migrating a large PHP application from Rackspace to Amazon. In this session Iâ€™d like to share this experience highlighting infrastructure and code evolution, migration steps, cost analisys, issues.
Captions: 
	00:00:03,399 --> 00:00:07,510
in the next 15 minutes or so I'd like to

00:00:06,790 --> 00:00:11,290
talk about

00:00:07,510 --> 00:00:15,370
I will migrate from one cloud provider

00:00:11,290 --> 00:00:17,529
to another I am McKellar sadly I work

00:00:15,370 --> 00:00:20,560
and from Italy and they work for a

00:00:17,529 --> 00:00:24,039
company which is called edy Otto we are

00:00:20,560 --> 00:00:28,930
a software agency basically so we help

00:00:24,039 --> 00:00:33,100
our clients turning their ideas into

00:00:28,930 --> 00:00:35,739
projects and product these are my

00:00:33,100 --> 00:00:40,300
contacts so feel free to get in touch

00:00:35,739 --> 00:00:45,309
with me after this presentation or by

00:00:40,300 --> 00:00:48,340
email to the Madonna okay so I'll start

00:00:45,309 --> 00:00:51,820
with the little story about how we took

00:00:48,340 --> 00:00:57,280
in 8 years old

00:00:51,820 --> 00:01:00,879
code base which started causing a lot of

00:00:57,280 --> 00:01:06,270
problems and wasting a lot of money for

00:01:00,879 --> 00:01:08,469
our clients and started showing

00:01:06,270 --> 00:01:12,639
increasing stability problems and

00:01:08,469 --> 00:01:17,950
peppermint problems and our we migrated

00:01:12,639 --> 00:01:22,329
it to well a more suitable and stable

00:01:17,950 --> 00:01:23,909
platform and in the end everyone was

00:01:22,329 --> 00:01:29,259
happy

00:01:23,909 --> 00:01:32,009
let's start from the beginning as I said

00:01:29,259 --> 00:01:34,689
before I'm entirely I'm Italian so

00:01:32,009 --> 00:01:37,209
apologies for my bad accent and if I

00:01:34,689 --> 00:01:39,639
start moving ends in that way that's

00:01:37,209 --> 00:01:44,999
perfectly fine and fine don't worry

00:01:39,639 --> 00:01:47,560
about that okay if I fall asleep or fall

00:01:44,999 --> 00:01:52,209
unconscious okay in that case I'm not

00:01:47,560 --> 00:01:57,149
fine help me but what do we Italians

00:01:52,209 --> 00:02:01,299
like that's a pretty simple question hey

00:01:57,149 --> 00:02:09,250
want to try to answer spaghetti

00:02:01,299 --> 00:02:14,200
yeah for sure la pizza yeah la mama

00:02:09,250 --> 00:02:15,680
mummy maybe not that particularly warm

00:02:14,200 --> 00:02:19,629
but yeah

00:02:15,680 --> 00:02:22,340
yeah that or all of these answers are

00:02:19,629 --> 00:02:30,799
perfectly fine but there is another

00:02:22,340 --> 00:02:33,920
thing we like we enjoy football ok you

00:02:30,799 --> 00:02:40,639
should know who this person is

00:02:33,920 --> 00:02:45,200
yeah and yeah our clients basically have

00:02:40,639 --> 00:02:50,510
a site talking about trans market you

00:02:45,200 --> 00:02:55,189
know if the player X is going to play

00:02:50,510 --> 00:02:57,620
for Napoli Naples or ego in moved from

00:02:55,189 --> 00:03:01,400
Naples to Juventus and stuff like that

00:02:57,620 --> 00:03:03,829
we got crazy about this stuff okay our

00:03:01,400 --> 00:03:07,159
government our government can raise

00:03:03,829 --> 00:03:11,780
taxes lie to us but we're fine as long

00:03:07,159 --> 00:03:19,909
as we can watch football in this

00:03:11,780 --> 00:03:21,680
particular case traffic were not really

00:03:19,909 --> 00:03:24,290
big but there were some important

00:03:21,680 --> 00:03:27,859
numbers we experienced some peaks during

00:03:24,290 --> 00:03:30,769
the year in particular in January June

00:03:27,859 --> 00:03:34,400
August when the transfer market results

00:03:30,769 --> 00:03:36,939
and also we have some spikes during

00:03:34,400 --> 00:03:39,109
particular matches big matches or

00:03:36,939 --> 00:03:42,919
Champions League matches and stuff like

00:03:39,109 --> 00:03:47,000
that all the infrastructure all the

00:03:42,919 --> 00:03:50,209
sites were roasted on Rackspace cloud

00:03:47,000 --> 00:03:52,340
sites aware you do we know about that

00:03:50,209 --> 00:03:57,319
I've ever heard about that ok

00:03:52,340 --> 00:04:01,459
few good which in the cloud pyramid we

00:03:57,319 --> 00:04:05,389
can put it here ok is a platform as a

00:04:01,459 --> 00:04:07,939
service what does it mean well it means

00:04:05,389 --> 00:04:11,379
that you don't have to configure

00:04:07,939 --> 00:04:14,599
basically anything almost anything you

00:04:11,379 --> 00:04:16,159
push the code the code into the cloud

00:04:14,599 --> 00:04:19,849
and you're done

00:04:16,159 --> 00:04:23,150
so from the developers from the ops

00:04:19,849 --> 00:04:25,669
point of view you have a black box ok

00:04:23,150 --> 00:04:28,440
you just put the code you actually can

00:04:25,669 --> 00:04:31,980
change few parameters but not as much

00:04:28,440 --> 00:04:36,870
and you are done unfortunately there are

00:04:31,980 --> 00:04:40,320
some kind of limitation like some art

00:04:36,870 --> 00:04:44,640
limits or on resource usage like you

00:04:40,320 --> 00:04:47,850
cannot have more than 50 database

00:04:44,640 --> 00:04:52,620
connection concurrent database

00:04:47,850 --> 00:04:58,290
connection you can deploy only through

00:04:52,620 --> 00:05:03,540
FTP which in 2006 when we started

00:04:58,290 --> 00:05:07,140
emigration was not really fine and you

00:05:03,540 --> 00:05:10,200
deploy on a shared NFS folder directory

00:05:07,140 --> 00:05:14,580
which also means that sometimes during

00:05:10,200 --> 00:05:17,460
deploys the symphony because I will show

00:05:14,580 --> 00:05:21,330
you later we are talking about all same

00:05:17,460 --> 00:05:24,030
phone application the symphony cache got

00:05:21,330 --> 00:05:28,740
messed for I don't know no particular

00:05:24,030 --> 00:05:31,080
reason and the site crashed good also we

00:05:28,740 --> 00:05:35,490
didn't have access to real-time logs

00:05:31,080 --> 00:05:38,600
like access log low query logs from a

00:05:35,490 --> 00:05:40,980
sequel and stuff of that and we cannot

00:05:38,600 --> 00:05:42,750
SSH enter in the machines

00:05:40,980 --> 00:05:44,400
yeah because ok it's a platform as a

00:05:42,750 --> 00:05:48,960
service we are not supposed to do that

00:05:44,400 --> 00:05:54,380
kind of stuff also we were still on PHP

00:05:48,960 --> 00:05:57,600
5.3 which again was not that good and

00:05:54,380 --> 00:06:01,830
let me spend a few words on all the

00:05:57,600 --> 00:06:05,970
sites that made up the platform the

00:06:01,830 --> 00:06:08,820
first one was is actually the web site

00:06:05,970 --> 00:06:12,810
which contains all the articles all the

00:06:08,820 --> 00:06:15,360
categories all the custom pages for the

00:06:12,810 --> 00:06:19,320
teams basically everything almost

00:06:15,360 --> 00:06:24,540
everything ok and it was also the oldest

00:06:19,320 --> 00:06:26,550
site develop it in Symphony one after

00:06:24,540 --> 00:06:28,590
that we have mobile which is a

00:06:26,550 --> 00:06:32,690
customized version is a custom

00:06:28,590 --> 00:06:35,430
application for mobile devices and again

00:06:32,690 --> 00:06:38,820
we have all article categories themes

00:06:35,430 --> 00:06:41,280
details in a different format ok we

00:06:38,820 --> 00:06:42,210
didn't have any kind of responsive

00:06:41,280 --> 00:06:47,000
design stuff

00:06:42,210 --> 00:06:50,130
that and it was a like freestyle project

00:06:47,000 --> 00:06:53,610
Symphony two components but no selects

00:06:50,130 --> 00:06:58,080
no framework just components put

00:06:53,610 --> 00:07:02,130
together and well it is a small

00:06:58,080 --> 00:07:07,979
application a bit messy after that we

00:07:02,130 --> 00:07:11,690
have a community site well Vigo parlez

00:07:07,979 --> 00:07:16,229
in italiano means high live for her

00:07:11,690 --> 00:07:20,130
which means for my team it's a bit

00:07:16,229 --> 00:07:22,800
exaggerated maybe but it gets you the

00:07:20,130 --> 00:07:26,160
idea basically in this site people can

00:07:22,800 --> 00:07:30,479
write their own content okay if I mean

00:07:26,160 --> 00:07:33,509
team lose the last match I can write

00:07:30,479 --> 00:07:37,199
here that I'm angry and other people can

00:07:33,509 --> 00:07:42,210
talk with me complaining and fighting

00:07:37,199 --> 00:07:45,050
basically so you generated content okay

00:07:42,210 --> 00:07:48,570
again it's a safe initial application

00:07:45,050 --> 00:07:52,860
then we have some sort of micro services

00:07:48,570 --> 00:07:56,180
for well particular tasks features and

00:07:52,860 --> 00:08:01,919
when I say micro services I have

00:07:56,180 --> 00:08:05,190
something like this in mind micro not

00:08:01,919 --> 00:08:08,610
that micro to be honest okay there were

00:08:05,190 --> 00:08:12,150
more micro macro services the first one

00:08:08,610 --> 00:08:15,750
is talk it's a set of API for dealing

00:08:12,150 --> 00:08:19,469
with comments both ratings and stuff

00:08:15,750 --> 00:08:22,550
like that and is used throughout all the

00:08:19,469 --> 00:08:26,669
application okay this is a snapshot of

00:08:22,550 --> 00:08:30,090
the web application okay so we can see

00:08:26,669 --> 00:08:32,370
here the user comments votes the

00:08:30,090 --> 00:08:32,940
capability to answer commented to post a

00:08:32,370 --> 00:08:36,419
new one

00:08:32,940 --> 00:08:38,880
and the same goes for the mobile site

00:08:36,419 --> 00:08:44,700
here we are saying the number of the

00:08:38,880 --> 00:08:49,699
comments those and stuff like that then

00:08:44,700 --> 00:08:53,350
we have a DV which is a set of API for

00:08:49,699 --> 00:08:57,250
serving burners basically

00:08:53,350 --> 00:08:59,830
and again they're used both in mobile

00:08:57,250 --> 00:09:02,920
site and in the website here is the

00:08:59,830 --> 00:09:08,560
mobile one and here you have banners

00:09:02,920 --> 00:09:12,970
served in the website last button not

00:09:08,560 --> 00:09:19,150
not list media media is a services used

00:09:12,970 --> 00:09:23,950
to deal to all the assets okay

00:09:19,150 --> 00:09:28,930
images both user-generated and editorial

00:09:23,950 --> 00:09:32,560
images okay and to allow to process this

00:09:28,930 --> 00:09:36,130
kind of images like cropping resizing

00:09:32,560 --> 00:09:39,700
and doing the kind of operations okay

00:09:36,130 --> 00:09:44,380
again Symphony show here is an example

00:09:39,700 --> 00:09:46,440
of actually picture of how all the parts

00:09:44,380 --> 00:09:49,480
of this platform interacts together

00:09:46,440 --> 00:09:54,640
basically here we have the macro

00:09:49,480 --> 00:09:57,070
services each with its own database then

00:09:54,640 --> 00:10:00,520
we have a community site mobile site and

00:09:57,070 --> 00:10:06,250
web site which are the face in public

00:10:00,520 --> 00:10:09,520
facing sites in front of that we we have

00:10:06,250 --> 00:10:14,400
Amazon CloudFront which is a distributed

00:10:09,520 --> 00:10:20,170
cash for those of you who don't know and

00:10:14,400 --> 00:10:21,250
yeah this proxy basically is used to

00:10:20,170 --> 00:10:25,180
well

00:10:21,250 --> 00:10:28,240
chalo mobile site to call this macro

00:10:25,180 --> 00:10:32,680
services mobile doesn't know about these

00:10:28,240 --> 00:10:39,700
services web in that case works also as

00:10:32,680 --> 00:10:43,170
a well an Orchestrator okay so here is

00:10:39,700 --> 00:10:46,090
where we started the first problem began

00:10:43,170 --> 00:10:50,500
started with the talk application in

00:10:46,090 --> 00:10:55,900
particular okay during some big matches

00:10:50,500 --> 00:10:59,100
or what during picks of traffic the

00:10:55,900 --> 00:11:02,380
application started to error and

00:10:59,100 --> 00:11:05,020
basically the user cannot post or read

00:11:02,380 --> 00:11:06,880
comments and they start blaming us

00:11:05,020 --> 00:11:09,290
because they thought they

00:11:06,880 --> 00:11:13,550
banning them in some sort of way of

00:11:09,290 --> 00:11:17,110
moderating them okay so we try to find a

00:11:13,550 --> 00:11:20,330
quick solution the first one was well

00:11:17,110 --> 00:11:24,770
tuning the HTTP direct response headers

00:11:20,330 --> 00:11:31,040
and caching more endpoints and optimized

00:11:24,770 --> 00:11:35,600
queries the first one was the quickest

00:11:31,040 --> 00:11:39,860
solution we can came up then using the

00:11:35,600 --> 00:11:43,730
log from CloudFront we found what were

00:11:39,860 --> 00:11:49,640
the most each endpoint and we started

00:11:43,730 --> 00:11:53,270
caching well and basically we started

00:11:49,640 --> 00:11:58,760
putting a snippet of code like this in

00:11:53,270 --> 00:12:02,090
our application okay okay so this was a

00:11:58,760 --> 00:12:06,080
temporary solution but it gave us some

00:12:02,090 --> 00:12:08,360
time to think about it and how to well

00:12:06,080 --> 00:12:12,980
came up with a more complete solution

00:12:08,360 --> 00:12:16,760
and basically we didn't think too much

00:12:12,980 --> 00:12:21,140
of a plan already tail plan but the idea

00:12:16,760 --> 00:12:22,850
was yeah we cannot use this

00:12:21,140 --> 00:12:24,800
infrastructure anymore we need to

00:12:22,850 --> 00:12:27,680
migrate to another one to another

00:12:24,800 --> 00:12:29,870
platform and in particular we need to

00:12:27,680 --> 00:12:32,930
migrate it from a platform as a service

00:12:29,870 --> 00:12:35,990
to infrastructure as a service because

00:12:32,930 --> 00:12:39,620
we need more control on what's happening

00:12:35,990 --> 00:12:42,800
okay so when something something sorry

00:12:39,620 --> 00:12:44,810
something goes wrong we can just what

00:12:42,800 --> 00:12:50,150
try to understand what's wrong and fix

00:12:44,810 --> 00:12:53,350
it okay we evaluated different solution

00:12:50,150 --> 00:12:56,840
and in the end we decided to migrate to

00:12:53,350 --> 00:12:59,210
Amazon Web Services because we got good

00:12:56,840 --> 00:13:02,630
experience of that and also part of the

00:12:59,210 --> 00:13:04,070
infrastructure work was already on AWS

00:13:02,630 --> 00:13:09,050
in particular the cloud from

00:13:04,070 --> 00:13:11,900
distributions as I said before the first

00:13:09,050 --> 00:13:14,680
candidate from for migration was the

00:13:11,900 --> 00:13:14,680
talk application

00:13:16,319 --> 00:13:23,319
okay Soleil we laid out a possible

00:13:19,989 --> 00:13:25,499
architecture I'm not sure you can read

00:13:23,319 --> 00:13:29,489
this but I'm going to explain it for you

00:13:25,499 --> 00:13:32,549
here we have a cloud from distribution

00:13:29,489 --> 00:13:35,199
for starting and dynamic content cashing

00:13:32,549 --> 00:13:40,149
then we have an elastic load balancer

00:13:35,199 --> 00:13:43,359
which accept requests and decide to

00:13:40,149 --> 00:13:45,910
which web servers direct every request

00:13:43,359 --> 00:13:51,029
and then we have two front end servers

00:13:45,910 --> 00:13:53,129
in two different availability zones

00:13:51,029 --> 00:13:58,919
everywhere front-end web servers

00:13:53,129 --> 00:14:02,499
contains nginx and PHP and then we have

00:13:58,919 --> 00:14:05,259
the database on address which is the

00:14:02,499 --> 00:14:10,119
service the relational database service

00:14:05,259 --> 00:14:13,980
for Amazon and a man cache ah stood on

00:14:10,119 --> 00:14:16,929
ElastiCache so basically this was the

00:14:13,980 --> 00:14:19,540
first architecture we came up with and

00:14:16,929 --> 00:14:22,379
we thought it was good enough to allow

00:14:19,540 --> 00:14:22,379
us to migrate

00:14:22,649 --> 00:14:33,759
moreover we take this opportunity to

00:14:29,039 --> 00:14:36,459
bump some version of the packages up in

00:14:33,759 --> 00:14:40,119
particular PHP was migrated from five

00:14:36,459 --> 00:14:42,129
point three to five point six my sequel

00:14:40,119 --> 00:14:47,039
from five point zero to five point six

00:14:42,129 --> 00:14:52,419
and we switch from Apache to nginx and

00:14:47,039 --> 00:14:57,129
HP fpn okay so by doing that we faced

00:14:52,419 --> 00:14:59,739
some problems in particular when you are

00:14:57,129 --> 00:15:02,669
trying to switch from one set up when

00:14:59,739 --> 00:15:05,589
basically you have only one machine okay

00:15:02,669 --> 00:15:08,889
because in the previous version or

00:15:05,589 --> 00:15:12,789
workspace well maybe there were more

00:15:08,889 --> 00:15:16,809
machine but everything was shared so we

00:15:12,789 --> 00:15:19,539
can treat them only as if we're only one

00:15:16,809 --> 00:15:22,739
machine here we have two machines so we

00:15:19,539 --> 00:15:26,549
have different things to take care about

00:15:22,739 --> 00:15:29,040
first one web servers IP are dynamic

00:15:26,549 --> 00:15:33,240
because they are also done

00:15:29,040 --> 00:15:36,210
Amazon and the change we can connect

00:15:33,240 --> 00:15:38,040
only through a bastion and then we need

00:15:36,210 --> 00:15:41,940
to share user session between servers

00:15:38,040 --> 00:15:49,970
the first one web servers are dynamic

00:15:41,940 --> 00:15:53,970
okay but we can use a WS SDK in to get

00:15:49,970 --> 00:15:58,230
and describe a description of the

00:15:53,970 --> 00:16:04,320
servers and to filter that to get the IP

00:15:58,230 --> 00:16:07,110
so before every deploy we just fetch the

00:16:04,320 --> 00:16:10,730
available servers okay which maybe is

00:16:07,110 --> 00:16:16,550
one two three four depending on how many

00:16:10,730 --> 00:16:20,220
are running based on the scaling policy

00:16:16,550 --> 00:16:22,920
which I'll show you later and basically

00:16:20,220 --> 00:16:27,300
we're done so we get the IP and now we

00:16:22,920 --> 00:16:32,640
know where whichever where we need to

00:16:27,300 --> 00:16:38,760
deploy okay this is a snippet on of how

00:16:32,640 --> 00:16:44,520
to do that with the SDK in particular

00:16:38,760 --> 00:16:46,560
here we are fetching this group of

00:16:44,520 --> 00:16:51,720
servers and here we are filtering the

00:16:46,560 --> 00:16:56,670
information in particular private IP

00:16:51,720 --> 00:17:00,360
address okay make sense it should be

00:16:56,670 --> 00:17:02,310
okay please feel free feel free to stop

00:17:00,360 --> 00:17:08,220
me and ask me a question if I not clear

00:17:02,310 --> 00:17:11,190
enough okay we can connect only through

00:17:08,220 --> 00:17:14,010
Bastion host what does it mean as a

00:17:11,190 --> 00:17:16,440
security policy basically we didn't give

00:17:14,010 --> 00:17:20,820
access direct access to the production

00:17:16,440 --> 00:17:25,190
machine so a developer cannot SSH into

00:17:20,820 --> 00:17:28,050
the front end server but in it to

00:17:25,190 --> 00:17:31,380
connect to another machine which is

00:17:28,050 --> 00:17:34,140
called Bastion host and this particular

00:17:31,380 --> 00:17:37,740
machine have rights to connect to the

00:17:34,140 --> 00:17:39,390
front end servers which is OK from the

00:17:37,740 --> 00:17:42,870
security point of view but is not that

00:17:39,390 --> 00:17:46,050
good and it can become complicated

00:17:42,870 --> 00:17:51,510
we want to deploy new code and we solve

00:17:46,050 --> 00:17:56,880
that adding a configuration on SSH in

00:17:51,510 --> 00:17:58,980
particular here we are saying okay that

00:17:56,880 --> 00:18:01,740
they want to connect to the bastion with

00:17:58,980 --> 00:18:06,390
this particular IP address which is a

00:18:01,740 --> 00:18:13,650
fixed one using this key which is pretty

00:18:06,390 --> 00:18:18,690
simple after that here we are saying

00:18:13,650 --> 00:18:22,559
that if I want to connect to this pool

00:18:18,690 --> 00:18:26,990
of IP address which are the IP of the

00:18:22,559 --> 00:18:29,670
front end servers we don't know exactly

00:18:26,990 --> 00:18:32,010
what they are but they are in this range

00:18:29,670 --> 00:18:37,440
if I want to connect to one of these IP

00:18:32,010 --> 00:18:40,260
I need to proxy through the Bastion okay

00:18:37,440 --> 00:18:42,929
so basically this is the meaning of all

00:18:40,260 --> 00:18:47,309
this configuration with this

00:18:42,929 --> 00:18:50,250
configuration we can just SSH through

00:18:47,309 --> 00:18:53,130
the front end servers once we know when

00:18:50,250 --> 00:18:59,400
we know the IP and we're done we don't

00:18:53,130 --> 00:19:05,190
need to do anything else okay last point

00:18:59,400 --> 00:19:07,770
share is a session actually talked was a

00:19:05,190 --> 00:19:12,000
stateless API is a stateless API so we

00:19:07,770 --> 00:19:15,000
well didn't deal with that and that

00:19:12,000 --> 00:19:18,960
particular moment of the migration will

00:19:15,000 --> 00:19:21,020
be back on that later and I think we

00:19:18,960 --> 00:19:25,790
implemented was nginx study cache

00:19:21,020 --> 00:19:28,410
basically nginx can create a static file

00:19:25,790 --> 00:19:32,100
after responding to a request and can

00:19:28,410 --> 00:19:36,660
serve this file instead of processing

00:19:32,100 --> 00:19:39,540
the request again okay okay as good

00:19:36,660 --> 00:19:43,050
another proxy cache do like maybe

00:19:39,540 --> 00:19:48,300
varnish okay this is the configuration

00:19:43,050 --> 00:19:50,940
we used in particular this configuration

00:19:48,300 --> 00:19:56,630
is important first GI cache key

00:19:50,940 --> 00:19:59,240
basically all this different parameter

00:19:56,630 --> 00:20:05,960
and all the values different values that

00:19:59,240 --> 00:20:09,380
each parameter can have make a key

00:20:05,960 --> 00:20:12,410
unique so basically here we are saying

00:20:09,380 --> 00:20:18,110
for every different value of scheme

00:20:12,410 --> 00:20:20,390
Rico's method get post put patch for a

00:20:18,110 --> 00:20:23,320
different host name and for a different

00:20:20,390 --> 00:20:29,030
request URI cache a different version of

00:20:23,320 --> 00:20:31,550
the response okay in that case we also

00:20:29,030 --> 00:20:38,930
want to cache the response for three

00:20:31,550 --> 00:20:42,830
minutes which is quite good and another

00:20:38,930 --> 00:20:46,100
configuration was to exclude some

00:20:42,830 --> 00:20:49,640
particular method because yeah we don't

00:20:46,100 --> 00:20:53,030
want to cache post or put method also

00:20:49,640 --> 00:20:57,200
delete and we set this parameter no cash

00:20:53,030 --> 00:21:00,830
equals to one and we are done

00:20:57,200 --> 00:21:04,190
another case for the tolk API this

00:21:00,830 --> 00:21:07,160
endpoint API Q is the moderation queue

00:21:04,190 --> 00:21:09,550
okay where the comments get posted and

00:21:07,160 --> 00:21:11,870
the way to be moderated by an editor

00:21:09,550 --> 00:21:14,660
also we don't want to cache this

00:21:11,870 --> 00:21:20,140
endpoint in order to show the editors

00:21:14,660 --> 00:21:20,140
always new comments and non stare ones

00:21:20,320 --> 00:21:23,560
what else

00:21:23,650 --> 00:21:30,710
okay here we are seeing that the no

00:21:27,860 --> 00:21:37,180
cache parameter used to bypass the cache

00:21:30,710 --> 00:21:37,180
in this way okay

00:21:41,040 --> 00:21:51,160
this is pretty standard I guess we

00:21:45,430 --> 00:21:54,040
deployed using the sibling trick let me

00:21:51,160 --> 00:21:56,590
call it that way okay basically every

00:21:54,040 --> 00:21:59,140
deploy is done in a different directory

00:21:56,590 --> 00:22:00,760
and then we have a symlink which is

00:21:59,140 --> 00:22:03,970
reached at the end of the deployed

00:22:00,760 --> 00:22:09,340
procedure in order to have automatic up

00:22:03,970 --> 00:22:13,630
cache clear cleared after each deploy we

00:22:09,340 --> 00:22:16,210
use basically this parameter we set

00:22:13,630 --> 00:22:21,030
document route to real path route which

00:22:16,210 --> 00:22:21,030
means that siblings get resolved and

00:22:21,780 --> 00:22:26,110
when we deploy to a new directory and

00:22:24,400 --> 00:22:29,220
ripple start arriving in the new

00:22:26,110 --> 00:22:32,770
directory a new op cache is created

00:22:29,220 --> 00:22:37,540
again so there is a little trick to have

00:22:32,770 --> 00:22:43,420
op cache cleared automatically okay so

00:22:37,540 --> 00:22:46,480
all the setup was done we took the old

00:22:43,420 --> 00:22:49,060
logs which were available not real time

00:22:46,480 --> 00:22:52,060
but available and we try to find out

00:22:49,060 --> 00:22:55,720
which were the most hittin point and we

00:22:52,060 --> 00:22:59,110
start to load testing them after that we

00:22:55,720 --> 00:23:01,810
created a my images snapshot of the

00:22:59,110 --> 00:23:03,670
machine we deployed the latest version

00:23:01,810 --> 00:23:07,810
of the code in the on the new servers

00:23:03,670 --> 00:23:12,060
and after that with which DNS and we

00:23:07,810 --> 00:23:16,510
were done more or less actually because

00:23:12,060 --> 00:23:21,400
everything exploded and we found out

00:23:16,510 --> 00:23:23,590
that the database were missing a

00:23:21,400 --> 00:23:28,660
particular index that weren't present in

00:23:23,590 --> 00:23:30,300
the Rackspace database and here the

00:23:28,660 --> 00:23:35,830
problem became became quite obvious

00:23:30,300 --> 00:23:38,470
obvious after like 10 second so the day

00:23:35,830 --> 00:23:40,900
of moving from a platform as a service

00:23:38,470 --> 00:23:43,860
to infrastructure service was good from

00:23:40,900 --> 00:23:46,390
that point of view okay

00:23:43,860 --> 00:23:49,170
first part of application was migrating

00:23:46,390 --> 00:23:49,170
we were wrapping

00:23:49,910 --> 00:23:59,520
between the platform now runs onto

00:23:54,240 --> 00:24:03,350
clouds Rackspace and AWS - quick word

00:23:59,520 --> 00:24:06,360
about backup remember this is our

00:24:03,350 --> 00:24:10,530
architecture and we perform the backup

00:24:06,360 --> 00:24:15,210
of the front-end machines and database

00:24:10,530 --> 00:24:18,810
we create a snapshot every night and we

00:24:15,210 --> 00:24:22,560
don't have a multi region setup okay all

00:24:18,810 --> 00:24:27,360
of this is in a single region so if a

00:24:22,560 --> 00:24:30,060
region fail we are in in trouble but we

00:24:27,360 --> 00:24:32,910
just copy the snapshot to another region

00:24:30,060 --> 00:24:35,250
so that was something we discuss with

00:24:32,910 --> 00:24:40,500
the client and we decided it was good

00:24:35,250 --> 00:24:47,580
enough as a starting point okay how can

00:24:40,500 --> 00:24:49,650
we do that using the AWS clip API here

00:24:47,580 --> 00:24:56,730
is an example of how to create a

00:24:49,650 --> 00:25:00,270
snapshot of the database okay and how to

00:24:56,730 --> 00:25:03,180
copy it to another region in this way

00:25:00,270 --> 00:25:05,730
yes copy DB snapshot and then you

00:25:03,180 --> 00:25:12,540
specify the source and the target and

00:25:05,730 --> 00:25:16,670
the region and you're done after that we

00:25:12,540 --> 00:25:22,040
clean the previously create a snapshot

00:25:16,670 --> 00:25:26,640
and basically we are done okay

00:25:22,040 --> 00:25:30,660
second application a DV very quick

00:25:26,640 --> 00:25:33,360
because it contains only a small

00:25:30,660 --> 00:25:35,670
database relatively small it's again

00:25:33,360 --> 00:25:38,240
stateless all the infrastructure was

00:25:35,670 --> 00:25:41,340
already set the emigration was

00:25:38,240 --> 00:25:43,050
particularly easy the only thing we did

00:25:41,340 --> 00:25:45,420
was to create a new cloud fund

00:25:43,050 --> 00:25:49,380
distribution for dynamic content called

00:25:45,420 --> 00:25:54,680
a DV dot Catamarca TOCOM okay in order

00:25:49,380 --> 00:25:59,890
to benefit from again HTTP caching then

00:25:54,680 --> 00:26:03,100
no particular problems Mobile

00:25:59,890 --> 00:26:08,970
okay the mobile part of the site

00:26:03,100 --> 00:26:12,970
well had the night impact because all

00:26:08,970 --> 00:26:17,020
almost half of the traffic run through

00:26:12,970 --> 00:26:21,100
the mobile site now this was when we

00:26:17,020 --> 00:26:26,440
started immigration today is higher I

00:26:21,100 --> 00:26:28,140
think is 55% of the total traffic runs

00:26:26,440 --> 00:26:30,880
through mobile

00:26:28,140 --> 00:26:33,549
there is no data base because it

00:26:30,880 --> 00:26:39,850
consumers data API is from the other

00:26:33,549 --> 00:26:43,059
services we need to face a new problem

00:26:39,850 --> 00:26:46,750
how to deal with static asset okay when

00:26:43,059 --> 00:26:48,760
we deployed the mobile site we have

00:26:46,750 --> 00:26:51,429
static asset like background images and

00:26:48,760 --> 00:26:54,010
stuff like that and in the previous

00:26:51,429 --> 00:26:58,750
version Rackspace everything was shared

00:26:54,010 --> 00:27:02,040
through an FS we decided to use the

00:26:58,750 --> 00:27:07,200
object storage from Amazon Amazon s3

00:27:02,040 --> 00:27:10,270
defining a bucket in this way and we

00:27:07,200 --> 00:27:12,549
created two clouds from distribution

00:27:10,270 --> 00:27:16,210
again one for dynamic content and one

00:27:12,549 --> 00:27:20,290
for static content again for HTTP

00:27:16,210 --> 00:27:26,410
caching and when we deploy a new version

00:27:20,290 --> 00:27:30,630
of the site using this command we think

00:27:26,410 --> 00:27:36,610
they are set on s3 okay he was saying

00:27:30,630 --> 00:27:41,070
just sync the data from this local

00:27:36,610 --> 00:27:47,049
folder directory to this bucket and

00:27:41,070 --> 00:27:49,390
again we are done we deployed the mobile

00:27:47,049 --> 00:27:54,190
site on a sample machine to make some

00:27:49,390 --> 00:27:56,440
tests again we using the logs try to

00:27:54,190 --> 00:28:01,350
figure out what where which were the

00:27:56,440 --> 00:28:05,790
most 8 pages and performance tested it

00:28:01,350 --> 00:28:12,080
we deployed rebuild Mei and rich DNS and

00:28:05,790 --> 00:28:14,900
everything went smooth we measured

00:28:12,080 --> 00:28:17,420
after the deploy things for a bit like

00:28:14,900 --> 00:28:20,170
one with two weeks and we started to see

00:28:17,420 --> 00:28:25,250
that there were a lot of requests from

00:28:20,170 --> 00:28:32,140
CloudFront to s3 it turns out that we

00:28:25,250 --> 00:28:35,810
missed some adder which can be added to

00:28:32,140 --> 00:28:38,510
every static asset in this way here

00:28:35,810 --> 00:28:42,530
basically were saying I add this

00:28:38,510 --> 00:28:46,600
cache-control max-age like one hour to

00:28:42,530 --> 00:28:51,200
all these assets which is nice because

00:28:46,600 --> 00:28:57,080
this means less request from CloudFront

00:28:51,200 --> 00:29:07,360
to s3 which means less dollars you spend

00:28:57,080 --> 00:29:14,480
on that okay again still make sense ok

00:29:07,360 --> 00:29:18,170
another part was community as I said

00:29:14,480 --> 00:29:21,170
before this site allows users to create

00:29:18,170 --> 00:29:23,780
their own personal blog ok ok I can

00:29:21,170 --> 00:29:26,210
write some post and people can comment

00:29:23,780 --> 00:29:29,300
and vote my post and stuff like that and

00:29:26,210 --> 00:29:32,840
it's the first up that can be considered

00:29:29,300 --> 00:29:36,170
complete because it's interact with the

00:29:32,840 --> 00:29:37,180
database it uses some api's and stuff

00:29:36,170 --> 00:29:42,170
like that

00:29:37,180 --> 00:29:46,220
also it exposed some api's for user

00:29:42,170 --> 00:29:49,280
latest stuff like single sign-on or yeah

00:29:46,220 --> 00:29:54,620
allowed to retrieving user posts on

00:29:49,280 --> 00:29:57,860
stuff like that so the problem was kept

00:29:54,620 --> 00:30:01,460
before popped back again we need to

00:29:57,860 --> 00:30:04,280
share user session between servers in

00:30:01,460 --> 00:30:07,150
this case we used another service from

00:30:04,280 --> 00:30:12,940
Amazon Amazon ElastiCache which is a

00:30:07,150 --> 00:30:16,280
memcache as a service you can use

00:30:12,940 --> 00:30:22,430
without need to configure it on your own

00:30:16,280 --> 00:30:25,900
machine we didn't have to make big

00:30:22,430 --> 00:30:30,140
changes in the code just

00:30:25,900 --> 00:30:34,690
defining a new services which is

00:30:30,140 --> 00:30:37,940
memcache adding the different hosts and

00:30:34,690 --> 00:30:41,240
change the session and there in this way

00:30:37,940 --> 00:30:44,270
and automatically of the session now are

00:30:41,240 --> 00:30:48,220
saved on saved and retrieve on memcache

00:30:44,270 --> 00:30:48,220
rather than the local file system

00:30:48,760 --> 00:30:52,600
yeah exactly

00:30:54,030 --> 00:31:00,690
okay how to deal with user-generated

00:30:58,560 --> 00:31:03,990
content okay we found a way to deal with

00:31:00,690 --> 00:31:06,630
the static asset and now we need to deal

00:31:03,990 --> 00:31:09,420
with user-generated content like post

00:31:06,630 --> 00:31:12,900
and images and stuff like that

00:31:09,420 --> 00:31:16,340
again we created like before show

00:31:12,900 --> 00:31:20,970
particularly cover distribution one for

00:31:16,340 --> 00:31:24,360
dynamic content called V Excel and one

00:31:20,970 --> 00:31:28,260
for static content called say CDN v XL

00:31:24,360 --> 00:31:31,650
both got Koch market or calm okay

00:31:28,260 --> 00:31:37,010
in order to work with user-generated

00:31:31,650 --> 00:31:39,810
asset we used go fret which is

00:31:37,010 --> 00:31:42,890
particularly magnets famous and many

00:31:39,810 --> 00:31:46,260
dude how many of you do you know go fret

00:31:42,890 --> 00:31:51,270
Phil okay it's a file system abstraction

00:31:46,260 --> 00:31:54,870
layer which it means that it allows you

00:31:51,270 --> 00:31:57,300
once you configure it to write code in a

00:31:54,870 --> 00:31:59,580
file system independent way okay it

00:31:57,300 --> 00:32:04,860
doesn't matter if I want to save a file

00:31:59,580 --> 00:32:07,530
on s3 or through FTP or in the local

00:32:04,860 --> 00:32:11,010
file system the code remains the same I

00:32:07,530 --> 00:32:14,670
just say file system write this content

00:32:11,010 --> 00:32:17,160
and the library takes care of all the

00:32:14,670 --> 00:32:19,200
work needs to be done underneath to make

00:32:17,160 --> 00:32:22,170
it happen okay

00:32:19,200 --> 00:32:24,210
another good library to do that is fly

00:32:22,170 --> 00:32:28,700
system if I remember the name correctly

00:32:24,210 --> 00:32:32,750
from the PHP League and also quite good

00:32:28,700 --> 00:32:36,870
how do we configure go Fred in Symphony

00:32:32,750 --> 00:32:39,570
you need to defined adapters an adapter

00:32:36,870 --> 00:32:43,680
represent in Raptor represents basically

00:32:39,570 --> 00:32:47,880
well one file system you want to be able

00:32:43,680 --> 00:32:51,270
to write a written in this case we are

00:32:47,880 --> 00:32:58,260
saying okay this adapter is called photo

00:32:51,270 --> 00:32:59,940
storage and it uses Amazon s3 which the

00:32:58,260 --> 00:33:05,430
bucket name defined in this parameter

00:32:59,940 --> 00:33:08,610
and it uses this service ID

00:33:05,430 --> 00:33:11,580
then you define a file system called

00:33:08,610 --> 00:33:14,610
again the same way maybe it's not really

00:33:11,580 --> 00:33:16,950
clever name but here we are saying the

00:33:14,610 --> 00:33:20,760
photo storage file system who uses this

00:33:16,950 --> 00:33:24,090
adapter and we can also call it in that

00:33:20,760 --> 00:33:30,030
way photo storage for system and the

00:33:24,090 --> 00:33:31,470
configuration is done the client the

00:33:30,030 --> 00:33:33,780
service we passed before in the

00:33:31,470 --> 00:33:38,280
configuration is basically an Astra

00:33:33,780 --> 00:33:41,460
client which we create using Walia a

00:33:38,280 --> 00:33:45,890
debris SS decay here we are saying

00:33:41,460 --> 00:33:50,760
create create an s3 client with this key

00:33:45,890 --> 00:33:52,800
this secret in this region ok the key

00:33:50,760 --> 00:33:58,380
and the circuit and the one you get when

00:33:52,800 --> 00:34:03,840
you sign up for Amazon Web Services the

00:33:58,380 --> 00:34:07,500
code to write a read assets is as you

00:34:03,840 --> 00:34:11,630
can see well file system independent

00:34:07,500 --> 00:34:16,440
here we are saying this resistant right

00:34:11,630 --> 00:34:18,300
on this path this content and we don't

00:34:16,440 --> 00:34:21,150
know if underneath we are writing on the

00:34:18,300 --> 00:34:25,500
local file system or on history or on

00:34:21,150 --> 00:34:30,530
FTP whatever so this is the important

00:34:25,500 --> 00:34:34,580
part and by the way the photo uploader

00:34:30,530 --> 00:34:37,020
class is the one we used to deal with

00:34:34,580 --> 00:34:43,110
user-generated content when a user

00:34:37,020 --> 00:34:46,200
uploads his own images again we deployed

00:34:43,110 --> 00:34:48,960
on the sample machine we performance

00:34:46,200 --> 00:34:52,100
tested it based again on the logs we

00:34:48,960 --> 00:34:57,060
deployed the new code rebuild all the

00:34:52,100 --> 00:35:00,450
images the in the eyes and we copy all

00:34:57,060 --> 00:35:06,560
the user asset on s3 and with which

00:35:00,450 --> 00:35:06,560
Dennis okay

00:35:06,820 --> 00:35:15,130
we are at that point at 2/3 of the

00:35:12,850 --> 00:35:20,560
immigration we migrated for services to

00:35:15,130 --> 00:35:24,640
our left the next one is web ok web was

00:35:20,560 --> 00:35:27,850
and is actually the oldest and biggest

00:35:24,640 --> 00:35:31,500
and biggest code base shamefully one

00:35:27,850 --> 00:35:36,520
really lot of modules applications and

00:35:31,500 --> 00:35:42,220
it's a proxy for all the mobile calls

00:35:36,520 --> 00:35:45,640
API actually and well as I said before

00:35:42,220 --> 00:35:48,340
now this percentage is a little lower

00:35:45,640 --> 00:35:53,619
but still there is a lot of traffic

00:35:48,340 --> 00:35:57,400
running through that first issues well

00:35:53,619 --> 00:36:00,820
officially PHP 5.6 is not supported by a

00:35:57,400 --> 00:36:04,210
symphony one okay we came up with two

00:36:00,820 --> 00:36:07,000
plans two different plans first one try

00:36:04,210 --> 00:36:12,400
to upgrade Symphony one to support PHP

00:36:07,000 --> 00:36:14,740
5.6 and as a back-up plan deploy the web

00:36:12,400 --> 00:36:16,320
on different machines with an older PHP

00:36:14,740 --> 00:36:20,740
version

00:36:16,320 --> 00:36:23,770
fortunately we found this project which

00:36:20,740 --> 00:36:25,359
is basically a fork of the symphony one

00:36:23,770 --> 00:36:28,210
repository which is not maintained

00:36:25,359 --> 00:36:31,390
anymore this one is a clicking actively

00:36:28,210 --> 00:36:35,650
maintained and also there are new

00:36:31,390 --> 00:36:39,220
feature for instance dependency

00:36:35,650 --> 00:36:42,910
injection container and swift mailer as

00:36:39,220 --> 00:36:44,950
a default mailer actually we weren't

00:36:42,910 --> 00:36:48,010
interested in getting new features so we

00:36:44,950 --> 00:36:52,720
just pick it up the part of the code

00:36:48,010 --> 00:36:56,980
that enable us to make symphony one PHP

00:36:52,720 --> 00:37:03,280
5.6 compatible it turned out that they

00:36:56,980 --> 00:37:06,280
were just basically one small change in

00:37:03,280 --> 00:37:10,350
particular this function the regular

00:37:06,280 --> 00:37:14,740
plays doesn't allow this switch /e

00:37:10,350 --> 00:37:16,380
anymore and basically this is the change

00:37:14,740 --> 00:37:18,490
you need to do to obtain the same

00:37:16,380 --> 00:37:23,349
behavior

00:37:18,490 --> 00:37:27,490
and that's all okay

00:37:23,349 --> 00:37:30,070
after that we created another cloud for

00:37:27,490 --> 00:37:32,200
mr. Bhushan for static content CDN

00:37:30,070 --> 00:37:42,750
web.com kasa.com

00:37:32,200 --> 00:37:46,780
and also we switched dns using route 53

00:37:42,750 --> 00:37:50,170
because well there is a detailed

00:37:46,780 --> 00:37:55,619
explanation on why we need to do that

00:37:50,170 --> 00:37:59,380
here the idea is well among the other

00:37:55,619 --> 00:38:02,740
things it gives us more flexibility in

00:37:59,380 --> 00:38:10,089
managing DNS in that particular way for

00:38:02,740 --> 00:38:13,930
this particular application okay what

00:38:10,089 --> 00:38:15,580
else nothing more actually we deploy it

00:38:13,930 --> 00:38:18,670
again on a sample machine perform

00:38:15,580 --> 00:38:20,470
untested deployed like a captain

00:38:18,670 --> 00:38:23,140
repeating the same action again again

00:38:20,470 --> 00:38:31,320
again repeating the MEI and then switch

00:38:23,140 --> 00:38:36,640
DNS and web was migrated the last part

00:38:31,320 --> 00:38:44,109
was media asset management cropping

00:38:36,640 --> 00:38:46,480
residing stuff like that as I said

00:38:44,109 --> 00:38:52,650
before end of image Tom Lee league stuff

00:38:46,480 --> 00:38:56,170
like that pretty big archive 17 gigs and

00:38:52,650 --> 00:38:58,030
yeah API are stateful in that case

00:38:56,170 --> 00:39:06,880
because in order to perform this

00:38:58,030 --> 00:39:10,540
operation area to be authenticated this

00:39:06,880 --> 00:39:13,410
is an example of how this part of the

00:39:10,540 --> 00:39:17,770
code works basically the idea is when a

00:39:13,410 --> 00:39:21,280
site mobile web or community ask for an

00:39:17,770 --> 00:39:24,010
image through media media checks if a

00:39:21,280 --> 00:39:28,030
thumbnail already exists for that

00:39:24,010 --> 00:39:30,790
particular images image and if it exists

00:39:28,030 --> 00:39:32,170
its service directly otherwise it

00:39:30,790 --> 00:39:40,960
created

00:39:32,170 --> 00:39:46,750
and upload it to s3 okay basically what

00:39:40,960 --> 00:39:49,240
we do here is let's say we are serving a

00:39:46,750 --> 00:39:51,579
request for a new term nail download

00:39:49,240 --> 00:39:57,270
from file manager for manager is the

00:39:51,579 --> 00:40:01,950
part of the media API that contains the

00:39:57,270 --> 00:40:08,380
images original images we generate a

00:40:01,950 --> 00:40:11,760
unique CDN key where we resize the image

00:40:08,380 --> 00:40:16,359
we optimize it to save some space

00:40:11,760 --> 00:40:19,510
then we upload it to the CDN we update

00:40:16,359 --> 00:40:23,109
some metadata after that we delete the

00:40:19,510 --> 00:40:25,690
temporary files and basically we're done

00:40:23,109 --> 00:40:28,000
so these are all the steps involved in

00:40:25,690 --> 00:40:34,299
creating a new thumbnail for a given

00:40:28,000 --> 00:40:39,010
image okay we needed to transfer all the

00:40:34,299 --> 00:40:42,700
old images from the Rackspace CDN to s3

00:40:39,010 --> 00:40:47,740
as I said before the only access we got

00:40:42,700 --> 00:40:51,819
to Rackspace was through FTP yay so we

00:40:47,740 --> 00:40:59,200
wrote a nice script to copy all the

00:40:51,819 --> 00:41:02,160
images well it's basically a long boring

00:40:59,200 --> 00:41:06,250
task and sometimes obviously the script

00:41:02,160 --> 00:41:10,720
and/or that the FTP connection dropped

00:41:06,250 --> 00:41:14,710
but after a few try we made it and we

00:41:10,720 --> 00:41:17,589
copied all the images on a stream and we

00:41:14,710 --> 00:41:20,740
found another little problem in

00:41:17,589 --> 00:41:27,849
particular there is a little difference

00:41:20,740 --> 00:41:36,040
on our streak can manage image name in

00:41:27,849 --> 00:41:39,490
particular you need to remove all the

00:41:36,040 --> 00:41:42,520
strange characters okay which in the

00:41:39,490 --> 00:41:46,090
previous CDN was not a problem but here

00:41:42,520 --> 00:41:50,370
it was so with this snippet of code

00:41:46,090 --> 00:41:55,470
we created a slug of the image name and

00:41:50,370 --> 00:41:59,020
well after that everything went fine

00:41:55,470 --> 00:42:01,180
okay so we migrated all the application

00:41:59,020 --> 00:42:03,900
there are a few more things I'd like to

00:42:01,180 --> 00:42:10,990
discuss and then if you have questions I

00:42:03,900 --> 00:42:13,390
am available monitoring yeah well

00:42:10,990 --> 00:42:15,640
because we want to know when things go

00:42:13,390 --> 00:42:19,150
bad and in order to be able to react

00:42:15,640 --> 00:42:20,560
timely we used Amazon Cloud watch to do

00:42:19,150 --> 00:42:28,950
that

00:42:20,560 --> 00:42:35,890
in particular we traced different

00:42:28,950 --> 00:42:39,000
metrics like RDS CPU usage IO operation

00:42:35,890 --> 00:42:42,910
on the database again the main cache

00:42:39,000 --> 00:42:48,220
dimension requests and stuff at that the

00:42:42,910 --> 00:42:55,410
number of requests on the instances and

00:42:48,220 --> 00:42:57,820
the CPU usage and stuff like that since

00:42:55,410 --> 00:43:00,400
there is a choic retention for this

00:42:57,820 --> 00:43:03,370
information we have integrated it with

00:43:00,400 --> 00:43:05,530
our internal cactii and Nagios

00:43:03,370 --> 00:43:09,720
monitoring tools in order to have a

00:43:05,530 --> 00:43:13,080
longer attention of this data and also

00:43:09,720 --> 00:43:15,490
we integrated it with slack so when

00:43:13,080 --> 00:43:18,370
something sorry

00:43:15,490 --> 00:43:21,240
something goes wrong we are notifying

00:43:18,370 --> 00:43:21,240
directors like

00:43:25,740 --> 00:43:34,150
auto-scaling one of the nice thing of

00:43:29,100 --> 00:43:37,900
using Amazon Web Services is you can

00:43:34,150 --> 00:43:43,030
decide based on some rules when adding

00:43:37,900 --> 00:43:47,230
or removing more servers for our use

00:43:43,030 --> 00:43:50,140
case we have two auto scaling group in

00:43:47,230 --> 00:43:54,190
our setup and we defined three different

00:43:50,140 --> 00:43:56,740
metrics CPU usage response time and

00:43:54,190 --> 00:44:01,120
number of requests per second in

00:43:56,740 --> 00:44:06,700
particular we decided that when the CPU

00:44:01,120 --> 00:44:11,320
usage goes over 70% or what the response

00:44:06,700 --> 00:44:14,200
time goes over 100 milliseconds or when

00:44:11,320 --> 00:44:18,240
the number of requests per second goes

00:44:14,200 --> 00:44:23,520
over 10,000 we spin up a new machine and

00:44:18,240 --> 00:44:29,950
when the these three metrics

00:44:23,520 --> 00:44:32,970
come back to normality we just drop the

00:44:29,950 --> 00:44:36,760
extra machines in this way we can handle

00:44:32,970 --> 00:44:40,210
in a nice way peaks during let's say

00:44:36,760 --> 00:44:49,330
January August September and also Peaks

00:44:40,210 --> 00:44:51,670
during big matches ok there is some few

00:44:49,330 --> 00:44:55,270
things I'd like to say the fuel

00:44:51,670 --> 00:44:58,090
migration took us one year ok actually

00:44:55,270 --> 00:45:02,650
it wasn't a full-time job because it was

00:44:58,090 --> 00:45:07,300
just kind of ours but yeah it took one

00:45:02,650 --> 00:45:09,940
year of time and it's something with it

00:45:07,300 --> 00:45:14,200
gradually so we didn't want to rush

00:45:09,940 --> 00:45:16,330
thing we migrated one part measure for

00:45:14,200 --> 00:45:19,570
one week two weeks how things were going

00:45:16,330 --> 00:45:21,250
and then planned emigrate they are the

00:45:19,570 --> 00:45:22,240
part of application on the

00:45:21,250 --> 00:45:27,310
infrastructure sorry

00:45:22,240 --> 00:45:33,760
and after some measurements we found

00:45:27,310 --> 00:45:36,730
that we have a 50% cost reduction for

00:45:33,760 --> 00:45:37,530
our particular case which is well quite

00:45:36,730 --> 00:45:40,410
good

00:45:37,530 --> 00:45:43,800
mmm let me be clear this talk is not

00:45:40,410 --> 00:45:46,740
about blaming Rackspace okay simply it

00:45:43,800 --> 00:45:50,340
wasn't suitable anymore for our needs

00:45:46,740 --> 00:45:53,100
okay maybe it was fine when the project

00:45:50,340 --> 00:45:56,400
started but at that particular scale

00:45:53,100 --> 00:45:59,750
with our particular needs

00:45:56,400 --> 00:46:05,640
it wasn't suitable and suitable anymore

00:45:59,750 --> 00:46:10,770
okay so this is the final architecture

00:46:05,640 --> 00:46:15,210
here we have today normally Chu from 10

00:46:10,770 --> 00:46:20,760
web service for different availability

00:46:15,210 --> 00:46:25,140
zone and again energy s9 cache on top of

00:46:20,760 --> 00:46:28,560
that a load balancer and all the clouds

00:46:25,140 --> 00:46:33,900
on distribution DNS are managed through

00:46:28,560 --> 00:46:37,800
route 53 and all the asset both user

00:46:33,900 --> 00:46:43,670
generated and static asset are on a

00:46:37,800 --> 00:46:48,560
string okay what else

00:46:43,670 --> 00:46:53,070
macro services helped us a lot because

00:46:48,560 --> 00:46:57,120
well they were macro but not big enough

00:46:53,070 --> 00:47:02,520
- not big as let's say web or community

00:46:57,120 --> 00:47:08,030
and it allowed us to migrate in an

00:47:02,520 --> 00:47:12,750
incremental way okay if we for instance

00:47:08,030 --> 00:47:15,270
add only a big monolith well probably it

00:47:12,750 --> 00:47:19,500
would have been much more difficult to

00:47:15,270 --> 00:47:21,260
migrate also the HTTP cache helped us a

00:47:19,500 --> 00:47:25,130
lot

00:47:21,260 --> 00:47:28,080
giving us time in the beginning and

00:47:25,130 --> 00:47:31,380
helping us to saving money reducing the

00:47:28,080 --> 00:47:33,930
number of requests from CloudFront to s3

00:47:31,380 --> 00:47:37,950
but also from cloud front to the front

00:47:33,930 --> 00:47:43,250
end machine it's important to try to

00:47:37,950 --> 00:47:47,370
measure when you do changes to see if

00:47:43,250 --> 00:47:51,260
your changes are having a good a

00:47:47,370 --> 00:47:51,260
positive effect or a negative one

00:47:51,420 --> 00:47:58,260
since the migration ended some months

00:47:54,390 --> 00:48:02,210
ago we continued on that path and we

00:47:58,260 --> 00:48:07,800
will start rationalizing the API calls

00:48:02,210 --> 00:48:11,070
trying to make less cold in general okay

00:48:07,800 --> 00:48:14,490
for instance when loading comments in

00:48:11,070 --> 00:48:16,650
the previous version of the site four or

00:48:14,490 --> 00:48:20,400
five requests were issued different

00:48:16,650 --> 00:48:25,350
member country now we have only one we

00:48:20,400 --> 00:48:28,020
recognized some front-end stuff trying

00:48:25,350 --> 00:48:30,930
again to download the last asset using

00:48:28,020 --> 00:48:34,530
sprite and stuff like that and we

00:48:30,930 --> 00:48:37,830
started to get rid of the old Symphony

00:48:34,530 --> 00:48:41,600
one application trying to migrate it

00:48:37,830 --> 00:48:47,000
incrementally again in a symphony to one

00:48:41,600 --> 00:48:50,190
the next step are upgrading to PHP seven

00:48:47,000 --> 00:48:54,120
which is something we actually already

00:48:50,190 --> 00:48:56,790
started to do and after that one things

00:48:54,120 --> 00:49:01,140
we might want to try because it's look

00:48:56,790 --> 00:49:06,210
it looks promising is reaching the load

00:49:01,140 --> 00:49:10,140
balancer for from lb to a lb application

00:49:06,210 --> 00:49:14,430
load balancer which supports several new

00:49:10,140 --> 00:49:17,700
features one of these is HTTP to support

00:49:14,430 --> 00:49:21,060
which looks really really promising from

00:49:17,700 --> 00:49:26,850
the performance point of view okay I am

00:49:21,060 --> 00:49:30,090
done one last thing if you want to join

00:49:26,850 --> 00:49:33,630
us in Verona in May

00:49:30,090 --> 00:49:38,190
this is Verona there is a really nice

00:49:33,630 --> 00:49:40,110
conference which is PHP day and the days

00:49:38,190 --> 00:49:42,420
before PSP day there is also the

00:49:40,110 --> 00:49:45,330
JavaScript day there are two community

00:49:42,420 --> 00:49:46,890
conference International actually so

00:49:45,330 --> 00:49:49,019
there are a lot of international

00:49:46,890 --> 00:49:52,829
speakers

00:49:49,019 --> 00:49:56,459
sorry sorry about that

00:49:52,829 --> 00:50:01,919
and well she want to join us it will be

00:49:56,459 --> 00:50:07,409
fun again thank you for listening these

00:50:01,919 --> 00:50:10,349
are my contacts this is the talk on

00:50:07,409 --> 00:50:28,019
joined in and if you have question

00:50:10,349 --> 00:50:30,989
Tamia thank you some question yeah it

00:50:28,019 --> 00:50:33,899
sounds like the talk application was the

00:50:30,989 --> 00:50:35,849
one with the most volatile data like

00:50:33,899 --> 00:50:38,249
users changing or adding blogs that kind

00:50:35,849 --> 00:50:40,679
of stuff was that the most difficult one

00:50:38,249 --> 00:50:42,809
to migrate because you couldn't control

00:50:40,679 --> 00:50:44,939
when comments were being added and

00:50:42,809 --> 00:50:46,229
things like that how did you ensure that

00:50:44,939 --> 00:50:48,919
you can um

00:50:46,229 --> 00:50:51,659
you switched over without losing data

00:50:48,919 --> 00:50:54,419
other words which without losing data

00:50:51,659 --> 00:50:57,359
yeah the talk on MPT yeah the talk one

00:50:54,419 --> 00:51:04,109
basically when we started the migration

00:50:57,359 --> 00:51:07,019
we put the API in read-only mode so for

00:51:04,109 --> 00:51:11,149
a short period of time people cannot

00:51:07,019 --> 00:51:14,849
post new comment only read and well

00:51:11,149 --> 00:51:17,429
after the migration we restored the read

00:51:14,849 --> 00:51:22,769
write mode and basically we were done

00:51:17,429 --> 00:51:26,159
also we plant the migration in early in

00:51:22,769 --> 00:51:28,799
the morning when the traffic is usually

00:51:26,159 --> 00:51:31,769
low so we didn't experience a lot of

00:51:28,799 --> 00:51:33,779
problem still some users got angry even

00:51:31,769 --> 00:51:37,130
if we put a message on all the sides

00:51:33,779 --> 00:51:41,189
we're going to perform maintenance but

00:51:37,130 --> 00:51:45,359
we didn't lose data okay another

00:51:41,189 --> 00:51:47,429
question yeah okay thank you so first

00:51:45,359 --> 00:51:50,069
thank you for a great presentation thank

00:51:47,429 --> 00:51:52,889
you and second you told that you're

00:51:50,069 --> 00:51:55,349
using cloud front and encroachment

00:51:52,889 --> 00:51:58,289
you're able to define different origins

00:51:55,349 --> 00:52:00,239
but also something called behaviors that

00:51:58,289 --> 00:52:01,380
based on path you are able to send the

00:52:00,239 --> 00:52:04,589
traffic to another

00:52:01,380 --> 00:52:07,170
origin and when you have two or three

00:52:04,589 --> 00:52:09,989
behaviors it's quite easy but when a

00:52:07,170 --> 00:52:14,309
number of behaviors increases - I don't

00:52:09,989 --> 00:52:17,249
know 20 or more it's a hell to deploy

00:52:14,309 --> 00:52:22,079
the changes so my question is do you

00:52:17,249 --> 00:52:24,509
have some ways of automate automating

00:52:22,079 --> 00:52:28,829
CloudFront deployment cloud from changes

00:52:24,509 --> 00:52:33,420
in CloudFront configuration no we have

00:52:28,829 --> 00:52:39,269
some of those behavior mention for

00:52:33,420 --> 00:52:45,690
instance for dealing with some paths on

00:52:39,269 --> 00:52:47,819
the mobile site but they are not that

00:52:45,690 --> 00:52:49,589
much they if I remember culturally they

00:52:47,819 --> 00:52:52,009
are like four or five different

00:52:49,589 --> 00:52:55,229
behaviors and no we don't have an

00:52:52,009 --> 00:52:59,509
automatic way to to change that at all

00:52:55,229 --> 00:53:06,989
to deploy that okay

00:52:59,509 --> 00:53:08,940
other questions okay thank you Ron for

00:53:06,989 --> 00:53:15,709
listening

00:53:08,940 --> 00:53:15,709

YouTube URL: https://www.youtube.com/watch?v=09TKbvBtmD4


