Title: PHP UK Conference 2017 - Adam Baratz - Testing Complex Applications for PHP7
Publication date: 2017-04-03
Playlist: PHP UK Conference 2017
Description: 
	Wayfair is one of the world's largest online destinations for the home. Our storefront is a very large PHP application -- 3.5M LoC interacting with a wide array of extensions -- that serves 2M daily visitors. So we were delighted when our upgrade to PHP7 went without a hitch. It worked so well because of a test plan that covered a wide range of strategies and tools. This case study will combine a walkthrough of this project with a practical tour of PHP testing tools, from PHPUnit to GDB.
Captions: 
	00:00:04,359 --> 00:00:10,010
so I want to talk today about a project

00:00:07,040 --> 00:00:11,480
I worked on at Wayfarer Wayfarer is an

00:00:10,010 --> 00:00:14,570
online furniture and home goods store

00:00:11,480 --> 00:00:16,970
and we recently rolled out PHP 7 with

00:00:14,570 --> 00:00:20,000
minimal incidents or downtime so I want

00:00:16,970 --> 00:00:21,529
to talk about how we did this the real

00:00:20,000 --> 00:00:23,779
story behind this project is how we

00:00:21,529 --> 00:00:26,180
leveraged testing so I want to talk

00:00:23,779 --> 00:00:29,779
about start by talking about testing and

00:00:26,180 --> 00:00:31,700
why we test when engineers talk about

00:00:29,779 --> 00:00:33,770
testing we usually talk about unit tests

00:00:31,700 --> 00:00:35,420
or test-driven development unit tests

00:00:33,770 --> 00:00:38,510
for those who don't know are a form of

00:00:35,420 --> 00:00:40,580
automated test the idea is that by

00:00:38,510 --> 00:00:42,560
breaking your code into testable units

00:00:40,580 --> 00:00:45,260
you can have tests that cover every

00:00:42,560 --> 00:00:48,470
possible code path this example is from

00:00:45,260 --> 00:00:50,780
the getting started guide from PHP unit

00:00:48,470 --> 00:00:52,400
a popular testing framework the idea

00:00:50,780 --> 00:00:54,440
with test-driven development is that as

00:00:52,400 --> 00:00:56,030
you write code you also write tests as a

00:00:54,440 --> 00:00:58,160
way of ensuring correctness as you

00:00:56,030 --> 00:00:59,750
complete a project and since it's all

00:00:58,160 --> 00:01:01,040
automated you could run tests quickly

00:00:59,750 --> 00:01:03,260
and you can integrate them into build

00:01:01,040 --> 00:01:04,820
processes and as you code more and more

00:01:03,260 --> 00:01:06,370
you can ensure that you're not breaking

00:01:04,820 --> 00:01:10,100
things as you're adding functionality

00:01:06,370 --> 00:01:11,810
but with this approach it's not an

00:01:10,100 --> 00:01:13,760
approach that everyone likes it's

00:01:11,810 --> 00:01:17,030
certainly something people talk a lot

00:01:13,760 --> 00:01:19,310
about but in the wild it doesn't always

00:01:17,030 --> 00:01:20,780
get used if you've ever tried to

00:01:19,310 --> 00:01:22,549
convince a colleague to write a lot of

00:01:20,780 --> 00:01:25,430
unit tests the conversation is probably

00:01:22,549 --> 00:01:27,290
going something like this someone says

00:01:25,430 --> 00:01:29,780
you know you should really write unit

00:01:27,290 --> 00:01:31,700
tests and someone responds and says well

00:01:29,780 --> 00:01:34,640
I already test my work I don't need to

00:01:31,700 --> 00:01:36,229
write automated tests but unit tests

00:01:34,640 --> 00:01:39,380
will do it faster letting you work

00:01:36,229 --> 00:01:42,650
faster but I really only have to do it

00:01:39,380 --> 00:01:43,659
once it's not that slow unit tests will

00:01:42,650 --> 00:01:46,810
catch regressions

00:01:43,659 --> 00:01:49,460
but this code doesn't change that much

00:01:46,810 --> 00:01:52,130
let's take a step back and describe the

00:01:49,460 --> 00:01:54,560
underlying model software has acceptance

00:01:52,130 --> 00:01:56,990
criteria you can codify it and you can

00:01:54,560 --> 00:01:58,880
automate it and as we all know this is

00:01:56,990 --> 00:02:01,880
why everyone writes unit tests and why

00:01:58,880 --> 00:02:04,100
software never breaks the problem with

00:02:01,880 --> 00:02:06,680
this model is it supposes a level of new

00:02:04,100 --> 00:02:09,409
ability that's unrealistic software

00:02:06,680 --> 00:02:11,030
especially web applications resembles an

00:02:09,409 --> 00:02:13,279
organism more than it resembles

00:02:11,030 --> 00:02:14,930
Clockwerk machinery it's not practical

00:02:13,279 --> 00:02:16,459
to create tests that would simulate

00:02:14,930 --> 00:02:18,849
every way

00:02:16,459 --> 00:02:21,709
website is used in the real world a

00:02:18,849 --> 00:02:24,530
better model is to think about testing

00:02:21,709 --> 00:02:25,909
in terms of risk to understand us let's

00:02:24,530 --> 00:02:27,549
talk about the project we do that way

00:02:25,909 --> 00:02:30,470
sir

00:02:27,549 --> 00:02:32,510
HB 7 has been out for more than a year

00:02:30,470 --> 00:02:34,760
now it's commonly understood to be

00:02:32,510 --> 00:02:36,530
faster a handful of companies have

00:02:34,760 --> 00:02:38,299
published metrics showing this but if

00:02:36,530 --> 00:02:41,450
that's news to you I can show you our

00:02:38,299 --> 00:02:44,319
charts each one shows the server render

00:02:41,450 --> 00:02:49,310
time for a different page type yellow is

00:02:44,319 --> 00:02:51,109
PHP 5 and green is PHP 7 the results we

00:02:49,310 --> 00:02:53,959
found were that page execution time

00:02:51,109 --> 00:02:57,230
dropped by about 50% and CPU utilization

00:02:53,959 --> 00:02:58,879
dropped by about 30 and the real net

00:02:57,230 --> 00:03:00,639
benefit is that we can serve more

00:02:58,879 --> 00:03:03,109
traffic with the same amount of hardware

00:03:00,639 --> 00:03:04,459
if you're interested the mechanics of

00:03:03,109 --> 00:03:08,239
why this happened

00:03:04,459 --> 00:03:10,190
it really all boiled down to how PHP

00:03:08,239 --> 00:03:12,170
variables that you create an user land

00:03:10,190 --> 00:03:14,030
are represented internally and there's a

00:03:12,170 --> 00:03:17,480
couple great blog posts here that can

00:03:14,030 --> 00:03:20,569
describe those changes but let's travel

00:03:17,480 --> 00:03:22,669
back in time to before PHP 7s release

00:03:20,569 --> 00:03:25,370
when its benefits weren't as well

00:03:22,669 --> 00:03:28,430
understood at that point in time most

00:03:25,370 --> 00:03:30,910
engineer is understanding resembled this

00:03:28,430 --> 00:03:34,069
cocktail napkin very tantalizing

00:03:30,910 --> 00:03:36,680
obviously let's compare what we do about

00:03:34,069 --> 00:03:38,780
we fair at this point it's an online

00:03:36,680 --> 00:03:40,760
retailer that focuses on furniture and

00:03:38,780 --> 00:03:42,440
home goods we get about 2 million

00:03:40,760 --> 00:03:46,370
visitors every day we've been around

00:03:42,440 --> 00:03:48,139
since 2002 we didn't always use PHP but

00:03:46,370 --> 00:03:51,530
parts of our architecture reached back

00:03:48,139 --> 00:03:53,419
to when the company was founded when we

00:03:51,530 --> 00:03:54,709
were starting off this project we had

00:03:53,419 --> 00:03:56,540
three and a half million lines of code

00:03:54,709 --> 00:03:58,579
over 28,000 files

00:03:56,540 --> 00:04:01,400
it was mostly our own code but also some

00:03:58,579 --> 00:04:03,560
third-party composer packages coding

00:04:01,400 --> 00:04:07,060
conventions spans several versions PHP

00:04:03,560 --> 00:04:09,769
at this point all of this code relied on

00:04:07,060 --> 00:04:11,810
66 extensions many of these are

00:04:09,769 --> 00:04:13,220
officially supported parts of PHP core

00:04:11,810 --> 00:04:15,199
but there are also third-party

00:04:13,220 --> 00:04:17,570
extensions some third-party extensions

00:04:15,199 --> 00:04:21,320
we modified and some code that was

00:04:17,570 --> 00:04:23,419
totally custom to Wayfair what I'm

00:04:21,320 --> 00:04:26,270
trying to get at is that we had a lot of

00:04:23,419 --> 00:04:28,729
risk a simple way of describing risk is

00:04:26,270 --> 00:04:29,520
what you don't know we do a lot of the

00:04:28,729 --> 00:04:32,310
expected

00:04:29,520 --> 00:04:34,919
benefits of PHP 7 we didn't really

00:04:32,310 --> 00:04:36,330
understand if they were real we didn't

00:04:34,919 --> 00:04:39,150
know how much of our code was compatible

00:04:36,330 --> 00:04:40,650
with the new version we didn't know how

00:04:39,150 --> 00:04:44,160
much effort we'd have to put in to make

00:04:40,650 --> 00:04:46,169
it work so go back to our napkin it's

00:04:44,160 --> 00:04:48,270
safe to say that it's only useful for

00:04:46,169 --> 00:04:50,160
setting a drink on I mean if you brought

00:04:48,270 --> 00:04:51,690
it to your manager and after can we do

00:04:50,160 --> 00:04:54,090
this project what do you think she would

00:04:51,690 --> 00:04:56,130
say we can make the case for this

00:04:54,090 --> 00:04:58,949
project by increasing what we know

00:04:56,130 --> 00:05:01,319
that's to say we're going to increase a

00:04:58,949 --> 00:05:03,990
sorry reduce risk and we're going to use

00:05:01,319 --> 00:05:05,610
testing tools to do it so what are we

00:05:03,990 --> 00:05:08,009
going to cover we're going to talk about

00:05:05,610 --> 00:05:09,539
more about this model of risk as the

00:05:08,009 --> 00:05:11,729
thing that you don't know and how to

00:05:09,539 --> 00:05:14,310
identify risk and complex applications

00:05:11,729 --> 00:05:16,409
we're going to talk about common sources

00:05:14,310 --> 00:05:18,750
of risk on big infrastructure projects

00:05:16,409 --> 00:05:21,330
like this we're going to talk more about

00:05:18,750 --> 00:05:23,310
this bottle of testing as a way of risk

00:05:21,330 --> 00:05:25,650
management a form of risk management and

00:05:23,310 --> 00:05:29,610
different manual and automated tools you

00:05:25,650 --> 00:05:32,340
have to measure risk what I'm trying to

00:05:29,610 --> 00:05:34,199
poke at basically is this idea that the

00:05:32,340 --> 00:05:36,060
underlying activity of software

00:05:34,199 --> 00:05:39,599
engineering isn't necessarily building

00:05:36,060 --> 00:05:40,880
things it's gathering information a lot

00:05:39,599 --> 00:05:44,400
of what I'm going to talk about is

00:05:40,880 --> 00:05:45,930
product management strategies a lot of

00:05:44,400 --> 00:05:49,080
people think of product managers as

00:05:45,930 --> 00:05:50,580
people who figure out you know features

00:05:49,080 --> 00:05:52,740
that people should build and what they

00:05:50,580 --> 00:05:55,320
should look like maybe but really the

00:05:52,740 --> 00:05:57,719
underlying goal of a product manager is

00:05:55,320 --> 00:05:59,940
to make sure that a team is working on

00:05:57,719 --> 00:06:02,310
the most important thing for business at

00:05:59,940 --> 00:06:03,750
a given point in time this is something

00:06:02,310 --> 00:06:06,060
that matters just as much with purely

00:06:03,750 --> 00:06:08,520
technical projects like an upgrade like

00:06:06,060 --> 00:06:10,530
this so I'm going to talk about how to

00:06:08,520 --> 00:06:12,419
identify goals for technical projects

00:06:10,530 --> 00:06:14,250
how to kick them off and run them and

00:06:12,419 --> 00:06:15,810
how to choose the most important thing

00:06:14,250 --> 00:06:17,880
to work on in service of that goal

00:06:15,810 --> 00:06:20,280
basically this is all about figuring out

00:06:17,880 --> 00:06:22,530
how to use engineering projects to

00:06:20,280 --> 00:06:24,360
deliver value to the business which as

00:06:22,530 --> 00:06:27,990
people progress through their careers is

00:06:24,360 --> 00:06:29,370
increasingly important before talking

00:06:27,990 --> 00:06:31,560
more about tools I want to talk about

00:06:29,370 --> 00:06:33,750
common risk with infrastructure projects

00:06:31,560 --> 00:06:34,409
some of the unknowns to juggle aren't

00:06:33,750 --> 00:06:36,419
just technical

00:06:34,409 --> 00:06:38,010
they're organisational a lot of them

00:06:36,419 --> 00:06:39,930
stem from the fact that there are other

00:06:38,010 --> 00:06:42,000
projects going on at the same time it

00:06:39,930 --> 00:06:43,139
can be easy to get excited about these

00:06:42,000 --> 00:06:44,639
projects

00:06:43,139 --> 00:06:46,830
this is usually because people are

00:06:44,639 --> 00:06:49,469
focusing on the desired outcome but

00:06:46,830 --> 00:06:51,719
that's our cocktail napkin if the place

00:06:49,469 --> 00:06:53,569
everyone wants to get to but we really

00:06:51,719 --> 00:06:55,830
need to think about how we get there

00:06:53,569 --> 00:06:58,590
these projects end up having some other

00:06:55,830 --> 00:07:00,090
common qualities one is that the people

00:06:58,590 --> 00:07:02,509
working on the project are probably

00:07:00,090 --> 00:07:05,099
working on other things at the same time

00:07:02,509 --> 00:07:06,810
these could be other software projects

00:07:05,099 --> 00:07:08,159
or they could also be other big

00:07:06,810 --> 00:07:10,020
infrastructure projects like the one

00:07:08,159 --> 00:07:12,539
that you're working on you may have to

00:07:10,020 --> 00:07:14,939
figure out ways that your project could

00:07:12,539 --> 00:07:16,439
potentially collide or interfere with

00:07:14,939 --> 00:07:19,710
other big projects and think about how

00:07:16,439 --> 00:07:20,819
to manage that whatever you're doing

00:07:19,710 --> 00:07:24,689
there's probably going to be in between

00:07:20,819 --> 00:07:26,849
states with your system you're probably

00:07:24,689 --> 00:07:28,169
not going to snap your fingers and in a

00:07:26,849 --> 00:07:29,969
moment you're suddenly going to be on

00:07:28,169 --> 00:07:32,009
PHP 7 there's probably going to be a

00:07:29,969 --> 00:07:33,840
slow period as you get your systems

00:07:32,009 --> 00:07:37,319
there so you have to accommodate for

00:07:33,840 --> 00:07:39,089
that fact in your planning there's the

00:07:37,319 --> 00:07:43,650
idea that something doesn't work it

00:07:39,089 --> 00:07:45,029
works once you can see something in

00:07:43,650 --> 00:07:47,759
production but unless you see it

00:07:45,029 --> 00:07:49,889
consistently and continuously it is

00:07:47,759 --> 00:07:51,659
something that only happened once and

00:07:49,889 --> 00:07:53,250
because of that you really live and die

00:07:51,659 --> 00:07:56,400
by your ability to monitor your

00:07:53,250 --> 00:07:57,870
production systems given all the effort

00:07:56,400 --> 00:08:00,089
that you have to put into projects like

00:07:57,870 --> 00:08:02,159
this they might not be worthwhile it

00:08:00,089 --> 00:08:04,129
could be that you have to do so much

00:08:02,159 --> 00:08:06,629
work to undergo some kind of transition

00:08:04,129 --> 00:08:09,169
migration upgrade deploying whatever

00:08:06,629 --> 00:08:12,110
that it might not be worth it in the end

00:08:09,169 --> 00:08:14,639
so all these things together means that

00:08:12,110 --> 00:08:16,319
disaster is really more likely than

00:08:14,639 --> 00:08:18,300
success when you're taking on a big

00:08:16,319 --> 00:08:20,219
engineering project and this is kind of

00:08:18,300 --> 00:08:21,539
a fatalistic worldview but it's

00:08:20,219 --> 00:08:26,639
something to be conscious of and

00:08:21,539 --> 00:08:30,389
something to plan around so how do you

00:08:26,639 --> 00:08:31,770
manage some of these common concerns one

00:08:30,389 --> 00:08:34,349
important thing is to always communicate

00:08:31,770 --> 00:08:35,789
in terms of value to the business when

00:08:34,349 --> 00:08:38,099
you're talking about doing something

00:08:35,789 --> 00:08:39,360
like deploying PHP 7 you don't want to

00:08:38,099 --> 00:08:42,899
tell people now we're going to have

00:08:39,360 --> 00:08:45,240
spaceship operator because they're nice

00:08:42,899 --> 00:08:47,490
but probably not directly driving value

00:08:45,240 --> 00:08:51,120
you probably don't even want to say pH

00:08:47,490 --> 00:08:53,040
g7 is faster because that's kind of you

00:08:51,120 --> 00:08:55,350
know another fact what you want to talk

00:08:53,040 --> 00:08:56,760
about is how performance can save the

00:08:55,350 --> 00:08:58,650
business money so

00:08:56,760 --> 00:09:01,590
you can say you know if this turns out

00:08:58,650 --> 00:09:03,480
to be twice as fast we can serve more

00:09:01,590 --> 00:09:06,840
traffic with the same hardware which

00:09:03,480 --> 00:09:07,980
means we could require less hardware or

00:09:06,840 --> 00:09:10,050
that we'll be able to grow our business

00:09:07,980 --> 00:09:12,780
without investing more an infrastructure

00:09:10,050 --> 00:09:15,480
these are important things that a senior

00:09:12,780 --> 00:09:17,430
leadership cares about that said you

00:09:15,480 --> 00:09:18,720
don't want to promise too much too soon

00:09:17,430 --> 00:09:20,550
you don't want to start off by saying

00:09:18,720 --> 00:09:22,200
that we're going to save a ton of money

00:09:20,550 --> 00:09:24,600
and everything's going to be twice as

00:09:22,200 --> 00:09:28,560
fast you want to share as much as you

00:09:24,600 --> 00:09:30,330
know you want to talk a lot with the

00:09:28,560 --> 00:09:31,890
broader organization to understand how

00:09:30,330 --> 00:09:34,170
this project could collide with others

00:09:31,890 --> 00:09:36,510
and throughout the project you want to

00:09:34,170 --> 00:09:39,030
be working the room you want to share

00:09:36,510 --> 00:09:40,530
your successes as they emerge this helps

00:09:39,030 --> 00:09:42,150
reinforce the idea that your project is

00:09:40,530 --> 00:09:45,030
headed on the right track if you

00:09:42,150 --> 00:09:46,830
disappear into a hole then people may

00:09:45,030 --> 00:09:49,320
not necessarily trust you or have faith

00:09:46,830 --> 00:09:52,290
in you but if you're sharing your work

00:09:49,320 --> 00:09:55,380
as it develops people will be more

00:09:52,290 --> 00:09:56,580
comfortable this reinforces the idea of

00:09:55,380 --> 00:09:58,350
the project is headed in the right

00:09:56,580 --> 00:10:01,410
direction and that is worth continuing

00:09:58,350 --> 00:10:03,210
to fund one thing that helps here is

00:10:01,410 --> 00:10:06,300
identifying allies at different levels

00:10:03,210 --> 00:10:09,000
of the organization people on your team

00:10:06,300 --> 00:10:12,210
are really a form of ally someone who's

00:10:09,000 --> 00:10:14,910
doing work to get the project done is an

00:10:12,210 --> 00:10:18,480
ally in achieving the goal but also say

00:10:14,910 --> 00:10:21,570
maybe your manager or a chief architect

00:10:18,480 --> 00:10:24,570
or your CTO maybe someone who is an ally

00:10:21,570 --> 00:10:26,760
for the project find ways to share

00:10:24,570 --> 00:10:28,770
things with them that speak to the

00:10:26,760 --> 00:10:29,970
things that are important for them so

00:10:28,770 --> 00:10:33,270
that they'll continue to be interested

00:10:29,970 --> 00:10:34,980
in your project also look for

00:10:33,270 --> 00:10:37,950
opportunities as you work through the

00:10:34,980 --> 00:10:39,390
project to deploy smaller pieces and get

00:10:37,950 --> 00:10:42,000
value out of the things that you're

00:10:39,390 --> 00:10:44,160
working on it's much better to realize

00:10:42,000 --> 00:10:46,380
value incrementally over a long period

00:10:44,160 --> 00:10:48,780
of time than to wait for that entire

00:10:46,380 --> 00:10:53,700
duration before releasing anything of

00:10:48,780 --> 00:10:55,920
value so all that said planning where do

00:10:53,700 --> 00:10:58,110
you begin we started this project by

00:10:55,920 --> 00:11:00,390
assembling a big-picture view we never

00:10:58,110 --> 00:11:02,340
tried to know everything about PHP 7

00:11:00,390 --> 00:11:04,650
like I said there's a limit to no

00:11:02,340 --> 00:11:06,450
ability we just tried to understand what

00:11:04,650 --> 00:11:08,730
we didn't know and what was most likely

00:11:06,450 --> 00:11:09,780
to go wrong this let us rationalize our

00:11:08,730 --> 00:11:12,250
priority

00:11:09,780 --> 00:11:14,020
we started this big-picture view by

00:11:12,250 --> 00:11:15,850
identifying all the dependencies for our

00:11:14,020 --> 00:11:19,000
code and understanding if they behave

00:11:15,850 --> 00:11:21,070
differently in PHP 7 thankfully PHP

00:11:19,000 --> 00:11:23,200
makes this easy you can run either of

00:11:21,070 --> 00:11:24,940
these commands to tell you which

00:11:23,200 --> 00:11:27,280
extensions are installed and how they're

00:11:24,940 --> 00:11:29,110
configured PHP info is a function that

00:11:27,280 --> 00:11:30,970
you can run from a script PHP is

00:11:29,110 --> 00:11:33,490
something you can run from a command

00:11:30,970 --> 00:11:36,010
line there's actually a ton of command

00:11:33,490 --> 00:11:38,590
line switches for the PHP command line

00:11:36,010 --> 00:11:41,800
interface that tell you about how PHP is

00:11:38,590 --> 00:11:43,540
set up which are quite helpful we then

00:11:41,800 --> 00:11:45,040
compare this information against some

00:11:43,540 --> 00:11:47,410
published documents about what changed

00:11:45,040 --> 00:11:50,860
in PHP 7 this allowed us to build a

00:11:47,410 --> 00:11:52,660
simple backlog of tasks this is the

00:11:50,860 --> 00:11:55,810
first version of that view from October

00:11:52,660 --> 00:11:57,430
2015 we used a wiki page however you

00:11:55,810 --> 00:11:58,960
track this information the important

00:11:57,430 --> 00:12:00,580
thing is to maintain a single source of

00:11:58,960 --> 00:12:02,680
truth about the state of the project

00:12:00,580 --> 00:12:04,450
it's easy to waste effort if it's hard

00:12:02,680 --> 00:12:06,910
for people to understand what has and

00:12:04,450 --> 00:12:08,950
hasn't been done let's pick this

00:12:06,910 --> 00:12:10,960
document apart and understand what it

00:12:08,950 --> 00:12:12,850
says it might not look like it says a

00:12:10,960 --> 00:12:15,670
lot we don't know if any of these

00:12:12,850 --> 00:12:18,520
extensions work with PHP 7 but it does

00:12:15,670 --> 00:12:21,670
tell us something we based it on the PHP

00:12:18,520 --> 00:12:24,100
info output from our server so we knew

00:12:21,670 --> 00:12:25,900
what was in use it also starts to

00:12:24,100 --> 00:12:28,060
explain where we got this information

00:12:25,900 --> 00:12:30,340
this is important to be able to put the

00:12:28,060 --> 00:12:32,740
notes in context it's one thing to say

00:12:30,340 --> 00:12:34,540
you know the nqt extension is compatible

00:12:32,740 --> 00:12:36,010
with PHP 7 because the project

00:12:34,540 --> 00:12:37,900
maintainer said so it's totally

00:12:36,010 --> 00:12:40,510
different to be able to say it's

00:12:37,900 --> 00:12:42,280
compatible with a specific use case of a

00:12:40,510 --> 00:12:44,680
specific application that we tested

00:12:42,280 --> 00:12:47,280
ourselves if you're vague about what you

00:12:44,680 --> 00:12:49,690
know it's easy to lose track of risk

00:12:47,280 --> 00:12:51,520
once we had the skeleton we could start

00:12:49,690 --> 00:12:53,680
adding detail this was the first

00:12:51,520 --> 00:12:55,930
revision of our task list which we made

00:12:53,680 --> 00:12:57,940
the same day we made the skeleton in our

00:12:55,930 --> 00:13:00,370
wiki page we stuck it on top of the

00:12:57,940 --> 00:13:02,500
supporting information most of the tasks

00:13:00,370 --> 00:13:04,660
are still very general you'll see a lot

00:13:02,500 --> 00:13:07,150
of things that say investigate or remove

00:13:04,660 --> 00:13:08,800
so it's very broad but note how it's

00:13:07,150 --> 00:13:11,200
still a lot more specific than our

00:13:08,800 --> 00:13:14,110
original view we're not trying to say

00:13:11,200 --> 00:13:15,880
too much too soon about anything the

00:13:14,110 --> 00:13:16,150
open questions the risk is still quite

00:13:15,880 --> 00:13:18,400
big

00:13:16,150 --> 00:13:20,320
we have hyperlinks so it can document

00:13:18,400 --> 00:13:22,600
where we learned particular things in

00:13:20,320 --> 00:13:23,089
the line about the ear edge extension we

00:13:22,600 --> 00:13:25,069
recorded

00:13:23,089 --> 00:13:27,949
where we learned which functions were

00:13:25,069 --> 00:13:29,480
still in use we didn't know when someone

00:13:27,949 --> 00:13:30,829
would pick this up so we wanted it to be

00:13:29,480 --> 00:13:33,019
clear that they shouldn't assume too

00:13:30,829 --> 00:13:34,069
much about what needed to be done and we

00:13:33,019 --> 00:13:36,319
explained how we came to that conclusion

00:13:34,069 --> 00:13:38,990
to make it possible to reproduce and

00:13:36,319 --> 00:13:41,269
validate so some of the strategies I've

00:13:38,990 --> 00:13:42,800
been hit to get you want to start simple

00:13:41,269 --> 00:13:44,540
and naive you don't want to assume

00:13:42,800 --> 00:13:47,660
anything until you do the research as

00:13:44,540 --> 00:13:49,759
you begin making tasks don't start with

00:13:47,660 --> 00:13:52,160
very specific tasks start with similarly

00:13:49,759 --> 00:13:55,370
broad tasks it's very easy to take a

00:13:52,160 --> 00:13:57,410
task like investigate a PC extension and

00:13:55,370 --> 00:13:59,329
break it down into smaller tasks it's

00:13:57,410 --> 00:14:01,430
much harder to start with a smaller task

00:13:59,329 --> 00:14:03,410
and build out around it other things you

00:14:01,430 --> 00:14:05,990
might need to do start by

00:14:03,410 --> 00:14:08,509
over-explaining link to sources in case

00:14:05,990 --> 00:14:10,579
anyone needs to work backwards be super

00:14:08,509 --> 00:14:12,259
clear about everything because a wide

00:14:10,579 --> 00:14:13,790
range of people may look at the

00:14:12,259 --> 00:14:15,649
information that you put together and

00:14:13,790 --> 00:14:17,089
they have different sets of you know

00:14:15,649 --> 00:14:20,509
their own context and what they bring to

00:14:17,089 --> 00:14:22,339
understanding it the next big question

00:14:20,509 --> 00:14:23,209
once you have a list of things to do is

00:14:22,339 --> 00:14:25,759
how you spend your time

00:14:23,209 --> 00:14:28,399
the first list we generated was unsorted

00:14:25,759 --> 00:14:31,220
as I suggested before though you want to

00:14:28,399 --> 00:14:32,779
manage your time to help manage risk to

00:14:31,220 --> 00:14:36,050
talk about this through one specific

00:14:32,779 --> 00:14:38,360
example PHP 7 dropped some extensions

00:14:36,050 --> 00:14:40,220
including some we used we knew we'd have

00:14:38,360 --> 00:14:43,429
to find ways to remove these

00:14:40,220 --> 00:14:44,929
dependencies ear edge and NS sequel or

00:14:43,429 --> 00:14:47,059
two extensions we knew we'd have to work

00:14:44,929 --> 00:14:49,040
around so let's imagine you're doing

00:14:47,059 --> 00:14:50,749
this project entirely by yourself and

00:14:49,040 --> 00:14:52,610
you're trying to decide where you spend

00:14:50,749 --> 00:14:55,339
your time let me describe both

00:14:52,610 --> 00:14:57,829
extensions ear edge it's a small

00:14:55,339 --> 00:14:59,389
extensions that resemble others it let

00:14:57,829 --> 00:15:01,339
you do regex matchings mostly

00:14:59,389 --> 00:15:05,269
identically to the pcre extension and

00:15:01,339 --> 00:15:06,980
the sequel is a bit bigger it was

00:15:05,269 --> 00:15:09,110
replaced by PDO which has very different

00:15:06,980 --> 00:15:10,910
syntax we'd actually already started

00:15:09,110 --> 00:15:13,069
working with PDO so we knew some of what

00:15:10,910 --> 00:15:14,720
we'd be getting into we do that include

00:15:13,069 --> 00:15:17,059
a different functionality and different

00:15:14,720 --> 00:15:18,889
behaviors there is also the key issues

00:15:17,059 --> 00:15:20,660
that our website relies on database

00:15:18,889 --> 00:15:23,809
access so there's very little that we

00:15:20,660 --> 00:15:25,910
could test without it so if you can only

00:15:23,809 --> 00:15:28,339
do one thing which would you start on

00:15:25,910 --> 00:15:29,600
first would you you know raise your hand

00:15:28,339 --> 00:15:33,720
if you'd start with the you reg

00:15:29,600 --> 00:15:37,519
extension yeah

00:15:33,720 --> 00:15:39,990
who'd start with NF sequel yep

00:15:37,519 --> 00:15:42,510
we started with MS sequel because it's

00:15:39,990 --> 00:15:44,040
where all the risk was all the risk

00:15:42,510 --> 00:15:45,600
includes the things that could derail

00:15:44,040 --> 00:15:47,850
your project and make it not worth

00:15:45,600 --> 00:15:49,740
working on you want to learn those first

00:15:47,850 --> 00:15:51,779
so you invest as little as possible in

00:15:49,740 --> 00:15:54,180
order to learn this this this was

00:15:51,779 --> 00:15:56,550
admittedly a very stark example because

00:15:54,180 --> 00:15:58,790
of how the MS sequel extension would get

00:15:56,550 --> 00:16:02,399
our ability to test and reduce more risk

00:15:58,790 --> 00:16:04,649
we really joked that the project we were

00:16:02,399 --> 00:16:07,560
doing wasn't the PHP 7 project it was we

00:16:04,649 --> 00:16:08,700
finished migrating to PDO project but on

00:16:07,560 --> 00:16:10,620
any project you'll have to answer

00:16:08,700 --> 00:16:12,899
questions like this pretty much every

00:16:10,620 --> 00:16:15,810
day this is what planning is all about

00:16:12,899 --> 00:16:17,310
it's about making a better napkin notice

00:16:15,810 --> 00:16:22,290
how with not too much effort we want

00:16:17,310 --> 00:16:24,269
from this to this what I'm trying to say

00:16:22,290 --> 00:16:27,269
is you can get a lot of leverage out of

00:16:24,269 --> 00:16:28,740
test of planning tools they're very

00:16:27,269 --> 00:16:31,200
simple but they can be exceedingly

00:16:28,740 --> 00:16:33,029
valuable what's nice about them is they

00:16:31,200 --> 00:16:34,769
don't require running or writing any

00:16:33,029 --> 00:16:37,019
code that's what I mean about there

00:16:34,769 --> 00:16:38,700
being no engineering time involved by

00:16:37,019 --> 00:16:40,020
focusing attention correctly you can

00:16:38,700 --> 00:16:44,010
make the most of the engineering time

00:16:40,020 --> 00:16:46,070
you ultimately use one thing I haven't

00:16:44,010 --> 00:16:49,339
been talking about yet is deadlines

00:16:46,070 --> 00:16:52,410
deadlines are very risky to talk about

00:16:49,339 --> 00:16:53,940
work can be very fluid you can set up

00:16:52,410 --> 00:16:56,399
the wrong kind of conversation by

00:16:53,940 --> 00:16:57,720
tending a project baits you want to talk

00:16:56,399 --> 00:16:59,850
with your team about what matters to

00:16:57,720 --> 00:17:01,649
them solving problems and delivering

00:16:59,850 --> 00:17:03,450
value you want to treat your

00:17:01,649 --> 00:17:04,400
stakeholders like partners because

00:17:03,450 --> 00:17:06,630
that's who they are

00:17:04,400 --> 00:17:08,490
give them as much information as you

00:17:06,630 --> 00:17:09,929
have if all you know is that something

00:17:08,490 --> 00:17:12,089
is months away from being done

00:17:09,929 --> 00:17:13,589
don't be more specific than that share

00:17:12,089 --> 00:17:18,569
that information and share what you're

00:17:13,589 --> 00:17:20,760
working on to get more detail with the

00:17:18,569 --> 00:17:22,530
with your task list it's essential to be

00:17:20,760 --> 00:17:24,059
on the lookout constantly for new

00:17:22,530 --> 00:17:26,790
signals that will affect its ordering

00:17:24,059 --> 00:17:28,710
and contents having a task list doesn't

00:17:26,790 --> 00:17:30,660
mean you'll only ever cross items off

00:17:28,710 --> 00:17:32,280
the list one benefit of having the

00:17:30,660 --> 00:17:34,770
centralized map is that you can review

00:17:32,280 --> 00:17:36,179
it regularly just about every day we

00:17:34,770 --> 00:17:38,070
would look at our planning document and

00:17:36,179 --> 00:17:40,050
try to poke holes in it if you're not

00:17:38,070 --> 00:17:41,760
adding at least small notes to it every

00:17:40,050 --> 00:17:43,800
day you're probably letting things fall

00:17:41,760 --> 00:17:45,450
through the cracks and should be clear

00:17:43,800 --> 00:17:46,630
enough that anyone on the team can do

00:17:45,450 --> 00:17:48,490
this on their own

00:17:46,630 --> 00:17:50,170
it should be so opaque or controlled

00:17:48,490 --> 00:17:52,660
that weeds and managers are the only

00:17:50,170 --> 00:17:54,550
ones doing it everyone on the project

00:17:52,660 --> 00:17:56,020
should will have their own insights and

00:17:54,550 --> 00:17:59,050
they should have a path to surfacing

00:17:56,020 --> 00:18:01,510
them so I want to talk to them about the

00:17:59,050 --> 00:18:03,580
presentation of these lists the earlier

00:18:01,510 --> 00:18:06,430
slide with the bullets was formatted

00:18:03,580 --> 00:18:07,750
exactly as we had it in case it's not

00:18:06,430 --> 00:18:09,030
obvious for my slides I like

00:18:07,750 --> 00:18:11,800
deliberately unsophisticated

00:18:09,030 --> 00:18:13,690
presentation formats one thing I like

00:18:11,800 --> 00:18:15,460
about the simple bullet list format is

00:18:13,690 --> 00:18:17,470
that it's very easy to read your I can

00:18:15,460 --> 00:18:19,240
really just go straight down it you also

00:18:17,470 --> 00:18:20,710
have to think as you read it you have to

00:18:19,240 --> 00:18:21,520
actively interpret and bring your own

00:18:20,710 --> 00:18:24,070
context

00:18:21,520 --> 00:18:25,780
other formats like Kanban boards and

00:18:24,070 --> 00:18:28,270
Gantt charts where other information

00:18:25,780 --> 00:18:29,680
this makes them more expressive but it

00:18:28,270 --> 00:18:31,360
can mean you're prioritizing someone

00:18:29,680 --> 00:18:34,600
else's assumptions about how a project

00:18:31,360 --> 00:18:37,060
is going bad visualizations are more of

00:18:34,600 --> 00:18:38,470
an impediment than anything the greater

00:18:37,060 --> 00:18:41,230
information density means you could

00:18:38,470 --> 00:18:42,730
actually have more wrong information so

00:18:41,230 --> 00:18:44,830
rather than spending time tweaking

00:18:42,730 --> 00:18:46,480
visualizations I try to direct my

00:18:44,830 --> 00:18:50,260
problem-solving energy toward the

00:18:46,480 --> 00:18:52,240
project itself in one of our task list

00:18:50,260 --> 00:18:55,030
reviews we realize we missed language

00:18:52,240 --> 00:18:56,590
changes we'd read so much about how PHP

00:18:55,030 --> 00:18:58,150
wouldn't require you to change your code

00:18:56,590 --> 00:19:00,670
that we didn't read the upgrading limits

00:18:58,150 --> 00:19:03,280
closely this realization took us into a

00:19:00,670 --> 00:19:04,960
new set of testing tools but before I

00:19:03,280 --> 00:19:07,480
give it to those let me describe the

00:19:04,960 --> 00:19:10,150
basic issue this text comes straight

00:19:07,480 --> 00:19:12,700
from the upgrading notes PHP 7 change

00:19:10,150 --> 00:19:14,260
the handling of indirect references it's

00:19:12,700 --> 00:19:16,680
easy to eyeball code that might break

00:19:14,260 --> 00:19:19,950
but how do you do that with 28,000 files

00:19:16,680 --> 00:19:22,300
this is a job for automation

00:19:19,950 --> 00:19:24,700
specifically this is a job for static

00:19:22,300 --> 00:19:26,410
analysis this is a whole other suite of

00:19:24,700 --> 00:19:29,290
testing tools that doesn't require you

00:19:26,410 --> 00:19:31,860
to run any code static analysis is a way

00:19:29,290 --> 00:19:34,810
of checking for code correctness a

00:19:31,860 --> 00:19:36,870
compiler will perform static analysis if

00:19:34,810 --> 00:19:39,340
types are misused code will compile

00:19:36,870 --> 00:19:43,510
these tools can really be fairly diverse

00:19:39,340 --> 00:19:45,190
a very simple tool is grep if you want

00:19:43,510 --> 00:19:46,870
to run through it inputs or a regular

00:19:45,190 --> 00:19:49,150
expression you can find uses of a

00:19:46,870 --> 00:19:51,460
function and that tells you something

00:19:49,150 --> 00:19:53,350
about your code if you know a function

00:19:51,460 --> 00:19:55,450
is deprecated you can write a regex that

00:19:53,350 --> 00:19:57,580
will find references so you might have

00:19:55,450 --> 00:19:58,740
noticed that reg X on the earlier slide

00:19:57,580 --> 00:20:01,370
that showed how we

00:19:58,740 --> 00:20:03,150
for functions supplied by ear edge

00:20:01,370 --> 00:20:05,490
information like this can help you

00:20:03,150 --> 00:20:07,530
assemble a punch list of how many

00:20:05,490 --> 00:20:09,390
references you have to a dependency

00:20:07,530 --> 00:20:12,240
which makes it easy to size the effort

00:20:09,390 --> 00:20:14,640
to remove those dependencies another

00:20:12,240 --> 00:20:16,559
helpful thing is PHP is built in winter

00:20:14,640 --> 00:20:19,050
you can run it from the command line one

00:20:16,559 --> 00:20:20,940
file at a time and it will verify the

00:20:19,050 --> 00:20:25,950
syntax for you

00:20:20,940 --> 00:20:27,720
syntax did change some in PHP seven PHP

00:20:25,950 --> 00:20:29,910
seven Mar is a tool that identifies

00:20:27,720 --> 00:20:31,650
potential compatibility issues like

00:20:29,910 --> 00:20:34,440
those on the last slide it's more or

00:20:31,650 --> 00:20:36,720
less powered by regular expressions and

00:20:34,440 --> 00:20:39,059
is a more sophisticated tool it

00:20:36,720 --> 00:20:40,890
implements actual static analysis using

00:20:39,059 --> 00:20:43,100
the abstract syntax tree generated by

00:20:40,890 --> 00:20:45,570
PHP seven this was a new capability

00:20:43,100 --> 00:20:47,550
exposed with this version of the

00:20:45,570 --> 00:20:49,290
language fan can do a lot more

00:20:47,550 --> 00:20:50,970
sophisticated things like checking for

00:20:49,290 --> 00:20:53,870
potential type mismatches and other

00:20:50,970 --> 00:20:56,700
issues you might not see until runtime

00:20:53,870 --> 00:20:58,710
most tools generate output kind of like

00:20:56,700 --> 00:21:01,170
this this is the beginning of the PHP

00:20:58,710 --> 00:21:03,300
seven more output for a test file much

00:21:01,170 --> 00:21:05,160
like compiler errors a specific issue is

00:21:03,300 --> 00:21:07,260
identified with a specific line of code

00:21:05,160 --> 00:21:09,390
these are tools you can run on demand

00:21:07,260 --> 00:21:11,340
but it's also possible to integrate them

00:21:09,390 --> 00:21:13,020
into a build process you can even run

00:21:11,340 --> 00:21:16,170
them as a pre-commit hook to prevent

00:21:13,020 --> 00:21:18,120
obvious errors from being introduced one

00:21:16,170 --> 00:21:20,429
thing with these tools is that engineers

00:21:18,120 --> 00:21:21,780
always have to interpret the output one

00:21:20,429 --> 00:21:24,090
thing to be aware of is that false

00:21:21,780 --> 00:21:26,130
positives are possible this is simply

00:21:24,090 --> 00:21:29,540
because it's hard to statically analyze

00:21:26,130 --> 00:21:31,500
a dynamically typed programming language

00:21:29,540 --> 00:21:32,970
when you're looking at these different

00:21:31,500 --> 00:21:35,460
tools you want to think carefully about

00:21:32,970 --> 00:21:38,100
how much you invest in them in general

00:21:35,460 --> 00:21:40,980
you want to start with running a tool in

00:21:38,100 --> 00:21:42,540
its weakest mode the fan documentation

00:21:40,980 --> 00:21:44,520
actually has a really nice tutorial for

00:21:42,540 --> 00:21:47,220
how to go about this you then want to

00:21:44,520 --> 00:21:48,960
start by spot checking your output see

00:21:47,220 --> 00:21:51,360
if it's actually helpful is it reporting

00:21:48,960 --> 00:21:53,010
issues that you would that you don't

00:21:51,360 --> 00:21:56,280
know about and that you can do things

00:21:53,010 --> 00:21:59,070
about think about how many issues it's

00:21:56,280 --> 00:22:01,500
generating and if you're going to have

00:21:59,070 --> 00:22:03,360
the time to sort through all of them and

00:22:01,500 --> 00:22:05,880
if it's going to be a you know helpful

00:22:03,360 --> 00:22:08,460
or just more noise for your team also

00:22:05,880 --> 00:22:10,290
think about the ownership cost is the

00:22:08,460 --> 00:22:12,179
tool something that an individual

00:22:10,290 --> 00:22:12,710
engineer can run on their own or is the

00:22:12,179 --> 00:22:15,380
something

00:22:12,710 --> 00:22:18,200
a team is going to have to support one

00:22:15,380 --> 00:22:19,940
thing that we ran into with sand we were

00:22:18,200 --> 00:22:22,100
very excited about it because we really

00:22:19,940 --> 00:22:24,529
liked the idea of static analysis and

00:22:22,100 --> 00:22:27,440
type checking the problem that we had

00:22:24,529 --> 00:22:29,870
with it was that a lot of how it figures

00:22:27,440 --> 00:22:35,090
out what types to check against is by

00:22:29,870 --> 00:22:37,549
going against your doc tags so one thing

00:22:35,090 --> 00:22:39,860
we learned from this is that our

00:22:37,549 --> 00:22:41,360
documentation was very bad which was

00:22:39,860 --> 00:22:43,190
actually something we already kind of

00:22:41,360 --> 00:22:47,600
knew but it wouldn't help us very much

00:22:43,190 --> 00:22:49,399
to get plugged into a system like this

00:22:47,600 --> 00:22:51,740
running on a regular basis and just be

00:22:49,399 --> 00:22:53,570
reminded of this so we tried it out but

00:22:51,740 --> 00:22:59,110
it's ended up being something that we

00:22:53,570 --> 00:23:01,190
didn't want to use so static analysis

00:22:59,110 --> 00:23:02,690
like I said the nice thing with the

00:23:01,190 --> 00:23:04,760
output is that it's essentially a punch

00:23:02,690 --> 00:23:06,770
list which helps you figure out how much

00:23:04,760 --> 00:23:09,260
work you have to do to clean something

00:23:06,770 --> 00:23:10,760
up this can also mean that it can give

00:23:09,260 --> 00:23:12,620
you confidence that your code is in

00:23:10,760 --> 00:23:15,289
pretty good shape this kind of precise

00:23:12,620 --> 00:23:17,720
scoping was really valuable to us we had

00:23:15,289 --> 00:23:19,309
some cleanup to do driven by PHP seven

00:23:17,720 --> 00:23:24,110
bar but nothing that would derail the

00:23:19,309 --> 00:23:26,750
project planning and static analysis

00:23:24,110 --> 00:23:28,309
generated a lot of tasks we got into a

00:23:26,750 --> 00:23:30,409
state where there is simply a lot to do

00:23:28,309 --> 00:23:32,750
this is a good place to be but it can

00:23:30,409 --> 00:23:34,789
also be dangerous having fewer big

00:23:32,750 --> 00:23:37,100
questions to answer means you have less

00:23:34,789 --> 00:23:38,840
risk or at least you think you do you

00:23:37,100 --> 00:23:41,059
have to ask yourself that that feels

00:23:38,840 --> 00:23:42,830
right if your risk is diminishing that

00:23:41,059 --> 00:23:44,870
probably means the project is winding

00:23:42,830 --> 00:23:46,750
down you'll need to actively resist

00:23:44,870 --> 00:23:49,190
momentum when that doesn't feel right

00:23:46,750 --> 00:23:51,710
what we needed to remember was that our

00:23:49,190 --> 00:23:53,630
real goal was running real code fixing

00:23:51,710 --> 00:23:55,549
extension dependencies and Static

00:23:53,630 --> 00:23:57,289
analyzer errors was only in service of

00:23:55,549 --> 00:23:58,640
that it would have done our project a

00:23:57,289 --> 00:24:00,710
disservice to work through all our

00:23:58,640 --> 00:24:03,350
existing tasks before attempting to run

00:24:00,710 --> 00:24:04,789
real code since running code with the

00:24:03,350 --> 00:24:07,100
big source of unknowns and therefore

00:24:04,789 --> 00:24:08,720
risk that activity could provide us with

00:24:07,100 --> 00:24:11,720
important information that could reshape

00:24:08,720 --> 00:24:13,640
our priorities as we work through tasks

00:24:11,720 --> 00:24:15,289
as we reviewed and re reviewed them we

00:24:13,640 --> 00:24:19,240
kept looking for opportunities to run

00:24:15,289 --> 00:24:19,240
any of our code in a PHP 7 environment

00:24:22,080 --> 00:24:27,210
we had a few main options for code that

00:24:24,210 --> 00:24:28,800
we could run the big target the thing we

00:24:27,210 --> 00:24:30,750
were really going after with web

00:24:28,800 --> 00:24:32,520
requests but these were the most

00:24:30,750 --> 00:24:34,200
complicated because this involves

00:24:32,520 --> 00:24:35,610
setting up the server making sure all

00:24:34,200 --> 00:24:37,430
the dependencies such as database

00:24:35,610 --> 00:24:40,320
dependencies are working correctly a

00:24:37,430 --> 00:24:42,950
simpler option was to deal with batch

00:24:40,320 --> 00:24:45,270
processes we had that run through PHP

00:24:42,950 --> 00:24:48,060
these are essentially command line

00:24:45,270 --> 00:24:52,680
scripts but a lot of these were kind of

00:24:48,060 --> 00:24:55,640
older less good code and code with very

00:24:52,680 --> 00:24:57,750
specific database two tendencies so

00:24:55,640 --> 00:25:01,140
attractive but not actually that

00:24:57,750 --> 00:25:04,320
valuable for us the last big target was

00:25:01,140 --> 00:25:06,960
different kinds of automated tests so

00:25:04,320 --> 00:25:09,270
things like unit tests integration tests

00:25:06,960 --> 00:25:11,430
acceptance tests these were the best

00:25:09,270 --> 00:25:12,660
opportunity for us specifically unit

00:25:11,430 --> 00:25:14,490
tests because they have the fewest

00:25:12,660 --> 00:25:16,920
dependencies it was really good to give

00:25:14,490 --> 00:25:19,200
us an opportunity to run a very small

00:25:16,920 --> 00:25:21,210
piece of production code and see if it

00:25:19,200 --> 00:25:23,010
would run and also see it would produce

00:25:21,210 --> 00:25:26,490
the results that we expected it would

00:25:23,010 --> 00:25:29,000
because that's what unit tests do we

00:25:26,490 --> 00:25:31,800
were able to do this in March 2016 and

00:25:29,000 --> 00:25:34,110
this is what it looked like or really

00:25:31,800 --> 00:25:38,310
how the engineer who did the work report

00:25:34,110 --> 00:25:40,710
in it so let's look at how this is

00:25:38,310 --> 00:25:42,330
framed the engineers sent an email to

00:25:40,710 --> 00:25:47,100
the core team working on this project

00:25:42,330 --> 00:25:48,840
but also our chief architect we didn't

00:25:47,100 --> 00:25:52,050
run all of our tests but we found some

00:25:48,840 --> 00:25:53,720
that would run we described what we do

00:25:52,050 --> 00:25:57,510
the rather he described what he did and

00:25:53,720 --> 00:25:59,370
talked about the difference at run time

00:25:57,510 --> 00:26:01,680
for those tests which was quite

00:25:59,370 --> 00:26:03,360
significant we were also able to gather

00:26:01,680 --> 00:26:06,120
some information about memory usage

00:26:03,360 --> 00:26:07,620
which was also interesting there are

00:26:06,120 --> 00:26:09,150
also some notes here about all the

00:26:07,620 --> 00:26:13,350
things that we had to do to make the

00:26:09,150 --> 00:26:15,630
unit tests work so this was honestly

00:26:13,350 --> 00:26:17,970
kind of a hat together project but it

00:26:15,630 --> 00:26:21,060
did tell us a fair bit about the state

00:26:17,970 --> 00:26:23,670
of our code it showed that we had code

00:26:21,060 --> 00:26:25,590
that would run with PHP 7 and that would

00:26:23,670 --> 00:26:29,070
probably run faster and with less memory

00:26:25,590 --> 00:26:32,220
and it also showed that our code would

00:26:29,070 --> 00:26:35,280
run correctly and this was very good

00:26:32,220 --> 00:26:37,140
the tasks that we had to go through to

00:26:35,280 --> 00:26:38,850
get the coach right in the first place

00:26:37,140 --> 00:26:41,789
helps articulate some of the things that

00:26:38,850 --> 00:26:44,010
we had to do to complete the rollout so

00:26:41,789 --> 00:26:45,630
on its own we did really accomplish very

00:26:44,010 --> 00:26:47,880
much in a sense by running a very

00:26:45,630 --> 00:26:51,210
specific unit test but we learned a lot

00:26:47,880 --> 00:26:52,799
from doing it and the emails that I

00:26:51,210 --> 00:26:54,210
shared is actually a good example of

00:26:52,799 --> 00:26:55,940
managing the common risk that I

00:26:54,210 --> 00:26:59,010
described earlier

00:26:55,940 --> 00:27:01,679
so this engineer did a lot of the things

00:26:59,010 --> 00:27:03,150
that I called out he talked about the

00:27:01,679 --> 00:27:05,490
value to the business he was talking

00:27:03,150 --> 00:27:08,610
about performance he didn't promise too

00:27:05,490 --> 00:27:11,610
much too soon he really said we ran one

00:27:08,610 --> 00:27:14,309
test it had a lot of problems but things

00:27:11,610 --> 00:27:16,500
are heading in the right direction he

00:27:14,309 --> 00:27:18,659
shared this with a broader group to get

00:27:16,500 --> 00:27:20,039
some positive feedback and he also

00:27:18,659 --> 00:27:21,630
shared it with someone outside the

00:27:20,039 --> 00:27:23,130
immediate team so that there would be

00:27:21,630 --> 00:27:27,750
visibility into the work that we were

00:27:23,130 --> 00:27:30,840
doing automated testing is really an

00:27:27,750 --> 00:27:32,640
umbrella term I talked a little before

00:27:30,840 --> 00:27:35,190
about unit tests but other automated

00:27:32,640 --> 00:27:36,780
tests follow a similar play book you

00:27:35,190 --> 00:27:39,330
write software that exercises the

00:27:36,780 --> 00:27:40,559
software expect certain results for

00:27:39,330 --> 00:27:42,419
example you could write a test that

00:27:40,559 --> 00:27:44,520
opens a web browser and clicks through a

00:27:42,419 --> 00:27:45,929
series of changes if you have scripts

00:27:44,520 --> 00:27:47,850
that you use for manual testing

00:27:45,929 --> 00:27:50,000
you could probably automate them this

00:27:47,850 --> 00:27:52,169
lets you get similar results faster

00:27:50,000 --> 00:27:54,630
accepted tests are what you call those

00:27:52,169 --> 00:27:56,549
tests that operate a web browser you can

00:27:54,630 --> 00:27:58,890
also have integration tests which try to

00:27:56,549 --> 00:27:59,580
identify that multiple systems like a

00:27:58,890 --> 00:28:01,679
web browser

00:27:59,580 --> 00:28:04,650
sorry web server and a database server

00:28:01,679 --> 00:28:06,120
are communicating correctly even though

00:28:04,650 --> 00:28:07,590
all these tests are pretty different in

00:28:06,120 --> 00:28:11,010
scope you can actually use the same

00:28:07,590 --> 00:28:12,659
framework PHP unit for most of them as a

00:28:11,010 --> 00:28:16,080
quick refresher this is kind of what the

00:28:12,659 --> 00:28:19,559
code looks like you have your own code

00:28:16,080 --> 00:28:24,840
and then you have test code that call

00:28:19,559 --> 00:28:26,100
something at a certain results you can

00:28:24,840 --> 00:28:28,020
run them with something called a test

00:28:26,100 --> 00:28:29,789
runner that'll produce output kind of

00:28:28,020 --> 00:28:32,309
like this it'll tell you what it does

00:28:29,789 --> 00:28:33,780
it'll tell you when things fail you can

00:28:32,309 --> 00:28:35,549
attach certain messages to those

00:28:33,780 --> 00:28:37,789
failures to make them easier to track

00:28:35,549 --> 00:28:37,789
down

00:28:39,660 --> 00:28:43,880
automated tests are generally very

00:28:41,070 --> 00:28:46,920
seductive because automation usually is

00:28:43,880 --> 00:28:49,710
the key distinction with automated tests

00:28:46,920 --> 00:28:51,780
though is that their code this is I

00:28:49,710 --> 00:28:54,330
think it'll way kind of obvious but the

00:28:51,780 --> 00:28:56,100
ramifications are worth considering like

00:28:54,330 --> 00:28:57,690
any other piece of code you have to

00:28:56,100 --> 00:28:59,640
maintain them some of the thought you

00:28:57,690 --> 00:29:01,950
have to apply to test design is in how

00:28:59,640 --> 00:29:04,110
they'll be maintained poor test can come

00:29:01,950 --> 00:29:05,880
back with frequent false positives there

00:29:04,110 --> 00:29:07,560
could be a tuning period when you create

00:29:05,880 --> 00:29:11,310
more complex tests to ensure that

00:29:07,560 --> 00:29:13,170
they're useful also like I said there's

00:29:11,310 --> 00:29:16,320
a really wide range of approaches to

00:29:13,170 --> 00:29:18,150
automated testing I'm honestly giving

00:29:16,320 --> 00:29:20,160
them short shrift by not saying very

00:29:18,150 --> 00:29:21,600
much about them but when you're thinking

00:29:20,160 --> 00:29:23,940
about them for your own team for your

00:29:21,600 --> 00:29:25,680
own project my general advice would be

00:29:23,940 --> 00:29:29,010
to ask the questions I've been asking

00:29:25,680 --> 00:29:30,570
throughout the talk so far testing is

00:29:29,010 --> 00:29:32,340
not about correctness which is

00:29:30,570 --> 00:29:34,890
impossible you have to choose your

00:29:32,340 --> 00:29:36,870
targets the best way to do this is to

00:29:34,890 --> 00:29:39,630
identify the biggest sources of risk and

00:29:36,870 --> 00:29:41,220
rat them as quickly as possible you can

00:29:39,630 --> 00:29:42,960
leverage testing to get continuous

00:29:41,220 --> 00:29:45,360
feedback about risk as you build

00:29:42,960 --> 00:29:46,800
something this requires knowing what you

00:29:45,360 --> 00:29:48,870
know and knowing what you don't know

00:29:46,800 --> 00:29:50,490
it's especially helpful to create a

00:29:48,870 --> 00:29:54,510
shared map that the team can refer to

00:29:50,490 --> 00:29:57,870
this helps keep people on track the

00:29:54,510 --> 00:29:59,430
strategy surfaced pretty well it got us

00:29:57,870 --> 00:30:02,850
to a place where we thought we were

00:29:59,430 --> 00:30:05,340
ready to deploy but late in the game we

00:30:02,850 --> 00:30:06,780
started noticing erratic errors from our

00:30:05,340 --> 00:30:11,180
integration tests in a staging

00:30:06,780 --> 00:30:14,810
environment the errors looked like this

00:30:11,180 --> 00:30:16,740
this was the big mystery for us

00:30:14,810 --> 00:30:19,290
engineers usually like to brag about

00:30:16,740 --> 00:30:22,830
scaling problems but I don't think

00:30:19,290 --> 00:30:25,920
engineers usually a detail cave 140

00:30:22,830 --> 00:30:27,600
terabytes of memory on a web server this

00:30:25,920 --> 00:30:29,460
was an issue we haven't seen in our

00:30:27,600 --> 00:30:31,290
development environment and like I said

00:30:29,460 --> 00:30:33,870
it only started appearing in our staging

00:30:31,290 --> 00:30:35,730
environment this was a new class of

00:30:33,870 --> 00:30:37,650
problem for us something we didn't

00:30:35,730 --> 00:30:40,230
understand that we didn't know we've

00:30:37,650 --> 00:30:42,810
encounter some people call these unknown

00:30:40,230 --> 00:30:45,650
unknowns to get to the bottom of this we

00:30:42,810 --> 00:30:48,380
had to use new strategies and new tools

00:30:45,650 --> 00:30:49,910
first strategy

00:30:48,380 --> 00:30:52,280
with this problem you have to start with

00:30:49,910 --> 00:30:54,620
broader strokes simply because there's a

00:30:52,280 --> 00:30:57,200
lot more that you don't know what I said

00:30:54,620 --> 00:30:59,570
before about not prematurely discarding

00:30:57,200 --> 00:31:01,970
risk applies here you want to think

00:30:59,570 --> 00:31:04,190
about where in very general terms the

00:31:01,970 --> 00:31:05,360
problem could be located this is

00:31:04,190 --> 00:31:08,330
something that has to do with a web

00:31:05,360 --> 00:31:10,700
server a database server how they talk

00:31:08,330 --> 00:31:13,130
to each other within the web server is

00:31:10,700 --> 00:31:15,350
it part of you know that your user land

00:31:13,130 --> 00:31:17,240
code could it be an extension could it

00:31:15,350 --> 00:31:26,950
be another process running on the same

00:31:17,240 --> 00:31:28,940
application server consistency sorry

00:31:26,950 --> 00:31:30,380
when you think about all these places

00:31:28,940 --> 00:31:32,840
you really didn't want to think about

00:31:30,380 --> 00:31:36,560
them in order from the kind of least

00:31:32,840 --> 00:31:38,570
implausible to most implausible this is

00:31:36,560 --> 00:31:41,270
really in service of not getting rid of

00:31:38,570 --> 00:31:43,190
risk too soon you want to start thinking

00:31:41,270 --> 00:31:44,780
of ways you can test whether any of

00:31:43,190 --> 00:31:46,880
these general areas are where the

00:31:44,780 --> 00:31:48,290
problem could be occurring and you want

00:31:46,880 --> 00:31:51,560
to look for ways to consistently

00:31:48,290 --> 00:31:54,080
reproduce whatever error in the case of

00:31:51,560 --> 00:31:57,020
this project or this error consistency

00:31:54,080 --> 00:31:58,820
was actually a clue for us if this was

00:31:57,020 --> 00:32:00,320
an error that we always saw that

00:31:58,820 --> 00:32:02,930
probably would have suggested that the

00:32:00,320 --> 00:32:05,240
problem was within code that we wrote

00:32:02,930 --> 00:32:07,310
maybe some kind of runaway for loop that

00:32:05,240 --> 00:32:09,740
decided some data structure had to be

00:32:07,310 --> 00:32:11,540
extremely big but because it was

00:32:09,740 --> 00:32:13,670
inconsistent and it involved memory

00:32:11,540 --> 00:32:16,940
allocation we thought a lot about memory

00:32:13,670 --> 00:32:19,100
management inside PHP extensions we had

00:32:16,940 --> 00:32:22,730
a few broad hypotheses here for what

00:32:19,100 --> 00:32:26,660
could have been involved one API changed

00:32:22,730 --> 00:32:28,760
going to PHP seven was that internally a

00:32:26,660 --> 00:32:31,310
different type was used to represent how

00:32:28,760 --> 00:32:32,930
big strings and other values are so we

00:32:31,310 --> 00:32:35,960
went from using Long's to something

00:32:32,930 --> 00:32:39,530
called size T which was meant to make

00:32:35,960 --> 00:32:41,990
PHP more platform independent a side

00:32:39,530 --> 00:32:44,380
effect is that it was not unusual for

00:32:41,990 --> 00:32:47,270
people to miss changing these things

00:32:44,380 --> 00:32:49,750
this was something that we saw

00:32:47,270 --> 00:32:53,210
occasional fixes for in earlier

00:32:49,750 --> 00:32:55,130
revisions early early minor releases of

00:32:53,210 --> 00:32:56,840
PHP seven and it's something we also

00:32:55,130 --> 00:32:57,680
stumbled over ourselves when updating

00:32:56,840 --> 00:33:00,230
our own code

00:32:57,680 --> 00:33:01,940
so one task that we had was to reread

00:33:00,230 --> 00:33:04,700
our own code and identify potential

00:33:01,940 --> 00:33:07,580
misses we also looked through some

00:33:04,700 --> 00:33:09,550
extensions like pcre that we expected to

00:33:07,580 --> 00:33:12,290
be a little fuzzier in this regard

00:33:09,550 --> 00:33:15,170
another possible throughout all that

00:33:12,290 --> 00:33:17,960
though we didn't find anything a broader

00:33:15,170 --> 00:33:20,900
possibility was that there were general

00:33:17,960 --> 00:33:23,630
memory mismanagement issues kinds of

00:33:20,900 --> 00:33:26,870
things that we could use a analysis tool

00:33:23,630 --> 00:33:30,260
called Val grind to identify this was a

00:33:26,870 --> 00:33:32,680
tool we do stuff or and that we hadn't

00:33:30,260 --> 00:33:34,760
found anything with so the fact that

00:33:32,680 --> 00:33:38,120
this could be an issue would suggest

00:33:34,760 --> 00:33:40,400
that our test coverage was poor the

00:33:38,120 --> 00:33:42,230
broadest hypothesis we had was that

00:33:40,400 --> 00:33:45,500
there are some kind of shared memory

00:33:42,230 --> 00:33:48,710
corruption which was a very big target

00:33:45,500 --> 00:33:51,380
to try to hit that said we'd seen things

00:33:48,710 --> 00:33:54,650
like it with PC re there's a new feature

00:33:51,380 --> 00:33:57,680
in PHP 7 with PC re where there's now a

00:33:54,650 --> 00:34:00,110
JIT added on which makes it much faster

00:33:57,680 --> 00:34:01,850
to execute regular expressions but there

00:34:00,110 --> 00:34:04,010
were some early releases where there are

00:34:01,850 --> 00:34:07,490
problems related to it so that actually

00:34:04,010 --> 00:34:11,690
turned it off the problem with this kind

00:34:07,490 --> 00:34:14,750
of issue is that you more or less have

00:34:11,690 --> 00:34:17,390
to inspect memory corruption as it is

00:34:14,750 --> 00:34:19,730
occurring and to do that the def tool is

00:34:17,390 --> 00:34:22,070
really gdb which you can attach to a

00:34:19,730 --> 00:34:24,860
binary or an active process and inspect

00:34:22,070 --> 00:34:27,800
memory this also requires you to

00:34:24,860 --> 00:34:29,570
reproduce the issue so this was a Hart

00:34:27,800 --> 00:34:30,050
approach which I'll talk about more in a

00:34:29,570 --> 00:34:32,360
moment

00:34:30,050 --> 00:34:37,760
first I want to talk about caching these

00:34:32,360 --> 00:34:40,490
memory issues this was something that we

00:34:37,760 --> 00:34:44,270
could approach using automated tests

00:34:40,490 --> 00:34:46,159
actually PHP extensions have a framework

00:34:44,270 --> 00:34:48,560
for automated testing which you can

00:34:46,159 --> 00:34:50,720
apply here so one thing we wanted to do

00:34:48,560 --> 00:34:52,940
is create a controlled environment where

00:34:50,720 --> 00:34:55,850
we could run these tests make sure our

00:34:52,940 --> 00:35:00,980
test coverage was good and run the tests

00:34:55,850 --> 00:35:03,320
with Val grind to run these kinds of

00:35:00,980 --> 00:35:05,560
tests that's actually a make target when

00:35:03,320 --> 00:35:08,000
you're building the individual extension

00:35:05,560 --> 00:35:10,840
this will kick off the test Runner which

00:35:08,000 --> 00:35:12,400
is kind of similar to PHP unit if

00:35:10,840 --> 00:35:16,090
accords information about what passed

00:35:12,400 --> 00:35:17,860
what failed and why these the test

00:35:16,090 --> 00:35:20,590
rudder will also produce artifacts that

00:35:17,860 --> 00:35:22,480
tell you more about the errors one thing

00:35:20,590 --> 00:35:24,940
that's particularly handy is it'll spit

00:35:22,480 --> 00:35:27,580
out shell script when a test fails that

00:35:24,940 --> 00:35:29,980
lets you run rerun that test and only

00:35:27,580 --> 00:35:32,200
that test which if you have to bring

00:35:29,980 --> 00:35:33,670
that code into gdb to debug something

00:35:32,200 --> 00:35:36,880
very specific is actually pretty

00:35:33,670 --> 00:35:39,610
valuable there's a website QA dot

00:35:36,880 --> 00:35:41,560
php.net that documents this tool more

00:35:39,610 --> 00:35:43,840
exhaustively and you can really just

00:35:41,560 --> 00:35:47,110
read the source code for the test Runner

00:35:43,840 --> 00:35:49,150
which is run - tests PHP which is in the

00:35:47,110 --> 00:35:50,710
root of the PHP source repo and any

00:35:49,150 --> 00:35:57,970
extensions if you want to understand how

00:35:50,710 --> 00:36:01,000
it works the tests look something like

00:35:57,970 --> 00:36:04,450
this they're single files with a dot PHP

00:36:01,000 --> 00:36:07,270
T extension it's mostly centered around

00:36:04,450 --> 00:36:08,740
a block called file which is a PHP

00:36:07,270 --> 00:36:11,380
script to run but there are also

00:36:08,740 --> 00:36:14,260
sections that describe what the test is

00:36:11,380 --> 00:36:17,620
what it's supposed to do and the kind of

00:36:14,260 --> 00:36:19,120
output that should be expected the test

00:36:17,620 --> 00:36:21,550
Runner will produce output that looks

00:36:19,120 --> 00:36:23,290
kind of like this similar enough to PHP

00:36:21,550 --> 00:36:24,640
units but it gives you some more

00:36:23,290 --> 00:36:28,060
information about the environment that

00:36:24,640 --> 00:36:32,320
it uses it also gives you the option to

00:36:28,060 --> 00:36:34,270
run tests with Val grind which means

00:36:32,320 --> 00:36:37,450
you'll get slightly different output it

00:36:34,270 --> 00:36:39,070
tells you kind of at the top that it ran

00:36:37,450 --> 00:36:42,430
with Val grind and if there are any

00:36:39,070 --> 00:36:43,930
leaks it identifies which test suite an

00:36:42,430 --> 00:36:47,020
important thing to know about memory

00:36:43,930 --> 00:36:52,660
leaks is that you can have a memory leak

00:36:47,020 --> 00:36:54,880
and your code can still work so you may

00:36:52,660 --> 00:36:58,090
have tests that pass but they will then

00:36:54,880 --> 00:37:00,880
identify as being leak tests when you

00:36:58,090 --> 00:37:03,040
run them with Val grind they'll grind

00:37:00,880 --> 00:37:05,920
produces output that looks more or less

00:37:03,040 --> 00:37:08,200
like this when you run it with these

00:37:05,920 --> 00:37:11,010
extension tests it will generate an

00:37:08,200 --> 00:37:13,480
artifact file with the dot nem extension

00:37:11,010 --> 00:37:15,370
indicating whatever happened and it

00:37:13,480 --> 00:37:17,230
could be pretty low-level but if you're

00:37:15,370 --> 00:37:19,390
comfortable enough with C it can point

00:37:17,230 --> 00:37:21,200
you in the right direction to fix your

00:37:19,390 --> 00:37:23,270
code

00:37:21,200 --> 00:37:26,450
the other tool here we use is something

00:37:23,270 --> 00:37:33,319
called G Cove which is a new tool for

00:37:26,450 --> 00:37:34,790
measuring code coverage with wit C to be

00:37:33,319 --> 00:37:36,500
able to capture this information you

00:37:34,790 --> 00:37:38,540
have to modify your build steps or PHP

00:37:36,500 --> 00:37:40,690
extensions slightly you start off the

00:37:38,540 --> 00:37:43,010
same way by running the PHP I script

00:37:40,690 --> 00:37:46,490
when you're running the configure script

00:37:43,010 --> 00:37:50,990
you add on some special switches so that

00:37:46,490 --> 00:37:53,540
when the binary is built it will also

00:37:50,990 --> 00:37:56,420
produce special artifacts that tell you

00:37:53,540 --> 00:38:00,049
about code coverage there's a tool

00:37:56,420 --> 00:38:03,890
called el Cove which will read these

00:38:00,049 --> 00:38:05,510
artifacts and produce an information

00:38:03,890 --> 00:38:08,000
file which you can then analyze and

00:38:05,510 --> 00:38:09,950
visualize in different ways so you kind

00:38:08,000 --> 00:38:14,530
of use that to reset any counters that

00:38:09,950 --> 00:38:14,530
may have generated run your tests to

00:38:15,520 --> 00:38:20,900
generate the artifacts that show what

00:38:17,960 --> 00:38:23,440
code was executed and then you run ELQ

00:38:20,900 --> 00:38:25,940
hub again to capture that difference

00:38:23,440 --> 00:38:28,069
following that you can take that file

00:38:25,940 --> 00:38:29,920
which here edge of called coverage info

00:38:28,069 --> 00:38:32,960
and run it through a tool that will

00:38:29,920 --> 00:38:34,940
generate a visualization of it that is

00:38:32,960 --> 00:38:37,730
you want to use this one called gen HTML

00:38:34,940 --> 00:38:41,780
which produces an output that looks kind

00:38:37,730 --> 00:38:44,740
of like this it will show source file it

00:38:41,780 --> 00:38:47,450
will give you some general statistics on

00:38:44,740 --> 00:38:49,520
which lines were touched and it will

00:38:47,450 --> 00:38:51,109
also color code them in this case the

00:38:49,520 --> 00:38:53,290
top of the file of all comments so

00:38:51,109 --> 00:38:56,059
that's why there's nothing to see there

00:38:53,290 --> 00:38:57,500
so this this approach showed us that our

00:38:56,059 --> 00:39:00,710
own extensions were actually in pretty

00:38:57,500 --> 00:39:02,540
good shape this well it didn't get us

00:39:00,710 --> 00:39:04,700
closer to a solution it did end up

00:39:02,540 --> 00:39:08,450
giving us a more robust to us we'd have

00:39:04,700 --> 00:39:11,809
tests for our custom code this meant

00:39:08,450 --> 00:39:14,780
that our kind of last hope was digging

00:39:11,809 --> 00:39:19,460
in with gdb and trying to reproduce the

00:39:14,780 --> 00:39:21,799
error state gdb is a pretty complicated

00:39:19,460 --> 00:39:24,650
tool so I don't want to say too much

00:39:21,799 --> 00:39:26,390
about it there's a great tutorial by

00:39:24,650 --> 00:39:28,880
Richard Stallman that's the link at the

00:39:26,390 --> 00:39:31,369
bottom which explains how to use it the

00:39:28,880 --> 00:39:32,809
main thing to keep in mind is that you

00:39:31,369 --> 00:39:34,130
want to find the simplest means to

00:39:32,809 --> 00:39:38,589
reproduce an issue

00:39:34,130 --> 00:39:43,729
so you can run pH gdb pointing to a

00:39:38,589 --> 00:39:45,470
specific PHP script if you have a core

00:39:43,729 --> 00:39:48,589
file produced from a segfault or another

00:39:45,470 --> 00:39:52,190
error you can load that into gdb you can

00:39:48,589 --> 00:39:54,109
also attach gdb to a live PHP FTM or

00:39:52,190 --> 00:39:55,549
other kind of process if you need to set

00:39:54,109 --> 00:39:57,680
breakpoints and see how things are

00:39:55,549 --> 00:40:00,680
working on the server as a request is

00:39:57,680 --> 00:40:03,049
being served when you're doing this kind

00:40:00,680 --> 00:40:06,979
of debugging it's important to use a

00:40:03,049 --> 00:40:10,640
special build of PHP you a debug build

00:40:06,979 --> 00:40:12,799
is different in two ways one way is that

00:40:10,640 --> 00:40:15,890
it's going to produce special artifacts

00:40:12,799 --> 00:40:19,160
that gdb can use to tell you the names

00:40:15,890 --> 00:40:21,259
of functions and the code that is being

00:40:19,160 --> 00:40:22,940
executed at different points otherwise

00:40:21,259 --> 00:40:24,799
it'll just give you memory addresses

00:40:22,940 --> 00:40:27,079
which is not very helpful the other

00:40:24,799 --> 00:40:29,749
thing that it will do is disable

00:40:27,079 --> 00:40:31,970
compiler optimizations which will

00:40:29,749 --> 00:40:34,130
basically make sure that you get a true

00:40:31,970 --> 00:40:36,499
line-by-line execution of your source

00:40:34,130 --> 00:40:38,329
code compiler optimizations can

00:40:36,499 --> 00:40:41,239
otherwise rearrange things in

00:40:38,329 --> 00:40:43,339
unpredictable ways something to keep in

00:40:41,239 --> 00:40:44,749
mind with debug builds is that because

00:40:43,339 --> 00:40:46,819
you are disabling those optimizations

00:40:44,749 --> 00:40:48,829
the code may actually behave differently

00:40:46,819 --> 00:40:52,460
and this can introduce noise into the

00:40:48,829 --> 00:40:54,200
testing you're trying to do another nice

00:40:52,460 --> 00:40:56,180
thing to know about with gdb is that you

00:40:54,200 --> 00:40:58,009
can script it if there are things that

00:40:56,180 --> 00:41:01,039
you're trying to do repeatedly you can

00:40:58,009 --> 00:41:03,170
record them into a text file load them

00:41:01,039 --> 00:41:05,719
and run them every time there trying to

00:41:03,170 --> 00:41:08,509
see how things work if you're trying to

00:41:05,719 --> 00:41:09,799
make small changes to a test plan to

00:41:08,509 --> 00:41:12,799
understand where something is breaking

00:41:09,799 --> 00:41:17,359
this can be a helpful way of maintaining

00:41:12,799 --> 00:41:19,940
sanity so after chugging along on this

00:41:17,359 --> 00:41:22,460
for a little bit we found the culprit

00:41:19,940 --> 00:41:25,190
the culprit was not one of our

00:41:22,460 --> 00:41:28,579
extensions or rather not an extension we

00:41:25,190 --> 00:41:31,190
had modified ourselves but another

00:41:28,579 --> 00:41:34,579
non-core extension in this case a PC you

00:41:31,190 --> 00:41:36,259
we found a bug with it that there was an

00:41:34,579 --> 00:41:39,680
invalid right to a memory region

00:41:36,259 --> 00:41:42,349
containing the size of a PHP string and

00:41:39,680 --> 00:41:45,410
this is why at some point HP decided it

00:41:42,349 --> 00:41:47,329
needed to allocate so much memory it

00:41:45,410 --> 00:41:47,810
turned out though that this was a bug

00:41:47,329 --> 00:41:50,540
that had

00:41:47,810 --> 00:41:52,460
fixed already so there wasn't really any

00:41:50,540 --> 00:41:55,160
work for us to do besides those new

00:41:52,460 --> 00:41:58,210
packages and deploy them kind of

00:41:55,160 --> 00:42:02,360
anticlimactic but sometimes it happens

00:41:58,210 --> 00:42:07,250
so things we concluded from the full

00:42:02,360 --> 00:42:08,780
exercise we could have been a little

00:42:07,250 --> 00:42:11,030
more thorough about reviewing doing

00:42:08,780 --> 00:42:12,530
issues with third-party extensions we

00:42:11,030 --> 00:42:15,890
were relatively confident that that's

00:42:12,530 --> 00:42:18,020
where the issue was but we were a little

00:42:15,890 --> 00:42:21,800
I'd say low level and rudimentary and

00:42:18,020 --> 00:42:24,350
how we investigated them we could have

00:42:21,800 --> 00:42:26,780
focused our energy sooner on extensions

00:42:24,350 --> 00:42:29,330
that operated on shared memory we'd

00:42:26,780 --> 00:42:33,260
already had that issue before with pcre

00:42:29,330 --> 00:42:35,210
and we assumed that the atcu extension

00:42:33,260 --> 00:42:39,590
was actually safe because we didn't

00:42:35,210 --> 00:42:42,980
write it so that was kind of a big blind

00:42:39,590 --> 00:42:44,660
spot for us a very simple thing we could

00:42:42,980 --> 00:42:46,520
have done before getting into too much

00:42:44,660 --> 00:42:48,770
deeper game was making sure we deployed

00:42:46,520 --> 00:42:50,750
the latest version of all extensions we

00:42:48,770 --> 00:42:53,690
didn't have a really good sense of how

00:42:50,750 --> 00:42:55,970
often they were being updated so we kind

00:42:53,690 --> 00:42:58,730
of assumed that it just wasn't a thing

00:42:55,970 --> 00:43:01,670
that we needed to look into one thing I

00:42:58,730 --> 00:43:03,590
want to touch on a little is this idea

00:43:01,670 --> 00:43:06,170
of correctness and whether we should

00:43:03,590 --> 00:43:08,690
have identified sooner that we could

00:43:06,170 --> 00:43:11,600
have been more correct in our

00:43:08,690 --> 00:43:14,660
understanding of what our code did this

00:43:11,600 --> 00:43:19,100
is kind of a hindsight of 2020 sort of

00:43:14,660 --> 00:43:20,840
thing ideally we would have known sooner

00:43:19,100 --> 00:43:22,280
that this was a kind of issue but a lot

00:43:20,840 --> 00:43:23,840
of the choices that we made in this

00:43:22,280 --> 00:43:25,700
project were based on as much

00:43:23,840 --> 00:43:28,570
information as we had at a given point

00:43:25,700 --> 00:43:32,180
in time so it could be easy to say that

00:43:28,570 --> 00:43:34,490
you did things wrong after the fact but

00:43:32,180 --> 00:43:40,070
usually you don't know that until after

00:43:34,490 --> 00:43:42,650
the fact after we identified this issue

00:43:40,070 --> 00:43:44,990
we did a final round of testing using a

00:43:42,650 --> 00:43:46,550
technique called replay testing one

00:43:44,990 --> 00:43:50,260
thing we were concerned about is that

00:43:46,550 --> 00:43:53,060
the testing we were doing wasn't working

00:43:50,260 --> 00:43:55,700
through a broad enough set of use cases

00:43:53,060 --> 00:43:57,620
for our website who are doing things

00:43:55,700 --> 00:43:59,950
that engineers do how to do which is

00:43:57,620 --> 00:44:05,530
really a pretty specific walkthrough

00:43:59,950 --> 00:44:07,150
of flows through the website so to get a

00:44:05,530 --> 00:44:10,090
better understanding of things real

00:44:07,150 --> 00:44:12,190
people did we look to add access logs so

00:44:10,090 --> 00:44:14,410
one thing that you can do is you can

00:44:12,190 --> 00:44:16,540
take your web access logs which tell you

00:44:14,410 --> 00:44:18,760
all the URLs that people hit and all the

00:44:16,540 --> 00:44:21,250
parameters going to them you can feed

00:44:18,760 --> 00:44:23,800
them to curl or another tool that can

00:44:21,250 --> 00:44:25,780
make HTTP requests and then you can

00:44:23,800 --> 00:44:29,680
examine your logs and see if any errors

00:44:25,780 --> 00:44:31,750
are generated this is pretty helpful and

00:44:29,680 --> 00:44:33,130
since it's something you can script you

00:44:31,750 --> 00:44:36,280
can burn through a lot of use cases

00:44:33,130 --> 00:44:38,080
quite quickly another thing to consider

00:44:36,280 --> 00:44:40,420
with replay testing is to combine it

00:44:38,080 --> 00:44:43,420
with stress testing Apache bench is a

00:44:40,420 --> 00:44:46,030
good tool for this it lets you indicate

00:44:43,420 --> 00:44:49,210
a URL and say I want you to request this

00:44:46,030 --> 00:44:53,050
however many times and also a certain

00:44:49,210 --> 00:44:56,740
number of times in parallel since web

00:44:53,050 --> 00:44:58,660
servers have dependencies this and are

00:44:56,740 --> 00:44:59,200
usually handling more than one request

00:44:58,660 --> 00:45:01,870
at once

00:44:59,200 --> 00:45:04,420
this can help expose issues that might

00:45:01,870 --> 00:45:06,070
be present including you know the kinds

00:45:04,420 --> 00:45:09,220
of shared memory issues that had bitten

00:45:06,070 --> 00:45:11,260
us before thankfully after working

00:45:09,220 --> 00:45:13,570
through the replay testing we were still

00:45:11,260 --> 00:45:16,960
pretty confident in how our systems were

00:45:13,570 --> 00:45:19,270
looking so to sum up unknown unknowns

00:45:16,960 --> 00:45:22,480
the main thing to focus on with them

00:45:19,270 --> 00:45:24,310
is reducing their scope more specific

00:45:22,480 --> 00:45:27,130
problems and more consistent problems

00:45:24,310 --> 00:45:28,510
are usually easier to solve take lots of

00:45:27,130 --> 00:45:30,880
notes as you work through these issues

00:45:28,510 --> 00:45:33,100
you never know what information will be

00:45:30,880 --> 00:45:34,810
relevant our initial hypotheses were

00:45:33,100 --> 00:45:37,300
driven by things we noted earlier in the

00:45:34,810 --> 00:45:39,070
project over-communicating ensures you

00:45:37,300 --> 00:45:42,040
get regular sanity checks on what you're

00:45:39,070 --> 00:45:44,020
trying it also gives you opportunities

00:45:42,040 --> 00:45:45,970
to identify the familiar in what you see

00:45:44,020 --> 00:45:47,650
finding something familiar will give you

00:45:45,970 --> 00:45:49,120
something to latch on to which might

00:45:47,650 --> 00:45:52,090
help you crack the bigger things that's

00:45:49,120 --> 00:45:54,700
harder to explain it's helpful to vary

00:45:52,090 --> 00:45:56,230
your approach as you go all tools have

00:45:54,700 --> 00:45:57,160
different characteristics and different

00:45:56,230 --> 00:45:58,990
things that they're good at and

00:45:57,160 --> 00:46:00,790
different results they're likely to

00:45:58,990 --> 00:46:02,050
produce when you don't know what you're

00:46:00,790 --> 00:46:03,640
looking for getting a mix of

00:46:02,050 --> 00:46:06,550
characteristics will improve the odds

00:46:03,640 --> 00:46:08,470
that you'll find it similarly try

00:46:06,550 --> 00:46:09,670
solving these problems with partner

00:46:08,470 --> 00:46:12,200
different people have different

00:46:09,670 --> 00:46:13,609
strategies and ways of looking at

00:46:12,200 --> 00:46:18,980
problems and this can help accelerate

00:46:13,609 --> 00:46:20,960
finding solutions these problems can

00:46:18,980 --> 00:46:22,520
introduce a lot of stress into projects

00:46:20,960 --> 00:46:25,070
and that's something you want to be very

00:46:22,520 --> 00:46:27,109
sensitive to there can be doubt inside

00:46:25,070 --> 00:46:29,329
and outside the team that things are

00:46:27,109 --> 00:46:31,660
going in the right direction so one

00:46:29,329 --> 00:46:35,210
thing to think about is refraining them

00:46:31,660 --> 00:46:37,730
a lot of times the data day of being a

00:46:35,210 --> 00:46:39,380
software engineer can be very Road and

00:46:37,730 --> 00:46:41,300
routine you can do things that you're

00:46:39,380 --> 00:46:43,070
comfortable with but these kinds of

00:46:41,300 --> 00:46:44,510
problems are opportunities to break out

00:46:43,070 --> 00:46:45,020
of that comfort zone and learn new

00:46:44,510 --> 00:46:47,089
things

00:46:45,020 --> 00:46:49,520
and hopefully that's something that is

00:46:47,089 --> 00:46:55,010
exciting to the engineers on your team

00:46:49,520 --> 00:46:57,079
and not you know a distraction look for

00:46:55,010 --> 00:46:58,910
indications that the problem is getting

00:46:57,079 --> 00:47:02,329
resolved and you're making progress on

00:46:58,910 --> 00:47:04,250
it when problems are very vague it can

00:47:02,329 --> 00:47:06,589
kind of feel like you're falling through

00:47:04,250 --> 00:47:08,690
quicksand sometimes and you want to look

00:47:06,589 --> 00:47:10,490
for anything that's going to tell you

00:47:08,690 --> 00:47:12,109
that you're learning something more

00:47:10,490 --> 00:47:17,750
about it even if it's a very little

00:47:12,109 --> 00:47:20,839
thing throughout these problems it's

00:47:17,750 --> 00:47:22,849
just as important if not more important

00:47:20,839 --> 00:47:24,589
to work the room and give people

00:47:22,849 --> 00:47:27,079
confidence that the project is headed in

00:47:24,589 --> 00:47:31,099
the right direction it can be very easy

00:47:27,079 --> 00:47:33,680
to disappear working on a project like

00:47:31,099 --> 00:47:36,290
working on a problem like this and that

00:47:33,680 --> 00:47:38,829
can reduce the confidence that your

00:47:36,290 --> 00:47:42,170
stakeholders have and how you're doing

00:47:38,829 --> 00:47:43,460
finally you want to be willing to say

00:47:42,170 --> 00:47:45,440
when you've invested too much in a

00:47:43,460 --> 00:47:47,060
project there is going to be a point in

00:47:45,440 --> 00:47:49,160
time where the ROI tips over and

00:47:47,060 --> 00:47:50,900
something stops being worth working on

00:47:49,160 --> 00:47:53,030
and it's quite possible that this can

00:47:50,900 --> 00:47:55,250
occur very late in the life cycle of a

00:47:53,030 --> 00:47:56,960
project the goals of your team

00:47:55,250 --> 00:48:01,609
ultimately have to take precedence over

00:47:56,960 --> 00:48:05,640
any one project we ended up learning

00:48:01,609 --> 00:48:08,370
quite a bit from solving this problem we

00:48:05,640 --> 00:48:11,850
made it easier to investigate these

00:48:08,370 --> 00:48:13,770
kinds of problems in production we found

00:48:11,850 --> 00:48:16,130
some new processes for capturing

00:48:13,770 --> 00:48:19,970
information about production systems and

00:48:16,130 --> 00:48:22,530
thought about new ways to monitor and

00:48:19,970 --> 00:48:26,520
automate these kinds of solutions around

00:48:22,530 --> 00:48:27,960
these kinds of issues so painful as it

00:48:26,520 --> 00:48:30,630
was it ended up being pretty valuable

00:48:27,960 --> 00:48:31,950
for our team the next time we see a

00:48:30,630 --> 00:48:36,570
problem like this it will be much easier

00:48:31,950 --> 00:48:39,090
to resolve so this group of tools is

00:48:36,570 --> 00:48:42,360
really something called system testing

00:48:39,090 --> 00:48:44,810
and it's very generally the ability to

00:48:42,360 --> 00:48:47,430
poke something big and see if it reacts

00:48:44,810 --> 00:48:49,560
these tools are expensive which is why

00:48:47,430 --> 00:48:54,060
they're a last resort but sometimes

00:48:49,560 --> 00:48:57,410
that's what you need at this point we

00:48:54,060 --> 00:49:00,570
thought we were ready to do a rollout

00:48:57,410 --> 00:49:02,130
considerations we had before I said

00:49:00,570 --> 00:49:03,840
there will probably be other big

00:49:02,130 --> 00:49:06,360
projects going on at the same time in

00:49:03,840 --> 00:49:08,330
our case we were moving hardware from

00:49:06,360 --> 00:49:12,570
one data center to a new data center

00:49:08,330 --> 00:49:15,930
this was a very important very visible

00:49:12,570 --> 00:49:19,770
project that was meant to make sure that

00:49:15,930 --> 00:49:21,150
over the next year had even more time we

00:49:19,770 --> 00:49:23,550
would be able to serve the amount of

00:49:21,150 --> 00:49:26,100
traffic we were expecting to have this

00:49:23,550 --> 00:49:30,390
was a project that could in no uncertain

00:49:26,100 --> 00:49:33,840
terms be disrupted another issue was

00:49:30,390 --> 00:49:36,930
that our testing focus exclusively on

00:49:33,840 --> 00:49:40,370
our customer facing website but there

00:49:36,930 --> 00:49:43,140
are lots of other code that we had that

00:49:40,370 --> 00:49:45,030
it's just separate from that and finally

00:49:43,140 --> 00:49:46,950
just the general concern that no one

00:49:45,030 --> 00:49:48,600
wants to impact revenue no one wants to

00:49:46,950 --> 00:49:53,010
flip a switch and cause an outage or

00:49:48,600 --> 00:49:55,560
other kinds of incident the stuff we did

00:49:53,010 --> 00:49:59,550
to navigate this we were very careful

00:49:55,560 --> 00:50:01,710
about scheduling we scheduled with lead

00:49:59,550 --> 00:50:04,710
time around the hard dates that we had

00:50:01,710 --> 00:50:06,360
with the data center move we were very

00:50:04,710 --> 00:50:08,550
clear that we'd be ready to pause this

00:50:06,360 --> 00:50:09,930
project if the two collided if it turned

00:50:08,550 --> 00:50:11,820
out we didn't give ourselves enough

00:50:09,930 --> 00:50:13,500
margin we were willing to say you know

00:50:11,820 --> 00:50:15,480
we might have to wait a few months to be

00:50:13,500 --> 00:50:17,190
able to continue with this project but

00:50:15,480 --> 00:50:19,410
it's more important that the data center

00:50:17,190 --> 00:50:22,799
move is successful than the PHP set

00:50:19,410 --> 00:50:24,839
migration is successful we started with

00:50:22,799 --> 00:50:27,210
actually non production environments

00:50:24,839 --> 00:50:28,650
wayfarer has three primary environments

00:50:27,210 --> 00:50:30,510
a development environment for the

00:50:28,650 --> 00:50:33,000
day-to-day work of engineers a staging

00:50:30,510 --> 00:50:36,059
environment which is a production like

00:50:33,000 --> 00:50:38,160
testing environment and our customer

00:50:36,059 --> 00:50:39,530
casing production environment we worked

00:50:38,160 --> 00:50:41,609
through the development environment

00:50:39,530 --> 00:50:43,079
before we work through the staging

00:50:41,609 --> 00:50:45,829
environment before we thought about

00:50:43,079 --> 00:50:51,089
getting any production traffic on

00:50:45,829 --> 00:50:54,809
servers using PHP 7 and by the time that

00:50:51,089 --> 00:50:56,760
we got to using got to moving that

00:50:54,809 --> 00:50:58,740
traffic over we did it incrementally

00:50:56,760 --> 00:51:00,599
we started a handful of servers at a

00:50:58,740 --> 00:51:04,849
time before we moved through entire data

00:51:00,599 --> 00:51:06,780
centers our focus throughout this was

00:51:04,849 --> 00:51:09,299
specifically on the customer facing

00:51:06,780 --> 00:51:13,020
website we were very careful about

00:51:09,299 --> 00:51:17,970
making sure that our code would work

00:51:13,020 --> 00:51:20,069
both in PHP 5 and PHP 7 so the most

00:51:17,970 --> 00:51:22,530
value for us was really in getting

00:51:20,069 --> 00:51:24,839
customer facing traffic on PHP 7 sooner

00:51:22,530 --> 00:51:27,109
because that's the group of people who

00:51:24,839 --> 00:51:31,380
would benefit the most from speed up

00:51:27,109 --> 00:51:33,869
when we got into actually moving the

00:51:31,380 --> 00:51:36,809
production traffic over we started by

00:51:33,869 --> 00:51:38,670
agreeing on a monitoring plan we

00:51:36,809 --> 00:51:40,200
identified the things that we were going

00:51:38,670 --> 00:51:43,770
to watch and who is going to watch them

00:51:40,200 --> 00:51:45,569
we made changes from a what we called a

00:51:43,770 --> 00:51:48,440
war room which was a conference room

00:51:45,569 --> 00:51:50,279
that we booked out where people from

00:51:48,440 --> 00:51:51,990
different infrastructure and software

00:51:50,279 --> 00:51:54,839
teams who are working on this project

00:51:51,990 --> 00:51:58,200
could co-locate work together shout out

00:51:54,839 --> 00:52:00,359
issues in case they saw them we let

00:51:58,200 --> 00:52:02,190
changes bacon so we rolled out a few

00:52:00,359 --> 00:52:04,529
servers at a time made sure there were

00:52:02,190 --> 00:52:06,089
no errors rolled out a few more the next

00:52:04,529 --> 00:52:09,569
day and kind of step through very slowly

00:52:06,089 --> 00:52:13,500
that way to minimize risk throughout

00:52:09,569 --> 00:52:15,569
this very incremental process we really

00:52:13,500 --> 00:52:19,200
really over communicated our plan to the

00:52:15,569 --> 00:52:21,180
broader team not impacting others is

00:52:19,200 --> 00:52:23,579
different from not surprising them so

00:52:21,180 --> 00:52:25,140
it's one thing if we caused some kind of

00:52:23,579 --> 00:52:26,910
disruption but it would be another thing

00:52:25,140 --> 00:52:28,380
if no one knew that we were making a

00:52:26,910 --> 00:52:30,080
change that could cause that kind of

00:52:28,380 --> 00:52:33,620
disruption

00:52:30,080 --> 00:52:35,270
the big thing here is that with these

00:52:33,620 --> 00:52:37,910
incremental updates there's going to be

00:52:35,270 --> 00:52:42,710
this in-between state from every server

00:52:37,910 --> 00:52:45,410
running PHP five to some some more some

00:52:42,710 --> 00:52:48,890
more running PHP seven to everything

00:52:45,410 --> 00:52:50,240
running PHP seven so you want to have it

00:52:48,890 --> 00:52:52,160
in the back of your head how you're

00:52:50,240 --> 00:52:56,300
going to plan around this possibility

00:52:52,160 --> 00:52:58,930
how to make sure that your code is going

00:52:56,300 --> 00:53:02,600
to run in both places

00:52:58,930 --> 00:53:05,630
one big thing here was that project we

00:53:02,600 --> 00:53:08,030
had to do with moving from an VMs equal

00:53:05,630 --> 00:53:11,060
extensions PDO this was a project that

00:53:08,030 --> 00:53:15,110
we could do independent of the phd seven

00:53:11,060 --> 00:53:17,930
move it's something that we finished and

00:53:15,110 --> 00:53:20,720
deployed well a lot of our servers are

00:53:17,930 --> 00:53:22,850
still running PHP five and actually

00:53:20,720 --> 00:53:24,500
detaching those two concerns made it

00:53:22,850 --> 00:53:26,150
more possible to separate those

00:53:24,500 --> 00:53:33,040
workflows and get things done faster

00:53:26,150 --> 00:53:35,090
with less risk so because of those

00:53:33,040 --> 00:53:39,200
simultaneous states that's actually why

00:53:35,090 --> 00:53:41,810
we have simultaneous metrics we were

00:53:39,200 --> 00:53:44,000
running traffic through two groups of

00:53:41,810 --> 00:53:45,770
servers at the same time and this is

00:53:44,000 --> 00:53:47,930
actually a real asset for us because it

00:53:45,770 --> 00:53:49,670
allowed us to do that side a side by

00:53:47,930 --> 00:53:51,400
side comparison it's a lot more

00:53:49,670 --> 00:53:55,010
compelling to look at a chart like this

00:53:51,400 --> 00:53:58,990
that has two series than a single series

00:53:55,010 --> 00:53:58,990
that would start high and then go low

00:53:59,470 --> 00:54:05,720
at the end of the rollout one thing that

00:54:03,680 --> 00:54:08,240
we want to do confirm metrics we're

00:54:05,720 --> 00:54:10,760
actually kind of suspicious of them at

00:54:08,240 --> 00:54:14,360
first because they seemed a little too

00:54:10,760 --> 00:54:16,820
good to be true but we looked at things

00:54:14,360 --> 00:54:19,250
from a few different angles and felt

00:54:16,820 --> 00:54:20,780
comfortable that there were no customer

00:54:19,250 --> 00:54:24,140
facing issues that the numbers that we

00:54:20,780 --> 00:54:26,030
saw were real we celebrated we sent

00:54:24,140 --> 00:54:27,800
release notes up added ourselves on the

00:54:26,030 --> 00:54:29,960
back and shared you know our successes

00:54:27,800 --> 00:54:32,350
with the broader team and then we

00:54:29,960 --> 00:54:34,610
continued our slow roll over the rest of

00:54:32,350 --> 00:54:38,450
customer-facing traffic and other

00:54:34,610 --> 00:54:41,390
services the projects altogether

00:54:38,450 --> 00:54:43,940
started in October 2015 and actually

00:54:41,390 --> 00:54:46,820
only totally wrapped up

00:54:43,940 --> 00:54:51,440
Oh weeks ago both of our production

00:54:46,820 --> 00:54:53,300
systems were running on PHP seven by the

00:54:51,440 --> 00:54:55,760
end of last year but there were some

00:54:53,300 --> 00:54:58,180
holdouts in different places that meant

00:54:55,760 --> 00:55:03,830
that we worked finally rolled over until

00:54:58,180 --> 00:55:05,630
February so some up again testing is

00:55:03,830 --> 00:55:08,000
about continuously challenging your

00:55:05,630 --> 00:55:09,860
world view you can use tests to learn

00:55:08,000 --> 00:55:11,870
more about your systems you can create

00:55:09,860 --> 00:55:14,750
feedback loops around your tests to make

00:55:11,870 --> 00:55:17,390
your systems more reliable testing is

00:55:14,750 --> 00:55:19,430
and should be a continuous activity you

00:55:17,390 --> 00:55:21,110
don't just do it once and walk away that

00:55:19,430 --> 00:55:22,790
only means something worked once

00:55:21,110 --> 00:55:24,350
even after we deployed and started

00:55:22,790 --> 00:55:27,280
seeing those positive numbers we kept

00:55:24,350 --> 00:55:29,450
digging in so to sum up what we covered

00:55:27,280 --> 00:55:31,670
risk is the thing that you don't know

00:55:29,450 --> 00:55:35,500
talked about all the different ways you

00:55:31,670 --> 00:55:38,240
can identify and measure risk in your

00:55:35,500 --> 00:55:40,790
applications and talk a lot about

00:55:38,240 --> 00:55:42,500
product management strategies so

00:55:40,790 --> 00:55:44,210
hopefully this will all be very helpful

00:55:42,500 --> 00:55:59,930
for you what you're doing projects like

00:55:44,210 --> 00:56:10,610
this at your own companies thank you any

00:55:59,930 --> 00:56:13,040
questions you indicated that there might

00:56:10,610 --> 00:56:14,840
have been some differences between the

00:56:13,040 --> 00:56:17,780
memory management or the way is handled

00:56:14,840 --> 00:56:19,940
in between PHP five and seven I was just

00:56:17,780 --> 00:56:21,980
wondering if you had any side to side

00:56:19,940 --> 00:56:24,610
comparisons of how the memory usage on

00:56:21,980 --> 00:56:27,110
servers was then before or in this

00:56:24,610 --> 00:56:29,240
transition phase that you all that you

00:56:27,110 --> 00:56:33,620
did if there was any comparison there to

00:56:29,240 --> 00:56:35,960
the memory usage of the PHP script I

00:56:33,620 --> 00:56:42,260
don't know the precise numbers offhand

00:56:35,960 --> 00:56:46,160
we knew that it was lower and what's

00:56:42,260 --> 00:56:48,830
really driving that is the structure in

00:56:46,160 --> 00:56:51,200
the C internals that stores user land

00:56:48,830 --> 00:56:53,270
variables got a lot smaller

00:56:51,200 --> 00:56:55,589
okay yeah because you mentioned also in

00:56:53,270 --> 00:56:58,769
the in the PHP unit test that

00:56:55,589 --> 00:57:00,509
curse the the initial response said that

00:56:58,769 --> 00:57:03,180
it might instead it use a bit more

00:57:00,509 --> 00:57:06,269
memory than the comparison to PHP five

00:57:03,180 --> 00:57:09,539
so but I guess maybe that was just for

00:57:06,269 --> 00:57:25,430
the test the unit test done yep okay

00:57:09,539 --> 00:57:25,430
thanks SATA thanks

00:57:26,450 --> 00:57:32,820

YouTube URL: https://www.youtube.com/watch?v=qKE3Pwkbhrc


