Title: PHP UK Conference 2017 - Victoria Quirante - Building Restful APIs with Symfony Components
Publication date: 2017-04-03
Playlist: PHP UK Conference 2017
Description: 
	Built around the HTTP specification, Symfony components provide a rock solid foundation for building RESTful APIs, whether we are using the full framework or not. In this session we will see how to successfully deal with problems such as how to adapt our models to the desired representations back and forth, authentication strategies, some tips and tricks to test effectively our APIs and also how to apply these concepts to migrate effectively a legacy application, based upon real use cases.
Captions: 
	00:00:00,640 --> 00:00:06,620
afternoon and welcome to this talk

00:00:03,520 --> 00:00:07,929
building restful api it with symphony

00:00:06,620 --> 00:00:11,120
component

00:00:07,929 --> 00:00:13,880
my name is Victoria I work as the menu

00:00:11,120 --> 00:00:16,970
there we built tailor-made projects for

00:00:13,880 --> 00:00:19,699
clients using mainly scene 24 the

00:00:16,970 --> 00:00:21,800
backend and react for the front-end in

00:00:19,699 --> 00:00:25,670
most of the projects we build there is a

00:00:21,800 --> 00:00:27,830
need for an API maybe because you want

00:00:25,670 --> 00:00:30,439
to serve the data to the front-end or to

00:00:27,830 --> 00:00:33,260
the mobile app or for some other uses

00:00:30,439 --> 00:00:35,300
that we will review later we are very

00:00:33,260 --> 00:00:37,579
comfortable with the symphony framework

00:00:35,300 --> 00:00:40,160
and today I would like to show you how

00:00:37,579 --> 00:00:42,440
with only a few symfony components you

00:00:40,160 --> 00:00:45,379
can have a lot of help for building your

00:00:42,440 --> 00:00:48,079
API and also which other tools do you

00:00:45,379 --> 00:00:50,930
have if you decide to use the whole

00:00:48,079 --> 00:00:53,690
framework okay first of all I'm going to

00:00:50,930 --> 00:00:56,960
start with an introduction answering a

00:00:53,690 --> 00:01:00,250
few questions that may arise from the

00:00:56,960 --> 00:01:03,500
title of this talk the first of them is

00:01:00,250 --> 00:01:06,920
why would I want my API to be Russell

00:01:03,500 --> 00:01:10,010
okay so after some time reading a lot

00:01:06,920 --> 00:01:13,159
about dress and so on some people some

00:01:10,010 --> 00:01:15,549
someone may think okay this is fine but

00:01:13,159 --> 00:01:19,040
actually I can think of a better way of

00:01:15,549 --> 00:01:23,330
structuring an API why should that you

00:01:19,040 --> 00:01:25,009
use resk this is that good or even you

00:01:23,330 --> 00:01:27,110
can think okay I've been reading a lot

00:01:25,009 --> 00:01:29,990
of and apparently there are some great

00:01:27,110 --> 00:01:33,020
or a few confusing and controversial

00:01:29,990 --> 00:01:35,540
points and I don't think this madness

00:01:33,020 --> 00:01:38,360
must be so good if people are arguing so

00:01:35,540 --> 00:01:40,670
much about it right well those are first

00:01:38,360 --> 00:01:43,250
thoughts in my opinion but on the other

00:01:40,670 --> 00:01:46,670
hand you have to very unlist you very

00:01:43,250 --> 00:01:50,509
powerful reasons for having your API

00:01:46,670 --> 00:01:53,570
restful the first of them is that rest

00:01:50,509 --> 00:01:55,939
makes the most of the each HTTP

00:01:53,570 --> 00:01:59,810
specification that means that it makes

00:01:55,939 --> 00:02:03,229
the most of the best features of HTTP

00:01:59,810 --> 00:02:05,329
it's about Heather's status code birth

00:02:03,229 --> 00:02:06,170
and this is something really really good

00:02:05,329 --> 00:02:08,179
okay

00:02:06,170 --> 00:02:11,030
on the other hand this there is another

00:02:08,179 --> 00:02:13,489
very good reason is that you will be

00:02:11,030 --> 00:02:14,260
using a common language and you will

00:02:13,489 --> 00:02:16,299
know which

00:02:14,260 --> 00:02:18,970
are the advantages of that to have a

00:02:16,299 --> 00:02:21,340
common language with the others that in

00:02:18,970 --> 00:02:24,909
the long run it saves time it makes your

00:02:21,340 --> 00:02:27,400
life easier okay but even so you can say

00:02:24,909 --> 00:02:29,470
okay but is it really worth it all these

00:02:27,400 --> 00:02:31,209
things you all have seen these the three

00:02:29,470 --> 00:02:33,730
levels that you are supposed to reach

00:02:31,209 --> 00:02:37,420
and so on well I think that you can

00:02:33,730 --> 00:02:39,400
follow up same approach to rest okay it

00:02:37,420 --> 00:02:41,290
has also three levels but they are

00:02:39,400 --> 00:02:43,900
different levels the first one is is

00:02:41,290 --> 00:02:47,379
learn the stuff that is commonly

00:02:43,900 --> 00:02:49,989
accepted which is most of it learn all

00:02:47,379 --> 00:02:53,310
the things that everyone agrees on okay

00:02:49,989 --> 00:02:57,310
like use nouns for resources use bed

00:02:53,310 --> 00:02:59,950
HTTP birth and retire meaning meaningful

00:02:57,310 --> 00:03:02,230
status codes and so on most of these

00:02:59,950 --> 00:03:04,810
stuff okay everyone agrees on it and you

00:03:02,230 --> 00:03:07,239
need to really know how it works and use

00:03:04,810 --> 00:03:09,430
it second half step is be aware that

00:03:07,239 --> 00:03:12,190
there are a few great areas or

00:03:09,430 --> 00:03:14,889
controversial points things like do we

00:03:12,190 --> 00:03:18,819
have to return the created or updated

00:03:14,889 --> 00:03:21,220
resource can I actually have two

00:03:18,819 --> 00:03:22,959
different your eyes when I have two

00:03:21,220 --> 00:03:25,480
different representations so these

00:03:22,959 --> 00:03:27,910
things you can see people discussing

00:03:25,480 --> 00:03:31,060
them for a long time without actually

00:03:27,910 --> 00:03:33,459
knowing which one is better even experts

00:03:31,060 --> 00:03:36,370
so for example this second question you

00:03:33,459 --> 00:03:38,349
can see Lucas of Smith which is the DL

00:03:36,370 --> 00:03:41,859
sort of the phosphorus margin bundle

00:03:38,349 --> 00:03:42,879
saying no you cannot you can have Q you

00:03:41,859 --> 00:03:44,530
are eyes for two different

00:03:42,879 --> 00:03:47,169
representations because because that

00:03:44,530 --> 00:03:50,620
goes actually against the concept of

00:03:47,169 --> 00:03:53,230
press just Phillipe itself but then you

00:03:50,620 --> 00:03:55,989
go somewhere else and you see the author

00:03:53,230 --> 00:03:58,209
of the concept and he says well I never

00:03:55,989 --> 00:04:00,730
said that you have to use content

00:03:58,209 --> 00:04:03,400
negotiation all the time I never said

00:04:00,730 --> 00:04:06,489
that and he's actually having different

00:04:03,400 --> 00:04:09,250
your eyes in his site for a different

00:04:06,489 --> 00:04:12,879
representation so what to do

00:04:09,250 --> 00:04:15,909
actually well what you can do in this

00:04:12,879 --> 00:04:17,919
cases is to choose a side you can choose

00:04:15,909 --> 00:04:20,049
the size simply because you think it

00:04:17,919 --> 00:04:22,270
makes more sense bigger because your

00:04:20,049 --> 00:04:25,090
colleague thinks that it makes more

00:04:22,270 --> 00:04:26,919
sense or if you don't know what to do

00:04:25,090 --> 00:04:29,169
you can even flip a coin if you

00:04:26,919 --> 00:04:31,570
but the thing is at the end you have to

00:04:29,169 --> 00:04:34,330
choose a way of doing that thing and

00:04:31,570 --> 00:04:36,250
stick to it that's the really important

00:04:34,330 --> 00:04:38,620
thing to do so we really really really

00:04:36,250 --> 00:04:41,320
consistent when building your API

00:04:38,620 --> 00:04:44,530
alright so if you want to summarize this

00:04:41,320 --> 00:04:47,080
try to be civilized and big old system

00:04:44,530 --> 00:04:49,120
the first part is kind of optional you

00:04:47,080 --> 00:04:51,910
can also get totally mad about defending

00:04:49,120 --> 00:04:55,600
your ideas you want but the second part

00:04:51,910 --> 00:04:58,449
is absolutely necessary you need to be

00:04:55,600 --> 00:05:01,150
this cool calm and very very cool system

00:04:58,449 --> 00:05:04,600
guys even boring guys when it comes to

00:05:01,150 --> 00:05:08,199
implement your API all right one second

00:05:04,600 --> 00:05:10,180
question why Symphony Andres why are we

00:05:08,199 --> 00:05:13,060
putting those two things together this

00:05:10,180 --> 00:05:14,919
one is very simple to answer rest is

00:05:13,060 --> 00:05:18,090
several things is a very strict

00:05:14,919 --> 00:05:20,880
definition is a sometimes a battlefield

00:05:18,090 --> 00:05:23,919
but is a way to make the most of the

00:05:20,880 --> 00:05:26,289
HTTP okay and symphony on the other hand

00:05:23,919 --> 00:05:30,310
was also built with the very same idea

00:05:26,289 --> 00:05:34,120
it was built totally around the HTTP

00:05:30,310 --> 00:05:36,580
specification so this is why those two

00:05:34,120 --> 00:05:39,729
to fit so well together because though

00:05:36,580 --> 00:05:41,039
both of them really love HTTP okay

00:05:39,729 --> 00:05:43,780
that's the answer

00:05:41,039 --> 00:05:46,479
uncertain last question regarding the

00:05:43,780 --> 00:05:49,120
title why Symphony component why are we

00:05:46,479 --> 00:05:52,630
talking about components and not not

00:05:49,120 --> 00:05:54,310
just Symphony as some of you may know

00:05:52,630 --> 00:05:56,620
symphonies two things is a fully-stocked

00:05:54,310 --> 00:05:59,039
framework that you can use us just one

00:05:56,620 --> 00:06:02,199
thing but it's also a set of independent

00:05:59,039 --> 00:06:04,840
components that you can can use isolate

00:06:02,199 --> 00:06:08,320
Lee in your own code and then actually

00:06:04,840 --> 00:06:11,080
many popular PHP projects are using

00:06:08,320 --> 00:06:14,050
already for frontline for example these

00:06:11,080 --> 00:06:17,409
are some of the components and doctrine

00:06:14,050 --> 00:06:20,620
uses them proper swells Silex the micro

00:06:17,409 --> 00:06:23,289
framework uses many of them Drupal since

00:06:20,620 --> 00:06:26,830
version eight I think as well Lara well

00:06:23,289 --> 00:06:29,050
too so this component has brought like

00:06:26,830 --> 00:06:31,030
kind of a bit of a standardization

00:06:29,050 --> 00:06:33,729
through the PHP community in the last

00:06:31,030 --> 00:06:35,909
year okay so in this stuff we are going

00:06:33,729 --> 00:06:39,190
to see in detail these five components

00:06:35,909 --> 00:06:40,660
HTTP foundation serializer validator

00:06:39,190 --> 00:06:43,180
form anger

00:06:40,660 --> 00:06:46,150
they're now legs that you get from these

00:06:43,180 --> 00:06:48,700
components you can apply it later in a

00:06:46,150 --> 00:06:52,600
few different situations when you decide

00:06:48,700 --> 00:06:54,370
to use the whole framework when you find

00:06:52,600 --> 00:06:58,210
these components in some other framework

00:06:54,370 --> 00:07:00,610
or even when using some of them in your

00:06:58,210 --> 00:07:04,210
own code or even developing your own

00:07:00,610 --> 00:07:05,440
framework okay and you cannot be

00:07:04,210 --> 00:07:07,720
interested in developing your own

00:07:05,440 --> 00:07:10,120
framework but it is a very nice exercise

00:07:07,720 --> 00:07:13,330
to do actually and in this resource you

00:07:10,120 --> 00:07:14,980
can see how could you do it I I did it

00:07:13,330 --> 00:07:17,170
and it's very interesting because you do

00:07:14,980 --> 00:07:18,880
actually learn what a framework has

00:07:17,170 --> 00:07:22,620
which are the different parts it's

00:07:18,880 --> 00:07:25,780
really really good so actually in this

00:07:22,620 --> 00:07:27,730
repository what we did was to put

00:07:25,780 --> 00:07:30,070
together the five components that we are

00:07:27,730 --> 00:07:31,990
going to see now so if you want to check

00:07:30,070 --> 00:07:34,480
the whole code of some examples that

00:07:31,990 --> 00:07:36,310
going I'm going to show you and mostly

00:07:34,480 --> 00:07:38,770
if you want to see how to use those

00:07:36,310 --> 00:07:42,190
components isolate links you can check

00:07:38,770 --> 00:07:46,080
that repository all right let's see what

00:07:42,190 --> 00:07:49,630
do those guys actually do let's see

00:07:46,080 --> 00:07:51,760
first of them is HDPE foundation this

00:07:49,630 --> 00:07:56,010
one is going to be the foundation of our

00:07:51,760 --> 00:07:59,050
API and it's going to provide a um

00:07:56,010 --> 00:08:02,350
object-oriented lawyer for the HTTP

00:07:59,050 --> 00:08:05,440
specification what does it mean as you

00:08:02,350 --> 00:08:07,900
know in PHP the request is represented

00:08:05,440 --> 00:08:09,880
by a few global variables and the

00:08:07,900 --> 00:08:12,940
response is generated by some function

00:08:09,880 --> 00:08:14,890
so with this component this component is

00:08:12,940 --> 00:08:17,950
going to replace those variables and

00:08:14,890 --> 00:08:21,610
those functions with two nice objects

00:08:17,950 --> 00:08:25,360
read response and request okay let's see

00:08:21,610 --> 00:08:28,540
how are they the requests we can create

00:08:25,360 --> 00:08:32,110
one of those using create from from

00:08:28,540 --> 00:08:34,840
global this is similar to doing actually

00:08:32,110 --> 00:08:38,860
this we are just creating a request

00:08:34,840 --> 00:08:43,000
object based on our current PHP global

00:08:38,860 --> 00:08:44,920
variables all right the response for

00:08:43,000 --> 00:08:47,800
creating a response we have to pass

00:08:44,920 --> 00:08:50,320
three arguments the content the status

00:08:47,800 --> 00:08:52,860
code and an array of headers which is

00:08:50,320 --> 00:08:56,120
basically what we will need in our

00:08:52,860 --> 00:08:58,800
to send to a show in our API all right

00:08:56,120 --> 00:09:01,350
we have this point and request how can

00:08:58,800 --> 00:09:03,720
we create a post endpoint with that the

00:09:01,350 --> 00:09:05,550
requirement is very simple whenever we

00:09:03,720 --> 00:09:08,910
send a post request there we need to

00:09:05,550 --> 00:09:11,220
receive a 201 status code in the

00:09:08,910 --> 00:09:14,339
response okay let's do that we have the

00:09:11,220 --> 00:09:17,730
request we created from global and they

00:09:14,339 --> 00:09:19,320
call the content we do whatever we want

00:09:17,730 --> 00:09:21,630
to do in there with the data

00:09:19,320 --> 00:09:24,240
Persis whatever this is not the

00:09:21,630 --> 00:09:26,730
interesting thing now and then we build

00:09:24,240 --> 00:09:29,070
a response where we can very easily put

00:09:26,730 --> 00:09:31,079
the status code a disturb you could and

00:09:29,070 --> 00:09:35,279
here to headers content type our

00:09:31,079 --> 00:09:37,740
location okay right if you want a

00:09:35,279 --> 00:09:40,649
shortcut you can also use JSON response

00:09:37,740 --> 00:09:42,660
that will set the content type and also

00:09:40,649 --> 00:09:44,640
encode to Jason you will be saving one

00:09:42,660 --> 00:09:48,290
more line if even shorter with only a

00:09:44,640 --> 00:09:52,529
few lines you already have your endpoint

00:09:48,290 --> 00:09:54,839
what about peers r7 maybe some of you

00:09:52,529 --> 00:09:57,209
have heard of this this is a standard

00:09:54,839 --> 00:09:59,550
that will approve few years ago what

00:09:57,209 --> 00:10:03,480
happens with this what is it about the

00:09:59,550 --> 00:10:07,260
HTTP foundation has helped in the way of

00:10:03,480 --> 00:10:10,380
standardizing this object-oriented liar

00:10:07,260 --> 00:10:12,660
in the PHP community but since this

00:10:10,380 --> 00:10:14,970
standard was approved this is a step

00:10:12,660 --> 00:10:18,420
farther in this direction so very

00:10:14,970 --> 00:10:21,029
lightly 324 that which we release in

00:10:18,420 --> 00:10:24,029
next November it will embrace this

00:10:21,029 --> 00:10:27,360
standard until then you can actually

00:10:24,029 --> 00:10:29,730
transform your HTTP Foundation objects

00:10:27,360 --> 00:10:33,269
into objects that implement this

00:10:29,730 --> 00:10:35,699
standard in producing this symphony

00:10:33,269 --> 00:10:38,940
bridge okay it's quite simple you think

00:10:35,699 --> 00:10:41,160
that your objects will be using this

00:10:38,940 --> 00:10:44,459
standard and why would you want to do

00:10:41,160 --> 00:10:47,310
this well if becoming more standardized

00:10:44,459 --> 00:10:49,170
is not enough for you but by the weight

00:10:47,310 --> 00:10:51,390
of a link here to read more about this

00:10:49,170 --> 00:10:53,970
if you want if this is not enough for

00:10:51,390 --> 00:10:56,010
you you can for example use middle words

00:10:53,970 --> 00:10:58,640
which you are using is a standard which

00:10:56,010 --> 00:11:01,070
are basically very similar the layers

00:10:58,640 --> 00:11:03,020
implementing some functionality okay

00:11:01,070 --> 00:11:06,350
for example authentication or whatever

00:11:03,020 --> 00:11:08,000
so everything that is moving towards

00:11:06,350 --> 00:11:10,010
reducing more code

00:11:08,000 --> 00:11:12,110
don't doing the same thing many times is

00:11:10,010 --> 00:11:14,540
good for you so that's why I wanted to

00:11:12,110 --> 00:11:17,450
mentioned it okay let's move into the

00:11:14,540 --> 00:11:19,100
next one serialize the cellulite sir is

00:11:17,450 --> 00:11:22,400
going to be one of our best friends

00:11:19,100 --> 00:11:25,580
because she's going to help us creating

00:11:22,400 --> 00:11:28,490
the exact exact representations that we

00:11:25,580 --> 00:11:32,000
want in our API all this thing is about

00:11:28,490 --> 00:11:33,800
creating representations so with the

00:11:32,000 --> 00:11:35,930
steriliser you are going to be able to

00:11:33,800 --> 00:11:39,320
create representations from your objects

00:11:35,930 --> 00:11:42,110
and the other way around how if we

00:11:39,320 --> 00:11:44,390
didn't have this one we should do

00:11:42,110 --> 00:11:46,910
something like this if we want to update

00:11:44,390 --> 00:11:49,190
our object from the request we will have

00:11:46,910 --> 00:11:51,170
to type something like this load so for

00:11:49,190 --> 00:11:54,440
each property we need to type some code

00:11:51,170 --> 00:11:57,470
and it's something that looks repetitive

00:11:54,440 --> 00:11:58,130
and tedious to do in the opposite

00:11:57,470 --> 00:11:59,660
direction

00:11:58,130 --> 00:12:02,720
if similar would be something like this

00:11:59,660 --> 00:12:05,780
we will use our object to produce a

00:12:02,720 --> 00:12:07,340
response okay but this is all things

00:12:05,780 --> 00:12:09,200
that we don't like to do because here we

00:12:07,340 --> 00:12:12,440
have three properties but what if we

00:12:09,200 --> 00:12:14,270
have like 50 or something we need

00:12:12,440 --> 00:12:16,630
something easier cleaner

00:12:14,270 --> 00:12:19,220
so the serializer is helping with this

00:12:16,630 --> 00:12:21,380
instead of having to write all these you

00:12:19,220 --> 00:12:25,160
just need to call it please stay alive

00:12:21,380 --> 00:12:27,410
and this recipe come back in our GL

00:12:25,160 --> 00:12:29,390
object into a JSON response all right

00:12:27,410 --> 00:12:32,090
and in the opposite direction

00:12:29,390 --> 00:12:34,670
visualizing you can simply do something

00:12:32,090 --> 00:12:38,330
similar and hence analyzer please

00:12:34,670 --> 00:12:41,840
visualize this this content into my

00:12:38,330 --> 00:12:44,990
recipe class it comes from a JSON format

00:12:41,840 --> 00:12:48,170
alright just one line is instead of lots

00:12:44,990 --> 00:12:50,570
of them okay the schema of the

00:12:48,170 --> 00:12:52,280
steriliser looks like this it may seem a

00:12:50,570 --> 00:12:55,130
bit complicated and at the beginning but

00:12:52,280 --> 00:12:57,710
it is not and you are basically yes

00:12:55,130 --> 00:12:58,460
turning objects into some format and the

00:12:57,710 --> 00:13:00,290
other way around

00:12:58,460 --> 00:13:01,940
you can see that is there is something

00:13:00,290 --> 00:13:03,710
intermediate in there this all right

00:13:01,940 --> 00:13:06,830
this is only because we are splitting

00:13:03,710 --> 00:13:09,380
the task into we have the encoders that

00:13:06,830 --> 00:13:12,110
take care of transformations between

00:13:09,380 --> 00:13:13,310
arrows and Jason for example and then we

00:13:12,110 --> 00:13:14,750
have the normalizer

00:13:13,310 --> 00:13:17,000
that take care of this

00:13:14,750 --> 00:13:19,370
of transforming between allies and

00:13:17,000 --> 00:13:22,910
objects usually the heavy work is done

00:13:19,370 --> 00:13:26,180
by the normalizer okay so before being

00:13:22,910 --> 00:13:28,970
able to use it we actually need to do

00:13:26,180 --> 00:13:31,069
some setup we have to say which encoders

00:13:28,970 --> 00:13:33,050
are will introduced and which normalizes

00:13:31,069 --> 00:13:35,240
in this case we are studying a we are

00:13:33,050 --> 00:13:38,079
going to use XML and later encoder and

00:13:35,240 --> 00:13:40,490
we are going to use object normalizer of

00:13:38,079 --> 00:13:43,129
denominator is the most powerful

00:13:40,490 --> 00:13:45,199
normalizer but you have others at the

00:13:43,129 --> 00:13:47,959
other you can check the documentation

00:13:45,199 --> 00:13:51,439
for that instead of explaining things

00:13:47,959 --> 00:13:54,290
that you can check there I want to focus

00:13:51,439 --> 00:13:57,709
in the main idea of all these the main

00:13:54,290 --> 00:13:59,720
idea is your representation that will

00:13:57,709 --> 00:14:01,459
need and they are not the same thing

00:13:59,720 --> 00:14:03,680
that you have in your database you

00:14:01,459 --> 00:14:06,459
actually need to make sure to show in

00:14:03,680 --> 00:14:09,319
your API exactly what you want to show

00:14:06,459 --> 00:14:11,689
that representation that you really need

00:14:09,319 --> 00:14:14,509
are useful for you for example you might

00:14:11,689 --> 00:14:16,790
think that you have this user okay but

00:14:14,509 --> 00:14:19,279
maybe this is in your database but maybe

00:14:16,790 --> 00:14:21,949
you want a dis property it's called user

00:14:19,279 --> 00:14:24,379
name and maybe you don't want to show

00:14:21,949 --> 00:14:26,449
the password you want the email to be

00:14:24,379 --> 00:14:29,569
shown in the profile but not in the list

00:14:26,449 --> 00:14:31,850
you perhaps you can going to add a

00:14:29,569 --> 00:14:33,769
prefix there maybe there are some

00:14:31,850 --> 00:14:35,990
properties that you want to show what

00:14:33,769 --> 00:14:38,329
version of the API but not in another

00:14:35,990 --> 00:14:40,990
version or do you have things like this

00:14:38,329 --> 00:14:44,600
and you want to turn them into normal

00:14:40,990 --> 00:14:46,759
other properties okay for doing all

00:14:44,600 --> 00:14:51,110
these the sterilizer is going to help

00:14:46,759 --> 00:14:54,259
cap for it brings a set of tools for

00:14:51,110 --> 00:14:57,620
example these two annotations max depth

00:14:54,259 --> 00:15:00,110
must step is simply saying hey please

00:14:57,620 --> 00:15:02,959
serialize but just do it until one point

00:15:00,110 --> 00:15:05,480
second level or third level because if

00:15:02,959 --> 00:15:06,920
you have one object that is related to

00:15:05,480 --> 00:15:09,019
another one another one another one

00:15:06,920 --> 00:15:11,389
maybe you don't want to realize all that

00:15:09,019 --> 00:15:13,269
you only want the first two levels this

00:15:11,389 --> 00:15:15,670
is very useful when you are working with

00:15:13,269 --> 00:15:18,980
large trees and also when you have

00:15:15,670 --> 00:15:20,839
circular references okay there is

00:15:18,980 --> 00:15:24,110
another interesting annotation here is

00:15:20,839 --> 00:15:27,200
are the group groups are useful to

00:15:24,110 --> 00:15:30,139
serialize a specific set of prop

00:15:27,200 --> 00:15:32,480
let's see it with an example in your end

00:15:30,139 --> 00:15:35,930
we are going to create that gas endpoint

00:15:32,480 --> 00:15:38,839
but we want it to we want to receive

00:15:35,930 --> 00:15:41,720
only this property's name and service so

00:15:38,839 --> 00:15:44,120
in our entities we are going to set the

00:15:41,720 --> 00:15:47,029
group setting okay all of them have the

00:15:44,120 --> 00:15:50,120
group detail but only some of them have

00:15:47,029 --> 00:15:52,339
the group overview alright so when we

00:15:50,120 --> 00:15:54,199
realize passing the group overview we

00:15:52,339 --> 00:15:56,600
are going to get a representation only

00:15:54,199 --> 00:16:00,620
with those properties this is really

00:15:56,600 --> 00:16:02,480
really useful all right another thing

00:16:00,620 --> 00:16:04,449
that you are going to do very often when

00:16:02,480 --> 00:16:07,670
working with the cellulite sir is to

00:16:04,449 --> 00:16:09,470
write your own normalizes okay remember

00:16:07,670 --> 00:16:12,560
that this is the part that the deals

00:16:09,470 --> 00:16:15,019
between the object and the RS for

00:16:12,560 --> 00:16:16,880
example a very simple example is when

00:16:15,019 --> 00:16:19,430
you want to serialize attributes with

00:16:16,880 --> 00:16:20,959
different name in this case you will

00:16:19,430 --> 00:16:23,060
have to write something like this this

00:16:20,959 --> 00:16:25,279
is an named converter interface that has

00:16:23,060 --> 00:16:28,070
two methods normalized and be normalized

00:16:25,279 --> 00:16:30,019
when you know my eyes you are going to

00:16:28,070 --> 00:16:32,510
add a prefix and please when you do

00:16:30,019 --> 00:16:34,190
normalize remove this press traffics as

00:16:32,510 --> 00:16:37,610
you can imagine with this you can do

00:16:34,190 --> 00:16:39,640
whatever you want in this changing what

00:16:37,610 --> 00:16:42,010
you have in your presentation all right

00:16:39,640 --> 00:16:45,140
that works about the steriliser

00:16:42,010 --> 00:16:47,899
validators our third best friend because

00:16:45,140 --> 00:16:50,329
we have to make sure that what ever goes

00:16:47,899 --> 00:16:53,420
to our database is meeting some

00:16:50,329 --> 00:16:55,970
constraint we cannot leave that work to

00:16:53,420 --> 00:16:57,740
the database we have to do it before and

00:16:55,970 --> 00:17:00,410
the validator is the one that is going

00:16:57,740 --> 00:17:04,610
to help us with this okay provides

00:17:00,410 --> 00:17:06,169
provides tools for this task in this

00:17:04,610 --> 00:17:09,079
very simple example that is only

00:17:06,169 --> 00:17:11,179
validating a string you can see what do

00:17:09,079 --> 00:17:13,579
you have in there like you see there are

00:17:11,179 --> 00:17:16,760
constraints which are simply the rope

00:17:13,579 --> 00:17:18,620
formulation where you are say I want

00:17:16,760 --> 00:17:21,199
this to happen and then you have the

00:17:18,620 --> 00:17:23,900
validators that this work the actual

00:17:21,199 --> 00:17:26,299
logic is if at some point you need to

00:17:23,900 --> 00:17:28,069
write around your own constraints and

00:17:26,299 --> 00:17:31,669
validators you will have to put your

00:17:28,069 --> 00:17:33,620
wallet in there okay but what happens

00:17:31,669 --> 00:17:36,049
when we want to validate more complex

00:17:33,620 --> 00:17:39,440
things like objects with each which is

00:17:36,049 --> 00:17:40,440
our case so then the important thing is

00:17:39,440 --> 00:17:43,830
that the validate

00:17:40,440 --> 00:17:46,740
needs to know which constraints apply to

00:17:43,830 --> 00:17:48,900
each of the properties of the object

00:17:46,740 --> 00:17:52,320
okay you can do that with annotations

00:17:48,900 --> 00:17:55,200
like here which I find very handy but if

00:17:52,320 --> 00:17:57,750
you prefer you could do it with yml XML

00:17:55,200 --> 00:18:00,030
whatever you want the validator

00:17:57,750 --> 00:18:02,040
component comes with 50 something

00:18:00,030 --> 00:18:05,910
constraints and of course you can write

00:18:02,040 --> 00:18:09,210
your own if you want all right which is

00:18:05,910 --> 00:18:11,610
also really important here if the

00:18:09,210 --> 00:18:13,350
validator validation is not passing if

00:18:11,610 --> 00:18:15,690
it is the if the constraints are not

00:18:13,350 --> 00:18:19,680
being met then you have to return some

00:18:15,690 --> 00:18:22,260
errors in an IP is as important to have

00:18:19,680 --> 00:18:25,170
a good validation as having a good

00:18:22,260 --> 00:18:26,580
handling of the errors this is extremely

00:18:25,170 --> 00:18:29,070
important because otherwise they

00:18:26,580 --> 00:18:31,230
consumers of your API can get very angry

00:18:29,070 --> 00:18:33,690
about this we will talk a bit more about

00:18:31,230 --> 00:18:37,110
this later now we are going to review

00:18:33,690 --> 00:18:38,970
the form component you might think why I

00:18:37,110 --> 00:18:40,410
was going to use a foam component if

00:18:38,970 --> 00:18:42,060
there are no phones in here

00:18:40,410 --> 00:18:45,780
well the thing is that dealing with the

00:18:42,060 --> 00:18:48,120
data that comes through an HTML form and

00:18:45,780 --> 00:18:51,120
dealing with the data that comes through

00:18:48,120 --> 00:18:53,610
your API are two quite similar things we

00:18:51,120 --> 00:18:56,790
are going to use the form components to

00:18:53,610 --> 00:18:59,400
this realize the data and validate okay

00:18:56,790 --> 00:19:01,590
using this component has a few

00:18:59,400 --> 00:19:04,470
advantages it has a very powerful

00:19:01,590 --> 00:19:07,560
sterilizer and also if you are not only

00:19:04,470 --> 00:19:10,080
building an API but also having actual

00:19:07,560 --> 00:19:12,930
forms somewhere you are going to save

00:19:10,080 --> 00:19:13,920
quite a bit of work reducing that code

00:19:12,930 --> 00:19:16,740
all right

00:19:13,920 --> 00:19:20,340
so it provides powerful validation and

00:19:16,740 --> 00:19:22,440
thread serialization okay in this

00:19:20,340 --> 00:19:25,370
resource you can learn quite a bit about

00:19:22,440 --> 00:19:28,980
this actually this whole course of

00:19:25,370 --> 00:19:32,370
kindly universities for investment work

00:19:28,980 --> 00:19:35,640
and what we are going to do with our

00:19:32,370 --> 00:19:38,880
firm component is to create a good

00:19:35,640 --> 00:19:43,980
endpoint we want simply that it returns

00:19:38,880 --> 00:19:45,720
a 200 code alright so we'll do something

00:19:43,980 --> 00:19:47,730
like this first of all I want to point

00:19:45,720 --> 00:19:49,650
out something if you are using the

00:19:47,730 --> 00:19:52,620
components without the framework of

00:19:49,650 --> 00:19:53,650
course you will have to do more work you

00:19:52,620 --> 00:19:55,780
will have to write

00:19:53,650 --> 00:19:57,820
of things for example things like this

00:19:55,780 --> 00:19:59,710
you will have to create your form

00:19:57,820 --> 00:20:02,350
factory adding the extension that

00:19:59,710 --> 00:20:05,530
validate and so on all these details you

00:20:02,350 --> 00:20:08,080
can check them out in our and repository

00:20:05,530 --> 00:20:10,600
because here I want to focus in what is

00:20:08,080 --> 00:20:14,080
most important phone from the components

00:20:10,600 --> 00:20:16,270
in this case we are getting the request

00:20:14,080 --> 00:20:20,290
the content and we simply have to build

00:20:16,270 --> 00:20:22,900
our form and bind the data to it so

00:20:20,290 --> 00:20:24,310
simply with that you can now check if

00:20:22,900 --> 00:20:26,170
the form is valid or not

00:20:24,310 --> 00:20:29,140
if it's valid you will return the

00:20:26,170 --> 00:20:31,180
successful response and otherwise some

00:20:29,140 --> 00:20:33,190
errors for example these things

00:20:31,180 --> 00:20:36,400
realizing the form to return the error

00:20:33,190 --> 00:20:37,900
also needs some work from your side is

00:20:36,400 --> 00:20:41,620
another thing that you can check in the

00:20:37,900 --> 00:20:45,670
full example right now that we have

00:20:41,620 --> 00:20:47,620
created a put endpoint to an updated

00:20:45,670 --> 00:20:49,360
resource it's a good moment to ask this

00:20:47,620 --> 00:20:51,610
question because I didn't want to review

00:20:49,360 --> 00:20:53,710
all the race dress theory but there are

00:20:51,610 --> 00:20:55,870
a few questions that this view is good

00:20:53,710 --> 00:20:57,730
to review from time to time so it's

00:20:55,870 --> 00:20:59,680
actually opposed to create an output to

00:20:57,730 --> 00:21:02,680
update well that's the common knowledge

00:20:59,680 --> 00:21:05,860
okay but it's not true not true but if

00:21:02,680 --> 00:21:06,700
you follow it you will be kind of ok

00:21:05,860 --> 00:21:10,570
right

00:21:06,700 --> 00:21:12,700
but the whole truth is and you have to

00:21:10,570 --> 00:21:15,010
use put if those two are true the

00:21:12,700 --> 00:21:17,170
operation is important which means it

00:21:15,010 --> 00:21:19,450
doesn't matter if you perform perform it

00:21:17,170 --> 00:21:22,690
once or several times it will have the

00:21:19,450 --> 00:21:24,340
same result and second the URI is the

00:21:22,690 --> 00:21:27,010
address of the resource that you are

00:21:24,340 --> 00:21:29,770
updating or creating if those two are

00:21:27,010 --> 00:21:32,170
true is put otherwise it post actually

00:21:29,770 --> 00:21:34,210
this is not one of the controversial

00:21:32,170 --> 00:21:35,920
areas that I was mentioning before which

00:21:34,210 --> 00:21:37,300
is quite which is quite clear it's only

00:21:35,920 --> 00:21:40,260
that at the beginning is a bit difficult

00:21:37,300 --> 00:21:42,820
to remember it for some reason and

00:21:40,260 --> 00:21:44,560
second questions a bit related to this

00:21:42,820 --> 00:21:46,960
do I have to return the resource all

00:21:44,560 --> 00:21:49,450
right well many say that you don't have

00:21:46,960 --> 00:21:53,110
to but some clients will assume that you

00:21:49,450 --> 00:21:55,330
will do it so it depends depends on who

00:21:53,110 --> 00:21:58,060
are you writing your API for it's a bit

00:21:55,330 --> 00:22:01,780
up to you but as always to sum them be

00:21:58,060 --> 00:22:04,240
consistent with your choices ok final

00:22:01,780 --> 00:22:05,710
component guard God is going to help us

00:22:04,240 --> 00:22:07,480
with the authentication

00:22:05,710 --> 00:22:09,340
actually in Symphony who

00:22:07,480 --> 00:22:11,740
for more complex component which is

00:22:09,340 --> 00:22:14,680
called security it's really big it's

00:22:11,740 --> 00:22:17,380
powerful it's very flexible but it's

00:22:14,680 --> 00:22:19,660
really a bit too complex so they decided

00:22:17,380 --> 00:22:23,440
to create this guard component which is

00:22:19,660 --> 00:22:26,260
kind of quite new and to simplify this

00:22:23,440 --> 00:22:28,420
security they have simplified it so much

00:22:26,260 --> 00:22:31,210
that actually you only have to implement

00:22:28,420 --> 00:22:34,600
this interface guard authentication

00:22:31,210 --> 00:22:36,340
interface it has seven methods as you

00:22:34,600 --> 00:22:38,620
can see here they are very thin and

00:22:36,340 --> 00:22:40,390
simple methods if you check out the

00:22:38,620 --> 00:22:42,730
documentation you will see that they are

00:22:40,390 --> 00:22:46,300
very easy to understand and implement of

00:22:42,730 --> 00:22:48,360
course having this you also have them to

00:22:46,300 --> 00:22:51,910
implement some mechanism for

00:22:48,360 --> 00:22:54,070
authentication JSON web tokens Wow

00:22:51,910 --> 00:22:56,290
whatever you want this is not saving you

00:22:54,070 --> 00:22:59,580
from that but this is like making the

00:22:56,290 --> 00:23:02,560
work if you're preparing you for 30 okay

00:22:59,580 --> 00:23:04,960
at this point with these five components

00:23:02,560 --> 00:23:07,390
when you arrive here what you find out

00:23:04,960 --> 00:23:09,730
this well and you would probably feel

00:23:07,390 --> 00:23:11,740
that you need more things you have been

00:23:09,730 --> 00:23:14,830
meaning more things that you usually

00:23:11,740 --> 00:23:17,470
have in a real framework like routine

00:23:14,830 --> 00:23:21,460
even dispatcher and all these things so

00:23:17,470 --> 00:23:24,010
maybe it's a good time to ask if what

00:23:21,460 --> 00:23:25,900
did we use the whole framework so now

00:23:24,010 --> 00:23:27,940
I'm going to show you which other things

00:23:25,900 --> 00:23:32,440
would you have if you decide to use the

00:23:27,940 --> 00:23:36,220
whole framework let's see how what do we

00:23:32,440 --> 00:23:38,710
have with them they're favored uses all

00:23:36,220 --> 00:23:41,140
these components and a few more and the

00:23:38,710 --> 00:23:43,150
thing is you already know a component if

00:23:41,140 --> 00:23:46,210
I'm independent library but you see free

00:23:43,150 --> 00:23:48,700
you also have bundles bundles are tied

00:23:46,210 --> 00:23:52,120
to the framework right not like

00:23:48,700 --> 00:23:54,310
component usually or some tile or often

00:23:52,120 --> 00:23:57,400
you have the library last a bundle that

00:23:54,310 --> 00:23:59,560
is basically integrating the library in

00:23:57,400 --> 00:24:02,470
the framework so now I'm going to show

00:23:59,560 --> 00:24:04,120
you a few bundles that can be useful for

00:24:02,470 --> 00:24:07,000
you at the end if you use the whole

00:24:04,120 --> 00:24:07,690
framework first of them is this JMS

00:24:07,000 --> 00:24:10,090
réaliser

00:24:07,690 --> 00:24:11,940
this one is an alternative to the

00:24:10,090 --> 00:24:15,310
sterilizers that we have already seen

00:24:11,940 --> 00:24:17,320
and I cannot tell you which one is best

00:24:15,310 --> 00:24:19,540
because both are very very good but they

00:24:17,320 --> 00:24:21,309
are a bit different this one is perhaps

00:24:19,540 --> 00:24:24,009
a bit easier to

00:24:21,309 --> 00:24:27,340
is to set up and start working with with

00:24:24,009 --> 00:24:29,289
it it comes with lots of annotations and

00:24:27,340 --> 00:24:31,509
then there are a lot of things that you

00:24:29,289 --> 00:24:33,549
can do very easily a lot of the standard

00:24:31,509 --> 00:24:35,860
things that are very quick to do the

00:24:33,549 --> 00:24:38,559
other one the symphony materializer is

00:24:35,860 --> 00:24:41,399
more about and very often writing your

00:24:38,559 --> 00:24:43,749
own normalizes which also gives you more

00:24:41,399 --> 00:24:46,539
flexibility then it depends a bit on

00:24:43,749 --> 00:24:48,759
what you want to do or what are you

00:24:46,539 --> 00:24:51,070
feeling more comfortable with but both

00:24:48,759 --> 00:24:54,129
are very nice choices some cool things

00:24:51,070 --> 00:24:55,960
that this one has three exclusion

00:24:54,129 --> 00:24:58,029
technologies apart from groups you can

00:24:55,960 --> 00:25:00,970
exclude some strategies with annotations

00:24:58,029 --> 00:25:02,710
to versions where you can say these

00:25:00,970 --> 00:25:04,960
properties are in this version of the

00:25:02,710 --> 00:25:08,590
API these are not you can have bigger

00:25:04,960 --> 00:25:10,629
problems that provide extra flexibility

00:25:08,590 --> 00:25:12,639
if you work with XML it's very

00:25:10,629 --> 00:25:13,200
configurable so you have a lot of cool

00:25:12,639 --> 00:25:16,240
things

00:25:13,200 --> 00:25:18,639
next bangle is the for stress bundle the

00:25:16,240 --> 00:25:21,820
fourth bundle is not one tool actually

00:25:18,639 --> 00:25:25,629
it's more like a tool box so it provides

00:25:21,820 --> 00:25:28,299
a set of tools that are useful for

00:25:25,629 --> 00:25:30,970
building your API I chose some of them

00:25:28,299 --> 00:25:33,580
these are some of them but basically it

00:25:30,970 --> 00:25:35,590
helps a lot when you have to deal with

00:25:33,580 --> 00:25:39,129
different representations of the results

00:25:35,590 --> 00:25:40,960
it has a body request ago there you have

00:25:39,129 --> 00:25:43,480
it has a listener that's performed

00:25:40,960 --> 00:25:46,179
constant value negotiation deciding

00:25:43,480 --> 00:25:48,759
which formats is the appropriate one so

00:25:46,179 --> 00:25:50,289
those are a set of tools that if you

00:25:48,759 --> 00:25:52,299
don't know them you can live without

00:25:50,289 --> 00:25:54,759
them but actually this when you start

00:25:52,299 --> 00:25:58,240
using this you cannot picture yourself

00:25:54,759 --> 00:26:00,070
building an API without it somehow so if

00:25:58,240 --> 00:26:02,440
this works as well to have a look at it

00:26:00,070 --> 00:26:05,409
the next one is going to allow us to

00:26:02,440 --> 00:26:09,029
have JSON web token authentication we

00:26:05,409 --> 00:26:13,019
can use this together with the guard and

00:26:09,029 --> 00:26:15,820
component what that we already have seen

00:26:13,019 --> 00:26:17,830
is based on a couple of libraries that

00:26:15,820 --> 00:26:19,389
of course you could use without the

00:26:17,830 --> 00:26:21,820
bundle if you are not using therefore

00:26:19,389 --> 00:26:23,860
the whole framework and it was is this

00:26:21,820 --> 00:26:26,110
about this authentication in case you

00:26:23,860 --> 00:26:28,269
don't know well it's basically that you

00:26:26,110 --> 00:26:30,850
send some credentials username and

00:26:28,269 --> 00:26:33,190
password to an endpoint that you have

00:26:30,850 --> 00:26:34,909
configured in your security okay and

00:26:33,190 --> 00:26:37,279
then with that you will

00:26:34,909 --> 00:26:40,070
if a token and from that point using

00:26:37,279 --> 00:26:42,529
that token you will be able to send

00:26:40,070 --> 00:26:46,399
request okay it's as simple as that

00:26:42,529 --> 00:26:48,409
it's a very simple way to have awesome

00:26:46,399 --> 00:26:51,200
to to be authenticated okay

00:26:48,409 --> 00:26:53,679
which choice you have you could go for a

00:26:51,200 --> 00:26:56,809
while in my personal experience is that

00:26:53,679 --> 00:26:59,299
make sense if you have a good reason for

00:26:56,809 --> 00:27:02,929
having allowed in your project because

00:26:59,299 --> 00:27:05,090
it's quite a bit more complex many times

00:27:02,929 --> 00:27:09,109
with this is more than enough for your

00:27:05,090 --> 00:27:11,960
abs okay this Bandhan is going to allow

00:27:09,109 --> 00:27:16,179
us to reach level 3 okay

00:27:11,960 --> 00:27:19,309
level 3 is about returning the link that

00:27:16,179 --> 00:27:22,429
makes possible to discover out of this

00:27:19,309 --> 00:27:24,919
cover your abs alright in case that you

00:27:22,429 --> 00:27:26,299
want to do this and this bundle is going

00:27:24,919 --> 00:27:30,159
to help a lot because you are going to

00:27:26,299 --> 00:27:32,989
return instead of just this thing that

00:27:30,159 --> 00:27:35,450
properly alright and you are going to

00:27:32,989 --> 00:27:37,070
return the proper link in a very simple

00:27:35,450 --> 00:27:40,940
way because you have had an annotation

00:27:37,070 --> 00:27:43,220
that is taking care to generate the

00:27:40,940 --> 00:27:45,769
proper route so you don't have to cause

00:27:43,220 --> 00:27:49,129
hard code euros because you will get the

00:27:45,769 --> 00:27:52,369
proper ones with you ok potentially

00:27:49,129 --> 00:27:55,669
allows you to risk level see do we want

00:27:52,369 --> 00:27:58,989
to reach level 3 well theoretically if

00:27:55,669 --> 00:28:01,450
you don't do it your API is not rushing

00:27:58,989 --> 00:28:04,909
in the real world out there

00:28:01,450 --> 00:28:07,460
not so many IPS are implementing it so

00:28:04,909 --> 00:28:10,009
again it depends on what you need and

00:28:07,460 --> 00:28:12,859
what you think is best for your apical

00:28:10,009 --> 00:28:16,489
humours and so on you have to decide by

00:28:12,859 --> 00:28:18,349
yourself okay and the last at bangle I

00:28:16,489 --> 00:28:20,989
want to man to mention is the snail mail

00:28:18,349 --> 00:28:23,359
that is going to help with documenting

00:28:20,989 --> 00:28:26,090
while you are coding you will be writing

00:28:23,359 --> 00:28:28,580
some annotations that will will produce

00:28:26,090 --> 00:28:30,499
a very nice documentation why is this

00:28:28,580 --> 00:28:32,179
good because if you leave the

00:28:30,499 --> 00:28:33,919
documentation for later you probably

00:28:32,179 --> 00:28:35,599
will never do it but if you can do it

00:28:33,919 --> 00:28:38,119
while you are calling it much better

00:28:35,599 --> 00:28:41,330
much better it uses a lot in stress

00:28:38,119 --> 00:28:45,499
introspection that means it is taking

00:28:41,330 --> 00:28:47,450
information from the code to output the

00:28:45,499 --> 00:28:48,530
documentation it looks like this there

00:28:47,450 --> 00:28:51,080
is an annotation

00:28:48,530 --> 00:28:54,110
you put there some tags and it produces

00:28:51,080 --> 00:28:56,750
something that looks like this okay this

00:28:54,110 --> 00:28:59,000
data has been just taken from the code

00:28:56,750 --> 00:29:02,900
by it's easy to keep your documentation

00:28:59,000 --> 00:29:04,940
updated with something like alright that

00:29:02,900 --> 00:29:07,910
was that were the tools I wanted to show

00:29:04,940 --> 00:29:10,280
you that you somewhere components and

00:29:07,910 --> 00:29:13,550
other wear bangles okay and now I want

00:29:10,280 --> 00:29:16,160
to take a moment to we talked about

00:29:13,550 --> 00:29:17,720
testing what because because testing is

00:29:16,160 --> 00:29:20,510
extremely important when you are

00:29:17,720 --> 00:29:22,400
building an API because you cannot be

00:29:20,510 --> 00:29:24,740
there in your browsers trying it you

00:29:22,400 --> 00:29:26,810
actually need some tools that make very

00:29:24,740 --> 00:29:28,160
comfortable to check out if what you are

00:29:26,810 --> 00:29:30,800
doing is right or not

00:29:28,160 --> 00:29:33,080
if the in the case in which this you

00:29:30,800 --> 00:29:34,310
cannot avoid you need really need to do

00:29:33,080 --> 00:29:36,460
it and you really need to have an

00:29:34,310 --> 00:29:40,100
environment you feel comfortable with

00:29:36,460 --> 00:29:42,140
so which things kinda do

00:29:40,100 --> 00:29:45,440
you can use postman is the first thing

00:29:42,140 --> 00:29:47,450
you can use this is okay if you want to

00:29:45,440 --> 00:29:49,520
show to someone for example hey I have

00:29:47,450 --> 00:29:52,100
this end point they are working check

00:29:49,520 --> 00:29:53,750
them out here but for yourself you

00:29:52,100 --> 00:29:55,730
probably need to set up something but it

00:29:53,750 --> 00:29:57,380
looks like this for yourself you

00:29:55,730 --> 00:29:59,930
probably need to set up something a bit

00:29:57,380 --> 00:30:03,890
more powerful that allow you to code

00:29:59,930 --> 00:30:06,380
some real test tests these tools this

00:30:03,890 --> 00:30:07,880
tool is very very simple to use as well

00:30:06,380 --> 00:30:09,830
gasps well and phpunit

00:30:07,880 --> 00:30:11,840
okay you will be implementing

00:30:09,830 --> 00:30:14,810
implementing functional tests that

00:30:11,840 --> 00:30:18,080
simply lets you check that your API is

00:30:14,810 --> 00:30:19,670
doing what you want it to do one death

00:30:18,080 --> 00:30:21,500
would be simply could be simply like

00:30:19,670 --> 00:30:24,980
this with gaseum you can very easily

00:30:21,500 --> 00:30:28,850
send both requests and then print the

00:30:24,980 --> 00:30:31,040
response that's all so another thing

00:30:28,850 --> 00:30:32,840
that we already mentioned is that it is

00:30:31,040 --> 00:30:36,770
very important to important to handle

00:30:32,840 --> 00:30:38,330
proper properly the errors what do I

00:30:36,770 --> 00:30:40,160
mean with this imagine for example that

00:30:38,330 --> 00:30:43,220
we do will do receiving something like

00:30:40,160 --> 00:30:45,950
this alright so it is worth it to take

00:30:43,220 --> 00:30:49,070
some time to implement some code that

00:30:45,950 --> 00:30:50,840
saves you a lot of time with this for

00:30:49,070 --> 00:30:54,590
example to check if this errors errors

00:30:50,840 --> 00:30:56,900
exist errors children serving error is

00:30:54,590 --> 00:30:59,900
there or not so whenever you find

00:30:56,900 --> 00:31:01,850
yourself taking things like in a not

00:30:59,900 --> 00:31:02,060
very comfortable way it's because you

00:31:01,850 --> 00:31:03,830
are

00:31:02,060 --> 00:31:06,440
missing something that you should have

00:31:03,830 --> 00:31:08,750
cold so take your time to do this thing

00:31:06,440 --> 00:31:11,360
another example at some point you could

00:31:08,750 --> 00:31:13,610
receive an HTML error which you

00:31:11,360 --> 00:31:15,830
shouldn't but it can happen so if you

00:31:13,610 --> 00:31:17,540
see this in your browser it's okay you

00:31:15,830 --> 00:31:20,090
can read it but if you see this in your

00:31:17,540 --> 00:31:22,250
comma lines is really annoying you will

00:31:20,090 --> 00:31:25,220
lose your eyes looking in there so

00:31:22,250 --> 00:31:28,460
perhaps is it worth it to go something

00:31:25,220 --> 00:31:30,830
that can extract this meaningful

00:31:28,460 --> 00:31:33,140
information the title in this case this

00:31:30,830 --> 00:31:36,410
doesn't take so much time and it will

00:31:33,140 --> 00:31:38,300
save you later a lot if you can only see

00:31:36,410 --> 00:31:39,860
the things that you want to see in there

00:31:38,300 --> 00:31:43,070
for example with a synchronic roller you

00:31:39,860 --> 00:31:45,460
can do a simple tool like this okay of

00:31:43,070 --> 00:31:49,610
course it's basic to have an isolated

00:31:45,460 --> 00:31:51,860
database using SQLite it's a good option

00:31:49,610 --> 00:31:54,560
because you lose less time dropping the

00:31:51,860 --> 00:31:57,260
database and so on and related to this

00:31:54,560 --> 00:32:01,370
is extremely extremely important to have

00:31:57,260 --> 00:32:03,950
good fixtures for your tests the good

00:32:01,370 --> 00:32:07,070
real fake data that looks like drill and

00:32:03,950 --> 00:32:09,560
these two tools Allison shakers are very

00:32:07,070 --> 00:32:11,060
useful actually we use those for not

00:32:09,560 --> 00:32:14,300
only for building ideas for every

00:32:11,060 --> 00:32:15,860
project there are two different

00:32:14,300 --> 00:32:19,610
completely different things to show a

00:32:15,860 --> 00:32:21,740
new project with the nice fixtures and

00:32:19,610 --> 00:32:24,260
to show one without it doesn't is not

00:32:21,740 --> 00:32:25,700
the same thing at all so this looks

00:32:24,260 --> 00:32:27,560
something like this you can have fixed

00:32:25,700 --> 00:32:29,960
rates with fixed values because maybe

00:32:27,560 --> 00:32:32,360
you want to check that they are like

00:32:29,960 --> 00:32:35,480
this or just generate a lot with

00:32:32,360 --> 00:32:37,460
generators and you have many Baker's

00:32:35,480 --> 00:32:39,560
providing a lot of generators that will

00:32:37,460 --> 00:32:44,750
be that will actually build very very

00:32:39,560 --> 00:32:47,840
real looking fixture okay finally I'd

00:32:44,750 --> 00:32:50,540
like to review and what a few cases of

00:32:47,840 --> 00:32:53,180
when kind you need a not a P I but

00:32:50,540 --> 00:32:56,060
especially one of course is to serve

00:32:53,180 --> 00:32:59,060
data to your front-end or to your mobile

00:32:56,060 --> 00:33:01,640
apps also when you can you want to

00:32:59,060 --> 00:33:04,670
isolate one functionality we want to

00:33:01,640 --> 00:33:07,850
have an API to communicate with the rest

00:33:04,670 --> 00:33:09,830
of the system but one user we have found

00:33:07,850 --> 00:33:12,110
that is very interesting in the last

00:33:09,830 --> 00:33:15,570
year it's sometimes to undertake a

00:33:12,110 --> 00:33:18,410
mediation okay imagine that you go

00:33:15,570 --> 00:33:21,450
to a company worth they want to

00:33:18,410 --> 00:33:24,870
undertake a migration is changing for

00:33:21,450 --> 00:33:26,910
example our big legacy code from HP to

00:33:24,870 --> 00:33:29,520
something like silver so there are a few

00:33:26,910 --> 00:33:31,830
approaches that you can follow the first

00:33:29,520 --> 00:33:34,530
of them is simply to start coding in the

00:33:31,830 --> 00:33:37,140
new framework and you keep replacing

00:33:34,530 --> 00:33:41,160
solution functionalities one through to

00:33:37,140 --> 00:33:43,410
the time and replacing them with the old

00:33:41,160 --> 00:33:47,280
system okay so the symphony is in front

00:33:43,410 --> 00:33:49,140
of the legacy code and step by step at

00:33:47,280 --> 00:33:51,690
some point you can remove the whole

00:33:49,140 --> 00:33:54,330
thing if you want to learn learn more

00:33:51,690 --> 00:33:56,280
about this in this presentation you have

00:33:54,330 --> 00:33:58,590
quite a lot of information but this

00:33:56,280 --> 00:34:01,230
approach is very good when you have a

00:33:58,590 --> 00:34:03,990
team that knows quite a bit about the

00:34:01,230 --> 00:34:05,790
new technology because like the tough

00:34:03,990 --> 00:34:08,220
part the hard work is going to be done

00:34:05,790 --> 00:34:11,640
in the new language the routine all

00:34:08,220 --> 00:34:13,800
these things so many times actually the

00:34:11,640 --> 00:34:15,240
team is not an expert in the new

00:34:13,800 --> 00:34:17,580
technology of new technology they

00:34:15,240 --> 00:34:19,770
actually want to land it so there is a

00:34:17,580 --> 00:34:22,650
second approach that is more appropriate

00:34:19,770 --> 00:34:25,830
for this case because the team in these

00:34:22,650 --> 00:34:29,490
cases is an expert in the legacy code so

00:34:25,830 --> 00:34:31,500
what can you do in those cases you have

00:34:29,490 --> 00:34:33,510
your legacy code and you can start

00:34:31,500 --> 00:34:35,730
coding the new functionalities in

00:34:33,510 --> 00:34:37,260
symphony I'm building an API with all

00:34:35,730 --> 00:34:40,650
the things that we have reviewed here

00:34:37,260 --> 00:34:43,620
and then the old system we will be

00:34:40,650 --> 00:34:46,980
getting thinner and thinner while it

00:34:43,620 --> 00:34:49,530
replaces the calls to the API right now

00:34:46,980 --> 00:34:51,090
since they expert the team is expert in

00:34:49,530 --> 00:34:53,820
this case in the legacy code this

00:34:51,090 --> 00:34:56,850
approach is sometimes much more useful

00:34:53,820 --> 00:34:59,160
for them okay so it is a case in which

00:34:56,850 --> 00:35:02,670
we can apply all these things regarding

00:34:59,160 --> 00:35:06,960
APL at some point of course you can

00:35:02,670 --> 00:35:09,840
remove the legacy code by from them okay

00:35:06,960 --> 00:35:11,760
yes some final song starts to summarize

00:35:09,840 --> 00:35:14,700
what we have seen without seeing why

00:35:11,760 --> 00:35:17,760
breast and symphony fit so well together

00:35:14,700 --> 00:35:21,660
it's because both of them were built

00:35:17,760 --> 00:35:23,370
thinking of the HTTP specification we

00:35:21,660 --> 00:35:26,070
have seen how a few components can

00:35:23,370 --> 00:35:27,660
provide a lot and how you have more

00:35:26,070 --> 00:35:28,760
stuff if you want to use the whole

00:35:27,660 --> 00:35:30,780
framework

00:35:28,760 --> 00:35:32,820
also we have seen that it is very

00:35:30,780 --> 00:35:34,860
important to set a proper test

00:35:32,820 --> 00:35:37,350
environment but if you want to get only

00:35:34,860 --> 00:35:39,240
one idea that that sometimes that we

00:35:37,350 --> 00:35:42,060
want to do to have only one ideas on

00:35:39,240 --> 00:35:46,020
this and that would be that all this

00:35:42,060 --> 00:35:48,780
thing was building nice API sand doing

00:35:46,020 --> 00:35:50,460
signals right is to sometimes finding a

00:35:48,780 --> 00:35:52,350
good balance between these two okay you

00:35:50,460 --> 00:35:54,780
can fight for your ideas and say how

00:35:52,350 --> 00:35:59,100
would your API is but the real work is

00:35:54,780 --> 00:36:01,110
to become this cool and also boring

00:35:59,100 --> 00:36:03,240
guidance is focusing in being in being

00:36:01,110 --> 00:36:05,910
very very very consistent with his

00:36:03,240 --> 00:36:18,620
decisions in society and that's that's

00:36:05,910 --> 00:36:18,620
all thank you do you have any questions

00:36:28,100 --> 00:36:38,010
okay if they don't have it's okay as

00:36:31,620 --> 00:36:39,780
well one of the other arguments are seen

00:36:38,010 --> 00:36:41,820
with Russ type yards before is about

00:36:39,780 --> 00:36:43,830
versioning and where do you stand on

00:36:41,820 --> 00:36:45,690
that beautiful version strings at the

00:36:43,830 --> 00:36:47,670
start or do you put them as their

00:36:45,690 --> 00:36:49,800
variables afterwards sorry I can't

00:36:47,670 --> 00:36:52,260
understand culture the kind of speaker

00:36:49,800 --> 00:36:53,730
slowly because there is some 19 okay I

00:36:52,260 --> 00:36:57,990
was wondering what your opinion was on

00:36:53,730 --> 00:36:59,820
the versions of rest API so do you

00:36:57,990 --> 00:37:03,570
prefer to put the version strings at the

00:36:59,820 --> 00:37:06,200
start or get variables afterwards or no

00:37:03,570 --> 00:37:09,710
it's a hotly debated topic

00:37:06,200 --> 00:37:09,710
did you guys

00:37:10,840 --> 00:37:17,780
either 92 learn that if you want a

00:37:13,760 --> 00:37:25,640
personal lesson Cindy is deployed on a

00:37:17,780 --> 00:37:29,570
bit fragile Rob yeah yeah well actually

00:37:25,640 --> 00:37:31,610
I don't have a brand of reference with

00:37:29,570 --> 00:37:33,860
that it depends a lot as many dents of

00:37:31,610 --> 00:37:34,730
what you were to do so honestly I don't

00:37:33,860 --> 00:37:49,340
have a presence

00:37:34,730 --> 00:37:51,740
not really no question do you keep the

00:37:49,340 --> 00:37:55,670
foam controllers separate from the API

00:37:51,740 --> 00:37:59,030
controllers like the normal HTTP twig

00:37:55,670 --> 00:38:01,370
site pages separate from your API

00:37:59,030 --> 00:38:03,880
endpoint yes I suppose other questions

00:38:01,370 --> 00:38:07,400
yes we keep them separate but of course

00:38:03,880 --> 00:38:10,130
since you have to do your controllers

00:38:07,400 --> 00:38:12,020
very very same that's not a bit add very

00:38:10,130 --> 00:38:14,630
big problem because you will have to

00:38:12,020 --> 00:38:16,550
very thin controllers doing two similar

00:38:14,630 --> 00:38:26,900
things but we actually yes we prefer to

00:38:16,550 --> 00:38:29,540
give the separated something up and do

00:38:26,900 --> 00:38:32,330
you by any acceptance tests around the

00:38:29,540 --> 00:38:36,800
API endpoint to ensure that returning

00:38:32,330 --> 00:38:38,990
the right things if we return of course

00:38:36,800 --> 00:38:41,000
that's a very important thing to do you

00:38:38,990 --> 00:38:43,550
have to make sure all the time that you

00:38:41,000 --> 00:38:45,260
are returning the the that's why I was

00:38:43,550 --> 00:38:49,310
talking about implementing some tools

00:38:45,260 --> 00:38:51,380
that really let you see what is coming

00:38:49,310 --> 00:38:56,660
from there that's a very important thing

00:38:51,380 --> 00:38:57,200
- yes how do you feel about exception

00:38:56,660 --> 00:38:59,660
handling

00:38:57,200 --> 00:39:01,010
do you use exception listeners by using

00:38:59,660 --> 00:39:03,650
the kernel yes

00:39:01,010 --> 00:39:05,780
exception listeners are I didn't want to

00:39:03,650 --> 00:39:08,600
enter into my video with that but are

00:39:05,780 --> 00:39:11,540
one of the most powerful things to to

00:39:08,600 --> 00:39:13,850
use that's why so you have those in this

00:39:11,540 --> 00:39:16,730
one of the cellulitis I think is awesome

00:39:13,850 --> 00:39:19,450
both it's very very very useful we use

00:39:16,730 --> 00:39:19,450
it always here

00:39:27,260 --> 00:39:33,150
and you have nice awesome use of swagger

00:39:30,480 --> 00:39:34,920
or the open API standard yeah knew you

00:39:33,150 --> 00:39:38,100
were going to ask but I haven't used

00:39:34,920 --> 00:39:41,310
other actually so I cannot say for

00:39:38,100 --> 00:39:43,830
without an json schema validation

00:39:41,310 --> 00:39:47,010
what about JSON schema validation you

00:39:43,830 --> 00:39:49,560
have a really good talk now we know that

00:39:47,010 --> 00:39:53,990
we use it quite all other than is doing

00:39:49,560 --> 00:39:53,990
interesting yeah yeah mm-hmm thank you

00:40:02,400 --> 00:40:07,370
what is your thoughts on things like for

00:40:04,500 --> 00:40:11,090
example using fractal because if you use

00:40:07,370 --> 00:40:14,100
your serializer you're basically sort of

00:40:11,090 --> 00:40:16,440
putting what your database has into your

00:40:14,100 --> 00:40:18,330
response but maybe you there's a few

00:40:16,440 --> 00:40:20,550
things that you might want to do like

00:40:18,330 --> 00:40:22,890
relationships and using something like

00:40:20,550 --> 00:40:26,190
fractal what it was your thoughts on

00:40:22,890 --> 00:40:27,690
that well if you need that of course

00:40:26,190 --> 00:40:31,230
something like the cellulite sir will

00:40:27,690 --> 00:40:33,450
help you with this I have not needed

00:40:31,230 --> 00:40:36,830
that reject but yes it's something that

00:40:33,450 --> 00:40:36,830
you can do with the free licenses

00:40:45,540 --> 00:40:50,310
okay thanks thank you

00:40:50,830 --> 00:40:55,420

YouTube URL: https://www.youtube.com/watch?v=8KAgvjxcmDY


