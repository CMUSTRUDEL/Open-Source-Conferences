Title: PHP UK Conference 2017 - Sebastian Thoss - SmokeTests
Publication date: 2017-04-03
Playlist: PHP UK Conference 2017
Description: 
	Today it's crystal clear why we need unit tests. Even integration and acceptance tests are quite common but who is making sure that your pages are working in production environment? I'd like to show in detail how smoke tests will help achieving this goal and why you should try to burn down your production server.
Captions: 
	00:00:00,000 --> 00:00:03,600
tests and why you should try to burn

00:00:02,220 --> 00:00:07,170
down your production environments

00:00:03,600 --> 00:00:09,480
without giving it actually but first my

00:00:07,170 --> 00:00:12,540
name is Sebastian I'm the Shepherd to

00:00:09,480 --> 00:00:17,880
the lead of the backends departments in

00:00:12,540 --> 00:00:21,270
the company Ducati Maharaja probably no

00:00:17,880 --> 00:00:24,000
one of you knows what we are doing so a

00:00:21,270 --> 00:00:26,880
couple of words through a company cotton

00:00:24,000 --> 00:00:29,820
Maharaja is translated to English like

00:00:26,880 --> 00:00:31,800
card maker II and we are not doing like

00:00:29,820 --> 00:00:33,840
maps and all the stuff that we are doing

00:00:31,800 --> 00:00:39,469
really literally cards for wedding

00:00:33,840 --> 00:00:42,719
invitations and all emotional events and

00:00:39,469 --> 00:00:45,180
we are seven years old we are above 100

00:00:42,719 --> 00:00:47,430
people we are mainly based in Germany so

00:00:45,180 --> 00:00:51,420
we have three locations in Germany we

00:00:47,430 --> 00:00:53,730
have in the company about 15 to 20

00:00:51,420 --> 00:00:56,850
nationalities so main language of ours

00:00:53,730 --> 00:01:01,199
is English and we currently have five

00:00:56,850 --> 00:01:05,460
stores and several million of designs

00:01:01,199 --> 00:01:08,549
and cards and wise to get your cards how

00:01:05,460 --> 00:01:11,220
you want that but before we go into the

00:01:08,549 --> 00:01:14,189
topic short disclaimer everything I tell

00:01:11,220 --> 00:01:16,710
you tonight or you have today sorry not

00:01:14,189 --> 00:01:19,400
that they get everything I tell you

00:01:16,710 --> 00:01:23,280
today is based on our own experience

00:01:19,400 --> 00:01:25,740
there are better ways and other ways how

00:01:23,280 --> 00:01:28,320
to do some stuff feel free to approach

00:01:25,740 --> 00:01:30,479
in afterwards or in the Q&A section

00:01:28,320 --> 00:01:33,990
let's discuss there some more and better

00:01:30,479 --> 00:01:37,530
topics but everything I want to show you

00:01:33,990 --> 00:01:41,610
is based on the fact that we have to

00:01:37,530 --> 00:01:45,990
find a solution for it the specific

00:01:41,610 --> 00:01:49,860
problem at this time so so much for that

00:01:45,990 --> 00:01:52,590
so next point first let's go shortly

00:01:49,860 --> 00:01:54,360
through the again now first I want to

00:01:52,590 --> 00:01:56,969
show you our project and the

00:01:54,360 --> 00:01:59,939
architecture of our projects just for

00:01:56,969 --> 00:02:01,350
better understanding why we do something

00:01:59,939 --> 00:02:05,100
like smoke test and why we actually

00:02:01,350 --> 00:02:06,960
thought you need that then I would love

00:02:05,100 --> 00:02:10,050
to get you all on the same page what

00:02:06,960 --> 00:02:12,690
kinds of tests exists and then we go

00:02:10,050 --> 00:02:14,300
into the specific smoke tests then I

00:02:12,690 --> 00:02:17,340
show you how we

00:02:14,300 --> 00:02:20,370
get our server architecture running and

00:02:17,340 --> 00:02:23,250
how we deploy the codes in order to see

00:02:20,370 --> 00:02:27,090
when it's the best time to run the smoke

00:02:23,250 --> 00:02:31,470
tests and last but not least questions

00:02:27,090 --> 00:02:35,310
and answers good but first let's go for

00:02:31,470 --> 00:02:36,720
the product project architecture and

00:02:35,310 --> 00:02:39,900
before we started into that when I

00:02:36,720 --> 00:02:43,560
started in this company I go we had a

00:02:39,900 --> 00:02:46,410
monolith and if a friend of mine just

00:02:43,560 --> 00:02:49,200
runs some random tests on one of our

00:02:46,410 --> 00:02:51,330
biggest files we have there and this

00:02:49,200 --> 00:02:53,040
number is just showing the complexity of

00:02:51,330 --> 00:02:56,190
one single file and it's the biggest

00:02:53,040 --> 00:03:00,000
fire we have and we had the fun out of

00:02:56,190 --> 00:03:02,459
it that we tried to get there for this

00:03:00,000 --> 00:03:06,420
number of wording so that we get their

00:03:02,459 --> 00:03:08,370
real name for this number we found

00:03:06,420 --> 00:03:12,209
several websites and that's what we came

00:03:08,370 --> 00:03:17,310
up with so on there's still stuff which

00:03:12,209 --> 00:03:20,370
doesn't sound real well or add one sorry

00:03:17,310 --> 00:03:23,730
it's but that was the closest I think we

00:03:20,370 --> 00:03:25,459
tried several websites to get their

00:03:23,730 --> 00:03:28,860
wording for this number and we ended up

00:03:25,459 --> 00:03:31,430
like three or four of the websites just

00:03:28,860 --> 00:03:34,320
said sorry that numbers too big was not

00:03:31,430 --> 00:03:36,450
good so we said okay come on we have to

00:03:34,320 --> 00:03:37,170
change here something that's we can't

00:03:36,450 --> 00:03:40,560
leave it like that

00:03:37,170 --> 00:03:42,769
we are senior developers we want to get

00:03:40,560 --> 00:03:45,480
there good out there and we want to

00:03:42,769 --> 00:03:47,820
get it in a nice shape so everyone

00:03:45,480 --> 00:03:50,519
understands the system is from just

00:03:47,820 --> 00:03:53,700
reading it so we said like he come on

00:03:50,519 --> 00:03:56,430
what's what do we have to do so we want

00:03:53,700 --> 00:03:59,130
to have an ATS came from our boss he

00:03:56,430 --> 00:04:05,280
wants to have this view that's how it

00:03:59,130 --> 00:04:07,709
should look like and with all these nice

00:04:05,280 --> 00:04:09,900
tiles so we started something like one

00:04:07,709 --> 00:04:13,049
and a half years ago to build some build

00:04:09,900 --> 00:04:15,060
and try a few things and after half a

00:04:13,049 --> 00:04:17,579
year we finally found the perfect

00:04:15,060 --> 00:04:20,010
solution we went for a couple of weeks

00:04:17,579 --> 00:04:23,310
months into the wrong direction here did

00:04:20,010 --> 00:04:27,180
we started so we came up with was a

00:04:23,310 --> 00:04:27,750
project we called the fury well fury is

00:04:27,180 --> 00:04:30,870
based on

00:04:27,750 --> 00:04:33,780
u.s. TV series maybe someone knows it

00:04:30,870 --> 00:04:38,210
it's from it from US TV series from the

00:04:33,780 --> 00:04:41,340
1950s actually it's about an orphan boy

00:04:38,210 --> 00:04:43,380
listen mrs. fastest and most reliable

00:04:41,340 --> 00:04:45,000
horse and we said okay come on we need

00:04:43,380 --> 00:04:48,030
something really fast we need something

00:04:45,000 --> 00:04:50,880
we need reliable because we want to have

00:04:48,030 --> 00:04:54,150
that possibility to scale that wide so

00:04:50,880 --> 00:04:56,460
we needed reliable so that's what we

00:04:54,150 --> 00:04:59,610
came up with another idea what we

00:04:56,460 --> 00:05:02,640
finally came up with is we said okay why

00:04:59,610 --> 00:05:06,270
should we actually serve HTML and render

00:05:02,640 --> 00:05:10,620
HTML somewhere on request so we said ok

00:05:06,270 --> 00:05:13,620
come on we won't need that so we said we

00:05:10,620 --> 00:05:15,660
put or a pre rendered HTML into a key

00:05:13,620 --> 00:05:18,300
value store we put it in the search

00:05:15,660 --> 00:05:20,190
engine next to it and then we serve the

00:05:18,300 --> 00:05:23,220
requests directly from the cave from the

00:05:20,190 --> 00:05:25,740
kV so no problems on that side anymore

00:05:23,220 --> 00:05:27,450
but somehow we said ok come on somehow

00:05:25,740 --> 00:05:29,580
we have to get the values in there first

00:05:27,450 --> 00:05:32,850
and we still need to render the HTML but

00:05:29,580 --> 00:05:38,760
maybe not on request anymore so we said

00:05:32,850 --> 00:05:40,620
ok come on we need a back-end so in the

00:05:38,760 --> 00:05:42,770
backend we do pretty much the main trick

00:05:40,620 --> 00:05:46,800
and that's what I would love to show you

00:05:42,770 --> 00:05:50,790
in this slide we call it actually you

00:05:46,800 --> 00:05:54,360
collect an export so for us we start

00:05:50,790 --> 00:05:59,610
just collecting the information from our

00:05:54,360 --> 00:06:03,150
legacy database then we publish do we

00:05:59,610 --> 00:06:05,490
render the HTML and we render and we

00:06:03,150 --> 00:06:08,760
process all the search ich west's we

00:06:05,490 --> 00:06:12,540
want to handle here and publish that to

00:06:08,760 --> 00:06:14,790
these systems and one thing we have to

00:06:12,540 --> 00:06:17,750
do as well is because we are not

00:06:14,790 --> 00:06:20,130
replacing from our legacy system all

00:06:17,750 --> 00:06:22,830
pages so we said at the beginning we

00:06:20,130 --> 00:06:25,979
want to put replace only for a detail

00:06:22,830 --> 00:06:29,910
pages and category pages so everything

00:06:25,979 --> 00:06:31,590
which is card wishlist we don't want to

00:06:29,910 --> 00:06:33,510
worry about we only want to have these

00:06:31,590 --> 00:06:35,220
pages fast in the first place and then

00:06:33,510 --> 00:06:40,260
worry about everything which is based on

00:06:35,220 --> 00:06:41,040
sessions databases some real big issues

00:06:40,260 --> 00:06:43,440
what

00:06:41,040 --> 00:06:45,390
every shop has so we said ok come on we

00:06:43,440 --> 00:06:47,370
take the we want still want to have the

00:06:45,390 --> 00:06:51,150
view that all these pages which are

00:06:47,370 --> 00:06:53,070
still in the legacy system they should

00:06:51,150 --> 00:06:55,290
have the same header and footer they

00:06:53,070 --> 00:06:57,360
should at least from a header and from a

00:06:55,290 --> 00:07:00,930
pooter perspective they should look the

00:06:57,360 --> 00:07:03,540
same as any other page so we said ok to

00:07:00,930 --> 00:07:06,960
have no dependency from from the old

00:07:03,540 --> 00:07:09,150
system to the new system we said ok we

00:07:06,960 --> 00:07:12,060
push the header and the footer into a kV

00:07:09,150 --> 00:07:14,580
storage for the legacy system to use so

00:07:12,060 --> 00:07:17,010
that's that's the only and that's why

00:07:14,580 --> 00:07:19,590
it's red that's the only restriction we

00:07:17,010 --> 00:07:23,550
have there that either system knows of

00:07:19,590 --> 00:07:26,790
the other one besides that indifferent

00:07:23,550 --> 00:07:28,500
which system you run you can you can as

00:07:26,790 --> 00:07:30,680
long as it is not the back-end process

00:07:28,500 --> 00:07:35,460
if it's just the front end process it's

00:07:30,680 --> 00:07:38,060
completely independent so but how house

00:07:35,460 --> 00:07:40,410
now is the question how does that work

00:07:38,060 --> 00:07:42,360
how does the request work because we

00:07:40,410 --> 00:07:45,450
have two different systems delivering

00:07:42,360 --> 00:07:48,990
pretty much similar code or at least in

00:07:45,450 --> 00:07:52,980
the end same product so we said ok come

00:07:48,990 --> 00:07:56,070
on we want to put that in place if we

00:07:52,980 --> 00:07:58,610
get a request and we can handle this

00:07:56,070 --> 00:08:01,410
leak for us we will go to do meio and

00:07:58,610 --> 00:08:03,630
check first if that requests existence

00:08:01,410 --> 00:08:05,910
yeah if it exists then we will do some

00:08:03,630 --> 00:08:08,850
extra searches we might get to the

00:08:05,910 --> 00:08:14,640
session to tweak there a few things on

00:08:08,850 --> 00:08:18,650
the front end and just ship it so in the

00:08:14,640 --> 00:08:23,400
case of for example the card the cards

00:08:18,650 --> 00:08:26,400
won't be available in the new systems or

00:08:23,400 --> 00:08:29,480
ok the new system is shipping a 4/4 and

00:08:26,400 --> 00:08:33,390
then the whole interest goes just to the

00:08:29,480 --> 00:08:35,099
to the old to the legacy system but

00:08:33,390 --> 00:08:37,800
that's so much for that to our

00:08:35,099 --> 00:08:41,190
architecture if you want to know more

00:08:37,800 --> 00:08:44,400
about the architecture it's a known talk

00:08:41,190 --> 00:08:46,590
so where we go much more into detail why

00:08:44,400 --> 00:08:49,280
we actually did that what's the reason

00:08:46,590 --> 00:08:53,730
for it how we managed to features like

00:08:49,280 --> 00:08:54,740
100% code coverage like shipping the

00:08:53,730 --> 00:08:56,450
page within one

00:08:54,740 --> 00:08:59,180
hundred milliseconds so time to first

00:08:56,450 --> 00:09:02,270
byte we have for example on the homepage

00:08:59,180 --> 00:09:06,709
last week I lost me on the homepage time

00:09:02,270 --> 00:09:08,270
to first fight 35 milliseconds so if you

00:09:06,709 --> 00:09:11,450
want to know more have a look on that

00:09:08,270 --> 00:09:16,190
website there's the link to the talk but

00:09:11,450 --> 00:09:18,560
now let's get all on the same page we

00:09:16,190 --> 00:09:21,350
have that test permit and that's what we

00:09:18,560 --> 00:09:23,390
use in our company and our as the first

00:09:21,350 --> 00:09:26,570
and as the ground layer we have their

00:09:23,390 --> 00:09:28,520
unit tests so what is a unit test the

00:09:26,570 --> 00:09:32,420
unit test is pretty much as the name is

00:09:28,520 --> 00:09:35,180
saying it testing a unit so when these

00:09:32,420 --> 00:09:37,850
when we have these four units we want to

00:09:35,180 --> 00:09:42,230
test only unit one we just have to

00:09:37,850 --> 00:09:44,029
market the direct dependencies in 99% of

00:09:42,230 --> 00:09:46,550
the cases you don't know if the code is

00:09:44,029 --> 00:09:50,750
clean you don't need to worry about

00:09:46,550 --> 00:09:53,899
class four so dependency for just can

00:09:50,750 --> 00:09:57,110
ignore them but everyone should know by

00:09:53,899 --> 00:10:01,760
today unit test is not the solution for

00:09:57,110 --> 00:10:05,480
everything how about that one the unit

00:10:01,760 --> 00:10:10,490
is working but just one person at the

00:10:05,480 --> 00:10:13,010
time and how about that one probably

00:10:10,490 --> 00:10:19,670
some of you might know that already know

00:10:13,010 --> 00:10:22,940
on how how should that work so we need

00:10:19,670 --> 00:10:24,350
something more so and and and the

00:10:22,940 --> 00:10:28,160
animation is saying already

00:10:24,350 --> 00:10:31,370
we need integration tests so the

00:10:28,160 --> 00:10:34,010
integration test is saying it already we

00:10:31,370 --> 00:10:37,310
should test the integration of the

00:10:34,010 --> 00:10:39,320
dependency to another dependency so in

00:10:37,310 --> 00:10:43,089
this case we want to test the dependency

00:10:39,320 --> 00:10:46,100
between class 1 and class 2 so easy why

00:10:43,089 --> 00:10:49,850
we market we mark the rest of the way

00:10:46,100 --> 00:10:52,490
but we stick and use the unit and we

00:10:49,850 --> 00:10:54,470
have rules set up for us we when we

00:10:52,490 --> 00:10:59,300
started that project we said we want to

00:10:54,470 --> 00:11:01,339
have 100% code coverage and we need

00:10:59,300 --> 00:11:05,240
everyone we talked to in the first place

00:11:01,339 --> 00:11:08,060
said don't dream of that but that's how

00:11:05,240 --> 00:11:10,460
we managed we managed

00:11:08,060 --> 00:11:13,430
service unit tests that each unit is

00:11:10,460 --> 00:11:16,160
properly tested and has 100% code

00:11:13,430 --> 00:11:18,140
coverage the unit itself but there are

00:11:16,160 --> 00:11:20,210
cases where you just can't use it where

00:11:18,140 --> 00:11:22,370
you can can't use unit tests for example

00:11:20,210 --> 00:11:24,410
when you have factories where you have

00:11:22,370 --> 00:11:27,590
just very really put your dependencies

00:11:24,410 --> 00:11:29,300
together and that's our small level here

00:11:27,590 --> 00:11:33,380
we are getting there into integration

00:11:29,300 --> 00:11:36,800
tests so all of these 100% we make sure

00:11:33,380 --> 00:11:39,710
just with everything in unit test and

00:11:36,800 --> 00:11:41,270
slightly a bit in integration test and

00:11:39,710 --> 00:11:43,820
we really make sure that this is not

00:11:41,270 --> 00:11:45,890
someone just saying okay I don't want to

00:11:43,820 --> 00:11:47,180
write unit tests I just do an

00:11:45,890 --> 00:11:50,660
integration test and get the coverage

00:11:47,180 --> 00:11:54,380
that's not allowed for us but there's

00:11:50,660 --> 00:11:56,540
still left still space left and spaces

00:11:54,380 --> 00:12:00,110
left for acceptance tests a lot of you

00:11:56,540 --> 00:12:02,120
know them acceptance tests we can do

00:12:00,110 --> 00:12:04,520
them on both ways we we are doing them

00:12:02,120 --> 00:12:07,520
on both ways as well like first way is

00:12:04,520 --> 00:12:11,090
doing a real cooz code so we take in

00:12:07,520 --> 00:12:13,970
whole all our four dependencies and test

00:12:11,090 --> 00:12:16,930
them together and what we do as well is

00:12:13,970 --> 00:12:19,750
doing selenium tests and all this stuff

00:12:16,930 --> 00:12:22,040
to make sure that we are clickable and

00:12:19,750 --> 00:12:26,420
JavaScript and all this all these

00:12:22,040 --> 00:12:27,890
features are working I have to say we

00:12:26,420 --> 00:12:30,230
have still some downsides

00:12:27,890 --> 00:12:32,870
we are not there we are not hundred

00:12:30,230 --> 00:12:34,760
percent perfect there as well because in

00:12:32,870 --> 00:12:36,890
my opinion we don't have enough

00:12:34,760 --> 00:12:39,380
integration tests between bacon and

00:12:36,890 --> 00:12:42,500
fondant because bacon has proper tests

00:12:39,380 --> 00:12:45,500
front end it's nearly there already

00:12:42,500 --> 00:12:48,170
they're trying to catch up with us at

00:12:45,500 --> 00:12:49,790
the moment but we have no real tests

00:12:48,170 --> 00:12:51,200
which are making sure that the objects

00:12:49,790 --> 00:12:52,970
we are handing out to the front end is

00:12:51,200 --> 00:12:55,220
actually working with the JavaScript and

00:12:52,970 --> 00:12:57,410
that's the only places where it usually

00:12:55,220 --> 00:12:59,690
when there is a on the website

00:12:57,410 --> 00:13:04,730
it's usually there because there this is

00:12:59,690 --> 00:13:08,150
the part which is not covered so that's

00:13:04,730 --> 00:13:10,850
pretty much testing everything so but

00:13:08,150 --> 00:13:15,980
still we have that this is all done

00:13:10,850 --> 00:13:18,170
before we deploy so we said there we

00:13:15,980 --> 00:13:21,740
need them more we you saw our

00:13:18,170 --> 00:13:24,230
architecture if the page is not

00:13:21,740 --> 00:13:26,270
shipped by the new system it will be

00:13:24,230 --> 00:13:28,580
shipped by the old system and the old

00:13:26,270 --> 00:13:31,040
system we don't want to shoot to

00:13:28,580 --> 00:13:33,350
there's old system to ship pages to ship

00:13:31,040 --> 00:13:35,420
pages which should be in a new system so

00:13:33,350 --> 00:13:37,610
we said come on we need more stuff we

00:13:35,420 --> 00:13:38,060
need something more in this pyramid up

00:13:37,610 --> 00:13:41,570
there

00:13:38,060 --> 00:13:45,550
so what could that be and the torque is

00:13:41,570 --> 00:13:45,550
saying it already it's more peasants

00:13:45,820 --> 00:13:51,680
here smallest gamer again the solution

00:13:49,100 --> 00:13:56,600
we have for small tests is the solution

00:13:51,680 --> 00:13:59,060
we found and we used for the time being

00:13:56,600 --> 00:14:02,270
at when we had that problem

00:13:59,060 --> 00:14:04,340
I learned and meanwhile that there are

00:14:02,270 --> 00:14:06,980
tools which are can easily handle that

00:14:04,340 --> 00:14:11,060
which are easily can very can easily run

00:14:06,980 --> 00:14:15,590
stop run smoke tests or even sieges or

00:14:11,060 --> 00:14:20,270
whatever but what I will show you now is

00:14:15,590 --> 00:14:23,420
pretty much like the way we did it so

00:14:20,270 --> 00:14:25,220
what are smoke tests original smoke

00:14:23,420 --> 00:14:27,650
tests is not coming from my team as

00:14:25,220 --> 00:14:30,830
usual original smoke test is coming from

00:14:27,650 --> 00:14:34,490
testing drains and sewage systems and

00:14:30,830 --> 00:14:39,110
all this stuff so the idea is to just

00:14:34,490 --> 00:14:42,380
close all the normal endpoints and just

00:14:39,110 --> 00:14:44,120
put smoke in there and see where the

00:14:42,380 --> 00:14:49,820
smoke comes out again if the smoke is

00:14:44,120 --> 00:14:52,010
coming out there is a problem so we said

00:14:49,820 --> 00:14:55,480
okay come on let's do something let's do

00:14:52,010 --> 00:14:58,310
something similar so we said before we

00:14:55,480 --> 00:15:01,430
are doing the deployment before we

00:14:58,310 --> 00:15:03,830
actually tell our system that this is

00:15:01,430 --> 00:15:05,960
ready to go live we run these smoke

00:15:03,830 --> 00:15:08,960
tests we really run we really try out

00:15:05,960 --> 00:15:11,870
all our endpoints and see if something

00:15:08,960 --> 00:15:14,450
starts to smoke if there is smoke coming

00:15:11,870 --> 00:15:17,270
up we have to look at that point if that

00:15:14,450 --> 00:15:19,490
is a big problem or if that just if it

00:15:17,270 --> 00:15:23,810
might be Justin DNS hiccup or something

00:15:19,490 --> 00:15:27,530
like that so that's pretty much our list

00:15:23,810 --> 00:15:31,240
of definitely find list what we wanted

00:15:27,530 --> 00:15:34,220
to have and we said it should be simple

00:15:31,240 --> 00:15:35,120
we should cover all URLs in Google index

00:15:34,220 --> 00:15:38,300
because you

00:15:35,120 --> 00:15:42,740
what we saw during this as well during

00:15:38,300 --> 00:15:46,010
writing the code that sometimes in the

00:15:42,740 --> 00:15:47,690
in the product management department the

00:15:46,010 --> 00:15:50,060
girls changing some of your else but

00:15:47,690 --> 00:15:52,940
forget to set up to redirect so broken

00:15:50,060 --> 00:15:54,950
URLs and Google and X and it's usually

00:15:52,940 --> 00:15:57,140
ending up on our plate that there is a

00:15:54,950 --> 00:16:02,150
product missing which should not be

00:15:57,140 --> 00:16:05,570
missing yeah and what we said what we

00:16:02,150 --> 00:16:08,900
found as well is the list with the

00:16:05,570 --> 00:16:13,210
optional parameters so please smoke test

00:16:08,900 --> 00:16:16,160
not just the regular URL but having me

00:16:13,210 --> 00:16:17,930
test some at least some your ads or if

00:16:16,160 --> 00:16:20,870
you want all your ads with the necessary

00:16:17,930 --> 00:16:22,640
parameters on it because only then you

00:16:20,870 --> 00:16:29,680
will know if that parameter might cause

00:16:22,640 --> 00:16:32,120
some some trouble so how do they work

00:16:29,680 --> 00:16:34,580
the reckoning indi way so you have a

00:16:32,120 --> 00:16:35,410
production server which is running your

00:16:34,580 --> 00:16:38,390
application

00:16:35,410 --> 00:16:41,300
you have a CI server where you want to

00:16:38,390 --> 00:16:44,150
run your smoke test from and then you

00:16:41,300 --> 00:16:46,190
send a request and you get it back and

00:16:44,150 --> 00:16:49,459
now you can validate on the response

00:16:46,190 --> 00:16:51,080
like if the header is okay if time to

00:16:49,459 --> 00:16:57,850
first byte is okay and if there is a

00:16:51,080 --> 00:17:00,410
body if you want to do this make sure

00:16:57,850 --> 00:17:03,579
your CI server and your production

00:17:00,410 --> 00:17:05,600
servers actually in the same network

00:17:03,579 --> 00:17:08,030
especially if you want to handle the

00:17:05,600 --> 00:17:11,540
temperature spike if they are not in the

00:17:08,030 --> 00:17:15,079
same network if you need if it's just a

00:17:11,540 --> 00:17:20,150
different data center it will up

00:17:15,079 --> 00:17:22,160
your your time to cross body what you

00:17:20,150 --> 00:17:25,610
can test there as well it's like when

00:17:22,160 --> 00:17:28,940
it's slow it's failing when it's both

00:17:25,610 --> 00:17:32,360
your limits so it then you can see it so

00:17:28,940 --> 00:17:35,320
I said it already smoke test should

00:17:32,360 --> 00:17:39,380
validate status code time to first byte

00:17:35,320 --> 00:17:40,820
if a body is provided and what we are

00:17:39,380 --> 00:17:42,920
testing as well if it's the correct

00:17:40,820 --> 00:17:45,860
server so we want to make sure that

00:17:42,920 --> 00:17:47,929
actually the correct server is shipping

00:17:45,860 --> 00:17:48,380
this page because we smoked has not just

00:17:47,929 --> 00:17:50,870
you

00:17:48,380 --> 00:17:53,450
new URLs but we smoke test as well

00:17:50,870 --> 00:17:55,820
existing URL from the from the legacy

00:17:53,450 --> 00:17:58,210
system and therefore we want to test if

00:17:55,820 --> 00:18:01,700
it's the correct server we expect them

00:17:58,210 --> 00:18:03,890
but what you should not try to do a

00:18:01,700 --> 00:18:06,410
smoke test is actually doing acceptance

00:18:03,890 --> 00:18:08,960
tests like trying to find their dips and

00:18:06,410 --> 00:18:11,300
all this stuff because therefore are

00:18:08,960 --> 00:18:14,210
better systems like selenium as

00:18:11,300 --> 00:18:19,130
mentioned before so in the first place

00:18:14,210 --> 00:18:21,350
we wrote some code and that's how it

00:18:19,130 --> 00:18:25,670
looked so we have their like based on

00:18:21,350 --> 00:18:28,040
PHP unit so we said we have their data

00:18:25,670 --> 00:18:31,730
provider this provides us for each tests

00:18:28,040 --> 00:18:35,900
pretty much list of your ads and each

00:18:31,730 --> 00:18:40,970
URL we just send a get request and just

00:18:35,900 --> 00:18:43,040
run the ezard's against it so when we

00:18:40,970 --> 00:18:46,100
when we were finished with that piece of

00:18:43,040 --> 00:18:50,420
code was written in five minutes ten

00:18:46,100 --> 00:18:52,880
minutes we were running it so it took 45

00:18:50,420 --> 00:18:54,880
to 50 minutes because we are smoke

00:18:52,880 --> 00:18:58,490
testing as I said we are smoke testing

00:18:54,880 --> 00:19:04,790
nearly all URLs we have probably we are

00:18:58,490 --> 00:19:08,930
currently not up-to-date to all URLs but

00:19:04,790 --> 00:19:12,740
it's about 20000 euros so it takes 45 to

00:19:08,930 --> 00:19:14,750
50 minutes to run them so we were

00:19:12,740 --> 00:19:18,170
getting back to the board just getting

00:19:14,750 --> 00:19:20,870
back to the papers so what can we do how

00:19:18,170 --> 00:19:24,440
can we speed that up and then we said

00:19:20,870 --> 00:19:27,680
yeah let's do concurrency so let's do

00:19:24,440 --> 00:19:29,570
concurrent smoke tests let's let's send

00:19:27,680 --> 00:19:32,300
not one request for that sent three

00:19:29,570 --> 00:19:35,000
because it's real server so was the real

00:19:32,300 --> 00:19:38,360
server it must be able to handle more

00:19:35,000 --> 00:19:40,550
than of one request at the same time so

00:19:38,360 --> 00:19:43,130
we said ok come on let's try it was in

00:19:40,550 --> 00:19:45,830
this case three let's try it with three

00:19:43,130 --> 00:19:48,230
requests we send the three requests at

00:19:45,830 --> 00:19:50,870
some stage the first request comes back

00:19:48,230 --> 00:19:53,990
we directly send a new one because that

00:19:50,870 --> 00:19:56,060
pipe that pipe here is getting free so

00:19:53,990 --> 00:19:59,360
we send the next request then another

00:19:56,060 --> 00:20:01,910
request comes back ok we will send the

00:19:59,360 --> 00:20:04,370
next one and at the end

00:20:01,910 --> 00:20:06,920
oh there is one bequest which is not

00:20:04,370 --> 00:20:12,230
coming back properly that's red but it

00:20:06,920 --> 00:20:15,950
comes back so we know it but then we

00:20:12,230 --> 00:20:18,290
tried to increase the number the number

00:20:15,950 --> 00:20:20,390
how many threats how many pipes we can

00:20:18,290 --> 00:20:24,110
run at the same time how big can the

00:20:20,390 --> 00:20:25,940
concurrent number be and we got scared

00:20:24,110 --> 00:20:30,260
that something like that happens to our

00:20:25,940 --> 00:20:32,060
storage we don't want to have so with

00:20:30,260 --> 00:20:35,390
testing all of that we tested it

00:20:32,060 --> 00:20:37,880
carefully we came up with number which

00:20:35,390 --> 00:20:40,580
worked quite well for us this actually

00:20:37,880 --> 00:20:44,290
take the number of course your system

00:20:40,580 --> 00:20:47,600
has subtract one for the Linux on it and

00:20:44,290 --> 00:20:49,160
fire on everything else they have this

00:20:47,600 --> 00:20:51,830
is what your server should be able to

00:20:49,160 --> 00:20:53,270
handle if not maybe look in your code

00:20:51,830 --> 00:20:57,680
maybe there is something hidden in your

00:20:53,270 --> 00:21:01,130
code so that's how it looks for us now

00:20:57,680 --> 00:21:04,400
as you can see we have there continuous

00:21:01,130 --> 00:21:07,040
deployment on our system so and you can

00:21:04,400 --> 00:21:09,080
easily see here that here got something

00:21:07,040 --> 00:21:11,570
slow because we see here throughputs

00:21:09,080 --> 00:21:15,080
how many requests we can put through

00:21:11,570 --> 00:21:17,240
within one minute and each of these is a

00:21:15,080 --> 00:21:20,120
full set of twenty thousand URLs and you

00:21:17,240 --> 00:21:22,580
see here it got kind of slow already

00:21:20,120 --> 00:21:25,850
during this deployment and it got even

00:21:22,580 --> 00:21:28,700
slower here and then okay here we have

00:21:25,850 --> 00:21:32,720
to do something so we fix the problem I

00:21:28,700 --> 00:21:35,560
went back up so that's how it worked out

00:21:32,720 --> 00:21:38,960
and that's how it looks and we are still

00:21:35,560 --> 00:21:42,020
we vistor with the rule of having one

00:21:38,960 --> 00:21:46,220
core using one core less than in the

00:21:42,020 --> 00:21:48,860
hardware exists we never got in trouble

00:21:46,220 --> 00:21:50,480
with our data center because we are not

00:21:48,860 --> 00:21:51,980
hosting ourselves we don't have an own

00:21:50,480 --> 00:21:54,470
data center or stuff like that we have a

00:21:51,980 --> 00:21:57,650
Howser taking care for our hardware they

00:21:54,470 --> 00:22:00,440
never complain that we run or out of

00:21:57,650 --> 00:22:02,960
limit on some stuff of that one what is

00:22:00,440 --> 00:22:04,640
usual getting more into trouble is if we

00:22:02,960 --> 00:22:06,440
try to run that on some stage

00:22:04,640 --> 00:22:11,660
environments where everything is on one

00:22:06,440 --> 00:22:13,790
server that's usually more tricky but

00:22:11,660 --> 00:22:15,500
you don't have to write the code I just

00:22:13,790 --> 00:22:18,130
showed you yourself the good

00:22:15,500 --> 00:22:22,909
just for that for this conference here I

00:22:18,130 --> 00:22:25,159
sit down like weeks and thanks to Stefan

00:22:22,909 --> 00:22:27,110
she took care that I have the time to

00:22:25,159 --> 00:22:29,900
write that there is a library for that

00:22:27,110 --> 00:22:32,630
already and I really wrote it down

00:22:29,900 --> 00:22:36,350
really made it available well it's even

00:22:32,630 --> 00:22:40,309
four star already I try to keep up the

00:22:36,350 --> 00:22:42,350
numbers as high as possible so you can

00:22:40,309 --> 00:22:44,919
use that and feel free to improve it for

00:22:42,350 --> 00:22:47,480
free to get there more features in it

00:22:44,919 --> 00:22:51,020
but I would love to explain now how it

00:22:47,480 --> 00:22:53,090
works it works in an easy way we have

00:22:51,020 --> 00:22:56,570
again PHP unit because that turned out

00:22:53,090 --> 00:22:59,330
to be the best system to run these tests

00:22:56,570 --> 00:23:02,780
to run everything so you might know that

00:22:59,330 --> 00:23:06,710
as I said already there is the test

00:23:02,780 --> 00:23:09,260
itself the only test and a data provider

00:23:06,710 --> 00:23:11,780
that you can use the data provider what

00:23:09,260 --> 00:23:14,330
got a bit in our way is that the data

00:23:11,780 --> 00:23:17,690
provider is actually running in front of

00:23:14,330 --> 00:23:19,909
all tests so if you use this library

00:23:17,690 --> 00:23:23,510
inside your normal test library and you

00:23:19,909 --> 00:23:26,179
want to run all the whole permeat the

00:23:23,510 --> 00:23:28,100
data provider is run first then even if

00:23:26,179 --> 00:23:30,679
you want if in even if you expect the

00:23:28,100 --> 00:23:33,740
unit tests to run first before any test

00:23:30,679 --> 00:23:38,840
is running data providers are sorted so

00:23:33,740 --> 00:23:41,030
now PHP unit is doing the call to the

00:23:38,840 --> 00:23:43,820
data provider at the far at the first

00:23:41,030 --> 00:23:47,000
step the data provider is now taking

00:23:43,820 --> 00:23:48,770
care of sending all the requests so I'm

00:23:47,000 --> 00:23:52,700
sending that was to come with the proper

00:23:48,770 --> 00:23:54,799
concurrency you have setup and data

00:23:52,700 --> 00:23:57,409
provider gets the response gets the

00:23:54,799 --> 00:24:01,730
responses takes care we creates result

00:23:57,409 --> 00:24:05,720
object for you and then we hand every

00:24:01,730 --> 00:24:08,299
single result into an own test which

00:24:05,720 --> 00:24:10,820
makes it easy which makes it easy and

00:24:08,299 --> 00:24:11,600
clean to read so that sounds quite

00:24:10,820 --> 00:24:13,970
complicated

00:24:11,600 --> 00:24:16,730
what's the help of a consulting company

00:24:13,970 --> 00:24:18,890
called PHP CC we looked into the code

00:24:16,730 --> 00:24:21,230
and we wanted to make it as clean as

00:24:18,890 --> 00:24:23,450
possible as easy to to read and it's

00:24:21,230 --> 00:24:27,470
easy to understand as possible so we

00:24:23,450 --> 00:24:29,029
said we said there is only one thing you

00:24:27,470 --> 00:24:30,889
should need to do

00:24:29,029 --> 00:24:34,279
and that's actually to introduce your

00:24:30,889 --> 00:24:36,499
our trade here but on this trade is just

00:24:34,279 --> 00:24:41,449
making sure for you that you have

00:24:36,499 --> 00:24:43,639
features so let's go through the code so

00:24:41,449 --> 00:24:46,219
we start that's pretty much your entrant

00:24:43,639 --> 00:24:47,449
your entry point you can start here with

00:24:46,219 --> 00:24:49,699
a list of your else

00:24:47,449 --> 00:24:53,329
it's indifferent if it's a list or if

00:24:49,699 --> 00:24:55,449
you have a CSV file or you can attach

00:24:53,329 --> 00:24:58,819
their databases whatever you want and

00:24:55,449 --> 00:25:01,369
then you put it into into the UAE

00:24:58,819 --> 00:25:05,239
collection there you refine their the

00:25:01,369 --> 00:25:08,389
options so the options like the quest

00:25:05,239 --> 00:25:10,759
time out this is not the time out the

00:25:08,389 --> 00:25:13,699
page should give you but that's the time

00:25:10,759 --> 00:25:15,649
out curl will get because the or any

00:25:13,699 --> 00:25:17,239
system which is behind there we are

00:25:15,649 --> 00:25:20,149
using curl in this library for the

00:25:17,239 --> 00:25:23,029
moment but it's built like you have the

00:25:20,149 --> 00:25:26,949
opportunity to use that we get or

00:25:23,029 --> 00:25:30,049
whichever you system you prefer there

00:25:26,949 --> 00:25:31,369
then what is for some requests important

00:25:30,049 --> 00:25:34,579
when you want to test for example

00:25:31,369 --> 00:25:37,059
against redirects if you to explicitly

00:25:34,579 --> 00:25:40,669
test if there is a redirected working

00:25:37,059 --> 00:25:42,579
you can set it up as yes or no become

00:25:40,669 --> 00:25:45,319
currency we set it here to three again

00:25:42,579 --> 00:25:47,389
like I like an example and the body

00:25:45,319 --> 00:25:51,259
length and for a body length I have to

00:25:47,389 --> 00:25:54,349
explain I said earlier don't check what

00:25:51,259 --> 00:25:58,609
is in the body this body length fear is

00:25:54,349 --> 00:26:00,619
just to see if your memory because if we

00:25:58,609 --> 00:26:02,359
would save your whole body into your

00:26:00,619 --> 00:26:05,269
into the result object and do this for

00:26:02,359 --> 00:26:08,509
20,000 pages you can count yourself if

00:26:05,269 --> 00:26:12,469
one if it's if the body is one megabyte

00:26:08,509 --> 00:26:13,999
of HTML for example then it's 500

00:26:12,469 --> 00:26:16,099
megabytes you don't want to have that in

00:26:13,999 --> 00:26:21,109
your memory so that's why we limit this

00:26:16,099 --> 00:26:23,179
to 500 characters actually and these 500

00:26:21,109 --> 00:26:25,429
characters are only there for first

00:26:23,179 --> 00:26:27,799
testing if there is a body and the

00:26:25,429 --> 00:26:30,069
second test you can what the second

00:26:27,799 --> 00:26:35,839
reason is there if something is failing

00:26:30,069 --> 00:26:38,359
we will show you the the what was these

00:26:35,839 --> 00:26:40,069
500 characters so if there is a PHP

00:26:38,359 --> 00:26:42,539
error or something at yeah at the

00:26:40,069 --> 00:26:44,370
beginning of the HTML

00:26:42,539 --> 00:26:47,100
or at the beginning of the body then you

00:26:44,370 --> 00:26:48,690
can see it so then you can see for

00:26:47,100 --> 00:26:50,399
example that you miss the power meter or

00:26:48,690 --> 00:26:54,960
whatever that's what the body in the

00:26:50,399 --> 00:26:57,929
length is for and there's one parameter

00:26:54,960 --> 00:26:59,519
not here in this example but it exists

00:26:57,929 --> 00:27:02,820
so if you have your system to test

00:26:59,519 --> 00:27:06,179
behind the basic out there's all there's

00:27:02,820 --> 00:27:09,059
as well a basic out class you can end in

00:27:06,179 --> 00:27:11,730
here as well where you can put in your

00:27:09,059 --> 00:27:15,539
username and password and test it

00:27:11,730 --> 00:27:18,600
against the basic out system good then

00:27:15,539 --> 00:27:22,950
as I said the result object this coming

00:27:18,600 --> 00:27:26,879
back up there the result object is

00:27:22,950 --> 00:27:28,889
coming back and was the result object

00:27:26,879 --> 00:27:30,330
you have in there for example two ready

00:27:28,889 --> 00:27:33,240
to go features so you have in there the

00:27:30,330 --> 00:27:35,879
URL again you have in there the time to

00:27:33,240 --> 00:27:39,299
first byte you will find headers you

00:27:35,879 --> 00:27:41,879
will find bodies status code as string

00:27:39,299 --> 00:27:44,490
methods which is giving you that error

00:27:41,879 --> 00:27:49,019
message so what we use for the error

00:27:44,490 --> 00:27:51,240
message like explained and some more

00:27:49,019 --> 00:27:57,629
small features like this value data but

00:27:51,240 --> 00:28:00,570
if it is a validate result the last but

00:27:57,629 --> 00:28:02,730
not least we have in here bombs already

00:28:00,570 --> 00:28:06,539
some prepared asserts like if it's a

00:28:02,730 --> 00:28:09,990
success so we've got a 200 arab 200

00:28:06,539 --> 00:28:12,480
status code that we test against time to

00:28:09,990 --> 00:28:16,409
first byte that the body should not be

00:28:12,480 --> 00:28:19,440
empty and that specific header is there

00:28:16,409 --> 00:28:22,350
so to test that the page was shipped by

00:28:19,440 --> 00:28:24,029
fury we set up by our fury system we set

00:28:22,350 --> 00:28:26,190
up on the server that this service every

00:28:24,029 --> 00:28:30,419
time sending this engineers is sending

00:28:26,190 --> 00:28:33,029
their the app server fury and then now

00:28:30,419 --> 00:28:33,990
we can test against it you can see if

00:28:33,029 --> 00:28:38,669
it's there or not

00:28:33,990 --> 00:28:40,559
oh and i forgot one feature there's one

00:28:38,669 --> 00:28:43,919
more feature in this trade there are two

00:28:40,559 --> 00:28:47,340
methods called success output and error

00:28:43,919 --> 00:28:50,429
output because what you can imagine when

00:28:47,340 --> 00:28:52,590
you don't see this one while the data

00:28:50,429 --> 00:28:54,419
provider is running while the data

00:28:52,590 --> 00:28:55,190
provider collects and runs all these

00:28:54,419 --> 00:28:58,220
tests you don't

00:28:55,190 --> 00:29:02,120
anything so we said we put in there some

00:28:58,220 --> 00:29:06,370
more features like having in a trades

00:29:02,120 --> 00:29:10,280
two methods success and error output

00:29:06,370 --> 00:29:12,350
which you can overwrite to create your

00:29:10,280 --> 00:29:14,780
own like view we have in our life

00:29:12,350 --> 00:29:18,170
environment we have in here account

00:29:14,780 --> 00:29:20,930
popping up like it's counting every I

00:29:18,170 --> 00:29:23,000
think every 50 entries showed a number

00:29:20,930 --> 00:29:25,700
that to see if the scripts actually stay

00:29:23,000 --> 00:29:28,490
working or if it if it run into an

00:29:25,700 --> 00:29:33,350
endless loop or just died it or what's a

00:29:28,490 --> 00:29:39,980
stake there so but in this test case we

00:29:33,350 --> 00:29:42,320
run 223 tests one of them failed so it

00:29:39,980 --> 00:29:44,330
was a poor for by purpose to show here

00:29:42,320 --> 00:29:47,150
something and that's how it that's how

00:29:44,330 --> 00:29:50,510
it's it's outputting so in the in this

00:29:47,150 --> 00:29:54,230
case it tells us okay there there was no

00:29:50,510 --> 00:29:56,300
success that's and and that's the header

00:29:54,230 --> 00:30:00,230
and body and all this information you

00:29:56,300 --> 00:30:01,850
have there there are a few more features

00:30:00,230 --> 00:30:03,830
to come which are already in the

00:30:01,850 --> 00:30:07,220
pipeline so you might have heard there's

00:30:03,830 --> 00:30:10,910
already PHP unit 6 so to get on that one

00:30:07,220 --> 00:30:16,120
a bit more the library at the moment is

00:30:10,910 --> 00:30:20,780
based on PHP 5 and PHP unit 6 by purpose

00:30:16,120 --> 00:30:23,990
because we want to enable teams because

00:30:20,780 --> 00:30:26,690
this system was this library to smoke

00:30:23,990 --> 00:30:29,590
test their existing legacy system and

00:30:26,690 --> 00:30:32,540
create a new one while they still tested

00:30:29,590 --> 00:30:36,470
so the so there might be teams out there

00:30:32,540 --> 00:30:38,840
which don't have yet a PHP 7

00:30:36,470 --> 00:30:41,660
environments so they can easily run that

00:30:38,840 --> 00:30:43,550
on a bit more legacy systems but there

00:30:41,660 --> 00:30:46,490
will be soon another a second version

00:30:43,550 --> 00:30:51,260
complete second branch where we want to

00:30:46,490 --> 00:30:54,970
put up that in PHP unit six and prove

00:30:51,260 --> 00:30:58,130
there the usual quality Moria surgeons

00:30:54,970 --> 00:31:01,460
redirects all this stuff what we want to

00:30:58,130 --> 00:31:05,180
do they're good but now how is this

00:31:01,460 --> 00:31:06,860
fitting into our architecture so because

00:31:05,180 --> 00:31:09,309
you can imagine if we run that against

00:31:06,860 --> 00:31:13,550
the live system during the peak

00:31:09,309 --> 00:31:16,460
that might still cause some trouble but

00:31:13,550 --> 00:31:18,980
that's what we're our server he takes

00:31:16,460 --> 00:31:23,600
your comes in into the game and it tells

00:31:18,980 --> 00:31:26,270
us a few more things so we have their

00:31:23,600 --> 00:31:30,950
current set up it's an AV setup so we

00:31:26,270 --> 00:31:33,260
have two identical servers we don't at

00:31:30,950 --> 00:31:35,179
Kappa Hawaii we don't worry about hot

00:31:33,260 --> 00:31:37,160
standbys and fail overs and all the

00:31:35,179 --> 00:31:39,620
stuff does all the data center doing for

00:31:37,160 --> 00:31:41,630
us so from our view we just take care of

00:31:39,620 --> 00:31:44,960
server a and B and we have two web

00:31:41,630 --> 00:31:48,500
server service in front of that which is

00:31:44,960 --> 00:31:51,200
not doing much except just this web

00:31:48,500 --> 00:31:54,590
service knows how every request goes to

00:31:51,200 --> 00:31:57,500
server a now or every request goes to

00:31:54,590 --> 00:31:59,540
server be so different so only one

00:31:57,500 --> 00:32:01,850
server is life at the time so the other

00:31:59,540 --> 00:32:04,520
one is idling the other one is doing

00:32:01,850 --> 00:32:09,830
nothing so now we want to deploy there

00:32:04,520 --> 00:32:13,640
something so we have that deactivated

00:32:09,830 --> 00:32:15,559
server a server B is currently doing

00:32:13,640 --> 00:32:17,990
every request so we don't need to worry

00:32:15,559 --> 00:32:21,140
on server a that there's users on it or

00:32:17,990 --> 00:32:25,490
anything else so the idea is so we

00:32:21,140 --> 00:32:29,200
deploy the code then as mentioned before

00:32:25,490 --> 00:32:32,420
we run to collect and export script and

00:32:29,200 --> 00:32:34,610
before all this happened we we run

00:32:32,420 --> 00:32:38,090
already the unit integration and

00:32:34,610 --> 00:32:40,280
acceptance tests on it and now after

00:32:38,090 --> 00:32:43,010
collect an export after everything looks

00:32:40,280 --> 00:32:45,620
good to us now we run the smoke tests

00:32:43,010 --> 00:32:48,710
but what we are not doing is actually

00:32:45,620 --> 00:32:52,880
running the smoke tests against the web

00:32:48,710 --> 00:32:56,660
server directly because for us that cost

00:32:52,880 --> 00:32:58,910
some trouble because when we access this

00:32:56,660 --> 00:33:02,470
server directly who's making sure that

00:32:58,910 --> 00:33:05,690
this connection is working so we copied

00:33:02,470 --> 00:33:08,690
one to one our configuration on that

00:33:05,690 --> 00:33:12,230
server and give that server a second

00:33:08,690 --> 00:33:15,440
name to listen on so we can access

00:33:12,230 --> 00:33:18,530
either the whole system we are our dumb

00:33:15,440 --> 00:33:22,010
normal URL which will end up on on the

00:33:18,530 --> 00:33:22,669
active server or we have in here hidden

00:33:22,010 --> 00:33:26,600
configuration

00:33:22,669 --> 00:33:30,139
which is one 99.9% the same as the other

00:33:26,600 --> 00:33:33,409
configuration except the one case where

00:33:30,139 --> 00:33:35,929
the host name is mentioned just to go to

00:33:33,409 --> 00:33:41,090
have this tweak to go through the system

00:33:35,929 --> 00:33:43,399
here to go directly to the server with

00:33:41,090 --> 00:33:47,059
the smoke tests as I said we reach all

00:33:43,399 --> 00:33:51,950
the endpoints everything works but if

00:33:47,059 --> 00:33:53,359
not we won't you see there is something

00:33:51,950 --> 00:33:56,509
left here we won't go there

00:33:53,359 --> 00:33:58,519
we want we just stop there is an email

00:33:56,509 --> 00:34:00,590
sent to a lot of people that there's

00:33:58,519 --> 00:34:02,779
something failed and at least one of

00:34:00,590 --> 00:34:07,639
them has to look and has to double check

00:34:02,779 --> 00:34:09,399
what it's broken there and then we rerun

00:34:07,639 --> 00:34:12,669
the whole deployment if necessary or

00:34:09,399 --> 00:34:16,010
sometimes it happens that the DNS lookup

00:34:12,669 --> 00:34:17,329
cost some trouble especially at the

00:34:16,010 --> 00:34:22,669
beginning because we have didn't have

00:34:17,329 --> 00:34:24,649
the DNS lookup cache active and then we

00:34:22,669 --> 00:34:27,230
rerun just the tests in these cases and

00:34:24,649 --> 00:34:29,780
then we go to the next step on the last

00:34:27,230 --> 00:34:32,809
step and that's switching on the system

00:34:29,780 --> 00:34:37,520
so we have their currently active server

00:34:32,809 --> 00:34:40,210
B we just put in place server a tear

00:34:37,520 --> 00:34:42,409
this web service just to reload so every

00:34:40,210 --> 00:34:43,940
request which we've got already queued

00:34:42,409 --> 00:34:46,760
is still going to the old system

00:34:43,940 --> 00:34:51,309
every request which is from then moment

00:34:46,760 --> 00:34:51,309
on coming in is going to the new system

00:34:51,700 --> 00:34:58,849
and that's pretty much we are pretty

00:34:54,679 --> 00:35:01,839
much sorted already just the conclusion

00:34:58,849 --> 00:35:05,329
please do me a favor and write tests

00:35:01,839 --> 00:35:10,640
please do yourself the favor try to get

00:35:05,329 --> 00:35:12,200
to 100% it's hard to get there but you

00:35:10,640 --> 00:35:15,440
will love it when you are when you are

00:35:12,200 --> 00:35:18,049
there because 100 percent is a good

00:35:15,440 --> 00:35:20,210
number and 100 percent really make sure

00:35:18,049 --> 00:35:21,799
that you don't have any loopholes in

00:35:20,210 --> 00:35:23,990
there it's not saying that there are no

00:35:21,799 --> 00:35:25,910
bugs in the system but it gives the

00:35:23,990 --> 00:35:28,549
freedom to refactor code it gives the

00:35:25,910 --> 00:35:31,280
freedom to write clean code and getting

00:35:28,549 --> 00:35:35,150
hungry a 100% is forcing you in a lot of

00:35:31,280 --> 00:35:35,940
places to write clean code as I said

00:35:35,150 --> 00:35:39,210
before smoke

00:35:35,940 --> 00:35:42,990
your website and only activate the

00:35:39,210 --> 00:35:46,440
server if it's working if everything is

00:35:42,990 --> 00:35:48,660
fine and then I'm already done I already

00:35:46,440 --> 00:35:51,230
would love to see thank you and now I'm

00:35:48,660 --> 00:35:51,230
open for questions

00:35:56,540 --> 00:35:59,800
[Applause]

00:36:05,300 --> 00:36:11,910
hey and I unless you've already got two

00:36:10,560 --> 00:36:13,530
servers that you are paying for so I was

00:36:11,910 --> 00:36:15,780
wondering is there a reason not to do it

00:36:13,530 --> 00:36:19,260
on staging and then just deploy once I

00:36:15,780 --> 00:36:21,750
surpassed I'm a staging bigger yeah I

00:36:19,260 --> 00:36:24,960
get your point we are actually currently

00:36:21,750 --> 00:36:27,089
not doing a lot stage at all because but

00:36:24,960 --> 00:36:29,609
that's due to a database issue because

00:36:27,089 --> 00:36:32,339
our database between stage and life is

00:36:29,609 --> 00:36:35,099
not equal so we can't run the same list

00:36:32,339 --> 00:36:38,190
of your ads against the life under stage

00:36:35,099 --> 00:36:39,960
system and that's my opinion the biggest

00:36:38,190 --> 00:36:42,030
points you can still run it against your

00:36:39,960 --> 00:36:45,119
stage system but is it still showing you

00:36:42,030 --> 00:36:47,700
that not the hardware fails or your

00:36:45,119 --> 00:36:50,040
Redis went down without noticing or got

00:36:47,700 --> 00:36:51,720
stuck that's more the problem that's why

00:36:50,040 --> 00:36:54,990
we said we want to run that actually

00:36:51,720 --> 00:36:58,020
again if the life environment because

00:36:54,990 --> 00:37:00,450
only then we can be 100% certain that

00:36:58,020 --> 00:37:02,550
these pages we have they're listed

00:37:00,450 --> 00:37:07,020
actually work and actually will be

00:37:02,550 --> 00:37:13,530
available for the customers more

00:37:07,020 --> 00:37:15,319
question sir you were saying that you

00:37:13,530 --> 00:37:17,609
would probably do things differently now

00:37:15,319 --> 00:37:20,460
what sort of things might you do

00:37:17,609 --> 00:37:23,250
differently now yeah as I showed you in

00:37:20,460 --> 00:37:25,859
in the slides already was the library we

00:37:23,250 --> 00:37:27,390
just introduced early when while I was

00:37:25,859 --> 00:37:30,000
writing that library for this conference

00:37:27,390 --> 00:37:34,530
here I realized that we are not doing

00:37:30,000 --> 00:37:36,869
proper concurrent smoke testing and with

00:37:34,530 --> 00:37:40,410
this for proper concurrent smoke test

00:37:36,869 --> 00:37:43,980
because we in to explain it different in

00:37:40,410 --> 00:37:47,250
the way we did it before we just did

00:37:43,980 --> 00:37:49,410
concurrency but we send it a chunk of 10

00:37:47,250 --> 00:37:50,820
requests and waited at all

00:37:49,410 --> 00:37:54,240
at the same time I'd waited until the

00:37:50,820 --> 00:37:57,810
last one came back so we ended up like

00:37:54,240 --> 00:38:00,210
listed with 20,000 URLs at something

00:37:57,810 --> 00:38:00,720
like eight minutes which very kind of

00:38:00,210 --> 00:38:03,350
okay

00:38:00,720 --> 00:38:06,270
but now with the library I tested it I

00:38:03,350 --> 00:38:08,850
have expected more actually from from

00:38:06,270 --> 00:38:13,260
the library which is proper doing or

00:38:08,850 --> 00:38:15,720
doing proper concurrent testing but I

00:38:13,260 --> 00:38:18,120
only gained something like a minute on

00:38:15,720 --> 00:38:21,030
20,000 yards so I expected much more to

00:38:18,120 --> 00:38:24,600
get out there but if all pages are near

00:38:21,030 --> 00:38:27,590
to 100 milliseconds they are all coming

00:38:24,600 --> 00:38:33,270
back to me literally at the same time

00:38:27,590 --> 00:38:37,610
question sorted yeah thank you yeah you

00:38:33,270 --> 00:38:40,410
said like you know for normal case you

00:38:37,610 --> 00:38:43,080
just give that UK use case saying you're

00:38:40,410 --> 00:38:45,360
not serious when where you pass a smoke

00:38:43,080 --> 00:38:47,310
and look for where the smoke is coming

00:38:45,360 --> 00:38:49,550
from the other side right do you have

00:38:47,310 --> 00:38:52,290
any better use case in terms of code

00:38:49,550 --> 00:38:54,660
where we need to close all the in in

00:38:52,290 --> 00:38:59,100
points and you know check where the

00:38:54,660 --> 00:39:00,180
smoke is coming yeah as I said this if I

00:38:59,100 --> 00:39:03,300
get your question correct

00:39:00,180 --> 00:39:06,240
um the smoke tests when we see their

00:39:03,300 --> 00:39:09,720
smoke we have to look on on each single

00:39:06,240 --> 00:39:12,630
case what if it's just the DNS lookup as

00:39:09,720 --> 00:39:16,170
I mentioned before that's the usual case

00:39:12,630 --> 00:39:19,050
we have in the last months but now we

00:39:16,170 --> 00:39:21,750
have more often the problem that there

00:39:19,050 --> 00:39:25,290
is a redirect missing which someone

00:39:21,750 --> 00:39:27,930
forgot to set up and we never really had

00:39:25,290 --> 00:39:32,610
their bigger issues that a page sent us

00:39:27,930 --> 00:39:35,370
a 500 or a 4 for this mode the system

00:39:32,610 --> 00:39:38,670
every of the other tests in so the whole

00:39:35,370 --> 00:39:41,130
permit in in total is making sure that

00:39:38,670 --> 00:39:42,930
the system is working so since we have

00:39:41,130 --> 00:39:46,010
that whole permit in place yes we still

00:39:42,930 --> 00:39:49,380
have box yes not everything is perfect

00:39:46,010 --> 00:39:51,690
but with the permit in place we see much

00:39:49,380 --> 00:39:52,710
much earlier not on the deployments

00:39:51,690 --> 00:39:56,370
anymore

00:39:52,710 --> 00:39:57,990
when something is failing so and we have

00:39:56,370 --> 00:39:59,550
that at the far beginning when we

00:39:57,990 --> 00:40:02,650
introduce the crew meet we had there

00:39:59,550 --> 00:40:05,000
some trouble with

00:40:02,650 --> 00:40:07,099
that the database was not consistent

00:40:05,000 --> 00:40:09,559
that we for example when we made that

00:40:07,099 --> 00:40:12,349
system and we have there quite a strict

00:40:09,559 --> 00:40:14,119
rule what performance from a from a

00:40:12,349 --> 00:40:16,849
technical perspective should look like

00:40:14,119 --> 00:40:20,210
and the format name should look like so

00:40:16,849 --> 00:40:24,200
for us it's as an example F 0 for T is a

00:40:20,210 --> 00:40:27,470
small square card so we set up the roof

00:40:24,200 --> 00:40:29,390
Ridge but we tested it against our

00:40:27,470 --> 00:40:31,130
development environment we tested it

00:40:29,390 --> 00:40:33,470
even against our stage environment but

00:40:31,130 --> 00:40:36,170
as soon as we wanted to go live there

00:40:33,470 --> 00:40:38,359
was more than just f40 so there was more

00:40:36,170 --> 00:40:41,180
formats which we and a kind of

00:40:38,359 --> 00:40:43,010
performance existing and it's not just

00:40:41,180 --> 00:40:45,079
starting with an F for example for

00:40:43,010 --> 00:40:47,269
envelopes at EF we never thought about

00:40:45,079 --> 00:40:49,220
that and that's usually like the up

00:40:47,269 --> 00:40:52,819
we we had at the beginning with the

00:40:49,220 --> 00:40:54,829
tests to make sure that this this is

00:40:52,819 --> 00:40:56,690
helping us a lot because otherwise we

00:40:54,829 --> 00:40:59,869
might not have seen it that we wouldn't

00:40:56,690 --> 00:41:02,779
have run the whole permi question

00:40:59,869 --> 00:41:08,180
answered thank you very much there's one

00:41:02,779 --> 00:41:11,059
in the back you said you tested about

00:41:08,180 --> 00:41:12,859
25,000 URLs how did you go about getting

00:41:11,059 --> 00:41:15,259
the entire list of URLs on your site

00:41:12,859 --> 00:41:17,390
yeah okay that thank you thank you

00:41:15,259 --> 00:41:20,869
completely forgot about that topic

00:41:17,390 --> 00:41:24,769
it's our list of URLs is actually not

00:41:20,869 --> 00:41:27,769
dynamic so we tried it we thought about

00:41:24,769 --> 00:41:29,900
doing it dynamic but we ended up finding

00:41:27,769 --> 00:41:31,970
far too many reasons why the dynamic

00:41:29,900 --> 00:41:33,859
solution is not good because if you

00:41:31,970 --> 00:41:36,140
create that list dynamic on the stuff

00:41:33,859 --> 00:41:40,960
you just exported if you export us it

00:41:36,140 --> 00:41:44,299
just doing not 20,000 URLs but just two

00:41:40,960 --> 00:41:47,089
it still would would work it's they

00:41:44,299 --> 00:41:49,700
would run to smoke tests worked sorted

00:41:47,089 --> 00:41:53,059
so we set and that really would

00:41:49,700 --> 00:41:57,920
recommend that either take an own system

00:41:53,059 --> 00:42:00,980
to maintain us or as we did it we just

00:41:57,920 --> 00:42:02,720
have a CSV we have to CSV parts one for

00:42:00,980 --> 00:42:04,579
a new system one for the old system so

00:42:02,720 --> 00:42:08,150
for pretty much for each small test

00:42:04,579 --> 00:42:11,750
category we have an own CSV file which

00:42:08,150 --> 00:42:14,900
is holding all the US but to get these

00:42:11,750 --> 00:42:16,090
URLs there are two ways either you look

00:42:14,900 --> 00:42:18,190
in the index

00:42:16,090 --> 00:42:23,110
Google and make sure that you get them

00:42:18,190 --> 00:42:26,530
or what we did we when we were sure to

00:42:23,110 --> 00:42:29,770
cover all the pages manually um we just

00:42:26,530 --> 00:42:32,530
took our Redis and exported the list of

00:42:29,770 --> 00:42:35,920
available URLs into a file and since

00:42:32,530 --> 00:42:37,900
then it's menu so if there is the URL

00:42:35,920 --> 00:42:40,750
which is really a 4/4 which is really

00:42:37,900 --> 00:42:42,790
has to be taken out there is really and

00:42:40,750 --> 00:42:44,620
the deployment was necessary to take

00:42:42,790 --> 00:42:45,190
this URL out to make the system work

00:42:44,620 --> 00:42:48,580
again

00:42:45,190 --> 00:42:51,280
but that's the only way we figured which

00:42:48,580 --> 00:42:54,220
is making sure that your system stays

00:42:51,280 --> 00:42:57,010
stable because you have to double check

00:42:54,220 --> 00:42:59,980
that if there is a 4/4 on it on a Google

00:42:57,010 --> 00:43:02,770
index you don't want to have that there

00:42:59,980 --> 00:43:06,370
should be a proper redirect to the

00:43:02,770 --> 00:43:09,370
correct page only we we removed some 404

00:43:06,370 --> 00:43:11,500
pages recent just recently because they

00:43:09,370 --> 00:43:14,050
weren't in the index at all in the

00:43:11,500 --> 00:43:16,150
Google index at all and there was never

00:43:14,050 --> 00:43:17,860
content on it so someone created

00:43:16,150 --> 00:43:21,220
category pages without putting product

00:43:17,860 --> 00:43:25,540
on it so we took them out as well that's

00:43:21,220 --> 00:43:31,480
answering your question one here at the

00:43:25,540 --> 00:43:33,010
front detected an actual issue with this

00:43:31,480 --> 00:43:35,410
a smoke test and what kind of issues

00:43:33,010 --> 00:43:37,660
they were also as I said before usual

00:43:35,410 --> 00:43:41,440
the usual issue what we detect with the

00:43:37,660 --> 00:43:43,690
smoke test is we have once or twice that

00:43:41,440 --> 00:43:46,840
the red is doing me because we are

00:43:43,690 --> 00:43:49,900
pushing with much as much power as we

00:43:46,840 --> 00:43:52,690
have into the Redis so when the

00:43:49,900 --> 00:43:54,780
collected export is running we clean the

00:43:52,690 --> 00:43:58,590
red is completely we strip it empty and

00:43:54,780 --> 00:44:01,060
then we fill it as fast as we can and

00:43:58,590 --> 00:44:03,820
once in a while we had that that on the

00:44:01,060 --> 00:44:05,080
server it just stopped and we didn't see

00:44:03,820 --> 00:44:06,880
it we didn't see it during the

00:44:05,080 --> 00:44:12,100
deployment so pretty much last week the

00:44:06,880 --> 00:44:14,170
last push into Redis somehow he did so

00:44:12,100 --> 00:44:16,090
we couldn't access it anymore so and

00:44:14,170 --> 00:44:17,560
that's what what showed us the the smoke

00:44:16,090 --> 00:44:21,520
test because wherever we try to access

00:44:17,560 --> 00:44:23,200
the page the fury system answered for or

00:44:21,520 --> 00:44:24,730
for sorry I don't know that system

00:44:23,200 --> 00:44:29,500
because I have there an issue in Redis

00:44:24,730 --> 00:44:30,010
or Redis just didn't get it and redirect

00:44:29,500 --> 00:44:31,240
and

00:44:30,010 --> 00:44:32,830
then the reader back to the old system

00:44:31,240 --> 00:44:35,500
happened and the old system answered

00:44:32,830 --> 00:44:37,780
that's why I said we want to test the

00:44:35,500 --> 00:44:39,940
headers so I tested the header against

00:44:37,780 --> 00:44:43,300
the sister to make sure that this system

00:44:39,940 --> 00:44:45,670
the correct system is answering and

00:44:43,300 --> 00:44:50,230
therefore we saw that Redis for example

00:44:45,670 --> 00:44:52,020
went down or we see usual issues as I

00:44:50,230 --> 00:44:55,480
showed you before in there in the graph

00:44:52,020 --> 00:45:01,030
we see when the Patriot slows down so

00:44:55,480 --> 00:45:05,260
because we met some don't call me on

00:45:01,030 --> 00:45:06,910
days maybe two months ago someone

00:45:05,260 --> 00:45:09,130
introduced the front end feature I

00:45:06,910 --> 00:45:11,260
wanted to put something from from our

00:45:09,130 --> 00:45:12,940
new team members wanted to put a nice

00:45:11,260 --> 00:45:15,430
feature like putting the name when the

00:45:12,940 --> 00:45:18,490
customers locked in put the name at the

00:45:15,430 --> 00:45:22,420
top so that's your name and he used twig

00:45:18,490 --> 00:45:25,030
for it so we don't have trick rendering

00:45:22,420 --> 00:45:27,490
in the front end so now on each request

00:45:25,030 --> 00:45:28,750
we would have to fire up trick so we

00:45:27,490 --> 00:45:30,280
will of trick we have trick in the

00:45:28,750 --> 00:45:33,760
backend but we don't want to have it in

00:45:30,280 --> 00:45:35,730
the front end for us because it's yeah

00:45:33,760 --> 00:45:39,210
loading it up it's not necessary for us

00:45:35,730 --> 00:45:42,160
so we set a key if you want to do that

00:45:39,210 --> 00:45:42,850
don't do it this trick just do it for

00:45:42,160 --> 00:45:44,830
six part

00:45:42,850 --> 00:45:46,450
so because everything we have to treat

00:45:44,830 --> 00:45:48,340
still in the front end which comes out

00:45:46,450 --> 00:45:51,570
of thread is for actually showing like

00:45:48,340 --> 00:45:55,030
customer login status and all the stuff

00:45:51,570 --> 00:45:56,650
it's done with Xbox and video and that's

00:45:55,030 --> 00:45:59,680
what it what showed up as well because

00:45:56,650 --> 00:46:03,760
the time to first buy it went down from

00:45:59,680 --> 00:46:05,650
our 100 milliseconds or yeah we are from

00:46:03,760 --> 00:46:08,740
down from 100 milliseconds to something

00:46:05,650 --> 00:46:11,290
like 200 so a lot of PV pages they

00:46:08,740 --> 00:46:13,270
started to fail and it's the smoke tests

00:46:11,290 --> 00:46:14,860
got really slow and you can easily see

00:46:13,270 --> 00:46:17,500
that because we are running that

00:46:14,860 --> 00:46:19,420
environment really on a pipeline and our

00:46:17,500 --> 00:46:23,740
whole pipeline takes long usually

00:46:19,420 --> 00:46:25,990
something like 15 to 20 minutes when it

00:46:23,740 --> 00:46:28,180
takes more than 25 minutes and this it's

00:46:25,990 --> 00:46:32,970
usually smoke tests and then you have to

00:46:28,180 --> 00:46:32,970
look into it good more questions

00:46:35,130 --> 00:46:41,860
hi if I understand correctly this only

00:46:39,250 --> 00:46:43,200
does get requests at the moment yeah is

00:46:41,860 --> 00:46:46,020
doing only the

00:46:43,200 --> 00:46:47,970
the base that on get requests so would

00:46:46,020 --> 00:46:50,910
you not recommend doing post requests

00:46:47,970 --> 00:46:52,920
for example the problem or our solution

00:46:50,910 --> 00:46:55,950
for that is easy we don't have get

00:46:52,920 --> 00:46:58,830
requests in the new system so it's not

00:46:55,950 --> 00:47:01,890
it's not meant to be for post requests

00:46:58,830 --> 00:47:03,960
yet there is ideas to put them in there

00:47:01,890 --> 00:47:06,780
in the future as soon as we come to that

00:47:03,960 --> 00:47:09,180
point because post requests is based on

00:47:06,780 --> 00:47:11,850
the legacy system and we said we will

00:47:09,180 --> 00:47:14,670
introduce everything just for the for a

00:47:11,850 --> 00:47:16,110
new system to narrow our focus so we

00:47:14,670 --> 00:47:17,880
don't have to think about everything

00:47:16,110 --> 00:47:20,670
left and right we only narrow our focus

00:47:17,880 --> 00:47:22,680
on the on the top topic and tasks in

00:47:20,670 --> 00:47:26,520
front of us there will be in the future

00:47:22,680 --> 00:47:31,800
features available to have their post

00:47:26,520 --> 00:47:39,990
link list as well thank you okay good

00:47:31,800 --> 00:47:47,340
more questions okay then thanks again

00:47:39,990 --> 00:47:47,340

YouTube URL: https://www.youtube.com/watch?v=snDOv9J_vTY


