Title: PHP UK Conference 2017 - Michiel Rook - The Road to continuous deployment
Publication date: 2017-04-03
Playlist: PHP UK Conference 2017
Description: 
	It's a situation many of us are familiar with: a large legacy, monolithic application, limited or no tests, slow & manual release process, low velocity, no confidence... A lot of refactoring is required, but management keeps pushing for new features. How to proceed? Using examples and lessons learned from a real-world case, I'll show you how to replace a legacy application with a modern service-oriented architecture and build a continuous integration and deployment pipeline to deliver value from the first sprint. On the way, weâ€™ll take a look at the process, automated testing, monitoring, master/trunk based development and various tips and best practices.
Captions: 
	00:00:03,810 --> 00:00:09,519
thank you good morning hope your own

00:00:06,460 --> 00:00:11,620
join conference so far my name is Nikhil

00:00:09,519 --> 00:00:14,920
rock I'm from the Netherlands and today

00:00:11,620 --> 00:00:18,189
I'll be telling a little story for the

00:00:14,920 --> 00:00:19,750
next 50 minutes roughly 45 minutes I'll

00:00:18,189 --> 00:00:23,890
be talking about a project that took

00:00:19,750 --> 00:00:27,550
almost a year which means I'll compress

00:00:23,890 --> 00:00:31,269
a little bit what I'll be talking about

00:00:27,550 --> 00:00:35,740
may or may not apply to whatever you're

00:00:31,269 --> 00:00:37,960
doing daily if it does then great if it

00:00:35,740 --> 00:00:40,590
doesn't then maybe we can think of ways

00:00:37,960 --> 00:00:42,940
to get it there but this worked on a

00:00:40,590 --> 00:00:45,430
particular project it may not work on

00:00:42,940 --> 00:00:48,430
yours so that's the disclaimer that I

00:00:45,430 --> 00:00:52,120
want to start on right a little bit

00:00:48,430 --> 00:00:54,700
about me I'm a Java PHP and Scala

00:00:52,120 --> 00:00:56,260
contractor based in the Netherlands I do

00:00:54,700 --> 00:00:58,720
some international consulting as well

00:00:56,260 --> 00:01:01,540
but mostly in the Netherlands I train

00:00:58,720 --> 00:01:05,530
and coach teams and I do some speaking

00:01:01,540 --> 00:01:08,130
such as this conference I am part of a

00:01:05,530 --> 00:01:12,300
little company called mega yo where we

00:01:08,130 --> 00:01:15,220
coach consult and deliver technical

00:01:12,300 --> 00:01:17,320
products around continuous delivery and

00:01:15,220 --> 00:01:19,570
continuous deployment and I'm also part

00:01:17,320 --> 00:01:21,280
of a group of Dutch and Belgian web

00:01:19,570 --> 00:01:25,900
freelancers called the Dutch web lines

00:01:21,280 --> 00:01:28,960
if you after this talk one a shout

00:01:25,900 --> 00:01:30,900
complaints or general nastiness to me

00:01:28,960 --> 00:01:33,930
then that's my Twitter handle

00:01:30,900 --> 00:01:38,290
compliments are also welcome of course

00:01:33,930 --> 00:01:39,490
yeah let's get going I'll talk a little

00:01:38,290 --> 00:01:42,490
bit about the background of this story

00:01:39,490 --> 00:01:45,760
how it came to be where it was where it

00:01:42,490 --> 00:01:47,680
all took place the approach we took then

00:01:45,760 --> 00:01:50,200
a little bit about process and standards

00:01:47,680 --> 00:01:52,659
that we were setting with the team and

00:01:50,200 --> 00:01:55,390
as a team a little bit about Bill

00:01:52,659 --> 00:02:00,159
pipelines and to close off a lessons

00:01:55,390 --> 00:02:03,880
learned which there were a few right now

00:02:00,159 --> 00:02:06,549
this all took place in 2014 and 2015 in

00:02:03,880 --> 00:02:08,200
Amsterdam in the Netherlands

00:02:06,549 --> 00:02:09,940
specifically the north of Amsterdam

00:02:08,200 --> 00:02:11,800
which is as you can see has a beautiful

00:02:09,940 --> 00:02:13,240
view over the river that runs right

00:02:11,800 --> 00:02:17,710
through Amsterdam

00:02:13,240 --> 00:02:20,160
the iRiver and this company part of the

00:02:17,710 --> 00:02:22,780
pest group which is a Dutch Belgian

00:02:20,160 --> 00:02:26,830
conglomerate of newspapers and news

00:02:22,780 --> 00:02:30,700
sites they also operate a few job boards

00:02:26,830 --> 00:02:33,420
and one of the biggest job boards

00:02:30,700 --> 00:02:37,600
pictured there in the National job site

00:02:33,420 --> 00:02:39,310
for for Dutch jobs that's one of the

00:02:37,600 --> 00:02:43,150
most visited job sites in the

00:02:39,310 --> 00:02:45,670
Netherlands now as I said this all took

00:02:43,150 --> 00:02:48,820
place in 2014-2015 this was a

00:02:45,670 --> 00:02:52,840
traditional organization lots of

00:02:48,820 --> 00:02:58,060
waterfowl II asked development processes

00:02:52,840 --> 00:03:00,810
and that had to turn around they were

00:02:58,060 --> 00:03:03,400
dealing with a system called San Diego

00:03:00,810 --> 00:03:05,770
the relation to the actual city is

00:03:03,400 --> 00:03:07,930
completely coincidental by the way they

00:03:05,770 --> 00:03:11,260
just needed a name apparently it's

00:03:07,930 --> 00:03:14,260
called San Diego also called the big

00:03:11,260 --> 00:03:16,090
ball of mud the big ball of yarn the big

00:03:14,260 --> 00:03:19,780
ball of nastiness a large legacy

00:03:16,090 --> 00:03:21,840
monolithic application which happened to

00:03:19,780 --> 00:03:26,890
generate significant money for that

00:03:21,840 --> 00:03:30,250
company read millions of euros it was

00:03:26,890 --> 00:03:34,450
also very slow very complex hard to

00:03:30,250 --> 00:03:37,030
maintain lots of technical debt this

00:03:34,450 --> 00:03:40,060
came to be from a history of takeovers

00:03:37,030 --> 00:03:42,130
and mergers within the company that led

00:03:40,060 --> 00:03:46,510
to other code being ingested into the

00:03:42,130 --> 00:03:50,560
system or quick fixes hacks you probably

00:03:46,510 --> 00:03:53,700
know what I'm what I'm what I'm what I

00:03:50,560 --> 00:03:56,740
mean with that so it was a big

00:03:53,700 --> 00:03:59,200
relatively messy code base that took

00:03:56,740 --> 00:04:02,680
lots of work for simple features to get

00:03:59,200 --> 00:04:05,500
delivered also the team that was dealing

00:04:02,680 --> 00:04:08,140
with this application had relatively

00:04:05,500 --> 00:04:10,240
limited confidence in the application so

00:04:08,140 --> 00:04:13,930
they became very careful when changing

00:04:10,240 --> 00:04:14,470
it now San Diego looks a little like

00:04:13,930 --> 00:04:16,660
this

00:04:14,470 --> 00:04:20,950
in the top we have three job sites that

00:04:16,660 --> 00:04:23,020
the this company offers and they all go

00:04:20,950 --> 00:04:27,040
through the same set of load balancers

00:04:23,020 --> 00:04:31,060
furnishes etc from those load balance

00:04:27,040 --> 00:04:32,920
you end up in a front-end server which

00:04:31,060 --> 00:04:35,200
connects to a back-end server or

00:04:32,920 --> 00:04:36,760
multiple back-end servers the problem

00:04:35,200 --> 00:04:38,110
with that is that they run the exact

00:04:36,760 --> 00:04:40,090
same code and the only way to

00:04:38,110 --> 00:04:42,430
distinguish between the two is a flag

00:04:40,090 --> 00:04:45,240
you are front-end you are back end but

00:04:42,430 --> 00:04:48,280
they run the exact same repository

00:04:45,240 --> 00:04:49,740
sometimes they can talk crosswise to

00:04:48,280 --> 00:04:53,650
each other or depth-wise

00:04:49,740 --> 00:04:55,720
and it part of it is through an API part

00:04:53,650 --> 00:04:58,330
of it is through direct database calls

00:04:55,720 --> 00:04:59,770
so it was a little bit complicated a

00:04:58,330 --> 00:05:01,420
little bit messy and then in the bottom

00:04:59,770 --> 00:05:03,970
there's a bunch of external services

00:05:01,420 --> 00:05:06,820
like databases and solar and other stuff

00:05:03,970 --> 00:05:09,130
that this system would connect you now

00:05:06,820 --> 00:05:15,010
the release process for this application

00:05:09,130 --> 00:05:17,560
was long and consistent of large amounts

00:05:15,010 --> 00:05:19,480
of downtime so releases were scheduled

00:05:17,560 --> 00:05:22,120
over the weekend now the problem with it

00:05:19,480 --> 00:05:23,890
job site is that in general people that

00:05:22,120 --> 00:05:26,590
are looking for a job don't look for the

00:05:23,890 --> 00:05:30,250
job during the week they look for jobs

00:05:26,590 --> 00:05:32,380
at night and in the weekend and the

00:05:30,250 --> 00:05:35,470
people that actually put the jobs on the

00:05:32,380 --> 00:05:38,350
site recruiters companies they only do

00:05:35,470 --> 00:05:41,620
that from 9:00 to 5:00 daily on working

00:05:38,350 --> 00:05:43,120
days so taking the site offline during

00:05:41,620 --> 00:05:45,670
the weekend means that the paying

00:05:43,120 --> 00:05:47,470
customer aka the recruiter doesn't

00:05:45,670 --> 00:05:50,410
notice but the people that actually use

00:05:47,470 --> 00:05:53,440
the site to improve their life find a

00:05:50,410 --> 00:05:56,050
new job find a better job well sites

00:05:53,440 --> 00:05:58,740
offline they can do that and this

00:05:56,050 --> 00:06:02,500
happened regularly every four five weeks

00:05:58,740 --> 00:06:05,920
they went down for well a few hours at

00:06:02,500 --> 00:06:08,470
best and a one or two days at worst and

00:06:05,920 --> 00:06:11,320
then the days after would be

00:06:08,470 --> 00:06:14,980
firefighting right firefighting the

00:06:11,320 --> 00:06:17,010
release that was just the point now as I

00:06:14,980 --> 00:06:20,380
mentioned infrequent and manual releases

00:06:17,010 --> 00:06:22,330
the tests that this project had were if

00:06:20,380 --> 00:06:24,910
they were there and they were extremely

00:06:22,330 --> 00:06:28,300
fragile so they would fall over for no

00:06:24,910 --> 00:06:30,520
apparent reason and slow so not really

00:06:28,300 --> 00:06:35,320
trustworthy velocity development

00:06:30,520 --> 00:06:37,300
velocity of the team was low apart from

00:06:35,320 --> 00:06:39,940
firefighting new releases there were

00:06:37,300 --> 00:06:41,710
frequent outages and frequent issues

00:06:39,940 --> 00:06:44,680
performance problems all across the

00:06:41,710 --> 00:06:47,850
board a team that was becoming more and

00:06:44,680 --> 00:06:50,020
more frustrated with this system and

00:06:47,850 --> 00:06:52,690
like I said they had low confidence

00:06:50,020 --> 00:06:55,630
modifying that existing code now all

00:06:52,690 --> 00:06:57,610
these problems put together management

00:06:55,630 --> 00:07:02,190
and developers of course everybody

00:06:57,610 --> 00:07:05,980
started thinking how do we improve and

00:07:02,190 --> 00:07:07,450
management set a few goals one of the

00:07:05,980 --> 00:07:08,830
most important goals of course reduce

00:07:07,450 --> 00:07:11,890
the number of issues the number of

00:07:08,830 --> 00:07:15,370
outages the number of the time spent

00:07:11,890 --> 00:07:17,590
firefighting by the team also very

00:07:15,370 --> 00:07:20,820
important reducing lead and cycle times

00:07:17,590 --> 00:07:23,350
now the lead time and the cycle time are

00:07:20,820 --> 00:07:26,740
almost interchangeable not quite but

00:07:23,350 --> 00:07:29,530
basically they mean the time it takes

00:07:26,740 --> 00:07:32,800
for an idea to be put into production or

00:07:29,530 --> 00:07:37,720
to actually be usable by the end user by

00:07:32,800 --> 00:07:41,310
the customer now in San Diego's world

00:07:37,720 --> 00:07:45,820
that could take three or four months a

00:07:41,310 --> 00:07:47,680
long development process team that had

00:07:45,820 --> 00:07:51,430
low confidence in modifying the code and

00:07:47,680 --> 00:07:54,040
then the release schedule which is every

00:07:51,430 --> 00:07:57,010
four to five weeks so all these things

00:07:54,040 --> 00:07:59,620
combined you have a cycle time or lead

00:07:57,010 --> 00:08:02,260
time I mean which is easily two to three

00:07:59,620 --> 00:08:04,900
months for simple features over it which

00:08:02,260 --> 00:08:07,180
in the current climate at least four job

00:08:04,900 --> 00:08:09,490
sites is unacceptable right other

00:08:07,180 --> 00:08:11,230
companies are moving so much faster so

00:08:09,490 --> 00:08:14,250
you have to keep up up with them purely

00:08:11,230 --> 00:08:16,780
from a competitive standpoint now

00:08:14,250 --> 00:08:20,050
increasing productivity was also very

00:08:16,780 --> 00:08:21,820
important getting the team at a higher

00:08:20,050 --> 00:08:25,210
velocity and making getting them in

00:08:21,820 --> 00:08:27,910
control again but also increasing the

00:08:25,210 --> 00:08:29,470
motivation for those developers and not

00:08:27,910 --> 00:08:33,190
only the developers but everybody

00:08:29,470 --> 00:08:35,530
involved with that system right now if

00:08:33,190 --> 00:08:37,270
we have these four goals then the

00:08:35,530 --> 00:08:39,789
question becomes what do we do

00:08:37,270 --> 00:08:42,280
we can either refactor the current

00:08:39,789 --> 00:08:45,160
system or we can rebuild and by

00:08:42,280 --> 00:08:47,770
refactoring I mean piece wise put

00:08:45,160 --> 00:08:50,230
pulling pieces from the code making them

00:08:47,770 --> 00:08:51,860
better and improving that way they

00:08:50,230 --> 00:08:53,600
started doing that

00:08:51,860 --> 00:08:56,060
and after three months a very

00:08:53,600 --> 00:08:58,519
enthusiastic refactoring day had a test

00:08:56,060 --> 00:09:03,550
suite which ended up with 2.5% code

00:08:58,519 --> 00:09:07,279
coverage now this was in in terms of

00:09:03,550 --> 00:09:09,769
percentages this was a three or fourfold

00:09:07,279 --> 00:09:11,930
increase of what they had so this was

00:09:09,769 --> 00:09:15,320
pretty spectacular right but in absolute

00:09:11,930 --> 00:09:18,190
terms it's not really useful 2.5 percent

00:09:15,320 --> 00:09:21,440
and it also means that if you

00:09:18,190 --> 00:09:23,690
extrapolate that line it will take years

00:09:21,440 --> 00:09:26,480
to get to some sensible number like

00:09:23,690 --> 00:09:29,269
seven-year 80 percent so there was well

00:09:26,480 --> 00:09:30,890
obviously not going to work something

00:09:29,269 --> 00:09:32,930
like a commercial off-the-shelf product

00:09:30,890 --> 00:09:37,070
was also considered the problem with

00:09:32,930 --> 00:09:39,410
that is you can buy a job site somewhere

00:09:37,070 --> 00:09:41,060
and you can probably modify a logo or a

00:09:39,410 --> 00:09:43,490
few colors here and there but this

00:09:41,060 --> 00:09:45,290
company is built around the job site so

00:09:43,490 --> 00:09:47,740
it needs to innovate on the job site

00:09:45,290 --> 00:09:50,300
when you buy something off the shelf the

00:09:47,740 --> 00:09:53,240
ability to innovate is greatly lessened

00:09:50,300 --> 00:09:56,209
or maybe even zero so that's out of the

00:09:53,240 --> 00:09:58,839
question - and then a cut over rewrite

00:09:56,209 --> 00:10:02,329
or rebuilt was considered where we

00:09:58,839 --> 00:10:04,640
essentially built a new system like the

00:10:02,329 --> 00:10:06,500
old system but with a better design and

00:10:04,640 --> 00:10:09,829
then at some point we flip the switch

00:10:06,500 --> 00:10:11,690
the problem with that is you rebuilt all

00:10:09,829 --> 00:10:13,399
the bugs and all the problems that you

00:10:11,690 --> 00:10:16,550
have in the old system because they have

00:10:13,399 --> 00:10:18,260
become features over time right people

00:10:16,550 --> 00:10:19,760
expect it to work that way because it

00:10:18,260 --> 00:10:23,930
always worked that way even if it was

00:10:19,760 --> 00:10:26,390
wrong and a lot of the why the reasoning

00:10:23,930 --> 00:10:28,459
behind certain features certain code has

00:10:26,390 --> 00:10:29,810
biggg has become lost it's stuck in a

00:10:28,459 --> 00:10:31,899
drawer somewhere or the people that

00:10:29,810 --> 00:10:34,880
thought of it have long left the company

00:10:31,899 --> 00:10:37,730
so you don't really know why things are

00:10:34,880 --> 00:10:41,329
that way right so that was often out of

00:10:37,730 --> 00:10:45,520
the question as well so that's very

00:10:41,329 --> 00:10:48,260
positive well the approach we took is

00:10:45,520 --> 00:10:49,820
something called strangulation and now I

00:10:48,260 --> 00:10:53,120
don't mean the physical act of

00:10:49,820 --> 00:10:55,550
strangulating but it does really there

00:10:53,120 --> 00:10:58,070
is a resemblance and I'll show you in a

00:10:55,550 --> 00:11:00,500
little bit what I mean with that API

00:10:58,070 --> 00:11:03,800
first so instead of doing all sorts of

00:11:00,500 --> 00:11:05,630
weird internal procedure calls we

00:11:03,800 --> 00:11:10,360
consider everything in API

00:11:05,630 --> 00:11:15,440
and consume your own dog food so if we

00:11:10,360 --> 00:11:17,930
if we and or if we open up api's to

00:11:15,440 --> 00:11:20,569
other people to other parties to other

00:11:17,930 --> 00:11:23,079
companies to inject jobs for example we

00:11:20,569 --> 00:11:26,449
use the same API internally as well

00:11:23,079 --> 00:11:27,680
otherwise we will never get the API to

00:11:26,449 --> 00:11:31,149
the level of where they're actually

00:11:27,680 --> 00:11:34,399
useful right so consume your API own API

00:11:31,149 --> 00:11:36,529
we have services per domain object in

00:11:34,399 --> 00:11:38,810
this case and the domain objects would

00:11:36,529 --> 00:11:41,540
be a job and a job seeker and a few

00:11:38,810 --> 00:11:44,029
other things so the services would not

00:11:41,540 --> 00:11:46,069
necessarily be micro services a little

00:11:44,029 --> 00:11:48,800
bit bigger but small enough for our case

00:11:46,069 --> 00:11:51,709
and we started migrating individual

00:11:48,800 --> 00:11:53,930
pages individual pages on the site and

00:11:51,709 --> 00:11:55,670
what do I mean with that the

00:11:53,930 --> 00:11:58,040
strangulation pattern on the Left we

00:11:55,670 --> 00:12:02,630
start with the monolith which connects

00:11:58,040 --> 00:12:04,339
to a database and it is in it is in

00:12:02,630 --> 00:12:08,000
contact with the internet so it can be

00:12:04,339 --> 00:12:10,670
accessed from the engine step 2 we add a

00:12:08,000 --> 00:12:13,189
proxy between internet and the monolith

00:12:10,670 --> 00:12:15,189
and initially that proxy doesn't do

00:12:13,189 --> 00:12:18,649
anything it just passes as a traffic

00:12:15,189 --> 00:12:21,339
one-to-one to the monolith right but

00:12:18,649 --> 00:12:27,009
then we start adding a new service and

00:12:21,339 --> 00:12:30,410
that could be a front-end as well and it

00:12:27,009 --> 00:12:32,569
it has some functionality we developed

00:12:30,410 --> 00:12:34,639
some feature in that new service and at

00:12:32,569 --> 00:12:36,889
some point it's ready and we can put a

00:12:34,639 --> 00:12:39,800
switch in the proxy that if you access

00:12:36,889 --> 00:12:41,930
that page whatever depth Service is

00:12:39,800 --> 00:12:44,480
implementing we route the traffic to the

00:12:41,930 --> 00:12:46,189
new service and the traffic doesn't end

00:12:44,480 --> 00:12:48,259
up on the original monolith anymore and

00:12:46,189 --> 00:12:50,899
then we build services and we build

00:12:48,259 --> 00:12:52,459
services in etc etc until at some point

00:12:50,899 --> 00:12:54,350
the monolith is not actually doing

00:12:52,459 --> 00:12:57,730
anything anymore it's not receiving any

00:12:54,350 --> 00:13:00,920
traffic in effect it has been strangled

00:12:57,730 --> 00:13:03,949
the strangulation pattern comes from a

00:13:00,920 --> 00:13:06,920
tree which grows on another tree and

00:13:03,949 --> 00:13:09,860
basically constricts or strangles the

00:13:06,920 --> 00:13:11,389
original tree its host until the host no

00:13:09,860 --> 00:13:14,389
longer can survive and withers and dies

00:13:11,389 --> 00:13:17,360
all very positive again but in this case

00:13:14,389 --> 00:13:19,360
it would be our monolith right so at

00:13:17,360 --> 00:13:21,790
some point we have enough functionality

00:13:19,360 --> 00:13:26,589
for a monolith to be obsolete and we can

00:13:21,790 --> 00:13:28,360
throw it in a bin and the proxy could

00:13:26,589 --> 00:13:33,490
look something like this this is an

00:13:28,360 --> 00:13:36,279
Apache and what this little snippet says

00:13:33,490 --> 00:13:39,430
is that for people on Iran to our own

00:13:36,279 --> 00:13:43,029
internal network let's say that IP range

00:13:39,430 --> 00:13:44,649
we rewrite everything feature slash to

00:13:43,029 --> 00:13:47,380
the new service and the rest goes to the

00:13:44,649 --> 00:13:49,540
monolith and we can then at some point

00:13:47,380 --> 00:13:51,790
if we're happy with how that is

00:13:49,540 --> 00:13:53,680
performing internally we can remove that

00:13:51,790 --> 00:13:59,500
condition and let everybody see it

00:13:53,680 --> 00:14:02,260
and we iterate and iterate like that now

00:13:59,500 --> 00:14:04,839
we also said that every service that we

00:14:02,260 --> 00:14:07,120
have needs to be scalable so it needs to

00:14:04,839 --> 00:14:09,310
be behind a load balancer so we can

00:14:07,120 --> 00:14:13,269
easily scale up and down the number of

00:14:09,310 --> 00:14:14,829
replicas per service unfortunately we

00:14:13,269 --> 00:14:19,120
need to be able to access some legacy

00:14:14,829 --> 00:14:21,130
databases and convert that data we need

00:14:19,120 --> 00:14:22,810
to do continuous deployment from day one

00:14:21,130 --> 00:14:25,870
what that means I'll explain in a little

00:14:22,810 --> 00:14:28,540
bit everything as a docker container so

00:14:25,870 --> 00:14:31,839
docker containers all the way how every

00:14:28,540 --> 00:14:33,339
service as a container and I mentioned

00:14:31,839 --> 00:14:35,290
this before a little bit the front ends

00:14:33,339 --> 00:14:38,430
our services as well they expose an API

00:14:35,290 --> 00:14:42,550
right they're accessible through HTTP

00:14:38,430 --> 00:14:45,070
and in turn they use api's to access

00:14:42,550 --> 00:14:46,510
other services so the front ends are at

00:14:45,070 --> 00:14:50,490
the exact same levels or the other

00:14:46,510 --> 00:14:52,899
services and we consider them as such

00:14:50,490 --> 00:14:54,880
that leads to this architectural

00:14:52,899 --> 00:14:57,970
overview where we still have the three

00:14:54,880 --> 00:15:00,070
sites but now instead of our group of

00:14:57,970 --> 00:15:04,029
front and services they are served by

00:15:00,070 --> 00:15:06,550
their own front-end services for the

00:15:04,029 --> 00:15:10,500
three sites they in turn connect to

00:15:06,550 --> 00:15:13,899
internal services using api's which have

00:15:10,500 --> 00:15:16,990
access to their own data storage search

00:15:13,899 --> 00:15:19,660
engines what have you and then San Diego

00:15:16,990 --> 00:15:22,029
is off on the side it's actually in a

00:15:19,660 --> 00:15:25,240
different data center all the new stuff

00:15:22,029 --> 00:15:27,579
is on Amazon in this case and we have a

00:15:25,240 --> 00:15:29,500
tunnel between the two networks so that

00:15:27,579 --> 00:15:31,930
if we need to access legacy data or

00:15:29,500 --> 00:15:34,170
legacy code we can access that through a

00:15:31,930 --> 00:15:34,170
tunnel

00:15:34,600 --> 00:15:40,910
so now that we have an architecture in

00:15:38,000 --> 00:15:43,399
place it's very important to set a

00:15:40,910 --> 00:15:47,209
process and the process in this this

00:15:43,399 --> 00:15:49,490
particular project was kick-started by a

00:15:47,209 --> 00:15:53,029
few external consultants of which I was

00:15:49,490 --> 00:15:55,670
one but the team was involved from the

00:15:53,029 --> 00:15:57,430
very very beginning because team

00:15:55,670 --> 00:16:01,009
acceptance is key for something as

00:15:57,430 --> 00:16:04,279
dramatic as this right so they were

00:16:01,009 --> 00:16:06,019
involved from the very beginning one of

00:16:04,279 --> 00:16:07,399
the process changed that we said is that

00:16:06,019 --> 00:16:10,310
everything is going to happen

00:16:07,399 --> 00:16:14,060
continuously and by everything I

00:16:10,310 --> 00:16:16,160
literally mean everything we go from a

00:16:14,060 --> 00:16:20,629
project type development lifecycle to a

00:16:16,160 --> 00:16:23,000
product type development cycle so and a

00:16:20,629 --> 00:16:26,449
product type cycle is it only has a

00:16:23,000 --> 00:16:28,850
start it has an end the only end you

00:16:26,449 --> 00:16:30,829
have is when you say ok my product is

00:16:28,850 --> 00:16:33,829
now obsolete and I don't offer my

00:16:30,829 --> 00:16:35,779
product anymore which in this case would

00:16:33,829 --> 00:16:38,870
mean that the company doesn't exist

00:16:35,779 --> 00:16:40,970
anymore so there isn't an end like you

00:16:38,870 --> 00:16:42,259
have in a project and we have a

00:16:40,970 --> 00:16:43,880
six-month project and then we have

00:16:42,259 --> 00:16:46,120
another six-month project now this is a

00:16:43,880 --> 00:16:48,529
product so it keeps evolving

00:16:46,120 --> 00:16:54,889
continuously everything we do is

00:16:48,529 --> 00:16:56,509
continuously the talk or the name of

00:16:54,889 --> 00:16:58,819
this talk is continue the road to

00:16:56,509 --> 00:17:01,339
continuous deployment now that

00:16:58,819 --> 00:17:03,529
particular phrase continuous deployment

00:17:01,339 --> 00:17:06,409
there's some confusion on what it

00:17:03,529 --> 00:17:10,130
actually means and I'll give my view

00:17:06,409 --> 00:17:13,100
today there are some differing views

00:17:10,130 --> 00:17:16,490
that's all fine but I'm going to give my

00:17:13,100 --> 00:17:18,919
view CD starts with continuous

00:17:16,490 --> 00:17:21,679
integration this is a pattern that's

00:17:18,919 --> 00:17:24,110
older it basically says we have a

00:17:21,679 --> 00:17:27,079
developer somewhere checks in some code

00:17:24,110 --> 00:17:29,990
to get up.get lab whatever and some

00:17:27,079 --> 00:17:32,809
process starts building that goal now in

00:17:29,990 --> 00:17:34,789
terms of PHP building may or doesn't

00:17:32,809 --> 00:17:36,919
mean compiling like it does in Java or

00:17:34,789 --> 00:17:39,289
scholar or other languages but building

00:17:36,919 --> 00:17:42,370
could still be like minifying your Jas

00:17:39,289 --> 00:17:44,919
or your CSS or combining other stuff

00:17:42,370 --> 00:17:46,650
linting syntax checks all those things

00:17:44,919 --> 00:17:49,170
those all happen in

00:17:46,650 --> 00:17:52,950
built step and of course running tests

00:17:49,170 --> 00:17:56,160
happens there as well now see I you can

00:17:52,950 --> 00:17:59,310
have Jenkins or Travis or circle or any

00:17:56,160 --> 00:18:02,100
other tool that basically all do the

00:17:59,310 --> 00:18:04,890
same at the end you have an artifact it

00:18:02,100 --> 00:18:07,320
may be a far archive or a zip or tar or

00:18:04,890 --> 00:18:08,730
something else that is deployable but it

00:18:07,320 --> 00:18:12,120
doesn't actually do anything with the

00:18:08,730 --> 00:18:14,280
ark artifact other than generated now

00:18:12,120 --> 00:18:16,620
continuous delivery then takes the

00:18:14,280 --> 00:18:20,310
artifact and automatically deploys it to

00:18:16,620 --> 00:18:22,470
some acceptance environment and on the

00:18:20,310 --> 00:18:26,160
acceptance environment we can then do

00:18:22,470 --> 00:18:27,960
manual checks click through it verify

00:18:26,160 --> 00:18:30,240
the product and then at some point we

00:18:27,960 --> 00:18:33,600
can deploy to production now deploying

00:18:30,240 --> 00:18:36,830
to production should be automatically as

00:18:33,600 --> 00:18:39,720
in we need to have scripts which can

00:18:36,830 --> 00:18:42,180
automatically deploy to production but

00:18:39,720 --> 00:18:44,070
as you see the red arrow there the

00:18:42,180 --> 00:18:46,260
actual invoking of the script or the

00:18:44,070 --> 00:18:49,530
triggering is a manual action so they're

00:18:46,260 --> 00:18:51,270
still human involved right we deploy to

00:18:49,530 --> 00:18:52,830
acceptance automatically as soon as the

00:18:51,270 --> 00:18:55,800
artifact is completed in the build stage

00:18:52,830 --> 00:18:59,160
and then at some point somebody says ok

00:18:55,800 --> 00:19:00,690
this is good enough stomps on the on a

00:18:59,160 --> 00:19:02,670
button somewhere and the deploy to

00:19:00,690 --> 00:19:05,100
production happens that's continuous

00:19:02,670 --> 00:19:07,620
delivery what continues delivery also

00:19:05,100 --> 00:19:12,060
states is that code is should always be

00:19:07,620 --> 00:19:14,820
deployable and by that it means of

00:19:12,060 --> 00:19:18,060
course that you cannot break your master

00:19:14,820 --> 00:19:22,320
branch or your trunk it should always be

00:19:18,060 --> 00:19:26,790
deployable in a deployables state now

00:19:22,320 --> 00:19:29,130
continuous deployment then is what some

00:19:26,790 --> 00:19:30,870
considered the holy grail all the errors

00:19:29,130 --> 00:19:33,750
are green there's no human involvement

00:19:30,870 --> 00:19:35,670
anymore basically this means that we

00:19:33,750 --> 00:19:38,460
from the build stage we deploy to

00:19:35,670 --> 00:19:40,230
acceptance which at this point loses its

00:19:38,460 --> 00:19:42,630
meaning the name at least because

00:19:40,230 --> 00:19:44,850
there's nothing to accept other than

00:19:42,630 --> 00:19:48,030
automated processes which do acceptance

00:19:44,850 --> 00:19:50,220
so depending on your automated checks it

00:19:48,030 --> 00:19:52,680
may be called staging or pre-production

00:19:50,220 --> 00:19:55,800
or functionally equivalent to production

00:19:52,680 --> 00:19:58,320
whatever if that all goes well

00:19:55,800 --> 00:20:00,330
everything comes up in staging or

00:19:58,320 --> 00:20:02,129
acceptance correctly and

00:20:00,330 --> 00:20:04,200
we then automatically deploy to

00:20:02,129 --> 00:20:07,649
production and there's no human

00:20:04,200 --> 00:20:09,539
involvement anymore now the idea is that

00:20:07,649 --> 00:20:13,739
if you automate this from start to

00:20:09,539 --> 00:20:16,259
finish and my personal wish or my

00:20:13,739 --> 00:20:17,940
personal metric is that by the end of

00:20:16,259 --> 00:20:21,809
production it should take no more than

00:20:17,940 --> 00:20:24,359
20 minutes from the actual first push to

00:20:21,809 --> 00:20:28,169
get up so that's a very short process if

00:20:24,359 --> 00:20:30,029
you do that like that it takes the

00:20:28,169 --> 00:20:33,570
excitement out of releases out of the

00:20:30,029 --> 00:20:36,869
point if it happens so often it's it's

00:20:33,570 --> 00:20:39,779
become standard right now why would we

00:20:36,869 --> 00:20:41,609
do this one of the things and continues

00:20:39,779 --> 00:20:44,309
delivery and deployment is that it

00:20:41,609 --> 00:20:46,320
allows us to do small steps right if we

00:20:44,309 --> 00:20:48,809
could release every single commit and

00:20:46,320 --> 00:20:52,320
the commit is very small we don't commit

00:20:48,809 --> 00:20:55,589
entire pages of code right so every step

00:20:52,320 --> 00:20:58,129
that we deploy is very small it also

00:20:55,589 --> 00:21:00,779
allows us to get early feedback on

00:20:58,129 --> 00:21:03,179
whatever we're working on remember that

00:21:00,779 --> 00:21:06,029
I was talking about product lifecycle we

00:21:03,179 --> 00:21:09,239
have an idea let's put this feature in

00:21:06,029 --> 00:21:11,369
for 50% of our users and we don't want

00:21:09,239 --> 00:21:14,609
to wait for that release cycle to get us

00:21:11,369 --> 00:21:17,489
there in the next 4 to 8 to 16 weeks

00:21:14,609 --> 00:21:20,429
whatever because that would then mean

00:21:17,489 --> 00:21:23,279
that we get feedback which is a not

00:21:20,429 --> 00:21:24,690
early but be influenced by all the other

00:21:23,279 --> 00:21:27,450
things that are part of that release

00:21:24,690 --> 00:21:30,419
right so it becomes impossible to track

00:21:27,450 --> 00:21:34,289
those variables reducing time to recover

00:21:30,419 --> 00:21:35,909
if you have a pipeline which deploys to

00:21:34,289 --> 00:21:39,080
production in 20 minutes and you have a

00:21:35,909 --> 00:21:42,509
serious issue which is a bug in the code

00:21:39,080 --> 00:21:45,330
and if for example it was the last

00:21:42,509 --> 00:21:47,039
commit that broke it revert that last

00:21:45,330 --> 00:21:51,869
commit and 20 minutes later

00:21:47,039 --> 00:21:54,619
everything's fine again and last but not

00:21:51,869 --> 00:21:57,929
least experimentation product lifecycle

00:21:54,619 --> 00:22:00,960
product IDs combined with early feedback

00:21:57,929 --> 00:22:02,669
lead to experimentation a product

00:22:00,960 --> 00:22:06,109
manager a product owner thinking like if

00:22:02,669 --> 00:22:09,179
we try this move this button there or

00:22:06,109 --> 00:22:11,309
change this on the page or whatever you

00:22:09,179 --> 00:22:12,990
can think of how does how do our

00:22:11,309 --> 00:22:14,990
consumers react

00:22:12,990 --> 00:22:18,090
something that Netflix and Amazon do

00:22:14,990 --> 00:22:19,860
constantly right if we change the

00:22:18,090 --> 00:22:22,670
background of the movie title to another

00:22:19,860 --> 00:22:26,100
color do people click more or less on it

00:22:22,670 --> 00:22:27,870
if we do this do people react in a

00:22:26,100 --> 00:22:31,470
certain way or a certain another certain

00:22:27,870 --> 00:22:32,940
way so that's very important in

00:22:31,470 --> 00:22:37,650
continuous deployment that it allows you

00:22:32,940 --> 00:22:39,360
to experiment with product IDs and teams

00:22:37,650 --> 00:22:42,240
that do continuous deployment and

00:22:39,360 --> 00:22:45,750
generally suffer from these incredible

00:22:42,240 --> 00:22:48,090
statistics that they deploy 200 times

00:22:45,750 --> 00:22:51,179
more frequently than teams that don't

00:22:48,090 --> 00:22:54,450
they recover from failures 24 times

00:22:51,179 --> 00:22:57,059
faster change failure rate which is

00:22:54,450 --> 00:23:01,070
three times lower but the most

00:22:57,059 --> 00:23:04,830
impressive one two and a half thousand

00:23:01,070 --> 00:23:06,750
times shorter lead times so that means

00:23:04,830 --> 00:23:08,340
that instead of three months we end up

00:23:06,750 --> 00:23:13,320
with a week tops

00:23:08,340 --> 00:23:16,050
of lead time now one of the things we

00:23:13,320 --> 00:23:20,250
said early on in this team is that we

00:23:16,050 --> 00:23:25,860
need to do TDD as a as a rule who here

00:23:20,250 --> 00:23:28,020
regularly performs TDD is roughly what I

00:23:25,860 --> 00:23:31,050
expect it depends a little bit on the

00:23:28,020 --> 00:23:35,190
audience how many how much how many

00:23:31,050 --> 00:23:38,130
hands I see anywhere from 25 to 50

00:23:35,190 --> 00:23:41,059
percent I rarely get above 50 percent so

00:23:38,130 --> 00:23:49,020
that's that's par for the course

00:23:41,059 --> 00:23:51,210
BDD then yeah that's also usually you

00:23:49,020 --> 00:23:53,670
see forty to fifty percent of the

00:23:51,210 --> 00:23:56,580
audience say I regularly do TDD and then

00:23:53,670 --> 00:24:01,200
a BDD is thirty to forty percent of

00:23:56,580 --> 00:24:05,429
death I'll explain in a little bit why

00:24:01,200 --> 00:24:07,590
this is extremely necessary now I talked

00:24:05,429 --> 00:24:09,870
about pushing commits and deploying

00:24:07,590 --> 00:24:12,809
commits one of the rules you say is that

00:24:09,870 --> 00:24:15,360
every commit goes to production and by

00:24:12,809 --> 00:24:17,309
every commit I mean it could be two or

00:24:15,360 --> 00:24:20,490
three commits depending on where when

00:24:17,309 --> 00:24:24,090
our jenkins in this case starts there

00:24:20,490 --> 00:24:26,340
could be a small window small delay so

00:24:24,090 --> 00:24:26,790
so the two or three commits may be group

00:24:26,340 --> 00:24:28,950
but it's

00:24:26,790 --> 00:24:30,870
going to be more than that and assuming

00:24:28,950 --> 00:24:32,790
all the tests are green etc etc that

00:24:30,870 --> 00:24:37,800
those commits end up in production

00:24:32,790 --> 00:24:42,150
within 10 to 20 minutes that requires a

00:24:37,800 --> 00:24:47,220
few things within the team and what they

00:24:42,150 --> 00:24:49,320
discovered quickly was this only commit

00:24:47,220 --> 00:24:51,330
to master and by only committing to

00:24:49,320 --> 00:24:55,890
master or trunk if you will I mean we

00:24:51,330 --> 00:25:02,910
don't use branches ever bring in the

00:24:55,890 --> 00:25:04,500
pitchforks this is the when I when I say

00:25:02,910 --> 00:25:08,960
don't use branches ever I always get

00:25:04,500 --> 00:25:11,220
reactions from sure to downright hostile

00:25:08,960 --> 00:25:15,750
which is why I included the pitchfork

00:25:11,220 --> 00:25:18,360
image but I'll explain why this is well

00:25:15,750 --> 00:25:24,030
one nice image of what branches do for

00:25:18,360 --> 00:25:27,960
you but what branches do for you in real

00:25:24,030 --> 00:25:29,940
life is they delay integration and by

00:25:27,960 --> 00:25:32,730
delaying integration I mean depending on

00:25:29,940 --> 00:25:35,040
the lifetime of your branch it takes a

00:25:32,730 --> 00:25:37,560
while for it to merge back to master at

00:25:35,040 --> 00:25:41,700
which point you'll run tests or you run

00:25:37,560 --> 00:25:43,980
the point and we try to do small steps

00:25:41,700 --> 00:25:46,320
which is impossible if you have long

00:25:43,980 --> 00:25:48,840
branches because they end up being one

00:25:46,320 --> 00:25:56,070
single commit emerge commit which could

00:25:48,840 --> 00:25:59,190
be pages of code right what I also think

00:25:56,070 --> 00:26:01,080
in terms of branches is and this is

00:25:59,190 --> 00:26:04,160
going to sound a little bit harsh but

00:26:01,080 --> 00:26:08,280
it's an abuse of version control for

00:26:04,160 --> 00:26:11,250
functional separation and by that I mean

00:26:08,280 --> 00:26:13,200
feature branches are used to separate to

00:26:11,250 --> 00:26:15,330
functionally separate or to seperate

00:26:13,200 --> 00:26:17,400
functionality right product owner says

00:26:15,330 --> 00:26:20,400
ok this feature is now ready it can be

00:26:17,400 --> 00:26:24,180
merged to master which is abusing

00:26:20,400 --> 00:26:26,520
version control for the act of

00:26:24,180 --> 00:26:28,260
separating different functionalities or

00:26:26,520 --> 00:26:30,290
releasing functionalities in the

00:26:28,260 --> 00:26:33,210
difference in a certain sequence and

00:26:30,290 --> 00:26:36,660
I'll I'll give in an alternative in a

00:26:33,210 --> 00:26:38,460
little bit but no branches also means no

00:26:36,660 --> 00:26:40,410
pull requests because they are branches

00:26:38,460 --> 00:26:43,050
no matter how long the pool

00:26:40,410 --> 00:26:45,840
Qwest exists hopefully it exists for

00:26:43,050 --> 00:26:47,430
only a few hours depending on if

00:26:45,840 --> 00:26:49,770
somebody is ready to review the pool

00:26:47,430 --> 00:26:53,010
request but there are still branches

00:26:49,770 --> 00:26:56,120
there is one exception and one exception

00:26:53,010 --> 00:27:00,150
only and that's work in progress or

00:26:56,120 --> 00:27:02,030
prototyping and prototypes of course are

00:27:00,150 --> 00:27:05,670
thrown away after we're done with them

00:27:02,030 --> 00:27:08,280
right but they can be put on the branch

00:27:05,670 --> 00:27:12,630
if other people on the team need to see

00:27:08,280 --> 00:27:14,460
it now I hear you think okay no pool

00:27:12,630 --> 00:27:20,690
requests how the hell do we do code

00:27:14,460 --> 00:27:20,690
reviews then right pair programming

00:27:21,400 --> 00:27:27,280
I would not advise advise doing it like

00:27:24,910 --> 00:27:29,350
this is not particularly effective but

00:27:27,280 --> 00:27:31,870
still pair programming we don't enforce

00:27:29,350 --> 00:27:33,610
this but we encourage this the team

00:27:31,870 --> 00:27:36,010
learns very quickly to do pair

00:27:33,610 --> 00:27:38,710
programming for excuse me pair

00:27:36,010 --> 00:27:42,190
programming because it's a continuous

00:27:38,710 --> 00:27:45,550
code review right you put two people

00:27:42,190 --> 00:27:46,870
together and hopefully it's one person

00:27:45,550 --> 00:27:48,520
that's a little bit more experienced

00:27:46,870 --> 00:27:49,840
combined with a person that's a little

00:27:48,520 --> 00:27:53,350
bit less experienced so you get

00:27:49,840 --> 00:27:55,780
knowledge transfer as well and so you

00:27:53,350 --> 00:27:58,480
mix experience levels but you get a

00:27:55,780 --> 00:28:00,670
continuous code review right instead of

00:27:58,480 --> 00:28:03,070
one developer hacking on his or her

00:28:00,670 --> 00:28:04,930
laptop and then checking it in pull

00:28:03,070 --> 00:28:06,880
requests another developer checking that

00:28:04,930 --> 00:28:10,120
pull requests you now bring those two

00:28:06,880 --> 00:28:13,210
people together and in line make it

00:28:10,120 --> 00:28:15,660
better and this is a lot faster leads

00:28:13,210 --> 00:28:19,480
their emergent design that's a lot more

00:28:15,660 --> 00:28:22,090
lean than it would with branches or pool

00:28:19,480 --> 00:28:25,380
requests it requires discipline though

00:28:22,090 --> 00:28:27,310
and not everybody is comfortable

00:28:25,380 --> 00:28:31,090
continuously sitting next to another

00:28:27,310 --> 00:28:33,010
person but that's something that you can

00:28:31,090 --> 00:28:36,220
get used to at least that's my

00:28:33,010 --> 00:28:38,470
experience it also means that we pair on

00:28:36,220 --> 00:28:42,010
everything and with everything

00:28:38,470 --> 00:28:44,380
I mean scripts for automation server

00:28:42,010 --> 00:28:47,470
setups all those things because it

00:28:44,380 --> 00:28:49,740
becomes a team responsibility and I'll

00:28:47,470 --> 00:28:53,200
discuss that in a little bit as well

00:28:49,740 --> 00:28:56,020
focusing on value I talked about the

00:28:53,200 --> 00:28:58,930
strangulation pattern and that we build

00:28:56,020 --> 00:29:02,200
up a new surface to strangle our

00:28:58,930 --> 00:29:04,150
monolith at some point now we want to

00:29:02,200 --> 00:29:07,210
deliver value for the business again

00:29:04,150 --> 00:29:10,870
right increase their confidence in us

00:29:07,210 --> 00:29:14,260
again restore cooperation so that means

00:29:10,870 --> 00:29:17,080
that we focus on value creation and not

00:29:14,260 --> 00:29:19,420
necessarily on just moving parts out of

00:29:17,080 --> 00:29:21,730
the old system and copying them verbatim

00:29:19,420 --> 00:29:24,280
but we focus on new features and new

00:29:21,730 --> 00:29:26,110
features are only developed in a new

00:29:24,280 --> 00:29:28,650
system so we don't touch the monolith

00:29:26,110 --> 00:29:32,380
unless we absolutely positively have to

00:29:28,650 --> 00:29:34,870
because it's still generating money but

00:29:32,380 --> 00:29:37,350
in principle new code only

00:29:34,870 --> 00:29:41,110
the new system and we focus on value

00:29:37,350 --> 00:29:43,840
feature toggles are an incredibly

00:29:41,110 --> 00:29:46,510
powerful tool to not only separate

00:29:43,840 --> 00:29:49,300
functionality but also do a/b testing

00:29:46,510 --> 00:29:52,000
and separating functionality I talked

00:29:49,300 --> 00:29:54,700
about feature branches and people using

00:29:52,000 --> 00:29:58,120
feature branches to sequence to make a

00:29:54,700 --> 00:30:00,790
sequence of functionality now feature

00:29:58,120 --> 00:30:03,490
toggles allow you to do the same but

00:30:00,790 --> 00:30:06,580
without interfering in the purely

00:30:03,490 --> 00:30:08,830
technical act of deployment right

00:30:06,580 --> 00:30:12,790
deploying is a purely technical exercise

00:30:08,830 --> 00:30:15,490
it has no relation to business because

00:30:12,790 --> 00:30:18,370
it's just releasing software and if you

00:30:15,490 --> 00:30:20,920
put new stuff that shouldn't be seen by

00:30:18,370 --> 00:30:23,020
a customer yet behind the future toggle

00:30:20,920 --> 00:30:24,190
and the feature toggles essentially an

00:30:23,020 --> 00:30:26,380
if statement

00:30:24,190 --> 00:30:29,170
they will not see it but the code will

00:30:26,380 --> 00:30:31,840
actually be integrated will be tested

00:30:29,170 --> 00:30:33,190
will be deployed and at some point when

00:30:31,840 --> 00:30:35,920
the product owner says okay now it's

00:30:33,190 --> 00:30:38,140
time to go we flip the product or the

00:30:35,920 --> 00:30:41,710
feature toggle and customers start

00:30:38,140 --> 00:30:46,420
seeing that new feature at which point

00:30:41,710 --> 00:30:49,200
we remove the future toggle of course we

00:30:46,420 --> 00:30:52,240
only try to use that on specific things

00:30:49,200 --> 00:30:55,800
systems or functionality that the

00:30:52,240 --> 00:30:58,300
customer would not yet see anyway I

00:30:55,800 --> 00:31:02,020
don't have to be behind a feature toggle

00:30:58,300 --> 00:31:05,290
and in some cases the new functionality

00:31:02,020 --> 00:31:07,179
is not a problem to see to let's see but

00:31:05,290 --> 00:31:10,150
it also means that we can do a/b testing

00:31:07,179 --> 00:31:13,240
like I have a new version of our search

00:31:10,150 --> 00:31:15,130
page on the right-hand side and I want

00:31:13,240 --> 00:31:17,020
to check where there are metrics for

00:31:15,130 --> 00:31:19,300
that page go up or down like the number

00:31:17,020 --> 00:31:20,710
of users on the page the time they spend

00:31:19,300 --> 00:31:23,530
on the page the number of clicks all

00:31:20,710 --> 00:31:26,650
those metrics and initially I want to

00:31:23,530 --> 00:31:29,679
say 10% of my visitors get to feature

00:31:26,650 --> 00:31:31,690
toggle enable and then we see metrics

00:31:29,679 --> 00:31:36,190
happening and if the metrics are not

00:31:31,690 --> 00:31:38,380
worse than currently then we increase

00:31:36,190 --> 00:31:40,600
that feature toggle the percentage and

00:31:38,380 --> 00:31:43,660
we let the people 50 percent of our

00:31:40,600 --> 00:31:45,160
traffic see the new feature and then 100

00:31:43,660 --> 00:31:47,380
percent and then we remove the future

00:31:45,160 --> 00:31:48,440
toggle and at that point this whole

00:31:47,380 --> 00:31:51,680
stuff

00:31:48,440 --> 00:31:56,470
in the monolith for example is obsolete

00:31:51,680 --> 00:32:00,880
and can be thrown away cleaned up right

00:31:56,470 --> 00:32:03,410
another process rule the Boy Scout rule

00:32:00,880 --> 00:32:08,000
who does not know the Boy Scout rule

00:32:03,410 --> 00:32:09,710
here the Boy Scout rule basically says

00:32:08,000 --> 00:32:14,150
leave the campsite in a better state

00:32:09,710 --> 00:32:17,920
than you found it which in translated to

00:32:14,150 --> 00:32:21,380
code means that if you see something

00:32:17,920 --> 00:32:23,810
that can be reflected in a reasonable

00:32:21,380 --> 00:32:26,510
amount of time then you should do that

00:32:23,810 --> 00:32:27,890
at that point because if you don't it

00:32:26,510 --> 00:32:29,360
leads to something called the broken

00:32:27,890 --> 00:32:31,190
window syndrome the broken window

00:32:29,360 --> 00:32:33,520
syndrome is you have one broken window

00:32:31,190 --> 00:32:36,230
in a house in an apartment complex and

00:32:33,520 --> 00:32:38,270
okay it's only one broken window we can

00:32:36,230 --> 00:32:40,340
we can handle that but if it doesn't get

00:32:38,270 --> 00:32:43,520
handled a second broken window appears

00:32:40,340 --> 00:32:46,100
and people this complex is starting to

00:32:43,520 --> 00:32:47,780
look shabby and then a third and a

00:32:46,100 --> 00:32:51,290
fourth and at that point people don't

00:32:47,780 --> 00:32:55,370
care anymore right and the outside look

00:32:51,290 --> 00:32:57,710
of the complex is now shabby and people

00:32:55,370 --> 00:32:59,960
consider that complex to be of that

00:32:57,710 --> 00:33:01,640
quality as well so if you want to avoid

00:32:59,960 --> 00:33:04,010
the broken window syndrome it means that

00:33:01,640 --> 00:33:10,520
every single time a window breaks you

00:33:04,010 --> 00:33:14,570
fix it quickly quality is a precondition

00:33:10,520 --> 00:33:17,390
for speed if you don't have quality you

00:33:14,570 --> 00:33:20,750
can't go fast yes you can go fast for a

00:33:17,390 --> 00:33:23,600
limited amount of time but you will hit

00:33:20,750 --> 00:33:26,530
a brick wall pretty quickly and if you

00:33:23,600 --> 00:33:28,700
are careful about quality you can

00:33:26,530 --> 00:33:30,560
increase the amount of time spent

00:33:28,700 --> 00:33:31,910
linearly with you not with the

00:33:30,560 --> 00:33:36,440
complexity of the or the features that

00:33:31,910 --> 00:33:38,960
you have and PHP one of the quality

00:33:36,440 --> 00:33:42,620
gates we would have is a simple syntax

00:33:38,960 --> 00:33:44,510
check write simple linting check because

00:33:42,620 --> 00:33:46,760
we don't want our customer to see a

00:33:44,510 --> 00:33:50,570
fatal error somewhere or you remove that

00:33:46,760 --> 00:33:53,960
method or you forgot a brace or

00:33:50,570 --> 00:33:56,120
semicolon somewhere right but it also

00:33:53,960 --> 00:33:58,520
means that we have tests in all shapes

00:33:56,120 --> 00:34:00,590
and sizes it means that we have code

00:33:58,520 --> 00:34:01,850
coverage which is at a level that we can

00:34:00,590 --> 00:34:04,370
trust

00:34:01,850 --> 00:34:05,420
and in this project and this is actually

00:34:04,370 --> 00:34:07,490
something the team came up with

00:34:05,420 --> 00:34:11,570
themselves

00:34:07,490 --> 00:34:16,760
we had a very hard definition of code

00:34:11,570 --> 00:34:19,870
coverage a hundred percent now note the

00:34:16,760 --> 00:34:24,170
asterisk because this was a PHP project

00:34:19,870 --> 00:34:25,970
if it were Java or Scala I would

00:34:24,170 --> 00:34:28,070
probably we would probably get away with

00:34:25,970 --> 00:34:30,410
80 percent something like that that's a

00:34:28,070 --> 00:34:32,990
sensible number reason why is there you

00:34:30,410 --> 00:34:35,870
have a compiler which helps you write if

00:34:32,990 --> 00:34:37,910
I remove a method in PHP I and a test

00:34:35,870 --> 00:34:41,450
doesn't catch it I will know about that

00:34:37,910 --> 00:34:43,220
runtime and that's too late in a

00:34:41,450 --> 00:34:47,540
compiled language my compiler will

00:34:43,220 --> 00:34:50,810
hopefully end me about that but in this

00:34:47,540 --> 00:34:53,750
case we set a hard gate on 100% which

00:34:50,810 --> 00:34:58,250
means that if D coverage drops the 99.9

00:34:53,750 --> 00:35:01,820
percent the build fails this means that

00:34:58,250 --> 00:35:06,110
we have a safety net now there are

00:35:01,820 --> 00:35:08,330
exceptions of course very very small

00:35:06,110 --> 00:35:12,290
exceptions which can be annotated by

00:35:08,330 --> 00:35:14,510
code coverage ignore but every single

00:35:12,290 --> 00:35:16,790
instance where that might be needed

00:35:14,510 --> 00:35:18,890
would be a conscious decision right

00:35:16,790 --> 00:35:21,260
whereas if you have a eighty percent

00:35:18,890 --> 00:35:24,200
number as long as the 80 percent you're

00:35:21,260 --> 00:35:26,390
still along the 80 percent then you

00:35:24,200 --> 00:35:29,360
don't really know whether the code

00:35:26,390 --> 00:35:32,540
you're not covering is essential or a

00:35:29,360 --> 00:35:35,060
stub or something trivial right with a

00:35:32,540 --> 00:35:38,120
hundred percent if you dropped a 99.9

00:35:35,060 --> 00:35:39,590
and the point one would be trivial code

00:35:38,120 --> 00:35:40,400
then you can make a conscious decision

00:35:39,590 --> 00:35:42,350
okay

00:35:40,400 --> 00:35:44,750
ignored that particular piece of code

00:35:42,350 --> 00:35:50,990
right but it becomes a conscious

00:35:44,750 --> 00:35:53,630
decision we also envision DevOps DevOps

00:35:50,990 --> 00:35:55,850
is a very popular tool D or term these

00:35:53,630 --> 00:35:58,220
days everybody wants DevOps what does

00:35:55,850 --> 00:36:00,920
DevOps actually mean and at this point

00:35:58,220 --> 00:36:03,500
it's um it's starting to become a

00:36:00,920 --> 00:36:06,110
container phrase because people started

00:36:03,500 --> 00:36:09,710
adding security on it and then QA and

00:36:06,110 --> 00:36:14,390
then biz and then net and then system

00:36:09,710 --> 00:36:15,350
and what I mean with DevOps is dev Star

00:36:14,390 --> 00:36:17,780
ops

00:36:15,350 --> 00:36:26,300
deaf startups basically solves this

00:36:17,780 --> 00:36:27,890
problem it means that we don't have

00:36:26,300 --> 00:36:31,790
walls between us anymore

00:36:27,890 --> 00:36:33,830
right instead of us generating an

00:36:31,790 --> 00:36:35,720
artifact and throwing that over the wall

00:36:33,830 --> 00:36:37,820
and then the ops team taking that

00:36:35,720 --> 00:36:40,400
deploying that somewhere in production a

00:36:37,820 --> 00:36:42,590
production system we that we as

00:36:40,400 --> 00:36:46,100
developers are not allowed to touch and

00:36:42,590 --> 00:36:50,030
then it breaks and then okay why did it

00:36:46,100 --> 00:36:52,850
break yeah yeah yeah because XYZ I am

00:36:50,030 --> 00:36:55,220
ops maybe doesn't even know about it

00:36:52,850 --> 00:36:57,290
or doesn't even have the insight into

00:36:55,220 --> 00:36:59,570
the application so they only have logs

00:36:57,290 --> 00:37:02,390
oh we didn't actually put that in

00:36:59,570 --> 00:37:04,760
the logs or can we get the logs can we

00:37:02,390 --> 00:37:06,680
access the server I know you can because

00:37:04,760 --> 00:37:08,960
we are only allowed to access the

00:37:06,680 --> 00:37:11,150
service and this round robins a few time

00:37:08,960 --> 00:37:13,010
ping-pong is a few times and the end

00:37:11,150 --> 00:37:16,330
result is that we're slower than we

00:37:13,010 --> 00:37:19,670
could be right so if we integrate that

00:37:16,330 --> 00:37:22,430
those people into the same team we

00:37:19,670 --> 00:37:25,370
foster responsibility responsibility for

00:37:22,430 --> 00:37:28,810
a product which resides at one team not

00:37:25,370 --> 00:37:33,260
multiple teams one team and if it breaks

00:37:28,810 --> 00:37:35,480
somebody on that team will get a page it

00:37:33,260 --> 00:37:38,750
doesn't matter what it's ups or dev or

00:37:35,480 --> 00:37:41,420
QA or somebody else somebody on the team

00:37:38,750 --> 00:37:43,250
will get a page and the funny thing

00:37:41,420 --> 00:37:45,770
about that is developers don't like

00:37:43,250 --> 00:37:47,990
being paged at night go figure

00:37:45,770 --> 00:37:51,800
most people don't like being paged at

00:37:47,990 --> 00:37:53,780
night but usually ops people have that

00:37:51,800 --> 00:37:55,970
in their contract right they do night

00:37:53,780 --> 00:37:58,700
shifts and standby and all those things

00:37:55,970 --> 00:38:02,980
they expect stuff to break sometimes

00:37:58,700 --> 00:38:04,370
they're even sad when things don't break

00:38:02,980 --> 00:38:07,100
go figure

00:38:04,370 --> 00:38:09,470
so what we do is by integrating all

00:38:07,100 --> 00:38:11,840
those people and suddenly developer at

00:38:09,470 --> 00:38:13,640
night gets paged and he's like why the

00:38:11,840 --> 00:38:16,130
hell is this page and absolutely like

00:38:13,640 --> 00:38:20,840
yeah did this happen for years every day

00:38:16,130 --> 00:38:22,820
and it's just why well it wakes me up so

00:38:20,840 --> 00:38:26,030
I immediately we start getting rid of

00:38:22,820 --> 00:38:28,490
that that's the effect that this will

00:38:26,030 --> 00:38:30,140
have that DevOps will have what

00:38:28,490 --> 00:38:35,390
rid of this problem because it hinders

00:38:30,140 --> 00:38:37,700
us right it will also require a culture

00:38:35,390 --> 00:38:40,880
change it's a culture where people

00:38:37,700 --> 00:38:42,860
actually talk to each other and together

00:38:40,880 --> 00:38:47,330
solve problems rather than pointing

00:38:42,860 --> 00:38:49,790
fingers everywhere enough about DevOps I

00:38:47,330 --> 00:38:54,320
talked about continuous everything one

00:38:49,790 --> 00:38:55,910
of the everythings is monitoring and by

00:38:54,320 --> 00:38:57,850
monitoring if you can put it on the

00:38:55,910 --> 00:39:01,850
dashboard then put it on the dashboard

00:38:57,850 --> 00:39:05,090
stuff like how's my system performing

00:39:01,850 --> 00:39:09,740
and these are technical metrics CPU RAM

00:39:05,090 --> 00:39:13,570
load etc etc log files centralized

00:39:09,740 --> 00:39:16,280
logging elq's tech elasticsearch

00:39:13,570 --> 00:39:18,740
hopefully with some sort of ID so you

00:39:16,280 --> 00:39:20,540
can correlate different requests

00:39:18,740 --> 00:39:23,300
together within services and you have a

00:39:20,540 --> 00:39:25,190
life cycle of where things start to go

00:39:23,300 --> 00:39:27,920
wrong stack traces everything that your

00:39:25,190 --> 00:39:29,869
app produces let it be searchable and

00:39:27,920 --> 00:39:31,730
centralized so we don't have to log into

00:39:29,869 --> 00:39:36,590
an individual service and look at log

00:39:31,730 --> 00:39:39,500
files right all these things lead to a

00:39:36,590 --> 00:39:42,310
built pipeline and the built pipeline

00:39:39,500 --> 00:39:45,260
should be all about automation

00:39:42,310 --> 00:39:48,980
automating what is repeatable why do we

00:39:45,260 --> 00:39:51,740
automate because if we let humans do the

00:39:48,980 --> 00:39:55,640
work mistakes start to slip in start to

00:39:51,740 --> 00:39:57,619
happen if you have 10 tests for 10

00:39:55,640 --> 00:40:00,440
humans they will do it in some sort of

00:39:57,619 --> 00:40:02,210
way and give the same 10 humans the same

00:40:00,440 --> 00:40:04,820
10 tests the next day and you will

00:40:02,210 --> 00:40:08,240
already see variations because of lack

00:40:04,820 --> 00:40:09,380
of sleep problems at home had a little

00:40:08,240 --> 00:40:11,960
bit too much to drink

00:40:09,380 --> 00:40:14,030
etc etc etc all those reasons which an

00:40:11,960 --> 00:40:16,010
automated script or process doesn't

00:40:14,030 --> 00:40:18,400
really have a problem with right it will

00:40:16,010 --> 00:40:22,240
do the same thing every single time and

00:40:18,400 --> 00:40:24,710
we automate building testing deploying

00:40:22,240 --> 00:40:27,740
orchestrating so getting services

00:40:24,710 --> 00:40:31,760
together and initializing services or

00:40:27,740 --> 00:40:34,070
servers and configuration all the things

00:40:31,760 --> 00:40:35,690
we used to do manually like boot up some

00:40:34,070 --> 00:40:38,270
VM and do a bunch of app get install

00:40:35,690 --> 00:40:41,590
stuff we automate all those things so

00:40:38,270 --> 00:40:46,000
that we can throw stuff away and may

00:40:41,590 --> 00:40:49,540
happen again continues everything also

00:40:46,000 --> 00:40:52,720
means continuous testing continuous

00:40:49,540 --> 00:40:55,510
testing in depth and in depth I mean

00:40:52,720 --> 00:40:59,080
that we start with unit tests so that's

00:40:55,510 --> 00:41:01,390
where TDD comes back we then go to

00:40:59,080 --> 00:41:03,880
integration tests acceptance tests and

00:41:01,390 --> 00:41:07,060
UI test unit tests could look something

00:41:03,880 --> 00:41:10,660
like this this is relatively recent

00:41:07,060 --> 00:41:13,960
piece for unit code and what this code

00:41:10,660 --> 00:41:16,810
does is test a single unit a single

00:41:13,960 --> 00:41:18,610
object single class and all the

00:41:16,810 --> 00:41:23,590
dependencies that that object has are

00:41:18,610 --> 00:41:26,560
marked away so that we can control the

00:41:23,590 --> 00:41:29,860
world around that object integration

00:41:26,560 --> 00:41:32,890
tests then are where we test components

00:41:29,860 --> 00:41:34,960
together we actually test life cycles of

00:41:32,890 --> 00:41:37,420
objects our objects talking to each

00:41:34,960 --> 00:41:40,270
other we may connect to an actual

00:41:37,420 --> 00:41:43,270
database with test data fixtures data

00:41:40,270 --> 00:41:46,000
fixtures or we test using you know

00:41:43,270 --> 00:41:49,330
sequel light instead of my sequel with

00:41:46,000 --> 00:41:53,670
some fixed known test data that we can

00:41:49,330 --> 00:41:57,070
then assert on acceptance test our

00:41:53,670 --> 00:42:00,100
that's where BDD comes in and BDD says

00:41:57,070 --> 00:42:03,250
we generate or we create scenarios using

00:42:00,100 --> 00:42:05,950
a syntax like that which is called the

00:42:03,250 --> 00:42:09,040
gherkin diesel and the gherkin diesel

00:42:05,950 --> 00:42:11,800
always runs in the same flow given when

00:42:09,040 --> 00:42:15,220
then given the world is in a certain

00:42:11,800 --> 00:42:17,260
state a predefined state when something

00:42:15,220 --> 00:42:20,860
happens then the verifiable outcome

00:42:17,260 --> 00:42:23,380
should be able to be detected and these

00:42:20,860 --> 00:42:26,920
stories or these scenarios rather are

00:42:23,380 --> 00:42:29,680
the result of stories of acceptance

00:42:26,920 --> 00:42:32,680
criteria they are the result of examples

00:42:29,680 --> 00:42:35,110
of edge cases for example these are

00:42:32,680 --> 00:42:39,040
actual examples of functionality and

00:42:35,110 --> 00:42:42,070
they can be implemented by code in the

00:42:39,040 --> 00:42:44,350
background but this is in our domain

00:42:42,070 --> 00:42:45,730
language or ubiquitous language this is

00:42:44,350 --> 00:42:48,610
what we write down we don't actually

00:42:45,730 --> 00:42:50,740
write code anymore in this case we do

00:42:48,610 --> 00:42:53,800
need to implement that of course but

00:42:50,740 --> 00:42:55,040
it's an acceptance criteria it's

00:42:53,800 --> 00:42:57,980
business language

00:42:55,040 --> 00:43:01,760
this can be done using b-hat or HP spec

00:42:57,980 --> 00:43:04,880
for example and then last but not least

00:43:01,760 --> 00:43:07,970
we do you.why tests UI tests using

00:43:04,880 --> 00:43:09,950
something like selenium or a phantom or

00:43:07,970 --> 00:43:13,000
protector what have you you fake a

00:43:09,950 --> 00:43:16,250
browser you can detect JavaScript issues

00:43:13,000 --> 00:43:18,290
the problem with that or the potential

00:43:16,250 --> 00:43:20,870
issue with that is that speed and

00:43:18,290 --> 00:43:22,780
stability are a problem could be a

00:43:20,870 --> 00:43:25,040
problem selenium is not very fast

00:43:22,780 --> 00:43:27,950
phantom Jas and protractor have some

00:43:25,040 --> 00:43:31,130
stability issues here and there so we

00:43:27,950 --> 00:43:33,890
don't want to overuse that now our

00:43:31,130 --> 00:43:36,380
manual tester or our QA person in this

00:43:33,890 --> 00:43:38,240
in the previous process would then be if

00:43:36,380 --> 00:43:41,210
he sees something like this like what

00:43:38,240 --> 00:43:42,860
what is going to be my role right I used

00:43:41,210 --> 00:43:45,680
to click through an acceptance

00:43:42,860 --> 00:43:48,980
environment on my own and verify whether

00:43:45,680 --> 00:43:50,810
things were ready for release funny

00:43:48,980 --> 00:43:52,250
thing is the tester is actually going to

00:43:50,810 --> 00:43:56,750
be more important than ever

00:43:52,250 --> 00:43:58,880
don't tell them that because the tester

00:43:56,750 --> 00:44:01,310
becomes a part of the three amigos and

00:43:58,880 --> 00:44:03,080
the three amigos is basically a business

00:44:01,310 --> 00:44:04,760
representative a development

00:44:03,080 --> 00:44:07,310
representative and a testing

00:44:04,760 --> 00:44:09,170
representative because these three

00:44:07,310 --> 00:44:12,140
people combined should have enough

00:44:09,170 --> 00:44:14,450
knowledge of the business the system the

00:44:12,140 --> 00:44:17,680
edge cases all the things combined to

00:44:14,450 --> 00:44:21,710
come up with a reasonably correct

00:44:17,680 --> 00:44:23,450
formulation of a story right they won't

00:44:21,710 --> 00:44:24,620
they will think about possible ways of

00:44:23,450 --> 00:44:26,210
implementing it not the actual

00:44:24,620 --> 00:44:27,920
implementation because that would be too

00:44:26,210 --> 00:44:32,060
soon but they could think of possible

00:44:27,920 --> 00:44:35,180
problems possible issues edge cases all

00:44:32,060 --> 00:44:38,420
the things we individually could not

00:44:35,180 --> 00:44:41,540
come up with but as three amigos hey we

00:44:38,420 --> 00:44:45,080
can do everything right so the tester

00:44:41,540 --> 00:44:47,840
becomes extremely important all these

00:44:45,080 --> 00:44:51,980
things together lead to what we call the

00:44:47,840 --> 00:44:53,840
testing pyramid and recently there's

00:44:51,980 --> 00:44:56,360
been some literature on that the testing

00:44:53,840 --> 00:44:58,870
pyramid is wrong at some point it

00:44:56,360 --> 00:45:01,460
becomes wrong for now it's good enough

00:44:58,870 --> 00:45:03,710
the testing pyramid basically says that

00:45:01,460 --> 00:45:06,380
at the bottom we start with the cheapest

00:45:03,710 --> 00:45:08,539
and fastest tests which are unit tests

00:45:06,380 --> 00:45:10,489
by definition unless you do

00:45:08,539 --> 00:45:12,469
very slow things there but in general

00:45:10,489 --> 00:45:14,599
unit tests are the fastest and the

00:45:12,469 --> 00:45:17,359
cheapest so we have the most of them

00:45:14,599 --> 00:45:19,579
then we could have a few integration

00:45:17,359 --> 00:45:22,880
tests which are slower and more

00:45:19,579 --> 00:45:26,119
expensive acceptance test yet slower UI

00:45:22,880 --> 00:45:28,969
tests almost the slowest and smoke tests

00:45:26,119 --> 00:45:30,289
are actually tests that check whether

00:45:28,969 --> 00:45:34,519
your application was deployed

00:45:30,289 --> 00:45:35,959
successfully so they are the slowest

00:45:34,519 --> 00:45:38,479
because they require an actual running

00:45:35,959 --> 00:45:41,630
system an actual deploy and the tester

00:45:38,479 --> 00:45:44,390
comes there in exploratory testing you

00:45:41,630 --> 00:45:46,519
know clicking the critical paths of or

00:45:44,390 --> 00:45:49,900
verifying critical paths of the system

00:45:46,519 --> 00:45:52,969
from time to time and your monitoring

00:45:49,900 --> 00:45:56,059
because testing nothing is ever

00:45:52,969 --> 00:45:59,150
watertight or 100% bulletproof so you

00:45:56,059 --> 00:46:01,849
need something to alert you if after

00:45:59,150 --> 00:46:03,319
deploy things start going wrong right we

00:46:01,849 --> 00:46:05,479
have a performance issue which we did

00:46:03,319 --> 00:46:07,429
not detect we have a load problem

00:46:05,479 --> 00:46:09,079
somewhere we have an increased error

00:46:07,429 --> 00:46:11,689
rate after an hour or something of

00:46:09,079 --> 00:46:14,059
running that's hard if not impossible to

00:46:11,689 --> 00:46:16,549
data to detect with testing so you need

00:46:14,059 --> 00:46:22,159
something to verify after the deployment

00:46:16,549 --> 00:46:26,509
a pipeline could be written like this

00:46:22,159 --> 00:46:29,809
pipeline is code this is Jenkins by the

00:46:26,509 --> 00:46:31,309
way this is Jenkins code and the nice

00:46:29,809 --> 00:46:33,109
thing about a pipeline is code is that

00:46:31,309 --> 00:46:35,119
you can Co locate it with your actual

00:46:33,109 --> 00:46:38,509
system which our product in your

00:46:35,119 --> 00:46:40,339
repository and we can throw away Jenkins

00:46:38,509 --> 00:46:42,829
and Riaan a lot and reinitialize it

00:46:40,339 --> 00:46:44,689
using that code so we don't have to

00:46:42,829 --> 00:46:48,799
click things together anymore it's all

00:46:44,689 --> 00:46:52,219
authored this way this code runs in a

00:46:48,799 --> 00:46:54,979
few stages we run the tests initially we

00:46:52,219 --> 00:46:57,409
then build a docker image and we push

00:46:54,979 --> 00:46:59,659
that to a repository somewhere and then

00:46:57,409 --> 00:47:01,729
we deploy to staging and lastly to

00:46:59,659 --> 00:47:04,579
production if one of the stages fails

00:47:01,729 --> 00:47:07,189
the entire build stops and it's the

00:47:04,579 --> 00:47:09,319
sequential system in this case now the

00:47:07,189 --> 00:47:12,109
docker file would or could look

00:47:09,319 --> 00:47:13,489
something like this very simple I'm not

00:47:12,109 --> 00:47:17,869
going to go into docker

00:47:13,489 --> 00:47:22,070
that's for another time and then we

00:47:17,869 --> 00:47:23,900
start deploying this is only one way one

00:47:22,070 --> 00:47:26,810
to deploy there are many many more

00:47:23,900 --> 00:47:29,210
canary releasing blue green look them up

00:47:26,810 --> 00:47:31,190
when you have time this is what we call

00:47:29,210 --> 00:47:33,530
the rolling update rolling up day it

00:47:31,190 --> 00:47:35,890
starts with pulling the image our darker

00:47:33,530 --> 00:47:38,480
image from a repository somewhere and

00:47:35,890 --> 00:47:41,180
then we start a new container based on

00:47:38,480 --> 00:47:44,240
that new image we wait for it to come up

00:47:41,180 --> 00:47:46,420
on a port which well generally all

00:47:44,240 --> 00:47:48,650
services do or most of them anyway and

00:47:46,420 --> 00:47:51,560
then we do our smoke tests

00:47:48,650 --> 00:47:53,960
aka health checks did the deployment did

00:47:51,560 --> 00:47:56,360
the service come up correctly and we can

00:47:53,960 --> 00:47:58,940
test that using some end point where we

00:47:56,360 --> 00:48:02,870
know that if we put this input in then

00:47:58,940 --> 00:48:04,820
we expect that output if it all goes

00:48:02,870 --> 00:48:07,610
well we add that container into the load

00:48:04,820 --> 00:48:11,060
balancer and the load balancer would be

00:48:07,610 --> 00:48:14,720
a cheap proxy in this case and it starts

00:48:11,060 --> 00:48:17,120
receiving traffic immediately we then

00:48:14,720 --> 00:48:18,800
remove one of the old containers from

00:48:17,120 --> 00:48:21,650
the previous version from the load

00:48:18,800 --> 00:48:24,560
balancer and we stop and remove that and

00:48:21,650 --> 00:48:27,410
we repeat this until all the replicas of

00:48:24,560 --> 00:48:31,430
our old version so our previous build

00:48:27,410 --> 00:48:35,060
are gone and we only have replicas of

00:48:31,430 --> 00:48:38,900
the new service looks a little something

00:48:35,060 --> 00:48:41,270
like this in the Jenkins we have the

00:48:38,900 --> 00:48:43,490
four stages if one of the stages were to

00:48:41,270 --> 00:48:44,930
break it would color red and the rest of

00:48:43,490 --> 00:48:50,240
the stages for death built wouldn't be

00:48:44,930 --> 00:48:55,760
executed right if it does break we want

00:48:50,240 --> 00:48:58,490
feedback the siren of shame the siren of

00:48:55,760 --> 00:49:01,580
shame is well literally that it's an LED

00:48:58,490 --> 00:49:03,260
lamp with with with a siren on it and

00:49:01,580 --> 00:49:05,270
and there's some audio effects we use

00:49:03,260 --> 00:49:07,340
the foghorn and the train horn and and

00:49:05,270 --> 00:49:09,740
all sorts of other things to attract

00:49:07,340 --> 00:49:11,540
attention that intention is to encourage

00:49:09,740 --> 00:49:13,700
developers to immediately fix that

00:49:11,540 --> 00:49:15,230
pipeline because that pipeline is the

00:49:13,700 --> 00:49:16,910
only thing we have to put stuff into

00:49:15,230 --> 00:49:18,620
production we don't do things manually

00:49:16,910 --> 00:49:20,720
anymore so if the pipeline breaks our

00:49:18,620 --> 00:49:24,640
development process breaks so that's an

00:49:20,720 --> 00:49:27,920
immediate p1 p0 right fix it and

00:49:24,640 --> 00:49:31,780
initially it's the pair that broke the

00:49:27,920 --> 00:49:33,920
build we don't do naming and shaming but

00:49:31,780 --> 00:49:35,420
initially they start working on it if

00:49:33,920 --> 00:49:35,790
they can't figure out they pull in the

00:49:35,420 --> 00:49:39,680
rest of

00:49:35,790 --> 00:49:45,210
team to get that pipeline fixed quickly

00:49:39,680 --> 00:49:49,500
right closing off with some results this

00:49:45,210 --> 00:49:52,050
whole project led to a total build time

00:49:49,500 --> 00:49:55,950
per surface under 10 minutes and the

00:49:52,050 --> 00:49:58,080
total time is from the very push to get

00:49:55,950 --> 00:50:00,750
lap or get up it was get up in this case

00:49:58,080 --> 00:50:03,360
to the last production replica being

00:50:00,750 --> 00:50:03,810
replaced under ten minutes from start to

00:50:03,360 --> 00:50:07,230
finish

00:50:03,810 --> 00:50:10,260
50 plus deployments per day over all the

00:50:07,230 --> 00:50:12,540
services combined significantly reduce

00:50:10,260 --> 00:50:15,030
the number of issues and outages and the

00:50:12,540 --> 00:50:19,260
page load times went from five to six

00:50:15,030 --> 00:50:22,110
seconds on average to 0.5 and sometimes

00:50:19,260 --> 00:50:24,020
even lower than that we improved

00:50:22,110 --> 00:50:26,460
audience statistics all across the board

00:50:24,020 --> 00:50:28,380
more time on page more pages per session

00:50:26,460 --> 00:50:30,990
more people on the site better co

00:50:28,380 --> 00:50:32,790
ranking all those things we got to

00:50:30,990 --> 00:50:35,370
experiment together with the team with

00:50:32,790 --> 00:50:37,890
new tech they dabbled a little bit in

00:50:35,370 --> 00:50:40,020
angular Java event sourcing things like

00:50:37,890 --> 00:50:42,510
that but most importantly they had a lot

00:50:40,020 --> 00:50:45,500
more confidence a lot more motivation

00:50:42,510 --> 00:50:47,940
and fun philosophies than a bonus of

00:50:45,500 --> 00:50:50,970
course there were some lessons to be

00:50:47,940 --> 00:50:54,030
learned the team acceptance initially

00:50:50,970 --> 00:50:55,410
was not very great remember it's a bunch

00:50:54,030 --> 00:50:57,110
of external people that say ok what

00:50:55,410 --> 00:51:00,270
you've been doing is essentially wrong

00:50:57,110 --> 00:51:02,670
and they knew this but they there's

00:51:00,270 --> 00:51:06,920
always a little bit of pushback which is

00:51:02,670 --> 00:51:09,930
fine but in it pretty quickly

00:51:06,920 --> 00:51:12,480
everybody got to see that this was a far

00:51:09,930 --> 00:51:15,540
better way and got them out of that hole

00:51:12,480 --> 00:51:20,880
that they've been in for years change is

00:51:15,540 --> 00:51:23,370
hard in general and humans are change

00:51:20,880 --> 00:51:26,640
averse usually they like their own

00:51:23,370 --> 00:51:30,060
patterns but if you persist and keep at

00:51:26,640 --> 00:51:32,430
it than you are then it will happen new

00:51:30,060 --> 00:51:35,640
technology not everybody was as

00:51:32,430 --> 00:51:37,290
experience with the new technology as we

00:51:35,640 --> 00:51:40,500
would like but with pair programming

00:51:37,290 --> 00:51:43,050
that pretty quickly turned around and

00:51:40,500 --> 00:51:45,630
this was in 2014 so then docker was

00:51:43,050 --> 00:51:47,790
still very much unstable point six point

00:51:45,630 --> 00:51:48,680
seven was the release I think so we had

00:51:47,790 --> 00:51:53,240
some issues with that

00:51:48,680 --> 00:51:55,490
but in general and was fine stability of

00:51:53,240 --> 00:51:57,410
the built pipelines JavaScript testing

00:51:55,490 --> 00:52:00,500
mostly that's where we had to drop the

00:51:57,410 --> 00:52:02,740
100% code coverage rule actually because

00:52:00,500 --> 00:52:06,290
JavaScript testing usually broke for

00:52:02,740 --> 00:52:08,569
unclear reasons business alignment if

00:52:06,290 --> 00:52:10,730
you as a team start moving this fast and

00:52:08,569 --> 00:52:13,250
the business is still doing it the

00:52:10,730 --> 00:52:16,579
traditional way then cracks to start to

00:52:13,250 --> 00:52:20,180
appear again in other in other parts of

00:52:16,579 --> 00:52:21,829
the company feature toggles I said that

00:52:20,180 --> 00:52:23,690
as soon as something is live you need to

00:52:21,829 --> 00:52:25,220
remove the future toggle well we had a

00:52:23,690 --> 00:52:27,470
few feature toggles that were never

00:52:25,220 --> 00:52:31,040
enabled actually so stuff that wasn't

00:52:27,470 --> 00:52:32,480
put life as well and if you have too

00:52:31,040 --> 00:52:34,609
much feature toggles you have a

00:52:32,480 --> 00:52:38,450
combinatorial explosion which you don't

00:52:34,609 --> 00:52:39,980
want as well and at the end not enough

00:52:38,450 --> 00:52:42,050
focus on replacing the legacy app

00:52:39,980 --> 00:52:44,569
unfortunately Sandiego still in

00:52:42,050 --> 00:52:48,230
production if a small part of it but

00:52:44,569 --> 00:52:49,579
it's still in production and it could

00:52:48,230 --> 00:52:52,339
have been out of production by now

00:52:49,579 --> 00:52:54,530
unfortunately right some literature

00:52:52,339 --> 00:52:56,809
which you can read hopefully in the next

00:52:54,530 --> 00:52:58,609
few weeks or months continues delivery

00:52:56,809 --> 00:53:00,829
to Bible by Jess humble and des Farley

00:52:58,609 --> 00:53:04,040
building micro services by Sam Newman

00:53:00,829 --> 00:53:05,540
and a book by Matt Skelton and Steve

00:53:04,040 --> 00:53:08,599
Smith built quality in which is

00:53:05,540 --> 00:53:10,099
basically a report of about 20 projects

00:53:08,599 --> 00:53:12,710
where they implemented continuous

00:53:10,099 --> 00:53:14,180
delivery and how that worked and below

00:53:12,710 --> 00:53:15,950
if you want to read more about why

00:53:14,180 --> 00:53:18,700
branches are evil then drunk based

00:53:15,950 --> 00:53:22,520
development comm is your way to go a

00:53:18,700 --> 00:53:25,579
little bit of sales slide here make that

00:53:22,520 --> 00:53:27,290
i/o we help you get faster we help you

00:53:25,579 --> 00:53:28,280
implement continuous delivering

00:53:27,290 --> 00:53:30,950
continuous deployment if you're

00:53:28,280 --> 00:53:36,230
interested come visit me or send me a

00:53:30,950 --> 00:53:38,000
mail or a Twitter go to my blog I write

00:53:36,230 --> 00:53:40,819
about these things but also about event

00:53:38,000 --> 00:53:42,559
sourcing cqs and I would love it if you

00:53:40,819 --> 00:53:45,559
could leave some feedback on join in on

00:53:42,559 --> 00:53:50,650
that particular link have you any

00:53:45,559 --> 00:53:50,650
questions yes sir

00:53:53,300 --> 00:53:58,860
check in the like the amount feedback

00:53:57,150 --> 00:54:00,630
you're getting for new webpage or

00:53:58,860 --> 00:54:04,260
anything else have you actually got that

00:54:00,630 --> 00:54:07,290
automated as well the metrics you mean

00:54:04,260 --> 00:54:08,580
or yeah so they whereby say you you've

00:54:07,290 --> 00:54:10,530
released it's a ten percent of your

00:54:08,580 --> 00:54:11,760
audience and then you might up it to

00:54:10,530 --> 00:54:13,680
fifty before you actually release it

00:54:11,760 --> 00:54:15,630
entirely is that automate unfortunately

00:54:13,680 --> 00:54:17,310
not so the question was it does the

00:54:15,630 --> 00:54:19,920
future toggle automatically increase if

00:54:17,310 --> 00:54:22,140
your metrics are at the right level we

00:54:19,920 --> 00:54:24,750
would love to have a gun there but we

00:54:22,140 --> 00:54:26,190
didn't I mean the time that then you end

00:54:24,750 --> 00:54:28,650
up with something called hypothesis

00:54:26,190 --> 00:54:31,860
driven development which is we think

00:54:28,650 --> 00:54:33,960
that we that this change will lead to

00:54:31,860 --> 00:54:36,720
that and that's verified by or

00:54:33,960 --> 00:54:38,280
verifiable but these metrics and if then

00:54:36,720 --> 00:54:53,100
you can automate that unfortunately we

00:54:38,280 --> 00:54:55,380
didn't get there other questions well

00:54:53,100 --> 00:54:59,070
you would write down which metrics to

00:54:55,380 --> 00:55:02,310
check and for example you could say okay

00:54:59,070 --> 00:55:05,430
that we consider the feature successful

00:55:02,310 --> 00:55:08,010
if the metrics go increase by this

00:55:05,430 --> 00:55:10,320
percentage or go above death threshold

00:55:08,010 --> 00:55:13,650
and if they do we increase the feature

00:55:10,320 --> 00:55:15,630
toggle by X percent right that could be

00:55:13,650 --> 00:55:17,730
away so you have some sort of feedback

00:55:15,630 --> 00:55:19,230
loop from the metrics from the

00:55:17,730 --> 00:55:21,860
monitoring back into your feature

00:55:19,230 --> 00:55:21,860
toggles setup

00:55:25,349 --> 00:55:29,769
yeah I would I would definitely consider

00:55:28,059 --> 00:55:33,759
that something like Prometheus or other

00:55:29,769 --> 00:55:34,359
things they have hooks yeah yeah could

00:55:33,759 --> 00:55:36,130
be yeah

00:55:34,359 --> 00:55:39,160
even though now yours is more of the

00:55:36,130 --> 00:55:41,319
system monitoring I was just going to

00:55:39,160 --> 00:55:42,700
ask about the branching model where

00:55:41,319 --> 00:55:43,990
you're always committing to master does

00:55:42,700 --> 00:55:45,910
that mean that you're effectively only

00:55:43,990 --> 00:55:47,380
working on one feature at a time or is

00:55:45,910 --> 00:55:49,900
everyone working on features at the same

00:55:47,380 --> 00:55:53,170
time and committing altogether so the

00:55:49,900 --> 00:55:54,759
question is if we only have master R we

00:55:53,170 --> 00:56:00,069
are working on one feature the answer is

00:55:54,759 --> 00:56:03,160
no in principle if features are large

00:56:00,069 --> 00:56:04,990
enough and complete complicated enough

00:56:03,160 --> 00:56:07,690
they couldn't be put behind the feature

00:56:04,990 --> 00:56:09,670
toggle and otherwise it would just

00:56:07,690 --> 00:56:12,759
simply be small commits towards a new

00:56:09,670 --> 00:56:15,069
feature and you the only thing you would

00:56:12,759 --> 00:56:16,869
sometimes have is if you are working on

00:56:15,069 --> 00:56:19,599
the exact same piece of code you would

00:56:16,869 --> 00:56:21,279
have a small merge conflict for the

00:56:19,599 --> 00:56:22,720
individual developer but in principle

00:56:21,279 --> 00:56:24,759
everybody's working on the entire

00:56:22,720 --> 00:56:27,249
product not just on one single feature

00:56:24,759 --> 00:56:30,009
do you ever have failing tests in master

00:56:27,249 --> 00:56:31,809
or do you make sure that hopefully not

00:56:30,009 --> 00:56:34,900
because that means somebody forgot to

00:56:31,809 --> 00:56:36,640
run the tests on their own machine we

00:56:34,900 --> 00:56:41,619
didn't actually have post commit hooks

00:56:36,640 --> 00:56:43,690
or or that you can only push if you run

00:56:41,619 --> 00:56:45,339
the test locally so that's more of a

00:56:43,690 --> 00:56:48,130
discipline we trust people to do that

00:56:45,339 --> 00:56:52,589
and you quickly learn to do that if the

00:56:48,130 --> 00:56:54,819
siren starts running again right I

00:56:52,589 --> 00:56:56,559
presume that when you have multiple

00:56:54,819 --> 00:56:58,720
services breaking down a multiplication

00:56:56,559 --> 00:57:01,119
you're working with different

00:56:58,720 --> 00:57:04,089
repositories for each service using the

00:57:01,119 --> 00:57:06,369
same this case different repositories

00:57:04,089 --> 00:57:08,200
for different services so one service

00:57:06,369 --> 00:57:09,489
had one repository what was the secret

00:57:08,200 --> 00:57:12,849
and of managing the different

00:57:09,489 --> 00:57:14,710
dependencies between the services so if

00:57:12,849 --> 00:57:16,839
service a depends on the feature that's

00:57:14,710 --> 00:57:18,220
gonna be deployed on service B at some

00:57:16,839 --> 00:57:21,910
point in time how do you synchronize

00:57:18,220 --> 00:57:24,099
that yeah that's a good point if you but

00:57:21,910 --> 00:57:28,269
vertical development would solve most of

00:57:24,099 --> 00:57:29,950
that so you start at you with with BDD

00:57:28,269 --> 00:57:32,440
you start outside in with these things

00:57:29,950 --> 00:57:34,599
you would start inside out and you would

00:57:32,440 --> 00:57:36,430
start with the lowest service and add a

00:57:34,599 --> 00:57:38,530
new endpoint there which is that at that

00:57:36,430 --> 00:57:40,360
moment in time is still unused

00:57:38,530 --> 00:57:42,300
right and then you built the code in the

00:57:40,360 --> 00:57:44,410
service which uses that endpoint etc etc

00:57:42,300 --> 00:57:46,720
or you could put it behind the feature

00:57:44,410 --> 00:57:49,900
toggle something like that and also API

00:57:46,720 --> 00:57:53,320
version very important all right thanks

00:57:49,900 --> 00:57:57,520
okay your question so you talked about

00:57:53,320 --> 00:57:59,950
continuous integration and well testing

00:57:57,520 --> 00:58:02,740
and everything but you still have a

00:57:59,950 --> 00:58:05,680
monolith there with very complex

00:58:02,740 --> 00:58:08,350
algorithms I suppose and your new

00:58:05,680 --> 00:58:11,620
services will have at some point to

00:58:08,350 --> 00:58:16,410
communicate with the old features so how

00:58:11,620 --> 00:58:21,730
would you manage that type of situation

00:58:16,410 --> 00:58:25,780
by not doing it and that sounds very

00:58:21,730 --> 00:58:27,820
easy but we try to avoid communicating

00:58:25,780 --> 00:58:31,780
with the old system as much as possible

00:58:27,820 --> 00:58:33,460
it's the only way it's we actually

00:58:31,780 --> 00:58:36,700
communicates through the legacy database

00:58:33,460 --> 00:58:38,500
and the legacy database is read and the

00:58:36,700 --> 00:58:41,650
data is then transformed to a model

00:58:38,500 --> 00:58:43,180
which is better a new model so that's

00:58:41,650 --> 00:58:45,610
the only point of communication actually

00:58:43,180 --> 00:58:50,130
we don't call API is in the old system

00:58:45,610 --> 00:58:53,830
we only use data communication so and

00:58:50,130 --> 00:58:56,080
how would you efforts because it's a

00:58:53,830 --> 00:58:58,060
also a legacy database how would you

00:58:56,080 --> 00:59:00,070
migrate that to a new database or a

00:58:58,060 --> 00:59:03,280
better schema well one of the things

00:59:00,070 --> 00:59:06,250
they started doing after I left is one

00:59:03,280 --> 00:59:08,410
part of the the job seeker part was

00:59:06,250 --> 00:59:10,990
started to become implemented as offense

00:59:08,410 --> 00:59:12,820
as a vent sourcing and basically

00:59:10,990 --> 00:59:14,620
everything that happens in the old

00:59:12,820 --> 00:59:16,660
system is then written down as an event

00:59:14,620 --> 00:59:20,350
in the new system and it's also written

00:59:16,660 --> 00:59:22,390
down as a in a new data model and at

00:59:20,350 --> 00:59:24,490
some point if you flip the switch the

00:59:22,390 --> 00:59:27,010
new system will start to generate those

00:59:24,490 --> 00:59:30,010
events rather than the old system right

00:59:27,010 --> 00:59:31,840
and then the old system is obsolete

00:59:30,010 --> 00:59:33,850
anyway it doesn't respond to those and

00:59:31,840 --> 00:59:36,160
things anyway and you have those vents

00:59:33,850 --> 00:59:37,450
and you have the new data models

00:59:36,160 --> 00:59:40,030
essentially and you can keep them

00:59:37,450 --> 00:59:43,410
up-to-date like that does that answer

00:59:40,030 --> 00:59:43,410
your question ok

00:59:43,570 --> 00:59:50,140
I was curious as to how the scales for

00:59:46,950 --> 00:59:51,589
engineering teams that are 200 to 500

00:59:50,140 --> 00:59:53,839
engineers

00:59:51,589 --> 00:59:56,949
do you batch commits when it's

00:59:53,839 --> 01:00:02,269
continuously deport deployed at all

00:59:56,949 --> 01:00:05,749
there are differing views on that I know

01:00:02,269 --> 01:00:07,249
that Spotify for example has something

01:00:05,749 --> 01:00:12,979
called I think they call it release

01:00:07,249 --> 01:00:14,989
trains and a deploy or was it Shopify it

01:00:12,979 --> 01:00:17,259
doesn't matter they deploy eight times

01:00:14,989 --> 01:00:20,599
per day something like that and you can

01:00:17,259 --> 01:00:23,749
attach your commits to a train and then

01:00:20,599 --> 01:00:26,209
it gets deployed and they have some sort

01:00:23,749 --> 01:00:30,049
of a feedback like these these commits

01:00:26,209 --> 01:00:32,749
were a part of that train but other

01:00:30,049 --> 01:00:34,609
companies of significant size Google for

01:00:32,749 --> 01:00:36,619
example has a monolithic repository so

01:00:34,609 --> 01:00:40,880
one repository well all the code is and

01:00:36,619 --> 01:00:42,499
a continuous deploy so I don't consider

01:00:40,880 --> 01:00:45,469
continuous deployment to be unscalable

01:00:42,499 --> 01:00:49,999
in the large or large teams no

01:00:45,469 --> 01:00:51,859
definitely not one question here and

01:00:49,999 --> 01:00:53,930
then I think we're slowly running out of

01:00:51,859 --> 01:00:56,179
time yeah so you said you don't always

01:00:53,930 --> 01:00:57,739
use pair programming did you have rules

01:00:56,179 --> 01:01:04,130
of when it was safe to not pepper

01:00:57,739 --> 01:01:06,679
because I see well the the the rule with

01:01:04,130 --> 01:01:08,689
there there's one I hear a comment about

01:01:06,679 --> 01:01:10,880
pair programming like trivial features

01:01:08,689 --> 01:01:13,459
we don't have to peril on right but is

01:01:10,880 --> 01:01:15,949
it always obvious from the start whether

01:01:13,459 --> 01:01:18,979
something is trivial right a bug-fix

01:01:15,949 --> 01:01:19,789
which looks trivial could be very

01:01:18,979 --> 01:01:23,359
complicated

01:01:19,789 --> 01:01:25,429
and for develop regular development

01:01:23,359 --> 01:01:26,359
that's it's equally so so I would say

01:01:25,429 --> 01:01:28,969
pair programming

01:01:26,359 --> 01:01:32,539
we didn't enforce it but we encourage it

01:01:28,969 --> 01:01:34,369
but also on simple things and sure there

01:01:32,539 --> 01:01:36,559
were moments where people needed to take

01:01:34,369 --> 01:01:38,479
a break like I need to be solo for a

01:01:36,559 --> 01:01:41,569
little bit but we tried to limit that

01:01:38,479 --> 01:01:43,339
and you find out quickly that that this

01:01:41,569 --> 01:01:46,009
helps a lot that this improves the

01:01:43,339 --> 01:01:49,789
quality and your own way of thinking as

01:01:46,009 --> 01:01:54,170
well it guards against dropping in the

01:01:49,789 --> 01:01:57,049
rabbit hole it doesn't it's still

01:01:54,170 --> 01:01:59,479
possible but it's less likely because

01:01:57,049 --> 01:02:01,249
you're a pair programming so people knew

01:01:59,479 --> 01:02:03,550
that even for trivial things

01:02:01,249 --> 01:02:05,830
it was interesting as well

01:02:03,550 --> 01:02:08,470
okay it's time to wrap this up if you

01:02:05,830 --> 01:02:11,170
have any further questions and catch me

01:02:08,470 --> 01:02:12,490
at lunch or on Twitter thank you so much

01:02:11,170 --> 01:02:14,610
for all your attention and have a great

01:02:12,490 --> 01:02:14,610
day

01:02:17,330 --> 01:02:19,429

YouTube URL: https://www.youtube.com/watch?v=5vcsP_cyk4Q


