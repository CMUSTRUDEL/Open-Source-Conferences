Title: PHP UK Conference 2017 - Marek Jelen - Docker, Kubernetes, and OpenShift for PHP Developers
Publication date: 2017-04-03
Playlist: PHP UK Conference 2017
Description: 
	So, you want to use Docker and Kubernetes for your development but donâ€™t want to spend your days writing Dockerfiles and running Docker builds? In this talk you will learn how to deploy and manage applications using docker, kubernetes, and the open source OpenShift projects to truly simplify your development flow. Diving a bit deeper, we will learn how to use the Source 2 Image project to automatically build and deploy docker images straight from source code. After that, we will take it up a notch by learning how to add databases and scale the application to achieve fast response times for your users. At the conclusion of this talk, you will understand the workflow to build, deploy, scale and manage applications deployed using Docker, Kubernetes, and OpenShift. And just for giggles, we will also learn how to do A/B and Blue / Green deployments.
Captions: 
	00:00:03,340 --> 00:00:11,589
thank you okay and I'm on the on the

00:00:07,510 --> 00:00:13,179
lots progressed well so welcome to D Wow

00:00:11,589 --> 00:00:16,810
no there's one more after me right

00:00:13,179 --> 00:00:18,910
there's a keynote coming so it's 4:00

00:00:16,810 --> 00:00:20,950
p.m. it's probably your heads are

00:00:18,910 --> 00:00:24,220
exploding with all the information today

00:00:20,950 --> 00:00:25,900
so I will not help you with that or I

00:00:24,220 --> 00:00:28,300
will help it exploding your head

00:00:25,900 --> 00:00:31,390
my name is Marek I work at red head in

00:00:28,300 --> 00:00:34,809
the open ship team and I will tell you

00:00:31,390 --> 00:00:38,230
something about docker about containers

00:00:34,809 --> 00:00:41,289
about OpenShift kubernetes and we will

00:00:38,230 --> 00:00:42,820
do some walkthrough what you may want to

00:00:41,289 --> 00:00:45,600
do what and what you don't

00:00:42,820 --> 00:00:49,300
may not want to do with containers and

00:00:45,600 --> 00:00:51,039
other technologies so I just need some

00:00:49,300 --> 00:00:53,219
information that's why I asked you over

00:00:51,039 --> 00:00:56,469
there slice what I will move a bit here

00:00:53,219 --> 00:01:00,120
who is an engineer like developers

00:00:56,469 --> 00:01:03,909
that's the guys who build cool stuff

00:01:00,120 --> 00:01:08,680
okay nice how many operations let the

00:01:03,909 --> 00:01:10,689
guys who run the cool stuff and how many

00:01:08,680 --> 00:01:15,369
managers those are the guys who slow

00:01:10,689 --> 00:01:17,380
down the other two groups ok almost no

00:01:15,369 --> 00:01:18,850
one good so have some basic ideas I'm

00:01:17,380 --> 00:01:21,100
speaking mostly to engineers and

00:01:18,850 --> 00:01:23,409
developers so that's cool because it's

00:01:21,100 --> 00:01:27,100
mostly about developer experience and

00:01:23,409 --> 00:01:28,960
how did you how to work with dead so

00:01:27,100 --> 00:01:31,899
first I will define a small problem that

00:01:28,960 --> 00:01:33,789
I found out recently and I have been

00:01:31,899 --> 00:01:36,189
speaking to some of our customers and I

00:01:33,789 --> 00:01:39,340
found out that they have a problem with

00:01:36,189 --> 00:01:40,659
very basic and very trivial stuff it has

00:01:39,340 --> 00:01:43,539
been here for years

00:01:40,659 --> 00:01:46,119
first inconsistent environment that

00:01:43,539 --> 00:01:47,979
means it works on my machine it should

00:01:46,119 --> 00:01:49,929
work in production as well right but

00:01:47,979 --> 00:01:53,770
everybody knows the problem and even

00:01:49,929 --> 00:01:56,140
though we are in the year 2017 right

00:01:53,770 --> 00:01:58,000
2017 there are still companies

00:01:56,140 --> 00:01:59,320
struggling with this problem so that's

00:01:58,000 --> 00:01:59,799
one of the princes liquid sector with

00:01:59,320 --> 00:02:02,380
containers

00:01:59,799 --> 00:02:05,229
the other one is deployments done over

00:02:02,380 --> 00:02:07,920
SF PBS depends on what you're trying to

00:02:05,229 --> 00:02:09,520
use or just directly get booing and

00:02:07,920 --> 00:02:13,510
checkout thing stuff

00:02:09,520 --> 00:02:15,340
let's get is better than SFTP but still

00:02:13,510 --> 00:02:16,959
it's a lot of

00:02:15,340 --> 00:02:21,010
you awarded this error-prone and could

00:02:16,959 --> 00:02:23,470
be problematic and manual integrations

00:02:21,010 --> 00:02:25,599
are required to do to do deployments

00:02:23,470 --> 00:02:27,370
like I have to ssh into the machine do

00:02:25,599 --> 00:02:29,440
get pool do check out some specific

00:02:27,370 --> 00:02:30,879
comment or something like that so these

00:02:29,440 --> 00:02:32,950
are some of the problems that I have

00:02:30,879 --> 00:02:35,470
seen in the vials like people are

00:02:32,950 --> 00:02:37,180
struggling with this and in my talk I

00:02:35,470 --> 00:02:39,370
would love to somehow tackle these

00:02:37,180 --> 00:02:43,000
problems and show you that there might

00:02:39,370 --> 00:02:46,599
be a solution that would help those so

00:02:43,000 --> 00:02:48,940
as you might expect based on my based on

00:02:46,599 --> 00:02:50,680
the the number name of the dog and put

00:02:48,940 --> 00:02:52,989
on the slides we are going to speak

00:02:50,680 --> 00:02:55,480
about containers and containers pretty

00:02:52,989 --> 00:02:57,970
much are the biggest passwords of today

00:02:55,480 --> 00:03:01,180
everybody speaks about them who heard

00:02:57,970 --> 00:03:04,390
about containers already we heard about

00:03:01,180 --> 00:03:07,750
containers two years ago yeah almost no

00:03:04,390 --> 00:03:10,480
one it's like a technology just came and

00:03:07,750 --> 00:03:12,220
it to the IT world or like a bomb and

00:03:10,480 --> 00:03:14,140
everybody now wants to do containers

00:03:12,220 --> 00:03:16,480
even they over to much no one knows what

00:03:14,140 --> 00:03:19,840
they want to do and it's quite a mess

00:03:16,480 --> 00:03:22,750
but everybody likes them so what is a

00:03:19,840 --> 00:03:25,569
container just basic basic information

00:03:22,750 --> 00:03:27,489
to get us started so on the left side I

00:03:25,569 --> 00:03:29,470
have a container image and on the right

00:03:27,489 --> 00:03:30,940
side there is a virtual machine so if

00:03:29,470 --> 00:03:32,709
you check the layers that are that are

00:03:30,940 --> 00:03:35,709
on the on the picture the virtual

00:03:32,709 --> 00:03:38,019
machine has more layers that means there

00:03:35,709 --> 00:03:39,819
is more stuff has to be history on to

00:03:38,019 --> 00:03:43,090
actually make something run something

00:03:39,819 --> 00:03:44,799
usable so if you want to use containers

00:03:43,090 --> 00:03:46,030
it's much more lightweight because you

00:03:44,799 --> 00:03:47,799
don't have to virtualize the whole

00:03:46,030 --> 00:03:49,389
operating system when you are in the

00:03:47,799 --> 00:03:52,419
virtualization lines you are making a

00:03:49,389 --> 00:03:54,160
virtual hardware and running the

00:03:52,419 --> 00:03:56,380
operating system on it in a virtual

00:03:54,160 --> 00:03:58,269
machine right if you are in a container

00:03:56,380 --> 00:04:00,220
you are virtualizing part of the

00:03:58,269 --> 00:04:01,870
operating system and then you are

00:04:00,220 --> 00:04:03,609
running application in that small part

00:04:01,870 --> 00:04:06,130
of the operating system so it's much

00:04:03,609 --> 00:04:08,230
more like life but there is one one

00:04:06,130 --> 00:04:08,590
downside to that you have only one care

00:04:08,230 --> 00:04:11,019
now

00:04:08,590 --> 00:04:12,459
so you cannot run Windows applications

00:04:11,019 --> 00:04:13,840
on Linux and you cannot learn the

00:04:12,459 --> 00:04:15,910
implications of Windows because there

00:04:13,840 --> 00:04:18,130
has to be days one can now share it

00:04:15,910 --> 00:04:20,470
between all these containers so it's

00:04:18,130 --> 00:04:22,690
just basic information to get us started

00:04:20,470 --> 00:04:25,960
so what's containers do or what they are

00:04:22,690 --> 00:04:27,640
supposed to do containers ship software

00:04:25,960 --> 00:04:28,740
so they allow you to package something

00:04:27,640 --> 00:04:30,960
so unit

00:04:28,740 --> 00:04:32,460
packaging and you can take it you can

00:04:30,960 --> 00:04:34,889
sell it to somebody somebody can

00:04:32,460 --> 00:04:36,900
download it and spin up the application

00:04:34,889 --> 00:04:39,090
that's in that container that this

00:04:36,900 --> 00:04:40,650
container should be self-contained so

00:04:39,090 --> 00:04:42,569
it's pretty much the whole user one that

00:04:40,650 --> 00:04:43,949
the application needs for running except

00:04:42,569 --> 00:04:46,530
the kernel because the kernel is shared

00:04:43,949 --> 00:04:49,560
and containers are supposed to be

00:04:46,530 --> 00:04:51,900
Universal which has not been super true

00:04:49,560 --> 00:04:53,039
until recently there is open container

00:04:51,900 --> 00:04:55,340
initiatives and some other

00:04:53,039 --> 00:04:58,500
standardization processes so there is

00:04:55,340 --> 00:05:00,780
work being done to actually make

00:04:58,500 --> 00:05:03,229
containers build one by technology run

00:05:00,780 --> 00:05:05,460
able using some other technology and

00:05:03,229 --> 00:05:08,099
when we understand what containers are

00:05:05,460 --> 00:05:08,610
supposed to do for us we can speak about

00:05:08,099 --> 00:05:12,449
docker

00:05:08,610 --> 00:05:14,550
who have heard about docker yeah most of

00:05:12,449 --> 00:05:16,500
you so there is pretty much the most

00:05:14,550 --> 00:05:19,530
famous technology for containers right

00:05:16,500 --> 00:05:21,270
now and when somebody says I want to run

00:05:19,530 --> 00:05:23,039
containers they usually think about

00:05:21,270 --> 00:05:24,870
running docker containers there are some

00:05:23,039 --> 00:05:28,740
other implementations like rocky 8 there

00:05:24,870 --> 00:05:30,569
freebsd jails some zones root is

00:05:28,740 --> 00:05:32,639
actually a container technology it

00:05:30,569 --> 00:05:35,280
didn't allow like proper security

00:05:32,639 --> 00:05:36,990
constraints is no resource is a resource

00:05:35,280 --> 00:05:38,909
isolation but it was a container

00:05:36,990 --> 00:05:41,849
technology by itself very simple but it

00:05:38,909 --> 00:05:44,250
was so dr. is the container technology

00:05:41,849 --> 00:05:45,389
of today most people like it most people

00:05:44,250 --> 00:05:48,330
want to work with it

00:05:45,389 --> 00:05:51,690
so what Tucker does is on one side it

00:05:48,330 --> 00:05:53,340
defines a packaging format so it says ok

00:05:51,690 --> 00:05:57,389
if you want to package a container it

00:05:53,340 --> 00:05:59,009
will be this kind of starchy set it will

00:05:57,389 --> 00:06:00,930
be this meta information safe somewhere

00:05:59,009 --> 00:06:03,139
in this specific format and this is

00:06:00,930 --> 00:06:05,699
described as a decree container this

00:06:03,139 --> 00:06:09,740
description is actually being served as

00:06:05,699 --> 00:06:12,000
as the open container initiative so the

00:06:09,740 --> 00:06:16,440
standard is not something artificial

00:06:12,000 --> 00:06:19,199
created just to somehow describe any

00:06:16,440 --> 00:06:21,360
container it is actually getting docker

00:06:19,199 --> 00:06:22,949
and their specification and make it a

00:06:21,360 --> 00:06:26,219
standard so that other tools can use it

00:06:22,949 --> 00:06:27,449
as well there is also a tool that allows

00:06:26,219 --> 00:06:30,870
you to build containers

00:06:27,449 --> 00:06:32,699
share them and get them so that's

00:06:30,870 --> 00:06:34,740
something that we are going to use today

00:06:32,699 --> 00:06:36,150
so one of the demos that I have is

00:06:34,740 --> 00:06:38,570
actually building the knotek container

00:06:36,150 --> 00:06:40,460
and then

00:06:38,570 --> 00:06:43,250
running the application that's in the

00:06:40,460 --> 00:06:45,140
container but also docker hop it's a

00:06:43,250 --> 00:06:47,060
marketplace so it's the place where you

00:06:45,140 --> 00:06:49,130
can share containers so if you build a

00:06:47,060 --> 00:06:51,140
container you can take the container

00:06:49,130 --> 00:06:52,880
push it into the docker hub and somebody

00:06:51,140 --> 00:06:54,680
can discover it and pull it to his

00:06:52,880 --> 00:06:59,390
machine and spin it up so it's a very

00:06:54,680 --> 00:07:02,600
how to distribute software as well yeah

00:06:59,390 --> 00:07:07,880
okay so I'm already at my demo stage so

00:07:02,600 --> 00:07:10,400
I will move over to item so I have some

00:07:07,880 --> 00:07:13,520
source code prepared here I have really

00:07:10,400 --> 00:07:18,200
really complex PHP application prepared

00:07:13,520 --> 00:07:22,040
for you it's one file I will make it

00:07:18,200 --> 00:07:24,410
bigger so you can read it actually so

00:07:22,040 --> 00:07:25,760
because it's so complex till uni it has

00:07:24,410 --> 00:07:28,790
to be big so you can understand all the

00:07:25,760 --> 00:07:31,580
code that's there but it actually makes

00:07:28,790 --> 00:07:33,260
everything simpler because the way how

00:07:31,580 --> 00:07:34,850
you package a complex application it's

00:07:33,260 --> 00:07:37,580
very much similar how you cook how you

00:07:34,850 --> 00:07:39,560
would pick H is small application so if

00:07:37,580 --> 00:07:42,380
you try to package something something

00:07:39,560 --> 00:07:45,230
bigger it may take more time to actually

00:07:42,380 --> 00:07:46,490
take the time and make it happen but

00:07:45,230 --> 00:07:48,470
with this modification it'll be quick

00:07:46,490 --> 00:07:51,620
and easy and the process is pretty is

00:07:48,470 --> 00:07:54,440
going to be very much the same so if you

00:07:51,620 --> 00:07:56,420
do want to package application basically

00:07:54,440 --> 00:08:00,170
docker container what you have to do is

00:07:56,420 --> 00:08:03,500
to write a doctor file and I apologize

00:08:00,170 --> 00:08:06,830
for my weird moving of my mouth because

00:08:03,500 --> 00:08:09,920
my trackpad and my keyboard died on the

00:08:06,830 --> 00:08:11,780
laptop so I bought myself a wireless

00:08:09,920 --> 00:08:14,270
keyboard case today so I'm using a

00:08:11,780 --> 00:08:16,130
keyboard and a mouse because just a lot

00:08:14,270 --> 00:08:19,310
of this material is functioning so if

00:08:16,130 --> 00:08:22,310
you see weird movement it's it okay so

00:08:19,310 --> 00:08:26,380
what this does is okay let's build a

00:08:22,310 --> 00:08:30,260
container that means the code from PHP

00:08:26,380 --> 00:08:32,210
because what docker is has designed is

00:08:30,260 --> 00:08:35,870
hierarchy of different layers of

00:08:32,210 --> 00:08:38,510
containers and you can say from PHP and

00:08:35,870 --> 00:08:40,280
then there is a version and it says take

00:08:38,510 --> 00:08:42,979
the PHP container that's already on the

00:08:40,280 --> 00:08:45,590
carafe and this docker container will be

00:08:42,979 --> 00:08:47,990
the base and then all the other commands

00:08:45,590 --> 00:08:49,190
will be below it will take this base

00:08:47,990 --> 00:08:51,950
image and somehow

00:08:49,190 --> 00:08:54,860
extended right so somebody had done all

00:08:51,950 --> 00:08:56,900
the hard work for us to already build

00:08:54,860 --> 00:08:59,120
the lure like install Apache configure a

00:08:56,900 --> 00:09:00,800
party install PHP link these things

00:08:59,120 --> 00:09:05,570
together that has already be done so

00:09:00,800 --> 00:09:07,880
from PHP just gives me 7.1 PHP and

00:09:05,570 --> 00:09:09,700
Apache running in the container what all

00:09:07,880 --> 00:09:14,360
I have to do is take my source code and

00:09:09,700 --> 00:09:17,600
copy it into that VAR the www HTML

00:09:14,360 --> 00:09:20,480
directory and then when the container is

00:09:17,600 --> 00:09:22,610
committed I will get something that I

00:09:20,480 --> 00:09:26,210
can distribute I can run my application

00:09:22,610 --> 00:09:28,370
is there runnable so how long how do I

00:09:26,210 --> 00:09:35,030
build a container it's a very simple

00:09:28,370 --> 00:09:38,420
command so doctor bills HT says name the

00:09:35,030 --> 00:09:40,040
container of PHP UK and take the docker

00:09:38,420 --> 00:09:44,450
file in the current directory as the

00:09:40,040 --> 00:09:49,610
source right so I'm going to copy paste

00:09:44,450 --> 00:09:51,650
this into my cone zone and we are going

00:09:49,610 --> 00:09:54,230
to build a container so first what we

00:09:51,650 --> 00:09:59,180
are doing is or I mean make it slightly

00:09:54,230 --> 00:10:00,250
bigger and read it ends up can you read

00:09:59,180 --> 00:10:06,950
it

00:10:00,250 --> 00:10:10,250
no not in the back so now yeah cool

00:10:06,950 --> 00:10:13,730
so what we set docker build container

00:10:10,250 --> 00:10:16,940
using this occupy also from PHP it used

00:10:13,730 --> 00:10:20,380
the container which it shadows this this

00:10:16,940 --> 00:10:22,910
number so I because I already did this

00:10:20,380 --> 00:10:25,280
time consuming part of downloading all

00:10:22,910 --> 00:10:26,990
the layers on my machine so it is using

00:10:25,280 --> 00:10:29,330
the de layers from my cache on my

00:10:26,990 --> 00:10:30,950
machine so it was pretty fast and the

00:10:29,330 --> 00:10:33,500
next type which was second and last

00:10:30,950 --> 00:10:35,600
we'll take the source code in this eric

00:10:33,500 --> 00:10:39,160
s rh directory and put it into the

00:10:35,600 --> 00:10:42,110
container so my container was built and

00:10:39,160 --> 00:10:44,089
the only thing that i now got to do is

00:10:42,110 --> 00:10:45,950
to start something right so the i've

00:10:44,089 --> 00:10:50,420
been i want to run a container i do

00:10:45,950 --> 00:10:52,400
dr. on - t - i so I want to have I want

00:10:50,420 --> 00:10:55,010
to have STD I connected with the

00:10:52,400 --> 00:10:57,950
container and my shell and I want a TP I

00:10:55,010 --> 00:11:01,890
for that for that container and SP says

00:10:57,950 --> 00:11:06,810
that a port 8080 on my machine will be

00:11:01,890 --> 00:11:08,250
to 8180 port in the container and PHP UK

00:11:06,810 --> 00:11:13,530
is the name of the container which we

00:11:08,250 --> 00:11:18,210
named in the previous step so taking

00:11:13,530 --> 00:11:19,950
this and here spitting up a container

00:11:18,210 --> 00:11:21,630
you see that Apache has been started

00:11:19,950 --> 00:11:23,910
there is some problem with host names as

00:11:21,630 --> 00:11:27,690
usual and Apache is running in the

00:11:23,910 --> 00:11:37,800
foreground which is okay let's go back

00:11:27,690 --> 00:11:40,950
here and 8080 right and I have PHP info

00:11:37,800 --> 00:11:43,650
page on my on my screen so what I did is

00:11:40,950 --> 00:11:44,760
I took my my simple PHP application I

00:11:43,650 --> 00:11:47,340
put it into the container

00:11:44,760 --> 00:11:48,750
I can I can run it now if I have

00:11:47,340 --> 00:11:52,530
something more complex like WordPress

00:11:48,750 --> 00:11:54,450
Drupal whatever I I will package the

00:11:52,530 --> 00:11:56,130
application exactly the same way the

00:11:54,450 --> 00:11:58,230
only thing is I will need to link it

00:11:56,130 --> 00:12:00,990
with some database with something else

00:11:58,230 --> 00:12:02,670
that's a debt running next to it but

00:12:00,990 --> 00:12:04,290
this is configuration problem that's not

00:12:02,670 --> 00:12:05,610
like how you package the application

00:12:04,290 --> 00:12:09,180
that's more like how you start the

00:12:05,610 --> 00:12:12,300
application writer so our application

00:12:09,180 --> 00:12:15,330
was running so that's how you do this

00:12:12,300 --> 00:12:17,130
kind of stuff it's a bit softer but

00:12:15,330 --> 00:12:19,350
there are still some problem is that

00:12:17,130 --> 00:12:20,910
right so for every application I need to

00:12:19,350 --> 00:12:23,160
write the doctor file because the doctor

00:12:20,910 --> 00:12:27,060
file defines how I put my source code

00:12:23,160 --> 00:12:30,300
into the in 2d container so even though

00:12:27,060 --> 00:12:32,550
in in the most simplest cases I wouldn't

00:12:30,300 --> 00:12:34,800
I would just copy paste that that's a

00:12:32,550 --> 00:12:37,260
dead pilot I had before the local file

00:12:34,800 --> 00:12:39,750
into all my projects I still have to

00:12:37,260 --> 00:12:41,430
head to the core files there and the

00:12:39,750 --> 00:12:44,040
other thing is engineers have to

00:12:41,430 --> 00:12:48,090
understand how doctor how doctor works

00:12:44,040 --> 00:12:50,130
and need to write the doctor file my pro

00:12:48,090 --> 00:12:52,410
but I don't like about it is also is

00:12:50,130 --> 00:12:53,940
that I have to put all if I want to do

00:12:52,410 --> 00:12:55,950
something more complex I would need to

00:12:53,940 --> 00:12:57,810
put run commands and do some shell

00:12:55,950 --> 00:13:00,690
scripting in the docker file which is

00:12:57,810 --> 00:13:03,090
not very convenient and the last and

00:13:00,690 --> 00:13:04,740
biggest problem is that my bills the

00:13:03,090 --> 00:13:06,750
bills of the containers are being done

00:13:04,740 --> 00:13:07,790
on an on the local machine on my machine

00:13:06,750 --> 00:13:10,500
right here

00:13:07,790 --> 00:13:12,270
this is problematic mostly if you are in

00:13:10,500 --> 00:13:15,600
startup where it's like small startup

00:13:12,270 --> 00:13:18,000
where the weather engineers and

00:13:15,600 --> 00:13:19,920
the operations have a full set of

00:13:18,000 --> 00:13:21,480
functions and they just move from one

00:13:19,920 --> 00:13:23,820
role to the other

00:13:21,480 --> 00:13:25,830
that's quite fine but once you get a

00:13:23,820 --> 00:13:28,110
bigger company and you find out that

00:13:25,830 --> 00:13:30,150
there is a specific division between I

00:13:28,110 --> 00:13:32,040
am supposed to develop stuff and I'm

00:13:30,150 --> 00:13:35,460
supposed to run stuff so I'm developer

00:13:32,040 --> 00:13:37,710
or an operations person building from

00:13:35,460 --> 00:13:40,110
trainers on local machines of the

00:13:37,710 --> 00:13:43,140
engineers or developers is quite

00:13:40,110 --> 00:13:44,790
problematic because what happens if the

00:13:43,140 --> 00:13:47,610
operations person takes it

00:13:44,790 --> 00:13:49,200
pegasus quicker container it's in

00:13:47,610 --> 00:13:51,210
production container is running

00:13:49,200 --> 00:13:53,490
everything's fine and three days into

00:13:51,210 --> 00:13:55,440
internet the container starts failing

00:13:53,490 --> 00:13:57,120
and there is a problem that it only

00:13:55,440 --> 00:13:58,800
being it's only fixable

00:13:57,120 --> 00:14:00,720
by changing the doctor file or

00:13:58,800 --> 00:14:02,490
rebuilding the container so the

00:14:00,720 --> 00:14:04,410
operations person has to go back to the

00:14:02,490 --> 00:14:07,170
engineer and say hey there is a problem

00:14:04,410 --> 00:14:08,910
use me I need you to fix it and he says

00:14:07,170 --> 00:14:11,040
sorry I have a deadline I cannot do it

00:14:08,910 --> 00:14:14,040
right now next week but my production is

00:14:11,040 --> 00:14:17,760
failing and of my problem and this can

00:14:14,040 --> 00:14:20,310
be a problematic so it is beneficial in

00:14:17,760 --> 00:14:22,500
turn yes it's cool if engineers write

00:14:20,310 --> 00:14:24,270
the doctor files and but it's not really

00:14:22,500 --> 00:14:26,940
cool if they build up your files and the

00:14:24,270 --> 00:14:28,830
operations people only rely on the

00:14:26,940 --> 00:14:33,000
binary blobs that are produced by the

00:14:28,830 --> 00:14:35,630
engineers this can be problematic so

00:14:33,000 --> 00:14:38,520
there is a tool called first to image

00:14:35,630 --> 00:14:40,830
that is trying to mitigate some of those

00:14:38,520 --> 00:14:43,650
problems not all of them but some of you

00:14:40,830 --> 00:14:46,770
so first it understands the technology

00:14:43,650 --> 00:14:50,280
that is trying to build so the basic

00:14:46,770 --> 00:14:52,280
idea is let's create a container that is

00:14:50,280 --> 00:14:55,140
capable of building other containers I

00:14:52,280 --> 00:14:57,780
will take I will somebody who

00:14:55,140 --> 00:15:00,180
understands how to build stuff how to do

00:14:57,780 --> 00:15:02,180
operations will create a container with

00:15:00,180 --> 00:15:06,390
all the dependencies with everything and

00:15:02,180 --> 00:15:09,270
the developer only needs to point this

00:15:06,390 --> 00:15:11,030
docker container on some specific source

00:15:09,270 --> 00:15:13,460
code and it will build container

00:15:11,030 --> 00:15:15,810
pre-configured by the operations and

00:15:13,460 --> 00:15:17,760
take those will take the first code in

00:15:15,810 --> 00:15:19,590
and will complete a new container that's

00:15:17,760 --> 00:15:21,060
runnable with mine what we did in the

00:15:19,590 --> 00:15:25,320
previous one but without doing the

00:15:21,060 --> 00:15:28,250
doctor file stuff and yeah that's pretty

00:15:25,320 --> 00:15:33,620
much what I have in my valid point

00:15:28,250 --> 00:15:38,180
so let's move to small demo back to back

00:15:33,620 --> 00:15:40,460
here so Sui now my application is still

00:15:38,180 --> 00:15:45,320
very complex still extremely complex

00:15:40,460 --> 00:15:47,210
application and when I go to build there

00:15:45,320 --> 00:15:49,900
is one command that I can do so starts

00:15:47,210 --> 00:15:54,170
to image build using the source code in

00:15:49,900 --> 00:15:58,130
the directory SSE and using the image

00:15:54,170 --> 00:16:03,800
that that uses PHP 7-0 on CentOS 7 and

00:15:58,130 --> 00:16:07,760
create a new container named PHP UK well

00:16:03,800 --> 00:16:14,930
let's do something first doctor am i PHP

00:16:07,760 --> 00:16:17,480
you okay sure so I have to I have

00:16:14,930 --> 00:16:18,830
cleaned the the container is equated in

00:16:17,480 --> 00:16:24,500
the first step so you go trust me that

00:16:18,830 --> 00:16:35,930
actually build a new container so we are

00:16:24,500 --> 00:16:38,480
in ds2 I so I already have the descent

00:16:35,930 --> 00:16:40,040
of PHP seven zeroes into seven cache so

00:16:38,480 --> 00:16:41,960
there was nothing to download it was

00:16:40,040 --> 00:16:43,970
quite fast so only thing I need to do is

00:16:41,960 --> 00:16:46,160
install the application source because I

00:16:43,970 --> 00:16:47,810
have no composer file I am NOT pulling

00:16:46,160 --> 00:16:49,700
any dependencies or anything like that

00:16:47,810 --> 00:16:52,070
it is just putting the source code there

00:16:49,700 --> 00:16:57,490
exactly as we did in the previous in the

00:16:52,070 --> 00:17:02,630
previous example so when I moved back to

00:16:57,490 --> 00:17:03,980
start I will spin it up do you see the

00:17:02,630 --> 00:17:05,660
difference between these combat this

00:17:03,980 --> 00:17:11,060
command and the one that we had the

00:17:05,660 --> 00:17:13,930
previous example the pork yeah

00:17:11,060 --> 00:17:16,010
so let's also one of the problems that

00:17:13,930 --> 00:17:18,680
some of the different containers have

00:17:16,010 --> 00:17:20,630
mostly those that are in doctor hub when

00:17:18,680 --> 00:17:22,910
you spin when it when we build the

00:17:20,630 --> 00:17:25,700
previous one the effective views are

00:17:22,910 --> 00:17:28,490
running in the container bus route and I

00:17:25,700 --> 00:17:30,110
will ask those operations people who I

00:17:28,490 --> 00:17:32,350
have in the audience who would run your

00:17:30,110 --> 00:17:34,820
application X route on your machine in

00:17:32,350 --> 00:17:38,360
production okay

00:17:34,820 --> 00:17:41,180
no hand so what we do is we actually

00:17:38,360 --> 00:17:45,680
whenever we package a container

00:17:41,180 --> 00:17:47,120
and using the STRs this y2v domed around

00:17:45,680 --> 00:17:48,830
the container as root we don't have to

00:17:47,120 --> 00:17:50,990
be a rotation around the container so

00:17:48,830 --> 00:17:53,360
you cannot bind to port 80 as it was

00:17:50,990 --> 00:17:55,580
possible in the previous container but

00:17:53,360 --> 00:17:57,860
it's bound to 8080 because it is running

00:17:55,580 --> 00:17:59,510
at some specific user so that's one of

00:17:57,860 --> 00:18:05,960
the one of the security implications

00:17:59,510 --> 00:18:09,020
that s2i also brings to you okay spin it

00:18:05,960 --> 00:18:12,920
up pretty much the same we'll put the

00:18:09,020 --> 00:18:16,430
previous case refresh the page and is

00:18:12,920 --> 00:18:18,260
there there is more things in the there

00:18:16,430 --> 00:18:20,570
are more dependencies in d40 any file

00:18:18,260 --> 00:18:22,370
and there is a different version so we

00:18:20,570 --> 00:18:25,990
have built a new container but this time

00:18:22,370 --> 00:18:29,780
no dr5 was involved and somebody who

00:18:25,990 --> 00:18:31,970
understood okay or who was willing was

00:18:29,780 --> 00:18:33,500
knowledgeable to build the container he

00:18:31,970 --> 00:18:35,600
built container for me and I just used

00:18:33,500 --> 00:18:37,400
his container with Hollis knowledge to

00:18:35,600 --> 00:18:41,120
build to put my source code in there and

00:18:37,400 --> 00:18:47,660
build the application so let's go back

00:18:41,120 --> 00:18:50,470
to my presentation and small recap so

00:18:47,660 --> 00:18:54,350
Whitaker is the packaging format format

00:18:50,470 --> 00:18:56,750
it's a it's a nice tool to manage

00:18:54,350 --> 00:18:59,330
containers on single machine and you can

00:18:56,750 --> 00:19:02,000
use it to go to registry or like

00:18:59,330 --> 00:19:04,880
microplace sui builds on top of Stoker

00:19:02,000 --> 00:19:06,650
it allows you to build containers from

00:19:04,880 --> 00:19:08,120
source codes and your source code

00:19:06,650 --> 00:19:11,060
doesn't have to be aware of the doctor

00:19:08,120 --> 00:19:15,830
there is no need for doctor file so with

00:19:11,060 --> 00:19:18,800
these things we might have fix some of

00:19:15,830 --> 00:19:20,600
the problems right so in for the

00:19:18,800 --> 00:19:24,080
inconsistent with my environment even

00:19:20,600 --> 00:19:28,520
though my development is still happening

00:19:24,080 --> 00:19:30,410
on my machine I can package the I can

00:19:28,520 --> 00:19:32,870
package the application in the container

00:19:30,410 --> 00:19:35,180
so the environment the application is

00:19:32,870 --> 00:19:37,310
running in it can be the same as in the

00:19:35,180 --> 00:19:39,290
production because if it's built using

00:19:37,310 --> 00:19:41,750
this from the same image or if it's you

00:19:39,290 --> 00:19:45,500
built using the same image in my example

00:19:41,750 --> 00:19:47,870
I have the same environment for for my

00:19:45,500 --> 00:19:51,710
application and I don't have to do

00:19:47,870 --> 00:19:54,560
deployment over SFTP s or JIT forget

00:19:51,710 --> 00:19:56,480
because I can push

00:19:54,560 --> 00:19:58,850
my container and the container can be

00:19:56,480 --> 00:20:01,760
deployed there is still the problem that

00:19:58,850 --> 00:20:03,560
the containers are built on my machine

00:20:01,760 --> 00:20:07,580
so the operations people don't have

00:20:03,560 --> 00:20:09,470
access to my microcut file and the

00:20:07,580 --> 00:20:12,350
manual interrogation interactions are

00:20:09,470 --> 00:20:15,650
still required because I have to ssh

00:20:12,350 --> 00:20:18,380
into my machine dr. Poole the container

00:20:15,650 --> 00:20:23,570
or get this data somehow and then spin

00:20:18,380 --> 00:20:25,060
it up so once you try to solving the

00:20:23,570 --> 00:20:27,650
problem of the manual manual

00:20:25,060 --> 00:20:29,750
interactions you will actually find out

00:20:27,650 --> 00:20:33,230
that it is solved by most of the tools

00:20:29,750 --> 00:20:36,980
that allow running containers on on a

00:20:33,230 --> 00:20:43,210
scale not on a single machine and do you

00:20:36,980 --> 00:20:46,760
remember the shortest path paas Buddha

00:20:43,210 --> 00:20:49,970
okay so it was very popular a few years

00:20:46,760 --> 00:20:52,430
back the polarity is slightly slightly

00:20:49,970 --> 00:20:54,410
going down so it was on one on one side

00:20:52,430 --> 00:20:55,790
you had engineer there is some black box

00:20:54,410 --> 00:20:58,100
and then you had an ironing application

00:20:55,790 --> 00:21:02,240
so it usually it was like that you do

00:20:58,100 --> 00:21:04,310
get the disco mate get push the tool

00:21:02,240 --> 00:21:06,500
does some some some work for me and then

00:21:04,310 --> 00:21:09,380
I have my application running so we had

00:21:06,500 --> 00:21:11,570
a tool like that called open ship which

00:21:09,380 --> 00:21:13,820
we extend it and we completely rewrote

00:21:11,570 --> 00:21:18,080
and we came up with what we call open

00:21:13,820 --> 00:21:19,460
should be free I says it is platform for

00:21:18,080 --> 00:21:22,310
running and building containers it

00:21:19,460 --> 00:21:26,540
leverages doctor and kubernetes you know

00:21:22,310 --> 00:21:28,430
kubernetes a kubernetes it's a project

00:21:26,540 --> 00:21:30,050
started by google google has been using

00:21:28,430 --> 00:21:31,370
containers since like 2000 for

00:21:30,050 --> 00:21:32,720
everything that runs in Google

00:21:31,370 --> 00:21:38,560
infrastructure has to be in a container

00:21:32,720 --> 00:21:42,140
and how big is Google infrastructure big

00:21:38,560 --> 00:21:44,720
nobody knows really but I probably it's

00:21:42,140 --> 00:21:47,840
very big so we have been running

00:21:44,720 --> 00:21:49,250
containers on this Google scale and then

00:21:47,840 --> 00:21:52,070
they started to project called

00:21:49,250 --> 00:21:53,840
kubernetes and then there they are open

00:21:52,070 --> 00:21:56,000
sourcing they know how of running

00:21:53,840 --> 00:21:59,020
containers for 10 years on this Google

00:21:56,000 --> 00:22:01,310
scale so we have grazing on that and

00:21:59,020 --> 00:22:03,470
you're also using many other open-source

00:22:01,310 --> 00:22:04,580
projects we also up cope with the open

00:22:03,470 --> 00:22:06,260
source so you can go pick up those

00:22:04,580 --> 00:22:07,530
complex open Jewish origin you can get

00:22:06,260 --> 00:22:11,110
the source code

00:22:07,530 --> 00:22:12,760
so origin is the open source project we

00:22:11,110 --> 00:22:14,770
have open ships containing a platform

00:22:12,760 --> 00:22:17,020
which is a product that we sell support

00:22:14,770 --> 00:22:20,350
for and then we have online which is a

00:22:17,020 --> 00:22:23,799
service that you can run on and we are

00:22:20,350 --> 00:22:26,110
leveraging the x2 y2 so it's possible to

00:22:23,799 --> 00:22:28,660
use the platform to build containers and

00:22:26,110 --> 00:22:31,710
then deploy them and as well as

00:22:28,660 --> 00:22:34,480
deploying containers from from dr. hub

00:22:31,710 --> 00:22:39,270
we try to make the platform much more

00:22:34,480 --> 00:22:42,370
much more versatile than it was with the

00:22:39,270 --> 00:22:44,470
paas concept so we because actually

00:22:42,370 --> 00:22:46,150
contain an orchestration platform which

00:22:44,470 --> 00:22:48,280
is very important for the micro-services

00:22:46,150 --> 00:22:52,000
way of doing stuff because it doesn't

00:22:48,280 --> 00:22:54,610
matter if it's HTTP or so pH paas was

00:22:52,000 --> 00:22:57,280
mostly developed for running PHP of HTTP

00:22:54,610 --> 00:22:59,799
applications but container platforms are

00:22:57,280 --> 00:23:02,080
usually okay to one whatever is tcp

00:22:59,799 --> 00:23:03,910
bytes or UDP based we put out of

00:23:02,080 --> 00:23:07,210
security constraints around the stuff so

00:23:03,910 --> 00:23:10,299
if your container is compromised and the

00:23:07,210 --> 00:23:12,130
the attacker gets out of the container

00:23:10,299 --> 00:23:14,140
we have excellent next policies around

00:23:12,130 --> 00:23:15,820
those containers so even though he gets

00:23:14,140 --> 00:23:19,150
out of the container he still is

00:23:15,820 --> 00:23:22,419
isolated by the selinux and you can

00:23:19,150 --> 00:23:28,090
allocate like specify quota and and how

00:23:22,419 --> 00:23:30,250
much resources users can use so how

00:23:28,090 --> 00:23:32,679
difficult it is to use the platform so

00:23:30,250 --> 00:23:35,500
again OSI is the is the client tool so

00:23:32,679 --> 00:23:37,360
we can do OSI new app then I say what

00:23:35,500 --> 00:23:41,169
technology I want to use as the source

00:23:37,360 --> 00:23:43,059
to I so PHP and then I point at some at

00:23:41,169 --> 00:23:44,860
some dinner post array so it will create

00:23:43,059 --> 00:23:46,570
although all the stuff in the background

00:23:44,860 --> 00:23:48,190
that needs to be there to make an

00:23:46,570 --> 00:23:50,380
application running it will pull the

00:23:48,190 --> 00:23:53,350
code it will build a code but the

00:23:50,380 --> 00:23:56,590
container deploy D container I can also

00:23:53,350 --> 00:23:58,030
do like MySQL so it will just look into

00:23:56,590 --> 00:24:01,330
doctor hub and it will pull the

00:23:58,030 --> 00:24:02,980
container and deploy MySQL for using the

00:24:01,330 --> 00:24:04,929
container of food from Dr Hubbs or you

00:24:02,980 --> 00:24:06,669
can prove for whatever a repository or

00:24:04,929 --> 00:24:08,590
registry you want to if you have

00:24:06,669 --> 00:24:11,530
something already internal you can use

00:24:08,590 --> 00:24:14,230
that as well if you want to try some I

00:24:11,530 --> 00:24:16,450
will do some demos but if you want to do

00:24:14,230 --> 00:24:19,419
something like that in on your own

00:24:16,450 --> 00:24:21,330
machine or do it at home we have project

00:24:19,419 --> 00:24:24,390
called mini shift which allows you

00:24:21,330 --> 00:24:26,280
to spin up OpenShift locally freedom

00:24:24,390 --> 00:24:29,400
initiative start it will download boo -

00:24:26,280 --> 00:24:31,140
Deker ISO it will download the OSI

00:24:29,400 --> 00:24:33,540
client - in there and then it will run

00:24:31,140 --> 00:24:38,820
OSI cluster app which spins up the

00:24:33,540 --> 00:24:41,610
cluster in the VM see ha okay

00:24:38,820 --> 00:24:43,500
spins up the open check in the VM so

00:24:41,610 --> 00:24:45,510
everything is contained in this virtual

00:24:43,500 --> 00:24:48,600
machine and you can access it and do

00:24:45,510 --> 00:24:54,450
whatever you want and it's extremely

00:24:48,600 --> 00:24:57,630
simple so let's do some dimmers and I'm

00:24:54,450 --> 00:25:00,870
going to close this page and I will

00:24:57,630 --> 00:25:02,580
start with uh with my the console so

00:25:00,870 --> 00:25:04,920
when you spin up open sheet it looks

00:25:02,580 --> 00:25:07,620
something like that you can add

00:25:04,920 --> 00:25:09,240
something to the project so project is

00:25:07,620 --> 00:25:11,820
like the namespace where things are

00:25:09,240 --> 00:25:14,610
located so I can choose PHP we have a

00:25:11,820 --> 00:25:16,410
variable very old version right here 5.6

00:25:14,610 --> 00:25:19,290
but it's quite fine for the for the

00:25:16,410 --> 00:25:25,380
example so let's select it I can name my

00:25:19,290 --> 00:25:28,590
application show demo they move in that

00:25:25,380 --> 00:25:33,050
landfill or something like that I take

00:25:28,590 --> 00:25:35,310
my source code from HTTP from github

00:25:33,050 --> 00:25:42,420
it's still the same compass application

00:25:35,310 --> 00:25:48,630
as we had before click it / start

00:25:42,420 --> 00:25:57,300
working is it is it loading yeah but it

00:25:48,630 --> 00:26:04,310
is very slow well let's hope it will

00:25:57,300 --> 00:26:04,310
work here so we ain't thank you overly

00:26:07,440 --> 00:26:12,480
so what happened is and there is no

00:26:09,900 --> 00:26:18,320
deployment yet it's not very readable on

00:26:12,480 --> 00:26:18,320
the screen is it better now

00:26:25,080 --> 00:26:27,650
what

00:26:36,549 --> 00:26:40,049
yeah I don't have been that mad

00:26:50,920 --> 00:26:55,750
okay now what happened in it so okay my

00:26:54,100 --> 00:26:58,480
bill sale so there was a bill so it was

00:26:55,750 --> 00:27:01,630
trying to clone my repository and Google

00:26:58,480 --> 00:27:04,570
sales so that can happen so I just I can

00:27:01,630 --> 00:27:09,160
start to build again so new build is

00:27:04,570 --> 00:27:11,950
running can see the log so yeah so right

00:27:09,160 --> 00:27:13,960
now I have pulled the source code I am I

00:27:11,950 --> 00:27:16,600
was installing this application source

00:27:13,960 --> 00:27:19,960
into the into the container so that was

00:27:16,600 --> 00:27:23,290
the same step as before and then I am

00:27:19,960 --> 00:27:28,720
pushing into the local registry so when

00:27:23,290 --> 00:27:30,100
I get back to my overview page you can

00:27:28,720 --> 00:27:32,410
see that I have one container running

00:27:30,100 --> 00:27:34,630
already my application is available on

00:27:32,410 --> 00:27:37,360
this DNS yeah

00:27:34,630 --> 00:27:39,340
so it's older older PHP but pretty much

00:27:37,360 --> 00:27:42,850
the same for public view for seven one

00:27:39,340 --> 00:27:45,430
seven zero or whatever and I can check

00:27:42,850 --> 00:27:48,190
my my container running somewhere here

00:27:45,430 --> 00:27:50,620
so I can see the logs so this is the

00:27:48,190 --> 00:27:51,130
same box as I saw before and I can go to

00:27:50,620 --> 00:27:54,460
terminal

00:27:51,130 --> 00:27:57,940
I can see that my application is running

00:27:54,460 --> 00:28:00,250
right so I didn't have to do anything on

00:27:57,940 --> 00:28:03,490
my laptop what I would have to do with

00:28:00,250 --> 00:28:06,430
this workflow is work on my local my

00:28:03,490 --> 00:28:08,920
things and when I'm ready get commit get

00:28:06,430 --> 00:28:10,210
pushed to some github repo or little of

00:28:08,920 --> 00:28:12,850
people or whatever I using in your

00:28:10,210 --> 00:28:15,070
company and you can too you can

00:28:12,850 --> 00:28:17,740
configure web hooks to actually trigger

00:28:15,070 --> 00:28:20,110
the built-in the platform so whenever

00:28:17,740 --> 00:28:23,020
you get push the container is going to

00:28:20,110 --> 00:28:24,790
be built and it's going to be deployed

00:28:23,020 --> 00:28:26,620
so the engineer who is working on

00:28:24,790 --> 00:28:28,600
something it doesn't have to at all

00:28:26,620 --> 00:28:31,150
understand how doctor works our

00:28:28,600 --> 00:28:32,890
container works for him it's like a to

00:28:31,150 --> 00:28:35,530
project so let's select the PHP version

00:28:32,890 --> 00:28:37,780
it is my source code configure my github

00:28:35,530 --> 00:28:39,850
is the web root and whenever I get push

00:28:37,780 --> 00:28:42,820
I will see the current version of my

00:28:39,850 --> 00:28:45,070
application running in the platform so

00:28:42,820 --> 00:28:48,220
that's one of the ways so that's okay

00:28:45,070 --> 00:28:51,640
but not everybody wants to push into get

00:28:48,220 --> 00:28:54,100
ripples not everybody wants to use use

00:28:51,640 --> 00:28:56,050
github or gate lock so you can also do

00:28:54,100 --> 00:28:59,260
pretty much the same thing using source

00:28:56,050 --> 00:29:00,350
code in your in your command line so

00:28:59,260 --> 00:29:03,620
again

00:29:00,350 --> 00:29:08,030
I have some scripts prepare over here so

00:29:03,620 --> 00:29:10,520
when I am in in here I have a source

00:29:08,030 --> 00:29:13,130
code again the same my extreme chromebox

00:29:10,520 --> 00:29:17,030
application so this time I will do

00:29:13,130 --> 00:29:19,580
similar things as I did before in the

00:29:17,030 --> 00:29:22,610
web console but I will do it from the

00:29:19,580 --> 00:29:24,380
from the command line and I will use the

00:29:22,610 --> 00:29:26,630
source code that's in the source

00:29:24,380 --> 00:29:28,190
directory so first I will create a new

00:29:26,630 --> 00:29:38,900
application using the source code and

00:29:28,190 --> 00:29:40,820
name is PHP ok so that is this and when

00:29:38,900 --> 00:29:45,320
I switch back to my web console C is

00:29:40,820 --> 00:29:48,679
very nicely you see that my files my

00:29:45,320 --> 00:29:52,010
build side right now that expect it but

00:29:48,679 --> 00:29:54,590
I created all the things required around

00:29:52,010 --> 00:29:56,690
it to actually make it happen I can also

00:29:54,590 --> 00:29:59,210
create it I didn't create the DNS this

00:29:56,690 --> 00:30:01,429
time so I can create it manually okay I

00:29:59,210 --> 00:30:06,799
want to expose my application using some

00:30:01,429 --> 00:30:09,799
DNS let's go back so now I have a DNS

00:30:06,799 --> 00:30:11,780
not nothing's running there yet but what

00:30:09,799 --> 00:30:14,450
I have to do is I need to start a build

00:30:11,780 --> 00:30:17,650
and three my source code from the source

00:30:14,450 --> 00:30:20,870
directory into into the build container

00:30:17,650 --> 00:30:22,850
so I will start new build and I will use

00:30:20,870 --> 00:30:23,150
the source directory to actually make it

00:30:22,850 --> 00:30:27,620
happen

00:30:23,150 --> 00:30:29,510
so it's packaging my my source 3 make it

00:30:27,620 --> 00:30:32,270
into the platform then extracting it

00:30:29,510 --> 00:30:34,370
into the container and the build will do

00:30:32,270 --> 00:30:36,710
pretty much the same thing I said it

00:30:34,370 --> 00:30:41,450
before but instead of cloning from some

00:30:36,710 --> 00:30:43,340
Creepo I just dreamed in my my source

00:30:41,450 --> 00:30:48,169
code and then I committed new container

00:30:43,340 --> 00:30:51,530
so when i refresh my page I can see that

00:30:48,169 --> 00:30:55,400
I have medication running already so

00:30:51,530 --> 00:30:58,039
when I switch back to my presentation so

00:30:55,400 --> 00:31:01,010
this I managed to solve something during

00:30:58,039 --> 00:31:02,870
my talk so I the inconsistent

00:31:01,010 --> 00:31:04,940
environment I would say it's pretty much

00:31:02,870 --> 00:31:07,190
solved because whenever you take your

00:31:04,940 --> 00:31:09,620
your source code and you put it into the

00:31:07,190 --> 00:31:11,570
docker container this docker container

00:31:09,620 --> 00:31:13,730
can be moved from one stage to the other

00:31:11,570 --> 00:31:15,260
so if whatever tool

00:31:13,730 --> 00:31:17,870
whatever workflow you are going to use

00:31:15,260 --> 00:31:19,610
you can solve the inconsistent

00:31:17,870 --> 00:31:22,580
environment program using different

00:31:19,610 --> 00:31:26,630
containers so that's okay so deployments

00:31:22,580 --> 00:31:29,270
are done over at STP or JIT this can be

00:31:26,630 --> 00:31:30,710
solved because I can look here push my

00:31:29,270 --> 00:31:33,320
containers or I can build from source

00:31:30,710 --> 00:31:35,900
code somewhere else so it's okay my new

00:31:33,320 --> 00:31:38,000
interactions are required so it's solved

00:31:35,900 --> 00:31:40,300
because if I have if I if I have to like

00:31:38,000 --> 00:31:42,470
open shift I can trigger the bills and

00:31:40,300 --> 00:31:43,880
deployments using web hooks or something

00:31:42,470 --> 00:31:47,600
whenever I get pushed whenever - source

00:31:43,880 --> 00:31:50,960
code so let's put in my salt high

00:31:47,600 --> 00:31:54,860
velocity of containers that's pretty

00:31:50,960 --> 00:32:01,280
much easy and I can show you that so if

00:31:54,860 --> 00:32:03,680
I go down my console I'll see get home

00:32:01,280 --> 00:32:07,670
this is the containers I am running at

00:32:03,680 --> 00:32:13,570
this moment so there is one they should

00:32:07,670 --> 00:32:15,710
be running this one so go to the console

00:32:13,570 --> 00:32:21,650
look over here

00:32:15,710 --> 00:32:24,440
get me the overview come on PHP you get

00:32:21,650 --> 00:32:27,350
this container so what I can do I'll see

00:32:24,440 --> 00:32:29,330
delete port so I'm going to kill the

00:32:27,350 --> 00:32:31,190
container it is like container files I'm

00:32:29,330 --> 00:32:32,900
simulating container failure so what's

00:32:31,190 --> 00:32:35,270
going to happen is the platform will

00:32:32,900 --> 00:32:37,370
detect that the container fails and it's

00:32:35,270 --> 00:32:38,870
automatically creates new container that

00:32:37,370 --> 00:32:40,310
is going to be deployed because I

00:32:38,870 --> 00:32:41,750
already have the image of the

00:32:40,310 --> 00:32:44,120
application in the container in the

00:32:41,750 --> 00:32:45,950
platform it's just matter of pulling the

00:32:44,120 --> 00:32:47,510
image if it's not already cached on the

00:32:45,950 --> 00:32:50,030
node and I'm just spinning up the

00:32:47,510 --> 00:32:51,710
container so it's very fast and you have

00:32:50,030 --> 00:32:53,210
pretty much and you have pretty much

00:32:51,710 --> 00:32:55,100
higher ability for the for your

00:32:53,210 --> 00:32:57,200
application the same goes for scaling

00:32:55,100 --> 00:32:57,770
you can scale up and scale down the

00:32:57,200 --> 00:32:59,720
container

00:32:57,770 --> 00:33:03,830
that's a nice benefit of using something

00:32:59,720 --> 00:33:10,670
like that something like openshift who I

00:33:03,830 --> 00:33:13,340
lost my screen okay so the only problem

00:33:10,670 --> 00:33:15,440
that I haven't solved is development on

00:33:13,340 --> 00:33:16,880
local machines which I don't consider a

00:33:15,440 --> 00:33:19,460
problem even though some people would

00:33:16,880 --> 00:33:22,280
love to code in the interface or using

00:33:19,460 --> 00:33:23,970
some web IDE I still consider developing

00:33:22,280 --> 00:33:26,610
on my own machine much

00:33:23,970 --> 00:33:30,120
more productive so I am not trying to

00:33:26,610 --> 00:33:32,550
solve this problem right now so thank

00:33:30,120 --> 00:33:34,290
you for being here and I have if you

00:33:32,550 --> 00:33:41,100
have any questions I am super happy to

00:33:34,290 --> 00:33:44,610
answer them and I will just move out of

00:33:41,100 --> 00:33:51,840
this light so I see on the person who is

00:33:44,610 --> 00:33:55,160
going to ask now question okay hi thank

00:33:51,840 --> 00:33:57,360
you for the talk one question that

00:33:55,160 --> 00:33:59,430
application you just showed where you

00:33:57,360 --> 00:34:01,230
run all this where you had the problem

00:33:59,430 --> 00:34:03,840
with github

00:34:01,230 --> 00:34:08,970
um they start running locally or is that

00:34:03,840 --> 00:34:10,620
available online or worsted running what

00:34:08,970 --> 00:34:12,960
do you mean can you repeat the question

00:34:10,620 --> 00:34:16,440
my application the source code you mean

00:34:12,960 --> 00:34:18,390
no not the source code you showed you

00:34:16,440 --> 00:34:23,610
run the commands on your command line to

00:34:18,390 --> 00:34:26,250
get the PHP UK container built in your

00:34:23,610 --> 00:34:28,530
web frame in your bed front end yeah um

00:34:26,250 --> 00:34:30,450
where's that application at that fund

00:34:28,530 --> 00:34:33,960
and running because that looked to me

00:34:30,450 --> 00:34:38,910
like a local installation or that yes

00:34:33,960 --> 00:34:40,290
yes so what I did before I I came here

00:34:38,910 --> 00:34:44,340
because I wanted to have two things

00:34:40,290 --> 00:34:46,440
ready I use this mini ship to to

00:34:44,340 --> 00:34:48,810
actually cited mini shift start so I

00:34:46,440 --> 00:34:51,150
pinned up open she is running on my

00:34:48,810 --> 00:34:54,720
machine so it was running in a virtual

00:34:51,150 --> 00:34:57,180
box on that laptop and I was using the

00:34:54,720 --> 00:34:58,890
zip file if you have seen it so I can

00:34:57,180 --> 00:35:02,160
translate the IP address of the

00:34:58,890 --> 00:35:05,070
container into DNS so it was running

00:35:02,160 --> 00:35:09,810
everything on my laptop and when I clean

00:35:05,070 --> 00:35:12,330
it up it will be gone of course and the

00:35:09,810 --> 00:35:14,490
problem was that if you if I run it here

00:35:12,330 --> 00:35:16,200
on my laptop I have to rely on the by

00:35:14,490 --> 00:35:16,710
file of the other connection that was

00:35:16,200 --> 00:35:25,770
the problem

00:35:16,710 --> 00:35:28,140
thank you hi great talk

00:35:25,770 --> 00:35:29,100
thank you I've never seen sty before it

00:35:28,140 --> 00:35:32,280
looks really interesting

00:35:29,100 --> 00:35:33,820
how can you handle parameterization or

00:35:32,280 --> 00:35:37,120
configuration

00:35:33,820 --> 00:35:39,640
fruit STI because we saw you loading

00:35:37,120 --> 00:35:41,830
source code an application into the

00:35:39,640 --> 00:35:43,720
container with that tool what about

00:35:41,830 --> 00:35:45,130
loading configuration for your

00:35:43,720 --> 00:35:46,180
application or for your environments

00:35:45,130 --> 00:35:48,190
after that

00:35:46,180 --> 00:35:51,940
you mean bill time configuration or

00:35:48,190 --> 00:35:54,430
runtime configuration either both so

00:35:51,940 --> 00:35:56,920
they actually like sty is only trying to

00:35:54,430 --> 00:35:59,080
solve the build time problem right so as

00:35:56,920 --> 00:36:00,610
to why itself can take environment

00:35:59,080 --> 00:36:02,200
variables can take some properties file

00:36:00,610 --> 00:36:04,240
that define some information that's

00:36:02,200 --> 00:36:06,970
being then pushed into the container you

00:36:04,240 --> 00:36:09,160
can also map specific directories from

00:36:06,970 --> 00:36:11,050
your machine into the container so you

00:36:09,160 --> 00:36:15,010
can read something from the Loom path or

00:36:11,050 --> 00:36:16,540
something like that or I would probably

00:36:15,010 --> 00:36:18,880
say that the easiest one is to set some

00:36:16,540 --> 00:36:22,000
environment variables and if like build

00:36:18,880 --> 00:36:23,830
a change to build based on that the

00:36:22,000 --> 00:36:26,170
container that is doing the build is

00:36:23,830 --> 00:36:28,090
essentially simple data container that

00:36:26,170 --> 00:36:30,580
you install all the dependencies in and

00:36:28,090 --> 00:36:33,010
you create generally two scripts

00:36:30,580 --> 00:36:35,260
assemble that's the build process and

00:36:33,010 --> 00:36:36,910
run which is the how to start the

00:36:35,260 --> 00:36:38,230
application I digital this is going to

00:36:36,910 --> 00:36:39,970
be the entry point of the container

00:36:38,230 --> 00:36:43,270
that's being committed after the build

00:36:39,970 --> 00:36:47,560
right so for the build process this is

00:36:43,270 --> 00:36:49,300
that for the run line configuration it

00:36:47,560 --> 00:36:50,950
depends on that you're going to run if

00:36:49,300 --> 00:36:52,660
you're going to run in something like

00:36:50,950 --> 00:36:54,280
open ship you can use environment

00:36:52,660 --> 00:36:56,950
variables we have conflict maps which

00:36:54,280 --> 00:37:00,850
allows you to mount a file into the

00:36:56,950 --> 00:37:02,770
container you can have secrets which is

00:37:00,850 --> 00:37:05,290
encrypted information or there are

00:37:02,770 --> 00:37:08,650
several ways if you going to run like

00:37:05,290 --> 00:37:10,240
docker just docker environment variables

00:37:08,650 --> 00:37:12,340
and in the latest release they have some

00:37:10,240 --> 00:37:14,170
kind of secret or something like that so

00:37:12,340 --> 00:37:18,370
it depends on what technology you want

00:37:14,170 --> 00:37:20,290
to use but first I generally either

00:37:18,370 --> 00:37:21,550
environment variables or mounting some

00:37:20,290 --> 00:37:30,550
configuration directory into the

00:37:21,550 --> 00:37:31,210
container I am so sorry I'm really good

00:37:30,550 --> 00:37:33,550
talk

00:37:31,210 --> 00:37:36,880
my question may be based in complete

00:37:33,550 --> 00:37:39,070
ignorance so I apologize before I ask it

00:37:36,880 --> 00:37:41,470
but one thing I didn't really understand

00:37:39,070 --> 00:37:43,960
was so if you're deploying an

00:37:41,470 --> 00:37:45,310
application like say WordPress to dock I

00:37:43,960 --> 00:37:47,150
don't know whether people would bother

00:37:45,310 --> 00:37:50,690
but if they are

00:37:47,150 --> 00:37:53,030
you would have a file permissions issue

00:37:50,690 --> 00:37:54,650
as in not all your directories not all

00:37:53,030 --> 00:37:57,470
your files require the same music

00:37:54,650 --> 00:37:59,390
emissions and user ownership how do you

00:37:57,470 --> 00:38:02,360
deal with that issue in docker or how do

00:37:59,390 --> 00:38:04,490
you configure to say for instance like

00:38:02,360 --> 00:38:08,960
the up those folders needs read/write

00:38:04,490 --> 00:38:12,950
versus everything else it doesn't well

00:38:08,960 --> 00:38:15,200
it depends uh in our case blending you

00:38:12,950 --> 00:38:18,230
spin up a container in the platform it

00:38:15,200 --> 00:38:20,690
always runs as some randomly generated

00:38:18,230 --> 00:38:22,910
user ID because it mitigates some of the

00:38:20,690 --> 00:38:27,170
known extra effects vector attack

00:38:22,910 --> 00:38:27,860
vectors on the containers and the group

00:38:27,170 --> 00:38:31,820
is route

00:38:27,860 --> 00:38:33,950
so what we do is we set readwrite to

00:38:31,820 --> 00:38:36,050
group on the on the paths are generated

00:38:33,950 --> 00:38:37,970
by the container so there is a common

00:38:36,050 --> 00:38:40,640
call there is a common fix permissions

00:38:37,970 --> 00:38:44,240
which does that it's part of the tooling

00:38:40,640 --> 00:38:46,850
so whenever you commit the container it

00:38:44,240 --> 00:38:49,400
will allow the route group to actually

00:38:46,850 --> 00:38:51,080
write into those files these are part of

00:38:49,400 --> 00:38:55,340
the application itself not to the whole

00:38:51,080 --> 00:39:00,380
image and that helps you with the file

00:38:55,340 --> 00:39:02,060
permissions but there is more well

00:39:00,380 --> 00:39:04,400
depends on what you wanna do like if

00:39:02,060 --> 00:39:06,620
you're running WordPress or Drupal those

00:39:04,400 --> 00:39:08,720
tools usually like to write to file

00:39:06,620 --> 00:39:10,280
system so if you are in container if you

00:39:08,720 --> 00:39:10,820
are trying to do something that's more

00:39:10,280 --> 00:39:12,710
scalable

00:39:10,820 --> 00:39:15,110
you need a scalable file system as well

00:39:12,710 --> 00:39:17,870
so just again one of the features that

00:39:15,110 --> 00:39:22,070
we have is you it allows you to mount

00:39:17,870 --> 00:39:23,810
that dynamically some either distributed

00:39:22,070 --> 00:39:25,340
file system or normal file system into

00:39:23,810 --> 00:39:28,640
the container so when your container

00:39:25,340 --> 00:39:30,440
restarts the data is still there and so

00:39:28,640 --> 00:39:33,170
but because by default containers are

00:39:30,440 --> 00:39:34,520
SML when you when you go into the

00:39:33,170 --> 00:39:37,550
controlling container you change

00:39:34,520 --> 00:39:38,870
something and then you stop the

00:39:37,550 --> 00:39:40,430
container all the data is lost

00:39:38,870 --> 00:39:44,450
generally that's how you should approach

00:39:40,430 --> 00:39:48,290
containers that time I was just going to

00:39:44,450 --> 00:39:49,190
suggest and just support here to support

00:39:48,290 --> 00:39:52,550
you with nothing

00:39:49,190 --> 00:39:55,910
sorry the UID mapping what do you mean

00:39:52,550 --> 00:39:58,250
so mapping you IDs from inside the

00:39:55,910 --> 00:40:00,080
container can run as 0 root

00:39:58,250 --> 00:40:02,030
then you map that to a normal user ID

00:40:00,080 --> 00:40:04,730
outside under some parameters and docker

00:40:02,030 --> 00:40:06,770
to do that you could do that but the

00:40:04,730 --> 00:40:10,160
problem is if you run the container

00:40:06,770 --> 00:40:12,170
every which is by default you allowing

00:40:10,160 --> 00:40:14,480
somebody to get out of the container and

00:40:12,170 --> 00:40:16,310
get out of the container you can medic

00:40:14,480 --> 00:40:18,260
get into this but because user

00:40:16,310 --> 00:40:20,150
namespaces are not yet there in docker

00:40:18,260 --> 00:40:22,280
that something that's being worked on so

00:40:20,150 --> 00:40:24,980
once we get user name spaces yes it will

00:40:22,280 --> 00:40:26,990
be much much much easier but we are

00:40:24,980 --> 00:40:31,119
getting into technical details which are

00:40:26,990 --> 00:40:34,010
probably too weird so if you let's

00:40:31,119 --> 00:40:35,720
discuss this after the after the talk so

00:40:34,010 --> 00:40:40,670
I can still handle some few more

00:40:35,720 --> 00:40:46,240
questions may be okay yeah but I saw

00:40:40,670 --> 00:40:48,650
like five hands so are there any

00:40:46,240 --> 00:40:51,770
platforms of the service where we can

00:40:48,650 --> 00:40:55,520
throw a couple of to three containers up

00:40:51,770 --> 00:40:57,640
there and see running line as understand

00:40:55,520 --> 00:41:01,130
the mini ship is good for your machine

00:40:57,640 --> 00:41:02,930
but I want to be able to stuff with a

00:41:01,130 --> 00:41:08,480
live machine with the live web server

00:41:02,930 --> 00:41:11,240
and live services Redis minus QL so that

00:41:08,480 --> 00:41:13,880
other people could bang on as well yeah

00:41:11,240 --> 00:41:16,609
so I have here account on developer

00:41:13,880 --> 00:41:18,710
preview of open ship as a service for

00:41:16,609 --> 00:41:21,250
general use cases so I am running two

00:41:18,710 --> 00:41:23,420
simple applications over here but

00:41:21,250 --> 00:41:33,920
essentially what I can do exactly the

00:41:23,420 --> 00:41:35,240
same way is deploy deploy select CHP do

00:41:33,920 --> 00:41:44,950
I have it already here

00:41:35,240 --> 00:41:49,000
now take this yes please go go create

00:41:44,950 --> 00:41:50,330
continue to overview so right now I am

00:41:49,000 --> 00:41:54,260
what did I do

00:41:50,330 --> 00:41:58,369
why is my belt on happening builds

00:41:54,260 --> 00:42:04,040
builds PHP and all the interesting stuff

00:41:58,369 --> 00:42:06,140
built so technique ok so right now I am

00:42:04,040 --> 00:42:07,940
using the open shipped as a service

00:42:06,140 --> 00:42:09,320
that's all if you go to open ship this

00:42:07,940 --> 00:42:11,630
calm you can sign up for the service

00:42:09,320 --> 00:42:11,840
it's in Developer Preview so which they

00:42:11,630 --> 00:42:15,350
can

00:42:11,840 --> 00:42:16,970
like right now last for one month but we

00:42:15,350 --> 00:42:20,720
will be extending it hopefully very soon

00:42:16,970 --> 00:42:22,370
and you can do pretty much exactly the

00:42:20,720 --> 00:42:22,970
same with edit on my machine you can do

00:42:22,370 --> 00:42:26,240
there

00:42:22,970 --> 00:42:28,010
open ship itself can run on any

00:42:26,240 --> 00:42:28,580
infrastructure so if you spin it up on

00:42:28,010 --> 00:42:31,870
GCE

00:42:28,580 --> 00:42:35,060
on AWS your own bare metal you can do it

00:42:31,870 --> 00:42:38,090
it's open source so if you are okay to

00:42:35,060 --> 00:42:40,790
running in yourself you can do it

00:42:38,090 --> 00:42:42,380
yourself if you want us to help you with

00:42:40,790 --> 00:42:45,620
that there is a product that we have

00:42:42,380 --> 00:42:49,120
been very help you as a support so

00:42:45,620 --> 00:42:49,120
different ways how to do it

00:42:57,070 --> 00:43:03,530
yes I I didn't try to do cluster on

00:43:00,560 --> 00:43:05,270
digital ocean I am using a single DM

00:43:03,530 --> 00:43:07,580
cluster only nodes the note is similar

00:43:05,270 --> 00:43:09,860
to digital ocean but has double the

00:43:07,580 --> 00:43:13,730
memory then for the same price but

00:43:09,860 --> 00:43:17,570
technically is the same so the think the

00:43:13,730 --> 00:43:19,220
the small problem is that I am not sure

00:43:17,570 --> 00:43:21,440
was there network configuration so

00:43:19,220 --> 00:43:24,140
because for every single project we

00:43:21,440 --> 00:43:26,240
create a virtual network that I so like

00:43:24,140 --> 00:43:28,790
the communication inside that project so

00:43:26,240 --> 00:43:30,140
different projects cannot see each

00:43:28,790 --> 00:43:32,960
other's communication which is on the

00:43:30,140 --> 00:43:35,060
security aspect and I'm not sure what

00:43:32,960 --> 00:43:37,550
what's gonna happen if you put this on

00:43:35,060 --> 00:43:39,950
the digital ocean private networks it

00:43:37,550 --> 00:43:42,860
may not work I'm not sure but definitely

00:43:39,950 --> 00:43:44,000
what will work is and one of my

00:43:42,860 --> 00:43:47,420
colleagues is doing it on digital ocean

00:43:44,000 --> 00:43:51,230
and I am doing it on on the Leno's pinup

00:43:47,420 --> 00:43:54,260
one node cluster that works just fine it

00:43:51,230 --> 00:43:56,750
works fine on GCE as a cluster on iws

00:43:54,260 --> 00:43:57,710
and desert that's tested as a cluster

00:43:56,750 --> 00:44:03,500
multi machine

00:43:57,710 --> 00:44:06,290
I couldn't hear right now so then you

00:44:03,500 --> 00:44:10,220
repeat that that doesn't get you a half

00:44:06,290 --> 00:44:12,250
resume containers across what do you

00:44:10,220 --> 00:44:14,660
need to run across more than one machine

00:44:12,250 --> 00:44:16,580
yeah if you if you want to get a higher

00:44:14,660 --> 00:44:19,880
birthday you need to have it on multiple

00:44:16,580 --> 00:44:21,410
machines yeah and notice I fell busy but

00:44:19,880 --> 00:44:25,400
you know more than one machine could

00:44:21,410 --> 00:44:27,830
handle yeah so yeah but you still

00:44:25,400 --> 00:44:29,870
and scale up if you cannot scale

00:44:27,830 --> 00:44:31,910
horizontally can scale vertically on

00:44:29,870 --> 00:44:35,210
digital ocean right it's not the best

00:44:31,910 --> 00:44:37,730
approach but still solves problem for if

00:44:35,210 --> 00:44:48,560
you don't have resources to run

00:44:37,730 --> 00:44:51,020
something like GCE or AWS yeah okay just

00:44:48,560 --> 00:44:52,880
if you have follow-up questions don't

00:44:51,020 --> 00:44:59,200
worry come here and you're going to

00:44:52,880 --> 00:45:03,280
start that okay so the build finished

00:44:59,200 --> 00:45:06,080
and the application should be running if

00:45:03,280 --> 00:45:08,570
my internet is going to work this time

00:45:06,080 --> 00:45:14,750
I'm resulting costs of DNS seems to be

00:45:08,570 --> 00:45:19,310
failing start on resolving cost okay any

00:45:14,750 --> 00:45:22,700
more questions no more questions so

00:45:19,310 --> 00:45:29,150
again I will switch back to my slides

00:45:22,700 --> 00:45:31,210
and say thank you you were a great

00:45:29,150 --> 00:45:31,210
audience

00:45:35,170 --> 00:45:42,440
and I had boobs here so this is open

00:45:39,860 --> 00:45:44,360
 for developers book it works you

00:45:42,440 --> 00:45:45,800
through deploying applications spinning

00:45:44,360 --> 00:45:48,560
up open cheat on your own machine as

00:45:45,800 --> 00:45:49,610
well this time not not using mini shoes

00:45:48,560 --> 00:45:52,910
but using vagrant

00:45:49,610 --> 00:45:54,530
if you are interested they are here if I

00:45:52,910 --> 00:45:57,830
run a lot of them I still have a box

00:45:54,530 --> 00:46:01,150
down so there is still more boot so come

00:45:57,830 --> 00:46:01,150

YouTube URL: https://www.youtube.com/watch?v=dEj5iKM55U0


