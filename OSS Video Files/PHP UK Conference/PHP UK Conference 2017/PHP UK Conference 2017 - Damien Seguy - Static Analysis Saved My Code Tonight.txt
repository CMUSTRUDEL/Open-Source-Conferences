Title: PHP UK Conference 2017 - Damien Seguy - Static Analysis Saved My Code Tonight
Publication date: 2017-04-03
Playlist: PHP UK Conference 2017
Description: 
	Static analysis tools checks PHP code without running them. Fully automated, they bring expertise to review the code, enforce good practices when programming, keep code ready for the next PHP version. PHP 7 has developed tremendously our capacity to audit code - thanks to AST and return types, it is possible to go deeper and prevent more bugs. During this session, we'll review the current state of static analysis tools, learn what they can find for us, and how to integrate it in the development cycle - security bugs, migration incompatibilities, directives recommendations. Simply said, better PHP coding.
Captions: 
	00:00:03,340 --> 00:00:07,680
so we've got so many people trying to do

00:00:05,950 --> 00:00:10,900
so what the method could review right

00:00:07,680 --> 00:00:12,369
yeah yeah you have no time to do could

00:00:10,900 --> 00:00:13,049
review sure you expect something else to

00:00:12,369 --> 00:00:15,490
do it

00:00:13,049 --> 00:00:21,269
who ever try to do could review with an

00:00:15,490 --> 00:00:22,749
elephant known know they are very mean

00:00:21,269 --> 00:00:24,880
never mean

00:00:22,749 --> 00:00:26,349
but there's so me I create that's right

00:00:24,880 --> 00:00:28,660
that's why I started working on

00:00:26,349 --> 00:00:31,079
technology so we're happy to see that

00:00:28,660 --> 00:00:34,239
there are so many people here tonight um

00:00:31,079 --> 00:00:36,220
we're going to spend the hour trying to

00:00:34,239 --> 00:00:38,640
review code without actually reading it

00:00:36,220 --> 00:00:41,350
and giving that to PHP cells maybe and

00:00:38,640 --> 00:00:43,780
having it give us a number of

00:00:41,350 --> 00:00:48,400
information insights on what's in the

00:00:43,780 --> 00:00:50,440
code so most that well that would be

00:00:48,400 --> 00:00:52,660
mainly two parts the first one I'm going

00:00:50,440 --> 00:00:55,360
to give you a number of theoretical did

00:00:52,660 --> 00:00:58,570
in the details on how a static analyzer

00:00:55,360 --> 00:01:00,730
works maybe not all of them but I know

00:00:58,570 --> 00:01:02,410
there are several authors of static

00:01:00,730 --> 00:01:04,689
analyzer I think we can talk to us one

00:01:02,410 --> 00:01:08,890
maybe yeah so much while you use that

00:01:04,689 --> 00:01:11,829
this is Andre there's we do some more so

00:01:08,890 --> 00:01:15,549
and ivory have to watch my my language

00:01:11,829 --> 00:01:17,799
tonight pardon my french and then in the

00:01:15,549 --> 00:01:19,719
second part before after I'm done boring

00:01:17,799 --> 00:01:21,999
you with the theoretical details that

00:01:19,719 --> 00:01:24,579
will dive into actual like practical

00:01:21,999 --> 00:01:27,880
applications and what it can do with you

00:01:24,579 --> 00:01:30,819
I have actually list of 68 of them and

00:01:27,880 --> 00:01:34,420
we have 60 minutes right that's going to

00:01:30,819 --> 00:01:36,189
be fast so for those of you who don't

00:01:34,420 --> 00:01:40,899
know me I'm actually the official travel

00:01:36,189 --> 00:01:43,090
agent of the oldest electron driver yeah

00:01:40,899 --> 00:01:47,310
we bring it a bit everywhere not exactly

00:01:43,090 --> 00:01:50,439
this one but another office the sons and

00:01:47,310 --> 00:01:54,039
decide that I also do static analyzing

00:01:50,439 --> 00:01:56,709
as CTO every day so that's exactly from

00:01:54,039 --> 00:01:59,279
where my experience coming and what I'm

00:01:56,709 --> 00:02:02,109
going to explain you tonight besides

00:01:59,279 --> 00:02:05,350
doing the audit itself you probably have

00:02:02,109 --> 00:02:07,299
set yourself unless you're CTO in the

00:02:05,350 --> 00:02:11,170
position where you're coding you know

00:02:07,299 --> 00:02:13,269
with brand new technology and then you

00:02:11,170 --> 00:02:15,250
have this specific line of code maybe

00:02:13,269 --> 00:02:16,430
one of the 1,000 line of code you have a

00:02:15,250 --> 00:02:18,290
new script

00:02:16,430 --> 00:02:19,879
and you shark asking yourself a number

00:02:18,290 --> 00:02:23,090
of questions before you move to the next

00:02:19,879 --> 00:02:27,920
one right is it is it a good good line

00:02:23,090 --> 00:02:30,319
of code is it fast a crack the tasks is

00:02:27,920 --> 00:02:32,060
it is it compatible because well after

00:02:30,319 --> 00:02:34,400
fast usually wears a surface it's

00:02:32,060 --> 00:02:36,590
compatible it is secure so because

00:02:34,400 --> 00:02:38,480
that's usually business requirements and

00:02:36,590 --> 00:02:40,780
you're still on the same line right

00:02:38,480 --> 00:02:45,170
asking more and more questions coming up

00:02:40,780 --> 00:02:50,299
why not why not use a framework way to

00:02:45,170 --> 00:02:51,889
talk yeah should I use that and you have

00:02:50,299 --> 00:02:53,959
certain all those questions because this

00:02:51,889 --> 00:02:56,150
is a number of recommendation you can

00:02:53,959 --> 00:02:58,310
remember from various authors values

00:02:56,150 --> 00:03:01,099
experts maybe other languages and you

00:02:58,310 --> 00:03:04,760
don't know when to stop okay so you add

00:03:01,099 --> 00:03:06,230
up with a final question and then you

00:03:04,760 --> 00:03:07,700
want to have a review you want to have

00:03:06,230 --> 00:03:09,980
someone look at that code or sell yeah

00:03:07,700 --> 00:03:11,060
good idea are not bad idea discuss it's

00:03:09,980 --> 00:03:15,500
on something that though you go to

00:03:11,060 --> 00:03:18,769
conferences HP is doing the job and

00:03:15,500 --> 00:03:21,470
you've learned most of the time things

00:03:18,769 --> 00:03:24,019
like that there are three steps what you

00:03:21,470 --> 00:03:26,269
call actually pitch B code is a text

00:03:24,019 --> 00:03:29,329
file initially it's just a bunch of

00:03:26,269 --> 00:03:32,359
bytes together that makes sense to PHP

00:03:29,329 --> 00:03:34,609
hopefully maybe also for you but that's

00:03:32,359 --> 00:03:37,220
the way it works then there it comes and

00:03:34,609 --> 00:03:40,669
it just turned that into up code yeah

00:03:37,220 --> 00:03:42,199
with these little hands and then we send

00:03:40,669 --> 00:03:44,449
that to the ascent engine which actually

00:03:42,199 --> 00:03:46,220
gives you that that's the three usual

00:03:44,449 --> 00:03:48,379
steps and that's not exactly the one we

00:03:46,220 --> 00:03:49,879
are interested in in between we have

00:03:48,379 --> 00:03:51,349
something that looks like static

00:03:49,879 --> 00:03:53,479
analysis but is not this coding

00:03:51,349 --> 00:03:55,609
convention this is the moment where you

00:03:53,479 --> 00:03:58,939
decide that you want to make spaces

00:03:55,609 --> 00:04:02,209
around your egg wall operator because it

00:03:58,939 --> 00:04:04,159
looks better that is be completely

00:04:02,209 --> 00:04:06,739
useless for this end engine in the end

00:04:04,159 --> 00:04:07,909
it doesn't care about that doesn't care

00:04:06,739 --> 00:04:09,680
about commands doesn't care how

00:04:07,909 --> 00:04:11,930
beautiful your code is because it's just

00:04:09,680 --> 00:04:14,120
text and you will do something from the

00:04:11,930 --> 00:04:16,039
up code not from your path okay so we're

00:04:14,120 --> 00:04:16,609
not going to talk about that pitch

00:04:16,039 --> 00:04:20,150
p-dogs

00:04:16,609 --> 00:04:23,080
comments white spaces not for us we want

00:04:20,150 --> 00:04:27,260
things that will be executed now this

00:04:23,080 --> 00:04:29,779
three layers the cake is something

00:04:27,260 --> 00:04:30,320
common in other languages because they

00:04:29,779 --> 00:04:32,150
ask

00:04:30,320 --> 00:04:34,310
the computation from the text they start

00:04:32,150 --> 00:04:36,260
with the same origin enough okay looking

00:04:34,310 --> 00:04:39,080
a little bit different but step from the

00:04:36,260 --> 00:04:42,020
same origin they do have copulation you

00:04:39,080 --> 00:04:43,790
know they call JC C or Java C or

00:04:42,020 --> 00:04:45,950
whatever you call it maybe it's kind of

00:04:43,790 --> 00:04:49,030
hidden but it's there and then they have

00:04:45,950 --> 00:04:51,350
some intermediate codes that can run in

00:04:49,030 --> 00:04:53,270
Peach we we don't have that at least

00:04:51,350 --> 00:04:56,210
it's there which is kind of Eden so

00:04:53,270 --> 00:04:59,360
static analysis will actually ask to be

00:04:56,210 --> 00:05:02,180
set as a sites branch because the result

00:04:59,360 --> 00:05:04,880
of the static analyzing will be probably

00:05:02,180 --> 00:05:07,520
the report whatever it whatever shape it

00:05:04,880 --> 00:05:09,770
will have and we are going to fit that

00:05:07,520 --> 00:05:11,870
into us so we can go back to the code

00:05:09,770 --> 00:05:14,810
fix it and ultimately make the code

00:05:11,870 --> 00:05:16,640
better okay so it's kind of a different

00:05:14,810 --> 00:05:19,820
branch we have and the thing is

00:05:16,640 --> 00:05:23,270
initially PHP is doing already a part of

00:05:19,820 --> 00:05:29,050
this static analyze it okay who's using

00:05:23,270 --> 00:05:32,060
linting oh good that would be fast so

00:05:29,050 --> 00:05:35,360
when we move from PHP file to PHP seven

00:05:32,060 --> 00:05:38,110
we got that code and suddenly it went

00:05:35,360 --> 00:05:38,110
wrong why

00:05:41,970 --> 00:05:48,430
to default yes yeah let's Tweedy for you

00:05:45,490 --> 00:05:51,070
you're very light later there are two

00:05:48,430 --> 00:05:52,120
divorce it until th b7 it was actually

00:05:51,070 --> 00:05:54,460
code that could work

00:05:52,120 --> 00:05:56,350
just the second default was completely

00:05:54,460 --> 00:05:58,090
removed right cookie D ignored the first

00:05:56,350 --> 00:06:01,270
one was before one that was found and

00:05:58,090 --> 00:06:03,190
executed cannot simple here so linking

00:06:01,270 --> 00:06:05,500
is already a good static analyzer if

00:06:03,190 --> 00:06:08,050
you're on pitch p5 and you want to keep

00:06:05,500 --> 00:06:11,410
using PHP files don't do that but if you

00:06:08,050 --> 00:06:15,010
really want you can run PHP seven that

00:06:11,410 --> 00:06:16,930
you can linking and get lot more details

00:06:15,010 --> 00:06:19,720
about the way you could behave on teach

00:06:16,930 --> 00:06:20,980
p5 and just fixing that will do two

00:06:19,720 --> 00:06:24,070
things in the same time prepare your

00:06:20,980 --> 00:06:27,730
code for PHP seven and make you PHP file

00:06:24,070 --> 00:06:29,590
code better so that's a good start but

00:06:27,730 --> 00:06:31,810
that's that's very easy actually pitch

00:06:29,590 --> 00:06:34,990
fees is not doing a lot of job here

00:06:31,810 --> 00:06:37,120
right there's another set of problem

00:06:34,990 --> 00:06:40,930
that looks like the same that should be

00:06:37,120 --> 00:06:44,140
also pre HP telling us what's wrong and

00:06:40,930 --> 00:06:50,320
what should not be how many cases do we

00:06:44,140 --> 00:06:53,850
have here depending on why of course how

00:06:50,320 --> 00:06:53,850
many different cases do we have here

00:06:54,570 --> 00:07:10,600
zero one five two zero twelve just one

00:07:07,240 --> 00:07:12,910
all of them are the same all the time

00:07:10,600 --> 00:07:16,450
the same actually X is compared with the

00:07:12,910 --> 00:07:18,280
double equal and beside that after the

00:07:16,450 --> 00:07:20,500
case while most of the time we just put

00:07:18,280 --> 00:07:21,790
a constant or literal but you could

00:07:20,500 --> 00:07:23,740
actually have anything that's an

00:07:21,790 --> 00:07:26,200
expression that will return you a result

00:07:23,740 --> 00:07:28,210
so the first one is the integral easy

00:07:26,200 --> 00:07:32,590
the second one would be call like a

00:07:28,210 --> 00:07:33,820
static expression almost so it's

00:07:32,590 --> 00:07:36,460
something that could be prepared at

00:07:33,820 --> 00:07:38,020
compile time the third one is a string

00:07:36,460 --> 00:07:39,520
but since the string contains an

00:07:38,020 --> 00:07:42,100
integral piece we will actually do the

00:07:39,520 --> 00:07:43,600
conversion true will be converted and K

00:07:42,100 --> 00:07:44,860
and really really converted and of

00:07:43,600 --> 00:07:47,080
course depending on wide width also

00:07:44,860 --> 00:07:48,820
compared the same so all of them are the

00:07:47,080 --> 00:07:51,040
same that each we do not mention

00:07:48,820 --> 00:07:54,660
anything about us you link it and say

00:07:51,040 --> 00:07:57,340
okay yeah we can try that why is it

00:07:54,660 --> 00:07:59,470
we should understand that there are two

00:07:57,340 --> 00:08:01,630
default ideals about it and suddenly

00:07:59,470 --> 00:08:06,700
those breaks out those cases are all the

00:08:01,630 --> 00:08:09,580
same it just say nothing the problem is

00:08:06,700 --> 00:08:12,520
this has to be resolved at execution

00:08:09,580 --> 00:08:14,380
time okay if you could actually do some

00:08:12,520 --> 00:08:16,780
work because some of the literals here

00:08:14,380 --> 00:08:19,360
could be solved at computation time but

00:08:16,780 --> 00:08:20,950
in doubt it just said you just leave

00:08:19,360 --> 00:08:23,470
that on the side it doesn't do anything

00:08:20,950 --> 00:08:26,320
this is where static analysis will start

00:08:23,470 --> 00:08:27,670
working this is where it says I can do

00:08:26,320 --> 00:08:30,190
and solve a number of those situations

00:08:27,670 --> 00:08:33,070
and reports that at least half of them

00:08:30,190 --> 00:08:36,460
are are the same and they should be

00:08:33,070 --> 00:08:39,240
removed so how does technology is work

00:08:36,460 --> 00:08:41,440
in general if you'd want to avoid reg X

00:08:39,240 --> 00:08:44,650
which means that you're treating your

00:08:41,440 --> 00:08:46,990
text file just as another text file you

00:08:44,650 --> 00:08:49,660
want to go up a little tech little you

00:08:46,990 --> 00:08:53,920
know distance and includes more meaning

00:08:49,660 --> 00:08:55,960
more semantics into the reading and for

00:08:53,920 --> 00:08:59,680
that you need to first take the files

00:08:55,960 --> 00:09:02,430
process them with the tokenizer so who

00:08:59,680 --> 00:09:04,810
among you has been using the tokenizer

00:09:02,430 --> 00:09:08,080
oK you've done it that's another problem

00:09:04,810 --> 00:09:09,520
one okay so I'm going to rephrase the

00:09:08,080 --> 00:09:14,110
question who among you have been using

00:09:09,520 --> 00:09:17,740
PHP and I see still a number of people

00:09:14,110 --> 00:09:19,480
who are too shy to raise the head the

00:09:17,740 --> 00:09:21,370
tokenizer is the first part whenever you

00:09:19,480 --> 00:09:24,070
execute something in PHP the tokenizer

00:09:21,370 --> 00:09:26,710
takes the file then breaks that into

00:09:24,070 --> 00:09:28,570
tokens and then push the tokens to

00:09:26,710 --> 00:09:29,230
another part of the PHP that transits

00:09:28,570 --> 00:09:31,600
okay

00:09:29,230 --> 00:09:34,840
but those tokens are exactly the words

00:09:31,600 --> 00:09:37,630
that PHP can understand if you ever

00:09:34,840 --> 00:09:40,000
learn any Chinese where you have quickly

00:09:37,630 --> 00:09:42,250
learned that there is no space every

00:09:40,000 --> 00:09:44,290
word are the same next to each other

00:09:42,250 --> 00:09:46,750
there's no damn limitation between words

00:09:44,290 --> 00:09:48,580
you have to learn how to read the words

00:09:46,750 --> 00:09:50,560
and say okay oh this is this make sense

00:09:48,580 --> 00:09:52,200
oh if I had one doesn't make sense or

00:09:50,560 --> 00:09:54,640
backtrack that's one word next word

00:09:52,200 --> 00:09:56,320
here's the same the tokenizer will do

00:09:54,640 --> 00:09:57,910
the job of finding this is the space

00:09:56,320 --> 00:10:00,310
this is common this is the string this

00:09:57,910 --> 00:10:04,330
is apparent is how does that look like

00:10:00,310 --> 00:10:06,450
it looks like a huge array law filled

00:10:04,330 --> 00:10:10,600
with lots of catalystic numbers

00:10:06,450 --> 00:10:13,330
this very simple piece of code that was

00:10:10,600 --> 00:10:16,480
even shortened to be readier available

00:10:13,330 --> 00:10:19,570
leads you to this number of our tokens

00:10:16,480 --> 00:10:23,770
it just an array all flattens with other

00:10:19,570 --> 00:10:26,440
arrays or simple simple literals so you

00:10:23,770 --> 00:10:31,300
can find here the define is around there

00:10:26,440 --> 00:10:33,100
I don't work so well before the next 382

00:10:31,300 --> 00:10:35,650
is actually a native whitespace

00:10:33,100 --> 00:10:38,589
depending on the PHP version you have

00:10:35,650 --> 00:10:41,320
the parentheses you have another literal

00:10:38,589 --> 00:10:42,760
you have the coma you have patch that's

00:10:41,320 --> 00:10:46,180
everything teach me whether is going to

00:10:42,760 --> 00:10:47,740
give you with from the tokenizer the

00:10:46,180 --> 00:10:49,990
first thing you learn when doing that is

00:10:47,740 --> 00:10:51,730
you can get rid of first third of all

00:10:49,990 --> 00:10:53,830
the tokens one third of the token or

00:10:51,730 --> 00:10:56,770
completely useless as I said comments

00:10:53,830 --> 00:10:58,870
dot comments and space everything can

00:10:56,770 --> 00:11:01,510
get get rid off because no one cares

00:10:58,870 --> 00:11:03,640
about that the second cell that can get

00:11:01,510 --> 00:11:05,830
rid of actually it's not us that going

00:11:03,640 --> 00:11:08,170
to get rid of it it is everything that

00:11:05,830 --> 00:11:10,210
is a delimiter okay parenthesis in

00:11:08,170 --> 00:11:13,690
general is useful for the tokenizer to

00:11:10,210 --> 00:11:16,720
understand where is what but in the end

00:11:13,690 --> 00:11:18,990
we don't care about them okay because in

00:11:16,720 --> 00:11:22,210
the end we're going to remove all these

00:11:18,990 --> 00:11:24,490
long list long log of tokens into an

00:11:22,210 --> 00:11:26,890
abstract syntactic tree so I'm going to

00:11:24,490 --> 00:11:30,720
just call that a HT because it's

00:11:26,890 --> 00:11:35,500
difficult to pronounce please thank you

00:11:30,720 --> 00:11:37,300
it's an abstract syntax tree ast and the

00:11:35,500 --> 00:11:39,010
previous file or this is one that you

00:11:37,300 --> 00:11:41,020
can guess actually just by reading you

00:11:39,010 --> 00:11:43,780
have added up the file the file as one

00:11:41,020 --> 00:11:46,390
one script which include code applauded

00:11:43,780 --> 00:11:49,209
as a number of sequence including and

00:11:46,390 --> 00:11:52,959
when used two different classes and two

00:11:49,209 --> 00:11:54,820
or three free calls okay so the previous

00:11:52,959 --> 00:11:57,100
tokens has now been reordered and

00:11:54,820 --> 00:11:57,730
reorganized every every element is in

00:11:57,100 --> 00:11:59,920
its place

00:11:57,730 --> 00:12:03,270
the variable may be a part of a function

00:11:59,920 --> 00:12:06,250
it may be an argument or not it may be a

00:12:03,270 --> 00:12:08,610
literal everything has its own place and

00:12:06,250 --> 00:12:11,110
we just have one third of the tokens

00:12:08,610 --> 00:12:13,870
that's excellent because at that point

00:12:11,110 --> 00:12:15,670
we we do not have to follow and read the

00:12:13,870 --> 00:12:17,500
code one man after each other which is

00:12:15,670 --> 00:12:18,339
what we you do as human but we have

00:12:17,500 --> 00:12:20,889
blocks

00:12:18,339 --> 00:12:22,389
all the functions makes one block there

00:12:20,889 --> 00:12:24,069
is the big block of friction disciplines

00:12:22,389 --> 00:12:26,499
and the arguments in the name we have

00:12:24,069 --> 00:12:28,480
everything defined the classes are

00:12:26,499 --> 00:12:30,459
gathering constant properties and

00:12:28,480 --> 00:12:33,459
functions they all together at one place

00:12:30,459 --> 00:12:36,100
so all the definitions are in place

00:12:33,459 --> 00:12:37,949
which mean that we can start working on

00:12:36,100 --> 00:12:40,360
things a little more complex like that

00:12:37,949 --> 00:12:43,420
here you have one class that's defined

00:12:40,360 --> 00:12:46,209
instantiate it and you have you ever

00:12:43,420 --> 00:12:50,680
call it okay very simple nothing nothing

00:12:46,209 --> 00:12:53,860
really a wizardry you can you can see

00:12:50,680 --> 00:12:55,870
from the afte well the order of the

00:12:53,860 --> 00:12:58,449
elements is there but the important part

00:12:55,870 --> 00:13:01,629
is that with the class and the tool can

00:12:58,449 --> 00:13:04,930
actually link the instantiation to the

00:13:01,629 --> 00:13:07,600
definition so now we have a way to move

00:13:04,930 --> 00:13:09,879
from the last well the next to the last

00:13:07,600 --> 00:13:11,910
line to the definition and go on again

00:13:09,879 --> 00:13:14,949
and find other elements inside the code

00:13:11,910 --> 00:13:16,329
that's one way we don't have to read the

00:13:14,949 --> 00:13:18,399
thing one after each other we can start

00:13:16,329 --> 00:13:19,839
go to the definition you should find

00:13:18,399 --> 00:13:21,910
something else combat or maybe go

00:13:19,839 --> 00:13:23,559
somewhere else the only thing we're

00:13:21,910 --> 00:13:25,300
starting to miss at that point beside

00:13:23,559 --> 00:13:29,379
the definition is the order in which

00:13:25,300 --> 00:13:31,360
it's executed so basically the element

00:13:29,379 --> 00:13:34,420
you have here is not are not in the same

00:13:31,360 --> 00:13:36,459
order than the one you have here it's

00:13:34,420 --> 00:13:39,429
probably in the information but there is

00:13:36,459 --> 00:13:42,100
she kind of loses this information so we

00:13:39,429 --> 00:13:45,309
have to start thinking on top of the ast

00:13:42,100 --> 00:13:48,100
about flow control for control is a

00:13:45,309 --> 00:13:51,970
diagram that will take care of the order

00:13:48,100 --> 00:13:55,029
the sequence order of execution here is

00:13:51,970 --> 00:13:56,769
another example you will again pardon my

00:13:55,029 --> 00:13:58,179
french the slides i in french at that

00:13:56,769 --> 00:14:01,300
moment so probably you're going to learn

00:13:58,179 --> 00:14:04,990
something here is a very liberal little

00:14:01,300 --> 00:14:07,569
script there is a source that's there

00:14:04,990 --> 00:14:09,730
and then there is a if the if as two

00:14:07,569 --> 00:14:11,259
branches which means that you should not

00:14:09,730 --> 00:14:12,850
navigate both of them at the same time

00:14:11,259 --> 00:14:15,249
that's exactly what you want from a leaf

00:14:12,850 --> 00:14:17,439
right if there is a condition match then

00:14:15,249 --> 00:14:20,319
you do something otherwise you go on the

00:14:17,439 --> 00:14:23,199
else if it's there the ACE team will

00:14:20,319 --> 00:14:25,839
probably look at that well we look like

00:14:23,199 --> 00:14:27,670
that and the other diagram we want would

00:14:25,839 --> 00:14:30,399
be a cool of flow control graph that

00:14:27,670 --> 00:14:31,540
looks like that slightly different from

00:14:30,399 --> 00:14:33,970
the previous one on

00:14:31,540 --> 00:14:36,130
this time we want to know the order in

00:14:33,970 --> 00:14:40,180
which everything is executed the first

00:14:36,130 --> 00:14:42,850
one is a common pass it's always done so

00:14:40,180 --> 00:14:46,420
it's right after the initial column PHP

00:14:42,850 --> 00:14:47,529
the second one is a condition itself so

00:14:46,420 --> 00:14:49,990
at that point we know we're branching

00:14:47,529 --> 00:14:52,870
and then we have the two branches as

00:14:49,990 --> 00:14:55,510
each on each side which will merge

00:14:52,870 --> 00:14:57,250
ultimately well here at the exit because

00:14:55,510 --> 00:14:58,389
it's very simple example but they will

00:14:57,250 --> 00:14:59,370
merge and maybe go on with something

00:14:58,389 --> 00:15:01,540
else

00:14:59,370 --> 00:15:03,850
that's another way to navigate the

00:15:01,540 --> 00:15:05,440
information right initially we have the

00:15:03,850 --> 00:15:07,600
definition now we have a way to navigate

00:15:05,440 --> 00:15:09,610
just the way PHP is going to execute the

00:15:07,600 --> 00:15:11,410
information it may branch depending on

00:15:09,610 --> 00:15:13,389
situation and States and that's the

00:15:11,410 --> 00:15:14,920
state machine bench on one side on the

00:15:13,389 --> 00:15:17,620
other and that would be the same for

00:15:14,920 --> 00:15:19,060
every part of the code and it's

00:15:17,620 --> 00:15:20,920
completely independent from the

00:15:19,060 --> 00:15:22,899
definition we've seen earlier there's

00:15:20,920 --> 00:15:25,690
completely it's completely moving from

00:15:22,899 --> 00:15:29,410
one flow diagram to the other one is

00:15:25,690 --> 00:15:32,829
completely arbitrary and actually before

00:15:29,410 --> 00:15:34,690
we start going to other tools I like to

00:15:32,829 --> 00:15:36,399
introduce you with another one what's

00:15:34,690 --> 00:15:38,949
perhaps from the definition as a program

00:15:36,399 --> 00:15:41,529
dependency graph but that's again the

00:15:38,949 --> 00:15:44,589
same scripture here that's applying the

00:15:41,529 --> 00:15:46,810
dependencies on the data so it's not

00:15:44,589 --> 00:15:51,339
anymore the sequence that's important

00:15:46,810 --> 00:15:54,130
that's how you need other statement to

00:15:51,339 --> 00:15:55,660
be executed before you reach this one so

00:15:54,130 --> 00:15:58,000
take a look at the first one the first

00:15:55,660 --> 00:15:59,980
one is unconditional because well you

00:15:58,000 --> 00:16:01,990
have nothing okay source is something

00:15:59,980 --> 00:16:03,730
that exists is which can check it easily

00:16:01,990 --> 00:16:07,180
there's a function call that it written

00:16:03,730 --> 00:16:10,510
something so feeding X is okay now if we

00:16:07,180 --> 00:16:12,790
move along along the script of course if

00:16:10,510 --> 00:16:14,860
we want to execute the if and the

00:16:12,790 --> 00:16:17,829
condition then we only have to execute

00:16:14,860 --> 00:16:22,600
the previous one so this is I'll say

00:16:17,829 --> 00:16:25,000
that this sequence is always valid when

00:16:22,600 --> 00:16:27,430
we want to move inside the else then we

00:16:25,000 --> 00:16:29,500
have two dependencies we need X to exist

00:16:27,430 --> 00:16:33,190
so it has to be depending on the first

00:16:29,500 --> 00:16:37,300
source and it also needs that X as a

00:16:33,190 --> 00:16:39,339
special condition so to reach that point

00:16:37,300 --> 00:16:42,790
yeah of course swing to folder the

00:16:39,339 --> 00:16:44,769
control flow but we also have to meet a

00:16:42,790 --> 00:16:45,290
special condition which is that X is

00:16:44,769 --> 00:16:47,480
small

00:16:45,290 --> 00:16:50,630
than 10 which also means that probably X

00:16:47,480 --> 00:16:53,810
can be you know identified as an

00:16:50,630 --> 00:16:56,180
integral and then then we can go on

00:16:53,810 --> 00:16:58,339
which mean that for example if Y is not

00:16:56,180 --> 00:17:00,769
existing here on the elf we can

00:16:58,339 --> 00:17:01,670
understand that the two branches are

00:17:00,769 --> 00:17:05,809
unbalanced

00:17:01,670 --> 00:17:06,559
anything that will use Y after the after

00:17:05,809 --> 00:17:09,199
the if-then

00:17:06,559 --> 00:17:11,240
could then realize go go through one of

00:17:09,199 --> 00:17:12,199
the bench that has not set in Y and then

00:17:11,240 --> 00:17:16,010
that would be a problem

00:17:12,199 --> 00:17:19,120
I'm not shown here but so here the

00:17:16,010 --> 00:17:21,230
dependency depend a little things that

00:17:19,120 --> 00:17:23,270
the data has to be prepared before

00:17:21,230 --> 00:17:27,500
reaching that point and that includes

00:17:23,270 --> 00:17:29,960
the conditions so in the end we have

00:17:27,500 --> 00:17:30,740
three different ways to navigate inside

00:17:29,960 --> 00:17:32,929
the code

00:17:30,740 --> 00:17:35,540
one thing you learn from static analysis

00:17:32,929 --> 00:17:38,150
is that keep constantly moving from one

00:17:35,540 --> 00:17:40,250
Harding to the other the first one you

00:17:38,150 --> 00:17:41,929
have here is wow we want to eat we want

00:17:40,250 --> 00:17:43,520
the source where is the source what does

00:17:41,929 --> 00:17:45,530
it do does it really bring us for the

00:17:43,520 --> 00:17:47,419
integral then we used a SPS they will

00:17:45,530 --> 00:17:49,820
tell us where in this in the code is the

00:17:47,419 --> 00:17:52,340
source it may not look like like that

00:17:49,820 --> 00:17:53,840
maybe I have a use statement before that

00:17:52,340 --> 00:17:56,450
send that into a namespace that we

00:17:53,840 --> 00:17:58,490
haven't heard about but HT will tell

00:17:56,450 --> 00:18:01,190
that us then we get the value it goes

00:17:58,490 --> 00:18:03,919
there which of the level of the path

00:18:01,190 --> 00:18:06,799
will be followed and which sequence will

00:18:03,919 --> 00:18:12,040
be executed that's from the program no

00:18:06,799 --> 00:18:12,040
dependency and then the flow graph yes

00:18:14,950 --> 00:18:21,260
yes it also depends um yes it also

00:18:19,159 --> 00:18:23,260
depends yes right right it's missing

00:18:21,260 --> 00:18:27,950
it's the contrary yeah it's the other

00:18:23,260 --> 00:18:32,090
condition it's the your right is missy

00:18:27,950 --> 00:18:34,220
that the link does this link time this

00:18:32,090 --> 00:18:36,370
thing is I should also be there I missed

00:18:34,220 --> 00:18:40,490
it

00:18:36,370 --> 00:18:43,370
it's actually the contrary right so this

00:18:40,490 --> 00:18:44,780
X I don't see this one here depends

00:18:43,370 --> 00:18:46,640
directly on the condition the other one

00:18:44,780 --> 00:18:48,860
here depends on the negation of the

00:18:46,640 --> 00:18:50,030
condition because it's the else this is

00:18:48,860 --> 00:18:52,809
missing the other link here in the

00:18:50,030 --> 00:18:52,809
render and the scheme

00:18:54,450 --> 00:19:03,210
so in between in the end we can consider

00:18:57,990 --> 00:19:06,900
actually PHP as a database PHP code is a

00:19:03,210 --> 00:19:08,430
data set now it's kind of the contrary

00:19:06,900 --> 00:19:10,830
of what we have that are usually usually

00:19:08,430 --> 00:19:12,990
we have the data set and though we have

00:19:10,830 --> 00:19:16,500
the query language like SQL or Grameen

00:19:12,990 --> 00:19:18,090
and we want the data to query right here

00:19:16,500 --> 00:19:20,010
we have the data set we have no way to

00:19:18,090 --> 00:19:21,390
query it we don't know how to create

00:19:20,010 --> 00:19:23,820
that right we can execute it

00:19:21,390 --> 00:19:27,240
PHP will make sense of that run it do

00:19:23,820 --> 00:19:30,300
something but how can we go inside and

00:19:27,240 --> 00:19:33,210
collect the information we want okay so

00:19:30,300 --> 00:19:34,650
we need we need a list of we need we

00:19:33,210 --> 00:19:36,870
need the tools to do that and they have

00:19:34,650 --> 00:19:40,200
different approaches so I have a list of

00:19:36,870 --> 00:19:42,390
well and quickly 68 of them I check the

00:19:40,200 --> 00:19:45,180
slide this morning which makes me

00:19:42,390 --> 00:19:47,010
discover another three of them so thank

00:19:45,180 --> 00:19:49,440
you for the conference that's that's not

00:19:47,010 --> 00:19:51,090
great and I'm not going to show you all

00:19:49,440 --> 00:19:53,850
of them but I would like to show you a

00:19:51,090 --> 00:19:56,610
number of them broken down in five

00:19:53,850 --> 00:19:59,370
categories and there are others there

00:19:56,610 --> 00:20:02,400
are lots other categories and hopefully

00:19:59,370 --> 00:20:05,900
you can even imagine yours migration

00:20:02,400 --> 00:20:09,780
tools code quality security metrics and

00:20:05,900 --> 00:20:12,840
inventories that should cover a number

00:20:09,780 --> 00:20:15,990
of elements okay so how come migration

00:20:12,840 --> 00:20:18,900
tools are interested in static analysis

00:20:15,990 --> 00:20:21,570
okay what happens when you want to move

00:20:18,900 --> 00:20:24,000
to PHP from PHP file to PHP seven well

00:20:21,570 --> 00:20:25,920
there's a only one source you go in the

00:20:24,000 --> 00:20:28,760
manual and the manual tells you okay

00:20:25,920 --> 00:20:31,170
these classes disappeared those are new

00:20:28,760 --> 00:20:37,200
these functions disappeared those are

00:20:31,170 --> 00:20:39,330
new and those are change the behavior so

00:20:37,200 --> 00:20:41,370
getting rid of something is usually easy

00:20:39,330 --> 00:20:43,110
you know what you're losing right so it

00:20:41,370 --> 00:20:44,970
was there it is not anymore so if it

00:20:43,110 --> 00:20:46,920
appears in the code then you have to

00:20:44,970 --> 00:20:49,620
remove it changing behavior is a lot

00:20:46,920 --> 00:20:51,690
more difficult and how many pages of

00:20:49,620 --> 00:20:54,980
documentation do you have at the moment

00:20:51,690 --> 00:20:59,050
to migrate from five to seven

00:20:54,980 --> 00:21:02,420
shall we try to guess again twelve pages

00:20:59,050 --> 00:21:07,340
seven that's a good guess that means

00:21:02,420 --> 00:21:09,710
that I don't want to see pitch be 100 so

00:21:07,340 --> 00:21:12,380
there's a huge list of them right it

00:21:09,710 --> 00:21:13,820
would be probably easy to talk about one

00:21:12,380 --> 00:21:16,160
or two of them now but there's a long

00:21:13,820 --> 00:21:17,690
list there's different situations and

00:21:16,160 --> 00:21:20,030
sometimes it's very difficult to

00:21:17,690 --> 00:21:22,310
actually track them in the code for

00:21:20,030 --> 00:21:26,920
example disappearing classes okay that's

00:21:22,310 --> 00:21:29,780
an easy one disappearing directive ooh

00:21:26,920 --> 00:21:31,520
how can you track disappearing directive

00:21:29,780 --> 00:21:34,600
you cannot track directly the code

00:21:31,520 --> 00:21:37,100
unless the code itself is dependent like

00:21:34,600 --> 00:21:40,100
corset the said we changed that

00:21:37,100 --> 00:21:41,810
appeared in HP five five this one

00:21:40,100 --> 00:21:43,900
actually has an impact now on HTML

00:21:41,810 --> 00:21:48,140
entities and stimulated a special course

00:21:43,900 --> 00:21:49,370
another one there's a decode table so

00:21:48,140 --> 00:21:51,260
sometimes it's kind of difficult and

00:21:49,370 --> 00:21:53,060
there static analogies can collect can

00:21:51,260 --> 00:21:55,400
capitalize all those different elements

00:21:53,060 --> 00:21:57,550
all those different sources and made

00:21:55,400 --> 00:22:00,770
that into a one element win in one place

00:21:57,550 --> 00:22:02,750
so at least the two first particular

00:22:00,770 --> 00:22:04,790
analyzer I heard that were completely

00:22:02,750 --> 00:22:06,710
specific on moving from five to seven

00:22:04,790 --> 00:22:09,290
and probably just seven because they

00:22:06,710 --> 00:22:11,360
were not updated ever since or PHP seven

00:22:09,290 --> 00:22:13,670
more pages peach p7 CC for those of you

00:22:11,360 --> 00:22:16,460
who said yes when I asked about stay in

00:22:13,670 --> 00:22:18,950
PHP five and you can use those otherwise

00:22:16,460 --> 00:22:21,680
when I work on for example will give you

00:22:18,950 --> 00:22:24,800
reports like that remember we're talking

00:22:21,680 --> 00:22:27,980
about static analogies so there is no

00:22:24,800 --> 00:22:31,550
fear into using peach p72 even 72 is not

00:22:27,980 --> 00:22:33,320
yet there right um I cannot have to

00:22:31,550 --> 00:22:36,080
change the name if suddenly they decide

00:22:33,320 --> 00:22:37,430
to move from seven to to eight I guess

00:22:36,080 --> 00:22:38,600
that's worth it right

00:22:37,430 --> 00:22:42,260
there's already a number of things

00:22:38,600 --> 00:22:43,850
there's probably like 12 now the lesson

00:22:42,260 --> 00:22:45,440
that six different arab seeds that were

00:22:43,850 --> 00:22:48,020
voted so we already have a number of

00:22:45,440 --> 00:22:50,300
things that are available for PHP 72 and

00:22:48,020 --> 00:22:51,860
even though we don't compile it we can

00:22:50,300 --> 00:22:55,010
check for them so there's of course

00:22:51,860 --> 00:22:57,350
number of things the demo room of

00:22:55,010 --> 00:23:01,550
directives there is me there there are

00:22:57,350 --> 00:23:04,040
new functions there are new new fusion

00:23:01,550 --> 00:23:05,840
that appears there are extensions that

00:23:04,040 --> 00:23:08,450
disappears there are things we cannot

00:23:05,840 --> 00:23:11,450
test currently okay so it's also written

00:23:08,450 --> 00:23:13,940
there and there are things that

00:23:11,450 --> 00:23:15,470
also already the wrong so we can we

00:23:13,940 --> 00:23:20,120
should actually take a look at that and

00:23:15,470 --> 00:23:23,389
prepare the code for PHP seven - okay so

00:23:20,120 --> 00:23:25,850
this is just the world report on on on

00:23:23,389 --> 00:23:27,740
on the migration itself there are more

00:23:25,850 --> 00:23:30,409
details each time you have the name of

00:23:27,740 --> 00:23:35,350
the file the name of the side the sign

00:23:30,409 --> 00:23:35,350
line and the problem that's linked to it

00:23:35,440 --> 00:23:45,380
others code quality code quality tools

00:23:42,010 --> 00:23:47,450
so beside migration besides knowing what

00:23:45,380 --> 00:23:50,840
to do between one version to another

00:23:47,450 --> 00:23:52,880
then this code quality so things that

00:23:50,840 --> 00:23:55,429
are evergreens okay you try to use a

00:23:52,880 --> 00:23:58,789
property but the property is not defined

00:23:55,429 --> 00:24:00,830
well that that's usually the problem it

00:23:58,789 --> 00:24:03,350
doesn't really hurt the code right

00:24:00,830 --> 00:24:05,630
because Petri will still run with it but

00:24:03,350 --> 00:24:07,549
for example if you create a standard

00:24:05,630 --> 00:24:09,169
object STD objects and create the

00:24:07,549 --> 00:24:11,419
classes that would be actually slower

00:24:09,169 --> 00:24:14,380
than making an array and then casting

00:24:11,419 --> 00:24:17,539
the wall of it into an object at the end

00:24:14,380 --> 00:24:19,460
little things like that so probably if

00:24:17,539 --> 00:24:21,019
you do not create a class and they

00:24:19,460 --> 00:24:25,220
define a class you're going to have

00:24:21,019 --> 00:24:28,100
little you know performance loss design

00:24:25,220 --> 00:24:31,340
it's really tedious to review the code

00:24:28,100 --> 00:24:34,639
all the time for missing definition of

00:24:31,340 --> 00:24:36,080
properties often like that so probably a

00:24:34,639 --> 00:24:38,929
tool is going to do that a lot better

00:24:36,080 --> 00:24:41,240
than you for you and especially it's not

00:24:38,929 --> 00:24:42,070
going to get bored at testing all the

00:24:41,240 --> 00:24:45,559
code all the time

00:24:42,070 --> 00:24:47,330
so um there's several of them I chose

00:24:45,559 --> 00:24:49,070
specialist 10 because really also here

00:24:47,330 --> 00:24:50,870
so it's nice if you have extra question

00:24:49,070 --> 00:24:53,870
you can also go and meet him

00:24:50,870 --> 00:24:55,340
fan was started by Rasmus so it's

00:24:53,870 --> 00:24:58,519
interesting because it raised the

00:24:55,340 --> 00:25:02,570
attention on unit and static analysis

00:24:58,519 --> 00:25:05,149
it's still being worked on evilly every

00:25:02,570 --> 00:25:06,980
day probably from Etsy so they're using

00:25:05,149 --> 00:25:09,380
that over there and it's open source all

00:25:06,980 --> 00:25:13,070
the tools here are open source some come

00:25:09,380 --> 00:25:14,630
from v-mail think so that's that's

00:25:13,070 --> 00:25:18,019
another company that's all sourcing it

00:25:14,630 --> 00:25:20,570
their own tool here is a result from PHP

00:25:18,019 --> 00:25:22,639
Stan I add to adapt their presentation

00:25:20,570 --> 00:25:24,830
because doesn't fit nicely and I also

00:25:22,639 --> 00:25:27,470
remove the redundant one

00:25:24,830 --> 00:25:29,539
but again you see the file name you got

00:25:27,470 --> 00:25:31,820
the line and each time you have an

00:25:29,539 --> 00:25:34,429
explanation that says ok this is what I

00:25:31,820 --> 00:25:37,029
found that is wrong collection of them

00:25:34,429 --> 00:25:39,409
there is a class that is not found

00:25:37,029 --> 00:25:41,000
possibly because of this configuration

00:25:39,409 --> 00:25:42,980
autoload couldn't find the class or

00:25:41,000 --> 00:25:46,909
maybe thing for a composer there is

00:25:42,980 --> 00:25:48,260
missing functions also um what as well

00:25:46,909 --> 00:25:51,110
is it always interesting they're all

00:25:48,260 --> 00:25:52,460
missing variables so undefined variable

00:25:51,110 --> 00:25:54,820
probably one of those variable that's

00:25:52,460 --> 00:25:59,179
being used before it's actually

00:25:54,820 --> 00:26:01,760
initialized and get a value in it again

00:25:59,179 --> 00:26:04,490
it doesn't really always urge but if you

00:26:01,760 --> 00:26:12,889
know what they are Uganda kleine fix it

00:26:04,490 --> 00:26:19,909
and then save it that's done clean up so

00:26:12,889 --> 00:26:21,769
some more security tools of course you

00:26:19,909 --> 00:26:25,279
can have some others that are specific

00:26:21,769 --> 00:26:28,070
to security and if we've seen the

00:26:25,279 --> 00:26:29,419
previous one that's go on the security

00:26:28,070 --> 00:26:32,059
on the code quality they're usually

00:26:29,419 --> 00:26:35,179
reliably on the AST because of

00:26:32,059 --> 00:26:37,490
definitions security tools usually rely

00:26:35,179 --> 00:26:40,880
on checking where the value goes and

00:26:37,490 --> 00:26:43,159
when it is filtered here you have a few

00:26:40,880 --> 00:26:45,860
of them rips as being actually run for a

00:26:43,159 --> 00:26:48,260
long long time and I mentioned the 0 5

00:26:45,860 --> 00:26:50,090
because it's the last version they have

00:26:48,260 --> 00:26:52,880
that's available as open source now it's

00:26:50,090 --> 00:26:55,610
the SAS probably the that the same guy

00:26:52,880 --> 00:26:57,289
just upgraded infrastructure ok

00:26:55,610 --> 00:26:59,240
I don't know if this rule 5 works

00:26:57,289 --> 00:27:01,039
anymore and 7 to be true

00:26:59,240 --> 00:27:03,769
but at least you can take down the code

00:27:01,039 --> 00:27:06,710
and they work early on that because this

00:27:03,769 --> 00:27:10,070
kind of schema allows them to provide

00:27:06,710 --> 00:27:12,470
you they look for the link between a

00:27:10,070 --> 00:27:15,139
sink so plays for the security may have

00:27:12,470 --> 00:27:17,330
trouble and the origin which is usually

00:27:15,139 --> 00:27:19,279
the incoming variables okay and in

00:27:17,330 --> 00:27:19,880
between sometimes the the pass is not

00:27:19,279 --> 00:27:21,500
easy

00:27:19,880 --> 00:27:24,169
that's one funk and there are lots of

00:27:21,500 --> 00:27:26,179
conditions so in the end they can tell

00:27:24,169 --> 00:27:28,940
you ok from here this goes into the

00:27:26,179 --> 00:27:30,769
medical query ok and there are those

00:27:28,940 --> 00:27:31,820
conditions when you can meet all those

00:27:30,769 --> 00:27:34,549
conditions and then you have the

00:27:31,820 --> 00:27:36,440
Venerable icky that's an interesting

00:27:34,549 --> 00:27:40,070
result

00:27:36,440 --> 00:27:43,760
Mexico is working directly on the code

00:27:40,070 --> 00:27:45,950
see looks actually a lot like PHP stands

00:27:43,760 --> 00:27:48,950
same results except here the order is

00:27:45,950 --> 00:27:51,320
more like one line one results you have

00:27:48,950 --> 00:27:52,880
the name of the file of the line the

00:27:51,320 --> 00:27:55,100
explanation which may be actually longer

00:27:52,880 --> 00:27:57,070
multi commentation and you have an

00:27:55,100 --> 00:28:00,380
extract of the code that is being used

00:27:57,070 --> 00:28:02,990
okay so for example in the middle we

00:28:00,380 --> 00:28:05,260
have avoid the you succeed and because

00:28:02,990 --> 00:28:12,350
it needs to injection and apparently the

00:28:05,260 --> 00:28:17,140
out file is displayed now what is no is

00:28:12,350 --> 00:28:20,150
it mentioned hmm

00:28:17,140 --> 00:28:22,400
okay on the last one header should not

00:28:20,150 --> 00:28:24,290
be done with concatenation sorry for

00:28:22,400 --> 00:28:27,610
that the good condition is on the other

00:28:24,290 --> 00:28:29,750
side trust me on that

00:28:27,610 --> 00:28:31,910
okay so let's set the first one

00:28:29,750 --> 00:28:34,490
mentioned the weather usage of requests

00:28:31,910 --> 00:28:35,680
anywhere and yes generally speaking you

00:28:34,490 --> 00:28:42,830
don't want to leave any requests

00:28:35,680 --> 00:28:45,320
anywhere matrix-matrix I not always

00:28:42,830 --> 00:28:48,020
consider them as at static analysis

00:28:45,320 --> 00:28:50,630
because they will give broader results

00:28:48,020 --> 00:28:53,330
telling you okay cyclomatic complexity

00:28:50,630 --> 00:28:55,040
is wage wise so please don't take a take

00:28:53,330 --> 00:28:57,860
a look there but they will not point an

00:28:55,040 --> 00:29:01,040
exact line so it won't it's broader it's

00:28:57,860 --> 00:29:02,630
still that kind of interesting and here

00:29:01,040 --> 00:29:04,400
is a bunch of them and they're the pitch

00:29:02,630 --> 00:29:06,830
metrics one has been around and it's

00:29:04,400 --> 00:29:08,810
especially pretty nice so it's

00:29:06,830 --> 00:29:11,680
nice-looking fits very well in reports

00:29:08,810 --> 00:29:14,180
whenever you have to to do one of them

00:29:11,680 --> 00:29:15,770
there is the number of line of code on

00:29:14,180 --> 00:29:18,980
one side and the cyclomatic complexity

00:29:15,770 --> 00:29:21,830
here so the way the the dots are

00:29:18,980 --> 00:29:25,790
scattered always very interesting okay

00:29:21,830 --> 00:29:29,840
here there is obviously one major class

00:29:25,790 --> 00:29:31,970
that's rich 385 45 and birch of them

00:29:29,840 --> 00:29:33,770
that intermediates and a lot of them

00:29:31,970 --> 00:29:36,080
that are really small and very simple

00:29:33,770 --> 00:29:38,780
this is characteristic of a framework

00:29:36,080 --> 00:29:41,570
approach okay so obviously there is a

00:29:38,780 --> 00:29:44,180
senior guys who built four or five big

00:29:41,570 --> 00:29:45,620
classes that suddenly explode in terms

00:29:44,180 --> 00:29:48,830
of complexity because they are always

00:29:45,620 --> 00:29:50,250
extended into components and the

00:29:48,830 --> 00:29:51,840
components are done by people who

00:29:50,250 --> 00:29:53,700
are not the senior ones but they have to

00:29:51,840 --> 00:29:56,790
write know the classes extended in the

00:29:53,700 --> 00:29:59,190
main one and call at the eyes on the on

00:29:56,790 --> 00:30:01,500
this so suddenly you have this huge

00:29:59,190 --> 00:30:04,860
class which cannot be broken down for

00:30:01,500 --> 00:30:06,570
model its approach problems and all the

00:30:04,860 --> 00:30:08,370
others are smaller so you can also see

00:30:06,570 --> 00:30:11,580
that on the other side you see this ring

00:30:08,370 --> 00:30:13,470
of green and simple classes are the one

00:30:11,580 --> 00:30:14,970
done by the juniors and obviously the

00:30:13,470 --> 00:30:16,770
one in the middle is the class the

00:30:14,970 --> 00:30:20,390
framework approach but it's kind of

00:30:16,770 --> 00:30:22,890
interesting to see it's kind of visual

00:30:20,390 --> 00:30:25,800
of course there are other other classes

00:30:22,890 --> 00:30:27,570
all around and another one that can be

00:30:25,800 --> 00:30:30,180
done by pitch key matrix which is most

00:30:27,570 --> 00:30:34,040
attic analysis is this this they

00:30:30,180 --> 00:30:36,870
actually collected all the methods and

00:30:34,040 --> 00:30:40,470
they make a link between the methods

00:30:36,870 --> 00:30:42,240
under calling one obviously this does

00:30:40,470 --> 00:30:45,420
not fit in a session here and I should

00:30:42,240 --> 00:30:47,640
be moving my my mouse over every every

00:30:45,420 --> 00:30:50,280
every link so I could see which one is

00:30:47,640 --> 00:30:53,040
linked but the general presentation is

00:30:50,280 --> 00:30:54,690
actually interesting to analyze you

00:30:53,040 --> 00:30:56,790
should take a look at that there are a

00:30:54,690 --> 00:31:02,130
few of them that are obviously

00:30:56,790 --> 00:31:03,930
concentrating a lot of course again

00:31:02,130 --> 00:31:05,700
that's the same code so we understand

00:31:03,930 --> 00:31:08,400
that what we've seen by cyclomatic

00:31:05,700 --> 00:31:10,920
complexity appears here again some of

00:31:08,400 --> 00:31:13,500
the wide range of components are calling

00:31:10,920 --> 00:31:18,960
only the same classes and those are the

00:31:13,500 --> 00:31:20,880
one we should review at least we know

00:31:18,960 --> 00:31:23,810
how to navigate and in which part of the

00:31:20,880 --> 00:31:23,810
code we should take a look at

00:31:25,290 --> 00:31:33,190
who that should be quick so inventories

00:31:29,920 --> 00:31:34,870
will be the last section and inventories

00:31:33,190 --> 00:31:37,470
is something that I really enjoyed it's

00:31:34,870 --> 00:31:40,690
always spectacular to to do one of them

00:31:37,470 --> 00:31:43,090
basically it takes you take one of a

00:31:40,690 --> 00:31:46,180
part of the other codes for example you

00:31:43,090 --> 00:31:47,890
list all the other literals and you see

00:31:46,180 --> 00:31:49,420
how often they appear and suddenly you

00:31:47,890 --> 00:31:52,060
take a look at the value understand why

00:31:49,420 --> 00:31:54,250
some special value appears if you look

00:31:52,060 --> 00:31:59,670
at the PHP code that has that make use

00:31:54,250 --> 00:31:59,670
age of three three thousand six hundred

00:31:59,700 --> 00:32:06,970
but that yeah like well not only but

00:32:05,260 --> 00:32:08,860
yeah most of the time it's something

00:32:06,970 --> 00:32:11,260
like that so does it has to be our coded

00:32:08,860 --> 00:32:13,750
or could it be put in a constant so it

00:32:11,260 --> 00:32:15,640
makes sense in the code because

00:32:13,750 --> 00:32:17,460
otherwise all the numbers would not

00:32:15,640 --> 00:32:19,210
always make sense suddenly there is our

00:32:17,460 --> 00:32:24,120
what was that the last I've seen

00:32:19,210 --> 00:32:30,610
eighteen 1819 that appears Oliver cold

00:32:24,120 --> 00:32:33,360
why is that eighteen nineteen that was

00:32:30,610 --> 00:32:37,810
apparently report on the radio server

00:32:33,360 --> 00:32:40,030
anyone using that I learned that too but

00:32:37,810 --> 00:32:42,460
all the others and it makes it like 300

00:32:40,030 --> 00:32:45,250
by eighty nine but for time I know so

00:32:42,460 --> 00:32:48,070
okay I did you go I think it's the LDAP

00:32:45,250 --> 00:32:50,680
one and at some point so many of these

00:32:48,070 --> 00:32:52,300
magic number was appearing across the

00:32:50,680 --> 00:32:53,320
code because they decided to add good

00:32:52,300 --> 00:32:55,510
some of the ports

00:32:53,320 --> 00:32:58,090
okay so that's that's interesting to see

00:32:55,510 --> 00:32:59,520
and to have the literal just taken out

00:32:58,090 --> 00:33:01,810
of context and see how often they are

00:32:59,520 --> 00:33:03,880
you'll probably don't want to review any

00:33:01,810 --> 00:33:06,940
zero on one because they appear to me

00:33:03,880 --> 00:33:08,800
too many situations but otherwise the

00:33:06,940 --> 00:33:12,610
one that all kind of weird appears

00:33:08,800 --> 00:33:14,860
several times they're interested before

00:33:12,610 --> 00:33:18,640
we move on the secular very at this one

00:33:14,860 --> 00:33:20,380
error messages make a selection of all

00:33:18,640 --> 00:33:23,380
the error messages are being used in

00:33:20,380 --> 00:33:26,200
exits just extract like them like that

00:33:23,380 --> 00:33:28,870
that's an exception and list them and

00:33:26,200 --> 00:33:32,560
try to see what that does anyone knows

00:33:28,870 --> 00:33:36,400
teach P IPM which is the the application

00:33:32,560 --> 00:33:40,650
that wisdom no can you tell me what they

00:33:36,400 --> 00:33:40,650
do from the error messages from them

00:33:43,559 --> 00:33:48,009
just reading in the errormsgs disease

00:33:45,730 --> 00:33:49,779
when something is wrong they stopped the

00:33:48,009 --> 00:33:52,210
make an exit or die and they say

00:33:49,779 --> 00:33:56,019
something okay we've got something the

00:33:52,210 --> 00:33:58,179
fun is not writable is that something

00:33:56,019 --> 00:34:00,250
you expect your or your user to find the

00:33:58,179 --> 00:34:05,679
code if something world does it work on

00:34:00,250 --> 00:34:08,020
the application now you expect something

00:34:05,679 --> 00:34:10,869
at this well either it has to be sent to

00:34:08,020 --> 00:34:13,750
a header so they can be a that can be a

00:34:10,869 --> 00:34:16,629
maintenance page that being displayed or

00:34:13,750 --> 00:34:19,540
not something that's like that just you

00:34:16,629 --> 00:34:21,190
know written and stopped the other thing

00:34:19,540 --> 00:34:22,599
I find interesting is there's no way we

00:34:21,190 --> 00:34:24,399
can understand what's happening there

00:34:22,599 --> 00:34:26,710
there's no LDAP so apparently this is

00:34:24,399 --> 00:34:29,950
doing something with LDAP there are

00:34:26,710 --> 00:34:33,490
security reasons for something there's

00:34:29,950 --> 00:34:35,619
an admin system but just reviewing those

00:34:33,490 --> 00:34:37,270
error messages could be interesting give

00:34:35,619 --> 00:34:39,069
you an idea of how the application

00:34:37,270 --> 00:34:41,560
behave if there's none of them because

00:34:39,069 --> 00:34:43,210
there's no die that's also good okay

00:34:41,560 --> 00:34:48,040
otherwise there should be something

00:34:43,210 --> 00:34:50,050
that's more interesting so what could be

00:34:48,040 --> 00:34:52,270
interesting with that doing spelling

00:34:50,050 --> 00:34:55,060
like collects all the variables and

00:34:52,270 --> 00:34:58,030
check the spelling believe me you're

00:34:55,060 --> 00:34:59,440
going to get some work and not for the

00:34:58,030 --> 00:35:02,190
foreigner who do not speak English

00:34:59,440 --> 00:35:05,230
I think the HTTP a for a referee was

00:35:02,190 --> 00:35:08,920
something interesting the name of the of

00:35:05,230 --> 00:35:12,599
the classes is also a good list so

00:35:08,920 --> 00:35:14,920
everyone knows the magic number syndrome

00:35:12,599 --> 00:35:17,349
it's what I mentioned earlier when you

00:35:14,920 --> 00:35:19,180
use a number that's actually as some

00:35:17,349 --> 00:35:22,300
special value but it's like a little

00:35:19,180 --> 00:35:25,599
scattered everywhere we suddenly see

00:35:22,300 --> 00:35:27,819
something like 20.6 okay that's French

00:35:25,599 --> 00:35:29,290
v80 but you have to know that if you

00:35:27,819 --> 00:35:31,510
don't know that then it's just like what

00:35:29,290 --> 00:35:33,400
why is this number everywhere and why is

00:35:31,510 --> 00:35:35,470
it actually scattered all across the

00:35:33,400 --> 00:35:37,599
place right shouldn't it be like

00:35:35,470 --> 00:35:39,990
centered so when we decide to change it

00:35:37,599 --> 00:35:42,280
from one to the other from new value

00:35:39,990 --> 00:35:44,890
that's probably going to change then

00:35:42,280 --> 00:35:48,280
maybe we have with a constant so it can

00:35:44,890 --> 00:35:50,349
be changed the other thing from

00:35:48,280 --> 00:35:52,000
inventories is that we could you know

00:35:50,349 --> 00:35:54,490
scan the code and

00:35:52,000 --> 00:35:58,780
extract information to put that into

00:35:54,490 --> 00:36:00,990
another it's to to give information to

00:35:58,780 --> 00:36:04,060
someone else like other computations

00:36:00,990 --> 00:36:06,640
under complication directives so for

00:36:04,060 --> 00:36:08,950
example you read the code and you find

00:36:06,640 --> 00:36:11,740
all the functions are being called okay

00:36:08,950 --> 00:36:14,650
given the list of php.net you can find

00:36:11,740 --> 00:36:17,920
which all the extensions being used in

00:36:14,650 --> 00:36:22,990
this application okay so this is again

00:36:17,920 --> 00:36:24,280
under the PHP I am obviously from the

00:36:22,990 --> 00:36:25,630
from the function names you know which

00:36:24,280 --> 00:36:27,160
extensions are used so from the

00:36:25,630 --> 00:36:29,500
extension I use you are you know the one

00:36:27,160 --> 00:36:31,690
that I use the one are not used and you

00:36:29,500 --> 00:36:37,420
can decide and offer a list of

00:36:31,690 --> 00:36:41,230
compilation as I switch to optimize the

00:36:37,420 --> 00:36:43,750
PHP code right so from the from the code

00:36:41,230 --> 00:36:47,170
you read it you have exact line of codes

00:36:43,750 --> 00:36:49,840
to be a compiling HP and avoid compiling

00:36:47,170 --> 00:36:51,910
too many extensions what do we do often

00:36:49,840 --> 00:36:54,370
usually we just know apt-get and get the

00:36:51,910 --> 00:36:56,890
standard PHP from someone who decided

00:36:54,370 --> 00:36:59,050
how it is it should be done and then

00:36:56,890 --> 00:37:02,920
we're end up with having the LDAP

00:36:59,050 --> 00:37:04,420
because ok it was kind of defaults if we

00:37:02,920 --> 00:37:06,700
have a security problem then someone can

00:37:04,420 --> 00:37:08,950
explode this LDAP extension to go

00:37:06,700 --> 00:37:10,570
somewhere else ok so maybe it's

00:37:08,950 --> 00:37:13,390
interesting to have this list like

00:37:10,570 --> 00:37:15,220
automatically extracted and provide it

00:37:13,390 --> 00:37:17,770
to the dev ops they will decide if they

00:37:15,220 --> 00:37:19,540
want to compile something specific and

00:37:17,770 --> 00:37:21,910
update it whenever we need a new

00:37:19,540 --> 00:37:24,880
extension or they just you know I want

00:37:21,910 --> 00:37:26,080
to optimize it for performance but we

00:37:24,880 --> 00:37:28,120
don't have to do it we just have to

00:37:26,080 --> 00:37:30,640
write a coach and static analysis will

00:37:28,120 --> 00:37:32,860
will provide us the information the

00:37:30,640 --> 00:37:35,760
other one that's always very useful is

00:37:32,860 --> 00:37:38,320
the corrective PHP directives checklist

00:37:35,760 --> 00:37:39,610
how many times do you do have the system

00:37:38,320 --> 00:37:41,380
admin comes and say oh yeah your

00:37:39,610 --> 00:37:42,910
application is running which one which

00:37:41,380 --> 00:37:45,010
are the directive are important to use

00:37:42,910 --> 00:37:46,930
like I don't know why of MySQL so

00:37:45,010 --> 00:37:47,140
compile it and I have I don't know all

00:37:46,930 --> 00:37:49,840
that

00:37:47,140 --> 00:37:52,210
that's all know if nothing special no no

00:37:49,840 --> 00:37:53,710
no it's okay and then you come back to

00:37:52,210 --> 00:37:55,120
the a it's not working the approach is

00:37:53,710 --> 00:37:58,060
not working yeah but you didn't tell me

00:37:55,120 --> 00:38:00,280
to activate the approach why because

00:37:58,060 --> 00:38:02,050
there's no nice done you have to think

00:38:00,280 --> 00:38:04,270
about it to review the world code and

00:38:02,050 --> 00:38:05,029
hear static analysis and enemies can

00:38:04,270 --> 00:38:06,829
review

00:38:05,029 --> 00:38:08,749
so at that point you're moving in the

00:38:06,829 --> 00:38:11,569
product file so meaning that you depends

00:38:08,749 --> 00:38:13,809
on the protein so I can suggest you that

00:38:11,569 --> 00:38:16,219
some of the protein has to be done and

00:38:13,809 --> 00:38:17,839
you have to change like three directives

00:38:16,219 --> 00:38:19,669
so you can provide the worldís to the

00:38:17,839 --> 00:38:25,159
two thus determining and that's

00:38:19,669 --> 00:38:28,880
automated other use age I'll be done

00:38:25,159 --> 00:38:32,539
with those five five different finish

00:38:28,880 --> 00:38:34,039
but there are all over new user new news

00:38:32,539 --> 00:38:36,159
aged for the technologies that are

00:38:34,039 --> 00:38:40,369
always interesting um

00:38:36,159 --> 00:38:42,829
for example the dependency graph okay um

00:38:40,369 --> 00:38:49,059
do we have to deal with dependency

00:38:42,829 --> 00:38:51,349
anymore in PHP as autoload right now

00:38:49,059 --> 00:38:53,449
it's solving a part of the problem

00:38:51,349 --> 00:38:56,239
there's still people doing include so

00:38:53,449 --> 00:38:58,999
maybe there is a list of inclusion and a

00:38:56,239 --> 00:39:01,039
year or key of inclusions okay beside

00:38:58,999 --> 00:39:03,289
that you have static expressions you

00:39:01,039 --> 00:39:05,900
know when you do a constant and you can

00:39:03,289 --> 00:39:07,669
put you can mix it with all the

00:39:05,900 --> 00:39:10,219
constants then suddenly this file

00:39:07,669 --> 00:39:12,619
depends on other constant to be to be

00:39:10,219 --> 00:39:16,099
organized to be a defined before we

00:39:12,619 --> 00:39:18,859
reach the file so dependencies there are

00:39:16,099 --> 00:39:22,279
several of them and machine can confine

00:39:18,859 --> 00:39:25,939
all them next is graph that's what you

00:39:22,279 --> 00:39:28,489
see kind of blurry at the bottom that

00:39:25,939 --> 00:39:30,529
means that I get another one I'll finish

00:39:28,489 --> 00:39:32,569
with this not actually that track the

00:39:30,529 --> 00:39:34,989
track is another static analysis tool

00:39:32,569 --> 00:39:38,539
that will allow you to check there are

00:39:34,989 --> 00:39:41,390
any dependencies that should not happen

00:39:38,539 --> 00:39:44,119
so let's say you have MVC whatever you

00:39:41,390 --> 00:39:46,039
control and you want to avoid that the

00:39:44,119 --> 00:39:48,349
model is calling the controller directly

00:39:46,039 --> 00:39:51,079
or the controller is calling actually

00:39:48,349 --> 00:39:54,289
the database directly so you will set up

00:39:51,079 --> 00:39:56,859
a rule saying okay I do not accept any

00:39:54,289 --> 00:40:00,199
call to this class from the controller

00:39:56,859 --> 00:40:02,719
directory you have to do it yourself you

00:40:00,199 --> 00:40:04,579
have to explain explicitly what are the

00:40:02,719 --> 00:40:06,469
relations you do not want to see and

00:40:04,579 --> 00:40:07,880
then the machine will take a take a look

00:40:06,469 --> 00:40:08,959
at all the classes and say oh yeah at

00:40:07,880 --> 00:40:10,999
that point you're calling this other

00:40:08,959 --> 00:40:13,539
methods means you have a copying between

00:40:10,999 --> 00:40:13,539
those classes

00:40:14,040 --> 00:40:19,260
that's interesting to remove as in terms

00:40:15,960 --> 00:40:21,930
of dependencies thank analogies follow

00:40:19,260 --> 00:40:24,270
it's it's a bit like for the security it

00:40:21,930 --> 00:40:26,640
follows the different usage of the

00:40:24,270 --> 00:40:28,349
variable if it starts with the gate for

00:40:26,640 --> 00:40:30,210
example Durant's underscore get it will

00:40:28,349 --> 00:40:33,240
just paint all the variable that are

00:40:30,210 --> 00:40:35,369
using or depending on the gaps and then

00:40:33,240 --> 00:40:37,619
this way you can see which of which part

00:40:35,369 --> 00:40:40,079
of your code is being painted by you

00:40:37,619 --> 00:40:43,650
know thirty value or value that has to

00:40:40,079 --> 00:40:45,660
be filtered before being used the final

00:40:43,650 --> 00:40:48,450
one here okay so we said link space

00:40:45,660 --> 00:40:50,520
graph for example the the little lonely

00:40:48,450 --> 00:40:54,510
the long ball that you've seen is

00:40:50,520 --> 00:40:57,270
actually the composer namespace so all

00:40:54,510 --> 00:41:00,510
the composer classes are now in one

00:40:57,270 --> 00:41:03,599
tracks every time every time there is a

00:41:00,510 --> 00:41:06,119
namespace that acts like a folder then

00:41:03,599 --> 00:41:09,660
you have one shade of color okay so the

00:41:06,119 --> 00:41:11,520
deepest link space is over there and you

00:41:09,660 --> 00:41:13,460
can see that most of the classes inside

00:41:11,520 --> 00:41:16,650
composer stay within their own namespace

00:41:13,460 --> 00:41:18,839
like them on folder so here you have

00:41:16,650 --> 00:41:20,940
like five six different classes they all

00:41:18,839 --> 00:41:22,140
like extend each other inside the

00:41:20,940 --> 00:41:26,130
namespace so that's the kind of

00:41:22,140 --> 00:41:28,290
consistent set of classes on the other

00:41:26,130 --> 00:41:30,599
hand when you see here on the sides you

00:41:28,290 --> 00:41:32,520
can see that there are two different and

00:41:30,599 --> 00:41:34,230
separate namespaces and at some point

00:41:32,520 --> 00:41:36,810
there is an extension at least two of

00:41:34,230 --> 00:41:38,520
them the other one is on the side so

00:41:36,810 --> 00:41:40,050
appropriately there is the the

00:41:38,520 --> 00:41:43,290
namespaces and the classes are well

00:41:40,050 --> 00:41:45,569
grouped by usage except for a few of

00:41:43,290 --> 00:41:47,190
them maybe that could be interesting to

00:41:45,569 --> 00:41:49,050
start looking at the rules and see why

00:41:47,190 --> 00:41:52,890
they were either split into different

00:41:49,050 --> 00:41:54,540
namespaces or made together on earth

00:41:52,890 --> 00:41:56,180
because you don't care that's also a

00:41:54,540 --> 00:42:00,000
possibility

00:41:56,180 --> 00:42:06,020
so finally sixty-eight you probably have

00:42:00,000 --> 00:42:10,040
ideas for more so you can do your own

00:42:06,020 --> 00:42:12,660
you can do your own you can ask change

00:42:10,040 --> 00:42:15,630
if you want to do more better or better

00:42:12,660 --> 00:42:18,660
the best initially would be compiled

00:42:15,630 --> 00:42:22,109
yourself the ast extension so there is

00:42:18,660 --> 00:42:23,760
an internal ast in PHP seven but we do

00:42:22,109 --> 00:42:26,130
not access it we use it but we don't

00:42:23,760 --> 00:42:28,500
access it just like we use tokens

00:42:26,130 --> 00:42:30,810
it's actually very easy computation so

00:42:28,500 --> 00:42:32,760
just get it down load it and compile it

00:42:30,810 --> 00:42:34,590
and you couldn't you can have access to

00:42:32,760 --> 00:42:37,170
that that will do the AV work of

00:42:34,590 --> 00:42:39,750
building the ASD and believe me it takes

00:42:37,170 --> 00:42:41,430
time it's better in PHP seven but it

00:42:39,750 --> 00:42:43,200
really takes time so the SP is probably

00:42:41,430 --> 00:42:45,120
the best at least you start with all

00:42:43,200 --> 00:42:46,860
those definitions from there you can

00:42:45,120 --> 00:42:49,410
probably build the control and the

00:42:46,860 --> 00:42:51,960
dependency l program control graph if

00:42:49,410 --> 00:42:54,360
you need them anyway if you're still

00:42:51,960 --> 00:42:57,030
teach p5 there is a torture is that

00:42:54,360 --> 00:42:59,730
emulates the behavior of PHP seven aft

00:42:57,030 --> 00:43:02,190
into PHP five so you don't need to move

00:42:59,730 --> 00:43:03,930
to teach p7 it's probably going to be a

00:43:02,190 --> 00:43:05,520
lot better for you to do that but you

00:43:03,930 --> 00:43:07,800
can still rely on that there are what

00:43:05,520 --> 00:43:10,260
some of the partial I mentioned earlier

00:43:07,800 --> 00:43:13,170
are using PHP for sure so that that's a

00:43:10,260 --> 00:43:17,270
good good project it's a reflection also

00:43:13,170 --> 00:43:22,500
um does the speech people rely on that

00:43:17,270 --> 00:43:28,140
no I thought my bad okay it's a native

00:43:22,500 --> 00:43:30,540
web so you see it it is all in in spite

00:43:28,140 --> 00:43:33,000
of if you are if you really have no

00:43:30,540 --> 00:43:36,420
tools or if you have no time the good ol

00:43:33,000 --> 00:43:38,220
regex still works okay I used to be

00:43:36,420 --> 00:43:40,230
complaining against it that's a bad idea

00:43:38,220 --> 00:43:42,060
but I actually find myself doing that a

00:43:40,230 --> 00:43:42,720
lot anytime you have a keyword search in

00:43:42,060 --> 00:43:45,300
your code

00:43:42,720 --> 00:43:47,100
don't don't break a sweat no time for

00:43:45,300 --> 00:43:48,660
static analogies just you know great

00:43:47,100 --> 00:43:50,850
fine that will be sufficient

00:43:48,660 --> 00:43:52,920
on the other end if you're trying to

00:43:50,850 --> 00:43:55,380
look for other knows that's it calls to

00:43:52,920 --> 00:43:58,650
methods and you only rely on the double

00:43:55,380 --> 00:44:03,750
Colin yes go and use a static analyzer

00:43:58,650 --> 00:44:06,630
because reg X is not going to work okay

00:44:03,750 --> 00:44:08,490
whatever so you can also fork an

00:44:06,630 --> 00:44:09,870
existing tool to my experience at the

00:44:08,490 --> 00:44:12,510
moment except maybe using better

00:44:09,870 --> 00:44:14,250
reflection um it's kind of difficult to

00:44:12,510 --> 00:44:16,200
go inside the tool but maybe they have

00:44:14,250 --> 00:44:18,450
already laid the work they all work for

00:44:16,200 --> 00:44:21,990
you so if you take a look that can be a

00:44:18,450 --> 00:44:24,450
good source of information so to write

00:44:21,990 --> 00:44:30,000
that we have now learned both tools do

00:44:24,450 --> 00:44:31,590
you need ideas here are number of ideas

00:44:30,000 --> 00:44:33,930
things that have not been done at least

00:44:31,590 --> 00:44:35,370
and not aware of them so can give that

00:44:33,930 --> 00:44:37,560
you showing trasero if you knew about

00:44:35,370 --> 00:44:39,390
them I'm interested in that the thing

00:44:37,560 --> 00:44:41,010
that surprises me is that we can

00:44:39,390 --> 00:44:44,010
thoughts we are starting to do some

00:44:41,010 --> 00:44:47,849
static analysis for PHP and beside maybe

00:44:44,010 --> 00:44:50,250
Symphony I know no other no no the

00:44:47,849 --> 00:44:52,460
framework that actually provides static

00:44:50,250 --> 00:44:54,779
analysis and that's actually very useful

00:44:52,460 --> 00:44:57,329
you have users whether you provide them

00:44:54,779 --> 00:44:59,519
with okay manual so we have to read the

00:44:57,329 --> 00:45:01,349
manual understand it and use it if you

00:44:59,519 --> 00:45:03,690
have a set of good recommendations you

00:45:01,349 --> 00:45:05,640
know best practices recommendations is a

00:45:03,690 --> 00:45:07,920
that you could actually rely on static

00:45:05,640 --> 00:45:10,230
analysis to review beginners codes or

00:45:07,920 --> 00:45:11,819
customers code or say okay I can review

00:45:10,230 --> 00:45:13,650
that give you an audit of the code or

00:45:11,819 --> 00:45:14,849
say they are there on there you should

00:45:13,650 --> 00:45:18,210
do that the other way the way we

00:45:14,849 --> 00:45:22,230
recommend is this way take a look at the

00:45:18,210 --> 00:45:23,339
WordPress documentation I actually have

00:45:22,230 --> 00:45:25,650
to say it's there they are

00:45:23,339 --> 00:45:28,559
recommendation it's just scattered all

00:45:25,650 --> 00:45:30,539
across the up the documentation they

00:45:28,559 --> 00:45:33,329
usually recommend that you should not

00:45:30,539 --> 00:45:36,299
use other comparables than the one they

00:45:33,329 --> 00:45:38,460
provide and they you should modify them

00:45:36,299 --> 00:45:40,799
okay that kind of things can be test

00:45:38,460 --> 00:45:42,839
technically checked you can look in the

00:45:40,799 --> 00:45:44,430
code and sell yeah at that point you

00:45:42,839 --> 00:45:47,130
have made some modifications that should

00:45:44,430 --> 00:45:50,789
not be done but going to help in terms

00:45:47,130 --> 00:45:53,069
of consistency across your users and in

00:45:50,789 --> 00:45:54,779
terms of efficiency so anytime you have

00:45:53,069 --> 00:45:56,819
like modules or partnerships that's

00:45:54,779 --> 00:45:58,559
providing some code and you send them to

00:45:56,819 --> 00:46:00,839
marketplace you can review that before

00:45:58,559 --> 00:46:04,019
being being being produced finished

00:46:00,839 --> 00:46:05,910
that's an interesting one so if you're

00:46:04,019 --> 00:46:08,549
editing framework I'm interested to talk

00:46:05,910 --> 00:46:12,119
with you about that but in general and

00:46:08,549 --> 00:46:14,250
class diagram extractors if you really

00:46:12,119 --> 00:46:16,920
want to have a UML from the code that

00:46:14,250 --> 00:46:21,839
exists could be interesting

00:46:16,920 --> 00:46:25,460
but that's oh yeah 40% of every code is

00:46:21,839 --> 00:46:27,930
basically static am I using that yeah

00:46:25,460 --> 00:46:30,990
that's actually by reading so much coach

00:46:27,930 --> 00:46:33,720
um you realize that most of the code

00:46:30,990 --> 00:46:35,579
itself less than half of PHP code is

00:46:33,720 --> 00:46:36,119
static now let me let me think about

00:46:35,579 --> 00:46:37,920
that

00:46:36,119 --> 00:46:40,470
imagine that you have a property that

00:46:37,920 --> 00:46:42,569
will all the number of versions okay

00:46:40,470 --> 00:46:45,210
this is not going to change during the

00:46:42,569 --> 00:46:48,210
execution okay but this it's an array

00:46:45,210 --> 00:46:50,369
and you're not aware that PHP seven

00:46:48,210 --> 00:46:51,750
except arrays as constants then you

00:46:50,369 --> 00:46:52,800
probably push that into it anew into

00:46:51,750 --> 00:46:55,290
property

00:46:52,800 --> 00:46:56,790
now it looks like you have dynamic code

00:46:55,290 --> 00:46:58,620
right because you're manipulating a

00:46:56,790 --> 00:46:59,940
property that's change that should be

00:46:58,620 --> 00:47:02,700
changing but this property is never

00:46:59,940 --> 00:47:04,470
accessed for modification it's it's

00:47:02,700 --> 00:47:07,050
really a concern it doesn't look like a

00:47:04,470 --> 00:47:08,960
constant but that still makes a large

00:47:07,050 --> 00:47:11,790
part of the code all the same because

00:47:08,960 --> 00:47:14,640
any loops there is on this array will

00:47:11,790 --> 00:47:16,740
actually just read something that never

00:47:14,640 --> 00:47:18,660
changed so it's actually a constant and

00:47:16,740 --> 00:47:22,680
the wall of it is a constant it looks

00:47:18,660 --> 00:47:25,050
like some no macro we would do in C and

00:47:22,680 --> 00:47:26,700
we would probably make the code look

00:47:25,050 --> 00:47:28,590
very different if we understand which of

00:47:26,700 --> 00:47:32,370
those constants are really constant and

00:47:28,590 --> 00:47:34,920
then ask to look like constant anyway

00:47:32,370 --> 00:47:37,230
that's not done yet I'm coding

00:47:34,920 --> 00:47:38,460
references also that may be in house on

00:47:37,230 --> 00:47:40,230
that may be something you take from

00:47:38,460 --> 00:47:41,910
outside there are lots of people try to

00:47:40,230 --> 00:47:43,440
say okay if you want to do be a good

00:47:41,910 --> 00:47:46,410
programmer do like these look like that

00:47:43,440 --> 00:47:48,000
do like this okay and if we'd like two

00:47:46,410 --> 00:47:50,430
of them in the same room that's going to

00:47:48,000 --> 00:47:53,820
be an endless war right I'll put that in

00:47:50,430 --> 00:47:55,830
all dimensions but usually I think it's

00:47:53,820 --> 00:47:57,450
important that every team has its own

00:47:55,830 --> 00:47:59,720
list of them okay

00:47:57,450 --> 00:48:02,760
currently in execute I have around 300

00:47:59,720 --> 00:48:05,340
different analysis don't try to trust

00:48:02,760 --> 00:48:05,940
them all at the same time okay that's

00:48:05,340 --> 00:48:08,250
too much

00:48:05,940 --> 00:48:09,720
choose at least ten of them and I don't

00:48:08,250 --> 00:48:12,030
have all of them I have a to-do list of

00:48:09,720 --> 00:48:14,790
2,000 lines so I'm completely far away

00:48:12,030 --> 00:48:17,040
from from from the end so just select

00:48:14,790 --> 00:48:18,960
ten of them ten that are important that

00:48:17,040 --> 00:48:21,750
may be specific of your application or

00:48:18,960 --> 00:48:23,280
your team and the way you work you don't

00:48:21,750 --> 00:48:26,250
want to hear about Global's okay make it

00:48:23,280 --> 00:48:27,840
one rule and statically enforce that you

00:48:26,250 --> 00:48:30,510
don't need to review that yourself just

00:48:27,840 --> 00:48:32,970
run the test one line up here's did

00:48:30,510 --> 00:48:35,250
blame and we talked about it that's all

00:48:32,970 --> 00:48:41,190
you don't need to do 300 ml test at the

00:48:35,250 --> 00:48:46,350
same time so to finish please

00:48:41,190 --> 00:48:48,600
never code alone again because with this

00:48:46,350 --> 00:48:51,420
kind of tool you're actually inviting

00:48:48,600 --> 00:48:53,460
experts in your own programming ssin

00:48:51,420 --> 00:48:55,260
okay even as a side project you want to

00:48:53,460 --> 00:48:58,320
review the code and not be the only one

00:48:55,260 --> 00:49:00,480
checking it then static analyzer will

00:48:58,320 --> 00:49:02,760
give you a feedback and then you can

00:49:00,480 --> 00:49:04,680
deal with it and believe me when you

00:49:02,760 --> 00:49:05,280
write on a static analyzer yourself you

00:49:04,680 --> 00:49:07,890
learn how

00:49:05,280 --> 00:49:10,200
be humble how many times do I look at

00:49:07,890 --> 00:49:12,480
size and say oh hey this is 2p codes

00:49:10,200 --> 00:49:14,010
that should not be done like try order

00:49:12,480 --> 00:49:17,070
it would try everything that you know

00:49:14,010 --> 00:49:20,280
people try try block and the says do

00:49:17,070 --> 00:49:22,380
something catch okay do something they

00:49:20,280 --> 00:49:24,570
really want to try so you look at eyes

00:49:22,380 --> 00:49:26,400
like oh that's too it but then you check

00:49:24,570 --> 00:49:29,940
on your own code and realize I'm doing

00:49:26,400 --> 00:49:32,940
the same so let's fix that first and

00:49:29,940 --> 00:49:34,470
then we publish that so if you're

00:49:32,940 --> 00:49:35,940
working even alone or in a team that

00:49:34,470 --> 00:49:38,240
could be interesting to be not the only

00:49:35,940 --> 00:49:41,160
one you can you can Excel import

00:49:38,240 --> 00:49:42,390
experience from outside and and

00:49:41,160 --> 00:49:44,580
absolutely back when you could even

00:49:42,390 --> 00:49:47,070
without asking and even doing that you

00:49:44,580 --> 00:49:49,170
know on your own cubicle and not sharing

00:49:47,070 --> 00:49:52,520
that so if if you feel like your shame

00:49:49,170 --> 00:49:55,560
of it no one will know no one will know

00:49:52,520 --> 00:49:57,960
other thing you can prepare for the

00:49:55,560 --> 00:50:00,330
future with that okay as I mentioned for

00:49:57,960 --> 00:50:02,150
example we can prepare for PHP 72 we

00:50:00,330 --> 00:50:04,980
don't know why it goes we don't know why

00:50:02,150 --> 00:50:07,140
when but we have already a number of

00:50:04,980 --> 00:50:09,150
things that's when we can prepare now so

00:50:07,140 --> 00:50:10,260
static analysis for that is interesting

00:50:09,150 --> 00:50:14,030
you don't have to wait for the version

00:50:10,260 --> 00:50:18,330
to be ready just prepare for the future

00:50:14,030 --> 00:50:21,300
otherwise well you will learn maybe

00:50:18,330 --> 00:50:23,100
select one rule one of the numbers and

00:50:21,300 --> 00:50:26,040
numerous rules that are available six

00:50:23,100 --> 00:50:28,680
demo and when you're done then consider

00:50:26,040 --> 00:50:30,390
it's a rule a static fixed rule and then

00:50:28,680 --> 00:50:33,720
move on learn something else

00:50:30,390 --> 00:50:35,370
don't try to be don't try to learn all

00:50:33,720 --> 00:50:40,940
of them at the same time because that's

00:50:35,370 --> 00:50:40,940
not going to work and that would be

00:50:41,240 --> 00:50:44,460
[Applause]

00:50:47,690 --> 00:50:52,890
[Applause]

00:50:59,299 --> 00:51:05,569
and how often do you run do you analyze

00:51:01,969 --> 00:51:06,979
your code automating it with a commit

00:51:05,569 --> 00:51:09,289
hook or is there something you're

00:51:06,979 --> 00:51:11,749
manually doing and that's a good one I

00:51:09,289 --> 00:51:13,549
would say two different experiences for

00:51:11,749 --> 00:51:15,619
example PHP Stan is going to run on my

00:51:13,549 --> 00:51:18,499
code on a few minutes so I can do that

00:51:15,619 --> 00:51:22,189
anytime I want my own code will run in

00:51:18,499 --> 00:51:23,689
twenty minutes on my on my world code so

00:51:22,189 --> 00:51:26,059
I don't do that all the time

00:51:23,689 --> 00:51:28,459
okay the other thing I know is that even

00:51:26,059 --> 00:51:31,039
with a long wrapper a report and a

00:51:28,459 --> 00:51:34,849
number of break-ins broken down section

00:51:31,039 --> 00:51:38,059
I can usually keep the report viable for

00:51:34,849 --> 00:51:39,859
one week meaning I run it on Monday by

00:51:38,059 --> 00:51:42,109
Friday I will end up with the number of

00:51:39,859 --> 00:51:44,119
nodes problems with lines but the

00:51:42,109 --> 00:51:46,579
insight the fact that I should take a

00:51:44,119 --> 00:51:49,329
look at that part of the code is still

00:51:46,579 --> 00:51:52,519
valid so I don't need more than that

00:51:49,329 --> 00:51:54,649
okay so the different tools will be

00:51:52,519 --> 00:51:56,269
available for a good hook if you want to

00:51:54,649 --> 00:51:57,919
run something very fast like HP Linz

00:51:56,269 --> 00:52:00,349
yeah please do that in the get hooks

00:51:57,919 --> 00:52:02,089
that's that's a good thing there are

00:52:00,349 --> 00:52:04,249
other tool that will not fit because it

00:52:02,089 --> 00:52:06,619
means that you have to understand the

00:52:04,249 --> 00:52:09,679
code a lot more it will run for much

00:52:06,619 --> 00:52:11,779
longer time so I would say there are

00:52:09,679 --> 00:52:15,069
tools yeah depending on what you want to

00:52:11,779 --> 00:52:15,069
find there are different tools

00:52:19,540 --> 00:52:29,710
any more elves okay it gives you social

00:52:25,460 --> 00:52:29,710

YouTube URL: https://www.youtube.com/watch?v=TelqURPdQmQ


