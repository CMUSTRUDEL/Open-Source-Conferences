Title: PHP UK Conference 2017 - Terrence Ryan - Serving 30,000,000 Requests an Hour in the Cloud
Publication date: 2017-04-03
Playlist: PHP UK Conference 2017
Description: 
	You've written an application and now the worst thing that can happen to you has come about - People are using it! You now have load spikes to deal with. You can scale up to deal with the excess traffic, but what do you do when your load is variable? How do you do that, and stay on budget? This session is a case study on getting an App Engine app to scale to serve 30,000,000 requests an hour. It will take you through the architecture, the code changes and the technology trade offs to get to that level of traffic. And how to make sure your app scales down so running infrastructure to deal with potential traffic doesn't drown you.
Captions: 
	00:00:04,190 --> 00:00:08,420
all right so this is a 30 million

00:00:06,769 --> 00:00:09,889
requests in an hour in the cloud my name

00:00:08,420 --> 00:00:15,769
is Terry Ryan I'm a developer advocate

00:00:09,889 --> 00:00:18,320
for Google this talk is pretty much a

00:00:15,769 --> 00:00:20,840
case study in me doing incredibly dumb

00:00:18,320 --> 00:00:22,850
things and learning from them which is

00:00:20,840 --> 00:00:26,390
the you know the best thing you can do

00:00:22,850 --> 00:00:30,609
when you do really dumb things and it is

00:00:26,390 --> 00:00:32,989
I also warned very Google cloud centric

00:00:30,609 --> 00:00:36,739
now the lessons that I learned from it I

00:00:32,989 --> 00:00:38,690
think can be brought brought outside of

00:00:36,739 --> 00:00:41,600
that environment but just I want to make

00:00:38,690 --> 00:00:44,780
it very up clear you know a very upfront

00:00:41,600 --> 00:00:47,989
that I will be talking a lot about the

00:00:44,780 --> 00:00:49,489
platform on which I work so that's me

00:00:47,989 --> 00:00:50,899
I'm gonna try to do this with the lights

00:00:49,489 --> 00:00:53,570
but I want to know who you guys are so

00:00:50,899 --> 00:00:56,120
you guys are mostly I would assume PHP

00:00:53,570 --> 00:00:58,039
developers so that we can get that out

00:00:56,120 --> 00:00:59,840
of the way anybody here not a developer

00:00:58,039 --> 00:01:00,789
anybody here like a full time systems

00:00:59,840 --> 00:01:03,859
person

00:01:00,789 --> 00:01:05,810
no okay anybody here kind of plays a

00:01:03,859 --> 00:01:07,700
DevOps role like you do both the

00:01:05,810 --> 00:01:09,319
system's all right do you do it cuz you

00:01:07,700 --> 00:01:12,440
love DevOps did you do it cuz your

00:01:09,319 --> 00:01:16,729
company hates you I'm just and won't pay

00:01:12,440 --> 00:01:18,649
enough people all right see how many

00:01:16,729 --> 00:01:20,869
people here have played around ever

00:01:18,649 --> 00:01:23,149
touched App Engine or any part of Google

00:01:20,869 --> 00:01:26,300
Cloud let's go App Engine and then any

00:01:23,149 --> 00:01:29,240
part of Google cloud platform okay all

00:01:26,300 --> 00:01:30,920
right good so I'll be explaining some

00:01:29,240 --> 00:01:35,319
things out anybody else here using

00:01:30,920 --> 00:01:37,789
firebase all right cool all right so I

00:01:35,319 --> 00:01:39,470
want to explain those pieces a little

00:01:37,789 --> 00:01:41,479
bit more in depth all right so let me

00:01:39,470 --> 00:01:45,380
introduce this by talking about what I

00:01:41,479 --> 00:01:47,060
was trying to do I had joined I've

00:01:45,380 --> 00:01:51,140
joined Google about two years ago and

00:01:47,060 --> 00:01:52,429
when I started I started playing around

00:01:51,140 --> 00:01:53,869
with our technology and one of the

00:01:52,429 --> 00:01:55,849
pieces is think about App Engine and

00:01:53,869 --> 00:01:58,640
trying to figure out like why use this

00:01:55,849 --> 00:01:59,959
vs. VMs because App Engine is what we

00:01:58,640 --> 00:02:02,720
call platform as a service to just take

00:01:59,959 --> 00:02:04,369
code and put it up in it runs so why

00:02:02,720 --> 00:02:07,160
would I use this versus a VM and like

00:02:04,369 --> 00:02:10,789
the answer is well it scales infinitely

00:02:07,160 --> 00:02:12,170
and immediately really that it sounds

00:02:10,789 --> 00:02:12,890
like marketing talk to me what is what

00:02:12,170 --> 00:02:15,560
does it really do

00:02:12,890 --> 00:02:16,840
no no I'd like it scales you know really

00:02:15,560 --> 00:02:19,360
really quickly and

00:02:16,840 --> 00:02:21,129
it does it as much as you need so I

00:02:19,360 --> 00:02:23,440
started building a demo to like test

00:02:21,129 --> 00:02:26,200
this out like well let me see how fast

00:02:23,440 --> 00:02:27,910
does it actually go so I'm gonna skip

00:02:26,200 --> 00:02:32,680
the visual and actually just run the

00:02:27,910 --> 00:02:34,480
demo so here is the the demo this then

00:02:32,680 --> 00:02:36,879
this is it working rightly this is me

00:02:34,480 --> 00:02:39,549
after I fixed it after I broke stuff but

00:02:36,879 --> 00:02:41,500
basically don't hit any of those URLs

00:02:39,549 --> 00:02:43,360
yet because the whole point of this is

00:02:41,500 --> 00:02:45,360
that I can do this without pre-warming

00:02:43,360 --> 00:02:48,160
it if you hit the URL it'll pre-warm it

00:02:45,360 --> 00:02:53,470
but basically what I'm gonna do is I'm

00:02:48,160 --> 00:02:55,630
gonna run a command and I'm using make

00:02:53,470 --> 00:02:57,190
files to do this because me typing all

00:02:55,630 --> 00:03:02,470
this would be crazy and what I'm gonna

00:02:57,190 --> 00:03:06,489
do is I'm gonna launch was 20 VMs or 50

00:03:02,470 --> 00:03:10,780
via 50 VMs so 50 of our VM tools

00:03:06,489 --> 00:03:13,329
technology so we like to say they spin

00:03:10,780 --> 00:03:14,110
up in tens of seconds meaning when

00:03:13,329 --> 00:03:15,579
you're in your hotel room

00:03:14,110 --> 00:03:18,010
testing to make sure everything works it

00:03:15,579 --> 00:03:20,290
spins up in ten seconds if you're in

00:03:18,010 --> 00:03:21,819
front of people it spins up in 40 and I

00:03:20,290 --> 00:03:25,359
don't know why I don't know how it knows

00:03:21,819 --> 00:03:28,030
but it does so I'm spinning up some VMs

00:03:25,359 --> 00:03:30,040
and they're gonna pop on the screen soon

00:03:28,030 --> 00:03:32,170
I basically just ran like a command to

00:03:30,040 --> 00:03:34,840
say start these VMs that already exist

00:03:32,170 --> 00:03:36,970
what's all the VMS is apache bench so

00:03:34,840 --> 00:03:38,980
apache bench anybody here use apache

00:03:36,970 --> 00:03:40,480
bench you basically use it for load

00:03:38,980 --> 00:03:43,359
testing you can send a lot of load at a

00:03:40,480 --> 00:03:45,849
particular URL and you can see how it's

00:03:43,359 --> 00:03:47,859
performing and then kind of see all that

00:03:45,849 --> 00:03:49,269
information so all these VMs that are

00:03:47,859 --> 00:03:52,180
gonna launch in a second you'll see them

00:03:49,269 --> 00:03:53,440
start popping up on the screen have

00:03:52,180 --> 00:03:55,209
apache been chewin on what i'm gonna do

00:03:53,440 --> 00:03:57,209
is use the patch bench to send a whole

00:03:55,209 --> 00:04:00,099
bunch of load at App Engine and

00:03:57,209 --> 00:04:01,450
basically I'll see how fast App Engine

00:04:00,099 --> 00:04:04,150
spins up and we're starting to see our

00:04:01,450 --> 00:04:05,530
VMs are starting to launch up so when

00:04:04,150 --> 00:04:07,870
they launch they send a little note to

00:04:05,530 --> 00:04:12,880
this app that that they're up and

00:04:07,870 --> 00:04:18,609
running and we see we've got one one

00:04:12,880 --> 00:04:23,800
more come on last one I said 50 which

00:04:18,609 --> 00:04:25,330
one is we waiting on it knows no so I'll

00:04:23,800 --> 00:04:30,300
just refresh which one is we're waiting

00:04:25,330 --> 00:04:30,300
on we are waiting on 40

00:04:31,170 --> 00:04:35,320
yeah I don't know which one I'm writing

00:04:33,420 --> 00:04:39,070
well that's embarrassing

00:04:35,320 --> 00:04:42,100
oh we're writing on 44 only just make

00:04:39,070 --> 00:04:46,230
sure nothing aired yeah everything

00:04:42,100 --> 00:04:58,360
should be running all right

00:04:46,230 --> 00:05:00,220
come on oh there we go all right there

00:04:58,360 --> 00:05:02,380
we go alright there we go 44 load all

00:05:00,220 --> 00:05:04,450
right so now I have 50 VMs so I'm going

00:05:02,380 --> 00:05:08,830
to do is use them to send a whole bunch

00:05:04,450 --> 00:05:10,810
of load at App Engine and we saw how

00:05:08,830 --> 00:05:13,470
fast the VMS loaded up there was

00:05:10,810 --> 00:05:15,760
reasonably fast first spinning up a VM

00:05:13,470 --> 00:05:17,410
but the claim with App Engine is

00:05:15,760 --> 00:05:20,650
immediate right so what I'm going to do

00:05:17,410 --> 00:05:26,590
is I'm going to type a command here make

00:05:20,650 --> 00:05:29,050
load C equals 20 and equals 200 so what

00:05:26,590 --> 00:05:32,260
is this so what I'm saying is Apache

00:05:29,050 --> 00:05:34,000
bench takes two criteria how many

00:05:32,260 --> 00:05:36,010
concurrent connections can it run in

00:05:34,000 --> 00:05:38,650
which case each node is going to run 20

00:05:36,010 --> 00:05:42,760
concurrent connections and I want them

00:05:38,650 --> 00:05:47,290
to throw 200 requests at App Engine so

00:05:42,760 --> 00:05:49,120
all totaled it's 10,000 requests and we

00:05:47,290 --> 00:05:50,410
should see how fast it spins up now

00:05:49,120 --> 00:05:52,300
takes a little bit of time for the

00:05:50,410 --> 00:05:54,610
commands to get to compute engine but

00:05:52,300 --> 00:05:55,780
when they start when the VM start firing

00:05:54,610 --> 00:05:57,850
load at App Engine and they'll start

00:05:55,780 --> 00:06:00,250
bouncing blue and then we'll see just

00:05:57,850 --> 00:06:01,540
how fast App Engine is loading up the

00:06:00,250 --> 00:06:03,910
meantime I'm going to show you this page

00:06:01,540 --> 00:06:06,880
right here where there is nothing

00:06:03,910 --> 00:06:09,220
there's nothing in this storage area so

00:06:06,880 --> 00:06:12,040
why all right and now we see that load

00:06:09,220 --> 00:06:13,390
is coming so we see how quick App Engine

00:06:12,040 --> 00:06:15,520
is able to respond to that load right

00:06:13,390 --> 00:06:18,340
it's spinning up instances and basically

00:06:15,520 --> 00:06:20,440
once an instance is handling more than

00:06:18,340 --> 00:06:22,510
it can handle like it's it's full it

00:06:20,440 --> 00:06:23,200
spins up another load to hand to spread

00:06:22,510 --> 00:06:26,140
out the load

00:06:23,200 --> 00:06:27,640
among other App Engine instances so you

00:06:26,140 --> 00:06:30,010
see we're spinning up and we're headed

00:06:27,640 --> 00:06:33,160
towards 10,000 nodes are starting to

00:06:30,010 --> 00:06:37,060
drop off and we should hit 10,000 and

00:06:33,160 --> 00:06:39,520
stop no of course not because why would

00:06:37,060 --> 00:06:41,169
you work live demos like with cloud is

00:06:39,520 --> 00:06:42,940
like acting with children or animals

00:06:41,169 --> 00:06:43,930
like you never you

00:06:42,940 --> 00:06:44,950
never know what's gonna happen so what

00:06:43,930 --> 00:06:49,300
I'm gonna do is I'm gonna run this one

00:06:44,950 --> 00:06:51,970
more time just just for my own clarity

00:06:49,300 --> 00:06:54,910
here and what are these other things so

00:06:51,970 --> 00:06:57,190
these other things are we're doing two

00:06:54,910 --> 00:06:59,320
things here we're writing App Engine is

00:06:57,190 --> 00:07:01,660
writing to firebase to tell it that it

00:06:59,320 --> 00:07:03,490
it got a request and it's also writing

00:07:01,660 --> 00:07:06,730
to storage to write file so the file

00:07:03,490 --> 00:07:07,930
storage takes a little bit longer and

00:07:06,730 --> 00:07:08,950
that's why I showed you that blank page

00:07:07,930 --> 00:07:11,050
but there where there's nothing because

00:07:08,950 --> 00:07:12,550
I wanted to show you that I hadn't I

00:07:11,050 --> 00:07:16,210
hadn't spun up any of this before

00:07:12,550 --> 00:07:19,270
obviously because this it's it's acting

00:07:16,210 --> 00:07:20,380
flaky in front of you but basically

00:07:19,270 --> 00:07:23,650
we're doing two things writing a

00:07:20,380 --> 00:07:25,750
firebase and right into storage so that

00:07:23,650 --> 00:07:27,970
I have a record of every single request

00:07:25,750 --> 00:07:29,770
that's come in so we're gonna go to

00:07:27,970 --> 00:07:34,420
10,000 this time it's gonna hit 10,000

00:07:29,770 --> 00:07:37,930
stop perfectly oh come on

00:07:34,420 --> 00:07:40,470
sort of son of a right all right

00:07:37,930 --> 00:07:46,870
oh there we go all right whoo all right

00:07:40,470 --> 00:07:48,580
so god I've gone crazy all right so so

00:07:46,870 --> 00:07:50,590
just to show nothing up my sleeve in

00:07:48,580 --> 00:07:52,390
addition to it writing to firebase to

00:07:50,590 --> 00:07:55,150
tell you that I had those requests I

00:07:52,390 --> 00:07:57,400
also wrote files so each if i refresh

00:07:55,150 --> 00:08:01,600
here we'll see that I have all of these

00:07:57,400 --> 00:08:03,640
folders I'm sorry the the you're not

00:08:01,600 --> 00:08:05,980
missing much they're just really long

00:08:03,640 --> 00:08:07,450
hex strengths but basically each one of

00:08:05,980 --> 00:08:09,760
those folders is an instance of app

00:08:07,450 --> 00:08:11,980
engine and each one of these files is an

00:08:09,760 --> 00:08:14,020
individual request so I have an actual

00:08:11,980 --> 00:08:15,430
file record of every single request that

00:08:14,020 --> 00:08:18,310
came through and we can count off but it

00:08:15,430 --> 00:08:19,720
would be ten thousand plus nine hundred

00:08:18,310 --> 00:08:22,180
nine thousand nine or whatever whatever

00:08:19,720 --> 00:08:24,100
we we didn't go to in the first one all

00:08:22,180 --> 00:08:25,690
right so that's the demo and I think it

00:08:24,100 --> 00:08:27,160
does a good job of showing like Wow App

00:08:25,690 --> 00:08:28,570
Engine really like as soon as request

00:08:27,160 --> 00:08:33,700
comes in it starts firing up instances

00:08:28,570 --> 00:08:35,530
and it's able to it's able to do that so

00:08:33,700 --> 00:08:38,110
let me explain how this was constructed

00:08:35,530 --> 00:08:40,210
and then tell you where I went wrong the

00:08:38,110 --> 00:08:41,860
first time I ran this when I was

00:08:40,210 --> 00:08:43,510
building us so App Engine does two

00:08:41,860 --> 00:08:45,430
things it writes to firebase so that we

00:08:43,510 --> 00:08:48,430
can see the requests come in and it also

00:08:45,430 --> 00:08:50,770
writes the storage so that it we we have

00:08:48,430 --> 00:08:53,020
a artifact of the request other than

00:08:50,770 --> 00:08:56,080
just trusting firebase that we actually

00:08:53,020 --> 00:08:56,830
did write a regular request and so App

00:08:56,080 --> 00:08:57,970
Engine is doing

00:08:56,830 --> 00:08:59,770
those two things and it also runs the

00:08:57,970 --> 00:09:01,750
visualizer that's just HTML Javascript

00:08:59,770 --> 00:09:04,510
CSS it's not really doing a lot of work

00:09:01,750 --> 00:09:06,220
it's just statically serving compute

00:09:04,510 --> 00:09:08,320
engine is running the load generator so

00:09:06,220 --> 00:09:10,150
Apache bench and remote command

00:09:08,320 --> 00:09:14,110
execution so that I can do it all from

00:09:10,150 --> 00:09:15,670
one terminal command firebase is

00:09:14,110 --> 00:09:19,060
handling the real-time display and it's

00:09:15,670 --> 00:09:20,800
also the database the the repository of

00:09:19,060 --> 00:09:25,990
all the data of all the requests that

00:09:20,800 --> 00:09:27,700
come in cloud storage is acting as a

00:09:25,990 --> 00:09:30,840
proof of activity right so it's backing

00:09:27,700 --> 00:09:32,740
up firebase I have I have two ends of

00:09:30,840 --> 00:09:35,110
determining whether or not a request was

00:09:32,740 --> 00:09:36,970
handled and one of the other things it

00:09:35,110 --> 00:09:39,130
does is it does optic notifications so

00:09:36,970 --> 00:09:43,210
when a file is written it fires off a

00:09:39,130 --> 00:09:44,950
request to say to to ultimately to

00:09:43,210 --> 00:09:47,260
firebase to show that a file came in and

00:09:44,950 --> 00:09:49,560
that's what if we look at the visualizer

00:09:47,260 --> 00:09:50,920
that's what this stuff is all down here

00:09:49,560 --> 00:09:53,230
all right

00:09:50,920 --> 00:09:55,060
that's really important that's gonna

00:09:53,230 --> 00:09:58,240
play but it's gonna play a big role so

00:09:55,060 --> 00:09:59,380
object notification we got a new file so

00:09:58,240 --> 00:10:02,010
that app engine takes those

00:09:59,380 --> 00:10:04,630
notifications from cloud storage and

00:10:02,010 --> 00:10:06,130
there's a separate app that handles

00:10:04,630 --> 00:10:08,910
running them to firebase so they can see

00:10:06,130 --> 00:10:11,230
them alright so this is my plans

00:10:08,910 --> 00:10:15,040
architecture right we have the the main

00:10:11,230 --> 00:10:17,080
app load demo app spot calm stuff would

00:10:15,040 --> 00:10:19,150
come in App Engine would write to

00:10:17,080 --> 00:10:22,540
firebase and would write to cloud

00:10:19,150 --> 00:10:25,270
storage and then cloud storage writes to

00:10:22,540 --> 00:10:27,190
a second app slash storage which then

00:10:25,270 --> 00:10:29,140
writes to firebase and then all of this

00:10:27,190 --> 00:10:31,660
gets passed back and forth to the

00:10:29,140 --> 00:10:33,400
visualizer in real time now when I was

00:10:31,660 --> 00:10:36,070
writing this demo and working on it and

00:10:33,400 --> 00:10:39,100
struggling with it I made a mistake and

00:10:36,070 --> 00:10:42,970
I forgot this step and I accidentally

00:10:39,100 --> 00:10:44,590
had this happen so we follow the logic a

00:10:42,970 --> 00:10:46,060
request would come in would write to

00:10:44,590 --> 00:10:47,890
cloud storage cloud storage or send a

00:10:46,060 --> 00:10:51,100
notification back to the original URL

00:10:47,890 --> 00:10:53,170
for the app and then we get this going

00:10:51,100 --> 00:10:56,290
right so every request spawned another

00:10:53,170 --> 00:10:57,520
request and so it started going like

00:10:56,290 --> 00:10:59,650
wait for a while and I couldn't figure

00:10:57,520 --> 00:11:01,270
out like why is the why is the counter

00:10:59,650 --> 00:11:05,260
still going up it doesn't make any sense

00:11:01,270 --> 00:11:06,190
like I'm the the load is done so the

00:11:05,260 --> 00:11:08,200
requests are kind of running out of

00:11:06,190 --> 00:11:09,760
control so it's like okay well like when

00:11:08,200 --> 00:11:10,230
in doubt just delete everything and

00:11:09,760 --> 00:11:12,270
start over

00:11:10,230 --> 00:11:15,240
but when you delete from cloud storage

00:11:12,270 --> 00:11:19,050
it also sends an object notification so

00:11:15,240 --> 00:11:20,910
I deleted which created requests to send

00:11:19,050 --> 00:11:23,760
which created a file which was then

00:11:20,910 --> 00:11:25,500
eligible for deletion which then got

00:11:23,760 --> 00:11:27,360
deleted and so I created this a runaway

00:11:25,500 --> 00:11:29,400
positive feedback loop and I had no idea

00:11:27,360 --> 00:11:32,520
what the hell was going on and it wasn't

00:11:29,400 --> 00:11:32,940
until my quota kicked in and I work for

00:11:32,520 --> 00:11:36,110
Google

00:11:32,940 --> 00:11:38,940
so my quota on Google is kind of high

00:11:36,110 --> 00:11:41,190
when the dust settled I had blown

00:11:38,940 --> 00:11:44,960
through my at that point I believe it

00:11:41,190 --> 00:11:47,760
was a hundred dollar quota in an hour on

00:11:44,960 --> 00:11:49,440
all the stuff and when it was all done I

00:11:47,760 --> 00:11:53,100
counted up all the files we created and

00:11:49,440 --> 00:11:56,360
it was 30 million files now keep in mind

00:11:53,100 --> 00:11:59,670
that's 30 million successful requests

00:11:56,360 --> 00:12:02,550
there are probably a lot more that hit

00:11:59,670 --> 00:12:04,560
App Engine but that butt bomb for

00:12:02,550 --> 00:12:06,870
sending the firebase or sending to cloud

00:12:04,560 --> 00:12:10,680
storage but I had successfully served up

00:12:06,870 --> 00:12:12,810
30 million requests in an hour for kind

00:12:10,680 --> 00:12:14,520
of scope purposes what do you call a

00:12:12,810 --> 00:12:16,160
website that gets 30 million requests in

00:12:14,520 --> 00:12:20,460
an hour

00:12:16,160 --> 00:12:24,570
Wikipedia so I had sent a Wikipedia's

00:12:20,460 --> 00:12:26,880
worth of traffic to my app in an hour

00:12:24,570 --> 00:12:28,770
and when this all sort of like when I

00:12:26,880 --> 00:12:31,380
saw this all sort of the dust settled

00:12:28,770 --> 00:12:32,820
from this I was like oh god it was new

00:12:31,380 --> 00:12:35,610
to Google someone's gonna come looking

00:12:32,820 --> 00:12:38,540
for me like someone and some of my

00:12:35,610 --> 00:12:41,400
co-workers have this bat we have this on

00:12:38,540 --> 00:12:42,780
for our profiles inside when you're

00:12:41,400 --> 00:12:44,970
trying to look up other people that work

00:12:42,780 --> 00:12:46,260
at Google we have little badges that say

00:12:44,970 --> 00:12:48,990
you know they've been here five years

00:12:46,260 --> 00:12:50,640
they've they were here when this

00:12:48,990 --> 00:12:53,850
happened those sorts of things and one

00:12:50,640 --> 00:12:55,440
of them is paged by a sorry I sorry

00:12:53,850 --> 00:12:57,780
you're the people that keep Google

00:12:55,440 --> 00:13:01,320
running there they're the systems there

00:12:57,780 --> 00:13:03,540
they're the operators at what you call

00:13:01,320 --> 00:13:05,880
it most other places and if you get a

00:13:03,540 --> 00:13:09,090
page BIOS or a badge it's kind of a

00:13:05,880 --> 00:13:10,350
double-edged sword right like you didn't

00:13:09,090 --> 00:13:12,750
you did something that threatened Google

00:13:10,350 --> 00:13:14,280
and like that's bad but you also did

00:13:12,750 --> 00:13:16,710
something Google that's pretty cool like

00:13:14,280 --> 00:13:18,540
that's hard to do so I was like oh I'll

00:13:16,710 --> 00:13:20,730
get the patch and then like nobody ever

00:13:18,540 --> 00:13:24,240
found me like nobody ever like no one

00:13:20,730 --> 00:13:28,050
cared so at this point like

00:13:24,240 --> 00:13:30,680
one cares well then like I should try to

00:13:28,050 --> 00:13:33,420
do that and like actually mean it so I

00:13:30,680 --> 00:13:35,100
then so what I'm going to talk through

00:13:33,420 --> 00:13:36,690
now is taking this demo from I

00:13:35,100 --> 00:13:38,630
accidentally sent thirty million

00:13:36,690 --> 00:13:41,640
requests to how could they make this app

00:13:38,630 --> 00:13:43,620
elegantly and efficiently handle thirty

00:13:41,640 --> 00:13:46,320
million requests an hour on a regular

00:13:43,620 --> 00:13:48,000
basis so that's when I go that's what I

00:13:46,320 --> 00:13:50,250
want to take you through and talk about

00:13:48,000 --> 00:13:52,050
why this app falls down when we start

00:13:50,250 --> 00:13:54,180
getting the high levels of traffic and

00:13:52,050 --> 00:13:55,800
where we can fix it and how we

00:13:54,180 --> 00:14:01,050
ultimately got it to be able to handle

00:13:55,800 --> 00:14:04,470
that so wrapping up so we do the math on

00:14:01,050 --> 00:14:05,850
thirty million requests per hour divided

00:14:04,470 --> 00:14:08,970
by sixty divided over sixty and we get

00:14:05,850 --> 00:14:11,760
eighty three hundred QPS queries per

00:14:08,970 --> 00:14:15,330
second QP s is a is a metric we use

00:14:11,760 --> 00:14:18,540
pretty often at Google it's kind of

00:14:15,330 --> 00:14:23,430
getting used more and more often but QPS

00:14:18,540 --> 00:14:26,010
is sort of a like it's the the speed you

00:14:23,430 --> 00:14:29,190
know the this the I can't think of the

00:14:26,010 --> 00:14:31,440
word but it is the metric we use to sort

00:14:29,190 --> 00:14:33,570
of how how how how trafficked is

00:14:31,440 --> 00:14:36,930
something so to put this in perspective

00:14:33,570 --> 00:14:38,959
we say publicly that we handle over two

00:14:36,930 --> 00:14:41,790
and a half billion searches a month

00:14:38,959 --> 00:14:44,820
right no a day it's one half billion

00:14:41,790 --> 00:14:48,480
searches a day that's much less

00:14:44,820 --> 00:14:50,730
impressive it's per month so you / 24.60

00:14:48,480 --> 00:14:53,579
we get Google search on Google we

00:14:50,730 --> 00:14:57,750
publicly state I think this is low for

00:14:53,579 --> 00:15:01,980
now I think this is old numbers 29,000

00:14:57,750 --> 00:15:05,459
queries per second okay App Engine

00:15:01,980 --> 00:15:08,610
itself the the whole product we say

00:15:05,459 --> 00:15:11,270
handles a hundred billion requests per

00:15:08,610 --> 00:15:14,130
month when you do the math on that

00:15:11,270 --> 00:15:17,640
approximately 30 days per month but at

00:15:14,130 --> 00:15:19,410
24 or 60 60 you get 38,000 QPS now it

00:15:17,640 --> 00:15:23,310
becomes really clear why nobody came and

00:15:19,410 --> 00:15:26,760
like and yelled at me right like 8080

00:15:23,310 --> 00:15:29,100
500 QPS 8300 QPS the grand scheme of

00:15:26,760 --> 00:15:32,250
things is not you know it's less than

00:15:29,100 --> 00:15:34,380
it's just just over a quarter of this I

00:15:32,250 --> 00:15:36,449
know how we spec things out and how much

00:15:34,380 --> 00:15:38,040
how we handle capacity and this was

00:15:36,449 --> 00:15:40,440
probably not

00:15:38,040 --> 00:15:42,870
anything that was threatening App Engine

00:15:40,440 --> 00:15:44,610
as a whole if it had continued for a

00:15:42,870 --> 00:15:46,110
long period of time I probably would

00:15:44,610 --> 00:15:48,300
have gotten talked to but you know a

00:15:46,110 --> 00:15:51,329
spike like that doesn't really register

00:15:48,300 --> 00:15:53,100
okay all right so it's pretty clear that

00:15:51,329 --> 00:15:54,839
I can do this and no one's gonna come

00:15:53,100 --> 00:15:57,060
looking for me and so let's kind of

00:15:54,839 --> 00:16:01,110
pursue this let's ramp the demo up to

00:15:57,060 --> 00:16:07,680
8300 QPS so let's do that and let's see

00:16:01,110 --> 00:16:12,089
it break intentionally so make load 8300

00:16:07,680 --> 00:16:13,880
QPS I know when you have 50 servers 8500

00:16:12,089 --> 00:16:16,350
QPS which is just a little bit higher is

00:16:13,880 --> 00:16:21,089
170 I'm sorry this is hard to see I'll

00:16:16,350 --> 00:16:23,550
bump it up a little bit and if I did 200

00:16:21,089 --> 00:16:27,420
it would just flash so I need a higher

00:16:23,550 --> 00:16:29,790
number here so I'm gonna go to a

00:16:27,420 --> 00:16:35,579
thousand per so now we should have

00:16:29,790 --> 00:16:36,649
50,000 requests at 8500 QPS so I'm gonna

00:16:35,579 --> 00:16:40,199
warn you right now it's going to bomb

00:16:36,649 --> 00:16:42,510
it's gonna bomb in one of two ways and

00:16:40,199 --> 00:16:46,769
so let's see which way it bombs let me

00:16:42,510 --> 00:16:47,880
reset this so we can see it bombs in one

00:16:46,769 --> 00:16:51,750
of two ways either it's gonna go high or

00:16:47,880 --> 00:16:54,240
go to go low the low is probably what's

00:16:51,750 --> 00:16:57,750
going to happen as I hit certain limits

00:16:54,240 --> 00:16:59,550
in in quotas it's going to just stop

00:16:57,750 --> 00:17:00,630
sending requests and so requests are

00:16:59,550 --> 00:17:04,559
gonna fail you're not even see that

00:17:00,630 --> 00:17:06,959
under rare circumstances it goes over

00:17:04,559 --> 00:17:09,720
and the reason why it goes over is that

00:17:06,959 --> 00:17:12,360
to deal with some of those failure

00:17:09,720 --> 00:17:13,919
requests I have a well if it failed just

00:17:12,360 --> 00:17:17,579
try it again

00:17:13,919 --> 00:17:19,589
and that will sometimes the failure the

00:17:17,579 --> 00:17:22,770
failure was written even though it was

00:17:19,589 --> 00:17:25,230
successful and so we get double double

00:17:22,770 --> 00:17:28,890
hits that's most likely not gonna happen

00:17:25,230 --> 00:17:30,419
it's gonna go I'm gonna I'm gonna try to

00:17:28,890 --> 00:17:35,340
get backs on my credibility here and say

00:17:30,419 --> 00:17:39,090
it's gonna go to around 27,000 and just

00:17:35,340 --> 00:17:43,470
bomb just just die so let me let me get

00:17:39,090 --> 00:17:46,130
a drink and stall while while we're

00:17:43,470 --> 00:17:46,130
waiting to get there

00:17:48,030 --> 00:17:51,240
all right

00:17:54,260 --> 00:18:00,270
so somewhere somewhere somewhere between

00:17:57,780 --> 00:18:02,970
25 and 30 is I think where it's gonna

00:18:00,270 --> 00:18:04,290
bomb but what's cool is you can see App

00:18:02,970 --> 00:18:07,050
Engine is just rolling through these

00:18:04,290 --> 00:18:10,230
requests it's it's handling them until

00:18:07,050 --> 00:18:12,660
it breaks let's say and all of our

00:18:10,230 --> 00:18:15,470
instances are are handling more than a

00:18:12,660 --> 00:18:20,940
hundred requests at a time is doing well

00:18:15,470 --> 00:18:23,280
let's see when does it start dying Wow

00:18:20,940 --> 00:18:25,020
and you want it to break it doesn't

00:18:23,280 --> 00:18:26,100
right it just keeps going all right

00:18:25,020 --> 00:18:29,910
we're getting we're getting to where I

00:18:26,100 --> 00:18:31,740
think it's gonna go all right well wait

00:18:29,910 --> 00:18:37,880
for this any questions about anything

00:18:31,740 --> 00:18:40,920
I've said so far if you've got what's it

00:18:37,880 --> 00:18:42,600
pricing I will talk about I'll talk

00:18:40,920 --> 00:18:44,340
about pricing a little bit at the end I

00:18:42,600 --> 00:18:46,500
don't like to talk about price because

00:18:44,340 --> 00:18:48,480
I'm a like I'm not a sales guy but I

00:18:46,500 --> 00:18:52,230
will talk a little bit about how much it

00:18:48,480 --> 00:18:54,150
costs to run this oh come on

00:18:52,230 --> 00:19:06,960
so now I'm a liar right it's going to

00:18:54,150 --> 00:19:12,110
thirty okay come on all right so yes

00:19:06,960 --> 00:19:14,490
like acting with children or animals so

00:19:12,110 --> 00:19:16,530
I'm going to check back on this in a

00:19:14,490 --> 00:19:17,820
minute when I start talking about some

00:19:16,530 --> 00:19:24,000
of the other things I was going to talk

00:19:17,820 --> 00:19:28,070
about all right so we will eventually we

00:19:24,000 --> 00:19:28,070
just see if it's bumped out there no no

00:19:28,790 --> 00:19:35,070
yep engine why do you why do you do this

00:19:32,580 --> 00:19:36,240
to me all right we see the the compute

00:19:35,070 --> 00:19:39,179
engine nodes are starting to drop off

00:19:36,240 --> 00:19:42,380
right there Erica RI all right so maybe

00:19:39,179 --> 00:19:42,380
I'll hit 40,000

00:19:45,210 --> 00:19:49,649
there we go okay all right good so

00:19:47,850 --> 00:19:52,350
they're starting to drop and they're

00:19:49,649 --> 00:19:54,200
dropping they are dropping much shy of

00:19:52,350 --> 00:19:56,820
the target and you okay good

00:19:54,200 --> 00:19:58,649
sorry like it would go all the way and

00:19:56,820 --> 00:20:02,179
then I'd be there's one guy still

00:19:58,649 --> 00:20:06,149
running but we're at 36,000 requests so

00:20:02,179 --> 00:20:08,580
something has changed and it's better

00:20:06,149 --> 00:20:11,460
but it's still not 50,000 which is where

00:20:08,580 --> 00:20:13,620
we were expecting to get all right that

00:20:11,460 --> 00:20:16,890
one that one guy isn't gonna isn't gonna

00:20:13,620 --> 00:20:20,279
finish so if we look at our logs we'll

00:20:16,890 --> 00:20:22,740
start to see these errors in my internet

00:20:20,279 --> 00:20:24,230
crests these are the this is the console

00:20:22,740 --> 00:20:27,539
where you look at App Engine logs

00:20:24,230 --> 00:20:30,750
actually all all Google Cloud logs go

00:20:27,539 --> 00:20:32,549
through one central log thing and we'll

00:20:30,750 --> 00:20:35,130
see here repeatedly called URL fetch

00:20:32,549 --> 00:20:36,570
failed called a URL fetch failed and

00:20:35,130 --> 00:20:37,200
that clearly is the source of our

00:20:36,570 --> 00:20:42,179
problem

00:20:37,200 --> 00:20:45,510
what is URL fetch so App Engine because

00:20:42,179 --> 00:20:48,690
of its architecture it's not quite it is

00:20:45,510 --> 00:20:50,250
it is container like under the covers

00:20:48,690 --> 00:20:53,210
but you don't you know it's not docker

00:20:50,250 --> 00:20:56,640
like don't like don't think that at all

00:20:53,210 --> 00:20:58,620
it is it is like containers and so it's

00:20:56,640 --> 00:21:01,370
networking gets kind of complex so we

00:20:58,620 --> 00:21:04,770
actually have a service that handles

00:21:01,370 --> 00:21:06,270
delivering URL calls between App Engine

00:21:04,770 --> 00:21:08,460
and any external resource and it's

00:21:06,270 --> 00:21:10,710
called URL fetch and most your service

00:21:08,460 --> 00:21:14,270
calls are going to go through it if we

00:21:10,710 --> 00:21:14,270
look at my source code for this app

00:21:14,299 --> 00:21:20,340
basically I construct some JSON and then

00:21:17,220 --> 00:21:23,580
I send the JSON using a patch and a post

00:21:20,340 --> 00:21:27,360
and let's see where's the other one

00:21:23,580 --> 00:21:30,990
and so I do a patch a post and then a

00:21:27,360 --> 00:21:32,820
file put contents to so I do a patch to

00:21:30,990 --> 00:21:37,289
post a firebase and then I do a file put

00:21:32,820 --> 00:21:38,850
contents to our storage engine if I look

00:21:37,289 --> 00:21:41,520
at the code if I look at the source for

00:21:38,850 --> 00:21:44,760
patch and post it's just curl under the

00:21:41,520 --> 00:21:46,799
covers there's nothing too exotic it's

00:21:44,760 --> 00:21:49,350
just using curl and we look at the

00:21:46,799 --> 00:21:50,549
documentation for App Engine on curl one

00:21:49,350 --> 00:21:52,559
of the things that points out is that

00:21:50,549 --> 00:21:55,529
the basic curl implementation is

00:21:52,559 --> 00:21:57,990
something called curl lights and it uses

00:21:55,529 --> 00:21:59,130
URL fetch under the covers okay so my

00:21:57,990 --> 00:22:00,660
calls using that

00:21:59,130 --> 00:22:02,490
are definitely using URL fetch even

00:22:00,660 --> 00:22:05,310
though I never I never wrote URL fetch

00:22:02,490 --> 00:22:08,060
that's where that's happening and then

00:22:05,310 --> 00:22:11,040
if I look at the SDK for cloud storage

00:22:08,060 --> 00:22:14,370
under the covers that's using URL fetch

00:22:11,040 --> 00:22:19,400
as well okay so um I have three calls

00:22:14,370 --> 00:22:22,530
the URL fetch if I look at the URL fetch

00:22:19,400 --> 00:22:24,630
limits I am limited to six hundred and

00:22:22,530 --> 00:22:27,960
sixty six thousand sorry six hundred

00:22:24,630 --> 00:22:29,910
sixty thousand calls per minute which is

00:22:27,960 --> 00:22:31,500
a lot that seems like a lot right that

00:22:29,910 --> 00:22:33,240
and we do the math on that and would

00:22:31,500 --> 00:22:35,820
come out to eleven thousand QPS so I

00:22:33,240 --> 00:22:38,580
should be fine at eleven thousand QPS

00:22:35,820 --> 00:22:41,490
except what I'm missing here which is

00:22:38,580 --> 00:22:43,890
I'm baking three calls to URL fetch with

00:22:41,490 --> 00:22:46,770
each request so really that limits me to

00:22:43,890 --> 00:22:49,050
3600 qpf so right there I have a limit

00:22:46,770 --> 00:22:51,930
right like I cannot with this

00:22:49,050 --> 00:22:54,540
architecture take this app above 36,000

00:22:51,930 --> 00:22:56,400
QPS the app the you know the

00:22:54,540 --> 00:23:00,090
architecture the the platform itself

00:22:56,400 --> 00:23:02,010
will reject it I actually contacted our

00:23:00,090 --> 00:23:04,640
internal support and said hey there's

00:23:02,010 --> 00:23:07,470
already get this little bit raised and

00:23:04,640 --> 00:23:08,880
they sort of laughed at me like no like

00:23:07,470 --> 00:23:15,210
we're not raising that limit for your

00:23:08,880 --> 00:23:17,070
demo call us when your snapchat so so

00:23:15,210 --> 00:23:20,090
yeah like I'm not gonna get this limit

00:23:17,070 --> 00:23:23,730
raised so that that is the that is the

00:23:20,090 --> 00:23:25,620
total block that I'm up against but

00:23:23,730 --> 00:23:29,460
there's another block in there too which

00:23:25,620 --> 00:23:32,790
is that firebase I've noticed from

00:23:29,460 --> 00:23:34,770
looking at comparing the firebase

00:23:32,790 --> 00:23:36,870
numbers and the file storage numbers I

00:23:34,770 --> 00:23:39,450
can see that I have like with that demo

00:23:36,870 --> 00:23:41,910
if I get the QPS high enough on 10,000

00:23:39,450 --> 00:23:45,180
files written but less than 10,000

00:23:41,910 --> 00:23:47,010
records in firebase so kind of through

00:23:45,180 --> 00:23:50,360
experimentation I figured out that

00:23:47,010 --> 00:23:53,490
firebase gets flaky around 3,500 QPS and

00:23:50,360 --> 00:23:56,150
since I have to firebase calls per for

00:23:53,490 --> 00:24:00,150
page I really can't go a lot higher than

00:23:56,150 --> 00:24:01,860
1750 QPS on the front end right because

00:24:00,150 --> 00:24:04,050
the front I get seven seven seventeen

00:24:01,860 --> 00:24:05,490
hundred requests per second it's going

00:24:04,050 --> 00:24:07,380
to spawn thirty five hundred requests

00:24:05,490 --> 00:24:11,280
for firebase and that's sort of the

00:24:07,380 --> 00:24:12,660
limit so okay and this isn't this isn't

00:24:11,280 --> 00:24:12,990
like publicly documented and I'm not

00:24:12,660 --> 00:24:14,820
making

00:24:12,990 --> 00:24:18,059
public claims about firebase this is my

00:24:14,820 --> 00:24:20,070
experience with it so I'm not knocking

00:24:18,059 --> 00:24:23,309
firebase this is just what I've been

00:24:20,070 --> 00:24:23,790
able to do through the REST API it's

00:24:23,309 --> 00:24:26,340
okay

00:24:23,790 --> 00:24:28,380
so I approach to fix for it I'm not

00:24:26,340 --> 00:24:31,350
gonna go to I'm not gonna go too deep

00:24:28,380 --> 00:24:33,090
into this fix because it is a total it

00:24:31,350 --> 00:24:35,220
was a total waste of time when I start

00:24:33,090 --> 00:24:37,950
running through it one of the things you

00:24:35,220 --> 00:24:41,010
can do is you can switch curl on PHP on

00:24:37,950 --> 00:24:42,620
App Engine from using URL fetch to using

00:24:41,010 --> 00:24:45,870
sockets and then you have a different

00:24:42,620 --> 00:24:48,750
set of quotas which are much higher the

00:24:45,870 --> 00:24:49,950
problem is is that you don't like the

00:24:48,750 --> 00:24:52,290
whole reason you go to sockets is you

00:24:49,950 --> 00:24:55,950
have more control over the more control

00:24:52,290 --> 00:24:58,050
over the conversation and you don't get

00:24:55,950 --> 00:25:01,760
that through the car limitation to

00:24:58,050 --> 00:25:04,500
happen and so I ended up with with the

00:25:01,760 --> 00:25:07,230
implementation implementation I have if

00:25:04,500 --> 00:25:08,370
I went to a certain QPS it would it

00:25:07,230 --> 00:25:10,500
would always work and then after that

00:25:08,370 --> 00:25:11,910
QPS it would bomb with the sockets it

00:25:10,500 --> 00:25:14,580
was great it would just Bob it would

00:25:11,910 --> 00:25:16,830
always be 80% of what I needed which was

00:25:14,580 --> 00:25:19,740
great it was predictable but still not

00:25:16,830 --> 00:25:20,910
really that you saw and then so well you

00:25:19,740 --> 00:25:22,740
know I had that thought of like well

00:25:20,910 --> 00:25:24,570
maybe I could just rewrite HTTP

00:25:22,740 --> 00:25:26,429
implementation and sockets like I could

00:25:24,570 --> 00:25:29,100
just do that and then I thought about

00:25:26,429 --> 00:25:30,450
like a self at dekhta me because that

00:25:29,100 --> 00:25:34,470
would be more enjoyable than rewriting

00:25:30,450 --> 00:25:35,640
HTTP and sockets by myself so I was all

00:25:34,470 --> 00:25:38,400
right well let's put this on hold let's

00:25:35,640 --> 00:25:41,250
let's go a different route with it so

00:25:38,400 --> 00:25:43,440
let's talk about fix two which was

00:25:41,250 --> 00:25:45,330
switching the memcache one of the

00:25:43,440 --> 00:25:47,160
assumptions that I kind of built into

00:25:45,330 --> 00:25:49,470
this is does it really need to be

00:25:47,160 --> 00:25:50,970
real-time I thought it need to be

00:25:49,470 --> 00:25:54,179
real-time but does it really need to be

00:25:50,970 --> 00:25:56,760
real-time in order to to track that I'm

00:25:54,179 --> 00:25:58,800
handling all these requests and quite

00:25:56,760 --> 00:26:00,330
honestly it doesn't right like it

00:25:58,800 --> 00:26:01,590
doesn't really need to be real-time all

00:26:00,330 --> 00:26:03,179
you just need to be able to prove is

00:26:01,590 --> 00:26:05,300
that I was able to handle all these

00:26:03,179 --> 00:26:10,530
requests and do the work I wanted to do

00:26:05,300 --> 00:26:15,090
okay so looking at memcache on App

00:26:10,530 --> 00:26:18,500
Engine looking at our quotas you'll see

00:26:15,090 --> 00:26:22,559
that my maximum set operations is is

00:26:18,500 --> 00:26:24,390
5000 when the item size is less than

00:26:22,559 --> 00:26:26,330
kilobyte but you notice this goes down

00:26:24,390 --> 00:26:29,090
I'm sorry yeah you're

00:26:26,330 --> 00:26:31,280
maximum operations goes down as the size

00:26:29,090 --> 00:26:33,290
goes up and so I thought well maybe if

00:26:31,280 --> 00:26:35,480
all I'm doing is incrementing like

00:26:33,290 --> 00:26:37,640
increment memcache increment is really

00:26:35,480 --> 00:26:39,260
really small like over the wire so maybe

00:26:37,640 --> 00:26:42,590
I might be able to get this maximum set

00:26:39,260 --> 00:26:46,760
operations to be higher than 5,000 so I

00:26:42,590 --> 00:26:49,580
tested that so it actually does I can

00:26:46,760 --> 00:26:51,980
actually get it to run so my first you

00:26:49,580 --> 00:26:53,600
know idea was to store the instance

00:26:51,980 --> 00:26:55,430
request count so each instance is going

00:26:53,600 --> 00:26:58,580
to write to memcache the way it wrote to

00:26:55,430 --> 00:27:01,130
firebase nothing crazy and then to to

00:26:58,580 --> 00:27:03,590
show it to visualize it I would just get

00:27:01,130 --> 00:27:05,780
a list of all the keys and display the

00:27:03,590 --> 00:27:10,340
request counts right pretty pretty easy

00:27:05,780 --> 00:27:12,890
pretty basic this did not work why well

00:27:10,340 --> 00:27:15,230
if we look at occupation for memcache on

00:27:12,890 --> 00:27:17,710
App Engine stub functions in the

00:27:15,230 --> 00:27:24,140
memcache API get all keys is right there

00:27:17,710 --> 00:27:26,360
why is it stubbed the best answer I can

00:27:24,140 --> 00:27:27,950
find internally was that well you're not

00:27:26,360 --> 00:27:29,240
supposed to use memcache like a database

00:27:27,950 --> 00:27:32,510
and you're using memcache like a

00:27:29,240 --> 00:27:37,370
database when you do get all keys so we

00:27:32,510 --> 00:27:39,290
just figured no the other reason which i

00:27:37,370 --> 00:27:41,120
think is probably more realistic is that

00:27:39,290 --> 00:27:43,010
memcache on App Engine runs in two ways

00:27:41,120 --> 00:27:46,070
one is a shared where you share a

00:27:43,010 --> 00:27:49,370
memcache instance with a whole lot of

00:27:46,070 --> 00:27:51,920
other a whole lot of other App Engine

00:27:49,370 --> 00:27:54,350
apps you can say I want my own private

00:27:51,920 --> 00:27:56,000
one and you should but it cost money

00:27:54,350 --> 00:27:58,160
whereas the other one is just is just

00:27:56,000 --> 00:28:00,440
free and available for you there's no

00:27:58,160 --> 00:28:03,530
real security concerns we we do block

00:28:00,440 --> 00:28:05,540
all that off but I imagine this was a

00:28:03,530 --> 00:28:07,550
security concern waiting to happen so

00:28:05,540 --> 00:28:11,510
they just said you shouldn't do it so

00:28:07,550 --> 00:28:14,770
why should we implement it so I came up

00:28:11,510 --> 00:28:14,770
with a different solution which was

00:28:16,810 --> 00:28:21,530
basically I get the instance and the

00:28:19,160 --> 00:28:24,290
request so the instance is the the name

00:28:21,530 --> 00:28:28,280
of the the the App Engine instance and I

00:28:24,290 --> 00:28:31,400
say increment that key no it's kind of

00:28:28,280 --> 00:28:33,290
cool is if you increment and there's the

00:28:31,400 --> 00:28:35,330
the key doesn't exist it's going to

00:28:33,290 --> 00:28:36,800
return a one because it initializes it

00:28:35,330 --> 00:28:38,869
doesn't bomb you don't have to

00:28:36,800 --> 00:28:41,690
initialize it and then

00:28:38,869 --> 00:28:43,309
higher-value it was set at the one so if

00:28:41,690 --> 00:28:45,529
I get one back I know it's the first

00:28:43,309 --> 00:28:47,950
time that instance has been called so I

00:28:45,529 --> 00:28:51,379
just append it to a list of instances

00:28:47,950 --> 00:28:54,320
okay and then if that's the first time

00:28:51,379 --> 00:28:56,989
the list of instances has been created I

00:28:54,320 --> 00:29:00,799
just create I then initialize just the

00:28:56,989 --> 00:29:04,249
list of instances and then file put

00:29:00,799 --> 00:29:07,009
contents just like I did before it was

00:29:04,249 --> 00:29:11,509
close but didn't quite work I was losing

00:29:07,009 --> 00:29:12,320
instances and the when I kind of looked

00:29:11,509 --> 00:29:14,239
through all of it

00:29:12,320 --> 00:29:16,190
you know those really long strings in

00:29:14,239 --> 00:29:18,499
the storage those are those are the

00:29:16,190 --> 00:29:20,779
instance IDs so when you start

00:29:18,499 --> 00:29:22,669
generating like a thousand of them all

00:29:20,779 --> 00:29:25,609
that straight all those strings add up

00:29:22,669 --> 00:29:28,309
to be more than the limit for how much

00:29:25,609 --> 00:29:34,339
you can store in one key in memcache it

00:29:28,309 --> 00:29:38,299
was a the default is a Meg so I had to

00:29:34,339 --> 00:29:39,889
split it up so I changed I changed the

00:29:38,299 --> 00:29:41,959
just a little bit

00:29:39,889 --> 00:29:44,749
I've made this which instance less to

00:29:41,959 --> 00:29:47,539
divide it into sixteen because its

00:29:44,749 --> 00:29:51,679
hexadecimal so the last digit of the

00:29:47,539 --> 00:29:53,659
instance ID and created 16 lists of that

00:29:51,679 --> 00:29:55,450
I'm not going to demo it again

00:29:53,659 --> 00:29:57,919
I actually know I am going to demo sorry

00:29:55,450 --> 00:30:00,769
otherwise it'll kind of be pointless so

00:29:57,919 --> 00:30:02,029
I must switch over to this new way of

00:30:00,769 --> 00:30:04,999
doing it this is really small

00:30:02,029 --> 00:30:06,079
and I'll pump it up in a second but

00:30:04,999 --> 00:30:08,029
basically this is how I'm going to

00:30:06,079 --> 00:30:12,289
visualize it the real time visualizer

00:30:08,029 --> 00:30:17,809
will not work also now it's huge

00:30:12,289 --> 00:30:21,499
reset this still running okay good so

00:30:17,809 --> 00:30:22,789
it's down so here is how we're going to

00:30:21,499 --> 00:30:24,919
visualize it now we're going to count

00:30:22,789 --> 00:30:28,489
all the requests that come through and

00:30:24,919 --> 00:30:34,489
let me do that so same load count mode

00:30:28,489 --> 00:30:35,959
cache so I just changed to using the

00:30:34,489 --> 00:30:39,019
cache version of this instead of using

00:30:35,959 --> 00:30:42,919
the firebase version of this it's going

00:30:39,019 --> 00:30:45,859
to run and then if we look here these

00:30:42,919 --> 00:30:48,349
will still start up now they're huge so

00:30:45,859 --> 00:30:50,629
we'll definitely see them start up these

00:30:48,349 --> 00:30:52,039
will still start up and bounce but the

00:30:50,629 --> 00:30:53,450
real time of AB real

00:30:52,039 --> 00:30:54,830
time visualization of app engine isn't

00:30:53,450 --> 00:30:56,239
gonna work okay so they're they're

00:30:54,830 --> 00:30:59,720
starting up and bouncing so if I look

00:30:56,239 --> 00:31:01,249
here and I look at visualize we start

00:30:59,720 --> 00:31:02,690
seeing that I have instances and I could

00:31:01,249 --> 00:31:04,940
see all the request counts for all of

00:31:02,690 --> 00:31:07,729
them and we scroll all the way down and

00:31:04,940 --> 00:31:08,960
we're we're getting up there now we're

00:31:07,729 --> 00:31:10,970
in the middle of this so this shouldn't

00:31:08,960 --> 00:31:18,889
be done yet and those will eventually

00:31:10,970 --> 00:31:19,399
even out let me see one of them's done

00:31:18,889 --> 00:31:20,869
already

00:31:19,399 --> 00:31:22,220
well the great thing about this is not

00:31:20,869 --> 00:31:23,749
having to send all that traffic to

00:31:22,220 --> 00:31:28,539
firebase is usually had this usually

00:31:23,749 --> 00:31:28,539
finishes a lot faster yeah there we go

00:31:29,670 --> 00:31:35,299
[Music]

00:31:30,820 --> 00:31:50,239
and we should be done so we look here

00:31:35,299 --> 00:31:52,849
hit refresh and go okay so total count

00:31:50,239 --> 00:31:55,609
is fifty thousand the calculated count

00:31:52,849 --> 00:31:58,429
is forty nine 908 and you'll notice that

00:31:55,609 --> 00:32:01,999
the total instances correct is 11 27 and

00:31:58,429 --> 00:32:03,619
then we lost an instance in counting

00:32:01,999 --> 00:32:06,139
this all up and that's why we're at

00:32:03,619 --> 00:32:08,659
11:26 so long story short I'm still

00:32:06,139 --> 00:32:11,570
dropping some from from memcache but if

00:32:08,659 --> 00:32:13,220
I if I catch every single one that goes

00:32:11,570 --> 00:32:15,919
through I basically I have a running

00:32:13,220 --> 00:32:17,960
total count and I have a total count of

00:32:15,919 --> 00:32:19,369
all the instances as I get logged that's

00:32:17,960 --> 00:32:21,200
where these that's where these numbers

00:32:19,369 --> 00:32:23,899
come from that's where discrepancies so

00:32:21,200 --> 00:32:27,109
I actively got all fifty thousand

00:32:23,899 --> 00:32:33,109
records and I saw it in there so good so

00:32:27,109 --> 00:32:35,090
we're this this works me uh clues so I

00:32:33,109 --> 00:32:36,679
was able to throw a fifty thousand

00:32:35,090 --> 00:32:38,960
records fifty thousand requests at App

00:32:36,679 --> 00:32:42,049
Engine it handled it I was able to count

00:32:38,960 --> 00:32:45,799
them all up I have all the requests good

00:32:42,049 --> 00:32:47,119
we're done right it's finished I'm

00:32:45,799 --> 00:32:49,639
really gonna give up real time that easy

00:32:47,119 --> 00:32:51,200
you're gonna you're gonna let me like

00:32:49,639 --> 00:32:51,529
now we don't need to do real-time that's

00:32:51,200 --> 00:32:52,849
fine

00:32:51,529 --> 00:32:55,220
no it's the whole point it's a cool

00:32:52,849 --> 00:32:57,950
thing the things balance is fun why are

00:32:55,220 --> 00:32:59,570
we giving that up so alright so let's

00:32:57,950 --> 00:33:01,519
bring back the real-time this version

00:32:59,570 --> 00:33:03,289
works it's able to handle all fifty

00:33:01,519 --> 00:33:05,600
thousand records it's able to handle

00:33:03,289 --> 00:33:09,200
that type of scale and that's what

00:33:05,600 --> 00:33:12,650
to speed but it is not real time so how

00:33:09,200 --> 00:33:15,200
do we bring back real time so here's our

00:33:12,650 --> 00:33:17,630
here's how it currently works right the

00:33:15,200 --> 00:33:18,980
visualizer is it's still getting cloud

00:33:17,630 --> 00:33:21,320
storage and notifications but it's not

00:33:18,980 --> 00:33:23,750
getting from memcache so what I need to

00:33:21,320 --> 00:33:28,970
do is get the data from memcache somehow

00:33:23,750 --> 00:33:30,530
into firebase so I I wrote a thing

00:33:28,970 --> 00:33:32,840
called real time PHP that reads all the

00:33:30,530 --> 00:33:35,270
data for memcache and writes it all to

00:33:32,840 --> 00:33:39,020
firebase so that's probably the easiest

00:33:35,270 --> 00:33:40,880
way to do it so first pass initial code

00:33:39,020 --> 00:33:42,440
is get a list of the instances get a

00:33:40,880 --> 00:33:44,630
list of the number of requests for each

00:33:42,440 --> 00:33:46,039
instance and then send the database send

00:33:44,630 --> 00:33:49,070
that data for each request to firebase

00:33:46,039 --> 00:33:51,590
which is a terrible idea because I'm

00:33:49,070 --> 00:33:54,169
still sending 50,000 requests to

00:33:51,590 --> 00:33:56,330
firebase at that hayek UPS is still

00:33:54,169 --> 00:33:57,620
gonna bomb so I need to approach this a

00:33:56,330 --> 00:33:58,610
different way so if one of the first

00:33:57,620 --> 00:34:00,530
things you have to understand how

00:33:58,610 --> 00:34:04,549
firebase works under the covers so

00:34:00,530 --> 00:34:06,620
firebase is a is a is a JSON store

00:34:04,549 --> 00:34:09,889
basically a hierarchical JSON store of

00:34:06,620 --> 00:34:11,720
keys so here I have App Engine I have

00:34:09,889 --> 00:34:13,340
instance one and all the requests under

00:34:11,720 --> 00:34:14,629
it and then instance two and all the

00:34:13,340 --> 00:34:18,080
requests under an instance three all the

00:34:14,629 --> 00:34:22,159
requests under it and this is sort of

00:34:18,080 --> 00:34:25,940
how it looks in in JSON right now one of

00:34:22,159 --> 00:34:29,000
the things I can do is to grab any part

00:34:25,940 --> 00:34:31,429
of my database all I have to do is say

00:34:29,000 --> 00:34:35,149
App Engine instance one request to JSON

00:34:31,429 --> 00:34:36,649
and I can get post or patch so I can I

00:34:35,149 --> 00:34:39,500
can update it I can put a record there I

00:34:36,649 --> 00:34:41,750
can pull the record out if I want to get

00:34:39,500 --> 00:34:43,250
all of instance one well I all I have to

00:34:41,750 --> 00:34:45,050
do is just write to App Engine incidents

00:34:43,250 --> 00:34:46,700
one JSON I can get post patch to it and

00:34:45,050 --> 00:34:48,260
then if I want to get to everything I

00:34:46,700 --> 00:34:50,929
can get post and patch the whole thing

00:34:48,260 --> 00:34:53,270
so what I can do here is since I can not

00:34:50,929 --> 00:34:54,980
just get it and get the whole data but I

00:34:53,270 --> 00:34:59,330
can actually write to the whole thing so

00:34:54,980 --> 00:35:02,359
if I create the JSON in PHP and shove it

00:34:59,330 --> 00:35:02,750
into firebase the whole thing I can do

00:35:02,359 --> 00:35:04,790
that

00:35:02,750 --> 00:35:07,430
so instead of having to write individual

00:35:04,790 --> 00:35:09,350
keys for each request I can just analyze

00:35:07,430 --> 00:35:11,390
the whole thing create the JSON shove it

00:35:09,350 --> 00:35:14,480
into firebase in one shot okay that

00:35:11,390 --> 00:35:19,559
actually works that's great so here's

00:35:14,480 --> 00:35:21,869
the trace logging for doing that and

00:35:19,559 --> 00:35:25,709
doing that like I didn't not optimized

00:35:21,869 --> 00:35:27,900
it would take about five seconds five

00:35:25,709 --> 00:35:30,329
hundred five thousand milliseconds to do

00:35:27,900 --> 00:35:32,789
this right and this is this is our trace

00:35:30,329 --> 00:35:35,279
visualization you see I have a crap-ton

00:35:32,789 --> 00:35:38,489
of memcache requests followed by this

00:35:35,279 --> 00:35:40,949
giant URL fetch to send it to firebase

00:35:38,489 --> 00:35:43,559
so this you know this is unoptimized

00:35:40,949 --> 00:35:45,900
let's let's make this better well first

00:35:43,559 --> 00:35:48,119
way of making it better is batch the

00:35:45,900 --> 00:35:50,339
memcache calls using get multi so I

00:35:48,119 --> 00:35:52,079
create the entire list the entire entire

00:35:50,339 --> 00:35:54,449
set of stuff I need from from memcache

00:35:52,079 --> 00:35:58,769
send it to send it to memcache and get

00:35:54,449 --> 00:36:01,499
back just one giant request and then

00:35:58,769 --> 00:36:03,630
also looking at that the the data

00:36:01,499 --> 00:36:07,229
structure auto sending for some reason

00:36:03,630 --> 00:36:08,939
the way the initial way I wrote this I

00:36:07,229 --> 00:36:12,119
would I would write the instance name

00:36:08,939 --> 00:36:14,400
that's the really long string up here

00:36:12,119 --> 00:36:15,989
and then I were to request one request

00:36:14,400 --> 00:36:18,239
to request three or Sequeira guys four

00:36:15,989 --> 00:36:20,849
and it also included the instance string

00:36:18,239 --> 00:36:23,849
right which I already had so I was just

00:36:20,849 --> 00:36:28,380
sending gigantic gigantic amounts of

00:36:23,849 --> 00:36:32,429
JSON over at firebase so I rewrote it to

00:36:28,380 --> 00:36:33,509
just send the instance ID and the number

00:36:32,429 --> 00:36:36,150
of requests that handles and that's

00:36:33,509 --> 00:36:39,390
that's all that made that really shrunk

00:36:36,150 --> 00:36:41,369
the JSON down and so now here's what

00:36:39,390 --> 00:36:43,439
real-time PHP looks like it was running

00:36:41,369 --> 00:36:46,380
at five seconds before now it's taking a

00:36:43,439 --> 00:36:49,079
second so I've got two quick memcache

00:36:46,380 --> 00:36:51,299
calls to get the keys out and then a URL

00:36:49,079 --> 00:36:53,069
fetch that was taking around 600

00:36:51,299 --> 00:36:55,229
milliseconds this is a lot better but

00:36:53,069 --> 00:36:56,969
it's still not it's still not enough

00:36:55,229 --> 00:37:00,239
it's not fast enough for me to be able

00:36:56,969 --> 00:37:03,239
to do any sort of simulated real time so

00:37:00,239 --> 00:37:05,339
I really got to get this URL fetch down

00:37:03,239 --> 00:37:08,929
lower so looking at the documentation

00:37:05,339 --> 00:37:10,769
for the REST API for firebase a

00:37:08,929 --> 00:37:13,380
successful request will be indicated by

00:37:10,769 --> 00:37:16,259
200 followed by the response will

00:37:13,380 --> 00:37:18,209
contain the date of written so I do all

00:37:16,259 --> 00:37:19,949
this work I generate all this this JSON

00:37:18,209 --> 00:37:22,469
and I said to the firebase and firebase

00:37:19,949 --> 00:37:24,239
is like well have it back

00:37:22,469 --> 00:37:25,619
which is really inefficient I don't need

00:37:24,239 --> 00:37:27,179
to know I just said you that why do I

00:37:25,619 --> 00:37:31,109
need to do it and I'm sure there are

00:37:27,179 --> 00:37:32,940
reasons for it but you also could turn

00:37:31,109 --> 00:37:35,280
this off so I can say

00:37:32,940 --> 00:37:37,170
when I when I send this through print

00:37:35,280 --> 00:37:40,260
silent don't send me a request don't

00:37:37,170 --> 00:37:43,829
send me a response back just take it and

00:37:40,260 --> 00:37:47,359
do it and when you do that I now get the

00:37:43,829 --> 00:37:50,190
URL fetch time down to 200 milliseconds

00:37:47,359 --> 00:37:52,020
which means the whole request takes

00:37:50,190 --> 00:37:53,460
around 300 milliseconds now this is

00:37:52,020 --> 00:37:57,079
something I can do multiple times a

00:37:53,460 --> 00:38:03,000
second in order to drive a real a real

00:37:57,079 --> 00:38:05,579
time like interface so I use our tasks

00:38:03,000 --> 00:38:09,180
system which I'll fire up in a second to

00:38:05,579 --> 00:38:10,950
show you but I basically say and any

00:38:09,180 --> 00:38:13,890
given time you can be running three of

00:38:10,950 --> 00:38:15,930
these operations and run no more than

00:38:13,890 --> 00:38:18,690
ten a second and that sort of keeps my

00:38:15,930 --> 00:38:21,000
QPS really down low right mic ups and it

00:38:18,690 --> 00:38:23,880
will never get higher than 10 queries

00:38:21,000 --> 00:38:26,099
per second to fire it to send this stuff

00:38:23,880 --> 00:38:29,400
over to firebase but I can run it

00:38:26,099 --> 00:38:32,550
multiple times a second so that it it

00:38:29,400 --> 00:38:34,920
does happen quicker than then we can

00:38:32,550 --> 00:38:37,740
tell the to do this is really easy I

00:38:34,920 --> 00:38:41,760
just push to the task queue I push real

00:38:37,740 --> 00:38:43,650
time PHP to a task queue and then one

00:38:41,760 --> 00:38:45,569
thing I had to watch for is that if I

00:38:43,650 --> 00:38:48,300
sent it to the task you every single

00:38:45,569 --> 00:38:51,210
request if he 50,000 requests waiting in

00:38:48,300 --> 00:38:53,069
the task queue which when they're being

00:38:51,210 --> 00:38:55,770
throttled like that would go long past

00:38:53,069 --> 00:38:57,480
the last request that I would need so

00:38:55,770 --> 00:38:59,160
what I did is I basically just built a

00:38:57,480 --> 00:39:04,470
throttling thing as as we get further

00:38:59,160 --> 00:39:06,619
into the number of requests don't don't

00:39:04,470 --> 00:39:10,109
put it in the task queue quite as often

00:39:06,619 --> 00:39:11,819
so when you when you do this so what

00:39:10,109 --> 00:39:14,670
this ended up doing is instead of

00:39:11,819 --> 00:39:18,210
writing a lot of really fat requests to

00:39:14,670 --> 00:39:21,810
firebase I replace that all with these

00:39:18,210 --> 00:39:24,869
very much fewer light requests to

00:39:21,810 --> 00:39:31,200
firebase so I'm gonna fire this up and

00:39:24,869 --> 00:39:35,040
let's see how it's going so here's my

00:39:31,200 --> 00:39:38,040
task queue and I had it paused so we see

00:39:35,040 --> 00:39:42,750
that all 50,000 of those requests that I

00:39:38,040 --> 00:39:45,160
did before only generated 1,100 tasks so

00:39:42,750 --> 00:39:46,690
quite a reduction in the number of

00:39:45,160 --> 00:39:52,059
tasks we're gonna do I'm gonna delete

00:39:46,690 --> 00:39:53,200
all of these because I'm not gonna run

00:39:52,059 --> 00:39:55,029
this in real time there we go

00:39:53,200 --> 00:39:56,980
so all those are gone I'm going to

00:39:55,029 --> 00:40:00,549
resume the queue so now it will process

00:39:56,980 --> 00:40:03,900
any of those that come through will go

00:40:00,549 --> 00:40:10,990
back here will reset I'm gonna make this

00:40:03,900 --> 00:40:15,460
small again okay all right and then

00:40:10,990 --> 00:40:20,049
we're gonna run cashed again fingers

00:40:15,460 --> 00:40:23,130
crossed that the demo gods have been

00:40:20,049 --> 00:40:25,299
appeased by all the other problems and

00:40:23,130 --> 00:40:33,369
hopefully we will see this run in real

00:40:25,299 --> 00:40:34,869
time - run run load ah there we go so

00:40:33,369 --> 00:40:37,750
it's a lot stutterer

00:40:34,869 --> 00:40:40,299
than the real-time version because it is

00:40:37,750 --> 00:40:44,500
still it's still a poll version but we

00:40:40,299 --> 00:40:50,710
will be able to track it and in theory

00:40:44,500 --> 00:40:52,869
this will go all the way to 50,000 yep

00:40:50,710 --> 00:40:55,660
like I said it's a lot it's not quite

00:40:52,869 --> 00:40:56,829
it's clearly not as smooth as the

00:40:55,660 --> 00:40:58,450
previous version but we see you're

00:40:56,829 --> 00:41:00,640
running through and we're running the

00:40:58,450 --> 00:41:04,240
30,000 requests what do we get - last

00:41:00,640 --> 00:41:09,549
time 37 all right 30 we're now past that

00:41:04,240 --> 00:41:18,880
we're at 40 42 should get to 50,000 and

00:41:09,549 --> 00:41:21,819
stop come on huh boom and so we

00:41:18,880 --> 00:41:23,349
successfully visualized it using a much

00:41:21,819 --> 00:41:24,910
different way and it worked and it

00:41:23,349 --> 00:41:28,450
worked perfect well thank you that was

00:41:24,910 --> 00:41:31,630
yeah I was sweating that one all right

00:41:28,450 --> 00:41:32,890
so now the real conclusion so safety

00:41:31,630 --> 00:41:33,819
quotas are not something just to be

00:41:32,890 --> 00:41:36,759
gotten around there's one of the first

00:41:33,819 --> 00:41:38,950
things I learned like there's a reason

00:41:36,759 --> 00:41:41,589
why that limit was set at 50,000 or I'm

00:41:38,950 --> 00:41:43,960
sorry that you know why there's QPS

00:41:41,589 --> 00:41:46,869
limits were there and why they rejected

00:41:43,960 --> 00:41:50,650
my request to get it raised you can

00:41:46,869 --> 00:41:54,309
cause other other resources pain right

00:41:50,650 --> 00:41:57,819
in that case I was sending a tremendous

00:41:54,309 --> 00:41:58,930
amount of load at firebase and causing

00:41:57,819 --> 00:42:00,910
them problems

00:41:58,930 --> 00:42:03,490
it was before I started this before a

00:42:00,910 --> 00:42:06,040
firebase like we had acquired firebase

00:42:03,490 --> 00:42:07,870
but we were still sort of in the merging

00:42:06,040 --> 00:42:10,750
together so I had to contact their

00:42:07,870 --> 00:42:13,330
support to get my get my firebase

00:42:10,750 --> 00:42:14,710
instance on unscrewed up because I was

00:42:13,330 --> 00:42:17,050
able to delete everything on the cloud

00:42:14,710 --> 00:42:18,550
side but firebase side like deleting

00:42:17,050 --> 00:42:20,710
this wasn't working and they're like how

00:42:18,550 --> 00:42:23,890
many keys did you write like about like

00:42:20,710 --> 00:42:26,020
30 million actually probably 60 million

00:42:23,890 --> 00:42:29,020
like oh yeah we're just gonna delete

00:42:26,020 --> 00:42:31,540
your whole thing and start over is that

00:42:29,020 --> 00:42:32,920
okay yeah it better be because there's

00:42:31,540 --> 00:42:36,130
no other way to do what you want to do

00:42:32,920 --> 00:42:38,470
so I was causing I was causing stress on

00:42:36,130 --> 00:42:40,300
firebase and so when you when you're

00:42:38,470 --> 00:42:41,860
dealing with that much when you're

00:42:40,300 --> 00:42:43,030
dealing that much you put a throughput

00:42:41,860 --> 00:42:44,890
on the front you're thinking of yourself

00:42:43,030 --> 00:42:46,390
are you thinking of like how can I

00:42:44,890 --> 00:42:48,030
handle this we're going to make sure any

00:42:46,390 --> 00:42:52,890
of the services that you're calling

00:42:48,030 --> 00:42:54,940
you're not also causing problems to

00:42:52,890 --> 00:42:57,570
obviously bundle up data calls when it

00:42:54,940 --> 00:43:02,140
makes sense it is much more efficient to

00:42:57,570 --> 00:43:03,730
bundle up these calls into Giants from a

00:43:02,140 --> 00:43:06,310
data perspective much bigger pieces of

00:43:03,730 --> 00:43:09,490
data but using much many less

00:43:06,310 --> 00:43:11,710
connections and be prepared to make

00:43:09,490 --> 00:43:13,690
compromises right like I at some point

00:43:11,710 --> 00:43:15,370
had to give up on the idea of the

00:43:13,690 --> 00:43:18,490
real-time display of it working

00:43:15,370 --> 00:43:20,380
perfectly every single time but once I

00:43:18,490 --> 00:43:22,390
gave that up I was able to find

00:43:20,380 --> 00:43:26,050
solutions that made a lot more sense and

00:43:22,390 --> 00:43:29,500
we're a lot more scalable the other

00:43:26,050 --> 00:43:31,870
thing is swap out pieces so I rewrote

00:43:29,500 --> 00:43:34,270
just the part that handles the load

00:43:31,870 --> 00:43:36,460
I didn't rewrite the visualizer I didn't

00:43:34,270 --> 00:43:40,210
rewrite the fire-based architecture I

00:43:36,460 --> 00:43:42,880
didn't in this you see in a moment I did

00:43:40,210 --> 00:43:44,710
rewrite the load yet again in another

00:43:42,880 --> 00:43:48,280
way but I didn't rewrite the real-time

00:43:44,710 --> 00:43:50,050
piece or the or the the cat that the

00:43:48,280 --> 00:43:52,270
piece that grabs stuff out of cache and

00:43:50,050 --> 00:43:54,040
writes it to the screen and I never I

00:43:52,270 --> 00:43:56,680
never rewrote that even though I swapped

00:43:54,040 --> 00:43:59,050
out other pieces for load so like don't

00:43:56,680 --> 00:44:00,610
don't think like ah this whole thing is

00:43:59,050 --> 00:44:03,100
crap like no just one part so it was

00:44:00,610 --> 00:44:05,620
crap or one part of it wasn't even crap

00:44:03,100 --> 00:44:06,730
it was just that it reached its limit of

00:44:05,620 --> 00:44:09,700
what it could do the way it was written

00:44:06,730 --> 00:44:12,070
so keeping in mind swap out the pieces

00:44:09,700 --> 00:44:14,830
not the whole thing

00:44:12,070 --> 00:44:17,110
is this time was it time like was the

00:44:14,830 --> 00:44:18,730
language the wrong choice and I was a

00:44:17,110 --> 00:44:22,990
PHP conference and I'm about to say it's

00:44:18,730 --> 00:44:26,110
like no no I'm not don't listen to me so

00:44:22,990 --> 00:44:28,380
App Engine standard which is what I'm

00:44:26,110 --> 00:44:32,110
able to use to scale this this fast

00:44:28,380 --> 00:44:34,810
supports 5/5 for now only five five four

00:44:32,110 --> 00:44:36,100
now that's that's a whole other mess

00:44:34,810 --> 00:44:37,630
than if anyone wants give you drinks

00:44:36,100 --> 00:44:42,220
that I'm happy to explain why and what

00:44:37,630 --> 00:44:43,960
we're doing about it but we do support

00:44:42,220 --> 00:44:45,340
seven one on this thing called App

00:44:43,960 --> 00:44:47,560
Engine flexible environment which is

00:44:45,340 --> 00:44:49,660
cool which is definitely cool but it

00:44:47,560 --> 00:44:54,160
doesn't scale fast as fast as standard

00:44:49,660 --> 00:44:56,200
so my I had the thought like well what

00:44:54,160 --> 00:44:57,370
if I've rewrote it like you know this is

00:44:56,200 --> 00:44:59,950
one of those cases where I'm having

00:44:57,370 --> 00:45:02,200
performance problems in PHP maybe this

00:44:59,950 --> 00:45:03,700
makes sense to take this down to C well

00:45:02,200 --> 00:45:05,860
you can't take it down to C on App

00:45:03,700 --> 00:45:07,530
Engine so one of the other language

00:45:05,860 --> 00:45:11,650
choices available on App Engine is go

00:45:07,530 --> 00:45:13,570
and go is compiled and writes you know

00:45:11,650 --> 00:45:15,400
you're running much smaller binaries

00:45:13,570 --> 00:45:19,300
maybe that would be faster maybe that

00:45:15,400 --> 00:45:21,130
would be more performant so I want to

00:45:19,300 --> 00:45:23,020
point this out that both the P the PHP

00:45:21,130 --> 00:45:25,570
all everything you saw up till now was

00:45:23,020 --> 00:45:26,830
only PHP and was running and it's fine

00:45:25,570 --> 00:45:29,410
it works it does exactly what it's

00:45:26,830 --> 00:45:31,180
supposed to do but I rewrote it in go

00:45:29,410 --> 00:45:32,800
and I'm not going to go too much I'm not

00:45:31,180 --> 00:45:35,650
gonna demo it because it's the same

00:45:32,800 --> 00:45:39,190
exact thing but what I found was that

00:45:35,650 --> 00:45:41,740
the PHP version ran about seventh

00:45:39,190 --> 00:45:44,230
averaged about seven hundred instances

00:45:41,740 --> 00:45:46,150
we saw before there I had like 1,100

00:45:44,230 --> 00:45:47,620
instances sometimes it was much higher

00:45:46,150 --> 00:45:49,780
sometimes much lower taking the average

00:45:47,620 --> 00:45:52,470
it's around 700 instances I spent up

00:45:49,780 --> 00:45:55,330
when you spin up an app engine instance

00:45:52,470 --> 00:45:58,030
you are charged for a minimum of 25

00:45:55,330 --> 00:46:01,360
sorry a minimum of 50 minute the 15

00:45:58,030 --> 00:46:02,740
minutes so it'll eventually spin down

00:46:01,360 --> 00:46:04,180
but every time you spend up an instance

00:46:02,740 --> 00:46:07,570
they're gonna hit 15 minutes for each

00:46:04,180 --> 00:46:09,370
instance each instance costs 5 cents per

00:46:07,570 --> 00:46:12,910
hour or you do the math running that

00:46:09,370 --> 00:46:15,730
whole thing averages $8.75 now that

00:46:12,910 --> 00:46:17,050
doesn't mean that you're gonna run $8.75

00:46:15,730 --> 00:46:18,880
every time you run App Engine it's just

00:46:17,050 --> 00:46:20,110
when you spin up that many instances

00:46:18,880 --> 00:46:22,330
you're going that's the charge it's

00:46:20,110 --> 00:46:25,510
going to be most people only run one or

00:46:22,330 --> 00:46:27,220
two instances and so the cost for

00:46:25,510 --> 00:46:28,990
for doing something there's a lot lower

00:46:27,220 --> 00:46:31,210
but in this case when I'm specifically

00:46:28,990 --> 00:46:32,470
deciding trying to spin up a lot of

00:46:31,210 --> 00:46:34,359
instances I'm gonna run at about eight

00:46:32,470 --> 00:46:36,190
dollars and five cents an hour so I

00:46:34,359 --> 00:46:38,410
rewrote just the load piece not on all

00:46:36,190 --> 00:46:40,090
the rest of it just the load piece just

00:46:38,410 --> 00:46:41,859
the piece that takes and and generates

00:46:40,090 --> 00:46:45,400
all of those instances and rewrote it

00:46:41,859 --> 00:46:49,210
and go and I had some interesting kind

00:46:45,400 --> 00:46:51,160
of results for go I averaged about a

00:46:49,210 --> 00:46:52,420
hundred instances and this makes sense

00:46:51,160 --> 00:46:53,740
if you think about it what happened the

00:46:52,420 --> 00:46:56,470
reason why App Engine spins up an

00:46:53,740 --> 00:46:58,720
instance is because it has all the

00:46:56,470 --> 00:47:00,130
requests and says hey I can't possibly

00:46:58,720 --> 00:47:01,840
handle these many requests because I'm

00:47:00,130 --> 00:47:03,780
still starting up so spin up more

00:47:01,840 --> 00:47:08,410
instances to handle and spread them out

00:47:03,780 --> 00:47:10,210
well go you're only running you write a

00:47:08,410 --> 00:47:12,160
very small binary it's very small it's

00:47:10,210 --> 00:47:16,840
been up and so it's able to start

00:47:12,160 --> 00:47:21,340
processing stuff a lot faster if if we

00:47:16,840 --> 00:47:25,869
had PHP seven I think this would be more

00:47:21,340 --> 00:47:28,540
competitive but go being go being a

00:47:25,869 --> 00:47:30,070
binary and being compiled it's still

00:47:28,540 --> 00:47:31,480
gonna have that well it's only doing

00:47:30,070 --> 00:47:34,030
just this small little slice of stuff

00:47:31,480 --> 00:47:36,640
whereas the PHP runtime is still bigger

00:47:34,030 --> 00:47:39,220
than that so I only spun up about a

00:47:36,640 --> 00:47:42,580
hundred instances with that the same

00:47:39,220 --> 00:47:48,010
minimum a fifteen minute fifteen minutes

00:47:42,580 --> 00:47:50,050
run but the charge was higher because

00:47:48,010 --> 00:47:53,530
there's there's some sort of issue where

00:47:50,050 --> 00:47:56,619
I needed to go to a bigger resource

00:47:53,530 --> 00:47:58,510
footprint on my go instances but even

00:47:56,619 --> 00:48:02,320
with it being twice as resource

00:47:58,510 --> 00:48:05,530
dependent I still ran one seventh the

00:48:02,320 --> 00:48:07,270
number of instances so my charge was do

00:48:05,530 --> 00:48:09,520
all the math a little bit more than a

00:48:07,270 --> 00:48:17,310
quarter of the chart I'm sorry a little

00:48:09,520 --> 00:48:20,130
bit more than I'm bad at math clearly

00:48:17,310 --> 00:48:23,290
more than a quarter less than a third of

00:48:20,130 --> 00:48:26,230
the charge as it was for PHP so this is

00:48:23,290 --> 00:48:29,440
one of those cases where I I could lower

00:48:26,230 --> 00:48:32,260
my costs by by going to a different

00:48:29,440 --> 00:48:34,440
version and was really helpful so that

00:48:32,260 --> 00:48:36,730
I'm gonna say thank you guys very much

00:48:34,440 --> 00:48:39,369
if you have any questions about the talk

00:48:36,730 --> 00:48:40,990
feel free to hit me on Twitter um

00:48:39,369 --> 00:48:44,769
be quick to respond to it I'm gonna open

00:48:40,990 --> 00:48:46,119
up for questions in a minute but there's

00:48:44,769 --> 00:48:50,349
the talk if you want to download it on

00:48:46,119 --> 00:48:52,450
bitly and then my joined in ID the talk

00:48:50,349 --> 00:48:54,880
ID so please feel free to rate me and

00:48:52,450 --> 00:48:58,809
criticize me so with that I'm gonna say

00:48:54,880 --> 00:48:59,950
any questions I'm sorry I'm in the way

00:48:58,809 --> 00:49:03,309
have you taken a picture of the thing

00:48:59,950 --> 00:49:04,150
any questions or you guys all like I

00:49:03,309 --> 00:49:07,720
want lunch

00:49:04,150 --> 00:49:10,240
stop talking let me go to lunch all

00:49:07,720 --> 00:49:13,990
right well I will be around you can

00:49:10,240 --> 00:49:15,490
usually catch me out smoking so please

00:49:13,990 --> 00:49:16,599
feel free to ask me any questions about

00:49:15,490 --> 00:49:17,450
this and thank you guys very much for

00:49:16,599 --> 00:49:22,890
your time

00:49:17,450 --> 00:49:22,890

YouTube URL: https://www.youtube.com/watch?v=xbVWbWo31pk


