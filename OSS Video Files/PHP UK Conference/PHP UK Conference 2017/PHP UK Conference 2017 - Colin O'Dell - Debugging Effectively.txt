Title: PHP UK Conference 2017 - Colin O'Dell - Debugging Effectively
Publication date: 2017-04-03
Playlist: PHP UK Conference 2017
Description: 
	Software bugs are inevitable; some are especially difficult to track down, causing you to waste countless hours before throwing your hands up in defeat. It doesn't have to be this way! The mental fatigue and wasted time can be avoided by using strategies like identifying the most-appropriate tool, taking a logical & objective approach, challenging assumptions, listening to variables, isolating the code path, and reinforcing code with automated tests. Attendees will learn how to combine these techniques with the right mindset and attitude in order to debug their code quickly and effectively.
Captions: 
	00:00:05,130 --> 00:00:11,049
hello everyone

00:00:07,410 --> 00:00:13,389
good afternoon welcome to debugging

00:00:11,049 --> 00:00:14,889
effectively thank you for coming out for

00:00:13,389 --> 00:00:16,900
those of you who don't know me you

00:00:14,889 --> 00:00:19,270
haven't seen me before my name is Colin

00:00:16,900 --> 00:00:22,419
Odell and it also helps if I turn on my

00:00:19,270 --> 00:00:24,099
presenter I am a lead web developer at

00:00:22,419 --> 00:00:27,009
unleash technologies where web and

00:00:24,099 --> 00:00:29,470
hosting firm over in the u.s. just an

00:00:27,009 --> 00:00:31,720
hour north of DC you might know me from

00:00:29,470 --> 00:00:33,940
my PHP lead projects I currently

00:00:31,720 --> 00:00:35,440
maintain the league's common mark parser

00:00:33,940 --> 00:00:37,539
as well as the HTML to markdown

00:00:35,440 --> 00:00:40,660
converter or you might know me from on

00:00:37,539 --> 00:00:42,100
my PHP 7 upgrade guide eBook something

00:00:40,660 --> 00:00:44,019
else I don't put as a bullet point on

00:00:42,100 --> 00:00:46,510
here but I probably should is that I'm a

00:00:44,019 --> 00:00:48,039
really good to bugger whenever there's a

00:00:46,510 --> 00:00:50,620
really challenging problem that I'm

00:00:48,039 --> 00:00:52,089
faced with usually mom you know nine

00:00:50,620 --> 00:00:54,999
times out of ten I can figure out what

00:00:52,089 --> 00:00:56,530
that solution is it's not because you

00:00:54,999 --> 00:00:58,089
know I'm particularly good at that

00:00:56,530 --> 00:01:00,190
particular platform I'm looking at

00:00:58,089 --> 00:01:01,839
it's just that over time I've kind of

00:01:00,190 --> 00:01:03,699
built up these are really nice debugging

00:01:01,839 --> 00:01:05,440
skills and I want to share some of that

00:01:03,699 --> 00:01:07,170
information with you today so that you

00:01:05,440 --> 00:01:09,399
can become effective debuggers as well

00:01:07,170 --> 00:01:10,720
so to accomplish that we're going to go

00:01:09,399 --> 00:01:13,030
through a few different parts in this

00:01:10,720 --> 00:01:14,350
presentation we're gonna start off by

00:01:13,030 --> 00:01:16,780
talking about the importance of

00:01:14,350 --> 00:01:18,880
debugging why are we all here spending

00:01:16,780 --> 00:01:20,909
an hour learning about debugging and why

00:01:18,880 --> 00:01:22,990
it's good to be an effective debugger

00:01:20,909 --> 00:01:24,670
from there I'll actually share the

00:01:22,990 --> 00:01:26,680
debugging process that I personally use

00:01:24,670 --> 00:01:28,270
to five-step process that I've kind of

00:01:26,680 --> 00:01:29,950
evolved over time that seems to work

00:01:28,270 --> 00:01:33,250
pretty well in most situations

00:01:29,950 --> 00:01:34,810
I also touch on some specific tools and

00:01:33,250 --> 00:01:36,100
techniques that you can use when you're

00:01:34,810 --> 00:01:38,799
debugging different types of problems

00:01:36,100 --> 00:01:40,090
and then of course if time permits I'll

00:01:38,799 --> 00:01:43,149
open it up for some questions and

00:01:40,090 --> 00:01:45,700
answers so let's think about debugging

00:01:43,149 --> 00:01:47,799
if you had to choose one word to

00:01:45,700 --> 00:01:50,140
describe what debugging means to you

00:01:47,799 --> 00:01:52,390
what word might you describe you might

00:01:50,140 --> 00:01:54,820
say debugging is hard debugging is

00:01:52,390 --> 00:01:57,340
time-consuming debugging is difficult to

00:01:54,820 --> 00:01:59,170
bugling is annoying if you like to solve

00:01:57,340 --> 00:02:01,240
puzzles new like problem solving like

00:01:59,170 --> 00:02:04,030
myself you might say debugging is fun

00:02:01,240 --> 00:02:06,310
debugging can be a fun challenge but I

00:02:04,030 --> 00:02:08,470
think debugging is important more than

00:02:06,310 --> 00:02:11,680
anything I think debugging is the single

00:02:08,470 --> 00:02:13,210
most important skill in programming now

00:02:11,680 --> 00:02:16,379
that's a very bold statement and do I

00:02:13,210 --> 00:02:18,060
have some data to back that up I do

00:02:16,379 --> 00:02:19,739
if you think about how you spend your

00:02:18,060 --> 00:02:22,379
time as a developer you might break down

00:02:19,739 --> 00:02:24,329
your time like this you might say okay I

00:02:22,379 --> 00:02:28,200
spend maybe a third of my time planning

00:02:24,329 --> 00:02:30,150
things talking on slack sending emails

00:02:28,200 --> 00:02:32,790
meeting with the shareholders and the

00:02:30,150 --> 00:02:34,709
stakeholders triaging issues things like

00:02:32,790 --> 00:02:37,260
that and then the other two-thirds of my

00:02:34,709 --> 00:02:39,140
time I spend coda but do you really

00:02:37,260 --> 00:02:41,280
spend two thirds of your time coding

00:02:39,140 --> 00:02:43,139
according to the mythical man-month you

00:02:41,280 --> 00:02:46,079
don't you actually spent up to half of

00:02:43,139 --> 00:02:47,760
your time testing and debugging you

00:02:46,079 --> 00:02:50,609
spend 1/6 of your time actually

00:02:47,760 --> 00:02:52,709
developing new code so once I scoot 1/6

00:02:50,609 --> 00:02:54,750
of the time you're in your IDE typing

00:02:52,709 --> 00:02:55,530
out that new function or that new action

00:02:54,750 --> 00:02:57,659
that you need to write in your

00:02:55,530 --> 00:02:59,220
controller and then the other half of

00:02:57,659 --> 00:03:01,500
the time you're debugging why it doesn't

00:02:59,220 --> 00:03:04,040
work your writing unit tests for writing

00:03:01,500 --> 00:03:06,480
functional tests things of that nature

00:03:04,040 --> 00:03:08,939
so if we're spending up to half of our

00:03:06,480 --> 00:03:10,769
time testing and debugging surely that's

00:03:08,939 --> 00:03:14,669
an area that it's a good idea to become

00:03:10,769 --> 00:03:16,409
efficient at now I'd like to put a good

00:03:14,669 --> 00:03:18,150
definition to the word debugging when I

00:03:16,409 --> 00:03:20,310
do this talk and I really like this one

00:03:18,150 --> 00:03:22,349
from Wikipedia wikipedia says that

00:03:20,310 --> 00:03:24,780
debugging is the process of finding and

00:03:22,349 --> 00:03:26,699
resolving bugs or defects that prevent

00:03:24,780 --> 00:03:29,579
correct operation of computer software

00:03:26,699 --> 00:03:31,919
or a system and I think the word process

00:03:29,579 --> 00:03:34,560
here is really important it's not

00:03:31,919 --> 00:03:36,510
something you do haphazardly or randomly

00:03:34,560 --> 00:03:38,250
when you have an issue you don't jump

00:03:36,510 --> 00:03:40,199
from this file to that file from this

00:03:38,250 --> 00:03:43,609
theory to that one you really need to

00:03:40,199 --> 00:03:46,409
follow a really strong logical process

00:03:43,609 --> 00:03:48,900
process really is the foundation of

00:03:46,409 --> 00:03:50,819
effective debugging being able to go

00:03:48,900 --> 00:03:54,540
from seeing the issue all the way

00:03:50,819 --> 00:03:56,099
through the resolution of that issue now

00:03:54,540 --> 00:03:57,810
as you go through this process more and

00:03:56,099 --> 00:04:00,180
more and the better you become at your

00:03:57,810 --> 00:04:02,040
debugging process the more experienced

00:04:00,180 --> 00:04:03,569
are going to gain you're going to gain

00:04:02,040 --> 00:04:05,939
experience with the code that you work

00:04:03,569 --> 00:04:07,739
on so if you're a symphony developer the

00:04:05,939 --> 00:04:09,299
more you debug symphony issues the more

00:04:07,739 --> 00:04:11,250
you'll learn about symphonies form

00:04:09,299 --> 00:04:13,889
components in dependency injection and

00:04:11,250 --> 00:04:15,030
validation and things like that you'll

00:04:13,889 --> 00:04:16,889
learn more about the code base that

00:04:15,030 --> 00:04:18,690
you're working on so whatever your

00:04:16,889 --> 00:04:20,519
products or a project happens to be

00:04:18,690 --> 00:04:22,889
you'll learn more and more about the

00:04:20,519 --> 00:04:24,659
different aspects of that system but you

00:04:22,889 --> 00:04:26,940
also gain experience with the tools that

00:04:24,659 --> 00:04:30,060
you use while debugging things like x2

00:04:26,940 --> 00:04:32,490
bug in your IDE other tools like s trace

00:04:30,060 --> 00:04:34,470
and as you gain more and more of that

00:04:32,490 --> 00:04:36,690
experience and you resolve more and more

00:04:34,470 --> 00:04:39,389
of those types of issues you're going to

00:04:36,690 --> 00:04:41,040
develop your intuition what I'm talking

00:04:39,389 --> 00:04:44,700
about here is not this like magical

00:04:41,040 --> 00:04:47,610
sixth sense it's really more of a

00:04:44,700 --> 00:04:49,800
logical heuristic type of approach to

00:04:47,610 --> 00:04:51,150
seeing a bug and immediately knowing

00:04:49,800 --> 00:04:53,669
what that bug is about

00:04:51,150 --> 00:04:54,930
so if you see connection timed out you

00:04:53,669 --> 00:04:56,430
immediately know that's a networking

00:04:54,930 --> 00:04:57,960
issue I need to check the firewall I

00:04:56,430 --> 00:05:00,330
need to make sure my sequel is running

00:04:57,960 --> 00:05:01,800
on that server things like that your

00:05:00,330 --> 00:05:03,720
immediate reaction isn't going to be Oh

00:05:01,800 --> 00:05:05,729
connection timed out better tomate

00:05:03,720 --> 00:05:07,260
everything to seven seven seven you kind

00:05:05,729 --> 00:05:09,510
of immediately know oh I need to look at

00:05:07,260 --> 00:05:12,840
these things I need to confirm or

00:05:09,510 --> 00:05:16,410
disprove these certain assumptions first

00:05:12,840 --> 00:05:18,660
and then move on so in order to get to

00:05:16,410 --> 00:05:20,490
this intuition or does it build up that

00:05:18,660 --> 00:05:22,770
high level of intuition and become an

00:05:20,490 --> 00:05:25,110
effective debugger all you need to do is

00:05:22,770 --> 00:05:27,240
just focus on the process and once you

00:05:25,110 --> 00:05:29,100
have that solid foundation in place that

00:05:27,240 --> 00:05:31,680
experience an intuition will come with

00:05:29,100 --> 00:05:33,500
time so I'd like to talk a little bit

00:05:31,680 --> 00:05:35,610
more about that debugging process

00:05:33,500 --> 00:05:37,560
specifically what that looks like for a

00:05:35,610 --> 00:05:39,060
more junior developer someone who's kind

00:05:37,560 --> 00:05:41,669
of new to development doesn't really

00:05:39,060 --> 00:05:43,560
have a lot of experience now when a

00:05:41,669 --> 00:05:45,660
junior developer encounters some kind of

00:05:43,560 --> 00:05:47,729
issue they're usually going to try the

00:05:45,660 --> 00:05:49,350
usual steps that have worked for them in

00:05:47,729 --> 00:05:51,270
the past to resolve different types of

00:05:49,350 --> 00:05:53,550
issues so they'll do things like

00:05:51,270 --> 00:05:55,020
clearing the application cache maybe

00:05:53,550 --> 00:05:56,240
they'll delete the vendor folder and

00:05:55,020 --> 00:05:58,289
reinstall everything with composure

00:05:56,240 --> 00:06:01,830
maybe they'll show mod the entire

00:05:58,289 --> 00:06:04,110
project to 7 7 7 on production probably

00:06:01,830 --> 00:06:05,610
not a good thing but they're gonna try

00:06:04,110 --> 00:06:07,200
it because it's worked for them in the

00:06:05,610 --> 00:06:08,940
past maybe in the past they have some

00:06:07,200 --> 00:06:10,710
kind of permissions issue and chiu

00:06:08,940 --> 00:06:11,760
modding it to seventh 7/7 worked and

00:06:10,710 --> 00:06:14,340
they didn't really understand why it

00:06:11,760 --> 00:06:15,930
works but they said oh well so it worked

00:06:14,340 --> 00:06:17,360
before maybe it'll work now so let me

00:06:15,930 --> 00:06:19,740
try that again

00:06:17,360 --> 00:06:21,870
now it's okay to go through some of

00:06:19,740 --> 00:06:23,880
these steps well maybe not the last one

00:06:21,870 --> 00:06:25,229
but it's okay to clear the cache and

00:06:23,880 --> 00:06:27,690
reinstall the pendan sees if that's

00:06:25,229 --> 00:06:29,490
really the correct solution or if you

00:06:27,690 --> 00:06:31,560
think it might be the correct solution

00:06:29,490 --> 00:06:33,300
but if you are a junior developer and

00:06:31,560 --> 00:06:35,880
you do these things I would caution you

00:06:33,300 --> 00:06:38,070
that once you complete these steps and

00:06:35,880 --> 00:06:39,000
you see that they work don't just move

00:06:38,070 --> 00:06:41,010
on with your day

00:06:39,000 --> 00:06:43,289
think about why did clearing the cache

00:06:41,010 --> 00:06:43,770
resolve this particular issue for me

00:06:43,289 --> 00:06:47,460
this

00:06:43,770 --> 00:06:49,680
whereas changing permissions didn't why

00:06:47,460 --> 00:06:51,539
did reinstall my dependencies work when

00:06:49,680 --> 00:06:53,310
clearing the cache didn't try and

00:06:51,539 --> 00:06:55,050
understand what was that fundamental

00:06:53,310 --> 00:06:56,759
nature of the bug and why did this

00:06:55,050 --> 00:07:00,720
particular solution work

00:06:56,759 --> 00:07:02,520
why did other solutions not work now if

00:07:00,720 --> 00:07:04,259
the usual steps don't work for a junior

00:07:02,520 --> 00:07:06,270
developer the next thing we'll do is ask

00:07:04,259 --> 00:07:08,789
someone else maybe that's a co-worker

00:07:06,270 --> 00:07:10,710
maybe the last someone on Stack Overflow

00:07:08,789 --> 00:07:12,599
maybe they'll google the question to

00:07:10,710 --> 00:07:14,520
figure out what the heck is going on and

00:07:12,599 --> 00:07:16,110
when they do these things they'll get a

00:07:14,520 --> 00:07:18,090
bunch of different things to try and

00:07:16,110 --> 00:07:19,919
they'll go through them let's see okay

00:07:18,090 --> 00:07:21,870
first and second ideas didn't work third

00:07:19,919 --> 00:07:24,599
one did work awesome and commit this and

00:07:21,870 --> 00:07:26,520
move on with my day again totally fine

00:07:24,599 --> 00:07:28,289
to go ask for help totally fine to try

00:07:26,520 --> 00:07:30,180
out different solutions but when you

00:07:28,289 --> 00:07:32,460
find one that works try and understand

00:07:30,180 --> 00:07:34,650
why does it work why does this solution

00:07:32,460 --> 00:07:36,840
work whereas this one didn't what was it

00:07:34,650 --> 00:07:41,159
about this bug that made this solution

00:07:36,840 --> 00:07:43,800
apply to it I think another kind of

00:07:41,159 --> 00:07:46,110
logical trap junior developers can fall

00:07:43,800 --> 00:07:48,750
into it's what's known as the XY problem

00:07:46,110 --> 00:07:52,050
so it'll be faced with some problem X

00:07:48,750 --> 00:07:53,219
maybe it's a bug that's cropped up maybe

00:07:52,050 --> 00:07:55,440
it's some new feature they need to

00:07:53,219 --> 00:07:58,650
implement and they'll think okay how do

00:07:55,440 --> 00:07:59,969
I solve X they'll think about it and

00:07:58,650 --> 00:08:02,130
then they'll realize they don't really

00:07:59,969 --> 00:08:03,779
know how to do X maybe they don't get

00:08:02,130 --> 00:08:06,539
the right answers from the colleagues on

00:08:03,779 --> 00:08:07,770
how to do X so let's say okay well I

00:08:06,539 --> 00:08:09,690
don't know how to do X but I think

00:08:07,770 --> 00:08:13,259
solution Y might work and then they'll

00:08:09,690 --> 00:08:15,270
go out and ask how do I do y the problem

00:08:13,259 --> 00:08:17,039
with this is that you're looking for a

00:08:15,270 --> 00:08:19,139
workaround when you do this you're not

00:08:17,039 --> 00:08:21,000
looking for the proper approach you're

00:08:19,139 --> 00:08:23,009
looking for a workaround to apply and

00:08:21,000 --> 00:08:25,319
you're gonna leave that in place and

00:08:23,009 --> 00:08:27,690
move on with your day the problem with

00:08:25,319 --> 00:08:29,340
workarounds is that they're improper

00:08:27,690 --> 00:08:31,319
solutions you're not actually solving

00:08:29,340 --> 00:08:33,390
the problem you want to solve you're

00:08:31,319 --> 00:08:35,010
applying a workaround and as you'll see

00:08:33,390 --> 00:08:36,779
in a moment applying these kind of

00:08:35,010 --> 00:08:40,140
workarounds and improper solutions can

00:08:36,779 --> 00:08:41,729
cause issues later now at this point I'd

00:08:40,140 --> 00:08:43,349
like to share a personal story it's a

00:08:41,729 --> 00:08:46,560
little embarrassing at least

00:08:43,349 --> 00:08:48,089
professionally speaking but about seven

00:08:46,560 --> 00:08:50,040
or eight years ago I was a junior

00:08:48,089 --> 00:08:52,740
developer I got my first very big

00:08:50,040 --> 00:08:54,270
Magento project I don't remember what

00:08:52,740 --> 00:08:56,850
version of Magento it was but it was an

00:08:54,270 --> 00:08:57,360
old one it was for a restaurant that

00:08:56,850 --> 00:08:59,010
sells

00:08:57,360 --> 00:09:02,430
seafood online and they ship it

00:08:59,010 --> 00:09:05,010
overnight on ice packs and so as part of

00:09:02,430 --> 00:09:07,140
this custom implementation we needed to

00:09:05,010 --> 00:09:09,450
build we need to do we needed to add the

00:09:07,140 --> 00:09:11,640
ability so that when the administrator

00:09:09,450 --> 00:09:14,700
went to process the order magenta would

00:09:11,640 --> 00:09:17,250
go out to the FedEx website go to FedEx

00:09:14,700 --> 00:09:19,470
web services and ask them for a shipping

00:09:17,250 --> 00:09:21,360
label and say okay FedEx we need to

00:09:19,470 --> 00:09:23,519
generate a shipping label that we can

00:09:21,360 --> 00:09:25,800
print out slop on the box and then send

00:09:23,519 --> 00:09:27,089
that off to the customer and I was able

00:09:25,800 --> 00:09:29,250
to figure out how to implement that

00:09:27,089 --> 00:09:31,440
functionality it didn't exist in that

00:09:29,250 --> 00:09:33,089
time Nam in magenta wasn't built in I

00:09:31,440 --> 00:09:35,459
had to figure out how to build that

00:09:33,089 --> 00:09:38,519
integration go out to FedEx get the data

00:09:35,459 --> 00:09:39,930
put in PDFs serve the PDF out to the

00:09:38,519 --> 00:09:42,029
administrator absolute from your

00:09:39,930 --> 00:09:43,980
developer and I was really proud of that

00:09:42,029 --> 00:09:46,470
I was able to figure that out and it

00:09:43,980 --> 00:09:49,050
worked for several years so that was one

00:09:46,470 --> 00:09:51,570
of the things I needed to implement the

00:09:49,050 --> 00:09:54,180
second thing I needed to implement was a

00:09:51,570 --> 00:09:56,670
workaround basically the backend of

00:09:54,180 --> 00:09:58,920
Magento was not compatible with ie9 at

00:09:56,670 --> 00:10:01,050
the time worked perfectly fine in an

00:09:58,920 --> 00:10:02,430
Internet Explorer 8 for some reason

00:10:01,050 --> 00:10:04,890
there were just all these JavaScript

00:10:02,430 --> 00:10:07,170
errors popping up and so to resolve that

00:10:04,890 --> 00:10:09,959
I know I needed to add this little bit

00:10:07,170 --> 00:10:11,910
of HTML to every page in the backend of

00:10:09,959 --> 00:10:13,860
the website so this was the proper

00:10:11,910 --> 00:10:16,589
solution I knew I needed to add this to

00:10:13,860 --> 00:10:18,180
make it work but the thing was I didn't

00:10:16,589 --> 00:10:20,370
know how to add this to every page in

00:10:18,180 --> 00:10:21,870
the backend of Magento being a junior

00:10:20,370 --> 00:10:23,550
developer I didn't know what was the

00:10:21,870 --> 00:10:26,310
best way what was the right way what's

00:10:23,550 --> 00:10:28,230
the easy way what's the hard way so I

00:10:26,310 --> 00:10:31,050
thought okay well I don't know how to do

00:10:28,230 --> 00:10:34,320
this exactly but I think I have an idea

00:10:31,050 --> 00:10:36,870
what if I look for the mom pre response

00:10:34,320 --> 00:10:39,420
hook just hook into that and then what

00:10:36,870 --> 00:10:42,240
I'll do is something like this I will

00:10:39,420 --> 00:10:44,519
get the body and then use preg replace

00:10:42,240 --> 00:10:46,529
to look for a head tag and when I find

00:10:44,519 --> 00:10:50,510
the head tag I'll just inject this HTML

00:10:46,529 --> 00:10:52,649
and surprisingly this actually worked

00:10:50,510 --> 00:10:54,269
so this solve the issue the

00:10:52,649 --> 00:10:56,190
administrators were able to use Internet

00:10:54,269 --> 00:10:59,970
Explorer 9 to go process their orders

00:10:56,190 --> 00:11:02,430
life was great fast forward five years

00:10:59,970 --> 00:11:05,520
the PDFs that were working just fine

00:11:02,430 --> 00:11:07,410
stopped working the admins would go to

00:11:05,520 --> 00:11:09,070
download the PDF and they'd try to open

00:11:07,410 --> 00:11:11,530
it up and would say it's corrupted

00:11:09,070 --> 00:11:13,240
there was definitely data in the PDF I

00:11:11,530 --> 00:11:15,790
confirm that we were going out to the

00:11:13,240 --> 00:11:17,500
api's and getting that data back so I

00:11:15,790 --> 00:11:19,750
thought okay this is strange let me pop

00:11:17,500 --> 00:11:23,560
this PDF open in a text editor to see

00:11:19,750 --> 00:11:25,660
what's inside you'll see right there we

00:11:23,560 --> 00:11:30,070
have an HTML meta tag inside of this

00:11:25,660 --> 00:11:33,040
base 85 encoded data why did this happen

00:11:30,070 --> 00:11:34,780
well it turns out that I was listening

00:11:33,040 --> 00:11:37,110
for every response coming from Magento

00:11:34,780 --> 00:11:39,790
including when it served up static files

00:11:37,110 --> 00:11:42,430
okay but aren't we looking for this head

00:11:39,790 --> 00:11:45,670
tag here well we are and it turns out

00:11:42,430 --> 00:11:49,690
bass 85 and coded data can include

00:11:45,670 --> 00:11:51,460
characters less than H EA D so what

00:11:49,690 --> 00:11:52,840
lesson do we learn from this number one

00:11:51,460 --> 00:11:55,990
don't parse HTML with regular

00:11:52,840 --> 00:11:57,820
expressions I'll have a bad time but

00:11:55,990 --> 00:12:00,370
more importantly solve problems the

00:11:57,820 --> 00:12:01,870
right way even though this kind of

00:12:00,370 --> 00:12:03,940
solved the solution at the time and it

00:12:01,870 --> 00:12:06,010
worked for several years it did cause an

00:12:03,940 --> 00:12:07,510
issue down the line that was an engine

00:12:06,010 --> 00:12:09,700
that was an issue that impacted the

00:12:07,510 --> 00:12:12,220
customer and they were not happy and we

00:12:09,700 --> 00:12:12,640
had to fix that for free lesson learned

00:12:12,220 --> 00:12:17,170
there

00:12:12,640 --> 00:12:18,940
I think another trap that we can

00:12:17,170 --> 00:12:21,640
sometimes fall into is this form a

00:12:18,940 --> 00:12:23,770
magical thinking so sometimes we'll see

00:12:21,640 --> 00:12:26,680
an issue and we'll think to ourselves I

00:12:23,770 --> 00:12:29,050
don't know why this is doing this why is

00:12:26,680 --> 00:12:31,300
it behaving this way for some reason my

00:12:29,050 --> 00:12:34,140
code just isn't working right this

00:12:31,300 --> 00:12:36,640
behavior just doesn't make any sense and

00:12:34,140 --> 00:12:38,290
if you think these thoughts you're

00:12:36,640 --> 00:12:39,640
really kind of thinking about the

00:12:38,290 --> 00:12:41,770
application the computer has this

00:12:39,640 --> 00:12:44,170
magical black box with a mind of its own

00:12:41,770 --> 00:12:46,480
it does its own things but that's not

00:12:44,170 --> 00:12:49,660
what a computer is computers are logical

00:12:46,480 --> 00:12:53,520
machines they only know two things once

00:12:49,660 --> 00:12:55,750
and zeros true/false yes no on/off

00:12:53,520 --> 00:12:58,900
there's no maybe value

00:12:55,750 --> 00:13:01,300
there's no sometimes--but it's yes or no

00:12:58,900 --> 00:13:04,690
zero or one its boolean is logical

00:13:01,300 --> 00:13:07,090
there's no randomness to it and a

00:13:04,690 --> 00:13:09,160
computer's are logical then the code

00:13:07,090 --> 00:13:11,680
that runs on them must also be logical

00:13:09,160 --> 00:13:14,890
right and if you have a bug in your code

00:13:11,680 --> 00:13:16,660
a bug is just the defect in the code but

00:13:14,890 --> 00:13:19,870
that bug and defect as a whole is still

00:13:16,660 --> 00:13:21,730
logical so therefore bugs must also be

00:13:19,870 --> 00:13:22,630
logical they must have a logical

00:13:21,730 --> 00:13:24,339
explanation

00:13:22,630 --> 00:13:26,529
sometimes that explanation isn't

00:13:24,339 --> 00:13:28,899
immediately obvious but there is always

00:13:26,529 --> 00:13:31,839
a logical explanation you just need to

00:13:28,899 --> 00:13:34,240
be persistent enough to find it into

00:13:31,839 --> 00:13:35,860
that end I really like this quote it's

00:13:34,240 --> 00:13:38,620
from a guy named Nick parlante

00:13:35,860 --> 00:13:40,509
who says the bug is not moving around in

00:13:38,620 --> 00:13:43,360
your code trying to trick or evade you

00:13:40,509 --> 00:13:45,430
it is just sitting in one place doing

00:13:43,360 --> 00:13:46,389
the wrong thing in the same way every

00:13:45,430 --> 00:13:48,910
time

00:13:46,389 --> 00:13:50,370
when you fire up your debugger to figure

00:13:48,910 --> 00:13:53,380
out why something isn't working if

00:13:50,370 --> 00:13:54,940
you're going through file a when you're

00:13:53,380 --> 00:13:56,680
stepping through line by line the bug

00:13:54,940 --> 00:13:58,569
isn't suddenly jumping into file B and

00:13:56,680 --> 00:14:01,029
then when you go into B it's not jumping

00:13:58,569 --> 00:14:02,740
out into file C it's right there you

00:14:01,029 --> 00:14:06,009
just need to be persistent enough to

00:14:02,740 --> 00:14:08,620
find it now when I'm debugging issues

00:14:06,009 --> 00:14:10,930
typically ice always assumed that my

00:14:08,620 --> 00:14:13,209
code is the problem because nine times

00:14:10,930 --> 00:14:16,360
out of ten it is my code that's the

00:14:13,209 --> 00:14:18,160
problem my code has a bug in it and so

00:14:16,360 --> 00:14:20,649
if I'm spending most of my time

00:14:18,160 --> 00:14:23,949
debugging you know debugging my own code

00:14:20,649 --> 00:14:26,440
my own issues if a new issue pops up and

00:14:23,949 --> 00:14:28,810
some other part of the code base it just

00:14:26,440 --> 00:14:30,399
makes sense from an efficiency point of

00:14:28,810 --> 00:14:32,680
view to assume that my code must be the

00:14:30,399 --> 00:14:35,800
problem because statistically speaking

00:14:32,680 --> 00:14:37,870
it probably is so instead of immediately

00:14:35,800 --> 00:14:39,339
saying oh Symphony's stupid they must be

00:14:37,870 --> 00:14:41,829
doing something dumb I'm totally using

00:14:39,339 --> 00:14:43,389
this the right way I'll say no no I'm

00:14:41,829 --> 00:14:45,220
gonna take a step back and I'm gonna

00:14:43,389 --> 00:14:47,889
validate that my code does indeed work

00:14:45,220 --> 00:14:49,509
the way I think it should work and that

00:14:47,889 --> 00:14:51,490
I'm getting the right values out that I

00:14:49,509 --> 00:14:54,189
have the right state and I'll go through

00:14:51,490 --> 00:14:55,449
line by line and confirm that everything

00:14:54,189 --> 00:14:57,130
works as expected

00:14:55,449 --> 00:15:00,189
and that I'm not making any kind of

00:14:57,130 --> 00:15:02,199
faulty assumptions then and only then

00:15:00,189 --> 00:15:04,329
once I've confirmed everything works and

00:15:02,199 --> 00:15:06,579
I haven't made any untested invalid

00:15:04,329 --> 00:15:08,680
assumptions then I'll go into the

00:15:06,579 --> 00:15:10,600
third-party library or the other

00:15:08,680 --> 00:15:12,670
parts of the code base and look at that

00:15:10,600 --> 00:15:15,189
to see if the culprit might be in there

00:15:12,670 --> 00:15:17,910
again just trying to do things as

00:15:15,189 --> 00:15:20,740
efficiently and effectively as possible

00:15:17,910 --> 00:15:22,480
so if you come across an issue I would

00:15:20,740 --> 00:15:25,029
challenge you to assume that your code

00:15:22,480 --> 00:15:26,649
is the problem first start there try and

00:15:25,029 --> 00:15:28,600
confirm whether or not your code does or

00:15:26,649 --> 00:15:30,730
does not have an issue and if you're

00:15:28,600 --> 00:15:32,889
helping someone else out assume that

00:15:30,730 --> 00:15:34,990
their code is the problem you don't have

00:15:32,889 --> 00:15:36,590
to be confrontational about it you don't

00:15:34,990 --> 00:15:38,810
have to say sorry Ben you must

00:15:36,590 --> 00:15:41,180
idiot did you double-check this thing

00:15:38,810 --> 00:15:43,610
you know you can you can go about it in

00:15:41,180 --> 00:15:45,110
a nice way but just make sure that

00:15:43,610 --> 00:15:47,000
they're not making any invalid

00:15:45,110 --> 00:15:49,310
assumptions that might be wasting their

00:15:47,000 --> 00:15:50,870
time try and help them get unstuck by

00:15:49,310 --> 00:15:57,170
confirming that their code does indeed

00:15:50,870 --> 00:15:59,090
work so we've talked a little bit about

00:15:57,170 --> 00:16:00,440
the philosophy of debugging now I'd like

00:15:59,090 --> 00:16:02,540
to get into something a little more

00:16:00,440 --> 00:16:04,550
practical which is the systematic

00:16:02,540 --> 00:16:07,160
approach that I take whenever I'm faced

00:16:04,550 --> 00:16:08,270
with an issue there's five steps to it

00:16:07,160 --> 00:16:11,210
and I'll go through each one in a little

00:16:08,270 --> 00:16:12,590
more detail but at a high level first

00:16:11,210 --> 00:16:16,220
step is to gather information about the

00:16:12,590 --> 00:16:19,160
issue then replicate the issue identify

00:16:16,220 --> 00:16:21,710
the culprit fix it retest it and then

00:16:19,160 --> 00:16:23,540
mitigate future occurrences now this

00:16:21,710 --> 00:16:25,130
isn't something that I just thought up

00:16:23,540 --> 00:16:28,220
one day this is actually something that

00:16:25,130 --> 00:16:30,140
has kind of evolved over time right now

00:16:28,220 --> 00:16:34,010
I'm 28 years old I've been programming

00:16:30,140 --> 00:16:35,870
since I was 8 on an old Apple 2e so over

00:16:34,010 --> 00:16:38,150
that 20 year span this is just something

00:16:35,870 --> 00:16:39,380
that has evolved naturally and it was

00:16:38,150 --> 00:16:41,540
until I went to put this presentation

00:16:39,380 --> 00:16:43,400
together that I realized that I actually

00:16:41,540 --> 00:16:45,770
have this systematic approach in place

00:16:43,400 --> 00:16:47,500
that kind of evolved naturally so this

00:16:45,770 --> 00:16:51,170
is what I'd like to share with you today

00:16:47,500 --> 00:16:53,300
so step 1 gather information when you

00:16:51,170 --> 00:16:55,220
first come across an issue where you

00:16:53,300 --> 00:16:56,930
counter an issue or your users encounter

00:16:55,220 --> 00:16:59,780
an issue you want to gather information

00:16:56,930 --> 00:17:01,370
about what that bug is the very first

00:16:59,780 --> 00:17:03,320
thing you should define is what is the

00:17:01,370 --> 00:17:06,200
expected behavior versus what is the

00:17:03,320 --> 00:17:08,270
actual behavior I expect that when I

00:17:06,200 --> 00:17:10,010
fill out this form hit this button I'll

00:17:08,270 --> 00:17:12,230
get a green success message and this

00:17:10,010 --> 00:17:14,000
will be in the database actual behavior

00:17:12,230 --> 00:17:16,220
as I get a red message the data is not

00:17:14,000 --> 00:17:17,600
on the database now you don't have to

00:17:16,220 --> 00:17:19,250
write that down if you don't want to

00:17:17,600 --> 00:17:21,790
just kind of get that in your head what

00:17:19,250 --> 00:17:23,959
is the expected versus actual behavior

00:17:21,790 --> 00:17:27,440
some other useful information to gather

00:17:23,959 --> 00:17:29,120
um number one error messages if you get

00:17:27,440 --> 00:17:31,250
a particular error message error

00:17:29,120 --> 00:17:33,440
messages are nice I love error messages

00:17:31,250 --> 00:17:35,960
because you can google them or search

00:17:33,440 --> 00:17:37,640
your codebase for them and if you at

00:17:35,960 --> 00:17:40,190
least one of those two will give you a

00:17:37,640 --> 00:17:42,320
result so if I come if I get a certain

00:17:40,190 --> 00:17:44,750
error message and I google um error

00:17:42,320 --> 00:17:46,940
message I might suggest like a Stack

00:17:44,750 --> 00:17:48,350
Overflow post explaining oh this our

00:17:46,940 --> 00:17:49,300
message means this you need to go check

00:17:48,350 --> 00:17:52,420
that part if your

00:17:49,300 --> 00:17:54,370
or if I can't find any results on Google

00:17:52,420 --> 00:17:55,720
I'll search my own codebase and I'll see

00:17:54,370 --> 00:17:58,300
exactly where that exception was thrown

00:17:55,720 --> 00:18:01,030
this particular string was thrown from

00:17:58,300 --> 00:18:02,350
this class online 2:38 I can go right in

00:18:01,030 --> 00:18:04,750
there and figure out what's going on

00:18:02,350 --> 00:18:06,660
so error messages are your friend log

00:18:04,750 --> 00:18:08,920
them use them they're awesome

00:18:06,660 --> 00:18:11,710
even better than an error message is a

00:18:08,920 --> 00:18:14,320
stack trace a stack trace shows you the

00:18:11,710 --> 00:18:16,809
exact path of execution that your code

00:18:14,320 --> 00:18:19,840
took it'll show you okay the error was

00:18:16,809 --> 00:18:21,280
thrown down here this guy this function

00:18:19,840 --> 00:18:22,780
was called by this one which is called

00:18:21,280 --> 00:18:25,570
by this class which is called by this

00:18:22,780 --> 00:18:28,240
you can kind of visualize in your head

00:18:25,570 --> 00:18:30,340
okay what path did the execution take

00:18:28,240 --> 00:18:33,370
through my code why was this exception

00:18:30,340 --> 00:18:33,910
thrown if the issue is occurring on the

00:18:33,370 --> 00:18:36,580
front end

00:18:33,910 --> 00:18:39,160
grab some screenshots screenshots are

00:18:36,580 --> 00:18:41,980
really nice because especially if you

00:18:39,160 --> 00:18:45,160
get one of the full desktop because

00:18:41,980 --> 00:18:47,140
it'll show you what browser is what

00:18:45,160 --> 00:18:49,690
browser has the issue what operating

00:18:47,140 --> 00:18:51,700
system it is it'll show you what

00:18:49,690 --> 00:18:53,530
information was in the form when it was

00:18:51,700 --> 00:18:54,910
submitted if there is a form involved it

00:18:53,530 --> 00:18:57,190
will show you any kind of error messages

00:18:54,910 --> 00:18:59,230
you have the URL bar what's really nice

00:18:57,190 --> 00:19:01,540
about screenshots is that non-technical

00:18:59,230 --> 00:19:04,059
users can get these for you you might

00:19:01,540 --> 00:19:06,160
get them in a Word document you might

00:19:04,059 --> 00:19:08,890
get them faxed to you but you can get

00:19:06,160 --> 00:19:10,679
screenshots from pretty much anyone so

00:19:08,890 --> 00:19:12,730
those are really valuable as well and

00:19:10,679 --> 00:19:14,320
then the last two things that are really

00:19:12,730 --> 00:19:17,260
nice to gather are at the date and time

00:19:14,320 --> 00:19:18,820
that the issue occurred and log entries

00:19:17,260 --> 00:19:20,350
from around that time there might be

00:19:18,820 --> 00:19:22,510
interesting tidbits in the log about

00:19:20,350 --> 00:19:24,460
what was going on at that time maybe in

00:19:22,510 --> 00:19:26,050
the same request maybe in a previous

00:19:24,460 --> 00:19:27,270
request they'll kind of guide you to

00:19:26,050 --> 00:19:29,679
that answer

00:19:27,270 --> 00:19:31,210
so once you've kind of defined those

00:19:29,679 --> 00:19:33,610
symptoms and you've gathered as much

00:19:31,210 --> 00:19:35,550
information as you can the next step you

00:19:33,610 --> 00:19:38,140
want to take is to replicate the issue

00:19:35,550 --> 00:19:40,630
you really want to be a hundred percent

00:19:38,140 --> 00:19:42,850
sure that the steps you've identified to

00:19:40,630 --> 00:19:45,700
replicate the issue will in fact make

00:19:42,850 --> 00:19:48,250
that issue occur again let's assume that

00:19:45,700 --> 00:19:49,570
you aren't able to put together exact

00:19:48,250 --> 00:19:51,340
description of how to replicate the

00:19:49,570 --> 00:19:53,230
issue let's say you put together three

00:19:51,340 --> 00:19:55,330
steps and then you say okay well this

00:19:53,230 --> 00:19:56,980
only works half of the time these three

00:19:55,330 --> 00:19:59,740
steps will only cause the issue to occur

00:19:56,980 --> 00:20:01,510
half at the time well when you go to

00:19:59,740 --> 00:20:04,120
resolve the issue and retest

00:20:01,510 --> 00:20:05,740
later how do you know that things are

00:20:04,120 --> 00:20:07,360
working because you fix them or things

00:20:05,740 --> 00:20:08,920
are working because it was that half of

00:20:07,360 --> 00:20:11,380
the time that things just magically work

00:20:08,920 --> 00:20:13,180
you won't really know unless you're able

00:20:11,380 --> 00:20:15,970
to replicate the issue with 100%

00:20:13,180 --> 00:20:19,840
certainty now I know there are some edge

00:20:15,970 --> 00:20:23,070
cases maybe there's some kind of weird

00:20:19,840 --> 00:20:25,840
I don't know caching issue some kind of

00:20:23,070 --> 00:20:27,610
forgetting the word race condition and

00:20:25,840 --> 00:20:29,260
that's the word maybe there's some kind

00:20:27,610 --> 00:20:30,940
of you know race condition going on

00:20:29,260 --> 00:20:32,290
where this you only occurs if two people

00:20:30,940 --> 00:20:34,030
are signed in at the same exact

00:20:32,290 --> 00:20:36,730
millisecond and that can be hard to

00:20:34,030 --> 00:20:38,200
replicate in those cases do your best or

00:20:36,730 --> 00:20:41,560
at least try and identify in the code

00:20:38,200 --> 00:20:44,230
yes this could happen when I take those

00:20:41,560 --> 00:20:46,570
steps now you can do this manually or

00:20:44,230 --> 00:20:48,850
automatically whichever you prefer but

00:20:46,570 --> 00:20:51,840
again it's really important to be able

00:20:48,850 --> 00:20:54,250
to replicate this with 100% certainty

00:20:51,840 --> 00:20:55,690
now that we're able to replicate the

00:20:54,250 --> 00:20:57,490
issue and we know what the symptoms are

00:20:55,690 --> 00:21:00,010
now we can go ahead and try and identify

00:20:57,490 --> 00:21:02,800
the culprit and as we do this we want to

00:21:00,010 --> 00:21:05,740
be really methodical on how we go

00:21:02,800 --> 00:21:08,050
looking for that culprit we want to

00:21:05,740 --> 00:21:09,760
assure that we're not making any faulty

00:21:08,050 --> 00:21:11,500
assumptions we're not assuming that oh

00:21:09,760 --> 00:21:13,330
this part of my codebase is working fine

00:21:11,500 --> 00:21:15,430
or oh yeah that system that's been

00:21:13,330 --> 00:21:17,970
working fine for years that no problems

00:21:15,430 --> 00:21:21,160
there don't make any assumptions

00:21:17,970 --> 00:21:23,350
challenge everything and when you find

00:21:21,160 --> 00:21:25,420
the bug try and understand the bug

00:21:23,350 --> 00:21:27,790
understand the fundamental nature of

00:21:25,420 --> 00:21:29,800
that book why is it behaving in this way

00:21:27,790 --> 00:21:32,920
why is it affecting these systems and

00:21:29,800 --> 00:21:35,800
not these ones why is the bug doing what

00:21:32,920 --> 00:21:38,020
it's doing once you've identified the

00:21:35,800 --> 00:21:41,230
culprit now you can go ahead and fix

00:21:38,020 --> 00:21:43,870
that issue once you fix the issue retest

00:21:41,230 --> 00:21:45,310
go through those replication steps again

00:21:43,870 --> 00:21:47,920
and see if we're able to replicate the

00:21:45,310 --> 00:21:50,440
issue and when you do try and put a

00:21:47,920 --> 00:21:52,810
solution in place try to avoid that XY

00:21:50,440 --> 00:21:55,080
problem that I talked about earlier do

00:21:52,810 --> 00:21:57,670
not add any temporary workarounds

00:21:55,080 --> 00:22:00,250
temporary workarounds add technical debt

00:21:57,670 --> 00:22:02,710
they could introduce other issues and

00:22:00,250 --> 00:22:05,470
quite often they never get replaced with

00:22:02,710 --> 00:22:07,210
a permanent true solution your temporary

00:22:05,470 --> 00:22:10,840
workaround is never going to be

00:22:07,210 --> 00:22:12,460
temporary personally I work at a firm

00:22:10,840 --> 00:22:15,610
that makes websites for other clients

00:22:12,460 --> 00:22:15,879
they pay us to make websites my client

00:22:15,610 --> 00:22:17,529
is

00:22:15,879 --> 00:22:19,269
not gonna pay me to go back and fix that

00:22:17,529 --> 00:22:21,129
temporary workaround that I put in

00:22:19,269 --> 00:22:22,899
because in their eyes they already paid

00:22:21,129 --> 00:22:24,699
me to fix the issue and I fixed it so

00:22:22,899 --> 00:22:26,499
that's gonna stay in their that

00:22:24,699 --> 00:22:27,819
technical debt those other issues I've

00:22:26,499 --> 00:22:30,369
introduced are gonna stay in the

00:22:27,819 --> 00:22:31,629
codebase so make sure that you're

00:22:30,369 --> 00:22:35,109
avoiding those kinds of temporary

00:22:31,629 --> 00:22:36,729
workarounds and then lastly the last

00:22:35,109 --> 00:22:39,819
step of this process is to mitigate

00:22:36,729 --> 00:22:42,879
future occurrences add an automated test

00:22:39,819 --> 00:22:44,859
if you're doing TDD great add your tests

00:22:42,879 --> 00:22:46,869
up front and if you're not that's fine

00:22:44,859 --> 00:22:50,889
too you can add an automated s after the

00:22:46,869 --> 00:22:52,899
fact that's totally ok but mitigating

00:22:50,889 --> 00:22:55,599
future occurrences goes beyond just

00:22:52,899 --> 00:22:57,669
adding automated tests it also means

00:22:55,599 --> 00:22:59,889
preventing other people or helping other

00:22:57,669 --> 00:23:01,779
people prevent the same kind of issues

00:22:59,889 --> 00:23:03,849
from occurring so you can share your new

00:23:01,779 --> 00:23:06,759
knowledge with others maybe you came

00:23:03,849 --> 00:23:07,929
across this really bizarre issue that

00:23:06,759 --> 00:23:09,669
happened because you can figured

00:23:07,929 --> 00:23:11,529
something a certain way go to the

00:23:09,669 --> 00:23:12,849
documentation put a note hey watch out

00:23:11,529 --> 00:23:15,119
for this educates make sure you're

00:23:12,849 --> 00:23:17,259
configuring it this way and not that way

00:23:15,119 --> 00:23:18,909
maybe it took you a couple hours to

00:23:17,259 --> 00:23:20,619
debug an issue and it was kind of a

00:23:18,909 --> 00:23:21,940
thrilling experience going throughout

00:23:20,619 --> 00:23:24,009
the codebase and there was just like

00:23:21,940 --> 00:23:25,119
crazy answer to why everything was

00:23:24,009 --> 00:23:27,609
happening you want to tell the whole

00:23:25,119 --> 00:23:29,409
world awesome go write a blog post go

00:23:27,609 --> 00:23:31,209
share that awesome story about how you

00:23:29,409 --> 00:23:33,699
debug that really really difficult issue

00:23:31,209 --> 00:23:36,190
and if you ask the question on Stack

00:23:33,699 --> 00:23:38,469
Overflow it's totally ok to go back and

00:23:36,190 --> 00:23:40,749
answer your own question and when you do

00:23:38,469 --> 00:23:43,569
that don't just say alright solved it

00:23:40,749 --> 00:23:45,729
nevermind don't need help go and list

00:23:43,569 --> 00:23:47,769
out what you did say this is the

00:23:45,729 --> 00:23:50,649
solution I implemented and this is why

00:23:47,769 --> 00:23:52,239
it works that'll be really helpful to

00:23:50,649 --> 00:23:54,369
someone else who has the same issue in

00:23:52,239 --> 00:23:56,139
the future they stumble across your post

00:23:54,369 --> 00:23:57,669
and see that great explanation that

00:23:56,139 --> 00:23:59,949
you've left behind for them you've

00:23:57,669 --> 00:24:02,649
helped them to overcome that type of

00:23:59,949 --> 00:24:05,139
issue in the future and then of course

00:24:02,649 --> 00:24:07,209
if the issue was indeed in a third-party

00:24:05,139 --> 00:24:08,379
library or a framework and you've

00:24:07,209 --> 00:24:10,419
confirmed that and you've written a

00:24:08,379 --> 00:24:11,709
patch go ahead and submit that upstream

00:24:10,419 --> 00:24:13,199
so that other people can avoid that

00:24:11,709 --> 00:24:15,969
issue as well

00:24:13,199 --> 00:24:19,269
so to recap that five step process

00:24:15,969 --> 00:24:21,749
number one we gather information two we

00:24:19,269 --> 00:24:24,819
replicate the issue with 100% certainty

00:24:21,749 --> 00:24:27,249
three we identify the culprit from there

00:24:24,819 --> 00:24:29,020
we fix and retest and then lastly we

00:24:27,249 --> 00:24:31,840
mitigate future occurrences

00:24:29,020 --> 00:24:33,520
and by using this five-step process I've

00:24:31,840 --> 00:24:35,860
personally seen some great long-term

00:24:33,520 --> 00:24:37,210
results I think you will too if you are

00:24:35,860 --> 00:24:40,540
looking for something and you decide to

00:24:37,210 --> 00:24:42,340
adopt this number one I've gained a lot

00:24:40,540 --> 00:24:43,870
of experience I've gained an experience

00:24:42,340 --> 00:24:45,450
with the different tools that I use with

00:24:43,870 --> 00:24:48,160
the different code bases I've worked on

00:24:45,450 --> 00:24:50,590
I've learned how different systems work

00:24:48,160 --> 00:24:52,420
for me inside out I can tell you all

00:24:50,590 --> 00:24:54,130
about Symphony's dependency injection

00:24:52,420 --> 00:24:56,200
not because I wrote it not because I've

00:24:54,130 --> 00:24:57,640
contributed to it but because I've

00:24:56,200 --> 00:24:59,560
debugged it and I've bugged it several

00:24:57,640 --> 00:25:02,200
times so I kind of have you know a good

00:24:59,560 --> 00:25:03,790
idea what's going on there and I've also

00:25:02,200 --> 00:25:06,400
been able to build up this mental

00:25:03,790 --> 00:25:08,830
library of heuristics so that when I see

00:25:06,400 --> 00:25:11,170
an issue that intuition just immediately

00:25:08,830 --> 00:25:13,060
clicks and says yep that's that kind of

00:25:11,170 --> 00:25:14,650
issue that's a networking issue that's a

00:25:13,060 --> 00:25:16,840
race condition that's permissions issue

00:25:14,650 --> 00:25:19,060
my mind just immediately jumps to that I

00:25:16,840 --> 00:25:22,750
don't have to waste any time looking at

00:25:19,060 --> 00:25:25,270
other false scenarios but perhaps most

00:25:22,750 --> 00:25:27,460
importantly having a solid process like

00:25:25,270 --> 00:25:30,190
this will boost your confidence I'm

00:25:27,460 --> 00:25:32,650
primarily a PHP developer but lately

00:25:30,190 --> 00:25:34,600
I've been getting into Python I've never

00:25:32,650 --> 00:25:36,760
taken a class on Python I've never read

00:25:34,600 --> 00:25:39,190
a book on Python but I know how to debug

00:25:36,760 --> 00:25:42,880
things I know how to search Google I

00:25:39,190 --> 00:25:44,080
know how to log things because I googled

00:25:42,880 --> 00:25:47,080
it and I know how to put that in there

00:25:44,080 --> 00:25:48,880
so I can work on Python code granted I'm

00:25:47,080 --> 00:25:50,950
gonna be really slow at it I may not

00:25:48,880 --> 00:25:52,180
write the best code but I'm confident

00:25:50,950 --> 00:25:54,580
that I can write something that works

00:25:52,180 --> 00:25:58,330
and you can use that too if you have

00:25:54,580 --> 00:26:02,110
that strong solid foundation that solid

00:25:58,330 --> 00:26:05,320
process in place all right so I talked a

00:26:02,110 --> 00:26:08,050
lot about process sometimes there are

00:26:05,320 --> 00:26:10,500
certain types of bugs that this process

00:26:08,050 --> 00:26:12,790
maybe it'll work for maybe it won't

00:26:10,500 --> 00:26:14,920
there are a lot of really specific tools

00:26:12,790 --> 00:26:16,540
and techniques you can use when you're

00:26:14,920 --> 00:26:18,580
looking into different types of issues

00:26:16,540 --> 00:26:20,470
and different types of problems so I'd

00:26:18,580 --> 00:26:23,680
like to share some of those specific

00:26:20,470 --> 00:26:25,210
tools and techniques with you today now

00:26:23,680 --> 00:26:27,820
there are two essential tools that I

00:26:25,210 --> 00:26:31,480
think every developer should have a good

00:26:27,820 --> 00:26:33,730
IDE and an interactive debugger now some

00:26:31,480 --> 00:26:36,610
people will say a good IDE I don't need

00:26:33,730 --> 00:26:38,530
an ID I'm just as happy in vim or Nano

00:26:36,610 --> 00:26:41,020
and that works for me and if that's you

00:26:38,530 --> 00:26:43,690
then also personally that's not me

00:26:41,020 --> 00:26:45,580
that's not most of my dream

00:26:43,690 --> 00:26:47,320
for them I'd like to set them up with

00:26:45,580 --> 00:26:50,860
the best equipment that they can have

00:26:47,320 --> 00:26:52,960
the equipment that will get them to be

00:26:50,860 --> 00:26:55,450
more efficient at development and

00:26:52,960 --> 00:26:57,400
debugging so in my opinion a good IDE

00:26:55,450 --> 00:26:59,410
should have these as minimum features

00:26:57,400 --> 00:27:01,060
who should have syntax highlighting so

00:26:59,410 --> 00:27:03,340
you know if you forgot a semicolon or

00:27:01,060 --> 00:27:05,590
forgot a closing parenthesis

00:27:03,340 --> 00:27:07,170
it'll have Auto completion so you don't

00:27:05,590 --> 00:27:09,280
fat-finger a function name or

00:27:07,170 --> 00:27:10,240
accidentally do needle haystack instead

00:27:09,280 --> 00:27:12,700
of haystack needle

00:27:10,240 --> 00:27:14,530
it'll have fast code navigation so you

00:27:12,700 --> 00:27:17,020
can jump from one file to the next and

00:27:14,530 --> 00:27:19,270
see okay where is this class defined

00:27:17,020 --> 00:27:20,890
where is this variable being used allow

00:27:19,270 --> 00:27:23,500
you to refactor your code quickly and

00:27:20,890 --> 00:27:26,040
then of course a good IDE should also

00:27:23,500 --> 00:27:28,090
have an interactive debugger integrate

00:27:26,040 --> 00:27:30,030
I'm sure most of you know what an

00:27:28,090 --> 00:27:33,340
interactive debugger is but just in case

00:27:30,030 --> 00:27:36,130
an ID sorry an interactive debugger

00:27:33,340 --> 00:27:38,800
allows you to pause live code execution

00:27:36,130 --> 00:27:41,230
so as PHP is running all the lines in

00:27:38,800 --> 00:27:44,290
your file you you can tell PHP hey stop

00:27:41,230 --> 00:27:46,210
on line 123 and you do that by setting a

00:27:44,290 --> 00:27:49,300
breakpoint you can say always stop on

00:27:46,210 --> 00:27:52,000
line 123 or you can say always stop if

00:27:49,300 --> 00:27:54,520
this condition is true if variable a is

00:27:52,000 --> 00:27:56,230
set to the value 42 or if B is false or

00:27:54,520 --> 00:27:58,630
whatever you need which is really

00:27:56,230 --> 00:28:00,520
powerful and then from there once you've

00:27:58,630 --> 00:28:02,620
stopped the execution you can step

00:28:00,520 --> 00:28:04,810
through line by line you can say okay

00:28:02,620 --> 00:28:06,670
PHP let's run the next line and see what

00:28:04,810 --> 00:28:08,890
happens let's run the one after that and

00:28:06,670 --> 00:28:10,540
as you do that you can examine the

00:28:08,890 --> 00:28:13,330
variables and see how they change over

00:28:10,540 --> 00:28:16,270
time you can even explore the call stack

00:28:13,330 --> 00:28:19,330
so if you're stopped in file C on some

00:28:16,270 --> 00:28:21,700
line you can say okay I know files this

00:28:19,330 --> 00:28:23,620
thing in file C was called from B let me

00:28:21,700 --> 00:28:25,060
jump back out to that point in time and

00:28:23,620 --> 00:28:27,910
we'll see what was happening up there

00:28:25,060 --> 00:28:30,820
that caused C to be wrong so interactive

00:28:27,910 --> 00:28:32,320
bugger really awesome tool you should

00:28:30,820 --> 00:28:35,860
definitely look into it if you don't use

00:28:32,320 --> 00:28:38,650
once a day now in terms of techniques

00:28:35,860 --> 00:28:41,410
there are six specific techniques I like

00:28:38,650 --> 00:28:44,440
to share with you first one is tracing

00:28:41,410 --> 00:28:45,880
backwards from a known issue after that

00:28:44,440 --> 00:28:47,920
we'll talk about tracing forwards from

00:28:45,880 --> 00:28:50,560
the start and simplifying that with a

00:28:47,920 --> 00:28:52,630
binary search approach I'd also like to

00:28:50,560 --> 00:28:55,300
share some more specific tools that are

00:28:52,630 --> 00:28:56,380
useful in very specific problems also

00:28:55,300 --> 00:28:58,960
talk about getting

00:28:56,380 --> 00:29:00,550
help and taking a break so this is the

00:28:58,960 --> 00:29:01,780
final section of the talk and I'll go

00:29:00,550 --> 00:29:04,720
through these in a little more detail

00:29:01,780 --> 00:29:06,010
right now so the first technique here

00:29:04,720 --> 00:29:08,350
tracing backwards

00:29:06,010 --> 00:29:10,330
this technique is one that you would use

00:29:08,350 --> 00:29:13,030
with an interactive debugger like x2

00:29:10,330 --> 00:29:16,060
book and you use this technique when you

00:29:13,030 --> 00:29:19,120
know what line is throwing the error so

00:29:16,060 --> 00:29:19,810
you know that line 42 in this class is

00:29:19,120 --> 00:29:22,360
throwing an error

00:29:19,810 --> 00:29:23,860
I want to trace backwards and see what

00:29:22,360 --> 00:29:25,960
led up to that happening

00:29:23,860 --> 00:29:27,070
so I fire up my debugger set a

00:29:25,960 --> 00:29:29,380
breakpoint on that line

00:29:27,070 --> 00:29:31,660
run the code and then what I want to do

00:29:29,380 --> 00:29:34,210
is establish context I want to figure

00:29:31,660 --> 00:29:35,680
out why is this line of code being run

00:29:34,210 --> 00:29:38,020
what was the state of the application

00:29:35,680 --> 00:29:39,670
that caused this to happen and from

00:29:38,020 --> 00:29:41,140
there I want to work my way backwards to

00:29:39,670 --> 00:29:43,810
figure out how I got to that point in

00:29:41,140 --> 00:29:47,170
time so let's imagine that this is our

00:29:43,810 --> 00:29:49,720
call stack here function a calls B which

00:29:47,170 --> 00:29:51,580
calls C which calls a D D is throwing

00:29:49,720 --> 00:29:53,920
the error to set our breakpoint in there

00:29:51,580 --> 00:29:54,820
and you can see because it's this

00:29:53,920 --> 00:29:56,950
reddish orange color

00:29:54,820 --> 00:29:59,380
I'm currently stopped in there I've hit

00:29:56,950 --> 00:30:02,530
that breakpoint what I want to do now is

00:29:59,380 --> 00:30:04,660
reverse this so even though the code ran

00:30:02,530 --> 00:30:06,640
this way I want to look at it in the

00:30:04,660 --> 00:30:09,130
opposite direction I want to see okay

00:30:06,640 --> 00:30:11,020
what was going on at function D that

00:30:09,130 --> 00:30:13,450
caused this breakpoint to be hit all

00:30:11,020 --> 00:30:16,150
right well it was called from C so why

00:30:13,450 --> 00:30:18,250
did C called D what was the state of the

00:30:16,150 --> 00:30:20,620
application in the state of my variables

00:30:18,250 --> 00:30:22,750
at that time let me look at B and see

00:30:20,620 --> 00:30:25,330
what it was doing all the way up as far

00:30:22,750 --> 00:30:28,150
as I need to go to figure out how that

00:30:25,330 --> 00:30:30,100
happened why did my application get to

00:30:28,150 --> 00:30:32,830
that point where it threw an exception

00:30:30,100 --> 00:30:34,540
or threw an error so again you can use

00:30:32,830 --> 00:30:37,150
this anytime the errors thrown from

00:30:34,540 --> 00:30:39,100
another location sometimes we don't know

00:30:37,150 --> 00:30:41,590
what is throwing the error we just know

00:30:39,100 --> 00:30:44,440
that a problem exists one approach you

00:30:41,590 --> 00:30:45,970
could use is to trace forwards so kind

00:30:44,440 --> 00:30:47,860
of a similar thing we're using our

00:30:45,970 --> 00:30:49,360
interactive debugger but we're setting a

00:30:47,860 --> 00:30:51,970
breakpoint on our very first line of

00:30:49,360 --> 00:30:54,730
code maybe that's our index dot PHP or

00:30:51,970 --> 00:30:56,350
app dot PHP file and then we use either

00:30:54,730 --> 00:30:58,990
a debugger or some kind of logging

00:30:56,350 --> 00:31:01,390
mechanism to see which lines get run and

00:30:58,990 --> 00:31:03,490
what things are running correctly and

00:31:01,390 --> 00:31:07,120
we're either execution is suddenly

00:31:03,490 --> 00:31:08,370
stopping or throwing in error so so that

00:31:07,120 --> 00:31:10,110
the breakpoint in a

00:31:08,370 --> 00:31:12,450
and then we see okay yep that called a

00:31:10,110 --> 00:31:15,240
let's see okay called B called C and

00:31:12,450 --> 00:31:16,650
then it called D the problem with this

00:31:15,240 --> 00:31:19,170
approach is that it's very very

00:31:16,650 --> 00:31:21,270
inefficient you can have you know

00:31:19,170 --> 00:31:22,920
hundreds hundreds of thousands of lines

00:31:21,270 --> 00:31:25,220
of code that you have to step over step

00:31:22,920 --> 00:31:27,750
into it can be really time-consuming

00:31:25,220 --> 00:31:30,180
sometimes this works well but usually

00:31:27,750 --> 00:31:31,860
not always if you don't know exactly

00:31:30,180 --> 00:31:33,750
where it is and you're finding that this

00:31:31,860 --> 00:31:36,320
isn't giving you a quick answer you

00:31:33,750 --> 00:31:38,600
probably want to use it like a

00:31:36,320 --> 00:31:41,370
divide-and-conquer-type strategy

00:31:38,600 --> 00:31:46,530
basically what you want to do is to

00:31:41,370 --> 00:31:48,300
think about your code as this how should

00:31:46,530 --> 00:31:50,610
I say this this like grouping of

00:31:48,300 --> 00:31:51,960
different components that interrelate so

00:31:50,610 --> 00:31:53,430
I have like these components that do

00:31:51,960 --> 00:31:56,940
their own thing and then they talk to

00:31:53,430 --> 00:31:58,410
these other components so identify what

00:31:56,940 --> 00:32:00,540
of the different sections of your code

00:31:58,410 --> 00:32:02,190
where do they communicate where it is

00:32:00,540 --> 00:32:04,050
where do those boundaries where does the

00:32:02,190 --> 00:32:06,960
data cross those boundaries set

00:32:04,050 --> 00:32:08,190
breakpoints at those boundaries the idea

00:32:06,960 --> 00:32:09,780
here is we want to narrow down the

00:32:08,190 --> 00:32:12,330
problem to one of those specific

00:32:09,780 --> 00:32:14,580
components or sections of code so let me

00:32:12,330 --> 00:32:17,130
show you an example of that let's say

00:32:14,580 --> 00:32:18,390
this is a diagram of our system and what

00:32:17,130 --> 00:32:21,120
the rectangles and diamonds represent

00:32:18,390 --> 00:32:22,440
doesn't matter but hopefully you can see

00:32:21,120 --> 00:32:24,870
that it's broken out into these

00:32:22,440 --> 00:32:26,910
different sections so there's this blue

00:32:24,870 --> 00:32:29,130
section where everything kind of talks

00:32:26,910 --> 00:32:31,860
to itself but then it also branches out

00:32:29,130 --> 00:32:33,720
like this these are the boundaries here

00:32:31,860 --> 00:32:34,980
there's a boundary there a couple

00:32:33,720 --> 00:32:37,560
boundaries there as well

00:32:34,980 --> 00:32:39,210
now since we don't know where the air is

00:32:37,560 --> 00:32:41,610
coming from let's just set breakpoints

00:32:39,210 --> 00:32:43,920
at these different boundaries run our

00:32:41,610 --> 00:32:45,510
code and at first let's just see what

00:32:43,920 --> 00:32:47,460
boundaries are hit when we execute the

00:32:45,510 --> 00:32:50,040
code so we try and replicate the issue

00:32:47,460 --> 00:32:51,930
using those steps we've identified maybe

00:32:50,040 --> 00:32:53,490
we see that only these two breakpoints

00:32:51,930 --> 00:32:56,940
were hit during the execution of our

00:32:53,490 --> 00:32:59,160
code so that tells us the code took some

00:32:56,940 --> 00:33:01,140
path like this it did not go through

00:32:59,160 --> 00:33:04,320
this code at all this code therefore is

00:33:01,140 --> 00:33:06,630
probably not a culprit okay so if you

00:33:04,320 --> 00:33:08,490
have these two boundaries here let's

00:33:06,630 --> 00:33:10,200
keep the breakpoints there run our code

00:33:08,490 --> 00:33:13,020
again and see what's going on at that

00:33:10,200 --> 00:33:15,330
time and maybe we'll see that when the

00:33:13,020 --> 00:33:18,210
code passes along this boundary

00:33:15,330 --> 00:33:19,680
everything is great all of the variables

00:33:18,210 --> 00:33:21,380
are set correctly we have the correct

00:33:19,680 --> 00:33:23,300
state everything looks good

00:33:21,380 --> 00:33:24,860
but when the execution goes through the

00:33:23,300 --> 00:33:27,470
end of this little red section here

00:33:24,860 --> 00:33:29,150
something's wrong so now we've narrowed

00:33:27,470 --> 00:33:31,670
down the problem to this little bit of

00:33:29,150 --> 00:33:33,110
code here and now we can trace forwards

00:33:31,670 --> 00:33:34,820
through this code to see what was

00:33:33,110 --> 00:33:37,100
happening here what was happening here

00:33:34,820 --> 00:33:38,570
what was happening here and so on so

00:33:37,100 --> 00:33:39,950
we're not really wasting our time going

00:33:38,570 --> 00:33:44,380
through the other sections of our code

00:33:39,950 --> 00:33:47,240
base so you can use that process as well

00:33:44,380 --> 00:33:49,220
now there are also lots and lots of

00:33:47,240 --> 00:33:51,980
really great tools you can use for

00:33:49,220 --> 00:33:54,530
specific instances and specific types of

00:33:51,980 --> 00:33:55,940
issues now I could show you hundreds of

00:33:54,530 --> 00:33:57,410
different tools unfortunately don't have

00:33:55,940 --> 00:33:59,510
the time for that so I'm gonna share

00:33:57,410 --> 00:34:01,400
some of my personal favorites and some

00:33:59,510 --> 00:34:04,850
that you may not necessarily be thinking

00:34:01,400 --> 00:34:05,570
of starting with variable dumps good old

00:34:04,850 --> 00:34:09,379
var dump

00:34:05,570 --> 00:34:11,270
now sometimes var dump can be useful if

00:34:09,379 --> 00:34:14,290
you're experiencing some kind of issue

00:34:11,270 --> 00:34:16,700
and maybe X the bug isn't working

00:34:14,290 --> 00:34:18,620
fire up var dump just drop var dump

00:34:16,700 --> 00:34:20,060
somewhere in there don't commit it don't

00:34:18,620 --> 00:34:22,760
push that to production but you can't

00:34:20,060 --> 00:34:24,710
use var dump if you need a nicer output

00:34:22,760 --> 00:34:26,270
you can use the library Kint which is

00:34:24,710 --> 00:34:29,000
really nice it formats it nicely on your

00:34:26,270 --> 00:34:31,190
browser or maybe you just need to log

00:34:29,000 --> 00:34:32,690
data maybe you need to log data in

00:34:31,190 --> 00:34:35,270
production about why an issue was

00:34:32,690 --> 00:34:37,129
occurring I actually had an issue um a

00:34:35,270 --> 00:34:38,810
couple months ago I could not replicate

00:34:37,129 --> 00:34:40,580
it on development I needed more

00:34:38,810 --> 00:34:43,429
information about was what was happening

00:34:40,580 --> 00:34:46,250
so I just added a bunch of logger debug

00:34:43,429 --> 00:34:48,139
statements and just said ok logger I

00:34:46,250 --> 00:34:49,639
need you to just save this away in case

00:34:48,139 --> 00:34:51,980
the issue happens again I can go back

00:34:49,639 --> 00:34:53,840
and reference it so these are totally

00:34:51,980 --> 00:34:55,940
valid techniques they can be very useful

00:34:53,840 --> 00:34:59,600
especially if you can't use the debugger

00:34:55,940 --> 00:35:01,760
to debug the issue another nice tool to

00:34:59,600 --> 00:35:04,550
have particularly during development is

00:35:01,760 --> 00:35:06,560
a debug toolbar this up here is a

00:35:04,550 --> 00:35:08,810
screenshot of Symphony's debug toolbar

00:35:06,560 --> 00:35:11,060
the newer one and down here you can see

00:35:08,810 --> 00:35:12,980
one that was built for drupal which was

00:35:11,060 --> 00:35:15,470
based off the older symfony debug

00:35:12,980 --> 00:35:17,210
toolbar these toolbars give you a lot of

00:35:15,470 --> 00:35:18,890
really great information about what the

00:35:17,210 --> 00:35:22,010
webpage is doing during the development

00:35:18,890 --> 00:35:23,810
process so we can see here we when this

00:35:22,010 --> 00:35:26,150
page was loaded we had a 200 response

00:35:23,810 --> 00:35:27,800
code here's the controller that was

00:35:26,150 --> 00:35:29,990
being run here's the class here's the

00:35:27,800 --> 00:35:31,970
route name it was forwarded here's the

00:35:29,990 --> 00:35:33,470
execution time memory usage how many

00:35:31,970 --> 00:35:34,890
strings were translated who were logged

00:35:33,470 --> 00:35:37,440
in ass

00:35:34,890 --> 00:35:39,240
how much I oh there was how much how

00:35:37,440 --> 00:35:40,770
many database queries there were well

00:35:39,240 --> 00:35:42,810
how long they took and you can click on

00:35:40,770 --> 00:35:44,880
these and expand into them and see okay

00:35:42,810 --> 00:35:47,310
the database query to grab the users is

00:35:44,880 --> 00:35:48,900
taking this long there's a lot of great

00:35:47,310 --> 00:35:51,000
information here that can help you

00:35:48,900 --> 00:35:53,790
narrow down the source of some common

00:35:51,000 --> 00:35:55,560
issues or avoid them to start with so I

00:35:53,790 --> 00:35:59,160
highly recommend using a debug toolbar

00:35:55,560 --> 00:36:02,160
if your system has one another useful

00:35:59,160 --> 00:36:04,500
tool is the console utility Symphony and

00:36:02,160 --> 00:36:06,720
laravel both come with built-in consoles

00:36:04,500 --> 00:36:08,010
if you're using Drupal or Magento there

00:36:06,720 --> 00:36:10,710
are third-party ones you can download

00:36:08,010 --> 00:36:14,130
and they'll let you do things like clear

00:36:10,710 --> 00:36:15,990
the cache enable and disable things some

00:36:14,130 --> 00:36:18,180
of them will leave them bootstrap the

00:36:15,990 --> 00:36:20,760
platform for you and drop you into a PHP

00:36:18,180 --> 00:36:22,109
shell so you can just start you know

00:36:20,760 --> 00:36:23,400
putting in your Drupal code or your

00:36:22,109 --> 00:36:26,070
laravel code to test out different

00:36:23,400 --> 00:36:27,930
things it bootstraps the entire

00:36:26,070 --> 00:36:30,720
environment so it's just like you put in

00:36:27,930 --> 00:36:34,320
a test controller and ran it console

00:36:30,720 --> 00:36:36,090
utilities are awesome now sometimes the

00:36:34,320 --> 00:36:38,700
types of issues we deal with aren't

00:36:36,090 --> 00:36:40,619
necessarily errors or warnings or

00:36:38,700 --> 00:36:42,480
exceptions they're just performance

00:36:40,619 --> 00:36:44,310
issues things are going slowly

00:36:42,480 --> 00:36:46,050
maybe there's a bottleneck somewhere

00:36:44,310 --> 00:36:46,950
maybe something is hogging all of your

00:36:46,050 --> 00:36:48,900
resources

00:36:46,950 --> 00:36:51,060
maybe there's this really inefficient

00:36:48,900 --> 00:36:53,130
loop somewhere when you have a

00:36:51,060 --> 00:36:54,900
performance issue in order to identify

00:36:53,130 --> 00:36:57,510
it it's really helpful to have a

00:36:54,900 --> 00:36:59,310
profiler now there are a few tools that

00:36:57,510 --> 00:37:02,340
I do recommend I'm the first one being

00:36:59,310 --> 00:37:04,320
black fire black fire is a freemium tool

00:37:02,340 --> 00:37:06,750
full disclosure the company I work for

00:37:04,320 --> 00:37:08,310
is partnered with Senseo labs I'm not

00:37:06,750 --> 00:37:11,040
trying to sell you on this today I just

00:37:08,310 --> 00:37:13,020
honestly think it's an awesome tool and

00:37:11,040 --> 00:37:15,240
you can try it for free they have a paid

00:37:13,020 --> 00:37:17,340
version if you want that black fire lets

00:37:15,240 --> 00:37:19,680
you profile individual requests on

00:37:17,340 --> 00:37:22,170
development or production so in your

00:37:19,680 --> 00:37:23,850
browser you go to a page you say okay I

00:37:22,170 --> 00:37:25,859
want to profile this page click a button

00:37:23,850 --> 00:37:28,619
and it tells you what functions ran how

00:37:25,859 --> 00:37:31,500
long they took you know tells you memory

00:37:28,619 --> 00:37:33,630
usage IO all that great stuff so

00:37:31,500 --> 00:37:35,700
Blackfyre is great at profiling

00:37:33,630 --> 00:37:37,590
individual page execution it's telling

00:37:35,700 --> 00:37:39,420
you what's going on but if you need kind

00:37:37,590 --> 00:37:41,190
of a bigger picture idea of how is my

00:37:39,420 --> 00:37:43,380
application performing over time in

00:37:41,190 --> 00:37:45,720
production I'd probably point you to New

00:37:43,380 --> 00:37:47,340
Relic instead New Relic is also a

00:37:45,720 --> 00:37:47,780
freemium tool I'm not partnered with

00:37:47,340 --> 00:37:50,090
them

00:37:47,780 --> 00:37:51,860
I just love their product and it gives

00:37:50,090 --> 00:37:54,290
you that kind of high level picture by

00:37:51,860 --> 00:37:56,120
Google Analytics does Google Analytics

00:37:54,290 --> 00:37:58,340
will tell you who's going to what pages

00:37:56,120 --> 00:38:00,350
that sort of thing New Relic will tell

00:37:58,340 --> 00:38:02,690
you how fast or slow different pages are

00:38:00,350 --> 00:38:05,480
and then of course if you prefer open

00:38:02,690 --> 00:38:09,050
source solutions you can use xh prof mam

00:38:05,480 --> 00:38:10,910
to do your performance profiling so now

00:38:09,050 --> 00:38:13,580
we get to one of my favorite tools get

00:38:10,910 --> 00:38:15,260
bisect we're going to assume that pretty

00:38:13,580 --> 00:38:17,330
much everyone here knows get every time

00:38:15,260 --> 00:38:21,080
I ask well the hands go up but how many

00:38:17,330 --> 00:38:23,810
people are familiar with git bisect good

00:38:21,080 --> 00:38:27,140
number of hands alright awesome so git

00:38:23,810 --> 00:38:29,510
bisect is this awesome tool and it runs

00:38:27,140 --> 00:38:31,760
a binary search through your commit

00:38:29,510 --> 00:38:34,490
history to help you figure out where a

00:38:31,760 --> 00:38:37,130
bad commit was introduced let's say this

00:38:34,490 --> 00:38:40,040
is a visualization of our history and we

00:38:37,130 --> 00:38:41,900
know that at version 1.7 everything

00:38:40,040 --> 00:38:44,600
worked our tests were passing life was

00:38:41,900 --> 00:38:46,790
great but now at our current head on our

00:38:44,600 --> 00:38:48,620
master a develop branch tests are

00:38:46,790 --> 00:38:50,780
failing something is wrong there's a bug

00:38:48,620 --> 00:38:53,390
in the application whatever the case may

00:38:50,780 --> 00:38:55,280
be we know that things are now bad but

00:38:53,390 --> 00:38:56,690
they used to be pretty good we don't

00:38:55,280 --> 00:38:59,450
know what commit introduced the issue

00:38:56,690 --> 00:39:01,580
and our efforts to find that are just

00:38:59,450 --> 00:39:04,490
not working so what we can do is we can

00:39:01,580 --> 00:39:06,080
use git bisect and git will help us

00:39:04,490 --> 00:39:08,570
narrow down which commits introduce the

00:39:06,080 --> 00:39:10,100
issue what we do is we've run a few

00:39:08,570 --> 00:39:11,660
commands I won't cover them here but

00:39:10,100 --> 00:39:14,030
I'll give you the general gist you

00:39:11,660 --> 00:39:15,830
basically tell git everything was great

00:39:14,030 --> 00:39:18,290
at this point in time things are bad

00:39:15,830 --> 00:39:20,300
here yet will automatically check out

00:39:18,290 --> 00:39:22,010
the commits in the middle and it'll ask

00:39:20,300 --> 00:39:24,170
you what about at this point in time

00:39:22,010 --> 00:39:26,870
where things working or was there an

00:39:24,170 --> 00:39:28,910
error here and maybe you tell git yeah I

00:39:26,870 --> 00:39:30,950
just ran the thing in the browser and

00:39:28,910 --> 00:39:33,470
the arid is definitely present at this

00:39:30,950 --> 00:39:35,570
point in time so this commit is bad and

00:39:33,470 --> 00:39:37,550
then get will say okay well if things

00:39:35,570 --> 00:39:39,710
were bad at this point in time and they

00:39:37,550 --> 00:39:42,530
were bad here then we can just narrow

00:39:39,710 --> 00:39:44,990
out we can cross off all of those as

00:39:42,530 --> 00:39:48,350
being potential culprits so now we've

00:39:44,990 --> 00:39:50,000
cut the problem space in half okay so

00:39:48,350 --> 00:39:51,740
git will check out the next commit in

00:39:50,000 --> 00:39:53,900
the middle I'll check out this third one

00:39:51,740 --> 00:39:55,610
here and say what about now the things

00:39:53,900 --> 00:39:57,500
look good or are they still broken and

00:39:55,610 --> 00:39:58,850
you might say actually things are

00:39:57,500 --> 00:40:00,480
working just fine at this point in my

00:39:58,850 --> 00:40:02,580
history okay

00:40:00,480 --> 00:40:04,440
things were working fine there and there

00:40:02,580 --> 00:40:06,210
then that commit is probably good

00:40:04,440 --> 00:40:07,830
so this commit is the first bad

00:40:06,210 --> 00:40:10,440
commitment you know gave you that commit

00:40:07,830 --> 00:40:13,590
hash right there now there's a couple of

00:40:10,440 --> 00:40:16,020
cool things beyond just what I showed

00:40:13,590 --> 00:40:18,930
you now the first one being that this

00:40:16,020 --> 00:40:21,180
scales logarithmic Lee so if you know if

00:40:18,930 --> 00:40:25,109
you're familiar with computer science um

00:40:21,180 --> 00:40:28,200
and algorithms and Big O notation this

00:40:25,109 --> 00:40:30,300
runs in O log n time so in this example

00:40:28,200 --> 00:40:32,609
I had nine commits I had to run four

00:40:30,300 --> 00:40:34,080
tests to figure out the culprit if I

00:40:32,609 --> 00:40:36,510
multiply those in the MuRF commits by

00:40:34,080 --> 00:40:39,600
ten the number of tests only goes up by

00:40:36,510 --> 00:40:43,380
a factor of two so ninety commits takes

00:40:39,600 --> 00:40:45,720
eight tests 900 commits takes sixteen

00:40:43,380 --> 00:40:48,510
tests so the more commits you have the

00:40:45,720 --> 00:40:50,070
more efficient this actually becomes the

00:40:48,510 --> 00:40:52,590
other cool thing is you can hook this up

00:40:50,070 --> 00:40:54,480
to something like PHP unit so you can

00:40:52,590 --> 00:40:57,780
write a unit test or a functional test

00:40:54,480 --> 00:40:59,850
that'll run your code and either exit

00:40:57,780 --> 00:41:03,060
with the zero or one code and you can

00:40:59,850 --> 00:41:05,040
just run that with your git bisect so

00:41:03,060 --> 00:41:06,660
git bisect instead of you needing to

00:41:05,040 --> 00:41:09,300
manually test your code it'll just run

00:41:06,660 --> 00:41:10,980
PHP unit every time it checks out one of

00:41:09,300 --> 00:41:12,300
those potential commits it'll

00:41:10,980 --> 00:41:14,190
automatically decide if something's good

00:41:12,300 --> 00:41:16,290
or bad we had a couple seconds and it'll

00:41:14,190 --> 00:41:18,240
tell you what the culprit is so git

00:41:16,290 --> 00:41:21,720
bisect is awesome definitely recommend

00:41:18,240 --> 00:41:25,590
checking that out another nifty tool is

00:41:21,720 --> 00:41:28,470
netcat netcat is a nice unix tool you

00:41:25,590 --> 00:41:30,330
can test connections on actual TCP

00:41:28,470 --> 00:41:32,369
connections to different servers on

00:41:30,330 --> 00:41:34,260
different ports so if you ever get some

00:41:32,369 --> 00:41:36,960
kind of connection timed out issue or

00:41:34,260 --> 00:41:38,730
connection refused and you're not really

00:41:36,960 --> 00:41:40,350
sure okay is that because I have the

00:41:38,730 --> 00:41:43,140
wrong my sequel user or is that because

00:41:40,350 --> 00:41:45,450
there's a firewall you can use netcat to

00:41:43,140 --> 00:41:46,290
help you narrow that down the syntax is

00:41:45,450 --> 00:41:50,580
pretty straightforward

00:41:46,290 --> 00:41:53,340
nc space - VZ another space post name

00:41:50,580 --> 00:41:54,960
our IP and then the port number now you

00:41:53,340 --> 00:41:57,000
can see up here we're testing if port

00:41:54,960 --> 00:41:59,369
edy on localhost is open we can say yep

00:41:57,000 --> 00:42:02,010
connection succeeded but down here if we

00:41:59,369 --> 00:42:03,930
try to ssh into google comm connection

00:42:02,010 --> 00:42:05,880
times out network is unreachable they'd

00:42:03,930 --> 00:42:09,090
probably have a firewall up which is a

00:42:05,880 --> 00:42:12,840
good thing if your Google another nice

00:42:09,090 --> 00:42:14,010
tool is Curl Curl is a command line HTTP

00:42:12,840 --> 00:42:16,770
client

00:42:14,010 --> 00:42:19,290
if you want to get HTTP headers or make

00:42:16,770 --> 00:42:20,670
HTTP requests and you don't really want

00:42:19,290 --> 00:42:22,770
to do it in your browser you can use

00:42:20,670 --> 00:42:25,650
curl to do that so here's an example

00:42:22,770 --> 00:42:27,000
where I pass the - I flag I and that's

00:42:25,650 --> 00:42:29,010
gonna show me all of the response

00:42:27,000 --> 00:42:31,020
headers here so maybe I'm debugging some

00:42:29,010 --> 00:42:33,000
kind of caching issue I can see all

00:42:31,020 --> 00:42:35,700
these some cache headers here here's the

00:42:33,000 --> 00:42:37,200
expires header that kind of thing so if

00:42:35,700 --> 00:42:38,820
I'm over in the command line already and

00:42:37,200 --> 00:42:42,120
I don't want to fire up my browser curl

00:42:38,820 --> 00:42:43,620
can be really nice now the last tool I

00:42:42,120 --> 00:42:46,770
want to share with you is one called the

00:42:43,620 --> 00:42:48,390
s trace I am NOT a seed developer so I

00:42:46,770 --> 00:42:51,120
don't I'll admit I don't fully

00:42:48,390 --> 00:42:52,530
understand this but it saved my butt so

00:42:51,120 --> 00:42:55,740
many times so I want to share that with

00:42:52,530 --> 00:42:58,050
you today s trace shows you system calls

00:42:55,740 --> 00:42:59,910
that are being made by PHP my

00:42:58,050 --> 00:43:01,650
understanding of this and again you're

00:42:59,910 --> 00:43:03,630
welcome to correct me if I'm wrong my

00:43:01,650 --> 00:43:05,280
understanding is that anytime PHP needs

00:43:03,630 --> 00:43:07,620
something from the system or from

00:43:05,280 --> 00:43:09,990
somewhere else it's going to initiate a

00:43:07,620 --> 00:43:11,580
system call to the Linux kernel so if it

00:43:09,990 --> 00:43:13,560
needs more RAM if it needs to open a

00:43:11,580 --> 00:43:16,440
file if it needs to connect to my sequel

00:43:13,560 --> 00:43:18,000
it has to ask Linux hey I need this

00:43:16,440 --> 00:43:20,700
stuff please help me out with this and

00:43:18,000 --> 00:43:24,600
that will occur that'll be logged here

00:43:20,700 --> 00:43:26,070
if in the S trace command now I again I

00:43:24,600 --> 00:43:27,690
don't fully understand this but if I

00:43:26,070 --> 00:43:31,200
look closely I can see things that I do

00:43:27,690 --> 00:43:33,300
understand up here I see set names utf-8

00:43:31,200 --> 00:43:35,670
and it's being written somewhere so that

00:43:33,300 --> 00:43:38,760
looks like I'm sending data to a

00:43:35,670 --> 00:43:41,520
database down here I'm opening up this

00:43:38,760 --> 00:43:43,980
crypt class the PHP file so I know that

00:43:41,520 --> 00:43:45,810
this PHP process is probably doing a

00:43:43,980 --> 00:43:48,840
require once or something like that on

00:43:45,810 --> 00:43:51,900
this file down here here's a sequel

00:43:48,840 --> 00:43:54,180
query select star from accesses ok that

00:43:51,900 --> 00:43:56,970
looks like it's a database call down

00:43:54,180 --> 00:43:59,130
here I'm opening dev slash random so I'm

00:43:56,970 --> 00:44:00,810
doing something with random numbers so

00:43:59,130 --> 00:44:01,860
this can be really useful especially if

00:44:00,810 --> 00:44:04,110
you're trying to figure out why a

00:44:01,860 --> 00:44:06,360
process is running but you're not seeing

00:44:04,110 --> 00:44:09,120
any results maybe you're doing some kind

00:44:06,360 --> 00:44:11,250
of you know large batch action on the

00:44:09,120 --> 00:44:13,050
website and it's on production you don't

00:44:11,250 --> 00:44:14,640
really want to restart the server but

00:44:13,050 --> 00:44:16,830
you're not sure if it's stuck or what's

00:44:14,640 --> 00:44:18,990
going on just attached to it with s

00:44:16,830 --> 00:44:20,160
trace and see what it's doing and if you

00:44:18,990 --> 00:44:22,110
see you know just doing a bunch of

00:44:20,160 --> 00:44:24,540
queries you can kind of figure out ok I

00:44:22,110 --> 00:44:26,280
know what this process is doing I know

00:44:24,540 --> 00:44:27,240
the process is doing what I expect it to

00:44:26,280 --> 00:44:29,310
but

00:44:27,240 --> 00:44:31,710
maybe the database is going slow or

00:44:29,310 --> 00:44:33,930
maybe it's hit a deadlock you can figure

00:44:31,710 --> 00:44:35,670
that out by s tracing it so it's a

00:44:33,930 --> 00:44:39,480
really nice tool definitely recommend

00:44:35,670 --> 00:44:41,280
trying that out sometime so that's it

00:44:39,480 --> 00:44:42,810
for the specialized tools that kind of

00:44:41,280 --> 00:44:45,690
takes us towards the end of this list of

00:44:42,810 --> 00:44:48,150
techniques the next one I'd like to

00:44:45,690 --> 00:44:49,800
share with you is giving help sometimes

00:44:48,150 --> 00:44:51,810
all of these different tools and all

00:44:49,800 --> 00:44:53,760
these techniques and all the experience

00:44:51,810 --> 00:44:55,619
in the world just doesn't get you the

00:44:53,760 --> 00:44:56,700
answers that you need sometimes you just

00:44:55,619 --> 00:44:58,380
needs to get help

00:44:56,700 --> 00:45:02,100
the first thing I'd recommend that you

00:44:58,380 --> 00:45:05,369
do is to go read the fantastic manual go

00:45:02,100 --> 00:45:07,770
read the fantastic documentation other

00:45:05,369 --> 00:45:09,900
developers have spent hours documenting

00:45:07,770 --> 00:45:11,880
how their projects work how the system

00:45:09,900 --> 00:45:15,030
works go read that documentation the

00:45:11,880 --> 00:45:16,830
answer might be in there if you're

00:45:15,030 --> 00:45:19,260
dealing with a particular library or

00:45:16,830 --> 00:45:21,270
framework go check the project forms go

00:45:19,260 --> 00:45:22,890
check the issue queue maybe someone else

00:45:21,270 --> 00:45:25,110
has reported that issue and maybe

00:45:22,890 --> 00:45:28,560
there's a patch you can apply or some

00:45:25,110 --> 00:45:30,420
solution you can use and if not post the

00:45:28,560 --> 00:45:32,790
issue yourself say hey guys I'm having a

00:45:30,420 --> 00:45:34,440
problem with the library here's the

00:45:32,790 --> 00:45:36,570
sample code I'm trying to use here's the

00:45:34,440 --> 00:45:38,250
behavior that I'm seeing please help me

00:45:36,570 --> 00:45:41,220
and chances are someone will help you

00:45:38,250 --> 00:45:44,640
out with that issue you can of course go

00:45:41,220 --> 00:45:47,100
on Stack Overflow IRC slack Twitter ask

00:45:44,640 --> 00:45:49,230
for help there if you have colleagues

00:45:47,100 --> 00:45:51,300
you can go ask them if you're trying to

00:45:49,230 --> 00:45:54,180
debug a really difficult laravel issue

00:45:51,300 --> 00:45:56,160
go ask the resident laravel developer if

00:45:54,180 --> 00:45:58,950
you don't have one just go ask any

00:45:56,160 --> 00:46:00,630
senior developer a good senior developer

00:45:58,950 --> 00:46:02,520
should be able to at least get you going

00:46:00,630 --> 00:46:04,020
in the right direction even if they're

00:46:02,520 --> 00:46:06,330
not familiar with that particular

00:46:04,020 --> 00:46:08,070
technology because they have that good

00:46:06,330 --> 00:46:10,109
foundation in place they know how to

00:46:08,070 --> 00:46:12,180
debug an issue they know what kinds of

00:46:10,109 --> 00:46:13,740
issue you might be dealing with they can

00:46:12,180 --> 00:46:16,859
kind of guide you in the right direction

00:46:13,740 --> 00:46:19,109
and then of course you can do something

00:46:16,859 --> 00:46:20,760
that's called rubber ducking rubber

00:46:19,109 --> 00:46:22,980
ducking sounds kind of silly you

00:46:20,760 --> 00:46:25,410
basically take a literal rubber duck

00:46:22,980 --> 00:46:26,940
place it on your desk and if you have a

00:46:25,410 --> 00:46:30,180
problem you talk out the problem to the

00:46:26,940 --> 00:46:32,730
duck so you say all right duck I'm

00:46:30,180 --> 00:46:35,250
having this issue when I submit the form

00:46:32,730 --> 00:46:37,050
I'm getting this 500 error and I'm not

00:46:35,250 --> 00:46:39,000
seeing anything come in the logs bla bla

00:46:37,050 --> 00:46:40,160
bla and just talk out your problem to

00:46:39,000 --> 00:46:41,450
the duck

00:46:40,160 --> 00:46:44,420
now you look kind of silly to your

00:46:41,450 --> 00:46:46,400
co-workers the reason you're doing this

00:46:44,420 --> 00:46:48,440
is to talk through what you've tried

00:46:46,400 --> 00:46:49,700
what you haven't tried maybe as you're

00:46:48,440 --> 00:46:51,710
talking out what you've done

00:46:49,700 --> 00:46:55,190
to this little duck you'll accidentally

00:46:51,710 --> 00:46:56,180
say oh I said I checked this but I

00:46:55,190 --> 00:46:58,220
really didn't check it

00:46:56,180 --> 00:47:01,069
or maybe I'm assuming this thing that I

00:46:58,220 --> 00:47:02,390
actually did not verify or maybe it'll

00:47:01,069 --> 00:47:04,970
just jog your memory as you're talking

00:47:02,390 --> 00:47:06,619
that process out now you can use a

00:47:04,970 --> 00:47:07,970
literal rubber duck you can use a

00:47:06,619 --> 00:47:09,260
co-worker and say hey do you have a

00:47:07,970 --> 00:47:11,780
couple minutes can I run something by

00:47:09,260 --> 00:47:13,400
you whatever works for you just talking

00:47:11,780 --> 00:47:15,849
that problem out will sometimes help

00:47:13,400 --> 00:47:19,599
guide you to the right solution

00:47:15,849 --> 00:47:22,309
the last technique is to take a break

00:47:19,599 --> 00:47:23,780
sometimes you may have this really

00:47:22,309 --> 00:47:25,940
difficult issue that you can't figure

00:47:23,780 --> 00:47:27,740
out you've been at it for hours and

00:47:25,940 --> 00:47:30,710
hours and hours and you're just not

00:47:27,740 --> 00:47:33,170
getting anywhere take a break step away

00:47:30,710 --> 00:47:35,740
from the computer clear your mind and

00:47:33,170 --> 00:47:38,750
come back to it with a fresh perspective

00:47:35,740 --> 00:47:40,490
feeling refreshed not you know spent

00:47:38,750 --> 00:47:41,690
eating twelve hours and then every hour

00:47:40,490 --> 00:47:44,270
after that you're only getting ten

00:47:41,690 --> 00:47:47,210
minutes of good work out of it take a

00:47:44,270 --> 00:47:48,950
break take a break is nice because it

00:47:47,210 --> 00:47:52,339
helps you forget any invalid assumptions

00:47:48,950 --> 00:47:55,039
maybe you spent hour after hour focusing

00:47:52,339 --> 00:47:56,480
on the cash layer when the problem isn't

00:47:55,039 --> 00:47:58,819
with a cash layer is with the session

00:47:56,480 --> 00:48:00,950
handler if you take a break and come

00:47:58,819 --> 00:48:02,119
back to it later you'll start again from

00:48:00,950 --> 00:48:05,390
that high level and you'll say oh I

00:48:02,119 --> 00:48:06,920
didn't look over there let me do that of

00:48:05,390 --> 00:48:09,440
course taking a break recharges your

00:48:06,920 --> 00:48:11,539
batteries so that you can continue

00:48:09,440 --> 00:48:12,859
putting time into the problem and that

00:48:11,539 --> 00:48:14,119
time you put in you'll be getting in

00:48:12,859 --> 00:48:16,430
something out of it it won't be that

00:48:14,119 --> 00:48:19,220
you're wasting time it's not you know

00:48:16,430 --> 00:48:20,839
you've spent an hour a clock time

00:48:19,220 --> 00:48:22,190
working on something but you're really

00:48:20,839 --> 00:48:24,140
only spending ten minutes because you're

00:48:22,190 --> 00:48:27,200
just brain dead you're getting your full

00:48:24,140 --> 00:48:28,819
efficiency out of your mind and then of

00:48:27,200 --> 00:48:30,349
course this gives you the chance for

00:48:28,819 --> 00:48:32,750
your subconscious to work out the

00:48:30,349 --> 00:48:34,700
problem I'm sure many of you have been

00:48:32,750 --> 00:48:36,529
out for a walk or taking a shower or

00:48:34,700 --> 00:48:37,880
just daydreaming and then some one idea

00:48:36,529 --> 00:48:40,520
pops in your head something you haven't

00:48:37,880 --> 00:48:42,410
tried before now I'm not saying if you

00:48:40,520 --> 00:48:43,940
have a hard problem take a break go take

00:48:42,410 --> 00:48:47,000
a nap because you'll get the solution

00:48:43,940 --> 00:48:49,250
right away doesn't work like that but if

00:48:47,000 --> 00:48:51,859
you spent all of this time just

00:48:49,250 --> 00:48:53,150
frustrated not getting anywhere take a

00:48:51,859 --> 00:48:54,799
step back

00:48:53,150 --> 00:48:56,150
your subconscious the chance to bubble

00:48:54,799 --> 00:48:57,619
something up while you're recharging

00:48:56,150 --> 00:49:02,420
your batteries that can be really

00:48:57,619 --> 00:49:04,010
helpful so that wraps up my talk there

00:49:02,420 --> 00:49:07,579
are four things that I'd like you to

00:49:04,010 --> 00:49:10,160
walk away from number one computers

00:49:07,579 --> 00:49:12,200
aren't random and neither are bugs there

00:49:10,160 --> 00:49:14,630
is always a logical explanation to the

00:49:12,200 --> 00:49:17,059
issues you're seeing you just need to be

00:49:14,630 --> 00:49:20,150
persistent enough to find them and that

00:49:17,059 --> 00:49:21,799
persistence will always pay off nine

00:49:20,150 --> 00:49:24,109
times out of ten if you're persistent

00:49:21,799 --> 00:49:26,660
you will find the source of that issue

00:49:24,109 --> 00:49:28,579
then another 10% of the time maybe you

00:49:26,660 --> 00:49:30,289
don't solve the issue but you've learned

00:49:28,579 --> 00:49:33,470
more about how that framework or that

00:49:30,289 --> 00:49:34,970
library works so don't be afraid to dive

00:49:33,470 --> 00:49:37,309
deep it's a great learning opportunity

00:49:34,970 --> 00:49:40,130
it's a great chance for you to become an

00:49:37,309 --> 00:49:42,079
expert in that system and then lastly

00:49:40,130 --> 00:49:42,890
don't make assumptions or take things

00:49:42,079 --> 00:49:46,910
for granted

00:49:42,890 --> 00:49:49,039
challenge everything so at this point

00:49:46,910 --> 00:49:50,869
nom do believe we have a few minutes

00:49:49,039 --> 00:49:57,640
left um so if there are any questions

00:49:50,869 --> 00:49:57,640
I'd be happy to take them the last one

00:49:58,569 --> 00:50:02,329
question was well as the last one and

00:50:00,799 --> 00:50:04,029
that is don't take don't make

00:50:02,329 --> 00:50:11,470
assumptions or take things for granted

00:50:04,029 --> 00:50:18,440
challenge everything any other questions

00:50:11,470 --> 00:50:20,779
there's a question back there at what

00:50:18,440 --> 00:50:23,569
point in the debugging process would you

00:50:20,779 --> 00:50:25,609
go to big git bisect would you maybe

00:50:23,569 --> 00:50:26,960
start with that and find the commit

00:50:25,609 --> 00:50:29,750
that's causing the problem and then

00:50:26,960 --> 00:50:31,789
start the bug now or leave it until you

00:50:29,750 --> 00:50:33,950
found the problem and then go find the

00:50:31,789 --> 00:50:37,160
commit that caused it that's a good

00:50:33,950 --> 00:50:38,329
question um usually I'll try and just go

00:50:37,160 --> 00:50:42,440
through my normal debugging process

00:50:38,329 --> 00:50:44,450
upfront and if I spend say maybe an hour

00:50:42,440 --> 00:50:45,980
and I don't have a good idea of what's

00:50:44,450 --> 00:50:48,470
causing the issue then I'll go to get

00:50:45,980 --> 00:50:50,770
bisect especially if I know that things

00:50:48,470 --> 00:50:53,569
were working fine a week or two ago

00:50:50,770 --> 00:50:56,869
sometimes also use git bisect if I found

00:50:53,569 --> 00:51:00,500
the issue um and I don't know exactly

00:50:56,869 --> 00:51:02,000
why the code introduced that issue I

00:51:00,500 --> 00:51:03,109
mean of course I could do a git log to

00:51:02,000 --> 00:51:05,059
figure out you know when was that

00:51:03,109 --> 00:51:06,270
introduced but sometimes get bisect

00:51:05,059 --> 00:51:07,770
gives me a good feel for

00:51:06,270 --> 00:51:10,470
what point in time was that what was

00:51:07,770 --> 00:51:12,800
happening around that time maybe the

00:51:10,470 --> 00:51:14,970
commit that introduced the issue didn't

00:51:12,800 --> 00:51:17,220
kind of didn't really introduce the

00:51:14,970 --> 00:51:18,900
issue maybe it introduced the

00:51:17,220 --> 00:51:21,200
environment for the issue to crop up

00:51:18,900 --> 00:51:21,200
later

00:51:27,020 --> 00:51:29,080

YouTube URL: https://www.youtube.com/watch?v=nr-eV603-UA


