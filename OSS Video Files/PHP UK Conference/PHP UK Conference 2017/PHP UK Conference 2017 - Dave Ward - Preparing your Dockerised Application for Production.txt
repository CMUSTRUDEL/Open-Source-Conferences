Title: PHP UK Conference 2017 - Dave Ward - Preparing your Dockerised Application for Production
Publication date: 2017-04-03
Playlist: PHP UK Conference 2017
Description: 
	You’ve got your application dockerised for development. That process is working smoothly, and you’re gaining a lot of the benefits that docker gives you - environments are trivial to setup, independent of platform, and they are consistent for everyone on your team. How do you go about taking the next step so that your application is deployed into a scalable and reliable production setup? How do you create deployment artefacts which are built with consistency and transparency? How do you manage environment variables between staging and production environments? How do you perform actions / schedule processes in one environment and not another? In this talk we will discuss what you need to do to get your dockerised application ready for deployment into a production environment.
Captions: 
	00:00:04,170 --> 00:00:12,460
good morning and everybody you hear me

00:00:07,450 --> 00:00:15,010
okay I'll be okay my other back I hope

00:00:12,460 --> 00:00:19,060
you've all had a very good conference so

00:00:15,010 --> 00:00:22,210
far I'm really thrilled to be here to

00:00:19,060 --> 00:00:24,789
talk to you all today and just before I

00:00:22,210 --> 00:00:26,800
get started I'd like to thank Joe and

00:00:24,789 --> 00:00:30,419
Sam for all the hard work they've done

00:00:26,800 --> 00:00:37,150
so far in organizing a great conference

00:00:30,419 --> 00:00:41,710
so my name is Dave Ward I am the head of

00:00:37,150 --> 00:00:46,540
development at globe online limited we

00:00:41,710 --> 00:00:49,480
are an e-commerce company and some of

00:00:46,540 --> 00:00:51,130
the brands that we own you may have

00:00:49,480 --> 00:00:53,410
heard of Durin's our home and garden

00:00:51,130 --> 00:00:56,590
furniture world stores if you're a

00:00:53,410 --> 00:00:59,890
parent you might have bought goods from

00:00:56,590 --> 00:01:02,110
kitty care and if you're into getting

00:00:59,890 --> 00:01:05,049
some really good deals on luxury

00:01:02,110 --> 00:01:08,770
furniture ashika you might have heard of

00:01:05,049 --> 00:01:11,740
as well and we're now part of the Dunelm

00:01:08,770 --> 00:01:13,420
family who will to sell home gun

00:01:11,740 --> 00:01:15,790
furniture but have much much more

00:01:13,420 --> 00:01:19,270
bricks-and-mortar presence than us with

00:01:15,790 --> 00:01:22,630
we've typically been purely ecommerce

00:01:19,270 --> 00:01:26,830
online and we're really proud of the

00:01:22,630 --> 00:01:29,740
fact that a lot of our well in fact our

00:01:26,830 --> 00:01:32,920
entire delivery pipeline is the texture

00:01:29,740 --> 00:01:35,530
that is developed it's maintained and

00:01:32,920 --> 00:01:38,110
actively developed completely in-house

00:01:35,530 --> 00:01:44,220
and all of our all of our products that

00:01:38,110 --> 00:01:47,799
proprietary solutions so over the past

00:01:44,220 --> 00:01:51,490
four or five years we've really grown up

00:01:47,799 --> 00:01:54,520
a lot of the company about four or five

00:01:51,490 --> 00:01:58,479
years ago we very much had we had a very

00:01:54,520 --> 00:02:01,060
much of a start up vibe to us the

00:01:58,479 --> 00:02:03,850
weren't no huge amounts of good

00:02:01,060 --> 00:02:07,119
practices but it's been fantastic to be

00:02:03,850 --> 00:02:12,400
part of the journey and we've kind of

00:02:07,119 --> 00:02:14,200
we've really evolved over that time some

00:02:12,400 --> 00:02:16,810
of the things that I've really enjoyed

00:02:14,200 --> 00:02:19,180
doing is actually

00:02:16,810 --> 00:02:22,750
implementing change and we've been

00:02:19,180 --> 00:02:24,940
really lucky that we've been allowed to

00:02:22,750 --> 00:02:26,740
do this there are some companies out

00:02:24,940 --> 00:02:29,410
there where they're not particularly

00:02:26,740 --> 00:02:33,040
agile it takes a really long time to

00:02:29,410 --> 00:02:36,820
actually see any positive benefits from

00:02:33,040 --> 00:02:38,770
change some of the things we've done to

00:02:36,820 --> 00:02:42,340
improve efficiency you know whether it's

00:02:38,770 --> 00:02:43,870
small things like introducing Composer

00:02:42,340 --> 00:02:45,190
dependencies it's just something we did

00:02:43,870 --> 00:02:48,190
four or five years ago we didn't have

00:02:45,190 --> 00:02:49,600
there that whether it's something which

00:02:48,190 --> 00:02:53,260
the company you need to buy in a bit

00:02:49,600 --> 00:02:56,440
more like changing our methodology from

00:02:53,260 --> 00:03:00,959
what very what was very waterful to now

00:02:56,440 --> 00:03:05,440
a really nice agile agile way of working

00:03:00,959 --> 00:03:07,870
- of the - of the problems that we've

00:03:05,440 --> 00:03:11,620
typically had and took a bit longer to

00:03:07,870 --> 00:03:15,550
solve were in the area of development

00:03:11,620 --> 00:03:21,220
environments so I remember when I first

00:03:15,550 --> 00:03:23,620
joined as a developer the development

00:03:21,220 --> 00:03:25,540
environment took me about a week to get

00:03:23,620 --> 00:03:29,080
set up and you guys may or may not have

00:03:25,540 --> 00:03:34,720
experiences with that but we were using

00:03:29,080 --> 00:03:36,970
a custom compiled version of PHP it was

00:03:34,720 --> 00:03:38,860
a complete nightmare and then when we

00:03:36,970 --> 00:03:40,959
did actually manage to get it set up and

00:03:38,860 --> 00:03:42,130
running it looked nothing like what we

00:03:40,959 --> 00:03:45,850
were running on production

00:03:42,130 --> 00:03:48,790
I had no guarantee that the services

00:03:45,850 --> 00:03:51,340
that I'd set up with same versions we

00:03:48,790 --> 00:03:55,090
had a lot of problems with developing

00:03:51,340 --> 00:03:57,790
code and actually getting it out into

00:03:55,090 --> 00:04:00,880
the production environments and then

00:03:57,790 --> 00:04:04,420
suddenly coming across you a random

00:04:00,880 --> 00:04:06,600
completely random bug which you couldn't

00:04:04,420 --> 00:04:09,790
replicate on your local environment and

00:04:06,600 --> 00:04:13,440
you had no anticipation of so that was

00:04:09,790 --> 00:04:17,440
one of the the big problems that we had

00:04:13,440 --> 00:04:19,630
the other main problem was to do with

00:04:17,440 --> 00:04:22,360
the management of those production

00:04:19,630 --> 00:04:25,780
environments we've got a great team of

00:04:22,360 --> 00:04:28,660
developers in world stores some of whom

00:04:25,780 --> 00:04:31,169
are here right now some have elected not

00:04:28,660 --> 00:04:31,169
to come

00:04:31,680 --> 00:04:39,760
what we really kind of lacked is that

00:04:37,510 --> 00:04:44,460
same kind of resource on the system

00:04:39,760 --> 00:04:47,680
admins side of things so we've had a few

00:04:44,460 --> 00:04:49,930
attempts at producing well-managed

00:04:47,680 --> 00:04:52,750
production environments some with chef

00:04:49,930 --> 00:04:55,560
some with puppet a mas they all start

00:04:52,750 --> 00:05:00,150
out pretty well

00:04:55,560 --> 00:05:02,290
we whichever implementation we went for

00:05:00,150 --> 00:05:05,890
because of the lack of resource we

00:05:02,290 --> 00:05:08,980
usually hit points at which we'd kind of

00:05:05,890 --> 00:05:10,780
throw away all of the the rule sets that

00:05:08,980 --> 00:05:12,880
we developed for those and we'd end up

00:05:10,780 --> 00:05:16,420
building exceptions and processes and

00:05:12,880 --> 00:05:19,540
sooner or later our servers were all

00:05:16,420 --> 00:05:23,680
running their own different versions of

00:05:19,540 --> 00:05:25,180
puppet and different scripts and we

00:05:23,680 --> 00:05:27,940
pretty much had to take it off all of

00:05:25,180 --> 00:05:31,750
our servers stop it running and we we

00:05:27,940 --> 00:05:33,960
kept going back to square one so these

00:05:31,750 --> 00:05:38,380
were a couple of the problems that

00:05:33,960 --> 00:05:41,440
docker solves for us so I'm not going to

00:05:38,380 --> 00:05:43,419
go through my mind dump of docker

00:05:41,440 --> 00:05:51,070
benefits which we've had which we've

00:05:43,419 --> 00:05:54,610
seen but some of the really beneficial

00:05:51,070 --> 00:05:57,310
parts are the dev environment so as I

00:05:54,610 --> 00:06:00,400
was talking earlier the dev and bumps

00:05:57,310 --> 00:06:05,430
are now pretty trivial to set up case of

00:06:00,400 --> 00:06:09,370
three commands and actually we know that

00:06:05,430 --> 00:06:11,050
when a developer is actually developing

00:06:09,370 --> 00:06:14,080
its code they have the exact same

00:06:11,050 --> 00:06:15,700
versions of those services running on

00:06:14,080 --> 00:06:19,780
their local machine as the ones that

00:06:15,700 --> 00:06:23,979
we're running in production with the

00:06:19,780 --> 00:06:28,540
same setup for all of our different

00:06:23,979 --> 00:06:31,000
projects it actually for me makes my

00:06:28,540 --> 00:06:34,600
life a lot of it easier as well so

00:06:31,000 --> 00:06:37,030
because the setup is the same we can

00:06:34,600 --> 00:06:40,470
actually move developers to different

00:06:37,030 --> 00:06:43,170
projects very very easily now

00:06:40,470 --> 00:06:45,720
so one of the things we've done we've

00:06:43,170 --> 00:06:47,370
changed from a huge monolithic

00:06:45,720 --> 00:06:49,860
application running our e-commerce

00:06:47,370 --> 00:06:55,560
platform itself and we started breaking

00:06:49,860 --> 00:06:59,160
that up into micro services and with the

00:06:55,560 --> 00:07:00,960
identical set up all these little micro

00:06:59,160 --> 00:07:02,330
service teams they can be ramped up and

00:07:00,960 --> 00:07:06,840
ramped down really really quickly

00:07:02,330 --> 00:07:11,790
developers don't don't take any time at

00:07:06,840 --> 00:07:14,250
all to to onboard on those projects so

00:07:11,790 --> 00:07:17,730
test sites as well so actually all of

00:07:14,250 --> 00:07:20,220
the environments that we have those

00:07:17,730 --> 00:07:22,170
environments are now completely

00:07:20,220 --> 00:07:27,720
identical to what they're developing on

00:07:22,170 --> 00:07:31,610
which is great as a result our releases

00:07:27,720 --> 00:07:34,290
into production have gone from this to

00:07:31,610 --> 00:07:37,470
clicking a button and walking away and

00:07:34,290 --> 00:07:42,600
having a coffee so that's been really

00:07:37,470 --> 00:07:46,430
great to see roll backs we haven't

00:07:42,600 --> 00:07:48,810
actually had to do any roll backs yet

00:07:46,430 --> 00:07:53,160
we've now been using docker in

00:07:48,810 --> 00:07:56,340
production for just over a year we were

00:07:53,160 --> 00:08:00,030
using it in development before that but

00:07:56,340 --> 00:08:02,340
actually of the 8 different services

00:08:00,030 --> 00:08:04,860
applications that we have running in

00:08:02,340 --> 00:08:07,530
docker in production we haven't had to

00:08:04,860 --> 00:08:11,300
do any rollback but if we had because

00:08:07,530 --> 00:08:14,070
we're actually creating mutable images

00:08:11,300 --> 00:08:17,610
those roll backs are really really

00:08:14,070 --> 00:08:22,169
stable if they were to happen scaling is

00:08:17,610 --> 00:08:26,000
very easy and actually they're right

00:08:22,169 --> 00:08:29,550
down right down to the end it just

00:08:26,000 --> 00:08:33,740
improves the efficiency in a number of

00:08:29,550 --> 00:08:33,740
different areas for us across the board

00:08:33,979 --> 00:08:44,790
so why this talk over the past three

00:08:41,760 --> 00:08:48,660
years I've been attending many

00:08:44,790 --> 00:08:51,600
conferences where there have been dakka

00:08:48,660 --> 00:08:53,490
dakka talks most of them have been

00:08:51,600 --> 00:08:56,130
introductions to docker

00:08:53,490 --> 00:08:59,250
and pretty much in every single one of

00:08:56,130 --> 00:09:02,430
them the speaker stands up here and he

00:08:59,250 --> 00:09:05,370
asks the same three questions so the

00:09:02,430 --> 00:09:05,790
first question being who here has heard

00:09:05,370 --> 00:09:07,160
of docker

00:09:05,790 --> 00:09:10,529
I'm not going to ask you these questions

00:09:07,160 --> 00:09:12,779
who here has heard of docker and at that

00:09:10,529 --> 00:09:15,029
point kind of 95 percent of people stick

00:09:12,779 --> 00:09:18,330
their hands up who uses a docker in

00:09:15,029 --> 00:09:19,920
development at which point maybe about

00:09:18,330 --> 00:09:24,000
50 percent of the room keep their hands

00:09:19,920 --> 00:09:26,490
up and finally last question

00:09:24,000 --> 00:09:28,260
who uses docker in production and over

00:09:26,490 --> 00:09:31,020
the three years I've seen the number of

00:09:28,260 --> 00:09:34,440
hands actually increase for the people

00:09:31,020 --> 00:09:38,430
who use docker in development but for

00:09:34,440 --> 00:09:41,550
some reason people are still not using

00:09:38,430 --> 00:09:45,990
it in production so this is a leap which

00:09:41,550 --> 00:09:50,640
we took and there's not really a lot to

00:09:45,990 --> 00:09:53,940
it so this talk is going to try and give

00:09:50,640 --> 00:09:56,250
you a good picture of what it takes to

00:09:53,940 --> 00:09:58,170
run docker and in production and to give

00:09:56,250 --> 00:09:59,149
everyone the confidence to do that as

00:09:58,170 --> 00:10:04,500
well

00:09:59,149 --> 00:10:06,690
so an interesting stat I came across

00:10:04,500 --> 00:10:09,300
it's a little bit old it's about 6

00:10:06,690 --> 00:10:13,430
months old but docker adoption this is

00:10:09,300 --> 00:10:17,399
in production is actually up quite a lot

00:10:13,430 --> 00:10:21,060
so 30% growth in the year ending May

00:10:17,399 --> 00:10:26,490
2016 what is interesting about this is

00:10:21,060 --> 00:10:29,910
that actually the stats here well it

00:10:26,490 --> 00:10:32,940
shows big increase but that increase is

00:10:29,910 --> 00:10:40,350
largely driven by the large companies so

00:10:32,940 --> 00:10:43,829
data dog have they found that the more

00:10:40,350 --> 00:10:46,829
hosts you have with them the more likely

00:10:43,829 --> 00:10:48,899
you are to start playing around the

00:10:46,829 --> 00:10:52,890
docker and the more likely you are to

00:10:48,899 --> 00:10:54,390
get it up into production so actually

00:10:52,890 --> 00:10:58,079
it's not the big companies that I'm

00:10:54,390 --> 00:11:01,680
interested in I'm more interested in

00:10:58,079 --> 00:11:05,970
getting the smaller teams smaller

00:11:01,680 --> 00:11:07,529
companies in translating their projects

00:11:05,970 --> 00:11:14,399
over to docker and

00:11:07,529 --> 00:11:16,740
deploying those in production so what is

00:11:14,399 --> 00:11:23,519
docker

00:11:16,740 --> 00:11:27,509
I am fuming that most of you all know

00:11:23,519 --> 00:11:34,949
what docker is I'm not going to go into

00:11:27,509 --> 00:11:37,970
it just a little straw poll everyone who

00:11:34,949 --> 00:11:43,800
doesn't know what docker is stand up

00:11:37,970 --> 00:11:46,259
great so everyone should know then all

00:11:43,800 --> 00:11:49,199
about docker files about the differences

00:11:46,259 --> 00:11:52,259
between images and containers possibly

00:11:49,199 --> 00:11:53,970
be familiar with the native

00:11:52,259 --> 00:11:57,839
orchestration of docker which is docker

00:11:53,970 --> 00:12:01,889
compose docker machine all of those kind

00:11:57,839 --> 00:12:07,410
of core cool things about docker

00:12:01,889 --> 00:12:09,300
so I won't go into that if you want to

00:12:07,410 --> 00:12:10,920
find out more about that there are loads

00:12:09,300 --> 00:12:15,389
of tutorials loads of youtube videos

00:12:10,920 --> 00:12:20,610
online but I would recommend this blog

00:12:15,389 --> 00:12:23,819
from a friend of mine Mike he's produced

00:12:20,610 --> 00:12:26,209
a great blog on actually docker izing

00:12:23,819 --> 00:12:32,519
kind of your first PHP application

00:12:26,209 --> 00:12:33,509
actually using PHP fpm and nginx and get

00:12:32,519 --> 00:12:37,529
something up and running really quickly

00:12:33,509 --> 00:12:44,339
and he's also recently updated that to

00:12:37,529 --> 00:12:47,699
make use of docker compose VT so if you

00:12:44,339 --> 00:12:53,129
were to look at that blog you would end

00:12:47,699 --> 00:12:56,009
up in a position whereby you have what I

00:12:53,129 --> 00:12:59,670
call a development docker image so

00:12:56,009 --> 00:13:02,429
usually these docker images are based

00:12:59,670 --> 00:13:05,730
from trusted images and that's important

00:13:02,429 --> 00:13:07,319
trusted images great to use they are you

00:13:05,730 --> 00:13:08,939
know you you can actually trust them

00:13:07,319 --> 00:13:12,329
they haven't got any nasty malicious

00:13:08,939 --> 00:13:14,309
code in them they are constantly fixed

00:13:12,329 --> 00:13:20,040
with the latest security patches that's

00:13:14,309 --> 00:13:22,230
great often you'll mount your code into

00:13:20,040 --> 00:13:25,030
that image

00:13:22,230 --> 00:13:27,040
you may then use the docker commit cup

00:13:25,030 --> 00:13:30,520
commands to actually create a snapshot

00:13:27,040 --> 00:13:33,490
of that image in time of that container

00:13:30,520 --> 00:13:35,460
to an image you might then with that

00:13:33,490 --> 00:13:38,080
image push it to an image repository

00:13:35,460 --> 00:13:44,980
you're not really going to thought about

00:13:38,080 --> 00:13:48,580
your configuration for it and yeah kind

00:13:44,980 --> 00:13:50,380
of you might not even be using docker

00:13:48,580 --> 00:13:52,630
compose that either you might just set

00:13:50,380 --> 00:13:58,090
it up manually with a series of docker

00:13:52,630 --> 00:14:00,550
run commands so what we generally see

00:13:58,090 --> 00:14:03,430
when we're using docker for development

00:14:00,550 --> 00:14:06,850
purposes is we'll have our project which

00:14:03,430 --> 00:14:08,830
will exist in a git repository and we

00:14:06,850 --> 00:14:11,950
will pull that project and I'll show you

00:14:08,830 --> 00:14:14,170
an example of this later but we'll pull

00:14:11,950 --> 00:14:17,740
that project down and within that there

00:14:14,170 --> 00:14:20,290
will be a compose file which we will

00:14:17,740 --> 00:14:24,970
then run our docker compose up that may

00:14:20,290 --> 00:14:27,790
then get more images from cloud registry

00:14:24,970 --> 00:14:30,600
or it might choose to build an image

00:14:27,790 --> 00:14:33,310
from a set of docker file instructions

00:14:30,600 --> 00:14:37,540
you'll end up with a set of images we'll

00:14:33,310 --> 00:14:39,820
run those and then we will mount our PHP

00:14:37,540 --> 00:14:41,620
code into the container so that we can

00:14:39,820 --> 00:14:44,170
actively develop on it we can iterate

00:14:41,620 --> 00:14:46,980
between developments if we have any

00:14:44,170 --> 00:14:50,860
dependencies once the containers started

00:14:46,980 --> 00:14:53,110
we will actually run our composer

00:14:50,860 --> 00:14:55,680
install or our baron school or whatever

00:14:53,110 --> 00:14:59,410
dependency you might be using and

00:14:55,680 --> 00:15:01,360
environment variables and any secrets

00:14:59,410 --> 00:15:02,890
you might have so API keys that kind of

00:15:01,360 --> 00:15:05,650
stuff

00:15:02,890 --> 00:15:07,570
you'll probably just start tinkering

00:15:05,650 --> 00:15:17,470
around with them inside the actual

00:15:07,570 --> 00:15:22,210
container so these images they're really

00:15:17,470 --> 00:15:25,120
good to get up and running they allow

00:15:22,210 --> 00:15:27,040
developers to start working from the

00:15:25,120 --> 00:15:31,420
same page so they all have the same

00:15:27,040 --> 00:15:33,580
consistent environment it doesn't matter

00:15:31,420 --> 00:15:34,559
what kind of platform they're on whether

00:15:33,580 --> 00:15:38,230
they use

00:15:34,559 --> 00:15:42,249
you know Linux Mac Windows their windows

00:15:38,230 --> 00:15:43,629
is a bit harder to get set up on but

00:15:42,249 --> 00:15:46,180
they can all end up with the same

00:15:43,629 --> 00:15:48,610
environment and because we've mounted

00:15:46,180 --> 00:15:52,660
our code in we can actually use our IDE

00:15:48,610 --> 00:15:57,490
for development on these the problem

00:15:52,660 --> 00:16:03,040
with them is they are just not suitable

00:15:57,490 --> 00:16:05,709
for deploying into production with a

00:16:03,040 --> 00:16:09,879
code you might have ended committing

00:16:05,709 --> 00:16:13,629
those and pushing your image to a docker

00:16:09,879 --> 00:16:16,420
repository docker hub or private

00:16:13,629 --> 00:16:19,209
repository of your choice but actually

00:16:16,420 --> 00:16:21,850
when you see that image there's no

00:16:19,209 --> 00:16:24,249
traceability of what's gone into it you

00:16:21,850 --> 00:16:27,759
don't really have any idea what anyone's

00:16:24,249 --> 00:16:31,480
done to to create that image so there's

00:16:27,759 --> 00:16:34,120
no transparency there often their

00:16:31,480 --> 00:16:36,160
environment specific and to get them

00:16:34,120 --> 00:16:39,160
maybe running in a production site you

00:16:36,160 --> 00:16:42,429
might have hard-coded the config

00:16:39,160 --> 00:16:44,649
variables into a file and committed that

00:16:42,429 --> 00:16:46,149
to another image layer which you've then

00:16:44,649 --> 00:16:48,339
pushed off and deployed that to

00:16:46,149 --> 00:16:50,259
production but now that that image is

00:16:48,339 --> 00:16:52,209
only specific for your production

00:16:50,259 --> 00:16:53,980
release you can't deploy that same image

00:16:52,209 --> 00:16:58,990
to staging environment or testing

00:16:53,980 --> 00:17:05,339
environment essentially the images

00:16:58,990 --> 00:17:10,659
they're not immutable so what do we want

00:17:05,339 --> 00:17:13,539
from our production images we want them

00:17:10,659 --> 00:17:15,730
to be immutable and we want them to be

00:17:13,539 --> 00:17:18,010
ephemeral now these are kind of two

00:17:15,730 --> 00:17:20,799
fancy-pants words so things that are

00:17:18,010 --> 00:17:26,020
actually quite easy to understand

00:17:20,799 --> 00:17:30,610
so by mutable we mean is that they are

00:17:26,020 --> 00:17:36,370
unchanging over time so for our docker

00:17:30,610 --> 00:17:39,370
images we want to be able to ramp up

00:17:36,370 --> 00:17:42,250
servers ramp up nodes actually scale the

00:17:39,370 --> 00:17:46,240
number of services that we have at any

00:17:42,250 --> 00:17:47,440
point in time and we want the behavior

00:17:46,240 --> 00:17:58,559
of our image

00:17:47,440 --> 00:18:02,529
to be the same every time we do that the

00:17:58,559 --> 00:18:06,190
difference between kind of what we had

00:18:02,529 --> 00:18:08,970
before daca and what we've got with

00:18:06,190 --> 00:18:11,590
docker is that so that we were using a

00:18:08,970 --> 00:18:15,690
deployment tool called Rocketeer before

00:18:11,590 --> 00:18:20,049
that which is based on Capistrano and

00:18:15,690 --> 00:18:22,240
before that we were using kind of get

00:18:20,049 --> 00:18:24,460
pulls on our production servers and

00:18:22,240 --> 00:18:30,100
before that we're using File Transfer

00:18:24,460 --> 00:18:33,610
Protocol that was a long time ago so

00:18:30,100 --> 00:18:36,120
with all of those methods what you're

00:18:33,610 --> 00:18:40,590
doing on each of your environments is

00:18:36,120 --> 00:18:44,470
you're getting your deployment tool to

00:18:40,590 --> 00:18:47,799
do a git pulls do a composer install to

00:18:44,470 --> 00:18:51,960
actually go through all the instructions

00:18:47,799 --> 00:18:55,090
you've given it and you're hoping that

00:18:51,960 --> 00:18:57,370
the code that you get out of it is the

00:18:55,090 --> 00:18:59,549
same as what you've got on your QA sites

00:18:57,370 --> 00:19:02,320
and what you've got on your staging site

00:18:59,549 --> 00:19:04,720
and largely you know that works pretty

00:19:02,320 --> 00:19:08,230
well but the great thing about the

00:19:04,720 --> 00:19:11,710
docker images is that the actual image

00:19:08,230 --> 00:19:16,210
you've got has got the exact it's got

00:19:11,710 --> 00:19:21,659
the identical files that you're

00:19:16,210 --> 00:19:25,080
deploying on each environment I was

00:19:21,659 --> 00:19:28,750
thinking about an analogy for this

00:19:25,080 --> 00:19:32,200
my mum makes great cookies really good

00:19:28,750 --> 00:19:36,909
chocolate chip cookies and it's almost

00:19:32,200 --> 00:19:40,090
the same as her giving me the recipe for

00:19:36,909 --> 00:19:42,669
those cookies and me following those

00:19:40,090 --> 00:19:44,980
that those those set of instructions

00:19:42,669 --> 00:19:46,570
step-by-step but I'm actually using you

00:19:44,980 --> 00:19:49,600
know very slightly different ingredients

00:19:46,570 --> 00:19:51,279
it's not the exact same sugar that she's

00:19:49,600 --> 00:19:54,669
been using to create her cookies and

00:19:51,279 --> 00:19:57,009
even though I might be as good a well

00:19:54,669 --> 00:19:59,290
I'm a terrible cook a cheater especially

00:19:57,009 --> 00:20:02,680
for desserts

00:19:59,290 --> 00:20:05,650
but even if I am yeah as good as that

00:20:02,680 --> 00:20:08,020
technically I won't end up with the

00:20:05,650 --> 00:20:10,240
exact same key is the ones that she's

00:20:08,020 --> 00:20:14,320
kind of baked me and then I felt a

00:20:10,240 --> 00:20:20,110
rubbish analogy or not but so moving it

00:20:14,320 --> 00:20:21,640
on to ephemeral so Paducah we want to

00:20:20,110 --> 00:20:24,910
make we want to make sure that all of

00:20:21,640 --> 00:20:29,740
our images are prepared to be

00:20:24,910 --> 00:20:31,690
short-lived so what this means is that

00:20:29,740 --> 00:20:34,330
the docker images the containers that we

00:20:31,690 --> 00:20:36,820
create from them we've got to expect

00:20:34,330 --> 00:20:38,980
those to go down at any time so we need

00:20:36,820 --> 00:20:42,490
to make sure that they're stateless if

00:20:38,980 --> 00:20:45,460
they contain any kind of state then when

00:20:42,490 --> 00:20:48,160
those containers are destroyed we're

00:20:45,460 --> 00:20:50,410
going to lose that so these are two

00:20:48,160 --> 00:20:54,460
things that we want from our production

00:20:50,410 --> 00:20:56,880
images and I'm going to show you how to

00:20:54,460 --> 00:20:56,880
do that

00:20:58,710 --> 00:21:04,330
so for production-ready artifacts

00:21:02,800 --> 00:21:06,660
here are some of the things that we need

00:21:04,330 --> 00:21:08,500
to do them I strongly recommend

00:21:06,660 --> 00:21:09,970
automated bills which I'll talk about

00:21:08,500 --> 00:21:12,820
we've got to take care of our

00:21:09,970 --> 00:21:16,360
application code we have to take care of

00:21:12,820 --> 00:21:21,010
the dependencies and we have to make

00:21:16,360 --> 00:21:24,580
them environment capable so what we'll

00:21:21,010 --> 00:21:28,450
end up with is something like this

00:21:24,580 --> 00:21:33,430
we'll have our git repository with our

00:21:28,450 --> 00:21:36,340
project from that when we trigger an

00:21:33,430 --> 00:21:39,820
automated build that automated build

00:21:36,340 --> 00:21:42,840
will go and create an image which has

00:21:39,820 --> 00:21:46,930
got the PHP code it's also got the

00:21:42,840 --> 00:21:49,110
dependencies installed into it and we'll

00:21:46,930 --> 00:21:53,140
be taking care of our environment

00:21:49,110 --> 00:21:55,450
variables as well that image will get

00:21:53,140 --> 00:21:57,850
built on your docker registry and you'll

00:21:55,450 --> 00:22:01,180
end up with an image there and then when

00:21:57,850 --> 00:22:03,420
we run it in production we just run an

00:22:01,180 --> 00:22:06,090
instance of that image and we pass in

00:22:03,420 --> 00:22:13,919
our environment and

00:22:06,090 --> 00:22:17,400
and our secrets at runtime so before we

00:22:13,919 --> 00:22:20,010
get started on that I just like to posit

00:22:17,400 --> 00:22:22,080
a proposed repository repository

00:22:20,010 --> 00:22:24,120
structure so everyone des there's no

00:22:22,080 --> 00:22:26,940
real kind of set way of doing this but

00:22:24,120 --> 00:22:30,809
this is how I've found to be the

00:22:26,940 --> 00:22:40,200
clearest and easiest way of structuring

00:22:30,809 --> 00:22:43,529
your repository so kind of before

00:22:40,200 --> 00:22:45,960
well usually your repositories consists

00:22:43,529 --> 00:22:50,940
of your application code at the root

00:22:45,960 --> 00:22:54,090
level and now you should be thinking

00:22:50,940 --> 00:22:56,220
that your repository is one level up so

00:22:54,090 --> 00:22:58,679
actually your entire project environment

00:22:56,220 --> 00:23:02,250
all of the services all of that is now

00:22:58,679 --> 00:23:06,539
under version control so within the app

00:23:02,250 --> 00:23:08,580
code I think it's great that that now

00:23:06,539 --> 00:23:09,720
just contains everything that you used

00:23:08,580 --> 00:23:11,010
to have you at your root level it

00:23:09,720 --> 00:23:14,029
doesn't actually contain any docker

00:23:11,010 --> 00:23:16,529
files little and you know if someone is

00:23:14,029 --> 00:23:18,539
adverse to using docker they could just

00:23:16,529 --> 00:23:22,080
take the contents of the app code and

00:23:18,539 --> 00:23:25,169
fired up in whatever environment they

00:23:22,080 --> 00:23:27,320
wanted that never actually happened but

00:23:25,169 --> 00:23:29,880
it also gives developers a really clear

00:23:27,320 --> 00:23:33,450
a really clear place of where their

00:23:29,880 --> 00:23:34,710
development should largely be and when

00:23:33,450 --> 00:23:37,830
they're submitting pull requests the

00:23:34,710 --> 00:23:41,700
code review you know very easy to see

00:23:37,830 --> 00:23:44,460
that you know if they're making changes

00:23:41,700 --> 00:23:45,720
to other other files there they've got

00:23:44,460 --> 00:23:51,029
to have a pretty good reason for doing

00:23:45,720 --> 00:23:54,179
that so it really helps with clarity the

00:23:51,029 --> 00:23:57,360
app data directory that holds the docker

00:23:54,179 --> 00:23:59,730
file which ends up creating a data only

00:23:57,360 --> 00:24:02,429
container of the app code and that data

00:23:59,730 --> 00:24:03,990
in a container here if you're using PHP

00:24:02,429 --> 00:24:08,010
fbm and nginx you might just be using

00:24:03,990 --> 00:24:10,559
Apache but that then shares the

00:24:08,010 --> 00:24:15,840
application code to your nginx and PHP

00:24:10,559 --> 00:24:17,549
fpm servers but we have our doc files or

00:24:15,840 --> 00:24:19,840
builds which I'll talk about a little

00:24:17,549 --> 00:24:21,220
bit later but essentially that

00:24:19,840 --> 00:24:24,160
the doctor file that we're going to use

00:24:21,220 --> 00:24:26,650
to build our production image the reason

00:24:24,160 --> 00:24:30,390
why it's sitting out of out of any of

00:24:26,650 --> 00:24:34,420
the directories is it needs context to

00:24:30,390 --> 00:24:36,130
the app code as well as PHP fpm if it

00:24:34,420 --> 00:24:38,830
was stiff if it was stuck inside one of

00:24:36,130 --> 00:24:41,500
those when the automated build took

00:24:38,830 --> 00:24:43,540
place it wouldn't really have visibility

00:24:41,500 --> 00:24:48,550
of anything outside of the directory

00:24:43,540 --> 00:24:52,180
that it's in we also have the docker

00:24:48,550 --> 00:24:56,050
composed and Gamal file and the override

00:24:52,180 --> 00:24:58,210
yellow file so when you type in Dhaka

00:24:56,050 --> 00:25:01,000
compose up - d those are the two files

00:24:58,210 --> 00:25:04,660
which will be used to start up your

00:25:01,000 --> 00:25:09,670
containers and then we also have a prod

00:25:04,660 --> 00:25:12,220
site channel and that is there to

00:25:09,670 --> 00:25:16,690
simulate what we do on production so

00:25:12,220 --> 00:25:19,120
depending on where you deploy your

00:25:16,690 --> 00:25:21,130
docker application they might have

00:25:19,120 --> 00:25:23,950
slightly different ways of orchestrating

00:25:21,130 --> 00:25:28,420
you might be using docker datacenter and

00:25:23,950 --> 00:25:30,760
you might be using got a swarm you might

00:25:28,420 --> 00:25:33,690
be using cuban Effie's you might be

00:25:30,760 --> 00:25:37,920
using missiles you might be using AWS so

00:25:33,690 --> 00:25:41,200
for example with AWS which is who we use

00:25:37,920 --> 00:25:42,670
they use they have a concept of task

00:25:41,200 --> 00:25:45,430
definitions which provides the

00:25:42,670 --> 00:25:51,700
orchestration so if we ever just want to

00:25:45,430 --> 00:25:54,130
check that to check what has happened on

00:25:51,700 --> 00:25:58,720
production we use this primal to fire up

00:25:54,130 --> 00:26:01,930
a kind of quasi production simulation so

00:25:58,720 --> 00:26:06,070
the other great thing that this

00:26:01,930 --> 00:26:08,200
repository structure gives you is the

00:26:06,070 --> 00:26:09,700
ability to get up and running in just

00:26:08,200 --> 00:26:15,610
three commands you've probably all seen

00:26:09,700 --> 00:26:17,050
this before but this is literally it for

00:26:15,610 --> 00:26:19,270
developers to get up and running they

00:26:17,050 --> 00:26:24,130
should only have to type in three

00:26:19,270 --> 00:26:26,380
commands into that console so we've got

00:26:24,130 --> 00:26:27,940
the git clone we've got the change

00:26:26,380 --> 00:26:29,530
directory to that app and then we've got

00:26:27,940 --> 00:26:31,740
the docket that goes up so it's really

00:26:29,530 --> 00:26:32,830
really quick really simple

00:26:31,740 --> 00:26:36,909
[Music]

00:26:32,830 --> 00:26:39,309
and the same for every project so just

00:26:36,909 --> 00:26:44,169
talking about automated bills for a

00:26:39,309 --> 00:26:46,929
second these for us they build our

00:26:44,169 --> 00:26:51,840
deployment artifacts we can set them on

00:26:46,929 --> 00:26:54,519
automatic or manual triggers so whenever

00:26:51,840 --> 00:26:57,940
whenever we make a push to our master

00:26:54,519 --> 00:27:01,210
branch or develop branch that actually

00:26:57,940 --> 00:27:04,029
automatically builds tagged images on

00:27:01,210 --> 00:27:07,480
the latest and Stables master also

00:27:04,029 --> 00:27:09,789
whenever we tag an image with assembler

00:27:07,480 --> 00:27:12,929
number that also triggers and you build

00:27:09,789 --> 00:27:15,580
and it tags the image appropriately

00:27:12,929 --> 00:27:18,820
they're great for kind of if you have

00:27:15,580 --> 00:27:22,809
any errors in your your bills they'll

00:27:18,820 --> 00:27:24,909
tell you about that the important thing

00:27:22,809 --> 00:27:27,519
about these are that they give you the

00:27:24,909 --> 00:27:28,990
transparency behind that docker image

00:27:27,519 --> 00:27:30,970
that I was talking about that was

00:27:28,990 --> 00:27:35,710
lacking from development images so

00:27:30,970 --> 00:27:39,130
because they're completely automated you

00:27:35,710 --> 00:27:43,269
can completely you can understand what's

00:27:39,130 --> 00:27:45,880
gone into that image completely there's

00:27:43,269 --> 00:27:47,529
no there's no other way of injecting

00:27:45,880 --> 00:27:49,750
sneaky bits of code or anything like

00:27:47,529 --> 00:27:51,490
that so you know you've got a complete

00:27:49,750 --> 00:27:57,669
blueprint for what's gone into that

00:27:51,490 --> 00:27:59,889
image some other cool things repository

00:27:57,669 --> 00:28:02,289
links so if you have one image which is

00:27:59,889 --> 00:28:04,110
based on another then actually if one

00:28:02,289 --> 00:28:06,700
image gets the push to it it can trigger

00:28:04,110 --> 00:28:10,570
an alternate build in a different

00:28:06,700 --> 00:28:12,610
repository and we use the webhooks

00:28:10,570 --> 00:28:16,779
aspect of this as well to send us

00:28:12,610 --> 00:28:19,659
notifications to our slack channel so if

00:28:16,779 --> 00:28:23,500
something goes wrong with an image we

00:28:19,659 --> 00:28:26,470
have a shim running and the automated

00:28:23,500 --> 00:28:28,600
build something goes wrong or if the

00:28:26,470 --> 00:28:31,600
build succeeded it'll send a quick

00:28:28,600 --> 00:28:33,880
message up to the shim and that will

00:28:31,600 --> 00:28:35,400
then notify slack for us so that's

00:28:33,880 --> 00:28:36,570
really cool

00:28:35,400 --> 00:28:41,500
[Music]

00:28:36,570 --> 00:28:44,440
so this is an example of an automated

00:28:41,500 --> 00:28:46,719
build and this is how we set up most of

00:28:44,440 --> 00:28:50,609
our images

00:28:46,719 --> 00:28:54,249
and actually when a build is triggered

00:28:50,609 --> 00:28:56,169
really you can replicate it in two or

00:28:54,249 --> 00:28:57,699
three commands I've stuck in an extra

00:28:56,169 --> 00:29:01,569
couple of commands there to show what's

00:28:57,699 --> 00:29:04,479
happening on the develop tag so if I

00:29:01,569 --> 00:29:07,239
were to do a push on the develop branch

00:29:04,479 --> 00:29:11,409
on this project because that trigger is

00:29:07,239 --> 00:29:14,319
set up we'll do it'll do essentially it

00:29:11,409 --> 00:29:18,299
will do a git clone of my repository

00:29:14,319 --> 00:29:20,439
from git it'll change directory to that

00:29:18,299 --> 00:29:23,589
because it's developed it's going to

00:29:20,439 --> 00:29:26,999
build the latest tag it'll check that

00:29:23,589 --> 00:29:31,239
out build the image and then push that

00:29:26,999 --> 00:29:32,769
to my repository my docket repository so

00:29:31,239 --> 00:29:36,819
that's kind of a simulation of it that's

00:29:32,769 --> 00:29:39,999
what's happening so yeah

00:29:36,819 --> 00:29:45,159
advantages talked about the transparency

00:29:39,999 --> 00:29:46,749
that it gives you and you know the great

00:29:45,159 --> 00:29:49,839
thing about it as well is that the image

00:29:46,749 --> 00:29:56,309
repository is kept up to date completely

00:29:49,839 --> 00:29:59,709
with any code changes that are pushed so

00:29:56,309 --> 00:30:00,489
application code we've seen in

00:29:59,709 --> 00:30:03,669
development

00:30:00,489 --> 00:30:06,759
what kind of happens is we check out the

00:30:03,669 --> 00:30:08,919
repository we start the container and

00:30:06,759 --> 00:30:10,239
when we start the container we mount the

00:30:08,919 --> 00:30:11,559
code into it there there are a couple of

00:30:10,239 --> 00:30:16,659
other ways of doing this as well I've

00:30:11,559 --> 00:30:18,369
seen some people who have started the

00:30:16,659 --> 00:30:21,189
container they've got their code copied

00:30:18,369 --> 00:30:23,139
into their container and every time

00:30:21,189 --> 00:30:26,379
every time they want to develop and see

00:30:23,139 --> 00:30:28,569
something then they have to restart the

00:30:26,379 --> 00:30:33,549
container and that kind of reloads the

00:30:28,569 --> 00:30:36,389
code into it for us we like using IDs

00:30:33,549 --> 00:30:39,279
eventual move you do for development

00:30:36,389 --> 00:30:41,379
so by mounting the code in that still

00:30:39,279 --> 00:30:44,319
allows us to use our IDs with docker and

00:30:41,379 --> 00:30:47,309
development and still allows us to see

00:30:44,319 --> 00:30:51,219
all of the changes kind of in real time

00:30:47,309 --> 00:30:52,959
so in production as we've seen what

00:30:51,219 --> 00:30:53,829
we're going to end up doing is when that

00:30:52,959 --> 00:30:57,759
image is built

00:30:53,829 --> 00:30:58,640
now instead we're going to copy the code

00:30:57,759 --> 00:31:02,570
in

00:30:58,640 --> 00:31:10,420
that's pretty simple so I'm just going

00:31:02,570 --> 00:31:13,730
to show quick demo this if I can okay so

00:31:10,420 --> 00:31:16,160
I've got a very very simple application

00:31:13,730 --> 00:31:17,540
it's going to be your kind of standard

00:31:16,160 --> 00:31:23,890
hello world it's not going to have any

00:31:17,540 --> 00:31:26,960
dependencies yet I'm going to clean that

00:31:23,890 --> 00:31:31,450
from my git repository I'm going to

00:31:26,960 --> 00:31:35,860
change directory to it and I'm going to

00:31:31,450 --> 00:31:39,800
check out an earlier tag version of it

00:31:35,860 --> 00:31:50,660
so if we have a quick look at what's in

00:31:39,800 --> 00:31:52,640
here I need to make them bigger okay

00:31:50,660 --> 00:31:55,430
hopefully you guys can see this

00:31:52,640 --> 00:32:00,050
so in the app code really really simple

00:31:55,430 --> 00:32:02,300
we've got an index.php file we've got

00:32:00,050 --> 00:32:06,830
our application data so this is going to

00:32:02,300 --> 00:32:10,100
create our data in a container with with

00:32:06,830 --> 00:32:12,530
that index.php file we've got our nginx

00:32:10,100 --> 00:32:17,780
container this is kind of a basic setup

00:32:12,530 --> 00:32:21,950
of nginx and we've got a really really

00:32:17,780 --> 00:32:26,900
simple PHP fpm file which is from the

00:32:21,950 --> 00:32:30,350
trusted PHP image so when we do a docker

00:32:26,900 --> 00:32:33,010
compose up we're going to see our

00:32:30,350 --> 00:32:33,010
development work

00:32:40,480 --> 00:32:46,280
so that will take instructions will fire

00:32:43,820 --> 00:32:50,290
off our application we can see that it's

00:32:46,280 --> 00:32:53,330
running on port 8080 so if we now go to

00:32:50,290 --> 00:32:56,840
port 8080 here we've got hello.php UK

00:32:53,330 --> 00:33:02,840
and if we go back to that and if we

00:32:56,840 --> 00:33:04,610
actually make changes here we can see

00:33:02,840 --> 00:33:08,440
that it reflects in real time so that's

00:33:04,610 --> 00:33:11,260
great for development in production

00:33:08,440 --> 00:33:17,270
what's going to happen

00:33:11,260 --> 00:33:20,620
so the original phpdoc file is all it's

00:33:17,270 --> 00:33:23,420
doing it's getting the PHP image and

00:33:20,620 --> 00:33:25,190
it's setting London to eat a local

00:33:23,420 --> 00:33:29,840
timezone they're really really simple

00:33:25,190 --> 00:33:31,280
all we're doing very simply is just for

00:33:29,840 --> 00:33:33,710
our docket file to build our production

00:33:31,280 --> 00:33:37,870
image we're copying the app code into

00:33:33,710 --> 00:33:43,610
into that and I've got this running on

00:33:37,870 --> 00:33:48,110
an AWS cluster so I think this is yep

00:33:43,610 --> 00:33:52,880
this is running that very first image

00:33:48,110 --> 00:33:56,240
and you kind of see here if we get the

00:33:52,880 --> 00:33:59,470
right URL for that you can see this

00:33:56,240 --> 00:34:01,820
because this has got the code in it's

00:33:59,470 --> 00:34:03,260
running up there it doesn't have any of

00:34:01,820 --> 00:34:07,520
those changes that I've just made to it

00:34:03,260 --> 00:34:10,130
of course and that code is now set in

00:34:07,520 --> 00:34:12,770
stone within that image tag it's never

00:34:10,130 --> 00:34:16,160
going to change the great thing about

00:34:12,770 --> 00:34:19,610
docker as well with you know the ability

00:34:16,160 --> 00:34:21,770
to H a very easily is that it makes it

00:34:19,610 --> 00:34:23,960
pretty much impossible for developers to

00:34:21,770 --> 00:34:26,900
go into production systems and tinker

00:34:23,960 --> 00:34:29,450
around with code kind of as if voting on

00:34:26,900 --> 00:34:32,480
production sites which is a really bad

00:34:29,450 --> 00:34:34,730
practice so this yeah this method

00:34:32,480 --> 00:34:39,410
actually makes it pretty pretty much

00:34:34,730 --> 00:34:42,370
impossible either okay so that's the

00:34:39,410 --> 00:34:45,770
application code copy it into the image

00:34:42,370 --> 00:34:48,250
get that image build that's now part of

00:34:45,770 --> 00:34:48,250
the way there

00:34:48,810 --> 00:34:58,000
so the next thing we need to do is sort

00:34:53,710 --> 00:35:00,250
out dependencies so a lot of the time we

00:34:58,000 --> 00:35:04,180
use composer to get third-party

00:35:00,250 --> 00:35:09,130
libraries in we use Bower as well you

00:35:04,180 --> 00:35:15,390
might want to compile CSS using sass

00:35:09,130 --> 00:35:21,310
something like that so typically when we

00:35:15,390 --> 00:35:24,730
use verse in development we clone we

00:35:21,310 --> 00:35:27,760
clean our repository and after we run

00:35:24,730 --> 00:35:31,300
the container we then install the

00:35:27,760 --> 00:35:34,720
dependencies so because we're mounting

00:35:31,300 --> 00:35:37,780
our actual PHP code in afterwards so

00:35:34,720 --> 00:35:39,580
that we can use our IDE as well if we

00:35:37,780 --> 00:35:42,220
were to do this as part of the image

00:35:39,580 --> 00:35:44,830
build we'd actually overwrite the vendor

00:35:42,220 --> 00:35:46,780
directory at that point and we kind of

00:35:44,830 --> 00:35:50,860
lose a lot of instances if we did it at

00:35:46,780 --> 00:35:57,160
an earlier time so here are some of the

00:35:50,860 --> 00:35:59,200
ways we might install the dependencies

00:35:57,160 --> 00:36:03,490
post container run you might use the

00:35:59,200 --> 00:36:06,660
official composer installation image so

00:36:03,490 --> 00:36:10,960
that I wouldn't recommend it because

00:36:06,660 --> 00:36:13,450
that image itself doesn't have the

00:36:10,960 --> 00:36:16,300
platform requirements that your PHP fpm

00:36:13,450 --> 00:36:18,010
container might have so generally you

00:36:16,300 --> 00:36:22,210
have to run that with the ignore

00:36:18,010 --> 00:36:24,010
platform Rex flag on another way of

00:36:22,210 --> 00:36:27,790
doing it is actually installing composer

00:36:24,010 --> 00:36:33,130
as part of your PHP fpm base image and

00:36:27,790 --> 00:36:35,350
then using that to execute the composer

00:36:33,130 --> 00:36:38,500
installation at that point if you do

00:36:35,350 --> 00:36:41,320
have any platform requirements that are

00:36:38,500 --> 00:36:43,090
missed yeah that will kind of stop your

00:36:41,320 --> 00:36:46,480
install there and it'll alert you at

00:36:43,090 --> 00:36:53,200
that point both of those are manual ways

00:36:46,480 --> 00:36:56,380
of doing it so for us we put this as an

00:36:53,200 --> 00:36:59,470
entry point script so I'll show you what

00:36:56,380 --> 00:37:03,010
we do there in production is

00:36:59,470 --> 00:37:04,900
kind of is it is a lot easier we copy

00:37:03,010 --> 00:37:08,950
our application code into the container

00:37:04,900 --> 00:37:11,920
and then we run the composer install as

00:37:08,950 --> 00:37:18,330
part of the image build so that all goes

00:37:11,920 --> 00:37:21,240
into the container in production okay so

00:37:18,330 --> 00:37:24,490
showing this off

00:37:21,240 --> 00:37:24,490
[Music]

00:37:40,600 --> 00:37:48,860
okay so some of you might have been to

00:37:45,650 --> 00:37:52,490
Louis chubby cheese talk about gwt's

00:37:48,860 --> 00:37:56,240
earlier just one talk before so this is

00:37:52,490 --> 00:37:59,510
using his library to create a JWT and

00:37:56,240 --> 00:38:02,510
you can see here that we don't have a

00:37:59,510 --> 00:38:07,040
vendor directory at present but what we

00:38:02,510 --> 00:38:10,100
do have so you can see now that we're

00:38:07,040 --> 00:38:12,290
installing it and composer now that's

00:38:10,100 --> 00:38:14,510
part of the image and sort of in just

00:38:12,290 --> 00:38:17,330
allowing PHP fpm to do its thing which

00:38:14,510 --> 00:38:19,880
is to start up as a PHP fpm process

00:38:17,330 --> 00:38:22,580
we're going to get it to execute an

00:38:19,880 --> 00:38:24,080
entry point script and that entry point

00:38:22,580 --> 00:38:25,730
script is going to do something really

00:38:24,080 --> 00:38:29,960
simple for us it's going to take care of

00:38:25,730 --> 00:38:32,990
installing composer and it will then

00:38:29,960 --> 00:38:35,270
start the PHP SPM process so the great

00:38:32,990 --> 00:38:38,330
thing about this again is that it's

00:38:35,270 --> 00:38:42,050
still just those three commands that we

00:38:38,330 --> 00:38:45,650
use to get the environment started so if

00:38:42,050 --> 00:38:50,300
I kill everything and it's not

00:38:45,650 --> 00:38:53,300
everything up again what we'll see if I

00:38:50,300 --> 00:38:58,250
take a look at the logs of the PHP femm

00:38:53,300 --> 00:38:59,840
container you can see it's cloning the

00:38:58,250 --> 00:39:02,480
appropriate third-party library that we

00:38:59,840 --> 00:39:05,390
had and I'll compose the lock file and

00:39:02,480 --> 00:39:08,000
it's installing that in that's having

00:39:05,390 --> 00:39:09,920
mounted the application code in so

00:39:08,000 --> 00:39:15,230
actually we can see the vendor directory

00:39:09,920 --> 00:39:20,270
is there now and if we have a look at

00:39:15,230 --> 00:39:30,050
our development site we can see we've

00:39:20,270 --> 00:39:37,910
got a JWT there again when when if I

00:39:30,050 --> 00:39:41,930
look at when you actually create that so

00:39:37,910 --> 00:39:45,290
here at this point 1 1 0 when that's

00:39:41,930 --> 00:39:49,310
actually pushed to docker hub that then

00:39:45,290 --> 00:39:50,540
creates our automated build and so you

00:39:49,310 --> 00:39:53,690
can see we've got

00:39:50,540 --> 00:39:57,380
r110 tag their r100 tag so the

00:39:53,690 --> 00:39:59,390
one-zero-zero had the had the hello.php

00:39:57,380 --> 00:40:04,780
UK and this builds now got our

00:39:59,390 --> 00:40:04,780
third-party library so if we deploy that

00:40:05,200 --> 00:40:14,030
go to the service deploy our new image

00:40:10,250 --> 00:40:18,350
and we should see that once that once

00:40:14,030 --> 00:40:20,330
that's deployed we've now got a single

00:40:18,350 --> 00:40:26,600
image which has got all the dependencies

00:40:20,330 --> 00:40:31,640
installed into it and that's yeah it's

00:40:26,600 --> 00:40:36,260
now great a mutual image and I'll come

00:40:31,640 --> 00:40:39,800
back to that if it might let's see so

00:40:36,260 --> 00:40:42,590
we've got a pending task now this one

00:40:39,800 --> 00:40:45,530
will fire up when everything's okay

00:40:42,590 --> 00:40:47,930
it'll stop the previous task and we'll

00:40:45,530 --> 00:41:01,370
be able to see on our production

00:40:47,930 --> 00:41:06,170
environment the new JWT okay so one of

00:41:01,370 --> 00:41:08,810
the things that what one of the slight

00:41:06,170 --> 00:41:15,290
stumbling blocks we've had we use status

00:41:08,810 --> 00:41:21,260
to keep our own proprietary dependencies

00:41:15,290 --> 00:41:24,860
private and obviously for those you need

00:41:21,260 --> 00:41:26,300
to kind of have your SSH keys available

00:41:24,860 --> 00:41:27,770
to download and for them there are a

00:41:26,300 --> 00:41:34,310
bunch of strategies that we've tried for

00:41:27,770 --> 00:41:37,550
this so what we've settled on is having

00:41:34,310 --> 00:41:41,510
a company-wide base image for both of

00:41:37,550 --> 00:41:43,700
PHP fpm within that we can put our

00:41:41,510 --> 00:41:46,220
deployment keys for our private images

00:41:43,700 --> 00:41:50,350
we can rotate those deploy deployment

00:41:46,220 --> 00:41:52,610
keys wherever we feel we need to and

00:41:50,350 --> 00:41:57,820
whenever we have an application that

00:41:52,610 --> 00:42:00,410
will use the base image so by doing that

00:41:57,820 --> 00:42:02,450
the developers who've got their

00:42:00,410 --> 00:42:04,220
bitbucket accounts and the docker hub

00:42:02,450 --> 00:42:06,530
accounts with those two things

00:42:04,220 --> 00:42:08,570
they can actually use our private

00:42:06,530 --> 00:42:10,430
dependencies and have that still

00:42:08,570 --> 00:42:14,240
installed all automatically with those

00:42:10,430 --> 00:42:17,930
three commands so I've just talked a bit

00:42:14,240 --> 00:42:20,210
about the base image if you haven't

00:42:17,930 --> 00:42:21,950
tried using a base image even if it's

00:42:20,210 --> 00:42:24,920
just a really simple one to begin with I

00:42:21,950 --> 00:42:29,230
would really recommend it and some of

00:42:24,920 --> 00:42:32,900
the benefits you'll get from that are

00:42:29,230 --> 00:42:35,840
making service upgrades really trivial

00:42:32,900 --> 00:42:38,990
across all of your applications so for

00:42:35,840 --> 00:42:41,890
us we have eight applications eight

00:42:38,990 --> 00:42:44,450
micro services now running in production

00:42:41,890 --> 00:42:48,080
they are using our base image that base

00:42:44,450 --> 00:42:50,660
image uses PHP 7-0 at the moment but

00:42:48,080 --> 00:42:53,210
we've also recently upgraded to PHP

00:42:50,660 --> 00:42:55,640
seven one so all you have to do at that

00:42:53,210 --> 00:42:58,310
point is upgrade your base image to PHP

00:42:55,640 --> 00:43:00,230
seven one create a new tank version of

00:42:58,310 --> 00:43:02,960
that and then when all the applications

00:43:00,230 --> 00:43:06,740
are ready to upgrade you can just

00:43:02,960 --> 00:43:09,140
upgrade their sombre image number which

00:43:06,740 --> 00:43:11,180
is really nice and easy other things we

00:43:09,140 --> 00:43:15,109
have in the base image I mentioned we

00:43:11,180 --> 00:43:17,210
have deployment keys we also install you

00:43:15,109 --> 00:43:19,790
know things that all of our applications

00:43:17,210 --> 00:43:25,339
will need so composer for example is

00:43:19,790 --> 00:43:30,070
installed into that base image the final

00:43:25,339 --> 00:43:35,630
thing to really get right is your

00:43:30,070 --> 00:43:37,820
configuration and your secrets so this

00:43:35,630 --> 00:43:43,310
is something that you know people tend

00:43:37,820 --> 00:43:45,200
to leave the last I find really really

00:43:43,310 --> 00:43:47,240
important to be able to create an image

00:43:45,200 --> 00:43:49,010
that you're going to use on your staging

00:43:47,240 --> 00:43:50,359
environment and your production

00:43:49,010 --> 00:43:53,359
environment and possibly test

00:43:50,359 --> 00:43:55,670
environments it's really important to

00:43:53,359 --> 00:43:57,410
have your configuration completely

00:43:55,670 --> 00:44:00,609
sorted so that that image can be the

00:43:57,410 --> 00:44:06,800
same image that's used for all of those

00:44:00,609 --> 00:44:09,230
some solutions here so the first one is

00:44:06,800 --> 00:44:13,190
the most simple one which I'd really

00:44:09,230 --> 00:44:15,680
advocate advocate against not doing so

00:44:13,190 --> 00:44:16,670
that's where you literally baked it into

00:44:15,680 --> 00:44:17,690
the image and what you're going to end

00:44:16,670 --> 00:44:19,910
up with there

00:44:17,690 --> 00:44:24,620
is an image which is just specific to

00:44:19,910 --> 00:44:27,650
your one environment so the way that

00:44:24,620 --> 00:44:30,020
most people do this right now is to use

00:44:27,650 --> 00:44:33,800
environment variables this is part of

00:44:30,020 --> 00:44:35,720
the 12 factor app which provides you

00:44:33,800 --> 00:44:40,330
know really good best practices for

00:44:35,720 --> 00:44:43,250
modern-day applications and by holding

00:44:40,330 --> 00:44:47,090
by holding your configuration parameters

00:44:43,250 --> 00:44:50,300
there you can change those depending on

00:44:47,090 --> 00:44:54,560
which in which environment you're

00:44:50,300 --> 00:44:59,120
actually starting up other ways of doing

00:44:54,560 --> 00:45:03,410
this so you can actually use volume

00:44:59,120 --> 00:45:05,840
mounts and you could create a file which

00:45:03,410 --> 00:45:07,820
has got all of your configuration your

00:45:05,840 --> 00:45:10,220
secrets parameters in it and then you

00:45:07,820 --> 00:45:16,430
can mount that into your containers when

00:45:10,220 --> 00:45:18,050
you run them you could use a secret

00:45:16,430 --> 00:45:20,600
store so you can actually use the

00:45:18,050 --> 00:45:22,730
third-party provider which you'll then

00:45:20,600 --> 00:45:26,420
submit an API request to actually

00:45:22,730 --> 00:45:28,190
retrieve your secrets for you some of

00:45:26,420 --> 00:45:32,060
the reasons why people don't like the

00:45:28,190 --> 00:45:33,470
environment variables is that and

00:45:32,060 --> 00:45:37,010
actually some of these other solutions

00:45:33,470 --> 00:45:41,410
is that it's not secure enough for them

00:45:37,010 --> 00:45:44,450
for example with environment variables

00:45:41,410 --> 00:45:49,790
those are actually exposed to the entire

00:45:44,450 --> 00:45:52,820
container so for you might something

00:45:49,790 --> 00:45:55,670
might go wrong and you might end up end

00:45:52,820 --> 00:45:57,440
up logging your entire environment your

00:45:55,670 --> 00:45:59,540
entire environment which will then

00:45:57,440 --> 00:46:02,540
expose all your secrets in your logs

00:45:59,540 --> 00:46:04,490
which you don't want to do those

00:46:02,540 --> 00:46:07,040
environment variables are also visible

00:46:04,490 --> 00:46:11,990
to other containers that are linked to

00:46:07,040 --> 00:46:13,550
the container that you're running some

00:46:11,990 --> 00:46:14,690
of the other methods well the other

00:46:13,550 --> 00:46:16,790
methods that I put up there is

00:46:14,690 --> 00:46:18,710
orchestration specific solution so Mises

00:46:16,790 --> 00:46:23,030
and cuba Nettie's they've got their own

00:46:18,710 --> 00:46:25,280
solution but by hopping on to that

00:46:23,030 --> 00:46:28,670
you're kind of and it's possibly not a

00:46:25,280 --> 00:46:30,800
bad thing but you're kind of locking

00:46:28,670 --> 00:46:33,010
yourself into that to that orchestration

00:46:30,800 --> 00:46:33,010
tool

00:46:33,730 --> 00:46:41,240
for us we use environment variables this

00:46:37,130 --> 00:46:43,850
is the my sequel trusted image at the

00:46:41,240 --> 00:46:45,970
moment it's good enough for them it's

00:46:43,850 --> 00:46:48,440
good enough for us too

00:46:45,970 --> 00:46:54,770
however that is going to change the

00:46:48,440 --> 00:47:00,080
scene so this is an example of one of

00:46:54,770 --> 00:47:03,410
our symphony applications so this is our

00:47:00,080 --> 00:47:07,310
parameters channel file and when we run

00:47:03,410 --> 00:47:09,770
this image we actually pass in the

00:47:07,310 --> 00:47:14,810
database host the database name I've got

00:47:09,770 --> 00:47:17,180
a screen shot of that so on the Left

00:47:14,810 --> 00:47:19,640
we've got development so you can see

00:47:17,180 --> 00:47:25,780
with my sequel we're actually building

00:47:19,640 --> 00:47:30,260
that image from scratch we are setting

00:47:25,780 --> 00:47:34,400
some very simplistic passwords for local

00:47:30,260 --> 00:47:36,680
use and those local local variables get

00:47:34,400 --> 00:47:41,830
set in environment variables for the PHP

00:47:36,680 --> 00:47:45,109
fpm image I remembered to blank out its

00:47:41,830 --> 00:47:47,660
earlier this morning but this is our

00:47:45,109 --> 00:47:49,720
task definition for production so you

00:47:47,660 --> 00:47:52,730
can see here we've got a bunch of

00:47:49,720 --> 00:47:55,250
environment variables which used we've

00:47:52,730 --> 00:47:58,369
got our database host database name so

00:47:55,250 --> 00:48:01,640
we can all we have to do is slightly

00:47:58,369 --> 00:48:03,980
alter environment setup whether it's on

00:48:01,640 --> 00:48:06,470
staging whether it's on production and

00:48:03,980 --> 00:48:10,070
we can use the exact same image on both

00:48:06,470 --> 00:48:12,680
environments something which is worth

00:48:10,070 --> 00:48:16,100
talking about which I haven't had a

00:48:12,680 --> 00:48:19,130
chance to use yet is docker secrets so

00:48:16,100 --> 00:48:21,440
this is something that's recently a

00:48:19,130 --> 00:48:26,450
couple of weeks ago been announced as

00:48:21,440 --> 00:48:31,490
part of docker 113 at the moment it's

00:48:26,450 --> 00:48:33,470
only available to swarm services but the

00:48:31,490 --> 00:48:35,450
idea is that we're going to be able to

00:48:33,470 --> 00:48:38,210
use this rule of our secrets management

00:48:35,450 --> 00:48:41,470
going forwards so things like usernames

00:48:38,210 --> 00:48:44,750
passwords estate keys

00:48:41,470 --> 00:48:45,500
anything you want you're going to be

00:48:44,750 --> 00:48:49,880
able to use

00:48:45,500 --> 00:48:53,180
Secret Service what I can tell because

00:48:49,880 --> 00:48:58,010
I'm not actually used it yet it's going

00:48:53,180 --> 00:49:04,610
to work a little bit like this you will

00:48:58,010 --> 00:49:08,390
set your secret by echoing it into the

00:49:04,610 --> 00:49:11,840
docker secret command so here we've

00:49:08,390 --> 00:49:15,140
created a DB password and then we're

00:49:11,840 --> 00:49:18,800
going to grant a service access to that

00:49:15,140 --> 00:49:20,450
secret and by doing that so when we

00:49:18,800 --> 00:49:24,230
specify the - - secret

00:49:20,450 --> 00:49:26,710
DB password it's going to take the

00:49:24,230 --> 00:49:31,730
decrypted secret from the swarm manager

00:49:26,710 --> 00:49:37,400
from the raft log there and it's going

00:49:31,730 --> 00:49:42,950
to mount it onto an in file in memory

00:49:37,400 --> 00:49:47,690
file running on the container so that

00:49:42,950 --> 00:49:53,300
file is will be under /r unvoyage slash

00:49:47,690 --> 00:49:54,830
forward slash secrets and my sequel are

00:49:53,300 --> 00:49:58,150
actually ready changing their image to

00:49:54,830 --> 00:50:01,360
support this but what that will mean is

00:49:58,150 --> 00:50:03,860
instead of actually specifying your

00:50:01,360 --> 00:50:06,050
secret is pot the environment variable

00:50:03,860 --> 00:50:08,090
you can just specify the path to that

00:50:06,050 --> 00:50:10,220
environment variable and then the

00:50:08,090 --> 00:50:14,600
application will take that path read the

00:50:10,220 --> 00:50:16,850
secret from the in-memory file and away

00:50:14,600 --> 00:50:19,340
you go

00:50:16,850 --> 00:50:23,450
so there's all kinds of information

00:50:19,340 --> 00:50:25,280
about this available app Docs docker

00:50:23,450 --> 00:50:27,170
that link at the bottom there if you

00:50:25,280 --> 00:50:30,410
want to start preparing your images for

00:50:27,170 --> 00:50:33,140
that all you need to do is make sure

00:50:30,410 --> 00:50:35,480
that for any of your parameters or

00:50:33,140 --> 00:50:36,710
secrets that you want to use this you

00:50:35,480 --> 00:50:40,160
just need to make sure that they can

00:50:36,710 --> 00:50:46,940
read values from a file and so we're

00:50:40,160 --> 00:50:51,670
just having it straight up I'm going to

00:50:46,940 --> 00:50:55,310
quickly run out it's nearly lunchtime

00:50:51,670 --> 00:50:59,369
I'm going to quickly talk about a few

00:50:55,310 --> 00:51:02,819
more things that should be considered

00:50:59,369 --> 00:51:05,099
when deploying to production so logging

00:51:02,819 --> 00:51:07,589
is really important we all know it gives

00:51:05,099 --> 00:51:12,059
us an insight into what our application

00:51:07,589 --> 00:51:17,460
is doing and logging in docker

00:51:12,059 --> 00:51:19,940
is not an entirely simple thing there

00:51:17,460 --> 00:51:23,210
doesn't seem to be one strategy for

00:51:19,940 --> 00:51:27,180
absolutely every situation at the moment

00:51:23,210 --> 00:51:32,759
because containers are ephemeral by

00:51:27,180 --> 00:51:35,069
their nature they will be shut down they

00:51:32,759 --> 00:51:37,140
will be fired up at any given time you

00:51:35,069 --> 00:51:39,799
shouldn't really be thinking about

00:51:37,140 --> 00:51:44,069
persisting that container for eternity

00:51:39,799 --> 00:51:46,619
and so if you're logging straight into

00:51:44,069 --> 00:51:49,259
the container you're actually creating

00:51:46,619 --> 00:51:53,339
state in that container and that states

00:51:49,259 --> 00:51:55,920
you're going to lose so you want to be

00:51:53,339 --> 00:51:57,990
thinking about centralizing your logging

00:51:55,920 --> 00:52:01,650
and I'll quickly outline a few ways of

00:51:57,990 --> 00:52:04,670
doing that so the easiest way if you

00:52:01,650 --> 00:52:07,700
want a little bit of persistence is to

00:52:04,670 --> 00:52:09,989
spoil your logs in a data volume that

00:52:07,700 --> 00:52:13,009
then means those logs are kept on the

00:52:09,989 --> 00:52:19,049
house and you can backup your logs

00:52:13,009 --> 00:52:21,660
really easily from there for us we don't

00:52:19,049 --> 00:52:24,119
use that it's not great for an elastic

00:52:21,660 --> 00:52:25,680
architecture where the hosts are scaling

00:52:24,119 --> 00:52:30,180
up and scaling down the whole time as

00:52:25,680 --> 00:52:32,670
well but on non production systems where

00:52:30,180 --> 00:52:36,269
you need logs that last a bit longer

00:52:32,670 --> 00:52:41,279
it's a pretty easy solution to get

00:52:36,269 --> 00:52:43,680
started with the docker logging driver

00:52:41,279 --> 00:52:47,430
is something that's native to docker

00:52:43,680 --> 00:52:48,499
itself if you've ever tried doing docker

00:52:47,430 --> 00:52:50,759
logs

00:52:48,499 --> 00:52:55,249
you've got the default driver which is

00:52:50,759 --> 00:52:57,660
the JSON file driver and that that

00:52:55,249 --> 00:53:00,420
actually reads the standard output and

00:52:57,660 --> 00:53:03,930
standard error generated by the contents

00:53:00,420 --> 00:53:05,809
there so it's really easy to configure

00:53:03,930 --> 00:53:11,460
there are lots of different log drivers

00:53:05,809 --> 00:53:12,470
that you can use but there's as one for

00:53:11,460 --> 00:53:16,340
AWS which is

00:53:12,470 --> 00:53:20,090
there there one first Blanc for many

00:53:16,340 --> 00:53:21,890
many other looking applications so the

00:53:20,090 --> 00:53:29,390
great thing about this is it is quick

00:53:21,890 --> 00:53:32,510
and easy as well and if you haven't set

00:53:29,390 --> 00:53:35,210
up your application with custom logs

00:53:32,510 --> 00:53:40,900
then this would completely suffice

00:53:35,210 --> 00:53:42,920
this solution application logging so

00:53:40,900 --> 00:53:46,430
you're probably all familiar with lot

00:53:42,920 --> 00:53:49,970
monologue probably use it as well pre

00:53:46,430 --> 00:53:53,410
frequently so if you're using that and

00:53:49,970 --> 00:53:56,270
if you're using that to send your logs

00:53:53,410 --> 00:53:58,550
from your application to a centralized

00:53:56,270 --> 00:54:01,010
place might be lovely might be something

00:53:58,550 --> 00:54:04,820
else then actually you can just keep

00:54:01,010 --> 00:54:07,280
using that and that means your your log

00:54:04,820 --> 00:54:11,450
files are actually kept off your

00:54:07,280 --> 00:54:14,180
containers in a separate place we

00:54:11,450 --> 00:54:17,030
started doing this ourselves but we

00:54:14,180 --> 00:54:18,740
actually found that there was quite a

00:54:17,030 --> 00:54:22,130
large performance overhead when you

00:54:18,740 --> 00:54:24,710
weren't just using the logs logging

00:54:22,130 --> 00:54:27,020
framework locally so when we were

00:54:24,710 --> 00:54:28,760
actually sending logs to our our log and

00:54:27,020 --> 00:54:30,470
service provider it actually ended up

00:54:28,760 --> 00:54:32,780
taking the bulk of our request time so

00:54:30,470 --> 00:54:36,320
we stopped using that solution ourselves

00:54:32,780 --> 00:54:39,650
but that does give you the developer a

00:54:36,320 --> 00:54:43,490
really high degree of control over the

00:54:39,650 --> 00:54:46,339
logging implementation a couple of other

00:54:43,490 --> 00:54:48,589
solutions you can have a dedicated

00:54:46,339 --> 00:54:50,119
logging container running so you end up

00:54:48,589 --> 00:54:52,280
forwarding your logs from your

00:54:50,119 --> 00:54:54,560
application containers into that logging

00:54:52,280 --> 00:54:58,609
container and that logging containers

00:54:54,560 --> 00:55:02,810
only responsibility then is to

00:54:58,609 --> 00:55:04,310
centralize logs so that login container

00:55:02,810 --> 00:55:07,820
can then take the performance overhead

00:55:04,310 --> 00:55:09,710
of your your other applications and do

00:55:07,820 --> 00:55:11,450
something with those so whether it's you

00:55:09,710 --> 00:55:14,150
know stick it into cloud watch or second

00:55:11,450 --> 00:55:19,940
log lea that container can take the hit

00:55:14,150 --> 00:55:22,070
on those so the great thing that this is

00:55:19,940 --> 00:55:25,030
that logging now becomes part of your

00:55:22,070 --> 00:55:25,030
actual architecture

00:55:25,200 --> 00:55:35,200
the the downside to this is that because

00:55:32,920 --> 00:55:37,390
you're using one dedicated log thinner

00:55:35,200 --> 00:55:39,550
for all of your applications actually if

00:55:37,390 --> 00:55:42,820
you want more fine-grained control over

00:55:39,550 --> 00:55:46,780
it means that you have to set up your

00:55:42,820 --> 00:55:49,540
login container to to be aware of

00:55:46,780 --> 00:55:55,240
many different types of customized logs

00:55:49,540 --> 00:55:57,910
which isn't great so yeah the other

00:55:55,240 --> 00:55:59,860
final solution that you might come

00:55:57,910 --> 00:56:02,230
across is logging by side cards this is

00:55:59,860 --> 00:56:07,570
pretty similar to what we just talked

00:56:02,230 --> 00:56:09,490
about but each application container is

00:56:07,570 --> 00:56:11,950
paired with a dedicated log and

00:56:09,490 --> 00:56:17,050
container here so this then gives you

00:56:11,950 --> 00:56:21,850
that flexibility but it is more

00:56:17,050 --> 00:56:25,080
difficult setup and yeah you kind of

00:56:21,850 --> 00:56:25,080
really need to get your head around up

00:56:26,760 --> 00:56:34,900
okay other processors so quite often

00:56:32,110 --> 00:56:36,550
you'll want to run more than one process

00:56:34,900 --> 00:56:38,730
and in container and this is a problem

00:56:36,550 --> 00:56:41,410
well problem which we've come across

00:56:38,730 --> 00:56:44,820
whereby an application might need to run

00:56:41,410 --> 00:56:47,890
a cron or might need to run some workers

00:56:44,820 --> 00:56:51,670
so in order to do that we use the

00:56:47,890 --> 00:56:56,050
process manager so we use supervisor D

00:56:51,670 --> 00:56:58,450
for that and to get set up with this

00:56:56,050 --> 00:57:03,000
it's actually it's really easy and you

00:56:58,450 --> 00:57:07,870
can keep you can keep your repository

00:57:03,000 --> 00:57:12,100
really clean as well so just to give you

00:57:07,870 --> 00:57:16,570
an example of this actually let me so so

00:57:12,100 --> 00:57:19,720
here all we've done this is a docker

00:57:16,570 --> 00:57:22,450
file all we've done is we've installed

00:57:19,720 --> 00:57:25,270
supervisor and cron as part of our

00:57:22,450 --> 00:57:28,320
services we've got our base supervisor

00:57:25,270 --> 00:57:32,950
configuration we can't copy that over

00:57:28,320 --> 00:57:35,350
and that supervisor configuration it

00:57:32,950 --> 00:57:36,200
looks for any startup comp files within

00:57:35,350 --> 00:57:40,339
a certain direct

00:57:36,200 --> 00:57:41,960
three so underneath the the directory if

00:57:40,339 --> 00:57:45,020
we want to add workers or if we want to

00:57:41,960 --> 00:57:47,450
add our cron that's where we would put

00:57:45,020 --> 00:57:48,890
configuration for that supervisor would

00:57:47,450 --> 00:57:51,920
then be in charge of starting out the

00:57:48,890 --> 00:57:54,890
PHP fpm process be in charge of keeping

00:57:51,920 --> 00:57:56,660
that running and if a cron is enabled

00:57:54,890 --> 00:57:59,210
the in charge of keeping that running -

00:57:56,660 --> 00:58:01,250
and any workers and it also gives you

00:57:59,210 --> 00:58:04,040
the flexibility to start as many

00:58:01,250 --> 00:58:06,640
different processes of those as you want

00:58:04,040 --> 00:58:06,640
as well

00:58:07,359 --> 00:58:14,420
container monitoring so this is the last

00:58:11,000 --> 00:58:15,730
topic that I'll talk about but when

00:58:14,420 --> 00:58:19,550
you've got stuff running in production

00:58:15,730 --> 00:58:21,290
to complete your picture of what's going

00:58:19,550 --> 00:58:26,050
on now they've got your login sorted as

00:58:21,290 --> 00:58:30,650
well you want to actually have eyes on

00:58:26,050 --> 00:58:34,010
all of your different containers you

00:58:30,650 --> 00:58:36,740
want to know what CPU usage there is you

00:58:34,010 --> 00:58:40,670
want to know if any of them are maxing

00:58:36,740 --> 00:58:43,310
out from memory you want to know Network

00:58:40,670 --> 00:58:48,050
stats bunch of stuff that you want to

00:58:43,310 --> 00:58:53,030
make so it's the same kind of metrics

00:58:48,050 --> 00:58:57,349
that you'd be interested in but the

00:58:53,030 --> 00:59:00,710
solutions for this I'm not necessarily

00:58:57,349 --> 00:59:03,800
as standard solutions that you would use

00:59:00,710 --> 00:59:07,640
for non Dockery stop locations because

00:59:03,800 --> 00:59:10,130
containers can be fired up very

00:59:07,640 --> 00:59:13,819
individually you can have lots of

00:59:10,130 --> 00:59:16,430
containers running on one host it's

00:59:13,819 --> 00:59:19,790
actually you know your typical typical

00:59:16,430 --> 00:59:22,490
ways of monitoring this unavailable to

00:59:19,790 --> 00:59:26,990
you fortunately there are a bunch of

00:59:22,490 --> 00:59:31,609
services out there which are easy to set

00:59:26,990 --> 00:59:33,680
up and give you these kind of metrics so

00:59:31,609 --> 00:59:37,730
we use New Relic for our container

00:59:33,680 --> 00:59:41,900
monitor monitoring and once you actually

00:59:37,730 --> 00:59:45,140
get the eyes on what your containers are

00:59:41,900 --> 00:59:47,990
doing you can then start to tune for

00:59:45,140 --> 00:59:49,329
example the amount of memory that a

00:59:47,990 --> 00:59:51,999
specific containers a

00:59:49,329 --> 00:59:53,920
to use you can actually start to tune

00:59:51,999 --> 00:59:57,130
how many services you want to scale up

00:59:53,920 --> 01:00:04,180
at any one time so that's kind of why

00:59:57,130 --> 01:00:09,309
monitoring is really important some

01:00:04,180 --> 01:00:10,779
common mistakes that people make so I

01:00:09,309 --> 01:00:13,239
thought about creating images from

01:00:10,779 --> 01:00:14,499
running containers doing your docker

01:00:13,239 --> 01:00:20,680
commits and pushing that up to the

01:00:14,499 --> 01:00:23,380
repository stain don't do that deploying

01:00:20,680 --> 01:00:27,039
with the latest tag to production this

01:00:23,380 --> 01:00:29,640
isn't a great idea because that latest

01:00:27,039 --> 01:00:31,989
tag could change at any point in time

01:00:29,640 --> 01:00:37,089
you might want to do that for you in

01:00:31,989 --> 01:00:39,369
staging environment but the latest tag

01:00:37,089 --> 01:00:41,709
is the default tag as well so that's

01:00:39,369 --> 01:00:46,229
created so you just need to be aware of

01:00:41,709 --> 01:00:51,190
that talked about secrets

01:00:46,229 --> 01:00:52,930
I've got images twice there but doing

01:00:51,190 --> 01:00:54,729
too much in your run SH as well

01:00:52,930 --> 01:00:58,209
so like the composer installs whilst

01:00:54,729 --> 01:01:01,029
that's okay in development you want the

01:00:58,209 --> 01:01:04,239
startup of your image when you run it to

01:01:01,029 --> 01:01:05,739
a container you want that to be as fast

01:01:04,239 --> 01:01:08,920
as possible and if you're doing things

01:01:05,739 --> 01:01:10,959
like composer installs in your entry

01:01:08,920 --> 01:01:12,729
point scripts then that's actually going

01:01:10,959 --> 01:01:16,209
to take maybe five minutes they're going

01:01:12,729 --> 01:01:18,609
to get all the dependencies those

01:01:16,209 --> 01:01:20,229
dependencies might not be available at

01:01:18,609 --> 01:01:22,299
the time you're running the container as

01:01:20,229 --> 01:01:25,079
well and it'll just mean your

01:01:22,299 --> 01:01:28,420
deployments take take forever to get out

01:01:25,079 --> 01:01:29,920
and relying on IP addresses in your

01:01:28,420 --> 01:01:36,069
configuration that's never a good idea

01:01:29,920 --> 01:01:40,539
with a che so just to finish off the

01:01:36,069 --> 01:01:43,119
deployment process now becomes very very

01:01:40,539 --> 01:01:46,749
simple you've got your immutable image

01:01:43,119 --> 01:01:49,569
in your dock already stry that's been

01:01:46,749 --> 01:01:55,779
tested on staging area things great

01:01:49,569 --> 01:01:59,049
there and whatever orchestration tool

01:01:55,779 --> 01:02:01,809
you're using for production purposes you

01:01:59,049 --> 01:02:03,099
would go and update that bit of

01:02:01,809 --> 01:02:05,309
orchestration to

01:02:03,099 --> 01:02:08,279
use the new image that you've now tagged

01:02:05,309 --> 01:02:12,339
and it just becomes a question of

01:02:08,279 --> 01:02:18,130
switching the image from essay 1 0 0 to

01:02:12,339 --> 01:02:20,890
1 1 0 deploying that and and that's

01:02:18,130 --> 01:02:23,710
that's it if you want to roll back you

01:02:20,890 --> 01:02:26,109
know you can do so with confidence to

01:02:23,710 --> 01:02:27,700
your previous image which is going to

01:02:26,109 --> 01:02:32,369
give you the exact same behavior as it

01:02:27,700 --> 01:02:34,720
did before and you can then start to

01:02:32,369 --> 01:02:36,549
ensure that your deployment deployments

01:02:34,720 --> 01:02:38,319
are all zero downtime that you've got

01:02:36,549 --> 01:02:40,390
load balancers sticking in front of them

01:02:38,319 --> 01:02:42,910
which are draining connections from your

01:02:40,390 --> 01:02:44,710
old container switching them over to the

01:02:42,910 --> 01:02:49,869
new container and then getting rid of

01:02:44,710 --> 01:02:54,249
your year old your old container so

01:02:49,869 --> 01:02:57,900
hopefully now you should all be in a

01:02:54,249 --> 01:03:01,660
position you should all be in a position

01:02:57,900 --> 01:03:05,529
to create immutable and ephemeral docker

01:03:01,660 --> 01:03:08,319
images yourself and I'd just like to end

01:03:05,529 --> 01:03:10,450
with saying that it doesn't have to be

01:03:08,319 --> 01:03:12,089
the sysadmin for the DevOps to do this

01:03:10,450 --> 01:03:16,210
this is actually quite a simple process

01:03:12,089 --> 01:03:20,140
and for us this is completely driven by

01:03:16,210 --> 01:03:22,559
the development teams and something

01:03:20,140 --> 01:03:24,940
which which you should all do to start

01:03:22,559 --> 01:03:27,320
receiving some of the benefits of it

01:03:24,940 --> 01:03:36,409
thank you

01:03:27,320 --> 01:03:36,409
[Applause]

01:03:37,970 --> 01:03:44,160
I think it is lunchtime so everybody's

01:03:42,359 --> 01:03:47,460
probably starving so if you've got any

01:03:44,160 --> 01:03:49,560
questions I'll hang around up here for

01:03:47,460 --> 01:03:53,210
about five minutes and then I will go

01:03:49,560 --> 01:03:53,210

YouTube URL: https://www.youtube.com/watch?v=quoM__Gg3zI


