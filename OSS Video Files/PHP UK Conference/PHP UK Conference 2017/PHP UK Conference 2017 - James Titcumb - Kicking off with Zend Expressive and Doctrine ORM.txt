Title: PHP UK Conference 2017 - James Titcumb - Kicking off with Zend Expressive and Doctrine ORM
Publication date: 2017-04-03
Playlist: PHP UK Conference 2017
Description: 
	You've heard of Zend's new framework, Expressive, and you've heard it's the new hotness. In this talk, I will introduce the concepts of Expressive, how to bootstrap a simple application with the framework using best practices, and finally how to integrate a third party tool like Doctrine ORM.
Captions: 
	00:00:06,680 --> 00:00:18,690
right is my microphone on yes sounds

00:00:10,200 --> 00:00:20,279
good okay hello everyone I need to make

00:00:18,690 --> 00:00:23,400
my notes bigger because I can't read

00:00:20,279 --> 00:00:26,670
there we go alright so my name is James

00:00:23,400 --> 00:00:31,349
Sikkim and I've been doing PHP since

00:00:26,670 --> 00:00:33,480
about 2002 Zen certified engineer and I

00:00:31,349 --> 00:00:37,760
was one of the guinea pigs for the new

00:00:33,480 --> 00:00:40,020
Red Sea test which is kind of fun and

00:00:37,760 --> 00:00:42,180
that's now available so you can all go

00:00:40,020 --> 00:00:45,570
and get that I'm not a shield for them

00:00:42,180 --> 00:00:47,280
by the way I run the PHP Hampshire user

00:00:45,570 --> 00:00:50,960
group and also the PHP South Coast

00:00:47,280 --> 00:00:52,949
Conference tickets now available and I'm

00:00:50,960 --> 00:00:55,710
contribute to various open source

00:00:52,949 --> 00:00:57,480
projects Zend framework doctrine and

00:00:55,710 --> 00:01:02,059
lead developer on a couple as well and

00:00:57,480 --> 00:01:05,040
my day job I'm a consultant at Rove who

00:01:02,059 --> 00:01:06,840
purveyors of fine elephants but we

00:01:05,040 --> 00:01:10,320
haven't got them done yet so that's just

00:01:06,840 --> 00:01:12,299
a prototype anyway enough about me

00:01:10,320 --> 00:01:14,880
so what is end expressly right we are

00:01:12,299 --> 00:01:17,729
here to find out about Zend expressive

00:01:14,880 --> 00:01:21,659
and doctrine so I'm going to start at

00:01:17,729 --> 00:01:24,509
the bottom and this is kind of what's

00:01:21,659 --> 00:01:29,130
going on underneath an application in

00:01:24,509 --> 00:01:30,090
expressive it's kind of a lot of things

00:01:29,130 --> 00:01:31,890
here

00:01:30,090 --> 00:01:33,650
but I'm going to break it down and look

00:01:31,890 --> 00:01:38,610
through it bit by bit

00:01:33,650 --> 00:01:42,720
first up pl7 hopefully many of us have

00:01:38,610 --> 00:01:46,500
now heard of fig and their efforts to

00:01:42,720 --> 00:01:51,689
standardize things pl7 is one of those

00:01:46,500 --> 00:01:54,540
and it is basically modeling HTTP

00:01:51,689 --> 00:01:56,250
messages right and it's just a set of

00:01:54,540 --> 00:02:00,420
interfaces there's nothing complex about

00:01:56,250 --> 00:02:04,020
this and you know HTTP messages are the

00:02:00,420 --> 00:02:04,469
foundation of the web right we've seen

00:02:04,020 --> 00:02:07,200
them before

00:02:04,469 --> 00:02:10,979
you've got the verb requested page HTTP

00:02:07,200 --> 00:02:12,239
version and so on the host and maybe a

00:02:10,979 --> 00:02:13,140
payload depending on what you're trying

00:02:12,239 --> 00:02:16,690
to do

00:02:13,140 --> 00:02:19,180
and response is pretty similar right

00:02:16,690 --> 00:02:24,850
we've seen these this is not complex

00:02:19,180 --> 00:02:27,310
stuff and PS or seven models those in a

00:02:24,850 --> 00:02:33,340
way that you can use in your

00:02:27,310 --> 00:02:36,390
applications as objects right so the

00:02:33,340 --> 00:02:39,130
next the first layer is and expressive

00:02:36,390 --> 00:02:43,390
actual implementation is this package

00:02:39,130 --> 00:02:47,080
called deck torus directorís is arm a

00:02:43,390 --> 00:02:49,420
silly sounding name it's Greek and it

00:02:47,080 --> 00:02:53,050
means messenger so that kind of makes

00:02:49,420 --> 00:02:55,450
sense I think it's just an

00:02:53,050 --> 00:02:58,450
implementation of PS l7 so tax evasion

00:02:55,450 --> 00:03:01,810
faces implements them it allows you to

00:02:58,450 --> 00:03:03,670
modify them in an in an immutable way

00:03:01,810 --> 00:03:05,590
and what that means is that you're never

00:03:03,670 --> 00:03:07,210
mutating the same instance you're

00:03:05,590 --> 00:03:09,280
getting a new instance back every time

00:03:07,210 --> 00:03:11,680
you say with added header and things

00:03:09,280 --> 00:03:12,570
like that and there's benefits to that

00:03:11,680 --> 00:03:14,740
but I'm not going to go into that

00:03:12,570 --> 00:03:18,459
because it's not so relevant for this

00:03:14,740 --> 00:03:20,650
talk directives also handles

00:03:18,459 --> 00:03:23,890
serialization and deserialization of

00:03:20,650 --> 00:03:25,510
requests so you can take a just a string

00:03:23,890 --> 00:03:26,920
like like it's had on the slides a

00:03:25,510 --> 00:03:30,910
minute go and it will turn it into an

00:03:26,920 --> 00:03:33,310
object or do the same the other way it

00:03:30,910 --> 00:03:36,220
also handles the course stream handling

00:03:33,310 --> 00:03:38,410
stuff so the body of your payload

00:03:36,220 --> 00:03:41,470
whether it's request or response is a

00:03:38,410 --> 00:03:43,950
stream so that's kind of defies the

00:03:41,470 --> 00:03:48,100
mutability thing but again that's a

00:03:43,950 --> 00:03:51,100
different argument we also have a URI

00:03:48,100 --> 00:03:53,950
implementation so I believe there's

00:03:51,100 --> 00:03:55,870
actually a PSR in progress to do that

00:03:53,950 --> 00:03:59,230
separately but for now directorís has

00:03:55,870 --> 00:04:01,930
one which is kind of useful and you also

00:03:59,230 --> 00:04:06,820
have the very basic ability to dispatch

00:04:01,930 --> 00:04:09,850
a request to a callable similar to kind

00:04:06,820 --> 00:04:11,739
of what you might have seen with node

00:04:09,850 --> 00:04:16,660
HTTP server if you've done know Jess

00:04:11,739 --> 00:04:21,760
before and really it's not so useful it

00:04:16,660 --> 00:04:23,350
doesn't do very much and also the

00:04:21,760 --> 00:04:25,620
execution what although PHP is

00:04:23,350 --> 00:04:28,790
fundamentally different right

00:04:25,620 --> 00:04:32,040
it's shared-nothing on the server api

00:04:28,790 --> 00:04:33,270
nodejs is very much different it's a you

00:04:32,040 --> 00:04:38,250
know you're building an actual server

00:04:33,270 --> 00:04:39,620
that that listens anyway strategy leti

00:04:38,250 --> 00:04:42,389
is the next layer

00:04:39,620 --> 00:04:44,910
it's another silly sounding name clearly

00:04:42,389 --> 00:04:48,450
Zend love the name app agility a lot so

00:04:44,910 --> 00:04:49,860
use that kind of a theme but I don't

00:04:48,450 --> 00:04:54,300
know why didn't stick with it with the X

00:04:49,860 --> 00:04:58,139
horas más agility I don't know anyway

00:04:54,300 --> 00:05:01,260
this is a library for creating and

00:04:58,139 --> 00:05:02,790
dispatching middleware pipelines it's

00:05:01,260 --> 00:05:06,030
built to rely on the peers or some

00:05:02,790 --> 00:05:09,000
implementation naturally and in theory I

00:05:06,030 --> 00:05:10,229
guess any kind of PS l7 implementation

00:05:09,000 --> 00:05:15,360
would work but you know we're going to

00:05:10,229 --> 00:05:18,780
use that the actors for this so what's

00:05:15,360 --> 00:05:20,400
the middleware then right for those of

00:05:18,780 --> 00:05:21,600
you who are like well what are you

00:05:20,400 --> 00:05:25,410
talking about James what's this

00:05:21,600 --> 00:05:30,270
middleware thing it's basically an

00:05:25,410 --> 00:05:33,090
invoker bilang this is modeled on there

00:05:30,270 --> 00:05:34,830
is another PSR that defines how

00:05:33,090 --> 00:05:36,660
middleware should look that function

00:05:34,830 --> 00:05:41,100
signatures and what they return and so

00:05:36,660 --> 00:05:43,320
on so previously you may have seen for

00:05:41,100 --> 00:05:45,510
example in slim framework or you know in

00:05:43,320 --> 00:05:48,300
kind of middleware patterns if you like

00:05:45,510 --> 00:05:53,190
it would take a request and a response

00:05:48,300 --> 00:05:56,850
and so on and a next middleware to be

00:05:53,190 --> 00:05:59,280
executed in this one we have just the

00:05:56,850 --> 00:06:01,169
request and the delegate interface that

00:05:59,280 --> 00:06:06,030
is basically the next thing to be

00:06:01,169 --> 00:06:08,090
executed so the way this works right we

00:06:06,030 --> 00:06:10,919
have some code may happen before

00:06:08,090 --> 00:06:12,479
something else happens and then we have

00:06:10,919 --> 00:06:15,990
delegate process which is calling the

00:06:12,479 --> 00:06:18,060
next middleware in the chain and then

00:06:15,990 --> 00:06:21,139
you can have some code after potentially

00:06:18,060 --> 00:06:23,310
and then return the response right

00:06:21,139 --> 00:06:25,590
fairly straightforward and it's kind of

00:06:23,310 --> 00:06:27,210
nice and atomic and that's kind of the

00:06:25,590 --> 00:06:29,010
point of middle is is that you can do

00:06:27,210 --> 00:06:32,010
small atomic operations and chain them

00:06:29,010 --> 00:06:34,669
all together into this big line of stuff

00:06:32,010 --> 00:06:34,669
that happens

00:06:35,100 --> 00:06:41,760
so as I said this structure is based on

00:06:37,920 --> 00:06:44,370
this this package HT HTTP interrup

00:06:41,760 --> 00:06:45,840
Interop I can't even talk today which is

00:06:44,370 --> 00:06:50,450
no good because I'm not meant to be

00:06:45,840 --> 00:06:52,920
speaking to you um HTC middleware and

00:06:50,450 --> 00:06:54,840
it's a work in progress so actually it's

00:06:52,920 --> 00:06:56,520
slightly different the implementation

00:06:54,840 --> 00:06:58,440
that we have so far slightly different

00:06:56,520 --> 00:07:01,740
from the PSR but I'm sure in time that

00:06:58,440 --> 00:07:03,930
will be sorted out and expressive

00:07:01,740 --> 00:07:08,210
there's an expressive one point one sort

00:07:03,930 --> 00:07:15,360
of encourages using this new request and

00:07:08,210 --> 00:07:16,680
delegate function signature and yeah if

00:07:15,360 --> 00:07:18,870
you've used middleware before if so you

00:07:16,680 --> 00:07:22,830
get the response in the function

00:07:18,870 --> 00:07:24,270
signature but there is a fundamental

00:07:22,830 --> 00:07:28,620
problem with that if you modify the

00:07:24,270 --> 00:07:30,390
response before something else creates a

00:07:28,620 --> 00:07:32,850
response then you're going to get

00:07:30,390 --> 00:07:34,680
unexpected behavior because the next

00:07:32,850 --> 00:07:37,920
middleware down the chain might return a

00:07:34,680 --> 00:07:40,320
completely new response so the mutation

00:07:37,920 --> 00:07:45,450
that you made to the response coming in

00:07:40,320 --> 00:07:47,580
is lost it's gone now so that's why we

00:07:45,450 --> 00:07:50,040
have this delegate interface and no

00:07:47,580 --> 00:07:52,650
requests in the function signature

00:07:50,040 --> 00:07:54,180
anymore so what if you do want to do it

00:07:52,650 --> 00:07:56,850
if you want to modify something well

00:07:54,180 --> 00:07:59,100
like I have here you modify it on the

00:07:56,850 --> 00:08:02,190
way out because then it will be passed

00:07:59,100 --> 00:08:03,420
back up the chain correctly and if any

00:08:02,190 --> 00:08:11,480
of you read Terry Pratchett you'll know

00:08:03,420 --> 00:08:14,190
what a clacks is so this is how we could

00:08:11,480 --> 00:08:17,970
in a very basic way pipe up a load of

00:08:14,190 --> 00:08:20,130
middleware in using strategy leti we can

00:08:17,970 --> 00:08:22,680
just say well pipe that's basically just

00:08:20,130 --> 00:08:26,790
add to the pipe a load of middleware

00:08:22,680 --> 00:08:29,070
that do various things and the

00:08:26,790 --> 00:08:30,390
middleware pipe when you run it I've

00:08:29,070 --> 00:08:34,099
missed that with run call on the fiber

00:08:30,390 --> 00:08:37,050
it does matter when you run this it will

00:08:34,099 --> 00:08:38,550
descend through each one and strategy is

00:08:37,050 --> 00:08:41,880
the strategy lifting middleware pipe

00:08:38,550 --> 00:08:43,890
will take care of the delegate interface

00:08:41,880 --> 00:08:46,770
and it will run the next one in the

00:08:43,890 --> 00:08:48,070
chain and so on and you would descend

00:08:46,770 --> 00:08:53,630
through in order

00:08:48,070 --> 00:08:55,490
that you have them so let's have a look

00:08:53,630 --> 00:08:57,380
at what these might look like logging

00:08:55,490 --> 00:09:02,000
errors is kind of nice

00:08:57,380 --> 00:09:04,339
so we could wrap everything below in a

00:09:02,000 --> 00:09:07,790
try-catch and catch everything for

00:09:04,339 --> 00:09:09,649
example and so when we call delegate

00:09:07,790 --> 00:09:12,140
processors we're returning the response

00:09:09,649 --> 00:09:13,850
directly but if an exception happens

00:09:12,140 --> 00:09:17,529
further down the chain we catch it and

00:09:13,850 --> 00:09:20,750
we return a JSON response for example

00:09:17,529 --> 00:09:22,700
session initializing middleware it's

00:09:20,750 --> 00:09:24,950
kind of fairly self-explanatory recall

00:09:22,700 --> 00:09:28,310
session start and that's what I mean you

00:09:24,950 --> 00:09:30,560
can do lots of atomic operations that

00:09:28,310 --> 00:09:32,209
are meaningful and you can name the

00:09:30,560 --> 00:09:34,670
middleware appropriately it's

00:09:32,209 --> 00:09:38,320
initializing the session right and it's

00:09:34,670 --> 00:09:41,990
very clear what this thing does

00:09:38,320 --> 00:09:44,300
authentication perhaps do some

00:09:41,990 --> 00:09:46,579
authentication checking or for whatever

00:09:44,300 --> 00:09:48,380
you're doing if it's invalid you can

00:09:46,579 --> 00:09:51,560
return a JSON response and the nice

00:09:48,380 --> 00:09:53,660
thing there is the pipe of middle areas

00:09:51,560 --> 00:09:56,029
cut off then because you're not calling

00:09:53,660 --> 00:09:57,860
delegate process so you're not going any

00:09:56,029 --> 00:10:01,550
further down the chain you just return

00:09:57,860 --> 00:10:03,410
back up with your response and that's

00:10:01,550 --> 00:10:06,560
great but that authentication is a

00:10:03,410 --> 00:10:11,270
perfect example of short-circuiting of

00:10:06,560 --> 00:10:13,579
that logic and then of course you might

00:10:11,270 --> 00:10:14,570
have an action and index action or

00:10:13,579 --> 00:10:17,720
something like that where you might want

00:10:14,570 --> 00:10:23,240
to render a template or perform some

00:10:17,720 --> 00:10:25,850
kind of action and it's in the same kind

00:10:23,240 --> 00:10:28,250
of structure as we've seen but in this

00:10:25,850 --> 00:10:31,279
case we're not calling delegates because

00:10:28,250 --> 00:10:36,020
this is the end of the chain and we're

00:10:31,279 --> 00:10:37,670
returning a response directly then think

00:10:36,020 --> 00:10:43,540
of it as like a controller in an MVC

00:10:37,670 --> 00:10:48,170
framework if you're used to that so

00:10:43,540 --> 00:10:51,290
expressive itself one room to bring them

00:10:48,170 --> 00:10:53,149
all in in the darkness bind them

00:10:51,290 --> 00:10:55,540
expressive is kind of actually just a

00:10:53,149 --> 00:10:58,940
glue that sticks all this stuff together

00:10:55,540 --> 00:11:01,170
with a few extra nice stuff so it uses a

00:10:58,940 --> 00:11:03,839
PSR 7 implementation uses the middle

00:11:01,170 --> 00:11:07,889
where pipes from strategy and it also

00:11:03,839 --> 00:11:09,870
adds in the routing layer so you can

00:11:07,889 --> 00:11:13,320
route your requests to appropriate

00:11:09,870 --> 00:11:16,680
middlewares you can create services in

00:11:13,320 --> 00:11:20,550
your dependency injection container and

00:11:16,680 --> 00:11:23,310
dispatch the middlewares you can

00:11:20,550 --> 00:11:27,449
optionally handle templating and error

00:11:23,310 --> 00:11:29,370
handling as well so rooting eyes kind of

00:11:27,449 --> 00:11:31,199
nice the way this works is you just pick

00:11:29,370 --> 00:11:34,139
whichever one you like so you could use

00:11:31,199 --> 00:11:38,220
or a Rooter Nikita Papa's fast Rooter or

00:11:34,139 --> 00:11:39,899
Zen frameworks MVC Russa than Rooter my

00:11:38,220 --> 00:11:42,240
personal preference is fast reader

00:11:39,899 --> 00:11:44,790
because it's fast as when they may

00:11:42,240 --> 00:11:48,800
suggest and it's a very nice little

00:11:44,790 --> 00:11:51,089
research actually designed to be fast

00:11:48,800 --> 00:11:52,769
dependency injection container anything

00:11:51,089 --> 00:11:55,860
that implements container interrupt will

00:11:52,769 --> 00:11:59,550
work out of the box you could use a Zen

00:11:55,860 --> 00:12:01,230
service manager or a DI or pimple but

00:11:59,550 --> 00:12:03,089
anything should work my personal

00:12:01,230 --> 00:12:04,680
favorite is Zen service manager because

00:12:03,089 --> 00:12:09,000
I like making factories all over the

00:12:04,680 --> 00:12:10,680
place and optionally templating it's

00:12:09,000 --> 00:12:13,170
optional because well not all

00:12:10,680 --> 00:12:15,779
applications need templating right

00:12:13,170 --> 00:12:18,449
if you're writing just an API well you

00:12:15,779 --> 00:12:20,610
don't need any templating right you're

00:12:18,449 --> 00:12:24,329
just returning Jason all the time or XML

00:12:20,610 --> 00:12:26,310
or whatever so but if you do want

00:12:24,329 --> 00:12:29,100
templating if you want to make a website

00:12:26,310 --> 00:12:33,540
you do that sometimes write several is

00:12:29,100 --> 00:12:36,630
supported then view plates twig as

00:12:33,540 --> 00:12:38,160
supported out the box my personal

00:12:36,630 --> 00:12:40,350
favorite is then view because I like

00:12:38,160 --> 00:12:44,910
having to escape things explicitly all

00:12:40,350 --> 00:12:49,610
the time Wow

00:12:44,910 --> 00:12:51,899
now again piping and routing so

00:12:49,610 --> 00:12:56,130
expression has two places to plug in

00:12:51,899 --> 00:12:58,050
middle where there is the pipe which we

00:12:56,130 --> 00:13:00,690
kind of already discussed but it's

00:12:58,050 --> 00:13:02,130
basically always on middleware and

00:13:00,690 --> 00:13:04,730
that's basically part that strategy

00:13:02,130 --> 00:13:07,139
leaky handles nicely and it's the main

00:13:04,730 --> 00:13:08,940
application lifecycle it's useful for

00:13:07,139 --> 00:13:11,250
logging stuff of receipt as we've seen

00:13:08,940 --> 00:13:12,959
error handling if you like global

00:13:11,250 --> 00:13:15,089
authentication authorization and things

00:13:12,959 --> 00:13:17,100
like that and of course triggering

00:13:15,089 --> 00:13:19,860
routing and dispatching and expressive

00:13:17,100 --> 00:13:21,810
in fact that the routing and dispatching

00:13:19,860 --> 00:13:23,579
steps in an expressive application are

00:13:21,810 --> 00:13:26,220
also middlewares that you have to

00:13:23,579 --> 00:13:27,990
explicitly add to the chain if you're

00:13:26,220 --> 00:13:30,480
using the skeleton application which

00:13:27,990 --> 00:13:31,560
will look at mode in a moment that's

00:13:30,480 --> 00:13:34,829
already done for you so you don't have

00:13:31,560 --> 00:13:36,660
to do that and routing as well

00:13:34,829 --> 00:13:39,779
I'll see you want to be able to assign

00:13:36,660 --> 00:13:41,850
middleware to specific routes that

00:13:39,779 --> 00:13:45,000
performed those specific actions and

00:13:41,850 --> 00:13:46,740
that's useful as well for partial

00:13:45,000 --> 00:13:49,319
authentication authorization so for

00:13:46,740 --> 00:13:51,000
example most of your website is public

00:13:49,319 --> 00:13:53,040
for example but then you have some

00:13:51,000 --> 00:13:55,439
specific admin panel or something like

00:13:53,040 --> 00:13:57,329
that and of course running the

00:13:55,439 --> 00:14:05,430
middleware on specific routes or even

00:13:57,329 --> 00:14:09,089
HTTP verbs so again step back a moment

00:14:05,430 --> 00:14:10,800
into Zen przemek turn 3 because you

00:14:09,089 --> 00:14:13,579
might recall what about where does that

00:14:10,800 --> 00:14:16,319
leaves a big step so again framework and

00:14:13,579 --> 00:14:18,540
it's purely an alternative I it's a

00:14:16,319 --> 00:14:21,660
different way of structuring your

00:14:18,540 --> 00:14:24,089
application a different paradigm then

00:14:21,660 --> 00:14:26,120
framework 2 and 3 if you not aware it

00:14:24,089 --> 00:14:28,470
focuses on sort of a quartet of

00:14:26,120 --> 00:14:30,569
components so there's the MVC component

00:14:28,470 --> 00:14:33,600
itself as a module manager which we'll

00:14:30,569 --> 00:14:36,959
have a look at in a little bit an event

00:14:33,600 --> 00:14:39,420
manager which the whole NBC lifecycle is

00:14:36,959 --> 00:14:41,790
kind of based around events strictly

00:14:39,420 --> 00:14:44,189
speaking they're not events but that

00:14:41,790 --> 00:14:49,019
again that's an another topic

00:14:44,189 --> 00:14:50,370
then service manager is up so expressive

00:14:49,019 --> 00:14:52,199
isn't designed to be a replacement for

00:14:50,370 --> 00:14:59,250
them to framework it's just an

00:14:52,199 --> 00:15:02,160
alternative a Zen MVC is still powered

00:14:59,250 --> 00:15:04,260
by these events and so on events and

00:15:02,160 --> 00:15:07,170
it's still a viable option for

00:15:04,260 --> 00:15:09,360
applications and it's kind of half

00:15:07,170 --> 00:15:11,850
preference and a half like how how you

00:15:09,360 --> 00:15:13,170
want to structure applications is on so

00:15:11,850 --> 00:15:15,209
if you are familiar with an framework

00:15:13,170 --> 00:15:16,740
and you wanted to get into expressive

00:15:15,209 --> 00:15:20,579
you kind of need a bit of a mind shift

00:15:16,740 --> 00:15:22,829
as well so we're in a typical MVC

00:15:20,579 --> 00:15:26,069
application you would do a load of stuff

00:15:22,829 --> 00:15:27,510
you can break that up into these small

00:15:26,069 --> 00:15:30,390
middle ways that do

00:15:27,510 --> 00:15:31,980
specific things you don't have to of

00:15:30,390 --> 00:15:33,180
course you can just have one middleware

00:15:31,980 --> 00:15:35,580
action middleware that does everything

00:15:33,180 --> 00:15:38,420
but you're kind of not leveraging the

00:15:35,580 --> 00:15:40,530
power that you have in expressive that

00:15:38,420 --> 00:15:43,140
express it doesn't have modules that

00:15:40,530 --> 00:15:45,420
show if you aren't familiar with an

00:15:43,140 --> 00:15:47,220
framework you would have a module and

00:15:45,420 --> 00:15:48,720
you have this file called module dot PHP

00:15:47,220 --> 00:15:50,900
in the module manager would load that up

00:15:48,720 --> 00:15:53,460
and you have things like configuration

00:15:50,900 --> 00:15:55,020
and some kind of bootstrap

00:15:53,460 --> 00:15:57,600
initialization type thing for each

00:15:55,020 --> 00:15:59,700
module and it merges all that down into

00:15:57,600 --> 00:16:02,520
a big configuration file because then

00:15:59,700 --> 00:16:05,280
framework like arrays a lot and

00:16:02,520 --> 00:16:09,270
expressive does as well so yeah make

00:16:05,280 --> 00:16:14,850
sure you like arrays and but you have to

00:16:09,270 --> 00:16:16,830
do this explicitly and expressive so you

00:16:14,850 --> 00:16:18,510
think well maybe I can use some

00:16:16,830 --> 00:16:19,860
framework components in an expressive

00:16:18,510 --> 00:16:21,540
application because there's a lot out

00:16:19,860 --> 00:16:24,840
there they do various stuff you know

00:16:21,540 --> 00:16:27,810
doctrine module and all kinds stuff

00:16:24,840 --> 00:16:30,330
which we'll look at in a moment but it's

00:16:27,810 --> 00:16:31,710
not quite as straightforward so that the

00:16:30,330 --> 00:16:34,020
module manager is missing and is

00:16:31,710 --> 00:16:35,430
probably quite difficult to improve that

00:16:34,020 --> 00:16:40,230
sort of integrate into an expressive

00:16:35,430 --> 00:16:41,670
applications I wouldn't even go there so

00:16:40,230 --> 00:16:44,700
there's a caveat

00:16:41,670 --> 00:16:47,480
so anything that module dot PHP does you

00:16:44,700 --> 00:16:50,790
need to do manually outside of just a

00:16:47,480 --> 00:16:56,310
configuration so this is what you might

00:16:50,790 --> 00:16:58,140
see in framework a pet module if it's as

00:16:56,310 --> 00:17:00,870
simple as this just returning your

00:16:58,140 --> 00:17:04,890
configure a that's good because you can

00:17:00,870 --> 00:17:06,990
use this to your benefit there's these

00:17:04,890 --> 00:17:11,220
things called config providers it's

00:17:06,990 --> 00:17:15,150
fairly new compare concept inventor amok

00:17:11,220 --> 00:17:17,360
and it's basically a replacement for

00:17:15,150 --> 00:17:19,500
that module that config dot PHP thing

00:17:17,360 --> 00:17:25,070
I'm going to use then form as an example

00:17:19,500 --> 00:17:27,660
and all we do is just move that config

00:17:25,070 --> 00:17:30,540
returning into a callable object right

00:17:27,660 --> 00:17:33,990
the advantage of course hopefully you

00:17:30,540 --> 00:17:36,360
can see is that you don't just specify

00:17:33,990 --> 00:17:38,820
the path to a config file you can use

00:17:36,360 --> 00:17:39,920
auto loading because we like Auto

00:17:38,820 --> 00:17:42,260
loading

00:17:39,920 --> 00:17:44,780
so you can just say give me this object

00:17:42,260 --> 00:17:46,940
that provides configuration and return

00:17:44,780 --> 00:17:49,300
it and great and then framework has

00:17:46,940 --> 00:17:53,360
started to adopt this for their modules

00:17:49,300 --> 00:17:57,710
some of them and it's very simple stuff

00:17:53,360 --> 00:17:59,320
right this is just an example of

00:17:57,710 --> 00:18:02,120
configuration that we would have seen

00:17:59,320 --> 00:18:05,510
and it's just in a function that we

00:18:02,120 --> 00:18:07,340
returned it broken down nicely you know

00:18:05,510 --> 00:18:09,020
it's not a lot different but it's more

00:18:07,340 --> 00:18:11,060
portable because we can use the auto

00:18:09,020 --> 00:18:18,890
loader to locate this configuration

00:18:11,060 --> 00:18:21,740
instead so now if we look at then Zen

00:18:18,890 --> 00:18:25,160
form this is what we see we actually see

00:18:21,740 --> 00:18:27,680
that the module dot PHP uses that

00:18:25,160 --> 00:18:29,930
conflict provider and gets the same

00:18:27,680 --> 00:18:32,450
benefits so this module could now work

00:18:29,930 --> 00:18:36,590
in an expressive application and a Zen

00:18:32,450 --> 00:18:38,390
framework application kit this is how

00:18:36,590 --> 00:18:40,640
you would use it in a Zen front-end

00:18:38,390 --> 00:18:46,600
expressive application you just return

00:18:40,640 --> 00:18:46,600
the array it's very straightforward and

00:18:48,250 --> 00:18:55,520
yeah I mean as I said if the module PHP

00:18:53,210 --> 00:18:57,260
does more than that just the conflict

00:18:55,520 --> 00:18:59,480
then you might need to add some

00:18:57,260 --> 00:19:02,870
bootstrap code and duplicate that which

00:18:59,480 --> 00:19:06,740
is kind of a bit annoying anyway your

00:19:02,870 --> 00:19:08,180
application let's write one I'm going to

00:19:06,740 --> 00:19:09,650
show you an application I built if you

00:19:08,180 --> 00:19:11,870
have a laptop open and you like

00:19:09,650 --> 00:19:13,880
following along there is some code on

00:19:11,870 --> 00:19:16,160
github and what I'm going to do is is

00:19:13,880 --> 00:19:18,680
very simple application it's going to be

00:19:16,160 --> 00:19:21,080
a book library there's going to be an

00:19:18,680 --> 00:19:23,240
action to check in things into the

00:19:21,080 --> 00:19:27,470
library and check out things from the

00:19:23,240 --> 00:19:28,550
library so if you would like to follow

00:19:27,470 --> 00:19:33,550
along and have a look at the source code

00:19:28,550 --> 00:19:33,550
please do it will give you a moment

00:19:37,430 --> 00:19:46,740
okay does anyone else still need the

00:19:40,770 --> 00:19:48,990
link okay good alright so I mentioned

00:19:46,740 --> 00:19:51,660
earlier this expressive skeleton which

00:19:48,990 --> 00:19:55,220
is by far the fastest and easiest way to

00:19:51,660 --> 00:19:59,520
get set up so I did this right for the

00:19:55,220 --> 00:20:01,500
this talk and you use a CLI tool to

00:19:59,520 --> 00:20:03,960
configure everything it uses the

00:20:01,500 --> 00:20:05,160
composer installer stuff so they didn't

00:20:03,960 --> 00:20:08,250
honestly write it all themselves which

00:20:05,160 --> 00:20:12,240
we don't do anymore but you can choose

00:20:08,250 --> 00:20:15,690
the Rueter di View templating and the

00:20:12,240 --> 00:20:17,730
error handling as well so use composer

00:20:15,690 --> 00:20:21,360
create project we'll call it book

00:20:17,730 --> 00:20:22,860
library so it's very straightforward it

00:20:21,360 --> 00:20:25,170
will first ask you if you want to do a

00:20:22,860 --> 00:20:27,420
minimal installation or not you probably

00:20:25,170 --> 00:20:29,160
want to do a full installation because

00:20:27,420 --> 00:20:30,960
minimal will mean that you don't get

00:20:29,160 --> 00:20:31,650
very much configured right enough to do

00:20:30,960 --> 00:20:33,300
everything manually

00:20:31,650 --> 00:20:37,350
we don't like doing things manually

00:20:33,300 --> 00:20:39,960
right you'll be asked which router I

00:20:37,350 --> 00:20:42,650
opted for fast route because I like fast

00:20:39,960 --> 00:20:44,700
routing you'll be asked what container

00:20:42,650 --> 00:20:46,320
implementation to use by optimism

00:20:44,700 --> 00:20:50,880
service manager because factories for

00:20:46,320 --> 00:20:54,240
the wind and a templating engine in this

00:20:50,880 --> 00:20:59,250
case we make I'm making an API so it's

00:20:54,240 --> 00:21:00,300
just JSON so I pick none and finally it

00:20:59,250 --> 00:21:03,510
will ask you if you want to install

00:21:00,300 --> 00:21:08,010
whoops or not I didn't for various

00:21:03,510 --> 00:21:10,590
reasons fine but after we've done this

00:21:08,010 --> 00:21:12,660
we have already got an up and running

00:21:10,590 --> 00:21:15,210
expressive application hopefully you can

00:21:12,660 --> 00:21:17,220
run go off and do the composer install

00:21:15,210 --> 00:21:19,170
and then you it even comes with a

00:21:17,220 --> 00:21:21,660
bundled command composer serve which

00:21:19,170 --> 00:21:24,030
kind of times out after a while which is

00:21:21,660 --> 00:21:26,040
kind of annoying but anyway again a

00:21:24,030 --> 00:21:28,800
different topic but if you know navigate

00:21:26,040 --> 00:21:32,940
to localhost 8080 in your browser you

00:21:28,800 --> 00:21:36,780
will see some JSON and that's it these

00:21:32,940 --> 00:21:37,950
it's as simple as that right so we're

00:21:36,780 --> 00:21:39,630
going to start off we're going to create

00:21:37,950 --> 00:21:40,980
some endpoints are we in a right to

00:21:39,630 --> 00:21:44,250
practical application so we're going to

00:21:40,980 --> 00:21:46,530
create a book entity we're going to

00:21:44,250 --> 00:21:48,540
create an interface for finding the book

00:21:46,530 --> 00:21:49,860
entity which will go ahead and implement

00:21:48,540 --> 00:21:53,190
later

00:21:49,860 --> 00:21:54,480
and two end points so two actions want

00:21:53,190 --> 00:21:59,520
to check in a book one to check out a

00:21:54,480 --> 00:22:00,270
book the book entity is very simple

00:21:59,520 --> 00:22:02,070
we're going to keep it very simple

00:22:00,270 --> 00:22:04,110
there's just one property actually in

00:22:02,070 --> 00:22:05,580
the actual implementation you'll see

00:22:04,110 --> 00:22:07,559
that two properties is a name as well

00:22:05,580 --> 00:22:09,590
because I kind of got fed up of trying

00:22:07,559 --> 00:22:12,929
to remember you you IDs all the time

00:22:09,590 --> 00:22:15,900
and it's got a single property in stock

00:22:12,929 --> 00:22:20,940
or boolean true or false so you can only

00:22:15,900 --> 00:22:23,340
have one book here one copy of a book we

00:22:20,940 --> 00:22:28,110
keep that we're keeping the example

00:22:23,340 --> 00:22:31,710
simple right checkout method again

00:22:28,110 --> 00:22:33,179
there's not a lot here right if it's not

00:22:31,710 --> 00:22:36,080
in stock coffee you can check it out so

00:22:33,179 --> 00:22:39,840
we're going to throw an exception and

00:22:36,080 --> 00:22:41,850
then if it is in stock then we can

00:22:39,840 --> 00:22:45,120
change it to be not the in stock as

00:22:41,850 --> 00:22:47,070
simple as we keep it simple check-in

00:22:45,120 --> 00:22:51,630
method that's the same is just the

00:22:47,070 --> 00:22:54,179
opposite way around right so we also

00:22:51,630 --> 00:22:57,450
wrote an interface find book by UUID

00:22:54,179 --> 00:23:00,780
and we're not going to implement it yet

00:22:57,450 --> 00:23:02,480
I'm just going to assume that however we

00:23:00,780 --> 00:23:05,340
implement this later

00:23:02,480 --> 00:23:09,510
so clues kind of in the title it will be

00:23:05,340 --> 00:23:11,880
with doctrine but we give it a UID and

00:23:09,510 --> 00:23:18,960
it should return us a book entity and

00:23:11,880 --> 00:23:21,960
that's all we want right so apologies if

00:23:18,960 --> 00:23:26,490
it's a bit smaller than that but this is

00:23:21,960 --> 00:23:28,350
the action it implements middleware

00:23:26,490 --> 00:23:30,120
interface as we kind of talked about

00:23:28,350 --> 00:23:32,520
earlier so we've got the request the

00:23:30,120 --> 00:23:34,980
delegate and it we should return the

00:23:32,520 --> 00:23:36,870
response in this case I've specified a

00:23:34,980 --> 00:23:41,520
JSON response because we're just dealing

00:23:36,870 --> 00:23:44,549
with Jason there most of this is just

00:23:41,520 --> 00:23:47,760
try catching and returning helpful error

00:23:44,549 --> 00:23:49,169
messages it's kind of a contrived

00:23:47,760 --> 00:23:53,910
example but fine

00:23:49,169 --> 00:23:55,890
it's fine for demonstrating the main

00:23:53,910 --> 00:24:00,690
meat of this function is the invoking

00:23:55,890 --> 00:24:02,270
the find book by UUID checking it out if

00:24:00,690 --> 00:24:05,190
we can also

00:24:02,270 --> 00:24:06,630
and I'll see if something goes wrong at

00:24:05,190 --> 00:24:08,610
that point we can return a useful

00:24:06,630 --> 00:24:10,110
response the check in action is

00:24:08,610 --> 00:24:13,470
essentially the same so I'm not going to

00:24:10,110 --> 00:24:16,440
show up so we're going to add some ORM

00:24:13,470 --> 00:24:18,510
right we're at the point where we can

00:24:16,440 --> 00:24:23,010
now implement something with doctrine

00:24:18,510 --> 00:24:27,030
and get integrated right I'm not going

00:24:23,010 --> 00:24:29,850
to talk about the ODM so if you not sure

00:24:27,030 --> 00:24:33,420
what those are there's relational

00:24:29,850 --> 00:24:37,520
database is uses the ORM and object

00:24:33,420 --> 00:24:40,230
relationship mapper and ODM object

00:24:37,520 --> 00:24:41,910
document mapper but I'm not going to

00:24:40,230 --> 00:24:44,340
write the ODM so you'll see me refer to

00:24:41,910 --> 00:24:46,020
entity manager I should talk about in

00:24:44,340 --> 00:24:49,080
just a moment rather than document

00:24:46,020 --> 00:24:53,460
manager anything separate so who's not

00:24:49,080 --> 00:24:58,260
used an ORM before your user good who's

00:24:53,460 --> 00:24:59,730
not used doctrine RM ok ok so we'll have

00:24:58,260 --> 00:25:03,870
a look basically this is how daxing

00:24:59,730 --> 00:25:07,590
works very very high-level because it's

00:25:03,870 --> 00:25:09,510
very complicated underneath the main

00:25:07,590 --> 00:25:12,660
parts of this is the database

00:25:09,510 --> 00:25:14,310
abstraction ID well and that if you're

00:25:12,660 --> 00:25:16,590
not aware allows you to talk to lots of

00:25:14,310 --> 00:25:19,800
different databases and then on top of

00:25:16,590 --> 00:25:21,210
that we have the ORM which has the

00:25:19,800 --> 00:25:23,850
entity manager and that's the main thing

00:25:21,210 --> 00:25:25,500
we focus on your application houses

00:25:23,850 --> 00:25:28,680
these entities so we've already created

00:25:25,500 --> 00:25:32,280
one we created the book entity and these

00:25:28,680 --> 00:25:34,370
are in doctrines world just plain old

00:25:32,280 --> 00:25:38,180
PHP objects they don't extend anything

00:25:34,370 --> 00:25:40,470
there's nothing complicated to them

00:25:38,180 --> 00:25:43,920
doctrine through some magical wizardry

00:25:40,470 --> 00:25:46,230
we'll track changes to your entities and

00:25:43,920 --> 00:25:48,420
then when you've finished your request

00:25:46,230 --> 00:25:51,170
you will flush those changes to the

00:25:48,420 --> 00:25:55,800
database by using a call to flush

00:25:51,170 --> 00:25:59,010
literally and your application should

00:25:55,800 --> 00:26:02,400
have ways of finding these things right

00:25:59,010 --> 00:26:03,890
so you can call find those services

00:26:02,400 --> 00:26:06,510
whatever you want to call them find

00:26:03,890 --> 00:26:10,440
these would use the entity manager to

00:26:06,510 --> 00:26:12,390
locate and season populate them in

00:26:10,440 --> 00:26:13,970
entity manager deals with hydrating

00:26:12,390 --> 00:26:15,779
stuff in the database and so on an

00:26:13,970 --> 00:26:18,179
example of this we've already

00:26:15,779 --> 00:26:20,519
on find book by UUID interface and

00:26:18,179 --> 00:26:24,719
that's going to use the entity manager

00:26:20,519 --> 00:26:26,580
eventually so if you've ever written

00:26:24,719 --> 00:26:29,940
anything framework applications before

00:26:26,580 --> 00:26:31,440
you will and use doctrine as well you

00:26:29,940 --> 00:26:33,899
may be familiar with doctrine or a

00:26:31,440 --> 00:26:38,159
module so that is Zen framework bindings

00:26:33,899 --> 00:26:40,379
for doctrine something up what a

00:26:38,159 --> 00:26:42,690
question I've been asked before is why

00:26:40,379 --> 00:26:45,599
wouldn't you just use doctrine ORM the

00:26:42,690 --> 00:26:47,190
package directly it has advantages in

00:26:45,599 --> 00:26:49,649
Zen framework world right you've got

00:26:47,190 --> 00:26:51,239
that wide in configuration from the

00:26:49,649 --> 00:26:55,950
module that PHP is we kind of looked at

00:26:51,239 --> 00:26:57,479
earlier you can have yeah all your

00:26:55,950 --> 00:26:58,859
services are pre-configured from that

00:26:57,479 --> 00:27:01,769
configuration you've got CLI tools

00:26:58,859 --> 00:27:04,169
already set up and if you use it then

00:27:01,769 --> 00:27:06,989
developer toolbar integration and so on

00:27:04,169 --> 00:27:10,019
it also has some nicer than form

00:27:06,989 --> 00:27:13,080
integration as well and surprisingly

00:27:10,019 --> 00:27:16,279
reasonable documentation but that still

00:27:13,080 --> 00:27:18,570
is not part of Zen framework right I

00:27:16,279 --> 00:27:23,219
actually like Zen frame like it doesn't

00:27:18,570 --> 00:27:28,799
sound like I do but um so can we use

00:27:23,219 --> 00:27:30,809
this in expressive right um yeah you can

00:27:28,799 --> 00:27:33,149
but you obviously run into this problem

00:27:30,809 --> 00:27:37,139
very quickly that there is no conflict

00:27:33,149 --> 00:27:39,149
provider so we have to write something

00:27:37,139 --> 00:27:41,249
like this which is kind of annoying a

00:27:39,149 --> 00:27:43,259
bunch of code that pulls in the

00:27:41,249 --> 00:27:44,700
configuration manually and you don't

00:27:43,259 --> 00:27:48,059
have that advantage of the conflict

00:27:44,700 --> 00:27:49,919
being auto loadable and you need to

00:27:48,059 --> 00:27:55,769
manually configure the CLI and things

00:27:49,919 --> 00:27:57,839
like that so you could do this I've

00:27:55,769 --> 00:27:59,580
submitted a patch to both doctrine

00:27:57,839 --> 00:28:00,839
module and doctrine RM modules you need

00:27:59,580 --> 00:28:02,729
both you need to pull in the

00:28:00,839 --> 00:28:05,070
configuration from both I've submitted

00:28:02,729 --> 00:28:06,599
patches to get contem config providers

00:28:05,070 --> 00:28:10,259
in there but they're sitting there

00:28:06,599 --> 00:28:12,899
waiting to be merged so hopefully

00:28:10,259 --> 00:28:14,249
eventually this will become easier and

00:28:12,899 --> 00:28:17,159
simpler so why would you use this module

00:28:14,249 --> 00:28:21,119
like I said then Zen form integration is

00:28:17,159 --> 00:28:24,450
nice if you like Zen form hydrators and

00:28:21,119 --> 00:28:27,679
things like that and that makes certain

00:28:24,450 --> 00:28:27,679
activities easier

00:28:28,060 --> 00:28:34,990
but wait there's more there is a package

00:28:32,770 --> 00:28:36,430
called container interrupt doctrine it's

00:28:34,990 --> 00:28:38,830
written by someone called Ben the shoals

00:28:36,430 --> 00:28:42,130
and I probably pronounced his name wrong

00:28:38,830 --> 00:28:45,550
he's German so it's got a mouth I think

00:28:42,130 --> 00:28:47,830
on the Oh anyway sidetracked he's

00:28:45,550 --> 00:28:49,870
written this component and it's not

00:28:47,830 --> 00:28:51,250
actually specific to expressive you can

00:28:49,870 --> 00:28:52,720
use it anywhere you use container

00:28:51,250 --> 00:28:55,240
interrupts hence the name container

00:28:52,720 --> 00:28:58,170
interrupt doctrine and what this does is

00:28:55,240 --> 00:29:00,610
it allows you to automatically configure

00:28:58,170 --> 00:29:02,500
doctrine with factories and things like

00:29:00,610 --> 00:29:06,780
that it's just a bunch of factories that

00:29:02,500 --> 00:29:10,150
automatically configure it cool so

00:29:06,780 --> 00:29:11,170
composer require blah blah blah if you

00:29:10,150 --> 00:29:18,070
don't already have doctrine as

00:29:11,170 --> 00:29:20,110
dependency it will add it and in your

00:29:18,070 --> 00:29:21,700
configuration I would suggest making a

00:29:20,110 --> 00:29:24,580
separate configuration file called

00:29:21,700 --> 00:29:26,590
doctrine global dot php' whatever that's

00:29:24,580 --> 00:29:30,400
where you can configuration files go in

00:29:26,590 --> 00:29:33,700
expressive and it's very simple you just

00:29:30,400 --> 00:29:37,180
wire up this one factory and you get

00:29:33,700 --> 00:29:39,340
doctrine ready to use and wherever you

00:29:37,180 --> 00:29:42,070
have your container you can pull the

00:29:39,340 --> 00:29:45,190
entity manager and other things like

00:29:42,070 --> 00:29:47,410
connections and whatever and this works

00:29:45,190 --> 00:29:50,670
fine if you just have the default it's

00:29:47,410 --> 00:29:53,110
called ORM default namespace for

00:29:50,670 --> 00:29:55,240
connections it does work with multiple

00:29:53,110 --> 00:29:57,460
configurations if you want check the

00:29:55,240 --> 00:30:00,430
documentation it's written on how to do

00:29:57,460 --> 00:30:04,840
that and there's examples which is kind

00:30:00,430 --> 00:30:07,020
of nice so you obviously you also need

00:30:04,840 --> 00:30:10,840
to configure it to point to a database

00:30:07,020 --> 00:30:12,490
so also in that configuration file you

00:30:10,840 --> 00:30:13,830
would add your database credentials and

00:30:12,490 --> 00:30:19,740
so on

00:30:13,830 --> 00:30:22,780
don't put passwords in to get that's bad

00:30:19,740 --> 00:30:24,430
I'm using Postgres but any database

00:30:22,780 --> 00:30:25,810
should work in theory right that's what

00:30:24,430 --> 00:30:29,290
the database abstraction layer is for

00:30:25,810 --> 00:30:35,050
and there's full examples in doctoring

00:30:29,290 --> 00:30:36,900
compared continuing doctrine um yes what

00:30:35,050 --> 00:30:40,090
you don't

00:30:36,900 --> 00:30:43,600
don't put that with your actual

00:30:40,090 --> 00:30:47,530
passwords in there you can use local PHP

00:30:43,600 --> 00:30:50,350
which is automatically get ignored so

00:30:47,530 --> 00:30:52,300
that you don't accidentally commit your

00:30:50,350 --> 00:30:58,390
taste based credentials or secret keys

00:30:52,300 --> 00:30:59,980
whatever so if you look at the example

00:30:58,390 --> 00:31:02,200
applicator book library application on

00:30:59,980 --> 00:31:04,300
github and I've done it the right way

00:31:02,200 --> 00:31:07,180
there so the slides are slightly alpha

00:31:04,300 --> 00:31:10,330
think that perhaps CLI config as well

00:31:07,180 --> 00:31:12,430
because doctrine is much easier to use

00:31:10,330 --> 00:31:15,460
if you have these CLI tools that come

00:31:12,430 --> 00:31:17,890
with it so there is things like schema

00:31:15,460 --> 00:31:19,840
generation or the other way around so

00:31:17,890 --> 00:31:23,140
you can generate your entities from your

00:31:19,840 --> 00:31:25,120
existing database you can plug-in

00:31:23,140 --> 00:31:30,340
doctrine migrate migrations as well but

00:31:25,120 --> 00:31:32,710
I'm not covering in this talk and yeah

00:31:30,340 --> 00:31:35,080
they CLI tools you very useful they can

00:31:32,710 --> 00:31:36,010
validate your schema as well so you make

00:31:35,080 --> 00:31:37,540
sure you've written your entities

00:31:36,010 --> 00:31:41,320
properly and things like that so you

00:31:37,540 --> 00:31:44,230
probably want to do that it's basically

00:31:41,320 --> 00:31:46,840
just copy and paste this code that's all

00:31:44,230 --> 00:31:48,720
I can say really it's you don't need

00:31:46,840 --> 00:31:52,960
much more than that and then you can run

00:31:48,720 --> 00:31:55,330
and herb in doctrine or yes and herb in

00:31:52,960 --> 00:31:57,160
doctrine and you will get those CLI

00:31:55,330 --> 00:31:59,700
tools which is very useful we'll have a

00:31:57,160 --> 00:32:04,660
look at using that in a moment as well

00:31:59,700 --> 00:32:08,710
so as I said entities are just plain old

00:32:04,660 --> 00:32:11,290
PHP objects but how does doctrine

00:32:08,710 --> 00:32:13,240
actually work with that you can use

00:32:11,290 --> 00:32:17,250
these things called annotations they're

00:32:13,240 --> 00:32:19,540
just comments with specific syntax and

00:32:17,250 --> 00:32:20,890
you might say well loading that every

00:32:19,540 --> 00:32:24,580
time this can be really slow it's okay

00:32:20,890 --> 00:32:26,320
doctrine caches those you can also do

00:32:24,580 --> 00:32:27,760
these annotations by the nut called

00:32:26,320 --> 00:32:30,480
annotations them but you can have your

00:32:27,760 --> 00:32:33,910
entity configurations as XML if you like

00:32:30,480 --> 00:32:35,890
or yeah Mille if you like pain but the

00:32:33,910 --> 00:32:40,420
animal is going away from doctrine so

00:32:35,890 --> 00:32:42,000
maybe maybe don't use sam'l um again a

00:32:40,420 --> 00:32:43,980
different talk perhaps

00:32:42,000 --> 00:32:46,250
all right so this is what an annotation

00:32:43,980 --> 00:32:50,010
might look like we have the table name

00:32:46,250 --> 00:32:54,180
book in this case and we have an ID

00:32:50,010 --> 00:32:56,310
column and I'm using uu IDs rather than

00:32:54,180 --> 00:32:58,530
sort of Encore to incrementing primary

00:32:56,310 --> 00:33:00,540
keys that's a good practice

00:32:58,530 --> 00:33:05,820
again there's a whole other talk about

00:33:00,540 --> 00:33:07,980
that and the benefits is that you get

00:33:05,820 --> 00:33:10,700
fewer collisions you can do distributed

00:33:07,980 --> 00:33:13,200
systems like certain things like that so

00:33:10,700 --> 00:33:15,720
there is also actually a library are

00:33:13,200 --> 00:33:18,450
from Ben Ramsey who wrote the UUID

00:33:15,720 --> 00:33:21,480
library that I also use in the book

00:33:18,450 --> 00:33:23,580
library application that has a specific

00:33:21,480 --> 00:33:25,680
doctrine type so it kind of integrates

00:33:23,580 --> 00:33:27,720
slightly nicer but I actually I don't

00:33:25,680 --> 00:33:31,080
usually get I apparently like doing

00:33:27,720 --> 00:33:32,850
things manually silly me

00:33:31,080 --> 00:33:36,210
but yeah you have these annotations at

00:33:32,850 --> 00:33:37,860
orm backslash on and you there's lots of

00:33:36,210 --> 00:33:41,370
different options you can put in caching

00:33:37,860 --> 00:33:44,250
configurations and you know your foreign

00:33:41,370 --> 00:33:46,110
key associations in the indices and all

00:33:44,250 --> 00:33:48,450
that kind of stuff so anything you can

00:33:46,110 --> 00:33:52,110
do in a normal database you can chuck

00:33:48,450 --> 00:33:55,380
into these annotations documentation is

00:33:52,110 --> 00:33:57,980
reasonably good for this so do check it

00:33:55,380 --> 00:34:01,470
out if you're not sure what's going on

00:33:57,980 --> 00:34:05,460
so yeah we have I already explained the

00:34:01,470 --> 00:34:08,820
IDs that's fine so let's go ahead and

00:34:05,460 --> 00:34:11,129
implement this they're going to call it

00:34:08,820 --> 00:34:12,629
doctrine find book by UUID and that's

00:34:11,129 --> 00:34:16,800
the implementation of the interface we'd

00:34:12,629 --> 00:34:19,320
wrote earlier on it's very

00:34:16,800 --> 00:34:21,179
straightforward really the class

00:34:19,320 --> 00:34:23,399
constructor if you've got the code open

00:34:21,179 --> 00:34:26,429
you'll be able to see that in this file

00:34:23,399 --> 00:34:28,379
it takes an object repository doctrine

00:34:26,429 --> 00:34:30,780
that's something that we configured

00:34:28,379 --> 00:34:34,200
earlier with the factory and we just

00:34:30,780 --> 00:34:38,520
called the find method we cast our UID

00:34:34,200 --> 00:34:39,929
to a string because it I believe it cast

00:34:38,520 --> 00:34:43,350
it so string anyway but I like being

00:34:39,929 --> 00:34:46,050
explicit and if we don't find it

00:34:43,350 --> 00:34:47,909
doctoring will return null by default so

00:34:46,050 --> 00:34:51,149
I turned this into a noisy exception

00:34:47,909 --> 00:34:53,250
because our interface mandated that if

00:34:51,149 --> 00:34:55,639
you can't find a book we pair an

00:34:53,250 --> 00:34:55,639
exception

00:34:58,690 --> 00:35:06,650
right so the checkout action we can

00:35:02,960 --> 00:35:09,130
update those and I'm calling this funny

00:35:06,650 --> 00:35:13,150
little function called transactional

00:35:09,130 --> 00:35:16,610
this is kind of pointless for this

00:35:13,150 --> 00:35:19,490
specific use case but it's a good

00:35:16,610 --> 00:35:20,900
example of doing transactions with

00:35:19,490 --> 00:35:23,990
oxygen so that's why I put it in there

00:35:20,900 --> 00:35:26,240
so it's kind of an academic example but

00:35:23,990 --> 00:35:28,610
it's nice because you can have atomic

00:35:26,240 --> 00:35:31,360
operations so multiple queries may

00:35:28,610 --> 00:35:34,340
happen that depend on other things and

00:35:31,360 --> 00:35:36,350
if something breaks doctrine we'll roll

00:35:34,340 --> 00:35:39,140
that back so you begin it begins a

00:35:36,350 --> 00:35:40,730
transaction in the database you it runs

00:35:39,140 --> 00:35:42,260
the callable that you provided in this

00:35:40,730 --> 00:35:46,940
case this just calls the one function

00:35:42,260 --> 00:35:49,550
and then you call flush at the end so it

00:35:46,940 --> 00:35:50,630
calls flush at the end rather and as I

00:35:49,550 --> 00:35:52,040
said if there's any exception or

00:35:50,630 --> 00:35:56,810
anything it will roll back in the

00:35:52,040 --> 00:35:58,010
database in real terms all we're doing

00:35:56,810 --> 00:36:01,940
here is taking advantage of the

00:35:58,010 --> 00:36:04,970
automatic flushing for this case but

00:36:01,940 --> 00:36:07,850
it's a very practical example the atomic

00:36:04,970 --> 00:36:10,430
50 may be necessary for your application

00:36:07,850 --> 00:36:12,770
you know if you want to create a user

00:36:10,430 --> 00:36:14,270
and take payment or the payment fails

00:36:12,770 --> 00:36:16,460
you know you might want to roll things

00:36:14,270 --> 00:36:21,230
back and deal with that in a specific

00:36:16,460 --> 00:36:23,390
way what do you get yet try and get in

00:36:21,230 --> 00:36:26,120
the habit of making properly dim dim are

00:36:23,390 --> 00:36:27,680
fated transaction I don't know how you

00:36:26,120 --> 00:36:31,250
pronounce that word sounds right to me

00:36:27,680 --> 00:36:35,660
anyway generate the schema so obviously

00:36:31,250 --> 00:36:38,690
we handily configured the CLI tool so we

00:36:35,660 --> 00:36:41,210
can run this command ORM schema tool

00:36:38,690 --> 00:36:43,010
create and that will examine the

00:36:41,210 --> 00:36:45,980
entities and the annotations that you've

00:36:43,010 --> 00:36:48,700
given it and automatically create your

00:36:45,980 --> 00:36:52,250
database for you which is pretty cool

00:36:48,700 --> 00:36:54,650
don't run it in production because it

00:36:52,250 --> 00:36:58,970
may nuke your database these are just

00:36:54,650 --> 00:37:00,920
development tools right and then we can

00:36:58,970 --> 00:37:02,930
insert some data pretty self-explanatory

00:37:00,920 --> 00:37:08,420
we need a book that we can check in and

00:37:02,930 --> 00:37:09,200
out and then now when we visit our URL

00:37:08,420 --> 00:37:11,420
you

00:37:09,200 --> 00:37:13,960
see the JSON response you should see you

00:37:11,420 --> 00:37:15,950
checked out the Great Escape and

00:37:13,960 --> 00:37:17,450
similarly if you check in you should see

00:37:15,950 --> 00:37:19,250
where you checked in them and then if

00:37:17,450 --> 00:37:20,810
you try and do check-in twice or check

00:37:19,250 --> 00:37:22,520
out twice then you'll see an exception

00:37:20,810 --> 00:37:23,930
on the second time and so on and

00:37:22,520 --> 00:37:30,170
hopefully everything is working

00:37:23,930 --> 00:37:32,930
excellent so let's pretend we didn't put

00:37:30,170 --> 00:37:35,690
a transaction in there flushing is a key

00:37:32,930 --> 00:37:37,970
part of the rme process because if you

00:37:35,690 --> 00:37:41,630
don't call flush on the entity manager

00:37:37,970 --> 00:37:43,280
nothing in your database changes so the

00:37:41,630 --> 00:37:45,500
way doctrinally does it mentioned

00:37:43,280 --> 00:37:48,109
earlier doctoring checks tracks changes

00:37:45,500 --> 00:37:50,920
to your entities and it stores them up

00:37:48,109 --> 00:37:54,050
in this thing called a unit of work and

00:37:50,920 --> 00:37:56,329
it's kind of like a to-do list of what

00:37:54,050 --> 00:37:59,020
do I want to do in the database the

00:37:56,329 --> 00:38:01,579
doctrine builds up as you change things

00:37:59,020 --> 00:38:02,869
and then when you call flush it will

00:38:01,579 --> 00:38:04,300
analyze all the changes that have been

00:38:02,869 --> 00:38:07,490
made and execute them into the database

00:38:04,300 --> 00:38:09,800
so just as an academic example let's

00:38:07,490 --> 00:38:12,410
write a middleware that does this flush

00:38:09,800 --> 00:38:13,910
at the end of a request for example it's

00:38:12,410 --> 00:38:16,579
not actually useful in our case because

00:38:13,910 --> 00:38:19,849
we already call transactional but anyway

00:38:16,579 --> 00:38:24,560
so things are pretty straightforward

00:38:19,849 --> 00:38:27,200
here I want to point out that we're

00:38:24,560 --> 00:38:28,730
using the old style of middleware so

00:38:27,200 --> 00:38:30,260
with the request and the response I've

00:38:28,730 --> 00:38:34,940
done that on purpose so I can show you

00:38:30,260 --> 00:38:37,730
what it looks like but we need a next

00:38:34,940 --> 00:38:39,770
thing to call so we have to make sure

00:38:37,730 --> 00:38:41,420
that it's then this is kind of a good

00:38:39,770 --> 00:38:43,099
practice you know if we need to call it

00:38:41,420 --> 00:38:44,510
we need to make sure it's there in most

00:38:43,099 --> 00:38:48,890
cases it will be if you configure it

00:38:44,510 --> 00:38:51,560
properly but if you forgot to configure

00:38:48,890 --> 00:38:53,750
the the middleware pipe correctly or

00:38:51,560 --> 00:38:55,700
screw something up then this will be

00:38:53,750 --> 00:38:58,000
useful for you you know so it's kind of

00:38:55,700 --> 00:39:02,810
saving yourself pain later down the line

00:38:58,000 --> 00:39:05,089
make sure that it's piped correctly and

00:39:02,810 --> 00:39:07,280
of course that's kind of endemic because

00:39:05,089 --> 00:39:11,329
you can provide a null as that parameter

00:39:07,280 --> 00:39:13,100
which makes sense sometimes but so we

00:39:11,329 --> 00:39:15,690
check

00:39:13,100 --> 00:39:19,170
this middleware doesn't return its own

00:39:15,690 --> 00:39:21,390
response so we just return the response

00:39:19,170 --> 00:39:22,790
that we get from out or the next

00:39:21,390 --> 00:39:29,580
middleware whatever you want to call it

00:39:22,790 --> 00:39:33,330
and after that yep we've so we call the

00:39:29,580 --> 00:39:38,100
next middleware and then we check if the

00:39:33,330 --> 00:39:40,320
entity manager is open so if something

00:39:38,100 --> 00:39:43,680
breaks or an exception is thrown

00:39:40,320 --> 00:39:45,240
database exception and so on the entity

00:39:43,680 --> 00:39:47,580
manager becomes closed and that

00:39:45,240 --> 00:39:49,500
basically means you need to clean up the

00:39:47,580 --> 00:39:54,780
requests don't do any more database

00:39:49,500 --> 00:39:55,710
operations yeah it's kind of a weird

00:39:54,780 --> 00:39:58,670
thing anyway

00:39:55,710 --> 00:40:00,810
so we call flash essentially and that

00:39:58,670 --> 00:40:03,600
will save the changes to the database

00:40:00,810 --> 00:40:07,220
and then we can return the response that

00:40:03,600 --> 00:40:09,780
we got from the callable and of course

00:40:07,220 --> 00:40:13,800
this is kind of a fundamental part of

00:40:09,780 --> 00:40:15,240
the middleware structure we are calling

00:40:13,800 --> 00:40:16,680
the next thing and it goes down the

00:40:15,240 --> 00:40:19,440
middleware chain and then this happens

00:40:16,680 --> 00:40:21,060
after everything else has happened hence

00:40:19,440 --> 00:40:26,130
why we put the code after the call to

00:40:21,060 --> 00:40:28,740
out so we've got a good functioning

00:40:26,130 --> 00:40:32,130
application now which is kind of nice so

00:40:28,740 --> 00:40:35,130
far we've set up expressive skeleton

00:40:32,130 --> 00:40:37,200
application that was super quick we've

00:40:35,130 --> 00:40:40,380
created endpoints to check in and out

00:40:37,200 --> 00:40:42,540
the book and we've added doctrine

00:40:40,380 --> 00:40:47,340
integration cool we can do more stuff

00:40:42,540 --> 00:40:50,760
there authentication let's have a look

00:40:47,340 --> 00:40:53,010
at it in a bit more detail so normally

00:40:50,760 --> 00:40:55,200
with an API you probably want to do

00:40:53,010 --> 00:40:59,040
something like oh or force some kind of

00:40:55,200 --> 00:41:01,500
token just probably just a wolf but

00:40:59,040 --> 00:41:08,790
we're going to keep this API super

00:41:01,500 --> 00:41:10,740
secure with a magic query string yeah

00:41:08,790 --> 00:41:15,100
this

00:41:10,740 --> 00:41:17,050
don't do this in the real world but yeah

00:41:15,100 --> 00:41:19,240
so the actual authentication is very

00:41:17,050 --> 00:41:21,400
simple which we've got authenticated

00:41:19,240 --> 00:41:25,840
equals one in the query string great let

00:41:21,400 --> 00:41:27,730
them in and we can catch that failure

00:41:25,840 --> 00:41:29,110
and return back up the chain very

00:41:27,730 --> 00:41:30,670
quickly we can short-circuit that

00:41:29,110 --> 00:41:32,770
middleware pipeline because we've not

00:41:30,670 --> 00:41:35,650
executed next so we're coming straight

00:41:32,770 --> 00:41:41,260
out of the pipeline there because

00:41:35,650 --> 00:41:43,060
authentication failed and if we do pass

00:41:41,260 --> 00:41:45,100
the authentication we can execute the

00:41:43,060 --> 00:41:47,920
next middleware again this is the

00:41:45,100 --> 00:41:50,140
old-style so I mean it's still current

00:41:47,920 --> 00:41:52,060
the current style of middlewares with

00:41:50,140 --> 00:41:54,220
the request and response and so on but

00:41:52,060 --> 00:41:55,870
don't change the response beforehand

00:41:54,220 --> 00:42:02,260
because you'll get that unexpected

00:41:55,870 --> 00:42:05,140
behavior that I've discussed so a nice

00:42:02,260 --> 00:42:09,100
option here is to use a light again from

00:42:05,140 --> 00:42:13,060
venture Lord Astrid is this internet

00:42:09,100 --> 00:42:16,150
name thing a nice option here is to use

00:42:13,060 --> 00:42:19,870
the library called helios and that uses

00:42:16,150 --> 00:42:22,630
a JWT which if you were in the talk just

00:42:19,870 --> 00:42:24,910
before wine you will have learned all

00:42:22,630 --> 00:42:28,840
about gwt's but for those of you who

00:42:24,910 --> 00:42:33,460
weren't it's JSON web tokens is kind of

00:42:28,840 --> 00:42:35,320
this stateless storage and you can store

00:42:33,460 --> 00:42:37,630
it without server tied sessions so it

00:42:35,320 --> 00:42:39,580
stores it in this token this JWT which

00:42:37,630 --> 00:42:41,410
is signed and things like that and you

00:42:39,580 --> 00:42:43,060
can pass it down in a cookie and things

00:42:41,410 --> 00:42:45,190
like that so you don't have to use

00:42:43,060 --> 00:42:51,030
sessions but again that's separate talk

00:42:45,190 --> 00:42:52,840
as well and helios implements

00:42:51,030 --> 00:42:56,590
authentication via these middle words

00:42:52,840 --> 00:42:58,810
right you register an identity lookup

00:42:56,590 --> 00:43:00,820
interface which as you might have

00:42:58,810 --> 00:43:03,100
guessed it will look up an identity or

00:43:00,820 --> 00:43:04,450
user whatever you want to call it for

00:43:03,100 --> 00:43:06,060
example you can pull it from a doctrine

00:43:04,450 --> 00:43:08,710
repository and resent it

00:43:06,060 --> 00:43:10,390
then you register your identity

00:43:08,710 --> 00:43:13,000
middleware into your pipeline so you add

00:43:10,390 --> 00:43:16,720
that into configuration and that will

00:43:13,000 --> 00:43:19,020
inject the authentication user into the

00:43:16,720 --> 00:43:21,040
request which is kind of nice and we'll

00:43:19,020 --> 00:43:22,550
we'll look at that in a bit more detail

00:43:21,040 --> 00:43:23,960
in a moment

00:43:22,550 --> 00:43:25,880
and then obviously you need to implement

00:43:23,960 --> 00:43:28,760
your sign in sign now actions if you're

00:43:25,880 --> 00:43:31,220
doing you know if you need a login

00:43:28,760 --> 00:43:33,290
logout type thing and you can use the

00:43:31,220 --> 00:43:36,530
cookie manager to inject and expire

00:43:33,290 --> 00:43:40,370
authentication and so on I'll see the

00:43:36,530 --> 00:43:43,220
JWT stuff maybe not so useful for API

00:43:40,370 --> 00:43:47,930
stuff because API don't usually use

00:43:43,220 --> 00:43:50,630
cookies hopefully there's also another

00:43:47,930 --> 00:43:54,350
library called PSR 7th session which

00:43:50,630 --> 00:43:58,040
uses these day WTS to store your session

00:43:54,350 --> 00:43:59,660
data in cookies its HTTP only by default

00:43:58,040 --> 00:44:02,810
you can actually override it which we'll

00:43:59,660 --> 00:44:04,340
have a look at in a moment and again it

00:44:02,810 --> 00:44:06,680
provides another middleware which you

00:44:04,340 --> 00:44:10,190
add into your middleware pipe and it

00:44:06,680 --> 00:44:13,670
adds this session container into your

00:44:10,190 --> 00:44:15,320
request so after every middleware later

00:44:13,670 --> 00:44:18,710
on you can then access this session

00:44:15,320 --> 00:44:20,120
container and it does all the stuff for

00:44:18,710 --> 00:44:22,610
you which is kind of nice

00:44:20,120 --> 00:44:24,230
so I'm going to if you've got the code

00:44:22,610 --> 00:44:26,630
you may have already noticed this but

00:44:24,230 --> 00:44:29,330
I'm going to use this to add a counter

00:44:26,630 --> 00:44:31,820
into our responses which kind of

00:44:29,330 --> 00:44:36,680
pointless for an API but hey and it

00:44:31,820 --> 00:44:38,870
relies from cookies uh-huh anyway so

00:44:36,680 --> 00:44:41,990
factory the middleware there's lots of

00:44:38,870 --> 00:44:43,730
code here it's basically a copy and

00:44:41,990 --> 00:44:46,910
paste a bit right it's pretty

00:44:43,730 --> 00:44:52,400
straightforward there's this symmetric

00:44:46,910 --> 00:44:56,000
key written in there but don't hard-code

00:44:52,400 --> 00:44:58,910
that put it into your local dot PHP like

00:44:56,000 --> 00:45:01,130
I kind of explained earlier because you

00:44:58,910 --> 00:45:04,100
want to be able to hide that away and

00:45:01,130 --> 00:45:08,090
not put down get because that's bad also

00:45:04,100 --> 00:45:09,680
note that I've here with secure is false

00:45:08,090 --> 00:45:12,790
I've done that on purpose because I'm

00:45:09,680 --> 00:45:16,640
running this on PHP is built in server

00:45:12,790 --> 00:45:17,810
which is not HTTP and without that it

00:45:16,640 --> 00:45:24,320
won't work it will say well you're not

00:45:17,810 --> 00:45:26,150
on HTTP so good luck so as I said we add

00:45:24,320 --> 00:45:28,490
the the middleware into our pipe

00:45:26,150 --> 00:45:31,370
services are applications pipe

00:45:28,490 --> 00:45:33,050
configuration and you'll see that

00:45:31,370 --> 00:45:34,370
there's a routing middleware dispatch

00:45:33,050 --> 00:45:36,410
middleware those are provided by

00:45:34,370 --> 00:45:39,040
expressive as I mentioned earlier

00:45:36,410 --> 00:45:42,770
we've got a URL helper and some

00:45:39,040 --> 00:45:46,580
authentication but here we've added our

00:45:42,770 --> 00:45:48,560
session middleware so everything after

00:45:46,580 --> 00:45:50,180
that middleware has executed will then

00:45:48,560 --> 00:45:52,010
have access to this session container

00:45:50,180 --> 00:45:56,840
which has been chucked into the request

00:45:52,010 --> 00:46:00,590
attributes and this is how we use it so

00:45:56,840 --> 00:46:03,020
in a further app the middleware further

00:46:00,590 --> 00:46:05,720
down we can say request get attribute

00:46:03,020 --> 00:46:08,960
and it's got this constant that refers

00:46:05,720 --> 00:46:10,310
to the key that is in the attributes we

00:46:08,960 --> 00:46:14,090
can get that session container we can

00:46:10,310 --> 00:46:22,580
call set get remove and so on and that's

00:46:14,090 --> 00:46:24,290
very useful right so to summarize why do

00:46:22,580 --> 00:46:28,190
i do bullet points is kind of annoying

00:46:24,290 --> 00:46:31,430
anyway PS l7 is really what kicked off

00:46:28,190 --> 00:46:34,700
all this stuff and it's really useful to

00:46:31,430 --> 00:46:36,940
be able to model that there you know

00:46:34,700 --> 00:46:39,740
your requests and responses and so on

00:46:36,940 --> 00:46:41,450
the actress is just a PS l7

00:46:39,740 --> 00:46:43,150
implementation it's pretty

00:46:41,450 --> 00:46:45,950
straightforward

00:46:43,150 --> 00:46:48,530
the only complex thing really is the

00:46:45,950 --> 00:46:51,260
serialization and deserialization of

00:46:48,530 --> 00:46:52,970
these requests strategy leti is a

00:46:51,260 --> 00:46:55,070
middleware pipeline thing you can use

00:46:52,970 --> 00:46:56,720
this independently you know you don't

00:46:55,070 --> 00:46:59,660
have to use the whole expressive thing

00:46:56,720 --> 00:47:02,350
if you just want the middleware

00:46:59,660 --> 00:47:04,850
component it's actually kind of useful

00:47:02,350 --> 00:47:09,200
expressive glues it all together it has

00:47:04,850 --> 00:47:11,870
routing the eye and whatnot dr. module

00:47:09,200 --> 00:47:13,130
can be used with that little bit of

00:47:11,870 --> 00:47:14,900
fiddling hopefully that will become

00:47:13,130 --> 00:47:19,160
easier once we have the conflict

00:47:14,900 --> 00:47:21,260
providers in there so I would probably

00:47:19,160 --> 00:47:24,530
say in most use cases use container

00:47:21,260 --> 00:47:27,650
interrupt doctrine because it's easier

00:47:24,530 --> 00:47:29,210
we like easy things the middleware all

00:47:27,650 --> 00:47:32,180
the things right there's lots of

00:47:29,210 --> 00:47:34,460
packages popping up if you search

00:47:32,180 --> 00:47:36,040
packages for middleware you'll probably

00:47:34,460 --> 00:47:38,000
get those and those the results already

00:47:36,040 --> 00:47:40,880
because lots of people are doing things

00:47:38,000 --> 00:47:45,080
and then doing things with middleware

00:47:40,880 --> 00:47:47,360
and as I kind of mentioned getting those

00:47:45,080 --> 00:47:49,150
nice atomic operations is nice because

00:47:47,360 --> 00:47:51,519
you can actually then go and share these

00:47:49,150 --> 00:47:54,519
and avoid having to write the same code

00:47:51,519 --> 00:47:57,460
over and over again so like using PS our

00:47:54,519 --> 00:47:59,259
seventh session or payoffs and things

00:47:57,460 --> 00:48:01,660
like that you're taking your pain away

00:47:59,259 --> 00:48:04,269
from yourself by using code that someone

00:48:01,660 --> 00:48:05,440
else has written and of course we thank

00:48:04,269 --> 00:48:11,259
those people for their time and

00:48:05,440 --> 00:48:22,660
contributions and so on okay is there

00:48:11,259 --> 00:48:26,559
any are there any questions no either I

00:48:22,660 --> 00:48:28,119
explained that terrifically well or and

00:48:26,559 --> 00:48:30,339
I come and speak to me after if you have

00:48:28,119 --> 00:48:32,670
any further questions but thank you very

00:48:30,339 --> 00:48:32,670

YouTube URL: https://www.youtube.com/watch?v=fhUG7JexO7U


