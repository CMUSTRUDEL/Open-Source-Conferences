Title: PHP UK Conference 2017 - Liam Wiltshire - Introduction to application scaling
Publication date: 2017-04-03
Playlist: PHP UK Conference 2017
Description: 
	At one time or another, every developer comes across the same problem - their application starts getting slower, then starts falling over, then isn't available at all. Often, this comes down to too many users, too much stored data - in other words a scaling problem. Looking at a range of options, from horizontal and vertical scaling, to caching, sharding and optimisation, Liam will discuss approaches to scaling that can be used on new applications, and also some that can be retro-fitted to existing applications.
Captions: 
	00:00:09,310 --> 00:00:15,290
cool and good afternoon thanks for

00:00:12,650 --> 00:00:17,600
coming everyone just once start by

00:00:15,290 --> 00:00:19,070
saying really again thanks to the

00:00:17,600 --> 00:00:21,860
conference for having me thanks to you

00:00:19,070 --> 00:00:23,480
guys for come in it's my third year as a

00:00:21,860 --> 00:00:25,640
speaker and I know every single year

00:00:23,480 --> 00:00:27,650
they do a really good job putting on a

00:00:25,640 --> 00:00:29,720
great conference great speakers great

00:00:27,650 --> 00:00:31,940
food so you know thanks to thanks to the

00:00:29,720 --> 00:00:36,830
organizers and the volunteers and

00:00:31,940 --> 00:00:39,140
everyone else so scaling scaling a lot

00:00:36,830 --> 00:00:42,170
of things that I guess we're all kind of

00:00:39,140 --> 00:00:44,149
guilty of ignoring early on it's only

00:00:42,170 --> 00:00:46,630
kind of when the spikes start happening

00:00:44,149 --> 00:00:48,530
when the proverbial hits the fan and

00:00:46,630 --> 00:00:50,809
stuff start getting slower and slower

00:00:48,530 --> 00:00:52,160
and customers grumble more and more and

00:00:50,809 --> 00:00:55,100
then you kind of think yeah I probably

00:00:52,160 --> 00:00:56,890
need to like look at that again there

00:00:55,100 --> 00:01:00,140
are lots of different ways we can scale

00:00:56,890 --> 00:01:02,329
so all this talk really does is it looks

00:01:00,140 --> 00:01:03,710
some the basic approaches some of the

00:01:02,329 --> 00:01:05,660
things that perhaps you can apply to an

00:01:03,710 --> 00:01:09,140
existing application not just things to

00:01:05,660 --> 00:01:11,869
think about the next time you do it so

00:01:09,140 --> 00:01:14,840
my name is Leah Moshe and it says that

00:01:11,869 --> 00:01:21,649
it doesn't

00:01:14,840 --> 00:01:23,170
I love it when this works hard on you

00:01:21,649 --> 00:01:29,299
live when a plan comes together right

00:01:23,170 --> 00:01:32,899
okay no my name is Liam Wilshire in this

00:01:29,299 --> 00:01:34,640
is that and I'm a senior entry developer

00:01:32,899 --> 00:01:36,799
and business manager whatever the crap

00:01:34,640 --> 00:01:39,229
that means for a little company called

00:01:36,799 --> 00:01:42,350
telex so you probably have heard of us I

00:01:39,229 --> 00:01:44,270
hadn't heard of us four months ago but

00:01:42,350 --> 00:01:47,630
we basically do in-game commerce

00:01:44,270 --> 00:01:53,179
platforms for sandbox games like the one

00:01:47,630 --> 00:01:54,549
that doesn't work there we go I leave

00:01:53,179 --> 00:01:58,970
out this fine

00:01:54,549 --> 00:02:00,860
it's minecraft if you don't know so of

00:01:58,970 --> 00:02:03,439
course we had to have at least one Jules

00:02:00,860 --> 00:02:06,110
reference this is the only one so make

00:02:03,439 --> 00:02:07,970
the most of it now scaling incitive is a

00:02:06,110 --> 00:02:10,519
massive topic you know you really would

00:02:07,970 --> 00:02:12,380
need a very big boat to do all the

00:02:10,519 --> 00:02:15,709
hundreds of books and articles and

00:02:12,380 --> 00:02:17,900
podcasts and whatever else so you know

00:02:15,709 --> 00:02:20,299
this is very much an introduction to the

00:02:17,900 --> 00:02:21,769
topics we're not going into huge levels

00:02:20,299 --> 00:02:23,269
of detail on millions of different

00:02:21,769 --> 00:02:26,450
things we couldn't do it in an hour

00:02:23,269 --> 00:02:28,430
anyway what we will look at is some of

00:02:26,450 --> 00:02:31,130
those high level kind of strategies that

00:02:28,430 --> 00:02:32,959
you can go through so we'll look at you

00:02:31,130 --> 00:02:34,100
know why we need to scale in photos what

00:02:32,959 --> 00:02:36,950
are the reasons that you're going to be

00:02:34,100 --> 00:02:38,090
doing this often like I said it's

00:02:36,950 --> 00:02:39,769
because you're already having problems

00:02:38,090 --> 00:02:41,450
so we'll look at some of the things that

00:02:39,769 --> 00:02:43,100
you could do today there's something

00:02:41,450 --> 00:02:46,609
these kind of buy you some time to then

00:02:43,100 --> 00:02:47,750
do the bigger things I guess a lot of

00:02:46,609 --> 00:02:49,579
stuff we're going to look at stuff that

00:02:47,750 --> 00:02:53,359
we at tedx have done on our existing

00:02:49,579 --> 00:02:55,370
platform but also some things the things

00:02:53,359 --> 00:02:57,680
that we're doing on the new products

00:02:55,370 --> 00:02:59,720
that we're currently building things

00:02:57,680 --> 00:03:02,810
that we're going to do better the next

00:02:59,720 --> 00:03:04,579
time around so because a lot of the

00:03:02,810 --> 00:03:06,590
examples that are based on stuff that

00:03:04,579 --> 00:03:08,350
we're doing it's have X I thought it'd

00:03:06,590 --> 00:03:10,519
be useful just to kind of give you a

00:03:08,350 --> 00:03:13,010
vague overview of kind of what our

00:03:10,519 --> 00:03:14,389
platform looks like so this isn't

00:03:13,010 --> 00:03:15,500
talking about kind of what databases we

00:03:14,389 --> 00:03:18,650
have or anything like that this is just

00:03:15,500 --> 00:03:20,359
purely what stuff what things make up

00:03:18,650 --> 00:03:23,330
our platform so it starts off nice and

00:03:20,359 --> 00:03:25,640
simple we have an admin panel okay

00:03:23,330 --> 00:03:26,629
there's written in laravel all of two

00:03:25,640 --> 00:03:28,790
people log into it

00:03:26,629 --> 00:03:31,969
it talks for database

00:03:28,790 --> 00:03:33,560
great fine then we have our custom of

00:03:31,969 --> 00:03:35,359
control panel now this also gets a lot

00:03:33,560 --> 00:03:37,939
of use because all of our customers log

00:03:35,359 --> 00:03:39,920
in and use it it does all the customer

00:03:37,939 --> 00:03:41,450
reporting it's where customers go to set

00:03:39,920 --> 00:03:44,000
up their products that the categories

00:03:41,450 --> 00:03:45,319
integrate their service whatever else so

00:03:44,000 --> 00:03:46,819
it's not just putting data in from the

00:03:45,319 --> 00:03:49,599
database but we use some third-party

00:03:46,819 --> 00:03:53,090
services such as keen to do reporting

00:03:49,599 --> 00:03:57,760
but again you know it can allow it's it

00:03:53,090 --> 00:03:57,760
may define then it gets interesting

00:03:58,480 --> 00:04:03,590
every single customer has one or more

00:04:01,579 --> 00:04:04,519
web stores some customers only have one

00:04:03,590 --> 00:04:07,250
and that's it and they've only got one

00:04:04,519 --> 00:04:09,349
server and some customers have lots and

00:04:07,250 --> 00:04:11,359
lots and lots of watch stores each web

00:04:09,349 --> 00:04:12,769
store is unique to that customer because

00:04:11,359 --> 00:04:14,450
also they have their own products and

00:04:12,769 --> 00:04:16,370
they have their own categories that

00:04:14,450 --> 00:04:18,919
their own content and on the paid plans

00:04:16,370 --> 00:04:22,490
they can also build their own templates

00:04:18,919 --> 00:04:25,310
and themes and whatever else at the

00:04:22,490 --> 00:04:29,110
moment we have just under half a million

00:04:25,310 --> 00:04:32,840
web stores and only it's even more fun

00:04:29,110 --> 00:04:35,750
every web store has at least one

00:04:32,840 --> 00:04:37,280
minecraft server attached to it some of

00:04:35,750 --> 00:04:38,900
them a lot of them only have one but

00:04:37,280 --> 00:04:40,190
again some web stores might have

00:04:38,900 --> 00:04:42,080
multiple minecraft servers if they're

00:04:40,190 --> 00:04:42,620
kind of running clusters and whatever

00:04:42,080 --> 00:04:45,260
else

00:04:42,620 --> 00:04:46,909
so all these webs all these service

00:04:45,260 --> 00:04:50,180
phone home at different intervals

00:04:46,909 --> 00:04:52,099
depending on depending on the package

00:04:50,180 --> 00:04:53,780
they're on some of them find home every

00:04:52,099 --> 00:04:55,639
10 minutes I think up to enterprise that

00:04:53,780 --> 00:04:57,050
phone time every minute and then any any

00:04:55,639 --> 00:04:58,789
packages have been bought the commands

00:04:57,050 --> 00:05:00,199
then get pushed out as part that phone

00:04:58,789 --> 00:05:03,560
home process to be executed on the

00:05:00,199 --> 00:05:05,090
server on top of that you can also buy

00:05:03,560 --> 00:05:06,860
in-game so we've got these web stores

00:05:05,090 --> 00:05:08,870
but as I said before you can buy all the

00:05:06,860 --> 00:05:10,520
packages in-game as well so whenever

00:05:08,870 --> 00:05:12,289
someone types the trash by command

00:05:10,520 --> 00:05:13,880
within minecraft it then has to come and

00:05:12,289 --> 00:05:16,330
fetch the package list and the

00:05:13,880 --> 00:05:19,760
categories and everything else as well

00:05:16,330 --> 00:05:22,820
so yeah that's that gets interesting we

00:05:19,760 --> 00:05:24,800
have someone who's about 550,000

00:05:22,820 --> 00:05:30,830
minecraft servers connecting at the

00:05:24,800 --> 00:05:32,419
moment so yeah it's it's fun so with all

00:05:30,830 --> 00:05:34,220
that stuff what yeah and what are we

00:05:32,419 --> 00:05:36,380
looking at in terms of kind of traffic

00:05:34,220 --> 00:05:39,409
and you know it's not huge it's growing

00:05:36,380 --> 00:05:41,000
but it's it's enough to cause those

00:05:39,409 --> 00:05:44,420
problems like

00:05:41,000 --> 00:05:45,710
so on an average day he will serve round

00:05:44,420 --> 00:05:48,980
about half a million requests an hour

00:05:45,710 --> 00:05:51,800
off the you know a lot of our customers

00:05:48,980 --> 00:05:54,260
are in America so kind of our late

00:05:51,800 --> 00:05:55,370
evening early morning often the

00:05:54,260 --> 00:05:56,930
traffic's a little bit higher and then

00:05:55,370 --> 00:05:59,270
kind of during the day our time

00:05:56,930 --> 00:06:02,000
intensely a little bit lower but yeah on

00:05:59,270 --> 00:06:04,820
an average day toilet half a million we

00:06:02,000 --> 00:06:06,890
do get regular spikes which can be three

00:06:04,820 --> 00:06:09,650
four sometimes five times the traffic

00:06:06,890 --> 00:06:12,500
cut often that around Black Friday Cyber

00:06:09,650 --> 00:06:14,300
Monday or when an enterprise customer

00:06:12,500 --> 00:06:17,650
launches a new product and doesn't tell

00:06:14,300 --> 00:06:19,970
us which happens more or less every week

00:06:17,650 --> 00:06:21,680
and also this is one that surprised me

00:06:19,970 --> 00:06:24,250
it wasn't the biggest spike but just the

00:06:21,680 --> 00:06:27,950
fact that happened I wasn't expecting it

00:06:24,250 --> 00:06:30,320
Christmas Day at one point on Christmas

00:06:27,950 --> 00:06:32,980
Day we served 1.2 million requests in an

00:06:30,320 --> 00:06:36,530
hour and one of our customers made

00:06:32,980 --> 00:06:40,280
$200,000 on Christmas Day I'm in the

00:06:36,530 --> 00:06:41,660
wrong industry so that's kind of our

00:06:40,280 --> 00:06:42,950
normal traffic now on top of that

00:06:41,660 --> 00:06:45,770
something that we've noticed which is

00:06:42,950 --> 00:06:48,590
interesting is that we have this kind of

00:06:45,770 --> 00:06:50,710
continual level of a I call a DOS attack

00:06:48,590 --> 00:06:54,050
it's not really because it doesn't work

00:06:50,710 --> 00:06:55,820
but there's anywhere between kind of

00:06:54,050 --> 00:06:59,210
sixty four hundred thousand requests

00:06:55,820 --> 00:07:02,480
each hour just just junk requests people

00:06:59,210 --> 00:07:05,930
just firing stuff at us basically

00:07:02,480 --> 00:07:08,540
so yeah we collect we we list it in our

00:07:05,930 --> 00:07:10,370
metrics as a dust attack yeah the fact

00:07:08,540 --> 00:07:15,470
it's not denying service means it's kind

00:07:10,370 --> 00:07:17,150
of not but they tried lesson so like I

00:07:15,470 --> 00:07:20,120
said certainly going to look at is why

00:07:17,150 --> 00:07:22,910
do we need scale yeah I'm going to be

00:07:20,120 --> 00:07:25,820
honest if I didn't need to scale and I

00:07:22,910 --> 00:07:27,020
wouldn't do it because yeah why would

00:07:25,820 --> 00:07:29,120
you right

00:07:27,020 --> 00:07:31,100
the reason we have to do it is because

00:07:29,120 --> 00:07:32,600
we become successful because you know we

00:07:31,100 --> 00:07:35,240
built this app and it's wonderful and

00:07:32,600 --> 00:07:36,260
then someone sees it on Twitter or you

00:07:35,240 --> 00:07:38,210
know kind of back when I was like the

00:07:36,260 --> 00:07:39,520
web debit get slash dotted they know

00:07:38,210 --> 00:07:42,590
like this penny more

00:07:39,520 --> 00:07:44,330
no idea and then usefully get some

00:07:42,590 --> 00:07:46,250
traffic and sort of stuff starts to

00:07:44,330 --> 00:07:48,170
build up and we get to a point where

00:07:46,250 --> 00:07:49,220
we're handling too much data we're

00:07:48,170 --> 00:07:51,740
handling too much traffic

00:07:49,220 --> 00:07:53,979
yeah ensure our servers in some way

00:07:51,740 --> 00:07:57,110
shape or form are under too much load

00:07:53,979 --> 00:08:00,860
this normally becomes apparent in kind

00:07:57,110 --> 00:08:02,330
of like three stages so first of all you

00:08:00,860 --> 00:08:04,490
get kind of slowed performance so

00:08:02,330 --> 00:08:06,979
everyone egg ones requests are being

00:08:04,490 --> 00:08:08,630
fulfilled however you know they're

00:08:06,979 --> 00:08:10,099
competing for some resources to happen

00:08:08,630 --> 00:08:11,360
to wait for a connection to free up to

00:08:10,099 --> 00:08:12,800
the database or whatever else so

00:08:11,360 --> 00:08:14,509
everything starts together it's a little

00:08:12,800 --> 00:08:15,979
bit slower and people going well yeah

00:08:14,509 --> 00:08:17,539
I'm getting like I'm getting my request

00:08:15,979 --> 00:08:20,150
and I'm getting this page of requested

00:08:17,539 --> 00:08:21,770
or I can access the reporting but it's

00:08:20,150 --> 00:08:25,430
time to take a little bit longer and

00:08:21,770 --> 00:08:27,949
then you start getting outages so for

00:08:25,430 --> 00:08:29,419
some people it's still fine some people

00:08:27,949 --> 00:08:31,190
can still get on to their dashboard I've

00:08:29,419 --> 00:08:32,630
got on to their web store or are getting

00:08:31,190 --> 00:08:34,729
their commands delivered or whatever

00:08:32,630 --> 00:08:37,880
else but other people starting to see

00:08:34,729 --> 00:08:39,140
some errors hopefully you never get on

00:08:37,880 --> 00:08:41,510
to the last one because you've realize

00:08:39,140 --> 00:08:44,000
what's happening by this point but if it

00:08:41,510 --> 00:08:45,350
goes unchecked for too long this service

00:08:44,000 --> 00:08:47,360
starts thrashing they're run out of RAM

00:08:45,350 --> 00:08:48,830
and your processor goes ok I'm going to

00:08:47,360 --> 00:08:52,339
kill the thing with this using the most

00:08:48,830 --> 00:08:53,930
resources goodbye my sequel it's not a

00:08:52,339 --> 00:08:57,260
good place to be when you get a phone

00:08:53,930 --> 00:08:59,810
call you know 11 p.m. going everything's

00:08:57,260 --> 00:09:01,579
gone yeah you don't be doing that let's

00:08:59,810 --> 00:09:06,320
let's try and sort it before we get to

00:09:01,579 --> 00:09:08,360
that point so God said if you've got to

00:09:06,320 --> 00:09:10,100
the point where you've started to see

00:09:08,360 --> 00:09:12,020
this stuff you probably need some kind

00:09:10,100 --> 00:09:14,839
of quick fixes to buy yourself some time

00:09:12,020 --> 00:09:18,260
right so let's look at some of those

00:09:14,839 --> 00:09:21,020
first steps the first thing you can do

00:09:18,260 --> 00:09:22,910
is what we call separation of concerns

00:09:21,020 --> 00:09:25,040
now I'll kind of see some heads nodding

00:09:22,910 --> 00:09:27,050
anyways of the onion for a lot of you

00:09:25,040 --> 00:09:28,250
guys which probably isn't new but yeah

00:09:27,050 --> 00:09:30,020
we've all done let's be honest two's

00:09:28,250 --> 00:09:31,940
built an application before it's been

00:09:30,020 --> 00:09:34,520
wonderful but they've got one server and

00:09:31,940 --> 00:09:36,500
it's running Apache or nginx and it's

00:09:34,520 --> 00:09:42,950
running my sequel and is running ready

00:09:36,500 --> 00:09:45,320
on one box yeah with you we've all done

00:09:42,950 --> 00:09:47,570
it and that's that's okay that's a

00:09:45,320 --> 00:09:49,130
perfectly legitimate way to start but

00:09:47,570 --> 00:09:52,370
actually being able to split some of

00:09:49,130 --> 00:09:54,140
those things up means that a you can't

00:09:52,370 --> 00:09:55,190
levitate resources where it's needed so

00:09:54,140 --> 00:09:57,680
actually if you're looking all actually

00:09:55,190 --> 00:10:00,140
mines my databases is struggling but my

00:09:57,680 --> 00:10:01,490
you know web node is fine you can split

00:10:00,140 --> 00:10:03,589
onto two you can throw some more

00:10:01,490 --> 00:10:05,029
resources that you database pair back on

00:10:03,589 --> 00:10:06,829
what's been given to the web node and

00:10:05,029 --> 00:10:07,230
again you've bought yourself a little

00:10:06,829 --> 00:10:10,380
bit

00:10:07,230 --> 00:10:11,580
it means that you can scale the parts of

00:10:10,380 --> 00:10:13,040
the application that actually need it

00:10:11,580 --> 00:10:15,980
not just throwing metal at everything

00:10:13,040 --> 00:10:19,260
because that's always the money

00:10:15,980 --> 00:10:21,780
the other thing means that if if God

00:10:19,260 --> 00:10:24,150
forbid something does go down it doesn't

00:10:21,780 --> 00:10:26,130
take everything else with it before I

00:10:24,150 --> 00:10:30,510
was working at TEDx III for my sins

00:10:26,130 --> 00:10:35,030
works at a Magento shop I know I'm sorry

00:10:30,510 --> 00:10:38,630
and we had a particular customer where

00:10:35,030 --> 00:10:42,120
every 13 minutes passed every four hours

00:10:38,630 --> 00:10:44,160
the site would just go really slow and

00:10:42,120 --> 00:10:45,510
exactly 13 minutes past so it was 30

00:10:44,160 --> 00:10:46,800
minutes past four thirty minutes past

00:10:45,510 --> 00:10:50,910
eight thirty minutes past or whatever

00:10:46,800 --> 00:10:53,010
and the reason for it we found after

00:10:50,910 --> 00:10:55,580
we're about 10 seconds because it was a

00:10:53,010 --> 00:10:58,110
very specific time was that there was a

00:10:55,580 --> 00:11:00,570
basically a scheduled task a contest

00:10:58,110 --> 00:11:03,600
that ran every four hours because their

00:11:00,570 --> 00:11:08,970
back office system kinda gave us always

00:11:03,600 --> 00:11:10,110
data in XML and and lots of it so you

00:11:08,970 --> 00:11:12,000
know they had their products that was

00:11:10,110 --> 00:11:13,650
fine but it wouldn't say the colors red

00:11:12,000 --> 00:11:15,060
it had a color code so something like

00:11:13,650 --> 00:11:17,100
red it was fine difficult red was red

00:11:15,060 --> 00:11:18,210
you could kind of guess what it was but

00:11:17,100 --> 00:11:20,190
they wouldn't tell us when they were

00:11:18,210 --> 00:11:22,740
creating new ones so one day you'd get

00:11:20,190 --> 00:11:24,990
one that you know the coal bed was BL WH

00:11:22,740 --> 00:11:26,880
which is black and white we obviously

00:11:24,990 --> 00:11:30,150
right but it there meant so we had to

00:11:26,880 --> 00:11:31,530
then fetch the color XML file to work

00:11:30,150 --> 00:11:32,850
out which ones which I'll do we had the

00:11:31,530 --> 00:11:35,010
ones that we knew about we had stored

00:11:32,850 --> 00:11:38,580
but we had to search that XML file as

00:11:35,010 --> 00:11:41,640
well and sizes and washing instructions

00:11:38,580 --> 00:11:44,610
and what happens if you give it to your

00:11:41,640 --> 00:11:46,400
gran on a Tuesday whatever so there's a

00:11:44,610 --> 00:11:50,070
lot of stuff and it meant that this

00:11:46,400 --> 00:11:53,040
process was burning through four and a

00:11:50,070 --> 00:11:56,640
half years of RAM which is why

00:11:53,040 --> 00:11:58,200
everything else stopped it wasn't

00:11:56,640 --> 00:12:03,690
actually like making a problem to the

00:11:58,200 --> 00:12:04,680
database it wasn't you know crashing the

00:12:03,690 --> 00:12:07,200
database and I thought it was just

00:12:04,680 --> 00:12:09,330
burning through resources so obviously

00:12:07,200 --> 00:12:10,710
it needed to be optimizing we need to do

00:12:09,330 --> 00:12:11,850
a better job of building it but that was

00:12:10,710 --> 00:12:13,830
that was going to take some time so

00:12:11,850 --> 00:12:18,240
whatever there's a short-term solution

00:12:13,830 --> 00:12:20,470
went to Linux got a full gig virtual

00:12:18,240 --> 00:12:22,240
server from Windows it cost like 20

00:12:20,470 --> 00:12:23,950
a month or something stuck it on there

00:12:22,240 --> 00:12:25,210
and that run away happily and the rest

00:12:23,950 --> 00:12:27,250
of website was fine and and it gave us

00:12:25,210 --> 00:12:30,340
the time it bought us that time to then

00:12:27,250 --> 00:12:36,250
do a proper job of fixing that's correct

00:12:30,340 --> 00:12:38,020
and this is the same thing of course it

00:12:36,250 --> 00:12:39,490
doesn't just have to be kind of web and

00:12:38,020 --> 00:12:42,160
D being things like that if you've got

00:12:39,490 --> 00:12:43,750
different parts your system so like I

00:12:42,160 --> 00:12:45,850
said before we've got web stores and

00:12:43,750 --> 00:12:47,740
we've got the admin panel and we've got

00:12:45,850 --> 00:12:49,450
the control panel think about you know

00:12:47,740 --> 00:12:51,820
splitting know that so you know have a

00:12:49,450 --> 00:12:53,260
separate platform for your web panel

00:12:51,820 --> 00:12:56,200
have a sub scrap form for your server

00:12:53,260 --> 00:12:57,430
command delivery network whatever that's

00:12:56,200 --> 00:12:58,540
one thing we can do with our current one

00:12:57,430 --> 00:13:00,310
but that is things that we've kind of

00:12:58,540 --> 00:13:01,870
looked at and gone yeah we really should

00:13:00,310 --> 00:13:08,920
have done that so that's what we're

00:13:01,870 --> 00:13:11,470
going to do next time around next thing

00:13:08,920 --> 00:13:13,240
you can look at is optimization now you

00:13:11,470 --> 00:13:15,550
might argue are with us optimization

00:13:13,240 --> 00:13:18,220
it's not really scaling but if you're

00:13:15,550 --> 00:13:21,600
saying well scaling is being able to

00:13:18,220 --> 00:13:24,340
serve more requests but it kind of is

00:13:21,600 --> 00:13:27,130
the thing you need to do here is look at

00:13:24,340 --> 00:13:28,570
what is using up your resources so use

00:13:27,130 --> 00:13:31,270
something like New Relic New Relic I

00:13:28,570 --> 00:13:32,830
think is brilliant you know if if New

00:13:31,270 --> 00:13:34,150
Relic could pay me to run around the

00:13:32,830 --> 00:13:36,640
country saying how wonderful it was I

00:13:34,150 --> 00:13:39,130
would probably do it even if it was

00:13:36,640 --> 00:13:40,750
naked or something I don't know but you

00:13:39,130 --> 00:13:42,790
know Newark is awesome you slow carry

00:13:40,750 --> 00:13:45,700
logs in my feet call they're all good

00:13:42,790 --> 00:13:48,040
things consider what is burning those

00:13:45,700 --> 00:13:49,210
resources like I said because you might

00:13:48,040 --> 00:13:51,100
have something you might have a query

00:13:49,210 --> 00:13:53,020
for example but it takes 40 seconds to

00:13:51,100 --> 00:13:56,320
run but if you're running it once a day

00:13:53,020 --> 00:13:57,610
when the server is quiet yes you could

00:13:56,320 --> 00:14:00,220
probably get around look at it at some

00:13:57,610 --> 00:14:02,020
point but it's problem but if you've got

00:14:00,220 --> 00:14:04,090
a query that's taking half a second to

00:14:02,020 --> 00:14:07,690
run but you're running it 20 times a

00:14:04,090 --> 00:14:09,040
second then you're probably screwed and

00:14:07,690 --> 00:14:11,230
that's the one so that's what you know

00:14:09,040 --> 00:14:13,000
even though the individual time is less

00:14:11,230 --> 00:14:14,050
add it all together that's what's

00:14:13,000 --> 00:14:16,810
causing the problems that's what we

00:14:14,050 --> 00:14:18,430
focused our efforts on first so yeah

00:14:16,810 --> 00:14:21,190
look at that and tackle the common

00:14:18,430 --> 00:14:24,040
bottlenecks an interesting kind of

00:14:21,190 --> 00:14:25,180
example of this as hopefully you know

00:14:24,040 --> 00:14:25,720
some of you guys have heard of dam plus

00:14:25,180 --> 00:14:27,160
one issue

00:14:25,720 --> 00:14:30,520
I've seen some nodding heads and some

00:14:27,160 --> 00:14:32,200
rice smiles awesome so the n plus one

00:14:30,520 --> 00:14:33,410
issue is something that's common

00:14:32,200 --> 00:14:36,439
if you're using an R

00:14:33,410 --> 00:14:39,889
because an orm will say I've got this

00:14:36,439 --> 00:14:41,419
this model and I want to relate it to

00:14:39,889 --> 00:14:43,129
this other model and his relationship

00:14:41,419 --> 00:14:45,049
and and then it will give you a way to

00:14:43,129 --> 00:14:46,399
access that relationship which makes

00:14:45,049 --> 00:14:47,779
life brilliant when you're writing code

00:14:46,399 --> 00:14:49,339
because you can just do all this stuff

00:14:47,779 --> 00:14:55,489
and not really have to think about it

00:14:49,339 --> 00:14:56,839
until you do so with sixteen slides in

00:14:55,489 --> 00:14:57,409
them where it's going to look at some

00:14:56,839 --> 00:15:00,369
code

00:14:57,409 --> 00:15:03,529
it's a PHP conference with code people

00:15:00,369 --> 00:15:05,869
yeah it's for lives it's not good it

00:15:03,529 --> 00:15:08,389
doesn't get any better from here so this

00:15:05,869 --> 00:15:09,739
is a good example that we're you know

00:15:08,389 --> 00:15:12,319
we're grabbing some uses for which the

00:15:09,739 --> 00:15:15,289
Shimon we've got a table or user table

00:15:12,319 --> 00:15:17,449
and we've got users by company so there

00:15:15,289 --> 00:15:18,979
should be a space off to the comma so

00:15:17,449 --> 00:15:20,809
we're getting the users where the

00:15:18,979 --> 00:15:22,849
company dream Lee an ideal simple

00:15:20,809 --> 00:15:25,159
Vindicator is five and Weavin grab that

00:15:22,849 --> 00:15:27,229
and then in our view so this is probably

00:15:25,159 --> 00:15:29,389
on a separate receptor file some

00:15:27,229 --> 00:15:31,699
front-end genius go I want to show the

00:15:29,389 --> 00:15:33,499
UM the name of the department so I know

00:15:31,699 --> 00:15:38,119
I can grab the related department and I

00:15:33,499 --> 00:15:42,259
can grab the name so far so good except

00:15:38,119 --> 00:15:44,839
the way that that works is for each user

00:15:42,259 --> 00:15:46,699
is going to do another database query to

00:15:44,839 --> 00:15:49,039
fetch the department so if you've got

00:15:46,699 --> 00:15:52,339
six users probably not a problem right

00:15:49,039 --> 00:15:54,529
if you've got a thousand users or 5,000

00:15:52,339 --> 00:15:56,959
users I'm probably be knocking on your

00:15:54,529 --> 00:15:59,299
door you know wouldn't with a torch and

00:15:56,959 --> 00:16:02,569
picked four-pitch walk or something it's

00:15:59,299 --> 00:16:04,720
a lot of queries it gets worse if you

00:16:02,569 --> 00:16:07,249
remember I said to are kind of paid

00:16:04,720 --> 00:16:08,119
plans they can build their own templates

00:16:07,249 --> 00:16:10,939
that are in quick

00:16:08,119 --> 00:16:12,470
so yeah this happens so now someone's

00:16:10,939 --> 00:16:14,209
going to actually now I want to know the

00:16:12,470 --> 00:16:17,179
supervisor of the Department of the user

00:16:14,209 --> 00:16:19,819
so now you're going to have a query to

00:16:17,179 --> 00:16:21,350
get the department now eloquent it's

00:16:19,819 --> 00:16:22,489
clever it will crash the department it

00:16:21,350 --> 00:16:24,439
knows you've got the department so the

00:16:22,489 --> 00:16:25,879
second time it doesn't need to do it but

00:16:24,439 --> 00:16:28,399
it does need to do another query to get

00:16:25,879 --> 00:16:30,339
the supervisor so you've now got 5,000

00:16:28,399 --> 00:16:32,509
users so you did one create the user

00:16:30,339 --> 00:16:34,429
5,000 crews to get the department and

00:16:32,509 --> 00:16:36,499
5,000 prints to get the supervisors I've

00:16:34,429 --> 00:16:37,159
just done ten thousand and one 10,000

00:16:36,499 --> 00:16:43,279
one queries

00:16:37,159 --> 00:16:45,199
happy days yeah so what you were doing

00:16:43,279 --> 00:16:47,060
in ideal world is you'd go well no I

00:16:45,199 --> 00:16:49,850
know what these relationships are

00:16:47,060 --> 00:16:51,410
and most RMS will give you a way to Iike

00:16:49,850 --> 00:16:53,290
load them so you can say when you get

00:16:51,410 --> 00:16:55,460
your collection well I want you to load

00:16:53,290 --> 00:16:57,260
the term and I want you to load the

00:16:55,460 --> 00:16:58,970
department supervisors and then what I

00:16:57,260 --> 00:17:00,860
do is it will do one query with a load

00:16:58,970 --> 00:17:04,130
of IDs and inflation all you want go

00:17:00,860 --> 00:17:05,270
nice and efficient except it changes

00:17:04,130 --> 00:17:07,280
over time so someone will add a

00:17:05,270 --> 00:17:10,640
relationship in and probably not tell

00:17:07,280 --> 00:17:11,870
you that happens all the time or equally

00:17:10,640 --> 00:17:13,730
you had a relationship that you were

00:17:11,870 --> 00:17:15,230
using and then someone changes the view

00:17:13,730 --> 00:17:16,400
so you no longer need it but you're now

00:17:15,230 --> 00:17:21,050
still loading that you running that

00:17:16,400 --> 00:17:22,490
query anyway so what we did rather than

00:17:21,050 --> 00:17:24,530
trying to go through our entire code

00:17:22,490 --> 00:17:27,950
base and find them all which would have

00:17:24,530 --> 00:17:30,620
taken a little while is we wrote an

00:17:27,950 --> 00:17:32,930
extension to the eloquent model and what

00:17:30,620 --> 00:17:35,300
it basically does is it checks if the

00:17:32,930 --> 00:17:36,650
model is part of a collection it's a

00:17:35,300 --> 00:17:39,110
child of a collection which in itself

00:17:36,650 --> 00:17:42,170
Laurel doesn't let you do so I had to

00:17:39,110 --> 00:17:43,250
add that too but if it is if it's part

00:17:42,170 --> 00:17:44,990
of a collection and you ask for a

00:17:43,250 --> 00:17:46,370
relationship rather than just loading

00:17:44,990 --> 00:17:47,840
that one it loads it on the whole

00:17:46,370 --> 00:17:50,450
collection so again it goes back to

00:17:47,840 --> 00:17:52,670
doing that one query it was actually

00:17:50,450 --> 00:17:54,880
fairly straightforward to do I did on

00:17:52,670 --> 00:17:57,290
the flight back from from Canada and

00:17:54,880 --> 00:17:58,790
there's also some extra proud to assign

00:17:57,290 --> 00:18:01,640
it to a collection so this parent

00:17:58,790 --> 00:18:03,710
collection isn't in laravel by default

00:18:01,640 --> 00:18:05,780
but at some we added a check that it's

00:18:03,710 --> 00:18:07,670
in there and if it isn't a collection it

00:18:05,780 --> 00:18:10,970
actually loads the relationship on the

00:18:07,670 --> 00:18:12,440
collection not on the model instantly we

00:18:10,970 --> 00:18:19,040
cut the number of queries we were

00:18:12,440 --> 00:18:21,170
running by about 70% so we've done some

00:18:19,040 --> 00:18:23,390
you know some quick fixes things that

00:18:21,170 --> 00:18:25,010
you could go away and apply you've kind

00:18:23,390 --> 00:18:26,570
of stopped people from trying to hammer

00:18:25,010 --> 00:18:30,440
your door down you voice off a little

00:18:26,570 --> 00:18:32,600
little bit of breathing space good so

00:18:30,440 --> 00:18:35,510
what can we do now because this is

00:18:32,600 --> 00:18:37,970
really only a temporary fix you know

00:18:35,510 --> 00:18:40,670
there's there's obviously much many more

00:18:37,970 --> 00:18:44,180
things that we can do to fix it

00:18:40,670 --> 00:18:46,280
longer-term so one of the things you're

00:18:44,180 --> 00:18:50,090
probably looked at is Hardware scaling

00:18:46,280 --> 00:18:53,990
now Hardware scaling can be very

00:18:50,090 --> 00:18:55,670
straightforward honest again yeah but

00:18:53,990 --> 00:18:58,310
you just need to kind of think about it

00:18:55,670 --> 00:19:00,610
and plan it out before you kind of dive

00:18:58,310 --> 00:19:03,860
in with both feet

00:19:00,610 --> 00:19:08,000
again as we said before what's the thing

00:19:03,860 --> 00:19:09,410
that needs to scale if you've got a web

00:19:08,000 --> 00:19:10,940
note that looks like it's running slow

00:19:09,410 --> 00:19:14,000
is it actually the web node that's

00:19:10,940 --> 00:19:15,590
running slow or is it that it's waiting

00:19:14,000 --> 00:19:16,430
for the database and it's making it look

00:19:15,590 --> 00:19:18,590
like it's running slow

00:19:16,430 --> 00:19:20,780
you need to again go back to Miller New

00:19:18,590 --> 00:19:22,220
Relic and work out where the bottlenecks

00:19:20,780 --> 00:19:24,260
up because if you if it's actually the

00:19:22,220 --> 00:19:25,940
divi that's going slow you can throw as

00:19:24,260 --> 00:19:27,620
much metal as you want at the web node

00:19:25,940 --> 00:19:30,950
and it's not gonna make a just a

00:19:27,620 --> 00:19:32,810
difference so just often it will be the

00:19:30,950 --> 00:19:33,740
database that tends to be the thing that

00:19:32,810 --> 00:19:37,580
gives up first

00:19:33,740 --> 00:19:40,370
not always but most of the time but just

00:19:37,580 --> 00:19:42,470
make sure you are scaling the great

00:19:40,370 --> 00:19:44,660
thing so it's nice I'm going to look at

00:19:42,470 --> 00:19:48,920
is vertical scaling now vertical scaling

00:19:44,660 --> 00:19:50,780
is really really easy basically it just

00:19:48,920 --> 00:19:52,940
means a bigger server so you've got two

00:19:50,780 --> 00:19:55,490
services this big you get a server

00:19:52,940 --> 00:19:56,630
that's this big and certain if you're

00:19:55,490 --> 00:19:59,410
using cloud infrastructure that's

00:19:56,630 --> 00:20:02,990
normally takes of going done

00:19:59,410 --> 00:20:04,940
straightforward yeah it's pretty much

00:20:02,990 --> 00:20:08,300
one way transaction is if you've scaled

00:20:04,940 --> 00:20:09,380
up it it is possible to scale down but

00:20:08,300 --> 00:20:11,090
you don't really want to be sitting

00:20:09,380 --> 00:20:12,620
there going oh it suddenly got busy

00:20:11,090 --> 00:20:14,210
let's scale up again oh it's quite again

00:20:12,620 --> 00:20:14,690
let's go down it's going to once you've

00:20:14,210 --> 00:20:16,220
done it

00:20:14,690 --> 00:20:19,340
you're kind of more or less accepting

00:20:16,220 --> 00:20:23,090
that's it unless I guess you have like

00:20:19,340 --> 00:20:24,140
long long Peaks so if you know you're

00:20:23,090 --> 00:20:26,150
busy throughout November and December

00:20:24,140 --> 00:20:28,040
you might then go well we'll give it

00:20:26,150 --> 00:20:29,480
some more results as now and then turn

00:20:28,040 --> 00:20:30,830
it off for the rest of the year okay

00:20:29,480 --> 00:20:32,300
maybe you could do that but if you've

00:20:30,830 --> 00:20:36,680
got kind of daily peaks and troughs

00:20:32,300 --> 00:20:39,020
that's not going to work a single server

00:20:36,680 --> 00:20:41,330
is still a point of failure so if you've

00:20:39,020 --> 00:20:43,220
got one web server doesn't matter how

00:20:41,330 --> 00:20:45,610
much was all super asset if it goes down

00:20:43,220 --> 00:20:50,720
that's it you've gotten over Dunton see

00:20:45,610 --> 00:20:54,020
so it works it's a quick fix but it has

00:20:50,720 --> 00:20:55,280
a lot of kind of downside so things that

00:20:54,020 --> 00:20:57,080
you're more likely to look at is

00:20:55,280 --> 00:20:58,220
horizontal scaling so what that

00:20:57,080 --> 00:20:59,870
basically means is rather than get

00:20:58,220 --> 00:21:02,140
making a server bigger you just have

00:20:59,870 --> 00:21:06,650
more servers and you spread the load out

00:21:02,140 --> 00:21:09,350
that's what we're doing at TEDx so you

00:21:06,650 --> 00:21:11,540
know we have a horizontal cluster of

00:21:09,350 --> 00:21:12,690
servers for web we have a separate

00:21:11,540 --> 00:21:16,380
horizontal

00:21:12,690 --> 00:21:19,680
cluster observers for database got to

00:21:16,380 --> 00:21:22,740
Redis servers that work in parallel and

00:21:19,680 --> 00:21:24,600
yeah so that's what we do we're going to

00:21:22,740 --> 00:21:26,670
look at horizontal scaling of Web

00:21:24,600 --> 00:21:29,760
Services first which means you know

00:21:26,670 --> 00:21:31,950
there's a brilliant story coming up but

00:21:29,760 --> 00:21:33,390
yeah it again as long as you put a load

00:21:31,950 --> 00:21:35,550
balancer in so you can distribute out

00:21:33,390 --> 00:21:37,020
traffic scaling out web snows

00:21:35,550 --> 00:21:38,820
horizontally is not too difficult the

00:21:37,020 --> 00:21:41,190
only thing you might have to consider is

00:21:38,820 --> 00:21:43,320
if your application is doing things like

00:21:41,190 --> 00:21:44,700
storing to the file system so if you're

00:21:43,320 --> 00:21:46,260
uploading images and store them to file

00:21:44,700 --> 00:21:47,610
system and then you scale out

00:21:46,260 --> 00:21:49,590
horizontally you'll upload them to

00:21:47,610 --> 00:21:52,890
server a you'll be on server bingo

00:21:49,590 --> 00:21:55,230
where's Manges but that that's get fell

00:21:52,890 --> 00:21:57,660
easily fixable I don't learn forestry

00:21:55,230 --> 00:21:59,880
instead or upload them to a shared mass

00:21:57,660 --> 00:22:01,740
drive or you know there's lots of ways

00:21:59,880 --> 00:22:03,000
you can get around that likewise if

00:22:01,740 --> 00:22:05,430
you're storing your sessions on the file

00:22:03,000 --> 00:22:08,340
system that doesn't work so stick doing

00:22:05,430 --> 00:22:11,100
ready but apart from that you can then

00:22:08,340 --> 00:22:12,540
add them as and remove nodes and it

00:22:11,100 --> 00:22:15,240
makes it redundant if you've got to take

00:22:12,540 --> 00:22:16,230
three web notes and one drops off yes

00:22:15,240 --> 00:22:18,060
the other two are gonna have to work

00:22:16,230 --> 00:22:19,920
harder but it's not just complete back

00:22:18,060 --> 00:22:21,360
out and they will probably not hopefully

00:22:19,920 --> 00:22:22,980
they'll carry on you know struggling

00:22:21,360 --> 00:22:26,730
along and so you can bring another node

00:22:22,980 --> 00:22:28,710
back up and all dorias restored so it

00:22:26,730 --> 00:22:30,810
brought looks saying like this I would

00:22:28,710 --> 00:22:32,190
say you've got to load balances we just

00:22:30,810 --> 00:22:33,960
use paycheck proxy but actually if

00:22:32,190 --> 00:22:35,250
you're using my AWS in fact even

00:22:33,960 --> 00:22:36,780
distillation I've gotten emails the

00:22:35,250 --> 00:22:38,760
other day I think they're now doing

00:22:36,780 --> 00:22:42,210
manage load balancers so we take them

00:22:38,760 --> 00:22:43,650
have many years and then that then

00:22:42,210 --> 00:22:45,360
distributes the traffic between your

00:22:43,650 --> 00:22:47,100
nodes so it'll check that they're

00:22:45,360 --> 00:22:48,300
healthy and you'll go there's a request

00:22:47,100 --> 00:22:50,190
for you there's a request for you

00:22:48,300 --> 00:22:54,290
there's a request for you and it keeps

00:22:50,190 --> 00:22:58,980
going in everything is good in the world

00:22:54,290 --> 00:23:02,760
databases we love databases scaling

00:22:58,980 --> 00:23:07,110
databases to put it nicely so that's

00:23:02,760 --> 00:23:08,550
quite hard to do well well I was doing

00:23:07,110 --> 00:23:09,810
some research for this talk there's

00:23:08,550 --> 00:23:12,840
actually the blog post I came across

00:23:09,810 --> 00:23:16,110
where the title is relational DBS are

00:23:12,840 --> 00:23:17,610
not designed to scale so great thanks

00:23:16,110 --> 00:23:20,610
for that that's basically I'm going to

00:23:17,610 --> 00:23:24,180
go home now then there are a few ways to

00:23:20,610 --> 00:23:26,720
go about it and the two common ones as

00:23:24,180 --> 00:23:29,029
it says there are sharding and replicas

00:23:26,720 --> 00:23:31,700
but whatever you do that tends to be

00:23:29,029 --> 00:23:33,260
compromises as I said I'm not going to

00:23:31,700 --> 00:23:35,149
too much detail so this is a very brief

00:23:33,260 --> 00:23:37,190
introduction to sharding mainly because

00:23:35,149 --> 00:23:38,299
if you don't all do know what charting

00:23:37,190 --> 00:23:39,769
is and therefore don't have a huge

00:23:38,299 --> 00:23:41,110
engineering department you shouldn't be

00:23:39,769 --> 00:23:43,700
doing it

00:23:41,110 --> 00:23:46,070
you know if your Google your Facebook or

00:23:43,700 --> 00:23:46,460
you know some knows whatever else oh

00:23:46,070 --> 00:23:48,200
great

00:23:46,460 --> 00:23:51,549
go ahead and do it if there's four

00:23:48,200 --> 00:23:54,529
developers you're going to break stuff

00:23:51,549 --> 00:23:56,960
what sharding basically does is you have

00:23:54,529 --> 00:23:59,659
many databases but each database only

00:23:56,960 --> 00:24:00,799
has some of the data so you first will

00:23:59,659 --> 00:24:02,539
have to say right well how we're going

00:24:00,799 --> 00:24:05,299
to split the state up and people will go

00:24:02,539 --> 00:24:06,649
I know I'll do it by date so stuff that

00:24:05,299 --> 00:24:08,330
gets added this year yesterday new

00:24:06,649 --> 00:24:09,710
database and stuff I guess I did the

00:24:08,330 --> 00:24:12,649
next year is that in that database

00:24:09,710 --> 00:24:14,690
based on on they when they were added

00:24:12,649 --> 00:24:18,169
that can do that and that's fine but so

00:24:14,690 --> 00:24:20,870
you've got a customer who joined in 2014

00:24:18,169 --> 00:24:23,450
so since 2014 database but now he's

00:24:20,870 --> 00:24:24,769
adding some new products in 2017 what

00:24:23,450 --> 00:24:26,720
database you put those products in

00:24:24,769 --> 00:24:28,880
because if you put them in the 2017

00:24:26,720 --> 00:24:31,279
database you're then having to do cross

00:24:28,880 --> 00:24:32,659
database queries to get the user and the

00:24:31,279 --> 00:24:33,409
products and they might still have some

00:24:32,659 --> 00:24:35,779
products that are in a different

00:24:33,409 --> 00:24:37,279
database and and the categories might be

00:24:35,779 --> 00:24:40,669
in another database and it's not going

00:24:37,279 --> 00:24:43,730
to work or so you go okay now so I'll do

00:24:40,669 --> 00:24:45,470
it based on the users ID so so the user

00:24:43,730 --> 00:24:49,460
ID and all their stuff gets put in that

00:24:45,470 --> 00:24:50,899
same that same chart okay but what if

00:24:49,460 --> 00:24:52,130
you've got a use of the house or an

00:24:50,899 --> 00:24:54,860
account that has multiple team members

00:24:52,130 --> 00:24:57,049
and one of their team members has an ID

00:24:54,860 --> 00:24:58,610
of ten so it's in the first partition or

00:24:57,049 --> 00:25:00,470
one of the users has a partition of an

00:24:58,610 --> 00:25:02,330
idea of four thousand so it's in a later

00:25:00,470 --> 00:25:04,519
partition so now you're still doing this

00:25:02,330 --> 00:25:06,799
so I think the point I'm making is that

00:25:04,519 --> 00:25:09,980
coming up with a effective sharding

00:25:06,799 --> 00:25:13,789
system is really difficult I've never

00:25:09,980 --> 00:25:15,440
done it I wouldn't try to do it so yeah

00:25:13,789 --> 00:25:18,110
it is possible and if you've exhausted

00:25:15,440 --> 00:25:19,370
all other options then pay a consultant

00:25:18,110 --> 00:25:23,059
a shed load of money and they'll come

00:25:19,370 --> 00:25:24,370
and do it for you but yeah I would stay

00:25:23,059 --> 00:25:27,559
away from it as much as possible

00:25:24,370 --> 00:25:30,529
replication now this is a bit more

00:25:27,559 --> 00:25:32,840
straightforward on replication every

00:25:30,529 --> 00:25:35,630
database has a complete copy of all the

00:25:32,840 --> 00:25:36,950
data so it means that you can query any

00:25:35,630 --> 00:25:38,929
of the database instances it doesn't

00:25:36,950 --> 00:25:40,130
matter whether it's expose all dates pay

00:25:38,929 --> 00:25:41,780
is dead

00:25:40,130 --> 00:25:47,420
and you'll get the same data out of it

00:25:41,780 --> 00:25:50,270
in theory when we talk about replication

00:25:47,420 --> 00:25:52,640
we normally talk about master/slave so

00:25:50,270 --> 00:25:54,830
what this means is you have a database

00:25:52,640 --> 00:25:56,900
that is the master and all the writes

00:25:54,830 --> 00:25:58,370
get sent to that database so anytime

00:25:56,900 --> 00:26:01,040
you're doing an insert or an update or

00:25:58,370 --> 00:26:05,710
delete it gets sent to your master xox

00:26:01,040 --> 00:26:08,420
then as those those changes are then

00:26:05,710 --> 00:26:10,520
replicated across your infrastructure to

00:26:08,420 --> 00:26:12,440
all the slave databases so they all then

00:26:10,520 --> 00:26:16,100
get up-to-date normally this happens

00:26:12,440 --> 00:26:20,540
quickly within 10 milliseconds or so but

00:26:16,100 --> 00:26:24,920
not all we had I think at one point we

00:26:20,540 --> 00:26:27,020
had a lag of about 40 seconds wasn't a

00:26:24,920 --> 00:26:28,430
good day with their men you know that

00:26:27,020 --> 00:26:29,990
common scene where you do an insert you

00:26:28,430 --> 00:26:31,640
get an insert ID back and then you

00:26:29,990 --> 00:26:34,190
redirect them to slash use the flash ID

00:26:31,640 --> 00:26:35,270
no data because there's now one for

00:26:34,190 --> 00:26:37,430
different nodes that doesn't have that

00:26:35,270 --> 00:26:39,950
data and it all falls over that's

00:26:37,430 --> 00:26:43,970
obviously workaround able type of word

00:26:39,950 --> 00:26:45,890
you get around that by you know holding

00:26:43,970 --> 00:26:48,020
that data or cashing it or whatever so

00:26:45,890 --> 00:26:50,000
again there are ways to fix that you

00:26:48,020 --> 00:26:53,780
just have to consider those things as

00:26:50,000 --> 00:26:57,770
you're kind of building your application

00:26:53,780 --> 00:27:00,500
in however you've probably noticed that

00:26:57,770 --> 00:27:02,210
you still only got one master so you've

00:27:00,500 --> 00:27:04,070
only got one point you can write to if

00:27:02,210 --> 00:27:06,710
you've got a read heavy application like

00:27:04,070 --> 00:27:08,090
a Magento webstore then it's not a

00:27:06,710 --> 00:27:10,340
problem that's that's not an issue

00:27:08,090 --> 00:27:12,920
because you're doing mostly reads anyway

00:27:10,340 --> 00:27:15,560
but if you've got a write heavier write

00:27:12,920 --> 00:27:18,200
heavy application like we do that still

00:27:15,560 --> 00:27:22,600
doesn't really solve your problems so we

00:27:18,200 --> 00:27:25,850
want to master master replication yeah

00:27:22,600 --> 00:27:28,790
this is going to be good wait we did

00:27:25,850 --> 00:27:30,830
some research well yes Galera yes that's

00:27:28,790 --> 00:27:33,080
definitely what we want to do and what

00:27:30,830 --> 00:27:35,870
that does is I think it from in this

00:27:33,080 --> 00:27:38,090
part of Kona so it gives you nearly

00:27:35,870 --> 00:27:39,590
synchronous replication as a

00:27:38,090 --> 00:27:41,740
ten-and-a-half Donald Trump would be

00:27:39,590 --> 00:27:45,590
proud nearly synchronous replication

00:27:41,740 --> 00:27:49,760
what it means is that you can insert or

00:27:45,590 --> 00:27:51,800
do any any write command on any database

00:27:49,760 --> 00:27:54,060
and it will get sent across to all the

00:27:51,800 --> 00:27:55,830
other databases but you won't

00:27:54,060 --> 00:27:58,980
you won't get ID crashes or anything

00:27:55,830 --> 00:28:01,350
like that and it's all wonderful the way

00:27:58,980 --> 00:28:03,780
it works is a transaction isn't

00:28:01,350 --> 00:28:09,090
considered closed until the replication

00:28:03,780 --> 00:28:11,220
is complete hmm yeah so again we attach

00:28:09,090 --> 00:28:12,900
a proxy to balance I know so we

00:28:11,220 --> 00:28:14,580
literally fight in sequence and write

00:28:12,900 --> 00:28:16,950
query for you for you for you query for

00:28:14,580 --> 00:28:18,090
you that didn't work so we updated it to

00:28:16,950 --> 00:28:20,670
go well actually let's look at the one

00:28:18,090 --> 00:28:26,880
that's the least busy great for you crew

00:28:20,670 --> 00:28:32,850
to you crew for you and so notice how I

00:28:26,880 --> 00:28:36,570
use the word had yes it didn't work very

00:28:32,850 --> 00:28:40,650
well basically what happened was that

00:28:36,570 --> 00:28:43,290
arm work rights was so frequent and we

00:28:40,650 --> 00:28:45,150
were having some network latency issues

00:28:43,290 --> 00:28:49,650
but none of the transactions were

00:28:45,150 --> 00:28:52,140
closing aha and then someone happens is

00:28:49,650 --> 00:28:52,530
is good Clara is quite good okay we'll

00:28:52,140 --> 00:28:54,570
hang on

00:28:52,530 --> 00:28:55,970
I can't guarantee consistency here so

00:28:54,570 --> 00:28:59,760
I'm just going to stop all the rights

00:28:55,970 --> 00:29:00,960
and then all the processes wait for your

00:28:59,760 --> 00:29:02,610
learning to write and it goes what hang

00:29:00,960 --> 00:29:04,800
on wait a minute I need to write to me

00:29:02,610 --> 00:29:08,040
yeah but you need to wait and then it

00:29:04,800 --> 00:29:10,530
all falls over so as a temporary

00:29:08,040 --> 00:29:12,570
solution we went back to our good old

00:29:10,530 --> 00:29:14,460
trusty vertical scaling thought the

00:29:12,570 --> 00:29:17,430
biggest note that digitalocean could

00:29:14,460 --> 00:29:19,020
give us at 320 dollars a month and just

00:29:17,430 --> 00:29:20,550
threw it at the database and that

00:29:19,020 --> 00:29:22,590
goddess 3 got us through kind of Black

00:29:20,550 --> 00:29:23,940
Friday and Cyber Monday which is not a

00:29:22,590 --> 00:29:27,290
time when you want dates places to be

00:29:23,940 --> 00:29:30,180
going down incidentally don't do it then

00:29:27,290 --> 00:29:32,070
and that kind of solitary and now what

00:29:30,180 --> 00:29:34,980
we've done is we've gone back to that

00:29:32,070 --> 00:29:37,470
whole kind of having a compromise we've

00:29:34,980 --> 00:29:39,420
got used to move to Amazon Aurora which

00:29:37,470 --> 00:29:42,090
is a drop-in replacement for my sequel

00:29:39,420 --> 00:29:44,430
so all your queries still worked editing

00:29:42,090 --> 00:29:46,050
works section same way but because they

00:29:44,430 --> 00:29:48,120
based about their own custom storage

00:29:46,050 --> 00:29:51,180
engine and it means that the throughput

00:29:48,120 --> 00:29:52,710
for writes is massively better so again

00:29:51,180 --> 00:29:54,480
we've gone back to we can only have read

00:29:52,710 --> 00:29:56,760
replicas but they are very low latent

00:29:54,480 --> 00:30:00,120
latent seekers addresses networks tends

00:29:56,760 --> 00:30:03,270
to be pretty good but we've got plenty

00:30:00,120 --> 00:30:04,470
of excess throughput on Aurora and we're

00:30:03,270 --> 00:30:05,870
not even on that biggest machine so

00:30:04,470 --> 00:30:08,070
we're okay for now

00:30:05,870 --> 00:30:09,780
by doing that and having that read

00:30:08,070 --> 00:30:11,820
replica you still do have that failover

00:30:09,780 --> 00:30:13,049
and actually with AWS it will do

00:30:11,820 --> 00:30:15,360
automatically for you anyway which is

00:30:13,049 --> 00:30:16,980
quite nice because if the master goes

00:30:15,360 --> 00:30:18,799
down it will promote one of the slaves

00:30:16,980 --> 00:30:21,780
and that becomes a new master and

00:30:18,799 --> 00:30:23,940
because we're just pointing it to a load

00:30:21,780 --> 00:30:26,070
balancer it knows which one's the master

00:30:23,940 --> 00:30:29,540
and it routes all the traffic properly

00:30:26,070 --> 00:30:33,299
and everything is good again as they say

00:30:29,540 --> 00:30:35,490
so that's what sample database is on the

00:30:33,299 --> 00:30:36,690
new product as I've already said we're

00:30:35,490 --> 00:30:38,790
splitting it up anyway

00:30:36,690 --> 00:30:40,740
so we're going to have separate

00:30:38,790 --> 00:30:42,960
databases and set the whole separate

00:30:40,740 --> 00:30:44,580
infrastructure for authentication whole

00:30:42,960 --> 00:30:46,230
settings for structure for web stores

00:30:44,580 --> 00:30:48,210
for the control panels for the server

00:30:46,230 --> 00:30:49,740
delivery so a we can scale them all

00:30:48,210 --> 00:30:52,950
separately and we'll have a lot more

00:30:49,740 --> 00:30:54,390
resources anyway because actually eat

00:30:52,950 --> 00:31:00,410
the job of each database will be

00:30:54,390 --> 00:31:03,480
significantly smaller just so we're now

00:31:00,410 --> 00:31:04,770
scaled out we've gone to a bottom gone

00:31:03,480 --> 00:31:06,299
right I need four times the hosting

00:31:04,770 --> 00:31:08,910
budget which has gone down like a lead

00:31:06,299 --> 00:31:10,350
balloon so what else can we do rather

00:31:08,910 --> 00:31:11,940
than just throwing metal at it ad

00:31:10,350 --> 00:31:16,940
infinitum there's gotta be something

00:31:11,940 --> 00:31:16,940
else we can do right hello it caching

00:31:17,929 --> 00:31:21,419
basically caching makes stuff really

00:31:20,940 --> 00:31:24,840
fast

00:31:21,419 --> 00:31:27,630
that's that sends it up what caching

00:31:24,840 --> 00:31:28,799
effectively does is means you're using

00:31:27,630 --> 00:31:30,840
less resources because you're not

00:31:28,799 --> 00:31:34,080
generating stuff because we all know

00:31:30,840 --> 00:31:35,250
dynamic content is bad just funny

00:31:34,080 --> 00:31:38,330
bearing in mind i'm a PHP developer

00:31:35,250 --> 00:31:41,100
speaking through PHP developers but

00:31:38,330 --> 00:31:43,380
anytime you can still serve static

00:31:41,100 --> 00:31:47,250
content that's going to be better is

00:31:43,380 --> 00:31:49,470
going to be faster so anything that

00:31:47,250 --> 00:31:51,770
you're doing that requires work whether

00:31:49,470 --> 00:31:54,299
that you're crea database whether that's

00:31:51,770 --> 00:31:56,130
going to a third party APR like I said

00:31:54,299 --> 00:31:57,720
we use Kings for reporting but it means

00:31:56,130 --> 00:32:00,840
we're still spinning stuff across the

00:31:57,720 --> 00:32:02,490
net waiting for responses back even if

00:32:00,840 --> 00:32:07,559
it's just as simple as going through a

00:32:02,490 --> 00:32:08,910
loop that stuff takes time so if you've

00:32:07,559 --> 00:32:10,830
got something where you know actually

00:32:08,910 --> 00:32:12,030
the end result going to be the same on

00:32:10,830 --> 00:32:14,490
more than one occasion

00:32:12,030 --> 00:32:15,929
don't bother wasting those resources and

00:32:14,490 --> 00:32:18,030
wasting that processing power in that

00:32:15,929 --> 00:32:19,560
processing time and that man rendered

00:32:18,030 --> 00:32:25,290
that memory whatever else

00:32:19,560 --> 00:32:27,870
use the cash and just serve that cash

00:32:25,290 --> 00:32:30,150
all the things okay that's a slight

00:32:27,870 --> 00:32:31,880
exaggeration but you know I had to have

00:32:30,150 --> 00:32:35,550
all the things in there somewhere right

00:32:31,880 --> 00:32:39,900
so you don't want to cash everything but

00:32:35,550 --> 00:32:42,450
it is a case of working out what is what

00:32:39,900 --> 00:32:43,860
it makes sense to cash so if you've got

00:32:42,450 --> 00:32:45,660
something that is only generated once

00:32:43,860 --> 00:32:48,120
every 24 hours and it's only ret looked

00:32:45,660 --> 00:32:49,590
at once every 24 hours then you probably

00:32:48,120 --> 00:32:51,630
need to cash it if you know there's a

00:32:49,590 --> 00:32:54,660
report that the boss looks at once a day

00:32:51,630 --> 00:32:56,280
and he goes and it gets a report and you

00:32:54,660 --> 00:32:59,460
prints it because you know what the

00:32:56,280 --> 00:33:00,870
bosses hate trees then you may as well

00:32:59,460 --> 00:33:02,670
just yeah there's no point cashing out

00:33:00,870 --> 00:33:05,640
it's a waste however if you've got

00:33:02,670 --> 00:33:07,440
something that you know it might change

00:33:05,640 --> 00:33:10,560
every minute but in that minute is being

00:33:07,440 --> 00:33:12,450
requested 60 times then generate it once

00:33:10,560 --> 00:33:14,340
and cash it for a minute and then

00:33:12,450 --> 00:33:16,650
generalize it again the next minute so

00:33:14,340 --> 00:33:19,350
that makes sense how you do your cash is

00:33:16,650 --> 00:33:21,990
entirely up to you we use Redis people

00:33:19,350 --> 00:33:23,970
use memcache I mean to be honest just

00:33:21,990 --> 00:33:25,080
writing stuff to a text file is better

00:33:23,970 --> 00:33:28,290
than having no cash at all

00:33:25,080 --> 00:33:30,810
don't write impossible acceptable but

00:33:28,290 --> 00:33:35,160
whatever you do have you do it some cash

00:33:30,810 --> 00:33:36,960
is better than no cash so we want to

00:33:35,160 --> 00:33:41,070
kind of touch upon this how long should

00:33:36,960 --> 00:33:42,780
we cache stuff for unfortunately I'm

00:33:41,070 --> 00:33:44,280
going to plate the pen I'm gonna sit

00:33:42,780 --> 00:33:47,220
right on the fence because you know I'm

00:33:44,280 --> 00:33:48,600
for a fish that's what I'm good at if

00:33:47,220 --> 00:33:50,760
you've got stuff that you know doesn't

00:33:48,600 --> 00:33:53,070
change if you are static HTML pages then

00:33:50,760 --> 00:33:55,590
cache them forever an agile fact I've

00:33:53,070 --> 00:33:57,600
cache it and then when someone makes a

00:33:55,590 --> 00:33:59,730
change in your CMS then invalidate the

00:33:57,600 --> 00:34:01,530
cache you don't need to set expiry on it

00:33:59,730 --> 00:34:04,470
if it can only change if someone changes

00:34:01,530 --> 00:34:07,500
it in the admin panel just crash it for

00:34:04,470 --> 00:34:08,970
59 million years and then worry about it

00:34:07,500 --> 00:34:11,100
when someone makes a change and then

00:34:08,970 --> 00:34:14,129
invalidate it at that point if you've

00:34:11,100 --> 00:34:16,080
got stuff like report think yes it's

00:34:14,129 --> 00:34:17,399
lovely for for teens real time but if

00:34:16,080 --> 00:34:19,710
you're putting stuff over api's and it's

00:34:17,399 --> 00:34:21,720
slow it's not going to happen we kind of

00:34:19,710 --> 00:34:23,280
had a conversation with some of our

00:34:21,720 --> 00:34:24,540
biggest partners and said well we're

00:34:23,280 --> 00:34:25,980
going we're going to give you updated

00:34:24,540 --> 00:34:27,570
reporting every 15 minutes

00:34:25,980 --> 00:34:29,129
and a couple of them loans I'm like well

00:34:27,570 --> 00:34:30,840
how dare you do this and well what if

00:34:29,129 --> 00:34:32,589
you want to pay ten times as much then

00:34:30,840 --> 00:34:34,599
we'll give you real-time reporting

00:34:32,589 --> 00:34:38,469
and there aren't words oh no no 15

00:34:34,599 --> 00:34:40,329
minutes is fine so yeah if you can do

00:34:38,469 --> 00:34:42,789
real time then yeah do it that's awesome

00:34:40,329 --> 00:34:44,409
and your customers will love you and you

00:34:42,789 --> 00:34:46,419
know whatever but if it's a choice

00:34:44,409 --> 00:34:48,429
between having all your customers leave

00:34:46,419 --> 00:34:51,700
you when you say right now pears 5000

00:34:48,429 --> 00:34:53,649
pounds a month or giving them an updated

00:34:51,700 --> 00:34:55,389
report objective statistics every 15

00:34:53,649 --> 00:34:58,479
minutes the matter that's the pilot of

00:34:55,389 --> 00:35:00,430
Valley Trail even if you've got

00:34:58,479 --> 00:35:02,380
something that can only be cashed for a

00:35:00,430 --> 00:35:04,869
minute if it's being requested more than

00:35:02,380 --> 00:35:07,029
once more or less then it's worth doing

00:35:04,869 --> 00:35:08,710
the other thing that you might do is

00:35:07,029 --> 00:35:10,299
pre-warp your crash so at the moment

00:35:08,710 --> 00:35:11,950
you're so much so we're going to cash

00:35:10,299 --> 00:35:15,279
but someone has to hit that web page

00:35:11,950 --> 00:35:17,319
first and try you know we all try and

00:35:15,279 --> 00:35:18,940
make wonderfully optimized code and it's

00:35:17,319 --> 00:35:21,309
all brilliant and everything loads

00:35:18,940 --> 00:35:23,799
really quickly but let's face it it

00:35:21,309 --> 00:35:24,940
doesn't always happen and certainly if

00:35:23,799 --> 00:35:29,349
you if you like let's say you use

00:35:24,940 --> 00:35:32,229
magenta things like the homepage tend to

00:35:29,349 --> 00:35:34,089
just see really slow anyway so rather

00:35:32,229 --> 00:35:35,920
than making the first person pay that

00:35:34,089 --> 00:35:38,920
price for it not being - if you've got

00:35:35,920 --> 00:35:41,650
quiet periods and evening free walnut

00:35:38,920 --> 00:35:43,809
ashes so just you know automatically hit

00:35:41,650 --> 00:35:45,700
those pages so they're sorting cache and

00:35:43,809 --> 00:35:47,019
then you caches there - when someone an

00:35:45,700 --> 00:35:48,279
actual person comes through it they go

00:35:47,019 --> 00:35:53,529
here's a test version aren't I clever

00:35:48,279 --> 00:35:55,749
and then never know we have said used to

00:35:53,529 --> 00:35:58,239
use it in my old place on doing magenta

00:35:55,749 --> 00:36:00,789
so we basically would know what the top

00:35:58,239 --> 00:36:02,319
kinds of products were so every four

00:36:00,789 --> 00:36:04,239
hours I think we'd go and pre-war might

00:36:02,319 --> 00:36:05,589
- we knew what the top Hatters were

00:36:04,239 --> 00:36:08,680
would three one those and would through

00:36:05,589 --> 00:36:10,359
all my page and close would come to us

00:36:08,680 --> 00:36:15,219
and down and what that's really quick

00:36:10,359 --> 00:36:19,420
like budget with bladder ask this be

00:36:15,219 --> 00:36:21,940
recorded isn't it so caching that's

00:36:19,420 --> 00:36:24,339
definitely a good thing the last

00:36:21,940 --> 00:36:25,029
something I want to look at is is prep

00:36:24,339 --> 00:36:28,059
resection

00:36:25,029 --> 00:36:32,670
now as I've kind of mentioned early on

00:36:28,059 --> 00:36:36,009
we have this kind of ongoing bubble or

00:36:32,670 --> 00:36:37,569
quasi attacks failed attacks overly

00:36:36,009 --> 00:36:40,150
optimistic attacks whatever you want to

00:36:37,569 --> 00:36:42,069
call it but it means that there can be

00:36:40,150 --> 00:36:44,229
quite a lot background noise they're not

00:36:42,069 --> 00:36:46,240
necessarily just attacks you could have

00:36:44,229 --> 00:36:48,040
if you've got an API

00:36:46,240 --> 00:36:50,800
someone's written a really really really

00:36:48,040 --> 00:36:52,690
horrible crime which we've had people

00:36:50,800 --> 00:36:54,760
dinner where we weren't throttling a

00:36:52,690 --> 00:36:59,500
therapist and they were hitting it 80

00:36:54,760 --> 00:37:01,180
times a second each row crawlers from

00:36:59,500 --> 00:37:05,320
those dodgy search engines in Russia or

00:37:01,180 --> 00:37:07,180
whatever it whatever that might be that

00:37:05,320 --> 00:37:08,500
stuff is just adding to your overheads

00:37:07,180 --> 00:37:09,820
and you're having to process a fee if

00:37:08,500 --> 00:37:12,810
you don't know it's happening

00:37:09,820 --> 00:37:20,200
it means that you're spending resources

00:37:12,810 --> 00:37:22,420
satisfying this just ongoing dot so if

00:37:20,200 --> 00:37:23,950
we can sort that we can then basically

00:37:22,420 --> 00:37:25,390
that then it might not be a lot you

00:37:23,950 --> 00:37:26,590
might you might have a few thousand or

00:37:25,390 --> 00:37:28,810
you might have hundreds of thousands or

00:37:26,590 --> 00:37:30,400
you might have millions but yeah you can

00:37:28,810 --> 00:37:32,020
stop all that stuff and then all that

00:37:30,400 --> 00:37:34,270
resources all that resource that was

00:37:32,020 --> 00:37:38,619
being used up is now available for your

00:37:34,270 --> 00:37:41,560
actual person as I mentioned rate

00:37:38,619 --> 00:37:43,570
limiting consider what's reasonable in

00:37:41,560 --> 00:37:46,720
our instance eighty requests per second

00:37:43,570 --> 00:37:50,740
was not reasonable I think it's now down

00:37:46,720 --> 00:37:52,990
to about fifteen thing but if you've got

00:37:50,740 --> 00:37:54,520
an API or even if you've got your web if

00:37:52,990 --> 00:37:56,530
you you know your web application if you

00:37:54,520 --> 00:37:58,540
know that no one could possibly be

00:37:56,530 --> 00:37:59,980
generating 50 requests per second and

00:37:58,540 --> 00:38:03,190
people are generating 50 requests a

00:37:59,980 --> 00:38:05,290
second whom just blocks them however you

00:38:03,190 --> 00:38:07,330
do that is in turn up to your own in an

00:38:05,290 --> 00:38:09,550
old place we use sales to band for you

00:38:07,330 --> 00:38:11,320
seriously scan the logs and when we saw

00:38:09,550 --> 00:38:14,830
an IP which making lots of requests with

00:38:11,320 --> 00:38:16,359
dictating IP tables sounds works if you

00:38:14,830 --> 00:38:22,780
want to use something like cloud flat

00:38:16,359 --> 00:38:24,730
then use that sometimes you have to kind

00:38:22,780 --> 00:38:26,530
of do it in a a bit of a peaceful way so

00:38:24,730 --> 00:38:28,300
for example if you've got an API you

00:38:26,530 --> 00:38:29,470
might have 150 API that you know people

00:38:28,300 --> 00:38:32,560
shouldn't be hitting more than once

00:38:29,470 --> 00:38:33,790
every 10 minutes though so if I want

00:38:32,560 --> 00:38:35,260
rate limits on time ten minutes but you

00:38:33,790 --> 00:38:37,090
can be a lot more aggressive on the rate

00:38:35,260 --> 00:38:39,730
limiting than something you know people

00:38:37,090 --> 00:38:41,320
need to hit every minute or in our case

00:38:39,730 --> 00:38:43,330
the fact that different plans have

00:38:41,320 --> 00:38:44,320
different numbers of refreshes so we

00:38:43,330 --> 00:38:47,560
actually have different rate limits

00:38:44,320 --> 00:38:48,850
going on how much money you give us as I

00:38:47,560 --> 00:38:51,010
said cloud flask

00:38:48,850 --> 00:38:53,590
not only is it good for kind of stocking

00:38:51,010 --> 00:38:55,300
a lot of those kind of G doses or layer

00:38:53,590 --> 00:38:56,830
sevens or even kind of infrastructure

00:38:55,300 --> 00:38:57,820
attacks because they just feel a little

00:38:56,830 --> 00:38:59,530
battle to the edge

00:38:57,820 --> 00:39:02,470
it also will

00:38:59,530 --> 00:39:05,920
- traffic pages images provided to the

00:39:02,470 --> 00:39:07,690
end so it'll give you a lot of

00:39:05,920 --> 00:39:09,880
protection against kind of different

00:39:07,690 --> 00:39:13,060
things they share the information so if

00:39:09,880 --> 00:39:15,100
there's a particular profile of you know

00:39:13,060 --> 00:39:16,180
a type of attack on attack vector that's

00:39:15,100 --> 00:39:18,220
being use against a lots of their

00:39:16,180 --> 00:39:20,290
customers it will automatically block

00:39:18,220 --> 00:39:21,940
that against anyone so even if someone

00:39:20,290 --> 00:39:24,430
else's suffered we can't get the benefit

00:39:21,940 --> 00:39:25,720
this is great but yeah it's definitely

00:39:24,430 --> 00:39:28,870
something like classifieds there are

00:39:25,720 --> 00:39:31,030
alternatives available of course I don't

00:39:28,870 --> 00:39:38,440
know where but definitely certain like

00:39:31,030 --> 00:39:40,990
that is is well worth looking so in an

00:39:38,440 --> 00:39:44,130
ideal world you know we would all look

00:39:40,990 --> 00:39:47,410
at scaling when we build an application

00:39:44,130 --> 00:39:49,150
it's not you don't have time you have

00:39:47,410 --> 00:39:51,340
pressures you've got your boss going no

00:39:49,150 --> 00:39:54,430
I need this yesterday we need to launch

00:39:51,340 --> 00:39:56,530
by this big conference or whatever so

00:39:54,430 --> 00:39:57,870
you know let's be honest with ourselves

00:39:56,530 --> 00:40:01,960
it's probably not going to happen

00:39:57,870 --> 00:40:04,450
however even if you haven't done that

00:40:01,960 --> 00:40:06,670
even if you know your emotes and Lionel

00:40:04,450 --> 00:40:08,620
fixmas online or years analyzed there's

00:40:06,670 --> 00:40:12,580
plenty of stuff you can do there's stuff

00:40:08,620 --> 00:40:14,740
that you should go and do today so the

00:40:12,580 --> 00:40:17,350
thing that is important and I've said

00:40:14,740 --> 00:40:19,030
this a few times is measure stuff

00:40:17,350 --> 00:40:21,460
benchmarks that profile stuff whatever

00:40:19,030 --> 00:40:23,320
it was we on Colin use something like

00:40:21,460 --> 00:40:26,050
New Relic or even you know there's

00:40:23,320 --> 00:40:28,540
plenty of good tools within kind of

00:40:26,050 --> 00:40:32,230
Linux and UNIX systems you know using

00:40:28,540 --> 00:40:33,520
sorry Saxon not using anything using the

00:40:32,230 --> 00:40:34,060
slow query log effects are not into

00:40:33,520 --> 00:40:37,030
anything

00:40:34,060 --> 00:40:42,850
so there's any way that you can work out

00:40:37,030 --> 00:40:44,290
where the problems lie then isolate

00:40:42,850 --> 00:40:46,480
those problems you know luster for

00:40:44,290 --> 00:40:50,710
support there's no point throwing metal

00:40:46,480 --> 00:40:52,120
a web node if the DB is crashing Northam

00:40:50,710 --> 00:40:54,190
going to so

00:40:52,120 --> 00:40:56,500
isolate things off go well I know this

00:40:54,190 --> 00:40:57,850
is a problem I know that these crumbs

00:40:56,500 --> 00:41:00,070
are problem I know that this state

00:40:57,850 --> 00:41:02,350
facing problem isolate that stuff off

00:41:00,070 --> 00:41:05,760
and then focus your efforts and your

00:41:02,350 --> 00:41:09,060
resources on the bits Vitara problem

00:41:05,760 --> 00:41:09,060
thanks very much

00:41:15,660 --> 00:41:19,720
so we've got some science or questions

00:41:18,190 --> 00:41:22,119
you know once we're finished please do

00:41:19,720 --> 00:41:23,980
rate this I am also the maintainer for

00:41:22,119 --> 00:41:25,990
joined into a little slug we always

00:41:23,980 --> 00:41:27,220
always always need more contributed or

00:41:25,990 --> 00:41:28,690
equal if you want to about

00:41:27,220 --> 00:41:31,750
something we've done wrong then come and

00:41:28,690 --> 00:41:33,550
see me that's absolutely fine I'll be

00:41:31,750 --> 00:41:36,540
around for the day speak to me

00:41:33,550 --> 00:41:49,450
catch me on Twitter email me whatever

00:41:36,540 --> 00:41:50,380
you question done pilot no not even

00:41:49,450 --> 00:42:11,970
welcome in your life

00:41:50,380 --> 00:42:15,310
no okay oh yes yeah in cases where that

00:42:11,970 --> 00:42:16,180
isn't necessary yeah so friend one who

00:42:15,310 --> 00:42:20,770
couldn't hear that way to what the

00:42:16,180 --> 00:42:22,060
question was is that obviously we talked

00:42:20,770 --> 00:42:24,430
about the n plus one issue and our

00:42:22,060 --> 00:42:26,290
solutions format and whether there were

00:42:24,430 --> 00:42:28,840
any kind of negative impacts of that on

00:42:26,290 --> 00:42:30,430
whether it would look to those because

00:42:28,840 --> 00:42:32,290
of the way our application works if

00:42:30,430 --> 00:42:34,510
something's in a collection and the

00:42:32,290 --> 00:42:37,180
relationship is being loaded it's about

00:42:34,510 --> 00:42:37,990
a 95% chance we're looping the things so

00:42:37,180 --> 00:42:41,140
we're going to need all those

00:42:37,990 --> 00:42:42,369
relationships anyways you might have

00:42:41,140 --> 00:42:44,140
issues if you've got stuff that you kind

00:42:42,369 --> 00:42:45,730
of paginate after a relationship flowed

00:42:44,140 --> 00:42:47,650
then I guess you have a problem now I

00:42:45,730 --> 00:42:49,660
mean whenever we got pagination we take

00:42:47,650 --> 00:42:51,340
the slice of the collection first so we

00:42:49,660 --> 00:42:53,470
would still only be loading relationship

00:42:51,340 --> 00:42:56,590
on 25 Records or 50 records or whatever

00:42:53,470 --> 00:42:58,600
whatever a page was so in that sense

00:42:56,590 --> 00:43:00,400
because we're doing it as part of the

00:42:58,600 --> 00:43:02,650
loop we don't have those issues because

00:43:00,400 --> 00:43:04,450
we know using in the loop anyway if I

00:43:02,650 --> 00:43:06,550
guess you were loading a collection of

00:43:04,450 --> 00:43:07,840
50 and only using the first sizes then

00:43:06,550 --> 00:43:09,609
you need to consider that but then I

00:43:07,840 --> 00:43:10,690
would suggest you probably don't leave

00:43:09,609 --> 00:43:13,530
loading the collection of 50 in the

00:43:10,690 --> 00:43:13,530
first place essentially

00:43:21,740 --> 00:43:28,710
okay so question again word howdy - kind

00:43:25,980 --> 00:43:31,080
of surpassed the api's if we kind of

00:43:28,710 --> 00:43:33,630
have millions of sales and the short

00:43:31,080 --> 00:43:36,000
answer is we actually cache the output

00:43:33,630 --> 00:43:37,650
that we generate so when someone says I

00:43:36,000 --> 00:43:39,540
want the statistics from our web school

00:43:37,650 --> 00:43:41,550
we'll go off we'll go to keen we'll pull

00:43:39,540 --> 00:43:43,530
that data in and I know means it's the

00:43:41,550 --> 00:43:45,750
kicks you know when I say they're slow

00:43:43,530 --> 00:43:49,200
I'm talking maybe half a second so I'm

00:43:45,750 --> 00:43:50,700
not talking Howard but then we'll use

00:43:49,200 --> 00:43:52,590
that and we take that data we format

00:43:50,700 --> 00:43:55,080
into something that we can inject into

00:43:52,590 --> 00:43:56,880
our graph building JavaScript library

00:43:55,080 --> 00:43:59,310
that I've never looks at and that's what

00:43:56,880 --> 00:44:00,840
we cache or will cache that array so we

00:43:59,310 --> 00:44:03,690
don't catch the raw data coming in will

00:44:00,840 --> 00:44:05,700
generate that report and we'll cache the

00:44:03,690 --> 00:44:07,350
results for that and then so because

00:44:05,700 --> 00:44:08,310
that's on their dashboard everyone

00:44:07,350 --> 00:44:15,000
against their dashboard there then just

00:44:08,310 --> 00:44:19,440
get that test data for a 50 and it's

00:44:15,000 --> 00:44:21,640
enough people it's a thing well thank

00:44:19,440 --> 00:44:25,270
you very much

00:44:21,640 --> 00:44:25,270

YouTube URL: https://www.youtube.com/watch?v=aHthWfsqhXU


