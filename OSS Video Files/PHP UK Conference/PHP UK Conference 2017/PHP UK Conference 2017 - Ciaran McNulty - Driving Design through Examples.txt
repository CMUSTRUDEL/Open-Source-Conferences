Title: PHP UK Conference 2017 - Ciaran McNulty - Driving Design through Examples
Publication date: 2017-04-03
Playlist: PHP UK Conference 2017
Description: 
	Modelling by Example is a set of practices that combine BDD (Behaviour Driven Development) and DDD (Domain Driven Design) techniques to create a workflow that directly drives code from a starting point of user requirements. We will see how a simple feature can be defined via conversation with stakeholders, captured as automatable requirements, and expressed directly in the object model using tools such as Behat and PhpSpec.
Captions: 
	00:00:03,840 --> 00:00:12,969
hello everyone I'm Kiran hello Gary I

00:00:10,650 --> 00:00:15,969
was in his presentation so has to put

00:00:12,969 --> 00:00:20,109
Gary in my presentation this is really

00:00:15,969 --> 00:00:22,810
special for me because two years ago at

00:00:20,109 --> 00:00:26,050
PHP UK in 2016 I did my first ever

00:00:22,810 --> 00:00:27,730
conference talk upstairs on the big

00:00:26,050 --> 00:00:29,439
track and first time I'd ever talked in

00:00:27,730 --> 00:00:30,880
front of people I've done quite a lot of

00:00:29,439 --> 00:00:32,949
talk since then but this is still a

00:00:30,880 --> 00:00:35,290
really sort of special conference to me

00:00:32,949 --> 00:00:37,870
because I came to it four years before I

00:00:35,290 --> 00:00:40,809
ever did any speaking and if you did see

00:00:37,870 --> 00:00:42,339
Gary's keynote last night I could really

00:00:40,809 --> 00:00:44,409
attest to what he was saying that

00:00:42,339 --> 00:00:46,390
becoming more engaged in the community

00:00:44,409 --> 00:00:48,040
and getting more involved in open source

00:00:46,390 --> 00:00:52,600
not only is really sort personally

00:00:48,040 --> 00:00:54,010
rewarding but you get more money which

00:00:52,600 --> 00:00:57,879
is the main takeaway I had from that

00:00:54,010 --> 00:01:00,729
tool so I'm going to talk about is this

00:00:57,879 --> 00:01:04,960
thing driving designs through examples

00:01:00,729 --> 00:01:10,270
and it comes from a set of practices

00:01:04,960 --> 00:01:14,800
called modeling by example is a term

00:01:10,270 --> 00:01:17,680
coined by Constantine COO Josh off and

00:01:14,800 --> 00:01:19,570
it's it's a kind of set of different

00:01:17,680 --> 00:01:21,220
practices I'm going to talk through kind

00:01:19,570 --> 00:01:23,590
of what it is but it's not a really

00:01:21,220 --> 00:01:25,150
strict check point thing you can't say

00:01:23,590 --> 00:01:28,390
yes you're doing modeling by example or

00:01:25,150 --> 00:01:31,390
not and it combines some concepts from

00:01:28,390 --> 00:01:33,430
BDD and some concepts in DVD so I'll

00:01:31,390 --> 00:01:35,770
give a bit of a sort of primer in the

00:01:33,430 --> 00:01:38,290
relevant concepts of each and sort of

00:01:35,770 --> 00:01:39,550
show how it comes together in a

00:01:38,290 --> 00:01:43,120
particular workflow for building

00:01:39,550 --> 00:01:44,290
software and show some code examples and

00:01:43,120 --> 00:01:45,670
stuff but we're not it's not really

00:01:44,290 --> 00:01:46,030
going to focus on the tools that were

00:01:45,670 --> 00:01:50,800
using

00:01:46,030 --> 00:01:52,150
I forgot to say who I was ia I work for

00:01:50,800 --> 00:01:54,760
a company called in because I've big

00:01:52,150 --> 00:01:58,000
stand out there and I lead maintain of a

00:01:54,760 --> 00:02:01,960
project called PHP spec and I do a lot

00:01:58,000 --> 00:02:03,119
of coaching and programming thing for

00:02:01,960 --> 00:02:07,590
people

00:02:03,119 --> 00:02:11,009
so start with BDD behavior-driven

00:02:07,590 --> 00:02:12,930
development is quite well established

00:02:11,009 --> 00:02:15,180
now a lot of teams think they do it

00:02:12,930 --> 00:02:19,890
doing it but they're not they're just

00:02:15,180 --> 00:02:22,379
writing weird tests or to the point of

00:02:19,890 --> 00:02:23,549
BDD it's that the behavior of the system

00:02:22,379 --> 00:02:26,640
is what's going to drive to a

00:02:23,549 --> 00:02:28,920
development we've got too many DD

00:02:26,640 --> 00:02:31,379
acronyms in this industry book where

00:02:28,920 --> 00:02:33,569
you're going to cover a couple of them

00:02:31,379 --> 00:02:35,700
what does behavior mean it means we're

00:02:33,569 --> 00:02:38,730
going to start our process by talking

00:02:35,700 --> 00:02:40,079
about how the system should work which

00:02:38,730 --> 00:02:41,970
sounds obvious but lots of people going

00:02:40,079 --> 00:02:44,790
to do that they start it by opening an

00:02:41,970 --> 00:02:45,959
editor and typing stuff maybe going to

00:02:44,790 --> 00:02:47,970
have a conversation with someone about

00:02:45,959 --> 00:02:52,739
what you're supposed to do before we get

00:02:47,970 --> 00:02:56,780
to that point and it's got many focuses

00:02:52,739 --> 00:02:56,780
it's about building things well so

00:02:57,110 --> 00:03:03,329
having conversations and documenting how

00:03:00,920 --> 00:03:05,670
parts of your system should work maybe

00:03:03,329 --> 00:03:07,859
in the form of executable test is going

00:03:05,670 --> 00:03:10,799
to help build quality into your

00:03:07,859 --> 00:03:15,569
application you want to build the right

00:03:10,799 --> 00:03:17,130
thing so we also want to figure out my

00:03:15,569 --> 00:03:19,380
unit tests are going to tell me I built

00:03:17,130 --> 00:03:23,730
the thing by what thought I was building

00:03:19,380 --> 00:03:25,139
I also need to kind of figure out is it

00:03:23,730 --> 00:03:28,799
the thing I was supposed to be building

00:03:25,139 --> 00:03:30,090
which is sometimes different and another

00:03:28,799 --> 00:03:31,889
part of BDD we're not going to focus on

00:03:30,090 --> 00:03:33,750
much is building thinking for the right

00:03:31,889 --> 00:03:35,880
reason so a lot of BDD conferences

00:03:33,750 --> 00:03:36,900
people are talking about project goals

00:03:35,880 --> 00:03:38,760
and how do you know if your project

00:03:36,900 --> 00:03:40,790
succeeded to achieve the business

00:03:38,760 --> 00:03:44,760
metrics that we wanted and that kind of

00:03:40,790 --> 00:03:49,019
much high-level stuff maybe that's

00:03:44,760 --> 00:03:52,590
confusing a good definition of BDD is

00:03:49,019 --> 00:03:54,690
Kiyo's definition BDD is when you use

00:03:52,590 --> 00:03:59,160
examples in conversation to illustrate

00:03:54,690 --> 00:04:03,480
behavior behavior is this input leads to

00:03:59,160 --> 00:04:08,099
this output and an example is a

00:04:03,480 --> 00:04:11,000
particular way of communicating or

00:04:08,099 --> 00:04:11,000
fulfilling with it

00:04:11,560 --> 00:04:17,840
why examples and examples aren't

00:04:15,500 --> 00:04:19,190
actually that important to understand

00:04:17,840 --> 00:04:21,950
what you really want is the person who's

00:04:19,190 --> 00:04:25,310
building the system has a mental model

00:04:21,950 --> 00:04:27,530
of the rules of the system that match

00:04:25,310 --> 00:04:29,660
the person who's paying to do it or

00:04:27,530 --> 00:04:31,520
match the business needs that it's going

00:04:29,660 --> 00:04:36,800
to be fulfilled so really we kind of

00:04:31,520 --> 00:04:40,850
want to understand rules here are some

00:04:36,800 --> 00:04:43,910
rules probably rules is they are broad

00:04:40,850 --> 00:04:44,720
and so it's hard to make sure the person

00:04:43,910 --> 00:04:47,120
you're talking to

00:04:44,720 --> 00:04:48,620
understands what you say we're going to

00:04:47,120 --> 00:04:51,280
work in an example that's the kind of

00:04:48,620 --> 00:04:55,730
loyalty scheme for frequent flying

00:04:51,280 --> 00:04:57,230
because it's a quartet hobby we're going

00:04:55,730 --> 00:05:00,200
to start a budget airline that slides

00:04:57,230 --> 00:05:01,310
between London and Manchester and the

00:05:00,200 --> 00:05:04,340
thing that's important for the people

00:05:01,310 --> 00:05:06,350
who can implement this system its

00:05:04,340 --> 00:05:08,660
importantly understand these rules and a

00:05:06,350 --> 00:05:11,210
business will often start talking to you

00:05:08,660 --> 00:05:15,110
in the format of trying to explain the

00:05:11,210 --> 00:05:18,370
rules to you so the rules are every one

00:05:15,110 --> 00:05:21,500
pound I spend on flights I on a point

00:05:18,370 --> 00:05:24,470
100 points can read a Deans 210 pounds

00:05:21,500 --> 00:05:31,090
off a future flight the very simple

00:05:24,470 --> 00:05:33,350
scheme and flights attacks at 20% now

00:05:31,090 --> 00:05:35,810
these might be rules that are explained

00:05:33,350 --> 00:05:38,300
to you the development team which I

00:05:35,810 --> 00:05:41,690
include you know test ISM all the

00:05:38,300 --> 00:05:46,400
different types of developers project

00:05:41,690 --> 00:05:47,660
managers maybe get some credit there's a

00:05:46,400 --> 00:05:49,940
whole load of other rules that are

00:05:47,660 --> 00:05:51,470
implicit to the businesses flying that

00:05:49,940 --> 00:05:53,120
the customer are going to remember to

00:05:51,470 --> 00:05:54,320
tell you about there's a lot of

00:05:53,120 --> 00:05:55,910
assumptions they're making where they

00:05:54,320 --> 00:05:57,950
convey need rules and it's easy to read

00:05:55,910 --> 00:06:00,950
these rules and get a slightly wrong

00:05:57,950 --> 00:06:02,780
understanding they don't see any

00:06:00,950 --> 00:06:08,900
ambiguities in here you just shout one

00:06:02,780 --> 00:06:10,280
out yeah yeah that's a good point

00:06:08,900 --> 00:06:12,110
so is it four hundred pounds that I

00:06:10,280 --> 00:06:15,320
spend 120 pounds how many points should

00:06:12,110 --> 00:06:16,610
I get so I've done theirs I've asked the

00:06:15,320 --> 00:06:18,620
question with real numbers in and that's

00:06:16,610 --> 00:06:20,360
going to transform it into an example

00:06:18,620 --> 00:06:22,580
what's the actual number of points I

00:06:20,360 --> 00:06:31,610
earn it's like

00:06:22,580 --> 00:06:34,580
coughs 100 pound you head on over so if

00:06:31,610 --> 00:06:37,129
I repeated the thing if I spend will one

00:06:34,580 --> 00:06:40,849
pound 49 how many points do I get do we

00:06:37,129 --> 00:06:42,919
have fractions of points so even with

00:06:40,849 --> 00:06:44,240
very simple cases where you think I'll

00:06:42,919 --> 00:06:45,680
just explain them I'll just tell them

00:06:44,240 --> 00:06:47,469
the rules and they'll understand and

00:06:45,680 --> 00:06:50,990
they'll build the software correctly

00:06:47,469 --> 00:06:52,849
I've got context that I'm measuring

00:06:50,990 --> 00:06:55,219
these rules against like obviously in my

00:06:52,849 --> 00:06:57,830
industry it's really obvious where the

00:06:55,219 --> 00:06:59,719
points get awarded for the tax because

00:06:57,830 --> 00:07:01,129
it's law as one does it and I'm not

00:06:59,719 --> 00:07:04,849
going to think to mention as part of the

00:07:01,129 --> 00:07:06,860
conversation or obviously in our

00:07:04,849 --> 00:07:08,419
industry we know that things get rounded

00:07:06,860 --> 00:07:10,550
like I've been in the airline industry

00:07:08,419 --> 00:07:14,090
for 50 years and it's always been done

00:07:10,550 --> 00:07:16,729
this way and the poor developer

00:07:14,090 --> 00:07:18,620
implemented the rounding thing gets told

00:07:16,729 --> 00:07:22,669
in an idiot because why would you ever

00:07:18,620 --> 00:07:25,400
do it that way so introducing examples

00:07:22,669 --> 00:07:27,710
here are what's going to reduce this

00:07:25,400 --> 00:07:29,840
ambiguity even for simple cases you just

00:07:27,710 --> 00:07:35,210
say so give me an example when I'm

00:07:29,840 --> 00:07:38,150
flying and it cost 100 pounds kind of

00:07:35,210 --> 00:07:40,370
questions I like I came up with law when

00:07:38,150 --> 00:07:41,599
I when I redeem when I've got a flight

00:07:40,370 --> 00:07:43,909
that I'm going to earn points on and I

00:07:41,599 --> 00:07:46,759
use some points to lower the cost but

00:07:43,909 --> 00:07:48,529
still earn points back on it maybe

00:07:46,759 --> 00:07:52,400
that's a good question to answer before

00:07:48,529 --> 00:07:56,330
the end of the project can I spend 200

00:07:52,400 --> 00:07:59,089
points and get 20 pounds off this tax

00:07:56,330 --> 00:08:00,979
thing if I've got money off is the taxes

00:07:59,089 --> 00:08:03,529
in relation to what you're looking up if

00:08:00,979 --> 00:08:05,120
I reduce the cost by spending points

00:08:03,529 --> 00:08:07,460
does that reduce the tax or is there

00:08:05,120 --> 00:08:10,969
some crazy tax law that we have to add

00:08:07,460 --> 00:08:12,469
to our list of rules this kind of

00:08:10,969 --> 00:08:13,969
conversation is because is the bread and

00:08:12,469 --> 00:08:15,740
butter of behavior development

00:08:13,969 --> 00:08:18,039
techniques for asking this kind of

00:08:15,740 --> 00:08:21,770
question making sure everyone

00:08:18,039 --> 00:08:24,409
understands the rules before they build

00:08:21,770 --> 00:08:27,169
the software that's basic what BDD is

00:08:24,409 --> 00:08:29,440
about not about them figuring out what

00:08:27,169 --> 00:08:32,029
the user interface is going to be or

00:08:29,440 --> 00:08:34,159
like writing the code up front and

00:08:32,029 --> 00:08:35,380
generating UML just about making sure

00:08:34,159 --> 00:08:37,840
everyone understands

00:08:35,380 --> 00:08:38,860
this kind of behavior of the system what

00:08:37,840 --> 00:08:44,229
should the system do in these different

00:08:38,860 --> 00:08:45,850
cases and examples become unambiguous so

00:08:44,229 --> 00:08:49,000
the same set of rules we can quickly

00:08:45,850 --> 00:08:53,020
through a conversation generate some

00:08:49,000 --> 00:08:54,970
examples of them so let's say a flight

00:08:53,020 --> 00:08:57,400
from London to Manchester cost 50 pounds

00:08:54,970 --> 00:09:01,480
if you pay cash we pay an additional 10

00:08:57,400 --> 00:09:02,970
pounds tax on your loan 50 points if you

00:09:01,480 --> 00:09:05,560
pay entirely with points so you can

00:09:02,970 --> 00:09:07,240
throw as many points as you like onto it

00:09:05,560 --> 00:09:09,190
you pay entirely with points that'll

00:09:07,240 --> 00:09:10,570
cost five hundred points and you'll have

00:09:09,190 --> 00:09:13,720
to pay the tax on the original price

00:09:10,570 --> 00:09:16,120
before the discount you don't earn any

00:09:13,720 --> 00:09:21,400
more points because it's a big reward

00:09:16,120 --> 00:09:24,190
flight of some sort and there's a

00:09:21,400 --> 00:09:26,400
scenario here if I pay just get some of

00:09:24,190 --> 00:09:28,060
the price off this is what should happen

00:09:26,400 --> 00:09:29,710
so this becomes a lot more

00:09:28,060 --> 00:09:31,890
understandable our initially we can't

00:09:29,710 --> 00:09:34,180
read the bottom of the slides I forgot

00:09:31,890 --> 00:09:37,420
if you pay with a hundred points it'll

00:09:34,180 --> 00:09:38,830
cost a hundred points and you'll have to

00:09:37,420 --> 00:09:40,450
pay the rest of the cost and you pay the

00:09:38,830 --> 00:09:47,740
tax based on the original cost before

00:09:40,450 --> 00:09:49,660
you reduced we put these so now you

00:09:47,740 --> 00:09:51,220
don't earn points at all on a reward

00:09:49,660 --> 00:09:53,590
flight so offering students

00:09:51,220 --> 00:09:55,180
conversations you discover a new rule so

00:09:53,590 --> 00:09:57,160
you could get it annotate that in your

00:09:55,180 --> 00:09:58,690
rule tonight well if you spend any

00:09:57,160 --> 00:10:00,730
points on the slide you don't earn any

00:09:58,690 --> 00:10:02,980
meatboy something like that

00:10:00,730 --> 00:10:05,740
so these are harder to understand that's

00:10:02,980 --> 00:10:08,680
quite important but there are it'd be

00:10:05,740 --> 00:10:10,060
easier for everyone involved if someone

00:10:08,680 --> 00:10:11,740
could just explain the rules and then I

00:10:10,060 --> 00:10:14,980
immediately understand the rules and we

00:10:11,740 --> 00:10:16,330
I go and build the software but in real

00:10:14,980 --> 00:10:18,850
life there's not only some kind of

00:10:16,330 --> 00:10:22,030
ambiguity you can think of examples

00:10:18,850 --> 00:10:24,370
maybe is it's an algorithm in one

00:10:22,030 --> 00:10:25,780
person's head and there's an algorithm

00:10:24,370 --> 00:10:28,060
that's been formed in the other person's

00:10:25,780 --> 00:10:29,530
head based on the chat you had and then

00:10:28,060 --> 00:10:31,570
you run for real numbers through it and

00:10:29,530 --> 00:10:33,310
if the same real numbers pop out for

00:10:31,570 --> 00:10:34,990
those people we've got a high confidence

00:10:33,310 --> 00:10:37,150
we both understood what the hell are we

00:10:34,990 --> 00:10:38,980
talking about and different numbers pop

00:10:37,150 --> 00:10:43,780
out we probably need to talk a bit more

00:10:38,980 --> 00:10:45,010
I can say hey wait I used it why am I

00:10:43,780 --> 00:10:45,410
not earning points here what's the

00:10:45,010 --> 00:10:53,480
hidden

00:10:45,410 --> 00:10:55,279
we didn't talk about yet that's BVD and

00:10:53,480 --> 00:10:58,100
at the end everyone understands all they

00:10:55,279 --> 00:11:01,790
need to be doing there's an amazing side

00:10:58,100 --> 00:11:06,709
effect the examples are objectively

00:11:01,790 --> 00:11:08,600
testable so by generating these examples

00:11:06,709 --> 00:11:09,500
as a way for us to understand what we're

00:11:08,600 --> 00:11:11,509
supposed to be doing

00:11:09,500 --> 00:11:15,259
there's also generated through test

00:11:11,509 --> 00:11:18,740
cases so I can once the system's been

00:11:15,259 --> 00:11:21,800
implemented I can validate that it works

00:11:18,740 --> 00:11:24,230
by setting up a flight that cost fifty

00:11:21,800 --> 00:11:28,040
pounds trying to pay for it with cash

00:11:24,230 --> 00:11:29,779
checking I get charged ten pounds tax

00:11:28,040 --> 00:11:32,930
and checking that I get 50 points

00:11:29,779 --> 00:11:35,720
credited to my loyalty account this is

00:11:32,930 --> 00:11:39,529
why BDD so intimately connected with

00:11:35,720 --> 00:11:42,290
test automation the conversation you

00:11:39,529 --> 00:11:44,389
have a to start leads you towards having

00:11:42,290 --> 00:11:45,949
nice test cases that cover all the

00:11:44,389 --> 00:11:49,509
important things the business cares

00:11:45,949 --> 00:11:51,589
about you may have other tests later

00:11:49,509 --> 00:11:53,899
covering things the testers cared about

00:11:51,589 --> 00:11:54,800
we thought of when they were testing but

00:11:53,899 --> 00:11:57,920
it means you've got this kind of

00:11:54,800 --> 00:11:59,089
synchronization point we checked we both

00:11:57,920 --> 00:12:03,110
understood what we're supposed to be

00:11:59,089 --> 00:12:06,430
building and we wrote it down and we can

00:12:03,110 --> 00:12:11,329
use up the drive automate the test later

00:12:06,430 --> 00:12:15,069
so in BDD this step is taking those

00:12:11,329 --> 00:12:16,850
cases and generating test cases

00:12:15,069 --> 00:12:21,819
obviously there are tools to help with

00:12:16,850 --> 00:12:25,120
that let's look at gherkin gherkin is a

00:12:21,819 --> 00:12:31,569
formal language for writing down

00:12:25,120 --> 00:12:34,100
examples you do not have to use gherkin

00:12:31,569 --> 00:12:35,870
so there are tools that will make it

00:12:34,100 --> 00:12:38,029
easier for you is it using this format

00:12:35,870 --> 00:12:40,250
the most important thing is to talk to

00:12:38,029 --> 00:12:42,050
people and deliberately introduce

00:12:40,250 --> 00:12:44,120
examples into the conversation say can

00:12:42,050 --> 00:12:46,279
you give me an example what would happen

00:12:44,120 --> 00:12:48,980
if I paid 100 pounds and write that down

00:12:46,279 --> 00:12:50,660
that's the most important thing writing

00:12:48,980 --> 00:12:52,839
it down in gherkin format and using the

00:12:50,660 --> 00:12:55,040
tools that can automate gherkin format

00:12:52,839 --> 00:12:57,500
will make your life easier but it's just

00:12:55,040 --> 00:12:59,580
like a convenience

00:12:57,500 --> 00:13:01,980
you should only automate it what you're

00:12:59,580 --> 00:13:04,620
doing it correctly don't go to make it

00:13:01,980 --> 00:13:08,430
in doing it badly you just be bad stuff

00:13:04,620 --> 00:13:11,610
after more officially the gherkin looks

00:13:08,430 --> 00:13:17,340
like this you have a file called a

00:13:11,610 --> 00:13:19,020
feature file you get a nice bit of free

00:13:17,340 --> 00:13:20,880
text where you can just stick stuff in

00:13:19,020 --> 00:13:23,790
there here's my understanding the rules

00:13:20,880 --> 00:13:25,380
please see this page on the wiki here's

00:13:23,790 --> 00:13:27,390
the user story that made us build this

00:13:25,380 --> 00:13:29,340
feature here's a picture of my cap

00:13:27,390 --> 00:13:30,450
anything you want to kind of stick in

00:13:29,340 --> 00:13:33,630
there that's going to help someone who

00:13:30,450 --> 00:13:36,300
reads this file later and then the

00:13:33,630 --> 00:13:39,050
formal bit is these scenarios so there's

00:13:36,300 --> 00:13:41,180
a keywords scenario and then you say

00:13:39,050 --> 00:13:44,910
what scenario you're going to describe

00:13:41,180 --> 00:13:49,920
these are the three we had before paying

00:13:44,910 --> 00:13:52,290
cash an ending point getting some money

00:13:49,920 --> 00:13:54,660
off the flight using points what should

00:13:52,290 --> 00:13:58,770
happen what should happen if I paste the

00:13:54,660 --> 00:14:04,800
flight entirely with point then inside

00:13:58,770 --> 00:14:05,970
each scenario give a bunch of steps most

00:14:04,800 --> 00:14:07,590
important things are the when and the

00:14:05,970 --> 00:14:10,830
then when this happens this should

00:14:07,590 --> 00:14:15,720
happen this input should lead to this

00:14:10,830 --> 00:14:18,090
output everything called given which is

00:14:15,720 --> 00:14:20,070
like why is that input leading to that

00:14:18,090 --> 00:14:22,050
output what happened in the past what

00:14:20,070 --> 00:14:27,420
stage the system in that means when you

00:14:22,050 --> 00:14:29,850
do this this is going to happen you can

00:14:27,420 --> 00:14:32,180
focus just on the top scenario but these

00:14:29,850 --> 00:14:35,340
are I wrote out the three scenarios

00:14:32,180 --> 00:14:37,080
given a flight cost fifty fifty pounds

00:14:35,340 --> 00:14:39,390
so this concept like already here in the

00:14:37,080 --> 00:14:41,100
world there's a slight bin set up that

00:14:39,390 --> 00:14:44,400
cost fifty pounds someone went and typed

00:14:41,100 --> 00:14:48,210
into the flight system when I pay with

00:14:44,400 --> 00:14:50,610
cash at the input someone does something

00:14:48,210 --> 00:14:51,960
that indicates they're paying push a

00:14:50,610 --> 00:14:56,430
button all types of commands or

00:14:51,960 --> 00:14:57,900
something then I should pay fifty pounds

00:14:56,430 --> 00:15:00,320
of the flight and I should pay 10 pounds

00:14:57,900 --> 00:15:01,950
packs and I should get an empty point

00:15:00,320 --> 00:15:03,600
we're not talking about a particular

00:15:01,950 --> 00:15:06,270
user interface which is writing down

00:15:03,600 --> 00:15:08,260
these business rules the writing down

00:15:06,270 --> 00:15:10,700
examples of the business rules we talked

00:15:08,260 --> 00:15:16,640
what's the system supposed to protect I

00:15:10,700 --> 00:15:18,140
do the same to the other scenarios and

00:15:16,640 --> 00:15:20,300
we'll see in a minute you can use tools

00:15:18,140 --> 00:15:22,730
like behalf the family of tools

00:15:20,300 --> 00:15:26,330
basically called cucumber and B hat is

00:15:22,730 --> 00:15:30,440
the PHP tool it will help you write

00:15:26,330 --> 00:15:33,260
tests based on this format you could

00:15:30,440 --> 00:15:35,360
just write this down as text and use PHP

00:15:33,260 --> 00:15:37,060
unit and write tests following outline

00:15:35,360 --> 00:15:39,560
and they'll be perfectly fine

00:15:37,060 --> 00:15:41,830
cucumber workflows a bit more efficient

00:15:39,560 --> 00:15:46,130
if you're doing this gherkin thing a lot

00:15:41,830 --> 00:15:49,070
so he writes these things the concept

00:15:46,130 --> 00:15:50,480
called the three amigos there's

00:15:49,070 --> 00:15:52,640
sometimes called three amigos sessions

00:15:50,480 --> 00:15:54,170
but don't let normal people call you

00:15:52,640 --> 00:15:56,600
here you're calling that than that

00:15:54,170 --> 00:15:58,180
because they think developers are weird

00:15:56,600 --> 00:16:00,380
enough anyway

00:15:58,180 --> 00:16:04,340
you need someone who understands the

00:16:00,380 --> 00:16:05,630
business rules so in a strong context

00:16:04,340 --> 00:16:08,090
you might have someone called a product

00:16:05,630 --> 00:16:10,010
owner there with someone some subject

00:16:08,090 --> 00:16:12,710
matter expert who can take part in the

00:16:10,010 --> 00:16:16,340
conversation you need someone who's

00:16:12,710 --> 00:16:18,260
digit validation a tester they're also

00:16:16,340 --> 00:16:20,750
really good at asking me sort but what

00:16:18,260 --> 00:16:22,580
would happen in is and finding an extra

00:16:20,750 --> 00:16:24,970
case that that where are the gaps in the

00:16:22,580 --> 00:16:28,100
rules that we could identify mostly I

00:16:24,970 --> 00:16:31,480
need someone who's going to be building

00:16:28,100 --> 00:16:33,350
the thing office of alternatives

00:16:31,480 --> 00:16:34,610
important that they understand the

00:16:33,350 --> 00:16:40,130
requirement that's important they're in

00:16:34,610 --> 00:16:41,840
the business when do you do it so before

00:16:40,130 --> 00:16:43,460
you start working on that feature that's

00:16:41,840 --> 00:16:47,660
the last point that what you can do it

00:16:43,460 --> 00:16:48,920
just before you start typing those it's

00:16:47,660 --> 00:16:51,110
too long before you don't have this

00:16:48,920 --> 00:16:53,720
conversation about an entire 12-month

00:16:51,110 --> 00:16:55,250
program of work and try and write out

00:16:53,720 --> 00:16:58,370
gherkin scenarios for everything it's

00:16:55,250 --> 00:16:59,690
the massive waste of time because as

00:16:58,370 --> 00:17:01,400
anyone who's worked on a long project

00:16:59,690 --> 00:17:03,530
knows you won't do half of that stuff

00:17:01,400 --> 00:17:04,610
and you'll actually build a load of

00:17:03,530 --> 00:17:07,430
other stuff no one mentioned at the

00:17:04,610 --> 00:17:09,790
start so not too long before a few days

00:17:07,430 --> 00:17:12,860
before you're about to work on it

00:17:09,790 --> 00:17:14,540
probably before you commit to a

00:17:12,860 --> 00:17:16,730
particular time scales are doing it you

00:17:14,540 --> 00:17:18,380
have to add the colonisation so if

00:17:16,730 --> 00:17:19,670
you're doing scrum for instance you

00:17:18,380 --> 00:17:21,860
probably want to do this before your

00:17:19,670 --> 00:17:22,970
in planning if someone's going to say

00:17:21,860 --> 00:17:26,390
how much work you're going to get done

00:17:22,970 --> 00:17:27,620
you you want to understand and you have

00:17:26,390 --> 00:17:29,840
to optimize it for whenever you've got

00:17:27,620 --> 00:17:31,400
access to the right people so ideally

00:17:29,840 --> 00:17:32,780
I've got all these business experts and

00:17:31,400 --> 00:17:35,120
testers and developers all sitting

00:17:32,780 --> 00:17:37,640
together in a room constantly trying to

00:17:35,120 --> 00:17:39,440
make the software better but the reality

00:17:37,640 --> 00:17:41,180
of life might be different you might

00:17:39,440 --> 00:17:42,620
have a business expert you get to talk

00:17:41,180 --> 00:17:44,180
to you every two months for a half-hour

00:17:42,620 --> 00:17:47,150
meeting you have to cram this

00:17:44,180 --> 00:17:48,770
conversation in so sometimes you want to

00:17:47,150 --> 00:17:50,630
make these conversations very formal and

00:17:48,770 --> 00:17:52,400
say we doing the luckily an example

00:17:50,630 --> 00:17:53,840
workshop it gives you an example

00:17:52,400 --> 00:17:56,060
workshop for the stuff we're doing in

00:17:53,840 --> 00:18:05,360
the next spring you're invited please

00:17:56,060 --> 00:18:09,800
come once you've got a few examples such

00:18:05,360 --> 00:18:12,340
as called scenarios as well as part of

00:18:09,800 --> 00:18:15,230
the conversation you drive you know what

00:18:12,340 --> 00:18:16,610
we've identified a few scenarios what we

00:18:15,230 --> 00:18:19,220
need what other scenarios can we think

00:18:16,610 --> 00:18:22,310
of I think I got these lists this list

00:18:19,220 --> 00:18:26,180
of questions from list Kia forget most

00:18:22,310 --> 00:18:27,680
things in this Kia when was this outcome

00:18:26,180 --> 00:18:29,630
not be true so you've got a scenario

00:18:27,680 --> 00:18:30,950
saying I spend 100 pounds and I get 50

00:18:29,630 --> 00:18:32,750
points you can start asking questions

00:18:30,950 --> 00:18:34,610
like are there any cases where we

00:18:32,750 --> 00:18:37,220
wouldn't earn the points if I spent 100

00:18:34,610 --> 00:18:39,170
pounds having those real values in

00:18:37,220 --> 00:18:41,600
there's going to help oh yeah actually

00:18:39,170 --> 00:18:43,670
if you're a member of staff you won't

00:18:41,600 --> 00:18:45,920
learn the points I've slowly discovered

00:18:43,670 --> 00:18:47,660
a whole new set of stories that you're

00:18:45,920 --> 00:18:50,960
going to have to build about staff

00:18:47,660 --> 00:18:52,850
discounts what other outcomes are there

00:18:50,960 --> 00:18:56,540
I on the points but also something else

00:18:52,850 --> 00:18:58,790
happens I can get ticket or a go on an

00:18:56,540 --> 00:19:00,800
aeroplane there's probably other other

00:18:58,790 --> 00:19:03,350
things that happen one of the biggest

00:19:00,800 --> 00:19:05,930
problems you see with with people trying

00:19:03,350 --> 00:19:07,840
to do BDD is the only outcome they have

00:19:05,930 --> 00:19:10,310
is I see a message on the screen

00:19:07,840 --> 00:19:12,890
and you kind of say that's an easy test

00:19:10,310 --> 00:19:14,870
to pass when I click the button I should

00:19:12,890 --> 00:19:17,630
see congratulations you've purchased the

00:19:14,870 --> 00:19:20,360
holiday that's easy to implement you

00:19:17,630 --> 00:19:22,340
just echo some strings there's probably

00:19:20,360 --> 00:19:25,840
other things are happening something

00:19:22,340 --> 00:19:25,840
gets reserved in another system

00:19:26,100 --> 00:19:30,160
so this implementation detail matters is

00:19:28,870 --> 00:19:31,870
natural for people to start talking

00:19:30,160 --> 00:19:34,030
about I want a button I can click which

00:19:31,870 --> 00:19:36,760
don't capture that in there in the

00:19:34,030 --> 00:19:39,160
scenario there's better ways to talk to

00:19:36,760 --> 00:19:41,650
people about user interfaces more

00:19:39,160 --> 00:19:43,750
graphical ways maybe the mark on a

00:19:41,650 --> 00:19:46,930
whiteboard in wireframes trying to

00:19:43,750 --> 00:19:50,200
capture UI detail in Texas is pretty

00:19:46,930 --> 00:19:51,400
much a waste opponent but remember these

00:19:50,200 --> 00:19:52,750
things aren't contracts it's a

00:19:51,400 --> 00:19:54,580
conversation you're having to try and

00:19:52,750 --> 00:19:56,050
understand what the bills you're not

00:19:54,580 --> 00:19:57,190
forming a contract and you're going to

00:19:56,050 --> 00:19:58,780
hit them over the head with it if they

00:19:57,190 --> 00:20:00,610
change their minds it's just the kind of

00:19:58,780 --> 00:20:04,930
living document this is what we think is

00:20:00,610 --> 00:20:07,930
going to work so shared understanding of

00:20:04,930 --> 00:20:09,490
a feature the starting definition is

00:20:07,930 --> 00:20:11,470
done so like if we don't have another

00:20:09,490 --> 00:20:12,640
conversation between now and refinishing

00:20:11,470 --> 00:20:15,280
the work and it does all these things

00:20:12,640 --> 00:20:16,660
everyone's going to be happy I hope you

00:20:15,280 --> 00:20:17,920
might have a better idea the business

00:20:16,660 --> 00:20:21,010
might come up with a much better idea

00:20:17,920 --> 00:20:25,750
tomorrow and we can revisit it have

00:20:21,010 --> 00:20:28,000
another conversation there give an

00:20:25,750 --> 00:20:29,980
objective indication of how to test the

00:20:28,000 --> 00:20:31,360
feature so I touched on that even if

00:20:29,980 --> 00:20:32,890
you're not doing automated testing

00:20:31,360 --> 00:20:34,930
having examples is going to give you a

00:20:32,890 --> 00:20:38,170
bunch of test cases so you can get a

00:20:34,930 --> 00:20:39,340
person to read the eight scenarios you

00:20:38,170 --> 00:20:42,750
generated for that feature and just

00:20:39,340 --> 00:20:44,950
check each one works manually testing it

00:20:42,750 --> 00:20:46,480
obviously you'll want to automate it cuz

00:20:44,950 --> 00:20:49,270
I think most of people in the room read

00:20:46,480 --> 00:20:52,300
developers and are lazy so we don't want

00:20:49,270 --> 00:20:53,530
to sit there clicking on things even

00:20:52,300 --> 00:20:55,600
testers don't want to sit there clicking

00:20:53,530 --> 00:20:57,100
on things they want to be doing

00:20:55,600 --> 00:21:01,630
exploratory testing and thinking about

00:20:57,100 --> 00:21:03,250
the system that's essentially BDD in 20

00:21:01,630 --> 00:21:09,940
minutes let's talk about the main driven

00:21:03,250 --> 00:21:11,560
design DVD is a different didi and the

00:21:09,940 --> 00:21:15,100
hardest thing to remember is that the

00:21:11,560 --> 00:21:16,930
last B stands for design not development

00:21:15,100 --> 00:21:20,940
and as long as you can remember that

00:21:16,930 --> 00:21:20,940
your your one up on most people

00:21:21,120 --> 00:21:27,130
mainstream designers of different set

00:21:23,020 --> 00:21:30,430
practices and the point of the major in

00:21:27,130 --> 00:21:32,500
design is that the domain model the

00:21:30,430 --> 00:21:35,470
business model the business

00:21:32,500 --> 00:21:36,630
understanding drives the design of your

00:21:35,470 --> 00:21:39,370
system

00:21:36,630 --> 00:21:42,220
so BDD is about that the behavior of the

00:21:39,370 --> 00:21:43,539
system is integrated into the workflow

00:21:42,220 --> 00:21:47,320
of the development of how we build the

00:21:43,539 --> 00:21:49,270
system GTD is that the understanding the

00:21:47,320 --> 00:21:52,210
business is central to the way we write

00:21:49,270 --> 00:21:54,130
the software so try and understand the

00:21:52,210 --> 00:21:56,049
business first that and then make this

00:21:54,130 --> 00:21:59,679
software reflect that understanding as

00:21:56,049 --> 00:22:02,890
much as possible DT is very BDD is a

00:21:59,679 --> 00:22:05,919
very big feel like BDD there's no

00:22:02,890 --> 00:22:07,390
Christmas boundary to it where you say

00:22:05,919 --> 00:22:10,029
this this is in or out of BDD

00:22:07,390 --> 00:22:14,110
it's just a bunch of people talking to

00:22:10,029 --> 00:22:15,760
how to do software correctly the AIRC

00:22:14,110 --> 00:22:18,640
evidence had a nice phrase from his

00:22:15,760 --> 00:22:20,529
Disney book it tackles complexity by

00:22:18,640 --> 00:22:23,529
focusing the team's attention on model

00:22:20,529 --> 00:22:24,909
of knowledge of the domain and it's

00:22:23,529 --> 00:22:29,289
something that a lot of development

00:22:24,909 --> 00:22:30,580
teams shy away from they don't want to

00:22:29,289 --> 00:22:34,809
invest time in understanding the

00:22:30,580 --> 00:22:38,559
business they want to ignore as many

00:22:34,809 --> 00:22:41,830
details of the business as possible to

00:22:38,559 --> 00:22:43,240
keep the domain model simple so the

00:22:41,830 --> 00:22:45,549
business tell you about these complex

00:22:43,240 --> 00:22:47,799
things that we have to deal with and as

00:22:45,549 --> 00:22:50,559
developers sometimes we say okay so I'll

00:22:47,799 --> 00:22:52,510
build you a form and that will save the

00:22:50,559 --> 00:22:54,159
stuff in the database and all of those

00:22:52,510 --> 00:22:55,360
rules she just told me about you can

00:22:54,159 --> 00:22:58,419
enforce them in your head when you're

00:22:55,360 --> 00:23:00,610
typing stuff into the form and my model

00:22:58,419 --> 00:23:03,970
is going to be really simple I'm just

00:23:00,610 --> 00:23:05,980
saving some stuff when you invest time

00:23:03,970 --> 00:23:09,880
in trying to understand the rules of a

00:23:05,980 --> 00:23:11,679
business it really pays off in the

00:23:09,880 --> 00:23:15,490
software the software suddenly does

00:23:11,679 --> 00:23:17,260
stuff for businesses instead of when

00:23:15,490 --> 00:23:18,610
you've got a very weak understanding the

00:23:17,260 --> 00:23:21,490
business domain and you build a crud

00:23:18,610 --> 00:23:22,840
system all those rules are still there

00:23:21,490 --> 00:23:24,580
they're just being enforced manually by

00:23:22,840 --> 00:23:25,960
people they're looking at one field and

00:23:24,580 --> 00:23:29,950
typing it into another place in a

00:23:25,960 --> 00:23:31,360
different page that kind of nonsense you

00:23:29,950 --> 00:23:34,120
as a developer have to understand the

00:23:31,360 --> 00:23:36,940
business and build systems that make

00:23:34,120 --> 00:23:40,990
things easier and people who use the

00:23:36,940 --> 00:23:42,850
system how'd you do that is an important

00:23:40,990 --> 00:23:46,360
concept in DVD called ubiquitous

00:23:42,850 --> 00:23:47,830
language turns out already

00:23:46,360 --> 00:23:52,060
practices come down to communicating

00:23:47,830 --> 00:23:53,740
better the people human computers can

00:23:52,060 --> 00:23:56,440
communicate with each other really well

00:23:53,740 --> 00:24:01,600
it's people communicating with people is

00:23:56,440 --> 00:24:03,760
always the hard bit so it's a ubiquitous

00:24:01,600 --> 00:24:06,190
languages a shared way is talking about

00:24:03,760 --> 00:24:09,690
the main concepts it means when I say a

00:24:06,190 --> 00:24:11,710
particular words to do with the business

00:24:09,690 --> 00:24:12,690
everyone else in the team understands

00:24:11,710 --> 00:24:16,210
what that word means

00:24:12,690 --> 00:24:18,160
via kind of telepathy it's hard to

00:24:16,210 --> 00:24:20,380
achieve and these were all taught we're

00:24:18,160 --> 00:24:21,760
all on the same page or using the same

00:24:20,380 --> 00:24:24,640
terms to talk about things in the

00:24:21,760 --> 00:24:26,200
software now reduces across the

00:24:24,640 --> 00:24:28,870
translation when business and developers

00:24:26,200 --> 00:24:31,540
communicate you sometimes get a

00:24:28,870 --> 00:24:34,750
situation where the business person says

00:24:31,540 --> 00:24:39,040
the invoice doesn't have any line items

00:24:34,750 --> 00:24:40,600
on it and the developer has to mentally

00:24:39,040 --> 00:24:44,410
translate that and say what you're

00:24:40,600 --> 00:24:48,610
saying is that the Finance item lists

00:24:44,410 --> 00:24:50,560
aggregate doesn't have any finance items

00:24:48,610 --> 00:24:51,970
attached to it because I call it

00:24:50,560 --> 00:24:54,520
something different in the software the

00:24:51,970 --> 00:24:57,940
thing that real people use to search the

00:24:54,520 --> 00:24:59,740
same context and that's the cut that's

00:24:57,940 --> 00:25:00,970
what cost of translation means every

00:24:59,740 --> 00:25:03,430
time having a conversation we're having

00:25:00,970 --> 00:25:05,710
to map business concepts onto coded

00:25:03,430 --> 00:25:07,360
concepts that are using a different

00:25:05,710 --> 00:25:10,360
vocabulary and different relationships

00:25:07,360 --> 00:25:14,800
for anything and it's a small cost it

00:25:10,360 --> 00:25:16,090
really adds up so we should try and

00:25:14,800 --> 00:25:17,860
establish in use terms that the

00:25:16,090 --> 00:25:19,120
businesses are going to understand so

00:25:17,860 --> 00:25:22,450
when there's a problem a modeling

00:25:19,120 --> 00:25:23,530
problem in the code I can explain it to

00:25:22,450 --> 00:25:25,120
some in the business and they'll

00:25:23,530 --> 00:25:28,090
understand what I'm talking about that's

00:25:25,120 --> 00:25:30,190
the idea I'm not sure what should happen

00:25:28,090 --> 00:25:32,680
when there are no line items on the

00:25:30,190 --> 00:25:34,630
invoice how do we resolve that and the

00:25:32,680 --> 00:25:36,280
finance expert can tell you because they

00:25:34,630 --> 00:25:39,160
figured out how to do that in the 18th

00:25:36,280 --> 00:25:41,940
century and the modeling problems

00:25:39,160 --> 00:25:44,620
actually been solved in the real world

00:25:41,940 --> 00:25:47,020
all you have to listing put it in both

00:25:44,620 --> 00:25:48,460
lists and we call it double ledger you

00:25:47,020 --> 00:25:49,900
have to learn all this stuff but then

00:25:48,460 --> 00:25:52,530
the system is going to really map well

00:25:49,900 --> 00:25:52,530
onto the business

00:25:56,500 --> 00:26:05,000
the modeling by example is a phrase

00:26:01,000 --> 00:26:08,450
coined by this guy evident who works

00:26:05,000 --> 00:26:12,710
with me in Vika probably a year and a

00:26:08,450 --> 00:26:19,880
half ago I wanted him to call it B D DD

00:26:12,710 --> 00:26:21,800
DD and you can go for it and it's a few

00:26:19,880 --> 00:26:28,400
things a few things claim came together

00:26:21,800 --> 00:26:32,000
so we were doing V DD he played a big

00:26:28,400 --> 00:26:36,980
part in in embedding BD D practices in

00:26:32,000 --> 00:26:38,990
in Vika and we were trying to you know

00:26:36,980 --> 00:26:39,950
work out how to be as effective as

00:26:38,990 --> 00:26:42,470
possible using behavior-driven

00:26:39,950 --> 00:26:45,470
development so having these

00:26:42,470 --> 00:26:48,190
conversations with customers to come up

00:26:45,470 --> 00:26:50,540
with examples of the system's behavior

00:26:48,190 --> 00:26:53,600
we're putting a lot of time and effort

00:26:50,540 --> 00:26:56,150
into avenues conversations and we

00:26:53,600 --> 00:26:59,090
started to realize that this D DD

00:26:56,150 --> 00:27:01,280
concept of ubiquitous language really

00:26:59,090 --> 00:27:02,960
applied that the requirements

00:27:01,280 --> 00:27:06,200
conversations went a lot better when

00:27:02,960 --> 00:27:09,020
you're also trying to understand the

00:27:06,200 --> 00:27:11,780
complexity of the business so you're not

00:27:09,020 --> 00:27:14,840
having the conversation as a kind of

00:27:11,780 --> 00:27:15,530
requirements dump conversation just tell

00:27:14,840 --> 00:27:18,640
me what you want

00:27:15,530 --> 00:27:20,870
and I'll build it for you leave me alone

00:27:18,640 --> 00:27:23,630
you're really digging the business and

00:27:20,870 --> 00:27:26,690
asking a lot of active questions so in

00:27:23,630 --> 00:27:31,820
his blog post which blew my mind when I

00:27:26,690 --> 00:27:33,800
read it um here's the core proposition

00:27:31,820 --> 00:27:36,110
of modeling by example if you put enough

00:27:33,800 --> 00:27:40,340
effort into the this example driven

00:27:36,110 --> 00:27:44,510
conversation it can also become a venue

00:27:40,340 --> 00:27:46,730
for doing your domain modeling live with

00:27:44,510 --> 00:27:48,770
the business you're going to be building

00:27:46,730 --> 00:27:52,150
the system for in a way they can

00:27:48,770 --> 00:27:52,150
understand because you're just talking

00:27:52,750 --> 00:27:58,400
cool so there are some principles the

00:27:57,860 --> 00:28:01,640
best way to

00:27:58,400 --> 00:28:06,230
understand the main model is by

00:28:01,640 --> 00:28:08,030
discussing example so what is the main

00:28:06,230 --> 00:28:11,950
model let's just cover that briefly the

00:28:08,030 --> 00:28:15,320
main model isn't the code and it's not a

00:28:11,950 --> 00:28:17,030
drawing you if you ever work on a

00:28:15,320 --> 00:28:18,170
project we have to generate UML diagram

00:28:17,030 --> 00:28:22,250
for everything

00:28:18,170 --> 00:28:24,770
judgin say the main model this kind of

00:28:22,250 --> 00:28:26,720
fuzzy thing is a middleware it's the

00:28:24,770 --> 00:28:29,030
shared understanding the whole team the

00:28:26,720 --> 00:28:33,140
developers the testers the business half

00:28:29,030 --> 00:28:35,420
of how the system operates the code is

00:28:33,140 --> 00:28:37,070
one representation is the domain model

00:28:35,420 --> 00:28:39,830
your documentation is another

00:28:37,070 --> 00:28:41,480
representation of the domain model the

00:28:39,830 --> 00:28:44,150
tests or another representation of the

00:28:41,480 --> 00:28:46,340
main model so we start looking at their

00:28:44,150 --> 00:28:48,650
BDD scenario as a representation of your

00:28:46,340 --> 00:28:52,790
domain model and one of the tools we can

00:28:48,650 --> 00:28:55,600
use to build a better system and by

00:28:52,790 --> 00:28:58,820
doing some of our modeling up front

00:28:55,600 --> 00:29:00,530
iteratively feature by feature by doing

00:28:58,820 --> 00:29:02,480
some of our modeling by having

00:29:00,530 --> 00:29:03,830
conversations with the business code

00:29:02,480 --> 00:29:05,150
gets easier because we've kind of worked

00:29:03,830 --> 00:29:09,320
out a lot of the modeling problems

00:29:05,150 --> 00:29:10,670
before we get before we hit the code so

00:29:09,320 --> 00:29:13,690
we're going to write scenarios that

00:29:10,670 --> 00:29:17,210
deliberately capture ubiquitous language

00:29:13,690 --> 00:29:21,280
the scenarios I showed earlier was fine

00:29:17,210 --> 00:29:23,780
for doing a lot of BDD and a lot of

00:29:21,280 --> 00:29:25,250
automated testing afterwards but what

00:29:23,780 --> 00:29:28,160
they weren't really focused on trying to

00:29:25,250 --> 00:29:31,730
understand how that business talks about

00:29:28,160 --> 00:29:33,710
things the scenarios should illustrate

00:29:31,730 --> 00:29:39,020
real situation so as much as possible

00:29:33,710 --> 00:29:41,780
get real data in there real detail and

00:29:39,020 --> 00:29:45,650
then directly drive the way you write

00:29:41,780 --> 00:29:49,610
the code from the examples a lot of

00:29:45,650 --> 00:29:52,250
people will generate examples then write

00:29:49,610 --> 00:29:55,250
the code then use the examples to

00:29:52,250 --> 00:30:00,350
generate automated tests this is that

00:29:55,250 --> 00:30:01,700
this kind of feature level go directly

00:30:00,350 --> 00:30:03,050
drive the code model in a way there's

00:30:01,700 --> 00:30:07,750
much more similar to testing and

00:30:03,050 --> 00:30:07,750
development in a much tighter loop

00:30:11,620 --> 00:30:17,130
so when I got the second half I will

00:30:13,450 --> 00:30:17,130
show you how to do that kind of thing so

00:30:18,300 --> 00:30:26,530
directly drive the code model so just

00:30:22,360 --> 00:30:28,540
like a venture to using behalf who's

00:30:26,530 --> 00:30:29,800
using B hat at a layer other than

00:30:28,540 --> 00:30:32,560
driving the user interface of your

00:30:29,800 --> 00:30:39,130
application just jackal know few other

00:30:32,560 --> 00:30:42,580
people the B hat is one of this family

00:30:39,130 --> 00:30:45,730
of tools cool cucumber you write out in

00:30:42,580 --> 00:30:49,630
natural language I can play English from

00:30:45,730 --> 00:30:50,530
now the attendees of the languages you

00:30:49,630 --> 00:30:53,350
write in English

00:30:50,530 --> 00:30:55,720
some examples of the behavior of the

00:30:53,350 --> 00:30:58,330
system and then you use this tool to

00:30:55,720 --> 00:31:00,610
drive your real application based on

00:30:58,330 --> 00:31:04,360
those outlines and the tool says yes or

00:31:00,610 --> 00:31:07,620
no to whether it works sounds good

00:31:04,360 --> 00:31:10,900
and because most people interact with

00:31:07,620 --> 00:31:13,600
software through a user interface and in

00:31:10,900 --> 00:31:14,890
our case probably at least 80% of the

00:31:13,600 --> 00:31:18,850
projects we're talking about our web

00:31:14,890 --> 00:31:21,610
projects right it's very natural to say

00:31:18,850 --> 00:31:23,350
well this is the way hopefully I've got

00:31:21,610 --> 00:31:29,950
some kind of layering in my application

00:31:23,350 --> 00:31:31,840
you may not map using active record I've

00:31:29,950 --> 00:31:34,630
got some UI and I've got some sort of

00:31:31,840 --> 00:31:36,220
core bit if I'm really advanced the

00:31:34,630 --> 00:31:38,320
cause it might be sticked out into a few

00:31:36,220 --> 00:31:40,510
other layers like a domain there in an

00:31:38,320 --> 00:31:42,370
application layer and I've got some

00:31:40,510 --> 00:31:45,210
infrastructure like databases and queues

00:31:42,370 --> 00:31:48,370
and things that have to talk to and

00:31:45,210 --> 00:31:51,310
because a user interacts through the UI

00:31:48,370 --> 00:31:53,800
the most natural way to use the app is

00:31:51,310 --> 00:31:58,920
to use we have to drive your user

00:31:53,800 --> 00:31:58,920
interface and that's okay

00:32:00,090 --> 00:32:06,460
try not to have that user interface

00:32:01,930 --> 00:32:08,950
detail in your scenarios but you know

00:32:06,460 --> 00:32:14,299
this is what most people are doing

00:32:08,950 --> 00:32:20,210
there are problems they will shout out

00:32:14,299 --> 00:32:23,179
the problems with UI testing anything

00:32:20,210 --> 00:32:25,640
else changes all the time letting

00:32:23,179 --> 00:32:29,140
front-end developers keep removing my

00:32:25,640 --> 00:32:32,120
CSS selectors yeah it's kind of fragile

00:32:29,140 --> 00:32:33,409
things time out and then you run the

00:32:32,120 --> 00:32:35,770
build again and it's fine the second

00:32:33,409 --> 00:32:38,299
time around but it's a three hour build

00:32:35,770 --> 00:32:39,409
so the first pilot time down I mean you

00:32:38,299 --> 00:32:41,929
know that we started it and it passed

00:32:39,409 --> 00:32:44,720
the second time so that's how I spent my

00:32:41,929 --> 00:32:47,990
day I did a code change waited for it to

00:32:44,720 --> 00:32:55,010
fail we started to build path felt

00:32:47,990 --> 00:32:56,929
productive for now and and that's just

00:32:55,010 --> 00:32:58,909
the nature of it you know when you're

00:32:56,929 --> 00:33:01,039
going through the UI you're going

00:32:58,909 --> 00:33:03,020
through a whole load of stuff you're

00:33:01,039 --> 00:33:05,870
testing that the web works you're

00:33:03,020 --> 00:33:08,960
testing that nginx works you're testing

00:33:05,870 --> 00:33:10,909
that databases retrieve records and

00:33:08,960 --> 00:33:14,630
Aspen's retrieve records is a lot stuff

00:33:10,909 --> 00:33:16,280
that involved so the user interface

00:33:14,630 --> 00:33:18,530
probably iterates quicker than your

00:33:16,280 --> 00:33:20,450
business rules do least of a lot of

00:33:18,530 --> 00:33:22,250
established businesses they you know

00:33:20,450 --> 00:33:25,030
finance companies don't change their

00:33:22,250 --> 00:33:29,640
rules as often as they refresh their

00:33:25,030 --> 00:33:32,590
work their UI slows of user interface I

00:33:29,640 --> 00:33:35,929
[Music]

00:33:32,590 --> 00:33:37,370
don't have a slide about it but what's

00:33:35,929 --> 00:33:40,070
happening is that when we're testing to

00:33:37,370 --> 00:33:42,409
use the user interface assuming we've

00:33:40,070 --> 00:33:45,860
got these nice BDD 'smelliot they're

00:33:42,409 --> 00:33:47,330
capturing business cases when you test

00:33:45,860 --> 00:33:49,419
through the UI what you're doing is

00:33:47,330 --> 00:33:53,360
you're making sure your user interface

00:33:49,419 --> 00:33:56,299
supports those business cases in a nice

00:33:53,360 --> 00:33:58,280
way so there's a kind of pressure a very

00:33:56,299 --> 00:33:59,809
strong pressure if your user interface

00:33:58,280 --> 00:34:04,760
doesn't actually support those actions

00:33:59,809 --> 00:34:06,679
the tests are going to fail right but

00:34:04,760 --> 00:34:09,760
between the UI and the domain model is

00:34:06,679 --> 00:34:12,230
another layer there's an API here

00:34:09,760 --> 00:34:16,280
there's things that your controller

00:34:12,230 --> 00:34:18,200
calls in the core of your application

00:34:16,280 --> 00:34:20,240
and there's nothing that's making sure

00:34:18,200 --> 00:34:22,970
that that's a good API that supports the

00:34:20,240 --> 00:34:24,800
cases there's nothing that's making sure

00:34:22,970 --> 00:34:28,790
the logic is separated out between these

00:34:24,800 --> 00:34:32,470
layers so important practically modeling

00:34:28,790 --> 00:34:36,110
by example is to test the domain first

00:34:32,470 --> 00:34:38,929
test the code first make something that

00:34:36,110 --> 00:34:44,350
works and then hook it up to a user

00:34:38,929 --> 00:34:44,350
interface that's an interesting concept

00:34:44,950 --> 00:34:49,010
now Bend up the whole application

00:34:47,419 --> 00:34:49,940
without a user in space for six months

00:34:49,010 --> 00:34:51,050
that would be crazy

00:34:49,940 --> 00:34:53,710
we're just saying when you're working on

00:34:51,050 --> 00:34:56,419
a feature get it working in PHP first

00:34:53,710 --> 00:35:01,280
and then then we'll think about the user

00:34:56,419 --> 00:35:03,050
interface there's been a problem here if

00:35:01,280 --> 00:35:05,930
I'm testing my domain model with the

00:35:03,050 --> 00:35:09,590
real infrastructure similar problems

00:35:05,930 --> 00:35:13,220
it's going to be slow I'm testing it

00:35:09,590 --> 00:35:14,720
with a real my scroll thing it's going

00:35:13,220 --> 00:35:20,590
to be slower than if I was just testing

00:35:14,720 --> 00:35:22,960
PHP going to be brittle

00:35:20,590 --> 00:35:25,280
I've worked places where we have a

00:35:22,960 --> 00:35:27,940
expensive license to the database

00:35:25,280 --> 00:35:30,369
because someone made a bad decision and

00:35:27,940 --> 00:35:32,930
the developers can't have a database

00:35:30,369 --> 00:35:35,240
especially when they're on the train so

00:35:32,930 --> 00:35:38,300
there's a lot of lot of disadvantages to

00:35:35,240 --> 00:35:39,980
testing with infrastructure when you

00:35:38,300 --> 00:35:41,240
look at the kind but when you're testing

00:35:39,980 --> 00:35:43,100
a bunch of business cases and you're

00:35:41,240 --> 00:35:44,450
using the real infrastructure sometimes

00:35:43,100 --> 00:35:46,310
you look at what the real database is

00:35:44,450 --> 00:35:48,410
doing and you're like I've got a

00:35:46,310 --> 00:35:51,500
thousand tests and in each case it's

00:35:48,410 --> 00:35:53,450
just doing fine by Odie I don't need to

00:35:51,500 --> 00:35:55,970
test a thousand times that find by ID

00:35:53,450 --> 00:35:58,340
works on this table I'm pretty confident

00:35:55,970 --> 00:36:02,050
that's going to work on a test these

00:35:58,340 --> 00:36:02,050
interesting different business cases

00:36:06,960 --> 00:36:10,650
so you can get rid of your

00:36:08,280 --> 00:36:14,730
infrastructure as well and just test

00:36:10,650 --> 00:36:16,740
your middle layer you going to test the

00:36:14,730 --> 00:36:22,079
database later but let's not worry about

00:36:16,740 --> 00:36:25,410
it immediately so the model by example

00:36:22,079 --> 00:36:27,660
you start by writing good scenarios and

00:36:25,410 --> 00:36:29,520
then you test the core of your

00:36:27,660 --> 00:36:33,720
application let's talk about the

00:36:29,520 --> 00:36:36,480
scenarios here's what I started with

00:36:33,720 --> 00:36:38,700
these are fine for testing it's easy to

00:36:36,480 --> 00:36:44,790
read them you understand what's

00:36:38,700 --> 00:36:46,559
happening in each case they're good for

00:36:44,790 --> 00:36:48,030
verification however when I come and

00:36:46,559 --> 00:36:50,700
build this system it's not a lot there

00:36:48,030 --> 00:36:52,400
to help me as a developer I'm going to

00:36:50,700 --> 00:36:55,339
have to come up with a domain model

00:36:52,400 --> 00:36:58,680
there is a really a domain model there

00:36:55,339 --> 00:37:00,240
there's just inputs and outputs this is

00:36:58,680 --> 00:37:02,849
this is what in modeling by example

00:37:00,240 --> 00:37:06,329
we're trying to add I want to add some

00:37:02,849 --> 00:37:09,599
domain modeling I'm going to add some

00:37:06,329 --> 00:37:11,880
detail and if the detail doesn't map

00:37:09,599 --> 00:37:13,890
with the businesses understanding

00:37:11,880 --> 00:37:15,690
they're going to notice it because this

00:37:13,890 --> 00:37:18,270
is in English and they're going to tell

00:37:15,690 --> 00:37:19,980
me if I'm adding a complicated domain

00:37:18,270 --> 00:37:20,970
model in my code no one's going to look

00:37:19,980 --> 00:37:23,970
at that and they're not going to tell me

00:37:20,970 --> 00:37:30,990
it does wrong one thing is to add

00:37:23,970 --> 00:37:32,640
realistic details there's a lot of

00:37:30,990 --> 00:37:35,940
detail for instance about which flight

00:37:32,640 --> 00:37:37,559
and gifts on taking and this is a flight

00:37:35,940 --> 00:37:43,880
let's let's talk a bit about what

00:37:37,559 --> 00:37:43,880
flights are you can ask questions like I

00:37:44,240 --> 00:37:51,180
just shows that a flight from London to

00:37:47,760 --> 00:37:53,490
Manchester cost 60 pounds background is

00:37:51,180 --> 00:37:54,930
just like context that's going to apply

00:37:53,490 --> 00:37:58,530
to all of the scenarios and we're just

00:37:54,930 --> 00:38:01,530
going to focus on that first one means

00:37:58,530 --> 00:38:03,180
you can have nice big font when I fly

00:38:01,530 --> 00:38:04,920
from London to Manchester and I pay with

00:38:03,180 --> 00:38:06,480
cash then I should pay fifty pounds for

00:38:04,920 --> 00:38:08,700
the flight and I should get ten pounds

00:38:06,480 --> 00:38:10,859
tax I should get fifty point so better

00:38:08,700 --> 00:38:13,440
this detail that flights have a kind of

00:38:10,859 --> 00:38:17,170
identity that's from London to

00:38:13,440 --> 00:38:18,309
Manchester the city

00:38:17,170 --> 00:38:21,910
I'm going to defect the automation

00:38:18,309 --> 00:38:23,859
really it's just deliberately adding

00:38:21,910 --> 00:38:25,930
these things so when someone who works

00:38:23,859 --> 00:38:27,460
for Airlines reads it they think is like

00:38:25,930 --> 00:38:30,880
for London to Manchester that's like the

00:38:27,460 --> 00:38:35,200
real world that I operate in I could get

00:38:30,880 --> 00:38:37,240
engaged in this conversation the harder

00:38:35,200 --> 00:38:39,880
thing is to actively seek terms from the

00:38:37,240 --> 00:38:41,470
domain so it's quite easy to show this

00:38:39,880 --> 00:38:44,140
to someone and they say yes that's how

00:38:41,470 --> 00:38:45,880
it should work you have to then drill in

00:38:44,140 --> 00:38:48,640
and say is this really how you think

00:38:45,880 --> 00:38:50,440
about it I've made it just in writing it

00:38:48,640 --> 00:38:54,549
so I've made a lot of assumptions about

00:38:50,440 --> 00:38:58,299
the domain model a slight goes between

00:38:54,549 --> 00:39:00,250
two points and has a cost I throw like

00:38:58,299 --> 00:39:02,710
spots on that databases anything that

00:39:00,250 --> 00:39:04,140
you imagine a flight has a cost is that

00:39:02,710 --> 00:39:06,369
true

00:39:04,140 --> 00:39:07,660
other changes in future where maybe

00:39:06,369 --> 00:39:09,819
there's multiple costs for the same

00:39:07,660 --> 00:39:12,089
flight do I want to design it in a way

00:39:09,819 --> 00:39:16,540
that's going to support those changes I

00:39:12,089 --> 00:39:18,940
can only what I can't mitigate the

00:39:16,540 --> 00:39:20,500
future too much but well a good way of

00:39:18,940 --> 00:39:22,059
mitigating these futures for me to build

00:39:20,500 --> 00:39:24,250
the system in a way that matches your

00:39:22,059 --> 00:39:25,990
understanding the business thinks of

00:39:24,250 --> 00:39:27,730
course the flight is over here and the

00:39:25,990 --> 00:39:30,069
price is over here and they're

00:39:27,730 --> 00:39:31,299
completely different things I can come

00:39:30,069 --> 00:39:32,920
up with anything where we have 80

00:39:31,299 --> 00:39:34,660
different prices for a particular flight

00:39:32,920 --> 00:39:37,240
that's going to break my plane model if

00:39:34,660 --> 00:39:38,890
I didn't match your understanding if my

00:39:37,240 --> 00:39:42,069
understanding with a slight had a price

00:39:38,890 --> 00:39:42,940
on it might be then I have that

00:39:42,069 --> 00:39:44,410
situation where a new business

00:39:42,940 --> 00:39:47,500
requirement completely breaks your

00:39:44,410 --> 00:39:48,790
domain model yeah you say that's going

00:39:47,500 --> 00:39:50,339
to take six months and we have to delete

00:39:48,790 --> 00:39:52,420
all the code and start again

00:39:50,339 --> 00:39:55,000
business the same what the hell are you

00:39:52,420 --> 00:40:00,190
talking about I just want to prices for

00:39:55,000 --> 00:40:02,530
ones like so you have to ask questions

00:40:00,190 --> 00:40:04,630
like what do you call this

00:40:02,530 --> 00:40:07,780
I've used this word flight do you even

00:40:04,630 --> 00:40:09,460
call it a flights in your industry is

00:40:07,780 --> 00:40:10,869
there a better word I could use I caught

00:40:09,460 --> 00:40:12,760
a slight because I look up in the stone

00:40:10,869 --> 00:40:15,059
as a plane and say look at slight you

00:40:12,760 --> 00:40:19,359
might have an industry term for it

00:40:15,059 --> 00:40:21,549
points paying cash do you call it cash

00:40:19,359 --> 00:40:24,240
or just likes how much stupid questions

00:40:21,549 --> 00:40:27,130
but let tell me how you think about it

00:40:24,240 --> 00:40:29,559
it's the cost attached to a flight is

00:40:27,130 --> 00:40:32,140
this thing called tax is that just the

00:40:29,559 --> 00:40:34,820
word I used when I

00:40:32,140 --> 00:40:36,620
we try to do is understand how people in

00:40:34,820 --> 00:40:38,900
that business actually think about these

00:40:36,620 --> 00:40:41,270
system we want to be in a point where

00:40:38,900 --> 00:40:43,100
the changes they ask for that completely

00:40:41,270 --> 00:40:44,660
break with the main model are also

00:40:43,100 --> 00:40:46,120
completely changing their business and

00:40:44,660 --> 00:40:48,590
they're having to reprint all their

00:40:46,120 --> 00:40:49,730
marketing material and it's a big change

00:40:48,590 --> 00:40:52,460
for them as well and they're firing

00:40:49,730 --> 00:40:53,660
people and you want the easy stuff for

00:40:52,460 --> 00:40:57,170
the business - the easy stuff in the

00:40:53,660 --> 00:41:00,440
code you have to get good at listening

00:40:57,170 --> 00:41:02,510
you sometimes spot that the business

00:41:00,440 --> 00:41:03,770
person you're talking to started using a

00:41:02,510 --> 00:41:05,120
different words the word they were using

00:41:03,770 --> 00:41:07,010
yesterday and you say hang on you

00:41:05,120 --> 00:41:08,030
started calling it this thing is that

00:41:07,010 --> 00:41:12,440
the word we should have used from the

00:41:08,030 --> 00:41:14,030
first place so I might find out a bunch

00:41:12,440 --> 00:41:16,790
of things a price doesn't belong to us

00:41:14,030 --> 00:41:18,830
like a price belongs to a fair and a

00:41:16,790 --> 00:41:26,420
fair is attached to a root and a root

00:41:18,830 --> 00:41:27,950
goes between two airports and the price

00:41:26,420 --> 00:41:29,510
isn't any isn't on the flight there's

00:41:27,950 --> 00:41:31,820
like a listing system where I have to go

00:41:29,510 --> 00:41:33,110
and ask the fare listing system I want

00:41:31,820 --> 00:41:35,690
to go from London to Manchester what's

00:41:33,110 --> 00:41:37,160
the best price today this is a

00:41:35,690 --> 00:41:41,450
simplification of how Airlines actually

00:41:37,160 --> 00:41:43,490
works by the way I get quotes the cost

00:41:41,450 --> 00:41:45,710
when I buy the ticket that's an

00:41:43,490 --> 00:41:47,360
important insight if the price change is

00:41:45,710 --> 00:41:50,390
Layton I don't have to pay more because

00:41:47,360 --> 00:41:52,340
I bought my ticket already if I had a

00:41:50,390 --> 00:41:53,660
problem where historical data changes

00:41:52,340 --> 00:41:55,190
completely brightly the main model and

00:41:53,660 --> 00:41:58,670
all the rolled invoices had the wrong

00:41:55,190 --> 00:41:59,450
cost for them I know I have so this is

00:41:58,670 --> 00:42:02,840
the kind of thing that's going to help

00:41:59,450 --> 00:42:05,450
you you might end up with this given a

00:42:02,840 --> 00:42:07,310
flight X X 100 because it turns out they

00:42:05,450 --> 00:42:09,080
have a way of assigning unique IDs to

00:42:07,310 --> 00:42:13,160
flights I don't have to have an auto

00:42:09,080 --> 00:42:15,320
increment there's actually a thing and

00:42:13,160 --> 00:42:17,900
the flight flies on a route and a route

00:42:15,320 --> 00:42:20,330
is identified by Sioux Airport LHR and

00:42:17,900 --> 00:42:23,300
LAN it turns out as a way of having a

00:42:20,330 --> 00:42:25,610
unique ID for an airport as well again I

00:42:23,300 --> 00:42:29,390
don't have travel is crazy most roll

00:42:25,610 --> 00:42:34,160
number and the current list is bear for

00:42:29,390 --> 00:42:35,450
Heathrow to Manchester is 50 out so the

00:42:34,160 --> 00:42:39,020
whole new concept we didn't talk about

00:42:35,450 --> 00:42:40,650
before I just got to the conversation is

00:42:39,020 --> 00:42:43,410
that the house sort of listing

00:42:40,650 --> 00:42:47,250
system that have to consult that's maybe

00:42:43,410 --> 00:42:51,089
a different system it's not just a table

00:42:47,250 --> 00:42:53,099
with the slide in the price when I'm

00:42:51,089 --> 00:42:54,859
issued a ticket so it's when I'm issued

00:42:53,099 --> 00:42:58,920
a ticket and they call it issuing I

00:42:54,859 --> 00:42:59,309
don't call it buying because you pay

00:42:58,920 --> 00:43:02,520
later

00:42:59,309 --> 00:43:04,770
I pay 50 pounds cash for a ticket the

00:43:02,520 --> 00:43:06,059
ticket should be completely paid I would

00:43:04,770 --> 00:43:08,760
think it should be worth fifty an

00:43:06,059 --> 00:43:10,230
oilseed point it's the same scenario

00:43:08,760 --> 00:43:12,119
there's just a lot more detail in there

00:43:10,230 --> 00:43:13,349
and someone who's reading that is going

00:43:12,119 --> 00:43:16,589
to understand a lot more about the

00:43:13,349 --> 00:43:18,390
business in terms of verifying it in a

00:43:16,589 --> 00:43:21,660
test it's not really added a lot to the

00:43:18,390 --> 00:43:22,619
outline of the test slide right but

00:43:21,660 --> 00:43:24,510
because I'm going to use this to drive

00:43:22,619 --> 00:43:25,829
my codes all of these new concepts I

00:43:24,510 --> 00:43:34,049
learn about are going to be reflected in

00:43:25,829 --> 00:43:36,529
my code so let's write some code you do

00:43:34,049 --> 00:43:38,609
this first maybe just for one scenario

00:43:36,529 --> 00:43:41,819
we'll just one feature I'm going to

00:43:38,609 --> 00:43:44,099
start with the first scenario the job of

00:43:41,819 --> 00:43:47,460
B hat is to take a scenario written in

00:43:44,099 --> 00:43:50,430
gherkin and some PHP code that you write

00:43:47,460 --> 00:43:52,950
and plug them together and it says when

00:43:50,430 --> 00:43:55,970
this line of the gherkin gets hit run

00:43:52,950 --> 00:44:00,089
this PHP code that the developer wrote

00:43:55,970 --> 00:44:02,250
that's all it does so it's does it

00:44:00,089 --> 00:44:05,670
really well but that's kind of all of

00:44:02,250 --> 00:44:07,890
them so we configure a B hat thing this

00:44:05,670 --> 00:44:09,180
is just the Yama file conflict of being

00:44:07,890 --> 00:44:10,529
out this isn't that be a tutorial thing

00:44:09,180 --> 00:44:13,279
they go faster it to give you a flavor

00:44:10,529 --> 00:44:17,180
of what it feels like to work this way

00:44:13,279 --> 00:44:19,770
first a rule is a suite called core and

00:44:17,180 --> 00:44:21,119
there's a class called slight context

00:44:19,770 --> 00:44:25,470
and that's going to contain the code

00:44:21,119 --> 00:44:27,210
that you should execute then I make a

00:44:25,470 --> 00:44:29,910
flights context and that's full of

00:44:27,210 --> 00:44:31,440
methods that look like this and the

00:44:29,910 --> 00:44:34,950
methods are annotated with a pad nice

00:44:31,440 --> 00:44:37,700
little pattern that says when you see a

00:44:34,950 --> 00:44:43,690
step in the Gherkin that looks like this

00:44:37,700 --> 00:44:52,180
run this code so I run it

00:44:43,690 --> 00:44:53,440
I get this kind of output and it stops

00:44:52,180 --> 00:44:55,300
on this first step in it says you

00:44:53,440 --> 00:44:57,099
haven't really told me what to do for

00:44:55,300 --> 00:45:01,660
this first step so you now need to write

00:44:57,099 --> 00:45:05,430
from PHP so as we go through we just

00:45:01,660 --> 00:45:10,060
step by step going to write some code

00:45:05,430 --> 00:45:13,690
the tests whatever the step says I'm

00:45:10,060 --> 00:45:14,589
going to be driving the PHP directly so

00:45:13,690 --> 00:45:16,450
you have given steps

00:45:14,589 --> 00:45:19,810
this is existing context in those steps

00:45:16,450 --> 00:45:21,369
we're going to create the context the

00:45:19,810 --> 00:45:25,630
when steps which is like something

00:45:21,369 --> 00:45:28,420
happens we're going to do something and

00:45:25,630 --> 00:45:31,140
there was then steps we check something

00:45:28,420 --> 00:45:34,030
we're going to check something in PHP so

00:45:31,140 --> 00:45:37,390
some interesting principles model values

00:45:34,030 --> 00:45:40,839
value objects use objects first off this

00:45:37,390 --> 00:45:44,500
is a very good practice you'll find in a

00:45:40,839 --> 00:45:46,530
lot of domains of lots of the logic is

00:45:44,500 --> 00:45:49,000
about how values are transform or

00:45:46,530 --> 00:45:50,349
manipulated there should be objects for

00:45:49,000 --> 00:45:54,430
that rather than just throwing strings

00:45:50,349 --> 00:45:56,500
around so the work through what I'm

00:45:54,430 --> 00:45:59,349
going to do is read the English step and

00:45:56,500 --> 00:46:03,130
try and make code that really reflects

00:45:59,349 --> 00:46:10,720
the terminology used in the English and

00:46:03,130 --> 00:46:14,140
reflects the concepts being so I've

00:46:10,720 --> 00:46:15,760
renamed some of the placeholders here so

00:46:14,140 --> 00:46:17,200
when there's a step that the colon is a

00:46:15,760 --> 00:46:19,390
placeholder when there's a step that's

00:46:17,200 --> 00:46:21,400
like given a flight with this number

00:46:19,390 --> 00:46:25,660
flies from this origin to this

00:46:21,400 --> 00:46:26,740
destination route I'm just reading that

00:46:25,660 --> 00:46:30,400
and I'm trying to reflect that as

00:46:26,740 --> 00:46:32,560
closely as possible in my PHP now the

00:46:30,400 --> 00:46:34,390
same thing so there's a thing called a

00:46:32,560 --> 00:46:36,940
flight so I'm going to stand c8 a thing

00:46:34,390 --> 00:46:39,010
called slight the thing called flight

00:46:36,940 --> 00:46:40,390
number you're going to make it I've got

00:46:39,010 --> 00:46:42,520
value object that represents the flight

00:46:40,390 --> 00:46:46,359
number can't be created with invalid

00:46:42,520 --> 00:46:48,130
flight numbers that sounds handy and

00:46:46,359 --> 00:46:49,920
there's a thing called a root and the

00:46:48,130 --> 00:46:52,060
root gets constructed with two airports

00:46:49,920 --> 00:46:53,530
the airport's are constructed from the

00:46:52,060 --> 00:46:56,140
string

00:46:53,530 --> 00:46:57,550
so loads of the concepts from their

00:46:56,140 --> 00:47:04,770
conversation have now been dumped into

00:46:57,550 --> 00:47:07,300
PHP some of this instantiation can be

00:47:04,770 --> 00:47:10,120
shortcutted using a hat feature called

00:47:07,300 --> 00:47:13,120
transformations this is just a quick way

00:47:10,120 --> 00:47:17,310
of doing this casting from strings to

00:47:13,120 --> 00:47:17,310
value object I won't go too much into it

00:47:17,550 --> 00:47:22,360
but it's basically simplifies my code

00:47:19,960 --> 00:47:27,340
and I get B hat to do some of the value

00:47:22,360 --> 00:47:28,540
objects transformation so when I run B

00:47:27,340 --> 00:47:32,410
now I get an error because I haven't

00:47:28,540 --> 00:47:35,680
none of these things exist this is very

00:47:32,410 --> 00:47:37,480
much like TVB right I wrote the code

00:47:35,680 --> 00:47:39,250
that I wanted to exist and I spent my

00:47:37,480 --> 00:47:42,880
time thinking about that codes API and

00:47:39,250 --> 00:47:45,910
now have to write the code and because I

00:47:42,880 --> 00:47:50,320
like unit tests on what do i do first I

00:47:45,910 --> 00:47:53,830
need an object where do I start so just

00:47:50,320 --> 00:47:56,350
like an object write a test so I'm going

00:47:53,830 --> 00:47:57,610
to write a unit test for that object so

00:47:56,350 --> 00:47:59,530
I've got these B hat tests and making

00:47:57,610 --> 00:48:00,880
sure the whole thing works together I'm

00:47:59,530 --> 00:48:03,070
still going to write unit tests to the

00:48:00,880 --> 00:48:09,970
individual objects and go faster I use

00:48:03,070 --> 00:48:12,130
PHP spec so for example this thing

00:48:09,970 --> 00:48:13,990
called an airport it can be constructed

00:48:12,130 --> 00:48:16,120
from a lecture art then when you call as

00:48:13,990 --> 00:48:17,590
code you should return lhr you're not

00:48:16,120 --> 00:48:20,560
familiar with PHP spec don't worry about

00:48:17,590 --> 00:48:22,870
it just unit testing it can't be

00:48:20,560 --> 00:48:25,000
creative than invalid code so if it's

00:48:22,870 --> 00:48:26,080
constructed from this weird code it

00:48:25,000 --> 00:48:29,590
should throw an exception during

00:48:26,080 --> 00:48:31,030
instantiation very very simple test but

00:48:29,590 --> 00:48:36,190
just checking a few things that we want

00:48:31,030 --> 00:48:39,900
that plaster display and this will

00:48:36,190 --> 00:48:39,900
compel me to write to the airport class

00:48:40,500 --> 00:48:45,550
it can be constructed from the code it's

00:48:43,690 --> 00:48:48,390
got a regex for the codes it likes it

00:48:45,550 --> 00:48:50,410
can turn itself into a string again I

00:48:48,390 --> 00:48:55,540
should probably put the turn types on

00:48:50,410 --> 00:48:58,420
this yes the modern age now once I've

00:48:55,540 --> 00:49:00,760
done that I can run b-hat again and that

00:48:58,420 --> 00:49:03,640
step now passes so all of these objects

00:49:00,760 --> 00:49:05,530
that I get for all of the objects all

00:49:03,640 --> 00:49:07,030
these concepts by instantiated in that

00:49:05,530 --> 00:49:08,380
step now instantiate

00:49:07,030 --> 00:49:09,670
me and they've got objects and I've

00:49:08,380 --> 00:49:10,150
actually discovered a lot about my

00:49:09,670 --> 00:49:15,610
domain

00:49:10,150 --> 00:49:18,430
I've got quite a few values model so it

00:49:15,610 --> 00:49:21,160
goes the next step the currently listed

00:49:18,430 --> 00:49:23,380
fare for this route is this amount of

00:49:21,160 --> 00:49:25,420
money this is interesting to have to

00:49:23,380 --> 00:49:28,360
think am i building this stair listing

00:49:25,420 --> 00:49:29,830
service well it's the one that exists

00:49:28,360 --> 00:49:33,240
already it's probably one that exists

00:49:29,830 --> 00:49:34,900
already so sometimes you find boundaries

00:49:33,240 --> 00:49:36,790
somewhere where you going to talk to

00:49:34,900 --> 00:49:39,010
some other system and you just drop in

00:49:36,790 --> 00:49:41,230
an interface quite commonly as a

00:49:39,010 --> 00:49:42,940
database for some sort of repository in

00:49:41,230 --> 00:49:46,290
this case there's a list of stairs and I

00:49:42,940 --> 00:49:46,290
don't want to worry about it right now

00:49:46,470 --> 00:49:51,300
so I'm going to make an interface

00:49:53,220 --> 00:49:57,100
because I'm reading this text the

00:49:55,300 --> 00:49:59,200
current listed fare so the something

00:49:57,100 --> 00:50:02,650
called a current listed fare from a

00:49:59,200 --> 00:50:04,150
routes is this amount so I'm thinking

00:50:02,650 --> 00:50:08,140
about that terminology that came from a

00:50:04,150 --> 00:50:09,790
conversation there's a fare list we're

00:50:08,140 --> 00:50:11,770
gonna call that thing the fairness and I

00:50:09,790 --> 00:50:13,270
can list the fare into it I would have

00:50:11,770 --> 00:50:15,790
called it list but that's a keyword in

00:50:13,270 --> 00:50:18,280
PHP so you can't all you because this

00:50:15,790 --> 00:50:19,660
language you can't always match exactly

00:50:18,280 --> 00:50:21,310
the thing you're just trying to get as

00:50:19,660 --> 00:50:26,680
close as you can forever language you're

00:50:21,310 --> 00:50:29,820
using so you can list affair between two

00:50:26,680 --> 00:50:32,080
routes and then because I need an

00:50:29,820 --> 00:50:34,240
implementation of this if you remember

00:50:32,080 --> 00:50:37,350
we're not using real infrastructure I'll

00:50:34,240 --> 00:50:40,840
just make an object that does that

00:50:37,350 --> 00:50:42,730
really naively this is an object I'm

00:50:40,840 --> 00:50:46,600
just going to use in the test to replace

00:50:42,730 --> 00:50:49,630
the real infrastructure it's a fake fare

00:50:46,600 --> 00:50:54,250
list it just remembers the list means I

00:50:49,630 --> 00:50:55,750
can write my step the currently listed

00:50:54,250 --> 00:50:57,820
fares of it between this route is is

00:50:55,750 --> 00:51:00,400
fair I'm going to insert that into the

00:50:57,820 --> 00:51:01,600
fare list I'm just going to do cycle

00:51:00,400 --> 00:51:04,780
step by step trying to reflect the

00:51:01,600 --> 00:51:07,420
concepts that are there when we hat and

00:51:04,780 --> 00:51:08,620
that step now passes green that's

00:51:07,420 --> 00:51:13,750
complaining about the next one I haven't

00:51:08,620 --> 00:51:15,520
defined what to do in the next step so I

00:51:13,750 --> 00:51:17,080
am issued a ticket on a particular

00:51:15,520 --> 00:51:18,760
flight

00:51:17,080 --> 00:51:22,930
each Stephon doing a little bit of the

00:51:18,760 --> 00:51:25,360
main modeling I've done some of my

00:51:22,930 --> 00:51:27,130
modeling in the conversation there's a

00:51:25,360 --> 00:51:29,500
thing called a ticket and it's issued on

00:51:27,130 --> 00:51:31,720
a flight I verified that with a human

00:51:29,500 --> 00:51:33,490
who understood the business so I've got

00:51:31,720 --> 00:51:35,620
some understanding of the Delaine model

00:51:33,490 --> 00:51:38,230
but 8-step I'm now having to think how

00:51:35,620 --> 00:51:43,240
do I represent this in PHP what does

00:51:38,230 --> 00:51:44,860
this look like in PHP so you know what

00:51:43,240 --> 00:51:46,150
that's a long way of saying you might

00:51:44,860 --> 00:51:52,570
disagree with some of my design

00:51:46,150 --> 00:51:55,110
decisions here and it's it's just a

00:51:52,570 --> 00:51:57,640
point the conference is an example it

00:51:55,110 --> 00:52:00,100
does I think a good way of representing

00:51:57,640 --> 00:52:03,730
a thicket being issued on a flight is to

00:52:00,100 --> 00:52:06,580
have a thing that issues tickets and I

00:52:03,730 --> 00:52:07,600
call it a ticket issuer maybe this is

00:52:06,580 --> 00:52:09,810
one of those points we have to go and

00:52:07,600 --> 00:52:12,280
say hey what would you call that thing

00:52:09,810 --> 00:52:14,230
but I can change I can change the step

00:52:12,280 --> 00:52:15,700
so once I find out what the business

00:52:14,230 --> 00:52:18,700
calls that thing I would try and capture

00:52:15,700 --> 00:52:21,220
that in the step and in the code there's

00:52:18,700 --> 00:52:24,370
a ticket issuer that needs to know about

00:52:21,220 --> 00:52:29,260
the fare list and I say please issue me

00:52:24,370 --> 00:52:31,000
a ticket on this flight again this thing

00:52:29,260 --> 00:52:31,710
doesn't exist yet the ticket issue it

00:52:31,000 --> 00:52:34,360
doesn't exist

00:52:31,710 --> 00:52:37,150
and every time B hat failed in this kind

00:52:34,360 --> 00:52:38,410
of cycler away in fact every times we

00:52:37,150 --> 00:52:41,500
have failed are then trying to write a

00:52:38,410 --> 00:52:48,280
unit test that fails for the same reason

00:52:41,500 --> 00:52:50,230
so this is a simple spec for a ticket

00:52:48,280 --> 00:52:53,140
issuer it can issue a ticket for a

00:52:50,230 --> 00:52:54,580
flight when I ask it to issue a ticket

00:52:53,140 --> 00:52:57,100
for a flight I should get back something

00:52:54,580 --> 00:52:58,690
that's a ticket so now it's going to

00:52:57,100 --> 00:53:01,750
catch a lower level of my testing

00:52:58,690 --> 00:53:06,190
because catch it quicker and that makes

00:53:01,750 --> 00:53:08,320
me write some code makes me define a

00:53:06,190 --> 00:53:10,480
class called ticket issuer the issues

00:53:08,320 --> 00:53:12,370
with ticket on a flight and it just

00:53:10,480 --> 00:53:15,970
returns a certain just the which returns

00:53:12,370 --> 00:53:17,530
the ticket that cost 100 pounds until I

00:53:15,970 --> 00:53:19,000
get to the Zen step in my scenario I

00:53:17,530 --> 00:53:23,200
don't have to actually have any correct

00:53:19,000 --> 00:53:25,720
logic I'm mostly modeling the

00:53:23,200 --> 00:53:27,970
relationships between things so when you

00:53:25,720 --> 00:53:30,230
get to the then of the scenario that

00:53:27,970 --> 00:53:33,440
stuff has to work

00:53:30,230 --> 00:53:35,900
I run b-hat again now it's complaining

00:53:33,440 --> 00:53:41,030
it doesn't know what 50 pounds cash for

00:53:35,900 --> 00:53:42,859
the ticket is the earlier steps normally

00:53:41,030 --> 00:53:44,480
have more concepts in them cioud

00:53:42,859 --> 00:53:46,339
generating more objects in the early

00:53:44,480 --> 00:53:48,200
steps and by the end you just sort of

00:53:46,339 --> 00:53:49,820
added me like new methods and new method

00:53:48,200 --> 00:53:52,550
calls and of course this is the first

00:53:49,820 --> 00:53:54,050
scenario the first scenario in this

00:53:52,550 --> 00:53:56,270
feature when we come to model the second

00:53:54,050 --> 00:53:58,930
feature suddenly the second scenario

00:53:56,270 --> 00:54:01,190
most of these objects will be in place

00:53:58,930 --> 00:54:03,740
when I pay a certain amount to the

00:54:01,190 --> 00:54:06,050
ticket I'm just going to okay I should I

00:54:03,740 --> 00:54:08,900
wrote the ticket object a minute ago I'm

00:54:06,050 --> 00:54:11,599
going to add a pay method I could pay

00:54:08,900 --> 00:54:13,369
because it says pay in the text I don't

00:54:11,599 --> 00:54:15,829
have to think as much about what to call

00:54:13,369 --> 00:54:17,960
it because I thought about what to call

00:54:15,829 --> 00:54:20,859
it when I was talking to the rest of the

00:54:17,960 --> 00:54:23,030
team and talking to the business

00:54:20,859 --> 00:54:24,829
obviously that doesn't work because pay

00:54:23,030 --> 00:54:28,579
doesn't exist so I make a unit test that

00:54:24,829 --> 00:54:30,730
says you can pay tickets that's a really

00:54:28,579 --> 00:54:34,339
bad unit test it's going to get better

00:54:30,730 --> 00:54:35,359
but for now I just I just want to be

00:54:34,339 --> 00:54:38,240
able to call this method without

00:54:35,359 --> 00:54:43,040
anything breaking and this will compel

00:54:38,240 --> 00:54:45,980
me to write this amazing method and then

00:54:43,040 --> 00:54:47,630
that's step passage you've seen a couple

00:54:45,980 --> 00:54:49,400
of times but the main models a bit

00:54:47,630 --> 00:54:52,339
anemic here but there's not a lot of

00:54:49,400 --> 00:54:53,690
logic that's because anyone gets to then

00:54:52,339 --> 00:54:56,030
step to the scenario where we have to

00:54:53,690 --> 00:54:57,859
actually implement a lot of logic and

00:54:56,030 --> 00:54:59,990
you need to hold yourself back a bit and

00:54:57,859 --> 00:55:04,310
not try and implement everything before

00:54:59,990 --> 00:55:06,109
you've got a failing test so you get to

00:55:04,310 --> 00:55:10,369
design step the ticket should be

00:55:06,109 --> 00:55:14,180
completely paid so as to tell B hat what

00:55:10,369 --> 00:55:18,040
to do so assert that ticket is

00:55:14,180 --> 00:55:18,040
completely paid it turns true

00:55:22,750 --> 00:55:29,780
the sales cut doesn't exist yet so I

00:55:27,079 --> 00:55:35,030
write the unit test it covers the same

00:55:29,780 --> 00:55:39,260
case and and also fails it's not

00:55:35,030 --> 00:55:42,589
completely paid at the start when you

00:55:39,260 --> 00:55:44,359
pay it is completely paid and then I

00:55:42,589 --> 00:55:47,180
have to go and write some code to make

00:55:44,359 --> 00:55:48,650
that true and typically at this point

00:55:47,180 --> 00:55:51,339
you find you need to add some extra

00:55:48,650 --> 00:55:53,020
methods to the other objects for

00:55:51,339 --> 00:55:55,790
internal calls

00:55:53,020 --> 00:55:57,730
so the b-hat is interacting from the

00:55:55,790 --> 00:55:59,720
outside the kind of application API

00:55:57,730 --> 00:56:00,950
often the objects will then have to talk

00:55:59,720 --> 00:56:03,619
to each other a little bit so you'll add

00:56:00,950 --> 00:56:07,790
a few few methods those objects and in

00:56:03,619 --> 00:56:11,180
each case you're adding units here so

00:56:07,790 --> 00:56:15,740
have to write some new unit tests for my

00:56:11,180 --> 00:56:18,740
fair object has to add some logic to the

00:56:15,740 --> 00:56:22,579
fair object and then find some more unit

00:56:18,740 --> 00:56:25,880
tests I need to vote for the fair change

00:56:22,579 --> 00:56:29,750
it and then we get to the point where it

00:56:25,880 --> 00:56:32,960
works in that everything executes but

00:56:29,750 --> 00:56:35,990
the logic doesn't work logic doesn't

00:56:32,960 --> 00:56:39,050
work because tickets if you remember I

00:56:35,990 --> 00:56:40,670
hard-coded a cost into the ticket so

00:56:39,050 --> 00:56:44,420
write your unit test that failed for the

00:56:40,670 --> 00:56:46,910
same reason when I have a route between

00:56:44,420 --> 00:56:48,980
Heathrow and Manchester I have a flight

00:56:46,910 --> 00:56:51,410
on that route and I try and find the

00:56:48,980 --> 00:56:54,829
fare others are kind of duplicating it

00:56:51,410 --> 00:57:00,410
and then I write the logic inside my

00:56:54,829 --> 00:57:05,210
objects to actually pass the test then

00:57:00,410 --> 00:57:06,470
for passing the next step

00:57:05,210 --> 00:57:09,230
think it should be worth fifty loyalty

00:57:06,470 --> 00:57:12,020
points I then have to do the same cycle

00:57:09,230 --> 00:57:14,000
again the ticket should be worth fifty

00:57:12,020 --> 00:57:18,740
loyalty points I assert that the number

00:57:14,000 --> 00:57:20,780
of points it's worth is fifty and then

00:57:18,740 --> 00:57:25,940
of our unit tests that catch catch the

00:57:20,780 --> 00:57:27,320
same thing and another unit test and

00:57:25,940 --> 00:57:30,940
then I implement the logic in the object

00:57:27,320 --> 00:57:30,940
and then I've got everything passing

00:57:31,420 --> 00:57:38,210
after the workflow it's very structured

00:57:35,480 --> 00:57:40,640
which I like because left wearing

00:57:38,210 --> 00:57:44,420
devices I just read read it or something

00:57:40,640 --> 00:57:46,490
I like to know what I'm doing next it's

00:57:44,420 --> 00:57:48,170
also every step driven the code so

00:57:46,490 --> 00:57:51,590
you've seen that the API of the code is

00:57:48,170 --> 00:57:53,810
really close to the language in six two

00:57:51,590 --> 00:57:56,210
steps to this chain the language in the

00:57:53,810 --> 00:57:57,740
text in in the Gherkin is really close

00:57:56,210 --> 00:58:00,200
to the way the business think that has

00:57:57,740 --> 00:58:03,680
to be true and then you have to driven

00:58:00,200 --> 00:58:05,360
your objects very closely based on the

00:58:03,680 --> 00:58:07,040
Gherkin and that means you're the main

00:58:05,360 --> 00:58:10,760
model naturally Maps the way the

00:58:07,040 --> 00:58:12,800
business thinks about things whereas the

00:58:10,760 --> 00:58:15,710
domain model this thing we generated is

00:58:12,800 --> 00:58:17,090
at the main model now it's something

00:58:15,710 --> 00:58:19,460
someone can read and they understand a

00:58:17,090 --> 00:58:20,720
lot of business concepts on projects

00:58:19,460 --> 00:58:22,520
where we've put a lot of attention into

00:58:20,720 --> 00:58:23,900
this we find new members can be on

00:58:22,520 --> 00:58:25,880
boards a lot quicker because you've got

00:58:23,900 --> 00:58:29,140
these things you read and it's just

00:58:25,880 --> 00:58:29,140
explaining how the business works

00:58:32,800 --> 00:58:37,760
so now that I know the objects worked I

00:58:36,020 --> 00:58:43,550
might want to go back and check the user

00:58:37,760 --> 00:58:46,040
interface work but importantly I may

00:58:43,550 --> 00:58:48,320
have had 10 different scenarios

00:58:46,040 --> 00:58:51,680
explaining different pricing situations

00:58:48,320 --> 00:58:53,600
and different amounts of points and the

00:58:51,680 --> 00:58:55,220
question you can ask yourself next is do

00:58:53,600 --> 00:58:58,670
I need to test all of those again

00:58:55,220 --> 00:59:00,260
through the user interface if I know

00:58:58,670 --> 00:59:03,710
that the controller just calls that

00:59:00,260 --> 00:59:05,990
method and I know that the template just

00:59:03,710 --> 00:59:07,820
shows whatever the return value is if

00:59:05,990 --> 00:59:09,980
one of those tests works through the

00:59:07,820 --> 00:59:14,760
user interface probably all of them are

00:59:09,980 --> 00:59:16,140
going to work or if you are doing this

00:59:14,760 --> 00:59:17,940
different things in the way the UI

00:59:16,140 --> 00:59:20,280
interacts with the application there you

00:59:17,940 --> 00:59:22,920
might test two of them so because you've

00:59:20,280 --> 00:59:25,230
run all of our scenarios the Business

00:59:22,920 --> 00:59:28,500
Objects first and we know the business

00:59:25,230 --> 00:59:30,480
objects behave currently I might get

00:59:28,500 --> 00:59:32,010
away with just running one of the

00:59:30,480 --> 00:59:34,430
scenarios through the real user

00:59:32,010 --> 00:59:36,780
interface with the real database

00:59:34,430 --> 00:59:39,060
database might being find by ID in each

00:59:36,780 --> 00:59:40,590
case user interface might be clicking

00:59:39,060 --> 00:59:41,730
the same button each time and the only

00:59:40,590 --> 00:59:46,230
difference is the numbers that are

00:59:41,730 --> 00:59:51,720
popping up I'm at the point at which I

00:59:46,230 --> 00:59:55,080
build the usually fail of course so add

00:59:51,720 --> 00:59:56,940
a second suite to be HAP config I say

00:59:55,080 --> 00:59:58,650
this is only going to run the scenarios

00:59:56,940 --> 01:00:02,760
are tagged with a particular tag called

00:59:58,650 --> 01:00:07,320
UI I pick one of the scenarios where I

01:00:02,760 --> 01:00:09,240
think is that one work I'm happy I'm

01:00:07,320 --> 01:00:14,190
happy all the other UI all the other

01:00:09,240 --> 01:00:15,840
scenarios will work for the UI and then

01:00:14,190 --> 01:00:18,000
I'll go to the processes just for that

01:00:15,840 --> 01:00:19,800
one scenario I'll write a different set

01:00:18,000 --> 01:00:22,320
of test automation that tests it through

01:00:19,800 --> 01:00:27,240
a browser by clicking on buttons and

01:00:22,320 --> 01:00:29,250
stuff so our attention is focused on use

01:00:27,240 --> 01:00:30,510
cases it helps you understand the core

01:00:29,250 --> 01:00:31,890
business domain that's one of the

01:00:30,510 --> 01:00:33,810
biggest advantages as well as having

01:00:31,890 --> 01:00:34,800
nicer code you know you're getting a

01:00:33,810 --> 01:00:36,210
better understanding of the business

01:00:34,800 --> 01:00:38,070
it's going to encourage layered

01:00:36,210 --> 01:00:38,790
architecture because the testing the

01:00:38,070 --> 01:00:41,340
core thirst

01:00:38,790 --> 01:00:42,900
the Tesla gets a lot faster because the

01:00:41,340 --> 01:00:46,590
majority of scenarios are being checked

01:00:42,900 --> 01:00:48,240
through the objects and it's ensuring

01:00:46,590 --> 01:00:51,450
your objects have an API that

01:00:48,240 --> 01:00:52,560
corresponds to these use cases use it

01:00:51,450 --> 01:00:56,270
when it's really important to get a good

01:00:52,560 --> 01:00:58,320
domain model that's not all the phone

01:00:56,270 --> 01:01:00,240
use it when you're likely to have to

01:00:58,320 --> 01:01:01,980
support future changes so like how long

01:01:00,240 --> 01:01:04,020
this project going to be how many

01:01:01,980 --> 01:01:06,180
iterations of different types of

01:01:04,020 --> 01:01:07,350
businesses are going to support and use

01:01:06,180 --> 01:01:10,680
it when you can have conversations with

01:01:07,350 --> 01:01:12,750
shareholders if you can't fix that but

01:01:10,680 --> 01:01:14,430
you know don't it doesn't work as well

01:01:12,750 --> 01:01:17,880
don't use it when it's not cost the

01:01:14,430 --> 01:01:21,750
business you don't need it for prototype

01:01:17,880 --> 01:01:23,700
if you know they're going to die don't

01:01:21,750 --> 01:01:25,020
use it if there's things small enough

01:01:23,700 --> 01:01:28,320
that you could further away and rewrite

01:01:25,020 --> 01:01:32,100
it when the business changes

01:01:28,320 --> 01:01:36,450
and it's a lot harder if you don't have

01:01:32,100 --> 01:01:38,300
access to business exercise so close but

01:01:36,450 --> 01:01:40,820
I'm going to plug some things and I

01:01:38,300 --> 01:01:43,680
organized a meet-up called BDD London on

01:01:40,820 --> 01:01:47,130
Monday we're doing a workshop on this

01:01:43,680 --> 01:01:49,380
subject is it skills matter you can find

01:01:47,130 --> 01:01:52,110
it by just googling BDD London and it's

01:01:49,380 --> 01:01:54,210
free and the Konstantin and I are going

01:01:52,110 --> 01:01:58,950
to facilitate a workshop in improving

01:01:54,210 --> 01:02:02,640
scenarios jetbrains are getting me

01:01:58,950 --> 01:02:05,160
through a webinar next Thursday about

01:02:02,640 --> 01:02:07,040
PHP spec we saw a little bit of PHP spec

01:02:05,160 --> 01:02:09,420
there that we'll do a demo and stuff I

01:02:07,040 --> 01:02:12,120
work for VK and we launched a product

01:02:09,420 --> 01:02:15,030
called continuous pipe so come and talk

01:02:12,120 --> 01:02:16,650
to us about it and especially finds the

01:02:15,030 --> 01:02:18,030
French guy with a beard Sam who did a

01:02:16,650 --> 01:02:20,400
lot decoding and used a lot of these

01:02:18,030 --> 01:02:23,790
techniques to build crecelius pipe so

01:02:20,400 --> 01:02:25,560
might be interesting and please rate all

01:02:23,790 --> 01:02:28,110
the talks you see on joined in it means

01:02:25,560 --> 01:02:32,480
a lot to the speakers I probably don't

01:02:28,110 --> 01:02:32,480
have those questions definitely not oh

01:02:33,440 --> 01:02:48,900
okay I thought I'd be assured of ok

01:02:46,680 --> 01:02:51,180
wonderful talk I'm just fond very quick

01:02:48,900 --> 01:02:54,420
question let's imagine I work for a

01:02:51,180 --> 01:02:57,300
company where the scenario is someone

01:02:54,420 --> 01:03:01,170
outside of the dev team from accounts of

01:02:57,300 --> 01:03:03,120
somewhere else goes I want a website I

01:03:01,170 --> 01:03:06,300
want cat gifs on it I want it by Monday

01:03:03,120 --> 01:03:08,930
how do you how would you advise you move

01:03:06,300 --> 01:03:13,230
a business that works in that way

01:03:08,930 --> 01:03:14,820
towards BDD and DDD principles you might

01:03:13,230 --> 01:03:17,580
not native if the cat gifts are

01:03:14,820 --> 01:03:19,340
achieving the business goals you don't

01:03:17,580 --> 01:03:22,920
need to have a stronger main model I

01:03:19,340 --> 01:03:24,510
would start by starting at the project

01:03:22,920 --> 01:03:26,940
goal level and then questioning why

01:03:24,510 --> 01:03:28,560
we're doing this project so you know

01:03:26,940 --> 01:03:30,360
what how will we know this projects a

01:03:28,560 --> 01:03:31,920
success what we're trying to achieve by

01:03:30,360 --> 01:03:35,340
this project can you explain how the cat

01:03:31,920 --> 01:03:36,870
gets to get a make life better its or

01:03:35,340 --> 01:03:37,560
walk backwards up to the rationale for

01:03:36,870 --> 01:03:39,780
the project

01:03:37,560 --> 01:03:42,090
and then once you get that kind of

01:03:39,780 --> 01:03:43,410
buy-in we're going to measure it maybe

01:03:42,090 --> 01:03:45,690
we'll have some metrics or see every

01:03:43,410 --> 01:03:47,880
work then that gives you more freedom

01:03:45,690 --> 01:03:50,550
suggest other ways to achieve the same

01:03:47,880 --> 01:03:52,680
change in the metrics if you're starting

01:03:50,550 --> 01:03:54,180
the conversation with hard set of

01:03:52,680 --> 01:03:56,610
requirements it's a lot harder so you

01:03:54,180 --> 01:03:59,970
need to get more access to the strategic

01:03:56,610 --> 01:04:01,170
level why are we doing this maybe we can

01:03:59,970 --> 01:04:02,940
suggest different ways to achieve the

01:04:01,170 --> 01:04:07,500
same goals and then you'll be able to

01:04:02,940 --> 01:04:10,290
apply this better but is that it that's

01:04:07,500 --> 01:04:13,940
it I'll be at the alesis done coming to

01:04:10,290 --> 01:04:13,940

YouTube URL: https://www.youtube.com/watch?v=83GbyDpJDI4


