Title: PHP UK Conference 2017 - James Mallison - Websockets and Torrents: A match made in PHP
Publication date: 2017-04-03
Playlist: PHP UK Conference 2017
Description: 
	Websockets are a technology allowing bi-directional communication between the server and the client and are not often the topic of focus when it comes to writing standard web applications due to their architectural complexity and learning curve required. This talk is the story of my first real project involving sending torrent data from the server to the browser so I could build my own Torrent Web GUI. What is an event loop? How does it work? How about authentication when using both HTTP and Websocket requests? How do I make my code non-blocking? These are some of the topics covered from both a theoretical and a practical standpoint. I also talk about security and privacy and how not to get caught when setting up a server designed solely for streaming Ubuntu downloads.
Captions: 
	00:00:02,830 --> 00:00:05,979
I worked on the docks I'm going to start

00:00:04,569 --> 00:00:08,350
right now because I've got a lot to cram

00:00:05,979 --> 00:00:10,120
into this so hopefully I've got some

00:00:08,350 --> 00:00:11,889
really interesting to go into with

00:00:10,120 --> 00:00:13,179
you guys so I'm just going to go through

00:00:11,889 --> 00:00:15,639
the boring stuff first first and

00:00:13,179 --> 00:00:18,009
foremost this is me before I got rid of

00:00:15,639 --> 00:00:19,900
the emo haircut my name is James Madison

00:00:18,009 --> 00:00:22,000
I usually post things like that on

00:00:19,900 --> 00:00:25,390
Twitter if you like any sort of humor

00:00:22,000 --> 00:00:27,670
and I currently work for two Vargo in

00:00:25,390 --> 00:00:30,550
Parma a New Yorker and today I'm going

00:00:27,670 --> 00:00:33,070
to talk about well first of all most I

00:00:30,550 --> 00:00:35,830
love PHP that's why I'm here so I love

00:00:33,070 --> 00:00:37,000
PHP so much that I this is real though

00:00:35,830 --> 00:00:40,059
it's not photoshopped I bought this

00:00:37,000 --> 00:00:41,409
license plate for my bike j77 PHP I was

00:00:40,059 --> 00:00:43,299
told it's cut off a bit of the bomb but

00:00:41,409 --> 00:00:45,729
I was told by members of the PHP

00:00:43,299 --> 00:00:47,589
community that now I've got that don't

00:00:45,729 --> 00:00:49,059
crash for the sake of the PHP community

00:00:47,589 --> 00:00:50,830
because JavaScript developers will never

00:00:49,059 --> 00:00:52,390
let us hear the end of it and then

00:00:50,830 --> 00:00:55,390
obviously here's me having crushed the

00:00:52,390 --> 00:00:57,250
bike three weeks later and today I'm

00:00:55,390 --> 00:00:58,720
going to talk about two things that I

00:00:57,250 --> 00:01:01,269
find really interesting to talk about

00:00:58,720 --> 00:01:02,559
WebSockets WebSockets because it's a

00:01:01,269 --> 00:01:04,180
non-traditional way of doing

00:01:02,559 --> 00:01:05,920
client-server communication and I like

00:01:04,180 --> 00:01:09,550
doing things the way you're not supposed

00:01:05,920 --> 00:01:10,810
to and Torrance because you obviously

00:01:09,550 --> 00:01:13,240
you can do a lot of illegal with

00:01:10,810 --> 00:01:15,120
torrents and download everything I am

00:01:13,240 --> 00:01:18,030
NOT going to do any of that today and

00:01:15,120 --> 00:01:23,230
and obviously I haven't done in the past

00:01:18,030 --> 00:01:25,540
four reasons so I'm going to talk about

00:01:23,230 --> 00:01:28,000
downloading the metadata of torrents

00:01:25,540 --> 00:01:29,800
from this and giving it from the server

00:01:28,000 --> 00:01:31,200
to the client and we'll talk about PHP

00:01:29,800 --> 00:01:32,980
obviously event-driven programming

00:01:31,200 --> 00:01:35,200
non-blocking code you know things like

00:01:32,980 --> 00:01:37,960
that and this is kind of the agenda that

00:01:35,200 --> 00:01:39,790
I'm going to go into so I'm going to

00:01:37,960 --> 00:01:42,340
show the story of my interest in

00:01:39,790 --> 00:01:45,010
WebSockets I'm going to show how I

00:01:42,340 --> 00:01:46,870
implemented the technology to send

00:01:45,010 --> 00:01:48,940
arbitrary or in my case torrent JSON

00:01:46,870 --> 00:01:50,550
data from the server to the client and

00:01:48,940 --> 00:01:53,170
the problem is that if you google

00:01:50,550 --> 00:01:55,570
WebSocket tutorials it will always be in

00:01:53,170 --> 00:01:56,979
the form of a chat tutorial which is

00:01:55,570 --> 00:01:58,810
sending information from the client to

00:01:56,979 --> 00:02:00,010
the server to the client not boring

00:01:58,810 --> 00:02:01,630
alright nobody wants to do that people

00:02:00,010 --> 00:02:03,270
want to do push notifications and

00:02:01,630 --> 00:02:06,280
pushing notifications tend to be

00:02:03,270 --> 00:02:07,540
arbitrary data so hopefully at the end

00:02:06,280 --> 00:02:09,519
of this I will show you how I did it

00:02:07,540 --> 00:02:12,370
with torrent data and then you can maybe

00:02:09,519 --> 00:02:13,960
use this as a learning experience to go

00:02:12,370 --> 00:02:15,610
and actually implement your own

00:02:13,960 --> 00:02:19,690
notifications with your own arbitrary

00:02:15,610 --> 00:02:20,830
data also I'm going to talk about some

00:02:19,690 --> 00:02:22,060
of the problems they encountered I

00:02:20,830 --> 00:02:23,740
encounter authentication problems

00:02:22,060 --> 00:02:26,500
blocking problems and how how I've

00:02:23,740 --> 00:02:27,790
solved them and then I'm going to show

00:02:26,500 --> 00:02:29,380
you a demo this system actually

00:02:27,790 --> 00:02:32,230
completely failed at PHP North West

00:02:29,380 --> 00:02:35,200
Conference because you can't solve it

00:02:32,230 --> 00:02:36,520
very well over 3G apparently and I'm

00:02:35,200 --> 00:02:38,800
also going to show what I learned and

00:02:36,520 --> 00:02:40,240
how you can then move on and take the

00:02:38,800 --> 00:02:42,280
knowledge that you've got here and then

00:02:40,240 --> 00:02:45,400
go do some really cool WebSocket stuff

00:02:42,280 --> 00:02:46,480
in the future so going on to the story

00:02:45,400 --> 00:02:48,700
in 2012

00:02:46,480 --> 00:02:50,680
I used to torrent for a university

00:02:48,700 --> 00:02:52,480
I mean we had really fast download speed

00:02:50,680 --> 00:02:54,100
university was crap at home great at

00:02:52,480 --> 00:02:56,500
university so I downloaded a lot of

00:02:54,100 --> 00:02:59,050
completely legal terms so I used to take

00:02:56,500 --> 00:03:00,970
C 10 so by external hard-drives because

00:02:59,050 --> 00:03:04,810
I mean in those days all I could afford

00:03:00,970 --> 00:03:06,100
as a student and I just take these hard

00:03:04,810 --> 00:03:07,660
drives into university get everything

00:03:06,100 --> 00:03:09,370
downloaded and put onto these hard

00:03:07,660 --> 00:03:11,440
drives because of the good download

00:03:09,370 --> 00:03:13,180
speeds so the next step for me was to

00:03:11,440 --> 00:03:15,700
get something kind of automated

00:03:13,180 --> 00:03:18,280
happening at home so I installed

00:03:15,700 --> 00:03:19,630
something called dd-wrt on my routine

00:03:18,280 --> 00:03:21,130
now this is actually before I knew what

00:03:19,630 --> 00:03:22,900
the difference between a Rooter and a

00:03:21,130 --> 00:03:24,340
modem was and you know I just got my

00:03:22,900 --> 00:03:26,080
student loan I wanted to buy something

00:03:24,340 --> 00:03:28,090
really shiny and I saw this Asus router

00:03:26,080 --> 00:03:30,490
that was all black and had blue flashing

00:03:28,090 --> 00:03:32,260
lights so I went and got that and and I

00:03:30,490 --> 00:03:34,450
realized you could install video VRT on

00:03:32,260 --> 00:03:36,790
it which allowed me to SSH into my

00:03:34,450 --> 00:03:39,100
router I could then install the whole

00:03:36,790 --> 00:03:40,060
lamp stack I could that wish I did I saw

00:03:39,100 --> 00:03:42,940
no reason whatsoever

00:03:40,060 --> 00:03:46,360
I served webpages from the Rooter IP

00:03:42,940 --> 00:03:48,880
itself and also I managed to install a

00:03:46,360 --> 00:03:50,290
torrent client and there were two at the

00:03:48,880 --> 00:03:52,450
time that were kind of the main ones

00:03:50,290 --> 00:03:54,070
there was deluge or de loup garou how

00:03:52,450 --> 00:03:55,390
you pronounce it and transmission and

00:03:54,070 --> 00:03:58,630
transmission was the easiest for me to

00:03:55,390 --> 00:04:00,820
install and so I was a pretty hardcore

00:03:58,630 --> 00:04:02,770
bun too tart downloader and there was

00:04:00,820 --> 00:04:05,350
also the option for me to plug an array

00:04:02,770 --> 00:04:07,270
of hard drives into the USB ports at the

00:04:05,350 --> 00:04:08,410
back of the router and have every movie

00:04:07,270 --> 00:04:10,300
or TV show that I'd ever watched

00:04:08,410 --> 00:04:12,400
automatically downloaded and transferred

00:04:10,300 --> 00:04:13,240
onto these hard drives without only

00:04:12,400 --> 00:04:15,280
having to do anything apart from

00:04:13,240 --> 00:04:16,480
advertisements and obviously I didn't do

00:04:15,280 --> 00:04:21,250
that though it's just it's just a bunch

00:04:16,480 --> 00:04:24,940
of times so this brings me to the GUI of

00:04:21,250 --> 00:04:26,919
the transmission plan so I is just

00:04:24,940 --> 00:04:27,670
finishing University and I needed a use

00:04:26,919 --> 00:04:29,560
case

00:04:27,670 --> 00:04:31,930
to be able to show potential employees

00:04:29,560 --> 00:04:33,550
you know I can do some good and I

00:04:31,930 --> 00:04:34,600
also like to tour it a lot so I figured

00:04:33,550 --> 00:04:36,700
I want to put these two things together

00:04:34,600 --> 00:04:38,680
and when you look at the transmission

00:04:36,700 --> 00:04:41,350
GUI over here it looks like a proper web

00:04:38,680 --> 00:04:43,030
application but if you right click

00:04:41,350 --> 00:04:44,560
inspect element you'll just see it's

00:04:43,030 --> 00:04:46,750
it's not application it's just a load of

00:04:44,560 --> 00:04:48,730
CSS and it's a horrible CSS framework

00:04:46,750 --> 00:04:50,530
and there's these buttons a little icons

00:04:48,730 --> 00:04:54,130
and it's just you know anyone could make

00:04:50,530 --> 00:04:55,960
something so much better than this so I

00:04:54,130 --> 00:04:58,660
figured that the data must come from

00:04:55,960 --> 00:05:01,510
somewhere and be populating this kind of

00:04:58,660 --> 00:05:03,820
horrible CSS over here in the HTML so I

00:05:01,510 --> 00:05:05,590
had the idea that I would use bootstrap

00:05:03,820 --> 00:05:08,230
framework bootstrap CSS because it has

00:05:05,590 --> 00:05:09,910
nice progress bars and you can know you

00:05:08,230 --> 00:05:11,230
can change the style attribute and have

00:05:09,910 --> 00:05:13,870
this progress bar go up depending on

00:05:11,230 --> 00:05:15,250
whether or not Tomasz downloading and I

00:05:13,870 --> 00:05:16,450
would need to get the information from

00:05:15,250 --> 00:05:18,910
the server to the client in a

00:05:16,450 --> 00:05:20,230
standardized format like Jason or you

00:05:18,910 --> 00:05:22,300
know if I was really really miserable

00:05:20,230 --> 00:05:26,590
XML which I didn't do I was definitely

00:05:22,300 --> 00:05:29,380
Jason so the first solution that I came

00:05:26,590 --> 00:05:30,760
up with was I mean you don't really see

00:05:29,380 --> 00:05:32,380
exactly what's going on here but at the

00:05:30,760 --> 00:05:34,510
very bottom I'm just doing a horrible

00:05:32,380 --> 00:05:37,780
command line call which gave me all of

00:05:34,510 --> 00:05:39,880
this crap and then I got I basically had

00:05:37,780 --> 00:05:42,130
to use some of the JSON from near the

00:05:39,880 --> 00:05:43,780
bottom of this this output as well as

00:05:42,130 --> 00:05:45,520
the columns from the very bottom at the

00:05:43,780 --> 00:05:47,770
output and put them together to get

00:05:45,520 --> 00:05:49,440
exactly what I needed so what I ended up

00:05:47,770 --> 00:05:52,180
doing was doing a horrible regex

00:05:49,440 --> 00:05:53,860
manually interpolating brackets and

00:05:52,180 --> 00:05:55,840
quotes to make my own Jason and I mean I

00:05:53,860 --> 00:05:57,190
was a graduate so this was this was

00:05:55,840 --> 00:05:59,590
clearly the best way of doing it you

00:05:57,190 --> 00:06:00,940
know they got it working and then so

00:05:59,590 --> 00:06:02,530
basically it worked it took five to ten

00:06:00,940 --> 00:06:07,150
seconds it was really slow and crap what

00:06:02,530 --> 00:06:09,430
it would so basically this was kind of

00:06:07,150 --> 00:06:10,900
the over overall so I kind of standard

00:06:09,430 --> 00:06:12,100
how you would send an ajax request to

00:06:10,900 --> 00:06:13,240
the server and get response this is what

00:06:12,100 --> 00:06:14,860
my application did to get this

00:06:13,240 --> 00:06:16,540
information back obviously the browser

00:06:14,860 --> 00:06:18,160
makes an ajax request to the server the

00:06:16,540 --> 00:06:20,980
server runs the command line call and

00:06:18,160 --> 00:06:23,110
then that would return the jason to the

00:06:20,980 --> 00:06:25,300
browser so this proof of concept that I

00:06:23,110 --> 00:06:27,940
turned into a prototype and then became

00:06:25,300 --> 00:06:31,360
my final idea obviously as it always

00:06:27,940 --> 00:06:33,520
happens like my own business it worked I

00:06:31,360 --> 00:06:35,050
was really proud of white done so

00:06:33,520 --> 00:06:36,400
clearly the best thing that I could do

00:06:35,050 --> 00:06:38,290
at this time would be go to some of the

00:06:36,400 --> 00:06:40,240
nicest people on the planet Stack

00:06:38,290 --> 00:06:40,889
Overflow and show them what I've done

00:06:40,240 --> 00:06:42,780
and

00:06:40,889 --> 00:06:44,550
you know really perhaps like guys suck

00:06:42,780 --> 00:06:46,650
also guys look what I've done what do

00:06:44,550 --> 00:06:50,520
you think and this was the response that

00:06:46,650 --> 00:06:52,349
I got and as usual it was absolutely

00:06:50,520 --> 00:06:53,849
nothing to do first and foremost with my

00:06:52,349 --> 00:06:55,979
code they didn't tell me anything about

00:06:53,849 --> 00:06:58,229
my code they said that I was exposing

00:06:55,979 --> 00:07:01,169
myself and my unnaturally large amount

00:06:58,229 --> 00:07:03,419
of bunting 12.04 downloads to the world

00:07:01,169 --> 00:07:05,460
so I need an another service somewhere

00:07:03,419 --> 00:07:07,379
else somewhere else in the world as far

00:07:05,460 --> 00:07:09,300
away east as possible preferably that I

00:07:07,379 --> 00:07:10,979
could connect to and talk to anonymously

00:07:09,300 --> 00:07:13,020
so Ubuntu couldn't see how many of the

00:07:10,979 --> 00:07:15,779
torrents I was downloading from where

00:07:13,020 --> 00:07:17,039
we're better than Stockholm Sweden which

00:07:15,779 --> 00:07:18,870
is actually where the Pirate Bay data

00:07:17,039 --> 00:07:21,479
centers were this is a logic that was in

00:07:18,870 --> 00:07:23,069
my head at the time what wasn't in my

00:07:21,479 --> 00:07:24,090
head at the time was this was actually

00:07:23,069 --> 00:07:26,400
where they were raided by the police

00:07:24,090 --> 00:07:28,080
later I didn't realize that but anyway I

00:07:26,400 --> 00:07:31,800
found a VPS provider over there and I

00:07:28,080 --> 00:07:33,120
needed to pay for that so I'm a bike

00:07:31,800 --> 00:07:34,469
you've seen the bike crash pictures at

00:07:33,120 --> 00:07:35,699
the beginning and so I have the helmet

00:07:34,469 --> 00:07:38,879
and the full leather gear and everything

00:07:35,699 --> 00:07:41,639
and in Preston this is related and

00:07:38,879 --> 00:07:42,960
Preston where I worked before there was

00:07:41,639 --> 00:07:44,460
actually a petrol station around the

00:07:42,960 --> 00:07:46,529
corner where you could buy an anonymous

00:07:44,460 --> 00:07:47,879
debit card or credit card a condom which

00:07:46,529 --> 00:07:49,949
one it was but the point is that you go

00:07:47,879 --> 00:07:51,240
in you pay ten pounds and then you get

00:07:49,949 --> 00:07:53,009
this anonymous credit card that you can

00:07:51,240 --> 00:07:54,449
then use to buy to get you know to get

00:07:53,009 --> 00:07:56,159
PayPal or anything you want and you can

00:07:54,449 --> 00:07:58,529
use this card to then pay for whatever

00:07:56,159 --> 00:08:00,300
you want online so I will all this gear

00:07:58,529 --> 00:08:01,469
went into the petrol station but

00:08:00,300 --> 00:08:02,550
obviously pop my bike around the corner

00:08:01,469 --> 00:08:05,789
and all this was for educational

00:08:02,550 --> 00:08:08,399
purposes only obviously when and got

00:08:05,789 --> 00:08:11,099
this prepaid credit card came out when

00:08:08,399 --> 00:08:14,610
went home and then I connected to the

00:08:11,099 --> 00:08:16,979
VPS providers website using tor so then

00:08:14,610 --> 00:08:18,930
when I bought or rented the VPS they

00:08:16,979 --> 00:08:21,080
couldn't see where I was renting that

00:08:18,930 --> 00:08:23,669
from so I effectively got this VPS

00:08:21,080 --> 00:08:25,800
really cheap and theoretically

00:08:23,669 --> 00:08:27,659
anonymously which brings me to kind of

00:08:25,800 --> 00:08:30,569
the next version of what I did with my

00:08:27,659 --> 00:08:31,979
little educational project so the

00:08:30,569 --> 00:08:33,599
browser makes an ajax request to my

00:08:31,979 --> 00:08:36,690
server like normal but then my server

00:08:33,599 --> 00:08:38,760
would ssh to the virtual private server

00:08:36,690 --> 00:08:41,190
using an application called tor Fi so it

00:08:38,760 --> 00:08:42,750
does it over tall I think I use PHP set

00:08:41,190 --> 00:08:44,699
clip at one point as well if anyone says

00:08:42,750 --> 00:08:45,870
of that because it has some secure SSH

00:08:44,699 --> 00:08:48,660
implementation that I found was really

00:08:45,870 --> 00:08:51,300
useful but then it was the virtual

00:08:48,660 --> 00:08:52,500
private server that I'm seeing

00:08:51,300 --> 00:08:54,210
pictures of people taking pictures of

00:08:52,500 --> 00:09:00,210
this action I don't know if I should

00:08:54,210 --> 00:09:01,920
anyway educational so then the VBS over

00:09:00,210 --> 00:09:02,730
in the East would run the torrents mall

00:09:01,920 --> 00:09:05,160
that stuff and then return that

00:09:02,730 --> 00:09:07,080
information over SSH to my server and

00:09:05,160 --> 00:09:09,060
then that server would return the

00:09:07,080 --> 00:09:11,310
information to the browser so it worked

00:09:09,060 --> 00:09:13,140
this was my next step I've done exactly

00:09:11,310 --> 00:09:15,870
what the stuck over dissect over four

00:09:13,140 --> 00:09:17,460
guys asked for and so I went back two

00:09:15,870 --> 00:09:19,290
cycles are really proud I was like guys

00:09:17,460 --> 00:09:20,820
I've done exactly what you said what do

00:09:19,290 --> 00:09:24,360
you think and this was the response that

00:09:20,820 --> 00:09:26,190
I got and finally they gave me something

00:09:24,360 --> 00:09:28,230
really useful about my code my

00:09:26,190 --> 00:09:30,810
technology my architecture and they said

00:09:28,230 --> 00:09:32,490
dude why don't you just use WebSockets

00:09:30,810 --> 00:09:33,600
so then tell me why I should use

00:09:32,490 --> 00:09:34,860
WebSockets office here they just said

00:09:33,600 --> 00:09:36,390
use WebSockets it's like going in there

00:09:34,860 --> 00:09:37,260
asking question about Symphony and they

00:09:36,390 --> 00:09:39,960
just say I'll don't use a framework

00:09:37,260 --> 00:09:41,940
thanks guys well anyway so I went there

00:09:39,960 --> 00:09:44,100
and I went away from now I did some

00:09:41,940 --> 00:09:46,200
research and this is what I found out

00:09:44,100 --> 00:09:48,420
about WebSocket now this isn't going to

00:09:46,200 --> 00:09:50,130
be just a WebSocket talk because you can

00:09:48,420 --> 00:09:53,220
have someone stand and talk an hour on

00:09:50,130 --> 00:09:54,420
WebSockets specifically how to or what

00:09:53,220 --> 00:09:57,300
they are but I'm just going to skim over

00:09:54,420 --> 00:10:00,000
a kind of how things happen and then I'm

00:09:57,300 --> 00:10:02,550
going to go more in-depth into it so the

00:10:00,000 --> 00:10:05,250
browser initially sends a WebSocket or

00:10:02,550 --> 00:10:06,540
SS request that the WSS is a secure

00:10:05,250 --> 00:10:08,100
version from the client to the server

00:10:06,540 --> 00:10:09,660
you type in WebSockets you'll find this

00:10:08,100 --> 00:10:13,170
on images on Google it's really easy to

00:10:09,660 --> 00:10:15,210
find the server responds with a HTTP 1.1

00:10:13,170 --> 00:10:17,340
switching protocols as long as your

00:10:15,210 --> 00:10:18,600
server allows this then it does this

00:10:17,340 --> 00:10:20,430
automatically you don't need to worry

00:10:18,600 --> 00:10:22,410
about this so so far apart from

00:10:20,430 --> 00:10:24,360
requiring the JavaScript library to to

00:10:22,410 --> 00:10:26,190
send this you don't need to worry about

00:10:24,360 --> 00:10:27,660
how it does it it just does and then

00:10:26,190 --> 00:10:30,000
from then on you've got this big fat

00:10:27,660 --> 00:10:30,900
pipe this open TCP connection which is

00:10:30,000 --> 00:10:33,180
where the data can be sent by

00:10:30,900 --> 00:10:35,190
directionally either way and what you

00:10:33,180 --> 00:10:37,080
have to do then is use that to choose

00:10:35,190 --> 00:10:38,610
when to send information to the server

00:10:37,080 --> 00:10:39,840
and when the server will send

00:10:38,610 --> 00:10:41,010
information to the client and that's

00:10:39,840 --> 00:10:42,780
what I'm going to show you in a little

00:10:41,010 --> 00:10:44,280
bit how I did that and the important

00:10:42,780 --> 00:10:46,470
thing to note is that the connections

00:10:44,280 --> 00:10:48,260
can be closed at any time on either end

00:10:46,470 --> 00:10:51,930
and either end has to choose how to

00:10:48,260 --> 00:10:53,610
respond to that so if the server closes

00:10:51,930 --> 00:10:54,990
down typically the JavaScript library

00:10:53,610 --> 00:10:56,730
will try and reconnect every five

00:10:54,990 --> 00:11:01,800
seconds and then fall back to Ajax or

00:10:56,730 --> 00:11:03,780
something like that if the if the client

00:11:01,800 --> 00:11:05,220
disconnects by going to another page

00:11:03,780 --> 00:11:06,990
that doesn't have the WebSocket call on

00:11:05,220 --> 00:11:07,680
or just closing the browser the server

00:11:06,990 --> 00:11:09,149
will typically

00:11:07,680 --> 00:11:11,700
automatically you have to respond to

00:11:09,149 --> 00:11:13,470
that and they will remove that client

00:11:11,700 --> 00:11:14,760
from its internal array of clients that

00:11:13,470 --> 00:11:15,779
are sending information to so it's

00:11:14,760 --> 00:11:17,370
basically saying we're not going to send

00:11:15,779 --> 00:11:18,930
any information to you anymore and this

00:11:17,370 --> 00:11:22,860
is done in PHP which you'll also see in

00:11:18,930 --> 00:11:25,890
a little bit so standard HTTP versus

00:11:22,860 --> 00:11:27,540
WebSockets HTTP everyone knows this you

00:11:25,890 --> 00:11:29,670
said live across to the server get a

00:11:27,540 --> 00:11:32,160
response from the server and then that's

00:11:29,670 --> 00:11:33,930
it it's half duplex so you have to wait

00:11:32,160 --> 00:11:35,610
for response and then rinse and repeat

00:11:33,930 --> 00:11:37,230
so if you're doing this every five

00:11:35,610 --> 00:11:40,380
seconds to get this torrent data is

00:11:37,230 --> 00:11:42,600
polling now WebSockets you've got to

00:11:40,380 --> 00:11:43,740
have something open on the server which

00:11:42,600 --> 00:11:46,589
is called an event loop that's going

00:11:43,740 --> 00:11:48,510
around and around and around and it's

00:11:46,589 --> 00:11:50,010
waiting to have information given to it

00:11:48,510 --> 00:11:53,310
and waiting to send information Apple is

00:11:50,010 --> 00:11:55,589
really fast and this is full duplex so

00:11:53,310 --> 00:11:56,790
you've got to have this big pipe going

00:11:55,589 --> 00:11:57,870
between the client and the server and

00:11:56,790 --> 00:11:59,610
you've got this loop happening on the

00:11:57,870 --> 00:12:02,209
server so what do I mean by quickly very

00:11:59,610 --> 00:12:05,820
quickly by half-duplex and full-duplex

00:12:02,209 --> 00:12:08,220
so half duplex means in HTTP in a

00:12:05,820 --> 00:12:10,260
conversation only one person can talk at

00:12:08,220 --> 00:12:11,670
once and the other person has to listen

00:12:10,260 --> 00:12:13,170
and wait to give a response so if using

00:12:11,670 --> 00:12:14,850
apache or nginx or something like that

00:12:13,170 --> 00:12:16,650
this is where some of the questions and

00:12:14,850 --> 00:12:18,990
then get the response full duplex is

00:12:16,650 --> 00:12:20,370
this event loop which is wearing a

00:12:18,990 --> 00:12:22,890
conversation everyone's able to talk to

00:12:20,370 --> 00:12:25,290
each other at once like PHP internals

00:12:22,890 --> 00:12:27,020
and everyone's able to understand what

00:12:25,290 --> 00:12:30,270
each other is saying at the same time

00:12:27,020 --> 00:12:31,380
not like PHP internal I think someone

00:12:30,270 --> 00:12:33,480
already knew what was going to send us

00:12:31,380 --> 00:12:35,370
can say that so I've mentioned this word

00:12:33,480 --> 00:12:38,610
event loop so very briefly what is an

00:12:35,370 --> 00:12:40,110
event loop and how does it work so the

00:12:38,610 --> 00:12:41,250
point of an event loop is this loop

00:12:40,110 --> 00:12:42,779
that's happening on the server and it's

00:12:41,250 --> 00:12:44,850
not just a while loop and I'll explain

00:12:42,779 --> 00:12:47,010
why in a second but basically the point

00:12:44,850 --> 00:12:50,190
is a request comes in to this event loop

00:12:47,010 --> 00:12:52,740
then a and you're registering an

00:12:50,190 --> 00:12:54,720
interest in receiving some data so the

00:12:52,740 --> 00:12:56,390
actual processing of all this like IO

00:12:54,720 --> 00:12:59,430
operations which typically are blocking

00:12:56,390 --> 00:13:01,560
database calls all that sort of stuff it

00:12:59,430 --> 00:13:03,540
handled outside of the event loop and

00:13:01,560 --> 00:13:05,490
then once it's done it's kind of

00:13:03,540 --> 00:13:06,839
injected back into the event loop and

00:13:05,490 --> 00:13:08,880
then that callback is triggered and the

00:13:06,839 --> 00:13:10,440
response is returned to the person you

00:13:08,880 --> 00:13:14,190
send a request so it's not just a

00:13:10,440 --> 00:13:15,959
standard request or response going on to

00:13:14,190 --> 00:13:18,540
a little bit more in depth about event

00:13:15,959 --> 00:13:19,999
loops I really like this diagram it's

00:13:18,540 --> 00:13:22,369
from embedded system

00:13:19,999 --> 00:13:24,019
and the point of event loops in a

00:13:22,369 --> 00:13:25,759
single-threaded context is that it's not

00:13:24,019 --> 00:13:27,679
just a while loop if you guys which

00:13:25,759 --> 00:13:29,569
train implement or any of us trying to

00:13:27,679 --> 00:13:31,339
implement a while loop you'd have at the

00:13:29,569 --> 00:13:33,109
top of your wire look procedurally in a

00:13:31,339 --> 00:13:35,389
procedural sense is there anyone trying

00:13:33,109 --> 00:13:37,309
to connect you would say there is people

00:13:35,389 --> 00:13:39,439
trying to connect then you'd save the

00:13:37,309 --> 00:13:41,659
people into an internal race and web and

00:13:39,439 --> 00:13:42,979
then you do all your processing in the

00:13:41,659 --> 00:13:44,929
middle that needs to be done and then at

00:13:42,979 --> 00:13:46,159
the end of your while loop you would say

00:13:44,929 --> 00:13:48,409
okay is there any information needs to

00:13:46,159 --> 00:13:51,019
be sent out so it's not just a while

00:13:48,409 --> 00:13:53,959
loop that's pulling in a procedural

00:13:51,019 --> 00:13:55,489
sense so that's also blocking because

00:13:53,959 --> 00:13:57,919
all of the information that happens in

00:13:55,489 --> 00:13:59,569
between you can't have anywhere else

00:13:57,919 --> 00:14:00,919
registering interest in receiving

00:13:59,569 --> 00:14:02,599
information you can't send any

00:14:00,919 --> 00:14:04,879
information out why all this computation

00:14:02,599 --> 00:14:08,089
capital so instead we can use something

00:14:04,879 --> 00:14:10,039
called interrupt driven IO so with

00:14:08,089 --> 00:14:11,149
interrupt driven IO this is kind of more

00:14:10,039 --> 00:14:12,470
in-depth you don't need to worry about

00:14:11,149 --> 00:14:13,999
it because it just happens when you use

00:14:12,470 --> 00:14:15,799
the technology to do all this WebSocket

00:14:13,999 --> 00:14:18,499
stuff but the point is that a flag is

00:14:15,799 --> 00:14:20,419
set on the CPU so this big event we can

00:14:18,499 --> 00:14:23,359
continue happening continue going around

00:14:20,419 --> 00:14:25,249
but the processes that has getting all

00:14:23,359 --> 00:14:26,809
this information it's suspended and then

00:14:25,249 --> 00:14:28,009
the buffer is filled saying all right

00:14:26,809 --> 00:14:30,199
we're going to make a database call that

00:14:28,009 --> 00:14:31,939
takes ages and then finally once once we

00:14:30,199 --> 00:14:34,579
get this information that information

00:14:31,939 --> 00:14:36,739
then changes a flag back and it's then

00:14:34,579 --> 00:14:38,479
put back into the event loop so the

00:14:36,739 --> 00:14:40,579
point is that the event loop isn't

00:14:38,479 --> 00:14:41,929
saying have you finished yet have you

00:14:40,579 --> 00:14:44,209
finished yet have you finished yet it's

00:14:41,929 --> 00:14:46,549
the source of the data that just says to

00:14:44,209 --> 00:14:47,659
the event loop yes we finished and the

00:14:46,549 --> 00:14:50,269
point that what the reason I'm showing

00:14:47,659 --> 00:14:51,499
you this is because it's unique we need

00:14:50,269 --> 00:14:52,939
to get out of the mindset today of

00:14:51,499 --> 00:14:54,349
procedural code we're going to talk

00:14:52,939 --> 00:14:56,899
about jumping around which is what

00:14:54,349 --> 00:14:58,609
allows you to do with an event loop and

00:14:56,899 --> 00:15:00,589
this is useful for inter-process

00:14:58,609 --> 00:15:03,049
communication because another process

00:15:00,589 --> 00:15:04,039
can change this flag and then put stuff

00:15:03,049 --> 00:15:05,569
into the event loop and you'll actually

00:15:04,039 --> 00:15:06,739
see me do that in the live demo that

00:15:05,569 --> 00:15:10,279
hopefully won't completely screw up

00:15:06,739 --> 00:15:12,109
later on also this is how PHP process

00:15:10,279 --> 00:15:13,819
control extension works a little bit

00:15:12,109 --> 00:15:16,159
because it's signal based so I'm going

00:15:13,819 --> 00:15:18,439
to show you a very brief example of PHP

00:15:16,159 --> 00:15:20,149
process control extension and how to use

00:15:18,439 --> 00:15:21,979
it and then hopefully that we'll see how

00:15:20,149 --> 00:15:23,389
we're moving away from procedural to

00:15:21,979 --> 00:15:24,349
this kind of jump jumping around stuff

00:15:23,389 --> 00:15:26,299
so I'm going to go through this line by

00:15:24,349 --> 00:15:28,939
line first ignore the classics I'll

00:15:26,299 --> 00:15:30,199
explain what that happens at the end why

00:15:28,939 --> 00:15:32,359
that happens at the end so we've

00:15:30,199 --> 00:15:33,980
declared a random function a signal

00:15:32,359 --> 00:15:35,300
handler and don't have anything in

00:15:33,980 --> 00:15:37,310
you could echo something out do whatever

00:15:35,300 --> 00:15:40,250
the hell you want then once you've got

00:15:37,310 --> 00:15:43,460
the process control extension installed

00:15:40,250 --> 00:15:45,440
with PHP you have to say that process

00:15:43,460 --> 00:15:46,880
control signal if we receive a sick term

00:15:45,440 --> 00:15:49,040
then we're going to run the signal

00:15:46,880 --> 00:15:51,190
handler that's the next slide and signal

00:15:49,040 --> 00:15:54,680
handle is the name of the function a

00:15:51,190 --> 00:15:57,140
sick term in Linux is a -15 so if you

00:15:54,680 --> 00:15:59,210
run the script here the bottom got a

00:15:57,140 --> 00:16:00,290
while true it sleeps the ten seconds

00:15:59,210 --> 00:16:01,970
each time and then just keep sleeping

00:16:00,290 --> 00:16:02,510
this you on the script will just sleep

00:16:01,970 --> 00:16:04,340
forever

00:16:02,510 --> 00:16:05,450
a like or process idea so we know which

00:16:04,340 --> 00:16:08,900
one we want to kill with an L sleep

00:16:05,450 --> 00:16:10,670
forever so run that script in the

00:16:08,900 --> 00:16:12,770
terminal wipe it appear its line open

00:16:10,670 --> 00:16:15,080
another terminal then when you do a kill

00:16:12,770 --> 00:16:18,200
minus 15 of that process ID or the

00:16:15,080 --> 00:16:20,210
script or whatever the mine 15 is the

00:16:18,200 --> 00:16:21,680
sick term if you do a kill minus 9

00:16:20,210 --> 00:16:23,420
that's a sick kill and it'll just

00:16:21,680 --> 00:16:25,730
immediately kill this this process but

00:16:23,420 --> 00:16:29,510
the 15 means that it's a sick term a

00:16:25,730 --> 00:16:31,100
termination and then wherever we are in

00:16:29,510 --> 00:16:32,840
that while this is the important bit now

00:16:31,100 --> 00:16:35,090
even if we're in the middle of this

00:16:32,840 --> 00:16:37,880
sweet call which takes 10 seconds it

00:16:35,090 --> 00:16:39,710
will seemingly immediately jump from

00:16:37,880 --> 00:16:42,650
this sleep straight into that signal

00:16:39,710 --> 00:16:45,830
handler that's that's the magic

00:16:42,650 --> 00:16:47,480
basically and the reason this happens is

00:16:45,830 --> 00:16:49,460
because we've got this declared ticks at

00:16:47,480 --> 00:16:51,740
the top and this works because the

00:16:49,460 --> 00:16:53,510
underlying operating system sleep call

00:16:51,740 --> 00:16:55,270
is interruptible I mean if you go into

00:16:53,510 --> 00:16:57,350
the PHP sleep and then you see the C

00:16:55,270 --> 00:17:01,190
library call that it's doing is

00:16:57,350 --> 00:17:04,220
interruptible so declared ticks

00:17:01,190 --> 00:17:06,740
effectively tells PHP under the hood to

00:17:04,220 --> 00:17:07,880
pull for interrupts so PHP is still live

00:17:06,740 --> 00:17:10,430
in polling but you don't see it because

00:17:07,880 --> 00:17:13,010
it's not a New Zealand so under the hood

00:17:10,430 --> 00:17:15,010
after each executable low-level function

00:17:13,010 --> 00:17:17,870
call that has side effects that PHP does

00:17:15,010 --> 00:17:19,339
PHP poles is their interrupt and if

00:17:17,870 --> 00:17:21,320
there is that's why it jumps to the

00:17:19,339 --> 00:17:22,760
signal handler so if you don't declare

00:17:21,320 --> 00:17:24,709
this do this to classics

00:17:22,760 --> 00:17:26,449
then it won't execute the tick function

00:17:24,709 --> 00:17:28,459
and then we want them to the signal

00:17:26,449 --> 00:17:30,500
handler and with them with a minus 15

00:17:28,459 --> 00:17:32,870
meter sent so why am i showing this I

00:17:30,500 --> 00:17:34,400
want you just to see how we can jump

00:17:32,870 --> 00:17:37,040
from something that's seemingly doing

00:17:34,400 --> 00:17:39,680
something to somewhere else at any time

00:17:37,040 --> 00:17:41,690
I've seen DevOps use this to send a

00:17:39,680 --> 00:17:43,490
minus 15 and then turn off a lot of AWS

00:17:41,690 --> 00:17:45,620
instances and shut down a load of a

00:17:43,490 --> 00:17:47,360
degress instances by by an API call

00:17:45,620 --> 00:17:50,730
before terminating

00:17:47,360 --> 00:17:52,770
so the library that I use for this event

00:17:50,730 --> 00:17:54,150
loop and you'll actually see this

00:17:52,770 --> 00:17:55,410
jumping around in the seconds that I've

00:17:54,150 --> 00:17:59,370
shown with the process control extension

00:17:55,410 --> 00:18:01,590
was react as was a while ago there's new

00:17:59,370 --> 00:18:03,870
ones now but I used react which is

00:18:01,590 --> 00:18:06,510
primarily the event loops I showed you

00:18:03,870 --> 00:18:08,880
it has HTTP DNS components and ratchet

00:18:06,510 --> 00:18:11,190
which is a WebSocket implementation on

00:18:08,880 --> 00:18:12,600
top of react so before we get worried

00:18:11,190 --> 00:18:14,580
about how many tech things have just

00:18:12,600 --> 00:18:15,840
popped I've just talked about literally

00:18:14,580 --> 00:18:16,170
that is the end of the tech stack pretty

00:18:15,840 --> 00:18:17,550
much

00:18:16,170 --> 00:18:18,660
you've got your standard server and

00:18:17,550 --> 00:18:20,790
you've got your standard JavaScript

00:18:18,660 --> 00:18:22,020
you've got a library in JavaScript that

00:18:20,790 --> 00:18:23,880
allows you to make this WebSocket call

00:18:22,020 --> 00:18:25,440
and then you've got react which is your

00:18:23,880 --> 00:18:27,000
event loop and react ratchet which is

00:18:25,440 --> 00:18:28,140
your WebSocket mentation on the service

00:18:27,000 --> 00:18:29,760
you got those two things on the server

00:18:28,140 --> 00:18:31,230
and you've got these 50 things on the

00:18:29,760 --> 00:18:32,610
client that's it so you don't need to

00:18:31,230 --> 00:18:36,450
think there's so much stuff here that's

00:18:32,610 --> 00:18:38,760
that's it to the tech stack so react is

00:18:36,450 --> 00:18:41,940
a PHP implementation of an event loop

00:18:38,760 --> 00:18:43,920
that uses select calls by default which

00:18:41,940 --> 00:18:46,770
is really subsystems like call and

00:18:43,920 --> 00:18:49,380
that's why react and amp PHP and other

00:18:46,770 --> 00:18:52,560
PHP implementations of event loops say

00:18:49,380 --> 00:18:55,440
please install if you can live event or

00:18:52,560 --> 00:18:57,810
live easy and live event and lelee VRC

00:18:55,440 --> 00:19:00,990
cross-platform see implementations of

00:18:57,810 --> 00:19:03,270
the event loop so effectively when you

00:19:00,990 --> 00:19:05,700
call interfaces on this library if you

00:19:03,270 --> 00:19:07,830
have these libraries installed then it

00:19:05,700 --> 00:19:09,150
will choose to use live event or Libby V

00:19:07,830 --> 00:19:11,070
and if you don't then it will fall back

00:19:09,150 --> 00:19:12,990
to the crappy flower of PHP version

00:19:11,070 --> 00:19:14,220
obviously of this event legals and

00:19:12,990 --> 00:19:16,020
that's why i library suggest that you

00:19:14,220 --> 00:19:19,160
use the interrupt River Nile

00:19:16,020 --> 00:19:20,790
sort of allowing sea based libraries

00:19:19,160 --> 00:19:23,580
because they're a hell of a lot more

00:19:20,790 --> 00:19:25,980
performance so very shortly we only get

00:19:23,580 --> 00:19:27,570
in terms of code the point with ratchet

00:19:25,980 --> 00:19:29,880
is you need to create an event handler

00:19:27,570 --> 00:19:32,610
this event handler class is the thing

00:19:29,880 --> 00:19:34,320
that handles all your event so you've

00:19:32,610 --> 00:19:35,550
got to have misses like unsubscribe this

00:19:34,320 --> 00:19:38,040
is these are the interface methods on

00:19:35,550 --> 00:19:39,660
subscribe so a user is subscribing to

00:19:38,040 --> 00:19:41,850
receive torrents whenever we have

00:19:39,660 --> 00:19:45,300
anything to say announcement on open

00:19:41,850 --> 00:19:46,620
it's called when when we open a

00:19:45,300 --> 00:19:48,270
connection from the clients or so

00:19:46,620 --> 00:19:49,620
there's about five interface methods or

00:19:48,270 --> 00:19:50,360
something like that yet that you have to

00:19:49,620 --> 00:19:52,620
implement

00:19:50,360 --> 00:19:54,510
once we've created this event handle

00:19:52,620 --> 00:19:57,090
class we tell ratchet this is the event

00:19:54,510 --> 00:19:58,980
handler class and then you type PHP

00:19:57,090 --> 00:19:59,510
index.php hit enter remove this terminal

00:19:58,980 --> 00:20:00,620
to the top

00:19:59,510 --> 00:20:03,110
like we did with the process control

00:20:00,620 --> 00:20:04,940
extension thing so it's ready to handle

00:20:03,110 --> 00:20:06,170
events and a it just sits open and then

00:20:04,940 --> 00:20:09,830
you can start doing your clever in

00:20:06,170 --> 00:20:11,870
JavaScript so this code is copied

00:20:09,830 --> 00:20:13,400
directly from the ratchet documentation

00:20:11,870 --> 00:20:15,200
after this today you can just copy and

00:20:13,400 --> 00:20:16,760
paste some code and theoretically you

00:20:15,200 --> 00:20:18,440
should be able to start doing some cool

00:20:16,760 --> 00:20:20,750
stuff the only thing we've changed here

00:20:18,440 --> 00:20:22,100
is this our event handler class up here

00:20:20,750 --> 00:20:24,670
this is the thing that we have to create

00:20:22,100 --> 00:20:26,780
that contains unsubscribe on our open

00:20:24,670 --> 00:20:28,220
once we've done this we've got the loop

00:20:26,780 --> 00:20:29,570
run at the bottom we hit enter like I

00:20:28,220 --> 00:20:33,320
said we've this terminal for the top

00:20:29,570 --> 00:20:35,990
left and then when JavaScript calls stop

00:20:33,320 --> 00:20:38,210
subscribe then our event handler class

00:20:35,990 --> 00:20:40,960
unsubscribe is called and we can do

00:20:38,210 --> 00:20:43,940
loads of cool stuff in there so

00:20:40,960 --> 00:20:45,560
implementation time I'm going to show

00:20:43,940 --> 00:20:47,150
you the web spec which contains those

00:20:45,560 --> 00:20:48,320
methods that I've just said on open on

00:20:47,150 --> 00:20:50,030
subscribes that you have to implement

00:20:48,320 --> 00:20:51,410
and I'm going to show you how you make

00:20:50,030 --> 00:20:53,030
the JavaScript library calls to make

00:20:51,410 --> 00:20:56,630
that event happens how you trigger those

00:20:53,030 --> 00:20:58,670
event and that's basically how we keep

00:20:56,630 --> 00:21:01,910
everything connected because of this

00:20:58,670 --> 00:21:04,190
spec and this is the one spec which is a

00:21:01,910 --> 00:21:05,390
sub protocol that provides RPC and pub

00:21:04,190 --> 00:21:08,930
sub patterns you don't need to worry too

00:21:05,390 --> 00:21:09,980
much about that but in this in this is

00:21:08,930 --> 00:21:11,930
an interface that you have to implement

00:21:09,980 --> 00:21:13,310
and then you have to have on open on

00:21:11,930 --> 00:21:14,540
closed on subscribe all the sort of

00:21:13,310 --> 00:21:17,780
stuff and you have to handle what

00:21:14,540 --> 00:21:20,510
happens in your event handler so in my

00:21:17,780 --> 00:21:21,800
case we have the concept of a topic here

00:21:20,510 --> 00:21:24,620
you can see one of these things on

00:21:21,800 --> 00:21:26,360
subscribe we have a concept of a topic

00:21:24,620 --> 00:21:30,700
and in my case the topic was just the

00:21:26,360 --> 00:21:32,990
string current so the JavaScript

00:21:30,700 --> 00:21:34,340
implementation the library that allows

00:21:32,990 --> 00:21:36,200
us to add it to this web spec was

00:21:34,340 --> 00:21:38,720
Autobahn jf that's the JavaScript

00:21:36,200 --> 00:21:40,570
library and we have these methods on the

00:21:38,720 --> 00:21:44,510
server that's how the connection works

00:21:40,570 --> 00:21:46,790
so first and foremost at the very top

00:21:44,510 --> 00:21:48,110
we've got on open this is the web spec

00:21:46,790 --> 00:21:51,410
think because we're implementing web

00:21:48,110 --> 00:21:52,730
server interface that this is what you

00:21:51,410 --> 00:21:54,350
have to have so I've closed this on

00:21:52,730 --> 00:21:55,730
subscribe here and this on close here

00:21:54,350 --> 00:21:58,400
we've got this on open that's the one

00:21:55,730 --> 00:22:00,830
that you're going to care about now so

00:21:58,400 --> 00:22:02,660
what we're doing here is we're basically

00:22:00,830 --> 00:22:04,610
saying that when someone opens a

00:22:02,660 --> 00:22:07,430
connection to our event loop this

00:22:04,610 --> 00:22:09,560
handler get on open gets executed for us

00:22:07,430 --> 00:22:12,260
when we get a connection interface

00:22:09,560 --> 00:22:12,519
object so then we store this connection

00:22:12,260 --> 00:22:14,409
of

00:22:12,519 --> 00:22:17,080
next in our internal array of clients

00:22:14,409 --> 00:22:19,899
which is this thing up here so what I

00:22:17,080 --> 00:22:21,489
want to point out here is that this is

00:22:19,899 --> 00:22:23,589
just a class this is just a standard

00:22:21,489 --> 00:22:26,559
class so I've got this logger here I've

00:22:23,589 --> 00:22:29,139
removed the constructor but you can just

00:22:26,559 --> 00:22:30,549
put you know a new monologue logo as in

00:22:29,139 --> 00:22:32,080
the constructor and dependency injection

00:22:30,549 --> 00:22:33,279
of in this is just a standard class the

00:22:32,080 --> 00:22:35,950
only difference that you'll see here

00:22:33,279 --> 00:22:38,830
from standard programming is that this

00:22:35,950 --> 00:22:40,539
thing contains state so that every time

00:22:38,830 --> 00:22:42,129
someone connects and disconnects there's

00:22:40,539 --> 00:22:43,479
not a new class each time because you've

00:22:42,129 --> 00:22:44,440
already hit enter in the terminal and

00:22:43,479 --> 00:22:46,659
you're running this thing in the top

00:22:44,440 --> 00:22:48,070
left you'll have that array of clients

00:22:46,659 --> 00:22:51,399
opening and closing and there's always

00:22:48,070 --> 00:22:53,229
going to be state in this class so this

00:22:51,399 --> 00:22:54,820
is this is really simple this is that on

00:22:53,229 --> 00:22:56,859
open and I'm going to show you the Java

00:22:54,820 --> 00:23:00,309
scripts that causes this to be jumped to

00:22:56,859 --> 00:23:01,359
and executed so I've moved that to the

00:23:00,309 --> 00:23:03,399
top of the screen you don't need to care

00:23:01,359 --> 00:23:06,039
about that now you can see this is the

00:23:03,399 --> 00:23:09,099
only JavaScript you need to to make that

00:23:06,039 --> 00:23:12,339
on open execute in your event loop so

00:23:09,099 --> 00:23:13,690
we're making a call to this URL over

00:23:12,339 --> 00:23:15,999
WebSockets not the secure one just the

00:23:13,690 --> 00:23:18,219
standard one we actually call on o or we

00:23:15,999 --> 00:23:20,289
actually call open and when the on open

00:23:18,219 --> 00:23:21,429
succeeds we get the session object so

00:23:20,289 --> 00:23:23,049
that's literally the code to make

00:23:21,429 --> 00:23:24,700
someone connect and to be able to store

00:23:23,049 --> 00:23:26,409
that IP address or whatever the client

00:23:24,700 --> 00:23:30,999
ID is in the internal array of clients

00:23:26,409 --> 00:23:33,009
yeah that's the JavaScript library that

00:23:30,999 --> 00:23:35,139
conforms to that spec that allows you to

00:23:33,009 --> 00:23:36,759
call open and have an open call on the

00:23:35,139 --> 00:23:38,739
server that's the thing that allows that

00:23:36,759 --> 00:23:40,809
to be to be the same so that won't

00:23:38,739 --> 00:23:42,429
specular before this one

00:23:40,809 --> 00:23:47,619
that's the JavaScript library that

00:23:42,429 --> 00:23:48,879
allows B to talk to JavaScript so that's

00:23:47,619 --> 00:23:51,399
it those are the two things to make an

00:23:48,879 --> 00:23:55,450
open heaven and this is kind of the same

00:23:51,399 --> 00:23:58,839
with subscribe so I've closed on open

00:23:55,450 --> 00:24:00,429
here and I've called unsubscribe we have

00:23:58,839 --> 00:24:02,440
a connection and we have a topic in my

00:24:00,429 --> 00:24:03,820
case topic with torrents so the only

00:24:02,440 --> 00:24:05,529
thing I've done different here it's a

00:24:03,820 --> 00:24:08,559
little bit more complicated but we've

00:24:05,529 --> 00:24:09,969
got this a loop at periodic timer and

00:24:08,559 --> 00:24:11,769
the only thing I've got this loop from

00:24:09,969 --> 00:24:13,359
is bypassing the event loop which is an

00:24:11,769 --> 00:24:14,769
object that you create at the very

00:24:13,359 --> 00:24:16,929
beginning of this application of

00:24:14,769 --> 00:24:19,570
dependency injected that into this event

00:24:16,929 --> 00:24:21,609
handler so I passed it in yet has

00:24:19,570 --> 00:24:23,469
methods on it like at periodic timer in

00:24:21,609 --> 00:24:24,489
this case every 2 seconds

00:24:23,469 --> 00:24:25,809
we're going to make a horrible

00:24:24,489 --> 00:24:26,370
command-line call to go and get that

00:24:25,809 --> 00:24:28,440
time

00:24:26,370 --> 00:24:30,450
and then once I've got that ton of data

00:24:28,440 --> 00:24:32,549
I can broadcast that data FAQ to

00:24:30,450 --> 00:24:33,750
everyone subscribed to that topic and

00:24:32,549 --> 00:24:35,460
I'll put these slides on lines real easy

00:24:33,750 --> 00:24:37,559
to really do this as other messes as

00:24:35,460 --> 00:24:39,900
well but you get a timer object from

00:24:37,559 --> 00:24:42,360
back from that so I'm storing the timer

00:24:39,900 --> 00:24:43,830
and the topic and the client connection

00:24:42,360 --> 00:24:46,230
ID together for every single person

00:24:43,830 --> 00:24:47,429
who's connected so then we can remove

00:24:46,230 --> 00:24:48,720
someone from the internal array of

00:24:47,429 --> 00:24:50,150
clients which means we're not going to

00:24:48,720 --> 00:24:54,990
send any information out to them anymore

00:24:50,150 --> 00:24:56,460
when we call on unsubscribe we can call

00:24:54,990 --> 00:24:58,710
methods on that time of object like

00:24:56,460 --> 00:25:01,770
start or pause and things like that and

00:24:58,710 --> 00:25:03,210
then the topic is just in my case it is

00:25:01,770 --> 00:25:06,840
the string pirates so we know who

00:25:03,210 --> 00:25:09,149
subscribe to times so this is the same

00:25:06,840 --> 00:25:10,649
as on open this is the JavaScript that

00:25:09,149 --> 00:25:11,940
the only thing that's changed here to

00:25:10,649 --> 00:25:14,100
make this happen is with the session

00:25:11,940 --> 00:25:16,260
objects we get back from unopen we call

00:25:14,100 --> 00:25:18,450
subscribe on it so we're subscribing to

00:25:16,260 --> 00:25:19,860
the topic torrents and whenever we get

00:25:18,450 --> 00:25:22,020
some result back we'll console logging

00:25:19,860 --> 00:25:24,299
totally legal torrent data and then the

00:25:22,020 --> 00:25:26,820
result so that hopefully that's really

00:25:24,299 --> 00:25:28,770
easy to understand we've got this this

00:25:26,820 --> 00:25:30,480
thing is constantly looping around over

00:25:28,770 --> 00:25:32,820
and over and whenever we call this from

00:25:30,480 --> 00:25:34,679
JavaScript this unsubscribe method is

00:25:32,820 --> 00:25:36,029
called and then we start every two

00:25:34,679 --> 00:25:39,210
seconds a timer on that to send the

00:25:36,029 --> 00:25:41,250
information out so before I continue I

00:25:39,210 --> 00:25:44,070
want to show how easy is to run this

00:25:41,250 --> 00:25:45,210
event loop and Apache on the same server

00:25:44,070 --> 00:25:47,220
because this is a problem you need to

00:25:45,210 --> 00:25:49,740
need to be concerned with because this

00:25:47,220 --> 00:25:52,020
is this event loop is running on an IP

00:25:49,740 --> 00:25:53,850
address and a port so because it is a

00:25:52,020 --> 00:25:56,250
server effectively so you've got to make

00:25:53,850 --> 00:25:59,250
sure that WebSocket calls go to the

00:25:56,250 --> 00:26:01,919
event handler and your HTTP calls go to

00:25:59,250 --> 00:26:03,809
Apache so all is I think this was the

00:26:01,919 --> 00:26:05,370
only line maybe one more line but this

00:26:03,809 --> 00:26:07,710
was the only line that I needed to add

00:26:05,370 --> 00:26:10,320
to my virtual host proxy path which

00:26:07,710 --> 00:26:13,140
states that WebSocket secure calls or

00:26:10,320 --> 00:26:14,640
WebSocket calls go to the event handler

00:26:13,140 --> 00:26:15,929
instead running on this port and you set

00:26:14,640 --> 00:26:17,940
up the IP address and port that they're

00:26:15,929 --> 00:26:21,270
running on that when you hit enter in

00:26:17,940 --> 00:26:22,590
that terminal in the code of lab or just

00:26:21,270 --> 00:26:24,360
use nginx because it's a lot easier to

00:26:22,590 --> 00:26:26,130
do apparently so kind of that now the

00:26:24,360 --> 00:26:27,149
high-level architecture or data for

00:26:26,130 --> 00:26:30,960
whatever you want to call it of this

00:26:27,149 --> 00:26:32,850
working is you subscribe to a topic in

00:26:30,960 --> 00:26:34,200
JavaScript dot subscribed you're calling

00:26:32,850 --> 00:26:36,669
with auto band Rajesh library

00:26:34,200 --> 00:26:39,799
we're subscribing to the Thomas topic

00:26:36,669 --> 00:26:42,379
then unsubscribe is called automatically

00:26:39,799 --> 00:26:43,519
for us in the event handler which is

00:26:42,379 --> 00:26:45,110
where we store the connection of the

00:26:43,519 --> 00:26:46,879
person that's connected in an internal

00:26:45,110 --> 00:26:48,860
array we start the timer every two

00:26:46,879 --> 00:26:50,749
seconds for that person using a periodic

00:26:48,860 --> 00:26:52,249
timer and then we store that timer

00:26:50,749 --> 00:26:55,669
against that connection in the internal

00:26:52,249 --> 00:26:57,919
clients where as well every two seconds

00:26:55,669 --> 00:26:59,419
the timer is hit we get that plant data

00:26:57,919 --> 00:27:01,340
by the horrible command line call and

00:26:59,419 --> 00:27:03,620
then this takes ages because it's crap

00:27:01,340 --> 00:27:05,269
at the moment and you'll see why that's

00:27:03,620 --> 00:27:06,980
important in a little bit then we

00:27:05,269 --> 00:27:09,830
broadcast that data back to the server

00:27:06,980 --> 00:27:11,659
back to the client and then when the

00:27:09,830 --> 00:27:13,700
Brundtland person navigates away from

00:27:11,659 --> 00:27:16,700
the webpage on unsubscribe is called

00:27:13,700 --> 00:27:17,929
automatically for us or the in your

00:27:16,700 --> 00:27:20,990
JavaScript you have a button that says

00:27:17,929 --> 00:27:23,539
unsubscribe the execute dot unsubscribe

00:27:20,990 --> 00:27:25,820
which then executes an unsubscribe in

00:27:23,539 --> 00:27:27,320
the event handler then we have to do we

00:27:25,820 --> 00:27:29,749
have to do cleanup which is stop the

00:27:27,320 --> 00:27:31,129
timer we do in a race search in the

00:27:29,749 --> 00:27:34,639
internal array of clients to find the

00:27:31,129 --> 00:27:36,559
person that's unsubscribing we stop the

00:27:34,639 --> 00:27:37,610
timer for that connection and then we

00:27:36,559 --> 00:27:38,990
move that connection internal internal

00:27:37,610 --> 00:27:41,179
wave client so this is kind of the life

00:27:38,990 --> 00:27:42,710
cycle of having someone connecting

00:27:41,179 --> 00:27:45,169
registering an interest in receiving

00:27:42,710 --> 00:27:46,460
current data starting the timer to send

00:27:45,169 --> 00:27:48,169
that to that person who's interested in

00:27:46,460 --> 00:27:49,940
it and then removing that from the

00:27:48,169 --> 00:27:52,340
internal array of clients when they on

00:27:49,940 --> 00:27:54,289
some phone subscribe and in our case we

00:27:52,340 --> 00:27:57,049
just console logged the information that

00:27:54,289 --> 00:27:58,220
came from the show to the client so

00:27:57,049 --> 00:28:00,139
there was a few problems with this

00:27:58,220 --> 00:28:02,869
implementation that I came across and

00:28:00,139 --> 00:28:07,460
the first one was that I was subscribing

00:28:02,869 --> 00:28:10,129
to the string torrent I had this grand

00:28:07,460 --> 00:28:11,899
idea that me and all my mates could use

00:28:10,129 --> 00:28:14,029
this application that I was building to

00:28:11,899 --> 00:28:16,940
be able to have their own individual

00:28:14,029 --> 00:28:18,980
currents so if everyone was subscribing

00:28:16,940 --> 00:28:20,330
to torrents the next person that opened

00:28:18,980 --> 00:28:22,399
a window on another computer they'd be

00:28:20,330 --> 00:28:23,929
getting everyone else's torrent data

00:28:22,399 --> 00:28:26,899
it's not on a per user and per

00:28:23,929 --> 00:28:29,749
connection basis so my plan was to in a

00:28:26,899 --> 00:28:32,419
MySQL database store a user ID next to a

00:28:29,749 --> 00:28:34,159
torrent hash still do that call to get

00:28:32,419 --> 00:28:36,710
all the torrent data but then filter it

00:28:34,159 --> 00:28:38,749
for the user ID that has both torrents

00:28:36,710 --> 00:28:42,559
and then only return that users torrent

00:28:38,749 --> 00:28:43,940
to the cloud so this just the string

00:28:42,559 --> 00:28:46,460
torrents meant that it wasn't on a per

00:28:43,940 --> 00:28:49,740
user and per connection basis and also

00:28:46,460 --> 00:28:50,850
if I was to open a browser window to ask

00:28:49,740 --> 00:28:52,230
for this information to be sent to me

00:28:50,850 --> 00:28:54,090
and then I open another browser window

00:28:52,230 --> 00:28:56,490
the exact same one basically with the

00:28:54,090 --> 00:28:58,679
same web page then that periodic timer

00:28:56,490 --> 00:28:59,250
will be started again for the same

00:28:58,679 --> 00:29:01,530
person

00:28:59,250 --> 00:29:03,030
so then both webpages will constantly be

00:29:01,530 --> 00:29:07,590
getting this basically double the speed

00:29:03,030 --> 00:29:10,650
of the tyrant data so yeah that was a

00:29:07,590 --> 00:29:12,809
big fail so the way I fix that kind of a

00:29:10,650 --> 00:29:15,360
hack as most of this was basically a

00:29:12,809 --> 00:29:17,520
hack was the topic has to be a string

00:29:15,360 --> 00:29:19,470
and you know what it Jason is a

00:29:17,520 --> 00:29:21,690
string so I basically put structured

00:29:19,470 --> 00:29:24,210
data in Jason and send out the topic so

00:29:21,690 --> 00:29:26,820
the topic was torrent and the user ID

00:29:24,210 --> 00:29:28,320
was the user idea got from PHP and I

00:29:26,820 --> 00:29:30,870
gave to a JavaScript variable which I

00:29:28,320 --> 00:29:33,750
then use to subscribe to a WebSocket

00:29:30,870 --> 00:29:37,740
thing so now every subscription would be

00:29:33,750 --> 00:29:39,450
unique for user ID so a user ID two four

00:29:37,740 --> 00:29:40,920
five opens a browser window you use a

00:29:39,450 --> 00:29:42,450
user two four seven opens a browser

00:29:40,920 --> 00:29:44,700
window and they will each have their own

00:29:42,450 --> 00:29:46,230
current data sent to them every two

00:29:44,700 --> 00:29:50,190
seconds because that topic string is

00:29:46,230 --> 00:29:51,929
different each of those people but the

00:29:50,190 --> 00:29:54,059
problem is that with this the same user

00:29:51,929 --> 00:29:55,530
could still open another webpage it

00:29:54,059 --> 00:29:56,790
works for different users but the same

00:29:55,530 --> 00:29:58,650
user could still open another webpage

00:29:56,790 --> 00:30:00,120
and then you'll still get double the

00:29:58,650 --> 00:30:02,309
amount of information back because the

00:30:00,120 --> 00:30:04,800
topic string which contains the topic

00:30:02,309 --> 00:30:07,500
and the user ID will be exactly the same

00:30:04,800 --> 00:30:10,620
so they're basically subscribing twice

00:30:07,500 --> 00:30:11,910
on both of their pages so I go around

00:30:10,620 --> 00:30:15,300
this with the sort of authentication

00:30:11,910 --> 00:30:16,410
duplicate data solution so I was passing

00:30:15,300 --> 00:30:18,780
the problem was I was passing the user

00:30:16,410 --> 00:30:23,850
ID to a JavaScript variable and then

00:30:18,780 --> 00:30:26,190
subscribing to the torrents topic but if

00:30:23,850 --> 00:30:27,150
you were to pause JavaScript execute I

00:30:26,190 --> 00:30:28,170
don't even know why I was worrying about

00:30:27,150 --> 00:30:29,700
this because my mates weren't going to

00:30:28,170 --> 00:30:30,990
 around with my code well actually

00:30:29,700 --> 00:30:33,480
we were all compute students so we

00:30:30,990 --> 00:30:36,150
probably would but I know I would

00:30:33,480 --> 00:30:38,309
but basically one of our mates could

00:30:36,150 --> 00:30:41,429
pause the execution of the JavaScript

00:30:38,309 --> 00:30:43,350
change that username is your ID and then

00:30:41,429 --> 00:30:44,580
click play and then they would get

00:30:43,350 --> 00:30:45,900
someone else's torrent data if they

00:30:44,580 --> 00:30:47,250
could guess the user ID and I was using

00:30:45,900 --> 00:30:50,429
auto-increment so obviously they'd

00:30:47,250 --> 00:30:51,960
eventually find someone else's data so

00:30:50,429 --> 00:30:53,370
the way I got around this was to do

00:30:51,960 --> 00:30:55,140
something really stupid and really

00:30:53,370 --> 00:30:59,850
clever which was basically reinvent how

00:30:55,140 --> 00:31:02,880
PHP did sessions great so I would create

00:30:59,850 --> 00:31:04,770
a unique token on the server

00:31:02,880 --> 00:31:07,080
and I would pass that to the JavaScript

00:31:04,770 --> 00:31:09,300
before making the WebSocket call this

00:31:07,080 --> 00:31:10,980
unique token I use random bytes which is

00:31:09,300 --> 00:31:13,800
well I would use random bytes because

00:31:10,980 --> 00:31:16,770
PHP didn't 70 languages back then but I

00:31:13,800 --> 00:31:17,940
G's run the bytes instead of openness to

00:31:16,770 --> 00:31:20,970
some random pseudo bytes because that's

00:31:17,940 --> 00:31:24,840
not fork safe because security was a big

00:31:20,970 --> 00:31:27,260
concern in this application I pass the

00:31:24,840 --> 00:31:30,150
topic then so now I've gone from the

00:31:27,260 --> 00:31:33,480
topic and the user ID being sent up for

00:31:30,150 --> 00:31:35,550
a forest asking for pterence it would

00:31:33,480 --> 00:31:37,470
then contain a unique token if you

00:31:35,550 --> 00:31:38,640
refresh this page every time you get a

00:31:37,470 --> 00:31:41,580
different token in the JavaScript

00:31:38,640 --> 00:31:44,640
variable so if one user use a 2 for 5 in

00:31:41,580 --> 00:31:46,620
this example was to open a second page

00:31:44,640 --> 00:31:48,210
and how to subscribe to torrents that

00:31:46,620 --> 00:31:49,830
string will then have a different token

00:31:48,210 --> 00:31:51,780
in so then they will be getting

00:31:49,830 --> 00:31:53,910
individual current data instead so we're

00:31:51,780 --> 00:31:55,230
not having one page effect another so

00:31:53,910 --> 00:31:58,020
they're not having double the data sent

00:31:55,230 --> 00:32:00,330
back now I know ratchet at this point

00:31:58,020 --> 00:32:01,920
has a sessions component that worked

00:32:00,330 --> 00:32:03,960
with symphony and I never even used it

00:32:01,920 --> 00:32:06,210
with I know if you have takes TTP

00:32:03,960 --> 00:32:10,440
foundation in your in your application

00:32:06,210 --> 00:32:11,820
then you can basically tour them play

00:32:10,440 --> 00:32:13,830
that but I didn't do that I just used

00:32:11,820 --> 00:32:17,250
this why I thought was really simple

00:32:13,830 --> 00:32:21,030
solution the biggest problem out of all

00:32:17,250 --> 00:32:24,330
of this though was that it was blocking

00:32:21,030 --> 00:32:26,490
so this stupid five-second call they

00:32:24,330 --> 00:32:28,230
took to get the taunt data during that

00:32:26,490 --> 00:32:29,750
time because this event was basically

00:32:28,230 --> 00:32:32,580
blocked it was waiting for a response

00:32:29,750 --> 00:32:34,770
then no one else could register an

00:32:32,580 --> 00:32:36,000
interest in receiving tonic data no one

00:32:34,770 --> 00:32:38,940
else could have that torrent data sent

00:32:36,000 --> 00:32:40,410
to them no one else so nobody called dot

00:32:38,940 --> 00:32:41,940
subscribe in the JavaScript and have

00:32:40,410 --> 00:32:43,350
unsubscribe called in the event we've

00:32:41,940 --> 00:32:44,970
automatically for them they'd have to

00:32:43,350 --> 00:32:46,680
wait until this five-second bloody

00:32:44,970 --> 00:32:49,320
command line call finished

00:32:46,680 --> 00:32:50,970
so he's blocking and it's the same for

00:32:49,320 --> 00:32:53,010
database the database calls

00:32:50,970 --> 00:32:55,170
I was checking it on the server side in

00:32:53,010 --> 00:32:57,360
the event loop that's a user who sent up

00:32:55,170 --> 00:32:58,740
the ID and token was the same as what

00:32:57,360 --> 00:33:00,510
was in the database and if they weren't

00:32:58,740 --> 00:33:01,650
then I'd just say I'm not going to add

00:33:00,510 --> 00:33:02,700
you to the internal array of clients

00:33:01,650 --> 00:33:06,630
which means you're not going to get any

00:33:02,700 --> 00:33:08,070
information sent up to you so the way

00:33:06,630 --> 00:33:09,720
around this blocking solution that I

00:33:08,070 --> 00:33:12,600
found was you could either use another

00:33:09,720 --> 00:33:14,700
process to run that torrent call so it's

00:33:12,600 --> 00:33:15,420
in a child somewhere the event loop can

00:33:14,700 --> 00:33:18,510
keep

00:33:15,420 --> 00:33:19,980
Ewing or use a job kit I really like the

00:33:18,510 --> 00:33:21,560
job queue solution I'll show you both of

00:33:19,980 --> 00:33:24,330
these within the next couple of minutes

00:33:21,560 --> 00:33:25,710
but it requires a good architecture to

00:33:24,330 --> 00:33:28,440
make sure that your job queue is

00:33:25,710 --> 00:33:29,880
completely separate from your from your

00:33:28,440 --> 00:33:31,770
application but then it still knows

00:33:29,880 --> 00:33:34,250
where to send the data back to I'll show

00:33:31,770 --> 00:33:39,480
you I'll show you all that's in some

00:33:34,250 --> 00:33:41,430
option one in unsubscribe you can do

00:33:39,480 --> 00:33:43,170
this create a new child process which

00:33:41,430 --> 00:33:45,540
contains our whole command line call and

00:33:43,170 --> 00:33:48,090
then you add timer to that and then you

00:33:45,540 --> 00:33:50,370
start the timer and then when data is

00:33:48,090 --> 00:33:53,100
given that's when you then broadcast it

00:33:50,370 --> 00:33:55,830
back to the client so you can say on STD

00:33:53,100 --> 00:33:59,010
out when we get data send it out and

00:33:55,830 --> 00:34:00,210
this is this is great because this meant

00:33:59,010 --> 00:34:03,900
that the event loop could then continue

00:34:00,210 --> 00:34:05,520
so it wasn't working anymore so the

00:34:03,900 --> 00:34:07,620
other downside of this is this is a

00:34:05,520 --> 00:34:10,950
process and it only works on your

00:34:07,620 --> 00:34:12,660
machine so it's not a particularly

00:34:10,950 --> 00:34:13,800
scalable solution I have no idea why I

00:34:12,660 --> 00:34:14,910
was even considering this because

00:34:13,800 --> 00:34:16,020
there's only about eight of us we're

00:34:14,910 --> 00:34:20,190
going to use it so I don't really matter

00:34:16,020 --> 00:34:22,380
but basically you're spawning a new

00:34:20,190 --> 00:34:24,360
process every time someone asks for

00:34:22,380 --> 00:34:26,190
current data every five seconds for

00:34:24,360 --> 00:34:28,169
every client and there's a lot of

00:34:26,190 --> 00:34:29,550
overhead in creating a new process so

00:34:28,169 --> 00:34:31,560
you've got things like memory allocation

00:34:29,550 --> 00:34:32,700
file descriptors file handle as all of

00:34:31,560 --> 00:34:35,100
this Linux bollocks that nobody

00:34:32,700 --> 00:34:37,470
understands and I don't understand but a

00:34:35,100 --> 00:34:40,290
process is effectively the biggest unit

00:34:37,470 --> 00:34:42,090
of execution with an operating system so

00:34:40,290 --> 00:34:43,919
it requires the most resources so it's

00:34:42,090 --> 00:34:45,570
not the best way I'm actually doing like

00:34:43,919 --> 00:34:48,300
shitty little projects and I envisioned

00:34:45,570 --> 00:34:51,510
this huge awesome completely legal

00:34:48,300 --> 00:34:54,150
system as download chart so the next

00:34:51,510 --> 00:34:56,100
step was to use a jaw cube so the point

00:34:54,150 --> 00:34:58,530
is that I would then fire off the

00:34:56,100 --> 00:35:00,690
request for this torrent data into a job

00:34:58,530 --> 00:35:02,430
queue wait for it to finish although the

00:35:00,690 --> 00:35:04,410
event loop can keep continuing and then

00:35:02,430 --> 00:35:05,670
put that back into the job queue rather

00:35:04,410 --> 00:35:06,870
like that diagram I showed at the

00:35:05,670 --> 00:35:09,780
beginning which has the event loop in

00:35:06,870 --> 00:35:11,790
the middle the all the blocking i/o

00:35:09,780 --> 00:35:13,170
stuff outside of the event loop and then

00:35:11,790 --> 00:35:16,470
the request going into the event loop

00:35:13,170 --> 00:35:19,320
asking for the information so when you

00:35:16,470 --> 00:35:20,580
set up your ratchet and all that event

00:35:19,320 --> 00:35:21,900
loop and you hit enter and move it to

00:35:20,580 --> 00:35:24,180
the top left this is where you put this

00:35:21,900 --> 00:35:25,860
code at the very top here and all we say

00:35:24,180 --> 00:35:27,930
here which you can also copy and paste

00:35:25,860 --> 00:35:29,110
from the documentation when we get

00:35:27,930 --> 00:35:32,140
information sent to

00:35:29,110 --> 00:35:34,510
from anywhere on this machine on port

00:35:32,140 --> 00:35:36,310
five five five five then it's going to

00:35:34,510 --> 00:35:37,540
call on zmq response a function that

00:35:36,310 --> 00:35:39,670
doesn't exist yet we're going to create

00:35:37,540 --> 00:35:41,200
it in a second in our event handler so

00:35:39,670 --> 00:35:43,270
any information that comes out the port

00:35:41,200 --> 00:35:44,620
line spectra five hits our method

00:35:43,270 --> 00:35:48,340
automatically for us this is what this

00:35:44,620 --> 00:35:51,940
code saying so in our unsubscribe method

00:35:48,340 --> 00:35:53,770
when someone asks for torrent I'm using

00:35:51,940 --> 00:35:55,420
this thing called feedstocks now this

00:35:53,770 --> 00:35:57,520
book isn't about a job queue there's a

00:35:55,420 --> 00:35:59,950
talk that I linked to at the end which

00:35:57,520 --> 00:36:01,300
is really cool about creating workers

00:35:59,950 --> 00:36:03,100
that are object oriented and they all

00:36:01,300 --> 00:36:03,850
add a to nice good solid principles and

00:36:03,100 --> 00:36:05,920
all that but I'm going to talk about

00:36:03,850 --> 00:36:08,050
that but basically this is basically the

00:36:05,920 --> 00:36:10,840
only line that I would need to add into

00:36:08,050 --> 00:36:13,090
my unsubscribe method put that job

00:36:10,840 --> 00:36:14,200
into a torrent kit that's it and have to

00:36:13,090 --> 00:36:15,420
get about so it's a fire-and-forget

00:36:14,200 --> 00:36:19,990
that's the important thing

00:36:15,420 --> 00:36:21,670
so looking at our new method that we've

00:36:19,990 --> 00:36:25,870
created here this owns lmq response

00:36:21,670 --> 00:36:27,460
thing down at the bottom the point of

00:36:25,870 --> 00:36:28,870
this is that any information that sent

00:36:27,460 --> 00:36:30,370
over port five five five hits this

00:36:28,870 --> 00:36:32,230
method we just get some random orbit

00:36:30,370 --> 00:36:34,030
read data so if I was to set this up now

00:36:32,230 --> 00:36:36,640
you guys could all send messages over

00:36:34,030 --> 00:36:38,650
this IP address port five five five five

00:36:36,640 --> 00:36:39,700
as long as you used in queue all the

00:36:38,650 --> 00:36:41,230
write library and you'll see that in a

00:36:39,700 --> 00:36:42,400
second as well saying oh you'll talk

00:36:41,230 --> 00:36:43,600
your or whatever you want to say

00:36:42,400 --> 00:36:46,750
and then it will pop up on the screen if

00:36:43,600 --> 00:36:49,360
I want to show it so all we do is we

00:36:46,750 --> 00:36:50,770
find the client that we want to some

00:36:49,360 --> 00:36:54,070
information to and then broadcast the

00:36:50,770 --> 00:36:55,690
data to the client so this is how easy

00:36:54,070 --> 00:36:57,910
is to inject stuff back into the job

00:36:55,690 --> 00:37:00,910
cube so the high-level kind of data flow

00:36:57,910 --> 00:37:04,540
and architecture of the new way is you

00:37:00,910 --> 00:37:06,580
subscribing JavaScript to torrents it

00:37:04,540 --> 00:37:09,670
automatically calls unsubscribe for us

00:37:06,580 --> 00:37:11,440
in like like before but we store that

00:37:09,670 --> 00:37:13,300
connection in an eternal raela right

00:37:11,440 --> 00:37:15,310
before but instead we then use feed

00:37:13,300 --> 00:37:16,450
store just add it to a job queue or

00:37:15,310 --> 00:37:20,710
whatever job queue you want to use

00:37:16,450 --> 00:37:21,940
fire-and-forget forget about it then you

00:37:20,710 --> 00:37:23,530
have all these workers as many as you

00:37:21,940 --> 00:37:25,030
want that pull that job at the job queue

00:37:23,530 --> 00:37:26,380
do all the processing so they do this

00:37:25,030 --> 00:37:29,440
horrible command line call that takes

00:37:26,380 --> 00:37:31,060
ages when they're finally done they send

00:37:29,440 --> 00:37:33,700
that data over port five five five five

00:37:31,060 --> 00:37:36,760
and it gets injected back into the event

00:37:33,700 --> 00:37:38,260
queue of the event loop onto our into

00:37:36,760 --> 00:37:40,120
our under and queue response method that

00:37:38,260 --> 00:37:41,530
we've just created here that's how we

00:37:40,120 --> 00:37:42,880
get stuff back into the event tree from

00:37:41,530 --> 00:37:44,410
somewhere else and this is a work

00:37:42,880 --> 00:37:45,700
that's doing it but you can do a command

00:37:44,410 --> 00:37:46,900
line call or whatever how you want

00:37:45,700 --> 00:37:50,580
you'll see me do a command line call in

00:37:46,900 --> 00:37:53,350
a second and then we broadcast that data

00:37:50,580 --> 00:37:54,940
back to the client so this is separating

00:37:53,350 --> 00:37:55,840
the processing like that diagram I

00:37:54,940 --> 00:37:57,370
showed you at the beginning all the

00:37:55,840 --> 00:37:58,780
intensive operations were throwing that

00:37:57,370 --> 00:38:00,760
into a job to you getting the workers to

00:37:58,780 --> 00:38:02,410
do it and then inject that back

00:38:00,760 --> 00:38:03,940
into the into the job queue when it's

00:38:02,410 --> 00:38:05,710
done which is then broadcasted to the

00:38:03,940 --> 00:38:07,960
client and the good thing about this is

00:38:05,710 --> 00:38:09,910
this it is to kind of the original idea

00:38:07,960 --> 00:38:12,280
that I brought up at the beginning the

00:38:09,910 --> 00:38:14,110
event loop is just an intermediary for

00:38:12,280 --> 00:38:16,410
registering and interest in receiving

00:38:14,110 --> 00:38:18,160
data and sending data wrap that's it

00:38:16,410 --> 00:38:19,930
nobody's blocked from registering

00:38:18,160 --> 00:38:22,390
interest because this work is all done

00:38:19,930 --> 00:38:25,060
outside of the event loop and workers as

00:38:22,390 --> 00:38:26,170
long as they have been stopped D and 0nq

00:38:25,060 --> 00:38:28,210
of which there are so many languages

00:38:26,170 --> 00:38:29,950
that support all this stuff workers can

00:38:28,210 --> 00:38:32,080
be in any of these languages which is

00:38:29,950 --> 00:38:33,790
really cool so this is the part that

00:38:32,080 --> 00:38:34,870
completely up last time so please

00:38:33,790 --> 00:38:36,460
turn off all your torrents so I can

00:38:34,870 --> 00:38:40,810
actually show you some completely legal

00:38:36,460 --> 00:38:42,970
stuff yeah great okay torrents on the

00:38:40,810 --> 00:38:45,370
right completely legal stuff as you can

00:38:42,970 --> 00:38:47,950
see we've got this bun - stuff happening

00:38:45,370 --> 00:38:49,720
over here that's currently paused now

00:38:47,950 --> 00:38:53,080
this is the application that I created

00:38:49,720 --> 00:38:56,980
for me my friends from a theme that I

00:38:53,080 --> 00:38:58,930
bought online of course and also a good

00:38:56,980 --> 00:39:01,360
 hold on ignore the bit that says

00:38:58,930 --> 00:39:05,260
your stream mobile videos so I'm going

00:39:01,360 --> 00:39:06,970
to click downloads over here and also

00:39:05,260 --> 00:39:13,000
the important thing I need to do is show

00:39:06,970 --> 00:39:14,500
you my code this is the code you saw at

00:39:13,000 --> 00:39:16,030
the very beginning where I'll near the

00:39:14,500 --> 00:39:18,670
beginning which is actually starting

00:39:16,030 --> 00:39:20,920
this event loops so I hit enter on the

00:39:18,670 --> 00:39:22,300
WebSocket server I move this to terminal

00:39:20,920 --> 00:39:24,370
to the top left I'm using PHP so I'm

00:39:22,300 --> 00:39:26,110
here but that's all you need to do and

00:39:24,370 --> 00:39:27,700
then log I've got WebSocket server

00:39:26,110 --> 00:39:31,090
styling that's just me logging something

00:39:27,700 --> 00:39:32,560
out when I when I start this so if I

00:39:31,090 --> 00:39:35,260
repress this downloads page now

00:39:32,560 --> 00:39:37,750
oh yes nobodies tiny and just me it's

00:39:35,260 --> 00:39:41,820
perfect so the important thing to see

00:39:37,750 --> 00:39:41,820
I've got it's cutting off at the pond

00:39:43,650 --> 00:39:48,450
okay so these tourist toilet information

00:39:45,990 --> 00:39:49,920
here is actually that thing that's

00:39:48,450 --> 00:39:51,060
getting pushed towards every two seconds

00:39:49,920 --> 00:39:53,460
so the other thing you need to worry

00:39:51,060 --> 00:39:56,460
about here is it says pause for these

00:39:53,460 --> 00:40:00,390
times because they are paused so going

00:39:56,460 --> 00:40:03,030
back to these if I resume them and ruin

00:40:00,390 --> 00:40:04,920
everyone else's talks and then go back

00:40:03,030 --> 00:40:09,210
to this now you can see that that

00:40:04,920 --> 00:40:10,260
information now say is downloading so

00:40:09,210 --> 00:40:11,430
that information has changed because

00:40:10,260 --> 00:40:12,990
every two seconds it's getting this

00:40:11,430 --> 00:40:14,310
torrent data and pushing it and the cool

00:40:12,990 --> 00:40:16,860
thing is if I show you the network for

00:40:14,310 --> 00:40:18,060
this I close this even though that

00:40:16,860 --> 00:40:19,590
information is being pushed to a few

00:40:18,060 --> 00:40:21,330
seconds every two seconds there's no

00:40:19,590 --> 00:40:24,120
information in this network saying

00:40:21,330 --> 00:40:27,450
because it's over WebSockets and then if

00:40:24,120 --> 00:40:30,180
I pause these again and then go back to

00:40:27,450 --> 00:40:33,360
this and go back to the console you can

00:40:30,180 --> 00:40:36,740
see how when it comes up from it changes

00:40:33,360 --> 00:40:38,970
from downloading support in the JSON

00:40:36,740 --> 00:40:41,160
which I thought was really cool now this

00:40:38,970 --> 00:40:42,900
is we've basically eliminated the

00:40:41,160 --> 00:40:46,050
overhead of state of the HTTP requests

00:40:42,900 --> 00:40:48,180
we're just having data push to us now so

00:40:46,050 --> 00:40:50,520
going back to the code I want to show

00:40:48,180 --> 00:40:54,210
you how I then inject stuff back into

00:40:50,520 --> 00:40:57,090
the event loop and get it working these

00:40:54,210 --> 00:40:59,070
are the four lines of zmq stuff that I

00:40:57,090 --> 00:41:01,050
needed to add and if you remember that

00:40:59,070 --> 00:41:03,570
on that MQ responding well I've created

00:41:01,050 --> 00:41:05,430
yesterday I did this I've seen anything

00:41:03,570 --> 00:41:07,320
over port five five five hits on

00:41:05,430 --> 00:41:09,180
terminal test a message that I'm just

00:41:07,320 --> 00:41:13,200
about to show you that I've added in my

00:41:09,180 --> 00:41:14,220
event handler on terminal test I've

00:41:13,200 --> 00:41:15,660
called it that because I'm going to do

00:41:14,220 --> 00:41:18,330
it from terminal to send this stuff into

00:41:15,660 --> 00:41:20,460
the event loop if we loop around all of

00:41:18,330 --> 00:41:24,000
the clients that connected get the topic

00:41:20,460 --> 00:41:25,710
object I call it original topic and then

00:41:24,000 --> 00:41:28,290
we broadcast the data that gets sent in

00:41:25,710 --> 00:41:30,510
over port five five five to everyone

00:41:28,290 --> 00:41:33,510
that's subscribed to topic so that's our

00:41:30,510 --> 00:41:35,430
picture here is the only code that I

00:41:33,510 --> 00:41:36,750
need to get it out stuck injected into

00:41:35,430 --> 00:41:38,850
the event loop so this is the code that

00:41:36,750 --> 00:41:43,140
you would use for your workers to put

00:41:38,850 --> 00:41:46,140
stuff back in seven loops so hopefully

00:41:43,140 --> 00:41:48,450
it's working so we're saying that

00:41:46,140 --> 00:41:49,740
everything that gets every we're going

00:41:48,450 --> 00:41:52,380
to see that we're going to push this

00:41:49,740 --> 00:41:54,090
information over port five five five and

00:41:52,380 --> 00:41:56,570
this is the data which is Jason encoding

00:41:54,090 --> 00:42:00,119
it because everything's JSON encoded

00:41:56,570 --> 00:42:02,670
and I'm going to call PHP terminal test

00:42:00,119 --> 00:42:05,520
dot PHP enter don't bump your worker

00:42:02,670 --> 00:42:07,470
would do that so then if we look at this

00:42:05,520 --> 00:42:10,410
stuff that's coming through from the

00:42:07,470 --> 00:42:11,880
server you can see here we're sending

00:42:10,410 --> 00:42:13,410
some data here where it's working and

00:42:11,880 --> 00:42:15,060
then everything else continues so we can

00:42:13,410 --> 00:42:17,340
inject stuff whenever you want while

00:42:15,060 --> 00:42:19,380
this big pipes open this loops going

00:42:17,340 --> 00:42:22,680
around over and over and over which is

00:42:19,380 --> 00:42:25,349
really cool so that's how we inject

00:42:22,680 --> 00:42:27,980
stuff back into the event loop and the

00:42:25,349 --> 00:42:33,119
demo didn't fail which is pretty cool

00:42:27,980 --> 00:42:35,010
okay and now I don't okay okay so what

00:42:33,119 --> 00:42:36,900
about scaling okay I was in the previous

00:42:35,010 --> 00:42:39,619
talk and they talked a bit about eh a

00:42:36,900 --> 00:42:41,790
proxy which I've honestly never used so

00:42:39,619 --> 00:42:44,490
this is one way you could scale

00:42:41,790 --> 00:42:45,750
theoretically in your own code so you

00:42:44,490 --> 00:42:48,300
could write this have complete control

00:42:45,750 --> 00:42:51,300
of scaling these event loops and this is

00:42:48,300 --> 00:42:52,619
one way you could do it so your client

00:42:51,300 --> 00:42:56,430
your JavaScript client or have you want

00:42:52,619 --> 00:42:58,290
to do it could call an API it would talk

00:42:56,430 --> 00:42:59,760
to a database already which contains a

00:42:58,290 --> 00:43:01,020
list of all your event loops now I don't

00:42:59,760 --> 00:43:02,670
need to really perform it you'll only

00:43:01,020 --> 00:43:03,990
need to do this if you got from

00:43:02,670 --> 00:43:06,960
happening in these event loops whether

00:43:03,990 --> 00:43:08,730
you can scale these things the database

00:43:06,960 --> 00:43:10,140
can either round-robin through these IP

00:43:08,730 --> 00:43:12,930
addresses that you want to connect to or

00:43:10,140 --> 00:43:15,570
just all random do it around to choose

00:43:12,930 --> 00:43:17,310
between them or you could do that on zmq

00:43:15,570 --> 00:43:18,990
is sponsoring and ask each event loop

00:43:17,310 --> 00:43:21,060
how many clients do you have connected

00:43:18,990 --> 00:43:23,160
and then choose the one with the lowest

00:43:21,060 --> 00:43:24,690
one with clients connected so once

00:43:23,160 --> 00:43:27,330
you've figured out which one you want to

00:43:24,690 --> 00:43:29,580
choose you then call that chosen what

00:43:27,330 --> 00:43:32,160
took WebSocket server I think this is

00:43:29,580 --> 00:43:35,160
going to be cut off at the top now just

00:43:32,160 --> 00:43:38,520
about the event loop then puts that

00:43:35,160 --> 00:43:39,960
torrent thing into the queue the worker

00:43:38,520 --> 00:43:42,390
picks up that does whatever it needs to

00:43:39,960 --> 00:43:44,280
do to make that phone call happen and

00:43:42,390 --> 00:43:47,700
when it's finally done it sends the

00:43:44,280 --> 00:43:49,020
information back over 0 mq and then and

00:43:47,700 --> 00:43:51,060
then broadcast it back to the client and

00:43:49,020 --> 00:43:55,410
this is scalable and the reason this is

00:43:51,060 --> 00:43:56,070
scalable is because you can add a new

00:43:55,410 --> 00:43:58,080
event loop

00:43:56,070 --> 00:43:59,970
set it up get you DevOps guys to bring

00:43:58,080 --> 00:44:02,400
it up at that IP address of the event

00:43:59,970 --> 00:44:04,700
loop and the port or whatever to your

00:44:02,400 --> 00:44:07,349
database so the next client connecting

00:44:04,700 --> 00:44:09,809
that event loop automatically becomes a

00:44:07,349 --> 00:44:11,519
part of the decision-making process for

00:44:09,809 --> 00:44:13,109
event loop to choose and then you can

00:44:11,519 --> 00:44:16,140
add in scale workers and it's really

00:44:13,109 --> 00:44:17,729
pretty cool so basically you can do this

00:44:16,140 --> 00:44:20,789
and you be in control of the logic for

00:44:17,729 --> 00:44:22,199
scaling your shape but we're still

00:44:20,789 --> 00:44:25,650
pulling on the server you say we're

00:44:22,199 --> 00:44:27,150
still doing a two-second call every

00:44:25,650 --> 00:44:28,650
every two seconds or five seconds to get

00:44:27,150 --> 00:44:30,299
this current data so we've eliminated

00:44:28,650 --> 00:44:32,339
the overhead of the request response

00:44:30,299 --> 00:44:35,219
from the client of a server but we're

00:44:32,339 --> 00:44:36,029
still doing all this server that's

00:44:35,219 --> 00:44:38,670
not my problem

00:44:36,029 --> 00:44:40,349
basically for real-time data you have to

00:44:38,670 --> 00:44:41,969
do daemon programming if you Google

00:44:40,349 --> 00:44:43,979
demon programming it's not basic PHP

00:44:41,969 --> 00:44:45,900
stuff okay so you have to have a

00:44:43,979 --> 00:44:48,869
completely different mindset I see

00:44:45,900 --> 00:44:50,640
someone nodding in the audience for

00:44:48,869 --> 00:44:52,979
example if you wanted to do or if I

00:44:50,640 --> 00:44:56,039
wanted to do a monitor CPU usage example

00:44:52,979 --> 00:44:57,029
and I wanted to have real-time data sent

00:44:56,039 --> 00:44:59,489
to the client so I will basically

00:44:57,029 --> 00:45:02,160
display top in Linux in the browser I

00:44:59,489 --> 00:45:04,229
would do this the crap way I would have

00:45:02,160 --> 00:45:05,880
a Python script that honestly I'd do a

00:45:04,229 --> 00:45:07,559
Python script so that one's top passes

00:45:05,880 --> 00:45:10,529
the output and then that allows me to

00:45:07,559 --> 00:45:12,029
display it in the claim now if you want

00:45:10,529 --> 00:45:13,199
to do it the proper way you have to do

00:45:12,029 --> 00:45:15,029
what I've copied and pasted off Google

00:45:13,199 --> 00:45:17,579
and Stack Overflow you'd have a C++

00:45:15,029 --> 00:45:18,989
binary create a host resources MIB and

00:45:17,579 --> 00:45:20,429
then you just asleep on a piece of mutex

00:45:18,989 --> 00:45:21,719
in between and then it involves

00:45:20,429 --> 00:45:23,459
threading or something like that so you

00:45:21,719 --> 00:45:26,939
actually have to do some proper daemon

00:45:23,459 --> 00:45:29,609
hit here to make it work so what I

00:45:26,939 --> 00:45:31,289
learned from this is that and using an

00:45:29,609 --> 00:45:33,329
event loop is not automatically

00:45:31,289 --> 00:45:35,009
non-blocking or asynchronous so the

00:45:33,329 --> 00:45:37,699
easiest way to not block is to use

00:45:35,009 --> 00:45:40,259
threads processes or an external library

00:45:37,699 --> 00:45:41,939
all connections between the client and

00:45:40,259 --> 00:45:43,859
the server you can do with SSH using

00:45:41,939 --> 00:45:45,959
tora phi if you want to keep anonymous

00:45:43,859 --> 00:45:47,549
if you want codes on which with nodejs

00:45:45,959 --> 00:45:51,059
but obviously none of us want to sell us

00:45:47,549 --> 00:45:52,709
all here I found out it begins you could

00:45:51,059 --> 00:45:54,179
have just made RPC calls to the server

00:45:52,709 --> 00:45:55,589
to get this torrent data you didn't have

00:45:54,179 --> 00:45:57,449
to do this horrible command-line

00:45:55,589 --> 00:45:59,609
and I only found that out right at the

00:45:57,449 --> 00:46:03,059
end which is unfortunate and often the

00:45:59,609 --> 00:46:04,709
case I also think I found out that you

00:46:03,059 --> 00:46:07,229
don't have to broadcast on the topic you

00:46:04,709 --> 00:46:08,609
can a connection itself has methods that

00:46:07,229 --> 00:46:11,910
you can send information to over that

00:46:08,609 --> 00:46:13,709
specific connection and if you want to

00:46:11,910 --> 00:46:16,769
do some real server then such off

00:46:13,709 --> 00:46:20,069
your problem so your choices with web

00:46:16,769 --> 00:46:21,869
sockets are react and ratchet and PHP

00:46:20,069 --> 00:46:23,340
Nerys and PHP is the like the latest

00:46:21,869 --> 00:46:26,490
iteration of this and it

00:46:23,340 --> 00:46:28,260
exam fast Autobahn ojs was the

00:46:26,490 --> 00:46:31,020
client-side library that I use and live

00:46:28,260 --> 00:46:32,610
event and Libby V are the app get things

00:46:31,020 --> 00:46:34,560
you have to install to make the event

00:46:32,610 --> 00:46:35,910
loop happen in C instead of in PHP live

00:46:34,560 --> 00:46:36,930
even use Windows by obviously no one

00:46:35,910 --> 00:46:39,000
uses Windows here because we're all

00:46:36,930 --> 00:46:41,030
decent developers where you can go and

00:46:39,000 --> 00:46:43,830
exercise if anyone does use meanness

00:46:41,030 --> 00:46:46,380
where you can go next get a simple

00:46:43,830 --> 00:46:47,940
example of this working use processes

00:46:46,380 --> 00:46:50,840
first to offload the work like you did

00:46:47,940 --> 00:46:53,220
with that react process extension thing

00:46:50,840 --> 00:46:55,560
watch this talk highly recommend this

00:46:53,220 --> 00:46:56,790
talk for getting a job queue working and

00:46:55,560 --> 00:46:58,400
then you can write object-oriented code

00:46:56,790 --> 00:47:01,260
and have it completely separate from

00:46:58,400 --> 00:47:03,090
from the rest of everything and then you

00:47:01,260 --> 00:47:04,860
can move on to actual async stuff which

00:47:03,090 --> 00:47:06,450
is where you promises and callback hell

00:47:04,860 --> 00:47:08,220
and all that sort of stuff in in the

00:47:06,450 --> 00:47:09,420
event loop itself so you can actually do

00:47:08,220 --> 00:47:10,950
stuff in the event but without worrying

00:47:09,420 --> 00:47:12,240
about it but I didn't do any of that I

00:47:10,950 --> 00:47:14,300
just offloaded everything so it was

00:47:12,240 --> 00:47:16,470
really easy to keep a nice code base and

00:47:14,300 --> 00:47:20,940
have fun because you're not using nodejs

00:47:16,470 --> 00:47:22,740
and so Angie Savannah on Twitter I do

00:47:20,940 --> 00:47:24,180
PHP six jokes object-oriented stuff you

00:47:22,740 --> 00:47:25,680
have to watch this talk it's seriously

00:47:24,180 --> 00:47:27,270
awesome if you use the knowledge from

00:47:25,680 --> 00:47:28,530
this talk and the event link stuff from

00:47:27,270 --> 00:47:30,450
this I'll put the slides up which I

00:47:28,530 --> 00:47:32,160
already have at the bottom then you can

00:47:30,450 --> 00:47:33,150
do some really cool stuff with this sort

00:47:32,160 --> 00:47:35,400
of stuff

00:47:33,150 --> 00:47:37,290
and this is the application I created in

00:47:35,400 --> 00:47:40,100
the end with clearly just a bunch of

00:47:37,290 --> 00:47:43,400
tone here and this was animated and

00:47:40,100 --> 00:47:43,400
thanks listening

00:47:49,249 --> 00:47:53,269
I think I've time for questions so does

00:47:51,319 --> 00:47:58,849
anyone want to berate me go for it alone

00:47:53,269 --> 00:48:00,529
here how resilient is the WebSocket

00:47:58,849 --> 00:48:03,319
connection to change in pages in the web

00:48:00,529 --> 00:48:07,910
application so that's a good question in

00:48:03,319 --> 00:48:09,949
fact when I did my thing every time I

00:48:07,910 --> 00:48:12,619
change page I'd have to read Stan she

00:48:09,949 --> 00:48:14,119
ate a WebSocket connection but which

00:48:12,619 --> 00:48:15,079
would call on open again and subscribe

00:48:14,119 --> 00:48:16,759
which obviously isn't the best way of

00:48:15,079 --> 00:48:18,739
doing it but the way around that I guess

00:48:16,759 --> 00:48:21,049
would be to keep that client in the

00:48:18,739 --> 00:48:22,819
internal array of clients and then not

00:48:21,049 --> 00:48:24,650
remove them until a certain time out has

00:48:22,819 --> 00:48:26,479
disappeared from them not reconnecting

00:48:24,650 --> 00:48:27,589
or something like that so you would

00:48:26,479 --> 00:48:30,469
still have to do the client to the

00:48:27,589 --> 00:48:32,900
servicing saying we're reestablishing a

00:48:30,469 --> 00:48:34,189
connection but that's the only way I can

00:48:32,900 --> 00:48:43,729
think of a leash yeah that's basically

00:48:34,189 --> 00:48:44,689
the like I think is doing it if you've

00:48:43,729 --> 00:48:47,079
got a better way I've still got this

00:48:44,689 --> 00:48:50,689
project on here so please tell me effort

00:48:47,079 --> 00:48:53,269
did you video zooming on the other arm

00:48:50,689 --> 00:48:54,979
so they even thought so you saw watching

00:48:53,269 --> 00:48:55,759
the term before okay all right I'll just

00:48:54,979 --> 00:48:57,890
be honest with you

00:48:55,759 --> 00:49:02,089
so what I did I might have done cocktail

00:48:57,890 --> 00:49:06,049
hour Loganlea so I add an Xbox 360 right

00:49:02,089 --> 00:49:07,400
and my plan was to download legal that

00:49:06,049 --> 00:49:08,809
thing with the bunny which is completely

00:49:07,400 --> 00:49:10,609
legal to watch and the after ants are

00:49:08,809 --> 00:49:12,410
thinking or what it means and basically

00:49:10,609 --> 00:49:14,239
after they'd finished downloading and

00:49:12,410 --> 00:49:16,429
have a button that said convert and you

00:49:14,239 --> 00:49:18,439
click convert it do the job in it with

00:49:16,429 --> 00:49:20,749
ffmpeg in the cloud and then it would

00:49:18,439 --> 00:49:23,059
move it to a certain open directory so I

00:49:20,749 --> 00:49:26,059
could go on my xbox 360 go on a browser

00:49:23,059 --> 00:49:28,429
thing going Internet Explorer I think it

00:49:26,059 --> 00:49:30,439
was go to a certain URL and I'd be able

00:49:28,429 --> 00:49:32,150
to watch that video because it's been

00:49:30,439 --> 00:49:33,469
converted to WebM dot with them so

00:49:32,150 --> 00:49:35,529
that's how I would watch it in the

00:49:33,469 --> 00:49:38,420
browser so yeah I had the whole thing

00:49:35,529 --> 00:49:46,549
going so that the yeah you did see that

00:49:38,420 --> 00:49:48,170
and it was all legal anyone got any

00:49:46,549 --> 00:49:50,589
questions that don't relate to video

00:49:48,170 --> 00:49:50,589
stuff

00:49:51,590 --> 00:49:56,820
what are the use cases have you seen

00:49:54,590 --> 00:49:59,310
WebSockets and maybe people that have

00:49:56,820 --> 00:50:02,130
used your sort of skeleton to get them

00:49:59,310 --> 00:50:04,620
going so I've seen people use WebSockets

00:50:02,130 --> 00:50:07,050
for news notifications notifications for

00:50:04,620 --> 00:50:09,270
that the server is going to go down soon

00:50:07,050 --> 00:50:11,700
I guess that's just a general WebSocket

00:50:09,270 --> 00:50:13,680
question but if you are making lots of

00:50:11,700 --> 00:50:16,110
calls that are pulling over and over for

00:50:13,680 --> 00:50:18,150
data typically I would look at you know

00:50:16,110 --> 00:50:19,710
maybe is WebSockets the right way for

00:50:18,150 --> 00:50:21,930
that sort of thing so if you if you're

00:50:19,710 --> 00:50:23,610
doing a set interval in JavaScript and

00:50:21,930 --> 00:50:25,590
making an ajax request you're not set

00:50:23,610 --> 00:50:27,210
interval to update a table using data

00:50:25,590 --> 00:50:29,490
tables or something like that then I

00:50:27,210 --> 00:50:30,810
would consider WebSockets as a different

00:50:29,490 --> 00:50:32,130
resolution but you've got all the

00:50:30,810 --> 00:50:34,080
architecture and all that stuff that

00:50:32,130 --> 00:50:35,730
I've just shown to have to go through so

00:50:34,080 --> 00:50:37,320
it depends if you've got the budget

00:50:35,730 --> 00:50:39,000
infrastructure and the right

00:50:37,320 --> 00:50:49,890
architecture mindset to be able to sort

00:50:39,000 --> 00:50:52,410
that out so it depends I'm already using

00:50:49,890 --> 00:50:54,810
Revit in queue to do a lot of processing

00:50:52,410 --> 00:50:58,260
some of which can take multiple minutes

00:50:54,810 --> 00:51:00,720
because of what it's doing and so I was

00:50:58,260 --> 00:51:02,640
asking about how resilient is the web

00:51:00,720 --> 00:51:04,110
service connection because oftentimes

00:51:02,640 --> 00:51:06,560
someone who has gone to the page in the

00:51:04,110 --> 00:51:09,000
application which will trigger that

00:51:06,560 --> 00:51:10,860
process in the queue yep and I actually

00:51:09,000 --> 00:51:13,110
want to tell them that it's finished but

00:51:10,860 --> 00:51:14,850
they could have navigated to anywhere

00:51:13,110 --> 00:51:16,830
else else in the application at the time

00:51:14,850 --> 00:51:19,650
and so it would be great to be able to

00:51:16,830 --> 00:51:21,930
have that WebSocket connection reopened

00:51:19,650 --> 00:51:24,360
so that when the process that was

00:51:21,930 --> 00:51:25,860
already in the queue did finish they got

00:51:24,360 --> 00:51:28,920
the notification oh yeah yeah definitely

00:51:25,860 --> 00:51:30,870
I mean for example if you're using twig

00:51:28,920 --> 00:51:32,400
and you've got that templating engine or

00:51:30,870 --> 00:51:33,990
you've just got an include on every

00:51:32,400 --> 00:51:35,610
single page that creates that WebSocket

00:51:33,990 --> 00:51:37,830
connection then you would just check to

00:51:35,610 --> 00:51:39,300
see if that connection still exists or

00:51:37,830 --> 00:51:41,070
wait until it has before sending that

00:51:39,300 --> 00:51:41,730
information out so yeah you can

00:51:41,070 --> 00:51:43,800
definitely do that

00:51:41,730 --> 00:51:46,650
and that would be an answer to that

00:51:43,800 --> 00:51:52,220
question at the back of our what we'll

00:51:46,650 --> 00:51:52,220
use could you put it to nice thank you

00:51:54,410 --> 00:52:00,170

YouTube URL: https://www.youtube.com/watch?v=rKzjnB7wy3Q


