Title: PHP UK Conference 2016 - Billie Thompson - Kubernetes at the Home Office
Publication date: 2016-03-17
Playlist: PHP UK Conference 2016
Description: 
	At the Home Office we had a problem. Hundreds of lines of infrastructure, everyone doing their own thing, and reinventing the wheel. During this talk I'll tell you how we are attempting resolve that using Docker, Kubernetes and changing developer culture. This talk consists of 3 parts. In the first I will introduce you to docker and talk about how to use it to create reusable infrastructure components, then I will talk about how to deploy and manage those components with the open source PaaS Kubernetes, and finally I'll talk about changing our culture using tools and techniques to ensure we keep reusing into the future.
Captions: 
	00:00:10,809 --> 00:00:17,869
hi yeah so likes and said I'm primarily

00:00:15,830 --> 00:00:21,560
a PHP developer sometimes I think some

00:00:17,869 --> 00:00:23,300
Java as well boo but i also get roped

00:00:21,560 --> 00:00:25,160
into doing develop c-type things because

00:00:23,300 --> 00:00:28,599
I kind of know like how to set up engine

00:00:25,160 --> 00:00:30,769
X and that's all you need right so

00:00:28,599 --> 00:00:33,250
sometimes I get roped into doing gum ups

00:00:30,769 --> 00:00:35,269
things as well and I used to hate it and

00:00:33,250 --> 00:00:37,460
but the things I'm going to talk about

00:00:35,269 --> 00:00:39,650
are a number of things that I've been

00:00:37,460 --> 00:00:41,510
doing with these guys the Home Office

00:00:39,650 --> 00:00:43,549
which have actually really changed my

00:00:41,510 --> 00:00:45,190
opinion about DevOps and made it

00:00:43,549 --> 00:00:47,269
something that I kind of enjoy now and

00:00:45,190 --> 00:00:50,510
rather than some horrible painful

00:00:47,269 --> 00:00:51,769
exercise so the two tools i'm going to

00:00:50,510 --> 00:00:53,540
be talking about that we use that's

00:00:51,769 --> 00:00:59,570
really changed my opinion is first of

00:00:53,540 --> 00:01:01,339
all cuban 80s and and also dhaka so how

00:00:59,570 --> 00:01:03,170
this talk is going to work first i'm

00:01:01,339 --> 00:01:05,299
going to start off giving you a kind of

00:01:03,170 --> 00:01:07,460
brief overview of docker it's not going

00:01:05,299 --> 00:01:11,299
to be as in-depth as the one that I some

00:01:07,460 --> 00:01:12,350
of you saw and kind of yesterday but

00:01:11,299 --> 00:01:14,570
it's probably gonna mention a couple of

00:01:12,350 --> 00:01:15,410
things which were mentioned in that and

00:01:14,570 --> 00:01:17,210
then I'm going to move on to talking

00:01:15,410 --> 00:01:19,700
about Cuban 80s which is a tool for

00:01:17,210 --> 00:01:23,600
managing a docker over multiple hosts

00:01:19,700 --> 00:01:25,250
and then finally because the actual code

00:01:23,600 --> 00:01:26,630
is only part of the problem when it

00:01:25,250 --> 00:01:28,220
comes to any technical solution i'm

00:01:26,630 --> 00:01:29,990
going to talk about the cultural changes

00:01:28,220 --> 00:01:31,820
we need to put in place at the Home

00:01:29,990 --> 00:01:36,530
Office in order to take advantage of

00:01:31,820 --> 00:01:39,590
these tools properly okay so let's get

00:01:36,530 --> 00:01:41,630
started with docker so what is Dhaka so

00:01:39,590 --> 00:01:43,190
docker is an open platform for

00:01:41,630 --> 00:01:45,020
developing and shipping and running

00:01:43,190 --> 00:01:47,300
applications is designed to live your

00:01:45,020 --> 00:01:48,830
applications faster and that means

00:01:47,300 --> 00:01:51,710
precisely nothing ray it's just a nice

00:01:48,830 --> 00:01:54,080
button marketing speak and so what

00:01:51,710 --> 00:01:56,960
doctor is really is a fancy wrapper

00:01:54,080 --> 00:01:59,420
around something called see groups and

00:01:56,960 --> 00:02:01,490
see groups is a feature of the Linux

00:01:59,420 --> 00:02:04,040
kernel and what it allows you to do is

00:02:01,490 --> 00:02:05,780
put some clever controls around your

00:02:04,040 --> 00:02:07,820
processes controlling which files that

00:02:05,780 --> 00:02:10,069
can access how much memory they can use

00:02:07,820 --> 00:02:14,870
a really simple way of thinking of it as

00:02:10,069 --> 00:02:16,700
chewy and steroids and okay so as I've

00:02:14,870 --> 00:02:18,379
just mentioned darker use the feature of

00:02:16,700 --> 00:02:19,909
the Linux kernel which means it's never

00:02:18,379 --> 00:02:20,470
going to run on Windows it's never going

00:02:19,909 --> 00:02:21,880
to run on

00:02:20,470 --> 00:02:24,580
so you're going to have to run it on a

00:02:21,880 --> 00:02:25,690
vm if you've got a shiny mark like me or

00:02:24,580 --> 00:02:27,730
if you've got off show any Windows

00:02:25,690 --> 00:02:29,470
machine but if you've got a shiny Linux

00:02:27,730 --> 00:02:32,350
machine then your side and you can just

00:02:29,470 --> 00:02:35,530
run it natively okay so in practical

00:02:32,350 --> 00:02:37,240
terms what this means is docker is a

00:02:35,530 --> 00:02:39,730
service which gives you walls between

00:02:37,240 --> 00:02:45,310
your applications and it means you can

00:02:39,730 --> 00:02:48,460
run maybe engine X PHP MySQL all on the

00:02:45,310 --> 00:02:50,800
same host and and not have them interact

00:02:48,460 --> 00:02:52,150
in any way and have them be isolated but

00:02:50,800 --> 00:02:54,310
more than that you can run multiple

00:02:52,150 --> 00:02:56,920
versions of these bits of software with

00:02:54,310 --> 00:02:58,930
competing dependent libraries and still

00:02:56,920 --> 00:03:04,480
have them all work together and have no

00:02:58,930 --> 00:03:06,580
like horrible dependency help so on top

00:03:04,480 --> 00:03:09,190
of this so in order to achieve this

00:03:06,580 --> 00:03:11,080
doctor gives you a few things so the

00:03:09,190 --> 00:03:13,810
first thing that doctor gives you is an

00:03:11,080 --> 00:03:15,310
isolated file system and this is a late

00:03:13,810 --> 00:03:19,150
filing system and I'll come into a why

00:03:15,310 --> 00:03:20,770
that's important later on and this means

00:03:19,150 --> 00:03:22,870
that with every single application you

00:03:20,770 --> 00:03:25,660
run in docker you bring its own file

00:03:22,870 --> 00:03:27,459
system and this file system is isolated

00:03:25,660 --> 00:03:31,030
to a specific application it's like

00:03:27,459 --> 00:03:33,130
having a mini vm so if you think about

00:03:31,030 --> 00:03:35,560
the other things that an application

00:03:33,130 --> 00:03:37,780
really needs to have in order to run in

00:03:35,560 --> 00:03:39,970
isolation the other thing I always think

00:03:37,780 --> 00:03:43,030
of is because sometimes I write Java

00:03:39,970 --> 00:03:45,750
wraps all the java apps always want to

00:03:43,030 --> 00:03:48,700
bind on port 8080 if it's a web app

00:03:45,750 --> 00:03:50,110
which is a bit of a pain what doctor

00:03:48,700 --> 00:03:52,989
does is it gives you a standard way to

00:03:50,110 --> 00:03:54,610
remap those ports and say okay so this

00:03:52,989 --> 00:03:56,680
port is running on the container an 80

00:03:54,610 --> 00:03:58,870
80 but actually on my host I'm going to

00:03:56,680 --> 00:04:00,910
expose that on a different port so this

00:03:58,870 --> 00:04:02,500
means together that you can run multiple

00:04:00,910 --> 00:04:04,060
different applications in multiple

00:04:02,500 --> 00:04:07,420
different versions which maybe depend on

00:04:04,060 --> 00:04:09,459
specific configuration files all on the

00:04:07,420 --> 00:04:10,810
same host without ever worrying about

00:04:09,459 --> 00:04:14,620
them conflicting because it's just not

00:04:10,810 --> 00:04:16,180
going to happen they're isolated okay so

00:04:14,620 --> 00:04:18,400
I think that's probably enough about

00:04:16,180 --> 00:04:21,609
what docker is so this is how you've run

00:04:18,400 --> 00:04:23,229
a container in Dhaka and so this is a

00:04:21,609 --> 00:04:25,990
really simple command so it's buck a run

00:04:23,229 --> 00:04:27,190
and then the names optional I just like

00:04:25,990 --> 00:04:29,860
to have a name because it's bit easier

00:04:27,190 --> 00:04:32,950
than using hashes and then at the bottom

00:04:29,860 --> 00:04:33,430
what I'm saying is a map port 80 on the

00:04:32,950 --> 00:04:35,800
Conte

00:04:33,430 --> 00:04:40,930
that I'm going to run to port 80 on my

00:04:35,800 --> 00:04:43,930
VM and at the bottom is a it's a name of

00:04:40,930 --> 00:04:45,850
a container that I'm going to run now

00:04:43,930 --> 00:04:48,340
the anointment might notice this looks a

00:04:45,850 --> 00:04:50,830
bit like a URL that's because it is and

00:04:48,340 --> 00:04:52,720
what it's saying is go to the key to i/o

00:04:50,830 --> 00:04:55,240
registry to download this container

00:04:52,720 --> 00:04:59,440
under the user purple booth which is me

00:04:55,240 --> 00:05:01,060
and run the flappy endpoint now the

00:04:59,440 --> 00:05:02,980
flappy endpoint is a container I made

00:05:01,060 --> 00:05:05,260
earlier is primarily made from code that

00:05:02,980 --> 00:05:09,670
i borrowed I'm install I mean borrowed

00:05:05,260 --> 00:05:11,140
from one of my friends Ben and he does

00:05:09,670 --> 00:05:12,310
this fantastic logging talk and I was

00:05:11,140 --> 00:05:13,960
like oh that's a really good training

00:05:12,310 --> 00:05:15,810
example because it's an endpoint which

00:05:13,960 --> 00:05:18,850
returns lots of different status codes

00:05:15,810 --> 00:05:22,600
and I Nick that up I package still in

00:05:18,850 --> 00:05:24,490
Dhaka and they put it up that so the

00:05:22,600 --> 00:05:26,740
thing about this command is key if you

00:05:24,490 --> 00:05:28,090
run this on your machine right now and

00:05:26,740 --> 00:05:30,670
you've got an internet connection dhaka

00:05:28,090 --> 00:05:32,440
set up this will run this will start the

00:05:30,670 --> 00:05:35,710
application it will go away to key and

00:05:32,440 --> 00:05:41,440
it will download it and when we do that

00:05:35,710 --> 00:05:43,360
now looks a bit like this so in the dock

00:05:41,440 --> 00:05:49,210
are on we're going to pass in the name

00:05:43,360 --> 00:05:53,440
and then we're going to map port 80 80

00:05:49,210 --> 00:05:55,060
on the vm on the yeah and then i'm going

00:05:53,440 --> 00:05:59,380
to put in the name and low copy and

00:05:55,060 --> 00:06:00,610
paste it because i can't type ok so the

00:05:59,380 --> 00:06:02,140
first thing that you'll notice is a

00:06:00,610 --> 00:06:05,520
whole bunch of logs are being output to

00:06:02,140 --> 00:06:08,020
the screen docker logs to stand it out

00:06:05,520 --> 00:06:09,250
this is important and I'll come on to

00:06:08,020 --> 00:06:11,110
why it's important what you have to do

00:06:09,250 --> 00:06:15,550
for your applications in dhaka later on

00:06:11,110 --> 00:06:17,320
so that's the IP of my virtual machine

00:06:15,550 --> 00:06:19,270
which is running docker I use something

00:06:17,320 --> 00:06:22,630
called boot to dhaka dhaka machine is a

00:06:19,270 --> 00:06:24,160
newer version of this ok so you can see

00:06:22,630 --> 00:06:26,110
that I've got the web page up now and

00:06:24,160 --> 00:06:27,850
there are two end points 1 which returns

00:06:26,110 --> 00:06:29,500
random data on which returns 200 every

00:06:27,850 --> 00:06:31,300
time and you can see that when I'm

00:06:29,500 --> 00:06:35,020
hitting the end point is outputting the

00:06:31,300 --> 00:06:37,860
logs from Apache so I'm just going to

00:06:35,020 --> 00:06:37,860
stop this image now

00:06:40,200 --> 00:06:43,980
and I'll prove to you that this wasn't

00:06:42,540 --> 00:06:46,530
some horrible trip and that is actually

00:06:43,980 --> 00:06:47,730
running on that host yeah the containers

00:06:46,530 --> 00:06:54,270
stopped and the service has gone away

00:06:47,730 --> 00:06:56,070
magic right okay so before I talk about

00:06:54,270 --> 00:06:58,890
like how you can make your own dog

00:06:56,070 --> 00:07:01,710
containers I just want to mention that

00:06:58,890 --> 00:07:03,000
actually you should really try and make

00:07:01,710 --> 00:07:05,130
your own doctor containers if you can

00:07:03,000 --> 00:07:07,590
reuse someone else's work a big reason

00:07:05,130 --> 00:07:09,600
for why you should use docker is that

00:07:07,590 --> 00:07:12,870
encourages you to reuse other people's

00:07:09,600 --> 00:07:14,490
components and if you want to find some

00:07:12,870 --> 00:07:16,170
components that you can reuse maybe a

00:07:14,490 --> 00:07:17,490
complicated bit of software but you

00:07:16,170 --> 00:07:19,320
don't want to have to configure it from

00:07:17,490 --> 00:07:22,530
scratch yourself I would recommend

00:07:19,320 --> 00:07:25,350
looking in these three places so there

00:07:22,530 --> 00:07:27,630
is the official docker website the

00:07:25,350 --> 00:07:29,310
docker hub and there is a list of

00:07:27,630 --> 00:07:32,670
official packages on there which are

00:07:29,310 --> 00:07:34,680
packaged up by the docker guys and they

00:07:32,670 --> 00:07:36,720
have made and tagged them as official

00:07:34,680 --> 00:07:39,690
images and there's things like PHP

00:07:36,720 --> 00:07:40,890
engine X all the useful containers and

00:07:39,690 --> 00:07:45,120
stuff that you would want to run

00:07:40,890 --> 00:07:47,040
applications secondly websites of

00:07:45,120 --> 00:07:48,780
software you're using so a really good

00:07:47,040 --> 00:07:50,670
example of this is I had to set up out

00:07:48,780 --> 00:07:52,590
of factory a little while ago and it's a

00:07:50,670 --> 00:07:55,200
total pain and this like a java

00:07:52,590 --> 00:07:56,670
application has loads of config and like

00:07:55,200 --> 00:07:59,790
I couldn't be bothered well thankfully

00:07:56,670 --> 00:08:01,800
on the website for artifactory they

00:07:59,790 --> 00:08:03,570
actually have a link to a docker

00:08:01,800 --> 00:08:05,250
container so you can just run that

00:08:03,570 --> 00:08:07,920
docker file locally have a play with it

00:08:05,250 --> 00:08:10,950
see if it work to you without having to

00:08:07,920 --> 00:08:13,050
do any real effort and finally qio

00:08:10,950 --> 00:08:14,610
that's where personally I publish my

00:08:13,050 --> 00:08:16,860
doctor containers the Home Office

00:08:14,610 --> 00:08:22,950
publishers in there as well it's very

00:08:16,860 --> 00:08:24,780
similar to the docker hub okay so how do

00:08:22,950 --> 00:08:27,990
you actually make a doctor file dr.

00:08:24,780 --> 00:08:29,490
container so after a little while you do

00:08:27,990 --> 00:08:31,650
tend to get to the limit of what you can

00:08:29,490 --> 00:08:35,280
do with other people's code and I guess

00:08:31,650 --> 00:08:37,229
most of us are developers right yeah so

00:08:35,280 --> 00:08:40,770
we probably want to package up our own

00:08:37,229 --> 00:08:43,919
code in our own applications now with

00:08:40,770 --> 00:08:46,590
docker are you do like this so this is a

00:08:43,919 --> 00:08:49,140
docker file think makefile capital d for

00:08:46,590 --> 00:08:52,470
dhaka or one word and this lives in the

00:08:49,140 --> 00:08:53,160
root of your project the top line is

00:08:52,470 --> 00:08:55,500
from

00:08:53,160 --> 00:08:57,899
this implies a whole bunch of changes

00:08:55,500 --> 00:09:01,379
which have been made in this case in the

00:08:57,899 --> 00:09:03,300
official PHP repository in the version

00:09:01,379 --> 00:09:04,949
which is labeled five configured with

00:09:03,300 --> 00:09:08,190
Apache i know i should be using seven

00:09:04,949 --> 00:09:10,889
and let's not go around to it yet and

00:09:08,190 --> 00:09:12,569
this makes it really very easy to pull

00:09:10,889 --> 00:09:14,459
in a whole bunch of work which someone

00:09:12,569 --> 00:09:16,410
else has done in this case i'm pulling

00:09:14,459 --> 00:09:19,050
in a load of work to get PHP and apache

00:09:16,410 --> 00:09:20,399
up and running because i don't want to

00:09:19,050 --> 00:09:22,649
have to set up myself because i'm really

00:09:20,399 --> 00:09:24,060
lazy and as programmers i think most of

00:09:22,649 --> 00:09:25,759
us should really try and be lazy and

00:09:24,060 --> 00:09:29,279
reduce the amount of work we have to do

00:09:25,759 --> 00:09:31,379
the next commands are going to copy some

00:09:29,279 --> 00:09:33,449
files into the docker container that I'm

00:09:31,379 --> 00:09:35,339
building so the first one's going to

00:09:33,449 --> 00:09:38,819
copy my PHP application then I'm going

00:09:35,339 --> 00:09:40,470
to make a small change htaccess file and

00:09:38,819 --> 00:09:44,519
then finally I'm going to install a

00:09:40,470 --> 00:09:46,920
whole bunch of stuff and to get a

00:09:44,519 --> 00:09:48,300
composer running and to get my

00:09:46,920 --> 00:09:50,879
application and stay where it's running

00:09:48,300 --> 00:09:53,420
so it's installing the zip extension

00:09:50,879 --> 00:09:56,339
there and it's installing get and

00:09:53,420 --> 00:09:57,839
compact running a composer install and

00:09:56,339 --> 00:10:00,000
you notice that this line is really

00:09:57,839 --> 00:10:01,529
really chunky and long there's actually

00:10:00,000 --> 00:10:03,720
a specific reason I've done this and

00:10:01,529 --> 00:10:07,439
it's to do with the way that docker

00:10:03,720 --> 00:10:10,740
filing systems actually work so a docker

00:10:07,439 --> 00:10:12,870
filing system is based on layers so the

00:10:10,740 --> 00:10:15,420
first layer is always a low which

00:10:12,870 --> 00:10:17,069
indicates which other layers should be

00:10:15,420 --> 00:10:18,720
brought in as the basis of this docker

00:10:17,069 --> 00:10:20,490
container if you don't want any layers

00:10:18,720 --> 00:10:23,040
it's called the scratch container in

00:10:20,490 --> 00:10:25,139
this case I'm pulling in the all the

00:10:23,040 --> 00:10:28,560
changes which have been made for the PHP

00:10:25,139 --> 00:10:30,329
5 Apache container and then what I'm

00:10:28,560 --> 00:10:33,269
going to do on top of this is I'm going

00:10:30,329 --> 00:10:35,069
to create a new layer so why do is I

00:10:33,269 --> 00:10:38,819
execute the command in my docker file

00:10:35,069 --> 00:10:40,709
and then I save the Delta between the

00:10:38,819 --> 00:10:43,559
differences in the change and then at

00:10:40,709 --> 00:10:45,120
the top of that i generate a hash so

00:10:43,559 --> 00:10:46,800
then i'm going to issue another copy

00:10:45,120 --> 00:10:48,689
command a smaller one that's gonna be a

00:10:46,800 --> 00:10:50,339
smaller delta and then it's going to

00:10:48,689 --> 00:10:52,470
it's going to save it in the file and

00:10:50,339 --> 00:10:54,360
I'm going to generate a new hash then on

00:10:52,470 --> 00:10:55,589
top of that i'm going to run my command

00:10:54,360 --> 00:10:57,389
and that's going to make a whole bunch

00:10:55,589 --> 00:10:59,069
of changes and then it's going to say

00:10:57,389 --> 00:11:00,899
the difference and then because it's the

00:10:59,069 --> 00:11:02,610
last one in the file i'm going to tag it

00:11:00,899 --> 00:11:04,019
with a useful name you don't have to use

00:11:02,610 --> 00:11:05,100
the useful name you can use the hashes

00:11:04,019 --> 00:11:07,650
or any level

00:11:05,100 --> 00:11:10,290
so what this means is that if you have

00:11:07,650 --> 00:11:12,480
for example at the bottom layer copied

00:11:10,290 --> 00:11:14,700
in a whole bunch of massive files and

00:11:12,480 --> 00:11:16,920
then in the second in the next copy

00:11:14,700 --> 00:11:18,360
command or you would remove something in

00:11:16,920 --> 00:11:20,010
the next layer they're still in the

00:11:18,360 --> 00:11:22,500
container so your container is going to

00:11:20,010 --> 00:11:24,360
be absolutely huge obviously this is bad

00:11:22,500 --> 00:11:26,070
for things like secrets and it's why i

00:11:24,360 --> 00:11:30,840
chained up all those commands to make a

00:11:26,070 --> 00:11:38,340
single run statement okay so let's just

00:11:30,840 --> 00:11:40,230
show you this building okay so that's my

00:11:38,340 --> 00:11:43,290
project you see the top the dockerfile

00:11:40,230 --> 00:11:44,700
then there's the kba which is something

00:11:43,290 --> 00:11:46,380
that we use for cuban 80s i'll come on

00:11:44,700 --> 00:11:49,230
to in a minute and then there's my index

00:11:46,380 --> 00:11:50,670
dot PHP and some composure stuff so

00:11:49,230 --> 00:11:52,740
you'll notice here i'm running a docker

00:11:50,670 --> 00:11:54,690
build command then that's that label at

00:11:52,740 --> 00:11:56,040
the top that I showed you and you can

00:11:54,690 --> 00:11:58,050
see that is actually starting to do the

00:11:56,040 --> 00:11:59,940
build now what it's doing is it's going

00:11:58,050 --> 00:12:01,650
away and downloading that container

00:11:59,940 --> 00:12:04,470
which I mentioned at the top of my file

00:12:01,650 --> 00:12:07,500
automatically and then it's going to use

00:12:04,470 --> 00:12:11,220
this as the basis for my personal docker

00:12:07,500 --> 00:12:13,020
container so you can see each stage

00:12:11,220 --> 00:12:16,410
we're generating that hash that I

00:12:13,020 --> 00:12:17,850
mentioned and then we've got the final

00:12:16,410 --> 00:12:19,350
stage where it's going to do a run and

00:12:17,850 --> 00:12:23,430
it's going to do some relatively

00:12:19,350 --> 00:12:28,160
complicated things not that complicated

00:12:23,430 --> 00:12:28,160
if you ever installed a party I guess

00:12:31,620 --> 00:12:36,190
okay so this actually means that there's

00:12:34,810 --> 00:12:39,970
something is going to change in your

00:12:36,190 --> 00:12:41,320
system so what this is going to do is

00:12:39,970 --> 00:12:44,350
it's going to change the artifact that

00:12:41,320 --> 00:12:46,480
you ship through your build system so

00:12:44,350 --> 00:12:48,730
because now you're building a canonical

00:12:46,480 --> 00:12:50,890
thing which can be run anywhere without

00:12:48,730 --> 00:12:52,660
conflicts you no longer have to worry

00:12:50,890 --> 00:12:55,839
about software conflicting with the

00:12:52,660 --> 00:12:58,810
dependencies and you can run this on any

00:12:55,839 --> 00:13:01,180
environment at all ok so it's built the

00:12:58,810 --> 00:13:03,790
docker container and let's just run this

00:13:01,180 --> 00:13:06,190
and prove that it works so I'm going to

00:13:03,790 --> 00:13:07,510
name it fluffy again you can see the

00:13:06,190 --> 00:13:09,130
patches that put the log so it's

00:13:07,510 --> 00:13:14,800
probably side up but let's just hit the

00:13:09,130 --> 00:13:18,070
end point to be sure wait magic ok so

00:13:14,800 --> 00:13:19,600
let's just stop that so one going to

00:13:18,070 --> 00:13:21,400
show you now is how you take this

00:13:19,600 --> 00:13:23,800
compare at this container but you have

00:13:21,400 --> 00:13:26,730
built locally and share it with other

00:13:23,800 --> 00:13:30,010
people because reuse is really the key

00:13:26,730 --> 00:13:32,890
so we're doing a docker push and it's

00:13:30,010 --> 00:13:35,589
going up to the remote image to the

00:13:32,890 --> 00:13:37,060
registry which is key to IO you'll

00:13:35,589 --> 00:13:38,950
notice that the same thing with the

00:13:37,060 --> 00:13:40,360
deltas generating a hash of the Delta

00:13:38,950 --> 00:13:42,910
fruits thing it's already pushed some of

00:13:40,360 --> 00:13:47,230
these deltas this is based off a known

00:13:42,910 --> 00:13:49,270
base image which is the Debian stable

00:13:47,230 --> 00:13:51,700
image and then on top of that the PHP

00:13:49,270 --> 00:13:54,490
five guys have compiled their own

00:13:51,700 --> 00:13:56,440
container and this container has the

00:13:54,490 --> 00:13:58,690
customizations for an Apache so it's

00:13:56,440 --> 00:14:01,390
just going to push that up the remote

00:13:58,690 --> 00:14:02,860
host so there's something I just want to

00:14:01,390 --> 00:14:04,870
draw your attention to you'll notice

00:14:02,860 --> 00:14:07,450
that at the end of the URL there is

00:14:04,870 --> 00:14:10,750
colon latest this is the equivalent to

00:14:07,450 --> 00:14:13,089
sort of master in get talk so it's the

00:14:10,750 --> 00:14:16,720
default what we call label which we're

00:14:13,089 --> 00:14:18,700
going to name this container so if you

00:14:16,720 --> 00:14:20,800
ever see that URL without a colon at the

00:14:18,700 --> 00:14:27,610
end it's implying that it's going to use

00:14:20,800 --> 00:14:30,279
the latest image okay now because you

00:14:27,610 --> 00:14:31,750
can share this or the places now and you

00:14:30,279 --> 00:14:33,430
can run it on other people's machines

00:14:31,750 --> 00:14:34,990
and it's going to be literally the exact

00:14:33,430 --> 00:14:37,990
same thing and because you've got docker

00:14:34,990 --> 00:14:40,690
isolating the code you can run this on

00:14:37,990 --> 00:14:42,880
any environment so this is now the

00:14:40,690 --> 00:14:44,060
artifact that you deploy to test is now

00:14:42,880 --> 00:14:46,790
the artifact that you

00:14:44,060 --> 00:14:48,560
loida production is the artifact that

00:14:46,790 --> 00:14:50,480
when oh everything's broken you

00:14:48,560 --> 00:14:52,400
need to check out why a specific version

00:14:50,480 --> 00:14:54,860
of your code isn't working you download

00:14:52,400 --> 00:14:56,630
to your developer machine it gives you

00:14:54,860 --> 00:14:58,010
great consistency and you know what's

00:14:56,630 --> 00:15:02,270
running where and you can easily

00:14:58,010 --> 00:15:03,380
replicate live bugs okay so i think it's

00:15:02,270 --> 00:15:06,740
just getting through the code that i

00:15:03,380 --> 00:15:09,410
actually wrote now yeah magic okay cool

00:15:06,740 --> 00:15:11,570
so it's actually pushed it up to that

00:15:09,410 --> 00:15:13,160
URL and if you visit the URL you'll be

00:15:11,570 --> 00:15:17,600
able to see that specific version of my

00:15:13,160 --> 00:15:19,070
docker container okay yeah so as I've

00:15:17,600 --> 00:15:20,870
mentioned your artifact is now the

00:15:19,070 --> 00:15:24,080
container that you move through your

00:15:20,870 --> 00:15:25,730
build pipeline and if you like me and do

00:15:24,080 --> 00:15:27,230
some open source stuff can I just use

00:15:25,730 --> 00:15:28,700
your fans who here does open source

00:15:27,230 --> 00:15:32,050
stuff occasionally has open saw

00:15:28,700 --> 00:15:35,870
something in a week maybe okay cool um

00:15:32,050 --> 00:15:38,900
and you're too cheap to set of Jenkins

00:15:35,870 --> 00:15:42,710
or too lazy and you can use the docker

00:15:38,900 --> 00:15:44,930
hub which has a CI server and will do

00:15:42,710 --> 00:15:47,390
builds and stuff for you when you commit

00:15:44,930 --> 00:15:49,940
to master which is really cool same with

00:15:47,390 --> 00:15:52,280
key to i/o and for both of these you can

00:15:49,940 --> 00:15:54,290
filter based on the name of the tag so

00:15:52,280 --> 00:15:57,080
your branches which are like build

00:15:54,290 --> 00:15:58,820
branches like fee checks wise they don't

00:15:57,080 --> 00:16:00,890
necessarily got built I tend to filter

00:15:58,820 --> 00:16:02,900
them so I only build tags which have

00:16:00,890 --> 00:16:08,000
been marked up with correctly with send

00:16:02,900 --> 00:16:10,520
their versions okay so that's how you

00:16:08,000 --> 00:16:12,230
build docker containers nice and simple

00:16:10,520 --> 00:16:14,150
so the other thing I've not really

00:16:12,230 --> 00:16:17,780
mentioned is how you package up your

00:16:14,150 --> 00:16:20,270
application to work well with docker so

00:16:17,780 --> 00:16:22,100
Heroku have this amazing guide on 12

00:16:20,270 --> 00:16:24,520
factors on net and Heroku have been

00:16:22,100 --> 00:16:27,200
doing containers for quite a long time

00:16:24,520 --> 00:16:29,660
so they pretty much got it down of how

00:16:27,200 --> 00:16:31,760
you do them really well and but just to

00:16:29,660 --> 00:16:33,590
summarize that there's two main changes

00:16:31,760 --> 00:16:35,480
that you need to be aware of the first

00:16:33,590 --> 00:16:38,420
of those is always log to stand it out

00:16:35,480 --> 00:16:42,470
and it's really tricky to get log files

00:16:38,420 --> 00:16:44,450
out of standard out out out of the

00:16:42,470 --> 00:16:45,890
interns of the container because you

00:16:44,450 --> 00:16:47,750
need to do things with volumes and

00:16:45,890 --> 00:16:50,030
getting files in there and it makes it

00:16:47,750 --> 00:16:51,890
quite hard to get the application log in

00:16:50,030 --> 00:16:54,410
a place where you can easily tale it and

00:16:51,890 --> 00:16:55,430
you're also going to find that quite a

00:16:54,410 --> 00:16:58,100
lot of the tools that you

00:16:55,430 --> 00:17:01,820
used with docker won't allow you to just

00:16:58,100 --> 00:17:03,320
randomly put a volume inside there

00:17:01,820 --> 00:17:05,540
you'll have to do something a bit more

00:17:03,320 --> 00:17:06,920
structured so it's always important to

00:17:05,540 --> 00:17:08,270
like to stand out because that's where

00:17:06,920 --> 00:17:10,730
docker expects it and you can easily

00:17:08,270 --> 00:17:14,300
tail that and follow that in system in

00:17:10,730 --> 00:17:16,189
your syslog or wherever you want and the

00:17:14,300 --> 00:17:18,500
next point is you always configure

00:17:16,189 --> 00:17:21,559
environment specific variables with

00:17:18,500 --> 00:17:23,300
environment variables and now the reason

00:17:21,559 --> 00:17:25,459
that this is important is doctor offers

00:17:23,300 --> 00:17:27,500
you a standardized way to pass

00:17:25,459 --> 00:17:30,320
environment variables into your docker

00:17:27,500 --> 00:17:33,980
containers so if you're trying to do

00:17:30,320 --> 00:17:35,330
things like inject a like a JSON file or

00:17:33,980 --> 00:17:37,250
something which maybe has your settings

00:17:35,330 --> 00:17:39,320
in in every single environment or maybe

00:17:37,250 --> 00:17:41,360
building different versions you soon

00:17:39,320 --> 00:17:42,860
found that like this stops working and

00:17:41,360 --> 00:17:44,809
everything starts becoming really really

00:17:42,860 --> 00:17:47,270
complicated if you stick to using

00:17:44,809 --> 00:17:49,580
environment variables for environment

00:17:47,270 --> 00:17:50,960
specific things then actually it turns

00:17:49,580 --> 00:17:53,360
out you don't really have that many

00:17:50,960 --> 00:17:55,820
environments specific differences and

00:17:53,360 --> 00:17:59,480
you're rapidly able to deploy this

00:17:55,820 --> 00:18:01,790
anywhere with a lot of flexibility okay

00:17:59,480 --> 00:18:03,260
so this kind of brings us to the end of

00:18:01,790 --> 00:18:06,590
the dakka section wasn't too long

00:18:03,260 --> 00:18:08,630
hopefully and docker is really awesome

00:18:06,590 --> 00:18:11,030
it gives you a fantastic way of sharing

00:18:08,630 --> 00:18:12,110
applications in a working state with all

00:18:11,030 --> 00:18:14,059
the libraries and everything that you

00:18:12,110 --> 00:18:15,410
need to run them and all the

00:18:14,059 --> 00:18:18,830
configuration because you have standard

00:18:15,410 --> 00:18:20,570
interface to configure things and well

00:18:18,830 --> 00:18:23,300
it does kind of have a bit of a problem

00:18:20,570 --> 00:18:26,990
what happens when you need to run a

00:18:23,300 --> 00:18:30,860
docker on more than one host and so this

00:18:26,990 --> 00:18:32,150
is where cuban 80s comes in so there are

00:18:30,860 --> 00:18:33,770
a whole bunch of problems with running

00:18:32,150 --> 00:18:36,590
da current model on host for example how

00:18:33,770 --> 00:18:38,059
do you man maintain that docker

00:18:36,590 --> 00:18:39,710
containers are still running all the

00:18:38,059 --> 00:18:41,420
time how do you automatically restart

00:18:39,710 --> 00:18:43,640
them when the crash on a very basic

00:18:41,420 --> 00:18:45,140
level how do you do deployments how do

00:18:43,640 --> 00:18:47,480
you make sure that you release the

00:18:45,140 --> 00:18:49,160
latest version of your code onto every

00:18:47,480 --> 00:18:51,950
host you have to ssh into every single

00:18:49,160 --> 00:18:54,020
box and run something and how do you

00:18:51,950 --> 00:18:55,280
make sure that you're monitoring this

00:18:54,020 --> 00:18:57,080
system is this something that you're

00:18:55,280 --> 00:18:59,780
going to sit down and write all yourself

00:18:57,080 --> 00:19:01,820
or are you going to be lazy and just use

00:18:59,780 --> 00:19:06,169
keeping 80s which is what I like to do

00:19:01,820 --> 00:19:07,850
and okay so Cuba nikki's is fantastic i

00:19:06,169 --> 00:19:09,620
really like it as a tool it solves the

00:19:07,850 --> 00:19:09,910
deployment problem essentially what you

00:19:09,620 --> 00:19:12,100
do

00:19:09,910 --> 00:19:13,900
you write some Yama files you run them

00:19:12,100 --> 00:19:15,700
through the other Cuban a tea stall and

00:19:13,900 --> 00:19:17,140
it will start up the whole environment

00:19:15,700 --> 00:19:19,720
all the way to provisioning you load

00:19:17,140 --> 00:19:21,940
balancers that you can access and this

00:19:19,720 --> 00:19:23,620
is from a platform which you don't need

00:19:21,940 --> 00:19:25,780
to go and put ssh keys everywhere or

00:19:23,620 --> 00:19:27,670
anything like that it solves the high

00:19:25,780 --> 00:19:29,140
availability problem by allowing you to

00:19:27,670 --> 00:19:31,720
specify a number of times that a

00:19:29,140 --> 00:19:33,640
container is run and obviously offering

00:19:31,720 --> 00:19:34,960
a way to route to wherever the wearing

00:19:33,640 --> 00:19:37,870
your cluster of those containers are

00:19:34,960 --> 00:19:40,090
actually running and it will do contain

00:19:37,870 --> 00:19:41,560
a state maintenance so you can say that

00:19:40,090 --> 00:19:44,440
I really care about this application

00:19:41,560 --> 00:19:46,810
running if it crashes restart it and you

00:19:44,440 --> 00:19:48,100
can also do things like say if it

00:19:46,810 --> 00:19:51,400
crashes I don't actually care if it

00:19:48,100 --> 00:19:53,200
stops okay so before I come under kind

00:19:51,400 --> 00:19:56,800
of some examples I just want to talk

00:19:53,200 --> 00:20:01,270
about four key ideas in Cuban 80s so the

00:19:56,800 --> 00:20:03,490
first of these is pods so pods are pods

00:20:01,270 --> 00:20:05,650
venues replication controllers next I'm

00:20:03,490 --> 00:20:07,690
going to talk about secrets and in this

00:20:05,650 --> 00:20:09,850
I'll touch on how you mount persistent

00:20:07,690 --> 00:20:12,580
storage inside your Cuban eighties

00:20:09,850 --> 00:20:14,830
cluster onto your containers for things

00:20:12,580 --> 00:20:17,560
like database containers and finally I

00:20:14,830 --> 00:20:19,360
will round up and talk about services

00:20:17,560 --> 00:20:21,970
which is how you can get an external IP

00:20:19,360 --> 00:20:25,750
for your things which are running inside

00:20:21,970 --> 00:20:29,770
your Cuban 80s cluster okay so pods are

00:20:25,750 --> 00:20:31,780
one or more docker container running as

00:20:29,770 --> 00:20:35,530
a unit of scale inside your application

00:20:31,780 --> 00:20:37,450
now I mean by this is if you have two

00:20:35,530 --> 00:20:39,610
pods which works at two containers which

00:20:37,450 --> 00:20:41,650
run together to complement each other

00:20:39,610 --> 00:20:43,830
and require the same for example code

00:20:41,650 --> 00:20:47,050
inside them may be the same SSL secrets

00:20:43,830 --> 00:20:50,290
maybe in this case so the same PHP code

00:20:47,050 --> 00:20:52,900
and you could have engine X and PHP

00:20:50,290 --> 00:20:55,660
running as a single pod which would be

00:20:52,900 --> 00:21:01,030
two containers which run on the same

00:20:55,660 --> 00:21:03,160
host as each other they are they have

00:21:01,030 --> 00:21:05,860
access to each other's filing systems

00:21:03,160 --> 00:21:08,470
you can mount them in volumes and if one

00:21:05,860 --> 00:21:10,240
of them crashes they both crash and they

00:21:08,470 --> 00:21:11,790
both get restarted if you increase the

00:21:10,240 --> 00:21:14,650
number of times that you want this

00:21:11,790 --> 00:21:17,010
duplicated it will duplicate both the

00:21:14,650 --> 00:21:19,060
containers so it's your unit of scale

00:21:17,010 --> 00:21:22,390
mostly though you're going to be running

00:21:19,060 --> 00:21:23,620
a single container inside a pod so in my

00:21:22,390 --> 00:21:25,870
case it's going to be

00:21:23,620 --> 00:21:28,480
PHP running in Apache or it could be

00:21:25,870 --> 00:21:32,590
MySQL or it could be whatever other

00:21:28,480 --> 00:21:34,780
application okay so replication

00:21:32,590 --> 00:21:37,450
controllers are the next part of this so

00:21:34,780 --> 00:21:39,790
replication controllers say I've got a

00:21:37,450 --> 00:21:43,120
pod and I want it to run X number of

00:21:39,790 --> 00:21:44,800
times within my Cuban 80s cluster this

00:21:43,120 --> 00:21:46,240
is done by like a single variable in

00:21:44,800 --> 00:21:48,580
some yamel files which is really really

00:21:46,240 --> 00:21:50,200
easy and basically this is what makes

00:21:48,580 --> 00:21:52,360
sure that your application even if one

00:21:50,200 --> 00:21:55,350
of your hosts goes down staves running

00:21:52,360 --> 00:21:57,670
even if your container crashes it will

00:21:55,350 --> 00:21:59,020
Cuban 80s we'll look at the replication

00:21:57,670 --> 00:22:01,150
controller and say okay so I should

00:21:59,020 --> 00:22:02,140
restart this host and I should make sure

00:22:01,150 --> 00:22:06,370
that there's at least two of these

00:22:02,140 --> 00:22:08,710
 finally services services are

00:22:06,370 --> 00:22:11,590
how to get to running containers what

00:22:08,710 --> 00:22:13,809
what services do is the act as a proxy

00:22:11,590 --> 00:22:16,420
and essentially what they do is they

00:22:13,809 --> 00:22:19,360
guess a DNS record and an IP address and

00:22:16,420 --> 00:22:20,980
it has some open ports on them and they

00:22:19,360 --> 00:22:22,450
will route through to open ports on

00:22:20,980 --> 00:22:27,160
containers which are in the running

00:22:22,450 --> 00:22:28,870
state and and these are so known as you

00:22:27,160 --> 00:22:30,460
get like a nice DNS entry with these

00:22:28,870 --> 00:22:32,950
which matches the name of the service

00:22:30,460 --> 00:22:35,020
they're limited to a specific name space

00:22:32,950 --> 00:22:37,210
so you could have a test namespace a dev

00:22:35,020 --> 00:22:38,980
namespace and have different services

00:22:37,210 --> 00:22:40,929
running in each of them under the same

00:22:38,980 --> 00:22:43,030
name so you can do things like have mail

00:22:40,929 --> 00:22:47,650
catch or maybe on tests and actually

00:22:43,030 --> 00:22:49,780
have a real smtp server on product okay

00:22:47,650 --> 00:22:51,600
so let's bring us back to kind of an

00:22:49,780 --> 00:22:55,390
example which I've been showing you and

00:22:51,600 --> 00:22:58,750
so this PHP pod is the docker container

00:22:55,390 --> 00:23:00,070
which we built on before and you'll

00:22:58,750 --> 00:23:01,990
notice that it's living inside a

00:23:00,070 --> 00:23:03,700
replication controller so this

00:23:01,990 --> 00:23:05,500
replication controller has a replica

00:23:03,700 --> 00:23:07,420
count set to 2 so it's going to make

00:23:05,500 --> 00:23:09,730
sure that there's two of these PHP pods

00:23:07,420 --> 00:23:13,059
running seeing in front of that is a

00:23:09,730 --> 00:23:15,400
flappy service it's a basically a DNS

00:23:13,059 --> 00:23:17,260
record which is going to allow my ssl

00:23:15,400 --> 00:23:22,120
terminating pods which is just ends in

00:23:17,260 --> 00:23:25,210
there to connect to my PHP pods sitting

00:23:22,120 --> 00:23:26,830
those two SL terminating pods are

00:23:25,210 --> 00:23:28,870
sitting in their own replication

00:23:26,830 --> 00:23:31,929
controller and then sitting in front of

00:23:28,870 --> 00:23:34,300
those is a service which also provisions

00:23:31,929 --> 00:23:34,909
its own outbound load balancers that has

00:23:34,300 --> 00:23:36,619
an idea

00:23:34,909 --> 00:23:41,659
which can be connectable from the

00:23:36,619 --> 00:23:43,340
outside world okay so before when I

00:23:41,659 --> 00:23:44,690
showed you the docker container there

00:23:43,340 --> 00:23:46,849
was a whole bunch of yellow files in

00:23:44,690 --> 00:23:50,539
there so this is the Yama file for the

00:23:46,849 --> 00:23:53,389
replication controller for the for the

00:23:50,539 --> 00:23:55,159
flap en pointe pod and I know this is

00:23:53,389 --> 00:23:56,809
kind of long the only thing I want to

00:23:55,159 --> 00:23:58,309
say about this is pods live inside

00:23:56,809 --> 00:23:59,989
replication controllers if they're

00:23:58,309 --> 00:24:02,389
associated with a replication controller

00:23:59,989 --> 00:24:04,669
and so let's just look at the pod bit

00:24:02,389 --> 00:24:05,749
for a minute and that was in red so

00:24:04,669 --> 00:24:08,509
you'll notice a whole bunch of things

00:24:05,749 --> 00:24:11,269
which are really similar to when i ran

00:24:08,509 --> 00:24:12,830
the application and so when i run the

00:24:11,269 --> 00:24:16,940
application with docker we had an image

00:24:12,830 --> 00:24:19,159
same URL and we had we had that port

00:24:16,940 --> 00:24:22,729
mapping thing doing we mapped port 80 to

00:24:19,159 --> 00:24:24,139
port 80 and then we had the name we call

00:24:22,729 --> 00:24:25,789
it flappy here i've called it fluffy

00:24:24,139 --> 00:24:28,519
cylex to differentiate it from the

00:24:25,789 --> 00:24:30,649
engine necrons but there's also a couple

00:24:28,519 --> 00:24:32,899
of new things so there is a liveness

00:24:30,649 --> 00:24:35,539
probe now what this liveness probe do is

00:24:32,899 --> 00:24:38,749
it will do is it will keep querying I

00:24:35,539 --> 00:24:41,299
think it's every every to every 15

00:24:38,749 --> 00:24:43,129
seconds maybe the pod and checking that

00:24:41,299 --> 00:24:45,639
is actually returning a 200 from this

00:24:43,129 --> 00:24:48,229
response and if my application breaks

00:24:45,639 --> 00:24:50,210
you will stop the container it will

00:24:48,229 --> 00:24:51,919
restart it again so if my application

00:24:50,210 --> 00:24:54,499
ever gets deadlocked for some reason and

00:24:51,919 --> 00:24:55,820
it will restart that container you can

00:24:54,499 --> 00:24:58,309
do this liveness check in other ways you

00:24:55,820 --> 00:24:59,989
can there's one for doing execs inside

00:24:58,309 --> 00:25:01,489
the container if you want to check if a

00:24:59,989 --> 00:25:04,190
database was working or something like

00:25:01,489 --> 00:25:06,049
that and there's also an image pool

00:25:04,190 --> 00:25:07,669
policy the image pull policy is slightly

00:25:06,049 --> 00:25:09,979
less important so basically what it says

00:25:07,669 --> 00:25:12,320
is when I deploy this to a new Cuban 80s

00:25:09,979 --> 00:25:15,739
cluster and tell the cluster to go away

00:25:12,320 --> 00:25:18,200
and look at the repository and that the

00:25:15,739 --> 00:25:19,669
image is from and just do a pull a

00:25:18,200 --> 00:25:21,379
docker pool which will bring in the

00:25:19,669 --> 00:25:23,029
latest version of the image even if it's

00:25:21,379 --> 00:25:26,330
already present on the people notice

00:25:23,029 --> 00:25:28,070
cluster okay so let's have a look at the

00:25:26,330 --> 00:25:32,509
rest of that replication controller now

00:25:28,070 --> 00:25:34,309
and so we have a few different things it

00:25:32,509 --> 00:25:36,379
is quite a lot going on in this file and

00:25:34,309 --> 00:25:38,210
but I'll just highlight the most

00:25:36,379 --> 00:25:39,919
important part so the most important

00:25:38,210 --> 00:25:42,409
part is right below the word spec it's

00:25:39,919 --> 00:25:45,409
called replicas too and what this says

00:25:42,409 --> 00:25:48,010
is going to run two instances of the pod

00:25:45,409 --> 00:25:49,030
contained within it

00:25:48,010 --> 00:25:50,230
there are a few other things that are

00:25:49,030 --> 00:25:53,110
probably worth looking at you can see

00:25:50,230 --> 00:25:55,090
this has also gotten name so it's flappy

00:25:53,110 --> 00:25:56,640
style xbone and i'll be using the later

00:25:55,090 --> 00:25:59,620
on when i show you how to do an update

00:25:56,640 --> 00:26:01,540
and there's also some labels down here

00:25:59,620 --> 00:26:03,250
so these labels are associated with the

00:26:01,540 --> 00:26:06,250
pods and they are how we make the

00:26:03,250 --> 00:26:10,660
services know where to look for the

00:26:06,250 --> 00:26:12,670
container right so that's replication

00:26:10,660 --> 00:26:13,690
controllers and pods kind of done so I'm

00:26:12,670 --> 00:26:16,360
going to talk to you a little bit about

00:26:13,690 --> 00:26:18,340
how you get data into containers and how

00:26:16,360 --> 00:26:20,140
you manage those tricky bits of data

00:26:18,340 --> 00:26:24,910
which maybe you don't want everyone to

00:26:20,140 --> 00:26:28,690
know about secrets basically so in this

00:26:24,910 --> 00:26:31,150
case I've got a ssh key and you can see

00:26:28,690 --> 00:26:33,940
some base 64 encoded data in those two

00:26:31,150 --> 00:26:36,400
variables and there's like a name which

00:26:33,940 --> 00:26:38,470
sound looks kinda like a file name so

00:26:36,400 --> 00:26:40,000
this is just a yellow file you run it

00:26:38,470 --> 00:26:42,040
through Cuban 80s and Cuban 80s will

00:26:40,000 --> 00:26:43,510
create this in your cluster obviously

00:26:42,040 --> 00:26:45,340
you wouldn't commit your secrets to the

00:26:43,510 --> 00:26:48,730
same repository as you have the rest of

00:26:45,340 --> 00:26:50,200
your stuff so it gives you a way to to

00:26:48,730 --> 00:26:52,120
get that information ensure plus two

00:26:50,200 --> 00:26:55,420
separate to the actual structure of the

00:26:52,120 --> 00:26:58,900
application okay so this is the

00:26:55,420 --> 00:27:04,780
replication controller for the for the

00:26:58,900 --> 00:27:06,610
SSL terminating pods and it's quite long

00:27:04,780 --> 00:27:08,320
so let's just look at the bits that are

00:27:06,610 --> 00:27:10,480
important so it's basically exactly the

00:27:08,320 --> 00:27:13,300
same as for the pod apart from these

00:27:10,480 --> 00:27:16,090
things so we can see here that there's

00:27:13,300 --> 00:27:18,280
some volumes so what volumes do as it

00:27:16,090 --> 00:27:20,470
says make sure that this bit of stories

00:27:18,280 --> 00:27:23,170
that this bit of data that is associated

00:27:20,470 --> 00:27:27,430
with this particular name in this case

00:27:23,170 --> 00:27:29,650
I'm loading a secret is exists and can

00:27:27,430 --> 00:27:31,840
be associated with wherever I'm going to

00:27:29,650 --> 00:27:34,360
run in the cluster which server I'm

00:27:31,840 --> 00:27:37,240
going to run these particular containers

00:27:34,360 --> 00:27:38,920
within them now this bit is part of

00:27:37,240 --> 00:27:41,500
replication control that the top bit is

00:27:38,920 --> 00:27:44,140
all part of the pod and what we see

00:27:41,500 --> 00:27:45,820
saying for the top part is firstly we're

00:27:44,140 --> 00:27:49,150
defining some environment variables of

00:27:45,820 --> 00:27:51,520
where to look for some SSL ssl certs and

00:27:49,150 --> 00:27:53,500
there we have the volume mounts now what

00:27:51,520 --> 00:27:57,010
the volume ones do is say with the

00:27:53,500 --> 00:28:00,310
volume mount this particular name inside

00:27:57,010 --> 00:28:01,370
the container so this is really useful

00:28:00,310 --> 00:28:03,440
so

00:28:01,370 --> 00:28:05,300
it's really sore for secrets but this is

00:28:03,440 --> 00:28:07,130
also how you mount / say for example

00:28:05,300 --> 00:28:09,710
persistent storage inside your

00:28:07,130 --> 00:28:11,180
containers you would define a slightly

00:28:09,710 --> 00:28:14,630
song areas look slightly different to

00:28:11,180 --> 00:28:17,180
the secrets you issue why is known as a

00:28:14,630 --> 00:28:19,130
persistent volume claim and for a

00:28:17,180 --> 00:28:20,570
specific amount of space it looks

00:28:19,130 --> 00:28:22,610
relatively the same it's in the volume

00:28:20,570 --> 00:28:24,620
section and if that's available it will

00:28:22,610 --> 00:28:26,390
get mounted inside your containers say

00:28:24,620 --> 00:28:28,880
your containers crash and get resided on

00:28:26,390 --> 00:28:31,970
a different host and that volume will

00:28:28,880 --> 00:28:35,050
follow your containers so you'll get

00:28:31,970 --> 00:28:38,900
persistent storage wherever you want

00:28:35,050 --> 00:28:41,780
okay so this kind of brings us to the

00:28:38,900 --> 00:28:43,370
load balancer now the load answer is

00:28:41,780 --> 00:28:45,650
actually just a specialized kind of

00:28:43,370 --> 00:28:47,570
service so this particular service is

00:28:45,650 --> 00:28:50,540
the one for the ssl terminator and

00:28:47,570 --> 00:28:52,400
there's not very much to it there is a

00:28:50,540 --> 00:28:54,380
name that that's going to be our DNS

00:28:52,400 --> 00:28:56,450
records there is a IP address that

00:28:54,380 --> 00:28:59,300
resolves to as well we've got some ports

00:28:56,450 --> 00:29:01,850
so we're saying here open port 80 on

00:28:59,300 --> 00:29:03,620
this service and then on the containers

00:29:01,850 --> 00:29:08,000
try to connect to a port which has been

00:29:03,620 --> 00:29:09,559
named HTTP and then we have hey see GPS

00:29:08,000 --> 00:29:13,400
because this is connecting to the SSL

00:29:09,559 --> 00:29:16,130
container there's some selectors just

00:29:13,400 --> 00:29:19,130
below this now this says precisely which

00:29:16,130 --> 00:29:22,730
of the pods that you should be

00:29:19,130 --> 00:29:25,340
connecting to and so in this case of

00:29:22,730 --> 00:29:27,020
service and its type engine X and it

00:29:25,340 --> 00:29:30,770
will connect to any of the pods in a

00:29:27,020 --> 00:29:32,510
kind of round-robin fashion and and it

00:29:30,770 --> 00:29:34,250
will allow you to connect through this

00:29:32,510 --> 00:29:36,290
case is actually a special kind of

00:29:34,250 --> 00:29:38,200
service because type load balancer and

00:29:36,290 --> 00:29:41,120
what this does is it instructs your

00:29:38,200 --> 00:29:44,059
service provider so AWS Google compute

00:29:41,120 --> 00:29:46,820
engine to provision you an external load

00:29:44,059 --> 00:29:48,320
bouncer you get an IP address for the

00:29:46,820 --> 00:29:50,360
service which you've just deployed and

00:29:48,320 --> 00:29:53,990
that all happens magically behind the

00:29:50,360 --> 00:29:55,880
scenes okay so because I've been talking

00:29:53,990 --> 00:29:58,940
so long I suspect he probably forgotten

00:29:55,880 --> 00:30:00,740
what this example actually is and so we

00:29:58,940 --> 00:30:04,400
have the flappy endpoint here it's got

00:30:00,740 --> 00:30:06,200
two URLs one which is just returns 201

00:30:04,400 --> 00:30:11,870
which returns a different response every

00:30:06,200 --> 00:30:13,680
single time mark it ok so after a while

00:30:11,870 --> 00:30:14,880
keeping developing your application

00:30:13,680 --> 00:30:17,730
does come a point when you actually need

00:30:14,880 --> 00:30:22,470
to release this stuff and hopefully it

00:30:17,730 --> 00:30:24,840
goes pretty well now with Cuban 80s it's

00:30:22,470 --> 00:30:30,420
actually really really easy to launch an

00:30:24,840 --> 00:30:32,760
application so it's one command so cube

00:30:30,420 --> 00:30:34,140
control I'm just going to prove you that

00:30:32,760 --> 00:30:36,510
this isn't actually already running

00:30:34,140 --> 00:30:39,360
because it just goes so quickly and

00:30:36,510 --> 00:30:40,980
there are no containers in here labeled

00:30:39,360 --> 00:30:42,450
this is my personal Cuban eighties

00:30:40,980 --> 00:30:44,640
cluster by the way I liked it so much I

00:30:42,450 --> 00:30:50,640
start using it there's no replication

00:30:44,640 --> 00:30:55,050
controllers which are called flappy so

00:30:50,640 --> 00:30:56,550
I'm now going to issue a create and that

00:30:55,050 --> 00:30:57,990
was just on the EML files which are in

00:30:56,550 --> 00:31:00,840
the code repository which I showed you

00:30:57,990 --> 00:31:03,060
earlier and we just been through and

00:31:00,840 --> 00:31:04,800
what this does is it tells Cuban 80s to

00:31:03,060 --> 00:31:07,920
start some pods and you can see the

00:31:04,800 --> 00:31:09,870
flappy engine X ones there and they just

00:31:07,920 --> 00:31:12,390
started running and then at the top we

00:31:09,870 --> 00:31:15,510
have two services as well so flappy

00:31:12,390 --> 00:31:17,490
engine X and fluffy Silex now the fluffy

00:31:15,510 --> 00:31:19,080
silex is just an internal service so

00:31:17,490 --> 00:31:21,000
it's got your IP address and you'll

00:31:19,080 --> 00:31:24,810
notice there's a gap underneath the

00:31:21,000 --> 00:31:27,000
flappy engine export just that and this

00:31:24,810 --> 00:31:30,240
is where in a few seconds google compute

00:31:27,000 --> 00:31:31,980
is going to provision me with an

00:31:30,240 --> 00:31:35,520
external IP address that we can use to

00:31:31,980 --> 00:31:37,020
connect to this service call so if I

00:31:35,520 --> 00:31:44,040
just open that in a browser it should be

00:31:37,020 --> 00:31:45,900
able to view it tada works and that's

00:31:44,040 --> 00:31:48,060
all there is to deploying an application

00:31:45,900 --> 00:31:50,400
with Cuban 80s that I so ridiculously

00:31:48,060 --> 00:31:52,680
easy isn't it no faffing around passing

00:31:50,400 --> 00:31:57,660
ssh-keys places or reasoning servers or

00:31:52,680 --> 00:32:03,420
anyway cool ah so once you have an

00:31:57,660 --> 00:32:05,730
application so once you have an

00:32:03,420 --> 00:32:08,490
application up and running sometimes

00:32:05,730 --> 00:32:11,550
like you need additional features adding

00:32:08,490 --> 00:32:13,470
in or sometimes a feature which was

00:32:11,550 --> 00:32:15,750
slightly unexpected maybe the feature

00:32:13,470 --> 00:32:18,210
where it crashes all the time has snuck

00:32:15,750 --> 00:32:21,690
into the code base and needs to be

00:32:18,210 --> 00:32:23,100
resolved taken out so Cuban 80s also

00:32:21,690 --> 00:32:24,200
provides you a really simple way to

00:32:23,100 --> 00:32:26,450
update the code

00:32:24,200 --> 00:32:28,970
is running inside your community cluster

00:32:26,450 --> 00:32:32,330
running inside your pods and it does

00:32:28,970 --> 00:32:34,789
this by using a rolling update so in

00:32:32,330 --> 00:32:36,679
this example I'm just going to add a new

00:32:34,789 --> 00:32:39,230
endpoints you can see this is my silex

00:32:36,679 --> 00:32:42,320
application there's a v2 endpoint which

00:32:39,230 --> 00:32:43,730
40 fours and I'm just going to add in a

00:32:42,320 --> 00:32:53,029
new endpoint which is going to return

00:32:43,730 --> 00:32:54,950
something when i go to v2 and because

00:32:53,029 --> 00:33:01,090
I'm a good citizen as well as doing this

00:32:54,950 --> 00:33:03,350
I'm going to update the comment okay so

00:33:01,090 --> 00:33:10,850
he hasn't all seen silex people right

00:33:03,350 --> 00:33:11,960
it's pretty easy stuff um so what I'm

00:33:10,850 --> 00:33:13,279
going to do with this is I'm actually

00:33:11,960 --> 00:33:14,299
going to deploy this in a slightly

00:33:13,279 --> 00:33:16,070
different way that I've showed you

00:33:14,299 --> 00:33:18,679
previously so rather than me doing the

00:33:16,070 --> 00:33:21,380
docker build on my machine I'm just

00:33:18,679 --> 00:33:23,690
going to push this to github and I'm

00:33:21,380 --> 00:33:25,279
going to get the key do I owe to do the

00:33:23,690 --> 00:33:26,630
build for me because I mean that's

00:33:25,279 --> 00:33:27,769
realistic you something like you guys

00:33:26,630 --> 00:33:32,870
probably going to do for your first

00:33:27,769 --> 00:33:35,299
project right um that's what I do okay

00:33:32,870 --> 00:33:39,130
so i'm not going to visit key to I oh

00:33:35,299 --> 00:33:39,130
I'm a final questionable content as well

00:33:40,840 --> 00:33:45,860
so here is the repository courtesy visit

00:33:44,000 --> 00:33:49,000
this now and have a look at what builds

00:33:45,860 --> 00:33:51,320
have been going on in this branch and

00:33:49,000 --> 00:33:53,240
you may notice a surreptitious edit

00:33:51,320 --> 00:33:54,889
there so when I was filming this there's

00:33:53,240 --> 00:33:57,049
something going on with key and build to

00:33:54,889 --> 00:33:58,669
taking ten minutes so I cut out the

00:33:57,049 --> 00:34:02,870
build process but it's just the same as

00:33:58,669 --> 00:34:04,779
when you do a docker build now they're

00:34:02,870 --> 00:34:07,519
taking about three minutes so it's fine

00:34:04,779 --> 00:34:09,800
so what I'm going to do now is I'm going

00:34:07,519 --> 00:34:11,990
to look up a unique name for the

00:34:09,800 --> 00:34:13,819
particular container inside the pod but

00:34:11,990 --> 00:34:16,310
I'm going to run so i'm going to look up

00:34:13,819 --> 00:34:18,230
and you do this by if you have multiple

00:34:16,310 --> 00:34:20,720
containers and inside a pod you need to

00:34:18,230 --> 00:34:22,220
give a specific name for the pod but in

00:34:20,720 --> 00:34:24,319
this case because I've only got one

00:34:22,220 --> 00:34:27,859
container my pod I'm just going to use

00:34:24,319 --> 00:34:29,300
the flappy sila to the one container and

00:34:27,859 --> 00:34:32,179
I'm going to deploy the image which we

00:34:29,300 --> 00:34:38,379
just built here and on to Michael on to

00:34:32,179 --> 00:34:38,379
the cluster so fluffy silex we

00:34:39,850 --> 00:34:47,450
and it's going ok so this particular

00:34:45,010 --> 00:34:49,490
command does something which is fairly

00:34:47,450 --> 00:34:52,070
specific and requires me to you have two

00:34:49,490 --> 00:34:53,810
hands so what we do is we start off with

00:34:52,070 --> 00:34:57,110
two old containers because the

00:34:53,810 --> 00:34:59,990
replication controller was set to and

00:34:57,110 --> 00:35:02,690
what it does is firstly it will spin up

00:34:59,990 --> 00:35:04,520
one more new container it will wait 60

00:35:02,690 --> 00:35:06,770
seconds for that to be ready and then

00:35:04,520 --> 00:35:09,380
after 60 seconds it will kill one of the

00:35:06,770 --> 00:35:11,810
old containers and now you've still got

00:35:09,380 --> 00:35:14,600
to the minimum of two containers running

00:35:11,810 --> 00:35:17,780
any one point and then after this it

00:35:14,600 --> 00:35:20,360
will start up a third to new one old

00:35:17,780 --> 00:35:22,340
docker containers and then finally after

00:35:20,360 --> 00:35:24,710
60 seconds it will kill the old docker

00:35:22,340 --> 00:35:26,090
container so you're running two new

00:35:24,710 --> 00:35:28,250
instances of the docker container

00:35:26,090 --> 00:35:32,360
without ever reducing the amount of

00:35:28,250 --> 00:35:36,350
times that you're in your application ok

00:35:32,360 --> 00:35:39,080
so now this is obviously not ideal for

00:35:36,350 --> 00:35:41,810
everyone and you can actually do green

00:35:39,080 --> 00:35:44,240
black deployments with this by replacing

00:35:41,810 --> 00:35:47,120
the service and inserting a new

00:35:44,240 --> 00:35:49,100
replication controller and with a new

00:35:47,120 --> 00:35:50,930
reference to the euro different you are

00:35:49,100 --> 00:35:52,280
so you could have two different

00:35:50,930 --> 00:35:53,660
versions.the container running the same

00:35:52,280 --> 00:35:57,830
time and then switch it over by

00:35:53,660 --> 00:35:59,870
replacing the server ok so we're now on

00:35:57,830 --> 00:36:02,120
to the second stage so there is two new

00:35:59,870 --> 00:36:08,690
containers and there is one old

00:36:02,120 --> 00:36:10,960
container and hopefully I will flip over

00:36:08,690 --> 00:36:13,460
to the browser in a minute and show you

00:36:10,960 --> 00:36:16,550
both of the applications loading in a

00:36:13,460 --> 00:36:19,150
round-robin type way and that's what

00:36:16,550 --> 00:36:19,150
messed up my phone

00:36:31,040 --> 00:36:37,370
no messed up my timing oh there we go

00:36:34,010 --> 00:36:44,240
okay so I'm now getting the 404 page and

00:36:37,370 --> 00:36:46,400
I'm also getting the actual correct yeah

00:36:44,240 --> 00:36:47,720
so working not working working not

00:36:46,400 --> 00:36:49,220
working that's because we've got two

00:36:47,720 --> 00:36:51,230
different containers of the different

00:36:49,220 --> 00:36:52,910
versions I would say that this is

00:36:51,230 --> 00:36:56,420
probably not ideal for every situation

00:36:52,910 --> 00:36:57,710
and because obviously you probably don't

00:36:56,420 --> 00:37:00,290
want two different versions of your code

00:36:57,710 --> 00:37:02,060
running at once and but actually you can

00:37:00,290 --> 00:37:03,290
resolve this by deploying in just a

00:37:02,060 --> 00:37:05,870
slightly different way but this comes

00:37:03,290 --> 00:37:07,790
out of the box and I can't be able to

00:37:05,870 --> 00:37:09,470
change it for my personal hosting needs

00:37:07,790 --> 00:37:12,770
because I don't have anything more

00:37:09,470 --> 00:37:14,480
specific to do ok so if now finally

00:37:12,770 --> 00:37:16,700
finished deploying both containers on

00:37:14,480 --> 00:37:18,590
the same version and regardless of how

00:37:16,700 --> 00:37:20,510
many times we've hit that page it will

00:37:18,590 --> 00:37:21,650
be fine so if you hit the URL now I

00:37:20,510 --> 00:37:28,490
think you would be able to see that

00:37:21,650 --> 00:37:31,160
infant ok so I think for me Cuban 80

00:37:28,490 --> 00:37:35,480
solves was a bit of a guilty problem of

00:37:31,160 --> 00:37:38,660
DevOps in that Chef puppet ansible maybe

00:37:35,480 --> 00:37:42,350
bash scripts aren't really reusable um

00:37:38,660 --> 00:37:43,880
so you update your host it turns out

00:37:42,350 --> 00:37:44,810
that actually you need to rewrite all

00:37:43,880 --> 00:37:47,780
year round school because maybe a

00:37:44,810 --> 00:37:49,460
package name has changed and like you

00:37:47,780 --> 00:37:51,080
try and reuse someone else's work but

00:37:49,460 --> 00:37:53,300
maybe they're actually it doesn't quite

00:37:51,080 --> 00:37:55,870
work on your version of ubuntu it only

00:37:53,300 --> 00:37:58,880
works on X version of young and

00:37:55,870 --> 00:38:01,430
generally it's a big big mess and you

00:37:58,880 --> 00:38:04,460
can't reliably reuse anyone else's work

00:38:01,430 --> 00:38:06,800
because you know that it's probably

00:38:04,460 --> 00:38:08,180
gonna break this means that a lot of

00:38:06,800 --> 00:38:10,910
time in dev ops are going to be spending

00:38:08,180 --> 00:38:13,850
time reworking code which you should

00:38:10,910 --> 00:38:16,430
already have finished at least once and

00:38:13,850 --> 00:38:17,810
Cuban 80s gives you a definite way that

00:38:16,430 --> 00:38:19,310
you know that this code is gonna work

00:38:17,810 --> 00:38:21,170
because you're basing yourself off a

00:38:19,310 --> 00:38:23,210
known image with known versions of

00:38:21,170 --> 00:38:24,740
software known configuration so you

00:38:23,210 --> 00:38:26,180
don't use any of these horrible things

00:38:24,740 --> 00:38:30,020
which I take so no configuration

00:38:26,180 --> 00:38:31,670
management you get rolling updates out

00:38:30,020 --> 00:38:34,790
of the box you get deploys out the box

00:38:31,670 --> 00:38:37,130
um you get health checks so if your

00:38:34,790 --> 00:38:38,390
application messes up it restarts which

00:38:37,130 --> 00:38:41,750
I know sounds like a small thing but

00:38:38,390 --> 00:38:43,160
quite frequently dev dev people don't

00:38:41,750 --> 00:38:43,950
really pay much attention to this or

00:38:43,160 --> 00:38:46,230
notice that

00:38:43,950 --> 00:38:47,970
it actually needs doing it gives you

00:38:46,230 --> 00:38:50,580
services and it's really easy to create

00:38:47,970 --> 00:38:53,070
highly available systems within a

00:38:50,580 --> 00:38:54,930
particular deployment zone because you

00:38:53,070 --> 00:38:55,860
can just say run two instances of this

00:38:54,930 --> 00:38:58,470
and I'll make sure it so it's

00:38:55,860 --> 00:38:59,820
connectable using the service something

00:38:58,470 --> 00:39:01,560
I've not really touched on that is

00:38:59,820 --> 00:39:04,620
possible with docker and Cuban 80s is

00:39:01,560 --> 00:39:06,690
you can set a resource limit for your

00:39:04,620 --> 00:39:09,360
containers and pods you can say that

00:39:06,690 --> 00:39:12,510
actually I only want to this particular

00:39:09,360 --> 00:39:17,250
container to use maybe 100 Meg's or five

00:39:12,510 --> 00:39:23,250
gigs if it's a Java and it's from

00:39:17,250 --> 00:39:25,740
personal experience and you will limit

00:39:23,250 --> 00:39:27,150
your application to using them memory so

00:39:25,740 --> 00:39:28,740
you won't ever get a situation where you

00:39:27,150 --> 00:39:30,120
know like you had that one dodgy script

00:39:28,740 --> 00:39:32,340
which may be used too much memory and

00:39:30,120 --> 00:39:39,000
crashed your host and you can do the

00:39:32,340 --> 00:39:41,070
same thing with cpu time yeah okay so as

00:39:39,000 --> 00:39:43,260
I mentioned a start like the technology

00:39:41,070 --> 00:39:45,120
is really only half the bowel so I'm now

00:39:43,260 --> 00:39:46,610
going to talk to you about some of the

00:39:45,120 --> 00:39:52,770
problems that we had at the Home Office

00:39:46,610 --> 00:39:54,390
and kind of how we shifted from reusing

00:39:52,770 --> 00:39:57,540
and reworking our DevOps for every

00:39:54,390 --> 00:40:00,000
single platform we deployed to to being

00:39:57,540 --> 00:40:04,650
a team that provisioned platforms for

00:40:00,000 --> 00:40:06,360
developers to use and so the reason that

00:40:04,650 --> 00:40:09,300
we came to look for these tools that I'm

00:40:06,360 --> 00:40:10,980
talking to you about today is that we

00:40:09,300 --> 00:40:12,810
will have we had a problem and ninety

00:40:10,980 --> 00:40:15,060
percent of time when we came to a new

00:40:12,810 --> 00:40:17,730
project it would require some level of

00:40:15,060 --> 00:40:21,990
isolation so they've meant provisioning

00:40:17,730 --> 00:40:24,390
an entirely new like zone up projects in

00:40:21,990 --> 00:40:26,610
your hosting environment it meant

00:40:24,390 --> 00:40:28,890
running and rerunning puppet scripts

00:40:26,610 --> 00:40:30,750
rewriting them or ansible or whichever

00:40:28,890 --> 00:40:32,670
the devops engineer preferred and

00:40:30,750 --> 00:40:33,960
because each of these environments

00:40:32,670 --> 00:40:35,280
because they were deployed to slightly

00:40:33,960 --> 00:40:37,710
different times maybe have slightly

00:40:35,280 --> 00:40:39,600
different versions of the operating

00:40:37,710 --> 00:40:42,750
system we found that we had to rework

00:40:39,600 --> 00:40:44,520
lots of our puppet and it was just a big

00:40:42,750 --> 00:40:46,320
mess it was really untidy and it was

00:40:44,520 --> 00:40:48,960
throwing away lots of rework all the

00:40:46,320 --> 00:40:51,930
time so we went on a journey and

00:40:48,960 --> 00:40:54,390
essentially to maximize reuse inside

00:40:51,930 --> 00:40:56,490
DevOps and change the culture so that we

00:40:54,390 --> 00:40:57,400
didn't fall into the same trap of using

00:40:56,490 --> 00:41:00,340
these tools but

00:40:57,400 --> 00:41:01,630
writing everything every single time so

00:41:00,340 --> 00:41:04,240
I'm going to first talk about what we

00:41:01,630 --> 00:41:06,600
kind of reuse at the Home Office and

00:41:04,240 --> 00:41:10,390
which particular items we attempt to

00:41:06,600 --> 00:41:13,330
well open source but also make sure that

00:41:10,390 --> 00:41:15,910
we don't duplicate and I'm going to talk

00:41:13,330 --> 00:41:18,910
about some of the changes we made as a

00:41:15,910 --> 00:41:21,250
dev ops team in order to switch from

00:41:18,910 --> 00:41:24,250
thinking like we are delivering some the

00:41:21,250 --> 00:41:26,740
ability to maybe configure a HTTP server

00:41:24,250 --> 00:41:29,740
somewhere to being a team which develop

00:41:26,740 --> 00:41:32,320
which delivers a Cuban 80s platform and

00:41:29,740 --> 00:41:34,360
a pass environment which developers can

00:41:32,320 --> 00:41:37,300
rapidly deploy their own code to and

00:41:34,360 --> 00:41:40,440
iterate frequently and obviously because

00:41:37,300 --> 00:41:43,000
the Home Office has lots of your data I

00:41:40,440 --> 00:41:45,310
want to convince you that we take a lot

00:41:43,000 --> 00:41:47,140
of care with security and I gave you a

00:41:45,310 --> 00:41:49,480
couple of tips for making sure that when

00:41:47,140 --> 00:41:53,020
you deploy Cuban 80s and docker that you

00:41:49,480 --> 00:41:54,880
actually do it securely okay so things

00:41:53,020 --> 00:41:56,320
are the Home Office will be reuse we

00:41:54,880 --> 00:41:58,830
reuse code so we've been making

00:41:56,320 --> 00:42:01,870
libraries and things quite frequently

00:41:58,830 --> 00:42:04,030
it's maybe not been that reusable in the

00:42:01,870 --> 00:42:05,800
past because we've just dumped stuff on

00:42:04,030 --> 00:42:08,650
github we've committed that sin that I

00:42:05,800 --> 00:42:10,900
think Jory mentioned where we like just

00:42:08,650 --> 00:42:15,820
open saw something by changing the

00:42:10,900 --> 00:42:18,640
setting on the repository but we we've

00:42:15,820 --> 00:42:20,500
changed that fairly recently we also

00:42:18,640 --> 00:42:22,540
reuse docker containers so we make

00:42:20,500 --> 00:42:24,220
reusable elements of infrastructure

00:42:22,540 --> 00:42:26,290
which people can take and reuse the

00:42:24,220 --> 00:42:29,380
common tasks so things like a web

00:42:26,290 --> 00:42:32,470
application firewall like a reverse

00:42:29,380 --> 00:42:34,390
proxy which terminates SSL all those

00:42:32,470 --> 00:42:37,480
things pre-made don't need to write them

00:42:34,390 --> 00:42:40,270
just get a docker container and we also

00:42:37,480 --> 00:42:41,850
reuse environments but we reuse

00:42:40,270 --> 00:42:44,410
environments in a very specific way so

00:42:41,850 --> 00:42:47,830
we offer like maybe a secure environment

00:42:44,410 --> 00:42:50,320
for like secret squirrel stuff and we

00:42:47,830 --> 00:42:51,910
also offer a public cloud environment

00:42:50,320 --> 00:42:54,040
for less secure stuff but still

00:42:51,910 --> 00:42:55,630
important and maybe for some very

00:42:54,040 --> 00:42:59,770
specific applications we have like

00:42:55,630 --> 00:43:02,170
segregated bare metal servers okay so

00:42:59,770 --> 00:43:04,000
let's talk about reefs and so in order

00:43:02,170 --> 00:43:06,190
to improve the amount of reuse we were

00:43:04,000 --> 00:43:08,590
going inside the home office we thought

00:43:06,190 --> 00:43:10,030
right problems are hard to solve so

00:43:08,590 --> 00:43:10,599
let's look at other people who've solved

00:43:10,030 --> 00:43:13,329
them already

00:43:10,599 --> 00:43:16,029
and so what we did is we had look at the

00:43:13,329 --> 00:43:18,009
world's most successful reuse project

00:43:16,029 --> 00:43:20,799
ever envisioned and that is the open

00:43:18,009 --> 00:43:22,269
source movement and so we thought that

00:43:20,799 --> 00:43:23,829
we would Nick some ideas from them and

00:43:22,269 --> 00:43:25,839
the first idea that we had were says

00:43:23,829 --> 00:43:27,160
it's open source so we'll just start

00:43:25,839 --> 00:43:29,559
working openly and that'll that'll

00:43:27,160 --> 00:43:32,200
magically fix everything so we changed

00:43:29,559 --> 00:43:33,999
how permissions work on repositories

00:43:32,200 --> 00:43:35,680
inside the home of it so you become a

00:43:33,999 --> 00:43:37,150
developer at the Home Office and you

00:43:35,680 --> 00:43:39,729
instantly get access to all of the

00:43:37,150 --> 00:43:44,499
repositories barring a few things for

00:43:39,729 --> 00:43:46,390
security and this didn't really work so

00:43:44,499 --> 00:43:47,289
here's a good start some people could

00:43:46,390 --> 00:43:48,640
kind of see that there might be

00:43:47,289 --> 00:43:50,200
something that could reuse and the

00:43:48,640 --> 00:43:52,299
process would go something like oh I

00:43:50,200 --> 00:43:53,289
contact the men person on the team and

00:43:52,299 --> 00:43:55,690
they go actually it's not really

00:43:53,289 --> 00:43:59,739
reusable but we you could kind of see

00:43:55,690 --> 00:44:01,779
stuff was out there so we thought okay

00:43:59,739 --> 00:44:03,400
so how can we make this code be in a

00:44:01,779 --> 00:44:05,170
more of a place so that it's actually

00:44:03,400 --> 00:44:06,999
reusable by other people and we thought

00:44:05,170 --> 00:44:08,739
well let's look at the open source

00:44:06,999 --> 00:44:11,739
community again how do they handle this

00:44:08,739 --> 00:44:14,079
so we looked at the attributes of really

00:44:11,739 --> 00:44:16,690
good open source projects and we noticed

00:44:14,079 --> 00:44:18,849
they had versioning they had lots of

00:44:16,690 --> 00:44:20,259
other cool stuff in there stuff that we

00:44:18,849 --> 00:44:22,690
really want to introduce inside the home

00:44:20,259 --> 00:44:24,279
office and we thought okay so how do we

00:44:22,690 --> 00:44:27,160
get that culture inside the home office

00:44:24,279 --> 00:44:29,819
and the answer was for us to open source

00:44:27,160 --> 00:44:31,420
ship and so we started identifying

00:44:29,819 --> 00:44:34,599
components which weren't directly

00:44:31,420 --> 00:44:36,700
related to our business roles and we

00:44:34,599 --> 00:44:38,410
would just release them open source them

00:44:36,700 --> 00:44:40,960
we'd make sure they had documentation

00:44:38,410 --> 00:44:43,509
and stuff and they would be out there

00:44:40,960 --> 00:44:44,799
and people could actually use them and

00:44:43,509 --> 00:44:47,739
what we found is this actually

00:44:44,799 --> 00:44:49,420
encouraged people to be good people and

00:44:47,739 --> 00:44:50,920
what I mean by this is people have a

00:44:49,420 --> 00:44:52,960
certain amount of pride in their code

00:44:50,920 --> 00:44:55,150
especially when it's being used by lots

00:44:52,960 --> 00:44:57,640
of other people open source was an

00:44:55,150 --> 00:45:00,489
opportunity for this to happen so we

00:44:57,640 --> 00:45:02,140
found that people were going and putting

00:45:00,489 --> 00:45:04,690
versions on stuff they were ranked

00:45:02,140 --> 00:45:06,009
beautiful documentation we send her at

00:45:04,690 --> 00:45:09,430
the Home Office for versioning very

00:45:06,009 --> 00:45:11,289
important to do that and the included

00:45:09,430 --> 00:45:14,469
licenses and importantly codes of

00:45:11,289 --> 00:45:16,059
conduct and we got this whole culture of

00:45:14,469 --> 00:45:18,599
people Oh consulting things and making

00:45:16,059 --> 00:45:20,799
really nice open source projects and

00:45:18,599 --> 00:45:22,269
this fed back into our own internal

00:45:20,799 --> 00:45:24,310
things so things that we couldn't open

00:45:22,269 --> 00:45:25,510
source because this was now the norm

00:45:24,310 --> 00:45:27,280
the norm to have all this cool

00:45:25,510 --> 00:45:29,170
documentation about how to use things

00:45:27,280 --> 00:45:33,040
including DevOps elements such as

00:45:29,170 --> 00:45:35,020
proxies web application firewalls we

00:45:33,040 --> 00:45:37,030
brought that culture into our own

00:45:35,020 --> 00:45:38,380
organization which meant that the stuff

00:45:37,030 --> 00:45:40,660
we couldn't open source was actually

00:45:38,380 --> 00:45:44,500
reusable internally as well a really

00:45:40,660 --> 00:45:46,720
nice side effect okay so that's how we

00:45:44,500 --> 00:45:48,340
got the people reusing things and we

00:45:46,720 --> 00:45:51,520
started introducing a culture of reuse

00:45:48,340 --> 00:45:54,010
inside the home office now because this

00:45:51,520 --> 00:45:55,150
is specifically about DevOps I'm going

00:45:54,010 --> 00:45:57,130
to tell you some of the things that we

00:45:55,150 --> 00:45:59,050
did so what we started doing as well as

00:45:57,130 --> 00:46:01,090
this is we after we had the success of

00:45:59,050 --> 00:46:05,440
getting open source of like okay so who

00:46:01,090 --> 00:46:06,790
else's ideas can we steal and so we

00:46:05,440 --> 00:46:09,250
looked at people who'd really

00:46:06,790 --> 00:46:11,320
successfully made platforms for

00:46:09,250 --> 00:46:14,620
delivering code well we thought okay so

00:46:11,320 --> 00:46:16,780
if i was working at home how was my

00:46:14,620 --> 00:46:18,790
preferred way of deploying code and lots

00:46:16,780 --> 00:46:21,130
of people said things well i just went

00:46:18,790 --> 00:46:22,960
to a cloud provider you know and and

00:46:21,130 --> 00:46:24,670
they have lots of things pre-made for me

00:46:22,960 --> 00:46:26,860
so like i don't need to work out how I'm

00:46:24,670 --> 00:46:28,600
going to do like fast file downloads

00:46:26,860 --> 00:46:31,450
because there's s3 I don't need to worry

00:46:28,600 --> 00:46:34,270
about databases because there's I i can

00:46:31,450 --> 00:46:37,270
use RDS or i can use Google's cloud SQL

00:46:34,270 --> 00:46:38,530
service or Aurora and I don't need to

00:46:37,270 --> 00:46:40,750
worry about ticketing systems because

00:46:38,530 --> 00:46:42,250
that's kind of built into everything I

00:46:40,750 --> 00:46:44,920
didn't need to worry about CI because

00:46:42,250 --> 00:46:46,690
they used Travis so we thought okay so

00:46:44,920 --> 00:46:48,400
what we need to do is we need to start

00:46:46,690 --> 00:46:51,750
providing these services to our

00:46:48,400 --> 00:46:53,800
developers internally as services so

00:46:51,750 --> 00:46:55,810
internally inside the home office we now

00:46:53,800 --> 00:46:57,970
have the ability to solve commonly used

00:46:55,810 --> 00:47:00,430
common problems that people have with

00:46:57,970 --> 00:47:04,360
their applications like how do I serve

00:47:00,430 --> 00:47:07,120
files to our users in a secure way just

00:47:04,360 --> 00:47:09,490
off the bat we also provision sort of

00:47:07,120 --> 00:47:10,540
more traditional things like get so

00:47:09,490 --> 00:47:14,110
people can have their own internal

00:47:10,540 --> 00:47:15,670
repositories if they want and the most

00:47:14,110 --> 00:47:17,110
important thing the most important

00:47:15,670 --> 00:47:21,220
service are of all the services we

00:47:17,110 --> 00:47:23,710
provide with Cuban 80s now Cuban 80s was

00:47:21,220 --> 00:47:27,100
key to our success in reusing

00:47:23,710 --> 00:47:28,290
environments so Cuban 80s in the home

00:47:27,100 --> 00:47:30,400
office runs on a few different things

00:47:28,290 --> 00:47:32,080
generally speaking we use core OS

00:47:30,400 --> 00:47:35,500
running on different based systems but

00:47:32,080 --> 00:47:37,910
that's not always true what is true

00:47:35,500 --> 00:47:40,760
however that the users interface is all

00:47:37,910 --> 00:47:43,460
ways the Cuban 80s API so they can use

00:47:40,760 --> 00:47:45,890
the Cuban 80s command line tools and

00:47:43,460 --> 00:47:47,780
regardless of like which environment the

00:47:45,890 --> 00:47:50,450
deploying to you via super secret

00:47:47,780 --> 00:47:53,900
squirrel stuff or like public good let

00:47:50,450 --> 00:47:55,670
UK stuff and they can actually just use

00:47:53,900 --> 00:47:56,900
the same tools and the same bits of

00:47:55,670 --> 00:47:59,569
configuration that they've always used

00:47:56,900 --> 00:48:01,220
and not worry about the details of the

00:47:59,569 --> 00:48:02,990
delts in the background so it means that

00:48:01,220 --> 00:48:05,510
actually the code and tools to do

00:48:02,990 --> 00:48:07,789
deployments are exactly the same and

00:48:05,510 --> 00:48:09,289
what this means for you if you don't

00:48:07,789 --> 00:48:11,359
have these sort of multiple environment

00:48:09,289 --> 00:48:14,599
challenges is that if you decide that

00:48:11,359 --> 00:48:16,940
you maybe you're using AWS at the moment

00:48:14,599 --> 00:48:19,339
but you decide to fast host is like the

00:48:16,940 --> 00:48:23,000
way to go from now on you can move all

00:48:19,339 --> 00:48:25,450
your code and applications from AWS too

00:48:23,000 --> 00:48:27,559
fast hosts by running Cuban 80s on that

00:48:25,450 --> 00:48:29,180
because so long as you provide the same

00:48:27,559 --> 00:48:31,400
interface your code is always going to

00:48:29,180 --> 00:48:34,130
run exactly the same so long as you

00:48:31,400 --> 00:48:35,510
provide a Cuban a tea service and the

00:48:34,130 --> 00:48:37,220
great thing about this is Cuban 80s

00:48:35,510 --> 00:48:39,559
comes pre made in some commodity

00:48:37,220 --> 00:48:41,510
distributions such as a demand core OS

00:48:39,559 --> 00:48:43,660
so you don't even need to point you work

00:48:41,510 --> 00:48:45,890
in to install it there's pre-made

00:48:43,660 --> 00:48:48,740
distributions which especially for doing

00:48:45,890 --> 00:48:50,539
exactly this and this also means that

00:48:48,740 --> 00:48:53,150
it's really easy to get running as a dev

00:48:50,539 --> 00:48:54,740
because it runs in vagrant and so i'll

00:48:53,150 --> 00:48:57,079
give you a link on the neck on at the

00:48:54,740 --> 00:48:59,000
end of the thing about getting cuban

00:48:57,079 --> 00:49:00,829
eighties running in vagrant it's really

00:48:59,000 --> 00:49:03,020
really easy but the key thing i wanna

00:49:00,829 --> 00:49:05,480
get across is as a developer team we

00:49:03,020 --> 00:49:07,490
develop a cuban 80s platform with some

00:49:05,480 --> 00:49:09,079
ancillary services and the standard

00:49:07,490 --> 00:49:10,819
interface and the standard product we

00:49:09,079 --> 00:49:15,200
deliver to our customers that devs is

00:49:10,819 --> 00:49:17,420
cuban 80s as a pass okay so i'm kind of

00:49:15,200 --> 00:49:18,950
come to the end of my talk now so

00:49:17,420 --> 00:49:22,640
there's a few tips that i want to give

00:49:18,950 --> 00:49:25,039
you about security so doctor isn't a

00:49:22,640 --> 00:49:26,980
really amazing tool a doctor is an

00:49:25,039 --> 00:49:30,829
amazing tool for allowing you to reuse

00:49:26,980 --> 00:49:32,420
devops elements over and over again and

00:49:30,829 --> 00:49:34,010
it isolates your programs really well

00:49:32,420 --> 00:49:35,930
but it doesn't do anything to protect

00:49:34,010 --> 00:49:37,940
your applications from the data that's

00:49:35,930 --> 00:49:39,619
coming into them so if you've got like a

00:49:37,940 --> 00:49:41,599
buffer overflow exploit or something in

00:49:39,619 --> 00:49:43,130
there you can still get hacked you can

00:49:41,599 --> 00:49:44,839
still get exercises on your website you

00:49:43,130 --> 00:49:47,390
can have still have an SQL injection

00:49:44,839 --> 00:49:50,730
attacks so run a web application

00:49:47,390 --> 00:49:52,500
firewall in front of your applications

00:49:50,730 --> 00:49:54,810
sure there's some protection for the

00:49:52,500 --> 00:49:59,550
application itself like I like to think

00:49:54,810 --> 00:50:00,930
I right perfect code and but the truth

00:49:59,550 --> 00:50:03,690
is that I don't sometimes I make

00:50:00,930 --> 00:50:05,130
mistakes and having something which is

00:50:03,690 --> 00:50:07,380
going to protect you from a web

00:50:05,130 --> 00:50:09,300
application firewall work from attacks

00:50:07,380 --> 00:50:12,210
on the Internet is just common sense it

00:50:09,300 --> 00:50:13,500
takes no work you can reuse if you don't

00:50:12,210 --> 00:50:14,880
have one that you prefer to use yourself

00:50:13,500 --> 00:50:17,220
there's actually one which the home

00:50:14,880 --> 00:50:19,320
office is open sourced and configured

00:50:17,220 --> 00:50:21,810
for you it's based on an axis and engine

00:50:19,320 --> 00:50:23,280
X it's called the engine X proxy if i'll

00:50:21,810 --> 00:50:25,109
give you a link to the Home Office's

00:50:23,280 --> 00:50:30,390
github and you can actually run that

00:50:25,109 --> 00:50:32,340
it's what I use super painless okay so

00:50:30,390 --> 00:50:35,730
as well as protecting your applications

00:50:32,340 --> 00:50:38,250
from attacks through data coming into

00:50:35,730 --> 00:50:40,440
your application you can also control

00:50:38,250 --> 00:50:42,410
your upstream containers this is

00:50:40,440 --> 00:50:44,430
something which is really important so

00:50:42,410 --> 00:50:46,820
effectively when you do a docker build

00:50:44,430 --> 00:50:49,470
you're freezing your application in time

00:50:46,820 --> 00:50:52,980
so if in six months you're still using

00:50:49,470 --> 00:50:54,450
the same docker container and or maybe

00:50:52,980 --> 00:50:57,300
your upstream container hasn't released

00:50:54,450 --> 00:50:59,310
an update and you will be running

00:50:57,300 --> 00:51:00,840
vulnerable code within six months all

00:50:59,310 --> 00:51:02,250
operating systems have experts which

00:51:00,840 --> 00:51:05,040
have been published with them to varying

00:51:02,250 --> 00:51:06,660
degrees so it's important that you keep

00:51:05,040 --> 00:51:09,060
rebuilding your containers on a fairly

00:51:06,660 --> 00:51:11,910
regular basis and it's important that

00:51:09,060 --> 00:51:14,550
you choose an upstream container which

00:51:11,910 --> 00:51:15,900
you know is going to be up to date for

00:51:14,550 --> 00:51:16,950
the security restrictions will have at

00:51:15,900 --> 00:51:20,430
the Home Office we actually have a

00:51:16,950 --> 00:51:21,900
specific base image that we use but it's

00:51:20,430 --> 00:51:24,480
just as true that if you use one of the

00:51:21,900 --> 00:51:26,369
public official images so long as you

00:51:24,480 --> 00:51:28,170
rebuild your container fairly frequently

00:51:26,369 --> 00:51:29,850
you're going to be pretty safe from SQL

00:51:28,170 --> 00:51:31,530
attacks but you do need to make sure

00:51:29,850 --> 00:51:34,320
that your option container is providing

00:51:31,530 --> 00:51:36,090
you with updates and finally after

00:51:34,320 --> 00:51:37,020
advocating that we can reuse loads and

00:51:36,090 --> 00:51:39,930
loads of stuff across multiple

00:51:37,020 --> 00:51:41,369
environments one of the key reasons for

00:51:39,930 --> 00:51:43,619
doing this is so that we can actually

00:51:41,369 --> 00:51:45,090
split these environments up so one

00:51:43,619 --> 00:51:46,920
situation that you don't want to find

00:51:45,090 --> 00:51:49,109
yourself in is if you have lots for

00:51:46,920 --> 00:51:51,330
example lots of customer bank details

00:51:49,109 --> 00:51:53,010
you don't want them running in the same

00:51:51,330 --> 00:51:54,690
database server as the rest of your

00:51:53,010 --> 00:51:56,670
application say the rest of your

00:51:54,690 --> 00:51:58,859
application gets hacked you still want

00:51:56,670 --> 00:52:00,840
your custom and data to be safe so it's

00:51:58,859 --> 00:52:02,710
very important to not put all of your

00:52:00,840 --> 00:52:04,750
stuff in the same environment

00:52:02,710 --> 00:52:06,820
it's important to separate this out so

00:52:04,750 --> 00:52:09,250
that if you do get attacked you haven't

00:52:06,820 --> 00:52:12,010
got too much danger too much of a

00:52:09,250 --> 00:52:14,290
valuable target which would be targeted

00:52:12,010 --> 00:52:15,730
by everyone so basically you need to

00:52:14,290 --> 00:52:18,099
separate your environments and just

00:52:15,730 --> 00:52:19,510
separate your code into to make sure

00:52:18,099 --> 00:52:21,910
that you don't gather lots of high-value

00:52:19,510 --> 00:52:23,349
targets in a single place which is going

00:52:21,910 --> 00:52:28,119
to be really embarrassing if you get if

00:52:23,349 --> 00:52:30,010
you get attacked okay so i think these

00:52:28,119 --> 00:52:31,270
Cuban eighties is really cool I think

00:52:30,010 --> 00:52:32,290
this has been really interesting stuff

00:52:31,270 --> 00:52:34,480
going on at the home office at the

00:52:32,290 --> 00:52:36,760
moment it is still pretty early days so

00:52:34,480 --> 00:52:39,880
I mean this really only happened before

00:52:36,760 --> 00:52:41,859
Christmas it does make management really

00:52:39,880 --> 00:52:44,010
easy like I said like I you like it so

00:52:41,859 --> 00:52:47,020
much they started using it for my own

00:52:44,010 --> 00:52:48,760
deployments all my blogs my Twitter BOTS

00:52:47,020 --> 00:52:53,320
and stuff like that really important

00:52:48,760 --> 00:52:54,400
things all run on Cuban 80s because it

00:52:53,320 --> 00:52:56,080
means that I don't have to think about

00:52:54,400 --> 00:53:00,220
DevOps I just write a couple of Yama

00:52:56,080 --> 00:53:02,050
files and then it's sword it's hosting

00:53:00,220 --> 00:53:05,200
agnostic so you can migrate to cheaper

00:53:02,050 --> 00:53:07,060
hosts when you want and and you can also

00:53:05,200 --> 00:53:09,849
run it on bare metal which is obviously

00:53:07,060 --> 00:53:12,400
a choice some people make you can reuse

00:53:09,849 --> 00:53:16,570
everything and more importantly you can

00:53:12,400 --> 00:53:18,880
play with it today so that top link is a

00:53:16,570 --> 00:53:22,960
via a grant file where you can actually

00:53:18,880 --> 00:53:25,000
run Cuban 80s the next link down is a

00:53:22,960 --> 00:53:26,710
some example code it's the example code

00:53:25,000 --> 00:53:28,359
that I've been through today so you'll

00:53:26,710 --> 00:53:29,410
be able to run that and I think there's

00:53:28,359 --> 00:53:32,290
a link to where it's actually running

00:53:29,410 --> 00:53:35,020
which is flappy purple booth Cody UK as

00:53:32,290 --> 00:53:36,849
well on and there is the home of his

00:53:35,020 --> 00:53:38,380
github account which has got loads of

00:53:36,849 --> 00:53:42,750
docker containers that you probably want

00:53:38,380 --> 00:53:46,050
to reuse it could save you some time and

00:53:42,750 --> 00:53:49,630
the last link is the most important link

00:53:46,050 --> 00:53:52,270
it's from joined in and I really really

00:53:49,630 --> 00:53:53,800
like giving this talk but it's really

00:53:52,270 --> 00:53:56,080
hard to know what I should do with it so

00:53:53,800 --> 00:53:58,630
if you've got some feedback please give

00:53:56,080 --> 00:54:01,420
it a URL I'll put the slides up i'm

00:53:58,630 --> 00:54:06,720
joined in when slots over as well so

00:54:01,420 --> 00:54:06,720
yeah thank you very much Billy

00:54:12,059 --> 00:54:17,160
we do have some time for questions

00:54:14,749 --> 00:54:18,630
fortunately its prior to lunch so if we

00:54:17,160 --> 00:54:22,319
can stretch the time for questions if

00:54:18,630 --> 00:54:24,239
need be Mike phones please um in the

00:54:22,319 --> 00:54:28,380
example he was showing where you were

00:54:24,239 --> 00:54:31,140
redeploying I'm and you had a URL that

00:54:28,380 --> 00:54:33,869
returns an error because you're halfway

00:54:31,140 --> 00:54:36,869
through hmm leads me to wonder about

00:54:33,869 --> 00:54:40,469
session management how do you deal with

00:54:36,869 --> 00:54:44,519
session management arm if you're running

00:54:40,469 --> 00:54:45,719
multiple PHP containers so session

00:54:44,519 --> 00:54:47,729
management's tricky question I don't

00:54:45,719 --> 00:54:49,619
actually know this for I don't actually

00:54:47,729 --> 00:54:51,650
know how you handle that I always avoid

00:54:49,619 --> 00:54:54,509
having session management problems by

00:54:51,650 --> 00:54:58,640
either making sure that my sessions come

00:54:54,509 --> 00:55:00,779
from a key value store or writing

00:54:58,640 --> 00:55:03,269
stateless applications I know that's not

00:55:00,779 --> 00:55:05,160
always possible but it's just not a

00:55:03,269 --> 00:55:08,969
problem I've had to solve so i'll have

00:55:05,160 --> 00:55:12,680
to look in slow on okay we got one next

00:55:08,969 --> 00:55:12,680
door oh cool

00:55:16,320 --> 00:55:24,450
hello so I can see how Cuban eighties

00:55:22,200 --> 00:55:27,960
high-availability stuff can help for

00:55:24,450 --> 00:55:30,390
stateless things like PHP what solutions

00:55:27,960 --> 00:55:33,920
does it have for for example the my

00:55:30,390 --> 00:55:37,380
sequel container with data in it sure so

00:55:33,920 --> 00:55:40,020
data and persistence of storage is a

00:55:37,380 --> 00:55:41,700
really tricky problem for docker it just

00:55:40,020 --> 00:55:44,940
doesn't work very well with things like

00:55:41,700 --> 00:55:47,640
databases however you saw how i mounted

00:55:44,940 --> 00:55:49,620
the secret inside the duck inside the

00:55:47,640 --> 00:55:52,230
pod you can do the same thing but with

00:55:49,620 --> 00:55:54,840
persistent storage so Cuban 80s has an

00:55:52,230 --> 00:55:56,460
idea called volume claims and what

00:55:54,840 --> 00:55:58,410
volume claims are is the administrator

00:55:56,460 --> 00:56:00,500
of the cluster will define some volumes

00:55:58,410 --> 00:56:05,010
of a specific size which can be mounted

00:56:00,500 --> 00:56:06,540
inside your pods these are requested by

00:56:05,010 --> 00:56:08,340
volume claim which has a specific size

00:56:06,540 --> 00:56:11,250
and these volumes which are defined

00:56:08,340 --> 00:56:13,860
which you can complain are associated

00:56:11,250 --> 00:56:16,980
with a specific type of storage so this

00:56:13,860 --> 00:56:18,000
might be like RDS for example or it

00:56:16,980 --> 00:56:20,010
might be something built into your

00:56:18,000 --> 00:56:25,130
hosting provider so it could be Amazon's

00:56:20,010 --> 00:56:25,130
a persistent disk storage as well okay

00:56:29,509 --> 00:56:33,739
hey thank you so first of all the

00:56:31,339 --> 00:56:35,209
sessions thing I know no expert but I

00:56:33,739 --> 00:56:37,039
imagine that you configure your load

00:56:35,209 --> 00:56:38,899
balancers of these two key sessions so

00:56:37,039 --> 00:56:41,719
it would always send an individual user

00:56:38,899 --> 00:56:43,699
to the same instance and but yeah I

00:56:41,719 --> 00:56:45,739
noticed but my question I probably

00:56:43,699 --> 00:56:48,289
missed this but I saw how you were

00:56:45,739 --> 00:56:50,929
redeploying your containers up in winter

00:56:48,289 --> 00:56:52,999
Cuban eighties but like how does your

00:56:50,929 --> 00:56:54,380
code get up there is one of your

00:56:52,999 --> 00:56:56,809
containers configured to pull over from

00:56:54,380 --> 00:57:01,189
github or what so as part of the build

00:56:56,809 --> 00:57:03,589
step I issue a copy command this copy

00:57:01,189 --> 00:57:06,649
command copies my code into the docker

00:57:03,589 --> 00:57:08,329
container and so essentially as part of

00:57:06,649 --> 00:57:09,619
the docker build that's when I get the

00:57:08,329 --> 00:57:12,380
code that's when I put it inside the

00:57:09,619 --> 00:57:15,579
docker container so the docker container

00:57:12,380 --> 00:57:18,559
lives at the root of my applications

00:57:15,579 --> 00:57:19,579
repository so the idea is that you would

00:57:18,559 --> 00:57:22,819
just run blocker build on that

00:57:19,579 --> 00:57:24,229
particular file it's a docker can take

00:57:22,819 --> 00:57:26,539
the files which are in the same

00:57:24,229 --> 00:57:29,059
directory and things it can copy them it

00:57:26,539 --> 00:57:30,529
can selectively add them also some

00:57:29,059 --> 00:57:33,319
capacity to do things from URL but the

00:57:30,529 --> 00:57:36,380
point is that it you can copy the files

00:57:33,319 --> 00:57:37,729
into your application and that happens

00:57:36,380 --> 00:57:40,309
on your local machine before it's all

00:57:37,729 --> 00:57:42,349
set up yeah so I mean in the case if

00:57:40,309 --> 00:57:44,599
you're using something like key it

00:57:42,349 --> 00:57:47,719
checks out your github account and then

00:57:44,599 --> 00:57:50,269
does the docker build for like more

00:57:47,719 --> 00:57:51,709
complicated CI environments where you

00:57:50,269 --> 00:57:53,059
don't want to have any of your code

00:57:51,709 --> 00:57:55,189
actually on the machine so if you're

00:57:53,059 --> 00:57:57,139
building a go application what you can

00:57:55,189 --> 00:57:58,759
do is you can have two containers you

00:57:57,139 --> 00:58:01,069
can have a build container where you do

00:57:58,759 --> 00:58:03,409
the actual build and then you output to

00:58:01,069 --> 00:58:04,819
a volume a like the compiled version of

00:58:03,409 --> 00:58:07,279
the file and then you have a run

00:58:04,819 --> 00:58:09,439
container which is usually like a subset

00:58:07,279 --> 00:58:12,249
of which is usually the base image for

00:58:09,439 --> 00:58:16,189
the build container and you copy the

00:58:12,249 --> 00:58:21,039
compiled thing into the container cool

00:58:16,189 --> 00:58:21,039
thank you I was questioned by

00:58:22,330 --> 00:58:28,490
hi I just want to ask how does Cuban it

00:58:26,000 --> 00:58:32,600
is handled service discovery if you've

00:58:28,490 --> 00:58:34,220
got more than one containers yeah so the

00:58:32,600 --> 00:58:36,890
services themselves have DNS names

00:58:34,220 --> 00:58:38,960
associated with them these DNS names are

00:58:36,890 --> 00:58:42,680
so specific to what's known as a

00:58:38,960 --> 00:58:46,100
namespace in Cuban 80s so you could

00:58:42,680 --> 00:58:48,590
deploy different things different actual

00:58:46,100 --> 00:58:50,150
pods for different services depending on

00:58:48,590 --> 00:58:51,770
which environment if you're talking

00:58:50,150 --> 00:58:54,619
about more complicated service discovery

00:58:51,770 --> 00:58:58,640
like how do I know for example an SMTP

00:58:54,619 --> 00:59:03,080
server runs over like start TSL rather

00:58:58,640 --> 00:59:04,850
than ssl for example that is sort of an

00:59:03,080 --> 00:59:07,220
unsolved problem you could use SRV

00:59:04,850 --> 00:59:08,960
records but it's in no way like

00:59:07,220 --> 00:59:11,300
something which is supported the boss so

00:59:08,960 --> 00:59:14,390
dot each box can actually know was

00:59:11,300 --> 00:59:17,720
inside a pop as it was your disk yeah I

00:59:14,390 --> 00:59:23,630
love live like this sounds about picture

00:59:17,720 --> 00:59:26,420
ah too far there we go ok so these

00:59:23,630 --> 00:59:28,760
services so imagine this living in

00:59:26,420 --> 00:59:32,330
something called the namespace and the

00:59:28,760 --> 00:59:35,330
flappy service is essentially a DNS

00:59:32,330 --> 00:59:39,320
record which has called I think flappy

00:59:35,330 --> 00:59:41,570
Silex and you can just resolve the IP

00:59:39,320 --> 00:59:43,520
address it will point to a special IP

00:59:41,570 --> 00:59:46,160
address in Cuban 80s which when you

00:59:43,520 --> 00:59:48,470
connect to it it will route to any of

00:59:46,160 --> 00:59:50,930
these two pods which are first in the

00:59:48,470 --> 00:59:53,720
running state but also it matches up to

00:59:50,930 --> 00:59:56,750
the pods that it knows if I flip back to

00:59:53,720 --> 00:59:58,790
the load balancer example so you can see

00:59:56,750 --> 01:00:01,760
here it's got the selector so that's how

00:59:58,790 --> 01:00:03,800
it knows which pods to connect to so

01:00:01,760 --> 01:00:05,900
it's a dns name but day that's how you

01:00:03,800 --> 01:00:07,640
do service discovery basically I know

01:00:05,900 --> 01:00:12,020
that's not quite full service discovery

01:00:07,640 --> 01:00:13,280
with like full configuration but I think

01:00:12,020 --> 01:00:14,840
that some other applications and things

01:00:13,280 --> 01:00:16,520
out there which will do that for you so

01:00:14,840 --> 01:00:18,109
depending on what you're kind of looking

01:00:16,520 --> 01:00:19,100
to do I can have a more in-depth

01:00:18,109 --> 01:00:22,420
conversation with you about that

01:00:19,100 --> 01:00:22,420
afterwards if you okay thank you

01:00:25,570 --> 01:00:30,320
I'm just wondering how the different

01:00:28,640 --> 01:00:33,890
developers are working at the same

01:00:30,320 --> 01:00:37,940
project to cooperate up in that using

01:00:33,890 --> 01:00:39,800
docker containers in this way oh ok so

01:00:37,940 --> 01:00:42,140
if two developers working on the same

01:00:39,800 --> 01:00:43,340
projects what they do is they just do in

01:00:42,140 --> 01:00:45,470
the same non way they have a git

01:00:43,340 --> 01:00:48,140
repository feature requests merge into

01:00:45,470 --> 01:00:49,700
master typically you have some sort of

01:00:48,140 --> 01:00:51,680
CI server which does the builds with

01:00:49,700 --> 01:00:56,060
your containers so when you decide that

01:00:51,680 --> 01:00:57,500
a particular container when you decide

01:00:56,060 --> 01:01:00,620
that a particular better code is ready

01:00:57,500 --> 01:01:02,150
to be deployed you can choose to do you

01:01:00,620 --> 01:01:03,770
choose to deploy the code from a

01:01:02,150 --> 01:01:05,240
specific place there's nothing nothing

01:01:03,770 --> 01:01:08,020
particularly special about how you would

01:01:05,240 --> 01:01:09,890
work with but how do you get the

01:01:08,020 --> 01:01:11,900
modifications of other developers have

01:01:09,890 --> 01:01:14,930
done in the same time it's a kind of a

01:01:11,900 --> 01:01:19,160
merging process oh I mean no so it's not

01:01:14,930 --> 01:01:20,690
um if you do say a docker push to an

01:01:19,160 --> 01:01:24,500
image which already exists a container

01:01:20,690 --> 01:01:26,270
it would just overwrite it so you just

01:01:24,500 --> 01:01:28,910
work in the same way that you would with

01:01:26,270 --> 01:01:31,280
just a PHP application now so when you

01:01:28,910 --> 01:01:33,410
do a deploy you still hopefully build

01:01:31,280 --> 01:01:35,510
some sort of asset in your CI server and

01:01:33,410 --> 01:01:39,200
deploy that be that raw PHP call it code

01:01:35,510 --> 01:01:41,390
or an RPM so Dhaka files work exactly

01:01:39,200 --> 01:01:43,010
the same way so the artifact that you

01:01:41,390 --> 01:01:46,700
build rather than being like a set of

01:01:43,010 --> 01:01:49,400
files or a particular rpm are what you

01:01:46,700 --> 01:01:51,110
deploy to the server so you could

01:01:49,400 --> 01:01:52,550
actually do a docker build locally if

01:01:51,110 --> 01:01:55,130
you've made some changes for a specific

01:01:52,550 --> 01:01:56,450
version of your application also maybe

01:01:55,130 --> 01:01:58,070
get something working you want to test

01:01:56,450 --> 01:02:02,230
it you could do a docker build and run

01:01:58,070 --> 01:02:05,810
it that would also work thank you cool

01:02:02,230 --> 01:02:07,280
ok any more questions um yeah I'm just

01:02:05,810 --> 01:02:10,640
extending this gentleman's question

01:02:07,280 --> 01:02:12,710
about copying the code so is it a good

01:02:10,640 --> 01:02:15,410
practice to copy the whole code before

01:02:12,710 --> 01:02:17,480
every build or is it better to symlink

01:02:15,410 --> 01:02:21,530
it instead because it's still in the

01:02:17,480 --> 01:02:24,590
same rip our directory so when you do a

01:02:21,530 --> 01:02:26,300
talker build there is no previous like

01:02:24,590 --> 01:02:27,050
steak so you're building a new thing so

01:02:26,300 --> 01:02:28,760
it's not like you've got multiple

01:02:27,050 --> 01:02:30,860
versions of the same code inside the

01:02:28,760 --> 01:02:33,500
docker container you should be just

01:02:30,860 --> 01:02:35,870
copying in the latest version you only

01:02:33,500 --> 01:02:37,119
need a single version inside the docker

01:02:35,870 --> 01:02:41,829
container because

01:02:37,119 --> 01:02:43,420
you can use you see the label at the top

01:02:41,829 --> 01:02:45,249
there you can put a version on the end

01:02:43,420 --> 01:02:49,269
of the label and say this is version 1

01:02:45,249 --> 01:02:51,279
this is version 2 this is version 3 you

01:02:49,269 --> 01:02:53,230
do with like a colon so without that

01:02:51,279 --> 01:02:55,569
without the colon there at the Sri

01:02:53,230 --> 01:02:57,490
furring to the version called latest but

01:02:55,569 --> 01:03:01,029
you could equally build versions which

01:02:57,490 --> 01:03:04,420
are specific sender you send the

01:03:01,029 --> 01:03:06,789
versions so that means we build it

01:03:04,420 --> 01:03:09,759
locally and then push it so it

01:03:06,789 --> 01:03:11,950
automatically picks it up then yeah so

01:03:09,759 --> 01:03:14,680
yeah I'm if you were to release a new

01:03:11,950 --> 01:03:16,390
version of the container to Cuban 80s

01:03:14,680 --> 01:03:18,400
you would have to tell Cuban 80s to do

01:03:16,390 --> 01:03:20,740
something like a rolling update or

01:03:18,400 --> 01:03:26,710
deploy new replication controllers and

01:03:20,740 --> 01:03:28,930
change your service great thanks have

01:03:26,710 --> 01:03:31,180
you had any experience with DB

01:03:28,930 --> 01:03:34,749
replication cross containers or that the

01:03:31,180 --> 01:03:37,230
wrong tool for the job so I hate using

01:03:34,749 --> 01:03:40,630
replicate I hate using databases with

01:03:37,230 --> 01:03:43,569
data with docker I finally doesn't work

01:03:40,630 --> 01:03:47,380
very well mostly so why try to use is

01:03:43,569 --> 01:03:50,200
services which are pre-made which so for

01:03:47,380 --> 01:03:51,670
example Amazon's RDS service I have had

01:03:50,200 --> 01:03:53,849
a little bit of experience it kind of

01:03:51,670 --> 01:03:56,319
works but it's sometimes a bit flaky

01:03:53,849 --> 01:03:58,690
generally persistent storage with dr.

01:03:56,319 --> 01:04:00,279
containers doesn't whatever we want so

01:03:58,690 --> 01:04:05,980
try and use a service or someone else's

01:04:00,279 --> 01:04:09,450
made that's my advices okay I think I

01:04:05,980 --> 01:04:09,450

YouTube URL: https://www.youtube.com/watch?v=ACHiv5vuJuk


