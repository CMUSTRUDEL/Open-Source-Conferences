Title: PHP UK Conference 2016 - Gavin Davies - Comic book continuity and Git rebase
Publication date: 2016-03-22
Playlist: PHP UK Conference 2016
Description: 
	When helping companies improve their development practises, there are often conceptual sticking points - for example, rebase can be hard to understand and many people are wary of it. To help us better understand and communicate our workflows, I will illustrate Git concepts in the language of comic books, followed by a practical demonstration of the techniques. This session has something to offer all Git users - from newcomers trying to get their heads around it all, to veterans trying to communicate a workflow to their colleagues. It should certainly spark an interesting discussion!
Captions: 
	00:00:06,190 --> 00:00:10,389
i'm gavin davis i work for an agency

00:00:08,290 --> 00:00:13,090
called ratify someone's giving me a lace

00:00:10,389 --> 00:00:14,860
point ups foolish usually Nate I belay

00:00:13,090 --> 00:00:17,890
our founder comes and does these talks

00:00:14,860 --> 00:00:19,900
and he does you know really big sweeping

00:00:17,890 --> 00:00:21,880
thematic talks he's not here this year

00:00:19,900 --> 00:00:23,230
wasn't enough water for him to drink if

00:00:21,880 --> 00:00:25,780
you've ever seen him do a talk he really

00:00:23,230 --> 00:00:27,940
does so this is a very big platform for

00:00:25,780 --> 00:00:29,800
me a platform for me is usually how many

00:00:27,940 --> 00:00:31,570
people can I speak to and get cornered

00:00:29,800 --> 00:00:33,340
in the pub and talk about computers are

00:00:31,570 --> 00:00:35,620
which is why I'm not allowed to hang

00:00:33,340 --> 00:00:36,730
around with my wife's friends anymore so

00:00:35,620 --> 00:00:38,649
what I'm going to try to do is talk

00:00:36,730 --> 00:00:40,960
about a complex subject in a relatively

00:00:38,649 --> 00:00:42,730
simple way I want to give confidence to

00:00:40,960 --> 00:00:44,079
you if you're inexperienced and if your

00:00:42,730 --> 00:00:45,819
experience I want to give you

00:00:44,079 --> 00:00:47,109
communication tools so that the less

00:00:45,819 --> 00:00:48,969
experience of people on your team you

00:00:47,109 --> 00:00:51,339
can help to bring them along please save

00:00:48,969 --> 00:00:53,050
questions to the hint to the end I'm

00:00:51,339 --> 00:00:54,429
open to questions I'm a free speech guy

00:00:53,050 --> 00:00:56,440
I'm up for heckling or whatever but keep

00:00:54,429 --> 00:00:58,239
it to the end if you've got nothing bad

00:00:56,440 --> 00:00:59,649
to say gather the underscore you count

00:00:58,239 --> 00:01:03,190
to it I've got anything nice to say at

00:00:59,649 --> 00:01:05,500
ratify please my boss is Sir Steve sugar

00:01:03,190 --> 00:01:07,000
would get is get hard sometimes or is it

00:01:05,500 --> 00:01:08,560
hard working in a team with gear I

00:01:07,000 --> 00:01:10,120
certainly do the first few months i'm

00:01:08,560 --> 00:01:13,150
just using get i had to go to sleep with

00:01:10,120 --> 00:01:15,070
the lights on and i find it quite

00:01:13,150 --> 00:01:16,870
terrifying but people are very helpful

00:01:15,070 --> 00:01:19,300
don't say well gaff all you've got to

00:01:16,870 --> 00:01:22,180
understand is by directed acyclic graph

00:01:19,300 --> 00:01:24,100
theory pi 240 decimal places and how to

00:01:22,180 --> 00:01:26,490
 the universe in your mind and I was

00:01:24,100 --> 00:01:29,050
like well that doesn't particularly help

00:01:26,490 --> 00:01:30,280
they had all these crazy workflows and I

00:01:29,050 --> 00:01:32,080
could kind of see that there's a power

00:01:30,280 --> 00:01:34,900
and a flexibility in this that I haven't

00:01:32,080 --> 00:01:38,380
seen in svn or CBS or VCS we're very

00:01:34,900 --> 00:01:39,730
used before so I thought I really

00:01:38,380 --> 00:01:41,740
thought about I thought I'm thinking

00:01:39,730 --> 00:01:43,360
about the tools first I'm going to to

00:01:41,740 --> 00:01:45,310
problem i'm not going problem to tool

00:01:43,360 --> 00:01:47,710
and I think this is a common mistake

00:01:45,310 --> 00:01:49,060
that a lot of us make is that we we try

00:01:47,710 --> 00:01:51,990
to solve everything at the code level

00:01:49,060 --> 00:01:55,180
rather than taking a step back you know

00:01:51,990 --> 00:01:56,260
so what I always think is if you

00:01:55,180 --> 00:01:58,930
understand what you're trying to achieve

00:01:56,260 --> 00:02:01,030
on a conceptual level it's far easier to

00:01:58,930 --> 00:02:02,800
work out the implementation later where

00:02:01,030 --> 00:02:04,210
I think go and learn every single one of

00:02:02,800 --> 00:02:06,940
these little sharp tools that are in the

00:02:04,210 --> 00:02:08,979
get toolbox in great detail try to think

00:02:06,940 --> 00:02:12,159
what are we trying to achieve and work

00:02:08,979 --> 00:02:13,750
backwards from there so I'm not going to

00:02:12,159 --> 00:02:15,700
be talking about nuts and bolts and be

00:02:13,750 --> 00:02:17,620
talking mental model and test Barnes did

00:02:15,700 --> 00:02:19,630
a very detailed talk on VCS yesterday

00:02:17,620 --> 00:02:20,300
which I would commend to you but I'm

00:02:19,630 --> 00:02:22,490
coming at it from

00:02:20,300 --> 00:02:24,860
a very different angle and of course I'm

00:02:22,490 --> 00:02:28,310
going to put some caveats down posterium

00:02:24,860 --> 00:02:30,260
cover um rule 1 abstractions liek this

00:02:28,310 --> 00:02:31,580
metaphors that I use they will break

00:02:30,260 --> 00:02:34,010
down under a certain degree of scrutiny

00:02:31,580 --> 00:02:35,840
okay so if you're a top drawer get

00:02:34,010 --> 00:02:38,000
clever board you began well in this

00:02:35,840 --> 00:02:39,560
situation it won't exactly work because

00:02:38,000 --> 00:02:43,070
this is how we all speak when we get

00:02:39,560 --> 00:02:44,270
good at get I warned you about that so

00:02:43,070 --> 00:02:47,120
if you start speaking like that you know

00:02:44,270 --> 00:02:48,800
too much get forget it analogies only

00:02:47,120 --> 00:02:50,300
hold water up into a certain level of

00:02:48,800 --> 00:02:52,760
scrutiny in other words gal cannot be

00:02:50,300 --> 00:02:56,990
trusted ok so what I will tell you is

00:02:52,760 --> 00:02:58,430
true brother certain point of view it's

00:02:56,990 --> 00:03:00,380
a very poor Alec Guinness impression

00:02:58,430 --> 00:03:02,270
caveat number two there are many get

00:03:00,380 --> 00:03:03,860
workflows but this one is ours this is

00:03:02,270 --> 00:03:08,300
basically what we do at ratify we're a

00:03:03,860 --> 00:03:11,450
small distributed team with some fairly

00:03:08,300 --> 00:03:14,750
high power clients who expect a very

00:03:11,450 --> 00:03:16,640
high level of service from us and there

00:03:14,750 --> 00:03:19,460
are a lot of ways to do get there is no

00:03:16,640 --> 00:03:21,110
magic bullet or silver hammer I like to

00:03:19,460 --> 00:03:23,780
mix these metaphors it really annoys

00:03:21,110 --> 00:03:25,970
innate and this is what works for us a

00:03:23,780 --> 00:03:27,680
small experience and distributed team

00:03:25,970 --> 00:03:31,790
right that's enough posterior covering

00:03:27,680 --> 00:03:33,620
get terms have got baggage right let's

00:03:31,790 --> 00:03:35,540
take our get terms baggage see this

00:03:33,620 --> 00:03:37,880
symbolic act this is called a symbolic

00:03:35,540 --> 00:03:40,430
act place place it over there that saw

00:03:37,880 --> 00:03:42,680
get baggage let's talk general

00:03:40,430 --> 00:03:44,630
principles so let's say we have an

00:03:42,680 --> 00:03:46,970
artist called alex who writes a comic

00:03:44,630 --> 00:03:48,800
book in which ordinary high school

00:03:46,970 --> 00:03:50,000
student ralph whiskers is getting

00:03:48,800 --> 00:03:51,350
bullying the high schools literally the

00:03:50,000 --> 00:03:54,170
first name that came to mind when we

00:03:51,350 --> 00:03:56,239
were writing this running over into the

00:03:54,170 --> 00:03:59,900
lab to escape he knocks over chemicals

00:03:56,239 --> 00:04:01,760
and the chemicals mix Ralph inhales his

00:03:59,900 --> 00:04:04,670
skin turns into living stones so

00:04:01,760 --> 00:04:07,580
obviously the next logical step is to

00:04:04,670 --> 00:04:09,290
vow to fight crime so this gets

00:04:07,580 --> 00:04:11,510
published lets say by either a dark

00:04:09,290 --> 00:04:12,770
horse comics DC Marvel whoever only

00:04:11,510 --> 00:04:14,840
through dark horse in there just so you

00:04:12,770 --> 00:04:15,739
knew I didn't only no Marvel and DC just

00:04:14,840 --> 00:04:17,870
give yourself a little bit of

00:04:15,739 --> 00:04:19,549
credibility and at this point a cannon

00:04:17,870 --> 00:04:21,680
continuity has been established they

00:04:19,549 --> 00:04:24,050
published something so it's canonical it

00:04:21,680 --> 00:04:26,120
is it is what is generally accepted it

00:04:24,050 --> 00:04:28,340
is the real deal it is the continuum

00:04:26,120 --> 00:04:29,650
continuity is the unbroken and content

00:04:28,340 --> 00:04:32,259
consistent exists

00:04:29,650 --> 00:04:34,540
or operation of something over time it

00:04:32,259 --> 00:04:37,600
has to be self consistent okay for

00:04:34,540 --> 00:04:39,280
something to be a continuity so with

00:04:37,600 --> 00:04:41,259
this comic book being such a success as

00:04:39,280 --> 00:04:43,060
you can see by my amazing writing and

00:04:41,259 --> 00:04:44,979
Andrews artwork of course it's going to

00:04:43,060 --> 00:04:46,630
be a success so the comic book people

00:04:44,979 --> 00:04:49,000
they say well we want to we want more

00:04:46,630 --> 00:04:51,580
but like we do we work in parallel so

00:04:49,000 --> 00:04:53,259
they hire another artist Bryce and Alex

00:04:51,580 --> 00:04:55,600
Rock starts working for me were going to

00:04:53,259 --> 00:04:57,820
code name a two and Bryce on b1 so

00:04:55,600 --> 00:04:59,620
parallel stories now so Bryce gets to

00:04:57,820 --> 00:05:01,240
work an evil scientist is building a

00:04:59,620 --> 00:05:02,860
laser beam because scientists are evil

00:05:01,240 --> 00:05:05,560
cannot be trusted especially computer

00:05:02,860 --> 00:05:07,510
scientists we are the worst secondly

00:05:05,560 --> 00:05:11,050
inspired by kool-aid man rock service

00:05:07,510 --> 00:05:13,449
smashes through the wall and captures

00:05:11,050 --> 00:05:14,680
the evil scientist don't let any of my

00:05:13,449 --> 00:05:16,720
students get away with a joke like that

00:05:14,680 --> 00:05:19,600
but we're made of made of rock and 400

00:05:16,720 --> 00:05:21,250
pounds I expect you can Alex's second

00:05:19,600 --> 00:05:24,130
story being written in parallel rock

00:05:21,250 --> 00:05:27,039
savage spies a mugging in process

00:05:24,130 --> 00:05:28,990
apparently in Alex's continuity rocks

00:05:27,039 --> 00:05:31,479
been taking BJJ classes glutes are much

00:05:28,990 --> 00:05:34,150
nicer choke even superheroes need a

00:05:31,479 --> 00:05:35,919
ground game and then finally captures

00:05:34,150 --> 00:05:38,199
the mugger and carries him off to

00:05:35,919 --> 00:05:41,860
wherever superheroes carry people off to

00:05:38,199 --> 00:05:44,229
Newport South Wales I believe I'm from

00:05:41,860 --> 00:05:46,419
Cardiff so at this point we have no

00:05:44,229 --> 00:05:47,530
conflicts I've got laser pointer I don't

00:05:46,419 --> 00:05:50,530
need to do this you don't need to see my

00:05:47,530 --> 00:05:54,130
pits we've got a continuity which is

00:05:50,530 --> 00:05:55,599
forking and this is canon and these

00:05:54,130 --> 00:05:58,659
things are not these like their own

00:05:55,599 --> 00:06:01,360
continuities based on this continuity so

00:05:58,659 --> 00:06:03,280
b1 Bryce's first ever Rock savage

00:06:01,360 --> 00:06:06,460
blockbuster it's chosen for publishing

00:06:03,280 --> 00:06:08,740
cannon is therefore updated so there's

00:06:06,460 --> 00:06:12,580
cannon now and we have this parallel

00:06:08,740 --> 00:06:14,650
based off the former cannon it's not in

00:06:12,580 --> 00:06:18,099
conflict though so there we go published

00:06:14,650 --> 00:06:19,810
it's in one harmonious continuity a 3

00:06:18,099 --> 00:06:21,490
and B to have been published so

00:06:19,810 --> 00:06:22,840
everybody's happy everyone's making

00:06:21,490 --> 00:06:24,099
noodles and money actually they're not

00:06:22,840 --> 00:06:25,419
if you want to support comic book

00:06:24,099 --> 00:06:27,039
creators I can't remem the name of the

00:06:25,419 --> 00:06:28,780
charity but there's a charity for people

00:06:27,039 --> 00:06:30,250
who were comic book creators in the 60s

00:06:28,780 --> 00:06:32,380
and got stiffed if you google that

00:06:30,250 --> 00:06:34,419
you'll find a lot of the matching living

00:06:32,380 --> 00:06:36,430
relative poverty but anyway back back to

00:06:34,419 --> 00:06:37,840
back to the ultra retreat at the name of

00:06:36,430 --> 00:06:41,139
it later I tweeted a few weeks ago

00:06:37,840 --> 00:06:42,790
remember Alex's third story so they

00:06:41,139 --> 00:06:43,990
start out writing another

00:06:42,790 --> 00:06:46,450
pair of parallel stories in the back of

00:06:43,990 --> 00:06:48,040
that continuity so rock savage is saving

00:06:46,450 --> 00:06:49,750
a school bus from a werewolf is the

00:06:48,040 --> 00:06:52,480
natural predators it was at my school

00:06:49,750 --> 00:06:54,930
anyway silver bullets are old school so

00:06:52,480 --> 00:06:56,890
he draws back his hand to strike and

00:06:54,930 --> 00:06:58,270
obviously a lot of problems can be

00:06:56,890 --> 00:06:59,650
easily solved by violence that's what

00:06:58,270 --> 00:07:03,250
comic books taught me and I turned out

00:06:59,650 --> 00:07:06,370
fine thirdly character establishment no

00:07:03,250 --> 00:07:07,840
rocks a does not kill so I've

00:07:06,370 --> 00:07:10,090
mustn't play with my hair I have this

00:07:07,840 --> 00:07:11,490
microphone in my hair it's against the

00:07:10,090 --> 00:07:13,720
clock it's against the clock Karen

00:07:11,490 --> 00:07:16,120
second story that Bryce is working on

00:07:13,720 --> 00:07:17,860
this is in parallel to a three rock

00:07:16,120 --> 00:07:19,990
savage interrupts the kidnapping of the

00:07:17,860 --> 00:07:21,700
mayor's daughter and the kidnappers

00:07:19,990 --> 00:07:26,500
shoots rock savage with the bullets

00:07:21,700 --> 00:07:31,270
bounced off and rock savage kills is an

00:07:26,500 --> 00:07:32,470
understatement homie if you are going to

00:07:31,270 --> 00:07:34,720
throw a right cross make sure that

00:07:32,470 --> 00:07:36,190
shoulders on the chin but some oh dear

00:07:34,720 --> 00:07:38,530
well he's made of rock I suppose he can

00:07:36,190 --> 00:07:40,960
get away with it so this point we have a

00:07:38,530 --> 00:07:42,310
conflict in in these cannon in these

00:07:40,960 --> 00:07:44,440
continues with this continuity is fine

00:07:42,310 --> 00:07:45,970
but we got this one and this one that

00:07:44,440 --> 00:07:49,630
they can't really coexist because

00:07:45,970 --> 00:07:51,460
they're saying very different things so

00:07:49,630 --> 00:07:53,230
but they have this one their prices when

00:07:51,460 --> 00:07:55,540
they're like well you start sorry Alex's

00:07:53,230 --> 00:07:56,770
story a three they say well you started

00:07:55,540 --> 00:08:00,550
rock savage we're going to have this

00:07:56,770 --> 00:08:02,110
story be two is now in conflict now in

00:08:00,550 --> 00:08:04,900
the comic book will draw ways of light

00:08:02,110 --> 00:08:06,580
resolving historical conflicts there's

00:08:04,900 --> 00:08:07,840
ways of working character changes as

00:08:06,580 --> 00:08:09,880
what called a wreck on a retro

00:08:07,840 --> 00:08:11,140
retroactive continuity where you say all

00:08:09,880 --> 00:08:12,280
that never happened like classically

00:08:11,140 --> 00:08:14,380
Batman shot people in very early

00:08:12,280 --> 00:08:16,360
Batman's and that's like all know we

00:08:14,380 --> 00:08:17,710
don't talk about that much like certain

00:08:16,360 --> 00:08:21,430
aspects my past we just don't talk about

00:08:17,710 --> 00:08:23,020
it don't send my wife there are other

00:08:21,430 --> 00:08:24,610
ways of working couch changes for

00:08:23,020 --> 00:08:25,930
example often when the Fantastic Four

00:08:24,610 --> 00:08:29,230
defeat dr. doom it was actually a

00:08:25,930 --> 00:08:31,330
Doombot all along Achilles Balan but in

00:08:29,230 --> 00:08:34,840
this circumstance we want to work with

00:08:31,330 --> 00:08:38,349
this continuity so Bryce reworks and

00:08:34,840 --> 00:08:39,820
redraws the final panel whether I've

00:08:38,349 --> 00:08:42,849
call a bus route ensure customers I've

00:08:39,820 --> 00:08:46,420
seen him use that a lot so this is now

00:08:42,849 --> 00:08:48,460
harmonized with the continuity and we

00:08:46,420 --> 00:08:50,110
have a single neat continuity because

00:08:48,460 --> 00:08:51,100
the publishers happy to publish that

00:08:50,110 --> 00:08:52,390
because we takin all the horrible

00:08:51,100 --> 00:08:54,520
killing out because we've established

00:08:52,390 --> 00:08:55,430
that the character is not that kind of

00:08:54,520 --> 00:08:58,070
character

00:08:55,430 --> 00:09:04,339
so are you going to talk about get gov

00:08:58,070 --> 00:09:06,620
well if I must here's the get baggage

00:09:04,339 --> 00:09:08,180
right we're now picking it up dumping

00:09:06,620 --> 00:09:10,370
over there let's just say I'm holding it

00:09:08,180 --> 00:09:12,770
so there are parallels between software

00:09:10,370 --> 00:09:14,839
projects and comic books they can be

00:09:12,770 --> 00:09:16,520
short or long running some kind of books

00:09:14,839 --> 00:09:18,230
like Batman Superman spider-man they've

00:09:16,520 --> 00:09:19,940
been going for 50-plus years and they

00:09:18,230 --> 00:09:23,560
can exist in an enormous shared universe

00:09:19,940 --> 00:09:23,560
kind of like the open source marketplace

00:09:24,310 --> 00:09:28,100
canonicity in controlling output is very

00:09:26,540 --> 00:09:29,959
important you can have all sorts of

00:09:28,100 --> 00:09:31,520
forks of a repository which one is the

00:09:29,959 --> 00:09:33,290
real one which one's the one we actually

00:09:31,520 --> 00:09:35,240
want to consider to be canonical you

00:09:33,290 --> 00:09:37,250
know in the open source world you had

00:09:35,240 --> 00:09:38,839
all sorts of things like node and

00:09:37,250 --> 00:09:40,820
whatever that fork was called I can't

00:09:38,839 --> 00:09:41,959
bring to mind right now but there's all

00:09:40,820 --> 00:09:43,640
sorts of things it's up well which is

00:09:41,959 --> 00:09:46,339
the real deal and what are the

00:09:43,640 --> 00:09:48,080
differences and how do you know thirdly

00:09:46,339 --> 00:09:49,940
parallel developments very important

00:09:48,080 --> 00:09:52,130
like in software we're often working on

00:09:49,940 --> 00:09:53,660
different features in parallel there is

00:09:52,130 --> 00:09:56,360
a thing called mob programming but let's

00:09:53,660 --> 00:09:57,980
leave that to the side a lot of the time

00:09:56,360 --> 00:10:00,529
developers get assigned stories and they

00:09:57,980 --> 00:10:01,730
work on it individually or in pairs just

00:10:00,529 --> 00:10:03,770
like writers do on comic books

00:10:01,730 --> 00:10:05,690
especially with a popular character like

00:10:03,770 --> 00:10:07,250
Wolverine for example is usually four or

00:10:05,690 --> 00:10:10,970
five Wolverine stories in production at

00:10:07,250 --> 00:10:13,940
any one time you do get community

00:10:10,970 --> 00:10:15,950
contributions CM Punk became an elevated

00:10:13,940 --> 00:10:19,459
fanboy recently when he the former

00:10:15,950 --> 00:10:22,880
wrestler CM Punk published some stories

00:10:19,459 --> 00:10:24,740
about 44 marvel and you know sometimes

00:10:22,880 --> 00:10:26,630
the kind of fanfic does actually get

00:10:24,740 --> 00:10:29,060
brought in but a lot of the time the fan

00:10:26,630 --> 00:10:30,320
thick is non-canon it you know it takes

00:10:29,060 --> 00:10:31,520
it off in the direction the fan wants is

00:10:30,320 --> 00:10:33,560
to go rather than the direction that the

00:10:31,520 --> 00:10:34,880
creator wanted to go so that happens an

00:10:33,560 --> 00:10:36,470
open source it helps it happens in our

00:10:34,880 --> 00:10:39,910
projects as well sometimes branches of

00:10:36,470 --> 00:10:41,990
dead ends as well conflict resolution

00:10:39,910 --> 00:10:43,600
periodically a character's origin story

00:10:41,990 --> 00:10:46,070
as I mentioned before might be retold

00:10:43,600 --> 00:10:49,070
and he can change the canonical history

00:10:46,070 --> 00:10:50,959
this called retconning and just like

00:10:49,070 --> 00:10:53,000
comic books get basically allows you to

00:10:50,959 --> 00:10:54,680
create new history when people talk

00:10:53,000 --> 00:10:56,089
about rewriting history it's not exactly

00:10:54,680 --> 00:10:58,790
what's happening again it's sort of the

00:10:56,089 --> 00:11:00,079
creation of new history and I know this

00:10:58,790 --> 00:11:01,279
is something people struggle with and

00:11:00,079 --> 00:11:03,950
the genesis of this talk was me

00:11:01,279 --> 00:11:05,410
explaining to juniors what rebase was

00:11:03,950 --> 00:11:09,139
and why we were using it in our workflow

00:11:05,410 --> 00:11:10,519
and finally the

00:11:09,139 --> 00:11:12,769
on a parallel I want to look at is an

00:11:10,519 --> 00:11:14,119
isolation and integration cycle so they

00:11:12,769 --> 00:11:15,439
work Alex and Bryce were working on

00:11:14,119 --> 00:11:16,519
their comic books they could be in

00:11:15,439 --> 00:11:18,679
different countries in the world it

00:11:16,519 --> 00:11:19,999
doesn't matter many of us we were remote

00:11:18,679 --> 00:11:21,350
I work remote for rad if I you know

00:11:19,999 --> 00:11:23,509
they're based in the States and a lot of

00:11:21,350 --> 00:11:25,129
us based in the UK and Europe so a lot

00:11:23,509 --> 00:11:28,939
of those were a small team you know and

00:11:25,129 --> 00:11:30,559
so what happens with software as well is

00:11:28,939 --> 00:11:31,999
that we were isolated and then we have

00:11:30,559 --> 00:11:33,319
to integrate our work we have to make

00:11:31,999 --> 00:11:35,869
sure it works with what everybody else

00:11:33,319 --> 00:11:37,279
has done so those are some parallels and

00:11:35,869 --> 00:11:39,379
believe me I will work very hard to

00:11:37,279 --> 00:11:41,480
enforce a metaphor but as always I have

00:11:39,379 --> 00:11:44,089
caveated this so let's think of the

00:11:41,480 --> 00:11:46,480
comic now as a git repo so in publishing

00:11:44,089 --> 00:11:48,799
a one it was like establishing master

00:11:46,480 --> 00:11:50,269
master by the way is just to pointer to

00:11:48,799 --> 00:11:51,649
the branch that we generally say well

00:11:50,269 --> 00:11:53,359
this is the normal one that we normally

00:11:51,649 --> 00:11:55,579
work with master can be called anything

00:11:53,359 --> 00:11:57,049
it's the default branch but by default

00:11:55,579 --> 00:11:59,209
the default is called master if that

00:11:57,049 --> 00:12:00,919
makes any sense it's just a label it's

00:11:59,209 --> 00:12:03,319
not a bucket it's not anything magical

00:12:00,919 --> 00:12:05,230
it's a pointer and I'm thinking of

00:12:03,319 --> 00:12:07,790
master is it's like the received canon

00:12:05,230 --> 00:12:09,199
it's the thing that the developers are

00:12:07,790 --> 00:12:11,919
like yet we've put this out there this

00:12:09,199 --> 00:12:14,119
is what most of you will be working with

00:12:11,919 --> 00:12:15,350
when you get something like fanfic for

00:12:14,119 --> 00:12:17,059
example it can be based on something

00:12:15,350 --> 00:12:18,919
else it's non-canon it's not in the

00:12:17,059 --> 00:12:21,169
publishers repo so if you've got our

00:12:18,919 --> 00:12:23,809
project what's in a one at the moment a

00:12:21,169 --> 00:12:26,089
master is coming so when when they

00:12:23,809 --> 00:12:28,610
artists start doing there their stories

00:12:26,089 --> 00:12:31,790
in parallel they are based off master

00:12:28,610 --> 00:12:33,139
this is like feature branches so when

00:12:31,790 --> 00:12:35,419
we're working on features we often take

00:12:33,139 --> 00:12:37,119
our own branches even say that sharing a

00:12:35,419 --> 00:12:40,970
branch is like sharing a toothbrush

00:12:37,119 --> 00:12:42,499
pretty gross I actually use much worse

00:12:40,970 --> 00:12:46,669
metaphor than that if you catch me in

00:12:42,499 --> 00:12:48,889
the pub later but so we work in parallel

00:12:46,669 --> 00:12:50,389
in isolation with not real isolation but

00:12:48,889 --> 00:12:52,999
you know i'm not on warrens computer and

00:12:50,389 --> 00:12:55,489
he's not on mine because I don't need

00:12:52,999 --> 00:12:57,110
washes his hands quite frankly and get

00:12:55,489 --> 00:12:58,429
is distributed but we're not going to

00:12:57,110 --> 00:12:59,959
think about that now so let's just lay

00:12:58,429 --> 00:13:01,999
distributed aside we will come to that

00:12:59,959 --> 00:13:04,429
later so these are our branches that

00:13:01,999 --> 00:13:06,109
we're working on so they've both got

00:13:04,429 --> 00:13:07,999
something called head which is a point I

00:13:06,109 --> 00:13:09,319
think of a tape head ahead on the tape

00:13:07,999 --> 00:13:11,119
deck if any of you are old enough to

00:13:09,319 --> 00:13:13,100
remember this you're not I know but a

00:13:11,119 --> 00:13:15,319
cassette has got a little head on it

00:13:13,100 --> 00:13:18,829
that reads on the tape and that's what

00:13:15,319 --> 00:13:22,249
that is so we've got master and we've

00:13:18,829 --> 00:13:23,059
got a B 1 and a 2 and let's say that

00:13:22,249 --> 00:13:24,469
they've both come

00:13:23,059 --> 00:13:25,969
to the integration phase now they both

00:13:24,469 --> 00:13:28,129
submitted work this is kind of like what

00:13:25,969 --> 00:13:29,419
a pull request is and like sadie's

00:13:28,129 --> 00:13:31,099
methods do break down but a pull request

00:13:29,419 --> 00:13:33,409
is saying hey I here's some work I've

00:13:31,099 --> 00:13:35,539
done can you bring it in to your project

00:13:33,409 --> 00:13:37,459
can my work become part of your product

00:13:35,539 --> 00:13:39,769
basically so the publishing company

00:13:37,459 --> 00:13:41,569
merges be one they're happy with that

00:13:39,769 --> 00:13:44,419
and that's like you know merging be

00:13:41,569 --> 00:13:46,429
wanting to master and because there was

00:13:44,419 --> 00:13:48,079
a direct continuity there there's a

00:13:46,429 --> 00:13:51,109
direct link they were able to that

00:13:48,079 --> 00:13:53,479
master just moves that pointer so nice

00:13:51,109 --> 00:13:56,539
and simple in that case it doesn't have

00:13:53,479 --> 00:13:59,509
created nothing new it's good so a 2 is

00:13:56,539 --> 00:14:01,609
still based off a 1 because there aren't

00:13:59,509 --> 00:14:03,079
any conflicts again we could just move

00:14:01,609 --> 00:14:04,369
that pointer but I mean it's a little

00:14:03,079 --> 00:14:06,769
more complex that time because that was

00:14:04,369 --> 00:14:07,639
based off that and this is now in the

00:14:06,769 --> 00:14:09,709
middle but because there were no

00:14:07,639 --> 00:14:11,629
conflicts it was able to get smart

00:14:09,709 --> 00:14:13,429
enough to do a fast forward merge which

00:14:11,629 --> 00:14:15,559
basically means I'm going to just move

00:14:13,429 --> 00:14:17,449
this pointer again and put that on the

00:14:15,559 --> 00:14:19,729
end there I am fudging details a little

00:14:17,449 --> 00:14:21,409
I know if you're a real parent but this

00:14:19,729 --> 00:14:23,929
is for the benefit of those that you

00:14:21,409 --> 00:14:26,359
know trying to understand this stuff so

00:14:23,929 --> 00:14:29,629
again it was a success so again two

00:14:26,359 --> 00:14:32,959
branches in parallel ah this time we

00:14:29,629 --> 00:14:35,869
have the conflict these two panels so

00:14:32,959 --> 00:14:38,329
when Alex's work got merged and this was

00:14:35,869 --> 00:14:40,909
effectively rejected so that's still in

00:14:38,329 --> 00:14:43,399
the red state still not non-canon that's

00:14:40,909 --> 00:14:45,859
now canon so what Bryce then does is

00:14:43,399 --> 00:14:48,199
then sort of rebase is off master re

00:14:45,859 --> 00:14:52,969
base to base again it is no longer based

00:14:48,199 --> 00:14:55,489
on a 2 it is now based on a 3 so that's

00:14:52,969 --> 00:14:57,529
kind of what a rebase is and this is a

00:14:55,489 --> 00:14:59,389
metaphor that I've had some experts

00:14:57,529 --> 00:15:03,619
assess in getting across to people how

00:14:59,389 --> 00:15:06,439
to how to do this so it bracelet updates

00:15:03,619 --> 00:15:07,789
and says I've updated based on these

00:15:06,439 --> 00:15:09,469
changes so that could have been some

00:15:07,789 --> 00:15:11,149
kind of breaking API change it could

00:15:09,469 --> 00:15:12,979
have been two people working on the same

00:15:11,149 --> 00:15:14,839
file like Tess covered a lot of this

00:15:12,979 --> 00:15:17,029
kind of stuff yesterday of like certain

00:15:14,839 --> 00:15:19,009
circumstances where this can happen so

00:15:17,029 --> 00:15:20,269
the rebase is basically saying right

00:15:19,009 --> 00:15:22,339
I've taken an account of that I've

00:15:20,269 --> 00:15:24,739
updated my root my branch in my

00:15:22,339 --> 00:15:26,839
workspace and I've sort of tweaked my

00:15:24,739 --> 00:15:28,909
changes so that it's all happy and then

00:15:26,839 --> 00:15:30,679
back to the integration phase back to

00:15:28,909 --> 00:15:33,109
the publishing company pull request

00:15:30,679 --> 00:15:35,920
updated or raised again depending on how

00:15:33,109 --> 00:15:38,560
you like a role and there we go

00:15:35,920 --> 00:15:42,339
single neat resolved continuity in

00:15:38,560 --> 00:15:44,470
harmony nothing sticking out nothing all

00:15:42,339 --> 00:15:46,060
conflicts handled a lot of our job is

00:15:44,470 --> 00:15:48,880
conflict a resolution by the way whether

00:15:46,060 --> 00:15:50,470
that be in software or with people so

00:15:48,880 --> 00:15:51,550
here's a rough mapping especially if you

00:15:50,470 --> 00:15:53,980
have to work with me cuz I'm pretty

00:15:51,550 --> 00:15:57,430
unpleasant a repository it's like a

00:15:53,980 --> 00:15:59,560
comic book series a commit it's like an

00:15:57,430 --> 00:16:01,870
issue of the comic or it could be you

00:15:59,560 --> 00:16:04,060
know a branch maybe or a few commits

00:16:01,870 --> 00:16:07,899
raising a pull request is saying hey

00:16:04,060 --> 00:16:10,000
publisher here's my work master branch

00:16:07,899 --> 00:16:12,459
is like you canon continuity in many

00:16:10,000 --> 00:16:14,079
cases a lot of us a work of tags if

00:16:12,459 --> 00:16:16,209
we're using things as dependencies but

00:16:14,079 --> 00:16:17,769
if we're actively developing for

00:16:16,209 --> 00:16:19,180
something that often where a master or a

00:16:17,769 --> 00:16:21,519
branch called develop or something like

00:16:19,180 --> 00:16:25,120
that a feature branch it's almost like a

00:16:21,519 --> 00:16:27,010
draft being worked on a rebase is up man

00:16:25,120 --> 00:16:29,260
I should have elaborated on this a bit

00:16:27,010 --> 00:16:31,930
more but it's updating the continuity in

00:16:29,260 --> 00:16:34,240
your isolated workspace based on what's

00:16:31,930 --> 00:16:36,190
happened in the integration so based on

00:16:34,240 --> 00:16:37,959
what everyone else is done your basic

00:16:36,190 --> 00:16:39,910
you're going okay I'm going to now take

00:16:37,959 --> 00:16:41,740
that into account ivory based my talk

00:16:39,910 --> 00:16:43,269
off Tess's talk actually funnily enough

00:16:41,740 --> 00:16:45,070
because some of the things she said I've

00:16:43,269 --> 00:16:48,220
incorporated into my talk ivory based my

00:16:45,070 --> 00:16:51,190
talk conflict resolution changing your

00:16:48,220 --> 00:16:52,480
draft based on on updates continuity by

00:16:51,190 --> 00:16:53,980
the way this is on our website so

00:16:52,480 --> 00:16:56,470
fennels for any stunts on oh it's on a

00:16:53,980 --> 00:16:58,060
ratify io / blog update and pull

00:16:56,470 --> 00:16:59,640
requests like sending a new draft an

00:16:58,060 --> 00:17:02,019
updated version these are the new assets

00:16:59,640 --> 00:17:03,730
merging a pull request it's the

00:17:02,019 --> 00:17:07,230
publisher saying hey yeah okay this is

00:17:03,730 --> 00:17:09,819
now canon we're going to publish this so

00:17:07,230 --> 00:17:13,030
I've just described in fairly abstract

00:17:09,819 --> 00:17:14,790
terms how rad if I use git and now I'm

00:17:13,030 --> 00:17:17,530
going to get a little bit more specific

00:17:14,790 --> 00:17:20,669
so our client here that's not a

00:17:17,530 --> 00:17:22,720
photograph that's something we drew

00:17:20,669 --> 00:17:25,030
request features how many you've got

00:17:22,720 --> 00:17:28,240
clients that request features bring all

00:17:25,030 --> 00:17:31,059
of you and then mark who's our

00:17:28,240 --> 00:17:33,100
strategist and often sort of sits in

00:17:31,059 --> 00:17:35,860
that pocket there will create stories

00:17:33,100 --> 00:17:37,480
this is a gross simplification but for

00:17:35,860 --> 00:17:39,160
the sake of vitamin A which point

00:17:37,480 --> 00:17:42,100
they'll be divvied out between the devs

00:17:39,160 --> 00:17:44,620
I've shown Warren and myself here then

00:17:42,100 --> 00:17:46,570
we have the integration test phase we

00:17:44,620 --> 00:17:48,160
automate a lot of our stuff Jenkins is

00:17:46,570 --> 00:17:50,290
an automation server it's

00:17:48,160 --> 00:17:52,030
a basic of glorified cron job really but

00:17:50,290 --> 00:17:53,800
it's it's much more than that it allows

00:17:52,030 --> 00:17:56,230
you to do all sorts of automation stuff

00:17:53,800 --> 00:17:58,380
Travis is another one code ship there

00:17:56,230 --> 00:18:01,480
are there are lots of these these tools

00:17:58,380 --> 00:18:04,540
and we think of it as the extra player

00:18:01,480 --> 00:18:06,370
on our team so once Warren and I've done

00:18:04,540 --> 00:18:08,080
our work Travis is checking well does

00:18:06,370 --> 00:18:11,860
this integrate does this integrate will

00:18:08,080 --> 00:18:14,620
they both integrate and once Jenkins has

00:18:11,860 --> 00:18:17,080
said that's okay we have an awful lot of

00:18:14,620 --> 00:18:19,000
posts on our blog about this but the

00:18:17,080 --> 00:18:21,550
other talks i do like DevOps talks and

00:18:19,000 --> 00:18:24,990
we stand up immutable demo nodes for

00:18:21,550 --> 00:18:28,060
each branch so jenkins stands those up

00:18:24,990 --> 00:18:30,010
mark what and the client will give it an

00:18:28,060 --> 00:18:31,990
acceptance test and in parallel to that

00:18:30,010 --> 00:18:34,270
Nate will give the sign off because he's

00:18:31,990 --> 00:18:36,550
the clever a sausage in the pan so to

00:18:34,270 --> 00:18:38,530
speak so that's a good way for me to

00:18:36,550 --> 00:18:40,600
learn actually is the feedback I get

00:18:38,530 --> 00:18:43,000
from get from nate is really really

00:18:40,600 --> 00:18:44,380
helpful I also get feedback off Warren

00:18:43,000 --> 00:18:45,850
and anyone else that we're working with

00:18:44,380 --> 00:18:49,030
at the time this is just a small example

00:18:45,850 --> 00:18:52,540
but that's a huge part of our work

00:18:49,030 --> 00:18:53,800
throat is that code review and if you're

00:18:52,540 --> 00:18:54,880
if you're just starting to get code

00:18:53,800 --> 00:18:56,830
reviews and you haven't really happened

00:18:54,880 --> 00:18:58,150
before try dad's separate yourself from

00:18:56,830 --> 00:19:00,700
your work a little bit because it can be

00:18:58,150 --> 00:19:02,500
a bit hurtful but first we like you know

00:19:00,700 --> 00:19:05,590
you feel that sense of identity in your

00:19:02,500 --> 00:19:07,540
work just try to try to be humble and

00:19:05,590 --> 00:19:09,010
learn from it it's easier said than done

00:19:07,540 --> 00:19:11,860
because sometimes love comes back I'm so

00:19:09,010 --> 00:19:15,220
like not a very pedantic right but you

00:19:11,860 --> 00:19:17,890
know there we go and then the deploy

00:19:15,220 --> 00:19:19,240
phase if it gets merged it automatically

00:19:17,890 --> 00:19:21,550
gets deployed to staging and then we

00:19:19,240 --> 00:19:22,810
have a production deploy kind of thing

00:19:21,550 --> 00:19:25,350
as well so that's like a simplified

00:19:22,810 --> 00:19:27,820
version of the workflow we generally use

00:19:25,350 --> 00:19:31,360
for each project our github is our

00:19:27,820 --> 00:19:33,640
canonical repository get herb flush

00:19:31,360 --> 00:19:34,900
ratify and most of our projects for our

00:19:33,640 --> 00:19:36,850
clients obvious you're closed source but

00:19:34,900 --> 00:19:38,440
our policy is open source by default so

00:19:36,850 --> 00:19:41,110
if we write little tool or anything will

00:19:38,440 --> 00:19:42,700
write it open source by default we've

00:19:41,110 --> 00:19:44,980
got some blog posts coming up and why we

00:19:42,700 --> 00:19:46,210
do that and fairly soon but that ties

00:19:44,980 --> 00:19:49,150
into what a lot of people have actually

00:19:46,210 --> 00:19:50,560
been saying about doing open sources

00:19:49,150 --> 00:19:52,360
what Billy was saying before actually in

00:19:50,560 --> 00:19:54,880
Billy's talk she was talking about how

00:19:52,360 --> 00:19:56,410
they open sourced a lot of things and it

00:19:54,880 --> 00:19:59,140
made them better developers and it

00:19:56,410 --> 00:20:01,390
really does working in the open it's a

00:19:59,140 --> 00:20:02,050
harsh world and you know as iron

00:20:01,390 --> 00:20:04,470
sharpens iron

00:20:02,050 --> 00:20:06,850
so one person sharpens another you know

00:20:04,470 --> 00:20:08,950
but it's good to work in public because

00:20:06,850 --> 00:20:10,930
you get that feedback even if it can be

00:20:08,950 --> 00:20:12,400
hard to take sometimes it will make you

00:20:10,930 --> 00:20:15,610
a better developer if you allow it to do

00:20:12,400 --> 00:20:17,320
so so we've been through two cycles of

00:20:15,610 --> 00:20:19,090
this little story now we're going to go

00:20:17,320 --> 00:20:21,310
through a final cycle this is the last

00:20:19,090 --> 00:20:22,720
bits to stay with me if you flag in if

00:20:21,310 --> 00:20:24,670
you want to throw something at me I'm

00:20:22,720 --> 00:20:26,350
quite agile I'll probably dodged it so

00:20:24,670 --> 00:20:27,400
we'll find out but don't throw a the

00:20:26,350 --> 00:20:30,970
computer because I can't afford to

00:20:27,400 --> 00:20:33,220
replace that so we've got a github repo

00:20:30,970 --> 00:20:35,290
with three commits on it these little

00:20:33,220 --> 00:20:37,420
numbers don't get hung up on those a lot

00:20:35,290 --> 00:20:39,220
when I ran through this with my wife and

00:20:37,420 --> 00:20:40,540
she's an information architect and she

00:20:39,220 --> 00:20:41,500
was looking for patterns in the numbers

00:20:40,540 --> 00:20:44,650
because I think you know that's what her

00:20:41,500 --> 00:20:46,630
job is and and that and she missed the

00:20:44,650 --> 00:20:51,460
next three slides cuz you gonna number

00:20:46,630 --> 00:20:53,230
those are char ish kind of thingies what

00:20:51,460 --> 00:20:55,030
they are is 40 character identifiers of

00:20:53,230 --> 00:20:57,400
which I've shown the first three which

00:20:55,030 --> 00:20:59,320
are essentially like a hash of a commit

00:20:57,400 --> 00:21:01,060
so instead of identifying commits one

00:20:59,320 --> 00:21:03,100
two three four five like subversion will

00:21:01,060 --> 00:21:05,380
do get acknowledges that you're working

00:21:03,100 --> 00:21:08,370
in parallel a lot at the time and it

00:21:05,380 --> 00:21:10,600
just has these computer-generated labels

00:21:08,370 --> 00:21:11,650
so don't get hung up on those there's no

00:21:10,600 --> 00:21:13,420
pattern they don't particularly mean

00:21:11,650 --> 00:21:16,210
anything they're just unique identifiers

00:21:13,420 --> 00:21:17,650
by which you can not only identify but

00:21:16,210 --> 00:21:21,370
also verify a commit because they're

00:21:17,650 --> 00:21:22,930
kind of checks on me so master as we

00:21:21,370 --> 00:21:26,590
said it's a label pointing to the latest

00:21:22,930 --> 00:21:28,660
commit in the directed acyclic graph

00:21:26,590 --> 00:21:30,720
which is a kind of a policy way of

00:21:28,660 --> 00:21:33,010
saying a chain that can go in and out

00:21:30,720 --> 00:21:34,690
there's nothing particularly magical

00:21:33,010 --> 00:21:37,030
like I've said it's the convention the

00:21:34,690 --> 00:21:39,940
branches master sorry from laboring

00:21:37,030 --> 00:21:44,560
points a little I tend to do that we

00:21:39,940 --> 00:21:47,590
have a tag here which is version 1.0 and

00:21:44,560 --> 00:21:49,120
that's pointing at the same commit as

00:21:47,590 --> 00:21:52,060
masters at the moment version 1 and

00:21:49,120 --> 00:21:54,580
master they're the same we tag and

00:21:52,060 --> 00:21:56,020
release often we reason we do that is so

00:21:54,580 --> 00:21:58,210
that if something goes wrong in a

00:21:56,020 --> 00:21:59,770
release it's a small thing you know Big

00:21:58,210 --> 00:22:01,090
Bang releases are quite terrifying

00:21:59,770 --> 00:22:02,710
because you like the oil it could be one

00:22:01,090 --> 00:22:05,410
of a million things that's gone wrong so

00:22:02,710 --> 00:22:07,030
we release little and often also we

00:22:05,410 --> 00:22:08,950
don't ever change shared history so once

00:22:07,030 --> 00:22:10,450
the tags been dropped in we don't rebase

00:22:08,950 --> 00:22:11,950
it we don't force bush we don't do any

00:22:10,450 --> 00:22:13,690
of these crazy things in fact we never

00:22:11,950 --> 00:22:15,779
do any of those things to master and I'd

00:22:13,690 --> 00:22:18,429
recommend if you're using git

00:22:15,779 --> 00:22:21,159
put protection on master so people can't

00:22:18,429 --> 00:22:24,220
force push to it what force pushes doing

00:22:21,159 --> 00:22:26,409
is basically saying yeah fact no matter

00:22:24,220 --> 00:22:27,940
what and you can you can overwrite week

00:22:26,409 --> 00:22:29,980
I've right commits but you can screw up

00:22:27,940 --> 00:22:31,240
the history and it's recoverable so

00:22:29,980 --> 00:22:32,740
recoverable but it's a bit of a

00:22:31,240 --> 00:22:35,679
nightmare so don't do that put force

00:22:32,740 --> 00:22:38,799
protection on master Jenkins oversees

00:22:35,679 --> 00:22:41,259
the repo on every commit it does a build

00:22:38,799 --> 00:22:43,779
we often use base boxes customized vague

00:22:41,259 --> 00:22:45,129
virtual machine-based boxes or dock and

00:22:43,779 --> 00:22:47,200
containers whatever we build those

00:22:45,129 --> 00:22:49,299
nightly another recommendation Billy

00:22:47,200 --> 00:22:52,990
made was to regularly update whatever

00:22:49,299 --> 00:22:56,259
base you're using so we use ec2 images

00:22:52,990 --> 00:22:57,759
we update them nightly the base boxes we

00:22:56,259 --> 00:23:00,159
have a lot of posts on our blog about

00:22:57,759 --> 00:23:03,340
how we use a mutable infrastructure but

00:23:00,159 --> 00:23:06,129
Jenkins Jenkins job builds on every

00:23:03,340 --> 00:23:09,549
commit and then the client comes along

00:23:06,129 --> 00:23:12,730
feature requests mark triage is as the

00:23:09,549 --> 00:23:15,970
issue tracker gets Warren start it rings

00:23:12,730 --> 00:23:17,860
me gets me out there it's me started so

00:23:15,970 --> 00:23:19,509
here's my check out now Mike that's my

00:23:17,860 --> 00:23:23,499
Twitter handle if you want to sling any

00:23:19,509 --> 00:23:26,230
abuse my way that's ratifies if you want

00:23:23,499 --> 00:23:27,970
to have any compliments so mine is a

00:23:26,230 --> 00:23:30,610
complete copy notice I've got the

00:23:27,970 --> 00:23:32,049
complete history of the github one the

00:23:30,610 --> 00:23:33,429
ones on github the only real difference

00:23:32,049 --> 00:23:34,720
if you wanna get really technical is

00:23:33,429 --> 00:23:37,330
that it's a bear check out so it hasn't

00:23:34,720 --> 00:23:40,149
got a workspace that's that's all that

00:23:37,330 --> 00:23:42,909
is I've got that whole history and I've

00:23:40,149 --> 00:23:44,529
got a workspace so I start work on the

00:23:42,909 --> 00:23:46,149
story and yes I am arrogant enough to

00:23:44,529 --> 00:23:48,850
feature myself from my own presentation

00:23:46,149 --> 00:23:50,559
right where you know in it so I take or

00:23:48,850 --> 00:23:52,029
update a clone of that repository so

00:23:50,559 --> 00:23:54,309
let's say that's a brand new clone it

00:23:52,029 --> 00:23:56,019
could equally be an update because diff

00:23:54,309 --> 00:23:58,539
get is distributed I've got the whole

00:23:56,019 --> 00:24:01,360
history so this is unlike something like

00:23:58,539 --> 00:24:02,529
subversion or whatever where well last

00:24:01,360 --> 00:24:04,659
time I used versions about four or five

00:24:02,529 --> 00:24:06,100
years ago and it's all done up against

00:24:04,659 --> 00:24:08,169
the server and the server needs to be

00:24:06,100 --> 00:24:10,570
running I can work even if github goes

00:24:08,169 --> 00:24:12,460
down I can keep working because I've got

00:24:10,570 --> 00:24:14,590
my local I can keep committing and keep

00:24:12,460 --> 00:24:17,529
updating things I can't talk to that if

00:24:14,590 --> 00:24:20,169
it's down but I can keep working so

00:24:17,529 --> 00:24:21,820
that's how a dvc has distributed version

00:24:20,169 --> 00:24:23,610
control system differs is that you have

00:24:21,820 --> 00:24:26,110
a whole copy of the thing locally and

00:24:23,610 --> 00:24:27,730
you have this isolation phase in this

00:24:26,110 --> 00:24:29,470
integration phase that I've been talking

00:24:27,730 --> 00:24:31,870
about so Jenkins no

00:24:29,470 --> 00:24:35,830
nothing about my clone that's just on my

00:24:31,870 --> 00:24:38,890
on my macbook Warren does the same thing

00:24:35,830 --> 00:24:41,169
so he updates his clone or you know does

00:24:38,890 --> 00:24:42,789
get fetch get Paul or he get clone if he

00:24:41,169 --> 00:24:44,470
hasn't got it already again totally

00:24:42,789 --> 00:24:45,760
separate to mine we're not sharing a

00:24:44,470 --> 00:24:49,120
toothbrush or anything even more

00:24:45,760 --> 00:24:50,440
revolting so because I'm notorious for

00:24:49,120 --> 00:24:52,510
cherry picking the easiest stories that

00:24:50,440 --> 00:24:55,090
I can I take story a let's assume it's

00:24:52,510 --> 00:24:57,100
the easiest and the first thing I do so

00:24:55,090 --> 00:24:59,260
I create a branch they notice that

00:24:57,100 --> 00:25:02,080
nothing's changed in the repo sighs it

00:24:59,260 --> 00:25:04,419
was just a pointer same tied and commits

00:25:02,080 --> 00:25:07,299
master Warren does the same so in his

00:25:04,419 --> 00:25:10,450
he's got a story be ratified github

00:25:07,299 --> 00:25:13,419
doesn't know anything about this so I

00:25:10,450 --> 00:25:14,890
make it commits and that gets one of

00:25:13,419 --> 00:25:15,970
these randomly sort of but not randomly

00:25:14,890 --> 00:25:18,789
generate mean it programmatically

00:25:15,970 --> 00:25:21,400
generated hashes cherishes and it moves

00:25:18,789 --> 00:25:22,360
the pointer of the current branch to be

00:25:21,400 --> 00:25:24,010
the current commit so when you make a

00:25:22,360 --> 00:25:27,159
commit and github it moves the pointer

00:25:24,010 --> 00:25:31,000
the current branch in git git hub github

00:25:27,159 --> 00:25:34,780
is a software that uses get it's not get

00:25:31,000 --> 00:25:37,240
itself Warren makes a commit in his

00:25:34,780 --> 00:25:39,460
story be branch so like I've said that

00:25:37,240 --> 00:25:42,730
not only creates commit moves moves the

00:25:39,460 --> 00:25:44,500
label so now what we want to know is can

00:25:42,730 --> 00:25:47,380
we integrate our changes in comic book

00:25:44,500 --> 00:25:49,390
terms if we both push our stories is the

00:25:47,380 --> 00:25:52,240
continuity in harmony or have we done

00:25:49,390 --> 00:25:54,220
messed up so Warren pushes his branch to

00:25:52,240 --> 00:25:56,950
origin as always it's faster than me

00:25:54,220 --> 00:25:58,090
he's a lot brighter than me everyone I

00:25:56,950 --> 00:26:01,840
work with brighter than me it's hard

00:25:58,090 --> 00:26:04,690
work so there he goes story be he's

00:26:01,840 --> 00:26:06,640
pushed it up he's pushed it to write if

00:26:04,690 --> 00:26:08,350
I get hub which is usually called origin

00:26:06,640 --> 00:26:09,850
if you see the word origin and get it's

00:26:08,350 --> 00:26:12,460
usually where your code originated from

00:26:09,850 --> 00:26:15,460
its again just a label that github users

00:26:12,460 --> 00:26:17,770
to say the the origin of this repository

00:26:15,460 --> 00:26:20,200
is over here it's again nothing magical

00:26:17,770 --> 00:26:22,200
and he will raise the pr put a pull

00:26:20,200 --> 00:26:24,309
request saying can i merge this stuff

00:26:22,200 --> 00:26:25,890
github yesterday all perhaps in the day

00:26:24,309 --> 00:26:28,059
before it's just allowed templates for

00:26:25,890 --> 00:26:29,980
Kampala quests this is something i

00:26:28,059 --> 00:26:31,510
recommend that all of you look at we've

00:26:29,980 --> 00:26:34,750
been using a bookmarklet that i wrote

00:26:31,510 --> 00:26:36,549
for a couple of years with which allows

00:26:34,750 --> 00:26:37,870
us to have a certain format of a pull

00:26:36,549 --> 00:26:40,310
request and automatically links to our

00:26:37,870 --> 00:26:42,080
demo nodes and things like that

00:26:40,310 --> 00:26:43,430
and github of just done a kind of

00:26:42,080 --> 00:26:45,380
template thing that means that might not

00:26:43,430 --> 00:26:46,940
be necessary anymore Nate's also got

00:26:45,380 --> 00:26:49,370
some software which we've open source

00:26:46,940 --> 00:26:50,750
which basically validated your commit

00:26:49,370 --> 00:26:53,150
message made sure I had a test script

00:26:50,750 --> 00:26:55,970
made it sure it had ad added unit tests

00:26:53,150 --> 00:26:59,840
made sure it all this kind of stuff and

00:26:55,970 --> 00:27:01,430
it was a certain format so there's two

00:26:59,840 --> 00:27:03,230
blog posts on our plot our blog

00:27:01,430 --> 00:27:06,140
enforcing your pull request workflow and

00:27:03,230 --> 00:27:07,700
mine perfect pull requests ago I think

00:27:06,140 --> 00:27:11,960
github probably owes money for stealing

00:27:07,700 --> 00:27:14,300
our ideas but suffice to say the pull

00:27:11,960 --> 00:27:16,310
request is like it's a central place for

00:27:14,300 --> 00:27:17,570
all the information about this change

00:27:16,310 --> 00:27:20,480
that warrants trying to make it saying

00:27:17,570 --> 00:27:22,070
he says what change did I make how do

00:27:20,480 --> 00:27:23,270
you test this manually because as well

00:27:22,070 --> 00:27:26,420
as unit s obvious you want to test it

00:27:23,270 --> 00:27:29,720
manually what ticket is it linked to and

00:27:26,420 --> 00:27:31,700
various things like that so this

00:27:29,720 --> 00:27:35,090
triggers Jenkins to say first of all can

00:27:31,700 --> 00:27:36,620
this be merged will this go on to that

00:27:35,090 --> 00:27:39,650
basically can I bolt that on to that

00:27:36,620 --> 00:27:40,910
quite happily will actually get up tells

00:27:39,650 --> 00:27:43,550
you that put Jenkins checks it as well

00:27:40,910 --> 00:27:45,920
it also Jenkins we run a bunch of unit

00:27:43,550 --> 00:27:47,240
tests static analysis out of scope of

00:27:45,920 --> 00:27:51,440
this talk but basically loads of stuff

00:27:47,240 --> 00:27:53,150
and then it spawns a cluster so again

00:27:51,440 --> 00:27:55,610
see our blog for immutable demo notes

00:27:53,150 --> 00:27:57,560
for what we do it done so then at that

00:27:55,610 --> 00:27:58,970
point we've got a demo environment mark

00:27:57,560 --> 00:28:01,100
can test what warrants done if he's

00:27:58,970 --> 00:28:03,320
happy at dates the ticket status in our

00:28:01,100 --> 00:28:05,360
issue tracker and then they reviews and

00:28:03,320 --> 00:28:08,000
if he's happy to merge he merges and

00:28:05,360 --> 00:28:10,450
that moves the pointer so now we've got

00:28:08,000 --> 00:28:14,330
situation where Warren's integrated

00:28:10,450 --> 00:28:18,650
story be I haven't got story be and my

00:28:14,330 --> 00:28:20,000
master is still here so this isn't as

00:28:18,650 --> 00:28:22,250
much of a problem as it might look to

00:28:20,000 --> 00:28:24,370
you if you're from kind of a non

00:28:22,250 --> 00:28:26,660
distributed version control background

00:28:24,370 --> 00:28:28,910
we don't really find that we get many

00:28:26,660 --> 00:28:31,970
problems resulting from this at all and

00:28:28,910 --> 00:28:37,760
hopefully it'll become clear why so once

00:28:31,970 --> 00:28:40,250
that's yeah so once it's been mostly

00:28:37,760 --> 00:28:41,720
master Jenkins deploys it to staging so

00:28:40,250 --> 00:28:43,610
the client can now sit and then we take

00:28:41,720 --> 00:28:46,280
away that label that labels got no real

00:28:43,610 --> 00:28:47,570
purpose anymore we delete that you might

00:28:46,280 --> 00:28:49,310
notice if you merge and pull requests

00:28:47,570 --> 00:28:51,410
and github you get a little delete this

00:28:49,310 --> 00:28:52,400
branch yeah always click that as you

00:28:51,410 --> 00:28:53,059
know unless you think you're going to

00:28:52,400 --> 00:28:54,320
pick up

00:28:53,059 --> 00:28:55,999
work on that branch again you can always

00:28:54,320 --> 00:28:58,220
recreate branch branches are cheap and

00:28:55,999 --> 00:29:00,230
you can see why because they're just my

00:28:58,220 --> 00:29:02,240
friend Owen explains this is just a

00:29:00,230 --> 00:29:06,049
post-it note on a floppy disk he's got a

00:29:02,240 --> 00:29:07,820
really nice metaphor for this and I very

00:29:06,049 --> 00:29:11,090
graciously haven't stolen it and I've

00:29:07,820 --> 00:29:15,019
credited him okay so at this point I

00:29:11,090 --> 00:29:17,720
push my code and we can see we've got a

00:29:15,019 --> 00:29:20,090
problem it won't integrate it's gone

00:29:17,720 --> 00:29:24,499
kind of orange or whatever so story a

00:29:20,090 --> 00:29:26,210
with charge ba2 based on 5e for it's not

00:29:24,499 --> 00:29:27,320
based on the current master so what

00:29:26,210 --> 00:29:28,669
could have happened to cause this well

00:29:27,320 --> 00:29:31,490
Warren and I could have edited the same

00:29:28,669 --> 00:29:34,070
code github get can normally figure that

00:29:31,490 --> 00:29:37,100
out but not always Warren could have

00:29:34,070 --> 00:29:38,629
changed an API that I rely upon so that

00:29:37,100 --> 00:29:40,700
my the signature of the code that i

00:29:38,629 --> 00:29:44,389
right which is perfectly valid against

00:29:40,700 --> 00:29:46,669
this is not valid against this so that

00:29:44,389 --> 00:29:50,629
could he could have made a change to an

00:29:46,669 --> 00:29:52,580
API right so Jenkins points out this

00:29:50,629 --> 00:29:55,820
problem which makes me hate his smug

00:29:52,580 --> 00:29:57,799
moustachy face all obsequious mannerisms

00:29:55,820 --> 00:29:59,600
on the outside and burn in resentment

00:29:57,799 --> 00:30:04,879
within he looks at me like I'm just some

00:29:59,600 --> 00:30:07,190
gauche peasant told you so I got to fix

00:30:04,879 --> 00:30:08,929
up my gubbins right so like I've said

00:30:07,190 --> 00:30:11,960
the price we pay for parallel ism is

00:30:08,929 --> 00:30:14,929
some form of synchronization phase so

00:30:11,960 --> 00:30:16,759
what I do is I do a git fetch Oh get

00:30:14,929 --> 00:30:20,149
Paul or whatever I want to do I pull

00:30:16,759 --> 00:30:21,529
down a copy of the recent changes i get

00:30:20,149 --> 00:30:23,690
all the recent changes because i'm in my

00:30:21,529 --> 00:30:25,460
branch you know i can do a git fetch and

00:30:23,690 --> 00:30:26,720
then i can do get check out master i'm

00:30:25,460 --> 00:30:28,429
not going to get too technical on

00:30:26,720 --> 00:30:29,690
exactly what i do i want people to

00:30:28,429 --> 00:30:34,129
understand why i do it rather than

00:30:29,690 --> 00:30:35,480
exactly what I do and I'm my commit is

00:30:34,129 --> 00:30:37,369
still based on this so I'm going to move

00:30:35,480 --> 00:30:39,649
move it i'm going to rebase off master

00:30:37,369 --> 00:30:43,369
and that's all that happens but did you

00:30:39,649 --> 00:30:45,830
notice that changes reason being is

00:30:43,369 --> 00:30:48,950
going to have a different different

00:30:45,830 --> 00:30:51,230
Delta a different diff if you like so

00:30:48,950 --> 00:30:53,720
get will give it a new commitment number

00:30:51,230 --> 00:30:55,940
so that commits up there I've still got

00:30:53,720 --> 00:30:57,169
it but it's hidden away and gets raft

00:30:55,940 --> 00:30:59,240
log and after a couple of weeks it will

00:30:57,169 --> 00:31:02,210
get garbage collected so it doesn't

00:30:59,240 --> 00:31:03,590
really throw anything away until after a

00:31:02,210 --> 00:31:05,240
couple of weeks when it does so if you

00:31:03,590 --> 00:31:06,419
do screw some of this stuff up don't be

00:31:05,240 --> 00:31:08,850
too worried you can

00:31:06,419 --> 00:31:13,409
cover a lot of it no again Warren's

00:31:08,850 --> 00:31:15,779
check out completely unaffected so what

00:31:13,409 --> 00:31:17,970
I do then is I do a force push so I'm

00:31:15,779 --> 00:31:21,330
pushing to that branch and i'm doing a

00:31:17,970 --> 00:31:23,159
false push because I've changed I've

00:31:21,330 --> 00:31:25,289
added new history okay so I've gotten

00:31:23,159 --> 00:31:28,259
rid of the existing history whereby I

00:31:25,289 --> 00:31:30,509
had commit ba2 and I've pushed up a 32

00:31:28,259 --> 00:31:32,190
and I've done a false bush like i said

00:31:30,509 --> 00:31:34,080
before i recommend prevent Falls push to

00:31:32,190 --> 00:31:35,460
master this is another reason we don't

00:31:34,080 --> 00:31:39,779
share branches because we do use false

00:31:35,460 --> 00:31:41,279
bushes sometimes there are times we do

00:31:39,779 --> 00:31:44,100
share branch but I will not not going to

00:31:41,279 --> 00:31:46,950
that here so i push the story jenkins

00:31:44,100 --> 00:31:49,559
passes it marks happy with it it meets

00:31:46,950 --> 00:31:52,109
the clients requirements um which is

00:31:49,559 --> 00:31:54,600
unusual for work that I've done Nathan

00:31:52,109 --> 00:31:57,450
reviews it and it looks sane so he

00:31:54,600 --> 00:32:00,419
merges it which moves the master pointer

00:31:57,450 --> 00:32:03,269
Jenkins deploys it to staging we can

00:32:00,419 --> 00:32:05,129
delete the story story a tag and the

00:32:03,269 --> 00:32:08,009
next final thing we do drop a tag on it

00:32:05,129 --> 00:32:09,629
and Jenkins will then deploy that to

00:32:08,009 --> 00:32:12,149
production so that's basically how

00:32:09,629 --> 00:32:13,619
ratify operates i'll git workflow i did

00:32:12,149 --> 00:32:15,419
mention we will sometimes use a share

00:32:13,619 --> 00:32:17,399
branch and we may sometimes have a big

00:32:15,419 --> 00:32:19,739
feature that we do have to drop in a big

00:32:17,399 --> 00:32:21,869
release we try to do things like feature

00:32:19,739 --> 00:32:23,669
toggles so we release continuous as

00:32:21,869 --> 00:32:26,340
often as we can and just have the code

00:32:23,669 --> 00:32:27,840
switched off and we try to release

00:32:26,340 --> 00:32:29,789
little and often but sometimes there is

00:32:27,840 --> 00:32:32,220
just a big change like I don't know

00:32:29,789 --> 00:32:34,200
you've added Redis or you've added this

00:32:32,220 --> 00:32:35,999
all better and it's got to come out all

00:32:34,200 --> 00:32:37,320
in one if that's the case we have the

00:32:35,999 --> 00:32:39,389
feature branch and it operates exactly

00:32:37,320 --> 00:32:41,190
as a second staging environment then and

00:32:39,389 --> 00:32:44,070
we have the same workflow but instead of

00:32:41,190 --> 00:32:45,899
master we use the we use the the feature

00:32:44,070 --> 00:32:48,029
Brown so I workflows kind of fractal in

00:32:45,899 --> 00:32:49,350
that way if you had a feature balance

00:32:48,029 --> 00:32:51,779
off a feature branch god forbid then

00:32:49,350 --> 00:32:53,190
we'd be in trouble but it would still

00:32:51,779 --> 00:32:57,330
work you know this this way of working

00:32:53,190 --> 00:32:59,399
would still work okay so why does this

00:32:57,330 --> 00:33:00,629
work for us you know there's plenty of

00:32:59,399 --> 00:33:02,039
others work so there's things like get

00:33:00,629 --> 00:33:03,720
flow and this was this was a feature

00:33:02,039 --> 00:33:04,769
branch workflow slightly modified those

00:33:03,720 --> 00:33:06,869
things like get flow which is really

00:33:04,769 --> 00:33:07,739
really good work flow as well but this

00:33:06,869 --> 00:33:10,679
works for us we're a very small

00:33:07,739 --> 00:33:12,419
distributed inexperienced team we sort

00:33:10,679 --> 00:33:14,849
of have all been doing this for a long

00:33:12,419 --> 00:33:17,070
time now and we have a lot of automation

00:33:14,849 --> 00:33:19,980
support which does a lot of our checking

00:33:17,070 --> 00:33:22,650
for us we do continuous deploy

00:33:19,980 --> 00:33:24,990
you know we're very quality focused we

00:33:22,650 --> 00:33:26,429
want to make sure that we review

00:33:24,990 --> 00:33:28,020
everything that's why we use the pull

00:33:26,429 --> 00:33:29,400
request workflow that you know we all

00:33:28,020 --> 00:33:30,960
know what's going into the product so if

00:33:29,400 --> 00:33:33,030
I've got to fix on warrens work he's got

00:33:30,960 --> 00:33:34,950
to fix some of my work if I get you know

00:33:33,030 --> 00:33:37,080
run over by a shark or whatever's likely

00:33:34,950 --> 00:33:38,370
to happen to me this afternoon but

00:33:37,080 --> 00:33:39,809
someone else can pick it up it's good

00:33:38,370 --> 00:33:41,280
for learning and development because we

00:33:39,809 --> 00:33:43,500
get that feedback we get those code

00:33:41,280 --> 00:33:45,750
reviews and we get this linear looking

00:33:43,500 --> 00:33:47,970
continuity what's important to me about

00:33:45,750 --> 00:33:49,919
this it's not just to being picky and

00:33:47,970 --> 00:33:52,350
anal thing i don't think i think what i

00:33:49,919 --> 00:33:53,730
like about linear continuity is there

00:33:52,350 --> 00:33:55,710
are no broken commits in our history

00:33:53,730 --> 00:33:57,450
what that means if i've got a problem

00:33:55,710 --> 00:33:58,919
i'm trying to find git bisect and get

00:33:57,450 --> 00:34:00,960
bisect basically goes back in time

00:33:58,919 --> 00:34:02,460
halfway halfway halfway halfway halfway

00:34:00,960 --> 00:34:03,990
until it finds something right so it

00:34:02,460 --> 00:34:05,400
does a binary chop on your history if

00:34:03,990 --> 00:34:07,530
you've got a broken commit in your

00:34:05,400 --> 00:34:10,409
history you can't just plug git bisect

00:34:07,530 --> 00:34:12,090
into a unit test necessarily and you

00:34:10,409 --> 00:34:13,590
might get false positives so that's a

00:34:12,090 --> 00:34:15,869
very good reason for having a clean

00:34:13,590 --> 00:34:17,550
history for quick troubleshooting there

00:34:15,869 --> 00:34:20,669
are many axes of troubleshooting and

00:34:17,550 --> 00:34:22,080
history is one axis you can go down you

00:34:20,669 --> 00:34:23,550
could go down the axis of your error

00:34:22,080 --> 00:34:25,169
logs you could go down the axis of

00:34:23,550 --> 00:34:26,540
looking at the code you could go down

00:34:25,169 --> 00:34:28,770
the access to text testing yourself

00:34:26,540 --> 00:34:31,200
history it's one that I tend to go down

00:34:28,770 --> 00:34:32,909
when I've tried the other ones like when

00:34:31,200 --> 00:34:34,290
did this come in why might it not work

00:34:32,909 --> 00:34:36,419
for you you might you might consider it

00:34:34,290 --> 00:34:39,240
too complex but hopefully you can take

00:34:36,419 --> 00:34:40,770
something away from okay well ratify

00:34:39,240 --> 00:34:43,350
guys they do it this way and this is why

00:34:40,770 --> 00:34:45,000
and I feel like I understand what X Y or

00:34:43,350 --> 00:34:46,139
Z is now on I didn't before hopefully

00:34:45,000 --> 00:34:48,179
you can take something away even if you

00:34:46,139 --> 00:34:51,419
think this is overblown you might have a

00:34:48,179 --> 00:34:53,639
large team this might not be a good fit

00:34:51,419 --> 00:34:55,770
for you for other reasons you might not

00:34:53,639 --> 00:34:58,260
have you know the experience or

00:34:55,770 --> 00:35:00,720
confidence we'd get to do this kind of

00:34:58,260 --> 00:35:01,890
stuff but obviously anyone can get that

00:35:00,720 --> 00:35:04,020
experience anyone can get that

00:35:01,890 --> 00:35:05,700
confidence just takes time you might

00:35:04,020 --> 00:35:07,230
have long-lasting branches maintain

00:35:05,700 --> 00:35:08,850
multiple parallel versions of your

00:35:07,230 --> 00:35:10,530
product in which case some would argue

00:35:08,850 --> 00:35:12,359
you can still you can use this workflow

00:35:10,530 --> 00:35:14,520
but it might not be the best fit for you

00:35:12,359 --> 00:35:16,500
or you might lack automation I wouldn't

00:35:14,520 --> 00:35:17,970
I wouldn't attempt anything without

00:35:16,500 --> 00:35:19,800
something automatically running my test

00:35:17,970 --> 00:35:21,420
for me I cannot be trusted as I've

00:35:19,800 --> 00:35:24,480
established to remember to do all this

00:35:21,420 --> 00:35:27,450
stuff in there basically your mileage

00:35:24,480 --> 00:35:29,130
may vary so this informs our work in

00:35:27,450 --> 00:35:29,990
that we craft Arkham it's quite

00:35:29,130 --> 00:35:33,140
carefully

00:35:29,990 --> 00:35:35,360
we are quite intentional about you know

00:35:33,140 --> 00:35:36,920
my my commits look horrible until I

00:35:35,360 --> 00:35:37,940
squash them all together and push them

00:35:36,920 --> 00:35:39,740
up there's another thing I'm not going

00:35:37,940 --> 00:35:41,900
to cover but basically I push up a

00:35:39,740 --> 00:35:44,030
single atomic commit / feature where

00:35:41,900 --> 00:35:46,550
possible unless there are logical steps

00:35:44,030 --> 00:35:48,860
that I can break it down into which make

00:35:46,550 --> 00:35:51,980
sense in the history and make things

00:35:48,860 --> 00:35:53,420
more clear so it's like anything you do

00:35:51,980 --> 00:35:54,830
we get is communicating to your

00:35:53,420 --> 00:35:56,690
co-workers it is one axis of

00:35:54,830 --> 00:35:58,010
documentation along with your unit tests

00:35:56,690 --> 00:36:00,170
along with your documentation

00:35:58,010 --> 00:36:02,240
documentation it's another axis of

00:36:00,170 --> 00:36:03,680
communication is what does the history

00:36:02,240 --> 00:36:05,860
look like so being intentional about

00:36:03,680 --> 00:36:08,119
that I don't feel as a waste of effort

00:36:05,860 --> 00:36:09,950
we write our test scripts with our pull

00:36:08,119 --> 00:36:13,310
requests which I go into on the blog

00:36:09,950 --> 00:36:15,770
which are manual test scripts in lieu of

00:36:13,310 --> 00:36:17,930
a dedicated QA we all test each other's

00:36:15,770 --> 00:36:19,670
work this means we feel the products we

00:36:17,930 --> 00:36:21,740
feel performance problems you know we

00:36:19,670 --> 00:36:24,200
feel it as developers and we're more

00:36:21,740 --> 00:36:26,330
inclined to fix it so I think put in a

00:36:24,200 --> 00:36:30,290
small amount of QA stress on developers

00:36:26,330 --> 00:36:32,180
is not a bad idea and also we believe

00:36:30,290 --> 00:36:33,860
big believers in automation but the more

00:36:32,180 --> 00:36:35,510
we've used like get in this branch merge

00:36:33,860 --> 00:36:36,980
workflow the more we've been like yeah

00:36:35,510 --> 00:36:39,619
how much this can we automate how much

00:36:36,980 --> 00:36:42,859
can Jenkins take off our plate and the

00:36:39,619 --> 00:36:44,540
answer is quite a lot and I'm just I'm

00:36:42,859 --> 00:36:46,280
just wrapping up now and then we'll have

00:36:44,540 --> 00:36:48,500
five minutes for everyone to kick my

00:36:46,280 --> 00:36:50,869
head of the price we pay for parallel

00:36:48,500 --> 00:36:52,670
ISM is having an integration phase so if

00:36:50,869 --> 00:36:54,109
you want parallel ISM in any kind of way

00:36:52,670 --> 00:36:55,730
if you want to two people three people

00:36:54,109 --> 00:36:57,290
four people five people working together

00:36:55,730 --> 00:36:58,790
you need to have some kind of phase

00:36:57,290 --> 00:37:00,890
where they integrate where they come

00:36:58,790 --> 00:37:03,560
together which is why communication is

00:37:00,890 --> 00:37:05,470
so vital it all steps okay so we do a we

00:37:03,560 --> 00:37:07,790
often pair up for programming and stuff

00:37:05,470 --> 00:37:09,200
even when working on our own branches

00:37:07,790 --> 00:37:12,109
were often pair program remotely and

00:37:09,200 --> 00:37:15,920
things like that to lower the pain of

00:37:12,109 --> 00:37:17,180
integration and like Tesla so you at all

00:37:15,920 --> 00:37:19,730
yesterday there's a lot you can do to

00:37:17,180 --> 00:37:21,470
make integration less painful with the

00:37:19,730 --> 00:37:23,270
way you work by writing clean code by

00:37:21,470 --> 00:37:27,290
making sure that what you do is very

00:37:23,270 --> 00:37:28,640
clear and communicates well so what I'm

00:37:27,290 --> 00:37:30,350
trying to say is when you've got a

00:37:28,640 --> 00:37:33,080
weakness or a difficulty you can make it

00:37:30,350 --> 00:37:34,369
into a strength a lot of the time a lot

00:37:33,080 --> 00:37:36,380
of people feel that gets distributed

00:37:34,369 --> 00:37:38,840
nature as a weakness I would argue that

00:37:36,380 --> 00:37:40,670
we've we have it as a strength you know

00:37:38,840 --> 00:37:42,290
and I can see why it's distributed it

00:37:40,670 --> 00:37:44,400
was made by a file system developers you

00:37:42,290 --> 00:37:47,050
know

00:37:44,400 --> 00:37:48,700
so I'm just coming back to where I

00:37:47,050 --> 00:37:50,200
started if you understand what you're

00:37:48,700 --> 00:37:52,000
trying to achieve on a conceptual level

00:37:50,200 --> 00:37:54,100
it's easier to figure out the

00:37:52,000 --> 00:37:56,020
implementation and it'll stop you from

00:37:54,100 --> 00:37:58,690
going down too many tool driven blind

00:37:56,020 --> 00:38:00,610
alleys it's never about the tools guys

00:37:58,690 --> 00:38:01,870
it's never about the tools it's about

00:38:00,610 --> 00:38:03,670
what are you trying to achieve what do

00:38:01,870 --> 00:38:05,920
your customers want what kind of teams

00:38:03,670 --> 00:38:09,610
you want to be the tools are a means to

00:38:05,920 --> 00:38:11,890
that not the other way around so you

00:38:09,610 --> 00:38:13,660
might do things differently from us but

00:38:11,890 --> 00:38:15,430
hopefully this talks improved your

00:38:13,660 --> 00:38:17,050
ability if someone goes on what's

00:38:15,430 --> 00:38:19,120
rebates you can sort of like bladder

00:38:17,050 --> 00:38:20,530
something about comic book continuity

00:38:19,120 --> 00:38:23,080
and retroactive continuity and things

00:38:20,530 --> 00:38:25,090
like that if this talk didn't make any

00:38:23,080 --> 00:38:27,190
sense to you at all if you didn't get it

00:38:25,090 --> 00:38:28,390
it doesn't mean you're dumb it doesn't

00:38:27,190 --> 00:38:29,950
mean you do you know it doesn't mean you

00:38:28,390 --> 00:38:31,240
slow it just means that maybe the style

00:38:29,950 --> 00:38:33,370
of teaching I've used isn't compatible

00:38:31,240 --> 00:38:35,770
with your learning style you know and

00:38:33,370 --> 00:38:37,630
that's true a lot of the time everyone

00:38:35,770 --> 00:38:40,780
learns differently if you're struggling

00:38:37,630 --> 00:38:43,330
you can read it online you can this is

00:38:40,780 --> 00:38:45,490
our blog ratified io / blog but there's

00:38:43,330 --> 00:38:46,900
also Tessa's talk from yesterday which

00:38:45,490 --> 00:38:49,750
she goes through a lot more nuts and

00:38:46,900 --> 00:38:51,340
bolts and practicalities then my sort of

00:38:49,750 --> 00:38:53,980
like hands-off airy-fairy approach and

00:38:51,340 --> 00:38:57,130
then there's this talk from Linux com

00:38:53,980 --> 00:39:00,220
for IU 2013 where they explain it using

00:38:57,130 --> 00:39:01,740
these kind of a daunting and you can see

00:39:00,220 --> 00:39:05,080
they've got the pull request of the

00:39:01,740 --> 00:39:07,450
notes the post-it notes sort of stuck in

00:39:05,080 --> 00:39:09,580
to the commits and this is a very very

00:39:07,450 --> 00:39:11,470
good sort of metaphor for it as well

00:39:09,580 --> 00:39:13,180
it's really well done it's worth seeking

00:39:11,470 --> 00:39:15,580
out on youtube if you really want to get

00:39:13,180 --> 00:39:18,160
into get then otherwise there are plenty

00:39:15,580 --> 00:39:20,950
of very good talks Scott if anyone's a

00:39:18,160 --> 00:39:24,010
complete get beginner the best talk is

00:39:20,950 --> 00:39:27,460
Scott sure cones introduction to get CH

00:39:24,010 --> 00:39:31,210
a CH 0 n I think he's one of the guys

00:39:27,460 --> 00:39:32,890
who really does know it and he presents

00:39:31,210 --> 00:39:35,770
it very well it's very easy to follow

00:39:32,890 --> 00:39:37,660
it's how I stopped wetting the bed with

00:39:35,770 --> 00:39:41,410
get basic in basically learn to really

00:39:37,660 --> 00:39:44,020
not fear it so that's me Gavin at

00:39:41,410 --> 00:39:45,280
ratified I oh we're hiring for a

00:39:44,020 --> 00:39:46,990
designer and we're interested in

00:39:45,280 --> 00:39:48,640
speaking to dance as well so you know if

00:39:46,990 --> 00:39:50,860
you're interested get in touch any

00:39:48,640 --> 00:39:53,410
praise that you've got please tweet at

00:39:50,860 --> 00:39:56,280
ratified the i/o so just out ratify any

00:39:53,410 --> 00:40:00,600
criticism at gaff d underscore UK

00:39:56,280 --> 00:40:08,640
do we have any questions stunned silence

00:40:00,600 --> 00:40:11,700
and a broken the light I am a question

00:40:08,640 --> 00:40:14,730
about absolute implementation or get how

00:40:11,700 --> 00:40:16,380
to get rid of that ugly merge message

00:40:14,730 --> 00:40:19,320
complete message once you to keep pool

00:40:16,380 --> 00:40:21,630
from low from remote to your local so

00:40:19,320 --> 00:40:25,620
once you put up seeing your local branch

00:40:21,630 --> 00:40:28,440
to branch you will keep you in sir

00:40:25,620 --> 00:40:31,710
merged blah blah blah something which it

00:40:28,440 --> 00:40:33,690
has a main defense on the history okay

00:40:31,710 --> 00:40:36,180
so can't hear you very clearly but

00:40:33,690 --> 00:40:37,740
you're asking if you look through a git

00:40:36,180 --> 00:40:40,410
log and you've got merge commits and

00:40:37,740 --> 00:40:42,600
okay so when you have a pull request up

00:40:40,410 --> 00:40:44,520
to get one of the things that it does is

00:40:42,600 --> 00:40:48,120
it creates a merge commit when it merges

00:40:44,520 --> 00:40:49,560
that pull request in so you Kiki ignore

00:40:48,120 --> 00:40:51,210
those in might get history to be quite

00:40:49,560 --> 00:40:54,870
honest but that's a that's a no wait

00:40:51,210 --> 00:40:57,060
actually avoid that happened what if it

00:40:54,870 --> 00:40:58,260
happens yeah because I don't think I'm

00:40:57,060 --> 00:41:00,120
understanding the question so I'm sorry

00:40:58,260 --> 00:41:03,330
because once you sing your local to the

00:41:00,120 --> 00:41:07,680
remote and then we do a key pull command

00:41:03,330 --> 00:41:10,020
and then the key will merge the change

00:41:07,680 --> 00:41:13,770
your changes to the remote yeah and then

00:41:10,020 --> 00:41:15,840
we insert message to call keep merge

00:41:13,770 --> 00:41:17,580
commit blah blah blah which is stand

00:41:15,840 --> 00:41:20,430
them as you cannot change you cannot

00:41:17,580 --> 00:41:22,350
edit it yeah so once you look at by in a

00:41:20,430 --> 00:41:25,020
bit pocket look at the history but your

00:41:22,350 --> 00:41:27,270
team what did they commit yesterday you

00:41:25,020 --> 00:41:29,850
will first often found those messages

00:41:27,270 --> 00:41:32,550
log in to be Tim those actual commits

00:41:29,850 --> 00:41:34,770
which made the community of credit quiet

00:41:32,550 --> 00:41:36,540
for the ugly secondary don't measure

00:41:34,770 --> 00:41:38,310
doesn't make sense it didn't say what

00:41:36,540 --> 00:41:41,090
that person actually do in this message

00:41:38,310 --> 00:41:43,710
right just a commit yeah all merge I'm

00:41:41,090 --> 00:41:45,840
not quite sure what the question is I'm

00:41:43,710 --> 00:41:48,080
sorry I don't quite follow sorry about

00:41:45,840 --> 00:41:48,080
of them

00:41:57,910 --> 00:42:02,780
okay so but a kid repays we are called

00:42:00,980 --> 00:42:04,850
if it'll get better cause the data loss

00:42:02,780 --> 00:42:06,680
because if you're not doing fast for

00:42:04,850 --> 00:42:09,230
what you doin step by step so you have

00:42:06,680 --> 00:42:11,330
to resolve your freak step by step

00:42:09,230 --> 00:42:13,070
all the way to the top to the head

00:42:11,330 --> 00:42:15,860
there's a lot of things you can do with

00:42:13,070 --> 00:42:17,750
rebase the reason I always work in a

00:42:15,860 --> 00:42:19,640
branch and I never touch master directly

00:42:17,750 --> 00:42:21,260
is for this reason that the only time

00:42:19,640 --> 00:42:24,790
anything ever comes into master is via

00:42:21,260 --> 00:42:27,260
pull request so I never get this problem

00:42:24,790 --> 00:42:29,420
it's not really you know going to cause

00:42:27,260 --> 00:42:31,100
huge issues but our history is always in

00:42:29,420 --> 00:42:32,360
sync because masters never touched by

00:42:31,100 --> 00:42:34,300
anyone directly we would never rebase

00:42:32,360 --> 00:42:37,850
our master we never falls push on master

00:42:34,300 --> 00:42:39,950
but yes as you've said if you do get

00:42:37,850 --> 00:42:41,750
poor minus minus rebase it'll rebase

00:42:39,950 --> 00:42:46,400
whatever work you've done on the remotes

00:42:41,750 --> 00:42:48,200
version of your current branch but yeah

00:42:46,400 --> 00:42:50,150
I don't want to get too far into the

00:42:48,200 --> 00:42:52,490
nitty-gritty of gear I'm happy to talk

00:42:50,150 --> 00:42:53,990
to you guys about it afterwards but if

00:42:52,490 --> 00:42:58,940
there's any more general questions that

00:42:53,990 --> 00:43:01,220
of you you mentioned about automated

00:42:58,940 --> 00:43:03,650
testing with regards to get so what sort

00:43:01,220 --> 00:43:06,350
of things would you do automatically

00:43:03,650 --> 00:43:08,390
okay so we do most of our testings on

00:43:06,350 --> 00:43:10,760
the PHP JavaScript what a Java whatever

00:43:08,390 --> 00:43:12,980
we're using level but in terms of get we

00:43:10,760 --> 00:43:14,720
test can this be merged that's what

00:43:12,980 --> 00:43:16,640
Jenkins will tell us and we also say

00:43:14,720 --> 00:43:19,010
what would this commit look like if it

00:43:16,640 --> 00:43:20,300
was in master effectively so as well as

00:43:19,010 --> 00:43:22,430
testing the pull request into wherever

00:43:20,300 --> 00:43:24,890
it's going as it is we're also testing

00:43:22,430 --> 00:43:26,840
it too what what would happen what would

00:43:24,890 --> 00:43:28,580
the result of this be I think Travis

00:43:26,840 --> 00:43:30,350
does this basically when you do

00:43:28,580 --> 00:43:31,850
something on Travis it's like the

00:43:30,350 --> 00:43:35,720
committee in the branch as it is now and

00:43:31,850 --> 00:43:37,190
as if it was merged so it says does it

00:43:35,720 --> 00:43:38,660
create any problems as it is and will it

00:43:37,190 --> 00:43:41,230
create any problems if it's integrated

00:43:38,660 --> 00:43:41,230
basically

00:43:45,410 --> 00:43:49,530
you said that your current workflow

00:43:47,670 --> 00:43:50,940
works for small teams like yourself it

00:43:49,530 --> 00:43:52,500
doesn't work for larger team is how

00:43:50,940 --> 00:43:54,599
would you define large and small how

00:43:52,500 --> 00:43:56,190
kind of big does a team get until this

00:43:54,599 --> 00:43:58,710
becomes unsuitable how long's a piece of

00:43:56,190 --> 00:44:00,180
string large is always n plus 1 wherever

00:43:58,710 --> 00:44:03,359
n is the number of deaths are currently

00:44:00,180 --> 00:44:05,790
in the company i don't know i think this

00:44:03,359 --> 00:44:07,890
workflow can work for larger larger

00:44:05,790 --> 00:44:09,390
companies but like I say it's just I'm

00:44:07,890 --> 00:44:11,339
just basically caveat in it by saying

00:44:09,390 --> 00:44:13,369
there is no one-size-fits-all every

00:44:11,339 --> 00:44:16,680
organization has different policies

00:44:13,369 --> 00:44:19,619
personalities all this kind of stuff but

00:44:16,680 --> 00:44:22,770
for I've said the largest organization

00:44:19,619 --> 00:44:26,060
i've worked it was 100 dives and we kind

00:44:22,770 --> 00:44:26,060
of got away with this kind of workflow

00:44:29,390 --> 00:44:42,920
yeah for sure hi next door thank you is

00:44:36,869 --> 00:44:46,079
it just one person sat in there no okay

00:44:42,920 --> 00:44:54,530
there we go well you've only been a very

00:44:46,079 --> 00:44:57,300
gracious audience yeah and you wanted to

00:44:54,530 --> 00:45:00,900
just do it for visioning and things

00:44:57,300 --> 00:45:02,970
would you still make a branch just to

00:45:00,900 --> 00:45:04,530
yourself I absolutely do do that I've

00:45:02,970 --> 00:45:06,690
done some one man band projects in the

00:45:04,530 --> 00:45:08,310
last five years and I've always done

00:45:06,690 --> 00:45:10,170
that reason being i can always get

00:45:08,310 --> 00:45:11,579
straight back to master because it might

00:45:10,170 --> 00:45:13,410
be that i'm working on multiple features

00:45:11,579 --> 00:45:15,329
and giving the client here's test

00:45:13,410 --> 00:45:17,310
version a here's test version B I can

00:45:15,329 --> 00:45:19,109
get straight back to master I know where

00:45:17,310 --> 00:45:20,430
I am also if anyone else joins the

00:45:19,109 --> 00:45:22,740
project that workflow is already in

00:45:20,430 --> 00:45:24,569
place they can they can just bolt in so

00:45:22,740 --> 00:45:29,450
I think it scales down just as well as

00:45:24,569 --> 00:45:29,450
it scales up for me certainly

00:45:32,349 --> 00:45:35,529
ok cool I think we've got a bit of a

00:45:34,210 --> 00:45:38,640
break now but if we could give another

00:45:35,529 --> 00:45:38,640

YouTube URL: https://www.youtube.com/watch?v=BzITHlQa_VQ


