Title: PHP UK Conference 2016 - Stephan HochdÃ¶rfer - From Vagrant to Production
Publication date: 2016-03-16
Playlist: PHP UK Conference 2016
Description: 
	You heard all these great stories of people using tools like Vagrant, Puppet, Composer and Phing. Each of these tools can massively improve your development workflow. But how to combine them to get the best out of it? This session will guide you through the process of setting up the toolchain to build the "perfect development stack"(tm).
Captions: 
	00:00:04,950 --> 00:00:10,059
so hi I'm Stefan this weird letter my

00:00:08,830 --> 00:00:12,519
last name is a clear indicator that i'm

00:00:10,059 --> 00:00:16,209
from germany correctly pronounce my last

00:00:12,519 --> 00:00:19,570
name is hoof data which is music to my

00:00:16,209 --> 00:00:21,010
ears however there's no need for you to

00:00:19,570 --> 00:00:23,650
try to pronounce that it's okay if you

00:00:21,010 --> 00:00:25,030
call me Stefan it's even better if you

00:00:23,650 --> 00:00:29,110
just call me Steve so I'm just giving

00:00:25,030 --> 00:00:30,460
you options turns out I do a lot of

00:00:29,110 --> 00:00:32,529
public speaking over the last couple of

00:00:30,460 --> 00:00:35,579
years if I don't do that I run my own

00:00:32,529 --> 00:00:38,950
company the company is called bit expert

00:00:35,579 --> 00:00:41,470
we are a technology company and located

00:00:38,950 --> 00:00:43,570
in Mannheim Germany my current role with

00:00:41,470 --> 00:00:45,360
the company is head of technology which

00:00:43,570 --> 00:00:48,250
is as awesome as it may sound to you

00:00:45,360 --> 00:00:50,860
this means for us that I'm on the one

00:00:48,250 --> 00:00:54,070
hand a kind of an internal consultant

00:00:50,860 --> 00:00:55,750
for our project teams trying to get new

00:00:54,070 --> 00:00:58,750
technology knowledge into the project

00:00:55,750 --> 00:01:01,030
teams and on the other hand arm trying

00:00:58,750 --> 00:01:03,070
to solve technical issues that we may

00:01:01,030 --> 00:01:06,159
have which doesn't happen as often as

00:01:03,070 --> 00:01:08,799
you may think for sure if I'm not doing

00:01:06,159 --> 00:01:11,740
that I'm running our educational program

00:01:08,799 --> 00:01:15,700
arm running trainings running workshops

00:01:11,740 --> 00:01:18,850
I'm hosting & Co organizing our yearly

00:01:15,700 --> 00:01:21,909
developer conference I'm hosting & Co

00:01:18,850 --> 00:01:23,500
organizing our public unconference

00:01:21,909 --> 00:01:25,750
called the unkown twitch will happen in

00:01:23,500 --> 00:01:27,820
April so if you're close to a man I'm

00:01:25,750 --> 00:01:31,990
just ping me maybe I can sneak you in

00:01:27,820 --> 00:01:34,270
somehow if I'm not doing that I am

00:01:31,990 --> 00:01:35,890
actually co-hosting to PHP user groups

00:01:34,270 --> 00:01:37,900
one is the PHP user group in Frankfurt

00:01:35,890 --> 00:01:39,759
and the other one is the PHP user group

00:01:37,900 --> 00:01:41,500
mate reporter go and run the car as you

00:01:39,759 --> 00:01:44,080
can see i'm from germany we have very

00:01:41,500 --> 00:01:49,750
long names so that's just like the outer

00:01:44,080 --> 00:01:51,729
Manheim region ok if you do have any

00:01:49,750 --> 00:01:54,759
questions concerning this talk feel free

00:01:51,729 --> 00:01:58,090
to ask them at the end um or grab me in

00:01:54,759 --> 00:01:59,619
the hallway if however you don't like to

00:01:58,090 --> 00:02:02,020
talk to a German public or you are

00:01:59,619 --> 00:02:04,090
scared of doing so which is something I

00:02:02,020 --> 00:02:06,340
can fully understand I'm scared of

00:02:04,090 --> 00:02:08,140
talking to myself a lot of times just

00:02:06,340 --> 00:02:10,119
send me an email ping me on Twitter and

00:02:08,140 --> 00:02:14,559
whatnot I like you guys in the front

00:02:10,119 --> 00:02:17,169
this gets yeah that's true that's ok

00:02:14,559 --> 00:02:18,330
let's get started so just to give you a

00:02:17,169 --> 00:02:20,430
bit of context

00:02:18,330 --> 00:02:22,140
bit of background knowledge so--but

00:02:20,430 --> 00:02:23,940
expert I said it we are a technology

00:02:22,140 --> 00:02:27,540
company focusing on weapon and mobile

00:02:23,940 --> 00:02:29,730
technologies meaning that we do use a

00:02:27,540 --> 00:02:31,350
lot of different technologies we use PHP

00:02:29,730 --> 00:02:33,840
for most of our project but we also use

00:02:31,350 --> 00:02:37,490
Java we use a tons of data stores my

00:02:33,840 --> 00:02:40,620
sequel postgres MongoDB near 4j what not

00:02:37,490 --> 00:02:42,930
we knows no Jas we use apache in

00:02:40,620 --> 00:02:45,330
genetics edge a proxy different kind of

00:02:42,930 --> 00:02:48,450
PHP frameworks you get the theme right

00:02:45,330 --> 00:02:50,610
so there's a lot of stuff involved which

00:02:48,450 --> 00:02:52,230
makes it not really really easy for our

00:02:50,610 --> 00:02:53,610
developers to get started on a new

00:02:52,230 --> 00:02:55,350
project or when they take over an

00:02:53,610 --> 00:02:58,590
existing one to get everything up and

00:02:55,350 --> 00:03:00,780
running and about five years ago we had

00:02:58,590 --> 00:03:02,640
one of those projects very threw in a

00:03:00,780 --> 00:03:05,209
new development team three or four guys

00:03:02,640 --> 00:03:08,040
three of them could set up the project

00:03:05,209 --> 00:03:10,470
quite quickly and like the other the

00:03:08,040 --> 00:03:13,200
last guy in the team it took him like

00:03:10,470 --> 00:03:16,340
about two days or so to get started I

00:03:13,200 --> 00:03:20,070
heard about that and I got really sad I

00:03:16,340 --> 00:03:22,260
mean like really sad because it means we

00:03:20,070 --> 00:03:24,769
lost a lot of money like me as a company

00:03:22,260 --> 00:03:27,060
owner right and that makes me really sad

00:03:24,769 --> 00:03:29,670
so I thought we need to change that

00:03:27,060 --> 00:03:33,090
right we need to make development fun

00:03:29,670 --> 00:03:34,880
again and making it really easy for for

00:03:33,090 --> 00:03:39,989
our developers to get in a project arm

00:03:34,880 --> 00:03:41,820
over time and turns out like five or six

00:03:39,989 --> 00:03:43,260
years ago when you were at a PHP

00:03:41,820 --> 00:03:44,670
conference you heard about vagrant you

00:03:43,260 --> 00:03:46,200
heard about pepper and oil stuff and I

00:03:44,670 --> 00:03:48,480
thought well that may be a good good way

00:03:46,200 --> 00:03:52,260
to go so let's see what what those tools

00:03:48,480 --> 00:03:56,040
can can offer us so the idea was really

00:03:52,260 --> 00:03:58,860
to have a really isolated development

00:03:56,040 --> 00:04:00,780
environment as little host installs as

00:03:58,860 --> 00:04:03,150
possible so having a vm or something

00:04:00,780 --> 00:04:07,080
like that where all the stuff is is

00:04:03,150 --> 00:04:11,489
installed in and ultimately I wanted to

00:04:07,080 --> 00:04:12,870
find a way to at least make it possible

00:04:11,489 --> 00:04:16,590
that we could do something like

00:04:12,870 --> 00:04:19,470
continuous deployment technically we can

00:04:16,590 --> 00:04:23,790
practically will never do since we are

00:04:19,470 --> 00:04:25,020
an agency arm well for us it's important

00:04:23,790 --> 00:04:26,789
to have an approval of the client and

00:04:25,020 --> 00:04:28,680
for the client it's important to give it

00:04:26,789 --> 00:04:30,660
us give us an approval but well

00:04:28,680 --> 00:04:31,860
technically we can do that I'm in the

00:04:30,660 --> 00:04:33,360
end someone needs like to

00:04:31,860 --> 00:04:36,990
which the rate or B button or what not

00:04:33,360 --> 00:04:38,550
to make that stuff go to production so

00:04:36,990 --> 00:04:40,199
what are the challenges I'm trying to

00:04:38,550 --> 00:04:41,969
face with this talk well first of all

00:04:40,199 --> 00:04:44,520
how do we deal with dependencies and I'm

00:04:41,969 --> 00:04:46,169
not only focusing on like composer

00:04:44,520 --> 00:04:49,889
dependencies but also system

00:04:46,169 --> 00:04:52,219
dependencies PHP extensions any services

00:04:49,889 --> 00:04:54,810
that need to be installed somewhere

00:04:52,219 --> 00:04:56,310
maybe CLI applications that need to be

00:04:54,810 --> 00:05:00,330
there because your application needs to

00:04:56,310 --> 00:05:02,879
invoke them all sorts of stuff um how do

00:05:00,330 --> 00:05:05,389
we deal with database schema changes who

00:05:02,879 --> 00:05:10,229
of you is using a relational database oh

00:05:05,389 --> 00:05:12,029
yeah you like schema migrations a lot

00:05:10,229 --> 00:05:16,279
right that that's really a pain in the

00:05:12,029 --> 00:05:18,689
ass so I'll show you how we do that and

00:05:16,279 --> 00:05:20,550
how do we isolate development

00:05:18,689 --> 00:05:22,560
environments as I said we are we're

00:05:20,550 --> 00:05:26,099
doing a lot of projects so our

00:05:22,560 --> 00:05:28,409
developers have or work on different

00:05:26,099 --> 00:05:33,240
projects well not the same time but in

00:05:28,409 --> 00:05:34,979
parallel so we need a way to distinguish

00:05:33,240 --> 00:05:37,050
or to isolate between these environments

00:05:34,979 --> 00:05:39,960
to make sure that that there are no

00:05:37,050 --> 00:05:42,120
problems coming up and ultimately at

00:05:39,960 --> 00:05:44,789
least when I started to think about this

00:05:42,120 --> 00:05:46,830
I wanted to figure out a way of hiding

00:05:44,789 --> 00:05:48,690
all that complexity from my developers

00:05:46,830 --> 00:05:53,000
they should not really care what we are

00:05:48,690 --> 00:05:56,310
doing technically this was a good idea

00:05:53,000 --> 00:05:58,020
practically I completely failed and I

00:05:56,310 --> 00:06:01,919
completely changed my mind when it comes

00:05:58,020 --> 00:06:05,400
to that point thing is we are using a

00:06:01,919 --> 00:06:06,689
lot of tools we are downloading OS

00:06:05,400 --> 00:06:08,339
packages we are darling composer

00:06:06,689 --> 00:06:10,379
packages we are downloading puppet

00:06:08,339 --> 00:06:12,689
modules so we are relying a lot of

00:06:10,379 --> 00:06:15,089
external services on that we can't

00:06:12,689 --> 00:06:18,289
control and changes are things can go

00:06:15,089 --> 00:06:22,919
bad quite often and tell what they do

00:06:18,289 --> 00:06:25,139
and if we would if it would have

00:06:22,919 --> 00:06:27,449
followed the rule the people or my

00:06:25,139 --> 00:06:29,759
developers would come to me and say hey

00:06:27,449 --> 00:06:31,439
we got a problem figure it out this

00:06:29,759 --> 00:06:33,180
turns me to the bottleneck which is

00:06:31,439 --> 00:06:35,520
probably not the best idea because I

00:06:33,180 --> 00:06:41,159
really am the bottleneck of my company

00:06:35,520 --> 00:06:42,479
in some situations so the goal is to do

00:06:41,159 --> 00:06:43,060
this the other way around and say hey

00:06:42,479 --> 00:06:44,650
developer

00:06:43,060 --> 00:06:46,600
these are two that we are using and

00:06:44,650 --> 00:06:48,880
educating them how to use them so they

00:06:46,600 --> 00:06:53,740
at least technically can fix the issues

00:06:48,880 --> 00:06:56,350
themselves so okay so the the basic idea

00:06:53,740 --> 00:06:57,940
was really to find a solution that more

00:06:56,350 --> 00:07:00,190
or less looks like this so you clone the

00:06:57,940 --> 00:07:05,470
repo and then you just type wakin up and

00:07:00,190 --> 00:07:08,950
everything magically works which

00:07:05,470 --> 00:07:12,760
sometimes really happens in so great

00:07:08,950 --> 00:07:14,919
servant who've using Wigan okay great so

00:07:12,760 --> 00:07:17,229
I don't need to tell much about it so

00:07:14,919 --> 00:07:19,720
it's basically 24 for setting up

00:07:17,229 --> 00:07:21,700
development environments um it's pretty

00:07:19,720 --> 00:07:24,490
old actually I just realized it came to

00:07:21,700 --> 00:07:28,330
light in 2010 which like six years ago

00:07:24,490 --> 00:07:30,310
gosh and last year the company behind

00:07:28,330 --> 00:07:32,940
wavin announced the successor called

00:07:30,310 --> 00:07:35,290
auto currently still in development

00:07:32,940 --> 00:07:37,330
seems to be even more awesome than than

00:07:35,290 --> 00:07:39,130
making this so we need less of

00:07:37,330 --> 00:07:41,729
configuration it magically figures out

00:07:39,130 --> 00:07:47,410
what you're dealing with and then just

00:07:41,729 --> 00:07:48,880
does something whatever right so the

00:07:47,410 --> 00:07:50,320
benefits are very good we got an

00:07:48,880 --> 00:07:52,000
environmental project so we are really

00:07:50,320 --> 00:07:53,890
this isolation that is really important

00:07:52,000 --> 00:07:56,020
for us it's versatile because it's just

00:07:53,890 --> 00:07:58,479
a simple text files i can check it in to

00:07:56,020 --> 00:07:59,860
get and push it and share it across the

00:07:58,479 --> 00:08:03,789
team so one develop makes a change

00:07:59,860 --> 00:08:05,229
everybody gets to changes and finally we

00:08:03,789 --> 00:08:10,150
can get around to works on my machine

00:08:05,229 --> 00:08:11,830
excuse right well technically um some

00:08:10,150 --> 00:08:15,190
turns out sometimes with Reagan and

00:08:11,830 --> 00:08:19,030
puppet it works for one developer but

00:08:15,190 --> 00:08:21,070
not the others for whatever reason so

00:08:19,030 --> 00:08:22,630
this is not completely true but we are

00:08:21,070 --> 00:08:26,470
getting quite close that it works the

00:08:22,630 --> 00:08:28,740
same all over the place great and this

00:08:26,470 --> 00:08:31,270
is especially important for us are

00:08:28,740 --> 00:08:32,620
currently we have developers using Linux

00:08:31,270 --> 00:08:35,380
we have developers using max we have

00:08:32,620 --> 00:08:37,060
developers using Windows and we need a

00:08:35,380 --> 00:08:39,820
consistent environment that works across

00:08:37,060 --> 00:08:41,529
all of the machines which is really

00:08:39,820 --> 00:08:44,050
important if you use tools like your man

00:08:41,529 --> 00:08:46,750
for example which simply cannot be

00:08:44,050 --> 00:08:47,890
compiled on windows so in the past we

00:08:46,750 --> 00:08:49,120
had to pay off setting up a separate

00:08:47,890 --> 00:08:52,360
virtual machine for the windows

00:08:49,120 --> 00:08:54,730
developers just to make them able to

00:08:52,360 --> 00:08:57,100
communicate that so with Raven a puppet

00:08:54,730 --> 00:08:58,510
a lot of stuff we have it in our virtual

00:08:57,100 --> 00:09:00,490
I mind running on on the develops

00:08:58,510 --> 00:09:04,420
machines and everything is great well

00:09:00,490 --> 00:09:06,100
mostly this is how a vagrant

00:09:04,420 --> 00:09:07,690
configuration looks like guess you are

00:09:06,100 --> 00:09:10,120
all familiar with that we can define a

00:09:07,690 --> 00:09:12,400
regular file API version a minimum

00:09:10,120 --> 00:09:14,320
version that that is required of regular

00:09:12,400 --> 00:09:15,640
one which is really good if you have

00:09:14,320 --> 00:09:18,400
developers on your team that don't

00:09:15,640 --> 00:09:21,880
regularly update their their hosts

00:09:18,400 --> 00:09:23,710
installations arm which again can be

00:09:21,880 --> 00:09:26,260
quite messy because different versions

00:09:23,710 --> 00:09:28,450
of vague and work slightly different in

00:09:26,260 --> 00:09:30,070
some edge cases and then you simply

00:09:28,450 --> 00:09:32,710
define your virtual machines like in

00:09:30,070 --> 00:09:35,140
this case it's a debian Jessie box with

00:09:32,710 --> 00:09:37,600
the hostname my host and exposing the

00:09:35,140 --> 00:09:40,000
current folder as / raiment in the

00:09:37,600 --> 00:09:41,530
machine to run Reagan do you all know

00:09:40,000 --> 00:09:45,130
that just start waking up and you've got

00:09:41,530 --> 00:09:46,920
a bunch of of comments showing what

00:09:45,130 --> 00:09:49,270
Reagan's doing downloading the base box

00:09:46,920 --> 00:09:51,640
configuring the networking configuring

00:09:49,270 --> 00:09:56,140
port forwarding mounting the folders and

00:09:51,640 --> 00:09:58,210
whatnot and after that you have your

00:09:56,140 --> 00:10:03,160
your virtual machine ready and you can

00:09:58,210 --> 00:10:07,150
work with it now I just said a couple of

00:10:03,160 --> 00:10:08,590
times box a box is basically an image

00:10:07,150 --> 00:10:10,240
that is used to create the virtual

00:10:08,590 --> 00:10:12,370
machine there are two ways to obtain

00:10:10,240 --> 00:10:15,670
such a box there is a website called

00:10:12,370 --> 00:10:17,500
Reagan box so yes we just can't pick any

00:10:15,670 --> 00:10:19,150
of these boxes that you want there is an

00:10:17,500 --> 00:10:20,620
offering by Hoshi Corp the company

00:10:19,150 --> 00:10:23,440
behind a vagrant it's called at last

00:10:20,620 --> 00:10:28,150
tashakor com we're just can also figure

00:10:23,440 --> 00:10:31,650
out which boxes you you want to use pro

00:10:28,150 --> 00:10:34,000
tip when you pick a box from there

00:10:31,650 --> 00:10:36,820
download it and host it on your own your

00:10:34,000 --> 00:10:39,250
own service this really killed us the

00:10:36,820 --> 00:10:41,650
first time we would try that so I

00:10:39,250 --> 00:10:43,660
configured this project for our teams we

00:10:41,650 --> 00:10:45,760
work for like three or four months if

00:10:43,660 --> 00:10:47,080
everything was fine and then half a year

00:10:45,760 --> 00:10:49,330
later the customer came and said hey I

00:10:47,080 --> 00:10:51,340
want to make a change so we said hey

00:10:49,330 --> 00:10:53,980
developer it's a new one he didn't work

00:10:51,340 --> 00:10:55,780
on the project originally um check out

00:10:53,980 --> 00:10:57,910
the the repo just run waking up and

00:10:55,780 --> 00:10:59,440
everything google romantically five

00:10:57,910 --> 00:11:03,040
seconds later the guy is standing in my

00:10:59,440 --> 00:11:04,810
door it doesn't work okay great so let's

00:11:03,040 --> 00:11:06,040
try this so I checked out the repo just

00:11:04,810 --> 00:11:08,470
type big and up everything was working

00:11:06,040 --> 00:11:09,230
fine okay something really weird going

00:11:08,470 --> 00:11:11,600
on

00:11:09,230 --> 00:11:13,490
so I went to the guy we we looked at the

00:11:11,600 --> 00:11:15,140
logs of Raymond and it turns out vagrant

00:11:13,490 --> 00:11:18,200
could not download the bass box anymore

00:11:15,140 --> 00:11:19,670
and just didn't start okay I just

00:11:18,200 --> 00:11:21,380
grabbed the bass box from my cache

00:11:19,670 --> 00:11:23,300
folder just uploaded it on some of our

00:11:21,380 --> 00:11:25,360
servers change the URL and then

00:11:23,300 --> 00:11:28,690
everything work fine so how's the

00:11:25,360 --> 00:11:31,750
 box on your own otherwise

00:11:28,690 --> 00:11:33,920
otherwise you may run into problems

00:11:31,750 --> 00:11:36,680
what's pretty cool but wagon is that

00:11:33,920 --> 00:11:38,510
vagrant these days supports a lot of

00:11:36,680 --> 00:11:40,820
providers originally it will ship with

00:11:38,510 --> 00:11:43,370
virtualbox but now you can run vmware

00:11:40,820 --> 00:11:44,960
you can use hyper-v you can use kvm you

00:11:43,370 --> 00:11:49,070
can also use spin up Tucker instances

00:11:44,960 --> 00:11:51,290
you can spin up any kind of cloud

00:11:49,070 --> 00:11:53,150
instance AWS and whatnot so it's really

00:11:51,290 --> 00:11:56,210
cool to just need to tie break it up and

00:11:53,150 --> 00:11:57,560
the magic happens again pretty cool and

00:11:56,210 --> 00:11:59,840
you can customize how we're going works

00:11:57,560 --> 00:12:01,550
by by so-called plugins on there are

00:11:59,840 --> 00:12:04,100
tons of that was catchy a host manager

00:12:01,550 --> 00:12:05,480
librarian public dns whatnot again it

00:12:04,100 --> 00:12:06,980
can be a bit tricky to find a plug-in

00:12:05,480 --> 00:12:10,070
that works on all of the development

00:12:06,980 --> 00:12:13,640
platform so that is a bit a bit tricky

00:12:10,070 --> 00:12:17,750
these days but if you do it runs it once

00:12:13,640 --> 00:12:20,840
fine I want to highlight a particular

00:12:17,750 --> 00:12:22,900
plug-in that at least I see that not

00:12:20,840 --> 00:12:25,730
many people know it's the cashier plugin

00:12:22,900 --> 00:12:27,530
are you simply install it by saying

00:12:25,730 --> 00:12:29,810
vagrant plugin installed weekend dash

00:12:27,530 --> 00:12:31,670
catchy and then you add a bit of

00:12:29,810 --> 00:12:33,320
configuration code in your vagrant in

00:12:31,670 --> 00:12:35,900
your wagon file so if the plugin is

00:12:33,320 --> 00:12:38,390
enabled just setting a few options now

00:12:35,900 --> 00:12:41,540
as the name implies the the kesha plugin

00:12:38,390 --> 00:12:44,900
is used for caching when you don't use

00:12:41,540 --> 00:12:46,460
the plug-in and you saving up arm wave

00:12:44,900 --> 00:12:49,160
rent or popular whatnot would download

00:12:46,460 --> 00:12:50,450
the OS packages store them locally in

00:12:49,160 --> 00:12:51,860
the virtual machine and when you say we

00:12:50,450 --> 00:12:53,330
can destroy all the stuff is gone you

00:12:51,860 --> 00:12:56,030
type it up and it will download the

00:12:53,330 --> 00:12:58,030
stuff again which if we have a decent

00:12:56,030 --> 00:13:00,260
internet connection is pretty good if

00:12:58,030 --> 00:13:01,460
you are in a situation where we have an

00:13:00,260 --> 00:13:04,460
awesome office but a crappy internet

00:13:01,460 --> 00:13:07,490
connection like we do till March then

00:13:04,460 --> 00:13:11,660
everything will change thank you dr.

00:13:07,490 --> 00:13:15,110
telecom you have to be a bit careful

00:13:11,660 --> 00:13:17,660
what and how much people download so

00:13:15,110 --> 00:13:19,370
what this plug-in does it knows about

00:13:17,660 --> 00:13:21,450
the locations where these packages are

00:13:19,370 --> 00:13:23,690
located like apt packages

00:13:21,450 --> 00:13:25,950
the composed packages NPM packages and

00:13:23,690 --> 00:13:27,780
links these directories back to the host

00:13:25,950 --> 00:13:31,110
so the files actually stored on the host

00:13:27,780 --> 00:13:33,450
and when your destroy end up the the box

00:13:31,110 --> 00:13:35,640
again the files are there and when like

00:13:33,450 --> 00:13:39,000
apt recognizes the packages there it

00:13:35,640 --> 00:13:40,800
won't download anymore which critical so

00:13:39,000 --> 00:13:45,240
in one of the project we've used it we

00:13:40,800 --> 00:13:48,000
are we minimized the deployment time

00:13:45,240 --> 00:13:49,980
from like 20 minutes 25 just by not

00:13:48,000 --> 00:13:56,040
downloading all the packages and that is

00:13:49,980 --> 00:13:57,950
really really awesome yeah so go out and

00:13:56,040 --> 00:14:00,900
use that plug in it that's really cool

00:13:57,950 --> 00:14:05,070
ok so for for configuration management

00:14:00,900 --> 00:14:06,870
we use puppet there are tons of

00:14:05,070 --> 00:14:08,640
alternatives are there there's chef

00:14:06,870 --> 00:14:10,380
there so there's ansible you could use a

00:14:08,640 --> 00:14:15,150
simple bear script that does all the

00:14:10,380 --> 00:14:18,330
stuff i pick puppet five years ago molle

00:14:15,150 --> 00:14:21,630
mostly for two reasons one it was like

00:14:18,330 --> 00:14:23,340
at every other PHP conference and second

00:14:21,630 --> 00:14:24,990
most of my speaker friends were using

00:14:23,340 --> 00:14:28,410
puppets so I knew it and run into issues

00:14:24,990 --> 00:14:30,240
I know when to ask so that was the only

00:14:28,410 --> 00:14:34,320
reason I'm sorry puppet labs but that's

00:14:30,240 --> 00:14:35,970
that's the truth so puppet is a DSL I

00:14:34,320 --> 00:14:40,620
domain-specific language written in Ruby

00:14:35,970 --> 00:14:42,420
arm that is used to describe what should

00:14:40,620 --> 00:14:44,730
be done if you don't want to write

00:14:42,420 --> 00:14:46,950
puppet code yourself there is this I

00:14:44,730 --> 00:14:49,860
have no idea how to pronounce that there

00:14:46,950 --> 00:14:56,760
is this web application called ph poopit

00:14:49,860 --> 00:14:58,800
poopit ever when i when i will share the

00:14:56,760 --> 00:15:01,260
lights like this is actually linked to

00:14:58,800 --> 00:15:02,670
to to the web application so you don't

00:15:01,260 --> 00:15:04,760
even need to search for that on google

00:15:02,670 --> 00:15:07,170
just making it really easy for you and

00:15:04,760 --> 00:15:09,740
this is like a web UI and you just click

00:15:07,170 --> 00:15:12,510
together what what your your box should

00:15:09,740 --> 00:15:13,950
should run with and then you the puppet

00:15:12,510 --> 00:15:16,290
code is magically created and you could

00:15:13,950 --> 00:15:18,840
throw it into a virtual box into vagrant

00:15:16,290 --> 00:15:21,120
and everything will work again this is

00:15:18,840 --> 00:15:23,310
how a puppet script looks like you can

00:15:21,120 --> 00:15:25,400
define variables default packages expect

00:15:23,310 --> 00:15:28,050
crow gate and then we have a package

00:15:25,400 --> 00:15:30,930
command where we just pass the array to

00:15:28,050 --> 00:15:34,980
and say hey make sure these packages are

00:15:30,930 --> 00:15:36,750
present on our box or we can say hey I

00:15:34,980 --> 00:15:39,120
and a host entry my host lock which

00:15:36,750 --> 00:15:42,329
would point to 127 dot 0 dot one and one

00:15:39,120 --> 00:15:44,519
just do it as you can see this is very

00:15:42,329 --> 00:15:46,110
high level so technically this works in

00:15:44,519 --> 00:15:47,870
every platform that puppet supports or

00:15:46,110 --> 00:15:50,399
any kind of Linux distribution

00:15:47,870 --> 00:15:53,220
technically should also work on Windows

00:15:50,399 --> 00:15:54,320
what probably context install tools like

00:15:53,220 --> 00:15:57,959
expecting crawl and windows but

00:15:54,320 --> 00:15:59,519
technically the possibility is there so

00:15:57,959 --> 00:16:02,519
this is what a dsl looks like right it

00:15:59,519 --> 00:16:05,790
don't say what to do about like how to

00:16:02,519 --> 00:16:07,470
do it and to run puppet the easiest way

00:16:05,790 --> 00:16:09,660
is simply to call puppet apply and just

00:16:07,470 --> 00:16:11,639
pass the script that we just created if

00:16:09,660 --> 00:16:15,930
we've done that we get a lot of output

00:16:11,639 --> 00:16:18,510
again which shows that shows us exactly

00:16:15,930 --> 00:16:20,760
what happened package curl ensure and

00:16:18,510 --> 00:16:22,529
you change purged to present good ensure

00:16:20,760 --> 00:16:26,730
and should change purge to present just

00:16:22,529 --> 00:16:28,230
as ages i installed it and at the bottom

00:16:26,730 --> 00:16:31,709
you see the hosts entry is also created

00:16:28,230 --> 00:16:33,870
so that's cool and this is how a typical

00:16:31,709 --> 00:16:36,839
project structure in our products look

00:16:33,870 --> 00:16:38,660
like we do have a puppet folder which

00:16:36,839 --> 00:16:41,100
contains all the puppet configurations

00:16:38,660 --> 00:16:43,860
they may manifest file the modules

00:16:41,100 --> 00:16:45,839
folder and in this source folder we just

00:16:43,860 --> 00:16:48,870
keep the local public configuration to

00:16:45,839 --> 00:16:50,250
tie everything together and then we have

00:16:48,870 --> 00:16:54,089
a puppet file which I'll touch upon

00:16:50,250 --> 00:16:56,250
briefly later we do have a bootstrapping

00:16:54,089 --> 00:16:58,170
script in our shells folder which I'll

00:16:56,250 --> 00:17:00,029
just cover also pretty quickly producing

00:16:58,170 --> 00:17:03,810
and then we have our source for the test

00:17:00,029 --> 00:17:05,370
folder and the web in the beginning when

00:17:03,810 --> 00:17:07,679
we started experimenting with with

00:17:05,370 --> 00:17:09,870
puppet whenever we needed the module we

00:17:07,679 --> 00:17:12,630
just downloaded it put it in the modules

00:17:09,870 --> 00:17:14,809
folder and we're good to go this is

00:17:12,630 --> 00:17:17,220
probably not the best way to do it

00:17:14,809 --> 00:17:20,069
however there's a solution to that which

00:17:17,220 --> 00:17:22,140
is called liberian puppet you could say

00:17:20,069 --> 00:17:25,020
that librarian puppet is the composer

00:17:22,140 --> 00:17:26,760
for puppet modules meaning that you can

00:17:25,020 --> 00:17:28,799
define your dependencies and then

00:17:26,760 --> 00:17:32,690
librarian puppet will download them and

00:17:28,799 --> 00:17:32,690
install them in the respective folders

00:17:33,140 --> 00:17:37,890
the puppet file is actually the

00:17:35,809 --> 00:17:40,110
correspondent file to the composite of

00:17:37,890 --> 00:17:42,270
JSON file you simply pointed to the

00:17:40,110 --> 00:17:44,700
forge this is like packages for the

00:17:42,270 --> 00:17:46,409
puppet modules are then you list all the

00:17:44,700 --> 00:17:49,000
models that should be installed example

00:17:46,409 --> 00:17:50,950
42 apache example 42 PHP and so on

00:17:49,000 --> 00:17:53,200
so forth define the version numbers or

00:17:50,950 --> 00:17:55,390
you could say hey I have this module

00:17:53,200 --> 00:17:57,580
customer one dash project 1 and this is

00:17:55,390 --> 00:18:01,270
located like relatively to the puppet

00:17:57,580 --> 00:18:03,520
file to the puppet file and then puppet

00:18:01,270 --> 00:18:06,460
librarian puppet will just either

00:18:03,520 --> 00:18:08,590
download all these modules or copy the

00:18:06,460 --> 00:18:11,010
customer one dash project one folder

00:18:08,590 --> 00:18:13,270
over in this module folder and then

00:18:11,010 --> 00:18:17,200
everything is ready so that puppet can

00:18:13,270 --> 00:18:18,970
run and it also locks the dependency

00:18:17,200 --> 00:18:20,260
versions in a public toilet lock so

00:18:18,970 --> 00:18:23,080
similar to the composer door lock file

00:18:20,260 --> 00:18:26,920
so all the developers theoretically get

00:18:23,080 --> 00:18:29,350
the same brush right so to run it you

00:18:26,920 --> 00:18:31,330
have to install it obviously it's a gem

00:18:29,350 --> 00:18:33,190
package or simply call Jim installed i

00:18:31,330 --> 00:18:35,470
barean puppet and i can either say

00:18:33,190 --> 00:18:37,150
librarian puppet install or update same

00:18:35,470 --> 00:18:42,010
as composer install versus composer

00:18:37,150 --> 00:18:47,230
object right arm so how do we hook that

00:18:42,010 --> 00:18:49,270
into Raymond turns out there is a baby

00:18:47,230 --> 00:18:54,780
grand plugin for that the vagrant

00:18:49,270 --> 00:18:58,140
librarian puppet plugin the downside is

00:18:54,780 --> 00:19:00,750
this works perfectly fine on Linux I

00:18:58,140 --> 00:19:04,180
couldn't get it to work on Windows I

00:19:00,750 --> 00:19:06,850
literally took like two days of trying

00:19:04,180 --> 00:19:10,870
to get it work and debug Ruby on Windows

00:19:06,850 --> 00:19:13,300
it did not work for some reason it just

00:19:10,870 --> 00:19:14,680
did not find the ruby version or the

00:19:13,300 --> 00:19:17,860
puppet version that was installed that

00:19:14,680 --> 00:19:20,080
was really really bad so after the two

00:19:17,860 --> 00:19:22,960
days I was really annoyed I was really

00:19:20,080 --> 00:19:24,910
sad that I wasted again to two days I

00:19:22,960 --> 00:19:28,090
googled a bit and I found the solution

00:19:24,910 --> 00:19:29,740
arm that's why we use the shell script

00:19:28,090 --> 00:19:31,690
so in fact we were shells provisioning

00:19:29,740 --> 00:19:33,480
and that will then run in the virtual

00:19:31,690 --> 00:19:36,280
machine and everything is working fine

00:19:33,480 --> 00:19:38,560
the downside of the liberian the vagrant

00:19:36,280 --> 00:19:40,660
librarian plugin is also it would run on

00:19:38,560 --> 00:19:42,100
the host which to me doesn't make any

00:19:40,660 --> 00:19:44,560
sense at all because I want to configure

00:19:42,100 --> 00:19:47,290
that stuff in the virtual machine which

00:19:44,560 --> 00:19:49,870
just works perfectly fine with a shell

00:19:47,290 --> 00:19:51,820
script version so we call the our

00:19:49,870 --> 00:19:53,980
bootstraps square pass a few parameters

00:19:51,820 --> 00:19:56,280
like where the proper module is located

00:19:53,980 --> 00:19:59,320
which file to execute and that's it and

00:19:56,280 --> 00:20:01,150
this is a really really stripped-down

00:19:59,320 --> 00:20:02,559
version of whatever bootstrapping script

00:20:01,150 --> 00:20:04,629
looks like so we grabbed the input

00:20:02,559 --> 00:20:06,190
parameters we try to install a barian

00:20:04,629 --> 00:20:08,259
puppet if it's not install to an install

00:20:06,190 --> 00:20:12,879
or update and then just simply run the

00:20:08,259 --> 00:20:16,360
puppet apply command that's it great

00:20:12,879 --> 00:20:19,779
what we also run in our puppet run is

00:20:16,360 --> 00:20:23,409
composer who have us heard of composure

00:20:19,779 --> 00:20:28,120
I want to see all hands up almost okay

00:20:23,409 --> 00:20:30,220
cool great so yeah we use composer for

00:20:28,120 --> 00:20:31,509
all the dependency management to run

00:20:30,220 --> 00:20:33,399
composer be a puppet we need a few

00:20:31,509 --> 00:20:36,070
packages obviously we need / we need get

00:20:33,399 --> 00:20:39,999
and PHP 7c line because no one installs

00:20:36,070 --> 00:20:41,769
php5 anymore I actually changed the

00:20:39,999 --> 00:20:47,710
slides yesterday evening to make that

00:20:41,769 --> 00:20:49,539
Chuck it's all for you guys right so

00:20:47,710 --> 00:20:51,940
first of all we grab composer we simply

00:20:49,539 --> 00:20:53,679
curl it like like you would put it into

00:20:51,940 --> 00:20:54,730
user local bin I know there's this

00:20:53,679 --> 00:20:56,080
probably not the best way to put it

00:20:54,730 --> 00:20:58,210
because you download anything that you

00:20:56,080 --> 00:21:00,610
want in some project you also have to

00:20:58,210 --> 00:21:04,240
compose a far locally and just put it or

00:21:00,610 --> 00:21:06,129
copy it from the house to to the correct

00:21:04,240 --> 00:21:08,350
location on the virtual machine and then

00:21:06,129 --> 00:21:10,389
we we execute composer so simply

00:21:08,350 --> 00:21:12,669
composer install in our / vagrant

00:21:10,389 --> 00:21:14,830
directory and to do that we require gate

00:21:12,669 --> 00:21:18,519
we require PHP 7c lie and we require

00:21:14,830 --> 00:21:21,570
that composer actually is installed this

00:21:18,519 --> 00:21:23,950
worked quite a while and then one time

00:21:21,570 --> 00:21:27,879
for some really good reason it just

00:21:23,950 --> 00:21:30,429
broke it dinner work composer stopped

00:21:27,879 --> 00:21:33,129
with some really weird error message and

00:21:30,429 --> 00:21:34,779
I figured out that I need to pass the

00:21:33,129 --> 00:21:37,419
environment variable composer on a score

00:21:34,779 --> 00:21:39,369
home or set that and since then composer

00:21:37,419 --> 00:21:49,149
runs again I have no idea why but yeah

00:21:39,369 --> 00:21:51,249
that's the mystery of life now we do

00:21:49,149 --> 00:21:54,369
work for a lot of customers and for a

00:21:51,249 --> 00:21:57,100
lot of customers we work on a lot of

00:21:54,369 --> 00:21:59,289
different projects talking to the same

00:21:57,100 --> 00:22:03,429
services so we tend to write modules or

00:21:59,289 --> 00:22:05,049
libraries that that cover that specific

00:22:03,429 --> 00:22:07,090
functionality now what you could do

00:22:05,049 --> 00:22:09,490
technically is upload these packages to

00:22:07,090 --> 00:22:11,860
packages and and share them and then

00:22:09,490 --> 00:22:15,549
include them but that does not make

00:22:11,860 --> 00:22:16,240
sense in some cases so you might want to

00:22:15,549 --> 00:22:18,460
host

00:22:16,240 --> 00:22:20,290
the packages on your own there are

00:22:18,460 --> 00:22:22,960
actually two options right now you can

00:22:20,290 --> 00:22:26,110
you either use setas which is like the

00:22:22,960 --> 00:22:28,890
old school version of the package

00:22:26,110 --> 00:22:31,240
hosting or you could use torrent proxy I

00:22:28,890 --> 00:22:35,350
show you how to use set is because that

00:22:31,240 --> 00:22:37,090
is what we use and I don't feel enough

00:22:35,350 --> 00:22:39,820
pain to switch it on that's fully the

00:22:37,090 --> 00:22:42,130
best way to put it however you should

00:22:39,820 --> 00:22:43,809
use tor on you should buy a license so

00:22:42,130 --> 00:22:46,540
that Georgie is happy and continues

00:22:43,809 --> 00:22:49,950
developing a tauren and composer this is

00:22:46,540 --> 00:22:51,910
what we did even though we use status

00:22:49,950 --> 00:22:53,920
there come won't be nice to the people

00:22:51,910 --> 00:22:55,929
right installing set is it's really

00:22:53,920 --> 00:22:57,730
simple you can use composer for that

00:22:55,929 --> 00:23:00,280
simply say create project composer their

00:22:57,730 --> 00:23:02,620
status and then you need a configuration

00:23:00,280 --> 00:23:04,150
file JSON file you need to give it a

00:23:02,620 --> 00:23:05,950
name you need to give it a homepage and

00:23:04,150 --> 00:23:07,809
then you simply list the repositories

00:23:05,950 --> 00:23:09,460
that should be crawled past them

00:23:07,809 --> 00:23:13,420
configuration parameters and you're good

00:23:09,460 --> 00:23:16,090
to go also pro tip it's way more

00:23:13,420 --> 00:23:17,559
efficient if you can run settings on the

00:23:16,090 --> 00:23:19,960
same machine where the git repos are

00:23:17,559 --> 00:23:22,150
located so you can use local URLs of

00:23:19,960 --> 00:23:25,240
filesystem URLs instead of the HTTP ones

00:23:22,150 --> 00:23:28,650
that won the cloning and stuff runs much

00:23:25,240 --> 00:23:30,670
faster and then you simply call setas

00:23:28,650 --> 00:23:32,500
pinsetters build this is the

00:23:30,670 --> 00:23:34,840
configuration file and put all the stuff

00:23:32,500 --> 00:23:36,820
that you create or generate any web

00:23:34,840 --> 00:23:38,590
folder and you're good to go so this is

00:23:36,820 --> 00:23:41,140
the output you get a nice little web

00:23:38,590 --> 00:23:43,540
page listing all the packages that that

00:23:41,140 --> 00:23:45,160
are available in status and you get even

00:23:43,540 --> 00:23:47,320
the code snippet that you need to paste

00:23:45,160 --> 00:23:52,330
into a compositor Chiasson to talk to

00:23:47,320 --> 00:23:56,080
seti's arm unfortunately that was not

00:23:52,330 --> 00:23:59,440
enough for us because we have to deal

00:23:56,080 --> 00:24:06,429
with private repositories we do have a

00:23:59,440 --> 00:24:08,980
few customers that force us to protect

00:24:06,429 --> 00:24:11,320
the different projects for different

00:24:08,980 --> 00:24:14,320
developers so just the developers there

00:24:11,320 --> 00:24:18,610
are or should work on the projects are

00:24:14,320 --> 00:24:20,770
able to access the files which then in

00:24:18,610 --> 00:24:23,530
turn means we needed to deal with

00:24:20,770 --> 00:24:25,419
private repositories there is an easy

00:24:23,530 --> 00:24:27,309
solution for that or that's what we use

00:24:25,419 --> 00:24:29,500
in most cases HTTP basic authentication

00:24:27,309 --> 00:24:29,660
so we hook up apache and just connected

00:24:29,500 --> 00:24:31,760
to

00:24:29,660 --> 00:24:35,930
ldap server and that makes it really

00:24:31,760 --> 00:24:37,400
simple in most cases when composer will

00:24:35,930 --> 00:24:40,340
recognize that either status or a

00:24:37,400 --> 00:24:41,810
repository is protected with HD basic

00:24:40,340 --> 00:24:44,210
authentication it will ask for username

00:24:41,810 --> 00:24:45,980
and password for a long time composer

00:24:44,210 --> 00:24:48,440
wasn't able to store that that stuff

00:24:45,980 --> 00:24:49,700
which is really annoying and be you

00:24:48,440 --> 00:24:51,910
can't automate it well that's not true

00:24:49,700 --> 00:24:55,730
because I show you in a second how but

00:24:51,910 --> 00:24:58,280
just assume that this is the case so at

00:24:55,730 --> 00:25:00,440
one point I was so annoyed and I was at

00:24:58,280 --> 00:25:02,180
conf you I think three years ago or so I

00:25:00,440 --> 00:25:04,670
was waiting for my flight back home and

00:25:02,180 --> 00:25:06,230
I simply took a deep dive in the

00:25:04,670 --> 00:25:08,960
composer sources and I figured out how

00:25:06,230 --> 00:25:10,070
to patch that what how to create a pull

00:25:08,960 --> 00:25:12,590
request now that I that's probably the

00:25:10,070 --> 00:25:14,210
best way to put it so I sent the pull

00:25:12,590 --> 00:25:16,570
request to Jory it took him a while to

00:25:14,210 --> 00:25:21,380
completely rewrite that stuff because I

00:25:16,570 --> 00:25:23,660
totally messed it up and actually it was

00:25:21,380 --> 00:25:25,880
missing one important feature that the

00:25:23,660 --> 00:25:28,370
data you input was stored on disk so

00:25:25,880 --> 00:25:29,630
that was not available in my patch so

00:25:28,370 --> 00:25:31,610
luckily I think things since two years

00:25:29,630 --> 00:25:35,390
or so the patches in and you could all

00:25:31,610 --> 00:25:37,460
use it this is based on the idea of

00:25:35,390 --> 00:25:39,200
having an also JSON file either locally

00:25:37,460 --> 00:25:41,060
in the project or globally in your

00:25:39,200 --> 00:25:43,730
composure at home which then gets merged

00:25:41,060 --> 00:25:47,870
and you simply list the usernames and

00:25:43,730 --> 00:25:50,690
passwords for the different service as I

00:25:47,870 --> 00:25:52,610
said before that we really need for a

00:25:50,690 --> 00:25:54,290
solution to that because i wanted to

00:25:52,610 --> 00:25:55,430
automate all that stuff i was talking

00:25:54,290 --> 00:25:59,540
with a few friends and one of them

00:25:55,430 --> 00:26:00,980
introduced me to expect and if you don't

00:25:59,540 --> 00:26:03,770
take anything away from this talk you

00:26:00,980 --> 00:26:08,470
should this this is massive who of you

00:26:03,770 --> 00:26:10,730
knows what expect is okay quite a few

00:26:08,470 --> 00:26:14,780
basically you can think of expect as

00:26:10,730 --> 00:26:17,570
being a remote control for CI scripts so

00:26:14,780 --> 00:26:20,030
i can script sea lice good execution so

00:26:17,570 --> 00:26:23,180
whenever a CLI script script asked me a

00:26:20,030 --> 00:26:24,680
question expect can like simulate being

00:26:23,180 --> 00:26:28,310
a user in front of it and in putting

00:26:24,680 --> 00:26:32,260
that stuff this is massive so this is

00:26:28,310 --> 00:26:34,670
how you could run composer why i expect

00:26:32,260 --> 00:26:37,970
so what it does it spawned a new process

00:26:34,670 --> 00:26:41,360
its bonds composer install and when

00:26:37,970 --> 00:26:43,100
composer asks for username column expect

00:26:41,360 --> 00:26:46,760
we'll send the string my username

00:26:43,100 --> 00:26:49,400
enter if composer is waiting for you to

00:26:46,760 --> 00:26:51,860
enter your password expect will send my

00:26:49,400 --> 00:26:55,640
password enter and we do that as long as

00:26:51,860 --> 00:26:57,140
composer or until composer finally right

00:26:55,640 --> 00:26:59,809
generating all other files because this

00:26:57,140 --> 00:27:04,220
is the the final end of the composer

00:26:59,809 --> 00:27:06,500
skill and that is pretty awesome so how

00:27:04,220 --> 00:27:08,450
do we hook that up into our vagrant and

00:27:06,500 --> 00:27:09,919
puppet workflow I'm a bit scared of

00:27:08,450 --> 00:27:11,720
showing you the next slide because I

00:27:09,919 --> 00:27:13,160
think it's a really stupid idea but it

00:27:11,720 --> 00:27:16,490
was the easiest way of getting things

00:27:13,160 --> 00:27:21,080
done so don't blame me publicly you can

00:27:16,490 --> 00:27:24,080
blame you privately for sure what we do

00:27:21,080 --> 00:27:26,210
is every developer exposes to

00:27:24,080 --> 00:27:29,419
environment variables composer on let's

00:27:26,210 --> 00:27:31,909
go user composer underscore pass when

00:27:29,419 --> 00:27:34,490
Raven runs it will grab the environment

00:27:31,909 --> 00:27:36,740
variables set these local variables over

00:27:34,490 --> 00:27:39,230
here and then pass them to the

00:27:36,740 --> 00:27:41,659
bootstrapping shell script in the

00:27:39,230 --> 00:27:44,659
bootstrapping shell script we do set

00:27:41,659 --> 00:27:46,150
so-called factor variables so factor

00:27:44,659 --> 00:27:49,280
underscore user effect on in scopus

00:27:46,150 --> 00:27:54,020
which then are exposed by peppered in

00:27:49,280 --> 00:27:55,760
the puppet run which means we can use

00:27:54,020 --> 00:27:58,010
the colon colon user and colon colon

00:27:55,760 --> 00:27:59,510
pass syntax to access the environment

00:27:58,010 --> 00:28:00,860
variables so we are getting the

00:27:59,510 --> 00:28:02,179
environment variables from the host from

00:28:00,860 --> 00:28:03,950
the environment where this via vagrant

00:28:02,179 --> 00:28:06,970
by the bootstrapping swerve into puppet

00:28:03,950 --> 00:28:09,890
went well runs expect and runs composer

00:28:06,970 --> 00:28:14,000
that was easy right yeah obvious

00:28:09,890 --> 00:28:19,220
solution right so we do run composed of

00:28:14,000 --> 00:28:22,490
our install with that arm but only in

00:28:19,220 --> 00:28:25,549
development mode we don't run composer

00:28:22,490 --> 00:28:27,440
install in production no one should on

00:28:25,549 --> 00:28:29,480
production we simply run the dumb

00:28:27,440 --> 00:28:31,789
autoloader with the optimized flag and

00:28:29,480 --> 00:28:33,980
andy know that flag so that's what we

00:28:31,789 --> 00:28:36,530
will actually we do that on testing and

00:28:33,980 --> 00:28:39,409
staging a production to be to be correct

00:28:36,530 --> 00:28:41,450
so we know as early as possible if there

00:28:39,409 --> 00:28:44,059
are any problems with that how much time

00:28:41,450 --> 00:28:47,570
they have left or should i need to speed

00:28:44,059 --> 00:28:50,870
up okay great so we do use thing for

00:28:47,570 --> 00:28:54,710
anything automation so this is like our

00:28:50,870 --> 00:28:57,159
CLI and magic script why thing because

00:28:54,710 --> 00:28:57,159
awesome

00:28:57,310 --> 00:29:02,030
I'm saying this now like 12 years ago I

00:28:59,930 --> 00:29:04,430
was totally into and I couldn't

00:29:02,030 --> 00:29:07,880
understand why anybody would convert

00:29:04,430 --> 00:29:11,270
that to think or to PHP these days I see

00:29:07,880 --> 00:29:13,250
completely different um I share you in a

00:29:11,270 --> 00:29:14,780
second so thing for us is a kind of

00:29:13,250 --> 00:29:18,020
domain-specific language so again it's

00:29:14,780 --> 00:29:20,210
it's like it's like the the glue for any

00:29:18,020 --> 00:29:22,790
third party to my developer interacting

00:29:20,210 --> 00:29:24,350
with I don't want to remember I don't

00:29:22,790 --> 00:29:25,730
want them to remember all the different

00:29:24,350 --> 00:29:27,890
commandments which is that they have to

00:29:25,730 --> 00:29:30,410
use to force the different behavior that

00:29:27,890 --> 00:29:32,900
is way too annoying for them they just

00:29:30,410 --> 00:29:34,490
should know hey we have a Fink target

00:29:32,900 --> 00:29:36,260
called sniff that runs codes never

00:29:34,490 --> 00:29:38,270
exactly nobody want to configure it we

00:29:36,260 --> 00:29:43,280
run PHP on it exactly in the way we want

00:29:38,270 --> 00:29:45,350
or we need it we run different other

00:29:43,280 --> 00:29:47,150
tools that I just forgotten in exactly

00:29:45,350 --> 00:29:50,210
the same way that we want and thing is

00:29:47,150 --> 00:29:53,210
like the the the initial point of

00:29:50,210 --> 00:29:56,060
contact so to speak why thing because it

00:29:53,210 --> 00:29:58,880
runs everywhere where it runs everywhere

00:29:56,060 --> 00:30:00,830
where PHP runs we don't need anything

00:29:58,880 --> 00:30:02,210
additional like Java or whatnot which is

00:30:00,830 --> 00:30:06,560
quite funny because in a moment I show

00:30:02,210 --> 00:30:08,420
your Java to it has about 10 20

00:30:06,560 --> 00:30:10,700
predefined tasks that you can use in

00:30:08,420 --> 00:30:13,070
your scripts and most importantly for us

00:30:10,700 --> 00:30:17,060
it's super easy to write your own tasks

00:30:13,070 --> 00:30:19,160
are you can write them as a separate

00:30:17,060 --> 00:30:22,310
composer package and just install them

00:30:19,160 --> 00:30:26,210
install them as is you can put them into

00:30:22,310 --> 00:30:28,970
your current project and just include

00:30:26,210 --> 00:30:32,090
them in your in your thing configuration

00:30:28,970 --> 00:30:33,500
though that that's very cool to install

00:30:32,090 --> 00:30:36,140
thing damn I forgot to change his life

00:30:33,500 --> 00:30:38,780
we do use composer install composer

00:30:36,140 --> 00:30:41,000
require thing and we don't edit the file

00:30:38,780 --> 00:30:45,200
yourselves so Raphael don't blame me on

00:30:41,000 --> 00:30:47,300
Twitter right if we have done that we

00:30:45,200 --> 00:30:51,970
have in vendor bin thing the the de

00:30:47,300 --> 00:30:56,870
binary and we can run that damn everyone

00:30:51,970 --> 00:30:58,940
completely ruined this presentation we

00:30:56,870 --> 00:31:00,920
do have two configuration files we have

00:30:58,940 --> 00:31:02,840
a global built up properties file where

00:31:00,920 --> 00:31:05,000
we simply just configure different paths

00:31:02,840 --> 00:31:08,540
and where the executables executables

00:31:05,000 --> 00:31:10,130
are or any kind of options and we do use

00:31:08,540 --> 00:31:12,770
a local

00:31:10,130 --> 00:31:15,410
this file arm which is get ignored where

00:31:12,770 --> 00:31:17,150
our developers can make some changes if

00:31:15,410 --> 00:31:19,100
they want to or if they need to like in

00:31:17,150 --> 00:31:24,380
this case providing a user name for the

00:31:19,100 --> 00:31:26,920
ssh access we need to speed up you know

00:31:24,380 --> 00:31:30,380
this is the different put the fing

00:31:26,920 --> 00:31:33,050
project configuration arm this is how we

00:31:30,380 --> 00:31:38,030
load the build properties file the

00:31:33,050 --> 00:31:39,530
global one if a local one would exist it

00:31:38,030 --> 00:31:41,900
would first check if the file is

00:31:39,530 --> 00:31:44,000
available down at the bottom and then

00:31:41,900 --> 00:31:47,540
just load the the local properties file

00:31:44,000 --> 00:31:49,310
and overwrite the existing settings so

00:31:47,540 --> 00:31:52,010
just pretty quickly so this would be the

00:31:49,310 --> 00:31:54,980
output if the local de probably file is

00:31:52,010 --> 00:31:57,350
not available in the current folder if

00:31:54,980 --> 00:31:59,420
it is it would simply load it and you

00:31:57,350 --> 00:32:01,730
can also see that it was loaded which is

00:31:59,420 --> 00:32:04,100
also pretty interesting or pretty good

00:32:01,730 --> 00:32:06,860
to see when you know what's happening

00:32:04,100 --> 00:32:10,430
and again we do run thing why are why

00:32:06,860 --> 00:32:12,860
your puppet arm calling like the

00:32:10,430 --> 00:32:14,390
database migrations doing cash warming

00:32:12,860 --> 00:32:17,930
and whatnot so everything that is needed

00:32:14,390 --> 00:32:21,010
is run by a puppet so whenever the box

00:32:17,930 --> 00:32:23,570
is provisioned we can just work with it

00:32:21,010 --> 00:32:26,150
for database migrations I just said it

00:32:23,570 --> 00:32:27,920
we use liquid base on there are tons of

00:32:26,150 --> 00:32:30,530
alternatives are there there's DB deploy

00:32:27,920 --> 00:32:34,160
there is flyweight I think it's a Java

00:32:30,530 --> 00:32:37,490
tool doctrine migrations and PHP has its

00:32:34,160 --> 00:32:39,560
own one it's called things I'm still a

00:32:37,490 --> 00:32:41,900
big fan of liquid base we use it since I

00:32:39,560 --> 00:32:43,970
don't know seven or eight years when not

00:32:41,900 --> 00:32:47,300
over the other tools existed or word

00:32:43,970 --> 00:32:50,390
pretty bad so we just stick with that I

00:32:47,300 --> 00:32:54,170
like it arm you could either use XML

00:32:50,390 --> 00:32:55,850
syntax which I pretty much like define

00:32:54,170 --> 00:32:57,740
your change that's their create tables

00:32:55,850 --> 00:33:01,820
modified tables create indexes modify

00:32:57,740 --> 00:33:03,080
indexes whatnot the bonus point for for

00:33:01,820 --> 00:33:04,940
using XML is that its database

00:33:03,080 --> 00:33:06,350
independent so you can fire that against

00:33:04,940 --> 00:33:10,280
Mursi cool fire that against postcodes

00:33:06,350 --> 00:33:12,290
whatnot which in some cases is really

00:33:10,280 --> 00:33:14,150
important to do this doesn't happen very

00:33:12,290 --> 00:33:16,370
often to us but it happened like three

00:33:14,150 --> 00:33:18,410
or four times so we were thankful that

00:33:16,370 --> 00:33:21,490
we had the code abstracted in that way

00:33:18,410 --> 00:33:23,520
if you're really constancy in XML arm

00:33:21,490 --> 00:33:26,640
liquid base also supports

00:33:23,520 --> 00:33:28,950
sequel and I think jamo I'm not really

00:33:26,640 --> 00:33:30,930
sure about that one so I can pick what

00:33:28,950 --> 00:33:32,610
you like this is the the filesystem

00:33:30,930 --> 00:33:35,490
layer in our case so we have a database

00:33:32,610 --> 00:33:37,980
holder there is a def sub folder in

00:33:35,490 --> 00:33:40,680
which the liquid waste of XML file

00:33:37,980 --> 00:33:43,700
resides and all the change sets we

00:33:40,680 --> 00:33:47,820
outsource in the change the directory as

00:33:43,700 --> 00:33:50,250
single files and then include them in

00:33:47,820 --> 00:33:51,960
the main liquid-based file the change

00:33:50,250 --> 00:33:54,540
sets have a timestamp like the day when

00:33:51,960 --> 00:33:58,200
when the change that happened a unique

00:33:54,540 --> 00:34:00,960
number and like an identifier to at

00:33:58,200 --> 00:34:03,630
least have a rough idea what's going on

00:34:00,960 --> 00:34:05,310
it to change that and then to run to run

00:34:03,630 --> 00:34:07,710
liquor is we simply call thing to be

00:34:05,310 --> 00:34:09,510
updated so things come thing comes with

00:34:07,710 --> 00:34:12,270
a few liquid-based task that you can use

00:34:09,510 --> 00:34:14,399
um so this is basic what happens under

00:34:12,270 --> 00:34:16,409
the hood be we call the key base pass

00:34:14,399 --> 00:34:19,320
the driver configure the classpath and

00:34:16,409 --> 00:34:21,330
do some other stuff and then simply call

00:34:19,320 --> 00:34:25,980
the migrate task of liquor base which

00:34:21,330 --> 00:34:29,580
will do all the magic involved um right

00:34:25,980 --> 00:34:32,100
that something is to build server um so

00:34:29,580 --> 00:34:36,659
since four or five years we are big fans

00:34:32,100 --> 00:34:39,120
of Jenkins most of the time when things

00:34:36,659 --> 00:34:41,520
go go go when things break we don't like

00:34:39,120 --> 00:34:43,520
Jenkins anymore but that is that's

00:34:41,520 --> 00:34:46,890
that's a different story i can tell you

00:34:43,520 --> 00:34:51,210
somewhere else and since january we are

00:34:46,890 --> 00:34:53,580
using using get lab arm and this is how

00:34:51,210 --> 00:34:55,890
it works so indicate lab configuration

00:34:53,580 --> 00:34:58,860
get up i can configure webhook similar

00:34:55,890 --> 00:35:00,780
to to get help just pointing them to our

00:34:58,860 --> 00:35:02,910
jenkins instance and say hey whenever

00:35:00,780 --> 00:35:06,240
and push event happens or tag event

00:35:02,910 --> 00:35:08,810
happens just trigger the build this

00:35:06,240 --> 00:35:11,820
relies on the it lab jenkins plugin arm

00:35:08,810 --> 00:35:13,290
which then also can communicate back if

00:35:11,820 --> 00:35:16,890
the build was successful or not which

00:35:13,290 --> 00:35:19,290
pretty cool in jenkins we have quite a

00:35:16,890 --> 00:35:22,080
few built notes we have generic ones

00:35:19,290 --> 00:35:23,460
build node 1 227 which will run unit

00:35:22,080 --> 00:35:25,440
tests depending on different

00:35:23,460 --> 00:35:28,500
configurations different PHP versions

00:35:25,440 --> 00:35:30,840
and whatnot and we have built notes

00:35:28,500 --> 00:35:32,730
dedicated to single projects for the

00:35:30,840 --> 00:35:35,070
integration builds so project there's

00:35:32,730 --> 00:35:36,900
one dash interlock down at the bottom is

00:35:35,070 --> 00:35:39,599
actually a box

00:35:36,900 --> 00:35:41,089
specifically for project one where all

00:35:39,599 --> 00:35:43,140
the integration tests will happen I

00:35:41,089 --> 00:35:44,940
could have used the build node and then

00:35:43,140 --> 00:35:47,220
somehow push the files over but that was

00:35:44,940 --> 00:35:49,619
way too complicated for me so we simply

00:35:47,220 --> 00:35:51,839
created like dedicated build notes for

00:35:49,619 --> 00:35:52,890
these projects to configure start to

00:35:51,839 --> 00:35:55,020
build knows please you give it a name

00:35:52,890 --> 00:35:57,359
give it a description and what we

00:35:55,020 --> 00:35:59,279
extensively use these days is the labels

00:35:57,359 --> 00:36:01,020
plugin where we simply define what

00:35:59,279 --> 00:36:03,029
exactly is running on that that built

00:36:01,020 --> 00:36:05,900
host like in this case p HB 56 Center

00:36:03,029 --> 00:36:08,520
command 45 and PM puppet and energy am

00:36:05,900 --> 00:36:11,849
because that dramatically helps when you

00:36:08,520 --> 00:36:14,490
configure a job like in the past we we

00:36:11,849 --> 00:36:18,020
use the build node names when we wanted

00:36:14,490 --> 00:36:20,369
to try to bind a job to a build node

00:36:18,020 --> 00:36:23,190
which when you have like two or three

00:36:20,369 --> 00:36:25,380
build nodes is really easy to figure out

00:36:23,190 --> 00:36:28,920
what version of which software is

00:36:25,380 --> 00:36:31,470
running on what server if you have like

00:36:28,920 --> 00:36:38,190
five or more built notes up and running

00:36:31,470 --> 00:36:41,130
it can be quite messy which brought me

00:36:38,190 --> 00:36:46,910
to this idea that jenkins is a very good

00:36:41,130 --> 00:36:50,039
AI because jenkins let me rephrase it

00:36:46,910 --> 00:36:53,760
when Jenkins has the possibility to pick

00:36:50,039 --> 00:36:55,799
any to pick a specific build server out

00:36:53,760 --> 00:36:57,240
of the big pool it will always pick the

00:36:55,799 --> 00:37:00,809
one where at least one depends who's

00:36:57,240 --> 00:37:03,270
missing this is true this is

00:37:00,809 --> 00:37:07,920
reproducible I tried it hundreds of

00:37:03,270 --> 00:37:11,039
times this dai is damn good I've no idea

00:37:07,920 --> 00:37:14,010
how they do that so again to fix that I

00:37:11,039 --> 00:37:15,960
figure out how can I do that and then

00:37:14,010 --> 00:37:17,789
I've saw this labels plugin i thought

00:37:15,960 --> 00:37:20,069
hey that that's a cool thing and now i

00:37:17,789 --> 00:37:22,980
can in my job say hey give me a build

00:37:20,069 --> 00:37:26,010
node that has PHP 56 running and such a

00:37:22,980 --> 00:37:28,319
command 5 and 8 h p.m. and the Jenkins

00:37:26,010 --> 00:37:30,029
will calculate which build notes are in

00:37:28,319 --> 00:37:32,819
the pool of the available ones and then

00:37:30,029 --> 00:37:34,020
just pick one of those still you have to

00:37:32,819 --> 00:37:35,130
maintain that list but that's a

00:37:34,020 --> 00:37:38,490
different story that's a different pain

00:37:35,130 --> 00:37:40,680
point great and then we have to define

00:37:38,490 --> 00:37:42,539
the environment variables so what the

00:37:40,680 --> 00:37:44,849
developers do locally the bill don'ts

00:37:42,539 --> 00:37:47,849
need to do as well defined composer user

00:37:44,849 --> 00:37:49,740
and composer pass our spoiler these are

00:37:47,849 --> 00:37:53,369
not the values that we use in

00:37:49,740 --> 00:37:55,260
production environment right then we

00:37:53,369 --> 00:37:59,000
went then we configure our integration

00:37:55,260 --> 00:38:02,550
test built job we give it a name and we

00:37:59,000 --> 00:38:06,390
restrict it to this one box project dash

00:38:02,550 --> 00:38:09,360
1 dash interlock so it just runs on that

00:38:06,390 --> 00:38:12,330
particular host first and first first

00:38:09,360 --> 00:38:14,940
and foremost we complete copy the

00:38:12,330 --> 00:38:17,190
composer JSON file with the github or

00:38:14,940 --> 00:38:19,590
token from the master to the built nodes

00:38:17,190 --> 00:38:21,300
we could have used puppet to do that but

00:38:19,590 --> 00:38:23,040
we don't have any puppet layout for the

00:38:21,300 --> 00:38:25,320
build-out so I was looking for another

00:38:23,040 --> 00:38:26,700
way and found this Jenkins plug-in

00:38:25,320 --> 00:38:29,040
called the config file provide a plug-in

00:38:26,700 --> 00:38:30,360
that does exactly that which is pretty

00:38:29,040 --> 00:38:32,490
cool because now I have one central

00:38:30,360 --> 00:38:35,010
location to manage that file it's in

00:38:32,490 --> 00:38:37,230
Jenkins its bit stupid because for every

00:38:35,010 --> 00:38:38,790
job run the file will be copied but

00:38:37,230 --> 00:38:44,070
that's like three or four K so I don't

00:38:38,790 --> 00:38:46,560
care right so first for first and

00:38:44,070 --> 00:38:49,230
foremost we do validate the composer our

00:38:46,560 --> 00:38:55,250
JSON file turns out i suck at editing

00:38:49,230 --> 00:38:59,760
json phones we in the past we had a few

00:38:55,250 --> 00:39:02,700
libraries that did not provide code so

00:38:59,760 --> 00:39:05,130
there were no unit tests and such which

00:39:02,700 --> 00:39:06,270
means that Jenkins went fine triggered

00:39:05,130 --> 00:39:08,550
the saddest job and then settings

00:39:06,270 --> 00:39:10,770
exploded like well I can't read the

00:39:08,550 --> 00:39:12,359
configuration file a damn crap I need to

00:39:10,770 --> 00:39:15,150
do any I need to do something about it

00:39:12,359 --> 00:39:18,300
so we do validate the composer that JSON

00:39:15,150 --> 00:39:20,850
file on every job run just to make sure

00:39:18,300 --> 00:39:23,040
that everything works fine then we run

00:39:20,850 --> 00:39:25,260
the security checks so most of you

00:39:23,040 --> 00:39:27,090
probably do know that sense your labs

00:39:25,260 --> 00:39:31,320
has the security check our web service

00:39:27,090 --> 00:39:33,630
where they are have a list of packages

00:39:31,320 --> 00:39:37,500
or package versions that have issues

00:39:33,630 --> 00:39:41,070
according to these to these public bug

00:39:37,500 --> 00:39:43,740
tracking libraries whatnot and you can

00:39:41,070 --> 00:39:45,000
post a composer lock file to to that to

00:39:43,740 --> 00:39:50,990
that service and then you get a list of

00:39:45,000 --> 00:39:53,970
errors back um I built a small thing

00:39:50,990 --> 00:39:55,470
thing task to communicate with that with

00:39:53,970 --> 00:39:58,290
that service and this is exactly what we

00:39:55,470 --> 00:40:01,740
invoke um so to just to figure out if

00:39:58,290 --> 00:40:03,040
anything is good or not and then we do

00:40:01,740 --> 00:40:05,990
run the

00:40:03,040 --> 00:40:08,750
the bootstrapping file exactly the same

00:40:05,990 --> 00:40:10,520
way as vagrant would do passing a few

00:40:08,750 --> 00:40:13,070
options passing the composer and user

00:40:10,520 --> 00:40:15,080
environment variables and so jenkins

00:40:13,070 --> 00:40:21,200
invokes packet which would technically

00:40:15,080 --> 00:40:25,700
install anything that is needed downside

00:40:21,200 --> 00:40:29,180
of this is and this is really weird when

00:40:25,700 --> 00:40:32,480
you look at the log of the job you will

00:40:29,180 --> 00:40:35,450
see the user and the password in clear

00:40:32,480 --> 00:40:37,670
text I have no idea how how Jenkins does

00:40:35,450 --> 00:40:41,420
that but it's it's true so I figure out

00:40:37,670 --> 00:40:42,830
damn when a developer looks at that he

00:40:41,420 --> 00:40:45,140
knows exactly our user and password

00:40:42,830 --> 00:40:48,130
that's not what I want to do not that I

00:40:45,140 --> 00:40:50,060
do not trust my developers but anyway

00:40:48,130 --> 00:40:51,530
turns out there a solution for that

00:40:50,060 --> 00:40:53,420
there is a Jenkins plugin called the

00:40:51,530 --> 00:40:56,060
mask passwords plugin and so you can

00:40:53,420 --> 00:41:00,290
simply define a white list of words or

00:40:56,060 --> 00:41:05,240
whatever that should be masked and so

00:41:00,290 --> 00:41:07,160
the output gets disguised right and then

00:41:05,240 --> 00:41:09,920
we run the build we call our CI build

00:41:07,160 --> 00:41:12,410
the target of thing which runs costa for

00:41:09,920 --> 00:41:15,140
phpunit PDP and all the integration

00:41:12,410 --> 00:41:17,450
tests what not and if that worked out

00:41:15,140 --> 00:41:19,460
fine arm it communicates it back to

00:41:17,450 --> 00:41:23,480
Jenkins add two to get lab which gives

00:41:19,460 --> 00:41:27,650
me like this bill passed and then from

00:41:23,480 --> 00:41:30,140
there we can do the deployment which is

00:41:27,650 --> 00:41:33,410
basically calling just another thing

00:41:30,140 --> 00:41:36,440
target we have appt deploy death ft plus

00:41:33,410 --> 00:41:38,870
stage ft production which simply are

00:41:36,440 --> 00:41:41,240
swings all local files up to the to the

00:41:38,870 --> 00:41:45,710
server and then runs the deploy script

00:41:41,240 --> 00:41:47,480
which does a lot of magic arm like well

00:41:45,710 --> 00:41:48,650
first of all first and foremost invoking

00:41:47,480 --> 00:41:50,870
the bootstrapping file which one's

00:41:48,650 --> 00:41:52,580
puppet and all the stuff and just a lot

00:41:50,870 --> 00:41:55,490
of backup in and things and they're like

00:41:52,580 --> 00:42:01,810
and then redirecting siblings and that's

00:41:55,490 --> 00:42:01,810
it yeah so I'm done thank you very much

00:42:02,310 --> 00:42:14,850
I know this was a lot of information do

00:42:09,340 --> 00:42:14,850
you have any questions yes

00:42:21,770 --> 00:42:26,730
which tools have you tried in the past

00:42:24,210 --> 00:42:28,560
which are now no longer part of your

00:42:26,730 --> 00:42:29,730
tool chain so what were the dead ends of

00:42:28,560 --> 00:42:42,380
things you've looked at it didn't work

00:42:29,730 --> 00:42:47,070
out too many to remember to be fair

00:42:42,380 --> 00:42:50,250
actually not that much so mmm we are not

00:42:47,070 --> 00:42:53,160
actually none well anything non yeah

00:42:50,250 --> 00:42:55,050
yeah that'sthat's probably is yeah but

00:42:53,160 --> 00:42:58,040
maybe one or two plugins that I just

00:42:55,050 --> 00:43:04,080
don't recall but more or less than done

00:42:58,040 --> 00:43:10,010
thank you anyone else come on challenge

00:43:04,080 --> 00:43:13,050
to German over here I didn't have any

00:43:10,010 --> 00:43:15,330
experience with ansible I'm in a set up

00:43:13,050 --> 00:43:18,210
similar to this to be fair not at all no

00:43:15,330 --> 00:43:20,610
so we stick to puppet we have a few

00:43:18,210 --> 00:43:23,430
issues with that but the pain is not so

00:43:20,610 --> 00:43:26,490
big that I would migrate mostly because

00:43:23,430 --> 00:43:28,080
we spend a lot of time or we invested a

00:43:26,490 --> 00:43:30,600
lot of time into this whole puppet set

00:43:28,080 --> 00:43:32,250
up to make things up and running that's

00:43:30,600 --> 00:43:33,990
why I don't switch even though ansible

00:43:32,250 --> 00:43:37,710
sounds pretty cool or assault sounds

00:43:33,990 --> 00:43:44,660
pretty cool yeah so I I have no personal

00:43:37,710 --> 00:43:44,660
experience with that it once in the back

00:43:46,289 --> 00:43:51,789
hi you're talking about building all

00:43:49,629 --> 00:43:55,029
your boxes from scratch and destroying

00:43:51,789 --> 00:43:57,389
the right base boxes locally we've ended

00:43:55,029 --> 00:43:59,469
up creating base boxes of our own from a

00:43:57,389 --> 00:44:01,899
generic base box and storing them

00:43:59,469 --> 00:44:03,699
locally have you tried that approach and

00:44:01,899 --> 00:44:06,129
did you have a positive or negative

00:44:03,699 --> 00:44:07,839
experience either way well we haven't

00:44:06,129 --> 00:44:10,149
built a base box completely from scratch

00:44:07,839 --> 00:44:12,189
but I took like one I found on one of

00:44:10,149 --> 00:44:14,139
these sites and customized it and use

00:44:12,189 --> 00:44:17,739
that as like the bass box for all of our

00:44:14,139 --> 00:44:19,899
projects right now yeah so do you build

00:44:17,739 --> 00:44:21,699
on top of that box quite extensively to

00:44:19,899 --> 00:44:23,709
get to a point where you're ready to use

00:44:21,699 --> 00:44:27,009
it or do you well we don't install that

00:44:23,709 --> 00:44:28,959
much tools like mostly we install tools

00:44:27,009 --> 00:44:30,609
like Java which is like really big to

00:44:28,959 --> 00:44:34,269
download and I want to do not want to

00:44:30,609 --> 00:44:36,099
done it all over the time and some other

00:44:34,269 --> 00:44:38,229
tools we we need like puppet is

00:44:36,099 --> 00:44:41,769
installed on us on this box and some

00:44:38,229 --> 00:44:45,519
other tools so we don't install that

00:44:41,769 --> 00:44:47,499
many tools we try to make it as broadly

00:44:45,519 --> 00:44:49,359
as possible because we have so many

00:44:47,499 --> 00:44:52,419
different projects I don't want to

00:44:49,359 --> 00:44:57,719
install too many different parts of the

00:44:52,419 --> 00:44:57,719
software on this machine okay thanks

00:45:05,980 --> 00:45:11,300
I have two questions actually so the

00:45:09,080 --> 00:45:13,220
first one is what type of file sharing

00:45:11,300 --> 00:45:16,040
do you use between the host and the

00:45:13,220 --> 00:45:19,849
visual machine if I sharing file sharing

00:45:16,040 --> 00:45:21,859
type arm so we use the default one which

00:45:19,849 --> 00:45:24,740
is I don't know what the somber one I

00:45:21,859 --> 00:45:26,960
think is it that can be really slow I

00:45:24,740 --> 00:45:31,160
know so especially if you do a lot of

00:45:26,960 --> 00:45:32,599
front and work I had issues convincing

00:45:31,160 --> 00:45:35,780
my front end developers that this is

00:45:32,599 --> 00:45:37,940
still a good thing we tried the rsync

00:45:35,780 --> 00:45:41,119
one which which comes with with Raymond

00:45:37,940 --> 00:45:43,040
which works pretty good but over time

00:45:41,119 --> 00:45:46,099
gets really slow or got really slow back

00:45:43,040 --> 00:45:49,190
in the past i found a plug-in called the

00:45:46,099 --> 00:45:51,349
Gatling air sink plug in that seemed to

00:45:49,190 --> 00:45:54,680
work pretty good but we I think we don't

00:45:51,349 --> 00:45:56,359
use it in any development right now yeah

00:45:54,680 --> 00:45:58,910
but this is really a pain point here

00:45:56,359 --> 00:46:00,800
okay and the second question is have you

00:45:58,910 --> 00:46:04,130
thought about using docker instead of

00:46:00,800 --> 00:46:07,160
vagrant and it at least linux instances

00:46:04,130 --> 00:46:08,810
it would face the performance issue well

00:46:07,160 --> 00:46:12,470
that's actually a thing that I want to

00:46:08,810 --> 00:46:15,880
do this year arm turns out we had this

00:46:12,470 --> 00:46:18,530
build pipelines stuff finished in like

00:46:15,880 --> 00:46:20,390
2013 and it was running and we had no

00:46:18,530 --> 00:46:22,700
issues anymore and then I was a toss

00:46:20,390 --> 00:46:25,790
cone and this guy presented talker and

00:46:22,700 --> 00:46:30,619
holy crap I need to throw out stuff away

00:46:25,790 --> 00:46:34,369
and your stalker so I had to wait a bit

00:46:30,619 --> 00:46:37,460
just to make sure my developers are able

00:46:34,369 --> 00:46:38,750
to to cope with change again this is

00:46:37,460 --> 00:46:41,900
actually something that I want to do

00:46:38,750 --> 00:46:43,369
this year yeah so we have our own talker

00:46:41,900 --> 00:46:44,690
instance in production right now which

00:46:43,369 --> 00:46:46,400
is the gate lab stuff so this is

00:46:44,690 --> 00:46:48,380
completely powered by darker so that

00:46:46,400 --> 00:46:49,970
just gives us a few ideas on how to run

00:46:48,380 --> 00:46:51,650
that stuff and I want to also use that

00:46:49,970 --> 00:46:55,700
locally because technically this is

00:46:51,650 --> 00:46:59,240
stupid what we do arm because we come on

00:46:55,700 --> 00:47:00,950
it is yeah be back and forth like we

00:46:59,240 --> 00:47:02,900
don't have like a build artifact right

00:47:00,950 --> 00:47:05,119
so Jenkins runs a build on a good tag

00:47:02,900 --> 00:47:07,010
and over here someone just our swings

00:47:05,119 --> 00:47:12,440
his local stuff on the production

00:47:07,010 --> 00:47:15,830
servers it never never something went

00:47:12,440 --> 00:47:17,220
wrong let me put it that way but still

00:47:15,830 --> 00:47:19,800
it feels it feels

00:47:17,220 --> 00:47:21,420
wrong right I want to reproduce a driver

00:47:19,800 --> 00:47:23,070
reproducing package that I know that

00:47:21,420 --> 00:47:24,900
Jenkins is is happy with and the

00:47:23,070 --> 00:47:26,700
developers are happy then that I can

00:47:24,900 --> 00:47:28,800
easily push production so this this has

00:47:26,700 --> 00:47:30,660
to come here so i might be back next

00:47:28,800 --> 00:47:37,230
year showing you how to use stalker in

00:47:30,660 --> 00:47:41,730
it in that case anyone else yeah hi are

00:47:37,230 --> 00:47:43,530
you using saxes to proxy third-party

00:47:41,730 --> 00:47:48,990
libraries that you didn't create

00:47:43,530 --> 00:47:51,869
yourself for speed hmm since a few weeks

00:47:48,990 --> 00:47:54,480
yes specifically specifically for

00:47:51,869 --> 00:47:56,940
Magento so we had a few magenta project

00:47:54,480 --> 00:47:58,800
and we just pull in their status or they

00:47:56,940 --> 00:48:01,349
or whatever they use into our own

00:47:58,800 --> 00:48:05,190
service we don't use it for any other

00:48:01,349 --> 00:48:07,020
packages because it's quite hard to

00:48:05,190 --> 00:48:09,210
maintain let me put it that way because

00:48:07,020 --> 00:48:10,920
you have to edit the composer lead set

00:48:09,210 --> 00:48:12,570
this configuration every single time and

00:48:10,920 --> 00:48:14,790
we use so many different packages that

00:48:12,570 --> 00:48:16,890
it just doesn't make any sense to to

00:48:14,790 --> 00:48:18,420
edit that so this is really a point

00:48:16,890 --> 00:48:20,609
where there where the torrent proxy

00:48:18,420 --> 00:48:22,650
solution would come into handy because

00:48:20,609 --> 00:48:24,540
that stuff just the caching

00:48:22,650 --> 00:48:27,589
automatically in the background so that

00:48:24,540 --> 00:48:35,190
would be the only only pro point for us

00:48:27,589 --> 00:48:39,240
for this for the switch anyone's no one

00:48:35,190 --> 00:48:42,240
okay cool so lesson least if you enjoyed

00:48:39,240 --> 00:48:44,640
the talk please rate it um I'm not sure

00:48:42,240 --> 00:48:48,540
if I will do it again but still feed bag

00:48:44,640 --> 00:48:51,210
of school I gave you my experience you

00:48:48,540 --> 00:48:53,670
give me your ratings this is how we do

00:48:51,210 --> 00:48:56,390
yeah this is how we roll so thank you

00:48:53,670 --> 00:48:56,390
very much for having me

00:48:57,370 --> 00:48:59,430

YouTube URL: https://www.youtube.com/watch?v=kk-vImUfXjM


