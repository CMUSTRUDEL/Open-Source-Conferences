Title: PHP UK Conference 2016 - Szymon Skórczyński - Docker & PHP development and deployment
Publication date: 2016-03-17
Playlist: PHP UK Conference 2016
Description: 
	Docker has recently been one of the hottest words in the web technology world. But why is it so? Isn’t it just another “hyper tool” that will be forgotten in a year? I’ve been using Docker for one year to develop and deploy both professional and pet projects. During this year I worked out my very own set of best practices to deal with Docker, that I’d like to share with you. Why is Docker so popular? Is it hard to use it? How to use it to develop PHP applications and how to deploy them into the cloud? What are the main threats of Docker? Is it worth to use it? If you ever thought about any of these questions, this presentation should be interesting for you.
Captions: 
	00:00:11,940 --> 00:00:23,529
well hello can you hear me yeah okay so

00:00:20,890 --> 00:00:26,230
my name is Shimon I've been coding and

00:00:23,529 --> 00:00:29,079
PHP since my teens and for four years

00:00:26,230 --> 00:00:30,310
I've been doing it for living you may

00:00:29,079 --> 00:00:32,529
find me on Twitter

00:00:30,310 --> 00:00:38,530
github medium and so on by the nickname

00:00:32,529 --> 00:00:41,230
SS kor see i come from poland and i live

00:00:38,530 --> 00:00:44,320
in this beautiful city of dice where I

00:00:41,230 --> 00:00:46,240
work for ships that back polska this is

00:00:44,320 --> 00:00:48,460
part of the ships that media group the

00:00:46,240 --> 00:00:51,220
largest media house in Scandinavia is

00:00:48,460 --> 00:00:59,610
here anyone from Sweden or Norway by any

00:00:51,220 --> 00:01:04,030
chance what a shame

00:00:59,610 --> 00:01:06,580
anyway in ships the tech pasca beside

00:01:04,030 --> 00:01:08,950
the fact that I write some code in PHP I

00:01:06,580 --> 00:01:10,990
use docker on a daily basis for a

00:01:08,950 --> 00:01:13,420
development and deployment of web

00:01:10,990 --> 00:01:15,490
applications I've been using it for a

00:01:13,420 --> 00:01:18,280
year and a half now and during this time

00:01:15,490 --> 00:01:20,890
I worked out my very own set set of best

00:01:18,280 --> 00:01:23,860
practices to deal with docker that I'd

00:01:20,890 --> 00:01:25,900
like to share with you today and of

00:01:23,860 --> 00:01:28,300
course for those of you who are not

00:01:25,900 --> 00:01:31,060
familiar with docker I'll try to provide

00:01:28,300 --> 00:01:34,240
some basic set of information what is it

00:01:31,060 --> 00:01:36,790
and why to use it therefore could you

00:01:34,240 --> 00:01:42,150
please rise your hands those who know

00:01:36,790 --> 00:01:45,370
what docker is ok quite a lot almost

00:01:42,150 --> 00:01:51,640
yeah almost everyone and who have you

00:01:45,370 --> 00:01:52,869
used docker ok several and who have you

00:01:51,640 --> 00:01:58,240
use docker on production

00:01:52,869 --> 00:02:03,850
Oh nearly nobody ok three three four

00:01:58,240 --> 00:02:06,850
hands up cool ok let's start with a

00:02:03,850 --> 00:02:09,189
question what makes docker so good what

00:02:06,850 --> 00:02:10,899
makes it so interesting to spend time on

00:02:09,189 --> 00:02:14,409
this fantastic conference to talk about

00:02:10,899 --> 00:02:16,840
it and those of you who don't know don't

00:02:14,409 --> 00:02:21,280
know docker please treat this part as

00:02:16,840 --> 00:02:23,500
Walter's daughter part well a little bit

00:02:21,280 --> 00:02:25,870
of history of transports and

00:02:23,500 --> 00:02:28,090
sticks at the beginning the introduction

00:02:25,870 --> 00:02:30,190
of intermodal containers like these has

00:02:28,090 --> 00:02:32,230
revolutionized the cargo transport

00:02:30,190 --> 00:02:35,590
containers can be used across different

00:02:32,230 --> 00:02:37,810
modes of transport from ship to rail to

00:02:35,590 --> 00:02:40,840
truck without unloading and reloading

00:02:37,810 --> 00:02:44,590
the cargo the same idea stands behind

00:02:40,840 --> 00:02:46,660
docker with docker you create a virtual

00:02:44,590 --> 00:02:49,420
container with an application and its

00:02:46,660 --> 00:02:53,250
dependencies once and you can run it on

00:02:49,420 --> 00:02:56,950
any Linux instance I mean your laptop

00:02:53,250 --> 00:03:00,640
your local server public or private

00:02:56,950 --> 00:03:02,709
cloud it means that if you only want

00:03:00,640 --> 00:03:04,420
your local development environment can

00:03:02,709 --> 00:03:08,200
be exactly the same as the production

00:03:04,420 --> 00:03:09,910
environment of course you can easily

00:03:08,200 --> 00:03:11,650
share the environment configuration with

00:03:09,910 --> 00:03:13,330
your team mates so that all you love

00:03:11,650 --> 00:03:16,900
team members can have exactly the same

00:03:13,330 --> 00:03:19,660
local development environment and of

00:03:16,900 --> 00:03:23,070
course setting up the environment for a

00:03:19,660 --> 00:03:25,480
new guy in the team is fast and easy

00:03:23,070 --> 00:03:27,340
what's more docker uses resources

00:03:25,480 --> 00:03:29,500
isolation features of the Linux kernel

00:03:27,340 --> 00:03:32,049
such as C groups or current line

00:03:29,500 --> 00:03:33,989
namespaces so that every container run

00:03:32,049 --> 00:03:36,430
within a single Linux instance is

00:03:33,989 --> 00:03:38,049
independent and isolated from both other

00:03:36,430 --> 00:03:41,160
containers as well as the host machine

00:03:38,049 --> 00:03:43,180
it means that you can maintain different

00:03:41,160 --> 00:03:45,160
development or production environment

00:03:43,180 --> 00:03:47,470
environments on one machine without a

00:03:45,160 --> 00:03:49,870
hassle for example you can run different

00:03:47,470 --> 00:03:52,239
PHP versions different web servers or

00:03:49,870 --> 00:03:54,070
databases without risk that one tool

00:03:52,239 --> 00:03:58,959
will spoil something in another tool or

00:03:54,070 --> 00:04:02,230
the host machine you may say that things

00:03:58,959 --> 00:04:05,739
I mentioned those were Portability and

00:04:02,230 --> 00:04:08,530
isolation can be achieved with vagrant

00:04:05,739 --> 00:04:15,850
and provisioning tools like puppet chef

00:04:08,530 --> 00:04:18,250
or ansible well yes they can but one of

00:04:15,850 --> 00:04:20,530
the most important drawbacks of vagrant

00:04:18,250 --> 00:04:23,290
or virtual machines generally is that

00:04:20,530 --> 00:04:28,840
they are heavy and often slow like a

00:04:23,290 --> 00:04:31,570
real oral docker containers do not

00:04:28,840 --> 00:04:35,140
include a separate operating system like

00:04:31,570 --> 00:04:37,510
literal machines do instead they all

00:04:35,140 --> 00:04:40,480
share the same Linux kernel

00:04:37,510 --> 00:04:42,700
and in consequence the performance of

00:04:40,480 --> 00:04:46,150
docker containers is nearly identical to

00:04:42,700 --> 00:04:48,430
bare metal with more docker images have

00:04:46,150 --> 00:04:49,300
less structure are cached and can be

00:04:48,430 --> 00:04:52,090
easily shared

00:04:49,300 --> 00:04:57,430
what makes provisioning much faster than

00:04:52,090 --> 00:05:00,550
with puppet chef or ansible another cool

00:04:57,430 --> 00:05:03,070
idea of docker in docker you can run

00:05:00,550 --> 00:05:04,990
only one process on a container it means

00:05:03,070 --> 00:05:07,600
that each part of your stack like a web

00:05:04,990 --> 00:05:09,790
server or a database should be run in a

00:05:07,600 --> 00:05:11,290
separate container in fact you can

00:05:09,790 --> 00:05:13,630
create your dock environment using

00:05:11,290 --> 00:05:15,550
different linked together containers the

00:05:13,630 --> 00:05:16,890
same way you build something with Lego

00:05:15,550 --> 00:05:19,810
bricks

00:05:16,890 --> 00:05:21,880
what's more docker provides the service

00:05:19,810 --> 00:05:24,760
called docker hat it is the ultimate

00:05:21,880 --> 00:05:27,070
source of docker images there are 86

00:05:24,760 --> 00:05:29,860
official images for different tools like

00:05:27,070 --> 00:05:32,350
web servers databases or different PP HP

00:05:29,860 --> 00:05:33,970
versions as well as thousands of

00:05:32,350 --> 00:05:36,670
unofficial images created by the

00:05:33,970 --> 00:05:38,530
community if you want to test out some

00:05:36,670 --> 00:05:41,260
framework or tool it's highly probable

00:05:38,530 --> 00:05:43,840
that there has been some image with it

00:05:41,260 --> 00:05:45,880
and it can see it it can be easily tried

00:05:43,840 --> 00:05:47,890
out you don't need to worry how to

00:05:45,880 --> 00:05:50,440
install or configure some particular

00:05:47,890 --> 00:05:52,870
tool all you need to do is to find an

00:05:50,440 --> 00:05:57,850
image with it on docker hub download it

00:05:52,870 --> 00:05:59,440
and run it before we move on let me give

00:05:57,850 --> 00:06:01,660
you one short explanation about the

00:05:59,440 --> 00:06:03,220
difference between images and containers

00:06:01,660 --> 00:06:06,040
because these two words have been

00:06:03,220 --> 00:06:07,990
mentioned by me already a few times in

00:06:06,040 --> 00:06:10,210
brief the difference between them is

00:06:07,990 --> 00:06:12,820
similar to the difference between a

00:06:10,210 --> 00:06:16,180
class and an object in object-oriented

00:06:12,820 --> 00:06:17,980
programming an image is a kind of a

00:06:16,180 --> 00:06:23,200
model based on which containers are made

00:06:17,980 --> 00:06:26,680
containers are instances of images okay

00:06:23,200 --> 00:06:29,500
then let's move to the question how to

00:06:26,680 --> 00:06:32,110
use docker to develop PHP applications I

00:06:29,500 --> 00:06:35,830
asked I will answer this by explaining

00:06:32,110 --> 00:06:37,330
two different use cases but before we

00:06:35,830 --> 00:06:39,970
move to the first use case one important

00:06:37,330 --> 00:06:43,030
information docker engine can be run

00:06:39,970 --> 00:06:44,920
only on Linux fun fact about windows is

00:06:43,030 --> 00:06:46,720
that Microsoft has spent quite a lot of

00:06:44,920 --> 00:06:48,940
money in docker development and in

00:06:46,720 --> 00:06:50,639
consequence Windows Server 2016 is going

00:06:48,940 --> 00:06:53,460
to have its own docker

00:06:50,639 --> 00:06:56,580
implementation it means that we will be

00:06:53,460 --> 00:07:00,120
able to create Windows based containers

00:06:56,580 --> 00:07:01,889
and run them on Windows anyway let's

00:07:00,120 --> 00:07:04,650
stick to Linux since this is the most

00:07:01,889 --> 00:07:07,439
common use case in web development if

00:07:04,650 --> 00:07:09,719
you want to run Linux based docker

00:07:07,439 --> 00:07:11,550
containers on Mac or Windows you need a

00:07:09,719 --> 00:07:12,979
virtual machine with Linux and docker

00:07:11,550 --> 00:07:15,360
engine installed

00:07:12,979 --> 00:07:17,340
fortunately docker created very cozy

00:07:15,360 --> 00:07:19,349
tool called docker machine the tool

00:07:17,340 --> 00:07:20,610
creates transparent virtual machine with

00:07:19,349 --> 00:07:23,759
docker engine on non Linux operating

00:07:20,610 --> 00:07:26,310
systems I mean Windows and Mac it works

00:07:23,759 --> 00:07:28,199
like this on your host and this is macro

00:07:26,310 --> 00:07:30,719
Windows you have some local clients the

00:07:28,199 --> 00:07:32,430
standard one is docker CLE you also have

00:07:30,719 --> 00:07:34,319
a virtual machine with some a boon to

00:07:32,430 --> 00:07:35,669
being run on some hypervisor the

00:07:34,319 --> 00:07:38,250
standard one is VirtualBox

00:07:35,669 --> 00:07:40,469
on this video machine you have dr engine

00:07:38,250 --> 00:07:48,569
installed all your containers are being

00:07:40,469 --> 00:07:51,360
run on this virtual machine because of

00:07:48,569 --> 00:07:53,610
the fact that on Mac and Windows you

00:07:51,360 --> 00:07:56,159
need you need a virtual machine the

00:07:53,610 --> 00:07:59,120
runtime performance is not a lot better

00:07:56,159 --> 00:08:01,319
than when using vagrant however at least

00:07:59,120 --> 00:08:03,629
creating starting and stopping

00:08:01,319 --> 00:08:09,240
containers is much faster than starting

00:08:03,629 --> 00:08:12,330
and stopping virtual machines ok let's

00:08:09,240 --> 00:08:15,810
take a look how using docker dr. machine

00:08:12,330 --> 00:08:22,139
works in practice so I have a demo for

00:08:15,810 --> 00:08:25,500
this first we need to create a machine

00:08:22,139 --> 00:08:26,879
or start it if we have one I've already

00:08:25,500 --> 00:08:29,189
created the machine to use in the demo

00:08:26,879 --> 00:08:33,750
because it takes some time to create it

00:08:29,189 --> 00:08:41,070
so we can start it by typing docker

00:08:33,750 --> 00:08:43,800
machine start PHP UK this is the name of

00:08:41,070 --> 00:08:45,690
the machine we use in this case so it

00:08:43,800 --> 00:08:47,990
takes a couple of seconds to start the

00:08:45,690 --> 00:08:47,990
machine

00:08:51,160 --> 00:08:57,769
yeah the machine has been stuff has been

00:08:54,740 --> 00:08:59,990
started so as we can see in the

00:08:57,769 --> 00:09:01,820
instruction it's recommended to run

00:08:59,990 --> 00:09:04,790
docker machine and of command followed

00:09:01,820 --> 00:09:06,890
by the name of the of followed by the

00:09:04,790 --> 00:09:08,930
name of the machine the purpose of this

00:09:06,890 --> 00:09:12,230
comment is to print the comment we

00:09:08,930 --> 00:09:15,740
should copy paste in the console to make

00:09:12,230 --> 00:09:22,760
it communicate with this machine so we

00:09:15,740 --> 00:09:28,610
can type docker machine and and name so

00:09:22,760 --> 00:09:30,110
PHP ok ok so we are being instructed to

00:09:28,610 --> 00:09:32,300
run the same as before but this time

00:09:30,110 --> 00:09:37,899
with evil this comment on Windows would

00:09:32,300 --> 00:09:45,410
be different so we can copy/paste it and

00:09:37,899 --> 00:09:48,170
run it yeah and our console is ready to

00:09:45,410 --> 00:09:52,690
communicate with docker machine we can

00:09:48,170 --> 00:09:52,690
prove it by typing docker info command

00:09:52,720 --> 00:10:00,020
so we can see information about our

00:09:55,070 --> 00:10:01,850
docker and docker engine so we are ready

00:10:00,020 --> 00:10:04,190
to start playing with docker but there

00:10:01,850 --> 00:10:06,770
is also there is another step useful

00:10:04,190 --> 00:10:08,990
step to follow if we are developing some

00:10:06,770 --> 00:10:11,750
heavy PHP applications and by this I

00:10:08,990 --> 00:10:13,850
mean almost any modern PHP framework

00:10:11,750 --> 00:10:17,050
with a lot of dependencies it's

00:10:13,850 --> 00:10:20,149
recommended to change default sharing

00:10:17,050 --> 00:10:23,390
file sharing type from native VirtualBox

00:10:20,149 --> 00:10:25,310
2nf us and we can easily deal with it by

00:10:23,390 --> 00:10:27,800
using third-party tool which is called

00:10:25,310 --> 00:10:30,079
docker machine NFS all we need to do is

00:10:27,800 --> 00:10:31,550
to download it from github install and

00:10:30,079 --> 00:10:32,810
in consequence we will have doctor

00:10:31,550 --> 00:10:37,279
machine and the first comment in our

00:10:32,810 --> 00:10:39,529
console and we can run it so what we

00:10:37,279 --> 00:10:41,839
need to do is to type doctor machine and

00:10:39,529 --> 00:10:49,040
a fast followed by the name of the

00:10:41,839 --> 00:10:52,149
machine yeah and this is it so we can

00:10:49,040 --> 00:10:52,149
enjoy high speed mounts

00:10:52,570 --> 00:11:01,570
this is it about docker machine let's

00:10:56,540 --> 00:11:01,570
take a look how it can be used

00:11:03,070 --> 00:11:09,310
so let's move to the first use case

00:11:05,740 --> 00:11:11,199
where docker shows its strength I have a

00:11:09,310 --> 00:11:15,670
question how many of you guys have

00:11:11,199 --> 00:11:18,310
already tested new PHP seven okay not

00:11:15,670 --> 00:11:22,240
that many cool a friend of mine has

00:11:18,310 --> 00:11:24,940
recently asked me a question well I have

00:11:22,240 --> 00:11:28,149
few projects in PHP 5 and I'd like to

00:11:24,940 --> 00:11:31,810
test PHP 7 and how to do this how to

00:11:28,149 --> 00:11:34,509
install PHP 7 and don't spoil PHP 5 as

00:11:31,810 --> 00:11:37,329
we all know running to PHP versions at

00:11:34,509 --> 00:11:40,449
once on one machine can be a hassle so I

00:11:37,329 --> 00:11:42,850
said to my friend find PHP 7 I mentioned

00:11:40,449 --> 00:11:44,440
docker hub download it and play it he

00:11:42,850 --> 00:11:46,930
said he wouldn't like to use docker

00:11:44,440 --> 00:11:48,790
because he'd heard he had no he had no

00:11:46,930 --> 00:11:52,420
experience with that and he had its

00:11:48,790 --> 00:12:00,550
heart and I said well it isn't really

00:11:52,420 --> 00:12:02,350
and I showed him this assuming we have

00:12:00,550 --> 00:12:04,509
docker ecosystem installed and this is

00:12:02,350 --> 00:12:08,649
this is pretty easy all we need to do is

00:12:04,509 --> 00:12:11,519
to follow tutorial on docker website you

00:12:08,649 --> 00:12:15,760
need to pull PHP 7s from docker hat and

00:12:11,519 --> 00:12:17,560
you can do it by running docker pull

00:12:15,760 --> 00:12:23,050
command followed by the name and this is

00:12:17,560 --> 00:12:24,430
PHP : 7 this image is being pulled from

00:12:23,050 --> 00:12:27,760
the docker hub zone from from the

00:12:24,430 --> 00:12:31,930
internet I have this image pulled

00:12:27,760 --> 00:12:35,850
already so it didn't take much time then

00:12:31,930 --> 00:12:39,790
we can run our PHP 7 script on it and

00:12:35,850 --> 00:12:43,180
maybe let's try how the new spaceship

00:12:39,790 --> 00:12:46,000
operator works so I have a script that

00:12:43,180 --> 00:12:49,149
uses this new spaceship operator let's

00:12:46,000 --> 00:12:53,800
take a look and it uses a special

00:12:49,149 --> 00:12:56,380
operator in the if statement so it will

00:12:53,800 --> 00:12:59,560
print its PHP 7 if this special prater

00:12:56,380 --> 00:13:04,329
works and it should print syntax error

00:12:59,560 --> 00:13:09,160
if it doesn't so let's start our

00:13:04,329 --> 00:13:12,279
container to well to run this script we

00:13:09,160 --> 00:13:15,190
need to we need to run the container and

00:13:12,279 --> 00:13:20,050
we do this by

00:13:15,190 --> 00:13:23,290
using docker around comment so we're on

00:13:20,050 --> 00:13:25,750
docker we type docker run with some

00:13:23,290 --> 00:13:30,490
parameters so this two standard ones are

00:13:25,750 --> 00:13:32,740
ite and these are for interactive

00:13:30,490 --> 00:13:35,320
processors basically T pretends

00:13:32,740 --> 00:13:36,910
container to be TTY and I is to keep a

00:13:35,320 --> 00:13:41,680
sturdy and open doesn't really matter

00:13:36,910 --> 00:13:45,010
you just need to type them then then

00:13:41,680 --> 00:13:49,180
some some some another parameters so

00:13:45,010 --> 00:13:52,660
it's useful and it's I mean it's

00:13:49,180 --> 00:13:55,930
necessary to share the script we have

00:13:52,660 --> 00:13:59,050
with the container so we do this by

00:13:55,930 --> 00:14:04,660
setting up volume and they do and we do

00:13:59,050 --> 00:14:09,490
this by using V parameter so in this

00:14:04,660 --> 00:14:11,470
case we set first we set the place on

00:14:09,490 --> 00:14:14,890
our host we'd like to share with the

00:14:11,470 --> 00:14:19,300
container and since we cannot we have to

00:14:14,890 --> 00:14:26,470
use full path we can simply type dot we

00:14:19,300 --> 00:14:28,270
can type PWD and then after a column we

00:14:26,470 --> 00:14:32,380
set the place on the container would

00:14:28,270 --> 00:14:39,450
like to have these these files so it can

00:14:32,380 --> 00:14:42,700
be some user directory another parameter

00:14:39,450 --> 00:14:45,580
that it's not necessary but it's useful

00:14:42,700 --> 00:14:47,650
is setting the word directory it is the

00:14:45,580 --> 00:14:51,850
directory in the container on which all

00:14:47,650 --> 00:14:56,050
commands will be run by default so we

00:14:51,850 --> 00:14:58,180
can type we use it we set it by typing w

00:14:56,050 --> 00:15:02,310
parameter and the value can be the same

00:14:58,180 --> 00:15:03,520
place we have our files on the container

00:15:02,310 --> 00:15:09,220
okay

00:15:03,520 --> 00:15:11,980
and then we should also set to necessary

00:15:09,220 --> 00:15:14,140
things so the first one will be the name

00:15:11,980 --> 00:15:17,260
of the image based on which would like

00:15:14,140 --> 00:15:21,480
to run our container so this is PHP in

00:15:17,260 --> 00:15:24,730
version 7 so we type PHP column 7 and

00:15:21,480 --> 00:15:27,400
then we need to type the common we'd

00:15:24,730 --> 00:15:28,930
like to run on the container so it will

00:15:27,400 --> 00:15:33,279
be running this

00:15:28,930 --> 00:15:39,430
script so it will be PHP test dot PHP

00:15:33,279 --> 00:15:42,070
and then we can run it yeah it worked

00:15:39,430 --> 00:15:44,560
it's simply printed it's PHP seven we

00:15:42,070 --> 00:15:47,649
can with doctor we can even is very

00:15:44,560 --> 00:15:50,080
easily proof it doesn't work on PHP five

00:15:47,649 --> 00:15:52,570
so all we need to do is to run the same

00:15:50,080 --> 00:15:56,700
comment but change one digit from seven

00:15:52,570 --> 00:15:59,560
to five so we can copy/paste it and

00:15:56,700 --> 00:16:02,649
change this seven to five actually and

00:15:59,560 --> 00:16:04,540
run it again yeah and we can see that

00:16:02,649 --> 00:16:14,160
special Perl doesn't work it prints

00:16:04,540 --> 00:16:17,470
syntax server all right let's move to

00:16:14,160 --> 00:16:20,070
some more complicated stuff let's try to

00:16:17,470 --> 00:16:22,390
run complete PHP application on docker

00:16:20,070 --> 00:16:24,610
so let's think about the standard

00:16:22,390 --> 00:16:26,830
environment to run some PHP application

00:16:24,610 --> 00:16:29,589
this is kind of a variation of a lamp

00:16:26,830 --> 00:16:30,880
stack so we need a web server it will be

00:16:29,589 --> 00:16:33,490
nginx in this case we need an

00:16:30,880 --> 00:16:35,260
interpreter it will be PHP fpm in this

00:16:33,490 --> 00:16:37,570
case and we need a database it will be

00:16:35,260 --> 00:16:40,300
MongoDB in this case all three of these

00:16:37,570 --> 00:16:42,790
tools are separate processes what means

00:16:40,300 --> 00:16:46,150
that each one of these is a separate

00:16:42,790 --> 00:16:48,279
docker container the end-user is going

00:16:46,150 --> 00:16:50,500
to communicate with the web server what

00:16:48,279 --> 00:16:52,570
means the nginx container this container

00:16:50,500 --> 00:16:55,209
is connected with PHP fpm container

00:16:52,570 --> 00:16:58,270
where we run our application and this

00:16:55,209 --> 00:17:00,490
one is connected with the database PHP

00:16:58,270 --> 00:17:03,370
fpm and nginx containers share

00:17:00,490 --> 00:17:04,929
application sources with the hosts this

00:17:03,370 --> 00:17:08,589
is because in the development

00:17:04,929 --> 00:17:12,790
environment we keep our sources on the

00:17:08,589 --> 00:17:17,319
host on the host we have IDE and gate

00:17:12,790 --> 00:17:19,660
etc MongoDB shares database files with

00:17:17,319 --> 00:17:22,689
the host and this is because we want to

00:17:19,660 --> 00:17:25,770
have this files persistent I mean we

00:17:22,689 --> 00:17:29,020
want to have data in MongoDB persistent

00:17:25,770 --> 00:17:33,550
docker containers are not persistent at

00:17:29,020 --> 00:17:36,670
all I mean if we destroy a container it

00:17:33,550 --> 00:17:39,880
contents disappears so in to have our

00:17:36,670 --> 00:17:43,710
files our data persistent we need to

00:17:39,880 --> 00:17:43,710
share the database files with the hosts

00:17:43,980 --> 00:17:48,850
docker created a tool which is called

00:17:46,510 --> 00:17:51,190
doc improve compose and thanks to it we

00:17:48,850 --> 00:17:55,900
can configure our whole environment in

00:17:51,190 --> 00:17:57,520
one yml file so line by line or the

00:17:55,900 --> 00:17:59,679
highest level we define containers in

00:17:57,520 --> 00:18:03,460
our environment in this case these are

00:17:59,679 --> 00:18:06,670
free containers with names PHP and

00:18:03,460 --> 00:18:08,830
genetics and DB for MongoDB and for the

00:18:06,670 --> 00:18:12,700
PHP container we define that it's being

00:18:08,830 --> 00:18:13,780
built from the docker file that is in

00:18:12,700 --> 00:18:15,520
our work directory

00:18:13,780 --> 00:18:18,370
what is the docker file explain in a

00:18:15,520 --> 00:18:20,740
minute then we said that it's linked to

00:18:18,370 --> 00:18:22,900
DB container and it shares application

00:18:20,740 --> 00:18:25,870
sources with the hosts so on the Left we

00:18:22,900 --> 00:18:27,700
set the place on the on the host we have

00:18:25,870 --> 00:18:29,919
our files and then on the right we

00:18:27,700 --> 00:18:31,630
decide we define the place on the

00:18:29,919 --> 00:18:35,140
container to put these files in this is

00:18:31,630 --> 00:18:39,100
standard web server directory I mean

00:18:35,140 --> 00:18:40,929
directory for web server files then in

00:18:39,100 --> 00:18:43,390
the nginx container we define that it's

00:18:40,929 --> 00:18:45,520
being built from the image that his on

00:18:43,390 --> 00:18:48,220
docker happened and his name nginx and

00:18:45,520 --> 00:18:51,700
it and it is in version one nine ten

00:18:48,220 --> 00:18:54,040
it's linked to a PHP container it shares

00:18:51,700 --> 00:18:56,890
the same valve the same file so it has

00:18:54,040 --> 00:18:59,350
the same volume as PHP and additionally

00:18:56,890 --> 00:19:02,160
it has its own volume and this one is to

00:18:59,350 --> 00:19:05,080
share a virtual host configuration file

00:19:02,160 --> 00:19:09,070
finally we said that it should expose

00:19:05,080 --> 00:19:11,110
its 80 port and in the DB container we

00:19:09,070 --> 00:19:13,600
define that it's being built from the

00:19:11,110 --> 00:19:17,220
image on docker hub that's named

00:19:13,600 --> 00:19:19,750
and it's version 3 2 1 it shares those

00:19:17,220 --> 00:19:22,390
database files with the host and it

00:19:19,750 --> 00:19:26,320
exposes its 27 on 17 for the standard

00:19:22,390 --> 00:19:28,330
MongoDB port I've mentioned that the PHP

00:19:26,320 --> 00:19:31,150
container is being built from the docker

00:19:28,330 --> 00:19:33,370
file so what is docker file and this

00:19:31,150 --> 00:19:36,220
file will keep instructions based on

00:19:33,370 --> 00:19:37,900
which the docker image is being created

00:19:36,220 --> 00:19:42,940
and based on this docker image we run

00:19:37,900 --> 00:19:46,179
our container so line by line first we

00:19:42,940 --> 00:19:48,610
tell based on which image would like to

00:19:46,179 --> 00:19:52,210
build our own image as I said before

00:19:48,610 --> 00:19:55,510
docker images have layered structure so

00:19:52,210 --> 00:19:56,340
then they so that we can easily build an

00:19:55,510 --> 00:19:59,490
image by

00:19:56,340 --> 00:20:02,520
on another image in this case we use

00:19:59,490 --> 00:20:04,980
official PHP fpm image as a base for our

00:20:02,520 --> 00:20:09,120
particular image dedicated to this

00:20:04,980 --> 00:20:12,990
project then we install libraries and

00:20:09,120 --> 00:20:16,820
tools we need so install git since this

00:20:12,990 --> 00:20:19,170
is a simple application we need a PC and

00:20:16,820 --> 00:20:22,680
internationalisation libraries so these

00:20:19,170 --> 00:20:26,700
are a simple app get install or PCL

00:20:22,680 --> 00:20:30,180
install instructions then we install

00:20:26,700 --> 00:20:33,570
composer it's pretty simple and finally

00:20:30,180 --> 00:20:35,400
we copied the PHP any file for this

00:20:33,570 --> 00:20:40,880
particular project project and then we

00:20:35,400 --> 00:20:44,280
set the work directory all these lines

00:20:40,880 --> 00:20:46,980
except two last lines are necessary to

00:20:44,280 --> 00:20:50,430
run any sinfoni application based on one

00:20:46,980 --> 00:20:55,680
go and they are generic so we can move

00:20:50,430 --> 00:20:59,790
this long part to a separate generic

00:20:55,680 --> 00:21:03,420
symphony image and I did it so in this

00:20:59,790 --> 00:21:05,910
case I created my own image named

00:21:03,420 --> 00:21:08,370
Symphony to which I pushed to

00:21:05,910 --> 00:21:10,830
docker hub in docker file for this

00:21:08,370 --> 00:21:13,800
particular project I let these lines

00:21:10,830 --> 00:21:16,440
that are specific for this project and I

00:21:13,800 --> 00:21:18,330
replace that long generic part with one

00:21:16,440 --> 00:21:21,000
simple statement saying that we'd like

00:21:18,330 --> 00:21:24,770
to build this particular image based on

00:21:21,000 --> 00:21:27,450
my generic symphony and MongoDB image

00:21:24,770 --> 00:21:29,520
when we have such a configuration all we

00:21:27,450 --> 00:21:33,600
need to do is to type docker compose AB

00:21:29,520 --> 00:21:35,400
- D comment the D parameter means that

00:21:33,600 --> 00:21:37,380
containers will be indicated in the

00:21:35,400 --> 00:21:40,050
touch mode so they will be run in the

00:21:37,380 --> 00:21:47,190
background so let's take a look how it

00:21:40,050 --> 00:21:50,190
works in practice we have doctor machine

00:21:47,190 --> 00:21:52,590
up and running we did it before so we

00:21:50,190 --> 00:21:56,760
can run our environment but before we do

00:21:52,590 --> 00:22:01,320
this let's first add the visual host to

00:21:56,760 --> 00:22:03,630
our locals etc' hosts file and so that

00:22:01,320 --> 00:22:06,060
we will be able to access the app we

00:22:03,630 --> 00:22:07,830
need to find our find out docker

00:22:06,060 --> 00:22:11,340
machines IP address

00:22:07,830 --> 00:22:15,960
and so we can do it by typing docker

00:22:11,340 --> 00:22:19,049
machine IP comment followed by the name

00:22:15,960 --> 00:22:22,490
so this is PHP okay yep and we can see

00:22:19,049 --> 00:22:25,380
the address IP address of this machine

00:22:22,490 --> 00:22:27,750
we can copy it together with the virtual

00:22:25,380 --> 00:22:30,779
host name to our HTC host file and I

00:22:27,750 --> 00:22:34,940
guess I have done it already so let's

00:22:30,779 --> 00:22:37,590
check this and we can simply grab our

00:22:34,940 --> 00:22:41,750
etc' host file with the name of the

00:22:37,590 --> 00:22:46,039
virtual host and this is docker symphony

00:22:41,750 --> 00:22:50,190
in this case the car symphony dot dot

00:22:46,039 --> 00:22:51,360
yeah we have it so if we have it we can

00:22:50,190 --> 00:22:57,289
run our environment

00:22:51,360 --> 00:23:01,610
so we can run that docker compose up

00:22:57,289 --> 00:23:04,620
dodged e comment yeah that's it our

00:23:01,610 --> 00:23:07,470
containers has been started they have

00:23:04,620 --> 00:23:10,169
been had been already created before so

00:23:07,470 --> 00:23:12,389
it didn't take much time if they weren't

00:23:10,169 --> 00:23:15,450
created the docker compose would

00:23:12,389 --> 00:23:17,519
download images these two images were

00:23:15,450 --> 00:23:20,130
for nginx and MongoDB from docker hub

00:23:17,519 --> 00:23:24,120
and it would build the image our

00:23:20,130 --> 00:23:26,700
particular image for PHP so the

00:23:24,120 --> 00:23:29,490
environment is up we can see which

00:23:26,700 --> 00:23:33,720
containers are up so we can type docker

00:23:29,490 --> 00:23:35,429
PS command and we can see that we have

00:23:33,720 --> 00:23:39,000
three containers up and running

00:23:35,429 --> 00:23:43,710
and we can start using our application

00:23:39,000 --> 00:23:50,010
so let's type its virtual host name to

00:23:43,710 --> 00:23:51,690
the browser this is simple to-do list

00:23:50,010 --> 00:23:54,779
application

00:23:51,690 --> 00:24:01,789
so we'd have some tasks and we have we

00:23:54,779 --> 00:24:09,929
can add another task and let it be drink

00:24:01,789 --> 00:24:11,299
during today's tonight's party another

00:24:09,929 --> 00:24:15,929
it

00:24:11,299 --> 00:24:25,440
yep and it works so this is it

00:24:15,929 --> 00:24:28,559
this is how it works in practice this is

00:24:25,440 --> 00:24:31,919
it about the development but what about

00:24:28,559 --> 00:24:34,559
deployment one of the most important

00:24:31,919 --> 00:24:36,320
advantages of docker is that you can use

00:24:34,559 --> 00:24:38,580
identical or nearly identical

00:24:36,320 --> 00:24:41,540
configuration to run an environment both

00:24:38,580 --> 00:24:44,970
on a local development environment and

00:24:41,540 --> 00:24:47,880
in the production I'll show you how to

00:24:44,970 --> 00:24:52,200
deploy that PHP application into the

00:24:47,880 --> 00:24:54,840
cloud using docker there are different

00:24:52,200 --> 00:24:58,380
services that lets you run docker

00:24:54,840 --> 00:25:01,650
environment in the cloud and these are

00:24:58,380 --> 00:25:02,669
some of some of those so Amazon Web

00:25:01,650 --> 00:25:05,040
Services supports

00:25:02,669 --> 00:25:07,530
docker in elastic Beanstalk you can

00:25:05,040 --> 00:25:09,210
define your containers in a JSON file

00:25:07,530 --> 00:25:12,030
that has a structure similar to the core

00:25:09,210 --> 00:25:14,130
compose yml file on AWS there's also

00:25:12,030 --> 00:25:15,980
easy to container service what it's

00:25:14,130 --> 00:25:17,669
configuration is not particular easy

00:25:15,980 --> 00:25:20,850
since last August

00:25:17,669 --> 00:25:23,880
docker Heroku has been supporting docker

00:25:20,850 --> 00:25:25,830
environments but it's limited to Heroku

00:25:23,880 --> 00:25:28,410
images only so you can use on with these

00:25:25,830 --> 00:25:30,299
images that are created by Heroku docker

00:25:28,410 --> 00:25:34,740
has it's own service and it's called to

00:25:30,299 --> 00:25:36,570
tune and it can it lets you run docker

00:25:34,740 --> 00:25:39,150
containers on different infrastructure

00:25:36,570 --> 00:25:41,760
as a service providers doctor machine

00:25:39,150 --> 00:25:43,770
supports clean tech virtual machines

00:25:41,760 --> 00:25:45,750
with docker not only on your local

00:25:43,770 --> 00:25:48,390
development alone on your local machine

00:25:45,750 --> 00:25:51,470
but also in the cloud and by this I mean

00:25:48,390 --> 00:25:53,640
digital's oceans digital oceans club and

00:25:51,470 --> 00:25:55,350
if we would like to run docker

00:25:53,640 --> 00:25:58,110
containers or any infrastructure as a

00:25:55,350 --> 00:26:00,750
service provider or on our own machine

00:25:58,110 --> 00:26:02,730
it may be a good idea to use Korres this

00:26:00,750 --> 00:26:04,799
is the Linux distribution dedicated to

00:26:02,730 --> 00:26:08,820
running Linux containers including local

00:26:04,799 --> 00:26:11,250
containers in this presentation I will

00:26:08,820 --> 00:26:14,600
show you how to use tooten to deploy

00:26:11,250 --> 00:26:17,910
docker into the cloud because some of

00:26:14,600 --> 00:26:19,500
portugal reasons first to tom is an

00:26:17,910 --> 00:26:21,290
official docker service it has been

00:26:19,500 --> 00:26:23,880
acquired by docker a few months ago

00:26:21,290 --> 00:26:24,870
second it allows to run docker

00:26:23,880 --> 00:26:26,460
containers on

00:26:24,870 --> 00:26:28,980
of different infrastructures the service

00:26:26,460 --> 00:26:31,950
providers third it's pretty easy to

00:26:28,980 --> 00:26:34,740
understand it basic concepts and run

00:26:31,950 --> 00:26:36,900
your first environment and last it's

00:26:34,740 --> 00:26:41,820
free at least during beta testing

00:26:36,900 --> 00:26:44,670
periods or the student totem is a type

00:26:41,820 --> 00:26:47,040
of platform the service solution and it

00:26:44,670 --> 00:26:49,650
doesn't have its own infrastructure so

00:26:47,040 --> 00:26:51,870
to use it you have to have an account on

00:26:49,650 --> 00:26:53,880
one of these five infrastructure as a

00:26:51,870 --> 00:26:55,680
service providers or you can always

00:26:53,880 --> 00:26:59,190
configure your own machine to integrate

00:26:55,680 --> 00:27:00,690
with tooten once you login into - -

00:26:59,190 --> 00:27:05,820
you'll be walked through the system by

00:27:00,690 --> 00:27:07,200
the very useful tutorial first you have

00:27:05,820 --> 00:27:10,230
to connect your account with one of

00:27:07,200 --> 00:27:12,960
those five cloud providers I tried it

00:27:10,230 --> 00:27:15,090
with Amazon Web Services as web services

00:27:12,960 --> 00:27:17,130
and it was pretty simple all I needed to

00:27:15,090 --> 00:27:22,050
do was to copy two keys I found in my

00:27:17,130 --> 00:27:25,160
AWS credentials next you need to create

00:27:22,050 --> 00:27:27,630
a node cluster on a given cloud provider

00:27:25,160 --> 00:27:29,309
actually the only thing you need to set

00:27:27,630 --> 00:27:31,380
is the name of the cluster all the rest

00:27:29,309 --> 00:27:35,370
can be default and to top we will do all

00:27:31,380 --> 00:27:37,850
the work for you so it takes a couple of

00:27:35,370 --> 00:27:41,280
minutes to create a node cluster and

00:27:37,850 --> 00:27:43,410
once it's created you will see it in

00:27:41,280 --> 00:27:46,380
your note dashboard you can see it

00:27:43,410 --> 00:27:50,490
status and details and you can easily

00:27:46,380 --> 00:27:52,520
tell me terminate it anytime on a node

00:27:50,490 --> 00:27:55,260
cluster you can run one service or a

00:27:52,520 --> 00:27:58,320
couple of services and this is called a

00:27:55,260 --> 00:27:59,250
stack a service is a set of similar

00:27:58,320 --> 00:28:01,380
containers

00:27:59,250 --> 00:28:03,870
I mean created from the same image in

00:28:01,380 --> 00:28:05,059
our case we have free services these are

00:28:03,870 --> 00:28:09,690
nginx

00:28:05,059 --> 00:28:11,910
PHP and MongoDB you can define a stack

00:28:09,690 --> 00:28:14,070
of those using graphical user interface

00:28:11,910 --> 00:28:16,890
but I think it's more convenient to do

00:28:14,070 --> 00:28:19,260
this by a stock file it is the file that

00:28:16,890 --> 00:28:20,309
is very similar to docker compose yml

00:28:19,260 --> 00:28:23,340
file there are only some small

00:28:20,309 --> 00:28:25,860
differences between them and if you have

00:28:23,340 --> 00:28:28,679
it you can paste it in the browser or

00:28:25,860 --> 00:28:35,700
push it to to tomb using either its REST

00:28:28,679 --> 00:28:38,340
API or totems Cle so this is a stack

00:28:35,700 --> 00:28:39,059
file so I've created my stock file based

00:28:38,340 --> 00:28:41,850
on my dock

00:28:39,059 --> 00:28:43,529
Campos yml file there are only some are

00:28:41,850 --> 00:28:47,549
small differences between these two

00:28:43,529 --> 00:28:49,590
files so first I don't build an image ad

00:28:47,549 --> 00:28:53,700
hoc but I assume it's already built and

00:28:49,590 --> 00:28:55,200
available on docker hat second I don't

00:28:53,700 --> 00:28:58,049
share application sources with the host

00:28:55,200 --> 00:29:01,379
machine but I assume that these sources

00:28:58,049 --> 00:29:03,960
are in the image however I create a

00:29:01,379 --> 00:29:06,629
volume to be able to share this sources

00:29:03,960 --> 00:29:10,909
waived nginx container since this two

00:29:06,629 --> 00:29:13,139
containers need these files and then I

00:29:10,909 --> 00:29:14,909
change the hosts path of nginx

00:29:13,139 --> 00:29:20,279
configuration file and database file

00:29:14,909 --> 00:29:22,309
files well once you create your stack

00:29:20,279 --> 00:29:27,029
it's being deployed to your node cluster

00:29:22,309 --> 00:29:29,759
you can see it's status or in the stack

00:29:27,029 --> 00:29:31,860
dashboard and using it you can stop

00:29:29,759 --> 00:29:37,499
terminate already deploy the whole stack

00:29:31,860 --> 00:29:39,899
or one particular service if you want to

00:29:37,499 --> 00:29:42,240
start using the stack you need to find

00:29:39,899 --> 00:29:44,759
the endpoints URLs in this case we are

00:29:42,240 --> 00:29:47,610
interested in the nginx service URL and

00:29:44,759 --> 00:29:52,080
if we click the link will see applicate

00:29:47,610 --> 00:29:53,879
our application up and running when I

00:29:52,080 --> 00:29:56,190
showed you the stack file I said that I

00:29:53,879 --> 00:29:58,619
assume that the image of for the PHP

00:29:56,190 --> 00:30:00,899
container has been already built and it

00:29:58,619 --> 00:30:03,659
has some application sources and it's

00:30:00,899 --> 00:30:06,809
available on docker hub well first you

00:30:03,659 --> 00:30:09,210
need to build it and push it there but

00:30:06,809 --> 00:30:11,340
you can leave it to docker hub to do it

00:30:09,210 --> 00:30:14,700
by itself thanks to its automated build

00:30:11,340 --> 00:30:17,159
feature so you can make that a

00:30:14,700 --> 00:30:19,860
particular image on docker hub will

00:30:17,159 --> 00:30:22,440
watch changes on github repo and it will

00:30:19,860 --> 00:30:24,119
rebuild the image after every change in

00:30:22,440 --> 00:30:26,460
some particular branch will say master

00:30:24,119 --> 00:30:28,619
branch you can also set a web hook in

00:30:26,460 --> 00:30:30,659
docker hub to automatically redeploy the

00:30:28,619 --> 00:30:35,460
service into to once the image is

00:30:30,659 --> 00:30:37,799
rebuilt to have the application sources

00:30:35,460 --> 00:30:40,350
bundled with the image we need to make

00:30:37,799 --> 00:30:43,080
some small changes in our docker file so

00:30:40,350 --> 00:30:46,830
what we need to do is to add these two

00:30:43,080 --> 00:30:49,710
lines first one adds application sources

00:30:46,830 --> 00:30:51,269
to the image and second one runs

00:30:49,710 --> 00:30:53,960
composer installed to download all

00:30:51,269 --> 00:30:53,960
dependencies

00:30:54,150 --> 00:30:58,240
in the setup I described the whole

00:30:56,650 --> 00:31:01,630
continuous delivery process looks like

00:30:58,240 --> 00:31:03,309
this we keep our sources on github after

00:31:01,630 --> 00:31:06,520
any change in the master branch we run

00:31:03,309 --> 00:31:08,200
images for deploy on docker hap once

00:31:06,520 --> 00:31:09,580
it's done we trigger the service

00:31:08,200 --> 00:31:12,669
redeployed on to tomb and it's

00:31:09,580 --> 00:31:15,840
populating or it populates it on our

00:31:12,669 --> 00:31:20,010
node cluster this process is good enough

00:31:15,840 --> 00:31:23,049
but it lacks some one important step

00:31:20,010 --> 00:31:28,899
what should be done before we actually

00:31:23,049 --> 00:31:33,250
start the deployment any guesses tests

00:31:28,899 --> 00:31:35,860
perfect we should run tests so since we

00:31:33,250 --> 00:31:40,770
cannot run tests on docker hat we need

00:31:35,860 --> 00:31:44,649
to do a small change in this part and

00:31:40,770 --> 00:31:47,260
add some continuous integration service

00:31:44,649 --> 00:31:49,090
to our process this can be Travis CI

00:31:47,260 --> 00:31:50,250
because it's been supporting doctors

00:31:49,090 --> 00:31:54,100
since last summer

00:31:50,250 --> 00:31:56,770
so with this change it is the Travis CI

00:31:54,100 --> 00:32:00,130
that rebuilds the image after a change

00:31:56,770 --> 00:32:03,970
in the repo then it pulls other images

00:32:00,130 --> 00:32:06,700
for example MongoDB image starts the

00:32:03,970 --> 00:32:12,940
environment using docker compose and

00:32:06,700 --> 00:32:15,760
then it runs tests on it if this go

00:32:12,940 --> 00:32:19,570
right we can push our already rebuilt

00:32:15,760 --> 00:32:21,909
image to the docker hat we don't build

00:32:19,570 --> 00:32:25,450
anything from docker hub anymore and we

00:32:21,909 --> 00:32:28,000
use it only to store our image also we

00:32:25,450 --> 00:32:30,309
don't use docker hub web hooks to

00:32:28,000 --> 00:32:33,820
trigger the deploy instead we use two

00:32:30,309 --> 00:32:35,830
terms API REST API call to redeploy the

00:32:33,820 --> 00:32:38,380
service so that we can add some

00:32:35,830 --> 00:32:40,210
additional parameters and that we can

00:32:38,380 --> 00:32:44,110
have a better control over the read

00:32:40,210 --> 00:32:46,840
deploy process you may ask me how to

00:32:44,110 --> 00:32:48,429
configure Travis to build image run the

00:32:46,840 --> 00:32:49,720
environment and push changes to the

00:32:48,429 --> 00:32:52,539
report to docker hub

00:32:49,720 --> 00:32:57,010
well you place the whole configuration

00:32:52,539 --> 00:32:59,409
in Travis yml file so line by line first

00:32:57,010 --> 00:33:01,240
we set the environment language we can

00:32:59,409 --> 00:33:03,100
leave default Robbie volume we don't

00:33:01,240 --> 00:33:06,159
want to set PHP because we want to

00:33:03,100 --> 00:33:06,710
prevent Travis from installing composer

00:33:06,159 --> 00:33:11,300
depend

00:33:06,710 --> 00:33:15,560
on the bills host machine we also need

00:33:11,300 --> 00:33:17,960
to tell Travis to use docker then we

00:33:15,560 --> 00:33:19,810
need to log in to docker hub so we can

00:33:17,960 --> 00:33:21,170
use dr. login comment followed by our

00:33:19,810 --> 00:33:23,450
credentials

00:33:21,170 --> 00:33:26,330
these are email username and password

00:33:23,450 --> 00:33:29,960
and these can be hidden behind

00:33:26,330 --> 00:33:34,640
environment variables and we should also

00:33:29,960 --> 00:33:38,020
remove Symphony's development files the

00:33:34,640 --> 00:33:41,120
core of the build is to build an image

00:33:38,020 --> 00:33:45,380
then run the environment with docker

00:33:41,120 --> 00:33:48,560
compose and then run tests so we have to

00:33:45,380 --> 00:33:53,750
think jobs to run specs and do some

00:33:48,560 --> 00:33:55,670
static code analysis finally if the

00:33:53,750 --> 00:33:57,980
build is on master branch and it's

00:33:55,670 --> 00:34:00,440
successful we can deploy it we use

00:33:57,980 --> 00:34:04,040
custom script provider so we need to

00:34:00,440 --> 00:34:06,890
keep our deployment common in one shell

00:34:04,040 --> 00:34:11,120
script and we have free deployment

00:34:06,890 --> 00:34:13,669
comments so first we tag our image with

00:34:11,120 --> 00:34:18,679
the Travis builds number so that we have

00:34:13,669 --> 00:34:20,690
a history of images then we push it to

00:34:18,679 --> 00:34:22,550
the docker hat and find out what we call

00:34:20,690 --> 00:34:26,000
a service or deploy a request to to team

00:34:22,550 --> 00:34:31,460
so this is some crl call with some json

00:34:26,000 --> 00:34:33,380
parameter after the build is done we can

00:34:31,460 --> 00:34:36,700
see if it has been deployed in the

00:34:33,380 --> 00:34:36,700
service timeline into

00:34:54,710 --> 00:35:03,390
well this is it about deployment let's

00:35:01,050 --> 00:35:06,600
talk about threats or maybe some

00:35:03,390 --> 00:35:09,330
disadvantages of docker docker as every

00:35:06,600 --> 00:35:11,430
technology is not perfect enough it has

00:35:09,330 --> 00:35:13,050
some limitations and threats that you

00:35:11,430 --> 00:35:15,530
should be aware of if you won't adopt it

00:35:13,050 --> 00:35:18,720
my personal experience with docker is

00:35:15,530 --> 00:35:21,150
that in the past day there have been

00:35:18,720 --> 00:35:23,880
more disadvantages and problems with it

00:35:21,150 --> 00:35:26,490
but it seems that the products team

00:35:23,880 --> 00:35:30,030
really listens to its users and they do

00:35:26,490 --> 00:35:31,850
they best to deal with issues it's very

00:35:30,030 --> 00:35:35,570
probable that things I'm gonna say about

00:35:31,850 --> 00:35:38,490
won't be valid in the near future

00:35:35,570 --> 00:35:40,940
so what are the most important threats

00:35:38,490 --> 00:35:44,460
of docker for me right now

00:35:40,940 --> 00:35:47,880
first there is problem with garbage

00:35:44,460 --> 00:35:50,370
collection docker doesn't remove and use

00:35:47,880 --> 00:35:52,800
containers and images from your system

00:35:50,370 --> 00:35:56,130
what can lead to running out of disk

00:35:52,800 --> 00:35:58,050
space after some time there is number of

00:35:56,130 --> 00:36:02,130
workarounds for example you can have a

00:35:58,050 --> 00:36:05,630
cron job that will remove unused or old

00:36:02,130 --> 00:36:08,790
images and containers from time to time

00:36:05,630 --> 00:36:13,440
you can also delete them for example

00:36:08,790 --> 00:36:16,080
with every deploy you can always use

00:36:13,440 --> 00:36:18,060
some of advanced third party tools that

00:36:16,080 --> 00:36:19,950
deal with this common problem there is

00:36:18,060 --> 00:36:25,830
number of different tools on github

00:36:19,950 --> 00:36:28,050
that deals with that second you need to

00:36:25,830 --> 00:36:31,530
remember that containers are not

00:36:28,050 --> 00:36:34,080
persistent at all this means that you

00:36:31,530 --> 00:36:37,080
basically cannot rely on writing to

00:36:34,080 --> 00:36:41,220
disks disk files that aren't shared with

00:36:37,080 --> 00:36:46,050
the hosts so primarily this effects any

00:36:41,220 --> 00:36:48,450
database files session files logs or

00:36:46,050 --> 00:36:51,510
user generated files like uploaded files

00:36:48,450 --> 00:36:53,310
of course you can always rely on shared

00:36:51,510 --> 00:36:55,530
volumes so share these files would host

00:36:53,310 --> 00:37:01,350
or you can use external phase services

00:36:55,530 --> 00:37:03,870
like Amazon RDS or as free firt it seems

00:37:01,350 --> 00:37:08,460
that Dockers web services like docker

00:37:03,870 --> 00:37:10,890
hat aren't stable enough yet I mean

00:37:08,460 --> 00:37:13,680
though the uptime of docker hat is good

00:37:10,890 --> 00:37:15,869
enough is pretty it's pretty good you

00:37:13,680 --> 00:37:19,140
may need its downtime your during your

00:37:15,869 --> 00:37:26,130
work hours much often than it happens

00:37:19,140 --> 00:37:29,849
with github or Travis and lost docker is

00:37:26,130 --> 00:37:33,599
still young technology it changes a lot

00:37:29,849 --> 00:37:36,180
and it hasn't been widely adopted yet so

00:37:33,599 --> 00:37:38,880
it means that if you want to use docker

00:37:36,180 --> 00:37:40,560
on production you will need to accept

00:37:38,880 --> 00:37:42,570
that you will either use technologies

00:37:40,560 --> 00:37:44,940
that are in better our testing period

00:37:42,570 --> 00:37:47,970
like to tune all that have some

00:37:44,940 --> 00:37:51,380
limitations like Amazon Elastic

00:37:47,970 --> 00:37:55,140
Beanstalk or Heroku or you can always

00:37:51,380 --> 00:37:58,320
you can always face some pioneers issues

00:37:55,140 --> 00:38:07,290
and configure your own server to run

00:37:58,320 --> 00:38:12,780
docker we are heading to the end so

00:38:07,290 --> 00:38:14,940
here's the place for some wrap-up if I

00:38:12,780 --> 00:38:18,390
was to ask to answer the question should

00:38:14,940 --> 00:38:26,490
you try docker in one short sentence I

00:38:18,390 --> 00:38:30,470
would say yes you should and why well

00:38:26,490 --> 00:38:33,720
there is couple of reasons first

00:38:30,470 --> 00:38:37,109
portability you can run docker container

00:38:33,720 --> 00:38:38,940
on any Linux instance on your laptop

00:38:37,109 --> 00:38:41,520
your local server public or private

00:38:38,940 --> 00:38:43,290
cloud it means that if you only want

00:38:41,520 --> 00:38:44,790
your local development environment can

00:38:43,290 --> 00:38:47,160
be exactly the same as the production

00:38:44,790 --> 00:38:48,780
environment what's more you can easily

00:38:47,160 --> 00:38:53,730
share the environment configuration with

00:38:48,780 --> 00:38:55,290
your team mates second isolation every

00:38:53,730 --> 00:38:57,510
container one within a single Linux

00:38:55,290 --> 00:38:59,250
instance is independent and isolated

00:38:57,510 --> 00:39:04,020
from both other containers as well as

00:38:59,250 --> 00:39:06,270
the hosts first performance docker

00:39:04,020 --> 00:39:08,130
containers do not include a separate

00:39:06,270 --> 00:39:11,220
operating system like virtual machines

00:39:08,130 --> 00:39:12,780
do instead they all share the same Linux

00:39:11,220 --> 00:39:14,550
kernel and in consequence the

00:39:12,780 --> 00:39:18,570
performance of docker containers is

00:39:14,550 --> 00:39:21,570
nearly identical to bare metal for

00:39:18,570 --> 00:39:23,610
modularity in docker and

00:39:21,570 --> 00:39:25,680
part of a technology stack like a web

00:39:23,610 --> 00:39:27,930
server or database is a separate

00:39:25,680 --> 00:39:30,000
container in fact you can create your

00:39:27,930 --> 00:39:31,800
dock environment using different linked

00:39:30,000 --> 00:39:33,890
together containers the same way you

00:39:31,800 --> 00:39:38,430
build something with Lego bricks and

00:39:33,890 --> 00:39:40,320
fift community the priority of docker is

00:39:38,430 --> 00:39:43,140
growing at an enormous piece on docker

00:39:40,320 --> 00:39:44,850
hub there are 86 official images for

00:39:43,140 --> 00:39:46,200
different tools and thousands of

00:39:44,850 --> 00:39:48,830
unofficial images created by the

00:39:46,200 --> 00:39:51,270
community but more there are more than

00:39:48,830 --> 00:39:53,490
50,000 of repos on github that are

00:39:51,270 --> 00:39:55,040
connected to docker somehow with for

00:39:53,490 --> 00:39:57,750
example sample docker compose

00:39:55,040 --> 00:40:05,820
configurations or additional tools to

00:39:57,750 --> 00:40:08,070
docker machine I hope that this

00:40:05,820 --> 00:40:09,720
presentation encourages you to give

00:40:08,070 --> 00:40:12,840
docker a try if you haven't done it yet

00:40:09,720 --> 00:40:14,730
and if you've been already using docker

00:40:12,840 --> 00:40:17,700
I hope that I gave you a good overview

00:40:14,730 --> 00:40:20,820
of how it can be used to develop and

00:40:17,700 --> 00:40:23,520
deploy PHP applications on github you

00:40:20,820 --> 00:40:25,620
will find sources of the application we

00:40:23,520 --> 00:40:28,140
used in the demo together with docker

00:40:25,620 --> 00:40:30,420
configuration on ships detect polska

00:40:28,140 --> 00:40:33,750
block you will find some posts including

00:40:30,420 --> 00:40:36,630
my posts about docker for example how we

00:40:33,750 --> 00:40:40,710
used it to develop and deploy our

00:40:36,630 --> 00:40:43,380
company's site please please please

00:40:40,710 --> 00:40:45,090
write my talk on joynton and if you have

00:40:43,380 --> 00:40:47,250
any questions you can ask them in a

00:40:45,090 --> 00:40:49,920
minute or you can catch up with me today

00:40:47,250 --> 00:40:52,920
or tomorrow or you can always find me on

00:40:49,920 --> 00:40:55,160
twitter thank you very much for your

00:40:52,920 --> 00:40:55,160
attention

00:41:00,480 --> 00:41:04,920
so we do indeed have some time for

00:41:02,460 --> 00:41:09,560
questions both from this room and the

00:41:04,920 --> 00:41:09,560
other raise a hand arrow hand room mic

00:41:09,740 --> 00:41:15,599
it's per container but for example a web

00:41:13,440 --> 00:41:18,780
application that I do not have maybe a

00:41:15,599 --> 00:41:21,270
CLI and the you know the FBM process and

00:41:18,780 --> 00:41:22,589
then maybe have cron running that so how

00:41:21,270 --> 00:41:25,349
would you recommend to set that up

00:41:22,589 --> 00:41:28,470
ah so actually there are two possible

00:41:25,349 --> 00:41:31,320
ways or free actually you can multiply

00:41:28,470 --> 00:41:35,040
your containers and on one you will

00:41:31,320 --> 00:41:37,440
write the run PHP fpm together and under

00:41:35,040 --> 00:41:39,119
container since okay since you have PHP

00:41:37,440 --> 00:41:43,470
fpm it's not possible so there are two

00:41:39,119 --> 00:41:46,560
ways I would say the way I use it is

00:41:43,470 --> 00:41:48,780
that with docker in version one five

00:41:46,560 --> 00:41:51,630
since since this version you can run

00:41:48,780 --> 00:41:53,760
docker exact command so this is running

00:41:51,630 --> 00:41:55,650
some comment on an existing container

00:41:53,760 --> 00:41:58,320
and it doesn't spoil their command

00:41:55,650 --> 00:42:01,640
that's that's already in the image so we

00:41:58,320 --> 00:42:07,530
simply can type docker exact with chrome

00:42:01,640 --> 00:42:10,800
and the second possible solution is to

00:42:07,530 --> 00:42:13,319
run supervisor as a process and then you

00:42:10,800 --> 00:42:16,829
can have multiple other processes

00:42:13,319 --> 00:42:18,690
running on our container okay so say you

00:42:16,829 --> 00:42:20,579
are in some circumstances allowed to

00:42:18,690 --> 00:42:22,440
have multiple processes in a container I

00:42:20,579 --> 00:42:25,380
mean say allowed but it's a best part

00:42:22,440 --> 00:42:27,089
yeah it's yeah it's allowed but the best

00:42:25,380 --> 00:42:29,450
practice is to have only one process on

00:42:27,089 --> 00:42:29,450
a container

00:42:39,040 --> 00:42:49,900
any more questions and you were saying

00:42:48,250 --> 00:42:51,430
about running on bare metal what do you

00:42:49,900 --> 00:42:53,320
recommend if you actually say you're

00:42:51,430 --> 00:42:55,660
creating your own host could you have

00:42:53,320 --> 00:42:57,610
the doc of running on a VM you know if

00:42:55,660 --> 00:42:59,350
it's preferred to use that as what would

00:42:57,610 --> 00:43:02,970
be your bare metal server so effectively

00:42:59,350 --> 00:43:06,970
you've got Dhaka on a VM on bare metal I

00:43:02,970 --> 00:43:09,580
mean what is the best solution for the

00:43:06,970 --> 00:43:12,190
VM right and notice is that would you

00:43:09,580 --> 00:43:13,690
say would you say that's a an acceptable

00:43:12,190 --> 00:43:15,580
infrastructure would you say that

00:43:13,690 --> 00:43:17,950
actually you should not be having a VM

00:43:15,580 --> 00:43:23,320
underneath Dhaka should be say okay

00:43:17,950 --> 00:43:24,700
let's have docker on on bare metal so if

00:43:23,320 --> 00:43:26,170
you aren't around occur on a bare metal

00:43:24,700 --> 00:43:29,320
you have to have a Linux instance

00:43:26,170 --> 00:43:31,390
basically and but for example say you

00:43:29,320 --> 00:43:33,430
know I've we've got a cloud provider I

00:43:31,390 --> 00:43:35,290
want to try a docker see I don't I don't

00:43:33,430 --> 00:43:36,940
use bare metal owning virtual machines

00:43:35,290 --> 00:43:39,640
so I'm going to use a virtual machine

00:43:36,940 --> 00:43:42,730
then run docker within that is that okay

00:43:39,640 --> 00:43:46,410
so you run docker in this virtual

00:43:42,730 --> 00:43:50,920
machine but you don't share these files

00:43:46,410 --> 00:43:53,050
where the with the host that there's the

00:43:50,920 --> 00:43:55,360
host of the virtual machine so then the

00:43:53,050 --> 00:43:56,740
performance is the same like it doesn't

00:43:55,360 --> 00:43:59,130
doesn't matter okay

00:43:56,740 --> 00:43:59,130
thank you

00:44:10,390 --> 00:44:15,250
okay the idea was could you use docker

00:44:13,270 --> 00:44:17,580
how would you use docker to put a PHP

00:44:15,250 --> 00:44:19,480
seven interpreter at the command line

00:44:17,580 --> 00:44:21,340
similarly to the way you made it run a

00:44:19,480 --> 00:44:23,610
single script but to actually get the

00:44:21,340 --> 00:44:33,070
command-line interpreter available from

00:44:23,610 --> 00:44:37,750
yep so basically you want type the name

00:44:33,070 --> 00:44:42,700
of the script you want so it will be PHP

00:44:37,750 --> 00:44:44,640
basically and I know I haven't used PHP

00:44:42,700 --> 00:44:49,960
like the command-line

00:44:44,640 --> 00:44:51,520
Cle a lot but I know if you type P if

00:44:49,960 --> 00:44:53,860
you have a standard configuration if you

00:44:51,520 --> 00:44:59,310
type PHP it will allow you to write

00:44:53,860 --> 00:45:04,810
something at some partition L parameter

00:44:59,310 --> 00:45:07,390
okay yes so if you type PHP - hey it

00:45:04,810 --> 00:45:08,800
will work HP - a thank you but you have

00:45:07,390 --> 00:45:12,600
to remember about these two parameters

00:45:08,800 --> 00:45:19,000
for docker around is RIT so to have

00:45:12,600 --> 00:45:21,340
interactive process yeah so another

00:45:19,000 --> 00:45:29,890
question yeah this is very this is very

00:45:21,340 --> 00:45:32,260
like we have good information from the

00:45:29,890 --> 00:45:34,110
audience we can you type bash and then

00:45:32,260 --> 00:45:36,940
we can play with docker and this is like

00:45:34,110 --> 00:45:39,520
the standard way to do anything on a

00:45:36,940 --> 00:45:41,170
container you just simply run docker IT

00:45:39,520 --> 00:45:43,420
followed by the name of the container

00:45:41,170 --> 00:45:45,820
then you type bash and then you can play

00:45:43,420 --> 00:45:52,990
with we've talked of container you can

00:45:45,820 --> 00:45:55,000
do anything on it you were showing um

00:45:52,990 --> 00:45:56,560
images on docker hub yam and you said

00:45:55,000 --> 00:45:58,690
that there are like thousands of them is

00:45:56,560 --> 00:46:02,830
it possible to have private images yeah

00:45:58,690 --> 00:46:04,990
yeah this is how how how we roll so you

00:46:02,830 --> 00:46:07,810
can have private images connected to

00:46:04,990 --> 00:46:12,430
private github repo or you that you push

00:46:07,810 --> 00:46:14,590
without repo and you mean we can have

00:46:12,430 --> 00:46:17,260
teams indoor perhaps so you can set this

00:46:14,590 --> 00:46:21,580
this image is visible only for you or

00:46:17,260 --> 00:46:23,920
for for your team but it's not free you

00:46:21,580 --> 00:46:27,330
have to pay for it it's pretty cheap

00:46:23,920 --> 00:46:27,330
as far as I remember couple of dollars

00:46:29,670 --> 00:46:37,690
and you can also you can there's a

00:46:34,690 --> 00:46:39,430
possibility that you keep your images

00:46:37,690 --> 00:46:41,740
not on a docker hat but some other

00:46:39,430 --> 00:46:43,690
repositories so there are different

00:46:41,740 --> 00:46:46,210
repositories that you can run either

00:46:43,690 --> 00:46:49,420
on-premise or on-demand but the doctor

00:46:46,210 --> 00:46:50,950
happy is the standard one higher the

00:46:49,420 --> 00:46:52,690
question I have is where do you keep

00:46:50,950 --> 00:46:54,730
passwords and other credentials in terms

00:46:52,690 --> 00:46:58,600
of docker containers do you put them

00:46:54,730 --> 00:47:00,730
inside or outside of in our practice in

00:46:58,600 --> 00:47:03,600
production environment we keep those in

00:47:00,730 --> 00:47:03,600
docker container

00:47:10,930 --> 00:47:16,440
anymore just

00:47:18,260 --> 00:47:22,940
how do you deal with the case we have

00:47:20,720 --> 00:47:26,300
containers running across different

00:47:22,940 --> 00:47:28,070
services so let's say when I have some

00:47:26,300 --> 00:47:30,980
services running on Amazon someone

00:47:28,070 --> 00:47:34,460
digitalocean for example so is there a

00:47:30,980 --> 00:47:36,980
way to link those together as far as I

00:47:34,460 --> 00:47:38,810
know as far as I know there is no way

00:47:36,980 --> 00:47:42,970
maybe there's some way but I haven't

00:47:38,810 --> 00:47:42,970
faced this issue okay so I can I'm

00:47:51,490 --> 00:48:00,440
telling think there's more questions oh

00:47:54,470 --> 00:48:10,670
yes we don't and how does doc uh support

00:48:00,440 --> 00:48:14,900
failover clustering once again to be

00:48:10,670 --> 00:48:20,450
honest and configuration in our cases we

00:48:14,900 --> 00:48:23,420
have services that that are not that

00:48:20,450 --> 00:48:25,670
they don't have high traffic however we

00:48:23,420 --> 00:48:28,190
use elastic beanstalk Amazon Elastic

00:48:25,670 --> 00:48:31,190
Beanstalk for for some services and then

00:48:28,190 --> 00:48:35,330
for example we have auto scaling call

00:48:31,190 --> 00:48:37,190
for machines and it can scale up to four

00:48:35,330 --> 00:48:39,470
machines and then it populates docker

00:48:37,190 --> 00:48:42,220
containers on each machine so it works

00:48:39,470 --> 00:48:42,220
like like this

00:48:47,020 --> 00:48:52,069
okay well we might have time for a few

00:48:50,420 --> 00:48:53,869
more questions or if perhaps your mom

00:48:52,069 --> 00:48:55,369
will call around up here if you're gonna

00:48:53,869 --> 00:48:57,260
ask questions directly when you get up

00:48:55,369 --> 00:49:00,339
at the front thank you very much for

00:48:57,260 --> 00:49:00,339

YouTube URL: https://www.youtube.com/watch?v=Q6EBPTVCrDM


