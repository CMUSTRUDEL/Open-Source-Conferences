Title: PHP UK Conference 2016 - Matthias Noback - All the cool kids...
Publication date: 2016-03-16
Playlist: PHP UK Conference 2016
Description: 
	The PHP world is spinning quite fast these days. There’s a lot to keep up with. You can’t be an expert in all subjects, so you need a way to find out what’s relevant for you and your team. Which approaches to software development would be useful? Which programming paradigms could help you write better code? And which architectural styles will help your application to survive in this quickly changing world? In this talk I’ll help you answer these questions by taking a bird’s-eye view. I will quickly guide you along some of the most fascinating topics in modern PHP development: DDD, BDD, TDD, hexagonal architecture, CQRS, event sourcing and micro-services. We’ll see how these things are related to each other, and how understanding and applying them can help you improve your software projects in many ways.
Captions: 
	00:00:05,370 --> 00:00:11,219
welcome to my presentation called all

00:00:08,040 --> 00:00:14,219
the cool kids my name is Matthias Novick

00:00:11,219 --> 00:00:17,119
I am proud CTO at I buildings in the

00:00:14,219 --> 00:00:20,970
Netherlands where we have this company

00:00:17,119 --> 00:00:22,740
packed with awesome developers so that's

00:00:20,970 --> 00:00:24,119
just something that I want to mention to

00:00:22,740 --> 00:00:27,380
you not that it makes any difference

00:00:24,119 --> 00:00:30,599
probably but I'm really proud of that

00:00:27,380 --> 00:00:33,540
all the cool kids is the title of course

00:00:30,599 --> 00:00:35,040
of this talk and well since I have

00:00:33,540 --> 00:00:37,079
studied philosophy I always try to

00:00:35,040 --> 00:00:39,060
define what kinds of words that I use

00:00:37,079 --> 00:00:43,440
and what they mean so let's take a look

00:00:39,060 --> 00:00:46,610
at the meaning of cool here and well you

00:00:43,440 --> 00:00:49,200
might be thinking maybe no SQL cool no

00:00:46,610 --> 00:00:51,090
this this might be a little bit a little

00:00:49,200 --> 00:00:54,480
bit a little bit back in time where five

00:00:51,090 --> 00:00:56,670
to six years ago no SQL suddenly become

00:00:54,480 --> 00:00:58,850
became sort of popular or sort of cool

00:00:56,670 --> 00:01:02,040
and then there were different databases

00:00:58,850 --> 00:01:04,320
which well how do you say this supported

00:01:02,040 --> 00:01:06,869
no SQL I don't know or were no SQL

00:01:04,320 --> 00:01:09,359
databases and we were all like oh which

00:01:06,869 --> 00:01:12,179
one should we choose now and then at

00:01:09,359 --> 00:01:14,100
some point we had Redis which sort of

00:01:12,179 --> 00:01:16,859
counts like a no SQL database I guess

00:01:14,100 --> 00:01:19,200
because it's not a MySQL database not

00:01:16,859 --> 00:01:21,539
sure about that at least they're there

00:01:19,200 --> 00:01:24,229
at some point we created or they created

00:01:21,539 --> 00:01:28,920
a nice list of of no SQL databases

00:01:24,229 --> 00:01:31,530
currently more than 225 of them and yeah

00:01:28,920 --> 00:01:33,810
there's something about web 2.0 needs

00:01:31,530 --> 00:01:35,579
and I don't know that that seems from a

00:01:33,810 --> 00:01:37,109
distant past as well I don't even know

00:01:35,579 --> 00:01:38,490
what the version of the current or the

00:01:37,109 --> 00:01:44,159
current version of the webpage these

00:01:38,490 --> 00:01:45,719
days anyway then some some people like

00:01:44,159 --> 00:01:48,959
martin fowler started to write about

00:01:45,719 --> 00:01:50,399
this phenomenon and well he basically

00:01:48,959 --> 00:01:53,520
explains the different types or

00:01:50,399 --> 00:01:54,899
categories of no SQL databases and well

00:01:53,520 --> 00:01:57,179
I don't know suddenly they they were

00:01:54,899 --> 00:01:59,549
less cool because we just understood

00:01:57,179 --> 00:02:03,149
what they were and what kinds we could

00:01:59,549 --> 00:02:06,479
use in our projects so well at least

00:02:03,149 --> 00:02:08,670
this is what I think you should use cool

00:02:06,479 --> 00:02:10,289
things whenever you understand them

00:02:08,670 --> 00:02:12,300
whenever someone has written a book

00:02:10,289 --> 00:02:14,010
about them or or has at least explain to

00:02:12,300 --> 00:02:17,489
you what those things are you shouldn't

00:02:14,010 --> 00:02:18,930
just hop on on this train of trying to

00:02:17,489 --> 00:02:20,790
use something that is cool

00:02:18,930 --> 00:02:22,890
these days you should first understand

00:02:20,790 --> 00:02:24,540
it and then use it in your projects of

00:02:22,890 --> 00:02:28,290
course but that's more or less a

00:02:24,540 --> 00:02:29,519
no-brainer so what else is cool I guess

00:02:28,290 --> 00:02:32,549
you were thinking about JavaScript

00:02:29,519 --> 00:02:34,620
already like well we are at HP

00:02:32,549 --> 00:02:37,049
conference but I'm sure many of you will

00:02:34,620 --> 00:02:40,170
know JavaScript and of course know that

00:02:37,049 --> 00:02:42,389
it is cool right so at some point you

00:02:40,170 --> 00:02:44,760
will be overwhelmed by whatever is out

00:02:42,389 --> 00:02:46,590
there currently and well this slide is

00:02:44,760 --> 00:02:49,260
already outdated of course it's just

00:02:46,590 --> 00:02:53,840
that there are so many new things in the

00:02:49,260 --> 00:02:58,439
JavaScript world arriving to us each day

00:02:53,840 --> 00:03:00,930
well I always try to use those cool

00:02:58,439 --> 00:03:03,629
things that that proved to last well

00:03:00,930 --> 00:03:05,519
they have they have to be well we have

00:03:03,629 --> 00:03:07,049
to be sure that these are not just hype

00:03:05,519 --> 00:03:10,200
things that are just here for one week

00:03:07,049 --> 00:03:13,079
or so so we always watch the tech

00:03:10,200 --> 00:03:15,989
monitor there and see whatever lasts for

00:03:13,079 --> 00:03:17,849
longer than that anyway these things are

00:03:15,989 --> 00:03:20,549
not what this talk is about so we can

00:03:17,849 --> 00:03:23,389
just just leave that aside and take a

00:03:20,549 --> 00:03:28,680
look at what I think is really cool

00:03:23,389 --> 00:03:31,919
right take a look at that coolest that's

00:03:28,680 --> 00:03:33,780
that's really awesome these things these

00:03:31,919 --> 00:03:36,750
technologies or techniques they aren't

00:03:33,780 --> 00:03:40,019
really cool in a in a high sense of

00:03:36,750 --> 00:03:41,790
course these things become a bit of a

00:03:40,019 --> 00:03:43,470
hype because well many people at some

00:03:41,790 --> 00:03:45,870
point see that these are important

00:03:43,470 --> 00:03:47,340
things for us as developers but they

00:03:45,870 --> 00:03:51,599
also have a proven track record none of

00:03:47,340 --> 00:03:53,400
this is new or modern or or like cool in

00:03:51,599 --> 00:03:56,040
this sense of well I just got out there

00:03:53,400 --> 00:03:57,840
this week or last week these have a

00:03:56,040 --> 00:04:00,509
proven track record and we are safe to

00:03:57,840 --> 00:04:01,919
use them while they are being cool so

00:04:00,509 --> 00:04:07,019
these are exactly the kind of things

00:04:01,919 --> 00:04:09,299
that I'm looking for in my job and well

00:04:07,019 --> 00:04:11,519
they may be in some way familiar to you

00:04:09,299 --> 00:04:13,409
already so this is not really about the

00:04:11,519 --> 00:04:15,299
cool things that well you have to know

00:04:13,409 --> 00:04:17,609
about because well it's new and it's

00:04:15,299 --> 00:04:19,459
shiny these are the things that we have

00:04:17,609 --> 00:04:22,019
to keep talking about again and again

00:04:19,459 --> 00:04:23,310
because well what I see around me is

00:04:22,019 --> 00:04:25,650
that there are some very serious

00:04:23,310 --> 00:04:29,010
psychological impediments for adopting

00:04:25,650 --> 00:04:30,690
these technologies so first of all you

00:04:29,010 --> 00:04:33,000
might be looking at other companies or

00:04:30,690 --> 00:04:34,980
other teams and be thinking that

00:04:33,000 --> 00:04:37,710
I want to do what they do and somehow

00:04:34,980 --> 00:04:39,960
you feel that you can't do this because

00:04:37,710 --> 00:04:42,030
well maybe you're scared of trying

00:04:39,960 --> 00:04:43,980
something new and not being sure whether

00:04:42,030 --> 00:04:47,220
or not it will work out in your team or

00:04:43,980 --> 00:04:49,320
your project you may also feel that you

00:04:47,220 --> 00:04:53,280
can't have all of those cool things it

00:04:49,320 --> 00:04:56,130
may just be too much or even worse I

00:04:53,280 --> 00:04:58,680
guess I'm doing quite well already right

00:04:56,130 --> 00:05:00,330
you're doing none of that stuff and feel

00:04:58,680 --> 00:05:04,200
that you're you're you're quite fine at

00:05:00,330 --> 00:05:06,750
the moment well hmm to be really honest

00:05:04,200 --> 00:05:10,680
some of our projects may be actually too

00:05:06,750 --> 00:05:13,770
simple to do a DDD with for example or

00:05:10,680 --> 00:05:17,660
too small to actually thoroughly test or

00:05:13,770 --> 00:05:20,100
to short-lived well it may not be

00:05:17,660 --> 00:05:22,500
economically viable at all to do any of

00:05:20,100 --> 00:05:23,700
this too much time constraints somebody

00:05:22,500 --> 00:05:26,700
may be screaming at your desk like

00:05:23,700 --> 00:05:29,550
finish this finish this okay so we have

00:05:26,700 --> 00:05:31,470
to overcome a bit of this anxiety and

00:05:29,550 --> 00:05:34,680
look at ways in which we can still try

00:05:31,470 --> 00:05:39,270
these things or or do some of it and of

00:05:34,680 --> 00:05:41,010
course do the best parts of it so yes I

00:05:39,270 --> 00:05:43,470
think that that you can do a lot of

00:05:41,010 --> 00:05:45,930
these things and not not have to be

00:05:43,470 --> 00:05:47,910
scared about this of course you'll get

00:05:45,930 --> 00:05:49,830
used to it it will take some some

00:05:47,910 --> 00:05:51,870
problems some some things at the

00:05:49,830 --> 00:05:53,130
beginning but well yes of course you

00:05:51,870 --> 00:05:55,800
will get used to it and you will also

00:05:53,130 --> 00:05:57,930
get much better at it and also your

00:05:55,800 --> 00:06:00,390
projects will become much better by by

00:05:57,930 --> 00:06:01,680
trying these techniques and there are

00:06:00,390 --> 00:06:04,200
light options you don't have to do

00:06:01,680 --> 00:06:08,160
everything that Dede tells you to do you

00:06:04,200 --> 00:06:10,979
can just do part of it so it comes down

00:06:08,160 --> 00:06:12,660
to listen of course listen to me but

00:06:10,979 --> 00:06:13,500
what you already want to do this that's

00:06:12,660 --> 00:06:15,600
great

00:06:13,500 --> 00:06:19,050
and then well you have to get home and

00:06:15,600 --> 00:06:21,540
start reading more about this this stuff

00:06:19,050 --> 00:06:23,580
with the books the standard books of

00:06:21,540 --> 00:06:26,190
which I show you the covers if if if

00:06:23,580 --> 00:06:28,979
applicable read the standard articles

00:06:26,190 --> 00:06:30,960
the standard blocks about this and then

00:06:28,979 --> 00:06:33,030
just start practicing start doing some

00:06:30,960 --> 00:06:36,150
things in your projects that will make

00:06:33,030 --> 00:06:37,620
you you will make them better and what's

00:06:36,150 --> 00:06:39,630
I think most important will make you as

00:06:37,620 --> 00:06:41,669
a developer better and also more

00:06:39,630 --> 00:06:43,320
valuable which makes it easier for you

00:06:41,669 --> 00:06:45,390
to go to your boss and say I want some

00:06:43,320 --> 00:06:46,380
more money because I'm now such a super

00:06:45,390 --> 00:06:49,680
developer I

00:06:46,380 --> 00:06:51,510
dddddd microservices secure s event

00:06:49,680 --> 00:06:55,890
sourcing you know that's that is worth

00:06:51,510 --> 00:06:57,900
some money right so I'm going to cover

00:06:55,890 --> 00:07:02,160
all of these subjects in the next 40

00:06:57,900 --> 00:07:04,620
minutes so please don't interrupt me I'm

00:07:02,160 --> 00:07:07,290
just trying to give you a really quick

00:07:04,620 --> 00:07:09,090
overview of the subjects and of course

00:07:07,290 --> 00:07:12,350
also why you would want to dive into

00:07:09,090 --> 00:07:17,090
these things in more in more depth later

00:07:12,350 --> 00:07:19,440
after this talk so we start with DDD and

00:07:17,090 --> 00:07:21,420
this is a picture of Eric Evans who

00:07:19,440 --> 00:07:23,850
wrote this book domain driven design

00:07:21,420 --> 00:07:26,460
chuckling complexity at the heart of

00:07:23,850 --> 00:07:28,620
software which is the subtitle of the

00:07:26,460 --> 00:07:31,740
book DD sense for domain driven design

00:07:28,620 --> 00:07:33,510
and as you probably know it has brought

00:07:31,740 --> 00:07:36,800
as many of these these really useful

00:07:33,510 --> 00:07:38,880
tactical patterns we know now about

00:07:36,800 --> 00:07:42,060
entities value objects how to

00:07:38,880 --> 00:07:44,370
distinguish them and well this basically

00:07:42,060 --> 00:07:46,890
gives us some structure to our code

00:07:44,370 --> 00:07:49,320
bases or domain models for example

00:07:46,890 --> 00:07:51,420
entities these are the only things

00:07:49,320 --> 00:07:52,770
basically that change that really change

00:07:51,420 --> 00:07:55,080
in your application

00:07:52,770 --> 00:07:57,990
they are identifiable well if they have

00:07:55,080 --> 00:08:02,100
an ID of course and they can act as the

00:07:57,990 --> 00:08:05,010
root of a bigger aggregate value objects

00:08:02,100 --> 00:08:06,630
immutable objects like like basically

00:08:05,010 --> 00:08:09,030
any object should be immutable except

00:08:06,630 --> 00:08:11,520
entities themselves value objects

00:08:09,030 --> 00:08:15,090
describe entities they describe aspects

00:08:11,520 --> 00:08:17,520
of it and they encapsulate the logic or

00:08:15,090 --> 00:08:20,100
the validation for that for that

00:08:17,520 --> 00:08:21,950
description aggregates these are

00:08:20,100 --> 00:08:25,140
basically just composites of objects

00:08:21,950 --> 00:08:26,430
entities and value objects but the

00:08:25,140 --> 00:08:28,020
interesting thing about aggregate is

00:08:26,430 --> 00:08:29,880
that they can be used or can be

00:08:28,020 --> 00:08:31,830
considered to be the transactional

00:08:29,880 --> 00:08:34,140
boundary so whenever you're going to

00:08:31,830 --> 00:08:37,289
change something you're only persisting

00:08:34,140 --> 00:08:39,570
or are handling one change within that

00:08:37,289 --> 00:08:42,330
aggregate per transaction or database

00:08:39,570 --> 00:08:45,510
transaction repositories and other

00:08:42,330 --> 00:08:47,640
tactical pattern should be often seen as

00:08:45,510 --> 00:08:49,020
a collection of aggregates so you just

00:08:47,640 --> 00:08:51,150
ask the repository can I have the

00:08:49,020 --> 00:08:53,160
aggregate with the ID something

00:08:51,150 --> 00:08:54,480
something and then you have domain

00:08:53,160 --> 00:08:58,650
events which is a very interesting

00:08:54,480 --> 00:09:00,100
design pattern so to say these events

00:08:58,650 --> 00:09:02,350
are immutable because they

00:09:00,100 --> 00:09:06,240
whatever has been changed has changed in

00:09:02,350 --> 00:09:09,490
the past in particular within one entity

00:09:06,240 --> 00:09:11,680
right so that's a lot and of course this

00:09:09,490 --> 00:09:14,050
is really the brief summary dive into

00:09:11,680 --> 00:09:16,269
this again read more about this and your

00:09:14,050 --> 00:09:18,670
code will be better because well what

00:09:16,269 --> 00:09:20,560
changes because of all of this once you

00:09:18,670 --> 00:09:23,019
know the definition and the uses of

00:09:20,560 --> 00:09:25,029
these these different concepts we don't

00:09:23,019 --> 00:09:26,889
design our code with the database in

00:09:25,029 --> 00:09:27,880
mind anymore which will make our domain

00:09:26,889 --> 00:09:30,069
model much better

00:09:27,880 --> 00:09:32,139
we in fact design objects properly in

00:09:30,069 --> 00:09:36,190
the way that object-oriented programming

00:09:32,139 --> 00:09:37,899
well was supposed to work and we don't

00:09:36,190 --> 00:09:40,660
calculate change sets anymore just like

00:09:37,899 --> 00:09:42,279
we do with for example doctrine we with

00:09:40,660 --> 00:09:44,050
oxygen we say oh here are my entities

00:09:42,279 --> 00:09:46,449
and just calculate whatever has changed

00:09:44,050 --> 00:09:50,350
and rush it to the database all right so

00:09:46,449 --> 00:09:52,930
now now we only process the change that

00:09:50,350 --> 00:09:54,810
happens in our entities by well

00:09:52,930 --> 00:09:57,759
basically examining our the main events

00:09:54,810 --> 00:10:00,009
but so far much of the main driven

00:09:57,759 --> 00:10:02,680
design looks just like like better

00:10:00,009 --> 00:10:05,529
programming like like Opie as it was

00:10:02,680 --> 00:10:08,949
supposed to be but the better things are

00:10:05,529 --> 00:10:10,689
still to be discussed here things like

00:10:08,949 --> 00:10:13,959
ubiquitous language and domains and

00:10:10,689 --> 00:10:16,630
context so ubiquitous language is really

00:10:13,959 --> 00:10:18,250
a crucial part of DDD and I think it's

00:10:16,630 --> 00:10:19,870
it's it's only the it's the main

00:10:18,250 --> 00:10:22,300
takeaway so to say or that the only

00:10:19,870 --> 00:10:25,480
thing that you have to keep in mind if

00:10:22,300 --> 00:10:26,470
you were to forget everything else the

00:10:25,480 --> 00:10:28,839
ubiquitous language is the language

00:10:26,470 --> 00:10:31,420
spoken by both you as a software

00:10:28,839 --> 00:10:34,329
developer as well as any of the business

00:10:31,420 --> 00:10:36,880
people that you interact with so now you

00:10:34,329 --> 00:10:38,860
don't have to translate any more things

00:10:36,880 --> 00:10:41,589
that those business people say tell you

00:10:38,860 --> 00:10:43,810
the stakeholders so to say and what you

00:10:41,589 --> 00:10:45,610
will find in your code base so the same

00:10:43,810 --> 00:10:47,860
words the same language constructs the

00:10:45,610 --> 00:10:51,399
same grammatical grammatical approaches

00:10:47,860 --> 00:10:54,339
there can be seen both in conversations

00:10:51,399 --> 00:10:55,630
with your business people as well as in

00:10:54,339 --> 00:10:57,699
your code base so that's really

00:10:55,630 --> 00:11:00,750
interesting and also really important

00:10:57,699 --> 00:11:04,360
for improving your domain model down

00:11:00,750 --> 00:11:06,339
then core domain which will be the

00:11:04,360 --> 00:11:08,649
aspect of the business domain that is

00:11:06,339 --> 00:11:10,480
distinctive so this is a particular part

00:11:08,649 --> 00:11:12,160
of the domain that is very important to

00:11:10,480 --> 00:11:13,630
your business and if you write good

00:11:12,160 --> 00:11:14,019
software for this including a good

00:11:13,630 --> 00:11:16,389
software

00:11:14,019 --> 00:11:17,800
or a good domain model that software

00:11:16,389 --> 00:11:20,410
will make a big difference for your

00:11:17,800 --> 00:11:24,399
clients so of course you can make them

00:11:20,410 --> 00:11:26,790
very happy about it core domains are

00:11:24,399 --> 00:11:30,639
separated from generic subdomains or

00:11:26,790 --> 00:11:32,589
more in general subdomains where well it

00:11:30,639 --> 00:11:33,759
is an important part well of course the

00:11:32,589 --> 00:11:37,540
business wouldn't function without it

00:11:33,759 --> 00:11:40,569
but you can use a standard software for

00:11:37,540 --> 00:11:43,660
this generic software maybe by the

00:11:40,569 --> 00:11:45,879
software or or rent it or let it be

00:11:43,660 --> 00:11:48,149
developed by people who are much cheaper

00:11:45,879 --> 00:11:50,619
than you are or anything like that

00:11:48,149 --> 00:11:54,879
because it's not really core to that

00:11:50,619 --> 00:11:57,639
business mm-hmm then bounded context

00:11:54,879 --> 00:12:00,850
there is much confusion about that this

00:11:57,639 --> 00:12:04,509
is just a boundary for the context right

00:12:00,850 --> 00:12:06,670
a context means that or we have concepts

00:12:04,509 --> 00:12:08,619
because concepts make sense only within

00:12:06,670 --> 00:12:12,489
a certain situation or certain context

00:12:08,619 --> 00:12:14,999
and concepts well and or the meaning of

00:12:12,489 --> 00:12:17,980
concepts ends at certain points so

00:12:14,999 --> 00:12:20,350
within one bounded context the concepts

00:12:17,980 --> 00:12:22,509
are really the same the words will mean

00:12:20,350 --> 00:12:24,759
the same thing once you cross the

00:12:22,509 --> 00:12:27,160
boundary words start becoming something

00:12:24,759 --> 00:12:29,319
else or start to mean something else or

00:12:27,160 --> 00:12:31,389
some words won't even be used in another

00:12:29,319 --> 00:12:33,939
context where in this context they are

00:12:31,389 --> 00:12:37,089
being used by meet contexts can be used

00:12:33,939 --> 00:12:39,129
to separate teams so one team can work

00:12:37,089 --> 00:12:41,110
on a particular bounded context where

00:12:39,129 --> 00:12:43,360
words make sense in a particular way and

00:12:41,110 --> 00:12:45,339
then you have another team working on a

00:12:43,360 --> 00:12:48,970
another bounded context where words have

00:12:45,339 --> 00:12:52,240
other meanings or are irrelevant to the

00:12:48,970 --> 00:12:57,629
other team and then come the strategic

00:12:52,240 --> 00:12:59,919
patterns or strategic concepts of ddd so

00:12:57,629 --> 00:13:02,649
well once you know about this bounded

00:12:59,919 --> 00:13:04,449
context idea then you can draw maps of

00:13:02,649 --> 00:13:07,329
how these bounded contexts are related

00:13:04,449 --> 00:13:09,730
to each other and you can see or start

00:13:07,329 --> 00:13:12,100
to define the ways in which contexts are

00:13:09,730 --> 00:13:16,600
related to each other so you can see

00:13:12,100 --> 00:13:19,360
that maybe you're well depending on

00:13:16,600 --> 00:13:20,499
other contexts maybe you're having sort

00:13:19,360 --> 00:13:23,079
of the same domain model as other

00:13:20,499 --> 00:13:25,540
contexts do maybe you have to translate

00:13:23,079 --> 00:13:27,370
between domain models there and these

00:13:25,540 --> 00:13:29,529
things are actually very useful

00:13:27,370 --> 00:13:32,410
as at least I find that this is in

00:13:29,529 --> 00:13:33,760
practice very useful because it allows

00:13:32,410 --> 00:13:37,360
you to define relationships between

00:13:33,760 --> 00:13:38,830
teams as well as code basis and you can

00:13:37,360 --> 00:13:43,150
see where there is a mismatch between

00:13:38,830 --> 00:13:45,310
the between between the two so this is

00:13:43,150 --> 00:13:47,440
about discovering everything that's

00:13:45,310 --> 00:13:49,660
going on in your clients application or

00:13:47,440 --> 00:13:51,520
your application and it will also give

00:13:49,660 --> 00:13:54,370
you some ideas about how to split up

00:13:51,520 --> 00:13:56,470
these applications and create separate

00:13:54,370 --> 00:13:58,990
really bounded contexts where there is

00:13:56,470 --> 00:14:01,450
an actual physical boundary between each

00:13:58,990 --> 00:14:03,190
of the contexts there and this is also

00:14:01,450 --> 00:14:05,560
where I think because well it's very

00:14:03,190 --> 00:14:07,240
complicated stuff of course and I think

00:14:05,560 --> 00:14:08,680
this is this is this is not really

00:14:07,240 --> 00:14:11,230
something that you start with if you're

00:14:08,680 --> 00:14:14,200
if you're learning to program of course

00:14:11,230 --> 00:14:18,060
but this is where we're basically are

00:14:14,200 --> 00:14:20,200
our future is or our horizons are we can

00:14:18,060 --> 00:14:22,000
infinitely expand our knowledge and

00:14:20,200 --> 00:14:23,290
experience here so that's a good thing

00:14:22,000 --> 00:14:26,220
of course if you're looking for

00:14:23,290 --> 00:14:26,220
something to improve yourself

00:14:26,880 --> 00:14:33,130
discovering things about the business

00:14:30,220 --> 00:14:34,690
domain can be done using techniques like

00:14:33,130 --> 00:14:35,920
events storming there are there are

00:14:34,690 --> 00:14:37,870
other different techniques that you can

00:14:35,920 --> 00:14:39,370
use there this is something that's very

00:14:37,870 --> 00:14:41,200
useful to learn if you're a developer

00:14:39,370 --> 00:14:45,970
and if you were working with the client

00:14:41,200 --> 00:14:47,680
and well who isn't really the same for

00:14:45,970 --> 00:14:49,630
interviewing domain experts this is

00:14:47,680 --> 00:14:52,330
something that we have to to become much

00:14:49,630 --> 00:14:55,180
better at I find that that most

00:14:52,330 --> 00:14:57,190
developers are really not able to to to

00:14:55,180 --> 00:14:58,720
really ask further for the right things

00:14:57,190 --> 00:15:02,170
so we have to learn how to communicate

00:14:58,720 --> 00:15:03,820
with the client really understand what

00:15:02,170 --> 00:15:06,250
they are trying to achieve really trying

00:15:03,820 --> 00:15:08,260
to understand their business domain and

00:15:06,250 --> 00:15:11,230
make sure that our domain model solves

00:15:08,260 --> 00:15:14,320
their issues there so a lot of DDD is

00:15:11,230 --> 00:15:15,940
really about well something that the DDD

00:15:14,320 --> 00:15:18,730
community calls crunching domain

00:15:15,940 --> 00:15:22,300
knowledge but also about writing good

00:15:18,730 --> 00:15:23,890
code growing this domain model which is

00:15:22,300 --> 00:15:27,580
an agile way of looking at the main

00:15:23,890 --> 00:15:30,430
models keeping to referred always

00:15:27,580 --> 00:15:32,529
refining that that same model and make

00:15:30,430 --> 00:15:34,089
sure that it does some very useful work

00:15:32,529 --> 00:15:37,360
for that particular client that you work

00:15:34,089 --> 00:15:40,649
for in other words we create software

00:15:37,360 --> 00:15:42,180
that matters right and as I said

00:15:40,649 --> 00:15:44,879
software developers we should we should

00:15:42,180 --> 00:15:47,970
be cool and be part of this DDD movement

00:15:44,879 --> 00:15:51,990
I'm not sure how how much people are

00:15:47,970 --> 00:15:54,209
already doing DDD can I see hands or

00:15:51,990 --> 00:15:57,179
doing something with DD right

00:15:54,209 --> 00:16:00,209
okay quite a lot I guess something that

00:15:57,179 --> 00:16:06,990
you should look into and well get better

00:16:00,209 --> 00:16:09,420
at this also if you're sort of a maybe

00:16:06,990 --> 00:16:11,699
maybe your your client yourself or

00:16:09,420 --> 00:16:13,949
you're a team leader or something and

00:16:11,699 --> 00:16:16,439
you keep seeing that whenever you ask

00:16:13,949 --> 00:16:19,019
your team to create bananas they create

00:16:16,439 --> 00:16:20,369
apples oh that is something that happens

00:16:19,019 --> 00:16:22,949
in real life

00:16:20,369 --> 00:16:25,649
DDD can really help with that so DDD is

00:16:22,949 --> 00:16:28,290
of course about discovery and and and

00:16:25,649 --> 00:16:31,470
understanding what's going on and also

00:16:28,290 --> 00:16:35,279
about creating the right thing that the

00:16:31,470 --> 00:16:41,240
customer wants and this easily of course

00:16:35,279 --> 00:16:43,110
brings us to BDD who does BDD right okay

00:16:41,240 --> 00:16:46,740
more or less a different group of people

00:16:43,110 --> 00:16:49,620
but still quite a lot so definitely dive

00:16:46,740 --> 00:16:53,100
into that this is the North who came up

00:16:49,620 --> 00:16:55,679
with the idea well of course as a

00:16:53,100 --> 00:17:01,139
developer we know this situation there

00:16:55,679 --> 00:17:03,480
is a a stakeholder and he says well I

00:17:01,139 --> 00:17:05,640
want mmm something something and you as

00:17:03,480 --> 00:17:08,100
a programmer say okay okay

00:17:05,640 --> 00:17:10,589
that's good but I want to do this in an

00:17:08,100 --> 00:17:14,130
agile way right I want to feel free I

00:17:10,589 --> 00:17:16,380
want to be an agile developer great so

00:17:14,130 --> 00:17:17,699
we have this heuristic whenever we're

00:17:16,380 --> 00:17:19,919
doing something agile we can ask

00:17:17,699 --> 00:17:23,250
ourselves what's the next most important

00:17:19,919 --> 00:17:25,860
thing the system doesn't do right and

00:17:23,250 --> 00:17:28,319
then we put that down or we write it

00:17:25,860 --> 00:17:30,289
down or we just tell it to the

00:17:28,319 --> 00:17:33,330
developers and saying well as a

00:17:30,289 --> 00:17:35,789
something something I want to something

00:17:33,330 --> 00:17:37,770
something so that something something

00:17:35,789 --> 00:17:40,230
and the so that is also very important

00:17:37,770 --> 00:17:43,140
because now you know why it's it's it's

00:17:40,230 --> 00:17:45,720
so important for that stakeholder to be

00:17:43,140 --> 00:17:48,990
able to do this with the system this is

00:17:45,720 --> 00:17:51,090
called a user story and then you start

00:17:48,990 --> 00:17:53,010
discussing examples examples of that

00:17:51,090 --> 00:17:54,350
particular user story what it would look

00:17:53,010 --> 00:17:56,929
like to implement that use

00:17:54,350 --> 00:17:59,120
sorry so we have all this well we

00:17:56,929 --> 00:18:01,880
basically use the structure given when

00:17:59,120 --> 00:18:04,490
then and we describe the aspects of our

00:18:01,880 --> 00:18:07,010
application that will satisfy eventually

00:18:04,490 --> 00:18:10,220
that stakeholder so these are called

00:18:07,010 --> 00:18:12,710
examples scenarios and in fact they are

00:18:10,220 --> 00:18:15,260
acceptance criteria so we now know when

00:18:12,710 --> 00:18:17,840
our customer or our stakeholder will

00:18:15,260 --> 00:18:19,490
will accept our application as a working

00:18:17,840 --> 00:18:21,760
example of whatever they wanted to do

00:18:19,490 --> 00:18:21,760
with it

00:18:22,450 --> 00:18:29,630
so with BDD we make this step of turning

00:18:27,530 --> 00:18:32,960
these scenarios into executable code

00:18:29,630 --> 00:18:35,600
which verifies that yes the acceptance

00:18:32,960 --> 00:18:37,789
criteria have been met and so BDD is

00:18:35,600 --> 00:18:39,200
about implementing application by

00:18:37,789 --> 00:18:41,990
describing its behavior from the

00:18:39,200 --> 00:18:43,070
perspective of its stakeholders and that

00:18:41,990 --> 00:18:45,230
will basically make sure that whatever

00:18:43,070 --> 00:18:48,830
you are going to write in code actually

00:18:45,230 --> 00:18:50,809
is what that stakeholder once so who

00:18:48,830 --> 00:18:52,760
doesn't want to do this who wants to

00:18:50,809 --> 00:18:56,750
write code that well the stakeholder

00:18:52,760 --> 00:18:59,330
isn't interested in right looking at the

00:18:56,750 --> 00:19:01,640
development lifecycle a bit it's like we

00:18:59,330 --> 00:19:03,380
write this this failing acceptance test

00:19:01,640 --> 00:19:06,380
we have the scenario in our computer and

00:19:03,380 --> 00:19:09,380
then we start driving in looking at the

00:19:06,380 --> 00:19:11,870
concepts possibly using domain driven

00:19:09,380 --> 00:19:15,500
design to find out which concepts have

00:19:11,870 --> 00:19:18,169
been even in use and we write some units

00:19:15,500 --> 00:19:21,320
of code some classes there for which we

00:19:18,169 --> 00:19:23,630
of course write unit tests we make the

00:19:21,320 --> 00:19:26,690
test pass and then so on and so on and

00:19:23,630 --> 00:19:29,330
so on until we have a large group of

00:19:26,690 --> 00:19:31,460
classes which will together or objects

00:19:29,330 --> 00:19:34,840
basically which will together make sure

00:19:31,460 --> 00:19:38,179
that the acceptance test also succeeds

00:19:34,840 --> 00:19:42,260
right so who does unit testing by the

00:19:38,179 --> 00:19:43,820
way okay that's great that's great and

00:19:42,260 --> 00:19:47,059
who would like to try acceptance testing

00:19:43,820 --> 00:19:48,080
if they don't yet do this already okay

00:19:47,059 --> 00:19:51,700
sounds good

00:19:48,080 --> 00:19:52,850
at least I I brought some ideas to you

00:19:51,700 --> 00:19:55,250
good

00:19:52,850 --> 00:19:57,080
so BDD is an agile methodology for

00:19:55,250 --> 00:19:58,970
creating software that matters and in

00:19:57,080 --> 00:20:02,419
fact that is the same thing as I said

00:19:58,970 --> 00:20:05,480
about DDD and that is because it is

00:20:02,419 --> 00:20:07,100
closely related it's about requirements

00:20:05,480 --> 00:20:07,850
analysis in this case so it's a little

00:20:07,100 --> 00:20:10,789
bit more technical

00:20:07,850 --> 00:20:12,200
then DDD but it's also about ubiquitous

00:20:10,789 --> 00:20:14,539
language so the language that you speak

00:20:12,200 --> 00:20:16,910
with your stakeholders should be in your

00:20:14,539 --> 00:20:19,850
examples in your in your scenarios and

00:20:16,910 --> 00:20:21,350
it should also be in your code so

00:20:19,850 --> 00:20:23,750
there's no translation going on there

00:20:21,350 --> 00:20:25,820
anymore you learn to talk with domain

00:20:23,750 --> 00:20:29,059
experts you learn to define expected

00:20:25,820 --> 00:20:31,549
behavior and all of this is related to

00:20:29,059 --> 00:20:33,080
acceptance criteria so whenever you have

00:20:31,549 --> 00:20:35,150
implemented the application in this

00:20:33,080 --> 00:20:37,789
particular way the client will be very

00:20:35,150 --> 00:20:39,650
happy with you or client the stakeholder

00:20:37,789 --> 00:20:41,990
because it has doesn't have to be your

00:20:39,650 --> 00:20:44,929
client it can also be your your someone

00:20:41,990 --> 00:20:46,429
else in your company for example the

00:20:44,929 --> 00:20:48,650
funny thing is that that testing and the

00:20:46,429 --> 00:20:51,500
tools are only of secondary interested

00:20:48,650 --> 00:20:53,600
interest of course they are great

00:20:51,500 --> 00:20:57,020
nonetheless we when we use these things

00:20:53,600 --> 00:20:59,590
like like for example b-hat well we will

00:20:57,020 --> 00:21:02,390
see that this is very nice to work with

00:20:59,590 --> 00:21:04,850
but in the end it's more about making

00:21:02,390 --> 00:21:07,370
sure that you you capture the acceptance

00:21:04,850 --> 00:21:10,309
criteria the examples in the best way

00:21:07,370 --> 00:21:12,580
possible something else I wanted to

00:21:10,309 --> 00:21:15,590
mention here is modeling by example

00:21:12,580 --> 00:21:17,870
which is sort of invented by average

00:21:15,590 --> 00:21:20,210
that's not sure if he is in the room by

00:21:17,870 --> 00:21:25,520
the way but I'm sure there will be

00:21:20,210 --> 00:21:27,470
people who know that the guy and this is

00:21:25,520 --> 00:21:29,380
sort of this this brings BDD and TDD

00:21:27,470 --> 00:21:32,030
well together

00:21:29,380 --> 00:21:34,549
the idea is to design your domain model

00:21:32,030 --> 00:21:36,230
and guided by these examples and then

00:21:34,549 --> 00:21:40,010
once you start running these

00:21:36,230 --> 00:21:41,360
acceptance tests you will clearly

00:21:40,010 --> 00:21:41,960
separate the layers within your

00:21:41,360 --> 00:21:43,700
application

00:21:41,960 --> 00:21:45,140
so you will have your domain model you

00:21:43,700 --> 00:21:48,110
will have your application services and

00:21:45,140 --> 00:21:50,929
then an infrastructure layer which sort

00:21:48,110 --> 00:21:52,400
of might remind you of a hexagonal

00:21:50,929 --> 00:21:56,600
architecture which I've spoken about

00:21:52,400 --> 00:21:59,030
quite often in this infrastructural part

00:21:56,600 --> 00:22:01,000
of the application we recognize code

00:21:59,030 --> 00:22:05,299
that is related to the user interface

00:22:01,000 --> 00:22:07,309
like templates or HTML stuff related to

00:22:05,299 --> 00:22:10,010
HTTP message processing the web

00:22:07,309 --> 00:22:12,470
framework for example symphony the file

00:22:10,010 --> 00:22:16,340
system which actually touches the hard

00:22:12,470 --> 00:22:18,770
disk at some point and database now you

00:22:16,340 --> 00:22:20,870
test your scenarios or examples against

00:22:18,770 --> 00:22:21,890
the application layer and that will

00:22:20,870 --> 00:22:24,470
result in very far

00:22:21,890 --> 00:22:27,500
executing tests of course then you run

00:22:24,470 --> 00:22:29,179
some of your scenarios against the

00:22:27,500 --> 00:22:31,309
infrastructure layer which will be slow

00:22:29,179 --> 00:22:33,020
it will need an actual database it

00:22:31,309 --> 00:22:35,630
possibly needs an actual internet

00:22:33,020 --> 00:22:37,549
connection etc but now you will know

00:22:35,630 --> 00:22:40,280
that more or less it's supposed to work

00:22:37,549 --> 00:22:44,570
as it or it works as it is supposed to

00:22:40,280 --> 00:22:49,040
work this brings us to this guy who I've

00:22:44,570 --> 00:22:51,049
seen is in the room it well this is sort

00:22:49,040 --> 00:22:53,630
of the the testing pyramid and I'm I

00:22:51,049 --> 00:22:55,970
know Karen didn't invent the idea of

00:22:53,630 --> 00:22:57,350
course likes like so many ideas and

00:22:55,970 --> 00:23:00,590
software these aren't invented by

00:22:57,350 --> 00:23:02,960
someone but I can just recommend any

00:23:00,590 --> 00:23:05,750
talk that he did about testing you can

00:23:02,960 --> 00:23:07,280
find this on YouTube or anything just

00:23:05,750 --> 00:23:09,590
watch it and learn about the best way to

00:23:07,280 --> 00:23:11,600
to design your test suite and to make

00:23:09,590 --> 00:23:13,580
sure that you have lots of unit tests a

00:23:11,600 --> 00:23:15,020
nice layer of acceptance test which will

00:23:13,580 --> 00:23:17,900
still be very fast because they run

00:23:15,020 --> 00:23:20,660
against the application layer and then

00:23:17,900 --> 00:23:21,860
you have UI test or infrastructure test

00:23:20,660 --> 00:23:24,080
which is which are more or less

00:23:21,860 --> 00:23:25,720
end-to-end tests making sure that the

00:23:24,080 --> 00:23:32,330
whole system including its configuration

00:23:25,720 --> 00:23:35,750
would run well ok so mmm-hmm BDD

00:23:32,330 --> 00:23:37,640
modeling by example very cool stuff and

00:23:35,750 --> 00:23:40,400
also very helpful for reaching the goals

00:23:37,640 --> 00:23:44,000
set by DDD which basically means

00:23:40,400 --> 00:23:47,000
creating software that matters this will

00:23:44,000 --> 00:23:50,210
bring your focus a bit away from all the

00:23:47,000 --> 00:23:53,000
technicalities like this discussion

00:23:50,210 --> 00:23:55,130
about no SQL databases should we use

00:23:53,000 --> 00:23:56,200
CouchDB or I don't know what it's called

00:23:55,130 --> 00:23:59,120
these days

00:23:56,200 --> 00:24:00,620
MongoDB for example all of this this

00:23:59,120 --> 00:24:02,270
low-level tech stuff is not the things

00:24:00,620 --> 00:24:05,150
that are that we are concerned about

00:24:02,270 --> 00:24:06,500
anymore or at least we are concerned

00:24:05,150 --> 00:24:08,840
about them but it's not our primary

00:24:06,500 --> 00:24:11,690
primary concern so we are moving away

00:24:08,840 --> 00:24:14,780
from from really low-level stuff to more

00:24:11,690 --> 00:24:16,820
high-level design stuff and that's

00:24:14,780 --> 00:24:21,410
something that will make you again very

00:24:16,820 --> 00:24:25,690
valuable as a as a developer so take 5

00:24:21,410 --> 00:24:25,690
seconds to to digest all of this

00:24:27,960 --> 00:24:34,660
so we're sort of come schedule ready for

00:24:32,320 --> 00:24:37,480
the next the next subject secure s and

00:24:34,660 --> 00:24:41,560
event sourcing yet another quite cool

00:24:37,480 --> 00:24:42,880
thing this originates from or well we

00:24:41,560 --> 00:24:46,060
have to take a step back and look at

00:24:42,880 --> 00:24:48,550
what cqs means so it's it's without the

00:24:46,060 --> 00:24:50,110
R but it's not the same idea but without

00:24:48,550 --> 00:24:52,480
our something like that it's it's just

00:24:50,110 --> 00:24:54,280
something entirely different but you can

00:24:52,480 --> 00:24:58,150
see some of the historical things that

00:24:54,280 --> 00:25:00,280
have been happening there so looking at

00:24:58,150 --> 00:25:02,440
a piece of code you can see that that

00:25:00,280 --> 00:25:05,290
there will be command functions that do

00:25:02,440 --> 00:25:07,090
things but don't return anything so

00:25:05,290 --> 00:25:09,280
command functions usually have some sort

00:25:07,090 --> 00:25:11,590
of an effect a lasting effect on this

00:25:09,280 --> 00:25:15,160
object and there will be query functions

00:25:11,590 --> 00:25:16,960
which returns some information but don't

00:25:15,160 --> 00:25:21,610
change anything they don't have side

00:25:16,960 --> 00:25:26,260
effects and now comes Gregg young and he

00:25:21,610 --> 00:25:29,080
sort of expands this concept into CQRS

00:25:26,260 --> 00:25:32,220
which means command query responsibility

00:25:29,080 --> 00:25:34,750
segregation and now instead of having

00:25:32,220 --> 00:25:37,150
command or query methods within one

00:25:34,750 --> 00:25:40,420
object we now have separate objects for

00:25:37,150 --> 00:25:44,440
command methods and query methods right

00:25:40,420 --> 00:25:45,790
so there's there's a boundary there so

00:25:44,440 --> 00:25:48,070
we still have the command function it

00:25:45,790 --> 00:25:50,350
changes something inside the entity but

00:25:48,070 --> 00:25:52,560
when we want to know what has been

00:25:50,350 --> 00:25:53,740
changed we asked it to another object

00:25:52,560 --> 00:25:56,580
right

00:25:53,740 --> 00:25:59,440
this may sound quite counterintuitive

00:25:56,580 --> 00:26:02,920
because well how does the data get into

00:25:59,440 --> 00:26:04,180
that other object in the first place you

00:26:02,920 --> 00:26:06,430
can do something like this so this is

00:26:04,180 --> 00:26:08,710
CQRS light we have the entity which

00:26:06,430 --> 00:26:11,560
undergoes the change and the data ends

00:26:08,710 --> 00:26:12,700
up being in a database right then on the

00:26:11,560 --> 00:26:14,890
other hand we have the query object

00:26:12,700 --> 00:26:16,810
object also known as the read model

00:26:14,890 --> 00:26:18,940
which takes the database from the

00:26:16,810 --> 00:26:21,670
database or the data from the database

00:26:18,940 --> 00:26:26,650
and exposes the query methods like it

00:26:21,670 --> 00:26:28,870
used to be like it used to do well cqs

00:26:26,650 --> 00:26:31,660
is only very useful when you actually

00:26:28,870 --> 00:26:33,610
have some sort of a cut there and the

00:26:31,660 --> 00:26:36,730
entity in fact the data of the entity is

00:26:33,610 --> 00:26:38,470
stored in a database right but then the

00:26:36,730 --> 00:26:40,240
data is copied to other places like

00:26:38,470 --> 00:26:42,100
another database

00:26:40,240 --> 00:26:44,409
maybe an entirely different system and

00:26:42,100 --> 00:26:47,619
then at some point the data will be used

00:26:44,409 --> 00:26:51,899
to hydrate or populate a reed model

00:26:47,619 --> 00:26:55,179
object so how how can we bridge that gap

00:26:51,899 --> 00:26:58,480
using domain events and those are just

00:26:55,179 --> 00:27:00,519
like the DD domain events because inside

00:26:58,480 --> 00:27:04,179
the entity whenever a change occurs in

00:27:00,519 --> 00:27:06,669
it or when it is created or dies we can

00:27:04,179 --> 00:27:09,039
generate events so we have a domain

00:27:06,669 --> 00:27:11,559
event in the entity which represents the

00:27:09,039 --> 00:27:12,730
change that has occurred to it and then

00:27:11,559 --> 00:27:15,669
based on that domain event

00:27:12,730 --> 00:27:17,559
we can add some projections to our

00:27:15,669 --> 00:27:19,869
system which take the data from the

00:27:17,559 --> 00:27:22,659
event and make sure that that a copy of

00:27:19,869 --> 00:27:25,179
the data ends up well anywhere it's

00:27:22,659 --> 00:27:28,179
supposed to end up for example in this

00:27:25,179 --> 00:27:31,059
one green reed model and this particular

00:27:28,179 --> 00:27:34,119
remodel is just tailor-made for also for

00:27:31,059 --> 00:27:36,940
a particular view and well the most

00:27:34,119 --> 00:27:39,340
simple example would be data that is to

00:27:36,940 --> 00:27:41,499
be rendered in a sort of a list which is

00:27:39,340 --> 00:27:43,419
simple it has maybe two two fields or

00:27:41,499 --> 00:27:45,490
something for each object and then you

00:27:43,419 --> 00:27:48,100
have more or less the full version of

00:27:45,490 --> 00:27:51,039
the same object or same object which

00:27:48,100 --> 00:27:52,509
contains more data more fields and so

00:27:51,039 --> 00:27:55,119
based on that domain event data is

00:27:52,509 --> 00:27:58,029
copied to the different reed models that

00:27:55,119 --> 00:28:00,429
are out there so for example the yellow

00:27:58,029 --> 00:28:02,799
rate model in this case and also maybe

00:28:00,429 --> 00:28:04,480
not even just your system is interested

00:28:02,799 --> 00:28:06,519
in these two main events there may be

00:28:04,480 --> 00:28:08,259
external services other applications

00:28:06,519 --> 00:28:11,409
that should be notified of this

00:28:08,259 --> 00:28:13,480
particular change in that entity and of

00:28:11,409 --> 00:28:15,970
course you can just send the method or

00:28:13,480 --> 00:28:20,200
send the events across the wire to some

00:28:15,970 --> 00:28:22,809
other application so well when an entity

00:28:20,200 --> 00:28:25,600
is created the event is like this it's

00:28:22,809 --> 00:28:28,570
recorded entity created then something

00:28:25,600 --> 00:28:30,909
changes something more happens something

00:28:28,570 --> 00:28:33,610
more and all of this is being stored

00:28:30,909 --> 00:28:36,730
separately in what's known as the events

00:28:33,610 --> 00:28:38,019
store so for each of the the aggregates

00:28:36,730 --> 00:28:41,110
that come to life the entities that come

00:28:38,019 --> 00:28:42,610
to life we we track all of the events

00:28:41,110 --> 00:28:44,590
that happen to it all of the changes

00:28:42,610 --> 00:28:48,490
that happen to it and we store all of

00:28:44,590 --> 00:28:49,990
that inside of an event stream in the

00:28:48,490 --> 00:28:52,600
event store

00:28:49,990 --> 00:28:55,000
and now what we what we can do with this

00:28:52,600 --> 00:28:56,559
is we can replay anything that has

00:28:55,000 --> 00:28:59,100
happened in the past we can just take

00:28:56,559 --> 00:29:02,070
the events put them in order

00:28:59,100 --> 00:29:04,899
and-and-and-and replay any of them and

00:29:02,070 --> 00:29:06,520
well maybe just start creating new reed

00:29:04,899 --> 00:29:08,500
models if if necessary for our

00:29:06,520 --> 00:29:10,659
application maybe we have defined a new

00:29:08,500 --> 00:29:14,260
feature which requires a new type of

00:29:10,659 --> 00:29:16,149
remodel but we can also generate reports

00:29:14,260 --> 00:29:19,149
based on anything that has happened in

00:29:16,149 --> 00:29:22,779
the past like starting at the point

00:29:19,149 --> 00:29:24,880
where we started saving those events and

00:29:22,779 --> 00:29:27,279
we can also do some analytical stuff

00:29:24,880 --> 00:29:29,890
with it we can do aggregations on

00:29:27,279 --> 00:29:32,230
whatever has happened in the past and we

00:29:29,890 --> 00:29:36,100
can make even predictions based on those

00:29:32,230 --> 00:29:38,799
things and this is of course an example

00:29:36,100 --> 00:29:40,330
of the true power of CQRS where in a

00:29:38,799 --> 00:29:43,480
traditional sense if you look at the

00:29:40,330 --> 00:29:45,820
database using for example PHP myadmin

00:29:43,480 --> 00:29:47,740
you just open the page you look at the

00:29:45,820 --> 00:29:49,809
tables what's in there and it's just

00:29:47,740 --> 00:29:51,640
what is right what's in the database

00:29:49,809 --> 00:29:53,679
right now and there's no way to find out

00:29:51,640 --> 00:29:56,320
what was in the database yesterday of

00:29:53,679 --> 00:29:57,820
course unless you have backups but well

00:29:56,320 --> 00:29:59,309
that's not really a good way to find out

00:29:57,820 --> 00:30:03,309
what has happened in the past of course

00:29:59,309 --> 00:30:05,169
and well with events and events sourcing

00:30:03,309 --> 00:30:07,770
is just like you can go back at any

00:30:05,169 --> 00:30:10,480
point in time to any point in time and

00:30:07,770 --> 00:30:13,710
analyze what's going on at that moment

00:30:10,480 --> 00:30:16,419
and you can do really nice things like

00:30:13,710 --> 00:30:19,240
visualize event streams like EF class

00:30:16,419 --> 00:30:21,190
does he had a nice nice article about

00:30:19,240 --> 00:30:24,820
this and it's just an example of what

00:30:21,190 --> 00:30:27,700
else you can do with those event streams

00:30:24,820 --> 00:30:29,710
stored in the event store I think it

00:30:27,700 --> 00:30:32,890
makes a lot of sense to to look into CQ

00:30:29,710 --> 00:30:34,570
s and event sourcing because well this

00:30:32,890 --> 00:30:37,120
is the main selling point for CQ s it

00:30:34,570 --> 00:30:39,399
will enable you to to optimize both

00:30:37,120 --> 00:30:41,620
sides of your application the right side

00:30:39,399 --> 00:30:44,529
which takes commands and changes things

00:30:41,620 --> 00:30:47,049
and the read side which returns

00:30:44,529 --> 00:30:49,809
information to any interested client

00:30:47,049 --> 00:30:53,649
because your read models are optimized

00:30:49,809 --> 00:30:56,320
for a particular view so usually those

00:30:53,649 --> 00:30:58,230
read models don't have to be created in

00:30:56,320 --> 00:31:00,700
very complex ways using all kinds of

00:30:58,230 --> 00:31:02,380
difficult select queries or joins or

00:31:00,700 --> 00:31:03,850
anything like that it's just the data

00:31:02,380 --> 00:31:05,649
that you need right there

00:31:03,850 --> 00:31:07,690
and all the aggregations have already

00:31:05,649 --> 00:31:10,479
been done so it's it's more or less like

00:31:07,690 --> 00:31:16,929
select all from this table and you just

00:31:10,479 --> 00:31:19,299
send it to a template or for example but

00:31:16,929 --> 00:31:21,850
also if you use sakura-san event

00:31:19,299 --> 00:31:23,470
sourcing you will have all the ways to

00:31:21,850 --> 00:31:26,789
create interesting reports and analytics

00:31:23,470 --> 00:31:30,879
and of course predictions for your

00:31:26,789 --> 00:31:32,909
stakeholders clients so again you will

00:31:30,879 --> 00:31:36,609
become a much more valuable developer

00:31:32,909 --> 00:31:38,830
this fits very well with with DDD which

00:31:36,609 --> 00:31:41,049
is why now we have DDD linked to BDD and

00:31:38,830 --> 00:31:42,879
also secured as an event sourcing so

00:31:41,049 --> 00:31:45,489
well you could just consider doing all

00:31:42,879 --> 00:31:47,679
of this at the same time well I don't

00:31:45,489 --> 00:31:52,450
know you could also just pick one and

00:31:47,679 --> 00:31:54,879
start learning it that way but well this

00:31:52,450 --> 00:31:56,739
sakura-san event sourcing thing makes

00:31:54,879 --> 00:32:00,789
your application ready for the next

00:31:56,739 --> 00:32:02,919
challenge which is micro services so

00:32:00,789 --> 00:32:05,619
something that is cool and sort of

00:32:02,919 --> 00:32:06,970
popular but also a bit hyped and you

00:32:05,619 --> 00:32:09,340
know that there are so many things about

00:32:06,970 --> 00:32:12,340
this that there are so many jokes on

00:32:09,340 --> 00:32:14,259
Twitter like would you be able to create

00:32:12,340 --> 00:32:18,159
micro-services if you don't even create

00:32:14,259 --> 00:32:20,649
a nice moment monolith Sam Newman isn't

00:32:18,159 --> 00:32:22,450
the inventor of micro services but he

00:32:20,649 --> 00:32:26,259
has a nice book about it and I think

00:32:22,450 --> 00:32:28,960
it's really worth a read so yes I

00:32:26,259 --> 00:32:31,210
mentioned the monolith already it looks

00:32:28,960 --> 00:32:33,940
like this it's red and that is a bad

00:32:31,210 --> 00:32:37,450
sign we could do something like this

00:32:33,940 --> 00:32:39,190
better this is better now we have split

00:32:37,450 --> 00:32:42,519
the application or the monolith into

00:32:39,190 --> 00:32:44,830
multiple smaller services which should

00:32:42,519 --> 00:32:48,220
do the same things as as the monolith

00:32:44,830 --> 00:32:50,889
did or well as some companies there were

00:32:48,220 --> 00:32:56,649
some some teams do they create even more

00:32:50,889 --> 00:32:58,960
micro services and link them together so

00:32:56,649 --> 00:33:03,039
this concept of a micro service who's

00:32:58,960 --> 00:33:05,019
familiar with it anyway okay well so

00:33:03,039 --> 00:33:06,929
quite a lot who actually uses

00:33:05,019 --> 00:33:12,639
microservices in production environments

00:33:06,929 --> 00:33:14,739
so to say okay still quite nice yeah so

00:33:12,639 --> 00:33:16,659
micro services they undergo change as

00:33:14,739 --> 00:33:17,530
well as the monolith application does so

00:33:16,659 --> 00:33:21,370
it accepts

00:33:17,530 --> 00:33:24,549
commands and it omits events possibly

00:33:21,370 --> 00:33:26,530
because well whenever a command ends up

00:33:24,549 --> 00:33:29,200
being processed by an entity this change

00:33:26,530 --> 00:33:30,669
will results in a domain event right so

00:33:29,200 --> 00:33:33,039
we want to communicate what has happened

00:33:30,669 --> 00:33:35,890
within the boundaries of our micro

00:33:33,039 --> 00:33:37,659
service but we might also issue new

00:33:35,890 --> 00:33:40,720
commands and send them to other micro

00:33:37,659 --> 00:33:43,000
services instead of responding to

00:33:40,720 --> 00:33:45,730
commands we could also take events from

00:33:43,000 --> 00:33:48,700
some sort of a queue for example and

00:33:45,730 --> 00:33:50,169
well in fact make our micro service

00:33:48,700 --> 00:33:52,120
loosely coupled because now we only need

00:33:50,169 --> 00:33:54,789
to take events from a queue and respond

00:33:52,120 --> 00:33:59,590
to that instead of sending commands

00:33:54,789 --> 00:34:02,260
directly to other services a micro

00:33:59,590 --> 00:34:04,539
services can have decentralized data it

00:34:02,260 --> 00:34:06,490
can have its own database or it can have

00:34:04,539 --> 00:34:09,609
no database at all that's just up to you

00:34:06,490 --> 00:34:11,919
and it also means that micro services

00:34:09,609 --> 00:34:14,980
don't all grab data from the same

00:34:11,919 --> 00:34:19,030
database like we used to do of course

00:34:14,980 --> 00:34:20,230
this happens a lot nowadays but well at

00:34:19,030 --> 00:34:23,500
least this is this allows you to have

00:34:20,230 --> 00:34:25,480
some some degree of separation and it

00:34:23,500 --> 00:34:27,099
will ease of course maintenance where if

00:34:25,480 --> 00:34:30,639
you want to change something in a

00:34:27,099 --> 00:34:33,060
database schema for example not every

00:34:30,639 --> 00:34:37,599
other piece of the system will will

00:34:33,060 --> 00:34:39,609
crash because of that micro services are

00:34:37,599 --> 00:34:42,940
in general service-oriented so they

00:34:39,609 --> 00:34:44,919
accept commands usually maybe they have

00:34:42,940 --> 00:34:47,349
just a restful api and and they accept

00:34:44,919 --> 00:34:49,839
post or put commands for example they

00:34:47,349 --> 00:34:51,849
possibly accept queries where you can

00:34:49,839 --> 00:34:53,800
have just some get requests server to

00:34:51,849 --> 00:34:57,450
them and they will return some

00:34:53,800 --> 00:35:00,640
information to you they are event-driven

00:34:57,450 --> 00:35:02,890
ideally so so of course you can just

00:35:00,640 --> 00:35:04,960
send commands to them and accept them or

00:35:02,890 --> 00:35:06,820
expect them to make the the requested

00:35:04,960 --> 00:35:09,280
change but it's also very nice if they

00:35:06,820 --> 00:35:13,859
just respond to events because it will

00:35:09,280 --> 00:35:18,099
make them more resilient to the same and

00:35:13,859 --> 00:35:20,080
you could try to - well design your

00:35:18,099 --> 00:35:23,410
Microsoft such a way that its domain

00:35:20,080 --> 00:35:26,560
model is fit just fits fits within one

00:35:23,410 --> 00:35:28,599
bounded context that might be a good

00:35:26,560 --> 00:35:30,460
idea you could also have a smaller micro

00:35:28,599 --> 00:35:31,330
services you can also have bigger micro

00:35:30,460 --> 00:35:34,860
services it doesn't

00:35:31,330 --> 00:35:37,330
really matter I think this is also some

00:35:34,860 --> 00:35:38,380
matter of discussion I'm not sure how

00:35:37,330 --> 00:35:42,910
many people actually did this

00:35:38,380 --> 00:35:45,280
successfully so it's just an idea which

00:35:42,910 --> 00:35:47,740
makes sense to my brain but well who

00:35:45,280 --> 00:35:49,230
knows um what's interesting about

00:35:47,740 --> 00:35:53,260
microservices is that these are

00:35:49,230 --> 00:35:54,610
replaceable so just like that

00:35:53,260 --> 00:35:57,490
you can use different technologies

00:35:54,610 --> 00:36:00,040
different data stores different

00:35:57,490 --> 00:36:02,530
languages even even though in practice

00:36:00,040 --> 00:36:04,630
that is not really that useful because

00:36:02,530 --> 00:36:06,610
then now you have to have developers

00:36:04,630 --> 00:36:09,460
which are able to unless you are able to

00:36:06,610 --> 00:36:12,190
understand different languages in more

00:36:09,460 --> 00:36:14,230
or less the same level so there are some

00:36:12,190 --> 00:36:16,780
difficulties there but also some really

00:36:14,230 --> 00:36:19,690
useful aspects to it

00:36:16,780 --> 00:36:22,150
don't write I would say that Microsoft

00:36:19,690 --> 00:36:24,670
have to be resilient whenever something

00:36:22,150 --> 00:36:26,020
goes wrong at some some point in the

00:36:24,670 --> 00:36:27,730
landscape where at some place in the

00:36:26,020 --> 00:36:30,750
landscape of applications or micro

00:36:27,730 --> 00:36:34,020
services your micro service has to be

00:36:30,750 --> 00:36:36,310
asked to survive that that that crash

00:36:34,020 --> 00:36:37,750
you have to make them redundant so

00:36:36,310 --> 00:36:39,820
that's that that takes a little bit of

00:36:37,750 --> 00:36:42,640
of design from your actual application

00:36:39,820 --> 00:36:45,640
architecture you have to be able to

00:36:42,640 --> 00:36:49,150
separately deploy them so that if you

00:36:45,640 --> 00:36:52,990
deploy one micro service it's it doesn't

00:36:49,150 --> 00:36:54,460
take down all the others and of course

00:36:52,990 --> 00:36:57,150
you have to make them decoupled so you

00:36:54,460 --> 00:37:01,360
can work on on them in separate teams

00:36:57,150 --> 00:37:03,640
and at separate moments in reality they

00:37:01,360 --> 00:37:08,650
need more monitoring usually than a

00:37:03,640 --> 00:37:10,780
monolith dos dos monolith and you will

00:37:08,650 --> 00:37:12,280
likely need more automation so whenever

00:37:10,780 --> 00:37:15,250
you're deploying one monolith

00:37:12,280 --> 00:37:17,110
application that's that's that's that's

00:37:15,250 --> 00:37:18,550
a lot of work usually but it can be

00:37:17,110 --> 00:37:20,410
quite easy if you have the right scripts

00:37:18,550 --> 00:37:22,060
for that once you have to deploy

00:37:20,410 --> 00:37:23,920
hundreds of services then it will be

00:37:22,060 --> 00:37:28,870
much harder and you just have to work on

00:37:23,920 --> 00:37:30,340
your automation stuff okay so I think

00:37:28,870 --> 00:37:33,580
most importantly it should fit within

00:37:30,340 --> 00:37:35,650
your organization in my experience it is

00:37:33,580 --> 00:37:39,280
a is a great fit if if there are

00:37:35,650 --> 00:37:41,230
multiple teams multiple people who don't

00:37:39,280 --> 00:37:42,000
want to be bothered continuously by each

00:37:41,230 --> 00:37:44,980
other's problems

00:37:42,000 --> 00:37:47,290
so with micro services people can

00:37:44,980 --> 00:37:49,810
develop separately maybe just now and

00:37:47,290 --> 00:37:51,210
then discuss with each other but in

00:37:49,810 --> 00:37:56,859
general they they are able to work

00:37:51,210 --> 00:37:58,960
separately on on code bases and well

00:37:56,859 --> 00:38:00,990
it's also interesting because there will

00:37:58,960 --> 00:38:03,970
be different ways of cooperating and

00:38:00,990 --> 00:38:07,030
using the DDD context mapping strategy

00:38:03,970 --> 00:38:10,030
then you can make a map of whatever is

00:38:07,030 --> 00:38:12,010
going on in your landscape of services

00:38:10,030 --> 00:38:14,800
and see if you should change something

00:38:12,010 --> 00:38:16,750
there it will make explicit whatever is

00:38:14,800 --> 00:38:20,140
going on communication wise between

00:38:16,750 --> 00:38:22,510
teams and it's just like like that will

00:38:20,140 --> 00:38:26,770
be reflected in the way that you design

00:38:22,510 --> 00:38:28,720
your micro services also this offers

00:38:26,770 --> 00:38:30,820
scaling options so if you want to grow

00:38:28,720 --> 00:38:33,550
as a company and you're still working on

00:38:30,820 --> 00:38:35,290
one big project then this is definitely

00:38:33,550 --> 00:38:37,060
the way to go you have to choose it you

00:38:35,290 --> 00:38:39,609
just have to split up the split up the

00:38:37,060 --> 00:38:42,940
one big project and make sure that teams

00:38:39,609 --> 00:38:46,930
can work on on the big project while not

00:38:42,940 --> 00:38:49,810
walking in each other's way so I would

00:38:46,930 --> 00:38:51,400
say yes ignore all those jokes and take

00:38:49,810 --> 00:38:52,990
this thing seriously it's a cool thing

00:38:51,400 --> 00:38:55,270
but it's also something that you have to

00:38:52,990 --> 00:38:57,670
learn about read about in particular

00:38:55,270 --> 00:38:59,740
that that look on micro services by Sam

00:38:57,670 --> 00:39:02,260
Newman it will give you some ideas and

00:38:59,740 --> 00:39:04,650
even though you might not want to

00:39:02,260 --> 00:39:07,359
actually do micro services in your

00:39:04,650 --> 00:39:09,820
organization it will give you some good

00:39:07,359 --> 00:39:22,090
ideas about how to design your

00:39:09,820 --> 00:39:28,560
application so the finale okay so the

00:39:22,090 --> 00:39:28,560
cool kids who are they actually

00:39:30,220 --> 00:39:39,250
I don't know who here has a Google

00:39:33,640 --> 00:39:42,040
Friday yeah okay so of course that's the

00:39:39,250 --> 00:39:44,560
fun you have a Google Fri all your days

00:39:42,040 --> 00:39:49,570
are at Google Google days right

00:39:44,560 --> 00:39:54,040
um well okay so who does continuous

00:39:49,570 --> 00:39:55,870
deployment okay that's great yeah yeah

00:39:54,040 --> 00:40:00,070
so you're definitely cool kids right

00:39:55,870 --> 00:40:02,560
um well it turns out that that all of

00:40:00,070 --> 00:40:04,840
you are basically cool kids yes yes you

00:40:02,560 --> 00:40:09,700
and you and you that's really awesome

00:40:04,840 --> 00:40:12,100
well in the end even though I think all

00:40:09,700 --> 00:40:13,870
of this these subjects of that that I

00:40:12,100 --> 00:40:15,400
discussed are very important to you to

00:40:13,870 --> 00:40:19,060
every one of you

00:40:15,400 --> 00:40:21,340
you already know more than you think in

00:40:19,060 --> 00:40:23,230
reality it turns out that you know so

00:40:21,340 --> 00:40:26,620
many things that other people don't know

00:40:23,230 --> 00:40:28,840
about yet so you are of course already

00:40:26,620 --> 00:40:31,480
doing special things and things that

00:40:28,840 --> 00:40:35,290
that your your neighbor might might envy

00:40:31,480 --> 00:40:35,860
you therefore so yes of course you're

00:40:35,290 --> 00:40:41,260
beautiful

00:40:35,860 --> 00:40:43,330
you're just like flowers but well why am

00:40:41,260 --> 00:40:44,680
I saying this to you I think it's very

00:40:43,330 --> 00:40:47,200
important to share what you're doing

00:40:44,680 --> 00:40:48,880
right and of course you're used to do to

00:40:47,200 --> 00:40:50,800
do this because you're at the conference

00:40:48,880 --> 00:40:54,100
but make sure that you always tell

00:40:50,800 --> 00:40:56,140
people about what you do and well for

00:40:54,100 --> 00:40:58,000
some subjects other people might learn

00:40:56,140 --> 00:41:00,160
from you and of course the other way

00:40:58,000 --> 00:41:04,030
around it's it's it's the same so you

00:41:00,160 --> 00:41:06,490
can learn from others if they share so

00:41:04,030 --> 00:41:09,250
if you feel that in your team and your

00:41:06,490 --> 00:41:11,710
company this isn't really happening

00:41:09,250 --> 00:41:13,510
try introduce some some of these sharing

00:41:11,710 --> 00:41:16,150
concepts like make sure that whenever

00:41:13,510 --> 00:41:18,460
you have a problem at least tell other

00:41:16,150 --> 00:41:20,650
people about it when you have fixed

00:41:18,460 --> 00:41:22,300
something in a very interesting way tell

00:41:20,650 --> 00:41:24,910
the other people around you about this

00:41:22,300 --> 00:41:26,500
and you know maybe at some some point

00:41:24,910 --> 00:41:28,270
there will be like a tipping point where

00:41:26,500 --> 00:41:32,110
other people start following your

00:41:28,270 --> 00:41:34,360
example in that in that matter of course

00:41:32,110 --> 00:41:36,820
you can also formalize this by something

00:41:34,360 --> 00:41:38,980
known as the brown bag lunches where you

00:41:36,820 --> 00:41:41,530
just take some subject and make a nice

00:41:38,980 --> 00:41:44,270
presentation about it while others are

00:41:41,530 --> 00:41:46,220
eating and the sound of eating just you

00:41:44,270 --> 00:41:48,320
feels like people are very happy and

00:41:46,220 --> 00:41:51,140
eager to learn about this so that that's

00:41:48,320 --> 00:41:53,510
that works really well anyway push

00:41:51,140 --> 00:41:55,520
yourself to the limit and learn about

00:41:53,510 --> 00:41:57,590
all of these these cool stuff that may

00:41:55,520 --> 00:41:59,450
seem hard but these things are here to

00:41:57,590 --> 00:42:01,430
stay and if you want to improve yourself

00:41:59,450 --> 00:42:04,010
as a software developer make sure you

00:42:01,430 --> 00:42:06,230
know what this is and find some

00:42:04,010 --> 00:42:11,390
takeaways if you don't even fully

00:42:06,230 --> 00:42:13,130
embrace any of this but and this is of

00:42:11,390 --> 00:42:15,050
course the way that I look at

00:42:13,130 --> 00:42:16,940
programming these days you have to

00:42:15,050 --> 00:42:19,730
abstract the fashionable details so

00:42:16,940 --> 00:42:22,550
whatever is is hyped or is cool at this

00:42:19,730 --> 00:42:25,640
at this moment just ignore that and try

00:42:22,550 --> 00:42:29,660
to find the big things the big things in

00:42:25,640 --> 00:42:33,740
software development history yeah okay

00:42:29,660 --> 00:42:36,800
so we are at the end and just in time I

00:42:33,740 --> 00:42:38,210
guess for some questions as well at

00:42:36,800 --> 00:42:41,480
least one thing that I wanted to point

00:42:38,210 --> 00:42:44,570
you to is this is the joint in page I

00:42:41,480 --> 00:42:46,520
couldn't say goodbye to the old URL

00:42:44,570 --> 00:42:50,360
style joint or in slash and then a

00:42:46,520 --> 00:42:52,630
number so this is a legacy link I hope I

00:42:50,360 --> 00:42:57,980
don't offend anybody from the joint in

00:42:52,630 --> 00:42:59,630
group of contributors at least thank you

00:42:57,980 --> 00:43:01,850
if you're just walking out right now for

00:42:59,630 --> 00:43:08,930
listening and otherwise we will have

00:43:01,850 --> 00:43:10,190
some times with some questions no

00:43:08,930 --> 00:43:15,900
questions

00:43:10,190 --> 00:43:24,809
thank you thank you but there is time

00:43:15,900 --> 00:43:25,950
for some questions so no questions okay

00:43:24,809 --> 00:43:27,990
that's great

00:43:25,950 --> 00:43:29,940
the slide can be found on the joint in

00:43:27,990 --> 00:43:32,730
page and there I will have some links to

00:43:29,940 --> 00:43:34,829
recommended reading if you want to learn

00:43:32,730 --> 00:43:38,000
more and that will be around for some

00:43:34,829 --> 00:43:42,349
time so ask me any questions to you like

00:43:38,000 --> 00:43:42,349

YouTube URL: https://www.youtube.com/watch?v=EDXgNA_pXX0


