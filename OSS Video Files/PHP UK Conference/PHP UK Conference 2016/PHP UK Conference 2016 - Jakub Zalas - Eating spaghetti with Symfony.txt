Title: PHP UK Conference 2016 - Jakub Zalas - Eating spaghetti with Symfony
Publication date: 2016-03-16
Playlist: PHP UK Conference 2016
Description: 
	Big-bang migrations hardly ever work and usually take significantly more effort than expected. It's also hard to convince the stakeholders there's any value in the whole operation. It's much more effective to make gradual improvements. It's also more rewarding to celebrate success after every sprint. Learn how to leverage Symfony to move away from an Old School PHP Spaghetti Projectâ„¢ to a modern Symfony based application. Release after the first iteration and keep improving the code base, delivering value in the same time.
Captions: 
	00:00:04,930 --> 00:00:12,080
my name is Jakob Salas I'm a software

00:00:08,960 --> 00:00:15,920
consultant helping companies with their

00:00:12,080 --> 00:00:18,320
code improving the code writing putting

00:00:15,920 --> 00:00:20,260
more quality into the code applying

00:00:18,320 --> 00:00:24,320
techniques like test-driven development

00:00:20,260 --> 00:00:28,460
behavior driven development in general

00:00:24,320 --> 00:00:29,930
topics related to quality I'm also one

00:00:28,460 --> 00:00:31,310
of the symphonic artists

00:00:29,930 --> 00:00:33,530
that's why most of my projects are

00:00:31,310 --> 00:00:36,579
symphony based but I have also

00:00:33,530 --> 00:00:39,079
experience with some other frameworks I

00:00:36,579 --> 00:00:41,420
also run the symphony meetups here and

00:00:39,079 --> 00:00:45,829
nothing so if you're in London our next

00:00:41,420 --> 00:00:50,899
meetup is going to be in April yeah

00:00:45,829 --> 00:00:54,050
today I'm here to speak about migrations

00:00:50,899 --> 00:00:59,719
of spaghetti legacy projects to more

00:00:54,050 --> 00:01:03,280
modern technologies so the plan that's

00:00:59,719 --> 00:01:05,239
not going down for today is first

00:01:03,280 --> 00:01:06,350
clarify what we're going to talk about

00:01:05,239 --> 00:01:08,869
what kind of projects we're going to

00:01:06,350 --> 00:01:14,509
talk about what is spaghetti or legacy

00:01:08,869 --> 00:01:16,520
or big bowl of map project then we'll

00:01:14,509 --> 00:01:19,670
discuss some migration strategies how we

00:01:16,520 --> 00:01:26,719
can approach those projects and try to

00:01:19,670 --> 00:01:28,310
move away from legacy and finally the

00:01:26,719 --> 00:01:31,609
biggest part of the presentation is the

00:01:28,310 --> 00:01:37,369
immigration migration I cookbook which

00:01:31,609 --> 00:01:39,469
is some ideas for to apply for you in

00:01:37,369 --> 00:01:42,170
your project syndrome try to move away

00:01:39,469 --> 00:01:48,820
from legacy so practical code examples

00:01:42,170 --> 00:01:51,289
some ideas to build on so what is

00:01:48,820 --> 00:01:52,549
spaghetti code or a legacy code in the

00:01:51,289 --> 00:01:55,429
word for the purpose of this talk I

00:01:52,549 --> 00:01:57,049
treat these terms as the same more or

00:01:55,429 --> 00:01:58,850
less basically what we're going to talk

00:01:57,049 --> 00:02:01,579
about is something that we want to move

00:01:58,850 --> 00:02:03,740
away from something that we can't work

00:02:01,579 --> 00:02:06,490
with anymore something that is not

00:02:03,740 --> 00:02:09,710
manageable that's hard to maintain

00:02:06,490 --> 00:02:12,700
basically no one wants to work on it so

00:02:09,710 --> 00:02:15,800
twisted and tangled like a spa spaghetti

00:02:12,700 --> 00:02:17,040
another term of calling it this legacy

00:02:15,800 --> 00:02:18,840
code which

00:02:17,040 --> 00:02:20,580
it relates to some kind of an

00:02:18,840 --> 00:02:24,780
unsupported technology and supported

00:02:20,580 --> 00:02:29,280
framework or technology this that became

00:02:24,780 --> 00:02:31,530
obsolete that's no longer used by anyone

00:02:29,280 --> 00:02:33,630
so perhaps this we've got problems

00:02:31,530 --> 00:02:34,440
finding new developers because no one

00:02:33,630 --> 00:02:36,950
wants to work with the technology

00:02:34,440 --> 00:02:36,950
anymore

00:02:37,940 --> 00:02:43,590
interesting definition of legacy code

00:02:39,930 --> 00:02:46,560
was given by like your feathers in his

00:02:43,590 --> 00:02:50,430
work ineffective view of legacy code

00:02:46,560 --> 00:02:52,890
and that he says that legacy code is the

00:02:50,430 --> 00:02:54,720
code without tests so if you're writing

00:02:52,890 --> 00:02:58,200
code that has no tests you are you

00:02:54,720 --> 00:03:02,460
writing a legacy which kind of makes

00:02:58,200 --> 00:03:05,700
sense because the side effect of writing

00:03:02,460 --> 00:03:07,350
tests is better design you put more

00:03:05,700 --> 00:03:11,060
effort into design you're kind of forced

00:03:07,350 --> 00:03:13,890
to do that so by definition if you I

00:03:11,060 --> 00:03:15,170
don't write tests you don't buy metal

00:03:13,890 --> 00:03:18,330
flash notation to design and you

00:03:15,170 --> 00:03:22,770
basically end up with a mess sooner or

00:03:18,330 --> 00:03:25,170
later my favorite definition a big bowl

00:03:22,770 --> 00:03:27,390
of Marty's of assembly structures

00:03:25,170 --> 00:03:31,860
floating sloppy duck tape and baling

00:03:27,390 --> 00:03:34,140
wire spaghetti code jungle so this kind

00:03:31,860 --> 00:03:39,000
of projects we'll talk about how to move

00:03:34,140 --> 00:03:42,830
away but don't be mistaken this was a

00:03:39,000 --> 00:03:45,750
good part of having a legacy project

00:03:42,830 --> 00:03:48,050
first of all it works okay it serves its

00:03:45,750 --> 00:03:50,070
purpose its deployed life users use it

00:03:48,050 --> 00:03:53,600
organization benefits from it it brings

00:03:50,070 --> 00:03:59,070
money or helps to save money so it

00:03:53,600 --> 00:04:00,810
definitely has value and another aspect

00:03:59,070 --> 00:04:05,790
of it is that some time ago someone

00:04:00,810 --> 00:04:07,800
perhaps you or maybe a talk to the

00:04:05,790 --> 00:04:10,410
client could talk to the product owner

00:04:07,800 --> 00:04:13,320
who ever had to build a business

00:04:10,410 --> 00:04:15,780
knowledge and extracted the requirements

00:04:13,320 --> 00:04:18,390
and put that into the code he might have

00:04:15,780 --> 00:04:20,220
obvious obviously that it a bit the code

00:04:18,390 --> 00:04:21,780
is no longer readable but that doesn't

00:04:20,220 --> 00:04:24,030
change and I think the the knowledge

00:04:21,780 --> 00:04:28,140
about the business domain is still there

00:04:24,030 --> 00:04:30,830
in the code so it still has value can

00:04:28,140 --> 00:04:30,830
still learn from it

00:04:34,530 --> 00:04:41,020
so why we would want to migrate very

00:04:38,610 --> 00:04:42,550
often people want to migrate just

00:04:41,020 --> 00:04:44,470
because there's a new shiny tool there

00:04:42,550 --> 00:04:47,140
and they just want to use it see video

00:04:44,470 --> 00:04:49,600
and development they just want to put a

00:04:47,140 --> 00:04:51,760
new finked on the CV so they try to

00:04:49,600 --> 00:04:53,830
convince the business that they need to

00:04:51,760 --> 00:04:56,740
migrate okay this is for me not a good

00:04:53,830 --> 00:04:59,110
justification of doing that good

00:04:56,740 --> 00:05:00,310
justification would be okay we can no

00:04:59,110 --> 00:05:04,060
longer work with that codebase it's

00:05:00,310 --> 00:05:06,520
really a mess adding features takes a

00:05:04,060 --> 00:05:08,470
long time so perhaps we should consider

00:05:06,520 --> 00:05:11,950
moving away from it and starting a new

00:05:08,470 --> 00:05:15,040
thing then you have to figure whether

00:05:11,950 --> 00:05:16,810
that's worth it or not long term to

00:05:15,040 --> 00:05:19,870
start a new code base and move move away

00:05:16,810 --> 00:05:23,290
from this from the old one quite a valid

00:05:19,870 --> 00:05:25,570
point is obsolete technology like the

00:05:23,290 --> 00:05:27,310
situation now with simple e1 and

00:05:25,570 --> 00:05:29,890
Symphony one isn't going to have totally

00:05:27,310 --> 00:05:31,390
different frameworks and it's really

00:05:29,890 --> 00:05:33,520
hard to find that developers who would

00:05:31,390 --> 00:05:36,220
want to work with say 41 there's still

00:05:33,520 --> 00:05:39,160
some alive to see some people who

00:05:36,220 --> 00:05:41,680
remember the only one but kind of no one

00:05:39,160 --> 00:05:42,940
wants to work with it it's not good for

00:05:41,680 --> 00:05:45,850
the career it's not good for the

00:05:42,940 --> 00:05:47,770
progression so companies who have seen

00:05:45,850 --> 00:05:51,250
from one project struggle with finding

00:05:47,770 --> 00:05:52,690
developer of developers to hire so that

00:05:51,250 --> 00:05:55,710
would be a valid point to try to migrate

00:05:52,690 --> 00:05:58,780
to a newer version of the framework

00:05:55,710 --> 00:06:00,370
another thing perhaps scaling issues if

00:05:58,780 --> 00:06:05,140
you can't solve it on their current code

00:06:00,370 --> 00:06:06,900
base you probably want to migrate it so

00:06:05,140 --> 00:06:10,770
what could we do

00:06:06,900 --> 00:06:15,580
what are options we have two strategies

00:06:10,770 --> 00:06:17,320
cold turkey and chickaletta and in this

00:06:15,580 --> 00:06:22,240
talk I'll talk about only about one of

00:06:17,320 --> 00:06:26,260
them but let's briefly look at what the

00:06:22,240 --> 00:06:28,630
strategies are so the first one cold

00:06:26,260 --> 00:06:31,120
turkey is when you try to rewrite

00:06:28,630 --> 00:06:33,040
everything from scratch at once so you

00:06:31,120 --> 00:06:34,240
look at the existing project and say

00:06:33,040 --> 00:06:35,860
we're gonna rewrite it in the new

00:06:34,240 --> 00:06:38,740
version framework new technology

00:06:35,860 --> 00:06:42,130
whatever and you spent months of

00:06:38,740 --> 00:06:43,090
development and then perhaps migrated a

00:06:42,130 --> 00:06:45,430
time deploy a new

00:06:43,090 --> 00:06:49,810
switch off the old system put the

00:06:45,430 --> 00:06:51,400
version life most of the time I know a

00:06:49,810 --> 00:06:53,199
few cases where this approach succeeded

00:06:51,400 --> 00:06:55,090
but most of the time it fails and most

00:06:53,199 --> 00:06:58,360
of the time takes significantly more

00:06:55,090 --> 00:07:03,190
time to develop a new version than

00:06:58,360 --> 00:07:08,260
initially predicted the reason for that

00:07:03,190 --> 00:07:09,639
is most of the time in fact that when we

00:07:08,260 --> 00:07:13,690
look at the existing system we

00:07:09,639 --> 00:07:16,060
underestimated and as we progress with

00:07:13,690 --> 00:07:19,870
the development redevelopment we find

00:07:16,060 --> 00:07:21,490
things inside that we for no one

00:07:19,870 --> 00:07:27,610
remembers about we already forgot about

00:07:21,490 --> 00:07:29,740
them or they basically not anymore so

00:07:27,610 --> 00:07:33,130
it's quite easy to understand make such

00:07:29,740 --> 00:07:35,620
project but it's also very similar to

00:07:33,130 --> 00:07:38,020
water fall approach to new projects it's

00:07:35,620 --> 00:07:39,990
basically waterfall approach so it

00:07:38,020 --> 00:07:43,930
suffers from the same problems as

00:07:39,990 --> 00:07:47,169
waterfall basically there's no learning

00:07:43,930 --> 00:07:49,780
process involved with migrate the whole

00:07:47,169 --> 00:07:52,330
system without reflecting each time

00:07:49,780 --> 00:07:55,330
whether this feature is needed whether

00:07:52,330 --> 00:07:57,160
it's usually one-to-one migration so we

00:07:55,330 --> 00:08:00,669
you know feature that what five years

00:07:57,160 --> 00:08:04,270
ago you might need something else today

00:08:00,669 --> 00:08:06,700
business doesn't stand still so want one

00:08:04,270 --> 00:08:09,820
migration is almost never a good thing

00:08:06,700 --> 00:08:16,690
to do well they caught Turkey approach

00:08:09,820 --> 00:08:18,250
and great to see that to do that another

00:08:16,690 --> 00:08:20,410
problem with this approach is that

00:08:18,250 --> 00:08:23,010
development of new features basically

00:08:20,410 --> 00:08:26,289
stops because you put the whole thing on

00:08:23,010 --> 00:08:27,820
development of a new system you might

00:08:26,289 --> 00:08:29,770
have a small team for adding new

00:08:27,820 --> 00:08:31,389
features some are set aside but then

00:08:29,770 --> 00:08:35,680
there's a constant catching up between

00:08:31,389 --> 00:08:37,120
the teams and still you you put less

00:08:35,680 --> 00:08:44,500
effort into developing your features

00:08:37,120 --> 00:08:47,560
than you probably you would want to and

00:08:44,500 --> 00:08:50,980
finally there's a very very important

00:08:47,560 --> 00:08:53,620
aspect of it which is more all over team

00:08:50,980 --> 00:08:55,959
that declines over the life of the

00:08:53,620 --> 00:08:58,690
project as with waterfall because you

00:08:55,959 --> 00:09:02,350
work on something it takes you can see

00:08:58,690 --> 00:09:03,940
the month after the month you meet you

00:09:02,350 --> 00:09:05,740
see you can you need more time to do it

00:09:03,940 --> 00:09:06,600
to come to finish the project it's never

00:09:05,740 --> 00:09:08,829
finished

00:09:06,600 --> 00:09:10,570
you're more and more other declines you

00:09:08,829 --> 00:09:12,220
never deploy users don't use that you

00:09:10,570 --> 00:09:15,730
work on something that's basically not

00:09:12,220 --> 00:09:17,650
used by anyone while with the second

00:09:15,730 --> 00:09:22,360
approach that you can label you take

00:09:17,650 --> 00:09:24,329
small steps you look at your system try

00:09:22,360 --> 00:09:27,910
to assess what's the most critical part

00:09:24,329 --> 00:09:33,310
that's one way of looking at it or

00:09:27,910 --> 00:09:35,920
what's the most moving part what part of

00:09:33,310 --> 00:09:38,980
the system changes a lot so you work in

00:09:35,920 --> 00:09:42,130
there a lot that's worth migrating as

00:09:38,980 --> 00:09:45,670
well and you work in small iterations

00:09:42,130 --> 00:09:49,360
you choose apart to migrate

00:09:45,670 --> 00:09:53,010
spend sprint or few Sprint's working it

00:09:49,360 --> 00:09:55,270
and then reflect okay how would it go

00:09:53,010 --> 00:09:57,040
nice thing about it is if you fail

00:09:55,270 --> 00:09:59,380
that's only one sprint or maybe a few

00:09:57,040 --> 00:10:01,900
Sprint's that you've failed but you can

00:09:59,380 --> 00:10:04,650
still look at what you've done

00:10:01,900 --> 00:10:07,810
react change course adapt occurs and

00:10:04,650 --> 00:10:09,790
start start again that's only one sprint

00:10:07,810 --> 00:10:12,910
over for that you wasted not a few

00:10:09,790 --> 00:10:14,920
months of development it's also easier

00:10:12,910 --> 00:10:16,870
to say that was a mistake we shouldn't

00:10:14,920 --> 00:10:19,900
have done this let's just move another

00:10:16,870 --> 00:10:24,030
part while on the long term project as

00:10:19,900 --> 00:10:27,459
you progress it wants of development

00:10:24,030 --> 00:10:29,380
it's hard to say no you just spent so

00:10:27,459 --> 00:10:31,570
many months of development you want to

00:10:29,380 --> 00:10:37,060
finish it while you might realize it

00:10:31,570 --> 00:10:39,970
wasn't a good decision to do it you also

00:10:37,060 --> 00:10:43,990
might discover things that are no longer

00:10:39,970 --> 00:10:45,820
needed so you look at your system your

00:10:43,990 --> 00:10:48,520
new product owners describe to the

00:10:45,820 --> 00:10:50,620
feature you look at the legacy code and

00:10:48,520 --> 00:10:52,260
notice but all these edge cases here

00:10:50,620 --> 00:10:54,820
what are the power what are they about

00:10:52,260 --> 00:10:57,400
you might say well we have used them

00:10:54,820 --> 00:10:59,209
five years ago but today that's absurd

00:10:57,400 --> 00:11:00,949
we we don't need it so you

00:10:59,209 --> 00:11:02,829
to avoid writing code this way you

00:11:00,949 --> 00:11:07,189
remove features you remove edge cases

00:11:02,829 --> 00:11:09,949
come up with simpler solutions also the

00:11:07,189 --> 00:11:12,379
experience you gain through past years

00:11:09,949 --> 00:11:14,499
of a system working production might

00:11:12,379 --> 00:11:16,699
give you new insights my mind might

00:11:14,499 --> 00:11:18,709
change the way you look at the problem

00:11:16,699 --> 00:11:23,329
and the solution might might be

00:11:18,709 --> 00:11:29,119
different and this process is never

00:11:23,329 --> 00:11:31,459
finished and it's a good thing because

00:11:29,119 --> 00:11:34,490
you might realize that some things

00:11:31,459 --> 00:11:37,399
hardly ever change or are not really

00:11:34,490 --> 00:11:38,899
that painful and you might decide that's

00:11:37,399 --> 00:11:41,600
not gonna that maverick is gonna be

00:11:38,899 --> 00:11:43,939
migrated I'm not going to touch it like

00:11:41,600 --> 00:11:45,649
you might have some kind of internal

00:11:43,939 --> 00:11:49,569
ticketing system which was part of the

00:11:45,649 --> 00:11:53,179
application that just works people just

00:11:49,569 --> 00:11:55,119
writing the descriptions that goes to

00:11:53,179 --> 00:11:58,910
someone's email and that's good enough

00:11:55,119 --> 00:12:01,730
while bothering like migrated ok we

00:11:58,910 --> 00:12:08,019
never we never we never alter that code

00:12:01,730 --> 00:12:10,429
and you might actually I realize that

00:12:08,019 --> 00:12:15,199
effort might be better used somewhere

00:12:10,429 --> 00:12:17,720
else and instead we focus on the most

00:12:15,199 --> 00:12:20,119
critical parts of the system it gives

00:12:17,720 --> 00:12:22,399
you more satisfaction because you deploy

00:12:20,119 --> 00:12:25,069
every sprint or every few Sprint's and

00:12:22,399 --> 00:12:27,290
you have just feel if you feel

00:12:25,069 --> 00:12:30,579
accomplished because users use this I

00:12:27,290 --> 00:12:33,379
think it's more often integrated so each

00:12:30,579 --> 00:12:36,019
deployment you integrate it with the

00:12:33,379 --> 00:12:38,660
legacy system and have you certain that

00:12:36,019 --> 00:12:40,100
everything works because you tested it

00:12:38,660 --> 00:12:44,299
before the deployment and it went live

00:12:40,100 --> 00:12:46,819
it is used by the users so it's a more

00:12:44,299 --> 00:12:50,959
agile approach and that's what I found

00:12:46,819 --> 00:12:53,209
in my experience works well the trying

00:12:50,959 --> 00:12:54,339
to every write everything at once while

00:12:53,209 --> 00:12:57,259
it doesn't work

00:12:54,339 --> 00:12:58,819
although to be fair with you I know a

00:12:57,259 --> 00:13:01,040
few cases where people manage to do that

00:12:58,819 --> 00:13:03,319
but it was quite painful and always took

00:13:01,040 --> 00:13:05,470
more time than they thought it would

00:13:03,319 --> 00:13:05,470
take

00:13:08,360 --> 00:13:20,250
so the cookbook these are some ideas

00:13:16,250 --> 00:13:21,930
based on my real-life experience in

00:13:20,250 --> 00:13:24,630
working on legacy projects and migrating

00:13:21,930 --> 00:13:27,810
them to save money these are ideas to

00:13:24,630 --> 00:13:30,269
build on problem legacy projects is that

00:13:27,810 --> 00:13:32,279
there's no two similar projects every

00:13:30,269 --> 00:13:33,660
project is different and it's hard to

00:13:32,279 --> 00:13:38,130
come up with something that's going to

00:13:33,660 --> 00:13:39,570
work for everyone but I'm trying to give

00:13:38,130 --> 00:13:43,709
you some ideas that you can build on and

00:13:39,570 --> 00:13:45,510
apply it to your projects and before we

00:13:43,709 --> 00:13:51,440
start there's a important thing to

00:13:45,510 --> 00:13:54,180
mention this would be a talk on its own

00:13:51,440 --> 00:13:56,209
but writing tests for a new feature or a

00:13:54,180 --> 00:13:58,829
bug or and I think you do in the system

00:13:56,209 --> 00:14:02,670
is really your best way to get out of

00:13:58,829 --> 00:14:04,320
legacy writing test forces you to design

00:14:02,670 --> 00:14:14,670
to learn how to do get the good design

00:14:04,320 --> 00:14:20,100
and that's your best bet so I've got

00:14:14,670 --> 00:14:23,300
three groups of ideas and the first

00:14:20,100 --> 00:14:26,640
group is taking really small steps and

00:14:23,300 --> 00:14:29,970
using small components either from sim

00:14:26,640 --> 00:14:33,449
phone or our libraries to apply in your

00:14:29,970 --> 00:14:37,709
legacy code it's not always the best

00:14:33,449 --> 00:14:39,630
option because usual advice is never try

00:14:37,709 --> 00:14:41,699
to modify the legacy code because you'll

00:14:39,630 --> 00:14:44,880
definitely break it but sometimes there

00:14:41,699 --> 00:14:49,890
is no other way so you can take small

00:14:44,880 --> 00:14:54,980
steps and try to incorporate those those

00:14:49,890 --> 00:14:57,329
little libraries in your old framework

00:14:54,980 --> 00:14:59,399
one of them is not really a part of say

00:14:57,329 --> 00:15:05,310
funny but it's part of kind of symphonia

00:14:59,399 --> 00:15:08,449
system which is tweak and if you have a

00:15:05,310 --> 00:15:10,709
system that uses old PHP templates

00:15:08,449 --> 00:15:14,940
because some one for the PHP is a

00:15:10,709 --> 00:15:16,640
templating language tweak might help you

00:15:14,940 --> 00:15:19,949
to actually try to play the example

00:15:16,640 --> 00:15:20,320
because tweak templates make it harsh to

00:15:19,949 --> 00:15:22,750
put

00:15:20,320 --> 00:15:25,680
chicken one of the problems with all

00:15:22,750 --> 00:15:29,560
system is that the logic is mixed with

00:15:25,680 --> 00:15:31,900
the presentation layer does SQL queries

00:15:29,560 --> 00:15:35,590
in HTML and then you know things like

00:15:31,900 --> 00:15:37,780
that so trying to clean those layers up

00:15:35,590 --> 00:15:43,030
introducing tweak might help you as a

00:15:37,780 --> 00:15:45,550
first step to get out from magazine and

00:15:43,030 --> 00:15:48,250
tweak is very easy to set up these two

00:15:45,550 --> 00:15:50,950
lines of code you just need some kind of

00:15:48,250 --> 00:15:52,330
a loader for templates in this case file

00:15:50,950 --> 00:15:53,950
system loader it's going to load

00:15:52,330 --> 00:15:56,440
templates find templates on the file

00:15:53,950 --> 00:15:59,230
system and you create the 2d environment

00:15:56,440 --> 00:16:01,360
with some configuration like the cache

00:15:59,230 --> 00:16:04,060
directory whether it's a development

00:16:01,360 --> 00:16:05,230
version debug version or not and you're

00:16:04,060 --> 00:16:12,700
done you can start rendering your

00:16:05,230 --> 00:16:14,760
templates so you could start extracting

00:16:12,700 --> 00:16:18,490
you all templates into the into tweak

00:16:14,760 --> 00:16:22,240
move separate the the presentation logic

00:16:18,490 --> 00:16:25,360
from your business logic write some two

00:16:22,240 --> 00:16:30,010
extensions as a first step towards the

00:16:25,360 --> 00:16:36,640
migration another common thing to do is

00:16:30,010 --> 00:16:38,020
to leverage the service container as you

00:16:36,640 --> 00:16:41,230
start writing new things

00:16:38,020 --> 00:16:44,400
cover them by tests you learned about

00:16:41,230 --> 00:16:48,010
dependency injection managing that

00:16:44,400 --> 00:16:49,420
object starts to be quite a pain and the

00:16:48,010 --> 00:16:53,590
service container may help you to manage

00:16:49,420 --> 00:16:56,110
them but it's configure the way objects

00:16:53,590 --> 00:16:57,520
are created and that definitions are

00:16:56,110 --> 00:17:00,340
separate from the way the objects are

00:16:57,520 --> 00:17:03,850
used this is an example from the

00:17:00,340 --> 00:17:10,150
symphony container we use the container

00:17:03,850 --> 00:17:11,650
builder to define our services one of

00:17:10,150 --> 00:17:15,850
the options is to set parameters that

00:17:11,650 --> 00:17:19,890
can be lightly referenced and we

00:17:15,850 --> 00:17:25,240
register our first service which is

00:17:19,890 --> 00:17:28,660
named DB it's a PDO object with some

00:17:25,240 --> 00:17:32,470
arguments this way if you use video

00:17:28,660 --> 00:17:33,760
directory or another resident letter you

00:17:32,470 --> 00:17:36,100
might start

00:17:33,760 --> 00:17:39,100
to acting your queries into a positivist

00:17:36,100 --> 00:17:40,990
so move them away from you old like I

00:17:39,100 --> 00:17:47,220
see codebase to some more structure

00:17:40,990 --> 00:17:47,220
tested called this new fresh codebase

00:17:47,640 --> 00:17:55,690
register your repository that depends on

00:17:49,960 --> 00:17:57,070
the database you could do the same you

00:17:55,690 --> 00:18:00,160
know cell phone has few ways of

00:17:57,070 --> 00:18:01,900
configuring the same thing which is good

00:18:00,160 --> 00:18:04,300
because you can choose the one that

00:18:01,900 --> 00:18:06,850
suits you the best if you want to use

00:18:04,300 --> 00:18:07,990
store configurations in yml file so like

00:18:06,850 --> 00:18:11,560
sample files this is how it would look

00:18:07,990 --> 00:18:14,080
like you create again the container

00:18:11,560 --> 00:18:16,690
builder but then you use the Yama file

00:18:14,080 --> 00:18:19,270
order in this case to load services yml

00:18:16,690 --> 00:18:23,310
file and then defined same thing we saw

00:18:19,270 --> 00:18:23,310
on the previous slide in the yml file

00:18:26,460 --> 00:18:38,350
and then just give this you use it like

00:18:33,400 --> 00:18:40,570
this instead of those hundreds of tens

00:18:38,350 --> 00:18:44,740
of lines of code you just reference the

00:18:40,570 --> 00:18:46,000
repository and use it here as we

00:18:44,740 --> 00:18:47,620
container please give me the upholstery

00:18:46,000 --> 00:18:49,810
let's think about it this you don't

00:18:47,620 --> 00:18:52,120
really know how it's created and you

00:18:49,810 --> 00:18:56,020
don't care as long as it conforms to the

00:18:52,120 --> 00:18:59,830
interface we just use it in real life

00:18:56,020 --> 00:19:01,570
project you would actually want to also

00:18:59,830 --> 00:19:03,400
catch the container because what we used

00:19:01,570 --> 00:19:05,490
is a container builder that's pretty

00:19:03,400 --> 00:19:07,840
inefficient on the real life project so

00:19:05,490 --> 00:19:09,760
usually this is what safe only does

00:19:07,840 --> 00:19:13,060
behind the scenes if you use the

00:19:09,760 --> 00:19:14,860
container yourself you need to catch it

00:19:13,060 --> 00:19:17,230
in some kind of file dump it to the file

00:19:14,860 --> 00:19:19,000
that this is what this code does okay if

00:19:17,230 --> 00:19:22,720
the container file cache file doesn't

00:19:19,000 --> 00:19:24,520
exist well if it does exist we require

00:19:22,720 --> 00:19:26,820
it and create it to the right way so all

00:19:24,520 --> 00:19:31,270
the services there will be defined

00:19:26,820 --> 00:19:35,260
otherwise we build the container of the

00:19:31,270 --> 00:19:38,310
services and dump it to a file you can

00:19:35,260 --> 00:19:38,310
find its interpretation

00:19:41,690 --> 00:19:49,710
so dependency injection is a way of

00:19:46,730 --> 00:19:53,250
applying inversion controls so inversion

00:19:49,710 --> 00:19:56,160
of control so decoupling your layers of

00:19:53,250 --> 00:19:58,230
the application and then another way of

00:19:56,160 --> 00:20:02,940
doing the thing is with even dispatcher

00:19:58,230 --> 00:20:04,710
and events so you could also start using

00:20:02,940 --> 00:20:07,890
an even dispatcher in the old legacy

00:20:04,710 --> 00:20:11,400
project to also extract parts of your

00:20:07,890 --> 00:20:14,909
code out of the legacy and nicely tested

00:20:11,400 --> 00:20:18,240
this is an example of how even

00:20:14,909 --> 00:20:19,470
dispatcher works so imagine we have a

00:20:18,240 --> 00:20:23,340
registration process your registration

00:20:19,470 --> 00:20:24,600
closet registers a user on your site we

00:20:23,340 --> 00:20:28,260
also have an even dispatcher that's

00:20:24,600 --> 00:20:30,960
that's the thing coming from sinfoni and

00:20:28,260 --> 00:20:32,370
then we write even Lister's so you can

00:20:30,960 --> 00:20:34,620
imagine the registration process would

00:20:32,370 --> 00:20:38,940
be the basic stuff that needs to happen

00:20:34,620 --> 00:20:43,200
during registration probably saving user

00:20:38,940 --> 00:20:45,120
to the database and then an additional

00:20:43,200 --> 00:20:46,650
features additional functionalities that

00:20:45,120 --> 00:20:48,330
happen during the same time are

00:20:46,650 --> 00:20:51,510
implemented easterners so the way it

00:20:48,330 --> 00:20:55,890
happens is we tell the even dispatcher

00:20:51,510 --> 00:21:01,169
hey each time you have a successful

00:20:55,890 --> 00:21:05,299
registration let me know and then when

00:21:01,169 --> 00:21:08,130
the even the registration process starts

00:21:05,299 --> 00:21:10,530
the registration has reference to even

00:21:08,130 --> 00:21:12,360
dispatcher and tells him hey if anyone

00:21:10,530 --> 00:21:16,740
is interested I just successfully

00:21:12,360 --> 00:21:18,630
register the user and then it knows that

00:21:16,740 --> 00:21:19,490
the mailer is Tanner wanted to know

00:21:18,630 --> 00:21:25,710
about it

00:21:19,490 --> 00:21:27,809
notifies it not is one thing that's why

00:21:25,710 --> 00:21:30,240
it's also a way of accomplishing

00:21:27,809 --> 00:21:32,070
dependency inversion if you will

00:21:30,240 --> 00:21:34,440
suddenly have a new requirement to also

00:21:32,070 --> 00:21:38,460
set a text message during registration

00:21:34,440 --> 00:21:43,620
process you do not modify the

00:21:38,460 --> 00:21:46,020
registration at all you just register a

00:21:43,620 --> 00:21:49,080
new listener on the dispatcher and then

00:21:46,020 --> 00:21:53,250
when the registration process starts the

00:21:49,080 --> 00:21:55,860
dispatcher will notify both listeners

00:21:53,250 --> 00:21:59,809
so you can actually add functionality

00:21:55,860 --> 00:22:06,960
without modifying the existing code and

00:21:59,809 --> 00:22:09,299
testing in isolation example of how to

00:22:06,960 --> 00:22:11,090
use the dispatcher while you instantiate

00:22:09,299 --> 00:22:14,070
it and then this is how you register

00:22:11,090 --> 00:22:17,789
listeners a listener could be an the

00:22:14,070 --> 00:22:19,710
callable and the PHP callable so it

00:22:17,789 --> 00:22:23,490
might be an anonymous function or it

00:22:19,710 --> 00:22:26,340
might be a callback like this and then

00:22:23,490 --> 00:22:27,929
if you connect even dispatcher with the

00:22:26,340 --> 00:22:30,090
service container it might be a service

00:22:27,929 --> 00:22:32,250
name in the service metal which is

00:22:30,090 --> 00:22:34,500
actually for performance this is what

00:22:32,250 --> 00:22:37,500
you would want to do because this way

00:22:34,500 --> 00:22:39,630
you would need to instantiate all the

00:22:37,500 --> 00:22:42,630
listeners every time while not all of

00:22:39,630 --> 00:22:45,630
the events will happen during that

00:22:42,630 --> 00:22:47,730
execution time with the service

00:22:45,630 --> 00:22:49,880
container a combination of using the

00:22:47,730 --> 00:22:54,630
even dispatch of the service container

00:22:49,880 --> 00:22:57,179
only the objects that listen to a given

00:22:54,630 --> 00:23:01,169
event will be created when that event

00:22:57,179 --> 00:23:03,059
happens and this is how you would

00:23:01,169 --> 00:23:05,130
dispatch the event you can use one of

00:23:03,059 --> 00:23:07,710
the built-in events or create your own

00:23:05,130 --> 00:23:11,159
ones an event is just something that

00:23:07,710 --> 00:23:13,110
carries data context of that event

00:23:11,159 --> 00:23:15,360
happening so in this case we have user

00:23:13,110 --> 00:23:18,450
register event and we pass the user in

00:23:15,360 --> 00:23:20,460
and dispatch registration success that

00:23:18,450 --> 00:23:24,169
time all the listeners that were

00:23:20,460 --> 00:23:27,110
interested in the event will be called

00:23:24,169 --> 00:23:30,120
simple thing to do with very powerful

00:23:27,110 --> 00:23:33,590
I'll also show you how to share such

00:23:30,120 --> 00:23:39,120
events between the applications later

00:23:33,590 --> 00:23:43,110
finally what you could also do is start

00:23:39,120 --> 00:23:44,700
using message queues to offload the

00:23:43,110 --> 00:23:49,320
legacy application and start extracting

00:23:44,700 --> 00:23:51,120
your code into the new one one of the

00:23:49,320 --> 00:23:53,280
examples usually real-life use cases

00:23:51,120 --> 00:23:59,909
I've had was I was working on the

00:23:53,280 --> 00:24:02,159
weather portal which displayed weather

00:23:59,909 --> 00:24:05,080
information for powerful resorts all the

00:24:02,159 --> 00:24:07,510
results basically and

00:24:05,080 --> 00:24:09,820
those that whether information was

00:24:07,510 --> 00:24:11,800
fetched from multiple feeds of data from

00:24:09,820 --> 00:24:15,990
from different kinds of data providers

00:24:11,800 --> 00:24:20,320
so most popular resorts were fetched

00:24:15,990 --> 00:24:22,930
every hour or every 15 minutes no ma'am

00:24:20,320 --> 00:24:24,820
exactly and the job but it was simply

00:24:22,930 --> 00:24:26,860
not possible to import all the results

00:24:24,820 --> 00:24:29,350
in the background so the last popular

00:24:26,860 --> 00:24:32,590
resorts if you were unlucky and hit the

00:24:29,350 --> 00:24:35,800
website for such a resort the website

00:24:32,590 --> 00:24:38,230
would make all those calls to the

00:24:35,800 --> 00:24:44,190
external API user would wait for a

00:24:38,230 --> 00:24:44,190
minute and he would see the weather okay

00:24:44,400 --> 00:24:52,270
it was very easy to do just instead of

00:24:48,280 --> 00:24:54,760
fetching all those fields live sending a

00:24:52,270 --> 00:24:57,070
small message to the queue and you have

00:24:54,760 --> 00:24:59,020
a new code base separate application

00:24:57,070 --> 00:25:02,400
that takes care of handling those

00:24:59,020 --> 00:25:06,490
messages user would get the information

00:25:02,400 --> 00:25:07,960
while fetching your data and refresh

00:25:06,490 --> 00:25:10,450
after a few seconds that was usually

00:25:07,960 --> 00:25:14,490
enough - for data to be processed in

00:25:10,450 --> 00:25:17,970
background and we had our process

00:25:14,490 --> 00:25:20,110
extracted on the new code base tested

00:25:17,970 --> 00:25:23,050
something we could work with and we're

00:25:20,110 --> 00:25:24,190
happy with sending a message to the

00:25:23,050 --> 00:25:26,350
queue might be as simple as sending a

00:25:24,190 --> 00:25:30,340
comment it's just some kind of a payload

00:25:26,350 --> 00:25:32,110
we send to message queue doesn't matter

00:25:30,340 --> 00:25:36,790
how it is you have lots of libraries

00:25:32,110 --> 00:25:40,750
very nice libraries from PHP I'm a

00:25:36,790 --> 00:25:43,050
completely very nice integrates we've

00:25:40,750 --> 00:25:43,050
seen funny

00:25:46,440 --> 00:25:56,410
second group of solutions is more clear

00:25:52,870 --> 00:25:58,930
introduces more clear separation okay in

00:25:56,410 --> 00:26:01,560
the previous solutions we need a two

00:25:58,930 --> 00:26:04,020
degree in ink writing to the legacy code

00:26:01,560 --> 00:26:07,120
in this case we be to this more

00:26:04,020 --> 00:26:10,420
separation between the two so one thing

00:26:07,120 --> 00:26:16,060
we could do is to rob the legacy up into

00:26:10,420 --> 00:26:20,380
our new shiny codebase example based on

00:26:16,060 --> 00:26:23,500
symphonia let's say we want to rewrite

00:26:20,380 --> 00:26:25,120
the whole products page just that one

00:26:23,500 --> 00:26:29,530
page one single page out of the whole

00:26:25,120 --> 00:26:35,160
application okay every request now we'll

00:26:29,530 --> 00:26:38,380
go through symphony and Rueter will see

00:26:35,160 --> 00:26:40,330
okay i have products and i have products

00:26:38,380 --> 00:26:43,230
controller here that's in symphony okay

00:26:40,330 --> 00:26:45,610
let's render the response to the user

00:26:43,230 --> 00:26:46,960
but then we'll have a catch-all root

00:26:45,610 --> 00:26:49,450
that's going to catch every other

00:26:46,960 --> 00:26:53,440
request and forward it to the old

00:26:49,450 --> 00:26:55,270
article application so everything else

00:26:53,440 --> 00:26:57,970
will go through some kind of a legacy

00:26:55,270 --> 00:27:00,640
controller that's gonna call our legacy

00:26:57,970 --> 00:27:03,580
up so this way we can gradually move

00:27:00,640 --> 00:27:06,970
things to the new up while the old ones

00:27:03,580 --> 00:27:09,970
phase out example of you how we could

00:27:06,970 --> 00:27:13,420
configure it this is a routing file from

00:27:09,970 --> 00:27:14,920
standard simplified project by default

00:27:13,420 --> 00:27:16,870
you only have one will define there the

00:27:14,920 --> 00:27:20,140
app that imports all the route

00:27:16,870 --> 00:27:24,790
definitions from the app bundle and then

00:27:20,140 --> 00:27:26,350
we are that the fallback route which

00:27:24,790 --> 00:27:28,030
basically catches all the paths

00:27:26,350 --> 00:27:30,280
this is important that this route is

00:27:28,030 --> 00:27:32,440
defined as the last one because if

00:27:30,280 --> 00:27:34,840
anything else fails too much this will

00:27:32,440 --> 00:27:38,560
always match so there's never gonna be a

00:27:34,840 --> 00:27:40,270
404 in symphonic we defined everything

00:27:38,560 --> 00:27:42,100
for path change the requirements for

00:27:40,270 --> 00:27:44,380
puffs by default it won't match the

00:27:42,100 --> 00:27:48,730
slash for a slash we want to match it

00:27:44,380 --> 00:27:53,740
everything can be in the path and this

00:27:48,730 --> 00:27:55,930
route will call our legacy controller at

00:27:53,740 --> 00:27:58,030
how this controller looks like that

00:27:55,930 --> 00:28:01,170
depends on your application this is a

00:27:58,030 --> 00:28:01,170
very simple option

00:28:02,350 --> 00:28:08,110
we start output buffering so everything

00:28:05,350 --> 00:28:09,790
that happens from now on will be stored

00:28:08,110 --> 00:28:13,210
in a buffer it won't be displayed to the

00:28:09,790 --> 00:28:14,980
browser right away and we call the

00:28:13,210 --> 00:28:16,690
legacy application in some way in this

00:28:14,980 --> 00:28:19,330
case we have a single point of entry

00:28:16,690 --> 00:28:21,820
only single front controller index dot

00:28:19,330 --> 00:28:23,500
PHP and we simply require it all the

00:28:21,820 --> 00:28:26,530
context from the outside is available

00:28:23,500 --> 00:28:31,480
inside so you could actually preset some

00:28:26,530 --> 00:28:34,990
variables here as well finally whatever

00:28:31,480 --> 00:28:36,910
was generated during that required phase

00:28:34,990 --> 00:28:41,950
we get it into the content and then

00:28:36,910 --> 00:28:45,100
return the response nice thing about it

00:28:41,950 --> 00:28:48,670
is that you can call some things before

00:28:45,100 --> 00:28:50,080
this happens and after this happens so

00:28:48,670 --> 00:28:53,680
you can already start doing processing

00:28:50,080 --> 00:28:56,260
some general things like and geoip

00:28:53,680 --> 00:29:00,130
lookups in sync when we move that into

00:28:56,260 --> 00:29:04,150
the new code base there's a huge

00:29:00,130 --> 00:29:05,500
drawback that is hardly so simple most

00:29:04,150 --> 00:29:07,270
of the time legacy applications with

00:29:05,500 --> 00:29:10,120
multiple controllers you need to handle

00:29:07,270 --> 00:29:12,640
it here some way and there's more things

00:29:10,120 --> 00:29:16,830
to look at they might be setting some

00:29:12,640 --> 00:29:19,690
weird cookies machine is a huge problem

00:29:16,830 --> 00:29:21,750
but simple has some built-in mechanism

00:29:19,690 --> 00:29:24,790
to work with the legacy session so you

00:29:21,750 --> 00:29:26,860
need to configure the PHP bridge if the

00:29:24,790 --> 00:29:29,230
legacy application starts the session

00:29:26,860 --> 00:29:32,920
and you can't change it you can use the

00:29:29,230 --> 00:29:37,590
PHP for each session so they will deal

00:29:32,920 --> 00:29:40,450
with that if depending on whether they

00:29:37,590 --> 00:29:43,000
handler session hunger is set within the

00:29:40,450 --> 00:29:46,750
legacy up or not you can also set the

00:29:43,000 --> 00:29:52,870
hand already here or set it to no one

00:29:46,750 --> 00:29:54,190
thing to be careful here your alt legacy

00:29:52,870 --> 00:29:55,990
are probably access to the session

00:29:54,190 --> 00:29:59,110
variable directly and puts everything

00:29:55,990 --> 00:30:01,600
into the global session available and in

00:29:59,110 --> 00:30:02,890
symphony we have parameter bugs and

00:30:01,600 --> 00:30:05,970
everything is put into smaller

00:30:02,890 --> 00:30:08,590
containers so you can't really access

00:30:05,970 --> 00:30:11,350
and I think directly on the session but

00:30:08,590 --> 00:30:12,980
there's a way around it where you can

00:30:11,350 --> 00:30:17,420
see it an example

00:30:12,980 --> 00:30:19,520
the other bundle you need to modify it a

00:30:17,420 --> 00:30:21,440
bit for your purposes but it gives you a

00:30:19,520 --> 00:30:23,120
good idea how this should be handled so

00:30:21,440 --> 00:30:25,970
you can actually access the session

00:30:23,120 --> 00:30:34,090
directly and this color virus taught in

00:30:25,970 --> 00:30:37,310
the decision director we can also invert

00:30:34,090 --> 00:30:41,180
the situation a little bit because in

00:30:37,310 --> 00:30:47,780
the first one we were calling the legacy

00:30:41,180 --> 00:30:51,950
up from the new new application like I

00:30:47,780 --> 00:30:54,650
said was a fallback we could also do

00:30:51,950 --> 00:30:58,490
that on the infrastructure level so have

00:30:54,650 --> 00:31:02,300
some kind of proxy load balancer that

00:30:58,490 --> 00:31:07,010
would point to the legacy application by

00:31:02,300 --> 00:31:10,880
default and then pages we migrate will

00:31:07,010 --> 00:31:12,410
be rewritten to a new one nice clear

00:31:10,880 --> 00:31:16,160
separation code bases are totally

00:31:12,410 --> 00:31:20,870
separate we don't deal with legacy at

00:31:16,160 --> 00:31:23,270
all I have an example have to do it

00:31:20,870 --> 00:31:26,360
based on nginx but you can do it in

00:31:23,270 --> 00:31:28,520
different proxies as well even if you

00:31:26,360 --> 00:31:31,010
use Apache you could put nginx in front

00:31:28,520 --> 00:31:34,310
of your Apache and then forward to you

00:31:31,010 --> 00:31:35,930
right view to a host this is a standard

00:31:34,310 --> 00:31:38,830
more or less standard configuration or

00:31:35,930 --> 00:31:41,630
the D hosting and genex for my up and

00:31:38,830 --> 00:31:48,140
the root folder as you see is my up

00:31:41,630 --> 00:31:51,110
legacy so this is how it would be before

00:31:48,140 --> 00:31:54,860
we came and try to rewrite it and then

00:31:51,110 --> 00:31:58,610
let's say we want to rewrite the

00:31:54,860 --> 00:32:02,540
products page actually a specific

00:31:58,610 --> 00:32:05,150
product product slash something okay we

00:32:02,540 --> 00:32:05,990
can proxy pass it to version to

00:32:05,150 --> 00:32:08,360
over-application

00:32:05,990 --> 00:32:10,610
so in this at this point everything will

00:32:08,360 --> 00:32:12,680
be hung by legacy but only this single

00:32:10,610 --> 00:32:15,530
root that much is this it's going to be

00:32:12,680 --> 00:32:18,040
forwarded to the new one and then as you

00:32:15,530 --> 00:32:20,600
progress you can add more rewrites here

00:32:18,040 --> 00:32:23,600
until eventually you hopefully remove

00:32:20,600 --> 00:32:25,380
the legacy Apatow notice that it

00:32:23,600 --> 00:32:29,550
rewrites

00:32:25,380 --> 00:32:31,530
host this is the host hosted three

00:32:29,550 --> 00:32:38,180
rights too so it has a different

00:32:31,530 --> 00:32:38,180
document root my new up web folder and

00:32:38,240 --> 00:32:42,060
we need to bring back the old host

00:32:40,650 --> 00:32:46,140
because we just changed the house to

00:32:42,060 --> 00:32:48,390
veto my up death and I want to my up our

00:32:46,140 --> 00:32:57,270
applications to see the same house to be

00:32:48,390 --> 00:33:01,170
on the same how you could create such a

00:32:57,270 --> 00:33:03,090
new apps I really like going microbe I

00:33:01,170 --> 00:33:05,280
don't want to mention micro-services

00:33:03,090 --> 00:33:09,210
here but some kind of a smaller

00:33:05,280 --> 00:33:13,860
applications and Symphony 2.8 introduced

00:33:09,210 --> 00:33:15,840
the microkernel which is really nice way

00:33:13,860 --> 00:33:18,270
of learning Symphony and a really nice

00:33:15,840 --> 00:33:21,540
way of starting very small so just

00:33:18,270 --> 00:33:26,190
requires a symphony package and create

00:33:21,540 --> 00:33:27,990
your kernel this this way you could have

00:33:26,190 --> 00:33:33,600
your home simple application in a single

00:33:27,990 --> 00:33:35,640
file you include the microkernel right

00:33:33,600 --> 00:33:39,270
which enables this personality it's a

00:33:35,640 --> 00:33:42,300
kernel like another as an instructional

00:33:39,270 --> 00:33:45,900
framework you just uh notate it with a

00:33:42,300 --> 00:33:49,650
lot rate you can enable and the bundles

00:33:45,900 --> 00:33:51,570
you need and then you have an option to

00:33:49,650 --> 00:33:53,490
configure the container so instead of

00:33:51,570 --> 00:33:55,710
doing that and yml file or an hour it's

00:33:53,490 --> 00:33:57,780
nothing you do it here although you

00:33:55,710 --> 00:34:01,910
could include your XML files as well if

00:33:57,780 --> 00:34:10,740
you wanted to but the idea of the micro

00:34:01,910 --> 00:34:12,360
framework is that it's very simple and

00:34:10,740 --> 00:34:13,889
you also have an option apart from the

00:34:12,360 --> 00:34:16,889
container configuration so where you can

00:34:13,889 --> 00:34:19,500
configure your bundles or add services

00:34:16,889 --> 00:34:22,290
defined services you can also configure

00:34:19,500 --> 00:34:24,120
a routes and you have an option to point

00:34:22,290 --> 00:34:26,850
your routes to the current catalog so

00:34:24,120 --> 00:34:29,370
with the notation Colonel column and the

00:34:26,850 --> 00:34:31,200
action name you can actually point today

00:34:29,370 --> 00:34:37,169
this this action is defined in the same

00:34:31,200 --> 00:34:38,280
file this is a really easy way to start

00:34:37,169 --> 00:34:42,480
with symphony

00:34:38,280 --> 00:34:45,690
create a single-file and easily can

00:34:42,480 --> 00:34:48,060
create an small service that's going to

00:34:45,690 --> 00:34:53,159
be on the new code base with better

00:34:48,060 --> 00:34:57,840
practices better tested what's an

00:34:53,159 --> 00:34:59,880
advantage of using this over Silex or

00:34:57,840 --> 00:35:04,920
any other micro framework is that this

00:34:59,880 --> 00:35:07,410
is really a simple project and yet so

00:35:04,920 --> 00:35:09,210
you defined it doesn't anniversaire

00:35:07,410 --> 00:35:10,530
bootstrap it is in the a person for the

00:35:09,210 --> 00:35:13,560
project this could be all in one file

00:35:10,530 --> 00:35:15,480
that doesn't have to it's not that

00:35:13,560 --> 00:35:18,150
important but what's important that you

00:35:15,480 --> 00:35:19,860
can actually revert back to the

00:35:18,150 --> 00:35:23,120
full-stack framework you just remove the

00:35:19,860 --> 00:35:25,740
trade a lot your external configuration

00:35:23,120 --> 00:35:27,960
and you can scale this way so we can

00:35:25,740 --> 00:35:31,200
start simple small but then scale to the

00:35:27,960 --> 00:35:35,760
bigger application and just take the

00:35:31,200 --> 00:35:42,950
config from simple standard edition put

00:35:35,760 --> 00:35:46,650
that stuff that's what I want to

00:35:42,950 --> 00:35:51,630
indicate here is that it's very good to

00:35:46,650 --> 00:35:54,300
try to design smaller ups right you

00:35:51,630 --> 00:35:55,470
might be rewriting the old up page by

00:35:54,300 --> 00:35:57,960
page you put it into the same

00:35:55,470 --> 00:36:00,480
application but think about it for a

00:35:57,960 --> 00:36:03,060
while and consider if you could actually

00:36:00,480 --> 00:36:05,730
design several smaller applications so

00:36:03,060 --> 00:36:08,550
maybe your checkout process is a

00:36:05,730 --> 00:36:12,930
separate application to be product

00:36:08,550 --> 00:36:14,880
catalog okay both use the product

00:36:12,930 --> 00:36:16,500
somehow but if you think about it it's

00:36:14,880 --> 00:36:19,140
not the same product it's a different

00:36:16,500 --> 00:36:21,240
context in the product catalog you need

00:36:19,140 --> 00:36:23,970
different methods different behavior of

00:36:21,240 --> 00:36:27,150
them in your checkout process or maybe

00:36:23,970 --> 00:36:29,340
this is not what it looks like maybe

00:36:27,150 --> 00:36:33,210
this is a product and this is just a

00:36:29,340 --> 00:36:35,730
basket item or an order item it's not

00:36:33,210 --> 00:36:37,890
the same thing by introducing smaller

00:36:35,730 --> 00:36:40,140
apps you introduced the clear separation

00:36:37,890 --> 00:36:43,170
you really failed designing a big

00:36:40,140 --> 00:36:46,140
monolith everything Ukrainian is

00:36:43,170 --> 00:36:51,599
spaghetti they're try designing smaller

00:36:46,140 --> 00:36:53,500
apps it's and don't try to share things

00:36:51,599 --> 00:36:57,339
just because you think they're similar

00:36:53,500 --> 00:36:59,680
actually try to duplicate things and

00:36:57,339 --> 00:37:03,339
only share them when it makes sense when

00:36:59,680 --> 00:37:05,770
you have to free use cases for that the

00:37:03,339 --> 00:37:10,510
clear separation between projects makes

00:37:05,770 --> 00:37:13,980
it harder to mess up in my opinion it's

00:37:10,510 --> 00:37:13,980
much harder to mix the layers

00:37:20,079 --> 00:37:25,929
and finally we might take a bit of a

00:37:23,109 --> 00:37:29,279
hybrid approach it's not always possible

00:37:25,929 --> 00:37:35,259
to clearly separate the two applications

00:37:29,279 --> 00:37:38,469
it's not always feasible to try to only

00:37:35,259 --> 00:37:40,119
work with legacy sometimes you want to

00:37:38,469 --> 00:37:42,939
do a bit of both create a new

00:37:40,119 --> 00:37:44,949
application work on it and then also

00:37:42,939 --> 00:37:46,989
access the old the new application in

00:37:44,949 --> 00:37:48,699
your legacy code because there's still

00:37:46,989 --> 00:37:49,809
some dependencies that there's lots of

00:37:48,699 --> 00:37:50,259
things that might that might be

00:37:49,809 --> 00:37:52,269
happening

00:37:50,259 --> 00:37:55,719
come on example some kind of a Geo IP

00:37:52,269 --> 00:37:57,549
lookup that you wanted to do you want it

00:37:55,719 --> 00:38:06,699
to happen in both legacy and your new

00:37:57,549 --> 00:38:10,539
app so this is what we could do we would

00:38:06,699 --> 00:38:14,289
call our legacy project and to talk to

00:38:10,539 --> 00:38:16,779
the symphony and just response obviously

00:38:14,289 --> 00:38:19,539
some of the routes might point to simple

00:38:16,779 --> 00:38:25,689
there already depends on which phase of

00:38:19,539 --> 00:38:30,069
the project you are and it's very easy

00:38:25,689 --> 00:38:32,559
to bootstrap such a project so in your

00:38:30,069 --> 00:38:34,569
legacy up first of all you would need to

00:38:32,559 --> 00:38:37,059
create a request and this is actually

00:38:34,569 --> 00:38:39,459
quite a useful object to have your old

00:38:37,059 --> 00:38:43,420
legacy app probably uses global

00:38:39,459 --> 00:38:46,109
variables directly this cleans things up

00:38:43,420 --> 00:38:49,900
a bit and also has some nice behaviors

00:38:46,109 --> 00:38:51,299
you can get client IDs filtered by

00:38:49,900 --> 00:38:56,079
proxies and stuff like that

00:38:51,299 --> 00:38:58,059
very useful thing to have in this

00:38:56,079 --> 00:39:00,400
example I also said is like Asatru so

00:38:58,059 --> 00:39:03,489
that I know that request was created in

00:39:00,400 --> 00:39:05,650
legacy that might be useful if you call

00:39:03,489 --> 00:39:07,029
something from your new application my

00:39:05,650 --> 00:39:09,579
peers wouldn't know that that was

00:39:07,029 --> 00:39:11,619
initiated initialized from legacy and

00:39:09,579 --> 00:39:14,049
that script finally needs to be fixed

00:39:11,619 --> 00:39:17,529
because it was a different file name

00:39:14,049 --> 00:39:19,029
that I've seen from the nodes so for

00:39:17,529 --> 00:39:21,400
simpler to generate proper routes it

00:39:19,029 --> 00:39:24,579
needs to have a proper controller here

00:39:21,400 --> 00:39:27,069
from controller and you create the

00:39:24,579 --> 00:39:29,979
kernel with some environment and whether

00:39:27,069 --> 00:39:32,859
it's a boot this is what Symphony does

00:39:29,979 --> 00:39:33,700
when you call kernel handle at first

00:39:32,859 --> 00:39:37,109
boots

00:39:33,700 --> 00:39:40,270
the kernel which instantiates container

00:39:37,109 --> 00:39:43,089
that's all the caching and all the

00:39:40,270 --> 00:39:45,369
processing there and you have already

00:39:43,089 --> 00:39:48,130
kind of ready to go but you just don't

00:39:45,369 --> 00:39:50,859
call it okay what you can do is access

00:39:48,130 --> 00:39:53,020
the same container as is available in

00:39:50,859 --> 00:39:55,119
your simple project so you can start

00:39:53,020 --> 00:39:56,859
using services for similar projects so

00:39:55,119 --> 00:39:59,859
examples are shown before we've tweaked

00:39:56,859 --> 00:40:01,569
the container itself or even dispatcher

00:39:59,859 --> 00:40:02,890
or another service that's registered on

00:40:01,569 --> 00:40:08,380
your support project can be now

00:40:02,890 --> 00:40:11,680
accessing legacy so I can start calling

00:40:08,380 --> 00:40:13,780
events and I can start sharing those

00:40:11,680 --> 00:40:15,400
events I can start calling the same

00:40:13,780 --> 00:40:17,559
events in both applications and have

00:40:15,400 --> 00:40:26,200
logic migrated over to the new app

00:40:17,559 --> 00:40:29,170
already access the tweak its what to

00:40:26,200 --> 00:40:31,500
know how simple they works internally so

00:40:29,170 --> 00:40:38,740
you could perhaps call the same events

00:40:31,500 --> 00:40:42,940
or similar events so when the request

00:40:38,740 --> 00:40:44,380
comes in simple they will not call your

00:40:42,940 --> 00:40:47,470
controller yet just yet

00:40:44,380 --> 00:40:50,700
it will fire a new event candidate

00:40:47,470 --> 00:40:53,020
request okay I know I have a request

00:40:50,700 --> 00:40:54,940
maybe someone's interested in it and

00:40:53,020 --> 00:40:57,730
there's some built-in listeners that

00:40:54,940 --> 00:40:59,170
that handle that and more covers they

00:40:57,730 --> 00:41:02,530
routinely standard that does they worth

00:40:59,170 --> 00:41:04,869
much him but only sets the attributes on

00:41:02,530 --> 00:41:08,829
the request of the sensor attributes of

00:41:04,869 --> 00:41:10,660
the mushroom on the requester and you

00:41:08,829 --> 00:41:13,750
can add your own listeners in here so

00:41:10,660 --> 00:41:17,950
that the gel do IP lookup could happen

00:41:13,750 --> 00:41:22,200
in here and you could update the request

00:41:17,950 --> 00:41:26,559
with your results of your magic then

00:41:22,200 --> 00:41:30,990
based on the much truth it resolves the

00:41:26,559 --> 00:41:33,700
controller and it doesn't call it yet

00:41:30,990 --> 00:41:35,049
it fires another event I've got a

00:41:33,700 --> 00:41:37,059
controller maybe someone wants to do

00:41:35,049 --> 00:41:38,559
something about and at this point your

00:41:37,059 --> 00:41:40,720
listener might change the controller

00:41:38,559 --> 00:41:44,349
might and with the controller that's

00:41:40,720 --> 00:41:46,359
when the container is injected into

00:41:44,349 --> 00:41:49,110
controllers if you implement the

00:41:46,359 --> 00:41:52,150
container we're into

00:41:49,110 --> 00:41:53,800
it might also perm converter listener

00:41:52,150 --> 00:41:56,440
you know in the symphony controllers you

00:41:53,800 --> 00:41:59,440
can inject parameters into your

00:41:56,440 --> 00:42:01,180
controller method directly parent

00:41:59,440 --> 00:42:05,350
convertor listener takes care of that so

00:42:01,180 --> 00:42:10,210
it looks into the controllers arguments

00:42:05,350 --> 00:42:12,160
and tries to resolve them controller

00:42:10,210 --> 00:42:13,840
it's called it hopefully returns the

00:42:12,160 --> 00:42:15,430
response this is like a happy path

00:42:13,840 --> 00:42:18,040
there's more events in synchrony but

00:42:15,430 --> 00:42:18,540
this is happy path controller returns a

00:42:18,040 --> 00:42:21,160
response

00:42:18,540 --> 00:42:22,750
but it's not returned yet we call Cal

00:42:21,160 --> 00:42:24,310
hey I've got a response maybe someone

00:42:22,750 --> 00:42:26,320
wants to do something about it

00:42:24,310 --> 00:42:29,320
that's when for example web the back

00:42:26,320 --> 00:42:30,790
toolbar is injected in today response if

00:42:29,320 --> 00:42:34,420
there's a body if that's an HTML

00:42:30,790 --> 00:42:42,460
response actually mouth the back toolbar

00:42:34,420 --> 00:42:49,150
is injected we also have a finish

00:42:42,460 --> 00:42:51,550
request object sorry event and then we

00:42:49,150 --> 00:42:55,960
might might happen if that the thing wet

00:42:51,550 --> 00:43:00,360
we return it is not a request

00:42:55,960 --> 00:43:03,040
sorry response will call something that

00:43:00,360 --> 00:43:06,100
might still recover that situation so

00:43:03,040 --> 00:43:07,690
okay the thing I got this not a response

00:43:06,100 --> 00:43:09,220
but maybe someone knows what to do about

00:43:07,690 --> 00:43:12,700
it so you can have research that's going

00:43:09,220 --> 00:43:14,890
to realize that object or I render a

00:43:12,700 --> 00:43:17,110
template as the template listener does

00:43:14,890 --> 00:43:20,050
if there's a template notation things

00:43:17,110 --> 00:43:23,500
like that then the response is sent back

00:43:20,050 --> 00:43:25,420
to the user and we send the after the

00:43:23,500 --> 00:43:28,540
response is sent we fire the kernel

00:43:25,420 --> 00:43:31,930
terminate event that happens when the

00:43:28,540 --> 00:43:35,980
user already has the page render that

00:43:31,930 --> 00:43:38,650
the connection is still resistive that's

00:43:35,980 --> 00:43:41,950
where they all the Mail's are sent from

00:43:38,650 --> 00:43:44,560
the spool queue and you can add your own

00:43:41,950 --> 00:43:48,910
stuff in there it's used for

00:43:44,560 --> 00:43:52,600
long-running jobs that shouldn't bother

00:43:48,910 --> 00:43:55,180
the user but I wouldn't recommend it to

00:43:52,600 --> 00:43:56,440
use it heavily it's better to offload

00:43:55,180 --> 00:43:58,220
that to the message queue rather than

00:43:56,440 --> 00:44:01,640
doing

00:43:58,220 --> 00:44:04,190
requested use recalled so and there's

00:44:01,640 --> 00:44:07,160
more more events like cattle exception

00:44:04,190 --> 00:44:09,310
which is called when the exceptions

00:44:07,160 --> 00:44:11,930
fired so you can still recover from it

00:44:09,310 --> 00:44:14,930
all of those events you can potentially

00:44:11,930 --> 00:44:18,410
use in your legacy app if you have

00:44:14,930 --> 00:44:22,310
access to the service container that's

00:44:18,410 --> 00:44:28,849
also verbal in your new app that might

00:44:22,310 --> 00:44:31,690
be very powerful way to start migrating

00:44:28,849 --> 00:44:35,150
your old stuff to the new one

00:44:31,690 --> 00:44:36,530
mostly for logic global logic that

00:44:35,150 --> 00:44:44,119
happens on all requests

00:44:36,530 --> 00:44:46,190
I use it to migrate that logic over in

00:44:44,119 --> 00:44:53,000
your legacy code you see you'd simply

00:44:46,190 --> 00:44:54,590
sorry you'd simply fire an event in this

00:44:53,000 --> 00:44:57,830
case this is what simpler kernel does

00:44:54,590 --> 00:44:59,420
but we didn't call kernel handle so we

00:44:57,830 --> 00:45:03,230
need to do it in the legacy of ourselves

00:44:59,420 --> 00:45:04,250
if you want to if you need to so we

00:45:03,230 --> 00:45:07,280
would call it in the beginning of

00:45:04,250 --> 00:45:10,640
request to listen to the same events

00:45:07,280 --> 00:45:14,650
that our new what reasons you see

00:45:10,640 --> 00:45:14,650
dispatch kernel events request

00:45:23,080 --> 00:45:32,320
and the final thing you might also embed

00:45:29,660 --> 00:45:36,200
your new controllers in your old up

00:45:32,320 --> 00:45:40,660
either with your size if you don't know

00:45:36,200 --> 00:45:43,270
what inside is is it's an exciting hood

00:45:40,660 --> 00:45:49,670
that's a standard developed by Akamai

00:45:43,270 --> 00:45:51,530
but also supported by a varnish and what

00:45:49,670 --> 00:45:54,020
you could do is basically embed a tag

00:45:51,530 --> 00:45:59,030
like this yes I include and path to

00:45:54,020 --> 00:46:01,730
another URL and if you have a reverse

00:45:59,030 --> 00:46:03,980
proxy in front of it like varnish it

00:46:01,730 --> 00:46:05,720
will call that you were all before

00:46:03,980 --> 00:46:09,050
returning it to the client assembly the

00:46:05,720 --> 00:46:11,150
page and return to the client nice thing

00:46:09,050 --> 00:46:17,750
about it is that it's such a block can

00:46:11,150 --> 00:46:20,930
be cached with a separate lifetime so

00:46:17,750 --> 00:46:25,150
you can well you could simply generate

00:46:20,930 --> 00:46:27,619
such attack but if you use the Symphony

00:46:25,150 --> 00:46:31,210
one of the fragment renders this view to

00:46:27,619 --> 00:46:35,330
support there's an inside there's an SSI

00:46:31,210 --> 00:46:37,250
in line renderer a cheap route so you

00:46:35,330 --> 00:46:41,089
could do the same with Ajax requests and

00:46:37,250 --> 00:46:42,950
the library you can access the service

00:46:41,089 --> 00:46:47,540
and the render it why doing it this way

00:46:42,950 --> 00:46:49,910
well because if simply if that service

00:46:47,540 --> 00:46:51,530
recognizes that there's a reverse box in

00:46:49,910 --> 00:46:53,660
front of it basically it looks for a

00:46:51,530 --> 00:46:57,400
header if it has a surrogate

00:46:53,660 --> 00:46:59,900
capabilities it will render the si tag

00:46:57,400 --> 00:47:04,040
but if you on your development

00:46:59,900 --> 00:47:07,310
environment don't have that you won't

00:47:04,040 --> 00:47:10,910
have the tether and symphony will simply

00:47:07,310 --> 00:47:13,760
call that controller in line so it's

00:47:10,910 --> 00:47:16,820
going to work in both environments so

00:47:13,760 --> 00:47:19,880
just a nice thing to do it this way you

00:47:16,820 --> 00:47:21,890
can start thinking how to migrate pieces

00:47:19,880 --> 00:47:24,830
of your site like a navigation you have

00:47:21,890 --> 00:47:26,119
a quite complex navigation system that

00:47:24,830 --> 00:47:28,430
you want to migrate over redesign

00:47:26,119 --> 00:47:31,130
completely you might include it within

00:47:28,430 --> 00:47:34,910
ASI especially that most of the time

00:47:31,130 --> 00:47:38,440
it's very nicely cache

00:47:34,910 --> 00:47:38,440
and move it over to the new code base

00:47:41,290 --> 00:47:47,510
and these are all the ideas I've got

00:47:44,720 --> 00:47:50,900
today so thank you very much for

00:47:47,510 --> 00:47:54,050
listening and I think I still have some

00:47:50,900 --> 00:47:55,520
time for questions please write my talk

00:47:54,050 --> 00:47:57,290
this is the first time I delivered this

00:47:55,520 --> 00:48:02,090
talk so it probably needs some polishing

00:47:57,290 --> 00:48:05,780
I am looking forward to your feedback if

00:48:02,090 --> 00:48:08,180
there are any questions this little body

00:48:05,780 --> 00:48:10,010
looks for a new home and the best

00:48:08,180 --> 00:48:14,990
question according to me is gonna win

00:48:10,010 --> 00:48:17,240
the elephant hi hi when you start to

00:48:14,990 --> 00:48:20,660
work on new legacy code base how do you

00:48:17,240 --> 00:48:24,310
choose which approach to use well it

00:48:20,660 --> 00:48:24,310
depends on the code base that's a very

00:48:27,790 --> 00:48:34,580
use the clear separation in the first

00:48:30,290 --> 00:48:38,150
place my first choice but it's not

00:48:34,580 --> 00:48:40,610
always possible so sometimes you need to

00:48:38,150 --> 00:48:45,590
modify the legacy code and then use

00:48:40,610 --> 00:48:50,120
those techniques I would go with clear

00:48:45,590 --> 00:48:58,130
separation that's my first guess does it

00:48:50,120 --> 00:49:01,430
answer your question not really hi my

00:48:58,130 --> 00:49:05,320
question will be you clearly mentioned

00:49:01,430 --> 00:49:07,880
Symphony one and Symphony two as from to

00:49:05,320 --> 00:49:10,160
framework that can be used you know with

00:49:07,880 --> 00:49:14,060
migration do you have any experience

00:49:10,160 --> 00:49:16,130
with other frameworks and if then maybe

00:49:14,060 --> 00:49:18,560
there are some better alternatives so

00:49:16,130 --> 00:49:21,260
what if some talking about sin one sent

00:49:18,560 --> 00:49:26,420
to and probably many many more like even

00:49:21,260 --> 00:49:31,010
other thanks well I mentioned Symphony

00:49:26,420 --> 00:49:33,800
one as a legacy project similar to our

00:49:31,010 --> 00:49:36,820
free Symphony in general written with a

00:49:33,800 --> 00:49:42,140
capital S so anything above Symphony to

00:49:36,820 --> 00:49:45,560
answer the reason it's nice because it's

00:49:42,140 --> 00:49:48,250
a component based so you can choose and

00:49:45,560 --> 00:49:49,780
switch components

00:49:48,250 --> 00:49:51,880
eventually you probably arrived from a

00:49:49,780 --> 00:49:53,350
full-stack framework but because it's

00:49:51,880 --> 00:49:56,170
component-based you can easily integrate

00:49:53,350 --> 00:49:57,610
component by component into your altered

00:49:56,170 --> 00:50:03,610
based and I've seen people doing that

00:49:57,610 --> 00:50:06,090
with a great success I have uses on

00:50:03,610 --> 00:50:08,950
framework wonders in framework too and I

00:50:06,090 --> 00:50:11,650
don't want to speak publicly about it so

00:50:08,950 --> 00:50:13,330
if you ask me later on I decided not to

00:50:11,650 --> 00:50:18,430
complain on our frameworks too much

00:50:13,330 --> 00:50:23,380
publicly yeah but I'm a component based

00:50:18,430 --> 00:50:24,820
framework who would work I guess I'm a

00:50:23,380 --> 00:50:27,990
simple guide that's why this talk is

00:50:24,820 --> 00:50:31,000
mostly based around Sanfilippo but any

00:50:27,990 --> 00:50:32,800
libraries you could incorporate would

00:50:31,000 --> 00:50:36,520
work as well I think the key here is a

00:50:32,800 --> 00:50:39,310
composer you eat you just composer into

00:50:36,520 --> 00:50:40,930
your project and you can basically if

00:50:39,310 --> 00:50:42,610
you do that that might be the hardest

00:50:40,930 --> 00:50:44,080
step to do actually to integrate the

00:50:42,610 --> 00:50:48,040
composer autoloading into your legacy

00:50:44,080 --> 00:50:49,570
but once you've done that you know

00:50:48,040 --> 00:51:11,680
you've got lots of packages to choose

00:50:49,570 --> 00:51:16,780
from do I save all my old files to make

00:51:11,680 --> 00:51:19,270
a bundle or dry in the sauce or where

00:51:16,780 --> 00:51:21,400
should I place it depends how much you

00:51:19,270 --> 00:51:22,810
want to separate it in my example

00:51:21,400 --> 00:51:24,760
somewhere on screenshot there was a

00:51:22,810 --> 00:51:27,820
legacy folder inside of a project

00:51:24,760 --> 00:51:32,950
recently project for example but it

00:51:27,820 --> 00:51:35,410
could be totally separate directory and

00:51:32,950 --> 00:51:37,420
most of the time I would actually do

00:51:35,410 --> 00:51:41,320
that because it would encourage people

00:51:37,420 --> 00:51:45,790
to clearly separate the two and don't

00:51:41,320 --> 00:51:47,020
mess with legacy too much so we'd rather

00:51:45,790 --> 00:51:50,650
try to put them into separate

00:51:47,020 --> 00:51:52,150
directories not always possible but as

00:51:50,650 --> 00:51:55,890
much separation as you can

00:51:52,150 --> 00:51:55,890
does it answer your question

00:51:56,750 --> 00:52:04,860
so you will have them even in separate

00:52:00,780 --> 00:52:06,990
repositories unless you share some beats

00:52:04,860 --> 00:52:10,200
but I would try to have them in separate

00:52:06,990 --> 00:52:13,910
repositories first and then if that

00:52:10,200 --> 00:52:26,340
doesn't work put put the legacy into the

00:52:13,910 --> 00:52:28,530
root of the new project make sense yeah

00:52:26,340 --> 00:52:30,900
in case if I want to make kind of

00:52:28,530 --> 00:52:34,830
inspectional of my symphony project

00:52:30,900 --> 00:52:38,520
that's not one or two or three what do

00:52:34,830 --> 00:52:42,330
you propose to like her to use for

00:52:38,520 --> 00:52:49,200
example sensor inside or something you

00:52:42,330 --> 00:52:52,320
can hire me but apart yeah you can you

00:52:49,200 --> 00:52:56,760
can yeah since the laps inside is one

00:52:52,320 --> 00:52:58,920
thing I would do if you try few tools at

00:52:56,760 --> 00:53:00,090
the same time because they will give you

00:52:58,920 --> 00:53:01,470
different feedback sensual apps inside

00:53:00,090 --> 00:53:03,600
will give you the different feedback

00:53:01,470 --> 00:53:06,330
then scrutinised of CI for example

00:53:03,600 --> 00:53:08,910
scrutinize there is an excellent tool

00:53:06,330 --> 00:53:12,540
that shows you problems with your design

00:53:08,910 --> 00:53:15,540
of the code so looking to that as one as

00:53:12,540 --> 00:53:20,310
well nothing else comes to my mind at

00:53:15,540 --> 00:53:24,720
this point but these two but I would

00:53:20,310 --> 00:53:26,030
really also try to get another opinion

00:53:24,720 --> 00:53:32,220
from outside of your organization

00:53:26,030 --> 00:53:34,380
doesn't have to be me just our person

00:53:32,220 --> 00:53:37,350
who knows symphony and could assess your

00:53:34,380 --> 00:53:38,810
your code yeah because what I've read

00:53:37,350 --> 00:53:41,220
about the symphony is they're

00:53:38,810 --> 00:53:44,670
independent organizations always check

00:53:41,220 --> 00:53:49,550
it so they make audit so probably they

00:53:44,670 --> 00:53:51,870
use some automation to do it not only

00:53:49,550 --> 00:53:53,220
automation is part of it automation

00:53:51,870 --> 00:53:54,630
won't tell you everything and everything

00:53:53,220 --> 00:53:58,170
needs to be put in the context so

00:53:54,630 --> 00:53:59,610
there's always a guy that also goes

00:53:58,170 --> 00:54:01,680
through the results and also goes

00:53:59,610 --> 00:54:06,240
through at this part of the code and try

00:54:01,680 --> 00:54:08,390
to make his own conclusions so maybe

00:54:06,240 --> 00:54:11,480
even within your organization there's a

00:54:08,390 --> 00:54:13,359
who didn't work on that project and he

00:54:11,480 --> 00:54:16,609
could do like a generic old review of

00:54:13,359 --> 00:54:24,349
the project or maybe a new person coming

00:54:16,609 --> 00:54:28,910
in to do that as well yeah I will do my

00:54:24,349 --> 00:54:33,079
great something like collection of

00:54:28,910 --> 00:54:38,390
WordPress sites into the considerate

00:54:33,079 --> 00:54:50,269
legacy why would you want to migrate a

00:54:38,390 --> 00:54:53,559
more to a site because well if it's a

00:54:50,269 --> 00:54:55,789
blog I guess it could stay WordPress

00:54:53,559 --> 00:55:00,010
unless you build some kind of a crazy

00:54:55,789 --> 00:55:00,010
application based okay that's the case

00:55:07,930 --> 00:55:13,609
but to be honest the examples I've shown

00:55:11,210 --> 00:55:20,150
our based on experience working with

00:55:13,609 --> 00:55:22,190
code bases worse than WordPress so you

00:55:20,150 --> 00:55:23,960
take the same approach I guess the

00:55:22,190 --> 00:55:26,390
fortress I guess you could also use some

00:55:23,960 --> 00:55:27,109
automated tools for data migration that

00:55:26,390 --> 00:55:30,829
could help you

00:55:27,109 --> 00:55:33,109
you could try them to use use them and

00:55:30,829 --> 00:55:35,809
migrate data to some other format and

00:55:33,109 --> 00:55:37,309
then start from there and then not apply

00:55:35,809 --> 00:55:41,059
the same techniques as I shown here I

00:55:37,309 --> 00:55:42,680
guess does it help at all this is it's

00:55:41,059 --> 00:55:45,349
hard hard to have actually a generic

00:55:42,680 --> 00:55:57,500
talk about legacy as ever legacy is

00:55:45,349 --> 00:56:01,849
different create some smaller

00:55:57,500 --> 00:56:06,619
applications so my question is how do

00:56:01,849 --> 00:56:08,650
you handle data changes in your legacy

00:56:06,619 --> 00:56:11,000
application across all smaller

00:56:08,650 --> 00:56:13,940
microservices because a general approach

00:56:11,000 --> 00:56:17,650
for microservices is that each micro

00:56:13,940 --> 00:56:17,650
service should have its own database

00:56:18,240 --> 00:56:22,660
yes but they can still talk to each

00:56:20,950 --> 00:56:25,690
other and not necessarily talk to each

00:56:22,660 --> 00:56:27,150
other via HTTP often thought but you

00:56:25,690 --> 00:56:29,620
have message queues and things like that

00:56:27,150 --> 00:56:32,110
so you can notify I think message queues

00:56:29,620 --> 00:56:36,570
are good way of doing that of passing

00:56:32,110 --> 00:56:36,570
information between systems

00:56:46,890 --> 00:56:50,720
yeah so now I've got a problem because I

00:56:48,750 --> 00:56:54,800
don't know which question was the best

00:56:50,720 --> 00:56:54,800
that was key ones idea to do that

00:56:57,200 --> 00:57:08,840
who wants an elephant okay I'll throw it

00:57:03,390 --> 00:57:08,840

YouTube URL: https://www.youtube.com/watch?v=_h1MJbyGSc8


