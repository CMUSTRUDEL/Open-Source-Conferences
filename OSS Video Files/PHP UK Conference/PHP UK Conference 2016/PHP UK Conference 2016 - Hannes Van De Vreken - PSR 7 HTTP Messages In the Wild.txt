Title: PHP UK Conference 2016 - Hannes Van De Vreken - PSR 7 HTTP Messages In the Wild
Publication date: 2016-03-17
Playlist: PHP UK Conference 2016
Description: 
	PSR-7 describes common interfaces for representing HTTP messages. HTTP messages are the foundation of web development. Web browsers and HTTP clients such as cURL create HTTP request messages that are sent to a web server, which provides an HTTP response message. Server-side code receives an HTTP request message, and returns an HTTP response message. This talk will explain the interfaces defined by PSR-7, how they define the future of interoperability between frameworks and tools. After that there will be a showcase of several implementations and tools such as zend's diactoros package, Guzzle v6, php-http and other packages that show the real power of shared interfaces for HTTP objects. As most projects are ongoing, this talk will also show how PSR-7 and these other tools can already be used today in existing projects.
Captions: 
	00:00:04,570 --> 00:00:11,710
so why are we here today you're here to

00:00:08,200 --> 00:00:14,370
watch me talk about HTTP messages and PS

00:00:11,710 --> 00:00:16,390
are seven so because our seven is

00:00:14,370 --> 00:00:18,820
standardized state should be message

00:00:16,390 --> 00:00:22,240
interfaces so it's modern way of dealing

00:00:18,820 --> 00:00:25,060
with HTTP in PHP it's hard to pronounce

00:00:22,240 --> 00:00:28,089
a lot of PCD the blood it's hard to

00:00:25,060 --> 00:00:33,400
pronounce Who am I my name is honest and

00:00:28,089 --> 00:00:36,490
that next slide is a description of me

00:00:33,400 --> 00:00:40,629
in for emoji I'm a Belgian I'm a runner

00:00:36,490 --> 00:00:42,699
and I do software development I work for

00:00:40,629 --> 00:00:48,730
a company called made with love the be e

00:00:42,699 --> 00:00:51,699
we make things with love we use PHP and

00:00:48,730 --> 00:00:53,500
javascript etc we have a team of about

00:00:51,699 --> 00:00:57,430
20 people over four different continents

00:00:53,500 --> 00:01:00,039
including Brazil Canada Kenya and Europe

00:00:57,430 --> 00:01:03,309
so it's really cool company if you want

00:01:00,039 --> 00:01:07,060
to check it out mate with love BB e so p

00:01:03,309 --> 00:01:12,100
is our seven anyone went to yesterday's

00:01:07,060 --> 00:01:16,330
talk about the fig bit PHP fig okay good

00:01:12,100 --> 00:01:18,850
so we know what PA zar zar it's p

00:01:16,330 --> 00:01:21,759
standard recommendation am i right okay

00:01:18,850 --> 00:01:24,430
so PSR 7 is number seven of those

00:01:21,759 --> 00:01:28,450
recommendations and it's about common

00:01:24,430 --> 00:01:31,180
interfaces for HTTP messages at this

00:01:28,450 --> 00:01:33,579
chapter this chapter this talk will be

00:01:31,180 --> 00:01:36,100
divided into three chapters the first

00:01:33,579 --> 00:01:38,040
one is what is this peers are what are

00:01:36,100 --> 00:01:41,079
these interfaces what do they include

00:01:38,040 --> 00:01:43,659
the second one is guzzle my favorite

00:01:41,079 --> 00:01:45,790
favorite HTTP client and the third

00:01:43,659 --> 00:01:48,399
chapter will be about more usages of

00:01:45,790 --> 00:01:50,110
bees are seven throughout your

00:01:48,399 --> 00:01:54,009
applications today how you can start

00:01:50,110 --> 00:01:57,270
using it so let's get it started with

00:01:54,009 --> 00:02:00,670
first chapter peers are HTTP message

00:01:57,270 --> 00:02:03,850
it's common interfaces for HTTP messages

00:02:00,670 --> 00:02:07,600
without HTTP we wouldn't be here our

00:02:03,850 --> 00:02:10,570
jobs include writing HTTP clients using

00:02:07,600 --> 00:02:13,570
it writing HTTP applications and servers

00:02:10,570 --> 00:02:15,319
and stuff so HTTP messages is all what

00:02:13,570 --> 00:02:18,769
this talk is about

00:02:15,319 --> 00:02:21,409
it's common which means it should work

00:02:18,769 --> 00:02:24,709
or these interfaces should work in any

00:02:21,409 --> 00:02:27,859
framework whether that's laravel cake ye

00:02:24,709 --> 00:02:30,079
symphony other framework you should be

00:02:27,859 --> 00:02:34,239
able to use these interfaces inside any

00:02:30,079 --> 00:02:37,400
PHP application and these messages

00:02:34,239 --> 00:02:42,079
responses requests should work for both

00:02:37,400 --> 00:02:45,049
HP clients and HTTP servers so it's

00:02:42,079 --> 00:02:47,540
common for both both both sides of the

00:02:45,049 --> 00:02:49,519
HTTP protocol also its version

00:02:47,540 --> 00:02:52,129
independent it should work with version

00:02:49,519 --> 00:02:55,549
100 1 dot 1 and 2 dot something and

00:02:52,129 --> 00:02:59,269
every future version also there are

00:02:55,549 --> 00:03:02,719
interfaces the PSR defines interfaces it

00:02:59,269 --> 00:03:04,459
doesn't include implementations you can

00:03:02,719 --> 00:03:08,540
choose whatever implementation there is

00:03:04,459 --> 00:03:12,439
out there so what did we do before peers

00:03:08,540 --> 00:03:15,010
are seven we would use symphony HTTP

00:03:12,439 --> 00:03:17,569
foundation or most of us would use it

00:03:15,010 --> 00:03:22,069
these include a question response

00:03:17,569 --> 00:03:25,939
objects but not interface there's just

00:03:22,069 --> 00:03:28,609
glass request and then the static

00:03:25,939 --> 00:03:32,659
function create from Global's all in one

00:03:28,609 --> 00:03:36,169
big ass request object so that's not

00:03:32,659 --> 00:03:39,319
very useful to Ryu yet reuse it or

00:03:36,169 --> 00:03:42,409
decouple from it so we cannot type into

00:03:39,319 --> 00:03:44,359
interfaces and what else is different

00:03:42,409 --> 00:03:46,069
with peers are seven request and

00:03:44,359 --> 00:03:49,840
response objects is that they are

00:03:46,069 --> 00:03:52,759
immutable who knows what immutability is

00:03:49,840 --> 00:03:55,579
good I see a lot of hands so

00:03:52,759 --> 00:03:59,150
immutability will states that an object

00:03:55,579 --> 00:04:03,859
will never change state if you call a

00:03:59,150 --> 00:04:06,319
method on it it may return an attribute

00:04:03,859 --> 00:04:09,019
value like get header it'll return a

00:04:06,319 --> 00:04:10,989
header but if you want to change the

00:04:09,019 --> 00:04:13,879
request object if you want a new object

00:04:10,989 --> 00:04:16,099
with a different state then you would

00:04:13,879 --> 00:04:19,099
have to call with Heather method this

00:04:16,099 --> 00:04:22,639
with header method will return a new

00:04:19,099 --> 00:04:26,599
request object with a changed changed

00:04:22,639 --> 00:04:28,699
state and the original a quest object

00:04:26,599 --> 00:04:29,220
will remain the same so if you've are

00:04:28,699 --> 00:04:31,560
dumb

00:04:29,220 --> 00:04:36,090
these two a quest object it will return

00:04:31,560 --> 00:04:38,730
false or if you fart dump the strict

00:04:36,090 --> 00:04:43,440
comparison of these objects so let's

00:04:38,730 --> 00:04:48,840
take a look I will open up my favorite

00:04:43,440 --> 00:04:51,870
ide which is phpstorm and i will show

00:04:48,840 --> 00:04:54,810
you some of the interfaces so a request

00:04:51,870 --> 00:05:00,110
on a response both have a body and

00:04:54,810 --> 00:05:03,750
headers so it's pretty useful to have a

00:05:00,110 --> 00:05:06,240
combined interface or a parent interface

00:05:03,750 --> 00:05:08,820
for both these interfaces which is the

00:05:06,240 --> 00:05:14,550
message interface right here can you see

00:05:08,820 --> 00:05:17,640
it is it clear in the back I might zoom

00:05:14,550 --> 00:05:19,710
in a bit so this message interface it

00:05:17,640 --> 00:05:23,270
does have a few methods like gets

00:05:19,710 --> 00:05:26,460
protocol version get headers has Heather

00:05:23,270 --> 00:05:29,580
get body which is common for both the

00:05:26,460 --> 00:05:34,800
request and response object so if we go

00:05:29,580 --> 00:05:36,810
look at response interface we will see

00:05:34,800 --> 00:05:40,500
that there's an added get status code

00:05:36,810 --> 00:05:43,169
and get reason phrase ever HTTP response

00:05:40,500 --> 00:05:45,030
is sent back to the client or the user

00:05:43,169 --> 00:05:47,729
agent whatever you want to call it it

00:05:45,030 --> 00:05:54,050
has a status code whether that's 200 ok

00:05:47,729 --> 00:05:57,240
or 403 unauthorized 418 I am a teapot

00:05:54,050 --> 00:06:00,380
that's a status code and a reason phrase

00:05:57,240 --> 00:06:03,060
so that's it for the response object

00:06:00,380 --> 00:06:06,600
response interface there's also the

00:06:03,060 --> 00:06:09,030
request interface the request request

00:06:06,600 --> 00:06:12,720
interface has this is not clear right in

00:06:09,030 --> 00:06:16,229
the back and it has a get method and a

00:06:12,720 --> 00:06:18,720
get your eye we can get a certain string

00:06:16,229 --> 00:06:21,210
which is your eye and send it off to the

00:06:18,720 --> 00:06:23,669
server the server will decide what to do

00:06:21,210 --> 00:06:27,600
with it this is something that only the

00:06:23,669 --> 00:06:30,330
request has not the not response this

00:06:27,600 --> 00:06:33,840
request interface is also extended by

00:06:30,330 --> 00:06:37,530
the server a quest interface and this

00:06:33,840 --> 00:06:40,620
has methods to to get a lot of data

00:06:37,530 --> 00:06:41,770
about the dollar and score server values

00:06:40,620 --> 00:06:45,250
and dollar underscore

00:06:41,770 --> 00:06:47,770
our files and attributes and cookies all

00:06:45,250 --> 00:06:50,740
of those methods are included in the

00:06:47,770 --> 00:06:54,099
server request interface so that you

00:06:50,740 --> 00:06:58,659
don't have to peek into the super

00:06:54,099 --> 00:07:01,930
Global's we don't do that anymore and if

00:06:58,659 --> 00:07:06,639
we go back to the message interface it

00:07:01,930 --> 00:07:09,190
also has a get body method and this gap

00:07:06,639 --> 00:07:13,240
body method will return a stream a

00:07:09,190 --> 00:07:16,780
stream interface object I just told you

00:07:13,240 --> 00:07:19,630
that every of these objects are

00:07:16,780 --> 00:07:21,639
immutable this one is the exception the

00:07:19,630 --> 00:07:26,229
stream interface has a couple of methods

00:07:21,639 --> 00:07:29,530
like seek rewind right is readable those

00:07:26,229 --> 00:07:31,389
are ya the objects that implement these

00:07:29,530 --> 00:07:37,840
are not immutable this is the only

00:07:31,389 --> 00:07:41,440
exception in this package let's go back

00:07:37,840 --> 00:07:43,780
to the slides so as a recap there's a

00:07:41,440 --> 00:07:46,419
message interface which is both at the

00:07:43,780 --> 00:07:49,750
parent for the request and response the

00:07:46,419 --> 00:07:51,909
US has another child interface which is

00:07:49,750 --> 00:07:53,620
the server request interface which

00:07:51,909 --> 00:07:55,949
allows you to access the dollar

00:07:53,620 --> 00:07:59,500
underscore guitar underscore post

00:07:55,949 --> 00:08:03,219
post-super Global's there's also the URI

00:07:59,500 --> 00:08:06,279
interface which abstracts get query or

00:08:03,219 --> 00:08:10,029
get host or get scheme rather that's

00:08:06,279 --> 00:08:11,680
HTTP or HTTPS and there's there's also

00:08:10,029 --> 00:08:14,259
the stream interface the stream

00:08:11,680 --> 00:08:19,990
interfaces for the body of the object so

00:08:14,259 --> 00:08:22,440
now we can stream HTTP bodies via PHP

00:08:19,990 --> 00:08:27,669
which is more energy efficient energy

00:08:22,440 --> 00:08:31,240
Wow memory memory efficient also I

00:08:27,669 --> 00:08:36,490
remind that or remember that the stream

00:08:31,240 --> 00:08:38,130
interface is not immutable so there's a

00:08:36,490 --> 00:08:42,430
couple of implementations of these

00:08:38,130 --> 00:08:44,829
interfaces the most famous ones or the

00:08:42,430 --> 00:08:47,320
most downloaded ones are the guzzle HTTP

00:08:44,829 --> 00:08:51,850
/ peers are seven package but there's

00:08:47,320 --> 00:08:54,130
also the the zend framework / ascent d

00:08:51,850 --> 00:08:55,589
activist and not Greek but that that

00:08:54,130 --> 00:08:59,139
should be Greek

00:08:55,589 --> 00:09:02,410
that package which includes super useful

00:08:59,139 --> 00:09:07,269
helpers and factories and emitter i will

00:09:02,410 --> 00:09:10,750
show you them later so the guzzle

00:09:07,269 --> 00:09:12,760
package is my favorite it's my favorite

00:09:10,750 --> 00:09:16,180
HTTP client so i dedicated an entire

00:09:12,760 --> 00:09:18,820
chapter to this so what do we do to

00:09:16,180 --> 00:09:21,790
install guzzle we do composer require

00:09:18,820 --> 00:09:24,130
russell HP / guzzle this will add

00:09:21,790 --> 00:09:26,860
something to your compositor JSON file

00:09:24,130 --> 00:09:30,279
inside the require block inside the

00:09:26,860 --> 00:09:33,880
require block it will say guzzle HTTP /

00:09:30,279 --> 00:09:36,699
guzzle Garrett 61 which is the current

00:09:33,880 --> 00:09:39,399
version constraint for guzzle if we go

00:09:36,699 --> 00:09:43,570
to this packages temper check we can see

00:09:39,399 --> 00:09:46,209
a whole list of tagged releases of

00:09:43,570 --> 00:09:49,000
guzzle we can see that with the version

00:09:46,209 --> 00:09:51,070
constraints Garrett six of one it will

00:09:49,000 --> 00:09:54,459
install either six dot one dot zero or

00:09:51,070 --> 00:09:57,160
six dot one dot one or if a new release

00:09:54,459 --> 00:09:59,709
is tagged anything up to 7 dot 0 dot 0

00:09:57,160 --> 00:10:02,170
exclusively if you want to check out

00:09:59,709 --> 00:10:06,430
this package sticker or packages semper

00:10:02,170 --> 00:10:10,329
checker go to sim vm w LW may do it love

00:10:06,430 --> 00:10:12,730
we made this so what is new in guzzle

00:10:10,329 --> 00:10:15,640
version 6 compared two versions older

00:10:12,730 --> 00:10:18,550
than version 6 right now it uses PSR

00:10:15,640 --> 00:10:21,130
seven objects which is good for that it

00:10:18,550 --> 00:10:24,190
has attracted the implementations into a

00:10:21,130 --> 00:10:26,920
different package called guzzle HTTP /

00:10:24,190 --> 00:10:29,260
PSR seven so you can reuse it without

00:10:26,920 --> 00:10:31,870
actually using the client which is good

00:10:29,260 --> 00:10:33,790
if we go look into the composite

00:10:31,870 --> 00:10:36,579
adjacent file of this package we will

00:10:33,790 --> 00:10:39,399
see that it has a provides block and in

00:10:36,579 --> 00:10:44,430
this provides block provide block their

00:10:39,399 --> 00:10:48,040
spears are / HTTP message dash

00:10:44,430 --> 00:10:52,329
implementation if we go look on packages

00:10:48,040 --> 00:10:54,190
org and we type in that package name we

00:10:52,329 --> 00:10:57,850
will see that it has never been

00:10:54,190 --> 00:11:00,819
downloaded before it has no stars huh

00:10:57,850 --> 00:11:03,519
and it's a virtual package huh what's

00:11:00,819 --> 00:11:06,430
that if we click on it on it you will

00:11:03,519 --> 00:11:09,220
see that packages says well this package

00:11:06,430 --> 00:11:11,040
is not installable you cannot install

00:11:09,220 --> 00:11:13,420
this but here's a couple of

00:11:11,040 --> 00:11:17,139
implementations available for you that

00:11:13,420 --> 00:11:22,300
you can use to actually fulfill this

00:11:17,139 --> 00:11:24,850
requirement of this bizarre / HTTP

00:11:22,300 --> 00:11:26,769
message implementation package and at

00:11:24,850 --> 00:11:30,189
the top we will see that there's guzzle

00:11:26,769 --> 00:11:32,620
HTTP / PSR 7 and send frameworks

00:11:30,189 --> 00:11:35,709
implementation you can see this is an

00:11:32,620 --> 00:11:38,259
old screenshot it says 1 million

00:11:35,709 --> 00:11:41,949
downloads but it's far beyond 3 million

00:11:38,259 --> 00:11:45,879
now so it's the most most used

00:11:41,949 --> 00:11:49,480
implementation so how do we use these

00:11:45,879 --> 00:11:52,180
objects previously I showed you the

00:11:49,480 --> 00:11:53,980
interfaces you cannot new up something

00:11:52,180 --> 00:11:57,370
which is an interface so we need two new

00:11:53,980 --> 00:11:59,709
up an actual object so with this

00:11:57,370 --> 00:12:03,040
implementation of the interface we can

00:11:59,709 --> 00:12:07,199
actually new up a request so we say new

00:12:03,040 --> 00:12:10,209
request method your I headers and body

00:12:07,199 --> 00:12:14,860
yes we can have a get request with the

00:12:10,209 --> 00:12:17,350
body ask elasticsearch they do it so we

00:12:14,860 --> 00:12:20,050
have a new request we can make a new

00:12:17,350 --> 00:12:23,500
HTTP client a ghazal client with

00:12:20,050 --> 00:12:28,350
Newcastle HP backslash client and pass

00:12:23,500 --> 00:12:33,089
it on to descent method send death this

00:12:28,350 --> 00:12:38,949
PS r7 request object this will return a

00:12:33,089 --> 00:12:46,180
PSR 7 response object obviously so let's

00:12:38,949 --> 00:12:48,730
show the power of this okay I'm in the

00:12:46,180 --> 00:12:52,839
first demo by the way these demos are

00:12:48,730 --> 00:12:54,610
also available on github so i showed you

00:12:52,839 --> 00:12:57,339
before that there's also a scent

00:12:54,610 --> 00:13:00,819
implementation so basically we can use

00:12:57,339 --> 00:13:04,059
send objects pass them on to the scent

00:13:00,819 --> 00:13:06,370
method of the client of guzzle and it

00:13:04,059 --> 00:13:08,379
should return a response object it

00:13:06,370 --> 00:13:11,259
doesn't matter if it's a scent object or

00:13:08,379 --> 00:13:13,449
a guzzle object because its type handed

00:13:11,259 --> 00:13:19,960
a zippy sr7 a quest and response

00:13:13,449 --> 00:13:24,280
interface object so I have a controller

00:13:19,960 --> 00:13:27,970
and which I'm mooing up here I'm passing

00:13:24,280 --> 00:13:31,660
it a client a guzzle client and then I'm

00:13:27,970 --> 00:13:34,360
calling it with controller method index

00:13:31,660 --> 00:13:36,430
and passing on a quest object and it

00:13:34,360 --> 00:13:38,620
returns a response object that's what

00:13:36,430 --> 00:13:42,280
controllers do they get a request object

00:13:38,620 --> 00:13:44,310
they send back a response object right

00:13:42,280 --> 00:13:48,370
here we can see that there's a server

00:13:44,310 --> 00:13:50,440
requestfactory buys end this factory

00:13:48,370 --> 00:13:53,710
allows us to create a new survey request

00:13:50,440 --> 00:13:57,210
interface object from the super Global's

00:13:53,710 --> 00:14:00,610
it's a static method oh let me go back

00:13:57,210 --> 00:14:04,240
it's a static method from Global's which

00:14:00,610 --> 00:14:06,070
is equal to the request create from

00:14:04,240 --> 00:14:08,080
Global's methods from the symphony

00:14:06,070 --> 00:14:10,750
request object but it's in a different

00:14:08,080 --> 00:14:14,050
factory so it's more single responsible

00:14:10,750 --> 00:14:16,930
yeah it's it doesn't break the single

00:14:14,050 --> 00:14:21,070
responsibility rule and then in the end

00:14:16,930 --> 00:14:22,630
the last line of the script is a sappy I

00:14:21,070 --> 00:14:26,470
don't know how to pronounce this but

00:14:22,630 --> 00:14:29,710
it's a emitter object that emits a

00:14:26,470 --> 00:14:33,280
response object so we create a new

00:14:29,710 --> 00:14:35,410
emitter and we pass on a PSR 7 response

00:14:33,280 --> 00:14:40,030
object and then it should output the

00:14:35,410 --> 00:14:44,190
headers output the body if we go look at

00:14:40,030 --> 00:14:47,110
the controller at the controller method

00:14:44,190 --> 00:14:50,560
there's a few lines here can you read

00:14:47,110 --> 00:14:53,310
this the quality is really bad I'm sorry

00:14:50,560 --> 00:14:56,080
for that so what i'm doing here is i'm

00:14:53,310 --> 00:14:59,740
getting the responder a quest object I'm

00:14:56,080 --> 00:15:04,120
changing the target and to api that

00:14:59,740 --> 00:15:07,270
github.com with HTTPS and port 443 and

00:15:04,120 --> 00:15:09,730
then i'm updating the request object I'm

00:15:07,270 --> 00:15:12,130
doing request with your right this year

00:15:09,730 --> 00:15:14,410
right and getting back and you request

00:15:12,130 --> 00:15:17,800
object that's because it's immutable if

00:15:14,410 --> 00:15:20,470
you don't do this it will fail then I'm

00:15:17,800 --> 00:15:23,290
going to use the guzzle client I'm going

00:15:20,470 --> 00:15:25,750
to send this PS r7 request I will get

00:15:23,290 --> 00:15:29,020
back response before passing on the

00:15:25,750 --> 00:15:31,060
response to the index of PHP file I will

00:15:29,020 --> 00:15:33,040
remove some headers the transfer

00:15:31,060 --> 00:15:36,339
encoding and content encoding

00:15:33,040 --> 00:15:40,089
this is because github API will return

00:15:36,339 --> 00:15:44,410
the object or return HTTP response with

00:15:40,089 --> 00:15:46,360
a chunked and a zipped body and it will

00:15:44,410 --> 00:15:49,180
add those headers as well so my client

00:15:46,360 --> 00:15:54,040
can decode them but I'm removing that

00:15:49,180 --> 00:16:02,740
just for simplicity so any idea what

00:15:54,040 --> 00:16:05,380
this will do the script wait no one it's

00:16:02,740 --> 00:16:08,380
a simple proxy script so anything that

00:16:05,380 --> 00:16:11,620
will be captured by the script will be

00:16:08,380 --> 00:16:16,959
forwarded to github API and then the

00:16:11,620 --> 00:16:19,839
response will be sent back so this is

00:16:16,959 --> 00:16:23,769
what I get from the root of this

00:16:19,839 --> 00:16:27,459
application and if I let's say request

00:16:23,769 --> 00:16:29,889
repos / symphony / symphony I will get a

00:16:27,459 --> 00:16:31,870
request object a response object back

00:16:29,889 --> 00:16:37,060
with all the information of symphony

00:16:31,870 --> 00:16:41,550
repo so that's what it does and in the

00:16:37,060 --> 00:16:45,040
meantime I also added something sneaky I

00:16:41,550 --> 00:16:46,810
added some get up authentication because

00:16:45,040 --> 00:16:51,149
otherwise if I would do this a lot of

00:16:46,810 --> 00:16:54,790
times i would get api api limit errors

00:16:51,149 --> 00:17:00,990
also if you look at this in the browser

00:16:54,790 --> 00:17:05,439
tab this is not really visible for you

00:17:00,990 --> 00:17:08,770
but there's a lot of Heather's right

00:17:05,439 --> 00:17:10,959
here like the X github request ID header

00:17:08,770 --> 00:17:12,880
those are still there I didn't remove

00:17:10,959 --> 00:17:18,490
them I just passed them on to my rip

00:17:12,880 --> 00:17:24,459
response so it's a super simple proxy

00:17:18,490 --> 00:17:28,270
let's go back to my slides what else is

00:17:24,459 --> 00:17:32,650
new in goes of version 6 promises anyone

00:17:28,270 --> 00:17:37,620
familiar with promises in JavaScript ok

00:17:32,650 --> 00:17:42,820
cool so promises are not so new actually

00:17:37,620 --> 00:17:46,390
there were new since 500 but i will show

00:17:42,820 --> 00:17:46,870
you them anyway so promises in guzzle

00:17:46,390 --> 00:17:48,820
are

00:17:46,870 --> 00:17:51,870
also abstracted like the piers are seven

00:17:48,820 --> 00:17:55,740
objects into the guzzle HTTP / promised

00:17:51,870 --> 00:17:57,850
package so you can reuse it anytime

00:17:55,740 --> 00:18:01,540
basically there's a couple of more

00:17:57,850 --> 00:18:03,820
methods on the clients except for sent

00:18:01,540 --> 00:18:06,430
this request object there's also sent

00:18:03,820 --> 00:18:09,040
async sent a thing will return your

00:18:06,430 --> 00:18:12,910
promise which you can then manipulate to

00:18:09,040 --> 00:18:15,160
get the to get response out of it so you

00:18:12,910 --> 00:18:18,820
can do promise then give it a call back

00:18:15,160 --> 00:18:21,550
and in the end before your index of PHP

00:18:18,820 --> 00:18:23,500
script ends you should always wait for

00:18:21,550 --> 00:18:25,900
the problems to finish because otherwise

00:18:23,500 --> 00:18:28,300
your index of PHP script has ended

00:18:25,900 --> 00:18:31,870
before your response has ever come back

00:18:28,300 --> 00:18:34,300
and in this callback you can type into

00:18:31,870 --> 00:18:36,490
response interface it will ever to give

00:18:34,300 --> 00:18:39,640
you a response object and then you can

00:18:36,490 --> 00:18:43,240
use it so in our second demo we will

00:18:39,640 --> 00:18:50,140
manipulate the previous example to use

00:18:43,240 --> 00:18:59,530
async calls the index of PHP script is

00:18:50,140 --> 00:19:01,730
that is exactly the same oops safety

00:18:59,530 --> 00:19:05,390
first

00:19:01,730 --> 00:19:09,410
so we call this controller with this

00:19:05,390 --> 00:19:12,620
index method and right here we do send a

00:19:09,410 --> 00:19:17,830
sink sent a sink will return promise we

00:19:12,620 --> 00:19:20,510
will use promise then oops promise then

00:19:17,830 --> 00:19:23,390
type into response interface as the

00:19:20,510 --> 00:19:26,360
first argument of d of the call back and

00:19:23,390 --> 00:19:30,710
then we will remove these headers set

00:19:26,360 --> 00:19:33,740
response in the disp response attribute

00:19:30,710 --> 00:19:36,050
and in the end we will wait for for the

00:19:33,740 --> 00:19:40,700
promise to resolve and return the

00:19:36,050 --> 00:19:47,350
response will this work changing the

00:19:40,700 --> 00:19:55,010
port and it does we can also request

00:19:47,350 --> 00:19:56,930
some user objects like Derek hi Derek so

00:19:55,010 --> 00:20:00,800
we can still do the same thing but it's

00:19:56,930 --> 00:20:04,040
a sink I haven't proved this yet but you

00:20:00,800 --> 00:20:09,800
have to believe me for now I will prove

00:20:04,040 --> 00:20:13,310
you so oh yeah you can also do multiple

00:20:09,800 --> 00:20:15,980
requests why why would we else do

00:20:13,310 --> 00:20:19,130
multiple do a singles if we don't do

00:20:15,980 --> 00:20:21,800
multiple at the same time so the third

00:20:19,130 --> 00:20:25,370
demo will do multiple requests at the

00:20:21,800 --> 00:20:27,950
same time so again this is the same

00:20:25,370 --> 00:20:33,590
index dot PHP file with a controller

00:20:27,950 --> 00:20:36,560
which will take an array of github user

00:20:33,590 --> 00:20:41,200
names and then it will fetch them all at

00:20:36,560 --> 00:20:45,800
the same time and return the response so

00:20:41,200 --> 00:20:51,200
can I see some familiar faces Kayla I'm

00:20:45,800 --> 00:20:54,140
going to add you to the list and I will

00:20:51,200 --> 00:20:57,500
fetch your user profile so right here

00:20:54,140 --> 00:20:59,600
I'm looping the user names and I'm

00:20:57,500 --> 00:21:02,930
sending off a lot of requests I'm

00:20:59,600 --> 00:21:07,040
getting an array of promises back and

00:21:02,930 --> 00:21:09,500
with this all method ghazal HTTP promise

00:21:07,040 --> 00:21:12,380
all methods I can pass in an array of

00:21:09,500 --> 00:21:13,460
promises and I will get back one single

00:21:12,380 --> 00:21:18,540
promise

00:21:13,460 --> 00:21:22,050
and I can wait for this prompts to be

00:21:18,540 --> 00:21:24,870
resolved and give it a callback which

00:21:22,050 --> 00:21:28,200
will take an array of responses all

00:21:24,870 --> 00:21:32,670
these response objects come back in the

00:21:28,200 --> 00:21:34,830
same order as when you like wait these

00:21:32,670 --> 00:21:38,280
response objects will be in the same

00:21:34,830 --> 00:21:40,650
order as the order of the promises that

00:21:38,280 --> 00:21:42,930
you entered in this all method so that's

00:21:40,650 --> 00:21:45,960
pretty useful and you only have to wait

00:21:42,930 --> 00:21:49,380
once for one promise which is the global

00:21:45,960 --> 00:21:51,630
promise right and after that I will

00:21:49,380 --> 00:21:54,870
create a new response Jason and go to

00:21:51,630 --> 00:21:57,480
all these profiles at the content type

00:21:54,870 --> 00:21:59,550
application / Jason header and send it

00:21:57,480 --> 00:22:06,300
back to the index PHP script which will

00:21:59,550 --> 00:22:09,450
render it cool third demo nice one two

00:22:06,300 --> 00:22:13,020
three four user objects from the github

00:22:09,450 --> 00:22:17,250
API the first one is my boss yes github

00:22:13,020 --> 00:22:19,860
user ID 4200 which is pretty low he was

00:22:17,250 --> 00:22:23,910
an early adopter Derek yours is a bit

00:22:19,860 --> 00:22:27,960
higher but still low good so we did for

00:22:23,910 --> 00:22:31,650
requests at the same time async which is

00:22:27,960 --> 00:22:34,590
good which is fast right now you still

00:22:31,650 --> 00:22:38,960
have to believe me I haven't proved it

00:22:34,590 --> 00:22:45,000
yet what else is new and goes off v6

00:22:38,960 --> 00:22:51,110
let's see before ghazal v6 we had events

00:22:45,000 --> 00:22:55,890
like the response has come back event or

00:22:51,110 --> 00:22:58,260
a progress event and those were all

00:22:55,890 --> 00:23:01,350
emitted to fear the emitter interface

00:22:58,260 --> 00:23:02,880
and you could write subscribers and

00:23:01,350 --> 00:23:08,310
those who would listen to these events

00:23:02,880 --> 00:23:11,550
and so that is all gone but now we have

00:23:08,310 --> 00:23:14,040
middlewares gullible middlewares middle

00:23:11,550 --> 00:23:18,900
words which are in fact functions and

00:23:14,040 --> 00:23:21,150
think that's callable so a callable

00:23:18,900 --> 00:23:23,790
looks like this it's a blob of code and

00:23:21,150 --> 00:23:26,490
there's two lines which are important

00:23:23,790 --> 00:23:29,160
this line says all the requests

00:23:26,490 --> 00:23:31,440
if you want to you can alter a request

00:23:29,160 --> 00:23:34,500
object before sending it off with girl

00:23:31,440 --> 00:23:38,670
or something to the to the exit to the

00:23:34,500 --> 00:23:41,309
HTTP server afterwards you can alter the

00:23:38,670 --> 00:23:43,590
response you get you got back if you

00:23:41,309 --> 00:23:45,480
want to you don't have to you can do

00:23:43,590 --> 00:23:49,260
either of those you can do none of those

00:23:45,480 --> 00:23:52,110
or you can do both of those and there's

00:23:49,260 --> 00:23:53,670
a couple of this is a big pile of code

00:23:52,110 --> 00:23:55,620
you don't want to write that yourself

00:23:53,670 --> 00:23:58,770
there so there's a couple of helpers

00:23:55,620 --> 00:24:02,130
there's a middleware map-request middle

00:23:58,770 --> 00:24:05,790
there which takes a gullible which you

00:24:02,130 --> 00:24:08,070
can use to edit a request before sending

00:24:05,790 --> 00:24:10,950
it off there's also the map response

00:24:08,070 --> 00:24:13,320
midler so you can edit the response

00:24:10,950 --> 00:24:17,280
before returning it back to the one who

00:24:13,320 --> 00:24:20,040
did this send method on the client so

00:24:17,280 --> 00:24:22,590
there's also the par-3 logger middle er

00:24:20,040 --> 00:24:24,840
which is pretty useful so you can output

00:24:22,590 --> 00:24:28,650
whatever request has been sent off to

00:24:24,840 --> 00:24:30,750
the server to a monologue or whatever

00:24:28,650 --> 00:24:34,800
implementation of the PSR logger

00:24:30,750 --> 00:24:39,870
interface how should you use those

00:24:34,800 --> 00:24:42,300
actually the client Newcastle clients

00:24:39,870 --> 00:24:46,590
will initiate in its constructor a

00:24:42,300 --> 00:24:48,660
handler stack static method to create by

00:24:46,590 --> 00:24:50,580
default this has a couple of

00:24:48,660 --> 00:24:54,360
middle-earth like a redirect middleware

00:24:50,580 --> 00:24:56,730
if a fear response has a trio to status

00:24:54,360 --> 00:25:01,710
code it will fetch the secondary request

00:24:56,730 --> 00:25:04,730
as well there's a couple of more like

00:25:01,710 --> 00:25:08,130
HTTP address middleware so if your

00:25:04,730 --> 00:25:09,870
response will be a 400 something or 500

00:25:08,130 --> 00:25:12,030
something it will actually throw an

00:25:09,870 --> 00:25:14,970
exception you can also leave them out as

00:25:12,030 --> 00:25:18,330
well if you want to actually catch that

00:25:14,970 --> 00:25:20,820
yourself so handlers that create will

00:25:18,330 --> 00:25:22,980
create a stack of middle-earth gullible

00:25:20,820 --> 00:25:24,750
middle-earth and you can add to them

00:25:22,980 --> 00:25:32,340
with the push method the unshifted

00:25:24,750 --> 00:25:35,120
remove method so demo time we will use

00:25:32,340 --> 00:25:35,120
middlewares

00:25:35,990 --> 00:25:47,490
index 2.php let's see we have again an

00:25:44,300 --> 00:25:49,920
index PHP file but right now we are

00:25:47,490 --> 00:25:53,250
going to use debug bar and I want

00:25:49,920 --> 00:25:55,170
familiar with debug bar okay it's for

00:25:53,250 --> 00:25:56,850
profiling your application and seeing

00:25:55,170 --> 00:26:00,660
what exceptions have been thrown and

00:25:56,850 --> 00:26:03,980
what sequels sequel queries have been

00:26:00,660 --> 00:26:07,050
executed and stuff you can all always

00:26:03,980 --> 00:26:11,220
append to that it also it also has a

00:26:07,050 --> 00:26:17,010
timeline function or a timeline data I

00:26:11,220 --> 00:26:19,350
know how it's called it's a data I don't

00:26:17,010 --> 00:26:21,870
know so it has a timeline so you can do

00:26:19,350 --> 00:26:23,820
some profiling you can say this event

00:26:21,870 --> 00:26:29,760
started here and it ended here so it

00:26:23,820 --> 00:26:32,520
took so long right here I'm setting this

00:26:29,760 --> 00:26:35,160
up I'm setting up the debug bar and I'm

00:26:32,520 --> 00:26:38,580
creating a new middle we're wrapping it

00:26:35,160 --> 00:26:42,060
inside a debugger profiler object inside

00:26:38,580 --> 00:26:45,720
a middleware so we can pass on the time

00:26:42,060 --> 00:26:48,990
collector to a middleware which for

00:26:45,720 --> 00:26:51,210
every request will add a new event a

00:26:48,990 --> 00:26:55,290
start event and an end event to dust to

00:26:51,210 --> 00:26:57,630
that timeline so if we do the same thing

00:26:55,290 --> 00:27:01,800
as before we use the same controller and

00:26:57,630 --> 00:27:06,330
same methods so we do we loop a couple

00:27:01,800 --> 00:27:08,520
of usernames we get back an array of

00:27:06,330 --> 00:27:10,860
promises and we resolve them all and

00:27:08,520 --> 00:27:13,980
then we will write the output the output

00:27:10,860 --> 00:27:16,710
is just some HTML yes I write HTML

00:27:13,980 --> 00:27:20,160
inside my controller don't do this at

00:27:16,710 --> 00:27:23,070
home but I'm doing this to output all of

00:27:20,160 --> 00:27:24,690
the debug board javascript and stuff but

00:27:23,070 --> 00:27:28,020
basically you would use to make or

00:27:24,690 --> 00:27:31,350
something so and then I returned it with

00:27:28,020 --> 00:27:37,100
constant type text slash HTML so we

00:27:31,350 --> 00:27:37,100
should see an HTML with some useful data

00:27:39,170 --> 00:27:47,890
cool so right here we have free user

00:27:44,360 --> 00:27:50,590
avatars the one from Derek my boss and

00:27:47,890 --> 00:27:53,740
Gary Hagen and in the bottom we will see

00:27:50,590 --> 00:27:57,880
a debug bar which will show us that all

00:27:53,740 --> 00:28:01,680
these requests have been executed a

00:27:57,880 --> 00:28:05,980
synchronously the one the first one took

00:28:01,680 --> 00:28:08,230
376 milliseconds the third one also in

00:28:05,980 --> 00:28:10,810
that order of magnitude and they all

00:28:08,230 --> 00:28:13,270
executed within four hundred and nine

00:28:10,810 --> 00:28:14,920
milliseconds if you would do them

00:28:13,270 --> 00:28:17,290
sequentially it would take more than a

00:28:14,920 --> 00:28:20,380
second so that's a big win I prove to

00:28:17,290 --> 00:28:29,980
you that we can do a sink in PHP very

00:28:20,380 --> 00:28:32,440
good are we glad yeah cool so as a recap

00:28:29,980 --> 00:28:36,040
for this chapter we talked about what is

00:28:32,440 --> 00:28:39,450
new in PES ours not peers or six but

00:28:36,040 --> 00:28:41,920
guzzle version 6 and that's it uses

00:28:39,450 --> 00:28:44,440
peers are seven objects it uses

00:28:41,920 --> 00:28:52,870
middlewares instead of events and it can

00:28:44,440 --> 00:28:55,500
do async using promises how am i doing

00:28:52,870 --> 00:28:55,500
it in time

00:28:56,110 --> 00:29:02,860
just correct oh yeah i still have turned

00:28:59,559 --> 00:29:06,400
in minutes cool so peers are seven

00:29:02,860 --> 00:29:10,330
usages we can use this outside of HTTP

00:29:06,400 --> 00:29:14,170
clients as well but let's first talk

00:29:10,330 --> 00:29:19,000
about older HTTP clients a lot of people

00:29:14,170 --> 00:29:21,970
still use or still use they use for

00:29:19,000 --> 00:29:25,179
example as end one HTTP client or Zen to

00:29:21,970 --> 00:29:30,340
HTTP client or buzz buzz is a different

00:29:25,179 --> 00:29:32,919
HTTP client so what can we do to provide

00:29:30,340 --> 00:29:36,730
them the ability to use peers are seven

00:29:32,919 --> 00:29:41,110
request objects to make HTTP calls to a

00:29:36,730 --> 00:29:44,110
server we can perhaps decouple from HTTP

00:29:41,110 --> 00:29:46,900
client so for example you're writing an

00:29:44,110 --> 00:29:49,660
SDK for your awesome website because

00:29:46,900 --> 00:29:53,169
you're a developer for some cool start

00:29:49,660 --> 00:29:55,900
up like digitalocean no that's no longer

00:29:53,169 --> 00:29:57,429
startup but let's say you have a

00:29:55,900 --> 00:30:00,549
start-up you want to write an essay case

00:29:57,429 --> 00:30:02,230
so people can start using your API so if

00:30:00,549 --> 00:30:05,440
you're writing an essay for get up slack

00:30:02,230 --> 00:30:07,690
hipchat digitalocean or whatever you

00:30:05,440 --> 00:30:10,330
want to use an HTTP client what do you

00:30:07,690 --> 00:30:14,919
do is start writing your package or sdk

00:30:10,330 --> 00:30:18,250
client your SDK and you need an HTTP

00:30:14,919 --> 00:30:20,380
client right you type into your terminal

00:30:18,250 --> 00:30:23,770
compose the required ghazal HTTP /

00:30:20,380 --> 00:30:27,130
guzzle because we all want to use guzzle

00:30:23,770 --> 00:30:30,630
but some people will cry they won't use

00:30:27,130 --> 00:30:33,490
your SDK why because they might be using

00:30:30,630 --> 00:30:37,720
guzzle version 5 instead of version 6

00:30:33,490 --> 00:30:40,809
that conflicts you cannot install to

00:30:37,720 --> 00:30:43,290
measure different versions of the same

00:30:40,809 --> 00:30:47,230
package it's not possible in PHP or

00:30:43,290 --> 00:30:50,530
maybe they're using zentz HTTP client so

00:30:47,230 --> 00:30:52,720
they won't be able to use your SDK how

00:30:50,530 --> 00:30:57,220
can you solve this you can solve this by

00:30:52,720 --> 00:30:59,230
decoupling from the HTTP coins so

00:30:57,220 --> 00:31:01,809
there's a couple of HTTP glides out

00:30:59,230 --> 00:31:04,050
there that are not using PSR seven

00:31:01,809 --> 00:31:06,790
request objects not yet because there

00:31:04,050 --> 00:31:08,550
they have been written before PS or

00:31:06,790 --> 00:31:11,940
seven was even a thing

00:31:08,550 --> 00:31:18,270
so the coupling from the HTTP client how

00:31:11,940 --> 00:31:21,390
should we do it interfaces it's all

00:31:18,270 --> 00:31:25,110
about interfaces let's say there's an

00:31:21,390 --> 00:31:27,660
interface called HTTP adapter which is

00:31:25,110 --> 00:31:31,410
an adapter so you can wrap any type of

00:31:27,660 --> 00:31:33,510
HTTP client and pass it on ap sr7

00:31:31,410 --> 00:31:37,140
request object and get a risk response

00:31:33,510 --> 00:31:40,380
object back actually there's already a

00:31:37,140 --> 00:31:45,060
thing for that it's called PHP dash HTTP

00:31:40,380 --> 00:31:50,150
/ HTTP blog a lot of ppt t it's hard to

00:31:45,060 --> 00:31:54,360
pronounce so PHP HTTP HTTP plug cool

00:31:50,150 --> 00:31:56,550
what do we do if we're riding on SDK we

00:31:54,360 --> 00:32:00,360
should edit or composed of JSON file

00:31:56,550 --> 00:32:05,760
manually sorry with we should add to the

00:32:00,360 --> 00:32:09,870
required block that a PHP HTTP client

00:32:05,760 --> 00:32:12,590
dash implementation recognize the dash

00:32:09,870 --> 00:32:15,660
implementation we've seen that with

00:32:12,590 --> 00:32:18,990
peers r / h be messaged implementation

00:32:15,660 --> 00:32:22,440
so it's a virtual package we will

00:32:18,990 --> 00:32:25,680
require people that install or SDK to

00:32:22,440 --> 00:32:30,740
also install a package that provides

00:32:25,680 --> 00:32:33,330
this implementation so if we create an

00:32:30,740 --> 00:32:36,420
actual implementation of that like for

00:32:33,330 --> 00:32:38,880
guzzle six then we add to the compositor

00:32:36,420 --> 00:32:42,150
JSON file a provide block and this

00:32:38,880 --> 00:32:46,650
provided block will have a PHP HTTP /

00:32:42,150 --> 00:32:49,140
client implementation tag so composer

00:32:46,650 --> 00:32:50,940
Dodge composer will know that this

00:32:49,140 --> 00:32:54,090
package actually provides an

00:32:50,940 --> 00:32:58,110
implementation for the interfaces inside

00:32:54,090 --> 00:33:00,000
the client package good so there's a

00:32:58,110 --> 00:33:03,240
couple of adapters for that there's

00:33:00,000 --> 00:33:06,420
ghazal 6 goes of 5 there's already a

00:33:03,240 --> 00:33:08,130
react adapter a socket clients crow

00:33:06,420 --> 00:33:10,730
client and a mock client that's useful

00:33:08,130 --> 00:33:13,560
for testing but all the others

00:33:10,730 --> 00:33:16,500
technically you can write those you can

00:33:13,560 --> 00:33:18,509
add those if you're using Zen to you can

00:33:16,500 --> 00:33:25,919
write your own adapter for it

00:33:18,509 --> 00:33:31,860
so imagine I'm a user I'm using your SDK

00:33:25,919 --> 00:33:35,139
it says here require your awesome SDK

00:33:31,860 --> 00:33:39,429
but also i'm stuck to guzzle 54 know

00:33:35,139 --> 00:33:42,340
what should i do right now i can already

00:33:39,429 --> 00:33:46,240
start using your awesome sdk by also

00:33:42,340 --> 00:33:49,240
installing the PHP HTTP guzzle 5 adapter

00:33:46,240 --> 00:33:52,509
which is cool i can still use ghazal 5 I

00:33:49,240 --> 00:33:55,059
don't have to upgrade my application I

00:33:52,509 --> 00:33:58,720
don't have to upgrade my bindings to my

00:33:55,059 --> 00:34:01,960
ioc container I just have to add this

00:33:58,720 --> 00:34:05,440
adapter wrap ghazal version 5 in it and

00:34:01,960 --> 00:34:08,829
then give it up give it to my SDK super

00:34:05,440 --> 00:34:10,720
awesome what if a couple of weeks down

00:34:08,829 --> 00:34:13,200
the road your employer says here's a

00:34:10,720 --> 00:34:15,460
week time to resolve all those

00:34:13,200 --> 00:34:17,589
dependencies and refactor the

00:34:15,460 --> 00:34:20,859
applications so that it now you can use

00:34:17,589 --> 00:34:23,409
guzzle version 6 okay you write some

00:34:20,859 --> 00:34:25,119
code and you change the usage of guzzle

00:34:23,409 --> 00:34:27,639
so you can use ghazal six instead of

00:34:25,119 --> 00:34:31,299
course of five but what should you do

00:34:27,639 --> 00:34:34,270
with it cuz of five adapter easy you

00:34:31,299 --> 00:34:36,129
swap out cuz of five with version 6 and

00:34:34,270 --> 00:34:39,220
you swap out cuz all five adapter rich

00:34:36,129 --> 00:34:45,790
causal sex adapter super easy that's the

00:34:39,220 --> 00:34:48,059
coupling how it should be this is how

00:34:45,790 --> 00:34:51,369
your awesome as the K client looks like

00:34:48,059 --> 00:34:57,400
or at least the constructor it has a

00:34:51,369 --> 00:35:00,160
constructor which takes a HTTP adapter

00:34:57,400 --> 00:35:03,339
interface object in this case it's a

00:35:00,160 --> 00:35:06,369
ghazal 6 adapter which will take which

00:35:03,339 --> 00:35:09,960
will wrap a guzzle 6 client super cool

00:35:06,369 --> 00:35:13,059
that's the coupling everyone's happy

00:35:09,960 --> 00:35:20,470
everyone is using your SDK and your boss

00:35:13,059 --> 00:35:25,660
is happy too now we're all developers at

00:35:20,470 --> 00:35:28,750
least I think we most of us use symphony

00:35:25,660 --> 00:35:30,230
or Symphony related stuff like their

00:35:28,750 --> 00:35:34,490
valor what

00:35:30,230 --> 00:35:37,280
slim or micro framework that Symphony

00:35:34,490 --> 00:35:40,580
based so what about existing symphony

00:35:37,280 --> 00:35:43,250
request and response objects can we

00:35:40,580 --> 00:35:44,720
still use them yes of course we can do

00:35:43,250 --> 00:35:46,910
we have to refactor our entire

00:35:44,720 --> 00:35:49,760
application to use br7 request and

00:35:46,910 --> 00:35:51,920
response objects no we don't we can use

00:35:49,760 --> 00:35:54,710
this bridge package the symphony peers

00:35:51,920 --> 00:35:57,560
are HTTP message bridge package which

00:35:54,710 --> 00:36:00,470
will conveniently and convert your

00:35:57,560 --> 00:36:02,660
request and response object back and

00:36:00,470 --> 00:36:08,000
forth to the other seven request and

00:36:02,660 --> 00:36:10,760
response object super easy in fact it's

00:36:08,000 --> 00:36:13,040
type hinted SPS are HTTP message

00:36:10,760 --> 00:36:15,500
requests interface and response

00:36:13,040 --> 00:36:18,290
interface but actually it will return a

00:36:15,500 --> 00:36:21,170
sense implementation good to know but

00:36:18,290 --> 00:36:25,580
you can still type int it as a bizarre

00:36:21,170 --> 00:36:28,340
request interface object cool what about

00:36:25,580 --> 00:36:32,480
middlewares in your applications your

00:36:28,340 --> 00:36:35,840
current applications symphony

00:36:32,480 --> 00:36:38,630
applications have a notice of something

00:36:35,840 --> 00:36:44,210
called HTTP kernel and unfamiliar with

00:36:38,630 --> 00:36:50,359
HTTP kernels only a few hands okay so a

00:36:44,210 --> 00:36:54,650
kernel is actually imagine your

00:36:50,359 --> 00:36:59,390
application as an onion this is the

00:36:54,650 --> 00:37:02,990
onion graph so each layer doesn't need

00:36:59,390 --> 00:37:06,320
to know what's inside the other yet

00:37:02,990 --> 00:37:08,390
itself so each layer just knows the next

00:37:06,320 --> 00:37:11,359
layer is an HTTP colonel what it does

00:37:08,390 --> 00:37:14,500
what it actually does it doesn't matter

00:37:11,359 --> 00:37:16,910
it just passes on the request object

00:37:14,500 --> 00:37:20,359
optionally changes it before passing it

00:37:16,910 --> 00:37:23,450
on to the next layer and after it get it

00:37:20,359 --> 00:37:26,690
back it gets a response object back it

00:37:23,450 --> 00:37:29,150
can optionally again alter your response

00:37:26,690 --> 00:37:32,960
object and pass it on to the index PHP

00:37:29,150 --> 00:37:35,960
script which will eventually render this

00:37:32,960 --> 00:37:37,730
response so there's a couple of

00:37:35,960 --> 00:37:40,130
implementations or there's a couple of

00:37:37,730 --> 00:37:43,330
possibilities with this you can write a

00:37:40,130 --> 00:37:47,320
session layer or an authentication layer

00:37:43,330 --> 00:37:49,840
or let's say a troubling layer if a lot

00:37:47,320 --> 00:37:53,020
of people are requesting your API you

00:37:49,840 --> 00:37:54,670
want to put an api api limiter on it you

00:37:53,020 --> 00:37:56,410
can do that in a layer for your

00:37:54,670 --> 00:38:00,940
application it doesn't need to know what

00:37:56,410 --> 00:38:05,380
your application does it can just reject

00:38:00,940 --> 00:38:07,600
people from requesting stuff by limiting

00:38:05,380 --> 00:38:14,560
the amount of requests for a minute or

00:38:07,600 --> 00:38:18,400
per hour or whatever so this notion is

00:38:14,560 --> 00:38:21,550
also available in PS r7 a couple of

00:38:18,400 --> 00:38:24,700
bright minds have defined an interface

00:38:21,550 --> 00:38:28,090
for a callable middle ear in in PS r7

00:38:24,700 --> 00:38:31,030
requests world and it's like this it's a

00:38:28,090 --> 00:38:33,160
function which takes three arguments the

00:38:31,030 --> 00:38:35,200
first is the request interface the

00:38:33,160 --> 00:38:37,960
second is the response interface object

00:38:35,200 --> 00:38:40,060
and the last one is the gullible the

00:38:37,960 --> 00:38:42,370
next the next middle ER doesn't need to

00:38:40,060 --> 00:38:45,060
know what it looks like it's just a

00:38:42,370 --> 00:38:48,040
callable so if you're implementing this

00:38:45,060 --> 00:38:51,280
you can alter the request before sending

00:38:48,040 --> 00:38:53,620
it off to the next middle ER if you want

00:38:51,280 --> 00:38:55,570
to you don't have to you can also alter

00:38:53,620 --> 00:38:58,090
your response after you got it back from

00:38:55,570 --> 00:39:00,430
the previous middleware you can alter it

00:38:58,090 --> 00:39:03,130
before sending it back to the into the

00:39:00,430 --> 00:39:04,750
previous middleware you also you also

00:39:03,130 --> 00:39:08,710
don't have to know what the previous

00:39:04,750 --> 00:39:11,910
middleware is there's a couple of

00:39:08,710 --> 00:39:15,130
implement implementation usages for this

00:39:11,910 --> 00:39:17,050
pattern of application development you

00:39:15,130 --> 00:39:20,410
can have one first middle of a session

00:39:17,050 --> 00:39:24,840
for logging for authentication for

00:39:20,410 --> 00:39:29,460
caching for firewalls for cross-site

00:39:24,840 --> 00:39:35,650
headers for coupling and also for

00:39:29,460 --> 00:39:38,680
robots.txt file robots that the xt file

00:39:35,650 --> 00:39:39,970
why is that not just a file maybe your

00:39:38,680 --> 00:39:42,610
application runs in different

00:39:39,970 --> 00:39:46,030
environments like staging or production

00:39:42,610 --> 00:39:51,790
you don't want your you don't want

00:39:46,030 --> 00:39:53,950
Google to yeah search your site if it's

00:39:51,790 --> 00:39:56,650
just in staging you don't want it to be

00:39:53,950 --> 00:39:58,329
indexed that's why you

00:39:56,650 --> 00:40:00,549
can add the simple layer around your

00:39:58,329 --> 00:40:02,740
application which will catch that if

00:40:00,549 --> 00:40:06,250
it's robot at the xterra quest it will

00:40:02,740 --> 00:40:09,190
send back no this is staging don't index

00:40:06,250 --> 00:40:11,980
me or if its production it can say yeah

00:40:09,190 --> 00:40:15,640
go on index everything so that's a

00:40:11,980 --> 00:40:22,990
pretty useful midler in my opinion it's

00:40:15,640 --> 00:40:24,700
just an opinion so if you used if you

00:40:22,990 --> 00:40:26,529
are used to symphony application

00:40:24,700 --> 00:40:30,309
development you might have heard about

00:40:26,529 --> 00:40:33,910
the symphony colonel it is extended by

00:40:30,309 --> 00:40:36,579
the stack PHP middleware group or

00:40:33,910 --> 00:40:39,760
organization so you can use any type of

00:40:36,579 --> 00:40:43,990
stack PHP middleware with any type of

00:40:39,760 --> 00:40:47,349
symphony HTTP application but what about

00:40:43,990 --> 00:40:50,680
peers are seven requests cool there's a

00:40:47,349 --> 00:40:53,470
bridge for that so this guy hack I don't

00:40:50,680 --> 00:40:54,970
know how to pronounce first H for soup I

00:40:53,470 --> 00:40:57,849
don't know how to pronounce that hack

00:40:54,970 --> 00:41:01,539
slash stack peers are seven bridge uses

00:40:57,849 --> 00:41:04,089
the symphony peers are seven bridge to

00:41:01,539 --> 00:41:06,700
convert between symphony and PS are

00:41:04,089 --> 00:41:08,440
seven equation response objects pass it

00:41:06,700 --> 00:41:10,809
on to the next middle or which may be a

00:41:08,440 --> 00:41:13,230
symphony midler or a piece or seven

00:41:10,809 --> 00:41:16,539
miller it doesn't have to know you can

00:41:13,230 --> 00:41:19,089
you can conveniently build up your

00:41:16,539 --> 00:41:22,210
entire application which peers are seven

00:41:19,089 --> 00:41:24,670
middlewares or symphony middle layers or

00:41:22,210 --> 00:41:28,960
symphony course your actual application

00:41:24,670 --> 00:41:32,859
it's a symphony core or something like

00:41:28,960 --> 00:41:36,460
leak router which is a PSR seven core

00:41:32,859 --> 00:41:40,150
application you can conveniently model

00:41:36,460 --> 00:41:45,039
your entire application with those two

00:41:40,150 --> 00:41:47,319
types of middlewares cool so it's a

00:41:45,039 --> 00:41:49,990
conversion between stack meddlers and

00:41:47,319 --> 00:41:52,599
these are seven middlewares as a recap

00:41:49,990 --> 00:41:55,569
for this last chapter oh it's already

00:41:52,599 --> 00:41:58,900
the last chapter okay as a recap I

00:41:55,569 --> 00:42:01,450
talked about decoupling HTTP clients by

00:41:58,900 --> 00:42:03,940
using the HTTP adapter I talked about

00:42:01,450 --> 00:42:06,400
symphony objects and how to convert to

00:42:03,940 --> 00:42:08,049
peers are seven object and back and I

00:42:06,400 --> 00:42:10,460
also talked about application middle

00:42:08,049 --> 00:42:13,730
verse these are also members like

00:42:10,460 --> 00:42:16,820
middle-earth but somewhat different cool

00:42:13,730 --> 00:42:19,460
first chapter was PSR second one was

00:42:16,820 --> 00:42:21,080
guzzle and the third one was how to use

00:42:19,460 --> 00:42:28,670
PS are seven in your current

00:42:21,080 --> 00:42:32,330
applications cool time for questions we

00:42:28,670 --> 00:42:40,400
have plenty of time I won't go home

00:42:32,330 --> 00:42:47,720
before I got two questions please no not

00:42:40,400 --> 00:42:49,520
I demand questions sure well hello why

00:42:47,720 --> 00:42:53,660
did they decide to make it immutable for

00:42:49,520 --> 00:42:55,400
the response object I wasn't there when

00:42:53,660 --> 00:42:58,220
it was decided but i'm happy they

00:42:55,400 --> 00:43:00,849
decided it i can't speak on their behalf

00:42:58,220 --> 00:43:00,849
sorry

00:43:06,099 --> 00:43:12,579
I can see question marks on some

00:43:10,630 --> 00:43:19,660
people's faces so there are some

00:43:12,579 --> 00:43:21,960
questions yes can we get the mic over

00:43:19,660 --> 00:43:21,960
there

00:43:24,270 --> 00:43:36,600
I wanted to ask if you know why streams

00:43:32,880 --> 00:43:40,200
were put in the middle of all those

00:43:36,600 --> 00:43:42,930
things what is the added value there why

00:43:40,200 --> 00:43:46,470
aren't we doing like with the middle

00:43:42,930 --> 00:43:49,860
words just every request the results in

00:43:46,470 --> 00:43:52,020
response yeah but no there are streams

00:43:49,860 --> 00:43:54,840
in between so what's the added value

00:43:52,020 --> 00:43:58,890
there um it's actually a matter of

00:43:54,840 --> 00:44:00,840
performance you can I tried this and I

00:43:58,890 --> 00:44:04,680
could download an entire tree gigabyte

00:44:00,840 --> 00:44:06,990
is a file of ubuntu without loading a

00:44:04,680 --> 00:44:10,050
doll into memory we can actually now

00:44:06,990 --> 00:44:13,260
efficiently download stuff with PHP

00:44:10,050 --> 00:44:15,480
without bloating the memory so it's

00:44:13,260 --> 00:44:18,000
pretty useful but you might think are

00:44:15,480 --> 00:44:19,620
now I don't want to you seek and read in

00:44:18,000 --> 00:44:23,790
it's readable and all those methods

00:44:19,620 --> 00:44:26,790
there's also a two-string method which

00:44:23,790 --> 00:44:30,060
will conveniently put all the data into

00:44:26,790 --> 00:44:32,070
one blob of data or one string and give

00:44:30,060 --> 00:44:34,020
you back in one variable so you don't

00:44:32,070 --> 00:44:38,340
have to use the streams you can

00:44:34,020 --> 00:44:42,600
conveniently cause it to a string is

00:44:38,340 --> 00:44:48,050
that okay for you is that an answer to

00:44:42,600 --> 00:44:48,050
your question as well okay could be

00:44:51,100 --> 00:45:17,810
yes in the back um I think your question

00:45:15,590 --> 00:45:25,030
is if you're building an HTTP

00:45:17,810 --> 00:45:25,030
application right okay yep yep

00:45:29,940 --> 00:45:35,220
you're already using symphony request

00:45:32,700 --> 00:45:39,089
response object then I would suggest

00:45:35,220 --> 00:45:42,170
using the bridge package so whenever you

00:45:39,089 --> 00:45:46,050
need a peers are seven object you can

00:45:42,170 --> 00:45:48,410
transform a symphony object to the

00:45:46,050 --> 00:45:53,010
corresponding because our seven object

00:45:48,410 --> 00:45:55,319
if you are not using symphony already

00:45:53,010 --> 00:46:03,650
you can use zent package the zend

00:45:55,319 --> 00:46:03,650
package has let me see if I can so

00:46:05,359 --> 00:46:18,180
Christ okay all right here an index of

00:46:12,480 --> 00:46:21,599
PHP file you can see that ms zoom in we

00:46:18,180 --> 00:46:24,630
have a request factory right here which

00:46:21,599 --> 00:46:28,470
has a static method from Global's which

00:46:24,630 --> 00:46:32,210
will return a server request interface

00:46:28,470 --> 00:46:37,020
object so if you're not already using

00:46:32,210 --> 00:46:39,119
symphony to create a request object from

00:46:37,020 --> 00:46:42,329
Global's I suggest using this end

00:46:39,119 --> 00:46:44,490
package guzzle doesn't have this so

00:46:42,329 --> 00:46:47,660
you're actually forced uses and

00:46:44,490 --> 00:46:50,790
implementation but I suggest using this

00:46:47,660 --> 00:46:53,190
that an answer to your question yeah

00:46:50,790 --> 00:46:55,470
yeah and stood things well because we

00:46:53,190 --> 00:46:58,140
use them funny I see that the ghazal is

00:46:55,470 --> 00:47:00,630
juicer in active development so the

00:46:58,140 --> 00:47:04,589
project is not dying that I think Gaza

00:47:00,630 --> 00:47:06,900
is a peasant yes thanks guzzle is what I

00:47:04,589 --> 00:47:09,450
gazals use the best I mean either in

00:47:06,900 --> 00:47:12,869
active development so in future should

00:47:09,450 --> 00:47:15,030
be keep polishing so should be fine yeah

00:47:12,869 --> 00:47:19,109
actually I have to warn you because

00:47:15,030 --> 00:47:21,960
guzzle days are seven doesn't have any

00:47:19,109 --> 00:47:24,030
server requests interface implementation

00:47:21,960 --> 00:47:25,740
so if you want to access the super

00:47:24,030 --> 00:47:30,950
Global's you have to use this and

00:47:25,740 --> 00:47:30,950
implementation okay I gotta change

00:47:32,090 --> 00:47:37,130
what questions hiya um I was actually

00:47:35,150 --> 00:47:39,860
came in late so apologies if this is

00:47:37,130 --> 00:47:42,400
autumn in carbon no problem um but am i

00:47:39,860 --> 00:47:45,890
right in saying but PSR 7 only defines

00:47:42,400 --> 00:47:47,060
interfaces and no code exactly so if you

00:47:45,890 --> 00:47:49,010
want to actually send an HTTP request

00:47:47,060 --> 00:47:52,160
you have to use ghazal or something else

00:47:49,010 --> 00:47:56,120
even to yeah it doesn't it doesn't even

00:47:52,160 --> 00:48:00,410
define HTTP clients it just defines data

00:47:56,120 --> 00:48:04,370
objects interfaces so it doesn't define

00:48:00,410 --> 00:48:08,570
a base for an application or for an HP

00:48:04,370 --> 00:48:13,220
clients it just for D it just holds the

00:48:08,570 --> 00:48:15,170
data which represents your message the

00:48:13,220 --> 00:48:18,200
message you sent over the HTTP protocol

00:48:15,170 --> 00:48:21,860
protocol that's the only thing that's

00:48:18,200 --> 00:48:24,370
defining peers are the beers are

00:48:21,860 --> 00:48:27,260
packaged but there's a whole lot of

00:48:24,370 --> 00:48:28,910
packages that use it tomorrow if you

00:48:27,260 --> 00:48:31,340
want to actually send a request there's

00:48:28,910 --> 00:48:34,160
no PS are seven standard for a client as

00:48:31,340 --> 00:48:37,820
such just for requests themselves no but

00:48:34,160 --> 00:48:40,610
there's an abstracted interface so you

00:48:37,820 --> 00:48:44,950
can wrap it wrap existing HTTP clients

00:48:40,610 --> 00:48:47,390
to use PS are seven ok thank you ok

00:48:44,950 --> 00:48:55,850
alright there's one thing I want to add

00:48:47,390 --> 00:49:04,370
to that comes remember sorry Oh have you

00:48:55,850 --> 00:49:06,770
seen this I made a middleware or i use a

00:49:04,370 --> 00:49:09,680
environment variable which is the github

00:49:06,770 --> 00:49:11,900
token to add authorization to every

00:49:09,680 --> 00:49:15,320
request i send off to the API of github

00:49:11,900 --> 00:49:19,820
so that's also a middleware I could have

00:49:15,320 --> 00:49:22,550
done this inside every single controller

00:49:19,820 --> 00:49:25,370
but i decided to inject it into the

00:49:22,550 --> 00:49:27,470
causal client before injecting it into

00:49:25,370 --> 00:49:34,790
the controller so you can do anything

00:49:27,470 --> 00:49:39,130
with with middlewares ok no more

00:49:34,790 --> 00:49:39,130
questions or 12

00:49:42,940 --> 00:49:48,880
yes do you have anything with the google

00:49:46,480 --> 00:49:53,740
custom source and being custom source as

00:49:48,880 --> 00:49:57,339
well like um sorry well maybe I'm taking

00:49:53,740 --> 00:50:01,420
in a other way but if I need to make a

00:49:57,339 --> 00:50:05,530
you know an sdp request to Google custom

00:50:01,420 --> 00:50:08,740
source and being custom source is that

00:50:05,530 --> 00:50:13,180
no it's familiar to me is that HTTP HTTP

00:50:08,740 --> 00:50:16,240
yet it is then you should be able to use

00:50:13,180 --> 00:50:19,359
this so the credential like for example

00:50:16,240 --> 00:50:22,630
here you are using get right so the

00:50:19,359 --> 00:50:25,569
credential you passing is is that like a

00:50:22,630 --> 00:50:29,560
sista API key normally Google and being

00:50:25,569 --> 00:50:32,440
they use to to to type of credential one

00:50:29,560 --> 00:50:34,930
is API key dollar is like client ID sort

00:50:32,440 --> 00:50:37,540
of thing yeah you can you can add any

00:50:34,930 --> 00:50:42,510
header or whatever how its modeled by

00:50:37,540 --> 00:50:45,520
Google or whatever service you can even

00:50:42,510 --> 00:50:48,609
you can even adjust this client use

00:50:45,520 --> 00:50:54,450
client certificates in all of that so

00:50:48,609 --> 00:50:59,260
it's perfectly possible okay um thanks

00:50:54,450 --> 00:51:02,140
there was one more right here yeah not a

00:50:59,260 --> 00:51:05,800
question again I waited at the last for

00:51:02,140 --> 00:51:07,930
that reason found your examples quite

00:51:05,800 --> 00:51:13,750
interesting your slides available

00:51:07,930 --> 00:51:17,400
anywhere a u.s. slides are available yes

00:51:13,750 --> 00:51:25,329
on speaker Decker calm / my username I

00:51:17,400 --> 00:51:27,460
will wait there's a joint then link you

00:51:25,329 --> 00:51:29,200
can leave feedback and on that joint

00:51:27,460 --> 00:51:35,220
then link there will be a link to my

00:51:29,200 --> 00:51:35,220

YouTube URL: https://www.youtube.com/watch?v=gOVALgpqHzM


