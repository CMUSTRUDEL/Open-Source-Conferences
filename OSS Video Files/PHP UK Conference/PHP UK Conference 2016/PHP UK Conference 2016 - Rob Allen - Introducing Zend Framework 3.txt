Title: PHP UK Conference 2016 - Rob Allen - Introducing Zend Framework 3
Publication date: 2016-03-16
Playlist: PHP UK Conference 2016
Description: 
	ZF3 is the framework that took the opportunity to learn from the previous 4 years of ZF2 and be even better than that! Today's PHP projects are built of components installed via Composer and ZF3's architecture reflects this approach; its core components have also been greatly improved in both usage and performance from older versions of the framework. If you're already running a ZF2 application, you'll be able to upgrade your existing application and there will be some excellent support for doing so - we love it when developers get to use new things. We'll also look at how PSR-7 and middleware has been embraced. If you want to learn what's new in the world of Zend Framework, then this session is for you.
Captions: 
	00:00:10,030 --> 00:00:14,450
so really nice thing about having an

00:00:11,959 --> 00:00:17,779
intro so you clap at the beginning so I

00:00:14,450 --> 00:00:19,310
feel good already and we don't be

00:00:17,779 --> 00:00:22,520
talking about sound for about three for

00:00:19,310 --> 00:00:25,640
the next 50 minutes or so who hear you

00:00:22,520 --> 00:00:28,369
sound from what one anyone knock off you

00:00:25,640 --> 00:00:30,890
same framework - okay cool

00:00:28,369 --> 00:00:34,399
excellent so firm has been around quite

00:00:30,890 --> 00:00:36,379
a long while now there was something

00:00:34,399 --> 00:00:38,800
called the PHP collaboration project

00:00:36,379 --> 00:00:41,480
that was announced by Zend in October

00:00:38,800 --> 00:00:44,449
2005 which was the first time the same

00:00:41,480 --> 00:00:46,670
framework was mentioned and then the

00:00:44,449 --> 00:00:48,589
first code release was in March 2006 so

00:00:46,670 --> 00:00:52,120
we're very close to 10 years old now as

00:00:48,589 --> 00:00:55,460
a project version one came around in

00:00:52,120 --> 00:00:59,659
2007 version 2 came around about five

00:00:55,460 --> 00:01:02,089
years later 2012 we Nell 2016 we're

00:00:59,659 --> 00:01:06,740
another four five years later time for

00:01:02,089 --> 00:01:10,370
same framework three so what did then

00:01:06,740 --> 00:01:11,479
framework to give us was the reason we

00:01:10,370 --> 00:01:14,450
did in front were to in the first place

00:01:11,479 --> 00:01:16,670
and there were three significant things

00:01:14,450 --> 00:01:18,920
I think that have to had over that F one

00:01:16,670 --> 00:01:21,590
the first one being dependency injection

00:01:18,920 --> 00:01:23,600
we finally found a way to decouple our

00:01:21,590 --> 00:01:26,030
objects without having to statics

00:01:23,600 --> 00:01:28,610
everywhere that was quite nice then we

00:01:26,030 --> 00:01:31,820
had an event-driven architecture there's

00:01:28,610 --> 00:01:34,909
an framework one this patch system was

00:01:31,820 --> 00:01:37,610
very very nice but it was very brittle

00:01:34,909 --> 00:01:40,329
very inflexible and we solved that was

00:01:37,610 --> 00:01:43,430
done forever - it was a very very nice

00:01:40,329 --> 00:01:47,500
MVC system it is really flexible it is a

00:01:43,430 --> 00:01:51,020
very very good and lastly we introduced

00:01:47,500 --> 00:01:53,149
standalone first-class modules we didn't

00:01:51,020 --> 00:01:56,689
have them in framework one until about

00:01:53,149 --> 00:02:00,200
version 1.6 1.7 something like that and

00:01:56,689 --> 00:02:03,469
they were very much bolted on nobody

00:02:00,200 --> 00:02:05,390
wrote individual separate modules ends

00:02:03,469 --> 00:02:07,369
in forever one that could be shared and

00:02:05,390 --> 00:02:09,920
we solved that was in from what - so

00:02:07,369 --> 00:02:11,870
some framework - has been a very nice

00:02:09,920 --> 00:02:13,820
framework it was a very big improvement

00:02:11,870 --> 00:02:14,570
over time from about one we like it very

00:02:13,820 --> 00:02:18,739
much

00:02:14,570 --> 00:02:20,280
we're quite proud of it what's wrong

00:02:18,739 --> 00:02:22,900
with some framework -

00:02:20,280 --> 00:02:25,440
not that much to be honest as I say it's

00:02:22,900 --> 00:02:28,900
quite a good framework we'd like a lot

00:02:25,440 --> 00:02:30,790
biggest problem ever was the backwards

00:02:28,900 --> 00:02:35,080
compatibility break from Sanford work

00:02:30,790 --> 00:02:37,780
one we saw the new shiny and we're

00:02:35,080 --> 00:02:38,980
developers like everyone else so when we

00:02:37,780 --> 00:02:41,830
were allowed to break about

00:02:38,980 --> 00:02:44,170
compatibility we broke it we broke it

00:02:41,830 --> 00:02:47,190
hard who try to upgrade the nap from

00:02:44,170 --> 00:02:49,290
snow friend what wanted everyone were to

00:02:47,190 --> 00:02:53,470
mmm next to no one

00:02:49,290 --> 00:02:55,380
my experience was horrible it was really

00:02:53,470 --> 00:02:58,600
really difficult and as a result

00:02:55,380 --> 00:03:00,910
everyone stuck within frame what one for

00:02:58,600 --> 00:03:03,310
their old projects and did their new

00:03:00,910 --> 00:03:04,540
projects in same framework too which is

00:03:03,310 --> 00:03:06,670
one of the reasons why we still support

00:03:04,540 --> 00:03:09,400
same framework one today it still runs

00:03:06,670 --> 00:03:11,650
on page 57 because same framework one

00:03:09,400 --> 00:03:13,390
has got a lot of apps out there they're

00:03:11,650 --> 00:03:18,480
built on it it's important that they can

00:03:13,390 --> 00:03:21,430
still run we don't want to do that again

00:03:18,480 --> 00:03:23,020
another problem is in framework tube we

00:03:21,430 --> 00:03:24,489
put in all these cool new features like

00:03:23,020 --> 00:03:27,310
dependency injection like event

00:03:24,489 --> 00:03:29,620
management etc which resulted in a

00:03:27,310 --> 00:03:32,769
steeper learning curve so dev 2 is

00:03:29,620 --> 00:03:34,840
harder to learn than Zen framework 1 we

00:03:32,769 --> 00:03:37,209
targeted the expert developers over

00:03:34,840 --> 00:03:41,530
maybe the novices so that was

00:03:37,209 --> 00:03:43,300
interesting and we also coupled things

00:03:41,530 --> 00:03:44,860
more than we thought we had done we

00:03:43,300 --> 00:03:46,810
thought that we were creating a separate

00:03:44,860 --> 00:03:49,510
component library lots of separate

00:03:46,810 --> 00:03:52,540
components but all integration is via

00:03:49,510 --> 00:03:55,660
the MVC system so that was a side effect

00:03:52,540 --> 00:03:57,700
of the way we built our MVC we ended up

00:03:55,660 --> 00:03:59,800
doing all the integration via the MVC

00:03:57,700 --> 00:04:01,330
component we also had a number of

00:03:59,800 --> 00:04:05,980
development challenges but realistically

00:04:01,330 --> 00:04:08,380
you couldn't care less about those the

00:04:05,980 --> 00:04:11,560
PHP world has changed a bit since 2012

00:04:08,380 --> 00:04:14,380
when as nf2 is released so we started

00:04:11,560 --> 00:04:18,940
doing some from were to in late 2010

00:04:14,380 --> 00:04:22,840
beaters were in early 2011 composer

00:04:18,940 --> 00:04:25,780
wasn't a thing at all we thought that

00:04:22,840 --> 00:04:30,330
pear would be our main distribution

00:04:25,780 --> 00:04:33,090
mechanism and up who uses pear here

00:04:30,330 --> 00:04:38,379
voluntarily

00:04:33,090 --> 00:04:40,509
yes all the hands right down nobody uses

00:04:38,379 --> 00:04:42,279
pair anymore the only reason we use pair

00:04:40,509 --> 00:04:44,289
is so that we have Peck also can install

00:04:42,279 --> 00:04:46,509
XD bug I assume there's some other uses

00:04:44,289 --> 00:04:49,509
for it but nobody uses it at all

00:04:46,509 --> 00:04:50,830
everyone uses composer is that one not

00:04:49,509 --> 00:04:51,610
choosing composer actually don't do that

00:04:50,830 --> 00:04:53,439
because you'll put your heads off and

00:04:51,610 --> 00:04:55,150
brace yourselves if you are not using

00:04:53,439 --> 00:04:57,340
composer get with the program

00:04:55,150 --> 00:04:58,840
the PHP community has decided the

00:04:57,340 --> 00:05:01,870
composer is the way we do package

00:04:58,840 --> 00:05:04,180
management live with it don't try to go

00:05:01,870 --> 00:05:06,969
outside the system it's worth learning

00:05:04,180 --> 00:05:11,979
it is good it works very well so we got

00:05:06,969 --> 00:05:14,499
composer now PHP 5.3 was the target for

00:05:11,979 --> 00:05:15,909
sin framework - and we had arguments

00:05:14,499 --> 00:05:19,659
from the mailing list about whether that

00:05:15,909 --> 00:05:24,099
was too modern think about it too modern

00:05:19,659 --> 00:05:26,379
so we've now got PHP 70 so the lots have

00:05:24,099 --> 00:05:28,689
changed in terms of the type of PHP we

00:05:26,379 --> 00:05:30,249
can write nowadays and we've got a lot

00:05:28,689 --> 00:05:31,810
more useful standards in the PHP

00:05:30,249 --> 00:05:35,069
community which sort of used to the idea

00:05:31,810 --> 00:05:37,599
of working with other products other

00:05:35,069 --> 00:05:38,949
libraries through things like the

00:05:37,599 --> 00:05:41,889
standards that the framework

00:05:38,949 --> 00:05:43,180
interoperability group have created the

00:05:41,889 --> 00:05:46,330
PHP world is a little bit different

00:05:43,180 --> 00:05:50,770
which brings me to that f3 what's the

00:05:46,330 --> 00:05:53,469
story for cell phone work three four

00:05:50,770 --> 00:05:56,620
things that we're interested in firstly

00:05:53,469 --> 00:05:59,289
componentization we want to encourage

00:05:56,620 --> 00:06:03,729
more use of our components outside of

00:05:59,289 --> 00:06:05,529
the ZF MVC system we'd like to improve

00:06:03,729 --> 00:06:08,139
the performance and usability

00:06:05,529 --> 00:06:09,819
everyone likes things to be faster so we

00:06:08,139 --> 00:06:12,520
think we can make things faster that's

00:06:09,819 --> 00:06:14,529
good and we would like it be more usable

00:06:12,520 --> 00:06:18,479
we would like it to be a slightly

00:06:14,529 --> 00:06:18,479
shallower learning curve

00:06:18,899 --> 00:06:24,639
we'd like to improved everything little

00:06:21,009 --> 00:06:27,069
bit we like our MVC we can make it a bit

00:06:24,639 --> 00:06:28,659
better we're going to do that and we're

00:06:27,069 --> 00:06:33,219
going to do something a bit about our

00:06:28,659 --> 00:06:35,139
documentation it's a little bit not as

00:06:33,219 --> 00:06:39,009
good as it could be in some frameworks

00:06:35,139 --> 00:06:40,990
ooh ah Steve you've got a bit of focus

00:06:39,009 --> 00:06:42,969
with Piersall 7 which is wondered the

00:06:40,990 --> 00:06:45,550
framework in property group standards

00:06:42,969 --> 00:06:45,800
interoperability and middleware we think

00:06:45,550 --> 00:06:49,610
are

00:06:45,800 --> 00:06:51,770
be really key in the next four or five

00:06:49,610 --> 00:06:53,599
years so if you think that's important

00:06:51,770 --> 00:06:55,039
we think that's gotta be key to the way

00:06:53,599 --> 00:06:57,830
we develop applications as a PHP

00:06:55,039 --> 00:07:04,099
community we would like to be helping on

00:06:57,830 --> 00:07:07,099
that front too let's start with PHP 5.5

00:07:04,099 --> 00:07:08,900
that's the version that we've picked for

00:07:07,099 --> 00:07:11,860
the new minimum version for Sanford were

00:07:08,900 --> 00:07:14,419
three you've got to run in 5 5 or above

00:07:11,860 --> 00:07:17,080
again don't raise your hands if you're

00:07:14,419 --> 00:07:21,199
not running 5 5 yet just be embarrassed

00:07:17,080 --> 00:07:22,789
it's ridiculously stylish we've paid

00:07:21,199 --> 00:07:24,289
five five because that's what the

00:07:22,789 --> 00:07:27,139
long-term releases are wrong at the

00:07:24,289 --> 00:07:30,080
moment I'm hoping that all the big

00:07:27,139 --> 00:07:31,460
distros go to version 7 for the next LTS

00:07:30,080 --> 00:07:35,419
is that'd be nice

00:07:31,460 --> 00:07:37,400
so 5 5 is web started and yes seven is

00:07:35,419 --> 00:07:40,879
out Sam's got lots of new stuff in it by

00:07:37,400 --> 00:07:43,129
5 5 6 is good but 5 5 has also given us

00:07:40,879 --> 00:07:46,030
a lot of new things that we couldn't use

00:07:43,129 --> 00:07:50,180
in San Fran were 2 that we can now use

00:07:46,030 --> 00:07:53,449
we got traits the callable type hint

00:07:50,180 --> 00:07:55,759
that's finally useable to us that helps

00:07:53,449 --> 00:07:58,639
in our event manager we've got the

00:07:55,759 --> 00:08:02,090
finally keyword in try-catch that's

00:07:58,639 --> 00:08:05,779
useful password hash parthas end crypt

00:08:02,090 --> 00:08:08,509
can disappear that's quite nice colon

00:08:05,779 --> 00:08:11,210
colon class that is useful it now and

00:08:08,509 --> 00:08:14,449
say the service manager short array

00:08:11,210 --> 00:08:16,969
syntax everyone knows as in framework

00:08:14,449 --> 00:08:18,409
configuration is very array based it

00:08:16,969 --> 00:08:21,379
looks a bit better with a short or any

00:08:18,409 --> 00:08:24,259
syntax we get generators there's a lot

00:08:21,379 --> 00:08:25,969
of new stuff in 5/5 that we didn't have

00:08:24,259 --> 00:08:30,710
in 5-3 that we're quite excited about

00:08:25,969 --> 00:08:33,919
makes it more interesting let's talk

00:08:30,710 --> 00:08:35,479
about the components first key thing we

00:08:33,919 --> 00:08:37,510
have done and this is a bit of a

00:08:35,479 --> 00:08:40,130
development thing is that we've got

00:08:37,510 --> 00:08:43,729
separate repositories in same framework

00:08:40,130 --> 00:08:45,769
to up to 2.4 everything lived in one

00:08:43,729 --> 00:08:48,860
massive repository same frame was

00:08:45,769 --> 00:08:51,140
slashed in framework and from 2.5

00:08:48,860 --> 00:08:53,269
onwards we have split it into separate

00:08:51,140 --> 00:08:56,480
repositories so each component now lives

00:08:53,269 --> 00:08:58,959
is in its own repo which has got lots of

00:08:56,480 --> 00:08:58,959
benefits

00:08:59,410 --> 00:09:06,260
we've also converted it to psr-4 has

00:09:02,960 --> 00:09:09,050
everyone heard of PSR for some people's

00:09:06,260 --> 00:09:10,460
maybe it's not alleged standard where we

00:09:09,050 --> 00:09:12,560
get rid of the empty directories that

00:09:10,460 --> 00:09:14,150
were there for no apparent reason it's

00:09:12,560 --> 00:09:15,920
quite nice it makes life a little bit

00:09:14,150 --> 00:09:18,710
easier for all related it's a little bit

00:09:15,920 --> 00:09:21,460
more predictable it's fast composers or

00:09:18,710 --> 00:09:25,400
colleges very nice so we're using that

00:09:21,460 --> 00:09:30,530
so we're on PSR for now we can separate

00:09:25,400 --> 00:09:31,910
the evolution of components there's

00:09:30,530 --> 00:09:33,650
nothing to stop us

00:09:31,910 --> 00:09:35,990
changing a version number on one

00:09:33,650 --> 00:09:38,450
component compared to another component

00:09:35,990 --> 00:09:40,540
which we cannot do with em framework -

00:09:38,450 --> 00:09:45,620
so to pick a good example

00:09:40,540 --> 00:09:48,200
Zend lock we had a patch for PSR three

00:09:45,620 --> 00:09:50,450
incent lock a little while ago and we

00:09:48,200 --> 00:09:52,190
could not release it because we didn't

00:09:50,450 --> 00:09:54,470
want to bump the version number of the

00:09:52,190 --> 00:09:57,320
mainland vc system we weren't ready to

00:09:54,470 --> 00:09:59,780
do that so we had to hold back on a

00:09:57,320 --> 00:10:01,670
feature in Zen lock because we weren't

00:09:59,780 --> 00:10:04,160
ready to upgrade the version number in

00:10:01,670 --> 00:10:05,740
and what we were doing on send MVC that

00:10:04,160 --> 00:10:08,900
problem goes away

00:10:05,740 --> 00:10:12,590
it was also got some fairly stable

00:10:08,900 --> 00:10:14,120
components Zen bar code for instance how

00:10:12,590 --> 00:10:18,080
frequently do you think the same bar

00:10:14,120 --> 00:10:20,360
code changes not very frequently at all

00:10:18,080 --> 00:10:23,230
it's a very nice table component adjust

00:10:20,360 --> 00:10:25,670
that's what it does without any problems

00:10:23,230 --> 00:10:27,620
every time we change something into

00:10:25,670 --> 00:10:30,350
inter vent my major the version number

00:10:27,620 --> 00:10:32,270
of sim barcode goes up you might think

00:10:30,350 --> 00:10:34,580
there's a new feature in there there

00:10:32,270 --> 00:10:36,830
isn't we haven't changed it is stable we

00:10:34,580 --> 00:10:41,570
can now control the evolution of each

00:10:36,830 --> 00:10:42,890
individual component individually we've

00:10:41,570 --> 00:10:44,840
put the documentation back in the

00:10:42,890 --> 00:10:46,190
repository in Zen framework to the

00:10:44,840 --> 00:10:48,740
documentation is in a separate

00:10:46,190 --> 00:10:51,340
repository to the source code in same

00:10:48,740 --> 00:10:53,800
framework three in all the components

00:10:51,340 --> 00:10:56,720
we're back into the same repository

00:10:53,800 --> 00:10:59,900
which means that when we get a pull

00:10:56,720 --> 00:11:02,000
request for a new feature we can insist

00:10:59,900 --> 00:11:04,850
on documentation for that new feature at

00:11:02,000 --> 00:11:06,860
the same time so I'm hopeful that our

00:11:04,850 --> 00:11:09,010
documentation will get better that'd be

00:11:06,860 --> 00:11:09,010
nice

00:11:09,710 --> 00:11:13,920
this year's are in the right place if

00:11:11,850 --> 00:11:15,840
you've gotten problem with service

00:11:13,920 --> 00:11:17,970
manager you raise an issue in the

00:11:15,840 --> 00:11:19,350
service manager component you'll be able

00:11:17,970 --> 00:11:20,790
to find all the issues related to a

00:11:19,350 --> 00:11:22,680
given component they're in the right

00:11:20,790 --> 00:11:25,380
place so that's quite helpful as well

00:11:22,680 --> 00:11:26,270
and finally we're encouraging more

00:11:25,380 --> 00:11:28,590
maintainer

00:11:26,270 --> 00:11:31,050
we're looking for more people to help

00:11:28,590 --> 00:11:33,630
with them framework by having separate

00:11:31,050 --> 00:11:35,850
components in separate repositories we

00:11:33,630 --> 00:11:38,310
can give people commit rights to their

00:11:35,850 --> 00:11:40,680
era specialism so if you're really

00:11:38,310 --> 00:11:42,600
really good at send-off as someone was

00:11:40,680 --> 00:11:45,750
talking to be yesterday I would like you

00:11:42,600 --> 00:11:48,300
to be a maintainer for send-off I don't

00:11:45,750 --> 00:11:50,490
necessarily want you to commit to the

00:11:48,300 --> 00:11:52,530
event manager because maybe you don't

00:11:50,490 --> 00:11:54,240
know anything else and event manager you

00:11:52,530 --> 00:11:56,160
should not feel responsible for the end

00:11:54,240 --> 00:11:58,650
event manager so we're looking for more

00:11:56,160 --> 00:12:01,590
maintain us around each individual

00:11:58,650 --> 00:12:04,710
component that's what we do with

00:12:01,590 --> 00:12:07,760
components they're all separate they are

00:12:04,710 --> 00:12:18,000
now got their own evolutionary paths

00:12:07,760 --> 00:12:20,640
explicitly to the MVC system the Zen

00:12:18,000 --> 00:12:23,780
framework to repository from version 2.5

00:12:20,640 --> 00:12:27,030
has got no code in anymore it's all gone

00:12:23,780 --> 00:12:28,230
it consists of a composer JSON file that

00:12:27,030 --> 00:12:30,240
points to all those separate

00:12:28,230 --> 00:12:32,100
repositories so although I've been

00:12:30,240 --> 00:12:34,530
talking about some framework 3 in terms

00:12:32,100 --> 00:12:37,470
of the components is actually from

00:12:34,530 --> 00:12:40,470
version 2.5 that these things have been

00:12:37,470 --> 00:12:43,850
happening we have got a ramped evolution

00:12:40,470 --> 00:12:46,890
path between version 2 and version 3

00:12:43,850 --> 00:12:50,610
so 2.5 is where we split all the

00:12:46,890 --> 00:12:53,670
components out and the NVC package is

00:12:50,610 --> 00:12:55,500
literally just a large composer file

00:12:53,670 --> 00:12:57,860
with every single component listed out

00:12:55,500 --> 00:12:57,860
in it

00:12:58,860 --> 00:13:03,690
this means and I thought that for that

00:13:01,470 --> 00:13:05,940
the components can upgrade and they can

00:13:03,690 --> 00:13:08,850
evolve separately so we will see new

00:13:05,940 --> 00:13:11,820
major versions of our components that

00:13:08,850 --> 00:13:15,300
the MVC system will pick up when it is

00:13:11,820 --> 00:13:17,460
ready so we might get a version 3 of

00:13:15,300 --> 00:13:20,400
sent event manager we might get a

00:13:17,460 --> 00:13:22,590
version 4 of sentiment manager the MVC

00:13:20,400 --> 00:13:24,660
system might stick to version 3 for a

00:13:22,590 --> 00:13:26,760
little bit before it accepts the next

00:13:24,660 --> 00:13:31,170
major release we have that flexibility

00:13:26,760 --> 00:13:32,400
now the other thing we can do we're

00:13:31,170 --> 00:13:35,400
going to reduce the number of

00:13:32,400 --> 00:13:38,220
dependencies going back to them barcode

00:13:35,400 --> 00:13:41,970
u installs in framework - today you get

00:13:38,220 --> 00:13:48,030
them barcode yay how many of you have

00:13:41,970 --> 00:13:50,700
used them barcode it precisely no 101

00:13:48,030 --> 00:13:52,650
there oh sorry I missed you one person

00:13:50,700 --> 00:13:54,210
is using barcode every single cent

00:13:52,650 --> 00:13:56,510
framework - application out there has

00:13:54,210 --> 00:14:01,070
the source code on there in their system

00:13:56,510 --> 00:14:03,900
why that doesn't seem very conducive

00:14:01,070 --> 00:14:06,450
resources takes a little bit longer to

00:14:03,900 --> 00:14:08,280
do your composer install so we can

00:14:06,450 --> 00:14:12,090
reduce the number of dependencies

00:14:08,280 --> 00:14:15,270
further said f3 MVC right down to the

00:14:12,090 --> 00:14:19,080
components required for MVC and we're

00:14:15,270 --> 00:14:20,790
going to be quite harsh about this so

00:14:19,080 --> 00:14:23,580
Zen DB will go because people use

00:14:20,790 --> 00:14:25,650
doctrine not everyone needs a form so

00:14:23,580 --> 00:14:28,770
Zen form will go you will have to

00:14:25,650 --> 00:14:32,310
install these things independently from

00:14:28,770 --> 00:14:34,170
the main framework and of course this

00:14:32,310 --> 00:14:37,800
comes back to the father composers are

00:14:34,170 --> 00:14:39,630
think if you go back to 2012 how would

00:14:37,800 --> 00:14:42,090
you do all this installation would you

00:14:39,630 --> 00:14:44,580
really use pair it's not very easy to

00:14:42,090 --> 00:14:46,410
add different components to an

00:14:44,580 --> 00:14:49,080
application so we felt it's better just

00:14:46,410 --> 00:14:50,730
to bundle everything with in frame with

00:14:49,080 --> 00:14:53,430
three the composer if you want to

00:14:50,730 --> 00:14:55,590
install then form into your zenfone were

00:14:53,430 --> 00:14:56,870
three project composer requires in

00:14:55,590 --> 00:15:00,150
frameworks and four when you're done

00:14:56,870 --> 00:15:03,240
it's very very easy the integration is

00:15:00,150 --> 00:15:06,090
now with the component so that the

00:15:03,240 --> 00:15:07,890
composer install will have a post

00:15:06,090 --> 00:15:10,590
installation script that will set up

00:15:07,890 --> 00:15:12,790
your application config for you which

00:15:10,590 --> 00:15:14,790
will enable you to register the

00:15:12,790 --> 00:15:16,390
service manager and event manager

00:15:14,790 --> 00:15:21,190
requirements for that particular

00:15:16,390 --> 00:15:28,620
component that's quite cool I quite like

00:15:21,190 --> 00:15:30,940
that there are going to be BC breaks

00:15:28,620 --> 00:15:33,580
we're not going to do a major version

00:15:30,940 --> 00:15:37,000
number and not break BC that because

00:15:33,580 --> 00:15:39,070
there are reasons to break BC we're

00:15:37,000 --> 00:15:43,510
going to manage it though we are only

00:15:39,070 --> 00:15:47,950
breaking BC if there's a clear

00:15:43,510 --> 00:15:51,250
performance wind or there a clear

00:15:47,950 --> 00:15:52,959
usability wind we are not going to

00:15:51,250 --> 00:15:57,850
change BC because we think it would be

00:15:52,959 --> 00:16:00,190
called everyone added framework to

00:15:57,850 --> 00:16:02,589
application we'll be able to upgrade to

00:16:00,190 --> 00:16:06,010
is in framework three with a minimal

00:16:02,589 --> 00:16:08,350
amount of effort I'm expecting everyone

00:16:06,010 --> 00:16:10,720
to upgrade this is not as in framework

00:16:08,350 --> 00:16:13,720
wonders in framework to transition two

00:16:10,720 --> 00:16:16,209
to three is doable for everyone that is

00:16:13,720 --> 00:16:20,230
a key requirement of every single patch

00:16:16,209 --> 00:16:22,209
we are reviewing we've already started

00:16:20,230 --> 00:16:24,250
getting the components after 3.0 there's

00:16:22,209 --> 00:16:27,610
about five or six components they've now

00:16:24,250 --> 00:16:30,400
got a 3.0 release the two big ones for

00:16:27,610 --> 00:16:32,740
the MVC system our service manager and

00:16:30,400 --> 00:16:35,380
Event Manager both of those are now

00:16:32,740 --> 00:16:38,830
version 3 and obviously these are the

00:16:35,380 --> 00:16:41,350
key foundation of what same framework is

00:16:38,830 --> 00:16:45,490
and what the MVC system is so we're

00:16:41,350 --> 00:16:47,770
going to look at those also cuz I really

00:16:45,490 --> 00:16:49,839
like them I really really like as in

00:16:47,770 --> 00:16:54,339
service winter I think it's a great di

00:16:49,839 --> 00:16:58,050
container so first 70% frame were three

00:16:54,339 --> 00:17:01,510
what actually is in framework 2.6 it's

00:16:58,050 --> 00:17:02,800
contained Interop compatibility has

00:17:01,510 --> 00:17:07,420
everyone heard of containment for

00:17:02,800 --> 00:17:09,400
interrupt before few people it's an

00:17:07,420 --> 00:17:12,910
independent standard for defining what a

00:17:09,400 --> 00:17:14,980
container should be what to retrieve a

00:17:12,910 --> 00:17:16,510
dependency out of a defense integration

00:17:14,980 --> 00:17:19,689
container and this got slightly two

00:17:16,510 --> 00:17:23,260
methods has and get it is the world's

00:17:19,689 --> 00:17:24,910
most simplest interface it works really

00:17:23,260 --> 00:17:25,709
really well and the number of projects

00:17:24,910 --> 00:17:29,789
in our supporting

00:17:25,709 --> 00:17:31,620
interface so same frame service 1 2 3

00:17:29,789 --> 00:17:34,559
also supports it which makes it really

00:17:31,620 --> 00:17:36,720
easy for you to take sense those major

00:17:34,559 --> 00:17:38,490
for instance and use it within slim

00:17:36,720 --> 00:17:41,490
framework called slim framework requires

00:17:38,490 --> 00:17:43,440
a container Interop di container these

00:17:41,490 --> 00:17:46,380
sort of interoperability things become

00:17:43,440 --> 00:17:48,980
far easier if we do things against

00:17:46,380 --> 00:17:48,980
interfaces

00:17:49,880 --> 00:17:55,020
we've improved interfaces with incident

00:17:52,500 --> 00:17:56,880
service manager things like factory

00:17:55,020 --> 00:17:59,100
abstract factory delegator factory

00:17:56,880 --> 00:18:01,549
they've all got slightly different

00:17:59,100 --> 00:18:04,500
function signatures within interfaces

00:18:01,549 --> 00:18:07,559
we've improved that they're now all

00:18:04,500 --> 00:18:10,020
underscore score invoke that's all the

00:18:07,559 --> 00:18:12,809
benefits are going to 5 5 we can do that

00:18:10,020 --> 00:18:16,350
so everything that looks like a factory

00:18:12,809 --> 00:18:20,159
in service manager 3 uses unscored score

00:18:16,350 --> 00:18:22,080
invoke back to the whole manage BC break

00:18:20,159 --> 00:18:23,669
thing you can do that today in your zone

00:18:22,080 --> 00:18:29,760
framework 2 applications because it

00:18:23,669 --> 00:18:32,100
works there as well we've also made the

00:18:29,760 --> 00:18:34,890
first argument to the factory the

00:18:32,100 --> 00:18:36,210
container is now predictable if you're

00:18:34,890 --> 00:18:37,740
right in the factory for sensational age

00:18:36,210 --> 00:18:39,929
of 3 the first document is always a

00:18:37,740 --> 00:18:41,820
container that is not true in stem from

00:18:39,929 --> 00:18:43,980
where to hence you have to keep looking

00:18:41,820 --> 00:18:45,950
up in the docs and you all know my

00:18:43,980 --> 00:18:49,140
opinion of the doctors that have to

00:18:45,950 --> 00:18:54,090
that's fine not to go make it more

00:18:49,140 --> 00:18:55,860
predictable easier to use we've also

00:18:54,090 --> 00:18:58,409
allowed to the ability to reuse a

00:18:55,860 --> 00:18:59,880
factory for multiple named services so

00:18:58,409 --> 00:19:01,980
if you've written a factory you can now

00:18:59,880 --> 00:19:04,169
assign it to more than one place within

00:19:01,980 --> 00:19:05,730
your social measure config which reduces

00:19:04,169 --> 00:19:07,620
the number of abstract factories you

00:19:05,730 --> 00:19:10,409
need to write so it's quicker and easier

00:19:07,620 --> 00:19:12,299
to write them again that works in the

00:19:10,409 --> 00:19:14,580
later versions of sensor manager too

00:19:12,299 --> 00:19:17,070
because we've back ported the feature to

00:19:14,580 --> 00:19:22,559
make it easier for you to transition

00:19:17,070 --> 00:19:25,289
from one framework to the next new

00:19:22,559 --> 00:19:28,970
method build everyone's used to using

00:19:25,289 --> 00:19:31,620
get get to get your shared copy of the

00:19:28,970 --> 00:19:35,360
service out of service manager what

00:19:31,620 --> 00:19:38,240
happens if you want a non shared version

00:19:35,360 --> 00:19:41,960
out of the service manager now you use

00:19:38,240 --> 00:19:45,220
build build will give you a new instance

00:19:41,960 --> 00:19:48,230
of that service outlet service manager

00:19:45,220 --> 00:19:51,500
that's really really helpful for the

00:19:48,230 --> 00:19:54,170
plug-in managers like the form input

00:19:51,500 --> 00:19:56,780
fields the validators you do not want

00:19:54,170 --> 00:19:58,460
the validators being shared we now have

00:19:56,780 --> 00:20:01,400
a method to make it easier to pull out

00:19:58,460 --> 00:20:06,260
the non-shared versions so again

00:20:01,400 --> 00:20:09,830
improving the API title component sense

00:20:06,260 --> 00:20:12,049
service Ranger 3 is immutable once you

00:20:09,830 --> 00:20:12,770
have started pulling things out let's

00:20:12,049 --> 00:20:17,330
service manager

00:20:12,770 --> 00:20:20,150
you cannot configure it anymore the

00:20:17,330 --> 00:20:25,669
reason we did that is it is 20 times

00:20:20,150 --> 00:20:28,220
faster it's really really quick since

00:20:25,669 --> 00:20:30,290
this manager in the worst case is four

00:20:28,220 --> 00:20:32,750
times quicker than the current one

00:20:30,290 --> 00:20:36,700
so Version three is really really quick

00:20:32,750 --> 00:20:39,980
is 20 times faster in a lot of cases

00:20:36,700 --> 00:20:42,049
very very nice to use we like it a lot

00:20:39,980 --> 00:20:44,030
you just put in since those ones are

00:20:42,049 --> 00:20:48,890
three and everything goes quicker it's

00:20:44,030 --> 00:20:50,540
very very nice and that's mostly down to

00:20:48,890 --> 00:20:51,740
the immutability as if you other bits

00:20:50,540 --> 00:20:53,540
and bobs that they've making it

00:20:51,740 --> 00:20:56,660
immutable removed an awful lot of

00:20:53,540 --> 00:21:00,950
runtime check code so get became much

00:20:56,660 --> 00:21:03,620
much faster and as I say mostly

00:21:00,950 --> 00:21:05,090
backwards compatible not that many

00:21:03,620 --> 00:21:07,880
changes that you need to make to your

00:21:05,090 --> 00:21:14,480
source code to run with service manager

00:21:07,880 --> 00:21:15,950
three so these are the key changes which

00:21:14,480 --> 00:21:19,669
is a polite way of saying the backwards

00:21:15,950 --> 00:21:22,120
compatibility breaks the really really

00:21:19,669 --> 00:21:28,010
big one is that top one on that list

00:21:22,120 --> 00:21:30,980
service name is now case sensitive you

00:21:28,010 --> 00:21:35,540
can no longer put configuration into the

00:21:30,980 --> 00:21:40,090
service manager in one format like all

00:21:35,540 --> 00:21:42,830
uppercase and then use it or lowercase

00:21:40,090 --> 00:21:45,530
you have to remember how you put it in

00:21:42,830 --> 00:21:46,730
to retrieve it out again this is one of

00:21:45,530 --> 00:21:48,509
the reasons why we always use class

00:21:46,730 --> 00:21:52,589
names because we know how this

00:21:48,509 --> 00:21:54,179
out really really one the constructor

00:21:52,589 --> 00:21:56,429
mail takes an array rather than a

00:21:54,179 --> 00:21:58,139
specialized config object you probably

00:21:56,429 --> 00:21:59,279
don't care about that very much if

00:21:58,139 --> 00:22:02,159
you're using the same framework two's

00:21:59,279 --> 00:22:05,039
MVC system because the MVC system

00:22:02,159 --> 00:22:07,139
worries about that not you but if you're

00:22:05,039 --> 00:22:10,289
using sensors rancher outside of said f

00:22:07,139 --> 00:22:14,070
- it is now much easier to use it

00:22:10,289 --> 00:22:15,779
behaves the way you'd expect it to so

00:22:14,070 --> 00:22:17,399
say the new interfaces factories are

00:22:15,779 --> 00:22:19,289
always underscore underscore invoke

00:22:17,399 --> 00:22:20,940
that's quite an easy change you're

00:22:19,289 --> 00:22:25,949
probably already doing that for most

00:22:20,940 --> 00:22:29,309
your factories anyway another key one if

00:22:25,949 --> 00:22:30,779
you write in a plugin manager factory so

00:22:29,309 --> 00:22:33,389
you're writing a view helper for

00:22:30,779 --> 00:22:35,369
instance a factory for a view helper the

00:22:33,389 --> 00:22:37,440
parameter to that factory is now the

00:22:35,369 --> 00:22:39,179
parent service manager so you no longer

00:22:37,440 --> 00:22:40,109
have to go and get the parent service

00:22:39,179 --> 00:22:41,940
manager yourself

00:22:40,109 --> 00:22:46,619
it's made life a little bit easier for

00:22:41,940 --> 00:22:50,129
you that's send service manager a very

00:22:46,619 --> 00:22:52,889
narrow set of bc breaks for an up to 20

00:22:50,129 --> 00:22:54,899
times performance increase we're quite

00:22:52,889 --> 00:22:57,899
happy with this I think this is a really

00:22:54,899 --> 00:22:59,549
really good trade-off and it the other

00:22:57,899 --> 00:23:01,289
thing that we've done both with service

00:22:59,549 --> 00:23:04,079
manager and with vent manager is we have

00:23:01,289 --> 00:23:05,999
got a really good migration guide it's

00:23:04,079 --> 00:23:08,759
in the documentation the documentation

00:23:05,999 --> 00:23:10,769
is in the component so when people kept

00:23:08,759 --> 00:23:14,849
adding these bc breaks we made them

00:23:10,769 --> 00:23:17,879
write down what they've done amazing so

00:23:14,849 --> 00:23:18,899
we now have a good migration guide you

00:23:17,879 --> 00:23:20,729
can read through migration graphs in

00:23:18,899 --> 00:23:22,979
sales manager and it makes sense it's

00:23:20,729 --> 00:23:24,599
very clear what you need to do in all

00:23:22,979 --> 00:23:26,579
the cases where you need to make a

00:23:24,599 --> 00:23:29,159
change we have documented what you need

00:23:26,579 --> 00:23:35,219
to change it shouldn't take you long to

00:23:29,159 --> 00:23:37,349
upgrade event manager we've done the

00:23:35,219 --> 00:23:43,019
same thing we have made it much much

00:23:37,349 --> 00:23:47,009
faster it is 4 to 15 times faster than

00:23:43,019 --> 00:23:49,949
the one in framework - mostly because

00:23:47,009 --> 00:23:53,119
we've reimplemented priority queue so in

00:23:49,949 --> 00:23:55,919
framework - we use SPL priority queue in

00:23:53,119 --> 00:23:58,289
version 3 we've implemented it ourselves

00:23:55,919 --> 00:24:00,890
in a slightly different way that it's

00:23:58,289 --> 00:24:05,990
optimized for event manager

00:24:00,890 --> 00:24:07,700
it made it much faster we've made some

00:24:05,990 --> 00:24:11,290
usability improvements to the trigger

00:24:07,700 --> 00:24:15,590
method trigger is a particularly complex

00:24:11,290 --> 00:24:21,500
method within some event manager - it is

00:24:15,590 --> 00:24:23,600
much thinner in event manager 3 and yeah

00:24:21,500 --> 00:24:26,750
PC breaks again mostly back to the

00:24:23,600 --> 00:24:28,580
compatible not completely but like each

00:24:26,750 --> 00:24:31,340
BC brake has been there for a reason

00:24:28,580 --> 00:24:34,820
and the two big ones are routed to speed

00:24:31,340 --> 00:24:37,070
and we wanted the usability so again

00:24:34,820 --> 00:24:38,900
which had the BC brakes if you're using

00:24:37,070 --> 00:24:42,230
global Event Manager or static Event

00:24:38,900 --> 00:24:43,970
Manager they're gone you probably

00:24:42,230 --> 00:24:46,300
weren't using them anyway Global's are

00:24:43,970 --> 00:24:48,680
bad I think we've mentioned this before

00:24:46,300 --> 00:24:52,520
they don't use Global's we've got rid of

00:24:48,680 --> 00:24:55,160
them they're gone listen aggregates have

00:24:52,520 --> 00:24:57,620
been removed you might be using those

00:24:55,160 --> 00:25:00,620
it's a two line change to your source

00:24:57,620 --> 00:25:03,350
code to use it in the new way and again

00:25:00,620 --> 00:25:05,090
it's in the migration guide very very

00:25:03,350 --> 00:25:07,640
easy to change your code to handle that

00:25:05,090 --> 00:25:10,490
fat that gave us the two times speed up

00:25:07,640 --> 00:25:12,830
in using event manager so you have to

00:25:10,490 --> 00:25:17,420
make a two line code change we got a

00:25:12,830 --> 00:25:20,110
double performance the construct

00:25:17,420 --> 00:25:23,060
signature has changed for event manager

00:25:20,110 --> 00:25:25,310
you now have to pass the shared event

00:25:23,060 --> 00:25:27,200
manager in as a second parameter if you

00:25:25,310 --> 00:25:29,750
want a shared event manager within your

00:25:27,200 --> 00:25:31,700
event manager so it makes it far more

00:25:29,750 --> 00:25:33,950
explicit what is going on in terms of

00:25:31,700 --> 00:25:38,720
the way shared event manager works so

00:25:33,950 --> 00:25:45,110
you might need to look at that and as I

00:25:38,720 --> 00:25:48,650
say we messed around with trigger in

00:25:45,110 --> 00:25:50,750
send event manager to there are 36

00:25:48,650 --> 00:25:53,750
different combinations of calling the

00:25:50,750 --> 00:26:00,500
same method hands up if you can name

00:25:53,750 --> 00:26:02,750
them 36 unbelievable isn't it there are

00:26:00,500 --> 00:26:05,330
4 parameters that go into trigger

00:26:02,750 --> 00:26:07,010
there's the event name within version to

00:26:05,330 --> 00:26:09,500
this event name there's a target this

00:26:07,010 --> 00:26:12,920
ography and there's a callback and the

00:26:09,500 --> 00:26:14,390
event name can be a string or it can be

00:26:12,920 --> 00:26:16,160
an event object

00:26:14,390 --> 00:26:18,410
alternatively you could make the event

00:26:16,160 --> 00:26:20,120
earn name a string and the target could

00:26:18,410 --> 00:26:23,060
be a defense object or it can be a

00:26:20,120 --> 00:26:24,670
instance of a class simply with our glee

00:26:23,060 --> 00:26:29,090
do you fill it in or do you not fill in

00:26:24,670 --> 00:26:30,860
36 different combinations we thought

00:26:29,090 --> 00:26:36,970
this was probably not the most usable

00:26:30,860 --> 00:26:40,730
method in the world in event managers 3

00:26:36,970 --> 00:26:44,290
we have change trigger to become four

00:26:40,730 --> 00:26:48,500
different methods we have trigger

00:26:44,290 --> 00:26:51,200
trigger until trigger event and trigger

00:26:48,500 --> 00:26:53,270
event until so if you want to use an

00:26:51,200 --> 00:26:55,640
event object and create your event

00:26:53,270 --> 00:26:56,960
object and then trigger it you have to

00:26:55,640 --> 00:26:59,420
use either trigger event or trigger

00:26:56,960 --> 00:27:02,180
event until if you want to use an event

00:26:59,420 --> 00:27:05,570
name as a string then you use trigger or

00:27:02,180 --> 00:27:08,540
trigger until and then the difference

00:27:05,570 --> 00:27:11,290
between the two in each case is that the

00:27:08,540 --> 00:27:14,330
color book for the short-circuiting is

00:27:11,290 --> 00:27:16,610
in the until version so if you're not

00:27:14,330 --> 00:27:18,290
short-circuiting you use trigger if you

00:27:16,610 --> 00:27:20,660
are short-circuiting you use trigger

00:27:18,290 --> 00:27:23,150
until makes it quite clear what's going

00:27:20,660 --> 00:27:25,490
on so you've got something to learn four

00:27:23,150 --> 00:27:28,010
methods instead of one but they make

00:27:25,490 --> 00:27:32,210
sense so we think that's a very very

00:27:28,010 --> 00:27:34,190
good trade-off all those changes are

00:27:32,210 --> 00:27:37,250
forwards compatible from Zin framework

00:27:34,190 --> 00:27:40,220
2.7 so if you upgrade your cell f2

00:27:37,250 --> 00:27:42,380
application to 2.7 you can use all of

00:27:40,220 --> 00:27:45,530
those four methods in with folks

00:27:42,380 --> 00:27:47,780
signatures today so that when you move

00:27:45,530 --> 00:27:49,790
to Zen framework 3 all that work has

00:27:47,780 --> 00:27:52,430
already been done it's a very very

00:27:49,790 --> 00:27:53,600
shallow migration path here we're trying

00:27:52,430 --> 00:27:56,650
to make it really easy for you to go

00:27:53,600 --> 00:27:56,650
design framework 3

00:27:59,070 --> 00:28:06,550
send Avicii version three is

00:28:02,400 --> 00:28:10,990
fundamentally the current MVC but much

00:28:06,550 --> 00:28:13,450
faster there's next to nothing units to

00:28:10,990 --> 00:28:15,370
friends MVC significantly you got

00:28:13,450 --> 00:28:17,020
changed the factory is related to the

00:28:15,370 --> 00:28:19,330
service major stuff you got changed

00:28:17,020 --> 00:28:21,850
triggering related event manager and it

00:28:19,330 --> 00:28:23,320
will just work there's got been new

00:28:21,850 --> 00:28:25,090
middleware listener in there there is a

00:28:23,320 --> 00:28:27,610
peso seven bridge there's a few other

00:28:25,090 --> 00:28:31,630
bits and bobs but soon a sense purposes

00:28:27,610 --> 00:28:37,870
send MVC three will be very very similar

00:28:31,630 --> 00:28:45,430
than framework to this is why we think

00:28:37,870 --> 00:28:47,110
you can all up great that's why if we

00:28:45,430 --> 00:28:49,330
are at the moment we've got our MVC

00:28:47,110 --> 00:28:52,030
system it is very powerful is very

00:28:49,330 --> 00:28:55,090
flexible is event-driven it's got di we

00:28:52,030 --> 00:28:57,460
like it slot where is the PHP community

00:28:55,090 --> 00:28:59,890
going what's been happening in terms of

00:28:57,460 --> 00:29:01,840
the PHP community and where do we think

00:28:59,890 --> 00:29:03,790
the future of PHP application

00:29:01,840 --> 00:29:05,320
development is going to go those are the

00:29:03,790 --> 00:29:07,210
questions we've been asking ourselves in

00:29:05,320 --> 00:29:12,280
terms of what we want to do as part of

00:29:07,210 --> 00:29:15,310
the 3.0 story and we come up with these

00:29:12,280 --> 00:29:18,370
three things we think this could be much

00:29:15,310 --> 00:29:21,460
more dependence on abstraction as we go

00:29:18,370 --> 00:29:23,500
forward in PHP development we think more

00:29:21,460 --> 00:29:25,540
people are going to be building against

00:29:23,500 --> 00:29:28,480
interfaces then building against

00:29:25,540 --> 00:29:30,010
concrete implementations so things like

00:29:28,480 --> 00:29:31,480
PS r34 logging

00:29:30,010 --> 00:29:34,060
you're going to write your component

00:29:31,480 --> 00:29:36,390
you're going to accept a PS r3 logger

00:29:34,060 --> 00:29:39,280
you will not care which particular

00:29:36,390 --> 00:29:41,860
implementation of that logger you'll

00:29:39,280 --> 00:29:43,240
just go right to the interface we think

00:29:41,860 --> 00:29:45,120
the same thing will happen with things

00:29:43,240 --> 00:29:48,520
like this r7 and request and response

00:29:45,120 --> 00:29:53,220
contain Interop for handling dependency

00:29:48,520 --> 00:29:53,220
injection etc so we've seen a lot more

00:29:53,520 --> 00:30:00,070
writing to interfaces spend us on

00:29:56,110 --> 00:30:02,950
abstract abstractions if one is using

00:30:00,070 --> 00:30:05,650
packages spell Composer we are expected

00:30:02,950 --> 00:30:08,020
to build our applications up using

00:30:05,650 --> 00:30:09,640
components on packages we are going to

00:30:08,020 --> 00:30:11,010
be building our applications out of

00:30:09,640 --> 00:30:13,360
smaller bits

00:30:11,010 --> 00:30:15,010
we're not so scared about how we're

00:30:13,360 --> 00:30:18,340
gonna find these components we know how

00:30:15,010 --> 00:30:19,780
to find a library nowadays in PHP we

00:30:18,340 --> 00:30:22,860
know how to install it and get it

00:30:19,780 --> 00:30:25,060
running in our application with no work

00:30:22,860 --> 00:30:26,680
now back in the old days you would grab

00:30:25,060 --> 00:30:29,740
something off PHP classes and spend

00:30:26,680 --> 00:30:31,180
three days getting it to auto load now

00:30:29,740 --> 00:30:33,970
we just tie a composer require and

00:30:31,180 --> 00:30:36,780
suddenly we've got to work in component

00:30:33,970 --> 00:30:39,840
is just being brought in you don't need

00:30:36,780 --> 00:30:41,650
to depend upon a whole family of

00:30:39,840 --> 00:30:43,420
components that came from one framework

00:30:41,650 --> 00:30:44,920
because you can just grab them out of

00:30:43,420 --> 00:30:47,140
packages the ones that you actually

00:30:44,920 --> 00:30:49,330
needs the bits you need so we think the

00:30:47,140 --> 00:30:51,400
framework should be right out of the way

00:30:49,330 --> 00:30:53,410
it shouldn't be the thing you are

00:30:51,400 --> 00:30:55,210
thinking about anymore when it comes to

00:30:53,410 --> 00:30:59,320
building application you have me

00:30:55,210 --> 00:31:00,400
thinking in terms of components and the

00:30:59,320 --> 00:31:03,940
big thing there from our point of view

00:31:00,400 --> 00:31:06,400
is PS r7 and interoperability and things

00:31:03,940 --> 00:31:09,340
like middle-way lose anyone in the PS or

00:31:06,400 --> 00:31:11,110
seven talk yesterday you okay well I'm

00:31:09,340 --> 00:31:13,750
going to repeat what that guy said so

00:31:11,110 --> 00:31:16,030
you already know this stuff the rest of

00:31:13,750 --> 00:31:21,100
you has anyone heard the PS r7 in

00:31:16,030 --> 00:31:23,470
general okay good few of you know zou

00:31:21,100 --> 00:31:26,290
the don't let's go through a

00:31:23,470 --> 00:31:33,340
whistle-stop recap or information about

00:31:26,290 --> 00:31:36,220
it we are web application developers

00:31:33,340 --> 00:31:39,730
that's what we do we build things for

00:31:36,220 --> 00:31:42,370
the web PHP is really really good at

00:31:39,730 --> 00:31:44,500
building things for the web it is less

00:31:42,370 --> 00:31:51,010
good in a real-time operating system is

00:31:44,500 --> 00:31:52,000
very good at HTTP and the web when it

00:31:51,010 --> 00:31:54,400
comes to HTTP

00:31:52,000 --> 00:31:56,680
it's a really really simple protocol

00:31:54,400 --> 00:31:59,160
there's a request and there is a

00:31:56,680 --> 00:32:03,190
response the browser sends us a request

00:31:59,160 --> 00:32:07,960
we send the browser a response very very

00:32:03,190 --> 00:32:10,630
simple and it's all text there are three

00:32:07,960 --> 00:32:12,400
sections to the request there is a

00:32:10,630 --> 00:32:14,140
request line with the method whether

00:32:12,400 --> 00:32:16,540
it's a get or a post or a patch or

00:32:14,140 --> 00:32:18,730
whether which URI are we actually go

00:32:16,540 --> 00:32:21,580
into root two is part of the request

00:32:18,730 --> 00:32:24,610
line we have some headers key value

00:32:21,580 --> 00:32:27,100
pairs then we have the message body is

00:32:24,610 --> 00:32:29,440
all strings it is all very very simple

00:32:27,100 --> 00:32:31,600
and very easy to understand the response

00:32:29,440 --> 00:32:32,830
looks exactly the same we moved the

00:32:31,600 --> 00:32:34,450
version number to the beginning but the

00:32:32,830 --> 00:32:36,880
response live with what status code in

00:32:34,450 --> 00:32:37,330
and the rest of the message stays the

00:32:36,880 --> 00:32:39,400
same

00:32:37,330 --> 00:32:41,350
we have headers with key value pairs we

00:32:39,400 --> 00:32:45,360
have a message body which is just a

00:32:41,350 --> 00:32:48,309
string okay that's all that HTTP is

00:32:45,360 --> 00:32:52,090
there's an awful lot of RFC's about that

00:32:48,309 --> 00:32:58,059
very very simple concept how do we do

00:32:52,090 --> 00:32:59,860
that in PHP today if we were to get at

00:32:58,059 --> 00:33:01,270
the request information we have the

00:32:59,860 --> 00:33:02,770
superglobals we have dollar and score

00:33:01,270 --> 00:33:04,570
server and score get underscore post

00:33:02,770 --> 00:33:08,500
under cuss or cookies underscore files

00:33:04,570 --> 00:33:10,270
we have all of the superglobals then we

00:33:08,500 --> 00:33:13,059
have apache request headers for the bits

00:33:10,270 --> 00:33:16,630
that don't go into superglobals which

00:33:13,059 --> 00:33:20,380
works in nginx now you didn't it does

00:33:16,630 --> 00:33:22,630
now and then we've got PHP input for the

00:33:20,380 --> 00:33:23,950
message body that doesn't go in posts

00:33:22,630 --> 00:33:25,960
because we've got a different mime type

00:33:23,950 --> 00:33:28,000
this time you have to know what you're

00:33:25,960 --> 00:33:30,940
doing and to get the right data out of

00:33:28,000 --> 00:33:32,860
PHP from that very very simple HTTP

00:33:30,940 --> 00:33:36,030
request there's quite a lot of choice

00:33:32,860 --> 00:33:38,320
involved you've got to know quite a lot

00:33:36,030 --> 00:33:41,080
and in terms of the response we have

00:33:38,320 --> 00:33:43,240
Heather Heather is a very simplistic

00:33:41,080 --> 00:33:45,580
method it takes three parameters

00:33:43,240 --> 00:33:47,500
Andy has got two exceptions that depend

00:33:45,580 --> 00:33:50,260
upon the data you put into it that

00:33:47,500 --> 00:33:53,410
nobody ever remembers nobody knows what

00:33:50,260 --> 00:33:55,450
they are we have echo we need a string

00:33:53,410 --> 00:33:57,730
for the message body to send back our

00:33:55,450 --> 00:33:59,770
response you just echo it which works

00:33:57,730 --> 00:34:01,330
wonderfully right up until a point where

00:33:59,770 --> 00:34:03,309
you need to send a header after you've

00:34:01,330 --> 00:34:05,049
started doing the output at which when

00:34:03,309 --> 00:34:11,980
you can't do it so we invented the

00:34:05,049 --> 00:34:15,700
output buffer to solve that problem this

00:34:11,980 --> 00:34:18,129
a system is one of the areas where you

00:34:15,700 --> 00:34:20,850
can tell that PHP is 20 years old is a

00:34:18,129 --> 00:34:26,379
very cgi view of the world

00:34:20,850 --> 00:34:30,929
so PS r7 is a model of the request and

00:34:26,379 --> 00:34:33,550
the response an HTTP as objects

00:34:30,929 --> 00:34:36,790
specifically it is a definition of some

00:34:33,550 --> 00:34:38,950
interfaces that is all there's a request

00:34:36,790 --> 00:34:41,290
interface and a sister server request

00:34:38,950 --> 00:34:43,990
interface there's a response interface

00:34:41,290 --> 00:34:46,960
the URI interface and that upload file

00:34:43,990 --> 00:34:49,270
interface and a few other child child

00:34:46,960 --> 00:34:56,080
dependent ones it's not particularly

00:34:49,270 --> 00:34:59,320
complicated just some interfaces this

00:34:56,080 --> 00:35:02,920
isn't a PSR 7 talk so I'm only going to

00:34:59,320 --> 00:35:04,359
tell you two things about PSR 7 and if

00:35:02,920 --> 00:35:06,220
you take nothing away from this talk

00:35:04,359 --> 00:35:08,350
remember these two things they will

00:35:06,220 --> 00:35:11,170
stand you in good stead no matter which

00:35:08,350 --> 00:35:12,820
framework you use if it's got PSR 7

00:35:11,170 --> 00:35:16,869
involved these are the key things you

00:35:12,820 --> 00:35:20,310
need to know firstly request response

00:35:16,869 --> 00:35:23,260
URI and upload file are immutable

00:35:20,310 --> 00:35:26,890
immutable means you may not change it

00:35:23,260 --> 00:35:28,930
once it has been constructed so in the

00:35:26,890 --> 00:35:31,720
first line there I instantiate a new URI

00:35:28,930 --> 00:35:35,050
object to the events collection on

00:35:31,720 --> 00:35:38,710
joined in I had now have a URL object

00:35:35,050 --> 00:35:43,359
that I cannot change that's not

00:35:38,710 --> 00:35:45,910
particularly useful to change that URL

00:35:43,359 --> 00:35:48,609
object there is a series of methods that

00:35:45,910 --> 00:35:50,380
all start with the word width so you've

00:35:48,609 --> 00:35:54,010
got with query you've got with fragment

00:35:50,380 --> 00:35:56,350
you've got with domain etc when you call

00:35:54,010 --> 00:35:58,030
your eye with query and this time I put

00:35:56,350 --> 00:36:04,540
in the upcoming filter onto that

00:35:58,030 --> 00:36:06,760
collection I get a new object so URI -

00:36:04,540 --> 00:36:08,950
is not the same issue all right

00:36:06,760 --> 00:36:11,470
the most common mistake you will make

00:36:08,950 --> 00:36:14,800
with PSR 7 is you will forget to

00:36:11,470 --> 00:36:17,800
reassign the object that comes out of a

00:36:14,800 --> 00:36:18,640
with everyone does it and you wonder why

00:36:17,800 --> 00:36:21,410
man your code works

00:36:18,640 --> 00:36:23,970
you forgot to reassign

00:36:21,410 --> 00:36:26,789
the huge benefit have been the mutable

00:36:23,970 --> 00:36:28,289
is it is very very predictable you we

00:36:26,789 --> 00:36:30,450
know exactly what is going on with our

00:36:28,289 --> 00:36:33,299
code our code is very very easy to test

00:36:30,450 --> 00:36:35,940
it doesn't change under our feet it's

00:36:33,299 --> 00:36:39,119
quite nice I can reuse the dollar you

00:36:35,940 --> 00:36:42,839
are writing variable and create multiple

00:36:39,119 --> 00:36:44,309
of queries against the same object so I

00:36:42,839 --> 00:36:46,920
get quite a lot of flexibility as well

00:36:44,309 --> 00:36:48,450
and I can know what I'm doing and simile

00:36:46,920 --> 00:36:51,420
the request does the same thing here I

00:36:48,450 --> 00:36:53,609
create a new request I've with method

00:36:51,420 --> 00:36:55,410
with URI with the accept soda with the

00:36:53,609 --> 00:37:01,140
authorization header I've just created

00:36:55,410 --> 00:37:03,509
five new objects it's really really

00:37:01,140 --> 00:37:05,880
fortunate that PHP is very very

00:37:03,509 --> 00:37:08,279
efficient when it comes to object

00:37:05,880 --> 00:37:10,380
cloning this is not particularly memory

00:37:08,279 --> 00:37:13,349
efficient inefficient sorry and it is

00:37:10,380 --> 00:37:18,559
not particularly slow I you will never

00:37:13,349 --> 00:37:22,049
ever see this on the profiler it's quick

00:37:18,559 --> 00:37:24,839
okay let's give you one key feature to

00:37:22,049 --> 00:37:27,779
the message bodies are streams and not

00:37:24,839 --> 00:37:30,359
strings so I know I said that the

00:37:27,779 --> 00:37:33,480
request body and the response body are

00:37:30,359 --> 00:37:36,269
strings in PHP in PS are seven we

00:37:33,480 --> 00:37:38,430
modeled them as streams instead the

00:37:36,269 --> 00:37:43,230
reason we model them as streams is it is

00:37:38,430 --> 00:37:43,799
extremely memory efficient so lots and

00:37:43,230 --> 00:37:46,440
lots of different appointments

00:37:43,799 --> 00:37:51,599
re-implementing PS are seven now so we

00:37:46,440 --> 00:37:54,180
could have a an object from ghazal which

00:37:51,599 --> 00:37:55,980
is PS are seven so this will be a file

00:37:54,180 --> 00:38:00,059
for instance and we want to download it

00:37:55,980 --> 00:38:02,190
and send it to a cloud a browser if it's

00:38:00,059 --> 00:38:04,319
a big file we do not want to load all of

00:38:02,190 --> 00:38:06,089
that into our own PHP memory space we

00:38:04,319 --> 00:38:09,329
just want to pass it straight through to

00:38:06,089 --> 00:38:11,549
the browser that is what streams do they

00:38:09,329 --> 00:38:18,989
allow us to be very memory efficient in

00:38:11,549 --> 00:38:21,869
our PHP process they are also mutable so

00:38:18,989 --> 00:38:25,769
the rest of PS r7 is immutable streams

00:38:21,869 --> 00:38:28,019
are not you can change them so be aware

00:38:25,769 --> 00:38:30,779
of that as well okay that's the only two

00:38:28,019 --> 00:38:33,650
things you need to know immutability and

00:38:30,779 --> 00:38:33,650
streams

00:38:34,950 --> 00:38:43,090
the actress is Zen frameworks PSR 7

00:38:39,430 --> 00:38:46,720
implementation so this is our component

00:38:43,090 --> 00:38:49,270
that implements the PSR 7 interfaces it

00:38:46,720 --> 00:38:51,190
is a complete implementation it's

00:38:49,270 --> 00:38:54,430
influenced every single interface in the

00:38:51,190 --> 00:38:56,560
PSR seven standard I'm only aware the

00:38:54,430 --> 00:38:58,420
three components actually do every

00:38:56,560 --> 00:39:05,260
single interface and the actress is by

00:38:58,420 --> 00:39:07,360
far the most popular we have a few

00:39:05,260 --> 00:39:08,950
specialized responses it turns out that

00:39:07,360 --> 00:39:10,900
we do quite a lot of adjacent nowadays

00:39:08,950 --> 00:39:12,820
it turns out that we send redirect

00:39:10,900 --> 00:39:14,650
headers quite frequently it turns out

00:39:12,820 --> 00:39:17,110
that we send empty responses quite

00:39:14,650 --> 00:39:18,520
frequently as well so there are some

00:39:17,110 --> 00:39:24,250
specialized responses built into the

00:39:18,520 --> 00:39:27,190
actress to make that easier for you it

00:39:24,250 --> 00:39:30,340
is used by symphony for their PSR 7

00:39:27,190 --> 00:39:32,820
bridge she's used by Zen framework 3/4

00:39:30,340 --> 00:39:35,740
and frameworks pear sauce and bridge

00:39:32,820 --> 00:39:37,690
therefore it is used by laravel when

00:39:35,740 --> 00:39:43,740
they need to go to pass our seven it is

00:39:37,690 --> 00:39:46,180
also used by that Drupal they use

00:39:43,740 --> 00:39:48,700
symfony components they use a diffusion

00:39:46,180 --> 00:39:50,980
foundation if you need to take for HGTV

00:39:48,700 --> 00:39:54,250
foundation and get into PSR seven you're

00:39:50,980 --> 00:39:56,380
going to be using the actress this means

00:39:54,250 --> 00:39:58,750
it is very well tested remarkably

00:39:56,380 --> 00:40:00,640
bug-free because an awful lot of people

00:39:58,750 --> 00:40:06,760
have been using it and sorting this out

00:40:00,640 --> 00:40:08,620
it's very very nice the thing about

00:40:06,760 --> 00:40:11,620
having a standardized request and

00:40:08,620 --> 00:40:15,130
response object is that we can start

00:40:11,620 --> 00:40:18,520
manipulating requests and responses in a

00:40:15,130 --> 00:40:23,910
library agnostic way in a framework

00:40:18,520 --> 00:40:26,710
agnostic way we can take an HTTP request

00:40:23,910 --> 00:40:29,830
modify it and do something with it

00:40:26,710 --> 00:40:33,700
independent of anything else and that's

00:40:29,830 --> 00:40:36,940
called middleware middleware is not new

00:40:33,700 --> 00:40:39,460
at all it will become more and more

00:40:36,940 --> 00:40:42,760
important in the PHP world but you can

00:40:39,460 --> 00:40:44,680
see it in every single other web

00:40:42,760 --> 00:40:46,990
language in the world

00:40:44,680 --> 00:40:50,230
in the node world is called expressive

00:40:46,990 --> 00:40:52,270
and sorry Express and connect they are

00:40:50,230 --> 00:40:54,150
what they do middleware and stuff like

00:40:52,270 --> 00:40:58,539
that

00:40:54,150 --> 00:41:01,089
Python WSGI in Perl it's called plaque

00:40:58,539 --> 00:41:04,289
in Ruby it's called rock there's

00:41:01,089 --> 00:41:07,480
obviously some sin basis going on there

00:41:04,289 --> 00:41:09,910
in the PHP world we've had something in

00:41:07,480 --> 00:41:10,650
the symphony arena called stack for a

00:41:09,910 --> 00:41:13,750
while

00:41:10,650 --> 00:41:15,490
slim framework has had mid the West for

00:41:13,750 --> 00:41:18,339
at least the last three or four years it

00:41:15,490 --> 00:41:21,309
is quite a common paradigm and I think

00:41:18,339 --> 00:41:25,270
we will see it much much more over the

00:41:21,309 --> 00:41:27,849
next few years it will come the common

00:41:25,270 --> 00:41:30,910
way to manipulate requests and responses

00:41:27,849 --> 00:41:34,720
in our PHP applications primarily due to

00:41:30,910 --> 00:41:41,319
PSR 7 so what I talked about bit away

00:41:34,720 --> 00:41:44,289
this is the basic concept everyone else

00:41:41,319 --> 00:41:46,140
uses a sort of onion target think I get

00:41:44,289 --> 00:41:49,119
confused by that one so I don't use it

00:41:46,140 --> 00:41:51,099
we have discrete components discrete

00:41:49,119 --> 00:41:55,390
things so I've got a session I've got a

00:41:51,099 --> 00:41:58,480
north and I've got my app for each block

00:41:55,390 --> 00:42:01,890
of code I get a request in the response

00:41:58,480 --> 00:42:04,900
and I can do something with them

00:42:01,890 --> 00:42:07,720
optionally I can then pass them down to

00:42:04,900 --> 00:42:12,520
the next component the Nets block of

00:42:07,720 --> 00:42:15,579
code so I've got my session I might look

00:42:12,520 --> 00:42:17,230
at the cookie for the session in for the

00:42:15,579 --> 00:42:18,760
session cookie and load the data out of

00:42:17,230 --> 00:42:22,480
the database or whatever start the

00:42:18,760 --> 00:42:24,520
session up then I can go to my author

00:42:22,480 --> 00:42:26,200
components my auth component might look

00:42:24,520 --> 00:42:28,299
at the authorization header in the

00:42:26,200 --> 00:42:30,579
request object if there isn't an

00:42:28,299 --> 00:42:32,410
authorization header maybe it will

00:42:30,579 --> 00:42:35,650
terminate and send the response back a

00:42:32,410 --> 00:42:37,960
401 for instance or it might say yes

00:42:35,650 --> 00:42:40,599
I've you're logged in you may run the

00:42:37,960 --> 00:42:42,910
app so we have the situation where the

00:42:40,599 --> 00:42:44,920
request and response goes into a block

00:42:42,910 --> 00:42:47,020
of code that block of code can do

00:42:44,920 --> 00:42:49,089
something with it move it on to the next

00:42:47,020 --> 00:42:51,940
block of code it is a very very simple

00:42:49,089 --> 00:42:53,529
chain or

00:42:51,940 --> 00:42:57,309
you can see where the symphony guys got

00:42:53,529 --> 00:42:58,829
their name from code wise it looks

00:42:57,309 --> 00:43:02,200
something like that

00:42:58,829 --> 00:43:05,410
it's just a function signature it's just

00:43:02,200 --> 00:43:08,109
a callable you take a request you take a

00:43:05,410 --> 00:43:13,539
response and you take the next one in

00:43:08,109 --> 00:43:17,309
the chain you return a response the only

00:43:13,539 --> 00:43:19,569
requirement is he must return a response

00:43:17,309 --> 00:43:22,209
so you can do something with the request

00:43:19,569 --> 00:43:25,660
in response beforehand if the next is

00:43:22,209 --> 00:43:27,729
fail it ie not null you can call it or

00:43:25,660 --> 00:43:29,950
you can choose not to it's up to you and

00:43:27,729 --> 00:43:30,880
then you can return the response at the

00:43:29,950 --> 00:43:32,769
end or you can do something with the

00:43:30,880 --> 00:43:35,709
response before you return it it's a

00:43:32,769 --> 00:43:37,569
very very simple paradigm all of you

00:43:35,709 --> 00:43:39,369
understand exactly what that code does

00:43:37,569 --> 00:43:45,880
and it's been on slide for maybe 10

00:43:39,369 --> 00:43:48,640
seconds very very easy to write very

00:43:45,880 --> 00:43:50,799
very simple pattern modify their create

00:43:48,640 --> 00:43:53,109
request in response in folk dance

00:43:50,799 --> 00:43:55,180
middleware modified the return response

00:43:53,109 --> 00:44:01,119
if you can be bothered and then return

00:43:55,180 --> 00:44:03,519
it up the chain strategy leti is so

00:44:01,119 --> 00:44:06,579
desperate where implementation I did not

00:44:03,519 --> 00:44:10,299
name this and I apologize what can you

00:44:06,579 --> 00:44:11,499
do at least just a benefit that you're

00:44:10,299 --> 00:44:15,729
more likely to spell it correctly for

00:44:11,499 --> 00:44:17,650
Google then you are the actress they

00:44:15,729 --> 00:44:19,059
based nicely unique words but if you

00:44:17,650 --> 00:44:20,739
can't spell them Google can't find them

00:44:19,059 --> 00:44:24,309
anyway so I'm not sure how much we won

00:44:20,739 --> 00:44:26,920
their strategy leti is simply a

00:44:24,309 --> 00:44:28,719
mechanism for running middle-way you

00:44:26,920 --> 00:44:32,319
register your middleware strategy leti

00:44:28,719 --> 00:44:34,989
the execute run and it will run your

00:44:32,319 --> 00:44:36,819
middleware in child in down the chain

00:44:34,989 --> 00:44:38,410
for you that's all it does it's not

00:44:36,819 --> 00:44:44,739
particularly complicated in terms of its

00:44:38,410 --> 00:44:47,469
concepts middleware format is fragility

00:44:44,739 --> 00:44:49,059
is any callable reversing the signature

00:44:47,469 --> 00:44:51,549
and there is an interface if you would

00:44:49,059 --> 00:44:54,640
like to have an object-oriented thing to

00:44:51,549 --> 00:44:57,660
type int against so it is simply the

00:44:54,640 --> 00:45:01,020
same signature but within the interface

00:44:57,660 --> 00:45:02,850
they're very very simple

00:45:01,020 --> 00:45:04,500
one thing the strategy does that's

00:45:02,850 --> 00:45:05,940
different from the other Midwest acts

00:45:04,500 --> 00:45:08,190
out there because it's two or three now

00:45:05,940 --> 00:45:10,500
that you space or seven is that it does

00:45:08,190 --> 00:45:12,300
Arum it away and if you're used to the

00:45:10,500 --> 00:45:15,450
node way of looking at the world then

00:45:12,300 --> 00:45:17,820
this should look quite familiar if you

00:45:15,450 --> 00:45:19,619
pass a third parameter to next then

00:45:17,820 --> 00:45:22,200
instead of going down the Midway chain

00:45:19,619 --> 00:45:25,500
that runs your application you go down a

00:45:22,200 --> 00:45:27,840
different middleware chain which is the

00:45:25,500 --> 00:45:31,140
error middleware chain so we can process

00:45:27,840 --> 00:45:35,670
our errors in exactly the same way as we

00:45:31,140 --> 00:45:37,200
can process our standard application so

00:45:35,670 --> 00:45:39,210
you can do quite a lot with your error

00:45:37,200 --> 00:45:40,610
handling in terms of how you want to

00:45:39,210 --> 00:45:43,619
present your errors back to the browser

00:45:40,610 --> 00:45:45,210
using exactly the same paradigm as for

00:45:43,619 --> 00:45:46,800
writing your main application in the

00:45:45,210 --> 00:45:49,520
Midway from the plating requests and

00:45:46,800 --> 00:45:52,320
responses in your main application

00:45:49,520 --> 00:45:56,730
that's quite cool again it's got an

00:45:52,320 --> 00:46:00,119
interface strategy littie does pass

00:45:56,730 --> 00:46:02,460
segregation so we can split out blocks

00:46:00,119 --> 00:46:05,220
of middleware and only run them if there

00:46:02,460 --> 00:46:07,140
is a particular prefix on the URL it's

00:46:05,220 --> 00:46:09,090
not particularly complicated system it's

00:46:07,140 --> 00:46:11,880
not a Rooter it is simply a path match

00:46:09,090 --> 00:46:14,609
so we can only run the blog Midway if

00:46:11,880 --> 00:46:17,550
we're in the slash blog path for

00:46:14,609 --> 00:46:19,290
instance we can nest with the way so we

00:46:17,550 --> 00:46:21,630
can create a settlement we're in a pipe

00:46:19,290 --> 00:46:23,220
and we can attach that against a given

00:46:21,630 --> 00:46:23,720
path so we can create a tree of

00:46:23,220 --> 00:46:27,720
middleware

00:46:23,720 --> 00:46:30,990
and what that allows us to do is to wrap

00:46:27,720 --> 00:46:32,130
other applications within middleware so

00:46:30,990 --> 00:46:34,440
we can have this in framework to

00:46:32,130 --> 00:46:36,540
application as part of middleware pipe

00:46:34,440 --> 00:46:38,220
because in frame-up one application so

00:46:36,540 --> 00:46:41,490
we've got integration between different

00:46:38,220 --> 00:46:43,470
applications all within the same set of

00:46:41,490 --> 00:46:46,680
standardized request and response

00:46:43,470 --> 00:46:48,780
manipulation and this is actually been

00:46:46,680 --> 00:46:50,430
used in the real world a friend of mine

00:46:48,780 --> 00:46:53,750
who is actually on the slim framework

00:46:50,430 --> 00:46:56,520
project wrapped a CodeIgniter

00:46:53,750 --> 00:46:59,460
application into a strategy leti

00:46:56,520 --> 00:47:01,500
middleware in order for him to build his

00:46:59,460 --> 00:47:04,170
new functionality independent of the

00:47:01,500 --> 00:47:06,810
legacy code ignitor application but have

00:47:04,170 --> 00:47:09,350
a standardized session system it worked

00:47:06,810 --> 00:47:11,550
really well for him

00:47:09,350 --> 00:47:13,230
you gonna need some routine though a

00:47:11,550 --> 00:47:15,210
simple path matching isn't good enough

00:47:13,230 --> 00:47:16,440
you are going to need a DI container you

00:47:15,210 --> 00:47:20,250
are going to have to write the rest your

00:47:16,440 --> 00:47:23,550
application somewhere in there I've got

00:47:20,250 --> 00:47:25,050
three the MVC system allows route into

00:47:23,550 --> 00:47:27,240
middleware so we can route to

00:47:25,050 --> 00:47:29,490
controllers at the moment you can now

00:47:27,240 --> 00:47:31,200
route to middleware that's quite

00:47:29,490 --> 00:47:34,020
convenient that new middleware listener

00:47:31,200 --> 00:47:35,970
a level shoot to do that but much more

00:47:34,020 --> 00:47:39,360
interestingly is that we've written a

00:47:35,970 --> 00:47:40,860
micro framework called expressive now

00:47:39,360 --> 00:47:42,330
this is a name I do like I think

00:47:40,860 --> 00:47:45,660
expressive is quite a good name it's

00:47:42,330 --> 00:47:50,880
easy to Google and so very much micro

00:47:45,660 --> 00:47:53,880
framework is very very simple it is

00:47:50,880 --> 00:47:55,800
always written against interfaces so

00:47:53,880 --> 00:47:57,900
it's a routine interface I contain it

00:47:55,800 --> 00:47:59,940
interface optional templates interface

00:47:57,900 --> 00:48:03,060
and it provides your error handling for

00:47:59,940 --> 00:48:05,790
you that's all it does it's a micro

00:48:03,060 --> 00:48:08,220
framework literally and it's agnostic

00:48:05,790 --> 00:48:10,950
this is part of what I said about we

00:48:08,220 --> 00:48:14,070
want to be more interoperable so you

00:48:10,950 --> 00:48:16,350
don't have to use Zen Rooter you can use

00:48:14,070 --> 00:48:18,900
auras route or you can use phosphorus by

00:48:16,350 --> 00:48:21,720
default we prefer fast route with

00:48:18,900 --> 00:48:23,940
expressive very very nice Rooter I think

00:48:21,720 --> 00:48:26,340
everyone is using phosphor it now it's

00:48:23,940 --> 00:48:28,050
very becoming very standard I know lumen

00:48:26,340 --> 00:48:31,050
uses is the in framework uses it

00:48:28,050 --> 00:48:33,480
expressive uses it I think yeah I think

00:48:31,050 --> 00:48:35,820
they're the main three do I can tailor

00:48:33,480 --> 00:48:38,250
send service manager pimple or a DI any

00:48:35,820 --> 00:48:41,250
container interrupt di see they will all

00:48:38,250 --> 00:48:43,140
work with expressive we're not boxing

00:48:41,250 --> 00:48:44,760
you into a corner by using this micro

00:48:43,140 --> 00:48:49,070
framework similar with the templates

00:48:44,760 --> 00:48:49,070
plates twig sent view it's up to you

00:48:49,730 --> 00:48:55,080
installation is fire composure composure

00:48:52,500 --> 00:48:58,320
is the way we do things in the PHP world

00:48:55,080 --> 00:49:00,450
now so we'll need to compose a create

00:48:58,320 --> 00:49:03,450
project for expressive skeleton it will

00:49:00,450 --> 00:49:05,580
run a script that asks you which

00:49:03,450 --> 00:49:07,680
components you wish to install do you

00:49:05,580 --> 00:49:09,840
want which Rooter which container etc

00:49:07,680 --> 00:49:14,010
and then it will install them and create

00:49:09,840 --> 00:49:16,770
your composer JSON for you and it's

00:49:14,010 --> 00:49:19,369
really really simple that's an entire

00:49:16,770 --> 00:49:22,290
expressive application on a slide I

00:49:19,369 --> 00:49:25,380
can't do that with end MVC

00:49:22,290 --> 00:49:26,910
I don't think I could explain the whole

00:49:25,380 --> 00:49:29,040
MVC system in the length of this talk

00:49:26,910 --> 00:49:31,560
but I can explain expressive on a

00:49:29,040 --> 00:49:33,780
complete one complete slide that's how

00:49:31,560 --> 00:49:35,580
much simpler a microphone work is you

00:49:33,780 --> 00:49:38,130
create your application from the factory

00:49:35,580 --> 00:49:40,110
you write your route handler in this

00:49:38,130 --> 00:49:42,750
case against method that responds to

00:49:40,110 --> 00:49:46,740
slash hello slash name you write a

00:49:42,750 --> 00:49:48,780
callable that is middleware set up your

00:49:46,740 --> 00:49:50,610
application for pipe in the routine pipe

00:49:48,780 --> 00:49:53,000
in the dispatching and then you just

00:49:50,610 --> 00:49:55,950
call run and you're done

00:49:53,000 --> 00:49:58,620
it's not very complicated you build your

00:49:55,950 --> 00:50:03,540
application up out of these very small

00:49:58,620 --> 00:50:06,240
very simple middleware methods just like

00:50:03,540 --> 00:50:08,520
the MVC system or your real application

00:50:06,240 --> 00:50:10,590
or your service or your domain layer is

00:50:08,520 --> 00:50:12,660
completely independent of the dispatch

00:50:10,590 --> 00:50:13,380
in any way so you still have to write

00:50:12,660 --> 00:50:15,600
your own model

00:50:13,380 --> 00:50:20,220
that's not expresses problem it wasn't

00:50:15,600 --> 00:50:22,350
send MVC's problem again you can add

00:50:20,220 --> 00:50:23,700
other session other middleware like

00:50:22,350 --> 00:50:26,430
session middleware or or from either way

00:50:23,700 --> 00:50:29,130
the method we use is called pipe so I

00:50:26,430 --> 00:50:31,020
called a stack as far as expressive is

00:50:29,130 --> 00:50:32,940
concerned is considered a pipe of

00:50:31,020 --> 00:50:39,120
middleware and you just run the request

00:50:32,940 --> 00:50:42,390
down the pipe so template in by default

00:50:39,120 --> 00:50:43,950
in expressive back when we wrote it in

00:50:42,390 --> 00:50:45,570
framework one is in framework - we

00:50:43,950 --> 00:50:49,200
thought that everyone wrote HTML

00:50:45,570 --> 00:50:51,570
websites nowadays a lot of us are

00:50:49,200 --> 00:50:53,430
writing ap is you don't really need a

00:50:51,570 --> 00:50:55,440
few templating system for an API you

00:50:53,430 --> 00:50:58,710
just need to be able to generate JSON or

00:50:55,440 --> 00:51:00,630
XML so views are not provided by default

00:50:58,710 --> 00:51:02,460
there's a interface for it

00:51:00,630 --> 00:51:05,040
you can install a component for doing

00:51:02,460 --> 00:51:07,620
your views it's part of expressive in

00:51:05,040 --> 00:51:09,540
that sense but not all expressive

00:51:07,620 --> 00:51:12,360
applications will need a view so it is

00:51:09,540 --> 00:51:16,170
not provided by default we only provide

00:51:12,360 --> 00:51:19,080
the codes we know you will need all

00:51:16,170 --> 00:51:23,700
templates agnostic is the higher thing

00:51:19,080 --> 00:51:26,100
is agnostic so why do we write

00:51:23,700 --> 00:51:29,790
expressive number one reason is it's

00:51:26,100 --> 00:51:32,640
quick we've just made Zend MVC version

00:51:29,790 --> 00:51:35,880
three four to eight times faster than it

00:51:32,640 --> 00:51:41,640
was expressive is much much faster he

00:51:35,880 --> 00:51:43,380
very very little can't go wrong the

00:51:41,640 --> 00:51:46,710
developer experience as I say I

00:51:43,380 --> 00:51:48,990
explained how expressive works in a

00:51:46,710 --> 00:51:52,019
single slide you can't do that with an

00:51:48,990 --> 00:51:53,640
MVC it's a very very easy system to

00:51:52,019 --> 00:51:54,150
understand it's very easy system to pick

00:51:53,640 --> 00:51:56,670
up

00:51:54,150 --> 00:52:00,210
I think microphone works and those type

00:51:56,670 --> 00:52:02,579
of dispatch systems will become the de

00:52:00,210 --> 00:52:06,619
facto standards because they are easier

00:52:02,579 --> 00:52:06,619
for everyone to work out what's going on

00:52:06,799 --> 00:52:13,609
and the whole concept of reusable went

00:52:10,079 --> 00:52:16,170
away not that particular signature

00:52:13,609 --> 00:52:17,880
request/response next is used by a lot

00:52:16,170 --> 00:52:19,200
of frameworks now you could use

00:52:17,880 --> 00:52:24,119
middleware that's written to that

00:52:19,200 --> 00:52:29,190
pattern in slim in radar in expressive

00:52:24,119 --> 00:52:31,529
in lumen not sure about stack I've never

00:52:29,190 --> 00:52:33,750
actually written anything in that sort

00:52:31,529 --> 00:52:36,660
of over there so I don't know but

00:52:33,750 --> 00:52:38,069
there's a lot of commonality going on so

00:52:36,660 --> 00:52:41,039
if someone has written some middleware

00:52:38,069 --> 00:52:43,799
for PSR 7 you can use it in expressive

00:52:41,039 --> 00:52:47,009
you don't need people to write send

00:52:43,799 --> 00:52:50,130
framework specific plugins or same

00:52:47,009 --> 00:52:52,920
framework specific modules if someone

00:52:50,130 --> 00:52:54,690
has written a piece of middleware that

00:52:52,920 --> 00:52:57,720
they needed for their slim application

00:52:54,690 --> 00:52:59,670
you can use it in expressive there are

00:52:57,720 --> 00:53:01,950
sites that are and github repositories

00:52:59,670 --> 00:53:04,589
are springing up that are full of PSR

00:53:01,950 --> 00:53:06,240
mid away very very small components that

00:53:04,589 --> 00:53:07,890
you can chain together in the order that

00:53:06,240 --> 00:53:12,119
you need them to work in it's very

00:53:07,890 --> 00:53:14,279
powerful this is what we're calling

00:53:12,119 --> 00:53:16,529
their Zen framework 3 era or the same

00:53:14,279 --> 00:53:20,039
framework 3 story it is much more than

00:53:16,529 --> 00:53:22,200
just a version upgrade on our MVC system

00:53:20,039 --> 00:53:23,369
we're doing a lot more we're creating

00:53:22,200 --> 00:53:25,769
several components that you can use

00:53:23,369 --> 00:53:28,079
independently far better depends at f/2

00:53:25,769 --> 00:53:29,880
we are improving the MVC we still think

00:53:28,079 --> 00:53:32,849
new MVC is important it will have a

00:53:29,880 --> 00:53:35,130
version 3 tag we like it a lot we think

00:53:32,849 --> 00:53:39,359
it will still be in use we expect

00:53:35,130 --> 00:53:41,460
everyone to upgrade to it strategy leti

00:53:39,359 --> 00:53:44,190
the PSR 7 bid aware foundation and

00:53:41,460 --> 00:53:46,589
expressive our micro framework we think

00:53:44,190 --> 00:53:49,390
are where the future will be in five six

00:53:46,589 --> 00:53:52,090
years time so that's where we're going

00:53:49,390 --> 00:53:54,640
whole point of all this is to help you

00:53:52,090 --> 00:53:56,890
write the applications that you actually

00:53:54,640 --> 00:53:59,640
want to write and not feel like you are

00:53:56,890 --> 00:54:05,760
constrained within this in framework box

00:53:59,640 --> 00:54:05,760
that's it has anyone got any questions

00:54:10,740 --> 00:54:15,720
you when you talked about the service

00:54:13,030 --> 00:54:19,270
manager and you said that factory should

00:54:15,720 --> 00:54:21,370
use the invoke magic method now yeah do

00:54:19,270 --> 00:54:23,410
you know if it's backwards compatible to

00:54:21,370 --> 00:54:27,190
the factory interface yes

00:54:23,410 --> 00:54:29,080
ok cool ok it's indeed we're very very

00:54:27,190 --> 00:54:32,380
big on backward compatibility it's in

00:54:29,080 --> 00:54:34,570
framework world there's a reason why is

00:54:32,380 --> 00:54:37,540
in framework is one is still supported

00:54:34,570 --> 00:54:39,580
we still pass 610 framework one we fix

00:54:37,540 --> 00:54:41,800
any VC breaks we accidentally introduced

00:54:39,580 --> 00:54:44,350
into the framework one we did the same

00:54:41,800 --> 00:54:46,810
in Zen framework - there was no way we

00:54:44,350 --> 00:54:48,910
were going to do a change to ZF 2 to

00:54:46,810 --> 00:54:50,620
make it migrated to porters at f3 and

00:54:48,910 --> 00:54:54,640
make it back to the compatibility or

00:54:50,620 --> 00:54:55,780
incompatible so yes we the interfaces

00:54:54,640 --> 00:54:59,140
has been swapped around

00:54:55,780 --> 00:55:02,260
so in Zen framework 2.6 I think it was

00:54:59,140 --> 00:55:05,200
no 2.7 we swapped the interfaces around

00:55:02,260 --> 00:55:07,450
from the factories so that the new

00:55:05,200 --> 00:55:10,780
interface is the parent of the old

00:55:07,450 --> 00:55:12,550
interface so you can literally migrate

00:55:10,780 --> 00:55:14,590
every single factory you've got now to

00:55:12,550 --> 00:55:17,980
the new format and still run your Zen

00:55:14,590 --> 00:55:20,560
framework to application anyone else got

00:55:17,980 --> 00:55:23,110
a question I was I so clear that it all

00:55:20,560 --> 00:55:26,830
made sense there's one at the back there

00:55:23,110 --> 00:55:30,640
I like watching people run it's good

00:55:26,830 --> 00:55:33,280
exercise for them how would you compare

00:55:30,640 --> 00:55:35,730
using expressive to using slim and do

00:55:33,280 --> 00:55:39,490
you have a favorite do I have a favorite

00:55:35,730 --> 00:55:41,530
right so I'm also a cockroach or a

00:55:39,490 --> 00:55:45,250
toothless in framework so I have skin in

00:55:41,530 --> 00:55:47,620
both games they've got slightly

00:55:45,250 --> 00:55:50,770
different focuses slim framework is

00:55:47,620 --> 00:55:53,380
smaller in some ways it is more tightly

00:55:50,770 --> 00:55:57,270
coupled it is easier to get going with

00:55:53,380 --> 00:55:59,860
in some ways and expressive is more

00:55:57,270 --> 00:56:01,720
correct in terms of the way you handle

00:55:59,860 --> 00:56:02,890
dependency injection the way that it

00:56:01,720 --> 00:56:06,460
builds up

00:56:02,890 --> 00:56:08,440
the agnostic routine for instance so you

00:56:06,460 --> 00:56:11,440
can't swap out the Rooter in slim as

00:56:08,440 --> 00:56:12,010
easy as she can in expressive I like

00:56:11,440 --> 00:56:14,529
them both

00:56:12,010 --> 00:56:17,019
I've got apps in both now but when I say

00:56:14,529 --> 00:56:18,279
I I mean my clients because I tend to

00:56:17,019 --> 00:56:22,019
very much in terms of actual writing

00:56:18,279 --> 00:56:22,019
code anymore I just direct other people

00:56:22,890 --> 00:56:28,450
yeah and it depends on what you tried to

00:56:25,299 --> 00:56:30,789
do the expressive application that I

00:56:28,450 --> 00:56:33,430
currently involved in Ronson on is 400

00:56:30,789 --> 00:56:36,369
for instance send have got the resources

00:56:33,430 --> 00:56:39,160
to check it works on a nice 400 the slim

00:56:36,369 --> 00:56:41,410
frame what doesn't so clearly if you're

00:56:39,160 --> 00:56:44,829
targeting platforms like that your talk

00:56:41,410 --> 00:56:47,829
to him is 400 run in the db2 database

00:56:44,829 --> 00:56:50,230
running XenServer then expressive makes

00:56:47,829 --> 00:56:52,329
a lot of sense if you're writing a very

00:56:50,230 --> 00:56:54,010
small API that's run in little micro

00:56:52,329 --> 00:56:55,660
service or something or other then you

00:56:54,010 --> 00:56:57,700
might get going with slim a lot faster

00:56:55,660 --> 00:56:59,559
there's less code to learn this it's a

00:56:57,700 --> 00:57:01,390
much smaller framework so even within

00:56:59,559 --> 00:57:02,589
the micro framework world we have very

00:57:01,390 --> 00:57:05,920
small frameworks and we have slightly

00:57:02,589 --> 00:57:07,059
larger microphone work so your mileage

00:57:05,920 --> 00:57:15,490
varies as they say

00:57:07,059 --> 00:57:16,690
does it help okay cool and what else did

00:57:15,490 --> 00:57:18,190
you waving right at the back of there's

00:57:16,690 --> 00:57:22,089
no way anyone can see you it's yourself

00:57:18,190 --> 00:57:23,319
closer okay I assume that there aren't

00:57:22,089 --> 00:57:25,390
any more questions so thank you very

00:57:23,319 --> 00:57:28,089
much for listening please rate my talk

00:57:25,390 --> 00:57:30,460
on that URL there or just go to joined

00:57:28,089 --> 00:57:32,109
in PHP UK conference will be the top of

00:57:30,460 --> 00:57:34,809
the hot events list bye now at least it

00:57:32,109 --> 00:57:37,119
ought to be and rate every other talk

00:57:34,809 --> 00:57:39,039
you see as well I help maintain joint in

00:57:37,119 --> 00:57:41,619
I would quite like to see lots and lots

00:57:39,039 --> 00:57:45,299
of ratings for this conference on my

00:57:41,619 --> 00:57:45,299

YouTube URL: https://www.youtube.com/watch?v=ycNDcPuIK8o


