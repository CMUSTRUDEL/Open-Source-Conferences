Title: PHP UK Conference 2016 - James Titcumb  - Dip Your Toes in the Sea of Security
Publication date: 2016-03-16
Playlist: PHP UK Conference 2016
Description: 
	Security is an enormous topic, and it’s really, really complicated. If you’re not careful, you’ll find yourself vulnerable to any number of attacks which you definitely don’t want to be on the receiving end of. This talk will give you just a taster of the vast array of things there is to know about security in modern web applications, such as writing secure PHP web applications and securing a Linux server. Whether you are writing anything beyond a basic brochure website, or even developing a complicated business web application, this talk will give you insights to some of the things you need to be aware of.
Captions: 
	00:00:05,479 --> 00:00:11,580
my name is James stickam as it says here

00:00:07,889 --> 00:00:14,759
I've been doing PHP for about 13 14 as

00:00:11,580 --> 00:00:17,849
years now I'm a Zen certified engineer

00:00:14,759 --> 00:00:21,239
because we like doing exams as we heard

00:00:17,849 --> 00:00:24,809
this morning I work for a company called

00:00:21,239 --> 00:00:27,950
Rove at the moment we do sort of various

00:00:24,809 --> 00:00:30,360
contracts around the world and

00:00:27,950 --> 00:00:32,489
apparently we've been described as like

00:00:30,360 --> 00:00:36,840
a SWAT team that comes in and saves

00:00:32,489 --> 00:00:38,100
projects not my words I also run the PHP

00:00:36,840 --> 00:00:40,050
Hampshire user group which is down the

00:00:38,100 --> 00:00:41,370
south coast so if you're in the area and

00:00:40,050 --> 00:00:44,490
you haven't heard a PHP Hampshire where

00:00:41,370 --> 00:00:47,280
have you been come along please it's a

00:00:44,490 --> 00:00:50,720
good fun I also run the PHP south coast

00:00:47,280 --> 00:00:54,180
conference more on that in just a sec

00:00:50,720 --> 00:00:55,829
and I do obviously open source stuff I

00:00:54,180 --> 00:00:59,190
do a library called better reflection

00:00:55,829 --> 00:01:01,410
and also the browser capabilities

00:00:59,190 --> 00:01:06,840
project which is like a big any file

00:01:01,410 --> 00:01:08,700
database of user agents matching so yes

00:01:06,840 --> 00:01:11,130
a quick plug about the PSP south coast

00:01:08,700 --> 00:01:13,020
conference thank you everyone for coming

00:01:11,130 --> 00:01:16,619
to the talk if you like to come to the

00:01:13,020 --> 00:01:18,149
conference the next 20 people to buy a

00:01:16,619 --> 00:01:20,789
ticket using this code will receive a

00:01:18,149 --> 00:01:28,439
ten-pound discount so just by coming to

00:01:20,789 --> 00:01:30,659
this talk you're already quids in so on

00:01:28,439 --> 00:01:32,039
with the talk we're going to dip our

00:01:30,659 --> 00:01:33,119
toes into the sea of security Oh

00:01:32,039 --> 00:01:34,529
actually before I mention I should

00:01:33,119 --> 00:01:38,249
probably explain why I have an eye patch

00:01:34,529 --> 00:01:40,740
so the other day I was doing some work

00:01:38,249 --> 00:01:42,659
in my loft and I got a corneal abrasion

00:01:40,740 --> 00:01:45,950
and then everyone said I should wear an

00:01:42,659 --> 00:01:51,509
eye patch so here it is Thank You Geordi

00:01:45,950 --> 00:01:54,509
anyway the talk yes um so hands up if

00:01:51,509 --> 00:02:00,289
you think that this code is reasonably

00:01:54,509 --> 00:02:02,609
secure no hands can anyone tell me why

00:02:00,289 --> 00:02:08,130
like just shout as loud as you can i'll

00:02:02,609 --> 00:02:09,599
repeat it for the video so you all don't

00:02:08,130 --> 00:02:13,620
think it's secure be no one knows why

00:02:09,599 --> 00:02:14,909
okay that's fine um we can't one hundred

00:02:13,620 --> 00:02:17,660
percent guarantee this courtesy oh I

00:02:14,909 --> 00:02:19,370
mean it's written fairly well you know

00:02:17,660 --> 00:02:24,680
there could be holes picked in it of

00:02:19,370 --> 00:02:27,770
course but then what about if the the

00:02:24,680 --> 00:02:29,810
value in a or b was an arbitrarily huge

00:02:27,770 --> 00:02:33,680
number or contained a load of

00:02:29,810 --> 00:02:38,480
arbitrarily random data that had weird

00:02:33,680 --> 00:02:40,430
characters that did weird things some

00:02:38,480 --> 00:02:43,940
things are out of our direct control so

00:02:40,430 --> 00:02:46,430
for example you know we run PHP but we

00:02:43,940 --> 00:02:48,410
don't have necessarily have quick direct

00:02:46,430 --> 00:02:51,500
access to be able to fix a security bug

00:02:48,410 --> 00:02:53,510
in PHP itself I mean obviously you can

00:02:51,500 --> 00:02:56,240
download the source code you can fix the

00:02:53,510 --> 00:02:57,650
bug yourself if you know how to reap a

00:02:56,240 --> 00:02:59,780
chit and deploy it to your servers but

00:02:57,650 --> 00:03:01,820
there's a lot of effort and if your

00:02:59,780 --> 00:03:04,760
company is burning right now that's

00:03:01,820 --> 00:03:08,390
that's quite a tall order and also we

00:03:04,760 --> 00:03:09,800
run everything on apache or nginx you

00:03:08,390 --> 00:03:14,720
know or any other web server that's

00:03:09,800 --> 00:03:17,360
available you take your pick and then

00:03:14,720 --> 00:03:20,780
also we run things on Linux usually

00:03:17,360 --> 00:03:24,410
sometimes Windows servers you know maybe

00:03:20,780 --> 00:03:26,120
the occasional OS x server but you know

00:03:24,410 --> 00:03:31,090
it's even harder to patch things then

00:03:26,120 --> 00:03:33,700
and there out of our direct control and

00:03:31,090 --> 00:03:37,459
the point I'm making through this talk

00:03:33,700 --> 00:03:40,510
and if any of you did any of you see

00:03:37,459 --> 00:03:43,340
Thomas's security talk earlier today

00:03:40,510 --> 00:03:44,390
okay fair for you of you so you'll

00:03:43,340 --> 00:03:45,890
probably have learned from that that

00:03:44,390 --> 00:03:47,570
security is a really hard thing and

00:03:45,890 --> 00:03:50,900
that's a message i reinforce in my talk

00:03:47,570 --> 00:03:52,489
quite a lot as well so we're gonna have

00:03:50,900 --> 00:03:53,780
a look out to sea and I'm going to take

00:03:52,489 --> 00:03:56,000
my art patch off now because it's kind

00:03:53,780 --> 00:03:59,810
of annoying I can see half the room now

00:03:56,000 --> 00:04:01,280
hello everyone alright we're going to

00:03:59,810 --> 00:04:03,140
look out to see because there's a lot of

00:04:01,280 --> 00:04:06,680
ocean out there and there's a lot of

00:04:03,140 --> 00:04:09,200
things to know this by the way is the

00:04:06,680 --> 00:04:12,020
south coast in Portsmouth we have a

00:04:09,200 --> 00:04:14,300
stony beach it does help to know the big

00:04:12,020 --> 00:04:17,169
things though right so that's what I'm

00:04:14,300 --> 00:04:19,130
going to talk you through today and

00:04:17,169 --> 00:04:21,680
you're probably going to know some of

00:04:19,130 --> 00:04:23,330
the stuff in here I hope you do but it

00:04:21,680 --> 00:04:25,430
does not hurt to bet get reminded that

00:04:23,330 --> 00:04:27,620
you should always be trying to practice

00:04:25,430 --> 00:04:29,210
secure web application development when

00:04:27,620 --> 00:04:31,390
you can but not when you can all the

00:04:29,210 --> 00:04:37,360
time it's the whole point right

00:04:31,390 --> 00:04:40,870
so i invented these golden rules they

00:04:37,360 --> 00:04:44,500
sort of made up but their rules that I

00:04:40,870 --> 00:04:45,760
developed by from making mistakes and

00:04:44,500 --> 00:04:49,270
learning the things the hard way

00:04:45,760 --> 00:04:52,240
sometimes I like most of you I think

00:04:49,270 --> 00:04:53,830
maybe all of you are human and as we

00:04:52,240 --> 00:04:56,020
learn from the keynote yesterday you

00:04:53,830 --> 00:05:04,330
know we all make make mistakes it does

00:04:56,020 --> 00:05:08,220
happen unfortunately so first one keep

00:05:04,330 --> 00:05:11,890
things simple don't overthink problems

00:05:08,220 --> 00:05:14,800
it's sounds simpler to say than it is to

00:05:11,890 --> 00:05:17,890
actually do but when you're writing an

00:05:14,800 --> 00:05:20,170
application and you're thinking oh let's

00:05:17,890 --> 00:05:21,850
make this new feature and we start

00:05:20,170 --> 00:05:25,060
plumbing in things in the feature creep

00:05:21,850 --> 00:05:28,120
goes up and up and up not only is that

00:05:25,060 --> 00:05:29,590
see creating feature creep which I think

00:05:28,120 --> 00:05:33,820
most of us know is is fairly difficult

00:05:29,590 --> 00:05:35,920
to manage it also overcomplicates and

00:05:33,820 --> 00:05:40,840
creates more security vectors with more

00:05:35,920 --> 00:05:43,420
security attack vectors when you're

00:05:40,840 --> 00:05:45,550
looking at code as well simpler code is

00:05:43,420 --> 00:05:48,550
much easier to read and understand what

00:05:45,550 --> 00:05:50,800
is going on if you don't know what's

00:05:48,550 --> 00:05:52,920
going on and there's just this mess of

00:05:50,800 --> 00:05:56,230
code how are you supposed to identify

00:05:52,920 --> 00:05:59,560
security vulnerabilities here so my

00:05:56,230 --> 00:06:03,490
advice is to start off simple as you can

00:05:59,560 --> 00:06:06,280
and then add complexity later in small

00:06:03,490 --> 00:06:08,170
bits right start off simple and try and

00:06:06,280 --> 00:06:10,390
keep it simple but if you need that

00:06:08,170 --> 00:06:15,220
extra functionality do it in small bits

00:06:10,390 --> 00:06:17,950
and test it of course knowing the risks

00:06:15,220 --> 00:06:22,990
is number two keeping up to date with

00:06:17,950 --> 00:06:28,060
security news you know pretty much every

00:06:22,990 --> 00:06:29,790
month multiple CVS or common

00:06:28,060 --> 00:06:32,050
vulnerabilities and exposures that

00:06:29,790 --> 00:06:33,640
basically like bug reports but security

00:06:32,050 --> 00:06:38,680
reports if you've never heard of them

00:06:33,640 --> 00:06:41,229
are found in PHP note loads all the time

00:06:38,680 --> 00:06:44,199
so we have to be able to keep up to date

00:06:41,229 --> 00:06:46,560
with these things quite a common way of

00:06:44,199 --> 00:06:49,570
doing this is just social media right

00:06:46,560 --> 00:06:51,729
you know you've probably all heard of

00:06:49,570 --> 00:06:52,990
poodle and heart bead and heart bleed

00:06:51,729 --> 00:06:55,690
and shell-shocked and things like that

00:06:52,990 --> 00:06:58,240
and you've probably heard of those

00:06:55,690 --> 00:06:59,949
through Twitter or you know via word of

00:06:58,240 --> 00:07:01,900
mouth and things like that but getting

00:06:59,949 --> 00:07:03,310
involved in your community and keeping

00:07:01,900 --> 00:07:04,930
in touch with the community coming into

00:07:03,310 --> 00:07:07,000
events like this and talking to fellow

00:07:04,930 --> 00:07:09,190
developers going to your local user

00:07:07,000 --> 00:07:10,990
group you know you'll probably hear

00:07:09,190 --> 00:07:13,270
about security vulnerabilities or at

00:07:10,990 --> 00:07:14,979
least the major ones because they'll be

00:07:13,270 --> 00:07:18,039
you know the talk of the talk of the day

00:07:14,979 --> 00:07:19,930
I mentioned of course common

00:07:18,039 --> 00:07:23,050
vulnerabilities and exposures or CVS

00:07:19,930 --> 00:07:25,270
it's basically a big database and if you

00:07:23,050 --> 00:07:27,370
ever unsure oh I'm not sure if you know

00:07:25,270 --> 00:07:30,039
PHP or Apache has any vulnerabilities in

00:07:27,370 --> 00:07:31,210
my current version you can just type in

00:07:30,039 --> 00:07:33,669
the package name and the version that

00:07:31,210 --> 00:07:37,360
you have and it will tell you what's

00:07:33,669 --> 00:07:41,919
there so the next one is failed security

00:07:37,360 --> 00:07:44,970
that fail securely sorry now I'll use a

00:07:41,919 --> 00:07:46,930
real world example to explain this one

00:07:44,970 --> 00:07:50,500
there's lots of red lights going off

00:07:46,930 --> 00:07:52,599
that doesn't look good um so a real

00:07:50,500 --> 00:07:56,280
world example here is an electric door

00:07:52,599 --> 00:07:59,919
lock right and the power goes out

00:07:56,280 --> 00:08:01,690
failing safely is where the door has a

00:07:59,919 --> 00:08:03,970
manual override that will allow you to

00:08:01,690 --> 00:08:07,360
you know still exit or enter through

00:08:03,970 --> 00:08:09,940
that door if the power goes out now

00:08:07,360 --> 00:08:11,889
failing securely is where that lock

00:08:09,940 --> 00:08:14,919
stays shut it doesn't move or see it

00:08:11,889 --> 00:08:17,919
can't move because there's no power so

00:08:14,919 --> 00:08:20,409
you can't get on in or out now imagine

00:08:17,919 --> 00:08:22,080
if you're in a parlor right and this pub

00:08:20,409 --> 00:08:25,360
had this electric lock on the front

00:08:22,080 --> 00:08:27,550
you'd probably want that lock to fail

00:08:25,360 --> 00:08:29,889
safely you still want to be able to get

00:08:27,550 --> 00:08:31,330
out when times up or at least that the

00:08:29,889 --> 00:08:36,839
landlord probably wants to get out with

00:08:31,330 --> 00:08:40,300
times up and be able to go home but

00:08:36,839 --> 00:08:42,909
imagine if that lock was on a prison you

00:08:40,300 --> 00:08:44,709
probably want that to fail securely

00:08:42,909 --> 00:08:48,640
because you don't want all the prisons

00:08:44,709 --> 00:08:50,829
who's getting out now imagine on it's a

00:08:48,640 --> 00:08:52,370
room that imagine that lock is on a room

00:08:50,829 --> 00:08:54,710
that contains your credit card details

00:08:52,370 --> 00:08:58,430
yeah I think you can see where I'm going

00:08:54,710 --> 00:09:01,370
with this is use failing safely versus

00:08:58,430 --> 00:09:03,529
failing securely appropriately then

00:09:01,370 --> 00:09:10,450
always fail securely you might not need

00:09:03,529 --> 00:09:10,450
to but use your use your judgment there

00:09:10,510 --> 00:09:17,960
so number four is don't reinvent the

00:09:13,520 --> 00:09:21,110
wheel now as I've said already security

00:09:17,960 --> 00:09:25,550
is a really hard hard thing to do right

00:09:21,110 --> 00:09:27,620
and get right every single time so let

00:09:25,550 --> 00:09:32,390
the experts do the work or the hard work

00:09:27,620 --> 00:09:34,339
so for example if you wanted to write

00:09:32,390 --> 00:09:35,960
some encryption into your application

00:09:34,339 --> 00:09:38,060
you know don't go off and write your own

00:09:35,960 --> 00:09:40,250
encryption library use a package that

00:09:38,060 --> 00:09:41,810
does it for you use libraries that

00:09:40,250 --> 00:09:44,390
already exist because they've probably

00:09:41,810 --> 00:09:49,160
been much more vetted than your code

00:09:44,390 --> 00:09:53,089
that you've you've written has been so

00:09:49,160 --> 00:09:57,110
yeah number five never trust anything or

00:09:53,089 --> 00:10:00,370
anyone never trust your input for your

00:09:57,110 --> 00:10:03,110
application hopefully we know this one

00:10:00,370 --> 00:10:04,250
never trust you database records because

00:10:03,110 --> 00:10:06,740
although they may have already been

00:10:04,250 --> 00:10:10,040
through your application there's no

00:10:06,740 --> 00:10:11,570
guarantee that somehow some access has

00:10:10,040 --> 00:10:13,790
gotten someone's gotten access to the

00:10:11,570 --> 00:10:17,660
database outside of your application and

00:10:13,790 --> 00:10:19,310
has put in some Duff data so don't trust

00:10:17,660 --> 00:10:22,480
your users either we'll see they're the

00:10:19,310 --> 00:10:22,480
ones putting the input in and

00:10:22,570 --> 00:10:26,720
increasingly in it pains me to say it

00:10:24,709 --> 00:10:28,930
you may not even be able to trust the

00:10:26,720 --> 00:10:31,279
people that work at your own company

00:10:28,930 --> 00:10:33,800
there may be a disgruntled employee who

00:10:31,279 --> 00:10:35,750
got the sack today who's now walked off

00:10:33,800 --> 00:10:38,750
with your code base and this has

00:10:35,750 --> 00:10:40,940
happened I can't remember who it was I

00:10:38,750 --> 00:10:44,000
think it was yahoo or Y and X or

00:10:40,940 --> 00:10:45,200
something like that recently had a news

00:10:44,000 --> 00:10:48,230
report saying that you know they're all

00:10:45,200 --> 00:10:50,990
their code bases stolen you know so it

00:10:48,230 --> 00:10:53,830
does happen and it's rubbish I hope I

00:10:50,990 --> 00:10:56,930
hope we can stamp that out fairly quick

00:10:53,830 --> 00:11:00,250
so yeah your colleagues don't trust your

00:10:56,930 --> 00:11:02,589
spouse oh wait not that one not that one

00:11:00,250 --> 00:11:06,889
oops

00:11:02,589 --> 00:11:10,370
alright so if you're at thomas's talk

00:11:06,889 --> 00:11:13,389
you'll have heard about this the OWASP

00:11:10,370 --> 00:11:16,040
or open web application security project

00:11:13,389 --> 00:11:19,879
it was created in 2001 it's a

00:11:16,040 --> 00:11:22,870
not-for-profit non-biased organization

00:11:19,879 --> 00:11:24,860
that does security advice and sort of

00:11:22,870 --> 00:11:27,800
recommendations doesn't recommend

00:11:24,860 --> 00:11:29,720
specific services at specific services

00:11:27,800 --> 00:11:32,059
or anything like that they're not

00:11:29,720 --> 00:11:35,360
affiliated with any corporation so

00:11:32,059 --> 00:11:37,220
you're getting impartial advice here now

00:11:35,360 --> 00:11:39,350
they have this thing called the OWASP

00:11:37,220 --> 00:11:42,009
top ten if you don't know and it's

00:11:39,350 --> 00:11:43,959
basically the top ten list of

00:11:42,009 --> 00:11:47,120
vulnerabilities found in the wild

00:11:43,959 --> 00:11:49,309
ordered by you know how how how commonly

00:11:47,120 --> 00:11:51,649
they occur I'm not going to list all of

00:11:49,309 --> 00:11:53,509
them but you'll see on some of my slides

00:11:51,649 --> 00:11:55,999
I've got like number one number three or

00:11:53,509 --> 00:11:58,100
whatever and that's where they are in

00:11:55,999 --> 00:12:02,689
the top ten list and they're there for a

00:11:58,100 --> 00:12:04,100
good reason so the first part of my talk

00:12:02,689 --> 00:12:05,149
is going to be about application

00:12:04,100 --> 00:12:07,699
security and I'm going to do a little

00:12:05,149 --> 00:12:09,829
bit at the end about linux server

00:12:07,699 --> 00:12:14,300
security again from lessons that I've

00:12:09,829 --> 00:12:16,879
learned so as I said don't trust

00:12:14,300 --> 00:12:19,670
anything so you should always filter

00:12:16,879 --> 00:12:22,959
input and escape output very simple

00:12:19,670 --> 00:12:26,389
always remember that one that's like a

00:12:22,959 --> 00:12:29,240
the canonical advice for security when

00:12:26,389 --> 00:12:31,879
writing a web application and that

00:12:29,240 --> 00:12:37,730
includes api's and outputting Jason and

00:12:31,879 --> 00:12:40,309
stuff right not just HTML so the sea

00:12:37,730 --> 00:12:43,040
theme for this talk is mostly based

00:12:40,309 --> 00:12:45,069
around the Disney film Finding Nemo so

00:12:43,040 --> 00:12:51,290
you'll see lots of screenshots like this

00:12:45,069 --> 00:12:55,370
and this is the number one on the top 10

00:12:51,290 --> 00:12:57,379
list and it is SQL injection it's like a

00:12:55,370 --> 00:13:01,639
big great white shark pretty scary

00:12:57,379 --> 00:13:03,519
villain in the film right it's vicious

00:13:01,639 --> 00:13:06,699
uncompromising and has sharp teeth and

00:13:03,519 --> 00:13:10,509
it's number one for a reason because

00:13:06,699 --> 00:13:13,320
someone somewhere is still doing this

00:13:10,509 --> 00:13:14,640
yeah so

00:13:13,320 --> 00:13:18,480
hopefully we've heard of little Bobby

00:13:14,640 --> 00:13:24,510
tables it's an XKCD comic that explains

00:13:18,480 --> 00:13:28,650
SQL injection you know we have a phone

00:13:24,510 --> 00:13:30,570
call from the school and they're saying

00:13:28,650 --> 00:13:33,770
well all of our users are gone and

00:13:30,570 --> 00:13:38,340
that's because they named that their son

00:13:33,770 --> 00:13:41,550
Robert ' drop table students and so on

00:13:38,340 --> 00:13:45,540
and they've managed to drop all the all

00:13:41,550 --> 00:13:47,610
the students tables so the way to get

00:13:45,540 --> 00:13:49,470
around this is of course use P do if

00:13:47,610 --> 00:13:51,900
you're not using it already hopefully

00:13:49,470 --> 00:13:54,300
most of you now are because my SQL

00:13:51,900 --> 00:13:56,520
extension is has been deprecated for a

00:13:54,300 --> 00:13:58,500
while and it's now gone in PHP seven so

00:13:56,520 --> 00:14:01,050
if you've upgraded PhD seven and you

00:13:58,500 --> 00:14:04,020
were still using MySQL you probably will

00:14:01,050 --> 00:14:06,480
have got a bit of a surprise use

00:14:04,020 --> 00:14:08,730
prepared or parameterize statements

00:14:06,480 --> 00:14:11,490
whichever you want to call it and yes

00:14:08,730 --> 00:14:13,170
for many of this is basic stuff but you

00:14:11,490 --> 00:14:15,840
do need to know this and remember it all

00:14:13,170 --> 00:14:17,880
the time because sometimes you may be

00:14:15,840 --> 00:14:19,350
you know coding late at night or early

00:14:17,880 --> 00:14:20,760
in the morning when ever you prefer to

00:14:19,350 --> 00:14:23,750
and you might feel a bit lazy because

00:14:20,760 --> 00:14:28,260
it's prototyping stuff and you know a

00:14:23,750 --> 00:14:30,750
vulnerability slips in very easily and

00:14:28,260 --> 00:14:33,540
of course you can use libraries doctrine

00:14:30,750 --> 00:14:36,540
the one that comes with laravel you know

00:14:33,540 --> 00:14:39,450
all these other frameworks have database

00:14:36,540 --> 00:14:45,240
abstraction layers that do this for you

00:14:39,450 --> 00:14:47,940
so use them this is what not to do don't

00:14:45,240 --> 00:14:49,530
use you know your own homegrown database

00:14:47,940 --> 00:14:52,110
abstraction layer that doesn't escape

00:14:49,530 --> 00:14:54,090
anything very well and just write

00:14:52,110 --> 00:15:00,600
something directly from the query string

00:14:54,090 --> 00:15:04,640
into into your SQL query do it like this

00:15:00,600 --> 00:15:07,140
use prepared statements yeah it's also

00:15:04,640 --> 00:15:10,290
better to turn off emulated prepared

00:15:07,140 --> 00:15:13,530
statements if if that is on in your set

00:15:10,290 --> 00:15:16,470
up just because then it we use the

00:15:13,530 --> 00:15:18,630
capabilities of the engine the database

00:15:16,470 --> 00:15:21,960
engine as much as possible so it makes

00:15:18,630 --> 00:15:25,650
it a bit safer all right on to the next

00:15:21,960 --> 00:15:26,970
one this is a human but there's

00:15:25,650 --> 00:15:30,689
something

00:15:26,970 --> 00:15:33,600
very unhuman about what follows so I did

00:15:30,689 --> 00:15:39,779
a search on github last night for this

00:15:33,600 --> 00:15:43,709
and it came up with 57 570 3363 results

00:15:39,779 --> 00:15:50,759
for executing code directly from a get

00:15:43,709 --> 00:15:52,980
query string oh it's so frustrating to

00:15:50,759 --> 00:15:55,290
see something like this and I hope every

00:15:52,980 --> 00:15:58,649
single one of those 573 thousand dollars

00:15:55,290 --> 00:16:01,769
are just academic examples of what not

00:15:58,649 --> 00:16:03,360
to do because if they're not and that I

00:16:01,769 --> 00:16:05,879
have a sneaky suspicion that they're not

00:16:03,360 --> 00:16:08,939
then this is a big catalog of

00:16:05,879 --> 00:16:15,000
vulnerabilities and the same thing with

00:16:08,939 --> 00:16:17,240
eval 572 thousand results evaluating

00:16:15,000 --> 00:16:19,889
code directly from the query string

00:16:17,240 --> 00:16:21,750
don't use eval unless you know exactly

00:16:19,889 --> 00:16:25,259
what you're doing and you know how to do

00:16:21,750 --> 00:16:29,730
it properly just don't do it that's

00:16:25,259 --> 00:16:32,899
better not to so the next vulnerability

00:16:29,730 --> 00:16:35,100
is cross-site scripting or XSS as it's

00:16:32,899 --> 00:16:37,889
usually known as because we like

00:16:35,100 --> 00:16:39,930
acronyms this is the number three on the

00:16:37,889 --> 00:16:42,180
OWASP top 10 and they're a bit like

00:16:39,930 --> 00:16:43,680
jellyfish and the reason why i'd say

00:16:42,180 --> 00:16:45,600
that it's because they're they can

00:16:43,680 --> 00:16:47,939
sometimes be hard to see that they are

00:16:45,600 --> 00:16:51,149
actually very easy to avoid you just

00:16:47,939 --> 00:16:53,939
swim away from them and xss is the

00:16:51,149 --> 00:16:55,350
result of not escaping output so going

00:16:53,939 --> 00:16:58,379
back to what I said a min ago phil to

00:16:55,350 --> 00:17:03,899
input escape output and the solution is

00:16:58,379 --> 00:17:05,610
very simple if you have some javascript

00:17:03,899 --> 00:17:07,679
in a string doesn't matter how it got

00:17:05,610 --> 00:17:09,809
this for some you know maybe some user

00:17:07,679 --> 00:17:11,280
input or something if you just echo that

00:17:09,809 --> 00:17:13,169
the JavaScript's going to run in the

00:17:11,280 --> 00:17:16,319
browser and you know they can upload

00:17:13,169 --> 00:17:20,459
your cookies whatever might be the

00:17:16,319 --> 00:17:22,949
latest javascript style attack and if

00:17:20,459 --> 00:17:27,500
you simply escape it that javascript

00:17:22,949 --> 00:17:29,520
won't run it's as simple as that tools

00:17:27,500 --> 00:17:32,280
frameworks libraries and things like

00:17:29,520 --> 00:17:35,039
that they I help I'm pretty sure they've

00:17:32,280 --> 00:17:38,190
all got tools built in to do that you

00:17:35,039 --> 00:17:39,730
know Zen view twig plates they all have

00:17:38,190 --> 00:17:42,070
escaping stuff some

00:17:39,730 --> 00:17:44,080
sure using it you know if it's not on by

00:17:42,070 --> 00:17:46,210
default legs and a Zen view you have to

00:17:44,080 --> 00:17:49,090
manually type your skype HTML all the

00:17:46,210 --> 00:17:53,830
time which is a bit of a pain I have to

00:17:49,090 --> 00:17:55,570
say but make sure you do use it so this

00:17:53,830 --> 00:17:59,020
next one unfortunately I couldn't find a

00:17:55,570 --> 00:18:01,419
finding nemo image for a cuttlefish but

00:17:59,020 --> 00:18:03,940
a cross-site request forgery links up to

00:18:01,419 --> 00:18:06,400
a cuttlefish because a cuttlefish is the

00:18:03,940 --> 00:18:09,790
chameleon of the sea so it can blend

00:18:06,400 --> 00:18:12,780
into its background and the reason why I

00:18:09,790 --> 00:18:15,730
say that is because a CSRF attack is

00:18:12,780 --> 00:18:17,919
basically a forged HTTP request from

00:18:15,730 --> 00:18:19,690
somewhere else on the internet so

00:18:17,919 --> 00:18:26,290
someone pretending to be there not what

00:18:19,690 --> 00:18:28,390
they're not so the way to overcome a csr

00:18:26,290 --> 00:18:30,040
our tech is a little bit more

00:18:28,390 --> 00:18:32,470
complicated than just escaping output

00:18:30,040 --> 00:18:34,840
but it's still pretty simple right so

00:18:32,470 --> 00:18:39,610
what we do is we generate a token on the

00:18:34,840 --> 00:18:41,820
server we write it out with our form if

00:18:39,610 --> 00:18:45,130
we're writing HTML obviously and then

00:18:41,820 --> 00:18:47,010
when they submit the form verify that

00:18:45,130 --> 00:18:51,160
the token that was stored in session is

00:18:47,010 --> 00:18:52,630
the same one that you know comes through

00:18:51,160 --> 00:18:54,640
on the form submission if it doesn't

00:18:52,630 --> 00:18:58,210
match then it's not from your own form

00:18:54,640 --> 00:19:00,910
they can't guess that that a randomly

00:18:58,210 --> 00:19:06,910
generated string sometimes they might be

00:19:00,910 --> 00:19:09,340
able to but we'll see and all the good

00:19:06,910 --> 00:19:12,490
frameworks again they have tools allow

00:19:09,340 --> 00:19:14,590
you to do this very easily I imagine

00:19:12,490 --> 00:19:16,960
symphony form does Zen form definitely

00:19:14,590 --> 00:19:19,059
does and it's super simple you just add

00:19:16,960 --> 00:19:23,230
a csr I filled it does all the hard work

00:19:19,059 --> 00:19:25,080
for you now I just want to point out a

00:19:23,230 --> 00:19:27,820
couple of things about this code example

00:19:25,080 --> 00:19:31,330
note here that we're using this function

00:19:27,820 --> 00:19:33,850
called random bytes if you're not aware

00:19:31,330 --> 00:19:36,280
of all the new stuff in PHP 7 this is

00:19:33,850 --> 00:19:38,919
one of them and if you don't have PHP

00:19:36,280 --> 00:19:40,990
seven yet there's actually obviously a

00:19:38,919 --> 00:19:43,030
polyfill a backwards compatibility thing

00:19:40,990 --> 00:19:46,030
that allows you to use this right now in

00:19:43,030 --> 00:19:50,049
PHP less than PHP 7 version of

00:19:46,030 --> 00:19:53,420
applications and this is a much better

00:19:50,049 --> 00:19:55,700
way of generating random stuff so

00:19:53,420 --> 00:19:57,290
make sure you use it before when I gave

00:19:55,700 --> 00:20:00,560
this talk this is that was using mt

00:19:57,290 --> 00:20:03,290
round which is not great and it also

00:20:00,560 --> 00:20:06,070
doesn't work on F php-fpm apparently or

00:20:03,290 --> 00:20:10,220
doesn't work great in some instances

00:20:06,070 --> 00:20:12,590
also I want to point out that we're not

00:20:10,220 --> 00:20:15,110
using the equals comparison operator

00:20:12,590 --> 00:20:17,780
here or the exact or identical triple

00:20:15,110 --> 00:20:20,000
equals here and the reason why we're

00:20:17,780 --> 00:20:24,830
using hash equals is because this

00:20:20,000 --> 00:20:29,030
prevents against a timing attack so this

00:20:24,830 --> 00:20:33,290
bit of C code here is the is eyes end is

00:20:29,030 --> 00:20:35,270
identical function within PHP and it's

00:20:33,290 --> 00:20:39,530
basically how it does string comparisons

00:20:35,270 --> 00:20:45,770
or value comparisons rather so first up

00:20:39,530 --> 00:20:46,970
the Z strip p macro will the comparison

00:20:45,770 --> 00:20:50,540
their checks to see if they're exactly

00:20:46,970 --> 00:20:52,130
the same variable within the code you

00:20:50,540 --> 00:20:54,110
know it's like saying if dollar foo

00:20:52,130 --> 00:20:57,200
equals dollar foo well yes it does

00:20:54,110 --> 00:21:02,240
because they're the same thing and then

00:20:57,200 --> 00:21:04,310
the next part is Zizi strallen put will

00:21:02,240 --> 00:21:10,070
check to see if the length of the string

00:21:04,310 --> 00:21:15,260
is exactly the same so the last bit we

00:21:10,070 --> 00:21:19,690
get on to in a minute so screwed up on

00:21:15,260 --> 00:21:22,880
slides there we go so a timing attack

00:21:19,690 --> 00:21:24,230
the first step in attacking this is to

00:21:22,880 --> 00:21:26,870
figure out the length which is very very

00:21:24,230 --> 00:21:28,610
easy to do so what we're going to do is

00:21:26,870 --> 00:21:31,610
going to try a different length of

00:21:28,610 --> 00:21:36,020
string each time and we're going to do

00:21:31,610 --> 00:21:38,630
this thousands of times yeah and the

00:21:36,020 --> 00:21:41,180
correct length of string will be

00:21:38,630 --> 00:21:46,430
minutely longer the request will take

00:21:41,180 --> 00:21:48,410
very slightly longer so if we just put

00:21:46,430 --> 00:21:52,490
in one character it might be for example

00:21:48,410 --> 00:21:56,270
Satan or not not one seconds and then if

00:21:52,490 --> 00:21:57,680
we put in a a it might be the same and

00:21:56,270 --> 00:21:59,870
we keep going up and up and up and

00:21:57,680 --> 00:22:02,630
obviously we from looking that's like we

00:21:59,870 --> 00:22:05,700
know it's six characters and we can see

00:22:02,630 --> 00:22:10,169
that aaaaa will take

00:22:05,700 --> 00:22:12,330
when 0000 two seconds and then all the

00:22:10,169 --> 00:22:15,450
other lengths will take the same as

00:22:12,330 --> 00:22:16,860
before obviously this is very made up

00:22:15,450 --> 00:22:19,279
numbers and these aren't real world

00:22:16,860 --> 00:22:22,529
numbers but it's roughly like that and

00:22:19,279 --> 00:22:24,120
that indication there the request time

00:22:22,529 --> 00:22:27,690
being slightly different when we've got

00:22:24,120 --> 00:22:32,600
the string length exactly right is how

00:22:27,690 --> 00:22:32,600
you leak the length of your your strings

00:22:33,409 --> 00:22:41,190
so the last bit of the identical

00:22:38,039 --> 00:22:46,769
comparison is the mem cmp function it

00:22:41,190 --> 00:22:49,350
compares two bits of stuff and the way

00:22:46,769 --> 00:22:51,059
this works if you're not familiar with C

00:22:49,350 --> 00:22:53,279
is it will look over each character in

00:22:51,059 --> 00:22:57,019
the string and it soon as it finds a

00:22:53,279 --> 00:23:00,200
character is not equal it will return

00:22:57,019 --> 00:23:04,820
otherwise it precedes the next character

00:23:00,200 --> 00:23:07,919
so we can use a timing attack for this

00:23:04,820 --> 00:23:11,970
say we do the same thing again we try

00:23:07,919 --> 00:23:15,419
each string thousands of times so say we

00:23:11,970 --> 00:23:20,070
try a it takes an average of 0.001

00:23:15,419 --> 00:23:21,419
seconds and then we try B that's not

00:23:20,070 --> 00:23:25,470
quite right it's going to take the same

00:23:21,419 --> 00:23:26,820
we keep going until we get to F where it

00:23:25,470 --> 00:23:29,370
will become zero point zero zero two

00:23:26,820 --> 00:23:32,130
seconds it's the same concept as we just

00:23:29,370 --> 00:23:34,679
did because it takes slightly longer

00:23:32,130 --> 00:23:38,039
because it's gone on to the next next

00:23:34,679 --> 00:23:40,409
iteration of the loop yeah and it's very

00:23:38,039 --> 00:23:43,919
minut to change it here but you do it

00:23:40,409 --> 00:23:46,889
over an average of a lot of requests and

00:23:43,919 --> 00:23:49,080
then the next letter we try a and B and

00:23:46,889 --> 00:23:52,080
so on and it's still not working until

00:23:49,080 --> 00:23:54,690
we get to the right letter O where it

00:23:52,080 --> 00:23:57,090
takes very slightly longer so we keep

00:23:54,690 --> 00:23:58,889
doing this over and over again and over

00:23:57,090 --> 00:24:03,090
and over again with lots and lots of

00:23:58,889 --> 00:24:04,919
requests yeah it's it's not sometimes

00:24:03,090 --> 00:24:07,470
practical you know if you've built in

00:24:04,919 --> 00:24:09,240
good security measures to you know

00:24:07,470 --> 00:24:13,200
mitigate brute force attacks and stuff

00:24:09,240 --> 00:24:15,389
and say after 10 requests within you

00:24:13,200 --> 00:24:17,789
know two minutes or something then block

00:24:15,389 --> 00:24:19,260
the IP or something you know that's not

00:24:17,789 --> 00:24:24,590
going to work so well but

00:24:19,260 --> 00:24:28,140
there are cases where this could work so

00:24:24,590 --> 00:24:31,800
sensitive data exposure this little

00:24:28,140 --> 00:24:33,180
fishy here is an anglerfish and you know

00:24:31,800 --> 00:24:36,900
it gives the game away with this big

00:24:33,180 --> 00:24:40,230
light on its head and this is the number

00:24:36,900 --> 00:24:43,680
six on the OWASP top ten and it's

00:24:40,230 --> 00:24:47,450
basically doing stuff like this you know

00:24:43,680 --> 00:24:50,730
forgetting to leave your error handling

00:24:47,450 --> 00:24:54,180
displaying errors on your web pages you

00:24:50,730 --> 00:24:56,580
know PHP had a reputation for looking a

00:24:54,180 --> 00:24:58,230
bit like that obviously this is my

00:24:56,580 --> 00:24:59,700
development service server so i've got x

00:24:58,230 --> 00:25:01,710
debug and that's what makes it orange

00:24:59,700 --> 00:25:04,230
but you know we've seen screenshots of

00:25:01,710 --> 00:25:07,320
websites with PHP could not connect to

00:25:04,230 --> 00:25:09,360
database and stuff all over it my advice

00:25:07,320 --> 00:25:11,580
there is make sure you turn off

00:25:09,360 --> 00:25:14,310
displaying errors use a proper logging

00:25:11,580 --> 00:25:16,980
live recently like monologue to log your

00:25:14,310 --> 00:25:20,100
errors and be alerted to them have a

00:25:16,980 --> 00:25:23,580
good logging system stuff like New Relic

00:25:20,100 --> 00:25:26,730
maybe but yeah filter out with the end

00:25:23,580 --> 00:25:29,370
user sees and it just doesn't it doesn't

00:25:26,730 --> 00:25:30,480
just apply to HTML as well as I

00:25:29,370 --> 00:25:32,130
mentioned earlier you know you need to

00:25:30,480 --> 00:25:34,230
escape the stuff that's going into JSON

00:25:32,130 --> 00:25:36,270
so you don't want to just because it's

00:25:34,230 --> 00:25:37,710
an API you think all eyes on your

00:25:36,270 --> 00:25:39,780
machine reading that a human is never

00:25:37,710 --> 00:25:41,730
going to read that what they do you know

00:25:39,780 --> 00:25:43,980
when we're writing an API you know will

00:25:41,730 --> 00:25:46,620
often make a manual request for postman

00:25:43,980 --> 00:25:49,670
or whatever your favorite rest rest

00:25:46,620 --> 00:25:54,150
client is and we'll see that data

00:25:49,670 --> 00:25:56,310
hackers can see them too and also

00:25:54,150 --> 00:25:58,700
consider your headers as well now this

00:25:56,310 --> 00:26:03,000
is my dev box so I don't worry too much

00:25:58,700 --> 00:26:05,820
unless you're hacking it right now but

00:26:03,000 --> 00:26:08,610
you know here we can see that the server

00:26:05,820 --> 00:26:10,800
is Apache two point four point 10 so all

00:26:08,610 --> 00:26:14,340
I need to do as a hacker is head over to

00:26:10,800 --> 00:26:16,980
cv details com enter apache HTTP server

00:26:14,340 --> 00:26:19,640
two point four point 10 oh look there's

00:26:16,980 --> 00:26:21,900
three vulnerabilities let's exploit them

00:26:19,640 --> 00:26:23,910
you know sometimes they're not very easy

00:26:21,900 --> 00:26:26,550
sometimes they're difficult but you know

00:26:23,910 --> 00:26:28,200
that kind of information exposure makes

00:26:26,550 --> 00:26:29,990
it easier it you know it lowers the

00:26:28,200 --> 00:26:36,080
barrier of

00:26:29,990 --> 00:26:39,920
of hacking things so this next one is a

00:26:36,080 --> 00:26:44,059
barracuda it's a big fish with sharp

00:26:39,920 --> 00:26:45,880
teeth and this represents a

00:26:44,059 --> 00:26:50,780
man-in-the-middle attack if you like I

00:26:45,880 --> 00:26:53,770
don't know why just for fun don't do

00:26:50,780 --> 00:26:56,030
this if you're using curl directly

00:26:53,770 --> 00:26:59,000
consider something like ghazal or a

00:26:56,030 --> 00:27:02,870
library that's done all this for you but

00:26:59,000 --> 00:27:06,050
doing this renders https with curl

00:27:02,870 --> 00:27:09,020
almost pointless and I've done this you

00:27:06,050 --> 00:27:11,360
know as a my years you know as I learned

00:27:09,020 --> 00:27:13,070
things you know just like oh that's

00:27:11,360 --> 00:27:16,730
that's easy and over just turn off that

00:27:13,070 --> 00:27:18,640
that check but it's it's bad you know

00:27:16,730 --> 00:27:22,040
and the reason why is because we're not

00:27:18,640 --> 00:27:25,520
verifying anything's genuine yes the

00:27:22,040 --> 00:27:27,380
connection is encrypted but we don't

00:27:25,520 --> 00:27:29,750
know who we're actually connected to it

00:27:27,380 --> 00:27:33,290
could be anyone it's just encrypted and

00:27:29,750 --> 00:27:34,910
that's the whole point of HTTPS so the

00:27:33,290 --> 00:27:37,820
correct way of doing things is to obtain

00:27:34,910 --> 00:27:40,070
obtain a pem certificate if ax cut from

00:27:37,820 --> 00:27:41,570
the genuine server you can do that just

00:27:40,070 --> 00:27:43,340
by hitting it with a web browser and

00:27:41,570 --> 00:27:45,530
download the certificate it's very

00:27:43,340 --> 00:27:47,600
simple put it on your server obviously

00:27:45,530 --> 00:27:52,100
verify that that's the right certificate

00:27:47,600 --> 00:27:56,050
first and then point curl at it verify

00:27:52,100 --> 00:27:58,370
host to means it checks the common name

00:27:56,050 --> 00:28:00,980
matches the hostname and things like

00:27:58,370 --> 00:28:08,360
that so we're doing a couple of extra

00:28:00,980 --> 00:28:11,210
checks so have a a load of seagulls here

00:28:08,360 --> 00:28:12,970
gathering numbers they're all squawking

00:28:11,210 --> 00:28:17,300
and contributing a little writing

00:28:12,970 --> 00:28:18,740
third-party code now many times I've

00:28:17,300 --> 00:28:22,790
already said you know use a library

00:28:18,740 --> 00:28:26,000
that's done it before but that comes

00:28:22,790 --> 00:28:28,429
with a warning because you know these

00:28:26,000 --> 00:28:30,110
sort of libraries and plugins and cozy

00:28:28,429 --> 00:28:35,780
copy and paste is from stack overflow or

00:28:30,110 --> 00:28:38,179
you know some PHP tutorial from 1999 you

00:28:35,780 --> 00:28:40,309
know they may not be particularly secure

00:28:38,179 --> 00:28:42,470
they may not be written with security in

00:28:40,309 --> 00:28:42,690
mind so when you just blindly copy and

00:28:42,470 --> 00:28:44,880
play

00:28:42,690 --> 00:28:48,210
that code in or you require it with

00:28:44,880 --> 00:28:51,060
composure or anything like that you know

00:28:48,210 --> 00:28:56,250
you may not be having security code

00:28:51,060 --> 00:28:58,680
include in your application so the ideal

00:28:56,250 --> 00:29:00,240
advice I'd give here is to audit every

00:28:58,680 --> 00:29:01,830
single piece of code you know every

00:29:00,240 --> 00:29:05,640
single composer dependency than your

00:29:01,830 --> 00:29:08,160
application that's not always practical

00:29:05,640 --> 00:29:10,050
if you're using you know son framework

00:29:08,160 --> 00:29:11,340
Symphony laravel and so on are you

00:29:10,050 --> 00:29:13,280
really going to go through every single

00:29:11,340 --> 00:29:16,320
line of code and check that it's

00:29:13,280 --> 00:29:19,260
security as it can be it's not always

00:29:16,320 --> 00:29:21,270
practical you can use something like

00:29:19,260 --> 00:29:25,140
Rove security advisories little plug

00:29:21,270 --> 00:29:27,960
here it uses info from repository for

00:29:25,140 --> 00:29:31,140
friends of PHP security advisories to

00:29:27,960 --> 00:29:35,280
basically block composer installation of

00:29:31,140 --> 00:29:37,710
known insecure packages so you know it's

00:29:35,280 --> 00:29:40,410
as simple as composer require that

00:29:37,710 --> 00:29:42,660
library it's not fully comprehensive but

00:29:40,410 --> 00:29:48,480
it will help you know eliminate the big

00:29:42,660 --> 00:29:51,030
the big issues right that a known so my

00:29:48,480 --> 00:29:53,130
pragmatic advice with regards to their

00:29:51,030 --> 00:29:57,270
party code libraries pulled in from

00:29:53,130 --> 00:30:00,500
composer is I suppose we can only put

00:29:57,270 --> 00:30:03,930
our trust in safety in numbers you know

00:30:00,500 --> 00:30:05,490
package y has 10 million users if

00:30:03,930 --> 00:30:07,380
there's a security vulnerability in

00:30:05,490 --> 00:30:11,070
there it's going to apply to 10 other

00:30:07,380 --> 00:30:14,610
million users you know so we're all in

00:30:11,070 --> 00:30:16,430
the same boat honestly I don't think

00:30:14,610 --> 00:30:18,900
there's any great other advice for it

00:30:16,430 --> 00:30:20,640
unless you'd go through an euro security

00:30:18,900 --> 00:30:23,040
expert and you're going to order every

00:30:20,640 --> 00:30:25,230
single package which is you know the

00:30:23,040 --> 00:30:27,000
rate at which we developers write code

00:30:25,230 --> 00:30:32,940
there's no way we can order that much

00:30:27,000 --> 00:30:38,990
code so we're all security experts now

00:30:32,940 --> 00:30:38,990
right ah not quite

00:30:39,250 --> 00:30:45,640
there is a lot to remember and yes we're

00:30:43,330 --> 00:30:47,080
not all security experts but we can try

00:30:45,640 --> 00:30:49,660
and do the best we can we can try and

00:30:47,080 --> 00:30:51,300
write a secure code as possible use the

00:30:49,660 --> 00:30:54,490
techniques that I've explained so far

00:30:51,300 --> 00:30:56,230
you know keep learning more about it it

00:30:54,490 --> 00:30:58,000
can be you know some people might find

00:30:56,230 --> 00:30:59,350
the security in sort of learning a bit

00:30:58,000 --> 00:31:02,440
more about it quite an interesting topic

00:30:59,350 --> 00:31:05,440
I think it is that's why I'm up here

00:31:02,440 --> 00:31:08,770
doing a talk about it keep it simple you

00:31:05,440 --> 00:31:11,010
know I keep saying over and over en yeah

00:31:08,770 --> 00:31:16,390
keep your application simple because

00:31:11,010 --> 00:31:17,860
reasons I've said it already maybe even

00:31:16,390 --> 00:31:19,950
hire a pen test or something like that

00:31:17,860 --> 00:31:22,060
there's there's there's companies and

00:31:19,950 --> 00:31:24,730
consultants that you can hire who will

00:31:22,060 --> 00:31:26,200
go through your code or maybe you know

00:31:24,730 --> 00:31:28,930
try and hack your code and things like

00:31:26,200 --> 00:31:30,760
that but maybe your company can't afford

00:31:28,930 --> 00:31:32,920
it or won't won't pay for it because

00:31:30,760 --> 00:31:37,090
they don't recognize the importance of

00:31:32,920 --> 00:31:38,920
security which does happen you know so

00:31:37,090 --> 00:31:44,620
maybe we could try and hack our own

00:31:38,920 --> 00:31:47,200
system now find vulnerabilities in your

00:31:44,620 --> 00:31:49,780
own system well how do you find

00:31:47,200 --> 00:31:51,940
vulnerabilities in your system well you

00:31:49,780 --> 00:31:56,560
need to think like a hacker need to

00:31:51,940 --> 00:32:01,990
think how they would you need to be the

00:31:56,560 --> 00:32:05,800
threat first of all what do you want you

00:32:01,990 --> 00:32:08,800
know if you're working you know at a

00:32:05,800 --> 00:32:10,660
health insurance company right you've

00:32:08,800 --> 00:32:12,990
got a lot of personal data you've got

00:32:10,660 --> 00:32:15,880
names addresses dates of birth medical

00:32:12,990 --> 00:32:18,010
history and things like that saved in

00:32:15,880 --> 00:32:20,530
your database so maybe someone that's

00:32:18,010 --> 00:32:24,580
hacking this health insurance company of

00:32:20,530 --> 00:32:27,310
you work for once that information maybe

00:32:24,580 --> 00:32:30,640
you collect payments from your customers

00:32:27,310 --> 00:32:32,470
via direct debit so maybe they might be

00:32:30,640 --> 00:32:36,370
after bank details or credit card

00:32:32,470 --> 00:32:41,350
details don't store them use a payment

00:32:36,370 --> 00:32:45,520
provider or maybe you just want to cause

00:32:41,350 --> 00:32:48,340
downtime maybe this health insurance

00:32:45,520 --> 00:32:49,420
company you work for maybe the the CEO

00:32:48,340 --> 00:32:51,610
is a

00:32:49,420 --> 00:32:54,160
racist homophobe or something and then

00:32:51,610 --> 00:32:55,750
an activist hacker group will then want

00:32:54,160 --> 00:32:57,310
to just sort of take this company down

00:32:55,750 --> 00:32:59,860
because they disagree with it

00:32:57,310 --> 00:33:02,680
politically you know whatever there's

00:32:59,860 --> 00:33:05,680
all sorts of reasons why you might want

00:33:02,680 --> 00:33:07,990
to hack someone so you need to think

00:33:05,680 --> 00:33:10,360
like them you say right well I need to

00:33:07,990 --> 00:33:16,990
access this or try and access something

00:33:10,360 --> 00:33:18,760
you know so how do you get it well I've

00:33:16,990 --> 00:33:21,190
just explained a load of vulnerabilities

00:33:18,760 --> 00:33:23,320
to you right there's the whole of the

00:33:21,190 --> 00:33:25,390
OWASP top 10 is you know a good place to

00:33:23,320 --> 00:33:28,630
start right okay is my website

00:33:25,390 --> 00:33:32,440
vulnerable to SQL injection oh yes it is

00:33:28,630 --> 00:33:36,520
oops you know all the other owasp hot

00:33:32,440 --> 00:33:38,920
ten the cv's database as I've said you

00:33:36,520 --> 00:33:40,840
know maybe you don't know what version

00:33:38,920 --> 00:33:42,370
of apache or nginx they're running but

00:33:40,840 --> 00:33:44,260
you can still look up apache and engine

00:33:42,370 --> 00:33:45,370
X if you know they're running it or

00:33:44,260 --> 00:33:49,330
maybe you don't know they're running it

00:33:45,370 --> 00:33:52,000
just try anyway you could try and gain

00:33:49,330 --> 00:33:55,030
elevated privileges so swear you might

00:33:52,000 --> 00:33:56,770
have a normal users login for a website

00:33:55,030 --> 00:34:00,520
and then you try and you know getting

00:33:56,770 --> 00:34:02,620
sudo access or something like that also

00:34:00,520 --> 00:34:04,180
session hijacking you know everyone

00:34:02,620 --> 00:34:06,250
talks about a lot it's you know it's

00:34:04,180 --> 00:34:12,040
where you become someone else's session

00:34:06,250 --> 00:34:14,440
essentially the conv wrong vulnerability

00:34:12,040 --> 00:34:16,360
database I mentioned that one more

00:34:14,440 --> 00:34:18,669
complex stuff as I've said like timing

00:34:16,360 --> 00:34:21,460
attacks you know that can be difficult

00:34:18,669 --> 00:34:23,650
to pull off but it might work you know

00:34:21,460 --> 00:34:25,780
no but try and think outside the box as

00:34:23,650 --> 00:34:26,800
well as developers you know we're at

00:34:25,780 --> 00:34:28,150
we're sitting there writing the

00:34:26,800 --> 00:34:31,660
application we know how it's supposed to

00:34:28,150 --> 00:34:33,610
work but the way your hacker system is

00:34:31,660 --> 00:34:35,290
not by doing things who are supposed to

00:34:33,610 --> 00:34:37,090
work it's by doing things the way

00:34:35,290 --> 00:34:40,690
they're not supposed to work and we

00:34:37,090 --> 00:34:42,700
forgot to think about them so maybe when

00:34:40,690 --> 00:34:47,320
you're writing some new feature and you

00:34:42,700 --> 00:34:49,419
want it to be audited get together with

00:34:47,320 --> 00:34:54,130
your team or maybe a you know a friend

00:34:49,419 --> 00:34:56,470
if you work on your own and you know

00:34:54,130 --> 00:34:58,290
review the code together and they might

00:34:56,470 --> 00:35:01,990
have some other ideas about how things

00:34:58,290 --> 00:35:05,100
could be hacked or done better you know

00:35:01,990 --> 00:35:07,420
peer reviewing coders is great and

00:35:05,100 --> 00:35:08,770
looking out for security vulnerabilities

00:35:07,420 --> 00:35:10,720
should be one of the things that you

00:35:08,770 --> 00:35:14,890
look out for and doing code reviews and

00:35:10,720 --> 00:35:18,580
things like that think about beyond your

00:35:14,890 --> 00:35:22,380
stack as well are you using centos

00:35:18,580 --> 00:35:27,190
three-point whatever from the twenties I

00:35:22,380 --> 00:35:30,010
don't know you might be maybe your sis

00:35:27,190 --> 00:35:31,510
admin doesn't really think that it's

00:35:30,010 --> 00:35:37,090
worth upgrading because everything will

00:35:31,510 --> 00:35:38,710
break but by now you know that centos 3

00:35:37,090 --> 00:35:40,810
from the 20s might be completely

00:35:38,710 --> 00:35:43,840
vulnerable with filled with

00:35:40,810 --> 00:35:48,400
vulnerabilities that's a reason to

00:35:43,840 --> 00:35:49,690
upgrade in itself so you've gone through

00:35:48,400 --> 00:35:51,280
your application or you know your

00:35:49,690 --> 00:35:54,340
feature whatever you're doing whatever

00:35:51,280 --> 00:35:56,680
you're auditing and you've got a whole

00:35:54,340 --> 00:35:59,410
load of stuff right there's like a

00:35:56,680 --> 00:36:01,000
hundred things so we need to do what's

00:35:59,410 --> 00:36:03,190
called a risk assessment or a threat

00:36:01,000 --> 00:36:06,010
modeling thing that sounds very

00:36:03,190 --> 00:36:07,690
cooperative and stuff like that but it's

00:36:06,010 --> 00:36:10,450
actually very logical and I'll just

00:36:07,690 --> 00:36:13,270
quickly show you through it the way we

00:36:10,450 --> 00:36:17,530
do this is we assess the risk of each

00:36:13,270 --> 00:36:19,060
one using this dread acronym unfelt you

00:36:17,530 --> 00:36:22,840
spelt slightly differently to judge

00:36:19,060 --> 00:36:24,220
dredd but but yeah you give each one of

00:36:22,840 --> 00:36:26,980
these a score out of ten which will go

00:36:24,220 --> 00:36:30,070
through in a moment and then you rank

00:36:26,980 --> 00:36:32,800
them in order in order of importance so

00:36:30,070 --> 00:36:36,940
the first one is too damaged how much

00:36:32,800 --> 00:36:39,400
damage could someone do if they access

00:36:36,940 --> 00:36:44,109
your system maybe they would be able to

00:36:39,400 --> 00:36:45,850
access your IP address logs it's

00:36:44,109 --> 00:36:48,580
debatable how much damage you can do

00:36:45,850 --> 00:36:51,940
with that I mean it's it's some sort of

00:36:48,580 --> 00:36:54,850
a personal information debatable but

00:36:51,940 --> 00:36:56,800
they may go through those and just say

00:36:54,850 --> 00:37:00,130
oh I could I know I could report all of

00:36:56,800 --> 00:37:02,380
these IPS for something to their ISP and

00:37:00,130 --> 00:37:03,970
say you know well this subscribers been

00:37:02,380 --> 00:37:05,830
naughty and then all your users are

00:37:03,970 --> 00:37:07,270
suddenly getting emails from the letters

00:37:05,830 --> 00:37:10,000
from the IRS be saying you've been doing

00:37:07,270 --> 00:37:11,970
something naughty and flat what it's

00:37:10,000 --> 00:37:14,960
just a bit of pain in the neck really

00:37:11,970 --> 00:37:17,450
but maybe their access to your

00:37:14,960 --> 00:37:20,030
list of credit card details again don't

00:37:17,450 --> 00:37:26,599
store credit card details but maybe they

00:37:20,030 --> 00:37:29,300
did reproducibility how easy is it to

00:37:26,599 --> 00:37:31,010
reproduce this issue you know do you

00:37:29,300 --> 00:37:34,160
need to be logged in first to exploit

00:37:31,010 --> 00:37:37,250
this or is it you know very simple

00:37:34,160 --> 00:37:39,230
unauthorized HTTP requests to some URL

00:37:37,250 --> 00:37:41,960
that sort of thing is very reproducible

00:37:39,230 --> 00:37:44,410
because you just hit it in a browser job

00:37:41,960 --> 00:37:47,359
done or maybe you know it requires

00:37:44,410 --> 00:37:50,150
logging into the website first enabling

00:37:47,359 --> 00:37:52,369
cookies in whatever you're doing gang

00:37:50,150 --> 00:37:55,880
sudo access and then you have to go to

00:37:52,369 --> 00:37:57,290
this page and open this link and you

00:37:55,880 --> 00:37:59,540
have to have two sessions open it once

00:37:57,290 --> 00:38:01,849
whatever whatever that's not very

00:37:59,540 --> 00:38:05,180
reproducible so that would score low low

00:38:01,849 --> 00:38:07,010
score especially if random chance is

00:38:05,180 --> 00:38:11,780
involved you know say this vulnerability

00:38:07,010 --> 00:38:14,930
is only there every 325 requests yeah

00:38:11,780 --> 00:38:19,730
it's a bit weird who writes code like

00:38:14,930 --> 00:38:21,710
that probably all of us um social

00:38:19,730 --> 00:38:25,280
engineering that's a whole other kettle

00:38:21,710 --> 00:38:27,530
of fish you know depending on you know

00:38:25,280 --> 00:38:30,470
your your charisma score you may be good

00:38:27,530 --> 00:38:32,030
at social engineering yeah I'm not

00:38:30,470 --> 00:38:35,180
greater social engineering myself

00:38:32,030 --> 00:38:39,320
probably I've never tried it maybe I

00:38:35,180 --> 00:38:43,339
should I'll see exploitability now this

00:38:39,320 --> 00:38:46,220
is sort of similar but this is basically

00:38:43,339 --> 00:38:48,230
how easy is it to exploit the whole you

00:38:46,220 --> 00:38:50,119
know what tools do you need to do it do

00:38:48,230 --> 00:38:52,369
you just need a web browser or do you

00:38:50,119 --> 00:38:54,740
need to have like a really low level

00:38:52,369 --> 00:38:57,460
understanding of how the Linux kernel

00:38:54,740 --> 00:38:59,750
network layer or something works or

00:38:57,460 --> 00:39:02,089
maybe you need detailed knowledge about

00:38:59,750 --> 00:39:03,830
the infrastructure of the company that

00:39:02,089 --> 00:39:05,930
you're trying to attack and maybe you

00:39:03,830 --> 00:39:10,640
don't have that information or maybe you

00:39:05,930 --> 00:39:13,580
do know the number of affected users is

00:39:10,640 --> 00:39:15,980
obviously very important as well so you

00:39:13,580 --> 00:39:17,420
know if you're maybe like Sony or

00:39:15,980 --> 00:39:21,170
something that's quite a lot of users

00:39:17,420 --> 00:39:24,140
and 77 million that's a lot of infected

00:39:21,170 --> 00:39:25,700
users maybe it's just one user you know

00:39:24,140 --> 00:39:26,770
maybe you can gain access to someone's

00:39:25,700 --> 00:39:29,650
account

00:39:26,770 --> 00:39:31,330
now if you're a customer-centric company

00:39:29,650 --> 00:39:33,760
that could be quite important because

00:39:31,330 --> 00:39:35,020
you know that user might be Stephen Fry

00:39:33,760 --> 00:39:39,910
and he might go and complain on Twitter

00:39:35,020 --> 00:39:41,860
I won't know when ever mind but also

00:39:39,910 --> 00:39:43,660
consider the type of the user yeah if

00:39:41,860 --> 00:39:46,900
this is the CEO of a multinational

00:39:43,660 --> 00:39:49,060
corporation that controls billions of

00:39:46,900 --> 00:39:51,280
pounds you know they've got a lot of

00:39:49,060 --> 00:39:56,500
power if you can access his email inbox

00:39:51,280 --> 00:39:59,020
you're off to a great start finally

00:39:56,500 --> 00:40:02,800
discoverability how easy is it to find

00:39:59,020 --> 00:40:05,910
out about this exploit is there a link

00:40:02,800 --> 00:40:08,170
to the exploit on the company's homepage

00:40:05,910 --> 00:40:15,340
that would be a bit silly to do but

00:40:08,170 --> 00:40:18,130
maybe there is you know do you need to

00:40:15,340 --> 00:40:19,600
have a security badge for physical

00:40:18,130 --> 00:40:22,780
access to the company so that you can

00:40:19,600 --> 00:40:24,490
login with the USB stick and gain access

00:40:22,780 --> 00:40:26,610
that way obviously that's not very

00:40:24,490 --> 00:40:30,160
discoverable you know how many people

00:40:26,610 --> 00:40:30,970
have access to you know that sort of USB

00:40:30,160 --> 00:40:33,100
stick you have to go through a

00:40:30,970 --> 00:40:36,070
registration process it's probably

00:40:33,100 --> 00:40:39,280
doable but it's not very discoverable

00:40:36,070 --> 00:40:40,810
you have to know things and also it's

00:40:39,280 --> 00:40:44,860
worth mentioning about security through

00:40:40,810 --> 00:40:49,270
obscurity that's not enough I know from

00:40:44,860 --> 00:40:50,800
experience let's leave it at that so

00:40:49,270 --> 00:40:52,900
once you've got all these scores out of

00:40:50,800 --> 00:40:57,280
10 for each one of these criteria add

00:40:52,900 --> 00:41:01,630
them up and rank them in order and then

00:40:57,280 --> 00:41:03,370
fix them it's as simple as that you know

00:41:01,630 --> 00:41:05,800
if you need to get sign off on these

00:41:03,370 --> 00:41:08,680
issues all you need to do is go to your

00:41:05,800 --> 00:41:12,730
boss and say this is a list of all are

00:41:08,680 --> 00:41:15,040
really critical 10 a 10 for each each

00:41:12,730 --> 00:41:17,430
letter you know they're very vulnerable

00:41:15,040 --> 00:41:20,560
you know we're very vulnerable right now

00:41:17,430 --> 00:41:25,090
it'd probably be surprised how you know

00:41:20,560 --> 00:41:26,950
that list comes out maybe so I'm going

00:41:25,090 --> 00:41:30,220
talk a little bit about authentication

00:41:26,950 --> 00:41:33,940
and authorization here so authentic

00:41:30,220 --> 00:41:38,620
ation is verifying identity verifying

00:41:33,940 --> 00:41:39,610
who you are MOA James Titcomb can any of

00:41:38,620 --> 00:41:45,160
you prove that

00:41:39,610 --> 00:41:46,840
I might not be so when i log log onto a

00:41:45,160 --> 00:41:49,930
website usually i'll use a password

00:41:46,840 --> 00:41:52,810
that's very common way of logging into a

00:41:49,930 --> 00:41:54,940
website if you work in corporation maybe

00:41:52,810 --> 00:41:57,460
you log in with you know LDAP or Active

00:41:54,940 --> 00:42:01,030
Directory you know a dedicated password

00:41:57,460 --> 00:42:03,130
that is called more and more websites

00:42:01,030 --> 00:42:05,740
are adopting one time codes or two

00:42:03,130 --> 00:42:07,480
factor authentication or whatever they

00:42:05,740 --> 00:42:09,940
want to call it basically logging on

00:42:07,480 --> 00:42:11,920
with an SMS message or an email or

00:42:09,940 --> 00:42:17,350
Yubikey Google two-factor authentication

00:42:11,920 --> 00:42:19,600
all these methods and that's a good way

00:42:17,350 --> 00:42:21,760
of doing things and the reason why if

00:42:19,600 --> 00:42:23,230
you not already aware about two-factor

00:42:21,760 --> 00:42:24,760
authentication is because you've got two

00:42:23,230 --> 00:42:27,370
things your login with your password

00:42:24,760 --> 00:42:29,560
which is something you know which the

00:42:27,370 --> 00:42:31,570
hacker can probably figure out you know

00:42:29,560 --> 00:42:35,380
if you've got a password one as your

00:42:31,570 --> 00:42:38,890
password but also something that you

00:42:35,380 --> 00:42:43,750
possess so maybe your phone that's where

00:42:38,890 --> 00:42:46,240
I keep my phone and you know all your

00:42:43,750 --> 00:42:48,010
Yubikey or your bank's login token

00:42:46,240 --> 00:42:49,930
things like that it's something you

00:42:48,010 --> 00:42:52,620
physically possess so if you've got a

00:42:49,930 --> 00:42:57,120
remote hacker in China or Russia or

00:42:52,620 --> 00:42:59,500
somewhere doesn't matter where the

00:42:57,120 --> 00:43:02,350
hacker doesn't have physical access to

00:42:59,500 --> 00:43:03,760
that device there's probably ways of

00:43:02,350 --> 00:43:06,040
figuring out you can probably figure out

00:43:03,760 --> 00:43:07,150
what kind of device they have and maybe

00:43:06,040 --> 00:43:09,400
if you've got access to the database

00:43:07,150 --> 00:43:11,740
there is there you know two-factor

00:43:09,400 --> 00:43:13,720
authentication starter seed key or

00:43:11,740 --> 00:43:16,240
whatever you want to call it so maybe

00:43:13,720 --> 00:43:19,900
it's still exploitable but it's a lot

00:43:16,240 --> 00:43:23,040
more difficult also you can log in with

00:43:19,900 --> 00:43:26,200
biometrics this may be less common

00:43:23,040 --> 00:43:28,120
fingerprints iris recognition maybe even

00:43:26,200 --> 00:43:31,330
DNA recognition if you're being super

00:43:28,120 --> 00:43:33,910
secure but then if you have a twin

00:43:31,330 --> 00:43:37,900
brother or sister than that may not work

00:43:33,910 --> 00:43:40,810
so well um but a more realistic or

00:43:37,900 --> 00:43:43,960
pragmatic way is probably login with key

00:43:40,810 --> 00:43:45,220
cards USB sticks that's sort of similar

00:43:43,960 --> 00:43:47,560
to the way two factor authentication

00:43:45,220 --> 00:43:49,510
works but maybe it may be the only

00:43:47,560 --> 00:43:51,069
factor the you login with so you login

00:43:49,510 --> 00:43:57,959
with USB stick and it just

00:43:51,069 --> 00:43:57,959
locked in so that's only one factor so

00:43:58,349 --> 00:44:03,180
customer authentication so we thought

00:44:00,369 --> 00:44:05,920
about doing something like this before

00:44:03,180 --> 00:44:07,989
it was a single sign-on across you know

00:44:05,920 --> 00:44:09,249
all of our web properties so you know

00:44:07,989 --> 00:44:11,380
you'll be able to log in there are on

00:44:09,249 --> 00:44:13,209
different domains so we can use cookies

00:44:11,380 --> 00:44:14,920
and things like that so it make a

00:44:13,209 --> 00:44:17,949
request proxy to an authentication

00:44:14,920 --> 00:44:20,109
server it verified validate the identity

00:44:17,949 --> 00:44:25,150
blah blah blah blah and then we decided

00:44:20,109 --> 00:44:27,489
not to do it we decided to keep it

00:44:25,150 --> 00:44:30,400
simple and it's one of the golden rules

00:44:27,489 --> 00:44:31,509
as I've said all that complexity that we

00:44:30,400 --> 00:44:34,690
start with you we thought about

00:44:31,509 --> 00:44:39,400
introducing introduced huge potential

00:44:34,690 --> 00:44:41,619
attack vectors and none of us were

00:44:39,400 --> 00:44:44,559
secure enough or you know knew enough

00:44:41,619 --> 00:44:47,410
about security to categorically turn

00:44:44,559 --> 00:44:50,920
around say no that definitely be secure

00:44:47,410 --> 00:44:52,329
I wouldn't trust myself so we SAT can

00:44:50,920 --> 00:44:53,890
white sacrifice that small amount of

00:44:52,329 --> 00:44:55,660
usability you know being able to log on

00:44:53,890 --> 00:45:00,430
to all of the whip those web domains all

00:44:55,660 --> 00:45:03,699
at once for a big security gain password

00:45:00,430 --> 00:45:05,319
hashing use password hash hopefully

00:45:03,699 --> 00:45:09,400
there goes without saying now never use

00:45:05,319 --> 00:45:13,150
plain text never use md5 never use

00:45:09,400 --> 00:45:16,809
encryption don't encrypt password hash

00:45:13,150 --> 00:45:19,749
them if you don't yet have PHP 5.5 or

00:45:16,809 --> 00:45:21,219
above there is backwards compatibility

00:45:19,749 --> 00:45:23,319
library that you can use so you can use

00:45:21,219 --> 00:45:25,299
password hash straight away there's no

00:45:23,319 --> 00:45:28,029
reason not to it's done in a way that

00:45:25,299 --> 00:45:30,459
means as long as you don't try and

00:45:28,029 --> 00:45:33,069
provide your own salt in some weird

00:45:30,459 --> 00:45:38,680
unsecured way then you're doing it the

00:45:33,069 --> 00:45:40,150
right way authorization is it's not

00:45:38,680 --> 00:45:43,509
verifying your identity it's verifying

00:45:40,150 --> 00:45:45,699
what your identity can access now you

00:45:43,509 --> 00:45:48,069
can check off or you should be checking

00:45:45,699 --> 00:45:50,559
for authorization in your service level

00:45:48,069 --> 00:45:52,299
rather than your controllers the reason

00:45:50,559 --> 00:45:55,449
for this is if you have a service that

00:45:52,299 --> 00:45:59,140
deletes a blog post for example and you

00:45:55,449 --> 00:46:01,299
have a controller that uses user service

00:45:59,140 --> 00:46:03,770
to delete a blog post and then you

00:46:01,299 --> 00:46:05,960
create a new NPAPI endpoint

00:46:03,770 --> 00:46:07,880
you may forget to do the authentication

00:46:05,960 --> 00:46:09,860
so the best place to do it is back here

00:46:07,880 --> 00:46:12,560
where you do the deletion of the blog

00:46:09,860 --> 00:46:16,880
post and you say can whoever is logged

00:46:12,560 --> 00:46:20,840
on delete this blog post there's various

00:46:16,880 --> 00:46:22,010
types of authorization ACL are back you

00:46:20,840 --> 00:46:25,850
know they're the most common ones

00:46:22,010 --> 00:46:27,530
there's also attribute based like xacml

00:46:25,850 --> 00:46:30,290
and things like that a bit more

00:46:27,530 --> 00:46:33,520
enterprising complicated but yeah

00:46:30,290 --> 00:46:33,520
there's various ways of doing it

00:46:34,780 --> 00:46:41,810
cryptography is hard this guy knows if

00:46:40,310 --> 00:46:44,390
you don't know who that is that's I'll

00:46:41,810 --> 00:46:45,650
ensuring and that statues just down the

00:46:44,390 --> 00:46:49,180
road from the PHP northwest conference

00:46:45,650 --> 00:46:51,500
venue you can sit next to if you like

00:46:49,180 --> 00:46:55,700
it's not the real Alan Turing it's just

00:46:51,500 --> 00:47:01,640
a statue but ya never roll your own

00:46:55,700 --> 00:47:05,180
cryptography um ever simple unless

00:47:01,640 --> 00:47:08,330
you're like super security expert which

00:47:05,180 --> 00:47:09,560
I wouldn't say I am the super security

00:47:08,330 --> 00:47:11,510
expert I wouldn't write my own

00:47:09,560 --> 00:47:15,110
encryption and use it in a production

00:47:11,510 --> 00:47:16,520
application I might do it you know is an

00:47:15,110 --> 00:47:19,700
academic example to learn about

00:47:16,520 --> 00:47:22,550
encryption that's fine yeah you could do

00:47:19,700 --> 00:47:24,530
that and then you could you know ask

00:47:22,550 --> 00:47:25,700
someone in internet try and hack this

00:47:24,530 --> 00:47:27,020
and they'll probably do it like five

00:47:25,700 --> 00:47:30,610
minutes because they've thought about an

00:47:27,020 --> 00:47:35,660
attack vector you had no idea about yeah

00:47:30,610 --> 00:47:41,420
so James how should I in things I

00:47:35,660 --> 00:47:44,839
hear you ask he's got some ideas

00:47:41,420 --> 00:47:46,839
no tone listen to this guy evident he

00:47:44,839 --> 00:47:49,940
knows not very much about encryption

00:47:46,839 --> 00:47:53,270
well you should use something called lib

00:47:49,940 --> 00:47:55,190
sodium now em crypt is pretty much

00:47:53,270 --> 00:47:57,410
abandoned there's been very few commits

00:47:55,190 --> 00:47:59,930
you know over the last few years to em

00:47:57,410 --> 00:48:02,630
crypt which is probably the go-to

00:47:59,930 --> 00:48:04,460
package for many of us but there's this

00:48:02,630 --> 00:48:05,780
new thing called lib sodium and there's

00:48:04,460 --> 00:48:08,030
a peck or package which will allow you

00:48:05,780 --> 00:48:11,420
to do it and it's trying to do things in

00:48:08,030 --> 00:48:13,520
a more secure you know the right way so

00:48:11,420 --> 00:48:15,200
if you want to do some encryption for

00:48:13,520 --> 00:48:17,930
you know your application maybe you need

00:48:15,200 --> 00:48:21,440
to store something very securely not

00:48:17,930 --> 00:48:24,559
credit card details please try this one

00:48:21,440 --> 00:48:27,770
out i mentioned i'm going to do a couple

00:48:24,559 --> 00:48:31,490
of minutes on linux server security why

00:48:27,770 --> 00:48:34,040
is this important well as per the

00:48:31,490 --> 00:48:36,559
hacking your own system stuff you need

00:48:34,040 --> 00:48:41,059
to care about the whole system not just

00:48:36,559 --> 00:48:42,530
your application you know maybe not you

00:48:41,059 --> 00:48:45,500
know not just your company stuff either

00:48:42,530 --> 00:48:48,200
maybe your dev box is out there on you

00:48:45,500 --> 00:48:49,640
know some VPS provider and maybe didn't

00:48:48,200 --> 00:48:56,420
really put much thought into securing

00:48:49,640 --> 00:48:59,000
that maybe you should creating SSH

00:48:56,420 --> 00:49:01,869
fortress right login always with

00:48:59,000 --> 00:49:03,950
password less SSH once you set that up

00:49:01,869 --> 00:49:06,319
disable the ability to log in with the

00:49:03,950 --> 00:49:11,260
password that will flummox most

00:49:06,319 --> 00:49:14,210
automated brute force SSH hackers

00:49:11,260 --> 00:49:16,700
disable the root user so you can't login

00:49:14,210 --> 00:49:18,740
directly with root always use sudo

00:49:16,700 --> 00:49:20,329
that's becoming the norm on

00:49:18,740 --> 00:49:22,819
distributions these days which is good

00:49:20,329 --> 00:49:24,559
and you don't need to revert it you

00:49:22,819 --> 00:49:27,980
don't need to log in with root just use

00:49:24,559 --> 00:49:30,349
sudo lock it down by IP address perhaps

00:49:27,980 --> 00:49:32,839
maybe you know you know you have a

00:49:30,349 --> 00:49:34,430
static IP address at home and you have a

00:49:32,839 --> 00:49:39,890
VPN that allows you to access your

00:49:34,430 --> 00:49:43,190
company's web servers and things so lock

00:49:39,890 --> 00:49:45,410
it down to those IP addresses you know

00:49:43,190 --> 00:49:47,809
then pretty much no one else except if

00:49:45,410 --> 00:49:52,760
they're at your house or they've logged

00:49:47,809 --> 00:49:54,420
into the VPN will access it maybe even

00:49:52,760 --> 00:49:55,859
run a cessation a different port but

00:49:54,420 --> 00:50:01,650
it's a bit like security through

00:49:55,859 --> 00:50:03,390
obscurity run a firewall you know open

00:50:01,650 --> 00:50:07,200
only open up specific ports that you

00:50:03,390 --> 00:50:09,119
know you need where you know 84 43 and

00:50:07,200 --> 00:50:12,630
25 if you're running a mail server and

00:50:09,119 --> 00:50:16,740
110 and things like that and drop all

00:50:12,630 --> 00:50:18,630
the other traffic maybe you could use IP

00:50:16,740 --> 00:50:20,280
tables don't worry you're not supposed

00:50:18,630 --> 00:50:22,829
to be able to read that it's very

00:50:20,280 --> 00:50:26,849
complicated so maybe try uncomplicated

00:50:22,829 --> 00:50:30,540
firewall instead that roughly does the

00:50:26,849 --> 00:50:33,599
same thing as that the last screen but

00:50:30,540 --> 00:50:35,010
in three lines of code it's not a

00:50:33,599 --> 00:50:37,680
hundred percent equivalent but it does

00:50:35,010 --> 00:50:44,400
the job and as a starting point this is

00:50:37,680 --> 00:50:46,200
great it's easy right so you also need

00:50:44,400 --> 00:50:49,140
to mail to mitigate brute force attacks

00:50:46,200 --> 00:50:51,839
you know many of many servers will you

00:50:49,140 --> 00:50:53,040
know be undergo brute force attacks even

00:50:51,839 --> 00:50:55,260
if you don't think that you're

00:50:53,040 --> 00:50:57,660
vulnerable because with it's only me

00:50:55,260 --> 00:51:00,329
it's only my little dev box on this

00:50:57,660 --> 00:51:02,099
lotion all i know'd or something and no

00:51:00,329 --> 00:51:04,500
one's going to attack that what what

00:51:02,099 --> 00:51:06,150
could they possibly want but it's not

00:51:04,500 --> 00:51:07,799
someone doing it's just a bot script

00:51:06,150 --> 00:51:09,809
that goes through and try hundreds of

00:51:07,799 --> 00:51:11,930
thousands of passwords you can mitigate

00:51:09,809 --> 00:51:14,609
that with something like failed to man

00:51:11,930 --> 00:51:18,030
which is a package which analyzes the

00:51:14,609 --> 00:51:19,200
logs on your server and bans someone who

00:51:18,030 --> 00:51:23,549
keeps trying to login over and over

00:51:19,200 --> 00:51:25,680
again and fails to login only install

00:51:23,549 --> 00:51:27,059
what you need and regularly audit what

00:51:25,680 --> 00:51:28,859
you have installed in your servers I

00:51:27,059 --> 00:51:31,950
know this the hard way and i'll show you

00:51:28,859 --> 00:51:34,109
in a sec you know don't install crafts

00:51:31,950 --> 00:51:38,160
and leave it lying around the less

00:51:34,109 --> 00:51:39,599
packages you have installed the the

00:51:38,160 --> 00:51:43,200
easier is for you to manage as well

00:51:39,599 --> 00:51:45,180
right so for example this is our last

00:51:43,200 --> 00:51:49,440
little sea creature or second to last

00:51:45,180 --> 00:51:51,869
actually this last sea creature second

00:51:49,440 --> 00:51:54,329
to last just said that is a squid by

00:51:51,869 --> 00:51:56,670
itself is pretty innocent but when

00:51:54,329 --> 00:52:02,430
combined with this guy things get pretty

00:51:56,670 --> 00:52:05,250
ugly i installed squid one day on my VPS

00:52:02,430 --> 00:52:06,690
and played around with it and then got

00:52:05,250 --> 00:52:07,350
distracted by something shiny on the

00:52:06,690 --> 00:52:10,830
internet

00:52:07,350 --> 00:52:13,350
and then a couple of weeks later my VPS

00:52:10,830 --> 00:52:16,230
provider sent me a support ticket and

00:52:13,350 --> 00:52:21,900
said your box is sending lots of spam

00:52:16,230 --> 00:52:24,390
email it's not don't be silly yes it was

00:52:21,900 --> 00:52:25,710
a lot of spam email and the reason why

00:52:24,390 --> 00:52:28,020
is because you know a couple of weeks

00:52:25,710 --> 00:52:30,810
ago I had installed squid and left it

00:52:28,020 --> 00:52:32,820
completely open to the Internet see they

00:52:30,810 --> 00:52:35,700
discovered that because I left it there

00:52:32,820 --> 00:52:38,520
I'm configured I very promptly

00:52:35,700 --> 00:52:41,760
uninstalled it and that's just how easy

00:52:38,520 --> 00:52:45,440
is you know distracting by shiny things

00:52:41,760 --> 00:52:49,020
on the Internet is very easy trust me so

00:52:45,440 --> 00:52:51,540
here's a few resources take photo if you

00:52:49,020 --> 00:52:53,960
need to i'll also perfectly slides

00:52:51,540 --> 00:52:58,170
online so you don't need to take photo

00:52:53,960 --> 00:53:00,860
securing PHP they have to book two books

00:52:58,170 --> 00:53:03,960
it's run by a guy called Chris core nut

00:53:00,860 --> 00:53:06,840
who also runs PHP developer to org which

00:53:03,960 --> 00:53:09,480
has been in my new source for FP hv for

00:53:06,840 --> 00:53:12,420
a long time the OWASP site of course I

00:53:09,480 --> 00:53:13,920
mentioned Anthony Ferrara he's the

00:53:12,420 --> 00:53:15,390
person that wrote the password

00:53:13,920 --> 00:53:18,720
compatibility library which is also

00:53:15,390 --> 00:53:21,150
linked there and paragon initiatives

00:53:18,720 --> 00:53:25,260
enterprises i looked at it and thought

00:53:21,150 --> 00:53:27,180
at Paragon internet explorer yeah that's

00:53:25,260 --> 00:53:29,700
a good source of good security

00:53:27,180 --> 00:53:32,490
information as well it's sort of trying

00:53:29,700 --> 00:53:35,210
to be the best and they also made the

00:53:32,490 --> 00:53:40,190
the random bytes and random number

00:53:35,210 --> 00:53:43,200
libraries and also web sec website I oh

00:53:40,190 --> 00:53:45,840
there's some good resources on there so

00:53:43,200 --> 00:53:49,260
the golden rules reminds you very

00:53:45,840 --> 00:53:53,190
quickly before we go keep it simple know

00:53:49,260 --> 00:53:55,920
the risks fail securely don't reinvent

00:53:53,190 --> 00:53:59,520
the wheel and never trust anything or

00:53:55,920 --> 00:54:01,920
anyone if you follow all this you'll get

00:53:59,520 --> 00:54:05,730
our last secret of the day a security

00:54:01,920 --> 00:54:10,730
seal all right does anyone have any

00:54:05,730 --> 00:54:10,730
questions I think we have time yep

00:54:17,570 --> 00:54:20,980
nothing how we got one of the back

00:54:28,520 --> 00:54:34,610
hi I'm just wondering what you think of

00:54:32,450 --> 00:54:36,920
using stuff like burp suite to like

00:54:34,610 --> 00:54:39,530
batter your application and just sort of

00:54:36,920 --> 00:54:42,370
fun but vulnerabilities yeah yeah any

00:54:39,530 --> 00:54:44,420
tool out there you know siege whatever

00:54:42,370 --> 00:54:47,630
you know there's there's loads of tools

00:54:44,420 --> 00:54:49,480
out there use them absolutely yeah go

00:54:47,630 --> 00:54:52,250
ahead and use tools that allow you to

00:54:49,480 --> 00:54:54,020
hack things and you know maybe automate

00:54:52,250 --> 00:54:58,150
all this sort of trying things manually

00:54:54,020 --> 00:54:58,150
yeah absolutely good idea thank you

00:54:59,350 --> 00:55:07,760
anything else okay um please do rate my

00:55:04,730 --> 00:55:09,760
talk on joined in there's the Lincoln on

00:55:07,760 --> 00:55:12,590
all that or it's on the front page of

00:55:09,760 --> 00:55:14,990
joined in if you just want to click

00:55:12,590 --> 00:55:16,850
through to it I would appreciate your

00:55:14,990 --> 00:55:18,260
feedback in improving this talk for next

00:55:16,850 --> 00:55:21,880
time and obviously all the other

00:55:18,260 --> 00:55:21,880

YouTube URL: https://www.youtube.com/watch?v=XLNm0-eoLaE


