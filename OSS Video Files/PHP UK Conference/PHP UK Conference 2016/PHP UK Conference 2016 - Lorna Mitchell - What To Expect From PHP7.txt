Title: PHP UK Conference 2016 - Lorna Mitchell - What To Expect From PHP7
Publication date: 2016-03-16
Playlist: PHP UK Conference 2016
Description: 
	We have a new major release of PHP! But what does this mean for PHP developers in the Real World (TM)? This talk has everything you need to know to be the expert. Find out how the remarkable performance improvements could look on your own system, and see the shiny new features in this major release of the web's favourite scripting language. Get advice on how to upgrade your application, making use of the new features and avoiding the backwards compatibility traps. Developers and technical leaders everywhere who want to use better PHP will benefit from this session.
Captions: 
	00:00:04,710 --> 00:00:12,330
I'm Lorna I'm a P developer

00:00:08,059 --> 00:00:15,030
consultants not sure I'd describe myself

00:00:12,330 --> 00:00:17,820
as appear to be seven expert I'm

00:00:15,030 --> 00:00:20,040
definitely an enthusiast so I've been

00:00:17,820 --> 00:00:22,320
following PHP seven really closely right

00:00:20,040 --> 00:00:24,090
from when we started having those ideas

00:00:22,320 --> 00:00:28,439
decided that we should go to pitch be

00:00:24,090 --> 00:00:31,890
seven and kind of brought the stuff that

00:00:28,439 --> 00:00:34,350
I think as developers we most need to

00:00:31,890 --> 00:00:36,840
know there's basically bias to things I

00:00:34,350 --> 00:00:41,460
think we're exciting so I've come to

00:00:36,840 --> 00:00:44,910
tell you about them before I dive really

00:00:41,460 --> 00:00:46,949
deeply into the code side of things I

00:00:44,910 --> 00:00:48,510
want to just set the scene in case you

00:00:46,949 --> 00:00:51,989
haven't been keeping up with precisely

00:00:48,510 --> 00:00:54,719
the version numbering in PHP and the

00:00:51,989 --> 00:00:58,199
current versions PHP 5.5 I've included

00:00:54,719 --> 00:01:00,120
it on this slide but it is in security

00:00:58,199 --> 00:01:03,420
fixes only right now and that's only for

00:01:00,120 --> 00:01:05,460
a few more months so five point five you

00:01:03,420 --> 00:01:07,290
need to be looking at migrating five

00:01:05,460 --> 00:01:12,990
point six is a current stable version of

00:01:07,290 --> 00:01:17,100
PHP and the support for five point six

00:01:12,990 --> 00:01:19,829
has been hugely extended five point six

00:01:17,100 --> 00:01:26,040
will be the last release on the PHP five

00:01:19,829 --> 00:01:28,079
branch a few applications may have

00:01:26,040 --> 00:01:30,840
issues upgrading from five to seven it's

00:01:28,079 --> 00:01:34,560
a minority but in the interests of those

00:01:30,840 --> 00:01:37,079
people the support and specifically the

00:01:34,560 --> 00:01:39,420
security support has been extended way

00:01:37,079 --> 00:01:41,670
beyond what we would normally expect so

00:01:39,420 --> 00:01:43,200
I would expect you to have about fifteen

00:01:41,670 --> 00:01:46,909
months remaining and you've actually got

00:01:43,200 --> 00:01:50,780
nearly three years so if you are stuck

00:01:46,909 --> 00:01:50,780
please don't feel abandoned

00:01:50,930 --> 00:01:56,880
PHP seven came out in December now

00:01:53,969 --> 00:01:59,100
bizarrely the PHP 7.0 support ends

00:01:56,880 --> 00:02:02,399
before the PHP 5.6 support and that's

00:01:59,100 --> 00:02:04,289
because PHP 7.1 or come along later this

00:02:02,399 --> 00:02:07,619
year and will just keep on upgrading

00:02:04,289 --> 00:02:09,030
between the seven versions if you need

00:02:07,619 --> 00:02:10,500
to refer to any of this information or

00:02:09,030 --> 00:02:12,690
present it in a manager friendly format

00:02:10,500 --> 00:02:15,060
you can go here PHP dot that has a nice

00:02:12,690 --> 00:02:18,210
timeline picture for you so you can

00:02:15,060 --> 00:02:20,610
share that if you need to all right

00:02:18,210 --> 00:02:24,840
HP seventh the number one thing you need

00:02:20,610 --> 00:02:29,820
to know about PHP seven PHP seven is

00:02:24,840 --> 00:02:32,940
fast now I don't know how many of you

00:02:29,820 --> 00:02:34,620
are regulars at this event I definitely

00:02:32,940 --> 00:02:36,330
stood on the stage last year and said

00:02:34,620 --> 00:02:38,460
you should have grade there's a few

00:02:36,330 --> 00:02:39,810
people nodding at me I'm so sorry you

00:02:38,460 --> 00:02:41,760
should have grade two basically five

00:02:39,810 --> 00:02:44,930
point four five or six because oh my

00:02:41,760 --> 00:02:44,930
gosh it's so fast

00:02:45,020 --> 00:02:54,270
what a difference a year makes

00:02:47,370 --> 00:02:58,490
um PHP 5.4 wasn't fast at all um PHP

00:02:54,270 --> 00:03:04,610
seven is performing in a way that is

00:02:58,490 --> 00:03:07,920
blowing me away B is 20 years old

00:03:04,610 --> 00:03:09,780
it's not new we're not knocking the

00:03:07,920 --> 00:03:12,000
rough edges of something we took an

00:03:09,780 --> 00:03:15,980
established language that has had

00:03:12,000 --> 00:03:20,040
performance improvements and we made it

00:03:15,980 --> 00:03:21,510
how much faster so brought you last

00:03:20,040 --> 00:03:23,610
year's graph with the performance

00:03:21,510 --> 00:03:26,790
improvement with PHP seven on it as well

00:03:23,610 --> 00:03:28,200
so away on left-hand side I've got the

00:03:26,790 --> 00:03:31,260
old versions going across the page B

00:03:28,200 --> 00:03:35,070
seven on the right this is a graph of

00:03:31,260 --> 00:03:38,060
how long it takes to do something so

00:03:35,070 --> 00:03:45,420
last time is better here it is I

00:03:38,060 --> 00:03:49,370
included PHP 5.3 now PHP 5.3 is very

00:03:45,420 --> 00:03:53,160
dead but I know that usage statistics

00:03:49,370 --> 00:03:57,150
and although you guys are definitely on

00:03:53,160 --> 00:04:01,110
the leading edge of the PHP community

00:03:57,150 --> 00:04:03,660
industry probably some of you still have

00:04:01,110 --> 00:04:05,700
5.3 applications so if you are on PHP

00:04:03,660 --> 00:04:07,590
5.3 this is just giving you some context

00:04:05,700 --> 00:04:09,360
it also shows you the speed-up that I

00:04:07,590 --> 00:04:12,060
was raving about last year between 5.3

00:04:09,360 --> 00:04:15,030
or 5.4 which seemed really big and now

00:04:12,060 --> 00:04:18,960
this is PHP 7 this is how long it takes

00:04:15,030 --> 00:04:22,920
to execute something the this is the

00:04:18,960 --> 00:04:27,930
bench dot PHP script that's in the PHP

00:04:22,920 --> 00:04:30,540
source tree so it's loops and algorithms

00:04:27,930 --> 00:04:32,760
and calculations really just

00:04:30,540 --> 00:04:34,170
straight up speed what you don't see on

00:04:32,760 --> 00:04:35,910
this graph is a couple of things you

00:04:34,170 --> 00:04:37,410
don't see on this graph is the

00:04:35,910 --> 00:04:41,160
difference between five point three and

00:04:37,410 --> 00:04:42,090
five point four is significant you will

00:04:41,160 --> 00:04:44,730
notice when you upgrade your

00:04:42,090 --> 00:04:47,370
applications but a lot of the speed-up

00:04:44,730 --> 00:04:51,000
there was improvements in object

00:04:47,370 --> 00:04:53,670
instantiation the bench dot php' I'm not

00:04:51,000 --> 00:04:56,940
sure it does any object instantiation so

00:04:53,670 --> 00:04:58,620
you're not seeing that speed-up for real

00:04:56,940 --> 00:05:01,500
applications the improvement was much

00:04:58,620 --> 00:05:03,510
bigger than this the other thing that

00:05:01,500 --> 00:05:06,300
you can't see is the memory reduction

00:05:03,510 --> 00:05:09,480
which both in this jump and in this jump

00:05:06,300 --> 00:05:15,870
is huge so we're getting a lot lot more

00:05:09,480 --> 00:05:21,030
mileage out of the same hardware this

00:05:15,870 --> 00:05:25,230
seems somewhat improbable why is PHP

00:05:21,030 --> 00:05:28,230
seven so fast grew out of a project

00:05:25,230 --> 00:05:30,720
called PHP ng PHP next generation and it

00:05:28,230 --> 00:05:34,140
was hugely inspired by the things

00:05:30,720 --> 00:05:36,270
happening in h h vm PHP 7 performs very

00:05:34,140 --> 00:05:39,240
comparable with HH vm which with respect

00:05:36,270 --> 00:05:40,680
to two years has been quite quick some

00:05:39,240 --> 00:05:42,210
of the new syntax features were

00:05:40,680 --> 00:05:44,190
influenced by hack lang which is a

00:05:42,210 --> 00:05:47,730
language which runs on HTM as well as

00:05:44,190 --> 00:05:51,300
pitch he does we achieved this with a

00:05:47,730 --> 00:05:53,760
major refactoring of the Zend engine the

00:05:51,300 --> 00:05:57,240
brightest minds in internals

00:05:53,760 --> 00:06:00,540
contributions in bhp did some benchmarks

00:05:57,240 --> 00:06:03,450
and then spent a year hitting those

00:06:00,540 --> 00:06:06,360
benchmarks with a great big crowbar to

00:06:03,450 --> 00:06:09,030
make them faster and probably

00:06:06,360 --> 00:06:11,780
misrepresenting this horribly but the

00:06:09,030 --> 00:06:15,450
way it was explained to me was

00:06:11,780 --> 00:06:18,720
everywhere we store a variable there is

00:06:15,450 --> 00:06:21,090
one less level of indirection good news

00:06:18,720 --> 00:06:24,710
it's fast bad news all the extensions

00:06:21,090 --> 00:06:27,780
need rewriting and this kind of radical

00:06:24,710 --> 00:06:30,030
so we've got this go PHP seven to all go

00:06:27,780 --> 00:06:32,580
PHP seven extensions project which has

00:06:30,030 --> 00:06:35,870
been running for for about a year since

00:06:32,580 --> 00:06:38,460
the alphas came out really looking at

00:06:35,870 --> 00:06:41,340
keeping track of which extensions are

00:06:38,460 --> 00:06:42,370
updated which need attention this is

00:06:41,340 --> 00:06:44,620
great because it'll actually

00:06:42,370 --> 00:06:48,310
or what you need what your dependencies

00:06:44,620 --> 00:06:50,530
far and it lets the some of the

00:06:48,310 --> 00:06:52,600
extensions main tailors know where their

00:06:50,530 --> 00:06:54,820
attention is needed there are

00:06:52,600 --> 00:06:56,850
instructions on the site for testing

00:06:54,820 --> 00:06:58,930
extensions compiling your own extensions

00:06:56,850 --> 00:07:01,000
so that might be really helpful if you

00:06:58,930 --> 00:07:03,160
find you do need something which either

00:07:01,000 --> 00:07:05,530
hasn't been upgraded yet or you need to

00:07:03,160 --> 00:07:08,169
start testing patches I found it really

00:07:05,530 --> 00:07:11,050
approachable one more link on the slide

00:07:08,169 --> 00:07:15,280
to one of rasmus's presentations where

00:07:11,050 --> 00:07:18,340
he his benchmarks are all about

00:07:15,280 --> 00:07:21,780
throughput so he has a known virtual

00:07:18,340 --> 00:07:25,840
machine and he has put a number of

00:07:21,780 --> 00:07:28,690
well-known open-source projects under

00:07:25,840 --> 00:07:30,789
load on different versions of PHP per

00:07:28,690 --> 00:07:33,250
identical hardware he also has numbers

00:07:30,789 --> 00:07:37,389
for h h vm so for more comprehensive

00:07:33,250 --> 00:07:39,340
benchmarks i recommend his one thing

00:07:37,389 --> 00:07:41,680
you'll hear about a lot in the context

00:07:39,340 --> 00:07:45,370
of PHP 7 performance is the fact that we

00:07:41,680 --> 00:07:48,460
now have an abstract syntax tree step in

00:07:45,370 --> 00:07:50,470
our compilation process what this means

00:07:48,460 --> 00:07:52,599
is we start off with fish P code we go

00:07:50,470 --> 00:07:54,849
two tokens we always did that then we

00:07:52,599 --> 00:07:56,889
went from tokens to op cash in older

00:07:54,849 --> 00:08:00,250
versions so op codes sorry in older

00:07:56,889 --> 00:08:05,800
versions of PHP we now go PHP code

00:08:00,250 --> 00:08:07,090
tokens tree op codes so yup codes what

00:08:05,800 --> 00:08:09,789
you would expect them to be and their

00:08:07,090 --> 00:08:12,430
opcode cached in the normal way but this

00:08:09,789 --> 00:08:14,919
extra step with the syntax tree gives us

00:08:12,430 --> 00:08:17,080
new ways of generating op codes it's

00:08:14,919 --> 00:08:19,120
just much more flexible than the kind of

00:08:17,080 --> 00:08:21,449
stream of tokens than we had before and

00:08:19,120 --> 00:08:23,650
that's part of our performance boost

00:08:21,449 --> 00:08:24,160
just to give you an idea of how that

00:08:23,650 --> 00:08:26,260
looks

00:08:24,160 --> 00:08:28,060
try to write some really simple PHP code

00:08:26,260 --> 00:08:31,240
that we could like walk through and look

00:08:28,060 --> 00:08:32,979
at tokens and then the tree only the

00:08:31,240 --> 00:08:38,169
first line really fits in either of the

00:08:32,979 --> 00:08:41,490
other formats so Don a round between

00:08:38,169 --> 00:08:43,719
Norton one as tokens looks like this

00:08:41,490 --> 00:08:45,750
literally reads left to right so you

00:08:43,719 --> 00:08:48,160
encounter there's an opening PHP tag

00:08:45,750 --> 00:08:50,520
there's a variable we're assigning it

00:08:48,160 --> 00:08:53,140
it's a function it takes these arguments

00:08:50,520 --> 00:08:54,470
entry form it looks more like this so

00:08:53,140 --> 00:08:58,160
you get the sense that

00:08:54,470 --> 00:09:00,530
here is a statement it's a it's an

00:08:58,160 --> 00:09:02,060
assignment on one side there's a

00:09:00,530 --> 00:09:03,440
variable on the other side there's a

00:09:02,060 --> 00:09:05,270
function call so you can instantly

00:09:03,440 --> 00:09:07,280
imagine how you would pass this

00:09:05,270 --> 00:09:09,590
structure there's a lot of good science

00:09:07,280 --> 00:09:13,370
around working with trees and we have

00:09:09,590 --> 00:09:15,590
that now I'm expecting some really good

00:09:13,370 --> 00:09:18,100
static analysis tools to arrive as a

00:09:15,590 --> 00:09:21,320
result any of you who also write Python

00:09:18,100 --> 00:09:25,130
that has an abstract syntax tree step

00:09:21,320 --> 00:09:29,420
and yeah it leads to way more

00:09:25,130 --> 00:09:34,010
possibilities so watch this space new

00:09:29,420 --> 00:09:36,010
features let's start with the one with

00:09:34,010 --> 00:09:40,250
the coolest name the spaceship operator

00:09:36,010 --> 00:09:41,660
okay so everybody knows we've got a

00:09:40,250 --> 00:09:45,740
spaceship operator but do you know what

00:09:41,660 --> 00:09:47,480
it does it's a one step comparison in

00:09:45,740 --> 00:09:50,600
the clue the way to remember what it

00:09:47,480 --> 00:09:53,480
does is in its syntax so we have a less

00:09:50,600 --> 00:09:55,310
than sign an equal sign a greater than

00:09:53,480 --> 00:09:57,440
sign and it tells you if something is

00:09:55,310 --> 00:10:02,150
less than equal to or greater than

00:09:57,440 --> 00:10:08,240
something else in common with a lot of

00:10:02,150 --> 00:10:10,100
the PHP comparison operators you test if

00:10:08,240 --> 00:10:13,820
they are the same but what they actually

00:10:10,100 --> 00:10:16,490
return is how different they are so if

00:10:13,820 --> 00:10:18,200
things are the same which feels like yes

00:10:16,490 --> 00:10:27,140
when you've asked a function if they're

00:10:18,200 --> 00:10:29,390
the same the answer is zero for yes so

00:10:27,140 --> 00:10:31,250
this is a bit like that if the first

00:10:29,390 --> 00:10:33,920
thing is greater than the second thing

00:10:31,250 --> 00:10:37,730
you'll get a one not a measure of

00:10:33,920 --> 00:10:39,650
difference just one if they're equal or

00:10:37,730 --> 00:10:42,890
equivalent its equivalent to the double

00:10:39,650 --> 00:10:44,450
equals comparison you get a zero if the

00:10:42,890 --> 00:10:46,820
first thing is less than the second

00:10:44,450 --> 00:10:48,710
thing you get a minus one so you can

00:10:46,820 --> 00:10:50,920
only get one zero or minus one this is

00:10:48,710 --> 00:10:55,220
brilliant if you're trying to do quick

00:10:50,920 --> 00:10:57,650
sorting or sort of recursing on trees we

00:10:55,220 --> 00:11:01,250
could do this with if statements in PHP

00:10:57,650 --> 00:11:04,480
5 but it's nothing like a spaceship

00:11:01,250 --> 00:11:04,480
operator come on

00:11:04,970 --> 00:11:09,410
with another new piece of syntax which

00:11:07,250 --> 00:11:12,230
is called the null coalesce operator and

00:11:09,410 --> 00:11:14,240
it builds on the ternary operator so

00:11:12,230 --> 00:11:16,640
here's a quick refresher on the ternary

00:11:14,240 --> 00:11:17,690
operator and it's shorthand because I

00:11:16,640 --> 00:11:20,590
think it really helps for the null

00:11:17,690 --> 00:11:22,910
coalesce this is the ternary operator

00:11:20,590 --> 00:11:25,370
you evaluate the thing before the

00:11:22,910 --> 00:11:27,080
question mark if it's true you return

00:11:25,370 --> 00:11:29,720
the thing between the question mark of

00:11:27,080 --> 00:11:33,160
the colon and if that first thing was

00:11:29,720 --> 00:11:35,870
false you return think after the colon

00:11:33,160 --> 00:11:37,490
if the first two things are the same we

00:11:35,870 --> 00:11:39,380
have this shorthand so you can kind of

00:11:37,490 --> 00:11:41,150
fold it upon itself so if you're

00:11:39,380 --> 00:11:42,560
repeating an argument you only need to

00:11:41,150 --> 00:11:43,940
write it once and you can put the

00:11:42,560 --> 00:11:44,590
question mark hold on right next to each

00:11:43,940 --> 00:11:47,270
other

00:11:44,590 --> 00:11:50,530
ternary shorthand so if the first thing

00:11:47,270 --> 00:11:52,730
is true return it question mark colon

00:11:50,530 --> 00:11:54,190
the thing you returning the first thing

00:11:52,730 --> 00:11:57,800
is false

00:11:54,190 --> 00:12:00,470
PHP seven brings us a brilliant piece of

00:11:57,800 --> 00:12:02,860
syntax it's two question marks I

00:12:00,470 --> 00:12:06,080
normally use this for extreme confusion

00:12:02,860 --> 00:12:10,400
but no no it's a new valid operator in

00:12:06,080 --> 00:12:12,980
PHP seven the null coalesced operator is

00:12:10,400 --> 00:12:19,250
ternary shorthand exactly as I just

00:12:12,980 --> 00:12:21,410
explained it but with an it is set we

00:12:19,250 --> 00:12:22,840
always needed an is set we didn't get it

00:12:21,410 --> 00:12:25,250
the first time around so here it is

00:12:22,840 --> 00:12:29,990
we're the second attempt to the syntax

00:12:25,250 --> 00:12:32,390
and so what we've got here is I've got

00:12:29,990 --> 00:12:37,760
your code example so I'm defining dollar

00:12:32,390 --> 00:12:42,560
B on line three I'm doing dollar a null

00:12:37,760 --> 00:12:47,350
coalesce to dollar a is not set so it

00:12:42,560 --> 00:12:50,530
fails on the comparison and we return to

00:12:47,350 --> 00:12:53,839
the second example

00:12:50,530 --> 00:12:56,990
dollar a still isn't set so we don't

00:12:53,839 --> 00:13:00,050
return that we return once after the

00:12:56,990 --> 00:13:02,810
null coalesce operator which is itself a

00:13:00,050 --> 00:13:06,050
little an old coalesce operation dollar

00:13:02,810 --> 00:13:08,780
B dollar B is set so we return that so

00:13:06,050 --> 00:13:10,430
we never make it to the seven it's null

00:13:08,780 --> 00:13:12,320
coalesce because it allows you to work

00:13:10,430 --> 00:13:15,170
along a series of values and just grab

00:13:12,320 --> 00:13:16,380
the first one that's actually set so a

00:13:15,170 --> 00:13:18,600
bit like turn

00:13:16,380 --> 00:13:20,820
used to let you kind of check a value

00:13:18,600 --> 00:13:23,460
and if you know if they haven't set a

00:13:20,820 --> 00:13:25,560
number of results per page you could set

00:13:23,460 --> 00:13:28,950
a default this is the same kind of thing

00:13:25,560 --> 00:13:32,370
but you can imagine testing a few more

00:13:28,950 --> 00:13:34,710
things so you could test does the user

00:13:32,370 --> 00:13:36,660
have a specific preference for this is

00:13:34,710 --> 00:13:38,400
this application installation configured

00:13:36,660 --> 00:13:41,520
with a separate preference otherwise

00:13:38,400 --> 00:13:44,700
there's a system default so something

00:13:41,520 --> 00:13:46,590
like that where a bit like running PHP

00:13:44,700 --> 00:13:48,300
is web server if you don't supply a

00:13:46,590 --> 00:13:51,330
config value you don't supply a

00:13:48,300 --> 00:13:53,730
config.php to ini for you get all the

00:13:51,330 --> 00:13:55,340
built-in defaults that are in PHP some

00:13:53,730 --> 00:13:58,320
of them are really weird

00:13:55,340 --> 00:14:00,450
this is a bit like that you've got the

00:13:58,320 --> 00:14:02,340
option to override these values and the

00:14:00,450 --> 00:14:03,990
nil coalesce just lets you they don't

00:14:02,340 --> 00:14:05,700
even have to be set just lets you come

00:14:03,990 --> 00:14:08,490
along and then find something which is

00:14:05,700 --> 00:14:12,510
defined and use that crucially it's is

00:14:08,490 --> 00:14:16,470
set not empty so if you can it means you

00:14:12,510 --> 00:14:22,860
can set false looking values and use

00:14:16,470 --> 00:14:26,160
them okay big feature coming up again

00:14:22,860 --> 00:14:27,600
let me give you the PHP 5 story just to

00:14:26,160 --> 00:14:30,000
get everyone on the same page before I

00:14:27,600 --> 00:14:33,810
rush off so you can tell kind of what's

00:14:30,000 --> 00:14:37,080
in 5 and what you need to wait for 7 PHP

00:14:33,810 --> 00:14:40,290
5 has type hinting it always has had but

00:14:37,080 --> 00:14:44,040
only on complex types so you can type

00:14:40,290 --> 00:14:47,850
int on array you can type hint on object

00:14:44,040 --> 00:14:50,100
so that might be class name parent class

00:14:47,850 --> 00:14:53,400
name or interface which is being

00:14:50,100 --> 00:14:55,890
implemented I've written a really

00:14:53,400 --> 00:14:58,170
trivial function here in an effort to

00:14:55,890 --> 00:15:00,090
show you some code while still fitting

00:14:58,170 --> 00:15:06,420
it on the slide out of size you might be

00:15:00,090 --> 00:15:09,030
able to read if we pass nonsense into

00:15:06,420 --> 00:15:11,040
this function remember it's an array has

00:15:09,030 --> 00:15:13,710
the first the first argument I'm passed

00:15:11,040 --> 00:15:16,260
in two numbers will get different errors

00:15:13,710 --> 00:15:20,160
depending on our version of PHP some PHP

00:15:16,260 --> 00:15:21,900
5 we get a catchable fatal error this is

00:15:20,160 --> 00:15:23,970
this is what I would call a

00:15:21,900 --> 00:15:26,280
hypothetically catchable fatal error

00:15:23,970 --> 00:15:28,240
the catchable fatal error is an error

00:15:26,280 --> 00:15:30,100
which will hit your error handler

00:15:28,240 --> 00:15:32,350
at which point you have the opportunity

00:15:30,100 --> 00:15:33,610
to convert it into an exception and then

00:15:32,350 --> 00:15:35,350
it will borrow it back into your code

00:15:33,610 --> 00:15:36,360
where it should have exception drum and

00:15:35,350 --> 00:15:39,490
then you can handle it

00:15:36,360 --> 00:15:42,490
really so yeah technically you can catch

00:15:39,490 --> 00:15:44,199
it but really who does um PHP seven

00:15:42,490 --> 00:15:48,220
comes up with something a little bit

00:15:44,199 --> 00:15:54,399
different PHP sevens error says fatal

00:15:48,220 --> 00:15:56,410
error uncaught type error hmm that's new

00:15:54,399 --> 00:15:57,730
and it's a little bit inconvenient

00:15:56,410 --> 00:16:00,069
because I would like to talk to you

00:15:57,730 --> 00:16:01,449
about type ins I've just illustrated

00:16:00,069 --> 00:16:04,240
that we've got a whole new error thing

00:16:01,449 --> 00:16:07,119
going on in PHP 7 I'm gonna stick with

00:16:04,240 --> 00:16:09,100
my type int story for a little while and

00:16:07,119 --> 00:16:15,819
we'll come back to the errors in about

00:16:09,100 --> 00:16:18,779
four minutes so type in PHP seven brings

00:16:15,819 --> 00:16:23,170
scalar type hints so in addition to

00:16:18,779 --> 00:16:30,119
array and object you can now type int on

00:16:23,170 --> 00:16:35,079
string int float and ball listen to me

00:16:30,119 --> 00:16:38,110
these are now reserved words in PHP so

00:16:35,079 --> 00:16:39,939
that string class that showed up in your

00:16:38,110 --> 00:16:43,600
internal code when you employed a Java

00:16:39,939 --> 00:16:47,559
person for a while everybody's laughing

00:16:43,600 --> 00:16:49,389
you employed them as well Wow um strings

00:16:47,559 --> 00:16:50,649
now reserved word so this is one thing

00:16:49,389 --> 00:16:53,679
when you're just gonna go and grep your

00:16:50,649 --> 00:16:55,569
code base and rename the name of the

00:16:53,679 --> 00:16:58,569
class everybody has a string class I

00:16:55,569 --> 00:17:01,749
don't know why I'm moving to reserved

00:16:58,569 --> 00:17:04,929
words in PHP is super painful just for

00:17:01,749 --> 00:17:06,850
the sheer size of the install base you

00:17:04,929 --> 00:17:09,720
can't add any reserved words without

00:17:06,850 --> 00:17:13,720
breaking somebody's installation write

00:17:09,720 --> 00:17:16,510
PHP 7.0 is a manger version release and

00:17:13,720 --> 00:17:22,209
it's the first major version release in

00:17:16,510 --> 00:17:24,669
12 years I'll forgive them having to

00:17:22,209 --> 00:17:26,529
rename my string class in return to the

00:17:24,669 --> 00:17:28,539
functionality I'm getting here it's

00:17:26,529 --> 00:17:32,830
inconvenient but in the context of

00:17:28,539 --> 00:17:35,649
things it's fine the scalar type hints

00:17:32,830 --> 00:17:38,380
let me do this so as well as type ending

00:17:35,649 --> 00:17:41,290
my array for the first parameter I can

00:17:38,380 --> 00:17:44,980
now type hint int for the second

00:17:41,290 --> 00:17:46,420
parameter on line one well this means is

00:17:44,980 --> 00:17:48,370
now I can call it if you look at the

00:17:46,420 --> 00:17:51,370
second code block on this screen I'm

00:17:48,370 --> 00:17:53,400
defining an array on line one and then

00:17:51,370 --> 00:17:57,550
I'm calling my method on line two

00:17:53,400 --> 00:18:00,250
passing an array and a number what do

00:17:57,550 --> 00:18:02,440
you notice about this number it's a

00:18:00,250 --> 00:18:07,090
string says the entire audience

00:18:02,440 --> 00:18:09,310
yes exactly good old PHP this is a

00:18:07,090 --> 00:18:11,050
number two it's got quotes around it

00:18:09,310 --> 00:18:14,620
look it's a bit like a string to me two

00:18:11,050 --> 00:18:16,480
and PHP has always accepted this you can

00:18:14,620 --> 00:18:19,240
pass it a string with quotes around it

00:18:16,480 --> 00:18:22,450
and a digit in it to a numeric function

00:18:19,240 --> 00:18:25,570
in PHP five and so you can in PHP seven

00:18:22,450 --> 00:18:29,200
the backwards-compatibility by default

00:18:25,570 --> 00:18:32,410
on scalar type hints is that it will

00:18:29,200 --> 00:18:35,170
coerce exactly doing the type juggling

00:18:32,410 --> 00:18:37,720
that we expect from PHP you do not have

00:18:35,170 --> 00:18:44,380
to cast to int in order to be able to

00:18:37,720 --> 00:18:47,020
pass in that's the default behavior but

00:18:44,380 --> 00:18:49,000
it might not be what you want so this

00:18:47,020 --> 00:18:53,260
this is PHP there has to be lots of ways

00:18:49,000 --> 00:18:59,530
to do everything the reality is in PHP

00:18:53,260 --> 00:19:03,130
we don't just build websites anymore PHP

00:18:59,530 --> 00:19:05,500
is still one of the best ways I know to

00:19:03,130 --> 00:19:08,620
solve the web problem as we've always

00:19:05,500 --> 00:19:11,170
said and it's brilliant that api's and

00:19:08,620 --> 00:19:15,340
all sorts of related things we also

00:19:11,170 --> 00:19:19,140
build applications in PHP now it's more

00:19:15,340 --> 00:19:22,390
than just websites and in those cases

00:19:19,140 --> 00:19:24,490
the data types sometimes do matter

00:19:22,390 --> 00:19:26,620
sometimes we need to program like

00:19:24,490 --> 00:19:32,170
computer scientists and they kind of

00:19:26,620 --> 00:19:35,200
like that PHP lets us do that coming in

00:19:32,170 --> 00:19:40,000
with this scalar type int is the option

00:19:35,200 --> 00:19:43,660
to strictly check your types in order to

00:19:40,000 --> 00:19:48,250
do this you add this declare construct

00:19:43,660 --> 00:19:51,480
to the top of the file that contains the

00:19:48,250 --> 00:19:51,480
function call

00:19:52,680 --> 00:19:59,860
the function call when you declare the

00:19:56,230 --> 00:20:03,180
function you can't dictate whether those

00:19:59,860 --> 00:20:06,940
check the type hints will be checked

00:20:03,180 --> 00:20:11,980
coercively in the sort of relaxed 55 way

00:20:06,940 --> 00:20:14,650
or strictly if you wish what this means

00:20:11,980 --> 00:20:16,990
is that library authors and framework

00:20:14,650 --> 00:20:22,420
authors can just jump in and add in

00:20:16,990 --> 00:20:24,490
their type hints and as consumers or in

00:20:22,420 --> 00:20:26,740
our own applications we make the

00:20:24,490 --> 00:20:29,500
decision about whether or not we need to

00:20:26,740 --> 00:20:32,590
be strictly type checked or whether we

00:20:29,500 --> 00:20:36,370
would like to retain the coercive type

00:20:32,590 --> 00:20:39,670
checking that we used to so you can use

00:20:36,370 --> 00:20:41,320
it as you wish declare needs to go first

00:20:39,670 --> 00:20:42,790
in the file it's the only thing that

00:20:41,320 --> 00:20:45,820
goes before the namespace operator

00:20:42,790 --> 00:20:47,680
declare is not new in PHP seven but it's

00:20:45,820 --> 00:20:50,770
not widely used either I've only seen

00:20:47,680 --> 00:20:52,840
that a couple of times at PHP five with

00:20:50,770 --> 00:20:56,230
the strict types enabled is a strict

00:20:52,840 --> 00:20:59,710
type check in almost all cases the type

00:20:56,230 --> 00:21:02,920
must match so if the type hint is string

00:20:59,710 --> 00:21:05,530
you must supply a string the same for

00:21:02,920 --> 00:21:07,480
ball the only exception is that you can

00:21:05,530 --> 00:21:09,490
supply an INT where a float is required

00:21:07,480 --> 00:21:10,960
so if you don't have a decimal portion

00:21:09,490 --> 00:21:12,790
it will just fill that in for you but

00:21:10,960 --> 00:21:15,580
otherwise if it's an INT you must supply

00:21:12,790 --> 00:21:18,600
an INT if it's a float a float or an INT

00:21:15,580 --> 00:21:22,660
just that sort of makes sense to me

00:21:18,600 --> 00:21:24,580
so that's the scalar type hinting for

00:21:22,660 --> 00:21:27,820
function and method parameters you can

00:21:24,580 --> 00:21:31,600
type in on all the types now we also

00:21:27,820 --> 00:21:39,940
have return type hints look at the end

00:21:31,600 --> 00:21:44,920
of line 1 : array this function returns

00:21:39,940 --> 00:21:47,230
an array it must return an array if it

00:21:44,920 --> 00:21:49,570
doesn't return an array bad things will

00:21:47,230 --> 00:21:51,810
happen only I've written code that

00:21:49,570 --> 00:21:54,040
sometimes doesn't return an array look

00:21:51,810 --> 00:21:56,200
do you like I've got return false oh

00:21:54,040 --> 00:21:58,330
then I've got do not return false bad

00:21:56,200 --> 00:22:00,790
things happen what bad things these bad

00:21:58,330 --> 00:22:05,620
things so the first code block here

00:22:00,790 --> 00:22:08,380
works fine I declare my array I call the

00:22:05,620 --> 00:22:10,660
chené passing it is an array and it is

00:22:08,380 --> 00:22:12,040
kind of ish something numbering you know

00:22:10,660 --> 00:22:15,400
pitch feel just like smells like I

00:22:12,040 --> 00:22:19,960
didn't I don't use it like it in the

00:22:15,400 --> 00:22:22,830
second block the I'm declaring the array

00:22:19,960 --> 00:22:25,630
I'm passing the array I'm passing an int

00:22:22,830 --> 00:22:28,840
but inside my code block this is gonna

00:22:25,630 --> 00:22:30,970
route me through to returning false boom

00:22:28,840 --> 00:22:33,460
this guy just fell in you can't return

00:22:30,970 --> 00:22:37,330
false when you've type int it array this

00:22:33,460 --> 00:22:38,950
is not permitted I think this is going

00:22:37,330 --> 00:22:41,500
to be a bit of a shift for us as

00:22:38,950 --> 00:22:43,900
developers we often return false if we

00:22:41,500 --> 00:22:46,330
can't find something so I can imagine

00:22:43,900 --> 00:22:49,960
having like a method that searches for a

00:22:46,330 --> 00:22:53,250
user you type int this returns a user

00:22:49,960 --> 00:22:56,610
entity but if you don't find the user

00:22:53,250 --> 00:23:01,540
you've still got a return a user entity

00:22:56,610 --> 00:23:06,100
hmm I'm seeing two particular patterns

00:23:01,540 --> 00:23:09,520
which work around this it's already work

00:23:06,100 --> 00:23:11,110
around which play nicely with this and

00:23:09,520 --> 00:23:13,870
the first one is to use a collection

00:23:11,110 --> 00:23:15,790
object so instead of type pending unused

00:23:13,870 --> 00:23:17,470
entity you type in some supplier user

00:23:15,790 --> 00:23:19,059
collection and your collection may or

00:23:17,470 --> 00:23:23,440
may not contain the user depending

00:23:19,059 --> 00:23:25,450
whether you found her the other thing is

00:23:23,440 --> 00:23:27,780
instead of returning false and literally

00:23:25,450 --> 00:23:32,320
where you would have returned false

00:23:27,780 --> 00:23:35,230
throw a specific exception type and if

00:23:32,320 --> 00:23:37,390
you're converting from a PHP five code

00:23:35,230 --> 00:23:40,090
base to a PHP seven code base with

00:23:37,390 --> 00:23:43,420
return type hints this is probably the

00:23:40,090 --> 00:23:47,380
easiest switch instead of returning

00:23:43,420 --> 00:23:49,600
false throw an exception and the only

00:23:47,380 --> 00:23:51,309
change in your calling code is that

00:23:49,600 --> 00:23:53,950
instead of checking you didn't get false

00:23:51,309 --> 00:23:55,690
you just catch that exception whatever

00:23:53,950 --> 00:23:57,640
you did when you did get false is what

00:23:55,690 --> 00:23:59,559
you should do in your cat block so it's

00:23:57,640 --> 00:24:04,929
quite an easy translation for existing

00:23:59,559 --> 00:24:07,300
applications I return false and PHP

00:24:04,929 --> 00:24:12,850
seven came back and said fatal error

00:24:07,300 --> 00:24:15,429
uncaught type error definitely time to

00:24:12,850 --> 00:24:18,190
talk about the new errors stuff in PHP

00:24:15,429 --> 00:24:19,240
seven this is awesome these awesome

00:24:18,190 --> 00:24:21,100
because I love it

00:24:19,240 --> 00:24:23,559
exceptions I think they're super elegant

00:24:21,100 --> 00:24:27,720
way of dealing with errors they allow me

00:24:23,559 --> 00:24:31,540
to just notify something happened and

00:24:27,720 --> 00:24:36,480
then decide where in my code is the

00:24:31,540 --> 00:24:38,320
correct context to respond to that error

00:24:36,480 --> 00:24:39,360
everything you know about exceptions

00:24:38,320 --> 00:24:43,090
from php5

00:24:39,360 --> 00:24:46,480
remains they are untouched they're still

00:24:43,090 --> 00:24:48,820
awesome everything is good but they now

00:24:46,480 --> 00:24:51,880
inherit from an interface called

00:24:48,820 --> 00:24:53,770
throwable this is an internal PHP

00:24:51,880 --> 00:24:57,700
language thing and if you have a look at

00:24:53,770 --> 00:25:01,410
the shape of the throwable interface it

00:24:57,700 --> 00:25:04,240
basically describes the exception class

00:25:01,410 --> 00:25:07,120
really it's like we had exception and

00:25:04,240 --> 00:25:10,140
we've just abstracted the shape of

00:25:07,120 --> 00:25:14,040
exception into this throwable interface

00:25:10,140 --> 00:25:18,040
so that we can implement the error class

00:25:14,040 --> 00:25:20,770
when this was originally proposed as an

00:25:18,040 --> 00:25:23,290
RFC to go into PHP it was called engine

00:25:20,770 --> 00:25:25,660
exception so gives you an idea of what

00:25:23,290 --> 00:25:28,150
was going on here the idea is that

00:25:25,660 --> 00:25:32,080
exceptions can be thrown by the language

00:25:28,150 --> 00:25:33,370
and rather than I'm a PHP fatal error

00:25:32,080 --> 00:25:37,150
and I'm going to cause your script to

00:25:33,370 --> 00:25:39,429
exit this gives us a chance to handle it

00:25:37,150 --> 00:25:42,220
closed down any resources that we need

00:25:39,429 --> 00:25:44,679
to clean up after ourselves it's much

00:25:42,220 --> 00:25:45,340
much more flexible than just the screech

00:25:44,679 --> 00:25:47,559
to halt

00:25:45,340 --> 00:25:49,840
PHP fatal error that we've had in

00:25:47,559 --> 00:25:52,179
previous versions now not everything is

00:25:49,840 --> 00:25:53,980
switched over to using error yet where

00:25:52,179 --> 00:25:57,940
you will see this more and more because

00:25:53,980 --> 00:26:00,910
it's available now in PHP 7 just like

00:25:57,940 --> 00:26:03,850
PHP has exception and then built-in

00:26:00,910 --> 00:26:07,330
child exception classes they're all male

00:26:03,850 --> 00:26:10,030
extension so error has some child

00:26:07,330 --> 00:26:12,010
classes as well so I've got past error

00:26:10,030 --> 00:26:14,830
and type error on the screen here we

00:26:12,010 --> 00:26:18,340
also have assertion error arithmetic

00:26:14,830 --> 00:26:22,530
error and my favorite arithmetic error

00:26:18,340 --> 00:26:22,530
has a child division by zero error

00:26:24,060 --> 00:26:30,330
you can specifically catch the case

00:26:26,970 --> 00:26:32,610
where division by zero occurred in your

00:26:30,330 --> 00:26:34,260
in your application just just there it

00:26:32,610 --> 00:26:36,560
is it's just let me tell you about a

00:26:34,260 --> 00:26:39,030
really specific thing that just happens

00:26:36,560 --> 00:26:40,260
so that's like someone's thought this

00:26:39,030 --> 00:26:43,890
through so I think someone's having the

00:26:40,260 --> 00:26:46,470
same problems as me yeah we also have

00:26:43,890 --> 00:26:50,610
int div so there's a new function which

00:26:46,470 --> 00:26:54,930
is divide one integer by another it's

00:26:50,610 --> 00:26:57,510
like if modulus was a doughnut then in

00:26:54,930 --> 00:27:00,420
div is the whole so modulus returns you

00:26:57,510 --> 00:27:02,010
the remainder in div returns you the the

00:27:00,420 --> 00:27:03,750
other piece then had number of times it

00:27:02,010 --> 00:27:07,320
went in like how do we not have that in

00:27:03,750 --> 00:27:08,670
PHP we do know who knew wow that was a

00:27:07,320 --> 00:27:12,770
tangent so let me show you some code

00:27:08,670 --> 00:27:16,470
with this errors thing in got my sample

00:27:12,770 --> 00:27:18,060
function again in short to try and fit

00:27:16,470 --> 00:27:20,150
all this stuff on one screen I still got

00:27:18,060 --> 00:27:23,970
a curly brace those stupid places sorry

00:27:20,150 --> 00:27:26,610
so first of all we try calling the

00:27:23,970 --> 00:27:29,940
method with two numbers you know this

00:27:26,610 --> 00:27:33,240
isn't gonna work so my method just

00:27:29,940 --> 00:27:35,670
throws an exception we don't throw the

00:27:33,240 --> 00:27:36,960
exception we fail immediately we fail

00:27:35,670 --> 00:27:41,370
before that because we're passing

00:27:36,960 --> 00:27:43,650
nonsense into the method so on line six

00:27:41,370 --> 00:27:44,430
I call the sample method which attempts

00:27:43,650 --> 00:27:48,080
to call the function

00:27:44,430 --> 00:27:51,960
the first argument fails the type hint

00:27:48,080 --> 00:27:53,660
throws an error it isn't an exception

00:27:51,960 --> 00:27:56,130
but it behaves a lot like one and

00:27:53,660 --> 00:27:58,740
therefore we get into the catch block

00:27:56,130 --> 00:28:02,720
for tight error so type error

00:27:58,740 --> 00:28:02,720
specifically you failed on type hint

00:28:02,840 --> 00:28:07,290
you could always stack a catch blocks

00:28:05,220 --> 00:28:09,590
and it works exactly the same way in

00:28:07,290 --> 00:28:12,540
seven that you will normally stack twice

00:28:09,590 --> 00:28:14,220
to catch exceptions and catch errors if

00:28:12,540 --> 00:28:17,580
you're using code that will throw errors

00:28:14,220 --> 00:28:20,160
if you need to catch specific types of

00:28:17,580 --> 00:28:22,860
error put those catch blocks first and

00:28:20,160 --> 00:28:25,230
then put the generic ones later PHP will

00:28:22,860 --> 00:28:30,960
match in turn of each catch block it can

00:28:25,230 --> 00:28:32,330
find a bit like switch keep going so

00:28:30,960 --> 00:28:37,250
this is how your error

00:28:32,330 --> 00:28:42,590
catching code should look the errors are

00:28:37,250 --> 00:28:47,180
very deliberately sisters of exception

00:28:42,590 --> 00:28:49,190
not children of exception because what

00:28:47,180 --> 00:28:53,570
we don't want is for you to upgrade your

00:28:49,190 --> 00:28:57,290
existing fabulous PHP 5 code on to a PHP

00:28:53,570 --> 00:28:58,850
7 code base and then PHP 7 suddenly

00:28:57,290 --> 00:29:00,410
starts throwing errors which it never

00:28:58,850 --> 00:29:02,060
did before and they end up in your catch

00:29:00,410 --> 00:29:03,740
blocks which weren't designed for them

00:29:02,060 --> 00:29:07,160
as a bit nonsense

00:29:03,740 --> 00:29:09,650
so that's why the 2 error classes are

00:29:07,160 --> 00:29:12,260
sisters they're like beside one another

00:29:09,650 --> 00:29:15,820
they're not related so your existing PHP

00:29:12,260 --> 00:29:19,540
5 code won't accidentally catch errors

00:29:15,820 --> 00:29:21,410
you have to specifically catch them I

00:29:19,540 --> 00:29:23,540
keep getting asked to given catch

00:29:21,410 --> 00:29:24,950
throwable I think you can but I can't

00:29:23,540 --> 00:29:26,570
think of a single use case why you would

00:29:24,950 --> 00:29:28,640
want to because they're really different

00:29:26,570 --> 00:29:34,100
so you should probably be handling them

00:29:28,640 --> 00:29:37,070
differently as well I can catch method

00:29:34,100 --> 00:29:39,230
calls on non objects anyone ever seen

00:29:37,070 --> 00:29:41,510
this error in their code method called

00:29:39,230 --> 00:29:42,050
on non object Oh happens to me all the

00:29:41,510 --> 00:29:45,490
time

00:29:42,050 --> 00:29:48,530
so PHP 5 just gives me a fatal error

00:29:45,490 --> 00:29:51,620
call to member function grow on integer

00:29:48,530 --> 00:29:53,110
at 5.6 introduced this integer before

00:29:51,620 --> 00:29:55,400
that it just used to say non object

00:29:53,110 --> 00:29:59,510
sometimes it's really helpful to know

00:29:55,400 --> 00:30:01,370
that it was false or 1 or you know what

00:29:59,510 --> 00:30:05,330
what exactly it was that wasn't the

00:30:01,370 --> 00:30:09,470
object you were expecting PHP 7 gives us

00:30:05,330 --> 00:30:12,790
this uncaught error so when I did this I

00:30:09,470 --> 00:30:15,350
could have wrapped it in a catch block

00:30:12,790 --> 00:30:18,530
you need to start seeing this word error

00:30:15,350 --> 00:30:20,840
with a capital e as being a proper noun

00:30:18,530 --> 00:30:25,240
it means something it's not just any old

00:30:20,840 --> 00:30:28,070
error it's an error with a capital err

00:30:25,240 --> 00:30:30,170
so you're gonna catch it like this same

00:30:28,070 --> 00:30:33,110
as catching exceptions put your success

00:30:30,170 --> 00:30:35,810
case code in the try block and then

00:30:33,110 --> 00:30:38,780
catch the thing that might happen so I

00:30:35,810 --> 00:30:41,000
had a nun court error and here it is I'm

00:30:38,780 --> 00:30:43,710
catching it you're gonna do something

00:30:41,000 --> 00:30:46,440
better than echo oops

00:30:43,710 --> 00:30:48,630
and you'll say there are some things

00:30:46,440 --> 00:30:51,270
already built into PHP such as the new

00:30:48,630 --> 00:30:53,670
type in ting return type in Singh these

00:30:51,270 --> 00:30:58,290
kinds of things at language level which

00:30:53,670 --> 00:31:00,090
already throw errors I expect more parts

00:30:58,290 --> 00:31:05,910
of the language to adopt this over time

00:31:00,090 --> 00:31:08,280
it's pretty new right that was massive

00:31:05,910 --> 00:31:10,590
type int return type hints new error

00:31:08,280 --> 00:31:12,270
classes I have a few slightly lighter

00:31:10,590 --> 00:31:13,440
things that I want to mention before I

00:31:12,270 --> 00:31:15,840
start talking about how you're going to

00:31:13,440 --> 00:31:18,960
upgrade your own applications

00:31:15,840 --> 00:31:20,220
PHP 7 has anonymous classes to go with

00:31:18,960 --> 00:31:22,500
the anonymous functions and things that

00:31:20,220 --> 00:31:25,020
we already have this is not an anonymous

00:31:22,500 --> 00:31:27,630
class this is an ordinary class so this

00:31:25,020 --> 00:31:29,550
is a class with a name and at the bottom

00:31:27,630 --> 00:31:31,680
of the example on line 7 I'm just

00:31:29,550 --> 00:31:35,630
instantiate it and storing it in Donna

00:31:31,680 --> 00:31:38,910
loved one hold that thought

00:31:35,630 --> 00:31:41,040
this is an anonymous class so a bit like

00:31:38,910 --> 00:31:43,110
an anonymous function you declare the

00:31:41,040 --> 00:31:45,240
thing in the way that you normally would

00:31:43,110 --> 00:31:49,680
but you put it in the place where you

00:31:45,240 --> 00:31:51,600
want it and you don't give it a name so

00:31:49,680 --> 00:31:56,070
when I instantiate a dialog 1 I did

00:31:51,600 --> 00:31:59,040
dialog 1 equals new class name here I'm

00:31:56,070 --> 00:32:00,270
doing dollar log 2 equals new but I'm

00:31:59,040 --> 00:32:05,240
just gonna I'm just going to play my

00:32:00,270 --> 00:32:09,480
class here so I can do that on my class

00:32:05,240 --> 00:32:12,480
declaration is just class name how this

00:32:09,480 --> 00:32:14,010
works extends logger and you can do all

00:32:12,480 --> 00:32:15,330
of your extends and implements

00:32:14,010 --> 00:32:17,070
everything you know about classes just

00:32:15,330 --> 00:32:19,530
continues where from where the name

00:32:17,070 --> 00:32:21,960
wasn't that's the clearest explanation

00:32:19,530 --> 00:32:24,540
you'll ever hear and so I've overridden

00:32:21,960 --> 00:32:25,860
the log function and just replace it

00:32:24,540 --> 00:32:27,960
with something that outputs the date and

00:32:25,860 --> 00:32:31,650
then the message instead of just the

00:32:27,960 --> 00:32:33,600
message so when I use donna log 1 and

00:32:31,650 --> 00:32:36,300
dollar log 2 side-by-side they behave

00:32:33,600 --> 00:32:38,220
like you would expect the anonymous

00:32:36,300 --> 00:32:40,260
class is useful in the same way that the

00:32:38,220 --> 00:32:42,390
anonymous function is useful when you

00:32:40,260 --> 00:32:45,300
just need something for a one-off and

00:32:42,390 --> 00:32:48,500
you don't want some clown to come and

00:32:45,300 --> 00:32:52,950
reuse it for something else

00:32:48,500 --> 00:32:55,650
so you'll use it when you want to spin

00:32:52,950 --> 00:32:57,840
up an in vocal object to be used when

00:32:55,650 --> 00:32:59,610
you're traversing something or you're in

00:32:57,840 --> 00:33:03,900
getting some kind of strategy pattern or

00:32:59,610 --> 00:33:06,150
something my bad another new feature

00:33:03,900 --> 00:33:10,020
this has been the one that blew my mind

00:33:06,150 --> 00:33:11,760
like I just couldn't understand why my

00:33:10,020 --> 00:33:13,350
functions didn't work because I saw this

00:33:11,760 --> 00:33:15,900
once and it got in my brain and now I

00:33:13,350 --> 00:33:17,909
think it should be in PHP 5 it's like

00:33:15,900 --> 00:33:20,309
this doesn't seem particularly new and

00:33:17,909 --> 00:33:22,860
shiny we have random bytes and random

00:33:20,309 --> 00:33:26,510
int to new functions and they generate

00:33:22,860 --> 00:33:29,250
cryptographic insecure bytes and int

00:33:26,510 --> 00:33:33,270
this isn't anything we couldn't do with

00:33:29,250 --> 00:33:34,500
PHP 5 but it was it was it elegant so

00:33:33,270 --> 00:33:37,860
we've ever messed about with that open

00:33:34,500 --> 00:33:41,220
SSL pseudo random bytes then bin to hex

00:33:37,860 --> 00:33:44,279
then this is just wrapped up for you it

00:33:41,220 --> 00:33:46,260
makes it easy to do it the right way and

00:33:44,279 --> 00:33:50,279
I'm excited by these kinds of small

00:33:46,260 --> 00:33:52,140
things still coming into PHP if you

00:33:50,279 --> 00:33:54,029
can't wait for hp7 that's fine someone's

00:33:52,140 --> 00:33:56,429
done a user land port because he was

00:33:54,029 --> 00:33:59,070
capable of this before it just wasn't

00:33:56,429 --> 00:34:00,720
very nicely put together so until you

00:33:59,070 --> 00:34:04,890
get all of your platforms on to PHP 7

00:34:00,720 --> 00:34:06,179
you can just grab this and make use of

00:34:04,890 --> 00:34:09,839
these functions when you need to

00:34:06,179 --> 00:34:11,760
generate random things in other news we

00:34:09,839 --> 00:34:13,080
have a new JSON extension this is

00:34:11,760 --> 00:34:15,720
brilliant because it won't affect you at

00:34:13,080 --> 00:34:18,780
all the function interface is exactly

00:34:15,720 --> 00:34:23,000
the same but it's a bit more ethical and

00:34:18,780 --> 00:34:23,000
I hear it performs really well so yeah

00:34:24,200 --> 00:34:33,300
upgrading to PHP 7 this isn't really I

00:34:31,250 --> 00:34:35,730
can't explain to you how difficult this

00:34:33,300 --> 00:34:37,830
is right because you're like sitting in

00:34:35,730 --> 00:34:41,220
the audience some of you have upgraded

00:34:37,830 --> 00:34:42,480
versions of PHP before and and some of

00:34:41,220 --> 00:34:45,659
you may have been burned by that

00:34:42,480 --> 00:34:48,179
experience my only problem with the PHP

00:34:45,659 --> 00:34:50,639
7 upgrade is that I have no good stories

00:34:48,179 --> 00:34:53,849
to tell so far everything has really

00:34:50,639 --> 00:34:56,339
just worked one thing you do need to

00:34:53,849 --> 00:34:59,570
look out for is this is the uniform

00:34:56,339 --> 00:35:01,950
variable syntax and what this means is

00:34:59,570 --> 00:35:03,990
PHP is going to be reliable and

00:35:01,950 --> 00:35:09,650
predictable and always read from left to

00:35:03,990 --> 00:35:13,190
right crazy I promise this is also

00:35:09,650 --> 00:35:16,880
I promise this is a feature it is

00:35:13,190 --> 00:35:21,290
however probably the feature most likely

00:35:16,880 --> 00:35:23,060
to break your upgrade so in the recent

00:35:21,290 --> 00:35:26,950
versions of PHP we've added some extra

00:35:23,060 --> 00:35:29,240
stuff such as being answerde reference

00:35:26,950 --> 00:35:31,970
arrays immediately while returning from

00:35:29,240 --> 00:35:33,190
functions some other things along those

00:35:31,970 --> 00:35:35,750
lines

00:35:33,190 --> 00:35:37,640
each of those cases was added

00:35:35,750 --> 00:35:41,780
independently and they're a little bit

00:35:37,640 --> 00:35:46,810
inconsistent if your code base contains

00:35:41,780 --> 00:35:50,600
code which uses variable variables which

00:35:46,810 --> 00:35:52,940
accesses arrays with objects accesses

00:35:50,600 --> 00:35:54,830
inside with fluid interface calls on the

00:35:52,940 --> 00:35:57,140
end with nested array accesses inside

00:35:54,830 --> 00:35:59,150
that but you know if this is you or not

00:35:57,140 --> 00:36:00,670
you probably didn't write this code but

00:35:59,150 --> 00:36:04,820
you know if it's in your code base and

00:36:00,670 --> 00:36:07,430
those things may resolve differently

00:36:04,820 --> 00:36:10,700
under PHP 7 so this may bite you on

00:36:07,430 --> 00:36:12,170
upgrade that's the bad news the good

00:36:10,700 --> 00:36:16,430
news is this feature makes it totally

00:36:12,170 --> 00:36:17,840
worth it I'm a very expensive PHP

00:36:16,430 --> 00:36:20,480
consultant and I will assist you in your

00:36:17,840 --> 00:36:21,680
upgrade however I'm probably going to

00:36:20,480 --> 00:36:22,280
tell you to add more bracket so we'll do

00:36:21,680 --> 00:36:25,550
that free

00:36:22,280 --> 00:36:27,440
if in doubt add more curly braces around

00:36:25,550 --> 00:36:30,020
the thing that should be evaluated first

00:36:27,440 --> 00:36:33,050
to make it clear to PHP how it should

00:36:30,020 --> 00:36:34,760
process this there's some really good

00:36:33,050 --> 00:36:37,880
examples in the RFC which is why I've

00:36:34,760 --> 00:36:40,550
linked it here the nice thing about the

00:36:37,880 --> 00:36:43,550
RSC process for PHP is it means that we

00:36:40,550 --> 00:36:46,760
have a chance to discuss and to look at

00:36:43,550 --> 00:36:48,410
edge cases and say well what if this

00:36:46,760 --> 00:36:50,360
happened and what should happen if

00:36:48,410 --> 00:36:52,880
somebody has this code and they upgrade

00:36:50,360 --> 00:36:58,100
so is it's really quite well rounded

00:36:52,880 --> 00:37:00,350
it's well documented even better there's

00:36:58,100 --> 00:37:03,560
a tool that can spot this for you I'd

00:37:00,350 --> 00:37:06,140
like to introduce farm so far is the PHP

00:37:03,560 --> 00:37:08,210
analyzer it's an open source project

00:37:06,140 --> 00:37:09,850
it was Rasmus originally it's being

00:37:08,210 --> 00:37:13,970
looked after by someone else at Etsy now

00:37:09,850 --> 00:37:15,830
and it reads your PHP code of any

00:37:13,970 --> 00:37:18,530
version you don't need to upgrade to PHP

00:37:15,830 --> 00:37:22,109
7 for this you need PHP 7 to run it

00:37:18,530 --> 00:37:24,900
actually you need PHP 7 with the air

00:37:22,109 --> 00:37:26,460
the extension installed and the distro

00:37:24,900 --> 00:37:29,819
is not shipping that so you might be

00:37:26,460 --> 00:37:31,440
about to learn to compile PHP um it

00:37:29,819 --> 00:37:33,900
reads your code also reads your PHP

00:37:31,440 --> 00:37:35,609
documenter comments and it will warn

00:37:33,900 --> 00:37:40,920
about anything which is going to break

00:37:35,609 --> 00:37:43,499
on PHP 7 it also makes other brilliant

00:37:40,920 --> 00:37:46,650
and insightful remarks about your code

00:37:43,499 --> 00:37:48,599
ok found this got opinions so we'll flag

00:37:46,650 --> 00:37:52,499
you know this might behave differently

00:37:48,599 --> 00:37:56,480
under PHP 7 it's it wasn't notify you of

00:37:52,499 --> 00:37:56,480
thing it doesn't like undeclared things

00:37:57,410 --> 00:38:02,069
PHP we have historically being very

00:38:00,450 --> 00:38:03,720
relaxed about whether or not we declare

00:38:02,069 --> 00:38:06,180
things or whether or not different data

00:38:03,720 --> 00:38:08,160
types inhabit the same variable name at

00:38:06,180 --> 00:38:11,940
different points in our code that upsets

00:38:08,160 --> 00:38:13,230
fan it's got an opinion on that um it

00:38:11,940 --> 00:38:15,029
will also let you know if it sees

00:38:13,230 --> 00:38:18,480
anything it considers to be suspicious

00:38:15,029 --> 00:38:22,109
oh that's my favorite error warning this

00:38:18,480 --> 00:38:24,630
piece of code is suspicious oh good so

00:38:22,109 --> 00:38:26,910
and it's well worth running it however

00:38:24,630 --> 00:38:29,249
as you can imagine especially if you

00:38:26,910 --> 00:38:31,259
have a non-trivial side of sighs of code

00:38:29,249 --> 00:38:33,749
base a bit like running the mess

00:38:31,259 --> 00:38:37,259
detectors or the syntax checkers you get

00:38:33,749 --> 00:38:39,890
a lot of output so would also recommend

00:38:37,259 --> 00:38:43,349
this article which is on the fan wiki

00:38:39,890 --> 00:38:46,140
about working with code big code bases

00:38:43,349 --> 00:38:48,390
how to summarize the results from fan

00:38:46,140 --> 00:38:50,640
and how to prioritize which things you

00:38:48,390 --> 00:38:53,009
need to look at first kind of to reduce

00:38:50,640 --> 00:38:55,739
that output and start to understand

00:38:53,009 --> 00:38:58,890
which things are important I'd recommend

00:38:55,739 --> 00:39:00,989
fan as a first step for anyone

00:38:58,890 --> 00:39:02,309
considering upgrading to PHP 7 because

00:39:00,989 --> 00:39:05,819
we'll just give you a really quick

00:39:02,309 --> 00:39:08,970
overview and you can get a VM with it on

00:39:05,819 --> 00:39:11,039
and point-like just re clone your

00:39:08,970 --> 00:39:13,380
repository point it at your code it's a

00:39:11,039 --> 00:39:14,789
static analysis tool so you don't need

00:39:13,380 --> 00:39:16,079
to set up your application it's not

00:39:14,789 --> 00:39:18,809
going to run your code it's just going

00:39:16,079 --> 00:39:20,999
to inspect it so it's very easy to just

00:39:18,809 --> 00:39:23,970
grab that and look at your code to see

00:39:20,999 --> 00:39:25,970
what comes out you will get a lot of

00:39:23,970 --> 00:39:27,989
output and it's not a good news service

00:39:25,970 --> 00:39:33,089
but it was how you how the good problems

00:39:27,989 --> 00:39:34,960
are ok so one more thing that changed in

00:39:33,089 --> 00:39:36,490
PHP 7 is for each

00:39:34,960 --> 00:39:37,660
because no one uses for each right so it

00:39:36,490 --> 00:39:42,790
doesn't matter if we change it for

00:39:37,660 --> 00:39:45,130
everybody this is actually a good thing

00:39:42,790 --> 00:39:46,600
but when I saw a trace for each I just I

00:39:45,130 --> 00:39:48,430
have to admit I did freak out a little

00:39:46,600 --> 00:39:53,910
bit because about you but it's

00:39:48,430 --> 00:39:58,330
everywhere for each in PHP 7 is much

00:39:53,910 --> 00:40:01,210
less weird than it was before again it's

00:39:58,330 --> 00:40:03,370
a good news story really um but what

00:40:01,210 --> 00:40:07,330
what it means basically is we're no

00:40:03,370 --> 00:40:10,210
longer for reaching over the thing you

00:40:07,330 --> 00:40:11,500
asked PHP to for each over so a bit like

00:40:10,210 --> 00:40:13,060
when you pass something into a function

00:40:11,500 --> 00:40:16,390
it actually copies it we're doing that

00:40:13,060 --> 00:40:18,280
in forage so the array pointer is not

00:40:16,390 --> 00:40:22,060
moving over the thing that you've

00:40:18,280 --> 00:40:23,320
specified in the for each loop the array

00:40:22,060 --> 00:40:27,430
pointer doesn't move so if you've got

00:40:23,320 --> 00:40:30,610
calls to current next key either in your

00:40:27,430 --> 00:40:31,990
for each loop or right after us in a few

00:40:30,610 --> 00:40:34,390
where you for each until you find

00:40:31,990 --> 00:40:37,060
something on the new breakout you can't

00:40:34,390 --> 00:40:40,120
rely on the array pointer being where

00:40:37,060 --> 00:40:41,980
you think the array pointer should be if

00:40:40,120 --> 00:40:44,220
you're doing that thing I keep seeing

00:40:41,980 --> 00:40:46,840
with you were you for each and you like

00:40:44,220 --> 00:40:48,880
reference value you do ampersand value

00:40:46,840 --> 00:40:50,740
and then you write to it that's not

00:40:48,880 --> 00:40:53,320
gonna work either because you're writing

00:40:50,740 --> 00:40:55,630
into the copy of the array if you need

00:40:53,320 --> 00:40:58,800
to and this is good practice on PHP 5 as

00:40:55,630 --> 00:41:01,870
well if you need to update an array

00:40:58,800 --> 00:41:03,850
during a forage or any other thing

00:41:01,870 --> 00:41:06,400
you're iterating over array is a simple

00:41:03,850 --> 00:41:10,090
example what you need to do is you need

00:41:06,400 --> 00:41:12,970
to for each over the thing as key and

00:41:10,090 --> 00:41:17,140
value and when you want to update it's a

00:41:12,970 --> 00:41:18,670
thing key and assign the new value so

00:41:17,140 --> 00:41:20,830
don't whatever that is with the

00:41:18,670 --> 00:41:22,900
reference don't do that it's not gonna

00:41:20,830 --> 00:41:25,030
work family pick it up so it's not a

00:41:22,900 --> 00:41:28,090
huge problem but just just look out a

00:41:25,030 --> 00:41:33,600
little bit I have less weirdness

00:41:28,090 --> 00:41:37,080
available for human for each under PHP 7

00:41:33,600 --> 00:41:40,060
I'm a couple more gotchas we no longer

00:41:37,080 --> 00:41:42,610
automatically pass hex numbers out of

00:41:40,060 --> 00:41:45,760
strings it's kind of an edge case and

00:41:42,610 --> 00:41:47,380
it's intensive hardly anyone uses it if

00:41:45,760 --> 00:41:48,170
you need to pass hex numbers out of

00:41:47,380 --> 00:41:49,730
strings

00:41:48,170 --> 00:41:51,020
pass it through the filter extension

00:41:49,730 --> 00:41:54,740
because there's a flag to say this might

00:41:51,020 --> 00:41:57,710
be a hex number look for X so if you're

00:41:54,740 --> 00:41:59,270
relying on hex processing you just need

00:41:57,710 --> 00:42:03,100
to be a little bit clearer to PHP that

00:41:59,270 --> 00:42:03,100
you meant hex and it should check

00:42:03,130 --> 00:42:08,330
deprecated features I was so rude to

00:42:05,720 --> 00:42:10,880
come on Vance on stage but ah deprecated

00:42:08,330 --> 00:42:12,500
features PHP 5.3 introduced the EU

00:42:10,880 --> 00:42:14,210
deprecated error level you should always

00:42:12,500 --> 00:42:19,760
turn on each epoch ated before you

00:42:14,210 --> 00:42:22,700
upgrade if you see any deprecated

00:42:19,760 --> 00:42:26,480
contents in your logs you should expect

00:42:22,700 --> 00:42:29,090
that those those educated things will in

00:42:26,480 --> 00:42:31,700
fact have been deprecated in the next

00:42:29,090 --> 00:42:33,590
version of PHP partly because there are

00:42:31,700 --> 00:42:37,160
always things that you shouldn't really

00:42:33,590 --> 00:42:41,990
hang on to anyway but a lot of the time

00:42:37,160 --> 00:42:43,580
they're not actually removed so anything

00:42:41,990 --> 00:42:48,020
you see is a deprecated you should

00:42:43,580 --> 00:42:50,510
expect to have been removed except for

00:42:48,020 --> 00:42:51,950
PHP 7.0 we accepted the RFC of what

00:42:50,510 --> 00:42:52,970
should be removed no one implemented it

00:42:51,950 --> 00:42:55,100
so nothing of none of those things

00:42:52,970 --> 00:42:56,960
actually got removed the MySQL functions

00:42:55,100 --> 00:42:58,660
really are removed which is good because

00:42:56,960 --> 00:43:02,450
that's been that extension has been

00:42:58,660 --> 00:43:04,070
neglected for about 10 years so please

00:43:02,450 --> 00:43:09,110
come and join us in the world of PDO

00:43:04,070 --> 00:43:10,760
it's awesome I promise if you really

00:43:09,110 --> 00:43:12,770
want to stay similar to what you have

00:43:10,760 --> 00:43:16,610
with the MySQL functions try the MySQL

00:43:12,770 --> 00:43:19,880
MD library the Peter before constructors

00:43:16,610 --> 00:43:22,430
are marked as he deprecated they are

00:43:19,880 --> 00:43:25,160
both more and less present than you'd

00:43:22,430 --> 00:43:27,620
imagine so PHP tries to like guess if

00:43:25,160 --> 00:43:31,250
this is PHP for code or PHP 5 code so

00:43:27,620 --> 00:43:33,440
sometimes a method name with the same

00:43:31,250 --> 00:43:35,620
name as the class remember that method

00:43:33,440 --> 00:43:38,270
names are case insensitive in PHP

00:43:35,620 --> 00:43:42,290
currently considers as a constructor in

00:43:38,270 --> 00:43:44,510
certain cases but in fewer cases than

00:43:42,290 --> 00:43:47,650
you think but it's fine because the RFC

00:43:44,510 --> 00:43:50,450
says we're removing them in PHP 8 good

00:43:47,650 --> 00:43:52,250
and I don't expect to wait a decade for

00:43:50,450 --> 00:43:56,000
PHP age by the way that's coming on a

00:43:52,250 --> 00:43:58,490
bit sooner so how about you how about

00:43:56,000 --> 00:44:00,829
your applications what are your you know

00:43:58,490 --> 00:44:01,999
what's your action points for come

00:44:00,829 --> 00:44:06,769
into this wonderful world with the

00:44:01,999 --> 00:44:09,440
little tiny time elapsed graph I stood

00:44:06,769 --> 00:44:11,630
on this stage last year and said peace

00:44:09,440 --> 00:44:13,009
be 5.6 is awesome you better upgrade

00:44:11,630 --> 00:44:15,680
because next year I'm going to tell it

00:44:13,009 --> 00:44:16,940
come and tell you about PHP 7 oh that's

00:44:15,680 --> 00:44:19,160
brilliant because they accepted my talk

00:44:16,940 --> 00:44:20,569
again so like maybe I could decide a new

00:44:19,160 --> 00:44:21,890
topic and announce it now and they'll

00:44:20,569 --> 00:44:24,289
let me come again next year maybe that

00:44:21,890 --> 00:44:27,019
will work so I hope that you did upgrade

00:44:24,289 --> 00:44:30,549
to PHP 5.5 or 5.6 because if you did

00:44:27,019 --> 00:44:38,809
you're in a magically good situation

00:44:30,549 --> 00:44:40,309
most PHP 5 code will just work like I

00:44:38,809 --> 00:44:43,339
say I'm a wildly expensive consultants

00:44:40,309 --> 00:44:46,069
well not probably expensive enough never

00:44:43,339 --> 00:44:49,099
mind I'm consultant and I do do

00:44:46,069 --> 00:44:50,690
migration but if you ring me for PHP 7

00:44:49,099 --> 00:44:53,450
migration I will ask you politely to go

00:44:50,690 --> 00:44:55,789
home and try it yourself but it would

00:44:53,450 --> 00:44:57,559
just be unethical to sell upgrade

00:44:55,789 --> 00:45:00,459
consultancy most of the time he doesn't

00:44:57,559 --> 00:45:03,619
need it you can genuinely do it yourself

00:45:00,459 --> 00:45:05,779
one thing I keep saying tripping people

00:45:03,619 --> 00:45:08,299
up is that you need to also update all

00:45:05,779 --> 00:45:10,190
your libraries so only the newest

00:45:08,299 --> 00:45:12,619
releases of all of the PHP libraries

00:45:10,190 --> 00:45:15,589
will support 7 it's very easy to write

00:45:12,619 --> 00:45:18,219
code that supports both PHP 5 and PHP 7

00:45:15,589 --> 00:45:21,680
so in terms of stuff that gets in

00:45:18,219 --> 00:45:24,140
installed via composer you are very

00:45:21,680 --> 00:45:26,420
unlikely to have problems if you are

00:45:24,140 --> 00:45:28,609
using an actively maintained library but

00:45:26,420 --> 00:45:30,079
you will need the newest release and

00:45:28,609 --> 00:45:32,589
that might mean that you need to jump

00:45:30,079 --> 00:45:34,759
major versions do a bit of refactoring

00:45:32,589 --> 00:45:37,699
that's true for some of the extensions

00:45:34,759 --> 00:45:39,589
as well for supporting 7 but only

00:45:37,699 --> 00:45:42,109
on their new drivers it's got some

00:45:39,589 --> 00:45:44,509
function changes so you need to update

00:45:42,109 --> 00:45:46,489
your libraries but you probably don't

00:45:44,509 --> 00:45:47,059
need to do a lot with your application

00:45:46,489 --> 00:45:53,349
code

00:45:47,059 --> 00:45:56,959
I mentioned fan run fan PHP being PHP

00:45:53,349 --> 00:45:58,579
has wonderful upgrade instructions I've

00:45:56,959 --> 00:46:00,109
worked with a selection of programming

00:45:58,579 --> 00:46:02,150
languages none of them are documented

00:46:00,109 --> 00:46:02,900
the way PHP is documented it's out of

00:46:02,150 --> 00:46:05,059
this world

00:46:02,900 --> 00:46:06,559
excellent and the migration instructions

00:46:05,059 --> 00:46:08,839
are great it's a really good change log

00:46:06,559 --> 00:46:10,759
so if you're using specific libraries in

00:46:08,839 --> 00:46:14,119
PHP or relying on them a lot you can

00:46:10,759 --> 00:46:20,920
check if big things have changed

00:46:14,119 --> 00:46:26,769
as developers sometimes we need to be

00:46:20,920 --> 00:46:33,440
advocates sometimes we need to look out

00:46:26,769 --> 00:46:37,400
for our application our clients our

00:46:33,440 --> 00:46:41,089
business sometimes we need to push the

00:46:37,400 --> 00:46:44,410
fact that just not being broken isn't

00:46:41,089 --> 00:46:47,630
good enough security fixes till 2018

00:46:44,410 --> 00:46:52,400
isn't good enough PHP has a long history

00:46:47,630 --> 00:46:54,019
of people upgrading really slowly I know

00:46:52,400 --> 00:46:58,069
that some of you in this room are not on

00:46:54,019 --> 00:47:03,470
PHP 5.5 or 5.6 the statistics tell me

00:46:58,069 --> 00:47:06,109
that you may need to do some of the

00:47:03,470 --> 00:47:09,170
legwork yourself and proactively help

00:47:06,109 --> 00:47:14,720
your organisations and indeed your hobby

00:47:09,170 --> 00:47:18,499
projects to upgrade if you're hosting

00:47:14,720 --> 00:47:21,049
companies are not offering PHP 7 don't

00:47:18,499 --> 00:47:23,239
be too patient with them in a year you

00:47:21,049 --> 00:47:27,099
need a new supplier and I don't care how

00:47:23,239 --> 00:47:30,230
hard your preferred supplier process is

00:47:27,099 --> 00:47:32,269
do it the people in this room are the

00:47:30,230 --> 00:47:33,680
leaders in the industry you're here and

00:47:32,269 --> 00:47:36,890
you're ahead of so many other people

00:47:33,680 --> 00:47:38,690
you're ahead of people who have no idea

00:47:36,890 --> 00:47:41,269
what version of PHP they are running and

00:47:38,690 --> 00:47:43,069
will should never need to care they are

00:47:41,269 --> 00:47:44,690
the small business owners the weekend

00:47:43,069 --> 00:47:49,430
warriors the people getting by

00:47:44,690 --> 00:47:52,400
contracting if we vote with our feet and

00:47:49,430 --> 00:47:54,739
demand the upgrades we create the market

00:47:52,400 --> 00:47:56,779
that says hosting companies should not

00:47:54,739 --> 00:47:59,630
be shipping on insecure versions of PHP

00:47:56,779 --> 00:48:02,420
today I don't care if somebody says oh

00:47:59,630 --> 00:48:06,380
yes such-and-such a distro has security

00:48:02,420 --> 00:48:09,739
fixes the new versions of PHP are fast

00:48:06,380 --> 00:48:11,630
they're secure and I want everyone to

00:48:09,739 --> 00:48:14,180
have them if this was if this were a

00:48:11,630 --> 00:48:17,450
paid for upgrade you would be biting off

00:48:14,180 --> 00:48:19,579
the hand of your supplier go back to

00:48:17,450 --> 00:48:24,559
work you might have to be the person

00:48:19,579 --> 00:48:26,329
that steals some time the clothes the

00:48:24,559 --> 00:48:27,849
vagrant box you use for development and

00:48:26,329 --> 00:48:29,990
updates at the PHP 7

00:48:27,849 --> 00:48:33,380
looks what happens to your application

00:48:29,990 --> 00:48:35,150
when you run it there runs both the old

00:48:33,380 --> 00:48:38,530
and new versions under a bit of load

00:48:35,150 --> 00:48:41,119
compares the performance you might even

00:48:38,530 --> 00:48:46,400
need to use a spreadsheet make a graph

00:48:41,119 --> 00:48:48,650
and take it to management we sometimes

00:48:46,400 --> 00:48:50,690
need to be advocates you're here you're

00:48:48,650 --> 00:48:52,609
informed you know what's important and

00:48:50,690 --> 00:48:55,070
the performance speaks for itself

00:48:52,609 --> 00:48:58,099
there's no hard sell there's no

00:48:55,070 --> 00:49:00,859
explaining features to managers hardware

00:48:58,099 --> 00:49:03,260
cost developer time invested do the

00:49:00,859 --> 00:49:04,640
maths even if you don't know what the

00:49:03,260 --> 00:49:07,760
developers cost or what the hardware

00:49:04,640 --> 00:49:12,109
costs do it in Sirte hours and person

00:49:07,760 --> 00:49:13,820
hours just just make that argument your

00:49:12,109 --> 00:49:16,210
applications and your clients will

00:49:13,820 --> 00:49:19,849
benefit enormously and it puts you on

00:49:16,210 --> 00:49:24,020
the step to take all of the new stuff

00:49:19,849 --> 00:49:25,700
that's coming in in PHP how to get PHP

00:49:24,020 --> 00:49:26,869
seven ironically the Windows users are

00:49:25,700 --> 00:49:27,920
in the best position here because they

00:49:26,869 --> 00:49:29,630
just get a new binary and that's

00:49:27,920 --> 00:49:33,380
available so you can all sort that out

00:49:29,630 --> 00:49:34,670
one day and Linux users we're always in

00:49:33,380 --> 00:49:37,510
a difficult position we're waiting for

00:49:34,670 --> 00:49:40,099
distros to update I'm at a Bunter user I

00:49:37,510 --> 00:49:41,599
think they'll ship was seven it was

00:49:40,099 --> 00:49:42,890
taking me they won't decide that until

00:49:41,599 --> 00:49:46,190
tomorrow so I can't stand on stage

00:49:42,890 --> 00:49:47,839
announce they're going to I think I

00:49:46,190 --> 00:49:51,080
think they will there are other

00:49:47,839 --> 00:49:54,020
alternative sources both rpm and Deb

00:49:51,080 --> 00:49:58,390
type repositories Deb has PHP 7 it's

00:49:54,020 --> 00:50:03,109
awesome this link goes to a repository

00:49:58,390 --> 00:50:05,240
which from Andre Surrey which lets you

00:50:03,109 --> 00:50:07,310
install five point six and seven

00:50:05,240 --> 00:50:09,050
side-by-side so that might be really

00:50:07,310 --> 00:50:10,820
nice if you want to do some upgrades and

00:50:09,050 --> 00:50:15,380
configure some of your web heads one way

00:50:10,820 --> 00:50:17,990
or another way PHP is open-source

00:50:15,380 --> 00:50:20,390
it's made of C it builds on every

00:50:17,990 --> 00:50:23,720
platform I know some you would never

00:50:20,390 --> 00:50:26,510
imagine or want to build PHP on separate

00:50:23,720 --> 00:50:28,280
problem compile it yourself there are

00:50:26,510 --> 00:50:30,770
some good instructions on that go PHP

00:50:28,280 --> 00:50:32,480
seven site that I linked earlier and you

00:50:30,770 --> 00:50:36,740
might need to do it just to get it on a

00:50:32,480 --> 00:50:39,320
dev platform to try things out but yeah

00:50:36,740 --> 00:50:40,849
it's it's really really achievable you'd

00:50:39,320 --> 00:50:43,160
like your technical people don't

00:50:40,849 --> 00:50:50,089
freak out at compiling PHP it's always

00:50:43,160 --> 00:50:52,430
an option this is the future PHP 7.0 is

00:50:50,089 --> 00:50:55,579
here it's performing really well it's

00:50:52,430 --> 00:50:58,279
got new features in it and we're all in

00:50:55,579 --> 00:50:59,809
a position to take advantage and use the

00:50:58,279 --> 00:51:02,930
stuff that we're already doing that's

00:50:59,809 --> 00:51:05,680
fabulous and make it just a little bit

00:51:02,930 --> 00:51:07,489
more fabulous with a new platform that

00:51:05,680 --> 00:51:09,680
doesn't have a lot of backwards

00:51:07,489 --> 00:51:13,220
compatibility breaks it does have a lot

00:51:09,680 --> 00:51:17,569
of benefits if you are on 5.6 the

00:51:13,220 --> 00:51:19,819
support has been extended try not to get

00:51:17,569 --> 00:51:20,960
too comfortable I think seven is worth

00:51:19,819 --> 00:51:24,410
it

00:51:20,960 --> 00:51:26,089
PHP 7.0 is safe to run PHP does not have

00:51:24,410 --> 00:51:28,640
a good reputation for its dot zero

00:51:26,089 --> 00:51:30,410
releases think anyone who ran five dot 0

00:51:28,640 --> 00:51:32,809
dot zero in production is still bearing

00:51:30,410 --> 00:51:38,630
the scars 5.1 but zero wasn't much

00:51:32,809 --> 00:51:40,339
different 7.0 is safe you can install

00:51:38,630 --> 00:51:42,589
that you can run that the major distros

00:51:40,339 --> 00:51:44,029
are shipping with it no problem and the

00:51:42,589 --> 00:51:45,950
seven point one will be out later in the

00:51:44,029 --> 00:51:48,829
year it looks even better there's a few

00:51:45,950 --> 00:51:51,049
things coming in you can type in for

00:51:48,829 --> 00:51:53,089
null return values and as a few other

00:51:51,049 --> 00:51:54,259
are SCS that look interesting but I have

00:51:53,089 --> 00:51:58,099
no way of knowing which ones will make

00:51:54,259 --> 00:52:01,039
it again there's the graph if you need

00:51:58,099 --> 00:52:04,930
to share that just to try and keep your

00:52:01,039 --> 00:52:06,920
internal team time lines moving right

00:52:04,930 --> 00:52:08,210
let me talk about what's on this slide

00:52:06,920 --> 00:52:10,910
while you think of a good question to

00:52:08,210 --> 00:52:12,619
ask me I'd really appreciate your

00:52:10,910 --> 00:52:14,089
feedback I'm really interested to know

00:52:12,619 --> 00:52:16,549
how this works

00:52:14,089 --> 00:52:18,950
I'm also project maintainer and joined

00:52:16,549 --> 00:52:21,170
in so you like I spent a lot of time

00:52:18,950 --> 00:52:23,869
with this tool because I really believe

00:52:21,170 --> 00:52:26,210
in it so for me and all the speakers it

00:52:23,869 --> 00:52:27,799
means so much just take two minutes let

00:52:26,210 --> 00:52:29,180
me know what worked and what didn't and

00:52:27,799 --> 00:52:31,579
if you want to talk to me about joined

00:52:29,180 --> 00:52:33,710
in you can my slides are online joined

00:52:31,579 --> 00:52:35,420
up net I blog about this stuff there so

00:52:33,710 --> 00:52:37,160
and I will continue to blog there's more

00:52:35,420 --> 00:52:39,410
stuff in the queue and if you want to

00:52:37,160 --> 00:52:44,989
get in touch feel free right that's the

00:52:39,410 --> 00:52:45,890
admin done who has a question I always

00:52:44,989 --> 00:52:47,329
think you're gonna make it really easy

00:52:45,890 --> 00:52:51,170
and then someone does come up with a

00:52:47,329 --> 00:52:53,300
question I don't escape so easily hi

00:52:51,170 --> 00:52:55,220
this is Francis

00:52:53,300 --> 00:53:03,710
would you recommend it for a production

00:52:55,220 --> 00:53:08,869
environment yes do you wait for the

00:53:03,710 --> 00:53:13,910
microphone how does it compare with

00:53:08,869 --> 00:53:15,530
hip-hop and so the comparisons with HHH

00:53:13,910 --> 00:53:17,360
p.m. which is the engine you're asking

00:53:15,530 --> 00:53:20,180
about to run your existing PHP code on

00:53:17,360 --> 00:53:22,820
either HTML or PHP 7 the comparison is

00:53:20,180 --> 00:53:25,160
quite close and different applications

00:53:22,820 --> 00:53:28,160
can be one can be a bit faster than the

00:53:25,160 --> 00:53:30,770
other but essentially they are much of a

00:53:28,160 --> 00:53:32,690
muchness a good place to look for a more

00:53:30,770 --> 00:53:33,950
scientific answer is Rasmus this slice

00:53:32,690 --> 00:53:36,680
that I linked it's quite early on in

00:53:33,950 --> 00:53:38,630
this presentation he compares a bunch of

00:53:36,680 --> 00:53:41,810
different open-source projects different

00:53:38,630 --> 00:53:43,220
versions of PHP including h h vm so if

00:53:41,810 --> 00:53:45,440
you're using an open-source project or

00:53:43,220 --> 00:53:47,390
if you know the profile of your

00:53:45,440 --> 00:53:48,890
application is most similar to one of

00:53:47,390 --> 00:53:53,750
those that'd be a really good place to

00:53:48,890 --> 00:53:57,800
look for a more specific answer there

00:53:53,750 --> 00:54:01,810
was a tall several years ago at the

00:53:57,800 --> 00:54:05,960
conference in which speakers said

00:54:01,810 --> 00:54:10,850
exceptions should be exceptional so I

00:54:05,960 --> 00:54:15,619
was wondering with type hinting forcing

00:54:10,850 --> 00:54:18,250
you to take return a certain type does

00:54:15,619 --> 00:54:22,790
that leave you with promise patent or

00:54:18,250 --> 00:54:25,810
collection objects classes yeah there's

00:54:22,790 --> 00:54:28,369
a few ways you can solve it I think I

00:54:25,810 --> 00:54:30,350
quite like exceptions as a way of

00:54:28,369 --> 00:54:33,530
communicating internally within my

00:54:30,350 --> 00:54:35,390
application I don't think it necessarily

00:54:33,530 --> 00:54:38,570
is only for emergencies although I

00:54:35,390 --> 00:54:40,040
definitely would like to be specific

00:54:38,570 --> 00:54:41,930
about what happened so I would want to

00:54:40,040 --> 00:54:43,520
throw a specific exception type if I was

00:54:41,930 --> 00:54:46,220
just returning the information that it

00:54:43,520 --> 00:54:51,490
wasn't found for example that's a good

00:54:46,220 --> 00:54:51,490
question thank you who else was on here

00:54:54,790 --> 00:55:05,730
and I gave a string to will it be in the

00:54:59,300 --> 00:55:07,109
function in the class no it'll be an in

00:55:05,730 --> 00:55:08,700
we'll get juggled on the way in and

00:55:07,109 --> 00:55:16,850
it'll be the data type that the function

00:55:08,700 --> 00:55:20,190
expects oh cool yep do you think

00:55:16,850 --> 00:55:22,530
multiple return types will be supported

00:55:20,190 --> 00:55:24,180
what do you think it's a good idea

00:55:22,530 --> 00:55:26,130
do I think multiple return types will be

00:55:24,180 --> 00:55:30,570
supportive I've seen a few which are

00:55:26,130 --> 00:55:31,859
like type or null and there are some RFC

00:55:30,570 --> 00:55:33,119
is open but as far as I know they

00:55:31,859 --> 00:55:35,340
haven't been accepted

00:55:33,119 --> 00:55:37,920
I can imagine doing or null but not

00:55:35,340 --> 00:55:39,420
really doing like a function that might

00:55:37,920 --> 00:55:41,460
return a string and might return an INT

00:55:39,420 --> 00:55:43,859
doesn't seem like one function to me

00:55:41,460 --> 00:55:45,990
so can kind of imagine the case where we

00:55:43,859 --> 00:55:47,910
or like my example returns false

00:55:45,990 --> 00:55:50,430
I don't even that's a terrible pattern

00:55:47,910 --> 00:55:53,060
but I think we're turning maybe one or

00:55:50,430 --> 00:55:56,730
another is a bit is a bit weird

00:55:53,060 --> 00:55:59,940
hi if you've got a function with a type

00:55:56,730 --> 00:56:02,340
of a string int it then you passed in an

00:55:59,940 --> 00:56:06,869
object that has a two string will it

00:56:02,340 --> 00:56:08,490
cast it or will it I've no idea I mean I

00:56:06,869 --> 00:56:12,050
think it should cast it but we should

00:56:08,490 --> 00:56:12,050
try that that's why some code

00:56:21,730 --> 00:56:27,100
all gone quiet well that's okay I'm

00:56:25,330 --> 00:56:28,510
around for the next couple of days have

00:56:27,100 --> 00:56:30,640
you think of any more questions or if

00:56:28,510 --> 00:56:33,880
you want to chat about hp7 or anything

00:56:30,640 --> 00:56:36,270
else then I'm happy to do that there's a

00:56:33,880 --> 00:56:44,380
person running with a mic on the back I

00:56:36,270 --> 00:56:47,530
nearly got away then hello hello I was

00:56:44,380 --> 00:56:51,790
just wondering if you're able to find

00:56:47,530 --> 00:56:56,470
out if a object inherits a particular

00:56:51,790 --> 00:57:00,130
class or implements an interface yes

00:56:56,470 --> 00:57:02,470
that you can either so if you can check

00:57:00,130 --> 00:57:04,420
before you type into it you can use the

00:57:02,470 --> 00:57:06,190
instance of if your operator so you can

00:57:04,420 --> 00:57:09,220
ask something are you an instance of

00:57:06,190 --> 00:57:11,500
this and if it's a class or an interface

00:57:09,220 --> 00:57:12,880
and it either is that class inherits

00:57:11,500 --> 00:57:22,300
that class or implements that interface

00:57:12,880 --> 00:57:24,369
it will return true yeah well I'm really

00:57:22,300 --> 00:57:26,410
am done this time okay cool and thanks

00:57:24,369 --> 00:57:27,910
very much for coming that's awesome if

00:57:26,410 --> 00:57:29,350
you want to find me I'm probably mostly

00:57:27,910 --> 00:57:31,240
hanging out at the O'Reilly band where

00:57:29,350 --> 00:57:32,980
you can also buy my book they asked me

00:57:31,240 --> 00:57:36,150
to say so thanks very much for coming

00:57:32,980 --> 00:57:36,150

YouTube URL: https://www.youtube.com/watch?v=hC5dPhM_LFo


