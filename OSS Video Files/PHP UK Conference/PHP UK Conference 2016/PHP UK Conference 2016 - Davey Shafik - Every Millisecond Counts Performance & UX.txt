Title: PHP UK Conference 2016 - Davey Shafik - Every Millisecond Counts Performance & UX
Publication date: 2016-03-16
Playlist: PHP UK Conference 2016
Description: 
	How do you lose 900 million dollars in 100ms? Or 8 million visits in just 4/10 of a second? User expectations are higher than ever when it comes to web performance, so much so that we've created an entirely new application architecture just to make it feel like our websites are faster than they actually are. This talk will look at how we can improve our users experience at any scale through performance optimizations at every layer of the stack, from backend to browser.
Captions: 
	00:00:04,970 --> 00:00:10,190
good morning I don't know which talk

00:00:08,299 --> 00:00:11,840
everybody went to before but hopefully

00:00:10,190 --> 00:00:14,180
you enjoyed it and hopefully this one

00:00:11,840 --> 00:00:15,529
will also be enjoyable so this is a talk

00:00:14,180 --> 00:00:17,630
about performance and user experience

00:00:15,529 --> 00:00:20,210
and how those two are tied together and

00:00:17,630 --> 00:00:23,749
where we fit into the role of making

00:00:20,210 --> 00:00:26,480
sure that our users are happy so my name

00:00:23,749 --> 00:00:28,550
is Davy traffic if you don't know me I

00:00:26,480 --> 00:00:31,009
am the author of the Zen p45

00:00:28,550 --> 00:00:33,079
certification study guide as well as the

00:00:31,009 --> 00:00:35,840
upgrading 337 mini book that O'Reilly

00:00:33,079 --> 00:00:38,750
will be giving away later today so go

00:00:35,840 --> 00:00:40,820
check that out I'm a contributor to zen

00:00:38,750 --> 00:00:42,470
frameworks 1 and 2 p-3 docks I'm now

00:00:40,820 --> 00:00:43,940
kind of a legit contributor to between

00:00:42,470 --> 00:00:47,060
tunnels I have an RFC the past it's

00:00:43,940 --> 00:00:48,980
great and the original creator of Farah

00:00:47,060 --> 00:00:50,840
PHP archive and probably most well-known

00:00:48,980 --> 00:00:52,340
for that but most importantly I'm at the

00:00:50,840 --> 00:00:55,010
traffic on Twitter so if you have any

00:00:52,340 --> 00:00:57,700
feedback any questions that's the best

00:00:55,010 --> 00:01:02,330
way to reach me I work for these guys

00:00:57,700 --> 00:01:03,590
Akamai who's heard of akamai e so for

00:01:02,330 --> 00:01:05,150
those who don't know we are a CDN

00:01:03,590 --> 00:01:06,619
primarily we care about thirty percent

00:01:05,150 --> 00:01:08,600
of the internet traffic it's kind of

00:01:06,619 --> 00:01:12,080
amazing go check out our API is a

00:01:08,600 --> 00:01:13,940
developer at Akamai calm and also I was

00:01:12,080 --> 00:01:15,050
mentioned prompt it's an initiative to

00:01:13,940 --> 00:01:17,180
get people talking about mental health

00:01:15,050 --> 00:01:21,200
and technology so check that out mhm

00:01:17,180 --> 00:01:23,750
prompted org all right so why does

00:01:21,200 --> 00:01:25,100
performance matter why should we care so

00:01:23,750 --> 00:01:29,090
there's been some amazing case studies

00:01:25,100 --> 00:01:31,010
about this amazon they found out that

00:01:29,090 --> 00:01:34,090
they lose one percent of revenue for

00:01:31,010 --> 00:01:37,610
every 100 milliseconds slower they load

00:01:34,090 --> 00:01:40,010
which for 2014 equates to about 615

00:01:37,610 --> 00:01:42,740
million pounds which i think is an

00:01:40,010 --> 00:01:45,710
incredibly huge number it's about 8p for

00:01:42,740 --> 00:01:48,950
every person on earth or nine pound 59

00:01:45,710 --> 00:01:51,740
for every citizen in the UK that's just

00:01:48,950 --> 00:01:57,680
for 2014 and that's every hundred

00:01:51,740 --> 00:02:00,590
milliseconds Google found that if their

00:01:57,680 --> 00:02:04,930
searches were half a second slower they

00:02:00,590 --> 00:02:06,740
got twenty percent less searches Bing

00:02:04,930 --> 00:02:09,520
nobody really cares about but this

00:02:06,740 --> 00:02:12,380
number is also quite interesting

00:02:09,520 --> 00:02:16,070
two seconds slower they lost four point

00:02:12,380 --> 00:02:19,400
three percent of revenue per user the

00:02:16,070 --> 00:02:21,560
magazine GQ they went the other way they

00:02:19,400 --> 00:02:24,110
actually cut load time by eighteen

00:02:21,560 --> 00:02:25,670
percent and they found that don't not

00:02:24,110 --> 00:02:27,950
only the traffic go up by eighty percent

00:02:25,670 --> 00:02:30,050
but people spent thirty two percent more

00:02:27,950 --> 00:02:34,250
time on their site which when you're

00:02:30,050 --> 00:02:36,670
talking about ads is fantastic I have a

00:02:34,250 --> 00:02:39,320
bunch more examples just really quickly

00:02:36,670 --> 00:02:41,300
Walmart found that a one-second

00:02:39,320 --> 00:02:43,940
improvement led to two percent increase

00:02:41,300 --> 00:02:45,710
in conversions etsy they went the other

00:02:43,940 --> 00:02:48,200
way they found that with 160 kilobytes

00:02:45,710 --> 00:02:49,610
more imagery on their mobile site they

00:02:48,200 --> 00:02:51,260
had a twelve percent increase in bounce

00:02:49,610 --> 00:02:53,360
rate which means that people were more

00:02:51,260 --> 00:02:56,450
likely to leave immediately by twelve

00:02:53,360 --> 00:03:00,440
percent staples one second improvement a

00:02:56,450 --> 00:03:04,100
ten percent increase in conversions so

00:03:00,440 --> 00:03:07,130
what can we conclude about this number

00:03:04,100 --> 00:03:09,680
one users can perceive tiny changes in

00:03:07,130 --> 00:03:11,180
performance and actually I say as little

00:03:09,680 --> 00:03:15,700
as 100 milliseconds but apparently that

00:03:11,180 --> 00:03:20,770
numbers actually 14 milliseconds and

00:03:15,700 --> 00:03:24,070
slower sites make customers less happy

00:03:20,770 --> 00:03:27,710
less happy means a poor user experience

00:03:24,070 --> 00:03:30,260
now I don't know if you guys have

00:03:27,710 --> 00:03:31,520
noticed but every single slide that I've

00:03:30,260 --> 00:03:33,590
put up here has been 100 millisecond

00:03:31,520 --> 00:03:35,750
slower to come up in one before anybody

00:03:33,590 --> 00:03:37,490
knows they've been getting slower when

00:03:35,750 --> 00:03:39,110
did you notice I notice about six slides

00:03:37,490 --> 00:03:42,080
in and then I noted every freakin slide

00:03:39,110 --> 00:03:45,500
after that that last transition was

00:03:42,080 --> 00:03:48,620
two-and-a-half 2.3 seconds so the the

00:03:45,500 --> 00:03:50,870
old adium the 10 seconds is the kind of

00:03:48,620 --> 00:03:53,930
top bar we wanted aim for that's way too

00:03:50,870 --> 00:03:55,340
high this day and age the the stats say

00:03:53,930 --> 00:03:56,780
that for mobile users is actually about

00:03:55,340 --> 00:03:58,310
two and a half to three seconds after

00:03:56,780 --> 00:03:59,750
that they're gone which is incredible

00:03:58,310 --> 00:04:01,520
when you consider that within a mobile

00:03:59,750 --> 00:04:05,780
space we're on less reliable connections

00:04:01,520 --> 00:04:09,350
as well they're even less forgiving so I

00:04:05,780 --> 00:04:12,020
promise no more slow transitions who is

00:04:09,350 --> 00:04:15,110
responsible for performance and the

00:04:12,020 --> 00:04:17,299
answer is absolutely everybody that

00:04:15,110 --> 00:04:19,430
means your designers sis admins DevOps

00:04:17,299 --> 00:04:20,989
back-end developers front-end developers

00:04:19,430 --> 00:04:22,019
it also browser vendors play a huge role

00:04:20,989 --> 00:04:24,180
in

00:04:22,019 --> 00:04:26,610
performance so we have to kind of see

00:04:24,180 --> 00:04:31,229
this whole picture when we come to

00:04:26,610 --> 00:04:35,909
making our users happy so let's talk

00:04:31,229 --> 00:04:38,069
about what makes a web page today he

00:04:35,909 --> 00:04:40,860
probably not surprised that the majority

00:04:38,069 --> 00:04:42,389
of a paint way is images and this number

00:04:40,860 --> 00:04:45,389
has been going up quite a lot over the

00:04:42,389 --> 00:04:47,520
last few years so sixty-three percent of

00:04:45,389 --> 00:04:50,639
a pretty standard web page is made up of

00:04:47,520 --> 00:04:52,889
image data number another big one is

00:04:50,639 --> 00:04:54,900
seventeen percent for JavaScript HTML

00:04:52,889 --> 00:04:57,270
CSS three percent each fonts five

00:04:54,900 --> 00:04:59,970
percent which would also include things

00:04:57,270 --> 00:05:02,009
like font awesome for icon fonts okay

00:04:59,970 --> 00:05:03,240
said those do play into it and then I'm

00:05:02,009 --> 00:05:06,210
not actually sure what the other is but

00:05:03,240 --> 00:05:08,909
it's still quite a big chunk I think

00:05:06,210 --> 00:05:14,370
just as importantly the actual weight in

00:05:08,909 --> 00:05:17,400
megabytes set her let me see what that

00:05:14,370 --> 00:05:20,550
sir sixty-four percent of pages over one

00:05:17,400 --> 00:05:26,550
megabyte and three percent are over 6

00:05:20,550 --> 00:05:28,169
megabyte which is huge right the number

00:05:26,550 --> 00:05:32,639
of total request per payment is also

00:05:28,169 --> 00:05:34,409
going up over time there are eighty-nine

00:05:32,639 --> 00:05:37,289
percent of websites make over 26

00:05:34,409 --> 00:05:38,880
requests the average fear being 51 to 75

00:05:37,289 --> 00:05:40,529
that's a huge number of requests I don't

00:05:38,880 --> 00:05:42,389
think that we put quite enough thought

00:05:40,529 --> 00:05:43,830
into just how many requests we have to

00:05:42,389 --> 00:05:46,289
open to load up a web page and whether

00:05:43,830 --> 00:05:47,639
that is loading a JavaScript library CSS

00:05:46,289 --> 00:05:51,150
libraries etc but it's also things like

00:05:47,639 --> 00:05:53,669
I frames for ads etc these all add a

00:05:51,150 --> 00:05:55,680
huge amount of overhead and in fact 15%

00:05:53,669 --> 00:06:01,440
make over a hundred and fifty requests

00:05:55,680 --> 00:06:03,569
just to load a webpage so how do we fix

00:06:01,440 --> 00:06:07,009
this so starting with design is this

00:06:03,569 --> 00:06:10,229
one's pretty simple compress your images

00:06:07,009 --> 00:06:13,770
and if you don't see if this works will

00:06:10,229 --> 00:06:15,150
do it for you we don't we don't we don't

00:06:13,770 --> 00:06:17,219
care do it just as small as possible

00:06:15,150 --> 00:06:18,750
okay what it actually looks like we'll

00:06:17,219 --> 00:06:21,719
actually get into compression a little

00:06:18,750 --> 00:06:24,870
bit later who hears that considers

00:06:21,719 --> 00:06:27,719
himself a sysadmin our DevOps some of

00:06:24,870 --> 00:06:31,050
you do yourselves a favor and enable

00:06:27,719 --> 00:06:34,229
HTTP to its supported now by Apache

00:06:31,050 --> 00:06:35,610
really well engine X has support does

00:06:34,229 --> 00:06:35,860
not support server push which will still

00:06:35,610 --> 00:06:37,539
go out

00:06:35,860 --> 00:06:40,419
later there are also some fantastic

00:06:37,539 --> 00:06:41,620
proxies like h2o caddy and a few others

00:06:40,419 --> 00:06:44,250
that you can sit in front of your

00:06:41,620 --> 00:06:46,780
regular HTTP server HTTP two is

00:06:44,250 --> 00:06:49,780
transformative and we'll look at that

00:06:46,780 --> 00:06:53,469
also a little bit later however to use

00:06:49,780 --> 00:06:54,879
HTTP to you also have to use TLS there

00:06:53,469 --> 00:06:56,800
is no brows are currently on the market

00:06:54,879 --> 00:06:59,469
and there will not be the support HTTP

00:06:56,800 --> 00:07:03,129
two without the requirement for it to be

00:06:59,469 --> 00:07:06,629
secure so let's go ahead check out let's

00:07:03,129 --> 00:07:10,599
encrypt org they provide free as in beer

00:07:06,629 --> 00:07:12,699
fully the jet TLS certificates they're

00:07:10,599 --> 00:07:14,560
automatic they have an API to manage

00:07:12,699 --> 00:07:16,779
those they're secure they're using the

00:07:14,560 --> 00:07:18,039
latest standards they have transparency

00:07:16,779 --> 00:07:19,419
every single certificate that is

00:07:18,039 --> 00:07:20,469
registered there's a register that you

00:07:19,419 --> 00:07:23,080
can go and look at and see all the

00:07:20,469 --> 00:07:24,129
certificates that are issued it's a

00:07:23,080 --> 00:07:26,289
completely open thing and it's a

00:07:24,129 --> 00:07:30,550
cooperative thing it's being sponsored

00:07:26,289 --> 00:07:31,659
by Akamai but also Zilla eff and a huge

00:07:30,550 --> 00:07:33,849
group of other companies that are

00:07:31,659 --> 00:07:35,169
sponsoring this they certificates are

00:07:33,849 --> 00:07:37,360
issued for 90 days of peace you just

00:07:35,169 --> 00:07:39,009
have your automation renew certificates

00:07:37,360 --> 00:07:41,080
every 90 days and there is a security

00:07:39,009 --> 00:07:45,129
aspect behind that like today number so

00:07:41,080 --> 00:07:46,930
let's encrypt or go check it out if

00:07:45,129 --> 00:07:48,520
you're using the cloud and I think a lot

00:07:46,930 --> 00:07:50,529
of us are you need to start thinking

00:07:48,520 --> 00:07:54,159
about scaling based on perceived

00:07:50,529 --> 00:07:56,740
performance typically we would look at

00:07:54,159 --> 00:07:58,000
our resource usage how much CPU do we

00:07:56,740 --> 00:07:59,529
have free on a box or on all of our

00:07:58,000 --> 00:08:01,479
boxes how much memory do we have free

00:07:59,529 --> 00:08:03,610
and we would scale based on some

00:08:01,479 --> 00:08:05,379
arbitrary set of numbers but there's

00:08:03,610 --> 00:08:08,020
actually a more important story to be

00:08:05,379 --> 00:08:11,319
told there which is your users how do

00:08:08,020 --> 00:08:14,319
they feel about how fast it's loading to

00:08:11,319 --> 00:08:16,089
them how fast is it loading so there is

00:08:14,319 --> 00:08:18,520
something called the speed index which

00:08:16,089 --> 00:08:21,610
allows you to kind of get a metric on

00:08:18,520 --> 00:08:22,870
how fast the page loads for a user I'm

00:08:21,610 --> 00:08:24,819
not suggesting that you use it as the

00:08:22,870 --> 00:08:28,509
only metric to scale but it is a nice

00:08:24,819 --> 00:08:31,990
one to add to your metrics checking and

00:08:28,509 --> 00:08:34,750
maybe start scaling based around that so

00:08:31,990 --> 00:08:37,510
there's a fantastic node package called

00:08:34,750 --> 00:08:39,039
webpagetest API so I have a little

00:08:37,510 --> 00:08:43,779
script here just kind of show you how

00:08:39,039 --> 00:08:45,370
easy this is I will zoom in so to use

00:08:43,779 --> 00:08:47,440
this if everyone here familiar with

00:08:45,370 --> 00:08:49,630
JavaScript noting stuff so it should be

00:08:47,440 --> 00:08:51,340
fairly easy so just pull in the

00:08:49,630 --> 00:08:53,680
page test module and HTTP because we

00:08:51,340 --> 00:08:56,410
need to make some ricci TP requests we

00:08:53,680 --> 00:08:59,590
initiate an instance of the web page

00:08:56,410 --> 00:09:01,120
test object this is in JavaScript and we

00:08:59,590 --> 00:09:02,530
call this run test obviously I'm going

00:09:01,120 --> 00:09:04,330
to run this on my blog I tell it i want

00:09:02,530 --> 00:09:07,030
the page speed and then we have a call

00:09:04,330 --> 00:09:09,580
back and what this does is the api

00:09:07,030 --> 00:09:10,630
immediately responds with the location

00:09:09,580 --> 00:09:12,730
of where the test results are going to

00:09:10,630 --> 00:09:15,610
be and then we have the pole until it is

00:09:12,730 --> 00:09:17,320
done checking for results so we have

00:09:15,610 --> 00:09:20,640
this check response and it will check if

00:09:17,320 --> 00:09:22,660
the API that tells us the results are at

00:09:20,640 --> 00:09:26,680
so this is what check response looks

00:09:22,660 --> 00:09:28,240
like it takes the URL and then it does a

00:09:26,680 --> 00:09:32,260
simple get on it and we have another

00:09:28,240 --> 00:09:33,880
callback with the response I really

00:09:32,260 --> 00:09:35,800
don't like the way nodes HTTP client

00:09:33,880 --> 00:09:38,020
works essentially as data comes in you

00:09:35,800 --> 00:09:39,580
have to assign it somewhere so it's

00:09:38,020 --> 00:09:41,800
basically works really well for chunked

00:09:39,580 --> 00:09:43,510
data but as it comes in we have this

00:09:41,800 --> 00:09:45,580
call back here which just assigned it to

00:09:43,510 --> 00:09:47,170
this response data variable and then

00:09:45,580 --> 00:09:48,850
once we've got all of it once we hit the

00:09:47,170 --> 00:09:53,800
end of the data then we can actually

00:09:48,850 --> 00:09:55,960
pass it as JSON if we get a status code

00:09:53,800 --> 00:09:57,600
of 200 as opposed to say a 201 or

00:09:55,960 --> 00:09:59,410
something else where it's in progress

00:09:57,600 --> 00:10:01,930
then we can actually get the information

00:09:59,410 --> 00:10:03,310
out of it of how fast did it load the

00:10:01,930 --> 00:10:06,010
very first time somebody loaded the page

00:10:03,310 --> 00:10:08,290
so with no cash and also how fast does

00:10:06,010 --> 00:10:09,280
it load if they do have caching so

00:10:08,290 --> 00:10:11,260
there's two very important numbers

00:10:09,280 --> 00:10:12,880
otherwise we just have a set time out

00:10:11,260 --> 00:10:14,860
for five seconds and it will then check

00:10:12,880 --> 00:10:17,710
again so what this actually looks like

00:10:14,860 --> 00:10:19,750
we run it test result is at this URL

00:10:17,710 --> 00:10:21,670
test just started and these these are

00:10:19,750 --> 00:10:22,570
actually exactly the responses from the

00:10:21,670 --> 00:10:25,990
API will actually tell you that

00:10:22,570 --> 00:10:28,720
information and as you can see we have a

00:10:25,990 --> 00:10:31,420
speed index of 4096 on first load and

00:10:28,720 --> 00:10:32,980
3109 on second load that's good because

00:10:31,420 --> 00:10:37,030
it tells us that we do have some caching

00:10:32,980 --> 00:10:38,650
enable but it's really a relative number

00:10:37,030 --> 00:10:40,540
that you can be looking for so you check

00:10:38,650 --> 00:10:41,680
are you happy with it okay that's the

00:10:40,540 --> 00:10:43,680
number we're going to aim for and you

00:10:41,680 --> 00:10:50,770
can just start to inform your scaling

00:10:43,680 --> 00:10:53,110
metrics with that alright so back end

00:10:50,770 --> 00:10:57,940
developers I suspect the majority of

00:10:53,110 --> 00:10:59,680
people fall into this category um this

00:10:57,940 --> 00:11:02,380
is probably not a new idea cash

00:10:59,680 --> 00:11:02,950
aggressively so database caching with a

00:11:02,380 --> 00:11:04,330
multiple

00:11:02,950 --> 00:11:06,610
caching database caching whether that

00:11:04,330 --> 00:11:10,740
memcache cassandra doesn't really matter

00:11:06,610 --> 00:11:14,170
put something in place full page caching

00:11:10,740 --> 00:11:15,940
this is much more difficult I find so

00:11:14,170 --> 00:11:17,890
whether you're using memcache Cassandra

00:11:15,940 --> 00:11:19,780
varnish squid some sort of reverse proxy

00:11:17,890 --> 00:11:21,790
we run into this problem with

00:11:19,780 --> 00:11:24,790
authenticated users we also have things

00:11:21,790 --> 00:11:26,320
like geographically based caches so for

00:11:24,790 --> 00:11:29,470
example if you have a web property that

00:11:26,320 --> 00:11:32,740
serves to the entirety of the world you

00:11:29,470 --> 00:11:33,700
may have different types of sales going

00:11:32,740 --> 00:11:35,350
on four different parts of the world

00:11:33,700 --> 00:11:37,120
maybe have just different messaging

00:11:35,350 --> 00:11:38,980
different languages all these kind of

00:11:37,120 --> 00:11:42,520
things these all play into the

00:11:38,980 --> 00:11:43,690
difficulties of full page caching so we

00:11:42,520 --> 00:11:45,820
start to look at something called edge

00:11:43,690 --> 00:11:50,530
side includes or es is as anyone run

00:11:45,820 --> 00:11:52,510
into this before okay so exciting cludes

00:11:50,530 --> 00:11:54,910
are really cool they are supported by

00:11:52,510 --> 00:11:57,400
varnish squid and a few others they were

00:11:54,910 --> 00:11:59,440
actually created primarily by a car mine

00:11:57,400 --> 00:12:02,770
and we in my opinion have the best

00:11:59,440 --> 00:12:04,510
support for them it's site includes our

00:12:02,770 --> 00:12:07,120
special HTML tags that allow you to

00:12:04,510 --> 00:12:10,270
inform the cache about small sections of

00:12:07,120 --> 00:12:12,550
your page so that you can say I want to

00:12:10,270 --> 00:12:14,710
cash this little fragment differently to

00:12:12,550 --> 00:12:16,150
other parts of the page so whether

00:12:14,710 --> 00:12:18,190
that's based you can say I don't want

00:12:16,150 --> 00:12:21,040
any cash in for this you can set a

00:12:18,190 --> 00:12:22,510
different TTL you can make it per user

00:12:21,040 --> 00:12:24,010
session which is really important for

00:12:22,510 --> 00:12:25,990
logged in users so you can still cash

00:12:24,010 --> 00:12:27,610
everything until it needs to be changed

00:12:25,990 --> 00:12:28,990
but it's specific for the user you can

00:12:27,610 --> 00:12:30,460
also do it for things like geographic

00:12:28,990 --> 00:12:32,980
area so as I mentioned earlier where you

00:12:30,460 --> 00:12:34,270
have different content for different

00:12:32,980 --> 00:12:37,720
geographic locations you can actually

00:12:34,270 --> 00:12:39,850
use edge site includes to cash all of

00:12:37,720 --> 00:12:42,070
those differently it's very cool and so

00:12:39,850 --> 00:12:45,040
this is what it looks like so we have

00:12:42,070 --> 00:12:47,620
this ESI include tag so this is what you

00:12:45,040 --> 00:12:49,600
want to cash you can set some other

00:12:47,620 --> 00:12:51,760
attributes in here to change the caching

00:12:49,600 --> 00:12:54,750
and stuff with varnish it's basically

00:12:51,760 --> 00:12:58,720
set in the config and then we have

00:12:54,750 --> 00:13:00,760
essentially a fallback so this is just a

00:12:58,720 --> 00:13:01,960
piece of PHP code that will run on the

00:13:00,760 --> 00:13:03,940
server because the page is rendered

00:13:01,960 --> 00:13:05,200
normally and it has some sort of fall

00:13:03,940 --> 00:13:07,810
back that you want to be able to show if

00:13:05,200 --> 00:13:09,850
edge side includes are not supported or

00:13:07,810 --> 00:13:10,960
maybe the proxy server that's going

00:13:09,850 --> 00:13:13,720
through falls over and they can't

00:13:10,960 --> 00:13:16,210
process them right now so just go back

00:13:13,720 --> 00:13:16,810
so this one is the server is going to

00:13:16,210 --> 00:13:18,580
include this or

00:13:16,810 --> 00:13:20,650
actually make a sub request and include

00:13:18,580 --> 00:13:23,500
that content this one is rendered in

00:13:20,650 --> 00:13:25,720
line and will be removed if the head

00:13:23,500 --> 00:13:28,920
side include can be successfully run so

00:13:25,720 --> 00:13:28,920
you have some sort of full back there

00:13:29,790 --> 00:13:39,820
okay any questions so far great so the

00:13:38,650 --> 00:13:41,560
next thing I want to talk about a

00:13:39,820 --> 00:13:42,880
mentioned image compression and I said

00:13:41,560 --> 00:13:44,080
your designers need to do it otherwise

00:13:42,880 --> 00:13:46,060
we're going to do it and probably get it

00:13:44,080 --> 00:13:47,260
wrong but we can actually do some really

00:13:46,060 --> 00:13:48,610
amazing things with image compression

00:13:47,260 --> 00:13:51,550
when we talk about looking at it

00:13:48,610 --> 00:13:54,570
dynamically so the first one probably

00:13:51,550 --> 00:13:57,730
the simplest one is format negotiation

00:13:54,570 --> 00:13:59,589
we I think most of us probably know that

00:13:57,730 --> 00:14:01,990
certain image formats lend themselves to

00:13:59,589 --> 00:14:04,390
certain image contents and then you get

00:14:01,990 --> 00:14:06,670
better compression so for example if you

00:14:04,390 --> 00:14:09,640
have an image that has maybe under 12

00:14:06,670 --> 00:14:11,950
colors a gift will typically give you

00:14:09,640 --> 00:14:13,300
better compression than PNG 8 even

00:14:11,950 --> 00:14:16,150
though they have the same 256-bit

00:14:13,300 --> 00:14:18,010
palette normally that justice is a quirk

00:14:16,150 --> 00:14:22,120
of the compression but generally PGH

00:14:18,010 --> 00:14:24,460
will give you more compression JPEGs

00:14:22,120 --> 00:14:26,320
better for pictures p into 24 will give

00:14:24,460 --> 00:14:29,470
you better fidelity but higher image

00:14:26,320 --> 00:14:31,210
sizes things like that there are two new

00:14:29,470 --> 00:14:33,310
formats that are kind of coming out

00:14:31,210 --> 00:14:35,950
there's web p which is supported by

00:14:33,310 --> 00:14:38,440
chrome and jpg exile which is a new jpeg

00:14:35,950 --> 00:14:43,020
standard which is 40 x IE 9 10 11 and

00:14:38,440 --> 00:14:44,830
edge we can actually check and store

00:14:43,020 --> 00:14:46,900
different versions of an image in

00:14:44,830 --> 00:14:49,870
different formats and serve it depending

00:14:46,900 --> 00:14:51,400
on the browser that's coming in there

00:14:49,870 --> 00:14:53,470
was nothing to say that just because the

00:14:51,400 --> 00:14:55,330
file was uploaded as a JPEG that it

00:14:53,470 --> 00:14:57,100
should stay as a JPEG you should be

00:14:55,330 --> 00:14:59,380
doing things like double-checking in

00:14:57,100 --> 00:15:02,050
different formats and different

00:14:59,380 --> 00:15:03,160
compression levels how small can you get

00:15:02,050 --> 00:15:04,089
that image and how can you serve and

00:15:03,160 --> 00:15:07,000
there are the things we can do as well

00:15:04,089 --> 00:15:08,560
like responsive imagery making sure that

00:15:07,000 --> 00:15:10,630
we're not serving gianormous pictures to

00:15:08,560 --> 00:15:15,459
mobile phones things like that as well

00:15:10,630 --> 00:15:16,870
so compression is a huge part of this so

00:15:15,459 --> 00:15:19,600
not just formats but actually how we

00:15:16,870 --> 00:15:22,870
compress it within formats one thing I

00:15:19,600 --> 00:15:24,580
ran into while doing this jpg levels I

00:15:22,870 --> 00:15:26,980
always assume they were a percent or

00:15:24,580 --> 00:15:28,600
something like that or like the gzip

00:15:26,980 --> 00:15:30,259
dash nine you know that's dash nine is

00:15:28,600 --> 00:15:32,779
the most but that's actually not true

00:15:30,259 --> 00:15:34,790
I'm actually kind of arbitrary the JPEG

00:15:32,779 --> 00:15:36,229
encoder itself actually decides what

00:15:34,790 --> 00:15:39,189
that means in the context of its

00:15:36,229 --> 00:15:41,329
compressor so they're not consistent

00:15:39,189 --> 00:15:42,769
that image I showed earlier I don't know

00:15:41,329 --> 00:15:44,419
if you're able to see how crappy it

00:15:42,769 --> 00:15:46,279
looked I actually couldn't get that in

00:15:44,419 --> 00:15:47,569
job in Photoshop I took it all the way

00:15:46,279 --> 00:15:50,720
down to zero and it still looked fine to

00:15:47,569 --> 00:15:52,309
me I had to shrink it down to like 250

00:15:50,720 --> 00:15:56,899
pixels and then back up to like 5,000 to

00:15:52,309 --> 00:15:58,729
make it look like crap so those numbers

00:15:56,899 --> 00:16:00,259
are a little bit weird but they're kind

00:15:58,729 --> 00:16:03,350
of one of the things we get to classify

00:16:00,259 --> 00:16:04,789
stuff on so you'll see that so what I

00:16:03,350 --> 00:16:06,049
want to talk about is something called

00:16:04,789 --> 00:16:08,629
perceived quality we mentioned earlier

00:16:06,049 --> 00:16:10,669
about kind of the perceived page load

00:16:08,629 --> 00:16:12,559
time yours have a thing called perceived

00:16:10,669 --> 00:16:14,959
quality so this is quality that humans

00:16:12,559 --> 00:16:17,539
that we can see with the naked eye this

00:16:14,959 --> 00:16:21,249
is not just looking at image sizes this

00:16:17,539 --> 00:16:24,559
is not just looking at we're not using a

00:16:21,249 --> 00:16:28,119
sort of data recognition image capture

00:16:24,559 --> 00:16:30,919
type stuff we're just talking about what

00:16:28,119 --> 00:16:33,709
commands see when they look at an image

00:16:30,919 --> 00:16:36,319
so here is that image I showed earlier

00:16:33,709 --> 00:16:38,269
in fall here's the terribly compressed

00:16:36,319 --> 00:16:42,459
version now we obviously can tell that's

00:16:38,269 --> 00:16:45,410
horrible so this is the original again

00:16:42,459 --> 00:16:46,989
16.8 megabytes quite large this is a

00:16:45,410 --> 00:16:48,739
live 5,000 pixel image or something

00:16:46,989 --> 00:16:49,939
obviously wouldn't serve it unless you

00:16:48,739 --> 00:16:53,089
were flickr maybe you would serve it

00:16:49,939 --> 00:16:55,609
there but if we take it down to 90

00:16:53,089 --> 00:16:59,119
whatever that 90 years it dropped by

00:16:55,609 --> 00:17:00,019
almost two thirds and yet it looks and I

00:16:59,119 --> 00:17:02,809
know it's on objectors kind of have to

00:17:00,019 --> 00:17:04,220
see but it looks pretty much the same 18

00:17:02,809 --> 00:17:11,629
will take us down to four point two

00:17:04,220 --> 00:17:14,929
megabytes 1760 all the way down to zero

00:17:11,629 --> 00:17:18,079
so we go from 15.4 megabytes of 393

00:17:14,929 --> 00:17:21,949
kilobytes and in my opinion that looks

00:17:18,079 --> 00:17:25,220
just as good as the original so there's

00:17:21,949 --> 00:17:27,769
the original there's zero now you can

00:17:25,220 --> 00:17:30,529
kind of see a difference we'll look at

00:17:27,769 --> 00:17:32,120
that's actually full-sized now if you

00:17:30,529 --> 00:17:33,889
look it's not really clear here you can

00:17:32,120 --> 00:17:36,799
kinda see a little bit of sort of JPEG

00:17:33,889 --> 00:17:39,710
artifex coming in the bottom the the

00:17:36,799 --> 00:17:42,260
grass is not quite as clear things like

00:17:39,710 --> 00:17:44,030
that but actually Photoshop has an

00:17:42,260 --> 00:17:47,410
amazing compressor apparently

00:17:44,030 --> 00:17:51,080
not a great thing to use for an example

00:17:47,410 --> 00:17:54,500
so when we talk about perceived quality

00:17:51,080 --> 00:17:56,150
how can we programmatically determine

00:17:54,500 --> 00:17:57,380
what that looks like so we have this

00:17:56,150 --> 00:18:00,380
wonderful thing called structural

00:17:57,380 --> 00:18:02,390
similarity for images ssim and it's

00:18:00,380 --> 00:18:05,000
actually an Emmy award-winning algorithm

00:18:02,390 --> 00:18:07,220
I'm not sure how like who collects that

00:18:05,000 --> 00:18:08,780
or how they present it but this this

00:18:07,220 --> 00:18:12,260
algorithm which I'm not going to explain

00:18:08,780 --> 00:18:14,480
because I don't understand it was given

00:18:12,260 --> 00:18:18,140
an Emmy and it's used very often in film

00:18:14,480 --> 00:18:20,180
video and what the SSI em algorithm does

00:18:18,140 --> 00:18:22,160
is it looks at three very important

00:18:20,180 --> 00:18:23,870
things and I mean important as far as

00:18:22,160 --> 00:18:26,060
humans could concerned it looks at the

00:18:23,870 --> 00:18:27,830
brightness of an image the contrast in

00:18:26,060 --> 00:18:30,200
an image and the structure of an image

00:18:27,830 --> 00:18:33,830
and most importantly for us it's really

00:18:30,200 --> 00:18:37,190
fast so we also have something called

00:18:33,830 --> 00:18:40,250
DSS IM so while you can calculate the

00:18:37,190 --> 00:18:41,810
ssim score for an image DSS IM is even

00:18:40,250 --> 00:18:44,300
is actually more important to us this is

00:18:41,810 --> 00:18:46,280
the distance between two images as far

00:18:44,300 --> 00:18:48,350
as their quality so we can take the

00:18:46,280 --> 00:18:49,910
original image we can compress it into

00:18:48,350 --> 00:18:52,910
different levels and then we can compare

00:18:49,910 --> 00:18:56,320
how close with human i perceive it to

00:18:52,910 --> 00:18:59,210
the original so let's see if this works

00:18:56,320 --> 00:19:00,860
so this is basically its generated a

00:18:59,210 --> 00:19:03,370
heat map that is generated by how

00:19:00,860 --> 00:19:07,160
different the images from the original

00:19:03,370 --> 00:19:08,630
so start back at 19 so it's 0.09 these

00:19:07,160 --> 00:19:09,860
numbers are actually just zero based and

00:19:08,630 --> 00:19:11,690
go on to infinity it is a kind of a

00:19:09,860 --> 00:19:13,940
relative measurement but as you can see

00:19:11,690 --> 00:19:15,500
the lower the compression the more noise

00:19:13,940 --> 00:19:17,840
we get and the further away it is from

00:19:15,500 --> 00:19:19,670
the original so what you're going to do

00:19:17,840 --> 00:19:21,860
with these numbers is you're going to

00:19:19,670 --> 00:19:25,940
set a threshold you're going to say that

00:19:21,860 --> 00:19:27,440
I want images to be within 0.02 of the

00:19:25,940 --> 00:19:29,000
original anything below that I'm happy

00:19:27,440 --> 00:19:31,490
with as far as compression let's see how

00:19:29,000 --> 00:19:33,290
far we can compress it and how small we

00:19:31,490 --> 00:19:34,670
can get it before we think our users

00:19:33,290 --> 00:19:36,850
will actually notice that the

00:19:34,670 --> 00:19:39,620
compression is coming did anyone see I

00:19:36,850 --> 00:19:42,110
was about nine months ago flickr change

00:19:39,620 --> 00:19:44,870
their compression algorithm mount and

00:19:42,110 --> 00:19:48,410
there was a huge uproar because Twitter

00:19:44,870 --> 00:19:51,200
and Facebook Flickr one of them flickr

00:19:48,410 --> 00:19:52,220
had actually done testing and actually

00:19:51,200 --> 00:19:54,560
said you know can you see the difference

00:19:52,220 --> 00:19:56,120
they actually had people go and they had

00:19:54,560 --> 00:19:57,190
side-by-side images which one looks

00:19:56,120 --> 00:19:58,780
better

00:19:57,190 --> 00:20:01,030
and then they chose the algorithm based

00:19:58,780 --> 00:20:02,500
on that so they've done the tests but

00:20:01,030 --> 00:20:04,120
when they rolled it out they found out

00:20:02,500 --> 00:20:06,040
that people could actually see the

00:20:04,120 --> 00:20:07,360
difference and they complain now you're

00:20:06,040 --> 00:20:09,160
talking about photographers people that

00:20:07,360 --> 00:20:11,200
pics will keep their images all the time

00:20:09,160 --> 00:20:12,520
but they noticed and so they actually

00:20:11,200 --> 00:20:15,280
rolled it back and then rolled out

00:20:12,520 --> 00:20:19,390
slightly less aggressive compression so

00:20:15,280 --> 00:20:20,650
say we do decide on a 0.02 threshold we

00:20:19,390 --> 00:20:21,730
can actually look at these numbers and

00:20:20,650 --> 00:20:25,450
we can see that we get all the way down

00:20:21,730 --> 00:20:27,820
to 30 whatever that represents in the

00:20:25,450 --> 00:20:31,300
JPEG compression before we hit pass that

00:20:27,820 --> 00:20:32,410
to point a point zero two threshold so

00:20:31,300 --> 00:20:34,300
we know that we can compress all the way

00:20:32,410 --> 00:20:36,460
down for that specific image all the way

00:20:34,300 --> 00:20:38,560
down to level of 30 so I don't know

00:20:36,460 --> 00:20:41,710
about you whenever I sort of take a JPEG

00:20:38,560 --> 00:20:46,420
out of Photoshop I try a teen I try 60 I

00:20:41,710 --> 00:20:48,580
go back to 80 and then I save it like

00:20:46,420 --> 00:20:51,670
that's 1.2 Meg's I've got 75 megabit at

00:20:48,580 --> 00:20:53,620
home is fine we don't care but doing

00:20:51,670 --> 00:20:55,060
this programmatically means that we can

00:20:53,620 --> 00:20:56,770
apply it consistently across all of our

00:20:55,060 --> 00:20:57,910
images and we also don't have to care

00:20:56,770 --> 00:21:00,490
about the content that those images

00:20:57,910 --> 00:21:02,020
before they go up so while I said our

00:21:00,490 --> 00:21:04,180
designers should be compressing they

00:21:02,020 --> 00:21:05,760
absolutely should be even if that just

00:21:04,180 --> 00:21:07,960
means that your deploys are smaller

00:21:05,760 --> 00:21:10,570
applying this sort of thing at runtime

00:21:07,960 --> 00:21:12,610
can be pretty fantastic and what's nice

00:21:10,570 --> 00:21:14,050
is you always have the original so you

00:21:12,610 --> 00:21:14,980
can serve the original while you're

00:21:14,050 --> 00:21:17,020
doing all the different levels of

00:21:14,980 --> 00:21:19,780
compression changing formats all these

00:21:17,020 --> 00:21:21,340
kind of things and then obviously once

00:21:19,780 --> 00:21:25,180
you've got something better than start

00:21:21,340 --> 00:21:27,580
serving that so as I said you want to

00:21:25,180 --> 00:21:30,520
set a threshold so let's just take a

00:21:27,580 --> 00:21:32,920
quick look the original 14.1 megabytes

00:21:30,520 --> 00:21:36,910
that's actually not the original I size

00:21:32,920 --> 00:21:41,530
it down just a level 18 so 0.08

00:21:36,910 --> 00:21:44,020
different 4.6 megabytes 15 0.012 and

00:21:41,530 --> 00:21:46,030
then there's that magical 30 at 0.17 for

00:21:44,020 --> 00:21:48,190
as far as the eye were concerned if you

00:21:46,030 --> 00:21:50,200
were seeing these on a display full-size

00:21:48,190 --> 00:21:52,020
you probably wouldn't be able to tell

00:21:50,200 --> 00:21:55,900
the difference between these two at all

00:21:52,020 --> 00:21:58,570
and it saved as 91.4 percent of our

00:21:55,900 --> 00:22:03,100
bandwidth our size which is kind of an

00:21:58,570 --> 00:22:06,690
incredible saving all right so how many

00:22:03,100 --> 00:22:09,250
front-end people do we have right I

00:22:06,690 --> 00:22:10,890
think that there is not enough credit

00:22:09,250 --> 00:22:14,260
given to front end and

00:22:10,890 --> 00:22:16,600
this plays a huge role in performance

00:22:14,260 --> 00:22:18,810
and there are some really really cool

00:22:16,600 --> 00:22:21,580
stuff coming and sort of rolling out now

00:22:18,810 --> 00:22:24,250
and the number one thing is known as

00:22:21,580 --> 00:22:27,430
predictive browsing or pre browsing for

00:22:24,250 --> 00:22:31,750
short and this is in my opinion coolest

00:22:27,430 --> 00:22:34,170
thing in the store not just because i

00:22:31,750 --> 00:22:36,670
have awesomely animated slides coming so

00:22:34,170 --> 00:22:39,280
there are four different types of free

00:22:36,670 --> 00:22:42,490
browsing there is DNS prefetching which

00:22:39,280 --> 00:22:43,660
where we can tell the browser hey we

00:22:42,490 --> 00:22:45,490
know we're going to load something from

00:22:43,660 --> 00:22:48,910
this domain next so go ahead and do the

00:22:45,490 --> 00:22:50,230
DNS lookup there's TCP pre connect which

00:22:48,910 --> 00:22:51,790
says hey we know we're definitely load

00:22:50,230 --> 00:22:54,250
something from this server so go ahead

00:22:51,790 --> 00:22:56,020
and connect with there's prefetching

00:22:54,250 --> 00:22:57,130
which is go grab the content and then

00:22:56,020 --> 00:22:59,260
there's pre-rendering where it will

00:22:57,130 --> 00:23:00,760
actually grab the content all of the

00:22:59,260 --> 00:23:02,410
resources necessary to render and render

00:23:00,760 --> 00:23:03,370
it off screen and as soon as they click

00:23:02,410 --> 00:23:07,330
the link to go to it would be

00:23:03,370 --> 00:23:09,790
immediately popped up so how does this

00:23:07,330 --> 00:23:13,840
look as I mention we start off with the

00:23:09,790 --> 00:23:17,290
DNS prefetch then we open up our TCP

00:23:13,840 --> 00:23:18,730
connection to the server we preload it

00:23:17,290 --> 00:23:19,720
so we go grab the content we just hold

00:23:18,730 --> 00:23:20,920
it in memory we don't do anything with

00:23:19,720 --> 00:23:22,960
it we don't pass we're not getting sub

00:23:20,920 --> 00:23:25,000
resources and then finally we do

00:23:22,960 --> 00:23:30,010
pre-render where we actually do the work

00:23:25,000 --> 00:23:34,180
of rendering it so to do this these are

00:23:30,010 --> 00:23:37,650
all really similar it's basically a link

00:23:34,180 --> 00:23:40,810
tag in your head so inside your head

00:23:37,650 --> 00:23:45,700
link rel equals DNS prefetch you'll

00:23:40,810 --> 00:23:47,350
notice we don't have a protocol here we

00:23:45,700 --> 00:23:50,890
don't need it to do it in X look up so

00:23:47,350 --> 00:23:53,920
why include it pre connect very similar

00:23:50,890 --> 00:23:55,000
except rel equals pre connect this time

00:23:53,920 --> 00:23:56,800
we have a protocol because we need to

00:23:55,000 --> 00:23:57,940
open up to a specific port you would

00:23:56,800 --> 00:24:02,860
also want to put a port in if you had

00:23:57,940 --> 00:24:06,120
some non-standard one prefetch rel

00:24:02,860 --> 00:24:09,460
equals prefetch page URL that could be

00:24:06,120 --> 00:24:11,550
relative or absolute and pre-render is a

00:24:09,460 --> 00:24:14,230
exactly the same except pre-render I

00:24:11,550 --> 00:24:18,280
will caution you about this one this one

00:24:14,230 --> 00:24:20,230
seems like the best one but remember all

00:24:18,280 --> 00:24:22,300
these graphs about how heavy pages are

00:24:20,230 --> 00:24:24,490
all of this does have to happen to

00:24:22,300 --> 00:24:25,960
pre-render so you're actually

00:24:24,490 --> 00:24:29,920
now causing contentions between your

00:24:25,960 --> 00:24:32,679
current page and the next page there is

00:24:29,920 --> 00:24:35,140
another standard that is almost a

00:24:32,679 --> 00:24:36,910
standard it's a working draft that is

00:24:35,140 --> 00:24:39,520
coming along Caldwell equals preload

00:24:36,910 --> 00:24:42,300
which sounds very similar to perfection

00:24:39,520 --> 00:24:44,980
it kind of is the difference between

00:24:42,300 --> 00:24:47,620
preload and actually all of the pre

00:24:44,980 --> 00:24:50,740
browsing star is pre browsing is based

00:24:47,620 --> 00:24:52,390
on what's coming next what is the next

00:24:50,740 --> 00:24:55,000
action that the user is going to take

00:24:52,390 --> 00:24:56,679
whereas preload is and it's optional and

00:24:55,000 --> 00:24:58,990
it's low priority so that's some of the

00:24:56,679 --> 00:25:01,330
keeping in mind for all of the pre

00:24:58,990 --> 00:25:03,280
browsing stuff preload however isn't

00:25:01,330 --> 00:25:06,040
meant to be mandatory and it's for the

00:25:03,280 --> 00:25:08,920
current action so for example you can

00:25:06,040 --> 00:25:11,860
say i want to preload my fonts rather so

00:25:08,920 --> 00:25:13,840
normally you load the HTML page it gets

00:25:11,860 --> 00:25:15,520
passed it sees the link for the CSS it

00:25:13,840 --> 00:25:18,640
pulls the CSS and it passes all of that

00:25:15,520 --> 00:25:20,320
sees a link to an image or font and then

00:25:18,640 --> 00:25:24,220
make another request you could put a

00:25:20,320 --> 00:25:26,650
link prefetch to that font and sorry

00:25:24,220 --> 00:25:29,160
preload to that font and it would pull

00:25:26,650 --> 00:25:31,420
it before it's finished passing the CSS

00:25:29,160 --> 00:25:35,230
so you can get really granular about

00:25:31,420 --> 00:25:37,030
this stuff preload is also typically

00:25:35,230 --> 00:25:39,100
sent as a header because it's meant for

00:25:37,030 --> 00:25:41,440
the current page so what's really cool

00:25:39,100 --> 00:25:43,240
about that as I mentioned you could say

00:25:41,440 --> 00:25:45,250
pull in fonts you could also say hey

00:25:43,240 --> 00:25:46,270
here's the HTML page and by the way

00:25:45,250 --> 00:25:47,410
you're going to need to CSS this

00:25:46,270 --> 00:25:50,230
JavaScript these fonts and all this

00:25:47,410 --> 00:25:52,330
other stuff to render this page so they

00:25:50,230 --> 00:25:54,280
don't have to retrieve the whole thing

00:25:52,330 --> 00:25:55,330
and they don't have to pass it before

00:25:54,280 --> 00:25:57,370
they know all that information they can

00:25:55,330 --> 00:25:58,809
start making requests immediately so you

00:25:57,370 --> 00:26:03,730
can just trim off just a little bit of

00:25:58,809 --> 00:26:04,929
time at the start there so I think with

00:26:03,730 --> 00:26:05,950
all the new stuff that's coming we're

00:26:04,929 --> 00:26:08,590
going to start to see some new

00:26:05,950 --> 00:26:11,350
architectures around how we serve web

00:26:08,590 --> 00:26:15,970
content and it's all sort of predicated

00:26:11,350 --> 00:26:17,850
on this which is the hcv once sucks we

00:26:15,970 --> 00:26:22,600
have come up with some fantastic

00:26:17,850 --> 00:26:24,070
technologies things article so for

00:26:22,600 --> 00:26:27,850
example minifying and concatenated

00:26:24,070 --> 00:26:29,500
javascript and CSS files inlining very

00:26:27,850 --> 00:26:30,429
small bits of JavaScript and CSS for our

00:26:29,500 --> 00:26:33,460
critical path does everyone know what

00:26:30,429 --> 00:26:36,760
critical path means essentially it's the

00:26:33,460 --> 00:26:37,990
idea that we only need to render what's

00:26:36,760 --> 00:26:39,580
visible on the screen when they

00:26:37,990 --> 00:26:41,559
first load the page that's the thing

00:26:39,580 --> 00:26:42,910
that has to be there immediately so what

00:26:41,559 --> 00:26:44,590
we'll do is we'll take a very small

00:26:42,910 --> 00:26:46,480
subset of CSS in a very small subset of

00:26:44,590 --> 00:26:48,370
JavaScript that's necessary to render

00:26:46,480 --> 00:26:49,510
just that and we'll actually in line it

00:26:48,370 --> 00:26:53,640
rather than having to be a separate

00:26:49,510 --> 00:26:57,370
requests that takes time image sprites

00:26:53,640 --> 00:26:59,440
data your eyes domain shouting these are

00:26:57,370 --> 00:27:02,170
all techniques that we've come up with

00:26:59,440 --> 00:27:04,690
to improve the performance of HTTP one

00:27:02,170 --> 00:27:06,970
within the limitations of it browsers

00:27:04,690 --> 00:27:08,890
will only allow load six to eight things

00:27:06,970 --> 00:27:11,679
on any single URL so we shot across

00:27:08,890 --> 00:27:14,130
domains these kind of things quite

00:27:11,679 --> 00:27:17,470
frankly all of these things are hacks

00:27:14,130 --> 00:27:21,429
very clever hacks they've done amazing

00:27:17,470 --> 00:27:23,920
things but they are all hacks so HTTP

00:27:21,429 --> 00:27:25,570
two is coming it's supported right now

00:27:23,920 --> 00:27:29,080
by sixty percent of browsers out there

00:27:25,570 --> 00:27:30,880
in the world and I mentioned if you're a

00:27:29,080 --> 00:27:33,040
sysadmin or a dev up you should be

00:27:30,880 --> 00:27:35,470
enabling HT to be too it's pretty

00:27:33,040 --> 00:27:36,880
fantastic it has this idea of

00:27:35,470 --> 00:27:39,340
multiplexing which is that you can use

00:27:36,880 --> 00:27:41,200
one connection for parallel requests and

00:27:39,340 --> 00:27:42,940
you can send as many requests along that

00:27:41,200 --> 00:27:45,929
connection as you want you no longer

00:27:42,940 --> 00:27:49,090
have that six or eight connection limit

00:27:45,929 --> 00:27:51,630
so if you're doing domain sharding you

00:27:49,090 --> 00:27:53,740
can actually hurt yourself in HTTP too

00:27:51,630 --> 00:27:56,050
we also have something called server

00:27:53,740 --> 00:27:58,630
push which is this idea of the server

00:27:56,050 --> 00:28:00,370
being able to inform the browser hey

00:27:58,630 --> 00:28:01,710
here's something you're going to need go

00:28:00,370 --> 00:28:04,000
ahead and download it and it's actually

00:28:01,710 --> 00:28:05,950
semantically the same as the pre-loading

00:28:04,000 --> 00:28:07,570
that we had except instead of a header

00:28:05,950 --> 00:28:09,429
it's actually just another stream inside

00:28:07,570 --> 00:28:12,790
of the HTTP two connection this is hey

00:28:09,429 --> 00:28:14,490
here's something you're going to need so

00:28:12,790 --> 00:28:16,809
server push is pretty amazing as well

00:28:14,490 --> 00:28:19,750
and all of this happens inside of one

00:28:16,809 --> 00:28:23,290
tcp connection with server push we no

00:28:19,750 --> 00:28:25,690
longer need a concatenation because we

00:28:23,290 --> 00:28:28,330
no longer have separate requests we no

00:28:25,690 --> 00:28:29,650
longer need to do compression because

00:28:28,330 --> 00:28:32,860
we've got gzip compression it's good

00:28:29,650 --> 00:28:35,220
enough we no longer need to do in lining

00:28:32,860 --> 00:28:37,510
because we can actually send those small

00:28:35,220 --> 00:28:39,700
subsets and separate documents so

00:28:37,510 --> 00:28:42,940
semantically they are separate but they

00:28:39,700 --> 00:28:44,400
don't need to be inlined anymore so

00:28:42,940 --> 00:28:50,200
let's take a look at what it means to

00:28:44,400 --> 00:28:51,520
deliver a page open up TCP connection do

00:28:50,200 --> 00:28:53,590
a get request

00:28:51,520 --> 00:28:57,520
we get a response right this is pretty

00:28:53,590 --> 00:29:00,940
standard with server push now we can

00:28:57,520 --> 00:29:02,470
push the critical path CSS JavaScript

00:29:00,940 --> 00:29:07,890
and maybe we push our logo because we're

00:29:02,470 --> 00:29:12,400
vain we can also do things like a setup

00:29:07,890 --> 00:29:17,950
what's known as a parent so a what's the

00:29:12,400 --> 00:29:20,950
word a requirement so you can say I want

00:29:17,950 --> 00:29:23,410
to send my CSS immediately and as soon

00:29:20,950 --> 00:29:27,460
as it's been sent but not before I want

00:29:23,410 --> 00:29:29,140
to send the font same with your main

00:29:27,460 --> 00:29:31,210
JavaScript so as soon as your critical

00:29:29,140 --> 00:29:33,490
path javascript is loaded follow it with

00:29:31,210 --> 00:29:34,720
the main JavaScript maybe have some sort

00:29:33,490 --> 00:29:38,530
of splashing min so that'll follow the

00:29:34,720 --> 00:29:40,720
logo and then we want our main CSS to

00:29:38,530 --> 00:29:42,520
follow the font so when we load the page

00:29:40,720 --> 00:29:44,020
we're going to load the critical path

00:29:42,520 --> 00:29:45,910
which will just set up sort of the

00:29:44,020 --> 00:29:48,250
layout for everything that's visible in

00:29:45,910 --> 00:29:50,050
the viewport we will send the font so

00:29:48,250 --> 00:29:52,090
that all of that in the header will load

00:29:50,050 --> 00:29:53,470
correctly and then we'll send the rest

00:29:52,090 --> 00:29:55,810
of the CSS for the rest of the base that

00:29:53,470 --> 00:30:00,820
they can't see yet okay so this is

00:29:55,810 --> 00:30:05,250
what's known as the critical path so in

00:30:00,820 --> 00:30:08,530
summary performance really does matter

00:30:05,250 --> 00:30:12,790
there's a great website wpo stats dot

00:30:08,530 --> 00:30:14,410
org might be calm which lists a whole

00:30:12,790 --> 00:30:16,120
bunch of use cases I've said all the

00:30:14,410 --> 00:30:18,100
ones I've cited earlier or from that

00:30:16,120 --> 00:30:20,710
site if you need to convince your boss

00:30:18,100 --> 00:30:23,860
your manager team lead that this stuff

00:30:20,710 --> 00:30:26,650
matters show him the site go find use

00:30:23,860 --> 00:30:30,640
cases that match your particular pattern

00:30:26,650 --> 00:30:34,420
this is why we need to do this as we

00:30:30,640 --> 00:30:37,240
know time equals money and we also know

00:30:34,420 --> 00:30:39,100
that time equals user satisfaction we

00:30:37,240 --> 00:30:40,840
know that our users hate slow pages we

00:30:39,100 --> 00:30:44,350
know it ourselves but we've never really

00:30:40,840 --> 00:30:49,060
quantified it so performance is user

00:30:44,350 --> 00:30:50,590
experience so if you would love to rate

00:30:49,060 --> 00:30:52,330
me on joined in I would very much

00:30:50,590 --> 00:30:54,160
appreciate that any feedback you have so

00:30:52,330 --> 00:30:56,560
i mentioned i'm at d traffic on twitter

00:30:54,160 --> 00:30:58,720
d shaffer Kodaka my common you would

00:30:56,560 --> 00:31:00,190
like to email me but Twitter's pretty

00:30:58,720 --> 00:31:02,830
much more immediate I'd certainly prefer

00:31:00,190 --> 00:31:05,050
it and then these slides will be up

00:31:02,830 --> 00:31:05,260
david shaffer calm / slides as soon as I

00:31:05,050 --> 00:31:09,520
can

00:31:05,260 --> 00:31:12,880
hello to three hundred megabyte PDF the

00:31:09,520 --> 00:31:16,690
original slide deck is like 750 Manx uh

00:31:12,880 --> 00:31:25,600
so any questions yes oh wait there's a

00:31:16,690 --> 00:31:27,630
mic the pre-render in your mentioning

00:31:25,600 --> 00:31:30,490
does that affect ads impressions as well

00:31:27,630 --> 00:31:35,140
it would be exactly the same as any

00:31:30,490 --> 00:31:38,500
other requests they should be doing some

00:31:35,140 --> 00:31:39,670
sort of detection to see like is there a

00:31:38,500 --> 00:31:41,290
mouse cursor or something like there are

00:31:39,670 --> 00:31:43,690
ways they can detect it on the back end

00:31:41,290 --> 00:31:45,220
but in theory it is just a browser

00:31:43,690 --> 00:31:47,560
requests admits it as well so would that

00:31:45,220 --> 00:31:49,780
artificially inflate potentially yeah

00:31:47,560 --> 00:31:51,190
but you do have to weigh it against the

00:31:49,780 --> 00:31:53,800
fact that you are using resources that

00:31:51,190 --> 00:31:56,860
are necessary and potentially being

00:31:53,800 --> 00:32:00,520
contentious with those resources any

00:31:56,860 --> 00:32:05,020
other questions this one here is one of

00:32:00,520 --> 00:32:07,960
the bat oh I'm down there as well so you

00:32:05,020 --> 00:32:09,910
said before that compressor images or we

00:32:07,960 --> 00:32:12,970
would do it for you that's a comic has

00:32:09,910 --> 00:32:15,400
some service to force compressing images

00:32:12,970 --> 00:32:17,050
akima has an amazing service for

00:32:15,400 --> 00:32:18,970
compressing images all of the technology

00:32:17,050 --> 00:32:23,470
that I covered we do have automated

00:32:18,970 --> 00:32:25,810
services for that so whether that's a

00:32:23,470 --> 00:32:27,250
format interchanging automatically

00:32:25,810 --> 00:32:29,530
obviously it's all cached on the edge

00:32:27,250 --> 00:32:30,700
that makes a big deal but yes we do have

00:32:29,530 --> 00:32:34,510
a service for that it's called image

00:32:30,700 --> 00:32:37,330
manager okay so I understand that I as a

00:32:34,510 --> 00:32:39,820
user of a car my services have some

00:32:37,330 --> 00:32:42,040
settings to set I don't know the this

00:32:39,820 --> 00:32:44,200
scale how the images should be

00:32:42,040 --> 00:32:46,780
compressed yeah well you didn't set the

00:32:44,200 --> 00:32:50,200
threshold so this is about this is using

00:32:46,780 --> 00:32:52,270
this metric as sue yes it's it's it's

00:32:50,200 --> 00:32:53,950
not so the tool that I use as a tool

00:32:52,270 --> 00:32:57,070
called DSS IM it's completely free

00:32:53,950 --> 00:32:58,330
open-source it did set fault on my mac i

00:32:57,070 --> 00:33:00,490
have to do it inside of a docker

00:32:58,330 --> 00:33:02,530
container together to run but it is

00:33:00,490 --> 00:33:04,020
completely free and open source it's

00:33:02,530 --> 00:33:06,460
similar we have our own implementation

00:33:04,020 --> 00:33:09,010
but yes the same kind of metric the same

00:33:06,460 --> 00:33:14,490
or this is one of our metrics is the ssi

00:33:09,010 --> 00:33:14,490
em algorithm paul had something

00:33:15,360 --> 00:33:22,630
hi em question about the prefetching and

00:33:19,240 --> 00:33:24,280
the rendering what web and I'm trying to

00:33:22,630 --> 00:33:28,390
think about my hair the scenario where i

00:33:24,280 --> 00:33:29,710
would used up and i wanted to give a

00:33:28,390 --> 00:33:31,360
good example the example I could think

00:33:29,710 --> 00:33:33,760
of was you don't know like a check out

00:33:31,360 --> 00:33:36,040
page and you can predict the exact step

00:33:33,760 --> 00:33:37,120
by going to next and I thought that's a

00:33:36,040 --> 00:33:38,740
good example but I'm wondering if

00:33:37,120 --> 00:33:41,950
there's other examples where you could

00:33:38,740 --> 00:33:46,470
see the you know you have sites that

00:33:41,950 --> 00:33:49,810
work as right now coming over to http to

00:33:46,470 --> 00:33:51,940
what kind of Elias would be fined as

00:33:49,810 --> 00:33:53,290
developers to to start looking all these

00:33:51,940 --> 00:33:55,210
desitin opportunity where we could use

00:33:53,290 --> 00:33:56,590
prefetching ryland just guessing at all

00:33:55,210 --> 00:33:59,200
thats a circular idea let's introduce it

00:33:56,590 --> 00:34:01,120
so there's kind of two parts to this one

00:33:59,200 --> 00:34:03,700
is we kind of have an idea in our heads

00:34:01,120 --> 00:34:05,680
where we design user experience what the

00:34:03,700 --> 00:34:07,390
flow will be like for a page so for

00:34:05,680 --> 00:34:08,740
example if you go to Google they know

00:34:07,390 --> 00:34:10,600
that probably the next thing we're going

00:34:08,740 --> 00:34:11,980
to do is to click the Go button to

00:34:10,600 --> 00:34:14,110
search right now obviously they can't

00:34:11,980 --> 00:34:15,399
preload that but what they can do is

00:34:14,110 --> 00:34:19,240
they can preload page 2 of the search

00:34:15,399 --> 00:34:21,070
results right so we do kind of have an

00:34:19,240 --> 00:34:22,929
idea of what I users do I think better

00:34:21,070 --> 00:34:25,540
than that is actually looking at our

00:34:22,929 --> 00:34:26,590
logs and tracking what users do we get

00:34:25,540 --> 00:34:28,480
all these metrics to things like Google

00:34:26,590 --> 00:34:30,310
Analytics and we can actually then make

00:34:28,480 --> 00:34:31,510
predictive analysis of where they're

00:34:30,310 --> 00:34:33,190
going to go next and we can actually in

00:34:31,510 --> 00:34:35,409
real time modify what we're pre-loading

00:34:33,190 --> 00:34:36,640
based on that and then as far as the

00:34:35,409 --> 00:34:38,679
other side of that which is things like

00:34:36,640 --> 00:34:40,720
server push and preload where you're

00:34:38,679 --> 00:34:43,270
actually doing it for the current page

00:34:40,720 --> 00:34:44,590
it is going to be all sub resources you

00:34:43,270 --> 00:34:46,929
just got to make sure they prioritize

00:34:44,590 --> 00:34:48,640
them right so do you care most about the

00:34:46,929 --> 00:34:52,060
font coming in or about your splash

00:34:48,640 --> 00:34:54,340
image I do have a whole nother talkin

00:34:52,060 --> 00:34:57,310
ht-32 so I not giving here but like

00:34:54,340 --> 00:34:58,960
there is a whole talk around that so I

00:34:57,310 --> 00:35:03,190
hope that answers some of the question

00:34:58,960 --> 00:35:04,600
though it's never a push mm-hm will it

00:35:03,190 --> 00:35:06,760
will it replace the way that what you're

00:35:04,600 --> 00:35:08,320
currently doing a jack Singh ieva for

00:35:06,760 --> 00:35:10,120
pulling for stuff with a good because

00:35:08,320 --> 00:35:11,620
the client has to say to the server are

00:35:10,120 --> 00:35:13,690
you do have stuff for me what is your

00:35:11,620 --> 00:35:17,140
thing though yes in robbing the casino

00:35:13,690 --> 00:35:19,450
so it doesn't in that two things server

00:35:17,140 --> 00:35:21,550
push is not something that the brow of

00:35:19,450 --> 00:35:22,930
the server sorry can say to the browser

00:35:21,550 --> 00:35:27,010
you're taking this and you have to like

00:35:22,930 --> 00:35:28,090
it the browser can reject server pushes

00:35:27,010 --> 00:35:29,560
and basically what happens is the

00:35:28,090 --> 00:35:30,940
service says hey I've got this thing I

00:35:29,560 --> 00:35:32,710
want to send to you hear some headers

00:35:30,940 --> 00:35:34,540
decide whether you want it or not and

00:35:32,710 --> 00:35:37,030
then it will take it and essentially it

00:35:34,540 --> 00:35:38,860
actually sends both the response and the

00:35:37,030 --> 00:35:41,530
request that would have elicited that

00:35:38,860 --> 00:35:43,870
response and it's cached so that when

00:35:41,530 --> 00:35:45,850
they then make the request it then gets

00:35:43,870 --> 00:35:47,890
pulled out of the cash instead so it

00:35:45,850 --> 00:35:50,110
actually is just pre cashing rather than

00:35:47,890 --> 00:35:51,130
sending it to there's no like JavaScript

00:35:50,110 --> 00:35:54,130
event or anything that happens on the

00:35:51,130 --> 00:35:56,440
front end so it doesn't replace ajax in

00:35:54,130 --> 00:35:58,210
terms of like push it would just make it

00:35:56,440 --> 00:35:59,290
a lot faster because we could send it to

00:35:58,210 --> 00:36:01,270
them and as soon as they requested

00:35:59,290 --> 00:36:02,950
they've already got it in the cache so

00:36:01,270 --> 00:36:11,770
there was another questioning away in

00:36:02,950 --> 00:36:15,280
the back 02 hello um just in terms of

00:36:11,770 --> 00:36:16,990
HTTP to and can he give me some more

00:36:15,280 --> 00:36:18,790
compelling reasons why you wouldn't do

00:36:16,990 --> 00:36:21,190
the upgrade because it sounds great and

00:36:18,790 --> 00:36:23,200
I'm ready to press the button but just a

00:36:21,190 --> 00:36:25,360
mother educated say I'm running apache

00:36:23,200 --> 00:36:28,030
or nginx which is the which is kind of

00:36:25,360 --> 00:36:29,800
already supported ish yeah if you can

00:36:28,030 --> 00:36:32,530
elaborate on maybe why you wouldn't do

00:36:29,800 --> 00:36:34,620
it yet number one is that you do have to

00:36:32,530 --> 00:36:37,900
have TLS there is some overhead their

00:36:34,620 --> 00:36:40,840
number two is in some cases which is the

00:36:37,900 --> 00:36:43,600
I'm pulling one thing one page there's

00:36:40,840 --> 00:36:44,980
no sub resources case ac 22 is slower

00:36:43,600 --> 00:36:47,590
because there's a handshake that has to

00:36:44,980 --> 00:36:49,000
happen so the way the HTTP two works in

00:36:47,590 --> 00:36:51,070
the way that this backwards compatible

00:36:49,000 --> 00:36:52,510
is there's two ways to upgrade if it

00:36:51,070 --> 00:36:54,340
were in plain text it would send an HTTP

00:36:52,510 --> 00:36:55,900
one request and say hey I want to

00:36:54,340 --> 00:36:57,070
upgrade the services okay that's good

00:36:55,900 --> 00:36:59,620
let's do this in the connection will

00:36:57,070 --> 00:37:02,530
trade switch no idea what happen to the

00:36:59,620 --> 00:37:04,630
other one which is with TLS where it

00:37:02,530 --> 00:37:06,910
actually does it in the TLS negotiation

00:37:04,630 --> 00:37:10,660
that does add a little bit of overhead

00:37:06,910 --> 00:37:12,880
but it's better than opening up multiple

00:37:10,660 --> 00:37:14,770
TLS connections so if you do have a page

00:37:12,880 --> 00:37:16,600
most of us do that has CSS and

00:37:14,770 --> 00:37:18,130
JavaScript and everything in there and

00:37:16,600 --> 00:37:20,950
using one connection for all of those

00:37:18,130 --> 00:37:24,010
would be great so is there a reason not

00:37:20,950 --> 00:37:27,060
to do it potentially infrastructure

00:37:24,010 --> 00:37:29,830
reasons um you know I do think that

00:37:27,060 --> 00:37:32,080
engine X support is very very early

00:37:29,830 --> 00:37:34,060
doesn't support server push specifically

00:37:32,080 --> 00:37:36,760
right now they just put it in there

00:37:34,060 --> 00:37:39,010
Apache if anyone's still using it

00:37:36,760 --> 00:37:41,020
they're using a library called ng HTTP

00:37:39,010 --> 00:37:43,120
two which is also the one binding

00:37:41,020 --> 00:37:48,340
to use in PHP it's a really mature solid

00:37:43,120 --> 00:37:50,620
library it's quite heavy though so go

00:37:48,340 --> 00:37:52,320
and test for the most part for your

00:37:50,620 --> 00:37:54,160
applications it's completely transparent

00:37:52,320 --> 00:37:56,170
until you get into things like server

00:37:54,160 --> 00:37:57,670
pushing and whatnot which is initiated

00:37:56,170 --> 00:37:59,950
by headers which is great it means that

00:37:57,670 --> 00:38:01,450
all the languages that can do HTTP can

00:37:59,950 --> 00:38:05,110
already do server push it's all handled

00:38:01,450 --> 00:38:07,210
at the HTTP Leia just just go for it try

00:38:05,110 --> 00:38:13,840
it out I mean put it on you stating

00:38:07,210 --> 00:38:15,670
infrastructure and check it out there

00:38:13,840 --> 00:38:19,630
was someone there and the guys yeah i

00:38:15,670 --> 00:38:21,850
was gonna sorry i'm just gonna ask you

00:38:19,630 --> 00:38:24,220
something about like back in verses

00:38:21,850 --> 00:38:26,500
front and right now I've heard like

00:38:24,220 --> 00:38:28,390
rumors in the dark internet that people

00:38:26,500 --> 00:38:30,670
have been starting to make decompression

00:38:28,390 --> 00:38:32,860
engines on the front and side and I was

00:38:30,670 --> 00:38:35,080
just gonna ask you about how what's your

00:38:32,860 --> 00:38:37,510
point on that I mean II compression

00:38:35,080 --> 00:38:40,450
engines yeah the curse began since

00:38:37,510 --> 00:38:43,810
Vulkan API just released a nurse I like

00:38:40,450 --> 00:38:45,340
huge cool thing and I expect that when I

00:38:43,810 --> 00:38:48,820
mean there will be a JavaScript support

00:38:45,340 --> 00:38:50,950
for that we suddenly got just got like a

00:38:48,820 --> 00:38:53,050
Ferrari in our web browser with just

00:38:50,950 --> 00:38:55,510
compassion decompression speed mm-hmm

00:38:53,050 --> 00:38:57,460
but it's not really a good idea to like

00:38:55,510 --> 00:38:59,230
make force the clients to decompress

00:38:57,460 --> 00:39:03,400
everything even if it's like super super

00:38:59,230 --> 00:39:04,570
fast um honestly I don't really

00:39:03,400 --> 00:39:08,050
understand the question cuz I've not

00:39:04,570 --> 00:39:10,090
looked at that at all that's gonna be my

00:39:08,050 --> 00:39:11,890
answer so we'll talk about it after

00:39:10,090 --> 00:39:15,700
maybe that would be a new slide next

00:39:11,890 --> 00:39:17,950
time I give it um just okay it was just

00:39:15,700 --> 00:39:20,080
them he talked about the prefetching and

00:39:17,950 --> 00:39:21,700
you showed the syntax for how to declare

00:39:20,080 --> 00:39:24,520
which resources you want to be

00:39:21,700 --> 00:39:26,860
prefetched yeah just which browsers are

00:39:24,520 --> 00:39:30,070
actually how many browsers supporting

00:39:26,860 --> 00:39:32,530
this now free virtual preload well both

00:39:30,070 --> 00:39:35,370
actually you've been um essentially

00:39:32,530 --> 00:39:38,220
chrome is the leader in this whole thing

00:39:35,370 --> 00:39:40,330
Firefox has support for some of it

00:39:38,220 --> 00:39:42,970
Safari I don't believe has any support

00:39:40,330 --> 00:39:44,050
in IE isn't quite there yet the nice

00:39:42,970 --> 00:39:46,330
thing is they are all backwards

00:39:44,050 --> 00:39:48,820
compatible so they can be progressive in

00:39:46,330 --> 00:39:51,040
arm enhancements server push is

00:39:48,820 --> 00:39:53,560
supported by again I think firefox and

00:39:51,040 --> 00:39:54,640
google sorry in chrome sorry and i think

00:39:53,560 --> 00:39:57,339
also

00:39:54,640 --> 00:39:58,839
webkit but yeah is because it is a

00:39:57,339 --> 00:40:01,480
progressive enhancement you can start to

00:39:58,839 --> 00:40:03,519
do these things now also in my htpc talk

00:40:01,480 --> 00:40:04,539
i also talked about how we're not just

00:40:03,519 --> 00:40:07,480
talking bout browsers are also talking

00:40:04,539 --> 00:40:09,760
about api clients as well the packs that

00:40:07,480 --> 00:40:12,250
i have in 47 one gives server push

00:40:09,760 --> 00:40:13,390
support for Carl so we can now start to

00:40:12,250 --> 00:40:16,690
do it programmatically as well which is

00:40:13,390 --> 00:40:24,190
pretty cool now we can go to the

00:40:16,690 --> 00:40:25,779
gentleman in the middle ish yeah thnkx

00:40:24,190 --> 00:40:27,190
yeah but i'll follow up Pressman from

00:40:25,779 --> 00:40:30,700
that one and where browsers don't

00:40:27,190 --> 00:40:31,750
support prefetch what do they did it go

00:40:30,700 --> 00:40:33,039
and get the resorts there and then and

00:40:31,750 --> 00:40:35,140
slow things down or does it just do

00:40:33,039 --> 00:40:38,170
nothing yes if thankfully they do

00:40:35,140 --> 00:40:39,640
nothing or rather it lends nothing to

00:40:38,170 --> 00:40:48,480
the process it just it just falls back

00:40:39,640 --> 00:40:51,430
so any other questions yes yeah hi there

00:40:48,480 --> 00:40:53,260
isn't a problem with HTTP to support not

00:40:51,430 --> 00:40:56,140
a patch in engine X but the fact is a

00:40:53,260 --> 00:40:59,529
severe lack of CDN support and setting

00:40:56,140 --> 00:41:01,329
up TLS in CD ends is just a faff so

00:40:59,529 --> 00:41:03,940
Akamai support it we have for a long

00:41:01,329 --> 00:41:05,829
time I know cloudflare just added it I

00:41:03,940 --> 00:41:08,380
believe fash Lee's getting there it

00:41:05,829 --> 00:41:11,259
certainly is coming along I can mind

00:41:08,380 --> 00:41:15,400
being a larger CDN I mean that's the

00:41:11,259 --> 00:41:19,509
only one I care about detail but no I

00:41:15,400 --> 00:41:21,369
know so a big one is Amazon Amazon

00:41:19,509 --> 00:41:22,329
CloudFront does not for a cheaper too

00:41:21,369 --> 00:41:27,309
and they have not put it on their

00:41:22,329 --> 00:41:29,920
roadmap as a company that builds CDMS

00:41:27,309 --> 00:41:31,509
the reason that we mark knocking on the

00:41:29,920 --> 00:41:33,190
lead of the HTTP to working group is

00:41:31,509 --> 00:41:34,930
Akamai employee the reason we have put

00:41:33,190 --> 00:41:37,630
so much resources and the reason that we

00:41:34,930 --> 00:41:38,710
love HTTP too is it's good for us and

00:41:37,630 --> 00:41:40,180
it's good for our customers it saves us

00:41:38,710 --> 00:41:42,430
money it saves us resources and it makes

00:41:40,180 --> 00:41:44,289
things faster for our customers it would

00:41:42,430 --> 00:41:46,529
be insane framers on not to add it I

00:41:44,289 --> 00:41:54,569
just think they're not ready to commit

00:41:46,529 --> 00:41:58,210
so it will come anything else yes I

00:41:54,569 --> 00:42:00,759
don't know my discreet it's just a very

00:41:58,210 --> 00:42:02,500
quick one about DSS IM you know when you

00:42:00,759 --> 00:42:04,359
calculate the difference between the

00:42:02,500 --> 00:42:07,329
when they're calculating the difference

00:42:04,359 --> 00:42:10,390
the images do they account for the human

00:42:07,329 --> 00:42:12,339
eye perceiving several groups of colors

00:42:10,390 --> 00:42:13,539
as the same so you know when you when

00:42:12,339 --> 00:42:16,569
you calculate a difference it's not

00:42:13,539 --> 00:42:18,190
necessarily different so as I said I

00:42:16,569 --> 00:42:20,289
don't know how the algorithm works okay

00:42:18,190 --> 00:42:23,920
what they're looking for is brightness

00:42:20,289 --> 00:42:25,420
contrast and structure I believe that

00:42:23,920 --> 00:42:30,430
the contrast one is where that comes

00:42:25,420 --> 00:42:31,690
into play so yes I'm hoping it is really

00:42:30,430 --> 00:42:34,630
I mean it really does work when you look

00:42:31,690 --> 00:42:36,549
at the results yourself you do really

00:42:34,630 --> 00:42:38,529
start to see okay I can see a tiny but a

00:42:36,549 --> 00:42:40,029
different table doesn't matter and then

00:42:38,529 --> 00:42:43,089
the next one you like oh yes that

00:42:40,029 --> 00:42:44,710
obviously is different we have more yes

00:42:43,089 --> 00:42:47,680
and one in front as well have to hi

00:42:44,710 --> 00:42:49,269
there I'm about HTTP to yes and could

00:42:47,680 --> 00:42:51,069
you expect to see any performance

00:42:49,269 --> 00:42:52,180
benefits out of a box or only if you

00:42:51,069 --> 00:42:53,859
start implementing some of these

00:42:52,180 --> 00:42:55,359
features um you should see the Vaughan's

00:42:53,859 --> 00:42:56,859
benefits out of the box as long as you

00:42:55,359 --> 00:42:59,559
do have that not a single request

00:42:56,859 --> 00:43:00,700
scenario so long as you do have style

00:42:59,559 --> 00:43:02,440
sheets and JavaScript and stuff like

00:43:00,700 --> 00:43:04,029
that you should immediately see perform

00:43:02,440 --> 00:43:06,009
its benefits okay so some of the

00:43:04,029 --> 00:43:08,140
parallelism just happens for free I'm

00:43:06,009 --> 00:43:09,819
shaking some of those parallel requests

00:43:08,140 --> 00:43:11,079
things happen yes they do happen for

00:43:09,819 --> 00:43:13,059
free the browsers will do that for you

00:43:11,079 --> 00:43:15,249
and as I mentioned sixty percent of

00:43:13,059 --> 00:43:16,900
browsers currently in users hands not

00:43:15,249 --> 00:43:21,460
just the ones that are released do

00:43:16,900 --> 00:43:26,739
support HTTP two we had in the front

00:43:21,460 --> 00:43:29,109
hand we have a mic yeah just thinking

00:43:26,739 --> 00:43:31,029
about the security implications so first

00:43:29,109 --> 00:43:32,349
of the butcher about what time security

00:43:31,029 --> 00:43:35,710
implications security implications

00:43:32,349 --> 00:43:37,509
Oliver Bush of server push it's all

00:43:35,710 --> 00:43:38,829
within the same it's on the same

00:43:37,509 --> 00:43:40,960
connections that's already opened or the

00:43:38,829 --> 00:43:43,150
TLS has happened there really isn't any

00:43:40,960 --> 00:43:44,799
it is exactly the same as the browser

00:43:43,150 --> 00:43:46,930
making the request and then if they do

00:43:44,799 --> 00:43:48,369
get the chance to deny it as well it

00:43:46,930 --> 00:43:50,559
happens in the same rules as you know

00:43:48,369 --> 00:43:54,819
what can happen under connection you can

00:43:50,559 --> 00:43:59,049
do for example so if i can get this

00:43:54,819 --> 00:44:02,710
right in theory because you can have one

00:43:59,049 --> 00:44:04,269
tcp connection to two different it's the

00:44:02,710 --> 00:44:05,259
same machine but two different host

00:44:04,269 --> 00:44:08,349
names that have the same as a

00:44:05,259 --> 00:44:09,759
certificate in theory you could have

00:44:08,349 --> 00:44:11,049
another thing behind the load balancer

00:44:09,759 --> 00:44:13,029
pushing something out but it's still the

00:44:11,049 --> 00:44:15,099
same connection you can't just randomly

00:44:13,029 --> 00:44:16,509
push to a browser they have to have

00:44:15,099 --> 00:44:16,869
initiated the original connection as

00:44:16,509 --> 00:44:19,509
well

00:44:16,869 --> 00:44:22,390
so I do really isn't any security

00:44:19,509 --> 00:44:24,789
applications that can also be the case

00:44:22,390 --> 00:44:27,579
in which are you transfer a website and

00:44:24,789 --> 00:44:29,680
then all of a sudden something nasty

00:44:27,579 --> 00:44:32,589
happens so it's not it's not pushed like

00:44:29,680 --> 00:44:34,869
push notifications you have to have you

00:44:32,589 --> 00:44:36,849
have to be within a HTTP transaction

00:44:34,869 --> 00:44:38,200
already so you have to have open the

00:44:36,849 --> 00:44:40,029
initial thing you have to have made some

00:44:38,200 --> 00:44:42,549
sort of requests before they can start

00:44:40,029 --> 00:44:43,690
pushing to you so it's not like you're

00:44:42,549 --> 00:44:45,069
browsing along somewhere else and

00:44:43,690 --> 00:44:47,559
something you visited last week send

00:44:45,069 --> 00:44:53,519
something to you it is just that sort of

00:44:47,559 --> 00:44:53,519
current session so any other questions

00:44:55,140 --> 00:45:05,079
no more I think this one over here I'm

00:45:03,970 --> 00:45:11,980
not going to hear you from there you've

00:45:05,079 --> 00:45:13,779
got away for the mic I was just hopeful

00:45:11,980 --> 00:45:15,430
thinking in the context of the preload

00:45:13,779 --> 00:45:17,440
and prefetched it basically you are

00:45:15,430 --> 00:45:19,690
serving lots of 1 minus a lot you're

00:45:17,440 --> 00:45:22,599
serving content from the server to the

00:45:19,690 --> 00:45:25,509
browsers that may or may not really be

00:45:22,599 --> 00:45:27,910
needed yes so have you got any

00:45:25,509 --> 00:45:30,999
benchmarks with regards to you know how

00:45:27,910 --> 00:45:32,470
much let's say resources you're spending

00:45:30,999 --> 00:45:36,039
sending content and the user doesn't

00:45:32,470 --> 00:45:39,420
really use it so I think that this very

00:45:36,039 --> 00:45:41,380
important thing to consider it is a

00:45:39,420 --> 00:45:43,869
cost-benefit ratio that you're going to

00:45:41,380 --> 00:45:45,249
have to determine for yourself how much

00:45:43,869 --> 00:45:46,569
money are you willing to lose on

00:45:45,249 --> 00:45:48,549
bandwidth for stuff that never gets used

00:45:46,569 --> 00:45:50,950
how much of the users bandwidth who

00:45:48,549 --> 00:45:53,559
you're going to use bearing in mind if

00:45:50,950 --> 00:45:56,109
their mobile and they have limited data

00:45:53,559 --> 00:45:57,460
or if they have data caps you could

00:45:56,109 --> 00:46:01,200
potentially be impacting them

00:45:57,460 --> 00:46:05,559
financially again this is one of those

00:46:01,200 --> 00:46:06,910
looking at common trends and basing what

00:46:05,559 --> 00:46:08,559
your pre-loading and pushing and

00:46:06,910 --> 00:46:11,650
fetching a list of stuff based on

00:46:08,559 --> 00:46:13,210
current trends also based on are they on

00:46:11,650 --> 00:46:15,099
mobile okay probably we shouldn't be

00:46:13,210 --> 00:46:18,880
pushing this eight megabyte jpg down to

00:46:15,099 --> 00:46:20,890
them so it is definitely a trade-off

00:46:18,880 --> 00:46:23,829
there is definitely the potential for

00:46:20,890 --> 00:46:26,289
waste hopefully you're just a little bit

00:46:23,829 --> 00:46:27,910
judicious about how you use it there are

00:46:26,289 --> 00:46:30,400
some things that are very obvious so

00:46:27,910 --> 00:46:32,200
that the CSS for the current page they

00:46:30,400 --> 00:46:34,210
probably want that like there are some

00:46:32,200 --> 00:46:36,309
very obvious ones it's that when you get

00:46:34,210 --> 00:46:39,760
into the next action type stuff that

00:46:36,309 --> 00:46:41,859
you're not sure so yeah it's definitely

00:46:39,760 --> 00:46:44,559
something you're going to have to decide

00:46:41,859 --> 00:46:46,210
for yourself I wasn't certainly speaking

00:46:44,559 --> 00:46:47,559
about the bandwidth I was also talking

00:46:46,210 --> 00:46:49,240
about you know the cost on the server

00:46:47,559 --> 00:46:50,619
side to actually generate the resources

00:46:49,240 --> 00:46:51,700
that technically also comes down to

00:46:50,619 --> 00:46:53,859
budget right because I mean you're using

00:46:51,700 --> 00:46:55,299
resources how much whatever whether

00:46:53,859 --> 00:46:57,609
that's financial resources or server

00:46:55,299 --> 00:46:59,740
resources you need to decide what you're

00:46:57,609 --> 00:47:01,480
comfortable with spending so the short

00:46:59,740 --> 00:47:03,069
answer to the question is no we don't

00:47:01,480 --> 00:47:04,960
have any benchmarks you know we don't

00:47:03,069 --> 00:47:06,039
have any mentiroso that is a very short

00:47:04,960 --> 00:47:08,529
answer yes we don't have any benchmarks

00:47:06,039 --> 00:47:10,720
because it is still so new I do know

00:47:08,529 --> 00:47:14,260
that is a CDN we do use those hints to

00:47:10,720 --> 00:47:16,270
preload our CDN as well so that's one of

00:47:14,260 --> 00:47:17,920
the one of the things that we do so it's

00:47:16,270 --> 00:47:20,109
not just your end users at a benefiting

00:47:17,920 --> 00:47:21,670
also it is your CDN infrastructure they

00:47:20,109 --> 00:47:23,349
can preload stuff and then they have it

00:47:21,670 --> 00:47:25,240
on their edge for your users as well

00:47:23,349 --> 00:47:27,339
when they need it so that actually could

00:47:25,240 --> 00:47:31,029
save you resources because you're

00:47:27,339 --> 00:47:33,809
offloading more from your origin any

00:47:31,029 --> 00:47:36,760
other questions well tell me we have

00:47:33,809 --> 00:47:38,890
yeah great job thanks I'm sorry it's

00:47:36,760 --> 00:47:40,359
another HTTP to question that's fine I

00:47:38,890 --> 00:47:42,099
asked you wanted to give me extra to

00:47:40,359 --> 00:47:44,049
talk but there is there is an 83 talk

00:47:42,099 --> 00:47:45,789
happening I think Ben Ramsey maybe he's

00:47:44,049 --> 00:47:48,789
giving one here so go to that carry on

00:47:45,789 --> 00:47:51,490
oh cool you said that a couple of times

00:47:48,789 --> 00:47:53,670
that TLS is required to do HTTP too yes

00:47:51,490 --> 00:47:57,430
is it possible in in Apache say to

00:47:53,670 --> 00:48:00,010
configure so that I use TLS with the

00:47:57,430 --> 00:48:01,660
HTTP two connection but if i get a sort

00:48:00,010 --> 00:48:03,849
of old-school HTTP one connection that i

00:48:01,660 --> 00:48:05,859
can do it plain text the reason i ask is

00:48:03,849 --> 00:48:07,210
that i know this shouldn't matter but

00:48:05,859 --> 00:48:10,900
the let's encrypt certificates don't

00:48:07,210 --> 00:48:13,390
work on windows XP yes yes can do that

00:48:10,900 --> 00:48:15,549
but the HTTP to stuff eh we wanted

00:48:13,390 --> 00:48:17,470
completely backward compatible with in

00:48:15,549 --> 00:48:19,599
Apache it's sort of a is it which route

00:48:17,470 --> 00:48:21,700
is it going kind of thing yes you can do

00:48:19,599 --> 00:48:25,660
that you don't have to use let's encrypt

00:48:21,700 --> 00:48:27,190
of course but also it's only the browser

00:48:25,660 --> 00:48:29,980
vendors that are making HT to be to

00:48:27,190 --> 00:48:32,410
require TLS Cole does not require it and

00:48:29,980 --> 00:48:34,869
potentially any other non browser may

00:48:32,410 --> 00:48:36,640
not require TLS frankly there's a

00:48:34,869 --> 00:48:39,010
website is TLS fast enough to all or

00:48:36,640 --> 00:48:41,109
something and the answer now is yes we

00:48:39,010 --> 00:48:43,850
should just encrypt everything so let's

00:48:41,109 --> 00:48:47,930
do so anything else

00:48:43,850 --> 00:48:50,200
yes there is no all right well thank you

00:48:47,930 --> 00:48:50,200

YouTube URL: https://www.youtube.com/watch?v=KMOSQIQVchc


