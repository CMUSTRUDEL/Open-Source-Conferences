Title: PHP UK Conference 2016 - Adam Harvey - Welcome to the new age  porting extensions to PHP 7
Publication date: 2016-03-17
Playlist: PHP UK Conference 2016
Description: 
	While PHP 7 largely managed the delicate juggling act of maintaining backward compatibility for userland developers, extension developers will find that many of the APIs they've relied on since PHP 4 have either changed significantly or been replaced entirely in PHP 7. In this talk, I'll discuss porting PHP 5 extensions to PHP 7, techniques for maintaining compatibility between both versions, and the best ways to test across a matrix of PHP versions.
Captions: 
	00:00:09,190 --> 00:00:13,480
thank you welcome to the dungeons which

00:00:12,070 --> 00:00:17,890
seems like an appropriate place to

00:00:13,480 --> 00:00:19,869
discuss PHP internals my name is Adam

00:00:17,890 --> 00:00:22,119
Harvey I work for a company called New

00:00:19,869 --> 00:00:23,320
Relic we do performance monitoring stuff

00:00:22,119 --> 00:00:24,699
there's a bunch of other stuff I'm

00:00:23,320 --> 00:00:27,279
probably supposed to say to plug it but

00:00:24,699 --> 00:00:31,059
we're awesome just go check it out and

00:00:27,279 --> 00:00:32,950
outside of that i work on PHP the PHP

00:00:31,059 --> 00:00:34,899
documentation and the PHP website a

00:00:32,950 --> 00:00:36,219
bunch of pakil extensions and pretty

00:00:34,899 --> 00:00:38,860
much anything else I've been guilted

00:00:36,219 --> 00:00:40,750
into in about the last decade so I only

00:00:38,860 --> 00:00:42,730
has talked to about porting extensions

00:00:40,750 --> 00:00:44,530
to PHP 7 which is a talk I originally

00:00:42,730 --> 00:00:45,969
called welcome to the new age and then

00:00:44,530 --> 00:00:51,789
immediately thought of a better title

00:00:45,969 --> 00:00:53,530
five minutes after i sent it in so it

00:00:51,789 --> 00:00:56,979
would help with my clicker clicked there

00:00:53,530 --> 00:00:59,140
we go so let's talk about PHP 7 it came

00:00:56,979 --> 00:01:00,460
out in December 2015 it's kind of been a

00:00:59,140 --> 00:01:04,600
quiet thing that maybe you've heard of

00:01:00,460 --> 00:01:06,220
it in user land not much changed in PHP

00:01:04,600 --> 00:01:08,590
seven if you have a well-written pretty

00:01:06,220 --> 00:01:10,570
modern PHP app it generally works more

00:01:08,590 --> 00:01:12,729
or less on PHP 7 without having to do

00:01:10,570 --> 00:01:14,170
any significant work maybe less so if

00:01:12,729 --> 00:01:18,640
you're a wordpress user but for the most

00:01:14,170 --> 00:01:21,000
part it just works for internals however

00:01:18,640 --> 00:01:23,890
there was a significant amount of change

00:01:21,000 --> 00:01:29,350
between the API exposed by the zend

00:01:23,890 --> 00:01:31,780
engine and PHP in PHP 5.6 and PHP 7 333

00:01:29,350 --> 00:01:33,700
functions were removed or Mac and macros

00:01:31,780 --> 00:01:36,190
were removed which is almost exactly

00:01:33,700 --> 00:01:40,600
twenty five percent of those that were

00:01:36,190 --> 00:01:43,150
exposed in PHP 5.6 410 new functions and

00:01:40,600 --> 00:01:45,480
macros are added so there's some new

00:01:43,150 --> 00:01:49,590
stuff there are a pis to deal with that

00:01:45,480 --> 00:01:52,930
but perhaps the bigger problem is that

00:01:49,590 --> 00:01:54,820
516 out of the 990 functions and macros

00:01:52,930 --> 00:01:58,930
that kept the same name and were and

00:01:54,820 --> 00:02:01,180
stayed in PHP 7 changed somehow and this

00:01:58,930 --> 00:02:03,100
actually excluded threadsafe noise which

00:02:01,180 --> 00:02:05,560
I'll come back to later this is like

00:02:03,100 --> 00:02:09,220
actual changes type changes parameter

00:02:05,560 --> 00:02:11,590
changes those kinds of things that's

00:02:09,220 --> 00:02:13,900
kind of a lot now a lot of these are

00:02:11,590 --> 00:02:15,370
kind of internal functions that in

00:02:13,900 --> 00:02:16,780
general if you're writing an extension

00:02:15,370 --> 00:02:18,340
you don't need to care about unless

00:02:16,780 --> 00:02:20,140
you're writing a profiler in which case

00:02:18,340 --> 00:02:21,670
your life will be like mine has been in

00:02:20,140 --> 00:02:22,430
last nine months and you probably have

00:02:21,670 --> 00:02:27,170
started drinking

00:02:22,430 --> 00:02:30,590
heavily most of them don't matter but

00:02:27,170 --> 00:02:32,420
some of them really do and you need to

00:02:30,590 --> 00:02:35,239
know what you're going to look for but

00:02:32,420 --> 00:02:37,730
first now I've thoroughly terrified you

00:02:35,239 --> 00:02:40,129
the first question is really how do i

00:02:37,730 --> 00:02:42,079
act what do I do with my PHP four or

00:02:40,129 --> 00:02:44,829
five extension how do i migrate it to

00:02:42,079 --> 00:02:47,989
PHP seven well you've got a few options

00:02:44,829 --> 00:02:50,269
you can do a one-way migration and just

00:02:47,989 --> 00:02:52,159
port your code round PHP seven and

00:02:50,269 --> 00:02:53,930
forget about PHP 5 and use all the new

00:02:52,159 --> 00:02:55,250
hotness that definitely works

00:02:53,930 --> 00:02:57,109
particularly if you've got like an

00:02:55,250 --> 00:02:59,090
internal extension that just runs your

00:02:57,109 --> 00:03:01,609
site like if that's see anything why

00:02:59,090 --> 00:03:05,720
would you do that you can run separate

00:03:01,609 --> 00:03:08,719
branches you can upgrade and basically

00:03:05,720 --> 00:03:11,870
use compatibility shims macros

00:03:08,719 --> 00:03:15,439
preprocessor magic etc to run PHP 5 and

00:03:11,870 --> 00:03:17,209
PHP 7 code I guess there's also a fourth

00:03:15,439 --> 00:03:22,069
option it's probably not a very good one

00:03:17,209 --> 00:03:23,780
but it's an option so let's just look

00:03:22,069 --> 00:03:26,209
quickly the advantages and disadvantages

00:03:23,780 --> 00:03:28,579
of each if you make a one-way migration

00:03:26,209 --> 00:03:30,319
your advantages are pretty obvious you

00:03:28,579 --> 00:03:31,699
only pay the cost one time it's

00:03:30,319 --> 00:03:34,069
relatively easy to maintain the

00:03:31,699 --> 00:03:36,199
extension later it's conceptually pretty

00:03:34,069 --> 00:03:38,030
simple because you're just the concepts

00:03:36,199 --> 00:03:39,979
don't change a lot that you just deal

00:03:38,030 --> 00:03:42,620
with how PHP 7 behaves for things like

00:03:39,979 --> 00:03:45,349
objects and resources and you will send

00:03:42,620 --> 00:03:46,579
up with nice clean code well by PHP

00:03:45,349 --> 00:03:49,389
extension standard so it's still

00:03:46,579 --> 00:03:52,310
terrible but it will be slightly better

00:03:49,389 --> 00:03:55,069
the disadvantage is a pretty obvious one

00:03:52,310 --> 00:03:57,799
you no longer support PHP 5 now as I

00:03:55,069 --> 00:03:59,569
said if you have an internal extension

00:03:57,799 --> 00:04:01,280
that literally only runs on your site

00:03:59,569 --> 00:04:03,680
and you're going to just do like a flag

00:04:01,280 --> 00:04:07,250
day migration to run your site on PHP 7

00:04:03,680 --> 00:04:08,810
that's fine not a problem job done but

00:04:07,250 --> 00:04:10,909
if you're doing pekel extensions if

00:04:08,810 --> 00:04:12,919
you're doing anything open source if you

00:04:10,909 --> 00:04:14,479
are even doing close source stuff that

00:04:12,919 --> 00:04:16,159
has to run across versions this doesn't

00:04:14,479 --> 00:04:19,039
really work it's not really going to be

00:04:16,159 --> 00:04:22,340
an option so option two is to maintain

00:04:19,039 --> 00:04:25,610
parallel branches the advantages are

00:04:22,340 --> 00:04:27,050
pretty obvious you get to support both

00:04:25,610 --> 00:04:28,460
versions and you actually get the best

00:04:27,050 --> 00:04:31,010
of both worlds in terms of you will have

00:04:28,460 --> 00:04:33,860
idiomatic code without ugly macros and

00:04:31,010 --> 00:04:39,590
and compatibility hacks

00:04:33,860 --> 00:04:42,039
works in both php5 and PHP 7 however I'm

00:04:39,590 --> 00:04:44,629
not a big fan of this one because

00:04:42,039 --> 00:04:46,159
maintenance become a pain you might have

00:04:44,629 --> 00:04:48,020
just doubled your work in terms of

00:04:46,159 --> 00:04:49,610
maintaining your code for bug fixes now

00:04:48,020 --> 00:04:51,319
if it's a small extension maybe that

00:04:49,610 --> 00:04:53,599
doesn't matter maybe you can do that

00:04:51,319 --> 00:04:55,250
anyway but if your code is actually that

00:04:53,599 --> 00:04:57,349
simple maybe you should just have it

00:04:55,250 --> 00:04:59,719
support both versions anyway because why

00:04:57,349 --> 00:05:02,000
not and of course branches may diverge

00:04:59,719 --> 00:05:04,370
over time this is one of those things

00:05:02,000 --> 00:05:06,169
that I know for Python developers when

00:05:04,370 --> 00:05:07,520
Python two or three migration has been

00:05:06,169 --> 00:05:09,590
happening this was one of the options

00:05:07,520 --> 00:05:11,419
that people sometimes went with and it

00:05:09,590 --> 00:05:13,819
just I don't know if anyone for whom it

00:05:11,419 --> 00:05:15,710
worked out it basically it was always a

00:05:13,819 --> 00:05:18,740
nightmare in the end so i would not

00:05:15,710 --> 00:05:21,409
recommend this your other option is to

00:05:18,740 --> 00:05:24,770
do things the PHP way and to hack things

00:05:21,409 --> 00:05:26,029
until they work on both versions the

00:05:24,770 --> 00:05:28,069
advantages of this are pretty obvious

00:05:26,029 --> 00:05:30,110
you support both versions your

00:05:28,069 --> 00:05:31,279
maintenance overhead is somewhat less

00:05:30,110 --> 00:05:34,279
because you only have one branch

00:05:31,279 --> 00:05:36,469
compared to two and you have happy users

00:05:34,279 --> 00:05:38,150
because it means that your installation

00:05:36,469 --> 00:05:39,589
instructions aren't well you do this if

00:05:38,150 --> 00:05:41,000
you're on this version or you do that if

00:05:39,589 --> 00:05:42,770
you're on that version you just go if

00:05:41,000 --> 00:05:47,419
it's a pekel extension you just go Pekel

00:05:42,770 --> 00:05:50,509
install this and it works hopefully the

00:05:47,419 --> 00:05:52,879
disadvantages are now you are exposed to

00:05:50,509 --> 00:05:54,289
having to support the AP is that changed

00:05:52,879 --> 00:05:55,669
remember how I said there were more than

00:05:54,289 --> 00:05:58,669
half of the api's that are in both

00:05:55,669 --> 00:06:00,979
versions have changed you get to deal

00:05:58,669 --> 00:06:02,360
with that I still actually think this is

00:06:00,979 --> 00:06:03,500
the best option if you're doing if

00:06:02,360 --> 00:06:04,699
you're maintaining an open-source

00:06:03,500 --> 00:06:07,580
extension or something that you're

00:06:04,699 --> 00:06:09,229
selling to customers but there is pain

00:06:07,580 --> 00:06:12,349
particularly when you do the initial

00:06:09,229 --> 00:06:13,879
port to support both versions so let's

00:06:12,349 --> 00:06:17,150
not pretend that it's it's an easy

00:06:13,879 --> 00:06:18,740
straightforward process so as I said I

00:06:17,150 --> 00:06:21,879
think I'd go for option 3 which is

00:06:18,740 --> 00:06:24,710
support both but your mileage may vary

00:06:21,879 --> 00:06:26,060
so for the rest of the talk I'm mostly

00:06:24,710 --> 00:06:27,889
going to talk in terms of supporting

00:06:26,060 --> 00:06:29,689
both versions but at the same time the

00:06:27,889 --> 00:06:30,740
changes i'm highlighting or also things

00:06:29,689 --> 00:06:32,449
that you need to know about if you're

00:06:30,740 --> 00:06:34,129
doing a one-way migration or separate

00:06:32,449 --> 00:06:36,199
branches these are basically i'm going

00:06:34,129 --> 00:06:38,120
to try and run through the key hotspots

00:06:36,199 --> 00:06:40,520
that i found when porting extensions to

00:06:38,120 --> 00:06:42,199
support PHP seven things that have

00:06:40,520 --> 00:06:43,220
broken things have changed things that

00:06:42,199 --> 00:06:46,010
have been removed

00:06:43,220 --> 00:06:49,520
in general i'm going to give you

00:06:46,010 --> 00:06:51,710
functions and macros that you can go and

00:06:49,520 --> 00:06:54,020
grape your code base for and then be

00:06:51,710 --> 00:06:54,950
like okay i need to look at this and a

00:06:54,020 --> 00:06:56,780
lot of cases you're going to need to

00:06:54,950 --> 00:06:58,970
look at every place that you do stuff

00:06:56,780 --> 00:06:59,960
which is unfortunate but on the bright

00:06:58,970 --> 00:07:01,490
side you're going to do a really

00:06:59,960 --> 00:07:02,570
thorough code review on your code and

00:07:01,490 --> 00:07:06,230
you're probably going to find bugs

00:07:02,570 --> 00:07:08,390
because God knows I did the best thing

00:07:06,230 --> 00:07:11,270
to start no matter what you're going to

00:07:08,390 --> 00:07:13,580
do is to take your extension and attempt

00:07:11,270 --> 00:07:15,770
to build it against PHP seven it will

00:07:13,580 --> 00:07:17,330
fail let's not sugarcoat this you will

00:07:15,770 --> 00:07:18,410
find out what the limit is on the number

00:07:17,330 --> 00:07:20,590
of warnings and errors that your

00:07:18,410 --> 00:07:24,050
compiler will spit out in one setting

00:07:20,590 --> 00:07:26,450
this is the first page of about ten

00:07:24,050 --> 00:07:28,520
pages of output when I did this with the

00:07:26,450 --> 00:07:31,760
radius extension which I recently ported

00:07:28,520 --> 00:07:34,040
support PHP seven on the bright side

00:07:31,760 --> 00:07:37,160
clang has really good Diagnostics now

00:07:34,040 --> 00:07:38,480
it's very easy to read you can see most

00:07:37,160 --> 00:07:40,340
of these and actually I think all of

00:07:38,480 --> 00:07:41,690
these are resource related so and I'll

00:07:40,340 --> 00:07:43,880
be touching on resources because they've

00:07:41,690 --> 00:07:47,870
changed quite a bit but let me assure

00:07:43,880 --> 00:07:49,880
you there was lots of other stuff too so

00:07:47,870 --> 00:07:51,740
the compiler errors guide you pretty

00:07:49,880 --> 00:07:53,450
well there are a few insidious things

00:07:51,740 --> 00:07:55,130
that will not generate compiler errors

00:07:53,450 --> 00:07:57,080
which I'm going to talk about those you

00:07:55,130 --> 00:07:58,729
just have to find by hand and that sucks

00:07:57,080 --> 00:08:00,020
but on the bright side your

00:07:58,729 --> 00:08:01,610
comprehensive one hundred percent

00:08:00,020 --> 00:08:06,710
coverage test suite will pick all of

00:08:01,610 --> 00:08:09,350
those up so let's talk about what you

00:08:06,710 --> 00:08:10,910
need to know we'll start at the what do

00:08:09,350 --> 00:08:12,919
we need to look for when migrating the

00:08:10,910 --> 00:08:16,250
extension well let's start at the bottom

00:08:12,919 --> 00:08:17,630
and work our way up DeadMau everybody

00:08:16,250 --> 00:08:20,419
knows their valves is the fundamental

00:08:17,630 --> 00:08:25,610
see structure that underpins variables

00:08:20,419 --> 00:08:26,810
in PHP in PHP 5 it looks approximately

00:08:25,610 --> 00:08:28,729
like this this is a simplified version

00:08:26,810 --> 00:08:31,580
you can tell it simplifies it just fits

00:08:28,729 --> 00:08:34,339
on the slide but it's conceptually

00:08:31,580 --> 00:08:36,530
pretty simple there is a type there is

00:08:34,339 --> 00:08:38,270
some ref counting stuff and then there's

00:08:36,530 --> 00:08:39,979
a union that basically depending on the

00:08:38,270 --> 00:08:41,930
type has the actual value of the

00:08:39,979 --> 00:08:45,830
variable it's not particularly difficult

00:08:41,930 --> 00:08:48,320
it's pretty straightforward so the good

00:08:45,830 --> 00:08:50,839
news is it still called Zed valve in PHP

00:08:48,320 --> 00:08:52,670
7 the bad news is that apart from the

00:08:50,839 --> 00:08:54,110
type field every single aspect of this

00:08:52,670 --> 00:08:58,440
is changed

00:08:54,110 --> 00:09:01,230
how does this matter well in PHP 7 what

00:08:58,440 --> 00:09:02,820
what's changed is there is a anonymous

00:09:01,230 --> 00:09:04,200
union with an anonymous tract which has

00:09:02,820 --> 00:09:05,190
a whole bunch of housekeeping

00:09:04,200 --> 00:09:07,530
information but the only one that

00:09:05,190 --> 00:09:09,330
matters is the type and the values they

00:09:07,530 --> 00:09:12,900
move to a separate Union but a union

00:09:09,330 --> 00:09:14,430
that comes in by value now I tell you

00:09:12,900 --> 00:09:16,710
this not so much because this is

00:09:14,430 --> 00:09:18,120
directly relevant generally because in

00:09:16,710 --> 00:09:20,010
general you're going to use macros to

00:09:18,120 --> 00:09:23,310
actually access the fields in said vales

00:09:20,010 --> 00:09:27,450
there's you know Zeb straw zi long etc

00:09:23,310 --> 00:09:29,460
is their vow long to set etc but you do

00:09:27,450 --> 00:09:31,110
need to know that's changed because if

00:09:29,460 --> 00:09:33,270
you do anything that pokes around in the

00:09:31,110 --> 00:09:36,630
Z value itself without using the macros

00:09:33,270 --> 00:09:38,400
your life is going to be bad your life

00:09:36,630 --> 00:09:41,400
was prolly already bad but it's going to

00:09:38,400 --> 00:09:44,070
be worse some of the types have changed

00:09:41,400 --> 00:09:45,420
underneath so besides where the values

00:09:44,070 --> 00:09:47,100
are actually stored having changed the

00:09:45,420 --> 00:09:50,190
actual types of use to represent them

00:09:47,100 --> 00:09:53,910
have also changed so integers in PHP 5

00:09:50,190 --> 00:09:55,590
were the C standard long type in PHP

00:09:53,910 --> 00:09:58,350
seven it is this thing called zend

00:09:55,590 --> 00:10:01,890
underscore long the reason for this is

00:09:58,350 --> 00:10:06,240
because windows 64-bit windows is a

00:10:01,890 --> 00:10:08,010
special snowflake 64-bit windows still

00:10:06,240 --> 00:10:09,450
has a long tight that's 32 bits

00:10:08,010 --> 00:10:12,000
basically so they can maintain

00:10:09,450 --> 00:10:14,100
compatibility with business applications

00:10:12,000 --> 00:10:16,020
that were written 30 years ago that's

00:10:14,100 --> 00:10:18,450
okay it's a reasonable choice but what

00:10:16,020 --> 00:10:21,620
it meant was that PHP on windows for the

00:10:18,450 --> 00:10:24,030
you know few of you who probably do that

00:10:21,620 --> 00:10:27,030
basically had no way of representing a

00:10:24,030 --> 00:10:29,280
64-bit integer until PHP 7 now it does

00:10:27,030 --> 00:10:31,950
have a way of representing it the

00:10:29,280 --> 00:10:33,360
problem and I'll leave I'm going to come

00:10:31,950 --> 00:10:35,610
back to this just something to think

00:10:33,360 --> 00:10:38,310
about think about Zen pass parameters

00:10:35,610 --> 00:10:42,060
where you pass in variables by address

00:10:38,310 --> 00:10:43,680
and basically using fire arcs and Zen

00:10:42,060 --> 00:10:46,470
pass parameters basically just knows

00:10:43,680 --> 00:10:48,510
what size each variable is if you're

00:10:46,470 --> 00:10:50,100
giving it a long and it thinks it's a 60

00:10:48,510 --> 00:10:53,280
it's a 32 bit long and it thinks it's a

00:10:50,100 --> 00:10:57,060
64-bit value you probably just overwrote

00:10:53,280 --> 00:10:59,670
something important another type that

00:10:57,060 --> 00:11:01,560
changed is is ball in PHP 5 is bull

00:10:59,670 --> 00:11:03,540
still use the long values just if it was

00:11:01,560 --> 00:11:06,030
non zero it's true if it's zero it's

00:11:03,540 --> 00:11:07,209
false in PHP 7 it's been separated into

00:11:06,030 --> 00:11:09,249
two different type

00:11:07,209 --> 00:11:10,709
there is now is false and is true i am

00:11:09,249 --> 00:11:13,179
told this is a performance improvement

00:11:10,709 --> 00:11:18,939
the important part is there is an api

00:11:13,179 --> 00:11:21,040
function called zend is true and the

00:11:18,939 --> 00:11:25,689
said valve pulled back row still exists

00:11:21,040 --> 00:11:26,980
to set a boolean value strings this

00:11:25,689 --> 00:11:29,649
one's a little bit more interesting so

00:11:26,980 --> 00:11:32,050
in PHP 5 there was a fairly simple

00:11:29,649 --> 00:11:34,509
struct which was a character pointer and

00:11:32,050 --> 00:11:36,610
an integer assigned integer I will note

00:11:34,509 --> 00:11:39,879
I have never found a use for negative

00:11:36,610 --> 00:11:41,559
string lengths but in PHP 7 there's a

00:11:39,879 --> 00:11:44,709
new type and this is a common thing in

00:11:41,559 --> 00:11:47,649
their vows in PHP 7 where it's not a

00:11:44,709 --> 00:11:49,300
simple see type instead it will be a

00:11:47,649 --> 00:11:51,970
pointer to some other type that is

00:11:49,300 --> 00:11:54,069
managed separately in general if you're

00:11:51,970 --> 00:11:56,350
using the macros like string length and

00:11:54,069 --> 00:11:57,670
string value this doesn't matter a ton

00:11:56,350 --> 00:12:01,749
but it is something that you still need

00:11:57,670 --> 00:12:03,309
to be aware of because the ref counting

00:12:01,749 --> 00:12:04,689
stuff has moved on to the individual

00:12:03,309 --> 00:12:06,879
types which means that you no longer

00:12:04,689 --> 00:12:09,069
have macros to add or remove to

00:12:06,879 --> 00:12:11,139
increment or decrement reference counts

00:12:09,069 --> 00:12:13,600
on an actual Zed Val you have to do it

00:12:11,139 --> 00:12:17,199
on the actual type of the Zed Val so

00:12:13,600 --> 00:12:19,059
there is a zend string address and Zen

00:12:17,199 --> 00:12:20,319
string del r f function if you want to

00:12:19,059 --> 00:12:21,339
do it on an object you have to do the

00:12:20,319 --> 00:12:23,309
same there if you want to do it on a

00:12:21,339 --> 00:12:26,199
resource you have to do the same there

00:12:23,309 --> 00:12:27,759
this is in general an improvement but it

00:12:26,199 --> 00:12:30,129
does mean that if you're doing anything

00:12:27,759 --> 00:12:33,639
in terms of manually handling reference

00:12:30,129 --> 00:12:36,189
councils on ZD else you will now have to

00:12:33,639 --> 00:12:37,869
actually migrate that to use the new

00:12:36,189 --> 00:12:41,860
functions that being provided it is

00:12:37,869 --> 00:12:43,720
quite different there is obviously a

00:12:41,860 --> 00:12:44,949
whole set of API functions to do with

00:12:43,720 --> 00:12:47,769
Zen strings if you need to deal with

00:12:44,949 --> 00:12:50,470
them directly there is the usual kind of

00:12:47,769 --> 00:12:52,299
see style fake object orientation where

00:12:50,470 --> 00:12:54,549
you prefix stuff and then you have like

00:12:52,299 --> 00:12:56,949
an alligator and a releaser and so on

00:12:54,549 --> 00:12:58,389
and so forth as I said there are

00:12:56,949 --> 00:13:00,429
reference functions and there's a couple

00:12:58,389 --> 00:13:06,429
of like just helpful macros just to grab

00:13:00,429 --> 00:13:08,589
stuff now here's now the problem is if

00:13:06,429 --> 00:13:10,660
you're dealing with Zen strings directly

00:13:08,589 --> 00:13:13,869
and you want your code to run PHP 5 and

00:13:10,660 --> 00:13:17,110
PHP 7 you're basically going to have to

00:13:13,869 --> 00:13:19,779
re-implement a bunch of this so my

00:13:17,110 --> 00:13:20,649
advice would be try not to deal with the

00:13:19,779 --> 00:13:22,149
Zen strings too

00:13:20,649 --> 00:13:25,300
if you're doing if you work on an

00:13:22,149 --> 00:13:26,649
extension that gets deeply into the zend

00:13:25,300 --> 00:13:28,089
engine you'll have no choice because

00:13:26,649 --> 00:13:30,160
everything in the zend engine is now is

00:13:28,089 --> 00:13:31,749
n stirring but if you're just dealing

00:13:30,160 --> 00:13:33,790
with variables and you're just sort of

00:13:31,749 --> 00:13:35,110
marshalling data into an outer library

00:13:33,790 --> 00:13:38,290
you can probably get away without

00:13:35,110 --> 00:13:40,389
knowing this something he will have to

00:13:38,290 --> 00:13:42,730
know though is there's about 16

00:13:40,389 --> 00:13:45,029
functions and macros in PHP that deal

00:13:42,730 --> 00:13:47,379
with basically taking a string a

00:13:45,029 --> 00:13:49,360
character pointer and turning it into a

00:13:47,379 --> 00:13:51,490
strings at valve whether it's directly

00:13:49,360 --> 00:13:54,160
or indirectly because you're adding it

00:13:51,490 --> 00:13:55,899
to a hash table all of those in PHP 5

00:13:54,160 --> 00:13:57,339
had this duplicate parameter which

00:13:55,899 --> 00:13:58,839
basically is used to indicate whether

00:13:57,339 --> 00:14:01,720
you want to duplicate the string or not

00:13:58,839 --> 00:14:04,059
in PHP 7 you don't have that parameter

00:14:01,720 --> 00:14:05,920
anymore you just always duplicates there

00:14:04,059 --> 00:14:07,540
are ways around this if you're using a

00:14:05,920 --> 00:14:11,649
low-level if you're using low-level API

00:14:07,540 --> 00:14:12,670
but generally you don't do it so if

00:14:11,649 --> 00:14:14,170
you're trying to write code that will

00:14:12,670 --> 00:14:17,499
run on both you've now got a problem

00:14:14,170 --> 00:14:20,199
because when you call return string it

00:14:17,499 --> 00:14:22,269
expects two parameters when you call or

00:14:20,199 --> 00:14:27,629
basic effects two parameters on PHP 5

00:14:22,269 --> 00:14:30,309
but it expects one parameter on PHP 7 so

00:14:27,629 --> 00:14:32,050
for some of these problems you can

00:14:30,309 --> 00:14:36,399
basically hack around it using macros

00:14:32,050 --> 00:14:38,709
now I'm going to show you some example

00:14:36,399 --> 00:14:39,610
of how you do this at the end of the

00:14:38,709 --> 00:14:41,679
talk I'm going to talk a bit about

00:14:39,610 --> 00:14:43,269
tooling and there is actually a

00:14:41,679 --> 00:14:45,040
compatibility library out there that you

00:14:43,269 --> 00:14:46,600
can get that will do a lot of this for

00:14:45,040 --> 00:14:48,189
you so you don't necessarily have to go

00:14:46,600 --> 00:14:50,139
take this code from the slides and copy

00:14:48,189 --> 00:14:52,600
payson into your project and actually do

00:14:50,139 --> 00:14:53,860
it but i do want to kind of show you how

00:14:52,600 --> 00:14:55,779
the sausage is made because the

00:14:53,860 --> 00:14:57,910
compatibility library and i think any

00:14:55,779 --> 00:14:59,740
compatibility library like it is not

00:14:57,910 --> 00:15:01,480
going to be very comprehensive there's

00:14:59,740 --> 00:15:03,549
just too many weird corner cases it's

00:15:01,480 --> 00:15:06,730
too quirky at some point you're going to

00:15:03,549 --> 00:15:08,170
have to know how this works so this is

00:15:06,730 --> 00:15:10,839
the kind of thing that you end up doing

00:15:08,170 --> 00:15:14,499
you basically end up grabbing the macro

00:15:10,839 --> 00:15:16,629
definition from PHP and turning it into

00:15:14,499 --> 00:15:18,730
a macro and possibly redefining a macro

00:15:16,629 --> 00:15:19,869
if you do this you want to do you want

00:15:18,730 --> 00:15:21,100
to make sure that your header is the

00:15:19,869 --> 00:15:22,749
last thing that's included because if

00:15:21,100 --> 00:15:25,240
you do this before you include some

00:15:22,749 --> 00:15:28,379
headers that ship with PHP you it's

00:15:25,240 --> 00:15:28,379
going to be fun don't do it

00:15:28,470 --> 00:15:32,410
objects have also changed same kind of

00:15:30,940 --> 00:15:35,040
thing instead of having an anonymous

00:15:32,410 --> 00:15:38,470
struct in the Z Val it becomes a pointer

00:15:35,040 --> 00:15:39,850
the new structure basically looks kind

00:15:38,470 --> 00:15:41,440
of like the old one it's just got the

00:15:39,850 --> 00:15:42,940
ref counting stuff again so again

00:15:41,440 --> 00:15:45,370
there's a set of functions to deal with

00:15:42,940 --> 00:15:48,370
that this is going to seem really

00:15:45,370 --> 00:15:50,380
familiar now resources in PHP 5

00:15:48,370 --> 00:15:54,250
resources were just an integer value

00:15:50,380 --> 00:15:55,930
which was an index into a linked list is

00:15:54,250 --> 00:16:00,040
a linked list I think it's a linked list

00:15:55,930 --> 00:16:01,870
of active resources in PHP 7 it becomes

00:16:00,040 --> 00:16:03,940
a first-class type with its own

00:16:01,870 --> 00:16:05,740
structure and importantly it actually

00:16:03,940 --> 00:16:07,870
now tracks the type of the reference in

00:16:05,740 --> 00:16:09,430
new version of PHP to date has the type

00:16:07,870 --> 00:16:12,310
of the reference actually being tracked

00:16:09,430 --> 00:16:17,410
until now this I am told is a source of

00:16:12,310 --> 00:16:18,850
very entertaining bugs and there are a

00:16:17,410 --> 00:16:20,710
couple of new types that you should just

00:16:18,850 --> 00:16:23,470
know exists but you probably won't use

00:16:20,710 --> 00:16:25,810
generally and anger is undef which is

00:16:23,470 --> 00:16:28,270
for new variables that undefined and is

00:16:25,810 --> 00:16:29,730
reference so because reference counting

00:16:28,270 --> 00:16:32,380
doesn't happen on the Z value anymore

00:16:29,730 --> 00:16:34,660
what happens is if you have a reference

00:16:32,380 --> 00:16:37,060
to another variable the first reference

00:16:34,660 --> 00:16:39,130
is a variable of type is referenced and

00:16:37,060 --> 00:16:41,230
there is basically a zend reference

00:16:39,130 --> 00:16:43,420
pointer which points to another's advil

00:16:41,230 --> 00:16:46,660
and that has the garbage collection

00:16:43,420 --> 00:16:48,760
information and ref count on it so nifty

00:16:46,660 --> 00:16:50,620
only really important if you're doing by

00:16:48,760 --> 00:16:53,100
reference parameter parsing or by

00:16:50,620 --> 00:16:57,580
reference return values and if so why

00:16:53,100 --> 00:16:58,690
please don't so let's look at more let's

00:16:57,580 --> 00:17:02,110
look at some other things you need to

00:16:58,690 --> 00:17:07,300
audit so I said parameter parsing all

00:17:02,110 --> 00:17:09,339
right php5 code there is a character a

00:17:07,300 --> 00:17:12,339
character string and an integer assigned

00:17:09,339 --> 00:17:16,990
int as I said PHP 7 there is a string

00:17:12,339 --> 00:17:19,329
and a size t now size t on most 64-bit

00:17:16,990 --> 00:17:21,670
platforms is going to be 64 bits int

00:17:19,329 --> 00:17:25,390
probably isn't it depends on it depends

00:17:21,670 --> 00:17:28,270
on your platform this is by far the

00:17:25,390 --> 00:17:30,160
number one cause of weird crashes that I

00:17:28,270 --> 00:17:33,460
have managed to perpetuate on myself so

00:17:30,160 --> 00:17:35,650
far when porting extensions to PHP 7 you

00:17:33,460 --> 00:17:38,200
have to go through every zend pass

00:17:35,650 --> 00:17:39,410
parameters call literally every single

00:17:38,200 --> 00:17:41,840
one because

00:17:39,410 --> 00:17:44,360
string lengths of change type and long

00:17:41,840 --> 00:17:45,980
values of change type and they also may

00:17:44,360 --> 00:17:47,570
have changed size and if you get it

00:17:45,980 --> 00:17:49,790
wrong the compiler will not complain

00:17:47,570 --> 00:17:51,290
this is not checked at compile time as

00:17:49,790 --> 00:17:53,600
empires parameters will not complain so

00:17:51,290 --> 00:17:55,100
it doesn't know what you did basically

00:17:53,600 --> 00:17:57,470
you will know this when you get seg

00:17:55,100 --> 00:17:59,240
faults and then you will go into gdb and

00:17:57,470 --> 00:18:00,590
you will look at the data and you'll be

00:17:59,240 --> 00:18:01,940
like this is a memory corruption bug

00:18:00,590 --> 00:18:03,440
this is weird and then you're going to

00:18:01,940 --> 00:18:06,260
val grain and val brain won't help you

00:18:03,440 --> 00:18:08,060
and it's really bad so do yourself a

00:18:06,260 --> 00:18:12,050
favor and just go through all of the Zen

00:18:08,060 --> 00:18:13,370
pass parameters calls up front the way

00:18:12,050 --> 00:18:15,470
that you work around this or the simple

00:18:13,370 --> 00:18:18,560
way of working around this really is too

00:18:15,470 --> 00:18:20,360
typedef basically a type that is the

00:18:18,560 --> 00:18:23,570
correct thing for string lengths on each

00:18:20,360 --> 00:18:26,210
version so for PHP 7 it's a size t the

00:18:23,570 --> 00:18:28,850
PHP 5 it's an int one slightly

00:18:26,210 --> 00:18:30,560
unfortunate thing which I really wish

00:18:28,850 --> 00:18:32,510
I'd thought of 12 months ago and we

00:18:30,560 --> 00:18:34,670
still could have added at PHP 7 there's

00:18:32,510 --> 00:18:37,730
no single macro that just says major

00:18:34,670 --> 00:18:39,950
version of PHP so you end up basically

00:18:37,730 --> 00:18:41,330
writing a lot of if statements like this

00:18:39,950 --> 00:18:43,250
where you're comparing the module API

00:18:41,330 --> 00:18:44,780
number or you do what everybody actually

00:18:43,250 --> 00:18:47,330
doesn't practice which is you have one

00:18:44,780 --> 00:18:48,890
of those and then you dash define PHP 7

00:18:47,330 --> 00:18:52,790
or something like that and then do if

00:18:48,890 --> 00:18:54,350
deaths based on that either way you end

00:18:52,790 --> 00:18:56,690
up with the correct type and you don't

00:18:54,350 --> 00:18:58,720
get weird crashes you probably do get

00:18:56,690 --> 00:19:00,980
weird crashes but not from this

00:18:58,720 --> 00:19:03,280
similarly you can do the same to define

00:19:00,980 --> 00:19:06,590
Zen long and basically just monkey patch

00:19:03,280 --> 00:19:07,730
php5 and I would definitely do that too

00:19:06,590 --> 00:19:12,860
because then long is not going to

00:19:07,730 --> 00:19:15,830
conflict with anything arrays arrays

00:19:12,860 --> 00:19:18,500
have not changed a ton but they have

00:19:15,830 --> 00:19:20,360
changed well I actually they have kind

00:19:18,500 --> 00:19:22,940
of changed a ton does air valve side of

00:19:20,360 --> 00:19:25,210
it hasn't changed the Zen hash side of

00:19:22,940 --> 00:19:25,210
it has

00:19:26,060 --> 00:19:30,890
a different adjective which I probably

00:19:28,400 --> 00:19:35,990
can't say due to the code of conduct so

00:19:30,890 --> 00:19:37,940
this is a good array keys and php5 this

00:19:35,990 --> 00:19:39,140
is actually sort of any good pop quiz I

00:19:37,940 --> 00:19:41,420
we said I wish I'd phrase this

00:19:39,140 --> 00:19:43,640
differently on the way in array keys on

00:19:41,420 --> 00:19:47,300
PHP 5 include the null terminator in

00:19:43,640 --> 00:19:51,170
their lengths I don't know why I does

00:19:47,300 --> 00:19:53,330
anybody know I I'm just looking at other

00:19:51,170 --> 00:19:56,900
people who might know this I'm genuinely

00:19:53,330 --> 00:19:59,210
curious why anyway in PHP 5 they

00:19:56,900 --> 00:20:03,320
included a null terminator in PHP 7 they

00:19:59,210 --> 00:20:06,050
do not so your key lengths are now one

00:20:03,320 --> 00:20:07,910
less than they were in PHP 5 however

00:20:06,050 --> 00:20:09,560
that's not so bad because all the Zen

00:20:07,910 --> 00:20:12,920
hash functions now actually take the Zen

00:20:09,560 --> 00:20:17,630
string pointers instead of bear bear

00:20:12,920 --> 00:20:19,700
character arrays and sizes that's good

00:20:17,630 --> 00:20:21,860
and bad because what you'll also notice

00:20:19,700 --> 00:20:23,990
is that the number of parameters that

00:20:21,860 --> 00:20:29,360
you provide zend hash update has now

00:20:23,990 --> 00:20:31,070
gone from six to three so that's good

00:20:29,360 --> 00:20:32,510
but it means it's going to be a pain to

00:20:31,070 --> 00:20:37,220
try and get compatibility across the

00:20:32,510 --> 00:20:38,750
versions there's also another aspect to

00:20:37,220 --> 00:20:42,050
this too next day i'll just go back for

00:20:38,750 --> 00:20:43,640
a sec so in PHP 5 we provide the actual

00:20:42,050 --> 00:20:45,110
size of the thing that we're stashing in

00:20:43,640 --> 00:20:46,940
the hash table which usually is just a

00:20:45,110 --> 00:20:50,300
pointer but sometimes it's an actual

00:20:46,940 --> 00:20:52,880
structure in PHP seven-week don't we

00:20:50,300 --> 00:20:55,550
just give it a pointer in this case we

00:20:52,880 --> 00:20:58,610
give it as air valve pointer the reason

00:20:55,550 --> 00:21:01,550
for this is because hash tables in PHP 7

00:20:58,610 --> 00:21:03,740
now only contains air valves they by

00:21:01,550 --> 00:21:05,420
definition do not contain void pointers

00:21:03,740 --> 00:21:09,140
they contain zero so if you're stashing

00:21:05,420 --> 00:21:11,420
arbitrary data in there which we did at

00:21:09,140 --> 00:21:14,210
my job so that was kind of painful then

00:21:11,420 --> 00:21:16,160
you now have to refactor this the good

00:21:14,210 --> 00:21:18,260
news is that Z valves now have a new is

00:21:16,160 --> 00:21:20,060
pointer type which is a nice internal

00:21:18,260 --> 00:21:23,240
type which basically the value for which

00:21:20,060 --> 00:21:25,820
in the Z val is a void pointer there is

00:21:23,240 --> 00:21:27,620
also a set of convenience api's for Zen

00:21:25,820 --> 00:21:29,900
hash which basically append underscore

00:21:27,620 --> 00:21:31,550
pointer to every call and then you put

00:21:29,900 --> 00:21:33,950
in a void pointer and you get back a

00:21:31,550 --> 00:21:35,870
void pointer so it's actually an

00:21:33,950 --> 00:21:38,210
improvement in terms of the API it's a

00:21:35,870 --> 00:21:39,049
lot easier to use but the downside is

00:21:38,210 --> 00:21:40,700
that

00:21:39,049 --> 00:21:42,470
you now if you're trying to support both

00:21:40,700 --> 00:21:45,200
versions you now have quite a lot of

00:21:42,470 --> 00:21:46,820
work ahead of you because you're going

00:21:45,200 --> 00:21:48,679
to end up writing something like this

00:21:46,820 --> 00:21:51,080
for every single hash function that you

00:21:48,679 --> 00:21:52,929
use because they've all changed you're

00:21:51,080 --> 00:21:56,509
going to wrap every hash function

00:21:52,929 --> 00:21:58,489
basically so that you can pretend that

00:21:56,509 --> 00:22:01,610
there's a single hash API that works on

00:21:58,489 --> 00:22:03,860
both versions I mean you can add the

00:22:01,610 --> 00:22:05,960
point of versions to PHP 5 pretty easily

00:22:03,860 --> 00:22:07,999
so they won't conflict with anything but

00:22:05,960 --> 00:22:09,649
it doesn't help if you're dealing with

00:22:07,999 --> 00:22:11,419
Zed vowels in hash tables and if you do

00:22:09,649 --> 00:22:14,539
anything with a raise you're dealing

00:22:11,419 --> 00:22:16,639
with Zed thousand hash tables so I've

00:22:14,539 --> 00:22:18,259
you write a bunch of wrapper code or you

00:22:16,639 --> 00:22:19,730
pull in someone else's wrapper code but

00:22:18,259 --> 00:22:23,899
either way there's going to be an extra

00:22:19,730 --> 00:22:26,210
level of indirection here there is one

00:22:23,899 --> 00:22:27,440
piece of good news though and this is

00:22:26,210 --> 00:22:29,720
mostly something you'll get if you do a

00:22:27,440 --> 00:22:31,340
one-way migration but there are there is

00:22:29,720 --> 00:22:35,659
a compatibility header that adds this to

00:22:31,340 --> 00:22:37,789
PHP 5 this is the boilerplate to is rate

00:22:35,659 --> 00:22:40,070
through an associative array in peer in

00:22:37,789 --> 00:22:41,480
a PHP 5 extension you haven't actually

00:22:40,070 --> 00:22:43,399
done anything with at this point this is

00:22:41,480 --> 00:22:47,059
literally just to the point of getting

00:22:43,399 --> 00:22:50,450
the value and the string key this is the

00:22:47,059 --> 00:22:52,039
same code in PHP 7 so there's a whole

00:22:50,450 --> 00:22:53,690
bunch of oil players no longer there you

00:22:52,039 --> 00:22:55,940
have a really nifty macro and it

00:22:53,690 --> 00:22:58,100
actually almost looks like if you squint

00:22:55,940 --> 00:23:01,009
really hard it almost looks like PHP

00:22:58,100 --> 00:23:03,379
code just with sometimes this is really

00:23:01,009 --> 00:23:05,210
good news so if you're doing a one-way

00:23:03,379 --> 00:23:06,859
migration I strongly recommend that you

00:23:05,210 --> 00:23:09,440
get rid of anything that calls the end

00:23:06,859 --> 00:23:11,809
hash internal pointer reset and replace

00:23:09,440 --> 00:23:14,600
it with this all you pull in a

00:23:11,809 --> 00:23:18,230
compatibility header and you write PHP

00:23:14,600 --> 00:23:20,720
seven style code for both php5 and PHP

00:23:18,230 --> 00:23:22,940
seven every compatibility shame I've

00:23:20,720 --> 00:23:24,019
seen has written has basically been

00:23:22,940 --> 00:23:26,299
written under the assumption that

00:23:24,019 --> 00:23:28,549
generally you will write PHP seven style

00:23:26,299 --> 00:23:29,989
C code the reason for that is twofold

00:23:28,549 --> 00:23:31,850
that the obvious one is that when you

00:23:29,989 --> 00:23:34,279
drop php5 support you don't have to do

00:23:31,850 --> 00:23:36,350
much work the other one is that the PHP

00:23:34,279 --> 00:23:40,129
7 api's just generally make more sense

00:23:36,350 --> 00:23:43,519
so you generally want to write PHP 7

00:23:40,129 --> 00:23:46,609
code where you can so i mentioned

00:23:43,519 --> 00:23:50,299
resources earlier there we had holdover

00:23:46,609 --> 00:23:51,250
things so resources are a very old PHP

00:23:50,299 --> 00:23:53,230
thing there

00:23:51,250 --> 00:23:54,970
PHP 3 they date from it might even be

00:23:53,230 --> 00:23:58,930
earlier than that I on and I'm too young

00:23:54,970 --> 00:24:03,220
for that kind of thing resources in PHP

00:23:58,930 --> 00:24:06,580
5 as I said integer indexes into into a

00:24:03,220 --> 00:24:08,200
list and all the resources just in case

00:24:06,580 --> 00:24:10,390
you've never actually used them which is

00:24:08,200 --> 00:24:13,360
probably a good thing is a basically a

00:24:10,390 --> 00:24:15,010
void pointer of your of whatever you

00:24:13,360 --> 00:24:16,300
want so whatever your context is from

00:24:15,010 --> 00:24:18,540
your c library you can just basically

00:24:16,300 --> 00:24:21,070
wrap it in a resource it's actually i

00:24:18,540 --> 00:24:22,750
know there's a lot of hate for resources

00:24:21,070 --> 00:24:24,640
on the internals mailing list I actually

00:24:22,750 --> 00:24:26,440
think they're kind of wrong I think I

00:24:24,640 --> 00:24:28,360
think resources are kind of cool but

00:24:26,440 --> 00:24:29,470
they're not very object oriented so

00:24:28,360 --> 00:24:33,460
they're not very they're not cool

00:24:29,470 --> 00:24:36,640
apparently nowadays so in PHP 5 there's

00:24:33,460 --> 00:24:39,370
a set of macros which map to basically

00:24:36,640 --> 00:24:41,860
these functions and then in PHP 7

00:24:39,370 --> 00:24:45,490
there's no macros and you're expected to

00:24:41,860 --> 00:24:47,020
use the functions directly now the basic

00:24:45,490 --> 00:24:48,910
workflow hasn't really changed you

00:24:47,020 --> 00:24:50,050
register a resource by registering a

00:24:48,910 --> 00:24:52,060
pointer that you would like to keep

00:24:50,050 --> 00:24:54,340
track of you fetch it when you want it

00:24:52,060 --> 00:24:56,670
and then you delete it when you're done

00:24:54,340 --> 00:25:00,130
with it that's pretty straightforward in

00:24:56,670 --> 00:25:01,480
PHP 7 it works the exact same way the

00:25:00,130 --> 00:25:03,070
only difference is you call stand less

00:25:01,480 --> 00:25:05,080
clothes instead of Zen less delete

00:25:03,070 --> 00:25:06,640
because the resources are ref counted

00:25:05,080 --> 00:25:09,670
themselves now as I mentioned this is

00:25:06,640 --> 00:25:11,340
now delegated down to the type the

00:25:09,670 --> 00:25:13,360
problem is that there are behavioral

00:25:11,340 --> 00:25:17,230
differences between the functions with

00:25:13,360 --> 00:25:20,680
the same name in PHP 5 and PHP 7 in PHP

00:25:17,230 --> 00:25:22,720
5 zend register resource will set the Z

00:25:20,680 --> 00:25:24,970
value give it to be the is resource type

00:25:22,720 --> 00:25:28,270
and put the index of the resource into

00:25:24,970 --> 00:25:30,010
that Z value in PHP 7 you don't give it

00:25:28,270 --> 00:25:31,780
as out valid or it just gives you a Zen

00:25:30,010 --> 00:25:33,820
resource pointer that you then put into

00:25:31,780 --> 00:25:37,780
your own that Val at a later date

00:25:33,820 --> 00:25:39,850
assuming you choose to so this makes

00:25:37,780 --> 00:25:42,550
writing a compatibility seem really hard

00:25:39,850 --> 00:25:43,990
as it turns out it's not impossible

00:25:42,550 --> 00:25:48,310
because you have this behavioral

00:25:43,990 --> 00:25:50,230
difference now you can write a set of

00:25:48,310 --> 00:25:52,510
macros that will look like the PHP 5

00:25:50,230 --> 00:25:54,340
macros and will basically mimic the same

00:25:52,510 --> 00:25:57,750
behavior I don't know how I feel about

00:25:54,340 --> 00:25:59,760
this I I mean as I just said normally

00:25:57,750 --> 00:26:03,460
compatibility layers for this are

00:25:59,760 --> 00:26:07,240
targeting PHP 7 rather than PHP 5

00:26:03,460 --> 00:26:09,070
but this is kind of easy what I did in

00:26:07,240 --> 00:26:11,260
the pack will compact library which I'll

00:26:09,070 --> 00:26:13,630
talk more about later was to write a

00:26:11,260 --> 00:26:15,760
separate API on top that basically just

00:26:13,630 --> 00:26:17,620
gives you the basic operations with much

00:26:15,760 --> 00:26:19,179
simpler types and that's probably what

00:26:17,620 --> 00:26:22,630
I'd really recommend you do unless you

00:26:19,179 --> 00:26:24,159
do a one-way cut over that's a rough

00:26:22,630 --> 00:26:26,950
version the macros you can copy paste

00:26:24,159 --> 00:26:31,960
that it may or may not build I haven't

00:26:26,950 --> 00:26:33,549
actually traitor it probably works the

00:26:31,960 --> 00:26:34,870
other fundamental type when you're

00:26:33,549 --> 00:26:37,720
writing an extension the wraps of C

00:26:34,870 --> 00:26:41,110
library is objects basic object handling

00:26:37,720 --> 00:26:43,029
mercifully is basically unchanged the

00:26:41,110 --> 00:26:44,620
one and only change i found in the one

00:26:43,029 --> 00:26:46,990
extension I've ported so far that has

00:26:44,620 --> 00:26:50,950
used objects has been that when you call

00:26:46,990 --> 00:26:53,230
Zen read property this is a rare case of

00:26:50,950 --> 00:26:55,870
the PHP seven API making less sense than

00:26:53,230 --> 00:26:57,909
the PHP 5 API you have to provide an

00:26:55,870 --> 00:27:00,669
additional copy of as a conditional

00:26:57,909 --> 00:27:02,980
pointer to a Zed Val when I first

00:27:00,669 --> 00:27:04,419
encountered this about nine months ago I

00:27:02,980 --> 00:27:06,039
actually couldn't figure out why this

00:27:04,419 --> 00:27:07,960
was the case and I looked out at the end

00:27:06,039 --> 00:27:09,250
today because I was writing my notes for

00:27:07,960 --> 00:27:10,929
this slide and I really didn't want to

00:27:09,250 --> 00:27:14,140
stand up here and be like I don't know

00:27:10,929 --> 00:27:16,600
why that's why that is the reason why

00:27:14,140 --> 00:27:18,100
that's the case is because if the object

00:27:16,600 --> 00:27:21,309
has a custom gatos i underscore

00:27:18,100 --> 00:27:23,740
underscore gets the return value that is

00:27:21,309 --> 00:27:25,210
returned because PHP seven does so much

00:27:23,740 --> 00:27:26,980
more stuff on the stack rather the heat

00:27:25,210 --> 00:27:29,230
actually doesn't have any storage space

00:27:26,980 --> 00:27:30,640
you're giving this pointer you should

00:27:29,230 --> 00:27:34,090
never use for anything you are simply

00:27:30,640 --> 00:27:35,710
giving it space to return the value you

00:27:34,090 --> 00:27:37,029
should ignore the revalue that gets put

00:27:35,710 --> 00:27:39,279
in there and you should actually use the

00:27:37,029 --> 00:27:41,710
valley that's returned because if it's a

00:27:39,279 --> 00:27:46,450
real property and you're not using a

00:27:41,710 --> 00:27:50,980
getter this never gets touched I don't

00:27:46,450 --> 00:27:54,250
know so you can write compatibility

00:27:50,980 --> 00:27:56,950
layer I yeah that one's just weird I

00:27:54,250 --> 00:27:58,570
don't get it I assume there was a really

00:27:56,950 --> 00:28:00,159
good reason that I'm not smart enough to

00:27:58,570 --> 00:28:01,510
understand so you can write a

00:28:00,159 --> 00:28:03,039
compatibility shin that adds that

00:28:01,510 --> 00:28:05,110
parameter and just doesn't do anything

00:28:03,039 --> 00:28:07,440
with them in PHP 5 because in PHP seven

00:28:05,110 --> 00:28:10,330
most of the time nothing happens to it

00:28:07,440 --> 00:28:13,770
instantly I also found a bug in the code

00:28:10,330 --> 00:28:16,750
I work on as a result of this so oops

00:28:13,770 --> 00:28:20,350
then there are less simple objects so

00:28:16,750 --> 00:28:22,720
custom objects pimped out objects where

00:28:20,350 --> 00:28:25,000
you have custom allocators because

00:28:22,720 --> 00:28:27,250
you're attaching a some other piece of

00:28:25,000 --> 00:28:31,120
data another pointer and other structure

00:28:27,250 --> 00:28:32,010
something to your object now this has

00:28:31,120 --> 00:28:35,680
gotten a little bit more interesting

00:28:32,010 --> 00:28:38,290
because as I kind of skipped over

00:28:35,680 --> 00:28:41,440
earlier these end object structure is

00:28:38,290 --> 00:28:43,420
now variable length because properties

00:28:41,440 --> 00:28:44,860
that are declared on the class are now

00:28:43,420 --> 00:28:46,510
actually stored in line with it because

00:28:44,860 --> 00:28:48,070
this improves cash locality and

00:28:46,510 --> 00:28:52,780
therefore performance this is really

00:28:48,070 --> 00:28:55,480
cool the catch is that that means that

00:28:52,780 --> 00:28:58,150
writing a custom allocator and a way of

00:28:55,480 --> 00:28:59,500
and accessing custom pointers associated

00:28:58,150 --> 00:29:01,960
with objects has just become a lot

00:28:59,500 --> 00:29:04,240
harder this is another rare case where

00:29:01,960 --> 00:29:06,340
the PHP 7 API looks way worse than the

00:29:04,240 --> 00:29:09,850
PHP 5 API and if you're trying to

00:29:06,340 --> 00:29:12,760
support both good luck so this is how

00:29:09,850 --> 00:29:15,220
you did a custom allocator in PHP 5

00:29:12,760 --> 00:29:16,690
approximately I have to reduce the size

00:29:15,220 --> 00:29:19,090
of the text on the slide slightly I

00:29:16,690 --> 00:29:21,520
apologize and I still skip like six

00:29:19,090 --> 00:29:24,310
lines of boilerplate the important thing

00:29:21,520 --> 00:29:26,620
really is that we may lock the size of

00:29:24,310 --> 00:29:29,470
that structure basically because we know

00:29:26,620 --> 00:29:31,120
how big this end object is in PHP 5 we

00:29:29,470 --> 00:29:34,420
get a handle that we return and we

00:29:31,120 --> 00:29:36,460
return it and then when we want to

00:29:34,420 --> 00:29:37,780
access the pointer to the my struct

00:29:36,460 --> 00:29:40,240
which is whatever we've gotten back from

00:29:37,780 --> 00:29:41,980
our c library it's really easy because

00:29:40,240 --> 00:29:43,510
that's what we actually stored in the

00:29:41,980 --> 00:29:44,950
zend object store so all we have to do

00:29:43,510 --> 00:29:47,110
is we just have to cast it when we get

00:29:44,950 --> 00:29:52,630
it back out and we can access our fields

00:29:47,110 --> 00:29:54,490
and life is good okay PHP 7 because the

00:29:52,630 --> 00:29:56,200
zend object is now variable length it

00:29:54,490 --> 00:29:57,760
has to be the last field in the

00:29:56,200 --> 00:30:00,430
structure if you're using a structure

00:29:57,760 --> 00:30:02,350
like this which is the normal case so

00:30:00,430 --> 00:30:04,060
we've reordered the the structure fields

00:30:02,350 --> 00:30:05,890
which normally isn't a big deal but

00:30:04,060 --> 00:30:07,930
because it's variable length and the

00:30:05,890 --> 00:30:10,600
size depends on the number of properties

00:30:07,930 --> 00:30:12,730
of the pre declared the email lock now

00:30:10,600 --> 00:30:14,380
is the size of the object plus the

00:30:12,730 --> 00:30:17,410
return value of this helper function

00:30:14,380 --> 00:30:18,880
which is not super complicated against

00:30:17,410 --> 00:30:21,310
that you no longer put anything into the

00:30:18,880 --> 00:30:23,500
object store directly PHP will take care

00:30:21,310 --> 00:30:25,990
of it however the catch is that all you

00:30:23,500 --> 00:30:26,410
give back to PHP is the pointer to the

00:30:25,990 --> 00:30:29,650
zendo

00:30:26,410 --> 00:30:32,650
object anything before that that you've

00:30:29,650 --> 00:30:35,260
put into your object structure PHP

00:30:32,650 --> 00:30:37,720
doesn't know about except for one case

00:30:35,260 --> 00:30:40,600
where PHP does know about it which I all

00:30:37,720 --> 00:30:42,250
mentioned in a second so what this means

00:30:40,600 --> 00:30:44,020
is that when you want to get your

00:30:42,250 --> 00:30:45,820
original structure back instead of just

00:30:44,020 --> 00:30:48,280
casting what you get back from object

00:30:45,820 --> 00:30:50,440
store you now have to take the pointer

00:30:48,280 --> 00:30:52,870
to this end object and do some maths you

00:30:50,440 --> 00:30:57,670
know that the pointer to my struct is

00:30:52,870 --> 00:31:01,780
size t bites before it is 48 bytes

00:30:57,670 --> 00:31:05,500
before the pointer to the zend object so

00:31:01,780 --> 00:31:07,690
you use this XT offset of macro which is

00:31:05,500 --> 00:31:09,490
a very old rapper for the C standard

00:31:07,690 --> 00:31:11,830
offset of macro and I don't know why we

00:31:09,490 --> 00:31:15,220
don't just use that I blame probably

00:31:11,830 --> 00:31:17,470
some ancient UNIX I've never heard of we

00:31:15,220 --> 00:31:19,180
have to cast the object to a character

00:31:17,470 --> 00:31:22,690
array because offset off returns the

00:31:19,180 --> 00:31:24,340
offset in bytes and then we cast the

00:31:22,690 --> 00:31:26,580
whole thing once we actually think we're

00:31:24,340 --> 00:31:30,550
at the right place back to my object

00:31:26,580 --> 00:31:32,260
remarkably this works so the good news

00:31:30,550 --> 00:31:34,780
is that you can actually do this pretty

00:31:32,260 --> 00:31:37,960
easily so the get is a bit more

00:31:34,780 --> 00:31:40,780
complicated there is one other thing

00:31:37,960 --> 00:31:42,280
though when you register the class which

00:31:40,780 --> 00:31:44,290
is the normal this is again just a cut

00:31:42,280 --> 00:31:47,080
down version the boilerplate the every

00:31:44,290 --> 00:31:49,690
extension that does this has you

00:31:47,080 --> 00:31:51,340
register the class you if you're doing

00:31:49,690 --> 00:31:52,990
custom stuff you usually serp your own

00:31:51,340 --> 00:31:55,810
custom object handlers because you

00:31:52,990 --> 00:31:58,240
probably have to you now have to set

00:31:55,810 --> 00:32:00,190
this field called offset and offset is

00:31:58,240 --> 00:32:02,500
the number of bytes into your structure

00:32:00,190 --> 00:32:03,790
that the zend object pointer is so it's

00:32:02,500 --> 00:32:05,350
the same it's basically the positive

00:32:03,790 --> 00:32:10,530
version of the same offset that we just

00:32:05,350 --> 00:32:13,750
use here's why you have to do that so

00:32:10,530 --> 00:32:15,580
when you register a custom allocator you

00:32:13,750 --> 00:32:17,260
usually register a custom d allocator

00:32:15,580 --> 00:32:18,580
and traditionally you freed the stuff

00:32:17,260 --> 00:32:20,500
that you may locked in the custom

00:32:18,580 --> 00:32:23,020
allocator because that's just a good

00:32:20,500 --> 00:32:25,060
thing to do and it avoids warnings when

00:32:23,020 --> 00:32:29,770
you exit in debug mode which is also

00:32:25,060 --> 00:32:32,110
useful PHP seven tries to be helpful

00:32:29,770 --> 00:32:34,000
after the D allocator is called you

00:32:32,110 --> 00:32:37,000
don't have to free your structure

00:32:34,000 --> 00:32:39,880
anymore that that my struct that I had

00:32:37,000 --> 00:32:40,280
because PHP will go use this offset to

00:32:39,880 --> 00:32:43,870
go

00:32:40,280 --> 00:32:47,060
backwards and call free on that value I

00:32:43,870 --> 00:32:49,340
I don't know why that was thought it was

00:32:47,060 --> 00:32:50,660
a good idea that just seems like it's

00:32:49,340 --> 00:32:51,890
being done at the wrong level but that's

00:32:50,660 --> 00:32:53,390
what's happening so you don't have to

00:32:51,890 --> 00:32:54,320
call free and your D allocator anymore

00:32:53,390 --> 00:32:56,090
but of course you're still gonna have to

00:32:54,320 --> 00:32:57,290
call free on anything that you allocated

00:32:56,090 --> 00:32:58,850
or clothes or whatever the right

00:32:57,290 --> 00:33:00,710
function is so I'm not really sure what

00:32:58,850 --> 00:33:02,990
the win was here in terms of moving that

00:33:00,710 --> 00:33:04,580
but you have to be aware of it because

00:33:02,990 --> 00:33:06,650
if you don't set this offset it will

00:33:04,580 --> 00:33:08,150
obviously be a junk value and then it

00:33:06,650 --> 00:33:09,770
will attempt to free a value that you

00:33:08,150 --> 00:33:14,630
never allocated and your manual

00:33:09,770 --> 00:33:15,800
extension will crash the last change i'm

00:33:14,630 --> 00:33:18,080
going to talk about there are more

00:33:15,800 --> 00:33:21,380
changes if you call back into PHP code

00:33:18,080 --> 00:33:24,980
using call user function god good luck

00:33:21,380 --> 00:33:26,210
that changed completely but last change

00:33:24,980 --> 00:33:28,280
i'm going to talk about is the one that

00:33:26,210 --> 00:33:30,650
renamed the talk and it's simply that if

00:33:28,280 --> 00:33:32,480
you are writing PHP 7 only extension

00:33:30,650 --> 00:33:35,120
code you never have to write any of this

00:33:32,480 --> 00:33:37,220
again it will take you at least 10 years

00:33:35,120 --> 00:33:38,540
to get out of your muscle memory at

00:33:37,220 --> 00:33:39,950
least that's my assumption because I

00:33:38,540 --> 00:33:42,110
assure you I can still type these in

00:33:39,950 --> 00:33:43,550
about half a second each but you no

00:33:42,110 --> 00:33:48,040
longer have to include them in your code

00:33:43,550 --> 00:33:50,480
if you are writing PHP 7 only code so

00:33:48,040 --> 00:33:52,520
finally I just want to talk about some

00:33:50,480 --> 00:33:54,020
references and some tools that I've

00:33:52,520 --> 00:33:56,480
personally found useful when I've been

00:33:54,020 --> 00:33:57,620
migrating extensions I've worked on the

00:33:56,480 --> 00:34:01,280
project migrate in the New Relic

00:33:57,620 --> 00:34:04,340
extension which is kind of the basically

00:34:01,280 --> 00:34:07,700
migrating a profiler to run on PHP 5 and

00:34:04,340 --> 00:34:09,530
PHP 7 that was interesting and I've done

00:34:07,700 --> 00:34:12,340
some simple petal extensions as well and

00:34:09,530 --> 00:34:15,890
these are the resources that I've used

00:34:12,340 --> 00:34:18,860
the first and most useful one is this

00:34:15,890 --> 00:34:20,570
page on the PHP wiki which is PHP ng

00:34:18,860 --> 00:34:22,970
upgrading if you google that it'll be

00:34:20,570 --> 00:34:25,909
the first thing that comes up this

00:34:22,970 --> 00:34:28,850
breaks down in somewhat more detail than

00:34:25,909 --> 00:34:29,990
I have in some cases most of the things

00:34:28,850 --> 00:34:31,490
that have changed there are a few things

00:34:29,990 --> 00:34:33,200
that doesn't cover it doesn't cover much

00:34:31,490 --> 00:34:34,280
of the object stuff which is kind of

00:34:33,200 --> 00:34:37,429
unfortunate if you're writing an

00:34:34,280 --> 00:34:39,830
object-oriented extension but it covers

00:34:37,429 --> 00:34:43,010
almost everything else and this is

00:34:39,830 --> 00:34:45,169
really good it is probably probably

00:34:43,010 --> 00:34:46,340
stuff that should be in the manual and

00:34:45,169 --> 00:34:48,080
in my copious amounts of spare time

00:34:46,340 --> 00:34:50,030
maybe I'll try and integrate it at some

00:34:48,080 --> 00:34:52,190
point but it's a really good resource

00:34:50,030 --> 00:34:52,520
and it gives you like before and after

00:34:52,190 --> 00:34:54,890
four

00:34:52,520 --> 00:34:59,450
lot of different use cases it's also a

00:34:54,890 --> 00:35:01,040
massive page so like take some time if

00:34:59,450 --> 00:35:02,840
you need to check this probably isn't

00:35:01,040 --> 00:35:06,170
super readable at the back I apologize

00:35:02,840 --> 00:35:08,030
but the important thing is the link LexA

00:35:06,170 --> 00:35:12,290
dot php.net for people who haven't seen

00:35:08,030 --> 00:35:14,660
it basically is just a code like so that

00:35:12,290 --> 00:35:17,390
looks at every branch of PHP or all the

00:35:14,660 --> 00:35:19,250
recent ones anyway and you can use to

00:35:17,390 --> 00:35:20,900
compare definitions of symbols across

00:35:19,250 --> 00:35:23,360
versions so if you want to know what Zen

00:35:20,900 --> 00:35:25,190
register resource look like in PHP 5.6

00:35:23,360 --> 00:35:26,510
and PHP 7 you can do it on one screen

00:35:25,190 --> 00:35:28,700
and will tell you everything that

00:35:26,510 --> 00:35:30,200
changed this is awesome and a huge

00:35:28,700 --> 00:35:31,940
resource particularly when you getting

00:35:30,200 --> 00:35:33,740
weird compiler errors and you just you

00:35:31,940 --> 00:35:37,460
just want to know what parameter changed

00:35:33,740 --> 00:35:39,140
this will tell you something else I

00:35:37,460 --> 00:35:41,090
found really useful is literally just

00:35:39,140 --> 00:35:42,830
dipping an extension that looks kind of

00:35:41,090 --> 00:35:43,970
like the one that I'm trying to port you

00:35:42,830 --> 00:35:46,400
know if you're doing an extension that

00:35:43,970 --> 00:35:48,380
is say object-oriented xtg MP is a

00:35:46,400 --> 00:35:50,930
really good choice it is quite simple it

00:35:48,380 --> 00:35:52,490
was rewritten in PHP 5.6 by some by

00:35:50,930 --> 00:35:55,250
andrea falls who actually knows what

00:35:52,490 --> 00:35:57,650
she's doing and then was rewritten again

00:35:55,250 --> 00:35:59,780
for PHP 72 ford porter so you can just

00:35:57,650 --> 00:36:01,610
do a git diff on this you know check out

00:35:59,780 --> 00:36:03,470
PHP source do a git diff and it will

00:36:01,610 --> 00:36:05,210
basically tell you every single thing

00:36:03,470 --> 00:36:07,160
you need to do to port an

00:36:05,210 --> 00:36:09,710
object-oriented see extension you will

00:36:07,160 --> 00:36:12,260
learn very rapidly by osmosis what has

00:36:09,710 --> 00:36:14,030
to be done and similarly if you want to

00:36:12,260 --> 00:36:15,710
port a resource-based extension there's

00:36:14,030 --> 00:36:17,090
you know about 20 of those in the PHP

00:36:15,710 --> 00:36:18,920
sauce pick one that doesn't have many

00:36:17,090 --> 00:36:20,780
source files and just just look at that

00:36:18,920 --> 00:36:23,810
or pick a pickle extension and look at

00:36:20,780 --> 00:36:27,290
that the final thing I want to talk

00:36:23,810 --> 00:36:29,990
about is pakled comp at which is a set

00:36:27,290 --> 00:36:33,760
of headers written by Francois Louw pet

00:36:29,990 --> 00:36:36,680
I apologize Francois Francois or Petra

00:36:33,760 --> 00:36:39,470
who has written a set of headers called

00:36:36,680 --> 00:36:40,820
pekel comp at that attempt to smooth

00:36:39,470 --> 00:36:43,880
over some of the differences where

00:36:40,820 --> 00:36:46,580
possible at backports PHP 7 api's to PHP

00:36:43,880 --> 00:36:49,370
5 we're not possible it usually provides

00:36:46,580 --> 00:36:51,860
compatibility API it's not super

00:36:49,370 --> 00:36:53,840
comprehensive at this stage it does it

00:36:51,860 --> 00:36:55,970
does basic stuff it does strings it does

00:36:53,840 --> 00:36:58,370
at least some of the hash functions it

00:36:55,970 --> 00:36:59,780
does resources as of about tuesday

00:36:58,370 --> 00:37:03,800
because that's when francois r accepted

00:36:59,780 --> 00:37:06,360
my pull request it doesn't do objects

00:37:03,800 --> 00:37:08,340
yet and i suspect francois would love

00:37:06,360 --> 00:37:11,310
do that if I pursue me I don't get to it

00:37:08,340 --> 00:37:12,660
at some point it's not perfect and like

00:37:11,310 --> 00:37:14,010
I said you kind of still need to know

00:37:12,660 --> 00:37:15,300
what's happening underneath because it

00:37:14,010 --> 00:37:17,370
won't be perfect there'll be stuff that

00:37:15,300 --> 00:37:18,890
you'll still have to know about and

00:37:17,370 --> 00:37:21,600
stuff that you'll still have to change

00:37:18,890 --> 00:37:23,880
but it does give you an awesome head

00:37:21,600 --> 00:37:25,770
start in terms of doing the work so for

00:37:23,880 --> 00:37:27,960
the pack or radius extension which I

00:37:25,770 --> 00:37:30,630
just forward ported earlier this week to

00:37:27,960 --> 00:37:32,790
support PHP 5 and PHP 7 I just pulled

00:37:30,630 --> 00:37:34,470
this in as a get sub module and that you

00:37:32,790 --> 00:37:36,390
know it's get sub modules are kind of

00:37:34,470 --> 00:37:38,520
hockey and kind of evil but honestly it

00:37:36,390 --> 00:37:40,200
works so I'm probably going to keep

00:37:38,520 --> 00:37:41,670
doing that because it's actually a

00:37:40,200 --> 00:37:43,860
pretty good it actually is a pretty

00:37:41,670 --> 00:37:45,810
smooth approach you can just include the

00:37:43,860 --> 00:37:47,940
headers it includes its other sub

00:37:45,810 --> 00:37:49,410
headers and then in a lot of cases half

00:37:47,940 --> 00:37:53,700
of your compiler warnings just go away

00:37:49,410 --> 00:37:56,460
straight away it's pretty cool the other

00:37:53,700 --> 00:37:59,490
thing I really just want to say is don't

00:37:56,460 --> 00:38:01,830
be afraid I mean this is a potentially

00:37:59,490 --> 00:38:03,840
slightly scary talk you know I've talked

00:38:01,830 --> 00:38:05,610
about the fact that a quarter of stuff

00:38:03,840 --> 00:38:07,230
is gone a quarter of stuff got added

00:38:05,610 --> 00:38:11,040
half of the rest of the stuff changed

00:38:07,230 --> 00:38:12,660
completely oh god it looks scary when

00:38:11,040 --> 00:38:14,040
you first see how much has changed and

00:38:12,660 --> 00:38:16,170
when you first see how many compiler

00:38:14,040 --> 00:38:17,760
errors actually appear on your in your

00:38:16,170 --> 00:38:20,090
console when you're trying to figure out

00:38:17,760 --> 00:38:22,560
whether your extension will build or not

00:38:20,090 --> 00:38:24,420
but it's not that bad because nothing

00:38:22,560 --> 00:38:26,040
fundamental has changed an object is

00:38:24,420 --> 00:38:27,870
still an object a resource is still a

00:38:26,040 --> 00:38:31,590
resource as add value is still a

00:38:27,870 --> 00:38:34,440
variable the Zen hash API still doesn't

00:38:31,590 --> 00:38:36,600
make sense everything is still where it

00:38:34,440 --> 00:38:38,430
was it's just little cosmetic changes

00:38:36,600 --> 00:38:40,860
which you can work over pretty easily I

00:38:38,430 --> 00:38:43,170
mean look I i ported the radius

00:38:40,860 --> 00:38:44,430
extension in a pretty lazy afternoon and

00:38:43,170 --> 00:38:46,020
let me assure you that nine out of ten

00:38:44,430 --> 00:38:48,600
PHP contributors agree that I write

00:38:46,020 --> 00:38:51,120
terrible code and I submit FPSes fears

00:38:48,600 --> 00:38:52,950
as evidence of that if you are

00:38:51,120 --> 00:38:54,810
methodical and careful and you just look

00:38:52,950 --> 00:38:56,040
at the compiler warnings and you look at

00:38:54,810 --> 00:38:57,840
where you're calling Zen pass parameters

00:38:56,040 --> 00:39:00,600
and you look at how your type handling

00:38:57,840 --> 00:39:02,970
is being done you will do it no problem

00:39:00,600 --> 00:39:05,580
annual Moving's in the new world and you

00:39:02,970 --> 00:39:08,970
will support both php5 and PHP seven

00:39:05,580 --> 00:39:11,100
very very comfortably and on that

00:39:08,970 --> 00:39:12,030
hopefully inspirational note I thank you

00:39:11,100 --> 00:39:14,460
very much for coming and welcome

00:39:12,030 --> 00:39:16,140
questions heckling and people telling me

00:39:14,460 --> 00:39:16,510
I'm wrong thank you very much Adam those

00:39:16,140 --> 00:39:25,510
x

00:39:16,510 --> 00:39:27,420
thank you questions definitely was a

00:39:25,510 --> 00:39:31,000
rush of optimism towards the end Ont

00:39:27,420 --> 00:39:32,680
excellent for people who don't have the

00:39:31,000 --> 00:39:35,500
baggage of having written extensions

00:39:32,680 --> 00:39:37,780
into php5 do you think these changes in

00:39:35,500 --> 00:39:39,370
seven make this more approachable

00:39:37,780 --> 00:39:42,520
historically it's been a bit of a

00:39:39,370 --> 00:39:43,810
mountain to climb yeah I mean it's a

00:39:42,520 --> 00:39:45,930
really good point i mean if you compare

00:39:43,810 --> 00:39:47,890
your average PHP for extension and php5

00:39:45,930 --> 00:39:49,150
extension there was definitely some

00:39:47,890 --> 00:39:50,980
additional complexity there which

00:39:49,150 --> 00:39:54,970
generally wasn't helpful as an extension

00:39:50,980 --> 00:39:56,890
extension author I think it's a mixed

00:39:54,970 --> 00:39:58,240
bag I think the the hashing changes are

00:39:56,890 --> 00:40:00,010
much they just joked about then the hash

00:39:58,240 --> 00:40:03,010
table changes are great I actually think

00:40:00,010 --> 00:40:04,960
they make a lot more sense in PHP 7 the

00:40:03,010 --> 00:40:07,150
way resources an object the right

00:40:04,960 --> 00:40:11,530
resources a handle is great too it's a

00:40:07,150 --> 00:40:13,390
lot cleaner I think in general good PHP

00:40:11,530 --> 00:40:14,740
7 extension code and we don't quite know

00:40:13,390 --> 00:40:16,360
that's really going to look like yet

00:40:14,740 --> 00:40:18,940
because everything that exists is just a

00:40:16,360 --> 00:40:21,190
forward port of PHP 5 code I think good

00:40:18,940 --> 00:40:23,170
PHP 7 extension code will be just a

00:40:21,190 --> 00:40:25,180
little bit clearer than PHP 5 extension

00:40:23,170 --> 00:40:26,980
code but it's never going to be great

00:40:25,180 --> 00:40:28,630
there's just too much baggage in the API

00:40:26,980 --> 00:40:31,630
there's too many weird things happening

00:40:28,630 --> 00:40:33,130
in the in the engine and so yeah I think

00:40:31,630 --> 00:40:34,000
it will be a little bit simpler but I

00:40:33,130 --> 00:40:38,500
don't know if it's going to be a lot

00:40:34,000 --> 00:40:40,870
simpler which is unfortunate so you've

00:40:38,500 --> 00:40:43,690
still got a day job you yeah apparently

00:40:40,870 --> 00:40:46,360
I do um this may be an obvious question

00:40:43,690 --> 00:40:48,880
some but why does strings need ref

00:40:46,360 --> 00:40:50,500
counting well it's basically because ref

00:40:48,880 --> 00:40:52,150
counting moved off the Z valid it's not

00:40:50,500 --> 00:40:55,900
so much that the strings themselves need

00:40:52,150 --> 00:40:57,760
ref counting it's that for fork for

00:40:55,900 --> 00:40:59,980
simple types now the way references are

00:40:57,760 --> 00:41:01,870
done is just you have actual pointers to

00:40:59,980 --> 00:41:03,460
the original said valve and the Zen

00:41:01,870 --> 00:41:06,160
reference structure does the does the

00:41:03,460 --> 00:41:07,480
ref counting on that for things like for

00:41:06,160 --> 00:41:09,100
more complicated types where it's not

00:41:07,480 --> 00:41:11,200
just a simple value type in the in the

00:41:09,100 --> 00:41:13,630
strut the decision was made to move the

00:41:11,200 --> 00:41:15,610
ref counting to to the actual worm

00:41:13,630 --> 00:41:16,870
struck to the internal struct I believe

00:41:15,610 --> 00:41:19,480
basically cuz it made the garbage

00:41:16,870 --> 00:41:23,680
collector considerably easier to run and

00:41:19,480 --> 00:41:25,780
faster so it's not I said it's not that

00:41:23,680 --> 00:41:27,580
strings themselves need got need ref

00:41:25,780 --> 00:41:29,170
counting it's just the any complex type

00:41:27,580 --> 00:41:30,130
needs ref counting and strings are a

00:41:29,170 --> 00:41:31,359
complex tight because

00:41:30,130 --> 00:41:33,160
you've gotta track the length as well as

00:41:31,359 --> 00:41:38,289
the as well as the actual character

00:41:33,160 --> 00:41:40,420
array thank you in general if there's

00:41:38,289 --> 00:41:42,309
weird stuff in PHP 7 it's almost

00:41:40,420 --> 00:41:45,130
entirely going to be because it was

00:41:42,309 --> 00:41:46,869
quicker like that's going to be the sole

00:41:45,130 --> 00:41:48,460
motivation if there's we like the read

00:41:46,869 --> 00:41:49,960
property thing the reason that's there

00:41:48,460 --> 00:41:54,369
is because it's quicker it doesn't make

00:41:49,960 --> 00:41:56,230
any sense but it's quicker just just an

00:41:54,369 --> 00:41:57,730
assumption check ready but I assume you

00:41:56,230 --> 00:41:59,950
don't need any ref counts or simple

00:41:57,730 --> 00:42:01,630
values because you're not using any

00:41:59,950 --> 00:42:03,849
pointers you can just destroy them

00:42:01,630 --> 00:42:05,529
straight away yeah that that's smaller

00:42:03,849 --> 00:42:07,589
than the pointers so you don't have to

00:42:05,529 --> 00:42:10,029
actually allocate in a member meter them

00:42:07,589 --> 00:42:12,220
exactly so in in the zend engine

00:42:10,029 --> 00:42:14,259
internally in PHP 7 now pretty much all

00:42:12,220 --> 00:42:15,490
the dead Val handling at least creation

00:42:14,259 --> 00:42:17,200
and destruction and so on is actually

00:42:15,490 --> 00:42:19,480
done is actually done on the stack

00:42:17,200 --> 00:42:21,549
rather than on the heap so previously

00:42:19,480 --> 00:42:24,009
you would now you know email as it Val

00:42:21,549 --> 00:42:25,599
or call like a lock-in it said vowel or

00:42:24,009 --> 00:42:29,140
something like that to actually allocate

00:42:25,599 --> 00:42:30,880
it for Z values and simple types in

00:42:29,140 --> 00:42:32,380
general now this just in the internal it

00:42:30,880 --> 00:42:33,700
just happens on the stack so that's why

00:42:32,380 --> 00:42:35,559
there's kind of no ref counting as you

00:42:33,700 --> 00:42:37,630
said it's just smaller and easier and so

00:42:35,559 --> 00:42:39,250
basically just got to have some lovely

00:42:37,630 --> 00:42:42,640
switch statements about these

00:42:39,250 --> 00:42:44,380
yeah and that's fine so increases the

00:42:42,640 --> 00:42:46,150
one the one good thing is I mean I think

00:42:44,380 --> 00:42:48,039
honestly if you're not doing stuff with

00:42:46,150 --> 00:42:51,339
references and by references i mean like

00:42:48,039 --> 00:42:54,430
PHP level references and you're not

00:42:51,339 --> 00:42:56,950
doing really weird like internal engine

00:42:54,430 --> 00:42:58,630
kind of hackery level stuff most of the

00:42:56,950 --> 00:43:00,849
api's for variable handling are actually

00:42:58,630 --> 00:43:03,039
still the same so they still take Z Val

00:43:00,849 --> 00:43:05,859
pointers they still returns there Val

00:43:03,039 --> 00:43:07,390
pointers as appropriate so you kind of

00:43:05,859 --> 00:43:08,710
if you've got a simple enough extension

00:43:07,390 --> 00:43:10,180
you're actually pretty insulated from

00:43:08,710 --> 00:43:11,170
that like you kind of still need to know

00:43:10,180 --> 00:43:12,579
in the back of your head that it's

00:43:11,170 --> 00:43:14,619
changed but you don't really need to do

00:43:12,579 --> 00:43:16,210
much in your actual code like your basic

00:43:14,619 --> 00:43:20,849
assumptions don't really change about

00:43:16,210 --> 00:43:20,849
how their veils work that's cool thanks

00:43:25,420 --> 00:43:29,210
alright thank you very much once again

00:43:27,650 --> 00:43:38,289
for coming and thanks your attention

00:43:29,210 --> 00:43:38,289

YouTube URL: https://www.youtube.com/watch?v=TaDhhaN2hh0


