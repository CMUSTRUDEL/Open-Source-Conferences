Title: PHP UK Conference 2016 - Tess Barnes - Version Control tips, tricks and good citizenship
Publication date: 2016-03-16
Playlist: PHP UK Conference 2016
Description: 
	Are you nervous of version control even if you don't admit it? Have things got harder since your team expanded? Don’t panic! you’re not on your own. I've put together a run down of some of my tricks, tips and ‘good citizen’ techniques to avoid the worst kinds of conflicts and deal with the remaining ones as efficiently as possible. Join me on a journey through some of the causes of version control pain after which we will visit some social and technical solutions. I'll lead you via branching policies, basic conflict resolution, to more tricky conflict management. We will spend time with some of the lesser known features of version control and command line hacks to stay in charge of multiple branches. As a bonus we will discover how version control can be integrated with other tools having many positive knock on effects for your team and wider business: How forcing commit message formats and automating your change log can help your release process or apps to streamline code reviews can avoid some unnecessary context switching. Triggered notification of interested parties helps keep everyone in the loop especially for breaking changes.
Captions: 
	00:00:04,700 --> 00:00:12,950
hello thank you very much for choosing

00:00:07,830 --> 00:00:17,430
my talk I'm here today to talk about

00:00:12,950 --> 00:00:22,050
version control tips tricks and good

00:00:17,430 --> 00:00:27,150
citizenship and this is a new clicker so

00:00:22,050 --> 00:00:30,150
I hope it all goes well so the first

00:00:27,150 --> 00:00:33,570
thing to say is I wouldn't be here

00:00:30,150 --> 00:00:36,390
talking and giving this talk to my

00:00:33,570 --> 00:00:37,980
community without the help of some very

00:00:36,390 --> 00:00:40,920
special people one of whom is sat in

00:00:37,980 --> 00:00:43,890
front row thank you very much Jenny

00:00:40,920 --> 00:00:46,829
because without her giving me a good

00:00:43,890 --> 00:00:49,020
stern kick in the right place I wouldn't

00:00:46,829 --> 00:00:52,860
actually get motivated and and get here

00:00:49,020 --> 00:00:55,530
so thanks very much for that for those

00:00:52,860 --> 00:00:58,200
of you who don't know me and I'm sure

00:00:55,530 --> 00:01:02,070
that's most of you my name is Tess

00:00:58,200 --> 00:01:04,800
Barnes I am a multi-language developer

00:01:02,070 --> 00:01:08,490
so I spent quite a lot of my day writing

00:01:04,800 --> 00:01:11,280
PHP but I also write C sharp delfy

00:01:08,490 --> 00:01:15,990
Python and occasionally JavaScript and

00:01:11,280 --> 00:01:18,690
CSS for my sins I'm an agile advocate

00:01:15,990 --> 00:01:20,880
which basically means that I like scrum

00:01:18,690 --> 00:01:26,640
I like Kanban and I won't shut up about

00:01:20,880 --> 00:01:29,009
it I work for fast toast and they have a

00:01:26,640 --> 00:01:31,080
really good PHP guild of which I'm an

00:01:29,009 --> 00:01:33,569
active member and that brings some

00:01:31,080 --> 00:01:40,429
really good excellent cultural change in

00:01:33,569 --> 00:01:44,190
our PHP use this is my first big public

00:01:40,429 --> 00:01:46,340
conference speech so I'm going to need

00:01:44,190 --> 00:01:49,649
some feedback whether it's good or bad

00:01:46,340 --> 00:01:51,599
it's really really helpful to develop as

00:01:49,649 --> 00:01:54,090
a speaker and to make my talks better

00:01:51,599 --> 00:01:57,989
for you and if you want to hey call me

00:01:54,090 --> 00:02:00,869
on Twitter you can use the the heckle

00:01:57,989 --> 00:02:04,610
track that's my handle there I promise

00:02:00,869 --> 00:02:04,610
I'm not going to reply in the next hour

00:02:04,940 --> 00:02:13,389
nope so that's a complete fail

00:02:09,069 --> 00:02:16,719
stop that again okay so this talk I'm

00:02:13,389 --> 00:02:18,790
giving I came up with the idea of it

00:02:16,719 --> 00:02:21,310
because I've worked over the years with

00:02:18,790 --> 00:02:24,609
lots of people that hate version control

00:02:21,310 --> 00:02:30,219
and it is the bane of their working life

00:02:24,609 --> 00:02:32,739
I would rather as a developer be

00:02:30,219 --> 00:02:34,930
spending my time writing great code to

00:02:32,739 --> 00:02:37,359
solve complex problems that makes the

00:02:34,930 --> 00:02:39,669
world a better place and I am sure that

00:02:37,359 --> 00:02:42,129
everyone in this room is in it for the

00:02:39,669 --> 00:02:45,040
same goal I don't want to spending my

00:02:42,129 --> 00:02:47,049
time complaining or hearing other

00:02:45,040 --> 00:02:49,780
people's complain about version control

00:02:47,049 --> 00:02:52,060
and why it's a pain in the backside so

00:02:49,780 --> 00:02:55,629
the first thing that I want to do is a

00:02:52,060 --> 00:02:59,109
bit of a refresher for everyone which is

00:02:55,629 --> 00:03:03,069
dealing the text conflicts dealing with

00:02:59,109 --> 00:03:05,099
tree conflicts avoiding conflicts where

00:03:03,069 --> 00:03:07,629
possible and sometimes that's not a

00:03:05,099 --> 00:03:10,659
technological solution sometimes that's

00:03:07,629 --> 00:03:13,540
the social solution and how to deal with

00:03:10,659 --> 00:03:17,280
some of the more complex code bases that

00:03:13,540 --> 00:03:17,280
you can end up coming into contact with

00:03:17,609 --> 00:03:22,569
bearing in mind that I'm not sure how

00:03:20,409 --> 00:03:25,060
the time is going to go we'll see how

00:03:22,569 --> 00:03:27,069
many of these extra bonus levels will

00:03:25,060 --> 00:03:29,799
get through so once we've done the basic

00:03:27,069 --> 00:03:33,009
stuff we'll look at keeping it secret

00:03:29,799 --> 00:03:35,680
keeping it safe so how to actually look

00:03:33,009 --> 00:03:37,389
down your version control system so only

00:03:35,680 --> 00:03:40,780
the right people can see it at the right

00:03:37,389 --> 00:03:44,069
time and interact with it at the correct

00:03:40,780 --> 00:03:48,220
level that you want and looking at

00:03:44,069 --> 00:03:51,009
elaboration and review clean code and

00:03:48,220 --> 00:03:52,509
keeping standards and then if we're

00:03:51,009 --> 00:03:55,419
really lucky and we haven't run out of

00:03:52,509 --> 00:03:57,639
time we'll look at doing changelog the

00:03:55,419 --> 00:04:00,219
lazy keeping everyone in the loop and

00:03:57,639 --> 00:04:03,549
how version control can trigger other

00:04:00,219 --> 00:04:06,519
automated processes in your company

00:04:03,549 --> 00:04:08,799
depending on what you do so we start

00:04:06,519 --> 00:04:10,900
first with minor conflicts they're

00:04:08,799 --> 00:04:14,229
straightforward it's not rocket science

00:04:10,900 --> 00:04:16,979
they're not scary so this is the kind of

00:04:14,229 --> 00:04:20,229
read I'm used to seeing in my ledger

00:04:16,979 --> 00:04:23,220
this is a basic tortoise svn view I'm

00:04:20,229 --> 00:04:26,230
most experienced with svn

00:04:23,220 --> 00:04:28,210
it's very simple they've done some

00:04:26,230 --> 00:04:29,860
changes you've done some changes you

00:04:28,210 --> 00:04:32,500
might want to include your changes after

00:04:29,860 --> 00:04:37,150
their changes and you merge it you say

00:04:32,500 --> 00:04:39,250
it's resolved all done so as long as you

00:04:37,150 --> 00:04:43,120
know your tools whether you're using svn

00:04:39,250 --> 00:04:45,040
or get or mercurial you'll have a

00:04:43,120 --> 00:04:47,350
command line you'll have some kind of a

00:04:45,040 --> 00:04:50,110
GUI interface as long as you know those

00:04:47,350 --> 00:04:53,260
then it's very straightforward if you

00:04:50,110 --> 00:04:55,330
know your code base then it makes it

00:04:53,260 --> 00:04:58,240
very easy you know what code changes are

00:04:55,330 --> 00:05:00,940
going on you recognize how it was before

00:04:58,240 --> 00:05:02,440
it was changes and when all else fails

00:05:00,940 --> 00:05:04,600
you can always talk to your colleagues I

00:05:02,440 --> 00:05:06,520
know this is a radical idea but you know

00:05:04,600 --> 00:05:10,510
there's coffee machines out there you

00:05:06,520 --> 00:05:13,900
can have a chat so the next slightly

00:05:10,510 --> 00:05:16,480
more complex solution and what's like

00:05:13,900 --> 00:05:20,350
the more complex situation you might

00:05:16,480 --> 00:05:23,080
look at is also text conflict I call

00:05:20,350 --> 00:05:26,680
them interleaving changes and this is

00:05:23,080 --> 00:05:28,870
where your diff tool again this is

00:05:26,680 --> 00:05:31,360
tortoise svn but many diff tools work

00:05:28,870 --> 00:05:34,120
the same way and it will try and help

00:05:31,360 --> 00:05:36,640
you out and it will go I know what that

00:05:34,120 --> 00:05:39,960
is that's an opening curly brace I'm

00:05:36,640 --> 00:05:43,030
going to hang on to that for dear life

00:05:39,960 --> 00:05:46,870
unfortunately that means that it can't

00:05:43,030 --> 00:05:49,840
distinguish between this is not a dummy

00:05:46,870 --> 00:05:51,820
and this is also not a dummy because to

00:05:49,840 --> 00:05:54,040
developers have been replacing the same

00:05:51,820 --> 00:05:57,250
old method probably four completely

00:05:54,040 --> 00:06:00,370
different reasons or for completely

00:05:57,250 --> 00:06:03,040
different solutions and you're not quite

00:06:00,370 --> 00:06:06,010
sure which one should go you can't just

00:06:03,040 --> 00:06:11,050
say take their code and apply it after

00:06:06,010 --> 00:06:12,910
mine it's not quite that simple so we've

00:06:11,050 --> 00:06:15,750
said that two developers work on the

00:06:12,910 --> 00:06:18,820
same file at the same time and both

00:06:15,750 --> 00:06:20,320
replacements a method this is blaine

00:06:18,820 --> 00:06:22,180
these are why I put these in quotes

00:06:20,320 --> 00:06:24,460
because these are these are blame things

00:06:22,180 --> 00:06:25,810
badly said your work to developers

00:06:24,460 --> 00:06:29,260
shouldn't be working on the same file at

00:06:25,810 --> 00:06:31,750
the same time yeah okay there's no

00:06:29,260 --> 00:06:34,930
design so people have been going at it

00:06:31,750 --> 00:06:35,590
their own sweet way and there's a lack

00:06:34,930 --> 00:06:38,890
of

00:06:35,590 --> 00:06:43,090
tation there again go get coffee really

00:06:38,890 --> 00:06:45,460
helps so the first question is which

00:06:43,090 --> 00:06:48,760
signature do you see you've tried to do

00:06:45,460 --> 00:06:51,880
mine after this but you've still got

00:06:48,760 --> 00:06:53,970
this dodgy line at the top to sort out

00:06:51,880 --> 00:06:56,380
so it's worth taking a step back and

00:06:53,970 --> 00:06:59,260
it's worth saying ok we'll take their

00:06:56,380 --> 00:07:01,990
changes that's absolutely fine and then

00:06:59,260 --> 00:07:04,720
to get my changes in I'll use an

00:07:01,990 --> 00:07:09,520
underused feature of a diff tool which

00:07:04,720 --> 00:07:11,350
is enabling edit and I will then take my

00:07:09,520 --> 00:07:15,220
changes out and I'll just copy and paste

00:07:11,350 --> 00:07:18,820
them into the merged box I'll click Save

00:07:15,220 --> 00:07:21,580
and I'll click this nice little green

00:07:18,820 --> 00:07:24,010
tick here and that says unresolved I'm

00:07:21,580 --> 00:07:26,380
sorted we can just take it as an award

00:07:24,010 --> 00:07:28,170
change and then when you look at your

00:07:26,380 --> 00:07:30,640
changes before you commit because

00:07:28,170 --> 00:07:34,450
everyone checks their modifications

00:07:30,640 --> 00:07:35,830
before they commit don't they and this

00:07:34,450 --> 00:07:39,790
is the sort of thing that you'll be

00:07:35,830 --> 00:07:42,880
looking at so that's the really simple

00:07:39,790 --> 00:07:46,390
stuff then we go into slightly different

00:07:42,880 --> 00:07:49,420
territory and this is where the fun

00:07:46,390 --> 00:07:51,460
starts anybody seen this face I've seen

00:07:49,420 --> 00:07:55,450
this face a lot it's occasionally in the

00:07:51,460 --> 00:07:58,780
mirror so when somebody says oh I've got

00:07:55,450 --> 00:08:02,260
flow the truth conflicts Oh merges are

00:07:58,780 --> 00:08:05,230
painful it shouldn't have to be that

00:08:02,260 --> 00:08:09,490
painful so there's three main types

00:08:05,230 --> 00:08:11,080
you've got adding file it throws fits

00:08:09,490 --> 00:08:15,100
because something's already added that

00:08:11,080 --> 00:08:18,430
file deleting a file which is going to

00:08:15,100 --> 00:08:21,670
conflict someone changing it and missing

00:08:18,430 --> 00:08:24,280
files missing files is a little a bit of

00:08:21,670 --> 00:08:28,090
an interesting side case so we'll look

00:08:24,280 --> 00:08:29,590
at that last so add conflicts when

00:08:28,090 --> 00:08:35,500
you're trying to add a file that already

00:08:29,590 --> 00:08:38,860
has been added by somebody else so these

00:08:35,500 --> 00:08:41,470
are cleavers and so you have your

00:08:38,860 --> 00:08:43,120
cleaver dot PHP you've got some

00:08:41,470 --> 00:08:45,550
properties that you've described how

00:08:43,120 --> 00:08:48,970
sharp it is or it weighs how long the

00:08:45,550 --> 00:08:51,339
blade is and some methods so this

00:08:48,970 --> 00:08:53,470
going to be a class you might use for

00:08:51,339 --> 00:08:56,290
describing tools that your favorite

00:08:53,470 --> 00:08:58,509
chefs use a social media site about

00:08:56,290 --> 00:09:01,209
chefs and recipes and what they

00:08:58,509 --> 00:09:03,550
recommend as their tools to use them so

00:09:01,209 --> 00:09:07,000
yeah straightforward fantastic you try

00:09:03,550 --> 00:09:09,939
and add it now this is the command line

00:09:07,000 --> 00:09:13,689
version of subversion and you'll get

00:09:09,939 --> 00:09:15,790
this conflict discovered and you can

00:09:13,689 --> 00:09:19,449
postpone it ain't you say yeah great

00:09:15,790 --> 00:09:24,129
okay if you postpone it you might end up

00:09:19,449 --> 00:09:25,569
with a text conflict and it can cope

00:09:24,129 --> 00:09:28,689
with that and it should be absolutely

00:09:25,569 --> 00:09:31,120
fine and you could go as far as saying

00:09:28,689 --> 00:09:33,129
okay I'm going to check what was checked

00:09:31,120 --> 00:09:36,430
in in this area in this folder in the

00:09:33,129 --> 00:09:37,829
last hour or so just to make sure that

00:09:36,430 --> 00:09:41,490
somebody hasn't added it before me

00:09:37,829 --> 00:09:45,519
before I even go to update or commit I

00:09:41,490 --> 00:09:46,990
can postpone as I've said I can treat

00:09:45,519 --> 00:09:49,420
this as a text conflict and say okay

00:09:46,990 --> 00:09:52,959
that's fine I'm just adding stuff to a

00:09:49,420 --> 00:09:57,459
file that's already there I can check

00:09:52,959 --> 00:09:59,500
the meaning of my file and their file

00:09:57,459 --> 00:10:03,129
and I can maybe remote and rename mine

00:09:59,500 --> 00:10:04,809
or rename that and I probably want to

00:10:03,129 --> 00:10:06,910
have a chat with someone if I'm not

00:10:04,809 --> 00:10:09,069
expecting this add in this area I

00:10:06,910 --> 00:10:11,579
thought I was the only person working in

00:10:09,069 --> 00:10:15,610
this folder I might have been mistaken

00:10:11,579 --> 00:10:18,399
so it took and technically you can fix

00:10:15,610 --> 00:10:20,439
it on your own you can say okay my file

00:10:18,399 --> 00:10:24,579
needs to go in completely separately to

00:10:20,439 --> 00:10:27,850
this file I'm just going to rename my

00:10:24,579 --> 00:10:30,790
file rename their file but should you

00:10:27,850 --> 00:10:34,629
and this is where it gets interesting

00:10:30,790 --> 00:10:39,610
because these are cleavers and meat

00:10:34,629 --> 00:10:42,209
cleavers these are also cleavers this is

00:10:39,610 --> 00:10:46,000
a Saxon King with his wit and gum up his

00:10:42,209 --> 00:10:48,819
followers his advocates so they follow

00:10:46,000 --> 00:10:50,559
his cause they can be termed as cleavers

00:10:48,819 --> 00:10:53,529
as well what if your colleague was

00:10:50,559 --> 00:10:57,480
writing a class about the followers of

00:10:53,529 --> 00:11:00,550
the chef's then he might have also

00:10:57,480 --> 00:11:02,150
called that cleavers its medieval world

00:11:00,550 --> 00:11:05,270
so it's quite rare but it's

00:11:02,150 --> 00:11:07,340
possible and if you're American those

00:11:05,270 --> 00:11:08,630
are also cleavers tend to find them on

00:11:07,340 --> 00:11:15,920
your dog when you've been walking with

00:11:08,630 --> 00:11:17,900
it so just because your file has the

00:11:15,920 --> 00:11:19,370
same name as somebody else's doesn't

00:11:17,900 --> 00:11:22,220
mean the contents of the same doesn't

00:11:19,370 --> 00:11:25,190
mean the intent is the same so this is

00:11:22,220 --> 00:11:27,650
why would always advocate talking to the

00:11:25,190 --> 00:11:30,680
people that have done the ad and looking

00:11:27,650 --> 00:11:32,630
a little bit ahead rather than just

00:11:30,680 --> 00:11:36,560
going for this simple technical solution

00:11:32,630 --> 00:11:38,870
all the time so if you've gone ahead and

00:11:36,560 --> 00:11:40,790
you've said okay this file is clearly

00:11:38,870 --> 00:11:42,830
not about leave as it's about followers

00:11:40,790 --> 00:11:44,360
I'm just going to rename this file for

00:11:42,830 --> 00:11:48,580
this person I'm with checking my changes

00:11:44,360 --> 00:11:50,810
and depending on who checks in first

00:11:48,580 --> 00:11:56,960
someone is going to have a delete

00:11:50,810 --> 00:12:02,420
conflict so either you're going to have

00:11:56,960 --> 00:12:05,150
a deleted file and so this is the person

00:12:02,420 --> 00:12:06,980
who's had the cleavers fall originally

00:12:05,150 --> 00:12:09,170
and considered followers to be the

00:12:06,980 --> 00:12:11,410
meaning of it and they're trying to

00:12:09,170 --> 00:12:15,200
check in the local edit to it and

00:12:11,410 --> 00:12:17,000
there's a delete coming in because your

00:12:15,200 --> 00:12:21,230
colleague has gone mad that should be

00:12:17,000 --> 00:12:24,530
followers and here is the other side of

00:12:21,230 --> 00:12:27,800
it so you've tried to rename that file

00:12:24,530 --> 00:12:29,750
which is an ad and a delete and you've

00:12:27,800 --> 00:12:31,790
got an incoming edit because they've

00:12:29,750 --> 00:12:33,260
gone I my cleavers file I've talked

00:12:31,790 --> 00:12:35,930
about followers I probably want a

00:12:33,260 --> 00:12:41,240
loyalty bonus score in it something like

00:12:35,930 --> 00:12:44,600
that so that's the other side of it so

00:12:41,240 --> 00:12:47,120
this is usually the situation someone

00:12:44,600 --> 00:12:48,830
has deleted that nice file you fix so

00:12:47,120 --> 00:12:51,350
beautifully so you've spent hours

00:12:48,830 --> 00:12:54,740
sorting a problem out and somebody else

00:12:51,350 --> 00:12:56,600
just ripped follow so it could be just a

00:12:54,740 --> 00:13:00,020
rename it could be just that situation

00:12:56,600 --> 00:13:01,610
and you could solve it for a patch file

00:13:00,020 --> 00:13:03,920
so you know what changes you made to

00:13:01,610 --> 00:13:07,850
your original file apply those to the

00:13:03,920 --> 00:13:11,330
newly nympho it's not that difficult if

00:13:07,850 --> 00:13:13,940
it's a massive refactor to that

00:13:11,330 --> 00:13:16,130
particular file that particular class

00:13:13,940 --> 00:13:18,020
then it's probably worth

00:13:16,130 --> 00:13:21,140
a chat to the person who touched it last

00:13:18,020 --> 00:13:24,350
and collaborates on how you're going to

00:13:21,140 --> 00:13:26,420
do your changes decent hand copying if

00:13:24,350 --> 00:13:28,340
someone's ripped out a file that you're

00:13:26,420 --> 00:13:29,930
editing because the entire folders gone

00:13:28,340 --> 00:13:32,840
because product has suddenly decided

00:13:29,930 --> 00:13:35,090
that they don't want to sell whatever it

00:13:32,840 --> 00:13:37,430
is you are working on get a coffee

00:13:35,090 --> 00:13:40,700
they've paid for your time it's not

00:13:37,430 --> 00:13:43,550
going to be the end of the world so

00:13:40,700 --> 00:13:47,720
missing files is a bit of an edge case

00:13:43,550 --> 00:13:49,250
it tends to occur when you have feature

00:13:47,720 --> 00:13:52,250
branches when you're very feature

00:13:49,250 --> 00:13:54,620
focused so you have a feature branch

00:13:52,250 --> 00:13:58,790
you've got your nice stable trunk or

00:13:54,620 --> 00:14:01,490
master or production and you are merging

00:13:58,790 --> 00:14:03,230
code from your stable branch and then

00:14:01,490 --> 00:14:08,060
when you've finished your emerging your

00:14:03,230 --> 00:14:10,760
feature back down to stable and because

00:14:08,060 --> 00:14:15,020
you're merging up from trunk for

00:14:10,760 --> 00:14:16,760
instance you then commit that merge up

00:14:15,020 --> 00:14:19,670
from trunk into your working branch into

00:14:16,760 --> 00:14:22,460
your feature branch and it's very

00:14:19,670 --> 00:14:24,200
important to keep that commit separate

00:14:22,460 --> 00:14:26,720
from anything else you've got going on

00:14:24,200 --> 00:14:30,170
at the time so if you've added the file

00:14:26,720 --> 00:14:31,460
and you haven't committed it yet and you

00:14:30,170 --> 00:14:34,960
merged up for drunk and you want to

00:14:31,460 --> 00:14:38,150
commit then that adds can get hidden and

00:14:34,960 --> 00:14:40,130
it not only gets hidden from anyone

00:14:38,150 --> 00:14:42,200
reading the clip for a code review point

00:14:40,130 --> 00:14:45,350
of view it also gets hidden when you

00:14:42,200 --> 00:14:49,370
start merging about so you can end up in

00:14:45,350 --> 00:14:51,770
a situation where you've got an edit

00:14:49,370 --> 00:14:57,100
that you're trying to merge in but the

00:14:51,770 --> 00:14:59,000
original commit of the ad is missing and

00:14:57,100 --> 00:15:00,680
that's when you're thinking more when

00:14:59,000 --> 00:15:04,220
did it get out and you start combing

00:15:00,680 --> 00:15:07,160
through look histories and I've spent an

00:15:04,220 --> 00:15:09,170
afternoon sorting this out when one of

00:15:07,160 --> 00:15:13,180
my colleagues have a family emergency I

00:15:09,170 --> 00:15:15,380
had to leave the building so i would say

00:15:13,180 --> 00:15:18,800
sometimes you might not see this if

00:15:15,380 --> 00:15:21,500
you're using git flow and you have a

00:15:18,800 --> 00:15:24,620
release strategy in your branching you

00:15:21,500 --> 00:15:26,930
might not see this but i will always say

00:15:24,620 --> 00:15:28,810
merge up to a clean working copy its

00:15:26,930 --> 00:15:33,190
standard practice

00:15:28,810 --> 00:15:35,050
makes life a lot easier using useful

00:15:33,190 --> 00:15:38,170
commit messages make everything clearer

00:15:35,050 --> 00:15:39,790
and when I'm merging back down other

00:15:38,170 --> 00:15:43,480
people's code because they can't be in

00:15:39,790 --> 00:15:46,210
the building I don't have an afternoon

00:15:43,480 --> 00:15:49,600
of combing through commits and having to

00:15:46,210 --> 00:15:54,070
pick out specific files so everything

00:15:49,600 --> 00:15:58,270
gets a lot easier so you can ask why do

00:15:54,070 --> 00:16:03,730
i do i do many people have to deal with

00:15:58,270 --> 00:16:05,260
so many conflicts this is why so far so

00:16:03,730 --> 00:16:06,730
there's a lot of developers in many of

00:16:05,260 --> 00:16:08,920
the companies that I've worked in

00:16:06,730 --> 00:16:11,290
they've been a number of teams working

00:16:08,920 --> 00:16:13,779
on the same code base so there's a lot

00:16:11,290 --> 00:16:17,589
of developers working a lot of the time

00:16:13,779 --> 00:16:21,520
in overlapping areas because of code

00:16:17,589 --> 00:16:24,430
reviews and lie fixing and sprint zero

00:16:21,520 --> 00:16:26,110
work and project work and other project

00:16:24,430 --> 00:16:28,660
work that gets snuck in at the last

00:16:26,110 --> 00:16:34,240
minute and there's a lot of context

00:16:28,660 --> 00:16:37,470
swapping that goes on so you do i do

00:16:34,240 --> 00:16:41,470
find that swapping between lots of of

00:16:37,470 --> 00:16:42,880
revisions can be quite time consuming so

00:16:41,470 --> 00:16:45,640
you can't talk to your colleagues all

00:16:42,880 --> 00:16:47,620
the time i know i advocate it but if we

00:16:45,640 --> 00:16:49,420
talked when all the time when we wanted

00:16:47,620 --> 00:16:51,970
to we never actually get any code

00:16:49,420 --> 00:16:54,490
written and the boss cannot likes code

00:16:51,970 --> 00:16:59,890
being written so you have to do that and

00:16:54,490 --> 00:17:03,790
i also see it because there's a move to

00:16:59,890 --> 00:17:05,829
refract a lot of legacy code moving

00:17:03,790 --> 00:17:10,390
towards a clean code base it's a really

00:17:05,829 --> 00:17:14,170
really good idea it's a great movement

00:17:10,390 --> 00:17:18,040
with a lot of weight behind it but it

00:17:14,170 --> 00:17:20,949
can cause conflicts so there's a few

00:17:18,040 --> 00:17:23,350
things to get out of jail free you've

00:17:20,949 --> 00:17:26,679
got patch files everybody know what

00:17:23,350 --> 00:17:30,220
patch file is I'm seeing some nodding

00:17:26,679 --> 00:17:32,320
and so that's just a log of the

00:17:30,220 --> 00:17:35,320
difference between two files you can

00:17:32,320 --> 00:17:37,810
apply potentially to another file you've

00:17:35,320 --> 00:17:39,340
got the option of multiple checkouts so

00:17:37,810 --> 00:17:41,320
multiple working copies that you can

00:17:39,340 --> 00:17:42,490
swap between I find that very useful

00:17:41,320 --> 00:17:46,570
when doing co

00:17:42,490 --> 00:17:49,480
reviews or live bug fixing in some

00:17:46,570 --> 00:17:55,980
wonderful ideas who's using phpstorm

00:17:49,480 --> 00:17:58,990
here who uses the stache facility

00:17:55,980 --> 00:18:03,880
excellent isn't it brilliant oh you can

00:17:58,990 --> 00:18:05,980
stash your work in progress so in svn

00:18:03,880 --> 00:18:09,580
and get and various other language of

00:18:05,980 --> 00:18:13,080
other version control systems you can

00:18:09,580 --> 00:18:15,250
cherry pick your commits and in get

00:18:13,080 --> 00:18:17,890
something I've seen with source tree is

00:18:15,250 --> 00:18:20,980
it's not just on a file basis it can be

00:18:17,890 --> 00:18:25,330
on a lines of code basis which I find

00:18:20,980 --> 00:18:27,840
very very powerful also helps to have

00:18:25,330 --> 00:18:30,610
standards that you're working towards

00:18:27,840 --> 00:18:34,929
and standards that you're enforcing so

00:18:30,610 --> 00:18:37,480
PSR to its code layout PS r3 is a

00:18:34,929 --> 00:18:39,280
logging interface both of these things

00:18:37,480 --> 00:18:42,730
work very well to keep your code

00:18:39,280 --> 00:18:44,530
readable so everybody gets to get on

00:18:42,730 --> 00:18:47,260
board very very quickly when you first

00:18:44,530 --> 00:18:49,360
join the company having a readable code

00:18:47,260 --> 00:18:54,610
base is one of the key things to getting

00:18:49,360 --> 00:18:58,210
people up to speed so I just fix things

00:18:54,610 --> 00:19:01,300
when they occur why Pat why just patch

00:18:58,210 --> 00:19:04,750
things why not have a bit of a longer

00:19:01,300 --> 00:19:08,260
term strategy so just talked a little

00:19:04,750 --> 00:19:11,800
bit about cleaning up your code base and

00:19:08,260 --> 00:19:15,550
this is quite a growing movement that's

00:19:11,800 --> 00:19:19,450
advocated by Matt cocaine who started

00:19:15,550 --> 00:19:23,110
blogging about PHP code scouts and

00:19:19,450 --> 00:19:24,970
that's logo there I personally use the l

00:19:23,110 --> 00:19:27,850
plate because I don't feel like I've

00:19:24,970 --> 00:19:30,670
quite got there yet I'm working towards

00:19:27,850 --> 00:19:33,010
it and I think is better to start

00:19:30,670 --> 00:19:37,110
working towards it they're not start at

00:19:33,010 --> 00:19:41,830
all so having clean code is a good

00:19:37,110 --> 00:19:44,800
starting point being prepared so looking

00:19:41,830 --> 00:19:47,500
ahead and thinking about what you're

00:19:44,800 --> 00:19:52,140
about to do rather than just charging in

00:19:47,500 --> 00:19:55,240
I find is something that I want to do

00:19:52,140 --> 00:19:56,370
solving root causes sometimes those are

00:19:55,240 --> 00:19:59,890
technologic

00:19:56,370 --> 00:20:03,400
sometimes those are social sometimes

00:19:59,890 --> 00:20:06,250
those are processed driven and having a

00:20:03,400 --> 00:20:09,160
strategy for what you want out of your

00:20:06,250 --> 00:20:12,130
version control system and getting the

00:20:09,160 --> 00:20:15,190
most out of your chosen tools will go a

00:20:12,130 --> 00:20:19,420
long way to solving some of those

00:20:15,190 --> 00:20:21,730
problems so when it comes to a version

00:20:19,420 --> 00:20:25,900
control system I like to think of it as

00:20:21,730 --> 00:20:29,680
bonsai it's beautiful it's well kept

00:20:25,900 --> 00:20:33,090
it's cultivated and so you've got

00:20:29,680 --> 00:20:36,420
principles and branching strategies and

00:20:33,090 --> 00:20:39,640
we'll talk a little bit about complexity

00:20:36,420 --> 00:20:43,720
so principles of version control system

00:20:39,640 --> 00:20:46,270
it's a tree it might be a flow it might

00:20:43,720 --> 00:20:51,070
be lots of different branches but

00:20:46,270 --> 00:20:53,500
effectively it's a tree and I have a pet

00:20:51,070 --> 00:20:58,180
peeve and it's seeing a working copy

00:20:53,500 --> 00:21:00,490
like this I think that the point of

00:20:58,180 --> 00:21:02,950
version control system is you check out

00:21:00,490 --> 00:21:06,550
a copy of what you need at the stage you

00:21:02,950 --> 00:21:09,730
need it I've seen a lot of people have a

00:21:06,550 --> 00:21:11,980
check out like this that end up putting

00:21:09,730 --> 00:21:14,380
their change trial into the wrong branch

00:21:11,980 --> 00:21:19,150
in fact when I first started I do it

00:21:14,380 --> 00:21:23,260
myself so I think that is really missing

00:21:19,150 --> 00:21:24,970
point so I also say use meaningful names

00:21:23,260 --> 00:21:27,970
so if you're going to have a feature

00:21:24,970 --> 00:21:29,950
sets of branches or bugfuck branches if

00:21:27,970 --> 00:21:32,620
you're going to have release branches

00:21:29,950 --> 00:21:35,650
making a meaningful include version

00:21:32,620 --> 00:21:39,360
numbers for instance if you use

00:21:35,650 --> 00:21:41,440
something like JIRA music Jerry code

00:21:39,360 --> 00:21:43,870
think about how it's going to be

00:21:41,440 --> 00:21:45,820
released when it comes to working copy

00:21:43,870 --> 00:21:48,610
is keeping it clean as we've already

00:21:45,820 --> 00:21:50,740
talked about with missile files is kind

00:21:48,610 --> 00:21:53,200
of key you don't want to be messing

00:21:50,740 --> 00:21:56,170
around with for instance with subversion

00:21:53,200 --> 00:21:57,970
subversion history that isn't quite up

00:21:56,170 --> 00:22:02,320
to date or doesn't match the files that

00:21:57,970 --> 00:22:04,090
you've got keeping it current is key if

00:22:02,320 --> 00:22:07,180
you're going to have feature branches

00:22:04,090 --> 00:22:09,570
one of my rules when I work is to merge

00:22:07,180 --> 00:22:11,970
up from the stable branch every day

00:22:09,570 --> 00:22:13,740
so that's the first thing I do because

00:22:11,970 --> 00:22:15,390
that gives me the longest time to go and

00:22:13,740 --> 00:22:17,850
get a coffee and talk about the changes

00:22:15,390 --> 00:22:19,860
that have come in overnight all the

00:22:17,850 --> 00:22:24,540
changes that came in yesterday that are

00:22:19,860 --> 00:22:26,880
going to conflict with mine so talking

00:22:24,540 --> 00:22:28,940
about branching strategy this very much

00:22:26,880 --> 00:22:33,180
depends on the kind of products that

00:22:28,940 --> 00:22:35,910
you're releasing and the way your

00:22:33,180 --> 00:22:38,070
company structured way where your your

00:22:35,910 --> 00:22:40,290
products are and who they're being aimed

00:22:38,070 --> 00:22:42,600
at so some of the things that I think

00:22:40,290 --> 00:22:45,950
about for talking about ranching

00:22:42,600 --> 00:22:48,630
strategy is how do components interact

00:22:45,950 --> 00:22:51,870
what's common using common libraries

00:22:48,630 --> 00:22:53,820
that are developed in-house that are

00:22:51,870 --> 00:22:56,280
used with multiple components for

00:22:53,820 --> 00:22:59,760
instance how deeply coupled is your

00:22:56,280 --> 00:23:02,760
infrastructure in that way how do you do

00:22:59,760 --> 00:23:07,680
your code reviews when do you do your

00:23:02,760 --> 00:23:10,410
code refuse what do you test how do you

00:23:07,680 --> 00:23:13,170
test it where do you test it does a QA

00:23:10,410 --> 00:23:15,840
team test it do developers test it what

00:23:13,170 --> 00:23:18,210
kind of test you do how do you do you're

00:23:15,840 --> 00:23:20,580
releasing do you go to staging

00:23:18,210 --> 00:23:23,670
environment first do you go straight out

00:23:20,580 --> 00:23:27,630
to production do you release every day

00:23:23,670 --> 00:23:29,070
from your stable master branch because

00:23:27,630 --> 00:23:30,900
you like to fix things as quickly as

00:23:29,070 --> 00:23:34,530
possible as soon as possible with the

00:23:30,900 --> 00:23:37,260
most coffee and what's your pocket

00:23:34,530 --> 00:23:40,230
apocalypse plan I knew that was going to

00:23:37,260 --> 00:23:41,850
be a bad thing when I wrote it and so

00:23:40,230 --> 00:23:47,090
you're hotfix management how are you

00:23:41,850 --> 00:23:50,310
going to deal with life problems so

00:23:47,090 --> 00:23:53,850
moving on to how to deal with complexity

00:23:50,310 --> 00:23:55,950
we've talked about components that work

00:23:53,850 --> 00:23:57,780
together and share look common libraries

00:23:55,950 --> 00:23:58,860
and this isn't just third-party

00:23:57,780 --> 00:24:01,320
libraries that you might load with

00:23:58,860 --> 00:24:03,630
composer these are things that are

00:24:01,320 --> 00:24:05,640
developed in-house that might have

00:24:03,630 --> 00:24:10,320
changes alongside what you're actually

00:24:05,640 --> 00:24:12,270
working on and i'm really lazy if i can

00:24:10,320 --> 00:24:15,900
get away with doing the minimum work i

00:24:12,270 --> 00:24:18,510
will so i don't want to spend my time

00:24:15,900 --> 00:24:21,900
checking out for different locations

00:24:18,510 --> 00:24:23,399
across to version control repositories

00:24:21,900 --> 00:24:25,830
by hand

00:24:23,399 --> 00:24:29,749
I tend to go for the one script to rule

00:24:25,830 --> 00:24:33,029
them all because it's lazy it's great I

00:24:29,749 --> 00:24:36,119
can handle complex project checkouts

00:24:33,029 --> 00:24:38,099
with it so if there's various dependent

00:24:36,119 --> 00:24:42,200
components and the spread of costs for

00:24:38,099 --> 00:24:45,389
folders I can do in one command line I

00:24:42,200 --> 00:24:50,129
miss things less when I'm checking in so

00:24:45,389 --> 00:24:52,830
my favorite habit is to miss adding but

00:24:50,129 --> 00:24:57,119
if I've actually run a check

00:24:52,830 --> 00:24:58,889
modifications or get status on all of

00:24:57,119 --> 00:25:01,679
the folders simultaneously using one

00:24:58,889 --> 00:25:04,679
script I'm going to see hang on there's

00:25:01,679 --> 00:25:07,950
something missing there and it's a way

00:25:04,679 --> 00:25:09,629
of looking ahead before updating so I

00:25:07,950 --> 00:25:12,479
can actually look at what's already in

00:25:09,629 --> 00:25:15,359
the log and look at what changes I've

00:25:12,479 --> 00:25:18,839
got before I start doing any updating or

00:25:15,359 --> 00:25:23,639
committing i will say there is a caveat

00:25:18,839 --> 00:25:26,249
to this I don't ever commit by script I

00:25:23,639 --> 00:25:28,109
commit by hand so I'll look at things in

00:25:26,249 --> 00:25:29,969
a folder and I'll make sure that i can

00:25:28,109 --> 00:25:32,489
do that because I want the flexibility

00:25:29,969 --> 00:25:35,789
of being able to choose my individual

00:25:32,489 --> 00:25:38,580
commits and cherry-pick and maybe commit

00:25:35,789 --> 00:25:40,559
a selection of files as one commit and

00:25:38,580 --> 00:25:43,349
the additional files as a second commit

00:25:40,559 --> 00:25:46,619
because I like to keep the intent quite

00:25:43,349 --> 00:25:49,440
small and well-defined so this is an

00:25:46,619 --> 00:25:52,499
example and you could wrap this in a

00:25:49,440 --> 00:25:55,309
bash script and shell script anything

00:25:52,499 --> 00:25:59,219
that will run on the command line and

00:25:55,309 --> 00:26:01,320
this is svn specific but it has a

00:25:59,219 --> 00:26:04,529
command line so there's no reason why

00:26:01,320 --> 00:26:06,589
you couldn't do the equivalent so on

00:26:04,529 --> 00:26:10,379
checkout we've just got check out

00:26:06,589 --> 00:26:13,009
particular repository a components and

00:26:10,379 --> 00:26:16,710
you're dependent components and these

00:26:13,009 --> 00:26:19,589
locations can be separate locations so I

00:26:16,710 --> 00:26:22,019
have worked on projects in the past that

00:26:19,589 --> 00:26:23,549
are across three repositories because

00:26:22,019 --> 00:26:25,619
they're using shared components that are

00:26:23,549 --> 00:26:32,070
developed by different teams who all

00:26:25,619 --> 00:26:34,309
like their own flavor of a repository so

00:26:32,070 --> 00:26:36,999
I don't want to see this face again I'm

00:26:34,309 --> 00:26:42,959
trying not to see it in my mirror too

00:26:36,999 --> 00:26:42,959
often I like it when I can see that face

00:26:43,649 --> 00:26:54,459
so that's the basics okay so now we're

00:26:51,729 --> 00:26:56,889
into bonus levels getting more out of

00:26:54,459 --> 00:27:00,759
your version control to me is quite

00:26:56,889 --> 00:27:03,129
exciting it isn't so much just one

00:27:00,759 --> 00:27:06,789
technology it's what else it can drive

00:27:03,129 --> 00:27:11,139
and what it can drive is limited only by

00:27:06,789 --> 00:27:13,719
your imagination so we talked about what

00:27:11,139 --> 00:27:18,099
we might cover keeping a secret keeping

00:27:13,719 --> 00:27:21,669
it safe collaboration and review keeping

00:27:18,099 --> 00:27:24,659
clean codes enforcing standards and some

00:27:21,669 --> 00:27:29,639
things that we can run after the commit

00:27:24,659 --> 00:27:32,439
so these rely on hooks svn and get

00:27:29,639 --> 00:27:34,179
certainly potentially other version

00:27:32,439 --> 00:27:40,869
control systems I haven't used also have

00:27:34,179 --> 00:27:45,509
this who knows what a hook is who's set

00:27:40,869 --> 00:27:49,659
up something that uses a hook excellent

00:27:45,509 --> 00:27:51,699
so as a quick summary I see hook as an

00:27:49,659 --> 00:27:53,409
insertion point it's a pause in the

00:27:51,699 --> 00:27:55,989
commit process where you can put your

00:27:53,409 --> 00:27:58,989
own custom code you can put it at

00:27:55,989 --> 00:28:00,609
various stages and depending on what

00:27:58,989 --> 00:28:03,369
version control system you use this

00:28:00,609 --> 00:28:04,689
stage is differ slightly but basically

00:28:03,369 --> 00:28:07,059
it's something that happens before you

00:28:04,689 --> 00:28:08,709
get to the commit and something that you

00:28:07,059 --> 00:28:12,279
can trigger off after your connectors

00:28:08,709 --> 00:28:15,399
happened there's server-side flavors and

00:28:12,279 --> 00:28:19,769
client-side flavors available and they

00:28:15,399 --> 00:28:22,629
have their own pluses and minuses and

00:28:19,769 --> 00:28:24,369
Edie's slightly different depending on

00:28:22,629 --> 00:28:27,759
whether you're on a centralized system

00:28:24,369 --> 00:28:31,269
like svn or what I call a pseudo

00:28:27,759 --> 00:28:33,489
distributed system so get that's run

00:28:31,269 --> 00:28:36,549
from a server so it's not truly

00:28:33,489 --> 00:28:42,069
distributed like you could use get but

00:28:36,549 --> 00:28:45,759
it's got a server element to it so these

00:28:42,069 --> 00:28:48,549
are the few things or some of the things

00:28:45,759 --> 00:28:50,950
that you can do on the first types of

00:28:48,549 --> 00:28:52,860
hooks so enforcing your eyes

00:28:50,950 --> 00:28:55,210
station on your Start commit hook

00:28:52,860 --> 00:28:59,159
enforcing your code review or your

00:28:55,210 --> 00:29:02,590
standards on your pre-commit hook and

00:28:59,159 --> 00:29:04,899
part of the joy of creating your

00:29:02,590 --> 00:29:10,480
changelogs easily also sits on your

00:29:04,899 --> 00:29:15,130
pre-commit hook so is it secret is it

00:29:10,480 --> 00:29:16,840
safe you might want to have

00:29:15,130 --> 00:29:19,570
authorization on your version control

00:29:16,840 --> 00:29:22,179
system your company may enforce it your

00:29:19,570 --> 00:29:23,620
systems guys may say you've got to have

00:29:22,179 --> 00:29:26,500
it because I'm not having most over

00:29:23,620 --> 00:29:29,889
hooked and and it basically comes down

00:29:26,500 --> 00:29:31,360
to a few simple questions do you want

00:29:29,889 --> 00:29:33,639
the world to be able to read everything

00:29:31,360 --> 00:29:36,100
are you on a public repository on github

00:29:33,639 --> 00:29:37,990
do you want everybody to be able to

00:29:36,100 --> 00:29:40,899
your code that's great if it's open

00:29:37,990 --> 00:29:42,669
source brilliant but you might have some

00:29:40,899 --> 00:29:44,740
more sensitive components you might have

00:29:42,669 --> 00:29:46,960
proprietary code that your company

00:29:44,740 --> 00:29:50,980
doesn't want everyone to be able to read

00:29:46,960 --> 00:29:54,370
or to check out the other reason why

00:29:50,980 --> 00:29:57,010
authorization can be important is that

00:29:54,370 --> 00:29:59,019
only certain people might be allowed to

00:29:57,010 --> 00:30:01,090
commit to a particular branch or set of

00:29:59,019 --> 00:30:04,330
branches because of the sensitivity of

00:30:01,090 --> 00:30:06,700
the component because of trust within a

00:30:04,330 --> 00:30:09,880
certain team or a certain level of

00:30:06,700 --> 00:30:11,500
developer within a team and just because

00:30:09,880 --> 00:30:15,220
you want to make sure that the code is

00:30:11,500 --> 00:30:17,919
checked before it's checked in and one

00:30:15,220 --> 00:30:19,389
of the questions that might be asked if

00:30:17,919 --> 00:30:22,809
you're talking about authorization is

00:30:19,389 --> 00:30:24,970
how often to this change because

00:30:22,809 --> 00:30:28,029
maintaining authorization can be a bit

00:30:24,970 --> 00:30:30,490
of a manual task and if you want to

00:30:28,029 --> 00:30:33,700
change it every five minutes because you

00:30:30,490 --> 00:30:35,649
have people hopping out of roles in your

00:30:33,700 --> 00:30:38,139
developer teams then you might want to

00:30:35,649 --> 00:30:42,669
get whoever it is that authorizes this

00:30:38,139 --> 00:30:46,779
some more cookies so there's very

00:30:42,669 --> 00:30:51,399
traditional solutions for svn Apache and

00:30:46,779 --> 00:30:55,029
svn serve both have an authorization

00:30:51,399 --> 00:30:58,000
module and a rules file that's

00:30:55,029 --> 00:31:01,029
associated with it both of them support

00:30:58,000 --> 00:31:03,820
ldap so it's a fairly standard

00:31:01,029 --> 00:31:04,550
authorization system you have a username

00:31:03,820 --> 00:31:08,810
password

00:31:04,550 --> 00:31:10,730
you know it gives you certain roles and

00:31:08,810 --> 00:31:12,800
responsibilities within the version

00:31:10,730 --> 00:31:15,440
control repository on the server where

00:31:12,800 --> 00:31:20,800
it sits and allows you to do certain

00:31:15,440 --> 00:31:26,270
things if you use git who uses get

00:31:20,800 --> 00:31:30,530
pretty much everyone excellent and so

00:31:26,270 --> 00:31:34,820
get lab have Clyde enterprise or

00:31:30,530 --> 00:31:37,700
Community Edition for linux and if you

00:31:34,820 --> 00:31:41,120
go self-serve they have ldap options

00:31:37,700 --> 00:31:44,000
bitbucket again this proprietary life

00:31:41,120 --> 00:31:47,620
and commercial license Enterprise

00:31:44,000 --> 00:31:50,540
Edition they do do in academic license

00:31:47,620 --> 00:31:52,550
which you have to register for for a

00:31:50,540 --> 00:31:54,200
specific organization but it's their

00:31:52,550 --> 00:31:58,550
equivalent the community license and

00:31:54,200 --> 00:32:01,430
again they've got ldap on that that's

00:31:58,550 --> 00:32:03,590
kind of authorization enforcing code

00:32:01,430 --> 00:32:09,220
review because two heads are better than

00:32:03,590 --> 00:32:14,450
one unless you happen to be this guy so

00:32:09,220 --> 00:32:16,610
many people have a very traditional view

00:32:14,450 --> 00:32:18,320
of code reviews it's just a case of

00:32:16,610 --> 00:32:23,000
looking in the log and making sure it's

00:32:18,320 --> 00:32:25,850
all okay but using tools can help with

00:32:23,000 --> 00:32:28,880
that and make it a lot easier to handle

00:32:25,850 --> 00:32:30,590
by getting a window into the code so you

00:32:28,880 --> 00:32:34,610
don't have to check out the code to be

00:32:30,590 --> 00:32:37,870
able to read about it or to review it it

00:32:34,610 --> 00:32:42,590
means that visibility of reviews could

00:32:37,870 --> 00:32:45,320
be out to everyone not every team has

00:32:42,590 --> 00:32:48,140
the resources or space to go and sit in

00:32:45,320 --> 00:32:50,990
the room and show code on a projector

00:32:48,140 --> 00:32:52,790
like this and discuss it some teams work

00:32:50,990 --> 00:32:57,170
really well like that and other teams

00:32:52,790 --> 00:32:59,150
find it not so possible so the option of

00:32:57,170 --> 00:33:01,070
having multiple reviewers when you're

00:32:59,150 --> 00:33:05,030
all checking out your working copy is

00:33:01,070 --> 00:33:08,660
not necessarily practical you can also

00:33:05,030 --> 00:33:12,650
use tools for code review that protect

00:33:08,660 --> 00:33:16,130
your master repository so if you're

00:33:12,650 --> 00:33:17,850
using it you have a code review stage

00:33:16,130 --> 00:33:21,169
and it won't let anything

00:33:17,850 --> 00:33:24,450
through pull request push request until

00:33:21,169 --> 00:33:26,760
it's gone through its process so you

00:33:24,450 --> 00:33:29,880
could roll your own you could have a

00:33:26,760 --> 00:33:32,820
database that is populated by scraping

00:33:29,880 --> 00:33:36,330
all of the revisions from your commit

00:33:32,820 --> 00:33:37,679
log and it could have a tally against it

00:33:36,330 --> 00:33:40,620
a number of people that said they've

00:33:37,679 --> 00:33:42,570
code reviewed it and only when all of

00:33:40,620 --> 00:33:44,640
the information is in the database you

00:33:42,570 --> 00:33:48,150
check that when you're doing your pull

00:33:44,640 --> 00:33:50,250
request for you push requests and Bob's

00:33:48,150 --> 00:33:52,549
your uncle you can go in and that's fine

00:33:50,250 --> 00:33:56,070
but that seems very laborious and

00:33:52,549 --> 00:34:01,409
there's a lot of other options so you

00:33:56,070 --> 00:34:05,220
can enforce a code review by saying only

00:34:01,409 --> 00:34:08,340
certain people can merge them into your

00:34:05,220 --> 00:34:09,720
stable branch and those people are going

00:34:08,340 --> 00:34:13,950
to code review what they're about to

00:34:09,720 --> 00:34:17,790
commit you could also make the basics so

00:34:13,950 --> 00:34:19,200
if you write Python or C sharp you can

00:34:17,790 --> 00:34:21,750
actually compile the code make sure it

00:34:19,200 --> 00:34:24,600
builds before it goes into your version

00:34:21,750 --> 00:34:28,710
control PHP world I think the nearest we

00:34:24,600 --> 00:34:33,570
have is the lint and the fatal options

00:34:28,710 --> 00:34:34,980
on that so that has disadvantages in

00:34:33,570 --> 00:34:37,230
that letter I only do a file at a time

00:34:34,980 --> 00:34:41,040
and it will stop when it finds the first

00:34:37,230 --> 00:34:43,980
error so it's not ideal and if you use

00:34:41,040 --> 00:34:48,210
an IDE or get decent plugins then you

00:34:43,980 --> 00:34:49,980
get quite a lot for free so you'll get

00:34:48,210 --> 00:34:54,899
your syntax checkers and so and then

00:34:49,980 --> 00:34:56,970
that so it's probably better to get

00:34:54,899 --> 00:35:00,540
built-in tools for this if you want to

00:34:56,970 --> 00:35:02,400
use an automated way of handling it if

00:35:00,540 --> 00:35:07,080
you've got something like get lab big

00:35:02,400 --> 00:35:09,840
bucket get flow get lab flow get hub you

00:35:07,080 --> 00:35:13,980
sent anything here and they'll handle

00:35:09,840 --> 00:35:17,670
merge requests and pull requests so that

00:35:13,980 --> 00:35:20,550
will automatically suggests that whoever

00:35:17,670 --> 00:35:22,440
sees that pull request will be able to

00:35:20,550 --> 00:35:27,270
review the code before they'll accept it

00:35:22,440 --> 00:35:29,420
in there's also gateway software out on

00:35:27,270 --> 00:35:32,630
the market I say market

00:35:29,420 --> 00:35:38,780
is an open source free java based tool

00:35:32,630 --> 00:35:41,900
and it sits between your working copy it

00:35:38,780 --> 00:35:46,130
actually sits on the server before you

00:35:41,900 --> 00:35:49,040
get your get master or production so

00:35:46,130 --> 00:35:52,700
it'll accept a pull request to a point

00:35:49,040 --> 00:35:54,589
and then it has its own process for

00:35:52,700 --> 00:35:57,349
saying this code has been committed and

00:35:54,589 --> 00:35:59,960
lots of people can log in look at that

00:35:57,349 --> 00:36:02,540
code mark it as yet that's absolutely

00:35:59,960 --> 00:36:04,790
fine or put comments on it and say no

00:36:02,540 --> 00:36:08,150
that's rubbish get rid of it go rewrite

00:36:04,790 --> 00:36:09,829
it and when everybody's happy and the

00:36:08,150 --> 00:36:12,740
rules you've set up in Garrett are

00:36:09,829 --> 00:36:18,910
satisfied your code can then go into

00:36:12,740 --> 00:36:21,049
master or production so that's two down

00:36:18,910 --> 00:36:24,859
we've definitely got time for at least

00:36:21,049 --> 00:36:26,329
another one and enforcing standards I

00:36:24,859 --> 00:36:28,430
think is actually a really good idea

00:36:26,329 --> 00:36:32,299
it's something that we've been

00:36:28,430 --> 00:36:35,420
discussing for quite a while and it

00:36:32,299 --> 00:36:37,069
makes it easier to handle when you're

00:36:35,420 --> 00:36:41,119
looking for that one missing semicolon

00:36:37,069 --> 00:36:44,420
and it won't necessarily find it for you

00:36:41,119 --> 00:36:47,650
but it will make life a lot easier so

00:36:44,420 --> 00:36:51,799
PHP worlds there's PHP code sniffer it's

00:36:47,650 --> 00:36:54,890
pretty much well known and c-sharp we

00:36:51,799 --> 00:36:59,960
start cop Python I'll compile the file

00:36:54,890 --> 00:37:02,270
though and before I'll commit it so you

00:36:59,960 --> 00:37:04,339
can't in four stanzas in a number of

00:37:02,270 --> 00:37:10,130
ways you can have it on the client side

00:37:04,339 --> 00:37:14,450
as a pre-commit hook and forget that's

00:37:10,130 --> 00:37:16,280
pretty much your choice effectively

00:37:14,450 --> 00:37:19,430
because you're a distributed have

00:37:16,280 --> 00:37:22,579
distributed posit ori it's all going to

00:37:19,430 --> 00:37:24,859
be client-side you can have a

00:37:22,579 --> 00:37:29,059
server-side hook and i'll come back to

00:37:24,859 --> 00:37:31,130
that you can refuse the commit then when

00:37:29,059 --> 00:37:33,530
the changes don't pass so for instance

00:37:31,130 --> 00:37:35,839
PHP code sniffer has an output that says

00:37:33,530 --> 00:37:38,480
I've got a lot of warnings and I've got

00:37:35,839 --> 00:37:40,430
three errors and you can say forget it

00:37:38,480 --> 00:37:42,230
if there's an error you don't get in

00:37:40,430 --> 00:37:47,180
through the door

00:37:42,230 --> 00:37:51,140
you could say for a lie fix has to go

00:37:47,180 --> 00:37:54,230
out now I'm not going to worry that my

00:37:51,140 --> 00:37:57,619
code layout does not meet PSR to this

00:37:54,230 --> 00:37:59,540
time so you could give grace with a

00:37:57,619 --> 00:38:01,340
threshold you could say it's a legacy

00:37:59,540 --> 00:38:04,070
code base we're in the process of

00:38:01,340 --> 00:38:07,520
transitioning it we can have a little

00:38:04,070 --> 00:38:10,040
bit of leeway so svn again because

00:38:07,520 --> 00:38:14,540
that's where my experience lies this is

00:38:10,040 --> 00:38:19,460
a client-side version of it so you would

00:38:14,540 --> 00:38:22,460
set up your hook script wrong button

00:38:19,460 --> 00:38:25,430
you'd set up your hook scripts here and

00:38:22,460 --> 00:38:30,800
your hook script would have the command

00:38:25,430 --> 00:38:35,240
line that calls a bigger script so you

00:38:30,800 --> 00:38:38,060
actually fire off your code sniffer on

00:38:35,240 --> 00:38:39,950
your own machine and so you check your

00:38:38,060 --> 00:38:42,320
current directory the whole directory or

00:38:39,950 --> 00:38:45,530
you might just check the files that

00:38:42,320 --> 00:38:47,450
you've changed it's not great each

00:38:45,530 --> 00:38:49,220
developer is in control of their own

00:38:47,450 --> 00:38:51,380
environment and if they're anything like

00:38:49,220 --> 00:38:54,500
me they like customizing it quite a lot

00:38:51,380 --> 00:38:56,450
and so they're in control and you can't

00:38:54,500 --> 00:39:00,230
always guarantee that these will run or

00:38:56,450 --> 00:39:04,510
that they won't in some way be changed

00:39:00,230 --> 00:39:10,730
or skit so you could use a safe site

00:39:04,510 --> 00:39:12,080
example that's not as easy and get so

00:39:10,730 --> 00:39:18,080
you tend to get it at the pull request

00:39:12,080 --> 00:39:23,119
stage this in svn will simply run your

00:39:18,080 --> 00:39:26,240
code sniffer and p.s our two is sand as

00:39:23,119 --> 00:39:28,850
you can import on that your repo your

00:39:26,240 --> 00:39:32,960
repo which is where you're committing to

00:39:28,850 --> 00:39:37,880
your text which is what your you're

00:39:32,960 --> 00:39:39,800
trying to commit and you can actually go

00:39:37,880 --> 00:39:44,030
into PHP code sniff I haven't chatted

00:39:39,800 --> 00:39:46,850
this them about this but you should say

00:39:44,030 --> 00:39:49,490
okay you can add a tolerance and say if

00:39:46,850 --> 00:39:51,290
the number of errors is above the

00:39:49,490 --> 00:39:52,970
tolerance then forget it than not

00:39:51,290 --> 00:39:54,789
getting him but you can allow a little

00:39:52,970 --> 00:40:02,739
bit of leeway if

00:39:54,789 --> 00:40:03,939
in a transition phase so that's mostly

00:40:02,739 --> 00:40:05,499
the thing is the things that you're

00:40:03,939 --> 00:40:07,059
going to be doing on pre-commit or

00:40:05,499 --> 00:40:11,849
thinking about really doing pull

00:40:07,059 --> 00:40:14,829
requests I hate writing documentation

00:40:11,849 --> 00:40:17,739
even if it's just a list of changes i'm

00:40:14,829 --> 00:40:22,839
passing to my wonderful colleagues who

00:40:17,739 --> 00:40:26,499
do quality assurance and I just AM like

00:40:22,839 --> 00:40:28,209
Dana I'm just lazy so I like to do

00:40:26,499 --> 00:40:30,279
things in a slightly more automated way

00:40:28,209 --> 00:40:32,499
and I really enjoyed researching this

00:40:30,279 --> 00:40:36,539
because it's is something I think that

00:40:32,499 --> 00:40:39,759
could really help so on the pre-commit

00:40:36,539 --> 00:40:41,890
you didn't force commit message patterns

00:40:39,759 --> 00:40:44,199
and I know some people hate this because

00:40:41,890 --> 00:40:46,390
if you're doing a ridiculously fast fix

00:40:44,199 --> 00:40:47,859
and it needs to go out on friday at 5pm

00:40:46,390 --> 00:40:52,119
because you don't want to cite to be

00:40:47,859 --> 00:40:54,279
broken over the weekend fair enough sick

00:40:52,119 --> 00:40:59,919
hotfix tagging it i don't care that's

00:40:54,279 --> 00:41:02,979
fine so enforcing message patterns

00:40:59,919 --> 00:41:05,949
actually makes things for code review

00:41:02,979 --> 00:41:07,539
and from merging code down into trunk

00:41:05,949 --> 00:41:11,079
when your colleagues gone out in the

00:41:07,539 --> 00:41:13,329
building much much easier and it

00:41:11,079 --> 00:41:15,189
encourages user-facing comments and

00:41:13,329 --> 00:41:17,679
sometimes like user could be your QA

00:41:15,189 --> 00:41:22,509
engineer not necessarily the general

00:41:17,679 --> 00:41:24,279
public and then a post commit and this

00:41:22,509 --> 00:41:28,419
is the first post commit hook that I've

00:41:24,279 --> 00:41:30,369
talked about you can scrape the log you

00:41:28,419 --> 00:41:34,209
can convert it and make it publishable

00:41:30,369 --> 00:41:35,589
and you can allow the hotfix tag that

00:41:34,209 --> 00:41:37,390
I've just talked about to be treated

00:41:35,589 --> 00:41:40,269
completely differently so you could

00:41:37,390 --> 00:41:43,599
exclude those commits from a change log

00:41:40,269 --> 00:41:45,999
or put them as a separate list and you

00:41:43,599 --> 00:41:49,089
could allow merging up from trunk and

00:41:45,999 --> 00:41:51,579
merging a third-party software also to

00:41:49,089 --> 00:41:53,409
be treated differently and most

00:41:51,579 --> 00:41:57,609
importantly when you're working with

00:41:53,409 --> 00:42:01,239
multiple repositories that all feed

00:41:57,609 --> 00:42:03,429
components into the same product you can

00:42:01,239 --> 00:42:06,539
combine logs from multiple sources and

00:42:03,429 --> 00:42:08,170
this isn't your elk stack compiling

00:42:06,539 --> 00:42:11,260
combining applique

00:42:08,170 --> 00:42:14,650
logs this is a way of getting your

00:42:11,260 --> 00:42:21,329
change looks in a format that somebody

00:42:14,650 --> 00:42:24,849
can read update publish so this is a

00:42:21,329 --> 00:42:29,819
fairly standard example commit message

00:42:24,849 --> 00:42:35,260
check this one's svn there are get

00:42:29,819 --> 00:42:38,619
obviously that are available if you're

00:42:35,260 --> 00:42:40,329
running this sort of thing on get one of

00:42:38,619 --> 00:42:42,430
the gotchas that i came across is that

00:42:40,329 --> 00:42:45,190
when you check out the repository and

00:42:42,430 --> 00:42:49,690
clone your own copy you don't get these

00:42:45,190 --> 00:42:53,230
by default does everybody know that okay

00:42:49,690 --> 00:42:55,750
good just me then every day is a

00:42:53,230 --> 00:42:58,720
learning day so you can check for

00:42:55,750 --> 00:43:02,200
minimum length in this way and pattern

00:42:58,720 --> 00:43:04,420
matching you can allow for particular

00:43:02,200 --> 00:43:08,500
special tags that relate to third

00:43:04,420 --> 00:43:11,500
parties so here for instance that is a

00:43:08,500 --> 00:43:15,790
regex that matches up with a jira ticket

00:43:11,500 --> 00:43:18,250
number that will match up with a no JIRA

00:43:15,790 --> 00:43:23,339
I'm glad JIRA for this it's a hotfix go

00:43:18,250 --> 00:43:26,650
away and and this particular example

00:43:23,339 --> 00:43:30,780
that i found on grimaces biz blog had

00:43:26,650 --> 00:43:37,240
maven release plugin so third-party code

00:43:30,780 --> 00:43:39,640
so on your post commit or by a cron job

00:43:37,240 --> 00:43:42,849
or some kind of automated regular

00:43:39,640 --> 00:43:44,710
process you could scrape the details now

00:43:42,849 --> 00:43:52,299
this is Python script that I just not

00:43:44,710 --> 00:43:55,079
done so this runs an output of the

00:43:52,299 --> 00:43:59,410
command line and puts it in a variable

00:43:55,079 --> 00:44:03,309
uses a nice little module that pythons

00:43:59,410 --> 00:44:06,190
got which is XML to dictionary so this

00:44:03,309 --> 00:44:08,380
svn log xml option makes it machine

00:44:06,190 --> 00:44:11,109
readable so it's just easily possible

00:44:08,380 --> 00:44:12,640
the human readable is really good if

00:44:11,109 --> 00:44:15,910
you're going to look at it screen but

00:44:12,640 --> 00:44:18,579
it's not so useful for doing data

00:44:15,910 --> 00:44:21,319
analysis with so you can check out a

00:44:18,579 --> 00:44:26,269
different repro

00:44:21,319 --> 00:44:31,819
and you can add your additional data in

00:44:26,269 --> 00:44:34,190
there and extract it rip out the ones

00:44:31,819 --> 00:44:37,609
that you don't want so I just gone

00:44:34,190 --> 00:44:40,369
through that range is effectively a

00:44:37,609 --> 00:44:44,180
reverse full loop so it will go through

00:44:40,369 --> 00:44:46,069
things in reverse order and you end up

00:44:44,180 --> 00:44:47,420
with at the end of this a dictionary of

00:44:46,069 --> 00:44:49,579
the entries that you want to work with

00:44:47,420 --> 00:44:55,940
now you could do anything them up you

00:44:49,579 --> 00:45:00,019
could only add the latest ones you can

00:44:55,940 --> 00:45:02,900
ftp it somewhere you could push these

00:45:00,019 --> 00:45:07,390
entries on to a message queue and you

00:45:02,900 --> 00:45:09,650
can do email notification now I'm

00:45:07,390 --> 00:45:12,979
running short a time so I'm going to

00:45:09,650 --> 00:45:16,519
skip over the next couple of slides

00:45:12,979 --> 00:45:17,930
really really quickly and so this side

00:45:16,519 --> 00:45:22,009
is about keeping everything in the loop

00:45:17,930 --> 00:45:24,920
so everyone can be notified when they

00:45:22,009 --> 00:45:27,469
want to be notified so we can avoid

00:45:24,920 --> 00:45:28,849
duplication we can keep it relevant we

00:45:27,469 --> 00:45:30,499
can make sure that you don't get

00:45:28,849 --> 00:45:32,900
notifications for every single commit

00:45:30,499 --> 00:45:34,400
ever because you won't read them and if

00:45:32,900 --> 00:45:37,459
you like me that will filter straight

00:45:34,400 --> 00:45:40,069
into the bit rubbish so there's a number

00:45:37,459 --> 00:45:41,959
of options of ways that you can notify

00:45:40,069 --> 00:45:43,609
people there and if you want to know

00:45:41,959 --> 00:45:46,789
more about them you can always catch up

00:45:43,609 --> 00:45:50,150
with me after the talk you can also

00:45:46,789 --> 00:45:52,880
start a revolution so your post commit

00:45:50,150 --> 00:45:56,959
hook can talk to Jenkins API or bamboo

00:45:52,880 --> 00:46:00,199
API or run deck API be aware that the

00:45:56,959 --> 00:46:02,719
server load of Jenkins or jira for that

00:46:00,199 --> 00:46:04,789
matter on notifications has to be taken

00:46:02,719 --> 00:46:06,859
into account I've heard of JIRA Service

00:46:04,789 --> 00:46:11,180
being turned off because their API use

00:46:06,859 --> 00:46:13,219
took down server so always were having a

00:46:11,180 --> 00:46:16,969
communication with the rest of your team

00:46:13,219 --> 00:46:18,650
and the wider business and so it's

00:46:16,969 --> 00:46:24,650
fairly obvious the things that you can

00:46:18,650 --> 00:46:28,640
do to set that off so do i would urge

00:46:24,650 --> 00:46:30,680
everyone emerging myself as well to get

00:46:28,640 --> 00:46:33,199
comfortable with the basics again always

00:46:30,680 --> 00:46:34,470
make sure that stays in your head talk

00:46:33,199 --> 00:46:36,540
to each other

00:46:34,470 --> 00:46:40,050
it's not just technical solutions that

00:46:36,540 --> 00:46:42,960
can solve these problems care about your

00:46:40,050 --> 00:46:45,359
code I hope everyone here cares about

00:46:42,960 --> 00:46:48,540
their cones and passionate about it as I

00:46:45,359 --> 00:46:53,190
am and consider how version control can

00:46:48,540 --> 00:47:00,060
fit in and get the most out of it don't

00:46:53,190 --> 00:47:02,670
panic these slides will be upon speaker

00:47:00,060 --> 00:47:08,730
deck after the talk and there's a number

00:47:02,670 --> 00:47:11,900
of slides about the extra topics and

00:47:08,730 --> 00:47:15,420
extra information that you can look at

00:47:11,900 --> 00:47:18,599
my slides are creative commons license

00:47:15,420 --> 00:47:20,609
and all of the images in there and all

00:47:18,599 --> 00:47:22,650
the content in there I tried to create

00:47:20,609 --> 00:47:27,000
it as much as I can if you spot anything

00:47:22,650 --> 00:47:29,660
that you think needs to be referenced in

00:47:27,000 --> 00:47:32,550
a different way please do let me know

00:47:29,660 --> 00:47:34,619
thank you very much for listening please

00:47:32,550 --> 00:47:37,560
give me feedback you've been her

00:47:34,619 --> 00:47:39,720
fabulous audience and I'd really like to

00:47:37,560 --> 00:47:42,540
hear the good side and the bad sides

00:47:39,720 --> 00:47:49,820
what I could do better next time are

00:47:42,540 --> 00:47:49,820
there any questions great skup

00:47:56,150 --> 00:48:03,319
hi I'm just wondering just far as far as

00:47:59,930 --> 00:48:04,099
use and svn as their chosen version

00:48:03,319 --> 00:48:08,779
control system or is that your

00:48:04,099 --> 00:48:11,270
preference I have in my career the most

00:48:08,779 --> 00:48:13,130
experience with the SVM it's certainly

00:48:11,270 --> 00:48:14,660
not the only thing that passos is used

00:48:13,130 --> 00:48:17,210
okay i'm probably going to start a flame

00:48:14,660 --> 00:48:19,690
roll something but what are what are

00:48:17,210 --> 00:48:22,549
your reasons for choosing svn oh forget

00:48:19,690 --> 00:48:25,970
my reasons for choosing svn over the

00:48:22,549 --> 00:48:28,789
gate probably just experience it isn't

00:48:25,970 --> 00:48:30,619
that I have chosen svn over get it's

00:48:28,789 --> 00:48:32,869
just that I've spent more years using it

00:48:30,619 --> 00:48:36,079
I first started using version control

00:48:32,869 --> 00:48:38,029
when I was freelancing basically to help

00:48:36,079 --> 00:48:40,549
myself because I coated myself into a

00:48:38,029 --> 00:48:42,339
hole I spent a day coding myself out of

00:48:40,549 --> 00:48:44,420
a hole I never want to do that again

00:48:42,339 --> 00:48:46,549
subversion was just the first thing I

00:48:44,420 --> 00:48:50,539
came across okay so it's just history

00:48:46,549 --> 00:48:53,240
it's it was not feature specific sorry

00:48:50,539 --> 00:48:55,039
to carry on but I feel like if you use

00:48:53,240 --> 00:48:56,240
get instead of SP and it probably would

00:48:55,039 --> 00:48:57,980
have solved a lot of your problems with

00:48:56,240 --> 00:49:00,289
merging and the branches because it uses

00:48:57,980 --> 00:49:05,029
a different kind of structure absolutely

00:49:00,289 --> 00:49:07,609
I think it has a lot of advantages this

00:49:05,029 --> 00:49:11,720
talk is really for people that still

00:49:07,609 --> 00:49:15,079
feel like they can't ask all of the

00:49:11,720 --> 00:49:17,750
questions so when for instance when you

00:49:15,079 --> 00:49:19,760
first join the company if you come if

00:49:17,750 --> 00:49:21,890
you come into contact with the version

00:49:19,760 --> 00:49:24,140
control systems either you haven't used

00:49:21,890 --> 00:49:26,690
before or you haven't used in the way

00:49:24,140 --> 00:49:29,869
that the company is using it then

00:49:26,690 --> 00:49:31,730
sometimes I feel uh it's it's not rocket

00:49:29,869 --> 00:49:33,619
science I should be able to ask a

00:49:31,730 --> 00:49:36,500
question about it I'll look really

00:49:33,619 --> 00:49:38,809
stupid and and I wouldn't want anyone to

00:49:36,500 --> 00:49:43,150
feel like that that I wrote it so fair

00:49:38,809 --> 00:49:43,150
answer thank you good questions

00:49:48,859 --> 00:50:03,140
what's my twitter handle oh this means i

00:49:51,980 --> 00:50:06,460
going to go right back to the start yeah

00:50:03,140 --> 00:50:08,599
it's it's just interesting to spell ah

00:50:06,460 --> 00:50:13,119
there should be a shortcut in this i'm

00:50:08,599 --> 00:50:13,119
sure there is that'sthat's my homework

00:50:22,779 --> 00:50:33,109
okay i think that should stay up there

00:50:28,099 --> 00:50:35,059
now if it's now other questions thank

00:50:33,109 --> 00:50:39,249
you very much for being a very attentive

00:50:35,059 --> 00:50:39,249

YouTube URL: https://www.youtube.com/watch?v=HPQAXX_-2Aw


