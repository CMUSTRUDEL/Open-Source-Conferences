Title: PHP UK Conference 2012 - Scaling communication with Continuous Integration, by LB Denker
Publication date: 2012-03-14
Playlist: PHP UK Conference 2012
Description: 
	http://www.phpconference.co.uk/talk/scaling-communication-continuous-integration

At Etsy, we continuously deploy code. New features and bug fixes can go from development to production in 20 minutes. We have maintained this low barrier to deployment over the past year despite nearly doubling the number of people that can deploy.

Communication has a huge impact on the velocity of development and moving forward. We explicitly communicate over IRC, but we also evolve communication patterns through several other vectors, and one of those vectors is our Continuous Integration environment.

In this talk I will not only discuss how communication patterns at Etsy have evolved with our growing development team, but I will also elaborate on how team size, role composition, motivation, culture, and available tools sets can impact communication patterns and subsequently throughput.

 
LB Denker graduated from RIT with a BS/MS in Computational Mathematics/Computer Science. She then moved on to a small job in a small city in central New York before being courted by Google, bringing her to the Big Apple, where she worked in both test and development for over 4 years. Now she has taken a turn for the handmade, helping Etsy grow its spectacular development culture and continuous deployment process as the self-proclaimed Anthropologist of Developer Operations.
Captions: 
	00:00:07,929 --> 00:00:13,660
okay so welcome to scaling communication

00:00:12,230 --> 00:00:19,720
via continuous

00:00:13,660 --> 00:00:22,420
duration I changed the opening slide

00:00:19,720 --> 00:00:27,009
from what you saw in the program but I

00:00:22,420 --> 00:00:30,670
still maintain this one picture and it's

00:00:27,009 --> 00:00:34,300
of an interesting stop light so around

00:00:30,670 --> 00:00:38,050
the 1920s automobiles got quite popular

00:00:34,300 --> 00:00:40,840
and we needed some way to be able to

00:00:38,050 --> 00:00:42,730
communicate to people that hey you're

00:00:40,840 --> 00:00:44,320
sharing the road with other people and

00:00:42,730 --> 00:00:46,480
you can't just keep driving through

00:00:44,320 --> 00:00:53,230
intersections without possibly getting

00:00:46,480 --> 00:00:57,340
t-boned or something else well we have a

00:00:53,230 --> 00:00:59,289
normal symbol for this that communicates

00:00:57,340 --> 00:01:04,509
this and it was the four-way stop light

00:00:59,289 --> 00:01:06,310
a top right corner if you notice it has

00:01:04,509 --> 00:01:11,259
the red light on top and the green light

00:01:06,310 --> 00:01:13,030
on the bottom this one doesn't there was

00:01:11,259 --> 00:01:16,050
a reason for the standardization and

00:01:13,030 --> 00:01:19,420
it's gotten you know turned into a

00:01:16,050 --> 00:01:21,280
support the colorblind but back in the

00:01:19,420 --> 00:01:23,259
1920s not so many people cared about

00:01:21,280 --> 00:01:25,720
people with color blindness or other

00:01:23,259 --> 00:01:29,729
disabilities and there was this one

00:01:25,720 --> 00:01:34,090
little Irish town in Syracuse New York

00:01:29,729 --> 00:01:36,190
that saw the British read above the

00:01:34,090 --> 00:01:38,080
irish green and freaked out and stoned

00:01:36,190 --> 00:01:42,880
the light every single time i would keep

00:01:38,080 --> 00:01:46,479
putting it off so they are privy to

00:01:42,880 --> 00:01:49,229
having it upside down so what analogy

00:01:46,479 --> 00:01:53,080
would I even be drawing from this it's

00:01:49,229 --> 00:01:55,060
that there are many things that commute

00:01:53,080 --> 00:01:57,160
that communicate to us what we're

00:01:55,060 --> 00:01:59,500
supposed to be doing and we heat them

00:01:57,160 --> 00:02:01,959
but sometimes depending on your

00:01:59,500 --> 00:02:07,869
situation it might have to be different

00:02:01,959 --> 00:02:10,660
than all other situations so I'm lb

00:02:07,869 --> 00:02:13,690
Denker I have this a wonderfully pompous

00:02:10,660 --> 00:02:16,120
title of anthropologists of developer

00:02:13,690 --> 00:02:17,950
culture which is another thing I changed

00:02:16,120 --> 00:02:22,360
since they wrote the biography in the

00:02:17,950 --> 00:02:26,290
book and yes I did actually say

00:02:22,360 --> 00:02:29,090
anthropologist now

00:02:26,290 --> 00:02:31,490
it's only sort of i do not have an

00:02:29,090 --> 00:02:34,550
anthropology degree i have mathematics

00:02:31,490 --> 00:02:38,210
and computer science so what am i doing

00:02:34,550 --> 00:02:39,980
talking about that well my official

00:02:38,210 --> 00:02:42,620
title on papers something like senior

00:02:39,980 --> 00:02:44,420
software engineer but I feel that's its

00:02:42,620 --> 00:02:48,460
kind of disservice for me to use that

00:02:44,420 --> 00:02:51,560
title since I very rarely ever do

00:02:48,460 --> 00:02:54,350
feature development core work all the

00:02:51,560 --> 00:02:57,380
time I tend to support driving the

00:02:54,350 --> 00:02:59,390
culture forward the other thing is I

00:02:57,380 --> 00:03:00,950
work in like the test and automation

00:02:59,390 --> 00:03:03,560
area I work in continuous integration

00:03:00,950 --> 00:03:05,380
that's why this talk is going to cover

00:03:03,560 --> 00:03:08,240
quite a bit about continuous integration

00:03:05,380 --> 00:03:09,350
but I don't write anybody's tests and

00:03:08,240 --> 00:03:10,670
most times when you say software

00:03:09,350 --> 00:03:12,740
engineer and tests everybody's like oh

00:03:10,670 --> 00:03:15,530
all you do is test all this and actually

00:03:12,740 --> 00:03:17,300
I only test whatever I'm doing I don't

00:03:15,530 --> 00:03:19,900
test other people's stuff everybody else

00:03:17,300 --> 00:03:22,780
I can test their stuff right so

00:03:19,900 --> 00:03:25,430
anthropologist sort of but I do

00:03:22,780 --> 00:03:28,610
participant observations interviews and

00:03:25,430 --> 00:03:30,110
surveys I actually look at what the

00:03:28,610 --> 00:03:35,660
developers are doing on a regular basis

00:03:30,110 --> 00:03:38,570
what is tripping them up and my case

00:03:35,660 --> 00:03:43,880
study is the at-sea development culture

00:03:38,570 --> 00:03:45,650
I work at Etsy and at etsy we recently

00:03:43,880 --> 00:03:50,270
published a blog post of the etsy way

00:03:45,650 --> 00:03:53,120
and it is so many times mentioned

00:03:50,270 --> 00:03:55,340
culture culture culture culture is what

00:03:53,120 --> 00:03:58,400
actually drives our development process

00:03:55,340 --> 00:04:01,100
and how we move forward now acquiring

00:03:58,400 --> 00:04:04,340
culture that quote said that it's kind

00:04:01,100 --> 00:04:07,340
of hard to teach culture and it is but

00:04:04,340 --> 00:04:10,310
we all learn culture as we're growing up

00:04:07,340 --> 00:04:12,260
you know you're in your house if you

00:04:10,310 --> 00:04:13,820
grow up in a Catholic household you

00:04:12,260 --> 00:04:17,090
learn all of the rituals of being

00:04:13,820 --> 00:04:20,660
Catholic for example and you learn stuff

00:04:17,090 --> 00:04:22,910
from social musician well part of our

00:04:20,660 --> 00:04:25,220
developer culture is that we always be

00:04:22,910 --> 00:04:27,650
pushing so i'm not sure if you've heard

00:04:25,220 --> 00:04:30,770
about it but i would strongly encourage

00:04:27,650 --> 00:04:32,960
you to read or CODIS craft blogs for it

00:04:30,770 --> 00:04:36,050
to hear about how we do continuous

00:04:32,960 --> 00:04:37,639
deployment to a radical extent we're

00:04:36,050 --> 00:04:40,129
also very big on developer

00:04:37,639 --> 00:04:44,810
happiness we want our developers happy

00:04:40,129 --> 00:04:46,879
happy people do better work and the

00:04:44,810 --> 00:04:50,680
biggest thing is we have to trust the

00:04:46,879 --> 00:04:53,900
people we have to trust everyone now

00:04:50,680 --> 00:04:56,360
that seems it's a very risky thing to

00:04:53,900 --> 00:04:58,939
hope for right because we all make

00:04:56,360 --> 00:05:01,729
mistakes not everybody is always on the

00:04:58,939 --> 00:05:05,479
same page but you have to trust them or

00:05:01,729 --> 00:05:06,789
our system doesn't work so anyway it's

00:05:05,479 --> 00:05:09,800
getting back to anthropology

00:05:06,789 --> 00:05:13,759
anthropology demands the open- with

00:05:09,800 --> 00:05:16,430
which one must look and listen record an

00:05:13,759 --> 00:05:19,370
astonishment of things that one wouldn't

00:05:16,430 --> 00:05:22,009
be able to guess and this is the story

00:05:19,370 --> 00:05:24,409
of all of those things I never would

00:05:22,009 --> 00:05:26,629
have guessed you could have done who

00:05:24,409 --> 00:05:29,270
would have thought that a couple of guys

00:05:26,629 --> 00:05:30,979
that had done continuous deployment at

00:05:29,270 --> 00:05:32,599
flickr with a very small team in a

00:05:30,979 --> 00:05:34,520
shared development environment would

00:05:32,599 --> 00:05:35,719
actually get to go to a company and i

00:05:34,520 --> 00:05:38,229
would get to work with them and we

00:05:35,719 --> 00:05:42,620
actually be able to get a hundred

00:05:38,229 --> 00:05:48,460
programmers to actually deploy in 20

00:05:42,620 --> 00:05:51,409
minutes or less 60 times a day so

00:05:48,460 --> 00:05:53,120
deploying eating all the pushes not sure

00:05:51,409 --> 00:05:55,490
if you've heard of it we did open source

00:05:53,120 --> 00:05:56,599
with deploy tool so if you are one of

00:05:55,490 --> 00:05:58,699
those people that have heard about

00:05:56,599 --> 00:06:00,620
continuous employment and know about the

00:05:58,699 --> 00:06:02,659
idea of you need a one-button deploy

00:06:00,620 --> 00:06:04,159
system you can grab this deployment or

00:06:02,659 --> 00:06:06,169
you can just make your own web page for

00:06:04,159 --> 00:06:07,969
the button on it doesn't matter it's

00:06:06,169 --> 00:06:10,490
just something that encapsulates all of

00:06:07,969 --> 00:06:13,789
the logic and programming that you need

00:06:10,490 --> 00:06:17,210
to do to actually get your information

00:06:13,789 --> 00:06:20,750
on the servers some good things logging

00:06:17,210 --> 00:06:24,860
monitoring but because we have to trust

00:06:20,750 --> 00:06:28,009
all the people no child safety locks so

00:06:24,860 --> 00:06:30,800
you if you get in and you can actually

00:06:28,009 --> 00:06:34,909
go to this page you can push any of

00:06:30,800 --> 00:06:36,710
those buttons whenever you want but we

00:06:34,909 --> 00:06:39,770
trust you why would you do something so

00:06:36,710 --> 00:06:41,000
stupid and besides we can fix it so I'm

00:06:39,770 --> 00:06:43,610
going to take 20 minutes for us to fix

00:06:41,000 --> 00:06:47,269
it and we mean anyone come into play we

00:06:43,610 --> 00:06:49,009
have board members that do it and we're

00:06:47,269 --> 00:06:50,490
to 20 minutes or less but it wasn't

00:06:49,009 --> 00:06:53,560
always like that

00:06:50,490 --> 00:06:56,440
so continues what I just talked a bunch

00:06:53,560 --> 00:06:58,270
about continuous deployment but there

00:06:56,440 --> 00:07:00,040
are three common things to people talk

00:06:58,270 --> 00:07:03,070
about with the word continuous in front

00:07:00,040 --> 00:07:05,530
of them there are well they can be

00:07:03,070 --> 00:07:07,240
considered different there is continues

00:07:05,530 --> 00:07:09,700
to plan which I just talked about push

00:07:07,240 --> 00:07:11,470
new code to production and basically

00:07:09,700 --> 00:07:13,180
anyone should be able to do that or

00:07:11,470 --> 00:07:15,870
pretty much anybody the implemented code

00:07:13,180 --> 00:07:17,830
should definitely be able to do that um

00:07:15,870 --> 00:07:19,090
continuous delivery we're not really

00:07:17,830 --> 00:07:20,560
going to talk about too much because

00:07:19,090 --> 00:07:22,570
that's kind of a product driven thing

00:07:20,560 --> 00:07:24,880
that's like an how often can you deploy

00:07:22,570 --> 00:07:26,500
new features and deploy new features

00:07:24,880 --> 00:07:28,840
doesn't necessarily correlate so

00:07:26,500 --> 00:07:31,240
deployment and what we're going to talk

00:07:28,840 --> 00:07:33,280
about mostly now is a continuous

00:07:31,240 --> 00:07:36,640
integration which is applying quality

00:07:33,280 --> 00:07:38,020
process so yes you can apply the quality

00:07:36,640 --> 00:07:41,590
process every single time you do the

00:07:38,020 --> 00:07:44,260
deployment but to really have continuous

00:07:41,590 --> 00:07:48,190
integration you should be doing it more

00:07:44,260 --> 00:07:52,170
than you do deployments unless of course

00:07:48,190 --> 00:07:54,190
you're deploying every two seconds so I

00:07:52,170 --> 00:07:56,290
also mentioned we're going to talk about

00:07:54,190 --> 00:07:57,880
some communication so I thought it would

00:07:56,290 --> 00:07:59,260
be nice to throw up some communication

00:07:57,880 --> 00:08:02,950
theory stuff so it sounds like I know

00:07:59,260 --> 00:08:04,600
something and we have the basic elements

00:08:02,950 --> 00:08:06,580
of communication source center channel

00:08:04,600 --> 00:08:10,450
receiver destination message and

00:08:06,580 --> 00:08:14,170
feedback if you think about a email a

00:08:10,450 --> 00:08:16,240
you know sending the email email it

00:08:14,170 --> 00:08:17,920
could be considered a channel itself the

00:08:16,240 --> 00:08:19,960
sender would be like your client that

00:08:17,920 --> 00:08:21,730
creates the message and transmits is

00:08:19,960 --> 00:08:24,010
over the receiver would be the other

00:08:21,730 --> 00:08:25,930
person's email client destination would

00:08:24,010 --> 00:08:28,930
be the audience receiving it the source

00:08:25,930 --> 00:08:30,640
would be who would be like wherever the

00:08:28,930 --> 00:08:32,500
person got the idea from so somebody

00:08:30,640 --> 00:08:34,840
read a new book about clean code and

00:08:32,500 --> 00:08:39,130
they put out a new clean code decree yay

00:08:34,840 --> 00:08:40,240
that's your source and and most of our

00:08:39,130 --> 00:08:42,580
communication that we're talking about

00:08:40,240 --> 00:08:44,229
is going to be with see is a channel and

00:08:42,580 --> 00:08:47,410
it's going to be a goal oriented

00:08:44,229 --> 00:08:49,360
communication and our goals of what we

00:08:47,410 --> 00:08:52,030
want to communicate via continuous

00:08:49,360 --> 00:08:53,740
integration is that people should always

00:08:52,030 --> 00:08:56,290
be pushing they should have a confidence

00:08:53,740 --> 00:08:59,560
to just always be pushing you shouldn't

00:08:56,290 --> 00:09:03,880
push on red red meaning like tests are

00:08:59,560 --> 00:09:04,780
failing and believe it or not for some

00:09:03,880 --> 00:09:05,980
people is really high

00:09:04,780 --> 00:09:07,510
to get over that especially if you got

00:09:05,980 --> 00:09:09,670
test weights to fail all the time it's

00:09:07,510 --> 00:09:13,060
very hard to get over oh I need to wait

00:09:09,670 --> 00:09:15,780
until it's green you should write clean

00:09:13,060 --> 00:09:18,730
tests you should write clean code and

00:09:15,780 --> 00:09:21,160
you should trust everyone to do the

00:09:18,730 --> 00:09:24,460
right thing is everything has to revolve

00:09:21,160 --> 00:09:25,810
around chest so always be pushing so

00:09:24,460 --> 00:09:29,200
back a year and a half ago when I first

00:09:25,810 --> 00:09:32,080
joined I literally went around to every

00:09:29,200 --> 00:09:34,660
single team and said give me one person

00:09:32,080 --> 00:09:36,940
or two people on your team and I want to

00:09:34,660 --> 00:09:39,280
sit down with them and just watch what

00:09:36,940 --> 00:09:40,960
they do on a regular basis part of this

00:09:39,280 --> 00:09:42,190
was because I was terrified out of my

00:09:40,960 --> 00:09:43,900
mind because I had just come from a

00:09:42,190 --> 00:09:45,730
company that how all this figured

00:09:43,900 --> 00:09:47,530
out like they knew what they were doing

00:09:45,730 --> 00:09:50,080
at the time everything was organizing

00:09:47,530 --> 00:09:51,970
you use these editors you use this

00:09:50,080 --> 00:09:53,170
system and everything was pre building

00:09:51,970 --> 00:09:57,670
you didn't have to install anything

00:09:53,170 --> 00:10:00,670
yourself pretty you know cool right and

00:09:57,670 --> 00:10:05,260
now as you know cowboy land had to

00:10:00,670 --> 00:10:09,310
actually do stuff with unmanaged

00:10:05,260 --> 00:10:10,660
territory and so part of it was I need

00:10:09,310 --> 00:10:15,490
to figure out what the hell I was doing

00:10:10,660 --> 00:10:17,230
I was kind of over my head and we

00:10:15,490 --> 00:10:21,310
discovered a few things that were

00:10:17,230 --> 00:10:23,590
actually tripping people up one thing is

00:10:21,310 --> 00:10:25,510
we weren't deploying that often we

00:10:23,590 --> 00:10:27,400
actually were only doing like 125

00:10:25,510 --> 00:10:30,910
deploys a day in fact there were days

00:10:27,400 --> 00:10:33,280
that there were no deploys and for a

00:10:30,910 --> 00:10:34,930
culture that was saying hey we really

00:10:33,280 --> 00:10:38,530
want to be able to do continuous

00:10:34,930 --> 00:10:41,920
deployment seriously like whenever that

00:10:38,530 --> 00:10:43,500
just wasn't going to work and part of it

00:10:41,920 --> 00:10:49,150
was because there was absolutely no

00:10:43,500 --> 00:10:51,430
confidence so continuous deployment is a

00:10:49,150 --> 00:10:54,240
safety net if you can deploy every few

00:10:51,430 --> 00:10:58,570
minutes it is an immense safety net

00:10:54,240 --> 00:11:01,120
because you're going to screw up but you

00:10:58,570 --> 00:11:03,670
can fix it in just a few minutes but it

00:11:01,120 --> 00:11:05,650
is completely scary because you push the

00:11:03,670 --> 00:11:08,380
vibe you put something on production and

00:11:05,650 --> 00:11:10,320
might just take it down and nobody wants

00:11:08,380 --> 00:11:13,000
to be that guy that took down the server

00:11:10,320 --> 00:11:15,010
so it depends on your point of view as

00:11:13,000 --> 00:11:17,950
to whether or not you feel safer or

00:11:15,010 --> 00:11:19,990
you're scared out of your mind well one

00:11:17,950 --> 00:11:22,380
of the things we found that was a pain

00:11:19,990 --> 00:11:26,520
the butt was branching was too costly so

00:11:22,380 --> 00:11:30,300
I remember one of the days where a team

00:11:26,520 --> 00:11:33,280
took eight hours merging a branch in

00:11:30,300 --> 00:11:35,260
well all right do you have continuous

00:11:33,280 --> 00:11:39,070
deployment if you spend eight hours put

00:11:35,260 --> 00:11:41,320
you know merging a branch in No and is

00:11:39,070 --> 00:11:42,760
that one team with how many people and

00:11:41,320 --> 00:11:45,820
how many more people are you going to

00:11:42,760 --> 00:11:47,740
add to the company that's going to take

00:11:45,820 --> 00:11:49,390
at that point I think we had seven teams

00:11:47,740 --> 00:11:50,980
you basically would have to give

00:11:49,390 --> 00:11:54,730
everybody a day of the week to do a

00:11:50,980 --> 00:11:56,380
deployment and you want to actually

00:11:54,730 --> 00:11:58,150
build two birds have even more teams

00:11:56,380 --> 00:11:59,590
because soon it would take a month

00:11:58,150 --> 00:12:04,390
before you ever got to do a deployment

00:11:59,590 --> 00:12:05,920
and that's not continuous so one way

00:12:04,390 --> 00:12:08,020
that we supported this with the

00:12:05,920 --> 00:12:10,060
continuous integration is that all the

00:12:08,020 --> 00:12:12,810
tools and CI everything that ran in CI

00:12:10,060 --> 00:12:16,270
did not support branches oh no

00:12:12,810 --> 00:12:18,700
everything was trunk based you had to

00:12:16,270 --> 00:12:22,090
work on trunk and if you worked on

00:12:18,700 --> 00:12:25,180
branches you're an expert good for you

00:12:22,090 --> 00:12:27,010
and you're going to figure out how to

00:12:25,180 --> 00:12:29,980
keep up with everybody else who's not

00:12:27,010 --> 00:12:31,810
doing branches and if you can awesome if

00:12:29,980 --> 00:12:35,620
you can't well then I'm going to go back

00:12:31,810 --> 00:12:38,260
to trunk the other thing was with repo

00:12:35,620 --> 00:12:40,750
layout and branches we also had a bunch

00:12:38,260 --> 00:12:44,080
of tools that i would say smelled like

00:12:40,750 --> 00:12:46,330
unicorn so they did lots of magical

00:12:44,080 --> 00:12:48,520
things or removed everyone from actually

00:12:46,330 --> 00:12:50,320
knowing what was going on and so the

00:12:48,520 --> 00:12:53,050
other takeaway was right transparent

00:12:50,320 --> 00:12:56,200
tools another thing that was a problem

00:12:53,050 --> 00:12:57,400
as I mentioned earlier continuous

00:12:56,200 --> 00:13:00,120
integration and continuous deployment

00:12:57,400 --> 00:13:03,570
aren't necessarily the same thing and

00:13:00,120 --> 00:13:05,440
they couldn't apply the quality process

00:13:03,570 --> 00:13:08,710
continuously because it was coupled to

00:13:05,440 --> 00:13:13,420
the pipeline so we introduced this

00:13:08,710 --> 00:13:16,960
concept of try which was simply at the

00:13:13,420 --> 00:13:19,080
time Oh we'll take an SVM patch file and

00:13:16,960 --> 00:13:21,730
sends it to the server and where this

00:13:19,080 --> 00:13:24,370
actually grew out of is once we got a

00:13:21,730 --> 00:13:27,550
test team we got resources to run tests

00:13:24,370 --> 00:13:30,940
and as in machines

00:13:27,550 --> 00:13:34,899
and people were like I can't run this

00:13:30,940 --> 00:13:37,240
test on my developer vm so can I just

00:13:34,899 --> 00:13:39,700
borrow some time on the test server

00:13:37,240 --> 00:13:42,310
because that's pretty ba it's pretty

00:13:39,700 --> 00:13:45,880
awesome and so before you knew it

00:13:42,310 --> 00:13:48,490
someone said oh yeah just SS agents in a

00:13:45,880 --> 00:13:50,260
box and have at it and then told another

00:13:48,490 --> 00:13:52,240
person and told another person and

00:13:50,260 --> 00:13:53,950
before you knew it there were a couple

00:13:52,240 --> 00:13:58,300
guys on at a time stepping on each

00:13:53,950 --> 00:14:01,149
other's toes so we use parameterised

00:13:58,300 --> 00:14:04,480
builds and jenkins so pacify low over

00:14:01,149 --> 00:14:06,279
that was patch file and voila they had

00:14:04,480 --> 00:14:08,140
the experience of running on the CI

00:14:06,279 --> 00:14:12,820
software with what they were soon going

00:14:08,140 --> 00:14:15,910
to commit with out having to block the

00:14:12,820 --> 00:14:18,040
pipeline before they would just be like

00:14:15,910 --> 00:14:20,500
well I couldn't run on my machine I'll

00:14:18,040 --> 00:14:23,740
put myself in the queue for the pipeline

00:14:20,500 --> 00:14:26,980
I'll go do its employment and I'll try

00:14:23,740 --> 00:14:29,079
to run my tests and well you know they

00:14:26,980 --> 00:14:32,350
might fit because I continued tried them

00:14:29,079 --> 00:14:35,800
and it would take a little while to run

00:14:32,350 --> 00:14:39,190
and this one ended up getting community

00:14:35,800 --> 00:14:41,490
forest eventually because now whenever

00:14:39,190 --> 00:14:44,649
somebody is waiting to do a deployment

00:14:41,490 --> 00:14:46,779
if somebody breaks the build they're

00:14:44,649 --> 00:14:49,029
upset they're like why didn't you try it

00:14:46,779 --> 00:14:51,490
beforehand you had every chance in the

00:14:49,029 --> 00:14:54,220
world to not block us up and now you're

00:14:51,490 --> 00:14:56,350
wasting our time and so it was kind of

00:14:54,220 --> 00:15:00,550
nice having you know community driven

00:14:56,350 --> 00:15:02,560
effort on the whole thing and this try

00:15:00,550 --> 00:15:04,029
thing was our biggest confidence boost

00:15:02,560 --> 00:15:06,370
this is like the number of deployments

00:15:04,029 --> 00:15:07,959
that we were doing as you can see you

00:15:06,370 --> 00:15:10,540
know it's like bouncing in the five

00:15:07,959 --> 00:15:12,970
maybe up to 10 but then as soon as we

00:15:10,540 --> 00:15:14,949
introduce the try server huge spikes at

00:15:12,970 --> 00:15:21,070
the ends we started actually deploying

00:15:14,949 --> 00:15:24,640
code somewhat continuously so as I said

00:15:21,070 --> 00:15:27,160
why try because we don't want to clog

00:15:24,640 --> 00:15:30,670
the tubes and that's it just moves CI to

00:15:27,160 --> 00:15:33,670
being as in CI without try into being

00:15:30,670 --> 00:15:36,970
just the final sanity check so goal

00:15:33,670 --> 00:15:39,980
achieve always be pushing so you should

00:15:36,970 --> 00:15:42,620
not push on red denoising the commune

00:15:39,980 --> 00:15:45,350
occasion channel this one was kind of

00:15:42,620 --> 00:15:48,470
over participant observation over IRC

00:15:45,350 --> 00:15:51,290
because we would be watching people in

00:15:48,470 --> 00:15:58,090
the deploy pipeline and a test would

00:15:51,290 --> 00:16:01,130
break and people would be confused

00:15:58,090 --> 00:16:03,500
partially because took a long time to

00:16:01,130 --> 00:16:06,500
run but it had a high flakiness factor

00:16:03,500 --> 00:16:09,020
the test would fail like half the time

00:16:06,500 --> 00:16:12,290
why they were full stack tests they had

00:16:09,020 --> 00:16:14,570
to go over an svn tunnel to ec2

00:16:12,290 --> 00:16:16,720
instances whole bunches of points of

00:16:14,570 --> 00:16:19,960
failures to make them very flaky and

00:16:16,720 --> 00:16:24,020
there was practically no one that knew

00:16:19,960 --> 00:16:27,980
what the tests were testing or how to

00:16:24,020 --> 00:16:30,920
fix them so there would be a lot of time

00:16:27,980 --> 00:16:33,290
just spent during a deployment where

00:16:30,920 --> 00:16:36,290
people would be talking saying hey this

00:16:33,290 --> 00:16:40,370
thing broke jaw fix it you know what to

00:16:36,290 --> 00:16:41,870
do and so this would get even worse is

00:16:40,370 --> 00:16:45,410
you got more and more people at this

00:16:41,870 --> 00:16:47,510
time we only had maybe 40 engineers and

00:16:45,410 --> 00:16:50,360
now we're to 100 we're more than double

00:16:47,510 --> 00:16:52,370
as you get bigger it gets harder to know

00:16:50,360 --> 00:16:55,430
who's that guy that knows what that

00:16:52,370 --> 00:17:02,060
feature does it's very difficult thing

00:16:55,430 --> 00:17:05,030
to do so what you need to think about is

00:17:02,060 --> 00:17:06,440
if you are going to have tests and you

00:17:05,030 --> 00:17:09,380
are going to make sure that you're not

00:17:06,440 --> 00:17:11,630
pushing on red you need to make sure you

00:17:09,380 --> 00:17:14,470
know what is being covered how much is

00:17:11,630 --> 00:17:16,880
being covered how do the tests work and

00:17:14,470 --> 00:17:19,760
most importantly you need to have

00:17:16,880 --> 00:17:22,640
actionable test results you need to have

00:17:19,760 --> 00:17:26,090
test results that tell you something to

00:17:22,640 --> 00:17:28,520
do something to fix them if you have

00:17:26,090 --> 00:17:31,700
tests that just flake for no reason and

00:17:28,520 --> 00:17:38,210
the action item is rerun the tests

00:17:31,700 --> 00:17:40,910
you're doing it wrong so our actual

00:17:38,210 --> 00:17:43,790
solution to this not very glamorous it's

00:17:40,910 --> 00:17:45,770
late at all the tests and someone is

00:17:43,790 --> 00:17:47,870
probably thinking you are really crazy

00:17:45,770 --> 00:17:49,910
you just deleted a whole bunch of test

00:17:47,870 --> 00:17:53,310
coverage but the thing is if you don't

00:17:49,910 --> 00:17:55,590
know what they cover then it is

00:17:53,310 --> 00:17:57,240
coverage it doesn't matter you were

00:17:55,590 --> 00:17:59,070
wasting your time you would have been

00:17:57,240 --> 00:18:01,950
better off spending all that time you

00:17:59,070 --> 00:18:07,380
were waiting for that rerunning it doing

00:18:01,950 --> 00:18:09,180
a manual test all by yourself so no

00:18:07,380 --> 00:18:12,300
pushing on red because the tests were

00:18:09,180 --> 00:18:17,460
passing on a regular basis are closed so

00:18:12,300 --> 00:18:20,850
writing clean tests alternative teaching

00:18:17,460 --> 00:18:22,980
methods so when I got hired for the job

00:18:20,850 --> 00:18:24,900
I had actually spent four and a half

00:18:22,980 --> 00:18:27,410
years teaching the developer testing

00:18:24,900 --> 00:18:29,820
course at my previous company so

00:18:27,410 --> 00:18:32,130
probably once a month I would teach all

00:18:29,820 --> 00:18:35,010
new hires what they were supposed to do

00:18:32,130 --> 00:18:37,140
for basic unit testing and I walked in

00:18:35,010 --> 00:18:40,200
to these guys and you know try to teach

00:18:37,140 --> 00:18:43,830
them and the immediate response was we

00:18:40,200 --> 00:18:48,150
can't do that there's no way we can do

00:18:43,830 --> 00:18:51,330
that and so that was like okay well

00:18:48,150 --> 00:18:52,620
obviously teaching you some things this

00:18:51,330 --> 00:18:54,870
isn't the right thing because you're not

00:18:52,620 --> 00:18:56,790
you're not ready to get on board with

00:18:54,870 --> 00:18:58,680
this it's a totally different style it's

00:18:56,790 --> 00:19:01,560
totally different thinking from what

00:18:58,680 --> 00:19:06,740
you're doing and that's just not going

00:19:01,560 --> 00:19:10,800
to happen so had to prove to them that

00:19:06,740 --> 00:19:14,250
having actual unit tests and separating

00:19:10,800 --> 00:19:17,670
them from your database tests and not

00:19:14,250 --> 00:19:20,840
using crazy integration fixture

00:19:17,670 --> 00:19:24,570
frameworks that provide random data

00:19:20,840 --> 00:19:26,910
actually makes a difference and if you

00:19:24,570 --> 00:19:28,260
remember from a couple slides ago I was

00:19:26,910 --> 00:19:30,320
saying the platform test failed on

00:19:28,260 --> 00:19:32,970
probably about a five percent basis and

00:19:30,320 --> 00:19:36,480
oftentimes that was just in setting up

00:19:32,970 --> 00:19:40,550
everything to get those tests to run the

00:19:36,480 --> 00:19:44,970
unit tests 10 seconds of test time

00:19:40,550 --> 00:19:47,190
barely any time per test and then the DB

00:19:44,970 --> 00:19:51,420
unit test 32 seconds and these are all

00:19:47,190 --> 00:19:53,610
far cry from seven minutes well it's

00:19:51,420 --> 00:19:57,060
still about half for the DB unit

00:19:53,610 --> 00:19:58,890
compared to the platform test and once

00:19:57,060 --> 00:20:00,270
we showed them this data and we showed

00:19:58,890 --> 00:20:02,580
them a couple other test Suites like

00:20:00,270 --> 00:20:05,610
test suites with cash test suites that

00:20:02,580 --> 00:20:06,690
use time test Suites had sleep and

00:20:05,610 --> 00:20:10,650
whatnot

00:20:06,690 --> 00:20:14,580
but they were pretty much like oh now

00:20:10,650 --> 00:20:18,300
get it that makes sense and now our unit

00:20:14,580 --> 00:20:21,780
test suite has grown to 8,000 tests and

00:20:18,300 --> 00:20:25,910
the DB unit tests is probably at like

00:20:21,780 --> 00:20:30,270
two or three hundred so not too much not

00:20:25,910 --> 00:20:34,260
too crazy on the growth still four times

00:20:30,270 --> 00:20:38,070
but not too bad and we enabled this pi

00:20:34,260 --> 00:20:40,440
really really stupid stuff we didn't we

00:20:38,070 --> 00:20:42,660
didn't do too much work phpunit has a

00:20:40,440 --> 00:20:44,490
gnat group tag so basically all we did

00:20:42,660 --> 00:20:47,100
was every single test that touched the

00:20:44,490 --> 00:20:50,190
database we went at group database to

00:20:47,100 --> 00:20:52,980
touch the cash at group cash if it had a

00:20:50,190 --> 00:20:55,950
sleep in it a kripp sleep and once we

00:20:52,980 --> 00:20:57,600
did that we could just use phpunit xml

00:20:55,950 --> 00:21:00,090
configuration files for include groups

00:20:57,600 --> 00:21:02,700
and exclude groups we wrap stuff in a

00:21:00,090 --> 00:21:04,950
pig file just because you know we had

00:21:02,700 --> 00:21:09,090
some little Messier stuff with

00:21:04,950 --> 00:21:14,340
environmental variables and it gained us

00:21:09,090 --> 00:21:18,060
one teaching people that it is faster to

00:21:14,340 --> 00:21:22,580
write unit tests and you can get the

00:21:18,060 --> 00:21:26,420
coverage pretty high up and two it also

00:21:22,580 --> 00:21:30,900
enabled people to see single points of

00:21:26,420 --> 00:21:33,000
error so network test Network test would

00:21:30,900 --> 00:21:35,460
be something like I'm talking to a third

00:21:33,000 --> 00:21:38,610
party service something I don't control

00:21:35,460 --> 00:21:40,230
and I've heard the horror stories i'm

00:21:38,610 --> 00:21:41,970
sure some of you have horror stories of

00:21:40,230 --> 00:21:43,710
people just you know as a third party

00:21:41,970 --> 00:21:46,440
service provider deciding they're going

00:21:43,710 --> 00:21:48,360
to change their api on you or they're

00:21:46,440 --> 00:21:52,560
not going to have the uptime they need

00:21:48,360 --> 00:21:54,210
and you didn't a you know program to

00:21:52,560 --> 00:21:56,400
have your server robust enough to deal

00:21:54,210 --> 00:21:58,980
with that well if the network tests are

00:21:56,400 --> 00:22:01,200
all failing for that one third party

00:21:58,980 --> 00:22:03,240
service that is touching guess what that

00:22:01,200 --> 00:22:05,820
tells you third party service is down

00:22:03,240 --> 00:22:08,790
and it's pretty quick and easy for you

00:22:05,820 --> 00:22:11,340
to then decide well we're not going to

00:22:08,790 --> 00:22:12,840
use the network tests in the deploy

00:22:11,340 --> 00:22:15,060
pipeline because they're not giving us

00:22:12,840 --> 00:22:17,340
accurate data right now it's some other

00:22:15,060 --> 00:22:19,879
thing that we're going to have to fix or

00:22:17,340 --> 00:22:21,649
wait out and

00:22:19,879 --> 00:22:23,989
that was good the other thing we had was

00:22:21,649 --> 00:22:27,559
a flaky tests lie low this one took a

00:22:23,989 --> 00:22:29,359
little bit of convincing we got people

00:22:27,559 --> 00:22:32,419
on board with the whole lighten up push

00:22:29,359 --> 00:22:34,989
on red but then there was still people

00:22:32,419 --> 00:22:37,969
that felt well every test is sacred

00:22:34,989 --> 00:22:42,979
that's really the feeling that they had

00:22:37,969 --> 00:22:44,929
and so we had a flaky group as well so

00:22:42,979 --> 00:22:47,509
if a test you just saw flapping all day

00:22:44,929 --> 00:22:49,249
like it would go red go green no code

00:22:47,509 --> 00:22:52,699
would be touching it we actually just

00:22:49,249 --> 00:22:54,709
left them silo it and eventually they

00:22:52,699 --> 00:22:58,519
voted with their feet by not fixing them

00:22:54,709 --> 00:23:00,609
and we deleted them and now we don't

00:22:58,519 --> 00:23:02,719
really have a flaky tests I locust

00:23:00,609 --> 00:23:07,339
apparently anybody rates a flaky tests

00:23:02,719 --> 00:23:10,789
anymore just good of course this led to

00:23:07,339 --> 00:23:12,649
other problems too much to read we had

00:23:10,789 --> 00:23:14,539
how many groups on that last side like

00:23:12,649 --> 00:23:16,459
seven groups and if you look this is a

00:23:14,539 --> 00:23:18,319
Jenkins page and this was our front page

00:23:16,459 --> 00:23:20,329
so we had like integration test unit

00:23:18,319 --> 00:23:23,869
test some functionals has some smoke

00:23:20,329 --> 00:23:25,399
tests and this got really confusing and

00:23:23,869 --> 00:23:28,629
even though we had like this entire

00:23:25,399 --> 00:23:31,699
documentation nobody reads documentation

00:23:28,629 --> 00:23:35,209
really some people do but most people

00:23:31,699 --> 00:23:39,259
don't so uh it's not important that you

00:23:35,209 --> 00:23:41,359
can actually read that page but this got

00:23:39,259 --> 00:23:43,429
confusing it got further confusing

00:23:41,359 --> 00:23:46,759
because we were you know communicating

00:23:43,429 --> 00:23:50,929
in IRC whenever tests would pass and

00:23:46,759 --> 00:23:53,179
fail and with ten jobs running / like QA

00:23:50,929 --> 00:23:59,839
deploy how many messages do you get my

00:23:53,179 --> 00:24:01,879
RC a lot and that got too noisy so if we

00:23:59,839 --> 00:24:03,739
want to have CI being able to

00:24:01,879 --> 00:24:06,949
communicate properly we need to you know

00:24:03,739 --> 00:24:08,869
clean things up emailing people what the

00:24:06,949 --> 00:24:10,849
things were that doesn't always work why

00:24:08,869 --> 00:24:12,469
doesn't it work some people aggressively

00:24:10,849 --> 00:24:16,459
filter some people don't read their

00:24:12,469 --> 00:24:18,079
emails all the time uh and sometimes

00:24:16,459 --> 00:24:22,579
people just forget what's in an email

00:24:18,079 --> 00:24:24,289
week wiki pages it's kind of hard to get

00:24:22,579 --> 00:24:25,789
them to go there and also with wiki

00:24:24,289 --> 00:24:27,469
pages that kind of get out of date and

00:24:25,789 --> 00:24:29,509
how many people have liked their wiki

00:24:27,469 --> 00:24:31,339
page system and there's like five

00:24:29,509 --> 00:24:33,710
different documents on the same exact

00:24:31,339 --> 00:24:35,899
topic a lot right

00:24:33,710 --> 00:24:37,309
is it so easy to just be like oh i'll

00:24:35,899 --> 00:24:38,480
just create a new page before i go

00:24:37,309 --> 00:24:39,559
search for one is kind of the same

00:24:38,480 --> 00:24:43,970
problem we have with bug tracking

00:24:39,559 --> 00:24:46,520
systems Oh time you know and we did try

00:24:43,970 --> 00:24:48,080
doing some information and blogs because

00:24:46,520 --> 00:24:50,270
it's a little bit better than a wiki

00:24:48,080 --> 00:24:51,860
because its temporal and people see the

00:24:50,270 --> 00:24:53,510
date time and they go oh well that's

00:24:51,860 --> 00:24:57,049
five months old so obviously don't

00:24:53,510 --> 00:24:59,960
bother so the real answer was we needed

00:24:57,049 --> 00:25:03,770
to simplify the Jenkins you I silent

00:24:59,960 --> 00:25:06,289
green so it's kind of a principle out of

00:25:03,770 --> 00:25:08,029
the ex unit chapter so x unit results

00:25:06,289 --> 00:25:10,640
exeunt results give you like no

00:25:08,029 --> 00:25:13,159
information if all the tests pass yay

00:25:10,640 --> 00:25:16,210
and why is that because all the tests

00:25:13,159 --> 00:25:19,429
pass one more information do you need

00:25:16,210 --> 00:25:21,620
it's when they fail that you need to

00:25:19,429 --> 00:25:26,450
know what went wrong and how am I going

00:25:21,620 --> 00:25:28,190
to fix it so we built a master plugin we

00:25:26,450 --> 00:25:31,510
built a deploy in air plugin and all of

00:25:28,190 --> 00:25:31,510
a sudden we had far more information

00:25:32,200 --> 00:25:39,950
these jobs here they're actually master

00:25:36,070 --> 00:25:41,240
master builds and will be open sourcing

00:25:39,950 --> 00:25:44,659
those plugins soon i'm waiting on the

00:25:41,240 --> 00:25:47,990
security review i'm sorry but anyways

00:25:44,659 --> 00:25:50,390
these jobs the trunk job for instance

00:25:47,990 --> 00:25:52,340
when we originally put it out just has a

00:25:50,390 --> 00:25:55,250
bunch of check boxes in the in the

00:25:52,340 --> 00:25:57,230
Jenkins config for you to say yes run

00:25:55,250 --> 00:26:01,760
the unit tests run the DB unit test run

00:25:57,230 --> 00:26:04,250
this test and run that test and then if

00:26:01,760 --> 00:26:06,799
this turns red you click into the job

00:26:04,250 --> 00:26:09,380
and look at the details as opposed to

00:26:06,799 --> 00:26:12,710
looking at that last screen going like

00:26:09,380 --> 00:26:15,590
now which one is attached to trunk I

00:26:12,710 --> 00:26:17,120
don't remember we then also added a

00:26:15,590 --> 00:26:18,830
deploy nater column so that we could

00:26:17,120 --> 00:26:22,340
actually get in like who did the push

00:26:18,830 --> 00:26:25,760
and what was the change range of the

00:26:22,340 --> 00:26:29,510
push so that if people were just looking

00:26:25,760 --> 00:26:31,010
at CI during a push they would have all

00:26:29,510 --> 00:26:36,110
of the information of what's going on

00:26:31,010 --> 00:26:40,370
there too so those were our couple

00:26:36,110 --> 00:26:43,309
plugins that we added and we'll be

00:26:40,370 --> 00:26:47,289
providing on the etsy com the etsy

00:26:43,309 --> 00:26:50,389
github so you should write clean code

00:26:47,289 --> 00:26:52,389
not everyone can read and most

00:26:50,389 --> 00:26:54,710
importantly follow a code standard I

00:26:52,389 --> 00:26:59,179
should have also said not everybody can

00:26:54,710 --> 00:27:01,279
write a code standard my little trick to

00:26:59,179 --> 00:27:03,919
it is go find somebody who wrote a

00:27:01,279 --> 00:27:07,899
readable code stander copy it and then

00:27:03,919 --> 00:27:14,690
change the parts that you don't like

00:27:07,899 --> 00:27:18,080
okay so clean code first you start with

00:27:14,690 --> 00:27:22,360
syntax so that's just linked really

00:27:18,080 --> 00:27:24,860
having lint running good thing I move

00:27:22,360 --> 00:27:27,080
then you move on to your style and then

00:27:24,860 --> 00:27:28,750
you finally get to your design level so

00:27:27,080 --> 00:27:31,929
sign levels like the last thing

00:27:28,750 --> 00:27:35,600
everybody feels that they have a certain

00:27:31,929 --> 00:27:37,789
design style that they use and it's very

00:27:35,600 --> 00:27:40,610
hard to convince them that that might

00:27:37,789 --> 00:27:45,169
not have been appropriate you know and

00:27:40,610 --> 00:27:47,720
so you gotta do baby steps so PHP let's

00:27:45,169 --> 00:27:49,789
make sure people can run it locally make

00:27:47,720 --> 00:27:52,490
sure which they should be able to make

00:27:49,789 --> 00:27:54,380
sure they can run out on pre-commit make

00:27:52,490 --> 00:27:56,630
sure that they can you know run it on

00:27:54,380 --> 00:27:57,770
see I like it's good to have it just

00:27:56,630 --> 00:27:59,840
running in so yeah it doesn't take that

00:27:57,770 --> 00:28:01,659
long haven't run on the files that just

00:27:59,840 --> 00:28:04,159
recently changed that's fine to just

00:28:01,659 --> 00:28:06,409
double check because it's really stupid

00:28:04,159 --> 00:28:10,250
getting bunched up just because you

00:28:06,409 --> 00:28:14,210
missed a semicolon somewhere use a code

00:28:10,250 --> 00:28:18,080
sniffer so when using code sniffer uh

00:28:14,210 --> 00:28:21,080
this was you know kind of fun originally

00:28:18,080 --> 00:28:23,179
uh well before I I started they did drop

00:28:21,080 --> 00:28:25,460
a coding style guide line and that's

00:28:23,179 --> 00:28:29,360
where my little quip came from before

00:28:25,460 --> 00:28:31,460
where they literally the center room

00:28:29,360 --> 00:28:34,370
they decided what they wanted for style

00:28:31,460 --> 00:28:37,490
but what they wrote in the document was

00:28:34,370 --> 00:28:40,970
the list of sniffs from PHP code sniffer

00:28:37,490 --> 00:28:43,520
and not actually what they did and so

00:28:40,970 --> 00:28:45,770
when I actually ran them well then we

00:28:43,520 --> 00:28:48,919
realized I didn't actually do what you

00:28:45,770 --> 00:28:51,020
thought it would but anyways start with

00:28:48,919 --> 00:28:54,289
just drafting a coding style guide line

00:28:51,020 --> 00:28:55,610
think of what the ideal looks like think

00:28:54,289 --> 00:28:57,280
of what you've been doing and this is

00:28:55,610 --> 00:29:00,380
like especially when you're like in LA

00:28:57,280 --> 00:29:02,900
realm like you're not starting fresh so

00:29:00,380 --> 00:29:05,450
you have old code and some of it looks

00:29:02,900 --> 00:29:10,250
like junk some of it looks awesome

00:29:05,450 --> 00:29:13,130
enough and experiment with the various

00:29:10,250 --> 00:29:14,750
snips because you know the documentation

00:29:13,130 --> 00:29:16,550
isn't always perfect about all the

00:29:14,750 --> 00:29:20,990
itty-bitty nuances going on in the

00:29:16,550 --> 00:29:24,440
stiffs then start discovering what your

00:29:20,990 --> 00:29:26,300
actual coding syntax is you might be

00:29:24,440 --> 00:29:29,450
surprised you might think that having

00:29:26,300 --> 00:29:31,430
the opening brace on a new line by

00:29:29,450 --> 00:29:34,010
itself underneath the function signature

00:29:31,430 --> 00:29:36,500
is what you always do but it turns out

00:29:34,010 --> 00:29:40,490
that it's what everybody does the least

00:29:36,500 --> 00:29:44,360
and is it really worth holding on to

00:29:40,490 --> 00:29:46,840
that particular style when it seems that

00:29:44,360 --> 00:29:49,910
everybody has voted the other way and

00:29:46,840 --> 00:29:51,800
then so that's the part where you decide

00:29:49,910 --> 00:29:54,590
on what changes to the style guide you

00:29:51,800 --> 00:29:57,260
drafted before was with that information

00:29:54,590 --> 00:29:59,780
of what are you doing for privates are

00:29:57,260 --> 00:30:02,720
you doing underscores what are you doing

00:29:59,780 --> 00:30:05,000
for public functions are you doing a

00:30:02,720 --> 00:30:07,880
camel case or are you doing underscores

00:30:05,000 --> 00:30:10,370
in between and then create a strategy on

00:30:07,880 --> 00:30:13,040
how to get it green because if we want

00:30:10,370 --> 00:30:16,640
to put the code sniffer to maintain a

00:30:13,040 --> 00:30:19,270
certain level of style in our continuous

00:30:16,640 --> 00:30:22,940
integration system it has to be green

00:30:19,270 --> 00:30:25,310
because otherwise it is noise if it is

00:30:22,940 --> 00:30:29,030
red it is noise and people will ignore

00:30:25,310 --> 00:30:31,100
it or they will be confused so the

00:30:29,030 --> 00:30:33,470
strategy we actually went for is we

00:30:31,100 --> 00:30:37,460
found what sniffs we were really close

00:30:33,470 --> 00:30:41,030
on and just fix those couple up and

00:30:37,460 --> 00:30:43,580
stuck in a stable coding standard as in

00:30:41,030 --> 00:30:46,700
this is the stuff that the the code base

00:30:43,580 --> 00:30:50,300
passes so you better not regress from

00:30:46,700 --> 00:30:54,440
that then we stuck in a staging code

00:30:50,300 --> 00:30:57,320
standard that we put on our try jobs so

00:30:54,440 --> 00:30:58,850
it didn't block deployment deployment

00:30:57,320 --> 00:31:00,740
would always be green but on your try

00:30:58,850 --> 00:31:02,870
job you would see the little bit of

00:31:00,740 --> 00:31:05,690
noise but at least you knew that that

00:31:02,870 --> 00:31:07,820
job was separate from the sniffs that

00:31:05,690 --> 00:31:10,190
you had to pass so you could look at

00:31:07,820 --> 00:31:10,730
that and be like oh yeah I really should

00:31:10,190 --> 00:31:13,309
make all

00:31:10,730 --> 00:31:16,340
my trues and falses lower case because

00:31:13,309 --> 00:31:18,500
that's what we agreed upon doing and

00:31:16,340 --> 00:31:23,570
then of course the other option you have

00:31:18,500 --> 00:31:26,179
is you could do fix it if if people will

00:31:23,570 --> 00:31:28,070
let you do fixit's do a fix it time you

00:31:26,179 --> 00:31:31,610
know schedule a party make it a

00:31:28,070 --> 00:31:33,350
competition just you know decide what

00:31:31,610 --> 00:31:35,570
you're going to give the winners for

00:31:33,350 --> 00:31:37,460
being awesome and sometimes people just

00:31:35,570 --> 00:31:40,640
like winning you know so you can give

00:31:37,460 --> 00:31:41,929
them a sticker so anyways it's a work in

00:31:40,640 --> 00:31:44,290
progress we're still working on that

00:31:41,929 --> 00:31:49,040
because we still haven't gotten to

00:31:44,290 --> 00:31:51,590
design Oh blame emails just to mention I

00:31:49,040 --> 00:31:54,020
did try blame emails as in like I went

00:31:51,590 --> 00:31:56,450
through get blame for every single line

00:31:54,020 --> 00:31:59,360
that violated a coding standard thing

00:31:56,450 --> 00:32:01,700
and people weren't too happy because if

00:31:59,360 --> 00:32:03,620
you were the dude that like migrated

00:32:01,700 --> 00:32:05,990
everything from svn to get and somehow

00:32:03,620 --> 00:32:10,040
got your name on everything you're a

00:32:05,990 --> 00:32:11,960
little sad and sometimes it's very hard

00:32:10,040 --> 00:32:13,549
to convince people that they own the

00:32:11,960 --> 00:32:16,010
code when they're coming into a legacy

00:32:13,549 --> 00:32:17,870
code base so even though their name is

00:32:16,010 --> 00:32:24,559
on the line they may still try to argue

00:32:17,870 --> 00:32:27,140
with you that they don't own it so trust

00:32:24,559 --> 00:32:30,980
everyone to do the right thing balancing

00:32:27,140 --> 00:32:32,240
enforcement with freedom so it sounds

00:32:30,980 --> 00:32:35,690
like with this continuous integration

00:32:32,240 --> 00:32:39,559
it's a machine it just is red or green

00:32:35,690 --> 00:32:41,090
it enforces but at the same time you

00:32:39,559 --> 00:32:44,929
still need to feel like you have some

00:32:41,090 --> 00:32:48,169
sort of freedom and you know we're

00:32:44,929 --> 00:32:50,960
continuously growing so how do we keep

00:32:48,169 --> 00:32:54,230
onboarding people keep the same high

00:32:50,960 --> 00:32:57,559
quality that we have if not increase the

00:32:54,230 --> 00:32:59,600
quality that we have while not making

00:32:57,559 --> 00:33:05,510
people feel like they're shackled to

00:32:59,600 --> 00:33:08,030
doing things a specific way so we do

00:33:05,510 --> 00:33:10,820
have more things we need to work on code

00:33:08,030 --> 00:33:12,590
reviews not quite the code reduce it

00:33:10,820 --> 00:33:14,240
it's one of those things where it's nice

00:33:12,590 --> 00:33:15,919
to have the second pair of eyes but at

00:33:14,240 --> 00:33:18,200
the same time if you've worked for a

00:33:15,919 --> 00:33:20,419
company that's like multi time zone and

00:33:18,200 --> 00:33:22,640
you have to ship a code review over to

00:33:20,419 --> 00:33:23,980
someone and then wait for them to review

00:33:22,640 --> 00:33:26,470
it before you can actually

00:33:23,980 --> 00:33:28,450
but your your code in it just doesn't

00:33:26,470 --> 00:33:30,520
work you won't have your continuous

00:33:28,450 --> 00:33:33,400
deployment anymore because you'll have

00:33:30,520 --> 00:33:34,929
to be waiting on somebody to review your

00:33:33,400 --> 00:33:38,980
change before you can actually fix the

00:33:34,929 --> 00:33:41,140
site again so it will be interesting to

00:33:38,980 --> 00:33:42,820
see how we encourage people to do code

00:33:41,140 --> 00:33:45,940
reviews and I don't have a good answer

00:33:42,820 --> 00:33:50,740
yet getting to the entire coding

00:33:45,940 --> 00:33:52,179
standard on CI we probably I know that

00:33:50,740 --> 00:33:54,940
we definitely have everything that would

00:33:52,179 --> 00:33:57,370
like kicking in the butt I remember one

00:33:54,940 --> 00:34:01,470
time Rasmus came in had a terrible

00:33:57,370 --> 00:34:03,760
deployment where someone said dark as in

00:34:01,470 --> 00:34:05,590
their code wasn't going to be executed

00:34:03,760 --> 00:34:07,870
and they change the signature on a

00:34:05,590 --> 00:34:10,990
static function and it had the same

00:34:07,870 --> 00:34:12,970
parameter listed twice but how many

00:34:10,990 --> 00:34:15,310
people can look at a function signature

00:34:12,970 --> 00:34:17,080
and go like I even list of the same

00:34:15,310 --> 00:34:19,510
parameter twice it's kind of hard it's

00:34:17,080 --> 00:34:21,429
it's not intuitively easy especially

00:34:19,510 --> 00:34:23,710
when the stack trace you get is

00:34:21,429 --> 00:34:26,800
something in the phpunit mock object

00:34:23,710 --> 00:34:28,750
library throwing up because it can't

00:34:26,800 --> 00:34:33,970
parse the object to create the mock

00:34:28,750 --> 00:34:36,669
object so it gave us the file but kind

00:34:33,970 --> 00:34:38,500
of took a little while a nest attacks

00:34:36,669 --> 00:34:40,720
are going through those standards that

00:34:38,500 --> 00:34:45,340
one I'm a little interested in studying

00:34:40,720 --> 00:34:47,080
uh it's going nest detector if you've

00:34:45,340 --> 00:34:49,000
ever used it as you know kind of

00:34:47,080 --> 00:34:53,429
nitpicking oh like what your design

00:34:49,000 --> 00:34:58,990
style is okay and for your design style

00:34:53,429 --> 00:35:02,950
as I said that's kind of hard to you

00:34:58,990 --> 00:35:04,780
know deal with people for missing them

00:35:02,950 --> 00:35:06,730
and so it might actually just be

00:35:04,780 --> 00:35:07,960
worthwhile starting to get reports on

00:35:06,730 --> 00:35:09,760
what different people with different

00:35:07,960 --> 00:35:12,130
teams with different sections of codes

00:35:09,760 --> 00:35:13,720
have certain types mess and see messes

00:35:12,130 --> 00:35:15,700
and see what correlations we can pull

00:35:13,720 --> 00:35:17,710
out first before we actually start

00:35:15,700 --> 00:35:20,830
thinking about addressing them all so

00:35:17,710 --> 00:35:24,330
strict standards and even doing the PHP

00:35:20,830 --> 00:35:28,900
unit testing standards so anyways

00:35:24,330 --> 00:35:30,940
maintaining our culture and I've been

00:35:28,900 --> 00:35:34,480
told I've gone over I didn't realize it

00:35:30,940 --> 00:35:39,070
was 45 minutes okay any questions

00:35:34,480 --> 00:35:41,109
hey why don't why don't you use why

00:35:39,070 --> 00:35:42,880
don't you block your commits for coding

00:35:41,109 --> 00:35:46,030
standards you could have a pre-commit

00:35:42,880 --> 00:35:49,119
hook so that nobody can commit bad codes

00:35:46,030 --> 00:35:53,140
right I said the reason for being

00:35:49,119 --> 00:35:55,450
against pre-commit hooks well so forget

00:35:53,140 --> 00:35:57,490
pre-commit hook so you can force it like

00:35:55,450 --> 00:36:00,550
you can force it to override it but the

00:35:57,490 --> 00:36:02,200
thing is if one little style violation

00:36:00,550 --> 00:36:04,990
is the thing that's going to hold up

00:36:02,200 --> 00:36:08,680
pushing a fix as quickly as possible

00:36:04,990 --> 00:36:10,480
it's not worth it so we don't put most

00:36:08,680 --> 00:36:13,359
of the codes and if ur stuff we try not

00:36:10,480 --> 00:36:15,160
to make anything be blocking I think

00:36:13,359 --> 00:36:17,380
lint is the only thing we have blocking

00:36:15,160 --> 00:36:27,460
because well if it doesn't pass Lynch X

00:36:17,380 --> 00:36:31,000
is likely not running hi I wasn't sure

00:36:27,460 --> 00:36:32,830
about discouraging people from using

00:36:31,000 --> 00:36:37,119
branches I worked in an environment

00:36:32,830 --> 00:36:39,010
where the developers were not using

00:36:37,119 --> 00:36:41,170
branches and what they seem to do is

00:36:39,010 --> 00:36:42,970
just hold on to their code and avoid

00:36:41,170 --> 00:36:44,890
committing it until the last possible

00:36:42,970 --> 00:36:48,090
moment so how do you get around that

00:36:44,890 --> 00:36:50,650
problem right so the way we get around

00:36:48,090 --> 00:36:54,010
branching via source control is

00:36:50,650 --> 00:36:55,810
branching in code so we have config

00:36:54,010 --> 00:36:58,990
flags all over the place we have an AV

00:36:55,810 --> 00:37:02,020
framework to you set up is it admin is

00:36:58,990 --> 00:37:03,490
it 1% two percent or whatnot and because

00:37:02,020 --> 00:37:05,980
it's behind that feature flag when

00:37:03,490 --> 00:37:08,440
you're putting in your little bits of

00:37:05,980 --> 00:37:11,560
code you put it behind that feature flag

00:37:08,440 --> 00:37:13,660
it's hidden it's not running and yes

00:37:11,560 --> 00:37:17,970
it's not servicing the full feature yet

00:37:13,660 --> 00:37:17,970
but that's okay this is not executing it

00:37:20,310 --> 00:37:27,940
the trust bit so trusting everyone in

00:37:24,310 --> 00:37:29,950
the company and well Oh in your team

00:37:27,940 --> 00:37:34,619
let's let's let's limit it to the team

00:37:29,950 --> 00:37:38,280
for now and I can't get over that

00:37:34,619 --> 00:37:41,320
especially about people that you

00:37:38,280 --> 00:37:43,150
continuously say you doing it wrong I

00:37:41,320 --> 00:37:45,400
don't like it you're not working within

00:37:43,150 --> 00:37:46,870
the team and please don't do it again

00:37:45,400 --> 00:37:52,480
and again and the

00:37:46,870 --> 00:37:56,350
and again I don't trust him I basically

00:37:52,480 --> 00:38:04,810
tell me how to overcome my fears okay so

00:37:56,350 --> 00:38:06,910
uh partially I would have to ask what is

00:38:04,810 --> 00:38:08,380
it exactly that you don't trust is it

00:38:06,910 --> 00:38:10,300
that you don't trust them to produce

00:38:08,380 --> 00:38:11,650
something that's working or that you

00:38:10,300 --> 00:38:16,480
don't trust them to do it the way that

00:38:11,650 --> 00:38:21,160
you would want it to be done both but

00:38:16,480 --> 00:38:24,070
but but mainly because they make all the

00:38:21,160 --> 00:38:25,810
time the same stupid mistakes that's

00:38:24,070 --> 00:38:27,550
what the more knowing think it's not

00:38:25,810 --> 00:38:29,530
when they learn on the mistakes I don't

00:38:27,550 --> 00:38:31,030
mind I can trust it because I know that

00:38:29,530 --> 00:38:33,220
when I tell them the next time they're

00:38:31,030 --> 00:38:35,920
going to do it better it's more about

00:38:33,220 --> 00:38:37,900
doing telling them coaching them

00:38:35,920 --> 00:38:41,530
teaching them how to do things and they

00:38:37,900 --> 00:38:46,170
still don't do it okay another thing is

00:38:41,530 --> 00:38:53,520
do they have the opportunity to fail

00:38:46,170 --> 00:38:55,570
hard because part of our trust is a

00:38:53,520 --> 00:38:58,540
facilitated just by having the whole

00:38:55,570 --> 00:39:01,030
continuous deployment because if they

00:38:58,540 --> 00:39:03,460
are deploying and can possibly break

00:39:01,030 --> 00:39:05,320
production a person can only break

00:39:03,460 --> 00:39:12,430
production so many times before they

00:39:05,320 --> 00:39:14,800
feel really bad I was just a more of a

00:39:12,430 --> 00:39:16,930
comment just on the whole kind of

00:39:14,800 --> 00:39:20,530
allowing someone to break production I

00:39:16,930 --> 00:39:22,870
kind of a thing in is quite good idea

00:39:20,530 --> 00:39:25,540
but in practice from a business sense

00:39:22,870 --> 00:39:27,190
like I don't think my manager was

00:39:25,540 --> 00:39:30,040
certainly be too happy if I love my team

00:39:27,190 --> 00:39:34,440
to make production continuously so are

00:39:30,040 --> 00:39:38,550
there other alternatives to that uh so

00:39:34,440 --> 00:39:41,800
maybe you need to sell them better uh

00:39:38,550 --> 00:39:43,780
because I mean we are showing that this

00:39:41,800 --> 00:39:46,960
does work and it works with a hundred

00:39:43,780 --> 00:39:49,840
people working on the same exact code

00:39:46,960 --> 00:39:53,050
base not a hundred people on separate

00:39:49,840 --> 00:39:54,820
teams with separate deployments and as

00:39:53,050 --> 00:39:57,010
you can imagine the more people you get

00:39:54,820 --> 00:39:57,950
the more chance you have for people just

00:39:57,010 --> 00:40:00,710
stepping on each

00:39:57,950 --> 00:40:04,300
toes and other silly things like that

00:40:00,710 --> 00:40:07,280
and so it's best not to word it as

00:40:04,300 --> 00:40:09,140
giving people the opportunity to break

00:40:07,280 --> 00:40:11,119
production because yes nobody's going to

00:40:09,140 --> 00:40:12,410
buy that oh it's great if you let

00:40:11,119 --> 00:40:15,170
everybody just break production they

00:40:12,410 --> 00:40:16,880
should break up every every week no

00:40:15,170 --> 00:40:20,329
nobody likes that it's probably better

00:40:16,880 --> 00:40:22,849
off to look at what kind of uptime might

00:40:20,329 --> 00:40:25,310
you get instead how often do you have a

00:40:22,849 --> 00:40:28,280
break right now how long does it take

00:40:25,310 --> 00:40:31,010
you to fix it so how long is it that you

00:40:28,280 --> 00:40:34,070
have spent on downtime in on errors

00:40:31,010 --> 00:40:36,829
being present on your page now if you go

00:40:34,070 --> 00:40:39,680
look at a model where people can push

00:40:36,829 --> 00:40:42,440
fixes continuously how often do they

00:40:39,680 --> 00:40:44,570
break turns out that at least in our

00:40:42,440 --> 00:40:48,710
situation they break just about the same

00:40:44,570 --> 00:40:50,960
as they would on another site but it's

00:40:48,710 --> 00:40:54,920
in shorter increments so we actually

00:40:50,960 --> 00:40:58,520
have a better time and better chance of

00:40:54,920 --> 00:41:00,020
not having errors persist on the site so

00:40:58,520 --> 00:41:02,270
you might just want to try figuring out

00:41:00,020 --> 00:41:06,109
different ways to sell them on the whole

00:41:02,270 --> 00:41:08,839
deal otherwise the alternative if you

00:41:06,109 --> 00:41:10,579
don't have continues to play you're

00:41:08,839 --> 00:41:14,660
going to have to spend a lot more money

00:41:10,579 --> 00:41:18,160
on quality control you're going to have

00:41:14,660 --> 00:41:20,540
to actually spend the developer time on

00:41:18,160 --> 00:41:23,569
double checking everything at the last

00:41:20,540 --> 00:41:26,540
minute or getting lots of manual QA in

00:41:23,569 --> 00:41:30,290
and that actually costs a lot more than

00:41:26,540 --> 00:41:33,470
a few minutes that your site's down um

00:41:30,290 --> 00:41:35,990
yeah I sort of i'm over here sorry oh

00:41:33,470 --> 00:41:37,339
yeah you partly answer my question

00:41:35,990 --> 00:41:39,530
actually but i was wondering about ya

00:41:37,339 --> 00:41:41,000
how smooth the rollback process isn't

00:41:39,530 --> 00:41:42,980
how you test that like do you ever go

00:41:41,000 --> 00:41:44,990
back to revisions say or three versions

00:41:42,980 --> 00:41:47,540
how do you how do you test that what if

00:41:44,990 --> 00:41:51,140
the sort of the bug involved data change

00:41:47,540 --> 00:41:55,490
say um so we technically don't have a

00:41:51,140 --> 00:41:57,680
fixed roll back button what will

00:41:55,490 --> 00:42:00,079
typically happen if someone will get to

00:41:57,680 --> 00:42:04,069
the staging server point and if they

00:42:00,079 --> 00:42:05,630
notice that it's bad everybody who is in

00:42:04,069 --> 00:42:08,450
the deployment it's usually a handful of

00:42:05,630 --> 00:42:11,180
people will look over what is the bug in

00:42:08,450 --> 00:42:13,849
what were their commits at the start

00:42:11,180 --> 00:42:16,550
people will just start you know doing a

00:42:13,849 --> 00:42:21,859
get revert on their change list and push

00:42:16,550 --> 00:42:23,839
the reverted change and try again in

00:42:21,859 --> 00:42:26,300
some situations if it's really bad that

00:42:23,839 --> 00:42:29,750
like people can't figure out why the

00:42:26,300 --> 00:42:32,990
logs are off the charts the graphs are

00:42:29,750 --> 00:42:36,020
going crazy then they may just roll back

00:42:32,990 --> 00:42:37,790
every single change in a range and push

00:42:36,020 --> 00:42:39,980
that again and it's the same thing as

00:42:37,790 --> 00:42:43,339
doing a normal push because it's just a

00:42:39,980 --> 00:42:46,520
change we've got I think time for just

00:42:43,339 --> 00:42:49,430
one last question you mentioned briefly

00:42:46,520 --> 00:42:52,130
about having an a/b test framework or a

00:42:49,430 --> 00:42:55,190
one-percent 2% a deployment framework

00:42:52,130 --> 00:42:57,589
how does that work with your CI testing

00:42:55,190 --> 00:42:59,839
so if i put a feature flag on something

00:42:57,589 --> 00:43:02,390
and say this is dark I don't want this

00:42:59,839 --> 00:43:03,950
to be public in production I used to

00:43:02,390 --> 00:43:06,200
running tests against it if the tests

00:43:03,950 --> 00:43:08,270
failed is that turn see I read does that

00:43:06,200 --> 00:43:10,880
prevent deployment so that all depends

00:43:08,270 --> 00:43:13,069
on who's writing the tests but you can

00:43:10,880 --> 00:43:15,859
completely unit tests that the AV

00:43:13,069 --> 00:43:18,410
framework the whole 1% 2% that is unit

00:43:15,859 --> 00:43:21,559
tested so we know that that entire ramp

00:43:18,410 --> 00:43:24,260
up mechanism works the code that is

00:43:21,559 --> 00:43:27,140
inside that block people can write unit

00:43:24,260 --> 00:43:29,480
tests and they can go and tweak what the

00:43:27,140 --> 00:43:31,130
responses on the AV framework you know

00:43:29,480 --> 00:43:32,599
mock out the AV framework and you know

00:43:31,130 --> 00:43:35,000
tweak the response to be like in the

00:43:32,599 --> 00:43:38,240
one-percent case I expect this test to

00:43:35,000 --> 00:43:39,680
work so it is just a combination of unit

00:43:38,240 --> 00:43:42,349
testing and piecing everything together

00:43:39,680 --> 00:43:45,290
and that will be the coverage that you

00:43:42,349 --> 00:43:48,079
would get the other part that I didn't

00:43:45,290 --> 00:43:50,569
mention because it's it is and it isn't

00:43:48,079 --> 00:43:53,000
part of our continuous integration /

00:43:50,569 --> 00:43:56,270
deployment is that we have lots of

00:43:53,000 --> 00:44:00,829
monitoring in the form of graphs and

00:43:56,270 --> 00:44:03,770
logs and people watch those on

00:44:00,829 --> 00:44:05,930
production in princess deploys so if the

00:44:03,770 --> 00:44:08,420
whole ramp up thing does cause some sort

00:44:05,930 --> 00:44:10,640
of load failures or rainiest log

00:44:08,420 --> 00:44:13,790
messages it's very easy for us to just

00:44:10,640 --> 00:44:18,950
push the config file yet again to turn

00:44:13,790 --> 00:44:20,130
off the future okay okay thank you very

00:44:18,950 --> 00:44:22,190
much yes

00:44:20,130 --> 00:44:22,190
you

00:44:33,550 --> 00:44:35,610

YouTube URL: https://www.youtube.com/watch?v=d5E0wPkpGUo


