Title: PHP UK Conference 2012 - Building... apps with Phing, by Michiel Rook
Publication date: 2012-03-29
Playlist: PHP UK Conference 2012
Description: 
	Building and deploying applications with Phing

Building and deploying an application can be tedious and error-prone. Using Phing's rich set of tasks, easy extension points and simple XML build files to handle the building, packaging, deploying and testing of your application can help you save time and increase quality.

During this talk you will be introduced to the workings of Phing, and how to tailor the tool to your specific situation. A number of demonstrations will help illustrate file transformation, database migration, packaging, application deployment and other real-world use cases.


Michiel Rook is a ZCE and holds a Master's degree in Computer Science, and runs a PHP/Java contracting and consulting business in the Netherlands. He's been working with PHP for over ten years and is currently the lead developer of the Phing project. In his precious spare time he enjoys music, sports and movies.
Captions: 
	00:00:08,860 --> 00:00:15,889
thanks Richard welcome everybody today's

00:00:13,039 --> 00:00:18,529
talk building and deploying PHP

00:00:15,889 --> 00:00:23,119
applications with thing not Pete pink

00:00:18,529 --> 00:00:25,970
thing I'm Michael the dutch version is

00:00:23,119 --> 00:00:28,429
thank you which is probably very hard to

00:00:25,970 --> 00:00:30,949
pronounce for you I've only met two

00:00:28,429 --> 00:00:33,079
cultures in a walk as of now anyway that

00:00:30,949 --> 00:00:36,650
imprint as my name right and that's

00:00:33,079 --> 00:00:42,530
Belgians touch on and some Israelis may

00:00:36,650 --> 00:00:46,010
be welcome again I'm a freelance PHP

00:00:42,530 --> 00:00:50,690
Java contractor I've been doing PHP

00:00:46,010 --> 00:00:53,840
since 99 98 maybe even so it's been a

00:00:50,690 --> 00:00:58,280
while i'm the project lee on thing right

00:00:53,840 --> 00:01:01,550
now if you want to talk to me later hit

00:00:58,280 --> 00:01:02,990
me up on Twitter or LinkedIn below you

00:01:01,550 --> 00:01:04,820
can see some of the things I like to do

00:01:02,990 --> 00:01:07,310
in the preciously little spare time that

00:01:04,820 --> 00:01:10,369
I that remain after doing all the work i

00:01:07,310 --> 00:01:13,730
have i won't go into detail ask me later

00:01:10,369 --> 00:01:18,020
if you want to know about it all right

00:01:13,730 --> 00:01:21,860
this talk i will tell you a why wish you

00:01:18,020 --> 00:01:24,960
you should use a building tool then i

00:01:21,860 --> 00:01:28,170
will tell you what if what thing is

00:01:24,960 --> 00:01:30,869
and how you can use it there will be a

00:01:28,170 --> 00:01:34,590
couple of examples possibly a live demo

00:01:30,869 --> 00:01:37,350
if time allows and at the end i will

00:01:34,590 --> 00:01:41,970
tell you how to extend thing to use it

00:01:37,350 --> 00:01:45,899
for your own purposes right why you use

00:01:41,970 --> 00:01:49,580
bill too we are PHP developers right we

00:01:45,899 --> 00:01:54,330
script for the web we don't compile

00:01:49,580 --> 00:01:58,460
wrong we do a lot of repetitive tasks in

00:01:54,330 --> 00:02:05,039
PHP okay we don't compile but we still

00:01:58,460 --> 00:02:08,759
make packages we upload we do things

00:02:05,039 --> 00:02:13,650
like a unit testing we might even minify

00:02:08,759 --> 00:02:16,050
j/s or CSS repetition what is the

00:02:13,650 --> 00:02:18,420
problem with repetition we are you we

00:02:16,050 --> 00:02:21,060
are lazy by trade and good developers

00:02:18,420 --> 00:02:24,000
lazy developer we get bored easily and

00:02:21,060 --> 00:02:27,900
when we get bored or tired we make

00:02:24,000 --> 00:02:30,980
mistakes we forget things we do things

00:02:27,900 --> 00:02:34,819
manually things will go wrong eventually

00:02:30,980 --> 00:02:36,950
as I've said a lot of repetitive tasks

00:02:34,819 --> 00:02:40,010
version control testing configuring

00:02:36,950 --> 00:02:42,739
packaging you name it this is all very

00:02:40,010 --> 00:02:46,159
boring these are things you probably are

00:02:42,739 --> 00:02:50,510
doing daily or weekly at least when you

00:02:46,159 --> 00:02:54,440
are deploying project these are these

00:02:50,510 --> 00:02:56,390
are things you want to automate why do

00:02:54,440 --> 00:02:58,599
you want to automate this is not only

00:02:56,390 --> 00:03:02,989
for developers is also for testers or

00:02:58,599 --> 00:03:04,459
administrators for add well pretty much

00:03:02,989 --> 00:03:07,610
everybody on your team that's doing

00:03:04,459 --> 00:03:09,260
anything repetitive this is an easier

00:03:07,610 --> 00:03:11,060
handle over to new team members

00:03:09,260 --> 00:03:13,129
especially if you have a junior on your

00:03:11,060 --> 00:03:16,220
team is not comfortable with all the

00:03:13,129 --> 00:03:20,480
tests that you need to do to deploy or

00:03:16,220 --> 00:03:23,030
to build one of your abs e you as a

00:03:20,480 --> 00:03:24,859
senior or one of the seniors in your

00:03:23,030 --> 00:03:27,170
company might not be comfortable giving

00:03:24,859 --> 00:03:30,079
the test to the new junior which means

00:03:27,170 --> 00:03:33,200
that he gets less time off and has to be

00:03:30,079 --> 00:03:35,150
around at weird hours to deploy you

00:03:33,200 --> 00:03:38,840
might want to end that des to junior if

00:03:35,150 --> 00:03:42,200
you have automated tools automated

00:03:38,840 --> 00:03:46,160
scripts there's a loss let a lot less

00:03:42,200 --> 00:03:48,710
excuse me to explain

00:03:46,160 --> 00:03:52,670
and a lot less that can go wrong it also

00:03:48,710 --> 00:03:55,130
improves the quality you do things

00:03:52,670 --> 00:03:59,840
repeatedly it will have been the same

00:03:55,130 --> 00:04:03,740
every day every day it saves time and it

00:03:59,840 --> 00:04:05,420
reduces technical debt it's a buzz word

00:04:03,740 --> 00:04:08,600
that's been going around or while not

00:04:05,420 --> 00:04:11,210
especially today exactly bill debt every

00:04:08,600 --> 00:04:14,060
time every time you introduce something

00:04:11,210 --> 00:04:18,080
into you your workflow you need to be

00:04:14,060 --> 00:04:21,290
able to maintain if you consolidate only

00:04:18,080 --> 00:04:26,050
of strips or your manual steps into one

00:04:21,290 --> 00:04:30,070
automatic step you redo step maintenance

00:04:26,050 --> 00:04:32,990
right moving on to thing what is thing

00:04:30,070 --> 00:04:35,720
this is james bond island near Thailand

00:04:32,990 --> 00:04:41,570
it's called Cal feigning Mac something

00:04:35,720 --> 00:04:43,900
like that thing is not glumac it's a one

00:04:41,570 --> 00:04:46,430
of these wonderfully recursive acronyms

00:04:43,900 --> 00:04:51,770
it's a project build system it's based

00:04:46,430 --> 00:04:53,540
on a petty aunt who knows and a few who

00:04:51,770 --> 00:04:55,780
now is feigning hat by the way and who

00:04:53,540 --> 00:04:59,510
used

00:04:55,780 --> 00:05:01,880
but this was originally developed back

00:04:59,510 --> 00:05:05,810
in the HP four days by a company called

00:05:01,880 --> 00:05:10,190
binary cloud it was ported in early two

00:05:05,810 --> 00:05:12,580
thousand three two php5 and my first

00:05:10,190 --> 00:05:16,960
commit was in 04 and I started

00:05:12,580 --> 00:05:22,040
maintaining a project full time in 09

00:05:16,960 --> 00:05:24,410
what can thing do thing is a while it's

00:05:22,040 --> 00:05:26,900
a scripting tool basically and the

00:05:24,410 --> 00:05:29,270
scripting language is eczema which makes

00:05:26,900 --> 00:05:33,140
it very easy to understand its human

00:05:29,270 --> 00:05:36,200
readable it's mostly cross-platform why

00:05:33,140 --> 00:05:39,500
mostly we have some parts of fame dat

00:05:36,200 --> 00:05:42,160
run specifically on Windows we have some

00:05:39,500 --> 00:05:45,020
parts that run specifically on Linux or

00:05:42,160 --> 00:05:47,450
derivatives most of the tasks most of

00:05:45,020 --> 00:05:51,260
the parts of thing run on all platforms

00:05:47,450 --> 00:05:54,229
that that you use to develop it has

00:05:51,260 --> 00:05:57,139
minimal required dependencies it has a

00:05:54,229 --> 00:05:59,780
lot of optional dependencies because

00:05:57,139 --> 00:06:01,880
it's an interface to a lot of barrier to

00:05:59,780 --> 00:06:04,360
popular PHP tools that are out there

00:06:01,880 --> 00:06:04,360
right now

00:06:04,780 --> 00:06:12,500
I've heard someone called it good galoot

00:06:09,160 --> 00:06:13,910
this is in a nutshell what thing can do

00:06:12,500 --> 00:06:18,290
it this is not even the complete

00:06:13,910 --> 00:06:20,389
overview as if today right here we have

00:06:18,290 --> 00:06:24,350
file transferred simple things like a

00:06:20,389 --> 00:06:27,650
secure copy ftp we can do shell commands

00:06:24,350 --> 00:06:30,200
either locally or remotely the unit

00:06:27,650 --> 00:06:34,100
testing I'm sure most of you know to

00:06:30,200 --> 00:06:39,130
know each unit we also provide access to

00:06:34,100 --> 00:06:42,440
simple test of course there's XD bug

00:06:39,130 --> 00:06:46,070
reporting we have peach be documented

00:06:42,440 --> 00:06:50,930
and HP Japan we also interface with the

00:06:46,070 --> 00:06:56,540
new new high-tech box packaging we have

00:06:50,930 --> 00:07:00,139
far p HJ as if it's our freedom pretty

00:06:56,540 --> 00:07:02,690
much everything XML tasks a lot of

00:07:00,139 --> 00:07:04,940
filesystem task of course versioning

00:07:02,690 --> 00:07:08,430
everything you can do with what Sdn and

00:07:04,940 --> 00:07:11,190
get you can do from things itself

00:07:08,430 --> 00:07:14,880
a lot of JavaScript stuff Oh goat

00:07:11,190 --> 00:07:17,280
sniffers and some source code protection

00:07:14,880 --> 00:07:22,350
I'm not sure how many of you use i mq %

00:07:17,280 --> 00:07:27,540
guard to encode I luck it can do that

00:07:22,350 --> 00:07:29,250
too and some database tasks to for

00:07:27,540 --> 00:07:32,340
instance migrate your database to

00:07:29,250 --> 00:07:38,340
upgrade your database do database before

00:07:32,340 --> 00:07:41,790
them um some people ask me why should i

00:07:38,340 --> 00:07:45,000
use think I mean ends there and and is

00:07:41,790 --> 00:07:47,850
more mature at least that's what they

00:07:45,000 --> 00:07:51,510
say and it can do everything that thing

00:07:47,850 --> 00:07:54,780
could true I like healthy competition

00:07:51,510 --> 00:07:57,360
and competitive being competitive is

00:07:54,780 --> 00:07:59,880
very healthy so I'm not saying you

00:07:57,360 --> 00:08:02,340
should use think but i'm going to give

00:07:59,880 --> 00:08:05,580
you a nice set of reasons why you should

00:08:02,340 --> 00:08:10,110
anyway it has a rich tech set of tests

00:08:05,580 --> 00:08:13,890
and is a java too so it's the test that

00:08:10,110 --> 00:08:16,950
and provides our java related we are in

00:08:13,890 --> 00:08:19,110
the PHP world so the thing is focused on

00:08:16,950 --> 00:08:21,120
PHP it integrates with a lot of our

00:08:19,110 --> 00:08:23,490
specific tools that we use PHP depends

00:08:21,120 --> 00:08:26,430
prout sniffer phpunit

00:08:23,490 --> 00:08:29,660
more importantly it allows you to stay

00:08:26,430 --> 00:08:32,279
within the PHP for identity

00:08:29,660 --> 00:08:33,750
infrastructure fuel especially for

00:08:32,279 --> 00:08:35,940
junior developers who might not be

00:08:33,750 --> 00:08:40,020
comfortable with Java or any other

00:08:35,940 --> 00:08:42,599
language for that matter you might want

00:08:40,020 --> 00:08:45,600
to have to keep them in the PHP world to

00:08:42,599 --> 00:08:48,060
you know ease them into it it is also

00:08:45,600 --> 00:08:51,240
easy to extend because PHP requires no

00:08:48,060 --> 00:08:53,430
compilat you can easily extend thing you

00:08:51,240 --> 00:08:58,260
can even embed PHP code directly into

00:08:53,430 --> 00:08:59,850
your bill fun and in the end the

00:08:58,260 --> 00:09:02,230
decision is of course yours there are

00:08:59,850 --> 00:09:06,850
more alternative than

00:09:02,230 --> 00:09:10,600
only thing more and right going on to

00:09:06,850 --> 00:09:15,030
the basics to install thing we use

00:09:10,600 --> 00:09:19,870
parent who here does not know about care

00:09:15,030 --> 00:09:21,670
very good this is what it's very simply

00:09:19,870 --> 00:09:25,000
we have our own channel so you can just

00:09:21,670 --> 00:09:27,460
install it the documentation which is

00:09:25,000 --> 00:09:31,720
very extensive and my dad is in an

00:09:27,460 --> 00:09:34,530
optional package right I've mentioned

00:09:31,720 --> 00:09:38,500
before that thing uses xml bill files

00:09:34,530 --> 00:09:40,870
they consist of three basic elements the

00:09:38,500 --> 00:09:42,570
most important element is to task which

00:09:40,870 --> 00:09:46,990
is basically folk that performs

00:09:42,570 --> 00:09:49,450
something like a make gear or a peach

00:09:46,990 --> 00:09:52,660
call speech the unit or call speech be

00:09:49,450 --> 00:09:55,630
code sniffer so it's the most basic

00:09:52,660 --> 00:09:57,850
element with indigo found to group those

00:09:55,630 --> 00:10:00,070
tasks together we have what is called a

00:09:57,850 --> 00:10:02,800
target which can optionally depend on

00:10:00,070 --> 00:10:04,830
other car keys so in that way you can

00:10:02,800 --> 00:10:07,450
create a chain of targets and then

00:10:04,830 --> 00:10:10,720
there's the root note in the xml file

00:10:07,450 --> 00:10:14,920
which is the project how does that look

00:10:10,720 --> 00:10:17,110
i mentioned the project the root note we

00:10:14,920 --> 00:10:20,440
call this one example with a default

00:10:17,110 --> 00:10:23,830
target of world we have two targets one

00:10:20,440 --> 00:10:27,310
name hello and one name work target

00:10:23,830 --> 00:10:30,580
world depends on hello and both targets

00:10:27,310 --> 00:10:32,920
do very simple echo test well the end

00:10:30,580 --> 00:10:35,920
result and I'm hope I hope you can all

00:10:32,920 --> 00:10:38,440
see this will sort of see this the end

00:10:35,920 --> 00:10:40,810
result is LVL 0 test is called first

00:10:38,440 --> 00:10:45,730
because world which is the default desk

00:10:40,810 --> 00:10:48,580
or target sorry depends on hello so that

00:10:45,730 --> 00:10:51,070
way you can say you have a built target

00:10:48,580 --> 00:10:53,590
you can make that depend on a target

00:10:51,070 --> 00:10:59,500
that syntax checks your files and then

00:10:53,590 --> 00:11:01,630
packages in it tested etc thing supports

00:10:59,500 --> 00:11:04,510
something which is very powerful

00:11:01,630 --> 00:11:07,420
properties which are basically while

00:11:04,510 --> 00:11:10,480
they are similar to any files so they

00:11:07,420 --> 00:11:13,750
are just simple key value files which

00:11:10,480 --> 00:11:15,430
can be load it with the property task

00:11:13,750 --> 00:11:17,320
right here

00:11:15,430 --> 00:11:20,649
and they can be expended in the build

00:11:17,320 --> 00:11:27,370
file everywhere in the bill found by

00:11:20,649 --> 00:11:30,580
using dollar keep moving on to file sets

00:11:27,370 --> 00:11:33,370
file sets are a pretty much unique

00:11:30,580 --> 00:11:34,810
concept you to end and fing fall sets

00:11:33,370 --> 00:11:39,970
allow you to group files that you want

00:11:34,810 --> 00:11:45,610
to process most desk supported such as

00:11:39,970 --> 00:11:48,670
copy an ftp but even phpunit file set

00:11:45,610 --> 00:11:50,589
with Fast Eddie you can use or you can

00:11:48,670 --> 00:11:53,800
define a number of regular expressions

00:11:50,589 --> 00:11:56,230
or sort of regular expressions to define

00:11:53,800 --> 00:11:57,850
which files you want to include in that

00:11:56,230 --> 00:12:00,399
particular file set in which files you

00:11:57,850 --> 00:12:02,620
want to execute so in the sense you

00:12:00,399 --> 00:12:04,450
build a file free of the files that you

00:12:02,620 --> 00:12:07,330
want to process in whatever task you are

00:12:04,450 --> 00:12:11,890
calling this case we include every PHP

00:12:07,330 --> 00:12:14,860
file start PHP in every directory and

00:12:11,890 --> 00:12:17,380
subdirectory in the directory

00:12:14,860 --> 00:12:20,350
application so we die very deep and

00:12:17,380 --> 00:12:24,729
include everything FIFA however we

00:12:20,350 --> 00:12:26,989
exclude everything that contains test

00:12:24,729 --> 00:12:29,119
by the way if you have any questions

00:12:26,989 --> 00:12:33,019
during the talk raise your hand no

00:12:29,119 --> 00:12:36,109
problem file steps can be referenced in

00:12:33,019 --> 00:12:38,869
the bill fun that means that you can

00:12:36,109 --> 00:12:40,999
define a file set once in the build file

00:12:38,869 --> 00:12:46,759
and then use it and reuse it and reuse

00:12:40,999 --> 00:12:50,660
it again file sets also allow you to add

00:12:46,759 --> 00:12:54,259
selectors where you can say okay I need

00:12:50,660 --> 00:12:58,629
files that are younger than eight or ten

00:12:54,259 --> 00:13:01,600
a year or contain this this file name or

00:12:58,629 --> 00:13:04,899
contain this specific line of text

00:13:01,600 --> 00:13:04,899
that's it

00:13:06,300 --> 00:13:14,760
during operations that that move or

00:13:10,920 --> 00:13:18,570
create files such as the competence we

00:13:14,760 --> 00:13:21,420
can also use mappers to change the file

00:13:18,570 --> 00:13:24,450
name before you copy it say you want to

00:13:21,420 --> 00:13:27,510
rename every txt file to dot something

00:13:24,450 --> 00:13:30,320
else you can use a member for that you

00:13:27,510 --> 00:13:34,320
can also during the copy use filters to

00:13:30,320 --> 00:13:38,760
strip comments or white space do a

00:13:34,320 --> 00:13:44,130
translation replace other values from a

00:13:38,760 --> 00:13:46,380
property file this example shows that in

00:13:44,130 --> 00:13:51,450
a little bit more detail if we have a

00:13:46,380 --> 00:13:54,900
mapper we use this in the task copy we

00:13:51,450 --> 00:13:59,400
glob every duck txt file to dot new txt

00:13:54,900 --> 00:14:01,170
and then we filter chain we chain a

00:13:59,400 --> 00:14:03,930
number of filters in this case it's only

00:14:01,170 --> 00:14:08,050
to replay every place records rec X

00:14:03,930 --> 00:14:11,380
filter try saying that three times after

00:14:08,050 --> 00:14:16,300
which replaces the windows Sierra left

00:14:11,380 --> 00:14:20,080
with just a selection oh and by then it

00:14:16,300 --> 00:14:22,360
expands all the properties in in the

00:14:20,080 --> 00:14:24,399
file that is found expend properties

00:14:22,360 --> 00:14:26,350
will basically scan the file that you

00:14:24,399 --> 00:14:29,560
are copying for any mention of

00:14:26,350 --> 00:14:32,620
properties that are loaded so that we

00:14:29,560 --> 00:14:37,690
can for example include a version of

00:14:32,620 --> 00:14:45,459
your ladies built-in in some file I'm

00:14:37,690 --> 00:14:48,940
moving on to a few examples now first we

00:14:45,459 --> 00:14:53,410
will start with version control then

00:14:48,940 --> 00:14:55,600
some unit testing phpunit packaging and

00:14:53,410 --> 00:14:57,640
then something about a point there will

00:14:55,600 --> 00:14:59,320
be a couple of specific examples about

00:14:57,640 --> 00:15:01,410
deployment it will not be a very

00:14:59,320 --> 00:15:06,490
extensive deployment thing because

00:15:01,410 --> 00:15:08,230
deployment this well is so specific to

00:15:06,490 --> 00:15:11,950
your situation

00:15:08,230 --> 00:15:14,290
not every not everybody deploys to to

00:15:11,950 --> 00:15:16,420
the same servers some people deployed to

00:15:14,290 --> 00:15:19,300
Amazon's so there are a lot of different

00:15:16,420 --> 00:15:28,330
scenarios that that you could think of I

00:15:19,300 --> 00:15:32,580
have chosen a simple scenario ever

00:15:28,330 --> 00:15:32,580
support sir Jason each the other

00:15:36,880 --> 00:15:47,070
as to define the bill filing not sure

00:15:42,360 --> 00:15:47,070
there's there's no real need right now

00:15:47,520 --> 00:15:52,140
and then on to a database migration

00:15:49,880 --> 00:15:54,350
interesting part and continuous

00:15:52,140 --> 00:15:54,350
integration

00:15:56,420 --> 00:16:01,579
starting with version control as I

00:15:59,089 --> 00:16:04,760
mentioned before we support at CVS not

00:16:01,579 --> 00:16:08,300
sure if anyone uses that we do support

00:16:04,760 --> 00:16:10,490
it we support as the N and get for

00:16:08,300 --> 00:16:15,320
purposes of this slide I've just chosen

00:16:10,490 --> 00:16:20,180
sdn get is pretty much the same the aqua

00:16:15,320 --> 00:16:22,220
one is we are going to copy you most of

00:16:20,180 --> 00:16:24,579
you know SPN I think who doesn't know

00:16:22,220 --> 00:16:24,579
why Stan

00:16:27,510 --> 00:16:34,170
this this test copies of one of the

00:16:30,420 --> 00:16:41,300
other copies repository are a URL to a

00:16:34,170 --> 00:16:44,490
tag the next example is an export of the

00:16:41,300 --> 00:16:48,530
well the same repository URL to a local

00:16:44,490 --> 00:16:52,320
directory most people that used to

00:16:48,530 --> 00:16:55,130
automatically build they wanted to check

00:16:52,320 --> 00:16:57,330
out from well they wanted to be started

00:16:55,130 --> 00:16:59,810
whenever you have a change in your

00:16:57,330 --> 00:17:03,810
repository so you want to check it out

00:16:59,810 --> 00:17:07,079
this you can do with x sv an export the

00:17:03,810 --> 00:17:10,620
last one is very interesting last

00:17:07,079 --> 00:17:13,980
revision of a particular repository URL

00:17:10,620 --> 00:17:16,680
and this is fast into a property which

00:17:13,980 --> 00:17:20,650
you can then storing txt file or

00:17:16,680 --> 00:17:24,520
somewhere else HTML

00:17:20,650 --> 00:17:26,920
moving on to phpunit we have built-in

00:17:24,520 --> 00:17:29,370
support for most and i want to say most

00:17:26,920 --> 00:17:33,310
because nothing changing as fastest

00:17:29,370 --> 00:17:37,360
phpunit so we support most configuration

00:17:33,310 --> 00:17:41,820
of options it gathers code coverage

00:17:37,360 --> 00:17:44,620
information and does some reporting

00:17:41,820 --> 00:17:45,730
reports into jane eunuch format so it's

00:17:44,620 --> 00:17:47,620
a little bit different than the

00:17:45,730 --> 00:17:53,680
reporting that feature unit does by

00:17:47,620 --> 00:17:57,880
itself HP unit is called disk in this

00:17:53,680 --> 00:18:01,290
manner we run at each per unit year with

00:17:57,880 --> 00:18:04,300
alt on failure and Hall Tamara truth

00:18:01,290 --> 00:18:06,490
what that means is that when piece unit

00:18:04,300 --> 00:18:09,490
encounters one failing test or in tests

00:18:06,490 --> 00:18:12,700
with an area we failed to build as a

00:18:09,490 --> 00:18:15,040
whole you can also set them to false and

00:18:12,700 --> 00:18:18,100
thing will happily draw from a long and

00:18:15,040 --> 00:18:20,360
run all your tests so you can do some

00:18:18,100 --> 00:18:25,330
reporting or whatever

00:18:20,360 --> 00:18:25,330
in this case we wanted to cancel good

00:18:36,940 --> 00:18:40,570
we've all

00:18:45,630 --> 00:18:48,200
the hook

00:18:51,710 --> 00:18:55,070
so the question was if I understand

00:18:53,419 --> 00:18:58,580
correctly if there is there a hook for

00:18:55,070 --> 00:19:01,929
when the bill fails not yet but it is

00:18:58,580 --> 00:19:04,820
something that is on the road because

00:19:01,929 --> 00:19:08,090
they're there been more people that were

00:19:04,820 --> 00:19:10,130
asking for that and it's something we're

00:19:08,090 --> 00:19:17,169
thinking something along the lines of a

00:19:10,130 --> 00:19:20,330
try-catch scenario back to the example

00:19:17,169 --> 00:19:22,399
bootstrap is just a general PHP file

00:19:20,330 --> 00:19:23,870
which you can which is included before

00:19:22,399 --> 00:19:26,090
all the tests are run where you can do

00:19:23,870 --> 00:19:29,980
some configuration setup for the test

00:19:26,090 --> 00:19:29,980
and we print the summary

00:19:31,180 --> 00:19:36,160
we included a simple fun set as I

00:19:33,820 --> 00:19:39,310
mentioned before the end result is right

00:19:36,160 --> 00:19:42,040
here there's only one test and it is

00:19:39,310 --> 00:19:46,510
failing and then the built as a whole

00:19:42,040 --> 00:19:49,420
fish and the nice thing about thing is

00:19:46,510 --> 00:19:52,930
that the exit level or the run level of

00:19:49,420 --> 00:19:55,180
thing itself will be larger than zero so

00:19:52,930 --> 00:19:59,610
if you were to run fiance Jenkins

00:19:55,180 --> 00:19:59,610
Jenkins will fail because think

00:20:02,070 --> 00:20:09,810
as I mentioned before you can do code

00:20:04,980 --> 00:20:12,560
coverage gathering and reporting before

00:20:09,810 --> 00:20:15,360
you do that we we set up the database

00:20:12,560 --> 00:20:17,760
which is basically the files that you

00:20:15,360 --> 00:20:20,010
one include code coverage for you don't

00:20:17,760 --> 00:20:21,960
want to cover anything outside your

00:20:20,010 --> 00:20:24,480
projects such as Barre classes that you

00:20:21,960 --> 00:20:26,730
include or even your tests you don't

00:20:24,480 --> 00:20:29,210
want to include those in your coverage

00:20:26,730 --> 00:20:29,210
reports

00:20:30,610 --> 00:20:37,299
we call phpunit with coach coverage is

00:20:33,790 --> 00:20:39,309
true and note that in this case all on

00:20:37,299 --> 00:20:42,580
error Alton failure are not present the

00:20:39,309 --> 00:20:45,309
default is false it means that if a test

00:20:42,580 --> 00:20:49,740
fails or errors we will continue anyway

00:20:45,309 --> 00:20:49,740
and it will just show up in the report

00:20:50,220 --> 00:20:57,850
we then generate those reports we

00:20:54,880 --> 00:21:01,150
generate the j unit style report and a

00:20:57,850 --> 00:21:04,830
clover staff report i will give you an

00:21:01,150 --> 00:21:08,950
example of this later please dem

00:21:04,830 --> 00:21:10,120
documentation thing currently integrates

00:21:08,950 --> 00:21:13,000
with with a number of popular

00:21:10,120 --> 00:21:15,250
documentation tools off engine is one of

00:21:13,000 --> 00:21:17,740
the latest this is not released yet but

00:21:15,250 --> 00:21:21,970
this is in our inner get up drunk right

00:21:17,740 --> 00:21:25,789
now we also record more restructure text

00:21:21,970 --> 00:21:30,100
not sure if anyone uses that no

00:21:25,789 --> 00:21:30,100
and we also support our home

00:21:30,659 --> 00:21:36,869
dark locks is pretty much identical to

00:21:34,379 --> 00:21:40,559
PHP documentary and it's in the way it

00:21:36,869 --> 00:21:43,139
is called and we just give it a number

00:21:40,559 --> 00:21:45,269
of files in our fall set set at Isla for

00:21:43,139 --> 00:21:47,309
the documentation and output directory

00:21:45,269 --> 00:21:52,080
and whether we wanted to make noise for

00:21:47,309 --> 00:21:56,009
now end result is 0 duck locks as you

00:21:52,080 --> 00:21:57,599
probably know it moving on to packaging

00:21:56,009 --> 00:22:02,210
with which is an interesting part of

00:21:57,599 --> 00:22:06,179
building your file or your your files

00:22:02,210 --> 00:22:08,820
most of you will deploy that choose to a

00:22:06,179 --> 00:22:12,629
server somewhere but in the case of

00:22:08,820 --> 00:22:15,509
thing which actually builds itself we

00:22:12,629 --> 00:22:18,629
provide a package online so that's

00:22:15,509 --> 00:22:23,419
either a tar or zip file or a for a

00:22:18,629 --> 00:22:23,419
package season which we are working on

00:22:23,840 --> 00:22:30,799
tour is is the format of choice for pair

00:22:28,070 --> 00:22:33,830
packages compare packages have an

00:22:30,799 --> 00:22:36,590
additional thinking them which is a

00:22:33,830 --> 00:22:38,539
manifest or a package of XML that's

00:22:36,590 --> 00:22:41,029
something you can generate with this

00:22:38,539 --> 00:22:44,029
task sepehr package there a number of

00:22:41,029 --> 00:22:46,690
options and the number of elements in

00:22:44,029 --> 00:22:49,190
this case the maintainer for effective

00:22:46,690 --> 00:22:51,559
we generate that and we end up with a

00:22:49,190 --> 00:22:55,100
package to XML which we can include in

00:22:51,559 --> 00:22:58,460
the top and the tar file we can generate

00:22:55,100 --> 00:23:00,799
like this it's pretty simple making the

00:22:58,460 --> 00:23:02,539
base either a base there and which will

00:23:00,799 --> 00:23:05,870
take all the files in this direction or

00:23:02,539 --> 00:23:08,090
wait until the file set we can also do

00:23:05,870 --> 00:23:10,330
the zip which is pretty much the same

00:23:08,090 --> 00:23:10,330
thing

00:23:10,730 --> 00:23:18,679
Packaging bars somewhat new we are

00:23:15,830 --> 00:23:24,200
working on on packaging thing itself as

00:23:18,679 --> 00:23:26,559
a farm who knows who doesn't know about

00:23:24,200 --> 00:23:26,559
far

00:23:27,880 --> 00:23:35,810
Forest is it is similar to the java jar

00:23:32,960 --> 00:23:40,870
which is sort of a zip file with which

00:23:35,810 --> 00:23:43,640
can execute so you can instead of

00:23:40,870 --> 00:23:45,800
unzipping your tar or your zip to a

00:23:43,640 --> 00:23:47,630
directory and just end up with all the

00:23:45,800 --> 00:23:50,300
files and everything you download a farm

00:23:47,630 --> 00:23:53,960
and you run PHP something something

00:23:50,300 --> 00:23:56,650
about far PHP will run it will run that

00:23:53,960 --> 00:24:00,920
far as if it were one logical block

00:23:56,650 --> 00:24:03,770
which this is very useful in in terms of

00:24:00,920 --> 00:24:06,500
versioning because if you deploy a new

00:24:03,770 --> 00:24:09,170
version or release a new version you

00:24:06,500 --> 00:24:12,070
just released a new fart instead of a

00:24:09,170 --> 00:24:12,070
number of files

00:24:13,020 --> 00:24:18,000
far is in terms of the made of data

00:24:16,050 --> 00:24:22,170
which is which is in there it's pretty

00:24:18,000 --> 00:24:26,100
similar to pair packages we include the

00:24:22,170 --> 00:24:28,320
author's a version and we can optionally

00:24:26,100 --> 00:24:31,440
include a stub phone and the stuff

00:24:28,320 --> 00:24:34,920
policy is executed the moment you start

00:24:31,440 --> 00:24:37,650
the HP on that far phone so that can

00:24:34,920 --> 00:24:40,880
start thing for example if it works a

00:24:37,650 --> 00:24:40,880
package thing as it far

00:24:42,240 --> 00:24:50,760
moving on to deployments which is where

00:24:44,960 --> 00:24:56,930
where it's getting interesting how many

00:24:50,760 --> 00:25:02,440
of you still deployed using FTP Wow

00:24:56,930 --> 00:25:04,970
couple and so just a fun just very good

00:25:02,440 --> 00:25:06,140
well I'm still going to show it anyway

00:25:04,970 --> 00:25:10,760
because there are a lot of people that

00:25:06,140 --> 00:25:14,510
are still deployed with ftp I myself if

00:25:10,760 --> 00:25:18,500
I do that I only deploy ASAP if I if I

00:25:14,510 --> 00:25:21,380
before 12 uh-huh SCP was pretty similar

00:25:18,500 --> 00:25:23,690
to what you would think you passed the

00:25:21,380 --> 00:25:28,250
username and password for a public key

00:25:23,690 --> 00:25:32,450
and a private key a hostname destination

00:25:28,250 --> 00:25:36,220
directory and a fossa again with ftp

00:25:32,450 --> 00:25:36,220
deploy is pretty much the same thing

00:25:38,740 --> 00:25:46,010
similar to Capistrano you can also

00:25:42,320 --> 00:25:49,990
deploy using synonyms say that you

00:25:46,010 --> 00:25:53,390
deploy version 1 point 0 of your app and

00:25:49,990 --> 00:25:55,880
you want to deploy version 1.1 you can

00:25:53,390 --> 00:25:59,300
copy over all your files of course but

00:25:55,880 --> 00:26:01,580
if you were to remove in version 1.1 one

00:25:59,300 --> 00:26:03,250
of your files would be removed and it

00:26:01,580 --> 00:26:07,300
would still be

00:26:03,250 --> 00:26:09,280
so you want a fresh copy and you want to

00:26:07,300 --> 00:26:14,520
point that app to the new 52 the new

00:26:09,280 --> 00:26:14,520
location which is where we use siblings

00:26:16,940 --> 00:26:21,220
we first export

00:26:21,290 --> 00:26:29,120
the code from the svn repository to a

00:26:26,210 --> 00:26:31,100
specific directory the directory name is

00:26:29,120 --> 00:26:34,850
based on the last revision of that

00:26:31,100 --> 00:26:39,860
repository we then simulink that new

00:26:34,850 --> 00:26:43,070
target too well the base care of our app

00:26:39,860 --> 00:26:46,640
we can also do this on a remote server

00:26:43,070 --> 00:26:49,700
with the task SSH in that case we just

00:26:46,640 --> 00:26:53,090
run the command ellen has minus s on

00:26:49,700 --> 00:26:55,100
that directory and it also allows for

00:26:53,090 --> 00:26:58,070
easy control backs because if your

00:26:55,100 --> 00:27:02,500
version 1.1 were not to work you can

00:26:58,070 --> 00:27:07,389
just change the symlink back to 1.0 and

00:27:02,500 --> 00:27:10,059
the damage its damage limitation

00:27:07,389 --> 00:27:13,919
if you have multiple servers multiple

00:27:10,059 --> 00:27:17,200
targets a stage in testing production

00:27:13,919 --> 00:27:20,979
one way to treat that is to use the

00:27:17,200 --> 00:27:24,909
input test which basically prompts you

00:27:20,979 --> 00:27:26,649
to enter a string we have in this case

00:27:24,909 --> 00:27:32,259
we have three valid arguments testing

00:27:26,649 --> 00:27:37,619
stage introduction and the inputted

00:27:32,259 --> 00:27:40,899
value we put in the property EMP then we

00:27:37,619 --> 00:27:44,139
let me load the property file which is

00:27:40,899 --> 00:27:45,669
we expand the envy property and we load

00:27:44,139 --> 00:27:48,070
that property from so say you have

00:27:45,669 --> 00:27:49,989
testing and staging and you have to

00:27:48,070 --> 00:27:51,879
property files for testing and staging

00:27:49,989 --> 00:27:57,039
those property files can contain for

00:27:51,879 --> 00:28:01,629
example database links authors and login

00:27:57,039 --> 00:28:03,609
codes you name it those parameters will

00:28:01,629 --> 00:28:06,309
vary from environment to environment

00:28:03,609 --> 00:28:08,349
this way you can say if you can use the

00:28:06,309 --> 00:28:10,619
same build file to deploy to multiple

00:28:08,349 --> 00:28:10,619
environments

00:28:14,630 --> 00:28:18,800
the next topic is database migration

00:28:16,730 --> 00:28:23,840
which is which is an interesting and

00:28:18,800 --> 00:28:28,540
tricky part of any deployment this is

00:28:23,840 --> 00:28:32,360
not the end all be all unfortunately

00:28:28,540 --> 00:28:35,090
thing has two ways of handling database

00:28:32,360 --> 00:28:36,590
migration right now keeping boy is the

00:28:35,090 --> 00:28:38,870
one that's within there the longest and

00:28:36,590 --> 00:28:42,200
we are currently integrating the liquid

00:28:38,870 --> 00:28:45,050
base which is really similar but alas

00:28:42,200 --> 00:28:47,780
poor little easier rollback d be

00:28:45,050 --> 00:28:51,140
deploying what I want to show you in

00:28:47,780 --> 00:28:53,510
this case uses a set of Delta files

00:28:51,140 --> 00:28:57,860
which are basically sequel scripts

00:28:53,510 --> 00:29:02,030
containing a dude and a hundred part so

00:28:57,860 --> 00:29:04,480
the do and the robot or up and down in

00:29:02,030 --> 00:29:07,160
which it's gone in other in some cases

00:29:04,480 --> 00:29:08,780
it tracks the current version of your

00:29:07,160 --> 00:29:10,550
database in an extra table that you

00:29:08,780 --> 00:29:13,250
include in your database which is to

00:29:10,550 --> 00:29:15,789
change log table with this truck

00:29:13,250 --> 00:29:19,029
instruction

00:29:15,789 --> 00:29:20,979
the Delta scripts look like this the

00:29:19,029 --> 00:29:25,629
first part of the signal file is the up

00:29:20,979 --> 00:29:28,149
pork or the dune and the next part of

00:29:25,629 --> 00:29:31,929
the script is the undo the I leave

00:29:28,149 --> 00:29:35,200
behind is that that every step you do

00:29:31,929 --> 00:29:37,869
you reverse in the undo part so a

00:29:35,200 --> 00:29:41,070
developer can either move up in the

00:29:37,869 --> 00:29:45,279
change log line or move back rollback of

00:29:41,070 --> 00:29:47,729
course did and this is only structure it

00:29:45,279 --> 00:29:51,070
is not data which is something that is

00:29:47,729 --> 00:29:53,950
incredibly hard to manage data and

00:29:51,070 --> 00:29:57,489
migration is a lot harder than database

00:29:53,950 --> 00:30:01,370
structure migration we're keeping into

00:29:57,489 --> 00:30:03,830
structured migration in this context

00:30:01,370 --> 00:30:07,220
we've been on the DVD boy task in this

00:30:03,830 --> 00:30:09,410
case we run it on a simple SQLite you

00:30:07,220 --> 00:30:13,340
around you can also run it against both

00:30:09,410 --> 00:30:15,110
graphs on my sequel or Oracle we benefit

00:30:13,340 --> 00:30:19,580
the directory that contains our Delta

00:30:15,110 --> 00:30:22,670
scripts and we pass the two parameters

00:30:19,580 --> 00:30:24,910
and output file and a undo output file

00:30:22,670 --> 00:30:27,170
the output file will contain all the

00:30:24,910 --> 00:30:29,210
statements that are necessary to get

00:30:27,170 --> 00:30:32,390
your database up to the latest version

00:30:29,210 --> 00:30:37,670
and the undo again to reverse it to the

00:30:32,390 --> 00:30:40,880
current situation we then execute the

00:30:37,670 --> 00:30:43,929
deploy SQL and the changes will be

00:30:40,880 --> 00:30:43,929
applied to our ethics

00:30:48,060 --> 00:30:57,640
nope we are thinking about doing a PHP

00:30:52,930 --> 00:30:59,050
snippets instead of just SQL but wearing

00:30:57,640 --> 00:31:04,900
that we're not really sure about them

00:30:59,050 --> 00:31:06,850
here this is what it looks like this is

00:31:04,900 --> 00:31:09,280
what the deploy file looks like after

00:31:06,850 --> 00:31:13,270
one version are after we are one person

00:31:09,280 --> 00:31:16,540
behind the first part is if we insert

00:31:13,270 --> 00:31:18,760
into our change work table the number of

00:31:16,540 --> 00:31:21,580
the change which is one is we have only

00:31:18,760 --> 00:31:24,250
one Delta five and it's numbers one the

00:31:21,580 --> 00:31:28,960
Delta set but there's only one set up

00:31:24,250 --> 00:31:31,330
they'll toss it is applied right now baa

00:31:28,960 --> 00:31:34,420
BBB deployed and this is the original

00:31:31,330 --> 00:31:36,790
final name of the telephone and then we

00:31:34,420 --> 00:31:39,760
see the snippet from our deltacom which

00:31:36,790 --> 00:31:43,180
is reading the post table and then at

00:31:39,760 --> 00:31:46,060
the end when this lated successfully we

00:31:43,180 --> 00:31:48,570
update the change log and said it's

00:31:46,060 --> 00:31:48,570
complete

00:31:50,279 --> 00:31:56,669
the other way around we just delete the

00:31:53,460 --> 00:32:01,519
post and then delete that entry from the

00:31:56,669 --> 00:32:01,519
changelog and work action where we work

00:32:02,220 --> 00:32:09,409
moving on to think and Jenkins who Leah

00:32:06,450 --> 00:32:09,409
knows about Jenkins

00:32:10,690 --> 00:32:17,890
jenkins is and it's going to be oh I'm

00:32:16,150 --> 00:32:21,730
going to be a bit and prediction here

00:32:17,890 --> 00:32:24,840
Jenkins is a Java heaven but there is no

00:32:21,730 --> 00:32:28,200
real PHP alternative right now so

00:32:24,840 --> 00:32:31,120
Jenkins is a continuous integration app

00:32:28,200 --> 00:32:34,300
which basically means that it allows you

00:32:31,120 --> 00:32:40,390
to either periodically or after a commit

00:32:34,300 --> 00:32:43,980
or or manually Ingram to build your app

00:32:40,390 --> 00:32:46,480
and to verify and test that bill and

00:32:43,980 --> 00:32:49,660
it's up cases deploy the results and

00:32:46,480 --> 00:32:51,760
this will happen automatically so

00:32:49,660 --> 00:32:55,270
instead of you having to run your bill

00:32:51,760 --> 00:32:57,700
every time it will just well it will

00:32:55,270 --> 00:33:00,280
monitor your svn or your gift repository

00:32:57,700 --> 00:33:04,210
and start a built say five minutes after

00:33:00,280 --> 00:33:06,190
your last commit build it report on any

00:33:04,210 --> 00:33:09,730
failures say you made an error and now

00:33:06,190 --> 00:33:13,330
your test tube fails it will mail you or

00:33:09,730 --> 00:33:16,140
you can even hook likes to it red light

00:33:13,330 --> 00:33:16,140
green light

00:33:17,639 --> 00:33:24,450
so you have a very good idea of how your

00:33:21,209 --> 00:33:28,169
how your changes is doing are your build

00:33:24,450 --> 00:33:30,479
is doing Jenkins comes with a fing

00:33:28,169 --> 00:33:33,989
plug-in which basically allows you to go

00:33:30,479 --> 00:33:37,440
thing without any any problems in this

00:33:33,989 --> 00:33:44,719
case I've added one target I hope you

00:33:37,440 --> 00:33:48,839
can all see this white a fing demo job

00:33:44,719 --> 00:33:52,829
in the fing demo job I've addicts on

00:33:48,839 --> 00:33:55,169
some extra elements it does before it

00:33:52,829 --> 00:33:58,259
performs check style which is the PHP

00:33:55,169 --> 00:34:01,649
code sniffer it performs code coverage

00:33:58,259 --> 00:34:07,200
and it performs testing well there are

00:34:01,649 --> 00:34:12,059
no tests this is all run from one single

00:34:07,200 --> 00:34:14,399
feature or fingernail file and this is

00:34:12,059 --> 00:34:17,010
what you see in the console output

00:34:14,399 --> 00:34:20,159
basically it just starts paying with

00:34:17,010 --> 00:34:23,039
your bill file you see thing running

00:34:20,159 --> 00:34:25,559
running running build is finished then

00:34:23,039 --> 00:34:27,919
the Jenkins doesn't clean up and your

00:34:25,559 --> 00:34:27,919
build is done

00:34:28,070 --> 00:34:32,380
time for some demonstration

00:34:37,050 --> 00:34:41,420
right this is Jenkins

00:34:41,890 --> 00:34:46,410
this is the configure part of my job

00:34:47,540 --> 00:34:54,530
I've said it to none it does not control

00:34:51,530 --> 00:34:59,090
any a version control right now and it

00:34:54,530 --> 00:35:02,720
does not periodically or pull build but

00:34:59,090 --> 00:35:06,530
it invokes pink right here I only invoke

00:35:02,720 --> 00:35:10,160
one target I can of course invoke more

00:35:06,530 --> 00:35:13,220
targets and I can even specify a

00:35:10,160 --> 00:35:16,030
specific thing build file and any

00:35:13,220 --> 00:35:21,430
additional properties that i might have

00:35:16,030 --> 00:35:21,430
now i'll show you the actual bill file

00:35:28,440 --> 00:35:35,339
this is someone I was a little more

00:35:31,920 --> 00:35:39,300
complex is built on there are a number

00:35:35,339 --> 00:35:41,400
of target the first one is clean which

00:35:39,300 --> 00:35:43,980
basically deletes the report directory

00:35:41,400 --> 00:35:46,980
and then creates it again the next one

00:35:43,980 --> 00:35:48,770
is lint which does a syntax check on all

00:35:46,980 --> 00:35:53,730
the source files that i have defined

00:35:48,770 --> 00:35:57,089
right here linting is something that's

00:35:53,730 --> 00:35:59,720
very easy it does catch a lot of errors

00:35:57,089 --> 00:36:01,890
I mean because PHP does not compile

00:35:59,720 --> 00:36:04,980
sometimes you don't know about a syntax

00:36:01,890 --> 00:36:11,359
error until your client calls you Friday

00:36:04,980 --> 00:36:11,359
night so this is this can be a lifesaver

00:36:12,740 --> 00:36:19,490
the following target is is test which is

00:36:16,880 --> 00:36:24,470
very similar to what I just showed you

00:36:19,490 --> 00:36:28,810
on the slide it calls phpunit it does

00:36:24,470 --> 00:36:32,570
help when there's a failure and it

00:36:28,810 --> 00:36:35,150
produces a number of reports then we

00:36:32,570 --> 00:36:37,580
have a target which tools PHP code

00:36:35,150 --> 00:36:41,090
sniffer code sniffer is basically a a

00:36:37,580 --> 00:36:44,360
check style like to which scans your PHP

00:36:41,090 --> 00:36:47,090
code for any violations of coding

00:36:44,360 --> 00:36:50,450
standards say you are using tabs instead

00:36:47,090 --> 00:36:54,290
of spaces you are using curly braces at

00:36:50,450 --> 00:36:56,750
the wrong place etc the final target is

00:36:54,290 --> 00:36:58,400
built which first depends on the

00:36:56,750 --> 00:37:01,160
previous targets to make sure they get

00:36:58,400 --> 00:37:04,420
executed and then it will include the

00:37:01,160 --> 00:37:04,420
results in a zip file

00:37:12,560 --> 00:37:16,600
and once again this is what you see

00:37:18,030 --> 00:37:29,510
also do a number of other demos for

00:37:24,120 --> 00:37:29,510
example the PHP unit

00:37:30,930 --> 00:37:37,680
this is what happens when they built

00:37:32,760 --> 00:37:39,430
this it has some extra colouring bright

00:37:37,680 --> 00:37:43,079
red

00:37:39,430 --> 00:37:43,079
to let you know something went wrong

00:37:44,620 --> 00:37:50,230
and i'm pretty sure i have a target

00:37:46,750 --> 00:37:52,180
which does not feel this is the report

00:37:50,230 --> 00:37:56,819
target

00:37:52,180 --> 00:37:56,819
and let me show you the actual report

00:38:14,440 --> 00:38:18,880
this is what the report looks like we

00:38:16,329 --> 00:38:21,940
have one test it has failed it is

00:38:18,880 --> 00:38:24,880
located in the package hello world the

00:38:21,940 --> 00:38:28,390
test is called hello Rob test and this

00:38:24,880 --> 00:38:29,859
is what happen so this is basically well

00:38:28,390 --> 00:38:34,510
it's it's similar to what phpunit

00:38:29,859 --> 00:38:37,200
produces it's it's a little this tile is

00:38:34,510 --> 00:38:37,200
a little different

00:38:38,130 --> 00:38:44,180
another example are very simple hello

00:38:41,490 --> 00:38:44,180
example

00:38:47,720 --> 00:38:53,650
and then I'll show you the DVD for

00:38:50,660 --> 00:38:53,650
example

00:39:02,760 --> 00:39:07,130
once again this is the deploy example

00:39:10,070 --> 00:39:15,310
this is the changelog sequel changelog

00:39:12,860 --> 00:39:15,310
table

00:39:20,339 --> 00:39:25,039
and it then generates the undo file as

00:39:23,009 --> 00:39:25,039
well

00:39:28,800 --> 00:39:32,360
alright moving on

00:39:32,930 --> 00:39:37,940
say you want to extend thing this is

00:39:35,720 --> 00:39:44,660
very easy has anybody ever written a

00:39:37,940 --> 00:39:47,349
fing task 1 2 3 4 good gonna ask you

00:39:44,660 --> 00:39:47,349
what test

00:40:00,960 --> 00:40:07,310
right so i'll create pudding so silly my

00:40:04,920 --> 00:40:07,310
stuff

00:40:09,010 --> 00:40:15,280
okay so very specific to your situation

00:40:11,430 --> 00:40:17,380
okay well that's executive of aiming was

00:40:15,280 --> 00:40:20,980
built for we have numerous extension

00:40:17,380 --> 00:40:24,460
points infant tasks types such as file

00:40:20,980 --> 00:40:26,260
set of selectors filters the members and

00:40:24,460 --> 00:40:28,540
even loggers so you can instead of

00:40:26,260 --> 00:40:30,670
producing the bright-red failure message

00:40:28,540 --> 00:40:35,280
on your console you can mail that bright

00:40:30,670 --> 00:40:39,220
red failure message or put it in HTML

00:40:35,280 --> 00:40:43,750
I'll show you how to start a or create a

00:40:39,220 --> 00:40:46,690
simple task all testing thing extend

00:40:43,750 --> 00:40:48,460
from the class task they contain a main

00:40:46,690 --> 00:40:50,620
method and optionally the init method

00:40:48,460 --> 00:40:52,420
ended method is called when seeing

00:40:50,620 --> 00:40:55,930
starts in main is called when the actual

00:40:52,420 --> 00:40:58,090
task starts and for each attribute that

00:40:55,930 --> 00:41:00,850
you have in the bill font to halt on

00:40:58,090 --> 00:41:02,430
failure for example with phpunit you

00:41:00,850 --> 00:41:05,180
create a setter method

00:41:02,430 --> 00:41:08,730
that's that's it pretty much things of

00:41:05,180 --> 00:41:12,800
figures by reflection figures out which

00:41:08,730 --> 00:41:17,010
attribute to match to which center and

00:41:12,800 --> 00:41:21,900
then how do you use that you can use the

00:41:17,010 --> 00:41:23,670
test def task to define the simple test

00:41:21,900 --> 00:41:27,420
that you want to use in your bill file

00:41:23,670 --> 00:41:29,339
we give it the name sampler we tell it

00:41:27,420 --> 00:41:33,180
where to find it and we tell it which

00:41:29,339 --> 00:41:35,940
namespace it has and then in this target

00:41:33,180 --> 00:41:40,050
we just pull it with the attribute bar

00:41:35,940 --> 00:41:43,280
we have one set their set for and we

00:41:40,050 --> 00:41:43,280
have one attribute for

00:41:44,600 --> 00:41:48,440
it also create an ad hoc extension I

00:41:47,120 --> 00:41:51,110
mentioned before that you could include

00:41:48,440 --> 00:41:52,970
PHP in your build file this is not

00:41:51,110 --> 00:41:55,160
something i recommend for larger tests

00:41:52,970 --> 00:41:57,470
for obvious reasons but if you have a

00:41:55,160 --> 00:41:59,570
simple task this might be working

00:41:57,470 --> 00:42:02,000
something that you don't want to share

00:41:59,570 --> 00:42:04,370
between both files for example it's

00:42:02,000 --> 00:42:08,060
pretty much the same view you include

00:42:04,370 --> 00:42:10,760
the task in the sea data block and you

00:42:08,060 --> 00:42:13,220
just add hockey you give it a name foo

00:42:10,760 --> 00:42:15,700
and then you're home foo it's pretty

00:42:13,220 --> 00:42:15,700
much the same

00:42:15,920 --> 00:42:20,840
future improvements will thinking this

00:42:17,900 --> 00:42:23,870
is where I implore you to contribute to

00:42:20,840 --> 00:42:25,550
think we of course need more tests and

00:42:23,870 --> 00:42:27,050
support there's there's a lot of stuff

00:42:25,550 --> 00:42:31,120
going on in the beach big world right

00:42:27,050 --> 00:42:33,470
now a new tools and new methods

00:42:31,120 --> 00:42:35,990
performance is something I would like to

00:42:33,470 --> 00:42:38,720
increase a lot as I mentioned before the

00:42:35,990 --> 00:42:41,960
far package thing has a lot of optional

00:42:38,720 --> 00:42:43,550
dependencies and a far package which

00:42:41,960 --> 00:42:45,260
includes most of the popular

00:42:43,550 --> 00:42:47,720
dependencies would be very easy for

00:42:45,260 --> 00:42:50,780
people to use instead of installing all

00:42:47,720 --> 00:42:52,730
the dependencies our documentation is

00:42:50,780 --> 00:42:55,550
pretty extensive right now but it can

00:42:52,730 --> 00:42:58,330
still be improved we need more test

00:42:55,550 --> 00:43:01,360
coverage we need more unit testing and

00:42:58,330 --> 00:43:04,370
we need more IDEs to support things

00:43:01,360 --> 00:43:08,420
right now phpstorm sports paying out of

00:43:04,370 --> 00:43:11,700
the box but eclipse for example doesn't

00:43:08,420 --> 00:43:17,400
consultants to do it doesn't so we'll

00:43:11,700 --> 00:43:20,790
request we are on github last link

00:43:17,400 --> 00:43:23,760
that's our official github link the rest

00:43:20,790 --> 00:43:26,630
starts on interesting links slides will

00:43:23,760 --> 00:43:30,480
be available later on SlideShare do

00:43:26,630 --> 00:43:33,030
leave me some feedback on joined in find

00:43:30,480 --> 00:43:35,130
us on thing that info or a shame on our

00:43:33,030 --> 00:43:37,170
screen we are we are there most of the

00:43:35,130 --> 00:43:41,480
time or of course everything official

00:43:37,170 --> 00:43:41,480

YouTube URL: https://www.youtube.com/watch?v=OOdrMwkQnMo


