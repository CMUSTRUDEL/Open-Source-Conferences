Title: PHP UK Conference 2012 - The journey towards Continuous Integration, by Sebastian Marek
Publication date: 2012-03-14
Playlist: PHP UK Conference 2012
Description: 
	http://www.phpconference.co.uk/talk/journey-towards-continuous-integration

Over the past three years we've been pushing to improve our automated testing practices within Plusnet and to win full support for it within the company across the spectrum of fellow developers, project managers and upper management. It took a while to agree on software we want to use, and standards we want to follow, but now all new code is being continuously built and tested and the results of that are visible business-wide. We use PHP_CodeSniffer to verify that we follow our coding standards, DocBlox to generate automated API documentation, PHPUnit to run test suites and Jenkins to run all these tools regularly, at least once a day and to generate aggregated reports. On top of that we run acceptance and regression tests using selenium and Behat. Finally, Sonar allows us to create and publish reports visible to everybody and more importantly reports that everybody can understand.

Setting it all up can be a tough exercise, but if you prepare to it upfront you might actually find it quite exciting! So, you strongly believe this is the way you should be developing your code, but you don't really know where to start? Let me show you how our journey began. You don't know how to convince your fellow developers to follow you? I'll tell you how to establish a strong team that will follow you. Your managers seem to be more interested in delivering your project on time and don't really see a point in spending additional time on unit testing and documenting your code? Maybe you haven't shown them the benefits of continuous integration in a way they can understand.

I'll show you what worked for us.

Sebastian Marek is a software architect at PlusNet - a PHP developer, always seeking new experiences. He is experienced in medium and large web application, and interested in Web development, database designing and administering.
Captions: 
	00:00:08,040 --> 00:00:16,070
watch hello everybody welcome to the

00:00:12,059 --> 00:00:16,070
dark i hope you you enjoyed the rest

00:00:16,420 --> 00:00:22,849
I'm just going to say a few words about

00:00:19,100 --> 00:00:27,110
me because that's kind of highly related

00:00:22,849 --> 00:00:33,020
i'm going to be talking about so if that

00:00:27,110 --> 00:00:40,630
works no hmm let's try to do it manually

00:00:33,020 --> 00:00:40,630
then okay

00:00:46,470 --> 00:00:55,180
maybe that will go right my name is

00:00:50,650 --> 00:00:58,120
Sebastian Marek I'm polish but I came to

00:00:55,180 --> 00:01:00,670
the UK like six years ago to work Africa

00:00:58,120 --> 00:01:04,030
for a company called plusnet we are

00:01:00,670 --> 00:01:06,610
sheffield-based I am a software

00:01:04,030 --> 00:01:09,100
architect and my main role since I kind

00:01:06,610 --> 00:01:10,660
of took the architectural there was to

00:01:09,100 --> 00:01:15,960
introduce the continuous integration

00:01:10,660 --> 00:01:18,700
platform to start some TDD processes

00:01:15,960 --> 00:01:22,660
fire up the whole automation process so

00:01:18,700 --> 00:01:27,610
we stopped doing manual things and and

00:01:22,660 --> 00:01:29,920
basically speed us up I've got well over

00:01:27,610 --> 00:01:33,340
ten years of experience of in PHP

00:01:29,920 --> 00:01:36,520
started with PHP three so not us as old

00:01:33,340 --> 00:01:39,670
as well as much I guess and and yeah and

00:01:36,520 --> 00:01:42,490
as I said a big fan of automation I had

00:01:39,670 --> 00:01:44,500
all I hate all the manual jobs so if i

00:01:42,490 --> 00:01:47,440
can see that something can be automated

00:01:44,500 --> 00:01:51,310
and speed up then i will do it and and

00:01:47,440 --> 00:01:52,840
when i'm not busy visiting castles and

00:01:51,310 --> 00:01:56,039
medieval places i usually try to

00:01:52,840 --> 00:01:58,690
contribute to open source software I

00:01:56,039 --> 00:02:00,459
about a year ago I started contributed

00:01:58,690 --> 00:02:03,459
to a project called Sona which I'm going

00:02:00,459 --> 00:02:07,450
to talk about a little bit later on and

00:02:03,459 --> 00:02:11,170
introduced in and introduce it to you so

00:02:07,450 --> 00:02:13,270
you can find me on Twitter my younas aim

00:02:11,170 --> 00:02:15,370
is perfect so we have any questions

00:02:13,270 --> 00:02:16,599
we're going to have a short Q&A session

00:02:15,370 --> 00:02:18,700
afterwards but we're running late so

00:02:16,599 --> 00:02:21,640
we're going to see how this goes but

00:02:18,700 --> 00:02:23,709
don't hesitate to to ask me any

00:02:21,640 --> 00:02:25,450
questions on Twitter or engage me later

00:02:23,709 --> 00:02:27,610
on after the talk if you don't have a

00:02:25,450 --> 00:02:30,459
chance to speak to me what I'm trying to

00:02:27,610 --> 00:02:33,250
get out of this this talk is is two

00:02:30,459 --> 00:02:37,560
things really its first to know how you

00:02:33,250 --> 00:02:40,690
guys look at continued integration

00:02:37,560 --> 00:02:42,459
processes whether you do it or not and

00:02:40,690 --> 00:02:45,520
how you do it and on the other hand i

00:02:42,459 --> 00:02:46,989
want to share how we do it it's not i'm

00:02:45,520 --> 00:02:49,000
not going to tell you how you need to do

00:02:46,989 --> 00:02:51,580
it i'm going to share my experiences how

00:02:49,000 --> 00:02:54,490
we've done it what were drunk what went

00:02:51,580 --> 00:02:57,460
fine how you can learn from that and

00:02:54,490 --> 00:02:58,770
take it to your own business and

00:02:57,460 --> 00:03:02,220
workplaces and

00:02:58,770 --> 00:03:05,100
and work on that joint in so please give

00:03:02,220 --> 00:03:07,740
me some feedback this is a link for 950

00:03:05,100 --> 00:03:10,590
I really appreciate any sort of comments

00:03:07,740 --> 00:03:12,480
bad and good if this is not what you

00:03:10,590 --> 00:03:13,710
expected or you would like to see

00:03:12,480 --> 00:03:16,560
something more we like to learn

00:03:13,710 --> 00:03:18,690
something more about CIA and so on it'll

00:03:16,560 --> 00:03:20,400
be it will be really nice there is

00:03:18,690 --> 00:03:23,040
another talk after mine i'm not sure

00:03:20,400 --> 00:03:24,840
what time is from Laura Beth she's going

00:03:23,040 --> 00:03:27,870
to talk about scaling communications in

00:03:24,840 --> 00:03:29,880
CI processes which i'm kinda probably

00:03:27,870 --> 00:03:31,890
get prepare you guys for the whole see i

00:03:29,880 --> 00:03:35,450
think then you can learn more about in

00:03:31,890 --> 00:03:37,830
depth CA processes from the other tack

00:03:35,450 --> 00:03:40,890
so my journey as i said started like

00:03:37,830 --> 00:03:42,570
five years ago of six when i joined plus

00:03:40,890 --> 00:03:44,280
night and it was it was a completely

00:03:42,570 --> 00:03:47,070
different experience war from what I've

00:03:44,280 --> 00:03:49,740
had before because back in Poland I

00:03:47,070 --> 00:03:53,490
usually I either worked alone or in a

00:03:49,740 --> 00:03:56,340
small team like 25 25 developers while

00:03:53,490 --> 00:03:58,620
when I came in here I joined at least

00:03:56,340 --> 00:04:01,080
for me a big team of 30 developers over

00:03:58,620 --> 00:04:04,890
30 developers and it was both PHP and

00:04:01,080 --> 00:04:07,770
Java and it was different environment

00:04:04,890 --> 00:04:10,320
because we actually have a huge code

00:04:07,770 --> 00:04:12,900
base which basically suppose our

00:04:10,320 --> 00:04:14,610
customers so we have to continuously

00:04:12,900 --> 00:04:16,290
maintained it is not like we delivering

00:04:14,610 --> 00:04:19,739
something and then ship it to a customer

00:04:16,290 --> 00:04:22,680
it's continuously being improved and new

00:04:19,739 --> 00:04:25,830
features added over time well just to

00:04:22,680 --> 00:04:28,080
keep the business grow so there was a

00:04:25,830 --> 00:04:29,940
change because there was actually some

00:04:28,080 --> 00:04:32,990
of the automation loaded in place we had

00:04:29,940 --> 00:04:35,730
some semi automation deployment already

00:04:32,990 --> 00:04:37,730
there was a QA department so there was a

00:04:35,730 --> 00:04:40,170
clear procedure how you get from

00:04:37,730 --> 00:04:43,470
developing something or fixing a problem

00:04:40,170 --> 00:04:44,880
and you get it from through the staging

00:04:43,470 --> 00:04:48,030
platformer you test them and get the

00:04:44,880 --> 00:04:52,440
life platform so there is a lot of learn

00:04:48,030 --> 00:04:53,640
a lot of things to learn a great support

00:04:52,440 --> 00:04:55,140
of people which is really really

00:04:53,640 --> 00:04:57,690
important when you start this kind of a

00:04:55,140 --> 00:05:01,350
job and and actually learn through the

00:04:57,690 --> 00:05:03,030
processes but as you go you kind of

00:05:01,350 --> 00:05:05,520
appreciate what's been done so far but

00:05:03,030 --> 00:05:08,840
you but you start seeing some additional

00:05:05,520 --> 00:05:11,980
problems which kind of stopping it down

00:05:08,840 --> 00:05:15,160
so first of all

00:05:11,980 --> 00:05:19,840
while we're actually delivering more

00:05:15,160 --> 00:05:21,820
stuff the codebase was growing and what

00:05:19,840 --> 00:05:23,710
comes with that understanding of the

00:05:21,820 --> 00:05:25,720
cold ways was changing as well it was

00:05:23,710 --> 00:05:27,100
really hard to actually find out how how

00:05:25,720 --> 00:05:29,080
all the things works especially if

00:05:27,100 --> 00:05:31,360
you're in your starter because then you

00:05:29,080 --> 00:05:34,960
then you try to fix one thing in one

00:05:31,360 --> 00:05:37,090
part of the code base and and then you

00:05:34,960 --> 00:05:39,220
suddenly find out a week or two weeks

00:05:37,090 --> 00:05:42,010
later something else broke and you had

00:05:39,220 --> 00:05:43,840
no idea that it's going to break and and

00:05:42,010 --> 00:05:47,830
there was a lot of duplication of the

00:05:43,840 --> 00:05:50,050
code so you change one thing and then

00:05:47,830 --> 00:05:52,750
you still find out than the other place

00:05:50,050 --> 00:05:54,430
it still doesn't work and we were

00:05:52,750 --> 00:05:56,500
stepping on each other toes basically

00:05:54,430 --> 00:05:58,480
there was a few teams working on

00:05:56,500 --> 00:05:59,950
different things one team changing

00:05:58,480 --> 00:06:02,230
something than the other breaking the

00:05:59,950 --> 00:06:04,660
other thing and the most of we released

00:06:02,230 --> 00:06:08,020
the most of the new stuff we do the

00:06:04,660 --> 00:06:09,790
holiday was to test it took more time so

00:06:08,020 --> 00:06:11,380
we go to the point where we couldn't

00:06:09,790 --> 00:06:13,870
actually test everything so we're

00:06:11,380 --> 00:06:16,570
running a risk that yes let's test

00:06:13,870 --> 00:06:18,100
what's most important the rest of it we

00:06:16,570 --> 00:06:22,900
just need to trust other serve that it's

00:06:18,100 --> 00:06:24,220
working and then we thought that there

00:06:22,900 --> 00:06:25,990
is something we have to do about it

00:06:24,220 --> 00:06:27,340
because if we keep growing and that's

00:06:25,990 --> 00:06:29,700
what is the business about business

00:06:27,340 --> 00:06:32,320
needs to grow businesses to make money

00:06:29,700 --> 00:06:34,690
we need to have something that can give

00:06:32,320 --> 00:06:38,380
us the confidence in what we do and

00:06:34,690 --> 00:06:39,670
actually give us an opportunity to to

00:06:38,380 --> 00:06:43,180
chain things without any fear or

00:06:39,670 --> 00:06:47,980
something like this so we started

00:06:43,180 --> 00:06:50,110
looking and we we send some scales I can

00:06:47,980 --> 00:06:52,900
say that that found simple test

00:06:50,110 --> 00:06:55,870
framework for us which was like rumor

00:06:52,900 --> 00:06:58,780
that was like six years ago and one of

00:06:55,870 --> 00:07:01,030
the first unit test frameworks that we

00:06:58,780 --> 00:07:02,380
kind of looked at and said right this is

00:07:01,030 --> 00:07:05,170
probably something that is going to help

00:07:02,380 --> 00:07:08,640
us this is the kind of a framework then

00:07:05,170 --> 00:07:11,140
we can write some automated tests and

00:07:08,640 --> 00:07:13,600
and it's going to give us kind of this

00:07:11,140 --> 00:07:16,090
answer does the code works or does it

00:07:13,600 --> 00:07:17,230
breaks if we if we change this thing

00:07:16,090 --> 00:07:19,570
whether the other stuff is going to

00:07:17,230 --> 00:07:20,950
break and stuff like this so it was

00:07:19,570 --> 00:07:23,980
actually very exciting because we

00:07:20,950 --> 00:07:25,180
actually could see how it improves the

00:07:23,980 --> 00:07:29,080
way we work

00:07:25,180 --> 00:07:31,930
and it was simply finding those small

00:07:29,080 --> 00:07:36,220
bugs here and there which the QA team

00:07:31,930 --> 00:07:38,949
wouldn't pick up anyway but after some

00:07:36,220 --> 00:07:40,780
time and all the excitement we hit the

00:07:38,949 --> 00:07:43,539
brick wall we started having first

00:07:40,780 --> 00:07:48,280
problems and it was both problems with

00:07:43,539 --> 00:07:51,580
knowledge and scaling issues training

00:07:48,280 --> 00:07:53,650
and and simply sometimes we didn't

00:07:51,580 --> 00:07:55,180
really know what to do it was this

00:07:53,650 --> 00:07:58,180
learning curve when we start doing the

00:07:55,180 --> 00:08:03,970
first assess and finding out that if we

00:07:58,180 --> 00:08:05,590
do some things this way it will work for

00:08:03,970 --> 00:08:08,410
example on one machine on the other it

00:08:05,590 --> 00:08:11,050
want or we were uncovering or mocking

00:08:08,410 --> 00:08:12,880
out some external third-party services

00:08:11,050 --> 00:08:14,979
which obviously didn't exist on every

00:08:12,880 --> 00:08:19,180
single machine which we which we run it

00:08:14,979 --> 00:08:20,860
on we had a mixture of different PHP

00:08:19,180 --> 00:08:23,199
versions and because we have all

00:08:20,860 --> 00:08:25,210
starting from PHP three then migrating

00:08:23,199 --> 00:08:29,289
to fall and then at some point finally

00:08:25,210 --> 00:08:31,510
25 it was really a spaghetti spaghetti

00:08:29,289 --> 00:08:33,219
code we didn't really know you pull the

00:08:31,510 --> 00:08:35,380
string there and you didn't know

00:08:33,219 --> 00:08:37,300
actually where it leads to and then

00:08:35,380 --> 00:08:40,240
obviously were those incompatibility

00:08:37,300 --> 00:08:41,830
changes and like for example it php5 we

00:08:40,240 --> 00:08:43,860
had to deploy a separate cluster of

00:08:41,830 --> 00:08:48,640
servers just to run PHP 5 ready

00:08:43,860 --> 00:08:50,470
applications we had no standards so this

00:08:48,640 --> 00:08:52,270
is this kind of thing that this is a

00:08:50,470 --> 00:08:54,520
message for you if you want to start

00:08:52,270 --> 00:08:56,860
doing this kind of stuff it's worth

00:08:54,520 --> 00:08:59,680
really spending a little bit more time

00:08:56,860 --> 00:09:01,450
up front and tell everybody look guys

00:08:59,680 --> 00:09:04,000
this is how we're going to do it because

00:09:01,450 --> 00:09:06,160
then we had guys doing it one way then

00:09:04,000 --> 00:09:08,920
the other guys didn't really agree to it

00:09:06,160 --> 00:09:10,839
and and it actually that to a wall and

00:09:08,920 --> 00:09:13,570
and some guy said I'm not going to do it

00:09:10,839 --> 00:09:19,450
and it doesn't really work you have to

00:09:13,570 --> 00:09:24,430
have the whole team behind you but with

00:09:19,450 --> 00:09:26,410
time we've been able to to have a few

00:09:24,430 --> 00:09:28,209
people in the team that really

00:09:26,410 --> 00:09:31,329
appreciate all the benefits that come

00:09:28,209 --> 00:09:33,730
from the unit tests and that we could

00:09:31,329 --> 00:09:36,640
have those small small pieces of code

00:09:33,730 --> 00:09:38,560
running somewhere there

00:09:36,640 --> 00:09:40,990
giving us this confidence of the change

00:09:38,560 --> 00:09:44,020
and this is really important because

00:09:40,990 --> 00:09:45,970
this team at the time on it was actually

00:09:44,020 --> 00:09:50,800
formed could drive the whole department

00:09:45,970 --> 00:09:52,300
for the future change and it was the

00:09:50,800 --> 00:09:54,640
time when we actually had to engage with

00:09:52,300 --> 00:09:57,340
with the business with the management

00:09:54,640 --> 00:09:59,050
this is not something you can you can

00:09:57,340 --> 00:10:00,910
hide and you can do behind a desk

00:09:59,050 --> 00:10:03,670
because at some point is going to scale

00:10:00,910 --> 00:10:07,000
you will need some you will need some

00:10:03,670 --> 00:10:08,560
phones either for for software you I

00:10:07,000 --> 00:10:10,360
will be talking about software so you

00:10:08,560 --> 00:10:12,490
have different options you can buy some

00:10:10,360 --> 00:10:16,270
you can use open source but you will

00:10:12,490 --> 00:10:18,100
need time and money for the training you

00:10:16,270 --> 00:10:19,780
will need you will need money for the

00:10:18,100 --> 00:10:23,200
hardware to set up the whole environment

00:10:19,780 --> 00:10:26,260
and so on and so on so we basically went

00:10:23,200 --> 00:10:28,930
over to the managers and and said right

00:10:26,260 --> 00:10:30,880
guys we all know we're struggling we

00:10:28,930 --> 00:10:32,080
know we we're going to hit the dead end

00:10:30,880 --> 00:10:34,450
at some point we need to do something

00:10:32,080 --> 00:10:39,100
about it and that's what we think is

00:10:34,450 --> 00:10:40,390
going to help us and it's not easy we

00:10:39,100 --> 00:10:42,340
had this discussion all over all over

00:10:40,390 --> 00:10:46,960
again why we want to do it wasn't going

00:10:42,340 --> 00:10:49,120
to bring us and it time after time it

00:10:46,960 --> 00:10:51,820
always leads to money because that's

00:10:49,120 --> 00:10:53,350
what really they care about and if you

00:10:51,820 --> 00:10:54,750
tell them right yes we're gonna you

00:10:53,350 --> 00:10:57,490
doing it as how much time do you need

00:10:54,750 --> 00:10:59,530
right when we start probably fifty

00:10:57,490 --> 00:11:02,590
percent more time no no no we're not

00:10:59,530 --> 00:11:04,930
going to do that how do you expect us to

00:11:02,590 --> 00:11:08,800
invest fifty percent more time into

00:11:04,930 --> 00:11:11,200
something that we don't see a strict

00:11:08,800 --> 00:11:12,730
benefit for the company and if you think

00:11:11,200 --> 00:11:14,500
about if you work for the customer is

00:11:12,730 --> 00:11:15,940
kind of at the same relation right

00:11:14,500 --> 00:11:17,590
you're going to spend fifty percent or

00:11:15,940 --> 00:11:20,080
more time on something that customer

00:11:17,590 --> 00:11:22,810
doesn't care so it's really tough

00:11:20,080 --> 00:11:25,300
conversation but what we found out there

00:11:22,810 --> 00:11:27,310
is a very nice analogy that you can kind

00:11:25,300 --> 00:11:29,650
of speak to the manages to explain them

00:11:27,310 --> 00:11:33,580
how it all works and it's all around

00:11:29,650 --> 00:11:37,450
technical depth and and money so if you

00:11:33,580 --> 00:11:40,570
kind of imagine yourself comparing every

00:11:37,450 --> 00:11:42,160
single time you you don't care about the

00:11:40,570 --> 00:11:43,750
quality of your code so you don't remove

00:11:42,160 --> 00:11:45,790
the duplications you don't care about

00:11:43,750 --> 00:11:48,480
coding standards and and whether the

00:11:45,790 --> 00:11:50,040
code is easy to read and easy to change

00:11:48,480 --> 00:11:52,560
and it's not getting more and more

00:11:50,040 --> 00:11:54,029
complex over time if you don't do those

00:11:52,560 --> 00:11:56,310
all those things it's like you borrowing

00:11:54,029 --> 00:11:59,029
your money on a credit card and the more

00:11:56,310 --> 00:12:01,230
money you borrow the Maureen in that and

00:11:59,029 --> 00:12:05,279
you have to pay this that at some point

00:12:01,230 --> 00:12:07,589
if you don't pay it frequently than

00:12:05,279 --> 00:12:09,540
obviously the interest kicks in if you

00:12:07,589 --> 00:12:11,250
don't pay off the interest then you're

00:12:09,540 --> 00:12:13,199
gonna have so you're going to start

00:12:11,250 --> 00:12:14,730
having the late fees and and it's going

00:12:13,199 --> 00:12:16,470
to cost you more and more and more and

00:12:14,730 --> 00:12:19,709
then if you're going to neglect it at

00:12:16,470 --> 00:12:21,870
two and the compound interest connect

00:12:19,709 --> 00:12:23,490
again and you probably find yourself in

00:12:21,870 --> 00:12:26,940
a place that you're not able to pay it

00:12:23,490 --> 00:12:29,310
off at all and and then simple question

00:12:26,940 --> 00:12:32,220
how often do you decide not to pay off

00:12:29,310 --> 00:12:35,699
your credit card it's it's really kind

00:12:32,220 --> 00:12:37,560
of kicks into your mind about yes we can

00:12:35,699 --> 00:12:40,649
save time here but is going to kick us

00:12:37,560 --> 00:12:43,410
India from the other side and it helped

00:12:40,649 --> 00:12:46,260
in our case it helped and we kind of got

00:12:43,410 --> 00:12:47,760
a sign of and and we said like okay

00:12:46,260 --> 00:12:49,860
you've got this Hardware here which was

00:12:47,760 --> 00:12:52,560
a starting point and we started looking

00:12:49,860 --> 00:12:55,860
into right so we we've done some

00:12:52,560 --> 00:12:57,180
investigation that's what we found that

00:12:55,860 --> 00:12:58,829
maybe it's not working for us very well

00:12:57,180 --> 00:13:00,889
maybe there is something else that we

00:12:58,829 --> 00:13:03,959
can use that's going to suit us better

00:13:00,889 --> 00:13:05,699
so we started comparing simple tests

00:13:03,959 --> 00:13:09,120
with another unit testing framework is

00:13:05,699 --> 00:13:11,910
this PHP in it and started thinking what

00:13:09,120 --> 00:13:14,430
both of them gives us and which is

00:13:11,910 --> 00:13:15,990
better this is again my personal opinion

00:13:14,430 --> 00:13:19,170
I'm not sure how many of you actually do

00:13:15,990 --> 00:13:21,060
unit testing in your daily job good

00:13:19,170 --> 00:13:22,769
which you need testing framework using

00:13:21,060 --> 00:13:25,949
simple tests who's using simple test

00:13:22,769 --> 00:13:29,910
who's using phpunit think you've made

00:13:25,949 --> 00:13:31,920
the same decision but when we look at

00:13:29,910 --> 00:13:34,260
the time we were looking basically for

00:13:31,920 --> 00:13:35,610
very simple things for the support for

00:13:34,260 --> 00:13:37,440
the road map to see actually whether

00:13:35,610 --> 00:13:39,660
it's maintained well whether you're

00:13:37,440 --> 00:13:43,050
going to have new new features added and

00:13:39,660 --> 00:13:44,910
things like that and at the time and I

00:13:43,050 --> 00:13:46,290
think it's still like this it's simple

00:13:44,910 --> 00:13:49,920
test it doesn't evolve very quickly

00:13:46,290 --> 00:13:54,420
while with phpunit every other month you

00:13:49,920 --> 00:13:57,089
basically have a new update and then we

00:13:54,420 --> 00:13:59,550
looked into into support fall sort of

00:13:57,089 --> 00:14:01,560
metrics and report because this is what

00:13:59,550 --> 00:14:02,410
actually the management wants to see

00:14:01,560 --> 00:14:04,269
they don't want to

00:14:02,410 --> 00:14:06,819
into the code they wants to see nice

00:14:04,269 --> 00:14:08,139
graphs they want to better understand

00:14:06,819 --> 00:14:10,990
where you're going and whether is

00:14:08,139 --> 00:14:14,230
actually helping the business so well

00:14:10,990 --> 00:14:18,220
the decision was easy we switch to PHP

00:14:14,230 --> 00:14:19,720
in it well easy as is it aside and

00:14:18,220 --> 00:14:21,699
actually do because we will already had

00:14:19,720 --> 00:14:23,050
bunch of simple tests and what we're

00:14:21,699 --> 00:14:25,300
going to do with them are you going to

00:14:23,050 --> 00:14:27,850
sit down for weeks and weeks and rewrite

00:14:25,300 --> 00:14:30,189
them now just to be able to run them

00:14:27,850 --> 00:14:32,529
with PHP in it so this is this kind of

00:14:30,189 --> 00:14:35,560
thinking that I'm kind of trying to

00:14:32,529 --> 00:14:37,750
promote try to kind of get a little bit

00:14:35,560 --> 00:14:39,490
of that idea that you have to do a lot

00:14:37,750 --> 00:14:41,319
of manual work and try to think whether

00:14:39,490 --> 00:14:44,170
you can automate it and that's what we

00:14:41,319 --> 00:14:47,769
came up with we basically within a few

00:14:44,170 --> 00:14:50,110
days created a very simple script that a

00:14:47,769 --> 00:14:52,480
basically converted major of the simple

00:14:50,110 --> 00:14:54,879
task of functionality into PHP in it

00:14:52,480 --> 00:14:55,810
doesn't perfect it wasn't like I'm going

00:14:54,879 --> 00:14:58,209
to convert it and is going to

00:14:55,810 --> 00:15:00,279
immediately run in PHP unit but those

00:14:58,209 --> 00:15:02,529
simple changes like I know extending

00:15:00,279 --> 00:15:05,500
that the framework test case or or

00:15:02,529 --> 00:15:07,449
different ways you doing assertions it's

00:15:05,500 --> 00:15:09,519
it's pretty it was pretty easy to map

00:15:07,449 --> 00:15:11,680
one from the other so within a few days

00:15:09,519 --> 00:15:15,040
we had a we had a program that basically

00:15:11,680 --> 00:15:16,420
did the did the conversion and it for

00:15:15,040 --> 00:15:19,209
every single module that we were

00:15:16,420 --> 00:15:21,220
basically testing it took like maybe 10

00:15:19,209 --> 00:15:22,810
15 to health and our work to make it

00:15:21,220 --> 00:15:27,220
completely compliant and you could run

00:15:22,810 --> 00:15:29,139
them and have it that the program is

00:15:27,220 --> 00:15:31,660
actually still on my github account it's

00:15:29,139 --> 00:15:35,800
a bit dodgy I actually did it for fun in

00:15:31,660 --> 00:15:37,569
in Python and but I found myself last

00:15:35,800 --> 00:15:38,920
week I think still found in a dark

00:15:37,569 --> 00:15:40,689
places of legacy code base another

00:15:38,920 --> 00:15:43,000
module with simple tests and just run it

00:15:40,689 --> 00:15:47,380
and done within half an hour I got had

00:15:43,000 --> 00:15:49,660
converted again the next thing that we

00:15:47,380 --> 00:15:51,610
wanted to address is was the issue that

00:15:49,660 --> 00:15:53,559
every single developer so far was

00:15:51,610 --> 00:15:56,680
running their unit tests on their own

00:15:53,559 --> 00:15:58,240
machine so there wasn't a central place

00:15:56,680 --> 00:16:00,490
that you could see how it actually

00:15:58,240 --> 00:16:02,110
behaves where the other thing is fine so

00:16:00,490 --> 00:16:06,279
we need a little bit of an automation of

00:16:02,110 --> 00:16:10,000
on a kind of a publicly in terms of

00:16:06,279 --> 00:16:13,120
company publicly available soft hard

00:16:10,000 --> 00:16:16,180
ware and build a box so we started

00:16:13,120 --> 00:16:18,820
looking at all the options over there

00:16:16,180 --> 00:16:22,899
and first we look at PHP under control

00:16:18,820 --> 00:16:26,290
and this was like probably the first CI

00:16:22,899 --> 00:16:29,050
server available at the time that that

00:16:26,290 --> 00:16:31,660
we could use for that purpose and it was

00:16:29,050 --> 00:16:34,870
actually very simple because it was

00:16:31,660 --> 00:16:37,060
already well known in terms of the PHP

00:16:34,870 --> 00:16:38,589
under control is an add-on for cruise

00:16:37,060 --> 00:16:42,520
control how many of you actually use PHP

00:16:38,589 --> 00:16:43,660
under control before okay how many of

00:16:42,520 --> 00:16:47,410
you use Jenkins I'm going to talk about

00:16:43,660 --> 00:16:48,910
Jenkins later on cool so we went through

00:16:47,410 --> 00:16:50,440
PHP under control first I was actually

00:16:48,910 --> 00:16:52,270
contributing at some time a little bit

00:16:50,440 --> 00:16:55,540
and helping manual Pickler the creator

00:16:52,270 --> 00:16:58,750
of it to to work on it and make it

00:16:55,540 --> 00:17:00,339
better for for all of us but it's an

00:16:58,750 --> 00:17:04,300
add-on for cruise control which was at

00:17:00,339 --> 00:17:07,390
the time very very popular CI server for

00:17:04,300 --> 00:17:08,740
java project and it actually supported

00:17:07,390 --> 00:17:10,630
everything that we need it so we'd

00:17:08,740 --> 00:17:12,429
supported phpunit although optimization

00:17:10,630 --> 00:17:15,400
test all the metrics that we needed so

00:17:12,429 --> 00:17:18,189
coverage reports and check style and

00:17:15,400 --> 00:17:20,980
making sure that we actually following

00:17:18,189 --> 00:17:23,709
our coding style and so and so on and it

00:17:20,980 --> 00:17:25,540
was all available in a very nice on a

00:17:23,709 --> 00:17:28,300
very nice dashboards and we started

00:17:25,540 --> 00:17:32,470
deploying more modules we could all see

00:17:28,300 --> 00:17:34,090
all the unit test cases and whether the

00:17:32,470 --> 00:17:37,780
way failing or not i think the

00:17:34,090 --> 00:17:40,570
resolution is not very good we generated

00:17:37,780 --> 00:17:43,990
the automated documentation at the time

00:17:40,570 --> 00:17:45,580
we were using PHP documenter and all

00:17:43,990 --> 00:17:48,220
those graphs that we are after that we

00:17:45,580 --> 00:17:50,050
can actually see kind of overtime how

00:17:48,220 --> 00:17:52,179
they how we actually perform how many

00:17:50,050 --> 00:17:55,179
failures we have how many violations

00:17:52,179 --> 00:17:56,590
then digging into coverage report see

00:17:55,179 --> 00:17:57,940
how much of the code is actually called

00:17:56,590 --> 00:18:03,070
the do it instead and stuff like this

00:17:57,940 --> 00:18:04,710
and copes me for violations because it

00:18:03,070 --> 00:18:07,270
all basically work on a very simple

00:18:04,710 --> 00:18:09,250
concept as it actually runs for Jenkins

00:18:07,270 --> 00:18:12,010
right now so we basically run all those

00:18:09,250 --> 00:18:13,780
simple programs behind it generated the

00:18:12,010 --> 00:18:20,860
report and then just gave you the nice

00:18:13,780 --> 00:18:22,780
graphs and stuff but again we started

00:18:20,860 --> 00:18:25,270
having problems just because we started

00:18:22,780 --> 00:18:26,890
doing more and more unit tests more and

00:18:25,270 --> 00:18:28,780
more code was covered with having had

00:18:26,890 --> 00:18:29,980
problems with with the performance of

00:18:28,780 --> 00:18:33,160
the bill box it was like a

00:18:29,980 --> 00:18:34,840
a very it was like a desktop running

00:18:33,160 --> 00:18:36,400
somewhere under somebody's desk

00:18:34,840 --> 00:18:39,940
basically that's what we got at the time

00:18:36,400 --> 00:18:42,780
and cruise control had probably still

00:18:39,940 --> 00:18:46,840
having a very annoying habit of crushing

00:18:42,780 --> 00:18:49,480
every now and then and the more we

00:18:46,840 --> 00:18:51,220
started deploying more code the more it

00:18:49,480 --> 00:18:53,860
took us to actually you recover from the

00:18:51,220 --> 00:18:55,960
crash point so when we started with 10

00:18:53,860 --> 00:18:57,250
at the end of the process and we started

00:18:55,960 --> 00:18:59,530
thinking about switching to Jenkins

00:18:57,250 --> 00:19:01,240
we've got like hundred and you can

00:18:59,530 --> 00:19:03,309
imagine when we wanted to run all 100 of

00:19:01,240 --> 00:19:07,299
them it probably took like eight hours

00:19:03,309 --> 00:19:09,070
to recover and yeah that's good if only

00:19:07,299 --> 00:19:10,720
doesn't crush again and we have to do it

00:19:09,070 --> 00:19:12,669
again and again and again so the whole

00:19:10,720 --> 00:19:17,770
feedback think that we want it from it

00:19:12,669 --> 00:19:21,580
wasn't that so looked at Jenkins way it

00:19:17,770 --> 00:19:23,679
was called hudson at the time and this

00:19:21,580 --> 00:19:26,230
was actually solving all our problems

00:19:23,679 --> 00:19:30,250
because first it was much more stable

00:19:26,230 --> 00:19:31,809
and secondly it was much much easier to

00:19:30,250 --> 00:19:33,790
configure i'm actually installed with

00:19:31,809 --> 00:19:35,770
cruise control he took us a lot of time

00:19:33,790 --> 00:19:39,730
to actually set it up understand how it

00:19:35,770 --> 00:19:43,330
works create all those all those tasks

00:19:39,730 --> 00:19:45,250
that could run phpunit PHP depend on all

00:19:43,330 --> 00:19:49,419
the other software you've got things

00:19:45,250 --> 00:19:52,720
like what's the best environment created

00:19:49,419 --> 00:19:54,669
a CI template for for junkies right now

00:19:52,720 --> 00:19:57,270
which basically is a very simple thing

00:19:54,669 --> 00:20:00,100
to set up we didn't have it at the time

00:19:57,270 --> 00:20:02,679
but what was the most exciting things

00:20:00,100 --> 00:20:05,020
was distributed bills because we were

00:20:02,679 --> 00:20:08,260
restrained by just one server what

00:20:05,020 --> 00:20:10,419
Jenkins gave us was was the slaves and

00:20:08,260 --> 00:20:13,299
the fact that you can actually configure

00:20:10,419 --> 00:20:17,890
several slaves and tell Hudson or

00:20:13,299 --> 00:20:19,929
Jenkins now to to ask a slave to the day

00:20:17,890 --> 00:20:22,059
build which was scaled really really

00:20:19,929 --> 00:20:23,380
nice and we when we came back to the

00:20:22,059 --> 00:20:24,669
management and said right we have in

00:20:23,380 --> 00:20:25,750
this problems we need new hardware we

00:20:24,669 --> 00:20:29,169
got new hard way and we could actually

00:20:25,750 --> 00:20:30,820
set up 15 slaves and that's what it

00:20:29,169 --> 00:20:36,390
actually started kick it kick it kick in

00:20:30,820 --> 00:20:38,980
and help us actually run the whole thing

00:20:36,390 --> 00:20:41,530
we even at some point deployed mac mini

00:20:38,980 --> 00:20:42,730
and and use it as a slave and i just for

00:20:41,530 --> 00:20:43,160
fun somebody follow we just have a

00:20:42,730 --> 00:20:44,750
magnet

00:20:43,160 --> 00:20:49,880
over there lets users of this life just

00:20:44,750 --> 00:20:51,650
so have another one right one thing that

00:20:49,880 --> 00:20:55,400
I want to mention it it actually tells

00:20:51,650 --> 00:20:57,440
that in here we now use Jenkins for

00:20:55,400 --> 00:21:01,100
every single automated thing that we

00:20:57,440 --> 00:21:04,270
need so it's not only unit test we have

00:21:01,100 --> 00:21:07,760
the whole deployment thing on Jenkins so

00:21:04,270 --> 00:21:09,110
as of now it doesn't happen that we

00:21:07,760 --> 00:21:12,320
deploy the code for example to the

00:21:09,110 --> 00:21:14,990
staging platform we basically say right

00:21:12,320 --> 00:21:17,150
the whole integration is now done so

00:21:14,990 --> 00:21:19,760
we've had several developers working on

00:21:17,150 --> 00:21:21,830
several features it all get merged in

00:21:19,760 --> 00:21:23,930
into the into the project branch and

00:21:21,830 --> 00:21:26,510
then we go to the QA department and say

00:21:23,930 --> 00:21:28,520
guys we're ready you roll it out

00:21:26,510 --> 00:21:30,530
whenever you want and start testing it

00:21:28,520 --> 00:21:33,490
we obviously tested it as much as we

00:21:30,530 --> 00:21:36,790
could on on the build box in terms of

00:21:33,490 --> 00:21:40,790
unit testing and looking at all the

00:21:36,790 --> 00:21:42,230
violations and coding standards but then

00:21:40,790 --> 00:21:44,420
and I'm going to talk about a little bit

00:21:42,230 --> 00:21:45,980
in a minute about it we started looking

00:21:44,420 --> 00:21:48,140
into the functional tests so we can

00:21:45,980 --> 00:21:53,720
actually test the applications from from

00:21:48,140 --> 00:21:56,360
the top level perspective that was this

00:21:53,720 --> 00:21:58,940
so well it's going to be probably very

00:21:56,360 --> 00:22:00,500
familiar to most of you about all those

00:21:58,940 --> 00:22:02,840
things that you get in Jenkins because

00:22:00,500 --> 00:22:05,750
it's very very similar to what we had in

00:22:02,840 --> 00:22:07,640
PHP under control so all the trends

00:22:05,750 --> 00:22:10,520
about how it actually behaves how do you

00:22:07,640 --> 00:22:13,300
deal with the code coverage and and test

00:22:10,520 --> 00:22:16,580
results trends and stuff like this you

00:22:13,300 --> 00:22:18,860
you can see in a little bit more detail

00:22:16,580 --> 00:22:22,430
how many violations you have how many

00:22:18,860 --> 00:22:24,170
fails tests how much code is covered and

00:22:22,430 --> 00:22:25,790
actually drill into it with it which is

00:22:24,170 --> 00:22:27,590
what i really love when you can see all

00:22:25,790 --> 00:22:30,020
those details when you need to do a

00:22:27,590 --> 00:22:31,550
little bit more inspection on that still

00:22:30,020 --> 00:22:34,660
the same code coverage report because

00:22:31,550 --> 00:22:38,240
this is all driven by phpunit and and

00:22:34,660 --> 00:22:41,450
then another change so this is another

00:22:38,240 --> 00:22:46,910
kind of a thing that I've learned over

00:22:41,450 --> 00:22:48,830
time some people basically it's hard for

00:22:46,910 --> 00:22:51,950
them to make a decision to change

00:22:48,830 --> 00:22:54,500
something and you have to now and then

00:22:51,950 --> 00:22:56,540
go back look from some perspective and

00:22:54,500 --> 00:22:58,940
say whether a thing is working for us

00:22:56,540 --> 00:23:01,220
so we had problems with PHP documented

00:22:58,940 --> 00:23:03,950
for example it took a lot of time to

00:23:01,220 --> 00:23:06,590
actually create any sort of API

00:23:03,950 --> 00:23:11,060
documentation how many of you using PHP

00:23:06,590 --> 00:23:14,450
documenta still Allah switch this is

00:23:11,060 --> 00:23:17,270
dark blocks so with PHP documented we

00:23:14,450 --> 00:23:19,100
could run into long menace if not dozens

00:23:17,270 --> 00:23:22,190
of minutes to create as a documentation

00:23:19,100 --> 00:23:24,230
for a single module this toy does it in

00:23:22,190 --> 00:23:27,560
in a few minutes it's very very quick

00:23:24,230 --> 00:23:29,990
and and it's I'm not sure would actually

00:23:27,560 --> 00:23:32,840
PHP documentaries is actively developed

00:23:29,990 --> 00:23:35,480
anymore not sure I don't think so and

00:23:32,840 --> 00:23:38,240
this is this is really well supported

00:23:35,480 --> 00:23:40,600
and still developed but yet the

00:23:38,240 --> 00:23:42,920
performance change is really really big

00:23:40,600 --> 00:23:44,330
so it basically suite at some point to

00:23:42,920 --> 00:23:46,580
Doug blogs and it was actually really

00:23:44,330 --> 00:23:48,410
simple you probably don't have to do

00:23:46,580 --> 00:23:50,030
much because it's still compliant in

00:23:48,410 --> 00:23:53,600
terms of all the annotations that you

00:23:50,030 --> 00:23:55,220
use so it's only a matter of switching

00:23:53,600 --> 00:23:57,650
uninstalling different software and

00:23:55,220 --> 00:24:02,600
running it with that not much to do

00:23:57,650 --> 00:24:04,400
really functional testing this is kind

00:24:02,600 --> 00:24:09,020
of another hard subject that we hadn't

00:24:04,400 --> 00:24:10,670
lost net and because we've started when

00:24:09,020 --> 00:24:12,740
we started seeing problems that some of

00:24:10,670 --> 00:24:16,640
the part of the legacy code which wasn't

00:24:12,740 --> 00:24:18,740
really easy to test we had to tackle it

00:24:16,640 --> 00:24:20,960
some somehow else so yes we can create

00:24:18,740 --> 00:24:22,790
unitus here but there is still a large

00:24:20,960 --> 00:24:24,200
part of the code not cover the dull and

00:24:22,790 --> 00:24:28,040
we don't really know whether it works or

00:24:24,200 --> 00:24:30,920
not so we thought about using selenium

00:24:28,040 --> 00:24:34,040
framework to to perform some automation

00:24:30,920 --> 00:24:38,420
in terms of testing you I how many of

00:24:34,040 --> 00:24:39,950
you using selenium good a lot so what

00:24:38,420 --> 00:24:41,480
we've done using just saline to drive

00:24:39,950 --> 00:24:45,680
that but we've started developing our

00:24:41,480 --> 00:24:47,540
own framework wrong if there is

00:24:45,680 --> 00:24:50,030
something else for you dad that is

00:24:47,540 --> 00:24:51,740
actively developed use that and better

00:24:50,030 --> 00:24:54,410
contribute to that and try to do

00:24:51,740 --> 00:24:56,300
something for you it worked I'm not

00:24:54,410 --> 00:24:59,030
saying you didn't work it helped us at

00:24:56,300 --> 00:25:00,500
the beginning but the problem you have

00:24:59,030 --> 00:25:01,970
you have another piece of software that

00:25:00,500 --> 00:25:04,280
we have to develop it you have to

00:25:01,970 --> 00:25:05,810
maintain that you have to support and

00:25:04,280 --> 00:25:07,700
you have to keep changing and then you

00:25:05,810 --> 00:25:10,190
have to be focused on that every time

00:25:07,700 --> 00:25:13,190
something breaks or need any feature you

00:25:10,190 --> 00:25:14,870
another person to work on that and

00:25:13,190 --> 00:25:16,460
you're lucky if you have several people

00:25:14,870 --> 00:25:18,529
knowing actually how it is built and you

00:25:16,460 --> 00:25:21,139
don't have one person that actually

00:25:18,529 --> 00:25:23,990
works on that but they did their job we

00:25:21,139 --> 00:25:25,549
created quite a large base of the

00:25:23,990 --> 00:25:27,649
functional test that was driving the

00:25:25,549 --> 00:25:30,139
browser it's actually quite fun seeing

00:25:27,649 --> 00:25:31,639
us when selenium does the magic and

00:25:30,139 --> 00:25:35,360
click the buttons and verifies this

00:25:31,639 --> 00:25:37,580
stuff but then we came back again and it

00:25:35,360 --> 00:25:39,470
was actually a breakpoint in Manchester

00:25:37,580 --> 00:25:41,720
last year when I went and seen Ben

00:25:39,470 --> 00:25:43,519
Wayne's talk about be had and it was

00:25:41,720 --> 00:25:46,429
like I always wanted to look at it I

00:25:43,519 --> 00:25:48,620
just didn't have time and and it was

00:25:46,429 --> 00:25:50,450
those few minutes when I've seen how it

00:25:48,620 --> 00:25:53,570
all works and how it is easy to set up

00:25:50,450 --> 00:25:55,490
and and and kick off with that then I

00:25:53,570 --> 00:25:57,350
basically but me and a few friends

00:25:55,490 --> 00:25:59,120
basically left the talk after that went

00:25:57,350 --> 00:26:01,789
to the lobby sat down for a couple of

00:25:59,120 --> 00:26:06,049
hours we had the base done and it was

00:26:01,789 --> 00:26:08,419
like that easy so this is about to be

00:26:06,049 --> 00:26:10,460
hat and some cool stuff that it actually

00:26:08,419 --> 00:26:12,080
can help you the problem we had with the

00:26:10,460 --> 00:26:16,909
previous framework was it was written in

00:26:12,080 --> 00:26:20,389
PHP well it's not that PHP is bad but

00:26:16,909 --> 00:26:22,250
the main problem is e you only can have

00:26:20,389 --> 00:26:24,080
PHP developers actually writing you

00:26:22,250 --> 00:26:25,850
those functional tests yes there is the

00:26:24,080 --> 00:26:27,860
UI for selenium that you can click those

00:26:25,850 --> 00:26:29,240
buttons but are you going to go back

00:26:27,860 --> 00:26:31,070
every single time you change the

00:26:29,240 --> 00:26:33,440
application now to change the flow and

00:26:31,070 --> 00:26:35,360
things like this it doesn't really scale

00:26:33,440 --> 00:26:37,399
the more tests you have the most support

00:26:35,360 --> 00:26:40,039
you need for that therefore you need

00:26:37,399 --> 00:26:42,919
more people broadly supporting it and we

00:26:40,039 --> 00:26:45,049
had this idea of being able to send it

00:26:42,919 --> 00:26:47,360
over to business analyst all to the

00:26:45,049 --> 00:26:49,549
project owner they know exactly what

00:26:47,360 --> 00:26:51,440
they want and they needs to be able to

00:26:49,549 --> 00:26:55,100
tell us that in a very plain English

00:26:51,440 --> 00:26:58,759
what to do well I can't expect them to

00:26:55,100 --> 00:27:00,379
write PHP as easy as it might sound so

00:26:58,759 --> 00:27:02,480
behalf kinda address this issue i'm

00:27:00,379 --> 00:27:04,700
going to show you exactly how that looks

00:27:02,480 --> 00:27:08,330
like but things that might be a

00:27:04,700 --> 00:27:09,649
showstopper is the device 5.3 how many

00:27:08,330 --> 00:27:14,809
of you are running five point still

00:27:09,649 --> 00:27:17,539
still don't be shy I still run a 5.2 but

00:27:14,809 --> 00:27:20,750
I'm switching so this could be a problem

00:27:17,539 --> 00:27:22,639
in terms of running the framework but

00:27:20,750 --> 00:27:23,929
still you have to remember it only

00:27:22,639 --> 00:27:26,450
drives that

00:27:23,929 --> 00:27:30,019
so you don't need to run your coat on on

00:27:26,450 --> 00:27:32,809
513 anyway it doesn't only test you I

00:27:30,019 --> 00:27:35,690
you can test all sort of API calls with

00:27:32,809 --> 00:27:37,639
it so we've got third party services or

00:27:35,690 --> 00:27:39,529
your own services through a rest

00:27:37,639 --> 00:27:41,990
services all soap or whatever you can

00:27:39,529 --> 00:27:43,399
easily test it with it you can test

00:27:41,990 --> 00:27:45,200
scripts with it so we have a lot of

00:27:43,399 --> 00:27:46,519
stuff that is driven by Scripps that's

00:27:45,200 --> 00:27:48,860
really easy because you can test the

00:27:46,519 --> 00:27:50,360
output and then and the duels of all

00:27:48,860 --> 00:27:52,100
sort of stuff and look for example into

00:27:50,360 --> 00:27:54,259
the database whether you'd actually

00:27:52,100 --> 00:27:56,809
performed with it what do you were

00:27:54,259 --> 00:27:59,240
expecting to do and the good thing it

00:27:56,809 --> 00:28:02,210
integrates different engines so yes most

00:27:59,240 --> 00:28:06,259
of you works with selenium has anybody

00:28:02,210 --> 00:28:07,940
heard about sake and use that we looked

00:28:06,259 --> 00:28:09,919
at sake initially I think when we

00:28:07,940 --> 00:28:12,139
started looking at we had it I don't

00:28:09,919 --> 00:28:16,700
think it had the selenium driver it was

00:28:12,139 --> 00:28:18,289
introduced either at the end of the last

00:28:16,700 --> 00:28:20,809
year or beginning of this year then

00:28:18,289 --> 00:28:23,090
remember so we started with sergeant

00:28:20,809 --> 00:28:25,909
it's functionally is very very similar I

00:28:23,090 --> 00:28:29,049
don't think it's us feature-rich of

00:28:25,909 --> 00:28:31,279
selenium but still does the job a very

00:28:29,049 --> 00:28:34,669
interesting thing to mention is good

00:28:31,279 --> 00:28:36,919
which is a PHP web scrapper which allows

00:28:34,669 --> 00:28:38,990
you to perform a very similar actions

00:28:36,919 --> 00:28:40,490
and drive your application but without

00:28:38,990 --> 00:28:44,480
the browser a doll is completely

00:28:40,490 --> 00:28:46,990
helpless and it basically uses a pure

00:28:44,480 --> 00:28:50,059
HTTP request to fire off and gets the

00:28:46,990 --> 00:28:51,440
results back and you can work with that

00:28:50,059 --> 00:28:53,509
and it's got really really nice

00:28:51,440 --> 00:28:54,980
interface with that so for very simple

00:28:53,509 --> 00:28:56,539
stuff that you don't need for example

00:28:54,980 --> 00:28:58,879
JavaScript support because it doesn't

00:28:56,539 --> 00:29:01,789
work with JavaScript you can very very

00:28:58,879 --> 00:29:03,169
quickly run some functional tests using

00:29:01,789 --> 00:29:04,700
good and it's still using the same

00:29:03,169 --> 00:29:08,179
language that you're going to use when

00:29:04,700 --> 00:29:10,279
you're going to start using browser and

00:29:08,179 --> 00:29:12,590
the whole thing that actually drives the

00:29:10,279 --> 00:29:14,990
browser and drives the whole UI thing is

00:29:12,590 --> 00:29:16,730
mink which is part of well so the power

00:29:14,990 --> 00:29:20,990
but is a kind of an extension for be

00:29:16,730 --> 00:29:23,289
hard it's it's really easy to actually

00:29:20,990 --> 00:29:25,970
configure it what you want to use and

00:29:23,289 --> 00:29:29,360
another thing worth mentioning yes we've

00:29:25,970 --> 00:29:31,850
started with sahi but we switch to Salim

00:29:29,360 --> 00:29:35,149
again and simply because for example

00:29:31,850 --> 00:29:37,549
sake has a variable support for things

00:29:35,149 --> 00:29:39,470
like frames iframes

00:29:37,549 --> 00:29:41,929
and it just happens to some of our

00:29:39,470 --> 00:29:46,519
applications running iframes and then

00:29:41,929 --> 00:29:48,470
you can't really well integrate your

00:29:46,519 --> 00:29:49,730
test to it with the iframe so it was

00:29:48,470 --> 00:29:51,830
basically a showstopper we couldn't

00:29:49,730 --> 00:29:53,389
progress with that and that's how it

00:29:51,830 --> 00:29:55,369
looks that's how the test looks like

00:29:53,389 --> 00:29:58,100
this is how you define this so it's a

00:29:55,369 --> 00:29:59,960
plain English you you did there are two

00:29:58,100 --> 00:30:03,919
examples of testing whether you can

00:29:59,960 --> 00:30:07,549
login into a portal or whatever it is

00:30:03,919 --> 00:30:10,999
and it basically starts with like given

00:30:07,549 --> 00:30:12,710
a log in to work place as user with this

00:30:10,999 --> 00:30:15,710
secret password I should see this

00:30:12,710 --> 00:30:17,720
message which kind of tells you exactly

00:30:15,710 --> 00:30:20,929
what you're testing and that's the whole

00:30:17,720 --> 00:30:22,519
point of those functional tests and I'm

00:30:20,929 --> 00:30:25,789
not sure how many of you see that but

00:30:22,519 --> 00:30:28,009
when I shown this kind of a test case

00:30:25,789 --> 00:30:31,159
written to a BAS and project I was like

00:30:28,009 --> 00:30:32,960
we can do that and was like yes we want

00:30:31,159 --> 00:30:34,549
you to do that that's how that's how

00:30:32,960 --> 00:30:36,590
it's going to work that's you've got

00:30:34,549 --> 00:30:39,950
some basic requirements up front that

00:30:36,590 --> 00:30:41,749
you got either for external customer or

00:30:39,950 --> 00:30:43,580
is it your internal project from a

00:30:41,749 --> 00:30:46,190
project owner that tells you i want to

00:30:43,580 --> 00:30:48,559
be able to do this so you've got high

00:30:46,190 --> 00:30:50,840
level requirements and then you write me

00:30:48,559 --> 00:30:52,639
this in this plain English yes there are

00:30:50,840 --> 00:30:54,559
some key words there are some specific

00:30:52,639 --> 00:30:57,019
steps because every single thing is

00:30:54,559 --> 00:31:00,499
called step in be hard but if you know

00:30:57,019 --> 00:31:01,669
the basics you can write it even if it's

00:31:00,499 --> 00:31:03,409
not going to work we can have a

00:31:01,669 --> 00:31:05,210
developer later on Twitter a little bit

00:31:03,409 --> 00:31:07,730
but there's going to be a lot of changes

00:31:05,210 --> 00:31:10,730
the good stuff is that some of the very

00:31:07,730 --> 00:31:13,539
low level operations like for example

00:31:10,730 --> 00:31:15,649
interacting with iframes or or

00:31:13,539 --> 00:31:19,129
interacting with specific elements of

00:31:15,649 --> 00:31:20,929
the page it could be written in PHP into

00:31:19,129 --> 00:31:22,549
another step which is again you can use

00:31:20,929 --> 00:31:25,279
in your plain English so instead of

00:31:22,549 --> 00:31:28,070
searching for an element with an ID on

00:31:25,279 --> 00:31:29,899
your page you can say please click the

00:31:28,070 --> 00:31:32,179
look login button or something like this

00:31:29,899 --> 00:31:34,909
or things like this it's very very easy

00:31:32,179 --> 00:31:39,799
to to go through it and that I said I

00:31:34,909 --> 00:31:43,820
looked at that for the first time and of

00:31:39,799 --> 00:31:46,129
October and now we nearly fully switch

00:31:43,820 --> 00:31:48,409
to be hard and win in February so we

00:31:46,129 --> 00:31:51,440
didn't really take much time and it was

00:31:48,409 --> 00:31:57,980
like to mostly two people working on

00:31:51,440 --> 00:31:59,360
it on and off right it was so good I'm

00:31:57,980 --> 00:32:01,340
going to talk about Sona now because

00:31:59,360 --> 00:32:03,470
this is the bit that actually allowed us

00:32:01,340 --> 00:32:07,690
to combine all the sooner I've spoken

00:32:03,470 --> 00:32:10,850
about so far and give us if a nice

00:32:07,690 --> 00:32:14,600
reporting system and being able to

00:32:10,850 --> 00:32:18,559
actually track the progress that you

00:32:14,600 --> 00:32:22,899
making when you're doing CI so we look

00:32:18,559 --> 00:32:25,789
at the so now and which is basically a

00:32:22,899 --> 00:32:27,049
quality management platform which

00:32:25,789 --> 00:32:29,230
integrates all the tools that I've

00:32:27,049 --> 00:32:32,299
spoken about so we need to base phpunit

00:32:29,230 --> 00:32:33,799
integrase PHP depend how many of you

00:32:32,299 --> 00:32:36,200
using PHP depends I didn't get into

00:32:33,799 --> 00:32:38,690
details with that I might actually okay

00:32:36,200 --> 00:32:40,879
not a lot so there are two tools called

00:32:38,690 --> 00:32:43,610
PHP dependent PHP mass detector they

00:32:40,879 --> 00:32:45,110
sound really nice actually found out

00:32:43,610 --> 00:32:49,159
yesterday PHP depend was actually

00:32:45,110 --> 00:32:50,600
nominated to the PHP are awards so might

00:32:49,159 --> 00:32:53,210
be worth looking at it really really

00:32:50,600 --> 00:32:56,149
good tool what it does basically it does

00:32:53,210 --> 00:32:59,840
static code analysis so you don't have

00:32:56,149 --> 00:33:02,210
to execute your code and and basically

00:32:59,840 --> 00:33:04,580
generates some set of metrics which

00:33:02,210 --> 00:33:06,799
tells you about how big your project is

00:33:04,580 --> 00:33:09,529
how big your classes are how big your

00:33:06,799 --> 00:33:11,600
methods are and things like this that it

00:33:09,529 --> 00:33:13,909
tells you about complexity there is a

00:33:11,600 --> 00:33:15,409
few algorithm about how you can measure

00:33:13,909 --> 00:33:18,289
complexity of your cold and it basically

00:33:15,409 --> 00:33:20,889
spit it out for you to into an xml

00:33:18,289 --> 00:33:23,809
report that you can look into and and

00:33:20,889 --> 00:33:26,000
analyze sonar actually go a little bit

00:33:23,809 --> 00:33:30,169
further and actually shows you that in

00:33:26,000 --> 00:33:34,090
an i go interface PHP ms detector is a

00:33:30,169 --> 00:33:34,090
program that works on top of that and

00:33:34,539 --> 00:33:40,990
and uses older static coordinates at PHP

00:33:38,360 --> 00:33:45,009
depend dead and gives you more

00:33:40,990 --> 00:33:49,730
high-level information about for example

00:33:45,009 --> 00:33:53,960
and use parameters in your code or all

00:33:49,730 --> 00:33:56,679
that something it basically gives you

00:33:53,960 --> 00:33:59,480
some kind of you can define rules around

00:33:56,679 --> 00:34:01,399
complexity so there are basic metrics

00:33:59,480 --> 00:34:03,679
telling you that if you hit this number

00:34:01,399 --> 00:34:04,580
with complexity you really in trouble

00:34:03,679 --> 00:34:05,960
and you need to

00:34:04,580 --> 00:34:07,309
start doing something about it and it

00:34:05,960 --> 00:34:09,290
will tell you your complexity of

00:34:07,309 --> 00:34:10,609
discusses very high you have to do

00:34:09,290 --> 00:34:14,629
something about have a look at it and

00:34:10,609 --> 00:34:16,310
under something about it so that's how

00:34:14,629 --> 00:34:18,379
it looks is very look similar to Jenkins

00:34:16,310 --> 00:34:20,359
but it does completely different jobs

00:34:18,379 --> 00:34:22,190
and Jenkins Jenkins is your build box

00:34:20,359 --> 00:34:25,310
this is the software that triggers the

00:34:22,190 --> 00:34:27,349
build that runs the tools and tells you

00:34:25,310 --> 00:34:29,780
about the state of your project or

00:34:27,349 --> 00:34:33,649
module or a piece of code at the given

00:34:29,780 --> 00:34:37,040
point in time this takes it further and

00:34:33,649 --> 00:34:39,889
allows you to track everything through a

00:34:37,040 --> 00:34:42,589
period of time I know Jenkins can does

00:34:39,889 --> 00:34:44,599
that but Jenkins doesn't handle it very

00:34:42,589 --> 00:34:47,149
well simply because it basically looks

00:34:44,599 --> 00:34:48,919
at older XML report and try to give you

00:34:47,149 --> 00:34:51,889
all those strengths so for the last

00:34:48,919 --> 00:34:55,190
three or five bills is fine we actually

00:34:51,889 --> 00:34:56,990
had this problem with Jenkins when we we

00:34:55,190 --> 00:34:58,790
wanted to have everything and we wanted

00:34:56,990 --> 00:35:00,859
to see in Jenkins all those timelines

00:34:58,790 --> 00:35:02,359
and stuff like this and Jenkins started

00:35:00,859 --> 00:35:05,480
to crush because there was too much

00:35:02,359 --> 00:35:06,890
information to process so no is much

00:35:05,480 --> 00:35:08,780
better because he's got a database

00:35:06,890 --> 00:35:10,369
back-end and it actually serves all

00:35:08,780 --> 00:35:12,650
those metrics all those results in a

00:35:10,369 --> 00:35:14,359
database and obviously you can do more

00:35:12,650 --> 00:35:17,420
high level reporting values and database

00:35:14,359 --> 00:35:19,940
which is much more efficient so what

00:35:17,420 --> 00:35:21,830
we've got in Jenkins are sorry in Sona a

00:35:19,940 --> 00:35:24,980
simple dashboard which basically

00:35:21,830 --> 00:35:26,930
compiles every bit of the software that

00:35:24,980 --> 00:35:30,589
we run to produce all those metrics in

00:35:26,930 --> 00:35:33,440
this nice little widgets I think I've

00:35:30,589 --> 00:35:35,349
got something like this so these are the

00:35:33,440 --> 00:35:39,140
results that are being basically

00:35:35,349 --> 00:35:40,700
generated by PHP depend not all of them

00:35:39,140 --> 00:35:43,490
but this is tell you about the size of a

00:35:40,700 --> 00:35:46,130
project number of classes and things as

00:35:43,490 --> 00:35:48,290
this this gives you kind of a high level

00:35:46,130 --> 00:35:50,330
of information about how big the code is

00:35:48,290 --> 00:35:52,490
basically then you've got some things

00:35:50,330 --> 00:35:55,640
about comments there is a really nice

00:35:52,490 --> 00:35:57,470
duplication engine initially we worked

00:35:55,640 --> 00:35:59,839
with another tool from Sebastian Bergman

00:35:57,470 --> 00:36:02,630
PHP copy paste detector we didn't really

00:35:59,839 --> 00:36:04,250
found it very reliable you have to tweak

00:36:02,630 --> 00:36:06,230
a lot of parameters to actually make it

00:36:04,250 --> 00:36:07,339
for you and it it probably needs

00:36:06,230 --> 00:36:10,099
different settings for different

00:36:07,339 --> 00:36:12,560
projects what the guys from Sona that

00:36:10,099 --> 00:36:14,330
they basically started using the same

00:36:12,560 --> 00:36:15,950
engine to detect duplications that they

00:36:14,330 --> 00:36:17,640
do for Java projects because the Provos

00:36:15,950 --> 00:36:20,940
initially started for Java

00:36:17,640 --> 00:36:23,220
and it's actually reporting much much

00:36:20,940 --> 00:36:24,750
much better duplication the very good

00:36:23,220 --> 00:36:26,279
stuff that comes with Sullivan is going

00:36:24,750 --> 00:36:27,869
to be in the next release which is two

00:36:26,279 --> 00:36:30,119
point fourteen not sure when ain't going

00:36:27,869 --> 00:36:33,000
to come out is we're going to have cross

00:36:30,119 --> 00:36:35,190
project applications so it gives you a

00:36:33,000 --> 00:36:37,470
very powerful tool to eliminate

00:36:35,190 --> 00:36:40,380
duplications from encode and and

00:36:37,470 --> 00:36:42,210
refactor you and refactor it very

00:36:40,380 --> 00:36:44,250
interesting feature and this is about

00:36:42,210 --> 00:36:47,010
the timeline and looking at the time you

00:36:44,250 --> 00:36:49,319
can actually see how the code changes

00:36:47,010 --> 00:36:51,180
over time in every single aspect of the

00:36:49,319 --> 00:36:53,700
metric so we can I've actually selected

00:36:51,180 --> 00:36:55,740
over 30 days that you can see how we did

00:36:53,700 --> 00:36:57,690
it change from the last build how did

00:36:55,740 --> 00:37:00,029
the change five days ago or you can

00:36:57,690 --> 00:37:01,500
completely customize the bed and then

00:37:00,029 --> 00:37:03,900
you started saying like things right to

00:37:01,500 --> 00:37:06,329
removed one one class in here and twenty

00:37:03,900 --> 00:37:10,769
two methods that this amount of gold was

00:37:06,329 --> 00:37:13,260
actually added unit test this is exactly

00:37:10,769 --> 00:37:16,019
the same so we've got complexity metrics

00:37:13,260 --> 00:37:18,150
in here you've got code coverage and

00:37:16,019 --> 00:37:20,130
again very very good thing when you

00:37:18,150 --> 00:37:22,589
start looking at the past it will cap it

00:37:20,130 --> 00:37:25,170
can actually detect the code that was

00:37:22,589 --> 00:37:26,730
changed and give you the code coverage

00:37:25,170 --> 00:37:28,829
only for the bit that you've changed

00:37:26,730 --> 00:37:30,869
which is what we for example or after

00:37:28,829 --> 00:37:32,670
because not always you can go back and

00:37:30,869 --> 00:37:34,500
and increase the code coverage on the

00:37:32,670 --> 00:37:36,240
old code but you really care that

00:37:34,500 --> 00:37:40,319
anything new you write is actually

00:37:36,240 --> 00:37:42,630
covered this is being driven by PHP code

00:37:40,319 --> 00:37:44,369
sniffer and your coding standards PHP

00:37:42,630 --> 00:37:45,779
depend as well and PHP mess detectives

00:37:44,369 --> 00:37:48,690
you get all the violations and rules

00:37:45,779 --> 00:37:50,490
compliance and there is a really nice

00:37:48,690 --> 00:37:52,319
list of plugins that allows you to

00:37:50,490 --> 00:37:54,180
actually track the call the quality of

00:37:52,319 --> 00:37:57,089
the code think we need to speed up a

00:37:54,180 --> 00:37:58,829
little bit and that's how we can drill

00:37:57,089 --> 00:38:00,390
down into some more information so this

00:37:58,829 --> 00:38:01,980
is their coding standards and it

00:38:00,390 --> 00:38:05,309
actually shows you in your code where it

00:38:01,980 --> 00:38:07,019
applies it actually can tell you who did

00:38:05,309 --> 00:38:09,119
it so we can come back and say right you

00:38:07,019 --> 00:38:15,059
actually made it worse make it better

00:38:09,119 --> 00:38:17,309
now then you've got the timeline and you

00:38:15,059 --> 00:38:19,410
can actually track in this case

00:38:17,309 --> 00:38:22,109
complexity rules complies and coverage

00:38:19,410 --> 00:38:24,690
over time so it's like September last

00:38:22,109 --> 00:38:26,220
year and februari this year it's nothing

00:38:24,690 --> 00:38:27,990
you can do in Jenkees like this not

00:38:26,220 --> 00:38:29,549
efficiently at least and then you can

00:38:27,990 --> 00:38:31,079
see velocity is down here about

00:38:29,549 --> 00:38:33,089
complexity and rules

00:38:31,079 --> 00:38:34,499
compliance and you can see in different

00:38:33,089 --> 00:38:35,940
points in time how it's changed it and

00:38:34,499 --> 00:38:40,140
whether you're going up or down and you

00:38:35,940 --> 00:38:42,749
can react accordingly and so a few

00:38:40,140 --> 00:38:45,029
things a hotspot dashboard very easy

00:38:42,749 --> 00:38:47,039
thing if you want to start fixing some

00:38:45,029 --> 00:38:49,140
things it will tell you which classes

00:38:47,039 --> 00:38:52,769
are most affected by violations by unit

00:38:49,140 --> 00:38:56,880
tests and you can start planning out how

00:38:52,769 --> 00:38:59,369
you're going to improve the code this is

00:38:56,880 --> 00:39:02,910
the duplication so it actually shows you

00:38:59,369 --> 00:39:04,950
a a file and class and which lines are

00:39:02,910 --> 00:39:06,749
duplicated so we can expand drill into

00:39:04,950 --> 00:39:08,400
it and actually see the duplication on

00:39:06,749 --> 00:39:10,759
the screen and decide whether there is

00:39:08,400 --> 00:39:13,319
something you want to improve on our

00:39:10,759 --> 00:39:15,959
coverage report very similar but because

00:39:13,319 --> 00:39:19,200
it's got 88 tightening into your version

00:39:15,959 --> 00:39:21,059
control system you can again see who's

00:39:19,200 --> 00:39:24,539
made the change and whether it's covered

00:39:21,059 --> 00:39:27,420
or not and react again and do something

00:39:24,539 --> 00:39:28,739
about it and the last thing I want to

00:39:27,420 --> 00:39:30,180
mention it was really really useful

00:39:28,739 --> 00:39:32,400
there is a commercial plugin called

00:39:30,180 --> 00:39:34,410
views when you can actually combine all

00:39:32,400 --> 00:39:37,170
the different modules that you have here

00:39:34,410 --> 00:39:38,849
in your company and see all of this

00:39:37,170 --> 00:39:42,180
thing that I've just shown you then I on

00:39:38,849 --> 00:39:44,190
a very global scope so for example we we

00:39:42,180 --> 00:39:46,170
created views for java killed so we can

00:39:44,190 --> 00:39:48,089
see how Java code is performing how PHP

00:39:46,170 --> 00:39:49,739
is performing if we get specific

00:39:48,089 --> 00:39:51,900
projects we can actually track specific

00:39:49,739 --> 00:39:55,219
project and whether they actually make

00:39:51,900 --> 00:39:55,219
things better on the going words

00:39:56,359 --> 00:40:04,140
summarizing a bit these are all tools

00:39:59,489 --> 00:40:05,549
and tools are very helpful but they're

00:40:04,140 --> 00:40:08,699
not going to solve your problem you need

00:40:05,549 --> 00:40:10,019
a strong team behind you and you need to

00:40:08,699 --> 00:40:11,369
make sure that they do the right thing

00:40:10,019 --> 00:40:13,859
so we need to invest a little bit more

00:40:11,369 --> 00:40:15,779
time in having somebody in your

00:40:13,859 --> 00:40:17,849
department leading your people and

00:40:15,779 --> 00:40:19,920
telling them how they need to do stuff

00:40:17,849 --> 00:40:22,309
there's still problems that we have when

00:40:19,920 --> 00:40:25,949
not everybody is following the rules

00:40:22,309 --> 00:40:27,359
we've still got excuses I didn't do the

00:40:25,949 --> 00:40:30,089
unit test because I didn't know how to

00:40:27,359 --> 00:40:33,329
do them or it was too difficult or I

00:40:30,089 --> 00:40:35,969
don't know whatever and that two

00:40:33,329 --> 00:40:38,519
different approach you can try to you

00:40:35,969 --> 00:40:40,229
can try to price and encourage people to

00:40:38,519 --> 00:40:42,650
the right thing you can start punishing

00:40:40,229 --> 00:40:44,500
them I'm not sure what works better I

00:40:42,650 --> 00:40:46,810
found

00:40:44,500 --> 00:40:49,030
very useful if you can speak or work

00:40:46,810 --> 00:40:51,400
with a guy that doesn't follow the rules

00:40:49,030 --> 00:40:53,680
very close like in a pair programming

00:40:51,400 --> 00:40:57,520
manner and you can actually explain them

00:40:53,680 --> 00:41:00,160
what it is and how you do it I found

00:40:57,520 --> 00:41:02,800
from myself from my own experience that

00:41:00,160 --> 00:41:04,000
trying to explain somebody that unit

00:41:02,800 --> 00:41:06,250
tests are good doesn't work really well

00:41:04,000 --> 00:41:10,170
if they don't try it out and they don't

00:41:06,250 --> 00:41:12,250
start doing yet they don't understand it

00:41:10,170 --> 00:41:15,610
when they don't understand that I've got

00:41:12,250 --> 00:41:18,900
three friends because there are three

00:41:15,610 --> 00:41:20,950
major excuses our problems that they

00:41:18,900 --> 00:41:25,090
constantly breaking their bills and they

00:41:20,950 --> 00:41:28,390
don't care about it they they don't do

00:41:25,090 --> 00:41:30,850
it at all which is even worse or they

00:41:28,390 --> 00:41:33,190
say well I did it on my machine it works

00:41:30,850 --> 00:41:35,320
well it doesn't work on the bilderbergs

00:41:33,190 --> 00:41:38,980
don't care look at it why it's failing

00:41:35,320 --> 00:41:41,500
and just make sure it's fine a quick

00:41:38,980 --> 00:41:43,180
guide this is the things that I've

00:41:41,500 --> 00:41:45,550
learned over time that you will have to

00:41:43,180 --> 00:41:47,590
do is to make sure you investigate the

00:41:45,550 --> 00:41:50,740
possibilities you try all them well you

00:41:47,590 --> 00:41:52,270
find what suits you best and you form a

00:41:50,740 --> 00:41:55,630
team you make sure you've got the right

00:41:52,270 --> 00:41:57,640
people that can actually drive the whole

00:41:55,630 --> 00:42:01,000
process and make sure the change can

00:41:57,640 --> 00:42:02,650
happen and and be visible and automate

00:42:01,000 --> 00:42:05,950
make sure that business actually see

00:42:02,650 --> 00:42:07,870
what you do and and and see the progress

00:42:05,950 --> 00:42:12,310
that you make and see that things are

00:42:07,870 --> 00:42:14,200
going better if you don't have time to

00:42:12,310 --> 00:42:18,130
set up your OC air platform there are

00:42:14,200 --> 00:42:21,000
some ready solutions like Travis Travis

00:42:18,130 --> 00:42:23,470
CI which is a kind of a CI in the cloud

00:42:21,000 --> 00:42:25,330
more and more PHP probably the open

00:42:23,470 --> 00:42:28,480
source progressively using it to to make

00:42:25,330 --> 00:42:31,420
it more visible I never played with it

00:42:28,480 --> 00:42:34,150
but from what I've seen so far is

00:42:31,420 --> 00:42:36,280
actually fairly easy to to configure and

00:42:34,150 --> 00:42:39,550
for example to plug it in into github if

00:42:36,280 --> 00:42:41,080
you get something in github very very

00:42:39,550 --> 00:42:43,060
interesting feature of being able to

00:42:41,080 --> 00:42:44,800
test the same code in different versions

00:42:43,060 --> 00:42:48,880
of PHP for example if you want to

00:42:44,800 --> 00:42:50,350
migrate and stuff like this list of

00:42:48,880 --> 00:42:52,630
links the stars are going to be later on

00:42:50,350 --> 00:42:55,360
accession joined in so if you wants to

00:42:52,630 --> 00:42:56,950
expand and and look into more detail

00:42:55,360 --> 00:42:58,220
into also those that I've spoken about

00:42:56,950 --> 00:43:00,220
these are these

00:42:58,220 --> 00:43:02,210
the links that you can use to get that

00:43:00,220 --> 00:43:08,359
and I'm going to show how many men is we

00:43:02,210 --> 00:43:09,440
have four questions my question is if

00:43:08,359 --> 00:43:12,380
you wanted to get started with

00:43:09,440 --> 00:43:14,060
continuous integration out of that big

00:43:12,380 --> 00:43:17,900
list of software which one would you

00:43:14,060 --> 00:43:21,619
start with I think due to rush i miss

00:43:17,900 --> 00:43:24,950
that thing I think you should always

00:43:21,619 --> 00:43:27,140
start with the unit tests don't try to

00:43:24,950 --> 00:43:29,570
implement that all at the same time I

00:43:27,140 --> 00:43:31,550
don't think you will be able to do it it

00:43:29,570 --> 00:43:33,109
took a six year to get to the point

00:43:31,550 --> 00:43:36,590
where we are right now it's a really

00:43:33,109 --> 00:43:38,060
long process it's very beneficial but

00:43:36,590 --> 00:43:40,160
you need people and you need experience

00:43:38,060 --> 00:43:42,140
and you only learn that when you when

00:43:40,160 --> 00:43:43,940
you're going through it so we started

00:43:42,140 --> 00:43:46,460
with basically with unit tests that bits

00:43:43,940 --> 00:43:48,320
of code that actually allows you to to

00:43:46,460 --> 00:43:50,210
test it first and then we expand on that

00:43:48,320 --> 00:43:52,340
then we add the additional bits when you

00:43:50,210 --> 00:43:54,349
actually have more time to look at this

00:43:52,340 --> 00:43:57,560
stuff more closely like the metrics and

00:43:54,349 --> 00:43:59,060
the complexity and some things like I

00:43:57,560 --> 00:44:01,099
don't know the automated documentation

00:43:59,060 --> 00:44:02,570
is a quick when so you can set up very

00:44:01,099 --> 00:44:05,960
quickly it depends with a is actually

00:44:02,570 --> 00:44:07,790
useful for you or not and and then I

00:44:05,960 --> 00:44:09,320
would probably start adding on top of

00:44:07,790 --> 00:44:11,359
that the whole automation thing about

00:44:09,320 --> 00:44:13,310
Jenkins i think i would actually set up

00:44:11,359 --> 00:44:14,960
Jenkins up front anyway because you're

00:44:13,310 --> 00:44:17,630
going to get into the problem of people

00:44:14,960 --> 00:44:19,430
running it on random machines and nobody

00:44:17,630 --> 00:44:21,700
actually knowing what's going on so

00:44:19,430 --> 00:44:25,910
setting up Jenkins using their

00:44:21,700 --> 00:44:28,940
Sebastian's template for for Jenkin for

00:44:25,910 --> 00:44:30,859
Jenkins is very quick and it runs on on

00:44:28,940 --> 00:44:32,359
a very simple machine so we can start

00:44:30,859 --> 00:44:34,670
with that as long as you make it visible

00:44:32,359 --> 00:44:37,130
and you can see those tests running and

00:44:34,670 --> 00:44:39,080
those first results that it's that it's

00:44:37,130 --> 00:44:41,560
fine then is going to click send

00:44:39,080 --> 00:44:41,560
basically

00:44:47,770 --> 00:44:53,590
hi you mentioned before the business

00:44:50,870 --> 00:44:57,020
implication can you um can you quantify

00:44:53,590 --> 00:44:59,660
the pieces implication in terms of cost

00:44:57,020 --> 00:45:03,710
of your code depth in the moment zero

00:44:59,660 --> 00:45:06,260
and the moment plastics ears can you

00:45:03,710 --> 00:45:07,940
expand X what you really have to weather

00:45:06,260 --> 00:45:10,550
the benefits that we've got right now

00:45:07,940 --> 00:45:13,970
yes or how it is being perceived by

00:45:10,550 --> 00:45:18,800
business yes in terms of depth to reduce

00:45:13,970 --> 00:45:20,680
how how how well did they help ok so

00:45:18,800 --> 00:45:22,820
this is actually the very hard bit

00:45:20,680 --> 00:45:25,040
because you will need some kind of

00:45:22,820 --> 00:45:26,420
that's what I'm kind of want to look in

00:45:25,040 --> 00:45:27,740
the future to make it more visible to

00:45:26,420 --> 00:45:29,570
the business because there is no direct

00:45:27,740 --> 00:45:32,870
correlation between what we've done so

00:45:29,570 --> 00:45:35,000
far and whether we can see a sudden drop

00:45:32,870 --> 00:45:39,050
for example in number of problems I've

00:45:35,000 --> 00:45:41,240
got on a platform but the direct benefit

00:45:39,050 --> 00:45:44,420
that I can see so far especially with

00:45:41,240 --> 00:45:46,550
the process when we've got team of

00:45:44,420 --> 00:45:48,650
people working on several projects and

00:45:46,550 --> 00:45:51,500
then things going out to the live

00:45:48,650 --> 00:45:53,480
platform regularly for example every

00:45:51,500 --> 00:45:55,640
week and we can actually get those

00:45:53,480 --> 00:45:59,660
changes integrated very early and tested

00:45:55,640 --> 00:46:02,120
I can tell you that it significantly

00:45:59,660 --> 00:46:07,220
reduced the time oh the number of

00:46:02,120 --> 00:46:09,290
situations when we had bugs raised send

00:46:07,220 --> 00:46:12,950
over to QA QA coming back it doesn't

00:46:09,290 --> 00:46:15,440
work fixing it again come back fix it

00:46:12,950 --> 00:46:17,390
again come back it was happening several

00:46:15,440 --> 00:46:20,600
times like this before we actually had

00:46:17,390 --> 00:46:22,160
something visual and the unit test in

00:46:20,600 --> 00:46:24,800
place where people making stupid

00:46:22,160 --> 00:46:26,000
mistakes like syntax errors it's

00:46:24,800 --> 00:46:28,640
something yes it went through code

00:46:26,000 --> 00:46:30,860
review fine it passed it it was all fine

00:46:28,640 --> 00:46:33,920
deploy to the staging platform crash

00:46:30,860 --> 00:46:35,750
bang quite white screen whatever and QA

00:46:33,920 --> 00:46:37,520
some of them were a little bit more

00:46:35,750 --> 00:46:38,750
educated so they could actually look

00:46:37,520 --> 00:46:40,430
into error log and actually tell us

00:46:38,750 --> 00:46:43,760
what's wrong some of the market doesn't

00:46:40,430 --> 00:46:47,990
work look at it so this is definitely a

00:46:43,760 --> 00:46:51,050
huge reduction in here a huge reduction

00:46:47,990 --> 00:46:53,870
in terms in saving time in terms of

00:46:51,050 --> 00:46:55,160
doing the integration so I didn't

00:46:53,870 --> 00:46:57,370
mention that would when Weiss when I

00:46:55,160 --> 00:46:59,740
started we worked at CVS

00:46:57,370 --> 00:47:02,560
we had like two geeks code base in CVS

00:46:59,740 --> 00:47:06,460
is anybody working with CBS still thanks

00:47:02,560 --> 00:47:08,290
God Oh No so this is another decision

00:47:06,460 --> 00:47:09,760
that we made along the lines some some

00:47:08,290 --> 00:47:11,740
some time in the middle to switch to get

00:47:09,760 --> 00:47:13,330
because it gives us so much more benefit

00:47:11,740 --> 00:47:15,660
in terms how we can control the whole

00:47:13,330 --> 00:47:18,820
merging process and how we can actually

00:47:15,660 --> 00:47:21,820
send the code to different places and

00:47:18,820 --> 00:47:23,980
actually see it and it's reduced so much

00:47:21,820 --> 00:47:26,980
time the whole merging process which

00:47:23,980 --> 00:47:29,710
usually took us about a day when we want

00:47:26,980 --> 00:47:31,510
it to get to the next release and now

00:47:29,710 --> 00:47:33,250
it's only in Jenkins we've got basically

00:47:31,510 --> 00:47:35,890
one job which basically pulls changes

00:47:33,250 --> 00:47:37,300
from git merge the men don't deploy so

00:47:35,890 --> 00:47:39,970
this is the thing that we've seen it

00:47:37,300 --> 00:47:41,260
definitely reduces the the time that we

00:47:39,970 --> 00:47:44,320
need to do at the deployment and do

00:47:41,260 --> 00:47:46,480
release I'm still looking for the glue

00:47:44,320 --> 00:47:49,750
between the number of problems and how

00:47:46,480 --> 00:47:52,090
we can associated some some systems some

00:47:49,750 --> 00:47:54,000
modules and whether when we go up with

00:47:52,090 --> 00:47:56,320
the quality we have less and less

00:47:54,000 --> 00:48:05,470
problems with this different parts of

00:47:56,320 --> 00:48:09,180
systems but we know they're just a quick

00:48:05,470 --> 00:48:12,940
clarification what was your preferred

00:48:09,180 --> 00:48:14,800
documentation was at phpdoc did you say

00:48:12,940 --> 00:48:17,740
oh yeah devils dog blocks yes the doc

00:48:14,800 --> 00:48:21,220
blocks and the my question mainly is

00:48:17,740 --> 00:48:24,280
that we're trying to replace our current

00:48:21,220 --> 00:48:29,380
installation of pivotal with JIRA and

00:48:24,280 --> 00:48:31,600
JIRA there is bamboo and I was wondering

00:48:29,380 --> 00:48:34,990
if you'd had any experience with bamboo

00:48:31,600 --> 00:48:37,180
oh ok we have to hold actually at last

00:48:34,990 --> 00:48:38,470
in suit well not the whole but most of

00:48:37,180 --> 00:48:41,440
the earth essences in the company so

00:48:38,470 --> 00:48:43,360
I've got JIRA that confluence we've got

00:48:41,440 --> 00:48:47,650
fish I ain't crucible to do code reviews

00:48:43,360 --> 00:48:50,530
but we did not switch the bumble reasons

00:48:47,650 --> 00:48:52,720
I think mainly because Jenkees is

00:48:50,530 --> 00:48:54,610
working well so this is again the thing

00:48:52,720 --> 00:48:57,550
that you looking yes there is this new

00:48:54,610 --> 00:48:59,440
shiny thing well maybe not new but we've

00:48:57,550 --> 00:49:00,730
got the whole suit already in place but

00:48:59,440 --> 00:49:03,460
is this really going to bring us on the

00:49:00,730 --> 00:49:05,610
benefits and we mo we more we're looking

00:49:03,460 --> 00:49:08,050
into how Jenkins is actually evolving

00:49:05,610 --> 00:49:09,970
we've had people writing plug-ins for

00:49:08,050 --> 00:49:10,820
Jenkins just for specific things that we

00:49:09,970 --> 00:49:13,340
wanted to do like

00:49:10,820 --> 00:49:16,430
one of our X developer's role the plugin

00:49:13,340 --> 00:49:18,110
for Jenkins to execute bulk builds so

00:49:16,430 --> 00:49:19,820
for example a lot of things failed and

00:49:18,110 --> 00:49:21,230
you don't want to start clicking through

00:49:19,820 --> 00:49:23,120
hundreds of them to move to build them

00:49:21,230 --> 00:49:26,930
again and then just he build the plug-in

00:49:23,120 --> 00:49:28,670
bank one click rebuild them all so this

00:49:26,930 --> 00:49:31,340
we thought that junkies is going to give

00:49:28,670 --> 00:49:32,720
a small flexibility in terms of support

00:49:31,340 --> 00:49:35,150
and in terms of the future that it gives

00:49:32,720 --> 00:49:36,470
us but for example solar project and

00:49:35,150 --> 00:49:37,790
that was actually available and it's

00:49:36,470 --> 00:49:39,590
open source project is actually using

00:49:37,790 --> 00:49:41,270
bamboo and I have no problems with it it

00:49:39,590 --> 00:49:43,640
actually gives me the same visibility so

00:49:41,270 --> 00:49:51,590
up to you see what's use your bass

00:49:43,640 --> 00:49:53,630
basically help question what was maybe a

00:49:51,590 --> 00:49:54,980
little bit missing for me in this

00:49:53,630 --> 00:49:57,800
presentation about continuous

00:49:54,980 --> 00:50:01,160
integration and what is our little bit

00:49:57,800 --> 00:50:04,130
headache is a database database patches

00:50:01,160 --> 00:50:06,560
testing on a known set of data what is

00:50:04,130 --> 00:50:09,890
your suggestion solution for this it is

00:50:06,560 --> 00:50:12,200
a problem I don't think there was a

00:50:09,890 --> 00:50:14,150
perfect solution for that so what we

00:50:12,200 --> 00:50:16,400
trying to do in terms of the database in

00:50:14,150 --> 00:50:19,250
terms of changing the database deploying

00:50:16,400 --> 00:50:22,700
the changes and then testing them we

00:50:19,250 --> 00:50:24,740
still have manuals so well automated

00:50:22,700 --> 00:50:26,120
process that we followed before and

00:50:24,740 --> 00:50:28,700
there is basically we've got a bunch of

00:50:26,120 --> 00:50:30,530
scripts that we can kind of a convention

00:50:28,700 --> 00:50:31,700
how we modify the database and then you

00:50:30,530 --> 00:50:34,280
can run the scripts on the target

00:50:31,700 --> 00:50:35,690
environment it it changes in the

00:50:34,280 --> 00:50:39,860
environment then you can start testing

00:50:35,690 --> 00:50:41,810
at it in terms of testing itself well

00:50:39,860 --> 00:50:45,290
we've got kind of a three approaches so

00:50:41,810 --> 00:50:49,490
first of all we we completely abstract

00:50:45,290 --> 00:50:51,290
the database and and mock it out and we

00:50:49,490 --> 00:50:52,880
more testing their high level things

00:50:51,290 --> 00:50:55,160
around that so we kind of set of

00:50:52,880 --> 00:50:57,080
expectations we know that this score is

00:50:55,160 --> 00:50:59,030
going to behave like this going to

00:50:57,080 --> 00:51:02,990
return as this data set always going to

00:50:59,030 --> 00:51:05,420
change this and that's how the this unit

00:51:02,990 --> 00:51:07,070
of code should behave the second thing

00:51:05,420 --> 00:51:08,660
is actually testing the database itself

00:51:07,070 --> 00:51:10,010
which is really valuable and we're using

00:51:08,660 --> 00:51:13,580
DB unit for that which is part of

00:51:10,010 --> 00:51:17,210
phpunit it's not easy it's got its

00:51:13,580 --> 00:51:18,650
downsides but mainly works something

00:51:17,210 --> 00:51:22,160
probably we need to look into the future

00:51:18,650 --> 00:51:24,440
as well it's it's difficult because

00:51:22,160 --> 00:51:26,329
every single time your schema changes

00:51:24,440 --> 00:51:28,339
is you can have some integration

00:51:26,329 --> 00:51:30,260
problems and things like that and then

00:51:28,339 --> 00:51:33,560
we need to split spend more time

00:51:30,260 --> 00:51:35,990
actually finding it out but the benefits

00:51:33,560 --> 00:51:38,450
you get from it is actually confirming

00:51:35,990 --> 00:51:40,760
that the SQL actually works it's very

00:51:38,450 --> 00:51:44,390
similar to the problems we had with

00:51:40,760 --> 00:51:46,310
syntax errors some people can write the

00:51:44,390 --> 00:51:47,690
wrong SQL query which basically doesn't

00:51:46,310 --> 00:51:51,319
work and if you mock it out didn't know

00:51:47,690 --> 00:51:53,780
it doesn't work the third option is B

00:51:51,319 --> 00:51:55,130
hat and functional testing and actually

00:51:53,780 --> 00:51:57,650
testing it from a very top level

00:51:55,130 --> 00:51:59,810
perspective so we don't really test

00:51:57,650 --> 00:52:01,520
whatever is in a database you kind of

00:51:59,810 --> 00:52:03,560
expect from the application which talks

00:52:01,520 --> 00:52:06,680
to the database that it gives you the

00:52:03,560 --> 00:52:08,270
right results I've seen people working

00:52:06,680 --> 00:52:09,890
with be had before there is an extension

00:52:08,270 --> 00:52:12,650
for it when you can actually interact

00:52:09,890 --> 00:52:15,319
with database and set up the database up

00:52:12,650 --> 00:52:18,109
front then perform the functional test

00:52:15,319 --> 00:52:21,710
and then throw it down and and bring it

00:52:18,109 --> 00:52:23,900
to the same set as it was before I think

00:52:21,710 --> 00:52:28,690
it works as well so not sure does that

00:52:23,900 --> 00:52:28,690

YouTube URL: https://www.youtube.com/watch?v=eRfQ9M9TDRs


