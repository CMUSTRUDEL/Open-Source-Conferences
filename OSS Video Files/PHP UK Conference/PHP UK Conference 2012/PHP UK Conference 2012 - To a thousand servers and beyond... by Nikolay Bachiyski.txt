Title: PHP UK Conference 2012 - To a thousand servers and beyond... by Nikolay Bachiyski
Publication date: 2012-03-20
Playlist: PHP UK Conference 2012
Description: 
	http://www.phpconference.co.uk/talk/thousand-servers-and-beyond-scaling-massive-php-application

To a thousand servers and beyond: scaling a massive PHP application

WordPress.com is an Alexa Top 20 web website, we get more than 100 million page views per day and 99% of the backend is PHP.

The service has seen tremendous growth in the past couple of years. The presentation will explain how the system and copes with the load. This includes explanation of the software stack, scaling techniques and sharing lots of experience and real-life stats.

Here are some of the topics covered:

- Load balancers
- PHP-FPM
- Page-level caching
- Object caching at the application level
- Fail-safe and inexpensive serving of terabytes of user-uploaded files per day
- Scaling MySQL databases
- Distributing SQL queries between many servers with HyperDB
- Asynchronous jobs system in PHP
- 20 seconds deploy on a thousand servers, tens times per day
- Staging servers for developers


I am Nikolay Bachiyski and I am long-time WordPress contributor. I spend my busy time working for Automattic -- the company behind WordPress.com and other cool stuff. Although I am not a systems guy, I think more developers should be interested in servers and scaling -- specialization is for insects.

I also teach at Sofia University, organize TEDxBG, and have a bear.
Captions: 
	00:00:10,660 --> 00:00:17,930
morning my name is Nikolai Bochy ski you

00:00:15,050 --> 00:00:21,800
can you can find me at extrapolate dot

00:00:17,930 --> 00:00:24,080
me and on Twitter in the past five years

00:00:21,800 --> 00:00:27,169
I have been working for all four

00:00:24,080 --> 00:00:29,090
automatic mostly on wordpress.com and

00:00:27,169 --> 00:00:33,050
now i'm on the super awesome

00:00:29,090 --> 00:00:36,500
wordpress.com VIP team during these five

00:00:33,050 --> 00:00:39,649
years I salud I sold the company scale

00:00:36,500 --> 00:00:42,350
from fifteen people to like a her to

00:00:39,649 --> 00:00:45,410
like a 100 now at and I saw

00:00:42,350 --> 00:00:49,310
wordpress.com scale from about 65

00:00:45,410 --> 00:00:53,620
million pageviews per a day in 2007 to

00:00:49,310 --> 00:00:56,630
around 800 million pages per day now

00:00:53,620 --> 00:00:59,090
during this time I learned a thing or

00:00:56,630 --> 00:01:01,790
two and today I'm going to tell you two

00:00:59,090 --> 00:01:04,430
stories one of them is short one of them

00:01:01,790 --> 00:01:08,570
is a little bit longer first I'll start

00:01:04,430 --> 00:01:14,780
with the short story before that meat

00:01:08,570 --> 00:01:17,630
deep pink and there are some people who

00:01:14,780 --> 00:01:19,369
don't like foam on their beer they don't

00:01:17,630 --> 00:01:23,299
like this I don't understand them but

00:01:19,369 --> 00:01:27,109
there are such people & D Pink's job is

00:01:23,299 --> 00:01:30,259
beer beheader he removes the head from

00:01:27,109 --> 00:01:33,530
from people's beer and he uses a little

00:01:30,259 --> 00:01:36,560
rake to to a get rid of the foam like

00:01:33,530 --> 00:01:42,439
this and here is there is the end result

00:01:36,560 --> 00:01:45,609
veer without foam or had a in Deepings

00:01:42,439 --> 00:01:48,409
job everything below the foam is

00:01:45,609 --> 00:01:51,529
abstraction he doesn't really care if

00:01:48,409 --> 00:01:54,499
the beer is lager or if the buras ale or

00:01:51,529 --> 00:01:59,270
if it stopped he doesn't really care if

00:01:54,499 --> 00:02:02,359
the if the glass is white or yellow iffy

00:01:59,270 --> 00:02:05,509
if if it has us too or if it's longer at

00:02:02,359 --> 00:02:09,580
all every single time he just goes with

00:02:05,509 --> 00:02:12,980
his rake and removes the phone one day

00:02:09,580 --> 00:02:15,740
deep in d decided to read more about the

00:02:12,980 --> 00:02:20,540
abstraction below he read about how how

00:02:15,740 --> 00:02:21,510
berries made how how foam appears and he

00:02:20,540 --> 00:02:25,409
learned

00:02:21,510 --> 00:02:28,680
that foam is is just little bubbles of

00:02:25,409 --> 00:02:31,530
gas usually carbon dioxide which which

00:02:28,680 --> 00:02:35,250
raises to the top and and after reading

00:02:31,530 --> 00:02:38,810
some some more he realized that oh if I

00:02:35,250 --> 00:02:42,299
put a little bit of oil in this phone

00:02:38,810 --> 00:02:44,519
the surface tension will decrease and an

00:02:42,299 --> 00:02:47,250
older foam will disappear almost

00:02:44,519 --> 00:02:50,670
immediately he was thinking oh wait

00:02:47,250 --> 00:02:53,400
where do i do I get 12 from and he

00:02:50,670 --> 00:02:56,250
noticed that his finger wall was really

00:02:53,400 --> 00:02:59,459
greasy also you can see he is a pig so

00:02:56,250 --> 00:03:02,430
it makes sense and and with this real

00:02:59,459 --> 00:03:04,889
realization he almost instantly became

00:03:02,430 --> 00:03:08,030
the fastest beer beheader in the world

00:03:04,889 --> 00:03:10,739
he managed to to get rid of foam

00:03:08,030 --> 00:03:16,409
hundreds times faster than everybody

00:03:10,739 --> 00:03:18,180
else in the world and and all this just

00:03:16,409 --> 00:03:22,379
waited with with little reading about

00:03:18,180 --> 00:03:24,540
how Bureau works the the moral of the

00:03:22,379 --> 00:03:26,790
story here is that if you're doing

00:03:24,540 --> 00:03:30,690
something whatever it is and if you want

00:03:26,790 --> 00:03:32,340
to get better which I assume you do you

00:03:30,690 --> 00:03:34,919
will you will want to know a little bit

00:03:32,340 --> 00:03:37,049
more about the abstraction below this is

00:03:34,919 --> 00:03:40,230
there are thousands of people about a

00:03:37,049 --> 00:03:42,780
Syrian programming I'm pretty sure a lot

00:03:40,230 --> 00:03:46,739
of you so Pat Patrick stock right before

00:03:42,780 --> 00:03:50,069
me he he showed how if you know how the

00:03:46,739 --> 00:03:53,579
PHP array is implemented sometimes UK

00:03:50,069 --> 00:03:57,209
you can make Europe your programs a turn

00:03:53,579 --> 00:04:00,000
faster also if you want to be really

00:03:57,209 --> 00:04:01,709
good at it optimizing SQL queries you

00:04:00,000 --> 00:04:04,949
need to note at least a little bit about

00:04:01,709 --> 00:04:07,790
betrays and there are really hundreds of

00:04:04,949 --> 00:04:10,440
examples like this him in programming I

00:04:07,790 --> 00:04:13,949
assume most of the people here are web

00:04:10,440 --> 00:04:16,650
developers for us dear one of the

00:04:13,949 --> 00:04:20,579
abstractions below it is how servers

00:04:16,650 --> 00:04:22,650
work and I think that if we know a

00:04:20,579 --> 00:04:24,479
little bit more about how servers work

00:04:22,650 --> 00:04:27,210
and how they are set up and why they're

00:04:24,479 --> 00:04:31,800
set up this way it will definitely make

00:04:27,210 --> 00:04:34,289
us better web developers and hero here

00:04:31,800 --> 00:04:35,310
comes the next story which is how

00:04:34,289 --> 00:04:38,100
worthless

00:04:35,310 --> 00:04:40,320
calm has been scaling all this time I

00:04:38,100 --> 00:04:44,130
want to tell you this story because I

00:04:40,320 --> 00:04:47,640
think knowing a little bit amor a little

00:04:44,130 --> 00:04:50,540
bit more about this project and because

00:04:47,640 --> 00:04:54,230
it's a fairly typical PHP and MySQL

00:04:50,540 --> 00:04:57,360
application with just a couple of of

00:04:54,230 --> 00:04:59,280
differences I think this can help you

00:04:57,360 --> 00:05:02,790
understand your systems better and in

00:04:59,280 --> 00:05:04,920
the end be better web developers so

00:05:02,790 --> 00:05:08,520
everything started a little bit long

00:05:04,920 --> 00:05:11,550
time ago we had did these users who

00:05:08,520 --> 00:05:15,360
accessed a single web web server who

00:05:11,550 --> 00:05:17,010
accessed a single database which was all

00:05:15,360 --> 00:05:19,830
good we didn't have a lot of users and

00:05:17,010 --> 00:05:22,350
it worked fine but then we thought okay

00:05:19,830 --> 00:05:26,430
what to what happens if one of the web

00:05:22,350 --> 00:05:28,230
servers dies so obviously nobody will be

00:05:26,430 --> 00:05:32,430
able to access the website and deep ink

00:05:28,230 --> 00:05:35,070
will be really sad so the solution is

00:05:32,430 --> 00:05:37,350
really simple you add a little software

00:05:35,070 --> 00:05:39,030
load balancer before before the web

00:05:37,350 --> 00:05:42,240
servers you had a couple of web servers

00:05:39,030 --> 00:05:44,700
which run the same code which is really

00:05:42,240 --> 00:05:46,560
easy to replicate the code and then this

00:05:44,700 --> 00:05:49,140
way if one of the web servers dies it

00:05:46,560 --> 00:05:53,820
will be all good geodetic can hold the

00:05:49,140 --> 00:05:55,560
fort then we we go to the next problem

00:05:53,820 --> 00:05:58,770
what what happens if your database

00:05:55,560 --> 00:06:00,300
server dies again you are your web

00:05:58,770 --> 00:06:02,820
servers won't be able to get day-to-day

00:06:00,300 --> 00:06:06,120
data from from anywhere and deep ink

00:06:02,820 --> 00:06:08,130
will be again really sad the solution

00:06:06,120 --> 00:06:11,400
here was is the following since we are

00:06:08,130 --> 00:06:13,980
using MySQL it has really neat built-in

00:06:11,400 --> 00:06:16,770
replication so we set up one of the

00:06:13,980 --> 00:06:20,820
server says master and and couple of

00:06:16,770 --> 00:06:25,950
others is slaves and the master in real

00:06:20,820 --> 00:06:28,710
time since its data to the slaves by

00:06:25,950 --> 00:06:31,430
sending older rights to the to the

00:06:28,710 --> 00:06:35,490
master and distributing call the reads

00:06:31,430 --> 00:06:38,280
between the slaves bota our application

00:06:35,490 --> 00:06:43,530
got get faster we could add more slaves

00:06:38,280 --> 00:06:46,610
and thus increase our capacity and ii-if

00:06:43,530 --> 00:06:50,150
one of the servers dies the others can

00:06:46,610 --> 00:06:54,659
can continue working Oh

00:06:50,150 --> 00:06:57,419
everything was really good until we got

00:06:54,659 --> 00:07:00,120
to the next problem what happens in the

00:06:57,419 --> 00:07:03,060
point where your your data your data

00:07:00,120 --> 00:07:05,370
gets so much that it is not really

00:07:03,060 --> 00:07:08,219
feasible to fit it in one way in one

00:07:05,370 --> 00:07:11,370
database server currently we have around

00:07:08,219 --> 00:07:15,810
35 million blocks which end and a couple

00:07:11,370 --> 00:07:17,219
of them are have gigabytes of data so it

00:07:15,810 --> 00:07:19,979
does actually really make sense to fit

00:07:17,219 --> 00:07:22,650
all these I don't know how much data it

00:07:19,979 --> 00:07:24,930
is but it's a lot of terabyte into our

00:07:22,650 --> 00:07:30,060
server also we probably it will be

00:07:24,930 --> 00:07:33,210
pretty expensive and slow so so we

00:07:30,060 --> 00:07:35,759
decided to do something else we

00:07:33,210 --> 00:07:39,180
partitioned our data a little bit so

00:07:35,759 --> 00:07:42,029
that they it can be served by different

00:07:39,180 --> 00:07:45,599
servers I'll give you an example free

00:07:42,029 --> 00:07:47,729
the example this cluster of a master and

00:07:45,599 --> 00:07:50,580
a couple of slaves deals with the users

00:07:47,729 --> 00:07:54,870
data this is the the users table and

00:07:50,580 --> 00:07:57,870
user set tributes did this other master

00:07:54,870 --> 00:08:01,080
and a couple of slaves deals with which

00:07:57,870 --> 00:08:03,300
one part of the blocks data like let's

00:08:01,080 --> 00:08:07,759
say the first hundred thousand blocks or

00:08:03,300 --> 00:08:10,529
whatever then another cluster of a

00:08:07,759 --> 00:08:15,449
master and a couple of slaves deals with

00:08:10,529 --> 00:08:17,159
some other blocks data this way we could

00:08:15,449 --> 00:08:20,789
just partition our data a little bit

00:08:17,159 --> 00:08:24,539
more and get and get the whole thing to

00:08:20,789 --> 00:08:27,060
scale the only problem here is that we

00:08:24,539 --> 00:08:29,330
can't do joints but almost in every

00:08:27,060 --> 00:08:31,620
application you have this sweet spot of

00:08:29,330 --> 00:08:35,849
partitioning where you don't really need

00:08:31,620 --> 00:08:38,279
joints free example we in our case we

00:08:35,849 --> 00:08:41,550
don't really want to join between tables

00:08:38,279 --> 00:08:44,490
of two different blocks we don't also it

00:08:41,550 --> 00:08:49,949
it is pretty easy to get away with not

00:08:44,490 --> 00:08:51,630
joining to the users table another think

00:08:49,949 --> 00:08:54,449
about the database and I will show it

00:08:51,630 --> 00:08:56,070
with a small example let's see what

00:08:54,449 --> 00:08:59,310
happens when you open a website let's

00:08:56,070 --> 00:09:01,740
say TechCrunch here are two fairly

00:08:59,310 --> 00:09:02,790
common queries you may you make their

00:09:01,740 --> 00:09:06,120
one of them is to

00:09:02,790 --> 00:09:08,340
is to get user information and the other

00:09:06,120 --> 00:09:14,610
one is to get a couple of boats from the

00:09:08,340 --> 00:09:17,040
database how do do we know which which

00:09:14,610 --> 00:09:21,420
database server to send this user query

00:09:17,040 --> 00:09:25,710
to or how do we know to which of the

00:09:21,420 --> 00:09:30,210
many block clusters to send this w pic

00:09:25,710 --> 00:09:35,250
post query to and our answer is called

00:09:30,210 --> 00:09:38,790
hyper a DB this is a very small PHP

00:09:35,250 --> 00:09:41,750
library and he trusted at the

00:09:38,790 --> 00:09:45,180
application level for maximum

00:09:41,750 --> 00:09:48,360
flexibility and and power I mean a lot

00:09:45,180 --> 00:09:51,020
of people use stuff like masco proxy for

00:09:48,360 --> 00:09:54,210
this but we wanted the flexibility and

00:09:51,020 --> 00:09:57,450
now I'm going to show you how it how it

00:09:54,210 --> 00:10:00,060
works with one of those examples let's

00:09:57,450 --> 00:10:03,840
see how hyper hyper DB knows where to

00:10:00,060 --> 00:10:06,870
send this a query to first hyper-v

00:10:03,840 --> 00:10:09,720
parses the query and it knows dead dead

00:10:06,870 --> 00:10:14,490
it's for the users table and it knows

00:10:09,720 --> 00:10:18,110
that it says there is a select query so

00:10:14,490 --> 00:10:21,110
it goes to its configuration which says

00:10:18,110 --> 00:10:24,660
which says which which table in which

00:10:21,110 --> 00:10:27,390
char days like it says okay this is the

00:10:24,660 --> 00:10:31,950
BB users table it goes to the to the

00:10:27,390 --> 00:10:34,380
user cluster and and then hyper DB can

00:10:31,950 --> 00:10:36,950
send it to the right web server which is

00:10:34,380 --> 00:10:42,260
the second part of the configuration

00:10:36,950 --> 00:10:45,150
where you are specify a database server

00:10:42,260 --> 00:10:47,730
whether you can read from it whether you

00:10:45,150 --> 00:10:49,320
can write from it in this case you can

00:10:47,730 --> 00:10:52,200
read but not right which means it is

00:10:49,320 --> 00:10:57,000
it's one of the slaves and you specify

00:10:52,200 --> 00:11:00,450
in which in which data set it operates

00:10:57,000 --> 00:11:03,450
so now a high hyper DB knows that it has

00:11:00,450 --> 00:11:06,750
to choose one of one of those database

00:11:03,450 --> 00:11:08,760
servers from which it can read II it

00:11:06,750 --> 00:11:11,970
connects to the date to the database

00:11:08,760 --> 00:11:14,760
server and this is totally transparent

00:11:11,970 --> 00:11:16,290
for our application we didn't have to

00:11:14,760 --> 00:11:19,230
change even a tiny

00:11:16,290 --> 00:11:23,899
each of our application code or SQL

00:11:19,230 --> 00:11:27,380
queries another think I hyper DB das is

00:11:23,899 --> 00:11:30,660
failover because if if one of the

00:11:27,380 --> 00:11:34,380
database server is is gone for for

00:11:30,660 --> 00:11:36,630
whatever reason it can just hi hyper the

00:11:34,380 --> 00:11:38,690
week and just choose another one from

00:11:36,630 --> 00:11:42,300
its configuration and it can

00:11:38,690 --> 00:11:46,610
successfully complete the query again

00:11:42,300 --> 00:11:50,100
totally transparent for the application

00:11:46,610 --> 00:11:54,029
actually the best thing for our you guys

00:11:50,100 --> 00:11:56,579
is that hyper DB is not specifically

00:11:54,029 --> 00:11:58,980
tied to WordPress it can work with

00:11:56,579 --> 00:12:01,009
almost any application and we know a lot

00:11:58,980 --> 00:12:05,130
of people who use it in production and

00:12:01,009 --> 00:12:07,529
of course it open source I'll publish

00:12:05,130 --> 00:12:12,630
the slides you can see the link after

00:12:07,529 --> 00:12:16,259
that now we think we've got the database

00:12:12,630 --> 00:12:19,050
covered except for the case where some

00:12:16,259 --> 00:12:21,660
pages make a lot of database queries and

00:12:19,050 --> 00:12:24,750
these queries first take a lot of time

00:12:21,660 --> 00:12:26,970
and make page is low also they they can

00:12:24,750 --> 00:12:31,260
hammer the database servers and bring

00:12:26,970 --> 00:12:34,410
them down I think the obvious solution

00:12:31,260 --> 00:12:36,389
for a lot of you is to just cash all

00:12:34,410 --> 00:12:39,060
these all these queries in introduce

00:12:36,389 --> 00:12:41,880
some some caching servers so that we

00:12:39,060 --> 00:12:44,100
don't hit the database see each time for

00:12:41,880 --> 00:12:48,540
example we are using memcache d which is

00:12:44,100 --> 00:12:50,940
the kind of industry standard and our

00:12:48,540 --> 00:12:52,829
application actually the word the open

00:12:50,940 --> 00:12:58,170
source wordpress project supports object

00:12:52,829 --> 00:13:00,990
caching for for a lot of the queries we

00:12:58,170 --> 00:13:03,420
also do some output caching which means

00:13:00,990 --> 00:13:06,510
that we serve some whole rendered pages

00:13:03,420 --> 00:13:10,439
know not only the result of specific

00:13:06,510 --> 00:13:13,439
queries we do this mostly for unlogged

00:13:10,439 --> 00:13:17,370
users and for front-end pages because

00:13:13,439 --> 00:13:22,380
they are fairly static it this is a huge

00:13:17,370 --> 00:13:25,920
game and everything described now works

00:13:22,380 --> 00:13:27,620
really well for the ninety percent of

00:13:25,920 --> 00:13:29,600
the web applications where you have

00:13:27,620 --> 00:13:33,170
usually less than

00:13:29,600 --> 00:13:37,310
ten percent rights and you have a lot of

00:13:33,170 --> 00:13:39,019
reeds so I'm pretty sure a lot of you

00:13:37,310 --> 00:13:44,540
are working in a situation like this

00:13:39,019 --> 00:13:47,269
these days some load balancers some some

00:13:44,540 --> 00:13:51,199
my squirrel replication and memcache d

00:13:47,269 --> 00:13:56,000
servers and this thing is almost

00:13:51,199 --> 00:13:58,459
infinitely scalable you you can add more

00:13:56,000 --> 00:14:01,220
resources to almost any of these parts

00:13:58,459 --> 00:14:03,769
and this works for majority of the

00:14:01,220 --> 00:14:07,639
people there are a couple of things we

00:14:03,769 --> 00:14:11,480
don't wordpress.com which will allow us

00:14:07,639 --> 00:14:14,810
to to fix on some bigger problems and

00:14:11,480 --> 00:14:17,779
scale a little bit more my first example

00:14:14,810 --> 00:14:21,699
is okay probably all your servers are in

00:14:17,779 --> 00:14:26,269
one data data center what happens whoa

00:14:21,699 --> 00:14:30,709
so what happens if this data center dies

00:14:26,269 --> 00:14:34,639
I have an example where in 2007 a big

00:14:30,709 --> 00:14:37,399
San Francisco data center I think it got

00:14:34,639 --> 00:14:41,540
on fire or there was some huge power

00:14:37,399 --> 00:14:45,589
power outage and some of our biggest

00:14:41,540 --> 00:14:48,560
competitors went went down for seven or

00:14:45,589 --> 00:14:50,810
eight hours which was huge and they

00:14:48,560 --> 00:14:57,529
could do nothing about it they had zero

00:14:50,810 --> 00:15:01,970
control over their system and and their

00:14:57,529 --> 00:15:03,889
users weren't happy at all dead why we

00:15:01,970 --> 00:15:07,160
do the following thing our

00:15:03,889 --> 00:15:11,779
infrastructure is in three data centers

00:15:07,160 --> 00:15:14,000
of course the web servers are really

00:15:11,779 --> 00:15:16,490
easy to put into different data centers

00:15:14,000 --> 00:15:19,939
it doesn't really matter for the

00:15:16,490 --> 00:15:24,769
database we do the following from each

00:15:19,939 --> 00:15:27,620
master and slave cluster we have slaves

00:15:24,769 --> 00:15:29,360
in each of the data centers so you can

00:15:27,620 --> 00:15:31,970
always read really fast and you don't

00:15:29,360 --> 00:15:35,149
have to do network transfer between

00:15:31,970 --> 00:15:37,160
data's data centers the de master for

00:15:35,149 --> 00:15:40,040
each cluster is in only one because we

00:15:37,160 --> 00:15:43,130
have only one master for each chart but

00:15:40,040 --> 00:15:45,290
if one data center dies we can just move

00:15:43,130 --> 00:15:48,620
the master to one of the other day data

00:15:45,290 --> 00:15:51,650
centers and the website can continue

00:15:48,620 --> 00:15:53,450
operating actually data centers go down

00:15:51,650 --> 00:15:56,660
for us like a couple of times per year

00:15:53,450 --> 00:16:01,030
mostly network issues but it helps us

00:15:56,660 --> 00:16:01,030
stay online as much as possible

00:16:02,110 --> 00:16:08,240
operating caught up in a couple of data

00:16:04,970 --> 00:16:10,670
says centers here's Lou looks really

00:16:08,240 --> 00:16:13,930
easy but hey but in reality we hit a lot

00:16:10,670 --> 00:16:19,100
of trouble one of the most notorious

00:16:13,930 --> 00:16:21,770
examples is a sinking cash I'll give you

00:16:19,100 --> 00:16:23,840
an example in both in the green and the

00:16:21,770 --> 00:16:27,170
blue data center we have the same cat

00:16:23,840 --> 00:16:31,790
cash valid for a certain key let's say

00:16:27,170 --> 00:16:34,580
we update the value in the green data

00:16:31,790 --> 00:16:38,420
center if some other part of the

00:16:34,580 --> 00:16:40,400
application try tries to read in the

00:16:38,420 --> 00:16:45,290
blue data center it will get the stale

00:16:40,400 --> 00:16:47,450
value so our current solution is based a

00:16:45,290 --> 00:16:51,350
little bit on on dark magic but it but

00:16:47,450 --> 00:16:54,470
it works after each request we get older

00:16:51,350 --> 00:16:58,550
to other cash changes for a page and we

00:16:54,470 --> 00:17:02,200
send them to every one of the data

00:16:58,550 --> 00:17:06,740
centers so now every data center has all

00:17:02,200 --> 00:17:08,660
of its cash synced this solution is

00:17:06,740 --> 00:17:10,490
still not not open source it's not

00:17:08,660 --> 00:17:13,790
stable enough but we are working on it

00:17:10,490 --> 00:17:16,220
and soon there is a lot of the interest

00:17:13,790 --> 00:17:18,230
from many of the large-scale web web

00:17:16,220 --> 00:17:21,620
site for a solution like this because

00:17:18,230 --> 00:17:23,540
like everybody uses memcache d and once

00:17:21,620 --> 00:17:27,020
and once we have it stable enough it to

00:17:23,540 --> 00:17:28,880
definitely be open source another thing

00:17:27,020 --> 00:17:32,470
which is really fun to implement in a

00:17:28,880 --> 00:17:37,310
multi data center infrastructure is

00:17:32,470 --> 00:17:43,010
deploy there is something straight in

00:17:37,310 --> 00:17:46,190
our set up we mostly work from trunk we

00:17:43,010 --> 00:17:49,010
very rarely do branch inc which is very

00:17:46,190 --> 00:17:51,140
important for our deploy most of the

00:17:49,010 --> 00:17:53,570
time if we want a new big feature we

00:17:51,140 --> 00:17:57,170
don't branching the version control we

00:17:53,570 --> 00:18:00,590
branching code this way in

00:17:57,170 --> 00:18:05,990
integration is incredibly cheap almost

00:18:00,590 --> 00:18:08,800
free and also this leads to a lot of

00:18:05,990 --> 00:18:11,270
committee in our main branch a day so

00:18:08,800 --> 00:18:15,260
totally we have around a hundred commits

00:18:11,270 --> 00:18:18,560
per day and since this is trunk it makes

00:18:15,260 --> 00:18:21,740
sense to deploy after every commit

00:18:18,560 --> 00:18:24,020
because you don't want somebody else to

00:18:21,740 --> 00:18:28,280
deploy your changes after that when he

00:18:24,020 --> 00:18:30,920
commits something else and you have to

00:18:28,280 --> 00:18:33,980
deploy all this code to around a

00:18:30,920 --> 00:18:38,060
thousand two observers so all over and

00:18:33,980 --> 00:18:41,540
some other sort of servers and our d

00:18:38,060 --> 00:18:43,250
ploy is first one click we have a page

00:18:41,540 --> 00:18:46,430
where you can do it this is the button

00:18:43,250 --> 00:18:48,860
of doom mmm it has to be one clean

00:18:46,430 --> 00:18:54,080
because it has to be easy we want people

00:18:48,860 --> 00:18:56,260
to deploy more and and if it's not easy

00:18:54,080 --> 00:18:59,990
if they have to do a couple of things

00:18:56,260 --> 00:19:03,170
they want deploy more they will they

00:18:59,990 --> 00:19:06,610
would deploy less also in in order for

00:19:03,170 --> 00:19:10,520
people to deploy more we wanted it fast

00:19:06,610 --> 00:19:12,590
so this was a huge challenge and here is

00:19:10,520 --> 00:19:15,560
an example actually most of us don't use

00:19:12,590 --> 00:19:17,510
this button of doom think we are real

00:19:15,560 --> 00:19:19,310
developers we use the common line need

00:19:17,510 --> 00:19:22,580
to interface you can just go and say

00:19:19,310 --> 00:19:24,590
deploying in the console so you can see

00:19:22,580 --> 00:19:29,570
the deploy here took around eight

00:19:24,590 --> 00:19:32,270
seconds which makes deploys at all a

00:19:29,570 --> 00:19:35,780
total no-brainer and makes development

00:19:32,270 --> 00:19:41,450
really fast we achieved the really fast

00:19:35,780 --> 00:19:44,270
deploy by having svn mirrors in each

00:19:41,450 --> 00:19:47,900
data off center so first 20 when you

00:19:44,270 --> 00:19:49,400
type do deploy all the other current

00:19:47,900 --> 00:19:54,320
code and the current provision from

00:19:49,400 --> 00:19:55,700
subversion goes to go and get synced to

00:19:54,320 --> 00:19:59,780
all the mirrors in the in the data

00:19:55,700 --> 00:20:02,240
centers and then every server just runs

00:19:59,780 --> 00:20:04,970
svn up there are a couple more

00:20:02,240 --> 00:20:07,100
optimization like we don't always as we

00:20:04,970 --> 00:20:11,040
end up the whole thing like we sometimes

00:20:07,100 --> 00:20:13,230
keep externals the stuff like this

00:20:11,040 --> 00:20:15,210
but the good thing is that we managed to

00:20:13,230 --> 00:20:19,320
make it really really fast and the fast

00:20:15,210 --> 00:20:21,630
and easy deploys are probably the single

00:20:19,320 --> 00:20:23,690
thing which made which made the most

00:20:21,630 --> 00:20:28,770
difference in our developer culture of

00:20:23,690 --> 00:20:32,150
just moving fast if I have to be honest

00:20:28,770 --> 00:20:36,810
our users couldn't care less about our

00:20:32,150 --> 00:20:39,630
deploys and how it works our users care

00:20:36,810 --> 00:20:43,590
that if they see the publish button and

00:20:39,630 --> 00:20:45,840
if they click it they will post will be

00:20:43,590 --> 00:20:49,380
published immediately this is what the

00:20:45,840 --> 00:20:51,150
only thing they care about but but it's

00:20:49,380 --> 00:20:56,430
not really easy to make it immediately

00:20:51,150 --> 00:20:58,530
so on every single post you you have to

00:20:56,430 --> 00:21:01,320
push the post to our Twitter for the

00:20:58,530 --> 00:21:03,270
people who chose to do it you need to

00:21:01,320 --> 00:21:05,510
push it to Facebook you need to collect

00:21:03,270 --> 00:21:08,190
some stuff like number of words whatever

00:21:05,510 --> 00:21:10,770
you need to do some ass bum checks to

00:21:08,190 --> 00:21:14,910
make sure this blog disposed isn't spam

00:21:10,770 --> 00:21:17,970
to block it you need to index the post

00:21:14,910 --> 00:21:21,180
for search you need to invalidate some

00:21:17,970 --> 00:21:23,310
caches and in the NT to heaven for

00:21:21,180 --> 00:21:27,870
governing and if you have the time you

00:21:23,310 --> 00:21:31,470
can actually publish the post so our

00:21:27,870 --> 00:21:33,150
solution to that is also a common

00:21:31,470 --> 00:21:36,690
architectural thing to have a

00:21:33,150 --> 00:21:38,160
synchronous jobs but since we we

00:21:36,690 --> 00:21:40,260
implemented this a couple of years ago

00:21:38,160 --> 00:21:44,580
most of the current solutions like

00:21:40,260 --> 00:21:46,950
German were undead stable also our

00:21:44,580 --> 00:21:51,630
situation was a little bit unique we

00:21:46,950 --> 00:21:53,520
want we had some some more requirements

00:21:51,630 --> 00:21:56,160
and it I mean in and we decided to go

00:21:53,520 --> 00:21:59,970
with our own thing the interesting thing

00:21:56,160 --> 00:22:03,480
about our job system is that it's

00:21:59,970 --> 00:22:05,960
written in PHP and MySQL only it doesn't

00:22:03,480 --> 00:22:09,960
do threads it doesn't do low-level code

00:22:05,960 --> 00:22:13,110
here you can you you can see how its

00:22:09,960 --> 00:22:15,450
dashboard every jobs River he has a lot

00:22:13,110 --> 00:22:18,060
of workers and its bones as much worker

00:22:15,450 --> 00:22:20,880
says it needs depending on the on the

00:22:18,060 --> 00:22:23,910
current number of Q jobs it's really

00:22:20,880 --> 00:22:24,540
cool you can prioritize them and they're

00:22:23,910 --> 00:22:28,320
in

00:22:24,540 --> 00:22:31,290
easy to work with you can just queue a

00:22:28,320 --> 00:22:33,870
job give it some arguments and tell the

00:22:31,290 --> 00:22:37,860
name job it will be run whenever there

00:22:33,870 --> 00:22:40,170
is time on the job servers of course it

00:22:37,860 --> 00:22:44,970
has all the priorities you can defer

00:22:40,170 --> 00:22:47,820
jobs also we connect we actually use

00:22:44,970 --> 00:22:50,130
this job system for our Krong I picture

00:22:47,820 --> 00:22:53,640
every one of you has done on this web

00:22:50,130 --> 00:22:56,310
server somewhere at work a huge crontab

00:22:53,640 --> 00:22:58,590
which like hundreds of jobs which which

00:22:56,310 --> 00:23:01,110
have been sitting there for for like

00:22:58,590 --> 00:23:03,810
years we used to have one of those but

00:23:01,110 --> 00:23:07,640
now everybody can can go to the web

00:23:03,810 --> 00:23:10,020
interface and say oh I want this job run

00:23:07,640 --> 00:23:15,540
whenever I wanted to even kept the

00:23:10,020 --> 00:23:18,930
original cron format and and as I said

00:23:15,540 --> 00:23:21,780
it is 0 PHP and MySQL it integrates

00:23:18,930 --> 00:23:26,220
really easy with our system and with any

00:23:21,780 --> 00:23:29,990
PHP system out there again the best

00:23:26,220 --> 00:23:33,210
thing for you is that it's open source

00:23:29,990 --> 00:23:35,790
you can see the links you you can

00:23:33,210 --> 00:23:39,150
install it on your own server see if you

00:23:35,790 --> 00:23:43,770
want and it makes both integration and

00:23:39,150 --> 00:23:45,810
hacking really easy because not every

00:23:43,770 --> 00:23:47,730
web development company has low that

00:23:45,810 --> 00:23:51,720
low-level developers if it needs

00:23:47,730 --> 00:23:54,600
something something custom and like

00:23:51,720 --> 00:23:56,850
almost everybody of my colleagues know

00:23:54,600 --> 00:23:58,680
PHP so if there is a problem in the job

00:23:56,850 --> 00:24:01,440
system they can just go and and hug

00:23:58,680 --> 00:24:04,740
something I remember one case where we

00:24:01,440 --> 00:24:07,230
had to send very urgently like three

00:24:04,740 --> 00:24:10,050
million emails to users because we could

00:24:07,230 --> 00:24:13,350
stop something but but the thing is that

00:24:10,050 --> 00:24:16,860
it made it really easy to to make some

00:24:13,350 --> 00:24:19,470
custom priorities for these emails to

00:24:16,860 --> 00:24:22,410
make sending these emails feel some

00:24:19,470 --> 00:24:25,740
cracks in the in the job sees system

00:24:22,410 --> 00:24:27,720
where e EV eva server had some spare

00:24:25,740 --> 00:24:30,240
cycles it would send more of those

00:24:27,720 --> 00:24:34,680
emails and we managed to send them like

00:24:30,240 --> 00:24:36,770
in a couple of hours probably more like

00:24:34,680 --> 00:24:40,980
12 but

00:24:36,770 --> 00:24:43,200
so this is all I all I had I didn't

00:24:40,980 --> 00:24:45,990
mention a lot about the infrastructure

00:24:43,200 --> 00:24:48,300
so if you have more questions you you

00:24:45,990 --> 00:24:50,610
would be able to ask now or later you

00:24:48,300 --> 00:24:53,670
can find me at the automatic boot right

00:24:50,610 --> 00:24:57,720
near the entrance in the end I just want

00:24:53,670 --> 00:24:59,910
to say one more thing that even if you

00:24:57,720 --> 00:25:02,670
don't remember anything from my talk the

00:24:59,910 --> 00:25:05,820
only thing I want you two to get away

00:25:02,670 --> 00:25:08,550
from this room wit with is that whatever

00:25:05,820 --> 00:25:10,320
you do you will get better if you know a

00:25:08,550 --> 00:25:12,720
little bit more about the abstraction

00:25:10,320 --> 00:25:17,570
below and sometimes it matters if you're

00:25:12,720 --> 00:25:17,570
sitting on a pig or on an elephant thank

00:25:25,120 --> 00:25:31,150
yeah I had a question about your

00:25:27,610 --> 00:25:33,920
deployment pipeline so like if you're

00:25:31,150 --> 00:25:35,360
editing some code and like I'm just

00:25:33,920 --> 00:25:36,860
wondering about how the testing works

00:25:35,360 --> 00:25:38,390
and so forth look if you're editing some

00:25:36,860 --> 00:25:40,910
code and you have a syntax error and

00:25:38,390 --> 00:25:43,100
then you commit like had it like where

00:25:40,910 --> 00:25:45,350
is that check like so first you can't

00:25:43,100 --> 00:25:51,320
commit a syntax error we have a

00:25:45,350 --> 00:25:53,000
pre-commit hook for that I mean other

00:25:51,320 --> 00:25:54,950
sorts of testing and I don't you commit

00:25:53,000 --> 00:25:56,300
something that's chews up a lot of CPU

00:25:54,950 --> 00:25:58,010
on the web servers or something like

00:25:56,300 --> 00:26:01,280
well where does the testing thing is

00:25:58,010 --> 00:26:05,120
that if you can we make sure that you

00:26:01,280 --> 00:26:08,270
can fail fast and after you if you cause

00:26:05,120 --> 00:26:11,410
some travel we because our deploy is

00:26:08,270 --> 00:26:15,290
really fast you can fix it as fast of

00:26:11,410 --> 00:26:17,660
course after we after you deploy

00:26:15,290 --> 00:26:23,240
something we we measure and we track

00:26:17,660 --> 00:26:25,910
whether the cpu usage went up but if if

00:26:23,240 --> 00:26:30,020
it happens hook you can revert the

00:26:25,910 --> 00:26:37,190
commit within like minutes very often

00:26:30,020 --> 00:26:40,310
seconds and historically we haven't had

00:26:37,190 --> 00:26:42,350
huge trouble with that both the

00:26:40,310 --> 00:26:45,920
yesterday and today's people stopped me

00:26:42,350 --> 00:26:48,260
and asked about this and we think that

00:26:45,920 --> 00:26:51,920
it is better to trust people that they

00:26:48,260 --> 00:26:53,870
can break something and this way they

00:26:51,920 --> 00:26:58,670
get more confident in what they do and

00:26:53,870 --> 00:27:05,090
in reality data on break much I had to I

00:26:58,670 --> 00:27:07,570
did some calculations and less than one

00:27:05,090 --> 00:27:11,150
percent of all comets are actually

00:27:07,570 --> 00:27:15,950
reverting really a drug on another

00:27:11,150 --> 00:27:18,980
commit hmm I can understand the

00:27:15,950 --> 00:27:21,080
sentiment behind that that oh if you can

00:27:18,980 --> 00:27:23,600
break things people will probably break

00:27:21,080 --> 00:27:27,310
them but I don't know it just doesn't

00:27:23,600 --> 00:27:27,310
happen so much

00:27:29,070 --> 00:27:36,010
we so we do code reviews but their post

00:27:32,470 --> 00:27:38,590
code reviews like we will review most of

00:27:36,010 --> 00:27:41,230
the code or of course if you come if

00:27:38,590 --> 00:27:45,640
you're doing something big it will get

00:27:41,230 --> 00:27:48,039
reviewed a little bit more but the whole

00:27:45,640 --> 00:27:52,840
practice with running a lot of stuff

00:27:48,039 --> 00:27:55,799
before going to a staging server Kevin

00:27:52,840 --> 00:27:58,950
QA this loads down development a lot and

00:27:55,799 --> 00:28:02,080
most of the time the changes are trivial

00:27:58,950 --> 00:28:04,299
probably ninety five five percent of the

00:28:02,080 --> 00:28:06,429
committee it's obvious that it won't

00:28:04,299 --> 00:28:09,100
cause any trouble but in the normal

00:28:06,429 --> 00:28:13,360
setting this commit still go through the

00:28:09,100 --> 00:28:15,659
normal procedure the other thing is that

00:28:13,360 --> 00:28:17,559
we have most of the people develop on

00:28:15,659 --> 00:28:22,120
something like a staging environment

00:28:17,559 --> 00:28:25,510
which has a connection with with the

00:28:22,120 --> 00:28:28,090
production database if you need it we

00:28:25,510 --> 00:28:31,299
have this virtual servers which have

00:28:28,090 --> 00:28:33,460
exactly the same configuration and

00:28:31,299 --> 00:28:36,250
environment as the production servers so

00:28:33,460 --> 00:28:39,190
you actually be in your personal testing

00:28:36,250 --> 00:28:43,890
you know that that your code runs in the

00:28:39,190 --> 00:28:48,010
same setting and since the blogs are

00:28:43,890 --> 00:28:51,070
totally separate you can you can work on

00:28:48,010 --> 00:28:53,049
a production schema for your own testing

00:28:51,070 --> 00:28:58,390
blog and you can break stuff there as

00:28:53,049 --> 00:29:01,899
much as you want firstly thanks for

00:28:58,390 --> 00:29:03,549
great talk I love the images um if you

00:29:01,899 --> 00:29:04,659
just start from scratch because i'm

00:29:03,549 --> 00:29:05,770
guessing history is the reason why

00:29:04,659 --> 00:29:07,419
you're not doing this would you use

00:29:05,770 --> 00:29:09,130
platform as a service and if not why not

00:29:07,419 --> 00:29:11,620
because you seem doing a lot of extra

00:29:09,130 --> 00:29:14,169
work here that you seriously the vendors

00:29:11,620 --> 00:29:19,120
can do for you you mean would i use

00:29:14,169 --> 00:29:22,000
stuff like amazon No so for our storage

00:29:19,120 --> 00:29:25,690
I didn't mention that word but for the

00:29:22,000 --> 00:29:27,720
user for the user uploaded content we

00:29:25,690 --> 00:29:31,120
used to use a lot of tests three and

00:29:27,720 --> 00:29:34,779
just cash it a little bit with with

00:29:31,120 --> 00:29:37,270
varnish on our end but at some point it

00:29:34,779 --> 00:29:41,110
gets just too expensively we have I

00:29:37,270 --> 00:29:42,169
don't know about 2,000 servers and since

00:29:41,110 --> 00:29:44,149
we are a big

00:29:42,169 --> 00:29:46,970
and for most of the hosting company we

00:29:44,149 --> 00:29:49,909
get really good rates and for us it's

00:29:46,970 --> 00:29:52,850
just a lot cheaper to run it this way

00:29:49,909 --> 00:29:59,659
too we rent our servers we don't even

00:29:52,850 --> 00:30:02,119
buy them and s3 and TC too if your day

00:29:59,659 --> 00:30:03,859
scale but they're really expensive if

00:30:02,119 --> 00:30:08,239
you compare them to the normal whole

00:30:03,859 --> 00:30:12,080
hosting costs so I like the idea if it

00:30:08,239 --> 00:30:14,389
was in the very early stages of a

00:30:12,080 --> 00:30:15,950
starter Pete it makes sense because the

00:30:14,389 --> 00:30:18,559
moment you get a burst of traffic you

00:30:15,950 --> 00:30:20,419
you just put down the plus the plus

00:30:18,559 --> 00:30:22,700
button and you and you and you get more

00:30:20,419 --> 00:30:28,609
resources but we don't really need that

00:30:22,700 --> 00:30:31,009
I to two part question if I many places

00:30:28,609 --> 00:30:34,580
of back of the queue there usually have

00:30:31,009 --> 00:30:36,820
about 15 minutes okay first first one is

00:30:34,580 --> 00:30:38,899
what was a cut-off point between

00:30:36,820 --> 00:30:41,830
platform-as-a-service kind of argument

00:30:38,899 --> 00:30:46,399
and your own servers usually its price

00:30:41,830 --> 00:30:49,429
price could be both money and time i'll

00:30:46,399 --> 00:30:53,029
give you again an example with with the

00:30:49,429 --> 00:30:56,299
user uploaded content we used to care

00:30:53,029 --> 00:30:58,759
for all of our content on s3 and then

00:30:56,299 --> 00:31:02,509
catch it locally at some point we

00:30:58,759 --> 00:31:05,389
started paying huge bills for s3 because

00:31:02,509 --> 00:31:08,480
we make like hundreds of terabytes or

00:31:05,389 --> 00:31:11,779
even more traffic per month we started

00:31:08,480 --> 00:31:14,090
getting tens of thousands of dollar

00:31:11,779 --> 00:31:16,399
bills and we said it Oh probably it

00:31:14,090 --> 00:31:19,549
makes sense to invest some time and to

00:31:16,399 --> 00:31:22,700
build our own thing so one of the new

00:31:19,549 --> 00:31:25,129
system guys spent like a couple of weeks

00:31:22,700 --> 00:31:27,289
and now we were running all of those on

00:31:25,129 --> 00:31:30,919
our own infrastructure we are using

00:31:27,289 --> 00:31:33,470
mogao FS and it works like a charm but

00:31:30,919 --> 00:31:35,509
it took us some time to figure it out we

00:31:33,470 --> 00:31:38,570
need we had to find the right ng next

00:31:35,509 --> 00:31:40,879
module we had to fix some stuff in it

00:31:38,570 --> 00:31:44,690
because nobody before was using it d

00:31:40,879 --> 00:31:47,659
scale but in the NT it was worth the

00:31:44,690 --> 00:31:50,480
hassle and and the best one because

00:31:47,659 --> 00:31:53,179
we're no no longer paying so much for s3

00:31:50,480 --> 00:31:55,440
we just have everything as a back up

00:31:53,179 --> 00:31:58,950
there if o every

00:31:55,440 --> 00:32:02,549
on our side fails but we just pay for

00:31:58,950 --> 00:32:04,649
storage and any sub n if our

00:32:02,549 --> 00:32:08,370
infrastructure breaks we can go back to

00:32:04,649 --> 00:32:10,289
a street if needed so we use it as a

00:32:08,370 --> 00:32:18,059
backup thank you all so much second

00:32:10,289 --> 00:32:20,940
question as well thank you I was

00:32:18,059 --> 00:32:23,629
wondering how you managed your database

00:32:20,940 --> 00:32:28,649
updates when you need to restructure

00:32:23,629 --> 00:32:32,340
yeah first we keep track of all the

00:32:28,649 --> 00:32:34,259
database structure in svn which we just

00:32:32,340 --> 00:32:37,799
have a script which goes and collect all

00:32:34,259 --> 00:32:40,649
the data and tracks the changes mmm and

00:32:37,799 --> 00:32:45,570
yet unfortunately we still haven't

00:32:40,649 --> 00:32:49,139
automated that it's a huge pain the

00:32:45,570 --> 00:32:51,269
biggest trouble there is actually there

00:32:49,139 --> 00:32:53,850
are two one of them is easier to many

00:32:51,269 --> 00:32:58,460
chain it is to make your code work with

00:32:53,850 --> 00:33:01,830
both old and new version of the schema I

00:32:58,460 --> 00:33:04,590
thought it would be the biggest pain but

00:33:01,830 --> 00:33:08,129
in reality almost never we had to do

00:33:04,590 --> 00:33:10,259
very big code changes to to accommodate

00:33:08,129 --> 00:33:12,179
that so if you want to make a change

00:33:10,259 --> 00:33:15,690
make sure your code works with both the

00:33:12,179 --> 00:33:17,970
old and the new schema the second 10

00:33:15,690 --> 00:33:22,289
biggest problem is that alter table is

00:33:17,970 --> 00:33:26,610
incredibly slow for big tables and what

00:33:22,289 --> 00:33:29,009
we are what we are doing is make run the

00:33:26,610 --> 00:33:32,309
altar table on a on a slave first take

00:33:29,009 --> 00:33:34,440
it take it out of rotation then put it

00:33:32,309 --> 00:33:39,240
back in rotations think the new changes

00:33:34,440 --> 00:33:42,059
and then switch them back but automating

00:33:39,240 --> 00:33:45,750
this ok currently it is semi automated

00:33:42,059 --> 00:33:48,299
it needs some some human attention but

00:33:45,750 --> 00:33:51,240
it just tweeted to break it to fully

00:33:48,299 --> 00:33:53,850
automate and in reality doesn't happen

00:33:51,240 --> 00:33:58,159
so often so that we invest their time

00:33:53,850 --> 00:34:01,350
and resources to fully automate that and

00:33:58,159 --> 00:34:03,779
one thing that helps is that for smaller

00:34:01,350 --> 00:34:07,110
changes we are using something in

00:34:03,779 --> 00:34:08,860
WordPress which automatically runs the

00:34:07,110 --> 00:34:11,320
author table like

00:34:08,860 --> 00:34:14,440
you give him the new schema it figures

00:34:11,320 --> 00:34:16,800
out that the changes and it just runs

00:34:14,440 --> 00:34:19,270
the appropriate order order order tables

00:34:16,800 --> 00:34:21,370
this is how the one click upgrade in

00:34:19,270 --> 00:34:29,410
WordPress works you just click in it'll

00:34:21,370 --> 00:34:31,660
be just a bit of a question from a

00:34:29,410 --> 00:34:33,670
wordpress.org point of view you

00:34:31,660 --> 00:34:36,520
mentioned you've got layers of caching

00:34:33,670 --> 00:34:40,240
and there's quite a few static caching

00:34:36,520 --> 00:34:41,860
plugins out there which Cashin plugins

00:34:40,240 --> 00:34:44,500
to use internally are they open source

00:34:41,860 --> 00:34:46,870
and what would you recommend on

00:34:44,500 --> 00:34:50,740
wordpress com it doesn't make sense to

00:34:46,870 --> 00:34:55,390
cache stuff in the flat files we have

00:34:50,740 --> 00:34:57,820
released a plugin called bad cash which

00:34:55,390 --> 00:35:04,150
does also output caching button but in

00:34:57,820 --> 00:35:07,150
memcache d so we use something like bad

00:35:04,150 --> 00:35:10,540
cash on wordpress.com but it's a little

00:35:07,150 --> 00:35:12,700
bit more complex ah but if you have a

00:35:10,540 --> 00:35:15,750
couple of servers you should definitely

00:35:12,700 --> 00:35:15,750
check out that cash

00:35:20,630 --> 00:35:22,690

YouTube URL: https://www.youtube.com/watch?v=FJA-bqHuKNk


