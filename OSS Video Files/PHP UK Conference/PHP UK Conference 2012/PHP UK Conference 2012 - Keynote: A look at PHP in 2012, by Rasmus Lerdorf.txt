Title: PHP UK Conference 2012 - Keynote: A look at PHP in 2012, by Rasmus Lerdorf
Publication date: 2012-03-06
Playlist: PHP UK Conference 2012
Description: 
	http://www.phpconference.co.uk/talk/php-in-2012

Rasmus Lerdorf, best known for having gotten the PHP project off the ground in 1995, gives an update on PHP as he sees it in 2012. From PHP humble beginnings as the Personal Homepage project up to what is new in PHP 5.4 and beyond.

Ramsus has contributed to a number of other open source projects over the years. He was an infrastructure architect at Yahoo! for more than 7 years and most recently has been advising startups including WePay, Etsy, and Room77. He was born in Greenland, grew up in Denmark and Canada and has a Systems Design engineering degree from the University of Waterloo.
Captions: 
	00:00:16,689 --> 00:00:22,520
my on yes

00:00:18,529 --> 00:00:23,750
good morning guys this slides if you

00:00:22,520 --> 00:00:26,269
want to follow along I'll check them

00:00:23,750 --> 00:00:29,180
later or online here you can find me on

00:00:26,269 --> 00:00:31,330
Twitter Google+ I don't really do

00:00:29,180 --> 00:00:35,360
Facebook very much

00:00:31,330 --> 00:00:38,420
so so get right into it I've been doing

00:00:35,360 --> 00:00:39,470
this for a very long time now 18 years

00:00:38,420 --> 00:00:42,530
or so I guess

00:00:39,470 --> 00:00:48,620
even longer than that I used to do lots

00:00:42,530 --> 00:00:53,690
of saw the pre web hacking on IRC gopher

00:00:48,620 --> 00:00:56,390
and back in the 90s late eighties I

00:00:53,690 --> 00:00:58,489
guess even I was working on BBS software

00:00:56,390 --> 00:01:03,050
in Canada so I've been doing this stuff

00:00:58,489 --> 00:01:06,530
for my entire life basically but when

00:01:03,050 --> 00:01:08,600
the web hit I got very interested I saw

00:01:06,530 --> 00:01:12,140
the early web which looked like that you

00:01:08,600 --> 00:01:12,860
had this uppercase HTML tag with a bogus

00:01:12,140 --> 00:01:15,500
cgi-bin

00:01:12,860 --> 00:01:19,009
Perl counter usually and it just it was

00:01:15,500 --> 00:01:21,670
a mess and performance wise it was

00:01:19,009 --> 00:01:24,380
terrible having to fork and exec a Perl

00:01:21,670 --> 00:01:26,030
binary on every request just to show a

00:01:24,380 --> 00:01:27,860
little counter that shows how many times

00:01:26,030 --> 00:01:31,280
the page has been hit just didn't work

00:01:27,860 --> 00:01:33,500
so I wanted something better faster I

00:01:31,280 --> 00:01:35,929
wanted more dynamic web pages I didn't

00:01:33,500 --> 00:01:39,200
want to have to fork and exec a heavy

00:01:35,929 --> 00:01:41,149
interpreter on every request and there

00:01:39,200 --> 00:01:43,280
was something called SSI back then the

00:01:41,149 --> 00:01:44,660
stood for server side includes I guess

00:01:43,280 --> 00:01:46,489
we still have them but nobody really

00:01:44,660 --> 00:01:49,250
uses them anymore its mod include I

00:01:46,489 --> 00:01:51,050
guess in an Apache you couldn't do very

00:01:49,250 --> 00:01:55,009
much with them so I wanted a more

00:01:51,050 --> 00:01:57,619
powerful system for dynamic content

00:01:55,009 --> 00:01:59,660
creation built into the web server so I

00:01:57,619 --> 00:02:04,250
took the model of SSI to begin with and

00:01:59,660 --> 00:02:09,170
this is PHP version 1 circa 1994 with

00:02:04,250 --> 00:02:13,250
the PHP expressions embedded inside HTML

00:02:09,170 --> 00:02:16,489
comment eggs and you can see a little

00:02:13,250 --> 00:02:19,580
bit of what was to come in this I didn't

00:02:16,489 --> 00:02:21,140
have variables the ones that were there

00:02:19,580 --> 00:02:22,819
that looked like variables like no

00:02:21,140 --> 00:02:25,999
entries these were actually magic

00:02:22,819 --> 00:02:28,040
variables that were filled in internally

00:02:25,999 --> 00:02:32,079
so whenever you would do an SQL query I

00:02:28,040 --> 00:02:32,079
would create this num entries variable

00:02:34,359 --> 00:02:39,230
and accept result as another variable

00:02:37,909 --> 00:02:41,150
you can see there whenever you would

00:02:39,230 --> 00:02:43,430
execute a command I would always put the

00:02:41,150 --> 00:02:44,930
result in to exact result you couldn't

00:02:43,430 --> 00:02:49,310
define your own variables you couldn't

00:02:44,930 --> 00:02:53,540
do anything interesting with this so PHP

00:02:49,310 --> 00:02:56,480
version one I got really tired of having

00:02:53,540 --> 00:02:58,939
to put stuff inside HTML comment tags

00:02:56,480 --> 00:03:02,169
you couldn't really do code blocks with

00:02:58,939 --> 00:03:06,590
this so I started playing around with

00:03:02,169 --> 00:03:10,579
flex and bison and wrote the first real

00:03:06,590 --> 00:03:14,359
interpreter for PHP which looked like

00:03:10,579 --> 00:03:16,069
this so this is PHP version two although

00:03:14,359 --> 00:03:19,099
we never I never really got to -

00:03:16,069 --> 00:03:23,019
actually it was like 1.99 and or

00:03:19,099 --> 00:03:26,769
something I think was my last release

00:03:23,019 --> 00:03:29,060
you could see I started using this

00:03:26,769 --> 00:03:33,259
bracket equal or bracket question mark

00:03:29,060 --> 00:03:35,659
take this comes out of sgml sgml is what

00:03:33,259 --> 00:03:38,479
HTML is based on and sgml has this p I

00:03:35,659 --> 00:03:42,500
tag process instruction tag which was

00:03:38,479 --> 00:03:44,509
that I was supposed to label my process

00:03:42,500 --> 00:03:47,299
instruction if I had read the whole sgml

00:03:44,509 --> 00:03:49,879
spec but it's 10,000 pages long so I

00:03:47,299 --> 00:03:52,370
didn't and nobody else was using P I

00:03:49,879 --> 00:03:55,189
tags back then so I grabbed it and said

00:03:52,370 --> 00:03:57,079
this is mine which really pissed off the

00:03:55,189 --> 00:03:59,500
XML folks later on when they came along

00:03:57,079 --> 00:04:02,209
I said hey we need to put XML inside

00:03:59,500 --> 00:04:04,189
HTML documents but everyone's using PHP

00:04:02,209 --> 00:04:05,719
and it breaks if we put them in and so

00:04:04,189 --> 00:04:10,129
they weren't happy with the fact that I

00:04:05,719 --> 00:04:12,739
have labeled my instruction I still own

00:04:10,129 --> 00:04:17,209
the fingers fear I was their first find

00:04:12,739 --> 00:04:18,259
their own damn tag I should also read a

00:04:17,209 --> 00:04:20,750
bit further because I'm supposed to

00:04:18,259 --> 00:04:23,080
close with the question mark bracket as

00:04:20,750 --> 00:04:27,680
well but I got that wrong as well I

00:04:23,080 --> 00:04:29,630
didn't have curly braces but other than

00:04:27,680 --> 00:04:34,010
that this doesn't look that different

00:04:29,630 --> 00:04:35,900
from the PHP that we have today if we

00:04:34,010 --> 00:04:37,310
fast forward 10 years that

00:04:35,900 --> 00:04:42,169
same piece of code might look more like

00:04:37,310 --> 00:04:45,169
this it's all object D and has all kinds

00:04:42,169 --> 00:04:48,620
of fancy things in there honestly I

00:04:45,169 --> 00:04:52,270
still prefer that it's direct to the

00:04:48,620 --> 00:04:54,500
point I can read it without having to

00:04:52,270 --> 00:04:56,690
figure out the various methods and

00:04:54,500 --> 00:05:02,180
classes and what these magic things all

00:04:56,690 --> 00:05:05,030
do so how did we get here so why did

00:05:02,180 --> 00:05:07,220
people start picking this kind of broken

00:05:05,030 --> 00:05:12,470
I mean I got many many things wrong in

00:05:07,220 --> 00:05:15,470
PHP too yet it really really took off

00:05:12,470 --> 00:05:17,660
even before PHP 3 and the web grew and

00:05:15,470 --> 00:05:20,780
grew and grew and PHP grew right along

00:05:17,660 --> 00:05:24,320
with the web and I think one of the

00:05:20,780 --> 00:05:26,600
reasons is that I focused on the

00:05:24,320 --> 00:05:28,520
ecosystem more than the language from

00:05:26,600 --> 00:05:29,750
the very beginning remember the

00:05:28,520 --> 00:05:32,570
beginning I said look I need a better

00:05:29,750 --> 00:05:35,060
way of building dynamic content embedded

00:05:32,570 --> 00:05:36,740
into the web server it wasn't so much I

00:05:35,060 --> 00:05:38,449
was thinking I need a better language

00:05:36,740 --> 00:05:40,310
for solving this problem has nothing to

00:05:38,449 --> 00:05:42,500
do with the language I needed a better

00:05:40,310 --> 00:05:44,840
environment for solving the problem

00:05:42,500 --> 00:05:46,190
which included the whole ecosystem how

00:05:44,840 --> 00:05:47,630
are we going to solve this problem how

00:05:46,190 --> 00:05:49,539
are we going to serve up the content

00:05:47,630 --> 00:05:53,270
what's our server what's our back-end

00:05:49,539 --> 00:05:55,430
how is nice P going to offer this to

00:05:53,270 --> 00:05:56,870
their users like all these things are

00:05:55,430 --> 00:05:58,699
things you have to think about if you

00:05:56,870 --> 00:06:02,300
want an end-to-end solution that people

00:05:58,699 --> 00:06:04,070
can actually use and lamp wasn't an

00:06:02,300 --> 00:06:06,770
accident right

00:06:04,070 --> 00:06:08,780
I actually thought a little bit about

00:06:06,770 --> 00:06:11,389
how this thing was going to be used and

00:06:08,780 --> 00:06:13,010
how it's going to be deployed and how

00:06:11,389 --> 00:06:15,620
fast it would be once you put all the

00:06:13,010 --> 00:06:18,260
pieces together I also thought a little

00:06:15,620 --> 00:06:21,740
bit about ISPs what do is piece care

00:06:18,260 --> 00:06:23,840
about especially in the late 90s ISPs

00:06:21,740 --> 00:06:26,449
were trying to shove as many users as

00:06:23,840 --> 00:06:28,340
they could onto as few machines as

00:06:26,449 --> 00:06:30,470
possible right lots and lots of shared

00:06:28,340 --> 00:06:34,810
hosting thousands and thousands of

00:06:30,470 --> 00:06:36,590
domains on a single shared host and

00:06:34,810 --> 00:06:38,479
whether they have to worry about well

00:06:36,590 --> 00:06:40,760
they have to worry about one user on the

00:06:38,479 --> 00:06:43,070
system doing crazy things that will take

00:06:40,760 --> 00:06:46,250
the other 5,000 users that are sharing

00:06:43,070 --> 00:06:47,960
that same Apache instance down we didn't

00:06:46,250 --> 00:06:49,360
have VMs back then you couldn't really

00:06:47,960 --> 00:06:51,680
segregate them well

00:06:49,360 --> 00:06:55,250
so you had to kind of rely on other

00:06:51,680 --> 00:06:56,720
people not to screw you over and is P

00:06:55,250 --> 00:06:58,130
doesn't like that they don't like the

00:06:56,720 --> 00:07:01,310
fact that they have to rely on dumb

00:06:58,130 --> 00:07:02,720
users not to screw over other dumb users

00:07:01,310 --> 00:07:04,010
and then they call in and ask them

00:07:02,720 --> 00:07:06,680
questions to support and it's a

00:07:04,010 --> 00:07:10,250
nightmare it's one of the reasons mod

00:07:06,680 --> 00:07:12,530
Perl never took off my Perl was way too

00:07:10,250 --> 00:07:14,120
powerful with mod Perl you could go in

00:07:12,530 --> 00:07:16,040
you can completely reconfigure the

00:07:14,120 --> 00:07:19,040
webserver you can change everything

00:07:16,040 --> 00:07:21,470
about how Apache is going to take the

00:07:19,040 --> 00:07:23,500
requests and serve things up and you can

00:07:21,470 --> 00:07:25,940
hook in even before it figures out which

00:07:23,500 --> 00:07:27,800
domain is going to get served up and and

00:07:25,940 --> 00:07:29,660
how this path is going to get translated

00:07:27,800 --> 00:07:31,010
to a file its going to get served up so

00:07:29,660 --> 00:07:32,600
you could write a hook that would take

00:07:31,010 --> 00:07:34,730
other people's requests and redirect

00:07:32,600 --> 00:07:36,950
them to your web server and there's no

00:07:34,730 --> 00:07:38,510
really real way of defeating that you

00:07:36,950 --> 00:07:40,400
couldn't really tell my parallel don't

00:07:38,510 --> 00:07:41,750
be powerful don't do that because it was

00:07:40,400 --> 00:07:44,150
designed to do that but it wasn't this

00:07:41,750 --> 00:07:47,870
sign for a shared environment so ISPs

00:07:44,150 --> 00:07:50,840
couldn't offer it with things like CPU

00:07:47,870 --> 00:07:55,040
limits memory limits and things like

00:07:50,840 --> 00:07:58,880
that in PHP and I as P could to some

00:07:55,040 --> 00:08:00,440
extent at least nail down what users

00:07:58,880 --> 00:08:02,540
could do and how much damage they could

00:08:00,440 --> 00:08:07,220
do even if they deliberately tried to

00:08:02,540 --> 00:08:10,100
just chew up CPU time with with a while

00:08:07,220 --> 00:08:10,640
1 loop for example it'll get killed off

00:08:10,100 --> 00:08:14,030
after a while

00:08:10,640 --> 00:08:17,900
so is Peas really like that I think the

00:08:14,030 --> 00:08:19,940
second point was scale and the really

00:08:17,900 --> 00:08:24,020
important part here is being able to

00:08:19,940 --> 00:08:25,850
scale down scaling up this I'm not going

00:08:24,020 --> 00:08:29,030
to say it's easy it's hard but it's kind

00:08:25,850 --> 00:08:30,410
of expected and as engineers that's the

00:08:29,030 --> 00:08:32,060
problem we think about how we're going

00:08:30,410 --> 00:08:35,750
to scale this thing to thousands and

00:08:32,060 --> 00:08:37,599
thousands of requests per second and

00:08:35,750 --> 00:08:40,969
that's what I thought about my whole

00:08:37,599 --> 00:08:43,160
goal when I started this was to serve up

00:08:40,969 --> 00:08:48,980
web requests faster than I could do with

00:08:43,160 --> 00:08:50,690
CGI Perl at the time but sometimes we

00:08:48,980 --> 00:08:53,589
lose track of the fact that everyone

00:08:50,690 --> 00:08:55,250
starts pretty small the weekend warriors

00:08:53,589 --> 00:08:56,990
they're the ones that are actually

00:08:55,250 --> 00:09:00,170
creating the interesting content they're

00:08:56,990 --> 00:09:02,089
the ones that put stuff together and one

00:09:00,170 --> 00:09:02,860
in a million of those will suddenly take

00:09:02,089 --> 00:09:04,300
off

00:09:02,860 --> 00:09:06,100
and they'll suddenly need to worry about

00:09:04,300 --> 00:09:08,020
scaling but there are millions of the

00:09:06,100 --> 00:09:10,360
really really low end solutions people

00:09:08,020 --> 00:09:13,330
that have an interesting idea want to

00:09:10,360 --> 00:09:16,950
get it online how are they gonna do that

00:09:13,330 --> 00:09:20,830
with the least friction possible and

00:09:16,950 --> 00:09:24,250
that's hard it's really hard to say to

00:09:20,830 --> 00:09:26,680
build something that is approachable by

00:09:24,250 --> 00:09:28,720
somebody who does not have a lot of

00:09:26,680 --> 00:09:29,950
experience in this stuff they have a lot

00:09:28,720 --> 00:09:31,120
of experience in another field and

00:09:29,950 --> 00:09:33,760
that's the field they're trying to bring

00:09:31,120 --> 00:09:35,830
to the web but giving them a solution

00:09:33,760 --> 00:09:38,010
that can they can just sort of grasp and

00:09:35,830 --> 00:09:41,560
get going with quickly it's not easy

00:09:38,010 --> 00:09:43,870
because scaling down is hard making it

00:09:41,560 --> 00:09:46,570
easy making what is inherently pretty

00:09:43,870 --> 00:09:51,820
complicated very very easy for people is

00:09:46,570 --> 00:09:53,290
not easy and doing both scaling up to

00:09:51,820 --> 00:09:56,410
something the size of Yahoo and Facebook

00:09:53,290 --> 00:09:57,610
and at the same time scaling down to the

00:09:56,410 --> 00:10:02,160
weekend warrior who doesn't know

00:09:57,610 --> 00:10:06,610
anything that's almost impossible I

00:10:02,160 --> 00:10:09,280
remember in the early days 99 I was

00:10:06,610 --> 00:10:12,880
working for IBM in Research Triangle

00:10:09,280 --> 00:10:16,960
Park in North Carolina and I was on the

00:10:12,880 --> 00:10:18,610
WebSphere team and if there was ever an

00:10:16,960 --> 00:10:22,270
example of something that doesn't scale

00:10:18,610 --> 00:10:24,040
down its WebSphere I don't know if you

00:10:22,270 --> 00:10:27,460
guys have ever had to experience

00:10:24,040 --> 00:10:29,710
WebSphere but it took me over a week to

00:10:27,460 --> 00:10:32,500
get my first HelloWorld application up

00:10:29,710 --> 00:10:35,530
and running in WebSphere it was not easy

00:10:32,500 --> 00:10:38,310
and I asked the documentation and

00:10:35,530 --> 00:10:43,090
someone came with a cart of books and

00:10:38,310 --> 00:10:44,500
CDs and it was just massive PHP still

00:10:43,090 --> 00:10:47,230
has the simplest hello world out there

00:10:44,500 --> 00:10:49,240
of any language or any framework

00:10:47,230 --> 00:10:51,670
anything right you put hello world in

00:10:49,240 --> 00:10:54,250
the text file put on your web server so

00:10:51,670 --> 00:10:58,270
it's hello world that's it

00:10:54,250 --> 00:11:00,910
no echoes no system print crap

00:10:58,270 --> 00:11:02,980
no including any output libraries none

00:11:00,910 --> 00:11:05,080
of that stuff you write hello world in a

00:11:02,980 --> 00:11:06,220
text file you put it on your server it

00:11:05,080 --> 00:11:09,220
shouldn't be harder than that because

00:11:06,220 --> 00:11:10,840
what else could you possibly mean when

00:11:09,220 --> 00:11:13,360
you put hello world into a text file and

00:11:10,840 --> 00:11:15,610
put it on your document root right

00:11:13,360 --> 00:11:16,370
that's the obvious simple thing that

00:11:15,610 --> 00:11:19,010
yours

00:11:16,370 --> 00:11:20,570
and should do and most other languages

00:11:19,010 --> 00:11:27,140
will just give you a syntax error for

00:11:20,570 --> 00:11:31,460
them all right so as the web grew this

00:11:27,140 --> 00:11:34,520
ecosystem started to evolve API started

00:11:31,460 --> 00:11:36,260
to spring up and lately in the last

00:11:34,520 --> 00:11:38,710
couple of years what's been really cool

00:11:36,260 --> 00:11:41,270
is that we've started getting meta api's

00:11:38,710 --> 00:11:44,240
there are two big ones out there right

00:11:41,270 --> 00:11:46,580
now once called YQL from Yahoo there's

00:11:44,240 --> 00:11:50,660
the other another one called QLD Oh from

00:11:46,580 --> 00:11:53,510
eBay I spent seven years at Yahoo so I

00:11:50,660 --> 00:11:55,339
know the YQL one a little bit better but

00:11:53,510 --> 00:11:57,610
what you can do with this is you can

00:11:55,339 --> 00:11:59,750
basically access any API in the world

00:11:57,610 --> 00:12:03,529
with something that looks a little bit

00:11:59,750 --> 00:12:05,180
like SQL so a simple example here select

00:12:03,529 --> 00:12:07,250
star from first names lookup where a

00:12:05,180 --> 00:12:08,810
name equals Rasmus and it gives me a

00:12:07,250 --> 00:12:12,250
little bit information about the name

00:12:08,810 --> 00:12:12,250
where it's from if it's male or female

00:12:16,570 --> 00:12:22,959
Irish first name right when you combine

00:12:20,930 --> 00:12:25,130
these two things a very approachable

00:12:22,959 --> 00:12:28,670
ecosystem for building web applications

00:12:25,130 --> 00:12:31,279
quickly plus these meta a P is that you

00:12:28,670 --> 00:12:34,790
access pretty much any information on

00:12:31,279 --> 00:12:37,010
the web and also rather difficult

00:12:34,790 --> 00:12:38,270
algorithms like analyzing a first name

00:12:37,010 --> 00:12:40,010
to figure out where it's from and

00:12:38,270 --> 00:12:41,180
whether it's male or female that's

00:12:40,010 --> 00:12:43,010
something that would take you a long

00:12:41,180 --> 00:12:44,959
time to figure out how to do yourself

00:12:43,010 --> 00:12:46,940
even if you find some libraries you can

00:12:44,959 --> 00:12:48,500
download it's a heck of a lot easier if

00:12:46,940 --> 00:12:49,910
you can do it in the one-liner from your

00:12:48,500 --> 00:12:51,410
PHP script and just get okay let's

00:12:49,910 --> 00:12:54,920
figure out this isn't male or female and

00:12:51,410 --> 00:12:56,779
let's move on from there write stuff

00:12:54,920 --> 00:12:58,520
like getting the weather select star

00:12:56,779 --> 00:13:05,510
from Weather Underground forecast the

00:12:58,520 --> 00:13:06,740
location equals London not hard by the

00:13:05,510 --> 00:13:10,630
way you guys have very strange

00:13:06,740 --> 00:13:13,130
temperatures for London in February I

00:13:10,630 --> 00:13:16,510
live in California and was warmer here

00:13:13,130 --> 00:13:20,330
yesterday than it was at home very odd

00:13:16,510 --> 00:13:23,270
again select star from Flickr photo

00:13:20,330 --> 00:13:25,430
search where tags equals London sort by

00:13:23,270 --> 00:13:26,959
interest in this and some of the API is

00:13:25,430 --> 00:13:29,030
we actually do need to sign up for an

00:13:26,959 --> 00:13:29,910
API key but in all of them you can just

00:13:29,030 --> 00:13:32,880
say an date

00:13:29,910 --> 00:13:34,740
gie equals and all these AP is will also

00:13:32,880 --> 00:13:37,440
work even if you have to register to use

00:13:34,740 --> 00:13:41,970
some of them so you take this easy

00:13:37,440 --> 00:13:44,060
access to web-based api's get lots of

00:13:41,970 --> 00:13:46,530
photos then you add a little bit of CSS

00:13:44,060 --> 00:13:49,290
right that's exactly the same script

00:13:46,530 --> 00:13:51,570
three lines of PHP add a bit of css3

00:13:49,290 --> 00:13:54,930
that just randomized is the position for

00:13:51,570 --> 00:13:57,000
real oh that you can see does some

00:13:54,930 --> 00:14:02,130
rounded corners and all this stuff all

00:13:57,000 --> 00:14:05,220
in CSS and that means that any idiot out

00:14:02,130 --> 00:14:07,970
there can write very very impressive

00:14:05,220 --> 00:14:10,710
looking websites without a whole lot of

00:14:07,970 --> 00:14:13,140
fighting the technology and fighting the

00:14:10,710 --> 00:14:16,590
tools because what it's really about is

00:14:13,140 --> 00:14:20,010
actually solving people's problems the

00:14:16,590 --> 00:14:23,100
technology doesn't matter right the

00:14:20,010 --> 00:14:25,950
users of these sites they don't care how

00:14:23,100 --> 00:14:27,960
you wrote your application they care

00:14:25,950 --> 00:14:30,630
that when they click on that add to

00:14:27,960 --> 00:14:34,470
shopping cart buy that it's quick and

00:14:30,630 --> 00:14:37,140
it's safe and it just works right all

00:14:34,470 --> 00:14:40,770
the crap behind the scenes is completely

00:14:37,140 --> 00:14:42,990
irrelevant and that's why we're building

00:14:40,770 --> 00:14:46,290
stuff isn't it is to solve problems for

00:14:42,990 --> 00:14:50,880
people it's not to sit and play with our

00:14:46,290 --> 00:14:52,500
hammer cuz that's just I know it's sort

00:14:50,880 --> 00:14:54,960
of in our own little circle we all love

00:14:52,500 --> 00:14:57,860
to debate which hammer is better and all

00:14:54,960 --> 00:15:00,230
this crap but it doesn't matter right

00:14:57,860 --> 00:15:02,460
find a tool that solves the problem

00:15:00,230 --> 00:15:04,770
solve problem for people and make the

00:15:02,460 --> 00:15:09,710
world a better place with the web that

00:15:04,770 --> 00:15:15,390
should be the goal all right

00:15:09,710 --> 00:15:16,770
this year what are we doing well one

00:15:15,390 --> 00:15:20,040
thing we're doing is we're dealing with

00:15:16,770 --> 00:15:23,550
a crappy thing called hash DOS anyone

00:15:20,040 --> 00:15:25,830
heard about hash sauce really it's like

00:15:23,550 --> 00:15:28,050
three people in the room okay a little

00:15:25,830 --> 00:15:30,000
more hard to say okay it was still very

00:15:28,050 --> 00:15:32,460
very few people know what hash sauce is

00:15:30,000 --> 00:15:36,540
okay I'll explain it to you

00:15:32,460 --> 00:15:38,940
so inside just about every language in

00:15:36,540 --> 00:15:40,830
the world there are hash tables so when

00:15:38,940 --> 00:15:43,050
you put stuff into an array you have

00:15:40,830 --> 00:15:43,779
keys and you have values in order to

00:15:43,050 --> 00:15:48,100
look up the key

00:15:43,779 --> 00:15:51,370
quickly we will hash that key and try to

00:15:48,100 --> 00:15:53,499
get a nice even distribution across a

00:15:51,370 --> 00:15:55,209
bunch of hash buckets so we have this

00:15:53,499 --> 00:15:57,100
hash table we hash the keys that we can

00:15:55,209 --> 00:15:58,740
do just with a single quick hash we can

00:15:57,100 --> 00:16:00,279
go and find the correct bucket

00:15:58,740 --> 00:16:01,720
occasionally we will have a hash

00:16:00,279 --> 00:16:04,990
collision so that two different keys

00:16:01,720 --> 00:16:09,069
will actually hash to the same bucket

00:16:04,990 --> 00:16:10,839
if that happens we add a link it's a

00:16:09,069 --> 00:16:12,639
linked list how its implemented

00:16:10,839 --> 00:16:16,480
internally in PHP and in those systems

00:16:12,639 --> 00:16:19,779
and once you have the hash collision it

00:16:16,480 --> 00:16:23,769
takes you one extra memory dereference

00:16:19,779 --> 00:16:26,139
to get to that collided bucket here and

00:16:23,769 --> 00:16:27,490
if you have too many of them the system

00:16:26,139 --> 00:16:30,420
gets a little slower because then you

00:16:27,490 --> 00:16:33,399
have to jump through three or four

00:16:30,420 --> 00:16:37,240
pointers in C to actually get your

00:16:33,399 --> 00:16:42,759
information out of that bucket generally

00:16:37,240 --> 00:16:46,540
it's not a problem we use a hashing

00:16:42,759 --> 00:16:48,639
function in PHP called DJB x-33 a sounds

00:16:46,540 --> 00:16:54,339
very very fancy but all it really does

00:16:48,639 --> 00:16:56,889
is it multiplies by 33 and adds the the

00:16:54,339 --> 00:16:59,439
character the value of the character at

00:16:56,889 --> 00:17:00,910
each position in the key and it really

00:16:59,439 --> 00:17:03,309
rates through that it looks complicated

00:17:00,910 --> 00:17:06,220
here because we've unrolled the loops in

00:17:03,309 --> 00:17:08,620
order to make it compile now down into

00:17:06,220 --> 00:17:11,439
better assembly language essentially but

00:17:08,620 --> 00:17:14,620
if we rewrite this in PHP you can see

00:17:11,439 --> 00:17:17,799
how simple it is so we start with a hash

00:17:14,620 --> 00:17:21,610
value and we run through each character

00:17:17,799 --> 00:17:24,480
multiplied by 33 add the character value

00:17:21,610 --> 00:17:28,990
at each position in the key string and

00:17:24,480 --> 00:17:31,299
that's our hash now unfortunately it's a

00:17:28,990 --> 00:17:32,830
very very simple hash because we need it

00:17:31,299 --> 00:17:35,169
to be really fast because we have to

00:17:32,830 --> 00:17:38,770
hash all the time in PHP so we need a

00:17:35,169 --> 00:17:43,419
dead simple 1 x 33 is good because it's

00:17:38,770 --> 00:17:45,700
a it's just shift left 5 x + 1 right

00:17:43,419 --> 00:17:50,169
shift left this times 32 add the hash

00:17:45,700 --> 00:17:53,530
again you get 33 so it's 1 shift 1 add

00:17:50,169 --> 00:17:55,510
operation to do the hashing now we could

00:17:53,530 --> 00:17:57,220
put in a much more complicated hashing

00:17:55,510 --> 00:17:59,590
algorithm that

00:17:57,220 --> 00:18:00,820
means it would speed down PHP by a lot

00:17:59,590 --> 00:18:02,500
and we didn't do this to be

00:18:00,820 --> 00:18:05,380
cryptographically safe we did it for

00:18:02,500 --> 00:18:07,870
hashing performance but that means that

00:18:05,380 --> 00:18:11,110
colliding it is not that hard and it

00:18:07,870 --> 00:18:14,140
happens that if you take keys 1024 2048

00:18:11,110 --> 00:18:17,020
multiples of 1024 and calculate the hash

00:18:14,140 --> 00:18:18,640
you get the same hash value for all of

00:18:17,020 --> 00:18:19,659
those now there are lots of other

00:18:18,640 --> 00:18:21,370
strings there are lots of other

00:18:19,659 --> 00:18:24,789
combinations that'll hash to that same

00:18:21,370 --> 00:18:27,400
one so if you sit down and actually

00:18:24,789 --> 00:18:32,080
generate a bunch of hash keys that all

00:18:27,400 --> 00:18:35,020
hash to the same thing and you send the

00:18:32,080 --> 00:18:38,919
post request to a PHP server with all

00:18:35,020 --> 00:18:40,510
those keys so 1024 2048 3072 and it's

00:18:38,919 --> 00:18:41,710
not just hundreds you need thousands and

00:18:40,510 --> 00:18:44,530
thousands right

00:18:41,710 --> 00:18:48,669
if you send about thirty thousand of

00:18:44,530 --> 00:18:51,370
these to a PHP server it can take PHP 30

00:18:48,669 --> 00:18:53,679
to 40 seconds to actually build the post

00:18:51,370 --> 00:18:55,659
array in memory because on every single

00:18:53,679 --> 00:18:59,140
time it has to it gets the first one is

00:18:55,659 --> 00:19:01,210
fast the second one Clyde link once it's

00:18:59,140 --> 00:19:05,919
pretty fast to the third one fourth one

00:19:01,210 --> 00:19:10,450
that's fine but the number 30 1999 has

00:19:05,919 --> 00:19:12,220
to look lik through 30 1999 links right

00:19:10,450 --> 00:19:14,230
and the one before there's one less what

00:19:12,220 --> 00:19:17,350
did one last that one s right so it

00:19:14,230 --> 00:19:19,960
becomes a huge number as we were

00:19:17,350 --> 00:19:22,510
building basically this collision line

00:19:19,960 --> 00:19:24,100
here so our hash table is completely

00:19:22,510 --> 00:19:28,450
broken because all we're getting is one

00:19:24,100 --> 00:19:30,880
huge linked list now in normal everyday

00:19:28,450 --> 00:19:32,860
operations you'll never hit this but the

00:19:30,880 --> 00:19:37,570
bad guys can craft requests like this

00:19:32,860 --> 00:19:40,600
and basically take down the server so

00:19:37,570 --> 00:19:45,669
how do we stop it well in PHP five 310

00:19:40,600 --> 00:19:48,340
and higher we now have max input bars so

00:19:45,669 --> 00:19:50,710
that basically limits you to a thousand

00:19:48,340 --> 00:19:53,710
post variables get variables cookie

00:19:50,710 --> 00:19:55,419
whatever right a thousand of these and a

00:19:53,710 --> 00:19:59,190
thousand people can do no problem even

00:19:55,419 --> 00:19:59,190
if they all collide it's not an issue

00:19:59,669 --> 00:20:08,080
but there are other places for example

00:20:03,010 --> 00:20:10,450
if you take user data like a JSON blob

00:20:08,080 --> 00:20:13,540
for example they

00:20:10,450 --> 00:20:16,180
could embed a colliding array inside the

00:20:13,540 --> 00:20:19,720
JSON blog so there are other places in

00:20:16,180 --> 00:20:21,970
PHP that are application specific where

00:20:19,720 --> 00:20:24,010
this might also be an issue so it's

00:20:21,970 --> 00:20:26,190
deliver that it's idiots be aware of it

00:20:24,010 --> 00:20:30,640
for other parts of your application

00:20:26,190 --> 00:20:33,280
anywhere we're creating arrays from user

00:20:30,640 --> 00:20:34,870
data you have to be careful and you may

00:20:33,280 --> 00:20:36,340
want to put your own limits and say well

00:20:34,870 --> 00:20:38,170
look there should never be more than a

00:20:36,340 --> 00:20:40,210
thousand elements in this array if you

00:20:38,170 --> 00:20:43,630
leave it unlimited people can possibly

00:20:40,210 --> 00:20:46,240
hashed out your application now we could

00:20:43,630 --> 00:20:48,460
solve it by adding a randomizer in the

00:20:46,240 --> 00:20:51,250
hash so on every request we use a

00:20:48,460 --> 00:20:53,890
different random seed for the hash

00:20:51,250 --> 00:20:55,960
function the problem is that there are

00:20:53,890 --> 00:20:59,170
many things in PHP where these hash

00:20:55,960 --> 00:21:04,660
tables spend requests for example in a

00:20:59,170 --> 00:21:08,200
PC we cache function and class hash

00:21:04,660 --> 00:21:11,950
tables in shared memory and they're

00:21:08,200 --> 00:21:13,780
actually cached with the hash keys so if

00:21:11,950 --> 00:21:15,520
we change them every request we wouldn't

00:21:13,780 --> 00:21:17,350
be able to use a PC at all in this case

00:21:15,520 --> 00:21:19,030
because we wouldn't be able to find

00:21:17,350 --> 00:21:21,190
these things because the hashing

00:21:19,030 --> 00:21:23,320
algorithm or the seed would be different

00:21:21,190 --> 00:21:25,990
and the hash keys wouldn't match across

00:21:23,320 --> 00:21:29,590
requests so then we could do it on a

00:21:25,990 --> 00:21:32,020
sort of per server or per startup as and

00:21:29,590 --> 00:21:35,290
when you restart your PHP server we can

00:21:32,020 --> 00:21:37,630
grab a random seed but even then there

00:21:35,290 --> 00:21:39,760
are also opcode cache a PC included

00:21:37,630 --> 00:21:41,410
where you can actually dump your shared

00:21:39,760 --> 00:21:43,600
memory to disk and then reload that

00:21:41,410 --> 00:21:44,860
after a server restart that would be

00:21:43,600 --> 00:21:47,140
broken in that case and there are other

00:21:44,860 --> 00:21:50,440
areas to where there are hash keys that

00:21:47,140 --> 00:21:52,990
actually get saved so we haven't come up

00:21:50,440 --> 00:21:54,460
with a better way of doing this yet

00:21:52,990 --> 00:21:56,950
that's not going to break a lot of

00:21:54,460 --> 00:21:59,290
existing code so for now this is what we

00:21:56,950 --> 00:22:01,330
have max input bars plus me trying to

00:21:59,290 --> 00:22:03,070
teach you guys but you need to worry

00:22:01,330 --> 00:22:04,630
about it a little bit not that much a

00:22:03,070 --> 00:22:08,080
little bit in your own applications as

00:22:04,630 --> 00:22:13,200
well all right and not for the boring

00:22:08,080 --> 00:22:16,120
stuff some new or newish cool stuff I

00:22:13,200 --> 00:22:20,910
really like these two new extensions

00:22:16,120 --> 00:22:20,910
ones live event and the other is 0 mq

00:22:21,100 --> 00:22:27,760
Levent lets you write and event-driven

00:22:23,350 --> 00:22:30,340
server in PHP and 0 mq is a really

00:22:27,760 --> 00:22:35,559
really cool technology that I like to

00:22:30,340 --> 00:22:38,049
relate to SQL Lite so 0 mq the mq stands

00:22:35,559 --> 00:22:40,150
for message queuing obviously it's

00:22:38,049 --> 00:22:42,010
really not an mq it's really a socket

00:22:40,150 --> 00:22:44,320
library just like SQLite that's really

00:22:42,010 --> 00:22:47,620
not a database it's kind of a database

00:22:44,320 --> 00:22:49,480
front-end to the filesystem essentially

00:22:47,620 --> 00:22:51,789
but there's no server involved same with

00:22:49,480 --> 00:22:53,320
0 mq there's no server it's basically a

00:22:51,789 --> 00:22:56,230
socket library that lets you do

00:22:53,320 --> 00:22:58,240
one-to-one one-to-many all kinds of

00:22:56,230 --> 00:23:01,000
different interesting configurations of

00:22:58,240 --> 00:23:02,380
socket communications combine that

00:23:01,000 --> 00:23:04,450
there's something like live event and

00:23:02,380 --> 00:23:07,090
you can write some kickass event-driven

00:23:04,450 --> 00:23:08,799
servers that can sit there and serve up

00:23:07,090 --> 00:23:13,000
thousands and thousands of concurrent

00:23:08,799 --> 00:23:15,090
requests and it's not that hard so

00:23:13,000 --> 00:23:17,620
there's an event-driven server here

00:23:15,090 --> 00:23:20,590
might look a little bit complicated but

00:23:17,620 --> 00:23:22,299
really it's just setting up where we're

00:23:20,590 --> 00:23:26,380
going to listen we're going to listen on

00:23:22,299 --> 00:23:29,679
one 27001 point five five five five then

00:23:26,380 --> 00:23:30,820
we define a callback function so what

00:23:29,679 --> 00:23:33,220
are we going to do when we get the

00:23:30,820 --> 00:23:35,980
request on that socket so here I have a

00:23:33,220 --> 00:23:37,659
static variable called messages that I'm

00:23:35,980 --> 00:23:40,750
just going to increment so just

00:23:37,659 --> 00:23:44,590
incrementing a counter and once my

00:23:40,750 --> 00:23:49,150
counter hits ten I'm going to exit my

00:23:44,590 --> 00:23:52,750
event loop then I register my callback

00:23:49,150 --> 00:23:56,320
function doing event set and add my

00:23:52,750 --> 00:23:58,750
event and go into my loop so basically

00:23:56,320 --> 00:24:01,120
now this server just sits here in this

00:23:58,750 --> 00:24:03,190
event based loop call right there's no

00:24:01,120 --> 00:24:05,260
looping through PHP anything it's all

00:24:03,190 --> 00:24:06,940
sitting there in C basically just

00:24:05,260 --> 00:24:08,890
waiting for a request never gets a

00:24:06,940 --> 00:24:11,140
request it's gonna call out and it's

00:24:08,890 --> 00:24:13,210
gonna run this closure or this function

00:24:11,140 --> 00:24:15,400
that I fed it on every request so you

00:24:13,210 --> 00:24:17,289
have a very very fast server that just

00:24:15,400 --> 00:24:20,169
sits there and runs a bit of PHP code

00:24:17,289 --> 00:24:27,340
every time it gets a connection the

00:24:20,169 --> 00:24:31,600
client to talk to it three lines connect

00:24:27,340 --> 00:24:33,940
and send a message so send hello there

00:24:31,600 --> 00:24:34,509
and then you can chain the receive to

00:24:33,940 --> 00:24:37,259
receive

00:24:34,509 --> 00:24:39,579
the response and printout the response

00:24:37,259 --> 00:24:41,829
you can do some very nifty things with

00:24:39,579 --> 00:24:43,419
that so if you are playing with

00:24:41,829 --> 00:24:45,579
something like nodejs for an

00:24:43,419 --> 00:24:47,619
event-driven server and you're

00:24:45,579 --> 00:24:51,759
struggling writing JavaScript and this

00:24:47,619 --> 00:24:54,190
whole sort of take turns approach that

00:24:51,759 --> 00:24:55,629
no juices that take hey you get a slice

00:24:54,190 --> 00:24:56,799
now now you get a slice now you get a

00:24:55,629 --> 00:24:57,549
slice now you got a slice and you have

00:24:56,799 --> 00:25:00,190
to worry about that

00:24:57,549 --> 00:25:01,659
it's a lot of things to try to juggle in

00:25:00,190 --> 00:25:03,009
your mind it's one of these things it's

00:25:01,659 --> 00:25:06,489
really kind of cool to sit and play with

00:25:03,009 --> 00:25:08,379
the hammer but there might be a quicker

00:25:06,489 --> 00:25:10,869
way of getting the same effect with what

00:25:08,379 --> 00:25:14,679
you're already know so have a look at

00:25:10,869 --> 00:25:17,319
live event for that another thing I've

00:25:14,679 --> 00:25:19,059
been playing with I think Ian is here

00:25:17,319 --> 00:25:24,899
Ian barber wrote this extension he's at

00:25:19,059 --> 00:25:28,229
the back SVM I really really like SVM

00:25:24,899 --> 00:25:31,839
the Stanford support vector machine and

00:25:28,229 --> 00:25:34,419
it's basically a interesting machine

00:25:31,839 --> 00:25:37,479
learning mechanism where you give it a

00:25:34,419 --> 00:25:40,059
bunch of data a bunch of vectors and

00:25:37,479 --> 00:25:41,229
that defines so maybe it's spam you're

00:25:40,059 --> 00:25:43,029
trying to define how many there many

00:25:41,229 --> 00:25:47,019
different things if you can somehow get

00:25:43,029 --> 00:25:49,779
numeric vectors that say if it has 1

00:25:47,019 --> 00:25:51,729
here 3 here 2 here minus 1 minus 1 minus

00:25:49,779 --> 00:25:53,919
1 then that spam if you have other

00:25:51,729 --> 00:25:55,149
vectors that's not spam and you train

00:25:53,919 --> 00:25:56,589
the machine you give it all this

00:25:55,149 --> 00:25:59,349
information you give it a data set

00:25:56,589 --> 00:26:01,089
essentially and with some with some

00:25:59,349 --> 00:26:02,979
results so on the observed data spread

00:26:01,089 --> 00:26:06,309
of spam and not spam and all these

00:26:02,979 --> 00:26:08,799
vectors are in the model then you can

00:26:06,309 --> 00:26:10,629
load that model and you can run predict

00:26:08,799 --> 00:26:13,959
so then you get a new set of actors for

00:26:10,629 --> 00:26:18,579
a new event and say predict which bucket

00:26:13,959 --> 00:26:20,440
this thing falls in and it's really nice

00:26:18,579 --> 00:26:21,609
that all this math that you'd have to

00:26:20,440 --> 00:26:23,589
sit and read a book it's just in the

00:26:21,609 --> 00:26:26,499
library and with a couple of PHP calls

00:26:23,589 --> 00:26:28,809
you can train your your model so you can

00:26:26,499 --> 00:26:30,940
keep adding new stuff so you might for a

00:26:28,809 --> 00:26:33,190
while be in the learning phase where you

00:26:30,940 --> 00:26:36,669
basically just have humans categorize

00:26:33,190 --> 00:26:38,679
things is this fraud not fraud whatever

00:26:36,669 --> 00:26:40,659
based on the various things you know

00:26:38,679 --> 00:26:42,339
about this particular event you

00:26:40,659 --> 00:26:44,019
categorize it and then after a while as

00:26:42,339 --> 00:26:46,749
long as you then record all these things

00:26:44,019 --> 00:26:48,430
in your model as you're going eventually

00:26:46,749 --> 00:26:49,540
you can start doing a

00:26:48,430 --> 00:26:50,620
and they mention you might get rid of

00:26:49,540 --> 00:26:53,100
that human that's sitting there

00:26:50,620 --> 00:26:55,360
determining whether this is fraud or not

00:26:53,100 --> 00:26:57,280
because at a certain point maybe your

00:26:55,360 --> 00:26:59,650
data set and your model is intelligent

00:26:57,280 --> 00:27:04,600
enough that it knows it by itself and

00:26:59,650 --> 00:27:05,950
the way it works is it basically it's if

00:27:04,600 --> 00:27:09,220
you take it in two dimensions you have

00:27:05,950 --> 00:27:11,920
an X on the Y you say if everything up

00:27:09,220 --> 00:27:13,390
in this area up here is fraud and

00:27:11,920 --> 00:27:16,060
everything in this area of the graph is

00:27:13,390 --> 00:27:17,710
not fraud then you look at the x and y

00:27:16,060 --> 00:27:19,780
and based on where it falls in those two

00:27:17,710 --> 00:27:21,730
areas you can automatically know hey

00:27:19,780 --> 00:27:23,860
this is fraud this is not fraud based on

00:27:21,730 --> 00:27:26,770
previous events right so you take that

00:27:23,860 --> 00:27:29,830
two-dimensional approach and you expand

00:27:26,770 --> 00:27:31,870
it to n dimensions and that's basically

00:27:29,830 --> 00:27:34,510
all it does it draws these hyper planes

00:27:31,870 --> 00:27:37,570
so you take x just having an X Y you

00:27:34,510 --> 00:27:39,370
might have eight dimensions and that's

00:27:37,570 --> 00:27:42,340
not something we can handle in our heads

00:27:39,370 --> 00:27:44,230
but the math basically draws these

00:27:42,340 --> 00:27:46,840
complicated hyper planes and and

00:27:44,230 --> 00:27:49,420
identifies clusters and then it

00:27:46,840 --> 00:27:51,910
categorizes all these things in the

00:27:49,420 --> 00:27:53,440
different clusters and based on that it

00:27:51,910 --> 00:27:56,200
knows whether this event looked like

00:27:53,440 --> 00:27:59,110
other events and it's interesting math

00:27:56,200 --> 00:28:02,290
and it's actually much much simpler than

00:27:59,110 --> 00:28:04,920
other mechanisms out there for it and

00:28:02,290 --> 00:28:08,370
now that you have a PHP window into it

00:28:04,920 --> 00:28:09,760
you're golden so thanks again for that

00:28:08,370 --> 00:28:12,610
all right

00:28:09,760 --> 00:28:15,430
five-four I'm just gonna give you a

00:28:12,610 --> 00:28:17,290
quick overview of some of the new things

00:28:15,430 --> 00:28:19,750
that are in five four that's going to be

00:28:17,290 --> 00:28:22,570
coming out soon hopefully within the

00:28:19,750 --> 00:28:24,850
month well we're at the end of the month

00:28:22,570 --> 00:28:27,360
so maybe next month but sometime in

00:28:24,850 --> 00:28:30,640
March I'm sure we'll get it out

00:28:27,360 --> 00:28:33,250
we've improved fast UGI memory handling

00:28:30,640 --> 00:28:37,870
a bunch of things on the list here the

00:28:33,250 --> 00:28:41,110
quiet operator is faster empty hashes so

00:28:37,870 --> 00:28:44,790
when you do array bracket bracket that

00:28:41,110 --> 00:28:49,150
used to be slower than it needed to be

00:28:44,790 --> 00:28:51,580
we've removed a bunch of features which

00:28:49,150 --> 00:28:55,030
there are a few here that could affect

00:28:51,580 --> 00:28:58,900
you magic quotes is a little scary to

00:28:55,030 --> 00:29:02,110
remove because it does protect naive

00:28:58,900 --> 00:29:04,690
users from SQL I

00:29:02,110 --> 00:29:06,070
in some circumstances I mean we've

00:29:04,690 --> 00:29:07,480
removed it because it doesn't protect

00:29:06,070 --> 00:29:09,310
everyone and it's not the right way of

00:29:07,480 --> 00:29:12,700
protecting it but people who have never

00:29:09,310 --> 00:29:16,900
thought about SQL injection are just

00:29:12,700 --> 00:29:18,760
randomly lucky that pH P's magic quotes

00:29:16,900 --> 00:29:22,750
wrong by default in previous versions

00:29:18,760 --> 00:29:25,630
and it actually took care of it now that

00:29:22,750 --> 00:29:27,970
it's gone and if someone upgrades

00:29:25,630 --> 00:29:30,460
blindly without checking anything then

00:29:27,970 --> 00:29:33,190
there could be more SQL I out there in

00:29:30,460 --> 00:29:35,710
the world which isn't good but at a

00:29:33,190 --> 00:29:38,860
certain point we also have to move on

00:29:35,710 --> 00:29:41,320
and that's what we're doing y2k

00:29:38,860 --> 00:29:44,080
compliance hopefully that's not going to

00:29:41,320 --> 00:29:47,950
bite anybody anymore still one of my

00:29:44,080 --> 00:29:50,140
favorite features ever you wouldn't

00:29:47,950 --> 00:29:53,650
believe how many emails I would get in

00:29:50,140 --> 00:29:56,890
1999 even back in 1998 asking if PHP was

00:29:53,650 --> 00:29:58,510
y2k compliant which doesn't make any

00:29:56,890 --> 00:30:00,160
sense right because it's the application

00:29:58,510 --> 00:30:04,060
that you write that you need to worry

00:30:00,160 --> 00:30:06,130
about PHP itself but they wanted an

00:30:04,060 --> 00:30:08,110
answer right they wanted their boss has

00:30:06,130 --> 00:30:10,560
asked them please ensure that all the

00:30:08,110 --> 00:30:13,660
whole technology stack is y2k compliance

00:30:10,560 --> 00:30:17,530
so I get this forum email that says hey

00:30:13,660 --> 00:30:19,690
are you why it's okay compliant and

00:30:17,530 --> 00:30:20,950
until we added this configuration switch

00:30:19,690 --> 00:30:22,570
I didn't have a good answer I would give

00:30:20,950 --> 00:30:24,250
this long rambling response about it

00:30:22,570 --> 00:30:26,020
it's not AUSA to you blah blah blah

00:30:24,250 --> 00:30:29,110
nobody wants to hear that they want an

00:30:26,020 --> 00:30:33,120
action item right y2k compliance equals

00:30:29,110 --> 00:30:33,120
on and your PHP ini file

00:30:34,120 --> 00:30:42,799
problem solved and they were happy they

00:30:37,370 --> 00:30:45,080
love that and the thing that it did it

00:30:42,799 --> 00:30:47,059
actually did one tiny little thing to

00:30:45,080 --> 00:30:49,490
the setcookie command because back in

00:30:47,059 --> 00:30:51,409
set cookie or cookies came out of

00:30:49,490 --> 00:30:53,769
Netscape and Netscape had the cookie

00:30:51,409 --> 00:30:56,990
spec and all their example uses

00:30:53,769 --> 00:30:59,390
two-digit dates but the spec itself or

00:30:56,990 --> 00:31:01,519
the wording around it talked about four

00:30:59,390 --> 00:31:03,409
digit dates so the people who actually

00:31:01,519 --> 00:31:05,120
read this back the browser implemented

00:31:03,409 --> 00:31:07,399
influencers that read the spec would use

00:31:05,120 --> 00:31:09,830
four digit dates the browser guys that

00:31:07,399 --> 00:31:11,510
just skimmed the examples use two digits

00:31:09,830 --> 00:31:13,250
and in the early days of browsers they

00:31:11,510 --> 00:31:14,269
were there were two types there was the

00:31:13,250 --> 00:31:16,909
two digit in the four digit and they

00:31:14,269 --> 00:31:20,179
didn't kind of interact which was a mess

00:31:16,909 --> 00:31:23,210
and you could switch PHP s from two to

00:31:20,179 --> 00:31:25,279
four by turning on y2k compliance but

00:31:23,210 --> 00:31:27,019
all the browser's now understand four

00:31:25,279 --> 00:31:35,539
digit years so it's not necessary

00:31:27,019 --> 00:31:38,480
anymore traits is new traits can confuse

00:31:35,539 --> 00:31:41,029
people very very easily please just try

00:31:38,480 --> 00:31:43,279
to keep in mind this phrase its compiler

00:31:41,029 --> 00:31:45,320
assisted copy and paste if you think

00:31:43,279 --> 00:31:47,600
about it too much you'll get really

00:31:45,320 --> 00:31:49,460
really confused don't think about it

00:31:47,600 --> 00:31:52,450
just think about the fact that you can

00:31:49,460 --> 00:31:55,669
copy and paste blocks of code into your

00:31:52,450 --> 00:31:57,230
into your classes right same you would

00:31:55,669 --> 00:31:58,610
do with your editor you go hey I need

00:31:57,230 --> 00:32:00,380
this block of code from this class I

00:31:58,610 --> 00:32:01,940
need it here you'd copy and paste it

00:32:00,380 --> 00:32:03,889
from in your editor over here it's

00:32:01,940 --> 00:32:06,139
exactly the same thing you can use just

00:32:03,889 --> 00:32:08,149
with a shortcut here by saying use the

00:32:06,139 --> 00:32:10,490
trait so here I have a trait called

00:32:08,149 --> 00:32:11,960
singleton I have two different classes

00:32:10,490 --> 00:32:13,120
the two different classes have nothing

00:32:11,960 --> 00:32:14,870
to do with each other so they shouldn't

00:32:13,120 --> 00:32:17,210
inherit from each other in any way

00:32:14,870 --> 00:32:20,809
whatsoever and having a based singleton

00:32:17,210 --> 00:32:22,399
class would be idiotic right so there's

00:32:20,809 --> 00:32:24,080
two different classes that happens to

00:32:22,399 --> 00:32:26,570
want to use the same pattern you can

00:32:24,080 --> 00:32:28,850
both say use singleton and they'll both

00:32:26,570 --> 00:32:32,149
have the code that is defined in the

00:32:28,850 --> 00:32:36,250
singleton now these are traits as

00:32:32,149 --> 00:32:39,440
opposed to mix things because we handle

00:32:36,250 --> 00:32:40,940
conflicts or we actually is more I could

00:32:39,440 --> 00:32:42,559
say we don't handle conflicts we give

00:32:40,940 --> 00:32:44,240
you a way of handling the conflict

00:32:42,559 --> 00:32:45,920
instead of just taking the second one

00:32:44,240 --> 00:32:48,260
and saying what this one wins

00:32:45,920 --> 00:32:49,910
like other languages do we say well

00:32:48,260 --> 00:32:52,250
here's a conflict both of these traits

00:32:49,910 --> 00:32:54,560
that you wanted to use implement the

00:32:52,250 --> 00:32:56,210
same methods we can't have that tell me

00:32:54,560 --> 00:32:59,150
which method you want to use so there's

00:32:56,210 --> 00:33:01,280
a conflict resolution syntax that you

00:32:59,150 --> 00:33:02,630
can do when you do use you can say uses

00:33:01,280 --> 00:33:05,420
instead of that that instead of that l

00:33:02,630 --> 00:33:07,400
yes this method to this you only need

00:33:05,420 --> 00:33:11,780
that if you're using multiple traits and

00:33:07,400 --> 00:33:14,300
they might conflict we've also added the

00:33:11,780 --> 00:33:18,590
shorter a syntax so you can just do

00:33:14,300 --> 00:33:22,310
square brackets to create a race speeds

00:33:18,590 --> 00:33:24,110
up your typing a little bit you also

00:33:22,310 --> 00:33:25,760
have function array to referencing so

00:33:24,110 --> 00:33:28,310
you can call a function that returns an

00:33:25,760 --> 00:33:32,300
array and dereference that array right

00:33:28,310 --> 00:33:36,100
on the function call instance method

00:33:32,300 --> 00:33:38,540
calls this basically means that you can

00:33:36,100 --> 00:33:42,530
create an instance of an object and call

00:33:38,540 --> 00:33:46,070
methods on it in the same on the same

00:33:42,530 --> 00:33:48,250
line here now be a little bit careful

00:33:46,070 --> 00:33:50,540
with this stuff because it can get messy

00:33:48,250 --> 00:33:52,670
pretty fast I mean this one you can

00:33:50,540 --> 00:33:56,270
follow right I mean we say we

00:33:52,670 --> 00:33:58,580
instantiate foo here right we set X to

00:33:56,270 --> 00:34:02,750
20 it's going to call set X that's this

00:33:58,580 --> 00:34:06,730
X to 20 right and then we get X back so

00:34:02,750 --> 00:34:10,220
we get 20 out of it right not too bad

00:34:06,730 --> 00:34:13,730
but if we start also adding function

00:34:10,220 --> 00:34:17,260
array dereferencing so now I'm Stan

00:34:13,730 --> 00:34:23,179
shaded food too we set X to an array

00:34:17,260 --> 00:34:25,370
right and we get X and get X is going to

00:34:23,179 --> 00:34:29,659
return the array and then we get array

00:34:25,370 --> 00:34:32,659
index to here right so 0 1 2 so 20 is

00:34:29,659 --> 00:34:34,820
what we're gonna get back but it takes a

00:34:32,659 --> 00:34:38,300
little bit of reading to figure out that

00:34:34,820 --> 00:34:40,490
this is going to return its wonted and

00:34:38,300 --> 00:34:44,169
we can go a little crazier and we can

00:34:40,490 --> 00:34:48,290
add instance methods array dereferencing

00:34:44,169 --> 00:34:50,870
so here we instantiate foo we give it a

00:34:48,290 --> 00:34:53,419
nest of the array and we have our

00:34:50,870 --> 00:34:55,490
shortcut so we have one array inside

00:34:53,419 --> 00:34:58,300
another array here and then we

00:34:55,490 --> 00:35:03,820
dereference it right away

00:34:58,300 --> 00:35:06,190
so array element one is an array itself

00:35:03,820 --> 00:35:08,350
and then index zero on that array is

00:35:06,190 --> 00:35:11,800
four so that's what we're gonna get back

00:35:08,350 --> 00:35:14,410
from this line of code I'd really prefer

00:35:11,800 --> 00:35:19,390
if you split this over a couple of lines

00:35:14,410 --> 00:35:20,950
I know lots of people really want to

00:35:19,390 --> 00:35:22,390
just string everything together and

00:35:20,950 --> 00:35:26,640
write everything in two lines of code

00:35:22,390 --> 00:35:30,040
but I don't consider this readable and

00:35:26,640 --> 00:35:32,230
many many times if you're calling if

00:35:30,040 --> 00:35:35,260
you're doing instance method function

00:35:32,230 --> 00:35:36,490
calls why wasn't that a static call on

00:35:35,260 --> 00:35:37,900
that object why do you need to

00:35:36,490 --> 00:35:40,420
instantiate the object and throw it away

00:35:37,900 --> 00:35:41,560
right away that doesn't make any sense

00:35:40,420 --> 00:35:43,480
to me there are times when the

00:35:41,560 --> 00:35:44,860
constructor does something useful if the

00:35:43,480 --> 00:35:46,810
constructor actually does something you

00:35:44,860 --> 00:35:48,070
need in there yes I can see you might

00:35:46,810 --> 00:35:49,710
need to instantiate it to call the

00:35:48,070 --> 00:35:52,570
constructor and then call another method

00:35:49,710 --> 00:35:53,590
but many times I see people wanting this

00:35:52,570 --> 00:35:55,900
that don't have anything in their

00:35:53,590 --> 00:35:59,590
constructor they just don't understand

00:35:55,900 --> 00:36:02,920
static method calls I guess all right

00:35:59,590 --> 00:36:06,010
another new thing in 5'4 is we are doing

00:36:02,920 --> 00:36:10,500
some magic with dollar this inside

00:36:06,010 --> 00:36:13,570
closures that are defined inside a class

00:36:10,500 --> 00:36:16,750
so here I have a class foo I have a

00:36:13,570 --> 00:36:18,700
function that says return me a printer

00:36:16,750 --> 00:36:20,590
function get printer which returns a

00:36:18,700 --> 00:36:25,630
closure which there's an upper case

00:36:20,590 --> 00:36:30,340
first on this prop right so when I call

00:36:25,630 --> 00:36:32,950
it new foo I give it bar get printer and

00:36:30,340 --> 00:36:35,050
then I call the closure that came back

00:36:32,950 --> 00:36:39,250
and it's gonna uppercase the Beyond bar

00:36:35,050 --> 00:36:43,000
and I get capital bar coming back simple

00:36:39,250 --> 00:36:45,730
enough the one thing that might not be

00:36:43,000 --> 00:36:49,060
completely obvious is that you actually

00:36:45,730 --> 00:36:51,780
now have a function that is outside the

00:36:49,060 --> 00:36:54,810
class that has access to the private

00:36:51,780 --> 00:36:57,040
property prompt

00:36:54,810 --> 00:36:59,890
it's there's a little sort of moon wait

00:36:57,040 --> 00:37:03,360
a second I'm calling a function that can

00:36:59,890 --> 00:37:06,010
see private properties inside the class

00:37:03,360 --> 00:37:07,690
but the idea is since you're the idiot

00:37:06,010 --> 00:37:09,520
who defined this closure inside the

00:37:07,690 --> 00:37:11,300
class then hopefully you knew what

00:37:09,520 --> 00:37:14,570
you're doing and you're leaking

00:37:11,300 --> 00:37:16,150
closure outside we're assuming that was

00:37:14,570 --> 00:37:19,810
your intent

00:37:16,150 --> 00:37:24,560
you can even rebind it so you can say

00:37:19,810 --> 00:37:26,600
start a new fubar be food pickle call

00:37:24,560 --> 00:37:32,840
funk bar like before but then you can

00:37:26,600 --> 00:37:35,360
say I want to bind this funk to the bee

00:37:32,840 --> 00:37:37,550
instance instead of the a instance where

00:37:35,360 --> 00:37:42,800
it came from and now when I call it a

00:37:37,550 --> 00:37:45,980
game it'll now give me a pickle I'm not

00:37:42,800 --> 00:37:48,410
quite sure why you would need that to be

00:37:45,980 --> 00:37:50,450
honest I'm sure some framework folks

00:37:48,410 --> 00:37:52,280
have these long explanations of why this

00:37:50,450 --> 00:37:57,910
is essential they couldn't build their

00:37:52,280 --> 00:38:00,800
framework without it I'm skeptical

00:37:57,910 --> 00:38:02,660
static closures so basically if you

00:38:00,800 --> 00:38:04,490
don't want your closures to have access

00:38:02,660 --> 00:38:07,310
to all of this if you declare them

00:38:04,490 --> 00:38:09,410
static then they will you try to call it

00:38:07,310 --> 00:38:11,780
and you have this insight it you'll get

00:38:09,410 --> 00:38:17,090
a fatal error saying using this we're

00:38:11,780 --> 00:38:21,140
not in the object context we have a

00:38:17,090 --> 00:38:23,690
callable type hint basically if

00:38:21,140 --> 00:38:25,610
something is expecting something that's

00:38:23,690 --> 00:38:28,790
colorful you can type into the collar

00:38:25,610 --> 00:38:32,030
ball type hinting and PHP is a bit of a

00:38:28,790 --> 00:38:34,490
touchy subject basically the rule is

00:38:32,030 --> 00:38:36,980
that we have type hints for things that

00:38:34,490 --> 00:38:40,190
are not interchangeable something like

00:38:36,980 --> 00:38:42,740
cobble anything else you pass it in is

00:38:40,190 --> 00:38:45,830
going to completely break if when you

00:38:42,740 --> 00:38:49,040
try to call it like a function if it's

00:38:45,830 --> 00:38:51,200
not callable now people want scalar type

00:38:49,040 --> 00:38:54,830
hints but the problem is that they'll

00:38:51,200 --> 00:38:57,920
say well int through and I pass it in a

00:38:54,830 --> 00:38:59,600
string containing one two three those

00:38:57,920 --> 00:39:00,860
two are perfectly interchangeable that

00:38:59,600 --> 00:39:04,040
shouldn't break the application just

00:39:00,860 --> 00:39:07,310
because I didn't cast my parameter to an

00:39:04,040 --> 00:39:10,700
int first so we try to stay away from

00:39:07,310 --> 00:39:13,190
type hinting interchangeable parameters

00:39:10,700 --> 00:39:16,480
but we do allow type hints for non

00:39:13,190 --> 00:39:18,800
interchangeable parameters like callable

00:39:16,480 --> 00:39:22,130
we also have a built-in web server in

00:39:18,800 --> 00:39:22,960
five four mostly the goal for this or

00:39:22,130 --> 00:39:25,390
the

00:39:22,960 --> 00:39:27,460
the motivation for this was to fix our

00:39:25,390 --> 00:39:30,190
test cases we have all these weird

00:39:27,460 --> 00:39:32,170
tricks to try to test PHP in a web

00:39:30,190 --> 00:39:36,160
server context we can't rely on the

00:39:32,170 --> 00:39:38,619
user's web server so we run this CGI

00:39:36,160 --> 00:39:40,510
thing that opens this port and we try to

00:39:38,619 --> 00:39:42,910
hit that pretend it's a web server it's

00:39:40,510 --> 00:39:45,069
a huge hack and for testing you want to

00:39:42,910 --> 00:39:48,970
test as close as possible to your

00:39:45,069 --> 00:39:50,740
production environment so this brings us

00:39:48,970 --> 00:39:53,349
a little closer to writing better tests

00:39:50,740 --> 00:39:58,779
please please please don't use it as

00:39:53,349 --> 00:40:00,400
your production web server it's probably

00:39:58,779 --> 00:40:03,609
slow I haven't measured it it's probably

00:40:00,400 --> 00:40:07,630
insecure I haven't checked so just don't

00:40:03,609 --> 00:40:10,650
use it as production please we've added

00:40:07,630 --> 00:40:14,529
binary notation just like you have 0x

00:40:10,650 --> 00:40:17,230
Navas or OB the binary very simple

00:40:14,529 --> 00:40:20,740
feature error messages are slightly

00:40:17,230 --> 00:40:23,140
improved it's hard to even spot the

00:40:20,740 --> 00:40:25,960
difference the top one is the new

00:40:23,140 --> 00:40:28,720
version the bottom one is the PHP 5/3 an

00:40:25,960 --> 00:40:32,819
older version the difference is that we

00:40:28,720 --> 00:40:35,680
now tell you the actual token value

00:40:32,819 --> 00:40:37,029
before we just said unexpected T string

00:40:35,680 --> 00:40:39,130
which is the name of the token in the

00:40:37,029 --> 00:40:42,099
parser that was unexpected in this

00:40:39,130 --> 00:40:43,539
expression here now we show you what the

00:40:42,099 --> 00:40:45,720
token actually is so it helps a little

00:40:43,539 --> 00:40:45,720
bit

00:40:46,230 --> 00:40:54,490
now we have a new warning or new notice

00:40:49,900 --> 00:40:58,059
on a rage of string conversion so I'm

00:40:54,490 --> 00:41:00,099
sure you've seen websites and even your

00:40:58,059 --> 00:41:02,770
own code that'll suddenly spit out array

00:41:00,099 --> 00:41:04,720
right because he tried to echo an array

00:41:02,770 --> 00:41:06,520
directly right and they convert it to

00:41:04,720 --> 00:41:09,369
string and array convert it to a string

00:41:06,520 --> 00:41:12,240
in PHP it just is array which isn't a

00:41:09,369 --> 00:41:14,920
super useful conversion obviously and

00:41:12,240 --> 00:41:16,510
pretty much any time you end up doing

00:41:14,920 --> 00:41:18,250
that conversion it's because there's a

00:41:16,510 --> 00:41:21,880
bug in your code so we now tell you

00:41:18,250 --> 00:41:23,799
about it with a notice we've had quite a

00:41:21,880 --> 00:41:26,619
few complaints about this in people

00:41:23,799 --> 00:41:31,569
testing five four because of things like

00:41:26,619 --> 00:41:35,289
array intersect so array intersect will

00:41:31,569 --> 00:41:36,400
compare to arrays and it'll find all the

00:41:35,289 --> 00:41:38,769
items

00:41:36,400 --> 00:41:41,799
in the first array that also appear in

00:41:38,769 --> 00:41:45,069
the second array so in this case we do

00:41:41,799 --> 00:41:46,690
array intersect of a and B element three

00:41:45,069 --> 00:41:48,999
here is the only one that appears in

00:41:46,690 --> 00:41:50,979
both so it returns that saying this

00:41:48,999 --> 00:41:53,559
particular element which is index two in

00:41:50,979 --> 00:41:55,150
the first array value three is the

00:41:53,559 --> 00:41:58,539
intersection of those two arrays now

00:41:55,150 --> 00:42:00,339
array intersect array diff array a sock

00:41:58,539 --> 00:42:01,719
in two sectors of like four or five

00:42:00,339 --> 00:42:03,999
different functions that do similar

00:42:01,719 --> 00:42:06,130
things they don't work with nest of the

00:42:03,999 --> 00:42:08,170
race they have never worked with nest of

00:42:06,130 --> 00:42:11,380
the race it'd be nice if they did but

00:42:08,170 --> 00:42:13,059
they don't but people still feed nests

00:42:11,380 --> 00:42:17,319
to the race to it so they do stuff like

00:42:13,059 --> 00:42:19,839
this they feed it one two and then three

00:42:17,319 --> 00:42:21,309
is inside a nested array and the game 3

00:42:19,839 --> 00:42:23,319
in the nested array so if this actually

00:42:21,309 --> 00:42:24,670
that would be the intersection this

00:42:23,319 --> 00:42:26,920
array containing 3 would be the

00:42:24,670 --> 00:42:28,930
intersection and people will run this

00:42:26,920 --> 00:42:30,819
code and say well I get the right result

00:42:28,930 --> 00:42:34,749
because what comes out at the end after

00:42:30,819 --> 00:42:37,059
all my notices is actually here right it

00:42:34,749 --> 00:42:39,190
is it found there were some array it got

00:42:37,059 --> 00:42:42,460
gave me the right answer what's with all

00:42:39,190 --> 00:42:44,259
these notices the problem is it's not

00:42:42,460 --> 00:42:46,809
comparing what you think it's comparing

00:42:44,259 --> 00:42:49,450
and I can illustrate that by doing this

00:42:46,809 --> 00:42:52,989
instead of having 3 inside the array I

00:42:49,450 --> 00:42:55,710
put 99 999 in the second array here and

00:42:52,989 --> 00:42:58,269
if we look after all the warnings it

00:42:55,710 --> 00:43:01,269
still tells me that the intersection is

00:42:58,269 --> 00:43:03,519
this array containing a 3 which doesn't

00:43:01,269 --> 00:43:05,410
exist in the second one and to make it

00:43:03,519 --> 00:43:07,890
even more obvious what's happening check

00:43:05,410 --> 00:43:10,210
out the latest this last example right

00:43:07,890 --> 00:43:11,979
so I have in the nest of the array in

00:43:10,210 --> 00:43:14,650
the first one I have a string containing

00:43:11,979 --> 00:43:18,309
the word array in the second one this is

00:43:14,650 --> 00:43:19,859
going to intersect as well right this is

00:43:18,309 --> 00:43:22,089
going to give me the same answer so

00:43:19,859 --> 00:43:24,609
obviously the function is not doing what

00:43:22,089 --> 00:43:28,869
you think it's doing that's why you get

00:43:24,609 --> 00:43:31,150
a notice and we had a bunch of people's

00:43:28,869 --> 00:43:32,499
test environments Drupal's test

00:43:31,150 --> 00:43:36,039
environment completely blew up because

00:43:32,499 --> 00:43:39,039
of this because many many times they

00:43:36,039 --> 00:43:40,930
actually had empty arrays and the test

00:43:39,039 --> 00:43:43,180
was ok because the to the array was

00:43:40,930 --> 00:43:45,249
empty in both cases so it was actually

00:43:43,180 --> 00:43:47,589
correct the answer but it was also

00:43:45,249 --> 00:43:48,610
comparing it to any array or even the

00:43:47,589 --> 00:43:52,660
string array so

00:43:48,610 --> 00:43:54,340
very fragile test they're doing so if

00:43:52,660 --> 00:43:57,220
you start seeing these notices when you

00:43:54,340 --> 00:43:59,500
upgrade to five four check your code

00:43:57,220 --> 00:44:04,900
it's not a bug that's your it's your

00:43:59,500 --> 00:44:07,540
code we have a JSON interface you can

00:44:04,900 --> 00:44:10,390
implement JSON serializable if you want

00:44:07,540 --> 00:44:13,110
some control over what happens when

00:44:10,390 --> 00:44:16,320
someone tries to JSON encode your object

00:44:13,110 --> 00:44:18,280
if you implement this interface and

00:44:16,320 --> 00:44:20,740
implement this method called JSON

00:44:18,280 --> 00:44:21,880
serialize then you have full control of

00:44:20,740 --> 00:44:24,850
what's going to come out if someone

00:44:21,880 --> 00:44:26,980
tries to JSON encode you then we have

00:44:24,850 --> 00:44:31,150
some new options on JSON encode pretty

00:44:26,980 --> 00:44:36,280
print bunch of other things minor

00:44:31,150 --> 00:44:38,620
features and there's a bunch more Devi

00:44:36,280 --> 00:44:41,500
Shafiq at 12 o´clock is gonna go into

00:44:38,620 --> 00:44:43,120
much more depth on all the new things in

00:44:41,500 --> 00:44:48,460
five four if you're interested so go

00:44:43,120 --> 00:44:49,630
check out his talk I guess some small

00:44:48,460 --> 00:44:52,840
list of some of the things there are

00:44:49,630 --> 00:44:57,130
even more than this there's a bunch of

00:44:52,840 --> 00:44:59,620
new things this one here might be

00:44:57,130 --> 00:45:03,400
important to some people that this short

00:44:59,620 --> 00:45:06,280
echo syntax is now always enabled even

00:45:03,400 --> 00:45:09,190
if short tags are off because it doesn't

00:45:06,280 --> 00:45:11,610
actually conflict because the the name

00:45:09,190 --> 00:45:14,500
of the PI tag in this case is equals

00:45:11,610 --> 00:45:17,770
nobody else uses a p.i tag called equals

00:45:14,500 --> 00:45:25,680
so it's not conflicting so it doesn't

00:45:17,770 --> 00:45:25,680
need to be tied to short tags all right

00:45:26,640 --> 00:45:31,440
one of the things I have sort of

00:45:29,610 --> 00:45:34,590
resigned myself to doing this year is

00:45:31,440 --> 00:45:38,700
trying to get some more people to

00:45:34,590 --> 00:45:41,250
contribute to PHP we need folks testing

00:45:38,700 --> 00:45:44,130
release candidates I've been harping on

00:45:41,250 --> 00:45:47,100
people companies to please please PLEASE

00:45:44,130 --> 00:45:49,140
test it really annoys me when they get

00:45:47,100 --> 00:45:51,330
around to upgrading big company gets

00:45:49,140 --> 00:45:54,030
around to upgrading to the latest PHP

00:45:51,330 --> 00:45:55,350
release six months after we released it

00:45:54,030 --> 00:45:59,160
and they start complaining about all the

00:45:55,350 --> 00:46:00,750
things that broke really nice if they

00:45:59,160 --> 00:46:03,210
had complained about these things six

00:46:00,750 --> 00:46:04,980
months before the release not six months

00:46:03,210 --> 00:46:08,790
after because six months after doesn't

00:46:04,980 --> 00:46:11,640
do us much good yes we break stuff we

00:46:08,790 --> 00:46:14,760
don't have very many resources there are

00:46:11,640 --> 00:46:18,390
probably I don't know 15 to 20 of us

00:46:14,760 --> 00:46:21,510
that regularly contribute to sort of the

00:46:18,390 --> 00:46:25,770
the guts of PHP and the core pieces of

00:46:21,510 --> 00:46:27,510
PHP it's not a lot of people right there

00:46:25,770 --> 00:46:31,860
are huge huge companies out there

00:46:27,510 --> 00:46:34,470
relying almost entirely on PHP at the

00:46:31,860 --> 00:46:36,060
very least test our release candidates

00:46:34,470 --> 00:46:38,250
when youi when we made it make it

00:46:36,060 --> 00:46:41,040
available and see if something breaks

00:46:38,250 --> 00:46:44,670
and complain before we release it and

00:46:41,040 --> 00:46:45,780
help us fix things so QA dot PHP done

00:46:44,670 --> 00:46:49,980
that is where the find the release

00:46:45,780 --> 00:46:53,280
candidates it also that you find the

00:46:49,980 --> 00:46:54,630
results of people's make tests runs you

00:46:53,280 --> 00:46:56,220
can check to see if a test that's

00:46:54,630 --> 00:47:00,030
feeling for you has to fail for other

00:46:56,220 --> 00:47:02,190
people track down failed tests for us

00:47:00,030 --> 00:47:03,660
please look at the failures from other

00:47:02,190 --> 00:47:06,300
people look at why it's failing on your

00:47:03,660 --> 00:47:08,280
system and send us a decent bug report

00:47:06,300 --> 00:47:09,870
hopefully with a patch that says here's

00:47:08,280 --> 00:47:13,410
why it failed here's how to fix it

00:47:09,870 --> 00:47:14,130
either fix the code or the test it's not

00:47:13,410 --> 00:47:17,820
that hard

00:47:14,130 --> 00:47:20,880
PHP test cases are on purpose really

00:47:17,820 --> 00:47:23,430
really simple it's not big unit tests

00:47:20,880 --> 00:47:26,340
it's not complicated at all it's a piece

00:47:23,430 --> 00:47:28,830
of PHP code and it's an expect block

00:47:26,340 --> 00:47:31,950
this is the code I want to run and this

00:47:28,830 --> 00:47:34,200
is the expected output that's it you can

00:47:31,950 --> 00:47:36,030
copy and paste the little tiny piece of

00:47:34,200 --> 00:47:37,710
code you think doesn't work you can

00:47:36,030 --> 00:47:39,300
paste them the expected output and

00:47:37,710 --> 00:47:40,420
there's a good test case that says okay

00:47:39,300 --> 00:47:43,510
once this is fixed

00:47:40,420 --> 00:47:45,480
this test should start passing that's

00:47:43,510 --> 00:47:49,300
all there is to it

00:47:45,480 --> 00:47:49,900
file better bug reports please we get a

00:47:49,300 --> 00:47:53,230
lot

00:47:49,900 --> 00:47:57,120
I checked the numbers the other day 60%

00:47:53,230 --> 00:47:59,500
of all reported bug reports are not bugs

00:47:57,120 --> 00:48:02,770
which is kind of crappy to have to go

00:47:59,500 --> 00:48:07,150
through all of those another 30% of them

00:48:02,770 --> 00:48:10,390
you just don't make any sense at all and

00:48:07,150 --> 00:48:13,810
then so we're dealing with less than 10%

00:48:10,390 --> 00:48:15,460
of actual actual actual things that we

00:48:13,810 --> 00:48:17,560
can dig into and have a look and say

00:48:15,460 --> 00:48:20,950
this might actually be a bug that's

00:48:17,560 --> 00:48:22,900
helpful but there's 90% crud that just

00:48:20,950 --> 00:48:24,760
slows us down because we have to read

00:48:22,900 --> 00:48:26,530
sometimes pages and pages of stuff

00:48:24,760 --> 00:48:29,320
you're looking at they're going along

00:48:26,530 --> 00:48:30,670
man this yeah fine then you copy to your

00:48:29,320 --> 00:48:32,470
own server you run it you figure out

00:48:30,670 --> 00:48:34,990
that he has a syntax error somewhere and

00:48:32,470 --> 00:48:36,820
he had warnings turned off or who knows

00:48:34,990 --> 00:48:40,270
it's always something really really

00:48:36,820 --> 00:48:41,140
stupid and when we have so few people

00:48:40,270 --> 00:48:42,790
working on this

00:48:41,140 --> 00:48:48,880
please don't waste our time with dumb

00:48:42,790 --> 00:48:52,750
bug reports G Cove the G cough website

00:48:48,880 --> 00:48:54,670
has nice test coverage if you go to it

00:48:52,750 --> 00:48:58,420
you can go into five four for example

00:48:54,670 --> 00:49:02,410
and you can see coverage in the various

00:48:58,420 --> 00:49:05,320
components should we pick one that

00:49:02,410 --> 00:49:07,540
actually has decent coverage probably

00:49:05,320 --> 00:49:09,430
not how about XF that doesn't have great

00:49:07,540 --> 00:49:12,760
coverage you can dig right into the file

00:49:09,430 --> 00:49:15,520
and you can go through and you can see

00:49:12,760 --> 00:49:18,370
the blue is stuff that's covered by a

00:49:15,520 --> 00:49:20,530
test the rarer stuff that isn't so if

00:49:18,370 --> 00:49:23,290
you're looking for things to write tests

00:49:20,530 --> 00:49:25,390
for you need to be able to read see a

00:49:23,290 --> 00:49:28,960
little bit to the point where you can

00:49:25,390 --> 00:49:31,300
figure out that hey we need an excel

00:49:28,960 --> 00:49:33,880
file that has this particular tag in it

00:49:31,300 --> 00:49:36,130
in order to test if it's handling that

00:49:33,880 --> 00:49:39,490
correctly because there's no test that

00:49:36,130 --> 00:49:42,430
covers these different format tags or

00:49:39,490 --> 00:49:43,810
whatever they are right in here so that

00:49:42,430 --> 00:49:46,619
would be one place to start if you're

00:49:43,810 --> 00:49:51,329
looking for something to do

00:49:46,619 --> 00:49:52,769
Oh back back back the other place if

00:49:51,329 --> 00:49:55,670
you're just looking for something to do

00:49:52,769 --> 00:49:57,779
if you have 15 minutes you're bored

00:49:55,670 --> 00:50:01,769
something I had it the other day go the

00:49:57,779 --> 00:50:08,130
bug step php.net / random it'll give you

00:50:01,769 --> 00:50:09,749
a random open bug and sometimes all we

00:50:08,130 --> 00:50:11,309
need is for someone else to look at the

00:50:09,749 --> 00:50:13,829
code and say well this guy this bug

00:50:11,309 --> 00:50:17,219
report is dumb because he misunderstood

00:50:13,829 --> 00:50:20,759
this other times like this one fo5 ref

00:50:17,219 --> 00:50:22,589
sample on Windows I have no idea what

00:50:20,759 --> 00:50:24,900
that means but if this means something

00:50:22,589 --> 00:50:29,339
to you and you have a Windows

00:50:24,900 --> 00:50:37,349
installation with whatever FFI is I have

00:50:29,339 --> 00:50:41,489
no idea is it all right right right yeah

00:50:37,349 --> 00:50:43,200
yeah yeah and I remember that but so in

00:50:41,489 --> 00:50:45,680
many cases it's not useful you just go

00:50:43,200 --> 00:50:49,950
to the next one right so screw that

00:50:45,680 --> 00:50:54,750
don't do windows next random bug

00:50:49,950 --> 00:50:55,440
also windows screw that I don't do

00:50:54,750 --> 00:51:01,200
windows

00:50:55,440 --> 00:51:04,260
next one windows there might be a

00:51:01,200 --> 00:51:06,360
pattern here alright so on the fourth

00:51:04,260 --> 00:51:09,300
try I got an on Windows one that looks

00:51:06,360 --> 00:51:11,400
like and nobody has commented on it it

00:51:09,300 --> 00:51:12,780
was opened in November so this is one of

00:51:11,400 --> 00:51:15,570
these where if you know a little bit

00:51:12,780 --> 00:51:18,620
about open SSL you might be able to at

00:51:15,570 --> 00:51:21,330
least test this code example he has and

00:51:18,620 --> 00:51:22,590
give us a little bit of input here even

00:51:21,330 --> 00:51:24,300
better look at the code and try to

00:51:22,590 --> 00:51:26,640
figure out how to actually fix the bug

00:51:24,300 --> 00:51:36,480
stuff like this is extremely helpful to

00:51:26,640 --> 00:51:39,540
us all right what else can you do you

00:51:36,480 --> 00:51:41,910
can help us with the documentation we

00:51:39,540 --> 00:51:49,800
have this super awesome new interface

00:51:41,910 --> 00:51:51,810
for editing docbook with a warning you

00:51:49,800 --> 00:51:58,470
can log in as anonymous or I can log in

00:51:51,810 --> 00:52:06,810
as me doesn't matter you'll also notice

00:51:58,470 --> 00:52:09,380
in the documentation if you go anywhere

00:52:06,810 --> 00:52:14,820
in the manual there's a little edit link

00:52:09,380 --> 00:52:17,730
that will take you to the page in here

00:52:14,820 --> 00:52:19,770
in the doc editor so if you're browsing

00:52:17,730 --> 00:52:21,360
the manual you see a mistake you can

00:52:19,770 --> 00:52:24,180
click the edit link it'll take you to

00:52:21,360 --> 00:52:25,650
this doc editor which is a crapload of

00:52:24,180 --> 00:52:27,150
JavaScript that takes a little while to

00:52:25,650 --> 00:52:29,280
load or the slow connection it looks

00:52:27,150 --> 00:52:30,990
like but have a look at it on your own

00:52:29,280 --> 00:52:33,420
browser it's kind of neat you still need

00:52:30,990 --> 00:52:35,400
to know docbook xml but mostly you can

00:52:33,420 --> 00:52:37,980
look at other pages you can see the tags

00:52:35,400 --> 00:52:39,150
it's not that hard it's just XML it's

00:52:37,980 --> 00:52:42,510
not that hard to figure out here's what

00:52:39,150 --> 00:52:44,340
it looks like you can browse through you

00:52:42,510 --> 00:52:46,260
can find the files though this other one

00:52:44,340 --> 00:52:49,500
who's going to take me directly to the

00:52:46,260 --> 00:52:51,650
right page and the dogs anyway play with

00:52:49,500 --> 00:52:51,650
that

00:52:53,669 --> 00:52:59,739
the wiki is a good place to also keep

00:52:57,309 --> 00:53:01,779
up-to-date on what we're discussing the

00:52:59,739 --> 00:53:03,759
various RFC's I'm here in the request

00:53:01,779 --> 00:53:05,259
for comments we have some to-do lists if

00:53:03,759 --> 00:53:09,099
you're looking for bigger things to work

00:53:05,259 --> 00:53:11,349
on have a look at our to Do's in here

00:53:09,099 --> 00:53:15,509
we'll have a bunch of RFC's that look at

00:53:11,349 --> 00:53:15,509
different things that we're discussing

00:53:16,589 --> 00:53:21,069
some that have are in draft mode a bunch

00:53:19,659 --> 00:53:22,329
of things that have been accepted like

00:53:21,069 --> 00:53:24,309
traits went through this whole process

00:53:22,329 --> 00:53:29,349
took about three years because it was a

00:53:24,309 --> 00:53:31,389
huge feature but basically the stephane

00:53:29,349 --> 00:53:35,349
guy sit down and wrote this very nice

00:53:31,389 --> 00:53:37,149
long RFC on how traits should work all

00:53:35,349 --> 00:53:39,429
the different properties of traits it's

00:53:37,149 --> 00:53:40,959
also a great place to go to get really

00:53:39,429 --> 00:53:42,579
in-depth information about some of the

00:53:40,959 --> 00:53:45,609
new features because you have this huge

00:53:42,579 --> 00:53:48,309
document that basically describes how

00:53:45,609 --> 00:53:50,589
this thing what motivated it where it

00:53:48,309 --> 00:53:53,199
came from what problems it solves how

00:53:50,589 --> 00:53:56,679
its solving it and at the bottom there

00:53:53,199 --> 00:53:58,419
will also be always be some discussion

00:53:56,679 --> 00:54:00,339
about drawbacks and things as well

00:53:58,419 --> 00:54:01,059
although I don't see it on this

00:54:00,339 --> 00:54:06,819
particular one

00:54:01,059 --> 00:54:12,939
oh those questions here graphs other

00:54:06,819 --> 00:54:17,499
things anyway so please contribute

00:54:12,939 --> 00:54:20,729
please do what you can to help us not

00:54:17,499 --> 00:54:23,949
waste too much time on other things

00:54:20,729 --> 00:54:26,879
especially in the bug database it would

00:54:23,949 --> 00:54:30,099
be very nice if we got some help there

00:54:26,879 --> 00:54:32,979
also if you're not on 5:3 yet please

00:54:30,099 --> 00:54:35,079
please get on to 5:3 we're not fixing

00:54:32,979 --> 00:54:37,449
bugs like hash dots and all these things

00:54:35,079 --> 00:54:39,759
in 5-2 so if you're still in five on

00:54:37,449 --> 00:54:45,339
five - you're vulnerable to the hash -

00:54:39,759 --> 00:54:47,799
attack today and there are new security

00:54:45,339 --> 00:54:51,279
things coming out in the next month or

00:54:47,799 --> 00:54:52,479
so specifically targeting five - because

00:54:51,279 --> 00:54:53,919
the security guys have been going

00:54:52,479 --> 00:54:56,139
through and looking at things we've been

00:54:53,919 --> 00:54:57,459
changing in five three and five four and

00:54:56,139 --> 00:55:01,029
they go whom that's interesting we don't

00:54:57,459 --> 00:55:03,189
see a commit - five - which is true

00:55:01,029 --> 00:55:05,109
we're not patching five - anymore some

00:55:03,189 --> 00:55:05,920
of the distros will back port security

00:55:05,109 --> 00:55:08,200
fixes and five

00:55:05,920 --> 00:55:10,240
back to five - we don't have the

00:55:08,200 --> 00:55:11,980
bandwidth to go back porting back

00:55:10,240 --> 00:55:12,910
forever in the various versions you guys

00:55:11,980 --> 00:55:15,670
might be running there's still people

00:55:12,910 --> 00:55:17,790
running five zero released like 30 years

00:55:15,670 --> 00:55:17,790
ago

00:55:19,380 --> 00:55:25,510
so get on five three test five four now

00:55:23,020 --> 00:55:26,800
we're just about ready to release it so

00:55:25,510 --> 00:55:29,230
it's a little late in the game even to

00:55:26,800 --> 00:55:33,310
testify for it but better late than

00:55:29,230 --> 00:55:35,260
never and hopefully I've left a little

00:55:33,310 --> 00:55:38,800
bit of time for some questions yes not

00:55:35,260 --> 00:55:41,490
long now so questions folks five minutes

00:55:38,800 --> 00:55:41,490
yes

00:55:52,500 --> 00:55:56,920
okay so the question was I mentioned

00:55:54,940 --> 00:56:00,869
that I preferred the earlier procedural

00:55:56,920 --> 00:56:04,710
style of PHP to versus the much more

00:56:00,869 --> 00:56:07,030
object-oriented PHP four and five style

00:56:04,710 --> 00:56:10,000
and whether some of the pitfalls of

00:56:07,030 --> 00:56:13,270
making things too complicated many times

00:56:10,000 --> 00:56:17,109
I read code where it's just a huge list

00:56:13,270 --> 00:56:20,200
of classes and each class has a big doc

00:56:17,109 --> 00:56:22,420
block and then the class content itself

00:56:20,200 --> 00:56:25,319
the body of a method inside the class is

00:56:22,420 --> 00:56:31,780
like one line like return dollar this

00:56:25,319 --> 00:56:34,030
property right why and you have this

00:56:31,780 --> 00:56:35,589
huge file that's like 800 lines long

00:56:34,030 --> 00:56:37,210
with all these gathers and all these

00:56:35,589 --> 00:56:39,160
little tiny things that do absolutely

00:56:37,210 --> 00:56:40,630
nothing that they're completely

00:56:39,160 --> 00:56:43,180
pointless because you can fetch a

00:56:40,630 --> 00:56:46,119
property from a class without any

00:56:43,180 --> 00:56:48,549
function call right you don't need any

00:56:46,119 --> 00:56:50,319
of that so many times I just I really

00:56:48,549 --> 00:56:52,210
try hard to figure out where's the

00:56:50,319 --> 00:56:53,950
actual code you scroll and you scroll

00:56:52,210 --> 00:56:55,240
you scroll and scroll and finding the

00:56:53,950 --> 00:56:59,290
code and some of these things is

00:56:55,240 --> 00:57:00,849
impossible in a nice straight procedural

00:56:59,290 --> 00:57:02,440
style that same bit of thing that does

00:57:00,849 --> 00:57:05,230
exactly the same thing would probably be

00:57:02,440 --> 00:57:06,880
written in 15 lines of code and some of

00:57:05,230 --> 00:57:11,430
the object-oriented solutions I see is

00:57:06,880 --> 00:57:15,460
like eight files 500 lines of code but

00:57:11,430 --> 00:57:17,380
yeah it's it's more proper correct but

00:57:15,460 --> 00:57:19,480
damn I don't have time for reading all

00:57:17,380 --> 00:57:20,980
that crap usually and it's also so much

00:57:19,480 --> 00:57:22,240
slower because if you really do need

00:57:20,980 --> 00:57:24,160
eight different files with all this

00:57:22,240 --> 00:57:28,030
stuff it's a lot of extra stats it's a

00:57:24,160 --> 00:57:33,940
lot yeah lots of extra work to do so I'm

00:57:28,030 --> 00:57:36,309
also hold I I think about cycles at the

00:57:33,940 --> 00:57:38,559
assembly level right I mean I see I look

00:57:36,309 --> 00:57:40,119
at a piece of code and I think about how

00:57:38,559 --> 00:57:41,799
many cycles is this going to take versus

00:57:40,119 --> 00:57:44,680
a slightly different piece of C code how

00:57:41,799 --> 00:57:46,359
many cycles is that going to take which

00:57:44,680 --> 00:57:47,799
is completely outdated that's stupid

00:57:46,359 --> 00:57:49,210
because computers are so fast these days

00:57:47,799 --> 00:57:52,390
it doesn't matter if it's eight cycles

00:57:49,210 --> 00:57:54,400
or twelve cycles it used to matter it

00:57:52,390 --> 00:57:56,230
matters that matter than the 80s you

00:57:54,400 --> 00:57:57,940
really mattered it doesn't matter so

00:57:56,230 --> 00:58:00,369
much anymore but it's really hard to get

00:57:57,940 --> 00:58:03,400
away from being that close to the

00:58:00,369 --> 00:58:06,480
Machine being that close to the CPU you

00:58:03,400 --> 00:58:08,859
always think about things

00:58:06,480 --> 00:58:09,250
so I can't really argue that my way is

00:58:08,859 --> 00:58:16,559
better

00:58:09,250 --> 00:58:16,559
it's just how I feel about it others yes

00:58:17,280 --> 00:58:25,690
the future of PHP six right now there's

00:58:21,190 --> 00:58:29,920
no PHP six on horizon at all we'll get

00:58:25,690 --> 00:58:33,039
there eventually we went down a Unicode

00:58:29,920 --> 00:58:38,319
path that didn't go too well it got too

00:58:33,039 --> 00:58:40,720
complicated got too heavy got too slow

00:58:38,319 --> 00:58:42,579
we relied too much on ICU I think

00:58:40,720 --> 00:58:44,109
although there isn't really a better

00:58:42,579 --> 00:58:47,049
alternative for doing all the

00:58:44,109 --> 00:58:48,819
complicated Unicode stuff out there but

00:58:47,049 --> 00:58:50,619
one of the problems is ICU is so big and

00:58:48,819 --> 00:58:53,440
heavy we added basically a little bit of

00:58:50,619 --> 00:58:58,450
PHP to ICU versus the other way around

00:58:53,440 --> 00:59:00,730
right lines of code wise ICU is 10x

00:58:58,450 --> 00:59:03,160
probably number lines of code that's in

00:59:00,730 --> 00:59:04,900
PHP so it wasn't adding a little bit of

00:59:03,160 --> 00:59:07,900
ice to you to PHP was the other way

00:59:04,900 --> 00:59:09,819
around and it was just too big a leap

00:59:07,900 --> 00:59:12,369
and also all the changes that needed to

00:59:09,819 --> 00:59:13,630
be made it just didn't work so I'm not

00:59:12,369 --> 00:59:15,609
sure how we're going to attack the

00:59:13,630 --> 00:59:17,950
Unicode problem yet I'm hoping for a

00:59:15,609 --> 00:59:21,160
white knight with a very fast Unicode

00:59:17,950 --> 00:59:23,619
library that's tiny I don't see how

00:59:21,160 --> 00:59:26,140
that's going to happen because the world

00:59:23,619 --> 00:59:30,520
is a complicated place languages are

00:59:26,140 --> 00:59:33,579
stupid it's one of these really really

00:59:30,520 --> 00:59:35,770
really hard problems and there are some

00:59:33,579 --> 00:59:38,890
languages I mean I'm spoken languages

00:59:35,770 --> 00:59:40,630
that are just few people speak them and

00:59:38,890 --> 00:59:43,240
the amount of code that you need to have

00:59:40,630 --> 00:59:44,440
in your system to handle them it'd be

00:59:43,240 --> 00:59:46,080
easier if you just killed off some of

00:59:44,440 --> 00:59:50,680
these

00:59:46,080 --> 00:59:52,510
publications be cheaper that's obviously

00:59:50,680 --> 00:59:55,270
not gonna happen but it's just really

00:59:52,510 --> 00:59:59,460
really hard to get full Unicode in there

00:59:55,270 --> 01:00:02,080
and still maintain speed so I don't know

00:59:59,460 --> 01:00:04,900
we're gonna try to take small steps a

01:00:02,080 --> 01:00:06,250
lot of the features that are in outside

01:00:04,900 --> 01:00:08,740
of Unicode will air every feature

01:00:06,250 --> 01:00:12,010
outside the unicode that will plan for

01:00:08,740 --> 01:00:13,840
PHP six or now in PHP five four will

01:00:12,010 --> 01:00:16,660
have a five five which is going to be

01:00:13,840 --> 01:00:18,310
another step towards things and then

01:00:16,660 --> 01:00:22,119
we'll see at some point we'll have

01:00:18,310 --> 01:00:25,750
enough changes in the pipeline that

01:00:22,119 --> 01:00:27,730
we're big enough to warrant a six but if

01:00:25,750 --> 01:00:29,950
it doesn't include some better approach

01:00:27,730 --> 01:00:32,109
to Unicode I'm not quite sure what the

01:00:29,950 --> 01:00:33,460
point is so we have to see we have made

01:00:32,109 --> 01:00:35,200
some steps to watching the code and I'm

01:00:33,460 --> 01:00:41,170
sure Devi will talk a bit about that

01:00:35,200 --> 01:00:42,430
and your talk no okay okay but there are

01:00:41,170 --> 01:00:46,119
some changes in five four they make

01:00:42,430 --> 01:00:48,130
Unicode for example there's a multi bite

01:00:46,119 --> 01:00:49,720
option for the send engine which you had

01:00:48,130 --> 01:00:52,599
to compile for previously now you can

01:00:49,720 --> 01:00:54,460
set that as a runtime configuration that

01:00:52,599 --> 01:00:57,280
makes the MB string extension much more

01:00:54,460 --> 01:00:59,410
powerful HTML special chars entities and

01:00:57,280 --> 01:01:02,170
a bunch of these functions now work much

01:00:59,410 --> 01:01:05,080
better with Asian character sets for

01:01:02,170 --> 01:01:06,910
example so there's a bunch of fixes that

01:01:05,080 --> 01:01:08,140
a Unicode related that are basically

01:01:06,910 --> 01:01:09,580
taking the existing Unicode

01:01:08,140 --> 01:01:14,290
implementation and making it more

01:01:09,580 --> 01:01:20,130
capable in five four but it's not fully

01:01:14,290 --> 01:01:20,130
in the code yet others

01:01:21,180 --> 01:01:29,040
I can't see you can't see yes the

01:01:27,180 --> 01:01:34,190
stupidest Bubba reports

01:01:29,040 --> 01:01:36,780
I don't know there are so many of them I

01:01:34,190 --> 01:01:38,520
should have a Hall of Fame for these

01:01:36,780 --> 01:01:40,859
things but it's kind of it's also not

01:01:38,520 --> 01:01:43,500
nice to embarrass people and but I mean

01:01:40,859 --> 01:01:45,829
we get lots of just straight syntax

01:01:43,500 --> 01:01:48,390
errors why doesn't this work right and

01:01:45,829 --> 01:01:49,260
they forgot a semicolon they did

01:01:48,390 --> 01:01:54,589
something stupid

01:01:49,260 --> 01:01:57,930
others mix up various types of encoding

01:01:54,589 --> 01:02:00,359
they try the base64 decode something

01:01:57,930 --> 01:02:02,040
that's rot13 or I don't know there's

01:02:00,359 --> 01:02:04,410
there's a bunch of things like that just

01:02:02,040 --> 01:02:07,680
very very basic stuff that if they had

01:02:04,410 --> 01:02:10,829
just thought a little bit about it they

01:02:07,680 --> 01:02:12,150
wouldn't have filed the bug I'm sure

01:02:10,829 --> 01:02:15,650
I'll come up with a better one but I

01:02:12,150 --> 01:02:18,960
can't think of any right now yeah

01:02:15,650 --> 01:02:22,650
scariest bug report those are usually

01:02:18,960 --> 01:02:24,990
the security ones were some of these

01:02:22,650 --> 01:02:27,329
security bug reports they always start

01:02:24,990 --> 01:02:29,099
off very very grand like this breaks

01:02:27,329 --> 01:02:30,809
everything and usually after a while

01:02:29,099 --> 01:02:32,609
thinking about it oh wait a second it

01:02:30,809 --> 01:02:36,020
really only breaks in certain conditions

01:02:32,609 --> 01:02:38,670
and certain systems bla bla bla but I

01:02:36,020 --> 01:02:41,190
mean anything where there's any sort of

01:02:38,670 --> 01:02:43,140
remote code execution possibility like

01:02:41,190 --> 01:02:45,480
when we screwed up our max input the

01:02:43,140 --> 01:02:47,490
virus implementation and 5:39 that

01:02:45,480 --> 01:02:48,900
wasn't good all right those are the

01:02:47,490 --> 01:02:52,200
scary ones because if it's an

01:02:48,900 --> 01:02:54,240
across-the-board every PHP server out

01:02:52,200 --> 01:02:56,520
there has a remote code execution flaw

01:02:54,240 --> 01:02:58,049
that's the scariest one where is just

01:02:56,520 --> 01:03:00,059
good oh man now we have to just drop

01:02:58,049 --> 01:03:01,799
everything and it's not easy because

01:03:00,059 --> 01:03:03,900
it's not our full-time job and yet it

01:03:01,799 --> 01:03:06,599
means that we stopped whatever people

01:03:03,900 --> 01:03:08,490
are actually paying us to do to fix

01:03:06,599 --> 01:03:12,960
stuff so that your web servers are

01:03:08,490 --> 01:03:16,200
secure it's always an interesting

01:03:12,960 --> 01:03:17,880
dilemma sometimes like well screw it I

01:03:16,200 --> 01:03:21,770
have other things to do right now than

01:03:17,880 --> 01:03:33,619
that but it's the way this

01:03:21,770 --> 01:03:35,119
yeah no okay so the question was is the

01:03:33,619 --> 01:03:38,720
built-in web server a step towards

01:03:35,119 --> 01:03:43,070
replacing Apache no never never never

01:03:38,720 --> 01:03:44,480
never I think the best Apache

01:03:43,070 --> 01:03:47,840
replacement if you're looking for an

01:03:44,480 --> 01:03:52,310
Apache replacement is nginx with PHP fpm

01:03:47,840 --> 01:03:55,700
that we introduced in 5-3 PHP fpm is a

01:03:52,310 --> 01:03:57,890
very very nice fast CGI process

01:03:55,700 --> 01:04:00,560
management mechanism that takes all the

01:03:57,890 --> 01:04:02,900
cool things in Apache or that manages

01:04:00,560 --> 01:04:05,420
processes that you can say spin up this

01:04:02,900 --> 01:04:07,970
many Apache children Mac's this many

01:04:05,420 --> 01:04:10,010
minimum this many and have all these

01:04:07,970 --> 01:04:13,070
things all the Apache process management

01:04:10,010 --> 01:04:17,000
has now been embedded inside PHP as a

01:04:13,070 --> 01:04:18,920
PHP 5:3 so to me that's the best

01:04:17,000 --> 01:04:20,830
alternative to Apache if you for some

01:04:18,920 --> 01:04:23,119
reason looking for an alternative Apache

01:04:20,830 --> 01:04:25,240
2.4 just came out as well with a bunch

01:04:23,119 --> 01:04:27,470
of improvements to it and PHP works

01:04:25,240 --> 01:04:30,230
almost perfectly fine with it there's

01:04:27,470 --> 01:04:34,130
one little configuration patch that we

01:04:30,230 --> 01:04:37,820
need to put in but other than that PHP

01:04:34,130 --> 01:04:42,170
and Apache 2.4 works nicely as well so

01:04:37,820 --> 01:04:44,600
try that - am i running out of time is

01:04:42,170 --> 01:04:48,050
that what you're coming tell me ok I

01:04:44,600 --> 01:04:51,200
have a mic are there any plans in the

01:04:48,050 --> 01:04:53,990
future or near future we're gonna add

01:04:51,200 --> 01:04:59,810
some kind of declaring strict data type

01:04:53,990 --> 01:05:01,580
in PHP for example anything else right

01:04:59,810 --> 01:05:03,710
so I touched on so you guys heard that

01:05:01,580 --> 01:05:05,980
right it's the strict typing question no

01:05:03,710 --> 01:05:08,510
PHP is not a strictly typed language

01:05:05,980 --> 01:05:09,710
there are plenty of strictly typed

01:05:08,510 --> 01:05:11,600
languages in the world if you want

01:05:09,710 --> 01:05:13,580
strictly type use a strictly typed

01:05:11,600 --> 01:05:15,080
language language it does make any sense

01:05:13,580 --> 01:05:17,180
because the web is not typed right

01:05:15,080 --> 01:05:19,550
everything that comes across in the web

01:05:17,180 --> 01:05:21,230
request is a string if you have an age

01:05:19,550 --> 01:05:23,390
field there's no way of telling the

01:05:21,230 --> 01:05:25,310
server that this is a numeric field that

01:05:23,390 --> 01:05:26,630
this will always be a number it's always

01:05:25,310 --> 01:05:28,910
going to come across as a string sure

01:05:26,630 --> 01:05:30,470
everything you get everything you start

01:05:28,910 --> 01:05:32,840
to work with is a string and that

01:05:30,470 --> 01:05:34,680
trickles down into all the functions as

01:05:32,840 --> 01:05:37,350
soon as you were introduced strict

01:05:34,680 --> 01:05:39,420
of skillet types like that it'll trickle

01:05:37,350 --> 01:05:41,640
up the call stack which means that you

01:05:39,420 --> 01:05:43,950
now have to cast every time you call the

01:05:41,640 --> 01:05:45,270
library function you have to worry about

01:05:43,950 --> 01:05:48,690
oh crap

01:05:45,270 --> 01:05:50,040
I better cast this right and that

01:05:48,690 --> 01:05:51,540
shouldn't be your problem you should

01:05:50,040 --> 01:05:54,090
just be able to take this dollar age

01:05:51,540 --> 01:05:56,910
post age and feed it to the library

01:05:54,090 --> 01:05:59,640
function that does check age right it

01:05:56,910 --> 01:06:02,330
shouldn't be your job as the caller to

01:05:59,640 --> 01:06:04,890
cast that age to an integer

01:06:02,330 --> 01:06:06,690
you can obviously in the library

01:06:04,890 --> 01:06:08,130
function you can be strict if you want

01:06:06,690 --> 01:06:10,740
there's nothing that prevents you from

01:06:08,130 --> 01:06:12,570
checking the type you just wanted much

01:06:10,740 --> 01:06:14,250
more convenient to check the type but

01:06:12,570 --> 01:06:16,260
you can check the type of the incoming

01:06:14,250 --> 01:06:18,840
parameter and you can throw an error you

01:06:16,260 --> 01:06:21,990
can throw an exceptions I hate this call

01:06:18,840 --> 01:06:24,000
only takes integers and you can be an

01:06:21,990 --> 01:06:26,370
ass about it that way if you really want

01:06:24,000 --> 01:06:27,060
to write nothing stops you from doing

01:06:26,370 --> 01:06:30,540
that today

01:06:27,060 --> 01:06:33,900
we don't want to encourage that for the

01:06:30,540 --> 01:06:37,940
scalar types because it's not needed so

01:06:33,900 --> 01:06:37,940
I don't see that ever happening in PHP

01:06:38,060 --> 01:06:47,850
yeah yeah I just wondered when all which

01:06:44,850 --> 01:06:49,980
point in time did you notice the PHP had

01:06:47,850 --> 01:06:51,960
really taken off from the humble

01:06:49,980 --> 01:06:54,630
beginnings to know and that wow this is

01:06:51,960 --> 01:06:56,850
really going somewhere and also what are

01:06:54,630 --> 01:07:01,710
the key highlights you've seen in its

01:06:56,850 --> 01:07:05,670
evolution along the way right so I mean

01:07:01,710 --> 01:07:08,730
it was pretty obvious very early that

01:07:05,670 --> 01:07:10,200
PHP was something that seemed to just

01:07:08,730 --> 01:07:12,780
kind of click with people they would

01:07:10,200 --> 01:07:15,330
figure out that hey this this kind of

01:07:12,780 --> 01:07:16,800
works this this does this solves a

01:07:15,330 --> 01:07:20,550
problem the way I like solving problems

01:07:16,800 --> 01:07:23,400
and part of that I think was it really

01:07:20,550 --> 01:07:26,130
appealed to the non programmers out

01:07:23,400 --> 01:07:28,980
there that ended up tasked with solving

01:07:26,130 --> 01:07:30,780
the web problem and a lot of programmers

01:07:28,980 --> 01:07:33,900
especially in the early days of the web

01:07:30,780 --> 01:07:35,850
did not take the web seriously this was

01:07:33,900 --> 01:07:38,280
a toy this is a fad it's gonna go away

01:07:35,850 --> 01:07:40,080
this is not serious programming it's

01:07:38,280 --> 01:07:42,990
scripting it's weird not interested

01:07:40,080 --> 01:07:45,780
right so in a lot of companies their

01:07:42,990 --> 01:07:48,120
first foray into the web was hey let's

01:07:45,780 --> 01:07:48,510
put up a website what do we put on it

01:07:48,120 --> 01:07:50,370
well this

01:07:48,510 --> 01:07:53,580
our documentation for our product or our

01:07:50,370 --> 01:07:55,440
services online so where's our technical

01:07:53,580 --> 01:07:57,180
documentation team well that's our team

01:07:55,440 --> 01:08:00,420
of technical writers over here hey you

01:07:57,180 --> 01:08:03,720
guys are now the web team you great word

01:08:00,420 --> 01:08:04,440
save as HTML done right push it to the

01:08:03,720 --> 01:08:07,230
web server

01:08:04,440 --> 01:08:09,000
problem solved next step those

01:08:07,230 --> 01:08:12,090
management comes and says okay well

01:08:09,000 --> 01:08:13,710
let's put our inventory database online

01:08:12,090 --> 01:08:15,960
so people can check if our stuff is

01:08:13,710 --> 01:08:17,790
actually there or our partners our

01:08:15,960 --> 01:08:19,380
clients can log-in so put the login

01:08:17,790 --> 01:08:21,350
system together they can log in they can

01:08:19,380 --> 01:08:24,240
check inventory they can do other stuff

01:08:21,350 --> 01:08:27,330
technical writers go since you're now

01:08:24,240 --> 01:08:27,930
our web team and they look at Microsoft

01:08:27,330 --> 01:08:31,049
Word

01:08:27,930 --> 01:08:36,359
save as authenticated database connected

01:08:31,049 --> 01:08:38,850
website doesn't exist right so they can

01:08:36,359 --> 01:08:41,670
the fact that they could take static web

01:08:38,850 --> 01:08:44,700
pages add a little bit of PHP magic tags

01:08:41,670 --> 01:08:46,770
to it and have those start down towards

01:08:44,700 --> 01:08:48,810
the path and there are many code

01:08:46,770 --> 01:08:50,940
examples just copy and paste a login

01:08:48,810 --> 01:08:52,470
system copy and paste this blob into

01:08:50,940 --> 01:08:54,569
your static HTML file that you saved

01:08:52,470 --> 01:08:56,130
with word hey now it's a yeah we

01:08:54,569 --> 01:08:57,569
authenticate and it connects to a

01:08:56,130 --> 01:08:59,430
database here's the database you

01:08:57,569 --> 01:09:00,930
downloaded from here you install it this

01:08:59,430 --> 01:09:02,759
way you run these three commands and hey

01:09:00,930 --> 01:09:04,350
you're done right you don't really need

01:09:02,759 --> 01:09:05,970
to know what a database is or really

01:09:04,350 --> 01:09:09,690
know what programming was you just

01:09:05,970 --> 01:09:12,450
pasted this blog and once that first

01:09:09,690 --> 01:09:14,339
little thing works is a hey we now have

01:09:12,450 --> 01:09:15,779
a database we now can connect we can do

01:09:14,339 --> 01:09:17,430
all these things then people start to

01:09:15,779 --> 01:09:19,440
learn a little bit they start down the

01:09:17,430 --> 01:09:23,430
path of getting there and I think that's

01:09:19,440 --> 01:09:27,270
what really drove PHP and that's when I

01:09:23,430 --> 01:09:29,220
saw that trend happening I could see

01:09:27,270 --> 01:09:30,450
there was just no stopping this because

01:09:29,220 --> 01:09:31,799
there's a lot more no product

01:09:30,450 --> 01:09:35,900
non-programmers in the world than

01:09:31,799 --> 01:09:37,920
programmers of course now 18 years later

01:09:35,900 --> 01:09:40,980
everywhere every programmer in the world

01:09:37,920 --> 01:09:42,960
is programming web stuff so now there's

01:09:40,980 --> 01:09:44,759
way more hammers out there there are way

01:09:42,960 --> 01:09:47,370
more people interested in this problem

01:09:44,759 --> 01:09:51,810
back then there was nobody interested in

01:09:47,370 --> 01:09:55,220
this problem and highlights along the

01:09:51,810 --> 01:09:55,220
way I don't know

01:09:55,409 --> 01:10:02,639
I don't know I did doesn't it doesn't

01:10:00,090 --> 01:10:04,679
it's not like it's me it's not mine it's

01:10:02,639 --> 01:10:07,139
not sort of personal highlights it's

01:10:04,679 --> 01:10:10,289
more it's a community of folks that have

01:10:07,139 --> 01:10:12,209
built this even in the early days it was

01:10:10,289 --> 01:10:14,999
me and other people solving the problem

01:10:12,209 --> 01:10:18,780
and we sort of collaborated and we built

01:10:14,999 --> 01:10:21,179
this in a collaborative fashion so I was

01:10:18,780 --> 01:10:22,469
just the first guy there right that

01:10:21,179 --> 01:10:25,130
doesn't mean much just like being the

01:10:22,469 --> 01:10:27,329
first guy who shows up to a party

01:10:25,130 --> 01:10:28,800
doesn't make the party you that great it

01:10:27,329 --> 01:10:32,669
kind of makes that guy kind of lame as

01:10:28,800 --> 01:10:34,919
well right the party gets going because

01:10:32,669 --> 01:10:37,619
everybody else joins in and they build

01:10:34,919 --> 01:10:39,119
something great and to me I think that's

01:10:37,619 --> 01:10:40,769
the highlight it's the community that's

01:10:39,119 --> 01:10:43,050
been built around it over the years and

01:10:40,769 --> 01:10:44,939
watching that community grow and spawn

01:10:43,050 --> 01:10:47,219
out into all these different directions

01:10:44,939 --> 01:10:49,769
look at the Drupal community for example

01:10:47,219 --> 01:10:51,269
those guys are crazy they do all kinds

01:10:49,769 --> 01:10:53,249
of weird stuff and they'll have

01:10:51,269 --> 01:10:56,579
conferences like this so they're three

01:10:53,249 --> 01:10:59,719
times bigger of all Drupal guys right

01:10:56,579 --> 01:11:01,769
and then you have tons of other

01:10:59,719 --> 01:11:03,389
communities that have sprung up around

01:11:01,769 --> 01:11:09,469
it so to me that's the big highlight I

01:11:03,389 --> 01:11:09,469
think then okay thank you very much

01:11:21,040 --> 01:11:23,100

YouTube URL: https://www.youtube.com/watch?v=V1O4H5pz-c8


