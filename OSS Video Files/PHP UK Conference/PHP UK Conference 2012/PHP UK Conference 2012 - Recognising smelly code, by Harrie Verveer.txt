Title: PHP UK Conference 2012 - Recognising smelly code, by Harrie Verveer
Publication date: 2012-03-21
Playlist: PHP UK Conference 2012
Description: 
	http://www.phpconference.co.uk/talk/recognising-smelly-code

The way the code of an application is organized greatly influences its maintainability, extendability and testability. Finding flaws in your object-oriented design as early as possible can therefore make the difference between an awesome application and a not so good one. Luckily there are a lot of indicators to look out for while you are coding, telling you that you should probably consider refactoring - often without even looking at your actual code!

This session is an introduction to the most common code smells and some of the related anti-patterns in OO PHP projects. You will learn how to recognize indicators of deeper underlying problems in your application, and how to prevent these problems from happening in the first place.


Harrie Verveer is a senior PHP developer at ibuildings. He has been working with PHP as a professional since 2004, helping ibuildings to become the company that it is today. He is one of the organizers of the Dutch PHP Conference and a regular speaker at conferences and user group events in Europe, where he shares his experience and knowledge gained from working with a wide variety of technologies. In his spare time Harrie enjoys playing guitar, playing tennis and writing reviews of gigs and CDs for the popular 3voor12 website.
Captions: 
	00:00:09,460 --> 00:00:15,200
so good afternoon everybody I am as

00:00:13,660 --> 00:00:17,450
markers

00:00:15,200 --> 00:00:18,920
I marry I work as a software engineer at

00:00:17,450 --> 00:00:21,020
I buildings in the Netherlands I've done

00:00:18,920 --> 00:00:23,599
so for eight years so quite a while by

00:00:21,020 --> 00:00:25,880
now and i'm here today to talk to you

00:00:23,599 --> 00:00:28,040
about code smells but before I do I'd

00:00:25,880 --> 00:00:30,910
like to ask you a question who of you

00:00:28,040 --> 00:00:34,010
guys likes watching Discovery Channel a

00:00:30,910 --> 00:00:35,270
lot of us right I mean Rick geeks we

00:00:34,010 --> 00:00:36,950
like this kind of stuff we don't care

00:00:35,270 --> 00:00:38,960
about stars dancing on the ISIS of

00:00:36,950 --> 00:00:41,239
talent show do stupid things we won't

00:00:38,960 --> 00:00:43,399
like the sciency stuff so we want to

00:00:41,239 --> 00:00:46,250
know how the universe works or how

00:00:43,399 --> 00:00:48,410
toothpicks are made or whatever and so I

00:00:46,250 --> 00:00:50,840
was watching Discovery Channel the other

00:00:48,410 --> 00:00:53,720
day and we are moving this really big

00:00:50,840 --> 00:00:55,940
industrial pipe around was a hundred

00:00:53,720 --> 00:00:57,890
tongue pipe and they used one of those

00:00:55,940 --> 00:01:00,170
to transport it right you might have

00:00:57,890 --> 00:01:01,970
seen one on television ones they come

00:01:00,170 --> 00:01:03,380
with remote controls you can like steal

00:01:01,970 --> 00:01:05,900
them within an inch and it's all really

00:01:03,380 --> 00:01:07,990
cool and so everything went fine and

00:01:05,900 --> 00:01:12,680
there were ten meters from their target

00:01:07,990 --> 00:01:14,869
30 feet no 300 they were almost there

00:01:12,680 --> 00:01:17,960
and then it was a problem two of the

00:01:14,869 --> 00:01:19,670
wheels has had lost air pressure so yeah

00:01:17,960 --> 00:01:22,159
big deal we still have like a million

00:01:19,670 --> 00:01:24,289
left with whom you know let's just

00:01:22,159 --> 00:01:26,869
continue most most people thought and

00:01:24,289 --> 00:01:29,840
actually they were planning to but there

00:01:26,869 --> 00:01:32,539
was one guy saying no it wasn't American

00:01:29,840 --> 00:01:35,359
guy so let's assume his name was bob and

00:01:32,539 --> 00:01:38,299
bob says no we can't continue we have to

00:01:35,359 --> 00:01:40,100
stop here because but they were like

00:01:38,299 --> 00:01:41,569
come on Bob it was just two wheels we

00:01:40,100 --> 00:01:43,459
can just continue the last couple of

00:01:41,569 --> 00:01:45,139
meters and then we will be there is that

00:01:43,459 --> 00:01:46,880
no we have to work in the weekend riaf

00:01:45,139 --> 00:01:48,469
lately do with those tires I mean stuff

00:01:46,880 --> 00:01:51,619
like change your card quite a big deal

00:01:48,469 --> 00:01:54,709
they had to work in the weekend and it

00:01:51,619 --> 00:01:57,350
was horrible so but but still insist it

00:01:54,709 --> 00:02:02,569
had to be done now how would you feel

00:01:57,350 --> 00:02:04,909
about Bob if it was in your team yeah

00:02:02,569 --> 00:02:07,399
probably when as well maybe for making

00:02:04,909 --> 00:02:09,770
you work in the weekend but especially

00:02:07,399 --> 00:02:11,480
is it really is an expert probably he

00:02:09,770 --> 00:02:13,610
knows what can go wrong if you continue

00:02:11,480 --> 00:02:16,760
going with two wheels that aren't

00:02:13,610 --> 00:02:20,840
inflated probably and I thought those

00:02:16,760 --> 00:02:22,400
minor details really apply in BHP's a

00:02:20,840 --> 00:02:24,200
software development as well right I

00:02:22,400 --> 00:02:26,209
mean when you're writing code it can

00:02:24,200 --> 00:02:28,670
also be really small things that can

00:02:26,209 --> 00:02:31,700
indicate really big problems

00:02:28,670 --> 00:02:34,400
in our case not our pipe will fall over

00:02:31,700 --> 00:02:36,110
from the truck in our case our coach

00:02:34,400 --> 00:02:38,110
will become unmaintained ball or we

00:02:36,110 --> 00:02:41,660
can't reuse it anymore we can test it

00:02:38,110 --> 00:02:43,940
and those things are also expensive so

00:02:41,660 --> 00:02:45,709
over the years from growing from a

00:02:43,940 --> 00:02:48,110
junior developer to rather senior

00:02:45,709 --> 00:02:49,550
developer at I buildings I noticed that

00:02:48,110 --> 00:02:54,380
a lot of those goat smells actually

00:02:49,550 --> 00:02:56,209
helped me to grow I went to conference

00:02:54,380 --> 00:02:58,700
and I heard about dependency injection I

00:02:56,209 --> 00:03:00,830
heard about all kinds of code patterns

00:02:58,700 --> 00:03:02,510
that you should use but then when I went

00:03:00,830 --> 00:03:04,190
back to coding I was just typing along

00:03:02,510 --> 00:03:06,590
like I always did and didn't really know

00:03:04,190 --> 00:03:08,989
when to start using them and by watching

00:03:06,590 --> 00:03:11,420
out for these couch smells there were

00:03:08,989 --> 00:03:14,750
actually triggers to make me think am I

00:03:11,420 --> 00:03:16,700
still doing the right thing and so I

00:03:14,750 --> 00:03:18,380
decided to make a list of those couch

00:03:16,700 --> 00:03:20,720
smells the ones that helped me the best

00:03:18,380 --> 00:03:22,069
over the years and show them to you they

00:03:20,720 --> 00:03:24,350
helped me a lot and hopefully they will

00:03:22,069 --> 00:03:27,680
help you as well to write better

00:03:24,350 --> 00:03:30,319
maintainable code so i divide in

00:03:27,680 --> 00:03:34,609
categories and the first category has to

00:03:30,319 --> 00:03:37,760
do with methods functions and according

00:03:34,609 --> 00:03:41,000
to wikipedia costs most real reliable

00:03:37,760 --> 00:03:43,220
source on the internet methods should do

00:03:41,000 --> 00:03:45,380
a specific task and i agree there a

00:03:43,220 --> 00:03:47,959
specific tasks are not six specific

00:03:45,380 --> 00:03:50,540
tasks it should do one shift ask really

00:03:47,959 --> 00:03:53,959
good and i always think that when you

00:03:50,540 --> 00:03:56,120
can split up a method you should there

00:03:53,959 --> 00:03:57,829
should be as small as possible and why

00:03:56,120 --> 00:03:59,420
i'm going to show you i'm going to do a

00:03:57,829 --> 00:04:01,459
little test i'm going to show you a

00:03:59,420 --> 00:04:04,010
piece of code for three seconds and

00:04:01,459 --> 00:04:07,250
after that i will ask you what does this

00:04:04,010 --> 00:04:08,630
go do the phone place a bit small so in

00:04:07,250 --> 00:04:10,850
the back you guys probably don't have a

00:04:08,630 --> 00:04:14,739
chance but in the front you probably

00:04:10,850 --> 00:04:14,739
will so here we go three seconds

00:04:17,430 --> 00:04:27,640
so anyone has a clue it sends emails

00:04:24,730 --> 00:04:31,450
yeah right mr. something else I was

00:04:27,640 --> 00:04:33,550
hoping yeah sure so it does stuff it

00:04:31,450 --> 00:04:37,750
says exactly something with emails and

00:04:33,550 --> 00:04:41,020
does some parsing in there yeah probably

00:04:37,750 --> 00:04:43,810
multiple times indeed so I rewrote I

00:04:41,020 --> 00:04:45,460
reflected this method because of some

00:04:43,810 --> 00:04:46,960
scotia not that I saw and now it

00:04:45,460 --> 00:04:52,540
actually looks like this three seconds

00:04:46,960 --> 00:04:54,640
again we come to watch again right hey

00:04:52,540 --> 00:04:56,440
it gets addresses and it sends out

00:04:54,640 --> 00:04:58,780
emails it's really easy to see right

00:04:56,440 --> 00:05:01,750
it's just and that's how I like my

00:04:58,780 --> 00:05:03,430
methods to be I just wanted to be small

00:05:01,750 --> 00:05:05,800
pieces of code that I can just

00:05:03,430 --> 00:05:08,260
understand by looking at them and so I

00:05:05,800 --> 00:05:10,300
like to split up if we look at the

00:05:08,260 --> 00:05:12,430
original code there are a couple of

00:05:10,300 --> 00:05:14,530
things wrong with it and especially the

00:05:12,430 --> 00:05:18,640
number of levels of nesting is something

00:05:14,530 --> 00:05:20,770
to always keep in mind we see a if

00:05:18,640 --> 00:05:22,600
statement here then for each there and

00:05:20,770 --> 00:05:24,250
if they're gonna for each there then if

00:05:22,600 --> 00:05:25,720
I know you can't read it in the back but

00:05:24,250 --> 00:05:28,180
you will see the sort of Christmas tree

00:05:25,720 --> 00:05:30,700
looking thingy that's not how it's

00:05:28,180 --> 00:05:32,200
supposed to look problem with this

00:05:30,700 --> 00:05:35,470
especially is when you're reading it

00:05:32,200 --> 00:05:38,470
it's really hard to remember what the

00:05:35,470 --> 00:05:39,790
context is of where you're in so you're

00:05:38,470 --> 00:05:41,740
in an if statement so we have to

00:05:39,790 --> 00:05:43,540
remember that okay I'm only going into

00:05:41,740 --> 00:05:46,030
this code if this is true then I'm going

00:05:43,540 --> 00:05:48,400
to look through a certain array so I

00:05:46,030 --> 00:05:50,440
have to ok so here I am in a loop but

00:05:48,400 --> 00:05:52,600
only if that's true then here's another

00:05:50,440 --> 00:05:54,580
if so okay if that's true then as well

00:05:52,600 --> 00:05:56,860
and by the time I'm here I have no idea

00:05:54,580 --> 00:05:59,890
what all the conditions were etc that

00:05:56,860 --> 00:06:01,780
apply to my current situation so

00:05:59,890 --> 00:06:04,660
typically this is something i'd like to

00:06:01,780 --> 00:06:07,510
rewrite one of the easiest thing things

00:06:04,660 --> 00:06:09,040
we can do here we get the database we do

00:06:07,510 --> 00:06:10,660
a database query and we put it in an

00:06:09,040 --> 00:06:13,660
array we can put it in a separate

00:06:10,660 --> 00:06:17,320
function so now it's already a bit

00:06:13,660 --> 00:06:20,230
better and this get received addresses

00:06:17,320 --> 00:06:22,000
method will actually become quite an ND

00:06:20,230 --> 00:06:23,260
maybe later on as well maybe in some

00:06:22,000 --> 00:06:25,419
other piece of the code we will also

00:06:23,260 --> 00:06:27,850
want to see which people are receiving

00:06:25,419 --> 00:06:28,249
emails now we have just one function

00:06:27,850 --> 00:06:31,610
that

00:06:28,249 --> 00:06:33,840
gets them for us so it's an improvement

00:06:31,610 --> 00:06:35,669
now the following thing we can improve

00:06:33,840 --> 00:06:37,520
and I see this a lot in production code

00:06:35,669 --> 00:06:39,840
I always think they're really stupid is

00:06:37,520 --> 00:06:42,090
if statements that cover your entire

00:06:39,840 --> 00:06:44,999
method I don't know if you've ever seen

00:06:42,090 --> 00:06:47,249
them it says here if there are more than

00:06:44,999 --> 00:06:49,139
if there are any addresses we're going

00:06:47,249 --> 00:06:51,090
to do this so basically what we're

00:06:49,139 --> 00:06:53,849
saying is if we haven't got any

00:06:51,090 --> 00:06:55,319
addresses we don't care I mean and

00:06:53,849 --> 00:06:57,960
that's really how it works that's also

00:06:55,319 --> 00:06:59,629
if I'm going to read this later on or in

00:06:57,960 --> 00:07:03,509
the future i'm going to read my own

00:06:59,629 --> 00:07:05,729
method then i'm easily going to see okay

00:07:03,509 --> 00:07:08,490
so we're going to do something but if we

00:07:05,729 --> 00:07:09,750
haven't any adverse addresses I'm no

00:07:08,490 --> 00:07:12,000
longer interested you know we're just

00:07:09,750 --> 00:07:14,490
going to bail out easy to maintain it

00:07:12,000 --> 00:07:16,199
easy to remember now you get my drift

00:07:14,490 --> 00:07:18,150
you can repeat this and keep doing it

00:07:16,199 --> 00:07:20,120
the inside of this for each you can move

00:07:18,150 --> 00:07:23,580
to a separate method and there we are

00:07:20,120 --> 00:07:27,389
almost at the point where we were with

00:07:23,580 --> 00:07:29,849
the the other example slide of course it

00:07:27,389 --> 00:07:32,610
could be optimized further for the in

00:07:29,849 --> 00:07:34,460
this send email methods once again lots

00:07:32,610 --> 00:07:36,839
going on you can split up that as well

00:07:34,460 --> 00:07:39,000
but it's really helpful to keep those

00:07:36,839 --> 00:07:42,839
methods small and split them up when you

00:07:39,000 --> 00:07:44,129
can I'm trying to be I know there are

00:07:42,839 --> 00:07:46,020
some really strict rules as some

00:07:44,129 --> 00:07:50,580
companies about it about how many levels

00:07:46,020 --> 00:07:54,029
of nesting you should apply I tend to

00:07:50,580 --> 00:07:56,490
applied rule that in this for each I

00:07:54,029 --> 00:07:58,469
might have another if statement but only

00:07:56,490 --> 00:08:00,629
if it's like one line of code you know

00:07:58,469 --> 00:08:03,120
so if this isn't true we continue

00:08:00,629 --> 00:08:04,529
something like that that's okay if i'm

00:08:03,120 --> 00:08:06,719
going to write an if statement in here

00:08:04,529 --> 00:08:09,210
or a case or place which statement or

00:08:06,719 --> 00:08:11,310
another loop or whatever that's really

00:08:09,210 --> 00:08:14,159
large then i like to put that in a

00:08:11,310 --> 00:08:16,050
separate method just for readability

00:08:14,159 --> 00:08:17,909
sake i mean then it's just a separate

00:08:16,050 --> 00:08:21,779
method i can understand it again what's

00:08:17,909 --> 00:08:23,009
doing again you have to figure out for

00:08:21,779 --> 00:08:25,439
yourself what happens the best you know

00:08:23,009 --> 00:08:27,389
maybe for you you like to apply some

00:08:25,439 --> 00:08:29,520
other standards but keep in mind that

00:08:27,389 --> 00:08:31,830
nesting certain things in each other is

00:08:29,520 --> 00:08:33,390
a couch smell and you should be thinking

00:08:31,830 --> 00:08:35,130
when you're doing it am i actually doing

00:08:33,390 --> 00:08:37,860
the right thing or should i maybe split

00:08:35,130 --> 00:08:40,860
this up now another thing and this slide

00:08:37,860 --> 00:08:41,830
isn't even intended to be read is long

00:08:40,860 --> 00:08:44,050
methods

00:08:41,830 --> 00:08:46,420
is actually a method from an open source

00:08:44,050 --> 00:08:49,540
project that I found part of the method

00:08:46,420 --> 00:08:51,700
i have to say i simply decrease the font

00:08:49,540 --> 00:08:53,350
size 25 and put it on one slide so this

00:08:51,700 --> 00:08:56,290
is the screenshot of it you Cassie still

00:08:53,350 --> 00:08:59,800
see the bus from our IDE this is really

00:08:56,290 --> 00:09:03,310
like a 400 line method or something like

00:08:59,800 --> 00:09:07,090
that the problem we have here is again

00:09:03,310 --> 00:09:09,790
context if I'm here I don't know what

00:09:07,090 --> 00:09:11,650
context I what what I don't remember

00:09:09,790 --> 00:09:14,920
what happened there or even above that

00:09:11,650 --> 00:09:18,060
and what I haven't covered yet but also

00:09:14,920 --> 00:09:20,620
applies here is testability I mean

00:09:18,060 --> 00:09:23,020
imagine I want to write a unit test that

00:09:20,620 --> 00:09:25,330
tests if this if statement here is doing

00:09:23,020 --> 00:09:26,800
the right thing it's going to be hard i

00:09:25,330 --> 00:09:29,440
go to have to set all the test

00:09:26,800 --> 00:09:31,480
conditions so it boils all the way down

00:09:29,440 --> 00:09:33,760
through the code it gets eventually here

00:09:31,480 --> 00:09:35,860
and then it will do something and i can

00:09:33,760 --> 00:09:40,090
maybe test if it works but it's really a

00:09:35,860 --> 00:09:42,610
pain in the ass to do i actually saw

00:09:40,090 --> 00:09:44,680
such a method once in a and oak source

00:09:42,610 --> 00:09:48,220
library i was using to generate PDF

00:09:44,680 --> 00:09:49,990
files and it had a method to draw a

00:09:48,220 --> 00:09:51,940
table of contents so you could simply

00:09:49,990 --> 00:09:54,910
say draw the table of contents on page 2

00:09:51,940 --> 00:09:57,520
of my PDF and it would do so great but

00:09:54,910 --> 00:09:59,800
it wrote all the numbers in the table of

00:09:57,520 --> 00:10:01,240
contents both for some reason I don't

00:09:59,800 --> 00:10:03,760
know I just wanted to have regular phone

00:10:01,240 --> 00:10:05,890
so I thought well I need to fix it so I

00:10:03,760 --> 00:10:09,040
found out it in the library they had a

00:10:05,890 --> 00:10:11,260
method of hundreds of lines that was

00:10:09,040 --> 00:10:12,970
called draw table of contents and it

00:10:11,260 --> 00:10:16,780
would draw the table of content and

00:10:12,970 --> 00:10:19,720
somewhere let's say here it said set

00:10:16,780 --> 00:10:21,790
phone style be that meant okay the

00:10:19,720 --> 00:10:23,290
letters are going to print bold so in

00:10:21,790 --> 00:10:25,510
order to fix this i mean i'm not going

00:10:23,290 --> 00:10:26,920
to hack into this open source library

00:10:25,510 --> 00:10:29,320
because next time i can't update it

00:10:26,920 --> 00:10:32,110
anymore so I extended it into a child

00:10:29,320 --> 00:10:34,780
class I copied the entire language lines

00:10:32,110 --> 00:10:38,260
method and I actually removed be and

00:10:34,780 --> 00:10:39,400
that fixed my problem you can see what

00:10:38,260 --> 00:10:41,470
the problem there is right so

00:10:39,400 --> 00:10:43,030
maintainability reusability testability

00:10:41,470 --> 00:10:45,880
is an issue when you have really long

00:10:43,030 --> 00:10:48,610
methods again I'm not you have to see

00:10:45,880 --> 00:10:51,850
what works for yourself personally when

00:10:48,610 --> 00:10:53,950
i am typing a method and I get around 10

00:10:51,850 --> 00:10:55,600
lines of code I really start wondering

00:10:53,950 --> 00:10:58,149
hey wait can't hydrolyse

00:10:55,600 --> 00:11:01,569
differently you shouldn't I maybe we

00:10:58,149 --> 00:11:03,940
splitting this up if i get 2 15 lines or

00:11:01,569 --> 00:11:05,470
even 20 then I'm really starting to get

00:11:03,940 --> 00:11:07,839
worried I'm starting to fit well there

00:11:05,470 --> 00:11:10,660
has to be a way how I can split this up

00:11:07,839 --> 00:11:12,339
in a way that it still makes sense again

00:11:10,660 --> 00:11:14,889
maybe longer methods work for you you

00:11:12,339 --> 00:11:16,600
have to find your own standards but

00:11:14,889 --> 00:11:18,910
please pay attention to it and should be

00:11:16,600 --> 00:11:24,579
a trigger a so many lines I need to do

00:11:18,910 --> 00:11:26,800
something maybe another smell that tells

00:11:24,579 --> 00:11:29,589
that your method could be split up and

00:11:26,800 --> 00:11:32,069
you might not think of this as a coach

00:11:29,589 --> 00:11:34,449
Melanie beginning is in line comment

00:11:32,069 --> 00:11:36,880
inline comments in methods I'm not

00:11:34,449 --> 00:11:38,709
talking about descriptive methods

00:11:36,880 --> 00:11:39,910
descriptive commons that actually tell

00:11:38,709 --> 00:11:41,649
you what's going on if you have a

00:11:39,910 --> 00:11:43,300
complex regular expression and you want

00:11:41,649 --> 00:11:45,310
to document it by some common saying

00:11:43,300 --> 00:11:48,910
this is doing that and whatever perfect

00:11:45,310 --> 00:11:51,550
you know that's great of course but if

00:11:48,910 --> 00:11:53,050
you're often you see in these methods

00:11:51,550 --> 00:11:55,180
that actually the inline comments

00:11:53,050 --> 00:11:57,970
separate your method into several pieces

00:11:55,180 --> 00:12:00,430
so it will say are we going to do this

00:11:57,970 --> 00:12:01,899
then five lines further it says now

00:12:00,430 --> 00:12:03,910
we've done that we're going to do this

00:12:01,899 --> 00:12:05,199
finally we're going to look for the

00:12:03,910 --> 00:12:08,380
results and blah blah blah you know

00:12:05,199 --> 00:12:10,630
inline comments or often say such things

00:12:08,380 --> 00:12:12,910
in methods and actually they're all

00:12:10,630 --> 00:12:15,339
saying okay this part of the methods is

00:12:12,910 --> 00:12:18,639
doing this this part is doing that so we

00:12:15,339 --> 00:12:20,259
can already split it up right I know

00:12:18,639 --> 00:12:21,880
it's a bit of stupid example I can think

00:12:20,259 --> 00:12:23,350
of anything real life so here we are

00:12:21,880 --> 00:12:25,389
creating a fish and here we're letting

00:12:23,350 --> 00:12:28,149
it swim so it could have two method

00:12:25,389 --> 00:12:29,949
create fish let it swim and now we have

00:12:28,149 --> 00:12:32,019
to separate it again it's easier to read

00:12:29,949 --> 00:12:33,399
we just see okay this thing creates new

00:12:32,019 --> 00:12:36,040
fish is the other letter fishes swim

00:12:33,399 --> 00:12:37,630
easy to maintain we can override one of

00:12:36,040 --> 00:12:41,709
those methods if we wanted to make swim

00:12:37,630 --> 00:12:43,720
differently whatever so inline comments

00:12:41,709 --> 00:12:46,689
again can be a tell that you should

00:12:43,720 --> 00:12:49,269
split up your method note that the

00:12:46,689 --> 00:12:51,639
comments that you used here you can

00:12:49,269 --> 00:12:54,220
actually reuse in the head of your

00:12:51,639 --> 00:12:56,050
method right so you can now just say

00:12:54,220 --> 00:12:57,730
instead of we're going to do this you

00:12:56,050 --> 00:13:02,170
put that in your method this method does

00:12:57,730 --> 00:13:04,660
X now when it comes to functions are a

00:13:02,170 --> 00:13:08,320
couple of others I want to go over

00:13:04,660 --> 00:13:10,840
quickly an uncommunicative name is all

00:13:08,320 --> 00:13:13,240
so on so public function go is probably

00:13:10,840 --> 00:13:16,600
not the best name for your method should

00:13:13,240 --> 00:13:18,880
be descriptive run is also not really

00:13:16,600 --> 00:13:21,790
helpful most of the times and it should

00:13:18,880 --> 00:13:23,710
oh not be too long I mean it was too

00:13:21,790 --> 00:13:29,260
long then you just keep reading all the

00:13:23,710 --> 00:13:31,450
time imagine that somebody else is going

00:13:29,260 --> 00:13:33,220
to use your object so he's going to type

00:13:31,450 --> 00:13:35,440
your the object name then type an arrow

00:13:33,220 --> 00:13:37,480
sign behind it and your idea will

00:13:35,440 --> 00:13:40,000
probably show a list with methods that

00:13:37,480 --> 00:13:42,010
you can use make sure that these methods

00:13:40,000 --> 00:13:44,770
make sense and i'm not going to read all

00:13:42,010 --> 00:13:46,840
the block documentation at that point

00:13:44,770 --> 00:13:51,670
i'm just going to look for the method

00:13:46,840 --> 00:13:53,050
that makes my fish when I don't know so

00:13:51,670 --> 00:13:55,090
make sure they are communicative that

00:13:53,050 --> 00:13:57,220
people who see the function it means you

00:13:55,090 --> 00:13:59,380
know okay this method is probably doing

00:13:57,220 --> 00:14:01,600
that and then if the enjoyed they can

00:13:59,380 --> 00:14:05,320
still read the comments and and decide

00:14:01,600 --> 00:14:08,050
if it really what they want and finally

00:14:05,320 --> 00:14:11,890
for methods it method can have too many

00:14:08,050 --> 00:14:14,140
input parameters so if you method takes

00:14:11,890 --> 00:14:17,380
like 20 input parameters chances are

00:14:14,140 --> 00:14:19,360
that there's something wrong what often

00:14:17,380 --> 00:14:21,670
happens in this case it actually a bunch

00:14:19,360 --> 00:14:23,650
of those parameters should be bundled

00:14:21,670 --> 00:14:25,810
they're all part of the same thing that

00:14:23,650 --> 00:14:27,790
they're describing so maybe you should

00:14:25,810 --> 00:14:29,530
actually have an object with some

00:14:27,790 --> 00:14:31,360
properties and you should be possibly

00:14:29,530 --> 00:14:34,330
object around rather than all the

00:14:31,360 --> 00:14:37,630
separate parameters doesn't has to be it

00:14:34,330 --> 00:14:40,000
depends on the situation but remember if

00:14:37,630 --> 00:14:42,220
you're typing code and your method has

00:14:40,000 --> 00:14:44,290
like really a lot of parameters you

00:14:42,220 --> 00:14:47,200
should start thinking wait isn't that a

00:14:44,290 --> 00:14:51,160
better way how I can do this is this

00:14:47,200 --> 00:14:55,540
really the way I want to go so there we

00:14:51,160 --> 00:15:00,340
are the co smells for methods with glass

00:14:55,540 --> 00:15:01,690
of water for a moment so watch out for

00:15:00,340 --> 00:15:04,450
the levels of nesting for too long

00:15:01,690 --> 00:15:06,820
methods in line comments can indicate

00:15:04,450 --> 00:15:09,850
that you should split it up also an

00:15:06,820 --> 00:15:12,490
uncommunicative name and if then have

00:15:09,850 --> 00:15:15,880
too many parameters now of course we can

00:15:12,490 --> 00:15:18,400
also have code smells on an object level

00:15:15,880 --> 00:15:20,800
so if we're looking at objects always

00:15:18,400 --> 00:15:22,209
really dark here well the problem you

00:15:20,800 --> 00:15:24,129
can see still my vacuum cleaner

00:15:22,209 --> 00:15:27,790
my elephant mi island on the English

00:15:24,129 --> 00:15:31,149
word for that my tennis racket what's

00:15:27,790 --> 00:15:35,829
the cult what drinking yes it's a heater

00:15:31,149 --> 00:15:37,899
English Wikipedia again says it should

00:15:35,829 --> 00:15:40,540
present and now and that's the thing I

00:15:37,899 --> 00:15:43,929
is important which it should be and now

00:15:40,540 --> 00:15:45,399
so it should be an object or a place or

00:15:43,929 --> 00:15:47,740
a person well in this case it can be

00:15:45,399 --> 00:15:51,029
possibly quite a big thing I think that

00:15:47,740 --> 00:15:54,009
exactly captures how it should be named

00:15:51,029 --> 00:15:55,990
and I like to think when i think about

00:15:54,009 --> 00:15:57,759
classes as that they have certain

00:15:55,990 --> 00:15:59,619
responsibilities this class is

00:15:57,759 --> 00:16:01,269
responsible for this it doesn't know

00:15:59,619 --> 00:16:02,829
anything else in the world it doesn't

00:16:01,269 --> 00:16:05,110
care about anything else in the world it

00:16:02,829 --> 00:16:09,670
knows about this it deals with this

00:16:05,110 --> 00:16:12,279
problem one of the things you often see

00:16:09,670 --> 00:16:13,929
go wrong with objects and classes is

00:16:12,279 --> 00:16:17,649
that they have too many methods and it's

00:16:13,929 --> 00:16:20,079
called the god object smell this is an

00:16:17,649 --> 00:16:24,100
example from framework we created many

00:16:20,079 --> 00:16:25,749
years ago called ATK don't you it isn't

00:16:24,100 --> 00:16:28,959
really developed any more at the moment

00:16:25,749 --> 00:16:31,449
so I but 10 years ago it was a great

00:16:28,959 --> 00:16:33,009
idea right we had a note you could

00:16:31,449 --> 00:16:35,259
extend from and would describe your

00:16:33,009 --> 00:16:37,509
database table so you would say I have a

00:16:35,259 --> 00:16:39,309
note person and then you could add

00:16:37,509 --> 00:16:41,980
attributes to it so you could said I

00:16:39,309 --> 00:16:44,350
have a normal attribute for last name

00:16:41,980 --> 00:16:46,299
the normal a beautiful first name I have

00:16:44,350 --> 00:16:48,730
a date attribute being his birthday and

00:16:46,299 --> 00:16:50,949
then you could just say to the nodes

00:16:48,730 --> 00:16:53,470
show the edit form and it would look

00:16:50,949 --> 00:16:55,149
through all the attributes to show the

00:16:53,470 --> 00:16:56,589
edit form and again for saving every

00:16:55,149 --> 00:16:59,679
attribute was responsible for saving

00:16:56,589 --> 00:17:00,929
himself into the database etc back at

00:16:59,679 --> 00:17:04,209
the time that looked like a great idea

00:17:00,929 --> 00:17:06,130
the problem was that this object became

00:17:04,209 --> 00:17:08,409
really large because it was responsible

00:17:06,130 --> 00:17:10,600
for doing everything those code in there

00:17:08,409 --> 00:17:12,579
to display the ad form the edit form

00:17:10,600 --> 00:17:15,579
that was coding there to store the

00:17:12,579 --> 00:17:17,500
actually actual form there was going

00:17:15,579 --> 00:17:19,510
there to display a data grid and to

00:17:17,500 --> 00:17:21,939
navigate through it using pagination

00:17:19,510 --> 00:17:23,919
searching so this grew out to be an

00:17:21,939 --> 00:17:27,069
object of like four thousand lines and

00:17:23,919 --> 00:17:29,200
became really and maintainable so what

00:17:27,069 --> 00:17:31,480
we then started doing is splitting it up

00:17:29,200 --> 00:17:33,850
so that we actually had an edit form

00:17:31,480 --> 00:17:35,680
renderer and that we would have database

00:17:33,850 --> 00:17:38,020
table object that was responsible

00:17:35,680 --> 00:17:40,000
communicating with the database we have

00:17:38,020 --> 00:17:42,160
data grid object draws data Chris and

00:17:40,000 --> 00:17:44,160
again the paginator might be a separate

00:17:42,160 --> 00:17:46,480
object that you can use somewhere else

00:17:44,160 --> 00:17:49,720
now the advantage of not having

00:17:46,480 --> 00:17:51,490
everything in this note class is that

00:17:49,720 --> 00:17:52,960
you can actually reuse these things if

00:17:51,490 --> 00:17:55,600
you make them extract enough you can

00:17:52,960 --> 00:17:57,940
simply pick this page in Asia to another

00:17:55,600 --> 00:17:59,770
project or maybe to know whether I

00:17:57,940 --> 00:18:01,930
aren't even using the same framework you

00:17:59,770 --> 00:18:06,460
can simply use the logic that you made

00:18:01,930 --> 00:18:08,650
there and reuse it of course there are

00:18:06,460 --> 00:18:13,150
other ways to do this we'll come to that

00:18:08,650 --> 00:18:15,130
later on but having too many methods in

00:18:13,150 --> 00:18:17,200
your class is really a smell and you

00:18:15,130 --> 00:18:19,420
should really be aware isn't there some

00:18:17,200 --> 00:18:20,680
code in here that really should be a

00:18:19,420 --> 00:18:23,490
separate object that I can use

00:18:20,680 --> 00:18:25,690
separately and that might improve

00:18:23,490 --> 00:18:29,530
reusability and maintainability of

00:18:25,690 --> 00:18:32,140
course so that one it can have too many

00:18:29,530 --> 00:18:36,100
methods something else to look out for

00:18:32,140 --> 00:18:38,170
is whenever you type knew it might be

00:18:36,100 --> 00:18:39,850
surprised it's really it looks really

00:18:38,170 --> 00:18:42,280
harmless I mean and we type it every day

00:18:39,850 --> 00:18:45,760
right create new objects of allah is new

00:18:42,280 --> 00:18:47,800
whatever but what you're actually doing

00:18:45,760 --> 00:18:50,830
when you're typing new is your tightly

00:18:47,800 --> 00:18:54,490
coupling two objects together so in this

00:18:50,830 --> 00:18:57,760
case i have a class speaker and here i

00:18:54,490 --> 00:19:00,880
create a new tag with a dark tidal from

00:18:57,760 --> 00:19:02,770
now on speaker and talk are like as they

00:19:00,880 --> 00:19:05,440
like to say tightly coupled they can be

00:19:02,770 --> 00:19:07,090
separated anymore so every time I create

00:19:05,440 --> 00:19:09,340
a speaker it will create a chart for me

00:19:07,090 --> 00:19:11,620
and I have nothing to say about that now

00:19:09,340 --> 00:19:13,720
imagine if I want to test this and I

00:19:11,620 --> 00:19:16,750
want to present it with a mock speaker

00:19:13,720 --> 00:19:18,340
object where mock talk object because I

00:19:16,750 --> 00:19:19,690
don't want to test the dark object I

00:19:18,340 --> 00:19:21,580
just want to test the speaker object

00:19:19,690 --> 00:19:24,460
that's a problem because it's hard coded

00:19:21,580 --> 00:19:27,400
in there I can change it also if maybe

00:19:24,460 --> 00:19:29,320
later on we will have a object called

00:19:27,400 --> 00:19:31,450
tutorial some reason and I want to

00:19:29,320 --> 00:19:33,070
assign the tutorial towards to speak I

00:19:31,450 --> 00:19:35,080
will have a problem because I can't

00:19:33,070 --> 00:19:39,150
anymore those things are tightly coupled

00:19:35,080 --> 00:19:42,070
and can be separated so that's a problem

00:19:39,150 --> 00:19:44,320
solution for this it's called dependency

00:19:42,070 --> 00:19:46,390
injection in my default for it is pretty

00:19:44,320 --> 00:19:48,390
popular lately and one of the simplest

00:19:46,390 --> 00:19:50,760
ways to do that is to you

00:19:48,390 --> 00:19:52,890
constructor injection in that case you

00:19:50,760 --> 00:19:55,350
will simply pass the talk in the

00:19:52,890 --> 00:19:57,120
constructor and set it and already this

00:19:55,350 --> 00:19:58,470
is an improvement it isn't ideal it's

00:19:57,120 --> 00:20:00,570
it's like there's still some flowers

00:19:58,470 --> 00:20:03,390
here but it's already an improvement

00:20:00,570 --> 00:20:05,700
right now we can also have a tutorial

00:20:03,390 --> 00:20:07,770
class extend from the tart class and

00:20:05,700 --> 00:20:10,410
pass that into them and that will also

00:20:07,770 --> 00:20:12,960
work so it's not as tightly coupled as

00:20:10,410 --> 00:20:15,570
it wasn't anymore note that in this case

00:20:12,960 --> 00:20:17,700
it still required to supply a tart when

00:20:15,570 --> 00:20:19,110
you're creating a speaker so if you

00:20:17,700 --> 00:20:22,430
don't want that you can use setter

00:20:19,110 --> 00:20:24,930
injection and in that case you will have

00:20:22,430 --> 00:20:27,390
a separate set of where you can set the

00:20:24,930 --> 00:20:30,060
talk now it's optional so you can create

00:20:27,390 --> 00:20:32,880
a speaker and if you want you can add a

00:20:30,060 --> 00:20:34,530
talk to it it really depends on what you

00:20:32,880 --> 00:20:38,520
want if you want it to be required or

00:20:34,530 --> 00:20:42,060
not it is kind of what you like your

00:20:38,520 --> 00:20:44,460
thing is using dependency injection is a

00:20:42,060 --> 00:20:47,940
good idea and as I said a lot of people

00:20:44,460 --> 00:20:52,430
are moving there however this code again

00:20:47,940 --> 00:20:54,420
might have some other issues with it

00:20:52,430 --> 00:20:56,430
imagine no every time we create a

00:20:54,420 --> 00:20:58,530
speaker we have to first create a talk

00:20:56,430 --> 00:21:00,150
then create the speaker object and then

00:20:58,530 --> 00:21:02,670
assign the target object to the speaker

00:21:00,150 --> 00:21:06,090
objects so that's free lines of code now

00:21:02,670 --> 00:21:08,820
if I'm having more complex objects and

00:21:06,090 --> 00:21:10,500
I'm with more relations this gets bigger

00:21:08,820 --> 00:21:12,540
so every time I'm creating an object and

00:21:10,500 --> 00:21:15,870
type of like 20 lines of code to just

00:21:12,540 --> 00:21:18,060
create a talk or something right so you

00:21:15,870 --> 00:21:20,160
can fix that by using dependency

00:21:18,060 --> 00:21:21,900
injection containers which could look

00:21:20,160 --> 00:21:23,820
something like this just a separate

00:21:21,900 --> 00:21:25,440
method where say it create speak with

00:21:23,820 --> 00:21:27,780
that from now on I can call that method

00:21:25,440 --> 00:21:29,460
and it will automatically get the

00:21:27,780 --> 00:21:33,120
dependencies and assign them to each

00:21:29,460 --> 00:21:37,770
other new trend is and you will see that

00:21:33,120 --> 00:21:40,800
in zend framework to and in lithium and

00:21:37,770 --> 00:21:42,300
in symphony I think all those frameworks

00:21:40,800 --> 00:21:43,410
are moving to dependency injection

00:21:42,300 --> 00:21:45,540
containers where you can actually

00:21:43,410 --> 00:21:48,150
configure this so you can just have a

00:21:45,540 --> 00:21:51,180
configuration file saying okay a speaker

00:21:48,150 --> 00:21:54,450
can have a talk and the talk take this

00:21:51,180 --> 00:21:56,370
as a constructive parameter etc and then

00:21:54,450 --> 00:21:59,700
you can just ask the dependency

00:21:56,370 --> 00:22:01,500
injection container okay now give me a

00:21:59,700 --> 00:22:03,860
speaker and it will give you a speaker

00:22:01,500 --> 00:22:07,409
and so really there isn't any new

00:22:03,860 --> 00:22:09,029
keywords in your code anymore now what

00:22:07,409 --> 00:22:10,649
you use I mean you're all smart people

00:22:09,029 --> 00:22:12,480
and you can all figure out how

00:22:10,649 --> 00:22:16,710
dependency injection works and how to

00:22:12,480 --> 00:22:19,110
get this working etc but typing the new

00:22:16,710 --> 00:22:22,169
keyword is really a signal that you

00:22:19,110 --> 00:22:25,049
maybe should so every time when you type

00:22:22,169 --> 00:22:26,549
in you to create an object think is this

00:22:25,049 --> 00:22:27,870
really what I want do I really want too

00:22:26,549 --> 00:22:29,820
tightly couple these things together

00:22:27,870 --> 00:22:32,039
every time I will get here it will

00:22:29,820 --> 00:22:33,720
automatically create an object shouldn't

00:22:32,039 --> 00:22:34,860
I be doing this differently maybe you

00:22:33,720 --> 00:22:37,260
should maybe you shouldn't that is a

00:22:34,860 --> 00:22:38,909
decision you have to make but when

00:22:37,260 --> 00:22:41,360
you're typing you it is a real coach

00:22:38,909 --> 00:22:45,809
smelling you should pay attention to it

00:22:41,360 --> 00:22:49,700
so that's two it's raining more sure who

00:22:45,809 --> 00:22:49,700
can guess what inappropriate intimacy is

00:22:50,600 --> 00:23:00,809
yes its objects who are accessing each

00:22:54,809 --> 00:23:04,169
other's internals too much so you can

00:23:00,809 --> 00:23:06,240
imagine two objects that an object

00:23:04,169 --> 00:23:07,830
really should only know so much about

00:23:06,240 --> 00:23:09,419
yourself I mean the other thing is

00:23:07,830 --> 00:23:12,269
indecent exposure and that's actually

00:23:09,419 --> 00:23:15,899
quite the opposite so if you have an

00:23:12,269 --> 00:23:19,950
object that has thus indecent exposure

00:23:15,899 --> 00:23:21,299
it actually has public method for

00:23:19,950 --> 00:23:23,039
example it shouldn't be public that

00:23:21,299 --> 00:23:25,740
really should be private and only in

00:23:23,039 --> 00:23:28,350
this own context now this can be used by

00:23:25,740 --> 00:23:30,690
using the one above by another object

00:23:28,350 --> 00:23:32,850
and it will actually start manipulating

00:23:30,690 --> 00:23:34,710
the object in a way it shouldn't even be

00:23:32,850 --> 00:23:36,419
supposed to know if we saw the vacuum

00:23:34,710 --> 00:23:38,549
cleaner in the beginning it has an on

00:23:36,419 --> 00:23:40,769
button and off button those are public

00:23:38,549 --> 00:23:43,230
right i mean it's like public methods

00:23:40,769 --> 00:23:46,110
that we can use to turn it off and on I

00:23:43,230 --> 00:23:48,149
don't want to button turn the engine of

00:23:46,110 --> 00:23:51,360
the vacuum cleaner on or something maybe

00:23:48,149 --> 00:23:52,830
that's all it does well anyway I don't

00:23:51,360 --> 00:23:54,870
want to manipulate the internals of the

00:23:52,830 --> 00:23:56,760
vacuum cleaner I just want to turn it

00:23:54,870 --> 00:23:58,950
off and on and that's it so you should

00:23:56,760 --> 00:24:03,059
really be aware of which methods you

00:23:58,950 --> 00:24:05,070
make public and which not and oh what

00:24:03,059 --> 00:24:08,000
objects should know about each other so

00:24:05,070 --> 00:24:11,190
there's something to take in mind

00:24:08,000 --> 00:24:13,299
finally for objects at least there's the

00:24:11,190 --> 00:24:15,220
primitive obsession and for pH

00:24:13,299 --> 00:24:17,730
p this typically always means that

00:24:15,220 --> 00:24:22,149
you're using arrays where your better

00:24:17,730 --> 00:24:24,809
would be better off using objects you

00:24:22,149 --> 00:24:27,850
can imagine when you have an array with

00:24:24,809 --> 00:24:30,399
people data so so you have a lot of

00:24:27,850 --> 00:24:32,289
people first name last name date of

00:24:30,399 --> 00:24:35,379
birth whatever you have an array with

00:24:32,289 --> 00:24:37,960
arrays with this data in it it might be

00:24:35,379 --> 00:24:41,350
a good idea to actually create a person

00:24:37,960 --> 00:24:43,509
object and use that instead now you

00:24:41,350 --> 00:24:45,159
certainly know which fields are possible

00:24:43,509 --> 00:24:47,169
to set it will have propagators and

00:24:45,159 --> 00:24:49,600
setters and if you make a typo SI SE

00:24:47,169 --> 00:24:51,009
last name without the final or something

00:24:49,600 --> 00:24:53,710
it will throw an error so we will know

00:24:51,009 --> 00:24:56,109
hey something's wrong instead of simply

00:24:53,710 --> 00:25:00,460
array key doesn't exist and the last

00:24:56,109 --> 00:25:04,059
name for some reason never shows up so

00:25:00,460 --> 00:25:06,070
that's something else to take in mind so

00:25:04,059 --> 00:25:07,570
objects can have too many level methods

00:25:06,070 --> 00:25:10,809
watch out for when you're typing new

00:25:07,570 --> 00:25:12,909
because your tightly copy though beware

00:25:10,809 --> 00:25:14,980
of the relation with other objects so

00:25:12,909 --> 00:25:16,690
will it keep in mind what should this

00:25:14,980 --> 00:25:18,580
object know should really be aware of

00:25:16,690 --> 00:25:20,499
the existence of the other object and

00:25:18,580 --> 00:25:23,139
what should know about the other objects

00:25:20,499 --> 00:25:26,169
probably not too much the less the

00:25:23,139 --> 00:25:28,809
better and beware if you're using a lot

00:25:26,169 --> 00:25:30,700
of erase to transfer data around etc ask

00:25:28,809 --> 00:25:36,220
yourself shouldn't I be using objects

00:25:30,700 --> 00:25:40,509
instead to do this now finally we have

00:25:36,220 --> 00:25:44,529
some general code smells which you can

00:25:40,509 --> 00:25:47,739
all probably guess already the one you

00:25:44,529 --> 00:25:50,830
like is duplicated code whenever you

00:25:47,739 --> 00:25:52,389
copy some code you should really ask

00:25:50,830 --> 00:25:54,190
yourself am i doing the right thing I

00:25:52,389 --> 00:25:55,239
mean I really like this example from a

00:25:54,190 --> 00:25:57,759
real-life case this is actually not

00:25:55,239 --> 00:26:00,129
really what I mean but this guy

00:25:57,759 --> 00:26:02,109
obviously copied like the the top number

00:26:00,129 --> 00:26:04,149
of lines from one controller to the

00:26:02,109 --> 00:26:08,499
other and then changed the class names I

00:26:04,149 --> 00:26:10,090
forgot to update the so I got him but

00:26:08,499 --> 00:26:11,919
what I'm really talking about is really

00:26:10,090 --> 00:26:15,549
copying logic so when you're really

00:26:11,919 --> 00:26:17,080
copying me in the internals of a method

00:26:15,549 --> 00:26:19,690
to another method or maybe even to

00:26:17,080 --> 00:26:21,399
another class or whatever you will think

00:26:19,690 --> 00:26:23,859
wait a minute shouldn't those two

00:26:21,399 --> 00:26:25,370
objects maybe be both child objects or

00:26:23,859 --> 00:26:27,800
the same super object that

00:26:25,370 --> 00:26:29,210
this method in it again it depends on

00:26:27,800 --> 00:26:31,850
the situation a you have to look out for

00:26:29,210 --> 00:26:35,420
it but basically whenever you type ctrl

00:26:31,850 --> 00:26:38,210
C or command-c for the Apple users you

00:26:35,420 --> 00:26:39,740
should really start asking wait a minute

00:26:38,210 --> 00:26:42,020
should I really be copying this code

00:26:39,740 --> 00:26:46,160
isn't there a better way to solve this

00:26:42,020 --> 00:26:49,100
problem type embedded in your name I

00:26:46,160 --> 00:26:52,220
never in real life experience this one

00:26:49,100 --> 00:26:53,960
but I saw it when I was researching the

00:26:52,220 --> 00:26:57,020
subject I thought well actually that

00:26:53,960 --> 00:26:59,780
sounds like a good idea I mean if you're

00:26:57,020 --> 00:27:02,480
calling your variable person array and

00:26:59,780 --> 00:27:04,520
your method get' person array that's

00:27:02,480 --> 00:27:06,410
great app until a certain point until

00:27:04,520 --> 00:27:08,360
you discovered well I went to a talk

00:27:06,410 --> 00:27:10,220
from some guy named Harry and he said

00:27:08,360 --> 00:27:12,500
that I shouldn't use a race for persons

00:27:10,220 --> 00:27:14,840
for the shoot to have personal objects

00:27:12,500 --> 00:27:16,670
so get personal race that's returning

00:27:14,840 --> 00:27:18,320
person objects instead of a race now

00:27:16,670 --> 00:27:21,470
well I have a huge problem everywhere I

00:27:18,320 --> 00:27:23,540
where I get these results I have to go

00:27:21,470 --> 00:27:25,790
and change the variable name from person

00:27:23,540 --> 00:27:27,800
array to personal object name or

00:27:25,790 --> 00:27:30,590
something it doesn't make a lot of sense

00:27:27,800 --> 00:27:33,470
actually I think in this case are two

00:27:30,590 --> 00:27:35,450
scenarios the first being the unlikely

00:27:33,470 --> 00:27:37,550
one that's that person is going through

00:27:35,450 --> 00:27:39,770
his entire code base and string replace

00:27:37,550 --> 00:27:42,380
all the person array with person object

00:27:39,770 --> 00:27:45,920
the second option which is I think the

00:27:42,380 --> 00:27:48,350
more probable one is that it will simply

00:27:45,920 --> 00:27:51,190
keep this name and it will say person

00:27:48,350 --> 00:27:54,140
array but it secretly will be an object

00:27:51,190 --> 00:27:56,660
so try avoid that if you can it's

00:27:54,140 --> 00:27:58,880
there's no need for it to put type names

00:27:56,660 --> 00:28:02,000
in there we have four objects in a race

00:27:58,880 --> 00:28:04,220
we have the code hinting for the other

00:28:02,000 --> 00:28:05,840
values I have to don't really care that

00:28:04,220 --> 00:28:10,640
much and then still you can cast them

00:28:05,840 --> 00:28:12,800
and test them etc so that's fine and it

00:28:10,640 --> 00:28:16,420
can be really annoying to fix them all

00:28:12,800 --> 00:28:18,830
and that's no need for it so don't do it

00:28:16,420 --> 00:28:22,280
having this all set you should be aware

00:28:18,830 --> 00:28:25,220
of speculative generality which is a

00:28:22,280 --> 00:28:28,340
hard word to pronounce and it basically

00:28:25,220 --> 00:28:30,890
says that you shouldn't start

00:28:28,340 --> 00:28:33,590
generalizing objects until you really

00:28:30,890 --> 00:28:36,850
have to so if you're have if you have an

00:28:33,590 --> 00:28:39,460
employee class in your code

00:28:36,850 --> 00:28:42,130
don't start off by making that the child

00:28:39,460 --> 00:28:44,020
class of person class while all you have

00:28:42,130 --> 00:28:47,050
is really the employee class that would

00:28:44,020 --> 00:28:49,600
make it just innately complex it would

00:28:47,050 --> 00:28:51,640
just be like adding extra complexity

00:28:49,600 --> 00:28:53,560
well it isn't needed and you can still

00:28:51,640 --> 00:28:56,680
easily fix that later on if you decide

00:28:53,560 --> 00:29:00,240
that you have another object that should

00:28:56,680 --> 00:29:08,380
share some logic with the employee class

00:29:00,240 --> 00:29:12,090
so be aware of that of the so yeah so to

00:29:08,380 --> 00:29:15,640
sum things up here's the entire list of

00:29:12,090 --> 00:29:17,770
things I like to be aware of that and as

00:29:15,640 --> 00:29:19,960
simple as they may seem those really

00:29:17,770 --> 00:29:22,680
helped me over time to become a better

00:29:19,960 --> 00:29:25,600
developer I mean junior developers don't

00:29:22,680 --> 00:29:28,360
care about this when I started off as a

00:29:25,600 --> 00:29:31,000
developer and I saw a 200 line method I

00:29:28,360 --> 00:29:35,440
would just add 200 more to it to it

00:29:31,000 --> 00:29:37,630
right and there are no big deal if when

00:29:35,440 --> 00:29:39,550
you're getting a bit further you might

00:29:37,630 --> 00:29:41,170
recognizing and yeah maybe this method

00:29:39,550 --> 00:29:44,230
should be rewritten because it's getting

00:29:41,170 --> 00:29:46,450
really long and but yeah probably this

00:29:44,230 --> 00:29:50,740
case it will be all right here and then

00:29:46,450 --> 00:29:52,360
there's Bob and Bob will say no this

00:29:50,740 --> 00:29:54,310
isn't right we need to fix this first

00:29:52,360 --> 00:29:56,560
this method is to learn these objects

00:29:54,310 --> 00:29:59,020
are tightly coupled we shouldn't these

00:29:56,560 --> 00:30:01,510
wheels aren't afraid anymore properly so

00:29:59,020 --> 00:30:03,190
if you don't fix them your pipe will

00:30:01,510 --> 00:30:05,790
fall of your truck you don't want it

00:30:03,190 --> 00:30:05,790
thank

00:30:11,210 --> 00:30:17,620
now I finished wait early so we have

00:30:14,330 --> 00:30:20,390
like 15 g of x 50 time for questions

00:30:17,620 --> 00:30:21,890
friend of mine codes really badly and

00:30:20,390 --> 00:30:24,080
I'd like to gain some tips from your

00:30:21,890 --> 00:30:25,700
room your talk yeah have you got any

00:30:24,080 --> 00:30:28,250
tips on how he should reflect to his

00:30:25,700 --> 00:30:29,960
kind well basically when it comes to

00:30:28,250 --> 00:30:33,110
effect did everybody get the question

00:30:29,960 --> 00:30:34,490
since the first part was missing he has

00:30:33,110 --> 00:30:37,399
a friend of girls really badly and he

00:30:34,490 --> 00:30:40,730
asked if he I've any tips to how he can

00:30:37,399 --> 00:30:42,500
refactor his methods the methods right

00:30:40,730 --> 00:30:45,110
especially like if you really learn

00:30:42,500 --> 00:30:47,210
methods I'd say almost all the time when

00:30:45,110 --> 00:30:50,120
you are creating a loop the contents of

00:30:47,210 --> 00:30:51,950
the loop can we can go to a separate

00:30:50,120 --> 00:30:53,630
method most of the time I'm not saying

00:30:51,950 --> 00:30:55,399
always but 9 out of 10 times you can

00:30:53,630 --> 00:30:58,700
like write that into a separate method

00:30:55,399 --> 00:31:01,070
and again the inside of if statements

00:30:58,700 --> 00:31:06,440
same thing they probably can go to a

00:31:01,070 --> 00:31:07,760
other method as well so yeah if I would

00:31:06,440 --> 00:31:09,590
have to give any advice and refer to

00:31:07,760 --> 00:31:11,360
factoring methods I would just say well

00:31:09,590 --> 00:31:12,980
see if you can just pick the entire

00:31:11,360 --> 00:31:16,370
thing that's within the if statement

00:31:12,980 --> 00:31:18,320
into a separate method into a way to

00:31:16,370 --> 00:31:19,909
still make sense and that basically

00:31:18,320 --> 00:31:21,760
applies to all the control structures so

00:31:19,909 --> 00:31:28,309
for each is for us if statements etc

00:31:21,760 --> 00:31:32,360
does that help how do you manage in I

00:31:28,309 --> 00:31:35,360
building a code review when you find

00:31:32,360 --> 00:31:37,700
that peer developers he is a kind of

00:31:35,360 --> 00:31:40,490
code that could smell I'll do what was

00:31:37,700 --> 00:31:43,899
what was the most effective way they use

00:31:40,490 --> 00:31:48,529
my building to communicate and you know

00:31:43,899 --> 00:31:50,990
still still have a yeah access so I was

00:31:48,529 --> 00:31:52,850
kind of expecting this question of

00:31:50,990 --> 00:31:55,100
course there are tools like Coach

00:31:52,850 --> 00:31:58,690
sniffing peach BMS detector which we use

00:31:55,100 --> 00:32:01,520
in our CI environment so you see the

00:31:58,690 --> 00:32:04,100
especially the progress you know so you

00:32:01,520 --> 00:32:06,200
see first of all the mess detector

00:32:04,100 --> 00:32:07,340
indicates well messages just a certain

00:32:06,200 --> 00:32:09,409
number and then you see the number

00:32:07,340 --> 00:32:12,529
increasing suddenly after commit then

00:32:09,409 --> 00:32:13,700
you know probably somebody has screwing

00:32:12,529 --> 00:32:15,320
things up you know they'll probably have

00:32:13,700 --> 00:32:18,679
too much logic within one method or

00:32:15,320 --> 00:32:21,139
whatever I haven't included in this talk

00:32:18,679 --> 00:32:23,299
particularly because I really want to

00:32:21,139 --> 00:32:25,190
talk about writing better code

00:32:23,299 --> 00:32:26,899
rather than and I think those tools are

00:32:25,190 --> 00:32:28,519
really helpful but especially when

00:32:26,899 --> 00:32:31,159
you're working the team and to check it

00:32:28,519 --> 00:32:33,110
afterwards so we do have it in our CI

00:32:31,159 --> 00:32:37,820
environment and we do check it every

00:32:33,110 --> 00:32:39,710
once in a while to be honest we don't go

00:32:37,820 --> 00:32:41,210
there after every commit and see what's

00:32:39,710 --> 00:32:42,590
going on you know show just every once

00:32:41,210 --> 00:32:45,289
in a while we check it and if there's

00:32:42,590 --> 00:32:47,509
some really bizarre numbers then we will

00:32:45,289 --> 00:32:53,840
like drill down to it and see what's

00:32:47,509 --> 00:32:57,440
going wrong and it can be improved now

00:32:53,840 --> 00:32:59,090
exactly so it's mainly automatic here so

00:32:57,440 --> 00:33:02,720
these co smells that I just showed you

00:32:59,090 --> 00:33:04,639
are really for yourself while you're

00:33:02,720 --> 00:33:06,230
coding things you should be looking out

00:33:04,639 --> 00:33:08,090
for for okay here's something going

00:33:06,230 --> 00:33:10,220
wrong probably you should start thinking

00:33:08,090 --> 00:33:11,960
and maybe do differently and you

00:33:10,220 --> 00:33:14,389
automated testing your CI environment

00:33:11,960 --> 00:33:17,119
are just the automated text that really

00:33:14,389 --> 00:33:18,619
just return metrics they probably won't

00:33:17,119 --> 00:33:20,690
recognize all the couch smells that I

00:33:18,619 --> 00:33:23,679
showed you today but things like the

00:33:20,690 --> 00:33:26,029
number of lines in the method or the

00:33:23,679 --> 00:33:28,249
numbers of nesting within a method so

00:33:26,029 --> 00:33:29,779
the complexity of your method those can

00:33:28,249 --> 00:33:33,080
be calculated and those can be really

00:33:29,779 --> 00:33:34,639
good help helpful tools to monitor your

00:33:33,080 --> 00:33:43,340
team and see if everything still going

00:33:34,639 --> 00:33:48,039
the right way hi two quick hello so two

00:33:43,340 --> 00:33:48,039
questions for we know that bob was right

00:33:51,789 --> 00:33:57,259
no we don't know but oh did anyone get

00:33:55,100 --> 00:33:59,480
this question the question was how do we

00:33:57,259 --> 00:34:01,369
know that bob was right i mean maybe we

00:33:59,480 --> 00:34:02,840
should have just moved the truck like 10

00:34:01,369 --> 00:34:04,609
meters further and nothing would have

00:34:02,840 --> 00:34:08,270
happened and of course that's the case

00:34:04,609 --> 00:34:11,569
but I mean Bob doesn't like to just

00:34:08,270 --> 00:34:13,970
teach his friends by saying you have to

00:34:11,569 --> 00:34:15,500
work in the weekend he honestly believes

00:34:13,970 --> 00:34:19,760
that there's something going wrong there

00:34:15,500 --> 00:34:21,200
so he really thinks we should fix it and

00:34:19,760 --> 00:34:23,569
maybe he has seen it going wrong

00:34:21,200 --> 00:34:26,059
somewhere else already or maybe he has

00:34:23,569 --> 00:34:27,500
read about it or seen a presentation on

00:34:26,059 --> 00:34:31,760
it but he knows what the consequences

00:34:27,500 --> 00:34:32,179
are when the wheels aren't afraid I'm

00:34:31,760 --> 00:34:35,899
not sure

00:34:32,179 --> 00:34:37,220
this metaphor book people could I just

00:34:35,899 --> 00:34:43,869
ask the audience can you put your hand

00:34:37,220 --> 00:34:43,869
up if you would employ a bob yeah I

00:34:52,300 --> 00:34:57,050
think that's actually that's a good

00:34:55,129 --> 00:34:59,930
question so we ask that you actually

00:34:57,050 --> 00:35:03,859
measure the performance loss after you r

00:34:59,930 --> 00:35:06,859
affected your code and to be honest for

00:35:03,859 --> 00:35:08,750
me personally I'd say that for me the

00:35:06,859 --> 00:35:10,579
performance in this case is just less

00:35:08,750 --> 00:35:14,450
important than the readability of the

00:35:10,579 --> 00:35:16,040
code so I mean if you're going to

00:35:14,450 --> 00:35:18,319
optimize on that level those are really

00:35:16,040 --> 00:35:21,050
micro optimizations for whether it's

00:35:18,319 --> 00:35:23,329
whether or not to keep everything in one

00:35:21,050 --> 00:35:27,859
method or spend an expensive method call

00:35:23,329 --> 00:35:30,079
that takes no time at all really so now

00:35:27,859 --> 00:35:32,000
in this case I I personally would always

00:35:30,079 --> 00:35:34,099
go for readability and reusability of

00:35:32,000 --> 00:35:36,980
the code etc and then if it's getting

00:35:34,099 --> 00:35:38,329
slower you might add hardware you might

00:35:36,980 --> 00:35:40,430
at cashing that's a different problem

00:35:38,329 --> 00:35:43,250
you can solve in different ways but I

00:35:40,430 --> 00:35:49,940
wouldn't prefer solving that by writing

00:35:43,250 --> 00:35:53,180
500 line methods any more questions in

00:35:49,940 --> 00:35:54,890
the back with regards to the amount of

00:35:53,180 --> 00:35:57,470
code lines that you have in a particular

00:35:54,890 --> 00:35:59,059
method is there a particular number that

00:35:57,470 --> 00:36:01,609
you're more comfortable with or do you

00:35:59,059 --> 00:36:03,500
regard it's just common sense so if it

00:36:01,609 --> 00:36:05,660
runs over to 15 lines and it still gets

00:36:03,500 --> 00:36:07,760
a specific task done and it makes more

00:36:05,660 --> 00:36:10,369
sense with regards to readability which

00:36:07,760 --> 00:36:12,650
is just a common sense cool as when

00:36:10,369 --> 00:36:14,960
you're doing it or is there a specific

00:36:12,650 --> 00:36:17,180
number you try to stick to yes so for me

00:36:14,960 --> 00:36:19,390
for me personally it's just common sense

00:36:17,180 --> 00:36:21,859
really yeah it also depends when I'm

00:36:19,390 --> 00:36:23,569
working in a model for example really

00:36:21,859 --> 00:36:25,369
coding on business logic I'm a bit more

00:36:23,569 --> 00:36:28,190
critical about it then I really wanted

00:36:25,369 --> 00:36:31,190
to be a readable etc but for example in

00:36:28,190 --> 00:36:33,950
controllers in controller actions then

00:36:31,190 --> 00:36:35,690
you often have it's just boilerplate

00:36:33,950 --> 00:36:36,920
code when we're going to fetch some

00:36:35,690 --> 00:36:38,150
objects they are we going to fetch some

00:36:36,920 --> 00:36:39,410
object there we're going to make it

00:36:38,150 --> 00:36:41,210
through that and then assigning to the

00:36:39,410 --> 00:36:42,980
view yeah of course it all still make

00:36:41,210 --> 00:36:44,910
sense and there isn't really

00:36:42,980 --> 00:36:48,720
doesn't make a lot of sense to actually

00:36:44,910 --> 00:36:53,309
split that up into multiple parts so for

00:36:48,720 --> 00:36:56,880
me personally I like say the 10 line of

00:36:53,309 --> 00:36:58,170
59 limit I try to apply somewhere in

00:36:56,880 --> 00:37:00,630
that area i'm starting to get really

00:36:58,170 --> 00:37:02,309
worried and split it up but it can

00:37:00,630 --> 00:37:04,410
depend maybe in a controller when it's

00:37:02,309 --> 00:37:07,380
still good readable etc I'm like yeah

00:37:04,410 --> 00:37:09,630
well okay that's that's I think the most

00:37:07,380 --> 00:37:11,579
important thing I wanted to show in the

00:37:09,630 --> 00:37:15,510
talk is that at least it should make you

00:37:11,579 --> 00:37:17,010
think and now whether you decide well

00:37:15,510 --> 00:37:18,540
this is still just perfectly readable

00:37:17,010 --> 00:37:21,059
and there's no problem with it and I'm

00:37:18,540 --> 00:37:22,260
going to keep it this way or well there

00:37:21,059 --> 00:37:23,520
is a problem with it and I'm going to

00:37:22,260 --> 00:37:25,290
split this up that's really up to you of

00:37:23,520 --> 00:37:28,200
course what you do with that yeah I

00:37:25,290 --> 00:37:30,089
think that's the main really is that if

00:37:28,200 --> 00:37:33,180
it can get out of hand I mean the flip

00:37:30,089 --> 00:37:34,710
side of it is you could have you so many

00:37:33,180 --> 00:37:36,510
methods that people are trying to read

00:37:34,710 --> 00:37:37,619
it and by the time you start off and

00:37:36,510 --> 00:37:39,900
you're trying to work out you know well

00:37:37,619 --> 00:37:42,470
this particular bit of functionality

00:37:39,900 --> 00:37:44,730
does and you end up going down so many

00:37:42,470 --> 00:37:46,589
avenues that you forget where you even

00:37:44,730 --> 00:37:48,210
started you know because obviously if

00:37:46,589 --> 00:37:49,950
people just if you just do it too much

00:37:48,210 --> 00:37:51,359
to the extreme and also the amount of

00:37:49,950 --> 00:37:53,430
time that you're going to spend on doing

00:37:51,359 --> 00:37:56,160
this you know if it's just for the sake

00:37:53,430 --> 00:37:57,750
of just refactoring 20 lines of code you

00:37:56,160 --> 00:37:59,130
know it's just I don't know I don't know

00:37:57,750 --> 00:38:01,200
I don't think it'd be worth it but then

00:37:59,130 --> 00:38:03,180
I guess it's a common sense call exactly

00:38:01,200 --> 00:38:04,650
yeah if you really just trigger your

00:38:03,180 --> 00:38:08,160
common sense but you still have to like

00:38:04,650 --> 00:38:10,589
keep thinking yourself how it should

00:38:08,160 --> 00:38:12,420
work and exert but exactly so it are

00:38:10,589 --> 00:38:15,299
triggers it should trigger you into

00:38:12,420 --> 00:38:18,750
thinking but then still you should just

00:38:15,299 --> 00:38:22,829
use your own common sense to see how you

00:38:18,750 --> 00:38:24,329
solve it if you saw so with regards to

00:38:22,829 --> 00:38:26,280
the naming convention do you have any

00:38:24,329 --> 00:38:28,290
tips how we should name the function

00:38:26,280 --> 00:38:31,079
functions because I noticed that for

00:38:28,290 --> 00:38:33,990
example some IDs they display functions

00:38:31,079 --> 00:38:35,849
in a alphabetic order so if you start

00:38:33,990 --> 00:38:37,890
your function that relates to another

00:38:35,849 --> 00:38:39,630
function maybe extend something else you

00:38:37,890 --> 00:38:43,010
could start with the same keyword and

00:38:39,630 --> 00:38:47,160
thus therefore you see an ID coming next

00:38:43,010 --> 00:38:49,589
to be honest you mean like if I have any

00:38:47,160 --> 00:38:51,299
tips on how to use shooting in your ear

00:38:49,589 --> 00:38:52,829
how do you should name the functions

00:38:51,299 --> 00:38:55,650
that make sense because for example if

00:38:52,829 --> 00:38:56,310
you want like multinational team they

00:38:55,650 --> 00:38:58,260
all seem

00:38:56,310 --> 00:38:59,760
name the functions in the different ways

00:38:58,260 --> 00:39:03,420
and different conventions do you have

00:38:59,760 --> 00:39:06,390
any tips on how to do it it might be

00:39:03,420 --> 00:39:08,550
that so actually I don't I still you

00:39:06,390 --> 00:39:10,410
just use common sense and if I'm getting

00:39:08,550 --> 00:39:14,280
a person object I would call it get

00:39:10,410 --> 00:39:17,940
person or she's dying you know and yet

00:39:14,280 --> 00:39:19,830
for example I think you've got edit edit

00:39:17,940 --> 00:39:22,830
action and then there's edit process

00:39:19,830 --> 00:39:25,440
actions well people seems to name it

00:39:22,830 --> 00:39:27,420
different ways and some is like process

00:39:25,440 --> 00:39:30,150
edit rather than edit process and in the

00:39:27,420 --> 00:39:32,820
ID if you use your code you actually you

00:39:30,150 --> 00:39:35,970
can see it straight away well if your

00:39:32,820 --> 00:39:37,770
idea is set up for that so you can find

00:39:35,970 --> 00:39:41,370
the next function that that's that's

00:39:37,770 --> 00:39:42,900
coming after okay so yeah so there's

00:39:41,370 --> 00:39:46,680
more of the order you put the function

00:39:42,900 --> 00:39:49,020
yes there's an egg so personally what I

00:39:46,680 --> 00:39:50,310
do if I have note both methods that are

00:39:49,020 --> 00:39:52,530
calling each other I would just

00:39:50,310 --> 00:39:54,780
organized in the in the file underneath

00:39:52,530 --> 00:39:59,030
each other rather than on the ordering

00:39:54,780 --> 00:40:03,630
then alphabetically I don't really see

00:39:59,030 --> 00:40:05,310
useful anyway but I would just say if

00:40:03,630 --> 00:40:06,960
you have multiple methods I would still

00:40:05,310 --> 00:40:08,670
just give them names really descriptive

00:40:06,960 --> 00:40:11,550
of what they're doing so this method is

00:40:08,670 --> 00:40:13,620
doing X this method is doin see and then

00:40:11,550 --> 00:40:15,780
if there are all really related to each

00:40:13,620 --> 00:40:17,730
other I just put them in the same file

00:40:15,780 --> 00:40:19,410
underneath each other so when I'm

00:40:17,730 --> 00:40:21,360
reading I can just see oh it's calling

00:40:19,410 --> 00:40:23,070
that and that that's that underneath

00:40:21,360 --> 00:40:26,210
there right so I just put all the

00:40:23,070 --> 00:40:30,150
methods in the same part of the class

00:40:26,210 --> 00:40:32,070
yes hi I was thinking about well

00:40:30,150 --> 00:40:33,930
regarding code refactoring and so on

00:40:32,070 --> 00:40:36,870
could you tell us a bit about your

00:40:33,930 --> 00:40:40,200
approach to unit testing and if there is

00:40:36,870 --> 00:40:41,700
any specific software you used to well

00:40:40,200 --> 00:40:45,320
make sure you've got code coverage

00:40:41,700 --> 00:40:48,480
properly and so on yes so we use phpunit

00:40:45,320 --> 00:40:51,210
to to do unit testing and again we

00:40:48,480 --> 00:40:54,210
integrate in our CI environments to run

00:40:51,210 --> 00:40:55,710
the unit tests and that's another thing

00:40:54,210 --> 00:40:57,480
I think you need to download something

00:40:55,710 --> 00:40:59,220
before it starts working but you can

00:40:57,480 --> 00:41:01,170
have peace per unit just generate these

00:40:59,220 --> 00:41:02,670
code corporate files and then the CI

00:41:01,170 --> 00:41:05,310
environment reach them again and

00:41:02,670 --> 00:41:07,410
displace them so in this way you always

00:41:05,310 --> 00:41:09,270
have like this metric in your CI

00:41:07,410 --> 00:41:12,630
environment for this amount of

00:41:09,270 --> 00:41:14,610
it has been unit tested and you can

00:41:12,630 --> 00:41:17,280
click through it and see in each method

00:41:14,610 --> 00:41:19,170
which each class which lines are

00:41:17,280 --> 00:41:23,190
actually just touched by the Union tests

00:41:19,170 --> 00:41:29,040
and which ones aren't so does it answer

00:41:23,190 --> 00:41:33,300
your question or so yeah please p unit

00:41:29,040 --> 00:41:36,860
them yeah what's going yeah hi how do

00:41:33,300 --> 00:41:41,700
you handle object programming spaghetti

00:41:36,860 --> 00:41:45,180
meaning when the objects are organized

00:41:41,700 --> 00:41:49,920
on such a converted way yeah that you

00:41:45,180 --> 00:41:52,380
end up with object programming too many

00:41:49,920 --> 00:41:54,050
levels oh yeah exactly said that

00:41:52,380 --> 00:41:57,050
something that I also read on twitter

00:41:54,050 --> 00:41:59,250
while ago I mean we all know that

00:41:57,050 --> 00:42:01,950
spaghetti code you know when you have

00:41:59,250 --> 00:42:03,830
like that's the name for these really a

00:42:01,950 --> 00:42:06,150
lot of if statements are for it is etc

00:42:03,830 --> 00:42:07,950
and then I write a bug lasagna code

00:42:06,150 --> 00:42:09,540
which would basically just a lot of

00:42:07,950 --> 00:42:12,170
layers on top of each other so you can

00:42:09,540 --> 00:42:14,370
figure out anymore what's going on

00:42:12,170 --> 00:42:18,720
personally I've never seen it but I

00:42:14,370 --> 00:42:21,780
think if you applied right coding

00:42:18,720 --> 00:42:23,220
patterns and if you would just keep

00:42:21,780 --> 00:42:26,490
using your common sense that that won't

00:42:23,220 --> 00:42:31,170
happen now but again that's probably the

00:42:26,490 --> 00:42:33,600
general thing that was on there don't

00:42:31,170 --> 00:42:35,550
overdo it so don't start making a

00:42:33,600 --> 00:42:37,620
generalized object when there really

00:42:35,550 --> 00:42:39,240
isn't any need for it okay there's a

00:42:37,620 --> 00:42:43,350
there's people tuning outside so i think

00:42:39,240 --> 00:42:44,520
we think we have tomorrow yeah first two

00:42:43,350 --> 00:42:45,750
things I want to say to her thanks to

00:42:44,520 --> 00:42:47,460
Harry and I get very little chance to do

00:42:45,750 --> 00:42:50,090
a poll of PHP developer so first of all

00:42:47,460 --> 00:42:50,090
thank you to Harry

00:42:51,660 --> 00:42:53,720
you

00:43:02,390 --> 00:43:04,450

YouTube URL: https://www.youtube.com/watch?v=wmgnFbsaPvo


