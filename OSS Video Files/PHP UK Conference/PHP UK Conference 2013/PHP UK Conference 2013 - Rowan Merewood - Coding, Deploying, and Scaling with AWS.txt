Title: PHP UK Conference 2013 - Rowan Merewood - Coding, Deploying, and Scaling with AWS
Publication date: 2013-04-22
Playlist: PHP UK Conference 2013
Description: 
	Ten years ago the Amazon Web Services platform was launched and in that time it has dominated and shaped the way cloud computing is viewed. Even after a decade there are still a lot of buzzwords flying around and putting your app in the cloud is often sold as a simple, cure-all solution. So what's really involved? This talk will give you a hands-on walkthrough of building a PHP application stack in AWS. We'll start by deploying a simple Silex application to the Elastic Beanstalk and then add in a selection of other AWS services. This is not a theoretical, text-book session - this is real-life configuration with the cool concepts and tricky hacks that involves.

Sample code: https://github.com/rowan-m/asciigram
Captions: 
	00:00:06,590 --> 00:00:09,130
thank you

00:00:10,350 --> 00:00:18,550
okay if you can't see the the text up

00:00:15,520 --> 00:00:20,650
there there's a whole empty row here

00:00:18,550 --> 00:00:23,320
okay look I know my shirt is offensive

00:00:20,650 --> 00:00:25,000
but please feel free to come closer if

00:00:23,320 --> 00:00:30,490
you can't necessarily read all of the

00:00:25,000 --> 00:00:34,600
examples okay what I'd like to start

00:00:30,490 --> 00:00:37,540
with is when I've seen cloud talks

00:00:34,600 --> 00:00:41,260
before they have been for lack of a

00:00:37,540 --> 00:00:44,100
better word kind of fluffy you're

00:00:41,260 --> 00:00:47,260
allowed to groan there or throw things

00:00:44,100 --> 00:00:49,149
and also people have said complimentary

00:00:47,260 --> 00:00:51,550
things about my presentations and passed

00:00:49,149 --> 00:00:56,079
so I thought the best first step to do

00:00:51,550 --> 00:00:57,520
here would be just to get rid of it and

00:00:56,079 --> 00:00:58,870
what I'm going to do and I'm not going

00:00:57,520 --> 00:01:00,879
to apologize for this we are going to

00:00:58,870 --> 00:01:03,670
spend this entire session on the command

00:01:00,879 --> 00:01:06,130
line so if just looking at code

00:01:03,670 --> 00:01:09,130
constantly is not your thing you may

00:01:06,130 --> 00:01:10,810
have come to the wrong event okay so

00:01:09,130 --> 00:01:13,030
let's get rid of that course without the

00:01:10,810 --> 00:01:16,869
presentation then I can't tell you

00:01:13,030 --> 00:01:18,640
really who I am luckily back in the old

00:01:16,869 --> 00:01:21,700
days before we had Twitter and Facebook

00:01:18,640 --> 00:01:25,119
and PowerPoint and so on there was a way

00:01:21,700 --> 00:01:28,179
of getting to know each other and that's

00:01:25,119 --> 00:01:31,780
what we're going to do here so I'm going

00:01:28,179 --> 00:01:34,300
to invite you to to finger me and and

00:01:31,780 --> 00:01:36,310
what that enables you to do is find out

00:01:34,300 --> 00:01:39,399
some information about me so let's see

00:01:36,310 --> 00:01:40,840
what fingering results in and just in

00:01:39,399 --> 00:01:43,690
case you were worried about the lack of

00:01:40,840 --> 00:01:47,080
visuals I do have a Scott throughout the

00:01:43,690 --> 00:01:49,060
presentation as well okay so this is me

00:01:47,080 --> 00:01:51,069
Romeo would I'm a software engineer and

00:01:49,060 --> 00:01:52,810
technical team lead at the mva group so

00:01:51,069 --> 00:01:55,000
we've got sense here labs UK and vika

00:01:52,810 --> 00:01:56,950
obsession digital you can find me on

00:01:55,000 --> 00:01:59,080
these various social networks rownum on

00:01:56,950 --> 00:02:01,000
twitter ronan on github rownum on

00:01:59,080 --> 00:02:02,170
identica from when we all decided that

00:02:01,000 --> 00:02:04,959
twitter was evil and we were going to

00:02:02,170 --> 00:02:08,890
migrate away from it and you can also

00:02:04,959 --> 00:02:13,030
find me on google+ sorry guys I didn't

00:02:08,890 --> 00:02:15,190
know I I saw profiles google com in in

00:02:13,030 --> 00:02:16,540
Ian's presentation so i will put

00:02:15,190 --> 00:02:19,060
something more sensible in there next

00:02:16,540 --> 00:02:21,230
time you can also take a look at my blog

00:02:19,060 --> 00:02:24,019
on mere warge which I update on

00:02:21,230 --> 00:02:25,640
regular basis now if at the end of this

00:02:24,019 --> 00:02:27,590
presentation you like what you've seen

00:02:25,640 --> 00:02:29,569
and you think maybe you could do a

00:02:27,590 --> 00:02:31,340
better job than me or maybe you would

00:02:29,569 --> 00:02:33,170
like to work with me then we are also

00:02:31,340 --> 00:02:35,060
hiring and we've got offices here in

00:02:33,170 --> 00:02:38,799
London Manchester Liverpool and

00:02:35,060 --> 00:02:41,870
Sheffield as well where I'm based okay

00:02:38,799 --> 00:02:44,030
so the first thing we need to do is we

00:02:41,870 --> 00:02:45,799
need to create a sample project this is

00:02:44,030 --> 00:02:47,900
going to be our little toy project to

00:02:45,799 --> 00:02:49,790
see what it is we're going to do with

00:02:47,900 --> 00:02:52,519
the the Amazon platform and the various

00:02:49,790 --> 00:02:54,440
tools that available to us so the first

00:02:52,519 --> 00:02:56,329
thing I need is a name here and I

00:02:54,440 --> 00:02:59,599
conveniently thought well why not do the

00:02:56,329 --> 00:03:01,730
sample app at the same time as I do my

00:02:59,599 --> 00:03:05,239
kind of long-term developer investment

00:03:01,730 --> 00:03:07,640
plan because i'm a developer obviously

00:03:05,239 --> 00:03:10,340
my kind of long-term pension strategy is

00:03:07,640 --> 00:03:12,200
to make an app that then gets bought by

00:03:10,340 --> 00:03:16,609
Facebook or Google for a ridiculously

00:03:12,200 --> 00:03:19,549
inflated amount of money so I for a ski

00:03:16,609 --> 00:03:20,959
Graham right will learn what this is

00:03:19,549 --> 00:03:25,549
going to do over the course of the next

00:03:20,959 --> 00:03:27,799
45 minutes okay so let's jump into the

00:03:25,549 --> 00:03:29,930
directory and as I imagine you're going

00:03:27,799 --> 00:03:32,030
to see a lot of during this session

00:03:29,930 --> 00:03:33,769
sorry during this conference when I

00:03:32,030 --> 00:03:36,620
start off by just firing up a composer

00:03:33,769 --> 00:03:38,269
dot Jason so before we dive into the AWS

00:03:36,620 --> 00:03:39,680
stuff we just need a simple hello world

00:03:38,269 --> 00:03:42,319
app up and running so that's what we're

00:03:39,680 --> 00:03:45,650
going to put together i'm going to use

00:03:42,319 --> 00:03:47,329
cylex for this so don't worry if you

00:03:45,650 --> 00:03:48,650
don't know cylex this is not the point

00:03:47,329 --> 00:03:52,040
of the talks this is just to illustrate

00:03:48,650 --> 00:03:53,840
the examples right so we're just going

00:03:52,040 --> 00:03:55,880
to ask for Silex and we're going to go

00:03:53,840 --> 00:03:59,239
install that grab all the dependencies

00:03:55,880 --> 00:04:00,500
and install those packages as well you

00:03:59,239 --> 00:04:04,970
can see it pulls in a lot of the

00:04:00,500 --> 00:04:06,709
symphony components India and now the

00:04:04,970 --> 00:04:09,739
first thing we need is we do actually

00:04:06,709 --> 00:04:11,660
need a an application to pull stuff from

00:04:09,739 --> 00:04:14,840
now when I'm testing out a cloud

00:04:11,660 --> 00:04:17,030
platform I often like to make sure that

00:04:14,840 --> 00:04:18,739
I start with the simplest thing possible

00:04:17,030 --> 00:04:20,359
and the simplest thing possible is to

00:04:18,739 --> 00:04:21,859
make sure that you're serving up static

00:04:20,359 --> 00:04:25,280
files so you're definitely just getting

00:04:21,859 --> 00:04:26,599
the code that you're getting so inside

00:04:25,280 --> 00:04:29,419
of here we're going to use the humans

00:04:26,599 --> 00:04:32,750
text one for this simply because it lets

00:04:29,419 --> 00:04:34,340
me actually show the people who have

00:04:32,750 --> 00:04:34,950
helped contribute to this so i did this

00:04:34,340 --> 00:04:37,380
apple why

00:04:34,950 --> 00:04:39,090
ago and I've just had people kind of

00:04:37,380 --> 00:04:41,730
correcting all the horrible horrible

00:04:39,090 --> 00:04:43,620
mistakes I made and also some of the

00:04:41,730 --> 00:04:45,540
guys from the AWS team made some

00:04:43,620 --> 00:04:47,820
contributions to bring it up to the the

00:04:45,540 --> 00:04:49,650
latest version so hopefully the stuff

00:04:47,820 --> 00:04:53,250
I'm showing you is officially approved

00:04:49,650 --> 00:04:55,500
amazon kind of things here okay so we've

00:04:53,250 --> 00:04:57,210
got a text file so if we can serve a

00:04:55,500 --> 00:04:59,400
text file we know we've at least past

00:04:57,210 --> 00:05:01,170
stage one so the next thing I do is

00:04:59,400 --> 00:05:02,910
normally just throw a nympho dot PHP in

00:05:01,170 --> 00:05:04,740
there as well this is quite useful on

00:05:02,910 --> 00:05:06,630
platforms that you don't have access to

00:05:04,740 --> 00:05:09,030
so that you can find out you know what

00:05:06,630 --> 00:05:11,040
modules are being loaded what kind of

00:05:09,030 --> 00:05:13,140
settings are in there and also verify

00:05:11,040 --> 00:05:16,620
that PHP is actually running and being

00:05:13,140 --> 00:05:19,380
processed now the interesting bit let's

00:05:16,620 --> 00:05:21,240
put our index file in here so we're just

00:05:19,380 --> 00:05:23,160
going to do a very simple hello world

00:05:21,240 --> 00:05:25,230
application it's all it does spits out

00:05:23,160 --> 00:05:29,430
the string no HTML no decoration

00:05:25,230 --> 00:05:31,500
anything like that okay and just a

00:05:29,430 --> 00:05:33,000
standard HT access in there so that we

00:05:31,500 --> 00:05:34,410
can actually redirect things the

00:05:33,000 --> 00:05:38,460
controller when we get round having the

00:05:34,410 --> 00:05:41,400
full app let's just take a little recap

00:05:38,460 --> 00:05:43,500
of what we've created in there another

00:05:41,400 --> 00:05:45,420
thing I'm going to say as well I am

00:05:43,500 --> 00:05:48,060
deliberately going to blast through this

00:05:45,420 --> 00:05:50,190
as quickly as possible you should not be

00:05:48,060 --> 00:05:51,780
remembering what I'm doing here my aim

00:05:50,190 --> 00:05:54,780
here is to put these ideas in your head

00:05:51,780 --> 00:05:57,120
so that you remember them and when you

00:05:54,780 --> 00:05:58,500
come to do anything AWS related then

00:05:57,120 --> 00:06:00,090
you'll have that little trigger that you

00:05:58,500 --> 00:06:02,010
did see a tool and you know what kind of

00:06:00,090 --> 00:06:04,230
thing you're looking for also if you're

00:06:02,010 --> 00:06:06,510
interested in this it is all up on

00:06:04,230 --> 00:06:08,370
github and I am around for the rest of

00:06:06,510 --> 00:06:10,170
the conference so if you feel like say

00:06:08,370 --> 00:06:12,240
approaching me at the bar bringing me a

00:06:10,170 --> 00:06:14,850
drink getting me to talk about code then

00:06:12,240 --> 00:06:16,950
I'm totally cool with that in fact

00:06:14,850 --> 00:06:20,490
that's why I'm here I'm here for you

00:06:16,950 --> 00:06:22,140
guys okay so a quick recap of what we've

00:06:20,490 --> 00:06:24,270
got in there then we've got a composer

00:06:22,140 --> 00:06:26,130
Jason we've got all the stuff that is

00:06:24,270 --> 00:06:27,600
pulled in and we've got this incredibly

00:06:26,130 --> 00:06:30,900
simple application that we've dropped in

00:06:27,600 --> 00:06:32,460
the root so first of all we're using 54

00:06:30,900 --> 00:06:34,290
so let's verify that's actually doing

00:06:32,460 --> 00:06:35,820
what we expect locally so going to fire

00:06:34,290 --> 00:06:38,430
up the web server there and that's

00:06:35,820 --> 00:06:40,980
running and now we're just going to curl

00:06:38,430 --> 00:06:45,180
quick request against that you guys

00:06:40,980 --> 00:06:48,560
ready does get exciting oh look at that

00:06:45,180 --> 00:06:53,390
well actually can can everyone read that

00:06:48,560 --> 00:06:56,520
no no yes you guys asleep after lunch

00:06:53,390 --> 00:06:59,730
okay so we've got hello world down here

00:06:56,520 --> 00:07:02,610
I need more life okay otherwise this is

00:06:59,730 --> 00:07:04,200
just not going to work okay so we're

00:07:02,610 --> 00:07:06,930
happy we've got an application that is

00:07:04,200 --> 00:07:08,400
actually serving up something so now

00:07:06,930 --> 00:07:10,440
we're going to get that all committed in

00:07:08,400 --> 00:07:11,790
the git repo so we just ignore the

00:07:10,440 --> 00:07:12,900
vendor directory because that's all the

00:07:11,790 --> 00:07:15,480
stuff that we pulled in from our

00:07:12,900 --> 00:07:18,360
third-party libraries and we just want

00:07:15,480 --> 00:07:19,860
to fire up our repo add the stuff that

00:07:18,360 --> 00:07:22,950
we've got in there it's our basic hello

00:07:19,860 --> 00:07:26,010
world app right we're now ready to push

00:07:22,950 --> 00:07:28,080
this to the cloud the first thing I'm

00:07:26,010 --> 00:07:30,870
going to do is I'm going to show you the

00:07:28,080 --> 00:07:33,300
magic part first so this is the whole

00:07:30,870 --> 00:07:35,250
kind of beautiful dream of you literally

00:07:33,300 --> 00:07:36,720
just push your code up to the cloud and

00:07:35,250 --> 00:07:39,660
it magically runs in the scalable

00:07:36,720 --> 00:07:41,400
environment so this bit is not going to

00:07:39,660 --> 00:07:43,080
make too much sense this is just going

00:07:41,400 --> 00:07:44,430
through the motions to see what happens

00:07:43,080 --> 00:07:46,440
and then we're going to dive into the

00:07:44,430 --> 00:07:49,080
detail of all the tools and the various

00:07:46,440 --> 00:07:51,540
services available to you afterwards so

00:07:49,080 --> 00:07:53,310
first thing we're going to do is you can

00:07:51,540 --> 00:07:56,190
do all of this through the Amazon Web

00:07:53,310 --> 00:07:57,900
API but obviously to do it in this

00:07:56,190 --> 00:07:59,340
format I'd have to use links which isn't

00:07:57,900 --> 00:08:00,600
going to work that well for all of this

00:07:59,340 --> 00:08:02,250
so we're going to do it on the command

00:08:00,600 --> 00:08:03,750
line the benefit of this as well is that

00:08:02,250 --> 00:08:06,390
we can actually script all of these

00:08:03,750 --> 00:08:08,820
things in the long term so grab the

00:08:06,390 --> 00:08:10,560
tools if your wife happens to be playing

00:08:08,820 --> 00:08:12,000
World of Warcraft at the time this can

00:08:10,560 --> 00:08:13,620
take a little while especially if

00:08:12,000 --> 00:08:17,340
Windows is doing something weird to your

00:08:13,620 --> 00:08:19,440
network we're going to unzip that and

00:08:17,340 --> 00:08:22,680
you can see that what we've got inside

00:08:19,440 --> 00:08:24,330
of here is a number of different so the

00:08:22,680 --> 00:08:26,960
the services themselves are in Python

00:08:24,330 --> 00:08:28,560
and you can see that we've got

00:08:26,960 --> 00:08:30,000
executables for all the various

00:08:28,560 --> 00:08:34,229
platforms and they're sort of work on

00:08:30,000 --> 00:08:36,360
windows mac and linux okay first thing

00:08:34,229 --> 00:08:38,099
we need to do then is make sure that

00:08:36,360 --> 00:08:40,410
we've got those tools on our path so

00:08:38,099 --> 00:08:43,169
we've got to tool sets in here we've got

00:08:40,410 --> 00:08:44,520
/ eb which is the kind of much more

00:08:43,169 --> 00:08:46,140
integrated one that we're going to look

00:08:44,520 --> 00:08:48,740
at first and then we'll go into the nuts

00:08:46,140 --> 00:08:50,910
and bolts of what's going on behind that

00:08:48,740 --> 00:08:52,440
we've got a bee in there so all our

00:08:50,910 --> 00:08:55,170
commands are going to go through this eb

00:08:52,440 --> 00:08:58,290
shortcut the tools are actually really

00:08:55,170 --> 00:08:59,910
nicely documented in line so once you've

00:08:58,290 --> 00:09:01,560
got the tool set down and you're running

00:08:59,910 --> 00:09:02,970
it i actually found there is very

00:09:01,560 --> 00:09:04,590
need to go back to the Amazon website

00:09:02,970 --> 00:09:06,240
because most of the documentation is

00:09:04,590 --> 00:09:08,460
just there in the tools themselves which

00:09:06,240 --> 00:09:12,029
is very cool so just to verify that's

00:09:08,460 --> 00:09:13,710
actually doing what we expect cool we've

00:09:12,029 --> 00:09:16,290
got a command-line interface to AWS

00:09:13,710 --> 00:09:17,940
elastic Beanstalk as just a quick

00:09:16,290 --> 00:09:21,360
summary of what elastic Beanstalk is

00:09:17,940 --> 00:09:25,020
this is kind of Amazon's way of wrapping

00:09:21,360 --> 00:09:26,490
up a bunch of services so ec2 and s3 are

00:09:25,020 --> 00:09:27,870
the kind of standard ones people know

00:09:26,490 --> 00:09:29,820
about the scalable computing the

00:09:27,870 --> 00:09:32,730
scalable storage this basically gives

00:09:29,820 --> 00:09:35,190
you a load balancer with a group of ec2

00:09:32,730 --> 00:09:36,990
instances behind it optionally an ids

00:09:35,190 --> 00:09:38,970
database that you can fire up some

00:09:36,990 --> 00:09:40,740
security settings and it gives you a

00:09:38,970 --> 00:09:42,630
lamp stack as well so it enables you to

00:09:40,740 --> 00:09:44,190
get running very quickly and just push

00:09:42,630 --> 00:09:47,880
your code up and not really worry about

00:09:44,190 --> 00:09:50,250
what's going on ok the next thing we

00:09:47,880 --> 00:09:52,370
need is a user that can access this so

00:09:50,250 --> 00:09:55,290
I've created a user on my amazon account

00:09:52,370 --> 00:09:57,990
and you can see that I've been given

00:09:55,290 --> 00:09:59,580
some credentials for it obviously secret

00:09:57,990 --> 00:10:01,440
ones that you're not going to see but I

00:09:59,580 --> 00:10:02,790
get an access key and I get a secret

00:10:01,440 --> 00:10:05,220
access key as well and these are just

00:10:02,790 --> 00:10:07,770
what I use to to make sure that the

00:10:05,220 --> 00:10:12,420
clients can communicate with the AWS

00:10:07,770 --> 00:10:14,820
platform and also this just goes in a

00:10:12,420 --> 00:10:16,890
particular format here which is what the

00:10:14,820 --> 00:10:19,740
tool is going to pick up so I'll just

00:10:16,890 --> 00:10:20,940
make those secure by H modding them and

00:10:19,740 --> 00:10:23,339
I'm going to export it into this

00:10:20,940 --> 00:10:26,010
environment variable which is where the

00:10:23,339 --> 00:10:28,050
tool is expecting to find it you can

00:10:26,010 --> 00:10:29,430
also supply this on a per command basis

00:10:28,050 --> 00:10:32,520
if say you need to use different

00:10:29,430 --> 00:10:34,830
credentials for different projects ok

00:10:32,520 --> 00:10:37,440
we've got this up and running let's jump

00:10:34,830 --> 00:10:43,110
back into our application do you like

00:10:37,440 --> 00:10:45,089
the animation ok first thing we do is we

00:10:43,110 --> 00:10:46,770
need to prep our repository so that we

00:10:45,089 --> 00:10:49,500
can push this stuff up into the cloud so

00:10:46,770 --> 00:10:51,720
there's a script provided with that the

00:10:49,500 --> 00:10:54,180
tools are removing really quickly which

00:10:51,720 --> 00:10:56,190
is very cool the problem I found though

00:10:54,180 --> 00:10:58,130
is it does sometimes result in things

00:10:56,190 --> 00:11:00,180
like this which is not brilliant

00:10:58,130 --> 00:11:02,459
especially if it's a three in the

00:11:00,180 --> 00:11:05,459
morning and you had to do this talk very

00:11:02,459 --> 00:11:07,230
soon afterwards so at that point we just

00:11:05,459 --> 00:11:10,200
need to go and fix the setup script

00:11:07,230 --> 00:11:12,780
there so inside of here just in case

00:11:10,200 --> 00:11:15,180
this is still an issue and in fact if

00:11:12,780 --> 00:11:17,010
anyone feels like pushing me to push

00:11:15,180 --> 00:11:18,450
kind of fixed back to these guys later

00:11:17,010 --> 00:11:21,090
on this evening that would be very cool

00:11:18,450 --> 00:11:22,710
so we're just came to correct a little

00:11:21,090 --> 00:11:25,830
issue that they had there and just hard

00:11:22,710 --> 00:11:28,620
coded but what this is doing is it's

00:11:25,830 --> 00:11:31,320
preparing our get repository to interact

00:11:28,620 --> 00:11:33,840
with the elastic Beanstalk platform so

00:11:31,320 --> 00:11:36,240
we run it again and no output means

00:11:33,840 --> 00:11:38,190
something good has happened and if we

00:11:36,240 --> 00:11:39,960
take a look we can now have access to

00:11:38,190 --> 00:11:41,160
the e.b an it command what this is going

00:11:39,960 --> 00:11:42,840
to do is it's going to bring up our

00:11:41,160 --> 00:11:45,540
elastic Beanstalk environment for us

00:11:42,840 --> 00:11:46,800
after asking us a few questions so we

00:11:45,540 --> 00:11:48,060
just run through here and you can see

00:11:46,800 --> 00:11:49,680
it's going to start asking us a bunch of

00:11:48,060 --> 00:11:52,470
things so our key which we've already

00:11:49,680 --> 00:11:54,960
got our secret key now we get into the

00:11:52,470 --> 00:11:57,510
interesting stuff first of all you get

00:11:54,960 --> 00:12:00,420
to choose which service region your AWS

00:11:57,510 --> 00:12:02,880
instance goes into when people are

00:12:00,420 --> 00:12:04,800
talking about the AWS outages recently

00:12:02,880 --> 00:12:06,780
most of the time what they mean is they

00:12:04,800 --> 00:12:08,520
do not mean that an entire region went

00:12:06,780 --> 00:12:10,500
down so they're divided up into

00:12:08,520 --> 00:12:12,570
geographical regions where you can host

00:12:10,500 --> 00:12:14,760
your service and then inside of those

00:12:12,570 --> 00:12:17,850
regions you have multiple availability

00:12:14,760 --> 00:12:19,650
zones available to you so that you can

00:12:17,850 --> 00:12:22,470
failover services between those

00:12:19,650 --> 00:12:25,410
availability zones so we're going to

00:12:22,470 --> 00:12:27,360
pick us east because it's cheap it's

00:12:25,410 --> 00:12:30,960
certainly a lot cheaper than trying to

00:12:27,360 --> 00:12:33,420
host in Tokyo then we need to pick a

00:12:30,960 --> 00:12:34,470
name for application luckily ask gram is

00:12:33,420 --> 00:12:37,860
the one that is the name of the

00:12:34,470 --> 00:12:40,110
directory so that's good now we create

00:12:37,860 --> 00:12:41,520
an environment as well a brief

00:12:40,110 --> 00:12:44,160
explanation but we'll go into more

00:12:41,520 --> 00:12:46,530
detail your application has environments

00:12:44,160 --> 00:12:48,780
within it so what we're going to do is

00:12:46,530 --> 00:12:51,360
we're just going to fire up just the

00:12:48,780 --> 00:12:52,920
default name ask um em but the idea here

00:12:51,360 --> 00:12:54,750
is that you would probably have a dev a

00:12:52,920 --> 00:12:59,160
staging and a production environment as

00:12:54,750 --> 00:13:01,110
well now this is the cool bit these are

00:12:59,160 --> 00:13:02,640
the solution stacks available to you

00:13:01,110 --> 00:13:04,530
when you run this this will actually

00:13:02,640 --> 00:13:06,240
take a minute to come back because it is

00:13:04,530 --> 00:13:08,040
going off and querying the available

00:13:06,240 --> 00:13:10,980
solution stacks from amazon at the time

00:13:08,040 --> 00:13:13,170
so when they started it was literally

00:13:10,980 --> 00:13:15,270
just a tomcat container you can see that

00:13:13,170 --> 00:13:17,520
they are adding way more services as

00:13:15,270 --> 00:13:19,020
they go on you can even experiment with

00:13:17,520 --> 00:13:21,410
running things under two different

00:13:19,020 --> 00:13:23,640
versions of Windows Server if you like

00:13:21,410 --> 00:13:26,040
we're of course interested in the PHP

00:13:23,640 --> 00:13:28,640
version so we're going to pick number

00:13:26,040 --> 00:13:31,440
two the 64-bit one

00:13:28,640 --> 00:13:34,050
we can optionally hook up an ids

00:13:31,440 --> 00:13:36,240
database to it as well what that means

00:13:34,050 --> 00:13:38,670
is it'll spin up a database for us and

00:13:36,240 --> 00:13:40,500
it will make the credentials available

00:13:38,670 --> 00:13:43,080
in our environment so that we can access

00:13:40,500 --> 00:13:45,300
them from our application we don't need

00:13:43,080 --> 00:13:47,280
that for our hello world application at

00:13:45,300 --> 00:13:50,700
the moment because obviously we're not

00:13:47,280 --> 00:13:52,380
talking to a database okay let's take a

00:13:50,700 --> 00:13:54,150
look at what that's created for us so

00:13:52,380 --> 00:13:56,820
that we'll have spit out its config file

00:13:54,150 --> 00:13:59,190
and again this is all nicely scripted

00:13:56,820 --> 00:14:01,050
and it follows the very UNIX II kind of

00:13:59,190 --> 00:14:02,460
philosophy of it will just spell a plain

00:14:01,050 --> 00:14:05,010
text file that you can edit yourself

00:14:02,460 --> 00:14:06,180
afterwards if you need to so inside of

00:14:05,010 --> 00:14:08,040
here you can just see that we've got a

00:14:06,180 --> 00:14:11,180
plain old config file that's got all the

00:14:08,040 --> 00:14:15,600
values that we chose inside of it okay

00:14:11,180 --> 00:14:17,580
now the cool stuff one of the reasons I

00:14:15,600 --> 00:14:20,640
didn't do this live is despite being

00:14:17,580 --> 00:14:22,680
well not in spite whilst I am also

00:14:20,640 --> 00:14:25,650
incredibly disaster-prone when it comes

00:14:22,680 --> 00:14:27,270
to these kind of things this also does

00:14:25,650 --> 00:14:28,890
take a little while spinning up your

00:14:27,270 --> 00:14:32,220
environment for the first time launches

00:14:28,890 --> 00:14:34,320
a lot of different resources so I've

00:14:32,220 --> 00:14:35,850
just encapsulated it together in a nice

00:14:34,320 --> 00:14:38,040
little form for you here so you see we

00:14:35,850 --> 00:14:40,230
fire up the application then we fire up

00:14:38,040 --> 00:14:42,270
the environment inside of it and then

00:14:40,230 --> 00:14:44,100
inside of here what this is doing is it

00:14:42,270 --> 00:14:46,830
starts creating the resources for you

00:14:44,100 --> 00:14:49,230
now behind the scenes again there's a

00:14:46,830 --> 00:14:51,630
tool called cloud formation here which

00:14:49,230 --> 00:14:54,270
lets you specify resources that go into

00:14:51,630 --> 00:14:56,220
your stack so a lot of stuff that you do

00:14:54,270 --> 00:14:58,650
with elastic Beanstalk you can take it

00:14:56,220 --> 00:15:01,620
on and customize for larger more

00:14:58,650 --> 00:15:03,030
complicated applications as well so you

00:15:01,620 --> 00:15:04,920
can see we're firing up a load balancer

00:15:03,030 --> 00:15:06,480
security group the auto scale and

00:15:04,920 --> 00:15:09,600
configuration around that as well and

00:15:06,480 --> 00:15:11,610
then a bit later on we create a number

00:15:09,600 --> 00:15:13,640
of water a number of alarms that go out

00:15:11,610 --> 00:15:16,350
through the simple notification service

00:15:13,640 --> 00:15:19,170
and eventually we get successfully

00:15:16,350 --> 00:15:22,110
launched environment and it spits out

00:15:19,170 --> 00:15:25,230
the the URL that is available for us at

00:15:22,110 --> 00:15:27,480
the end so this seems quite cool we

00:15:25,230 --> 00:15:32,460
should be able to curl that now and see

00:15:27,480 --> 00:15:36,150
our hello world you ready you guys look

00:15:32,460 --> 00:15:38,550
pretty ok oh right that is not really

00:15:36,150 --> 00:15:40,140
what we were expecting so what actually

00:15:38,550 --> 00:15:41,340
happens here is when you bring up the

00:15:40,140 --> 00:15:43,500
environment for the first

00:15:41,340 --> 00:15:46,140
you haven't deployed anything to it so

00:15:43,500 --> 00:15:48,180
what you get is the default version

00:15:46,140 --> 00:15:50,070
deployed there which is just a kind of

00:15:48,180 --> 00:15:53,160
helpful intro application that points

00:15:50,070 --> 00:15:55,680
you off to different AWS resources so

00:15:53,160 --> 00:15:57,450
what we need to do is just take a look

00:15:55,680 --> 00:15:58,920
at what's been created for us now that

00:15:57,450 --> 00:16:00,690
we've initialized environment you can

00:15:58,920 --> 00:16:02,700
see that we've got settings for that

00:16:00,690 --> 00:16:04,170
particular environment there so before

00:16:02,700 --> 00:16:05,640
we go and push some code let's take a

00:16:04,170 --> 00:16:07,680
look at what we've got running inside of

00:16:05,640 --> 00:16:09,420
that basically you can see they're a

00:16:07,680 --> 00:16:11,160
bunch of different things that were able

00:16:09,420 --> 00:16:13,290
to configure on our container that's

00:16:11,160 --> 00:16:15,510
wrapping our application so the first

00:16:13,290 --> 00:16:17,580
thing we need to do is we need to change

00:16:15,510 --> 00:16:21,390
the document root by default that's just

00:16:17,580 --> 00:16:24,600
pointing at the the root of your version

00:16:21,390 --> 00:16:27,540
that you've uploaded web is ours so

00:16:24,600 --> 00:16:28,530
we're just going to change that also

00:16:27,540 --> 00:16:29,940
you're just going to stick display

00:16:28,530 --> 00:16:32,280
arrows on while we're tinkering with it

00:16:29,940 --> 00:16:33,900
and now one of the other things we're

00:16:32,280 --> 00:16:35,550
going to do is you've got the auto

00:16:33,900 --> 00:16:37,830
scaling parameters down here where you

00:16:35,550 --> 00:16:39,480
can set the max minimum instances for

00:16:37,830 --> 00:16:41,400
the purposes of testing I'm just going

00:16:39,480 --> 00:16:43,050
to set my maximum instances to one as

00:16:41,400 --> 00:16:45,240
well so that I just have one server to

00:16:43,050 --> 00:16:47,160
deal with if there are errors going on

00:16:45,240 --> 00:16:49,080
when you're developing it's obviously a

00:16:47,160 --> 00:16:50,400
lot easier to just have one server that

00:16:49,080 --> 00:16:53,850
you can go check rather than an

00:16:50,400 --> 00:16:57,270
arbitrary number on top of that as well

00:16:53,850 --> 00:16:59,190
what the load balancer will do is most

00:16:57,270 --> 00:17:01,830
of the time if it detects that a server

00:16:59,190 --> 00:17:03,450
is unhealthy then it will remove it from

00:17:01,830 --> 00:17:06,060
the group and it will spin up a new one

00:17:03,450 --> 00:17:07,620
for you again when you're debugging that

00:17:06,060 --> 00:17:09,180
can be fairly unhelpful if you're trying

00:17:07,620 --> 00:17:10,950
to go find out about the error log and

00:17:09,180 --> 00:17:13,620
then amazon helpfully removes the

00:17:10,950 --> 00:17:17,810
instance for you so let's make that

00:17:13,620 --> 00:17:20,400
false okay you can see as well that it's

00:17:17,810 --> 00:17:22,920
created some stuff inside of that when

00:17:20,400 --> 00:17:24,870
it ran the setup script so we're just

00:17:22,920 --> 00:17:28,380
going to ignore that because we don't

00:17:24,870 --> 00:17:31,590
want the AWS stuff inside of our repo we

00:17:28,380 --> 00:17:33,510
get rid of that commit that it's our

00:17:31,590 --> 00:17:37,410
initial elastic Beanstalk integration

00:17:33,510 --> 00:17:39,570
and now we issue eb update and what this

00:17:37,410 --> 00:17:42,270
does is it updates the environment with

00:17:39,570 --> 00:17:44,310
those settings that we've changed so we

00:17:42,270 --> 00:17:46,020
say yes or that and you can see that

00:17:44,310 --> 00:17:47,670
what this does is this takes a little

00:17:46,020 --> 00:17:49,260
bit of time as well because it's

00:17:47,670 --> 00:17:50,940
bringing down the servers and bringing

00:17:49,260 --> 00:17:53,010
them back up with the new configuration

00:17:50,940 --> 00:17:54,480
it's not as long as the initial setup

00:17:53,010 --> 00:17:56,220
because you've got a lot of the base

00:17:54,480 --> 00:17:58,559
resources there but it still does take a

00:17:56,220 --> 00:18:01,880
little bit of time so we'll go through

00:17:58,559 --> 00:18:04,620
that and you can see that we've got

00:18:01,880 --> 00:18:08,370
we've got a health update that's coming

00:18:04,620 --> 00:18:10,350
through to us there as well so now the

00:18:08,370 --> 00:18:13,110
reason that's happened is because we've

00:18:10,350 --> 00:18:14,820
changed our document route to be web but

00:18:13,110 --> 00:18:16,530
we haven't pushed any code there yet so

00:18:14,820 --> 00:18:18,720
the health check is automatically coming

00:18:16,530 --> 00:18:20,700
back saying oh hey I requested / web and

00:18:18,720 --> 00:18:25,110
i'm just getting 404 s or 500 s or

00:18:20,700 --> 00:18:27,960
whatever all that AWS integration goes

00:18:25,110 --> 00:18:30,030
into the tip goes into your git

00:18:27,960 --> 00:18:32,540
repository and is then available via get

00:18:30,030 --> 00:18:35,070
subcommands so we can issue get AWS push

00:18:32,540 --> 00:18:37,110
what that's going to do is take

00:18:35,070 --> 00:18:39,510
everything we've got on our repo push it

00:18:37,110 --> 00:18:42,090
up to the cloud somewhere and then

00:18:39,510 --> 00:18:43,530
deploy onto our stack so inside of here

00:18:42,090 --> 00:18:46,760
you can see that we've we've basically

00:18:43,530 --> 00:18:49,860
just pushed that up to this location

00:18:46,760 --> 00:18:51,419
okay now we can check the status it's

00:18:49,860 --> 00:18:56,370
green because our versions been deployed

00:18:51,419 --> 00:19:06,540
and third time lucky some excitement

00:18:56,370 --> 00:19:09,960
here guys yes whoa okay good go home

00:19:06,540 --> 00:19:11,490
right right so we've got an application

00:19:09,960 --> 00:19:13,860
deployed it's running that will

00:19:11,490 --> 00:19:15,630
arbitrarily scale for us as well based

00:19:13,860 --> 00:19:19,020
on the default scaling parameters that

00:19:15,630 --> 00:19:21,210
are in there but that's not very

00:19:19,020 --> 00:19:22,890
interesting because there's too much

00:19:21,210 --> 00:19:23,970
magic going on and there are a number of

00:19:22,890 --> 00:19:26,280
things that might cause you problems

00:19:23,970 --> 00:19:28,410
that literally has just pushed your code

00:19:26,280 --> 00:19:30,419
it does do some stuff in the background

00:19:28,410 --> 00:19:32,700
now so it has been getting more advanced

00:19:30,419 --> 00:19:34,860
so you notice that I get ignored all of

00:19:32,700 --> 00:19:36,630
the stuff in my vendor directory so none

00:19:34,860 --> 00:19:38,669
of my dependencies were actually pushed

00:19:36,630 --> 00:19:40,679
up with my version but when it gets

00:19:38,669 --> 00:19:42,179
deployed it does actually do some magic

00:19:40,679 --> 00:19:44,610
with composer to pull in those

00:19:42,179 --> 00:19:48,059
dependencies for you as well however

00:19:44,610 --> 00:19:49,919
that's just lucky if you were say not

00:19:48,059 --> 00:19:51,809
using it as your version control system

00:19:49,919 --> 00:19:53,309
or you had some other scripting related

00:19:51,809 --> 00:19:55,290
things that you needed to do before you

00:19:53,309 --> 00:19:56,460
just pushed code up then obviously

00:19:55,290 --> 00:19:59,130
you're going to have to find a way to

00:19:56,460 --> 00:20:02,360
work around this so let's delete the

00:19:59,130 --> 00:20:04,860
application that we've got up there and

00:20:02,360 --> 00:20:06,809
now we're going to deal with the the

00:20:04,860 --> 00:20:07,770
command line tools themselves these give

00:20:06,809 --> 00:20:11,730
us access to

00:20:07,770 --> 00:20:13,620
workings of the AWS stuff the first

00:20:11,730 --> 00:20:15,090
thing we do is we we fire up the API

00:20:13,620 --> 00:20:16,830
command and we're going to test it with

00:20:15,090 --> 00:20:18,720
the elastic Beanstalk and they're all

00:20:16,830 --> 00:20:20,700
the commands are in this format they're

00:20:18,720 --> 00:20:22,470
quite verbose but it does mean that you

00:20:20,700 --> 00:20:23,970
can easily kind of sit there tapping tab

00:20:22,470 --> 00:20:27,390
until the right option that you want

00:20:23,970 --> 00:20:29,670
pops up so let's do that and we can see

00:20:27,390 --> 00:20:31,200
that we are contacting the service and

00:20:29,670 --> 00:20:32,580
we're getting that list back so we're

00:20:31,200 --> 00:20:38,040
we're in a good place we know our

00:20:32,580 --> 00:20:39,720
commands are working okay so now this is

00:20:38,040 --> 00:20:43,170
where we start finding out what is

00:20:39,720 --> 00:20:44,940
actually going on behind the scenes so

00:20:43,170 --> 00:20:47,550
with some amazing diagramming skills

00:20:44,940 --> 00:20:49,650
this is what we are creating when we

00:20:47,550 --> 00:20:53,190
talk about elastic Beanstalk so your

00:20:49,650 --> 00:20:54,690
application is this big container around

00:20:53,190 --> 00:20:56,100
here and that's literally all your

00:20:54,690 --> 00:20:58,380
application is it's pretty much a

00:20:56,100 --> 00:21:00,690
container with a name inside of your

00:20:58,380 --> 00:21:02,160
container you have multiple environments

00:21:00,690 --> 00:21:03,630
so this is what I was talking about with

00:21:02,160 --> 00:21:04,890
a development environment staging

00:21:03,630 --> 00:21:07,650
environment production environment

00:21:04,890 --> 00:21:10,710
whatever number you need to create then

00:21:07,650 --> 00:21:12,750
your versions that you push our archives

00:21:10,710 --> 00:21:15,690
that are stored in the s3 bucket in your

00:21:12,750 --> 00:21:17,130
account and when you deploy that you are

00:21:15,690 --> 00:21:19,140
basically deploying one of those

00:21:17,130 --> 00:21:21,390
archives into the environment that you

00:21:19,140 --> 00:21:23,100
specify so this enables you to do things

00:21:21,390 --> 00:21:24,930
like push stuff to you but development

00:21:23,100 --> 00:21:26,670
environment get it fixing verify it's

00:21:24,930 --> 00:21:28,890
working then deploy it to the staging

00:21:26,670 --> 00:21:30,690
environment then to production you can

00:21:28,890 --> 00:21:32,940
also do some nifty things with Amazon's

00:21:30,690 --> 00:21:35,660
route 53 which is their dns service

00:21:32,940 --> 00:21:38,310
where you've got some options for

00:21:35,660 --> 00:21:40,560
automatically switching over to a new

00:21:38,310 --> 00:21:42,060
environment so deploying to the

00:21:40,560 --> 00:21:44,370
environment does have a little downtime

00:21:42,060 --> 00:21:46,110
associated with it as it pulls down the

00:21:44,370 --> 00:21:48,420
archive extract it and restarts the

00:21:46,110 --> 00:21:50,250
service you can just deploy to a fresh

00:21:48,420 --> 00:21:51,840
environment and then switch over to

00:21:50,250 --> 00:21:55,890
serving that one and bring the old one

00:21:51,840 --> 00:21:57,510
down that's also a nicer way of if you

00:21:55,890 --> 00:21:59,040
realize that your new environment is not

00:21:57,510 --> 00:22:00,270
working at all you still have the old

00:21:59,040 --> 00:22:05,250
one there that you can immediately

00:22:00,270 --> 00:22:06,840
switch back to as a failover okay so the

00:22:05,250 --> 00:22:10,050
first thing we need to do then is create

00:22:06,840 --> 00:22:11,430
our application so like I was saying you

00:22:10,050 --> 00:22:12,870
can ask for help on all of these

00:22:11,430 --> 00:22:14,850
commands and get helpful list of what's

00:22:12,870 --> 00:22:16,920
going on in there so as you can see this

00:22:14,850 --> 00:22:18,720
is literally all it is it's a name and a

00:22:16,920 --> 00:22:19,770
description so we're going to create our

00:22:18,720 --> 00:22:22,830
container and create

00:22:19,770 --> 00:22:24,300
ask um and we get a response back like

00:22:22,830 --> 00:22:27,360
this its bits everything out in that

00:22:24,300 --> 00:22:28,860
kind of tab separate pipe separated

00:22:27,360 --> 00:22:30,570
format so it's fairly readable on the

00:22:28,860 --> 00:22:32,700
command line but with some of the larger

00:22:30,570 --> 00:22:34,500
ones you need a pretty wide screen

00:22:32,700 --> 00:22:38,250
monitor to actually get a useful visual

00:22:34,500 --> 00:22:39,960
out of it okay now we want to create the

00:22:38,250 --> 00:22:41,700
application version the code that we're

00:22:39,960 --> 00:22:43,890
going to deploy into our eventual

00:22:41,700 --> 00:22:45,360
environment so we just look at that as

00:22:43,890 --> 00:22:48,150
well you can see we're starting to get a

00:22:45,360 --> 00:22:50,070
bit more information inside of here also

00:22:48,150 --> 00:22:51,240
i'm showing you the verbose way of doing

00:22:50,070 --> 00:22:52,980
this to take you through each of the

00:22:51,240 --> 00:22:54,720
components you can see here that you've

00:22:52,980 --> 00:22:56,400
got the option to auto create the

00:22:54,720 --> 00:22:58,410
application along with the version as

00:22:56,400 --> 00:22:59,850
well so there are much quicker ways of

00:22:58,410 --> 00:23:02,010
doing the things that i'm showing you

00:22:59,850 --> 00:23:05,280
here so let's create an application

00:23:02,010 --> 00:23:07,260
version it's just our va0 01 which is

00:23:05,280 --> 00:23:08,610
our initial empty version and you can

00:23:07,260 --> 00:23:10,710
see that we haven't passed at anything

00:23:08,610 --> 00:23:12,600
so it's basically pulled down that

00:23:10,710 --> 00:23:14,130
sample application that we saw the first

00:23:12,600 --> 00:23:17,850
time we ran our elastic Beanstalk

00:23:14,130 --> 00:23:19,050
environment ok now we create the

00:23:17,850 --> 00:23:22,260
environment that is going to basically

00:23:19,050 --> 00:23:23,610
glue that version to our container so

00:23:22,260 --> 00:23:25,590
inside of here now you can see that

00:23:23,610 --> 00:23:28,170
we're starting to get a lot more options

00:23:25,590 --> 00:23:29,880
available to us so let's fire up an

00:23:28,170 --> 00:23:31,080
environment again this is our

00:23:29,880 --> 00:23:32,490
development environment and we're

00:23:31,080 --> 00:23:33,720
passing in the stack that we're

00:23:32,490 --> 00:23:37,410
interested in running which is that

00:23:33,720 --> 00:23:39,900
64-bit version of PHP again and we get

00:23:37,410 --> 00:23:41,490
back the answer that our environment has

00:23:39,900 --> 00:23:43,170
come up and we start to see some

00:23:41,490 --> 00:23:45,270
interesting things in here like the

00:23:43,170 --> 00:23:48,540
health status so when the environment is

00:23:45,270 --> 00:23:49,710
coming up its grey you've got red for VC

00:23:48,540 --> 00:23:51,810
when it's unhealthy green when it's

00:23:49,710 --> 00:23:56,700
happy and yellow for when it's somewhere

00:23:51,810 --> 00:23:57,750
in between okay because that hasn't

00:23:56,700 --> 00:24:00,120
necessarily given us a lot of

00:23:57,750 --> 00:24:02,310
information one of the things that you

00:24:00,120 --> 00:24:04,080
can do is you can pass minus J option to

00:24:02,310 --> 00:24:05,880
almost all of the tools and that will

00:24:04,080 --> 00:24:07,200
give you Jason output which when your

00:24:05,880 --> 00:24:09,240
scripting this stuff is incredibly

00:24:07,200 --> 00:24:11,040
helpful so I'm just piping it into

00:24:09,240 --> 00:24:12,510
Python to get some formatting so you can

00:24:11,040 --> 00:24:14,400
see I described our environment and I

00:24:12,510 --> 00:24:18,510
get it in a much nicer structure back to

00:24:14,400 --> 00:24:20,460
me so let's take a look for the status

00:24:18,510 --> 00:24:22,080
there so what I find is because this

00:24:20,460 --> 00:24:24,420
does take a while I kind of sit there

00:24:22,080 --> 00:24:28,350
just running through this one launching

00:24:24,420 --> 00:24:29,940
ready okay so we're good let's check the

00:24:28,350 --> 00:24:31,960
health as well the health is green

00:24:29,940 --> 00:24:34,420
everybody's happy

00:24:31,960 --> 00:24:36,220
now that's because we are at the same

00:24:34,420 --> 00:24:37,840
stage as we were before it's our sample

00:24:36,220 --> 00:24:40,330
application that is just up and running

00:24:37,840 --> 00:24:41,560
serving that static page so what we need

00:24:40,330 --> 00:24:42,760
to do here is take a look at the

00:24:41,560 --> 00:24:44,710
configuration settings that are

00:24:42,760 --> 00:24:46,150
available to us so I describe that and

00:24:44,710 --> 00:24:50,350
you can see that basically i get a

00:24:46,150 --> 00:24:51,940
shitload of stuff that same thing that I

00:24:50,350 --> 00:24:53,500
was interested in before I need to

00:24:51,940 --> 00:24:56,200
change the document root so I'm just

00:24:53,500 --> 00:24:58,690
going to copy that and I drop that into

00:24:56,200 --> 00:25:00,370
a configuration file here so I just

00:24:58,690 --> 00:25:02,020
create a little array with the setting

00:25:00,370 --> 00:25:04,510
that I was interested in and I've

00:25:02,020 --> 00:25:06,520
updated that to web and then what the

00:25:04,510 --> 00:25:07,990
tool allows you to do is you can do the

00:25:06,520 --> 00:25:09,940
update environment and you can basically

00:25:07,990 --> 00:25:11,440
just pass back that file the

00:25:09,940 --> 00:25:13,390
configuration changes that you want to

00:25:11,440 --> 00:25:15,040
make so again this is pretty cool you

00:25:13,390 --> 00:25:16,750
can set up the default environment and

00:25:15,040 --> 00:25:18,340
then you can have all your custom

00:25:16,750 --> 00:25:20,110
configuration just saved there that you

00:25:18,340 --> 00:25:23,050
can then very rapidly push up to the

00:25:20,110 --> 00:25:25,300
environment to change those settings so

00:25:23,050 --> 00:25:27,550
we do that and we're relaunching the

00:25:25,300 --> 00:25:29,020
environment to get it updated and you

00:25:27,550 --> 00:25:32,710
can see that our document resetting is

00:25:29,020 --> 00:25:34,750
now changed to web okay now we need to

00:25:32,710 --> 00:25:37,870
actually push some code up there to see

00:25:34,750 --> 00:25:42,820
what's going on see how we are doing for

00:25:37,870 --> 00:25:44,410
time oh cool okay we've got a bucket

00:25:42,820 --> 00:25:46,420
that's been created when we created our

00:25:44,410 --> 00:25:47,950
application I'm just using this s3

00:25:46,420 --> 00:25:49,240
command one which is one that was just

00:25:47,950 --> 00:25:51,250
available in the command line there are

00:25:49,240 --> 00:25:52,900
a number of s3 clients out there that

00:25:51,250 --> 00:25:54,880
you can use lots of visual ones if you

00:25:52,900 --> 00:25:58,870
prefer more visual interface there's a

00:25:54,880 --> 00:26:00,100
power based one and slow so let's jump

00:25:58,870 --> 00:26:01,630
in here and what we need to do is we

00:26:00,100 --> 00:26:03,700
need to create the archive that we're

00:26:01,630 --> 00:26:05,560
going to send up so that is what our get

00:26:03,700 --> 00:26:07,180
AWS push was doing for us in the

00:26:05,560 --> 00:26:08,920
background it was pushing off to a

00:26:07,180 --> 00:26:10,960
remote git repo then that was being

00:26:08,920 --> 00:26:12,430
zipped up and pushed on test three we're

00:26:10,960 --> 00:26:15,970
gonna zip it up our self and then push

00:26:12,430 --> 00:26:18,310
it up to s3 so one of the things I'm

00:26:15,970 --> 00:26:19,870
doing here as well is I'm just stripping

00:26:18,310 --> 00:26:21,670
out all of the stuff that I don't want

00:26:19,870 --> 00:26:23,890
to push up there since the first time I

00:26:21,670 --> 00:26:26,470
did this I realized that Symphony has a

00:26:23,890 --> 00:26:28,300
lot of unit tests associated with it and

00:26:26,470 --> 00:26:30,160
a lot of documentation in there as well

00:26:28,300 --> 00:26:32,380
so I was trying to upload a kind of 30

00:26:30,160 --> 00:26:35,860
meg archive over my own connection and

00:26:32,380 --> 00:26:38,980
that just wasn't working ok so we've

00:26:35,860 --> 00:26:40,930
created our application our version and

00:26:38,980 --> 00:26:42,760
you can see that all I did was just give

00:26:40,930 --> 00:26:45,830
it a name with a time stamp in there as

00:26:42,760 --> 00:26:48,980
well so there we are it's a 2013

00:26:45,830 --> 00:26:50,990
so now we're going to put this up into

00:26:48,980 --> 00:26:54,740
the bucket the elastic Beanstalk created

00:26:50,990 --> 00:26:56,870
for us you see that going up and now

00:26:54,740 --> 00:26:58,789
that we've got the version there the

00:26:56,870 --> 00:27:01,429
final step is to just tell it okay

00:26:58,789 --> 00:27:03,860
create a version and we're saying there

00:27:01,429 --> 00:27:06,649
we go version from zip file we just give

00:27:03,860 --> 00:27:08,450
it a helpful label for us and then we

00:27:06,649 --> 00:27:10,570
tell it and that's where the version can

00:27:08,450 --> 00:27:13,640
be found in that bucket with that name

00:27:10,570 --> 00:27:15,470
so versions created and now we tell the

00:27:13,640 --> 00:27:21,799
environment right deploy this version

00:27:15,470 --> 00:27:28,580
into my environment well it won't it who

00:27:21,799 --> 00:27:30,409
knows okay yes hello world right just to

00:27:28,580 --> 00:27:31,909
recap then obviously you wouldn't go

00:27:30,409 --> 00:27:34,130
through all of those commands each time

00:27:31,909 --> 00:27:36,470
that would be stupid so let's script it

00:27:34,130 --> 00:27:38,210
up so you can see here create a version

00:27:36,470 --> 00:27:40,429
with a useful name whatever name is

00:27:38,210 --> 00:27:42,710
helpful for you zip up the code you want

00:27:40,429 --> 00:27:45,080
into that file put that version on twice

00:27:42,710 --> 00:27:46,820
three create the application version so

00:27:45,080 --> 00:27:49,130
that you've basically got a bookmark to

00:27:46,820 --> 00:27:54,250
that file and then deploy that version

00:27:49,130 --> 00:27:57,380
into your requested environment okay

00:27:54,250 --> 00:27:59,539
that is the first half of the talk we've

00:27:57,380 --> 00:28:01,220
covered how we can deploy stuff up into

00:27:59,539 --> 00:28:02,990
the environment so now let's do

00:28:01,220 --> 00:28:04,549
something slightly more interesting with

00:28:02,990 --> 00:28:07,549
a ski gram rather than just making it

00:28:04,549 --> 00:28:10,220
out put some text first thing we need to

00:28:07,549 --> 00:28:11,600
do then is grab some other tools that we

00:28:10,220 --> 00:28:14,090
want to use so I'm just going to throw

00:28:11,600 --> 00:28:15,500
in a bunch here I'm just grabbing a

00:28:14,090 --> 00:28:16,789
bunch of the symphony components so that

00:28:15,500 --> 00:28:18,889
I can actually do something with this

00:28:16,789 --> 00:28:21,049
application but more interesting you see

00:28:18,889 --> 00:28:23,179
I'm grabbing the amazon web services SDK

00:28:21,049 --> 00:28:24,500
so this is going to give us access to

00:28:23,179 --> 00:28:28,460
all the services available on the

00:28:24,500 --> 00:28:30,409
platform okay so if we update this then

00:28:28,460 --> 00:28:31,970
this takes a substantially longer time

00:28:30,409 --> 00:28:34,190
because we have a whole bunch more stuff

00:28:31,970 --> 00:28:36,049
to pull in and if we take a look at

00:28:34,190 --> 00:28:37,789
what's been created you can now see in

00:28:36,049 --> 00:28:39,830
the vendor directory we've got amazon

00:28:37,789 --> 00:28:42,260
web services there for us and if we take

00:28:39,830 --> 00:28:44,630
a look at what's inside you can see that

00:28:42,260 --> 00:28:46,639
you basically get a class for each of

00:28:44,630 --> 00:28:48,919
the services available to you i'm

00:28:46,639 --> 00:28:50,899
showing you a slightly earlier version

00:28:48,919 --> 00:28:53,690
there is a newer version of the AWS sdk

00:28:50,899 --> 00:28:55,460
that uses the guzzle HTTP client to

00:28:53,690 --> 00:28:57,260
communicate with these services however

00:28:55,460 --> 00:28:58,240
it's not as fully featured yet they are

00:28:57,260 --> 00:29:00,160
adding service

00:28:58,240 --> 00:29:02,050
very quickly but it's not all of them at

00:29:00,160 --> 00:29:03,970
this point so you may find yourself

00:29:02,050 --> 00:29:09,190
preferring the older one if you need

00:29:03,970 --> 00:29:12,040
specific service access okay so what I'm

00:29:09,190 --> 00:29:14,380
going to do is stick some stuff into my

00:29:12,040 --> 00:29:17,770
cylex application this is the

00:29:14,380 --> 00:29:19,360
configuration for the AWS sdk is you

00:29:17,770 --> 00:29:21,040
basically pass in the key and your

00:29:19,360 --> 00:29:23,110
secret here and it can do a bunch of

00:29:21,040 --> 00:29:28,920
default cashing in to a pc for you so it

00:29:23,110 --> 00:29:30,880
is actually quite performant and then

00:29:28,920 --> 00:29:32,890
let's have a look at what we've got in

00:29:30,880 --> 00:29:34,480
there so i'm not going to take you

00:29:32,890 --> 00:29:35,320
through all of the application i'm just

00:29:34,480 --> 00:29:38,500
going to take you through the relevant

00:29:35,320 --> 00:29:40,690
bits they connect into s into the AWS

00:29:38,500 --> 00:29:43,570
service so you can see that i'm going to

00:29:40,690 --> 00:29:45,730
make use of DynamoDB and make use of the

00:29:43,570 --> 00:29:49,090
s3 service and i'm going to make use of

00:29:45,730 --> 00:29:49,900
the simple notification service right so

00:29:49,090 --> 00:29:52,990
let's take a look at what our

00:29:49,900 --> 00:29:54,250
application is going to do then don't

00:29:52,990 --> 00:29:56,020
worry about this this is just the

00:29:54,250 --> 00:29:58,500
standard form stuff inside of symphony

00:29:56,020 --> 00:30:01,210
the bit that we're interested in here is

00:29:58,500 --> 00:30:03,280
we are going to create a form and then

00:30:01,210 --> 00:30:05,800
upload an image so down here I've

00:30:03,280 --> 00:30:08,070
created an image uploader class which is

00:30:05,800 --> 00:30:12,010
going to talk to s3 to upload my image

00:30:08,070 --> 00:30:16,540
so inside of before we go into the code

00:30:12,010 --> 00:30:18,550
a little break I will just in case you

00:30:16,540 --> 00:30:22,570
get disappointed this is one of two

00:30:18,550 --> 00:30:24,010
visual slides in this entire talk so if

00:30:22,570 --> 00:30:27,309
that kind of graphical thing offends you

00:30:24,010 --> 00:30:29,410
then look away now so this is what our

00:30:27,309 --> 00:30:31,990
application looks like I've used Twitter

00:30:29,410 --> 00:30:34,200
bootstrap because otherwise my

00:30:31,990 --> 00:30:38,140
interfaces look like a child made them

00:30:34,200 --> 00:30:40,179
so let's pick an image I was trying to

00:30:38,140 --> 00:30:42,940
use the PHP UK logo but it doesn't

00:30:40,179 --> 00:30:46,450
render particularly well so I took an

00:30:42,940 --> 00:30:48,370
image earlier this morning that is

00:30:46,450 --> 00:30:51,970
actually an effect that's not just a

00:30:48,370 --> 00:30:54,220
result of me using Linux so let's upload

00:30:51,970 --> 00:30:57,070
that and write a clever message to go

00:30:54,220 --> 00:30:58,420
with it press the button and things are

00:30:57,070 --> 00:31:00,760
going off to the cloud and mysterious

00:30:58,420 --> 00:31:02,200
things that happen now before i give you

00:31:00,760 --> 00:31:04,360
the payoff of what we're actually going

00:31:02,200 --> 00:31:07,090
to do with that image let's see what's

00:31:04,360 --> 00:31:09,250
happening in the background so our image

00:31:07,090 --> 00:31:11,010
upload a class that has accepted that is

00:31:09,250 --> 00:31:12,990
going to do two things

00:31:11,010 --> 00:31:14,550
is going to store the image on s3 for us

00:31:12,990 --> 00:31:16,290
and then it's going to fire on

00:31:14,550 --> 00:31:18,210
notification saying it's been uploaded

00:31:16,290 --> 00:31:20,010
so the idea here is that I want to do

00:31:18,210 --> 00:31:20,940
some very complex processing with my

00:31:20,010 --> 00:31:22,740
image that is going to be quite

00:31:20,940 --> 00:31:24,510
expensive so I want to offload that

00:31:22,740 --> 00:31:28,140
rather than doing it inside of the

00:31:24,510 --> 00:31:30,090
request so first of all let's take a

00:31:28,140 --> 00:31:32,250
look at sv s3 is pretty simple to

00:31:30,090 --> 00:31:34,830
understand I've just written some

00:31:32,250 --> 00:31:36,240
rappers around the bits that I want so

00:31:34,830 --> 00:31:38,280
inside of here all I'm going to do is

00:31:36,240 --> 00:31:40,590
persist my image upload and i'm going to

00:31:38,280 --> 00:31:42,630
send the notification so inside of the

00:31:40,590 --> 00:31:44,850
s3 service you can see that what I'm

00:31:42,630 --> 00:31:48,300
doing is I'm just passing in the

00:31:44,850 --> 00:31:51,450
configuration then inside of here I'm

00:31:48,300 --> 00:31:53,940
just firing up the new Amazon s3 again

00:31:51,450 --> 00:31:56,460
this is the old sdk so it's all globally

00:31:53,940 --> 00:31:58,950
namespace the new one is has a lot more

00:31:56,460 --> 00:32:02,160
54 integration so it's properly packaged

00:31:58,950 --> 00:32:04,320
up for you and then I'm going to persist

00:32:02,160 --> 00:32:12,000
my image upload so inside of here I'm

00:32:04,320 --> 00:32:14,370
just grabbing the service sorry yeah

00:32:12,000 --> 00:32:17,790
let's go back to hear right we can do

00:32:14,370 --> 00:32:19,800
all of the set up through the SDK now

00:32:17,790 --> 00:32:21,900
what I'm also going to show you is that

00:32:19,800 --> 00:32:23,760
this this application kind of bootstraps

00:32:21,900 --> 00:32:25,890
itself so if the resources don't exist

00:32:23,760 --> 00:32:27,090
it goes off and creates them obviously

00:32:25,890 --> 00:32:29,070
this is the kind of thing that you would

00:32:27,090 --> 00:32:30,300
do in an installation script beforehand

00:32:29,070 --> 00:32:33,060
rather than letting it run in your

00:32:30,300 --> 00:32:35,580
request so all I'm doing is I fire at my

00:32:33,060 --> 00:32:37,320
s3 service check if the bucket exists if

00:32:35,580 --> 00:32:39,330
it doesn't then I'm going to create it I

00:32:37,320 --> 00:32:41,490
can pass in a number of things here so I

00:32:39,330 --> 00:32:43,410
can actually serve stuff directly from

00:32:41,490 --> 00:32:44,580
the bucket I can make the ACL public and

00:32:43,410 --> 00:32:46,590
people can just hit those images

00:32:44,580 --> 00:32:48,480
directly or I can make it private if I

00:32:46,590 --> 00:32:52,290
want to keep that stuff away from the

00:32:48,480 --> 00:32:54,600
public eye once I get a response back

00:32:52,290 --> 00:32:57,030
that says my buckets there then we

00:32:54,600 --> 00:32:58,230
basically just um we we create it if it

00:32:57,030 --> 00:33:01,560
doesn't we're going to just loop around

00:32:58,230 --> 00:33:03,570
and check until it's ready obviously a

00:33:01,560 --> 00:33:04,740
loop with a sleep one is not the kind of

00:33:03,570 --> 00:33:09,000
thing that you'd want to put in a

00:33:04,740 --> 00:33:10,620
performant web application okay our

00:33:09,000 --> 00:33:12,390
image is up so now let's send a

00:33:10,620 --> 00:33:15,030
notification out so that we know that

00:33:12,390 --> 00:33:17,550
the images there so the SNS service

00:33:15,030 --> 00:33:19,170
basically fires off notifications to

00:33:17,550 --> 00:33:22,230
subscribers of your choice your

00:33:19,170 --> 00:33:23,640
subscriber can be an SMS message it can

00:33:22,230 --> 00:33:26,130
be an email message

00:33:23,640 --> 00:33:27,990
oh sorry your notification can come in

00:33:26,130 --> 00:33:29,520
this form and then you you have various

00:33:27,990 --> 00:33:31,770
subscribers to it the one we're gonna

00:33:29,520 --> 00:33:33,510
uses the stray HTTP request so we're

00:33:31,770 --> 00:33:35,520
just going to get a little packet of

00:33:33,510 --> 00:33:38,130
Jason come to us on the other end that

00:33:35,520 --> 00:33:40,230
tells us something has happened so

00:33:38,130 --> 00:33:42,360
inside of here you can see that we're

00:33:40,230 --> 00:33:44,880
taking our image upload which is just

00:33:42,360 --> 00:33:47,820
the data from our form and we're going

00:33:44,880 --> 00:33:50,910
to get the SMS service which inside of

00:33:47,820 --> 00:33:54,960
here you can see that all of the topics

00:33:50,910 --> 00:33:57,060
that we have have an AR N and then we're

00:33:54,960 --> 00:33:59,550
creating a subscriber here so because

00:33:57,060 --> 00:34:01,200
our subscriber is HTTP we need to give

00:33:59,550 --> 00:34:03,060
it an endpoint if your subscriber was

00:34:01,200 --> 00:34:05,190
email you'd be supplying an email

00:34:03,060 --> 00:34:07,890
address if it was SMS you'd be supplying

00:34:05,190 --> 00:34:09,929
a mobile number so this is where our

00:34:07,890 --> 00:34:11,610
application is currently hosted now

00:34:09,929 --> 00:34:14,010
we're going to pass it to process to get

00:34:11,610 --> 00:34:21,090
the information going there see how

00:34:14,010 --> 00:34:22,919
we're doing okay right let's take a look

00:34:21,090 --> 00:34:24,899
at what's happening so when that

00:34:22,919 --> 00:34:27,419
application when that notice gets fired

00:34:24,899 --> 00:34:30,090
off and hits our endpoint this is our

00:34:27,419 --> 00:34:33,659
endpoint here so we're expecting post

00:34:30,090 --> 00:34:35,850
requests to process and SSS as it says

00:34:33,659 --> 00:34:37,260
their posts us Jason in the request body

00:34:35,850 --> 00:34:39,990
so we're just going to read that

00:34:37,260 --> 00:34:41,610
straight out and json decode it and then

00:34:39,990 --> 00:34:43,649
we're going to use that we're going to

00:34:41,610 --> 00:34:45,300
handle that message inside of our image

00:34:43,649 --> 00:34:49,919
transformer which does some exciting

00:34:45,300 --> 00:34:52,140
things ok the image transformer in here

00:34:49,919 --> 00:34:54,540
needs to handle two responsibilities now

00:34:52,140 --> 00:34:56,820
one thing the simple notification no

00:34:54,540 --> 00:34:59,190
service doesn't let you do is just fire

00:34:56,820 --> 00:35:01,080
out notifications all over the place to

00:34:59,190 --> 00:35:03,090
anyone who just happens to be a

00:35:01,080 --> 00:35:05,610
subscriber for them so for example you

00:35:03,090 --> 00:35:08,190
could conceivably use this to send spam

00:35:05,610 --> 00:35:09,630
text messages luckily what you need to

00:35:08,190 --> 00:35:11,550
do is you need to respond to a

00:35:09,630 --> 00:35:13,500
subscription request to actually make

00:35:11,550 --> 00:35:14,730
sure that those messages go through so

00:35:13,500 --> 00:35:15,990
that's what we're doing here if the

00:35:14,730 --> 00:35:18,000
message type is a subscription

00:35:15,990 --> 00:35:19,590
confirmation then we fire up the SMS

00:35:18,000 --> 00:35:21,840
service and we just need to send a

00:35:19,590 --> 00:35:23,400
confirmation message back to SNS and

00:35:21,840 --> 00:35:25,560
that means that we'll start getting the

00:35:23,400 --> 00:35:27,240
proper notifications again this is

00:35:25,560 --> 00:35:29,220
something you would set up as part of

00:35:27,240 --> 00:35:33,060
the entire infrastructure rather than

00:35:29,220 --> 00:35:34,980
inside of the request so let's just take

00:35:33,060 --> 00:35:36,900
a look at what it's doing there easy

00:35:34,980 --> 00:35:37,350
it's pretty simple all we do is send

00:35:36,900 --> 00:35:39,830
confer

00:35:37,350 --> 00:35:42,330
subscription we need to send back the

00:35:39,830 --> 00:35:43,680
message that the token that we were

00:35:42,330 --> 00:35:45,360
given so that we know that the

00:35:43,680 --> 00:35:48,200
confirmation is actually coming as a

00:35:45,360 --> 00:35:52,470
result of the request that we were given

00:35:48,200 --> 00:35:55,440
right now if that is a notification then

00:35:52,470 --> 00:35:57,330
the thing that I'm allowed to send in

00:35:55,440 --> 00:35:59,520
the message is basically text of my

00:35:57,330 --> 00:36:00,720
choice you get a very short amount that

00:35:59,520 --> 00:36:03,030
you're allowed to send because obviously

00:36:00,720 --> 00:36:05,880
it can go over text message as well so

00:36:03,030 --> 00:36:10,110
all I'm sending there in the subject is

00:36:05,880 --> 00:36:12,270
the ID of the image that i uploaded to

00:36:10,110 --> 00:36:14,930
s3 so I know what I'm going off to try

00:36:12,270 --> 00:36:17,220
and retain to try and process afterwards

00:36:14,930 --> 00:36:20,010
so I'm doing some interesting things

00:36:17,220 --> 00:36:24,600
with this I've got the image URL in my

00:36:20,010 --> 00:36:25,680
message and what we're going to do is

00:36:24,600 --> 00:36:29,130
we're going to off and we're going to

00:36:25,680 --> 00:36:30,660
get that out of our bucket so the s3

00:36:29,130 --> 00:36:32,490
service does allow you to do some quite

00:36:30,660 --> 00:36:34,590
cool things you can either get the

00:36:32,490 --> 00:36:36,690
object URL or you can download the

00:36:34,590 --> 00:36:39,210
object directly depending on what's more

00:36:36,690 --> 00:36:41,480
useful for you at the time so we get

00:36:39,210 --> 00:36:44,820
that and then we're going to swap back

00:36:41,480 --> 00:36:46,680
only skip over the magic is going on in

00:36:44,820 --> 00:36:48,480
here I'll show you the end result of it

00:36:46,680 --> 00:36:51,270
if you're interested in exactly how

00:36:48,480 --> 00:36:53,520
that's happening it's ugly but you can

00:36:51,270 --> 00:36:54,660
come find me in the bar afterwards now

00:36:53,520 --> 00:36:56,820
what we're going to do is we only use

00:36:54,660 --> 00:36:59,370
the dynamo DB service to store this

00:36:56,820 --> 00:37:02,910
index of our images I'll say up front

00:36:59,370 --> 00:37:04,920
the this is the no SQL service that they

00:37:02,910 --> 00:37:06,750
had I kind of threw this in because I

00:37:04,920 --> 00:37:09,090
thought a no SQL example would be cool

00:37:06,750 --> 00:37:11,990
in retrospect this was the wrong choice

00:37:09,090 --> 00:37:14,940
to use for this and I will show you why

00:37:11,990 --> 00:37:17,070
okay the dynamo DB service we fire up

00:37:14,940 --> 00:37:21,300
and we just want to persist something to

00:37:17,070 --> 00:37:24,120
our database so inside of here we're

00:37:21,300 --> 00:37:26,700
going to go DB put item and as you can

00:37:24,120 --> 00:37:27,780
see this bit is fairly simple the first

00:37:26,700 --> 00:37:29,730
thing we need to do is make sure that

00:37:27,780 --> 00:37:31,230
our table exists this is something that

00:37:29,730 --> 00:37:33,690
you definitely do in advance because

00:37:31,230 --> 00:37:36,420
setting up a dynamo DB T table can take

00:37:33,690 --> 00:37:38,490
a couple minutes so inside of here you

00:37:36,420 --> 00:37:41,520
can see we pick a table name and we

00:37:38,490 --> 00:37:44,070
define some things about the table again

00:37:41,520 --> 00:37:45,960
this is standard no SQL stuff so I won't

00:37:44,070 --> 00:37:49,260
go into the detail of this just suffice

00:37:45,960 --> 00:37:51,089
to say that this service does exist one

00:37:49,260 --> 00:37:53,069
thing to watch out for and

00:37:51,089 --> 00:37:55,739
like a lot of the other services where

00:37:53,069 --> 00:37:58,229
you pay for what you use with with the

00:37:55,739 --> 00:38:00,180
dynamo DB service you pay for the

00:37:58,229 --> 00:38:02,190
capacity that you are requesting to be

00:38:00,180 --> 00:38:05,489
provisioned so the first time I tried

00:38:02,190 --> 00:38:08,519
this I put some slightly larger number

00:38:05,489 --> 00:38:13,499
than I expected in that and it was when

00:38:08,519 --> 00:38:15,299
the 100-dollar AWS charge came through

00:38:13,499 --> 00:38:17,219
then over the course of the next week

00:38:15,299 --> 00:38:19,079
that I realize they're all right that is

00:38:17,219 --> 00:38:21,839
a slightly expensive way just to do

00:38:19,079 --> 00:38:24,239
development testing so so play with this

00:38:21,839 --> 00:38:28,680
keep it as low as you possibly can when

00:38:24,239 --> 00:38:30,779
you need to do the development okay and

00:38:28,680 --> 00:38:32,670
what we're going to do that is we're

00:38:30,779 --> 00:38:34,890
just going to create the table and we

00:38:32,670 --> 00:38:36,630
can issue the described table command so

00:38:34,890 --> 00:38:37,950
we just loop around again to see that

00:38:36,630 --> 00:38:42,509
our table has actually come up and

00:38:37,950 --> 00:38:44,400
running okay then we can put our item in

00:38:42,509 --> 00:38:46,499
there and you can see that all I'm doing

00:38:44,400 --> 00:38:48,900
is I'm firing off some fairly simple

00:38:46,499 --> 00:38:50,789
fields so I've got the upload date I've

00:38:48,900 --> 00:38:53,249
got the image ID I've got the message

00:38:50,789 --> 00:38:55,440
and I've got the grama fide output I

00:38:53,249 --> 00:38:57,839
created their dynamo DB is actually

00:38:55,440 --> 00:38:59,999
quite limited on the amount on the size

00:38:57,839 --> 00:39:03,239
of the individual items that you can put

00:38:59,999 --> 00:39:05,279
into it so again for this one what I

00:39:03,239 --> 00:39:07,559
ended up doing is using DynamoDB much

00:39:05,279 --> 00:39:09,180
more is just an index of those uploaded

00:39:07,559 --> 00:39:11,880
images that I could point to things on

00:39:09,180 --> 00:39:18,269
s3 rather than storing the data in the

00:39:11,880 --> 00:39:20,160
database itself okay so now we get to

00:39:18,269 --> 00:39:21,749
the final exciting step we're actually

00:39:20,160 --> 00:39:24,089
going to pull stuff back out of the

00:39:21,749 --> 00:39:26,249
database and take a look at it so what

00:39:24,089 --> 00:39:27,719
we've got here is our image lister which

00:39:26,249 --> 00:39:29,819
is going to go off and fetch the latest

00:39:27,719 --> 00:39:31,940
uploads from my database so let's take a

00:39:29,819 --> 00:39:34,859
look at what's going on inside of that

00:39:31,940 --> 00:39:37,079
we need two things we need our DynamoDB

00:39:34,859 --> 00:39:39,569
service to get the latest uploads and

00:39:37,079 --> 00:39:41,249
then we need our s3 service to go and

00:39:39,569 --> 00:39:45,960
get the actual images that have been

00:39:41,249 --> 00:39:49,109
created so inside of here we're firing

00:39:45,960 --> 00:39:53,099
off a query to the dynamo DB service now

00:39:49,109 --> 00:39:57,299
who's familiar with no SQL services yeah

00:39:53,099 --> 00:39:59,729
I knew Derek would be okay what this

00:39:57,299 --> 00:40:02,460
means is it's not so much a query in a

00:39:59,729 --> 00:40:04,469
kind of standard SQL sense you're more

00:40:02,460 --> 00:40:04,720
setting out a bunch of conditions there

00:40:04,469 --> 00:40:06,850
be

00:40:04,720 --> 00:40:08,170
returned back to you so inside of here

00:40:06,850 --> 00:40:09,970
you can see we're specifying a table

00:40:08,170 --> 00:40:12,640
name the attributes that we want to get

00:40:09,970 --> 00:40:14,320
the limit that we want the scan index

00:40:12,640 --> 00:40:15,490
forward conveniently means that we

00:40:14,320 --> 00:40:17,470
actually want to get those in reverse

00:40:15,490 --> 00:40:19,810
order so we get the most recent images

00:40:17,470 --> 00:40:22,600
first and then you can see that we're

00:40:19,810 --> 00:40:25,480
doing a comparison here so we're doing a

00:40:22,600 --> 00:40:30,460
condition less than or equal to against

00:40:25,480 --> 00:40:32,320
the where is it right we're sending in

00:40:30,460 --> 00:40:34,180
the time there so that we're getting

00:40:32,320 --> 00:40:41,890
stuff and comparing it to the current

00:40:34,180 --> 00:40:43,570
time okay we're nearly there guys we're

00:40:41,890 --> 00:40:50,140
going to see what happened to the image

00:40:43,570 --> 00:40:51,400
that we uploaded excited is that excited

00:40:50,140 --> 00:40:54,010
for developers I think that's probably

00:40:51,400 --> 00:40:58,900
excited for developers right okay let's

00:40:54,010 --> 00:41:02,380
take a look at what's going on then wow

00:40:58,900 --> 00:41:04,030
I look I was excited by this admittedly

00:41:02,380 --> 00:41:05,860
it was very late and I'd had a lot of

00:41:04,030 --> 00:41:10,210
coffee so my excitement threshold was

00:41:05,860 --> 00:41:13,180
pretty high pretty low okay so that I

00:41:10,210 --> 00:41:15,790
hope has given you an overview of the

00:41:13,180 --> 00:41:17,320
services available to you on AWS how you

00:41:15,790 --> 00:41:19,330
can put those things together how you

00:41:17,320 --> 00:41:22,120
can easily pull those services into your

00:41:19,330 --> 00:41:23,890
application and how you can set yourself

00:41:22,120 --> 00:41:25,930
up for a lifetime of fame and fortune

00:41:23,890 --> 00:41:29,500
later on when your when your company

00:41:25,930 --> 00:41:32,020
gets floated and bought so it just

00:41:29,500 --> 00:41:35,290
remains for me to say thanks very much

00:41:32,020 --> 00:41:38,650
for your time please please please go to

00:41:35,290 --> 00:41:39,970
joined in and give me ratings there if

00:41:38,650 --> 00:41:41,890
there are things you didn't like then

00:41:39,970 --> 00:41:44,560
tell me about it I can cry into my drink

00:41:41,890 --> 00:41:48,430
later on don't worry i only have pretend

00:41:44,560 --> 00:41:51,340
feelings anyway we don't really have a

00:41:48,430 --> 00:41:53,710
lot of time left so i would say

00:41:51,340 --> 00:41:55,630
questions but i would just say thank you

00:41:53,710 --> 00:41:57,340
guys and please find me later on if

00:41:55,630 --> 00:41:58,990
there's anything you want to discuss i'm

00:41:57,340 --> 00:42:02,400
more than happy to go into the code in a

00:41:58,990 --> 00:42:02,400
lot of detail thank

00:42:03,490 --> 00:42:05,550
you

00:42:15,960 --> 00:42:18,020

YouTube URL: https://www.youtube.com/watch?v=HFqmmXo85H0


