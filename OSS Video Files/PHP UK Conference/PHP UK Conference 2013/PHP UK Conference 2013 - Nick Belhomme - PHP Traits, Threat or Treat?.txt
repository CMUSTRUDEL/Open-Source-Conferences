Title: PHP UK Conference 2013 - Nick Belhomme - PHP Traits, Threat or Treat?
Publication date: 2013-04-22
Playlist: PHP UK Conference 2013
Description: 
	Start reducing complexity and start reusing sets of methods freely in several independent classes living in different class hierarchies with traits. Learn the semantics and start living in the future of PHP now!
Captions: 
	00:00:14,630 --> 00:00:24,820
so these are web-based so HP dotnet

00:00:20,240 --> 00:00:27,939
twenty percent that's a lot but PHP

00:00:24,820 --> 00:00:32,989
almost eighty percent of all websites

00:00:27,939 --> 00:00:38,690
run on PHP today that's a lot that's

00:00:32,989 --> 00:00:41,960
really dominating a web language at this

00:00:38,690 --> 00:00:43,820
time and it keeps growing last time I

00:00:41,960 --> 00:00:46,160
gave this talk it was seventy-four

00:00:43,820 --> 00:00:47,510
percent so we increase with another four

00:00:46,160 --> 00:00:50,240
percent and I think it will be keeping

00:00:47,510 --> 00:00:54,200
increasing because PHP is open source

00:00:50,240 --> 00:00:57,800
and it's a really mature language it

00:00:54,200 --> 00:01:02,950
gives evolving for the better so let's

00:00:57,800 --> 00:01:07,009
take a look we are used by many sides

00:01:02,950 --> 00:01:09,650
but the high traffic sites are mostly

00:01:07,009 --> 00:01:15,590
still using Java and such because yea

00:01:09,650 --> 00:01:19,189
high traffic sites there are some high

00:01:15,590 --> 00:01:24,140
traffic sites today which adopt PHP but

00:01:19,189 --> 00:01:25,880
most really high traffic sites are still

00:01:24,140 --> 00:01:29,020
running java because their legacy

00:01:25,880 --> 00:01:33,049
systems like banks and such so they use

00:01:29,020 --> 00:01:34,850
other technologies but the PHP version

00:01:33,049 --> 00:01:36,939
adoption this is something that's really

00:01:34,850 --> 00:01:40,039
interesting we can safely say that

00:01:36,939 --> 00:01:44,090
everybody has switched to PHP 5 so

00:01:40,039 --> 00:01:47,539
that's a whopping ninety six percent all

00:01:44,090 --> 00:01:49,999
the other versions are literally dead I

00:01:47,539 --> 00:01:52,939
don't know what's still here but I think

00:01:49,999 --> 00:01:56,420
it's really really really old coat or

00:01:52,939 --> 00:01:59,509
maybe some banking which doesn't trust

00:01:56,420 --> 00:02:04,459
changing your coat if it works don't fix

00:01:59,509 --> 00:02:07,279
it don't change anything now php5 we've

00:02:04,459 --> 00:02:12,230
still got TP and 5-door to running I

00:02:07,279 --> 00:02:15,860
don't understand that pitch p53 is out

00:02:12,230 --> 00:02:19,490
for a long long long time 55 before I'd

00:02:15,860 --> 00:02:22,670
be released in stable version last year

00:02:19,490 --> 00:02:28,280
March so it's one year old it's got huge

00:02:22,670 --> 00:02:31,819
huge huge benefits in performance in

00:02:28,280 --> 00:02:34,340
in language constructs in in a lot of

00:02:31,819 --> 00:02:38,270
things but if you are not yet ready to

00:02:34,340 --> 00:02:43,550
go to five dots for all systems okay all

00:02:38,270 --> 00:02:45,950
systems do use all linux distributions

00:02:43,550 --> 00:02:49,280
already have five to three running so I

00:02:45,950 --> 00:02:51,980
don't see any real use case why you

00:02:49,280 --> 00:02:56,270
would have still run in fact the two but

00:02:51,980 --> 00:02:59,930
clearly we still do that so why is there

00:02:56,270 --> 00:03:03,140
a slow adoption for php5 dot for mainly

00:02:59,930 --> 00:03:10,730
me myself I blame you guys you have to

00:03:03,140 --> 00:03:14,120
push your boss your your team lead your

00:03:10,730 --> 00:03:18,650
team manager your your CEO you're CTO I

00:03:14,120 --> 00:03:21,260
don't care they are not as technically

00:03:18,650 --> 00:03:23,720
advanced as you guys you know your

00:03:21,260 --> 00:03:26,810
you should push your you would you

00:03:23,720 --> 00:03:31,069
would have to say no five dot 4 or 5 to

00:03:26,810 --> 00:03:33,860
3 has huge huge security benefits has

00:03:31,069 --> 00:03:37,640
huge performance benefits we need to

00:03:33,860 --> 00:03:40,250
adopt so mainly hu you can blame it a

00:03:37,640 --> 00:03:42,170
shared hosting but in the end huge you

00:03:40,250 --> 00:03:44,360
choose that shared hosting you can

00:03:42,170 --> 00:03:47,390
switch the provider who does give it to

00:03:44,360 --> 00:03:50,299
you the company's refrain from updating

00:03:47,390 --> 00:03:54,350
stable systems or distributions well not

00:03:50,299 --> 00:03:58,100
really you can push maybe not in one

00:03:54,350 --> 00:04:00,709
hour talk say a mr. boss please update

00:03:58,100 --> 00:04:05,030
know you have the next day after day and

00:04:00,709 --> 00:04:07,250
eventually you will win so why would you

00:04:05,030 --> 00:04:09,530
adopt like I told before there's more

00:04:07,250 --> 00:04:11,480
stability better security there's a

00:04:09,530 --> 00:04:15,410
better engine garbage collection memory

00:04:11,480 --> 00:04:21,440
performance as a they're really really

00:04:15,410 --> 00:04:23,720
really really yeah it jumped really it

00:04:21,440 --> 00:04:25,580
jumped with a difference between five

00:04:23,720 --> 00:04:28,000
dot 3 i'm not even going to talk about

00:04:25,580 --> 00:04:32,450
50 to but five to three and five is for

00:04:28,000 --> 00:04:35,479
your memory consumption and cpu

00:04:32,450 --> 00:04:39,289
consumption it's it's all the charts

00:04:35,479 --> 00:04:43,219
it's almost half or sometimes even

00:04:39,289 --> 00:04:46,699
yeah 10 times as fast or 10 times let's

00:04:43,219 --> 00:04:49,789
consumed in memory then 523 so there are

00:04:46,699 --> 00:04:51,439
also new language features and because

00:04:49,789 --> 00:04:54,919
of the new language constructs we also

00:04:51,439 --> 00:04:58,309
have more and better ways to write

00:04:54,919 --> 00:05:02,180
elegant coach so we're going to take a

00:04:58,309 --> 00:05:06,469
look at that today so in PHP 5 at four

00:05:02,180 --> 00:05:08,330
we have an array short notation and what

00:05:06,469 --> 00:05:09,949
that actually means just the JavaScript

00:05:08,330 --> 00:05:13,129
syntax we don't have to write array

00:05:09,949 --> 00:05:15,770
anymore colon and stuff like that we can

00:05:13,129 --> 00:05:18,469
just make square bracket and write our

00:05:15,770 --> 00:05:20,809
array now we have already referencing

00:05:18,469 --> 00:05:22,789
what that actually means is we do not

00:05:20,809 --> 00:05:28,279
have to store the result of a function

00:05:22,789 --> 00:05:30,319
anymore into a variable and then that

00:05:28,279 --> 00:05:35,259
variable is an array which we can access

00:05:30,319 --> 00:05:40,339
no we can immediately access the values

00:05:35,259 --> 00:05:43,550
from which are returned from the

00:05:40,339 --> 00:05:45,319
function itself so then class excellent

00:05:43,550 --> 00:05:49,580
instantiation we do not have to store

00:05:45,319 --> 00:05:51,529
the the class anymore in a variable the

00:05:49,580 --> 00:05:55,309
same thing it's just a shortcut we can

00:05:51,529 --> 00:05:57,080
now say for instance news and date to

00:05:55,309 --> 00:05:59,360
string in one line we don't have to

00:05:57,080 --> 00:06:01,539
store this in data the data object so

00:05:59,360 --> 00:06:09,409
indirect method call by array variable

00:06:01,539 --> 00:06:12,830
it's a short way of instantiating no

00:06:09,409 --> 00:06:17,719
calling a method from a class with a use

00:06:12,830 --> 00:06:20,119
of an array like I said we have huge CPU

00:06:17,719 --> 00:06:23,029
and benefits which 584 engine process

00:06:20,119 --> 00:06:25,249
your object oriented code a lot faster

00:06:23,029 --> 00:06:27,529
we have language constructs which will

00:06:25,249 --> 00:06:30,319
just put an echo this will write you

00:06:27,529 --> 00:06:33,199
don't have to do open peach p notation

00:06:30,319 --> 00:06:36,769
and say echo your variable you can

00:06:33,199 --> 00:06:38,990
immediately do echo and open PHP in one

00:06:36,769 --> 00:06:41,569
location and we've got Jason

00:06:38,990 --> 00:06:44,149
serializable interface and a lot lot

00:06:41,569 --> 00:06:50,360
more but today we're going to talk about

00:06:44,149 --> 00:06:52,849
trades so what are traits and for why

00:06:50,360 --> 00:06:56,179
this is a solution well we all right go

00:06:52,849 --> 00:06:59,809
on a daily basis most of us do and the

00:06:56,179 --> 00:07:05,559
problem we face today is that we write

00:06:59,809 --> 00:07:08,089
nice coat and rewrite the code we put

00:07:05,559 --> 00:07:09,879
responsibility in each class and we try

00:07:08,089 --> 00:07:13,819
to separate the responsibilities of our

00:07:09,879 --> 00:07:17,389
coach in separate classes but sometimes

00:07:13,819 --> 00:07:21,949
we want to have a piece of coach which

00:07:17,389 --> 00:07:28,159
is the same in each base class but we do

00:07:21,949 --> 00:07:30,259
not want to extend from 11 master class

00:07:28,159 --> 00:07:32,749
so for instance this one we have a

00:07:30,259 --> 00:07:35,479
template fat stack which has a set

00:07:32,749 --> 00:07:39,379
options function this is something which

00:07:35,479 --> 00:07:43,369
is done in a lot of piece of code now

00:07:39,379 --> 00:07:46,699
this a part of a cent remember to so we

00:07:43,369 --> 00:07:49,189
have set options it's going to be taking

00:07:46,699 --> 00:07:51,860
a look at whether it's a instant of

00:07:49,189 --> 00:07:54,379
transplant reversible whether it's an

00:07:51,860 --> 00:07:59,449
array if it's not then it will throw in

00:07:54,379 --> 00:08:01,629
a probe an exception if it is one of

00:07:59,449 --> 00:08:07,240
those two then it will look over the

00:08:01,629 --> 00:08:09,919
options and set the keys individually so

00:08:07,240 --> 00:08:12,619
by setting the case we are using the

00:08:09,919 --> 00:08:14,240
method set option which is just a huge

00:08:12,619 --> 00:08:17,779
switch statement then we have another

00:08:14,240 --> 00:08:20,899
class class root broker which is exactly

00:08:17,779 --> 00:08:22,550
the same code well not really exactly

00:08:20,899 --> 00:08:25,189
there are some minor change and

00:08:22,550 --> 00:08:28,069
different differences why because they

00:08:25,189 --> 00:08:30,289
want to implement the same thing but

00:08:28,069 --> 00:08:31,879
another developer did it but it's

00:08:30,289 --> 00:08:37,669
exactly the same thing we still have

00:08:31,879 --> 00:08:39,529
array options traversable throw it but

00:08:37,669 --> 00:08:42,649
this time the message is a little bit

00:08:39,529 --> 00:08:45,350
more advanced previously we just said

00:08:42,649 --> 00:08:48,380
expect an array or traversable here we

00:08:45,350 --> 00:08:52,819
say received what kind of stuff will

00:08:48,380 --> 00:08:55,939
receive so it's exactly the same and we

00:08:52,819 --> 00:08:58,000
do not have a set option methods like we

00:08:55,939 --> 00:09:02,740
did before we just have before each

00:08:58,000 --> 00:09:06,000
embedded into the set options methods

00:09:02,740 --> 00:09:08,649
but all in all is exactly the same code

00:09:06,000 --> 00:09:11,680
so we're repeating ourselves over and

00:09:08,649 --> 00:09:17,070
over again with small differentiations

00:09:11,680 --> 00:09:19,750
which is a lot of hassle it's not clean

00:09:17,070 --> 00:09:23,260
we don't have one uniform way of doing

00:09:19,750 --> 00:09:26,500
it so what's the problem we have coat

00:09:23,260 --> 00:09:28,390
application now how are we going to

00:09:26,500 --> 00:09:32,740
angle it yeah we can have multiple

00:09:28,390 --> 00:09:35,800
inheritance that would provide the set

00:09:32,740 --> 00:09:37,720
options in all child cut is needed so

00:09:35,800 --> 00:09:40,690
multiple inheritance would be that way

00:09:37,720 --> 00:09:45,010
which extends book for classes well in

00:09:40,690 --> 00:09:47,920
PHP we can't so why not because it would

00:09:45,010 --> 00:09:50,980
introduce diamond problem which methods

00:09:47,920 --> 00:09:55,690
which kit precedence over the other one

00:09:50,980 --> 00:09:58,750
and which is more important the logic

00:09:55,690 --> 00:10:01,360
would not be able to choose so that's

00:09:58,750 --> 00:10:05,339
not an option so PHP files for you to

00:10:01,360 --> 00:10:05,339
solve that problem by using trades

00:10:06,720 --> 00:10:13,420
traits which city options in all classes

00:10:10,240 --> 00:10:15,790
that would use straight now that

00:10:13,420 --> 00:10:18,750
eliminates the diamond problem let's

00:10:15,790 --> 00:10:22,870
take a look at how it works traits like

00:10:18,750 --> 00:10:26,770
with a class or interface or an abstract

00:10:22,870 --> 00:10:30,730
class we use a keyword in this case it's

00:10:26,770 --> 00:10:32,950
straight and then we just name it so we

00:10:30,730 --> 00:10:36,339
caught we here we define the trade

00:10:32,950 --> 00:10:38,980
options and we just put the piece of

00:10:36,339 --> 00:10:42,820
code we want to have in there this case

00:10:38,980 --> 00:10:48,579
just to check then for each and the

00:10:42,820 --> 00:10:52,630
additional method set option now the

00:10:48,579 --> 00:10:56,730
class template tag which use the option

00:10:52,630 --> 00:10:59,980
trade with the keyword use so you import

00:10:56,730 --> 00:11:04,810
that piece of coach inside this class at

00:10:59,980 --> 00:11:06,940
compile time and we have the public

00:11:04,810 --> 00:11:09,760
function set option which which is

00:11:06,940 --> 00:11:12,610
different for the real broker class and

00:11:09,760 --> 00:11:14,100
the template stack class different

00:11:12,610 --> 00:11:16,290
that's the only thing that was different

00:11:14,100 --> 00:11:19,750
the setting of the

00:11:16,290 --> 00:11:22,060
so the individual piece this was the

00:11:19,750 --> 00:11:24,520
same for all we're going to do that by

00:11:22,060 --> 00:11:28,330
defining a trade and then we are going

00:11:24,520 --> 00:11:31,839
to import that which is just a behind

00:11:28,330 --> 00:11:36,180
the scene copy paste of that piece of

00:11:31,839 --> 00:11:38,800
code inside this class it's really

00:11:36,180 --> 00:11:43,600
internally copies it and puts in the

00:11:38,800 --> 00:11:45,370
class at compile time so the classroom

00:11:43,600 --> 00:11:49,450
broker does exactly the same we're going

00:11:45,370 --> 00:11:54,790
to use it and we specify the options we

00:11:49,450 --> 00:11:57,250
have here and then we can just yeah

00:11:54,790 --> 00:12:04,260
instantiate the route broker set your

00:11:57,250 --> 00:12:09,779
options and we're done so very straight

00:12:04,260 --> 00:12:12,910
an elegant way to reuse your coach and

00:12:09,779 --> 00:12:14,760
not repeating yourself over and over and

00:12:12,910 --> 00:12:19,029
over again because we cannot have

00:12:14,760 --> 00:12:24,850
multiple extensions of class so that's

00:12:19,029 --> 00:12:28,450
it but there's a lot more so let's dive

00:12:24,850 --> 00:12:33,850
deeper we have a president's order like

00:12:28,450 --> 00:12:36,430
we what happens if we introduce a trait

00:12:33,850 --> 00:12:41,140
which has a piece of coach like a method

00:12:36,430 --> 00:12:42,579
and we already have a class which will

00:12:41,140 --> 00:12:47,440
have it so let's take a look at this

00:12:42,579 --> 00:12:49,360
trade SPL register so we have just a

00:12:47,440 --> 00:12:53,589
register function but also an

00:12:49,360 --> 00:12:56,589
unregistered function in this trade SPL

00:12:53,589 --> 00:13:01,200
autoload and register which which will

00:12:56,589 --> 00:13:01,200
just register itself

00:13:01,699 --> 00:13:06,939
and then we have a standard outer loader

00:13:03,589 --> 00:13:06,939
which will use a trait

00:13:09,700 --> 00:13:18,440
this class however already has an

00:13:12,910 --> 00:13:22,610
unregistered class and unregistered

00:13:18,440 --> 00:13:24,290
method ever going to use it which one of

00:13:22,610 --> 00:13:25,970
the two is going to use it's going to

00:13:24,290 --> 00:13:28,190
use a trait one what is it going to use

00:13:25,970 --> 00:13:31,870
a class one it's going to use a class

00:13:28,190 --> 00:13:34,430
one and not the one from the trade so

00:13:31,870 --> 00:13:36,070
it's actually quite nice because then

00:13:34,430 --> 00:13:41,600
you know when you define something

00:13:36,070 --> 00:13:43,730
inside your class it gets overwritten it

00:13:41,600 --> 00:13:46,390
doesn't get over it in same with if you

00:13:43,730 --> 00:13:51,340
extend a class you can overwrite your

00:13:46,390 --> 00:13:54,440
parents met its method insane betrayed

00:13:51,340 --> 00:13:57,580
so but what happens with an inner

00:13:54,440 --> 00:13:59,990
written member from a place class and

00:13:57,580 --> 00:14:02,060
we're going to inserted by a trade so

00:13:59,990 --> 00:14:06,650
let's take a look we have a standard

00:14:02,060 --> 00:14:08,960
autoloader then we have a class my

00:14:06,650 --> 00:14:12,200
autoloader extends the standard outer

00:14:08,960 --> 00:14:14,330
loader so now we're having my autoloader

00:14:12,200 --> 00:14:17,540
extending another class this class

00:14:14,330 --> 00:14:20,750
already has an unregistered method and

00:14:17,540 --> 00:14:22,730
we're going to use it now it will

00:14:20,750 --> 00:14:29,540
unregister it will use a trait one and

00:14:22,730 --> 00:14:34,019
not the apparent class its method why

00:14:29,540 --> 00:14:38,309
because this one

00:14:34,019 --> 00:14:41,429
has the trait injected copied glutes at

00:14:38,309 --> 00:14:44,550
compile time so it's actually there the

00:14:41,429 --> 00:14:48,529
pit up coats actually here before

00:14:44,550 --> 00:14:48,529
extending the standard out of class so

00:14:49,549 --> 00:14:58,290
it will it will just over I to face

00:14:52,559 --> 00:15:02,910
class now let's take a little let's go a

00:14:58,290 --> 00:15:09,089
bit further so if we do not want to

00:15:02,910 --> 00:15:12,720
overwrite the base class its methods by

00:15:09,089 --> 00:15:14,879
by by booting an import now how can we

00:15:12,720 --> 00:15:18,149
do that we can have a class standard

00:15:14,879 --> 00:15:24,779
autoloader exactly same as before but

00:15:18,149 --> 00:15:27,119
now we say the unregister from the from

00:15:24,779 --> 00:15:29,759
the standard autoloader needs to be used

00:15:27,119 --> 00:15:33,029
instead of the SPL register so that way

00:15:29,759 --> 00:15:37,259
you can say which piece of logic has to

00:15:33,029 --> 00:15:39,720
be used at the time so here we

00:15:37,259 --> 00:15:41,699
explicitly say please use the

00:15:39,720 --> 00:15:45,179
unregistered method from standard

00:15:41,699 --> 00:15:47,929
autoloader class and if you run it it

00:15:45,179 --> 00:15:51,350
will it will throw the runtime exception

00:15:47,929 --> 00:15:54,360
so there's a lot of flexibility you can

00:15:51,350 --> 00:15:59,699
override certain behaviors by using a

00:15:54,360 --> 00:16:02,670
instead keyword so does it support

00:15:59,699 --> 00:16:04,649
multiple threads yes it does exactly the

00:16:02,670 --> 00:16:07,049
same as few which have multiple

00:16:04,649 --> 00:16:10,499
interface which you can be implementing

00:16:07,049 --> 00:16:12,449
well you can also use multiple trades so

00:16:10,499 --> 00:16:21,059
let's take a look at that we have trade

00:16:12,449 --> 00:16:24,360
local and it has a property then it has

00:16:21,059 --> 00:16:26,779
a function get local a function set

00:16:24,360 --> 00:16:26,779
local

00:16:28,610 --> 00:16:34,070
then we have a trait white space also at

00:16:31,910 --> 00:16:37,430
the property a function get allowed

00:16:34,070 --> 00:16:39,730
white space a function to the loud white

00:16:37,430 --> 00:16:39,730
space

00:16:41,200 --> 00:16:46,000
we have a class alpha it extends the

00:16:44,230 --> 00:16:48,520
abstract filter but what's more

00:16:46,000 --> 00:16:51,820
important it uses those two previously

00:16:48,520 --> 00:16:55,360
defined traits it uses the local and the

00:16:51,820 --> 00:17:00,250
white space trade so now we don't have

00:16:55,360 --> 00:17:03,340
to extend because alpha could not be

00:17:00,250 --> 00:17:05,829
able to extend local and could not

00:17:03,340 --> 00:17:08,680
extend white space could not couldn't

00:17:05,829 --> 00:17:11,410
happen so we had basically normally we

00:17:08,680 --> 00:17:13,720
should make a choice every which may be

00:17:11,410 --> 00:17:17,130
extent one if you would want to do that

00:17:13,720 --> 00:17:20,320
and then we implement the other one or

00:17:17,130 --> 00:17:27,579
we can just use traits we here we say

00:17:20,320 --> 00:17:31,210
use local and use white space so this is

00:17:27,579 --> 00:17:37,900
an elegant way to to do composition of

00:17:31,210 --> 00:17:42,580
your classes and and avoid repeating

00:17:37,900 --> 00:17:46,540
yourself so if you can include multiple

00:17:42,580 --> 00:17:49,030
trades then we probably also can have

00:17:46,540 --> 00:17:55,240
multiple set options in each trade

00:17:49,030 --> 00:17:58,150
defined and their conflicting so how do

00:17:55,240 --> 00:18:01,750
we solve that well again let's take a

00:17:58,150 --> 00:18:03,550
look at the local and set local if you

00:18:01,750 --> 00:18:06,100
would have a second trade second local

00:18:03,550 --> 00:18:09,880
and would also have the set local method

00:18:06,100 --> 00:18:14,080
defined and which use that in our class

00:18:09,880 --> 00:18:16,930
alpha use local and second local what

00:18:14,080 --> 00:18:21,690
would happen well we will get a fatal

00:18:16,930 --> 00:18:28,360
error why because again piece of code

00:18:21,690 --> 00:18:32,100
will not know which one to use so it

00:18:28,360 --> 00:18:35,020
will try to to include both traits and

00:18:32,100 --> 00:18:37,990
you will have two times the set local

00:18:35,020 --> 00:18:40,960
method inside which yeah which will give

00:18:37,990 --> 00:18:43,510
a fatal error so again like we did

00:18:40,960 --> 00:18:47,950
previously we can now also do with the

00:18:43,510 --> 00:18:51,280
instead of methods so trade local second

00:18:47,950 --> 00:18:53,410
local alpha second local set local

00:18:51,280 --> 00:18:54,980
instead of local so we're going to use a

00:18:53,410 --> 00:18:57,140
set local methods

00:18:54,980 --> 00:19:00,350
of a sex thing can't local trade and

00:18:57,140 --> 00:19:04,780
we're going to use that one instead of

00:19:00,350 --> 00:19:10,900
the one from the first rate local and

00:19:04,780 --> 00:19:13,520
then we can just call it so instead up

00:19:10,900 --> 00:19:22,400
is a good friend of you and you you will

00:19:13,520 --> 00:19:24,970
use it a lot in your code so when let it

00:19:22,400 --> 00:19:24,970
go deeper

00:19:31,650 --> 00:19:36,370
there are strict standards local and

00:19:34,030 --> 00:19:39,220
second local define the same property

00:19:36,370 --> 00:19:41,230
the property can have whatever value for

00:19:39,220 --> 00:19:43,660
instance in local one it could be an

00:19:41,230 --> 00:19:47,650
integer in local to it could be a string

00:19:43,660 --> 00:19:54,760
so you you have no idea I let the code

00:19:47,650 --> 00:20:00,450
has no idea what it could be so you have

00:19:54,760 --> 00:20:08,470
to you would have to set it and that way

00:20:00,450 --> 00:20:13,210
it knows what the value is before but in

00:20:08,470 --> 00:20:15,820
this case both are different so it does

00:20:13,210 --> 00:20:18,490
not know which one to use so just use

00:20:15,820 --> 00:20:22,540
the property of local one or does to use

00:20:18,490 --> 00:20:30,600
the property of local to it has no idea

00:20:22,540 --> 00:20:30,600
so you have to be careful with that

00:20:34,590 --> 00:20:40,770
then cut the static properties they are

00:20:37,409 --> 00:20:45,289
not buying it to the trade so if we are

00:20:40,770 --> 00:20:52,970
going to statics again because it's

00:20:45,289 --> 00:20:52,970
copied pasted coach at compile time the

00:20:53,150 --> 00:20:58,980
the static variable which if you within

00:20:57,120 --> 00:21:01,710
a normal class situation you would just

00:20:58,980 --> 00:21:06,210
set then it would be set for all

00:21:01,710 --> 00:21:08,760
children which extend that base class so

00:21:06,210 --> 00:21:12,890
it will be over it will be set for all

00:21:08,760 --> 00:21:15,510
now in this case it will not because

00:21:12,890 --> 00:21:21,029
there is no base class which with traits

00:21:15,510 --> 00:21:27,179
it's just a copy paste so we have the

00:21:21,029 --> 00:21:33,929
get local return self local and we have

00:21:27,179 --> 00:21:37,289
the class alpha return self local so

00:21:33,929 --> 00:21:41,279
let's take a look at that when we do an

00:21:37,289 --> 00:21:45,149
alpha set local first the initial one

00:21:41,279 --> 00:21:51,690
the static is set to an English us if we

00:21:45,149 --> 00:21:54,720
set it then it will be n lbe the same

00:21:51,690 --> 00:22:01,049
here because it's just a static which is

00:21:54,720 --> 00:22:06,390
being a copy paste here but if we have

00:22:01,049 --> 00:22:13,110
multiple ones take a look

00:22:06,390 --> 00:22:18,120
okay yes if we have if we have multiple

00:22:13,110 --> 00:22:21,840
ones where we okay where we say we have

00:22:18,120 --> 00:22:24,810
alpha and we have beta so beta use the

00:22:21,840 --> 00:22:27,330
local off i use the local so we both

00:22:24,810 --> 00:22:31,110
have x to the static public local

00:22:27,330 --> 00:22:36,300
english us if we are going to set it in

00:22:31,110 --> 00:22:39,570
the Alpha object it will not be set into

00:22:36,300 --> 00:22:42,450
the beta object why it's not like class

00:22:39,570 --> 00:22:44,550
you don't exchange something again it's

00:22:42,450 --> 00:22:47,070
copy paste inside that's something you

00:22:44,550 --> 00:22:49,500
really have to understand once you

00:22:47,070 --> 00:22:50,880
understand that using trades it's not

00:22:49,500 --> 00:22:57,140
that difficult and it's not that hard

00:22:50,880 --> 00:22:59,970
and it actually makes a lot of sense so

00:22:57,140 --> 00:23:05,450
aliasing it's useful to replace a parent

00:22:59,970 --> 00:23:07,980
contract because when we take a look at

00:23:05,450 --> 00:23:11,130
this is M this trade for instance where

00:23:07,980 --> 00:23:17,820
we have dispatch request and response

00:23:11,130 --> 00:23:26,600
and we're going to use the an abstract

00:23:17,820 --> 00:23:26,600
class which uses the dispatch trait but

00:23:26,690 --> 00:23:31,330
we do not want to override this method

00:23:31,390 --> 00:23:37,310
which is defined in the trade then we

00:23:35,420 --> 00:23:40,460
can say use the dispatch method and

00:23:37,310 --> 00:23:41,870
rename it to another name so in this

00:23:40,460 --> 00:23:45,530
case we just rename it to dispatch

00:23:41,870 --> 00:23:47,390
straight in real life you would want to

00:23:45,530 --> 00:23:50,930
name it to something else but it's just

00:23:47,390 --> 00:23:54,500
for just to indicate that you will be

00:23:50,930 --> 00:23:58,010
using the trait of the dispatch so you

00:23:54,500 --> 00:24:01,370
can say this dispatch straight request

00:23:58,010 --> 00:24:04,070
response so both methods will still be

00:24:01,370 --> 00:24:06,400
available you will not overwrite the

00:24:04,070 --> 00:24:06,400
other one

00:24:09,610 --> 00:24:17,980
but because you could rename methods to

00:24:15,370 --> 00:24:21,340
something else it could also become a

00:24:17,980 --> 00:24:26,410
real potential nightmare in refactoring

00:24:21,340 --> 00:24:28,450
and and understanding your coach why you

00:24:26,410 --> 00:24:35,820
could have set options and you could

00:24:28,450 --> 00:24:35,820
rename it to set config now you have two

00:24:36,210 --> 00:24:42,160
two strings to search on you will have

00:24:39,910 --> 00:24:43,900
to search if you want to refactor it you

00:24:42,160 --> 00:24:46,470
will have to search for set config and

00:24:43,900 --> 00:24:49,470
you will have to search for set options

00:24:46,470 --> 00:24:49,470
it's

00:24:49,710 --> 00:24:54,659
it's not that easy because you are

00:24:51,870 --> 00:24:56,760
defining that you are overriding it not

00:24:54,659 --> 00:25:00,390
on a global level you're overriding it

00:24:56,760 --> 00:25:03,330
at class level so in this class you

00:25:00,390 --> 00:25:07,429
could rename that set options straight

00:25:03,330 --> 00:25:10,320
methods a set config and in another

00:25:07,429 --> 00:25:15,270
class you could rename it to options set

00:25:10,320 --> 00:25:18,539
options set special options and you have

00:25:15,270 --> 00:25:20,820
no idea where it's set or how it's set

00:25:18,539 --> 00:25:25,320
so you would now have to you cannot just

00:25:20,820 --> 00:25:27,270
do a search on set options and rename it

00:25:25,320 --> 00:25:29,549
in your workspace you cannot do that now

00:25:27,270 --> 00:25:34,159
you would have to first search for set

00:25:29,549 --> 00:25:37,710
options find all the aliases and then

00:25:34,159 --> 00:25:42,360
rename also all the aliases again so

00:25:37,710 --> 00:25:46,950
that's a lot of a lot of the overhead

00:25:42,360 --> 00:25:49,490
which could be introduced now the

00:25:46,950 --> 00:25:49,490
visibility

00:25:54,850 --> 00:26:02,029
the feasibility we have the youth

00:25:59,210 --> 00:26:08,360
options and we saw that for specific

00:26:02,029 --> 00:26:13,370
methods we define them as public

00:26:08,360 --> 00:26:15,590
protected final whatever sometimes we

00:26:13,370 --> 00:26:18,830
want to change it because a certain

00:26:15,590 --> 00:26:21,110
class does not want to expose it set

00:26:18,830 --> 00:26:22,340
options methods you have to set the

00:26:21,110 --> 00:26:25,010
options through the constructor for

00:26:22,340 --> 00:26:27,549
instance it could happen and then you

00:26:25,010 --> 00:26:32,120
can say okay the public set options

00:26:27,549 --> 00:26:35,330
needs to be protected you can do that by

00:26:32,120 --> 00:26:39,529
just clearing it while importing the

00:26:35,330 --> 00:26:43,039
trade and in this case you will have to

00:26:39,529 --> 00:26:46,250
pass it through the constructor now

00:26:43,039 --> 00:26:50,990
because we can ally us we can also have

00:26:46,250 --> 00:26:56,260
interfaced compliance because normally

00:26:50,990 --> 00:27:01,730
when we say okay interface set options

00:26:56,260 --> 00:27:07,039
the we know that that class will have a

00:27:01,730 --> 00:27:12,289
method that options or even set config

00:27:07,039 --> 00:27:14,210
and that makes it into a little bit

00:27:12,289 --> 00:27:16,279
interesting here we have the interface

00:27:14,210 --> 00:27:19,909
and we want to have the method set

00:27:16,279 --> 00:27:24,710
config available if we implement it but

00:27:19,909 --> 00:27:29,240
the options are set option so here we

00:27:24,710 --> 00:27:32,600
say no okay imported but rename the set

00:27:29,240 --> 00:27:38,919
options method as set config and by

00:27:32,600 --> 00:27:44,019
doing this we actually implement and and

00:27:38,919 --> 00:27:44,019
allow the interface to be matched

00:27:44,889 --> 00:27:47,889
so

00:28:10,279 --> 00:28:24,320
okay instance off can we use instance of

00:28:15,759 --> 00:28:28,700
no we cannot if you cannot if you cannot

00:28:24,320 --> 00:28:31,460
make a check whether a trait has been

00:28:28,700 --> 00:28:35,840
implemented like like with an interface

00:28:31,460 --> 00:28:39,320
you cannot just a piece of code it's get

00:28:35,840 --> 00:28:42,589
imported and there is no way of checking

00:28:39,320 --> 00:28:46,669
it you can check for an interface but

00:28:42,589 --> 00:28:49,099
you cannot check for trade so that's

00:28:46,669 --> 00:28:52,700
something you have to also be aware of

00:28:49,099 --> 00:28:54,859
which you want to do a check on on a

00:28:52,700 --> 00:29:02,089
trade no actually not because you can do

00:28:54,859 --> 00:29:04,789
a liasing so if you would say this is

00:29:02,089 --> 00:29:08,229
the object template zach is it an

00:29:04,789 --> 00:29:11,479
instance of options and it would say yes

00:29:08,229 --> 00:29:13,879
we'd say true then that would not mean

00:29:11,479 --> 00:29:16,369
that you which have to use set options

00:29:13,879 --> 00:29:19,719
that are as I methods because it could

00:29:16,369 --> 00:29:19,719
be renamed as set config

00:29:21,650 --> 00:29:32,170
so let's take a look at abstraction if

00:29:28,880 --> 00:29:32,170
you want to set an abstract

00:29:35,640 --> 00:29:42,050
it won't set an abstract we want to

00:29:38,340 --> 00:29:46,380
define an abstract method in our trade

00:29:42,050 --> 00:29:52,940
and we say okay class used options

00:29:46,380 --> 00:29:52,940
public public function set options then

00:29:56,470 --> 00:29:59,490
that will not work

00:30:06,580 --> 00:30:11,880
you will have to set the options the

00:30:08,799 --> 00:30:18,309
abstract public function set options

00:30:11,880 --> 00:30:21,309
once you implement it as and we are

00:30:18,309 --> 00:30:24,039
going to set the config this this

00:30:21,309 --> 00:30:28,690
actually will work but when we set the

00:30:24,039 --> 00:30:35,380
options at set config and we have set

00:30:28,690 --> 00:30:40,419
options then we're actually not setting

00:30:35,380 --> 00:30:42,820
the the abstract the abstract method

00:30:40,419 --> 00:30:45,130
we're not doing that why because we're

00:30:42,820 --> 00:30:47,380
setting the we're setting and

00:30:45,130 --> 00:30:50,019
implementation for set config and we're

00:30:47,380 --> 00:30:53,950
not setting an implementation for for

00:30:50,019 --> 00:30:59,200
set options so a liasing here does not

00:30:53,950 --> 00:31:04,299
make you comply with the abstract you

00:30:59,200 --> 00:31:07,149
will get a fatal error so then there are

00:31:04,299 --> 00:31:13,470
also magic constants which is really

00:31:07,149 --> 00:31:17,950
useful if you want to use straight you

00:31:13,470 --> 00:31:22,570
you can have the constant straight and

00:31:17,950 --> 00:31:31,000
it will tell you which straight is being

00:31:22,570 --> 00:31:34,480
used so you have access to that if we

00:31:31,000 --> 00:31:39,039
are going to use the ket class in the in

00:31:34,480 --> 00:31:43,980
the from the trade because it's a copy

00:31:39,039 --> 00:31:46,750
paste you will again get food back so

00:31:43,980 --> 00:31:49,450
the class will be full because it's copy

00:31:46,750 --> 00:31:53,649
paste inside this class and a trait will

00:31:49,450 --> 00:31:56,889
be identified as ID now the outer

00:31:53,649 --> 00:31:59,769
loading is same thing as which classes

00:31:56,889 --> 00:32:06,220
or which for what you're used to right

00:31:59,769 --> 00:32:11,760
now so at the moment we use out eroding

00:32:06,220 --> 00:32:15,630
based on directory structure so we trade

00:32:11,760 --> 00:32:15,630
it's exactly the same

00:32:17,570 --> 00:32:26,250
so I would advise personally to like you

00:32:22,290 --> 00:32:28,410
do with with interfere with with

00:32:26,250 --> 00:32:32,400
abstract classes you because we're using

00:32:28,410 --> 00:32:35,820
namespace more and more to not just call

00:32:32,400 --> 00:32:38,130
it options or set options but you call

00:32:35,820 --> 00:32:41,430
it set options straight or something

00:32:38,130 --> 00:32:46,710
like that why because if you don't do

00:32:41,430 --> 00:32:51,560
that you will have because of your

00:32:46,710 --> 00:32:57,960
namespace you will laugh namespace trait

00:32:51,560 --> 00:33:00,360
namespace trade trade trade ally

00:32:57,960 --> 00:33:01,500
namespace whatever trade straight and

00:33:00,360 --> 00:33:06,990
that's not what he wants you want to

00:33:01,500 --> 00:33:08,490
have trade set options trade so that's

00:33:06,990 --> 00:33:16,950
something you would have to take into

00:33:08,490 --> 00:33:20,040
regard and I just got the closing signal

00:33:16,950 --> 00:33:23,220
so some good things I want to review

00:33:20,040 --> 00:33:27,210
about trades it removes a lot of coat

00:33:23,220 --> 00:33:31,050
application it helps in keeping your

00:33:27,210 --> 00:33:33,690
coat a lot cleaner also the

00:33:31,050 --> 00:33:36,000
maintainability is a lot better because

00:33:33,690 --> 00:33:37,590
you do not repeat yourself you don't

00:33:36,000 --> 00:33:41,220
differentiate between different small

00:33:37,590 --> 00:33:43,230
implementations aliasing it works for

00:33:41,220 --> 00:33:46,170
the interfaces so you can always comply

00:33:43,230 --> 00:33:49,380
that that's very good because we work a

00:33:46,170 --> 00:33:52,140
lot with interfaces a lot because that

00:33:49,380 --> 00:33:58,950
way you know what you expect from a

00:33:52,140 --> 00:34:02,550
client perspective if you can have

00:33:58,950 --> 00:34:04,140
property handling it's easy outer

00:34:02,550 --> 00:34:06,690
loading because you already do that on a

00:34:04,140 --> 00:34:09,740
daily basis now the bad thing about

00:34:06,690 --> 00:34:14,160
trade is it also adds code complexity

00:34:09,740 --> 00:34:16,260
complexity by using the inside of the

00:34:14,160 --> 00:34:20,600
institute of tom seaver ask you all a

00:34:16,260 --> 00:34:24,570
lot really a lot when you any import

00:34:20,600 --> 00:34:26,429
trades but it can also gives you

00:34:24,570 --> 00:34:31,710
nightmares like with a

00:34:26,429 --> 00:34:34,710
set option to set config and such it's

00:34:31,710 --> 00:34:37,889
it's sometimes hard if you if you comply

00:34:34,710 --> 00:34:42,149
so and that also introduced duck typing

00:34:37,889 --> 00:34:45,809
because you have actually and you have

00:34:42,149 --> 00:34:47,760
actually no idea anymore what the class

00:34:45,809 --> 00:34:57,619
behaves like because you could import a

00:34:47,760 --> 00:35:01,920
trait which will say quack prints and

00:34:57,619 --> 00:35:06,630
into a car object and the quack method

00:35:01,920 --> 00:35:10,710
will still be available but the so your

00:35:06,630 --> 00:35:15,690
car will start acting like a like a duck

00:35:10,710 --> 00:35:19,010
and yeah that's not nice so it's a

00:35:15,690 --> 00:35:22,230
little bit it's a little bit strange so

00:35:19,010 --> 00:35:26,430
the alia thing it fails for abstract

00:35:22,230 --> 00:35:28,829
class you cannot you have to and a trade

00:35:26,430 --> 00:35:32,700
can enforce yourself to use and to

00:35:28,829 --> 00:35:36,270
implement an abstract method but you

00:35:32,700 --> 00:35:39,839
cannot use an alias for that because you

00:35:36,270 --> 00:35:42,440
have to implement the abstract methods

00:35:39,839 --> 00:35:45,450
as it was defined in a trade not a alyas

00:35:42,440 --> 00:35:49,829
so then at that time the aliens gets get

00:35:45,450 --> 00:35:52,349
lost and the property handling is also

00:35:49,829 --> 00:35:55,020
something that good gets complex but

00:35:52,349 --> 00:35:58,829
it's not really a negative sign it's

00:35:55,020 --> 00:36:02,910
just a part of bad design decisions

00:35:58,829 --> 00:36:07,109
because you should be aware of your of

00:36:02,910 --> 00:36:12,839
what your property initially Institute

00:36:07,109 --> 00:36:19,410
so it's best to always use the letters

00:36:12,839 --> 00:36:21,540
indicators so I want to quickly review

00:36:19,410 --> 00:36:24,480
the benchmarks for five to three and

00:36:21,540 --> 00:36:28,260
five at four so for the people I've got

00:36:24,480 --> 00:36:31,950
a framework project just my my website

00:36:28,260 --> 00:36:35,460
now I benchmark is with each 8 prov how

00:36:31,950 --> 00:36:37,170
I create two virtual machines exactly

00:36:35,460 --> 00:36:40,020
the same there just to debian clones

00:36:37,170 --> 00:36:43,320
exactly the same i close I creative

00:36:40,020 --> 00:36:46,500
a deviant virtual machine i cloned it

00:36:43,320 --> 00:36:52,260
and I upgrade 2584 that's the only thing

00:36:46,500 --> 00:36:56,460
I did so I mean 5 23 23 I had the wall

00:36:52,260 --> 00:36:59,310
time of 600 but I've got cpu of 600

00:36:56,460 --> 00:37:02,820
milliseconds at total memory usage of 13

00:36:59,310 --> 00:37:05,600
megabytes she's a lot and the number of

00:37:02,820 --> 00:37:13,880
function calls now let's take a look at

00:37:05,600 --> 00:37:18,690
5 24 10 my cpu is 168 so that's one port

00:37:13,880 --> 00:37:21,090
so by just upgrading your PHP version

00:37:18,690 --> 00:37:23,010
you don't have to do anything more just

00:37:21,090 --> 00:37:25,440
upgrade from five to three to five at

00:37:23,010 --> 00:37:30,180
four and your boss can save a lot of

00:37:25,440 --> 00:37:35,010
servers so total memory usage also it

00:37:30,180 --> 00:37:39,260
went from 14 almost 28 that's almost

00:37:35,010 --> 00:37:45,470
half just by upgrading your PHP version

00:37:39,260 --> 00:37:49,230
so there's there's actually not really

00:37:45,470 --> 00:37:50,820
any reason why not to do it you don't

00:37:49,230 --> 00:37:52,650
have to use trades you don't have to use

00:37:50,820 --> 00:37:57,480
all the other fancy stuff which is

00:37:52,650 --> 00:38:01,260
including five dot for but who doesn't

00:37:57,480 --> 00:38:05,970
want this so try try to upgrade try to

00:38:01,260 --> 00:38:10,950
look up that level from almost four

00:38:05,970 --> 00:38:16,560
percent of worldwide php5 out for usage

00:38:10,950 --> 00:38:22,220
try to make it a go up so at the moment

00:38:16,560 --> 00:38:26,910
four runs PHP 54 in production okay oh

00:38:22,220 --> 00:38:29,970
so great and continue doing that for the

00:38:26,910 --> 00:38:33,390
others yes shame on you it's already I

00:38:29,970 --> 00:38:38,940
year old and it's stable we are running

00:38:33,390 --> 00:38:42,900
at five dot 584 dot one dot one so we

00:38:38,940 --> 00:38:46,080
already have the 584 dot one we are not

00:38:42,900 --> 00:38:48,450
at five is for dot zero anymore so you

00:38:46,080 --> 00:38:52,220
have to upgrade

00:38:48,450 --> 00:38:54,869
and that's it you can find my slides

00:38:52,220 --> 00:39:00,089
soon I will put them at my facebook

00:38:54,869 --> 00:39:04,170
which is to open you can read my talk at

00:39:00,089 --> 00:39:06,560
joined in and with this i want to thank

00:39:04,170 --> 00:39:06,560
you

00:39:20,480 --> 00:39:22,540

YouTube URL: https://www.youtube.com/watch?v=mussJGZos4w


