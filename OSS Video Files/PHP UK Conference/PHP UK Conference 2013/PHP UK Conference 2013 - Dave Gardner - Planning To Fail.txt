Title: PHP UK Conference 2013 - Dave Gardner - Planning To Fail
Publication date: 2013-05-01
Playlist: PHP UK Conference 2013
Description: 
	Looking at how to build highly available systems in PHP by planning to fail. This talk will offer a number of heuristics that will help you build highly available systems including choosing technologies, software design patterns and failure simulations.

Slides: http://www.slideshare.net/davegardnerisme/planning-to-fail
Captions: 
	00:00:12,590 --> 00:00:21,050
okay so my name is Dave for the benefit

00:00:16,850 --> 00:00:23,510
of people next door this is me and i

00:00:21,050 --> 00:00:26,180
work at halo which is the taxi out for

00:00:23,510 --> 00:00:29,050
anyone who hasn't heard of it and my

00:00:26,180 --> 00:00:31,430
talk today is entitled planning to fail

00:00:29,050 --> 00:00:33,949
being that this is the first talk I've

00:00:31,430 --> 00:00:35,720
ever done a PHP conference there seems

00:00:33,949 --> 00:00:39,410
to be like a degree of tempting fate in

00:00:35,720 --> 00:00:42,500
the title and I did al-manar about this

00:00:39,410 --> 00:00:45,350
title I considered a cut of less

00:00:42,500 --> 00:00:46,579
aggressive planning for failure but then

00:00:45,350 --> 00:00:48,410
that to me seemed like more of a

00:00:46,579 --> 00:00:50,899
monitoring talk you know reacting to

00:00:48,410 --> 00:00:53,239
failure whereas I'm really going after

00:00:50,899 --> 00:00:56,840
failure here I'm actually planning to

00:00:53,239 --> 00:00:59,149
fail I'm going to break stuff here and

00:00:56,840 --> 00:01:01,579
the aim is by breaking stuff we can end

00:00:59,149 --> 00:01:05,449
up with a reliable system a system that

00:01:01,579 --> 00:01:08,899
works at scale and it doesn't fail so

00:01:05,449 --> 00:01:11,479
that's what my talk is about but before

00:01:08,899 --> 00:01:14,570
we get into the details I do want i'll

00:01:11,479 --> 00:01:19,220
rewind to the beginning so where I

00:01:14,570 --> 00:01:22,940
started out in the PHP world the wonder

00:01:19,220 --> 00:01:25,819
of inserting a PHP open tag into an HTML

00:01:22,940 --> 00:01:26,990
table Drella in some web page and then

00:01:25,819 --> 00:01:29,390
you know getting some stuff from the

00:01:26,990 --> 00:01:33,110
database that's the way it used to be

00:01:29,390 --> 00:01:36,140
done and my website kind of still does

00:01:33,110 --> 00:01:38,810
that it's a little bit more advanced

00:01:36,140 --> 00:01:42,020
than that and it runs wordpress you know

00:01:38,810 --> 00:01:44,720
it's arguably over-engineered it runs on

00:01:42,020 --> 00:01:49,459
a single VPS it's a really simple PHP

00:01:44,720 --> 00:01:51,740
MySQL web app and my websites quite

00:01:49,459 --> 00:01:54,020
reliable I don't actually have any

00:01:51,740 --> 00:01:56,330
reliability figures I don't monitor it

00:01:54,020 --> 00:01:58,789
if it went down I probably wouldn't

00:01:56,330 --> 00:02:01,670
notice but the Google Analytics traffic

00:01:58,789 --> 00:02:03,679
seems reasonably kind of stable so I'll

00:02:01,670 --> 00:02:08,959
assume that my website is pretty

00:02:03,679 --> 00:02:10,130
reliable and part of the reason for the

00:02:08,959 --> 00:02:12,200
reason that you know the reason it's

00:02:10,130 --> 00:02:16,010
reliable is because it's a very simple

00:02:12,200 --> 00:02:17,660
website it doesn't have to do a lot it

00:02:16,010 --> 00:02:20,959
could even arguably be simple I could

00:02:17,660 --> 00:02:22,549
probably be a static HTML it doesn't

00:02:20,959 --> 00:02:24,739
have much growth you can see the traffic

00:02:22,549 --> 00:02:26,420
figures are pretty stable I haven't been

00:02:24,739 --> 00:02:28,400
slashed dotted recently

00:02:26,420 --> 00:02:30,080
there's no enormous spikes there's

00:02:28,400 --> 00:02:31,400
nothing out of the ordinary and there's

00:02:30,080 --> 00:02:33,140
only one person who ever works in there

00:02:31,400 --> 00:02:36,080
and that's me and I then work on it very

00:02:33,140 --> 00:02:38,840
often so over all that kind of leads to

00:02:36,080 --> 00:02:44,680
a nice stable system and stable systems

00:02:38,840 --> 00:02:47,209
are normally reliable so at halo halo

00:02:44,680 --> 00:02:48,500
for anyone who doesn't know it's a taxi

00:02:47,209 --> 00:02:51,230
app you press a button on your

00:02:48,500 --> 00:02:54,489
smartphone and we'll dispatch a black

00:02:51,230 --> 00:02:57,319
cab driver in London to come and get you

00:02:54,489 --> 00:02:59,239
the company has been around for a while

00:02:57,319 --> 00:03:01,610
now but oh just over a year and it's

00:02:59,239 --> 00:03:04,450
it's a company that it's experiencing

00:03:01,610 --> 00:03:06,560
quite large growth we've just completed

00:03:04,450 --> 00:03:08,989
second round of financing and we've

00:03:06,560 --> 00:03:10,400
raised 50 million dollars so far so that

00:03:08,989 --> 00:03:13,100
kind of gives you some idea as to the

00:03:10,400 --> 00:03:14,660
scale of the company's ambitions and

00:03:13,100 --> 00:03:17,360
that kind of does translate to the tech

00:03:14,660 --> 00:03:19,250
level as well it's a reasonably high

00:03:17,360 --> 00:03:20,720
volume website it's not enormous it's

00:03:19,250 --> 00:03:22,640
not you know like Facebook or the thing

00:03:20,720 --> 00:03:24,560
but we we have via the app gets a

00:03:22,640 --> 00:03:26,810
reasonable amount of traffic and it's

00:03:24,560 --> 00:03:28,819
quite unreliable traffic it can be you

00:03:26,810 --> 00:03:30,920
know special events like New Year's Eve

00:03:28,819 --> 00:03:32,329
can catch us off guard and we haven't

00:03:30,920 --> 00:03:34,070
had that many New Year's Eve since we've

00:03:32,329 --> 00:03:36,170
been launched so we're not really sure

00:03:34,070 --> 00:03:39,530
what to expect so this is that kind of

00:03:36,170 --> 00:03:41,570
degree of the unknown the functionality

00:03:39,530 --> 00:03:43,609
seems quite simple on the surface you

00:03:41,570 --> 00:03:45,590
press a button a taxi comes in guess you

00:03:43,609 --> 00:03:48,019
but there is quite a lot of complexity

00:03:45,590 --> 00:03:50,840
there people whenever I try and explain

00:03:48,019 --> 00:03:52,730
what I do to my dad he is like so it's

00:03:50,840 --> 00:03:55,070
just a taxi app how many people were

00:03:52,730 --> 00:03:56,840
there what do you all do and I'll try

00:03:55,070 --> 00:03:58,609
and explain what we do and how we build

00:03:56,840 --> 00:03:59,930
it but there is quite a lot of

00:03:58,609 --> 00:04:02,470
functionality there and there's a lot of

00:03:59,930 --> 00:04:05,000
engineers working on that functionality

00:04:02,470 --> 00:04:07,250
so this is just some like stats about

00:04:05,000 --> 00:04:10,370
halo and where we wear out and where

00:04:07,250 --> 00:04:13,489
we've been halo launched in in London

00:04:10,370 --> 00:04:16,010
it's a London company in november two

00:04:13,489 --> 00:04:18,500
thousand eleven and we're now in five

00:04:16,010 --> 00:04:23,840
cities in three countries on two

00:04:18,500 --> 00:04:25,340
continents in the US and europe a halo

00:04:23,840 --> 00:04:28,070
Haley's except around the world every

00:04:25,340 --> 00:04:29,360
five seconds so we've got quite a lot of

00:04:28,070 --> 00:04:31,850
traction already in quite a short amount

00:04:29,360 --> 00:04:34,190
of time and the growth is kind of

00:04:31,850 --> 00:04:37,550
roughly thirty percent month or month so

00:04:34,190 --> 00:04:39,860
we're getting bigger and bigger and what

00:04:37,550 --> 00:04:43,759
does that mean what does that mean for

00:04:39,860 --> 00:04:46,599
halo operates and halos reliability this

00:04:43,759 --> 00:04:49,400
is a quote I found in one of the papers

00:04:46,599 --> 00:04:50,389
from the nice girl summer project I

00:04:49,400 --> 00:04:53,659
don't know if anyone was familiar with

00:04:50,389 --> 00:04:55,819
that it's quite an interesting website

00:04:53,659 --> 00:04:58,189
and it was all about getting together

00:04:55,819 --> 00:04:59,870
and discussing distributed systems and

00:04:58,189 --> 00:05:01,729
they've got a list of a load of papers

00:04:59,870 --> 00:05:03,909
actually of academic type papers and

00:05:01,729 --> 00:05:06,500
this is from one about harvest and yield

00:05:03,909 --> 00:05:08,000
and it brings together two ideas and one

00:05:06,500 --> 00:05:09,650
of them is from Brooks and it's saying

00:05:08,000 --> 00:05:12,680
that the complexity of a software

00:05:09,650 --> 00:05:14,870
project grows as the square of the

00:05:12,680 --> 00:05:16,520
number of Engineers and then it brings

00:05:14,870 --> 00:05:19,099
together a second idea which is saying

00:05:16,520 --> 00:05:21,080
that most failures in complex systems

00:05:19,099 --> 00:05:23,029
are going to result from intra component

00:05:21,080 --> 00:05:25,370
bugs rather than so the kind of you know

00:05:23,029 --> 00:05:28,849
how component a tools to component be

00:05:25,370 --> 00:05:31,279
rather than bugs within one component so

00:05:28,849 --> 00:05:33,439
the conclusion of this paper makes is

00:05:31,279 --> 00:05:35,210
that less machinery is is quadratically

00:05:33,439 --> 00:05:37,069
better so basically the more stuff

00:05:35,210 --> 00:05:38,689
you've got that's not not just like a

00:05:37,069 --> 00:05:39,979
linear you know I'm going to have a

00:05:38,689 --> 00:05:42,349
linear impact is actually have a

00:05:39,979 --> 00:05:48,370
quadratic impact on on how your system

00:05:42,349 --> 00:05:50,750
is likely to fail so halo well we have

00:05:48,370 --> 00:05:52,460
we have a bunch of services so we have

00:05:50,750 --> 00:05:55,639
you know ten component to the moment and

00:05:52,460 --> 00:05:58,819
we're adding more we run machines are on

00:05:55,639 --> 00:06:01,159
AWS in three geographic regions in nine

00:05:58,819 --> 00:06:03,050
availability zones lots and lots of

00:06:01,159 --> 00:06:04,490
instances I think including all of our

00:06:03,050 --> 00:06:07,580
staging and test ones we've got a couple

00:06:04,490 --> 00:06:09,860
of hundred instances and we've got ten

00:06:07,580 --> 00:06:11,330
engineers building the service side of

00:06:09,860 --> 00:06:13,610
it so that's ignoring all the app stuff

00:06:11,330 --> 00:06:16,370
and this is just kind of the backend

00:06:13,610 --> 00:06:17,689
stuff and in fact we're adding people so

00:06:16,370 --> 00:06:22,310
if anyone's interested you can come and

00:06:17,689 --> 00:06:24,589
grab me later so what this means is our

00:06:22,310 --> 00:06:27,289
overall reliability is in danger this

00:06:24,589 --> 00:06:28,789
extra complexity is and the fact that

00:06:27,289 --> 00:06:30,199
hey I've got all these engineers always

00:06:28,789 --> 00:06:32,990
all these moving parts all this

00:06:30,199 --> 00:06:34,819
machinery means that we're going to have

00:06:32,990 --> 00:06:38,089
to do something to kind of protect our

00:06:34,819 --> 00:06:39,949
reliability of our overall system and

00:06:38,089 --> 00:06:41,270
the coping strategy one of our coping

00:06:39,949 --> 00:06:44,330
strategies that would come up with is to

00:06:41,270 --> 00:06:47,120
kind of embrace failure and really and

00:06:44,330 --> 00:06:49,699
really take Taylor on so by doing

00:06:47,120 --> 00:06:52,039
something a lot you generally get better

00:06:49,699 --> 00:06:55,099
at it so by failing a lot we can get

00:06:52,039 --> 00:06:58,139
better at dealing with failure

00:06:55,099 --> 00:06:59,309
so this is the the chaos monkey kind of

00:06:58,139 --> 00:07:01,259
approach and I'm sure a lot of people

00:06:59,309 --> 00:07:03,629
have heard of that and this is a kind of

00:07:01,259 --> 00:07:06,659
Netflix popularized this idea which is

00:07:03,629 --> 00:07:08,550
they've got they've got a sort of demon

00:07:06,659 --> 00:07:10,740
that runs during office hours and

00:07:08,550 --> 00:07:12,779
randomly kills boxes within their live

00:07:10,740 --> 00:07:14,879
infrastructure and that's quite a brave

00:07:12,779 --> 00:07:17,279
approach and we're not quite at that

00:07:14,879 --> 00:07:20,639
level yet but it's the same sort of

00:07:17,279 --> 00:07:23,279
concept so let's just go back and see

00:07:20,639 --> 00:07:25,889
how this might impact my website my

00:07:23,279 --> 00:07:31,770
reliable website the high run from my

00:07:25,889 --> 00:07:35,759
single VPC that runs PHP and MySQL so it

00:07:31,770 --> 00:07:39,300
is a reliable system but it's not

00:07:35,759 --> 00:07:42,120
resilient my my website is not resilient

00:07:39,300 --> 00:07:45,210
if I applied the chaos monkey approach

00:07:42,120 --> 00:07:48,210
to to my website it's not going to do me

00:07:45,210 --> 00:07:49,800
many favors any one component I choose

00:07:48,210 --> 00:07:52,229
to randomly kill is going to make

00:07:49,800 --> 00:07:54,389
everything stop working so what we need

00:07:52,229 --> 00:07:58,439
to do is we need to kind of think about

00:07:54,389 --> 00:08:00,689
this ahead of time for my website this

00:07:58,439 --> 00:08:02,339
doesn't matter my website is not a bus

00:08:00,689 --> 00:08:06,209
timetable up this is not life and death

00:08:02,339 --> 00:08:09,120
stuff so it doesn't matter no one's

00:08:06,209 --> 00:08:10,860
going to die but we do need to choose a

00:08:09,120 --> 00:08:13,050
stack that's going to work we need to

00:08:10,860 --> 00:08:15,719
pick things that are going to react well

00:08:13,050 --> 00:08:16,979
to this pattern and so what I'd like to

00:08:15,719 --> 00:08:19,129
do now is talk a little bit about the

00:08:16,979 --> 00:08:21,389
halo stack and how we choose

00:08:19,129 --> 00:08:22,770
technologies that we use a halo and the

00:08:21,389 --> 00:08:25,229
sorts of technologies that we're using

00:08:22,770 --> 00:08:28,050
four different things season Howe halo

00:08:25,229 --> 00:08:30,509
started out entirely but it's kind of

00:08:28,050 --> 00:08:34,019
close on the PHP side certainly there is

00:08:30,509 --> 00:08:35,909
a lot of driver as well we have like in

00:08:34,019 --> 00:08:37,349
a single box bit on my website so

00:08:35,909 --> 00:08:38,550
obviously we kind of already get in the

00:08:37,349 --> 00:08:40,829
hint that this probably isn't all that

00:08:38,550 --> 00:08:42,329
resilient which means that it may be

00:08:40,829 --> 00:08:45,500
reliable but it's not going to go well

00:08:42,329 --> 00:08:47,519
with failure so we're splitting it up

00:08:45,500 --> 00:08:49,500
we're taking the functionality that

00:08:47,519 --> 00:08:50,910
there is halo and we're identifying

00:08:49,500 --> 00:08:52,649
individual services and we're building

00:08:50,910 --> 00:08:54,810
out a service-oriented architecture and

00:08:52,649 --> 00:08:58,319
SOA so what that really means is that we

00:08:54,810 --> 00:08:59,760
end up with lots of chunks of sort of

00:08:58,319 --> 00:09:01,199
web services and each one of them does

00:08:59,760 --> 00:09:04,290
one thing and it does that one thing

00:09:01,199 --> 00:09:05,880
well so one of them might be a service

00:09:04,290 --> 00:09:07,420
just for storing customer details and

00:09:05,880 --> 00:09:10,280
it'll just do that one thing

00:09:07,420 --> 00:09:13,160
and the advantage this is it's a it's a

00:09:10,280 --> 00:09:15,740
good way of kind of coping with with a

00:09:13,160 --> 00:09:17,330
growing team and a growing complexity

00:09:15,740 --> 00:09:18,740
and growing number of Engineers because

00:09:17,330 --> 00:09:20,600
you kind of silo things and it means

00:09:18,740 --> 00:09:22,850
that individual services don't change

00:09:20,600 --> 00:09:23,990
that often so often you know you'll be

00:09:22,850 --> 00:09:25,190
working on some feature and you won't

00:09:23,990 --> 00:09:26,660
have to change every single service

00:09:25,190 --> 00:09:28,100
should just be working on one a bit of

00:09:26,660 --> 00:09:29,660
it so the rest of it you can just leave

00:09:28,100 --> 00:09:31,730
you have to deploy or anything it just

00:09:29,660 --> 00:09:34,100
stays the same so each we get some

00:09:31,730 --> 00:09:36,620
advantages from that so now we've got a

00:09:34,100 --> 00:09:37,910
service and this is a you know a service

00:09:36,620 --> 00:09:40,700
we've got it running on some box and

00:09:37,910 --> 00:09:42,050
it's PHP and it's MySQL again and I'm so

00:09:40,700 --> 00:09:43,430
we're thinking well maybe that's not

00:09:42,050 --> 00:09:46,010
going to be you know all I reliable

00:09:43,430 --> 00:09:47,780
either so we're thing okay well we'll

00:09:46,010 --> 00:09:50,060
put my squirrel on different box we've

00:09:47,780 --> 00:09:52,130
got our service and we can you know we

00:09:50,060 --> 00:09:54,260
can put in place a multi-master

00:09:52,130 --> 00:09:56,060
replication for mysql so now we're kind

00:09:54,260 --> 00:09:57,460
of getting a bit more resilient you know

00:09:56,060 --> 00:10:00,890
we can now start killing things

00:09:57,460 --> 00:10:02,960
theoretically if we if we had to web to

00:10:00,890 --> 00:10:05,150
service boxes talking to our multi

00:10:02,960 --> 00:10:06,770
master replicated mysql we should be

00:10:05,150 --> 00:10:11,720
able to start killing things without it

00:10:06,770 --> 00:10:14,600
taking down the entire system but halo

00:10:11,720 --> 00:10:18,410
is a global company and we're not in

00:10:14,600 --> 00:10:20,600
london anymore we are in london we have

00:10:18,410 --> 00:10:23,690
launched in toronto and boston and

00:10:20,600 --> 00:10:26,120
chicago new york and tokyo going to be

00:10:23,690 --> 00:10:28,100
coming soon we've already got the data

00:10:26,120 --> 00:10:32,240
center in singapore sort of ready for

00:10:28,100 --> 00:10:33,710
the tokyo launch so at this point mysql

00:10:32,240 --> 00:10:36,260
starts to look a little bit less

00:10:33,710 --> 00:10:38,000
attractive because of the kind of the

00:10:36,260 --> 00:10:40,910
global distribution we want to achieve

00:10:38,000 --> 00:10:43,310
we want you to be able to get on a plane

00:10:40,910 --> 00:10:44,720
go on a holiday pull out your halo app

00:10:43,310 --> 00:10:47,540
and book a taxi and whatever wherever

00:10:44,720 --> 00:10:48,650
you land basically so what we've been

00:10:47,540 --> 00:10:52,310
doing is we've been taking the

00:10:48,650 --> 00:10:53,720
functionality of MySQL and separating

00:10:52,310 --> 00:10:56,210
out into the different things that we

00:10:53,720 --> 00:10:59,000
were using it for so we were using it

00:10:56,210 --> 00:11:02,390
for basic crud get me this record save a

00:10:59,000 --> 00:11:04,460
record we were using locking in the form

00:11:02,390 --> 00:11:06,200
of transactions so we would it would it

00:11:04,460 --> 00:11:07,340
would surround that with some locking so

00:11:06,200 --> 00:11:09,950
we could make sure that we were the only

00:11:07,340 --> 00:11:12,140
person updating something we were using

00:11:09,950 --> 00:11:15,740
it for search with things like select

00:11:12,140 --> 00:11:18,290
star from foo where you know X like %

00:11:15,740 --> 00:11:19,990
some crazy query we were using it for

00:11:18,290 --> 00:11:22,180
analytics so we were doing yes

00:11:19,990 --> 00:11:25,300
select some nests average the other

00:11:22,180 --> 00:11:26,740
group by this and we were using a Friday

00:11:25,300 --> 00:11:29,529
generation in the form of the might have

00:11:26,740 --> 00:11:31,060
mysql auto increment IDs so MySQL was

00:11:29,529 --> 00:11:34,149
doing an enormous amount of work for us

00:11:31,060 --> 00:11:36,010
and that was absolutely fantastic until

00:11:34,149 --> 00:11:38,920
you come to try and do that in a way

00:11:36,010 --> 00:11:41,050
that has kind of global the globally

00:11:38,920 --> 00:11:45,430
distributed system that it's going to be

00:11:41,050 --> 00:11:48,580
resilient reliable so what we're doing

00:11:45,430 --> 00:11:50,350
is we've we've kind of the newer things

00:11:48,580 --> 00:11:52,060
we're building we're looking to use

00:11:50,350 --> 00:11:56,230
other technologies that will do

00:11:52,060 --> 00:11:58,420
individual tasks well to satisfy those

00:11:56,230 --> 00:12:01,149
kind of features that were after and

00:11:58,420 --> 00:12:02,230
we're looking for us there's a certain

00:12:01,149 --> 00:12:03,730
number of things we're looking for so

00:12:02,230 --> 00:12:05,680
the traits that we try and identify when

00:12:03,730 --> 00:12:06,910
they're picking technologies and these

00:12:05,680 --> 00:12:08,380
are kind of the headlines we're looking

00:12:06,910 --> 00:12:10,899
for things that are distributed a

00:12:08,380 --> 00:12:13,000
modulus and resilient so we're looking

00:12:10,899 --> 00:12:14,380
for things that naturally run on more

00:12:13,000 --> 00:12:17,440
than one machine so that's the

00:12:14,380 --> 00:12:20,880
distributed bit we want them all to look

00:12:17,440 --> 00:12:25,060
the same we want to be able to deploy

00:12:20,880 --> 00:12:27,279
some software that runs on 10 nodes and

00:12:25,060 --> 00:12:30,149
every single node looks the same so

00:12:27,279 --> 00:12:32,290
there's no special masters there's no

00:12:30,149 --> 00:12:36,730
special box that you have to kind of

00:12:32,290 --> 00:12:38,649
protect we want the Malta to be to have

00:12:36,730 --> 00:12:40,209
the same features functionality because

00:12:38,649 --> 00:12:41,860
that means that when we're operating the

00:12:40,209 --> 00:12:43,000
software it makes life a lot easier it

00:12:41,860 --> 00:12:45,610
means that the software is more

00:12:43,000 --> 00:12:47,230
operationally simple and we want them to

00:12:45,610 --> 00:12:48,790
be we want this software so we want two

00:12:47,230 --> 00:12:50,380
technologies to be resilient so we want

00:12:48,790 --> 00:12:52,000
to be able to kill around and boxes we

00:12:50,380 --> 00:12:57,610
wanted to be able to cope with that and

00:12:52,000 --> 00:12:59,529
carry on and this is just kind of to

00:12:57,610 --> 00:13:02,050
hammer home the point about the kind of

00:12:59,529 --> 00:13:04,089
homogenous nodes which is this is a

00:13:02,050 --> 00:13:06,550
quote from Ben black on this blog which

00:13:04,089 --> 00:13:10,510
says there is no such thing as stand-by

00:13:06,550 --> 00:13:12,700
infrastructure there is stuff you always

00:13:10,510 --> 00:13:15,010
use and the stuff that won't work when

00:13:12,700 --> 00:13:16,720
you need it so basically if anyone's in

00:13:15,010 --> 00:13:18,610
there thinking yeah we got a hot spare

00:13:16,720 --> 00:13:20,680
of that if this one goes wrong it's just

00:13:18,610 --> 00:13:23,680
going to take over all the load is we're

00:13:20,680 --> 00:13:25,149
going to work flawlessly and we don't

00:13:23,680 --> 00:13:27,399
like that pattern at halo because

00:13:25,149 --> 00:13:29,529
generally it doesn't work and it's quite

00:13:27,399 --> 00:13:31,240
hard to get right it's much easier if

00:13:29,529 --> 00:13:32,620
you've got two of something and they're

00:13:31,240 --> 00:13:34,990
both serving half the traffic

00:13:32,620 --> 00:13:36,340
or even better sort of three four five

00:13:34,990 --> 00:13:38,050
and they're all serving a fifth or

00:13:36,340 --> 00:13:42,130
whatever that's much easier to implement

00:13:38,050 --> 00:13:43,630
and operate so these are kind of the the

00:13:42,130 --> 00:13:47,460
headline technologies we've we've been

00:13:43,630 --> 00:13:49,750
using an halo cassandra is kind of the

00:13:47,460 --> 00:13:54,250
backbone in some respects it's the thing

00:13:49,750 --> 00:13:56,910
that does all that crud and it has some

00:13:54,250 --> 00:14:00,070
lovely features one of which is that

00:13:56,910 --> 00:14:01,780
operating a day a single database that

00:14:00,070 --> 00:14:04,660
spans three continents is actually quite

00:14:01,780 --> 00:14:06,610
easy with Cassandra now you can set it

00:14:04,660 --> 00:14:07,960
up it doesn't take long to set it up

00:14:06,610 --> 00:14:10,360
cassandra is probably one of the easiest

00:14:07,960 --> 00:14:12,580
things we operate in some respects we've

00:14:10,360 --> 00:14:14,440
kind of done apt-get install cassandra

00:14:12,580 --> 00:14:16,000
on a bunch of boxes and then we've kind

00:14:14,440 --> 00:14:19,150
of forgotten about it we haven't really

00:14:16,000 --> 00:14:20,530
had too many pain points or ramen out to

00:14:19,150 --> 00:14:22,060
invest in enormous amount of time in

00:14:20,530 --> 00:14:24,040
getting of running it just kind of works

00:14:22,060 --> 00:14:26,860
now in the newer versions the old

00:14:24,040 --> 00:14:29,560
versions are a bit crazy we use

00:14:26,860 --> 00:14:31,630
zookeeper and zookeeper takes off the

00:14:29,560 --> 00:14:34,840
job of like locking so if anyone hasn't

00:14:31,630 --> 00:14:36,580
heard of zookeeper zookeeper is billed

00:14:34,840 --> 00:14:38,500
as highly reliable distributed

00:14:36,580 --> 00:14:41,110
coordination so it's kind of that

00:14:38,500 --> 00:14:43,330
coordination better we're using so too

00:14:41,110 --> 00:14:44,650
if you want to say I'm the only one

00:14:43,330 --> 00:14:46,570
who's going to update this particular

00:14:44,650 --> 00:14:47,860
thing right now you need to get

00:14:46,570 --> 00:14:49,810
coordination you need to get an

00:14:47,860 --> 00:14:51,250
agreement from somewhere that that's

00:14:49,810 --> 00:14:53,440
going to happen and that's kind of what

00:14:51,250 --> 00:14:56,170
zookeeper gives us and there's a lot of

00:14:53,440 --> 00:14:58,930
kind of well known patterns that you can

00:14:56,170 --> 00:15:00,970
implement on top of zookeeper locking is

00:14:58,930 --> 00:15:03,610
one of them the other one we use a lot

00:15:00,970 --> 00:15:05,710
of is leadership election so if you want

00:15:03,610 --> 00:15:07,390
one node in a cluster to kind of be the

00:15:05,710 --> 00:15:09,310
one that's going to say hey I'm going to

00:15:07,390 --> 00:15:11,890
do this particular job that's another

00:15:09,310 --> 00:15:15,940
use for zookeeper so we use do keep it

00:15:11,890 --> 00:15:18,610
from PHP and Java we use elasticsearch

00:15:15,940 --> 00:15:22,420
to do our search terms so cassandra is a

00:15:18,610 --> 00:15:25,800
fantastic database but some people who

00:15:22,420 --> 00:15:28,510
come in from sort of the MySQL world

00:15:25,800 --> 00:15:29,800
mysql does all these things it does you

00:15:28,510 --> 00:15:31,420
know if you want to search you just go

00:15:29,800 --> 00:15:33,520
hey select stuff you know well where

00:15:31,420 --> 00:15:34,870
this is like this with Cassandra you

00:15:33,520 --> 00:15:36,250
can't do that you need to kind of design

00:15:34,870 --> 00:15:37,930
your queries upfront you need to think

00:15:36,250 --> 00:15:39,340
about how you're going to want to get

00:15:37,930 --> 00:15:41,230
the information back that you're putting

00:15:39,340 --> 00:15:42,460
in and something like elasticsearch

00:15:41,230 --> 00:15:45,440
means that we don't have to worry about

00:15:42,460 --> 00:15:47,600
building our own search engine we can

00:15:45,440 --> 00:15:49,160
we can just shovel stuff off elastic

00:15:47,600 --> 00:15:50,810
surgery and query it's like a mini

00:15:49,160 --> 00:15:53,300
search engine so we've found this to be

00:15:50,810 --> 00:15:54,920
pretty useful elasticsearch isn't on our

00:15:53,300 --> 00:15:58,010
critical path though but it's a tool we

00:15:54,920 --> 00:16:01,720
use the sort of administrative stuff we

00:15:58,010 --> 00:16:04,340
use n SQ which is a message queue system

00:16:01,720 --> 00:16:05,930
and this is something that open source

00:16:04,340 --> 00:16:10,250
by bit ly that's really a go and it's

00:16:05,930 --> 00:16:12,890
it's a fault-tolerant system with strong

00:16:10,250 --> 00:16:15,920
message guarantee delivery guarantees so

00:16:12,890 --> 00:16:20,360
we use this for for kind of for our

00:16:15,920 --> 00:16:23,300
analytics message flow we use croft

00:16:20,360 --> 00:16:25,280
flake which is the most rock solid piece

00:16:23,300 --> 00:16:26,390
of infrastructure we run and i think

00:16:25,280 --> 00:16:28,520
that's probably just due to the name

00:16:26,390 --> 00:16:30,710
alone so from now on we're going to try

00:16:28,520 --> 00:16:31,730
and call everything with a really crappy

00:16:30,710 --> 00:16:34,190
name that sounds really unreliable

00:16:31,730 --> 00:16:36,350
because then it will just work and this

00:16:34,190 --> 00:16:39,080
is kind of a clone of Twitter snowflake

00:16:36,350 --> 00:16:41,240
that's written in PHP and it uses zeromq

00:16:39,080 --> 00:16:43,520
sockets that have kind of thrift based

00:16:41,240 --> 00:16:44,870
interface so it just fit a bit easier

00:16:43,520 --> 00:16:46,550
without rest of our stack is through

00:16:44,870 --> 00:16:50,780
having to worry about thrift and running

00:16:46,550 --> 00:16:53,480
snowflake so there's something all of

00:16:50,780 --> 00:16:54,620
these things are in common and it's it's

00:16:53,480 --> 00:16:56,510
interesting that they're kind of like

00:16:54,620 --> 00:16:59,270
they're not broken by design which is

00:16:56,510 --> 00:17:01,040
the interesting point they're all they

00:16:59,270 --> 00:17:02,630
all share the same sort of traits and if

00:17:01,040 --> 00:17:03,470
you in if you go and investigate how

00:17:02,630 --> 00:17:05,600
they operate and how they've been

00:17:03,470 --> 00:17:07,250
designed you'll find that there's some

00:17:05,600 --> 00:17:09,560
quite solid things that underpin them

00:17:07,250 --> 00:17:11,290
I'm so in Cassandra which is something

00:17:09,560 --> 00:17:13,760
I'm sort of most familiar with I guess

00:17:11,290 --> 00:17:16,220
yam you've got you know the Amazon

00:17:13,760 --> 00:17:18,350
dynamo paper and that's kind of

00:17:16,220 --> 00:17:20,060
describes how your data is going to be

00:17:18,350 --> 00:17:22,640
distributed amongst cluster and it

00:17:20,060 --> 00:17:24,170
describes what kind of queries and

00:17:22,640 --> 00:17:25,420
consistency you'll be able to get out of

00:17:24,170 --> 00:17:28,400
Cassandra and how it's going to behave

00:17:25,420 --> 00:17:30,020
and it's that kind of fundamental good

00:17:28,400 --> 00:17:32,000
design that makes life easier for

00:17:30,020 --> 00:17:34,460
application developers because when you

00:17:32,000 --> 00:17:36,680
come to build your app you don't have to

00:17:34,460 --> 00:17:39,050
worry too much about you know this bit

00:17:36,680 --> 00:17:40,250
of software being flaky so i guess if

00:17:39,050 --> 00:17:41,780
anything if there's one take home

00:17:40,250 --> 00:17:44,510
message from this talk it's almost like

00:17:41,780 --> 00:17:46,790
if you're going to choose technologies

00:17:44,510 --> 00:17:49,790
just think about the design of them and

00:17:46,790 --> 00:17:52,760
look at how they've been built and what

00:17:49,790 --> 00:17:54,320
trade-offs have been made by the

00:17:52,760 --> 00:17:56,450
designers who built them and ask

00:17:54,320 --> 00:17:58,250
yourself are the same trade off are

00:17:56,450 --> 00:17:59,399
these same design decisions and that's

00:17:58,250 --> 00:18:02,369
kind of what's led us to

00:17:59,399 --> 00:18:04,679
where we are today so some lessons

00:18:02,369 --> 00:18:08,639
learned the first lesson minimized the

00:18:04,679 --> 00:18:11,729
critical path so a lot of applications

00:18:08,639 --> 00:18:13,529
now zzz that's going to exception has

00:18:11,729 --> 00:18:15,479
has some sort of core functionality that

00:18:13,529 --> 00:18:18,450
you need to provide for an e-commerce

00:18:15,479 --> 00:18:19,950
site this might be you need to you know

00:18:18,450 --> 00:18:22,289
that the core functionality might be I

00:18:19,950 --> 00:18:23,789
can buy something then you sort of

00:18:22,289 --> 00:18:25,019
asking yourself well what do I need to

00:18:23,789 --> 00:18:27,330
be able to buy something on my

00:18:25,019 --> 00:18:29,909
e-commerce site do I really need to

00:18:27,330 --> 00:18:31,499
prevent you know to show the user the

00:18:29,909 --> 00:18:33,450
top 10 list of things that have been

00:18:31,499 --> 00:18:35,249
bought on the site today is that

00:18:33,450 --> 00:18:38,460
critical to the functionality of me

00:18:35,249 --> 00:18:40,409
buying something probably not so what we

00:18:38,460 --> 00:18:42,779
tried to do is identify our critical

00:18:40,409 --> 00:18:44,669
path and anything that's not a hundred

00:18:42,779 --> 00:18:46,679
percent essential we've identified and

00:18:44,669 --> 00:18:49,259
taken that off and what that means is we

00:18:46,679 --> 00:18:51,599
can say if this thing fails there will

00:18:49,259 --> 00:18:54,839
be a degraded performance you might not

00:18:51,599 --> 00:18:56,429
get your receipt email immediately but

00:18:54,839 --> 00:18:58,499
that's okay because you've still managed

00:18:56,429 --> 00:19:00,269
to get your taxi so that's kind of a

00:18:58,499 --> 00:19:02,669
preferable experience from a user

00:19:00,269 --> 00:19:05,249
perspective you know the core experience

00:19:02,669 --> 00:19:11,309
is protected and these extra features

00:19:05,249 --> 00:19:12,899
are kind of layered on top in addition

00:19:11,309 --> 00:19:15,539
to features there's also the kind of

00:19:12,899 --> 00:19:19,289
idea of services so we use memcache at

00:19:15,539 --> 00:19:22,320
halo as well and when we use memcache

00:19:19,289 --> 00:19:25,229
we've got our own sort of client library

00:19:22,320 --> 00:19:26,820
and our client library defers connecting

00:19:25,229 --> 00:19:29,960
to memcache until the last possible

00:19:26,820 --> 00:19:32,669
moment so we're lazy initializing this

00:19:29,960 --> 00:19:34,529
some people will have a application and

00:19:32,669 --> 00:19:35,820
the first thing I do is have a bootstrap

00:19:34,529 --> 00:19:37,409
and the bootstrap will go connect to

00:19:35,820 --> 00:19:39,419
MySQL straight away let's go and do that

00:19:37,409 --> 00:19:41,369
right now and you have to ask yourself

00:19:39,419 --> 00:19:43,559
do I need to connect to MySQL right now

00:19:41,369 --> 00:19:46,169
it's not something I need to do should I

00:19:43,559 --> 00:19:47,639
defer it to later by using this kind of

00:19:46,169 --> 00:19:49,259
lazy in it Pat and it means we take

00:19:47,639 --> 00:19:51,269
memcache off the critical path for

00:19:49,259 --> 00:19:52,649
things that don't need it not every

00:19:51,269 --> 00:19:54,119
single request might need it and the

00:19:52,649 --> 00:19:55,649
ones that don't just won't connect and

00:19:54,119 --> 00:19:58,909
therefore if it's not working they won't

00:19:55,649 --> 00:20:01,169
know so that's quite a useful pattern

00:19:58,909 --> 00:20:03,929
and we need to we need to think about

00:20:01,169 --> 00:20:05,820
how we configure our clients so any

00:20:03,929 --> 00:20:07,019
instance of memcache again we're going

00:20:05,820 --> 00:20:08,570
to stick with a memcache thing where are

00:20:07,019 --> 00:20:11,130
we going to go lawyer through this

00:20:08,570 --> 00:20:12,600
an instance of memcache there's there's

00:20:11,130 --> 00:20:14,340
a load of options in PHP you can

00:20:12,600 --> 00:20:16,110
configure you can set the timeouts you

00:20:14,340 --> 00:20:19,500
can define how long it should weigh on

00:20:16,110 --> 00:20:20,850
connection before it gives up and you

00:20:19,500 --> 00:20:22,200
don't have to configure these things but

00:20:20,850 --> 00:20:23,790
you should you should go away and

00:20:22,200 --> 00:20:25,950
configure them you should look them up

00:20:23,790 --> 00:20:27,210
and figure out what timeouts am I going

00:20:25,950 --> 00:20:28,920
to set for this particular client

00:20:27,210 --> 00:20:30,720
library and you should repeat this

00:20:28,920 --> 00:20:33,360
pattern for every single client library

00:20:30,720 --> 00:20:35,490
you use be connecting to MySQL or

00:20:33,360 --> 00:20:38,760
Cassandra or whatever think about the

00:20:35,490 --> 00:20:41,550
timeouts and we need to try and pick

00:20:38,760 --> 00:20:43,740
same time outs so how do we choose a

00:20:41,550 --> 00:20:46,020
timeout value what should the time I'll

00:20:43,740 --> 00:20:48,630
be and what we want to do is we want to

00:20:46,020 --> 00:20:51,840
base this on data we want to measure it

00:20:48,630 --> 00:20:53,820
so this is from our test cluster and

00:20:51,840 --> 00:20:56,280
this is measuring the sort of the mean

00:20:53,820 --> 00:20:58,410
which is the blue the upper 90th which

00:20:56,280 --> 00:21:00,179
is the green and the upper bound which

00:20:58,410 --> 00:21:02,250
is the highest value which is the red

00:21:00,179 --> 00:21:05,220
this is the response times from am

00:21:02,250 --> 00:21:06,960
testing memcache cluster so you might

00:21:05,220 --> 00:21:08,550
saying well we could draw a line there

00:21:06,960 --> 00:21:10,110
which is I mean 20 milliseconds that's

00:21:08,550 --> 00:21:12,270
pretty good that should be our time that

00:21:10,110 --> 00:21:13,770
should be our operation timeout so every

00:21:12,270 --> 00:21:15,330
operation is longer than that we'll say

00:21:13,770 --> 00:21:22,290
it's not going to work give up our

00:21:15,330 --> 00:21:24,150
oceans never take this long but we need

00:21:22,290 --> 00:21:25,679
to be we need to be careful I mean we

00:21:24,150 --> 00:21:27,630
don't wanna set up time that's too tight

00:21:25,679 --> 00:21:29,760
because then things will file that we

00:21:27,630 --> 00:21:31,350
don't want and it's a good pattern to

00:21:29,760 --> 00:21:33,330
just instrument when you decide to give

00:21:31,350 --> 00:21:34,980
up so you've got measure of that but

00:21:33,330 --> 00:21:37,530
also we don't want to set lacks timeouts

00:21:34,980 --> 00:21:40,170
a lot of people all have things like

00:21:37,530 --> 00:21:43,080
MySQL and they'll have a 30-second

00:21:40,170 --> 00:21:45,030
timeout on queries and in most of their

00:21:43,080 --> 00:21:47,790
queries they'll you know take you know

00:21:45,030 --> 00:21:49,260
15 min undred millisecond site and then

00:21:47,790 --> 00:21:51,120
your 30-second timeout isn't going to do

00:21:49,260 --> 00:21:52,170
you any favors because when things go

00:21:51,120 --> 00:21:54,390
wrong what's going to happen is

00:21:52,170 --> 00:21:57,210
everything is just going to spin because

00:21:54,390 --> 00:21:58,500
every process will be waiting 30 seconds

00:21:57,210 --> 00:22:00,450
and everything's going to back up and

00:21:58,500 --> 00:22:02,100
you're php-fpm or whatever it is a

00:22:00,450 --> 00:22:03,809
serving request weird is going to be SAT

00:22:02,100 --> 00:22:08,640
there waiting and waiting and waiting

00:22:03,809 --> 00:22:10,679
for this thing that's broken so you need

00:22:08,640 --> 00:22:12,780
to try and set aggressive timeouts and

00:22:10,679 --> 00:22:14,490
we don't want a would rather that some

00:22:12,780 --> 00:22:17,010
component fail quickly basically we

00:22:14,490 --> 00:22:18,630
wanted to say no I'm broken please carry

00:22:17,010 --> 00:22:20,890
on without me

00:22:18,630 --> 00:22:22,960
so maybe a better time out would be

00:22:20,890 --> 00:22:25,270
there so around the 95th percentile and

00:22:22,960 --> 00:22:26,530
we can measure that we can measure this

00:22:25,270 --> 00:22:27,790
with data we can you know we can

00:22:26,530 --> 00:22:32,380
instrument or less in graphite or

00:22:27,790 --> 00:22:33,730
whatever and then make decisions and

00:22:32,380 --> 00:22:36,040
then we need to test it so we need to

00:22:33,730 --> 00:22:38,380
say you know does does my configuration

00:22:36,040 --> 00:22:40,840
work does my memcache client that I bill

00:22:38,380 --> 00:22:43,930
does it does it work under failure

00:22:40,840 --> 00:22:46,540
scenarios what's my what do I want to

00:22:43,930 --> 00:22:47,920
happen and does it do it so this is the

00:22:46,540 --> 00:22:50,440
kind of thing that we did we were like

00:22:47,920 --> 00:22:52,540
yeah okay we want this you know we don't

00:22:50,440 --> 00:22:54,010
want a single box being down to bring

00:22:52,540 --> 00:22:56,500
everything down so let's try that will

00:22:54,010 --> 00:22:58,420
kill it on box a yeah it still works

00:22:56,500 --> 00:23:00,400
will kill you on box be yeah it still

00:22:58,420 --> 00:23:02,410
works you know that point we think yeah

00:23:00,400 --> 00:23:06,040
we got this covered we're done you know

00:23:02,410 --> 00:23:08,800
we've we've resolved this problem which

00:23:06,040 --> 00:23:10,870
wasn't entirely true we had unsolved

00:23:08,800 --> 00:23:13,900
problem luckily this was only in our

00:23:10,870 --> 00:23:15,940
staging cluster but on one day we

00:23:13,900 --> 00:23:17,620
realized that our staging cluster was

00:23:15,940 --> 00:23:21,760
entirely not working nothing was

00:23:17,620 --> 00:23:23,650
returning any responses so we went and

00:23:21,760 --> 00:23:25,750
dug into a dog into it and it turns out

00:23:23,650 --> 00:23:30,010
that one of the amazon boxes that runs

00:23:25,750 --> 00:23:31,090
memcache had kind of locked up and

00:23:30,010 --> 00:23:32,920
therefore any of the parts an

00:23:31,090 --> 00:23:34,780
application and needed memcache one

00:23:32,920 --> 00:23:35,980
working we're thinking that's really

00:23:34,780 --> 00:23:37,330
crazy because you know we've got all

00:23:35,980 --> 00:23:39,160
these nice timeouts and we've configured

00:23:37,330 --> 00:23:40,360
everything right we should be there and

00:23:39,160 --> 00:23:44,170
it should work and you know this is

00:23:40,360 --> 00:23:46,570
foolproof but what we've forgotten is

00:23:44,170 --> 00:23:48,310
that things fail in exotic ways things

00:23:46,570 --> 00:23:51,940
fail in ways that you just don't in the

00:23:48,310 --> 00:23:54,220
anticipate and there are ways that we

00:23:51,940 --> 00:23:55,420
can model this and we've come up with

00:23:54,220 --> 00:23:57,550
some solutions that will grow through

00:23:55,420 --> 00:23:59,380
and in the instance of the memcache we

00:23:57,550 --> 00:24:00,850
we investigated it so we started off

00:23:59,380 --> 00:24:02,320
with out right we're going to we're

00:24:00,850 --> 00:24:03,910
going to simulate this failure scenario

00:24:02,320 --> 00:24:06,490
we're going to find out what is going on

00:24:03,910 --> 00:24:09,250
what is broken so the first thing we did

00:24:06,490 --> 00:24:10,630
iptables block reject all traffic and

00:24:09,250 --> 00:24:12,820
the expectation is that should that

00:24:10,630 --> 00:24:14,320
should kind of work because the packets

00:24:12,820 --> 00:24:16,300
are going to get rejected and the source

00:24:14,320 --> 00:24:18,340
notify by RCMP and we expect us to fail

00:24:16,300 --> 00:24:21,100
fast and green light it did fail fast

00:24:18,340 --> 00:24:22,480
that's great this this worked you know

00:24:21,100 --> 00:24:24,070
the bits the application use memcache

00:24:22,480 --> 00:24:25,870
just came back and said no we're not

00:24:24,070 --> 00:24:28,179
available sorry rather than hanging

00:24:25,870 --> 00:24:30,260
forever

00:24:28,179 --> 00:24:31,850
some of like well what if we just drop

00:24:30,260 --> 00:24:34,880
the package silently on the floor just

00:24:31,850 --> 00:24:37,190
throw them away thank you throw away so

00:24:34,880 --> 00:24:38,450
we set this more test up and this time

00:24:37,190 --> 00:24:40,370
we're going to kind of expect the

00:24:38,450 --> 00:24:42,370
timeouts to be hit so this is kind of

00:24:40,370 --> 00:24:45,019
the difference between if you imagine

00:24:42,370 --> 00:24:48,110
when you kill if you kill live you just

00:24:45,019 --> 00:24:49,640
win kill 9 memcache on a box all the

00:24:48,110 --> 00:24:51,620
connection opens is going to get

00:24:49,640 --> 00:24:54,019
rejected it's like if you tell it to

00:24:51,620 --> 00:24:56,269
that socket go connection refused go

00:24:54,019 --> 00:24:58,250
away this is kind of the equivalent of

00:24:56,269 --> 00:25:00,889
I'm just not playing ball I'm going to

00:24:58,250 --> 00:25:02,510
just you know yeah I'm not going to tell

00:25:00,889 --> 00:25:04,970
you I'm just going to sit here and you

00:25:02,510 --> 00:25:06,529
know not tell you but that's still word

00:25:04,970 --> 00:25:08,330
that's still word and then we were like

00:25:06,529 --> 00:25:10,600
well you know something very strange is

00:25:08,330 --> 00:25:12,169
going on here and one of our DevOps guys

00:25:10,600 --> 00:25:13,610
realized that what was actually

00:25:12,169 --> 00:25:16,010
happening was that in this particular

00:25:13,610 --> 00:25:18,019
failure scenario the amazon boxes were

00:25:16,010 --> 00:25:19,760
accepting new connections even though

00:25:18,019 --> 00:25:23,090
they were not doing anything useful at

00:25:19,760 --> 00:25:24,500
all the box at home can ssh into it took

00:25:23,090 --> 00:25:28,460
about 10 minutes to reboot vide amazon

00:25:24,500 --> 00:25:29,990
console so they were allowing you to

00:25:28,460 --> 00:25:30,889
establish a connection and then they

00:25:29,990 --> 00:25:34,340
were dropping all the Packers on the

00:25:30,889 --> 00:25:37,399
floor so a nice for some reason was

00:25:34,340 --> 00:25:40,279
breaking our memcache client and lo and

00:25:37,399 --> 00:25:41,690
behold it was a bug there was a bug in a

00:25:40,279 --> 00:25:43,760
memcache client which meant that the

00:25:41,690 --> 00:25:47,299
connection timeout in this instant

00:25:43,760 --> 00:25:51,110
wasn't being honored so this is an

00:25:47,299 --> 00:25:53,120
interesting one and and this is this has

00:25:51,110 --> 00:25:54,529
been quite a useful experience hello

00:25:53,120 --> 00:25:56,510
just because we've actually found that

00:25:54,529 --> 00:25:58,429
repeating these those kind of tests

00:25:56,510 --> 00:26:00,529
where we block traffic in different ways

00:25:58,429 --> 00:26:02,029
kind of really does flush out the

00:26:00,529 --> 00:26:03,889
clients that don't do what they're

00:26:02,029 --> 00:26:05,450
supposed to do and it's a good way of

00:26:03,889 --> 00:26:07,580
kind of verifying that you know if

00:26:05,450 --> 00:26:09,740
something is not working it will do what

00:26:07,580 --> 00:26:11,659
you wanted to do and whatever that is

00:26:09,740 --> 00:26:13,399
and normally the worst thing that can

00:26:11,659 --> 00:26:14,990
ever happen is it just hangs forever

00:26:13,399 --> 00:26:19,850
that's normally the last thing you

00:26:14,990 --> 00:26:22,549
wanted to do so we fixed it we're in

00:26:19,850 --> 00:26:24,260
strappy let's made this you know let's

00:26:22,549 --> 00:26:28,039
fix memcache let's fix that bug roller

00:26:24,260 --> 00:26:29,600
new library does is it still broken I'm

00:26:28,039 --> 00:26:32,299
not you know that kind of worked and

00:26:29,600 --> 00:26:33,799
then we're thinking wouldn't it be nice

00:26:32,299 --> 00:26:36,889
if we could kind of automate this

00:26:33,799 --> 00:26:40,050
process wouldn't it be nice if if we

00:26:36,889 --> 00:26:42,400
could if we could no categorically

00:26:40,050 --> 00:26:46,060
no change in our system is going to

00:26:42,400 --> 00:26:49,180
reintroduce that bug so going back to my

00:26:46,060 --> 00:26:50,590
website I never change it for her lights

00:26:49,180 --> 00:26:52,330
go wrong because no one ever changes it

00:26:50,590 --> 00:26:55,330
I don't even say the packages probably

00:26:52,330 --> 00:26:56,800
sure but our production environment and

00:26:55,330 --> 00:26:58,240
our you know our machines at halo people

00:26:56,800 --> 00:27:00,280
always updating them there's no dev ops

00:26:58,240 --> 00:27:01,840
team dev team people I updating

00:27:00,280 --> 00:27:02,800
libraries we've got popular runs things

00:27:01,840 --> 00:27:04,840
are always going to moved on a bit

00:27:02,800 --> 00:27:06,850
little changes and it would be nice if

00:27:04,840 --> 00:27:11,790
we could verify that nothing is going to

00:27:06,850 --> 00:27:16,000
bring back that failure scenario and so

00:27:11,790 --> 00:27:18,550
automate that's the next step and a halo

00:27:16,000 --> 00:27:20,590
we've got a we've gotten in a sort of

00:27:18,550 --> 00:27:22,960
slightly trimmed down version of our

00:27:20,590 --> 00:27:25,240
infrastructure that we run we run it

00:27:22,960 --> 00:27:27,360
purely for automated testing so it's SAT

00:27:25,240 --> 00:27:30,490
there all day long powered by jmeter

00:27:27,360 --> 00:27:32,500
driving drivers around London pretend

00:27:30,490 --> 00:27:36,520
drivers and they are accepting jobs and

00:27:32,500 --> 00:27:37,630
doing jobs putting jobs through and then

00:27:36,520 --> 00:27:39,820
what we can do is we can simulate

00:27:37,630 --> 00:27:42,100
failure so we can kind of inject cases

00:27:39,820 --> 00:27:44,290
and we can say right going enact the

00:27:42,100 --> 00:27:47,220
memcache failure and then you know

00:27:44,290 --> 00:27:49,840
assert that it does what we wanted to do

00:27:47,220 --> 00:27:51,760
so this is kind of this was actually our

00:27:49,840 --> 00:27:54,760
first attempt at fixing the memcache

00:27:51,760 --> 00:27:57,250
problem so we you can see we've got this

00:27:54,760 --> 00:27:59,650
thing called timed block timed block is

00:27:57,250 --> 00:28:02,500
just a little shell script that someone

00:27:59,650 --> 00:28:04,240
row which just did the IP table stuff so

00:28:02,500 --> 00:28:07,360
you can see when we start the time block

00:28:04,240 --> 00:28:08,920
the early the response is suddenly jump

00:28:07,360 --> 00:28:10,450
and where you know this is the sort of

00:28:08,920 --> 00:28:12,460
Jamie trap here you can see it cuddly

00:28:10,450 --> 00:28:14,230
we're suddenly adding kind of 500

00:28:12,460 --> 00:28:15,820
milliseconds we're thinking that's not

00:28:14,230 --> 00:28:18,640
what we want to happen this is not the

00:28:15,820 --> 00:28:21,460
desired behavior and this is because we

00:28:18,640 --> 00:28:23,350
hadn't covered off the point i mentioned

00:28:21,460 --> 00:28:25,870
earlier which is choose sensible

00:28:23,350 --> 00:28:27,820
timeouts we chosen ridiculous timeouts

00:28:25,870 --> 00:28:29,620
we chose on sort of you know a half a

00:28:27,820 --> 00:28:31,840
second memcache timeout when every

00:28:29,620 --> 00:28:33,340
operation was you know when every

00:28:31,840 --> 00:28:36,790
operation completed in less than 20

00:28:33,340 --> 00:28:39,820
milliseconds forever and we chosen you

00:28:36,790 --> 00:28:42,790
know ten times that was our time out so

00:28:39,820 --> 00:28:46,360
we fixed that and then bingo this is

00:28:42,790 --> 00:28:49,420
what we want so now when the customer

00:28:46,360 --> 00:28:51,220
logs in they don't notice memcache is

00:28:49,420 --> 00:28:52,720
failing in this exotic way that

00:28:51,220 --> 00:28:55,510
previously brought down everything

00:28:52,720 --> 00:28:57,580
and now it works and we can run this

00:28:55,510 --> 00:28:59,710
every night so every single night this

00:28:57,580 --> 00:29:03,100
goes off runs a cert so that does what

00:28:59,710 --> 00:29:05,679
we expected to do SATs are kind of

00:29:03,100 --> 00:29:08,140
automated testing framework and we can

00:29:05,679 --> 00:29:10,059
also simulate these in tests as well so

00:29:08,140 --> 00:29:14,860
this is another thing that we've kind of

00:29:10,059 --> 00:29:16,809
taken to doing which is that we write

00:29:14,860 --> 00:29:18,520
system tests for our software that kind

00:29:16,809 --> 00:29:20,020
of asserts what we want to happen and

00:29:18,520 --> 00:29:21,250
this is a kind of another good exercise

00:29:20,020 --> 00:29:23,130
because most people will write software

00:29:21,250 --> 00:29:25,480
not just follow the positive use case

00:29:23,130 --> 00:29:26,950
now write their code it works you know

00:29:25,480 --> 00:29:28,600
that's not consider weapons when things

00:29:26,950 --> 00:29:30,850
go wrong whereas what were you doing the

00:29:28,600 --> 00:29:33,280
system test is we say right if this

00:29:30,850 --> 00:29:35,200
component is failing then we want this

00:29:33,280 --> 00:29:37,360
outcome whatever that outcome is it so

00:29:35,200 --> 00:29:40,960
you know really up to you so this is an

00:29:37,360 --> 00:29:43,870
example one of our system tests where we

00:29:40,960 --> 00:29:45,429
are simulating memcache failing and then

00:29:43,870 --> 00:29:48,460
we can assert that our monitoring should

00:29:45,429 --> 00:29:50,409
pick this up and then we can assert that

00:29:48,460 --> 00:29:51,850
features will still work and this is

00:29:50,409 --> 00:29:53,860
just kind of a markdown file that we can

00:29:51,850 --> 00:29:56,409
execute so this is just basically doing

00:29:53,860 --> 00:30:01,030
rest calls its kind of system tests

00:29:56,409 --> 00:30:03,549
that's marked down but the the key idea

00:30:01,030 --> 00:30:04,960
is we are defining what we want the

00:30:03,549 --> 00:30:06,820
behaviors to be and I think that's an

00:30:04,960 --> 00:30:11,380
important point we're not just leaving

00:30:06,820 --> 00:30:19,870
out we're not leaving it unspecified so

00:30:11,380 --> 00:30:21,760
finally inertia to conclude surely the

00:30:19,870 --> 00:30:25,030
best way to avoid failure is to fail

00:30:21,760 --> 00:30:26,650
constantly so this is really the key

00:30:25,030 --> 00:30:28,750
take-home if you want to get good at

00:30:26,650 --> 00:30:30,220
something you do it a lot if you want to

00:30:28,750 --> 00:30:32,020
get good at dealing with failure in a

00:30:30,220 --> 00:30:34,179
system that runs on three continents on

00:30:32,020 --> 00:30:36,520
200 machines you just need to fail a lot

00:30:34,179 --> 00:30:38,110
and you need to automate that and you

00:30:36,520 --> 00:30:39,880
need to make sure that you you're

00:30:38,110 --> 00:30:42,460
asserting the behavior you want to

00:30:39,880 --> 00:30:45,429
happen and then you kind of you really

00:30:42,460 --> 00:30:49,330
need to automate that because before we

00:30:45,429 --> 00:30:51,820
automated it we would do we would do the

00:30:49,330 --> 00:30:53,380
pattern way you every three or four

00:30:51,820 --> 00:30:55,600
months you'd go and investigate and you

00:30:53,380 --> 00:30:57,880
know try out some failure and see what

00:30:55,600 --> 00:30:59,590
happens but but for the next three

00:30:57,880 --> 00:31:00,789
months no one no one's repeating that

00:30:59,590 --> 00:31:02,049
process you know you're just getting on

00:31:00,789 --> 00:31:03,580
with your other work that you've got to

00:31:02,049 --> 00:31:05,169
get on with whereas if you automate it

00:31:03,580 --> 00:31:06,119
just happens every night you know these

00:31:05,169 --> 00:31:07,799
failure scenarios

00:31:06,119 --> 00:31:09,329
layout you see what the results are

00:31:07,799 --> 00:31:11,489
someone can come in look at a graph go

00:31:09,329 --> 00:31:13,079
having a minute you know that thing that

00:31:11,489 --> 00:31:14,909
you committed last week yeah that really

00:31:13,079 --> 00:31:19,889
that really does mess with our failure

00:31:14,909 --> 00:31:21,539
handling please have a look at that and

00:31:19,889 --> 00:31:24,659
then off the back of our success with

00:31:21,539 --> 00:31:28,739
the x block time to block all the things

00:31:24,659 --> 00:31:32,489
so go away and see how your application

00:31:28,739 --> 00:31:34,259
fails when you when you kind of disrupt

00:31:32,489 --> 00:31:37,049
the flow of the traffic to different

00:31:34,259 --> 00:31:38,339
components you know find out what what

00:31:37,049 --> 00:31:39,719
you know what do you want the desired

00:31:38,339 --> 00:31:42,509
behavior to be and find out what the

00:31:39,719 --> 00:31:45,389
behavior is and then you know adjust and

00:31:42,509 --> 00:31:47,099
correct and we found that the IP table

00:31:45,389 --> 00:31:49,169
stuff was like a really quick way of

00:31:47,099 --> 00:31:51,839
doing this and we found quite a lot of

00:31:49,169 --> 00:31:54,779
bugs or a lot of sort of shortfalls in

00:31:51,839 --> 00:31:56,909
other software and other other packages

00:31:54,779 --> 00:32:01,319
just by doing just by following that

00:31:56,909 --> 00:32:05,959
kind of process so that's that's a

00:32:01,319 --> 00:32:05,959
that's that's my my talk thank

00:32:13,590 --> 00:32:18,460
and there are some references for this

00:32:16,299 --> 00:32:20,409
or so further reading on the slide deck

00:32:18,460 --> 00:32:23,799
and you can check our later any

00:32:20,409 --> 00:32:26,380
questions are there any questions in

00:32:23,799 --> 00:32:31,000
this room or on the other room you would

00:32:26,380 --> 00:32:42,159
like to ask Dave not really clear on

00:32:31,000 --> 00:32:46,240
over there a part so you say you've got

00:32:42,159 --> 00:32:48,780
about ten plus services and algae just

00:32:46,240 --> 00:32:54,640
the integration between bit services

00:32:48,780 --> 00:32:56,470
modem eighties in any legal yeah so the

00:32:54,640 --> 00:32:59,710
way we testy the integration between all

00:32:56,470 --> 00:33:01,510
components is ultimately to test the end

00:32:59,710 --> 00:33:05,350
to end with pretend drivers and pretend

00:33:01,510 --> 00:33:08,289
jobs so within we use jmeter which is

00:33:05,350 --> 00:33:09,940
kind of a java app for load testing but

00:33:08,289 --> 00:33:12,039
it's very very flexible and its really

00:33:09,940 --> 00:33:15,070
extensible so we basically built this

00:33:12,039 --> 00:33:17,740
app in such a way that we kind of

00:33:15,070 --> 00:33:20,950
extended it so it will it can simulate a

00:33:17,740 --> 00:33:23,200
driver driving around London and

00:33:20,950 --> 00:33:26,590
accepting job offers and in doing jobs

00:33:23,200 --> 00:33:28,480
so what we do is there's kind of two

00:33:26,590 --> 00:33:29,830
parts to it first of all as that there's

00:33:28,480 --> 00:33:31,510
driving traffic through and then that's

00:33:29,830 --> 00:33:33,640
obviously monitoring what the results of

00:33:31,510 --> 00:33:35,530
that are and we monitor the results in

00:33:33,640 --> 00:33:38,530
two ways the first is the disco no

00:33:35,530 --> 00:33:40,059
jmeter response so jmeter will record we

00:33:38,530 --> 00:33:41,919
know what percentage of request fails

00:33:40,059 --> 00:33:43,179
what you're mean and response time is

00:33:41,919 --> 00:33:44,590
where you're up you know the late the

00:33:43,179 --> 00:33:47,650
sort of standard deviation allow sort of

00:33:44,590 --> 00:33:50,409
stuff and we also use make heavy use of

00:33:47,650 --> 00:33:54,130
graphite so we basically instrument

00:33:50,409 --> 00:33:56,710
everything and then in that way you can

00:33:54,130 --> 00:33:58,179
you kind of get a good an easy visual

00:33:56,710 --> 00:33:59,500
picture of what your performance

00:33:58,179 --> 00:34:02,409
characteristic of your application looks

00:33:59,500 --> 00:34:04,450
like and when you push out new code you

00:34:02,409 --> 00:34:06,730
kind of draw bars and say deployed done

00:34:04,450 --> 00:34:10,510
here and you can kind of see so in terms

00:34:06,730 --> 00:34:13,060
of testing integration we really do the

00:34:10,510 --> 00:34:15,250
kind of ultimate endgame is to test it

00:34:13,060 --> 00:34:17,560
by actually simulating what real people

00:34:15,250 --> 00:34:19,929
do and we find that that's kind of the

00:34:17,560 --> 00:34:21,550
most effective and the next step that a

00:34:19,929 --> 00:34:23,919
bunch of people are working on is is

00:34:21,550 --> 00:34:25,619
actually doing that from apps so we've

00:34:23,919 --> 00:34:27,480
got a couple of guys working on

00:34:25,619 --> 00:34:29,490
a kind of system that is going to

00:34:27,480 --> 00:34:32,759
actually press buttons on apps to do

00:34:29,490 --> 00:34:35,220
these tasks and you can I don't know the

00:34:32,759 --> 00:34:38,069
all the tech around that but basically

00:34:35,220 --> 00:34:39,990
you kind of runs our actual app code and

00:34:38,069 --> 00:34:42,089
then simulate like you know a hand

00:34:39,990 --> 00:34:43,829
moving and pressing a button and that's

00:34:42,089 --> 00:34:45,659
kind of a really end-to-end way of doing

00:34:43,829 --> 00:34:47,759
it because that is the actual apps doing

00:34:45,659 --> 00:34:49,769
it so that kind of is useful in that it

00:34:47,759 --> 00:34:57,299
asserts how the apps behave and

00:34:49,769 --> 00:34:59,460
sometimes they do crazy things so the

00:34:57,299 --> 00:35:01,259
test environment that you run though

00:34:59,460 --> 00:35:02,999
that's constantly simulating do you try

00:35:01,259 --> 00:35:05,789
out your deployments and drive failed

00:35:02,999 --> 00:35:08,700
deployments as well yeah yeah for sure

00:35:05,789 --> 00:35:11,809
we everything everything that we release

00:35:08,700 --> 00:35:14,369
will get pushed through that environment

00:35:11,809 --> 00:35:15,900
one of the features I've been working on

00:35:14,369 --> 00:35:17,759
recently which is swapping in a sort of

00:35:15,900 --> 00:35:20,160
of swapping out an old piece of

00:35:17,759 --> 00:35:21,839
functionality for a new service I'd had

00:35:20,160 --> 00:35:23,339
a sort of vaguely involved upgrade path

00:35:21,839 --> 00:35:25,559
so we tested out all sorts of scenarios

00:35:23,339 --> 00:35:27,450
of you know rolling it forward rolling

00:35:25,559 --> 00:35:29,099
it back you know what happens to the

00:35:27,450 --> 00:35:31,920
user experience can people who are using

00:35:29,099 --> 00:35:34,019
the app within that time carry on doing

00:35:31,920 --> 00:35:37,319
their journeys so we can test all that

00:35:34,019 --> 00:35:40,470
stuff out and and the this sort of the

00:35:37,319 --> 00:35:43,130
aim the ultimate aim really is that if i

00:35:40,470 --> 00:35:45,539
push code if I'd you know if I'd

00:35:43,130 --> 00:35:46,799
introduce some new feature what we

00:35:45,539 --> 00:35:47,880
really want to be able to do is a cert

00:35:46,799 --> 00:35:50,400
that the kind of overall performance

00:35:47,880 --> 00:35:52,470
character character of the entire app

00:35:50,400 --> 00:35:54,839
the entire sort of user experience isn't

00:35:52,470 --> 00:35:56,700
impacted too much so if I accidentally

00:35:54,839 --> 00:35:58,499
introduced like you know an extra second

00:35:56,700 --> 00:36:01,829
on login that should be you know graph

00:35:58,499 --> 00:36:08,070
going whoa what have you done Dave undo

00:36:01,829 --> 00:36:15,160
that that's kind of the aim yep

00:36:08,070 --> 00:36:16,839
what was the mysql to Cassandra like or

00:36:15,160 --> 00:36:19,300
was it a sufficiently early enough stage

00:36:16,839 --> 00:36:21,490
that it was very easy to kind of make

00:36:19,300 --> 00:36:23,560
the switch yeah so the beginning of the

00:36:21,490 --> 00:36:30,609
question was what what was the migration

00:36:23,560 --> 00:36:33,369
from mysql to Cassandra like I quite

00:36:30,609 --> 00:36:35,589
easy I guess I mean we it wasn't just

00:36:33,369 --> 00:36:37,420
about migrating from mitochondria it was

00:36:35,589 --> 00:36:39,880
more about you know we're going to

00:36:37,420 --> 00:36:42,400
replace this particular function within

00:36:39,880 --> 00:36:44,500
this kind of web app that runs on one

00:36:42,400 --> 00:36:46,060
bar we are a few boxes in one location

00:36:44,500 --> 00:36:48,580
and we're going to replace that with a

00:36:46,060 --> 00:36:50,859
service that runs globally and can be

00:36:48,580 --> 00:36:56,380
accessed from you know Tokyo new or

00:36:50,859 --> 00:36:57,910
whatever so it it can you know into

00:36:56,380 --> 00:36:59,770
something that is quite there is a

00:36:57,910 --> 00:37:01,930
degree of scariness but in terms of the

00:36:59,770 --> 00:37:03,849
actual you know move my scoffs Cassandra

00:37:01,930 --> 00:37:05,500
not really you're not that bit of it is

00:37:03,849 --> 00:37:09,460
probably that released the least scary

00:37:05,500 --> 00:37:11,380
bit did I guess the difficulty with apps

00:37:09,460 --> 00:37:13,540
to some extent is that you kind of your

00:37:11,380 --> 00:37:14,950
kind of have to they have to our

00:37:13,540 --> 00:37:16,990
application has to do what it did

00:37:14,950 --> 00:37:18,520
yesterday because the apps can't change

00:37:16,990 --> 00:37:20,170
and if we introduce something that means

00:37:18,520 --> 00:37:21,640
they're you know if we start to start

00:37:20,170 --> 00:37:24,130
behaving differently there's every

00:37:21,640 --> 00:37:26,200
possibility that they'll break and then

00:37:24,130 --> 00:37:28,450
and then you know with Apple it's like

00:37:26,200 --> 00:37:29,740
you know two weeks to get fix out so we

00:37:28,450 --> 00:37:34,869
just had to be a bit careful there but

00:37:29,740 --> 00:37:36,880
not all that difficult um could you

00:37:34,869 --> 00:37:38,320
place an estimate on sort of how much

00:37:36,880 --> 00:37:40,089
development time you dedicate towards

00:37:38,320 --> 00:37:42,339
these sorts of tests and testing to fail

00:37:40,089 --> 00:37:44,230
versus actual determine time moving your

00:37:42,339 --> 00:37:45,970
application forward and what penalty

00:37:44,230 --> 00:37:47,320
that has this in a business sense like

00:37:45,970 --> 00:37:48,640
how did you guys go through that

00:37:47,320 --> 00:37:49,869
decision-making process are you still in

00:37:48,640 --> 00:37:51,730
the venture capital stage of your

00:37:49,869 --> 00:37:53,140
business are you actually using your own

00:37:51,730 --> 00:37:54,910
revenue to fund these sorts of changes

00:37:53,140 --> 00:37:56,650
because it does it will make a

00:37:54,910 --> 00:37:58,330
difference you know when you're talking

00:37:56,650 --> 00:38:02,530
about you know making your business

00:37:58,330 --> 00:38:04,119
viable yeah sounds quite a question so

00:38:02,530 --> 00:38:07,270
yeah we're at a venture capital stage

00:38:04,119 --> 00:38:11,400
and we've raised quite a lot of money

00:38:07,270 --> 00:38:14,800
and the business is all about growth so

00:38:11,400 --> 00:38:18,369
we we've got one guy who works full-time

00:38:14,800 --> 00:38:21,250
on automated testing out of an

00:38:18,369 --> 00:38:22,780
engineering team of 30 maybe

00:38:21,250 --> 00:38:24,550
so it's not an enormous amount and it's

00:38:22,780 --> 00:38:26,920
surprising how much you can actually

00:38:24,550 --> 00:38:30,400
achieve with that and I think the key is

00:38:26,920 --> 00:38:32,560
to automate it if you if you invest you

00:38:30,400 --> 00:38:34,030
know some of the things we've done you

00:38:32,560 --> 00:38:35,770
could sit down in an afternoon and

00:38:34,030 --> 00:38:37,840
achieve but then once you've done it

00:38:35,770 --> 00:38:40,090
your kind of thrown away that work or as

00:38:37,840 --> 00:38:42,250
if you can spend three days and set up

00:38:40,090 --> 00:38:44,230
you know just something that does it

00:38:42,250 --> 00:38:46,060
every day or regularly then you've kind

00:38:44,230 --> 00:38:47,500
of gained quite locks you you can just

00:38:46,060 --> 00:38:52,210
leave it alone and it will go away and

00:38:47,500 --> 00:38:54,910
do that and actually I think it's a very

00:38:52,210 --> 00:38:56,500
important thing for us to do the the

00:38:54,910 --> 00:38:58,660
automated testing failure the failure

00:38:56,500 --> 00:39:01,000
scenarios especially because you know

00:38:58,660 --> 00:39:03,250
we've got we want to make a lot of

00:39:01,000 --> 00:39:04,570
changes to the application and the only

00:39:03,250 --> 00:39:07,330
real way of being able to do that is to

00:39:04,570 --> 00:39:08,560
know that you haven't broken it and the

00:39:07,330 --> 00:39:10,480
best way of knowing you have broken it

00:39:08,560 --> 00:39:11,830
is to have all these tests so in that

00:39:10,480 --> 00:39:18,100
respect it really I think it definitely

00:39:11,830 --> 00:39:19,300
pays off I was just wondering do you

00:39:18,100 --> 00:39:21,910
ever do sort of test-driven development

00:39:19,300 --> 00:39:23,620
with infrastructure so sort of you've

00:39:21,910 --> 00:39:25,300
got a service that performs a certain

00:39:23,620 --> 00:39:27,130
level and you want to decrease that say

00:39:25,300 --> 00:39:28,960
by 200 milliseconds but you don't know

00:39:27,130 --> 00:39:30,880
how to do it do you ever sort of look at

00:39:28,960 --> 00:39:32,500
a problem that way and then investigate

00:39:30,880 --> 00:39:36,100
how you might be able to get down to

00:39:32,500 --> 00:39:38,230
that yeah that's an interesting approach

00:39:36,100 --> 00:39:40,420
we haven't really haven't really done

00:39:38,230 --> 00:39:43,330
that so I guess that's how I look at it

00:39:40,420 --> 00:39:45,940
from a former performance perspective in

00:39:43,330 --> 00:39:49,480
a moment we'd just our main focus is on

00:39:45,940 --> 00:39:52,120
is really on kind of just building the

00:39:49,480 --> 00:39:54,400
core functionality in Nice units that

00:39:52,120 --> 00:39:56,470
maintainable but I think that that

00:39:54,400 --> 00:39:59,530
sounds like a really good approach I'd

00:39:56,470 --> 00:40:01,120
be I'd be quiet for dinner I like the

00:39:59,530 --> 00:40:02,770
idea of having that kind of you know

00:40:01,120 --> 00:40:05,380
what do I want to achieve upfront and

00:40:02,770 --> 00:40:07,540
then going about sort of measuring in

00:40:05,380 --> 00:40:11,260
and saying have I done it and if you can

00:40:07,540 --> 00:40:12,550
automate that I'd be good yeah so no we

00:40:11,260 --> 00:40:15,300
haven't we don't do that but it would be

00:40:12,550 --> 00:40:15,300
nice sounds nice

00:40:17,260 --> 00:40:24,550
okay come how do you have a idea where

00:40:21,280 --> 00:40:28,960
you how do you have an idea of when

00:40:24,550 --> 00:40:32,340
you've covered our fall of the failure

00:40:28,960 --> 00:40:36,160
scenarios because there are many and

00:40:32,340 --> 00:40:38,170
thinking about what ya ask you a

00:40:36,160 --> 00:40:39,540
question so how do we know how do we

00:40:38,170 --> 00:40:42,670
know when we've got it all covered I

00:40:39,540 --> 00:40:45,550
guess we don't really but we know what

00:40:42,670 --> 00:40:47,530
we know what the we know what components

00:40:45,550 --> 00:40:52,450
we use we know what technologies we are

00:40:47,530 --> 00:40:54,010
using and most technologies come down to

00:40:52,450 --> 00:40:58,090
some Network sake that you're talking

00:40:54,010 --> 00:40:59,560
over so from that perspective it's it's

00:40:58,090 --> 00:41:02,560
it's not actually are time consuming

00:40:59,560 --> 00:41:04,090
just to exhaustively test them all so

00:41:02,560 --> 00:41:07,240
that's kind of what what we're we're

00:41:04,090 --> 00:41:08,410
aiming to do but yeah I guess I don't

00:41:07,240 --> 00:41:10,210
don't know how we'd know that we

00:41:08,410 --> 00:41:11,560
definitely definitely covered them all I

00:41:10,210 --> 00:41:13,720
guess you learn every night again you

00:41:11,560 --> 00:41:16,000
have an outage near like ah should I saw

00:41:13,720 --> 00:41:22,060
that so we're trying to kind of avoid

00:41:16,000 --> 00:41:23,530
that as much as possible okay well you

00:41:22,060 --> 00:41:26,550
can always grab me after if anyone wants

00:41:23,530 --> 00:41:26,550
to chat thanks very much

00:41:36,359 --> 00:41:38,420

YouTube URL: https://www.youtube.com/watch?v=hHwNEuTu6rQ


