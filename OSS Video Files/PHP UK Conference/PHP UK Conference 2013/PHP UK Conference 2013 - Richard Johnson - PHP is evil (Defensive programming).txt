Title: PHP UK Conference 2013 - Richard Johnson - PHP is evil (Defensive programming)
Publication date: 2013-04-16
Playlist: PHP UK Conference 2013
Description: 
	PHP is a great little language, but it's had a troubled upbringing. While many languages have been conceptually thought through, designed with a consistent API and the benefit of large amounts of corporate backing; PHP was instead born from one geek's desire to quickly make dynamic web pages, tapping into underlying C libraries where needed and being grafted awkwardly into web servers. This makes the language incredibly accessible, fast to learn and work with, however there are huge skeletons in the closet. Without proper care and attention, these skeletons can suddenly spring to live and devour everyone you love. This talk will attempt to cover a wide range of web system security considerations including: - Evolution of PHP's security features; - General PHP development best practices; - Considerations when using underlying C libraries; - Fun PHP functions and unexpected results; - Cool "features" in browsers; - LAMP stack design and configuration for security; - Common mistakes and gotcha's; - Security antipatterns and fallacies; - How to review code and think securely. Won't somebody please think of the children...

Slides: https://speakerdeck.com/rjohnsondev/php-is-evil-and-wants-to-eat-your-babies
Captions: 
	00:00:14,100 --> 00:00:23,279
first of all this talk contains a lot of

00:00:19,060 --> 00:00:25,689
swearing and very impassioned Australian

00:00:23,279 --> 00:00:27,849
yeah so sorry about that

00:00:25,689 --> 00:00:32,500
don't mean to cause any offence if I do

00:00:27,849 --> 00:00:35,620
cause offence sorry yeah living right on

00:00:32,500 --> 00:00:38,550
so welcome the first thing about me I'm

00:00:35,620 --> 00:00:40,870
not a security expert guys I'm just a

00:00:38,550 --> 00:00:45,190
developer I've been working with PHP for

00:00:40,870 --> 00:00:47,500
a wild look I didn't study security or

00:00:45,190 --> 00:00:50,650
programming even a at university I did

00:00:47,500 --> 00:00:52,960
multimedia with a sail major but you

00:00:50,650 --> 00:00:55,000
know like many of us got sucked into PHP

00:00:52,960 --> 00:00:56,710
through you know just a the way that the

00:00:55,000 --> 00:01:00,370
world works he end up sort of doing

00:00:56,710 --> 00:01:01,990
these things and been doing that for

00:01:00,370 --> 00:01:05,470
about 12 years give or take and I've

00:01:01,990 --> 00:01:08,979
been hacked a lot so basically this talk

00:01:05,470 --> 00:01:10,450
is is trying to maybe make people aware

00:01:08,979 --> 00:01:12,430
of the things that I wasn't aware of

00:01:10,450 --> 00:01:15,820
back and back in the day and hopefully

00:01:12,430 --> 00:01:19,469
those people who are uber ninjas at PHP

00:01:15,820 --> 00:01:22,270
might you know just enjoy the ride

00:01:19,469 --> 00:01:23,590
so the main goal of today's talk is to

00:01:22,270 --> 00:01:25,659
scare the hell out of you it like

00:01:23,590 --> 00:01:26,920
honestly if you guys go home today sort

00:01:25,659 --> 00:01:28,359
of questioning your own existence

00:01:26,920 --> 00:01:30,189
looking at yourself as saying why the

00:01:28,359 --> 00:01:34,119
 am i doing this I've succeeded

00:01:30,189 --> 00:01:36,850
alright because you know programming

00:01:34,119 --> 00:01:38,530
securely is a difficult thing and if

00:01:36,850 --> 00:01:40,600
you're scared if you're examining

00:01:38,530 --> 00:01:41,950
everything that you're doing in detail

00:01:40,600 --> 00:01:43,840
that means you're being defensive

00:01:41,950 --> 00:01:46,899
that is what defensive development is

00:01:43,840 --> 00:01:48,579
about alright so the topics were going

00:01:46,899 --> 00:01:50,289
to cover today things to avoid with PHP

00:01:48,579 --> 00:01:51,759
just to brush over that we're going to

00:01:50,289 --> 00:01:53,709
talk about string escaping obviously

00:01:51,759 --> 00:01:54,909
which is dull but kind of important and

00:01:53,709 --> 00:01:58,149
then we're going to talk more about

00:01:54,909 --> 00:02:00,279
strings which of course is good and then

00:01:58,149 --> 00:02:01,959
cool code injections bits like that some

00:02:00,279 --> 00:02:03,549
infrastructure stuff touch on that

00:02:01,959 --> 00:02:06,490
lightly and finally a bit of a case

00:02:03,549 --> 00:02:08,470
study feel free to scream out at any

00:02:06,490 --> 00:02:12,010
point in time I'll probably ignore you

00:02:08,470 --> 00:02:13,990
until the end okay third first why am I

00:02:12,010 --> 00:02:17,410
saying that PHP is able so basically a

00:02:13,990 --> 00:02:19,420
few points fundamentally PHP in the

00:02:17,410 --> 00:02:21,630
pastures encourage developers to remain

00:02:19,420 --> 00:02:24,160
ignorant of really important value

00:02:21,630 --> 00:02:25,180
issues like you know string escaping for

00:02:24,160 --> 00:02:27,819
example

00:02:25,180 --> 00:02:31,239
we'll get a little more into that and in

00:02:27,819 --> 00:02:33,459
a bit but yeah that's pretty nasty

00:02:31,239 --> 00:02:35,709
it has made terrible design decisions

00:02:33,459 --> 00:02:38,410
like Auto Register variables and things

00:02:35,709 --> 00:02:40,810
like that this is getting better of

00:02:38,410 --> 00:02:42,940
course as the language of vowels but you

00:02:40,810 --> 00:02:44,260
know they haven't done that so well it

00:02:42,940 --> 00:02:46,420
has a lot of quirks gotchas

00:02:44,260 --> 00:02:48,370
inconsistencies and unknowns

00:02:46,420 --> 00:02:49,540
you know haystack needle needle haystack

00:02:48,370 --> 00:02:50,890
all that sort of stuff everyone loves

00:02:49,540 --> 00:02:55,569
that right yeah and some nods in the

00:02:50,890 --> 00:02:58,989
audience okay for example okay this is a

00:02:55,569 --> 00:03:01,840
classic sort of sequel injection as you

00:02:58,989 --> 00:03:03,580
can see got a user ID there it's in a

00:03:01,840 --> 00:03:05,769
function but you know you're not really

00:03:03,580 --> 00:03:08,739
sure what the user ID is so a classic

00:03:05,769 --> 00:03:10,239
way of you know say phoniness would be

00:03:08,739 --> 00:03:11,530
to cast it to an int which is not the

00:03:10,239 --> 00:03:11,860
correct way but we'll get onto that in a

00:03:11,530 --> 00:03:13,810
bit

00:03:11,860 --> 00:03:15,250
however a lot of people will take this

00:03:13,810 --> 00:03:17,530
kind of approach right that should be

00:03:15,250 --> 00:03:20,769
good enough you know in most cases if

00:03:17,530 --> 00:03:23,410
you know UID is not an integer it'll

00:03:20,769 --> 00:03:27,130
just return zero right all right once

00:03:23,410 --> 00:03:29,190
there let's go on here okay what have we

00:03:27,130 --> 00:03:29,190
got

00:03:29,430 --> 00:03:44,739
okay so PHP - eight right yeah cool

00:03:41,350 --> 00:03:46,720
right zero why is there a one not

00:03:44,739 --> 00:03:50,049
negative one right see anyway that's by

00:03:46,720 --> 00:03:53,920
the by that's cool say it was like an

00:03:50,049 --> 00:03:55,829
array right yeah zero as well right yeah

00:03:53,920 --> 00:04:05,380
nice yeah

00:03:55,829 --> 00:04:10,829
anyone in that cool so so you can

00:04:05,380 --> 00:04:13,030
imagine you know that if you did have a

00:04:10,829 --> 00:04:14,440
particular function you'd end up getting

00:04:13,030 --> 00:04:17,769
the first record which a lot of the

00:04:14,440 --> 00:04:19,389
times is your admin user right some

00:04:17,769 --> 00:04:22,510
basic things to avoid coding without

00:04:19,389 --> 00:04:26,950
notices the shut-the-fuck-up symbol

00:04:22,510 --> 00:04:28,750
right love that thing basically and it's

00:04:26,950 --> 00:04:31,720
it's pretty much everywhere I mean this

00:04:28,750 --> 00:04:35,260
is a link to a blob of code ignitor I've

00:04:31,720 --> 00:04:37,370
got that up on another thing here but

00:04:35,260 --> 00:04:40,460
basically this little guy

00:04:37,370 --> 00:04:41,930
we can't see that this little guy here

00:04:40,460 --> 00:04:44,870
is called the major hassles in the past

00:04:41,930 --> 00:04:46,130
because it just it you don't know where

00:04:44,870 --> 00:04:47,180
the usernames incorrect or your host

00:04:46,130 --> 00:04:48,590
names incorrect or something like that

00:04:47,180 --> 00:04:50,510
and when you're in a live configuration

00:04:48,590 --> 00:04:55,220
and everything's breaking that takes a

00:04:50,510 --> 00:04:57,050
lot of digging but yeah okay extract

00:04:55,220 --> 00:05:05,510
obviously who's ever used to extract

00:04:57,050 --> 00:05:07,790
guys no no oh yeah right don't please

00:05:05,510 --> 00:05:09,590
double double sign which is really cool

00:05:07,790 --> 00:05:10,820
who thought the double dollar sign was

00:05:09,590 --> 00:05:14,000
amazing when you first read about it in

00:05:10,820 --> 00:05:16,910
the PHP manual yeah right yeah yeah

00:05:14,000 --> 00:05:18,139
don't know honestly the these things

00:05:16,910 --> 00:05:19,610
just clobber your variables you've got

00:05:18,139 --> 00:05:22,580
no idea what the hell is going on right

00:05:19,610 --> 00:05:23,600
in there you can have no confidence that

00:05:22,580 --> 00:05:25,010
your variables are going to stay in the

00:05:23,600 --> 00:05:27,590
same state if you have code like this

00:05:25,010 --> 00:05:30,080
going around so yeah just a basic ones

00:05:27,590 --> 00:05:31,430
backtick system and eval everyone knows

00:05:30,080 --> 00:05:32,539
that you know if you use that you're

00:05:31,430 --> 00:05:35,570
just asking for trouble

00:05:32,539 --> 00:05:36,979
right it's like yeah it really hard to

00:05:35,570 --> 00:05:40,039
escape properly really hard to work with

00:05:36,979 --> 00:05:42,260
and if you can avoid it please do a type

00:05:40,039 --> 00:05:45,580
juggling is also a classic one you know

00:05:42,260 --> 00:05:47,930
before it would have been good if we'd

00:05:45,580 --> 00:05:49,610
you know just made sure that it was an

00:05:47,930 --> 00:05:50,870
integer and then you know throw an

00:05:49,610 --> 00:05:53,360
exception or something like that

00:05:50,870 --> 00:05:56,150
instead of relying on PHP is sort of

00:05:53,360 --> 00:05:59,720
type mangling and finally being lazy

00:05:56,150 --> 00:06:01,460
we're all PHP coders and sort of being

00:05:59,720 --> 00:06:03,050
lazy is kind of in our blood right

00:06:01,460 --> 00:06:07,039
it's a scripting language that's what we

00:06:03,050 --> 00:06:10,160
are but it leads to issues so you know

00:06:07,039 --> 00:06:12,289
just when you come across a bit of code

00:06:10,160 --> 00:06:15,740
think twice about it all right first of

00:06:12,289 --> 00:06:16,810
all right string escaping SQL inject

00:06:15,740 --> 00:06:23,060
what now

00:06:16,810 --> 00:06:24,680
okay so right it's 2013 right yeah why

00:06:23,060 --> 00:06:26,990
do we still have SQL injection attacks

00:06:24,680 --> 00:06:28,190
right like everything that you hear

00:06:26,990 --> 00:06:29,930
about all the news well that sort of

00:06:28,190 --> 00:06:31,820
stuff is sequel injection attack has

00:06:29,930 --> 00:06:33,470
resulted in this database being

00:06:31,820 --> 00:06:37,370
compromised or something like that it's

00:06:33,470 --> 00:06:39,949
not too hard to fix and a bit of history

00:06:37,370 --> 00:06:45,320
and PHP was kind of been vetted in 1995

00:06:39,949 --> 00:06:50,680
yay yay yay yes Java was invented in

00:06:45,320 --> 00:06:50,680
1995 as well yeah oh come on guys

00:06:53,090 --> 00:06:58,500
so in 1996 just a year later Java came

00:06:56,370 --> 00:06:59,880
out with JDO Java dot or objects with

00:06:58,500 --> 00:07:01,800
them this fantastic little function

00:06:59,880 --> 00:07:04,680
called prepares famous hands up anyone

00:07:01,800 --> 00:07:10,849
know about that come on guys

00:07:04,680 --> 00:07:10,849
yeah basically they're amazing

00:07:11,240 --> 00:07:17,099
really yeah it took took 10 years for

00:07:15,210 --> 00:07:19,949
PHP to have that same sort of

00:07:17,099 --> 00:07:21,479
functionality yeah so MySQL I of course

00:07:19,949 --> 00:07:23,880
was a couple of years ago before that

00:07:21,479 --> 00:07:25,650
but still it took a very long time so

00:07:23,880 --> 00:07:27,870
prepared statements essentially take

00:07:25,650 --> 00:07:29,520
away any kind of problems with string

00:07:27,870 --> 00:07:30,990
escaping right you just don't have to

00:07:29,520 --> 00:07:32,910
worry about it you put placeholders

00:07:30,990 --> 00:07:34,470
where your SQL thing is and then you

00:07:32,910 --> 00:07:35,759
just pass the parameters through and

00:07:34,470 --> 00:07:37,620
take care of this gaping for you

00:07:35,759 --> 00:07:39,120
everyone should to it I don't know why

00:07:37,620 --> 00:07:42,570
that was until eight years ago though

00:07:39,120 --> 00:07:48,000
guys eight years eight years to fix some

00:07:42,570 --> 00:07:52,349
of your code and anyway and yeah

00:07:48,000 --> 00:07:54,169
so why yeah okay let's let's click on

00:07:52,349 --> 00:08:00,320
this and let's see what happens here

00:07:54,169 --> 00:08:06,110
okay so PHP my sequel insert tutorial

00:08:00,320 --> 00:08:09,300
mmm okay first result Oh w3schools

00:08:06,110 --> 00:08:10,620
legend love that site okay let's get

00:08:09,300 --> 00:08:12,900
down low what if it got here what if we

00:08:10,620 --> 00:08:17,270
got here well this is how you insert

00:08:12,900 --> 00:08:17,270
less kinetic can anyone see that

00:08:17,400 --> 00:08:24,300
but honestly what the hell come on

00:08:20,639 --> 00:08:25,800
serious oh this person should be hungry

00:08:24,300 --> 00:08:27,270
and recorded and then they should be you

00:08:25,800 --> 00:08:30,900
know brought back to life and then hung

00:08:27,270 --> 00:08:32,700
drawn and quartered again and and very

00:08:30,900 --> 00:08:34,050
dead but essentially this is why those

00:08:32,700 --> 00:08:37,110
thousands of people are cast out there

00:08:34,050 --> 00:08:38,700
who you know have single injection of

00:08:37,110 --> 00:08:41,190
taxes is because of things like this and

00:08:38,700 --> 00:08:43,500
I of course use this tutorial back in

00:08:41,190 --> 00:08:47,990
the day or something very very similar

00:08:43,500 --> 00:08:51,150
to it and got bitten rather badly but

00:08:47,990 --> 00:08:53,820
that worked right that worked on the

00:08:51,150 --> 00:08:57,600
default installation of PHP 5.3 and

00:08:53,820 --> 00:08:59,640
below okay without any issue though

00:08:57,600 --> 00:09:02,040
everything just you know no string

00:08:59,640 --> 00:09:05,040
escaping issues because of this magic

00:09:02,040 --> 00:09:07,110
thing called magic wise GPC it just

00:09:05,040 --> 00:09:08,880
magically added slashes to everything

00:09:07,110 --> 00:09:12,270
and any input that came in was

00:09:08,880 --> 00:09:14,310
automatically escaped because PHP made

00:09:12,270 --> 00:09:16,560
an assumption that everyone who uses PHP

00:09:14,310 --> 00:09:18,120
is just going to be inserting values

00:09:16,560 --> 00:09:19,910
that are sent in into a database and

00:09:18,120 --> 00:09:22,440
doing nothing else with them all right

00:09:19,910 --> 00:09:24,180
which is great means developers like us

00:09:22,440 --> 00:09:26,730
never have to pay any attention to

00:09:24,180 --> 00:09:30,089
anything vaguely to do with escaping the

00:09:26,730 --> 00:09:31,680
problems already taken care of until you

00:09:30,089 --> 00:09:33,240
start reading data back out of the DB

00:09:31,680 --> 00:09:35,490
inserting it again without passing it

00:09:33,240 --> 00:09:37,529
through get or post alright or you read

00:09:35,490 --> 00:09:39,660
from a file or something like that so

00:09:37,529 --> 00:09:41,100
PHP came up with a you know a brilliant

00:09:39,660 --> 00:09:42,900
solution we've got you covered

00:09:41,100 --> 00:09:46,320
magic quotes runtime inside of that

00:09:42,900 --> 00:09:48,089
anyone well a couple of people yeah yeah

00:09:46,320 --> 00:09:49,800
these are the two most brain-dead

00:09:48,089 --> 00:09:51,029
decisions well no not the most

00:09:49,800 --> 00:09:53,010
brain-dead decision it's one of the most

00:09:51,029 --> 00:09:55,410
brain-dead decisions that architecture

00:09:53,010 --> 00:09:58,560
lead PHP has ever made sort of hiding

00:09:55,410 --> 00:10:00,480
all that from us the great thing about

00:09:58,560 --> 00:10:03,930
this is that magic quotes runtime was

00:10:00,480 --> 00:10:06,150
off by default and the input was you

00:10:03,930 --> 00:10:09,120
know on by default so you've got

00:10:06,150 --> 00:10:12,660
mismatched data there but you've got no

00:10:09,120 --> 00:10:14,160
real idea so knowing this is there a

00:10:12,660 --> 00:10:16,260
sequel injection attack in this code I

00:10:14,160 --> 00:10:17,550
mean look at this we got kick animated

00:10:16,260 --> 00:10:19,860
strings a lot of people say yes right

00:10:17,550 --> 00:10:21,240
yeah the truth is you don't really know

00:10:19,860 --> 00:10:22,800
because you don't know whether in our

00:10:21,240 --> 00:10:25,770
user name is escaped by the time it gets

00:10:22,800 --> 00:10:28,620
here but a lot of cases it will be so

00:10:25,770 --> 00:10:30,510
you end up double escaping who has seen

00:10:28,620 --> 00:10:30,780
apostrophes for like five bazillion four

00:10:30,510 --> 00:10:33,630
five

00:10:30,780 --> 00:10:35,370
backslashes front yes yes it's because

00:10:33,630 --> 00:10:37,620
no one actually knows where it's escaped

00:10:35,370 --> 00:10:39,210
or not so just to be safe you escaped it

00:10:37,620 --> 00:10:40,410
again and again and again and again and

00:10:39,210 --> 00:10:42,180
again and again and again and again

00:10:40,410 --> 00:10:44,900
until all of a sudden yeah you have a

00:10:42,180 --> 00:10:48,690
flow your child Holloman it's bit messy

00:10:44,900 --> 00:10:50,520
right it also sort of ignores stuff like

00:10:48,690 --> 00:10:53,220
the enter file character on windows you

00:10:50,520 --> 00:10:54,690
know that's the control Z which is

00:10:53,220 --> 00:10:56,010
really annoying if you're like going

00:10:54,690 --> 00:10:58,560
through log files or whatever it'll just

00:10:56,010 --> 00:11:01,950
you know whatever don't see anything

00:10:58,560 --> 00:11:04,670
past this point that isn't escaped by

00:11:01,950 --> 00:11:07,500
magic quotes but it will be escaped by

00:11:04,670 --> 00:11:09,660
real escape string for my sequel okay if

00:11:07,500 --> 00:11:12,720
your encoding is set correctly we'll get

00:11:09,660 --> 00:11:13,860
onto that so the first way to the

00:11:12,720 --> 00:11:16,080
correct way to escape

00:11:13,860 --> 00:11:21,240
it's like die a quick and bloody death

00:11:16,080 --> 00:11:22,380
just you know end it please and then

00:11:21,240 --> 00:11:24,840
escape everything at the very last

00:11:22,380 --> 00:11:26,250
moment right so if you need to strip

00:11:24,840 --> 00:11:28,320
anything or unencoded everything

00:11:26,250 --> 00:11:31,380
anything you're doing it wrong all right

00:11:28,320 --> 00:11:32,520
you just just don't do it and then you

00:11:31,380 --> 00:11:33,900
can escape directly for your chosen

00:11:32,520 --> 00:11:35,640
output and this way you'll make sure

00:11:33,900 --> 00:11:37,680
that you know when you go into CSVs

00:11:35,640 --> 00:11:39,780
you're doing the backslash quote because

00:11:37,680 --> 00:11:41,490
it's double quote with CSV right things

00:11:39,780 --> 00:11:45,810
like that and it all if it just

00:11:41,490 --> 00:11:47,550
magically works it's great this is a pet

00:11:45,810 --> 00:11:50,580
hate of mine this input cleaning stuff

00:11:47,550 --> 00:11:53,610
right by this I kind of mean things like

00:11:50,580 --> 00:11:55,020
the cross-site scripting clean the

00:11:53,610 --> 00:11:58,860
reason why I hate this is because people

00:11:55,020 --> 00:12:00,570
mistake this for escaping okay it's very

00:11:58,860 --> 00:12:02,430
very easy for a developer to come along

00:12:00,570 --> 00:12:04,470
and say oh this is fan fantastic I'll

00:12:02,430 --> 00:12:05,820
make use of that and then forget about

00:12:04,470 --> 00:12:07,620
escaping when it comes to actually

00:12:05,820 --> 00:12:09,150
displaying on the page they just don't

00:12:07,620 --> 00:12:13,710
do it because they think this is going

00:12:09,150 --> 00:12:18,450
to take care of it so you know that but

00:12:13,710 --> 00:12:20,339
that being said right yeah you actually

00:12:18,450 --> 00:12:21,810
it's fine that's a that's a different

00:12:20,339 --> 00:12:24,720
issue I just got angry and I'll write

00:12:21,810 --> 00:12:28,410
that down that being said please still

00:12:24,720 --> 00:12:30,540
use it you know there's no no sort of

00:12:28,410 --> 00:12:33,290
prizes for coding without safety nets

00:12:30,540 --> 00:12:35,700
you know it's always good to do this

00:12:33,290 --> 00:12:38,580
just what we've got this cool random ie

00:12:35,700 --> 00:12:41,430
hack that I thought I'd throw in here so

00:12:38,580 --> 00:12:43,980
let's talk about HTML injections let's

00:12:41,430 --> 00:12:45,600
talk about the page title

00:12:43,980 --> 00:12:47,070
so we've got HTML special Charles there

00:12:45,600 --> 00:12:49,680
that's how we can escape that it's all

00:12:47,070 --> 00:12:51,420
nice and good and fun you tf7

00:12:49,680 --> 00:12:53,870
who knows where this is going hands up

00:12:51,420 --> 00:12:57,510
anyone heard of this cool

00:12:53,870 --> 00:13:00,120
you guys are gonna love it you tf7

00:12:57,510 --> 00:13:03,000
encoded tags look like that well

00:13:00,120 --> 00:13:05,610
something very similar at least if you

00:13:03,000 --> 00:13:11,130
ran htmlspecialchars over that it

00:13:05,610 --> 00:13:13,080
wouldn't do anything right so pay

00:13:11,130 --> 00:13:16,230
attention to your coatings because ie

00:13:13,080 --> 00:13:18,000
right had this fantastic feature where

00:13:16,230 --> 00:13:20,460
it would if you didn't give it an

00:13:18,000 --> 00:13:22,950
encoding as part of a meta parameter or

00:13:20,460 --> 00:13:24,960
part of a header it would just try and

00:13:22,950 --> 00:13:27,120
work it out based on the first you know

00:13:24,960 --> 00:13:28,200
few hundred bytes for the page and if it

00:13:27,120 --> 00:13:30,780
came across something like this in your

00:13:28,200 --> 00:13:33,120
title tag it's very hot the whole

00:13:30,780 --> 00:13:36,660
page is in UT f7 and boom this is a this

00:13:33,120 --> 00:13:39,450
is executed yeah you can't defend

00:13:36,660 --> 00:13:42,930
against that also another cool thing is

00:13:39,450 --> 00:13:44,760
that uh HTML escape special charts does

00:13:42,930 --> 00:13:51,420
take an encoding parameter but you tf7

00:13:44,760 --> 00:13:54,150
isn't actually valid so yes anyway this

00:13:51,420 --> 00:13:55,920
is fixed guys thank you

00:13:54,150 --> 00:13:58,230
but yeah pay attention to your coding it

00:13:55,920 --> 00:14:00,060
is important it is important my my

00:13:58,230 --> 00:14:03,060
signal escape will take a child set it

00:14:00,060 --> 00:14:08,220
needs that takes an encoding okay more

00:14:03,060 --> 00:14:09,570
strings PHP is essentially ship held

00:14:08,220 --> 00:14:14,760
together with chewing gum bubble gum or

00:14:09,570 --> 00:14:17,250
any kind of gum all right so see string

00:14:14,760 --> 00:14:20,070
is null terminated because this is back

00:14:17,250 --> 00:14:22,500
I don't know dark ages coders with

00:14:20,070 --> 00:14:25,860
chisels and rock were writing for this

00:14:22,500 --> 00:14:27,180
code and bytes were expensive so

00:14:25,860 --> 00:14:29,900
instead of putting the length of the

00:14:27,180 --> 00:14:32,010
string is the first you know four bytes

00:14:29,900 --> 00:14:33,720
they would just put a null terminator on

00:14:32,010 --> 00:14:36,260
the end and all of C works like this

00:14:33,720 --> 00:14:39,990
okay that saves them a whole three bytes

00:14:36,260 --> 00:14:42,120
brilliant PHP of course and you know

00:14:39,990 --> 00:14:43,410
every other language ever since it

00:14:42,120 --> 00:14:45,120
doesn't properly and it has a length in

00:14:43,410 --> 00:14:47,400
there so you can actually have you know

00:14:45,120 --> 00:14:48,720
null bytes in there but the C functions

00:14:47,400 --> 00:14:54,530
will only see everything up until the

00:14:48,720 --> 00:14:54,530
first non byte which is great kind of

00:14:54,559 --> 00:14:58,949
only you could get exploited very very

00:14:57,059 --> 00:15:02,459
easily because you essentially end any

00:14:58,949 --> 00:15:04,639
string arbitrary at any point just by

00:15:02,459 --> 00:15:06,689
inserting a null character so how can we

00:15:04,639 --> 00:15:11,100
exploit this so let's have a quick look

00:15:06,689 --> 00:15:14,490
at G this is annoying this simple case

00:15:11,100 --> 00:15:16,920
insensitive replace so here you can see

00:15:14,490 --> 00:15:18,929
that I'm just concatenate all this

00:15:16,920 --> 00:15:21,029
together and we've got an I in there now

00:15:18,929 --> 00:15:22,889
P reg replace can accept an eval

00:15:21,029 --> 00:15:25,290
modifier isn't that cool

00:15:22,889 --> 00:15:26,639
this is like having magic evals just all

00:15:25,290 --> 00:15:30,499
littered throughout your code and no one

00:15:26,639 --> 00:15:32,550
really realizes any Perl code is in here

00:15:30,499 --> 00:15:35,790
really anyway

00:15:32,550 --> 00:15:37,889
oh yes angers to the back excellent yeah

00:15:35,790 --> 00:15:42,269
Perl suffers from this as well so you

00:15:37,889 --> 00:15:44,550
know just so you know so you could let's

00:15:42,269 --> 00:15:49,439
let's see if I can I've got an example

00:15:44,550 --> 00:15:51,329
up of this here right not sure if you

00:15:49,439 --> 00:15:54,420
can see but this would be the example

00:15:51,329 --> 00:15:57,990
usage replace a in a SDF with B and we

00:15:54,420 --> 00:16:08,009
get B SDF right that was a capital A or

00:15:57,990 --> 00:16:10,850
good so let's go a step further if I put

00:16:08,009 --> 00:16:13,379
in a /e we would get an invalid patent

00:16:10,850 --> 00:16:14,850
but if we added a null terminator on the

00:16:13,379 --> 00:16:16,850
end we're all good because we just

00:16:14,850 --> 00:16:24,720
stripped off that other modifier right

00:16:16,850 --> 00:16:26,369
check it cool there's my null terminated

00:16:24,720 --> 00:16:30,480
there that's how you encode a null in

00:16:26,369 --> 00:16:34,230
HTML URL encoding right so replace a in

00:16:30,480 --> 00:16:36,799
a SDF with a shitload of PHP this is my

00:16:34,230 --> 00:16:36,799
password file

00:16:37,439 --> 00:16:46,110
in that cool yeah so yeah yeah that's uh

00:16:42,790 --> 00:16:46,110
that's that's a bit dirty

00:16:47,519 --> 00:16:55,990
okay what's affected everything because

00:16:53,680 --> 00:16:58,750
PHP is it's just you know going down to

00:16:55,990 --> 00:17:00,970
see all the time it's it's yeah you've

00:16:58,750 --> 00:17:03,370
got a lot of stuff to do you see this

00:17:00,970 --> 00:17:04,510
most commonly with things like this has

00:17:03,370 --> 00:17:05,049
anyone come across something like this

00:17:04,510 --> 00:17:08,140
before

00:17:05,049 --> 00:17:10,929
yeah nods in the room yeah yeah that bat

00:17:08,140 --> 00:17:12,309
dot PHP is not going to save you guys do

00:17:10,929 --> 00:17:14,020
something like this don't be lazy right

00:17:12,309 --> 00:17:16,809
have a giant big switch statement there

00:17:14,020 --> 00:17:18,400
only allow explicit values when you're

00:17:16,809 --> 00:17:19,929
doing your includes okay

00:17:18,400 --> 00:17:21,490
it's a bit more verbose and all that

00:17:19,929 --> 00:17:23,740
sort of stuff but you know it's not

00:17:21,490 --> 00:17:26,130
you're not going to have random exploits

00:17:23,740 --> 00:17:30,010
little throughout your code okay

00:17:26,130 --> 00:17:32,470
also some to remember is to secure

00:17:30,010 --> 00:17:36,220
around your PHP it like security isn't

00:17:32,470 --> 00:17:37,570
just about you know your code it's about

00:17:36,220 --> 00:17:39,039
the server it's about the environment

00:17:37,570 --> 00:17:41,110
all this sort of stuff as well so have

00:17:39,039 --> 00:17:42,640
several layers think what is someone

00:17:41,110 --> 00:17:44,530
going to what could someone do if they

00:17:42,640 --> 00:17:46,360
got this far what is what can someone do

00:17:44,530 --> 00:17:48,850
if they got that far and try and put a

00:17:46,360 --> 00:17:50,770
barrier every every step of the way most

00:17:48,850 --> 00:17:52,630
attack is out there just after easy

00:17:50,770 --> 00:17:54,370
targets I'm sure people are seen in

00:17:52,630 --> 00:17:56,890
their Apache logs just load rubbish

00:17:54,370 --> 00:17:59,740
right yeah that's just BOTS going around

00:17:56,890 --> 00:18:01,150
looking for a low-level low-hanging sort

00:17:59,740 --> 00:18:04,059
of fruit in terms of attacks like the

00:18:01,150 --> 00:18:06,970
include attack right that then after

00:18:04,059 --> 00:18:08,830
that so they can use your box to send

00:18:06,970 --> 00:18:11,470
spam to sense efficient phishing attacks

00:18:08,830 --> 00:18:14,200
and that sort of stuff so these small

00:18:11,470 --> 00:18:16,510
layers can can go a long way

00:18:14,200 --> 00:18:19,049
also PHP has a shitload of configuration

00:18:16,510 --> 00:18:22,950
options like check this this is great

00:18:19,049 --> 00:18:22,950
some nighttime reading for use

00:18:24,080 --> 00:18:29,100
yeah anyway learn them all right or at

00:18:27,659 --> 00:18:31,080
least be aware of them have us have a

00:18:29,100 --> 00:18:32,490
have a look because there's some options

00:18:31,080 --> 00:18:34,610
in there that are actually going to make

00:18:32,490 --> 00:18:36,720
your life a lot easier

00:18:34,610 --> 00:18:38,250
Please Please Please Please Please

00:18:36,720 --> 00:18:41,039
Please Please Please Please Please

00:18:38,250 --> 00:18:42,600
Please set your open based gif path who

00:18:41,039 --> 00:18:48,750
knows who does not know what that is

00:18:42,600 --> 00:18:50,940
anyone good disabled functions is also

00:18:48,750 --> 00:18:57,450
very very handy only you can't disable

00:18:50,940 --> 00:19:04,440
the eval brilliant backtick yeah anyway

00:18:57,450 --> 00:19:07,230
safe mode who liked safe mode why not it

00:19:04,440 --> 00:19:08,460
was so good it's fantastic eval was

00:19:07,230 --> 00:19:10,200
disabled the whole heap of was

00:19:08,460 --> 00:19:13,919
disabled it actually went a long way to

00:19:10,200 --> 00:19:16,320
protecting you from yourself ok and they

00:19:13,919 --> 00:19:18,269
removed it in 5.4 mostly due to sort of

00:19:16,320 --> 00:19:19,529
maintenance issues and the fact that it

00:19:18,269 --> 00:19:23,490
was very very difficult to do correctly

00:19:19,529 --> 00:19:24,870
but yeah it was a good thing it's always

00:19:23,490 --> 00:19:26,820
good to run that if you have it

00:19:24,870 --> 00:19:29,220
available if you can it also encourages

00:19:26,820 --> 00:19:32,100
you to code sort of more rigidly

00:19:29,220 --> 00:19:34,279
incorrectly make sure your files are

00:19:32,100 --> 00:19:37,919
correct ownership and things like that

00:19:34,279 --> 00:19:39,149
oh yeah and finally I'm not sure there

00:19:37,919 --> 00:19:42,059
was another talk on about running out of

00:19:39,149 --> 00:19:43,740
RAM but guys be aware that Apache is

00:19:42,059 --> 00:19:45,120
fought ok so you've got a lot of

00:19:43,740 --> 00:19:47,519
different processes running and they

00:19:45,120 --> 00:19:50,789
can't blow up with Ram you can go in

00:19:47,519 --> 00:19:56,299
your box if you expand your memory limit

00:19:50,789 --> 00:19:59,279
above what you have available so also

00:19:56,299 --> 00:20:01,049
connections if your of all of your

00:19:59,279 --> 00:20:02,669
processes are currently servicing

00:20:01,049 --> 00:20:04,470
requests so you've got like a timer or

00:20:02,669 --> 00:20:06,330
something on there or your string your

00:20:04,470 --> 00:20:08,100
download long pole something like that

00:20:06,330 --> 00:20:10,470
after that your connections are queued

00:20:08,100 --> 00:20:12,659
and once that's full then your whole box

00:20:10,470 --> 00:20:14,190
falls over which is great so you know

00:20:12,659 --> 00:20:18,440
just be aware of that sort of thing it

00:20:14,190 --> 00:20:23,970
goes a lot further than just PHP ok so

00:20:18,440 --> 00:20:25,830
case study well Stephen Fry I'm not sure

00:20:23,970 --> 00:20:27,000
or who was aware of Stephen Fry's

00:20:25,830 --> 00:20:33,330
Twitter getting hacked a few years ago

00:20:27,000 --> 00:20:35,250
Twitter password no one right ok so step

00:20:33,330 --> 00:20:37,250
one target of discovery so the goal here

00:20:35,250 --> 00:20:41,330
was basically try and get

00:20:37,250 --> 00:20:44,990
Stephen Fry's Twitter password and what

00:20:41,330 --> 00:20:47,120
they did was basically have a look

00:20:44,990 --> 00:20:49,460
around do some searching there was no

00:20:47,120 --> 00:20:51,080
info in the HTTP headers about what

00:20:49,460 --> 00:20:53,900
software he was running or anything like

00:20:51,080 --> 00:20:55,880
that but there was WordPress version in

00:20:53,900 --> 00:20:57,740
the meta tag of the site so they had a

00:20:55,880 --> 00:20:59,480
quick look at that it wasn't much there

00:20:57,740 --> 00:21:01,130
there was some cross-site scripting

00:20:59,480 --> 00:21:02,360
attacks available but nothing like code

00:21:01,130 --> 00:21:05,060
injection which is really what those

00:21:02,360 --> 00:21:08,170
guys are after all right so the next

00:21:05,060 --> 00:21:11,030
thing they did is they went on Google

00:21:08,170 --> 00:21:13,790
basically google has a file type sort of

00:21:11,030 --> 00:21:15,620
functionality where you can just get all

00:21:13,790 --> 00:21:18,200
the PHP files on a site just by typing

00:21:15,620 --> 00:21:28,430
in this write Google's great for hacking

00:21:18,200 --> 00:21:30,770
by the way boom did it again this sort

00:21:28,430 --> 00:21:34,640
of uncovered things like this subsection

00:21:30,770 --> 00:21:36,380
occurs Twitter and that was using that

00:21:34,640 --> 00:21:40,730
pattern that pattern that everyone's

00:21:36,380 --> 00:21:45,050
been thrown by all right so they tested

00:21:40,730 --> 00:21:47,300
it out okay now people have seen this

00:21:45,050 --> 00:21:51,110
before in your logs no doubt at some

00:21:47,300 --> 00:21:53,780
point right let's uh let's see how how

00:21:51,110 --> 00:21:59,290
we go here so just bear with me I'm just

00:21:53,780 --> 00:21:59,290
going to locate where ours

00:22:01,610 --> 00:22:08,820
okay so we saw before I had my my

00:22:06,990 --> 00:22:11,400
password attack here very very similar I

00:22:08,820 --> 00:22:13,650
guess the the password file is

00:22:11,400 --> 00:22:15,270
accessible to everything always right

00:22:13,650 --> 00:22:16,650
that's why everyone classically looks

00:22:15,270 --> 00:22:18,330
for it in the first place it really

00:22:16,650 --> 00:22:19,980
tells you whether an exploit is there or

00:22:18,330 --> 00:22:23,700
not and once you know that it's there

00:22:19,980 --> 00:22:26,130
you can go ahead and execute whatever

00:22:23,700 --> 00:22:27,480
you want so allow URL include is one of

00:22:26,130 --> 00:22:28,980
those terrible options that you can

00:22:27,480 --> 00:22:32,250
enable if you want to shoot yourself in

00:22:28,980 --> 00:22:33,690
the foot or in the head or both it

00:22:32,250 --> 00:22:37,730
basically means that you can include an

00:22:33,690 --> 00:22:39,510
HTTP file as a PHP file and away you go

00:22:37,730 --> 00:22:42,450
thankfully assuming for I didn't have

00:22:39,510 --> 00:22:44,030
that enabled on his site so they have to

00:22:42,450 --> 00:22:48,179
get some code into the server somehow

00:22:44,030 --> 00:22:52,049
using a local file injection

00:22:48,179 --> 00:22:55,080
okay so who's aware of /proc slash self

00:22:52,049 --> 00:22:57,240
on UNIX systems yeah a couple of people

00:22:55,080 --> 00:22:59,190
yeah so basically this gives you a whole

00:22:57,240 --> 00:23:03,900
heap of information about you as a

00:22:59,190 --> 00:23:05,940
process and with environ this is a bunch

00:23:03,900 --> 00:23:07,860
of environment variables I guess PHP

00:23:05,940 --> 00:23:10,770
will if you're running a CGI we'll pass

00:23:07,860 --> 00:23:12,150
that through so what you can do is just

00:23:10,770 --> 00:23:15,179
have a header that you send with your

00:23:12,150 --> 00:23:17,220
request with a bunch of PHP in it and if

00:23:15,179 --> 00:23:21,809
you can include that file it will

00:23:17,220 --> 00:23:24,299
execute it okay there's also proc self

00:23:21,809 --> 00:23:29,010
FD FD has all the file descriptors that

00:23:24,299 --> 00:23:34,970
are currently open so that's a have a

00:23:29,010 --> 00:23:34,970
look at okay so my log file for example

00:23:35,690 --> 00:23:45,540
that is this bit of code here so /proc

00:23:42,840 --> 00:23:47,429
slash self slash FD / - that's a file

00:23:45,540 --> 00:23:49,110
pointer number - and the great thing

00:23:47,429 --> 00:23:50,370
about this is it gets around any

00:23:49,110 --> 00:23:54,360
permissions that you might have on your

00:23:50,370 --> 00:23:58,610
log file directory right so say your

00:23:54,360 --> 00:24:01,290
slash var slash log slash Apache - is

00:23:58,610 --> 00:24:03,540
not readable by anyone is really locked

00:24:01,290 --> 00:24:05,100
down only to the owner now you're

00:24:03,540 --> 00:24:06,270
executing this is a different user so

00:24:05,100 --> 00:24:08,910
usually you wouldn't be able to access

00:24:06,270 --> 00:24:11,130
it but if your actual error log file

00:24:08,910 --> 00:24:13,080
right has read access regardless of the

00:24:11,130 --> 00:24:14,210
parent directory you can still access it

00:24:13,080 --> 00:24:15,800
through this path instead

00:24:14,210 --> 00:24:19,670
like this magic little workaround it's

00:24:15,800 --> 00:24:21,470
really really cool and there we go

00:24:19,670 --> 00:24:24,350
there's my there's my look file we can

00:24:21,470 --> 00:24:26,270
see that that works just by refreshing

00:24:24,350 --> 00:24:30,440
and I'll get a dish '''l entries in

00:24:26,270 --> 00:24:32,210
there yeah by the way since we default

00:24:30,440 --> 00:24:33,340
on Red Hat sent off all that sort of

00:24:32,210 --> 00:24:35,930
things so if you guys were running that

00:24:33,340 --> 00:24:38,600
yeah it's okay on a bun too but other

00:24:35,930 --> 00:24:40,580
ones be aware of it so the easy way to

00:24:38,600 --> 00:24:43,370
exploit this is to use curl to issue a

00:24:40,580 --> 00:24:46,310
pH now a request with some PHP code in

00:24:43,370 --> 00:24:49,490
it so if we were to take something

00:24:46,310 --> 00:24:51,350
similar to this can I actually select

00:24:49,490 --> 00:24:55,460
that no but you get the idea here this

00:24:51,350 --> 00:24:58,970
will put the refer in and because it has

00:24:55,460 --> 00:25:00,410
an incorrect referrer apaches going to

00:24:58,970 --> 00:25:01,970
go what the hell and throw that in the

00:25:00,410 --> 00:25:07,030
error log all of a sudden you have this

00:25:01,970 --> 00:25:07,030
raw PHP code in your error log cool huh

00:25:08,620 --> 00:25:12,110
okay

00:25:10,640 --> 00:25:15,170
and then of course you just include

00:25:12,110 --> 00:25:16,280
proxy 52 and you're executing and you're

00:25:15,170 --> 00:25:18,200
laughing you're there

00:25:16,280 --> 00:25:23,020
right you can use that to bootstrap any

00:25:18,200 --> 00:25:27,640
other commands such as this yeah great

00:25:23,020 --> 00:25:29,660
so step three was find the password

00:25:27,640 --> 00:25:31,310
basically that's this is the easy part

00:25:29,660 --> 00:25:32,930
from now on just find a writable

00:25:31,310 --> 00:25:35,570
directory there was one on the image

00:25:32,930 --> 00:25:38,180
thumbnail cash somewhere uploaded web

00:25:35,570 --> 00:25:41,180
shell in this case they used C 99 mad

00:25:38,180 --> 00:25:42,920
shell browse read source code do

00:25:41,180 --> 00:25:45,200
whatever you want since BAM make love

00:25:42,920 --> 00:25:48,350
all that sort of thing and walking

00:25:45,200 --> 00:25:50,450
through the execution path of the the

00:25:48,350 --> 00:25:53,560
actual site itself they found this

00:25:50,450 --> 00:25:56,570
little nugget in SF constants right

00:25:53,560 --> 00:26:04,250
that's a base64 coded will give you that

00:25:56,570 --> 00:26:05,420
which is its password yeah I faked that

00:26:04,250 --> 00:26:08,990
one but that is actually what they

00:26:05,420 --> 00:26:12,140
posted and got a whole heap of weird

00:26:08,990 --> 00:26:12,440
responses good yeah that's that that's

00:26:12,140 --> 00:26:14,510
it

00:26:12,440 --> 00:26:17,000
so some easy ways that they he could

00:26:14,510 --> 00:26:18,500
have avoided this first of all don't

00:26:17,000 --> 00:26:22,090
have a file inclusion vulnerability

00:26:18,500 --> 00:26:24,100
attack please answer yeah

00:26:22,090 --> 00:26:25,810
and ways they could have prevented

00:26:24,100 --> 00:26:28,660
inclusion of the log file preserve the

00:26:25,810 --> 00:26:30,070
log file file permissions right by

00:26:28,660 --> 00:26:34,570
default on a bun - comes down lock

00:26:30,070 --> 00:26:35,950
lockdown but you know in Red Hat you

00:26:34,570 --> 00:26:38,680
still gotta lock that lock that down

00:26:35,950 --> 00:26:40,300
open based er if that was set would have

00:26:38,680 --> 00:26:44,650
been fine because that path wouldn't

00:26:40,300 --> 00:26:47,380
have been there right safe mode would

00:26:44,650 --> 00:26:48,820
have been fine no eval no different

00:26:47,380 --> 00:26:49,930
odors on your log file versus your

00:26:48,820 --> 00:26:54,120
script it would have been great and

00:26:49,930 --> 00:26:58,690
where did they get rid of that SELinux

00:26:54,120 --> 00:27:00,820
who runs that guys maybe just a handful

00:26:58,690 --> 00:27:02,020
do it do it just research it it's pain

00:27:00,820 --> 00:27:03,790
in the ass there's real pain in the ass

00:27:02,020 --> 00:27:04,990
to get running all right but once you

00:27:03,790 --> 00:27:06,280
have it running is really going to

00:27:04,990 --> 00:27:08,290
protect you against things like this you

00:27:06,280 --> 00:27:09,670
have different modes for the files so

00:27:08,290 --> 00:27:14,080
it's like I'm not gonna include that log

00:27:09,670 --> 00:27:15,220
file it's a log file it's not PHP with

00:27:14,080 --> 00:27:17,260
the writable directories that's a little

00:27:15,220 --> 00:27:19,140
more difficult but possibly by

00:27:17,260 --> 00:27:22,360
pre-caching the images that would have

00:27:19,140 --> 00:27:23,890
would have gone a long way could have

00:27:22,360 --> 00:27:26,080
possibly catch that in the DB as well

00:27:23,890 --> 00:27:29,970
that would have been handy but yeah it

00:27:26,080 --> 00:27:34,780
is it is difficult and eval safe mode

00:27:29,970 --> 00:27:37,330
right so there was probably others how

00:27:34,780 --> 00:27:41,650
are we doing for time 10 minutes

00:27:37,330 --> 00:27:42,850
excellent great yeah so I guess good

00:27:41,650 --> 00:27:44,680
time to wrap up guys always think

00:27:42,850 --> 00:27:46,870
defensively when you're typing your

00:27:44,680 --> 00:27:48,520
codes like how can this be exploited at

00:27:46,870 --> 00:27:50,950
every single step the most minut

00:27:48,520 --> 00:27:52,600
function called just can I trust the

00:27:50,950 --> 00:27:55,030
parameters that have been set in don't

00:27:52,600 --> 00:27:56,380
think big think small all right what -

00:27:55,030 --> 00:27:58,360
fo you're escaping always do it at the

00:27:56,380 --> 00:28:00,340
very last minute use prepared statements

00:27:58,360 --> 00:28:03,010
use prepared statements use prepared

00:28:00,340 --> 00:28:04,660
statements if anyone is writing my

00:28:03,010 --> 00:28:08,650
sequel real escape you're doing it wrong

00:28:04,660 --> 00:28:10,770
right prepared statements please be

00:28:08,650 --> 00:28:14,380
mindful of PHP is in working so that

00:28:10,770 --> 00:28:15,820
poison old character is is something

00:28:14,380 --> 00:28:18,280
that was going to go away will probably

00:28:15,820 --> 00:28:20,290
go away with PHP 6 but until then with

00:28:18,280 --> 00:28:22,270
with we're stuck with it right so be

00:28:20,290 --> 00:28:24,580
careful about that and yeah always

00:28:22,270 --> 00:28:27,360
remember that PHP is silently working

00:28:24,580 --> 00:28:31,899
against you ok

00:28:27,360 --> 00:28:40,480
right goods questions thoughts feedback

00:28:31,899 --> 00:28:42,840
let's hear it well I guess at any one of

00:28:40,480 --> 00:28:45,279
those points that I've demonstrated yeah

00:28:42,840 --> 00:28:47,760
it does it wants to break in and get

00:28:45,279 --> 00:28:47,760
your children

00:29:04,590 --> 00:29:10,120
I haven't used WordPress in quite a

00:29:06,880 --> 00:29:15,880
while so no I guess mostly because I've

00:29:10,120 --> 00:29:19,800
been hacked quite a few ties okay anyone

00:29:15,880 --> 00:29:19,800
else guys don't be shy girlfriends right

00:29:22,350 --> 00:29:32,010
yeah I mean a lot of that code it seemed

00:29:28,480 --> 00:29:35,080
quite old-school yeah how do you feel

00:29:32,010 --> 00:29:38,140
about security with because I'm a

00:29:35,080 --> 00:29:39,480
popular framework yeah that's an

00:29:38,140 --> 00:29:41,560
interesting question I mean one of the

00:29:39,480 --> 00:29:44,770
valuable things that frameworks can add

00:29:41,560 --> 00:29:47,680
is a little take a lot of the pain out

00:29:44,770 --> 00:29:48,670
of this sort of thing especially when it

00:29:47,680 --> 00:29:50,650
comes to things like redirects

00:29:48,670 --> 00:29:54,490
forgetting to die after redirect was a

00:29:50,650 --> 00:29:58,090
classic bug that people would have bits

00:29:54,490 --> 00:30:00,070
and pieces like that they do go a long

00:29:58,090 --> 00:30:02,740
way but the problem is I think

00:30:00,070 --> 00:30:05,410
frameworks also sort of encourage a

00:30:02,740 --> 00:30:08,980
similar thing to PHP did early on in

00:30:05,410 --> 00:30:10,360
that it tries to ensure that you never

00:30:08,980 --> 00:30:11,710
have to worry about things when in

00:30:10,360 --> 00:30:14,050
actual fact you should be aware of them

00:30:11,710 --> 00:30:16,840
right and I think it's dangerous for

00:30:14,050 --> 00:30:19,210
people to go through life not being

00:30:16,840 --> 00:30:20,650
aware of these sorts of issues because

00:30:19,210 --> 00:30:23,220
it will crop up at some point and it

00:30:20,650 --> 00:30:23,220
will bite you in the ass

00:30:29,860 --> 00:30:38,090
yeah this one are there any sort of

00:30:35,450 --> 00:30:40,610
automated security tests you can run on

00:30:38,090 --> 00:30:42,499
your own system just to make sure yeah I

00:30:40,610 --> 00:30:47,029
mean guy says there's a shitload out

00:30:42,499 --> 00:30:48,740
there that's that wasn't you know this

00:30:47,029 --> 00:30:50,600
is such a wide reaching subject that I

00:30:48,740 --> 00:30:51,860
didn't want to focus too much on on that

00:30:50,600 --> 00:30:52,850
side of things I want you to be aware

00:30:51,860 --> 00:30:54,080
from the coda side of things but

00:30:52,850 --> 00:30:55,700
definitely there's a whole heap out

00:30:54,080 --> 00:30:56,899
there that you can test but never rely

00:30:55,700 --> 00:30:59,990
on it because there's always going to be

00:30:56,899 --> 00:31:01,100
something coming along later that you

00:30:59,990 --> 00:31:02,659
know that we'll be able to find

00:31:01,100 --> 00:31:04,700
something that those systems can't

00:31:02,659 --> 00:31:06,889
alright so you have to be defensive from

00:31:04,700 --> 00:31:08,720
your your code outwards and then test

00:31:06,889 --> 00:31:19,690
afterwards but don't rely on it purely

00:31:08,720 --> 00:31:26,450
on testing right yeah to get even I

00:31:19,690 --> 00:31:29,480
would never answer such a question I'm

00:31:26,450 --> 00:31:32,299
gonna do a shameless plug but this chap

00:31:29,480 --> 00:31:33,980
here Patrick uses composure on these

00:31:32,299 --> 00:31:36,230
projects and Senseo labs have just

00:31:33,980 --> 00:31:38,149
released a new piece of software whereas

00:31:36,230 --> 00:31:39,919
if you upload your composure they will

00:31:38,149 --> 00:31:42,230
go through all the dependencies and see

00:31:39,919 --> 00:31:44,119
if there is any security alerts with any

00:31:42,230 --> 00:31:51,580
libraries that you're included cool so

00:31:44,119 --> 00:31:51,580
that's pretty cool that's one back

00:31:55,460 --> 00:31:59,600
yeah splendid how many of those attacks

00:31:58,160 --> 00:32:03,800
that you showed have protected just by

00:31:59,600 --> 00:32:06,230
installing not security on Apache I'm

00:32:03,800 --> 00:32:08,600
not sure to be honest things like the

00:32:06,230 --> 00:32:11,030
you know pretty double dots in the URL

00:32:08,600 --> 00:32:12,520
just yeah for our through those probably

00:32:11,030 --> 00:32:15,140
a lot of them but once again you're

00:32:12,520 --> 00:32:17,930
you're trying to band-aid his solution

00:32:15,140 --> 00:32:19,250
at some point in time you might what you

00:32:17,930 --> 00:32:21,290
might change servers that doesn't don't

00:32:19,250 --> 00:32:23,120
happen that doesn't have that doesn't

00:32:21,290 --> 00:32:25,450
have hardened PHP project all that sort

00:32:23,120 --> 00:32:28,450
of things so it won't we won't save you

00:32:25,450 --> 00:32:28,450
yeah

00:32:32,060 --> 00:32:41,550
hmm another commentated well sorry it's

00:32:39,510 --> 00:32:48,990
not the HP then what what's the

00:32:41,550 --> 00:32:51,330
alternative if not PHP Oh Java no no

00:32:48,990 --> 00:32:53,670
yeah the guy says you know this isn't

00:32:51,330 --> 00:32:57,060
just exclusive to to PHP I mean every

00:32:53,670 --> 00:32:59,250
every language you can you can have

00:32:57,060 --> 00:33:01,470
issues in but I think PHP goes an extra

00:32:59,250 --> 00:33:03,270
step in in trying to shoot yourself in

00:33:01,470 --> 00:33:04,410
the foot I mean it it actually really

00:33:03,270 --> 00:33:07,920
seems to be working against you

00:33:04,410 --> 00:33:09,240
sometimes but yeah it's so other

00:33:07,920 --> 00:33:11,100
languages do have their issues as well

00:33:09,240 --> 00:33:13,890
and I'm not saying that one language is

00:33:11,100 --> 00:33:15,270
perfect that yeah yeah it started the

00:33:13,890 --> 00:33:19,260
question do you want to repeat that in

00:33:15,270 --> 00:33:21,030
the mic yeah so harden patch does that

00:33:19,260 --> 00:33:23,190
actually get rid of some of those

00:33:21,030 --> 00:33:29,300
vulnerabilities are the the hardened PHP

00:33:23,190 --> 00:33:31,290
project um it doesn't really it it

00:33:29,300 --> 00:33:33,420
traditionally protected a lot of the

00:33:31,290 --> 00:33:35,760
internal sort of stuff but that poison

00:33:33,420 --> 00:33:37,290
by character still works fine on it this

00:33:35,760 --> 00:33:39,840
is a bunch of works fine on Ubuntu and

00:33:37,290 --> 00:33:46,140
it that has the hard and PHP hardened

00:33:39,840 --> 00:33:48,690
PHP patch the frameworks helping or

00:33:46,140 --> 00:33:50,370
hindering this problem their framework

00:33:48,690 --> 00:33:52,860
to do help they help the problem but

00:33:50,370 --> 00:33:55,830
once again yeah they can also cover up

00:33:52,860 --> 00:33:58,410
people's awareness of these issues so

00:33:55,830 --> 00:34:00,090
that even though you know this is

00:33:58,410 --> 00:34:01,740
low-level old-school sort of stuff it's

00:34:00,090 --> 00:34:07,790
still there people should still be aware

00:34:01,740 --> 00:34:07,790
of it anything else one at the back

00:34:14,600 --> 00:34:18,950
isn't the argument about not using

00:34:16,970 --> 00:34:21,820
relying on what security the same about

00:34:18,950 --> 00:34:24,200
not relying on safe mode being there

00:34:21,820 --> 00:34:26,179
that's quite true I'm not saying don't

00:34:24,200 --> 00:34:28,160
install mod security I'm just saying

00:34:26,179 --> 00:34:30,110
don't rely on it like don't rely on safe

00:34:28,160 --> 00:34:30,470
mode but use it if it's available all

00:34:30,110 --> 00:34:32,720
right

00:34:30,470 --> 00:34:34,010
put layers in that but don't rely on any

00:34:32,720 --> 00:34:43,520
single layer because they will get

00:34:34,010 --> 00:34:46,720
through it okay anything else cool guys

00:34:43,520 --> 00:34:46,720
thanks very much have fun

00:34:57,600 --> 00:34:59,660

YouTube URL: https://www.youtube.com/watch?v=T5cCLiBffXs


