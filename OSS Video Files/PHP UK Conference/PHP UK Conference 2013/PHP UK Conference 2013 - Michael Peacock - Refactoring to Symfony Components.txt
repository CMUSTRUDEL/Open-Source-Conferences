Title: PHP UK Conference 2013 - Michael Peacock - Refactoring to Symfony Components
Publication date: 2013-04-22
Playlist: PHP UK Conference 2013
Description: 
	Refactoring code is an important aspect of maintenance and development, but when a large application needs to be extensively refactored, often a developers goto suggestion is to rewrite it. An alternative: The symfony2 components, and their friends; standalone implementations of a range of common website features, separated from the symfony2 framework. These components provide an excellent base for any framework or application. This talk will look at how these components can be used to refactor applications of any size, through real world examples picked up from refactoring a large high-content, high-traffic news website.

Slides: http://www.michaelpeacock.co.uk/slides/r2sc/index.html
Captions: 
	00:00:13,099 --> 00:00:17,990
hi thank over thank you very much

00:00:15,660 --> 00:00:19,100
everybody for coming on to this talk

00:00:17,990 --> 00:00:20,990
I'm going to be talking about how you

00:00:19,100 --> 00:00:23,000
can use Symphony components to refactor

00:00:20,990 --> 00:00:24,980
your existing application particularly

00:00:23,000 --> 00:00:26,630
if it's a some legacy code or something

00:00:24,980 --> 00:00:29,689
that you just like to to modernize and

00:00:26,630 --> 00:00:31,039
improve a little bit about me I'm the

00:00:29,689 --> 00:00:33,559
head developer for a company called

00:00:31,039 --> 00:00:34,879
ground six we're a technology investment

00:00:33,559 --> 00:00:37,129
firm based in the northeast of England

00:00:34,879 --> 00:00:39,080
so people come to us with tech based

00:00:37,129 --> 00:00:40,250
business ideas we build them into a

00:00:39,080 --> 00:00:42,440
product and we build them into a

00:00:40,250 --> 00:00:43,699
business i'm also a technical author

00:00:42,440 --> 00:00:45,620
written a couple of books about

00:00:43,699 --> 00:00:48,860
different content management systems and

00:00:45,620 --> 00:00:50,629
PHP applications and occasion area to

00:00:48,860 --> 00:00:55,250
speak at events and conferences such as

00:00:50,629 --> 00:00:57,010
this so the components the symphony

00:00:55,250 --> 00:01:00,799
framework is built using a series of

00:00:57,010 --> 00:01:02,780
stand-alone reusable components they've

00:01:00,799 --> 00:01:03,979
been released independently so that you

00:01:02,780 --> 00:01:05,269
don't need to use them as part of the

00:01:03,979 --> 00:01:07,460
framework you can use them in your own

00:01:05,269 --> 00:01:09,530
application be at legacy be something

00:01:07,460 --> 00:01:12,049
brand new and it ranges from things such

00:01:09,530 --> 00:01:13,820
as browser emulation CSS selecting

00:01:12,049 --> 00:01:16,970
finding files rooting within your

00:01:13,820 --> 00:01:18,530
application security translations forms

00:01:16,970 --> 00:01:21,200
a whole host of things that are

00:01:18,530 --> 00:01:22,640
available out there you can find all the

00:01:21,200 --> 00:01:24,590
information about them on the air the

00:01:22,640 --> 00:01:26,060
symphony component website it's all the

00:01:24,590 --> 00:01:26,960
documentation for each of them as well

00:01:26,060 --> 00:01:29,899
as download and installation

00:01:26,960 --> 00:01:32,270
instructions so why might you want to

00:01:29,899 --> 00:01:34,549
use components as opposed to just using

00:01:32,270 --> 00:01:36,380
a simply framework or rebuilding it in

00:01:34,549 --> 00:01:38,719
something else or refactoring using some

00:01:36,380 --> 00:01:40,549
other traditional methods well the first

00:01:38,719 --> 00:01:42,859
one is that the components they solve

00:01:40,549 --> 00:01:44,659
common problems that already exist why

00:01:42,859 --> 00:01:46,159
reinvent the wheel why build a

00:01:44,659 --> 00:01:47,960
translation tool when there's already

00:01:46,159 --> 00:01:49,520
one out there why build the router when

00:01:47,960 --> 00:01:50,810
there's already one out there there's

00:01:49,520 --> 00:01:52,819
things that exist that do this really

00:01:50,810 --> 00:01:54,649
well you can focus on building the

00:01:52,819 --> 00:01:56,270
product using the business logic that it

00:01:54,649 --> 00:01:58,700
needs not worry about the actual

00:01:56,270 --> 00:02:01,310
fundamentals of how the application and

00:01:58,700 --> 00:02:03,200
the underlying aspects work they're very

00:02:01,310 --> 00:02:05,149
well documented or the source code is

00:02:03,200 --> 00:02:08,149
available it's very easy to raise issues

00:02:05,149 --> 00:02:09,800
get them fixed the installation usage

00:02:08,149 --> 00:02:11,270
and extending instructions are excellent

00:02:09,800 --> 00:02:12,680
so if you decide that you want to change

00:02:11,270 --> 00:02:14,569
how it works for your particular use

00:02:12,680 --> 00:02:16,850
case it's very easy to do that as well

00:02:14,569 --> 00:02:18,680
they're often built in a way that allows

00:02:16,850 --> 00:02:20,569
you to interchange different aspects of

00:02:18,680 --> 00:02:22,620
them so for example with the routing

00:02:20,569 --> 00:02:24,330
component you can use a

00:02:22,620 --> 00:02:26,099
mol file to pulling the roots you can

00:02:24,330 --> 00:02:28,409
use annotations you can use of the types

00:02:26,099 --> 00:02:29,760
of file to use PHP code or you could

00:02:28,409 --> 00:02:32,030
write your own extension if you want to

00:02:29,760 --> 00:02:34,620
they're very well interchangeable

00:02:32,030 --> 00:02:36,090
they're relatively standalone I said

00:02:34,620 --> 00:02:38,250
relatively because some of them do have

00:02:36,090 --> 00:02:40,230
some dependencies on theater so if you

00:02:38,250 --> 00:02:42,060
want to use the routing component with

00:02:40,230 --> 00:02:43,829
llamo you need the other components as

00:02:42,060 --> 00:02:45,329
well but apart from that they are

00:02:43,829 --> 00:02:47,849
relatively standalone and work well

00:02:45,329 --> 00:02:49,709
independently and I think they're ideal

00:02:47,849 --> 00:02:51,750
for refactoring as I say they allow you

00:02:49,709 --> 00:02:53,670
to focus on building your application

00:02:51,750 --> 00:02:55,799
building the product getting business in

00:02:53,670 --> 00:02:57,060
rather than thinking I've got to build

00:02:55,799 --> 00:02:59,129
all these things that I need to have a

00:02:57,060 --> 00:03:00,690
solid stable platform so if you've got

00:02:59,129 --> 00:03:02,609
something that's legacy needs to be

00:03:00,690 --> 00:03:04,620
refracted or put onto something that's

00:03:02,609 --> 00:03:07,200
more stable instead of going right let's

00:03:04,620 --> 00:03:10,290
scrap this and go and use WordPress or

00:03:07,200 --> 00:03:11,849
magento or the symphony framework let's

00:03:10,290 --> 00:03:13,319
do a bit at a time let's introduce a

00:03:11,849 --> 00:03:14,819
ruder let's introduce this let's

00:03:13,319 --> 00:03:17,790
introduce that which is a very nice

00:03:14,819 --> 00:03:19,709
aspect so you want to install any of the

00:03:17,790 --> 00:03:21,690
components at the knight in shining

00:03:19,709 --> 00:03:23,700
armor for this is composer or anybody

00:03:21,690 --> 00:03:26,250
that's not using composer really suggest

00:03:23,700 --> 00:03:27,750
that you do download it over another

00:03:26,250 --> 00:03:29,669
command in command line that will

00:03:27,750 --> 00:03:32,280
download the composer dependency

00:03:29,669 --> 00:03:34,500
management system create a composer that

00:03:32,280 --> 00:03:36,810
Jason filing the project this is just a

00:03:34,500 --> 00:03:39,389
Jason file that says what dependencies

00:03:36,810 --> 00:03:41,519
your project has your for example would

00:03:39,389 --> 00:03:43,079
be Symphony forward slash and then the

00:03:41,519 --> 00:03:44,669
project name of the components that you

00:03:43,079 --> 00:03:46,799
want to use so it could be routing

00:03:44,669 --> 00:03:48,870
translation you just say that you want

00:03:46,799 --> 00:03:50,879
the current development version now

00:03:48,870 --> 00:03:52,410
allow you to pull that in and you run

00:03:50,879 --> 00:03:54,090
composer and you've got all the

00:03:52,410 --> 00:03:55,949
components that you've asked for so if

00:03:54,090 --> 00:03:58,709
you want a routing component start it to

00:03:55,949 --> 00:04:00,150
you your RAM composite of JSON file you

00:03:58,709 --> 00:04:02,400
want other components you have them as

00:04:00,150 --> 00:04:03,989
well it's very straightforward I'm also

00:04:02,400 --> 00:04:06,180
going to talk a little bit about some of

00:04:03,989 --> 00:04:09,090
their friends so there's Swift Mahler

00:04:06,180 --> 00:04:11,160
twig pimple they made biol up the team

00:04:09,090 --> 00:04:13,109
behind the symphony components and the

00:04:11,160 --> 00:04:14,970
symphony framework but they're not not

00:04:13,109 --> 00:04:17,130
part of the component sweet and there's

00:04:14,970 --> 00:04:18,269
also a third-party caching library I'm

00:04:17,130 --> 00:04:19,090
going to talk about when we talk about

00:04:18,269 --> 00:04:21,940
template

00:04:19,090 --> 00:04:23,860
twig it's a little bit about what's in

00:04:21,940 --> 00:04:25,480
store today going to talk about how you

00:04:23,860 --> 00:04:27,460
can autoload your classes using the

00:04:25,480 --> 00:04:29,620
symphony component class loader so you

00:04:27,460 --> 00:04:32,229
drive to worry about how to pull in your

00:04:29,620 --> 00:04:34,960
PS r0 compatible code are you root

00:04:32,229 --> 00:04:36,100
requests using the symphony bruder I can

00:04:34,960 --> 00:04:38,500
listen for events within your

00:04:36,100 --> 00:04:40,900
application so a new users being created

00:04:38,500 --> 00:04:42,490
you better content has been posted you

00:04:40,900 --> 00:04:44,169
can use the event dispatcher to listen

00:04:42,490 --> 00:04:46,690
for those events and react and do

00:04:44,169 --> 00:04:48,340
something with a party on all files so

00:04:46,690 --> 00:04:50,979
that we can easily use configuration

00:04:48,340 --> 00:04:53,200
within our code and also how we can deal

00:04:50,979 --> 00:04:55,750
with HTTP requests using the HTTP

00:04:53,200 --> 00:04:57,729
foundation component will also look at

00:04:55,750 --> 00:04:59,380
injecting dependencies instead of having

00:04:57,729 --> 00:05:01,300
dependencies gathered in some legacy

00:04:59,380 --> 00:05:03,580
code base we can make use of something

00:05:01,300 --> 00:05:05,110
like pimple to inject them and finally

00:05:03,580 --> 00:05:06,850
we'll look at some templating with twig

00:05:05,110 --> 00:05:08,919
as well so we can turn a legacy

00:05:06,850 --> 00:05:11,020
templating solution instantly nice and

00:05:08,919 --> 00:05:17,380
user-friendly developer friendly at

00:05:11,020 --> 00:05:19,360
least around eight months ago or so a

00:05:17,380 --> 00:05:21,610
project landed on my desk there was an

00:05:19,360 --> 00:05:23,250
existing web application with reasonable

00:05:21,610 --> 00:05:25,690
amount of user generated content

00:05:23,250 --> 00:05:27,310
reasonable amount of members reasonable

00:05:25,690 --> 00:05:29,200
amount of traffic you know nothing

00:05:27,310 --> 00:05:31,870
fantastic but still very good numbers

00:05:29,200 --> 00:05:33,700
and we had a problem it was very slow to

00:05:31,870 --> 00:05:35,680
develop on this there was an existing

00:05:33,700 --> 00:05:37,479
team in place and they were trying to

00:05:35,680 --> 00:05:39,130
add new features and because of how old

00:05:37,479 --> 00:05:41,020
the codebase was it was just passed from

00:05:39,130 --> 00:05:43,570
developer to develop it to developer

00:05:41,020 --> 00:05:45,160
nothing was consistent there's lots of

00:05:43,570 --> 00:05:47,020
very old techniques you could see when a

00:05:45,160 --> 00:05:49,060
new design pattern or technique could

00:05:47,020 --> 00:05:51,070
become popular what became the previous

00:05:49,060 --> 00:05:52,510
developers flavor of the month they saw

00:05:51,070 --> 00:05:54,039
it went wild with it and then I got

00:05:52,510 --> 00:05:56,380
forgotten about so there's no

00:05:54,039 --> 00:05:57,789
consistency no standards and everything

00:05:56,380 --> 00:05:59,440
seemed to be about how the code worked

00:05:57,789 --> 00:06:01,060
together and nothing was about how the

00:05:59,440 --> 00:06:04,360
code was doing what the business needed

00:06:01,060 --> 00:06:06,280
so we have us we had two choices really

00:06:04,360 --> 00:06:07,450
we could either scrap what we had and

00:06:06,280 --> 00:06:10,630
rebuild it using something like

00:06:07,450 --> 00:06:11,330
WordPress symphony framework joomla into

00:06:10,630 --> 00:06:13,569
the content

00:06:11,330 --> 00:06:16,069
system or Drupal or something like that

00:06:13,569 --> 00:06:17,840
the risks that we thought associated for

00:06:16,069 --> 00:06:19,759
that were obviously got all that

00:06:17,840 --> 00:06:21,259
business logic in our code that we

00:06:19,759 --> 00:06:24,409
couldn't guarantee we'd remember it all

00:06:21,259 --> 00:06:26,060
might not get all of it and no idea how

00:06:24,409 --> 00:06:27,199
that would be possible to to guarantee

00:06:26,060 --> 00:06:29,810
that every last bit of that would be

00:06:27,199 --> 00:06:31,129
kept so easy to say right well we'll use

00:06:29,810 --> 00:06:33,469
this module to the other authentication

00:06:31,129 --> 00:06:35,750
and it misses that crucial edge case or

00:06:33,469 --> 00:06:36,710
that use case that you need so we

00:06:35,750 --> 00:06:38,900
thought this quite a lot of risk

00:06:36,710 --> 00:06:40,849
associated with that as well you've also

00:06:38,900 --> 00:06:42,740
got all your existing content your users

00:06:40,849 --> 00:06:44,719
your members you've got to do some port

00:06:42,740 --> 00:06:46,310
database migration that becomes

00:06:44,719 --> 00:06:48,139
particularly hard when using something

00:06:46,310 --> 00:06:49,819
off the shelf because you don't know

00:06:48,139 --> 00:06:51,259
exactly what your resolving database is

00:06:49,819 --> 00:06:53,150
going to look like until you've decided

00:06:51,259 --> 00:06:55,610
on all the modules you've got to use and

00:06:53,150 --> 00:06:57,169
built any custom modules so we went down

00:06:55,610 --> 00:06:58,940
the option of let's refactor what's

00:06:57,169 --> 00:07:00,830
there the business logic that we've got

00:06:58,940 --> 00:07:02,599
in the application is good it's just

00:07:00,830 --> 00:07:05,150
hidden away we need to get rid of the

00:07:02,599 --> 00:07:06,469
application specific stuff get

00:07:05,150 --> 00:07:09,020
everything there that focuses on what

00:07:06,469 --> 00:07:11,750
the product does that's what we decided

00:07:09,020 --> 00:07:13,460
to do so we had a very messy structure

00:07:11,750 --> 00:07:15,800
there was some objects there's some

00:07:13,460 --> 00:07:18,590
procedural code monolithic codes it was

00:07:15,800 --> 00:07:20,330
just included in ran blindly it wasn't

00:07:18,590 --> 00:07:21,949
very nice so you needed to look at

00:07:20,330 --> 00:07:23,840
standardizing that using something like

00:07:21,949 --> 00:07:25,180
the PSR Oh standard so we're going to

00:07:23,840 --> 00:07:27,949
make use of the class loader for that

00:07:25,180 --> 00:07:30,050
Global's Singleton's crazy guard like

00:07:27,949 --> 00:07:31,940
objects all over the place so we needed

00:07:30,050 --> 00:07:34,430
to manage that that's why pimple comes

00:07:31,940 --> 00:07:36,979
in routing logic was all over the place

00:07:34,430 --> 00:07:39,110
come into an index file lots of if-else

00:07:36,979 --> 00:07:41,569
conditions delegate to another file with

00:07:39,110 --> 00:07:43,279
a failed conditions several files down

00:07:41,569 --> 00:07:44,990
the chain you've got your actual code is

00:07:43,279 --> 00:07:47,180
just what you want so we needed the

00:07:44,990 --> 00:07:49,159
ruler to fix that with a lot of

00:07:47,180 --> 00:07:51,110
duplicated logic all over the place so

00:07:49,159 --> 00:07:52,969
if a user create an account that get an

00:07:51,110 --> 00:07:55,190
email with the user credits of content

00:07:52,969 --> 00:07:57,889
that get an email for that email code

00:07:55,190 --> 00:07:59,539
was just a function call somewhere else

00:07:57,889 --> 00:08:01,520
so if we wanted to add it to something

00:07:59,539 --> 00:08:03,169
you'd have to go find new bit where you

00:08:01,520 --> 00:08:04,940
want to send an email and put that

00:08:03,169 --> 00:08:06,560
function call in if you needed to remove

00:08:04,940 --> 00:08:09,469
it you have to go and find bits of code

00:08:06,560 --> 00:08:11,330
remove it not very extendable but not

00:08:09,469 --> 00:08:12,680
terrible at the same time event

00:08:11,330 --> 00:08:13,580
dispatcher let's just listen for those

00:08:12,680 --> 00:08:20,150
event

00:08:13,580 --> 00:08:21,889
separately we also had a lot of PHP and

00:08:20,150 --> 00:08:23,509
HTML mixed together he look at a

00:08:21,889 --> 00:08:26,840
template file and it was just horrendous

00:08:23,509 --> 00:08:28,939
the designer on the project it was very

00:08:26,840 --> 00:08:31,189
difficult to actually do any design work

00:08:28,939 --> 00:08:32,899
that wasn't just CSS or images because

00:08:31,189 --> 00:08:35,209
the HTML files were so interlaced with

00:08:32,899 --> 00:08:37,909
PHP and business logic it just didn't

00:08:35,209 --> 00:08:40,550
make any sense we also a lot of

00:08:37,909 --> 00:08:42,860
spaghetti formed logic so when it form

00:08:40,550 --> 00:08:45,079
was submitted validation was very messy

00:08:42,860 --> 00:08:46,550
very sporadic and very duplicated so we

00:08:45,079 --> 00:08:48,380
looked at some validation libraries

00:08:46,550 --> 00:08:50,510
though some of the improvements we

00:08:48,380 --> 00:08:53,829
introduced such as mailer component

00:08:50,510 --> 00:08:57,170
Swift mela at translation and validation

00:08:53,829 --> 00:08:59,120
so how do we solve messy and procedural

00:08:57,170 --> 00:09:02,480
code using the lights of a class loader

00:08:59,120 --> 00:09:05,180
well to refactor the code to a more

00:09:02,480 --> 00:09:07,490
suitable standard such as PSR oh we

00:09:05,180 --> 00:09:09,170
needed to have a solid foundation in

00:09:07,490 --> 00:09:11,779
place that we could then make use of

00:09:09,170 --> 00:09:13,579
that component with so we have to lay

00:09:11,779 --> 00:09:16,310
the foundations first stage was our

00:09:13,579 --> 00:09:17,810
controllers the only controllers we had

00:09:16,310 --> 00:09:19,339
which were objects who want to dealt

00:09:17,810 --> 00:09:21,500
with form submissions everything else

00:09:19,339 --> 00:09:23,690
was just a PHP file was included and ran

00:09:21,500 --> 00:09:25,430
blindly didn't make very much sense and

00:09:23,690 --> 00:09:27,589
it was very difficult for us to to work

00:09:25,430 --> 00:09:29,540
with so we changed everything so that

00:09:27,589 --> 00:09:31,850
was object-based made it much more more

00:09:29,540 --> 00:09:33,980
suitable we restructured it using the PS

00:09:31,850 --> 00:09:35,540
ro standard so we introduced namespaces

00:09:33,980 --> 00:09:37,850
restructure debt to a better in

00:09:35,540 --> 00:09:39,500
directory hierarchy using component

00:09:37,850 --> 00:09:40,640
based approach for our own code as well

00:09:39,500 --> 00:09:42,920
as the components that we're going to

00:09:40,640 --> 00:09:44,839
built-in now that we've got that we then

00:09:42,920 --> 00:09:47,089
don't want extra code and files lying

00:09:44,839 --> 00:09:48,949
around that tie us up with how do we

00:09:47,089 --> 00:09:51,050
order load that code we want something

00:09:48,949 --> 00:09:53,660
to take care of that and that's where

00:09:51,050 --> 00:09:56,029
the class loader comes in although we

00:09:53,660 --> 00:09:59,180
need to do is define our own name spaces

00:09:56,029 --> 00:10:01,610
so that they are not array create a new

00:09:59,180 --> 00:10:03,440
universal class loader object register

00:10:01,610 --> 00:10:05,690
that class loader and then tell it to

00:10:03,440 --> 00:10:07,760
register all of our namespaces and with

00:10:05,690 --> 00:10:10,490
those three lines of code plus our array

00:10:07,760 --> 00:10:12,920
of namespaces we've set up our new code

00:10:10,490 --> 00:10:15,260
base with PS ro autoloading all taken

00:10:12,920 --> 00:10:16,579
care of so now we can just ink make use

00:10:15,260 --> 00:10:17,000
of our class and it's automatically

00:10:16,579 --> 00:10:21,800
include

00:10:17,000 --> 00:10:23,450
which was exactly what we needed it has

00:10:21,800 --> 00:10:27,170
some built-in caching support available

00:10:23,450 --> 00:10:28,730
through a PC there's a it's built into

00:10:27,170 --> 00:10:30,530
the the code that's available you just

00:10:28,730 --> 00:10:34,520
need to include the relevant loader and

00:10:30,530 --> 00:10:37,070
added to the to the code so with all of

00:10:34,520 --> 00:10:38,570
the global Singleton's and crazy objects

00:10:37,070 --> 00:10:40,790
everywhere we needed a way of being able

00:10:38,570 --> 00:10:42,320
to make that much more manageable needed

00:10:40,790 --> 00:10:44,390
to know what code depended on which

00:10:42,320 --> 00:10:46,580
other bits we needed a more flexible way

00:10:44,390 --> 00:10:48,200
of introducing new dependencies so if

00:10:46,580 --> 00:10:49,730
all of a sudden particular controller

00:10:48,200 --> 00:10:51,560
needs access to the authentication

00:10:49,730 --> 00:10:56,990
object we needed way of being able to

00:10:51,560 --> 00:10:58,490
manage that what we currently had was

00:10:56,990 --> 00:11:00,500
something that wasn't easy to test

00:10:58,490 --> 00:11:02,150
wasn't easy to maintain and it wasn't

00:11:00,500 --> 00:11:05,060
easy to understand it made very little

00:11:02,150 --> 00:11:07,100
sense that's where pimple really comes

00:11:05,060 --> 00:11:08,780
into play to dependency injection

00:11:07,100 --> 00:11:11,750
container which let's just put all of

00:11:08,780 --> 00:11:13,850
our dependencies into it and we pass

00:11:11,750 --> 00:11:15,890
that container around to the application

00:11:13,850 --> 00:11:17,900
so when the application says I need to

00:11:15,890 --> 00:11:19,520
access your database all it's got to do

00:11:17,900 --> 00:11:21,110
is look at the container and say can you

00:11:19,520 --> 00:11:24,970
give me the database and it's up to that

00:11:21,110 --> 00:11:24,970
container to manage that dependency

00:11:28,480 --> 00:11:32,050
of course to support a dependency

00:11:30,339 --> 00:11:34,149
injection lieutenant you call it has to

00:11:32,050 --> 00:11:36,579
be aware of it and it needs to know that

00:11:34,149 --> 00:11:39,370
it exists the first stage was to take

00:11:36,579 --> 00:11:41,889
existing code such as this example model

00:11:39,370 --> 00:11:44,709
which had a constructor and then query

00:11:41,889 --> 00:11:46,480
the database directly we change that so

00:11:44,709 --> 00:11:49,029
that instead there was a container

00:11:46,480 --> 00:11:50,350
passed as the constructor now at this

00:11:49,029 --> 00:11:51,850
stage we've just got a container in

00:11:50,350 --> 00:11:53,350
there which doesn't have anything in

00:11:51,850 --> 00:11:55,839
there's no database there yet so we

00:11:53,350 --> 00:11:57,790
can't go ahead and remove this

00:11:55,839 --> 00:11:59,829
dependency of a database that's calling

00:11:57,790 --> 00:12:01,930
hard coded but we've at least made the

00:11:59,829 --> 00:12:04,060
first step with went and said right this

00:12:01,930 --> 00:12:05,620
model should expect a container and so

00:12:04,060 --> 00:12:07,389
we can change it so that it gets the

00:12:05,620 --> 00:12:10,899
database and other dependencies from

00:12:07,389 --> 00:12:13,360
that container one of the really cool

00:12:10,899 --> 00:12:15,670
things about pimple is that it supports

00:12:13,360 --> 00:12:18,100
lazy loading by default the way they use

00:12:15,670 --> 00:12:19,360
it everything will be loaded lazily so

00:12:18,100 --> 00:12:22,120
if you want to create a database

00:12:19,360 --> 00:12:23,529
connection ninety percent of your pages

00:12:22,120 --> 00:12:26,290
might not even need to hit the database

00:12:23,529 --> 00:12:28,600
but if you've got a new database object

00:12:26,290 --> 00:12:29,980
somewhere how do you then just say if

00:12:28,600 --> 00:12:31,420
it's this page I don't want my

00:12:29,980 --> 00:12:34,660
connection to be created if it's this

00:12:31,420 --> 00:12:38,050
page I do with pimple you simply put the

00:12:34,660 --> 00:12:40,510
new object instantiation into a closure

00:12:38,050 --> 00:12:42,250
then first time you asked for that

00:12:40,510 --> 00:12:44,380
object so the first time a bit of code

00:12:42,250 --> 00:12:46,690
tries to access this property from the

00:12:44,380 --> 00:12:49,120
container it'll run the code and create

00:12:46,690 --> 00:12:50,649
the database object so only when you

00:12:49,120 --> 00:12:52,480
first asked for it does something get

00:12:50,649 --> 00:12:55,180
run which is really nice and performance

00:12:52,480 --> 00:12:56,949
friendly that's you can see it's

00:12:55,180 --> 00:12:59,170
accessed using the rear access

00:12:56,949 --> 00:13:00,760
implementation so although pimples an

00:12:59,170 --> 00:13:02,980
object you can treat it just like it's

00:13:00,760 --> 00:13:05,610
an array put properties in you get them

00:13:02,980 --> 00:13:05,610
in a similar way

00:13:06,850 --> 00:13:10,959
unfortunately though by default it will

00:13:09,519 --> 00:13:12,730
return a new instance of that object

00:13:10,959 --> 00:13:15,250
every time we ask for that dependency

00:13:12,730 --> 00:13:17,170
which isn't what we want to be so you

00:13:15,250 --> 00:13:19,329
can share it the container has a method

00:13:17,170 --> 00:13:21,880
called share and if you put that closure

00:13:19,329 --> 00:13:22,899
in a function call to share it'll say

00:13:21,880 --> 00:13:25,240
the first time you asked for the

00:13:22,899 --> 00:13:27,490
database create it any other time you

00:13:25,240 --> 00:13:29,589
asked for it just remember what was

00:13:27,490 --> 00:13:31,000
created previously and return it so

00:13:29,589 --> 00:13:35,980
you're only having to create at the once

00:13:31,000 --> 00:13:38,199
during an execution cycle you can see

00:13:35,980 --> 00:13:40,300
here the closure accepts an argument

00:13:38,199 --> 00:13:42,009
this argument is managed by pimple

00:13:40,300 --> 00:13:43,899
directly so you've just give it a name

00:13:42,009 --> 00:13:46,360
that you want it to be and pimple will

00:13:43,899 --> 00:13:47,920
pass a copy of itself into that variable

00:13:46,360 --> 00:13:50,410
so that you can use it within your code

00:13:47,920 --> 00:13:51,880
so here we can get access to the user of

00:13:50,410 --> 00:13:54,250
the Dead base the passwords and other

00:13:51,880 --> 00:13:55,690
information from the container so if

00:13:54,250 --> 00:13:57,459
that changes all we've got to do is

00:13:55,690 --> 00:14:01,569
change what we've already injected into

00:13:57,459 --> 00:14:03,339
our container so some further

00:14:01,569 --> 00:14:05,019
refactoring now that we've got our

00:14:03,339 --> 00:14:08,350
container which actually has a database

00:14:05,019 --> 00:14:10,180
in we can then simply say query get the

00:14:08,350 --> 00:14:12,189
database from the container and run the

00:14:10,180 --> 00:14:14,769
query which it's much nicer much easier

00:14:12,189 --> 00:14:16,779
to manage and it's testable because we

00:14:14,769 --> 00:14:18,819
can change what we're injecting into

00:14:16,779 --> 00:14:21,810
that we can mark a database object and

00:14:18,819 --> 00:14:21,810
pasta quite nicely

00:14:23,250 --> 00:14:27,090
we then got to the stage where we needed

00:14:25,110 --> 00:14:28,860
to be able to reuse that container for

00:14:27,090 --> 00:14:31,260
other projects as well and we also have

00:14:28,860 --> 00:14:33,120
different use cases where if you were

00:14:31,260 --> 00:14:35,880
calling scripts by the command line you

00:14:33,120 --> 00:14:38,730
didn't necessarily need the routing or

00:14:35,880 --> 00:14:41,220
the form components to be made available

00:14:38,730 --> 00:14:43,260
to the dependency injection container

00:14:41,220 --> 00:14:44,670
similarly when you're accessing a by the

00:14:43,260 --> 00:14:46,590
web there's certain things that you need

00:14:44,670 --> 00:14:49,530
and some things that you don't need so

00:14:46,590 --> 00:14:51,870
you can easily extend pimple simply

00:14:49,530 --> 00:14:54,030
implement constructor as a default

00:14:51,870 --> 00:14:55,560
parameter values anything that you pass

00:14:54,030 --> 00:14:58,950
to that will automatically be populated

00:14:55,560 --> 00:15:02,130
in itself is properties with values as

00:14:58,950 --> 00:15:03,960
the value of the array and then in the

00:15:02,130 --> 00:15:05,160
constructor you just put any loathing

00:15:03,960 --> 00:15:07,260
that you want to do so that you would

00:15:05,160 --> 00:15:09,300
say create a new property this database

00:15:07,260 --> 00:15:11,310
and you put your PDL closure with in

00:15:09,300 --> 00:15:12,600
there that way you've got a nice

00:15:11,310 --> 00:15:15,180
container that's got all of your

00:15:12,600 --> 00:15:16,890
standard so strapping in place if you've

00:15:15,180 --> 00:15:18,330
got something then that you need to up

00:15:16,890 --> 00:15:20,730
when you need to access the command line

00:15:18,330 --> 00:15:23,010
get up a command line container that has

00:15:20,730 --> 00:15:24,750
a command line specific dependencies one

00:15:23,010 --> 00:15:26,400
for your web access my kind of things

00:15:24,750 --> 00:15:29,420
you can have a nice container with

00:15:26,400 --> 00:15:29,420
relevant dependencies in

00:15:30,990 --> 00:15:36,570
another thing that we wanted to try and

00:15:33,180 --> 00:15:39,060
reduce was new method in new object

00:15:36,570 --> 00:15:40,980
instantiation within code all over the

00:15:39,060 --> 00:15:42,899
place it meant if we wanted to change

00:15:40,980 --> 00:15:44,700
what that object was we'd have to go

00:15:42,899 --> 00:15:46,160
into lots of files and change it if we

00:15:44,700 --> 00:15:48,270
add a new parameters to the constructor

00:15:46,160 --> 00:15:50,190
we'd have to go into a lot of place and

00:15:48,270 --> 00:15:53,070
chains up as well so wanted to try and

00:15:50,190 --> 00:15:55,230
reduce that so we've got a controller

00:15:53,070 --> 00:15:57,149
here which can access the container and

00:15:55,230 --> 00:15:59,190
it's creating a model that's the kind of

00:15:57,149 --> 00:16:01,800
thing that we wanted to try and reduces

00:15:59,190 --> 00:16:03,390
another dependency we were able to do

00:16:01,800 --> 00:16:05,390
that using the container as well by

00:16:03,390 --> 00:16:08,279
creating containers that installed

00:16:05,390 --> 00:16:10,500
database access objects containers that

00:16:08,279 --> 00:16:12,720
stored factories and containers install

00:16:10,500 --> 00:16:15,839
other things so in this example I've got

00:16:12,720 --> 00:16:17,640
a database access object container and I

00:16:15,839 --> 00:16:20,820
put all my database access objects here

00:16:17,640 --> 00:16:22,980
so if my user model wants to connect to

00:16:20,820 --> 00:16:25,140
the database it will talk to the

00:16:22,980 --> 00:16:27,180
container ask it for the dead raxxess

00:16:25,140 --> 00:16:29,910
object container and then ask it for

00:16:27,180 --> 00:16:31,709
that particular object because we've got

00:16:29,910 --> 00:16:33,959
14 factories as well the next time we

00:16:31,709 --> 00:16:36,930
want to get the user model we can get a

00:16:33,959 --> 00:16:39,089
factory from the container and they get

00:16:36,930 --> 00:16:41,160
the user object from there so here's an

00:16:39,089 --> 00:16:43,410
example so I've got a model that I want

00:16:41,160 --> 00:16:45,930
to create from the container I've got my

00:16:43,410 --> 00:16:47,850
factory's container from that I ask it

00:16:45,930 --> 00:16:49,770
for the model and then i create a new

00:16:47,850 --> 00:16:51,630
model from there so it allows us to

00:16:49,770 --> 00:16:53,820
reduce dependency on the new keyword as

00:16:51,630 --> 00:16:55,339
well and centralize where that's used so

00:16:53,820 --> 00:16:57,480
when objects change and they're

00:16:55,339 --> 00:16:58,740
constructed arguments change we've got a

00:16:57,480 --> 00:17:02,450
couple of places where we can go and

00:16:58,740 --> 00:17:05,490
change that it's much easier to manage

00:17:02,450 --> 00:17:06,600
of course any parameters we pass there

00:17:05,490 --> 00:17:08,189
we'd probably be passing to the

00:17:06,600 --> 00:17:10,620
constructor but what this does mean is

00:17:08,189 --> 00:17:13,260
could just create a new method in that

00:17:10,620 --> 00:17:14,640
factory that has a different different

00:17:13,260 --> 00:17:16,530
arrangement of parameters or arguments

00:17:14,640 --> 00:17:18,179
so that works for all the code as well

00:17:16,530 --> 00:17:20,480
as another method the words for your

00:17:18,179 --> 00:17:20,480
code

00:17:22,000 --> 00:17:26,689
we also found that we had a lot of hard

00:17:24,740 --> 00:17:28,399
coded configuration about the place that

00:17:26,689 --> 00:17:30,799
we needed to try and centralize and well

00:17:28,399 --> 00:17:32,240
under way of easily managing that thanks

00:17:30,799 --> 00:17:33,590
for you to pimple we can put all our

00:17:32,240 --> 00:17:35,480
something's in there but we still need

00:17:33,590 --> 00:17:37,159
it the way that we could have a settings

00:17:35,480 --> 00:17:39,470
file that was easy to read easy to alter

00:17:37,159 --> 00:17:41,779
and easy to manage others ways such as

00:17:39,470 --> 00:17:43,760
just an any file you could have an XML

00:17:41,779 --> 00:17:48,340
file one of the things that these simply

00:17:43,760 --> 00:17:48,340
components allow is yamel file parsing

00:17:48,970 --> 00:17:54,320
yamel is a very nice easy to read

00:17:51,740 --> 00:17:55,909
structure you can look at it and you can

00:17:54,320 --> 00:17:57,620
see exactly what's in there you don't

00:17:55,909 --> 00:18:00,500
have it's not a PHP file with an array

00:17:57,620 --> 00:18:02,659
and it's not a XML with lots of markup

00:18:00,500 --> 00:18:03,919
that you don't need anybody working on

00:18:02,659 --> 00:18:05,870
your project should be able to read that

00:18:03,919 --> 00:18:08,330
file and go right there's a group called

00:18:05,870 --> 00:18:09,590
database and their various properties so

00:18:08,330 --> 00:18:11,720
we've got a host called localhost

00:18:09,590 --> 00:18:13,010
there's another group of settings it's

00:18:11,720 --> 00:18:16,340
very easy to read and very easy to

00:18:13,010 --> 00:18:19,130
maintain if you want to parse one of

00:18:16,340 --> 00:18:21,649
those files simply load the ammo passer

00:18:19,130 --> 00:18:23,450
and then tell it to pull in that file

00:18:21,649 --> 00:18:26,840
and pause it and then you've got an

00:18:23,450 --> 00:18:28,700
array associative array containing all

00:18:26,840 --> 00:18:30,769
of that information really easy to

00:18:28,700 --> 00:18:32,750
access put that in your container and

00:18:30,769 --> 00:18:36,139
you've got access to that wherever you

00:18:32,750 --> 00:18:37,460
need them unfortunately though it

00:18:36,139 --> 00:18:39,350
doesn't support any sort of native

00:18:37,460 --> 00:18:42,769
caching and one thing I've found is that

00:18:39,350 --> 00:18:43,760
Yama file parsing is quite intensive so

00:18:42,769 --> 00:18:46,490
you probably want to have a look at

00:18:43,760 --> 00:18:48,139
implementing your own form of of caching

00:18:46,490 --> 00:18:50,539
for that the approach that we've opted

00:18:48,139 --> 00:18:53,299
for is we open up the file create an md5

00:18:50,539 --> 00:18:54,679
signature of the file content and then

00:18:53,299 --> 00:18:57,019
look in memcache to see we've already

00:18:54,679 --> 00:18:59,029
got a copy of it if we do then we build

00:18:57,019 --> 00:19:01,630
our away from that if we don't we pause

00:18:59,029 --> 00:19:01,630
the ml file

00:19:04,410 --> 00:19:08,160
so next we've got all of our routing so

00:19:06,720 --> 00:19:09,750
we've got files all over the place that

00:19:08,160 --> 00:19:11,820
deal with routing requests come in two

00:19:09,750 --> 00:19:13,950
different files different files delegate

00:19:11,820 --> 00:19:15,990
to other files which delegate again who

00:19:13,950 --> 00:19:17,220
need it to centralize that which is

00:19:15,990 --> 00:19:20,940
where the symphony written component

00:19:17,220 --> 00:19:22,680
comes in thankfully most of the work

00:19:20,940 --> 00:19:25,680
that we did in terms of making the code

00:19:22,680 --> 00:19:27,810
PSRs compliant took care of a lot of the

00:19:25,680 --> 00:19:29,940
stuff that we needed to the Foundation's

00:19:27,810 --> 00:19:34,410
we needed to lay to implement this

00:19:29,940 --> 00:19:37,620
component one example is with our

00:19:34,410 --> 00:19:40,830
controllers constructors accept a

00:19:37,620 --> 00:19:42,870
container the old actions would have a

00:19:40,830 --> 00:19:45,150
number of parameters our new actions

00:19:42,870 --> 00:19:46,590
simply had one parameter which was an

00:19:45,150 --> 00:19:48,990
array of parameters that were available

00:19:46,590 --> 00:19:50,640
to the URL this is just because of the

00:19:48,990 --> 00:19:52,380
way that the routing component works you

00:19:50,640 --> 00:19:54,810
get an array that contains all of your

00:19:52,380 --> 00:19:57,360
the bits of the URL so if you're asking

00:19:54,810 --> 00:19:58,950
for an ID at the end of your URL it will

00:19:57,360 --> 00:20:01,980
be put into an array and you can then

00:19:58,950 --> 00:20:03,150
pass in your control racket that's the

00:20:01,980 --> 00:20:04,920
only thing which i think is a downside

00:20:03,150 --> 00:20:08,700
to the component is there's no easy way

00:20:04,920 --> 00:20:10,200
to map specific URL parts just specific

00:20:08,700 --> 00:20:14,820
parameters without doing it manually

00:20:10,200 --> 00:20:16,110
which you don't really want to do so to

00:20:14,820 --> 00:20:17,760
get up and running with the component

00:20:16,110 --> 00:20:19,470
the first thing you have to do is early

00:20:17,760 --> 00:20:21,810
as some of the namespaces just so it's

00:20:19,470 --> 00:20:24,690
easier to to reuse them later so we've

00:20:21,810 --> 00:20:27,660
got the file locator request context and

00:20:24,690 --> 00:20:29,610
the routing aspects file locator tells

00:20:27,660 --> 00:20:32,610
the component where it can get the the

00:20:29,610 --> 00:20:34,740
file from the request context tells it

00:20:32,610 --> 00:20:37,050
the URL and also whether you're posting

00:20:34,740 --> 00:20:39,240
getting deleting or putting to that URL

00:20:37,050 --> 00:20:41,580
and then the routing component itself

00:20:39,240 --> 00:20:44,070
with the router and routes and that kind

00:20:41,580 --> 00:20:46,740
of thing within it they then have to

00:20:44,070 --> 00:20:49,320
prepare the dependencies to create a new

00:20:46,740 --> 00:20:50,880
file locator that says the routing file

00:20:49,320 --> 00:20:54,710
is somewhere in this folder and i'll

00:20:50,880 --> 00:20:56,750
tell you it later on we create a request

00:20:54,710 --> 00:20:58,789
which is basically the URL of the user

00:20:56,750 --> 00:21:00,950
is requesting and from that we create a

00:20:58,789 --> 00:21:02,899
request context it also contains a

00:21:00,950 --> 00:21:06,350
request method so with that we can then

00:21:02,899 --> 00:21:09,590
do our routine so we construct a Rooter

00:21:06,350 --> 00:21:11,570
you pass it or a file loader with

00:21:09,590 --> 00:21:13,909
allocate a new file loader with our

00:21:11,570 --> 00:21:15,919
locator in so i knows where the file

00:21:13,909 --> 00:21:18,140
will be and it knows that it will be

00:21:15,919 --> 00:21:19,960
llamo file can use your own different

00:21:18,140 --> 00:21:21,919
loaders as well as a few others built in

00:21:19,960 --> 00:21:23,750
we're telling it that we've got a root

00:21:21,919 --> 00:21:25,730
start yml file we're going to you so

00:21:23,750 --> 00:21:27,320
that's our llamo file any optional

00:21:25,730 --> 00:21:30,980
configurations and their meds our

00:21:27,320 --> 00:21:33,890
application context so sampler routes

00:21:30,980 --> 00:21:34,970
file a route will have a main pattern in

00:21:33,890 --> 00:21:37,250
this case we're just looking at the

00:21:34,970 --> 00:21:39,200
homepage of our application some

00:21:37,250 --> 00:21:41,960
defaults which is an array of things

00:21:39,200 --> 00:21:44,690
that you can provide they're typically

00:21:41,960 --> 00:21:46,370
used for two things one is how we do the

00:21:44,690 --> 00:21:48,380
routing so I want to say that anything

00:21:46,370 --> 00:21:50,149
that matches this pattern I want to make

00:21:48,380 --> 00:21:52,760
use of this controller we call this

00:21:50,149 --> 00:21:55,700
method at the other case is if you've

00:21:52,760 --> 00:21:57,620
got a URL with user definable aspects

00:21:55,700 --> 00:22:00,890
which is an ID or a date so if you view

00:21:57,620 --> 00:22:03,679
a news article it might be news /a date

00:22:00,890 --> 00:22:05,149
/ some sort of slope you could put some

00:22:03,679 --> 00:22:07,220
defaults in there that mean if they use

00:22:05,149 --> 00:22:09,620
a room it's one of those fall back to

00:22:07,220 --> 00:22:11,390
one of those defaults any requirements

00:22:09,620 --> 00:22:13,279
that you've got on those parameters so

00:22:11,390 --> 00:22:15,970
if there's a date you can say the date

00:22:13,279 --> 00:22:19,010
format must be our year month day and

00:22:15,970 --> 00:22:20,779
that it's got to be a get request so

00:22:19,010 --> 00:22:22,250
that's how routes file looks it's

00:22:20,779 --> 00:22:26,179
written in the annals particular one so

00:22:22,250 --> 00:22:27,770
it's quite easy to use and maintain and

00:22:26,179 --> 00:22:29,779
to actually do the the routing itself

00:22:27,770 --> 00:22:32,750
you'll get the URL that the users

00:22:29,779 --> 00:22:34,429
accessing found that it's a little bit

00:22:32,750 --> 00:22:38,120
unreliable with trailing slashes at the

00:22:34,429 --> 00:22:40,520
end so just get rid of that we match URL

00:22:38,120 --> 00:22:43,970
and if it's successful that route will

00:22:40,520 --> 00:22:46,700
be an array containing the name of the

00:22:43,970 --> 00:22:48,529
route index and all these properties

00:22:46,700 --> 00:22:52,330
from our defaults so it will have three

00:22:48,529 --> 00:22:54,500
properties name class and method

00:22:52,330 --> 00:22:57,170
and then Warner says create a new

00:22:54,500 --> 00:23:00,170
controller from that class name and call

00:22:57,170 --> 00:23:01,820
the method that was provided there now

00:23:00,170 --> 00:23:03,920
if it can't find the route that you've

00:23:01,820 --> 00:23:05,840
provided it'll throw a resource not

00:23:03,920 --> 00:23:08,780
found exception so you can take it to a

00:23:05,840 --> 00:23:09,880
404 page if you try and post to a page

00:23:08,780 --> 00:23:12,830
where you've said you can only get it

00:23:09,880 --> 00:23:14,600
send i think it's a method not allowed

00:23:12,830 --> 00:23:16,070
exception so it's quite helpful in terms

00:23:14,600 --> 00:23:20,660
of different exceptions for different

00:23:16,070 --> 00:23:22,970
edge cases so if you want to deal with

00:23:20,660 --> 00:23:25,400
variables and you rooting so for example

00:23:22,970 --> 00:23:28,160
we've got a news page news with a

00:23:25,400 --> 00:23:30,110
category than a date men an article can

00:23:28,160 --> 00:23:32,570
say that requirement is that that date

00:23:30,110 --> 00:23:34,460
variable must match that format and this

00:23:32,570 --> 00:23:36,980
is a post forum so this is somebody

00:23:34,460 --> 00:23:39,890
adding a comment to an article then when

00:23:36,980 --> 00:23:41,360
it comes to our algorithm what we want

00:23:39,890 --> 00:23:44,420
to do is when they take the array which

00:23:41,360 --> 00:23:47,870
contains the name and base default and

00:23:44,420 --> 00:23:49,520
we want to remove the name class method

00:23:47,870 --> 00:23:51,470
from it so that we can pass an array of

00:23:49,520 --> 00:23:52,790
it just contains category date and

00:23:51,470 --> 00:23:55,270
article we're not passing any other

00:23:52,790 --> 00:23:58,070
routing rubbish through our controllers

00:23:55,270 --> 00:24:01,640
can also put authentication control in

00:23:58,070 --> 00:24:03,530
there there is a security component

00:24:01,640 --> 00:24:04,880
available from symphony as well but that

00:24:03,530 --> 00:24:07,430
was a little bit overkill for what we

00:24:04,880 --> 00:24:09,500
needed so what we went well we did is we

00:24:07,430 --> 00:24:11,570
went into our roots and said that's at a

00:24:09,500 --> 00:24:13,400
logged in property so if a page requires

00:24:11,570 --> 00:24:15,380
a user to be authenticated you don't

00:24:13,400 --> 00:24:17,360
have any hierarchy of different users

00:24:15,380 --> 00:24:19,640
you either logged in on you're not we

00:24:17,360 --> 00:24:21,500
say this page requires a login and then

00:24:19,640 --> 00:24:23,690
within the routing you just check to see

00:24:21,500 --> 00:24:27,200
if that's been set if it is user needs

00:24:23,690 --> 00:24:28,720
to be logged in if the arisen Ogden so

00:24:27,200 --> 00:24:31,160
we're looking out container for the user

00:24:28,720 --> 00:24:32,990
users not logged in with just allowed to

00:24:31,160 --> 00:24:35,350
be no then we'll send them to a login

00:24:32,990 --> 00:24:35,350
page

00:24:37,860 --> 00:24:43,230
you can also cash your roots file simply

00:24:40,910 --> 00:24:44,730
add this extra option to your

00:24:43,230 --> 00:24:46,500
configuration so you say here's a cache

00:24:44,730 --> 00:24:48,990
directory and there's the cache folder I

00:24:46,500 --> 00:24:50,820
want to use word of warning about this

00:24:48,990 --> 00:24:52,590
if you start adding new pages on you

00:24:50,820 --> 00:24:53,940
routes to your application make sure

00:24:52,590 --> 00:24:55,470
you're clearing the cache when you in

00:24:53,940 --> 00:24:57,270
development mode or when you deploy new

00:24:55,470 --> 00:24:58,620
code to the server the number of times

00:24:57,270 --> 00:24:59,850
we've been wondering why page to some

00:24:58,620 --> 00:25:03,920
work and it turns out that would be

00:24:59,850 --> 00:25:06,960
catching the old one it's lost count now

00:25:03,920 --> 00:25:09,000
one other drawback with the Rueter is if

00:25:06,960 --> 00:25:12,000
you put some of the junk on your URL

00:25:09,000 --> 00:25:14,059
such as any UTM tracking data or UTM

00:25:12,000 --> 00:25:16,049
source UTM campaign that kind of thing

00:25:14,059 --> 00:25:17,610
it's going to look for that in the

00:25:16,049 --> 00:25:19,169
routes file and if you can't find it

00:25:17,610 --> 00:25:20,340
it's going to say well I don't know what

00:25:19,169 --> 00:25:22,049
this pages have been a while you're

00:25:20,340 --> 00:25:24,480
asking for a page with all this crap on

00:25:22,049 --> 00:25:26,790
the end of the URL so a little quick

00:25:24,480 --> 00:25:28,080
regular expression will take that out as

00:25:26,790 --> 00:25:29,429
the source for where we've got that from

00:25:28,080 --> 00:25:31,799
and then you can go back to your

00:25:29,429 --> 00:25:33,780
standard routing it's something where

00:25:31,799 --> 00:25:36,179
what we've taken the approach to do is

00:25:33,780 --> 00:25:38,220
if a route hasn't been found we then

00:25:36,179 --> 00:25:40,200
strip all get parameters from the URL

00:25:38,220 --> 00:25:41,790
and try another request just in case

00:25:40,200 --> 00:25:44,040
some of these linking to it from an

00:25:41,790 --> 00:25:45,990
external site that depends any and get

00:25:44,040 --> 00:25:48,169
parameters on the unreal oven to what we

00:25:45,990 --> 00:25:48,169
do

00:25:49,630 --> 00:25:54,350
so as I mentioned before the code was

00:25:52,340 --> 00:25:56,900
riddled with duplicated logic all over

00:25:54,350 --> 00:25:58,550
the place there was method calls deeply

00:25:56,900 --> 00:26:00,800
buried that would do things like sending

00:25:58,550 --> 00:26:02,780
emails and it wasn't nice if we wanted

00:26:00,800 --> 00:26:04,220
to add a an email generation somewhere

00:26:02,780 --> 00:26:06,350
else you'd have to go deep into the code

00:26:04,220 --> 00:26:08,390
find where you wanted to add it not that

00:26:06,350 --> 00:26:10,400
in you needed to remove it again you

00:26:08,390 --> 00:26:12,440
have to find where it was remove it or

00:26:10,400 --> 00:26:14,900
idler of the methods there it wasn't a

00:26:12,440 --> 00:26:16,820
pleasant task thankfully with the likes

00:26:14,900 --> 00:26:18,440
of the event dispatcher instead what you

00:26:16,820 --> 00:26:20,840
can do is your code does some things

00:26:18,440 --> 00:26:23,030
such as it user is created you just fire

00:26:20,840 --> 00:26:25,190
an event and say a user is being created

00:26:23,030 --> 00:26:27,470
and push that on to a dispatcher that

00:26:25,190 --> 00:26:29,570
will then notify anybody that wants to

00:26:27,470 --> 00:26:31,640
know if it use it being created so you

00:26:29,570 --> 00:26:33,350
can have a listener that says I'm an

00:26:31,640 --> 00:26:35,570
email listener i'm going to send emails

00:26:33,350 --> 00:26:37,220
out to various people i want to listen

00:26:35,570 --> 00:26:39,170
to see if your users being created i

00:26:37,220 --> 00:26:41,059
want to listen to see if contents being

00:26:39,170 --> 00:26:43,040
created and i want to listen for all

00:26:41,059 --> 00:26:45,110
these other edge cases as well jun

00:26:43,040 --> 00:26:48,920
create those listeners and find them to

00:26:45,110 --> 00:26:50,510
the various events main reason for why

00:26:48,920 --> 00:26:52,490
you'd want to do this is you know your

00:26:50,510 --> 00:26:54,410
code should do one thing and it should

00:26:52,490 --> 00:26:56,420
do one thing well it shouldn't do 100

00:26:54,410 --> 00:26:57,650
things so when you use it being created

00:26:56,420 --> 00:26:59,059
that's what your code should do it

00:26:57,650 --> 00:27:01,400
should be creating user should be

00:26:59,059 --> 00:27:03,530
creating your user then emailing and

00:27:01,400 --> 00:27:05,420
doing something else and then resizing

00:27:03,530 --> 00:27:07,160
an avatar and doing this that year but

00:27:05,420 --> 00:27:09,679
it should do one thing create the user

00:27:07,160 --> 00:27:11,270
you can create that user via the event

00:27:09,679 --> 00:27:13,820
and the listener can do the one thing

00:27:11,270 --> 00:27:17,030
that it does well send the email resize

00:27:13,820 --> 00:27:18,730
that avatar I kind of thing so some

00:27:17,030 --> 00:27:21,080
sample use cases that we use this for

00:27:18,730 --> 00:27:24,050
redirecting the user and displaying a

00:27:21,080 --> 00:27:26,030
flash notification so if users logged

00:27:24,050 --> 00:27:27,980
out or they've requested a password

00:27:26,030 --> 00:27:30,080
reset email or they've tried to access a

00:27:27,980 --> 00:27:31,790
page then all out too often will

00:27:30,080 --> 00:27:36,020
redirect and display a quick message on

00:27:31,790 --> 00:27:38,330
the screen we made use of the event

00:27:36,020 --> 00:27:39,850
listener to to do that sending joins

00:27:38,330 --> 00:27:42,170
likes no emails as I mentioned before

00:27:39,850 --> 00:27:43,850
adding a product to a basket so if

00:27:42,170 --> 00:27:45,980
you've got a content-based site like we

00:27:43,850 --> 00:27:47,929
had we wanted our users to be able to

00:27:45,980 --> 00:27:49,610
pay to promote their content we could

00:27:47,929 --> 00:27:51,500
listen for that content being created

00:27:49,610 --> 00:27:53,750
and say is the user also trying to

00:27:51,500 --> 00:27:55,130
promote this content yes they are in

00:27:53,750 --> 00:27:57,410
that case I'm going to also add it to

00:27:55,130 --> 00:27:58,940
their basket completely separate tasks

00:27:57,410 --> 00:28:01,190
completely managed safavieh as well

00:27:58,940 --> 00:28:02,870
which is very nice and also hooking into

00:28:01,190 --> 00:28:05,150
other features so you might want to

00:28:02,870 --> 00:28:06,590
tweet on content creation if you wanted

00:28:05,150 --> 00:28:08,420
to do that with the old approach you'd

00:28:06,590 --> 00:28:10,760
have to go find that content creation

00:28:08,420 --> 00:28:13,310
function add the code in there or add a

00:28:10,760 --> 00:28:14,960
method call which isn't very nice you

00:28:13,310 --> 00:28:17,150
want to be able to look at one place and

00:28:14,960 --> 00:28:18,590
say right and our users being created

00:28:17,150 --> 00:28:21,470
and I know here are the things that will

00:28:18,590 --> 00:28:22,880
be triggered as a result of that a quick

00:28:21,470 --> 00:28:24,680
example that I'll run through is how we

00:28:22,880 --> 00:28:27,170
do it for redirecting and flash

00:28:24,680 --> 00:28:29,750
notifications so want to raise an event

00:28:27,170 --> 00:28:31,730
when a user needs to be redirected we

00:28:29,750 --> 00:28:33,020
want to listen for a notification events

00:28:31,730 --> 00:28:34,370
so that's an event while we're saying

00:28:33,020 --> 00:28:36,320
let's store a little message in the

00:28:34,370 --> 00:28:38,720
session to display on the next next

00:28:36,320 --> 00:28:41,120
request log the notification in the

00:28:38,720 --> 00:28:43,490
session listen for a redirect event and

00:28:41,120 --> 00:28:44,830
redirect them the ordering is important

00:28:43,490 --> 00:28:46,910
because we don't want to redirect them

00:28:44,830 --> 00:28:49,450
before we've set the session information

00:28:46,910 --> 00:28:52,400
otherwise they'll never see the message

00:28:49,450 --> 00:28:55,520
so we made an interface for notifiable

00:28:52,400 --> 00:28:57,050
message request redirection event that's

00:28:55,520 --> 00:28:59,620
something that has to extend the

00:28:57,050 --> 00:29:03,860
symphony event dispatcher default event

00:28:59,620 --> 00:29:05,240
yeah as I mentioned there so quick

00:29:03,860 --> 00:29:07,610
interface that said it's gotta get

00:29:05,240 --> 00:29:10,910
notification and method how to get class

00:29:07,610 --> 00:29:12,860
method get class was used for it was a

00:29:10,910 --> 00:29:14,540
success message or an error or a warning

00:29:12,860 --> 00:29:18,440
we just use a class there that would be

00:29:14,540 --> 00:29:20,930
put into the template an event except to

00:29:18,440 --> 00:29:22,550
URL how to get your L method to our two

00:29:20,930 --> 00:29:25,400
separate things that can be combined

00:29:22,550 --> 00:29:27,320
quite nicely and finally a listener so

00:29:25,400 --> 00:29:29,330
listener listens for something that

00:29:27,320 --> 00:29:31,580
needs to store a notification sees

00:29:29,330 --> 00:29:33,950
events been raised the event gets passed

00:29:31,580 --> 00:29:35,990
to it set some information in the

00:29:33,950 --> 00:29:36,950
session now that's just a listen until

00:29:35,990 --> 00:29:38,420
it's not you're going to do any

00:29:36,950 --> 00:29:41,000
listening yet we have to tell it to

00:29:38,420 --> 00:29:42,470
listen for those events another one for

00:29:41,000 --> 00:29:44,870
listening for a retail right user event

00:29:42,470 --> 00:29:47,660
but just somebody gets the URL and we

00:29:44,870 --> 00:29:49,400
direct some very straightforward so

00:29:47,660 --> 00:29:51,290
noted to actually get it to listen we

00:29:49,400 --> 00:29:52,970
have to create a dispatcher create an

00:29:51,290 --> 00:29:54,410
instance of the listener add the

00:29:52,970 --> 00:29:56,150
listener to the dispatcher and say I

00:29:54,410 --> 00:29:57,080
want you to listen for a new user being

00:29:56,150 --> 00:29:59,420
created you

00:29:57,080 --> 00:30:01,340
then being created something then the

00:29:59,420 --> 00:30:03,650
second parameter for that is a callable

00:30:01,340 --> 00:30:05,810
so an object method combination closure

00:30:03,650 --> 00:30:10,520
something I lat and optionally a

00:30:05,810 --> 00:30:12,770
priority priority lets you put the order

00:30:10,520 --> 00:30:15,860
in place so when i set the notification

00:30:12,770 --> 00:30:18,170
first then redirect the user and here's

00:30:15,860 --> 00:30:20,690
an example in action so create an event

00:30:18,170 --> 00:30:21,860
dispatcher the crowler listener so

00:30:20,690 --> 00:30:24,350
here's the one that sets a notification

00:30:21,860 --> 00:30:28,040
add the listener to the notify object

00:30:24,350 --> 00:30:29,990
and it's an array containing the new

00:30:28,040 --> 00:30:32,090
object have created the method call and

00:30:29,990 --> 00:30:36,560
then the priority and the same for

00:30:32,090 --> 00:30:38,180
redirected and then when we're ready to

00:30:36,560 --> 00:30:39,230
dispatch an event so users done

00:30:38,180 --> 00:30:42,410
something they should trigger this

00:30:39,230 --> 00:30:44,810
simply create a new event and dispatch

00:30:42,410 --> 00:30:46,490
it to our event dispatcher dispatcher is

00:30:44,810 --> 00:30:48,290
something that we then put into pimple

00:30:46,490 --> 00:30:51,140
so that all aspects of our application

00:30:48,290 --> 00:30:52,880
were aware of it particular gotcha to

00:30:51,140 --> 00:30:55,400
watch out for because we're extending

00:30:52,880 --> 00:30:57,050
the symphony event if you've got a name

00:30:55,400 --> 00:30:58,880
property it's going to be overridden

00:30:57,050 --> 00:31:00,530
with the event name it's what we

00:30:58,880 --> 00:31:02,480
originally did was we set all of our

00:31:00,530 --> 00:31:03,980
models to extend this event so that we

00:31:02,480 --> 00:31:05,900
could easily just fire them into the

00:31:03,980 --> 00:31:07,640
event dispatcher if you've then got

00:31:05,900 --> 00:31:09,320
something that takes that model and

00:31:07,640 --> 00:31:11,630
saves it we were finding like a user

00:31:09,320 --> 00:31:13,370
would be created the listener would make

00:31:11,630 --> 00:31:15,320
a change and save the user and all of a

00:31:13,370 --> 00:31:17,480
sudden the user's name would be the name

00:31:15,320 --> 00:31:20,060
of the event we'd have all these users

00:31:17,480 --> 00:31:21,680
with a name of notify something aya

00:31:20,060 --> 00:31:23,480
thankfully we noticed this in

00:31:21,680 --> 00:31:25,550
development we're able to get around it

00:31:23,480 --> 00:31:27,050
our main solution was we just had a

00:31:25,550 --> 00:31:29,540
standard events that we'd always use

00:31:27,050 --> 00:31:31,430
that extended the main of the symphony

00:31:29,540 --> 00:31:33,860
event and had a payload that you could

00:31:31,430 --> 00:31:37,580
manage so we push our object or model

00:31:33,860 --> 00:31:39,410
into that as a payload we also extended

00:31:37,580 --> 00:31:41,270
this a little bit further by creating a

00:31:39,410 --> 00:31:42,890
notion of something that was curable so

00:31:41,270 --> 00:31:45,140
a lot of times I've raised an event that

00:31:42,890 --> 00:31:46,430
should send an email we don't want to

00:31:45,140 --> 00:31:47,690
send the email learn and then it's

00:31:46,430 --> 00:31:50,660
something that can be queued for later

00:31:47,690 --> 00:31:52,790
so we implemented an interface called

00:31:50,660 --> 00:31:55,160
q-ball that you said if an event is

00:31:52,790 --> 00:31:56,390
raised that is curable then it's

00:31:55,160 --> 00:31:58,670
possible that we might want to stick

00:31:56,390 --> 00:32:01,220
this in a queue and then in our listener

00:31:58,670 --> 00:32:03,410
get the payload check to see if it's

00:32:01,220 --> 00:32:06,210
curable and if it is we had a map of

00:32:03,410 --> 00:32:09,540
Beanstalk tubes so you use a

00:32:06,210 --> 00:32:12,330
tweet that users just signed up get the

00:32:09,540 --> 00:32:14,910
ID from the payload and stick it in a

00:32:12,330 --> 00:32:16,380
tube down side to that approaches we had

00:32:14,910 --> 00:32:18,570
have to have tubes for each specific

00:32:16,380 --> 00:32:21,000
task so we have a tube for sending

00:32:18,570 --> 00:32:22,950
tweets related to new users 14 tweets

00:32:21,000 --> 00:32:24,450
relate to something else but it's a nice

00:32:22,950 --> 00:32:26,340
way of being able to take things away

00:32:24,450 --> 00:32:28,490
from the the web execution cycle at

00:32:26,340 --> 00:32:28,490
least

00:32:31,530 --> 00:32:36,750
Plus magically refilled itself that's

00:32:33,780 --> 00:32:39,540
impressive so we've got PHP and HTML

00:32:36,750 --> 00:32:41,790
mixed in our code and we want to get rid

00:32:39,540 --> 00:32:43,350
of that solution was twig it's not one

00:32:41,790 --> 00:32:45,870
of the symphony components but as I say

00:32:43,350 --> 00:32:48,420
it's one of the friends that is built by

00:32:45,870 --> 00:32:50,730
the same people set up a little bit

00:32:48,420 --> 00:32:52,350
create a new twig loader the file system

00:32:50,730 --> 00:32:54,120
and you tell it where your templates are

00:32:52,350 --> 00:32:55,500
going to be stored so I want week to

00:32:54,120 --> 00:32:57,690
look in the templates folder for any

00:32:55,500 --> 00:32:59,520
templates and I'm going to create two

00:32:57,690 --> 00:33:03,600
environment which is effectively or twig

00:32:59,520 --> 00:33:05,100
instance I pass the loader to it then

00:33:03,600 --> 00:33:07,380
say I want to load this template so I

00:33:05,100 --> 00:33:09,330
wanted to get the index twig file from

00:33:07,380 --> 00:33:12,090
my templates folder and I want to render

00:33:09,330 --> 00:33:13,800
it and I pass an array of any any sort

00:33:12,090 --> 00:33:18,300
of replacements I want it to do when

00:33:13,800 --> 00:33:20,160
it's generating the the output so in

00:33:18,300 --> 00:33:21,750
order for us to quickly refactor to

00:33:20,160 --> 00:33:24,540
allow wake within our application we

00:33:21,750 --> 00:33:26,420
created our abstract view simply at a

00:33:24,540 --> 00:33:30,360
constructor and took the container

00:33:26,420 --> 00:33:32,040
created the template engine at an

00:33:30,360 --> 00:33:34,860
abstract method called generates where

00:33:32,040 --> 00:33:36,240
the control ND view was created the

00:33:34,860 --> 00:33:38,130
controller would pass the model to it

00:33:36,240 --> 00:33:40,440
and then a render method which we take

00:33:38,130 --> 00:33:42,330
the name of a template file so when

00:33:40,440 --> 00:33:44,550
generate was cold it was that methods

00:33:42,330 --> 00:33:46,620
job to say go on now to render this

00:33:44,550 --> 00:33:49,080
template this is a template name in

00:33:46,620 --> 00:33:50,850
question and it would also take any

00:33:49,080 --> 00:33:53,130
information from the model and set up as

00:33:50,850 --> 00:33:55,800
template variables we then get template

00:33:53,130 --> 00:33:59,120
variables from container plus into twig

00:33:55,800 --> 00:33:59,120
render it and output

00:33:59,539 --> 00:34:04,519
an issue with them twig and storing the

00:34:02,359 --> 00:34:06,229
template variables and pimple is that

00:34:04,519 --> 00:34:08,329
once you put something in pimple it's a

00:34:06,229 --> 00:34:10,309
property so you've got an array in there

00:34:08,329 --> 00:34:12,559
you then can't make any changes to it

00:34:10,309 --> 00:34:14,720
once it's a it's stuck but if it's an

00:34:12,559 --> 00:34:15,740
object you can do what you want to it so

00:34:14,720 --> 00:34:17,839
it leaves you with a couple of options

00:34:15,740 --> 00:34:19,399
really you can use an object that

00:34:17,839 --> 00:34:22,339
converts its data to an array when it's

00:34:19,399 --> 00:34:25,129
finished or just directly talk to twig

00:34:22,339 --> 00:34:27,349
using the add global method it's not a

00:34:25,129 --> 00:34:28,760
very nice one to use I think anything

00:34:27,349 --> 00:34:31,099
that's got a web globulin normally

00:34:28,760 --> 00:34:32,510
sounds like a bad choice a brief

00:34:31,099 --> 00:34:35,990
overview of some of the twig template

00:34:32,510 --> 00:34:38,270
syntax you've got a variable just put

00:34:35,990 --> 00:34:39,440
curly brackets either side and it will

00:34:38,270 --> 00:34:41,869
then look in that replacement already

00:34:39,440 --> 00:34:44,059
provided find something with that key

00:34:41,869 --> 00:34:46,190
and I'll put it if you want to put a

00:34:44,059 --> 00:34:48,799
comment in your twig template we've put

00:34:46,190 --> 00:34:50,359
calibrating a hash you can also set

00:34:48,799 --> 00:34:53,000
things so if you did want to put a bit

00:34:50,359 --> 00:34:54,799
of sneaky nasty logic in you could say I

00:34:53,000 --> 00:34:56,690
want to create a new variable from that

00:34:54,799 --> 00:34:58,970
and when i get an object but I passport

00:34:56,690 --> 00:35:00,440
wig and I want to call this method you

00:34:58,970 --> 00:35:02,839
can look through things quite nicely so

00:35:00,440 --> 00:35:05,000
for every item in a list of items or to

00:35:02,839 --> 00:35:06,530
display something in a list there i'm

00:35:05,000 --> 00:35:08,630
getting the index of the loop so it's

00:35:06,530 --> 00:35:10,700
item number one item number two and then

00:35:08,630 --> 00:35:12,740
they either name otherwise if it's empty

00:35:10,700 --> 00:35:14,599
display something else so it's got very

00:35:12,740 --> 00:35:16,609
nice easy to use syntax it's based

00:35:14,599 --> 00:35:18,859
heavily around these or to django syntax

00:35:16,609 --> 00:35:21,619
and you can even extend it to use

00:35:18,859 --> 00:35:22,760
whatever whatever syntax you want if you

00:35:21,619 --> 00:35:24,650
want it to look like a different

00:35:22,760 --> 00:35:29,000
templating engine you can do that quite

00:35:24,650 --> 00:35:31,309
easily it's also about support built-in

00:35:29,000 --> 00:35:32,930
for cashing your compiled templates this

00:35:31,309 --> 00:35:35,119
isn't your actual output this is just

00:35:32,930 --> 00:35:37,460
the twig templates themselves turning

00:35:35,119 --> 00:35:40,339
them into executable logic just pass a

00:35:37,460 --> 00:35:42,140
parameter with your cache folder in one

00:35:40,339 --> 00:35:43,490
thing that is unfortunate is this isn't

00:35:42,140 --> 00:35:45,170
consistent with the likes of the rue de

00:35:43,490 --> 00:35:48,100
where it was capturing this quarter this

00:35:45,170 --> 00:35:50,380
one she's called cash part

00:35:48,100 --> 00:35:54,760
a path to a folder and it will put some

00:35:50,380 --> 00:35:56,920
template cashing in there if you want to

00:35:54,760 --> 00:35:59,290
introduce any output cutting into your

00:35:56,920 --> 00:36:02,650
templates that will recommend using this

00:35:59,290 --> 00:36:04,720
the desarrollar to library there's a guy

00:36:02,650 --> 00:36:06,400
that went made a very simple cutting

00:36:04,720 --> 00:36:08,020
library that's available via packages

00:36:06,400 --> 00:36:10,390
you can just add it to your compose a

00:36:08,020 --> 00:36:12,700
json file download it and make use of it

00:36:10,390 --> 00:36:14,350
and you just tell it where you want to

00:36:12,700 --> 00:36:16,510
store your cash so in this case we're

00:36:14,350 --> 00:36:18,670
storing in a file pass an option that

00:36:16,510 --> 00:36:20,860
says there's a time to live in this

00:36:18,670 --> 00:36:22,630
particular any particular things I'm

00:36:20,860 --> 00:36:24,520
putting into it and that's something

00:36:22,630 --> 00:36:26,620
we're getting from the container and we

00:36:24,520 --> 00:36:31,750
also tell it where the cash is going to

00:36:26,620 --> 00:36:34,750
be stored then when we generate when a

00:36:31,750 --> 00:36:37,270
request comes in we take the URL and d5

00:36:34,750 --> 00:36:40,300
its we've got a cache key and we look to

00:36:37,270 --> 00:36:41,770
see if the cache is enabled we've added

00:36:40,300 --> 00:36:43,510
something to our routes file that says

00:36:41,770 --> 00:36:45,790
this page can be cash without this

00:36:43,510 --> 00:36:47,530
cacheable property if it's enabled and

00:36:45,790 --> 00:36:49,960
this particular page is catchable and

00:36:47,530 --> 00:36:53,350
the user isn't logged in and the cache

00:36:49,960 --> 00:36:54,430
exists and get the cash print it out it

00:36:53,350 --> 00:36:55,870
also means you've got to make a change

00:36:54,430 --> 00:36:57,790
to when you're generating your templates

00:36:55,870 --> 00:36:59,470
to actually store a cache but very

00:36:57,790 --> 00:37:01,780
straightforward and get up and running

00:36:59,470 --> 00:37:04,710
with you know five or six lines of code

00:37:01,780 --> 00:37:04,710
there which is very nice

00:37:07,279 --> 00:37:10,699
we also introduced validation I'm not

00:37:09,559 --> 00:37:13,759
going to go into this too much because

00:37:10,699 --> 00:37:14,989
there's not very much time left the one

00:37:13,759 --> 00:37:17,449
that we won't fall is actually the fuel

00:37:14,989 --> 00:37:19,339
validator it from the fuel PHP framework

00:37:17,449 --> 00:37:20,959
at the time we just found there's a lot

00:37:19,339 --> 00:37:23,119
more documentation available and is much

00:37:20,959 --> 00:37:25,039
easier to get started with for both the

00:37:23,119 --> 00:37:26,749
fuel validator and the symphony valid

00:37:25,039 --> 00:37:30,859
data up hell of a lot of information a

00:37:26,749 --> 00:37:32,059
lot of predefined and criteria so you

00:37:30,859 --> 00:37:33,859
could say I want to validate that this

00:37:32,059 --> 00:37:35,569
is an email address and they're both

00:37:33,859 --> 00:37:37,729
very nice frameworks for being able to

00:37:35,569 --> 00:37:39,619
train a number of rules together and get

00:37:37,729 --> 00:37:41,509
back an array of issues that are there

00:37:39,619 --> 00:37:45,529
with some form submissions so it's worth

00:37:41,509 --> 00:37:47,089
looking into them as well we had a lot

00:37:45,529 --> 00:37:48,979
of things that were directly looking at

00:37:47,089 --> 00:37:50,900
the the cookies a rail the session array

00:37:48,979 --> 00:37:53,150
post and get data which wasn't very nice

00:37:50,900 --> 00:37:55,249
one to try and abstract that out so made

00:37:53,150 --> 00:37:57,199
use of the HTTP foundation component

00:37:55,249 --> 00:38:00,049
basically abstracts out all of these

00:37:57,199 --> 00:38:03,529
super Global's and for the HTTP request

00:38:00,049 --> 00:38:05,809
and also the HTTP response in terms of

00:38:03,529 --> 00:38:08,209
the request just create a request and

00:38:05,809 --> 00:38:10,069
then statically create it from Global's

00:38:08,209 --> 00:38:12,169
and it then has a number of properties

00:38:10,069 --> 00:38:15,319
such a request property which is very

00:38:12,169 --> 00:38:18,499
post data query property to get data and

00:38:15,319 --> 00:38:20,839
so on these properties are actually what

00:38:18,499 --> 00:38:21,859
simply call a parameter bag so they've

00:38:20,839 --> 00:38:24,469
got a lot of methods that are

00:38:21,859 --> 00:38:25,789
implemented such as you can call all of

00:38:24,469 --> 00:38:27,140
it and it will give you all of the

00:38:25,789 --> 00:38:30,589
properties you could say just give me

00:38:27,140 --> 00:38:32,989
the keys just get a specific one add a

00:38:30,589 --> 00:38:34,429
specific one set something just

00:38:32,989 --> 00:38:36,409
something exists and remove something

00:38:34,429 --> 00:38:40,219
it's quite a nice way of being able to

00:38:36,409 --> 00:38:42,049
access an array you want to send a

00:38:40,219 --> 00:38:43,999
response to the users or perhaps you've

00:38:42,049 --> 00:38:45,229
got an API aspect to your application or

00:38:43,999 --> 00:38:48,349
you just want to correctly set some

00:38:45,229 --> 00:38:51,559
headers just create a response set some

00:38:48,349 --> 00:38:54,589
content set your status code and set the

00:38:51,559 --> 00:38:56,779
content type and then send the response

00:38:54,589 --> 00:38:58,759
to the browser alternatively you can

00:38:56,779 --> 00:39:00,709
bundle all these in one line you can

00:38:58,759 --> 00:39:04,700
just say a new response with content

00:39:00,709 --> 00:39:07,800
status code content type

00:39:04,700 --> 00:39:10,380
translation to worth a mention it's at

00:39:07,800 --> 00:39:11,940
least one or two talks in itself the

00:39:10,380 --> 00:39:14,040
component allows you to provide a

00:39:11,940 --> 00:39:16,170
dictionary of words and also a

00:39:14,040 --> 00:39:18,420
dictionary of sort of things that appear

00:39:16,170 --> 00:39:20,250
in your template so if you've got hello

00:39:18,420 --> 00:39:21,690
and then a user's name you can actually

00:39:20,250 --> 00:39:24,030
put that somewhere in your tapping

00:39:21,690 --> 00:39:26,340
you're a language file itself is it

00:39:24,030 --> 00:39:28,260
occurs want to look in my dictionary of

00:39:26,340 --> 00:39:30,720
words and pull out the Hello would leave

00:39:28,260 --> 00:39:32,130
the user's name as it is it doesn't

00:39:30,720 --> 00:39:33,630
provide anything try to do the

00:39:32,130 --> 00:39:35,400
translation it just provides a framework

00:39:33,630 --> 00:39:37,440
for you to provide the translations

00:39:35,400 --> 00:39:39,780
already great support but with the

00:39:37,440 --> 00:39:41,849
lights of twig so it's very easy to use

00:39:39,780 --> 00:39:45,570
from that perspective but it's too much

00:39:41,849 --> 00:39:47,400
to go into at this stage all of the

00:39:45,570 --> 00:39:49,680
emailing that we had was just using the

00:39:47,400 --> 00:39:51,330
PHP mail function which meant again were

00:39:49,680 --> 00:39:53,070
in a situation where we couldn't test

00:39:51,330 --> 00:39:55,500
what we had we couldn't inject an email

00:39:53,070 --> 00:39:57,660
object and the logic for that was

00:39:55,500 --> 00:40:00,810
throughout the code so we made use of

00:39:57,660 --> 00:40:03,119
Swift mailer real easy to get up and

00:40:00,810 --> 00:40:05,010
running with create a new instance so we

00:40:03,119 --> 00:40:07,500
had something in our pimple container

00:40:05,010 --> 00:40:09,210
that we could say give me a new new

00:40:07,500 --> 00:40:12,570
email instance and it would create one

00:40:09,210 --> 00:40:14,160
of these we then from our container get

00:40:12,570 --> 00:40:15,930
the host get the username will get the

00:40:14,160 --> 00:40:18,330
password we make use of the likes of

00:40:15,930 --> 00:40:20,730
postmark up and nail gun for sending

00:40:18,330 --> 00:40:22,940
transactional emails so it's nice to be

00:40:20,730 --> 00:40:25,890
able to quickly inject those as well

00:40:22,940 --> 00:40:28,830
create a message but just got user from

00:40:25,890 --> 00:40:31,190
email address for a name is it to email

00:40:28,830 --> 00:40:34,560
address a name and then some content

00:40:31,190 --> 00:40:36,180
send it create a new mailer passing the

00:40:34,560 --> 00:40:40,770
transport engine that we already created

00:40:36,180 --> 00:40:46,110
earlier so in this and then send

00:40:40,770 --> 00:40:47,880
we've sent our email so that's it thank

00:40:46,110 --> 00:40:50,300
very much for listening and just anyone

00:40:47,880 --> 00:40:50,300
have any questions

00:40:52,330 --> 00:40:55,890
o Allah

00:40:57,410 --> 00:41:03,360
we do to move for a four day old legacy

00:41:00,810 --> 00:41:05,640
go to the new component system the

00:41:03,360 --> 00:41:08,040
project itself lasted about four months

00:41:05,640 --> 00:41:10,620
but the the way that we did it we did it

00:41:08,040 --> 00:41:12,750
in very small stages and we often went

00:41:10,620 --> 00:41:14,610
over old ground again and again so the

00:41:12,750 --> 00:41:17,520
first stage I said was just moved to the

00:41:14,610 --> 00:41:19,590
PSR Oh standard when we did that we then

00:41:17,520 --> 00:41:21,900
have to go back over that to introduce

00:41:19,590 --> 00:41:23,670
pimple and then go back over it again we

00:41:21,900 --> 00:41:25,320
did it we did it particularly over a

00:41:23,670 --> 00:41:29,430
long period of time so that we could do

00:41:25,320 --> 00:41:30,750
it carefully how many hours are I had

00:41:29,430 --> 00:41:32,580
don't don't even want to think of it

00:41:30,750 --> 00:41:34,320
there was a myself and two other

00:41:32,580 --> 00:41:36,450
developers working full-time on that

00:41:34,320 --> 00:41:38,310
project as well as a designer and for

00:41:36,450 --> 00:41:40,200
most of those those four months plus

00:41:38,310 --> 00:41:41,970
overtime and that kind of thing so I

00:41:40,200 --> 00:41:44,190
don't even think about the man I was

00:41:41,970 --> 00:41:46,080
involved but it was a hell of a lot

00:41:44,190 --> 00:41:47,790
quicker than if we used the likes of an

00:41:46,080 --> 00:41:50,670
existing framework off-the-shelf

00:41:47,790 --> 00:41:52,290
solution because when we plan that out

00:41:50,670 --> 00:41:54,510
we would have needed a llama with just

00:41:52,290 --> 00:41:55,740
there was so much work involved in

00:41:54,510 --> 00:41:58,140
working out all the business logic

00:41:55,740 --> 00:41:59,700
that's already there taking it out but

00:41:58,140 --> 00:42:03,020
as we didn't need to worry about that we

00:41:59,700 --> 00:42:03,020
just improved on what was already there

00:42:05,330 --> 00:42:11,280
right because you said that you feel

00:42:09,480 --> 00:42:13,410
like in a way the business logic from

00:42:11,280 --> 00:42:17,130
the application layer and just replaced

00:42:13,410 --> 00:42:19,710
the application layer itself yeah it's

00:42:17,130 --> 00:42:23,040
my assumption right that you've been

00:42:19,710 --> 00:42:25,650
lucky not to have the business logic

00:42:23,040 --> 00:42:28,770
mixed up within the application layer

00:42:25,650 --> 00:42:30,420
all over the place you know we did

00:42:28,770 --> 00:42:32,250
originally have that both of them

00:42:30,420 --> 00:42:34,860
intertwined but as we were removing

00:42:32,250 --> 00:42:36,630
these of application logic we were able

00:42:34,860 --> 00:42:38,760
to enter right there's the business

00:42:36,630 --> 00:42:41,040
logic that remains let's refactor that

00:42:38,760 --> 00:42:42,600
as well so on top of the refactoring to

00:42:41,040 --> 00:42:44,640
the components we did have to refactor

00:42:42,600 --> 00:42:46,020
all of the business logic that was there

00:42:44,640 --> 00:42:47,730
but we didn't have to worry about

00:42:46,020 --> 00:42:50,810
porting it to another system so there

00:42:47,730 --> 00:42:52,970
wasn't as much as much risk to losing it

00:42:50,810 --> 00:42:55,310
but you are still running the risk that

00:42:52,970 --> 00:42:57,320
you could actually mess up something

00:42:55,310 --> 00:42:59,240
with the business logic that that sounds

00:42:57,320 --> 00:43:03,230
like a complete rewrite of the system

00:42:59,240 --> 00:43:04,880
really obviously depending how much

00:43:03,230 --> 00:43:07,190
business logic you could find like in

00:43:04,880 --> 00:43:09,620
templates which happens a lot of time or

00:43:07,190 --> 00:43:12,430
your controllers or in you know all sort

00:43:09,620 --> 00:43:16,190
of random places throughout the system

00:43:12,430 --> 00:43:18,380
yeah helmet when we have the end result

00:43:16,190 --> 00:43:20,090
it was effectively almost a rewrite but

00:43:18,380 --> 00:43:22,280
we did it in small stages so the first

00:43:20,090 --> 00:43:23,960
stage was let's just refactor it so that

00:43:22,280 --> 00:43:26,660
it's PSR oh let's refactor a so

00:43:23,960 --> 00:43:28,340
dependencies are injected and then at

00:43:26,660 --> 00:43:30,110
the end we did have effectively a new

00:43:28,340 --> 00:43:32,240
product but that retained a lot of the

00:43:30,110 --> 00:43:39,020
previous business logic so I love

00:43:32,240 --> 00:43:40,490
interest the end result how roughly many

00:43:39,020 --> 00:43:44,840
problems you had around the business

00:43:40,490 --> 00:43:47,120
logic in most cases everything's been

00:43:44,840 --> 00:43:49,370
fine the main thing where we had some

00:43:47,120 --> 00:43:50,900
issues of business logic was actually

00:43:49,370 --> 00:43:52,880
because the business logic changed

00:43:50,900 --> 00:43:54,260
during the refactoring so we had some

00:43:52,880 --> 00:43:56,030
bits of the old stuff some bits of the

00:43:54,260 --> 00:43:57,290
new stuff and some things where we just

00:43:56,030 --> 00:44:00,830
haven't got the requirements quite

00:43:57,290 --> 00:44:02,150
nailed and we've been very fortunate but

00:44:00,830 --> 00:44:03,920
we have had to make quite a lot of

00:44:02,150 --> 00:44:05,750
changes since the new launch of the new

00:44:03,920 --> 00:44:07,550
application just because of the business

00:44:05,750 --> 00:44:08,930
changing so I think we've being will

00:44:07,550 --> 00:44:12,910
probably been luckier than the most

00:44:08,930 --> 00:44:12,910
ravine on our regard all right thanks

00:44:12,940 --> 00:44:19,570
all right

00:44:14,980 --> 00:44:22,020
yeah I when you pass around dependency

00:44:19,570 --> 00:44:26,290
container to lots of objects yeah I'm

00:44:22,020 --> 00:44:30,369
got any performance problem or any kind

00:44:26,290 --> 00:44:32,920
of memory issues or anything or not

00:44:30,369 --> 00:44:35,500
noticed anything with regards to the the

00:44:32,920 --> 00:44:37,630
container and though the way that we've

00:44:35,500 --> 00:44:39,580
we've done is we have built a number of

00:44:37,630 --> 00:44:41,170
containers that sometimes reference each

00:44:39,580 --> 00:44:43,830
other so as I mentioned with these or

00:44:41,170 --> 00:44:46,119
factory container that isn't actually

00:44:43,830 --> 00:44:47,980
instantiated until you first say to the

00:44:46,119 --> 00:44:50,230
primary container give me the factory

00:44:47,980 --> 00:44:51,730
container so the making use of the lazy

00:44:50,230 --> 00:44:54,040
loading is really helped in that regard

00:44:51,730 --> 00:44:56,260
and also separating it into a number of

00:44:54,040 --> 00:44:57,580
interlinked containers but we've not

00:44:56,260 --> 00:44:59,109
noticed any issues with regards to

00:44:57,580 --> 00:45:01,359
memory and performance the main one was

00:44:59,109 --> 00:45:04,000
to do with llamo file in yamel file

00:45:01,359 --> 00:45:05,530
parsing with the the routing I actually

00:45:04,000 --> 00:45:08,609
by mistake when I was putting the

00:45:05,530 --> 00:45:10,359
routing in place I had one line of code

00:45:08,609 --> 00:45:12,400
duplicated somewhere else that wasn't

00:45:10,359 --> 00:45:14,980
required and when I removed it out of

00:45:12,400 --> 00:45:18,070
forty percent improvement on the cpu

00:45:14,980 --> 00:45:21,040
performance so amp it's not a big fan of

00:45:18,070 --> 00:45:24,930
the performance at yamaha's but it's a

00:45:21,040 --> 00:45:24,930
nice nice thing to use thank you

00:45:24,970 --> 00:45:37,869
yeah and your legacy app where is native

00:45:31,330 --> 00:45:40,090
PHP yeah and some just wondering how the

00:45:37,869 --> 00:45:42,550
symphony components would slot into a

00:45:40,090 --> 00:45:46,810
legacy PHP f that was built in another

00:45:42,550 --> 00:45:49,390
framework I think they're quite easy to

00:45:46,810 --> 00:45:51,090
use one at a time so you'd have to take

00:45:49,390 --> 00:45:52,960
that sort of approach until I want to

00:45:51,090 --> 00:45:56,020
want to make use of this particular

00:45:52,960 --> 00:45:58,000
component to improve this aspect where

00:45:56,020 --> 00:46:00,340
you'll probably fall down is where that

00:45:58,000 --> 00:46:02,349
the existing framework or content

00:46:00,340 --> 00:46:04,000
management system already has built-in

00:46:02,349 --> 00:46:05,349
support for the likes of say routing

00:46:04,000 --> 00:46:06,550
you're probably going to find that's

00:46:05,349 --> 00:46:08,770
going to be a difficult thing because

00:46:06,550 --> 00:46:10,869
it's very tightly coupled with the

00:46:08,770 --> 00:46:12,310
framework of choice or as if it's

00:46:10,869 --> 00:46:14,320
something where you're just making use

00:46:12,310 --> 00:46:15,790
of an aspect of the framework you could

00:46:14,320 --> 00:46:17,020
say oh gee I'll just not use that bit of

00:46:15,790 --> 00:46:21,360
the framework and use the symphony

00:46:17,020 --> 00:46:25,170
component instead thanks

00:46:21,360 --> 00:46:27,090
I have an animal question yeah have you

00:46:25,170 --> 00:46:31,020
assess the size of the project before

00:46:27,090 --> 00:46:33,360
and after or can you tell me how big the

00:46:31,020 --> 00:46:35,180
project was like in terms of lines of

00:46:33,360 --> 00:46:37,020
code or something like that

00:46:35,180 --> 00:46:38,730
unfortunately I can't I don't have any

00:46:37,020 --> 00:46:41,430
of those sort of fair metrics to hand

00:46:38,730 --> 00:46:44,250
but it was it did take longer than we

00:46:41,430 --> 00:46:46,050
initially expected but it was still no

00:46:44,250 --> 00:46:49,110
any or as long as we'd estimated if we

00:46:46,050 --> 00:46:51,390
were to use in another system the main

00:46:49,110 --> 00:46:53,610
reason for taking a bit longer was there

00:46:51,390 --> 00:46:55,140
were lots of changes in some of the new

00:46:53,610 --> 00:46:57,750
business logic that we needed to add in

00:46:55,140 --> 00:47:00,150
and just the the learning curve of all

00:46:57,750 --> 00:47:01,350
of the team because some of the

00:47:00,150 --> 00:47:03,210
components were new to the members of

00:47:01,350 --> 00:47:05,850
the teams that needed to to learn about

00:47:03,210 --> 00:47:08,040
those as well but will you be able to

00:47:05,850 --> 00:47:12,600
compare it to any of the open source

00:47:08,040 --> 00:47:14,780
project in terms of the size I'm trying

00:47:12,600 --> 00:47:14,780
to think

00:47:18,210 --> 00:47:23,250
it probably solve on a similar sort of

00:47:20,400 --> 00:47:24,599
scale to maybe a trim down version of

00:47:23,250 --> 00:47:27,839
WordPress or something like that in

00:47:24,599 --> 00:47:30,510
terms of the number of files and methods

00:47:27,839 --> 00:47:31,920
and that kind of thing just just a look

00:47:30,510 --> 00:47:35,089
and putting the air guess they're really

00:47:31,920 --> 00:47:35,089
okay thanks

00:47:37,550 --> 00:47:42,020
I am were you having to develop new

00:47:40,670 --> 00:47:43,550
features for the application at the same

00:47:42,020 --> 00:47:45,020
time as refactoring or did you get a

00:47:43,550 --> 00:47:46,820
block of time just to concentrate on

00:47:45,020 --> 00:47:48,260
refactoring yeah we did have some new

00:47:46,820 --> 00:47:51,770
features that had to be added but they

00:47:48,260 --> 00:47:54,410
came later so before we released we did

00:47:51,770 --> 00:47:56,360
the refactoring of each of little stage

00:47:54,410 --> 00:47:58,070
we factor this reflector that then it

00:47:56,360 --> 00:48:00,110
was a case of right let's focus on the

00:47:58,070 --> 00:48:02,030
new business logic there was one or two

00:48:00,110 --> 00:48:03,650
exceptions where the new business logic

00:48:02,030 --> 00:48:05,960
dictated that we were literally ripping

00:48:03,650 --> 00:48:08,090
one existing feature apart in which case

00:48:05,960 --> 00:48:10,730
we told there's no point in refactoring

00:48:08,090 --> 00:48:13,070
that and then adding the new feature but

00:48:10,730 --> 00:48:17,110
there was a lot that we did just keep a

00:48:13,070 --> 00:48:17,110
long as we're going thanks

00:48:24,430 --> 00:48:28,720
how did you manage to dip the deployment

00:48:26,800 --> 00:48:31,210
are you talking about the rolling up the

00:48:28,720 --> 00:48:33,850
the new application what we did was we

00:48:31,210 --> 00:48:36,220
took the existing sites over a weekend

00:48:33,850 --> 00:48:38,560
and on a Sunday it was a Sunday night

00:48:36,220 --> 00:48:40,450
just got back from PHP Northwest

00:48:38,560 --> 00:48:42,730
Conference in the rest of the teams who

00:48:40,450 --> 00:48:45,370
are really tired we all assembled online

00:48:42,730 --> 00:48:46,960
we disabled logins so the site was still

00:48:45,370 --> 00:48:48,700
available still functioning but the user

00:48:46,960 --> 00:48:51,550
couldn't login so there's no new content

00:48:48,700 --> 00:48:54,250
we put a notification on that said you

00:48:51,550 --> 00:48:56,230
can't make use of the site we created

00:48:54,250 --> 00:48:58,090
database patches every time we're making

00:48:56,230 --> 00:49:00,970
a small change to the database that we

00:48:58,090 --> 00:49:02,380
ran during development and we tested

00:49:00,970 --> 00:49:04,720
this obviously before we did the

00:49:02,380 --> 00:49:07,330
deployment but a new server which was

00:49:04,720 --> 00:49:09,550
just made a lot easier as well for the

00:49:07,330 --> 00:49:11,620
new site so we set up a new server put

00:49:09,550 --> 00:49:13,540
the code on their import of the database

00:49:11,620 --> 00:49:15,160
at one particular moment in time once

00:49:13,540 --> 00:49:17,710
logins were disabled so we knew there's

00:49:15,160 --> 00:49:19,690
no new content and we ran our database

00:49:17,710 --> 00:49:21,670
Mike migrations that was just a casebook

00:49:19,690 --> 00:49:23,830
dead in the dns and waiting for that to

00:49:21,670 --> 00:49:25,090
propagate so we did have a couple of

00:49:23,830 --> 00:49:26,920
hours where people couldn't contribute

00:49:25,090 --> 00:49:29,820
to the site but it was done overnight so

00:49:26,920 --> 00:49:29,820
learning too much of an issue

00:49:31,170 --> 00:49:36,470
No

00:49:33,680 --> 00:49:38,900
did you write and a test on functional

00:49:36,470 --> 00:49:42,140
tests before jumping in the refactoring

00:49:38,900 --> 00:49:43,940
we added a small number of unit tests we

00:49:42,140 --> 00:49:46,280
didn't really add an easel any more

00:49:43,940 --> 00:49:48,200
complicated test than that but we didn't

00:49:46,280 --> 00:49:50,480
have very many the application had none

00:49:48,200 --> 00:49:52,220
to start with we looked at adding as

00:49:50,480 --> 00:49:54,260
many as we could during me so we

00:49:52,220 --> 00:49:56,000
factored in processbook unfortunately we

00:49:54,260 --> 00:49:57,980
were left with not enough time to do as

00:49:56,000 --> 00:50:00,170
good a job as I want that's a pretty bad

00:49:57,980 --> 00:50:05,000
excuse for lack of unit tests but there

00:50:00,170 --> 00:50:10,340
it is if you've not used that excuse for

00:50:05,000 --> 00:50:15,440
not writing unit tests to rely anywhere

00:50:10,340 --> 00:50:17,000
else I last one myself yeah yes oh and i

00:50:15,440 --> 00:50:18,440
can imagine dropping in a single

00:50:17,000 --> 00:50:20,120
component to replace what visa

00:50:18,440 --> 00:50:21,590
functionality is quite straightforward

00:50:20,120 --> 00:50:24,050
when you have something a bit more

00:50:21,590 --> 00:50:25,430
ubiquitous like the router itself was

00:50:24,050 --> 00:50:27,020
there particular challenges or any

00:50:25,430 --> 00:50:30,200
particular component that was quite hard

00:50:27,020 --> 00:50:33,920
to do all of this the the one that is

00:50:30,200 --> 00:50:35,570
most difficult was the wealth of to I

00:50:33,920 --> 00:50:37,030
suppose the introduced in the class

00:50:35,570 --> 00:50:40,310
loader because that required us to

00:50:37,030 --> 00:50:42,350
pretty much update all of the code to a

00:50:40,310 --> 00:50:44,540
new standard and to a new structure and

00:50:42,350 --> 00:50:46,100
want to go before we could really get

00:50:44,540 --> 00:50:48,350
that fully integrated but the most

00:50:46,100 --> 00:50:50,060
difficult one was probably twig we

00:50:48,350 --> 00:50:52,580
initially went for a shorter approach

00:50:50,060 --> 00:50:53,810
where we used a different templating

00:50:52,580 --> 00:50:55,250
engine and halfway through the project

00:50:53,810 --> 00:50:57,140
we thought this isn't really going to

00:50:55,250 --> 00:50:59,570
give us the flexibility we want so we

00:50:57,140 --> 00:51:02,020
decided to use twig and done that was a

00:50:59,570 --> 00:51:02,020
big job

00:51:05,550 --> 00:51:08,360
no one else

00:51:09,660 --> 00:51:16,570
some of the back off

00:51:13,220 --> 00:51:16,570
all right thank you very much

00:51:27,940 --> 00:51:30,000

YouTube URL: https://www.youtube.com/watch?v=Aq5Hi6PasFg


