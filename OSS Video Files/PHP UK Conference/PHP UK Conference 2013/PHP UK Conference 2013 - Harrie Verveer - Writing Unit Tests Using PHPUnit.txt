Title: PHP UK Conference 2013 - Harrie Verveer - Writing Unit Tests Using PHPUnit
Publication date: 2013-04-29
Playlist: PHP UK Conference 2013
Description: 
	A lot of people will tell you that unittesting is easy, but in practice it's one of the hardest disciplines to get right. When you've never written unittests before you'll probably have a million questions really fast; your code has got a lot of dependencies, runs queries on your database and sends out e-mails, and there seems to be no way to write reliable tests for this code that you can actually use time after time. No worries! Harrie is here to help :-) This talk is a hands-on introduction to writing unittests using PHPUnit. We'll be writing some actual unittests for (sometimes problematic) pieces of code that you could come across while testing real-life applications. I'll explain how you could apply TDD and how to use it into your advantage, and I'll come with some suggestions on how you could convince your boss that unittesting is important and actually worth the effort on the long run.

Slides: http://harrieverveer.nl/slides/phpunit_handson.pdf
Captions: 
	00:00:07,929 --> 00:00:14,809
okay hi I'm Harry um I've been a PHP

00:00:12,110 --> 00:00:18,410
developer for almost a decade now and

00:00:14,809 --> 00:00:21,470
last year I switched jobs I now work for

00:00:18,410 --> 00:00:24,140
a back shop in Netherlands it's a web

00:00:21,470 --> 00:00:27,710
shop I also have a Twitter account which

00:00:24,140 --> 00:00:30,259
you can see here I'm from hoosh in the

00:00:27,710 --> 00:00:31,699
Netherlands which is there so it's not

00:00:30,259 --> 00:00:33,800
really that far you know it's just like

00:00:31,699 --> 00:00:35,480
there's a bit of water in between but

00:00:33,800 --> 00:00:36,380
besides that I like to think we're

00:00:35,480 --> 00:00:40,370
practically neighbors

00:00:36,380 --> 00:00:42,560
right and as I said I work at back shop

00:00:40,370 --> 00:00:45,650
so we are an e-commerce website we're

00:00:42,560 --> 00:00:48,680
selling equipment for stages Studios

00:00:45,650 --> 00:00:51,170
musicians DJ's that kind of stuff

00:00:48,680 --> 00:00:53,000
until now the website is in Dutch so we

00:00:51,170 --> 00:00:54,950
are actually shipping to the UK but if

00:00:53,000 --> 00:00:57,260
you wanted to order something you would

00:00:54,950 --> 00:00:58,850
have to learn Dutch first so I'm sure

00:00:57,260 --> 00:01:01,790
eventually there will be an English

00:00:58,850 --> 00:01:04,790
version as well but for now this is it

00:01:01,790 --> 00:01:08,360
and I'm going to talk to you about unit

00:01:04,790 --> 00:01:10,130
testing today I'm first going to explain

00:01:08,360 --> 00:01:13,760
to you why unit testing is important and

00:01:10,130 --> 00:01:17,020
why you should do it let me ask you who

00:01:13,760 --> 00:01:19,550
of you has ever written unit tests yes

00:01:17,020 --> 00:01:21,260
okay so this talk is really meant as

00:01:19,550 --> 00:01:23,270
like an introduction to people who

00:01:21,260 --> 00:01:26,570
haven't written you need that's much so

00:01:23,270 --> 00:01:28,850
I don't know if this will be too simple

00:01:26,570 --> 00:01:30,710
for you guys or boring but whatever if

00:01:28,850 --> 00:01:31,909
you wanted just to see if you're doing

00:01:30,710 --> 00:01:34,550
the right thing then of course you're

00:01:31,909 --> 00:01:37,970
welcome to stay who of you has never

00:01:34,550 --> 00:01:41,990
written unit tests before also quite a

00:01:37,970 --> 00:01:44,150
lot who of you has been planning to

00:01:41,990 --> 00:01:47,060
start writing unit tests but never got

00:01:44,150 --> 00:01:48,500
around to do doing it yeah a lot of

00:01:47,060 --> 00:01:50,750
times now I was hoping for that that

00:01:48,500 --> 00:01:54,170
happens a lot right and that was kind of

00:01:50,750 --> 00:01:56,240
why I decided I wanted to do a hands-on

00:01:54,170 --> 00:01:57,950
presentation so me actually writing some

00:01:56,240 --> 00:01:59,299
unit tests for you guys so you can

00:01:57,950 --> 00:02:02,240
actually see how it works in practice

00:01:59,299 --> 00:02:04,340
and hopefully that will help you getting

00:02:02,240 --> 00:02:07,670
started when you're back working on your

00:02:04,340 --> 00:02:09,379
own project and so I'm first going to

00:02:07,670 --> 00:02:11,120
explain why unit testing is important

00:02:09,379 --> 00:02:15,260
then we're going to write a really

00:02:11,120 --> 00:02:16,970
simple school book example unit test I'm

00:02:15,260 --> 00:02:19,069
going to explain something about writing

00:02:16,970 --> 00:02:19,510
testable code and why it's important how

00:02:19,069 --> 00:02:23,530
you

00:02:19,510 --> 00:02:26,140
do that I have some things I place under

00:02:23,530 --> 00:02:27,909
the chapter voodoo which are things you

00:02:26,140 --> 00:02:31,480
probably shouldn't do but they are damn

00:02:27,909 --> 00:02:34,269
handy so you probably would like to do

00:02:31,480 --> 00:02:35,709
them anyway test-driven development I

00:02:34,269 --> 00:02:37,180
want to explain what it is and why it's

00:02:35,709 --> 00:02:41,110
important and then I want to tell you

00:02:37,180 --> 00:02:45,549
what to test so first why is unit

00:02:41,110 --> 00:02:47,769
testing important well first of all I

00:02:45,549 --> 00:02:50,409
like for something I like to call the

00:02:47,769 --> 00:02:53,079
balloon effect in software it's really

00:02:50,409 --> 00:02:55,510
common that you fix a problem at one

00:02:53,079 --> 00:02:57,790
place and you test that and that's fixed

00:02:55,510 --> 00:02:59,200
you know and you you put it in the

00:02:57,790 --> 00:03:02,709
repository and you think you're done but

00:02:59,200 --> 00:03:04,569
then that change suddenly happens to

00:03:02,709 --> 00:03:06,670
break something else somewhere else in

00:03:04,569 --> 00:03:08,769
your code you know so you go there and

00:03:06,670 --> 00:03:10,180
you go fix that and then that's fixed

00:03:08,769 --> 00:03:11,950
but then the other thing is broken again

00:03:10,180 --> 00:03:12,909
you know and you keep like running

00:03:11,950 --> 00:03:16,420
around all the time

00:03:12,909 --> 00:03:20,739
so just testing what you just build or

00:03:16,420 --> 00:03:22,750
change doesn't always cut it in an ideal

00:03:20,739 --> 00:03:25,449
situation you would like to test your

00:03:22,750 --> 00:03:27,190
entire application every time after

00:03:25,449 --> 00:03:28,930
every change you want to test everything

00:03:27,190 --> 00:03:32,500
is everything still working the way it

00:03:28,930 --> 00:03:34,780
is and doing that manually is like a lot

00:03:32,500 --> 00:03:36,730
of work if not impossible you know I

00:03:34,780 --> 00:03:38,049
mean imagine after every bug fix you

00:03:36,730 --> 00:03:39,760
would have to test your entire

00:03:38,049 --> 00:03:41,139
application that you're working on is

00:03:39,760 --> 00:03:43,599
everything still work is everything

00:03:41,139 --> 00:03:45,459
still there so you're not going to do

00:03:43,599 --> 00:03:47,319
that and it's important to have a tool

00:03:45,459 --> 00:03:49,569
for you that can do that and be it per

00:03:47,319 --> 00:03:52,569
unit is a tool that will do it for you

00:03:49,569 --> 00:03:55,750
if you write your unit tests another

00:03:52,569 --> 00:04:00,010
reason this is the cost of change curve

00:03:55,750 --> 00:04:01,540
well or my interpretation of it but what

00:04:00,010 --> 00:04:03,250
this says is that the earlier that

00:04:01,540 --> 00:04:05,230
problems are found in your software the

00:04:03,250 --> 00:04:06,940
cheaper they are to fix now this is

00:04:05,230 --> 00:04:09,819
really an old concept going back to I

00:04:06,940 --> 00:04:11,379
think the 70s or something like that and

00:04:09,819 --> 00:04:13,449
what it basically says is that when

00:04:11,379 --> 00:04:15,699
you're in your functional design stage

00:04:13,449 --> 00:04:17,979
and you find a flaw in the design it's

00:04:15,699 --> 00:04:19,690
still relatively easy to fix right you

00:04:17,979 --> 00:04:21,760
can just like change a couple of lines

00:04:19,690 --> 00:04:23,710
in the functional design maybe upload

00:04:21,760 --> 00:04:25,900
another graph and you're good to go

00:04:23,710 --> 00:04:27,550
if you discovered in the technical

00:04:25,900 --> 00:04:29,080
design it takes a little bit more time

00:04:27,550 --> 00:04:30,700
to fix the problem because you have to

00:04:29,080 --> 00:04:32,590
go back to the functional design change

00:04:30,700 --> 00:04:33,100
that as well think about technical

00:04:32,590 --> 00:04:34,900
solution

00:04:33,100 --> 00:04:38,320
as well but it's still relatively cheap

00:04:34,900 --> 00:04:40,720
if you're in development it's already a

00:04:38,320 --> 00:04:43,390
bit more expensive to change and so on

00:04:40,720 --> 00:04:45,490
if we're in an acceptance test and we

00:04:43,390 --> 00:04:47,200
discover a problem that might be quite a

00:04:45,490 --> 00:04:48,880
lot of work right if somebody says well

00:04:47,200 --> 00:04:51,670
this this isn't what I want I want to

00:04:48,880 --> 00:04:53,710
work as differently or find a book or

00:04:51,670 --> 00:04:55,810
something else you will have to go back

00:04:53,710 --> 00:04:57,370
into your code investigate what was I

00:04:55,810 --> 00:04:59,110
doing here you're it's not in your head

00:04:57,370 --> 00:05:02,230
anymore so you have to we have to read

00:04:59,110 --> 00:05:03,460
up on it and so on and even worse in

00:05:02,230 --> 00:05:06,100
production of course right if

00:05:03,460 --> 00:05:07,900
something's in production if something

00:05:06,100 --> 00:05:10,720
in production is wrong it takes a lot of

00:05:07,900 --> 00:05:13,960
time and a lot of costs to fix it now

00:05:10,720 --> 00:05:15,790
this graph as I said H goes back quite a

00:05:13,960 --> 00:05:17,320
long way and you can imagine back in the

00:05:15,790 --> 00:05:22,840
days when we were distributing software

00:05:17,320 --> 00:05:24,640
on CDs or stuff like that you would

00:05:22,840 --> 00:05:25,900
actually have to send out a new CD or

00:05:24,640 --> 00:05:27,910
whatever you know where the software

00:05:25,900 --> 00:05:30,190
said that was expensive and nowadays

00:05:27,910 --> 00:05:33,040
with the web and with the modern

00:05:30,190 --> 00:05:36,220
technology development methodologies

00:05:33,040 --> 00:05:38,830
like a child and stuff like that it may

00:05:36,220 --> 00:05:40,720
be not this literal anymore but if still

00:05:38,830 --> 00:05:43,780
a lot of it's still true you know the

00:05:40,720 --> 00:05:47,020
sooner you find a book the easier it is

00:05:43,780 --> 00:05:50,860
to fix and the less costs you have so

00:05:47,020 --> 00:05:53,650
that's why it's important so check we've

00:05:50,860 --> 00:05:56,770
seen that now let's go write the first

00:05:53,650 --> 00:05:59,020
unit test this is the first time I'm

00:05:56,770 --> 00:06:00,430
going to do live coding on stage and I

00:05:59,020 --> 00:06:03,790
was always told that this will blow up

00:06:00,430 --> 00:06:05,440
in my face sometimes so but it will fend

00:06:03,790 --> 00:06:09,100
for you guys to see as well you know I'm

00:06:05,440 --> 00:06:12,070
using PHP unit to run my unit tests I

00:06:09,100 --> 00:06:15,760
think it's the most popular tool to run

00:06:12,070 --> 00:06:20,650
unit tests at the moment you can find it

00:06:15,760 --> 00:06:22,270
at PHP unit de and this is linked to the

00:06:20,650 --> 00:06:25,780
manual of course that's also on the

00:06:22,270 --> 00:06:27,720
website the document is the

00:06:25,780 --> 00:06:29,770
documentation is very thorough and

00:06:27,720 --> 00:06:32,560
well-structured so it's really easy to

00:06:29,770 --> 00:06:34,840
find things and and so if you start unit

00:06:32,560 --> 00:06:36,340
testing if I write you in tests I always

00:06:34,840 --> 00:06:38,230
have this like in the background window

00:06:36,340 --> 00:06:40,090
somewhere to pop up whenever I need to

00:06:38,230 --> 00:06:44,500
know something or want to look something

00:06:40,090 --> 00:06:46,340
up installing PHP units I leave up to

00:06:44,500 --> 00:06:48,470
you the free method you can upload

00:06:46,340 --> 00:06:50,960
you can use pair you can use composer or

00:06:48,470 --> 00:06:53,330
you can download the for archive it's

00:06:50,960 --> 00:06:55,520
all very well documented and I trust you

00:06:53,330 --> 00:06:56,960
all with that you can manage that widest

00:06:55,520 --> 00:06:58,610
like typing free lines of code or

00:06:56,960 --> 00:07:01,060
something in your command line and then

00:06:58,610 --> 00:07:05,889
you have it so that that's rather easy

00:07:01,060 --> 00:07:13,160
so let's write the first unit test oh

00:07:05,889 --> 00:07:19,430
there we go again if you can't read this

00:07:13,160 --> 00:07:21,650
move closer okay so this is the method

00:07:19,430 --> 00:07:23,570
we want to test right we want to write

00:07:21,650 --> 00:07:25,490
the unit test for this of course it's a

00:07:23,570 --> 00:07:27,320
very easy method but I always like to

00:07:25,490 --> 00:07:29,360
write a unit test for some method like

00:07:27,320 --> 00:07:31,010
this in my project just to be sure that

00:07:29,360 --> 00:07:33,760
I've got everything set up properly they

00:07:31,010 --> 00:07:38,080
know so that PHP unit is running in etc

00:07:33,760 --> 00:07:43,639
if this is my project I can create a

00:07:38,080 --> 00:07:45,380
folder unit tests in it and what you see

00:07:43,639 --> 00:07:49,150
is that I placed two files in here you

00:07:45,380 --> 00:07:49,150
can probably you can't read this right

00:07:49,600 --> 00:07:55,100
I'm sorry about that but I didn't know

00:07:52,190 --> 00:07:57,320
how to get left column larger but this

00:07:55,100 --> 00:08:00,200
is PHP unit that XML is in the unit

00:07:57,320 --> 00:08:02,990
tests that directory and what I'm

00:08:00,200 --> 00:08:05,360
telling here is that there's a test

00:08:02,990 --> 00:08:08,419
suite test suite is a way of grouping

00:08:05,360 --> 00:08:12,380
tests together so that you can later on

00:08:08,419 --> 00:08:14,330
you run certain tests or all together

00:08:12,380 --> 00:08:18,620
you know but you can decide to only run

00:08:14,330 --> 00:08:20,630
tests on a certain subsystem or only the

00:08:18,620 --> 00:08:22,340
smoke test really important tests and

00:08:20,630 --> 00:08:24,139
leave the big test for everything in a

00:08:22,340 --> 00:08:27,349
separate test suite something like that

00:08:24,139 --> 00:08:30,470
in this case I'm declaring just one

00:08:27,349 --> 00:08:32,599
suite which is called as RC that's the

00:08:30,470 --> 00:08:37,539
name of our test suite and the directory

00:08:32,599 --> 00:08:37,539
where the tests reside in is called SRC

00:08:37,870 --> 00:08:43,159
so that's the directory over here that's

00:08:40,400 --> 00:08:47,660
the directory in our unit tests

00:08:43,159 --> 00:08:51,140
directory you can also see a reference

00:08:47,660 --> 00:08:53,600
here to the bootstrap dot PHP and this

00:08:51,140 --> 00:08:57,560
is the file that PHP unit will include

00:08:53,600 --> 00:09:00,170
before starting to run any tests so you

00:08:57,560 --> 00:09:02,089
can use use bootstrap dot PHP for

00:09:00,170 --> 00:09:04,519
sample two if you're using cent

00:09:02,089 --> 00:09:06,529
framework to include cent framework to

00:09:04,519 --> 00:09:08,930
get that auto loader running to get the

00:09:06,529 --> 00:09:11,360
database connections working stuff like

00:09:08,930 --> 00:09:15,620
that you know same for other frameworks

00:09:11,360 --> 00:09:19,040
of course in this case the only thing

00:09:15,620 --> 00:09:21,410
I'm interested in is I'm using composer

00:09:19,040 --> 00:09:23,240
in this case is the composer auto loader

00:09:21,410 --> 00:09:25,160
so in this case this is what my

00:09:23,240 --> 00:09:26,870
bootstrap dot PHP looks like it isn't

00:09:25,160 --> 00:09:28,310
very complicated but it does get my

00:09:26,870 --> 00:09:32,589
order loader and make sure that I can

00:09:28,310 --> 00:09:34,910
get my classes that I want for my tests

00:09:32,589 --> 00:09:39,410
now we get to the real fun bit and

00:09:34,910 --> 00:09:41,930
actually writing a unit test now as I

00:09:39,410 --> 00:09:44,690
said we defined the test suite to be in

00:09:41,930 --> 00:09:47,630
the SRC directory and basically how you

00:09:44,690 --> 00:09:49,399
organize everything in that folder let

00:09:47,630 --> 00:09:54,920
me see if I can like oh that's working

00:09:49,399 --> 00:09:56,899
yes see what I tend to do is keep the

00:09:54,920 --> 00:09:59,089
structure of the directories the same as

00:09:56,899 --> 00:10:01,610
in my project so if in my project I have

00:09:59,089 --> 00:10:04,970
folder models I tend to also have that

00:10:01,610 --> 00:10:06,920
in my unit tests folder now this isn't a

00:10:04,970 --> 00:10:09,140
requirement from PHP unit it will just

00:10:06,920 --> 00:10:12,260
scan all the directories and every file

00:10:09,140 --> 00:10:14,110
ending on test dot PHP it will see as a

00:10:12,260 --> 00:10:17,810
unit test so it will start running that

00:10:14,110 --> 00:10:20,000
but just for my own sake that I can find

00:10:17,810 --> 00:10:22,130
back the tests that belonged to the

00:10:20,000 --> 00:10:24,709
certain pieces of code I try to organize

00:10:22,130 --> 00:10:26,449
it the same way so in my project the

00:10:24,709 --> 00:10:28,190
folder is called Harry

00:10:26,449 --> 00:10:29,779
Oh Harry is my nickname right I mean my

00:10:28,190 --> 00:10:34,310
first name is Harry so it sounds the

00:10:29,779 --> 00:10:36,170
same in yeah and then there I have a

00:10:34,310 --> 00:10:37,970
folder called model and there and I have

00:10:36,170 --> 00:10:45,649
my model classes so I do the same in my

00:10:37,970 --> 00:10:47,569
unit tests so if I I'm going to add a

00:10:45,649 --> 00:10:51,069
test here because my file was named

00:10:47,569 --> 00:10:56,389
simple so I'm just going to call this

00:10:51,069 --> 00:10:59,809
simple visitor simple test

00:10:56,389 --> 00:11:03,769
there we are and we start typing our

00:10:59,809 --> 00:11:06,670
tests I'm not cheating by looking at

00:11:03,769 --> 00:11:06,670
this paper at all

00:11:07,480 --> 00:11:13,489
so I create a class and I extended from

00:11:10,970 --> 00:11:17,149
PHP unit framework test case now you can

00:11:13,489 --> 00:11:19,149
also put like a class in between there

00:11:17,149 --> 00:11:21,079
where you have like like logic

00:11:19,149 --> 00:11:22,549
specifically for your project or

00:11:21,079 --> 00:11:25,759
whatever in this case I'm just going for

00:11:22,549 --> 00:11:27,949
the direct inheritance from from 50

00:11:25,759 --> 00:11:36,319
units framework test case and I'm going

00:11:27,949 --> 00:11:39,019
to write our tests so public best double

00:11:36,319 --> 00:11:40,579
PHP unit will start looking for methods

00:11:39,019 --> 00:11:46,749
starting with the word best and we'll

00:11:40,579 --> 00:11:54,679
execute every one of them as a test so I

00:11:46,749 --> 00:12:01,100
already regret using namespaces the

00:11:54,679 --> 00:12:03,439
result is simple object double - so what

00:12:01,100 --> 00:12:05,929
I'm doing here is I create a new object

00:12:03,439 --> 00:12:08,389
of the class I wanted to test the the

00:12:05,929 --> 00:12:10,129
word method is name right and I'm simply

00:12:08,389 --> 00:12:12,649
calling the method so I'm simply calling

00:12:10,129 --> 00:12:14,269
double - now all we need is to validate

00:12:12,649 --> 00:12:17,029
that the result that we're getting back

00:12:14,269 --> 00:12:23,329
is actually makes sense so we say this

00:12:17,029 --> 00:12:26,089
assert equals it first has expected so

00:12:23,329 --> 00:12:28,879
the expected result where will we use 2

00:12:26,089 --> 00:12:31,699
as an input so I expect double 2 before

00:12:28,879 --> 00:12:35,720
and then we have the actual value so we

00:12:31,699 --> 00:12:37,519
say result then I can add another line

00:12:35,720 --> 00:12:39,290
to it which is the message which will be

00:12:37,519 --> 00:12:43,549
shown if something is wrong with it so

00:12:39,290 --> 00:12:50,779
we can say we expect the double value of

00:12:43,549 --> 00:12:57,619
that's interesting the double value of 2

00:12:50,779 --> 00:12:59,770
to be 4 and that's it now if I can run

00:12:57,619 --> 00:13:04,970
this

00:12:59,770 --> 00:13:07,100
so I go to my unit tests directory this

00:13:04,970 --> 00:13:11,000
is from a booster permit which be unit

00:13:07,100 --> 00:13:12,950
of XML all right if I would now run PHP

00:13:11,000 --> 00:13:14,810
unit just like that I would run all the

00:13:12,950 --> 00:13:16,790
best cases but there are already some

00:13:14,810 --> 00:13:19,040
test cases in that for later on so for

00:13:16,790 --> 00:13:21,530
now I just want to use run the one I

00:13:19,040 --> 00:13:24,440
just wrote so it can also provide it

00:13:21,530 --> 00:13:27,590
with a path so I can say run this unit

00:13:24,440 --> 00:13:28,700
test and when I run it we see a little

00:13:27,590 --> 00:13:31,280
dot over there

00:13:28,700 --> 00:13:34,010
it means pass so for every tests that's

00:13:31,280 --> 00:13:35,180
passed a dot will show up the reason

00:13:34,010 --> 00:13:37,640
being that if you have like a hundred

00:13:35,180 --> 00:13:39,350
250 unit tests you don't want it to be

00:13:37,640 --> 00:13:41,600
too verbose you don't care about

00:13:39,350 --> 00:13:43,780
everything's that passing only when it

00:13:41,600 --> 00:13:47,840
fails you you want some more information

00:13:43,780 --> 00:13:51,140
so just to prove that this is working I

00:13:47,840 --> 00:13:52,970
will now make a mistake you know later

00:13:51,140 --> 00:13:54,620
on somebody else come and now this isn't

00:13:52,970 --> 00:13:57,820
right this isn't the bullets should be

00:13:54,620 --> 00:14:01,040
like this that's the way how we do this

00:13:57,820 --> 00:14:05,900
if we now we're in our unit test let me

00:14:01,040 --> 00:14:09,230
just clear this we have a failure and we

00:14:05,900 --> 00:14:11,750
see that first our own message so it

00:14:09,230 --> 00:14:13,730
says we expect a double value of two two

00:14:11,750 --> 00:14:16,250
before and then we get the message that

00:14:13,730 --> 00:14:18,110
PHP unit automatically generates for us

00:14:16,250 --> 00:14:22,420
so it says filth asserting that three

00:14:18,110 --> 00:14:24,950
matches the expected for so in this case

00:14:22,420 --> 00:14:26,690
we tested the method right well that's

00:14:24,950 --> 00:14:31,580
basically all there's two unit testing

00:14:26,690 --> 00:14:34,310
so thank you for coming you can add more

00:14:31,580 --> 00:14:35,960
tests methods in here right so as many

00:14:34,310 --> 00:14:38,620
methods as you want everything that

00:14:35,960 --> 00:14:41,390
starts with tests will be executed and

00:14:38,620 --> 00:14:46,600
there are two special methods UK you

00:14:41,390 --> 00:14:50,270
have the methods public function set up

00:14:46,600 --> 00:14:53,060
which you can override and as a public

00:14:50,270 --> 00:14:56,270
function tear down that you can override

00:14:53,060 --> 00:14:59,150
and what these will do is they will get

00:14:56,270 --> 00:15:01,940
executed set up will be executed before

00:14:59,150 --> 00:15:04,370
every test and teardown will be called

00:15:01,940 --> 00:15:06,260
after every test so if you have like

00:15:04,370 --> 00:15:08,900
four tests in here it will always first

00:15:06,260 --> 00:15:11,850
run setup then the test then tear down

00:15:08,900 --> 00:15:14,699
the setup then the next test and so on

00:15:11,850 --> 00:15:17,339
so you can use this to like set up an

00:15:14,699 --> 00:15:18,750
object test it in a certain way set

00:15:17,339 --> 00:15:21,180
everything back the way it was created

00:15:18,750 --> 00:15:24,180
again run some other tests on it and so

00:15:21,180 --> 00:15:27,300
on in this case I'm not really going

00:15:24,180 --> 00:15:31,440
into that because it's more useful for

00:15:27,300 --> 00:15:33,440
really somewhat bigger test cases but

00:15:31,440 --> 00:15:36,600
it's useful to know that they're there

00:15:33,440 --> 00:15:38,880
someday you'll be needing them and then

00:15:36,600 --> 00:15:44,009
you'll be happy that they're there so

00:15:38,880 --> 00:15:45,240
just keep those in mind so testing this

00:15:44,009 --> 00:15:48,089
was easy right

00:15:45,240 --> 00:15:49,970
yeh I mean anyone here who wouldn't be

00:15:48,089 --> 00:15:54,089
able to write the test that I just wrote

00:15:49,970 --> 00:15:55,740
know write it in it's just a couple of

00:15:54,089 --> 00:15:58,199
lines you call a message objectives

00:15:55,740 --> 00:16:00,420
double correct but the problem is our

00:15:58,199 --> 00:16:03,149
code doesn't look like this our code

00:16:00,420 --> 00:16:04,980
looks like this right and it's a lot

00:16:03,149 --> 00:16:07,019
harder to test and this is I think where

00:16:04,980 --> 00:16:08,579
a lot of people stop bothering you know

00:16:07,019 --> 00:16:10,170
I mean to go back home when they start

00:16:08,579 --> 00:16:12,690
writing unit tests and they say well I

00:16:10,170 --> 00:16:14,850
don't know I can call this method but

00:16:12,690 --> 00:16:16,500
it's doing stuff to the database it's

00:16:14,850 --> 00:16:19,680
emailing my mother I don't know what

00:16:16,500 --> 00:16:21,480
it's all doing but I'm not going to call

00:16:19,680 --> 00:16:25,319
this just from a command line script you

00:16:21,480 --> 00:16:27,240
know so unit testing is hard rule and

00:16:25,319 --> 00:16:31,199
people stop and they stop caring about

00:16:27,240 --> 00:16:33,899
that so we now know how to write simple

00:16:31,199 --> 00:16:36,149
unit tests check but how do we write

00:16:33,899 --> 00:16:40,949
more complex unit tests for real-life

00:16:36,149 --> 00:16:42,660
code well basically it's the same but it

00:16:40,949 --> 00:16:46,880
comes all about writing testable code

00:16:42,660 --> 00:16:49,829
and making the code that you just saw

00:16:46,880 --> 00:16:51,300
easier to test so of course in the first

00:16:49,829 --> 00:16:53,310
place you would break it down into

00:16:51,300 --> 00:16:55,620
smaller pieces because smaller methods

00:16:53,310 --> 00:16:58,939
will be easier to call and test and to

00:16:55,620 --> 00:16:58,939
see if they're doing what they are doing

00:16:59,029 --> 00:17:03,209
but it's also important to isolate your

00:17:01,500 --> 00:17:06,600
code and this is really the essence of

00:17:03,209 --> 00:17:08,039
unit testing imagine we have model

00:17:06,600 --> 00:17:12,059
something like this you know we have two

00:17:08,039 --> 00:17:13,919
controllers calling a model and this

00:17:12,059 --> 00:17:16,949
model is doing some stuff that involves

00:17:13,919 --> 00:17:22,079
a database table and some Mahler object

00:17:16,949 --> 00:17:24,490
that probably sends emails the problem

00:17:22,079 --> 00:17:26,570
is if we

00:17:24,490 --> 00:17:28,070
imagine we want to test something in

00:17:26,570 --> 00:17:30,590
this person model that's in the middle

00:17:28,070 --> 00:17:32,180
of the screen so what we do we don't

00:17:30,590 --> 00:17:34,700
call them from the controller but we

00:17:32,180 --> 00:17:38,090
have our test case immediately how

00:17:34,700 --> 00:17:40,100
various calling our model this is what

00:17:38,090 --> 00:17:42,290
we just saw in the simple test right we

00:17:40,100 --> 00:17:43,880
simply called our object from the test

00:17:42,290 --> 00:17:46,940
instead from anywhere else

00:17:43,880 --> 00:17:49,370
but if we're doing this we still are

00:17:46,940 --> 00:17:52,700
hitting all those objects that are below

00:17:49,370 --> 00:17:55,010
there all those classes are getting cold

00:17:52,700 --> 00:17:57,890
as well and if here is there is a call

00:17:55,010 --> 00:17:59,120
to email my mother in there it will be

00:17:57,890 --> 00:18:03,320
called as you will get an email every

00:17:59,120 --> 00:18:06,590
time I run unit tests so what we should

00:18:03,320 --> 00:18:10,970
do is replace all those glasses around

00:18:06,590 --> 00:18:13,310
it that aren't that we don't want to

00:18:10,970 --> 00:18:16,910
test we aren't interested in in this

00:18:13,310 --> 00:18:20,660
test case so we replace the mailer by a

00:18:16,910 --> 00:18:22,760
mock mailer and a mock object is a copy

00:18:20,660 --> 00:18:25,610
of the mailer object so it's basically

00:18:22,760 --> 00:18:26,960
the same object except for all the logic

00:18:25,610 --> 00:18:28,940
has been stripped out so it has the same

00:18:26,960 --> 00:18:30,950
API it has the same methods but when we

00:18:28,940 --> 00:18:33,620
call them it simply does nothing and

00:18:30,950 --> 00:18:36,620
returns a predictable value that we can

00:18:33,620 --> 00:18:38,510
all like understand so for example if we

00:18:36,620 --> 00:18:40,580
have a method send mail we can replace

00:18:38,510 --> 00:18:43,520
that by something that simply says

00:18:40,580 --> 00:18:46,130
return true because we're not interested

00:18:43,520 --> 00:18:48,050
in this mailer object right now we're

00:18:46,130 --> 00:18:49,610
testing our model and we want to know if

00:18:48,050 --> 00:18:53,690
our person model is doing what it should

00:18:49,610 --> 00:18:56,240
be doing and in this case we can say

00:18:53,690 --> 00:18:58,370
does the person model response in the

00:18:56,240 --> 00:19:00,890
right way if the mail of send mail

00:18:58,370 --> 00:19:02,930
function would return true right it's a

00:19:00,890 --> 00:19:05,530
given so we can it may be in another

00:19:02,930 --> 00:19:11,390
test we want to check does it response

00:19:05,530 --> 00:19:12,650
good as well if it returns false see

00:19:11,390 --> 00:19:14,690
that's basically what it comes down to

00:19:12,650 --> 00:19:16,490
and we do the same for all the other

00:19:14,690 --> 00:19:18,470
objects and now we have our model

00:19:16,490 --> 00:19:20,660
isolated and we can test the crap out of

00:19:18,470 --> 00:19:22,430
this and we don't have to worry that all

00:19:20,660 --> 00:19:24,110
other things are going on we can just

00:19:22,430 --> 00:19:26,030
call it over and over again and see if

00:19:24,110 --> 00:19:27,770
it's working that doesn't mean that we

00:19:26,030 --> 00:19:29,960
aren't going to write any tests for our

00:19:27,770 --> 00:19:32,180
mailing object that might be another

00:19:29,960 --> 00:19:34,220
test and then we do the same but for the

00:19:32,180 --> 00:19:35,460
mailer object and then we would get rid

00:19:34,220 --> 00:19:37,470
of the person model and what

00:19:35,460 --> 00:19:40,679
for the major object isn't full of thin

00:19:37,470 --> 00:19:44,250
and we would just try to isolate that

00:19:40,679 --> 00:19:53,789
code and test that so how do we do that

00:19:44,250 --> 00:19:59,370
in practice let's go back to the code so

00:19:53,789 --> 00:20:01,500
I've got a class here which is my user

00:19:59,370 --> 00:20:03,600
model it takes a first name in the last

00:20:01,500 --> 00:20:06,360
name and I'm interesting now in testing

00:20:03,600 --> 00:20:09,630
this method I want to know if this send

00:20:06,360 --> 00:20:12,270
message received mail method is really

00:20:09,630 --> 00:20:12,960
doing what it's supposed to do so it

00:20:12,270 --> 00:20:15,600
gets a mailer

00:20:12,960 --> 00:20:18,539
object it combines the name or something

00:20:15,600 --> 00:20:21,600
it says then mailer sent and that's it

00:20:18,539 --> 00:20:28,080
now of course I could just write tests

00:20:21,600 --> 00:20:30,419
for that like this you can do this to

00:20:28,080 --> 00:20:34,429
have PHP unit skip tests but I'm now

00:20:30,419 --> 00:20:37,799
stopping to skip it so there we go

00:20:34,429 --> 00:20:39,630
so I can say user model is new user

00:20:37,799 --> 00:20:43,950
model with some parameters you can't see

00:20:39,630 --> 00:20:45,929
them but believe me they're there then I

00:20:43,950 --> 00:20:47,190
call the send message received mail with

00:20:45,929 --> 00:20:49,500
some parameters and then I say this

00:20:47,190 --> 00:20:51,929
assert true result I want to check if

00:20:49,500 --> 00:20:53,460
the result is true that it returns now

00:20:51,929 --> 00:20:55,260
if I would do this it would actually

00:20:53,460 --> 00:20:57,360
start sending out emails right because

00:20:55,260 --> 00:20:59,970
that's what the method does it sends out

00:20:57,360 --> 00:21:02,820
emails to the person that I provided it

00:20:59,970 --> 00:21:05,460
with now the classic way to solve this

00:21:02,820 --> 00:21:07,080
and I don't recommend that you should do

00:21:05,460 --> 00:21:10,350
it like this but I like to show it

00:21:07,080 --> 00:21:11,929
because it's really the way it's really

00:21:10,350 --> 00:21:15,480
what's happening under the bonnet so it

00:21:11,929 --> 00:21:19,110
will help you understand what PHP unit

00:21:15,480 --> 00:21:23,070
is doing later on in here oldie days we

00:21:19,110 --> 00:21:28,490
would make another class we say class

00:21:23,070 --> 00:21:33,480
mock mailer extends bloody namespaces

00:21:28,490 --> 00:21:36,870
hairy lip

00:21:33,480 --> 00:21:38,970
mailer there we go and then we would

00:21:36,870 --> 00:21:42,650
simply overwrite the existing method so

00:21:38,970 --> 00:21:46,980
we'd say send and it takes an email and

00:21:42,650 --> 00:21:51,840
name and a subject and a body and I

00:21:46,980 --> 00:21:54,870
would simply say return true now there's

00:21:51,840 --> 00:21:56,730
only one thing we have to do and that's

00:21:54,870 --> 00:21:59,190
making sure that the user model is now

00:21:56,730 --> 00:21:59,790
using this mailer class instead of its

00:21:59,190 --> 00:22:04,650
default

00:21:59,790 --> 00:22:09,210
luckily hint my user model has a method

00:22:04,650 --> 00:22:11,940
called set mailer that I can provide

00:22:09,210 --> 00:22:15,420
with a mailer object and now all of a

00:22:11,940 --> 00:22:16,560
sudden it isn't using the send method

00:22:15,420 --> 00:22:18,570
anymore

00:22:16,560 --> 00:22:25,380
so if we can go back to the original

00:22:18,570 --> 00:22:27,690
code this mail object is now my mock

00:22:25,380 --> 00:22:29,370
mailer right so the send method isn't

00:22:27,690 --> 00:22:30,990
actually going to send anything it's

00:22:29,370 --> 00:22:33,480
simply going to return true and I can

00:22:30,990 --> 00:22:37,890
now test this method without worrying

00:22:33,480 --> 00:22:42,540
that anything bad is going to happen so

00:22:37,890 --> 00:22:44,690
that's how we use to do it shall we run

00:22:42,540 --> 00:22:51,960
this just to see if it's running

00:22:44,690 --> 00:22:54,980
let's okay I'll just run PHP unit you

00:22:51,960 --> 00:22:57,960
will see some Wow

00:22:54,980 --> 00:22:59,490
so the SS are skipped tests those are

00:22:57,960 --> 00:23:01,290
that I have marked those as skipped

00:22:59,490 --> 00:23:03,300
because I haven't gotten around to

00:23:01,290 --> 00:23:05,160
showing them to you yet so it just has

00:23:03,300 --> 00:23:06,990
skipped in there apparently I made an

00:23:05,160 --> 00:23:10,590
error somewhere this is the part where

00:23:06,990 --> 00:23:15,710
things blow up in my face let's see if I

00:23:10,590 --> 00:23:15,710
can figure out oh yes of course

00:23:21,440 --> 00:23:25,730
right I forgot to instead it's pretty

00:23:23,870 --> 00:23:28,850
important that you get an object from

00:23:25,730 --> 00:23:32,600
your class let's call it again yay

00:23:28,850 --> 00:23:37,310
we're good so now I have first I had a

00:23:32,600 --> 00:23:39,230
error now we see it's passing so yeah we

00:23:37,310 --> 00:23:41,720
know this is working now if for some

00:23:39,230 --> 00:23:50,390
reason this wouldn't return true anymore

00:23:41,720 --> 00:23:52,670
of course it would now fail okay failed

00:23:50,390 --> 00:23:55,060
it expected true to be returned but it

00:23:52,670 --> 00:23:55,060
is false

00:23:56,770 --> 00:24:01,040
now there is a problem with this test

00:23:59,030 --> 00:24:02,570
and that is that it isn't really a very

00:24:01,040 --> 00:24:04,460
useful test I mean we're actually

00:24:02,570 --> 00:24:08,540
testing nothing here except for that

00:24:04,460 --> 00:24:11,510
method is return true if we wanted to do

00:24:08,540 --> 00:24:15,380
something more with that out sorry I'll

00:24:11,510 --> 00:24:18,170
get to that later on so this is how we

00:24:15,380 --> 00:24:20,210
would use to do that but luckily PHP PHP

00:24:18,170 --> 00:24:21,620
unit has an interface to do this for us

00:24:20,210 --> 00:24:25,400
because you can imagine with all these

00:24:21,620 --> 00:24:27,410
mock classes it can they can get quite a

00:24:25,400 --> 00:24:31,040
lot of them for different test cases for

00:24:27,410 --> 00:24:38,380
different code etc so what we can do in

00:24:31,040 --> 00:24:41,810
PHP unit is get rid of all this and

00:24:38,380 --> 00:24:49,640
instead of creating my look that we can

00:24:41,810 --> 00:24:54,080
say somewhere next page we can say this

00:24:49,640 --> 00:24:55,970
get mock the original class name so

00:24:54,080 --> 00:24:59,450
that's because I'm in the using

00:24:55,970 --> 00:25:01,580
namespace is this whole story and then I

00:24:59,450 --> 00:25:03,620
can pass it with an array of methods we

00:25:01,580 --> 00:25:05,870
want to mock so in this case I say I

00:25:03,620 --> 00:25:09,590
want a mock object of my mailer class

00:25:05,870 --> 00:25:11,750
and I want the send method to be

00:25:09,590 --> 00:25:14,180
replaced by something before it you know

00:25:11,750 --> 00:25:15,830
is not doing anything if you don't pass

00:25:14,180 --> 00:25:18,410
the second parameter so you don't pass

00:25:15,830 --> 00:25:20,120
any arguments to that it will mock all

00:25:18,410 --> 00:25:26,750
the methods in the class so all the

00:25:20,120 --> 00:25:30,500
methods will return void then I can

00:25:26,750 --> 00:25:32,510
actually mock our methods because our

00:25:30,500 --> 00:25:35,080
method should return true right we were

00:25:32,510 --> 00:25:42,350
expecting that so we can say

00:25:35,080 --> 00:25:44,660
mahler expects this once so this says we

00:25:42,350 --> 00:25:46,970
expect the mailer to be called one time

00:25:44,660 --> 00:25:53,020
this method to be called one time only

00:25:46,970 --> 00:25:55,730
the method is called send and it will

00:25:53,020 --> 00:25:59,440
this is a syntax you have to get used to

00:25:55,730 --> 00:26:01,430
but after a while it feels kind of

00:25:59,440 --> 00:26:04,070
fluent you know I mean it's just like

00:26:01,430 --> 00:26:09,650
like you can almost read this it's just

00:26:04,070 --> 00:26:14,150
like English so there we are and in this

00:26:09,650 --> 00:26:17,030
case we have an object created and we

00:26:14,150 --> 00:26:19,880
have a method sent that will return a

00:26:17,030 --> 00:26:21,650
value true when we run it now just to

00:26:19,880 --> 00:26:27,740
prove this I'll run the unit test again

00:26:21,650 --> 00:26:34,550
let's hope this works that it was hairy

00:26:27,740 --> 00:26:38,060
model and it was cold user test that it

00:26:34,550 --> 00:26:39,830
passes it's working now of course this

00:26:38,060 --> 00:26:41,690
isn't a really useful test because we're

00:26:39,830 --> 00:26:44,630
just testing if this is returning true

00:26:41,690 --> 00:26:47,540
which is maybe not really that relevant

00:26:44,630 --> 00:26:49,730
to know but what might be relevant for

00:26:47,540 --> 00:26:52,790
example if this first parameter is

00:26:49,730 --> 00:26:56,240
something we were expecting so what we

00:26:52,790 --> 00:27:01,370
could do we can extend this with with

00:26:56,240 --> 00:27:03,500
and we can say this equal to

00:27:01,370 --> 00:27:07,180
and then whatever email address we pass

00:27:03,500 --> 00:27:11,120
to it so that's John Doe at my domain

00:27:07,180 --> 00:27:15,590
and you can define a second one after

00:27:11,120 --> 00:27:17,330
that and so on so now you can check if

00:27:15,590 --> 00:27:22,850
the send method is called with the right

00:27:17,330 --> 00:27:25,730
parameters so one of the problems with

00:27:22,850 --> 00:27:28,160
that or if you would try this on your

00:27:25,730 --> 00:27:31,420
own code is that you might find that you

00:27:28,160 --> 00:27:36,050
cannot assign this mock object to your

00:27:31,420 --> 00:27:40,850
model because it's it's created in the

00:27:36,050 --> 00:27:44,300
model itself right so if for example I

00:27:40,850 --> 00:27:46,850
have code like this and I'm creating a

00:27:44,300 --> 00:27:47,960
talk in my constructor this is a really

00:27:46,850 --> 00:27:49,610
weird example

00:27:47,960 --> 00:27:53,120
it is because I'm passing like my

00:27:49,610 --> 00:27:54,800
speaker's name and my talk title to the

00:27:53,120 --> 00:27:56,750
same objects I don't know what kind of

00:27:54,800 --> 00:27:58,940
object this is but the problem here is

00:27:56,750 --> 00:28:00,710
the new keyword right as soon as you see

00:27:58,940 --> 00:28:03,290
a new keyword you know one thing and

00:28:00,710 --> 00:28:06,830
that's those objects are tightly coupled

00:28:03,290 --> 00:28:11,750
as we can never have a speaker now

00:28:06,830 --> 00:28:13,160
without that exact talk object and we

00:28:11,750 --> 00:28:15,080
don't want that in this case we just

00:28:13,160 --> 00:28:18,260
want to test the logic in our speaker

00:28:15,080 --> 00:28:21,980
class and not in our talk class because

00:28:18,260 --> 00:28:24,530
that what I explained earlier so in

00:28:21,980 --> 00:28:28,310
order to do that as you should rewrite

00:28:24,530 --> 00:28:31,760
your code so that it does accept objects

00:28:28,310 --> 00:28:34,100
to be set from outside so it doesn't

00:28:31,760 --> 00:28:35,960
need to be hard this is already called

00:28:34,100 --> 00:28:38,960
dependency injection although a really

00:28:35,960 --> 00:28:41,210
like simple form of it probably a

00:28:38,960 --> 00:28:44,180
constructor injection where you can

00:28:41,210 --> 00:28:47,180
actually pass the talk object to the

00:28:44,180 --> 00:28:49,700
object in the food constructor so now we

00:28:47,180 --> 00:28:51,950
can suddenly write a test for it right

00:28:49,700 --> 00:28:54,350
we can make a mock talk object and

00:28:51,950 --> 00:28:57,830
assign that to our speaker and then

00:28:54,350 --> 00:28:59,300
we're good to go again or you can use a

00:28:57,830 --> 00:29:03,590
setter of course so you can just have a

00:28:59,300 --> 00:29:06,190
set talk or something like that you can

00:29:03,590 --> 00:29:08,450
even have like nowadays you see like

00:29:06,190 --> 00:29:10,730
dependency injection containers that

00:29:08,450 --> 00:29:13,820
create all kinds of dependencies for you

00:29:10,730 --> 00:29:15,710
so I now still have the same static

00:29:13,820 --> 00:29:17,930
method create a speaker with a talk and

00:29:15,710 --> 00:29:19,550
it will create a talk object for many

00:29:17,930 --> 00:29:22,250
creative speaker objects for me and

00:29:19,550 --> 00:29:24,110
attach them together and nowadays I

00:29:22,250 --> 00:29:29,960
think most modern frameworks have ways

00:29:24,110 --> 00:29:32,930
of implicitly saying which objects are

00:29:29,960 --> 00:29:35,120
connected together through XML files for

00:29:32,930 --> 00:29:38,050
example so you could just define an XML

00:29:35,120 --> 00:29:41,660
file a speaker object has a property

00:29:38,050 --> 00:29:43,570
talk and that would work there are

00:29:41,660 --> 00:29:46,310
several solutions for that

00:29:43,570 --> 00:29:49,100
but anyway it's important that those

00:29:46,310 --> 00:29:50,330
classes whatever you do aren't tightly

00:29:49,100 --> 00:29:52,070
coupled because as soon as they're

00:29:50,330 --> 00:29:53,720
tightly coupled you can test them

00:29:52,070 --> 00:29:55,820
individually anymore you have to test

00:29:53,720 --> 00:29:58,640
them together and then one that you want

00:29:55,820 --> 00:30:00,260
to test the smallest amount of code that

00:29:58,640 --> 00:30:01,580
makes sense without like the whole

00:30:00,260 --> 00:30:08,270
Christmas tree that comes by

00:30:01,580 --> 00:30:14,090
find it so to illustrate that I've got

00:30:08,270 --> 00:30:17,660
another test lined up so imagine we

00:30:14,090 --> 00:30:20,420
would like to test this method here at

00:30:17,660 --> 00:30:21,890
the top get number of fruits for some

00:30:20,420 --> 00:30:23,480
reason we have fruits in our database

00:30:21,890 --> 00:30:26,810
and we don't want to test how many I

00:30:23,480 --> 00:30:30,260
don't know apples we got that's really

00:30:26,810 --> 00:30:31,580
hard to do right because if we would

00:30:30,260 --> 00:30:33,440
call this we wouldn't know what to

00:30:31,580 --> 00:30:35,360
expect because we don't know what's in

00:30:33,440 --> 00:30:37,220
our database so we don't know what it

00:30:35,360 --> 00:30:39,860
will be returning art for apples to

00:30:37,220 --> 00:30:42,650
apples I don't know what to expect was

00:30:39,860 --> 00:30:46,400
there so you would like to replace the

00:30:42,650 --> 00:30:49,280
database query object but in this case

00:30:46,400 --> 00:30:50,900
you can't because it's just created

00:30:49,280 --> 00:30:52,460
there if I call this it's always going

00:30:50,900 --> 00:30:57,250
to create a new database query object

00:30:52,460 --> 00:31:00,650
and it's always going to call that so

00:30:57,250 --> 00:31:02,780
really the reason just how you can solve

00:31:00,650 --> 00:31:06,230
this how I like to solve this like the

00:31:02,780 --> 00:31:08,750
easy way it's just by making something

00:31:06,230 --> 00:31:11,740
like a new database query in together so

00:31:08,750 --> 00:31:19,390
I could say I'll protect that function

00:31:11,740 --> 00:31:19,390
get or create database query

00:31:21,120 --> 00:31:27,900
I know this isn't very fancy but if

00:31:26,280 --> 00:31:29,580
you're just like in the middle of coding

00:31:27,900 --> 00:31:31,470
and you just want to test it it gets the

00:31:29,580 --> 00:31:35,610
job done right I didn't really change

00:31:31,470 --> 00:31:37,770
anything except for now I can maybe mock

00:31:35,610 --> 00:31:40,380
this method and have it returned my mock

00:31:37,770 --> 00:31:43,380
database query or even better if we're

00:31:40,380 --> 00:31:46,400
here anyway we could say protected

00:31:43,380 --> 00:31:46,400
debate query

00:31:54,050 --> 00:31:56,620
huh

00:31:57,250 --> 00:32:02,940
well you get the point right return

00:32:08,360 --> 00:32:12,380
this is something that already would

00:32:09,980 --> 00:32:15,200
work right now from my test I could just

00:32:12,380 --> 00:32:17,030
create a mock object for my database

00:32:15,200 --> 00:32:18,559
query assign that to my object and then

00:32:17,030 --> 00:32:20,600
that would be used instead of the real

00:32:18,559 --> 00:32:23,299
database connection and then I could

00:32:20,600 --> 00:32:26,330
mock like things like set table set like

00:32:23,299 --> 00:32:31,820
get results etc and run the test just

00:32:26,330 --> 00:32:38,330
like I did with the previous test does

00:32:31,820 --> 00:32:40,460
that make sense everybody sleep good so

00:32:38,330 --> 00:32:42,500
when it comes down to writing testable

00:32:40,460 --> 00:32:45,200
code it's important to write small

00:32:42,500 --> 00:32:49,490
methods to keep the complexity low and

00:32:45,200 --> 00:32:51,559
to have no tight coupling and that's not

00:32:49,490 --> 00:32:53,679
actually a bad thing right I mean when

00:32:51,559 --> 00:32:57,169
you think about it that's actually also

00:32:53,679 --> 00:32:59,270
those are all like solutions for code

00:32:57,169 --> 00:33:04,730
smells and stuff like that

00:32:59,270 --> 00:33:06,230
so this really are good things and so it

00:33:04,730 --> 00:33:08,480
isn't a bad thing that you have to

00:33:06,230 --> 00:33:10,970
rewrite maybe some of your legacy codes

00:33:08,480 --> 00:33:13,010
to make it festival because effect it

00:33:10,970 --> 00:33:15,950
will probably make your code actually

00:33:13,010 --> 00:33:17,720
better and easier to understand and less

00:33:15,950 --> 00:33:19,220
tightly coupled so you could reuse it in

00:33:17,720 --> 00:33:23,780
other places maybe and stuff like that

00:33:19,220 --> 00:33:27,880
so that's a good thing so writing

00:33:23,780 --> 00:33:32,150
testable code check we've seen that

00:33:27,880 --> 00:33:33,650
what's left is some voodoo and stuff you

00:33:32,150 --> 00:33:37,130
probably shouldn't do but there's damn

00:33:33,650 --> 00:33:39,590
handy and the first of all I got from a

00:33:37,130 --> 00:33:43,220
block from Sebastian Bergman it's called

00:33:39,590 --> 00:33:47,900
testing your privates when attended no

00:33:43,220 --> 00:33:49,790
doubt and it's basically about calling

00:33:47,900 --> 00:33:53,360
protected method methods and private

00:33:49,790 --> 00:33:57,640
methods to test them so what he's

00:33:53,360 --> 00:34:00,080
basically doing if we get to our fruit

00:33:57,640 --> 00:34:03,669
objects again how here we are I just

00:34:00,080 --> 00:34:08,480
referred this for now la la la blah blah

00:34:03,669 --> 00:34:10,750
I'm mark this as skipped for no never

00:34:08,480 --> 00:34:10,750
mind

00:34:11,410 --> 00:34:15,710
we have a method here get the number of

00:34:13,970 --> 00:34:18,950
fruits bicolor either and it's very

00:34:15,710 --> 00:34:20,450
inefficient bad code I know but I could

00:34:18,950 --> 00:34:22,940
come up with a better example at that

00:34:20,450 --> 00:34:25,490
time so we want to know all the yellow

00:34:22,940 --> 00:34:26,750
fruits so we're doing all kinds of

00:34:25,490 --> 00:34:28,310
things and fetching stuff from the

00:34:26,750 --> 00:34:30,650
database and then looping through it and

00:34:28,310 --> 00:34:34,310
adding a counter etc and here we're

00:34:30,650 --> 00:34:36,200
calling a method this get fruit colors

00:34:34,310 --> 00:34:38,210
and we passed the color name so we

00:34:36,200 --> 00:34:40,130
apparently have a method that's getting

00:34:38,210 --> 00:34:42,860
the color and in this case we're

00:34:40,130 --> 00:34:44,960
actually only interested in testing that

00:34:42,860 --> 00:34:54,260
method so we're interesting in testing

00:34:44,960 --> 00:34:55,880
this get fruit color okay so normally

00:34:54,260 --> 00:34:58,280
you wouldn't be able to test this right

00:34:55,880 --> 00:34:59,900
because it's protected and if I created

00:34:58,280 --> 00:35:02,240
an instance of the object I wouldn't be

00:34:59,900 --> 00:35:05,990
able to call it there is a trick however

00:35:02,240 --> 00:35:13,520
I don't say it's nice there is a turret

00:35:05,990 --> 00:35:17,780
trick and it's this so you can use the

00:35:13,520 --> 00:35:20,810
reflection logic of PHP to get a

00:35:17,780 --> 00:35:25,280
reflection method object you can say set

00:35:20,810 --> 00:35:29,240
set accessible is true then get the

00:35:25,280 --> 00:35:30,560
color by by calling the method so in

00:35:29,240 --> 00:35:32,630
this case I'm calling the method get

00:35:30,560 --> 00:35:37,580
fruit color and I'm passing it a

00:35:32,630 --> 00:35:40,010
variable banana and then we can assert

00:35:37,580 --> 00:35:43,640
it so we can say okay we expect bananas

00:35:40,010 --> 00:35:45,890
to be yellow now of course I'm sure this

00:35:43,640 --> 00:35:47,540
is going a bit faster there's a link in

00:35:45,890 --> 00:35:49,460
the slice to the block of Sebastian

00:35:47,540 --> 00:35:52,280
where he's explaining this in more

00:35:49,460 --> 00:35:55,160
detail and why you can reuse it from and

00:35:52,280 --> 00:36:00,170
this is actually working so just to show

00:35:55,160 --> 00:36:02,650
this one more time there it is I'm

00:36:00,170 --> 00:36:06,740
running the wrong one but from the mall

00:36:02,650 --> 00:36:09,410
get Luca and we found the bug ha unit

00:36:06,740 --> 00:36:12,470
test leverage something we expected

00:36:09,410 --> 00:36:15,010
planets to be yellow but blue isn't

00:36:12,470 --> 00:36:17,960
equal to yellow so as you will noticed

00:36:15,010 --> 00:36:19,190
it says blue here and that's incorrect

00:36:17,960 --> 00:36:25,069
right so yeah

00:36:19,190 --> 00:36:30,619
low - try it again yep we're good

00:36:25,069 --> 00:36:33,380
everything's passed okay so we fixed it

00:36:30,619 --> 00:36:35,119
fix the bug as well there is a side note

00:36:33,380 --> 00:36:36,710
to this however and it's a whole story

00:36:35,119 --> 00:36:38,780
I'm not going to read it for you but

00:36:36,710 --> 00:36:41,420
this is a quote from Sebastian Bergman

00:36:38,780 --> 00:36:42,980
who's quoted quoting they've Thomas in

00:36:41,420 --> 00:36:45,920
handy hunt

00:36:42,980 --> 00:36:49,849
but basically what they're saying is and

00:36:45,920 --> 00:36:52,940
I really like the last line where that

00:36:49,849 --> 00:36:55,970
it might be a warning sign if you find

00:36:52,940 --> 00:36:58,190
the need that if you find the need to

00:36:55,970 --> 00:37:00,349
test private or protected method it may

00:36:58,190 --> 00:37:01,760
very well be a warning sign that there's

00:37:00,349 --> 00:37:03,800
actually another class in that

00:37:01,760 --> 00:37:05,540
struggling to get out as they now call

00:37:03,800 --> 00:37:08,119
it here so there's probably something

00:37:05,540 --> 00:37:10,119
wrong with the way you set up your

00:37:08,119 --> 00:37:12,770
object and the way your code works

00:37:10,119 --> 00:37:17,270
however I found on multiple occasions is

00:37:12,770 --> 00:37:18,560
that this is very handy so yeah if you

00:37:17,270 --> 00:37:19,849
want to know more about it that sort of

00:37:18,560 --> 00:37:21,589
a little link here on the slide so I'll

00:37:19,849 --> 00:37:25,160
put them up on joined in later on you

00:37:21,589 --> 00:37:27,440
can read all about it a question I often

00:37:25,160 --> 00:37:29,060
get is how do I test the database people

00:37:27,440 --> 00:37:32,150
ask me you know because they are like

00:37:29,060 --> 00:37:34,369
testing the code and they won't worry

00:37:32,150 --> 00:37:39,020
how to do that well short answer is you

00:37:34,369 --> 00:37:41,630
don't in my humble opinion simply

00:37:39,020 --> 00:37:43,609
because you're isolating every object

00:37:41,630 --> 00:37:45,800
and you're testing those it doesn't make

00:37:43,609 --> 00:37:47,990
any sense to like have a test database

00:37:45,800 --> 00:37:50,839
and get data from there put data in

00:37:47,990 --> 00:37:53,720
there because your logic actually

00:37:50,839 --> 00:37:56,660
shouldn't actually any time get to that

00:37:53,720 --> 00:38:00,099
point where they get to the database it

00:37:56,660 --> 00:38:02,900
should be abstracted before that however

00:38:00,099 --> 00:38:04,609
apparently there are some situations

00:38:02,900 --> 00:38:07,130
where you can't really avoid it like

00:38:04,609 --> 00:38:09,440
when you're using some software or

00:38:07,130 --> 00:38:11,150
whatever that will just randomly start

00:38:09,440 --> 00:38:14,119
getting stuff from the database without

00:38:11,150 --> 00:38:17,170
asking and there are solutions like

00:38:14,119 --> 00:38:19,790
setting up an empty database and then

00:38:17,170 --> 00:38:22,040
inserting it with predefined data sets

00:38:19,790 --> 00:38:23,599
and running tests on that so getting the

00:38:22,040 --> 00:38:24,109
data and seeing if it's behaving

00:38:23,599 --> 00:38:26,660
correctly

00:38:24,109 --> 00:38:29,599
luckily I've never been in the position

00:38:26,660 --> 00:38:31,430
that I needed to use this so I don't

00:38:29,599 --> 00:38:32,420
know too much about it but if you want

00:38:31,430 --> 00:38:35,360
to read more about it

00:38:32,420 --> 00:38:37,450
you can go to this URL in the manual or

00:38:35,360 --> 00:38:42,230
just go to the menu and click database

00:38:37,450 --> 00:38:44,000
and there you can read more about it so

00:38:42,230 --> 00:38:45,320
that's the Voodoo part of the talk five

00:38:44,000 --> 00:38:47,480
minutes for two chapters left that's

00:38:45,320 --> 00:38:52,100
interesting no it will be fine

00:38:47,480 --> 00:38:56,360
yeah so test-driven development is

00:38:52,100 --> 00:38:59,300
something that's widely regarded as a

00:38:56,360 --> 00:39:01,100
good idea and it basically comes down to

00:38:59,300 --> 00:39:04,340
writing your test before you change your

00:39:01,100 --> 00:39:06,800
code so instead of first writing your

00:39:04,340 --> 00:39:08,930
code and then finally at the end writing

00:39:06,800 --> 00:39:13,940
a test it's a good idea to actually

00:39:08,930 --> 00:39:16,430
start by writing tests so you can do I

00:39:13,940 --> 00:39:18,740
found that the easiest way to start

00:39:16,430 --> 00:39:21,320
doing this is by fixing bugs or by

00:39:18,740 --> 00:39:24,500
changing existing code because it

00:39:21,320 --> 00:39:27,830
basically entails you writing a unit

00:39:24,500 --> 00:39:29,630
test that fails and proves the book so

00:39:27,830 --> 00:39:31,700
that's a problem you know so you write a

00:39:29,630 --> 00:39:35,210
unit test that fails because of that bug

00:39:31,700 --> 00:39:37,250
then you start fixing it and you know

00:39:35,210 --> 00:39:39,710
that it's fixed once the unit tests

00:39:37,250 --> 00:39:42,230
turns out Green now immediately you have

00:39:39,710 --> 00:39:47,390
like a proper unit test that tests your

00:39:42,230 --> 00:39:49,100
code and you can also be sure that the

00:39:47,390 --> 00:39:50,960
book isn't coming back because as soon

00:39:49,100 --> 00:39:53,360
as it comes back the unit test will

00:39:50,960 --> 00:39:55,760
point it out again so it's a good idea

00:39:53,360 --> 00:39:57,410
it's a bit more tricky when writing new

00:39:55,760 --> 00:39:59,300
code especially when you're new to unit

00:39:57,410 --> 00:40:01,880
testing but it is something that you

00:39:59,300 --> 00:40:04,670
could try to do because if you look like

00:40:01,880 --> 00:40:07,040
designing a new class or multiple

00:40:04,670 --> 00:40:09,110
classes and you write your tests before

00:40:07,040 --> 00:40:11,450
you actually write your classes you get

00:40:09,110 --> 00:40:13,370
a really good you're are forced to think

00:40:11,450 --> 00:40:15,280
about how they should work and interact

00:40:13,370 --> 00:40:20,690
and how their interface should look like

00:40:15,280 --> 00:40:23,150
etc so that's a good thing so it isn't

00:40:20,690 --> 00:40:24,800
easy to do test-driven development when

00:40:23,150 --> 00:40:28,610
you're just starting off writing tests

00:40:24,800 --> 00:40:34,820
but try to do it if not directly on the

00:40:28,610 --> 00:40:37,160
long run maybe and then that's the

00:40:34,820 --> 00:40:39,770
question of what to test and I think

00:40:37,160 --> 00:40:41,960
that's different for everybody right I

00:40:39,770 --> 00:40:44,420
mean I'd say important business logic

00:40:41,960 --> 00:40:45,390
stuff that's likely to go wrong complex

00:40:44,420 --> 00:40:47,700
functionality

00:40:45,390 --> 00:40:49,890
in the ideal situation everybody would

00:40:47,700 --> 00:40:52,469
test a hundred percent of their code in

00:40:49,890 --> 00:40:54,869
unit tests all the time but we all know

00:40:52,469 --> 00:40:59,519
that that time are limited on projects

00:40:54,869 --> 00:41:05,369
is of time a project it's often limited

00:40:59,519 --> 00:41:06,900
on projects so it really depends I'd

00:41:05,369 --> 00:41:09,359
always go for the most important

00:41:06,900 --> 00:41:10,950
business logic first right I mean if you

00:41:09,359 --> 00:41:12,420
have a web shop the checkout process is

00:41:10,950 --> 00:41:14,789
probably pretty important in you what

00:41:12,420 --> 00:41:18,390
and cover that some calculations for

00:41:14,789 --> 00:41:21,059
discounts the displaying of some product

00:41:18,390 --> 00:41:23,279
page maybe might be less interesting you

00:41:21,059 --> 00:41:25,890
know maybe not the first thing you write

00:41:23,279 --> 00:41:28,319
unit tests for but maybe later on so

00:41:25,890 --> 00:41:31,170
it's really up to you to decide another

00:41:28,319 --> 00:41:34,979
tool that you could use is look at the

00:41:31,170 --> 00:41:38,869
CREP index I can actually show it if you

00:41:34,979 --> 00:41:42,599
I'm still like glancing in my eye

00:41:38,869 --> 00:41:46,859
corners if I have time what we can do is

00:41:42,599 --> 00:41:49,920
run PHP unit and pass it with a coverage

00:41:46,859 --> 00:41:54,180
HTML parameter so we say ok generate

00:41:49,920 --> 00:41:57,059
some code coverage HTML reporting into

00:41:54,180 --> 00:41:59,549
this directory now it will run our unit

00:41:57,059 --> 00:42:05,130
tests again and it will generate some

00:41:59,549 --> 00:42:06,869
HTML afterwards if we now look at that

00:42:05,130 --> 00:42:11,819
and look at there there's a nice

00:42:06,869 --> 00:42:15,089
bookmark to it there are several things

00:42:11,819 --> 00:42:17,729
going on so in our model we can see what

00:42:15,089 --> 00:42:20,369
code is actually tested so in this case

00:42:17,729 --> 00:42:25,109
we see okay this is hit this is tested

00:42:20,369 --> 00:42:27,269
the the tests that I wrote and passed

00:42:25,109 --> 00:42:29,430
all the green lines right so they hit

00:42:27,269 --> 00:42:34,969
all the green lines while the tests were

00:42:29,430 --> 00:42:37,440
running the the red lines are never

00:42:34,969 --> 00:42:40,170
touched during the test so we probably

00:42:37,440 --> 00:42:41,999
need to write some tests for those but

00:42:40,170 --> 00:42:46,170
what's more important in this case is

00:42:41,999 --> 00:42:49,469
the CREP index which stands for change

00:42:46,170 --> 00:42:52,170
disk anti-patterns index and I love how

00:42:49,469 --> 00:42:54,630
they came up with that and it's

00:42:52,170 --> 00:42:59,470
basically is a number saying how complex

00:42:54,630 --> 00:43:01,660
your method is or to be more specific

00:42:59,470 --> 00:43:03,760
it takes the cyclomatic complexity of

00:43:01,660 --> 00:43:07,000
your methods so that's really how

00:43:03,760 --> 00:43:08,440
complex it is and then takes into

00:43:07,000 --> 00:43:11,080
account the unit tests that you've

00:43:08,440 --> 00:43:13,750
written for it so you can bring down the

00:43:11,080 --> 00:43:15,790
scrap index by writing unit tests so if

00:43:13,750 --> 00:43:18,040
you're not sure what to write unit tests

00:43:15,790 --> 00:43:20,200
for first or what's in desperate need of

00:43:18,040 --> 00:43:25,240
unit tests you could run just this

00:43:20,200 --> 00:43:28,600
report and just see which methods are in

00:43:25,240 --> 00:43:30,880
need of most attention right I don't

00:43:28,600 --> 00:43:33,300
know if I have any good example I

00:43:30,880 --> 00:43:37,060
haven't run anything unit tests here yet

00:43:33,300 --> 00:43:38,950
so this one has a crept index of 12 so

00:43:37,060 --> 00:43:40,600
that's rather high life for each if

00:43:38,950 --> 00:43:42,700
statement in there so there's some

00:43:40,600 --> 00:43:45,460
complexity in that I haven't run a thing

00:43:42,700 --> 00:43:47,410
written a single unit test on it yet so

00:43:45,460 --> 00:43:55,420
this is probably a candidate to write a

00:43:47,410 --> 00:43:58,660
unit test for so there we go

00:43:55,420 --> 00:44:01,090
in conclusion write testable code so

00:43:58,660 --> 00:44:03,490
keep your code short your method short

00:44:01,090 --> 00:44:06,520
and simple and the fight for it tight

00:44:03,490 --> 00:44:10,150
coupling isolate the code you want to

00:44:06,520 --> 00:44:12,390
test so only test that piece of code and

00:44:10,150 --> 00:44:15,720
test the other piece of code in a test

00:44:12,390 --> 00:44:20,730
try to apply test-driven development and

00:44:15,720 --> 00:44:20,730
start writing tests tomorrow thank

00:44:26,340 --> 00:44:34,920
Thanks I believe there are still painful

00:44:28,750 --> 00:44:34,920
yes any questions yeah

00:44:39,910 --> 00:44:46,359
hello I'm going back to the banana

00:44:43,839 --> 00:44:50,529
example that you asserted that bananas

00:44:46,359 --> 00:44:53,619
are yellow yes how would you make sure

00:44:50,529 --> 00:44:55,299
that that test was complete ie if you

00:44:53,619 --> 00:44:57,670
had asserted that apples were red it

00:44:55,299 --> 00:44:59,890
would have passed if you see what I mean

00:44:57,670 --> 00:45:01,950
so it you mean if I if you would have

00:44:59,890 --> 00:45:04,750
multiple assertions in the same test

00:45:01,950 --> 00:45:08,200
yeah I'm yeah is that honest in solution

00:45:04,750 --> 00:45:09,700
yeah I would also it's not on the

00:45:08,200 --> 00:45:15,240
coverage report is that because it was

00:45:09,700 --> 00:45:19,109
reflected or maybe I still marked it as

00:45:15,240 --> 00:45:19,109
it wasn't it's interesting

00:45:25,050 --> 00:45:31,470
oh yeah here it is a recovery support

00:45:28,849 --> 00:45:34,470
case yeah so in this case we only hit

00:45:31,470 --> 00:45:39,330
like the banana case any other cases we

00:45:34,470 --> 00:45:45,330
haven't hit yet right so if we would fix

00:45:39,330 --> 00:45:46,859
that we there we go we could one in this

00:45:45,330 --> 00:45:48,990
case because of all the reflection stuff

00:45:46,859 --> 00:45:54,420
it's a bit I would have to do the entire

00:45:48,990 --> 00:45:57,150
thing again properly that's fine

00:45:54,420 --> 00:45:59,130
sorry yes lon decided the answer is that

00:45:57,150 --> 00:46:01,140
you would put multiple assertions in the

00:45:59,130 --> 00:46:04,770
cell yeah just so you would do something

00:46:01,140 --> 00:46:09,180
like this and say ret undetermined to

00:46:04,770 --> 00:46:12,720
get this working and then Apple we

00:46:09,180 --> 00:46:13,470
expect apples to be now that doesn't

00:46:12,720 --> 00:46:18,090
make sense

00:46:13,470 --> 00:46:20,730
right well they can be yellow it's

00:46:18,090 --> 00:46:23,000
probably built work all drunk yeah so

00:46:20,730 --> 00:46:23,000
there we go

00:46:24,830 --> 00:46:28,849
see you know that's one is covered as

00:46:27,210 --> 00:46:32,010
well so you can have multiple searches

00:46:28,849 --> 00:46:34,260
it is important to mention that if it

00:46:32,010 --> 00:46:37,130
test fails it will automatically

00:46:34,260 --> 00:46:40,109
continue with the next test in your

00:46:37,130 --> 00:46:42,240
class if an assertion fail so in this

00:46:40,109 --> 00:46:44,369
case the first assertion fails so

00:46:42,240 --> 00:46:46,980
bananas don't turn out to be yellow it

00:46:44,369 --> 00:46:48,630
will stop the tests that's best

00:46:46,980 --> 00:46:50,520
completely so it won't assure that the

00:46:48,630 --> 00:46:51,990
apples Clause anymore until you first

00:46:50,520 --> 00:46:59,270
fixed eat bananas things

00:46:51,990 --> 00:46:59,270
let me sense yeah oh you're just yawning

00:47:02,660 --> 00:47:08,640
just one thing that I can't disagree a

00:47:06,540 --> 00:47:10,290
little bit with was when you said about

00:47:08,640 --> 00:47:13,200
the database connection you just mock it

00:47:10,290 --> 00:47:14,700
all yeah and I think really sometimes in

00:47:13,200 --> 00:47:16,890
real you should really testing well

00:47:14,700 --> 00:47:19,320
real-world situation see you should be

00:47:16,890 --> 00:47:21,270
testing the the ORM layer if you've got

00:47:19,320 --> 00:47:22,560
one and the database and you should put

00:47:21,270 --> 00:47:23,250
all that setup in place to make sure

00:47:22,560 --> 00:47:24,570
that works

00:47:23,250 --> 00:47:27,480
now obviously you have to have the same

00:47:24,570 --> 00:47:28,770
environment etc that's something I kind

00:47:27,480 --> 00:47:31,619
of thought you know understand you're

00:47:28,770 --> 00:47:33,150
testing just your code but you know

00:47:31,619 --> 00:47:35,950
there's in a real-world situation it's

00:47:33,150 --> 00:47:38,170
quite a bit more exactly I would not my

00:47:35,950 --> 00:47:42,670
say that if you're really worried about

00:47:38,170 --> 00:47:45,339
your database being like not tested that

00:47:42,670 --> 00:47:46,810
you could write like separate tests just

00:47:45,339 --> 00:47:48,849
for the database to see if certain

00:47:46,810 --> 00:47:51,210
columns that you expect are there or if

00:47:48,849 --> 00:47:53,859
they're matching with a certain schema I

00:47:51,210 --> 00:47:56,530
don't know I'm not too fond of testing

00:47:53,859 --> 00:47:59,770
my database then against your mr. well

00:47:56,530 --> 00:48:02,380
if you want to have like a test for your

00:47:59,770 --> 00:48:04,270
complete system I think it makes more

00:48:02,380 --> 00:48:07,599
sense to have like functional tests like

00:48:04,270 --> 00:48:09,700
using B hat or selenium 2 or whatever

00:48:07,599 --> 00:48:11,440
did actually just go clicking through

00:48:09,700 --> 00:48:12,940
your application and there's stuff like

00:48:11,440 --> 00:48:17,410
that I mean then you're testing like the

00:48:12,940 --> 00:48:20,650
functional workings of your website as I

00:48:17,410 --> 00:48:22,329
said I I never found the need for it but

00:48:20,650 --> 00:48:24,400
again if you want to do it there is

00:48:22,329 --> 00:48:26,079
information on the phpunit website on

00:48:24,400 --> 00:48:29,349
how to do it there are solutions for

00:48:26,079 --> 00:48:32,829
that too - to do tested so if you really

00:48:29,349 --> 00:48:38,109
want to you can yes thanks ok Wow

00:48:32,829 --> 00:48:40,810
a big big one and this one's following

00:48:38,109 --> 00:48:42,940
on from the database question and I had

00:48:40,810 --> 00:48:47,050
a problem recently where I was building

00:48:42,940 --> 00:48:51,010
a system which had a login system and I

00:48:47,050 --> 00:48:53,740
was migrating old data where all the

00:48:51,010 --> 00:48:56,020
email addresses weren't unique where as

00:48:53,740 --> 00:48:57,790
I expected them to be unique so this

00:48:56,020 --> 00:49:01,060
basically caused the login system to not

00:48:57,790 --> 00:49:04,000
work so in that case I would like your

00:49:01,060 --> 00:49:09,310
test database yeah of course and there

00:49:04,000 --> 00:49:11,319
are examples of course so yeah again if

00:49:09,310 --> 00:49:14,770
you want to test it I mean there's a way

00:49:11,319 --> 00:49:18,520
a problem is if you would test it with

00:49:14,770 --> 00:49:21,270
your with like a test database so start

00:49:18,520 --> 00:49:23,980
off with empty database and fill it with

00:49:21,270 --> 00:49:26,319
predefined data set which would probably

00:49:23,980 --> 00:49:28,780
do if you would write tests then that

00:49:26,319 --> 00:49:30,970
probably would possibly also need not

00:49:28,780 --> 00:49:34,060
been discovered it was not in data in

00:49:30,970 --> 00:49:37,810
that case so it's true there still might

00:49:34,060 --> 00:49:40,329
be problems that aren't like covered by

00:49:37,810 --> 00:49:41,510
your unit test that still can happen on

00:49:40,329 --> 00:49:44,059
the other hand

00:49:41,510 --> 00:49:45,710
the server might be on fire and it won't

00:49:44,059 --> 00:49:48,349
detect that either you know so if you

00:49:45,710 --> 00:49:50,000
want to push it that far it is I really

00:49:48,349 --> 00:49:53,480
believe that that unit testing is about

00:49:50,000 --> 00:49:55,819
testing the logic of your program and

00:49:53,480 --> 00:49:58,339
not as much as everything that's that's

00:49:55,819 --> 00:50:01,099
connected to it but again if you want to

00:49:58,339 --> 00:50:06,680
test it you could there is the raw

00:50:01,099 --> 00:50:09,500
possibilities for that so sorry very

00:50:06,680 --> 00:50:12,049
very quickly one last question okay I

00:50:09,500 --> 00:50:18,380
see a lot of hands the men here in the

00:50:12,049 --> 00:50:22,640
front for each function each method is

00:50:18,380 --> 00:50:30,049
it better to have one test or multiple

00:50:22,640 --> 00:50:33,020
tests so yeah yeah so I think it kind of

00:50:30,049 --> 00:50:35,450
depends I mean if you have just a really

00:50:33,020 --> 00:50:37,849
simple method that you can just hit one

00:50:35,450 --> 00:50:40,579
time and then you've got it all covered

00:50:37,849 --> 00:50:41,869
then probably one testicle suffice but

00:50:40,579 --> 00:50:44,990
maybe you want to test multiple

00:50:41,869 --> 00:50:46,849
occasions I can imagine we have methods

00:50:44,990 --> 00:50:49,460
where we are calculating like discounts

00:50:46,849 --> 00:50:51,859
stuff like that or Texas or things that

00:50:49,460 --> 00:50:54,079
have to do of calculations so we might

00:50:51,859 --> 00:50:55,790
write like 50 tests on one method you

00:50:54,079 --> 00:50:57,680
know it's just does it behave correctly

00:50:55,790 --> 00:50:59,089
with negative numbers positives with

00:50:57,680 --> 00:51:01,819
really big numbers with really small

00:50:59,089 --> 00:51:03,559
ones just to have every really weird

00:51:01,819 --> 00:51:06,799
situation cover to see if it's working

00:51:03,559 --> 00:51:08,030
so the answer is I think it depends what

00:51:06,799 --> 00:51:10,150
you what you want to test in how the

00:51:08,030 --> 00:51:15,730
method that you want to test looks like

00:51:10,150 --> 00:51:15,730
so I believe that's it then okay

00:51:18,319 --> 00:51:25,799
I wanted to add one more thing please go

00:51:22,650 --> 00:51:27,119
to join in and rate my talk and also

00:51:25,799 --> 00:51:28,529
from the other speakers it's the first

00:51:27,119 --> 00:51:30,839
time that I'm doing this talk so I'm

00:51:28,529 --> 00:51:32,670
really anxious to know how you how you

00:51:30,839 --> 00:51:34,740
liked it if it was a good idea bad idea

00:51:32,670 --> 00:51:37,680
what they've gone what I could have done

00:51:34,740 --> 00:51:38,339
better so please go joint in and let me

00:51:37,680 --> 00:51:41,329
know what you think

00:51:38,339 --> 00:51:41,329
Thanks

00:51:51,550 --> 00:51:53,610

YouTube URL: https://www.youtube.com/watch?v=Jr8jAK86Uf0


