Title: PHP UK Conference 2013 - KEYNOTE PANEL | Frameworks: The Good, The Bad and The Ugly
Publication date: 2013-05-09
Playlist: PHP UK Conference 2013
Description: 
	Frameworks: The Good, The Bad and The Ugly 

Host: CiarÃ¡n Rooney

Panel:
Richard Johnson
Michael Peacock
Enrico Zimuel
Bastian Hofmann
Captions: 
	00:00:08,290 --> 00:00:20,660
good evening evening everyone had a good

00:00:12,260 --> 00:00:22,789
day so far yeah whoo yeah so this is a

00:00:20,660 --> 00:00:25,339
nice way to finish up the day sitting

00:00:22,789 --> 00:00:31,220
down I'm having a bear i'm dori you'll

00:00:25,339 --> 00:00:32,870
get one soon Jules Cheers we're going to

00:00:31,220 --> 00:00:39,530
talk about frameworks the good the bad

00:00:32,870 --> 00:00:41,960
the ugly the downright awful if you if

00:00:39,530 --> 00:00:45,320
you want to submit a question to us um

00:00:41,960 --> 00:00:46,850
you can tweak hashtag UK frame we're

00:00:45,320 --> 00:00:49,190
gonna be bringing the the Twitter wall

00:00:46,850 --> 00:00:52,280
up in a second and but first let me

00:00:49,190 --> 00:00:56,000
introduce you to who we have here today

00:00:52,280 --> 00:01:01,460
and so Richard Johnson lead developer at

00:00:56,000 --> 00:01:03,320
skin wigs we have Michael peacock who

00:01:01,460 --> 00:01:09,760
likes symphony and I have to bring my

00:01:03,320 --> 00:01:09,760
notes up to see where he works Norman

00:01:09,910 --> 00:01:14,360
michael is a Zen certified engineer and

00:01:12,650 --> 00:01:18,290
is currently working at grand six and

00:01:14,360 --> 00:01:21,610
Rico is next to me in the wrong order

00:01:18,290 --> 00:01:24,380
and we good here he's a senior PHP

00:01:21,610 --> 00:01:27,320
engineer at zen technologies and works

00:01:24,380 --> 00:01:30,080
on the zend framework team and finally

00:01:27,320 --> 00:01:35,600
we have Bastian who is a software

00:01:30,080 --> 00:01:38,330
engineer at researchgate so we're going

00:01:35,600 --> 00:01:40,700
to bring up the the Twitter wall so you

00:01:38,330 --> 00:01:45,470
guys can start bringing some questions

00:01:40,700 --> 00:01:48,130
into us now oh that's odd first being

00:01:45,470 --> 00:01:48,130
the third tweet

00:01:50,820 --> 00:01:58,299
but first guys why don't you tell us a

00:01:54,430 --> 00:02:00,479
little bit about yourselves um and yeah

00:01:58,299 --> 00:02:04,659
why don't you go ahead and Richard um

00:02:00,479 --> 00:02:08,950
okay so my background mostly in no

00:02:04,659 --> 00:02:11,170
commercial PHP development just sort of

00:02:08,950 --> 00:02:12,489
making websites generally that was for a

00:02:11,170 --> 00:02:15,220
number of years before moving over here

00:02:12,489 --> 00:02:18,580
now I'm one of the the team leads at

00:02:15,220 --> 00:02:21,220
skin I don't do as much PHP now as I

00:02:18,580 --> 00:02:22,390
used to do back in the day but I have

00:02:21,220 --> 00:02:24,519
worked with a couple of other languages

00:02:22,390 --> 00:02:27,880
as well which plate with some of those

00:02:24,519 --> 00:02:29,680
frameworks so I've seen some worse ones

00:02:27,880 --> 00:02:32,310
than the ones we have available with PHP

00:02:29,680 --> 00:02:35,340
which is surprising but there you go

00:02:32,310 --> 00:02:38,739
yeah not much more to say than that

00:02:35,340 --> 00:02:40,600
mainly a PHP developer do a little bit

00:02:38,739 --> 00:02:42,100
of doubling in iOS trying to get a

00:02:40,600 --> 00:02:45,850
little bit more involved in in that as

00:02:42,100 --> 00:02:48,130
well work on of PHP based web

00:02:45,850 --> 00:02:50,860
applications for businesses that are

00:02:48,130 --> 00:02:52,450
technology-based effectively worked with

00:02:50,860 --> 00:02:54,850
a few different CMS's over the years

00:02:52,450 --> 00:02:58,209
which with type of three back in two

00:02:54,850 --> 00:03:01,630
thousand six horrible experience wrote a

00:02:58,209 --> 00:03:07,299
book about it horrible experience that's

00:03:01,630 --> 00:03:08,980
me ok i'm john i work at researchgate

00:03:07,299 --> 00:03:10,930
social network scientists the whole

00:03:08,980 --> 00:03:14,530
social networking part is written in PHP

00:03:10,930 --> 00:03:17,230
and I'm also working on that and at the

00:03:14,530 --> 00:03:20,200
JavaScript part of the platform we use

00:03:17,230 --> 00:03:21,790
some symphony two components sunland

00:03:20,200 --> 00:03:24,700
framework two components but no

00:03:21,790 --> 00:03:26,380
full-fledged framework so that's a bit

00:03:24,700 --> 00:03:28,810
of my background before that I worked at

00:03:26,380 --> 00:03:32,380
a german social network like a facebook

00:03:28,810 --> 00:03:34,200
clone you could say which is now sold to

00:03:32,380 --> 00:03:38,440
some sort of somebody i don't know whom

00:03:34,200 --> 00:03:41,500
and good for you know it was not found

00:03:38,440 --> 00:03:43,900
as so not good for me it just worked

00:03:41,500 --> 00:03:45,940
there for a few years and there was also

00:03:43,900 --> 00:03:51,220
a big peach people application but also

00:03:45,940 --> 00:03:55,120
no big frame were behind it I man

00:03:51,220 --> 00:03:57,880
records in one as you can recognize from

00:03:55,120 --> 00:04:01,090
my a sense i come from history

00:03:57,880 --> 00:04:03,790
and I work for John technologies I am a

00:04:01,090 --> 00:04:08,860
software engineer since 1996 so I'm

00:04:03,790 --> 00:04:18,360
quite old and I work in dedham framework

00:04:08,860 --> 00:04:20,860
cover team and that's it okay great so I

00:04:18,360 --> 00:04:23,740
mean frameworks are good for some things

00:04:20,860 --> 00:04:26,020
and they're not so good for others when

00:04:23,740 --> 00:04:28,510
when do you guys think is is the

00:04:26,020 --> 00:04:30,220
appropriate time to be using a to be

00:04:28,510 --> 00:04:34,930
looking at using a framework in your in

00:04:30,220 --> 00:04:38,470
your application what's that just

00:04:34,930 --> 00:04:40,060
terribly Richard yeah um i guess it

00:04:38,470 --> 00:04:42,040
really depends on the use case each

00:04:40,060 --> 00:04:45,100
other you know trying to fulfill like um

00:04:42,040 --> 00:04:46,930
if you really want to jump ahead and get

00:04:45,100 --> 00:04:49,180
something up really quickly than a

00:04:46,930 --> 00:04:52,780
framework to be a huge benefit for that

00:04:49,180 --> 00:04:53,980
I it's also you know good in that a lot

00:04:52,780 --> 00:04:56,140
of the frameworks will address a lot of

00:04:53,980 --> 00:04:59,560
the underlying sort of issues with with

00:04:56,140 --> 00:05:01,270
PHP its language right um which can be

00:04:59,560 --> 00:05:03,580
huge can be quite handy so that regard

00:05:01,270 --> 00:05:04,810
quite good that also they get in the way

00:05:03,580 --> 00:05:06,880
when you're trying to do something she's

00:05:04,810 --> 00:05:11,080
small and lean then you know it can be

00:05:06,880 --> 00:05:12,340
really cumbersome that uh yeah I think

00:05:11,080 --> 00:05:14,080
it comes down to the amount of

00:05:12,340 --> 00:05:15,820
flexibility that you want with whatever

00:05:14,080 --> 00:05:17,410
you're building really if you want

00:05:15,820 --> 00:05:19,030
something has just said you know if you

00:05:17,410 --> 00:05:21,190
want to get cracking with something

00:05:19,030 --> 00:05:23,050
quickly frameworks great but if you need

00:05:21,190 --> 00:05:25,090
that fine level of control about exactly

00:05:23,050 --> 00:05:27,040
how this bit of your application works

00:05:25,090 --> 00:05:31,150
then maybe our frameworks not the right

00:05:27,040 --> 00:05:33,040
route I would also add if it's very

00:05:31,150 --> 00:05:34,810
short-lived project like only something

00:05:33,040 --> 00:05:37,150
you would develop on for two weeks or

00:05:34,810 --> 00:05:38,740
four weeks and it's probably the only

00:05:37,150 --> 00:05:41,290
thing you can do is actually use frame

00:05:38,740 --> 00:05:44,650
or otherwise you just spend your time

00:05:41,290 --> 00:05:48,010
handling the fundamental stuff I of HTTP

00:05:44,650 --> 00:05:49,540
in your application or if its internal

00:05:48,010 --> 00:05:53,050
tools that you will want to build

00:05:49,540 --> 00:05:55,600
quickly to do some internal stuff for

00:05:53,050 --> 00:05:56,790
then it's also quite good if it's a big

00:05:55,600 --> 00:05:59,530
application that you want to maintain

00:05:56,790 --> 00:06:02,170
over years and also something that s

00:05:59,530 --> 00:06:03,350
scale for lots of users then you quickly

00:06:02,170 --> 00:06:06,650
run into limitation

00:06:03,350 --> 00:06:12,130
of frameworks you should always use a

00:06:06,650 --> 00:06:15,020
framework and especially its in frame no

00:06:12,130 --> 00:06:20,000
I'm joking of course you have pro and

00:06:15,020 --> 00:06:22,280
cons using using a framework and the one

00:06:20,000 --> 00:06:24,530
of the best things about using a

00:06:22,280 --> 00:06:26,930
framework is you know using a standard

00:06:24,530 --> 00:06:29,030
especially if you work in a team with a

00:06:26,930 --> 00:06:33,850
lot of people standard are very

00:06:29,030 --> 00:06:37,040
important so another another point I

00:06:33,850 --> 00:06:41,210
mean to use to use a framework is too

00:06:37,040 --> 00:06:43,640
don't rain won't rain banta will so if

00:06:41,210 --> 00:06:45,650
you use source code that has been tested

00:06:43,640 --> 00:06:48,830
by thousands of people around the world

00:06:45,650 --> 00:06:52,460
you are quite sure you are building on

00:06:48,830 --> 00:06:53,990
something that is good that is stable so

00:06:52,460 --> 00:06:56,000
this is very important for you know the

00:06:53,990 --> 00:06:57,830
business because we are here to write

00:06:56,000 --> 00:07:00,320
application for business not for

00:06:57,830 --> 00:07:05,540
pleasure that's very important to to

00:07:00,320 --> 00:07:08,570
remember so the deserve the great point

00:07:05,540 --> 00:07:13,280
in my opinion to why we should use a

00:07:08,570 --> 00:07:15,230
frame of course you have also the you

00:07:13,280 --> 00:07:17,660
know the cons to use a framework for

00:07:15,230 --> 00:07:20,300
instance you have to to study the

00:07:17,660 --> 00:07:23,240
framework so you have to spend time to

00:07:20,300 --> 00:07:27,620
to learn the framework so that can be

00:07:23,240 --> 00:07:30,560
sometimes you know a bad things but if

00:07:27,620 --> 00:07:32,870
you invest in this kind of activities

00:07:30,560 --> 00:07:38,270
for sure you will take the benefit in

00:07:32,870 --> 00:07:40,040
the future so I it's just answer that I

00:07:38,270 --> 00:07:43,250
totally agree with all your reasoning I

00:07:40,040 --> 00:07:45,560
would just say the conclusion of it I

00:07:43,250 --> 00:07:47,960
would draw us a different one because if

00:07:45,560 --> 00:07:49,250
you look at the modern next generation

00:07:47,960 --> 00:07:51,170
framework i came out at the moment I

00:07:49,250 --> 00:07:53,240
came out in the last two years like

00:07:51,170 --> 00:07:55,490
symphony to zend framework to they are

00:07:53,240 --> 00:07:57,680
very much components so there's small

00:07:55,490 --> 00:07:59,480
components and actually can use some of

00:07:57,680 --> 00:08:00,740
these components without using the full

00:07:59,480 --> 00:08:03,710
fledged framework and limiting yourself

00:08:00,740 --> 00:08:05,240
to doing it exactly like symphony or

00:08:03,710 --> 00:08:07,820
exactly like laying frame aggressive

00:08:05,240 --> 00:08:11,479
yeah I mean framework is a tool yeah if

00:08:07,820 --> 00:08:12,540
you want to use it because simplify your

00:08:11,479 --> 00:08:15,450
life because

00:08:12,540 --> 00:08:18,630
no you just need a couple of components

00:08:15,450 --> 00:08:21,150
you can perfectly do this and now with

00:08:18,630 --> 00:08:25,590
the you know composer and packages it's

00:08:21,150 --> 00:08:26,670
very simple to do so so you've taken the

00:08:25,590 --> 00:08:29,910
decision and you're going to use a

00:08:26,670 --> 00:08:31,710
framework and you you you put it into

00:08:29,910 --> 00:08:34,020
your app and then they release an update

00:08:31,710 --> 00:08:37,830
that breaks back backward compatibility

00:08:34,020 --> 00:08:39,150
or and no and then updates the laotian

00:08:37,830 --> 00:08:42,030
the framework how do you avoid this

00:08:39,150 --> 00:08:48,900
problem what do you what do you guys do

00:08:42,030 --> 00:08:50,640
think avoiding the problem yeah I mean

00:08:48,900 --> 00:08:52,800
obviously that's something that you need

00:08:50,640 --> 00:08:54,390
to this is where a good sort of testing

00:08:52,800 --> 00:08:56,160
comes into play right now you know

00:08:54,390 --> 00:08:57,570
upgrading your framework make sure you

00:08:56,160 --> 00:09:01,080
test their they can cover that sort of

00:08:57,570 --> 00:09:02,220
those edge cases but you know you made

00:09:01,080 --> 00:09:04,410
your decision to go with that framework

00:09:02,220 --> 00:09:06,630
for the extent of it so that's that's

00:09:04,410 --> 00:09:08,760
what you have to take so write your own

00:09:06,630 --> 00:09:12,150
unit test for the framework well yeah

00:09:08,760 --> 00:09:14,580
get your testing right basically if you

00:09:12,150 --> 00:09:16,410
have like integration tests you actually

00:09:14,580 --> 00:09:18,780
testing also framework with it or if

00:09:16,410 --> 00:09:21,660
you're having like selenium tests or

00:09:18,780 --> 00:09:23,310
something a testing framework so maybe

00:09:21,660 --> 00:09:25,650
not unit testing it but integration

00:09:23,310 --> 00:09:27,840
testing it you've got to be very careful

00:09:25,650 --> 00:09:29,490
with the sort of plugins and modules you

00:09:27,840 --> 00:09:31,380
choose to use for the new framework as

00:09:29,490 --> 00:09:33,390
well make sure that they are actively

00:09:31,380 --> 00:09:35,070
maintained or that there's a lot of

00:09:33,390 --> 00:09:36,480
contributors there so that you know when

00:09:35,070 --> 00:09:37,950
there is an update there's people like

00:09:36,480 --> 00:09:39,450
that can work on it if there's a

00:09:37,950 --> 00:09:40,710
security issue and something has to be

00:09:39,450 --> 00:09:42,750
upgraded you know that there's people

00:09:40,710 --> 00:09:44,340
there one of the good things about a lot

00:09:42,750 --> 00:09:45,810
of the components that are out there if

00:09:44,340 --> 00:09:47,820
the likes of symphony components and

00:09:45,810 --> 00:09:49,500
that sort of thing is on github now you

00:09:47,820 --> 00:09:51,330
can see if they're actively maintains

00:09:49,500 --> 00:09:53,160
there's a little green badge just next

00:09:51,330 --> 00:09:54,330
to where it says build passing that a

00:09:53,160 --> 00:09:56,220
lot of these tools are putting in place

00:09:54,330 --> 00:09:58,230
so make sure that your modules and

00:09:56,220 --> 00:09:59,730
plugins are well maintained and that you

00:09:58,230 --> 00:10:02,280
know that you can rely on them when that

00:09:59,730 --> 00:10:07,500
time comes and that's that's how try and

00:10:02,280 --> 00:10:11,610
avoid it yeah yeah you are not I know

00:10:07,500 --> 00:10:13,440
that some framework to so basically we

00:10:11,610 --> 00:10:15,300
break the component the compatibility

00:10:13,440 --> 00:10:15,900
between the framework to enzyme from

00:10:15,300 --> 00:10:20,730
moco

00:10:15,900 --> 00:10:23,520
and that's because technical reason so

00:10:20,730 --> 00:10:25,770
basically we prefer to to see to the

00:10:23,520 --> 00:10:29,090
futures of starting to use PHP 5.3

00:10:25,770 --> 00:10:31,560
that's why it's not possible to execute

00:10:29,090 --> 00:10:35,400
application returning some framework or

00:10:31,560 --> 00:10:37,170
weeds and framework to of course this we

00:10:35,400 --> 00:10:40,290
know that it's difficult for people to

00:10:37,170 --> 00:10:42,660
migrate existing application from an old

00:10:40,290 --> 00:10:45,320
version of the framework to the new one

00:10:42,660 --> 00:10:48,120
and we are working you know to

00:10:45,320 --> 00:10:51,180
facilitate that process we are writing

00:10:48,120 --> 00:10:54,930
basically a documentation best practice

00:10:51,180 --> 00:10:58,320
how to migrate from you no min relation

00:10:54,930 --> 00:11:01,880
to another iteration so is it's a

00:10:58,320 --> 00:11:05,310
difficult topics for sure but we have to

00:11:01,880 --> 00:11:10,530
to look to the future so if we are using

00:11:05,310 --> 00:11:13,500
the last technology that is the PHP we

00:11:10,530 --> 00:11:16,530
have to use as framework builder you

00:11:13,500 --> 00:11:18,540
know the best way to provide you know

00:11:16,530 --> 00:11:21,090
the most performance most stable more

00:11:18,540 --> 00:11:22,950
secure way to you know to use the

00:11:21,090 --> 00:11:25,200
technology so that's why sometimes it's

00:11:22,950 --> 00:11:30,900
difficult to provide backward

00:11:25,200 --> 00:11:33,210
compatibility so we try to find services

00:11:30,900 --> 00:11:35,040
first thing is that it's from the worst

00:11:33,210 --> 00:11:36,720
decision to not upgrade at all because

00:11:35,040 --> 00:11:39,150
then you also don't have all the

00:11:36,720 --> 00:11:41,520
security fixes in it and probably have

00:11:39,150 --> 00:11:44,190
known security holes in application and

00:11:41,520 --> 00:11:46,320
second thing is that you should try to

00:11:44,190 --> 00:11:48,450
write to your actual business object

00:11:46,320 --> 00:11:49,980
code as much independently from the

00:11:48,450 --> 00:11:52,140
framework you're using as possible so

00:11:49,980 --> 00:11:54,240
that it's not hurting not so much if you

00:11:52,140 --> 00:11:56,040
have to exchange something or upgrade

00:11:54,240 --> 00:11:58,140
something yeah and interface has changed

00:11:56,040 --> 00:11:59,640
so for example if you use doctrine as a

00:11:58,140 --> 00:12:03,450
no way I'm they are you should actually

00:11:59,640 --> 00:12:06,210
separate the code that actually does the

00:12:03,450 --> 00:12:10,740
doctrine stuff from your business object

00:12:06,210 --> 00:12:12,990
is actually operates on the data so what

00:12:10,740 --> 00:12:15,750
what's the worst experience you guys

00:12:12,990 --> 00:12:18,330
have had with a framework where have you

00:12:15,750 --> 00:12:20,400
gone into some code and saying what what

00:12:18,330 --> 00:12:22,579
what the hell is happening here well

00:12:20,400 --> 00:12:26,420
what do they do whatever you say

00:12:22,579 --> 00:12:28,579
zend framework is in hunger no no

00:12:26,420 --> 00:12:31,819
everyone is up every kind of framework

00:12:28,579 --> 00:12:35,119
experience is amazing I mean as I say

00:12:31,819 --> 00:12:37,670
this is difficult to jump I think this

00:12:35,119 --> 00:12:41,239
is a you know every programmers every

00:12:37,670 --> 00:12:44,209
developers is convenience how to build

00:12:41,239 --> 00:12:47,420
stuff you know so if you look to

00:12:44,209 --> 00:12:48,860
something different from your code you

00:12:47,420 --> 00:12:51,230
know the first approach is always in

00:12:48,860 --> 00:12:53,600
what's going on here I mean it's

00:12:51,230 --> 00:12:57,049
difficult you know to jump inside

00:12:53,600 --> 00:13:00,259
another project I guess but the point

00:12:57,049 --> 00:13:02,779
here is not just it's not because it's

00:13:00,259 --> 00:13:05,779
difficult because I mean you have to

00:13:02,779 --> 00:13:08,989
trust but we are talking about you know

00:13:05,779 --> 00:13:12,139
PHP so everything is open so you can see

00:13:08,989 --> 00:13:13,819
what is great and you can see how to you

00:13:12,139 --> 00:13:15,290
know how to use it of course you have to

00:13:13,819 --> 00:13:19,790
spend time you have to invest in

00:13:15,290 --> 00:13:22,040
something and you know but Simon inside

00:13:19,790 --> 00:13:23,540
the framework so my feedback are not so

00:13:22,040 --> 00:13:25,129
much so maybe I think it's very

00:13:23,540 --> 00:13:26,689
important point that if you're using a

00:13:25,129 --> 00:13:27,980
framework and you're actually using it

00:13:26,689 --> 00:13:29,839
for a project that you're going to

00:13:27,980 --> 00:13:31,519
maintain for a few years that you also

00:13:29,839 --> 00:13:33,860
should know how the framework works and

00:13:31,519 --> 00:13:35,869
read the code internally so even if

00:13:33,860 --> 00:13:37,549
something happens or some there is some

00:13:35,869 --> 00:13:39,019
buck and there is no patch yet and all

00:13:37,549 --> 00:13:43,309
released yet that you can fix it

00:13:39,019 --> 00:13:45,049
yourself in the bucket at that you know

00:13:43,309 --> 00:13:46,759
that requires a certain level of

00:13:45,049 --> 00:13:49,249
knowledge riding into the framework

00:13:46,759 --> 00:13:51,410
itself and and you know a lot of users

00:13:49,249 --> 00:13:53,269
the framework are using it because it is

00:13:51,410 --> 00:13:55,489
easy to get up and running quickly and

00:13:53,269 --> 00:13:57,259
and surely they don't want to spend a

00:13:55,489 --> 00:13:58,369
whole heap of time learning every line

00:13:57,259 --> 00:14:00,249
of code that's already in you I think

00:13:58,369 --> 00:14:03,679
you're basically all business on that

00:14:00,249 --> 00:14:05,239
well we should again this is where we

00:14:03,679 --> 00:14:08,389
come in to using to prioritize you think

00:14:05,239 --> 00:14:09,589
it's minimally because you know that's a

00:14:08,389 --> 00:14:11,589
lot more that you have to learn and you

00:14:09,589 --> 00:14:15,110
have to so obviously does that

00:14:11,589 --> 00:14:17,689
investment they're using a framework

00:14:15,110 --> 00:14:19,639
doesn't like stop you from shouldn't

00:14:17,689 --> 00:14:21,699
stop you from thinking no of course not

00:14:19,639 --> 00:14:24,429
i'm not just getting that at all but

00:14:21,699 --> 00:14:25,569
I do suggest that most users of

00:14:24,429 --> 00:14:27,220
frameworks aren't going to go through

00:14:25,569 --> 00:14:28,540
and read every line of code in the

00:14:27,220 --> 00:14:31,480
framework and understand the intervals

00:14:28,540 --> 00:14:33,220
of the framework I think that's um you

00:14:31,480 --> 00:14:36,699
know not something that most users would

00:14:33,220 --> 00:14:38,589
be doing yeah depending even on the size

00:14:36,699 --> 00:14:40,359
of the project because we are talking

00:14:38,589 --> 00:14:44,470
about you know simple application very

00:14:40,359 --> 00:14:46,779
small project maybe you can just float

00:14:44,470 --> 00:14:49,269
in pure PHP but if you have to manage

00:14:46,779 --> 00:14:51,069
our routing system for instance you have

00:14:49,269 --> 00:14:55,869
to build something to manage the rising

00:14:51,069 --> 00:14:57,939
so maybe it can be you know you can

00:14:55,869 --> 00:15:00,279
reduce the time starting to use another

00:14:57,939 --> 00:15:03,639
solution it has I've been tested by

00:15:00,279 --> 00:15:06,309
thousands of people so depending in my

00:15:03,639 --> 00:15:09,609
opinion on the project on the contest

00:15:06,309 --> 00:15:12,749
but from my point of view are more the

00:15:09,609 --> 00:15:15,819
probe that Nana cones think were the

00:15:12,749 --> 00:15:17,589
biggest issues that has a face which is

00:15:15,819 --> 00:15:20,230
very similar to a lot of people have

00:15:17,589 --> 00:15:21,579
with framework says everybody uses

00:15:20,230 --> 00:15:22,779
frameworks differently even though they

00:15:21,579 --> 00:15:24,669
try and give you their own sort of

00:15:22,779 --> 00:15:26,739
standards and their own approaches I

00:15:24,669 --> 00:15:28,749
once inherited a project from a company

00:15:26,739 --> 00:15:30,939
that had gone gone bust so there's no

00:15:28,749 --> 00:15:32,199
hand over nothing like that we got

00:15:30,939 --> 00:15:33,939
landed with the project was an F

00:15:32,199 --> 00:15:36,519
framework that was new to us so you have

00:15:33,939 --> 00:15:38,529
to learn the framework they'd used it in

00:15:36,519 --> 00:15:40,449
a unique way so we had to learn that way

00:15:38,529 --> 00:15:42,429
of working with the framework and it

00:15:40,449 --> 00:15:44,169
also builds their own suite of modules

00:15:42,429 --> 00:15:45,730
and plugins they handled a lot of common

00:15:44,169 --> 00:15:47,949
stuff she then have to learn that as

00:15:45,730 --> 00:15:49,359
well as quite a lot of learning curve

00:15:47,949 --> 00:15:50,919
with all aspects of working with

00:15:49,359 --> 00:15:52,269
frameworks and that's just one of the

00:15:50,919 --> 00:15:55,359
risks that comes with the territory i

00:15:52,269 --> 00:15:58,480
think i think we have to differentiate

00:15:55,359 --> 00:16:00,519
more clearly between what is a framework

00:15:58,480 --> 00:16:02,470
and what is the library because for

00:16:00,519 --> 00:16:03,850
example i'm all for using sort party

00:16:02,470 --> 00:16:05,410
libraries as much as possible so you

00:16:03,850 --> 00:16:07,660
don't have to grab stuff yourself and

00:16:05,410 --> 00:16:10,359
use well testing stuff but then you

00:16:07,660 --> 00:16:12,100
should know how they work to make an

00:16:10,359 --> 00:16:14,079
educated decision actually which library

00:16:12,100 --> 00:16:15,970
to use because are tons of libraries for

00:16:14,079 --> 00:16:17,799
example for routing out there and in PHP

00:16:15,970 --> 00:16:19,480
you should know which one to use based

00:16:17,799 --> 00:16:22,239
on what features you need of them and

00:16:19,480 --> 00:16:24,189
how fast it should be for full fledged

00:16:22,239 --> 00:16:27,639
framework I see the danger is limiting

00:16:24,189 --> 00:16:29,840
yourself too much in the end by forcing

00:16:27,639 --> 00:16:33,380
design decisions or upon you

00:16:29,840 --> 00:16:34,850
all right that kind of leads nicely to a

00:16:33,380 --> 00:16:39,230
question that's come up a couple of

00:16:34,850 --> 00:16:41,270
times on the on the twitter feed there's

00:16:39,230 --> 00:16:44,120
like at least a dozen popular frameworks

00:16:41,270 --> 00:16:47,690
out there may be more what why is it

00:16:44,120 --> 00:16:49,490
that that every time someone comes

00:16:47,690 --> 00:16:51,830
across a problem that it seems like they

00:16:49,490 --> 00:16:53,930
need to reinvent the wheel there you

00:16:51,830 --> 00:16:55,700
know even even within in the popular

00:16:53,930 --> 00:16:57,650
ones you've got zend framework 1 and 2

00:16:55,700 --> 00:16:59,690
which are compatible symphony 1 and 2

00:16:57,650 --> 00:17:01,130
which aren't compatible why does

00:16:59,690 --> 00:17:03,140
everyone feel if they need to go and

00:17:01,130 --> 00:17:08,210
build their own framework it's fun to

00:17:03,140 --> 00:17:10,090
code player also you know that wheel you

00:17:08,210 --> 00:17:13,150
can always get a little bit rounder I

00:17:10,090 --> 00:17:15,920
think also it was because in the past

00:17:13,150 --> 00:17:19,520
oftentimes existing solutions were not

00:17:15,920 --> 00:17:23,660
discoverable easily because maybe it was

00:17:19,520 --> 00:17:26,420
on pair but probably not maybe it was

00:17:23,660 --> 00:17:28,760
somehow somewhere on github probably I

00:17:26,420 --> 00:17:32,240
don't know or somewhere on sourceforge

00:17:28,760 --> 00:17:37,850
and maybe lying around on some sends it

00:17:32,240 --> 00:17:39,560
foul on some ftp server and therefore

00:17:37,850 --> 00:17:42,050
people just thought okay nothing is

00:17:39,560 --> 00:17:44,750
there I can't find anything and I'm just

00:17:42,050 --> 00:17:48,590
building my own yeah even the word

00:17:44,750 --> 00:17:51,620
framework yep it's very you know generic

00:17:48,590 --> 00:17:53,090
work we have to identify different kind

00:17:51,620 --> 00:17:55,340
of frame for instance if we talked about

00:17:53,090 --> 00:17:58,820
them framework or same point these are

00:17:55,340 --> 00:18:01,100
general purposes frame there are even a

00:17:58,820 --> 00:18:04,400
micro framework framework specialized

00:18:01,100 --> 00:18:06,470
for the API so I think makes sense to a

00:18:04,400 --> 00:18:09,680
different framework for different kind

00:18:06,470 --> 00:18:11,780
of scenarios of course make no sense to

00:18:09,680 --> 00:18:14,450
have 100 kind of different frameworks

00:18:11,780 --> 00:18:16,820
for the same scenario because people can

00:18:14,450 --> 00:18:18,830
work together and try to build you know

00:18:16,820 --> 00:18:20,940
a better softer but you know we are

00:18:18,830 --> 00:18:23,130
human so

00:18:20,940 --> 00:18:25,080
we haven't human nature as well people

00:18:23,130 --> 00:18:27,120
are competitive they see something to

00:18:25,080 --> 00:18:28,920
think I can do better than that and they

00:18:27,120 --> 00:18:31,650
try and prove themselves thankfully a

00:18:28,920 --> 00:18:33,270
lot of people collaborate and existing

00:18:31,650 --> 00:18:34,830
things improve and evolve but sometimes

00:18:33,270 --> 00:18:36,600
people think i'm going to start my own

00:18:34,830 --> 00:18:39,540
and they become new things in their own

00:18:36,600 --> 00:18:41,970
right yeah I mean someone just waited

00:18:39,540 --> 00:18:44,070
and frameworks just a PHP developer

00:18:41,970 --> 00:18:47,400
popularity contest should there be a

00:18:44,070 --> 00:18:48,900
clear winner by now no well once again

00:18:47,400 --> 00:18:50,700
you know philosophical differences

00:18:48,900 --> 00:18:52,440
between framework developers as some

00:18:50,700 --> 00:18:55,290
people want different things I've out of

00:18:52,440 --> 00:18:57,600
farm frameworks I don't think that by

00:18:55,290 --> 00:18:58,920
just having one framework is a clear

00:18:57,600 --> 00:19:05,070
answer you call that the language itself

00:18:58,920 --> 00:19:07,470
right then a lot of the so just to

00:19:05,070 --> 00:19:09,030
elaborate on that really there's one of

00:19:07,470 --> 00:19:10,620
the newer frameworks laravel a lot of

00:19:09,030 --> 00:19:12,780
people really like it a lot of the

00:19:10,620 --> 00:19:14,910
people i work with rave about it but

00:19:12,780 --> 00:19:16,590
there's just one aspect of it that turns

00:19:14,910 --> 00:19:18,720
my stomach so i don't like to use that

00:19:16,590 --> 00:19:21,120
and just personal choice I don't like

00:19:18,720 --> 00:19:23,460
statically called methods very much at

00:19:21,120 --> 00:19:24,630
all some people don't mind them but for

00:19:23,460 --> 00:19:26,460
me it's something where I would choose

00:19:24,630 --> 00:19:28,440
another framework just because of a

00:19:26,460 --> 00:19:30,600
language decision like that so I think

00:19:28,440 --> 00:19:31,500
it's that's why there is so much choice

00:19:30,600 --> 00:19:33,660
because people have their own

00:19:31,500 --> 00:19:37,740
preferences their own tastes things that

00:19:33,660 --> 00:19:40,770
fit naturally to them really and so just

00:19:37,740 --> 00:19:42,510
picking up on something Enrico said I'm

00:19:40,770 --> 00:19:44,820
they're being lots of different types

00:19:42,510 --> 00:19:47,100
there so there's my make that a general

00:19:44,820 --> 00:19:50,240
purpose you have micro frameworks where

00:19:47,100 --> 00:19:52,590
do you see applications like Drupal or

00:19:50,240 --> 00:19:54,660
Joomla fitting into that and some people

00:19:52,590 --> 00:19:59,420
would call some people would call Drupal

00:19:54,660 --> 00:19:59,420
a framework for instance what

00:20:02,979 --> 00:20:10,399
make no sense I mean a Drupal or Joomla

00:20:06,979 --> 00:20:13,969
or CMS content management system are not

00:20:10,399 --> 00:20:16,159
framed or not for you know PHP developer

00:20:13,969 --> 00:20:18,859
I mean if you have to create a CMS maybe

00:20:16,159 --> 00:20:22,070
you can use give them write plugins for

00:20:18,859 --> 00:20:24,049
it yeah but it's not your writing

00:20:22,070 --> 00:20:28,460
plugins for Drupal or you know you're

00:20:24,049 --> 00:20:30,679
not you know solving a problem you know

00:20:28,460 --> 00:20:32,330
the depends on the problem you have yeah

00:20:30,679 --> 00:20:36,349
if you're if the goal is to write it

00:20:32,330 --> 00:20:40,339
again I agree but I don't think you know

00:20:36,349 --> 00:20:43,609
people will survive just writing plugin

00:20:40,339 --> 00:20:45,589
for Drupal or for joomla I think Drupal

00:20:43,609 --> 00:20:47,239
styles itself quite nicely by calling

00:20:45,589 --> 00:20:49,249
itself a content management framework

00:20:47,239 --> 00:20:51,589
it's not trying to be an application

00:20:49,249 --> 00:20:52,789
framework and it is a CMS but it's

00:20:51,589 --> 00:20:55,249
trying to be something that's between

00:20:52,789 --> 00:20:57,499
the two it's saying we are a CMS but you

00:20:55,249 --> 00:20:59,539
can use us quite easily to do more than

00:20:57,499 --> 00:21:01,039
just manage your brochure where website

00:20:59,539 --> 00:21:03,889
you can build an application with it

00:21:01,039 --> 00:21:08,989
without using the audacity to say we are

00:21:03,889 --> 00:21:10,339
a fully fledged framework it depends on

00:21:08,989 --> 00:21:11,570
what you need it seem like if you're

00:21:10,339 --> 00:21:14,539
building an online shop you're probably

00:21:11,570 --> 00:21:16,669
going to go with Magento and if you want

00:21:14,539 --> 00:21:17,839
to scale up then some some point you're

00:21:16,669 --> 00:21:20,210
building their own suppose you start

00:21:17,839 --> 00:21:23,059
with Magento that's perfectly fine but

00:21:20,210 --> 00:21:25,039
if you're building something that hasn't

00:21:23,059 --> 00:21:26,690
been there before you probably start

00:21:25,039 --> 00:21:28,549
with a framework or start with your own

00:21:26,690 --> 00:21:30,019
stuff and using some sort party

00:21:28,549 --> 00:21:35,239
libraries folder so it depends what you

00:21:30,019 --> 00:21:37,339
want to do so a good way of avoiding the

00:21:35,239 --> 00:21:42,169
framework thing is just to use libraries

00:21:37,339 --> 00:21:44,440
and and composer has been great to come

00:21:42,169 --> 00:21:47,989
around in the last and last little while

00:21:44,440 --> 00:21:51,379
but pair had been there for I did it

00:21:47,989 --> 00:21:53,359
nearly since PHP started and well what

00:21:51,379 --> 00:21:55,489
do you guys think of composure do you

00:21:53,359 --> 00:21:58,729
think Perry's should it go away and just

00:21:55,489 --> 00:22:00,469
be replaced with composure well what was

00:21:58,729 --> 00:22:02,450
the thoughts there well oh so I think

00:22:00,469 --> 00:22:02,840
it's about time that I'm composer came

00:22:02,450 --> 00:22:05,030
out

00:22:02,840 --> 00:22:06,650
a lot of other languages had the sort of

00:22:05,030 --> 00:22:09,980
auto dependency management for a very

00:22:06,650 --> 00:22:12,860
long time and then PHP it's been sorely

00:22:09,980 --> 00:22:15,350
lacking in in that kind of area so you

00:22:12,860 --> 00:22:17,210
know it's about time that it stepped up

00:22:15,350 --> 00:22:19,760
and I know that parents been around for

00:22:17,210 --> 00:22:22,070
a very long time but you know there's

00:22:19,760 --> 00:22:24,200
the other languages have have moved on

00:22:22,070 --> 00:22:25,310
and evolved and it's a shame they paired

00:22:24,200 --> 00:22:30,500
and evolved in the same way that

00:22:25,310 --> 00:22:31,610
composer has I think it's am just the

00:22:30,500 --> 00:22:33,050
fact that it allows you to manage your

00:22:31,610 --> 00:22:35,390
dependencies on a project-by-project

00:22:33,050 --> 00:22:37,370
basis instead of make them globally

00:22:35,390 --> 00:22:40,340
available to you your server just means

00:22:37,370 --> 00:22:42,320
it really shines out it's also so much

00:22:40,340 --> 00:22:43,640
easier to use on a range of systems the

00:22:42,320 --> 00:22:45,920
amount of times I've struggled using

00:22:43,640 --> 00:22:47,480
power on a Windows machine I couldn't

00:22:45,920 --> 00:22:49,580
begin to even try and counter as

00:22:47,480 --> 00:22:52,180
composer just works really nicely on

00:22:49,580 --> 00:22:55,880
Linux or a sec so Windows really well

00:22:52,180 --> 00:23:00,020
let's hope it hope it's past turn to her

00:22:55,880 --> 00:23:03,560
to go away yeah I think you know

00:23:00,020 --> 00:23:07,580
composer is a very good you know

00:23:03,560 --> 00:23:09,920
software is simple idea but it works is

00:23:07,580 --> 00:23:13,160
able to manage your dependencies in a

00:23:09,920 --> 00:23:16,490
very simple way just a JSON file that's

00:23:13,160 --> 00:23:21,470
it so I'm efficient it by appear because

00:23:16,490 --> 00:23:24,830
as I said and very old so but not no

00:23:21,470 --> 00:23:27,530
story I mean it's so simple and works so

00:23:24,830 --> 00:23:30,050
fine composite let's maybe in the future

00:23:27,530 --> 00:23:35,270
Pierre will disappear I don't know much

00:23:30,050 --> 00:23:41,570
right now no no doubt if nothing to it

00:23:35,270 --> 00:23:45,140
go composer get composure oh yeah so I

00:23:41,570 --> 00:23:47,810
saw something come up a little while ago

00:23:45,140 --> 00:23:49,160
on the on the twitter feed and some

00:23:47,810 --> 00:23:53,090
frameworks our marriage starting to

00:23:49,160 --> 00:23:55,640
market themselves directly at the upper

00:23:53,090 --> 00:23:58,040
management in tech companies and at the

00:23:55,640 --> 00:24:00,020
at the higher up decision-makers rather

00:23:58,040 --> 00:24:03,440
than the people who are on the ground

00:24:00,020 --> 00:24:04,610
writing the code you know marketing to

00:24:03,440 --> 00:24:07,250
CEOs and

00:24:04,610 --> 00:24:08,870
and CFLs and at that kind of level how

00:24:07,250 --> 00:24:11,110
do you guys feel about that is that

00:24:08,870 --> 00:24:13,190
something that they should be doing I

00:24:11,110 --> 00:24:14,690
should frameworks be all about the

00:24:13,190 --> 00:24:16,580
developers I think it should definitely

00:24:14,690 --> 00:24:18,500
be all about the developers it's a case

00:24:16,580 --> 00:24:20,000
of the right tool for the right job if

00:24:18,500 --> 00:24:21,470
it's something that's dictated from

00:24:20,000 --> 00:24:22,700
above it's rarely going to be the right

00:24:21,470 --> 00:24:23,960
tool for the job it needs to be

00:24:22,700 --> 00:24:25,460
something where it's carefully

00:24:23,960 --> 00:24:27,290
considered and given the right level of

00:24:25,460 --> 00:24:28,970
thought and only the people are going to

00:24:27,290 --> 00:24:30,679
be using it and understand the

00:24:28,970 --> 00:24:33,020
implications other people can make that

00:24:30,679 --> 00:24:34,490
decision understandably management might

00:24:33,020 --> 00:24:35,690
have some involvement if there's some

00:24:34,490 --> 00:24:37,820
pick a picture thing that they need to

00:24:35,690 --> 00:24:39,980
be aware of but so it feels like the

00:24:37,820 --> 00:24:42,590
wrong way to go definitely yeah but um

00:24:39,980 --> 00:24:44,330
you know when you have some frameworks

00:24:42,590 --> 00:24:45,799
doing marketing and other other ones not

00:24:44,330 --> 00:24:47,330
at the end of the day you know the ones

00:24:45,799 --> 00:24:48,740
that are going to shovel out is that the

00:24:47,330 --> 00:24:51,860
ones that they going to get there just

00:24:48,740 --> 00:24:54,290
just because you're fundamentally it's a

00:24:51,860 --> 00:24:55,760
it's a bad idea should be left at the

00:24:54,290 --> 00:24:58,190
decision maker of the developer doesn't

00:24:55,760 --> 00:24:59,809
necessarily mean that that's going to be

00:24:58,190 --> 00:25:02,780
the case of across the board right but

00:24:59,809 --> 00:25:04,280
it's not the world it's probably

00:25:02,780 --> 00:25:06,020
something seriously wrong with your

00:25:04,280 --> 00:25:07,429
company if you'll see how a dictator

00:25:06,020 --> 00:25:10,429
what from the previous was off

00:25:07,429 --> 00:25:13,370
consulting the developers I mean it's

00:25:10,429 --> 00:25:15,200
interesting it ties back to arouse

00:25:13,370 --> 00:25:17,210
keynote this morning where where he

00:25:15,200 --> 00:25:19,850
mentioned design has to come from the

00:25:17,210 --> 00:25:21,950
top down so you think frameworks

00:25:19,850 --> 00:25:24,650
definitely not shouldn't they shouldn't

00:25:21,950 --> 00:25:26,179
be that same same logic apply there I

00:25:24,650 --> 00:25:29,240
think it depends if you've got a

00:25:26,179 --> 00:25:31,370
technical CEO who understands both

00:25:29,240 --> 00:25:33,320
technical and business then there's no

00:25:31,370 --> 00:25:35,840
problem at all labor most people

00:25:33,320 --> 00:25:37,429
probably aren't in that situation and i

00:25:35,840 --> 00:25:39,620
think is very much a case of the right

00:25:37,429 --> 00:25:42,830
tool and the people that can decide that

00:25:39,620 --> 00:25:44,360
other people don't know in most cases to

00:25:42,830 --> 00:25:46,880
see or doesn't do any development may

00:25:44,360 --> 00:25:49,010
even if his technical so he should at

00:25:46,880 --> 00:25:51,040
least consult the people actually using

00:25:49,010 --> 00:25:53,539
stuff and building this stuff looks like

00:25:51,040 --> 00:25:56,580
yeah

00:25:53,539 --> 00:25:58,890
so I mean I think it would be difficult

00:25:56,580 --> 00:26:01,140
to ask you guys what's what's the best

00:25:58,890 --> 00:26:04,980
framework out there and why it's

00:26:01,140 --> 00:26:06,929
different because you know it depends on

00:26:04,980 --> 00:26:18,450
you the scenario you're using it for

00:26:06,929 --> 00:26:20,460
what's the worst framework using.net the

00:26:18,450 --> 00:26:22,440
worst one which I've seen but whether

00:26:20,460 --> 00:26:24,780
you call it a framework or scms would be

00:26:22,440 --> 00:26:26,730
back in the day type of three no now

00:26:24,780 --> 00:26:29,580
it's a much better system with a lot

00:26:26,730 --> 00:26:32,730
more reusability book back into of 2006

00:26:29,580 --> 00:26:34,640
when I used it was the worst worst thing

00:26:32,730 --> 00:26:39,780
to try and develop on but now it's a

00:26:34,640 --> 00:26:41,880
much better platform mmm how to say I'm

00:26:39,780 --> 00:26:44,549
I have some versions against the cakephp

00:26:41,880 --> 00:26:46,289
winner will still use a few years back I

00:26:44,549 --> 00:26:51,990
know I didn't like it but it's just

00:26:46,289 --> 00:26:59,460
personal taste you know Zen for one yes

00:26:51,990 --> 00:27:01,919
yeah no I mean good thank you I mean it

00:26:59,460 --> 00:27:04,760
is of course difficult to answer that

00:27:01,919 --> 00:27:08,250
this kind of quest especially for me

00:27:04,760 --> 00:27:10,320
what can I say of the worst framework is

00:27:08,250 --> 00:27:14,460
the framework that is managed by one or

00:27:10,320 --> 00:27:18,620
two people and is used by hundred and of

00:27:14,460 --> 00:27:23,730
people so maybe this is the first frame

00:27:18,620 --> 00:27:26,130
and so how important is the frameworks

00:27:23,730 --> 00:27:28,320
documentation to to your choice to

00:27:26,130 --> 00:27:29,760
choosing a framework is it important

00:27:28,320 --> 00:27:31,740
that everything will be kept up to date

00:27:29,760 --> 00:27:33,690
or is you know the point you're using

00:27:31,740 --> 00:27:37,380
the framework is so I don't have to

00:27:33,690 --> 00:27:41,640
don't have to worry about that the

00:27:37,380 --> 00:27:42,720
commutation is important not the most

00:27:41,640 --> 00:27:45,600
important thing is that it actually

00:27:42,720 --> 00:27:48,440
works and fits your use case what you

00:27:45,600 --> 00:27:51,030
want to do second thing would be then

00:27:48,440 --> 00:27:53,270
documentation i would agree because if

00:27:51,030 --> 00:27:56,669
the documentation is totally wrong and

00:27:53,270 --> 00:27:59,280
egg okay if you code is well documented

00:27:56,669 --> 00:28:00,640
and has nice documentation is actually

00:27:59,280 --> 00:28:03,070
very easy to understand and

00:28:00,640 --> 00:28:05,700
still okay but if it's a big mess and

00:28:03,070 --> 00:28:09,390
then also big mess in the documentation

00:28:05,700 --> 00:28:14,110
wouldn't use it it's absolutely

00:28:09,390 --> 00:28:17,080
important and you know we come out with

00:28:14,110 --> 00:28:20,230
Adam framer to in September of last year

00:28:17,080 --> 00:28:23,730
and we come out without a good

00:28:20,230 --> 00:28:27,190
documentation and that was a mistake

00:28:23,730 --> 00:28:29,350
basically so we are working now to

00:28:27,190 --> 00:28:31,830
improve the documentation but it's

00:28:29,350 --> 00:28:35,080
definitely one of the most important

00:28:31,830 --> 00:28:38,260
things because people have to start to

00:28:35,080 --> 00:28:41,230
use the framers of documentation is is

00:28:38,260 --> 00:28:43,780
very is very important of course even

00:28:41,230 --> 00:28:46,450
the source code are so important because

00:28:43,780 --> 00:28:49,840
if the source code are written you know

00:28:46,450 --> 00:28:53,080
using a standard are clear you can just

00:28:49,840 --> 00:28:55,030
jump and look inside you know the source

00:28:53,080 --> 00:28:58,900
code but for sure the documentation is

00:28:55,030 --> 00:29:00,970
one of the most important for it it's an

00:28:58,900 --> 00:29:01,930
essential aspect really because you've

00:29:00,970 --> 00:29:04,060
got to think about more than just

00:29:01,930 --> 00:29:05,470
yourself it's not necessarily just you

00:29:04,060 --> 00:29:07,780
working on a project you might have

00:29:05,470 --> 00:29:09,550
other people they might be able to learn

00:29:07,780 --> 00:29:11,890
a different pace so if there's much more

00:29:09,550 --> 00:29:14,590
results out there to help anybody else

00:29:11,890 --> 00:29:16,150
working on the project and also you know

00:29:14,590 --> 00:29:17,590
six months down the line it could be

00:29:16,150 --> 00:29:19,210
somebody else's project you want to

00:29:17,590 --> 00:29:20,590
leave it in a state where somebody

00:29:19,210 --> 00:29:22,210
that's never used our framework could

00:29:20,590 --> 00:29:27,299
pick it up just to make it easier for

00:29:22,210 --> 00:29:30,059
for everyone really yeah absolutely one

00:29:27,299 --> 00:29:31,780
documentation of course is going to be

00:29:30,059 --> 00:29:33,900
pretty much the first thing that

00:29:31,780 --> 00:29:38,049
everyone reads that everyone goes to

00:29:33,900 --> 00:29:39,309
learn now learn not only um sort of how

00:29:38,049 --> 00:29:41,590
to use framework but the best way to use

00:29:39,309 --> 00:29:42,730
a framework and that all that sort of

00:29:41,590 --> 00:29:44,500
stuff you're not going to get by reading

00:29:42,730 --> 00:29:49,750
the source code even even if you are so

00:29:44,500 --> 00:29:51,580
inclined but it's if I can now add

00:29:49,750 --> 00:29:54,280
something it's very difficult to write

00:29:51,580 --> 00:29:58,330
good documentation because a good

00:29:54,280 --> 00:30:00,429
developer it's not it's not guarantee

00:29:58,330 --> 00:30:04,780
that is a good technical writer you know

00:30:00,429 --> 00:30:07,330
so that's why we fail it sometimes you

00:30:04,780 --> 00:30:08,890
know should you guys have a team now for

00:30:07,330 --> 00:30:10,890
writing documentation separate from the

00:30:08,890 --> 00:30:13,390
developers or we have a team a

00:30:10,890 --> 00:30:16,150
contributor is some primal is one

00:30:13,390 --> 00:30:18,250
hundred percent open source so is driven

00:30:16,150 --> 00:30:19,980
by the community if there are people

00:30:18,250 --> 00:30:23,799
that you know how to write a

00:30:19,980 --> 00:30:27,640
recommendation please help us we need

00:30:23,799 --> 00:30:29,590
your help something actually also is

00:30:27,640 --> 00:30:32,080
nothing very important that I just sort

00:30:29,590 --> 00:30:34,630
of is tests so if I'm using a framework

00:30:32,080 --> 00:30:38,230
amazing all my money on it I want it to

00:30:34,630 --> 00:30:39,940
be tested where we go yeah so I'm cool

00:30:38,230 --> 00:30:43,419
it's true as possible that it won't

00:30:39,940 --> 00:30:46,169
break and something do you guys open

00:30:43,419 --> 00:30:51,010
source your unit test as well yeah yeah

00:30:46,169 --> 00:30:52,990
so we have some roving microphones of

00:30:51,010 --> 00:30:57,400
the guys are standing up so if you've

00:30:52,990 --> 00:30:58,990
any questions from the audience you got

00:30:57,400 --> 00:31:00,750
throw your hands up in someone someone

00:30:58,990 --> 00:31:06,549
will come down to you with microphone

00:31:00,750 --> 00:31:08,230
I'm not seeing anybody at the minute my

00:31:06,549 --> 00:31:12,690
mom in the back there there's someone

00:31:08,230 --> 00:31:12,690
I'd today it's actually fun to see

00:31:17,260 --> 00:31:23,300
just give it a second yeah I doing a new

00:31:20,840 --> 00:31:25,460
application and you've chosen the

00:31:23,300 --> 00:31:27,590
framework of choice when would you

00:31:25,460 --> 00:31:30,460
decide to go with the latest potential

00:31:27,590 --> 00:31:33,890
beta version of that verse the proven

00:31:30,460 --> 00:31:36,290
version like we got bitten a bit with a

00:31:33,890 --> 00:31:40,250
decision ago ver symfony2 point 0 when

00:31:36,290 --> 00:31:41,960
2.1 was in beta as n2 is the same when

00:31:40,250 --> 00:31:43,880
would you based application on a better

00:31:41,960 --> 00:31:46,550
knowing that in 6 months when you roll

00:31:43,880 --> 00:31:53,810
it live that will now be the release

00:31:46,550 --> 00:31:55,940
version so when the question is is is am

00:31:53,810 --> 00:31:57,740
if you know your apps not coming out for

00:31:55,940 --> 00:31:59,780
a couple of months should you be working

00:31:57,740 --> 00:32:03,890
with with the little you know the latest

00:31:59,780 --> 00:32:05,090
release candidate or the latest visa or

00:32:03,890 --> 00:32:07,100
should you always be working with the

00:32:05,090 --> 00:32:08,750
stable version fingers no harm in having

00:32:07,100 --> 00:32:10,550
a separate branch of your code where you

00:32:08,750 --> 00:32:12,620
working with the newest version just so

00:32:10,550 --> 00:32:14,510
you've got a an idea of how you might be

00:32:12,620 --> 00:32:16,370
able to migrate to that but you don't

00:32:14,510 --> 00:32:18,350
want to you don't put your steaks on the

00:32:16,370 --> 00:32:20,690
fact that they'll release before you

00:32:18,350 --> 00:32:22,280
what if they don't you don't wanna

00:32:20,690 --> 00:32:23,870
guarantee there's nobody to guarantee

00:32:22,280 --> 00:32:25,970
that so you may as well go with what's

00:32:23,870 --> 00:32:27,050
proven what stable what you know will

00:32:25,970 --> 00:32:29,060
work when you roll it out to a

00:32:27,050 --> 00:32:30,500
production environment and then if it

00:32:29,060 --> 00:32:32,210
gets released before you're ready to

00:32:30,500 --> 00:32:33,620
roll out you've got an investigative

00:32:32,210 --> 00:32:35,420
branch way you've already tried playing

00:32:33,620 --> 00:32:37,040
around to that framework and have some

00:32:35,420 --> 00:32:39,470
ties that you might be able to to

00:32:37,040 --> 00:32:41,000
migrate with yeah I mean when you're

00:32:39,470 --> 00:32:43,220
looking at selecting a framework of it

00:32:41,000 --> 00:32:45,050
obviously the UM the lifetime without

00:32:43,220 --> 00:32:48,440
particular version the framework it

00:32:45,050 --> 00:32:50,840
should be a very important factor in

00:32:48,440 --> 00:32:52,280
that consideration I would definitely go

00:32:50,840 --> 00:32:53,570
with the stable one the one that's there

00:32:52,280 --> 00:32:56,780
at the moment unless there was something

00:32:53,570 --> 00:32:58,850
really attractive about the new version

00:32:56,780 --> 00:33:00,260
coming out some really strong reason to

00:32:58,850 --> 00:33:03,320
that I would stick with what stable

00:33:00,260 --> 00:33:08,300
because and make a make a decision based

00:33:03,320 --> 00:33:10,210
on it some support and lifetime do you

00:33:08,300 --> 00:33:13,580
think framework should be looking at

00:33:10,210 --> 00:33:16,700
similar to how operating systems do with

00:33:13,580 --> 00:33:18,910
what LTS support for for certain

00:33:16,700 --> 00:33:24,890
versions of a framework

00:33:18,910 --> 00:33:26,780
yeah I mean it can be a good idea my

00:33:24,890 --> 00:33:30,890
suggestion is all well used stable

00:33:26,780 --> 00:33:35,690
version always try to be updated with

00:33:30,890 --> 00:33:45,430
the last version framework I don't know

00:33:35,690 --> 00:33:53,030
why you're a bad Todd with this yeah

00:33:45,430 --> 00:33:54,350
shouldn't have waimea any more questions

00:33:53,030 --> 00:34:04,390
out there you got one here right the

00:33:54,350 --> 00:34:07,010
front we can get microphone to I hi

00:34:04,390 --> 00:34:09,409
which frameworks have been around far

00:34:07,010 --> 00:34:14,480
too long and a far too bad and just need

00:34:09,409 --> 00:34:22,159
to go die in a fire Wow zend framework

00:34:14,480 --> 00:34:23,870
one again yeah yeah they are be inclined

00:34:22,159 --> 00:34:26,300
to say the likes of a coding nighter and

00:34:23,870 --> 00:34:33,080
cake PHP too many too many intricacies

00:34:26,300 --> 00:34:37,159
in there that need to go away Richard in

00:34:33,080 --> 00:34:39,220
a moment I'm a big fan codeigniter it

00:34:37,159 --> 00:34:45,770
came up a couple of times in your talk

00:34:39,220 --> 00:34:47,780
um yeah I'd tend to agree that um ha

00:34:45,770 --> 00:34:50,020
jeez no I don't want to say that

00:34:47,780 --> 00:34:54,530
strongly that I should burn in hell

00:34:50,020 --> 00:34:56,300
really I wouldn't say that yeah there's

00:34:54,530 --> 00:34:58,730
definitely the same framework one was uh

00:34:56,300 --> 00:35:04,109
was one that I had trouble with him when

00:34:58,730 --> 00:35:08,190
once in the back of yep

00:35:04,109 --> 00:35:11,489
I don't know with all of them now in the

00:35:08,190 --> 00:35:13,829
end even then from a gong or cake if it

00:35:11,489 --> 00:35:17,279
really works for you and you are having

00:35:13,829 --> 00:35:18,960
a all legislation me and it's stable and

00:35:17,279 --> 00:35:20,910
everything why should you change it if

00:35:18,960 --> 00:35:26,460
you're happy with it and if it doesn't

00:35:20,910 --> 00:35:30,660
limit you so is that the saw the unicode

00:35:26,460 --> 00:35:32,069
character for beer there so one another

00:35:30,660 --> 00:35:38,009
yeah we're not running this on a mac

00:35:32,069 --> 00:35:42,140
yeah nice and friend so some people will

00:35:38,009 --> 00:35:44,759
say framework is I mean it's good for

00:35:42,140 --> 00:35:47,880
across a larger team because it helps

00:35:44,759 --> 00:35:50,519
define a set of conventions do you think

00:35:47,880 --> 00:35:52,739
you can can achieve the same effect and

00:35:50,519 --> 00:35:54,450
just by having some good good

00:35:52,739 --> 00:35:57,210
documentation just going this is the way

00:35:54,450 --> 00:36:00,980
we code and then you don't need to use

00:35:57,210 --> 00:36:05,849
only framework yeah we're not yeah yeah

00:36:00,980 --> 00:36:09,319
but some primal is not just me or

00:36:05,849 --> 00:36:11,670
synchronous John not just Fabian is

00:36:09,319 --> 00:36:15,839
hundreds of people that think that

00:36:11,670 --> 00:36:19,259
propose that improve stuff so why not

00:36:15,839 --> 00:36:22,049
reuse this you know I first that's the

00:36:19,259 --> 00:36:23,730
point i think particularly thanks to the

00:36:22,049 --> 00:36:24,960
standards that the framework

00:36:23,730 --> 00:36:26,999
interoperability groups have been

00:36:24,960 --> 00:36:29,430
putting together it's much easier to

00:36:26,999 --> 00:36:30,900
work without a framework all with the

00:36:29,430 --> 00:36:32,880
series of components with some nice

00:36:30,900 --> 00:36:34,559
salads already in place that can help

00:36:32,880 --> 00:36:36,059
you put something together the whole

00:36:34,559 --> 00:36:42,059
team and people in the future can

00:36:36,059 --> 00:36:46,559
welcome go i remember our questions in

00:36:42,059 --> 00:36:48,390
the audience please bad question okay

00:36:46,559 --> 00:36:50,549
yes i'm sure you guys have one

00:36:48,390 --> 00:36:53,309
aggressive question so I'm coming back

00:36:50,549 --> 00:36:56,630
from saks something like that but I work

00:36:53,309 --> 00:36:56,630
sucks aw ok

00:37:06,380 --> 00:37:13,079
hi and if you look into a future for

00:37:11,010 --> 00:37:14,970
like three years how do you think

00:37:13,079 --> 00:37:17,789
frameworks will look then and how

00:37:14,970 --> 00:37:22,680
definitely be from now good question

00:37:17,789 --> 00:37:25,470
yeah I think that we will more morsi

00:37:22,680 --> 00:37:27,470
frameworks that are not only handling

00:37:25,470 --> 00:37:29,880
the suicide of an application but

00:37:27,470 --> 00:37:31,859
combined client-side what happens in the

00:37:29,880 --> 00:37:36,960
browser and the logic and server side so

00:37:31,859 --> 00:37:38,490
that you don't need to write handle all

00:37:36,960 --> 00:37:40,380
this communication stuff between browser

00:37:38,490 --> 00:37:41,900
and clients so much so we probably got

00:37:40,380 --> 00:37:47,760
to see a lot of more of that stuff

00:37:41,900 --> 00:37:49,769
happening in the SEO just like net you

00:37:47,760 --> 00:37:53,069
frameworks Oh oftentimes I just made

00:37:49,769 --> 00:37:55,309
about making development easier and if

00:37:53,069 --> 00:37:58,079
you think about how often you write

00:37:55,309 --> 00:38:00,000
validation rules in JavaScript NM PHP

00:37:58,079 --> 00:38:01,740
and write your models in javascript and

00:38:00,000 --> 00:38:05,069
PHP and right communication we're just

00:38:01,740 --> 00:38:06,990
sending stuff was an ageist request from

00:38:05,069 --> 00:38:08,519
client to server and then also write a

00:38:06,990 --> 00:38:13,279
controller in the back and then all that

00:38:08,519 --> 00:38:15,599
stuff and it's very repetitive so I see

00:38:13,279 --> 00:38:18,059
these are benefits for frameworks are

00:38:15,599 --> 00:38:20,279
tackling that problem yeah I don't

00:38:18,059 --> 00:38:22,859
disagree that I think there are a lot of

00:38:20,279 --> 00:38:25,470
pitfalls with trying to cover up too

00:38:22,859 --> 00:38:28,950
much scaling for existing this great

00:38:25,470 --> 00:38:30,569
example and you know there's a lot of

00:38:28,950 --> 00:38:32,160
considerations and I think we're going

00:38:30,569 --> 00:38:33,869
to fail several times when before we

00:38:32,160 --> 00:38:35,250
succeed when it comes to doing doing

00:38:33,869 --> 00:38:36,809
that sort of thing personally I think

00:38:35,250 --> 00:38:39,869
the frameworks we're going to keep going

00:38:36,809 --> 00:38:41,250
in this sort of direction where we were

00:38:39,869 --> 00:38:42,869
sort of getting more and more modular to

00:38:41,250 --> 00:38:44,940
the extent where they are almost just a

00:38:42,869 --> 00:38:46,200
collection of libraries you choose a

00:38:44,940 --> 00:38:47,430
component from here and your component

00:38:46,200 --> 00:38:51,000
from there and plug them all together

00:38:47,430 --> 00:38:53,460
and we're we're laughing that

00:38:51,000 --> 00:38:55,440
secondary very I had 18 feelings like

00:38:53,460 --> 00:38:57,720
Symphony component symphony with the

00:38:55,440 --> 00:39:00,150
components and fuel PHP that are

00:38:57,720 --> 00:39:04,140
component-based that's the future I'm

00:39:00,150 --> 00:39:08,370
hoping for least yes he even in the

00:39:04,140 --> 00:39:13,910
future more users of mobile solution you

00:39:08,370 --> 00:39:18,510
know so maybe more you know tools

00:39:13,910 --> 00:39:21,540
regarding the client side even just the

00:39:18,510 --> 00:39:26,010
server one so we all know that Ruby on

00:39:21,540 --> 00:39:27,870
Rails doesn't scale what what what do

00:39:26,010 --> 00:39:30,330
you guys think of frameworks in relation

00:39:27,870 --> 00:39:32,520
to scaling in PHP is there certain

00:39:30,330 --> 00:39:34,260
frameworks that that you should avoid if

00:39:32,520 --> 00:39:38,250
you think you're building the next

00:39:34,260 --> 00:39:43,320
Facebook or is there some tremor Exeter

00:39:38,250 --> 00:39:47,430
particularly well if the framework is

00:39:43,320 --> 00:39:51,360
written in a good way it scales I mean

00:39:47,430 --> 00:39:55,740
we put a lot of emphasis a lot of you

00:39:51,360 --> 00:39:57,900
know effort in some framework to that's

00:39:55,740 --> 00:40:01,140
why we spend a lot of time basically to

00:39:57,900 --> 00:40:04,050
revive from scratch the internals the

00:40:01,140 --> 00:40:08,100
engine of the framework especially for

00:40:04,050 --> 00:40:10,440
big big applications and we have a even

00:40:08,100 --> 00:40:13,950
a lot of big enterprise company that are

00:40:10,440 --> 00:40:17,160
using some framework for giant giant

00:40:13,950 --> 00:40:21,000
application so it can scales if you'd

00:40:17,160 --> 00:40:23,790
know how to use it it's PHP code I mean

00:40:21,000 --> 00:40:27,480
we can all that hard work just add more

00:40:23,790 --> 00:40:28,980
safe job done then when it comes to

00:40:27,480 --> 00:40:30,420
scaling you've got to really know the

00:40:28,980 --> 00:40:32,400
internals of the framework that you

00:40:30,420 --> 00:40:33,870
using because the likelihood is while

00:40:32,400 --> 00:40:35,610
there may be some provisions to help

00:40:33,870 --> 00:40:37,230
scaling and help with performance that

00:40:35,610 --> 00:40:38,820
kind of thing you're probably going to

00:40:37,230 --> 00:40:40,710
be the one that's going to need to go in

00:40:38,820 --> 00:40:42,330
and look at the nitty-gritty of why that

00:40:40,710 --> 00:40:44,130
particular query or while a bit of code

00:40:42,330 --> 00:40:46,110
isn't functioning as well as it should

00:40:44,130 --> 00:40:48,120
and hopefully contribute that back to

00:40:46,110 --> 00:40:49,170
the community as a pull request but I

00:40:48,120 --> 00:40:50,550
think you're really going to need to

00:40:49,170 --> 00:40:52,320
know the code that you're using as

00:40:50,550 --> 00:40:53,940
opposed to just going let's use this

00:40:52,320 --> 00:40:54,810
framework and hope it hopefully scales

00:40:53,940 --> 00:40:56,340
with us

00:40:54,810 --> 00:40:58,740
that's yet another argument for around

00:40:56,340 --> 00:41:01,410
trying to remain very lightweight with

00:40:58,740 --> 00:41:02,880
your and only select bits of the

00:41:01,410 --> 00:41:04,980
framework that you are going to be

00:41:02,880 --> 00:41:06,840
important for you because if the whole

00:41:04,980 --> 00:41:08,130
thing is is just a mess and the whole

00:41:06,840 --> 00:41:10,470
thing is really slow to load then

00:41:08,130 --> 00:41:12,630
there's you're pretty much stuffed right

00:41:10,470 --> 00:41:15,540
it's not much more you can do after

00:41:12,630 --> 00:41:18,000
throttle land and work again to scale it

00:41:15,540 --> 00:41:21,500
up so much like you know to which I have

00:41:18,000 --> 00:41:25,350
and a little days of other companies

00:41:21,500 --> 00:41:29,940
exit so any more questions from the

00:41:25,350 --> 00:41:36,240
audience yeah we have one coming from

00:41:29,940 --> 00:41:40,320
the back hello most of you apart from

00:41:36,240 --> 00:41:43,830
Bastion are like back and developers or

00:41:40,320 --> 00:41:46,950
at least related to who frameworks which

00:41:43,830 --> 00:41:51,570
are more back end I would like to know

00:41:46,950 --> 00:41:55,680
how do you see the appearing of all

00:41:51,570 --> 00:42:00,380
these JavaScript frameworks like no jazz

00:41:55,680 --> 00:42:03,510
or bootstrap who are like more or less

00:42:00,380 --> 00:42:07,580
removing the back end from the sculpt

00:42:03,510 --> 00:42:12,330
like connecting directly to databases

00:42:07,580 --> 00:42:14,880
I'm sorry but the lag makes confusion so

00:42:12,330 --> 00:42:16,400
first small correction i'm also doing

00:42:14,880 --> 00:42:20,610
lots of seconds probably eighty percent

00:42:16,400 --> 00:42:23,940
so i'm not like a pure front-end

00:42:20,610 --> 00:42:27,180
developer second thing bootstrap was the

00:42:23,940 --> 00:42:28,920
CSS framework no Jeff actually also

00:42:27,180 --> 00:42:31,670
beckoned so I think he's probably

00:42:28,920 --> 00:42:33,720
referring to chose like back down and

00:42:31,670 --> 00:42:35,310
back home has now been replaced by

00:42:33,720 --> 00:42:38,310
angular is that what people are using

00:42:35,310 --> 00:42:40,050
all the cool kids these days and so how

00:42:38,310 --> 00:42:42,900
do you guys feel about the the fat

00:42:40,050 --> 00:42:46,050
client on this trend of single single

00:42:42,900 --> 00:42:49,170
page web apps now will we all be

00:42:46,050 --> 00:42:51,150
redundant in in two years time this

00:42:49,170 --> 00:42:52,300
sounds very web two point O kind of

00:42:51,150 --> 00:42:54,520
reminiscent

00:42:52,300 --> 00:42:56,260
the fact 25 i would say three-point oh

00:42:54,520 --> 00:42:58,030
well you know people have been talking

00:42:56,260 --> 00:43:01,120
about the fact line since since back

00:42:58,030 --> 00:43:02,700
then but yeah so i think with you no

00:43:01,120 --> 00:43:05,110
more JavaScript frameworks we're kind of

00:43:02,700 --> 00:43:08,500
losing the view when it comes to a lot

00:43:05,110 --> 00:43:10,420
of these on the PHP frameworks at least

00:43:08,500 --> 00:43:12,220
and then instead we're we're just

00:43:10,420 --> 00:43:14,800
creating sort of restful web services

00:43:12,220 --> 00:43:17,500
that are going to be consumed by by

00:43:14,800 --> 00:43:19,210
JavaScript apps and you know I think

00:43:17,500 --> 00:43:21,400
that's a positive thing it makes it

00:43:19,210 --> 00:43:23,800
makes our life a bit easier Islam it

00:43:21,400 --> 00:43:27,100
less to worry about also in the under is

00:43:23,800 --> 00:43:28,930
not back and back Enders and front-end

00:43:27,100 --> 00:43:29,980
and front-end us and they have nothing

00:43:28,930 --> 00:43:31,660
to lose each other in the entire

00:43:29,980 --> 00:43:33,460
building one application so it's

00:43:31,660 --> 00:43:34,750
actually important that the whole

00:43:33,460 --> 00:43:40,360
application works and has a nice

00:43:34,750 --> 00:43:52,930
usability and if it makes sense to what

00:43:40,360 --> 00:43:59,260
is it cheers that was me we are just for

00:43:52,930 --> 00:44:02,260
bear so no another five know what I

00:43:59,260 --> 00:44:05,350
meant is so if it makes sense to

00:44:02,260 --> 00:44:06,910
actually put some stuff in the client

00:44:05,350 --> 00:44:08,860
and do fork some validation in the

00:44:06,910 --> 00:44:10,840
client or if you're building a google

00:44:08,860 --> 00:44:12,850
docs thing then of course you have been

00:44:10,840 --> 00:44:15,660
lots of JavaScript if you are building a

00:44:12,850 --> 00:44:19,660
newspaper page you probably don't have

00:44:15,660 --> 00:44:21,040
that so things that other comes down to

00:44:19,660 --> 00:44:22,510
the balance of what it is that you're

00:44:21,040 --> 00:44:24,700
trying to build if you're building

00:44:22,510 --> 00:44:26,500
something that's very much open and

00:44:24,700 --> 00:44:27,910
powered by an API then it sort of makes

00:44:26,500 --> 00:44:30,250
sense to you something like backbone

00:44:27,910 --> 00:44:32,710
because then you can sort of implement

00:44:30,250 --> 00:44:34,210
the synthetic clients that implements

00:44:32,710 --> 00:44:36,340
out API that other people can see and

00:44:34,210 --> 00:44:38,650
replicate one thing which concerns me

00:44:36,340 --> 00:44:40,300
which I've seen recently is commercial

00:44:38,650 --> 00:44:42,190
products where they're putting all of

00:44:40,300 --> 00:44:44,830
their business logic into the likes of

00:44:42,190 --> 00:44:46,960
backbone and I can do a view source and

00:44:44,830 --> 00:44:48,670
if I rep reduce their database schema

00:44:46,960 --> 00:44:50,440
behind the scenes I've got a working

00:44:48,670 --> 00:44:51,850
copy of their application I think

00:44:50,440 --> 00:44:53,140
there's a balance to be hard and it's

00:44:51,850 --> 00:44:56,349
just to try and be careful of that

00:44:53,140 --> 00:45:00,239
balance really sounds like fun

00:44:56,349 --> 00:45:03,970
I mean the future is quite clear more

00:45:00,239 --> 00:45:07,239
clients less server server side more

00:45:03,970 --> 00:45:12,489
focused on API especially for in on

00:45:07,239 --> 00:45:15,670
mobile application so that's the future

00:45:12,489 --> 00:45:18,220
so that's the present is the present

00:45:15,670 --> 00:45:24,009
yeah so we've time for one more question

00:45:18,220 --> 00:45:28,739
is one more audience question now we're

00:45:24,009 --> 00:45:28,739
good okay thank you very much guys yes

00:45:35,390 --> 00:45:37,450
you

00:45:45,019 --> 00:45:47,079

YouTube URL: https://www.youtube.com/watch?v=ovVLSynGcd8


