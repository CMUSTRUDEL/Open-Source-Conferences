Title: PHP UK Conference 2013 - Helgi Thorbjoernsson - Cranking Nginx up to 11
Publication date: 2013-04-22
Playlist: PHP UK Conference 2013
Description: 
	You may see Nginx as the run of the mill web server, geared towards serving up static files and your language of choice but there is so much more to Nginx than that. Under the hood is a treasure trove of additional features and configurations that can help you take things to the next level. This includes having Nginx talk directly to Memcached / Redis (perfect for APIs, without hitting your application), proxy functionality, GeoIP, Lua in the config, MogileFS file serving, improved headers manipulation, and the less useful yet cool ability to query Drizzle / Postgres directly. This is only the tip of the iceberg. I will take you one a journey to explore the hidden corners of Nginx and show you how to crank it up to 11!

Slides: https://speakerdeck.com/helgi/cranking-nginx-to-11
Captions: 
	00:00:14,309 --> 00:00:21,610
welcome to cranking engine x2 11 my name

00:00:18,400 --> 00:00:24,490
is helgi on this fellow here so i

00:00:21,610 --> 00:00:27,130
co-founded Orchestra I yo peace be

00:00:24,490 --> 00:00:29,320
platform-as-a-service we got bought by

00:00:27,130 --> 00:00:32,439
engineered and we're sponsoring social

00:00:29,320 --> 00:00:35,680
drinks tonight a belief I'm paired

00:00:32,439 --> 00:00:38,920
developer from Iceland originally for

00:00:35,680 --> 00:00:40,239
live in dublin and i'm at h on twitter

00:00:38,920 --> 00:00:42,700
so if you want to haggle me during the

00:00:40,239 --> 00:00:44,800
talk or asking questions just tweet at

00:00:42,700 --> 00:00:48,640
me no problem or if you want to tell me

00:00:44,800 --> 00:00:50,440
I'm you know bad at this whatever anyway

00:00:48,640 --> 00:00:54,129
engine X so how many people who are

00:00:50,440 --> 00:00:56,589
actually using engine X not everyone

00:00:54,129 --> 00:00:59,370
alright just a fair warning this is not

00:00:56,589 --> 00:01:03,239
a simple version of my talk this is like

00:00:59,370 --> 00:01:05,530
the advanced version so to speak so I

00:01:03,239 --> 00:01:07,480
might actually do a simple version at

00:01:05,530 --> 00:01:09,930
the uncle so if anyone is actually

00:01:07,480 --> 00:01:13,650
willing to you know go to that as well

00:01:09,930 --> 00:01:17,050
anyway engine X is it just a web server

00:01:13,650 --> 00:01:19,600
it really isn't because it's a web

00:01:17,050 --> 00:01:22,320
server it's a proxy it's a reverse Cash

00:01:19,600 --> 00:01:25,090
it's a male proxy and a few other things

00:01:22,320 --> 00:01:28,390
and I'll go through a few of those

00:01:25,090 --> 00:01:30,520
things through this talk but one of the

00:01:28,390 --> 00:01:31,960
most important things I found when I was

00:01:30,520 --> 00:01:34,090
dealing with really complex web sites

00:01:31,960 --> 00:01:37,030
and kind of with really complex and

00:01:34,090 --> 00:01:38,890
genetic setups was that dealing with the

00:01:37,030 --> 00:01:42,190
tweaking and how I actually made that

00:01:38,890 --> 00:01:44,860
happen without taking engine X down so

00:01:42,190 --> 00:01:48,160
those of you that use Linux where with

00:01:44,860 --> 00:01:50,590
engine X will no conflict test please

00:01:48,160 --> 00:01:52,960
through boom to so convict test is one

00:01:50,590 --> 00:01:55,390
of the most powerful tools you have with

00:01:52,960 --> 00:01:57,220
engine X so you don't have the silly

00:01:55,390 --> 00:01:59,530
little developer kind of accidentally

00:01:57,220 --> 00:02:02,680
doing a typo and taking down your whole

00:01:59,530 --> 00:02:05,380
website so running convict test after

00:02:02,680 --> 00:02:08,170
everything you do is really important so

00:02:05,380 --> 00:02:10,149
it would be service engine ex-convict

00:02:08,170 --> 00:02:13,870
test and they would tell you oh you have

00:02:10,149 --> 00:02:16,150
a typo but that's not really the

00:02:13,870 --> 00:02:19,510
interesting bit about the whole tweaking

00:02:16,150 --> 00:02:22,120
bit when you reload your config so you

00:02:19,510 --> 00:02:23,379
do service engine X reload it's really

00:02:22,120 --> 00:02:25,850
interesting to kind of figure out how

00:02:23,379 --> 00:02:27,140
that works and how that's been effect

00:02:25,850 --> 00:02:29,360
the way you're dealing with your

00:02:27,140 --> 00:02:33,440
configuration and how you're just

00:02:29,360 --> 00:02:35,030
working with engine X so the reload is

00:02:33,440 --> 00:02:38,570
what they call in the links world the

00:02:35,030 --> 00:02:41,150
hub signal and what happens is that when

00:02:38,570 --> 00:02:43,280
you reload reloading the config so

00:02:41,150 --> 00:02:45,140
engine X has a master process and then

00:02:43,280 --> 00:02:47,690
it spawns off all the children all the

00:02:45,140 --> 00:02:51,160
workers so when you're reloading you're

00:02:47,690 --> 00:02:54,590
actually spawning up new workers and

00:02:51,160 --> 00:02:57,110
attempting to put them into rotation so

00:02:54,590 --> 00:02:59,810
engine X slowly siphons off the old

00:02:57,110 --> 00:03:01,910
workers and basically lets them finish

00:02:59,810 --> 00:03:03,950
off the work they're doing all the HTTP

00:03:01,910 --> 00:03:05,840
requests they have going on you'll

00:03:03,950 --> 00:03:08,150
finish that and kind of slowly switch

00:03:05,840 --> 00:03:11,060
over to the new ones so it's good to

00:03:08,150 --> 00:03:13,760
know kind of how the inner workings are

00:03:11,060 --> 00:03:18,770
doing it because you'll have to debug

00:03:13,760 --> 00:03:21,050
this at some point but you can actually

00:03:18,770 --> 00:03:24,230
also do upgrades you can do life and

00:03:21,050 --> 00:03:26,570
genetics binary upgrades without taking

00:03:24,230 --> 00:03:28,820
your website down so you can actually

00:03:26,570 --> 00:03:33,920
upgrade engine X on the Box on the fly

00:03:28,820 --> 00:03:36,620
without anything going down so they use

00:03:33,920 --> 00:03:38,750
the user to signal there's a lot of kind

00:03:36,620 --> 00:03:40,460
of magic you have to do on the back end

00:03:38,750 --> 00:03:42,470
foremost distros will have that

00:03:40,460 --> 00:03:44,150
functionality for you or ready for again

00:03:42,470 --> 00:03:47,360
it's really really interesting to see

00:03:44,150 --> 00:03:49,760
how this thing works so you do a live

00:03:47,360 --> 00:03:51,410
upgrade and essentially what you're

00:03:49,760 --> 00:03:52,970
doing is that you're bringing up a new

00:03:51,410 --> 00:03:55,730
master now you're not just dealing with

00:03:52,970 --> 00:03:57,830
new children or new workers you're

00:03:55,730 --> 00:03:59,810
bringing up a whole new master she end

00:03:57,830 --> 00:04:03,230
up with two engine X master processes

00:03:59,810 --> 00:04:05,240
working side by side and it will try to

00:04:03,230 --> 00:04:08,420
actually give the control over to the

00:04:05,240 --> 00:04:10,520
new master with the new binary if that

00:04:08,420 --> 00:04:12,920
fails things should just fall back on

00:04:10,520 --> 00:04:15,890
using the old one so I will attempt to

00:04:12,920 --> 00:04:17,930
give over control if that works it will

00:04:15,890 --> 00:04:20,510
slowly start closing its own connections

00:04:17,930 --> 00:04:23,080
and the new binary takes over all the

00:04:20,510 --> 00:04:25,250
connections so these are kind of like

00:04:23,080 --> 00:04:26,990
really important bits to know when

00:04:25,250 --> 00:04:29,050
you're actually trying to work with in

00:04:26,990 --> 00:04:30,879
genetics

00:04:29,050 --> 00:04:33,580
they seem a little bit weird at the

00:04:30,879 --> 00:04:37,629
start of talk but it's good to know what

00:04:33,580 --> 00:04:39,629
you're dealing with so one of the things

00:04:37,629 --> 00:04:42,280
I have to deal with a lot is debugging

00:04:39,629 --> 00:04:44,530
debugging HTTP requests for debugging

00:04:42,280 --> 00:04:47,440
just what the hell is happening on the

00:04:44,530 --> 00:04:49,419
web server since I helped run obviously

00:04:47,440 --> 00:04:51,099
I platform-as-a-service then I have to

00:04:49,419 --> 00:04:53,229
deal with a lot of code that other

00:04:51,099 --> 00:04:55,539
people have written but they kind of

00:04:53,229 --> 00:04:57,340
tend to blame the web server or the

00:04:55,539 --> 00:04:59,770
hosting company for their problems so

00:04:57,340 --> 00:05:01,840
you have to be able to debug properly so

00:04:59,770 --> 00:05:04,210
one of the things you can do you have to

00:05:01,840 --> 00:05:06,520
compile with debug to get the debug kind

00:05:04,210 --> 00:05:08,530
of tokens and all that stuff into your

00:05:06,520 --> 00:05:11,440
logs but one of the things you can do is

00:05:08,530 --> 00:05:14,889
set the log level to debug instead of

00:05:11,440 --> 00:05:17,469
critical or notice or so on well you may

00:05:14,889 --> 00:05:19,180
not want to do that all the time you may

00:05:17,469 --> 00:05:21,879
not want to actually be able to do that

00:05:19,180 --> 00:05:23,860
for all the requests that are coming in

00:05:21,879 --> 00:05:26,259
because I only want to see I don't want

00:05:23,860 --> 00:05:28,449
to fill my logs with information from

00:05:26,259 --> 00:05:32,169
the millions of users that I have for

00:05:28,449 --> 00:05:33,039
thousands maybe so what you can do is

00:05:32,169 --> 00:05:36,400
that you can actually start using

00:05:33,039 --> 00:05:38,289
connection specific things and by the

00:05:36,400 --> 00:05:41,199
way if anyone has any questions or if

00:05:38,289 --> 00:05:46,750
I'm going too fast to stop me like I

00:05:41,199 --> 00:05:48,639
said this is an advanced talk so you can

00:05:46,750 --> 00:05:51,009
actually set debug connection and that

00:05:48,639 --> 00:05:56,139
automatically enables the debug logging

00:05:51,009 --> 00:05:57,909
only for specific IPS or subnets so

00:05:56,139 --> 00:05:59,529
basically you can say all my developers

00:05:57,909 --> 00:06:01,479
I want debug the information when they

00:05:59,529 --> 00:06:03,400
are hitting my web server but for

00:06:01,479 --> 00:06:05,740
everyone else I don't care about it

00:06:03,400 --> 00:06:08,229
because I want to see what only that

00:06:05,740 --> 00:06:11,169
request is doing or if I just want my

00:06:08,229 --> 00:06:14,729
own IP to generate kind of those debug

00:06:11,169 --> 00:06:16,750
logs you just put in your own IP there

00:06:14,729 --> 00:06:19,870
so that kind of gives you a lot of

00:06:16,750 --> 00:06:25,300
information that you can figure a lot

00:06:19,870 --> 00:06:27,129
more low-level things out but also when

00:06:25,300 --> 00:06:29,469
you're dealing with rewrite rules so

00:06:27,129 --> 00:06:31,840
engine access rewrite rules built in so

00:06:29,469 --> 00:06:34,029
you can easily do rewrite rules and all

00:06:31,840 --> 00:06:37,469
that kind of magic that apache you'd

00:06:34,029 --> 00:06:37,469
have to enable mod rewrite

00:06:37,870 --> 00:06:41,860
for what you can do what the main

00:06:39,760 --> 00:06:44,740
problem with rewrite rules is that how

00:06:41,860 --> 00:06:47,110
do I debug it basically for most

00:06:44,740 --> 00:06:49,120
developers that is going to be oh i

00:06:47,110 --> 00:06:53,200
wrote a rule and it just doesn't work

00:06:49,120 --> 00:06:55,870
why doesn't it work I don't know you

00:06:53,200 --> 00:06:59,050
don't really get any information so what

00:06:55,870 --> 00:07:02,490
you have to do is put the rewrite log on

00:06:59,050 --> 00:07:06,160
in engine X and put notice level on

00:07:02,490 --> 00:07:09,310
because all the rewrite log level

00:07:06,160 --> 00:07:11,530
information all the problems and any

00:07:09,310 --> 00:07:13,150
kind of information related to it it's

00:07:11,530 --> 00:07:15,700
going to be a notice level we have to

00:07:13,150 --> 00:07:17,740
turn on the rewrite log for that kind of

00:07:15,700 --> 00:07:21,700
pop up otherwise engine X is going to

00:07:17,740 --> 00:07:23,440
suppress it so it's really really useful

00:07:21,700 --> 00:07:25,090
when you're actually trying to both move

00:07:23,440 --> 00:07:26,770
from Apache to engine X and your

00:07:25,090 --> 00:07:29,020
likewise is not working because they

00:07:26,770 --> 00:07:30,550
used to work on Apache and also if

00:07:29,020 --> 00:07:36,580
you're just developing generally new

00:07:30,550 --> 00:07:38,290
things so the rewrite module like I said

00:07:36,580 --> 00:07:42,700
it's a it's just a regular expression

00:07:38,290 --> 00:07:45,760
pcre but the the biggest part about that

00:07:42,700 --> 00:07:48,250
is that the rewrite module is actually

00:07:45,760 --> 00:07:51,400
responsible for all if statements file

00:07:48,250 --> 00:07:55,270
exists checks returned what have you so

00:07:51,400 --> 00:07:59,380
you can do a return 404 and it's the

00:07:55,270 --> 00:08:02,650
rewrite module doing that magic so also

00:07:59,380 --> 00:08:04,120
what you get through it is that most

00:08:02,650 --> 00:08:06,430
things in engine X are going to be

00:08:04,120 --> 00:08:08,530
engine X variables things that you can

00:08:06,430 --> 00:08:11,080
actually introspect on things that you

00:08:08,530 --> 00:08:15,120
can do reread rules based on these

00:08:11,080 --> 00:08:17,650
values so you can have the user agent

00:08:15,120 --> 00:08:20,800
variable you can have the HTTP cookie

00:08:17,650 --> 00:08:24,220
one the URI the URI is the unprocessed

00:08:20,800 --> 00:08:27,270
version if I recall and you can also set

00:08:24,220 --> 00:08:30,550
your own variables it can either be

00:08:27,270 --> 00:08:32,530
setting attacks directly it can be based

00:08:30,550 --> 00:08:35,680
on a cookie information that you have

00:08:32,530 --> 00:08:37,420
processed in lua it can be whatever you

00:08:35,680 --> 00:08:40,270
want to and so you can set a variable

00:08:37,420 --> 00:08:42,280
like that and then later in the config

00:08:40,270 --> 00:08:43,780
you can actually use that to do some

00:08:42,280 --> 00:08:44,830
checks so you don't have to be doing the

00:08:43,780 --> 00:08:47,020
processing / no

00:08:44,830 --> 00:08:51,370
again so it gives you a lot of power

00:08:47,020 --> 00:08:55,900
with your conflict level stuff but a

00:08:51,370 --> 00:08:58,630
good kind of example of using engine X

00:08:55,900 --> 00:09:01,630
variables and the rewrite module

00:08:58,630 --> 00:09:04,660
together here I'm just forwarding the

00:09:01,630 --> 00:09:08,070
domain for my blog and I want to forward

00:09:04,660 --> 00:09:10,720
that dub dub dub Hal gws to hell GWS

00:09:08,070 --> 00:09:12,310
because obviously I want all the SEO and

00:09:10,720 --> 00:09:15,430
SME and you know all that kind of

00:09:12,310 --> 00:09:17,980
magical buzz-worthy things so what i'm

00:09:15,430 --> 00:09:21,910
doing here is that I'm using the scheme

00:09:17,980 --> 00:09:25,480
and X variable which would be HTTP or

00:09:21,910 --> 00:09:28,090
HTTPS the request-uri which would just

00:09:25,480 --> 00:09:30,570
include all the get variables or what

00:09:28,090 --> 00:09:34,750
have you anything that you pass in and

00:09:30,570 --> 00:09:38,530
I'm returning up 301 HTTP code so you

00:09:34,750 --> 00:09:43,570
can return any sort of HTTP code with

00:09:38,530 --> 00:09:45,130
return so you can do 203 1205 whatever

00:09:43,570 --> 00:09:48,910
you want and you can include whatever

00:09:45,130 --> 00:09:51,070
you want behind here as well so it kind

00:09:48,910 --> 00:09:53,950
of shows the usefulness of these

00:09:51,070 --> 00:09:59,050
variables and that the rear end module I

00:09:53,950 --> 00:10:01,750
guess so moving on from there a little

00:09:59,050 --> 00:10:06,280
bit onto the load balancing anyone using

00:10:01,750 --> 00:10:09,910
engine extra load balancing two people

00:10:06,280 --> 00:10:12,940
Wow all right I'm gonna educate everyone

00:10:09,910 --> 00:10:15,580
in here all right so here's a really

00:10:12,940 --> 00:10:19,660
really simple round-robin approach to

00:10:15,580 --> 00:10:21,910
load balancing in energy next you just

00:10:19,660 --> 00:10:24,490
define an upstream with whatever name

00:10:21,910 --> 00:10:27,490
you want and you can define any server

00:10:24,490 --> 00:10:28,889
you want by the hostname it doesn't have

00:10:27,490 --> 00:10:31,980
to be anything more than that

00:10:28,889 --> 00:10:34,559
early so you just define it and it just

00:10:31,980 --> 00:10:37,529
sends people to it randomly it's just a

00:10:34,559 --> 00:10:39,389
round-robin whatever is available but

00:10:37,529 --> 00:10:41,759
not everyone wants that because some

00:10:39,389 --> 00:10:44,879
people believe they can do load

00:10:41,759 --> 00:10:46,709
balancing and then do HTTP sessions on

00:10:44,879 --> 00:10:50,910
the machines instead of using something

00:10:46,709 --> 00:10:52,290
like memcache so that is or so on so for

00:10:50,910 --> 00:10:56,699
those people we have to use something

00:10:52,290 --> 00:10:58,290
called IP hash what that's going to do

00:10:56,699 --> 00:11:01,379
is that it's going to make sure that you

00:10:58,290 --> 00:11:05,879
always go to the same server for as long

00:11:01,379 --> 00:11:08,220
as possible so if I hit dub-dub-dub one

00:11:05,879 --> 00:11:11,040
my next request is going to be ducked up

00:11:08,220 --> 00:11:13,319
that one us well but in the previous

00:11:11,040 --> 00:11:17,910
example it would have just taken me to

00:11:13,319 --> 00:11:20,999
which everyone was there but at the same

00:11:17,910 --> 00:11:22,230
time not all servers are made equal some

00:11:20,999 --> 00:11:28,290
of these servers might be more powerful

00:11:22,230 --> 00:11:31,139
than other ones so for that we define

00:11:28,290 --> 00:11:33,809
these servers this is like a normal one

00:11:31,139 --> 00:11:36,029
this one has a higher weight and this

00:11:33,809 --> 00:11:38,339
one has a lower weight so what we're

00:11:36,029 --> 00:11:40,110
doing here is telling engine acts this

00:11:38,339 --> 00:11:41,669
one should get more traffic this one's

00:11:40,110 --> 00:11:46,439
specifically here should get more

00:11:41,669 --> 00:11:48,959
traffic and after max two failures of a

00:11:46,439 --> 00:11:50,989
time out of 15 seconds we should stop

00:11:48,959 --> 00:11:55,470
sending traffic there for a while and

00:11:50,989 --> 00:11:57,869
this one would be different as well so

00:11:55,470 --> 00:11:59,819
originally until the development version

00:11:57,869 --> 00:12:03,660
of engine X you couldn't use the weight

00:11:59,819 --> 00:12:07,079
and IP hashing together so by default in

00:12:03,660 --> 00:12:09,749
NJ next to point at one point to this

00:12:07,079 --> 00:12:12,629
here will all be round robin kind of

00:12:09,749 --> 00:12:14,699
stuff but now you can use the IP hash

00:12:12,629 --> 00:12:16,499
with it as well so you're getting a lot

00:12:14,699 --> 00:12:18,720
of power from your load balancing in

00:12:16,499 --> 00:12:20,249
engine X while it may not be the most

00:12:18,720 --> 00:12:22,679
perfect load balancing solution out

00:12:20,249 --> 00:12:25,319
there it gives you a damn good

00:12:22,679 --> 00:12:27,239
performance out of it I use that for

00:12:25,319 --> 00:12:29,399
example in Orchestra load balance bunch

00:12:27,239 --> 00:12:31,709
of things all these examples that i'm

00:12:29,399 --> 00:12:33,720
showing here are used in orchestra in

00:12:31,709 --> 00:12:37,990
some shape or form

00:12:33,720 --> 00:12:46,300
um any questions everyone glaze hung

00:12:37,990 --> 00:12:51,759
over yes no jaysus huh what makes a fail

00:12:46,300 --> 00:12:54,910
a non 200 response usually or just a

00:12:51,759 --> 00:12:56,470
time up it's a bit you can configure it

00:12:54,910 --> 00:12:58,809
a little bit better so failure can be

00:12:56,470 --> 00:13:00,249
whatever really you want to you just

00:12:58,809 --> 00:13:03,399
need to configure that kind of a little

00:13:00,249 --> 00:13:05,529
bit more granular level but it's usually

00:13:03,399 --> 00:13:09,809
going for how you're getting a timeout

00:13:05,529 --> 00:13:13,119
just in general like a 504 essentially

00:13:09,809 --> 00:13:19,959
any other questions no all right a

00:13:13,119 --> 00:13:25,269
soldier on caches so you can use engine

00:13:19,959 --> 00:13:29,019
acts as a reverse proxy as well well

00:13:25,269 --> 00:13:34,509
these lights kind of kill this all right

00:13:29,019 --> 00:13:36,899
so here I'm actually setting this is

00:13:34,509 --> 00:13:38,920
something I use as well in production

00:13:36,899 --> 00:13:40,420
scrubbed it out a little bit but

00:13:38,920 --> 00:13:42,939
generally what I'm doing is that I'm

00:13:40,420 --> 00:13:45,490
setting the pecs proxy headers the real

00:13:42,939 --> 00:13:48,189
IP so I'm taking the remote address the

00:13:45,490 --> 00:13:50,709
engine X got from the user the forwards

00:13:48,189 --> 00:13:53,559
for headers so I'm just passing that

00:13:50,709 --> 00:13:55,360
along as well so all our PHP scripts

00:13:53,559 --> 00:13:58,449
still work properly when it's checking

00:13:55,360 --> 00:14:02,049
for like what's your real IP how can i

00:13:58,449 --> 00:14:04,569
authenticate who you are so on I set the

00:14:02,049 --> 00:14:06,399
host as well just so it doesn't

00:14:04,569 --> 00:14:09,149
that up on the way so it's not changing

00:14:06,399 --> 00:14:13,959
the host header somewhere along the way

00:14:09,149 --> 00:14:17,019
but here's here's the magic over here

00:14:13,959 --> 00:14:19,779
i'm saying i want so this levels means

00:14:17,019 --> 00:14:23,170
to directory deep I'm setting the

00:14:19,779 --> 00:14:26,769
Keystone called my cash two gigabytes

00:14:23,170 --> 00:14:29,679
maximum and after six hundred minutes it

00:14:26,769 --> 00:14:33,220
becomes inactive so we clean out things

00:14:29,679 --> 00:14:35,259
that are 600 minute old and here we're

00:14:33,220 --> 00:14:37,480
just setting the tent path but proxy

00:14:35,259 --> 00:14:39,790
cache you stale is kind of a magical

00:14:37,480 --> 00:14:42,240
thing you'd see that in varnish a lot

00:14:39,790 --> 00:14:45,850
but what it does is that allows you to

00:14:42,240 --> 00:14:46,960
serve stale content while another

00:14:45,850 --> 00:14:49,750
processes up

00:14:46,960 --> 00:14:53,290
is updating the content that it's kind

00:14:49,750 --> 00:14:55,120
of in between so it comes it's a slam

00:14:53,290 --> 00:14:58,240
protection essentially it makes sure

00:14:55,120 --> 00:15:00,640
that as soon as you need new content you

00:14:58,240 --> 00:15:02,290
don't get 10,000 connections back to

00:15:00,640 --> 00:15:04,090
your back-end server asking for the same

00:15:02,290 --> 00:15:07,480
thing so it's just going to be one

00:15:04,090 --> 00:15:11,230
thread going hey give me that and at the

00:15:07,480 --> 00:15:15,730
same time all the other 99999 are going

00:15:11,230 --> 00:15:19,650
to serve upscale content and down here

00:15:15,730 --> 00:15:24,130
we're proxy passing example net and

00:15:19,650 --> 00:15:28,630
using the defined cash up here we're

00:15:24,130 --> 00:15:33,340
saying the cash is for 203 or two or

00:15:28,630 --> 00:15:35,980
valid for 60 minutes and 40 force is one

00:15:33,340 --> 00:15:40,270
minute so you can override the default

00:15:35,980 --> 00:15:44,290
inactive setting essentially so you say

00:15:40,270 --> 00:15:46,180
404s have some sort of a caching but I

00:15:44,290 --> 00:15:49,870
only wanted for one minute or we could

00:15:46,180 --> 00:15:52,450
say 10 seconds or you can cash more than

00:15:49,870 --> 00:15:54,370
200 you can cast 301 if you want as well

00:15:52,450 --> 00:16:02,220
so there's a few things you can kind of

00:15:54,370 --> 00:16:02,220
mess around with any questions comments

00:16:02,550 --> 00:16:08,080
low-income

00:16:05,120 --> 00:16:11,330
why catch a 404 for only a minute

00:16:08,080 --> 00:16:14,270
because potentially that 404 is going to

00:16:11,330 --> 00:16:17,270
be real content within a minute so you

00:16:14,270 --> 00:16:22,070
the assumption is is that if you're

00:16:17,270 --> 00:16:24,200
unsure if an image is gone for like a

00:16:22,070 --> 00:16:27,320
legit reason or not so you kind of want

00:16:24,200 --> 00:16:28,940
to keep the four fours to a small amount

00:16:27,320 --> 00:16:30,529
as you can because you don't want your

00:16:28,940 --> 00:16:33,650
euro in the situation where you go

00:16:30,529 --> 00:16:36,589
alright we catch a 404 for an hour and

00:16:33,650 --> 00:16:39,260
then a designer or a developer uploads

00:16:36,589 --> 00:16:41,450
like a PDF or whatever and no one can

00:16:39,260 --> 00:16:43,880
access it unless you actually restart in

00:16:41,450 --> 00:16:47,480
genetics so it's that kind of stuff that

00:16:43,880 --> 00:16:50,240
you have to deal with but most maybe for

00:16:47,480 --> 00:16:53,060
a lot of websites a 404 is something you

00:16:50,240 --> 00:16:55,550
can catch for like 10 days depends on

00:16:53,060 --> 00:16:57,080
how you operate the website really but

00:16:55,550 --> 00:16:59,630
it kind of just shows that you can set

00:16:57,080 --> 00:17:03,710
different values for different header or

00:16:59,630 --> 00:17:07,780
four different responses any other

00:17:03,710 --> 00:17:07,780
questions now

00:17:07,920 --> 00:17:12,210
so dealing with headers is an

00:17:09,900 --> 00:17:15,000
interesting one in engine X it has a

00:17:12,210 --> 00:17:17,790
really simple header kind of

00:17:15,000 --> 00:17:20,070
functionality in here i'm just setting a

00:17:17,790 --> 00:17:23,190
simple cookie called underscore shore

00:17:20,070 --> 00:17:26,280
equals one it's only active for two

00:17:23,190 --> 00:17:28,020
seconds and it's on the top path for

00:17:26,280 --> 00:17:30,900
whatever I set it on so in this case

00:17:28,020 --> 00:17:33,210
orchestras I oh so this is a really

00:17:30,900 --> 00:17:37,380
simple example of how you add headers in

00:17:33,210 --> 00:17:39,360
engine X well that's about it and i'm

00:17:37,380 --> 00:17:42,150
going to show you though a more powerful

00:17:39,360 --> 00:17:43,650
example of this and a bit the other one

00:17:42,150 --> 00:17:46,440
is that it has something called expires

00:17:43,650 --> 00:17:48,510
that you can set to one hour and just

00:17:46,440 --> 00:17:50,370
you can call it the future and it will

00:17:48,510 --> 00:17:53,160
just put it as far in the future as you

00:17:50,370 --> 00:17:57,060
can and it's for like images and stuff

00:17:53,160 --> 00:18:03,960
like that but kind of the coop it's kind

00:17:57,060 --> 00:18:05,610
of come in with the modules and to

00:18:03,960 --> 00:18:08,310
install modules and we're going to in

00:18:05,610 --> 00:18:11,940
like look at how to do the add another

00:18:08,310 --> 00:18:14,070
header module i guess in this case you

00:18:11,940 --> 00:18:18,390
actually have to have compiled your own

00:18:14,070 --> 00:18:20,040
enter next to usually add in modules so

00:18:18,390 --> 00:18:23,460
you go into your source directory for

00:18:20,040 --> 00:18:26,300
engine X and you go configure add module

00:18:23,460 --> 00:18:28,890
and on the location of the untoward

00:18:26,300 --> 00:18:32,400
module then you just make and make

00:18:28,890 --> 00:18:34,980
install so in this case it would be

00:18:32,400 --> 00:18:37,380
engine X HTTP headers more module and

00:18:34,980 --> 00:18:38,640
any kind of links up it in here you can

00:18:37,380 --> 00:18:41,430
just get them when I put the slides

00:18:38,640 --> 00:18:44,130
online as well but in this specific

00:18:41,430 --> 00:18:45,990
module you'd have to compile in but it

00:18:44,130 --> 00:18:48,480
kind of gives you a lot more

00:18:45,990 --> 00:18:51,210
functionality so engine X by default

00:18:48,480 --> 00:18:55,110
only has ADD header and those expires

00:18:51,210 --> 00:18:57,900
stuff this one allows you to it's called

00:18:55,110 --> 00:19:02,790
more set headers so my server is my temp

00:18:57,900 --> 00:19:05,190
temple and over here I can set more

00:19:02,790 --> 00:19:09,720
headers when you act this bar and I can

00:19:05,190 --> 00:19:14,600
set the content type 2 plane and CSS and

00:19:09,720 --> 00:19:17,910
so on and I can be setting specific

00:19:14,600 --> 00:19:23,980
returns for specific

00:19:17,910 --> 00:19:27,190
HTTP responses and in this case I'm only

00:19:23,980 --> 00:19:28,780
setting the output header thinking clear

00:19:27,190 --> 00:19:30,669
specific headers as well and that's

00:19:28,780 --> 00:19:33,880
something you can't do an engine X by

00:19:30,669 --> 00:19:35,950
default clearing headers one as you go

00:19:33,880 --> 00:19:38,860
along and you want to use engine X to

00:19:35,950 --> 00:19:40,840
kind of do the magical clearing without

00:19:38,860 --> 00:19:42,970
having to drop into PHP because you

00:19:40,840 --> 00:19:45,700
don't want that application to see it so

00:19:42,970 --> 00:19:50,230
an example of that would be if you have

00:19:45,700 --> 00:19:52,030
a load balancer or proxy and there's

00:19:50,230 --> 00:19:53,559
some header information you just want to

00:19:52,030 --> 00:19:55,299
drop because that's an authentication

00:19:53,559 --> 00:19:58,330
header that you don't want the PHP

00:19:55,299 --> 00:19:59,950
application to ever see then you can use

00:19:58,330 --> 00:20:02,350
something like clear headers and just

00:19:59,950 --> 00:20:05,230
say clear these two headers for transfer

00:20:02,350 --> 00:20:09,929
encoding and a content type I don't want

00:20:05,230 --> 00:20:09,929
that to get back to the my application

00:20:09,990 --> 00:20:16,360
so there's also specific things you can

00:20:13,210 --> 00:20:18,669
do there's a difference between output

00:20:16,360 --> 00:20:20,470
and input headers outputting like what

00:20:18,669 --> 00:20:22,000
you give the user and that was this

00:20:20,470 --> 00:20:24,100
example what you're giving the users

00:20:22,000 --> 00:20:27,669
this is the input example what comes in

00:20:24,100 --> 00:20:31,270
and you're setting the host so you were

00:20:27,669 --> 00:20:33,580
bluffing the host to London because we

00:20:31,270 --> 00:20:35,230
want the server to think their house is

00:20:33,580 --> 00:20:37,500
London well that's what they're getting

00:20:35,230 --> 00:20:40,600
that's what people are requesting and

00:20:37,500 --> 00:20:43,480
here we're setting the input header this

00:20:40,600 --> 00:20:46,600
is what the user has been the user which

00:20:43,480 --> 00:20:50,190
is what we over road but here we're

00:20:46,600 --> 00:20:52,929
using more set input with the stash our

00:20:50,190 --> 00:20:55,900
and it will only override it if it

00:20:52,929 --> 00:20:59,110
exists so we're not actually injecting a

00:20:55,900 --> 00:21:02,140
header in there unless it it exists and

00:20:59,110 --> 00:21:03,460
we actually want to change it so kind of

00:21:02,140 --> 00:21:07,299
these kind of had like these kind of

00:21:03,460 --> 00:21:09,850
modules give you a lot of power and I'm

00:21:07,299 --> 00:21:10,809
gonna talk about a few more now and a

00:21:09,850 --> 00:21:13,000
little bit of a kind of blue sky

00:21:10,809 --> 00:21:14,860
thinking has anyone actually used any

00:21:13,000 --> 00:21:19,000
modules with engine acts those of you

00:21:14,860 --> 00:21:20,990
they actually use energy x12 everyone in

00:21:19,000 --> 00:21:24,630
the back

00:21:20,990 --> 00:21:27,450
cool kids in the back all right so a bit

00:21:24,630 --> 00:21:30,390
of blue sky thinking who here uses

00:21:27,450 --> 00:21:34,290
memcache with their application look a

00:21:30,390 --> 00:21:36,930
few and anyone uses Redis with few as

00:21:34,290 --> 00:21:39,300
well alright so usually you're obviously

00:21:36,930 --> 00:21:42,780
using that to kind of gain speed and so

00:21:39,300 --> 00:21:44,190
on and this is the usual request flow

00:21:42,780 --> 00:21:47,220
that you have if you're dealing with

00:21:44,190 --> 00:21:50,730
memcache you get a request coming into

00:21:47,220 --> 00:21:53,220
engine X it drops into PHP and the PHP

00:21:50,730 --> 00:21:54,330
is going to talk to memcache and from

00:21:53,220 --> 00:21:56,610
there it's obviously then I'm going to

00:21:54,330 --> 00:22:00,240
go back with the content with from

00:21:56,610 --> 00:22:02,670
whatever what's going on there but what

00:22:00,240 --> 00:22:06,540
we can do is something a little bit

00:22:02,670 --> 00:22:09,680
different now imagine if you had an API

00:22:06,540 --> 00:22:12,960
that you wanted to perform really well

00:22:09,680 --> 00:22:15,810
what if your API didn't have to talk to

00:22:12,960 --> 00:22:17,700
PHP most of the time what if memcache

00:22:15,810 --> 00:22:20,160
contain most of the data that you need

00:22:17,700 --> 00:22:23,280
it an engine X could just talk directly

00:22:20,160 --> 00:22:26,580
to memcache for you as long as it

00:22:23,280 --> 00:22:29,100
understood the structure of your API and

00:22:26,580 --> 00:22:31,940
knew that oh I have a request here thus

00:22:29,100 --> 00:22:34,740
I'm going to request this memcache key

00:22:31,940 --> 00:22:36,570
that's going to cut PHP out of the

00:22:34,740 --> 00:22:40,530
equation the things are going to speed

00:22:36,570 --> 00:22:43,410
up dramatically so in this scenario what

00:22:40,530 --> 00:22:45,240
you can do and genetics is talking to

00:22:43,410 --> 00:22:47,880
memcache and they're talking together

00:22:45,240 --> 00:22:49,650
all the time they're best buddies but

00:22:47,880 --> 00:22:52,650
when memcache doesn't actually have the

00:22:49,650 --> 00:22:55,740
value and genetics will actually start

00:22:52,650 --> 00:22:59,400
talking to PHP and we're expecting PHP

00:22:55,740 --> 00:23:02,160
to insert the new value into memcache so

00:22:59,400 --> 00:23:04,740
for the next request and Jax can talk to

00:23:02,160 --> 00:23:06,990
them cash directly it's the kind of

00:23:04,740 --> 00:23:09,000
scenario that you think about oh I'm

00:23:06,990 --> 00:23:11,760
always trying to speed up my application

00:23:09,000 --> 00:23:19,380
and this is like the perfect way cut out

00:23:11,760 --> 00:23:22,560
the actual slope it PHP so there's kind

00:23:19,380 --> 00:23:25,950
of a traditional engine X talking to

00:23:22,560 --> 00:23:28,950
memcache in this scenario with the

00:23:25,950 --> 00:23:30,150
default memcache module there are a few

00:23:28,950 --> 00:23:31,740
other ones that are a little bit better

00:23:30,150 --> 00:23:33,270
but this is the default one that you

00:23:31,740 --> 00:23:36,090
actually get with engine X without

00:23:33,270 --> 00:23:38,610
having to bother with it what you have

00:23:36,090 --> 00:23:41,970
to do is eat the request if the request

00:23:38,610 --> 00:23:44,730
is not a get method essentially we will

00:23:41,970 --> 00:23:47,460
fall back to the fast CGI stuff at the

00:23:44,730 --> 00:23:50,760
bottom so essentially if it's the post

00:23:47,460 --> 00:23:53,790
request I want to talk to PHP we're from

00:23:50,760 --> 00:23:56,490
here on we need to deal with all the

00:23:53,790 --> 00:23:59,220
minor types sign if mime cash was

00:23:56,490 --> 00:24:01,710
actually containing XML or JSON or other

00:23:59,220 --> 00:24:05,370
things like that we're gonna have to go

00:24:01,710 --> 00:24:07,620
oh okay arcs which is just the argument

00:24:05,370 --> 00:24:09,780
variable for engine X it will contain

00:24:07,620 --> 00:24:13,890
all the Ark's that you have that you

00:24:09,780 --> 00:24:16,860
passing in in your URL and we check o is

00:24:13,890 --> 00:24:19,740
the format equal Jason okay so we'll do

00:24:16,860 --> 00:24:24,000
a rewrite rule that will change the URI

00:24:19,740 --> 00:24:26,100
and add appendage ason behind it and

00:24:24,000 --> 00:24:28,560
then we'll break and we'll stop

00:24:26,100 --> 00:24:32,040
processing more of these things we won't

00:24:28,560 --> 00:24:35,540
do more rewrite rules will check the

00:24:32,040 --> 00:24:37,860
same for xml and HTML and if it passes

00:24:35,540 --> 00:24:39,810
it passes through all these are only

00:24:37,860 --> 00:24:41,880
thing we're doing here is fixing up the

00:24:39,810 --> 00:24:44,640
rewrite rules or setting a default type

00:24:41,880 --> 00:24:47,940
with the proper content type and

00:24:44,640 --> 00:24:50,910
character set and that's about it the

00:24:47,940 --> 00:24:56,580
magic sauce is down here which on this

00:24:50,910 --> 00:25:00,000
slide I kind of broke out so here as i

00:24:56,580 --> 00:25:01,110
said earlier on using the set magic it's

00:25:00,000 --> 00:25:03,960
kind of useful because in this case

00:25:01,110 --> 00:25:07,560
we're doing sat memcache key and we're

00:25:03,960 --> 00:25:09,960
saying the uri actual actual actual URL

00:25:07,560 --> 00:25:15,920
and all the arguments that come after it

00:25:09,960 --> 00:25:20,570
so / helgi ? you know hung over maybe

00:25:15,920 --> 00:25:20,570
then all of that would be saved here and

00:25:20,720 --> 00:25:25,590
on this module specifically needs you to

00:25:23,670 --> 00:25:27,520
set that key for this allows you to set

00:25:25,590 --> 00:25:30,310
it only to you or I if you only want the

00:25:27,520 --> 00:25:33,550
your eyes to be used as the key you can

00:25:30,310 --> 00:25:35,740
do you can set engine X dash in front of

00:25:33,550 --> 00:25:38,200
it if you want specifically only engine

00:25:35,740 --> 00:25:41,050
X to talk up talk to engine X keys as

00:25:38,200 --> 00:25:44,920
such so you'd have to just make PHP save

00:25:41,050 --> 00:25:47,190
things as engine X dash whatever so it

00:25:44,920 --> 00:25:50,170
gives you that kind of power and here

00:25:47,190 --> 00:25:51,820
the memcache pass is only just passing

00:25:50,170 --> 00:25:54,280
it because our memcache is on a local

00:25:51,820 --> 00:25:58,230
host but it could be whatever you want

00:25:54,280 --> 00:26:01,990
and we're saying for any kind of errors

00:25:58,230 --> 00:26:04,000
504 fours four or five that memcache is

00:26:01,990 --> 00:26:07,180
kind of coming across it will do the

00:26:04,000 --> 00:26:10,720
fall back and the fall back would be the

00:26:07,180 --> 00:26:12,010
fastest egi stuff right so this is an

00:26:10,720 --> 00:26:15,040
example of that but there are other

00:26:12,010 --> 00:26:19,780
memcache modules that can do a lot of

00:26:15,040 --> 00:26:24,010
these things themselves and you can find

00:26:19,780 --> 00:26:26,470
them on the wiki wiki da and Jax org in

00:26:24,010 --> 00:26:30,880
the atom section they can do things like

00:26:26,470 --> 00:26:33,790
deal with post put you can actually use

00:26:30,880 --> 00:26:35,950
them to do memcache inserts from engine

00:26:33,790 --> 00:26:38,920
X itself so you could do a lot of the

00:26:35,950 --> 00:26:41,950
processing in and jennette and then

00:26:38,920 --> 00:26:45,030
insert into engine X itself kind of

00:26:41,950 --> 00:26:48,940
cutting PP again out of the equation for

00:26:45,030 --> 00:26:50,380
what would you necessarily do that you

00:26:48,940 --> 00:26:53,140
can basically build your application in

00:26:50,380 --> 00:26:55,330
ngx essentially it and i'm going to show

00:26:53,140 --> 00:26:57,700
you now kind of how we can do that a

00:26:55,330 --> 00:27:00,760
little bit not a heck of a lot of code

00:26:57,700 --> 00:27:05,590
but i will show you how to talk to my

00:27:00,760 --> 00:27:07,570
sequel from an genetics but before that

00:27:05,590 --> 00:27:10,060
there's this really cool module called

00:27:07,570 --> 00:27:13,600
set misc module which you actually need

00:27:10,060 --> 00:27:15,280
to use with my sequel stuff what it does

00:27:13,600 --> 00:27:21,790
is it it's basically augmenting the

00:27:15,280 --> 00:27:25,060
rewrite module so in this case here's a

00:27:21,790 --> 00:27:28,900
handy one i pass in / beer and amount

00:27:25,060 --> 00:27:33,400
equals 12 and in this case i pass in

00:27:28,900 --> 00:27:35,230
nothing so you can actually do it

00:27:33,400 --> 00:27:38,480
provides something called set if empty

00:27:35,230 --> 00:27:43,250
so it's saying if yes in this

00:27:38,480 --> 00:27:48,410
yes is that way this is supposed to be a

00:27:43,250 --> 00:27:52,970
mount seemed to this up so in

00:27:48,410 --> 00:27:57,710
this case i'm setting amount to art

00:27:52,970 --> 00:28:00,380
underscore yes or a mount and at that

00:27:57,710 --> 00:28:04,460
case then i go is this empty so in this

00:28:00,380 --> 00:28:09,080
case the top one you'd get 12 but if

00:28:04,460 --> 00:28:10,820
it's empty we would set it to 9999 so it

00:28:09,080 --> 00:28:14,330
allows you to do kind of really simple

00:28:10,820 --> 00:28:17,030
if sat do this if not then do the

00:28:14,330 --> 00:28:19,730
default value another cool thing

00:28:17,030 --> 00:28:23,150
actually in this slide is that you

00:28:19,730 --> 00:28:25,790
instead of using the arcs variable you

00:28:23,150 --> 00:28:27,860
can do arc underscore and whatever the

00:28:25,790 --> 00:28:30,490
name here is so you can access

00:28:27,860 --> 00:28:33,350
individual arguments just for

00:28:30,490 --> 00:28:36,260
referencing stuff like this so we can do

00:28:33,350 --> 00:28:38,840
our underscore helgi art on the scroll

00:28:36,260 --> 00:28:42,169
UK you know whatever you pass in there

00:28:38,840 --> 00:28:47,929
you can read it through this variable so

00:28:42,169 --> 00:28:50,480
it gives you a lot of power so in this

00:28:47,929 --> 00:28:52,160
case this is really important for if

00:28:50,480 --> 00:28:54,950
you're doing anything kind of my sequel

00:28:52,160 --> 00:28:57,169
or you want to basically make sure no

00:28:54,950 --> 00:29:00,770
one is with your data before you

00:28:57,169 --> 00:29:03,490
pass it into an event so it's called set

00:29:00,770 --> 00:29:07,030
on skype your eye because by default

00:29:03,490 --> 00:29:10,700
engine X will have processed all the arc

00:29:07,030 --> 00:29:12,740
variables right so it will have escaped

00:29:10,700 --> 00:29:15,169
bunch of things that you may not want to

00:29:12,740 --> 00:29:17,090
save like pitch slashes and stuff like

00:29:15,169 --> 00:29:19,250
that but that doesn't make it

00:29:17,090 --> 00:29:22,720
necessarily safe to insert into a

00:29:19,250 --> 00:29:26,210
database right so what we need to do is

00:29:22,720 --> 00:29:29,240
we need to first unescape the thing as

00:29:26,210 --> 00:29:32,690
weird of that sound and then we need to

00:29:29,240 --> 00:29:34,820
use set code sequel string and what that

00:29:32,690 --> 00:29:36,980
means is that it's doing the usual you

00:29:34,820 --> 00:29:39,530
know my sequel real escape and all that

00:29:36,980 --> 00:29:43,720
kind of what PHP developers used to so

00:29:39,530 --> 00:29:46,460
in this case set on skype your eye is

00:29:43,720 --> 00:29:49,309
unescape nests into name and in this

00:29:46,460 --> 00:29:50,410
case we're actually quoting name into

00:29:49,309 --> 00:29:52,300
quoted name

00:29:50,410 --> 00:29:54,790
it seems a little bit backwards because

00:29:52,300 --> 00:29:56,140
the variable that you end up with is the

00:29:54,790 --> 00:29:59,650
one in the front and we're actually

00:29:56,140 --> 00:30:01,560
working on the one in the back and put

00:29:59,650 --> 00:30:06,790
in both these cases you can actually

00:30:01,560 --> 00:30:08,950
skip the the back one and it will do in

00:30:06,790 --> 00:30:10,690
variable kind of replacement it will

00:30:08,950 --> 00:30:13,090
just reuse the same one and just modify

00:30:10,690 --> 00:30:15,250
that one so this you do this way if you

00:30:13,090 --> 00:30:17,710
want to get a whole new variable without

00:30:15,250 --> 00:30:21,670
messing around with the old one but if

00:30:17,710 --> 00:30:23,470
you drop this this would be named then

00:30:21,670 --> 00:30:28,510
it will just change the name variable

00:30:23,470 --> 00:30:30,960
for you and you can keep on going so it

00:30:28,510 --> 00:30:33,220
provides spawn some other ones as well

00:30:30,960 --> 00:30:34,510
and this is kind of starts getting

00:30:33,220 --> 00:30:37,240
interesting because it has something

00:30:34,510 --> 00:30:40,210
called set mt5 sachajuan so it actually

00:30:37,240 --> 00:30:45,040
generates a hash for you in n jeanette's

00:30:40,210 --> 00:30:48,310
it can encode and decode base64 stuff H

00:30:45,040 --> 00:30:49,860
Mac sha Wan set random and the secure

00:30:48,310 --> 00:30:52,950
random alpha num and a few other ones

00:30:49,860 --> 00:30:56,680
along the same lines you can actually

00:30:52,950 --> 00:30:59,230
you can use these things to do secure

00:30:56,680 --> 00:31:01,420
downloads for example you can use it to

00:30:59,230 --> 00:31:04,080
actually do the authentication of users

00:31:01,420 --> 00:31:06,490
an API authentication and H Mac

00:31:04,080 --> 00:31:08,260
authentication essentially you can do it

00:31:06,490 --> 00:31:10,510
all in engine acts without actually

00:31:08,260 --> 00:31:13,720
touching your application and that's

00:31:10,510 --> 00:31:15,100
pretty spiffy in my opinion but you

00:31:13,720 --> 00:31:16,960
can't really do that without pulling the

00:31:15,100 --> 00:31:19,990
data from somewhere you could pull it

00:31:16,960 --> 00:31:23,050
from memcache but we can also just pull

00:31:19,990 --> 00:31:27,070
it from my sequel and so far any

00:31:23,050 --> 00:31:29,410
questions people just sitting at the

00:31:27,070 --> 00:31:32,470
edge of their seat this is what's going

00:31:29,410 --> 00:31:35,320
to happen alright so my sequel so it's

00:31:32,470 --> 00:31:37,360
called the drizzle engine X module so

00:31:35,320 --> 00:31:39,760
for those that don't know drizzle was a

00:31:37,360 --> 00:31:43,210
fork essentially or a rewrite of my

00:31:39,760 --> 00:31:45,400
sequel that is kind of open source as

00:31:43,210 --> 00:31:47,560
well pretty good well the guy that wrote

00:31:45,400 --> 00:31:50,920
this he made it compatible with all them

00:31:47,560 --> 00:31:53,200
because their API compatible so you can

00:31:50,920 --> 00:31:57,940
go to this location to get the module

00:31:53,200 --> 00:31:59,560
and compile it but so when you're

00:31:57,940 --> 00:32:02,050
dealing with engine X you always have to

00:31:59,560 --> 00:32:03,040
create up streams for everything so for

00:32:02,050 --> 00:32:06,280
PHP you have

00:32:03,040 --> 00:32:10,630
reference the PHP f pn and unique socket

00:32:06,280 --> 00:32:14,860
for example in this one you do this you

00:32:10,630 --> 00:32:16,630
do drizzle server and you need to do

00:32:14,860 --> 00:32:19,350
crystal server if you do server the

00:32:16,630 --> 00:32:21,820
whole thing will just go kablooey but

00:32:19,350 --> 00:32:25,900
excuse me what you need to do is rinse

00:32:21,820 --> 00:32:27,880
the server the hostname the port and

00:32:25,900 --> 00:32:31,210
then here you can define things like

00:32:27,880 --> 00:32:35,490
database name the character SAT the user

00:32:31,210 --> 00:32:39,790
and so on so you do one of these first

00:32:35,490 --> 00:32:44,200
and then we can do this this is the

00:32:39,790 --> 00:32:46,840
magic in the location / secret we get

00:32:44,200 --> 00:32:49,900
passed in a name and we access it by

00:32:46,840 --> 00:32:53,530
using the arc underscore name we

00:32:49,900 --> 00:32:56,530
unescape it first to kind of unmess what

00:32:53,530 --> 00:32:58,810
engine X did for us then we quote it

00:32:56,530 --> 00:33:01,480
into quoted name and basically do

00:32:58,810 --> 00:33:05,380
drizzle query and then insert into

00:33:01,480 --> 00:33:07,320
agents coded name so now everyone has

00:33:05,380 --> 00:33:09,700
access to our secret agent agents

00:33:07,320 --> 00:33:12,340
essentially and you need to do drizzle

00:33:09,700 --> 00:33:14,860
pass and tell it use my sequel back end

00:33:12,340 --> 00:33:17,290
which is this name here so whatever name

00:33:14,860 --> 00:33:19,330
you define here you have to define as

00:33:17,290 --> 00:33:23,590
drizzle path and that name so it just

00:33:19,330 --> 00:33:25,270
knows who it's talking to also in here

00:33:23,590 --> 00:33:28,600
it's worth to note that you can actually

00:33:25,270 --> 00:33:31,650
add multiple my sequel servers they can

00:33:28,600 --> 00:33:34,150
deal with a lot of really handy

00:33:31,650 --> 00:33:36,610
replication stuff and actually not

00:33:34,150 --> 00:33:38,650
replication sorry basically you can load

00:33:36,610 --> 00:33:41,470
balance through this you can just define

00:33:38,650 --> 00:33:44,170
multiple ones of them and it will figure

00:33:41,470 --> 00:33:45,280
out which one to talk to for you so

00:33:44,170 --> 00:33:48,730
that's going to hand you so you can have

00:33:45,280 --> 00:33:50,980
full backs and so on so we insert

00:33:48,730 --> 00:33:55,720
something into agents our new fancy

00:33:50,980 --> 00:33:58,000
table but the thing is right now engine

00:33:55,720 --> 00:34:00,340
X is not really good at exposing post as

00:33:58,000 --> 00:34:01,540
a variable you can kind of get it

00:34:00,340 --> 00:34:04,480
through sometimes through the arc

00:34:01,540 --> 00:34:07,720
underscore stuff but you're better off

00:34:04,480 --> 00:34:10,300
just getting this module HTTP form input

00:34:07,720 --> 00:34:13,530
module and it allows you to mess around

00:34:10,300 --> 00:34:13,530
with all that data

00:34:15,960 --> 00:34:22,450
yeah so this one is really handy for any

00:34:18,490 --> 00:34:25,899
kind of multi for multi form things

00:34:22,450 --> 00:34:28,570
essentially for this one we're basically

00:34:25,899 --> 00:34:31,720
just doing the same thing again except

00:34:28,570 --> 00:34:33,490
we're selecting from the agent so this

00:34:31,720 --> 00:34:37,109
is a different kind of you can both

00:34:33,490 --> 00:34:40,330
insert you can update you can select and

00:34:37,109 --> 00:34:46,590
you can use all of these and do stuff

00:34:40,330 --> 00:34:50,230
with the resulting data for the thing is

00:34:46,590 --> 00:34:52,600
it's not Jason by default and that kind

00:34:50,230 --> 00:34:54,790
of messes up a lot of things so it has

00:34:52,600 --> 00:34:59,320
this thing called RDS which is a binary

00:34:54,790 --> 00:35:01,180
format that that you can't really do

00:34:59,320 --> 00:35:02,500
anything with you know engine X is not

00:35:01,180 --> 00:35:04,060
going to help you that for you so in

00:35:02,500 --> 00:35:05,800
theory if you're just wanting to insert

00:35:04,060 --> 00:35:08,500
stuff and kind of internally read it

00:35:05,800 --> 00:35:13,390
that's cool well what you're going to do

00:35:08,500 --> 00:35:15,690
with it is you know can't do much but

00:35:13,390 --> 00:35:20,710
there's this thing that you can do

00:35:15,690 --> 00:35:22,840
there's a JSON + CSV output module that

00:35:20,710 --> 00:35:29,260
you can plug on top of the RDS binary

00:35:22,840 --> 00:35:32,800
format and it's located in these two

00:35:29,260 --> 00:35:35,800
locations so the RDS Jason and genetic

00:35:32,800 --> 00:35:37,600
module RDS CSV engine X module it's the

00:35:35,800 --> 00:35:39,790
same thing you need to compile it in all

00:35:37,600 --> 00:35:43,150
that kind of stuff but using the my

00:35:39,790 --> 00:35:49,630
sequel stuff without having this it's

00:35:43,150 --> 00:35:52,660
kind of redundant so in this case having

00:35:49,630 --> 00:35:55,810
installed that now we can add RDS uncle

00:35:52,660 --> 00:35:57,700
Jason on or CSV on and there you can

00:35:55,810 --> 00:36:00,520
configure a few bits and bobs like

00:35:57,700 --> 00:36:03,160
what's the Terminator what's the quotes

00:36:00,520 --> 00:36:05,740
around the CSV and so on but when you

00:36:03,160 --> 00:36:08,800
have this here it will automatically

00:36:05,740 --> 00:36:11,500
start returning JSON strings for you so

00:36:08,800 --> 00:36:14,710
for any insert you'll get how many rows

00:36:11,500 --> 00:36:17,830
were affected also for updates you get

00:36:14,710 --> 00:36:21,250
the insert ID through the jason with if

00:36:17,830 --> 00:36:24,160
you add this like small thing here all

00:36:21,250 --> 00:36:25,940
the values come back as Jason so what

00:36:24,160 --> 00:36:28,310
you can do at this point

00:36:25,940 --> 00:36:31,579
is imagine if we took the memcache

00:36:28,310 --> 00:36:34,369
example from before and we go okay I

00:36:31,579 --> 00:36:36,560
can't find anything in memcache I will

00:36:34,369 --> 00:36:39,890
go and talk to my my sequel counterpart

00:36:36,560 --> 00:36:42,380
in engine X you get the data from there

00:36:39,890 --> 00:36:44,810
that's in a JSON format you save that

00:36:42,380 --> 00:36:46,339
into memcache and now suddenly we almost

00:36:44,810 --> 00:36:51,500
have like a full-on application

00:36:46,339 --> 00:36:53,599
happening in engine X and that's kind of

00:36:51,500 --> 00:36:57,170
interesting you know you can write

00:36:53,599 --> 00:37:00,260
fairly performing api's through that you

00:36:57,170 --> 00:37:02,300
can also do Lua scripting in there so

00:37:00,260 --> 00:37:05,240
it's one of these interesting scenarios

00:37:02,300 --> 00:37:07,849
where you start thinking do I really

00:37:05,240 --> 00:37:12,440
want to be doing PHP or do I want to be

00:37:07,849 --> 00:37:15,109
doing engine X and lua I guess so

00:37:12,440 --> 00:37:18,079
there's a lot of power like I didn't

00:37:15,109 --> 00:37:20,030
touch on all the cool bits in there but

00:37:18,079 --> 00:37:21,560
I'm touched on enough to kind of

00:37:20,030 --> 00:37:23,329
hopefully get people thinking let's

00:37:21,560 --> 00:37:25,520
start looking into engine X and the

00:37:23,329 --> 00:37:27,230
modules and kind of dealing even though

00:37:25,520 --> 00:37:30,200
you have to deal with compiling a few

00:37:27,230 --> 00:37:34,250
things in there the power you get from

00:37:30,200 --> 00:37:36,859
it is so immense that it'd be silly not

00:37:34,250 --> 00:37:41,660
to really there's so many small bits in

00:37:36,859 --> 00:37:44,480
there that you can use that yeah I just

00:37:41,660 --> 00:37:46,130
like it I just love it doing all these

00:37:44,480 --> 00:37:48,319
things I mean you can show all these

00:37:46,130 --> 00:37:50,359
examples with the memcache stuff there's

00:37:48,319 --> 00:37:52,119
a radius equivalent so you don't have to

00:37:50,359 --> 00:37:54,410
be stuck with memcache necessarily

00:37:52,119 --> 00:37:56,240
there's a really cool add on there that

00:37:54,410 --> 00:37:58,700
does great a fast which essentially

00:37:56,240 --> 00:38:01,730
means it does mungo the same guy all

00:37:58,700 --> 00:38:03,020
this my sequel stuff it can do post quiz

00:38:01,730 --> 00:38:07,160
as well it's just a different module

00:38:03,020 --> 00:38:08,990
that works exactly the same way so

00:38:07,160 --> 00:38:11,480
there's a lot of interesting power in

00:38:08,990 --> 00:38:13,490
there that you can kind of siphon from

00:38:11,480 --> 00:38:16,030
engine X and the kind of community

00:38:13,490 --> 00:38:18,090
that's been building around it

00:38:16,030 --> 00:38:18,090
you

00:38:26,319 --> 00:38:28,380

YouTube URL: https://www.youtube.com/watch?v=zrPzkyyDgrk


