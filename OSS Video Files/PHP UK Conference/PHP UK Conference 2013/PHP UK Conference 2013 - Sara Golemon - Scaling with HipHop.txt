Title: PHP UK Conference 2013 - Sara Golemon - Scaling with HipHop
Publication date: 2013-04-22
Playlist: PHP UK Conference 2013
Description: 
	HipHop is the Open Source PHP language compiler and runtime designed and used by Facebook. HipHop offers a significant speed improvement over the official PHP runtime and supports most of its core features. This session will provide an introduction to how and why to use HipHop over PHP, and the benefits it offers.
Captions: 
	00:00:11,100 --> 00:00:19,779
so who in here is at least heard of

00:00:14,710 --> 00:00:24,070
hip-hop okay none of you know what it is

00:00:19,779 --> 00:00:25,720
I don't know some of you might I'm going

00:00:24,070 --> 00:00:28,810
to go over some of the history of

00:00:25,720 --> 00:00:30,640
hip-hop what kind of convinced Facebook

00:00:28,810 --> 00:00:33,520
that we needed to create it and use it

00:00:30,640 --> 00:00:36,700
and why what you're thinking of is

00:00:33,520 --> 00:00:38,710
hip-hop probably isn't what it is when

00:00:36,700 --> 00:00:40,120
we introduced hip hop years ago it was a

00:00:38,710 --> 00:00:41,440
very different product it's changed a

00:00:40,120 --> 00:00:45,370
lot so we're gonna go over a little bit

00:00:41,440 --> 00:00:48,519
of that so to start with what kind of

00:00:45,370 --> 00:00:50,050
problem are we trying to solve Facebook

00:00:48,519 --> 00:00:51,550
just recently announced that we've gone

00:00:50,050 --> 00:00:53,500
over a billion monthly active users

00:00:51,550 --> 00:00:55,390
that's like people actually interacting

00:00:53,500 --> 00:00:58,929
with a site not just accounts that's a

00:00:55,390 --> 00:01:00,940
lot of activity we have servers running

00:00:58,929 --> 00:01:02,859
that site it takes a lot of power

00:01:00,940 --> 00:01:05,680
network bandwidth all that sort of thing

00:01:02,859 --> 00:01:08,050
it's the sort of thing that you hit a

00:01:05,680 --> 00:01:09,580
scale that you just say we literally

00:01:08,050 --> 00:01:12,220
can't keep firing servers at this

00:01:09,580 --> 00:01:16,660
problem it's going to just break the

00:01:12,220 --> 00:01:18,400
entire site eventually probably not a

00:01:16,660 --> 00:01:20,620
lot of your sites are at that scale but

00:01:18,400 --> 00:01:22,270
they are at some scale you maybe have a

00:01:20,620 --> 00:01:23,530
few hundred or even a few thousand

00:01:22,270 --> 00:01:27,370
servers running at your site you might

00:01:23,530 --> 00:01:28,570
don't even only have a few dozen you

00:01:27,370 --> 00:01:30,460
might just have a couple of ec2

00:01:28,570 --> 00:01:36,190
instances but you don't want to make

00:01:30,460 --> 00:01:38,140
that grow too fast why do we need so

00:01:36,190 --> 00:01:39,670
many servers we need it because of some

00:01:38,140 --> 00:01:41,200
of the inefficiencies that are just

00:01:39,670 --> 00:01:43,510
inherent to PHP in the kind of language

00:01:41,200 --> 00:01:45,520
and runtime that it is we have to do a

00:01:43,510 --> 00:01:47,410
lot of data copy so I should mention I'm

00:01:45,520 --> 00:01:49,150
also a developer on the PHP project so

00:01:47,410 --> 00:01:52,000
when I think of in efficiencies I think

00:01:49,150 --> 00:01:53,470
of things like we've got a system

00:01:52,000 --> 00:01:54,970
allocate a block of memory it needs to

00:01:53,470 --> 00:01:58,900
go into engine allocate or block so we

00:01:54,970 --> 00:02:00,370
needed and purposely purposelessly copy

00:01:58,900 --> 00:02:05,680
all this extra data over where it

00:02:00,370 --> 00:02:07,750
doesn't need to be so that's sort of the

00:02:05,680 --> 00:02:09,209
gist alt of the problem there so how do

00:02:07,750 --> 00:02:12,819
you fix that problem

00:02:09,209 --> 00:02:14,230
well rebuilding your run engine in your

00:02:12,819 --> 00:02:15,610
runtime from scratch is not the first

00:02:14,230 --> 00:02:17,590
thing you should be doing the first

00:02:15,610 --> 00:02:19,750
thing you should be doing is all the

00:02:17,590 --> 00:02:20,950
easy stuff and I don't need to tell

00:02:19,750 --> 00:02:24,520
anyone in this room what those easy

00:02:20,950 --> 00:02:27,490
things are databases are gonna be half

00:02:24,520 --> 00:02:29,500
of your bottleneck right off the bat you

00:02:27,490 --> 00:02:31,150
know how to make your code better so I'm

00:02:29,500 --> 00:02:33,409
not going to go into that

00:02:31,150 --> 00:02:35,659
eventually though you run out of those

00:02:33,409 --> 00:02:37,760
easy things and all that you're left

00:02:35,659 --> 00:02:40,189
with is your actual language and your

00:02:37,760 --> 00:02:42,069
runtime and all of the extra work that's

00:02:40,189 --> 00:02:46,489
being done that doesn't have to be done

00:02:42,069 --> 00:02:48,049
so these are again just kind of a rehash

00:02:46,489 --> 00:02:51,099
of some of those same problems that I

00:02:48,049 --> 00:02:53,299
just mentioned you've got multiple

00:02:51,099 --> 00:02:55,549
processes running because you don't

00:02:53,299 --> 00:02:58,040
really trust Apache to worker to work

00:02:55,549 --> 00:03:00,530
nicely with PHP I know in theory it's

00:02:58,040 --> 00:03:02,090
supposed to work but how many people are

00:03:00,530 --> 00:03:06,220
actually running PHP with Apache 2 in

00:03:02,090 --> 00:03:09,609
the worker npm 0 that's what I thought

00:03:06,220 --> 00:03:14,030
cousin of us trust it

00:03:09,609 --> 00:03:16,340
so when PHP is a problem what's our

00:03:14,030 --> 00:03:19,280
solution our solution is we decided we

00:03:16,340 --> 00:03:21,200
were going to rewrite the entire PHP

00:03:19,280 --> 00:03:22,639
engine and runtime from the ground up

00:03:21,200 --> 00:03:25,129
and we were going to use some lessons

00:03:22,639 --> 00:03:27,439
learned from both the PHP project itself

00:03:25,129 --> 00:03:29,750
and from kind of what we know about how

00:03:27,439 --> 00:03:31,790
we use PHP that's the official

00:03:29,750 --> 00:03:33,980
explanation the real explanation is

00:03:31,790 --> 00:03:35,629
actually something more like one of the

00:03:33,980 --> 00:03:37,400
engineers at Facebook just didn't like

00:03:35,629 --> 00:03:39,590
PHP and he wanted to convert the whole

00:03:37,400 --> 00:03:41,449
side to C++ what better way to do it

00:03:39,590 --> 00:03:43,250
than just write an auto converter that's

00:03:41,449 --> 00:03:46,099
why the original version of hip hop was

00:03:43,250 --> 00:03:48,940
just this source transformer and I'll

00:03:46,099 --> 00:03:51,290
talk about that in a couple later slides

00:03:48,940 --> 00:03:52,849
one of the side effects of this though

00:03:51,290 --> 00:03:56,500
is that we've actually removed Apache

00:03:52,849 --> 00:03:58,699
from our configure our stack completely

00:03:56,500 --> 00:04:00,229
this is not to say that Apache is bad

00:03:58,699 --> 00:04:03,319
Apache is a great web server I love you

00:04:00,229 --> 00:04:05,000
Apache web server I love the the

00:04:03,319 --> 00:04:08,479
community that is around the Apache web

00:04:05,000 --> 00:04:11,650
server but it is a gigantic Swiss Army

00:04:08,479 --> 00:04:13,909
knife when all you need is a Clark screw

00:04:11,650 --> 00:04:16,579
so we've got a web server that's very

00:04:13,909 --> 00:04:19,370
thin very lean does what we need to do

00:04:16,579 --> 00:04:20,930
and does what most sites need to do

00:04:19,370 --> 00:04:23,440
obviously there's going to be a few

00:04:20,930 --> 00:04:26,419
things that it doesn't support and

00:04:23,440 --> 00:04:28,789
that's unfortunate the good news is we

00:04:26,419 --> 00:04:30,710
are actually in the process of building

00:04:28,789 --> 00:04:34,000
out our sappy layer so that we can plug

00:04:30,710 --> 00:04:36,740
into Apache or any fast CGI web server

00:04:34,000 --> 00:04:39,889
that's coming along in the coming year

00:04:36,740 --> 00:04:41,930
we don't have an ETA for that yet what

00:04:39,889 --> 00:04:42,969
you see on the right here is an example

00:04:41,930 --> 00:04:44,679
of what

00:04:42,969 --> 00:04:48,879
a configuration for our web server looks

00:04:44,679 --> 00:04:50,829
like the structures a lot different than

00:04:48,879 --> 00:04:53,139
Apache but fundamentally the settings

00:04:50,829 --> 00:04:54,969
are all basically the same we're telling

00:04:53,139 --> 00:04:57,879
it where to find our files we're setting

00:04:54,969 --> 00:05:00,639
up some virtual hosts not in this

00:04:57,879 --> 00:05:02,469
example but that never mind we're

00:05:00,639 --> 00:05:06,909
specifying some log files this is all

00:05:02,469 --> 00:05:08,199
basic web server setup stuff so I

00:05:06,909 --> 00:05:09,909
promise to get into the history of hip

00:05:08,199 --> 00:05:12,189
hop a little bit this was our first

00:05:09,909 --> 00:05:14,889
version the compiler this would take

00:05:12,189 --> 00:05:17,829
your PHP source translate it just

00:05:14,889 --> 00:05:20,259
literally line for line into C++ and

00:05:17,829 --> 00:05:22,989
then toss it off to make now this was a

00:05:20,259 --> 00:05:27,329
nice easy thing to do it's it sort of

00:05:22,989 --> 00:05:31,839
fits into the gun is better than perfect

00:05:27,329 --> 00:05:37,239
philosophy unfortunately to build all of

00:05:31,839 --> 00:05:38,469
the Facebook web codebase takes this

00:05:37,239 --> 00:05:39,789
number is kind of a fuzzy thing because

00:05:38,469 --> 00:05:41,589
it depends on how many build machines

00:05:39,789 --> 00:05:43,599
were pushing out to you but it's on the

00:05:41,589 --> 00:05:46,479
order of 20 plus minutes spread across

00:05:43,599 --> 00:05:48,459
more than 100 machines this is

00:05:46,479 --> 00:05:50,139
completely impractical for the average

00:05:48,459 --> 00:05:51,729
developer because you're not going to

00:05:50,139 --> 00:05:56,349
assign 100 build machines per developer

00:05:51,729 --> 00:05:58,389
and it is even then 20 minutes to do a

00:05:56,349 --> 00:06:01,349
single change to some file and just see

00:05:58,389 --> 00:06:04,149
that it works is not acceptable

00:06:01,349 --> 00:06:05,889
so how do we deal with development well

00:06:04,149 --> 00:06:07,989
it's fine we'll just let our regular

00:06:05,889 --> 00:06:09,550
developers use the Apache PHP

00:06:07,989 --> 00:06:12,759
environment which I'll refer to as ape

00:06:09,550 --> 00:06:14,409
or the rest of this and for production

00:06:12,759 --> 00:06:18,009
we'll do h PG C and natl be fine that'll

00:06:14,409 --> 00:06:21,039
be great except it won't be because now

00:06:18,009 --> 00:06:23,039
PHP is not PHP you might write something

00:06:21,039 --> 00:06:26,469
that works perfectly fine under ape

00:06:23,039 --> 00:06:28,259
crashes fails fatals dies does

00:06:26,469 --> 00:06:33,249
unexpected things under protection

00:06:28,259 --> 00:06:35,229
so at plus we're adding new features to

00:06:33,249 --> 00:06:37,389
the language as we're developing it

00:06:35,229 --> 00:06:40,119
since we now control our entire runtime

00:06:37,389 --> 00:06:41,860
stack we've added things like xhp and

00:06:40,119 --> 00:06:44,739
generators which granted have since

00:06:41,860 --> 00:06:46,299
reached regular PHP well generators have

00:06:44,739 --> 00:06:49,149
X each P is actually exposed as an

00:06:46,299 --> 00:06:51,399
extension but it's still not the same

00:06:49,149 --> 00:06:53,469
language even under the best

00:06:51,399 --> 00:06:54,459
circumstances and we don't have the best

00:06:53,469 --> 00:06:56,780
circumstances because we haven't

00:06:54,459 --> 00:07:01,320
reimplemented the entire runtime

00:06:56,780 --> 00:07:03,300
so here's the fix we're gonna take our

00:07:01,320 --> 00:07:05,370
abstract syntax tree that we're already

00:07:03,300 --> 00:07:07,530
parsing using HP HVC and we're just

00:07:05,370 --> 00:07:09,690
going to run through it line by line not

00:07:07,530 --> 00:07:10,830
worrying about you know caching or

00:07:09,690 --> 00:07:13,650
turning into byte codes or anything like

00:07:10,830 --> 00:07:17,760
that this is basically how PHP 2 ran if

00:07:13,650 --> 00:07:19,220
you know when I here use PHP - not

00:07:17,760 --> 00:07:21,150
surprising

00:07:19,220 --> 00:07:25,590
PHP wasn't quite that popular at that

00:07:21,150 --> 00:07:27,240
point but this is slow on the best of

00:07:25,590 --> 00:07:28,830
days but he has just development so if

00:07:27,240 --> 00:07:31,400
it takes an extra thousand milliseconds

00:07:28,830 --> 00:07:31,400
no big deal

00:07:32,000 --> 00:07:38,910
trouble is it's still not quite HP HP C

00:07:37,230 --> 00:07:40,020
there's still some minor differences in

00:07:38,910 --> 00:07:43,980
the language it still doesn't quite

00:07:40,020 --> 00:07:45,870
behave exactly right so that brings us

00:07:43,980 --> 00:07:51,120
to sort of version 2 of hip hop and that

00:07:45,870 --> 00:07:53,190
is h h vm this was built with a lot more

00:07:51,120 --> 00:07:55,350
knowledge of how do we want to be using

00:07:53,190 --> 00:07:57,510
this for development and what can we do

00:07:55,350 --> 00:07:59,640
to actually get this to perform at the

00:07:57,510 --> 00:08:04,500
same kind of level as something that's

00:07:59,640 --> 00:08:08,610
basically c++ is being built with me now

00:08:04,500 --> 00:08:11,580
what do we do we copied PHP we compiled

00:08:08,610 --> 00:08:14,130
everything to bytecode we shove that

00:08:11,580 --> 00:08:15,750
into a cache kind of like a pcs got and

00:08:14,130 --> 00:08:17,250
we run that bytecode through a virtual

00:08:15,750 --> 00:08:19,140
machine saying oh here's an echo

00:08:17,250 --> 00:08:21,720
statement here's ba ba ba ba ba ba ba ba

00:08:19,140 --> 00:08:27,479
and not surprising we're about on par

00:08:21,720 --> 00:08:30,660
with PHP 5 using just this approach then

00:08:27,479 --> 00:08:33,180
we throw a JIT on top of that the JIT is

00:08:30,660 --> 00:08:34,560
going to say alright let this code run

00:08:33,180 --> 00:08:37,110
through the virtual machine let the byte

00:08:34,560 --> 00:08:39,810
codes execute a few times until we kind

00:08:37,110 --> 00:08:42,330
of get an idea of what's going on in

00:08:39,810 --> 00:08:44,490
this code is dollar a usually industry

00:08:42,330 --> 00:08:48,690
okay great we're going to kind of flag

00:08:44,490 --> 00:08:50,280
that as predictably an integer is this

00:08:48,690 --> 00:08:51,960
if statement usually returning false

00:08:50,280 --> 00:08:53,370
okay we're going to optimize for the

00:08:51,960 --> 00:08:56,280
else case and we're going to shove the

00:08:53,370 --> 00:08:57,600
if case off in another direction we get

00:08:56,280 --> 00:08:59,580
that sort of information as we're

00:08:57,600 --> 00:09:01,920
running it a few times and eventually we

00:08:59,580 --> 00:09:04,140
decide okay we know what is going on

00:09:01,920 --> 00:09:05,760
inside this translation unit translation

00:09:04,140 --> 00:09:08,580
unit being basically a function but not

00:09:05,760 --> 00:09:09,570
quite we're going to compile that all

00:09:08,580 --> 00:09:12,060
the way down to X ad

00:09:09,570 --> 00:09:15,120
Xcode and this is going to run as native

00:09:12,060 --> 00:09:16,830
code as if we've passed it to GCC even

00:09:15,120 --> 00:09:18,680
though GCC's never actually involved

00:09:16,830 --> 00:09:23,430
we're actually hand making the the

00:09:18,680 --> 00:09:25,290
instructions and then the last thing we

00:09:23,430 --> 00:09:28,610
do on top of that is we actually take

00:09:25,290 --> 00:09:30,660
the compilation step out of the picture

00:09:28,610 --> 00:09:32,790
well not entirely

00:09:30,660 --> 00:09:35,370
this is repo authoritative mode in this

00:09:32,790 --> 00:09:38,400
mode when we're ready to go for to

00:09:35,370 --> 00:09:41,130
production we pass all the source code

00:09:38,400 --> 00:09:42,570
for the entire project into a th VM it

00:09:41,130 --> 00:09:44,340
builds all the byte codes ahead of time

00:09:42,570 --> 00:09:46,980
and it does some deeper analysis on them

00:09:44,340 --> 00:09:49,920
stores them in a database and now we're

00:09:46,980 --> 00:09:51,210
basically in a PC no stat mode we're

00:09:49,920 --> 00:09:52,620
never going to the disk to look at

00:09:51,210 --> 00:09:53,940
source code we're never compiling that

00:09:52,620 --> 00:09:56,310
source code to bytecode during runtime

00:09:53,940 --> 00:09:57,480
we've got our bike code already we still

00:09:56,310 --> 00:09:59,330
want to run through it a few times

00:09:57,480 --> 00:10:02,930
before we actually turn it into native

00:09:59,330 --> 00:10:05,430
but we can do that step pretty quick so

00:10:02,930 --> 00:10:08,160
we're not too concerned about optimizing

00:10:05,430 --> 00:10:10,620
that all the way out in practice this

00:10:08,160 --> 00:10:15,990
gets us like an extra 10% boost just for

00:10:10,620 --> 00:10:17,730
doing the pre analysis so that's where

00:10:15,990 --> 00:10:19,680
we are today all of our production

00:10:17,730 --> 00:10:22,440
traffic as of a month ago has been moved

00:10:19,680 --> 00:10:25,020
to a each VM we were using HP HPC for a

00:10:22,440 --> 00:10:29,550
couple years before that we are already

00:10:25,020 --> 00:10:34,920
10 percent faster than HP HP C this

00:10:29,550 --> 00:10:36,600
means fewer servers we're at about a 500

00:10:34,920 --> 00:10:38,580
percent performance gain over a regular

00:10:36,600 --> 00:10:41,040
PHP and I put a big asterisk by that I

00:10:38,580 --> 00:10:45,350
hope you see the asterisks there this is

00:10:41,040 --> 00:10:48,180
extremely codebase dependent hip hop is

00:10:45,350 --> 00:10:50,550
technically tailored to the Facebook

00:10:48,180 --> 00:10:52,560
codebase so you see our best code get

00:10:50,550 --> 00:10:54,390
our best performance gains on that PHP

00:10:52,560 --> 00:10:56,670
code base if you run it against

00:10:54,390 --> 00:10:58,500
something stock like WordPress which is

00:10:56,670 --> 00:11:01,440
actually our main testing platform right

00:10:58,500 --> 00:11:04,020
now you only see about a 100 percent

00:11:01,440 --> 00:11:06,150
performance improvement and I say only

00:11:04,020 --> 00:11:10,350
that means you can run on half as many

00:11:06,150 --> 00:11:15,090
servers so that's still not bad if you

00:11:10,350 --> 00:11:18,210
still want to get at HP HPC in a few

00:11:15,090 --> 00:11:20,580
weeks when I start to remove the last

00:11:18,210 --> 00:11:22,110
bits of HP HPC from the hip hop

00:11:20,580 --> 00:11:23,470
repository I'm going to make a branch

00:11:22,110 --> 00:11:25,300
you can still get at

00:11:23,470 --> 00:11:27,970
if you care about it I don't recommend

00:11:25,300 --> 00:11:29,260
using it ATM is just the new hotness and

00:11:27,970 --> 00:11:30,970
there's a lot of room left for

00:11:29,260 --> 00:11:33,040
performance gains

00:11:30,970 --> 00:11:38,140
we're actually targeting an extra 50%

00:11:33,040 --> 00:11:39,910
gain by the end of the year so that's

00:11:38,140 --> 00:11:43,000
sort of like the theoretical background

00:11:39,910 --> 00:11:44,670
of welcome to hip hop how do you

00:11:43,000 --> 00:11:46,780
actually do something with it

00:11:44,670 --> 00:11:51,030
unfortunately our documentation is kind

00:11:46,780 --> 00:11:51,030
of not very good right now

00:11:51,450 --> 00:11:57,490
that's one of the things we're working

00:11:53,110 --> 00:12:01,000
on but getting a server up and running

00:11:57,490 --> 00:12:02,830
is a fairly short set of steps if you're

00:12:01,000 --> 00:12:04,650
the right kind of user and I say the

00:12:02,830 --> 00:12:06,820
right kind of user because right now our

00:12:04,650 --> 00:12:08,550
dependencies on external packages are

00:12:06,820 --> 00:12:10,540
really tight we need like the most

00:12:08,550 --> 00:12:12,460
version of thread building blocks we

00:12:10,540 --> 00:12:14,710
need a really very subversive GCC we

00:12:12,460 --> 00:12:16,630
need a really recent version of folly we

00:12:14,710 --> 00:12:20,170
need very recent versions of a lot of

00:12:16,630 --> 00:12:21,640
packages a boon to satisfies this so

00:12:20,170 --> 00:12:24,280
that's our kind of official platform

00:12:21,640 --> 00:12:26,800
right now and you can just do these

00:12:24,280 --> 00:12:29,710
three steps on the left here to get a

00:12:26,800 --> 00:12:32,110
installation running really quickly if

00:12:29,710 --> 00:12:35,770
you're on another platform then may God

00:12:32,110 --> 00:12:38,350
have mercy on your soul you will have to

00:12:35,770 --> 00:12:41,500
compile a few things from source there's

00:12:38,350 --> 00:12:45,120
a wiki that describes what packages you

00:12:41,500 --> 00:12:49,360
need where to get them from but it is

00:12:45,120 --> 00:12:52,450
painful they will get less painful once

00:12:49,360 --> 00:12:54,490
we remove the last bits of HP HPC they

00:12:52,450 --> 00:12:56,620
are kind of creating this maintenance

00:12:54,490 --> 00:12:58,320
nightmare for us right now and that is

00:12:56,620 --> 00:13:00,340
going to happen in the next few weeks

00:12:58,320 --> 00:13:03,250
they're basically waiting for me to get

00:13:00,340 --> 00:13:04,510
back to the US because everything we do

00:13:03,250 --> 00:13:05,650
internally has to be coordinated with

00:13:04,510 --> 00:13:10,810
the external stuff and I'm kind of the

00:13:05,650 --> 00:13:13,420
external person so we looked at a brief

00:13:10,810 --> 00:13:16,060
config file earlier this is really all

00:13:13,420 --> 00:13:17,530
you need kind of like a patchy setup all

00:13:16,060 --> 00:13:20,140
you really need to do is tell where the

00:13:17,530 --> 00:13:22,360
HTML files are we don't actually need to

00:13:20,140 --> 00:13:25,839
say enable PHP because it's all part of

00:13:22,360 --> 00:13:28,540
a single thing but it's kind of a crap

00:13:25,839 --> 00:13:29,589
config file by the way I don't much sure

00:13:28,540 --> 00:13:31,470
if you can see it this little line down

00:13:29,589 --> 00:13:34,540
here that's how you start up a server

00:13:31,470 --> 00:13:35,370
it's not quite as cool as a patchy CTL

00:13:34,540 --> 00:13:40,980
start but

00:13:35,370 --> 00:13:42,420
I'm sure you can alias that def config

00:13:40,980 --> 00:13:43,980
you probably want a few extra things you

00:13:42,420 --> 00:13:47,160
want a lot more warnings to come out of

00:13:43,980 --> 00:13:49,560
your log files you're going to ignore

00:13:47,160 --> 00:13:51,750
static files you definitely don't want

00:13:49,560 --> 00:13:54,120
to be doing PHP processing on a gif file

00:13:51,750 --> 00:13:58,950
a few vulnerabilities have shown up in

00:13:54,120 --> 00:14:00,750
those for a production file you're going

00:13:58,950 --> 00:14:03,330
to have basically that same config but

00:14:00,750 --> 00:14:04,800
you're going to have you know maybe a

00:14:03,330 --> 00:14:07,230
few things tightened up you call in to

00:14:04,800 --> 00:14:08,970
redeploy rotative mode you're going to

00:14:07,230 --> 00:14:10,410
only worry about your errors not your

00:14:08,970 --> 00:14:12,750
warnings in your log file that sort of

00:14:10,410 --> 00:14:15,480
thing and if you want to do report or

00:14:12,750 --> 00:14:18,390
authoritative mode that's what this HHV

00:14:15,480 --> 00:14:20,339
M HP HP line here is this says here's

00:14:18,390 --> 00:14:22,710
all my files analyze them for me give

00:14:20,339 --> 00:14:28,940
them to me in a database and then that

00:14:22,710 --> 00:14:31,050
database becomes your repository so

00:14:28,940 --> 00:14:34,830
there's a lot of good reasons why not

00:14:31,050 --> 00:14:39,680
hip hop number one is parody right now

00:14:34,830 --> 00:14:43,110
we are four-letter expletive for parody

00:14:39,680 --> 00:14:45,480
we don't have namespaces that's probably

00:14:43,110 --> 00:14:47,279
a big thing for a lot of people we're

00:14:45,480 --> 00:14:49,680
missing a whole bunch of standard bundle

00:14:47,279 --> 00:14:52,680
extensions now I look at these

00:14:49,680 --> 00:14:55,290
extensions and I think kind of who cares

00:14:52,680 --> 00:14:57,959
for most of them we are working on those

00:14:55,290 --> 00:15:00,120
though last year was our performance

00:14:57,959 --> 00:15:01,140
push this year is our parody push so

00:15:00,120 --> 00:15:02,250
we're gonna have a lot of people

00:15:01,140 --> 00:15:04,290
actually work on getting these

00:15:02,250 --> 00:15:07,110
extensions built we're also improving

00:15:04,290 --> 00:15:10,320
the way who's not yet the way that

00:15:07,110 --> 00:15:13,290
extensions are built for hip hop in PHP

00:15:10,320 --> 00:15:14,850
it's a pretty simple process assuming

00:15:13,290 --> 00:15:17,070
you already have the code it's PHP is

00:15:14,850 --> 00:15:19,020
configure and make we're going to have

00:15:17,070 --> 00:15:20,880
something similar to that on hip hop we

00:15:19,020 --> 00:15:22,020
just don't have it yet that's another

00:15:20,880 --> 00:15:25,890
piece of the parity puzzle that we're

00:15:22,020 --> 00:15:26,970
pulling in when we have that hopefully

00:15:25,890 --> 00:15:28,560
we can get some people actually

00:15:26,970 --> 00:15:30,770
contributing back and building some of

00:15:28,560 --> 00:15:32,670
these extensions if they actually care

00:15:30,770 --> 00:15:34,860
generally speaking they're not hard you

00:15:32,670 --> 00:15:37,790
just copy what's in PHP put the right

00:15:34,860 --> 00:15:40,500
license header in and you're fine

00:15:37,790 --> 00:15:43,140
making extensions for hip hop really

00:15:40,500 --> 00:15:45,780
easy I don't know who came to my

00:15:43,140 --> 00:15:48,449
extension writing talk yesterday a

00:15:45,780 --> 00:15:49,889
handful of you dozen or so so you

00:15:48,449 --> 00:15:52,069
you'll recognize what's on top that's

00:15:49,889 --> 00:15:53,970
writing a extension for regular PHP

00:15:52,069 --> 00:15:56,639
what's on the bottom is writing an

00:15:53,970 --> 00:15:58,139
extension for hip-hop you're not doing

00:15:56,639 --> 00:16:00,389
this funky pulling parameters off the

00:15:58,139 --> 00:16:02,850
stack thing your prototype is what your

00:16:00,389 --> 00:16:05,730
prototype should be it is this argument

00:16:02,850 --> 00:16:08,160
this function takes two strings and it's

00:16:05,730 --> 00:16:10,980
durable so it takes two strings and

00:16:08,160 --> 00:16:14,579
integer noble what are the odds and it

00:16:10,980 --> 00:16:15,779
returns an int so it returns an int it's

00:16:14,579 --> 00:16:24,419
so much easier to write extensions under

00:16:15,779 --> 00:16:25,649
hip-hop there's also I have this line in

00:16:24,419 --> 00:16:29,129
the wrong spot this is actually a why

00:16:25,649 --> 00:16:30,660
PHP not or why not PHP why not hip-hop

00:16:29,129 --> 00:16:32,759
there are some features we have in

00:16:30,660 --> 00:16:33,119
hip-hop that are not seen in PHP right

00:16:32,759 --> 00:16:36,540
now

00:16:33,119 --> 00:16:38,009
we as a principle anytime we add a new

00:16:36,540 --> 00:16:40,350
feature to language we offer it to the

00:16:38,009 --> 00:16:42,779
community and we say here you go here's

00:16:40,350 --> 00:16:44,459
a future and generally here's an

00:16:42,779 --> 00:16:45,839
implementation of it as well there's

00:16:44,459 --> 00:16:48,269
actually one up for voting right now

00:16:45,839 --> 00:16:49,769
about allowing trailing commas and

00:16:48,269 --> 00:16:51,149
function calls that's something we added

00:16:49,769 --> 00:16:56,399
to hip-hop so we said okay here you go

00:16:51,149 --> 00:16:58,230
PHP here's a patch not everything gets

00:16:56,399 --> 00:17:00,629
accepted and not everything is

00:16:58,230 --> 00:17:03,509
necessarily ready to be offered yet such

00:17:00,629 --> 00:17:05,669
as generic strict typing and literal

00:17:03,509 --> 00:17:09,329
collections I'm not sure if I have an

00:17:05,669 --> 00:17:12,289
example of those yet but in C++ generics

00:17:09,329 --> 00:17:15,209
are things like you can do template foo

00:17:12,289 --> 00:17:18,360
you know these like well templates basic

00:17:15,209 --> 00:17:21,870
are an example of generics we have a

00:17:18,360 --> 00:17:23,039
version of that in hip-hop and there's

00:17:21,870 --> 00:17:23,970
some black boxes there because there's

00:17:23,039 --> 00:17:26,329
some things we're working on I can't

00:17:23,970 --> 00:17:26,329
tell you about yet

00:17:28,669 --> 00:17:33,029
hip-hop also has this cool thing called

00:17:30,840 --> 00:17:35,159
xhp like I said there is an extension

00:17:33,029 --> 00:17:38,010
available for regular PHP that'll do the

00:17:35,159 --> 00:17:39,360
same thing but that means installing

00:17:38,010 --> 00:17:43,169
that extension it's just sort of baked

00:17:39,360 --> 00:17:47,610
into hip-hop who's actually seen xhp

00:17:43,169 --> 00:17:50,399
before just a couple of people so xhp is

00:17:47,610 --> 00:17:52,529
basically XML for PHP and as you can see

00:17:50,399 --> 00:17:53,519
in the example there we don't have our

00:17:52,529 --> 00:17:56,070
HTML inside quotes

00:17:53,519 --> 00:17:58,500
we've got like actual tags in our

00:17:56,070 --> 00:18:01,240
expressions we're saying dollar good

00:17:58,500 --> 00:18:03,610
equals paragraph tag someday

00:18:01,240 --> 00:18:04,660
paragraph tag you might say okay all

00:18:03,610 --> 00:18:07,120
you're doing is getting rid of clothes

00:18:04,660 --> 00:18:09,580
bfv well there's actually more context

00:18:07,120 --> 00:18:12,640
than that this P tag is an actual object

00:18:09,580 --> 00:18:15,640
and it knows the difference between what

00:18:12,640 --> 00:18:19,630
is a tag or sub-object and what is just

00:18:15,640 --> 00:18:22,000
text so if you have any kind of problem

00:18:19,630 --> 00:18:25,560
with cross-site scripting right now this

00:18:22,000 --> 00:18:27,520
is going to solve 99% of that because

00:18:25,560 --> 00:18:30,210
you know look what I've done here I've

00:18:27,520 --> 00:18:32,710
put get user name directly into my HTML

00:18:30,210 --> 00:18:34,150
that's probably an XSS no-no right

00:18:32,710 --> 00:18:35,680
because the user can provide anything

00:18:34,150 --> 00:18:39,760
they want and it'll get output straight

00:18:35,680 --> 00:18:42,580
out to the browser wrong in the

00:18:39,760 --> 00:18:46,090
bottoming in the bottom there dollar get

00:18:42,580 --> 00:18:48,960
user name was set to script alert and

00:18:46,090 --> 00:18:51,850
tag script that's been escaped because

00:18:48,960 --> 00:18:54,100
xhp knows that this is not a tag this is

00:18:51,850 --> 00:18:58,410
data so data is supposed to be escaped

00:18:54,100 --> 00:19:02,400
when it goes out to a browser context

00:18:58,410 --> 00:19:05,350
it's also a save that for the next side

00:19:02,400 --> 00:19:07,600
if you really really like cross-site

00:19:05,350 --> 00:19:12,340
scripting you can allow it in we've got

00:19:07,600 --> 00:19:14,830
this HTML function we have a commit hook

00:19:12,340 --> 00:19:17,740
in the FB code that if anyone ever uses

00:19:14,830 --> 00:19:20,560
this it like requires an extra reviewer

00:19:17,740 --> 00:19:23,520
on the diff like you really shouldn't be

00:19:20,560 --> 00:19:26,500
using this but you can if you need to

00:19:23,520 --> 00:19:28,090
it's also very extensible in this

00:19:26,500 --> 00:19:30,630
example I've got some tags up there

00:19:28,090 --> 00:19:32,920
they're not real tags they're just

00:19:30,630 --> 00:19:35,290
references to other object

00:19:32,920 --> 00:19:35,830
implementations so I'm saying okay I've

00:19:35,290 --> 00:19:38,560
got a body

00:19:35,830 --> 00:19:41,440
I want a UI menu with a title some menu

00:19:38,560 --> 00:19:43,690
items underneath it in some library

00:19:41,440 --> 00:19:45,700
somewhere I've got a UI menu class to

00:19:43,690 --> 00:19:48,780
find that knows how to turn all those

00:19:45,700 --> 00:19:51,370
children and tags and sub tags into HTML

00:19:48,780 --> 00:19:53,170
this is really nice for designers

00:19:51,370 --> 00:19:55,320
because they can put the page however

00:19:53,170 --> 00:19:59,200
they want to using just semantic

00:19:55,320 --> 00:20:01,300
knowledge about here's some data that

00:19:59,200 --> 00:20:03,130
I'm throwing in and then the programmers

00:20:01,300 --> 00:20:06,160
can worry about actually pulling things

00:20:03,130 --> 00:20:09,480
out of databases or adding extra

00:20:06,160 --> 00:20:11,830
decoration on to the data on its way out

00:20:09,480 --> 00:20:13,990
this is really contrived example I'm

00:20:11,830 --> 00:20:15,020
trying to convince our UI team to

00:20:13,990 --> 00:20:17,180
open-source our

00:20:15,020 --> 00:20:18,340
UI components library it's a really big

00:20:17,180 --> 00:20:21,290
libraries are really awesome library

00:20:18,340 --> 00:20:22,460
they just get nervous about new projects

00:20:21,290 --> 00:20:27,200
going out to open source you have to

00:20:22,460 --> 00:20:28,790
push but it'll get there eventually hack

00:20:27,200 --> 00:20:30,470
is kind of a cool thing this is

00:20:28,790 --> 00:20:34,430
something we just sort of started

00:20:30,470 --> 00:20:37,120
working on about a year ago and we've

00:20:34,430 --> 00:20:40,310
got the basic thesis for it out in the

00:20:37,120 --> 00:20:42,610
official version of the language this is

00:20:40,310 --> 00:20:45,170
basically strict typing for everything

00:20:42,610 --> 00:20:46,940
you declare a property you declare an

00:20:45,170 --> 00:20:49,660
arguments to a function a return type

00:20:46,940 --> 00:20:52,250
you can say this function wants a string

00:20:49,660 --> 00:20:54,020
it optionally wants an integer but this

00:20:52,250 --> 00:20:57,110
can still be null and it's going to

00:20:54,020 --> 00:20:58,670
return a bool now for development time

00:20:57,110 --> 00:21:00,230
this is really cool because it allows

00:20:58,670 --> 00:21:03,110
you to do static analysis and say hey

00:21:00,230 --> 00:21:04,790
you're calling this function wrong for

00:21:03,110 --> 00:21:06,770
runtime we're eventually going to use

00:21:04,790 --> 00:21:07,940
some of this data plug it into that pre

00:21:06,770 --> 00:21:09,290
analysis phase and get a few extra

00:21:07,940 --> 00:21:11,030
percent win out of the performance

00:21:09,290 --> 00:21:12,620
because we know this function is always

00:21:11,030 --> 00:21:15,580
returning in a bowl we don't have to

00:21:12,620 --> 00:21:15,580
worry about the case where it's not

00:21:16,210 --> 00:21:22,490
we've got a debugger this is basically

00:21:19,220 --> 00:21:24,230
gdb for PHP it kind of fills the niche

00:21:22,490 --> 00:21:25,850
provided by X debug because we've got

00:21:24,230 --> 00:21:31,340
breakpoints as watches

00:21:25,850 --> 00:21:33,980
Mac Mac expansions you can attach it to

00:21:31,340 --> 00:21:35,720
a running server basically like I say

00:21:33,980 --> 00:21:40,150
it's it's a replacement for x XD bug

00:21:35,720 --> 00:21:44,420
really but it also integrates with this

00:21:40,150 --> 00:21:46,130
web-based IDE that we've built this does

00:21:44,420 --> 00:21:48,530
all the things you expect from an IDE

00:21:46,130 --> 00:21:49,610
but again attaches to your running

00:21:48,530 --> 00:21:52,090
server so you can get all the

00:21:49,610 --> 00:21:54,200
breakpoints and everything watches

00:21:52,090 --> 00:21:55,730
cross-reference right click on a

00:21:54,200 --> 00:21:58,160
function call that'll tell you where

00:21:55,730 --> 00:22:00,560
it's defined if you start typing

00:21:58,160 --> 00:22:02,930
something out it's a dollar a arrow and

00:22:00,560 --> 00:22:06,580
a happens to be an object of class my

00:22:02,930 --> 00:22:08,810
sequel I you'll have query prepare

00:22:06,580 --> 00:22:10,670
execute all of them listed out as

00:22:08,810 --> 00:22:15,260
possible functions call what the

00:22:10,670 --> 00:22:19,010
parameters are integration to get it's

00:22:15,260 --> 00:22:22,010
pretty cool these are some handling

00:22:19,010 --> 00:22:23,570
stuff how fast did I go well I have a

00:22:22,010 --> 00:22:25,160
lot of time you left I hope you have a

00:22:23,570 --> 00:22:28,070
lot of questions otherwise I can just

00:22:25,160 --> 00:22:33,700
keep talking randomly about other

00:22:28,070 --> 00:22:33,700
it's the language come on don't be shy

00:22:34,600 --> 00:22:42,710
uh-huh yes so the question is if patchy

00:22:41,240 --> 00:22:44,510
is moved out of the sack can we do

00:22:42,710 --> 00:22:45,620
things like rewrites and some of the

00:22:44,510 --> 00:22:49,760
other things that you expect to be able

00:22:45,620 --> 00:22:53,180
to do an Apache yes there is a do I have

00:22:49,760 --> 00:22:54,920
an example of it I don't think I have an

00:22:53,180 --> 00:22:56,330
example of any slide I have available to

00:22:54,920 --> 00:22:57,920
me right now but I'm actually doing that

00:22:56,330 --> 00:23:03,740
on the WordPress site that then we're

00:22:57,920 --> 00:23:06,650
running there's a little quirk between

00:23:03,740 --> 00:23:09,260
how hip-hop and how Apache handle

00:23:06,650 --> 00:23:10,730
default documents in a directory so I'm

00:23:09,260 --> 00:23:13,190
basically just throwing in a rewrite

00:23:10,730 --> 00:23:16,690
rule to mimic Apaches behavior and it

00:23:13,190 --> 00:23:16,690
does exactly what you would expect it to

00:23:24,190 --> 00:23:32,900
yes so the question is the HP HP c the

00:23:29,660 --> 00:23:34,250
c++ trent trans later I used to do

00:23:32,900 --> 00:23:36,260
static analysis and give you a nice

00:23:34,250 --> 00:23:37,760
output of like what's going on in this

00:23:36,260 --> 00:23:40,640
program how do things connect together

00:23:37,760 --> 00:23:44,410
and the and the question was does h h vm

00:23:40,640 --> 00:23:47,660
still do that yes if you look back at

00:23:44,410 --> 00:23:49,430
what was that math question sorry I

00:23:47,660 --> 00:23:52,220
heard somebody say no over there

00:23:49,430 --> 00:23:54,650
if you look back at this slide we've got

00:23:52,220 --> 00:23:56,960
this - HP HP switch on here that's

00:23:54,650 --> 00:23:58,730
basically saying yeah I'm running h h vm

00:23:56,960 --> 00:24:02,810
but i want you to start acting like HP

00:23:58,730 --> 00:24:06,200
HP a lot of the core pieces of HP HPC

00:24:02,810 --> 00:24:08,150
are staying in and stuff like static

00:24:06,200 --> 00:24:10,280
analysis is one of them so you can do

00:24:08,150 --> 00:24:11,540
like the the linting and the analysis

00:24:10,280 --> 00:24:13,790
and things like that and it'll still

00:24:11,540 --> 00:24:16,430
kick out so if you're using HP h vc

00:24:13,790 --> 00:24:19,900
right now to do that just run HP HP -

00:24:16,430 --> 00:24:19,900
ehh VM done

00:24:24,260 --> 00:24:31,270
oh you saw that huh stooop no I went too

00:24:30,440 --> 00:24:33,680
far

00:24:31,270 --> 00:24:36,400
my mouse doesn't work in my laptop so I

00:24:33,680 --> 00:24:36,400
have to do it this way

00:24:37,090 --> 00:24:50,750
where did that side go oh yeah in the

00:24:47,900 --> 00:24:53,140
parameter right that's service so a few

00:24:50,750 --> 00:24:55,370
slides before this one I mentioned

00:24:53,140 --> 00:24:57,140
collection literals this is an example

00:24:55,370 --> 00:24:59,960
of a collection liberal and it's using

00:24:57,140 --> 00:25:02,480
that generic syntax so vector e is the

00:24:59,960 --> 00:25:03,860
class int is the specialization of the

00:25:02,480 --> 00:25:07,610
vector class like I said it's very

00:25:03,860 --> 00:25:10,520
similar to C++ templates what this means

00:25:07,610 --> 00:25:13,640
internally is that vector says ok my

00:25:10,520 --> 00:25:16,310
storage has to be some way of

00:25:13,640 --> 00:25:20,300
representing multiple hints in practice

00:25:16,310 --> 00:25:24,320
this is actually just an its star you

00:25:20,300 --> 00:25:26,720
know it's a literal C vector in practice

00:25:24,320 --> 00:25:29,450
how your class chooses to implement that

00:25:26,720 --> 00:25:30,920
can be you know whatever it is this is

00:25:29,450 --> 00:25:33,530
one of the features that are hip-hop

00:25:30,920 --> 00:25:36,230
specific and we intend to make an offer

00:25:33,530 --> 00:25:37,430
to the PHP community with a patch to do

00:25:36,230 --> 00:25:40,190
this because we don't want the languages

00:25:37,430 --> 00:25:42,830
to diverge we're just not quite at the

00:25:40,190 --> 00:25:44,900
point where this API is stable

00:25:42,830 --> 00:25:48,830
completely yet so we're we're making a

00:25:44,900 --> 00:25:50,120
few changes yet yeah and that is

00:25:48,830 --> 00:25:52,250
something I want to underline it's like

00:25:50,120 --> 00:25:54,290
we're not interested in for you know

00:25:52,250 --> 00:25:55,580
dividing the language we're trying to

00:25:54,290 --> 00:25:58,220
bring it together that's why we are

00:25:55,580 --> 00:26:00,650
committed to bringing our side at the

00:25:58,220 --> 00:26:03,380
parity equation up during the next two

00:26:00,650 --> 00:26:06,560
months and putting those patches out to

00:26:03,380 --> 00:26:08,120
the internals list and saying okay you

00:26:06,560 --> 00:26:10,430
may or may not want this feature but

00:26:08,120 --> 00:26:11,960
here is and it's up to everyone to vote

00:26:10,430 --> 00:26:14,180
on whether they want that feature in

00:26:11,960 --> 00:26:18,440
regular PHP or not and if not then we've

00:26:14,180 --> 00:26:20,750
done our due diligence and the languages

00:26:18,440 --> 00:26:25,250
will not quite match on that particular

00:26:20,750 --> 00:26:26,660
thing so that is the abet is the second

00:26:25,250 --> 00:26:29,120
option particular something like this we

00:26:26,660 --> 00:26:31,730
can actually do some fancy things with

00:26:29,120 --> 00:26:35,540
extensions basically well particularly

00:26:31,730 --> 00:26:37,549
for hack we are actually talking about

00:26:35,540 --> 00:26:39,499
initially doing our release as a next

00:26:37,549 --> 00:26:41,720
before we even offer it as a language

00:26:39,499 --> 00:26:44,570
patch not sure how we're going to do

00:26:41,720 --> 00:26:47,830
that yet but yeah we could throw it into

00:26:44,570 --> 00:26:50,809
the compiled file hook say read it in

00:26:47,830 --> 00:26:52,820
either drop these hints entirely or

00:26:50,809 --> 00:26:56,149
translate them into some other type of

00:26:52,820 --> 00:26:58,789
knowledge about the type and then pass

00:26:56,149 --> 00:27:03,230
the resulting text to the real compiler

00:26:58,789 --> 00:27:06,559
as though it were magically in a PHP

00:27:03,230 --> 00:27:08,600
compatible format that's that's of ideal

00:27:06,559 --> 00:27:11,299
obviously because it requires

00:27:08,600 --> 00:27:15,590
maintenance and nobody really likes to

00:27:11,299 --> 00:27:18,440
maintain stuff yeah go ahead

00:27:15,590 --> 00:27:20,929
well what version of PHP is it 500

00:27:18,440 --> 00:27:23,629
percent faster than specifically and

00:27:20,929 --> 00:27:25,519
also time scale on namespaces like rough

00:27:23,629 --> 00:27:26,840
time scale that's a really fair question

00:27:25,519 --> 00:27:29,539
and that was part of the asterisks that

00:27:26,840 --> 00:27:31,879
I didn't explicitly call out this is

00:27:29,539 --> 00:27:33,590
compared to the last version of PHP that

00:27:31,879 --> 00:27:34,940
we were actually able to test against

00:27:33,590 --> 00:27:36,950
because of course our code base has

00:27:34,940 --> 00:27:41,330
moved on as well so it's commits

00:27:36,950 --> 00:27:43,509
relative to 5.2 points I want to say

00:27:41,330 --> 00:27:46,190
five but I'm not a hundred percent sure

00:27:43,509 --> 00:27:47,869
obviously PHP has made some performance

00:27:46,190 --> 00:27:49,429
gains in those times so that number is

00:27:47,869 --> 00:27:52,429
going to be shrunk down because of that

00:27:49,429 --> 00:27:56,269
as well I think in practice is probably

00:27:52,429 --> 00:28:00,259
only about two hundred percent again

00:27:56,269 --> 00:28:01,840
only five three and five four in

00:28:00,259 --> 00:28:05,139
particular did make some great

00:28:01,840 --> 00:28:05,139
performance gains

00:28:07,200 --> 00:28:13,980
or in the core another hi

00:28:11,040 --> 00:28:17,310
we've got a lot of PHP CLI scripts

00:28:13,980 --> 00:28:18,960
processing items off a work you so yeah

00:28:17,310 --> 00:28:22,320
we were just wondering whether the

00:28:18,960 --> 00:28:23,640
hip-hop engine can be used to for those

00:28:22,320 --> 00:28:25,200
kind of scripts as well which doesn't

00:28:23,640 --> 00:28:25,980
actually run by a web server yeah

00:28:25,200 --> 00:28:29,220
absolutely

00:28:25,980 --> 00:28:32,010
um this h h vm binary here that used to

00:28:29,220 --> 00:28:34,860
run the web server and to do the pre

00:28:32,010 --> 00:28:37,410
analysis it is also a CLI server so you

00:28:34,860 --> 00:28:39,090
would just say h h vm space your script

00:28:37,410 --> 00:28:40,770
name and the arguments you need to your

00:28:39,090 --> 00:28:43,680
script and it's just gonna just like the

00:28:40,770 --> 00:28:47,430
PHP one is well I'll say just like it

00:28:43,680 --> 00:28:49,170
again with an Asterix we don't have the

00:28:47,430 --> 00:28:51,990
- our option for example so you can't

00:28:49,170 --> 00:28:54,060
like just say peach VAR echo foo that's

00:28:51,990 --> 00:28:55,440
not going to work on I teach VM it's on

00:28:54,060 --> 00:28:57,000
my to-do list of things to make better

00:28:55,440 --> 00:28:58,410
because I use that all the time with

00:28:57,000 --> 00:29:01,500
very good at page feet and I really like

00:28:58,410 --> 00:29:04,370
it so I'm going to get those matched up

00:29:01,500 --> 00:29:06,480
as much as possible this year sometime

00:29:04,370 --> 00:29:08,960
it's a low on the priority list though

00:29:06,480 --> 00:29:08,960
to be honest

00:29:21,230 --> 00:29:27,930
yeah so the question was about database

00:29:24,720 --> 00:29:30,780
support and my sequel absolutely or

00:29:27,930 --> 00:29:33,170
MySQL if you prefer definitely support

00:29:30,780 --> 00:29:34,950
that because we use it extensively

00:29:33,170 --> 00:29:41,550
memcached if you want to call that a

00:29:34,950 --> 00:29:43,770
database sequel light OCI the Oracle

00:29:41,550 --> 00:29:46,560
database the PDO layer on top of those

00:29:43,770 --> 00:29:47,730
obviously and I think that's the extent

00:29:46,560 --> 00:29:49,770
of our database support right now

00:29:47,730 --> 00:29:51,210
because those again those are the ones

00:29:49,770 --> 00:29:53,970
we use internally so those ones we care

00:29:51,210 --> 00:29:56,910
about the most we are going to throw

00:29:53,970 --> 00:29:59,400
support for other databases in there no

00:29:56,910 --> 00:30:01,020
sequel databases as well that's just a

00:29:59,400 --> 00:30:06,510
question of time and getting somebody to

00:30:01,020 --> 00:30:08,130
work on it yeah and we are going to do

00:30:06,510 --> 00:30:10,010
the other my sequel drivers as well like

00:30:08,130 --> 00:30:11,970
them.i sequel and stuff like that

00:30:10,010 --> 00:30:14,850
although we don't have it yet because

00:30:11,970 --> 00:30:17,520
nobody's needs to use it but with 5.5

00:30:14,850 --> 00:30:25,640
deprecating my sequel I pick up to do

00:30:17,520 --> 00:30:25,640
that do you think

00:30:26,240 --> 00:30:32,330
I don't want to promise it but that's

00:30:29,660 --> 00:30:33,380
like at the top of my list that is the

00:30:32,330 --> 00:30:34,929
bait that has been the bane of my

00:30:33,380 --> 00:30:39,050
existence for the past couple of months

00:30:34,929 --> 00:30:39,980
mmm someone possibly me is going to make

00:30:39,050 --> 00:30:43,040
namespaces work

00:30:39,980 --> 00:30:46,010
I know Alexandra Alexandra screw the guy

00:30:43,040 --> 00:30:48,110
behind the D language he's mentioned he

00:30:46,010 --> 00:30:53,690
wants to work on that so he may be the

00:30:48,110 --> 00:30:54,950
one who doesn't in a group in a perfect

00:30:53,690 --> 00:30:57,530
world I want to say it'll be ready by

00:30:54,950 --> 00:31:02,950
April but I'm not going to promise that

00:30:57,530 --> 00:31:02,950
so definitely namespaces

00:31:09,510 --> 00:31:14,170
um you know I I really like the sort of

00:31:12,730 --> 00:31:16,660
server model and the features in the

00:31:14,170 --> 00:31:18,520
performance and um so I'd like to go to

00:31:16,660 --> 00:31:21,510
use this mic in yeah everyday use and it

00:31:18,520 --> 00:31:25,660
seems like I'd like to get feedback

00:31:21,510 --> 00:31:27,940
sorry and it's thinking like because of

00:31:25,660 --> 00:31:30,760
its attributes like that the other users

00:31:27,940 --> 00:31:32,860
would be really really keen on pushing

00:31:30,760 --> 00:31:35,710
this I guess would be other big PHP

00:31:32,860 --> 00:31:38,260
sites like a guest Wikipedia and

00:31:35,710 --> 00:31:42,190
automatic we're talking to Wikimedia

00:31:38,260 --> 00:31:44,290
yeah yeah it's that you came to to use

00:31:42,190 --> 00:31:47,980
this sort of stuff in to help support it

00:31:44,290 --> 00:31:49,510
alright so so it's a it's a it's a mixed

00:31:47,980 --> 00:31:52,540
feeling like you use Wikimedia as an

00:31:49,510 --> 00:31:53,980
example so I'll talk about them they

00:31:52,540 --> 00:31:56,260
have kind of mixed feelings about it on

00:31:53,980 --> 00:31:57,850
the one hand it does mean a lot fewer

00:31:56,260 --> 00:32:00,690
servers that they'll need to run to get

00:31:57,850 --> 00:32:05,230
the same performance on the other hand

00:32:00,690 --> 00:32:09,250
they're 90% use case our reads which are

00:32:05,230 --> 00:32:10,750
darn your static files so they are not

00:32:09,250 --> 00:32:12,100
going to see a huge performance win on

00:32:10,750 --> 00:32:13,390
the read side what they're gonna see is

00:32:12,100 --> 00:32:15,340
a performance win on the right side

00:32:13,390 --> 00:32:18,790
which is only a small percentage of the

00:32:15,340 --> 00:32:20,560
traffic so in looking at their cost

00:32:18,790 --> 00:32:22,990
benefit they're like how much do we have

00:32:20,560 --> 00:32:25,150
to invest in making our site work on

00:32:22,990 --> 00:32:26,980
this other version of PHP and how much

00:32:25,150 --> 00:32:28,720
of a gain are we going to get out of it

00:32:26,980 --> 00:32:30,250
they're definitely watching it but right

00:32:28,720 --> 00:32:32,800
now they're kind of on the cost/benefit

00:32:30,250 --> 00:32:36,630
side of don't mess with something that

00:32:32,800 --> 00:32:36,630
works so

00:32:37,660 --> 00:32:43,280
so yeah WordPress we're also talking to

00:32:40,610 --> 00:32:45,110
and it's a it's it's a it's a different

00:32:43,280 --> 00:32:46,940
story with WordPress WordPress could

00:32:45,110 --> 00:32:49,220
theoretically have the same side of kind

00:32:46,940 --> 00:32:50,780
of picture where reads are you know a

00:32:49,220 --> 00:32:52,460
lower portion like it's certainly the

00:32:50,780 --> 00:32:56,300
picture Facebook has reads or a lower

00:32:52,460 --> 00:33:04,700
portion of our traffic as well but

00:32:56,300 --> 00:33:09,950
WordPress is code is mature is the

00:33:04,700 --> 00:33:12,080
nicest way I can say that and so even on

00:33:09,950 --> 00:33:13,340
the even on the read side they're doing

00:33:12,080 --> 00:33:14,600
a lot of database stuff they're doing a

00:33:13,340 --> 00:33:16,400
lot of extra work that they don't

00:33:14,600 --> 00:33:20,440
necessarily need to do and that's why

00:33:16,400 --> 00:33:20,440
you'll actually see a more significant

00:33:21,760 --> 00:33:27,080
improvement on executing PHP code

00:33:24,380 --> 00:33:29,180
because there's more PHP code to run it

00:33:27,080 --> 00:33:31,040
would be an even more impressive

00:33:29,180 --> 00:33:34,760
improvement if their databases were

00:33:31,040 --> 00:33:40,130
properly tuned to deal with reads but

00:33:34,760 --> 00:33:48,700
they're not I'm just going to get drink

00:33:40,130 --> 00:33:52,990
of water right now it's my idea of water

00:33:48,700 --> 00:33:52,990
so the other half of your question sorry

00:33:53,140 --> 00:33:59,000
how closely are they looking at us

00:33:56,290 --> 00:34:03,460
WordPress has got a different problem in

00:33:59,000 --> 00:34:06,970
the number of modules that they support

00:34:03,460 --> 00:34:10,730
WordPress out of the box will just run

00:34:06,970 --> 00:34:13,280
for basic WordPress but if you've got a

00:34:10,730 --> 00:34:15,620
hundred different plugins installed one

00:34:13,280 --> 00:34:18,230
of those may be dependent on a extension

00:34:15,620 --> 00:34:20,120
that is not supported so they're a

00:34:18,230 --> 00:34:21,230
little worried about saying okay we're

00:34:20,120 --> 00:34:23,560
going to move this cluster over to

00:34:21,230 --> 00:34:26,750
hip-hop until they can at least say

00:34:23,560 --> 00:34:29,210
hip-hop supports 90% of bundled

00:34:26,750 --> 00:34:30,679
extensions so they can say the odds of a

00:34:29,210 --> 00:34:33,010
plug-in not working are going to be

00:34:30,679 --> 00:34:35,750
fairly low and we can just move forward

00:34:33,010 --> 00:34:39,190
it's kind of where they're at right now

00:34:35,750 --> 00:34:39,190
that's why parity aside should we go

00:34:42,950 --> 00:34:49,830
all right no one else okay what else can

00:34:47,940 --> 00:34:57,680
I just sort of throw in here about

00:34:49,830 --> 00:35:00,210
hip-hop well actually let me ask you who

00:34:57,680 --> 00:35:02,910
after hearing what you've just heard is

00:35:00,210 --> 00:35:05,420
interested in going home and trying out

00:35:02,910 --> 00:35:08,160
your site with hip-hop see how it runs

00:35:05,420 --> 00:35:09,450
all right there's some interest whoo

00:35:08,160 --> 00:35:13,230
there's a lot of interest that's

00:35:09,450 --> 00:35:16,200
fantastic whoo who thinks your site

00:35:13,230 --> 00:35:21,060
would actually benefit from it more than

00:35:16,200 --> 00:35:24,530
the work would be worth who actually

00:35:21,060 --> 00:35:26,490
wants to talk about that at all like

00:35:24,530 --> 00:35:27,840
talk about what sort of site you're

00:35:26,490 --> 00:35:30,870
running how many servers you've got

00:35:27,840 --> 00:35:32,010
anything like that no that's okay that's

00:35:30,870 --> 00:35:34,190
okay I didn't want to put you on the

00:35:32,010 --> 00:35:34,190
spot

00:35:39,780 --> 00:35:45,640
haven't tried it you want to try it out

00:35:42,250 --> 00:35:48,900
in the hack area yeah I got plenty of

00:35:45,640 --> 00:35:48,900
vm's I got access to Oh

00:35:49,270 --> 00:35:53,050
the question was will it run and it

00:35:51,910 --> 00:35:56,460
actually didn't hear what you asked if

00:35:53,050 --> 00:35:59,260
it would run magenta will earn magenta

00:35:56,460 --> 00:35:59,950
if you if anyone wants to join us out in

00:35:59,260 --> 00:36:01,990
the hack area

00:35:59,950 --> 00:36:08,380
we'll try installing magenta we'll see

00:36:01,990 --> 00:36:10,510
if it works if you have got some some

00:36:08,380 --> 00:36:13,600
questions you can go to the official

00:36:10,510 --> 00:36:16,840
page that's FB dot me slash HP HP or you

00:36:13,600 --> 00:36:18,820
just bug me on Twitter honestly yeah

00:36:16,840 --> 00:36:20,470
another question of compatibility have

00:36:18,820 --> 00:36:22,930
you tried it on the performance

00:36:20,470 --> 00:36:26,410
improvement things like Drupal or Zend

00:36:22,930 --> 00:36:27,430
or any of those frameworks so Drupal I

00:36:26,410 --> 00:36:29,860
know it doesn't work with right now

00:36:27,430 --> 00:36:31,960
there's it uses some specialized stream

00:36:29,860 --> 00:36:34,540
features so I've been busy catching

00:36:31,960 --> 00:36:36,310
those things up so I haven't been able

00:36:34,540 --> 00:36:38,560
to do an actual performance comparison

00:36:36,310 --> 00:36:39,970
on Drupal I haven't looked at Zen at all

00:36:38,560 --> 00:36:41,980
because end is you know it's a framework

00:36:39,970 --> 00:36:44,350
it's not an application like I would

00:36:41,980 --> 00:36:45,730
need something to actually run maybe

00:36:44,350 --> 00:36:48,490
that may be your test suite would be a

00:36:45,730 --> 00:36:51,520
good thing to use maybe not because it's

00:36:48,490 --> 00:36:53,320
all contrived I have looked at WordPress

00:36:51,520 --> 00:36:57,130
extensively like I said that was just

00:36:53,320 --> 00:36:59,350
sort of my initial like here's an

00:36:57,130 --> 00:37:01,690
application that runs quite a few of the

00:36:59,350 --> 00:37:04,540
websites of PHP websites out there how

00:37:01,690 --> 00:37:07,300
does this one perform the bottom end of

00:37:04,540 --> 00:37:10,570
a performs gain is 70% the top end of

00:37:07,300 --> 00:37:12,640
the performance gain is 100 80% there's

00:37:10,570 --> 00:37:14,860
a bunch of variables that determine kind

00:37:12,640 --> 00:37:18,370
of where you land in that not least of

00:37:14,860 --> 00:37:20,260
which is the machine itself but that's

00:37:18,370 --> 00:37:23,380
roughly where we end up landing on that

00:37:20,260 --> 00:37:25,480
one and and the FBI de is that something

00:37:23,380 --> 00:37:27,310
that you that we other people to install

00:37:25,480 --> 00:37:30,430
is that purely internal for Facebook

00:37:27,310 --> 00:37:32,680
we're open sourcing that soon that is in

00:37:30,430 --> 00:37:33,940
development we're kind of working out

00:37:32,680 --> 00:37:36,100
some of the rough edges on it

00:37:33,940 --> 00:37:37,990
the type-ahead isn't working perfectly

00:37:36,100 --> 00:37:39,880
yet and there's a few times when your

00:37:37,990 --> 00:37:41,920
shared editing between two different

00:37:39,880 --> 00:37:44,620
people where the update just isn't

00:37:41,920 --> 00:37:46,360
happening fast enough but that will be

00:37:44,620 --> 00:37:47,860
open sourced I didn't mention it

00:37:46,360 --> 00:37:49,330
supports all your vim and Emacs key

00:37:47,860 --> 00:37:51,160
bindings so if you're used to your

00:37:49,330 --> 00:37:52,030
editors that's just that should just

00:37:51,160 --> 00:37:53,770
work

00:37:52,030 --> 00:37:54,670
it'd be cool to see more of that because

00:37:53,770 --> 00:37:56,680
that's something I'm definitely doing

00:37:54,670 --> 00:37:58,300
I'm totally looking forward to pushing

00:37:56,680 --> 00:38:00,970
that out to github that that's going to

00:37:58,300 --> 00:38:03,670
be a fun one one more question

00:38:00,970 --> 00:38:05,920
uh-huh does it do you support thrift or

00:38:03,670 --> 00:38:08,980
does Facebook use thrift um we've not

00:38:05,920 --> 00:38:10,960
well do we use thrift we use thrift

00:38:08,980 --> 00:38:12,670
extensively it is all over architecture

00:38:10,960 --> 00:38:16,470
and yes it's actually one of the bundled

00:38:12,670 --> 00:38:16,470
extensions that is included with hip hop

00:38:21,240 --> 00:38:26,170
including you know about a basin and

00:38:23,710 --> 00:38:27,849
everything for an entire request um so

00:38:26,170 --> 00:38:30,880
the question was within the entire stack

00:38:27,849 --> 00:38:35,410
what kind of games have we seen overall

00:38:30,880 --> 00:38:37,660
I don't have an answer to that my sort

00:38:35,410 --> 00:38:42,369
of focus has been specifically on the HP

00:38:37,660 --> 00:38:45,099
HP portion of it god can I even make a

00:38:42,369 --> 00:38:48,640
guess I know that every layer of the

00:38:45,099 --> 00:38:51,840
sack has been tuned like mad our data

00:38:48,640 --> 00:38:54,099
access layer is frightening in how

00:38:51,840 --> 00:38:57,490
quickly it gets data moved around

00:38:54,099 --> 00:38:58,839
especially between coalos I honestly

00:38:57,490 --> 00:39:01,060
couldn't give you an over there I just

00:38:58,839 --> 00:39:09,160
don't have access to one we're gonna

00:39:01,060 --> 00:39:11,200
find out sir have a horrible question

00:39:09,160 --> 00:39:13,030
but it seems that oh please maybe in the

00:39:11,200 --> 00:39:14,680
early days of Facebook if somebody knew

00:39:13,030 --> 00:39:17,770
just how big it was going to be they may

00:39:14,680 --> 00:39:20,109
not have chosen PHP having done so

00:39:17,770 --> 00:39:21,970
you've done a great job with this but if

00:39:20,109 --> 00:39:24,460
you said okay well it's either use this

00:39:21,970 --> 00:39:26,200
and improve my PHP or actually I should

00:39:24,460 --> 00:39:27,010
just pick something like Python which I

00:39:26,200 --> 00:39:29,260
probably shouldn't say in this

00:39:27,010 --> 00:39:31,869
conference but a Python didn't exist at

00:39:29,260 --> 00:39:33,220
the time so yeah but for someone like me

00:39:31,869 --> 00:39:34,420
coming in here I think one could use

00:39:33,220 --> 00:39:36,460
this and I could improve what I already

00:39:34,420 --> 00:39:37,869
have well my next project I should just

00:39:36,460 --> 00:39:41,200
say well if I need performance

00:39:37,869 --> 00:39:42,400
maybe PHP isn't the way to go so that's

00:39:41,200 --> 00:39:44,619
a good question

00:39:42,400 --> 00:39:47,109
let's imagine ourselves there so we we

00:39:44,619 --> 00:39:48,670
said we have a way of a website that

00:39:47,109 --> 00:39:50,320
we're gonna throw together we know that

00:39:48,670 --> 00:39:53,700
in five years we're gonna have a billion

00:39:50,320 --> 00:39:53,700
users hitting it okay not five

00:40:00,340 --> 00:40:06,830
that there we go sorry that was me so

00:40:05,150 --> 00:40:10,730
let's say I was trying to dodge your

00:40:06,830 --> 00:40:12,620
question let's say we've got an idea for

00:40:10,730 --> 00:40:13,760
a site we know that in seven years we're

00:40:12,620 --> 00:40:15,020
gonna have a billion users because we

00:40:13,760 --> 00:40:18,050
made some fallacy and deal with the

00:40:15,020 --> 00:40:19,100
devil what do we do where do we start

00:40:18,050 --> 00:40:22,610
and how do we decide what we're gonna

00:40:19,100 --> 00:40:26,720
use that is a ridiculously subjective

00:40:22,610 --> 00:40:28,940
question but I would so personally I

00:40:26,720 --> 00:40:31,640
would still go with PHP of some sort I

00:40:28,940 --> 00:40:33,650
might go with regular design PHP at this

00:40:31,640 --> 00:40:36,010
point because there have been some

00:40:33,650 --> 00:40:38,900
performance including improvements I

00:40:36,010 --> 00:40:41,630
probably would go with hip hop because I

00:40:38,900 --> 00:40:45,050
think there's a lot more room to make

00:40:41,630 --> 00:40:46,250
that better than there is on PHP some

00:40:45,050 --> 00:40:47,780
people in the audience all disagree with

00:40:46,250 --> 00:40:51,260
me on that one and we can argue it about

00:40:47,780 --> 00:40:55,190
it over beer would I go with a different

00:40:51,260 --> 00:40:57,260
language probably not because PHP was a

00:40:55,190 --> 00:40:59,290
language designed for the web that has

00:40:57,260 --> 00:41:01,190
been adapted to other purposes

00:40:59,290 --> 00:41:03,080
pretty much every other language out

00:41:01,190 --> 00:41:06,980
there was designed for the purposes and

00:41:03,080 --> 00:41:09,200
adapted to the web that's kind of a

00:41:06,980 --> 00:41:10,730
philosophical standpoint and we can

00:41:09,200 --> 00:41:14,270
definitely argue that one over some

00:41:10,730 --> 00:41:26,570
beers but that's a subjective question

00:41:14,270 --> 00:41:38,600
with a subjective answer I actually

00:41:26,570 --> 00:41:41,420
didn't know that okay so I'll see ya

00:41:38,600 --> 00:41:42,590
turbos second-largest site well so

00:41:41,420 --> 00:41:44,030
you've never heard of the most actually

00:41:42,590 --> 00:41:46,960
must say have you ever spoken to them

00:41:44,030 --> 00:41:49,190
about it cuz else I should as much as

00:41:46,960 --> 00:41:52,220
one not quite as much to Facebook but

00:41:49,190 --> 00:41:54,080
close to ya yeah do you ever consider

00:41:52,220 --> 00:41:57,140
actually switching to alternative

00:41:54,080 --> 00:42:00,380
versions of servers like nginx and that

00:41:57,140 --> 00:42:01,550
kind of stuff so that was well there's a

00:42:00,380 --> 00:42:02,900
few layers to that question and I just

00:42:01,550 --> 00:42:04,880
want to throw in what the beginning of

00:42:02,900 --> 00:42:07,100
what was and that is okay so the top

00:42:04,880 --> 00:42:08,780
basically top two most visited websites

00:42:07,100 --> 00:42:12,319
we've got these

00:42:08,780 --> 00:42:15,020
P spear on sites that are struggling

00:42:12,319 --> 00:42:17,260
with performance and parallel you know

00:42:15,020 --> 00:42:20,690
being able to scale horizontally

00:42:17,260 --> 00:42:24,200
Facebook's taken one approach tail bail

00:42:20,690 --> 00:42:27,200
you said okay they have replaced their

00:42:24,200 --> 00:42:30,890
their server components but PHP is still

00:42:27,200 --> 00:42:32,390
PHP and have we talked to them about

00:42:30,890 --> 00:42:34,910
that at all which obviously no I have it

00:42:32,390 --> 00:42:36,710
because I'm not aware of them and the

00:42:34,910 --> 00:42:39,520
other part of that question was coming

00:42:36,710 --> 00:42:41,770
out oh do we consider nginx or other

00:42:39,520 --> 00:42:46,819
components to sit underneath our stack

00:42:41,770 --> 00:42:49,960
we considered them very briefly the

00:42:46,819 --> 00:42:52,220
feeling was we're going to have to

00:42:49,960 --> 00:42:53,359
interface to something what's the

00:42:52,220 --> 00:42:55,190
lightest weight thing that we can

00:42:53,359 --> 00:42:56,170
interface to and that's why we grabbed a

00:42:55,190 --> 00:42:58,720
live event

00:42:56,170 --> 00:43:01,940
we're regretting that now to be honest

00:42:58,720 --> 00:43:03,530
that's why we're expanding out our Savi

00:43:01,940 --> 00:43:06,140
layer so that we can plug into things

00:43:03,530 --> 00:43:07,310
like nginx and proxy gen which is

00:43:06,140 --> 00:43:09,829
another internal project that we're

00:43:07,310 --> 00:43:13,760
going to be open sourcing shortly and

00:43:09,829 --> 00:43:16,160
apache2 and and fast CGI and things like

00:43:13,760 --> 00:43:18,950
that we are definitely switching off of

00:43:16,160 --> 00:43:21,140
live events internally once we have some

00:43:18,950 --> 00:43:24,290
of those pieces sorted out most likely

00:43:21,140 --> 00:43:25,430
to proxy gen again because it's there's

00:43:24,290 --> 00:43:27,740
a little bit of not invented here

00:43:25,430 --> 00:43:31,910
mentality at any company and Facebook's

00:43:27,740 --> 00:43:34,130
not immune to that also we use it in

00:43:31,910 --> 00:43:35,510
other points in our sack for our proxy

00:43:34,130 --> 00:43:36,500
servers and other things like that so it

00:43:35,510 --> 00:43:40,430
makes sense to have a single

00:43:36,500 --> 00:43:42,859
architecture all around I don't think

00:43:40,430 --> 00:43:45,920
we're actually talking about nginx as a

00:43:42,859 --> 00:43:47,089
possibility for that at this point and

00:43:45,920 --> 00:43:50,740
I'm running over at this point right

00:43:47,089 --> 00:43:53,660
yeah alright this is one minute come on

00:43:50,740 --> 00:43:55,720
thank you

00:43:53,660 --> 00:43:55,720
you

00:44:02,460 --> 00:44:04,520

YouTube URL: https://www.youtube.com/watch?v=Dwek7dZDFN0


