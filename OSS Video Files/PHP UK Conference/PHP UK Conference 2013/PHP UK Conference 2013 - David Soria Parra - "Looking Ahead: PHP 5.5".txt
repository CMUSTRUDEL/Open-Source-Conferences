Title: PHP UK Conference 2013 - David Soria Parra - "Looking Ahead: PHP 5.5"
Publication date: 2013-04-16
Playlist: PHP UK Conference 2013
Description: 
	It's been a year since the release of PHP 5.4 and the next version is already in the making. The talk presents the features of the upcoming PHP 5.5 version that is close to be released in April/May 2013. We are looking in Generators, a new password API, check what was deprecated and show how to write idiomatic PHP 5.5 code.
Captions: 
	00:00:07,639 --> 00:00:13,510
welcome my talk is about

00:00:10,450 --> 00:00:15,129
looking ahead PHP 55 my name is David

00:00:13,510 --> 00:00:18,039
Soviet aha I'm one of the release

00:00:15,129 --> 00:00:20,470
managers of PHP 55 which means I'm

00:00:18,039 --> 00:00:25,270
responsible for packaging looking to

00:00:20,470 --> 00:00:27,520
security fixes in announcements yes so

00:00:25,270 --> 00:00:31,270
the talk I will just cover like some

00:00:27,520 --> 00:00:33,280
parts of PHP 55 I'll look into what

00:00:31,270 --> 00:00:36,130
we're going to break which is kind of

00:00:33,280 --> 00:00:39,520
interesting for you I guess ah and look

00:00:36,130 --> 00:00:41,379
like into current discussions on what

00:00:39,520 --> 00:00:45,760
has been discussed because obviously 55

00:00:41,379 --> 00:00:47,830
is not out yet nevertheless first of all

00:00:45,760 --> 00:00:51,960
I want to actually start with a look

00:00:47,830 --> 00:00:56,230
back into the year 2012 because honestly

00:00:51,960 --> 00:00:58,450
2012 was a great year for PHP why

00:00:56,230 --> 00:01:02,020
because first of all we've seen like a

00:00:58,450 --> 00:01:04,299
big adoption of symfony2 and Silex as

00:01:02,020 --> 00:01:06,880
micro framework and we have seen the

00:01:04,299 --> 00:01:10,420
release of scent framer to which was

00:01:06,880 --> 00:01:12,579
great right and we have seen new tools

00:01:10,420 --> 00:01:15,869
come out that help us to develop our

00:01:12,579 --> 00:01:18,100
software we have finally a decent

00:01:15,869 --> 00:01:21,189
dependency management system called

00:01:18,100 --> 00:01:23,859
composer so from the PHP community

00:01:21,189 --> 00:01:26,649
perspective 2012 was a great year a lot

00:01:23,859 --> 00:01:29,289
of Drive you know two major frameworks

00:01:26,649 --> 00:01:31,990
brought out a new virgin so after like a

00:01:29,289 --> 00:01:34,810
few years what we like allods not going

00:01:31,990 --> 00:01:37,689
on that much in PHP finally it's a year

00:01:34,810 --> 00:01:40,209
a lot of stuff came out but this was the

00:01:37,689 --> 00:01:42,639
only community stuff right in the Court

00:01:40,209 --> 00:01:45,100
itself I think the core itself had a

00:01:42,639 --> 00:01:47,679
huge Drive and like new people coming in

00:01:45,100 --> 00:01:49,630
new development in general and I won't

00:01:47,679 --> 00:01:52,270
you know talk about a little bit about

00:01:49,630 --> 00:01:54,009
why 2012 with a great year from PHP not

00:01:52,270 --> 00:01:57,060
just from community and framework

00:01:54,009 --> 00:02:00,159
perspective but also from the core and

00:01:57,060 --> 00:02:02,770
one of the first thing I want to talk

00:02:00,159 --> 00:02:04,719
about is is what we call the RFC process

00:02:02,770 --> 00:02:06,099
and i'm not i'm pretty sure there are a

00:02:04,719 --> 00:02:09,610
few people in the audience would think

00:02:06,099 --> 00:02:11,380
it's a pain in the ass but i think this

00:02:09,610 --> 00:02:13,720
is one of the best things PHP has done

00:02:11,380 --> 00:02:17,740
over the last years as the krill core

00:02:13,720 --> 00:02:21,849
internals group is to enable new people

00:02:17,740 --> 00:02:23,540
to bring in their ideas as you know as a

00:02:21,849 --> 00:02:25,700
vicky page as a request for

00:02:23,540 --> 00:02:27,709
comment I will they show you know what

00:02:25,700 --> 00:02:30,859
they're going to change how they want to

00:02:27,709 --> 00:02:31,909
go how they want to change it and where

00:02:30,859 --> 00:02:34,939
they think about you know what's

00:02:31,909 --> 00:02:36,890
implications of the change and then ask

00:02:34,939 --> 00:02:39,079
for discussions on the internal mailing

00:02:36,890 --> 00:02:42,680
list they can just call for a vote and

00:02:39,079 --> 00:02:45,019
we just vote on on the feature and then

00:02:42,680 --> 00:02:48,049
it's decided if it's going it go goes in

00:02:45,019 --> 00:02:49,970
or not and this really helped a lot of

00:02:48,049 --> 00:02:51,530
new people to get into the community

00:02:49,970 --> 00:02:53,540
I'll help people that have been

00:02:51,530 --> 00:02:55,219
affiliated with the community for a long

00:02:53,540 --> 00:02:57,590
time but never being part of the core

00:02:55,219 --> 00:02:59,959
development team to bring in their ideas

00:02:57,590 --> 00:03:03,829
and basically to open up the PHP

00:02:59,959 --> 00:03:05,540
community or to like more people that

00:03:03,829 --> 00:03:08,689
brick on frameworks and need a specific

00:03:05,540 --> 00:03:11,810
feature to go in and so on so forth so

00:03:08,689 --> 00:03:13,579
this really helped to drive PHP in 2012

00:03:11,810 --> 00:03:16,579
I thing and the second thing which

00:03:13,579 --> 00:03:18,439
helped us a lot was what is called the

00:03:16,579 --> 00:03:21,799
time-based release pine and I'm not sure

00:03:18,439 --> 00:03:23,030
who has heard about that yet but this is

00:03:21,799 --> 00:03:25,099
actually the reason why I'm standing

00:03:23,030 --> 00:03:29,180
here in front of you and talk about PHP

00:03:25,099 --> 00:03:32,389
55 already because if you remember PHP 5

00:03:29,180 --> 00:03:37,159
4 was released in 2012 februari 2012 so

00:03:32,389 --> 00:03:38,810
actually a year ago um and if you think

00:03:37,159 --> 00:03:41,209
about when did but then when did we

00:03:38,810 --> 00:03:43,400
release 53 right there was some when

00:03:41,209 --> 00:03:48,680
2008 so it took us three and a half

00:03:43,400 --> 00:03:52,639
years to release 54 from 53 on and 53

00:03:48,680 --> 00:03:55,340
was even worse right so we figured out

00:03:52,639 --> 00:03:57,859
well it's not really motivating for

00:03:55,340 --> 00:04:00,199
people for like base the community to

00:03:57,859 --> 00:04:02,299
move to a new version in particularly

00:04:00,199 --> 00:04:04,639
not for core developers to work on a new

00:04:02,299 --> 00:04:06,859
version if you spend like four years

00:04:04,639 --> 00:04:09,019
waiting that your code finally hits the

00:04:06,859 --> 00:04:13,430
world and then another three years so it

00:04:09,019 --> 00:04:15,859
actually is in use so we thought ah why

00:04:13,430 --> 00:04:18,349
would you know a lot of other projects

00:04:15,859 --> 00:04:22,039
do it much better so we could adopt that

00:04:18,349 --> 00:04:23,630
and since this year and 55 is kind of

00:04:22,039 --> 00:04:25,250
the first try of that and we already

00:04:23,630 --> 00:04:29,840
failed with that well explain that later

00:04:25,250 --> 00:04:32,659
that we do um release every year right

00:04:29,840 --> 00:04:35,419
from now on you will see 5 5 this year

00:04:32,659 --> 00:04:36,040
and may probably and you will see 5 6

00:04:35,419 --> 00:04:40,420
next

00:04:36,040 --> 00:04:45,370
and may hopefully so let's think about

00:04:40,420 --> 00:04:47,980
that so in May 2014 you will have HP 56

00:04:45,370 --> 00:04:51,400
out there it will have 55 out there and

00:04:47,980 --> 00:04:56,910
we'll have 54 out there ah honestly who

00:04:51,400 --> 00:05:02,230
have you is still using 52 who is using

00:04:56,910 --> 00:05:05,260
54 okay so the rest is 53 so if your

00:05:02,230 --> 00:05:06,850
neighbor is still sleep um the guy on

00:05:05,260 --> 00:05:07,960
the right next to you please wake him up

00:05:06,850 --> 00:05:11,530
because this is an important

00:05:07,960 --> 00:05:14,320
announcement here right now as you can

00:05:11,530 --> 00:05:15,880
imagine three versions too may change

00:05:14,320 --> 00:05:21,880
three versions as a pain in the ass

00:05:15,880 --> 00:05:26,050
right 5 6 55 54 but we have 53 right so

00:05:21,880 --> 00:05:28,330
the PHP community um the last week set

00:05:26,050 --> 00:05:32,260
together and decided and wrote an RFC

00:05:28,330 --> 00:05:34,660
about it and voted on it um how are we

00:05:32,260 --> 00:05:36,130
dealing with PHP 53 and this is like I

00:05:34,660 --> 00:05:37,690
think one of the biggest announcement

00:05:36,130 --> 00:05:41,200
today if you have not followed the

00:05:37,690 --> 00:05:45,970
internal mailing lists um we are going

00:05:41,200 --> 00:05:50,080
to UL PHP 53 in 2014 so there will be no

00:05:45,970 --> 00:05:53,020
bug fixes anymore not even security bugs

00:05:50,080 --> 00:05:58,090
fixes from the 56 release on in a year

00:05:53,020 --> 00:06:00,760
now so what does it mean also that means

00:05:58,090 --> 00:06:02,710
that once we release 55 you get only

00:06:00,760 --> 00:06:05,080
security fixes from the community

00:06:02,710 --> 00:06:07,090
obviously if you have a distributions

00:06:05,080 --> 00:06:10,690
that you know does some LTS support and

00:06:07,090 --> 00:06:13,060
so on so forth um you get longer support

00:06:10,690 --> 00:06:15,010
but from our side 53 is done in a year

00:06:13,060 --> 00:06:16,570
from now and I know that you're on is

00:06:15,010 --> 00:06:18,490
the current release manager is looking

00:06:16,570 --> 00:06:21,010
forward to this point where you can

00:06:18,490 --> 00:06:25,440
finally have to like 46 years of

00:06:21,010 --> 00:06:29,110
maintaining this stuff put this away so

00:06:25,440 --> 00:06:30,820
that's kind of interesting that are you

00:06:29,110 --> 00:06:32,920
have like approximately one and a half

00:06:30,820 --> 00:06:35,950
years to make my great to something you

00:06:32,920 --> 00:06:39,100
so let's look into what is new actually

00:06:35,950 --> 00:06:41,200
now so you get a ma you know a feeling

00:06:39,100 --> 00:06:42,840
of what do you have to do you know what

00:06:41,200 --> 00:06:46,380
we added actually

00:06:42,840 --> 00:06:48,630
so I'm you know I'm a nerd I really love

00:06:46,380 --> 00:06:50,250
language features a lot so I will start

00:06:48,630 --> 00:06:52,560
off with some random language feature

00:06:50,250 --> 00:06:56,100
this I think the biggest addition in PHP

00:06:52,560 --> 00:06:57,840
55 but it might not be the most useful

00:06:56,100 --> 00:07:00,660
one to be honest and that is the

00:06:57,840 --> 00:07:03,630
so-called generators uh who have you

00:07:00,660 --> 00:07:06,860
have ever verdict was Payton you should

00:07:03,630 --> 00:07:10,410
partners awesome so the general

00:07:06,860 --> 00:07:12,090
generators are an idea which we i would

00:07:10,410 --> 00:07:14,820
say borrow but actually stole it right

00:07:12,090 --> 00:07:19,160
away from tyson because why nots to good

00:07:14,820 --> 00:07:21,840
ideas right so um over the last year's

00:07:19,160 --> 00:07:24,330
PHP you know try to incorporate more

00:07:21,840 --> 00:07:27,960
language features which help you to

00:07:24,330 --> 00:07:30,120
write more concise code you know shorter

00:07:27,960 --> 00:07:33,090
stuff you know we have closures so you

00:07:30,120 --> 00:07:35,060
don't have to write functions and come

00:07:33,090 --> 00:07:40,110
up with some random function names so we

00:07:35,060 --> 00:07:42,120
are introduced generators also it's part

00:07:40,110 --> 00:07:45,030
of this making code a bit more concise

00:07:42,120 --> 00:07:47,250
and the basic idea was well if you look

00:07:45,030 --> 00:07:50,160
into something that people write from

00:07:47,250 --> 00:07:52,710
time to time like iterators uh it's a

00:07:50,160 --> 00:07:56,130
fairly complex thing to do writing an

00:07:52,710 --> 00:07:58,650
iterator so look at this thing it's a an

00:07:56,130 --> 00:08:01,050
iterator to remember that for years like

00:07:58,650 --> 00:08:04,260
nothing else and just a plan on how to

00:08:01,050 --> 00:08:06,240
traverse stuff right how to traverse any

00:08:04,260 --> 00:08:07,919
kind of data most of the time is the

00:08:06,240 --> 00:08:10,380
data structure it can be a stream it can

00:08:07,919 --> 00:08:13,139
be anything right it's just a algorithm

00:08:10,380 --> 00:08:15,750
around that and to write such a thing in

00:08:13,139 --> 00:08:19,550
PHP at the moment in five four you have

00:08:15,750 --> 00:08:23,550
to you know implement the iterator

00:08:19,550 --> 00:08:25,770
interface um so if you want to traverse

00:08:23,550 --> 00:08:29,250
for example in this very stupid example

00:08:25,770 --> 00:08:31,339
obviously just natural numbers you end

00:08:29,250 --> 00:08:35,039
up with a very very complex

00:08:31,339 --> 00:08:37,110
implementation of an iterator it does

00:08:35,039 --> 00:08:40,650
nothing else than get a counter up right

00:08:37,110 --> 00:08:42,360
so in if you think about what makes of

00:08:40,650 --> 00:08:45,450
the iterator Steve like director

00:08:42,360 --> 00:08:47,250
iterators and I know the poly traitors

00:08:45,450 --> 00:08:50,010
what they are everything that there is

00:08:47,250 --> 00:08:52,140
filthy traitors they're basically for

00:08:50,010 --> 00:08:53,300
each loops that are have like a bit of

00:08:52,140 --> 00:08:56,690
logic in it

00:08:53,300 --> 00:08:59,480
so generators as the idea to use this

00:08:56,690 --> 00:09:03,560
only this big for each loop and put it

00:08:59,480 --> 00:09:05,930
into a function and I make you know make

00:09:03,560 --> 00:09:08,360
this useful in a small concise way so

00:09:05,930 --> 00:09:10,910
how would look a range iterator in a

00:09:08,360 --> 00:09:13,430
cutting as a generator this is what a

00:09:10,910 --> 00:09:17,209
complete iterator implementation of this

00:09:13,430 --> 00:09:19,339
looks so it's basically a function right

00:09:17,209 --> 00:09:20,930
you can read right away like I think

00:09:19,339 --> 00:09:23,600
everything is readable except for this

00:09:20,930 --> 00:09:25,399
interesting yield statement and that's

00:09:23,600 --> 00:09:27,980
actually what makes an iterator an

00:09:25,399 --> 00:09:29,630
iterator what does it do and that's

00:09:27,980 --> 00:09:32,149
pretty hard to explain for most people

00:09:29,630 --> 00:09:35,360
it's hard for me to explain hard to

00:09:32,149 --> 00:09:38,570
understand I think yield there's nothing

00:09:35,360 --> 00:09:41,870
else it's similar to return so at that

00:09:38,570 --> 00:09:43,880
point if you call it the function will

00:09:41,870 --> 00:09:46,250
start to the point where it reaches

00:09:43,880 --> 00:09:48,470
refer to yield statement and at that

00:09:46,250 --> 00:09:51,740
point it returns the actual value in

00:09:48,470 --> 00:09:54,680
this case I the variable I and then

00:09:51,740 --> 00:09:56,990
unlike a standard return value return it

00:09:54,680 --> 00:09:59,209
does not you know complete the function

00:09:56,990 --> 00:10:01,579
and goes back to thee to the original

00:09:59,209 --> 00:10:04,040
color well it goes back to the original

00:10:01,579 --> 00:10:06,290
color but it saves the current state of

00:10:04,040 --> 00:10:10,130
the function so it can resume the

00:10:06,290 --> 00:10:13,520
function later right so an iterator you

00:10:10,130 --> 00:10:15,860
would go ahead and walk to the yield

00:10:13,520 --> 00:10:18,589
statement then return the value and then

00:10:15,860 --> 00:10:20,930
the generator basically waits till it's

00:10:18,589 --> 00:10:24,740
called the next time and then it will

00:10:20,930 --> 00:10:26,660
resume from that state on ok so that's

00:10:24,740 --> 00:10:28,820
the basic idea behind it and now

00:10:26,660 --> 00:10:32,020
generators or like iterators can do a

00:10:28,820 --> 00:10:36,110
lot more stuff right iterators can arm

00:10:32,020 --> 00:10:39,140
return oh like look at this has come for

00:10:36,110 --> 00:10:41,060
a second oh yeah that's I want to talk

00:10:39,140 --> 00:10:44,390
about that because there is a small

00:10:41,060 --> 00:10:47,570
difference on we thought we saw we see

00:10:44,390 --> 00:10:50,449
right this is a function but if you call

00:10:47,570 --> 00:10:52,130
it it does not behave like a function it

00:10:50,449 --> 00:10:55,640
actually will return a generator object

00:10:52,130 --> 00:10:58,160
and this generator object is nothing

00:10:55,640 --> 00:11:00,709
else then something that implements an

00:10:58,160 --> 00:11:04,250
iterator so can just call any iterator

00:11:00,709 --> 00:11:06,380
function except for one on this object

00:11:04,250 --> 00:11:07,250
right and you can put it into a 4h and

00:11:06,380 --> 00:11:09,530
it will just write

00:11:07,250 --> 00:11:11,980
way we're not it's pretty pretty nice

00:11:09,530 --> 00:11:16,700
right it's much easier than writing this

00:11:11,980 --> 00:11:18,560
so but I said like before ah iterators

00:11:16,700 --> 00:11:20,960
can do more they can return keys for

00:11:18,560 --> 00:11:23,270
every value that they return so well

00:11:20,960 --> 00:11:26,360
generators can that too right use this

00:11:23,270 --> 00:11:28,730
as just a row sin taxes we you know note

00:11:26,360 --> 00:11:32,030
from somewhere else and this is a very

00:11:28,730 --> 00:11:36,020
stupid and very easy why and how to make

00:11:32,030 --> 00:11:39,680
requests to multiple URLs so what it

00:11:36,020 --> 00:11:41,930
does it starts out on for each URL that

00:11:39,680 --> 00:11:45,410
you put into this request function it

00:11:41,930 --> 00:11:47,030
goes it it does the request until the

00:11:45,410 --> 00:11:48,950
first yield segment gets the result

00:11:47,030 --> 00:11:52,190
returns the result with URL and then

00:11:48,950 --> 00:11:54,380
waits what and we return to the for each

00:11:52,190 --> 00:11:57,020
and can process the result of the first

00:11:54,380 --> 00:11:58,640
URL request I'll do whatever we want and

00:11:57,020 --> 00:12:03,950
then we continue with the next request

00:11:58,640 --> 00:12:05,750
right and so in the critics out the good

00:12:03,950 --> 00:12:07,310
thing about this is it's but you know

00:12:05,750 --> 00:12:10,100
you don't have to buffer everything into

00:12:07,310 --> 00:12:13,610
memory at once you go one request after

00:12:10,100 --> 00:12:15,560
another it's just a very easy thing to

00:12:13,610 --> 00:12:18,010
do because I will talk about it later

00:12:15,560 --> 00:12:20,690
it's pretty hard to come up with easy

00:12:18,010 --> 00:12:23,480
generators that don't need much

00:12:20,690 --> 00:12:27,440
explanation about what is going on so

00:12:23,480 --> 00:12:29,150
generators are iterators you can call

00:12:27,440 --> 00:12:32,600
every methods did you know from an

00:12:29,150 --> 00:12:36,500
iterator on a generator except for

00:12:32,600 --> 00:12:40,520
rewind well there is a rewind you could

00:12:36,500 --> 00:12:43,580
do until you reach the first yield

00:12:40,520 --> 00:12:45,200
statement because then we the compiler

00:12:43,580 --> 00:12:47,440
has no way to figure out how to go back

00:12:45,200 --> 00:12:49,880
to the first state of the function um

00:12:47,440 --> 00:12:51,140
then there are more advanced things and

00:12:49,880 --> 00:12:53,089
I'm think I don't want really want to

00:12:51,140 --> 00:12:54,650
talk about it because if you really you

00:12:53,089 --> 00:12:56,839
know need it you will figure out how to

00:12:54,650 --> 00:12:59,180
send values into a generator how to

00:12:56,839 --> 00:13:02,320
throw stuff into a generator and so on

00:12:59,180 --> 00:13:06,050
so forth it's it's fairly interesting so

00:13:02,320 --> 00:13:09,110
lots of code more people were asking me

00:13:06,050 --> 00:13:10,730
about some interesting way how to use a

00:13:09,110 --> 00:13:12,560
generator and from the pipe community

00:13:10,730 --> 00:13:15,320
there's one way they use the generators

00:13:12,560 --> 00:13:17,780
as to move more iterators together so i

00:13:15,320 --> 00:13:20,490
wanted to traverse the directory and

00:13:17,780 --> 00:13:24,000
every time an encounter zip file I

00:13:20,490 --> 00:13:26,100
will I want to read the content of the

00:13:24,000 --> 00:13:29,430
Philip file as if it is a directory

00:13:26,100 --> 00:13:31,500
right makes sense so what I can do I use

00:13:29,430 --> 00:13:34,560
a directory iterator and throw it into

00:13:31,500 --> 00:13:36,360
this generator called rate and this is

00:13:34,560 --> 00:13:39,000
poorly written code because it's my code

00:13:36,360 --> 00:13:40,410
so don't think it's like the best way to

00:13:39,000 --> 00:13:43,200
write such a thing it's probably much

00:13:40,410 --> 00:13:45,149
better ways if you see in channels like

00:13:43,200 --> 00:13:48,990
core developer write PHP code it's

00:13:45,149 --> 00:13:51,029
usually bad code so um what I do is I

00:13:48,990 --> 00:13:53,370
traverse all the files that I get and if

00:13:51,029 --> 00:13:55,680
every time I encounter as if all I go

00:13:53,370 --> 00:13:58,890
into my generator a generator that

00:13:55,680 --> 00:14:01,470
reeses app file right it just raised a

00:13:58,890 --> 00:14:06,089
zip file entry after entry and he else

00:14:01,470 --> 00:14:07,890
did the entry so uh and if not if I

00:14:06,089 --> 00:14:10,680
don't see a zip file I just go ahead and

00:14:07,890 --> 00:14:12,750
return the file itself and in the end I

00:14:10,680 --> 00:14:22,290
will have something really nice I can

00:14:12,750 --> 00:14:25,050
hopefully show you this oh this I have

00:14:22,290 --> 00:14:27,329
something like this right so every every

00:14:25,050 --> 00:14:30,420
time an encounter like a zip file I just

00:14:27,329 --> 00:14:33,329
read the content of the zip file itself

00:14:30,420 --> 00:14:35,130
as well okay so that's pretty nice it's

00:14:33,329 --> 00:14:37,529
one of the few things they could came up

00:14:35,130 --> 00:14:41,190
which just makes it yell doesn't need

00:14:37,529 --> 00:14:43,290
too much explanation anyway so that's

00:14:41,190 --> 00:14:46,500
four generators if we really wanted read

00:14:43,290 --> 00:14:48,329
about more and then there's one thing I

00:14:46,500 --> 00:14:50,100
think that's like for most people the

00:14:48,329 --> 00:14:54,149
most important addition that we did is a

00:14:50,100 --> 00:14:57,540
paste password hashing API that is clean

00:14:54,149 --> 00:15:00,990
simple and everybody can use it why do

00:14:57,540 --> 00:15:05,040
we need that here of you is using sha

00:15:00,990 --> 00:15:06,810
two family members to generate or attach

00:15:05,040 --> 00:15:11,540
passwords and store them in database

00:15:06,810 --> 00:15:18,990
like sha-512 sha256 who is using theirs

00:15:11,540 --> 00:15:22,550
who is using sha-1 who is using md5 who

00:15:18,990 --> 00:15:22,550
is storing them in clear text

00:15:22,780 --> 00:15:29,180
so um the problem is usually we wouldn't

00:15:26,900 --> 00:15:31,070
want to store clerk a clear text

00:15:29,180 --> 00:15:33,320
passwords obviously so we need to find a

00:15:31,070 --> 00:15:35,540
way to hatch them and what we've done

00:15:33,320 --> 00:15:38,270
for the last years of the last few years

00:15:35,540 --> 00:15:39,890
is using md5 or she'll one and that is a

00:15:38,270 --> 00:15:42,080
bad idea why it's a bad idea because

00:15:39,890 --> 00:15:44,450
there are a cryptographically not secure

00:15:42,080 --> 00:15:46,580
anymore that means there are multiple

00:15:44,450 --> 00:15:48,230
attacks that you can do against them the

00:15:46,580 --> 00:15:50,720
first one is collision attacks it's kind

00:15:48,230 --> 00:15:53,330
of hard to pull off but there's advanced

00:15:50,720 --> 00:15:55,310
research on how to do you collision

00:15:53,330 --> 00:15:57,470
attacks Amanda five in it kind of works

00:15:55,310 --> 00:15:59,360
out probably not for passwords but it

00:15:57,470 --> 00:16:02,270
usually breaks then there are rainbow

00:15:59,360 --> 00:16:06,460
tables so you can just get tables of all

00:16:02,270 --> 00:16:09,050
hashes of all of eight character

00:16:06,460 --> 00:16:10,760
passwords on the whole ass cassette

00:16:09,050 --> 00:16:13,790
which is kind of big include special

00:16:10,760 --> 00:16:16,310
characters um and it's just one terabyte

00:16:13,790 --> 00:16:19,160
it's not easy with space is cheap right

00:16:16,310 --> 00:16:22,870
can go ahead by 480 years of freaking

00:16:19,160 --> 00:16:26,450
one terabyte drive and you'll be done um

00:16:22,870 --> 00:16:29,390
so that's that's easy and then there's

00:16:26,450 --> 00:16:34,010
the thing called GPUs which made

00:16:29,390 --> 00:16:37,400
cryptography slife hard because they are

00:16:34,010 --> 00:16:39,320
really good at doing a lot of lot of

00:16:37,400 --> 00:16:43,190
operations that are similar to each

00:16:39,320 --> 00:16:45,350
other on a lot of data and you can just

00:16:43,190 --> 00:16:47,630
go ahead and if you don't have a GPO

00:16:45,350 --> 00:16:49,790
cluster to brute-force passwords you can

00:16:47,630 --> 00:16:52,580
go to head to lose service called Amazon

00:16:49,790 --> 00:16:55,370
and you just can buy one for a day and

00:16:52,580 --> 00:16:57,320
then you can start ahead and go ahead

00:16:55,370 --> 00:16:59,240
and try to brute force it and if you're

00:16:57,320 --> 00:17:01,460
lucky with enough one or two days maybe

00:16:59,240 --> 00:17:04,610
four days you can crack a password it's

00:17:01,460 --> 00:17:07,070
not that hard anymore so amplifiers and

00:17:04,610 --> 00:17:08,780
shall once cash flows are broken and you

00:17:07,070 --> 00:17:12,439
should not use them what you actually

00:17:08,780 --> 00:17:16,040
should use is or that's what we try to

00:17:12,439 --> 00:17:17,959
do with a new password API said is um we

00:17:16,040 --> 00:17:20,120
want to have a easy-to-use password

00:17:17,959 --> 00:17:22,310
hashing API that notice from our

00:17:20,120 --> 00:17:24,079
perspective the best-known password

00:17:22,310 --> 00:17:26,839
hashing algorithm and it includes known

00:17:24,079 --> 00:17:28,970
protections and what are protections the

00:17:26,839 --> 00:17:32,120
first ones include assault that means

00:17:28,970 --> 00:17:32,730
for every password generate that we get

00:17:32,120 --> 00:17:35,280
and have to

00:17:32,730 --> 00:17:37,799
half we generate a random string and add

00:17:35,280 --> 00:17:41,220
it to it and just append the string

00:17:37,799 --> 00:17:42,990
we're prepended and then we're so you

00:17:41,220 --> 00:17:46,590
brain bow table are taxed and work well

00:17:42,990 --> 00:17:47,910
very well anymore and unlike other most

00:17:46,590 --> 00:17:50,520
of the other stuff that you want to do

00:17:47,910 --> 00:17:52,650
in computer with signs are hashing

00:17:50,520 --> 00:17:55,470
algorithms if they are slow it's good

00:17:52,650 --> 00:17:58,440
for you because it makes it much harder

00:17:55,470 --> 00:18:00,090
for guys who try to generate a billion

00:17:58,440 --> 00:18:02,549
of those it doesn't it doesn't really

00:18:00,090 --> 00:18:04,110
affect you because 200 milliseconds of

00:18:02,549 --> 00:18:06,270
500 milliseconds it doesn't really

00:18:04,110 --> 00:18:09,090
matter for you but it mattered for a guy

00:18:06,270 --> 00:18:11,100
who tries to do billion of those okay so

00:18:09,090 --> 00:18:13,500
it keeps people from brute forcing and

00:18:11,100 --> 00:18:16,559
this is what it looks like the passport

00:18:13,500 --> 00:18:18,929
API is really easy all you do you put as

00:18:16,559 --> 00:18:21,390
you know your secret your password into

00:18:18,929 --> 00:18:23,100
the password hash function and then

00:18:21,390 --> 00:18:27,860
you'd say oh we want I want to use the

00:18:23,100 --> 00:18:30,299
best password default um value there

00:18:27,860 --> 00:18:32,850
that is basically which implementation

00:18:30,299 --> 00:18:34,620
we use for hashing it's there's only one

00:18:32,850 --> 00:18:36,929
and then you get out of hash and hash

00:18:34,620 --> 00:18:38,730
that's the nice thing about it it

00:18:36,929 --> 00:18:40,470
includes all the option that is

00:18:38,730 --> 00:18:42,540
necessary to calculate the hash it

00:18:40,470 --> 00:18:44,730
includes assault and it includes to hash

00:18:42,540 --> 00:18:45,780
and just use this one hash and store it

00:18:44,730 --> 00:18:48,240
into the database and you'll be done

00:18:45,780 --> 00:18:49,679
okay so this is the first step and then

00:18:48,240 --> 00:18:51,809
you obviously want to verify it against

00:18:49,679 --> 00:18:54,419
some input that the user gave you and

00:18:51,809 --> 00:18:57,000
you get the power from the database and

00:18:54,419 --> 00:19:00,390
you compare it against the half that you

00:18:57,000 --> 00:19:02,490
have against the password you have from

00:19:00,390 --> 00:19:04,410
the user with the password verified and

00:19:02,490 --> 00:19:05,820
because we store everything every

00:19:04,410 --> 00:19:08,100
information that is needed spirit is

00:19:05,820 --> 00:19:11,370
produced to hash um except for the

00:19:08,100 --> 00:19:13,980
plaintext password obviously ah in this

00:19:11,370 --> 00:19:15,660
hash string already the verify method

00:19:13,980 --> 00:19:18,299
doesn't need any options or anything

00:19:15,660 --> 00:19:19,679
right you just you know go ahead and do

00:19:18,299 --> 00:19:21,299
that so that's we're getting it really

00:19:19,679 --> 00:19:23,640
easy and then there are two more

00:19:21,299 --> 00:19:27,630
advanced functions if you came up in ten

00:19:23,640 --> 00:19:29,790
years and you know GPUs we're so far so

00:19:27,630 --> 00:19:33,600
fast like 10 years maybe that you you

00:19:29,790 --> 00:19:35,580
know the the cost how slow you're Algrim

00:19:33,600 --> 00:19:37,290
actually is your hashing algorithm is

00:19:35,580 --> 00:19:40,250
you know it's it's not slow enough

00:19:37,290 --> 00:19:44,250
anymore you can rehash it with more cost

00:19:40,250 --> 00:19:44,600
so it's even slower because our hashing

00:19:44,250 --> 00:19:46,580
out

00:19:44,600 --> 00:19:49,670
rhythm is called bcrypt and it has a

00:19:46,580 --> 00:19:51,530
cost factor that means as the higher the

00:19:49,670 --> 00:19:53,720
cost factor is the slower it becomes

00:19:51,530 --> 00:19:57,680
which is good for you and bad for the

00:19:53,720 --> 00:19:59,720
attacker so as that we're using really

00:19:57,680 --> 00:20:01,340
want to use for knowledge now on from

00:19:59,720 --> 00:20:04,400
five on you want to create password

00:20:01,340 --> 00:20:06,380
hashes are using this password API it's

00:20:04,400 --> 00:20:07,970
just save them in the database it's easy

00:20:06,380 --> 00:20:09,680
and safe and we use this algorithm

00:20:07,970 --> 00:20:12,080
called big crib which relies on a

00:20:09,680 --> 00:20:14,630
hashing function from Blowfish which is

00:20:12,080 --> 00:20:16,550
considered a cryptographic security

00:20:14,630 --> 00:20:18,710
moment there are no no and collision

00:20:16,550 --> 00:20:21,920
attacks so it's pretty nice and it's

00:20:18,710 --> 00:20:24,560
slow cool and then we added a lot of the

00:20:21,920 --> 00:20:26,350
little things are I cannot talk about

00:20:24,560 --> 00:20:29,870
everything that just a few things

00:20:26,350 --> 00:20:33,200
there's this one thing who have of you

00:20:29,870 --> 00:20:36,320
have ever tried to call empty on a

00:20:33,200 --> 00:20:39,080
function result and failed obviously

00:20:36,320 --> 00:20:41,510
because it doesn't burn in 55 it finally

00:20:39,080 --> 00:20:44,690
words you can put arbitrary expressions

00:20:41,510 --> 00:20:49,250
into mt and it would work so this works

00:20:44,690 --> 00:20:51,590
ah finally it does not work for is set

00:20:49,250 --> 00:20:53,150
because of the semantic behavior fit set

00:20:51,590 --> 00:20:55,940
it doesn't really make sense if you can

00:20:53,150 --> 00:21:00,710
read about that in the RFC as to why we

00:20:55,940 --> 00:21:02,360
refused it so in mt works then we added

00:21:00,710 --> 00:21:04,130
boule ball which is basically just as

00:21:02,360 --> 00:21:07,160
involved in anything else and then we

00:21:04,130 --> 00:21:09,830
add a daytime immutable the where's

00:21:07,160 --> 00:21:13,130
Derek there staring the guy who wrote a

00:21:09,830 --> 00:21:17,240
time and responsible for this is so give

00:21:13,130 --> 00:21:21,710
him beer for that or wine um daytime

00:21:17,240 --> 00:21:23,890
immutable is the idea that well in the

00:21:21,710 --> 00:21:27,350
current implementation of daytime I

00:21:23,890 --> 00:21:29,330
create a daytime object in today right

00:21:27,350 --> 00:21:32,150
automatically today and then I'm

00:21:29,330 --> 00:21:36,110
modified today and I want to get out

00:21:32,150 --> 00:21:40,180
tomorrow right plus one day and then I

00:21:36,110 --> 00:21:44,690
compares today tomorrow and what it is

00:21:40,180 --> 00:21:47,060
the same thing right how can a date

00:21:44,690 --> 00:21:48,620
actually change right today is today and

00:21:47,060 --> 00:21:51,620
not tomorrow tomorrow might be today

00:21:48,620 --> 00:21:55,700
some day but it's not today too you know

00:21:51,620 --> 00:21:58,250
so this is the problem here is that the

00:21:55,700 --> 00:22:02,030
object itself gets modified when you

00:21:58,250 --> 00:22:03,380
call modify on it right so and people

00:22:02,030 --> 00:22:06,670
were thinking about it well that's not

00:22:03,380 --> 00:22:10,910
how we used eight dates usually dates

00:22:06,670 --> 00:22:14,630
kinda are immutable you know it the

00:22:10,910 --> 00:22:17,240
current date doesn't change anyway so we

00:22:14,630 --> 00:22:20,030
add a daytime immutable and it will

00:22:17,240 --> 00:22:22,430
never modify the object itself but

00:22:20,030 --> 00:22:25,160
return a new object so this works now

00:22:22,430 --> 00:22:29,120
makes much more much more sense I think

00:22:25,160 --> 00:22:31,130
um there is an open discussion about um

00:22:29,120 --> 00:22:33,320
they tow I'm immutable at the moment

00:22:31,130 --> 00:22:34,910
extends from daytime but it has a

00:22:33,320 --> 00:22:36,290
different behavior and this allows back

00:22:34,910 --> 00:22:37,520
and forth so if we really want to do it

00:22:36,290 --> 00:22:40,730
I think we're kind of settled on that

00:22:37,520 --> 00:22:43,760
we're doing it to make it easier for

00:22:40,730 --> 00:22:45,350
people to use existing api's but then

00:22:43,760 --> 00:22:47,950
you run into a problem if the existing

00:22:45,350 --> 00:22:51,320
API relies on your modification our

00:22:47,950 --> 00:22:52,790
methods and cannot do it anymore so

00:22:51,320 --> 00:22:53,960
there's a little bit back and forth

00:22:52,790 --> 00:22:57,130
since I think it's not a hundred percent

00:22:53,960 --> 00:23:00,650
settled people still try to convince

00:22:57,130 --> 00:23:04,610
Derek that's not a good idea but I think

00:23:00,650 --> 00:23:07,190
at the moment we're settled so that's

00:23:04,610 --> 00:23:09,200
good then for all the people that's

00:23:07,190 --> 00:23:11,059
that's the future for all the people who

00:23:09,200 --> 00:23:13,730
write with a lot of reflection stuff

00:23:11,059 --> 00:23:15,830
phpunit guys doctoring two guys and so

00:23:13,730 --> 00:23:19,010
on the force if they had the problem

00:23:15,830 --> 00:23:21,140
that if you have two files one you know

00:23:19,010 --> 00:23:24,020
when half of namespace peach PUK and

00:23:21,140 --> 00:23:26,030
then a class conference and then you

00:23:24,020 --> 00:23:29,870
want to make a reflection on this

00:23:26,030 --> 00:23:31,820
conference class well this fails why

00:23:29,870 --> 00:23:33,320
does it fail because reflection class

00:23:31,820 --> 00:23:35,750
actually is the full equal for like

00:23:33,320 --> 00:23:39,140
fully qualified name and it doesn't have

00:23:35,750 --> 00:23:42,110
that at that point arm so we need a way

00:23:39,140 --> 00:23:45,380
to get the fully qualified name and this

00:23:42,110 --> 00:23:46,460
is kind of similar to like rotten I

00:23:45,380 --> 00:23:49,670
don't know it's not really similar to

00:23:46,460 --> 00:23:52,100
java but it looks like java we have this

00:23:49,670 --> 00:23:54,200
Colin Colin class thing and it will

00:23:52,100 --> 00:23:58,400
always return the fully qualified name

00:23:54,200 --> 00:24:00,410
of the class fairly easy it's nice if

00:23:58,400 --> 00:24:02,150
you write debuggers or any tools around

00:24:00,410 --> 00:24:02,690
debugging you you want to get stack

00:24:02,150 --> 00:24:04,580
trace

00:24:02,690 --> 00:24:08,540
and you know stuff like that it's fairly

00:24:04,580 --> 00:24:12,890
easy oh this I want to skip and then

00:24:08,540 --> 00:24:15,830
finally we are finally so you can do try

00:24:12,890 --> 00:24:17,930
finally it's I think it's been bugging

00:24:15,830 --> 00:24:20,360
people for years I never used it myself

00:24:17,930 --> 00:24:22,940
I never needed then it myself but

00:24:20,360 --> 00:24:25,870
finally will always be executed even if

00:24:22,940 --> 00:24:28,580
there's an exception so you don't have

00:24:25,870 --> 00:24:34,190
to write duplicated k but instead can

00:24:28,580 --> 00:24:36,290
just go ahead and um well finally anyway

00:24:34,190 --> 00:24:38,120
and there are lots of more stuff and can

00:24:36,290 --> 00:24:41,240
I mean you're all developers you're all

00:24:38,120 --> 00:24:43,040
smart hopefully um then you can go ahead

00:24:41,240 --> 00:24:45,140
and just read about all the changes that

00:24:43,040 --> 00:24:49,760
will be probably lots of articles and

00:24:45,140 --> 00:24:51,020
blog post about it anyway so one in good

00:24:49,760 --> 00:24:53,570
old fashioned always breaking things

00:24:51,020 --> 00:24:59,030
because there was a lot of old stuff

00:24:53,570 --> 00:25:00,700
that is ah you know broken and um we

00:24:59,030 --> 00:25:03,320
have to fix it I mean every really is

00:25:00,700 --> 00:25:05,690
the stuff but this release actually

00:25:03,320 --> 00:25:08,510
doesn't break that much stuff but in

00:25:05,690 --> 00:25:10,190
case you're the guy right next to you is

00:25:08,510 --> 00:25:11,600
already asleep this is the second big

00:25:10,190 --> 00:25:15,800
announcement that you should really wake

00:25:11,600 --> 00:25:19,160
him up because my skill extension is

00:25:15,800 --> 00:25:23,090
deprecated from now on oh my god don't

00:25:19,160 --> 00:25:26,300
panic because this means the old old old

00:25:23,090 --> 00:25:28,430
mysql extension and not demise krill I

00:25:26,300 --> 00:25:31,430
extension and not the PDL mysql

00:25:28,430 --> 00:25:33,560
exception only the old mysql extension

00:25:31,430 --> 00:25:35,210
which apparently still used in wordpress

00:25:33,560 --> 00:25:40,160
or the people who run wordpress we'll

00:25:35,210 --> 00:25:42,410
have a fun time with justification um so

00:25:40,160 --> 00:25:44,690
this is deprecated now and every time we

00:25:42,410 --> 00:25:46,130
call MySQL connect or something like

00:25:44,690 --> 00:25:48,410
that you will get interpretation error

00:25:46,130 --> 00:25:50,390
which most of which if you use the

00:25:48,410 --> 00:25:51,710
production any setting doesn't affect

00:25:50,390 --> 00:25:53,390
you that much but it makes people

00:25:51,710 --> 00:25:54,620
hopefully is the development setting

00:25:53,390 --> 00:25:58,640
because it mitcham what makes much more

00:25:54,620 --> 00:26:00,080
sense ah and there's we'll run into this

00:25:58,640 --> 00:26:03,650
problem that they get deprecation errors

00:26:00,080 --> 00:26:05,660
anyway so use my eyes coli and use PDO

00:26:03,650 --> 00:26:07,910
mysql you should already since the last

00:26:05,660 --> 00:26:09,290
years it's been a long time since we've

00:26:07,910 --> 00:26:13,130
introduced my school I I didn't even

00:26:09,290 --> 00:26:15,320
know since when so it's years and then

00:26:13,130 --> 00:26:16,070
this a modifier is deprecated in the

00:26:15,320 --> 00:26:19,160
prac

00:26:16,070 --> 00:26:21,260
I don't I I was thinking well I should I

00:26:19,160 --> 00:26:23,270
show you the B modifier and i was like

00:26:21,260 --> 00:26:26,180
thinking now you're not showing it Eve

00:26:23,270 --> 00:26:28,490
evil things to people it's not good so I

00:26:26,180 --> 00:26:30,500
refuse to show you what it does I just

00:26:28,490 --> 00:26:31,880
tell you it's gone and if you've ever

00:26:30,500 --> 00:26:36,200
used that you should be ashamed of

00:26:31,880 --> 00:26:38,660
yourself and it is gone and use replace

00:26:36,200 --> 00:26:40,190
call back instead preg replace call bags

00:26:38,660 --> 00:26:42,500
so that's the only two things that we

00:26:40,190 --> 00:26:49,610
actually get rid of which is I think

00:26:42,500 --> 00:26:54,860
kind of nice um and then I want to talk

00:26:49,610 --> 00:26:57,680
a little bit on about where I'm fast

00:26:54,860 --> 00:26:59,540
faster than I anticipated a little bit

00:26:57,680 --> 00:27:02,480
about the current discussions that we

00:26:59,540 --> 00:27:04,340
have and you know look into the

00:27:02,480 --> 00:27:07,160
community we will be discussing because

00:27:04,340 --> 00:27:10,190
55 isn't it out it's probably going like

00:27:07,160 --> 00:27:12,260
we released an alpha today are 45 which

00:27:10,190 --> 00:27:13,730
you always should try out it's going to

00:27:12,260 --> 00:27:16,730
be the last one we're going to do in

00:27:13,730 --> 00:27:19,340
beta afterwards but let's look at the de

00:27:16,730 --> 00:27:25,940
current discussion so who of you is

00:27:19,340 --> 00:27:30,620
using a PC lots of people who of you are

00:27:25,940 --> 00:27:32,480
not switching to 54 because of a pc only

00:27:30,620 --> 00:27:35,390
a few i know a lot more people actually

00:27:32,480 --> 00:27:39,020
that say IPC doesn't work with 54 at the

00:27:35,390 --> 00:27:40,820
moment so i cannot switch so we had this

00:27:39,020 --> 00:27:43,490
problem that of the last year's we

00:27:40,820 --> 00:27:47,420
wanted to integrate a pc into the core

00:27:43,490 --> 00:27:52,040
and then kind of the development base or

00:27:47,420 --> 00:27:53,840
to develop herself of a pc left the

00:27:52,040 --> 00:27:55,670
project and in the end we're only one or

00:27:53,840 --> 00:27:59,210
two maintainer roots and they were slow

00:27:55,670 --> 00:28:02,810
but you're really there to maintain or

00:27:59,210 --> 00:28:05,210
bring this fairly complex code base into

00:28:02,810 --> 00:28:08,060
a shape where we can you know put it

00:28:05,210 --> 00:28:12,170
into core and have a finely and up code

00:28:08,060 --> 00:28:13,940
cache in to call and this is a as far as

00:28:12,170 --> 00:28:16,370
i know a lot of a big problem for a lot

00:28:13,940 --> 00:28:18,740
of companies out there why they don't

00:28:16,370 --> 00:28:21,590
use 54 because they need an opcode cash

00:28:18,740 --> 00:28:23,390
that actually worked for them and most

00:28:21,590 --> 00:28:25,560
of them actually rely also on a pc

00:28:23,390 --> 00:28:28,870
functions

00:28:25,560 --> 00:28:31,330
last like a months ago Zen came up ins

00:28:28,870 --> 00:28:33,970
like they said like well we have this

00:28:31,330 --> 00:28:35,740
thing called sent optimizer since a few

00:28:33,970 --> 00:28:39,310
years and it's been closed source and

00:28:35,740 --> 00:28:41,440
ever since but there's no real business

00:28:39,310 --> 00:28:43,960
value anymore in us having it closed

00:28:41,440 --> 00:28:47,560
source so are we could open source it

00:28:43,960 --> 00:28:50,650
it's much simpler than a PC it's also as

00:28:47,560 --> 00:28:54,460
fast as a PC as far as I know and we

00:28:50,650 --> 00:28:56,020
could make it verdict I guess so then

00:28:54,460 --> 00:28:57,400
they started the whole discussion of

00:28:56,020 --> 00:28:59,320
well we can have an up code cache

00:28:57,400 --> 00:29:02,560
finally so sent this article we do this

00:28:59,320 --> 00:29:06,790
and since two weeks send optimizes open

00:29:02,560 --> 00:29:08,740
source and it is hopefully there's an

00:29:06,790 --> 00:29:10,360
RFC out there and there's the problem

00:29:08,740 --> 00:29:12,340
that people have to build in it and that

00:29:10,360 --> 00:29:15,040
might be a vote against it for whatever

00:29:12,340 --> 00:29:18,970
reason but hopefully it is moving into

00:29:15,040 --> 00:29:22,960
coal which means that with 55 you get an

00:29:18,970 --> 00:29:24,850
opcode cash right out with PHP and don't

00:29:22,960 --> 00:29:28,290
have to you know care about any

00:29:24,850 --> 00:29:30,430
extensions anymore about that there

00:29:28,290 --> 00:29:32,770
there are two problems with that first

00:29:30,430 --> 00:29:36,520
of all it delays PHP 55 by like a month

00:29:32,770 --> 00:29:39,700
or two second it's not a PC because

00:29:36,520 --> 00:29:40,900
people rely on a PC functions I think

00:29:39,700 --> 00:29:42,460
I'd like the only two problems at the

00:29:40,900 --> 00:29:45,210
moment are there it's a third problem if

00:29:42,460 --> 00:29:49,150
you will use windows or and threat I

00:29:45,210 --> 00:29:51,760
know your PHP threaded safety and able

00:29:49,150 --> 00:29:55,240
of which makes people don't luckily then

00:29:51,760 --> 00:29:58,890
it doesn't work at the moment so but

00:29:55,240 --> 00:30:03,580
then we have this long discussion about

00:29:58,890 --> 00:30:06,550
C sharp like properties it's a way to

00:30:03,580 --> 00:30:11,530
rewrite getters and setters in a very

00:30:06,550 --> 00:30:13,720
easy way ah borrowed from C sharp and

00:30:11,530 --> 00:30:15,730
this went through two or three

00:30:13,720 --> 00:30:19,150
iterations and if you've ever hoped to

00:30:15,730 --> 00:30:21,700
see this in core it's not going to be in

00:30:19,150 --> 00:30:25,480
quarter it's finally the last vote on

00:30:21,700 --> 00:30:27,280
this are all set like now we don't want

00:30:25,480 --> 00:30:28,780
to have this so you're not getting C

00:30:27,280 --> 00:30:30,610
sharp like properties if you've ever

00:30:28,780 --> 00:30:34,180
followed the internal discussion as

00:30:30,610 --> 00:30:34,899
closely so I do well I have to do to say

00:30:34,180 --> 00:30:37,869
that

00:30:34,899 --> 00:30:39,879
um and Sarah which is also in the

00:30:37,869 --> 00:30:41,169
audience has an RFC out there for

00:30:39,879 --> 00:30:43,269
trailing comments and function calls

00:30:41,169 --> 00:30:46,210
which is similar to trailing Commerce in

00:30:43,269 --> 00:30:49,419
array syntax I'll kind of make sense to

00:30:46,210 --> 00:30:50,710
make it you know a bit more just we have

00:30:49,419 --> 00:30:54,570
it in a race why not have it in function

00:30:50,710 --> 00:30:58,450
calls anyway so this is still ongoing ah

00:30:54,570 --> 00:31:00,309
I cannot think of any bigger other

00:30:58,450 --> 00:31:02,200
discussion except for daytime immutable

00:31:00,309 --> 00:31:05,830
at the moment which is ongoing so this

00:31:02,200 --> 00:31:08,139
might change and we are going to end up

00:31:05,830 --> 00:31:10,960
beat a stage in like two weeks from now

00:31:08,139 --> 00:31:14,889
hopefully integrating send optimizes

00:31:10,960 --> 00:31:17,349
somewhere along the way um so we can

00:31:14,889 --> 00:31:20,649
have a final in May and then as said

00:31:17,349 --> 00:31:25,029
before are here from then you have 56

00:31:20,649 --> 00:31:27,429
already out um so it's kind of huge are

00:31:25,029 --> 00:31:30,609
you really have to make sure that you

00:31:27,429 --> 00:31:32,919
code is that you code is getting ready

00:31:30,609 --> 00:31:38,830
within the next 2-3 years till it hits

00:31:32,919 --> 00:31:41,200
the wall I think for 54 and 55 so not

00:31:38,830 --> 00:31:43,059
that much news from 55 perspective

00:31:41,200 --> 00:31:46,269
obviously because it's a the the

00:31:43,059 --> 00:31:50,820
development life cycle with shorter than

00:31:46,269 --> 00:31:56,979
the usual PHP our cycle that we did um

00:31:50,820 --> 00:31:59,289
but yeah so looking ahead so um you can

00:31:56,979 --> 00:32:01,779
probably see the big distributions have

00:31:59,289 --> 00:32:04,749
it in either October or probably April

00:32:01,779 --> 00:32:07,450
next year 55 then um it's probably too

00:32:04,749 --> 00:32:11,159
late for Ubuntu and fedora for this year

00:32:07,450 --> 00:32:14,919
talking to them because they have long

00:32:11,159 --> 00:32:16,869
integration times yeah so and then you

00:32:14,919 --> 00:32:19,929
will see 5 5 out in the warden about one

00:32:16,869 --> 00:32:22,749
two one two three years okay so this was

00:32:19,929 --> 00:32:26,369
much faster than I anticipated arm but

00:32:22,749 --> 00:32:32,099
this lease question time for questions

00:32:26,369 --> 00:32:32,099
thank you very much all there

00:32:33,449 --> 00:32:39,070
any question that i can answer or maybe

00:32:36,999 --> 00:32:47,109
you somebody else in the audience who

00:32:39,070 --> 00:32:48,969
knows more about the code yes PHP six if

00:32:47,109 --> 00:32:52,690
you have followed the development of PHP

00:32:48,969 --> 00:32:55,119
six are we try to do i integrate on

00:32:52,690 --> 00:32:57,519
unicode completely into the core in all

00:32:55,119 --> 00:33:01,299
aspect and then a two years like four

00:32:57,519 --> 00:33:06,940
years ago we decided well the current

00:33:01,299 --> 00:33:09,809
approach is not going to work and we get

00:33:06,940 --> 00:33:12,279
rid of it so we just deleted it and

00:33:09,809 --> 00:33:15,209
after that we have been still waiting

00:33:12,279 --> 00:33:19,929
for somebody who cares about unicode um

00:33:15,209 --> 00:33:21,940
to come up with a better idea and as far

00:33:19,929 --> 00:33:24,940
as I know the Russian community have

00:33:21,940 --> 00:33:29,019
kind of adapted to mbstring and so on so

00:33:24,940 --> 00:33:30,909
forth and is this and most of the

00:33:29,019 --> 00:33:34,779
European community doesn't really care

00:33:30,909 --> 00:33:36,219
too much um but if you'll if you come up

00:33:34,779 --> 00:33:39,129
with a great idea or how to use the

00:33:36,219 --> 00:33:41,940
Unicode and half the time in the air to

00:33:39,129 --> 00:33:44,440
actually make you know make whatever you

00:33:41,940 --> 00:33:46,479
proaches happen then you're more than

00:33:44,440 --> 00:33:48,099
welcome to write an RFC about because we

00:33:46,479 --> 00:33:49,839
were really looking forward to have

00:33:48,099 --> 00:33:51,759
finally unicode support but at the

00:33:49,839 --> 00:33:59,849
moment nobody's doing it it's open

00:33:51,759 --> 00:33:59,849
source sir i uq career a

00:34:01,470 --> 00:34:10,660
okay so yeah Sarah added you convert a

00:34:05,380 --> 00:34:14,230
class to info I think yeah and you can

00:34:10,660 --> 00:34:16,660
convert from languages languages from

00:34:14,230 --> 00:34:18,880
from cerita cerita set not languages

00:34:16,660 --> 00:34:20,679
cherish as a child I said it

00:34:18,880 --> 00:34:22,810
transparently and so it's it's much

00:34:20,679 --> 00:34:24,640
easier that way much easier but still

00:34:22,810 --> 00:34:26,530
it's not like integrated into it like

00:34:24,640 --> 00:34:33,190
you would expect like from Java or

00:34:26,530 --> 00:34:36,010
something okay any other questions hi no

00:34:33,190 --> 00:34:38,830
I was the compatibility with zend

00:34:36,010 --> 00:34:41,890
framework version 1 i'm gonna compare

00:34:38,830 --> 00:34:44,290
with 5.5 what was a compatibility with

00:34:41,890 --> 00:34:46,990
zend framework one point whatever

00:34:44,290 --> 00:34:51,100
version were using gonna be like well I

00:34:46,990 --> 00:34:54,460
don't know it's like I in all honestly

00:34:51,100 --> 00:34:56,950
like I say I'm doing this

00:34:54,460 --> 00:35:00,160
approach if it's not my problem right

00:34:56,950 --> 00:35:01,420
because I am responsible for the

00:35:00,160 --> 00:35:04,150
language enough for the frameworks built

00:35:01,420 --> 00:35:06,040
on top of it so it's their problem but i

00:35:04,150 --> 00:35:09,190
really i really honestly don't know i

00:35:06,040 --> 00:35:10,780
expect that um most of the stuff in San

00:35:09,190 --> 00:35:12,700
frame that one will just work right away

00:35:10,780 --> 00:35:14,170
because I actually used in an old

00:35:12,700 --> 00:35:18,370
project that I have to work on zan firm

00:35:14,170 --> 00:35:20,740
it one and I so I'm obviously using PHP

00:35:18,370 --> 00:35:22,600
55 development versions all the time

00:35:20,740 --> 00:35:28,890
they have so far had not encountered a

00:35:22,600 --> 00:35:28,890
problem okay any other questions

00:35:30,930 --> 00:35:37,960
operation regarding performances we sold

00:35:34,000 --> 00:35:40,870
it with the 5.4 many guys switched only

00:35:37,960 --> 00:35:42,970
because of much faster performances last

00:35:40,870 --> 00:35:46,090
memory usage etc is there any difference

00:35:42,970 --> 00:35:47,770
now in 5.5 and yeah they've all were to

00:35:46,090 --> 00:35:49,990
difference obviously there's there's a

00:35:47,770 --> 00:35:52,660
little bit of optimization done in the

00:35:49,990 --> 00:35:55,690
way compiled and a temporary variables

00:35:52,660 --> 00:35:59,800
inside the compiler or accessed which

00:35:55,690 --> 00:36:01,600
reduces the memory our access basically

00:35:59,800 --> 00:36:04,090
makes it a bit faster in general and

00:36:01,600 --> 00:36:06,400
then the obvious thing is the opcode

00:36:04,090 --> 00:36:08,530
cash which will if it's in there if it's

00:36:06,400 --> 00:36:10,510
going to be in PHP 55 will make your

00:36:08,530 --> 00:36:13,640
application right way much faster unless

00:36:10,510 --> 00:36:15,890
it's obviously a CLI CGI what

00:36:13,640 --> 00:36:18,220
no stuff that always have to spawn and

00:36:15,890 --> 00:36:24,519
obviously applicator doesn't really help

00:36:18,220 --> 00:36:32,480
okay but beside that not much any other

00:36:24,519 --> 00:36:34,760
questions oh there um what were the

00:36:32,480 --> 00:36:36,470
arguments against see short style

00:36:34,760 --> 00:36:39,380
properties because that looked really

00:36:36,470 --> 00:36:41,720
what were the arguments against using C

00:36:39,380 --> 00:36:47,329
sharp style properties Oh what are the

00:36:41,720 --> 00:36:49,490
arguments um in I think a lot of the I

00:36:47,329 --> 00:36:53,720
can just guess because it was just about

00:36:49,490 --> 00:36:56,839
in the end um and I haven't followed to

00:36:53,720 --> 00:36:58,490
Clay City discussion because it was like

00:36:56,839 --> 00:37:02,390
the third iteration of the discussion it

00:36:58,490 --> 00:37:05,930
was a lengthy thread so um I can just

00:37:02,390 --> 00:37:08,450
assume because that's an OP 'ok coming

00:37:05,930 --> 00:37:10,819
up all the time for good reason is that

00:37:08,450 --> 00:37:12,500
a lot of the core developers think that

00:37:10,819 --> 00:37:14,440
the way the language changes at the

00:37:12,500 --> 00:37:17,720
moment the language itself is too fast

00:37:14,440 --> 00:37:20,450
because it breaks things it makes

00:37:17,720 --> 00:37:23,180
language less robust it's makes it

00:37:20,450 --> 00:37:26,650
easier to have new bucks we still have a

00:37:23,180 --> 00:37:29,089
lot of bucks concerning traits and I

00:37:26,650 --> 00:37:31,700
think Dmitry at the moment who is one of

00:37:29,089 --> 00:37:34,460
the you know the guys who the genius is

00:37:31,700 --> 00:37:36,380
about the cork or like the compiler he

00:37:34,460 --> 00:37:39,859
really struggles with trades because he

00:37:36,380 --> 00:37:42,259
tries to fix it at the moment um and it

00:37:39,859 --> 00:37:44,690
just shows that if we add complex new

00:37:42,259 --> 00:37:47,420
features it makes the language you know

00:37:44,690 --> 00:37:50,559
bit more fragile and it's might not it

00:37:47,420 --> 00:37:52,730
might be not verse the effort right he's

00:37:50,559 --> 00:37:56,900
getters and setters the way they are now

00:37:52,730 --> 00:37:59,990
are you good enough basically to not

00:37:56,900 --> 00:38:02,029
need a new way that is fancy it made

00:37:59,990 --> 00:38:03,920
Mike breaks things so there's a lot of

00:38:02,029 --> 00:38:06,259
discussion for very good reasons and a

00:38:03,920 --> 00:38:08,660
lot of people from the old core guys

00:38:06,259 --> 00:38:11,390
support this movement of give the

00:38:08,660 --> 00:38:14,299
language arrests right right good API

00:38:11,390 --> 00:38:16,789
surrounded all right good extensions you

00:38:14,299 --> 00:38:18,950
know enhanced extensions make it faster

00:38:16,789 --> 00:38:21,230
make PHP faster and better and more

00:38:18,950 --> 00:38:23,150
robust and fix bucks instead of adding

00:38:21,230 --> 00:38:24,619
feature and feature and feature so I

00:38:23,150 --> 00:38:26,150
think in the end it boils down to like

00:38:24,619 --> 00:38:28,720
yellow guy saying now we don't need

00:38:26,150 --> 00:38:28,720
another feet

00:38:38,509 --> 00:38:45,059
and then release cycle um obviously it's

00:38:41,999 --> 00:38:48,210
going to be if I correct recall

00:38:45,059 --> 00:38:50,249
correctly three years so two years of

00:38:48,210 --> 00:38:53,309
actual bug fixing one year in the end of

00:38:50,249 --> 00:38:56,579
security only fixes which is what five

00:38:53,309 --> 00:38:58,589
three buckets but then makes people rely

00:38:56,579 --> 00:39:00,059
if you like in production rely on LTS

00:38:58,589 --> 00:39:20,430
supportive like you've been to fedora

00:39:00,059 --> 00:39:28,999
whatever any more questions ah are there

00:39:20,430 --> 00:39:32,369
I don't think so like well I think now

00:39:28,999 --> 00:39:33,630
now zend optimizer genre on the edge to

00:39:32,369 --> 00:39:36,269
get kicked out because of that bit

00:39:33,630 --> 00:39:38,700
basically it's like we can make in a

00:39:36,269 --> 00:39:40,259
year of once more maybe want to have

00:39:38,700 --> 00:39:42,210
months more and just have it in because

00:39:40,259 --> 00:39:43,650
so important for people to have enough

00:39:42,210 --> 00:39:46,880
cold cash so it's kind of worth the

00:39:43,650 --> 00:39:50,970
effort but they were like really late um

00:39:46,880 --> 00:39:54,269
yep anything else it was a question over

00:39:50,970 --> 00:39:56,609
there wondering when the one is the

00:39:54,269 --> 00:39:58,680
go-to is lame agreed appreciated pardon

00:39:56,609 --> 00:40:03,660
when is the go-to statement going to be

00:39:58,680 --> 00:40:06,779
depreciated ah ask Sarah she's right

00:40:03,660 --> 00:40:10,589
there and she introduced it so it's all

00:40:06,779 --> 00:40:12,900
her fault blame her now it's all good um

00:40:10,589 --> 00:40:14,640
I think it's a good thing I think there

00:40:12,900 --> 00:40:20,579
are use cases I haven't seen one yet but

00:40:14,640 --> 00:40:23,960
I think there are so I don't know write

00:40:20,579 --> 00:40:23,960
an RFC about it if you didn't like it

00:40:26,360 --> 00:40:38,700
okay if they are over there a long-term

00:40:35,250 --> 00:40:41,450
pretty money now um the question was are

00:40:38,700 --> 00:40:43,680
there going to be long-term supported

00:40:41,450 --> 00:40:46,080
virgins and it was a long discussion

00:40:43,680 --> 00:40:47,460
when we introduced release princess on

00:40:46,080 --> 00:40:49,710
the new release process and the

00:40:47,460 --> 00:40:53,880
time-based schedule if we actually do

00:40:49,710 --> 00:40:56,340
LTS support and we decided no we didn't

00:40:53,880 --> 00:40:57,900
our masive the PM eyes of the project

00:40:56,340 --> 00:40:59,400
out there open source projects don't do

00:40:57,900 --> 00:41:01,830
that anyway and leave it up to the

00:40:59,400 --> 00:41:04,590
distributions and people who will you

00:41:01,830 --> 00:41:07,020
know get money for doing it so if you

00:41:04,590 --> 00:41:09,240
want an LTR support if it basically the

00:41:07,020 --> 00:41:11,010
idea is if you really need LTS support

00:41:09,240 --> 00:41:13,260
you probably have the money to buy you a

00:41:11,010 --> 00:41:16,920
redhead and then you get it out of

00:41:13,260 --> 00:41:21,390
anyway right so they so screw of them

00:41:16,920 --> 00:41:25,320
they should backport not be because back

00:41:21,390 --> 00:41:32,130
part is painful we try to make our life

00:41:25,320 --> 00:41:34,260
simple if you haven't noticed so okay if

00:41:32,130 --> 00:41:36,270
there are no any questions any more than

00:41:34,260 --> 00:41:37,890
you know if you have any questions I'm

00:41:36,270 --> 00:41:40,320
around all day long you know as a

00:41:37,890 --> 00:41:42,600
speaker I believe that the speaker

00:41:40,320 --> 00:41:44,160
should be around to get questions all

00:41:42,600 --> 00:41:46,110
the time from people so if you just want

00:41:44,160 --> 00:41:49,770
to ask me something or whatevers go

00:41:46,110 --> 00:41:53,940
ahead talk to me I'm bad at PHP coding

00:41:49,770 --> 00:41:57,350
so don't ask me PHP questions that's all

00:41:53,940 --> 00:41:57,350
okay thank you very much

00:41:59,369 --> 00:42:01,430
you

00:42:08,570 --> 00:42:10,630

YouTube URL: https://www.youtube.com/watch?v=q5bODy9JzEI


