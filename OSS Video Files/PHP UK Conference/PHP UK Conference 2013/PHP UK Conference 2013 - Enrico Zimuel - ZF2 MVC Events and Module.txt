Title: PHP UK Conference 2013 - Enrico Zimuel - ZF2 MVC Events and Module
Publication date: 2013-04-22
Playlist: PHP UK Conference 2013
Description: 
	The new architecture of Zend Framework 2 is based on a new MVC design that uses events and modules. In this talk we will show how to build web applications in ZF2 using the SOLID principle (Single responsibility, Open-closed, Liskov substitution, Interface segregation and Dependency inversion). We will show how to use Events to manage the application flow, how to organize and reuse the code using Modules and how to separate the responsibility using the new MVC design of ZF2.

Slides: https://speakerdeck.com/ezimuel/mvc-plus-events-plus-modules-the-new-architecture-of-zf2
Captions: 
	00:00:07,410 --> 00:00:16,770
so welcome to this talk

00:00:12,720 --> 00:00:19,830
we are going to I'm going to present the

00:00:16,770 --> 00:00:22,170
new yorka texture of Jim farmer to first

00:00:19,830 --> 00:00:26,970
of all let me introduce a little bit

00:00:22,170 --> 00:00:29,460
myself my name is Enrico Zimmer I come

00:00:26,970 --> 00:00:33,360
from hitting as you can recognize from

00:00:29,460 --> 00:00:38,040
my brilliant essence I'm a software

00:00:33,360 --> 00:00:41,149
engineer since 1996 I work in ads and

00:00:38,040 --> 00:00:45,180
technologies in the gem framework team I

00:00:41,149 --> 00:00:49,920
am an international speaker and actually

00:00:45,180 --> 00:00:54,450
I guess this is the 60 conference that I

00:00:49,920 --> 00:00:57,180
presence in my life I'm i wrote a couple

00:00:54,450 --> 00:01:00,120
of books about secure software and web

00:00:57,180 --> 00:01:03,360
programming and i'm also the co-founder

00:01:00,120 --> 00:01:06,210
of the PHP user group of torino torino

00:01:03,360 --> 00:01:09,240
is the city where I live in the north of

00:01:06,210 --> 00:01:11,880
Italy and I strongly suggest to visit it

00:01:09,240 --> 00:01:18,330
because it's a very nice and historical

00:01:11,880 --> 00:01:22,440
city in Italy okay let's start with the

00:01:18,330 --> 00:01:25,320
presentation first of all if you want to

00:01:22,440 --> 00:01:28,979
have a chance to get one of this green

00:01:25,320 --> 00:01:30,659
elephant I suggest to come close because

00:01:28,979 --> 00:01:35,420
at the end of representation there will

00:01:30,659 --> 00:01:38,130
be some interesting stuff going on so

00:01:35,420 --> 00:01:40,380
I'm not Superman I'm not able to throw

00:01:38,130 --> 00:01:45,659
the elephant at the end of the room so

00:01:40,380 --> 00:01:51,799
if you want to have a chance please come

00:01:45,659 --> 00:01:55,140
close okay so what is them framework

00:01:51,799 --> 00:02:01,909
first of all who is using xem phim were

00:01:55,140 --> 00:02:04,080
too okay Jim Frey maquon okay hi I

00:02:01,909 --> 00:02:08,430
suspect

00:02:04,080 --> 00:02:14,250
so of is a you know an open source

00:02:08,430 --> 00:02:21,000
framework since 2006 is 100 percents

00:02:14,250 --> 00:02:25,920
object orientation programming so it's

00:02:21,000 --> 00:02:29,550
use PHP 5.3 point three it's completely

00:02:25,920 --> 00:02:32,040
unit tested and basically we wrote from

00:02:29,550 --> 00:02:35,700
scratch they the architecture the

00:02:32,040 --> 00:02:39,360
internals of the framework we visit the

00:02:35,700 --> 00:02:42,480
new yorka texture using events using

00:02:39,360 --> 00:02:45,560
services and models and i'm going to

00:02:42,480 --> 00:02:50,370
show you in details one of each day's

00:02:45,560 --> 00:02:53,700
three components we had that also a

00:02:50,370 --> 00:02:56,630
couple of new classes especially about

00:02:53,700 --> 00:03:01,410
security so we spend a lot of time

00:02:56,630 --> 00:03:05,160
trying to give you the best tools to be

00:03:01,410 --> 00:03:08,130
able to create web application with the

00:03:05,160 --> 00:03:11,700
security in mind so for instance we had

00:03:08,130 --> 00:03:14,610
the cryptographic components so that is

00:03:11,700 --> 00:03:17,730
a specific class that you can use for

00:03:14,610 --> 00:03:21,390
instance to store the credit card

00:03:17,730 --> 00:03:24,530
information of your users only you know

00:03:21,390 --> 00:03:28,410
sensitive data that you have to manage

00:03:24,530 --> 00:03:33,060
the password for instance I don't know

00:03:28,410 --> 00:03:36,690
if you was yesterday here that was

00:03:33,060 --> 00:03:40,650
talking about PHP 5.5 that we will have

00:03:36,690 --> 00:03:43,080
a new password hashing API we already

00:03:40,650 --> 00:03:46,050
support the big rips algorithm in them

00:03:43,080 --> 00:03:49,980
framework so so you can use it starting

00:03:46,050 --> 00:03:53,519
from version PHP 5.3 so you don't have

00:03:49,980 --> 00:03:57,989
to wait for the PHP 5.5 because by the

00:03:53,519 --> 00:04:01,080
way bcrypt is already in PHP is under

00:03:57,989 --> 00:04:03,420
the crypt function of PHP so the API is

00:04:01,080 --> 00:04:08,840
not so easy to use so basically we

00:04:03,420 --> 00:04:13,020
simplify the houses to that API and a

00:04:08,840 --> 00:04:15,660
new interesting feature about the framer

00:04:13,020 --> 00:04:17,519
2 is the support of composure and Pirus

00:04:15,660 --> 00:04:20,280
so that means you can

00:04:17,519 --> 00:04:24,389
that the framework using composer and

00:04:20,280 --> 00:04:26,879
you even can choose specific class

00:04:24,389 --> 00:04:28,590
specific sub components in the framework

00:04:26,879 --> 00:04:30,720
for instance if you don't have to use

00:04:28,590 --> 00:04:33,449
the entire frame of you just interested

00:04:30,720 --> 00:04:36,690
in cryptographic in that Zen crypt

00:04:33,449 --> 00:04:38,430
library you can just use it specifying

00:04:36,690 --> 00:04:42,870
in composer so it's very it's very

00:04:38,430 --> 00:04:47,280
simple the usage and this is the

00:04:42,870 --> 00:04:51,060
official website for immersion com so

00:04:47,280 --> 00:04:52,949
basically when we decide to revive from

00:04:51,060 --> 00:04:55,440
scratch the framework first of all why

00:04:52,949 --> 00:05:00,030
we revived from scratch because we jump

00:04:55,440 --> 00:05:03,300
it in PHP 5.3 so we use it the namespace

00:05:00,030 --> 00:05:05,970
we use the closure functions and so so

00:05:03,300 --> 00:05:07,650
that's why Jim framework to is not

00:05:05,970 --> 00:05:13,560
backward compatible with them from

00:05:07,650 --> 00:05:18,240
require is a a technical problem so

00:05:13,560 --> 00:05:20,669
because we jump in them in PHP 5.3 we

00:05:18,240 --> 00:05:25,080
decide okay we want to provide you the

00:05:20,669 --> 00:05:27,810
best architecture best flexibility for

00:05:25,080 --> 00:05:29,699
them framework so that's why basically

00:05:27,810 --> 00:05:34,020
we we're arrived from scratch and we

00:05:29,699 --> 00:05:36,599
apply the solid principle so solid is an

00:05:34,020 --> 00:05:39,599
acronym for single responsibility open

00:05:36,599 --> 00:05:41,789
close it liskov substitution interface

00:05:39,599 --> 00:05:45,539
segregation and dependency inversion so

00:05:41,789 --> 00:05:49,039
basically our common design pattern in

00:05:45,539 --> 00:05:52,020
software engineering very well know in

00:05:49,039 --> 00:05:55,919
other you know technologies for instance

00:05:52,020 --> 00:06:02,060
like you know java more object

00:05:55,919 --> 00:06:06,139
orientation programming but we use it to

00:06:02,060 --> 00:06:11,419
you know to fall over to create you know

00:06:06,139 --> 00:06:13,500
basically a solid architecture and

00:06:11,419 --> 00:06:15,270
especially about the dependency

00:06:13,500 --> 00:06:19,440
injection we use a lot dependency

00:06:15,270 --> 00:06:22,889
injection so the principle of the single

00:06:19,440 --> 00:06:25,770
responsibility and the open/close it is

00:06:22,889 --> 00:06:27,300
managed using part of the dependency

00:06:25,770 --> 00:06:29,759
injection inside the framework so that

00:06:27,300 --> 00:06:30,800
means each components of the framework

00:06:29,759 --> 00:06:33,680
is completely

00:06:30,800 --> 00:06:35,900
separate so you can use injecting the

00:06:33,680 --> 00:06:38,569
dependency into the components we don't

00:06:35,900 --> 00:06:41,000
have anymore artcore dependencies inside

00:06:38,569 --> 00:06:43,789
the class that's why it's possible to

00:06:41,000 --> 00:06:48,440
ship each component using for instance

00:06:43,789 --> 00:06:52,430
composer why is too easy to get subsets

00:06:48,440 --> 00:06:55,280
of the framework and use it we use the

00:06:52,430 --> 00:06:59,419
service locator and I will show you more

00:06:55,280 --> 00:07:02,150
details in a couple of minutes and we

00:06:59,419 --> 00:07:05,810
have finally we support the modular

00:07:02,150 --> 00:07:07,909
architecture so that means you can ship

00:07:05,810 --> 00:07:13,780
single components and you can create

00:07:07,909 --> 00:07:16,159
model so this is another new about

00:07:13,780 --> 00:07:18,849
enzyme framework to so basically you can

00:07:16,159 --> 00:07:21,979
create models that are sub part of

00:07:18,849 --> 00:07:25,280
application and you can ship this model

00:07:21,979 --> 00:07:30,080
and you can reuse the model that's very

00:07:25,280 --> 00:07:34,039
important and we use it extensively the

00:07:30,080 --> 00:07:37,400
interface inside the framework so this

00:07:34,039 --> 00:07:40,370
is also another best practice it's easy

00:07:37,400 --> 00:07:41,779
to you know to integrate the class the

00:07:40,370 --> 00:07:46,159
components of the framework in your

00:07:41,779 --> 00:07:50,090
project basically and extend it so this

00:07:46,159 --> 00:07:52,880
is a diagram that basically show you how

00:07:50,090 --> 00:07:54,650
the new MVC architecture of Jim

00:07:52,880 --> 00:07:56,690
framework to is built so basically we

00:07:54,650 --> 00:08:02,210
have three main components that are the

00:07:56,690 --> 00:08:05,150
events the modules and the services so

00:08:02,210 --> 00:08:08,090
what is our events and evens basically

00:08:05,150 --> 00:08:10,940
is an action so you can think and events

00:08:08,090 --> 00:08:14,779
like an action and actually is also a

00:08:10,940 --> 00:08:17,120
value object in order to manage the

00:08:14,779 --> 00:08:19,069
events in them frame were too we use the

00:08:17,120 --> 00:08:23,360
inner manager that is a component that

00:08:19,069 --> 00:08:26,330
manage the events inside the workflow of

00:08:23,360 --> 00:08:30,080
an application and we have a listener

00:08:26,330 --> 00:08:34,550
that is basically a callback that reacts

00:08:30,080 --> 00:08:35,719
to onin evens and basically the heav'n

00:08:34,550 --> 00:08:38,329
manager is

00:08:35,719 --> 00:08:42,709
a component that holds a collection of a

00:08:38,329 --> 00:08:45,199
listener and for one or more events and

00:08:42,709 --> 00:08:51,529
trigger the events and execute the

00:08:45,199 --> 00:08:54,199
events so here there is a an example so

00:08:51,529 --> 00:08:57,589
imagine that you are in a you're writing

00:08:54,199 --> 00:09:00,410
ads informative application and you want

00:08:57,589 --> 00:09:03,680
to create a new listener so basically

00:09:00,410 --> 00:09:05,810
you have to get there even manager on

00:09:03,680 --> 00:09:09,230
the first line I don't know if you can

00:09:05,810 --> 00:09:11,389
read at the end of the room anyway you

00:09:09,230 --> 00:09:14,029
get the event manager so you get the

00:09:11,389 --> 00:09:18,050
instance of the even manager and you

00:09:14,029 --> 00:09:20,750
just attach this events with the name do

00:09:18,050 --> 00:09:24,250
as you can see here we are using just

00:09:20,750 --> 00:09:27,769
for you know for this example a closure

00:09:24,250 --> 00:09:30,110
so dollar e is the variable that

00:09:27,769 --> 00:09:32,720
contains the events the object that you

00:09:30,110 --> 00:09:34,579
are managing basically and you can get

00:09:32,720 --> 00:09:36,680
the name of the event the target the

00:09:34,579 --> 00:09:39,259
parameters using for instance this get

00:09:36,680 --> 00:09:40,730
name get target and get parameter and we

00:09:39,259 --> 00:09:43,819
are just printing a couple of

00:09:40,730 --> 00:09:48,290
information here so in order to attach

00:09:43,819 --> 00:09:51,980
an event this is the way to do it of

00:09:48,290 --> 00:09:54,709
course we want to insert the triggering

00:09:51,980 --> 00:09:58,009
of the events inside the components to

00:09:54,709 --> 00:10:02,870
imagine that you have class and you want

00:09:58,009 --> 00:10:06,410
to trigger the events we have this API

00:10:02,870 --> 00:10:09,110
this trigger function as you can see

00:10:06,410 --> 00:10:12,079
here we are always getting the the

00:10:09,110 --> 00:10:15,550
instance of the event manager and we are

00:10:12,079 --> 00:10:19,399
just executing triggering the events

00:10:15,550 --> 00:10:23,149
inside the function that in this case is

00:10:19,399 --> 00:10:26,089
the do function passing a couple of

00:10:23,149 --> 00:10:28,189
couple of parameters so when you

00:10:26,089 --> 00:10:31,040
basically why we want to do that because

00:10:28,189 --> 00:10:35,569
in this way when you execute when you

00:10:31,040 --> 00:10:38,990
call a specific function of an object

00:10:35,569 --> 00:10:41,300
for instance they do here basically you

00:10:38,990 --> 00:10:42,740
are also executing you're also

00:10:41,300 --> 00:10:47,029
triggering any

00:10:42,740 --> 00:10:50,240
so this is just a very simple example

00:10:47,029 --> 00:10:53,570
just to give you an idea how we built

00:10:50,240 --> 00:10:55,790
the events the new MVC architecture of

00:10:53,570 --> 00:10:58,459
them frameworks so basically in the new

00:10:55,790 --> 00:11:01,670
MVC architecture everything is managed

00:10:58,459 --> 00:11:05,330
is driven by events and this is the way

00:11:01,670 --> 00:11:08,630
to trigger and to attach events in the

00:11:05,330 --> 00:11:11,320
in the new yorka texture so this is a

00:11:08,630 --> 00:11:16,310
diagram so from the left to the right

00:11:11,320 --> 00:11:19,070
you can see the faces the steps inside

00:11:16,310 --> 00:11:24,760
the embassy so we start from the

00:11:19,070 --> 00:11:27,830
Brewster up we have a root step

00:11:24,760 --> 00:11:30,800
basically where the application defines

00:11:27,830 --> 00:11:32,990
the routing and the choose the action

00:11:30,800 --> 00:11:36,589
basically choose the controller and the

00:11:32,990 --> 00:11:38,930
action to be executed we have the

00:11:36,589 --> 00:11:41,570
dispatch phase the render and the finish

00:11:38,930 --> 00:11:43,790
so basically these are the five steps

00:11:41,570 --> 00:11:46,160
inside the New York creature of them

00:11:43,790 --> 00:11:49,670
frame or two and all the steps are

00:11:46,160 --> 00:11:51,410
driven by events so as you can see we

00:11:49,670 --> 00:11:54,470
are we have a couple of listeners that

00:11:51,410 --> 00:11:56,870
by defaults are provided you by the Zen

00:11:54,470 --> 00:11:59,270
MVC application that is the components

00:11:56,870 --> 00:12:01,220
that if you come from them framework one

00:11:59,270 --> 00:12:03,800
you can imagine that Zen MVC application

00:12:01,220 --> 00:12:05,870
like the zend application of them

00:12:03,800 --> 00:12:08,000
framework are one basically is the

00:12:05,870 --> 00:12:12,230
component that give you the ability to

00:12:08,000 --> 00:12:15,290
execute an MVC application using the new

00:12:12,230 --> 00:12:20,750
architecture and as you can see we have

00:12:15,290 --> 00:12:23,690
our specific events for instance if you

00:12:20,750 --> 00:12:25,670
are asking for an URL that does not

00:12:23,690 --> 00:12:27,980
exist that is not managed by the

00:12:25,670 --> 00:12:31,970
application we had secured an events

00:12:27,980 --> 00:12:37,670
that is a dispatch point error that give

00:12:31,970 --> 00:12:39,560
you the error about the dispatching so

00:12:37,670 --> 00:12:43,190
you don't have to wait until the finish

00:12:39,560 --> 00:12:46,190
until the end of the floor so that's why

00:12:43,190 --> 00:12:48,200
it's very useful to have uneven dream

00:12:46,190 --> 00:12:50,390
architecture because you can decide you

00:12:48,200 --> 00:12:52,670
can change the flow or your application

00:12:50,390 --> 00:12:55,410
without changing the entire structure

00:12:52,670 --> 00:12:57,449
you can just create a new events in

00:12:55,410 --> 00:13:01,170
Jack attach the events to the even

00:12:57,449 --> 00:13:04,290
manager and managed differently the

00:13:01,170 --> 00:13:07,379
application so that's why is so it's

00:13:04,290 --> 00:13:11,759
important for instance even when you

00:13:07,379 --> 00:13:16,110
have a problem in the render phase the

00:13:11,759 --> 00:13:18,569
render will execute will trigger an

00:13:16,110 --> 00:13:20,970
events that is rendered error giving you

00:13:18,569 --> 00:13:23,730
our page information so if you think

00:13:20,970 --> 00:13:25,589
about this approach for instance if you

00:13:23,730 --> 00:13:28,259
want to change the flow of your

00:13:25,589 --> 00:13:31,410
application adding I don't know a

00:13:28,259 --> 00:13:35,430
logging system is very easy you can just

00:13:31,410 --> 00:13:37,980
attach the logging events in the even

00:13:35,430 --> 00:13:41,790
manager and you basically finish you

00:13:37,980 --> 00:13:44,399
don't have to decide the point of your

00:13:41,790 --> 00:13:47,370
application because all we always driven

00:13:44,399 --> 00:13:52,980
by events so it's very simple to to

00:13:47,370 --> 00:13:56,129
change the flow of the application ok

00:13:52,980 --> 00:13:59,310
another important aspect of the new

00:13:56,129 --> 00:14:03,029
architecture are the services so

00:13:59,310 --> 00:14:05,519
basically a services are objects in

00:14:03,029 --> 00:14:07,889
general shared in a gem for

00:14:05,519 --> 00:14:11,939
multiplication you can think about the

00:14:07,889 --> 00:14:14,100
big connection of course when you have

00:14:11,939 --> 00:14:17,040
an application they use a database you

00:14:14,100 --> 00:14:20,069
have always a database objects that you

00:14:17,040 --> 00:14:22,709
have to share between different parts of

00:14:20,069 --> 00:14:27,170
your application for asylum framework

00:14:22,709 --> 00:14:30,420
one uses the design registry to register

00:14:27,170 --> 00:14:33,149
did the big connection components to be

00:14:30,420 --> 00:14:36,139
adapter database adapter and you reuse

00:14:33,149 --> 00:14:38,579
this indifference you know models

00:14:36,139 --> 00:14:41,730
indifference controllers of your

00:14:38,579 --> 00:14:44,309
application so instead of used registry

00:14:41,730 --> 00:14:46,860
because it's not so good especially if

00:14:44,309 --> 00:14:48,600
you replication it's growing you have to

00:14:46,860 --> 00:14:51,540
manage a lot of object you have to share

00:14:48,600 --> 00:14:53,970
a lot of object we use it the services

00:14:51,540 --> 00:14:57,269
so you can think about the services like

00:14:53,970 --> 00:15:01,139
a register but with the you know steroid

00:14:57,269 --> 00:15:03,540
with more powerful you know design the

00:15:01,139 --> 00:15:07,270
same pattern

00:15:03,540 --> 00:15:09,250
basically in order to manage services we

00:15:07,270 --> 00:15:12,400
use a service locator that is that the

00:15:09,250 --> 00:15:17,500
same pattern that we use it to to

00:15:12,400 --> 00:15:19,720
manager this this components so it'll

00:15:17,500 --> 00:15:22,780
Plemons the service manager implements

00:15:19,720 --> 00:15:25,600
the service locator the same pattern so

00:15:22,780 --> 00:15:28,390
basically the service locator is a

00:15:25,600 --> 00:15:30,430
storage where you register your object

00:15:28,390 --> 00:15:34,510
and you retrieve the object from the

00:15:30,430 --> 00:15:36,510
service locator when a service manager

00:15:34,510 --> 00:15:39,190
sorry when when you when you need

00:15:36,510 --> 00:15:41,560
everything is driven by configuration so

00:15:39,190 --> 00:15:43,960
it's very simple to create a new

00:15:41,560 --> 00:15:46,510
services for instance if you have to

00:15:43,960 --> 00:15:50,380
create a new database connection you

00:15:46,510 --> 00:15:53,230
just edit a configuration file and thus

00:15:50,380 --> 00:15:56,140
it you don't have to you know to write a

00:15:53,230 --> 00:15:59,290
lot of code and of course you can decide

00:15:56,140 --> 00:16:02,490
how the service locator is able to share

00:15:59,290 --> 00:16:08,530
the database connection in your

00:16:02,490 --> 00:16:10,240
application always by configuration as

00:16:08,530 --> 00:16:15,760
you can see we have a lot of different

00:16:10,240 --> 00:16:18,010
kind of services so we have explicit

00:16:15,760 --> 00:16:21,070
services so basically imagine that you

00:16:18,010 --> 00:16:24,330
want to share an object in all your

00:16:21,070 --> 00:16:27,700
application you can just register this

00:16:24,330 --> 00:16:30,400
object like an explicit service so it's

00:16:27,700 --> 00:16:35,190
just basically in the name and the

00:16:30,400 --> 00:16:38,860
object the invoker balls are basically

00:16:35,190 --> 00:16:40,210
objects point that points to a class so

00:16:38,860 --> 00:16:43,390
I mentioned that you want to share a

00:16:40,210 --> 00:16:46,839
class in your project but you don't want

00:16:43,390 --> 00:16:48,220
to initialize the class during the

00:16:46,839 --> 00:16:51,490
bootstrap of your application you I

00:16:48,220 --> 00:16:54,490
won't just to say okay I will need this

00:16:51,490 --> 00:16:56,200
class in my application but I don't want

00:16:54,490 --> 00:16:59,560
to instantiate I don't want to create

00:16:56,200 --> 00:17:02,050
each for each request the object of the

00:16:59,560 --> 00:17:05,470
class so you can create unembodied balls

00:17:02,050 --> 00:17:08,770
that means basically when in your

00:17:05,470 --> 00:17:10,990
application you are going to use the

00:17:08,770 --> 00:17:13,060
class the service locator will

00:17:10,990 --> 00:17:15,970
instantiate the class and give you the

00:17:13,060 --> 00:17:19,809
objects so is a lazy loading magazines

00:17:15,970 --> 00:17:22,120
that simplify a lot especially when you

00:17:19,809 --> 00:17:24,579
have a complex structure a complex

00:17:22,120 --> 00:17:26,620
application with a lot of hob jets with

00:17:24,579 --> 00:17:28,780
a lot of class that you have to share

00:17:26,620 --> 00:17:31,299
between different controller different

00:17:28,780 --> 00:17:33,400
models if you use this approach using

00:17:31,299 --> 00:17:35,320
the mbaka box you will reduce you know

00:17:33,400 --> 00:17:38,080
the response time you will reduce the

00:17:35,320 --> 00:17:40,570
memory footprint and some so I I

00:17:38,080 --> 00:17:46,120
strongly suggest to whoever look about

00:17:40,570 --> 00:17:48,280
this this kind of services we emerge you

00:17:46,120 --> 00:17:51,010
can manage also factories so if you have

00:17:48,280 --> 00:17:54,039
to decide to create a services that the

00:17:51,010 --> 00:17:56,289
creation of the object is based on some

00:17:54,039 --> 00:17:58,059
specific criteria you can use the

00:17:56,289 --> 00:18:01,720
factories that is a famous the same

00:17:58,059 --> 00:18:04,270
pattern that is able to do that you can

00:18:01,720 --> 00:18:05,980
even create aliases so you can say okay

00:18:04,270 --> 00:18:08,409
this is the name of the object but I

00:18:05,980 --> 00:18:12,909
want to name it using different kind of

00:18:08,409 --> 00:18:17,530
Alice's you can use abstract factories

00:18:12,909 --> 00:18:20,200
that are basically services I call it a

00:18:17,530 --> 00:18:22,390
fallback services so when you you are

00:18:20,200 --> 00:18:24,880
asking for something that is not in the

00:18:22,390 --> 00:18:27,100
service locator the service locator will

00:18:24,880 --> 00:18:30,669
execute the abstract factory in order to

00:18:27,100 --> 00:18:33,520
understand how to create the object

00:18:30,669 --> 00:18:35,590
basically and we have also different

00:18:33,520 --> 00:18:39,039
kind of services like you know the

00:18:35,590 --> 00:18:42,280
stupid containers and the shared one so

00:18:39,039 --> 00:18:44,559
basically you can for instance share

00:18:42,280 --> 00:18:46,480
decide that some kind of services are

00:18:44,559 --> 00:18:49,480
shared between all the application or

00:18:46,480 --> 00:18:54,400
just in specific parts of your

00:18:49,480 --> 00:18:58,360
application okay I mentioned at the

00:18:54,400 --> 00:19:02,039
early the module so basically even in

00:18:58,360 --> 00:19:05,530
some framework one as you know you can

00:19:02,039 --> 00:19:08,440
manage in a you know in a fashion way

00:19:05,530 --> 00:19:12,190
the module that are basically the folder

00:19:08,440 --> 00:19:16,780
are kind of folder in the informal to we

00:19:12,190 --> 00:19:19,030
decide to to get the module inside the

00:19:16,780 --> 00:19:22,270
architecture so now it is real possible

00:19:19,030 --> 00:19:24,220
to create sub sets of application that

00:19:22,270 --> 00:19:28,210
are models basically

00:19:24,220 --> 00:19:31,510
ship this module with another project so

00:19:28,210 --> 00:19:33,490
you can reuse really reuse the code that

00:19:31,510 --> 00:19:36,700
you brought in another project for

00:19:33,490 --> 00:19:39,539
instance imagine that you wrote the

00:19:36,700 --> 00:19:42,820
authentication system so I'm sure you

00:19:39,539 --> 00:19:45,970
you vote for for sure this kind of

00:19:42,820 --> 00:19:49,120
components in the past when you have to

00:19:45,970 --> 00:19:51,130
start a new project you don't have to

00:19:49,120 --> 00:19:53,530
provide the authentication you can reuse

00:19:51,130 --> 00:19:56,650
the authentication that you wrote for

00:19:53,530 --> 00:20:00,100
another project and this thanks to the

00:19:56,650 --> 00:20:06,130
module architecture and I will show you

00:20:00,100 --> 00:20:07,870
in a couple of minutes an example so

00:20:06,130 --> 00:20:14,770
Fordham framework to a model is

00:20:07,870 --> 00:20:17,860
basically a namespace and a single class

00:20:14,770 --> 00:20:25,330
file that is modeled on PHP that informs

00:20:17,860 --> 00:20:29,620
the MVC how to the model have how to

00:20:25,330 --> 00:20:33,010
initialize initials I how to hit the the

00:20:29,620 --> 00:20:34,630
model basically as I say they're

00:20:33,010 --> 00:20:37,120
plug-and-play technology so you can just

00:20:34,630 --> 00:20:40,240
copy and paste the model from one

00:20:37,120 --> 00:20:46,380
application to to another and that's it

00:20:40,240 --> 00:20:50,380
you don't have to to do to the more we

00:20:46,380 --> 00:20:53,679
decided to publish a specific website

00:20:50,380 --> 00:20:55,900
that is modules ephemera com that

00:20:53,679 --> 00:20:58,419
contains basically all the models

00:20:55,900 --> 00:21:02,140
provide by the community by the people

00:20:58,419 --> 00:21:04,780
around dancing for mark community right

00:21:02,140 --> 00:21:08,169
now we have more than 200 different kind

00:21:04,780 --> 00:21:11,169
of models so that's is a very good point

00:21:08,169 --> 00:21:12,880
where to start if you have to start a

00:21:11,169 --> 00:21:14,730
new project using the framework to and

00:21:12,880 --> 00:21:17,950
you need the forty cents I don't know

00:21:14,730 --> 00:21:21,370
Twitter integration or doctrine

00:21:17,950 --> 00:21:23,919
integration or authentication system and

00:21:21,370 --> 00:21:26,230
so on you can just jump to this website

00:21:23,919 --> 00:21:28,690
there is a search bar here you can just

00:21:26,230 --> 00:21:32,470
write what you need and you will find

00:21:28,690 --> 00:21:35,340
the model you can download it install or

00:21:32,470 --> 00:21:37,440
even using composer you can just have

00:21:35,340 --> 00:21:40,590
the name inside the composite or JSON

00:21:37,440 --> 00:21:44,210
and that's it you are ready to use the

00:21:40,590 --> 00:21:51,060
model so it's very a different approach

00:21:44,210 --> 00:21:54,560
compared with the framework one okay as

00:21:51,060 --> 00:22:01,410
I promise I will give you some details

00:21:54,560 --> 00:22:10,790
so let's try with Adam um so my goal is

00:22:01,410 --> 00:22:10,790
to give you an idea how to let me

00:22:15,230 --> 00:22:24,049
okay idea how to start basically a new

00:22:21,500 --> 00:22:27,260
project in the framer too so we ship at

00:22:24,049 --> 00:22:31,340
a command-line tool that is the GF tool

00:22:27,260 --> 00:22:35,840
so basically now on my box I have

00:22:31,340 --> 00:22:37,790
installed this Jeff Tuel dot far so this

00:22:35,840 --> 00:22:39,440
is basically a common line tool that

00:22:37,790 --> 00:22:42,710
provides you the ability to create a new

00:22:39,440 --> 00:22:45,440
project to match basically a project

00:22:42,710 --> 00:22:48,650
from the common line so imagine that you

00:22:45,440 --> 00:22:52,549
want to create a new Jump family project

00:22:48,650 --> 00:22:57,080
you're just write create projects and

00:22:52,549 --> 00:23:00,309
the name of the folder and that's it so

00:22:57,080 --> 00:23:03,679
as you can see that them framework to

00:23:00,309 --> 00:23:08,000
basically install the project inside the

00:23:03,679 --> 00:23:11,049
folder test in my local directory and

00:23:08,000 --> 00:23:11,049
let's see

00:23:18,839 --> 00:23:24,909
so basically this is the structure of

00:23:21,879 --> 00:23:28,119
the the project so this is visit on the

00:23:24,909 --> 00:23:31,659
the framer to skeleton application does

00:23:28,119 --> 00:23:34,229
it just an empty application so as you

00:23:31,659 --> 00:23:37,479
can see we have a couple of folder here

00:23:34,229 --> 00:23:39,579
okay we have the composer JSON and that

00:23:37,479 --> 00:23:42,820
composite that far there are the file

00:23:39,579 --> 00:23:46,149
that we used to to manage the

00:23:42,820 --> 00:23:49,359
application musical composer we have the

00:23:46,149 --> 00:23:52,499
config folder where basically you have

00:23:49,359 --> 00:23:54,999
the configuration of your application

00:23:52,499 --> 00:23:57,819
inside the config folder we have

00:23:54,999 --> 00:24:01,989
application that conflict HP that is the

00:23:57,819 --> 00:24:05,649
main configuration file of your

00:24:01,989 --> 00:24:09,479
application you have also an outer load

00:24:05,649 --> 00:24:11,829
the subdirectory for specific

00:24:09,479 --> 00:24:14,679
configuration for Locker configuration

00:24:11,829 --> 00:24:17,409
for instance for you know even for

00:24:14,679 --> 00:24:19,299
testing environment for production

00:24:17,409 --> 00:24:22,269
environment you can decide to have a

00:24:19,299 --> 00:24:24,849
different kind of file configuration

00:24:22,269 --> 00:24:27,549
file inside the how to load we have a

00:24:24,849 --> 00:24:30,789
data folder that we're basically you can

00:24:27,549 --> 00:24:34,809
put caching file temporary file in of

00:24:30,789 --> 00:24:37,089
your application in this example we have

00:24:34,809 --> 00:24:39,399
also a ninny Delta loader dot PHP that

00:24:37,089 --> 00:24:41,769
is basically just a few lines of code

00:24:39,399 --> 00:24:45,909
for the altar loading system of the

00:24:41,769 --> 00:24:48,639
class because I maybe I I didn't mention

00:24:45,909 --> 00:24:51,249
but in some framer too we don't have any

00:24:48,639 --> 00:24:53,109
more require once everything is managed

00:24:51,249 --> 00:24:56,519
by outer loading system you have only

00:24:53,109 --> 00:24:58,869
one required once at during the

00:24:56,519 --> 00:25:01,889
bootstrap of replicating the index dot

00:24:58,869 --> 00:25:07,209
PHP so everything is managed by

00:25:01,889 --> 00:25:09,940
autoloading we have a the module folder

00:25:07,209 --> 00:25:13,599
that is basically the the folder that

00:25:09,940 --> 00:25:16,089
contains all your application so now you

00:25:13,599 --> 00:25:21,369
have to start to think Jim framework to

00:25:16,089 --> 00:25:23,469
as the sum of different models so when

00:25:21,369 --> 00:25:25,869
you write Adam framework to application

00:25:23,469 --> 00:25:29,229
basically you starting to write modules

00:25:25,869 --> 00:25:30,759
and having models to your application so

00:25:29,229 --> 00:25:32,710
in this example in the skeleton we have

00:25:30,759 --> 00:25:35,559
just one model that is applique

00:25:32,710 --> 00:25:39,549
is the name of this model of course we

00:25:35,559 --> 00:25:41,260
have the public folder so that is the

00:25:39,549 --> 00:25:44,950
folder that you have to publish in your

00:25:41,260 --> 00:25:50,409
web server and we have just one file

00:25:44,950 --> 00:25:51,970
index dot PHP file and of course because

00:25:50,409 --> 00:25:57,010
we are managing use a component we have

00:25:51,970 --> 00:26:00,159
a vendor folder where you have to

00:25:57,010 --> 00:26:05,710
install you know the in this case that's

00:26:00,159 --> 00:26:10,029
a member to the November to library so

00:26:05,710 --> 00:26:11,919
in order to continue with the usage of

00:26:10,029 --> 00:26:16,320
the installation of the application we

00:26:11,919 --> 00:26:19,210
have to in this case I'm just updating

00:26:16,320 --> 00:26:26,799
composer because the version that type

00:26:19,210 --> 00:26:30,220
is was all so and now we are installing

00:26:26,799 --> 00:26:33,159
the application using a composer so

00:26:30,220 --> 00:26:35,649
basically now composer is reading the

00:26:33,159 --> 00:26:38,740
composer JSON file and inside the

00:26:35,649 --> 00:26:46,659
composite JSON file is very tan I can

00:26:38,740 --> 00:26:50,440
show you here basically the requirement

00:26:46,659 --> 00:26:52,630
so because we are we want to write them

00:26:50,440 --> 00:26:54,549
for multiplication we need of course the

00:26:52,630 --> 00:26:59,169
library so we are just saying okay we

00:26:54,549 --> 00:27:06,100
want the library to point whatever so

00:26:59,169 --> 00:27:08,399
now inside the vendor we have the same

00:27:06,100 --> 00:27:08,399
framework

00:27:09,870 --> 00:27:22,040
as you can see the framework the library

00:27:32,780 --> 00:27:39,710
okay so basically we finish the

00:27:35,930 --> 00:27:41,540
installation so if you wants to to see

00:27:39,710 --> 00:27:44,360
the results of course you have to

00:27:41,540 --> 00:27:47,980
configure your apache 2.2 the specific

00:27:44,360 --> 00:27:53,620
you know folder I of course did it

00:27:47,980 --> 00:27:53,620
previously you can just have a look

00:27:56,470 --> 00:28:05,440
and this is basically the output of the

00:28:01,240 --> 00:28:09,970
skeleton application nothing so exciting

00:28:05,440 --> 00:28:12,669
just you know static page anyway as you

00:28:09,970 --> 00:28:16,150
can see it's very simple to you know to

00:28:12,669 --> 00:28:20,740
start to create a new project using this

00:28:16,150 --> 00:28:24,159
common line command line tool of just

00:28:20,740 --> 00:28:27,340
give you more information about the

00:28:24,159 --> 00:28:31,990
differences just this is the public

00:28:27,340 --> 00:28:39,520
folder we have a just one file that is

00:28:31,990 --> 00:28:44,830
index dot PHP file let me show you many

00:28:39,520 --> 00:28:47,980
it's better yeah as you can see is just

00:28:44,830 --> 00:28:50,169
three lines of code we are just saying

00:28:47,980 --> 00:28:53,950
okay we are changing the default

00:28:50,169 --> 00:28:56,950
directory we are including this is the

00:28:53,950 --> 00:29:00,280
only require that you will have you have

00:28:56,950 --> 00:29:05,700
in a jumper multiplication and after we

00:29:00,280 --> 00:29:08,350
are just using this in it as static

00:29:05,700 --> 00:29:11,590
function inside that then the MVC

00:29:08,350 --> 00:29:13,659
application as you can see are in the

00:29:11,590 --> 00:29:15,250
init we are passing the configuration of

00:29:13,659 --> 00:29:21,130
the application so basically we are

00:29:15,250 --> 00:29:26,669
passing config application config.php we

00:29:21,130 --> 00:29:30,600
are if you if i jump jump to this file

00:29:26,669 --> 00:29:30,600
just to show you

00:29:36,840 --> 00:29:42,730
this is the configuration file as you

00:29:39,460 --> 00:29:45,480
can see it's just we match everything

00:29:42,730 --> 00:29:50,620
the configuration file using PHP array

00:29:45,480 --> 00:29:53,530
so we don't use XML file I and I general

00:29:50,620 --> 00:29:55,360
if you want to use it you can do it we

00:29:53,530 --> 00:30:00,220
also support it but we think that the

00:29:55,360 --> 00:30:04,419
best way to inform to configure a PHP

00:30:00,220 --> 00:30:06,850
application is to use PHP code so even

00:30:04,419 --> 00:30:09,330
because it's very fast as you can see

00:30:06,850 --> 00:30:12,940
this is basically a file that rate or

00:30:09,330 --> 00:30:17,710
returns an array so it's very very

00:30:12,940 --> 00:30:20,020
simple and everything is basically in

00:30:17,710 --> 00:30:24,190
the form of a key and the value so for

00:30:20,020 --> 00:30:26,799
instance we have the models key here in

00:30:24,190 --> 00:30:29,320
the models key basically you are

00:30:26,799 --> 00:30:32,350
specifying the models that you want to

00:30:29,320 --> 00:30:34,500
use in your application right now we

00:30:32,350 --> 00:30:37,270
have just one model that is application

00:30:34,500 --> 00:30:40,030
so basically it's the list of the model

00:30:37,270 --> 00:30:43,690
use it by the application and we have

00:30:40,030 --> 00:30:45,460
orders you know information because this

00:30:43,690 --> 00:30:47,470
is the skeleton you can see a lot of

00:30:45,460 --> 00:30:51,280
comments because we want to you know

00:30:47,470 --> 00:30:54,340
inform people how to you know to educate

00:30:51,280 --> 00:30:56,860
people how to use it but if we remove

00:30:54,340 --> 00:31:00,159
you know all the comments basically it's

00:30:56,860 --> 00:31:02,710
just a couple of lines basically here we

00:31:00,159 --> 00:31:05,200
are just saying okay the model path so

00:31:02,710 --> 00:31:12,370
how our model are in the folder model

00:31:05,200 --> 00:31:16,270
and bender so very very easy and we have

00:31:12,370 --> 00:31:18,429
other kind of configuration mostly are

00:31:16,270 --> 00:31:21,690
comments associated like you know the

00:31:18,429 --> 00:31:24,669
configuration file where are located

00:31:21,690 --> 00:31:27,340
remember when I talk about the global

00:31:24,669 --> 00:31:29,110
the testing configuration we are just

00:31:27,340 --> 00:31:33,809
saying okay the configuration are inside

00:31:29,110 --> 00:31:33,809
the config outer load folder

00:31:37,369 --> 00:31:50,309
we have also going back to the public

00:31:45,649 --> 00:31:53,309
the sdss is basically the same as CSS

00:31:50,309 --> 00:32:07,049
that you use it in some form of Quan so

00:31:53,309 --> 00:32:11,779
nothing nothing new okay of the real

00:32:07,049 --> 00:32:20,399
news is inside the basically the model

00:32:11,779 --> 00:32:23,549
application so here basically we are

00:32:20,399 --> 00:32:28,169
inside the application model as you can

00:32:23,549 --> 00:32:30,210
see here we have a couple of folder the

00:32:28,169 --> 00:32:32,519
only requirement is that file so you can

00:32:30,210 --> 00:32:35,940
create a new module that contains just

00:32:32,519 --> 00:32:37,799
one file that is modeled PHP this is the

00:32:35,940 --> 00:32:39,749
only requirement for them framework to

00:32:37,799 --> 00:32:42,450
of course yet you have to provide

00:32:39,749 --> 00:32:46,289
something so you you will have you know

00:32:42,450 --> 00:32:50,519
controller view etc but death is just

00:32:46,289 --> 00:32:54,330
the minimum requirements and the module

00:32:50,519 --> 00:32:56,609
dot PHP is basically you have to specify

00:32:54,330 --> 00:33:00,440
the name space that is the name of the

00:32:56,609 --> 00:33:04,200
module and here we are using a couple of

00:33:00,440 --> 00:33:07,799
components of Zen embassy so the class

00:33:04,200 --> 00:33:11,759
module contains you know in this case on

00:33:07,799 --> 00:33:14,849
bootstrap get config to retrieve the

00:33:11,759 --> 00:33:21,599
configuration get out loader config just

00:33:14,849 --> 00:33:23,849
a couple of meters for the this skeleton

00:33:21,599 --> 00:33:25,769
application but I say you can do

00:33:23,849 --> 00:33:27,539
whatever you want with this model so

00:33:25,769 --> 00:33:32,249
basically you can think about model as

00:33:27,539 --> 00:33:34,940
the bootstrap the module dot PHP as the

00:33:32,249 --> 00:33:38,849
bootstrap for the model so here you can

00:33:34,940 --> 00:33:43,019
insert the you know initialization of I

00:33:38,849 --> 00:33:44,390
don't know the requirements for for the

00:33:43,019 --> 00:33:52,280
models that you are

00:33:44,390 --> 00:33:54,230
writing basically okay imagine that of

00:33:52,280 --> 00:33:56,540
course this is just the skate imagine

00:33:54,230 --> 00:34:01,100
that we want to do something more

00:33:56,540 --> 00:34:04,730
exciting so let's jump to the website

00:34:01,100 --> 00:34:11,540
models in framework okay imagine that we

00:34:04,730 --> 00:34:14,990
want to we want to use we want to have

00:34:11,540 --> 00:34:18,350
an authentication system inside our

00:34:14,990 --> 00:34:22,010
application so we are using the GFC user

00:34:18,350 --> 00:34:25,580
that is basically we as you can imagine

00:34:22,010 --> 00:34:29,870
we cannot a you know manage all the

00:34:25,580 --> 00:34:34,730
modules that the community come out so

00:34:29,870 --> 00:34:38,570
we have a couple of core contributors

00:34:34,730 --> 00:34:42,020
and when the core contributors of the

00:34:38,570 --> 00:34:46,179
framework provides a new models we

00:34:42,020 --> 00:34:49,120
insert this model in into the GF Commons

00:34:46,179 --> 00:34:51,620
namespace so for instance this is one of

00:34:49,120 --> 00:34:54,440
the components the modules that i want

00:34:51,620 --> 00:34:57,950
to show you so basically is a very

00:34:54,440 --> 00:35:01,730
simple model is what's created by even

00:34:57,950 --> 00:35:04,160
Kareem that is one of our contributors

00:35:01,730 --> 00:35:06,530
so basically this model give you the

00:35:04,160 --> 00:35:10,520
possibility to add our authentication so

00:35:06,530 --> 00:35:13,790
the classic you know you login system of

00:35:10,520 --> 00:35:17,990
back-end application using a email

00:35:13,790 --> 00:35:21,470
username and password it's provide a lot

00:35:17,990 --> 00:35:26,390
of you know is growing day by day so now

00:35:21,470 --> 00:35:30,620
he's supporting also doctrine mysql and

00:35:26,390 --> 00:35:32,780
other you know databases with a lot of a

00:35:30,620 --> 00:35:39,340
lot of feature ok imagine that we want

00:35:32,780 --> 00:35:47,480
to use this model we can just add this

00:35:39,340 --> 00:35:54,580
requirements inside the composer file so

00:35:47,480 --> 00:35:54,580
composite dr is on just adding this

00:35:59,280 --> 00:36:13,120
to the composite or JSON and we have to

00:36:07,630 --> 00:36:16,960
execute the update so nows composer is

00:36:13,120 --> 00:36:25,360
reading that file and heading installing

00:36:16,960 --> 00:36:30,270
the GFC user module ok so at now of

00:36:25,360 --> 00:36:32,800
course going back to the common tation

00:36:30,270 --> 00:36:34,570
now we have installed at the models now

00:36:32,800 --> 00:36:37,270
we have to inform the application that

00:36:34,570 --> 00:36:40,180
we want to use that model so we have to

00:36:37,270 --> 00:36:43,330
go inside the application that config

00:36:40,180 --> 00:36:53,410
dot PHP that is the main configuration

00:36:43,330 --> 00:37:01,210
file and basically we have to add in

00:36:53,410 --> 00:37:05,800
this case two models GFC base and GFC

00:37:01,210 --> 00:37:08,230
user because basically the GFC user is

00:37:05,800 --> 00:37:11,290
the name the real model that we are

00:37:08,230 --> 00:37:12,850
using is base it on another model so you

00:37:11,290 --> 00:37:15,670
can have also dependencies between

00:37:12,850 --> 00:37:17,680
modules of course because you can you

00:37:15,670 --> 00:37:22,150
cannot think to to write everything

00:37:17,680 --> 00:37:24,580
inside the model so in order to use GFC

00:37:22,150 --> 00:37:27,040
user we need GFC base so the

00:37:24,580 --> 00:37:29,440
dependencies of the file are be managed

00:37:27,040 --> 00:37:31,690
by composer but now we have to inform

00:37:29,440 --> 00:37:34,060
even you know the exam frame which

00:37:31,690 --> 00:37:41,400
application that we have basically two

00:37:34,060 --> 00:37:45,270
three models here okay

00:37:41,400 --> 00:37:48,390
and the last step in order to install

00:37:45,270 --> 00:37:51,240
these models is the configuration of the

00:37:48,390 --> 00:37:54,270
database because this is a tent occation

00:37:51,240 --> 00:37:56,760
system so the user are stored in a

00:37:54,270 --> 00:37:59,310
database so I i use it for instance

00:37:56,760 --> 00:38:04,560
mysql so we have to inform the

00:37:59,310 --> 00:38:09,200
application about above the database so

00:38:04,560 --> 00:38:19,380
we have to create another configuration

00:38:09,200 --> 00:38:21,770
file the name is database dot local dot

00:38:19,380 --> 00:38:21,770
PHP

00:38:25,660 --> 00:38:34,990
I am just testing so as you can see it's

00:38:32,020 --> 00:38:41,349
just configuration about you know the

00:38:34,990 --> 00:38:46,599
connection so the database name it is if

00:38:41,349 --> 00:38:51,270
i remember right users username and the

00:38:46,599 --> 00:38:51,270
password that i previously created

00:38:58,190 --> 00:39:04,080
okay if we go back so now the

00:39:01,080 --> 00:39:07,770
application the model is install it so

00:39:04,080 --> 00:39:15,300
we can start to use it by default these

00:39:07,770 --> 00:39:19,920
modules is managed by the slash user URL

00:39:15,300 --> 00:39:22,740
so if you go here as you can see we have

00:39:19,920 --> 00:39:25,440
the module that is running that asking

00:39:22,740 --> 00:39:28,440
for the authentication so the email and

00:39:25,440 --> 00:39:30,030
the password in order to authenticate to

00:39:28,440 --> 00:39:34,740
the application of course we have to

00:39:30,030 --> 00:39:41,010
create a user because right now the

00:39:34,740 --> 00:39:43,970
database is empty so let's create for

00:39:41,010 --> 00:39:43,970
instance my user

00:39:53,100 --> 00:39:59,670
okay so as you can see i basically

00:39:56,700 --> 00:40:03,030
provide them also the the avatar the

00:39:59,670 --> 00:40:09,710
images from g hotter and now i am

00:40:03,030 --> 00:40:09,710
authenticated so very very very simple

00:40:11,480 --> 00:40:16,620
so i think this is one of the let's say

00:40:14,730 --> 00:40:19,440
killer feature of them framework you

00:40:16,620 --> 00:40:23,670
said ability to reuse really use the

00:40:19,440 --> 00:40:25,850
code using models and i think it's

00:40:23,670 --> 00:40:25,850
awesome

00:40:31,680 --> 00:40:41,329
okay so going back to the presentation

00:40:42,230 --> 00:40:51,119
ok where it starts of course the

00:40:46,920 --> 00:40:52,890
documentation is very important so in

00:40:51,119 --> 00:40:55,470
order to start to use the framework I

00:40:52,890 --> 00:40:57,450
strongly suggest to start from the

00:40:55,470 --> 00:41:03,230
documentation that is basically the

00:40:57,450 --> 00:41:08,550
alert page of the official website then

00:41:03,230 --> 00:41:12,540
provide a lot of free webinar about Jim

00:41:08,550 --> 00:41:16,950
former to there are a lot of webinar

00:41:12,540 --> 00:41:18,930
here so if you jump to this website you

00:41:16,950 --> 00:41:21,540
can you can see a lot of recorded

00:41:18,930 --> 00:41:24,079
webinar so how do video and even even

00:41:21,540 --> 00:41:29,460
slide above different you know topics

00:41:24,079 --> 00:41:32,150
Jim framework the models is a valid

00:41:29,460 --> 00:41:35,130
resource where to start because

00:41:32,150 --> 00:41:37,380
basically if you starting to use

00:41:35,130 --> 00:41:40,650
different models of the end of different

00:41:37,380 --> 00:41:43,680
people you will learn how to how to

00:41:40,650 --> 00:41:46,829
alter build basically application using

00:41:43,680 --> 00:41:48,990
them frame were too and I suggest also

00:41:46,829 --> 00:41:50,970
to use the damn frame or to the command

00:41:48,990 --> 00:41:53,430
line to that i showed you doing the

00:41:50,970 --> 00:41:57,119
presentation because i think it's very

00:41:53,430 --> 00:42:00,000
is is very useful and you can you know

00:41:57,119 --> 00:42:05,280
jumpstart great projects in and a few

00:42:00,000 --> 00:42:10,559
minutes basically okay so before to

00:42:05,280 --> 00:42:16,020
start the question have you ever seen an

00:42:10,559 --> 00:42:22,260
elephant fly that's right not know Dumbo

00:42:16,020 --> 00:42:26,160
I mean ok the first trick question will

00:42:22,260 --> 00:42:28,790
receive an elephant and a t-shirt so

00:42:26,160 --> 00:42:28,790
let's start ah

00:42:33,490 --> 00:42:40,279
okay so the question is how you extend

00:42:36,289 --> 00:42:46,069
basically the user models that I showed

00:42:40,279 --> 00:42:50,539
right android of ways of I mean you can

00:42:46,069 --> 00:42:52,640
of course change the models but this is

00:42:50,539 --> 00:42:56,210
not the right way to do because you want

00:42:52,640 --> 00:43:00,019
to just because the the the model in

00:42:56,210 --> 00:43:04,119
this example is like an external library

00:43:00,019 --> 00:43:07,849
right you can just extend the components

00:43:04,119 --> 00:43:11,779
you can just create a new model that

00:43:07,849 --> 00:43:14,779
extend the existing one this is a good

00:43:11,779 --> 00:43:17,539
way to do that so you can just reuse the

00:43:14,779 --> 00:43:23,930
components for instance the inside the

00:43:17,539 --> 00:43:27,920
GF to the GFC user model there is a user

00:43:23,930 --> 00:43:31,009
class you can just extend it and adding

00:43:27,920 --> 00:43:37,670
for instance you know information that

00:43:31,009 --> 00:43:47,830
that you need to ok so just meals I know

00:43:37,670 --> 00:43:50,840
I unfortunately of just ajust a tree Wow

00:43:47,830 --> 00:43:54,820
second question I don't know which was

00:43:50,840 --> 00:43:57,050
the the second one okay well we've

00:43:54,820 --> 00:43:59,900
invested quite a lot over the years in

00:43:57,050 --> 00:44:02,240
our Zen framework one code base what

00:43:59,900 --> 00:44:04,670
advice would you give for somebody who's

00:44:02,240 --> 00:44:08,750
got our gate code base good person I

00:44:04,670 --> 00:44:10,670
great time frame or two good question so

00:44:08,750 --> 00:44:14,090
first of all if you don't have to

00:44:10,670 --> 00:44:17,510
migrate to them framework to you don't

00:44:14,090 --> 00:44:20,420
have to be crazy to migrate I mean it's

00:44:17,510 --> 00:44:22,700
a business decision of course from the

00:44:20,420 --> 00:44:24,710
Zen point of view we are going to

00:44:22,700 --> 00:44:28,490
support them framework one for another

00:44:24,710 --> 00:44:31,100
year more or less but just for bug

00:44:28,490 --> 00:44:33,200
fixing and security fix so we are not

00:44:31,100 --> 00:44:37,070
improving the feature of them framework

00:44:33,200 --> 00:44:42,530
one so for one year you are safe let's

00:44:37,070 --> 00:44:45,260
say after that dates the community will

00:44:42,530 --> 00:44:48,440
continue to support the project that

00:44:45,260 --> 00:44:51,890
means if someone is able to you know

00:44:48,440 --> 00:44:55,390
support it it's fine otherwise you have

00:44:51,890 --> 00:45:01,900
to fix by yourself about the migration

00:44:55,390 --> 00:45:04,670
is not of course you can migrate

00:45:01,900 --> 00:45:06,830
depending on your application so this is

00:45:04,670 --> 00:45:10,610
a case by case you have to decide

00:45:06,830 --> 00:45:13,000
carefully regarding your existing

00:45:10,610 --> 00:45:16,250
application but the migration is not so

00:45:13,000 --> 00:45:17,900
difficult I mean because if you think

00:45:16,250 --> 00:45:21,310
that basically if you wrote the

00:45:17,900 --> 00:45:26,930
framework one application using model

00:45:21,310 --> 00:45:29,450
model sorry using teeny controller the

00:45:26,930 --> 00:45:31,730
routing system is perfectly fine to

00:45:29,450 --> 00:45:35,120
migrate of course you have to change

00:45:31,730 --> 00:45:37,940
something but you can reuse the models

00:45:35,120 --> 00:45:39,770
as is you don't have to rewrite the

00:45:37,940 --> 00:45:42,370
models of your application you have just

00:45:39,770 --> 00:45:44,600
to change something may be splitting

00:45:42,370 --> 00:45:47,500
creating different models but you can

00:45:44,600 --> 00:45:55,180
you can do is not it's not a big problem

00:45:47,500 --> 00:45:55,180
ok I play basketball so that's why

00:45:55,869 --> 00:46:02,440
hiya I'm just wonder if there's any

00:45:58,880 --> 00:46:06,020
performance where is benefits or hits I

00:46:02,440 --> 00:46:08,660
with that I've to over that f1 the

00:46:06,020 --> 00:46:11,210
benefits to switch from them frame of 12

00:46:08,660 --> 00:46:13,700
different to just performance biases are

00:46:11,210 --> 00:46:16,790
they put performance okay we are working

00:46:13,700 --> 00:46:19,550
on a bench mark as you know right our

00:46:16,790 --> 00:46:21,109
benchmark and share the data with the

00:46:19,550 --> 00:46:23,869
communities is always so difficult

00:46:21,109 --> 00:46:26,450
because you know the methodology that we

00:46:23,869 --> 00:46:30,140
use the the applications that you have

00:46:26,450 --> 00:46:32,630
to to benchmark people complains about

00:46:30,140 --> 00:46:35,930
everything but we don't want to provide

00:46:32,630 --> 00:46:38,270
the Anello word up benchmark application

00:46:35,930 --> 00:46:40,730
as the one that you can find on internet

00:46:38,270 --> 00:46:43,310
make no sense to create an l award

00:46:40,730 --> 00:46:45,140
application let's say oh looks with this

00:46:43,310 --> 00:46:48,109
hello world applications in frame were

00:46:45,140 --> 00:46:50,330
two is ten times faster of Jim framework

00:46:48,109 --> 00:46:52,369
one or vice versa or seeing funny or

00:46:50,330 --> 00:46:54,890
whatever make no sense so we are

00:46:52,369 --> 00:46:56,869
creating our standard application

00:46:54,890 --> 00:46:59,750
basically with a couple of database a

00:46:56,869 --> 00:47:01,970
couple of tables classic you know

00:46:59,750 --> 00:47:04,190
backhand application and we are

00:47:01,970 --> 00:47:08,020
benchmarking against them framework ones

00:47:04,190 --> 00:47:10,820
in front too we want to release this

00:47:08,020 --> 00:47:13,480
publish basically this benchmark at the

00:47:10,820 --> 00:47:16,339
end of the next month but I can give you

00:47:13,480 --> 00:47:18,770
some news right now because I'm one of

00:47:16,339 --> 00:47:21,460
the people the guy involved in this

00:47:18,770 --> 00:47:25,310
manner so basically the performance

00:47:21,460 --> 00:47:29,839
compared with Jim Frey maquon are almost

00:47:25,310 --> 00:47:32,839
the same xem phim were to performs well

00:47:29,839 --> 00:47:35,089
in a very complex project where you have

00:47:32,839 --> 00:47:39,080
a lot of classes a lot of components

00:47:35,089 --> 00:47:41,180
because the lazy loading systems you can

00:47:39,080 --> 00:47:43,190
imagine that you know you don't have to

00:47:41,180 --> 00:47:45,950
initialize everything during the

00:47:43,190 --> 00:47:49,670
bootstrap you can just use it when you

00:47:45,950 --> 00:47:52,640
have to to use it so that's why yeah but

00:47:49,670 --> 00:47:55,130
of course when you perform the member to

00:47:52,640 --> 00:47:57,530
with them former korn we also to think

00:47:55,130 --> 00:48:01,940
about the new feature the advantages so

00:47:57,530 --> 00:48:04,160
I think it's not it's not so easy but

00:48:01,940 --> 00:48:05,329
the performance are almost almost the

00:48:04,160 --> 00:48:19,819
same

00:48:05,329 --> 00:48:23,359
I try oh sorry I said okay yeah I uh we

00:48:19,819 --> 00:48:27,950
have a we have time no okay because they

00:48:23,359 --> 00:48:30,559
have a lot of gadgets here so but I

00:48:27,950 --> 00:48:37,279
promis-- also a t-shirt for the elephant

00:48:30,559 --> 00:48:43,309
so the 10 you have the same t-shirt okay

00:48:37,279 --> 00:48:45,769
I a last question it's it's I'm sorry

00:48:43,309 --> 00:48:48,799
yeah yeah you can take he said it was

00:48:45,769 --> 00:48:51,380
MVC but comparing a so same framework

00:48:48,799 --> 00:48:53,599
one is you know you have the models new

00:48:51,380 --> 00:48:55,700
controllers and reviews and I wasn't

00:48:53,599 --> 00:48:58,549
quite sure how that worked out in timber

00:48:55,700 --> 00:49:00,289
framework to because we saw you saw the

00:48:58,549 --> 00:49:01,660
modules but we didn't actually see how

00:49:00,289 --> 00:49:04,369
that translates to the GPUs and

00:49:01,660 --> 00:49:06,349
controllers so do you understand the

00:49:04,369 --> 00:49:09,170
question so the question is about the

00:49:06,349 --> 00:49:12,680
models differences of my coins

00:49:09,170 --> 00:49:14,900
affirmative that's right yes yes okay so

00:49:12,680 --> 00:49:17,209
it's completely different I mean in them

00:49:14,900 --> 00:49:21,619
framework one basically the models were

00:49:17,209 --> 00:49:24,979
just a folder basically where you have

00:49:21,619 --> 00:49:27,229
you know controllers even the routing

00:49:24,979 --> 00:49:30,949
system you have model / controller /

00:49:27,229 --> 00:49:35,690
action that's it I mean there is not a

00:49:30,949 --> 00:49:38,299
real management of modules inside the

00:49:35,690 --> 00:49:40,430
framework one you cannot it's always

00:49:38,299 --> 00:49:43,400
difficult in some framework want to take

00:49:40,430 --> 00:49:46,539
one models and copy and paste in another

00:49:43,400 --> 00:49:48,619
project because it's you know it's

00:49:46,539 --> 00:49:51,289
completely integrated in the intro

00:49:48,619 --> 00:49:53,569
deprecation in them frame of two that's

00:49:51,289 --> 00:49:55,940
completely different a mother is like a

00:49:53,569 --> 00:50:00,019
standalone application basically that is

00:49:55,940 --> 00:50:02,809
attached to an existing one so that's

00:50:00,019 --> 00:50:04,489
why it's so simple to reuse the code if

00:50:02,809 --> 00:50:07,039
you write models in zend framework to

00:50:04,489 --> 00:50:09,559
that's why we publish the website models

00:50:07,039 --> 00:50:13,579
datsun famicom so people can really

00:50:09,559 --> 00:50:16,790
reduce the code and don't spend time to

00:50:13,579 --> 00:50:19,190
reinvent the wheel each time

00:50:16,790 --> 00:50:25,660
so if you want the result assured here

00:50:19,190 --> 00:50:29,000
for you and another question here okay

00:50:25,660 --> 00:50:31,040
do you think of the service locator and

00:50:29,000 --> 00:50:35,240
service management system as being an

00:50:31,040 --> 00:50:42,110
alternative to dependency injection it's

00:50:35,240 --> 00:50:49,100
not a real alternative is just a way to

00:50:42,110 --> 00:50:52,160
share to collect objects in a single

00:50:49,100 --> 00:50:57,680
point of course you have to inject this

00:50:52,160 --> 00:50:59,500
dependency inside another class and

00:50:57,680 --> 00:51:02,780
other components so you can think about

00:50:59,500 --> 00:51:06,500
a service locator like at then registry

00:51:02,780 --> 00:51:08,900
that's one possibility it's very easy to

00:51:06,500 --> 00:51:10,580
migrate Adam framework or application in

00:51:08,900 --> 00:51:12,710
the frame or two if you think about you

00:51:10,580 --> 00:51:16,010
know Zen services instead of gender

00:51:12,710 --> 00:51:17,450
registry of course from a software

00:51:16,010 --> 00:51:20,690
design point of view is not the best

00:51:17,450 --> 00:51:22,940
because you are getting dependency is

00:51:20,690 --> 00:51:24,950
not explicitly but there are you know

00:51:22,940 --> 00:51:27,170
even the pendency from one component to

00:51:24,950 --> 00:51:30,230
another the best will be to use the

00:51:27,170 --> 00:51:33,530
service manager as an object storage and

00:51:30,230 --> 00:51:35,480
inject and getting this object from the

00:51:33,530 --> 00:51:37,550
service locator and inject to the

00:51:35,480 --> 00:51:40,100
controller to the models to the other

00:51:37,550 --> 00:51:46,640
components that you need it that is the

00:51:40,100 --> 00:51:51,070
the best the best way to do that for

00:51:46,640 --> 00:51:58,130
your also there is a t-shirt here we are

00:51:51,070 --> 00:52:05,150
enough time ok good other question

00:51:58,130 --> 00:52:09,740
oh sorry no time over time I understood

00:52:05,150 --> 00:52:12,309
we have enough time okay okay so thank

00:52:09,740 --> 00:52:12,309
you very much

00:52:25,509 --> 00:52:27,569

YouTube URL: https://www.youtube.com/watch?v=O6dwYklDVp0


