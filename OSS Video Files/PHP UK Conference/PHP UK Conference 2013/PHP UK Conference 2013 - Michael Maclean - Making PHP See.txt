Title: PHP UK Conference 2013 - Michael Maclean - Making PHP See
Publication date: 2013-04-22
Playlist: PHP UK Conference 2013
Description: 
	This talk will demonstrate using the PHP extension for OpenCV to allow PHP to detect and track features in images and video. The basics of image processing will be covered, before extending these to the more advanced features of the OpenCV library including face detection and panorama stitching.
Captions: 
	00:00:11,190 --> 00:00:16,590
right so this is about making PHP do

00:00:16,059 --> 00:00:18,440
some

00:00:16,590 --> 00:00:21,000
it really wasn't ever designed to do

00:00:18,440 --> 00:00:24,180
which is something I do quite a lot but

00:00:21,000 --> 00:00:28,170
hello I'm Michael McClain you might know

00:00:24,180 --> 00:00:31,550
me as mg DM online or at em g DM on

00:00:28,170 --> 00:00:34,770
twitter i have a blog on em g DM net and

00:00:31,550 --> 00:00:38,910
you can email me there you can see a

00:00:34,770 --> 00:00:40,500
theme developing so i've talked to a few

00:00:38,910 --> 00:00:42,930
people about I've done this stuff before

00:00:40,500 --> 00:00:46,890
and I've talked a few people in the

00:00:42,930 --> 00:00:48,390
conference before now and when I said

00:00:46,890 --> 00:00:51,480
what I was talking about the reaction I

00:00:48,390 --> 00:00:54,110
got pretty much every time was this why

00:00:51,480 --> 00:00:56,700
on earth do you want to do that and

00:00:54,110 --> 00:01:01,739
essentially it comes down to because I

00:00:56,700 --> 00:01:03,660
can and also that's quite cool and I

00:01:01,739 --> 00:01:05,550
like doing things I know nobody has ever

00:01:03,660 --> 00:01:09,509
done before and probably never will ever

00:01:05,550 --> 00:01:11,700
again but another part of it is that PHP

00:01:09,509 --> 00:01:14,220
is very good well competitively good

00:01:11,700 --> 00:01:17,100
enemy at making graphics so there's lots

00:01:14,220 --> 00:01:20,509
of ways to make graphics in PHP hands up

00:01:17,100 --> 00:01:24,390
if you've ever used GD for example yeah

00:01:20,509 --> 00:01:26,459
cairo and when ever heard of Cairo no

00:01:24,390 --> 00:01:29,520
that's another one I work on so check it

00:01:26,459 --> 00:01:32,880
out too you've also got for doing things

00:01:29,520 --> 00:01:35,250
with images like photos and stuff you've

00:01:32,880 --> 00:01:37,830
got imagemagick and graphics magic which

00:01:35,250 --> 00:01:40,259
are also quite good slightly differently

00:01:37,830 --> 00:01:43,470
targeted until know you not really had

00:01:40,259 --> 00:01:45,569
any way to find anything out about the

00:01:43,470 --> 00:01:48,750
contents of an image unless you want and

00:01:45,569 --> 00:01:51,479
route it yourself so I decided to fight

00:01:48,750 --> 00:01:53,509
there's a library called opencv which is

00:01:51,479 --> 00:01:56,009
a slant for open computer vision and

00:01:53,509 --> 00:01:59,220
it's a library of lots and lots of

00:01:56,009 --> 00:02:01,470
functions for doing things to do with

00:01:59,220 --> 00:02:03,539
processing images it was originally

00:02:01,470 --> 00:02:07,440
built by Intel I think as a tech demo

00:02:03,539 --> 00:02:10,140
for some of their fancy compiler but

00:02:07,440 --> 00:02:12,510
they bsd license that and a company

00:02:10,140 --> 00:02:15,270
called Willow Garage who are famed for

00:02:12,510 --> 00:02:18,060
making robots of various forms seem to

00:02:15,270 --> 00:02:21,540
know look after it there's a variety of

00:02:18,060 --> 00:02:24,989
things you can do with that so one of

00:02:21,540 --> 00:02:26,130
the things is object recognition so you

00:02:24,989 --> 00:02:29,490
can use it

00:02:26,130 --> 00:02:31,260
camera detail into it and figure out if

00:02:29,490 --> 00:02:33,930
things you're looking for our they're an

00:02:31,260 --> 00:02:35,070
extension that is face detection which

00:02:33,930 --> 00:02:38,160
is something a lot of people seem to

00:02:35,070 --> 00:02:39,930
think is quite cool and you can also do

00:02:38,160 --> 00:02:41,550
other things with it like gesture

00:02:39,930 --> 00:02:43,890
tracking so you can figure out what

00:02:41,550 --> 00:02:46,380
someone is doing with our hands or an

00:02:43,890 --> 00:02:48,930
extension of that is figuring out what

00:02:46,380 --> 00:02:51,960
orientation things are and other such

00:02:48,930 --> 00:02:53,310
things useful for robotics one of the

00:02:51,960 --> 00:02:56,400
other things you can maybe do with it is

00:02:53,310 --> 00:02:59,310
called structure from motion which is

00:02:56,400 --> 00:03:00,750
where you get two cameras or maybe one

00:02:59,310 --> 00:03:02,400
camera and then you spend an object

00:03:00,750 --> 00:03:04,590
round and use that information to create

00:03:02,400 --> 00:03:07,200
a 3d model now I'm not saying you should

00:03:04,590 --> 00:03:11,520
do this in PHP but it is certain within

00:03:07,200 --> 00:03:14,190
the capabilities of the CV library quick

00:03:11,520 --> 00:03:17,070
disclaimer I'm not actually an expert

00:03:14,190 --> 00:03:18,090
and computer vision in any way I am

00:03:17,070 --> 00:03:19,920
playing all this stuff because it's

00:03:18,090 --> 00:03:22,140
quite interesting and I'm learning as I

00:03:19,920 --> 00:03:23,520
go so if I get any of the stuff wrong if

00:03:22,140 --> 00:03:26,430
there's any math geeks in the audience

00:03:23,520 --> 00:03:30,720
then please let me know afterwards or

00:03:26,430 --> 00:03:34,170
whatever if I'm getting it wrong so the

00:03:30,720 --> 00:03:35,850
extension itself is on github on my

00:03:34,170 --> 00:03:39,720
github which you can probably predict

00:03:35,850 --> 00:03:44,040
the URL you in order to install it you

00:03:39,720 --> 00:03:46,230
need PHP 5.3 I'm working on making it

00:03:44,040 --> 00:03:49,350
5.4 compatible which just needs a couple

00:03:46,230 --> 00:03:51,380
of extra lines I need to at least on the

00:03:49,350 --> 00:03:53,730
also need the underlying opencv library

00:03:51,380 --> 00:03:55,740
which is in pretty much every linux

00:03:53,730 --> 00:03:58,530
distro these days certainly in a bin to

00:03:55,740 --> 00:04:03,390
and debian and no doubt and Fedora

00:03:58,530 --> 00:04:07,790
CentOS if you're on a Mac os10 you can

00:04:03,390 --> 00:04:11,160
install using homebrew very simply and

00:04:07,790 --> 00:04:13,500
on any of those linux or mac OS it's

00:04:11,160 --> 00:04:16,560
just your usual way to install a pickle

00:04:13,500 --> 00:04:19,080
extension from source so you do PHP is

00:04:16,560 --> 00:04:21,000
configure make and make install this is

00:04:19,080 --> 00:04:22,890
all documented in the readme and you've

00:04:21,000 --> 00:04:26,310
probably done it all before hands up if

00:04:22,890 --> 00:04:29,490
you haven't that's good if you're on

00:04:26,310 --> 00:04:32,490
Windows then I'm sorry I don't use

00:04:29,490 --> 00:04:34,050
windows so I haven't made it work yet

00:04:32,490 --> 00:04:36,760
but if any of you do under suitably

00:04:34,050 --> 00:04:40,090
inspired patches are welcome

00:04:36,760 --> 00:04:43,120
so I'll go and do a wee bit of a demo

00:04:40,090 --> 00:04:44,530
first loading an image which is pretty

00:04:43,120 --> 00:04:49,600
much the most basic thing you're going

00:04:44,530 --> 00:04:51,340
to want to do what you do is use the

00:04:49,600 --> 00:04:53,350
object that you're going to load it into

00:04:51,340 --> 00:04:55,030
is called an open CV image and it's got

00:04:53,350 --> 00:04:57,610
a method called load and you give it the

00:04:55,030 --> 00:05:00,600
path to a file and then on the second

00:04:57,610 --> 00:05:02,740
line there I'm saving it back out and

00:05:00,600 --> 00:05:04,950
that's all there is to it that's not

00:05:02,740 --> 00:05:07,360
very exciting but once you have an image

00:05:04,950 --> 00:05:11,130
yet lets you do videos things with it

00:05:07,360 --> 00:05:13,090
like so opencv treats everything and

00:05:11,130 --> 00:05:16,330
every image that your lord is

00:05:13,090 --> 00:05:19,120
essentially a very big matrix of numbers

00:05:16,330 --> 00:05:21,430
and so there's a whole bunch of the sort

00:05:19,120 --> 00:05:23,200
of maths type matrix operations you can

00:05:21,430 --> 00:05:25,660
do on them things like adding

00:05:23,200 --> 00:05:27,400
subtracting transposing inverting and

00:05:25,660 --> 00:05:29,020
you use the same object type actually

00:05:27,400 --> 00:05:31,330
for any matrices that use for other

00:05:29,020 --> 00:05:34,990
things some of the more complicated

00:05:31,330 --> 00:05:37,120
operators that'll come to you later it's

00:05:34,990 --> 00:05:41,020
also got obviously a bunch of image

00:05:37,120 --> 00:05:45,250
specific things you can do for example

00:05:41,020 --> 00:05:48,670
this one is to do a blur on an image

00:05:45,250 --> 00:05:51,070
which is not very exciting but it's

00:05:48,670 --> 00:05:54,580
relatively simple to do so here's my

00:05:51,070 --> 00:05:57,690
source image and I blur and it was

00:05:54,580 --> 00:06:01,750
blurry way that wasn't very exciting but

00:05:57,690 --> 00:06:04,090
you know that's the first step so that's

00:06:01,750 --> 00:06:06,010
useful a making things blurry is maybe

00:06:04,090 --> 00:06:08,290
you don't think is a lot useful but it

00:06:06,010 --> 00:06:10,480
is a for example you've got a camera

00:06:08,290 --> 00:06:13,210
that is working very low light you can

00:06:10,480 --> 00:06:15,460
use a very subtle blur in it to remove a

00:06:13,210 --> 00:06:18,730
lot of the noise that you get which

00:06:15,460 --> 00:06:21,670
makes the objects easier to see the

00:06:18,730 --> 00:06:22,690
things that you're looking for later so

00:06:21,670 --> 00:06:26,770
there's a bunch of different ways you

00:06:22,690 --> 00:06:28,480
can blur things as you can see all of

00:06:26,770 --> 00:06:31,030
these are available to photoshop and

00:06:28,480 --> 00:06:32,860
 and all that kind of thing there's

00:06:31,030 --> 00:06:35,620
other things like getting a lookbook

00:06:32,860 --> 00:06:38,500
more technical you've got a set of

00:06:35,620 --> 00:06:42,960
operators for image morphology which

00:06:38,500 --> 00:06:44,860
sounds really cool but it's not

00:06:42,960 --> 00:06:46,280
especially exciting because there's

00:06:44,860 --> 00:06:50,789
gonna be a better math in it

00:06:46,280 --> 00:06:53,699
so these are functions where you take an

00:06:50,789 --> 00:06:56,039
image and con volva with a kernel which

00:06:53,699 --> 00:07:00,780
I will now explain a kernel is

00:06:56,039 --> 00:07:04,110
essentially our matrix like this so this

00:07:00,780 --> 00:07:06,150
is a 3 by 3 1 and what you do is you

00:07:04,110 --> 00:07:08,849
take that kernel and you overlay it in

00:07:06,150 --> 00:07:11,250
turn on every single pixel in the source

00:07:08,849 --> 00:07:14,190
image and then the numbers and these

00:07:11,250 --> 00:07:16,020
determine how much of that source pixel

00:07:14,190 --> 00:07:22,020
appears in the destination does that

00:07:16,020 --> 00:07:23,460
make sense right so here's an example of

00:07:22,020 --> 00:07:27,030
what you can do with that is known as a

00:07:23,460 --> 00:07:29,880
dilation so you take your CV kernel and

00:07:27,030 --> 00:07:33,090
you scan it across the image and then

00:07:29,880 --> 00:07:35,250
the highest value that is covered by

00:07:33,090 --> 00:07:37,740
that Colonel becomes the new value of

00:07:35,250 --> 00:07:41,699
the pixel and the destination image ok

00:07:37,740 --> 00:07:44,159
that makes sense so the upshot of that

00:07:41,699 --> 00:07:45,719
is a bright areas get bigger and then

00:07:44,159 --> 00:07:48,659
you've got the opposite operation which

00:07:45,719 --> 00:07:49,889
is called erosion which is the same but

00:07:48,659 --> 00:07:51,509
you instead of taking the highest value

00:07:49,889 --> 00:07:54,949
take the smallest value of the colonel

00:07:51,509 --> 00:07:58,620
covers and then bright ideas get smaller

00:07:54,949 --> 00:08:01,500
so these things are useful for a if you

00:07:58,620 --> 00:08:03,930
taken a photo of say a car I put this

00:08:01,500 --> 00:08:06,029
behind a tree there'll be a bunch of the

00:08:03,930 --> 00:08:08,610
branches will have overlaid on it and if

00:08:06,029 --> 00:08:10,770
you use the open operation on it then

00:08:08,610 --> 00:08:13,889
those branches will just disappear

00:08:10,770 --> 00:08:15,960
because the the car behind it will get

00:08:13,889 --> 00:08:19,500
bigger it doesn't generally affect the

00:08:15,960 --> 00:08:22,889
shape of an object too much so here's my

00:08:19,500 --> 00:08:24,750
original test image again and if I run a

00:08:22,889 --> 00:08:26,310
dilation on it the bright areas get

00:08:24,750 --> 00:08:28,319
bigger as you can see all the little

00:08:26,310 --> 00:08:32,159
small bright areas are no quite big

00:08:28,319 --> 00:08:34,020
blocky pixelated ones now if I run an

00:08:32,159 --> 00:08:36,959
erosion on it the brachiators gets

00:08:34,020 --> 00:08:39,110
smaller so a lot of the smaller bright

00:08:36,959 --> 00:08:41,339
details have disappeared completely and

00:08:39,110 --> 00:08:43,050
have been just replaced with the

00:08:41,339 --> 00:08:47,430
surrounding dark except for things like

00:08:43,050 --> 00:08:48,899
the veins on the sky so in and of these

00:08:47,430 --> 00:08:51,750
themselves these are not very exciting

00:08:48,899 --> 00:08:53,160
but once you've done that and get rid to

00:08:51,750 --> 00:08:54,329
get rid of some of the noise you can

00:08:53,160 --> 00:08:55,540
move on to doing things like edge

00:08:54,329 --> 00:08:59,500
detection which

00:08:55,540 --> 00:09:00,850
is you get the outlines of objects so

00:08:59,500 --> 00:09:03,220
there's a few different ways you can do

00:09:00,850 --> 00:09:06,910
that as well you've got a thing called a

00:09:03,220 --> 00:09:09,490
sill Bell operator which is where you

00:09:06,910 --> 00:09:14,170
get the derivative of an image so you

00:09:09,490 --> 00:09:15,819
essentially get a lot of you get bright

00:09:14,170 --> 00:09:18,209
bits where there's a lot of contrast in

00:09:15,819 --> 00:09:21,339
the image lots of small details with

00:09:18,209 --> 00:09:24,670
large differences in color will come out

00:09:21,339 --> 00:09:27,100
quite bright so here's the original

00:09:24,670 --> 00:09:28,420
image again if you run one of these on

00:09:27,100 --> 00:09:30,220
it you end up with something like that

00:09:28,420 --> 00:09:33,130
which doesn't come out very well on this

00:09:30,220 --> 00:09:35,560
projector but the outline of the feints

00:09:33,130 --> 00:09:37,810
under the train and everything that all

00:09:35,560 --> 00:09:39,880
quite bright white compared to the rest

00:09:37,810 --> 00:09:43,600
of it religion wouldn't which is dark

00:09:39,880 --> 00:09:45,490
and there's another one called a canny

00:09:43,600 --> 00:09:48,399
operator which gives you a slightly

00:09:45,490 --> 00:09:52,630
different thing because it works in both

00:09:48,399 --> 00:09:54,550
directions x and y and so you get much

00:09:52,630 --> 00:09:57,009
clearer lines but it's good to do a bit

00:09:54,550 --> 00:09:58,810
of filtering before you do it because as

00:09:57,009 --> 00:10:00,639
you can see every single line and the

00:09:58,810 --> 00:10:03,160
image has just come out now and di need

00:10:00,639 --> 00:10:07,180
to sort through that mess to figure out

00:10:03,160 --> 00:10:10,870
what it is that you're looking for so

00:10:07,180 --> 00:10:13,060
yeah that's not romantically exciting

00:10:10,870 --> 00:10:14,800
maybe island but moving on this lightly

00:10:13,060 --> 00:10:16,839
cooler stuff you don't think called

00:10:14,800 --> 00:10:20,260
template matching which is where you can

00:10:16,839 --> 00:10:24,940
use opencv to find one image inside of

00:10:20,260 --> 00:10:27,480
another one and so here's my sample

00:10:24,940 --> 00:10:29,110
image which is the site of an elephant

00:10:27,480 --> 00:10:32,889
everyone has a weight of the elephant

00:10:29,110 --> 00:10:35,019
I'm sure yeah so here's a sample and

00:10:32,889 --> 00:10:37,480
we're going to look for that sample

00:10:35,019 --> 00:10:39,939
image within the target image which i

00:10:37,480 --> 00:10:41,980
got from Michelangelo in Belgium I think

00:10:39,939 --> 00:10:44,589
horizion the Netherlands I can't

00:10:41,980 --> 00:10:47,589
remember and yeah he got quite a lot of

00:10:44,589 --> 00:10:51,250
elephants for some reason and so I

00:10:47,589 --> 00:10:53,110
loaded the first image and scanner over

00:10:51,250 --> 00:10:55,060
the second one and this is all the

00:10:53,110 --> 00:10:57,370
places where it match the white areas

00:10:55,060 --> 00:10:59,170
are the matches so you can see that

00:10:57,370 --> 00:11:01,149
anywhere that's roughly the right color

00:10:59,170 --> 00:11:03,339
and matches the only problem with this

00:11:01,149 --> 00:11:06,250
is though that i took my sample image

00:11:03,339 --> 00:11:07,899
and then saved it as a JPEG and so the

00:11:06,250 --> 00:11:09,490
pixels and the underlying imager is not

00:11:07,899 --> 00:11:15,430
quite identical which doesn't really

00:11:09,490 --> 00:11:17,649
help matters but we can fix it we have

00:11:15,430 --> 00:11:21,610
technology there's another way you can

00:11:17,649 --> 00:11:24,100
do these things in opencv which is to

00:11:21,610 --> 00:11:25,870
use histograms which everybody flown to

00:11:24,100 --> 00:11:28,059
thinks of as bar charts and things like

00:11:25,870 --> 00:11:31,029
that which is actually fairly accurate

00:11:28,059 --> 00:11:33,339
in this case so what you do is you take

00:11:31,029 --> 00:11:36,899
a bunch of values so like the color

00:11:33,339 --> 00:11:40,809
values in each pixel in your image and

00:11:36,899 --> 00:11:43,930
you can put them into slots based on

00:11:40,809 --> 00:11:48,339
well these ones are between CZ to 110 10

00:11:43,930 --> 00:11:52,240
and 20 20 and 30 and so on but so it's

00:11:48,339 --> 00:11:54,459
stored in roughly an array and you could

00:11:52,240 --> 00:11:57,220
draw it as a bar chart if you want but

00:11:54,459 --> 00:12:00,250
what we can do in opencv is use

00:11:57,220 --> 00:12:03,010
histograms as a sort of hash of features

00:12:00,250 --> 00:12:05,589
that you're looking for in an image so

00:12:03,010 --> 00:12:07,899
you can use a histogram to record the

00:12:05,589 --> 00:12:10,870
colors of a section of an image such as

00:12:07,899 --> 00:12:15,250
my lot sample one there so what I'm

00:12:10,870 --> 00:12:18,699
going to do is convert my sample image

00:12:15,250 --> 00:12:21,000
to a different format called HSV which

00:12:18,699 --> 00:12:23,559
stands for hue saturation and value and

00:12:21,000 --> 00:12:26,709
so essentially the color is a number

00:12:23,559 --> 00:12:29,199
from 0 to 255 and how much of that color

00:12:26,709 --> 00:12:33,279
is the saturation value which is also 0

00:12:29,199 --> 00:12:37,000
to 255 and then we can do a thing called

00:12:33,279 --> 00:12:38,980
back projection which is where we get

00:12:37,000 --> 00:12:42,730
opencv to look for things that match

00:12:38,980 --> 00:12:46,180
that histogram in a target image so

00:12:42,730 --> 00:12:48,639
here's some code a top there we just

00:12:46,180 --> 00:12:52,059
loaded and their use the objects that we

00:12:48,639 --> 00:12:54,000
need my source image is the the sample

00:12:52,059 --> 00:12:58,060
one which is a load in

00:12:54,000 --> 00:12:59,950
convert it to HSV on that Lane there and

00:12:58,060 --> 00:13:04,750
then split it into three different

00:12:59,950 --> 00:13:09,190
images one for each eh X and V and then

00:13:04,750 --> 00:13:10,810
I take the just the q value and make a

00:13:09,190 --> 00:13:14,530
histogram a to that which is that line

00:13:10,810 --> 00:13:18,250
that sees has to count you see that then

00:13:14,530 --> 00:13:22,030
I load up my target image and convert it

00:13:18,250 --> 00:13:24,940
to the same format and then using the

00:13:22,030 --> 00:13:28,570
color plane again I back project that

00:13:24,940 --> 00:13:31,090
and see that as an open so this time i

00:13:28,570 --> 00:13:33,970
get this which is a bit clearer you can

00:13:31,090 --> 00:13:36,940
farm would easily see which are

00:13:33,970 --> 00:13:39,070
elephants in which are not and then you

00:13:36,940 --> 00:13:40,510
can go on and do things to count how

00:13:39,070 --> 00:13:42,190
many there are they able to counter it

00:13:40,510 --> 00:13:44,110
with contours and things which are

00:13:42,190 --> 00:13:46,210
something have not implemented properly

00:13:44,110 --> 00:13:51,550
yet but as you can see it's a much

00:13:46,210 --> 00:13:53,340
better match so histograms you can use

00:13:51,550 --> 00:13:57,850
for quite a lot of different things

00:13:53,340 --> 00:14:01,170
you've got you don't have to just use

00:13:57,850 --> 00:14:05,080
colors you can run an edge detection

00:14:01,170 --> 00:14:07,390
algorithm of some sort and then run that

00:14:05,080 --> 00:14:09,220
through a histogram which gives you a

00:14:07,390 --> 00:14:11,920
sort of hash of the Sheep of an object

00:14:09,220 --> 00:14:15,190
which you can use to go and find in bits

00:14:11,920 --> 00:14:16,810
of the image so one of the applications

00:14:15,190 --> 00:14:18,480
I saw for this was for gesture

00:14:16,810 --> 00:14:22,030
recognition or someone took a bunch of

00:14:18,480 --> 00:14:25,120
photos of his hand up to our webcam

00:14:22,030 --> 00:14:27,640
going like that and like that and in

00:14:25,120 --> 00:14:30,760
like that and he uses it to control an

00:14:27,640 --> 00:14:33,700
mp3 player on this computer so it goes

00:14:30,760 --> 00:14:36,070
like that and it will stop or start like

00:14:33,700 --> 00:14:38,620
that to skip the track that to go back

00:14:36,070 --> 00:14:44,680
to the previous track which is quite

00:14:38,620 --> 00:14:46,000
cool so I wouldn't again recommend that

00:14:44,680 --> 00:14:48,900
you do that in PHP but wait y know

00:14:46,000 --> 00:14:52,720
you've got PHP gtk you could do that

00:14:48,900 --> 00:14:55,780
good other features and obesity are the

00:14:52,720 --> 00:14:57,610
machine learning so there's a lot of

00:14:55,780 --> 00:15:01,450
machine learning code in opencv because

00:14:57,610 --> 00:15:02,800
it's also used in a lot of robotics

00:15:01,450 --> 00:15:09,040
applications

00:15:02,800 --> 00:15:11,350
and so there is a bunch of stuff like

00:15:09,040 --> 00:15:12,519
support vector machines which added

00:15:11,350 --> 00:15:14,560
anyone see and Ruiz talked yesterday

00:15:12,519 --> 00:15:16,200
about the small data machine learning

00:15:14,560 --> 00:15:20,110
stuff he was talking about those there's

00:15:16,200 --> 00:15:22,180
ian from google has also written a PHP

00:15:20,110 --> 00:15:24,579
extension that just does that you've

00:15:22,180 --> 00:15:26,050
also got your Bayes classifiers and a

00:15:24,579 --> 00:15:28,149
bunch of other algorithms so you could

00:15:26,050 --> 00:15:32,350
write an equivalent of something like

00:15:28,149 --> 00:15:37,300
spam assassin and their way easily and

00:15:32,350 --> 00:15:38,860
they're all fairly generalized so like I

00:15:37,300 --> 00:15:42,519
say you could use them for things that

00:15:38,860 --> 00:15:44,740
are not image recognition not specific

00:15:42,519 --> 00:15:48,010
in any way I'm going to talk about a

00:15:44,740 --> 00:15:52,630
couple of them here which are algorithms

00:15:48,010 --> 00:15:54,279
that you need to train so there are two

00:15:52,630 --> 00:15:56,410
different kinds of algorithms and

00:15:54,279 --> 00:15:58,630
machine learning and stuff in Oakland TV

00:15:56,410 --> 00:15:59,860
there's one swear you do supervised

00:15:58,630 --> 00:16:01,930
learning which is what andrea was

00:15:59,860 --> 00:16:03,760
talking about so you have a bunch of

00:16:01,930 --> 00:16:07,000
data let you feed into it and you've

00:16:03,760 --> 00:16:13,750
extracted features from it and give them

00:16:07,000 --> 00:16:16,420
labels and oh so you give them labels

00:16:13,750 --> 00:16:18,550
and you tell it these images have these

00:16:16,420 --> 00:16:20,110
features and these ones do not have

00:16:18,550 --> 00:16:23,200
these features and then it learns to

00:16:20,110 --> 00:16:25,470
differentiate between the two we've got

00:16:23,200 --> 00:16:29,920
forgot the unsupervised learning

00:16:25,470 --> 00:16:32,290
algorithms where you don't tell it in

00:16:29,920 --> 00:16:35,410
advance whether there are features there

00:16:32,290 --> 00:16:37,450
that is looking for or not and it just

00:16:35,410 --> 00:16:39,490
figures out what images are similar and

00:16:37,450 --> 00:16:42,550
clusters them together so they're called

00:16:39,490 --> 00:16:49,560
clustering algorithms but I'm going to

00:16:42,550 --> 00:16:51,310
move on to one of the trend supervised

00:16:49,560 --> 00:16:53,709
algorithms there which is called a

00:16:51,310 --> 00:16:57,699
higher classifier this is a pretty

00:16:53,709 --> 00:17:03,399
specific algorithm is used in opencv to

00:16:57,699 --> 00:17:05,370
find mostly rigid objects which include

00:17:03,399 --> 00:17:07,900
things that don't change their shape

00:17:05,370 --> 00:17:10,980
very often so you could train it to look

00:17:07,900 --> 00:17:13,329
for so one guy who went through

00:17:10,980 --> 00:17:15,339
satellite imagery looking for tennis

00:17:13,329 --> 00:17:16,900
courts and he has an open I think he's

00:17:15,339 --> 00:17:19,199
added to openstreetmap no he's added

00:17:16,900 --> 00:17:22,329
every tennis court in the continental US

00:17:19,199 --> 00:17:25,360
to openstreetmap this way I don't really

00:17:22,329 --> 00:17:27,520
know why but that's cool so why not but

00:17:25,360 --> 00:17:29,850
another thing you can do it for is face

00:17:27,520 --> 00:17:33,340
detection as I was talking about earlier

00:17:29,850 --> 00:17:34,690
so the guys that opencv seem to realize

00:17:33,340 --> 00:17:40,320
that a lot of people are going to want

00:17:34,690 --> 00:17:40,320
to use this stuff to interact with a

00:17:41,309 --> 00:17:47,890
software the one to find let me just

00:17:46,840 --> 00:17:50,050
start again a lot of people are gonna

00:17:47,890 --> 00:17:51,970
want to do face detection so they have

00:17:50,050 --> 00:17:53,860
already trained it for us with a bunch

00:17:51,970 --> 00:17:55,929
of data they've got access till an

00:17:53,860 --> 00:17:58,330
average library of many thousands of

00:17:55,929 --> 00:18:01,570
images and so they've already trained it

00:17:58,330 --> 00:18:04,840
for us so we don't need to go and do

00:18:01,570 --> 00:18:08,320
that ourselves and the training data is

00:18:04,840 --> 00:18:10,360
supplied with in an XML file so if we

00:18:08,320 --> 00:18:13,059
want to go looking for faces in a

00:18:10,360 --> 00:18:15,280
particular image we load an image and

00:18:13,059 --> 00:18:18,490
then there's our method called hard

00:18:15,280 --> 00:18:20,559
detect objects on that image object and

00:18:18,490 --> 00:18:22,330
then you pass it the path to the xml

00:18:20,559 --> 00:18:24,250
file that comes with opencv so it'll

00:18:22,330 --> 00:18:27,280
probably be an usershare or something

00:18:24,250 --> 00:18:29,770
like that on a Linux system and then

00:18:27,280 --> 00:18:34,559
it'll give you a bunch of rectangles as

00:18:29,770 --> 00:18:36,730
results just by pixel sorry point values

00:18:34,559 --> 00:18:40,809
and then you can use that to draw a

00:18:36,730 --> 00:18:44,800
picture or drawn around the detected

00:18:40,809 --> 00:18:48,910
spots on the image so here's my test

00:18:44,800 --> 00:18:51,820
image and we run the hard sakhalin on it

00:18:48,910 --> 00:18:53,559
and this is the out p know you'll notice

00:18:51,820 --> 00:18:57,220
a couple things yes it has picked up

00:18:53,559 --> 00:18:59,500
James there which is fine but also it's

00:18:57,220 --> 00:19:05,980
picked up an image down here and one

00:18:59,500 --> 00:19:08,140
over here so yeah it's not foolproof but

00:19:05,980 --> 00:19:13,179
it's better than nothing there are there

00:19:08,140 --> 00:19:15,520
were ways you can ways to cut down on

00:19:13,179 --> 00:19:16,690
the the false matches by doing things

00:19:15,520 --> 00:19:20,440
like

00:19:16,690 --> 00:19:21,820
and there's a confidence while leader

00:19:20,440 --> 00:19:27,930
comes back or you can look for ones that

00:19:21,820 --> 00:19:30,870
are only above a specific size so no I

00:19:27,930 --> 00:19:33,310
think I've actually I've tapered that

00:19:30,870 --> 00:19:34,690
I've run out of slides however I do have

00:19:33,310 --> 00:19:35,950
a couple things I would like to demo so

00:19:34,690 --> 00:19:56,590
if you give me a moment I'm going to go

00:19:35,950 --> 00:19:59,340
and set them up so I opened up up there

00:19:56,590 --> 00:19:59,340
no it doesn't

00:20:11,230 --> 00:20:22,970
hmm right so one of the things you can

00:20:16,910 --> 00:20:25,040
do just reasonably interesting is to you

00:20:22,970 --> 00:20:29,320
can actually from PHP use the camera

00:20:25,040 --> 00:20:31,520
inside a laptop or whatever and so I

00:20:29,320 --> 00:20:38,240
only know how to put the font size up

00:20:31,520 --> 00:20:41,540
and get it I can't remember no okay

00:20:38,240 --> 00:20:44,150
nevermind so we create a capture object

00:20:41,540 --> 00:20:48,470
at the top there and then just run query

00:20:44,150 --> 00:20:52,490
frame on it which is the method that you

00:20:48,470 --> 00:20:55,429
run on the capture to go and grab an

00:20:52,490 --> 00:20:58,970
image and then we take that result image

00:20:55,429 --> 00:21:00,460
and run the detect objects functional

00:20:58,970 --> 00:21:04,490
again just like we did in the previous

00:21:00,460 --> 00:21:07,390
slide and then we save out that image

00:21:04,490 --> 00:21:11,050
there so I'm going to give that a go now

00:21:07,390 --> 00:21:11,050
let me go horribly wrong

00:21:26,029 --> 00:21:31,249
so it actually worked and so my camera

00:21:29,509 --> 00:21:32,960
takes a little while to fire up so it

00:21:31,249 --> 00:21:34,639
doesn't hasn't adjusted to the lighting

00:21:32,960 --> 00:21:37,489
in here being she is so figured out that

00:21:34,639 --> 00:21:38,989
I am there which is quite cool but it's

00:21:37,489 --> 00:21:40,309
also detected something up here on the

00:21:38,989 --> 00:21:43,609
projector for I don't really know what I

00:21:40,309 --> 00:21:46,639
is but so yeah it's not foolproof but it

00:21:43,609 --> 00:21:48,529
works and there are a bunch of things

00:21:46,639 --> 00:21:51,409
other things in opencv that I should

00:21:48,529 --> 00:21:54,169
probably mention as well in the most

00:21:51,409 --> 00:21:55,789
recent release there there's a set of

00:21:54,169 --> 00:21:57,649
functions for running panorama

00:21:55,789 --> 00:22:00,529
stretching so you can upload a bunch of

00:21:57,649 --> 00:22:02,119
images that were taken side by side and

00:22:00,529 --> 00:22:05,179
get it stitched together into one big

00:22:02,119 --> 00:22:07,159
long one I was hoping to demo that but

00:22:05,179 --> 00:22:09,139
sadly I didn't get it working in time so

00:22:07,159 --> 00:22:10,429
I decided to strip it out but having one

00:22:09,139 --> 00:22:17,229
at a time we should probably put it back

00:22:10,429 --> 00:22:17,229
in right I are there any questions

00:22:19,960 --> 00:22:31,099
you've got the microphone there yep

00:22:25,429 --> 00:22:34,580
sorry I think you're afraid the face

00:22:31,099 --> 00:22:39,340
detection facial recognition of this is

00:22:34,580 --> 00:22:42,740
any way that I can say I've I Villopoto

00:22:39,340 --> 00:22:45,830
these someone's down the front of the

00:22:42,740 --> 00:22:49,160
camera I can match that sorry it's

00:22:45,830 --> 00:22:52,010
really slowly on so if I the library of

00:22:49,160 --> 00:22:53,270
photos and then obviously someone sat in

00:22:52,010 --> 00:22:55,490
front of a camera is there any way

00:22:53,270 --> 00:22:57,170
through any of the methods that opencv

00:22:55,490 --> 00:22:59,480
uses for the photodetection it can

00:22:57,170 --> 00:23:00,770
actually sort of put some kind of code

00:22:59,480 --> 00:23:03,050
against each voter and then go art

00:23:00,770 --> 00:23:04,460
that's Fred that's John that's bill you

00:23:03,050 --> 00:23:07,010
could do it I think it would probably

00:23:04,460 --> 00:23:09,590
need quite a lot of training and far

00:23:07,010 --> 00:23:12,950
each person I'm not sure one way I

00:23:09,590 --> 00:23:15,140
suppose you could do it would be the

00:23:12,950 --> 00:23:17,090
face detection stuff it gives you a

00:23:15,140 --> 00:23:18,800
bunch of parameters like we're eyes and

00:23:17,090 --> 00:23:20,690
nose and everything are so we're the

00:23:18,800 --> 00:23:22,130
various features are so you might be

00:23:20,690 --> 00:23:24,230
able to do something like put that into

00:23:22,130 --> 00:23:27,200
a histogram so then you use that as a

00:23:24,230 --> 00:23:31,340
hash to look for that in other images

00:23:27,200 --> 00:23:33,590
but it would be quite slow in your

00:23:31,340 --> 00:23:35,420
experience then without histogram really

00:23:33,590 --> 00:23:36,860
the only were then if the camera was

00:23:35,420 --> 00:23:38,230
sort of reflect exactly same sort of

00:23:36,860 --> 00:23:40,820
light conditions and everything is there

00:23:38,230 --> 00:23:43,820
well the the fixed affection stuff isn't

00:23:40,820 --> 00:23:46,520
looking for like lighting really it's

00:23:43,820 --> 00:23:50,480
looking for features and roughly the

00:23:46,520 --> 00:23:52,160
right proportion so it's reasonably good

00:23:50,480 --> 00:23:55,490
at handling different lighting

00:23:52,160 --> 00:23:57,980
conditions but obviously if you having

00:23:55,490 --> 00:23:59,360
very extreme shadows like the light was

00:23:57,980 --> 00:24:01,640
really bright and right here then you

00:23:59,360 --> 00:24:04,880
might run into trouble but it should

00:24:01,640 --> 00:24:07,430
work the thing that is that most of the

00:24:04,880 --> 00:24:09,140
training data that comes with opencv is

00:24:07,430 --> 00:24:11,930
designed to look straight at faces

00:24:09,140 --> 00:24:14,870
straight up so if you had someone like

00:24:11,930 --> 00:24:18,760
side on that wouldn't detect them well

00:24:14,870 --> 00:24:18,760
I'm sure it's doable I don't try to

00:24:20,789 --> 00:24:26,799
hi you've suggested a couple of times I

00:24:24,460 --> 00:24:28,779
think that maybe PHP isn't the best

00:24:26,799 --> 00:24:31,029
language to do this in or it's kind of a

00:24:28,779 --> 00:24:34,210
crazy thing to do but i'm wondering

00:24:31,029 --> 00:24:36,340
doesn't the opencv library do most of

00:24:34,210 --> 00:24:37,840
the heavy lifting or do find that

00:24:36,340 --> 00:24:40,509
actually you have to do a lot of

00:24:37,840 --> 00:24:42,009
calculation in PHP as well yeah you're

00:24:40,509 --> 00:24:44,200
right there heavy lifting is pretty much

00:24:42,009 --> 00:24:46,570
all done by opencv all I've done this

00:24:44,200 --> 00:24:48,909
right of a reasonably thin layer over

00:24:46,570 --> 00:24:52,330
the top of it to make it accessible so

00:24:48,909 --> 00:24:54,609
yeah I mean in terms of speed you know

00:24:52,330 --> 00:24:56,889
all that much slower really than doing

00:24:54,609 --> 00:24:59,200
from a sea application or whatever it's

00:24:56,889 --> 00:25:00,849
just that in terms of things like memory

00:24:59,200 --> 00:25:04,359
management stuff you probably don't want

00:25:00,849 --> 00:25:06,519
to be doing it when you're loading PHP

00:25:04,359 --> 00:25:08,229
pages you could probably do it from my

00:25:06,519 --> 00:25:09,639
back in task or something like that and

00:25:08,229 --> 00:25:12,639
that's part of the reason why I wrote it

00:25:09,639 --> 00:25:14,169
was to make it accessible to you could

00:25:12,639 --> 00:25:15,399
run it from a gear man or a bean stock d

00:25:14,169 --> 00:25:17,889
task or something like that and the

00:25:15,399 --> 00:25:19,359
background without having to write

00:25:17,889 --> 00:25:23,159
something in a completely separate

00:25:19,359 --> 00:25:25,359
language sure that's cool things I think

00:25:23,159 --> 00:25:27,940
one of the things that I've been looking

00:25:25,359 --> 00:25:30,999
at recently is to where people upload

00:25:27,940 --> 00:25:34,450
profile images which can be the pictures

00:25:30,999 --> 00:25:36,249
of the faces or sometimes logos is why I

00:25:34,450 --> 00:25:39,460
want to do is square off the mann center

00:25:36,249 --> 00:25:41,649
on either the face or the object do you

00:25:39,460 --> 00:25:44,440
know your whole classifier has any other

00:25:41,649 --> 00:25:47,649
data sets that might be useful and well

00:25:44,440 --> 00:25:50,710
it will return a rectangle for where

00:25:47,649 --> 00:25:53,440
their faces like the bounding box yeah

00:25:50,710 --> 00:25:55,210
for us fine four phases is there

00:25:53,440 --> 00:25:58,989
anything for like spotting the most

00:25:55,210 --> 00:26:00,039
prominent object in an image or and you

00:25:58,989 --> 00:26:01,570
probably wouldn't do it with a hard

00:26:00,039 --> 00:26:03,789
cutter fire unless you were able to

00:26:01,570 --> 00:26:06,159
train it to look for that very specific

00:26:03,789 --> 00:26:08,019
object and there would be other ways to

00:26:06,159 --> 00:26:10,149
do it to look for the most dominant

00:26:08,019 --> 00:26:12,129
color and Anna mention and find the

00:26:10,149 --> 00:26:17,929
largest proportion of that or something

00:26:12,129 --> 00:26:19,970
along those lines maybe but anyone else

00:26:17,929 --> 00:26:22,610
yeah I was just wondering if it would be

00:26:19,970 --> 00:26:24,799
fast enough to do real-time processing

00:26:22,610 --> 00:26:26,690
like a stream of images coming from

00:26:24,799 --> 00:26:29,480
JavaScript canvas sent to the server

00:26:26,690 --> 00:26:32,409
yeah I think it would because it is

00:26:29,480 --> 00:26:34,970
originally designed to handle real-time

00:26:32,409 --> 00:26:37,249
vision for robot platforms and things

00:26:34,970 --> 00:26:38,619
like that so if you can get the data

00:26:37,249 --> 00:26:41,480
into it fast enough it'll probably work

00:26:38,619 --> 00:26:44,450
one of the things about say for example

00:26:41,480 --> 00:26:46,519
you're using it to look for a face in

00:26:44,450 --> 00:26:48,320
real time I you'd probably use the

00:26:46,519 --> 00:26:51,049
higher classifier once to find the

00:26:48,320 --> 00:26:52,789
bounding box that and then what you'd do

00:26:51,049 --> 00:26:56,570
instead is keep on truckin that patch of

00:26:52,789 --> 00:26:58,669
the image using a thing called optical

00:26:56,570 --> 00:27:00,919
flow there's a set of functions and

00:26:58,669 --> 00:27:02,600
therefore handling you give it to images

00:27:00,919 --> 00:27:04,549
before in the afternoon the works at

00:27:02,600 --> 00:27:05,779
where the pixels have moved so you

00:27:04,549 --> 00:27:08,179
probably use that because it's a bit

00:27:05,779 --> 00:27:09,919
faster to do them the hard classifier

00:27:08,179 --> 00:27:12,159
would be but yeah it should work thank

00:27:09,919 --> 00:27:12,159
you Mike

00:27:21,830 --> 00:27:23,890

YouTube URL: https://www.youtube.com/watch?v=BX3l9YudNYQ


