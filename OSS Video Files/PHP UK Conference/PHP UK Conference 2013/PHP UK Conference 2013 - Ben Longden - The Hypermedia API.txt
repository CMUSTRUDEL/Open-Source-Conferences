Title: PHP UK Conference 2013 - Ben Longden - The Hypermedia API
Publication date: 2013-04-22
Playlist: PHP UK Conference 2013
Description: 
	As experienced developers we're regularly told that very few API's out there are really RESTful, and sometimes we're even told why and how they could be. But what is the process of actually designing an API that uses hypermedia, and what is hypermedia anyway? This talk takes the listener through the process of designing an API structure up front that uses hypermedia at it's core over HTTP, what considerations do you need when selecting a media type to represent your resource and what is out there to help you document it for others to use. This session is recommended for architects and developers alike and will give a good grounding in writing excellent, self-explanatory Hypermedia APIs.
Captions: 
	00:00:09,690 --> 00:00:14,260
thanks everyone can everyone hear me

00:00:12,190 --> 00:00:16,209
okay because I can't tell if my voice is

00:00:14,260 --> 00:00:19,200
travelling so so yeah cool everyone's

00:00:16,209 --> 00:00:23,170
thumbs up at the back that's good okay

00:00:19,200 --> 00:00:25,270
my motivation for bringing this talks to

00:00:23,170 --> 00:00:29,020
this conference was to try to get across

00:00:25,270 --> 00:00:31,239
the idea that if everybody you can start

00:00:29,020 --> 00:00:33,790
building their I either ap is using a

00:00:31,239 --> 00:00:38,350
kind of a standard way a standard format

00:00:33,790 --> 00:00:43,510
of using hypermedia we can make the web

00:00:38,350 --> 00:00:46,989
a lot more of a useable place for

00:00:43,510 --> 00:00:48,489
developers this talk is very much geared

00:00:46,989 --> 00:00:51,940
towards people in this room who are

00:00:48,489 --> 00:00:54,309
creating this stuff every day if we can

00:00:51,940 --> 00:00:56,260
all decide and agree that create that

00:00:54,309 --> 00:00:57,969
using hypermedia is a good idea

00:00:56,260 --> 00:01:01,170
we will automatically be able to kind of

00:00:57,969 --> 00:01:03,910
use the web as a way of being able to

00:01:01,170 --> 00:01:05,620
scale our API is to high volume of

00:01:03,910 --> 00:01:07,930
traffic to be able to use the facilities

00:01:05,620 --> 00:01:11,650
that the web provides to to cache

00:01:07,930 --> 00:01:14,890
everything and just to be able to make

00:01:11,650 --> 00:01:16,180
things better and that's what I hope

00:01:14,890 --> 00:01:20,380
that everyone can take away from this

00:01:16,180 --> 00:01:23,410
talk that using hypermedia correctly and

00:01:20,380 --> 00:01:29,620
appropriately will help achieve that

00:01:23,410 --> 00:01:30,610
goal so first of all who am I and why am

00:01:29,620 --> 00:01:36,820
i standing here talking to you about

00:01:30,610 --> 00:01:39,670
hyper media I blog a little bit on my

00:01:36,820 --> 00:01:42,190
personal blog no Cariad occurred at UK I

00:01:39,670 --> 00:01:45,340
talk at conferences this is the this is

00:01:42,190 --> 00:01:49,510
my second talk that I've done on the the

00:01:45,340 --> 00:01:53,040
field of rest in general I also talk

00:01:49,510 --> 00:01:54,760
about a micro framework called Silex

00:01:53,040 --> 00:01:57,310
I've been involved with the community

00:01:54,760 --> 00:02:00,670
for the PC community for probably about

00:01:57,310 --> 00:02:04,810
five years or so now maybe longer I lose

00:02:00,670 --> 00:02:07,450
track of time but I'm a software

00:02:04,810 --> 00:02:12,459
engineer and manager and I work for the

00:02:07,450 --> 00:02:14,680
in Vica group and my t-shirt the likud

00:02:12,459 --> 00:02:17,680
group consists of indie carousel session

00:02:14,680 --> 00:02:20,200
digital and sends to your labs UK we are

00:02:17,680 --> 00:02:22,300
hiring so I'm sure everybody's pretty

00:02:20,200 --> 00:02:24,450
much aware of that by now but we always

00:02:22,300 --> 00:02:26,980
are

00:02:24,450 --> 00:02:28,330
I'm from Scotland I love putting this

00:02:26,980 --> 00:02:29,950
slide up because I can put a massive

00:02:28,330 --> 00:02:34,270
flag of Scotland up on a big screen so

00:02:29,950 --> 00:02:37,180
everyone can see um okay so let's get

00:02:34,270 --> 00:02:38,500
into the little bit about why I'm here

00:02:37,180 --> 00:02:41,230
to talk about I know

00:02:38,500 --> 00:02:42,700
Oh actually before I do move on to that

00:02:41,230 --> 00:02:47,080
that's just some of my contact details

00:02:42,700 --> 00:02:49,300
there so the first thing I want to talk

00:02:47,080 --> 00:02:53,170
about a little bit is the architectural

00:02:49,300 --> 00:02:55,959
styles of creating api's on the web

00:02:53,170 --> 00:02:58,540
there are many some of them are more

00:02:55,959 --> 00:03:00,820
successful than others and we're going

00:02:58,540 --> 00:03:03,730
to run through a couple of they're kind

00:03:00,820 --> 00:03:05,850
of the ones that we shouldn't really be

00:03:03,730 --> 00:03:08,769
following some of the styles that are

00:03:05,850 --> 00:03:10,239
they can work for some certain for

00:03:08,769 --> 00:03:13,269
certain situations and sometimes it's

00:03:10,239 --> 00:03:15,180
okay but there are some issues with

00:03:13,269 --> 00:03:18,160
those things with those ways of working

00:03:15,180 --> 00:03:20,170
we have lots of lots of api's use the

00:03:18,160 --> 00:03:21,640
web simply to tunnel data through they

00:03:20,170 --> 00:03:23,350
don't use the protocol they just use it

00:03:21,640 --> 00:03:26,850
as an it as a way of being able to get a

00:03:23,350 --> 00:03:29,530
message from one place to another place

00:03:26,850 --> 00:03:35,769
and a lot of those API is look a little

00:03:29,530 --> 00:03:39,280
bit like this RPC style api's you issue

00:03:35,769 --> 00:03:43,269
a get requests include all of the

00:03:39,280 --> 00:03:46,750
information in the URL and have things

00:03:43,269 --> 00:03:50,290
that change state on the behavior from

00:03:46,750 --> 00:03:52,030
just following a link there are some

00:03:50,290 --> 00:03:55,570
reasonably obvious pitfalls of doing

00:03:52,030 --> 00:03:57,790
this things this way if that for example

00:03:55,570 --> 00:04:01,239
was a link that a web spider could

00:03:57,790 --> 00:04:04,329
follow every 12 hours or so and Google

00:04:01,239 --> 00:04:06,180
comes along and indexes your of site it

00:04:04,329 --> 00:04:09,730
ends up creating a new user account and

00:04:06,180 --> 00:04:11,650
that's because we're not using get in

00:04:09,730 --> 00:04:13,420
the way that it was designed get is

00:04:11,650 --> 00:04:14,590
supposed to be a safe method you're

00:04:13,420 --> 00:04:16,690
supposed to be able to issue a get

00:04:14,590 --> 00:04:19,090
request against anything on the web and

00:04:16,690 --> 00:04:20,829
it will return the resource it doesn't

00:04:19,090 --> 00:04:23,710
change anything to do with that resource

00:04:20,829 --> 00:04:26,620
yes it can do some other things it it

00:04:23,710 --> 00:04:29,050
can increment counters it can you can be

00:04:26,620 --> 00:04:32,200
tracking statistics you can do or some

00:04:29,050 --> 00:04:34,030
other bits and pieces off of the back of

00:04:32,200 --> 00:04:36,000
having a get request but it shouldn't

00:04:34,030 --> 00:04:40,620
change the state of a resource

00:04:36,000 --> 00:04:42,660
I just kicked that light this works

00:04:40,620 --> 00:04:45,780
against the web

00:04:42,660 --> 00:04:47,220
you can't cache that resource it's not

00:04:45,780 --> 00:04:49,320
this isn't a read-only resource this is

00:04:47,220 --> 00:04:54,930
modifying the behavior of a server is

00:04:49,320 --> 00:04:59,400
modifying State on the server side this

00:04:54,930 --> 00:05:02,250
these webs these these api's sit on a

00:04:59,400 --> 00:05:03,690
scale and I'm gonna go through each of

00:05:02,250 --> 00:05:05,480
the levels there's three levels in this

00:05:03,690 --> 00:05:09,900
scale called richerson maturity level

00:05:05,480 --> 00:05:12,750
and they describe how advanced an API is

00:05:09,900 --> 00:05:20,640
in terms of getting to level three which

00:05:12,750 --> 00:05:22,830
is titled the glory of REST API is at

00:05:20,640 --> 00:05:24,720
level zero are said to be sitting down

00:05:22,830 --> 00:05:27,750
at the bottom in the swamp of pox which

00:05:24,720 --> 00:05:32,310
is a great term pork standing for plain

00:05:27,750 --> 00:05:33,900
old XML this is where api's have no

00:05:32,310 --> 00:05:36,990
semantic meaning they're just blobs of

00:05:33,900 --> 00:05:39,210
data they could be in any format and you

00:05:36,990 --> 00:05:41,460
can consume them you have very you have

00:05:39,210 --> 00:05:43,440
clients are very hardwired to understand

00:05:41,460 --> 00:05:45,030
the exact specifics of your API then

00:05:43,440 --> 00:05:47,430
nothing can be implied or derived from

00:05:45,030 --> 00:05:52,200
those api's they have no semantic

00:05:47,430 --> 00:05:57,450
meaning or Jason I will talk a little

00:05:52,200 --> 00:05:58,080
bit more about Jason later on and I'll

00:05:57,450 --> 00:06:01,680
leave that for later

00:05:58,080 --> 00:06:03,479
he isn't it a quick example of some just

00:06:01,680 --> 00:06:05,190
a plain old XML file everyone's probably

00:06:03,479 --> 00:06:08,370
familiar with these with this sort of

00:06:05,190 --> 00:06:11,250
thing it's just some it's just an XML

00:06:08,370 --> 00:06:12,930
blob none of these things really mean

00:06:11,250 --> 00:06:15,720
anything there are written in English of

00:06:12,930 --> 00:06:17,940
course but you can understand them but

00:06:15,720 --> 00:06:19,860
for a computer or our client is trying

00:06:17,940 --> 00:06:21,060
to understand these this API it has to

00:06:19,860 --> 00:06:22,860
know exactly what each of those little

00:06:21,060 --> 00:06:25,440
bits mean and is very specific to your

00:06:22,860 --> 00:06:27,840
implementation

00:06:25,440 --> 00:06:30,150
it's very domaine specific we can't

00:06:27,840 --> 00:06:33,680
represent something else using a similar

00:06:30,150 --> 00:06:33,680
format we have to design another one

00:06:34,400 --> 00:06:38,850
other another architectural style which

00:06:36,840 --> 00:06:42,750
lives in this register maturity level

00:06:38,850 --> 00:06:47,130
zero is the ws star standards and these

00:06:42,750 --> 00:06:49,270
are the this is soap all request server

00:06:47,130 --> 00:06:53,560
soap are done using post

00:06:49,270 --> 00:06:54,220
an HTTP POST request they don't use

00:06:53,560 --> 00:06:56,440
anything else

00:06:54,220 --> 00:06:58,569
they're just tunneling data using post

00:06:56,440 --> 00:07:02,470
and it re-implementing a whole bunch of

00:06:58,569 --> 00:07:04,060
features like caching like any kind of

00:07:02,470 --> 00:07:05,520
metadata everything else has to be

00:07:04,060 --> 00:07:07,750
implemented in soap

00:07:05,520 --> 00:07:09,460
we can't leverage anything it's out

00:07:07,750 --> 00:07:16,569
there using soap because it just uses it

00:07:09,460 --> 00:07:20,319
as a tunnel soap clients are built off

00:07:16,569 --> 00:07:22,449
of using these whistle files they are

00:07:20,319 --> 00:07:25,870
the clients are very very intrinsically

00:07:22,449 --> 00:07:30,789
tied to how you do how you how you use

00:07:25,870 --> 00:07:32,080
that API this is okay if you're using a

00:07:30,789 --> 00:07:35,620
language of supports this really well

00:07:32,080 --> 00:07:40,000
like Java you can point the Java after

00:07:35,620 --> 00:07:41,319
utter whistle API after whistle it pulls

00:07:40,000 --> 00:07:42,580
it down and generates a client on your

00:07:41,319 --> 00:07:45,490
client side and you can just start using

00:07:42,580 --> 00:07:47,110
it it doesn't work quite so well if

00:07:45,490 --> 00:07:51,849
you're in another environment like in

00:07:47,110 --> 00:07:53,949
PHP or using something else it's very

00:07:51,849 --> 00:07:55,270
complex the the soap envelope if you

00:07:53,949 --> 00:07:57,009
ever actually have had the misfortune of

00:07:55,270 --> 00:07:59,259
having to dive into it so painful about

00:07:57,009 --> 00:08:00,520
it looks like and what things are how

00:07:59,259 --> 00:08:02,219
things are represented it's really

00:08:00,520 --> 00:08:04,659
difficult to read this is very much a

00:08:02,219 --> 00:08:09,880
machine that something is targeted for a

00:08:04,659 --> 00:08:12,669
machine so how do we get up to Richerson

00:08:09,880 --> 00:08:15,639
maturity level one from from sitting at

00:08:12,669 --> 00:08:20,969
the levels of RPC XML RPC and soap that

00:08:15,639 --> 00:08:24,909
kind of thing we hit level one by

00:08:20,969 --> 00:08:27,520
identifying resources this is the pretty

00:08:24,909 --> 00:08:30,219
URLs part there are lots of people think

00:08:27,520 --> 00:08:31,930
of when you say I have a REST API the

00:08:30,219 --> 00:08:33,159
thing immediately they jump in saying or

00:08:31,930 --> 00:08:34,930
like you so you have nice little URLs

00:08:33,159 --> 00:08:37,870
which address things yes yes you do

00:08:34,930 --> 00:08:39,520
because the reason why we have those is

00:08:37,870 --> 00:08:44,260
because you're identifying resources

00:08:39,520 --> 00:08:45,850
using a name and that name is the URL so

00:08:44,260 --> 00:08:50,070
this is quite often what people think of

00:08:45,850 --> 00:08:55,300
when you say that you've got a REST API

00:08:50,070 --> 00:08:58,270
what you don't have in a in a restful

00:08:55,300 --> 00:09:02,020
api usually is verbs inside the URL this

00:08:58,270 --> 00:09:03,250
is quite a bit of a clue about whether

00:09:02,020 --> 00:09:04,960
or not your service

00:09:03,250 --> 00:09:07,210
you're thinking is heading in the right

00:09:04,960 --> 00:09:09,700
direction for for creating something it

00:09:07,210 --> 00:09:13,180
will exist on the web in a kind of web

00:09:09,700 --> 00:09:14,530
friendly way you find the nouns or your

00:09:13,180 --> 00:09:17,650
the domain that you're trying to

00:09:14,530 --> 00:09:20,590
represent once you found the nouns you

00:09:17,650 --> 00:09:24,160
can then you can address them so take

00:09:20,590 --> 00:09:25,660
this example here as a simple statement

00:09:24,160 --> 00:09:27,220
users can create messages that are

00:09:25,660 --> 00:09:29,260
visible to other users who follow them

00:09:27,220 --> 00:09:31,060
we have two things that we can identify

00:09:29,260 --> 00:09:32,560
from that statement - there's two

00:09:31,060 --> 00:09:35,940
resources that are interacting here

00:09:32,560 --> 00:09:35,940
we've got users and we've got messages

00:09:36,060 --> 00:09:40,800
once you've identified those things you

00:09:38,650 --> 00:09:43,510
can craft the urls for those resources

00:09:40,800 --> 00:09:46,210
that's appearing quite small on the

00:09:43,510 --> 00:09:48,760
screen but it's the idea being that you

00:09:46,210 --> 00:09:51,930
have user something for users and

00:09:48,760 --> 00:09:54,640
something for messages underneath it

00:09:51,930 --> 00:09:58,120
then you can start thinking of resources

00:09:54,640 --> 00:09:59,170
being subsets of other resources users

00:09:58,120 --> 00:10:01,150
obviously have messages that are

00:09:59,170 --> 00:10:03,630
associated with them so we can think of

00:10:01,150 --> 00:10:07,330
these things in terms of subsets of data

00:10:03,630 --> 00:10:10,000
so my user so user slash belonged in

00:10:07,330 --> 00:10:14,740
slash messages it's a kind of a logical

00:10:10,000 --> 00:10:17,710
extension to two refree things that

00:10:14,740 --> 00:10:19,750
those those subsets of data from my from

00:10:17,710 --> 00:10:21,490
my user resource and this is in

00:10:19,750 --> 00:10:24,160
preference to things like using the

00:10:21,490 --> 00:10:27,460
query string to filter the base resource

00:10:24,160 --> 00:10:30,690
you wouldn't necessarily want to go HTTP

00:10:27,460 --> 00:10:35,110
slash slash my domain slash messages

00:10:30,690 --> 00:10:36,610
filter by my username this provides a

00:10:35,110 --> 00:10:38,860
much nicer and easier way of getting

00:10:36,610 --> 00:10:43,810
access into those those bits of subsets

00:10:38,860 --> 00:10:48,400
so we've talked about using HTTP as a

00:10:43,810 --> 00:10:53,530
tunnel like the plain ol XML or JSON

00:10:48,400 --> 00:10:57,480
type API is but HTTP is a protocol the

00:10:53,530 --> 00:10:57,480
clue is in the P of HTTP

00:11:01,419 --> 00:11:06,669
HTTP is a shippi can represent these

00:11:04,339 --> 00:11:09,259
three different things there has methods

00:11:06,669 --> 00:11:12,769
it can represent metadata and it can

00:11:09,259 --> 00:11:15,049
represent a payload the methods are your

00:11:12,769 --> 00:11:17,899
the denying methods that are come as

00:11:15,049 --> 00:11:19,220
part of HTTP 1.1 declare what action

00:11:17,899 --> 00:11:22,639
you're doing against the resort are

00:11:19,220 --> 00:11:24,799
against a URL so let's get boat get post

00:11:22,639 --> 00:11:27,439
put delete and some other ones which are

00:11:24,799 --> 00:11:30,079
lesser well-known it has metadata in the

00:11:27,439 --> 00:11:33,079
form of headers and it has a payload

00:11:30,079 --> 00:11:35,600
which is your message body and these are

00:11:33,079 --> 00:11:40,669
the three things you can express so and

00:11:35,600 --> 00:11:42,499
if we use those three things in a in the

00:11:40,669 --> 00:11:44,919
right way HTTP is actually very

00:11:42,499 --> 00:11:49,189
successful it's been running the web for

00:11:44,919 --> 00:11:52,759
25 years it can scale up from very

00:11:49,189 --> 00:11:54,709
humble blog sites which gave one or two

00:11:52,759 --> 00:11:56,539
visitors a day right up to things like

00:11:54,709 --> 00:11:58,970
Facebook which get millions millions

00:11:56,539 --> 00:12:02,749
millions of users a day and it does this

00:11:58,970 --> 00:12:05,809
by being able to wrap up features which

00:12:02,749 --> 00:12:10,059
can be then re-expressed but in in

00:12:05,809 --> 00:12:12,379
intermediary so things like using caches

00:12:10,059 --> 00:12:16,279
you can leverage all of those bits and

00:12:12,379 --> 00:12:18,649
the things like a varnish cache or any

00:12:16,279 --> 00:12:20,660
other kind of reverse proxy if you obey

00:12:18,649 --> 00:12:26,359
the rules of HTTP you just get all that

00:12:20,660 --> 00:12:28,959
stuff for free on your api by

00:12:26,359 --> 00:12:31,249
identifying resources and using HTTP

00:12:28,959 --> 00:12:33,829
we're starting to climb up the ladder i

00:12:31,249 --> 00:12:38,689
pop the register maturity model up to up

00:12:33,829 --> 00:12:40,639
to level one from there by using the

00:12:38,689 --> 00:12:45,619
verbs the HTTP provides we can get up to

00:12:40,639 --> 00:12:47,569
level two of HTTP and written at the

00:12:45,619 --> 00:12:49,399
bottom there in small writing are the

00:12:47,569 --> 00:12:51,709
options trace head connect and patch

00:12:49,399 --> 00:12:59,269
methods which are the lesser well-known

00:12:51,709 --> 00:13:02,659
HTTP and methods some of these actions

00:12:59,269 --> 00:13:05,029
are safe head and get as I've discussed

00:13:02,659 --> 00:13:06,709
that talks about get earlier honor being

00:13:05,029 --> 00:13:10,999
a safe action you should be allowed to

00:13:06,709 --> 00:13:12,829
hit user get or a head method against

00:13:10,999 --> 00:13:13,880
any resource and it doesn't change the

00:13:12,829 --> 00:13:18,380
state of that object

00:13:13,880 --> 00:13:21,530
has no side effects if you remember the

00:13:18,380 --> 00:13:24,350
first example of an XML RPC call which

00:13:21,530 --> 00:13:26,090
had try to create an account

00:13:24,350 --> 00:13:27,620
sometimes you see URLs I'll have delete

00:13:26,090 --> 00:13:29,690
in there as well those are really

00:13:27,620 --> 00:13:31,550
dangerous ways of that that's dangerous

00:13:29,690 --> 00:13:34,430
ways of using get and it goes against

00:13:31,550 --> 00:13:36,890
the spec it goes against what HTTP says

00:13:34,430 --> 00:13:38,390
you should really do there are lots of

00:13:36,890 --> 00:13:39,680
things out there that will leverage the

00:13:38,390 --> 00:13:43,820
fact that get is safe

00:13:39,680 --> 00:13:46,120
like caches like all thing things of

00:13:43,820 --> 00:13:46,120
that ilk

00:13:46,610 --> 00:13:52,250
it also has defined idempotent actions

00:13:49,690 --> 00:13:55,760
by idempotent actions I mean that the

00:13:52,250 --> 00:13:58,550
result of making one or more requests is

00:13:55,760 --> 00:13:59,930
exactly as identical so you the first

00:13:58,550 --> 00:14:02,060
request will make a change every

00:13:59,930 --> 00:14:04,670
subsequent request after that point will

00:14:02,060 --> 00:14:07,070
have the same effect so to take an

00:14:04,670 --> 00:14:08,870
example let's say delete the first

00:14:07,070 --> 00:14:11,060
request deletes the resource the second

00:14:08,870 --> 00:14:12,500
requests ensures that will mean that

00:14:11,060 --> 00:14:14,060
it's still deleted you can't delete

00:14:12,500 --> 00:14:15,320
something more than once so the item

00:14:14,060 --> 00:14:17,060
still doesn't still doesn't exist

00:14:15,320 --> 00:14:21,380
therefore there's no change on the

00:14:17,060 --> 00:14:25,340
server side head get put and delete have

00:14:21,380 --> 00:14:27,530
those effects put is then there because

00:14:25,340 --> 00:14:29,390
it if you update something and some an

00:14:27,530 --> 00:14:35,270
identical request the state of that

00:14:29,390 --> 00:14:36,800
resource is going to be the same so when

00:14:35,270 --> 00:14:39,020
you're building an API you to identify

00:14:36,800 --> 00:14:42,320
the state that it's in and how are those

00:14:39,020 --> 00:14:45,410
things how those states map to the HTTP

00:14:42,320 --> 00:14:47,960
requests now in the users and messages

00:14:45,410 --> 00:14:50,840
example we have a few states we have

00:14:47,960 --> 00:14:54,260
list users list a single user list

00:14:50,840 --> 00:14:58,070
messages list a single message the usual

00:14:54,260 --> 00:14:59,330
crud type and operations on a user and

00:14:58,070 --> 00:15:01,570
you want to be able to maybe follow and

00:14:59,330 --> 00:15:03,440
unfollow users so this is kind of a

00:15:01,570 --> 00:15:06,500
think about kind of microblogging

00:15:03,440 --> 00:15:08,090
service we could put search in here as

00:15:06,500 --> 00:15:09,890
well but for the purposes of this we

00:15:08,090 --> 00:15:13,120
don't need to and the way that those

00:15:09,890 --> 00:15:16,550
might map to the methods are like this

00:15:13,120 --> 00:15:20,210
we can get a list of messages for me but

00:15:16,550 --> 00:15:23,150
from my fault the people who I follow we

00:15:20,210 --> 00:15:26,420
can post a new message to my atomizer

00:15:23,150 --> 00:15:27,379
mode my timeline we can put a map to a

00:15:26,420 --> 00:15:29,389
message to update

00:15:27,379 --> 00:15:30,889
for me to mistake I wish Twitter did

00:15:29,389 --> 00:15:34,369
this and I do this all the time make

00:15:30,889 --> 00:15:39,529
mistakes and can't correct them or we

00:15:34,369 --> 00:15:42,879
can use delete to remove one so from

00:15:39,529 --> 00:15:45,049
there we've hit level two reusing

00:15:42,879 --> 00:15:47,629
resources to get to level one we've

00:15:45,049 --> 00:15:49,579
identified our resources to get to level

00:15:47,629 --> 00:15:51,019
two we started using HTTP methods to

00:15:49,579 --> 00:15:55,059
represent how we interact with those

00:15:51,019 --> 00:16:00,619
resources and to get to level three

00:15:55,059 --> 00:16:06,259
we need to use hyper medium so what is

00:16:00,619 --> 00:16:11,449
hyper media hyper media is expressed by

00:16:06,259 --> 00:16:13,309
on on Wikipedia actually as this a

00:16:11,449 --> 00:16:14,689
logical extension to the term

00:16:13,309 --> 00:16:16,729
hypertech's in which graphics audio

00:16:14,689 --> 00:16:18,979
video plain text and hyperlinks

00:16:16,729 --> 00:16:23,059
intertwines create a generally nonlinear

00:16:18,979 --> 00:16:26,479
medium information essentially what it

00:16:23,059 --> 00:16:30,889
is is being able to put links into your

00:16:26,479 --> 00:16:33,529
resource that a client can follow in

00:16:30,889 --> 00:16:35,059
order to be able to represent represent

00:16:33,529 --> 00:16:37,549
data and interactions between your

00:16:35,059 --> 00:16:42,850
resources there are five different types

00:16:37,549 --> 00:16:45,739
of Link's which have been identified and

00:16:42,850 --> 00:16:46,879
all hypermedia types will exhibit at

00:16:45,739 --> 00:16:49,489
least one of these fiber media

00:16:46,879 --> 00:16:53,569
affordances and a four-hour affordance

00:16:49,489 --> 00:16:54,829
is a a bit of behavior so what a

00:16:53,569 --> 00:16:58,569
hypernova afford and says well can

00:16:54,829 --> 00:16:58,569
become clear just as I go through these

00:17:00,039 --> 00:17:06,259
we have embedded links in HTML an

00:17:04,009 --> 00:17:08,750
embedded link is an image tag has

00:17:06,259 --> 00:17:10,579
represented by an image tank tag when

00:17:08,750 --> 00:17:12,709
your browser sees that image tag it will

00:17:10,579 --> 00:17:15,500
use that link in the in the SRC

00:17:12,709 --> 00:17:19,789
attribute to render in place inside that

00:17:15,500 --> 00:17:22,309
document an image doesn't necessarily

00:17:19,789 --> 00:17:25,850
have to be an image in HTML the image

00:17:22,309 --> 00:17:27,230
tag office link would mandate that is an

00:17:25,850 --> 00:17:29,929
image but it could render anything in

00:17:27,230 --> 00:17:34,029
place as part of the document so it's an

00:17:29,929 --> 00:17:39,340
embedded link you have outbound links

00:17:34,029 --> 00:17:40,600
these are your a in HTML fiber anchors

00:17:39,340 --> 00:17:42,910
when

00:17:40,600 --> 00:17:43,990
that link is there it's a cig is telling

00:17:42,910 --> 00:17:45,250
the browser that you have to go

00:17:43,990 --> 00:17:51,820
somewhere else to find out some more

00:17:45,250 --> 00:17:55,419
information you have templated queries

00:17:51,820 --> 00:17:57,789
in HTML we do this using the forms with

00:17:55,419 --> 00:17:59,860
the get method you can basically what if

00:17:57,789 --> 00:18:01,419
all a form is is a way of being able to

00:17:59,860 --> 00:18:03,700
get the user to be able to construct a

00:18:01,419 --> 00:18:05,230
URL by passing in parameters when you

00:18:03,700 --> 00:18:07,630
click the submit button the browser just

00:18:05,230 --> 00:18:09,850
takes those parameters and converts them

00:18:07,630 --> 00:18:15,880
into a query string and sends it back to

00:18:09,850 --> 00:18:17,950
the server so it's templated query it

00:18:15,880 --> 00:18:22,320
can do non in non idempotent updates so

00:18:17,950 --> 00:18:25,659
this is creating new bits of information

00:18:22,320 --> 00:18:28,929
in HTML you do this using form method

00:18:25,659 --> 00:18:30,789
equals post that's creating that the

00:18:28,929 --> 00:18:37,270
idea with this is that it's creating new

00:18:30,789 --> 00:18:39,400
bits of data and following that you can

00:18:37,270 --> 00:18:43,510
do them on another hypermedia affordance

00:18:39,400 --> 00:18:45,100
is idempotent updates html5 our HTML in

00:18:43,510 --> 00:18:46,360
general has no support for being able to

00:18:45,100 --> 00:18:48,880
do this it doesn't have this as a

00:18:46,360 --> 00:18:53,350
feature which is why you can't do puts

00:18:48,880 --> 00:18:55,150
and deletes using HTML some hypermedia

00:18:53,350 --> 00:19:03,309
formats will have ways of being able to

00:18:55,150 --> 00:19:05,020
express that um we can also look at

00:19:03,309 --> 00:19:07,480
there there are many many different

00:19:05,020 --> 00:19:09,610
registered media types HTML is obviously

00:19:07,480 --> 00:19:12,010
one of them that is a hyper media format

00:19:09,610 --> 00:19:14,020
you can express links of four out of the

00:19:12,010 --> 00:19:17,380
five different types of links that are

00:19:14,020 --> 00:19:18,580
able to be expressed but there are

00:19:17,380 --> 00:19:22,630
others which are really really useful

00:19:18,580 --> 00:19:24,490
for making an API or web api that's not

00:19:22,630 --> 00:19:25,809
to say that you can't use HTML to do an

00:19:24,490 --> 00:19:28,330
api and in fact that's being done quite

00:19:25,809 --> 00:19:30,789
a lot it does offer quite a lot of

00:19:28,330 --> 00:19:32,260
support for quite a lot of things but

00:19:30,789 --> 00:19:36,730
not being able to do puts and delese can

00:19:32,260 --> 00:19:38,350
be quite limiting sometimes a way of

00:19:36,730 --> 00:19:41,980
being able to do this is using another

00:19:38,350 --> 00:19:42,820
hypermedia type and called hal which

00:19:41,980 --> 00:19:45,610
stands for hypertext application

00:19:42,820 --> 00:19:48,250
language this is a very very simple

00:19:45,610 --> 00:19:51,130
markup which can be used in both xml and

00:19:48,250 --> 00:19:52,380
json variants is great for api's is very

00:19:51,130 --> 00:19:54,539
simple

00:19:52,380 --> 00:19:57,480
and it allows you to represent your

00:19:54,539 --> 00:19:59,940
resources quite easily and and has

00:19:57,480 --> 00:20:02,910
built-in hypermedia controls now the

00:19:59,940 --> 00:20:04,530
JSON format of how looks like this you

00:20:02,910 --> 00:20:06,600
can see it has two reserved key lock

00:20:04,530 --> 00:20:09,630
keywords as underscore links underscore

00:20:06,600 --> 00:20:12,570
embedded the only hyper media for

00:20:09,630 --> 00:20:15,929
affordance that hal has is the ability

00:20:12,570 --> 00:20:17,549
to be able to do outbound links and 4ep

00:20:15,929 --> 00:20:19,500
is that is usually all you need to be

00:20:17,549 --> 00:20:22,559
able to do is to link to what the next

00:20:19,500 --> 00:20:25,409
thing is that you're able to do if you

00:20:22,559 --> 00:20:27,500
can see the slides from the back you'll

00:20:25,409 --> 00:20:31,470
be able to see that inside the links

00:20:27,500 --> 00:20:33,049
object you've got next and self so this

00:20:31,470 --> 00:20:36,809
is representing a collection a

00:20:33,049 --> 00:20:39,090
collection of bits of data which we've

00:20:36,809 --> 00:20:40,740
paginate it and we're telling the client

00:20:39,090 --> 00:20:43,289
that in order to get to the next page

00:20:40,740 --> 00:20:46,890
you follow the next link I also has a

00:20:43,289 --> 00:20:49,530
link back to itself we also have

00:20:46,890 --> 00:20:51,330
embedded items so inside this collection

00:20:49,530 --> 00:20:55,950
we've actually embedded the items that

00:20:51,330 --> 00:20:57,720
are in it and those are there are things

00:20:55,950 --> 00:20:58,770
in an insider inside embedded an we're

00:20:57,720 --> 00:21:01,130
gonna talk a little bit more about that

00:20:58,770 --> 00:21:03,120
in a minute

00:21:01,130 --> 00:21:06,450
here is exactly the same thing

00:21:03,120 --> 00:21:09,750
represented in XML it's maybe a little

00:21:06,450 --> 00:21:13,470
bit more a little smaller that's one you

00:21:09,750 --> 00:21:17,070
just cause of the way I format it so the

00:21:13,470 --> 00:21:19,140
point of using of using pal is to be

00:21:17,070 --> 00:21:20,700
able to send things out in both XML or

00:21:19,140 --> 00:21:24,059
JSON formats you can quite easily

00:21:20,700 --> 00:21:27,750
support it and a bit of a shameless plug

00:21:24,059 --> 00:21:31,679
is I've written an API that allows you

00:21:27,750 --> 00:21:33,840
to generate how format the hal format is

00:21:31,679 --> 00:21:35,220
in my github repository and it's all

00:21:33,840 --> 00:21:37,919
linked to from these slides which i'll

00:21:35,220 --> 00:21:39,539
post after this talk you can generate

00:21:37,919 --> 00:21:42,600
them in PHP you can you can create this

00:21:39,539 --> 00:21:45,090
representation quite easily you define

00:21:42,600 --> 00:21:47,070
one way of being able you define one hal

00:21:45,090 --> 00:21:48,510
resource and then you can spit it out at

00:21:47,070 --> 00:21:49,799
the bottom unfortunately this is chopped

00:21:48,510 --> 00:21:53,280
off a little bit at the bottom but it

00:21:49,799 --> 00:21:55,260
says act as XML or as Jason and you can

00:21:53,280 --> 00:21:56,520
format your API output in that same way

00:21:55,260 --> 00:21:58,880
you can format your resources using

00:21:56,520 --> 00:21:58,880
those things

00:22:00,070 --> 00:22:05,059
so the next thing I'm going to talk

00:22:01,759 --> 00:22:07,820
about isn't link relations now link

00:22:05,059 --> 00:22:10,159
relations are what you name your links

00:22:07,820 --> 00:22:14,389
in my example we had one we had two

00:22:10,159 --> 00:22:20,179
examples of our parent links have next

00:22:14,389 --> 00:22:23,059
and self link relations should have a

00:22:20,179 --> 00:22:25,809
short syntax if you're using one that's

00:22:23,059 --> 00:22:28,279
actually being this actually registered

00:22:25,809 --> 00:22:28,909
you probably already familiar with one

00:22:28,279 --> 00:22:31,789
of these things

00:22:28,909 --> 00:22:34,669
whenever you link a stylesheet to HTML

00:22:31,789 --> 00:22:37,909
you have a thing in your in your head

00:22:34,669 --> 00:22:40,340
inside head you have the link if the

00:22:37,909 --> 00:22:43,299
link tag is a really cool stylesheet

00:22:40,340 --> 00:22:45,349
I don't I linked to the stylesheet

00:22:43,299 --> 00:22:46,999
that's a lot that is a link relation

00:22:45,349 --> 00:22:49,399
what you're saying is that in order to

00:22:46,999 --> 00:22:51,799
format this page correctly follow the

00:22:49,399 --> 00:22:53,960
stylesheet link relation pull down that

00:22:51,799 --> 00:22:57,470
bit of CSS and use it to render this

00:22:53,960 --> 00:23:00,200
content there are loads of those things

00:22:57,470 --> 00:23:01,970
are registered stylesheet is one of them

00:23:00,200 --> 00:23:03,409
there's another one called profile which

00:23:01,970 --> 00:23:04,340
is a useful one of being able to and

00:23:03,409 --> 00:23:06,109
useful way of being able to say that

00:23:04,340 --> 00:23:07,999
this is what this resource is this is

00:23:06,109 --> 00:23:10,729
what it represents you can put stuff at

00:23:07,999 --> 00:23:13,879
the end of a profile link relation that

00:23:10,729 --> 00:23:16,609
says if you save his adjacent adjacent

00:23:13,879 --> 00:23:19,159
file you could put some JSON schema over

00:23:16,609 --> 00:23:21,320
there to do some validation there are

00:23:19,159 --> 00:23:22,669
ways of being all to name links so the

00:23:21,320 --> 00:23:24,109
clients can automatically followed them

00:23:22,669 --> 00:23:25,989
if they understand what they are a

00:23:24,109 --> 00:23:28,549
browser understands stylesheet very well

00:23:25,989 --> 00:23:29,239
all browsers do so it's a common way of

00:23:28,549 --> 00:23:30,859
being able to do it

00:23:29,239 --> 00:23:33,950
and these things are registered in two

00:23:30,859 --> 00:23:37,549
different places and I'm going to try

00:23:33,950 --> 00:23:38,509
and and unfollow these links and see if

00:23:37,549 --> 00:23:39,950
it see if this works

00:23:38,509 --> 00:23:45,729
one of them is a site called

00:23:39,950 --> 00:23:47,659
microformats let's just see if I can

00:23:45,729 --> 00:23:49,759
there's something quite appealing about

00:23:47,659 --> 00:23:52,220
being able to do a hyper media talk and

00:23:49,759 --> 00:23:53,929
formatting it up using HTML which is

00:23:52,220 --> 00:23:56,229
fine for media formats it's a bit better

00:23:53,929 --> 00:23:56,229
but

00:23:57,979 --> 00:24:01,979
just assemble this is that so this is

00:24:00,090 --> 00:24:04,679
the this is the registry for

00:24:01,979 --> 00:24:06,419
microformats this is the this is where

00:24:04,679 --> 00:24:07,649
all of these things or some of these

00:24:06,419 --> 00:24:09,029
things can be registered these these

00:24:07,649 --> 00:24:13,289
link relation types and you've got some

00:24:09,029 --> 00:24:14,700
quite interesting ones in there so you

00:24:13,289 --> 00:24:16,799
can see there there are a loss of them

00:24:14,700 --> 00:24:19,649
some of them are more useful than others

00:24:16,799 --> 00:24:21,029
for example this one here if you can't

00:24:19,649 --> 00:24:23,879
read that which you probably can't it's

00:24:21,029 --> 00:24:25,349
a it says crush and this is a way of

00:24:23,879 --> 00:24:27,359
being able to say the definition this

00:24:25,349 --> 00:24:28,109
person considers the reference person to

00:24:27,359 --> 00:24:30,089
be a crush

00:24:28,109 --> 00:24:38,070
ie they have a crush on the referenced

00:24:30,089 --> 00:24:39,389
person friend representative document

00:24:38,070 --> 00:24:41,070
considers the person represented by the

00:24:39,389 --> 00:24:42,659
reference document to be a friend and

00:24:41,070 --> 00:24:44,549
these are quite obviously added by a

00:24:42,659 --> 00:24:49,320
social network I'm not quite sure which

00:24:44,549 --> 00:24:52,830
one you can register your own ones of

00:24:49,320 --> 00:24:55,109
these microformats is a really good one

00:24:52,830 --> 00:24:58,259
in fact actually you can see style sheet

00:24:55,109 --> 00:24:59,519
was there the style sheet style sheet

00:24:58,259 --> 00:25:01,229
just defined as a style sheet for the

00:24:59,519 --> 00:25:04,649
current document uses the invisible link

00:25:01,229 --> 00:25:13,589
href element there's a lots of them

00:25:04,649 --> 00:25:16,099
sibling spouse Oh sweetheart so those

00:25:13,589 --> 00:25:18,539
those are the register link relations

00:25:16,099 --> 00:25:22,820
there are other places as well you have

00:25:18,539 --> 00:25:25,739
a sort of a more formal registry Ayana

00:25:22,820 --> 00:25:27,710
and it has they have their list of

00:25:25,739 --> 00:25:29,549
registered linked relations as well

00:25:27,710 --> 00:25:31,139
there are some of these are slightly

00:25:29,549 --> 00:25:33,509
different there's some are microformats

00:25:31,139 --> 00:25:37,169
and in here they're kind of and the

00:25:33,509 --> 00:25:38,219
other way around it's worth having a

00:25:37,169 --> 00:25:40,049
loop I read through these when you're

00:25:38,219 --> 00:25:41,309
designing hypermedia api's to see if

00:25:40,049 --> 00:25:43,169
there is some of these things that are

00:25:41,309 --> 00:25:45,450
actually when it makes sense one that is

00:25:43,169 --> 00:25:48,389
quite useful is there's one actually it

00:25:45,450 --> 00:25:50,039
is in there it's called edit when you

00:25:48,389 --> 00:25:52,139
represent to something and call it edit

00:25:50,039 --> 00:25:54,359
what you're saying is that the client

00:25:52,139 --> 00:25:56,549
can put in delete to that URL to edit

00:25:54,359 --> 00:26:00,749
the current resource so that's what

00:25:56,549 --> 00:26:02,909
we've being able to say that you can

00:26:00,749 --> 00:26:05,339
represent links to say I want to go to

00:26:02,909 --> 00:26:06,839
edit this resort or delete it this is

00:26:05,339 --> 00:26:08,460
the this is the link you should use to

00:26:06,839 --> 00:26:10,049
be able to do that you can edit or

00:26:08,460 --> 00:26:11,080
delete against that for that particular

00:26:10,049 --> 00:26:14,030
place

00:26:11,080 --> 00:26:16,970
so those are quite useful those two

00:26:14,030 --> 00:26:19,220
sites are quite useful but of course

00:26:16,970 --> 00:26:21,020
sometimes you want to be able to create

00:26:19,220 --> 00:26:23,960
your own little custom link relations

00:26:21,020 --> 00:26:26,720
and the way that you should do that is a

00:26:23,960 --> 00:26:29,390
lot of the time you can just create a

00:26:26,720 --> 00:26:31,310
word that you might want to use the

00:26:29,390 --> 00:26:33,770
problem is if you just create a word and

00:26:31,310 --> 00:26:35,120
don't register it is that somebody else

00:26:33,770 --> 00:26:38,390
could use that same word in another

00:26:35,120 --> 00:26:42,950
public API and you've got a class your

00:26:38,390 --> 00:26:44,600
your version of my relation will clash

00:26:42,950 --> 00:26:46,640
with somebody else's definition of my

00:26:44,600 --> 00:26:48,410
relation so when you create some custom

00:26:46,640 --> 00:26:50,060
link relations you should namespace them

00:26:48,410 --> 00:26:54,560
by just using a URL and this actually

00:26:50,060 --> 00:26:55,970
provides quite a useful feature if you

00:26:54,560 --> 00:26:57,590
use a URL you can actually make sure

00:26:55,970 --> 00:26:59,600
that that URL that URL can be

00:26:57,590 --> 00:27:01,040
dereferenced if you follow that link you

00:26:59,600 --> 00:27:03,290
can stick some documentation at the end

00:27:01,040 --> 00:27:05,720
of it to say this is what this relation

00:27:03,290 --> 00:27:07,250
means so other people can start using

00:27:05,720 --> 00:27:09,350
that as well and if it becomes real and

00:27:07,250 --> 00:27:10,400
if if lots of people use it and think

00:27:09,350 --> 00:27:12,230
that this is a really good this is a

00:27:10,400 --> 00:27:14,090
really good idea to be able to have a a

00:27:12,230 --> 00:27:15,800
standard way of representing this thing

00:27:14,090 --> 00:27:18,140
so that my client which understands

00:27:15,800 --> 00:27:21,020
these links can be used against multiple

00:27:18,140 --> 00:27:22,070
different api's they can read they're

00:27:21,020 --> 00:27:23,750
able to do that and I'll show you why

00:27:22,070 --> 00:27:30,230
that's quite that's that's a cool idea

00:27:23,750 --> 00:27:31,460
in a minute with with how so things to

00:27:30,230 --> 00:27:33,410
consider when you're designing a hyper

00:27:31,460 --> 00:27:35,390
media type

00:27:33,410 --> 00:27:39,530
let's run through a few of these things

00:27:35,390 --> 00:27:42,470
should I be representing it in XML or

00:27:39,530 --> 00:27:43,700
JSON or HTML or llamó or any of the

00:27:42,470 --> 00:27:51,110
other different markup languages that

00:27:43,700 --> 00:27:53,240
are out there it's really tempted really

00:27:51,110 --> 00:27:54,920
tempting and really easy just to pick

00:27:53,240 --> 00:27:58,040
Jason these days everybody wants to use

00:27:54,920 --> 00:27:59,630
Jason because it's easy it's everywhere

00:27:58,040 --> 00:28:01,100
if you're using javascript it obviously

00:27:59,630 --> 00:28:03,770
becomes very very simple and easy to

00:28:01,100 --> 00:28:05,870
parse but it actually forms quite a

00:28:03,770 --> 00:28:08,570
rigid structure to an API you can't

00:28:05,870 --> 00:28:10,670
evolve it very easily and I'll show you

00:28:08,570 --> 00:28:15,620
an example of exactly why that is in a

00:28:10,670 --> 00:28:17,300
minute XML is also ubiquitous you can

00:28:15,620 --> 00:28:22,730
parse it anywhere but it's harder to

00:28:17,300 --> 00:28:24,190
parse but XML is evolvable and quite

00:28:22,730 --> 00:28:27,450
easily evolvable

00:28:24,190 --> 00:28:30,909
and what do I mean by that take this

00:28:27,450 --> 00:28:35,350
example in Jason this is a really simple

00:28:30,909 --> 00:28:39,700
the JSON object has two parameters it

00:28:35,350 --> 00:28:41,860
has a name and phone if I wanted to add

00:28:39,700 --> 00:28:44,250
in functionality to my API say this this

00:28:41,860 --> 00:28:46,389
is a representation of a user that's

00:28:44,250 --> 00:28:47,980
been sitting there for a number of

00:28:46,389 --> 00:28:49,539
months people have started coding their

00:28:47,980 --> 00:28:53,350
coding clients against this

00:28:49,539 --> 00:28:55,179
representation but I want to add the

00:28:53,350 --> 00:29:00,549
functionality field to support more than

00:28:55,179 --> 00:29:04,960
one phone number why Jason has to change

00:29:00,549 --> 00:29:07,990
to this we've changed it from something

00:29:04,960 --> 00:29:09,669
that has a string in phone we have to

00:29:07,990 --> 00:29:12,820
change it to something it has an array

00:29:09,669 --> 00:29:16,330
and that's gonna break the clients that

00:29:12,820 --> 00:29:20,799
are currently speaking to it if we do

00:29:16,330 --> 00:29:22,120
the same thing in XML it looks very

00:29:20,799 --> 00:29:24,399
similar be to have name and phone

00:29:22,120 --> 00:29:27,399
because of the way XML works and because

00:29:24,399 --> 00:29:30,309
it's a lot more evolvable as a as a

00:29:27,399 --> 00:29:32,259
markup we can just simply add another

00:29:30,309 --> 00:29:34,840
food and they're the parses that are out

00:29:32,259 --> 00:29:37,509
there we'll just handle this you're not

00:29:34,840 --> 00:29:39,549
gonna break your clients to do a normal

00:29:37,509 --> 00:29:41,080
parser will just pick the first one and

00:29:39,549 --> 00:29:43,179
they will continue to work as they were

00:29:41,080 --> 00:29:44,710
before the clients that are built to use

00:29:43,179 --> 00:29:46,240
the new version of the API will be able

00:29:44,710 --> 00:29:47,679
to recognize the fact that there's more

00:29:46,240 --> 00:29:53,409
than one phone number an hour and take

00:29:47,679 --> 00:29:55,179
advantage of that so Jason is a really

00:29:53,409 --> 00:29:58,029
tempting one to use because it's so easy

00:29:55,179 --> 00:30:00,580
and so and basically parsing XML as a

00:29:58,029 --> 00:30:02,320
massive pain but actually if you want to

00:30:00,580 --> 00:30:05,860
make your API is a lot more evolvable

00:30:02,320 --> 00:30:08,529
and able to to move forward into the

00:30:05,860 --> 00:30:10,419
future and accept changes that you're

00:30:08,529 --> 00:30:14,259
going to make to them XML can actually

00:30:10,419 --> 00:30:18,100
be a really good choice consider your

00:30:14,259 --> 00:30:21,490
hypermedia factors what sort of links

00:30:18,100 --> 00:30:23,590
are you trying to embed do you need to

00:30:21,490 --> 00:30:27,429
be able to have an imager to have

00:30:23,590 --> 00:30:31,450
embedded links do you need to be able to

00:30:27,429 --> 00:30:33,940
make an online to put and updates do you

00:30:31,450 --> 00:30:35,379
need to excite an existing format like

00:30:33,940 --> 00:30:36,909
you said Hal only actually supports

00:30:35,379 --> 00:30:37,730
Ironbound links you can extend that

00:30:36,909 --> 00:30:39,380
format you

00:30:37,730 --> 00:30:41,780
use the facilities that howl already has

00:30:39,380 --> 00:30:44,260
and you can add stuff to it to be able

00:30:41,780 --> 00:30:46,250
to support things like templated queries

00:30:44,260 --> 00:30:48,320
that's okay and people are doing that

00:30:46,250 --> 00:30:50,360
and there are ways it be not effects it

00:30:48,320 --> 00:30:51,860
to extend formats there's there's a

00:30:50,360 --> 00:30:53,690
number of registered hyper media formats

00:30:51,860 --> 00:30:57,110
things like one called collection plus

00:30:53,690 --> 00:30:58,700
Jason and if you look up collection

00:30:57,110 --> 00:31:03,380
Jason there is a natural way of being

00:30:58,700 --> 00:31:04,730
able to to extend it to be able to do

00:31:03,380 --> 00:31:07,100
lots and lots of other things and then

00:31:04,730 --> 00:31:08,600
push those extensions back into it as a

00:31:07,100 --> 00:31:13,790
standard so that other people can follow

00:31:08,600 --> 00:31:15,950
those ways of doing things but all this

00:31:13,790 --> 00:31:17,210
sounds really great but why what why

00:31:15,950 --> 00:31:19,010
would I want to use a register type why

00:31:17,210 --> 00:31:23,870
can't I just stick together some XML or

00:31:19,010 --> 00:31:25,940
just stick together some some Jason if

00:31:23,870 --> 00:31:27,440
you haven't guessed already the benefits

00:31:25,940 --> 00:31:30,740
of doing that is there are existing

00:31:27,440 --> 00:31:33,020
tools that support this stuff and this

00:31:30,740 --> 00:31:35,900
is a another link here as well alright

00:31:33,020 --> 00:31:37,820
this is not that important you can

00:31:35,900 --> 00:31:38,900
actually read this it's just that I want

00:31:37,820 --> 00:31:40,760
to do I wanted to show it because it's

00:31:38,900 --> 00:31:44,780
actually it gets across the the mesh is

00:31:40,760 --> 00:31:48,770
quite easy quite well this is actually a

00:31:44,780 --> 00:31:50,720
Hal browser it's obviously built on the

00:31:48,770 --> 00:31:53,030
web but it's but what it does is it

00:31:50,720 --> 00:31:57,320
allows you to issue requests off to a

00:31:53,030 --> 00:31:58,700
Hal API and be able to derive things

00:31:57,320 --> 00:32:00,230
from it because it understands the hal

00:31:58,700 --> 00:32:03,650
format and this is actually an api

00:32:00,230 --> 00:32:05,540
called foxy carrot which is a hyper

00:32:03,650 --> 00:32:07,820
media API it's a very good one person

00:32:05,540 --> 00:32:11,600
one of the better ones I've seen out in

00:32:07,820 --> 00:32:12,800
the wild and you can see that on the

00:32:11,600 --> 00:32:15,320
right hand side you can see they're all

00:32:12,800 --> 00:32:18,770
how information it contains a whole

00:32:15,320 --> 00:32:20,960
bunch of links a lot of custom custom

00:32:18,770 --> 00:32:22,460
relations so you can see these if you

00:32:20,960 --> 00:32:28,820
can see the slides there under the slash

00:32:22,460 --> 00:32:30,710
rels but what it's doing is its on the

00:32:28,820 --> 00:32:32,840
left hand side it's parsing out those

00:32:30,710 --> 00:32:34,430
links and saying well actually because

00:32:32,840 --> 00:32:37,250
I'm a Halla browser and I understand the

00:32:34,430 --> 00:32:39,470
hell that the Hara protocol is able to

00:32:37,250 --> 00:32:40,760
provide ways of being able to follow

00:32:39,470 --> 00:32:42,860
those links and say right well if you

00:32:40,760 --> 00:32:46,040
want a to a get request against it you

00:32:42,860 --> 00:32:47,660
can just click that green button so I'm

00:32:46,040 --> 00:32:51,520
able to actually use this to browse an

00:32:47,660 --> 00:32:54,970
API and because these these

00:32:51,520 --> 00:32:56,620
the custom link relations are using URLs

00:32:54,970 --> 00:32:59,110
this like some documentation at the end

00:32:56,620 --> 00:33:02,440
of them so by using a whole browser I

00:32:59,110 --> 00:33:04,750
can then click on the documentation and

00:33:02,440 --> 00:33:08,020
I get a little bit obviously he is not

00:33:04,750 --> 00:33:09,400
quite finished documentation but the

00:33:08,020 --> 00:33:10,870
point is there that you can just follow

00:33:09,400 --> 00:33:14,410
those you can follow those links and you

00:33:10,870 --> 00:33:16,270
can help you can pick out bits of

00:33:14,410 --> 00:33:20,520
information that are useful to the to

00:33:16,270 --> 00:33:20,520
the developer who is is using the API

00:33:20,790 --> 00:33:24,760
because Halleck can't provide a way of

00:33:23,350 --> 00:33:26,590
being able to specify whether or not

00:33:24,760 --> 00:33:28,840
something is a get request or you should

00:33:26,590 --> 00:33:30,309
use something else against it you also

00:33:28,840 --> 00:33:32,440
have a facility to be able to use the

00:33:30,309 --> 00:33:34,390
Halla browser to be able to just to

00:33:32,440 --> 00:33:40,890
issue a different type of a different

00:33:34,390 --> 00:33:40,890
method okay

00:33:43,370 --> 00:33:47,240
so what we get by this is

00:33:45,140 --> 00:33:49,190
interoperability if everybody starts

00:33:47,240 --> 00:33:51,590
using these defined and registered media

00:33:49,190 --> 00:33:54,500
formats I can build a client like a

00:33:51,590 --> 00:33:56,420
browser like that hal browser and point

00:33:54,500 --> 00:33:58,790
it at any hal api and i can just start

00:33:56,420 --> 00:34:00,830
using it by clicking around i can just

00:33:58,790 --> 00:34:02,510
start using it but I can build a generic

00:34:00,830 --> 00:34:03,770
client that can follow the links inside

00:34:02,510 --> 00:34:04,970
the document because the client can

00:34:03,770 --> 00:34:08,060
already understand what those things

00:34:04,970 --> 00:34:10,070
mean and if I'm using registered link

00:34:08,060 --> 00:34:13,100
relations I can even interact with some

00:34:10,070 --> 00:34:14,960
of your links quite quite easily I can

00:34:13,100 --> 00:34:18,410
say well if I discover the registered

00:34:14,960 --> 00:34:20,060
edit relation I can immediately provide

00:34:18,410 --> 00:34:21,740
a delete button that will work against

00:34:20,060 --> 00:34:24,110
your API without me ever having seen

00:34:21,740 --> 00:34:26,510
your API before this stuff will already

00:34:24,110 --> 00:34:29,240
start to work this becomes really cool

00:34:26,510 --> 00:34:32,060
when you start thinking about closed

00:34:29,240 --> 00:34:34,700
platforms like developing client

00:34:32,060 --> 00:34:36,890
applications for an iPhone for example

00:34:34,700 --> 00:34:40,880
where you have a long lead time to being

00:34:36,890 --> 00:34:42,500
able to create a client submit it to the

00:34:40,880 --> 00:34:44,360
app store wait two weeks for them to

00:34:42,500 --> 00:34:46,250
review it and then and then that thing

00:34:44,360 --> 00:34:49,730
goes on that the news comes available

00:34:46,250 --> 00:34:51,440
for everybody if I'm using a hyper media

00:34:49,730 --> 00:34:53,900
API I can actually control what that

00:34:51,440 --> 00:34:56,450
client looks like by just providing just

00:34:53,900 --> 00:34:59,180
providing links so my delete button

00:34:56,450 --> 00:35:02,270
might only appear if there is an edit

00:34:59,180 --> 00:35:04,370
link there on the on there on the

00:35:02,270 --> 00:35:06,200
resource so I can change how the client

00:35:04,370 --> 00:35:08,300
looks through being able to provide

00:35:06,200 --> 00:35:12,160
different types of links and I

00:35:08,300 --> 00:35:12,160
understood in the relations with them

00:35:12,910 --> 00:35:17,570
when you start getting into some of the

00:35:14,960 --> 00:35:20,120
hypermedia stuff you can DUP with this

00:35:17,570 --> 00:35:22,040
chatty API problem where you make a

00:35:20,120 --> 00:35:23,690
request to a server you retrieve a

00:35:22,040 --> 00:35:25,010
resource and you think right well

00:35:23,690 --> 00:35:27,200
actually I want to get messages so I

00:35:25,010 --> 00:35:28,820
want to go off and find the messages the

00:35:27,200 --> 00:35:30,140
straightaway so you immediately make a

00:35:28,820 --> 00:35:32,390
second request to the server to pull

00:35:30,140 --> 00:35:34,370
back the messages so that's two HTTP

00:35:32,390 --> 00:35:35,300
requests that we didn't necessarily need

00:35:34,370 --> 00:35:37,910
to make because I could have gone

00:35:35,300 --> 00:35:41,380
straight there and there's a way of

00:35:37,910 --> 00:35:44,060
getting around this this is called

00:35:41,380 --> 00:35:48,820
zum-zum pattern or the hypertext cache

00:35:44,060 --> 00:35:52,040
pattern and it looks a bit like this

00:35:48,820 --> 00:35:55,220
this is a high representation again I've

00:35:52,040 --> 00:35:56,640
provided two links again one to one one

00:35:55,220 --> 00:35:58,230
to the current document

00:35:56,640 --> 00:36:01,380
and one two all the messages this is

00:35:58,230 --> 00:36:04,070
going back to my example of the micro

00:36:01,380 --> 00:36:04,070
blogging platform

00:36:04,380 --> 00:36:08,640
I provided messages as a link so if you

00:36:07,200 --> 00:36:12,410
want to get all messages that are my

00:36:08,640 --> 00:36:12,410
messages you follow that link there

00:36:12,740 --> 00:36:16,859
however what I've done inside the the

00:36:15,359 --> 00:36:19,410
query string is I've specified what I

00:36:16,859 --> 00:36:20,700
want what link what link relation I want

00:36:19,410 --> 00:36:24,780
to zoom in on the bit that I'm

00:36:20,700 --> 00:36:27,089
interested in the messages itself

00:36:24,780 --> 00:36:28,950
so rather than making initial requests

00:36:27,089 --> 00:36:32,430
just to get the link and in following

00:36:28,950 --> 00:36:34,740
that link relation what I've done here

00:36:32,430 --> 00:36:36,900
is specified well get me that and get me

00:36:34,740 --> 00:36:39,450
the resource but go ahead and zoom in on

00:36:36,900 --> 00:36:41,730
the messages one so that I get ala date

00:36:39,450 --> 00:36:44,760
so that I'm looking for immediately and

00:36:41,730 --> 00:36:46,320
what happens is that this is the this is

00:36:44,760 --> 00:36:48,720
the the beneficial thing about being

00:36:46,320 --> 00:36:51,770
able to using a hyper media format that

00:36:48,720 --> 00:36:54,359
supports neo to embed other resources

00:36:51,770 --> 00:36:55,680
the messages will appear in that one

00:36:54,359 --> 00:36:58,950
resource so I can get everything I'm

00:36:55,680 --> 00:37:06,140
looking for from my API just by doing

00:36:58,950 --> 00:37:09,330
one one HTTP request and if you do this

00:37:06,140 --> 00:37:14,820
you're hitting one of the one of the

00:37:09,330 --> 00:37:16,560
many constraints and guides that were

00:37:14,820 --> 00:37:19,740
put together for therefore restful web

00:37:16,560 --> 00:37:21,690
services using a common interface to be

00:37:19,740 --> 00:37:25,080
able to using a comment phase to be able

00:37:21,690 --> 00:37:28,290
to talk to any API there's created using

00:37:25,080 --> 00:37:31,410
the register link relations will enable

00:37:28,290 --> 00:37:33,450
the web to hopefully become more usable

00:37:31,410 --> 00:37:35,910
with hopefully a lender to becoming

00:37:33,450 --> 00:37:37,800
better for developers to be able to use

00:37:35,910 --> 00:37:39,869
less painful every time you want to

00:37:37,800 --> 00:37:41,640
implement an API you'll be able to talk

00:37:39,869 --> 00:37:44,099
to multiple different services using the

00:37:41,640 --> 00:37:45,800
same format so there's not thousands of

00:37:44,099 --> 00:37:50,640
different ways of doing it any more and

00:37:45,800 --> 00:37:57,740
if you can do that then everything will

00:37:50,640 --> 00:38:07,520
just be better um and that's it

00:37:57,740 --> 00:38:17,260
thank you very much do you have any

00:38:07,520 --> 00:38:17,260
questions I've got a question over here

00:38:23,690 --> 00:38:29,809
hello how do you handle first an update

00:38:27,530 --> 00:38:31,460
so if you have a new version of the API

00:38:29,809 --> 00:38:33,680
what would you do

00:38:31,460 --> 00:38:37,059
um that's the question that gets asked

00:38:33,680 --> 00:38:39,859
quite a lot actually um if I was being

00:38:37,059 --> 00:38:43,430
okay so if I was being really purist

00:38:39,859 --> 00:38:44,900
about it I would say don't version the

00:38:43,430 --> 00:38:46,490
reason I say that is because if you can

00:38:44,900 --> 00:38:49,039
use something that are a liar API to be

00:38:46,490 --> 00:38:50,750
to evolve you shouldn't need to break

00:38:49,039 --> 00:38:52,400
backwards-compatibility to a point where

00:38:50,750 --> 00:38:56,000
clients don't understand the new version

00:38:52,400 --> 00:38:58,220
they shouldn't break if you do need to

00:38:56,000 --> 00:38:59,720
do that the one of the best ways

00:38:58,220 --> 00:39:02,150
currently of doing it and this stuff

00:38:59,720 --> 00:39:03,559
moves on all the time and changes as you

00:39:02,150 --> 00:39:05,329
beep but people are working on these

00:39:03,559 --> 00:39:07,190
things and this stuff all the time so

00:39:05,329 --> 00:39:09,470
the recommendations change but the

00:39:07,190 --> 00:39:11,690
current best way and agreed the best way

00:39:09,470 --> 00:39:14,180
of versioning is actually use different

00:39:11,690 --> 00:39:17,059
link relations so you say well this link

00:39:14,180 --> 00:39:19,280
relation is version one of this resource

00:39:17,059 --> 00:39:21,530
and you can provide another link a

00:39:19,280 --> 00:39:23,750
different link relation to specify the

00:39:21,530 --> 00:39:27,799
version 2 of that different resource and

00:39:23,750 --> 00:39:31,940
you do that just using yeah just yeah

00:39:27,799 --> 00:39:35,720
just using just using those versions one

00:39:31,940 --> 00:39:37,250
thing to avoid is using the URL try not

00:39:35,720 --> 00:39:39,260
to put version numbers inside the URL

00:39:37,250 --> 00:39:42,609
because it is the same resource it's

00:39:39,260 --> 00:39:42,609
just the representation that's changed

00:39:44,980 --> 00:39:50,450
just a short question how do you handle

00:39:48,250 --> 00:39:53,089
authentication you know in this model

00:39:50,450 --> 00:39:57,470
like for instance if we if we have a

00:39:53,089 --> 00:40:02,150
system that needs to recognize certain

00:39:57,470 --> 00:40:05,150
user and you know this all kind of this

00:40:02,150 --> 00:40:09,650
whole thing about sessions that we are

00:40:05,150 --> 00:40:11,270
used so much in the web yeah HTTP comes

00:40:09,650 --> 00:40:13,130
with the kind of basic and digest

00:40:11,270 --> 00:40:15,829
authentication which can be used for

00:40:13,130 --> 00:40:17,440
kind of simple off you can identify

00:40:15,829 --> 00:40:19,279
users and just include the the

00:40:17,440 --> 00:40:21,200
authentication header with every single

00:40:19,279 --> 00:40:23,240
request if you need to go a little bit

00:40:21,200 --> 00:40:26,000
deeper than that you've got things like

00:40:23,240 --> 00:40:29,119
standards like or off which people use

00:40:26,000 --> 00:40:31,130
quite a lot in order to get a token and

00:40:29,119 --> 00:40:33,740
you just identify with every single with

00:40:31,130 --> 00:40:36,309
every require or with every request and

00:40:33,740 --> 00:40:40,910
just carry on understood like that

00:40:36,309 --> 00:40:47,059
yeah there's one down here at the front

00:40:40,910 --> 00:40:48,619
oh it's just a bit of a follow up on the

00:40:47,059 --> 00:40:50,989
orphans question contents case in

00:40:48,619 --> 00:40:52,910
question obviously rests on rest

00:40:50,989 --> 00:40:55,880
services are quite cash friendly but

00:40:52,910 --> 00:40:58,369
often resources can change the Ling's

00:40:55,880 --> 00:41:00,049
they have depending on your how how you

00:40:58,369 --> 00:41:01,849
authenticate it yeah so how did you come

00:41:00,049 --> 00:41:06,140
for how to get around that problem with

00:41:01,849 --> 00:41:07,940
the cash when you get into using using

00:41:06,140 --> 00:41:10,759
Cash's you can vary on various different

00:41:07,940 --> 00:41:13,819
headers so as long as you've got the

00:41:10,759 --> 00:41:15,559
cashing stuff set up correctly you can

00:41:13,819 --> 00:41:17,989
you can vary on on different

00:41:15,559 --> 00:41:20,569
characteristics of a request so you can

00:41:17,989 --> 00:41:22,369
say I want to I want to not cash this if

00:41:20,569 --> 00:41:24,769
one of these particular headers is

00:41:22,369 --> 00:41:25,970
different a lot of the time when you get

00:41:24,769 --> 00:41:27,680
into things that are authenticated

00:41:25,970 --> 00:41:32,059
requests you can only cash the ones that

00:41:27,680 --> 00:41:33,049
are the user just a single user cash you

00:41:32,059 --> 00:41:36,229
don't necessarily want to be able to

00:41:33,049 --> 00:41:38,930
share that information you can start to

00:41:36,229 --> 00:41:41,170
get into things like using proxy stage

00:41:38,930 --> 00:41:44,059
site includes and using varnish to pull

00:41:41,170 --> 00:41:46,519
common bits of data and pull those

00:41:44,059 --> 00:41:48,859
things together and that works quite

00:41:46,519 --> 00:41:50,779
well but yeah you do have a problem when

00:41:48,859 --> 00:41:53,150
when you're when your service is purely

00:41:50,779 --> 00:41:54,950
authenticated only you do want to cache

00:41:53,150 --> 00:41:58,099
things because the representations are

00:41:54,950 --> 00:41:59,239
different for every single user yeah

00:41:58,099 --> 00:42:00,940
there's a few different ways of doing

00:41:59,239 --> 00:42:04,450
that but the very the very header

00:42:00,940 --> 00:42:07,249
alongside alongside your representations

00:42:04,450 --> 00:42:10,450
allows you to differ caches based on

00:42:07,249 --> 00:42:10,450
based on the contents of that

00:42:17,010 --> 00:42:22,660
hi is it possible to use things like

00:42:19,809 --> 00:42:27,099
WebSockets or HTTP streaming in

00:42:22,660 --> 00:42:30,160
hypermedia api yeah you can't well one

00:42:27,099 --> 00:42:31,480
of the things that you can do with with

00:42:30,160 --> 00:42:33,760
with hyper media one of the rest

00:42:31,480 --> 00:42:37,930
constraints is being able to one of the

00:42:33,760 --> 00:42:40,270
constraints is to actually push code

00:42:37,930 --> 00:42:42,369
down to a client it allows you to do

00:42:40,270 --> 00:42:44,319
that so things like using JavaScript you

00:42:42,369 --> 00:42:45,849
can push bar JavaScript down the wire to

00:42:44,319 --> 00:42:48,339
a client and get it to initiate a

00:42:45,849 --> 00:42:49,359
WebSockets connection that's usually

00:42:48,339 --> 00:42:52,000
just something that happens when the web

00:42:49,359 --> 00:42:54,339
and is very much an html5 feature I

00:42:52,000 --> 00:42:56,410
guess it's possible to use rest over

00:42:54,339 --> 00:43:03,190
WebSockets but I don't think that's ever

00:42:56,410 --> 00:43:05,940
happened WebSocket is more of a protocol

00:43:03,190 --> 00:43:05,940
rather than a style

00:43:08,650 --> 00:43:15,720
anymore okay I think we're done

00:43:12,910 --> 00:43:15,720
thank you very much

00:43:24,410 --> 00:43:26,470

YouTube URL: https://www.youtube.com/watch?v=eyiwSePBMUM


