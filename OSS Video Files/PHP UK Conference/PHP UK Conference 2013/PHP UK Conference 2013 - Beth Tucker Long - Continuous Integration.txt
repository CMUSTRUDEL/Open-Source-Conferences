Title: PHP UK Conference 2013 - Beth Tucker Long - Continuous Integration
Publication date: 2013-04-29
Playlist: PHP UK Conference 2013
Description: 
	Continuous integration is a big picture idea for big projects, but what if your projects and pictures aren't big? Is continuous integration worthwhile for every day projects? Learn more about what continuous integration actually is, what tools are available to help you implement it, and how you can make it work for you, even in the small stuff.

Slides: http://www.treelinedesign.com/slides/
Captions: 
	00:00:13,940 --> 00:00:18,750
so Who am I

00:00:16,139 --> 00:00:20,789
I am Beth Tucker Leung I am III Beth T

00:00:18,750 --> 00:00:22,830
on Twitter you can find me there I'm the

00:00:20,789 --> 00:00:25,529
editor in chief of PHP architect

00:00:22,830 --> 00:00:26,970
magazine if you've ever thought about

00:00:25,529 --> 00:00:28,260
writing for the magazine or if you've

00:00:26,970 --> 00:00:29,640
never heard of the magazine you should

00:00:28,260 --> 00:00:30,990
come and talk to me because I would love

00:00:29,640 --> 00:00:33,239
to help you get started with the

00:00:30,990 --> 00:00:34,710
technical writing or introduce you to

00:00:33,239 --> 00:00:36,809
the magazine with some free issues I

00:00:34,710 --> 00:00:39,120
also teach PHP courses and I'm a

00:00:36,809 --> 00:00:40,920
freelance consultant and I'm crazy

00:00:39,120 --> 00:00:42,059
nervous right now because I didn't know

00:00:40,920 --> 00:00:46,530
I was speaking until about five minutes

00:00:42,059 --> 00:00:48,629
ago so bear with me so audience

00:00:46,530 --> 00:00:50,370
participation I will stare here

00:00:48,629 --> 00:00:52,440
awkwardly at you until someone answers

00:00:50,370 --> 00:00:56,129
so do us all a favor and pipe up right

00:00:52,440 --> 00:00:58,410
away so what is continuous integration

00:00:56,129 --> 00:00:59,550
continuous integration when I first

00:00:58,410 --> 00:01:01,680
started learning about it was something

00:00:59,550 --> 00:01:03,750
I heard about with gigantic corporations

00:01:01,680 --> 00:01:05,400
with 300 developers spread all over the

00:01:03,750 --> 00:01:07,680
world and they were using continuous

00:01:05,400 --> 00:01:09,720
integration so I thought oh well I'm a

00:01:07,680 --> 00:01:11,990
freelance consultant it's just me

00:01:09,720 --> 00:01:15,330
usually I don't need to learn about that

00:01:11,990 --> 00:01:17,520
but later on I realized oh my gosh it's

00:01:15,330 --> 00:01:19,710
amazing it's awesome and there's a lot

00:01:17,520 --> 00:01:21,840
of things that I can use as well so

00:01:19,710 --> 00:01:24,810
let's start out with what exactly is it

00:01:21,840 --> 00:01:27,420
now the obligatory Wikipedia quote so

00:01:24,810 --> 00:01:29,220
continuous integration is a very

00:01:27,420 --> 00:01:31,860
technical thing it's a theory of

00:01:29,220 --> 00:01:33,180
development and so what you try to do is

00:01:31,860 --> 00:01:35,009
you're trying to improve the quality of

00:01:33,180 --> 00:01:37,170
software by replacing the traditional

00:01:35,009 --> 00:01:39,990
practice of applying quality control

00:01:37,170 --> 00:01:41,670
after completing all development so what

00:01:39,990 --> 00:01:46,350
we want to do is take our old way of

00:01:41,670 --> 00:01:48,420
doing things and replace it so that

00:01:46,350 --> 00:01:50,579
definition was only mildly helpful so I

00:01:48,420 --> 00:01:51,930
kept looking and I came across Martin

00:01:50,579 --> 00:01:53,670
Fowler who has been talking about

00:01:51,930 --> 00:01:56,759
continuous integration for about ten

00:01:53,670 --> 00:01:58,920
years now and he has a lot of great

00:01:56,759 --> 00:02:02,250
resources and I do have my slides posted

00:01:58,920 --> 00:02:04,500
online as well so that's why I have a

00:02:02,250 --> 00:02:05,430
lot of links in these slides it's not so

00:02:04,500 --> 00:02:06,810
you have to try to write them all down

00:02:05,430 --> 00:02:09,239
now it's so you can look at them later

00:02:06,810 --> 00:02:10,560
if you'd like but Martin has some great

00:02:09,239 --> 00:02:13,480
articles about continuous integration

00:02:10,560 --> 00:02:15,780
and how to implement it and he

00:02:13,480 --> 00:02:18,269
defiance continuous integration with

00:02:15,780 --> 00:02:20,849
having a team integrate work frequently

00:02:18,269 --> 00:02:23,140
usually multiple integrations per day

00:02:20,849 --> 00:02:25,720
automating the build including testing

00:02:23,140 --> 00:02:27,940
and we want to integrate and test and

00:02:25,720 --> 00:02:30,310
detect errors and fix them as quickly as

00:02:27,940 --> 00:02:34,540
possible so it's trying to speed up and

00:02:30,310 --> 00:02:36,340
make things more efficient so taking a

00:02:34,540 --> 00:02:38,500
look at this when I first started was

00:02:36,340 --> 00:02:40,030
okay the first step is you have to

00:02:38,500 --> 00:02:41,799
integrate your work frequently okay

00:02:40,030 --> 00:02:43,540
that's not too hard of a change I can do

00:02:41,799 --> 00:02:45,430
that in my development that's not

00:02:43,540 --> 00:02:48,750
something just for big corporations so I

00:02:45,430 --> 00:02:50,799
can start integrating more frequently

00:02:48,750 --> 00:02:53,700
but then the second step in his

00:02:50,799 --> 00:02:55,690
definition was automating the build and

00:02:53,700 --> 00:02:58,000
detecting errors and things as quickly

00:02:55,690 --> 00:02:59,680
as possible in an automated fashion now

00:02:58,000 --> 00:03:01,540
as a freelance consultant nothing that I

00:02:59,680 --> 00:03:02,230
did was automated I did everything

00:03:01,540 --> 00:03:05,410
myself

00:03:02,230 --> 00:03:07,930
all by hand and obviously that's not as

00:03:05,410 --> 00:03:10,410
efficient so what we want to do is

00:03:07,930 --> 00:03:12,819
figure out how to automate the process

00:03:10,410 --> 00:03:14,500
now before I could start automating the

00:03:12,819 --> 00:03:17,410
process I needed to take a look at my

00:03:14,500 --> 00:03:19,720
code quality so writing quality code

00:03:17,410 --> 00:03:23,410
makes it easier to test and ultimately

00:03:19,720 --> 00:03:25,150
easier to code now how many of you have

00:03:23,410 --> 00:03:27,099
taken a look at code you wrote two years

00:03:25,150 --> 00:03:28,840
ago or maybe even two weeks ago and

00:03:27,099 --> 00:03:31,290
you're really embarrassed and you don't

00:03:28,840 --> 00:03:35,200
ever want anyone to see that code okay

00:03:31,290 --> 00:03:37,750
all right so having a coding standard

00:03:35,200 --> 00:03:39,160
can improve your code quality but it

00:03:37,750 --> 00:03:41,019
also makes it easier to share your code

00:03:39,160 --> 00:03:43,690
because now your code follows a specific

00:03:41,019 --> 00:03:45,639
standard it's very clean it's easy to

00:03:43,690 --> 00:03:50,650
read and it's easier for other people to

00:03:45,639 --> 00:03:53,139
read so I took a look at some coding

00:03:50,650 --> 00:03:55,120
standards and I looked at pair and pair

00:03:53,139 --> 00:03:56,349
two and there's also a PHP standards

00:03:55,120 --> 00:03:57,819
working group if you want more

00:03:56,349 --> 00:04:01,690
information about standards that are out

00:03:57,819 --> 00:04:03,069
there and so I picked a standard now if

00:04:01,690 --> 00:04:04,930
you're working on a project with a team

00:04:03,069 --> 00:04:07,239
you should all pick the same standard

00:04:04,930 --> 00:04:08,109
but as a freelance consultant I usually

00:04:07,239 --> 00:04:10,389
work by myself

00:04:08,109 --> 00:04:12,250
so I just picked a pair because it was

00:04:10,389 --> 00:04:14,949
most closely related to what I was

00:04:12,250 --> 00:04:17,889
already doing now the pair coding

00:04:14,949 --> 00:04:19,690
standard is pretty expansive and it's

00:04:17,889 --> 00:04:22,719
very picky which is really really

00:04:19,690 --> 00:04:24,310
painful at first so getting started with

00:04:22,719 --> 00:04:27,280
the coding standard is very painful I

00:04:24,310 --> 00:04:29,020
won't lie but as you get used to it

00:04:27,280 --> 00:04:32,170
it becomes second-nature and becomes so

00:04:29,020 --> 00:04:35,260
much easier to do so what kind of things

00:04:32,170 --> 00:04:36,550
are in a coding standard well in the

00:04:35,260 --> 00:04:39,340
pair coding standard they have things

00:04:36,550 --> 00:04:40,960
like indenting for spaces okay that

00:04:39,340 --> 00:04:43,300
might seem like a nitpicky little thing

00:04:40,960 --> 00:04:45,010
but having consistent indenting

00:04:43,300 --> 00:04:47,350
throughout everything makes it a lot

00:04:45,010 --> 00:04:49,360
easier to read and follow it has

00:04:47,350 --> 00:04:51,280
different things like your control

00:04:49,360 --> 00:04:52,840
structures so you have if and then

00:04:51,280 --> 00:04:55,419
there's a space and then your

00:04:52,840 --> 00:04:56,880
parentheses for the condition and so

00:04:55,419 --> 00:04:58,750
there's a space between the if in the

00:04:56,880 --> 00:05:01,210
parentheses which is not something that

00:04:58,750 --> 00:05:02,680
PHP requires but what it does is it

00:05:01,210 --> 00:05:04,300
makes it really easy to scan through the

00:05:02,680 --> 00:05:06,130
code and see which one's our control

00:05:04,300 --> 00:05:07,390
structures and which ones are function

00:05:06,130 --> 00:05:09,490
names because there won't be a space

00:05:07,390 --> 00:05:13,000
with a function so it does make it

00:05:09,490 --> 00:05:15,940
easier to read in the long run so like I

00:05:13,000 --> 00:05:17,830
said a lot of nitpicky little things now

00:05:15,940 --> 00:05:19,660
if you don't like the standards that are

00:05:17,830 --> 00:05:22,360
out there or if your team has to do

00:05:19,660 --> 00:05:23,860
something that doesn't fit into one of

00:05:22,360 --> 00:05:26,320
the standards that are out there you can

00:05:23,860 --> 00:05:28,840
build your own custom standard it's very

00:05:26,320 --> 00:05:31,180
difficult to make it broad enough but

00:05:28,840 --> 00:05:33,760
still strict enough to cover everything

00:05:31,180 --> 00:05:36,370
and you want it to be flexible enough

00:05:33,760 --> 00:05:37,750
that it's not making people it's not

00:05:36,370 --> 00:05:39,790
making it harder for people to develop

00:05:37,750 --> 00:05:42,550
you want it to be easier for people to

00:05:39,790 --> 00:05:47,050
develop so make sure your standard is

00:05:42,550 --> 00:05:48,430
strict but flexible and what you can do

00:05:47,050 --> 00:05:50,289
too is base it on one of the existing

00:05:48,430 --> 00:05:53,890
standards and you can just customize the

00:05:50,289 --> 00:05:55,419
pieces that you need so once you're

00:05:53,890 --> 00:05:57,520
using your standard there's a tool

00:05:55,419 --> 00:05:59,919
called code sniffer our PHP code sniffer

00:05:57,520 --> 00:06:02,169
a part of me that can help tell if you

00:05:59,919 --> 00:06:04,210
are following your standard or not so

00:06:02,169 --> 00:06:05,440
what this does is it goes through scans

00:06:04,210 --> 00:06:07,120
your code and then gives you a readout

00:06:05,440 --> 00:06:09,220
of all of these things that you're

00:06:07,120 --> 00:06:12,370
missing or that you've done incorrectly

00:06:09,220 --> 00:06:14,380
on PHP code sniffer does allow you to

00:06:12,370 --> 00:06:16,450
use a custom standard as well so you can

00:06:14,380 --> 00:06:19,750
customize it even to match your custom

00:06:16,450 --> 00:06:20,800
standard if you build your own so it's

00:06:19,750 --> 00:06:21,520
going to give you some output that looks

00:06:20,800 --> 00:06:23,820
like this

00:06:21,520 --> 00:06:26,020
so you can see I ran it on a file and

00:06:23,820 --> 00:06:27,910
with code sniffer you can run it on a

00:06:26,020 --> 00:06:30,370
single file or an entire directory all

00:06:27,910 --> 00:06:33,039
at once so very flexible on how you run

00:06:30,370 --> 00:06:35,650
it and here you can see we're missing

00:06:33,039 --> 00:06:37,780
the file comment PHP keywords must be

00:06:35,650 --> 00:06:39,550
lower click lower case expected false

00:06:37,780 --> 00:06:41,060
but found false so it does give you a

00:06:39,550 --> 00:06:43,130
lot of information about

00:06:41,060 --> 00:06:45,410
what's wrong what you need to change and

00:06:43,130 --> 00:06:47,090
where to find it so when you first start

00:06:45,410 --> 00:06:49,670
running this you'll probably end up with

00:06:47,090 --> 00:06:51,410
a really long report but as you get used

00:06:49,670 --> 00:06:52,990
to the standard these reports become

00:06:51,410 --> 00:06:55,670
smaller and smaller

00:06:52,990 --> 00:06:57,380
okay so now we have our code quality and

00:06:55,670 --> 00:07:00,380
we have a tool to help us automate

00:06:57,380 --> 00:07:02,780
checking the code quality so now let's

00:07:00,380 --> 00:07:05,960
talk about testing the actual code okay

00:07:02,780 --> 00:07:07,550
so obviously if the code looks nice

00:07:05,960 --> 00:07:09,320
that's great but if it doesn't work it

00:07:07,550 --> 00:07:11,000
doesn't do us any good so we need some

00:07:09,320 --> 00:07:13,820
tests to actually tell if the code is

00:07:11,000 --> 00:07:15,440
doing what it's supposed to do now part

00:07:13,820 --> 00:07:18,170
of continuous integration is automating

00:07:15,440 --> 00:07:20,420
the testing now before this as a

00:07:18,170 --> 00:07:21,920
freelancer I was just you know oh I'd go

00:07:20,420 --> 00:07:23,090
through and click a few links and check

00:07:21,920 --> 00:07:26,720
if it was working or something like that

00:07:23,090 --> 00:07:28,640
totally not automated but having unit

00:07:26,720 --> 00:07:30,710
tests in place allows you to automate

00:07:28,640 --> 00:07:32,030
your testing not that I'm saying you

00:07:30,710 --> 00:07:33,860
shouldn't still go check your code once

00:07:32,030 --> 00:07:35,870
in a while always good to have a second

00:07:33,860 --> 00:07:37,940
look but having the automated tests is

00:07:35,870 --> 00:07:39,400
significantly faster than you having to

00:07:37,940 --> 00:07:42,950
go through and check everything by hand

00:07:39,400 --> 00:07:45,170
with a large application and to have a

00:07:42,950 --> 00:07:47,360
human go in and check every single thing

00:07:45,170 --> 00:07:48,890
could take hours your unit tests you can

00:07:47,360 --> 00:07:51,290
run in a matter of minutes and know if

00:07:48,890 --> 00:07:54,350
something's wrong so what exactly is a

00:07:51,290 --> 00:07:55,760
unit test well let's start with a unit a

00:07:54,350 --> 00:07:58,070
unit is going to be the smallest piece

00:07:55,760 --> 00:07:59,960
of code that does one thing and it's

00:07:58,070 --> 00:08:02,210
very important that you find that

00:07:59,960 --> 00:08:04,280
smallest bit that does a single thing

00:08:02,210 --> 00:08:06,200
because what we don't want to happen is

00:08:04,280 --> 00:08:09,770
when you run your unit test and it fails

00:08:06,200 --> 00:08:11,780
we want to know exactly what failed okay

00:08:09,770 --> 00:08:13,580
we might not know why it failed but we

00:08:11,780 --> 00:08:14,870
want to know what failed and if you have

00:08:13,580 --> 00:08:18,140
to do some more investigating to find

00:08:14,870 --> 00:08:20,390
out what part failed then your unit test

00:08:18,140 --> 00:08:22,460
is too big it's covering too many things

00:08:20,390 --> 00:08:24,740
so you want to break it down to that

00:08:22,460 --> 00:08:27,770
smallest thing that it does so for

00:08:24,740 --> 00:08:30,440
instance if you have let's say a form

00:08:27,770 --> 00:08:31,940
and it sends in data and you check all

00:08:30,440 --> 00:08:33,410
the form data and then you write it to a

00:08:31,940 --> 00:08:34,910
database okay

00:08:33,410 --> 00:08:37,310
the smallest thing that it might do

00:08:34,910 --> 00:08:40,280
there is validating one of the fields

00:08:37,310 --> 00:08:43,130
okay that validation to check the string

00:08:40,280 --> 00:08:44,660
length perhaps so what you want to do is

00:08:43,130 --> 00:08:47,660
make sure like I said that it's only

00:08:44,660 --> 00:08:49,790
testing one thing now a unit test is

00:08:47,660 --> 00:08:52,070
going to be a piece of code and it

00:08:49,790 --> 00:08:54,860
doesn't have to be very big but it's a

00:08:52,070 --> 00:08:56,149
piece of code that can help you test

00:08:54,860 --> 00:08:58,310
to make sure that that one thing is

00:08:56,149 --> 00:09:00,620
working we also want to make sure our

00:08:58,310 --> 00:09:03,350
tests are efficient so that we can run

00:09:00,620 --> 00:09:04,970
them often and frequently and we want to

00:09:03,350 --> 00:09:07,130
make sure that our tests do not depend

00:09:04,970 --> 00:09:08,839
up on each other because again when that

00:09:07,130 --> 00:09:11,959
test fails you don't want to have to do

00:09:08,839 --> 00:09:14,209
more testing to find out what failed and

00:09:11,959 --> 00:09:15,920
if your tests depend upon each other

00:09:14,209 --> 00:09:18,019
then you have to figure out which test

00:09:15,920 --> 00:09:23,120
is causing the failure so each of your

00:09:18,019 --> 00:09:25,250
tests should be able to run by itself so

00:09:23,120 --> 00:09:26,540
here's a function to validate a name it

00:09:25,250 --> 00:09:27,860
just does a couple of things to check

00:09:26,540 --> 00:09:29,240
the string length and it just checks

00:09:27,860 --> 00:09:31,250
some characters to see what kind of

00:09:29,240 --> 00:09:33,620
characters are being passed in okay so a

00:09:31,250 --> 00:09:35,959
pretty basic function so but we have 13

00:09:33,620 --> 00:09:37,670
lines of code for the function and my

00:09:35,959 --> 00:09:39,470
unit test here is just a single line of

00:09:37,670 --> 00:09:42,230
code it's a single assert statement and

00:09:39,470 --> 00:09:44,600
all it does is it checks it sends in

00:09:42,230 --> 00:09:48,410
what should be a valid name and it

00:09:44,600 --> 00:09:50,390
checks if it fails so unit testing

00:09:48,410 --> 00:09:52,070
doesn't have to be super complicated it

00:09:50,390 --> 00:09:53,990
doesn't have to take a lot of time it

00:09:52,070 --> 00:09:55,940
can be something that you can easily

00:09:53,990 --> 00:10:01,010
write in a single line just to get

00:09:55,940 --> 00:10:02,899
started so how many tests do you have to

00:10:01,010 --> 00:10:04,880
write what depends how many things does

00:10:02,899 --> 00:10:07,670
your code do you want to have a test for

00:10:04,880 --> 00:10:09,050
everything your code does so if your

00:10:07,670 --> 00:10:10,339
codes doing a lot of different things

00:10:09,050 --> 00:10:13,880
you're going to need a lot of different

00:10:10,339 --> 00:10:15,709
tests so there's no one right answer for

00:10:13,880 --> 00:10:17,390
how many tests you need because it

00:10:15,709 --> 00:10:20,360
really depends on how many things your

00:10:17,390 --> 00:10:22,610
coding is doing so if we're writing

00:10:20,360 --> 00:10:24,260
these unit tests obviously our goal is

00:10:22,610 --> 00:10:25,910
automation in order to automate our

00:10:24,260 --> 00:10:28,699
tests we need them to be standardized

00:10:25,910 --> 00:10:30,740
and so you can use a testing framework

00:10:28,699 --> 00:10:32,690
the testing framework is going to give

00:10:30,740 --> 00:10:35,360
you a format to do your user your unit

00:10:32,690 --> 00:10:37,190
tests in which sounds really annoying at

00:10:35,360 --> 00:10:38,959
first but actually makes them faster to

00:10:37,190 --> 00:10:40,339
write as you go on because you don't

00:10:38,959 --> 00:10:42,140
have to think about how to structure it

00:10:40,339 --> 00:10:44,720
it's already put in place and you just

00:10:42,140 --> 00:10:46,490
have to fill in your information testing

00:10:44,720 --> 00:10:49,040
framework also allows you to easily run

00:10:46,490 --> 00:10:51,110
all of your tests so then you can just

00:10:49,040 --> 00:10:52,640
click a button in your testing framework

00:10:51,110 --> 00:10:55,130
and there they go and you have the

00:10:52,640 --> 00:10:57,260
results easy to analyze you get reports

00:10:55,130 --> 00:11:01,760
back so testing frameworks can be really

00:10:57,260 --> 00:11:03,770
very helpful if you search for PHP and

00:11:01,760 --> 00:11:05,630
unit tests you'll come up with PHP unit

00:11:03,770 --> 00:11:07,130
I guarantee you there are a ton of

00:11:05,630 --> 00:11:08,540
resources out there lots of good

00:11:07,130 --> 00:11:09,920
documentation

00:11:08,540 --> 00:11:12,830
this is a testing framework that you can

00:11:09,920 --> 00:11:14,330
use it's integrated with tons and tons

00:11:12,830 --> 00:11:17,120
of the popular continuous integration

00:11:14,330 --> 00:11:20,570
tools it's integrated with a lot of

00:11:17,120 --> 00:11:22,280
different development tools as well but

00:11:20,570 --> 00:11:24,890
one disadvantage here is at its command

00:11:22,280 --> 00:11:26,720
line only and in my line of work I do

00:11:24,890 --> 00:11:29,210
the front end as well as the back end

00:11:26,720 --> 00:11:32,960
coding and so I need something that can

00:11:29,210 --> 00:11:34,280
also do front-end coding so there's a

00:11:32,960 --> 00:11:37,400
couple of tools that will help you with

00:11:34,280 --> 00:11:39,200
that as well simple test is one one nice

00:11:37,400 --> 00:11:41,390
thing about simple test is as its name

00:11:39,200 --> 00:11:43,760
implies it's very simple it's about a

00:11:41,390 --> 00:11:46,100
two minutes to get it set up and you can

00:11:43,760 --> 00:11:48,020
start testing and it has a front end

00:11:46,100 --> 00:11:49,850
capability so it will test the front end

00:11:48,020 --> 00:11:52,460
as well so you can actually do things

00:11:49,850 --> 00:11:53,900
like test submitting a form and leaving

00:11:52,460 --> 00:11:55,670
a field blank and making sure the

00:11:53,900 --> 00:11:56,810
correct error message is appearing so

00:11:55,670 --> 00:12:00,200
you can be very specific with your

00:11:56,810 --> 00:12:02,060
testing one disadvantage of simple test

00:12:00,200 --> 00:12:04,220
is it's not as integrated as PHP unit

00:12:02,060 --> 00:12:07,580
but it's still integrated with all of

00:12:04,220 --> 00:12:10,220
the tools I'm discussing today another

00:12:07,580 --> 00:12:12,260
great tool is selenium it's a little bit

00:12:10,220 --> 00:12:16,010
more complicated than simple tests but

00:12:12,260 --> 00:12:19,190
it does a lot more so it is very fully

00:12:16,010 --> 00:12:21,350
featured so and also it has a great

00:12:19,190 --> 00:12:24,050
thing called webdriver which will

00:12:21,350 --> 00:12:25,010
actually do the testing in each browsers

00:12:24,050 --> 00:12:26,690
native

00:12:25,010 --> 00:12:28,640
I'm using each browsers native support

00:12:26,690 --> 00:12:31,100
so you're actually Kontest

00:12:28,640 --> 00:12:32,840
different browsers using the

00:12:31,100 --> 00:12:36,500
functionality as well so you can

00:12:32,840 --> 00:12:39,620
actually automate quite a bit it's not a

00:12:36,500 --> 00:12:41,480
native PHP tool but there are lots of

00:12:39,620 --> 00:12:45,620
different tools to help you integrate it

00:12:41,480 --> 00:12:50,900
with PHP projects and mmm PHP specific

00:12:45,620 --> 00:12:53,300
tools okay so now we have our code is

00:12:50,900 --> 00:12:55,250
cleaned up we are checking to make sure

00:12:53,300 --> 00:12:56,900
our code is following the standard we've

00:12:55,250 --> 00:12:59,000
written our tests and we've automated

00:12:56,900 --> 00:13:01,340
our testing now we're up to the build

00:12:59,000 --> 00:13:03,860
okay now I don't know about you guys but

00:13:01,340 --> 00:13:05,420
my build process used to be a giant

00:13:03,860 --> 00:13:08,060
whiteboard with sticky notes on it

00:13:05,420 --> 00:13:09,620
telling me okay move these files here

00:13:08,060 --> 00:13:12,200
clear the cache here do this to the

00:13:09,620 --> 00:13:13,490
database and then it's live okay now

00:13:12,200 --> 00:13:15,410
that I have a three year old and four

00:13:13,490 --> 00:13:17,870
cats sticky notes don't work anymore

00:13:15,410 --> 00:13:19,970
so automating the build sounded

00:13:17,870 --> 00:13:22,579
wonderful to me I would love to write it

00:13:19,970 --> 00:13:24,629
once and then just be able to run it

00:13:22,579 --> 00:13:26,519
so there's a couple of tools that can

00:13:24,629 --> 00:13:29,040
help you with that thing is the first

00:13:26,519 --> 00:13:31,709
one it's based on a pachi ant and it

00:13:29,040 --> 00:13:34,079
uses xml build files the nice thing

00:13:31,709 --> 00:13:36,540
about thing is the xml is very very

00:13:34,079 --> 00:13:39,509
readable so it's very easy to get

00:13:36,540 --> 00:13:41,790
started with thing also you can use PHP

00:13:39,509 --> 00:13:44,839
classes to extend your XML build files

00:13:41,790 --> 00:13:47,639
so you can actually use PHP as well and

00:13:44,839 --> 00:13:49,709
thing is incredibly well-documented and

00:13:47,639 --> 00:13:50,850
tons of people are using it so if

00:13:49,709 --> 00:13:52,649
there's something you want to do with

00:13:50,850 --> 00:13:54,389
thing you can probably just google it

00:13:52,649 --> 00:13:55,980
and you will find someone who's already

00:13:54,389 --> 00:13:58,829
written a nice build script and you can

00:13:55,980 --> 00:14:01,529
just borrow some of it so it's very very

00:13:58,829 --> 00:14:02,850
easy to get started it integrates with

00:14:01,529 --> 00:14:05,040
all of the other tools I've talked about

00:14:02,850 --> 00:14:07,259
so far and the nice thing too is it's

00:14:05,040 --> 00:14:09,059
platform independent so as a freelance

00:14:07,259 --> 00:14:10,619
consultant I never know what platform

00:14:09,059 --> 00:14:12,600
I'm gonna be working on next or who I'm

00:14:10,619 --> 00:14:14,069
gonna be working with so sometimes it's

00:14:12,600 --> 00:14:18,809
nice to have a platform independent

00:14:14,069 --> 00:14:20,399
project as well but it's always good to

00:14:18,809 --> 00:14:23,279
have more than one option so we also

00:14:20,399 --> 00:14:25,920
have maven now maven is a Java based

00:14:23,279 --> 00:14:28,439
project but I am NOT a Java programmer

00:14:25,920 --> 00:14:30,809
and I had no problems using it however

00:14:28,439 --> 00:14:33,629
to integrate it you'll need a plugin

00:14:30,809 --> 00:14:37,610
called maven for PHP and that will allow

00:14:33,629 --> 00:14:40,139
you to use maven with your PHP stuff

00:14:37,610 --> 00:14:41,939
maven has probably the largest library

00:14:40,139 --> 00:14:43,829
of third-party plugins I've ever seen

00:14:41,939 --> 00:14:46,259
there are hundreds of thousands of them

00:14:43,829 --> 00:14:50,279
so if you need to integrate it with

00:14:46,259 --> 00:14:52,230
anything you probably can so what does a

00:14:50,279 --> 00:14:53,850
build file look like this is a fing

00:14:52,230 --> 00:14:57,779
build file it's very simple

00:14:53,850 --> 00:14:58,980
yeah that's pretty readable never quite

00:14:57,779 --> 00:15:02,040
sure sometimes it looks a little too

00:14:58,980 --> 00:15:03,559
light or too small but so you can kind

00:15:02,040 --> 00:15:05,669
of see here we're going through and

00:15:03,559 --> 00:15:08,129
we're preparing a file so we're gonna

00:15:05,669 --> 00:15:09,869
create a directory called build then

00:15:08,129 --> 00:15:11,699
we're gonna copy some files into it and

00:15:09,869 --> 00:15:13,619
that's going to be our backup we're

00:15:11,699 --> 00:15:15,360
gonna tar it up and then we're gonna

00:15:13,619 --> 00:15:18,209
just display a message saying that

00:15:15,360 --> 00:15:20,189
everything's been done so file copied

00:15:18,209 --> 00:15:22,439
and compressed and build directory so

00:15:20,189 --> 00:15:25,169
you can kind of see pretty easy to read

00:15:22,439 --> 00:15:27,660
pretty straightforward and you can do a

00:15:25,169 --> 00:15:29,489
lot of very easy thing or a lot of very

00:15:27,660 --> 00:15:31,079
cool things with it for instance you can

00:15:29,489 --> 00:15:32,790
run database queries you can trigger

00:15:31,079 --> 00:15:35,129
cron jobs you can do all sorts of kinds

00:15:32,790 --> 00:15:37,250
of things with Fame so it can be very

00:15:35,129 --> 00:15:40,230
very helpful

00:15:37,250 --> 00:15:42,300
the last step of course and a project is

00:15:40,230 --> 00:15:43,770
documentation that's the part I don't

00:15:42,300 --> 00:15:46,860
know about you guys but I hate writing

00:15:43,770 --> 00:15:48,510
documentation so when I heard about

00:15:46,860 --> 00:15:50,310
automating documentation I got really

00:15:48,510 --> 00:15:53,940
excited until I realized you still have

00:15:50,310 --> 00:15:57,000
to write the documentation but it does

00:15:53,940 --> 00:15:59,670
help a lot what PHP documenter does is

00:15:57,000 --> 00:16:02,070
it gives you a format and what you do is

00:15:59,670 --> 00:16:03,840
you write the documentation as you write

00:16:02,070 --> 00:16:05,670
the code so you write it in your

00:16:03,840 --> 00:16:07,680
comments as you're going through the

00:16:05,670 --> 00:16:09,480
code and of course we should all be

00:16:07,680 --> 00:16:11,160
better at commenting our code and so

00:16:09,480 --> 00:16:14,640
this is a really good way to force us to

00:16:11,160 --> 00:16:16,110
comment the code as well so once you

00:16:14,640 --> 00:16:17,730
have done all your code and you have all

00:16:16,110 --> 00:16:18,960
your comments then you can run PHP

00:16:17,730 --> 00:16:21,210
documenter and it builds the

00:16:18,960 --> 00:16:23,520
documentation for you in a very nice

00:16:21,210 --> 00:16:25,140
easy-to-read format there's a great

00:16:23,520 --> 00:16:28,080
tutorial on line that goes through step

00:16:25,140 --> 00:16:29,550
by step and you're going to end up with

00:16:28,080 --> 00:16:31,980
comments that sort of look something

00:16:29,550 --> 00:16:33,420
like this obviously you can do much more

00:16:31,980 --> 00:16:37,320
complicated things but this is just a

00:16:33,420 --> 00:16:39,810
basic one so it's in a comment you start

00:16:37,320 --> 00:16:41,370
with a short description and then you

00:16:39,810 --> 00:16:43,950
can have a long description with more

00:16:41,370 --> 00:16:45,600
information you can use lots of multiple

00:16:43,950 --> 00:16:48,750
lines and you can even put in markdown

00:16:45,600 --> 00:16:50,850
code so that you can really handle the

00:16:48,750 --> 00:16:52,350
formatting which is very nice so you can

00:16:50,850 --> 00:16:54,930
be very specific about how you want it

00:16:52,350 --> 00:16:58,230
formatted in the final documentation

00:16:54,930 --> 00:17:00,450
Docs you can put in authors you can put

00:16:58,230 --> 00:17:04,340
in versions you can just describe the

00:17:00,450 --> 00:17:06,690
parameters that the function needs and

00:17:04,340 --> 00:17:08,460
this is something like you're going to

00:17:06,690 --> 00:17:11,460
get when you run your documentation then

00:17:08,460 --> 00:17:13,890
so you can see even add some little

00:17:11,460 --> 00:17:16,770
graphical elements it gives you a an

00:17:13,890 --> 00:17:18,150
index of all your functions then with

00:17:16,770 --> 00:17:20,130
the short description you can click on

00:17:18,150 --> 00:17:21,860
it and get the long description and it's

00:17:20,130 --> 00:17:24,450
going to track everything for you I

00:17:21,860 --> 00:17:25,980
think the greatest strength of using

00:17:24,450 --> 00:17:27,810
something like PHP documenter

00:17:25,980 --> 00:17:28,830
besides the fact that it forces you to

00:17:27,810 --> 00:17:31,800
comment your code and write the

00:17:28,830 --> 00:17:33,480
documentation as you go is that if the

00:17:31,800 --> 00:17:35,280
client comes back six months later and

00:17:33,480 --> 00:17:37,470
they're like ok we need this thing here

00:17:35,280 --> 00:17:40,080
changed so you go into the code and you

00:17:37,470 --> 00:17:42,450
change it and now you need to update the

00:17:40,080 --> 00:17:44,340
documentation in the old way where you

00:17:42,450 --> 00:17:45,900
wrote the documentation by hand you'd

00:17:44,340 --> 00:17:47,190
have to go through and find everywhere

00:17:45,900 --> 00:17:49,679
that's mentioned in the documentation

00:17:47,190 --> 00:17:52,200
and change it with

00:17:49,679 --> 00:17:53,809
you just update the comment that's right

00:17:52,200 --> 00:17:55,740
there where you just change the code

00:17:53,809 --> 00:17:58,530
rerun the tool and it's updated

00:17:55,740 --> 00:18:03,000
everywhere so it can really save you a

00:17:58,530 --> 00:18:04,710
lot of time so now that we have all

00:18:03,000 --> 00:18:06,720
these different tools we're still

00:18:04,710 --> 00:18:07,980
running them all by hand and obviously

00:18:06,720 --> 00:18:10,500
our goal was to fully automate

00:18:07,980 --> 00:18:13,140
everything what we're going to do now is

00:18:10,500 --> 00:18:14,700
find a continuous integration tool now

00:18:13,140 --> 00:18:16,410
the continuous integration tools are

00:18:14,700 --> 00:18:18,630
going to be a platform that's going to

00:18:16,410 --> 00:18:19,799
run all of these tools for you so you're

00:18:18,630 --> 00:18:21,510
going to integrate all of the tools

00:18:19,799 --> 00:18:24,090
you're using into the continuous

00:18:21,510 --> 00:18:26,070
integration tool so I took a look at

00:18:24,090 --> 00:18:28,679
cruise control this is another one

00:18:26,070 --> 00:18:30,179
written in Java Java is very big into

00:18:28,679 --> 00:18:31,440
continuous integration so as you look

00:18:30,179 --> 00:18:34,230
through four things you're gonna find a

00:18:31,440 --> 00:18:35,850
lot of Java but you don't have to be a

00:18:34,230 --> 00:18:36,830
Java programmer to use them don't let

00:18:35,850 --> 00:18:39,570
that scare you

00:18:36,830 --> 00:18:42,419
so lots of different ways to install it

00:18:39,570 --> 00:18:44,220
very very flexible scheduling system so

00:18:42,419 --> 00:18:46,140
with cruise control what you can do is

00:18:44,220 --> 00:18:48,360
say I want you to run this build

00:18:46,140 --> 00:18:49,919
everyday at 2:00 o'clock or I want you

00:18:48,360 --> 00:18:51,960
to run it every time I commit something

00:18:49,919 --> 00:18:53,370
or I want you to run it every day at

00:18:51,960 --> 00:18:55,860
2:00 o'clock but only if I've committed

00:18:53,370 --> 00:18:58,710
changes so you can be very flexible as

00:18:55,860 --> 00:19:01,799
flexible and how it's scheduled you can

00:18:58,710 --> 00:19:06,690
receive notifications for the output so

00:19:01,799 --> 00:19:08,460
it can email you instant messenger or it

00:19:06,690 --> 00:19:09,870
can give you a nice HTML report which

00:19:08,460 --> 00:19:12,380
can be very handy if you're working with

00:19:09,870 --> 00:19:14,460
a project manager so on you have a nice

00:19:12,380 --> 00:19:15,570
report already built that you can hand

00:19:14,460 --> 00:19:19,020
in to say how you're doing on the

00:19:15,570 --> 00:19:20,429
project now it integrates with fing and

00:19:19,020 --> 00:19:22,740
maven because those are Java things

00:19:20,429 --> 00:19:24,419
instantly you know automatically but to

00:19:22,740 --> 00:19:27,390
integrate it with your PHP specific

00:19:24,419 --> 00:19:29,610
tools you'll need an add-on called PHP

00:19:27,390 --> 00:19:31,320
under control and that will help you

00:19:29,610 --> 00:19:36,000
integrate it with the PHP specific tools

00:19:31,320 --> 00:19:37,440
like PHP unit or PHP code sniffer now of

00:19:36,000 --> 00:19:39,179
course like I said we never want to just

00:19:37,440 --> 00:19:42,059
have one tool at our disposal so there's

00:19:39,179 --> 00:19:45,240
also Hudson and Jenkins they used to be

00:19:42,059 --> 00:19:48,299
the same project but they have sort of

00:19:45,240 --> 00:19:49,919
split however if you do go on say the

00:19:48,299 --> 00:19:52,350
Jenkins website you'll find references

00:19:49,919 --> 00:19:57,720
to Hudson don't let that worry you

00:19:52,350 --> 00:20:00,780
they're very similar so Jenkins goes

00:19:57,720 --> 00:20:02,970
through and has a really nice GUI

00:20:00,780 --> 00:20:05,159
interface so if

00:20:02,970 --> 00:20:08,490
cruise control is a little tough to set

00:20:05,159 --> 00:20:11,070
up so Jenkins can be very easy with the

00:20:08,490 --> 00:20:14,370
GUI interface so there's also

00:20:11,070 --> 00:20:16,850
third-party plugins and it adds RSS as a

00:20:14,370 --> 00:20:19,020
messaging option which is very nice and

00:20:16,850 --> 00:20:19,500
to make it even easier to get you

00:20:19,020 --> 00:20:21,929
started

00:20:19,500 --> 00:20:24,390
Sebastian Bergman has created a template

00:20:21,929 --> 00:20:26,610
for PHP projects and so you can use his

00:20:24,390 --> 00:20:28,650
template and it does a lot of the setup

00:20:26,610 --> 00:20:29,730
for you so it makes it very very easy to

00:20:28,650 --> 00:20:32,580
get set up on Jenkins

00:20:29,730 --> 00:20:34,620
and lastly there's reporting because now

00:20:32,580 --> 00:20:36,630
that we have all this stuff running it's

00:20:34,620 --> 00:20:39,720
nice to kind of see what is this all

00:20:36,630 --> 00:20:41,940
doing now each of these tools does

00:20:39,720 --> 00:20:43,289
reporting on their own but we don't want

00:20:41,940 --> 00:20:44,549
to have to go through and look at all

00:20:43,289 --> 00:20:47,010
the reports and try to aggregate the

00:20:44,549 --> 00:20:48,900
data ourselves so you can use a tool

00:20:47,010 --> 00:20:52,289
like sonar which offers very very

00:20:48,900 --> 00:20:54,600
in-depth reporting it integrates with

00:20:52,289 --> 00:20:56,669
all of the tools I've discussed and it's

00:20:54,600 --> 00:20:58,530
a web-based application so this can be

00:20:56,669 --> 00:21:00,570
very good for teams that are dispersed

00:20:58,530 --> 00:21:03,539
across the country or around the world

00:21:00,570 --> 00:21:05,070
and it's also very nice too for say a

00:21:03,539 --> 00:21:06,690
project manager who really shouldn't

00:21:05,070 --> 00:21:08,010
have access to the server so you don't

00:21:06,690 --> 00:21:10,530
want them looking at the reports on the

00:21:08,010 --> 00:21:12,659
server you can give them the access just

00:21:10,530 --> 00:21:14,250
to the web-based portion and that way

00:21:12,659 --> 00:21:15,840
they can run the reports when they need

00:21:14,250 --> 00:21:17,190
to or look at the reports they don't

00:21:15,840 --> 00:21:20,010
have to keep bugging you to give them to

00:21:17,190 --> 00:21:21,780
them off the server it gives you the

00:21:20,010 --> 00:21:23,190
overall health of your project so it'll

00:21:21,780 --> 00:21:25,740
tell you if you're having problems with

00:21:23,190 --> 00:21:29,130
say code duplication or if you're having

00:21:25,740 --> 00:21:31,320
problems with not having unit tests or

00:21:29,130 --> 00:21:33,570
with unit tests failing or if perhaps

00:21:31,320 --> 00:21:35,340
the problem is that your coding standard

00:21:33,570 --> 00:21:37,770
is not being followed so it kind of

00:21:35,340 --> 00:21:39,780
gives you a big overview but then allows

00:21:37,770 --> 00:21:41,730
you to drill down so if one of your unit

00:21:39,780 --> 00:21:43,710
tests is failing you can actually drill

00:21:41,730 --> 00:21:46,200
down through sonar to that exact line of

00:21:43,710 --> 00:21:48,900
code and see what's going on so it does

00:21:46,200 --> 00:21:50,340
give you a lot of flexibility it also

00:21:48,900 --> 00:21:51,990
includes a thing called time machine

00:21:50,340 --> 00:21:54,210
which allows you to see how your project

00:21:51,990 --> 00:21:56,250
has gone over time so if you're working

00:21:54,210 --> 00:21:58,950
on a long term project it will sort of

00:21:56,250 --> 00:22:00,270
give you a way to see like okay guys you

00:21:58,950 --> 00:22:02,340
know we're really bad at following our

00:22:00,270 --> 00:22:04,200
coding standard a month ago but look how

00:22:02,340 --> 00:22:06,720
much we've improved so it can really

00:22:04,200 --> 00:22:07,559
give you some good data especially like

00:22:06,720 --> 00:22:09,900
I said if you're dealing with the

00:22:07,559 --> 00:22:12,360
project manager to give you some data to

00:22:09,900 --> 00:22:13,590
back up like see things are improving

00:22:12,360 --> 00:22:16,890
we're really making some good progress

00:22:13,590 --> 00:22:18,150
and one of my favorite

00:22:16,890 --> 00:22:20,490
things that it does is it has a

00:22:18,150 --> 00:22:21,960
technical debt plugin because I don't

00:22:20,490 --> 00:22:24,060
know about you guys but when I go into a

00:22:21,960 --> 00:22:25,950
customer and I say this code is terrible

00:22:24,060 --> 00:22:27,270
would you let me refactor it they're

00:22:25,950 --> 00:22:29,010
usually like well how does that change

00:22:27,270 --> 00:22:30,660
it on our end it's like well it doesn't

00:22:29,010 --> 00:22:32,520
it just makes my job easier and they're

00:22:30,660 --> 00:22:36,480
like no I don't think so

00:22:32,520 --> 00:22:39,690
so what you can do here is you can take

00:22:36,480 --> 00:22:41,490
a look at the code and what it'll do is

00:22:39,690 --> 00:22:44,820
it'll convert the problems that the code

00:22:41,490 --> 00:22:47,730
has into a cost to reimburse and so

00:22:44,820 --> 00:22:50,340
it'll talk about okay what exactly is

00:22:47,730 --> 00:22:53,070
the dollar amount that this bad code is

00:22:50,340 --> 00:22:55,110
costing us all the duplication all of

00:22:53,070 --> 00:22:57,480
the like coding violations and things

00:22:55,110 --> 00:23:00,840
like that what exactly does that cost us

00:22:57,480 --> 00:23:03,000
and so now you can go back and say okay

00:23:00,840 --> 00:23:04,860
it'll cost you this much for me to

00:23:03,000 --> 00:23:07,230
refactor it or it's going to cost you

00:23:04,860 --> 00:23:09,450
this much over the next year if we don't

00:23:07,230 --> 00:23:11,040
refactor it and so it kind of gives you

00:23:09,450 --> 00:23:13,670
a way to translate the benefit of that

00:23:11,040 --> 00:23:16,500
refactoring into a language that those

00:23:13,670 --> 00:23:19,410
project managers can relate to a little

00:23:16,500 --> 00:23:21,780
bit better it also gives you a breakdown

00:23:19,410 --> 00:23:23,760
about where your biggest problems are

00:23:21,780 --> 00:23:25,560
and so that can be a really handy thing

00:23:23,760 --> 00:23:27,240
if you're going into a meeting with

00:23:25,560 --> 00:23:29,220
other developers you can quickly look at

00:23:27,240 --> 00:23:31,980
this and say okay this is probably the

00:23:29,220 --> 00:23:33,660
biggest area we need to look at next if

00:23:31,980 --> 00:23:35,670
you need some help getting started with

00:23:33,660 --> 00:23:37,470
continuous integration there are a

00:23:35,670 --> 00:23:40,050
number of tools out there that sort of

00:23:37,470 --> 00:23:42,300
help you get started with all of the

00:23:40,050 --> 00:23:44,550
tools I've talked about one of those

00:23:42,300 --> 00:23:49,110
things is teamcity by JetBrains

00:23:44,550 --> 00:23:51,690
and that is online so you can set up

00:23:49,110 --> 00:23:54,960
your team and it's free if you have a

00:23:51,690 --> 00:23:57,360
small team I'm not sure exactly how

00:23:54,960 --> 00:23:58,830
small they're talking about but since I

00:23:57,360 --> 00:24:02,760
was the only one logging in it was free

00:23:58,830 --> 00:24:04,230
so give it a try but it really has

00:24:02,760 --> 00:24:06,060
everything all set up for you so you

00:24:04,230 --> 00:24:08,130
just create the logins for everybody and

00:24:06,060 --> 00:24:11,240
you can start using everything so very

00:24:08,130 --> 00:24:11,240
very easy to get started

00:24:11,520 --> 00:24:17,880
NetBeans also has support for continuous

00:24:13,890 --> 00:24:19,710
integration and so there's that

00:24:17,880 --> 00:24:22,440
integrates the template for Jenkins jobs

00:24:19,710 --> 00:24:23,940
that Sebastian wrote so that can also

00:24:22,440 --> 00:24:25,830
help you get started so if you use

00:24:23,940 --> 00:24:27,570
NetBeans you can get started on

00:24:25,830 --> 00:24:29,190
continuous integration very quickly and

00:24:27,570 --> 00:24:30,750
there's a lot more things to that I

00:24:29,190 --> 00:24:32,280
don't have time to mention but

00:24:30,750 --> 00:24:33,960
check with your favorite tool as well a

00:24:32,280 --> 00:24:38,900
lot of ID's have continuous integration

00:24:33,960 --> 00:24:41,490
help built-in okay so after all of this

00:24:38,900 --> 00:24:43,710
it's kind of a big thing to set up all

00:24:41,490 --> 00:24:45,750
of these tools so what happens if you

00:24:43,710 --> 00:24:47,520
have an eight-hour project and it's

00:24:45,750 --> 00:24:51,240
gonna take you 12 hours just to set this

00:24:47,520 --> 00:24:52,560
all up okay that's not going to work so

00:24:51,240 --> 00:24:55,110
what you can do is one thing that can

00:24:52,560 --> 00:24:57,840
help is consider making it a deliverable

00:24:55,110 --> 00:24:59,970
to your clients most clients have no

00:24:57,840 --> 00:25:01,350
idea what unit tests are so they're not

00:24:59,970 --> 00:25:02,760
going to ask for them because they don't

00:25:01,350 --> 00:25:04,830
understand they don't know what they are

00:25:02,760 --> 00:25:07,440
they've never even heard of them if you

00:25:04,830 --> 00:25:09,210
let them know listen if you give me a

00:25:07,440 --> 00:25:11,310
couple extra hours to write these unit

00:25:09,210 --> 00:25:13,230
tests I will give them to you with the

00:25:11,310 --> 00:25:15,870
code and then next time I need to make a

00:25:13,230 --> 00:25:17,700
change it will be so much safer because

00:25:15,870 --> 00:25:20,070
all these tests can be run so quickly

00:25:17,700 --> 00:25:22,290
we'll know if something breaks or if

00:25:20,070 --> 00:25:23,760
you're delivering it to a team and their

00:25:22,290 --> 00:25:26,310
IT department is going to take over

00:25:23,760 --> 00:25:28,170
managing the code and you can let them

00:25:26,310 --> 00:25:30,000
know listen this is going to make it

00:25:28,170 --> 00:25:32,070
easier for your team to first of all

00:25:30,000 --> 00:25:33,360
understand my code and be able to test

00:25:32,070 --> 00:25:35,040
it to make sure it's not breaking

00:25:33,360 --> 00:25:37,860
anything of theirs and that their stuff

00:25:35,040 --> 00:25:39,360
is not breaking mine so let your

00:25:37,860 --> 00:25:40,860
customers know about it because chances

00:25:39,360 --> 00:25:43,250
are they don't necessarily know to even

00:25:40,860 --> 00:25:45,810
ask for it

00:25:43,250 --> 00:25:47,670
so a quick recap of what we've talked

00:25:45,810 --> 00:25:50,400
about so talked about having a coding

00:25:47,670 --> 00:25:52,860
standard and you can test it with PHP

00:25:50,400 --> 00:25:56,370
code sniffer we talked about automating

00:25:52,860 --> 00:25:58,640
our tests with unit tests and you can

00:25:56,370 --> 00:26:00,990
use PHP unit simple test or selenium

00:25:58,640 --> 00:26:03,240
we're gonna automate the build with fing

00:26:00,990 --> 00:26:05,120
or maven and then we're gonna automate

00:26:03,240 --> 00:26:08,700
the entire process with cruise control

00:26:05,120 --> 00:26:10,920
Hudson or Jenkins then we're going to do

00:26:08,700 --> 00:26:13,470
our documentation using PHP documenter -

00:26:10,920 --> 00:26:17,160
and we have our in-depth reporting from

00:26:13,470 --> 00:26:19,680
sonar okay so now we're up to the you

00:26:17,160 --> 00:26:21,450
guys have to talk apart so let's say

00:26:19,680 --> 00:26:23,160
that a customer hires you to create a

00:26:21,450 --> 00:26:25,380
registration form for a one-time event

00:26:23,160 --> 00:26:27,060
it's a small customer with a small

00:26:25,380 --> 00:26:29,190
budget it should take a couple hundred

00:26:27,060 --> 00:26:31,470
lines of code in a single file results

00:26:29,190 --> 00:26:32,760
will be emailed it will be tested by the

00:26:31,470 --> 00:26:35,040
event staff in the marketing department

00:26:32,760 --> 00:26:36,810
on the live site as they do not have a

00:26:35,040 --> 00:26:39,750
test environment and it will only be

00:26:36,810 --> 00:26:41,460
live for two months in this case using

00:26:39,750 --> 00:26:45,470
everything is probably not beneficial

00:26:41,460 --> 00:26:45,470
but what tools might be beneficial here

00:26:52,040 --> 00:27:00,420
unit-tests coding standards my favorite

00:26:56,790 --> 00:27:01,920
word what I said here was if they don't

00:27:00,420 --> 00:27:03,840
have an in-house standard that they want

00:27:01,920 --> 00:27:06,030
you to use you should still pick your

00:27:03,840 --> 00:27:07,770
own because first of all when you come

00:27:06,030 --> 00:27:09,360
back to it later on you don't want to be

00:27:07,770 --> 00:27:10,650
embarrassed by the code you wrote you

00:27:09,360 --> 00:27:13,710
want to make it easier even just for

00:27:10,650 --> 00:27:15,000
yourself to read through so even if

00:27:13,710 --> 00:27:16,350
you're the only one looking at this code

00:27:15,000 --> 00:27:18,390
and it's not going to be live very long

00:27:16,350 --> 00:27:22,290
I still recommend following a coding

00:27:18,390 --> 00:27:24,240
standard I said create unit tests for it

00:27:22,290 --> 00:27:26,040
because if you're testing on the live

00:27:24,240 --> 00:27:27,570
site you want to know really quickly if

00:27:26,040 --> 00:27:28,860
something's broken you don't want to

00:27:27,570 --> 00:27:30,810
have to go through and click on things

00:27:28,860 --> 00:27:33,600
manually and 15 minutes later find out

00:27:30,810 --> 00:27:37,680
it's broken so when you're dealing with

00:27:33,600 --> 00:27:40,200
a live environment having unit tests can

00:27:37,680 --> 00:27:41,790
make testing very quick they probably

00:27:40,200 --> 00:27:44,030
don't need in-depth reporting if it's

00:27:41,790 --> 00:27:46,650
only going to be live for two months

00:27:44,030 --> 00:27:48,360
full automation of the build well if

00:27:46,650 --> 00:27:50,690
it's only one file it's not that hard to

00:27:48,360 --> 00:27:53,340
do the build so maybe you don't need to

00:27:50,690 --> 00:27:54,420
and if it's again only gonna be live for

00:27:53,340 --> 00:27:58,560
two months they may not need

00:27:54,420 --> 00:28:00,030
documentation as well okay how about a

00:27:58,560 --> 00:28:02,610
customer hires you for an ongoing

00:28:00,030 --> 00:28:04,350
project on the 15th of every month they

00:28:02,610 --> 00:28:05,760
need you to go in and add a new survey

00:28:04,350 --> 00:28:07,860
to collect data and write it to a

00:28:05,760 --> 00:28:09,570
database the previous month's survey

00:28:07,860 --> 00:28:10,920
data needs to be backed up and cleared

00:28:09,570 --> 00:28:16,410
out of the database when the new survey

00:28:10,920 --> 00:28:21,540
goes live continuous integration but

00:28:16,410 --> 00:28:23,730
which pieces it's right automate the

00:28:21,540 --> 00:28:25,710
build yeah anytime I hear clear out the

00:28:23,730 --> 00:28:27,720
database I love automating the build

00:28:25,710 --> 00:28:30,240
because then I can back it up to like 30

00:28:27,720 --> 00:28:38,330
different paces before I do it just in

00:28:30,240 --> 00:28:42,560
case anything else my favorite s word

00:28:38,330 --> 00:28:42,560
so following a coding standard

00:28:43,980 --> 00:28:48,330
so yeah following a coding standard

00:28:46,340 --> 00:28:50,370
since this is something that's going to

00:28:48,330 --> 00:28:52,169
be happening every month having a

00:28:50,370 --> 00:28:53,700
testing framework along with your unit

00:28:52,169 --> 00:28:55,529
tests might be handy it makes it easier

00:28:53,700 --> 00:28:57,440
to run your tests easier to keep track

00:28:55,529 --> 00:29:00,870
of how things are going over time

00:28:57,440 --> 00:29:03,090
definitely automating the build in-depth

00:29:00,870 --> 00:29:04,440
reporting it's just a survey they

00:29:03,090 --> 00:29:07,610
probably don't need in depth reporting

00:29:04,440 --> 00:29:10,799
on how the code is doing but

00:29:07,610 --> 00:29:13,620
documentation maybe you need that I mean

00:29:10,799 --> 00:29:15,179
in that three weeks in between our four

00:29:13,620 --> 00:29:17,039
weeks in between you looking at that

00:29:15,179 --> 00:29:18,870
code who knows how many other projects

00:29:17,039 --> 00:29:21,019
you've looked at so having some

00:29:18,870 --> 00:29:23,610
documentation can be beneficial for you

00:29:21,019 --> 00:29:25,740
not only that but I don't know about you

00:29:23,610 --> 00:29:27,809
guys but that project sounds boring and

00:29:25,740 --> 00:29:28,620
so eventually I'd want to pass that off

00:29:27,809 --> 00:29:30,570
to somebody else

00:29:28,620 --> 00:29:35,700
so having documentation makes it easier

00:29:30,570 --> 00:29:37,080
to pass off okay a customer hires you to

00:29:35,700 --> 00:29:39,120
write one part of a very large

00:29:37,080 --> 00:29:40,799
application other consultants that you

00:29:39,120 --> 00:29:42,240
do not have access to will be working on

00:29:40,799 --> 00:29:50,450
other parts of the application at the

00:29:42,240 --> 00:29:55,230
same time documentation yes unit tests

00:29:50,450 --> 00:29:56,639
coding standards everything yeah that's

00:29:55,230 --> 00:30:00,059
what I said you need all of it in this

00:29:56,639 --> 00:30:02,100
case so a lot of projects you don't need

00:30:00,059 --> 00:30:04,950
all of it in a situation like this you

00:30:02,100 --> 00:30:06,029
probably do I mean I I pity the person

00:30:04,950 --> 00:30:07,980
who would have to take care of this

00:30:06,029 --> 00:30:10,830
codebase if everybody wasn't using a

00:30:07,980 --> 00:30:12,510
coding standard or documentation I mean

00:30:10,830 --> 00:30:14,639
just having to try to go through and

00:30:12,510 --> 00:30:17,309
figure out what the heck did all these

00:30:14,639 --> 00:30:19,620
people do would be an immense task

00:30:17,309 --> 00:30:22,350
so having documentation having reporting

00:30:19,620 --> 00:30:23,370
all of that's going to help since you

00:30:22,350 --> 00:30:25,830
have a lot of different developers

00:30:23,370 --> 00:30:27,870
working in a lot of different places all

00:30:25,830 --> 00:30:29,970
on the same project having those

00:30:27,870 --> 00:30:31,980
large-scale reports and the fully and

00:30:29,970 --> 00:30:33,690
depth reports from something like sonar

00:30:31,980 --> 00:30:36,330
it's going to be very helpful so you can

00:30:33,690 --> 00:30:38,519
drill down and see okay how exactly is

00:30:36,330 --> 00:30:41,850
everyone doing and what are our problems

00:30:38,519 --> 00:30:44,850
what do we need to talk about so okay so

00:30:41,850 --> 00:30:46,500
I have two takeaways for you the

00:30:44,850 --> 00:30:48,389
important thing here to remember is not

00:30:46,500 --> 00:30:50,519
everything is beneficial enough to use

00:30:48,389 --> 00:30:53,129
in every situation okay

00:30:50,519 --> 00:30:55,320
so continuous integration is awesome but

00:30:53,129 --> 00:30:57,240
it's not awesome for every project so

00:30:55,320 --> 00:30:57,690
take a look though and see which tools

00:30:57,240 --> 00:31:00,389
could

00:30:57,690 --> 00:31:01,799
help you for instance the coding

00:31:00,389 --> 00:31:04,440
standard that's something that could

00:31:01,799 --> 00:31:07,139
help you in every project okay but

00:31:04,440 --> 00:31:08,909
having you know in-depth reporting and a

00:31:07,139 --> 00:31:10,200
full documentation suite is maybe not

00:31:08,909 --> 00:31:13,980
going to help you in the very small

00:31:10,200 --> 00:31:15,419
projects takeaway number two is the

00:31:13,980 --> 00:31:17,429
fewer steps I have to remember to do

00:31:15,419 --> 00:31:19,620
manually the more successful my project

00:31:17,429 --> 00:31:21,539
will be okay we use a lot of brainpower

00:31:19,620 --> 00:31:23,429
to solve the problems and write the code

00:31:21,539 --> 00:31:24,960
automate the things you don't have to

00:31:23,429 --> 00:31:27,899
think about that way you don't have to

00:31:24,960 --> 00:31:29,279
worry about it it's taken care of this

00:31:27,899 --> 00:31:32,909
slide is just so you can look at it

00:31:29,279 --> 00:31:35,399
later these are links to everything okay

00:31:32,909 --> 00:31:36,750
and I would love it if you would find me

00:31:35,399 --> 00:31:39,090
and let me know what you thought of this

00:31:36,750 --> 00:31:43,169
talk you can find me on twitter at e3

00:31:39,090 --> 00:31:44,669
besties i sorry i gave this talk in

00:31:43,169 --> 00:31:45,509
florida that's why the florida user

00:31:44,669 --> 00:31:47,340
group is listed there

00:31:45,509 --> 00:31:49,679
and I didn't have time to update the

00:31:47,340 --> 00:31:51,809
slides before I came here but I'm a part

00:31:49,679 --> 00:31:53,190
of my local Madison user group if you

00:31:51,809 --> 00:31:55,320
are not part of a user group in your

00:31:53,190 --> 00:31:57,840
area I strongly encourage you to find

00:31:55,320 --> 00:31:59,730
one they are so beneficial having that

00:31:57,840 --> 00:32:01,769
network of people to talk to you and

00:31:59,730 --> 00:32:03,809
help you out if you need something but

00:32:01,769 --> 00:32:05,610
even just having free education every

00:32:03,809 --> 00:32:08,519
month that the user group meeting it

00:32:05,610 --> 00:32:10,110
also is a great place to you know try

00:32:08,519 --> 00:32:11,460
your hand at talking or teaching someone

00:32:10,110 --> 00:32:13,019
else I mean the best way to learn

00:32:11,460 --> 00:32:15,240
something is to have to teach it to

00:32:13,019 --> 00:32:17,610
someone else and so a user group can be

00:32:15,240 --> 00:32:18,870
very beneficial that way as well if

00:32:17,610 --> 00:32:21,659
there's not a user group in your area

00:32:18,870 --> 00:32:24,480
then you should start one and I would

00:32:21,659 --> 00:32:25,740
love to help you so find me talk to me

00:32:24,480 --> 00:32:27,899
if you want some help starting a user

00:32:25,740 --> 00:32:29,309
group there's quite a large network of

00:32:27,899 --> 00:32:31,350
people all over the world who would love

00:32:29,309 --> 00:32:34,110
to help you get started so let us know

00:32:31,350 --> 00:32:37,529
this is the link for my slides so tree

00:32:34,110 --> 00:32:40,049
line design.com slash slides and I will

00:32:37,529 --> 00:32:43,559
also update joined in with my slide link

00:32:40,049 --> 00:32:45,210
as well don't forget I have free issues

00:32:43,559 --> 00:32:47,370
of PHP architect it's a digital magazine

00:32:45,210 --> 00:32:49,470
I'd love to give you some free issues so

00:32:47,370 --> 00:32:50,700
stop by and talk to me about that and if

00:32:49,470 --> 00:32:51,929
you've ever thought about writing we'd

00:32:50,700 --> 00:32:54,690
like to talk to you about that as well

00:32:51,929 --> 00:32:56,190
and last but not least like I said I

00:32:54,690 --> 00:32:58,110
would really appreciate feedback on this

00:32:56,190 --> 00:32:59,970
talk leave me feedback on joined in and

00:32:58,110 --> 00:33:02,100
this this is the current joined in link

00:32:59,970 --> 00:33:03,480
for this talk for this conference so you

00:33:02,100 --> 00:33:05,730
can also find it by going to joined in

00:33:03,480 --> 00:33:08,129
and clicking on the PHP UK link as well

00:33:05,730 --> 00:33:10,440
or you can email me feedback at Beth @

00:33:08,129 --> 00:33:12,059
Musketeers doc dot me

00:33:10,440 --> 00:33:14,519
I'm trying really hard not to say calm

00:33:12,059 --> 00:33:17,580
it doesn't work if you to put calm so

00:33:14,519 --> 00:33:20,389
that's it Musketeers dot me all right

00:33:17,580 --> 00:33:20,389

YouTube URL: https://www.youtube.com/watch?v=ny7ysh6y2g0


