Title: PHP UK Conference 2013 - Sara Golemon - PHP Extensions
Publication date: 2013-04-22
Playlist: PHP UK Conference 2013
Description: 
	PHP extensions provide the "glue" between the PHP language and C/C++ libraries. This session will provide an intense, and fast paced introduction to writing custom extensions. Attendees should ideally know C/C++ already. Time permitting, HipHop extensions may be covered as well.
Captions: 
	00:00:13,330 --> 00:00:18,090
hi I'm Sarah Goldman I'm going to be

00:00:16,180 --> 00:00:19,200
talking about PHP extensions today

00:00:18,090 --> 00:00:20,550
I'm going to go really fast because

00:00:19,200 --> 00:00:23,010
there's a lot of content and there's

00:00:20,550 --> 00:00:24,570
only 45 minutes to do it in if you have

00:00:23,010 --> 00:00:26,430
questions I do just go ahead and throw

00:00:24,570 --> 00:00:28,740
them up we can deal with them when we

00:00:26,430 --> 00:00:29,760
get there otherwise I'm going to not

00:00:28,740 --> 00:00:33,600
waste time that I'm going to go ahead

00:00:29,760 --> 00:00:35,070
and get started it's a quick overview of

00:00:33,600 --> 00:00:36,770
what we're going to talk about just

00:00:35,070 --> 00:00:39,390
going to cover cover some of the basics

00:00:36,770 --> 00:00:43,290
throw pieces in start building things up

00:00:39,390 --> 00:00:44,730
like a recipe and we'll we'll just touch

00:00:43,290 --> 00:00:49,650
on a few of the sort of high-level

00:00:44,730 --> 00:00:51,239
things about accentuating so before you

00:00:49,650 --> 00:00:52,739
can actually start building an extension

00:00:51,239 --> 00:00:55,140
which you may want to do because you

00:00:52,739 --> 00:00:57,360
have some custom library that you want

00:00:55,140 --> 00:00:58,559
to wrap or you have some bit of code

00:00:57,360 --> 00:01:00,030
that you want to just wrap really

00:00:58,559 --> 00:01:02,579
tightly and run really fast so you want

00:01:00,030 --> 00:01:03,390
to write it native C code before you do

00:01:02,579 --> 00:01:04,800
any of that you're going to actually

00:01:03,390 --> 00:01:06,869
have to put together an environment to

00:01:04,800 --> 00:01:08,970
do that with some of these things are

00:01:06,869 --> 00:01:11,759
the really easy stuff like I need GCC

00:01:08,970 --> 00:01:15,090
make you know libtool auto comp things

00:01:11,759 --> 00:01:16,470
like that really basic stuff the one

00:01:15,090 --> 00:01:19,170
thing that you're going to need

00:01:16,470 --> 00:01:22,289
specifically for PHP is PHP development

00:01:19,170 --> 00:01:24,030
headers and a special build of PHP that

00:01:22,289 --> 00:01:26,700
allows you to catch things that you

00:01:24,030 --> 00:01:28,410
won't catch with a normal bill for those

00:01:26,700 --> 00:01:30,300
development headers usually get those

00:01:28,410 --> 00:01:33,119
straight out of a distribution package

00:01:30,300 --> 00:01:36,090
you might get installed PHP developer it

00:01:33,119 --> 00:01:37,289
happens to be but that's still not going

00:01:36,090 --> 00:01:40,259
to give you the debug build which

00:01:37,289 --> 00:01:42,030
technically is optional but again i

00:01:40,259 --> 00:01:43,830
really recommend that you and compile

00:01:42,030 --> 00:01:46,530
with these two extra options enable

00:01:43,830 --> 00:01:48,929
debug and enable maintainer ztf those

00:01:46,530 --> 00:01:51,360
will ensure that as you build its

00:01:48,929 --> 00:01:52,890
warning you hey this might work for your

00:01:51,360 --> 00:01:56,099
environment but it's not going to work

00:01:52,890 --> 00:01:58,140
in Apache two threaded or it might work

00:01:56,099 --> 00:01:59,940
on a single request but you're going to

00:01:58,140 --> 00:02:01,229
be leaking memory and you'll run out

00:01:59,940 --> 00:02:02,940
very quickly you'll have to restart your

00:02:01,229 --> 00:02:06,450
server every five hours and nobody wants

00:02:02,940 --> 00:02:08,250
to do that so to get their environment

00:02:06,450 --> 00:02:10,319
setup just run configure like you

00:02:08,250 --> 00:02:13,080
normally would on PHP for all your other

00:02:10,319 --> 00:02:15,030
options on there with live XML with P do

00:02:13,080 --> 00:02:18,860
whatever else and just toss those two on

00:02:15,030 --> 00:02:18,860
there build it up it'll be all set

00:02:19,219 --> 00:02:24,900
there is sort of a really basic

00:02:21,480 --> 00:02:28,079
extension this extension does one thing

00:02:24,900 --> 00:02:31,790
it exposes a function called hello and

00:02:28,079 --> 00:02:33,569
that function says hello world see

00:02:31,790 --> 00:02:36,329
everybody's favorite contrived example

00:02:33,569 --> 00:02:39,629
right let's look at some of the pieces

00:02:36,329 --> 00:02:41,519
that are in here this module entry this

00:02:39,629 --> 00:02:43,019
is how PHP knows what your extension is

00:02:41,519 --> 00:02:45,510
going to do this is sort of the starting

00:02:43,019 --> 00:02:48,989
point and the macro down here this is

00:02:45,510 --> 00:02:51,299
sort of cookie cutter this tells then

00:02:48,989 --> 00:02:54,450
how to find your module so the PHP knows

00:02:51,299 --> 00:02:58,139
what to do with it we have a list of

00:02:54,450 --> 00:02:59,430
function function and trees one entry

00:02:58,139 --> 00:03:00,900
per function that you're going to expose

00:02:59,430 --> 00:03:05,099
and I'll show this list kind of grow

00:03:00,900 --> 00:03:06,299
over time that function table is going

00:03:05,099 --> 00:03:08,790
to point to your actual function

00:03:06,299 --> 00:03:10,769
implementations you've got macros

00:03:08,790 --> 00:03:13,919
everywhere so that you don't have to

00:03:10,769 --> 00:03:16,439
define out what would it be voids if

00:03:13,919 --> 00:03:18,379
underscore hello and that whole bunch of

00:03:16,439 --> 00:03:22,639
parameters that mean nothing to you and

00:03:18,379 --> 00:03:24,599
some basic header glue and a

00:03:22,639 --> 00:03:27,060
configuration file over there this

00:03:24,599 --> 00:03:29,609
config file is your general auto comp

00:03:27,060 --> 00:03:32,310
and forcing text anything that you do in

00:03:29,609 --> 00:03:34,439
auto conÃ§u can do here but of course

00:03:32,310 --> 00:03:36,569
there are some specific macros that are

00:03:34,439 --> 00:03:38,790
for PHP development only such as new

00:03:36,569 --> 00:03:40,859
extension this is saying hey I want an

00:03:38,790 --> 00:03:42,540
extension called hello here's the files

00:03:40,859 --> 00:03:45,750
it needs to build in this case just one

00:03:42,540 --> 00:03:50,400
and I'm going to enable that through the

00:03:45,750 --> 00:03:52,349
switch enable hello building it like is

00:03:50,400 --> 00:03:57,030
like building any other pickle extension

00:03:52,349 --> 00:03:58,349
right you go to our module directory PHP

00:03:57,030 --> 00:04:00,799
is that's going to take your config in

00:03:58,349 --> 00:04:03,299
for build a configure script out of it

00:04:00,799 --> 00:04:05,030
configure that's going to run that

00:04:03,299 --> 00:04:10,189
configure script to create the make file

00:04:05,030 --> 00:04:12,810
make got your module load it up with HP

00:04:10,189 --> 00:04:15,060
the dash end means don't load my usual

00:04:12,810 --> 00:04:18,229
PHP I and I because we want to get

00:04:15,060 --> 00:04:20,370
confused by other modules doing things

00:04:18,229 --> 00:04:24,270
override the module directory to our it

00:04:20,370 --> 00:04:26,190
got built load it up and run it yay

00:04:24,270 --> 00:04:28,500
we've got an extension and it only took

00:04:26,190 --> 00:04:32,069
a couple of minutes to actually have a

00:04:28,500 --> 00:04:33,590
nice day obviously we need to do some

00:04:32,069 --> 00:04:35,910
more things with these extensions

00:04:33,590 --> 00:04:38,880
accepting parameters is kind of a funky

00:04:35,910 --> 00:04:41,460
thing we don't modify the prototype to

00:04:38,880 --> 00:04:43,259
the function we have standard prototype

00:04:41,460 --> 00:04:45,030
for all PHP functions what we do is we

00:04:43,259 --> 00:04:49,020
go into the stack and we say pull those

00:04:45,030 --> 00:04:51,570
arguments off the stack and parse them

00:04:49,020 --> 00:04:53,849
into specific types for what we want to

00:04:51,570 --> 00:04:56,780
do in this case we're giving the hello

00:04:53,849 --> 00:04:59,009
function a single parameter called name

00:04:56,780 --> 00:05:00,509
that's going to be a string and we're

00:04:59,009 --> 00:05:02,520
going to load it into this car star and

00:05:00,509 --> 00:05:04,800
int that we pass in by reference and

00:05:02,520 --> 00:05:09,630
then from there it's just a normal see

00:05:04,800 --> 00:05:11,250
variable we can say hello Bob I've also

00:05:09,630 --> 00:05:13,169
added one more thing to this function

00:05:11,250 --> 00:05:17,729
entry down here this hello Argan phone

00:05:13,169 --> 00:05:19,919
this references more macros this is for

00:05:17,729 --> 00:05:22,380
reflection if you want to ask the

00:05:19,919 --> 00:05:25,289
extension what sort of functions it has

00:05:22,380 --> 00:05:26,759
you can say dash dash RF function name

00:05:25,289 --> 00:05:29,610
and a list all the functions with their

00:05:26,759 --> 00:05:30,960
parameters handy little thing it only

00:05:29,610 --> 00:05:33,830
knows what those parameters are if you

00:05:30,960 --> 00:05:36,150
define them up here in this structure

00:05:33,830 --> 00:05:39,180
and I'm going to knock my laptop off of

00:05:36,150 --> 00:05:41,699
this podium here now I used s in that

00:05:39,180 --> 00:05:45,169
example there are a couple other types

00:05:41,699 --> 00:05:47,070
that you can pull off the parameter sec

00:05:45,169 --> 00:05:49,680
ultimately every single one of these

00:05:47,070 --> 00:05:51,240
types is just this one down here it's

00:05:49,680 --> 00:05:53,969
called as evil or dead bowel if you

00:05:51,240 --> 00:05:57,150
prefer this is sort of the unifying type

00:05:53,969 --> 00:05:59,099
for all data in PHP all these other

00:05:57,150 --> 00:06:01,949
types are just going to say hey make

00:05:59,099 --> 00:06:04,020
sure it's the right you know underlying

00:06:01,949 --> 00:06:06,539
type but she's into a bowl or whatever

00:06:04,020 --> 00:06:09,389
it's not try to convert it if you're

00:06:06,539 --> 00:06:11,669
allowed to and then drop it into the

00:06:09,389 --> 00:06:14,699
appropriate fee structure I'm not going

00:06:11,669 --> 00:06:16,349
to be labor all of these they the uses

00:06:14,699 --> 00:06:19,020
of them should hopefully be pretty

00:06:16,349 --> 00:06:20,400
obvious off the bat if not you can raise

00:06:19,020 --> 00:06:22,610
your hand and ask about them at this

00:06:20,400 --> 00:06:22,610
point

00:06:22,830 --> 00:06:27,450
let's use a few of those we're going to

00:06:25,660 --> 00:06:29,920
extend our example a little bit further

00:06:27,450 --> 00:06:32,740
now instead of just asking for string

00:06:29,920 --> 00:06:34,750
we're asking for a required strength and

00:06:32,740 --> 00:06:36,160
then an optional string that's what this

00:06:34,750 --> 00:06:39,940
pipe parameter means that it go over

00:06:36,160 --> 00:06:42,910
that in detail there we have three

00:06:39,940 --> 00:06:44,860
modifiers to these types specifiers pipe

00:06:42,910 --> 00:06:46,720
can only occur once it means everything

00:06:44,860 --> 00:06:48,460
to the left is required everything to

00:06:46,720 --> 00:06:51,340
the right is optional if you don't pass

00:06:48,460 --> 00:06:55,510
one that's optional the original see

00:06:51,340 --> 00:06:58,570
type variable is left untouched so in

00:06:55,510 --> 00:07:01,120
this example the second string is

00:06:58,570 --> 00:07:03,190
optional so we have to give it a default

00:07:01,120 --> 00:07:05,110
value if I don't have something for the

00:07:03,190 --> 00:07:06,310
second value such as in these this

00:07:05,110 --> 00:07:07,900
default lap value is going to be left

00:07:06,310 --> 00:07:11,500
alone and that's what we'll have when we

00:07:07,900 --> 00:07:14,910
get down to actually using it of course

00:07:11,500 --> 00:07:14,910
if you do pass something but it is

00:07:15,420 --> 00:07:21,550
similarly we can add this bang on to our

00:07:19,330 --> 00:07:24,310
type specifier that allows us to

00:07:21,550 --> 00:07:26,020
actually do pass this value but pass it

00:07:24,310 --> 00:07:27,550
is null and then it'll still have the

00:07:26,020 --> 00:07:30,000
same effect is not passing the value

00:07:27,550 --> 00:07:32,130
it'll leave it whatever the default is

00:07:30,000 --> 00:07:36,130
userspace can't do this you might notice

00:07:32,130 --> 00:07:38,290
there is a proposal up for 5.6 to allow

00:07:36,130 --> 00:07:43,090
default parameters but that hasn't been

00:07:38,290 --> 00:07:44,710
accepted so don't look for it one other

00:07:43,090 --> 00:07:47,530
modifier and that is the forward slash

00:07:44,710 --> 00:07:48,940
this one gets a little tricky so let's

00:07:47,530 --> 00:07:50,850
pretend this forward slash isn't here at

00:07:48,940 --> 00:07:53,050
the moment and we're running this code

00:07:50,850 --> 00:07:55,720
we're pulling a string off the stack

00:07:53,050 --> 00:07:58,480
storing it a name or print out just

00:07:55,720 --> 00:08:03,910
hello by itself we're going to write out

00:07:58,480 --> 00:08:06,160
the string and we've also got the stir

00:08:03,910 --> 00:08:07,990
to upper line in here right what the PHP

00:08:06,160 --> 00:08:09,610
start to up our function does is it

00:08:07,990 --> 00:08:11,830
won't actually allocate a new string

00:08:09,610 --> 00:08:14,110
it'll just overwrite the string that we

00:08:11,830 --> 00:08:15,850
pass in moving all the characters to

00:08:14,110 --> 00:08:17,800
uppercase or lowercase if that's when

00:08:15,850 --> 00:08:20,350
you're calling the trouble with that is

00:08:17,800 --> 00:08:22,630
that without this whatever the user

00:08:20,350 --> 00:08:24,340
passed in is going to get modified

00:08:22,630 --> 00:08:26,890
because we don't actually copy the value

00:08:24,340 --> 00:08:28,480
as it's coming in and there's no copy on

00:08:26,890 --> 00:08:32,110
write protection once you're inside C

00:08:28,480 --> 00:08:34,360
space by saying forward slash we're

00:08:32,110 --> 00:08:35,900
saying separate this value that is make

00:08:34,360 --> 00:08:37,010
a full copy of it so that we can do

00:08:35,900 --> 00:08:39,890
whatever the hell we want to its

00:08:37,010 --> 00:08:42,050
internals and it's going to get thrown

00:08:39,890 --> 00:08:44,840
away at the end of the function so it's

00:08:42,050 --> 00:08:47,240
not going to affect you to space there

00:08:44,840 --> 00:08:49,340
are some other ways to actually solve

00:08:47,240 --> 00:08:50,600
that problem some that are slightly more

00:08:49,340 --> 00:08:52,730
effective but this is definitely the

00:08:50,600 --> 00:08:56,900
easiest if you're going to change the

00:08:52,730 --> 00:08:58,040
value separated first handling variables

00:08:56,900 --> 00:08:58,970
by references a slightly different

00:08:58,040 --> 00:09:00,170
things that I'm not going to cover

00:08:58,970 --> 00:09:04,720
because we don't have enough time for it

00:09:00,170 --> 00:09:06,860
but you're welcome to ask me about it so

00:09:04,720 --> 00:09:09,140
this sort of throws all those things

00:09:06,860 --> 00:09:11,090
together and tosses in arrays for a good

00:09:09,140 --> 00:09:13,060
measure we're going to separate our

00:09:11,090 --> 00:09:16,790
string because we're going to

00:09:13,060 --> 00:09:20,060
potentially fold the case if our array

00:09:16,790 --> 00:09:24,560
has this shout variable set to a truth

00:09:20,060 --> 00:09:27,800
value and we've got to believe at the

00:09:24,560 --> 00:09:32,360
end just hello or goodbye again we're

00:09:27,800 --> 00:09:36,080
defaulting it's after the pipe I hope

00:09:32,360 --> 00:09:37,490
that's mostly understandable obviously

00:09:36,080 --> 00:09:40,310
the array stuff is a little bit more

00:09:37,490 --> 00:09:44,770
complicated look at those a tiny bit

00:09:40,310 --> 00:09:46,660
more later on and come right the plane

00:09:44,770 --> 00:09:50,050
good

00:09:46,660 --> 00:09:51,610
alright so I mentioned the Z value this

00:09:50,050 --> 00:09:54,160
is what does e value looks like inside

00:09:51,610 --> 00:09:56,680
you don't need to know this this is just

00:09:54,160 --> 00:09:59,649
sort of for your personal interest so

00:09:56,680 --> 00:10:01,060
you know what's going on all Z values

00:09:59,649 --> 00:10:02,980
have a type associated with them and

00:10:01,060 --> 00:10:05,199
depending on what the type is they're

00:10:02,980 --> 00:10:07,509
going to have some value relevant to

00:10:05,199 --> 00:10:10,750
that type if it's normal obviously the

00:10:07,509 --> 00:10:12,310
value doesn't matter these bull we're

00:10:10,750 --> 00:10:15,160
actually amis toward in this long as a

00:10:12,310 --> 00:10:17,319
zero or one long so long so obviously

00:10:15,160 --> 00:10:20,139
double the double strings of strings

00:10:17,319 --> 00:10:23,740
arrays are certain this thing called a

00:10:20,139 --> 00:10:28,060
hash table objects guess where they go

00:10:23,740 --> 00:10:35,279
and the other two elements there are ref

00:10:28,060 --> 00:10:38,170
count and is ref funk are our functions

00:10:35,279 --> 00:10:40,629
variables well yes they can be at their

00:10:38,170 --> 00:10:43,180
closures but what a closure really is is

00:10:40,629 --> 00:10:46,360
an object that has a call method on it

00:10:43,180 --> 00:10:49,810
so where they effectively wind up is in

00:10:46,360 --> 00:10:52,689
aaj and the question in case you and

00:10:49,810 --> 00:10:57,779
mrs. is where the functions go back

00:10:52,689 --> 00:11:00,750
though so rough count in Israel so

00:10:57,779 --> 00:11:02,589
you're familiar from user space of

00:11:00,750 --> 00:11:04,839
taking variables for reference and

00:11:02,589 --> 00:11:10,480
taking various x value right at the

00:11:04,839 --> 00:11:12,189
ampersand in there technically every

00:11:10,480 --> 00:11:15,459
variable in PHP is a reference of some

00:11:12,189 --> 00:11:17,829
kind what we have our copy and write

00:11:15,459 --> 00:11:19,959
reference sets when this is r fi u is 0

00:11:17,829 --> 00:11:21,670
and full reference sets which are what

00:11:19,959 --> 00:11:24,519
you think of when you say references

00:11:21,670 --> 00:11:26,410
when this I use one but even in copy and

00:11:24,519 --> 00:11:28,509
write sets we can have the ref count to

00:11:26,410 --> 00:11:30,490
go up to maybe 10 because 10 variables

00:11:28,509 --> 00:11:33,149
are all sharing the same value that will

00:11:30,490 --> 00:11:35,170
only get replaced when you write to it

00:11:33,149 --> 00:11:38,800
don't worry too much about that right

00:11:35,170 --> 00:11:40,029
now for eighty percent your extension

00:11:38,800 --> 00:11:43,360
writing applications you only need to

00:11:40,029 --> 00:11:45,879
think about references so let's say

00:11:43,360 --> 00:11:47,709
you've got an eval you have an SN parse

00:11:45,879 --> 00:11:49,059
parameters to actually turn this into a

00:11:47,709 --> 00:11:51,610
c-type for you you're just going to take

00:11:49,059 --> 00:11:55,709
PHP p value how do you actually access

00:11:51,610 --> 00:11:55,709
it well you got this handy

00:11:57,120 --> 00:12:02,050
macro that I didn't put up here it's on

00:12:00,430 --> 00:12:04,839
the later side I'm sure called z-type

00:12:02,050 --> 00:12:07,450
this allows you to examine what the type

00:12:04,839 --> 00:12:09,959
of that V value is it's like simply

00:12:07,450 --> 00:12:12,730
dereferencing it and looking at the type

00:12:09,959 --> 00:12:14,470
element but because PHP likes to

00:12:12,730 --> 00:12:17,529
everything in macros you're encouraged

00:12:14,470 --> 00:12:19,570
to use e-type macro if I've got an

00:12:17,529 --> 00:12:23,040
immediate VEVO I would say the type of

00:12:19,570 --> 00:12:28,420
the check it if it's a you know a

00:12:23,040 --> 00:12:31,660
stringer array as I do as I did

00:12:28,420 --> 00:12:36,040
somewhere I'm sure I thought I had maybe

00:12:31,660 --> 00:12:37,600
I didn't oh well use any type to examine

00:12:36,040 --> 00:12:40,300
what type is and then use any of these

00:12:37,600 --> 00:12:41,500
Easter valdi Val Val be Val whatever

00:12:40,300 --> 00:12:44,350
macros to actually get at the underlying

00:12:41,500 --> 00:12:45,970
thing this is great for readability you

00:12:44,350 --> 00:12:48,040
don't have to follow these arrows down

00:12:45,970 --> 00:12:50,410
multiple paths to find out what it is

00:12:48,040 --> 00:12:52,080
and it's also good for consistency

00:12:50,410 --> 00:12:54,459
between versions because occasionally

00:12:52,080 --> 00:12:57,490
the meanings of these things do change a

00:12:54,459 --> 00:13:01,240
little bit particularly as it relates to

00:12:57,490 --> 00:13:03,130
objects the macros in this form will

00:13:01,240 --> 00:13:04,750
take an immediate v doubt if you throw

00:13:03,130 --> 00:13:06,520
an underscore p on it as i've shown on

00:13:04,750 --> 00:13:08,320
the left that'll take a pointer to the

00:13:06,520 --> 00:13:10,870
eval or PP as a pointer to a pointer to

00:13:08,320 --> 00:13:12,100
the eval there are chasing is why your

00:13:10,870 --> 00:13:14,200
have pointers for justice for justice

00:13:12,100 --> 00:13:18,880
orders does eval we don't have that many

00:13:14,200 --> 00:13:21,100
peas so here's an example of actually

00:13:18,880 --> 00:13:24,160
using some of those we've used our Z

00:13:21,100 --> 00:13:26,010
type p macro to analyze what thing we've

00:13:24,160 --> 00:13:30,310
gotten out of the parameter stack

00:13:26,010 --> 00:13:32,680
depending on what that is this is a null

00:13:30,310 --> 00:13:35,890
so it's nothing this is abilene so we're

00:13:32,680 --> 00:13:37,690
going to say true or false so long so

00:13:35,890 --> 00:13:40,150
we're going to put out a long value

00:13:37,690 --> 00:13:42,670
etcetera etcetera I've avoided getting

00:13:40,150 --> 00:13:46,240
too deep into how you deal with arrays

00:13:42,670 --> 00:13:47,529
resources and objects just yet I'm not

00:13:46,240 --> 00:13:50,760
going to touch resources because their

00:13:47,529 --> 00:13:50,760
ancients and should die anyway

00:13:51,170 --> 00:13:57,360
I do they should die because actually

00:13:54,120 --> 00:14:00,590
php5 objects are resources on steroids

00:13:57,360 --> 00:14:03,480
anyway so there the better way to go

00:14:00,590 --> 00:14:06,570
take a quick look at variable arguments

00:14:03,480 --> 00:14:12,180
you remember this modifier from an

00:14:06,570 --> 00:14:14,250
earlier slide right bar there the star

00:14:12,180 --> 00:14:17,100
and the plus indicate variable argument

00:14:14,250 --> 00:14:19,080
lists in sort of a regex style star

00:14:17,100 --> 00:14:20,460
means I can take any number of

00:14:19,080 --> 00:14:22,350
parameters but I don't have to get any

00:14:20,460 --> 00:14:25,800
pluses I can take any number of pairs

00:14:22,350 --> 00:14:27,360
but I have to get at least one and this

00:14:25,800 --> 00:14:30,450
was the for pointers to Z Val I was

00:14:27,360 --> 00:14:31,920
talking about if you do use it you're

00:14:30,450 --> 00:14:34,200
going to pass in a reference to an evil

00:14:31,920 --> 00:14:35,550
star star star and a reference to an

00:14:34,200 --> 00:14:41,610
itch that will basically give you your

00:14:35,550 --> 00:14:45,770
our geography of parameters so it was

00:14:41,610 --> 00:14:45,770
our dip here's art no here's our example

00:14:46,010 --> 00:14:50,250
so that's for bull that goes in my Zen

00:14:48,450 --> 00:14:53,420
pool here I've asked for varargs that's

00:14:50,250 --> 00:14:56,550
going to go into names and names count

00:14:53,420 --> 00:14:59,610
and what am i doing I'm moving through

00:14:56,550 --> 00:15:02,610
names all the way up to names count

00:14:59,610 --> 00:15:05,430
minus one essentially this gets a little

00:15:02,610 --> 00:15:10,020
bit magic here because it's arrays been

00:15:05,430 --> 00:15:11,970
passed in and I only want strings well

00:15:10,020 --> 00:15:14,100
I've got no guarantee that what's in the

00:15:11,970 --> 00:15:15,810
array is a string to begin with so again

00:15:14,100 --> 00:15:17,610
I have to separate these values out and

00:15:15,810 --> 00:15:21,390
make copies of them the way I'm doing

00:15:17,610 --> 00:15:24,630
that in my own code is I'm saying copy

00:15:21,390 --> 00:15:27,240
this C Bell to that Z Val you sort of

00:15:24,630 --> 00:15:29,580
map out to here so here's one of my Z

00:15:27,240 --> 00:15:31,620
valves it's the ice part of the array

00:15:29,580 --> 00:15:33,770
which would be a the bell star star I

00:15:31,620 --> 00:15:37,320
dear after that would see it all star

00:15:33,770 --> 00:15:40,070
I'm saying copy that into this temporary

00:15:37,320 --> 00:15:42,660
variable and don't distract the original

00:15:40,070 --> 00:15:45,150
then you convert that temporary variable

00:15:42,660 --> 00:15:48,650
to a string I can output it and then I

00:15:45,150 --> 00:15:48,650
kill that temporary variable

00:15:48,949 --> 00:15:53,730
and of course I have free the list of

00:15:51,740 --> 00:15:55,290
variable arguments because that was

00:15:53,730 --> 00:16:02,519
allocated for me when I called then

00:15:55,290 --> 00:16:06,180
parse parameters so there are two types

00:16:02,519 --> 00:16:07,620
of memory PHP extensions one is the

00:16:06,180 --> 00:16:10,070
memory you all know and love from

00:16:07,620 --> 00:16:12,930
writing C programs those come from Malik

00:16:10,070 --> 00:16:14,550
this is arm you allocate and it doesn't

00:16:12,930 --> 00:16:17,190
get freed until the program dies or you

00:16:14,550 --> 00:16:19,350
explicitly free it this doesn't work

00:16:17,190 --> 00:16:21,720
very well for PHP's notion of shared

00:16:19,350 --> 00:16:23,220
nothing in order to make sure that all

00:16:21,720 --> 00:16:26,070
memory gets freed at the end of a

00:16:23,220 --> 00:16:27,660
request PHP actually asks you to use its

00:16:26,070 --> 00:16:29,550
own set of allocator functions which

00:16:27,660 --> 00:16:31,410
come from a separate memory pool and if

00:16:29,550 --> 00:16:33,000
you forget to deallocate something if

00:16:31,410 --> 00:16:34,470
you forget to clean up after yourself

00:16:33,000 --> 00:16:36,660
it's just going to dump it on the floor

00:16:34,470 --> 00:16:38,970
and it's going to say okay just forget

00:16:36,660 --> 00:16:41,250
it free that memory and may not have

00:16:38,970 --> 00:16:43,889
been cleaned up freely but sorry may

00:16:41,250 --> 00:16:45,660
have it not have been freed cleanly but

00:16:43,889 --> 00:16:46,949
at least it's free and I'm not going to

00:16:45,660 --> 00:16:49,560
run out of memory during the course of a

00:16:46,949 --> 00:16:51,570
process all you really need to know is

00:16:49,560 --> 00:16:52,709
if you're allocating memory that is only

00:16:51,570 --> 00:16:55,019
supposed to look for the length of your

00:16:52,709 --> 00:16:57,089
quest toss a knee onto the beginning of

00:16:55,019 --> 00:16:59,730
your malloc function that's this whole

00:16:57,089 --> 00:17:03,029
slide is just say use any and i don't

00:16:59,730 --> 00:17:05,120
mean the drugs drugs back except the

00:17:03,029 --> 00:17:08,329
good

00:17:05,120 --> 00:17:10,430
and especially the great ones so I'm

00:17:08,329 --> 00:17:12,110
riding Z belt you saw a hint of one of

00:17:10,430 --> 00:17:14,300
these macros already this Z Val

00:17:12,110 --> 00:17:19,189
underscore whatever that actually means

00:17:14,300 --> 00:17:22,250
right into AZ bell star some value again

00:17:19,189 --> 00:17:24,829
we've got our scalars you should be

00:17:22,250 --> 00:17:27,079
pretty straightforward put it into juror

00:17:24,829 --> 00:17:28,550
into the Z Val and set its I'd put a

00:17:27,079 --> 00:17:33,470
double into the city Bell said its type

00:17:28,550 --> 00:17:35,930
yada yada there are some more what's a

00:17:33,470 --> 00:17:38,540
good example I didn't elicit evals email

00:17:35,930 --> 00:17:41,330
why did I not do that wells evals eval

00:17:38,540 --> 00:17:43,400
as you saw takes four things the z value

00:17:41,330 --> 00:17:46,309
writing into the z value writing from

00:17:43,400 --> 00:17:48,260
and then to bullying flags whether you

00:17:46,309 --> 00:17:53,870
want it to be a copy so whether you want

00:17:48,260 --> 00:17:55,100
to destruct the original value usually

00:17:53,870 --> 00:17:57,290
you want to copy the only reason you

00:17:55,100 --> 00:17:59,690
might not want to copy is because you

00:17:57,290 --> 00:18:01,850
just need to let some others eval take

00:17:59,690 --> 00:18:04,940
ownership of underlying data which is

00:18:01,850 --> 00:18:07,190
kind of an odd case and usually you

00:18:04,940 --> 00:18:09,500
don't want to destruct unless you're

00:18:07,190 --> 00:18:15,290
explicitly taking away one reference to

00:18:09,500 --> 00:18:16,940
that variable as you separate it up this

00:18:15,290 --> 00:18:19,370
just takes a quick look at dealing with

00:18:16,940 --> 00:18:20,570
writing two arrays these are completely

00:18:19,370 --> 00:18:23,600
different-looking functions and the

00:18:20,570 --> 00:18:28,730
macros we have up here because PHP is

00:18:23,600 --> 00:18:30,470
all about consistency right initialize

00:18:28,730 --> 00:18:33,440
an empty array this is like saying

00:18:30,470 --> 00:18:35,000
dollar a equals array put things into it

00:18:33,440 --> 00:18:38,390
this just hopefully be pretty

00:18:35,000 --> 00:18:40,940
straightforward the T down here is going

00:18:38,390 --> 00:18:45,350
to be your various types no long double

00:18:40,940 --> 00:18:46,910
string string L etc etc if you want to

00:18:45,350 --> 00:18:48,920
make nests to raise you can just create

00:18:46,910 --> 00:18:52,490
a second develop it has your nested

00:18:48,920 --> 00:18:54,410
array they use add a soap z valor at

00:18:52,490 --> 00:18:57,770
next index eval or whatever to put that

00:18:54,410 --> 00:18:59,300
inside the bottom left table there is

00:18:57,770 --> 00:19:00,620
about dealing with references and

00:18:59,300 --> 00:19:02,660
reference counting I'm not going to go

00:19:00,620 --> 00:19:06,110
into those in detail except to say that

00:19:02,660 --> 00:19:08,630
they exist getting into how references

00:19:06,110 --> 00:19:10,790
work is a much deeper topic that we can

00:19:08,630 --> 00:19:13,130
probably talk over over a beer and I'll

00:19:10,790 --> 00:19:14,650
give you more information that you want

00:19:13,130 --> 00:19:17,510
to know

00:19:14,650 --> 00:19:19,640
by the way beer not cider I had a bad

00:19:17,510 --> 00:19:24,200
experience of cider last date but the

00:19:19,640 --> 00:19:26,059
party was great right so how do these

00:19:24,200 --> 00:19:28,130
actually translate into returning values

00:19:26,059 --> 00:19:30,200
from functions well as part of that

00:19:28,130 --> 00:19:32,690
prototype that we get from this macro

00:19:30,200 --> 00:19:34,910
there's a parameter that comes into your

00:19:32,690 --> 00:19:36,380
function which is as evil star that the

00:19:34,910 --> 00:19:39,770
evil star is actually where your result

00:19:36,380 --> 00:19:42,740
value goes when you compute it and store

00:19:39,770 --> 00:19:45,260
it so we've done here the visas function

00:19:42,740 --> 00:19:46,669
return long a plus B this is saying

00:19:45,260 --> 00:19:50,419
here's my value that I want to return

00:19:46,669 --> 00:19:53,390
here's a type that it is and the return

00:19:50,419 --> 00:19:56,000
macro is actually a wrapper around red

00:19:53,390 --> 00:19:58,429
valve long return red bow long is an a

00:19:56,000 --> 00:20:00,110
wrapper around Ziebell long specifying

00:19:58,429 --> 00:20:02,210
the return value these are just

00:20:00,110 --> 00:20:07,370
contrivance as they're just to make your

00:20:02,210 --> 00:20:11,049
code a little bit more readable use

00:20:07,370 --> 00:20:11,049
whichever feels right to you

00:20:12,200 --> 00:20:17,460
returning strings you have one extra

00:20:14,280 --> 00:20:20,520
thing to think about and that is copying

00:20:17,460 --> 00:20:22,560
of the value if your past if you're like

00:20:20,520 --> 00:20:24,990
returning a constant string you just had

00:20:22,560 --> 00:20:26,730
double quote foo end quote well that

00:20:24,990 --> 00:20:29,190
string doesn't belong to the engine that

00:20:26,730 --> 00:20:31,320
belongs to the process fee so you don't

00:20:29,190 --> 00:20:34,200
want the engine eventually freeing that

00:20:31,320 --> 00:20:35,550
when the Z valves no longer used how do

00:20:34,200 --> 00:20:36,990
you solve that well you just tell the

00:20:35,550 --> 00:20:38,400
engine average free the underlying

00:20:36,990 --> 00:20:40,620
string values but you can't do that

00:20:38,400 --> 00:20:44,250
because sometimes you actually need to

00:20:40,620 --> 00:20:48,030
create strings dynamically such as not

00:20:44,250 --> 00:20:49,230
seen on this slide so sometimes but

00:20:48,030 --> 00:20:51,450
sometimes you do want the engine to

00:20:49,230 --> 00:20:53,750
clean a vacuum the solution is to let

00:20:51,450 --> 00:20:55,920
the engine always clean up after you and

00:20:53,750 --> 00:20:58,170
for constant strings you would use this

00:20:55,920 --> 00:21:00,540
one parameter to say automatically make

00:20:58,170 --> 00:21:02,760
a copy of this it'll do an easter dup on

00:21:00,540 --> 00:21:07,350
it which is just like a stirred up but

00:21:02,760 --> 00:21:09,480
for engine at me bottom line if you

00:21:07,350 --> 00:21:11,640
email kit yourself and it only belongs

00:21:09,480 --> 00:21:14,670
to the variable you returning use zero

00:21:11,640 --> 00:21:16,350
otherwise these one and if you get the

00:21:14,670 --> 00:21:20,120
wrong one then file come out and say

00:21:16,350 --> 00:21:22,410
leak detected fix it fix it fix it oh

00:21:20,120 --> 00:21:25,080
here's an example I knew I had this in

00:21:22,410 --> 00:21:27,600
here PHP has got its own special SP

00:21:25,080 --> 00:21:30,180
printf function this works just like SN

00:21:27,600 --> 00:21:32,340
printf or s printf accept it takes a

00:21:30,180 --> 00:21:34,140
pointer to a car star and will actually

00:21:32,340 --> 00:21:36,450
email like that for you to just the

00:21:34,140 --> 00:21:39,540
right size to fit your string and then

00:21:36,450 --> 00:21:41,760
copy it into that location because this

00:21:39,540 --> 00:21:46,920
has now been email it we're going to

00:21:41,760 --> 00:21:49,230
pass 0 on to return string because the

00:21:46,920 --> 00:21:51,980
engine cannot take ownership of that we

00:21:49,230 --> 00:21:51,980
don't need to copy it

00:21:53,610 --> 00:21:58,440
and I actually feel like I'm going too

00:21:55,380 --> 00:22:00,240
fast so if people have questions we can

00:21:58,440 --> 00:22:02,610
definitely fit those in there I was so

00:22:00,240 --> 00:22:07,020
worried I was gonna run out of time uh

00:22:02,610 --> 00:22:09,240
so let's look at populating summer Rae's

00:22:07,020 --> 00:22:11,130
I sort of described as verbally this is

00:22:09,240 --> 00:22:14,549
a visual slide so you can actually make

00:22:11,130 --> 00:22:18,270
sense of it array in it again it's just

00:22:14,549 --> 00:22:20,490
like dollar read equals array add to

00:22:18,270 --> 00:22:23,280
specific string index sorry add to a

00:22:20,490 --> 00:22:24,960
specific numeric index add to the next

00:22:23,280 --> 00:22:29,669
available numeric index add to an

00:22:24,960 --> 00:22:31,919
associative index on and on PHP arrays

00:22:29,669 --> 00:22:34,559
will do the same thing internally that

00:22:31,919 --> 00:22:36,150
they do in user user space since this is

00:22:34,559 --> 00:22:37,559
a numeric string it'll actually

00:22:36,150 --> 00:22:45,090
translate that to a numeric string

00:22:37,559 --> 00:22:47,090
formed into a numeric value for you and

00:22:45,090 --> 00:22:49,980
then we just add some more things to it

00:22:47,090 --> 00:22:52,169
we've got a sub array here for spanish

00:22:49,980 --> 00:22:55,590
language greetings we're essentially

00:22:52,169 --> 00:22:57,870
saying here's a new very new array throw

00:22:55,590 --> 00:23:02,299
some things into it and then pop that on

00:22:57,870 --> 00:23:02,299
or push that on to return all right

00:23:03,200 --> 00:23:12,309
pretty straightforward out

00:23:06,470 --> 00:23:16,400
so examinee raise sorry is a bit uglier

00:23:12,309 --> 00:23:19,220
instead of having nice intended for PHP

00:23:16,400 --> 00:23:21,260
arrays semantics around it the

00:23:19,220 --> 00:23:24,530
re-examination functions are all built

00:23:21,260 --> 00:23:26,690
around the Zen hash table which is the

00:23:24,530 --> 00:23:29,240
underlying function that an underlying

00:23:26,690 --> 00:23:30,740
implementation of an array but it's also

00:23:29,240 --> 00:23:37,220
the underlying implementation the class

00:23:30,740 --> 00:23:40,640
table the function table the whole bunch

00:23:37,220 --> 00:23:42,110
of module list everything that's in the

00:23:40,640 --> 00:23:45,140
zend engine lives inside of a hash table

00:23:42,110 --> 00:23:46,610
so it's much more generic and the

00:23:45,140 --> 00:23:50,330
structures wind up looking a bit uglier

00:23:46,610 --> 00:23:52,400
we have to do things like casting our Z

00:23:50,330 --> 00:23:53,720
Val stars are stars to void star stars

00:23:52,400 --> 00:23:56,059
in order to make them fit into the

00:23:53,720 --> 00:23:59,510
variable time correctly it's kind of

00:23:56,059 --> 00:24:02,980
ugly but at the end of the day you have

00:23:59,510 --> 00:24:06,080
these basic set of examination functions

00:24:02,980 --> 00:24:08,570
you can find out if check your keys

00:24:06,080 --> 00:24:11,720
exist in array or indexes if you say

00:24:08,570 --> 00:24:15,940
them hash indexing this you can pull

00:24:11,720 --> 00:24:18,350
them out of arrays using fine Aaron it

00:24:15,940 --> 00:24:21,830
again this is for associative there's an

00:24:18,350 --> 00:24:25,490
hash index fine for numerically indexed

00:24:21,830 --> 00:24:27,890
arrays for your for variable arrays

00:24:25,490 --> 00:24:30,890
they're always going to come out as V

00:24:27,890 --> 00:24:32,470
Val star stars which of course passing

00:24:30,890 --> 00:24:37,750
reference to the real star force star

00:24:32,470 --> 00:24:41,390
and what else have I done with it here I

00:24:37,750 --> 00:24:44,510
said as long as it exists saying that it

00:24:41,390 --> 00:24:46,990
exists as long as it's a string put out

00:24:44,510 --> 00:24:50,090
this value otherwise just say not string

00:24:46,990 --> 00:24:55,230
straight card

00:24:50,090 --> 00:24:56,280
so that's basic extensions questions so

00:24:55,230 --> 00:25:00,990
far because we're going to switch gears

00:24:56,280 --> 00:25:02,370
a little bit all right I've made all

00:25:00,990 --> 00:25:05,550
your eyes glass over that's where we

00:25:02,370 --> 00:25:09,150
want to be the questions again can wait

00:25:05,550 --> 00:25:10,890
until we've got the beers later on so

00:25:09,150 --> 00:25:15,020
that module entry structure that's sort

00:25:10,890 --> 00:25:17,460
of start of all things PHP extensions

00:25:15,020 --> 00:25:18,990
again this points in our functions we've

00:25:17,460 --> 00:25:20,370
got a whole bunch of other pointers here

00:25:18,990 --> 00:25:24,450
that we can fill in with interesting

00:25:20,370 --> 00:25:27,780
things these first well okay technically

00:25:24,450 --> 00:25:32,670
five but really four of these represent

00:25:27,780 --> 00:25:34,050
life cycles of the PHP runtime I've got

00:25:32,670 --> 00:25:36,420
another slide that shows it a little bit

00:25:34,050 --> 00:25:41,760
more in detail but the idea is we have

00:25:36,420 --> 00:25:44,580
one sort of initial module in it point

00:25:41,760 --> 00:25:46,230
where this is the first time the module

00:25:44,580 --> 00:25:48,210
has any chance to do any sort of

00:25:46,230 --> 00:25:50,250
initialization this is your big startup

00:25:48,210 --> 00:25:52,320
this is when you call your sub libraries

00:25:50,250 --> 00:25:54,390
you know to build the tables whatever

00:25:52,320 --> 00:25:55,890
they have to do you can take extra time

00:25:54,390 --> 00:25:58,800
in this because this is only a one time

00:25:55,890 --> 00:26:00,480
thing it's only on server startup then

00:25:58,800 --> 00:26:02,970
we've got requests in it this is running

00:26:00,480 --> 00:26:04,410
every single page request you want to

00:26:02,970 --> 00:26:05,820
keep these as lean as possible because

00:26:04,410 --> 00:26:07,620
they're being run whether or not your

00:26:05,820 --> 00:26:10,110
extensions even be used in that page

00:26:07,620 --> 00:26:11,370
request but occasionally sometimes you

00:26:10,110 --> 00:26:12,960
have to do some times where you have to

00:26:11,370 --> 00:26:17,130
know a lot of value you have to reset

00:26:12,960 --> 00:26:19,530
counter whatever and what can you do in

00:26:17,130 --> 00:26:21,240
these things this is module in it that

00:26:19,530 --> 00:26:22,560
this slide is looking at this is where

00:26:21,240 --> 00:26:24,930
you're going to declare your constants

00:26:22,560 --> 00:26:27,030
you only need to do that one declare

00:26:24,930 --> 00:26:28,800
your ini settings all you need to do

00:26:27,030 --> 00:26:31,830
that once defined resource types only

00:26:28,800 --> 00:26:35,250
need to do that once declare classes and

00:26:31,830 --> 00:26:37,770
deal with any specific callbacks most

00:26:35,250 --> 00:26:39,630
extensions do not register system level

00:26:37,770 --> 00:26:42,720
callbacks these are for things like a PC

00:26:39,630 --> 00:26:45,399
it'll grab the compile hook and insert

00:26:42,720 --> 00:26:47,960
itself into that chain

00:26:45,399 --> 00:26:50,139
request it and shut down like I said

00:26:47,960 --> 00:26:53,149
these if for every single page request

00:26:50,139 --> 00:26:56,330
little stuff goes in here the filter

00:26:53,149 --> 00:26:58,429
extension uses this to grab all the page

00:26:56,330 --> 00:27:00,649
request data that comes in throw it into

00:26:58,429 --> 00:27:03,649
its internal values and then shove the

00:27:00,649 --> 00:27:06,159
you know HTML encoded versions of it and

00:27:03,649 --> 00:27:09,039
to get whatever it happens to be doing

00:27:06,159 --> 00:27:11,570
session extension will use the post

00:27:09,039 --> 00:27:14,119
request cleanup time to actually do the

00:27:11,570 --> 00:27:16,519
save right thanks to disk this is why

00:27:14,119 --> 00:27:20,840
you can have Auto Saving Station there's

00:27:16,519 --> 00:27:24,859
our auto saving sessions about it but

00:27:20,840 --> 00:27:26,179
there's more i glossed over module info

00:27:24,859 --> 00:27:27,440
this is just what comes out of PHP info

00:27:26,179 --> 00:27:30,499
I'm not going to talk about that that's

00:27:27,440 --> 00:27:34,460
all it needs to be said using the sort

00:27:30,499 --> 00:27:37,279
of DX versions of these sort of filler

00:27:34,460 --> 00:27:39,710
macros we can get access to a few extra

00:27:37,279 --> 00:27:45,259
pieces that can be put in here these

00:27:39,710 --> 00:27:47,359
were introduced in 5.1 and these were

00:27:45,259 --> 00:27:49,340
introduced to 5.2 so if you're writing

00:27:47,359 --> 00:27:51,470
extensions for very very old versions of

00:27:49,340 --> 00:27:52,970
page paper and mind you either can't use

00:27:51,470 --> 00:27:55,759
those or you need to put some if death

00:27:52,970 --> 00:27:57,220
checks in to make sure that they're not

00:27:55,759 --> 00:27:59,480
going to be used when they can't be

00:27:57,220 --> 00:28:03,019
ignore this ini entries it doesn't I

00:27:59,480 --> 00:28:05,239
think work dependencies is good for

00:28:03,019 --> 00:28:07,700
making sure that your extension loads up

00:28:05,239 --> 00:28:10,369
at the right time as an example if

00:28:07,700 --> 00:28:14,749
somebody writes a up code optimizer that

00:28:10,369 --> 00:28:16,340
wants to get loaded before a pc so that

00:28:14,749 --> 00:28:18,409
it can do the optimizations on the up

00:28:16,340 --> 00:28:20,659
code before a pc actually stores them in

00:28:18,409 --> 00:28:23,210
shared memory so it's going to say i

00:28:20,659 --> 00:28:26,090
have a reverse dependency on a pc

00:28:23,210 --> 00:28:27,200
because i have to run before a pc option

00:28:26,090 --> 00:28:30,080
rivers depend to see what it would be

00:28:27,200 --> 00:28:31,369
other example might be P do the PD on my

00:28:30,080 --> 00:28:34,369
sequel driver is going to have a direct

00:28:31,369 --> 00:28:35,269
dependency on P do because well the

00:28:34,369 --> 00:28:37,850
functions aren't going to be in the

00:28:35,269 --> 00:28:40,509
process space and tell ppl loads so it

00:28:37,850 --> 00:28:40,509
has to load first

00:28:43,880 --> 00:28:49,169
stuff at the bottom I almost dragged

00:28:47,580 --> 00:28:52,910
going into this because of the amount of

00:28:49,169 --> 00:28:55,500
time that we have but global variables

00:28:52,910 --> 00:28:57,440
this is not a PHP script this is not

00:28:55,500 --> 00:28:59,880
isolated to just your page request

00:28:57,440 --> 00:29:04,650
global variables within c space means

00:28:59,880 --> 00:29:06,299
that every single extension and bit of

00:29:04,650 --> 00:29:09,260
the runtime is what it is going to be

00:29:06,299 --> 00:29:11,940
fighting over the same data space and

00:29:09,260 --> 00:29:13,169
multiple requests are going to be

00:29:11,940 --> 00:29:18,659
fighting over the same data space as

00:29:13,169 --> 00:29:20,760
well fortunately zens got a layer in it

00:29:18,659 --> 00:29:22,890
called TS RM this thread safe resource

00:29:20,760 --> 00:29:26,820
manager that will allow you to define

00:29:22,890 --> 00:29:31,080
sort of Global's that are in their own

00:29:26,820 --> 00:29:32,610
little buckets per thread so if you've

00:29:31,080 --> 00:29:34,260
got two requests that are processing at

00:29:32,610 --> 00:29:35,850
the exact same time in the same process

00:29:34,260 --> 00:29:37,950
face because multi-threaded web server

00:29:35,850 --> 00:29:39,690
you're not going to have both of them

00:29:37,950 --> 00:29:41,250
trying to write to the same global

00:29:39,690 --> 00:29:42,630
variable at the same time because they

00:29:41,250 --> 00:29:46,169
each have their own per thread copy of

00:29:42,630 --> 00:29:47,820
it this is where you define what the

00:29:46,169 --> 00:29:49,740
size of that structure is what that

00:29:47,820 --> 00:29:51,179
structure looks like how to initialize

00:29:49,740 --> 00:29:54,120
it and how to shut it down at the start

00:29:51,179 --> 00:29:56,580
in the end of each thread don't look at

00:29:54,120 --> 00:29:59,090
post request shutdown that was bashed in

00:29:56,580 --> 00:30:01,620
for one particular internal extension

00:29:59,090 --> 00:30:03,380
there's really not a lot of good reason

00:30:01,620 --> 00:30:05,580
for using it and it has to do with

00:30:03,380 --> 00:30:08,510
processing after objects have been

00:30:05,580 --> 00:30:10,380
forced to destructive just ignored sir

00:30:08,510 --> 00:30:13,350
so this is kind of what the right

00:30:10,380 --> 00:30:17,179
lifecycle looks like we get one in

00:30:13,350 --> 00:30:22,080
eminent 1m shutdown they all they happen

00:30:17,179 --> 00:30:24,270
except in to pacha one so in apache 1.3

00:30:22,080 --> 00:30:25,710
we actually get an a minute and shut

00:30:24,270 --> 00:30:28,679
down a minute cycle at the beginning

00:30:25,710 --> 00:30:31,159
it's just the way it patchy works try to

00:30:28,679 --> 00:30:31,159
ignore it

00:30:31,200 --> 00:30:34,710
every time a thread starts up we get

00:30:33,059 --> 00:30:37,919
this G in it every time the thread shuts

00:30:34,710 --> 00:30:39,299
down we get the g shutdown which i did a

00:30:37,919 --> 00:30:41,490
copy paste error in there i'm going to

00:30:39,299 --> 00:30:44,789
fix that this is g shut down at the

00:30:41,490 --> 00:30:48,539
bottom and this is our shutdown more

00:30:44,789 --> 00:30:52,169
copy paste problems you're like we

00:30:48,539 --> 00:30:53,639
really like initializing for each page

00:30:52,169 --> 00:30:56,130
request that's our block of three here

00:30:53,639 --> 00:31:00,840
we are in it we go under our runtime and

00:30:56,130 --> 00:31:02,190
then we are shut down except side nobody

00:31:00,840 --> 00:31:03,659
mentioned that a positive by the way I

00:31:02,190 --> 00:31:07,080
had the same slide up and nobody even

00:31:03,659 --> 00:31:10,320
mentioned it so thread Global's looking

00:31:07,080 --> 00:31:12,149
at those again you know if you're if

00:31:10,320 --> 00:31:13,799
you're in a single threaded application

00:31:12,149 --> 00:31:15,269
you kind of don't care about this you

00:31:13,799 --> 00:31:17,279
can ignore all this extra stuff and you

00:31:15,269 --> 00:31:19,470
just say well I I've got a global I'm

00:31:17,279 --> 00:31:22,440
gonna access it and I don't care i do

00:31:19,470 --> 00:31:24,149
what i want but because PHP might get

00:31:22,440 --> 00:31:26,399
loaded into a threaded environment you

00:31:24,149 --> 00:31:28,889
might be using it in apache to worker we

00:31:26,399 --> 00:31:32,039
need to have these structures defined

00:31:28,889 --> 00:31:35,820
here again macros because PHP loves

00:31:32,039 --> 00:31:38,730
macros this is going to define zend

00:31:35,820 --> 00:31:40,590
hello Global's as a structure with all

00:31:38,730 --> 00:31:43,049
the things that you want to use as per

00:31:40,590 --> 00:31:45,419
thread Global's we're going to have a

00:31:43,049 --> 00:31:47,519
specialized access or macros so we can

00:31:45,419 --> 00:31:50,940
actually get to those within our script

00:31:47,519 --> 00:31:52,559
in a non-threaded environment we just

00:31:50,940 --> 00:31:55,260
declare this once in the real global

00:31:52,559 --> 00:31:57,870
scope we accessed by a nice and quick

00:31:55,260 --> 00:32:00,419
and easy in a threaded context we go

00:31:57,870 --> 00:32:04,860
through a deeper chain this macro

00:32:00,419 --> 00:32:06,419
expands to a gigantic pointer hell I've

00:32:04,860 --> 00:32:08,159
got an example of it on my blog if you

00:32:06,419 --> 00:32:12,450
want to see what that looks like it's

00:32:08,159 --> 00:32:14,639
ugly but again we initialize it at

00:32:12,450 --> 00:32:16,110
thread startup we don't actually have a

00:32:14,639 --> 00:32:18,210
need to shut it down because none of

00:32:16,110 --> 00:32:20,909
these things are really doing anything

00:32:18,210 --> 00:32:22,970
special maybe lib data's gotta shut down

00:32:20,909 --> 00:32:25,110
you might

00:32:22,970 --> 00:32:29,460
and then we're using them up here using

00:32:25,110 --> 00:32:31,080
our custom macro which is going to grab

00:32:29,460 --> 00:32:33,150
the counter element out of the structure

00:32:31,080 --> 00:32:35,190
so this is essentially giving you access

00:32:33,150 --> 00:32:37,170
to this long on a per thread basis and

00:32:35,190 --> 00:32:38,850
within that thread we're just

00:32:37,170 --> 00:32:43,260
incrementing this each time that

00:32:38,850 --> 00:32:48,630
function is called really exciting it no

00:32:43,260 --> 00:32:50,040
oh I and I settings these are old I and

00:32:48,630 --> 00:32:54,860
I settings these are peach before I and

00:32:50,040 --> 00:32:57,210
I settings these are nice and easy to do

00:32:54,860 --> 00:32:59,040
here's the name of my setting here's its

00:32:57,210 --> 00:33:04,860
default value here's when it's allowed

00:32:59,040 --> 00:33:07,320
to be changed and ignore that accessing

00:33:04,860 --> 00:33:09,210
it though is ugly because what are we

00:33:07,320 --> 00:33:11,400
doing here we're saying give me a blue

00:33:09,210 --> 00:33:12,360
mean than this I and I said well how's

00:33:11,400 --> 00:33:14,010
it going to do that it's going to look

00:33:12,360 --> 00:33:16,140
up the string version of that ini

00:33:14,010 --> 00:33:21,060
setting and convert that to a boolean

00:33:16,140 --> 00:33:24,810
value on every single invocation if you

00:33:21,060 --> 00:33:27,080
really want to cast a string to abilene

00:33:24,810 --> 00:33:29,280
every time you look at this probably not

00:33:27,080 --> 00:33:32,790
we're saying this can be said anytime

00:33:29,280 --> 00:33:35,190
you want and it should write itself into

00:33:32,790 --> 00:33:39,390
the polite variable inside the Zen hello

00:33:35,190 --> 00:33:41,100
global structure now we're an access to

00:33:39,390 --> 00:33:43,440
that using those that thread macro that

00:33:41,100 --> 00:33:45,300
we had before so instead of pulling out

00:33:43,440 --> 00:33:47,910
a string from a hash table and

00:33:45,300 --> 00:33:50,220
converting that to abilene we're just

00:33:47,910 --> 00:33:52,230
going to look straight into here which

00:33:50,220 --> 00:33:54,570
again on an on trend environment is

00:33:52,230 --> 00:33:57,930
literally just looking in the process

00:33:54,570 --> 00:34:00,480
base it's a single pointer look up much

00:33:57,930 --> 00:34:03,540
more efficient although a little bit

00:34:00,480 --> 00:34:05,100
harder to understand the first thing we

00:34:03,540 --> 00:34:07,290
also get the advantage that if you set

00:34:05,100 --> 00:34:08,550
hello top flight to fubar it's going to

00:34:07,290 --> 00:34:11,970
complain and it's going to say that is a

00:34:08,550 --> 00:34:14,450
meaningless irrelevant value for us so

00:34:11,970 --> 00:34:14,450
don't do that

00:34:14,800 --> 00:34:21,880
the clearing Constance could not be

00:34:16,990 --> 00:34:23,470
simpler one line done moving on I do

00:34:21,880 --> 00:34:27,940
have one example in there that got

00:34:23,470 --> 00:34:29,200
introduced at 534 namespaces obviously

00:34:27,940 --> 00:34:33,340
you specify the namespace you wanted to

00:34:29,200 --> 00:34:35,530
go in now we're done important thing

00:34:33,340 --> 00:34:38,620
about Constance is that they can only be

00:34:35,530 --> 00:34:40,570
truly well I wanting to say that they

00:34:38,620 --> 00:34:42,820
can only be PHP's definition of scalar

00:34:40,570 --> 00:34:45,700
values that is to say along a double or

00:34:42,820 --> 00:34:49,780
a string weirdly there's no macro for

00:34:45,700 --> 00:34:51,700
believe there's a way to do that look

00:34:49,780 --> 00:34:53,980
for some examples of that elsewhere in

00:34:51,700 --> 00:34:55,030
the code base it's kind of ugly I don't

00:34:53,980 --> 00:34:59,110
know why nobody's gotten around to

00:34:55,030 --> 00:35:02,320
actually adding that macro yet might

00:34:59,110 --> 00:35:03,850
complain to any of the Chordettes in the

00:35:02,320 --> 00:35:07,510
room that that you happen to come across

00:35:03,850 --> 00:35:09,670
don't complain to me because I don't

00:35:07,510 --> 00:35:12,730
want to hear it so objects classes are

00:35:09,670 --> 00:35:17,290
next we've only got like 15 minutes left

00:35:12,730 --> 00:35:19,390
10 hey I so your hands are coming up

00:35:17,290 --> 00:35:22,210
screw questions

00:35:19,390 --> 00:35:24,960
here's our basic class definition again

00:35:22,210 --> 00:35:29,230
could not be harder could not be simpler

00:35:24,960 --> 00:35:30,609
already in the slit we throw this into

00:35:29,230 --> 00:35:32,470
our a minute because we're just going to

00:35:30,609 --> 00:35:34,349
do it right when the module starts up we

00:35:32,470 --> 00:35:39,450
only need to declare the class once and

00:35:34,349 --> 00:35:41,799
we say here's a name register it done

00:35:39,450 --> 00:35:43,510
doing it with a namespace just means

00:35:41,799 --> 00:35:45,940
wrapping that name in a little macro all

00:35:43,510 --> 00:35:47,769
that macro really does is turn that into

00:35:45,940 --> 00:35:50,619
a string that says hello double

00:35:47,769 --> 00:35:52,569
backslash one that's all that macro

00:35:50,619 --> 00:35:56,170
actually does which don't pack sunscreen

00:35:52,569 --> 00:35:57,970
single back specially declaring methods

00:35:56,170 --> 00:35:59,170
going to look very familiar because this

00:35:57,970 --> 00:36:01,960
looks just like how we declared

00:35:59,170 --> 00:36:03,339
functions in the global scope we're

00:36:01,960 --> 00:36:06,130
going to have this in function entry

00:36:03,339 --> 00:36:08,410
exact same structure attached to our

00:36:06,130 --> 00:36:10,809
class definition and we're going to have

00:36:08,410 --> 00:36:13,510
PHP and these in here now instead of PHP

00:36:10,809 --> 00:36:15,400
fe only difference between these is that

00:36:13,510 --> 00:36:17,289
an emmy is going to accept the name of

00:36:15,400 --> 00:36:19,420
the class that goes with and it's going

00:36:17,289 --> 00:36:21,369
to get a spot for visibility the index

00:36:19,420 --> 00:36:24,220
is public the nexus private and access

00:36:21,369 --> 00:36:27,990
protected which can be piped with seat

00:36:24,220 --> 00:36:31,180
or detour static and a few other options

00:36:27,990 --> 00:36:33,970
and here's an example of that we've got

00:36:31,180 --> 00:36:35,200
a constructor named construct as it

00:36:33,970 --> 00:36:39,369
should be and actually flagged

00:36:35,200 --> 00:36:41,289
explicitly as a seat or constructive the

00:36:39,369 --> 00:36:42,430
argan pose the same organ fro you saw in

00:36:41,289 --> 00:36:44,079
functions there's no difference with

00:36:42,430 --> 00:36:46,240
those so i'm not going to cover them

00:36:44,079 --> 00:36:49,000
again magic methods work exactly the

00:36:46,240 --> 00:36:50,589
same get is just a function it's just a

00:36:49,000 --> 00:36:53,019
regular public function now no need to

00:36:50,589 --> 00:36:56,109
do anything special with it d struct

00:36:53,019 --> 00:36:57,970
gets marked as a detour and in this

00:36:56,109 --> 00:37:01,710
example we're defining s2 as a static

00:36:57,970 --> 00:37:01,710
function so we type that on there

00:37:03,570 --> 00:37:08,020
declaring properties anyone in this room

00:37:06,940 --> 00:37:10,300
should be able to look at that know

00:37:08,020 --> 00:37:12,550
exactly what's going on so I won't

00:37:10,300 --> 00:37:15,100
belabor the point again we have spots

00:37:12,550 --> 00:37:20,020
for visibility static or not blah blah

00:37:15,100 --> 00:37:21,400
blah digital is this slide about oh this

00:37:20,020 --> 00:37:22,840
is an actual method implementation

00:37:21,400 --> 00:37:24,940
obviously if we're going to declare them

00:37:22,840 --> 00:37:27,370
using those peach VMI's we also have to

00:37:24,940 --> 00:37:30,730
declare them using PHP method again

00:37:27,370 --> 00:37:32,140
works exactly the same as PHP function

00:37:30,730 --> 00:37:35,860
but we now have a spot for the class

00:37:32,140 --> 00:37:39,190
name in there fun fact the class name

00:37:35,860 --> 00:37:41,050
that you use in PHP Emmy and PHP method

00:37:39,190 --> 00:37:42,610
don't actually have to be their classes

00:37:41,050 --> 00:37:47,680
real name as long as they match each

00:37:42,610 --> 00:37:52,000
other it's probably bad practice to set

00:37:47,680 --> 00:37:53,800
them to holy hand grenade of antioch

00:37:52,000 --> 00:37:55,240
mostly because it's going to be a lot to

00:37:53,800 --> 00:37:56,650
type and also because it's going to

00:37:55,240 --> 00:37:58,600
confuse you when you look at the code in

00:37:56,650 --> 00:38:04,000
five years but they don't actually have

00:37:58,600 --> 00:38:06,630
to match just random data trivia so once

00:38:04,000 --> 00:38:12,520
we're in a method how do we get at this

00:38:06,630 --> 00:38:13,900
we get this I know that's hard right get

00:38:12,520 --> 00:38:15,880
this is going to be a Zed Val it's just

00:38:13,900 --> 00:38:18,850
going to be the actual objects of eval

00:38:15,880 --> 00:38:21,690
to work with and I'm sorry for slipping

00:38:18,850 --> 00:38:24,760
between different pronunciations of that

00:38:21,690 --> 00:38:27,370
can update a prop pretty straightforward

00:38:24,760 --> 00:38:30,000
stuff and sorry cameraman for jumping

00:38:27,370 --> 00:38:30,000
back and forth like that

00:38:30,880 --> 00:38:36,460
I don't even think I want to go into

00:38:34,930 --> 00:38:39,839
custom objects right now just because

00:38:36,460 --> 00:38:42,880
the amount of time we have isn't there

00:38:39,839 --> 00:38:45,599
again we can save this for the for the

00:38:42,880 --> 00:38:48,789
beer tab they get really complicated

00:38:45,599 --> 00:38:50,109
they get really really complicated if

00:38:48,789 --> 00:38:54,700
you want to see how complicated to get

00:38:50,109 --> 00:38:56,529
look at the source for run kick come

00:38:54,700 --> 00:38:58,990
back to the config in for we eventually

00:38:56,529 --> 00:39:01,329
want to link libraries in because most

00:38:58,990 --> 00:39:04,150
of what PHP extensions are our means to

00:39:01,329 --> 00:39:06,039
get from user space into library code so

00:39:04,150 --> 00:39:07,569
how do we link a library well here's an

00:39:06,039 --> 00:39:10,000
example this comes actually straight out

00:39:07,569 --> 00:39:11,619
of the sea lab configured for which is a

00:39:10,000 --> 00:39:14,140
bit more complicated this I compressed

00:39:11,619 --> 00:39:15,549
it down a bit what are we saying we're

00:39:14,140 --> 00:39:17,470
saying well we're going to use the PHP

00:39:15,549 --> 00:39:19,509
our width macro instead of the PHP argh

00:39:17,470 --> 00:39:22,569
enable macro these two macros are

00:39:19,509 --> 00:39:24,220
actually effectively identical the only

00:39:22,569 --> 00:39:26,829
difference is one use of the word enable

00:39:24,220 --> 00:39:29,500
one uses the word with by convention we

00:39:26,829 --> 00:39:31,059
use enable for extensions that don't

00:39:29,500 --> 00:39:32,650
depend on external libraries and with

00:39:31,059 --> 00:39:37,990
for extensions that do but that's just

00:39:32,650 --> 00:39:40,210
convention we've got a list of places we

00:39:37,990 --> 00:39:44,650
expect to find the hello library under

00:39:40,210 --> 00:39:48,730
user local or user if you pass dash dash

00:39:44,650 --> 00:39:50,319
with hello equals opt for example dad is

00:39:48,730 --> 00:39:52,569
going to go into your dollar PHP hello

00:39:50,319 --> 00:39:55,269
variable and that's why we've got it on

00:39:52,569 --> 00:39:58,569
this line here we can effectively now

00:39:55,269 --> 00:39:59,650
search user local user and opt in

00:39:58,569 --> 00:40:01,240
practice you probably should have this

00:39:59,650 --> 00:40:03,130
at the front since that's where the user

00:40:01,240 --> 00:40:06,099
said it is but I didn't really think

00:40:03,130 --> 00:40:07,299
about that one is writing this life the

00:40:06,099 --> 00:40:08,859
way we check to see if it's there we're

00:40:07,299 --> 00:40:10,359
just go look for its header because if

00:40:08,859 --> 00:40:12,599
we've got its header we probably have

00:40:10,359 --> 00:40:14,859
its library as well cross your fingers

00:40:12,599 --> 00:40:17,109
store that into another local variable

00:40:14,859 --> 00:40:19,029
if that variable never got set get to

00:40:17,109 --> 00:40:23,319
the user an error that says I don't have

00:40:19,029 --> 00:40:24,940
my library if they did set it just make

00:40:23,319 --> 00:40:29,579
sure the library is there link it in if

00:40:24,940 --> 00:40:33,009
it is a ditz include directory and then

00:40:29,579 --> 00:40:35,759
here's our new extension sorry our new

00:40:33,009 --> 00:40:35,759
extension was up here

00:40:38,150 --> 00:40:45,390
pretty easy to haul i hope we can use

00:40:42,600 --> 00:40:47,100
check library to find out what symbols

00:40:45,390 --> 00:40:48,630
are actually exposed by it this is

00:40:47,100 --> 00:40:51,630
important if you're dependent on a

00:40:48,630 --> 00:40:53,670
particular version of a library there

00:40:51,630 --> 00:40:55,440
are multiple versions of Livesey for

00:40:53,670 --> 00:40:57,450
example or zealand sorry there multiple

00:40:55,440 --> 00:41:00,240
versions of zealand some of them have

00:40:57,450 --> 00:41:02,100
Jeezy in it some have Jeezy anna & jeezy

00:41:00,240 --> 00:41:04,530
anna too so you might look to see if

00:41:02,100 --> 00:41:06,540
that jeezy in it too is in that library

00:41:04,530 --> 00:41:09,060
if it is you know you've got a recent

00:41:06,540 --> 00:41:11,220
enough version other things you can do

00:41:09,060 --> 00:41:16,290
is you can do an AC try run its familiar

00:41:11,220 --> 00:41:19,640
from all configure script and output the

00:41:16,290 --> 00:41:22,530
value of a header body a header

00:41:19,640 --> 00:41:23,790
define that may be another way to find

00:41:22,530 --> 00:41:30,060
out what version you doing did you raise

00:41:23,790 --> 00:41:33,150
your good Oh five minutes okay it's okay

00:41:30,060 --> 00:41:36,020
we're just that then here's an example

00:41:33,150 --> 00:41:36,020
of a seat Ryburn

00:41:37,650 --> 00:41:41,460
all i'm doing here is i'm saying val is

00:41:39,900 --> 00:41:44,039
of type of how do you value well that's

00:41:41,460 --> 00:41:45,809
not a useful program but it is useful

00:41:44,039 --> 00:41:48,569
for determining if we have this highly

00:41:45,809 --> 00:41:50,520
value struck type depth if it is this

00:41:48,569 --> 00:41:52,049
will build and run fine if it's not

00:41:50,520 --> 00:41:54,569
typed up we're going to get a build air

00:41:52,049 --> 00:41:58,770
and that's going to lead us into this

00:41:54,569 --> 00:42:02,279
third case so we can say whereas our

00:41:58,770 --> 00:42:05,490
checking up here checking for type

00:42:02,279 --> 00:42:08,520
dustin how th if it succeeded then we

00:42:05,490 --> 00:42:10,619
say all right and we move right along by

00:42:08,520 --> 00:42:15,450
defining this so that we can use it in a

00:42:10,619 --> 00:42:17,760
program otherwise we say crap we don't

00:42:15,450 --> 00:42:19,500
have that type def let's just not define

00:42:17,760 --> 00:42:25,500
this thing and move on and we'll just

00:42:19,500 --> 00:42:30,270
build without support for that windows

00:42:25,500 --> 00:42:33,630
does anyone in here use windows sorry

00:42:30,270 --> 00:42:39,770
does anyone here use windows for PHP and

00:42:33,630 --> 00:42:39,770
i don't mean your editor yeah um

00:42:39,890 --> 00:42:45,430
theoretically it's a role of an

00:42:41,640 --> 00:42:49,790
operating system so I include this slide

00:42:45,430 --> 00:42:52,869
that's what they tell me I what am I

00:42:49,790 --> 00:42:55,940
using oh yeah that's a Mac this is all

00:42:52,869 --> 00:42:58,609
vaguely javascript-based so the syntax

00:42:55,940 --> 00:43:02,660
is going to be familiar enough to use

00:42:58,609 --> 00:43:05,720
and we've designed the support within

00:43:02,660 --> 00:43:08,450
this framework to look as much like what

00:43:05,720 --> 00:43:10,670
auto cough uses you're going to have the

00:43:08,450 --> 00:43:13,940
same sort of functions check header add

00:43:10,670 --> 00:43:16,819
include matches up to check header Adam

00:43:13,940 --> 00:43:21,440
could imagine that although we have

00:43:16,819 --> 00:43:24,380
extension set of PHP new extension where

00:43:21,440 --> 00:43:28,430
to go next this is just basically your

00:43:24,380 --> 00:43:30,470
end of end of dec set of slides if you

00:43:28,430 --> 00:43:32,690
like books you can buy mine it's pretty

00:43:30,470 --> 00:43:34,579
much the only thing on the topic I'm not

00:43:32,690 --> 00:43:35,869
doing that as a plug I'm not getting my

00:43:34,579 --> 00:43:40,790
I haven't gotten money from that book in

00:43:35,869 --> 00:43:42,109
five years but it is a good resource you

00:43:40,790 --> 00:43:44,180
can also check out my blog I've got a

00:43:42,109 --> 00:43:47,750
bunch of entries again not particular

00:43:44,180 --> 00:43:50,990
reason ones but they are useful for sort

00:43:47,750 --> 00:43:55,720
of exercising the weird extents of wear

00:43:50,990 --> 00:43:58,150
extensions can go use a source obviously

00:43:55,720 --> 00:44:00,559
pickles full of very interesting things

00:43:58,150 --> 00:44:02,390
and I say very interesting things

00:44:00,559 --> 00:44:04,069
listing things like run kid and operator

00:44:02,390 --> 00:44:09,190
which do things you probably shouldn't

00:44:04,069 --> 00:44:09,190
be doing but PHP's API is very versatile

00:44:10,210 --> 00:44:14,059
the internal list is a good thing to

00:44:12,319 --> 00:44:15,290
read at least just so you know what's

00:44:14,059 --> 00:44:19,220
going on what's coming up in the

00:44:15,290 --> 00:44:21,260
language I'll get shot for saying this

00:44:19,220 --> 00:44:22,490
but you can also articulate participate

00:44:21,260 --> 00:44:24,710
in the discussions and throwing your

00:44:22,490 --> 00:44:25,970
shoes you're welcome to bug me on

00:44:24,710 --> 00:44:29,960
Twitter any time you want that's my

00:44:25,970 --> 00:44:33,940
twitter ID and that's all of that so any

00:44:29,960 --> 00:44:33,940
questions on that whole thing

00:44:34,060 --> 00:44:38,920
can't believe we hit time like almost

00:44:36,290 --> 00:44:38,920
perfectly there

00:44:44,220 --> 00:44:47,650
if they're if there's a hand back

00:44:46,450 --> 00:44:51,690
already started shouting because I can't

00:44:47,650 --> 00:44:54,250
see anything no questions okay awesome I

00:44:51,690 --> 00:44:58,710
accept gifts in beer and can be applied

00:44:54,250 --> 00:45:02,100
for any information you want I mean duh

00:44:58,710 --> 00:45:02,100
have a nice son

00:45:14,860 --> 00:45:16,920

YouTube URL: https://www.youtube.com/watch?v=pDk1yx_JycE


