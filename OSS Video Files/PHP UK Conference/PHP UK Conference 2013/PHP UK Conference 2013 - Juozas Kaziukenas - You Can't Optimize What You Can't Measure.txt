Title: PHP UK Conference 2013 - Juozas Kaziukenas - You Can't Optimize What You Can't Measure
Publication date: 2013-04-29
Playlist: PHP UK Conference 2013
Description: 
	Applications are complicated structures, usually consisting of a lot of moving parts and thus it's not so easy to tell if an app is not functioning properly. Luckily nowadays there are tools to monitor applications in production to both detect code level problems and most importantly also business-logic level problems. Let's look at various different tools to record and analyze metrics and how this could be useful to make sure an application is running correctly and a recent commit hasn't decreased it's performance.
Captions: 
	00:00:15,480 --> 00:00:21,040
let's talk about the optimization so

00:00:18,880 --> 00:00:23,849
first of all I have a very strong name

00:00:21,040 --> 00:00:27,460
very strange name so people call me Joe

00:00:23,849 --> 00:00:30,070
or Joe Hawk that's a new thing that's me

00:00:27,460 --> 00:00:31,320
I kind of live in New York at the same

00:00:30,070 --> 00:00:33,370
time I don't really live in New York

00:00:31,320 --> 00:00:35,380
it's been half a year I'm actually

00:00:33,370 --> 00:00:36,970
literally homeless so if you're

00:00:35,380 --> 00:00:39,670
interested in any of that you can check

00:00:36,970 --> 00:00:42,399
me out right here that's a job I think

00:00:39,670 --> 00:00:45,340
I'm probably best described as a

00:00:42,399 --> 00:00:50,890
professional idiot I just usually break

00:00:45,340 --> 00:00:52,330
things and then try to fix them in the

00:00:50,890 --> 00:00:54,940
thing I do every day is I try to grow

00:00:52,330 --> 00:00:56,740
businesses using technologies and the

00:00:54,940 --> 00:00:59,500
reason I'm giving this talk is that as

00:00:56,740 --> 00:01:02,079
you grow certain pieces of technology

00:00:59,500 --> 00:01:06,520
quite large you kind of have to measure

00:01:02,079 --> 00:01:09,850
them I was always in the u.s. actually

00:01:06,520 --> 00:01:11,350
up to Thursday then last week I was

00:01:09,850 --> 00:01:16,210
driving this car does anyone know what

00:01:11,350 --> 00:01:25,270
it is yes amazing like I had

00:01:16,210 --> 00:01:27,130
this fire cart I'll do it again so this

00:01:25,270 --> 00:01:29,560
is a Tesla Model S in the latest

00:01:27,130 --> 00:01:32,380
Deathlok are probably the only properly

00:01:29,560 --> 00:01:34,150
built electric car out there my Prius is

00:01:32,380 --> 00:01:35,880
a horrible car if you're driving a Prius

00:01:34,150 --> 00:01:39,340
you probably want to leave this room I

00:01:35,880 --> 00:01:40,990
don't like please drivers dallisa test

00:01:39,340 --> 00:01:42,850
it's actually like this is the

00:01:40,990 --> 00:01:45,190
performance version I drove this and it

00:01:42,850 --> 00:01:47,290
like it goes like a train it just pulls

00:01:45,190 --> 00:01:49,650
straight up but what happened recently

00:01:47,290 --> 00:01:52,299
is New York Times published this article

00:01:49,650 --> 00:01:54,850
and once we did this we wrote actually

00:01:52,299 --> 00:01:57,040
it's pretty and how he tested that

00:01:54,850 --> 00:01:59,860
is we took the car for a drive went

00:01:57,040 --> 00:02:02,070
across the East Coast and us from from

00:01:59,860 --> 00:02:04,960
New York somewhere to alway to Delaware

00:02:02,070 --> 00:02:07,780
and kind of document it that did a time

00:02:04,960 --> 00:02:09,970
log wrote about how it's actually

00:02:07,780 --> 00:02:13,420
terrible at mileage and all those things

00:02:09,970 --> 00:02:14,980
and everyone kind of said wait a second

00:02:13,420 --> 00:02:16,330
but actually test should be pretty good

00:02:14,980 --> 00:02:18,069
like I was saying Tesla is very good

00:02:16,330 --> 00:02:21,760
Khaybar won York Times is claiming

00:02:18,069 --> 00:02:24,069
that's actually bad Elon Musk the

00:02:21,760 --> 00:02:25,569
founder and the CEO of Tesla

00:02:24,069 --> 00:02:29,290
the kind of were in the position to

00:02:25,569 --> 00:02:31,450
defend that so why it failed like why

00:02:29,290 --> 00:02:33,370
the New York time is driver when he

00:02:31,450 --> 00:02:35,019
drove that car which is very very cool

00:02:33,370 --> 00:02:38,319
and very very fast and it lasts forever

00:02:35,019 --> 00:02:42,459
it does like 300 miles easily when one

00:02:38,319 --> 00:02:44,920
charge why it failed the only way for

00:02:42,459 --> 00:02:49,299
them to defend their position was to

00:02:44,920 --> 00:02:51,939
base it on data it's is like going back

00:02:49,299 --> 00:02:54,669
talking about cars it's very common in a

00:02:51,939 --> 00:02:57,760
car industry to give specifically

00:02:54,669 --> 00:03:00,219
prepared cars for car testers so rosamma

00:02:57,760 --> 00:03:01,659
car manufacturers like Ferrari would

00:03:00,219 --> 00:03:03,879
give you a car

00:03:01,659 --> 00:03:06,219
but you've usually 100 more horsepower

00:03:03,879 --> 00:03:07,689
than the production car and we actually

00:03:06,219 --> 00:03:10,719
would bring that car to a test track

00:03:07,689 --> 00:03:11,829
before you test it tune it properly make

00:03:10,719 --> 00:03:13,030
sure it works on that track and I'll

00:03:11,829 --> 00:03:16,030
give it to you to test obviously it's

00:03:13,030 --> 00:03:17,439
fake what that's with you after the Top

00:03:16,030 --> 00:03:20,400
Gear review because Top Gear did a

00:03:17,439 --> 00:03:22,689
review a year ago of the roaster and

00:03:20,400 --> 00:03:26,049
they kind of claim that it only lasts

00:03:22,689 --> 00:03:28,590
like 50 miles after that actually Tesla

00:03:26,049 --> 00:03:31,780
suit Top Gear and not actually won and

00:03:28,590 --> 00:03:33,549
BBC apologize for that but what what

00:03:31,780 --> 00:03:36,699
does that do now is actually they record

00:03:33,549 --> 00:03:39,280
every single thing about the car when

00:03:36,699 --> 00:03:42,280
they give it to two people to test

00:03:39,280 --> 00:03:45,489
so what happens is after that article

00:03:42,280 --> 00:03:47,199
they be graphed this is the distance

00:03:45,489 --> 00:03:49,359
traveled and this is the average speed

00:03:47,199 --> 00:03:52,479
and these are asserted like a bunch of

00:03:49,359 --> 00:03:54,220
facts the article claimed and why

00:03:52,479 --> 00:03:56,409
they're wrong so for example one of the

00:03:54,220 --> 00:03:58,659
facts was like oh I actually drove at 45

00:03:56,409 --> 00:04:00,639
miles an hour and that is the data says

00:03:58,659 --> 00:04:00,879
that actually it was never 45 miles an

00:04:00,639 --> 00:04:02,769
hour

00:04:00,879 --> 00:04:04,989
it was always faster and it talks about

00:04:02,769 --> 00:04:07,590
two different different speeds another

00:04:04,989 --> 00:04:10,479
thing is the article was claiming that

00:04:07,590 --> 00:04:13,449
they would actually recharge the car a

00:04:10,479 --> 00:04:14,620
few times but the data shows that they

00:04:13,449 --> 00:04:16,810
actually never did that

00:04:14,620 --> 00:04:19,419
we never went to a super charging

00:04:16,810 --> 00:04:20,380
station and reached 100% of charge they

00:04:19,419 --> 00:04:22,120
were charged for a while

00:04:20,380 --> 00:04:24,389
so is the person fishing going on

00:04:22,120 --> 00:04:27,789
there's obviously something wrong

00:04:24,389 --> 00:04:29,320
another thing is the driver actually

00:04:27,789 --> 00:04:31,030
been to a parking lot and just did

00:04:29,320 --> 00:04:33,430
circles in it just to try to kill a

00:04:31,030 --> 00:04:36,340
battery as it shows from this like he

00:04:33,430 --> 00:04:37,009
drove like 0.6 miles at the speed of 10

00:04:36,340 --> 00:04:39,560
miles and

00:04:37,009 --> 00:04:41,229
we were just driving in circles so what

00:04:39,560 --> 00:04:45,740
happens is that data doesn't lie

00:04:41,229 --> 00:04:47,360
um what daesil was doing is they were

00:04:45,740 --> 00:04:49,550
collecting metrics every single every

00:04:47,360 --> 00:04:51,979
second about every like every part of

00:04:49,550 --> 00:04:53,599
the of the car the charge level the

00:04:51,979 --> 00:04:55,580
speed the position of a car

00:04:53,599 --> 00:04:57,289
so when New York Times claim that's

00:04:55,580 --> 00:04:59,629
actually a bad car they're like wait a

00:04:57,289 --> 00:05:01,190
second we have actual proof that it's

00:04:59,629 --> 00:05:04,370
not true because we called be nervous

00:05:01,190 --> 00:05:06,740
it's data so if data says is 0 its 0

00:05:04,370 --> 00:05:08,780
like there is no subjective in that and

00:05:06,740 --> 00:05:09,319
people like people are people people are

00:05:08,780 --> 00:05:10,759
idiots

00:05:09,319 --> 00:05:12,740
for a lot of reasons one of them is

00:05:10,759 --> 00:05:14,270
really make subjective decisions so the

00:05:12,740 --> 00:05:15,740
guy obviously driving the car was like

00:05:14,270 --> 00:05:17,630
well I don't really know what I'm doing

00:05:15,740 --> 00:05:18,919
maybe I don't even know what cars do and

00:05:17,630 --> 00:05:22,270
I'm just like not gonna charge it and

00:05:18,919 --> 00:05:25,370
I'll claim I charted so so he's wrong

00:05:22,270 --> 00:05:28,190
the bug in production so what the what

00:05:25,370 --> 00:05:29,569
the reason talking about Tesla is what

00:05:28,190 --> 00:05:32,180
we were doing is with debugging the

00:05:29,569 --> 00:05:33,560
current production so all the stuffs are

00:05:32,180 --> 00:05:35,469
running a car was already in production

00:05:33,560 --> 00:05:37,879
like it wasn't a development environment

00:05:35,469 --> 00:05:39,860
but still very deep buggy in a car they

00:05:37,879 --> 00:05:42,500
were collecting data they can use to

00:05:39,860 --> 00:05:44,270
debug the stories so when a journalist

00:05:42,500 --> 00:05:46,340
claims something they can go back and

00:05:44,270 --> 00:05:51,770
say wait a second but you're wrong

00:05:46,340 --> 00:05:53,419
because we know it's not right so they

00:05:51,770 --> 00:05:54,800
knew you went to one of a facebook

00:05:53,419 --> 00:05:57,380
development dogs I think it was at the

00:05:54,800 --> 00:05:59,210
PHP okay last year how they do things

00:05:57,380 --> 00:06:02,719
how we deploy Facebook they would

00:05:59,210 --> 00:06:04,729
actually take their code once once it's

00:06:02,719 --> 00:06:07,009
ready for production and deploy to a

00:06:04,729 --> 00:06:08,750
certain list of servers first and then

00:06:07,009 --> 00:06:11,029
grow obviously grow eventually deploy to

00:06:08,750 --> 00:06:12,830
all of them but the point of deploying

00:06:11,029 --> 00:06:14,779
to smaller sort of servers is that

00:06:12,830 --> 00:06:17,569
actually once we deploy it they look at

00:06:14,779 --> 00:06:20,449
how the behavior changes of all sorts of

00:06:17,569 --> 00:06:22,460
different metrics for example if you

00:06:20,449 --> 00:06:24,529
deploy a certain patch to Facebook and

00:06:22,460 --> 00:06:26,479
all of a sudden people went from

00:06:24,529 --> 00:06:28,250
uploading hundred million pictures at an

00:06:26,479 --> 00:06:30,860
hour to 1 million pictures an hour

00:06:28,250 --> 00:06:32,990
probably worth something wrong it's very

00:06:30,860 --> 00:06:35,150
likely that the behavior of your users

00:06:32,990 --> 00:06:37,490
is always consistent and as you grow to

00:06:35,150 --> 00:06:39,469
the size of Facebook at that size it's

00:06:37,490 --> 00:06:40,880
it's very like it's very likely that if

00:06:39,469 --> 00:06:44,389
something changes drastically

00:06:40,880 --> 00:06:45,710
there's something wrong what crimes are

00:06:44,389 --> 00:06:46,630
mainly work with the commerce systems

00:06:45,710 --> 00:06:49,360
and

00:06:46,630 --> 00:06:52,330
would usually get a couple thousand

00:06:49,360 --> 00:06:54,280
orders per hour if all of a sudden my

00:06:52,330 --> 00:06:56,830
metrics say that we didn't have any

00:06:54,280 --> 00:06:58,270
orders in an hour probably we broke

00:06:56,830 --> 00:07:00,370
something like which it doesn't just

00:06:58,270 --> 00:07:02,230
doesn't happen unless the whole us

00:07:00,370 --> 00:07:10,390
exploded which is not gonna happen

00:07:02,230 --> 00:07:12,850
Russians are safe now but the problem is

00:07:10,390 --> 00:07:14,830
actually it's a lot like usually when

00:07:12,850 --> 00:07:16,540
something breaks in the work the places

00:07:14,830 --> 00:07:18,970
that work for it's usually my fault and

00:07:16,540 --> 00:07:20,770
what I notice is that a lot in a lot of

00:07:18,970 --> 00:07:23,140
cases when things break at that kind of

00:07:20,770 --> 00:07:25,360
behavioral level it's very hard to

00:07:23,140 --> 00:07:26,110
notice them deploying your code

00:07:25,360 --> 00:07:28,120
everything works

00:07:26,110 --> 00:07:29,980
no pitch barriers no nothing what all of

00:07:28,120 --> 00:07:34,030
a sudden your users are not using our

00:07:29,980 --> 00:07:36,090
application what like what happened and

00:07:34,030 --> 00:07:40,480
that's the question what happened like

00:07:36,090 --> 00:07:44,340
so this and the PHP penis t-shirts don't

00:07:40,480 --> 00:07:48,090
go well I think he's hiding his HP penis

00:07:44,340 --> 00:07:50,350
so what happens to realize what like to

00:07:48,090 --> 00:07:52,630
figure out what happened for application

00:07:50,350 --> 00:07:54,700
you need to know the current state

00:07:52,630 --> 00:07:58,150
what's happening right now and what

00:07:54,700 --> 00:08:00,190
happened in the events before and there

00:07:58,150 --> 00:08:01,690
are certain or certain different ways to

00:08:00,190 --> 00:08:02,890
do that you can actually just test your

00:08:01,690 --> 00:08:04,720
application in life you can just go to

00:08:02,890 --> 00:08:06,880
your website log in click around the

00:08:04,720 --> 00:08:09,700
like click about see what's happening

00:08:06,880 --> 00:08:11,470
maybe that's gonna work but the

00:08:09,700 --> 00:08:12,490
importance is the only way to actually

00:08:11,470 --> 00:08:14,260
know what's happening is actually you

00:08:12,490 --> 00:08:16,750
need to correlate different events for

00:08:14,260 --> 00:08:19,150
example your network traffic the amount

00:08:16,750 --> 00:08:23,400
of PHP errors and things like that

00:08:19,150 --> 00:08:27,040
so I have an example of that so this is

00:08:23,400 --> 00:08:29,500
this is a graph of PHP warnings in my

00:08:27,040 --> 00:08:31,750
application and it's a time series so as

00:08:29,500 --> 00:08:34,270
the time goes to the right all of a

00:08:31,750 --> 00:08:35,560
sudden varies more errors if this

00:08:34,270 --> 00:08:37,630
happens in the application you're like

00:08:35,560 --> 00:08:40,690
probably developer broke something let's

00:08:37,630 --> 00:08:41,950
let's try to figure out why and how how

00:08:40,690 --> 00:08:45,640
you're gonna do that is hard because

00:08:41,950 --> 00:08:47,440
clearly you did something you even fixed

00:08:45,640 --> 00:08:49,210
it so the problem is that doesn't even

00:08:47,440 --> 00:08:51,100
exist in the code level maybe anymore

00:08:49,210 --> 00:08:52,480
but something happened so what you need

00:08:51,100 --> 00:08:56,050
to do is for example correlate the data

00:08:52,480 --> 00:08:58,020
with deployments so here I see I do that

00:08:56,050 --> 00:08:59,930
deployment just after 4:00 p.m. and

00:08:58,020 --> 00:09:01,820
clearly it caused applique

00:08:59,930 --> 00:09:04,190
to go to Berserker mode with errors and

00:09:01,820 --> 00:09:06,110
then I fixed it something was still

00:09:04,190 --> 00:09:10,720
happening and I fix it again and now I

00:09:06,110 --> 00:09:14,540
know it works fine another cases this is

00:09:10,720 --> 00:09:15,770
business again deployments recent

00:09:14,540 --> 00:09:18,529
successful logins and these are

00:09:15,770 --> 00:09:20,149
unsuccessful wagons click like from like

00:09:18,529 --> 00:09:22,279
from his data just as a human person I

00:09:20,149 --> 00:09:24,230
can clearly tell my deployments are not

00:09:22,279 --> 00:09:27,470
affecting logins so that's a good thing

00:09:24,230 --> 00:09:29,330
because say if after this deployment the

00:09:27,470 --> 00:09:31,640
error rate the the the darker color all

00:09:29,330 --> 00:09:33,560
of a sudden spikes again I broke

00:09:31,640 --> 00:09:36,610
something because if you look back to

00:09:33,560 --> 00:09:42,649
the data it's always at a stable level

00:09:36,610 --> 00:09:44,930
another graph from Etsy so we did a few

00:09:42,649 --> 00:09:47,660
deployments right here one deployment on

00:09:44,930 --> 00:09:51,940
a la mer and right here actually varies

00:09:47,660 --> 00:09:55,610
a new feature this orange bit is the

00:09:51,940 --> 00:09:58,520
support request at the Health Forum the

00:09:55,610 --> 00:10:00,620
red bit is the help request in box form

00:09:58,520 --> 00:10:03,110
so clearly after deploying this feature

00:10:00,620 --> 00:10:04,610
no one's complaining about bugs they're

00:10:03,110 --> 00:10:06,860
actually excited about the functionality

00:10:04,610 --> 00:10:09,880
and actually question asking questions

00:10:06,860 --> 00:10:12,950
how to use it right so it's a good thing

00:10:09,880 --> 00:10:14,630
like how can you express these sorts of

00:10:12,950 --> 00:10:16,279
questions how you can express your sort

00:10:14,630 --> 00:10:19,790
of data correlations if I was actually

00:10:16,279 --> 00:10:26,089
login it developers usually lock things

00:10:19,790 --> 00:10:27,980
and logs son let me explain why it's

00:10:26,089 --> 00:10:29,990
very it's very easy to create a log like

00:10:27,980 --> 00:10:32,420
any framework any library any

00:10:29,990 --> 00:10:35,150
application provides login functionality

00:10:32,420 --> 00:10:37,480
I'm going to Savannah PS PS are standard

00:10:35,150 --> 00:10:40,279
for logging no locks are useless because

00:10:37,480 --> 00:10:42,500
someone needs to read them and if you're

00:10:40,279 --> 00:10:45,800
writing a lot of data to log who is

00:10:42,500 --> 00:10:47,329
gonna read that probably no one so when

00:10:45,800 --> 00:10:50,209
something something breaks you're gonna

00:10:47,329 --> 00:10:51,200
go back to the server try to grab it try

00:10:50,209 --> 00:10:54,170
to look for information and hopefully

00:10:51,200 --> 00:10:55,760
figure something out good luck with that

00:10:54,170 --> 00:10:57,649
another problem is if you have two

00:10:55,760 --> 00:10:59,270
servers or have a bunch of different

00:10:57,649 --> 00:11:01,730
servers my sequel server application

00:10:59,270 --> 00:11:03,110
server memcache server they all have a

00:11:01,730 --> 00:11:04,490
different log files you need to

00:11:03,110 --> 00:11:05,709
aggregate them somehow you need to do

00:11:04,490 --> 00:11:07,459
those connections I was showing before

00:11:05,709 --> 00:11:11,220
because otherwise you just have

00:11:07,459 --> 00:11:13,800
completely unrelated dumps of data

00:11:11,220 --> 00:11:16,110
again the problem is that when you write

00:11:13,800 --> 00:11:18,000
a log file with blocks applications

00:11:16,110 --> 00:11:19,860
because you need to write our file so if

00:11:18,000 --> 00:11:21,810
you're doing a lot of writes the

00:11:19,860 --> 00:11:25,709
application becomes slower it's a very

00:11:21,810 --> 00:11:27,149
very big problem might like people think

00:11:25,709 --> 00:11:30,990
I don't sleep and actually it's not true

00:11:27,149 --> 00:11:33,600
I really want to sleep and like

00:11:30,990 --> 00:11:35,160
sometimes I can't sleep because I'm not

00:11:33,600 --> 00:11:39,480
sure if the applications we are working

00:11:35,160 --> 00:11:42,240
on are actually working when you go from

00:11:39,480 --> 00:11:45,360
log files you actually use metrics you

00:11:42,240 --> 00:11:46,680
can sleep pretty much if you say if

00:11:45,360 --> 00:11:51,120
you're having sleep problems is gonna

00:11:46,680 --> 00:11:53,459
fix it when things go wrong metrics will

00:11:51,120 --> 00:11:55,079
tell you why they're wrong usually if

00:11:53,459 --> 00:11:58,350
you're doing things right second of all

00:11:55,079 --> 00:12:02,279
you can set up automatic alerts where if

00:11:58,350 --> 00:12:04,680
I'm giving if this graph is more than a

00:12:02,279 --> 00:12:05,879
thousand of something per second call me

00:12:04,680 --> 00:12:07,920
or send me a text message

00:12:05,879 --> 00:12:09,810
and so like right now it to my phone I

00:12:07,920 --> 00:12:11,310
will get text messages every time and

00:12:09,810 --> 00:12:13,110
certain application breaks and I think

00:12:11,310 --> 00:12:15,240
it's very good because it mean it means

00:12:13,110 --> 00:12:16,529
I do not need to be checking anything

00:12:15,240 --> 00:12:18,149
and that's a very important thing

00:12:16,529 --> 00:12:19,589
because then when you deploy an

00:12:18,149 --> 00:12:21,689
application and if thing is gonna break

00:12:19,589 --> 00:12:23,339
you couldn't keep checking the logs to

00:12:21,689 --> 00:12:25,079
keep checking all sorts of things to

00:12:23,339 --> 00:12:26,220
keep changing where users are doing you

00:12:25,079 --> 00:12:28,199
really don't need to do that you can

00:12:26,220 --> 00:12:31,800
just rely on the metrics to tell you

00:12:28,199 --> 00:12:35,490
that and obviously when then things

00:12:31,800 --> 00:12:39,000
break then certain small bits break they

00:12:35,490 --> 00:12:40,920
don't break silently like I think last

00:12:39,000 --> 00:12:44,160
week ago we had this problem where a

00:12:40,920 --> 00:12:45,990
crunch script would stop stopped working

00:12:44,160 --> 00:12:49,680
because the log file it was trying to

00:12:45,990 --> 00:12:51,420
use had wrong permissions like how you

00:12:49,680 --> 00:12:52,949
gonna detect that are you gonna check

00:12:51,420 --> 00:12:54,569
every single log file every single

00:12:52,949 --> 00:12:56,069
script it runs every time it runs if

00:12:54,569 --> 00:12:57,660
it's actually running for actly you

00:12:56,069 --> 00:13:00,240
couldn't well because we are actually

00:12:57,660 --> 00:13:02,100
logging we had metrics every time a

00:13:00,240 --> 00:13:04,339
scheduled run and a certain data will

00:13:02,100 --> 00:13:08,459
generate we knew it was working so

00:13:04,339 --> 00:13:10,740
business problems it's is I think it's

00:13:08,459 --> 00:13:12,779
very good then all your poems actually

00:13:10,740 --> 00:13:14,699
relied in a code level in the bigger

00:13:12,779 --> 00:13:18,300
problem is and the problems rely on the

00:13:14,699 --> 00:13:19,769
business logic level because when

00:13:18,300 --> 00:13:22,110
business tools stop working like your

00:13:19,769 --> 00:13:23,980
orders stop importing or the rate of

00:13:22,110 --> 00:13:25,570
orders stop importing is wrong

00:13:23,980 --> 00:13:27,340
of the existence not using obligation

00:13:25,570 --> 00:13:29,620
it's very hard to figure out why exactly

00:13:27,340 --> 00:13:31,330
is it happening when you only have your

00:13:29,620 --> 00:13:32,800
application source code or you don't

00:13:31,330 --> 00:13:34,960
have access to walk fast like how you

00:13:32,800 --> 00:13:38,020
gonna do that so what we are trying to

00:13:34,960 --> 00:13:42,100
do is give developers a way to easily

00:13:38,020 --> 00:13:44,250
get reminded when things are broken so

00:13:42,100 --> 00:13:47,710
you need to count things and time them

00:13:44,250 --> 00:13:51,790
how do you do that counting obviously

00:13:47,710 --> 00:13:53,740
means sending or incrementing a certain

00:13:51,790 --> 00:13:55,990
variable with a certain time stamp so

00:13:53,740 --> 00:13:58,330
you know in this time range in an hour

00:13:55,990 --> 00:13:59,890
and five minutes in a day that's the

00:13:58,330 --> 00:14:01,180
amount of things which happened and

00:13:59,890 --> 00:14:03,640
another thing is you need your time

00:14:01,180 --> 00:14:06,930
things so every time something runs you

00:14:03,640 --> 00:14:06,930
need to know how long it took

00:14:07,530 --> 00:14:13,150
it's once like once you combine that

00:14:11,500 --> 00:14:15,520
want to know how how much things are

00:14:13,150 --> 00:14:17,080
running and how long they take you like

00:14:15,520 --> 00:14:20,130
you know when things break because if

00:14:17,080 --> 00:14:22,660
the graph of things running drops

00:14:20,130 --> 00:14:25,390
obviously something's broken so our

00:14:22,660 --> 00:14:30,730
solution is called stats D measure all

00:14:25,390 --> 00:14:33,700
the things it's extremely extremely

00:14:30,730 --> 00:14:35,710
small library or a system component it

00:14:33,700 --> 00:14:39,190
was actually written by Etsy so Etsy

00:14:35,710 --> 00:14:42,700
this is is an American ecommerce

00:14:39,190 --> 00:14:44,410
platform portal marketplace thing run

00:14:42,700 --> 00:14:49,750
from Brooklyn like the capital of

00:14:44,410 --> 00:14:51,760
hipsters it's a it's an OGS server which

00:14:49,750 --> 00:14:53,860
sits on your server and it collects

00:14:51,760 --> 00:14:57,970
metrics so from from your application

00:14:53,860 --> 00:14:59,440
you send metrics to stats D using UDP

00:14:57,970 --> 00:15:02,500
protocol and that's very important

00:14:59,440 --> 00:15:04,330
because it doesn't block so if you have

00:15:02,500 --> 00:15:06,220
a closed loop where just look for things

00:15:04,330 --> 00:15:07,540
and you want to measure how long every

00:15:06,220 --> 00:15:09,790
single iteration takes and you go on a

00:15:07,540 --> 00:15:12,490
blocker application runtime you can keep

00:15:09,790 --> 00:15:15,460
sending things to stats D maybe they

00:15:12,490 --> 00:15:17,050
will fail to reach it because also like

00:15:15,460 --> 00:15:19,150
all sorts of reasons can happen your

00:15:17,050 --> 00:15:22,030
network like kernel-level network bugs

00:15:19,150 --> 00:15:24,790
but because uses UDP which doesn't

00:15:22,030 --> 00:15:26,320
require an acknowledgment it will just

00:15:24,790 --> 00:15:29,740
keep writing to that and eventually it

00:15:26,320 --> 00:15:31,840
might reach just as deep so it's very

00:15:29,740 --> 00:15:34,810
very simple and it just works so if

00:15:31,840 --> 00:15:37,550
there's an example it has obviously a

00:15:34,810 --> 00:15:39,950
PHP library so you can just do

00:15:37,550 --> 00:15:42,019
that's the increment PUK visitors

00:15:39,950 --> 00:15:44,660
so that's just like a certain variable

00:15:42,019 --> 00:15:47,779
name I chose and what this does it's

00:15:44,660 --> 00:15:50,630
actually you sends the value with this

00:15:47,779 --> 00:15:53,620
name with a value of one because like

00:15:50,630 --> 00:15:55,970
you increment by one and the timestamp

00:15:53,620 --> 00:15:57,890
once you want just like keeping

00:15:55,970 --> 00:16:01,100
demanding things then you can graph them

00:15:57,890 --> 00:16:04,190
another thing is you can time things so

00:16:01,100 --> 00:16:07,010
you can start running things it take an

00:16:04,190 --> 00:16:08,930
initial timestamp run a function figure

00:16:07,010 --> 00:16:11,660
out how long it took and then just store

00:16:08,930 --> 00:16:14,180
it as a timing information and what what

00:16:11,660 --> 00:16:17,329
what stats D does is actually it could

00:16:14,180 --> 00:16:19,550
contain it collects those messages from

00:16:17,329 --> 00:16:21,079
the application or from a server because

00:16:19,550 --> 00:16:24,140
if server can also keep sending stuff

00:16:21,079 --> 00:16:25,519
and with UDP packets very rich stats D

00:16:24,140 --> 00:16:28,850
and that's where that's the initial

00:16:25,519 --> 00:16:30,350
stuff where your application now keeps

00:16:28,850 --> 00:16:35,990
sending messages and keep sending those

00:16:30,350 --> 00:16:38,029
metric information once you do that once

00:16:35,990 --> 00:16:40,070
you do that you obviously now need to

00:16:38,029 --> 00:16:42,890
plot them so you varies another library

00:16:40,070 --> 00:16:46,220
called graphite this one is not written

00:16:42,890 --> 00:16:47,839
by Etsy I don't I don't even know who

00:16:46,220 --> 00:16:50,420
wrote that and out like all these things

00:16:47,839 --> 00:16:54,130
are always open source what graphite

00:16:50,420 --> 00:16:58,880
does is it takes the data from stats D

00:16:54,130 --> 00:17:00,380
pulls it in and and graphs it for you so

00:16:58,880 --> 00:17:03,110
that's just an example of the interface

00:17:00,380 --> 00:17:04,790
like it you can use you can just connect

00:17:03,110 --> 00:17:06,140
to graphite through a terminal so you

00:17:04,790 --> 00:17:08,480
can actually grab few things in the

00:17:06,140 --> 00:17:10,100
terminal or you can do a default web

00:17:08,480 --> 00:17:11,929
interface and it has a pretty nice API

00:17:10,100 --> 00:17:13,309
so you can integrate all those graphs

00:17:11,929 --> 00:17:15,559
your application so like if you have

00:17:13,309 --> 00:17:17,050
already a back-end system whatever you

00:17:15,559 --> 00:17:19,309
are using you can just integrate them

00:17:17,050 --> 00:17:21,980
so what graphite does it first of all

00:17:19,309 --> 00:17:23,839
real-time charts any like any metrics

00:17:21,980 --> 00:17:25,220
you send any time series use and it

00:17:23,839 --> 00:17:27,189
keeps graphing them so as the time moves

00:17:25,220 --> 00:17:29,660
on it adds the new points which is data

00:17:27,189 --> 00:17:33,050
it collects the data you sent well it

00:17:29,660 --> 00:17:35,480
aggregates that so usually when you when

00:17:33,050 --> 00:17:37,669
you plot time series data you want to

00:17:35,480 --> 00:17:40,400
know not necessary with every single

00:17:37,669 --> 00:17:43,190
value but usually the what is the value

00:17:40,400 --> 00:17:44,870
of 75% of the events in God or what

00:17:43,190 --> 00:17:45,530
Civello hundred percent events or

00:17:44,870 --> 00:17:47,030
something like that

00:17:45,530 --> 00:17:48,710
so what graphite does it actually

00:17:47,030 --> 00:17:49,700
collects the data and stores you know

00:17:48,710 --> 00:17:52,400
specifically

00:17:49,700 --> 00:17:54,290
the point of the the reason why graphite

00:17:52,400 --> 00:17:56,360
has its own database it's like because

00:17:54,290 --> 00:18:00,200
it needs to store a time series data so

00:17:56,360 --> 00:18:01,940
it just says I have enough storage to

00:18:00,200 --> 00:18:03,530
store for example an hour of data and

00:18:01,940 --> 00:18:05,510
you can figure that and then you just

00:18:03,530 --> 00:18:07,340
rotate the database so as you write new

00:18:05,510 --> 00:18:09,200
things the old things disappear because

00:18:07,340 --> 00:18:10,430
usually when you go and you're talking

00:18:09,200 --> 00:18:12,950
about metrics you don't really need to

00:18:10,430 --> 00:18:14,180
know what happened a week ago usually

00:18:12,950 --> 00:18:16,370
it's enough just to know what's

00:18:14,180 --> 00:18:18,320
happening right now so it's a very it's

00:18:16,370 --> 00:18:20,720
a very tiny thing so what happens is

00:18:18,320 --> 00:18:23,360
your application your server right

00:18:20,720 --> 00:18:26,930
things to study and once in a while

00:18:23,360 --> 00:18:29,180
you've once a minute by default graphite

00:18:26,930 --> 00:18:31,670
puts them in stores them and then the

00:18:29,180 --> 00:18:33,980
dashboard displays them so all of a

00:18:31,670 --> 00:18:35,810
sudden you vent from not having any

00:18:33,980 --> 00:18:37,490
metrics to actually storing them the

00:18:35,810 --> 00:18:42,260
store in time time data and also

00:18:37,490 --> 00:18:42,800
displaying it a number to another pretty

00:18:42,260 --> 00:18:44,840
cool library

00:18:42,800 --> 00:18:47,060
it's called lobster actually is not

00:18:44,840 --> 00:18:48,230
school officers called lobster okay I

00:18:47,060 --> 00:18:50,600
just like to imagine it's called

00:18:48,230 --> 00:18:52,820
lobsters I don't know everyone I know

00:18:50,600 --> 00:18:56,450
causes lobster so I just I just assumed

00:18:52,820 --> 00:18:58,820
it's Lobster what what lobster does what

00:18:56,450 --> 00:19:01,010
what lock star does is it parses lock

00:18:58,820 --> 00:19:02,660
files so if you have existing

00:19:01,010 --> 00:19:04,760
obligations if for example Apache or

00:19:02,660 --> 00:19:06,920
your application already is writing to

00:19:04,760 --> 00:19:09,620
log files it can just parse them and

00:19:06,920 --> 00:19:12,740
ship them to graphite so you can go from

00:19:09,620 --> 00:19:15,110
just having normal growth normal log

00:19:12,740 --> 00:19:17,840
files to actually graph file log files

00:19:15,110 --> 00:19:21,020
being used to graph programs and

00:19:17,840 --> 00:19:22,730
obviously graphite doesn't like doesn't

00:19:21,020 --> 00:19:24,950
depend on one server can it can get the

00:19:22,730 --> 00:19:26,750
data from any service you have it can

00:19:24,950 --> 00:19:29,690
run on any service you have so it's not

00:19:26,750 --> 00:19:32,180
a problem now lobsters pretty cool again

00:19:29,690 --> 00:19:33,860
written by at see a very small library a

00:19:32,180 --> 00:19:35,840
very cool library and you just parses

00:19:33,860 --> 00:19:37,580
any log files you want in real time and

00:19:35,840 --> 00:19:41,360
pushes the data to graphite so you can

00:19:37,580 --> 00:19:43,490
graph it out of these tools we are kind

00:19:41,360 --> 00:19:45,620
of only using stats D because for

00:19:43,490 --> 00:19:49,520
graphing use the managed solution called

00:19:45,620 --> 00:19:52,130
data dog it's very similar to New Relic

00:19:49,520 --> 00:19:56,480
if you have used that it's just cheaper

00:19:52,130 --> 00:19:58,650
by a factor of 1 which is quite a lot so

00:19:56,480 --> 00:20:01,380
data dog is pretty much

00:19:58,650 --> 00:20:02,880
solution of graphite and it looks kind

00:20:01,380 --> 00:20:05,640
of like that it's not looking very

00:20:02,880 --> 00:20:08,730
graphic here not really important but

00:20:05,640 --> 00:20:12,060
basically you add any amount of graphs

00:20:08,730 --> 00:20:15,390
and you store them so what what data doc

00:20:12,060 --> 00:20:16,800
does is instead of you having to run

00:20:15,390 --> 00:20:18,810
graphite or instead of you having to

00:20:16,800 --> 00:20:19,310
care about where those metrics are going

00:20:18,810 --> 00:20:23,370
to live

00:20:19,310 --> 00:20:25,740
you actually just subscribe to that add

00:20:23,370 --> 00:20:27,900
one little time in the library in your

00:20:25,740 --> 00:20:29,570
server which takes the data from stats D

00:20:27,900 --> 00:20:33,660
and pushes out the data lock servers and

00:20:29,570 --> 00:20:35,580
everything is like no it takes it takes

00:20:33,660 --> 00:20:36,780
care of aggregation and storage for you

00:20:35,580 --> 00:20:39,840
so didn't really need to worry about

00:20:36,780 --> 00:20:42,180
that and it also allows you to do

00:20:39,840 --> 00:20:44,070
anything you want so imagine you have

00:20:42,180 --> 00:20:46,560
five different metrics like user logins

00:20:44,070 --> 00:20:48,840
orders server errors PHP error or speech

00:20:46,560 --> 00:20:51,360
warnings all so that you just you new

00:20:48,840 --> 00:20:52,920
graph use this data use an average of

00:20:51,360 --> 00:20:54,900
this data and you just provides your

00:20:52,920 --> 00:20:55,890
time series or what happened what's

00:20:54,900 --> 00:20:57,420
happening right now and obviously it's

00:20:55,890 --> 00:20:58,230
all the real time so whatever is

00:20:57,420 --> 00:21:01,590
happening in your server

00:20:58,230 --> 00:21:04,200
everything's immediately visible so have

00:21:01,590 --> 00:21:07,770
an example so that's actually so data

00:21:04,200 --> 00:21:09,690
dog suffered an Amazon outage be sure

00:21:07,770 --> 00:21:11,760
finger a couple months ago and actually

00:21:09,690 --> 00:21:14,520
we were out the blog post explaining why

00:21:11,760 --> 00:21:15,990
it happened the reason why I know why

00:21:14,520 --> 00:21:19,260
they know how it happened and why it

00:21:15,990 --> 00:21:23,790
happened is because they use metrics so

00:21:19,260 --> 00:21:27,390
this graph shows the elastic storage on

00:21:23,790 --> 00:21:29,790
Amazon wait times so all of sudden

00:21:27,390 --> 00:21:32,280
sending spikes obviously there's

00:21:29,790 --> 00:21:36,170
something fishy going on what happens

00:21:32,280 --> 00:21:39,150
next is at some point very load just

00:21:36,170 --> 00:21:41,850
skyrockets 247 which again something

00:21:39,150 --> 00:21:45,990
something is clearly not right and then

00:21:41,850 --> 00:21:48,780
finally there are web page views at some

00:21:45,990 --> 00:21:50,340
point just drop to almost zero that's

00:21:48,780 --> 00:21:52,760
like a default around there for a while

00:21:50,340 --> 00:21:56,820
and once we fix things they rise again

00:21:52,760 --> 00:21:59,910
so we have three different graphs you

00:21:56,820 --> 00:22:03,420
put them close to close to number and

00:21:59,910 --> 00:22:05,790
not that tells you why that application

00:22:03,420 --> 00:22:08,040
was failing like immediately you know

00:22:05,790 --> 00:22:10,850
why it was failing because first of all

00:22:08,040 --> 00:22:13,070
I think it's not the line necessary

00:22:10,850 --> 00:22:15,440
so first of all there was a TB disk

00:22:13,070 --> 00:22:17,149
problems so the rights and you ride the

00:22:15,440 --> 00:22:19,940
system the server was doing was just

00:22:17,149 --> 00:22:22,789
failing then second of all the the load

00:22:19,940 --> 00:22:24,740
spiked so these are both server metrics

00:22:22,789 --> 00:22:27,019
and then their application metric was

00:22:24,740 --> 00:22:28,850
saying oh actually that we lost so many

00:22:27,019 --> 00:22:30,710
users obviously something is going wrong

00:22:28,850 --> 00:22:32,720
so it's very easy at this point just to

00:22:30,710 --> 00:22:34,429
create an alert saying if the user

00:22:32,720 --> 00:22:36,409
account is that the user amount is lower

00:22:34,429 --> 00:22:37,909
than this because as you can tell it's

00:22:36,409 --> 00:22:40,130
pretty stable if it's lower than this

00:22:37,909 --> 00:22:43,250
send me a text message and I'll be able

00:22:40,130 --> 00:22:50,509
to fix it so quick so far no questions

00:22:43,250 --> 00:22:53,809
no so how do I use it so I think I've

00:22:50,509 --> 00:22:57,500
been using data doc for about a year and

00:22:53,809 --> 00:22:59,149
it's proving to work very very well the

00:22:57,500 --> 00:23:01,399
the I think the coolest projects I work

00:22:59,149 --> 00:23:04,370
on and the example I want to use is

00:23:01,399 --> 00:23:06,190
about Deaf spiders so that's why there

00:23:04,370 --> 00:23:09,080
is something that Google would build a

00:23:06,190 --> 00:23:13,549
bunch of our companies I build them to

00:23:09,080 --> 00:23:16,429
you mainly so currently we have roughly

00:23:13,549 --> 00:23:19,759
250 nodes in the web site Webster the

00:23:16,429 --> 00:23:24,320
spider cluster and our goal was always

00:23:19,759 --> 00:23:26,899
how we can make it so the the amount it

00:23:24,320 --> 00:23:28,820
takes to process any pages is as small

00:23:26,899 --> 00:23:31,039
as possible and we can do as many

00:23:28,820 --> 00:23:32,240
requests as we can and at that time we

00:23:31,039 --> 00:23:34,629
were doing a couple thousand requests a

00:23:32,240 --> 00:23:37,220
second through for a combined cluster

00:23:34,629 --> 00:23:39,950
and center of goal second goal was how

00:23:37,220 --> 00:23:41,779
we can make sure or how we can know that

00:23:39,950 --> 00:23:43,700
everything is working reliable very

00:23:41,779 --> 00:23:46,639
reliably so if there are network issues

00:23:43,700 --> 00:23:49,970
we are kind of notified about them well

00:23:46,639 --> 00:23:54,769
in advance and that's why then with

00:23:49,970 --> 00:23:57,950
using data log service and me we plotted

00:23:54,769 --> 00:24:01,159
request times HTTP error rates proxy

00:23:57,950 --> 00:24:03,500
errors error types and also unknown

00:24:01,159 --> 00:24:05,779
responses so if you were to request a

00:24:03,500 --> 00:24:07,580
webpage and we're getting something we

00:24:05,779 --> 00:24:09,230
don't understand problem or something

00:24:07,580 --> 00:24:11,779
wrong maybe our proxies are failing

00:24:09,230 --> 00:24:17,149
maybe the Amazon network is failing and

00:24:11,779 --> 00:24:19,700
we had that once once when building a

00:24:17,149 --> 00:24:21,830
similar project project be kind of

00:24:19,700 --> 00:24:22,380
accidental or launch a DDoS attack on

00:24:21,830 --> 00:24:25,980
Amazon

00:24:22,380 --> 00:24:28,350
home and they called me on the phone

00:24:25,980 --> 00:24:30,420
because we are also running about from

00:24:28,350 --> 00:24:32,340
Amazon Web Services so we're kind of

00:24:30,420 --> 00:24:33,990
where ii was thinking which traffic

00:24:32,340 --> 00:24:36,990
coming from our own servers ddossing

00:24:33,990 --> 00:24:39,090
amazon.com so they called me kind of is

00:24:36,990 --> 00:24:41,220
a very angry voice send you better shut

00:24:39,090 --> 00:24:43,560
it down and you kind of at first people

00:24:41,220 --> 00:24:44,940
like now we just keep running so we

00:24:43,560 --> 00:24:46,830
actually we just limited the network

00:24:44,940 --> 00:24:50,310
traffic of the whole account to like one

00:24:46,830 --> 00:24:51,690
kilobyte a second you just just really

00:24:50,310 --> 00:24:52,920
not cool when you have also production

00:24:51,690 --> 00:24:55,620
servers running on the same account

00:24:52,920 --> 00:24:57,990
so everything that then they let me call

00:24:55,620 --> 00:25:00,330
them back and like we figured it out I

00:24:57,990 --> 00:25:03,950
was I just used my kind of semi Russian

00:25:00,330 --> 00:25:03,950
accent and we like we're over your way

00:25:05,000 --> 00:25:10,800
please don't kill us so we started off

00:25:09,510 --> 00:25:12,630
with three months in the kind of

00:25:10,800 --> 00:25:14,610
development and pre development stages

00:25:12,630 --> 00:25:17,550
and in that time we increase the

00:25:14,610 --> 00:25:19,860
performance roughly 10 times and best

00:25:17,550 --> 00:25:22,140
ability and when reaches stability of

00:25:19,860 --> 00:25:26,960
roughly like nothing ever breaks anymore

00:25:22,140 --> 00:25:30,420
and how we did that is that we we plot

00:25:26,960 --> 00:25:32,220
me request times and the amount of

00:25:30,420 --> 00:25:34,500
messages in a queue so we used Gilman

00:25:32,220 --> 00:25:37,050
for queuing so we queue a certain list

00:25:34,500 --> 00:25:40,560
of pages we want to gather the data from

00:25:37,050 --> 00:25:42,240
and we monitor that so as long as the

00:25:40,560 --> 00:25:43,800
queue is always decreasing when they add

00:25:42,240 --> 00:25:46,260
new elements obviously I'm is working

00:25:43,800 --> 00:25:48,210
right and when as long as it's never

00:25:46,260 --> 00:25:50,310
kind of maxing out and just keeps

00:25:48,210 --> 00:25:52,260
climbing we know we are processing fast

00:25:50,310 --> 00:25:55,920
enough so that many new items added

00:25:52,260 --> 00:25:58,860
don't abuse the performance and I have a

00:25:55,920 --> 00:26:03,870
different talk which only talks about

00:25:58,860 --> 00:26:05,460
data mining and like PHP is I guess not

00:26:03,870 --> 00:26:07,920
necessarily ideal solution for these

00:26:05,460 --> 00:26:11,490
sort of forms because doing a lot of

00:26:07,920 --> 00:26:13,200
requests from PHP is very it just is

00:26:11,490 --> 00:26:15,870
just no it's not easy and the biggest

00:26:13,200 --> 00:26:18,060
problem is that most of the most of the

00:26:15,870 --> 00:26:21,210
libraries like using sockets for example

00:26:18,060 --> 00:26:22,530
just doesn't reuse connections well so

00:26:21,210 --> 00:26:25,770
if you start doing a lot of connections

00:26:22,530 --> 00:26:28,140
you just max out your Linux kernel level

00:26:25,770 --> 00:26:30,660
connection a lot which is 56 thousand I

00:26:28,140 --> 00:26:32,820
think so we actually ended up using

00:26:30,660 --> 00:26:34,090
coral multi get but like the coolest

00:26:32,820 --> 00:26:35,409
thing is with you

00:26:34,090 --> 00:26:37,390
we will work on something and we're kind

00:26:35,409 --> 00:26:38,890
of trying to figure out how exactly we

00:26:37,390 --> 00:26:40,090
can make sure that we are doing as many

00:26:38,890 --> 00:26:41,919
requests as possible everything working

00:26:40,090 --> 00:26:44,080
as fast as possible you commit something

00:26:41,919 --> 00:26:46,570
you deploy we kind of graph a deployment

00:26:44,080 --> 00:26:48,400
line and all of a sudden your request

00:26:46,570 --> 00:26:49,260
time drops and it's like the best

00:26:48,400 --> 00:26:54,070
feeling ever

00:26:49,260 --> 00:26:58,059
okay maybe not some disappear where you

00:26:54,070 --> 00:27:02,260
know no I didn't say that you're just

00:26:58,059 --> 00:27:05,760
imagining things and after we did that

00:27:02,260 --> 00:27:08,049
we can actually sleep now because the

00:27:05,760 --> 00:27:09,640
everything we got everything we we

00:27:08,049 --> 00:27:11,159
collect the metrics in the metrics for

00:27:09,640 --> 00:27:13,870
and we know we know it's working fine

00:27:11,159 --> 00:27:16,120
but and then we set up alerts for the

00:27:13,870 --> 00:27:19,570
lower bound and upper bound if a request

00:27:16,120 --> 00:27:21,130
takes more than a 100 milliseconds we I

00:27:19,570 --> 00:27:22,720
get a text message saying there's

00:27:21,130 --> 00:27:24,039
something wrong happening because it

00:27:22,720 --> 00:27:26,350
usually takes like ten millisecond and

00:27:24,039 --> 00:27:27,940
sometimes things would get stuck but um

00:27:26,350 --> 00:27:30,070
we had all sorts of problems like Gilman

00:27:27,940 --> 00:27:31,179
workers just getting stuck and you have

00:27:30,070 --> 00:27:33,610
a lot when you have a lot of them

00:27:31,179 --> 00:27:35,950
running then they start randomly getting

00:27:33,610 --> 00:27:37,450
stuck it's very hard to debug that as I

00:27:35,950 --> 00:27:40,210
was saying before like when things break

00:27:37,450 --> 00:27:41,679
in production you're like what what what

00:27:40,210 --> 00:27:43,090
like why it's not working because you

00:27:41,679 --> 00:27:44,679
would go to the interface your admin

00:27:43,090 --> 00:27:46,750
interface your front-end application and

00:27:44,679 --> 00:27:48,669
everything seems to be working but the

00:27:46,750 --> 00:27:50,919
performance you're getting is just not

00:27:48,669 --> 00:27:52,270
right so once you add metrics for that

00:27:50,919 --> 00:27:54,210
once we know about wait a second

00:27:52,270 --> 00:27:56,409
actually every time we add a thousand

00:27:54,210 --> 00:27:57,820
messages to the gear Mankiw they

00:27:56,409 --> 00:27:59,470
actually get cleared up pretty quickly

00:27:57,820 --> 00:28:00,970
and we don't take more time and they

00:27:59,470 --> 00:28:04,000
should be taking everything is working

00:28:00,970 --> 00:28:07,169
fine and I can sleep so wrapping up I

00:28:04,000 --> 00:28:09,610
think I actually spoke way too quickly

00:28:07,169 --> 00:28:12,070
you'll be like you have to ask me a lot

00:28:09,610 --> 00:28:16,600
of questions not about like the best

00:28:12,070 --> 00:28:20,770
feelings and stuff so wrapping up so

00:28:16,600 --> 00:28:23,200
measure things like there are so many

00:28:20,770 --> 00:28:25,350
like possible angles to taste look at

00:28:23,200 --> 00:28:25,350
this

00:28:25,760 --> 00:28:30,690
yes so you need to measure things so

00:28:29,160 --> 00:28:32,130
like when you deploy applications when

00:28:30,690 --> 00:28:33,900
you run applications when you're then

00:28:32,130 --> 00:28:35,340
you're dealing with actual applications

00:28:33,900 --> 00:28:37,620
running in production you need to

00:28:35,340 --> 00:28:40,620
measure their performance at the really

00:28:37,620 --> 00:28:43,230
low level so the advantage of using

00:28:40,620 --> 00:28:45,510
stats D for example for that for that as

00:28:43,230 --> 00:28:46,740
opposed to any other way is that first

00:28:45,510 --> 00:28:49,950
of all it doesn't slow down your

00:28:46,740 --> 00:28:52,050
applications so like your any page can

00:28:49,950 --> 00:28:55,950
have like fifty a hundred a thousand a

00:28:52,050 --> 00:28:57,930
million a billion trillion metrics and

00:28:55,950 --> 00:28:59,820
doesn't slow down your application so

00:28:57,930 --> 00:29:02,730
that's very important because then then

00:28:59,820 --> 00:29:07,170
you as a developer can choose to add

00:29:02,730 --> 00:29:09,780
metrics and make sure that your your

00:29:07,170 --> 00:29:12,210
analyst admins or people who manage your

00:29:09,780 --> 00:29:14,610
application are happy because like you

00:29:12,210 --> 00:29:16,400
add them for yourself and application is

00:29:14,610 --> 00:29:20,280
not slower from them so that's good

00:29:16,400 --> 00:29:22,350
because if stats D you like it the line

00:29:20,280 --> 00:29:24,420
one was showing stats the increment

00:29:22,350 --> 00:29:25,740
that's the only need that's the only

00:29:24,420 --> 00:29:27,690
thing you need to add your application

00:29:25,740 --> 00:29:29,370
obviously after you go the library

00:29:27,690 --> 00:29:31,290
you don't need to configure those

00:29:29,370 --> 00:29:33,900
message names you don't need to do

00:29:31,290 --> 00:29:36,920
anything like any name you choose you

00:29:33,900 --> 00:29:39,930
just commit that you start pushing those

00:29:36,920 --> 00:29:41,670
metrics and all of a sudden you you're

00:29:39,930 --> 00:29:46,680
able to graph them if any two it shows

00:29:41,670 --> 00:29:48,720
both either graphite or the data HQ if

00:29:46,680 --> 00:29:51,120
you're not graphing them obviously

00:29:48,720 --> 00:29:53,160
they're kind of useless and that's the

00:29:51,120 --> 00:29:55,080
same thing about log files like if you

00:29:53,160 --> 00:29:57,270
just log things and you never look at

00:29:55,080 --> 00:29:58,830
them don't even love them because you're

00:29:57,270 --> 00:30:00,930
just wasting this space for no reason

00:29:58,830 --> 00:30:02,340
was her it's very important when talking

00:30:00,930 --> 00:30:04,200
about data and talking about how to use

00:30:02,340 --> 00:30:06,210
the data for problems is what you have

00:30:04,200 --> 00:30:08,430
you actually have to be using it as

00:30:06,210 --> 00:30:10,620
opposed to just storing it just because

00:30:08,430 --> 00:30:13,170
you might need something because oh

00:30:10,620 --> 00:30:15,270
another reason why log files suck is

00:30:13,170 --> 00:30:18,480
that the log files are usually rotating

00:30:15,270 --> 00:30:20,490
very quickly so like if you have a lot

00:30:18,480 --> 00:30:23,550
of visitors and you're trying to log up

00:30:20,490 --> 00:30:25,290
a she requests I know maybe you will

00:30:23,550 --> 00:30:27,780
store like an hour of data and after

00:30:25,290 --> 00:30:30,180
that gone and you've had someone calls

00:30:27,780 --> 00:30:32,070
you and says like 6 a.m. in the morning

00:30:30,180 --> 00:30:33,779
today today our clients were complaining

00:30:32,070 --> 00:30:35,820
when something was not functioning

00:30:33,779 --> 00:30:41,129
right your log files are just not there

00:30:35,820 --> 00:30:44,039
anymore so measure things you stats D to

00:30:41,129 --> 00:30:46,379
collect the data so don't look don't try

00:30:44,039 --> 00:30:47,940
to even like store things in memory in

00:30:46,379 --> 00:30:48,359
databases or log files it's not gonna

00:30:47,940 --> 00:30:51,179
work

00:30:48,359 --> 00:30:52,799
you start the best thing ever when you

00:30:51,179 --> 00:30:56,249
start like when you push data to them

00:30:52,799 --> 00:30:58,529
use graphite to graph that and then when

00:30:56,249 --> 00:31:01,320
you outgrow that just use data dog or

00:30:58,529 --> 00:31:04,499
new relic to kind of provide a huge

00:31:01,320 --> 00:31:06,529
hosted solution because like for us many

00:31:04,499 --> 00:31:09,210
have like when we had a lot of servers

00:31:06,529 --> 00:31:10,619
you need storage for that so obviously

00:31:09,210 --> 00:31:12,570
like when you're running in graphite

00:31:10,619 --> 00:31:14,519
locally it means a very massive disk

00:31:12,570 --> 00:31:15,869
just to store every single matrix we

00:31:14,519 --> 00:31:18,809
would Sun because we will send millions

00:31:15,869 --> 00:31:21,269
of those during an hour and then you can

00:31:18,809 --> 00:31:23,669
sleep so thanks for your time if you

00:31:21,269 --> 00:31:26,489
have any more questions no if you have

00:31:23,669 --> 00:31:28,499
any questions you should ask them you

00:31:26,489 --> 00:31:30,179
mentioned stats D as I went to these

00:31:28,499 --> 00:31:32,849
develops conferences where they mention

00:31:30,179 --> 00:31:35,519
collect D have you what I haven't used

00:31:32,849 --> 00:31:37,950
that I don't know what does it similar

00:31:35,519 --> 00:31:40,080
it collects data stores it in a central

00:31:37,950 --> 00:31:42,089
server mine's well with graphite

00:31:40,080 --> 00:31:45,839
apparently atom try think it looks so

00:31:42,089 --> 00:31:48,269
stats D has like 55 corpse it might just

00:31:45,839 --> 00:31:52,339
be bad maybe what's the language is

00:31:48,269 --> 00:31:55,109
written why I asked that's the Adobe

00:31:52,339 --> 00:31:57,690
says this written in know chess and

00:31:55,109 --> 00:31:59,969
there's like a few few Forbes who

00:31:57,690 --> 00:32:01,710
rewrote write in Python in living in

00:31:59,969 --> 00:32:03,299
scowl and a few other languages just to

00:32:01,710 --> 00:32:05,489
play around so I think oh like they just

00:32:03,299 --> 00:32:07,889
might be one of those Forks while I have

00:32:05,489 --> 00:32:13,469
the mic locks - what's your opinion

00:32:07,889 --> 00:32:17,669
about that - I hate log files I'm just

00:32:13,469 --> 00:32:18,659
gonna put it out there no I don't look I

00:32:17,669 --> 00:32:21,239
don't I don't know

00:32:18,659 --> 00:32:26,820
we don't use log files at all any more

00:32:21,239 --> 00:32:30,029
questions yes can you say can Apache log

00:32:26,820 --> 00:32:31,589
straight to stats D or does it have to

00:32:30,029 --> 00:32:33,389
still do it through the log file and use

00:32:31,589 --> 00:32:34,950
a log so the user would be the easiest

00:32:33,389 --> 00:32:38,099
way would be to use their lobster

00:32:34,950 --> 00:32:39,389
lobster lobster I showed before so your

00:32:38,099 --> 00:32:41,849
log into a log father

00:32:39,389 --> 00:32:44,039
you can't bypass the log file for some

00:32:41,849 --> 00:32:45,900
things yes like up you can I don't think

00:32:44,039 --> 00:32:48,930
there's an existing plugin for Apache

00:32:45,900 --> 00:32:51,530
which would kind of change that but but

00:32:48,930 --> 00:32:54,540
you can hide things from Apache log file

00:32:51,530 --> 00:32:57,570
using the law law lock stir to graphite

00:32:54,540 --> 00:33:02,460
so it kind of songs at home yes the

00:32:57,570 --> 00:33:06,470
question is there which yes hi is there

00:33:02,460 --> 00:33:08,280
a way to aggregate without using the dog

00:33:06,470 --> 00:33:11,310
website

00:33:08,280 --> 00:33:14,130
graphite also aggregates you basically

00:33:11,310 --> 00:33:16,080
you can configure usually before so a

00:33:14,130 --> 00:33:18,030
graphite has a bunch of configuration

00:33:16,080 --> 00:33:20,090
files one of them you can pick on figure

00:33:18,030 --> 00:33:23,220
of how it should a great the data and

00:33:20,090 --> 00:33:25,230
but actually as far as graphing goes you

00:33:23,220 --> 00:33:27,330
can you can graph multiple data series

00:33:25,230 --> 00:33:29,360
just by by default out of the box

00:33:27,330 --> 00:33:32,490
it's only been if you want to do like

00:33:29,360 --> 00:33:33,930
multiply values do averages use sums and

00:33:32,490 --> 00:33:35,730
stuff then you can probably pick on

00:33:33,930 --> 00:33:37,680
figure out before that because it won't

00:33:35,730 --> 00:33:38,880
any good as you write to that it would

00:33:37,680 --> 00:33:44,340
aggregate that and then write

00:33:38,880 --> 00:33:51,600
immediately the very format yes this was

00:33:44,340 --> 00:33:52,920
a very German way like would you not say

00:33:51,600 --> 00:33:55,080
some of the problems you pointed out

00:33:52,920 --> 00:33:57,210
with locks such as losing some day or is

00:33:55,080 --> 00:33:58,620
more due to a crap implementation of

00:33:57,210 --> 00:34:00,840
logging than it is a problem with

00:33:58,620 --> 00:34:02,790
logging and what is the right wing

00:34:00,840 --> 00:34:05,100
permutation of flogging well not a

00:34:02,790 --> 00:34:06,840
raising data after an hour for example

00:34:05,100 --> 00:34:08,790
so just because you rotate a lot doesn't

00:34:06,840 --> 00:34:10,890
mean you after them be like oh well this

00:34:08,790 --> 00:34:12,330
has gone forever but then it's very

00:34:10,890 --> 00:34:14,700
handy if you're a developer to have an

00:34:12,330 --> 00:34:17,610
actual error message yeah well then you

00:34:14,700 --> 00:34:23,990
need a massive massive dick disk just to

00:34:17,610 --> 00:34:23,990
fit all the slots don't modest look

00:34:24,460 --> 00:34:29,119
yes but I mean what like logging is fine

00:34:26,899 --> 00:34:31,730
but you won't probably keep those logs

00:34:29,119 --> 00:34:36,500
for like a week long when you keep a log

00:34:31,730 --> 00:34:47,570
after a week okay

00:34:36,500 --> 00:34:49,550
we don't well yes I agree that's easier

00:34:47,570 --> 00:34:51,740
to walk by the same time think it's very

00:34:49,550 --> 00:34:58,730
like it's space inefficient to walk

00:34:51,740 --> 00:35:01,810
files and can you see that they're being

00:34:58,730 --> 00:35:03,710
kind of complementary aspects to this so

00:35:01,810 --> 00:35:06,200
the kind of things you're talking about

00:35:03,710 --> 00:35:08,420
will tell you very quickly when things

00:35:06,200 --> 00:35:10,280
are going wrong yes but your logs can

00:35:08,420 --> 00:35:11,960
tell you what has happened what the

00:35:10,280 --> 00:35:14,119
error message is what where you should

00:35:11,960 --> 00:35:15,890
be looking I mean that's you can see

00:35:14,119 --> 00:35:17,030
they have a drop-off in users and you

00:35:15,890 --> 00:35:19,099
can see that something's gone wrong but

00:35:17,030 --> 00:35:20,540
yeah well it makes nobody tell you what

00:35:19,099 --> 00:35:22,310
has actually happened no a lock file

00:35:20,540 --> 00:35:25,070
will tell you if it is a if it's an

00:35:22,310 --> 00:35:27,020
application error but if it's a for

00:35:25,070 --> 00:35:28,940
example user experience error where you

00:35:27,020 --> 00:35:31,790
move your login box from one place to

00:35:28,940 --> 00:35:33,740
another place the log files won't tell

00:35:31,790 --> 00:35:36,700
you that it's only that the drop in

00:35:33,740 --> 00:35:36,700
users will tell you that

00:35:39,440 --> 00:35:46,970
okay how do you put the deployments on

00:35:44,780 --> 00:35:48,770
the graph so you can align things like

00:35:46,970 --> 00:35:51,290
that it's not part of the system or did

00:35:48,770 --> 00:35:53,120
you so there's a bunch of plugins for

00:35:51,290 --> 00:35:57,250
deployment for example we use a library

00:35:53,120 --> 00:36:01,100
called graph fabric a Python clone of

00:35:57,250 --> 00:36:02,720
Capistrano I think and as a plugin you

00:36:01,100 --> 00:36:04,490
just add one line to go to a fabric

00:36:02,720 --> 00:36:06,830
deployment script and every time you run

00:36:04,490 --> 00:36:09,350
deploy it just it is it's called the API

00:36:06,830 --> 00:36:11,600
of data bar and you did like it has

00:36:09,350 --> 00:36:13,190
plug-ins for Jenkins and others where

00:36:11,600 --> 00:36:15,230
like every time something happens you

00:36:13,190 --> 00:36:17,360
can just call an API and say it happened

00:36:15,230 --> 00:36:21,770
so it just adds a new date time serious

00:36:17,360 --> 00:36:27,820
value and yeah yeah I think we have time

00:36:21,770 --> 00:36:29,960
for a couple more questions no questions

00:36:27,820 --> 00:36:37,310
should like should we argue more about

00:36:29,960 --> 00:36:39,170
log files no good thank you for your

00:36:37,310 --> 00:36:42,160
time and like I'll be around if anyone

00:36:39,170 --> 00:36:42,160
wants to talk about more of us

00:36:43,710 --> 00:36:47,099
[Applause]

00:36:52,330 --> 00:36:54,390

YouTube URL: https://www.youtube.com/watch?v=-wYUMX9zj9k


