Title: PHP UK Conference 2014 - Bastian Hofmann - Profiling PHP Applications
Publication date: 2014-03-21
Playlist: PHP UK Conference 2014
Description: 
	It's nothing new that speed is important for the success of any web application. Only a few hundred milliseconds may lie between a user leaving your site or staying. Unfortunately performance problems are oftentimes hard to fix and even harder to pinpoint. In this talk I will show you how we at ResearchGate measure web application performance, which means not only timing how long the PHP backend took to deliver a page, but also tracking the speed the users actually perceives in the browser. After that you will see how you can track down and analyze any problems you found through measuring with the help of tools like Xdebug, XHProf and the Symfony Debug Toolbar. And if you still need to get faster after optimizing and fixing all these issues, I'll introduce you to some tricks, techniques and patterns to even further decrease load times.
Captions: 
	00:00:04,580 --> 00:00:11,550
okay hello everyone I hope you enjoy the

00:00:08,670 --> 00:00:13,410
conference so far and I'm do great that

00:00:11,550 --> 00:00:16,560
you are here for the Nexus talk about

00:00:13,410 --> 00:00:19,170
profiling PHP applications and in the

00:00:16,560 --> 00:00:21,060
next hour we're going to find out what

00:00:19,170 --> 00:00:23,010
you can do when your site is slow and

00:00:21,060 --> 00:00:26,099
you have performance problems so this

00:00:23,010 --> 00:00:28,080
talk is all about speed and will speed

00:00:26,099 --> 00:00:29,910
up don't mean the drug or any movie or

00:00:28,080 --> 00:00:32,610
game I mean the speed of your web

00:00:29,910 --> 00:00:35,070
application so we'll talk about why

00:00:32,610 --> 00:00:37,200
speed actually matters what PageSpeed

00:00:35,070 --> 00:00:38,579
actually is how to measure the speed of

00:00:37,200 --> 00:00:41,040
your application in the right way that

00:00:38,579 --> 00:00:43,530
it really tells you something and to

00:00:41,040 --> 00:00:45,000
find out where the problems are how to

00:00:43,530 --> 00:00:47,219
find out where the problems are how to

00:00:45,000 --> 00:00:50,579
make it faster and before we start with

00:00:47,219 --> 00:00:52,020
all that a few words about me I work at

00:00:50,579 --> 00:00:53,489
researchgate as a social network for

00:00:52,020 --> 00:00:56,399
scientists based in Berlin in Germany

00:00:53,489 --> 00:00:57,800
it's actually quite successful about 4

00:00:56,399 --> 00:01:00,899
million users now so those sliders

00:00:57,800 --> 00:01:03,000
slightly outdated since last week that's

00:01:00,899 --> 00:01:04,710
what the profile looks like we you may

00:01:03,000 --> 00:01:07,350
have read about us in the news recently

00:01:04,710 --> 00:01:09,210
we have a table tennis played and

00:01:07,350 --> 00:01:12,360
snooker and everything we host user

00:01:09,210 --> 00:01:14,040
groups we have people visiting us and we

00:01:12,360 --> 00:01:15,780
are hiring if there any questions

00:01:14,040 --> 00:01:17,759
throughout the talk just raise your hand

00:01:15,780 --> 00:01:19,799
so this was the commercial thing that's

00:01:17,759 --> 00:01:21,030
what is it if there any questions

00:01:19,799 --> 00:01:22,290
throughout the talk just raise your hand

00:01:21,030 --> 00:01:24,720
we have plenty of time for questions

00:01:22,290 --> 00:01:26,640
also in the end the slides will be

00:01:24,720 --> 00:01:30,240
available on joined in and speak a lick

00:01:26,640 --> 00:01:32,220
after the talk and of course the sword

00:01:30,240 --> 00:01:34,439
is also recorded so you can watch it

00:01:32,220 --> 00:01:38,460
later on as well if you want to so speed

00:01:34,439 --> 00:01:43,170
why should you care about speed because

00:01:38,460 --> 00:01:45,360
it's important but seriously there was

00:01:43,170 --> 00:01:48,210
in the last year's a lot of companies a

00:01:45,360 --> 00:01:49,890
lot of research about what actually how

00:01:48,210 --> 00:01:52,040
important speed is for web application

00:01:49,890 --> 00:01:54,420
and how it influenced user behavior and

00:01:52,040 --> 00:01:55,770
all these studies that have been done by

00:01:54,420 --> 00:01:58,290
various companies and various

00:01:55,770 --> 00:02:00,840
organizations everyone came to the same

00:01:58,290 --> 00:02:02,759
conclusion that every millisecond really

00:02:00,840 --> 00:02:04,740
literally every millisecond in your

00:02:02,759 --> 00:02:08,310
application by delivering the

00:02:04,740 --> 00:02:10,890
application decide to users counts these

00:02:08,310 --> 00:02:13,530
are some examples for example here they

00:02:10,890 --> 00:02:15,420
add some ecommerce sites the editor

00:02:13,530 --> 00:02:18,300
delay on every page of just artifically

00:02:15,420 --> 00:02:20,459
adding asleep somewhere and this led

00:02:18,300 --> 00:02:22,440
actually in this target group to ascend

00:02:20,459 --> 00:02:24,360
10% of loss and conversions eleven

00:02:22,440 --> 00:02:25,680
percent fewer page views and sixteen

00:02:24,360 --> 00:02:28,680
percent degrees in customer satisfaction

00:02:25,680 --> 00:02:31,020
which is a lot and amounts to a huge

00:02:28,680 --> 00:02:33,060
amount of money and more real-world

00:02:31,020 --> 00:02:35,130
examples is that for example yahoo

00:02:33,060 --> 00:02:36,660
managed to increase their page by four

00:02:35,130 --> 00:02:38,640
milliseconds in the traffic increased

00:02:36,660 --> 00:02:40,800
because of that by nine percent and they

00:02:38,640 --> 00:02:41,940
also had this tested against a target

00:02:40,800 --> 00:02:45,510
group whether I didn't do the

00:02:41,940 --> 00:02:47,220
modifications or Mozilla which had a lot

00:02:45,510 --> 00:02:48,840
of more downloads just because a page

00:02:47,220 --> 00:02:51,630
got much much more faster because the

00:02:48,840 --> 00:02:53,310
Edit some caching to it and there are

00:02:51,630 --> 00:02:56,160
tons of other examples you can find them

00:02:53,310 --> 00:02:57,930
on the internet and for example here on

00:02:56,160 --> 00:03:00,420
strange of networks com there are lots

00:02:57,930 --> 00:03:02,160
of nice graphs about it for managers to

00:03:00,420 --> 00:03:05,760
convince them hey speed is important we

00:03:02,160 --> 00:03:08,670
should invest in it once you have done

00:03:05,760 --> 00:03:09,870
this the next question about this okay

00:03:08,670 --> 00:03:13,410
speed is important about what actually

00:03:09,870 --> 00:03:15,630
is page speed of course you have to

00:03:13,410 --> 00:03:18,480
server somewhere all of us were probably

00:03:15,630 --> 00:03:20,310
maintaining PHP applications so the

00:03:18,480 --> 00:03:22,410
server is an important part in PageSpeed

00:03:20,310 --> 00:03:24,480
because a request from the user from

00:03:22,410 --> 00:03:26,670
browser comes in then there's your big

00:03:24,480 --> 00:03:28,680
PHP application which does it magic in

00:03:26,670 --> 00:03:31,709
the end returns some days and HTML

00:03:28,680 --> 00:03:35,549
images whatever and returns us back over

00:03:31,709 --> 00:03:38,040
the HTTP connection to the user so what

00:03:35,549 --> 00:03:40,470
happens here can influence the PageSpeed

00:03:38,040 --> 00:03:42,660
greatly if you have ever waiting for our

00:03:40,470 --> 00:03:43,980
database queries for five seconds your

00:03:42,660 --> 00:03:47,190
site is probably going to be very slow

00:03:43,980 --> 00:03:49,829
by that but is in most applications it's

00:03:47,190 --> 00:03:51,239
our only the only component that

00:03:49,829 --> 00:03:53,310
influence is spatially because usually

00:03:51,239 --> 00:03:55,410
you have a load balancer in a kind of

00:03:53,310 --> 00:03:57,299
bigger application in front of it that

00:03:55,410 --> 00:03:58,829
can influence page speed for example the

00:03:57,299 --> 00:04:01,140
load balancer doesn't have enough slots

00:03:58,829 --> 00:04:03,090
to handle all the requests it can

00:04:01,140 --> 00:04:04,620
influence that and also in your PHP

00:04:03,090 --> 00:04:06,989
application here it's usually not just

00:04:04,620 --> 00:04:09,090
one file one script that does like five

00:04:06,989 --> 00:04:10,590
commands and then return something it's

00:04:09,090 --> 00:04:12,510
most of the time much more complicated

00:04:10,590 --> 00:04:15,450
you have lots of controllers and sub

00:04:12,510 --> 00:04:16,799
controllers and services and different

00:04:15,450 --> 00:04:18,900
components and you're waiting on

00:04:16,799 --> 00:04:21,840
different databases caches doing HTTP

00:04:18,900 --> 00:04:23,460
calls you have some kind of co routines

00:04:21,840 --> 00:04:25,240
maybe in there and all that kind of

00:04:23,460 --> 00:04:27,190
complicated stuff that can influence

00:04:25,240 --> 00:04:28,599
the page to show you in one request you

00:04:27,190 --> 00:04:30,310
are usually running over I know

00:04:28,599 --> 00:04:33,580
thousands of lines of code that can

00:04:30,310 --> 00:04:36,610
impact negatively somehow so it would be

00:04:33,580 --> 00:04:39,580
really great to know what kind of stuff

00:04:36,610 --> 00:04:42,370
is going on here and how it affects page

00:04:39,580 --> 00:04:44,110
street and even more complicated most

00:04:42,370 --> 00:04:46,900
applications are not only consists of

00:04:44,110 --> 00:04:49,000
like a low balance on a few PHP web

00:04:46,900 --> 00:04:51,970
servers but they only also talk to

00:04:49,000 --> 00:04:54,460
databases caches HTTP servers and also

00:04:51,970 --> 00:04:57,160
if you have a performance bottleneck and

00:04:54,460 --> 00:04:59,199
the database and your PHP script is just

00:04:57,160 --> 00:05:00,970
oiling over this is important or if you

00:04:59,199 --> 00:05:03,220
have an external HTTP service you're

00:05:00,970 --> 00:05:06,220
talking to that gets you data some

00:05:03,220 --> 00:05:08,979
external or internal AP is that also can

00:05:06,220 --> 00:05:11,520
impact page street very negatively so

00:05:08,979 --> 00:05:13,990
there's lots of stuff on the server side

00:05:11,520 --> 00:05:15,250
level that can influence it that you

00:05:13,990 --> 00:05:18,550
need to measure that you need to be

00:05:15,250 --> 00:05:20,650
aware of and to make it more complicated

00:05:18,550 --> 00:05:23,050
there is even more there's this big

00:05:20,650 --> 00:05:24,190
cloudy internet thing so once you

00:05:23,050 --> 00:05:26,199
deliver your page you computed

00:05:24,190 --> 00:05:29,469
everything you say okay here good to go

00:05:26,199 --> 00:05:31,120
please view it now that all the HTML

00:05:29,469 --> 00:05:34,780
content needs to be delivered to the

00:05:31,120 --> 00:05:36,219
user through the internet then like and

00:05:34,780 --> 00:05:38,590
lots of stuff can happen there there can

00:05:36,219 --> 00:05:41,469
be slow connections slow proxy servers

00:05:38,590 --> 00:05:42,820
in between all kinds of stuff especially

00:05:41,469 --> 00:05:44,830
if you're in very remote location

00:05:42,820 --> 00:05:48,340
somewhere there can be mobile networks

00:05:44,830 --> 00:05:49,840
of bad wifis like sometimes like AG life

00:05:48,340 --> 00:05:51,639
yesterday afternoon weather Wi-Fi broke

00:05:49,840 --> 00:05:55,090
down here that can influence page speed

00:05:51,639 --> 00:05:57,400
and if you cross this bridge on the

00:05:55,090 --> 00:05:59,620
internet the cloud then you have the

00:05:57,400 --> 00:06:01,419
browser of the user that also influences

00:05:59,620 --> 00:06:05,580
page to be negatively there are some

00:06:01,419 --> 00:06:09,039
that are faster some that or not and

00:06:05,580 --> 00:06:10,630
once the code isn't a browser and the

00:06:09,039 --> 00:06:12,400
HTML is there and the browser starts

00:06:10,630 --> 00:06:13,599
parsing it and its purported of course

00:06:12,400 --> 00:06:15,539
but then there's a lot of other stuff

00:06:13,599 --> 00:06:17,860
that needs to be fetched CSS images

00:06:15,539 --> 00:06:20,289
JavaScript the JavaScript also needs to

00:06:17,860 --> 00:06:22,150
be executed so if we have strange loops

00:06:20,289 --> 00:06:24,099
in JavaScript and do lots of complicated

00:06:22,150 --> 00:06:27,340
stuff that can slow down page be

00:06:24,099 --> 00:06:29,860
enormously so to sum it up if you look

00:06:27,340 --> 00:06:32,020
at actually what the user sees when he

00:06:29,860 --> 00:06:33,580
access your page it may be a few hundred

00:06:32,020 --> 00:06:35,380
milliseconds in the back end but then a

00:06:33,580 --> 00:06:36,820
few small seconds on the front and that

00:06:35,380 --> 00:06:38,289
he waits for your application to

00:06:36,820 --> 00:06:41,409
actually be finished to know

00:06:38,289 --> 00:06:43,419
below it unusable so when talking about

00:06:41,409 --> 00:06:44,889
page speed it's really really important

00:06:43,419 --> 00:06:47,050
what happens on the server of course

00:06:44,889 --> 00:06:49,300
because five seconds on the server is

00:06:47,050 --> 00:06:52,449
really bad but the rest of the whole

00:06:49,300 --> 00:06:55,029
stack is very important as well so if we

00:06:52,449 --> 00:06:57,039
go to step one of finding out and trying

00:06:55,029 --> 00:07:00,639
to make our site faster we have to

00:06:57,039 --> 00:07:02,949
measure all this stuff who is measuring

00:07:00,639 --> 00:07:07,240
PageSpeed like this with fondant and

00:07:02,949 --> 00:07:09,099
back and combined already okay hopefully

00:07:07,240 --> 00:07:11,289
those of you who didn't raise your hand

00:07:09,099 --> 00:07:13,119
after this talk you're going to go into

00:07:11,289 --> 00:07:16,449
your company back and say hey we have to

00:07:13,119 --> 00:07:17,889
do this because it is not very hard you

00:07:16,449 --> 00:07:21,909
just have to do it we have to spend a

00:07:17,889 --> 00:07:24,550
bit of time it was it and the most

00:07:21,909 --> 00:07:26,919
important part and probably the most not

00:07:24,550 --> 00:07:31,709
so nice part about it is it's going to

00:07:26,919 --> 00:07:35,139
hurt when you start it because you think

00:07:31,709 --> 00:07:38,529
okay my page is actually not that slow

00:07:35,139 --> 00:07:40,180
then you start measuring it you have all

00:07:38,529 --> 00:07:41,919
these fancy graphs there and then you

00:07:40,180 --> 00:07:43,899
see actually how slow it is for normal

00:07:41,919 --> 00:07:46,870
users because on your machine it usually

00:07:43,899 --> 00:07:49,419
works fine like you have a new two

00:07:46,870 --> 00:07:53,860
months old macbook pro with lots of ram

00:07:49,419 --> 00:07:55,539
and lots of CPU power and SSDs and you

00:07:53,860 --> 00:07:58,689
have a fast internet connections with

00:07:55,539 --> 00:08:00,490
like 50 100 megabits probably also the

00:07:58,689 --> 00:08:02,139
ping and latency you to your data center

00:08:00,490 --> 00:08:04,029
where the servers are it's not that

00:08:02,139 --> 00:08:05,860
large because oftentimes the server

00:08:04,029 --> 00:08:08,469
somewhere geographically in the same

00:08:05,860 --> 00:08:11,769
location or in a nearby location and not

00:08:08,469 --> 00:08:14,680
across the world somewhere so on your

00:08:11,769 --> 00:08:16,599
machine it may be fine the speed but for

00:08:14,680 --> 00:08:19,539
users the reality is lots of them have

00:08:16,599 --> 00:08:24,539
very old computers maybe not as well as

00:08:19,539 --> 00:08:28,539
this one here but a bit with Manu but

00:08:24,539 --> 00:08:30,249
like 56 years old was crap notebooks

00:08:28,539 --> 00:08:32,589
with lots of crab bear on their person

00:08:30,249 --> 00:08:35,050
that are very underpowered and you

00:08:32,589 --> 00:08:37,360
notices very quickly that this is

00:08:35,050 --> 00:08:40,659
influencing page be very very negatively

00:08:37,360 --> 00:08:42,789
or even worse mobile phones of course

00:08:40,659 --> 00:08:44,680
this is also an acceleration but old

00:08:42,789 --> 00:08:47,680
smart phones with android to on it are

00:08:44,680 --> 00:08:49,240
not very very fast and also the whole

00:08:47,680 --> 00:08:51,130
network stack is not very fast then you

00:08:49,240 --> 00:08:54,579
have broadband connections over mobile

00:08:51,130 --> 00:08:57,160
and these have high package drops low

00:08:54,579 --> 00:08:59,769
high latency and are also not very fast

00:08:57,160 --> 00:09:03,279
not everyone has LTE available on the

00:08:59,769 --> 00:09:05,740
phone then old browsers I istics is

00:09:03,279 --> 00:09:07,269
still around for four point okay this is

00:09:05,740 --> 00:09:09,040
a figure from a polar bi I checked last

00:09:07,269 --> 00:09:11,529
week they are still at 4.9 a four point

00:09:09,040 --> 00:09:13,600
eight percent worldwide especially if

00:09:11,529 --> 00:09:15,880
you have an international user base with

00:09:13,600 --> 00:09:17,319
users in China I know you can't probably

00:09:15,880 --> 00:09:19,209
read it from the back but China has an

00:09:17,319 --> 00:09:23,110
Internet Explorer 6 usage of twenty-two

00:09:19,209 --> 00:09:25,269
percent you need to be aware of that

00:09:23,110 --> 00:09:26,889
that is and if China is an important

00:09:25,269 --> 00:09:29,410
market for you need to be aware of that

00:09:26,889 --> 00:09:31,750
the reason for it is i guess that lots

00:09:29,410 --> 00:09:35,290
of users are using pirated windows XP

00:09:31,750 --> 00:09:40,420
sand can't upgrade in china Thank You

00:09:35,290 --> 00:09:42,490
Microsoft then there is also the

00:09:40,420 --> 00:09:44,260
internet does not only consist of users

00:09:42,490 --> 00:09:46,630
in Europe United States there are lots

00:09:44,260 --> 00:09:48,519
of people in emerging markets in Africa

00:09:46,630 --> 00:09:51,730
in China and India in Brazil and

00:09:48,519 --> 00:09:55,059
everywhere or even Australia where are

00:09:51,730 --> 00:09:56,769
the distance between the user and your

00:09:55,059 --> 00:09:58,269
servers in some data center somewhere in

00:09:56,769 --> 00:10:00,279
Europe or somewhere in the United States

00:09:58,269 --> 00:10:03,339
is actually quite large so they have

00:10:00,279 --> 00:10:05,139
just because of Technology much larger

00:10:03,339 --> 00:10:06,939
ping so their stuff you can do about

00:10:05,139 --> 00:10:08,470
that multiple data centers using see the

00:10:06,939 --> 00:10:11,949
ends or something if that's important

00:10:08,470 --> 00:10:14,260
for you so as I said it's very important

00:10:11,949 --> 00:10:16,209
to measure the speed at the user side to

00:10:14,260 --> 00:10:20,980
get a really feel of what the users

00:10:16,209 --> 00:10:22,870
experiencing how to do this they're in

00:10:20,980 --> 00:10:24,970
modern browsers there is the navigation

00:10:22,870 --> 00:10:27,790
timing API has every one body part of

00:10:24,970 --> 00:10:30,910
this the innervation timing API okay

00:10:27,790 --> 00:10:32,920
it's very very convenient supported I

00:10:30,910 --> 00:10:36,730
think in all modern browsers except

00:10:32,920 --> 00:10:38,620
Safari I guess still what Safari is

00:10:36,730 --> 00:10:41,680
probably not that important as a browser

00:10:38,620 --> 00:10:44,319
if you're not targeting iOS but what

00:10:41,680 --> 00:10:46,240
this API provides you just in JavaScript

00:10:44,319 --> 00:10:47,740
a lots of measuring points and time

00:10:46,240 --> 00:10:50,230
stems from everything that happens in a

00:10:47,740 --> 00:10:52,089
reckless so from start of the user

00:10:50,230 --> 00:10:54,579
clicks on a link all the redirects that

00:10:52,089 --> 00:10:57,549
happens application cache P&S look up

00:10:54,579 --> 00:10:59,559
participe connection creation then

00:10:57,549 --> 00:11:00,590
sending the request summer as other hand

00:10:59,559 --> 00:11:03,080
shake receiving

00:11:00,590 --> 00:11:04,940
new responds processing and fetching all

00:11:03,080 --> 00:11:07,370
the content or the CSS all the images

00:11:04,940 --> 00:11:09,470
passing the Dom loading all the

00:11:07,370 --> 00:11:12,350
JavaScript until the page is really

00:11:09,470 --> 00:11:14,030
really finished with loading so if you

00:11:12,350 --> 00:11:15,470
browser the browser via support it you

00:11:14,030 --> 00:11:17,420
can just get the data from there you

00:11:15,470 --> 00:11:19,790
have everything you need and then send

00:11:17,420 --> 00:11:22,160
it back to your back-end somewhere and

00:11:19,790 --> 00:11:23,360
plot it in a nice graph for all the

00:11:22,160 --> 00:11:25,970
browser's you have to do it yourself

00:11:23,360 --> 00:11:28,160
somewhere of course there are libraries

00:11:25,970 --> 00:11:30,230
or they're also service although i think

00:11:28,160 --> 00:11:31,970
google analytics for example does stuff

00:11:30,230 --> 00:11:33,290
like that you can get with I think this

00:11:31,970 --> 00:11:35,570
pubic also some kind of these

00:11:33,290 --> 00:11:37,640
measurements there's also also open

00:11:35,570 --> 00:11:39,440
source period projects like boomerang

00:11:37,640 --> 00:11:41,630
from na clock normal who does it and

00:11:39,440 --> 00:11:43,580
these allow you to get all these

00:11:41,630 --> 00:11:45,710
measurements as well doing it by hand is

00:11:43,580 --> 00:11:47,840
kind of tricky because of time offsets

00:11:45,710 --> 00:11:49,640
you have to get the time soon from a

00:11:47,840 --> 00:11:51,530
back end to the user and then you have

00:11:49,640 --> 00:11:53,300
to calculate also with JavaScript a few

00:11:51,530 --> 00:11:54,710
time stamps so I wouldn't recommend

00:11:53,300 --> 00:11:58,220
doing it yourself if you don't need to

00:11:54,710 --> 00:11:59,630
and then you get nice graphs out of

00:11:58,220 --> 00:12:03,290
there it's not important what it does

00:11:59,630 --> 00:12:06,170
but you see then where the user how fast

00:12:03,290 --> 00:12:08,660
the user actually is and important here

00:12:06,170 --> 00:12:13,160
is the green line is actually this is an

00:12:08,660 --> 00:12:15,350
actual graph we had on our application

00:12:13,160 --> 00:12:17,780
at some point for one page where it was

00:12:15,350 --> 00:12:19,400
kind of slow but you had to hear the

00:12:17,780 --> 00:12:21,110
green line which is barely noticeable on

00:12:19,400 --> 00:12:24,410
the red line is the external time the

00:12:21,110 --> 00:12:26,030
back end took the red line is the time

00:12:24,410 --> 00:12:28,100
where the first content the first byte

00:12:26,030 --> 00:12:30,770
arrived of the user and the blue line is

00:12:28,100 --> 00:12:32,780
when actually the page was completely

00:12:30,770 --> 00:12:36,200
completed and rendered so there is a

00:12:32,780 --> 00:12:38,450
huge gap in here and making trying to

00:12:36,200 --> 00:12:40,250
make this gap with slower and make

00:12:38,450 --> 00:12:42,680
making it faster it's a good way to

00:12:40,250 --> 00:12:44,810
materialise it like this how to get the

00:12:42,680 --> 00:12:46,490
data back to the server the easiest part

00:12:44,810 --> 00:12:49,340
is just sending a tracking request

00:12:46,490 --> 00:12:50,540
somewhere so doing an AJAX request after

00:12:49,340 --> 00:12:53,120
you have all the measurements you need

00:12:50,540 --> 00:12:57,980
or just including an image somewhere

00:12:53,120 --> 00:12:59,960
with dimension of 0 0 and put all the

00:12:57,980 --> 00:13:02,390
measurements you have into this request

00:12:59,960 --> 00:13:04,760
for example back end time was one of 23

00:13:02,390 --> 00:13:06,410
milliseconds complete time was an H at

00:13:04,760 --> 00:13:09,380
90 milli seconds Tom Brady event was

00:13:06,410 --> 00:13:12,080
fired after 580 30 seconds and we were

00:13:09,380 --> 00:13:13,110
on the profile page so we have this

00:13:12,080 --> 00:13:16,140
request

00:13:13,110 --> 00:13:18,060
you should do it you should probably not

00:13:16,140 --> 00:13:20,250
do very much there when sin when

00:13:18,060 --> 00:13:23,519
answering to this request because

00:13:20,250 --> 00:13:26,850
usually the a very very convenient way

00:13:23,519 --> 00:13:28,740
to to do this just heaven server

00:13:26,850 --> 00:13:30,269
somewhere some Apache some Engineer

00:13:28,740 --> 00:13:32,790
server that does nothing but returned a

00:13:30,269 --> 00:13:34,800
zero byte response with the proper

00:13:32,790 --> 00:13:36,630
terrors of course they can just do the

00:13:34,800 --> 00:13:41,160
natives request to that or just include

00:13:36,630 --> 00:13:43,079
an image tag to this so ever and then so

00:13:41,160 --> 00:13:46,380
it does nothing else but make an empty

00:13:43,079 --> 00:13:48,149
response and lock this request in its

00:13:46,380 --> 00:13:49,769
access lock once it's the request is in

00:13:48,149 --> 00:13:52,740
the excess lock with all this data here

00:13:49,769 --> 00:13:54,240
you can have a small demon like lock

00:13:52,740 --> 00:13:56,250
search for example telling over this

00:13:54,240 --> 00:13:58,440
excess lock and putting this somewhere

00:13:56,250 --> 00:14:01,740
in a database to make replies nice

00:13:58,440 --> 00:14:03,480
graphs yes there's a home I oh hang on

00:14:01,740 --> 00:14:08,390
we need the microphone for the question

00:14:03,480 --> 00:14:08,390
so that others on recording here as well

00:14:09,800 --> 00:14:17,190
if how much is the performance slowed

00:14:12,600 --> 00:14:20,370
down by the tracking request usually

00:14:17,190 --> 00:14:22,050
nothing because you're doing after the

00:14:20,370 --> 00:14:24,540
pages load that you're doing a very fast

00:14:22,050 --> 00:14:26,370
request somewhere so the user can

00:14:24,540 --> 00:14:28,079
already interact with the page you do in

00:14:26,370 --> 00:14:30,390
requests then and you can just do it on

00:14:28,079 --> 00:14:32,640
another server for example you have a

00:14:30,390 --> 00:14:34,140
domain tracking domain.com which has a

00:14:32,640 --> 00:14:36,449
totally different server a totally

00:14:34,140 --> 00:14:38,130
different apache or nginx instance that

00:14:36,449 --> 00:14:39,750
just answers with zero bytes and your

00:14:38,130 --> 00:14:41,940
production system is not influenced by

00:14:39,750 --> 00:14:44,339
this at all even if the tracking server

00:14:41,940 --> 00:14:47,370
is not there anymore you have no data

00:14:44,339 --> 00:14:50,040
but that's it and usually because you

00:14:47,370 --> 00:14:51,959
don't do anything on it you could in

00:14:50,040 --> 00:14:54,269
most web pages one so i was actually

00:14:51,959 --> 00:15:00,810
enough you don't need a huge set up for

00:14:54,269 --> 00:15:04,430
that so does anybody have of lock search

00:15:00,810 --> 00:15:08,190
before ok locks which is a very very

00:15:04,430 --> 00:15:11,010
cool tool to do lots of stuff with lock

00:15:08,190 --> 00:15:13,230
files and getting metrics and it's very

00:15:11,010 --> 00:15:16,890
very convenient for lots of cases in our

00:15:13,230 --> 00:15:19,949
case also lock session has a very simple

00:15:16,890 --> 00:15:21,990
setup it has a plug-in system and every

00:15:19,949 --> 00:15:24,329
message that that gets into lock search

00:15:21,990 --> 00:15:26,499
is coming from an input then you can

00:15:24,329 --> 00:15:28,929
filter in lock sesh with plugins and you

00:15:26,499 --> 00:15:30,609
and send this message to an output very

00:15:28,929 --> 00:15:32,409
simple you have plugins for nearly

00:15:30,609 --> 00:15:33,879
everything so you don't have to write

00:15:32,409 --> 00:15:36,579
much of your stuff itself you just

00:15:33,879 --> 00:15:38,919
insulate configure it it has a very low

00:15:36,579 --> 00:15:40,479
or pretty low memory footprint and cpu

00:15:38,919 --> 00:15:41,769
footprint if it's running on a server so

00:15:40,479 --> 00:15:44,619
it's fine to run it on a production

00:15:41,769 --> 00:15:47,259
server as a small demon and in our case

00:15:44,619 --> 00:15:49,719
our setup would look like this we have

00:15:47,259 --> 00:15:51,399
our browser with javascript sending all

00:15:49,719 --> 00:15:53,109
these tracking requests somewhere or to

00:15:51,399 --> 00:15:54,729
our tracking server the tracking server

00:15:53,109 --> 00:15:57,489
puts the strutting requests in our

00:15:54,729 --> 00:15:58,689
access lock does nothing more and then

00:15:57,489 --> 00:16:02,799
we have a lock stitch instance running

00:15:58,689 --> 00:16:04,749
on it tailing on this extra flock and so

00:16:02,799 --> 00:16:07,299
this would be the input part of rock

00:16:04,749 --> 00:16:10,599
stash and then we need to send the data

00:16:07,299 --> 00:16:12,069
somewhere to graph it one tool of course

00:16:10,599 --> 00:16:14,169
there are many solutions out there one

00:16:12,069 --> 00:16:16,749
tool that is open source and has a lot

00:16:14,169 --> 00:16:19,479
of users and usages is graphite which

00:16:16,749 --> 00:16:21,189
gives you a very very good and

00:16:19,479 --> 00:16:23,379
performant database to store all these

00:16:21,189 --> 00:16:25,329
metrics so it can actually store a whole

00:16:23,379 --> 00:16:27,579
lot and gives you also a rich interface

00:16:25,329 --> 00:16:29,079
to make nice grass or graphs out of it

00:16:27,579 --> 00:16:31,299
and perform various mathematical

00:16:29,079 --> 00:16:32,949
functions on it correlate different

00:16:31,299 --> 00:16:34,989
graphs with you with each other so that

00:16:32,949 --> 00:16:38,169
you get exactly the data you need in

00:16:34,989 --> 00:16:41,379
your graphs so I set up there would look

00:16:38,169 --> 00:16:43,749
like that log stash case on this excess

00:16:41,379 --> 00:16:48,129
lock passes all the data out of there

00:16:43,749 --> 00:16:50,729
and then sends it to graphite in code

00:16:48,129 --> 00:16:53,259
which is just example configuration and

00:16:50,729 --> 00:16:55,479
this literary what you have to write for

00:16:53,259 --> 00:16:57,429
this and is running a bit like this in

00:16:55,479 --> 00:16:59,679
our production system you have an input

00:16:57,429 --> 00:17:02,379
tailing on the excess lock here on an

00:16:59,679 --> 00:17:04,899
engine ex-lax this lock we have some

00:17:02,379 --> 00:17:06,789
filters this these are grok filters

00:17:04,899 --> 00:17:09,100
which is basically regular expression

00:17:06,789 --> 00:17:10,990
parsing where we pass for example to

00:17:09,100 --> 00:17:13,869
connect time out of here and the page

00:17:10,990 --> 00:17:15,850
name we have an additional filter here

00:17:13,869 --> 00:17:19,209
to validate the page name so that others

00:17:15,850 --> 00:17:20,919
can not create metrics like if somebody

00:17:19,209 --> 00:17:22,689
sees a tracking request and many plates

00:17:20,919 --> 00:17:25,299
that insensitive scroll somewhere we all

00:17:22,689 --> 00:17:26,799
don't want to create new metrics for

00:17:25,299 --> 00:17:28,919
pages that we really don't have so if

00:17:26,799 --> 00:17:31,299
somebody would say okay I have a page

00:17:28,919 --> 00:17:32,559
not available or something we don't want

00:17:31,299 --> 00:17:35,409
to create a metric for that so we are

00:17:32,559 --> 00:17:37,690
dropping these messages here and then

00:17:35,409 --> 00:17:39,380
you just send it to graphite with a

00:17:37,690 --> 00:17:41,090
steady plugin

00:17:39,380 --> 00:17:44,600
have all the time as for example for the

00:17:41,090 --> 00:17:46,340
connector time in here and then in

00:17:44,600 --> 00:17:48,490
graphite you have your graph you can

00:17:46,340 --> 00:17:51,140
revisit this on the slides later on and

00:17:48,490 --> 00:17:55,370
the configuration but it's really really

00:17:51,140 --> 00:17:58,640
just these few lines of code so what we

00:17:55,370 --> 00:18:01,340
have now is the page speed of the pages

00:17:58,640 --> 00:18:04,100
we want to measure not only the back end

00:18:01,340 --> 00:18:06,500
time but also the time the JavaScript

00:18:04,100 --> 00:18:09,170
took the CSS took two parts and low and

00:18:06,500 --> 00:18:11,780
all we have we need to actually tell if

00:18:09,170 --> 00:18:16,550
one page was fast or not but can we

00:18:11,780 --> 00:18:18,530
measure more and usually you can for

00:18:16,550 --> 00:18:20,900
example what would be convenient if you

00:18:18,530 --> 00:18:22,940
use load balancers like H a proxy or

00:18:20,900 --> 00:18:25,760
something they also have lots and lots

00:18:22,940 --> 00:18:27,470
of information in these logs for example

00:18:25,760 --> 00:18:31,220
that information most load-balancing

00:18:27,470 --> 00:18:32,840
have q's and if the amount of slots for

00:18:31,220 --> 00:18:35,000
one backend for your PHP application is

00:18:32,840 --> 00:18:36,650
full a request gets queued for a certain

00:18:35,000 --> 00:18:37,790
amount of time until your back-end is

00:18:36,650 --> 00:18:39,800
available or some back and it's

00:18:37,790 --> 00:18:41,180
available anymore to surface requests so

00:18:39,800 --> 00:18:43,610
this information is also available in

00:18:41,180 --> 00:18:45,140
the lock whole long request was cute

00:18:43,610 --> 00:18:47,240
until it was handled and so on so it's

00:18:45,140 --> 00:18:50,210
also very very convenient nice to have

00:18:47,240 --> 00:18:52,010
this data and graphs as well and there

00:18:50,210 --> 00:18:53,530
you can do the same thing you have one

00:18:52,010 --> 00:18:55,910
locked file your insert a log stash

00:18:53,530 --> 00:18:58,580
instance on this machine the lock such

00:18:55,910 --> 00:19:02,390
instance tails on the h8 proxy lock for

00:18:58,580 --> 00:19:04,970
example passes the XH proxy lock maybe

00:19:02,390 --> 00:19:07,520
mutates it a bit so that the keys are

00:19:04,970 --> 00:19:10,700
fine because dot in the server name is

00:19:07,520 --> 00:19:13,310
not allowed in graphite as a key name

00:19:10,700 --> 00:19:15,110
and then you can send it to graphite as

00:19:13,310 --> 00:19:16,790
well the same way and you can do this is

00:19:15,110 --> 00:19:18,110
all kind of locks of information that

00:19:16,790 --> 00:19:21,200
you already have in your system if you

00:19:18,110 --> 00:19:23,330
have some databases that have slow query

00:19:21,200 --> 00:19:24,950
logs you can do the same or if you have

00:19:23,330 --> 00:19:28,240
some HTTP servers in the back end you

00:19:24,950 --> 00:19:31,640
can do the same as well also you can

00:19:28,240 --> 00:19:34,010
lock information this way directly from

00:19:31,640 --> 00:19:36,320
a PHP application for example if you

00:19:34,010 --> 00:19:38,390
want to count the amount of cash hits

00:19:36,320 --> 00:19:42,140
and misses that you have in your

00:19:38,390 --> 00:19:44,510
application you can just send also from

00:19:42,140 --> 00:19:47,480
within your PHP applications you can

00:19:44,510 --> 00:19:50,420
send a tracking request server to server

00:19:47,480 --> 00:19:52,250
for to graphite and graphite then we'll

00:19:50,420 --> 00:19:52,700
plot this as well if your time you have

00:19:52,250 --> 00:19:54,680
a cash

00:19:52,700 --> 00:19:59,530
orcish miss or you can measure how long

00:19:54,680 --> 00:20:01,940
an SQL query takes in general and so on

00:19:59,530 --> 00:20:04,100
what's also important is with graphite

00:20:01,940 --> 00:20:06,560
and stats d you are sending UDP requests

00:20:04,100 --> 00:20:07,700
from your application from the PHP

00:20:06,560 --> 00:20:09,770
applications so it's actually

00:20:07,700 --> 00:20:11,750
non-blocking it's really fast you don't

00:20:09,770 --> 00:20:13,640
have to wait for response you so you can

00:20:11,750 --> 00:20:15,650
go really crazy with that and there is

00:20:13,640 --> 00:20:18,620
not a huge performance or wed to do it

00:20:15,650 --> 00:20:21,140
like to do a few hundred tracking

00:20:18,620 --> 00:20:27,440
requests on every user request that

00:20:21,140 --> 00:20:29,780
comes in so you're off all that that you

00:20:27,440 --> 00:20:31,670
you know now how many patients you have

00:20:29,780 --> 00:20:33,620
your how many cash mission this is how

00:20:31,670 --> 00:20:36,320
long an SQL query takes on average

00:20:33,620 --> 00:20:38,870
around HTTP requests to some API stakes

00:20:36,320 --> 00:20:40,940
on average now what you can do is make

00:20:38,870 --> 00:20:43,220
it more fine great I already said with

00:20:40,940 --> 00:20:44,810
all set a bit you can measure it by

00:20:43,220 --> 00:20:47,750
pages for example how long it took all

00:20:44,810 --> 00:20:50,390
this stuff on my home page on my profile

00:20:47,750 --> 00:20:53,210
page on my application page on my

00:20:50,390 --> 00:20:54,410
unlocked out pages you can also plot and

00:20:53,210 --> 00:20:56,810
graph it and measure it by browser

00:20:54,410 --> 00:20:58,790
additionally so you know in internet

00:20:56,810 --> 00:21:00,380
explorer it usually takes this long that

00:20:58,790 --> 00:21:01,550
doesn't make much sense with back end

00:21:00,380 --> 00:21:03,890
stuff because you're back end is very

00:21:01,550 --> 00:21:05,270
browser agnostic but with the front end

00:21:03,890 --> 00:21:07,700
stuff it max makes very much sense to

00:21:05,270 --> 00:21:10,100
measure it by browser chrome was faster

00:21:07,700 --> 00:21:12,950
than IE for example you can measure it

00:21:10,100 --> 00:21:15,500
like country which is also kind of nice

00:21:12,950 --> 00:21:18,620
to all by maybe not if country is to

00:21:15,500 --> 00:21:20,600
labels by continent so that you are see

00:21:18,620 --> 00:21:23,300
how much snow are you in Asia then

00:21:20,600 --> 00:21:24,860
you're in North America probably you can

00:21:23,300 --> 00:21:27,980
measure all that stuff for log in or

00:21:24,860 --> 00:21:29,420
locked out users so maybe the our

00:21:27,980 --> 00:21:32,090
performance is not that important for us

00:21:29,420 --> 00:21:33,680
but the log in the performance before

00:21:32,090 --> 00:21:35,810
locked in users who are registered is

00:21:33,680 --> 00:21:37,310
really important and probably is also

00:21:35,810 --> 00:21:39,470
very different because there's much more

00:21:37,310 --> 00:21:41,330
dynamic data involved there so we may

00:21:39,470 --> 00:21:43,730
want to measure this differently also

00:21:41,330 --> 00:21:46,070
for example how long SQL scripts hooks

00:21:43,730 --> 00:21:48,170
for locked in all of our users or

00:21:46,070 --> 00:21:50,660
measure it for separately for heavy

00:21:48,170 --> 00:21:52,430
users because they probably have lots of

00:21:50,660 --> 00:21:54,050
data in your application they are

00:21:52,430 --> 00:21:56,050
probably have much slower response times

00:21:54,050 --> 00:21:59,270
because of that for example they have

00:21:56,050 --> 00:22:01,550
5,000 followers and it's probably way

00:21:59,270 --> 00:22:04,310
harder to compute a follower graph for

00:22:01,550 --> 00:22:05,610
them but these fears also the most

00:22:04,310 --> 00:22:08,100
active once so the Wondrich

00:22:05,610 --> 00:22:10,110
I'm really really happy so it makes

00:22:08,100 --> 00:22:13,980
sense as well and you have all this data

00:22:10,110 --> 00:22:15,660
there you probably should build some

00:22:13,980 --> 00:22:17,520
dashboards to visualize all that and

00:22:15,660 --> 00:22:19,049
then define some goals where you want to

00:22:17,520 --> 00:22:21,240
go first you go crying because

00:22:19,049 --> 00:22:23,820
everything is really looks really bad

00:22:21,240 --> 00:22:26,280
and then you can define target goals hey

00:22:23,820 --> 00:22:28,230
that's what we want to reach and then

00:22:26,280 --> 00:22:30,330
you can iterate over it and try to get

00:22:28,230 --> 00:22:32,070
faster and faster and when you see was

00:22:30,330 --> 00:22:34,110
ever released at this curve is go down

00:22:32,070 --> 00:22:36,480
and actually responds almost better and

00:22:34,110 --> 00:22:38,640
better it's also really motivating was

00:22:36,480 --> 00:22:42,809
that we come to our questions so far

00:22:38,640 --> 00:22:45,120
about that okay then we come to step two

00:22:42,809 --> 00:22:48,600
now we have all this data how do we find

00:22:45,120 --> 00:22:52,080
out where the problems are and the

00:22:48,600 --> 00:22:53,580
normal way to do this is profiling there

00:22:52,080 --> 00:22:56,130
are lots of profiling tools out there

00:22:53,580 --> 00:22:59,220
one of them is called and probably the

00:22:56,130 --> 00:23:01,169
oldest is called XD bug XD bug has lots

00:22:59,220 --> 00:23:02,580
of lots of features like setting

00:23:01,169 --> 00:23:04,169
breakpoints somewhere that are very

00:23:02,580 --> 00:23:06,450
convenient and then stepping through the

00:23:04,169 --> 00:23:08,250
glance of code to analyze why something

00:23:06,450 --> 00:23:11,220
is not happening like you see you so it

00:23:08,250 --> 00:23:13,230
would be it provides nice error displays

00:23:11,220 --> 00:23:15,270
that are much nicer than just the

00:23:13,230 --> 00:23:17,610
usually PHP error displays or

00:23:15,270 --> 00:23:19,520
secretaries or bottoms and it allows

00:23:17,610 --> 00:23:22,169
also to profile a web application

00:23:19,520 --> 00:23:25,530
setting up is very easy it's just a

00:23:22,169 --> 00:23:28,520
pickle install XD buck and then you can

00:23:25,530 --> 00:23:31,860
enable the profiler in your php.ini

00:23:28,520 --> 00:23:34,710
settings for example you can enable it

00:23:31,860 --> 00:23:41,760
by a trigger and then each time you have

00:23:34,710 --> 00:23:44,160
this X debug profile field yeah no

00:23:41,760 --> 00:23:46,230
problem each time you have this XD back

00:23:44,160 --> 00:23:48,270
profile for a parameter for example then

00:23:46,230 --> 00:23:51,419
a profile is written to disk and you can

00:23:48,270 --> 00:23:52,799
analyze it with tools then 12 there are

00:23:51,419 --> 00:23:56,220
also lots of tools for it for example

00:23:52,799 --> 00:23:59,130
web client or q cash grind or K cash

00:23:56,220 --> 00:24:00,750
grind that allow you to then see the

00:23:59,130 --> 00:24:02,730
whole call stack how many invitations

00:24:00,750 --> 00:24:09,090
you had / function how long it took and

00:24:02,730 --> 00:24:12,200
so on and let's see I prepared a small

00:24:09,090 --> 00:24:12,200
demonstration for that

00:24:14,050 --> 00:24:20,960
so this is for example a Q cash grind

00:24:17,390 --> 00:24:25,090
output of one request of symfony2 and

00:24:20,960 --> 00:24:25,090
just make this a bit bigger

00:24:34,230 --> 00:24:38,140
so normally you should be able to make

00:24:36,550 --> 00:24:45,480
it bigger if you're not an imbecile like

00:24:38,140 --> 00:24:48,340
I am okay but in this small window here

00:24:45,480 --> 00:24:51,040
you see the whole course XO it went

00:24:48,340 --> 00:24:52,540
through the HTTP colonel then edit some

00:24:51,040 --> 00:24:54,190
logging records you can click on its

00:24:52,540 --> 00:24:56,350
you're on the right side here you see

00:24:54,190 --> 00:24:58,540
all the colors so who calls these

00:24:56,350 --> 00:25:00,730
functions you see what functions is

00:24:58,540 --> 00:25:04,390
called me can step through that you see

00:25:00,730 --> 00:25:06,700
counters there and also somewhere how

00:25:04,390 --> 00:25:08,860
long it how long it took and how long

00:25:06,700 --> 00:25:10,540
the cost of this function was so this is

00:25:08,860 --> 00:25:16,750
very convenient to in a very detailed

00:25:10,540 --> 00:25:19,240
level see what you coated a laugh lot

00:25:16,750 --> 00:25:21,510
slower now it's fine on my machine on my

00:25:19,240 --> 00:25:28,150
window here there's a big resolution

00:25:21,510 --> 00:25:31,120
okay one thing this XD bug is it's only

00:25:28,150 --> 00:25:33,160
a rough indicator about the performance

00:25:31,120 --> 00:25:35,530
of your application because XD back

00:25:33,160 --> 00:25:39,970
actually slows down PHP and it slows

00:25:35,530 --> 00:25:41,920
down a lot so if something is measured

00:25:39,970 --> 00:25:43,930
with XC back to take 50 milliseconds

00:25:41,920 --> 00:25:46,540
it's probably very fast on your

00:25:43,930 --> 00:25:48,880
production machine and also if something

00:25:46,540 --> 00:25:50,260
on if X debugging enabled takes 50

00:25:48,880 --> 00:25:52,450
milliseconds and another thing takes

00:25:50,260 --> 00:25:54,190
hundred milliseconds it does not mean on

00:25:52,450 --> 00:25:56,800
the production machine without XD bug

00:25:54,190 --> 00:25:59,230
enabled that it is actually double

00:25:56,800 --> 00:26:01,840
double or takes double the amount of

00:25:59,230 --> 00:26:05,170
time so it's just a rough indicator for

00:26:01,840 --> 00:26:07,450
that also because it slows deep as long

00:26:05,170 --> 00:26:09,220
as its installed it really also slows

00:26:07,450 --> 00:26:11,470
down the application a lot it never

00:26:09,220 --> 00:26:13,090
never should enable it on a production

00:26:11,470 --> 00:26:17,140
machine but only on your local death

00:26:13,090 --> 00:26:20,080
machine if you want but on the other

00:26:17,140 --> 00:26:22,090
hand oftentimes on your death machine

00:26:20,080 --> 00:26:23,770
you have only a lot not a lot of data

00:26:22,090 --> 00:26:27,070
it's actually kind of hard to prefer

00:26:23,770 --> 00:26:29,020
something with production data and with

00:26:27,070 --> 00:26:32,110
production it also the speed compared

00:26:29,020 --> 00:26:33,640
the speed is probably or the behavior is

00:26:32,110 --> 00:26:35,770
probable applications probably way

00:26:33,640 --> 00:26:37,780
different than on death machines because

00:26:35,770 --> 00:26:40,510
of all these kind of things that only

00:26:37,780 --> 00:26:42,429
happen on production so one tool that

00:26:40,510 --> 00:26:44,320
you can use in production to profile

00:26:42,429 --> 00:26:45,309
stuff is called XH profits developed by

00:26:44,320 --> 00:26:49,450
Facebook

00:26:45,309 --> 00:26:51,490
they care about performance it's you can

00:26:49,450 --> 00:26:52,809
just install it if it's not activated it

00:26:51,490 --> 00:26:55,539
doesn't have any performance overhead

00:26:52,809 --> 00:26:57,340
which is very nice and then you can just

00:26:55,539 --> 00:26:59,529
activate it on production if you need it

00:26:57,340 --> 00:27:01,240
or even better just activate it

00:26:59,529 --> 00:27:05,049
automatically for a very very small

00:27:01,240 --> 00:27:08,350
subset of reckless maybe only 1.5 or 1%

00:27:05,049 --> 00:27:10,840
of a request you can just with a model

00:27:08,350 --> 00:27:12,490
or something calculation you can just

00:27:10,840 --> 00:27:14,470
activate it then and then automatically

00:27:12,490 --> 00:27:18,480
by the profiles and then from time to

00:27:14,470 --> 00:27:20,980
time you can look into it and see how

00:27:18,480 --> 00:27:24,340
the profiles went and how the requests

00:27:20,980 --> 00:27:29,230
end and how fast or slow something was

00:27:24,340 --> 00:27:31,690
done also a good thing is what is not

00:27:29,230 --> 00:27:34,299
only activating it on every like five

00:27:31,690 --> 00:27:36,460
thousands request but also enabling or

00:27:34,299 --> 00:27:38,740
buildings a few lines of code to enable

00:27:36,460 --> 00:27:39,999
it by cookie so if you need something

00:27:38,740 --> 00:27:41,710
really and you want to do it a

00:27:39,999 --> 00:27:43,299
production yourself you could just set a

00:27:41,710 --> 00:27:46,450
cookie and then also bright a profile

00:27:43,299 --> 00:27:49,330
somewhere there are several tools for X

00:27:46,450 --> 00:27:52,710
H probe to visualize that and the nicest

00:27:49,330 --> 00:27:55,600
one and newest one is called XH qui

00:27:52,710 --> 00:27:57,610
these are few screenshots there it's

00:27:55,600 --> 00:27:59,529
basically very similar to what we saw

00:27:57,610 --> 00:28:01,149
with cube or didn't really solve ask you

00:27:59,529 --> 00:28:04,749
cash grind the interface is very nice i

00:28:01,149 --> 00:28:07,240
it's a web application which is pretty

00:28:04,749 --> 00:28:09,519
good because XH probe just draws all the

00:28:07,240 --> 00:28:11,440
profits in some database in production

00:28:09,519 --> 00:28:14,169
and then you can have somewhere secure

00:28:11,440 --> 00:28:16,840
XH GUI installed and look at the store

00:28:14,169 --> 00:28:18,909
profiles in your database this is

00:28:16,840 --> 00:28:23,080
profile also offer symphony application

00:28:18,909 --> 00:28:24,580
and let's see if I can show it also life

00:28:23,080 --> 00:28:33,730
because this is much nicer than

00:28:24,580 --> 00:28:39,669
screenshots okay look smaller browser

00:28:33,730 --> 00:28:42,429
and okay so these are all the runs of X

00:28:39,669 --> 00:28:44,470
debug Pro X H proof profiles I had here

00:28:42,429 --> 00:28:46,720
on this machine I can click on one of

00:28:44,470 --> 00:28:49,769
these requests so I have an overview of

00:28:46,720 --> 00:28:52,360
all the requests I know how many

00:28:49,769 --> 00:28:55,960
microseconds they took how many memories

00:28:52,360 --> 00:28:58,140
are used over here and bites which is

00:28:55,960 --> 00:28:59,490
also a good indicator if the memory

00:28:58,140 --> 00:29:01,020
usage is very high of one week is

00:28:59,490 --> 00:29:02,430
probably something is leaking there and

00:29:01,020 --> 00:29:04,110
something is going wrong and this also

00:29:02,430 --> 00:29:09,120
has a bad performance improvement you

00:29:04,110 --> 00:29:11,340
can click on it here you can also search

00:29:09,120 --> 00:29:15,480
for you where else but you can hear it's

00:29:11,340 --> 00:29:17,610
a profile of the page of one profile you

00:29:15,480 --> 00:29:19,290
have nice graphs that tell you for

00:29:17,610 --> 00:29:21,480
example what calls and what functions

00:29:19,290 --> 00:29:24,900
were the most slow ones or the most

00:29:21,480 --> 00:29:29,040
expensive ones in memory you have then

00:29:24,900 --> 00:29:31,440
also if you scroll down that's the same

00:29:29,040 --> 00:29:33,690
as in with an ex debug profile list of

00:29:31,440 --> 00:29:36,480
all functions that were called and you

00:29:33,690 --> 00:29:40,250
can sort them here by basically

00:29:36,480 --> 00:29:43,830
everything cpu usage memory coast and

00:29:40,250 --> 00:29:45,480
wall timing of everything so this is

00:29:43,830 --> 00:29:47,520
really convenient to really in a

00:29:45,480 --> 00:29:49,350
fine-grained they try to find out what

00:29:47,520 --> 00:29:51,240
happened of course you can also click on

00:29:49,350 --> 00:29:53,610
every functions for example this asset

00:29:51,240 --> 00:29:57,750
extension get named thing here then you

00:29:53,610 --> 00:30:01,920
see what where these functions on how

00:29:57,750 --> 00:30:04,170
often it was called for example and what

00:30:01,920 --> 00:30:05,820
functions this function called and you

00:30:04,170 --> 00:30:10,460
can really go down through your source

00:30:05,820 --> 00:30:10,460
code this is really really convenient

00:30:16,610 --> 00:30:21,240
another new to another tool that can

00:30:19,200 --> 00:30:23,070
help you with pinpointing performance

00:30:21,240 --> 00:30:24,900
problems is called PHP mmm info it's

00:30:23,070 --> 00:30:26,910
actually very new it came out like two

00:30:24,900 --> 00:30:29,460
weeks ago I saw somebody put it on

00:30:26,910 --> 00:30:31,640
github and what PHP mem info does is

00:30:29,460 --> 00:30:35,420
very simple you can at one point in time

00:30:31,640 --> 00:30:37,800
call the function and it locks the

00:30:35,420 --> 00:30:41,310
amount that all the objects you have

00:30:37,800 --> 00:30:42,810
currently in PHP instantiate it and the

00:30:41,310 --> 00:30:47,300
reference count on these objects into a

00:30:42,810 --> 00:31:00,480
file and this can be really interesting

00:30:47,300 --> 00:31:03,630
so a file may look like this okay so

00:31:00,480 --> 00:31:06,150
this is a prepared file of also my small

00:31:03,630 --> 00:31:08,610
symphony application I have a big list

00:31:06,150 --> 00:31:11,070
here of all objects that are

00:31:08,610 --> 00:31:14,190
instantiated at the point where i call

00:31:11,070 --> 00:31:16,470
this logging function the amount of

00:31:14,190 --> 00:31:18,960
references i have to it so for example

00:31:16,470 --> 00:31:21,720
most of them here have one reference and

00:31:18,960 --> 00:31:24,600
if i go through it i may see for example

00:31:21,720 --> 00:31:26,850
that I instantiating more objects of

00:31:24,600 --> 00:31:28,590
something than a neutral then I would

00:31:26,850 --> 00:31:30,930
need to for example i have here very

00:31:28,590 --> 00:31:32,820
many stopwatch objects if they are

00:31:30,930 --> 00:31:34,440
probably good for debugging by if i have

00:31:32,820 --> 00:31:36,450
them in production they are probably

00:31:34,440 --> 00:31:38,100
kind of slowing stuff down so that can

00:31:36,450 --> 00:31:39,690
also give you an indicator about what

00:31:38,100 --> 00:31:41,670
really happened before and your request

00:31:39,690 --> 00:31:44,070
especially if your application gets more

00:31:41,670 --> 00:31:46,250
complicated and you have lots of classes

00:31:44,070 --> 00:31:54,300
and objects sometimes it's very easy to

00:31:46,250 --> 00:31:56,550
not have a track about that anymore and

00:31:54,300 --> 00:31:58,530
also these extensions where nuits on a

00:31:56,550 --> 00:32:00,480
heavy development so you can expect

00:31:58,530 --> 00:32:05,610
probably a few more cool features coming

00:32:00,480 --> 00:32:09,000
into this extension as well then next

00:32:05,610 --> 00:32:11,730
something very useful is stuff like the

00:32:09,000 --> 00:32:13,200
symphony or send framework or whatever

00:32:11,730 --> 00:32:15,090
forever views d back towards most

00:32:13,200 --> 00:32:18,450
frameworks come as these kind of debug

00:32:15,090 --> 00:32:22,050
to us with using 72 who is using zend

00:32:18,450 --> 00:32:24,030
framework to okay you have probably

00:32:22,050 --> 00:32:26,340
already seen stuff like that and i'm

00:32:24,030 --> 00:32:28,010
very sorry but it's hard to see because

00:32:26,340 --> 00:32:29,660
the two paths always on the bottom

00:32:28,010 --> 00:32:34,000
it was kind of hard Wiz in screen size

00:32:29,660 --> 00:32:36,350
but let's try to bring it up a bit more

00:32:34,000 --> 00:32:37,670
we simply usually have like this small

00:32:36,350 --> 00:32:39,680
of a toolbar that gives you information

00:32:37,670 --> 00:32:41,240
about how long this request in the

00:32:39,680 --> 00:32:42,890
backend took like six hundred 80

00:32:41,240 --> 00:32:46,040
milliseconds for some reason okay it's a

00:32:42,890 --> 00:32:48,470
vagrant boxy how memory memory it took a

00:32:46,040 --> 00:32:51,320
bit information about the routing which

00:32:48,470 --> 00:32:53,780
controller it was on here session

00:32:51,320 --> 00:32:55,610
information the amount of a database

00:32:53,780 --> 00:32:57,590
queries I did how long every database

00:32:55,610 --> 00:33:00,680
create took and I can also click on it

00:32:57,590 --> 00:33:02,750
and see more detailed information on a

00:33:00,680 --> 00:33:04,550
big screen and this also gets saved into

00:33:02,750 --> 00:33:06,500
a database or enter file depends a bit

00:33:04,550 --> 00:33:08,870
how to configure it and it's very useful

00:33:06,500 --> 00:33:11,180
information to directly you can also run

00:33:08,870 --> 00:33:13,010
this run this and on production for a

00:33:11,180 --> 00:33:15,050
small amount of requests of course these

00:33:13,010 --> 00:33:18,230
users should not see the toolbar and you

00:33:15,050 --> 00:33:19,700
can just enable it for all developments

00:33:18,230 --> 00:33:23,780
that they see these two line production

00:33:19,700 --> 00:33:25,400
so that every time you see red mark

00:33:23,780 --> 00:33:27,710
somewhere because some database queries

00:33:25,400 --> 00:33:29,750
for slow or see this page actually took

00:33:27,710 --> 00:33:31,730
five seconds in the back end if you make

00:33:29,750 --> 00:33:36,170
it really really visible what happens

00:33:31,730 --> 00:33:37,970
there if you don't use zend framework to

00:33:36,170 --> 00:33:40,670
a symphony to or another framework who

00:33:37,970 --> 00:33:42,980
has some kind of these toolbars you can

00:33:40,670 --> 00:33:44,990
still you just take the symphony to

00:33:42,980 --> 00:33:46,850
toolbar and use them in your own product

00:33:44,990 --> 00:33:49,460
on your own project so it's not very

00:33:46,850 --> 00:33:51,500
tied to symphony you can just take the

00:33:49,460 --> 00:33:53,810
code put it somewhere into your

00:33:51,500 --> 00:33:55,250
framework and use it the same way that's

00:33:53,810 --> 00:33:57,650
actually what we did a research gate

00:33:55,250 --> 00:33:59,540
because we're not using symfony2 and we

00:33:57,650 --> 00:34:02,840
but we just took the code adapted it at

00:33:59,540 --> 00:34:04,520
two points and then basically it looks

00:34:02,840 --> 00:34:06,800
the same works the same and we save lots

00:34:04,520 --> 00:34:10,280
of time by not implementing all this

00:34:06,800 --> 00:34:12,740
ourselves and it's really useful because

00:34:10,280 --> 00:34:14,480
what you also can do with at least a

00:34:12,740 --> 00:34:18,169
symphony to bind also than toolbar is

00:34:14,480 --> 00:34:20,090
you can extend it which many people

00:34:18,169 --> 00:34:21,950
don't actually know but it's very easy

00:34:20,090 --> 00:34:26,480
to extend this your own stuff you need

00:34:21,950 --> 00:34:29,000
for example if you have ok I show you a

00:34:26,480 --> 00:34:31,129
bit of examples later again these are

00:34:29,000 --> 00:34:33,919
few screenshots I'll show it to you life

00:34:31,129 --> 00:34:35,750
because more visible in the back there

00:34:33,919 --> 00:34:38,629
are lots of extensions already on github

00:34:35,750 --> 00:34:40,940
which is very nice for example for

00:34:38,629 --> 00:34:41,780
measuring HTTP calls to external IP is

00:34:40,940 --> 00:34:43,669
that you are sending

00:34:41,780 --> 00:34:46,040
out to have measurements there and have

00:34:43,669 --> 00:34:48,620
all the requests and responses there but

00:34:46,040 --> 00:34:52,400
you can also extend it with your own

00:34:48,620 --> 00:34:55,580
stuff this is for example a view of the

00:34:52,400 --> 00:34:58,640
to buy at our platform so I did this

00:34:55,580 --> 00:35:02,120
like half an hour ago or so you see it's

00:34:58,640 --> 00:35:03,860
there are much more buttons in here for

00:35:02,120 --> 00:35:05,210
example here is the list of all the

00:35:03,860 --> 00:35:07,250
components we have on the side because

00:35:05,210 --> 00:35:08,900
we have 500 different front-end

00:35:07,250 --> 00:35:12,140
components on the side so we have a big

00:35:08,900 --> 00:35:13,490
list on it there we can click on it see

00:35:12,140 --> 00:35:15,530
the data that's actually in their

00:35:13,490 --> 00:35:18,590
component in a JSON object which is very

00:35:15,530 --> 00:35:22,130
convenient for debugging stuff we see

00:35:18,590 --> 00:35:25,850
which release is currently online here

00:35:22,130 --> 00:35:29,300
it's the reefs 4009 with which revision

00:35:25,850 --> 00:35:31,100
and we have a few more information from

00:35:29,300 --> 00:35:33,650
the headers and of course we can also

00:35:31,100 --> 00:35:35,930
click on stuff for example have such a

00:35:33,650 --> 00:35:37,940
timeline view where we just set timers

00:35:35,930 --> 00:35:39,860
and time pointers and different parts of

00:35:37,940 --> 00:35:42,500
the backend same way the symphony's

00:35:39,860 --> 00:35:44,930
doing to see for example how long each

00:35:42,500 --> 00:35:49,160
component took to fetch the data and

00:35:44,930 --> 00:35:52,070
then render here this is not really new

00:35:49,160 --> 00:35:55,370
here's an example of SQL queries how

00:35:52,070 --> 00:35:57,500
long they took so for some reason there

00:35:55,370 --> 00:36:01,670
are very many but very fast SQL queries

00:35:57,500 --> 00:36:04,570
in here what we added for example is a

00:36:01,670 --> 00:36:07,130
list of cash request we did to see

00:36:04,570 --> 00:36:09,230
actually if we have cash hits or cache

00:36:07,130 --> 00:36:11,120
misses here we had a cache miss which is

00:36:09,230 --> 00:36:12,680
probably not that good or we had

00:36:11,120 --> 00:36:14,930
actually a few questions to see for some

00:36:12,680 --> 00:36:18,880
reason with all the cash keys that were

00:36:14,930 --> 00:36:21,500
fetched we have for example information

00:36:18,880 --> 00:36:23,510
this is more interesting information

00:36:21,500 --> 00:36:25,760
about all the fondant components again

00:36:23,510 --> 00:36:27,770
in a nice fancy graph that we're a

00:36:25,760 --> 00:36:29,150
novice d3 and also what data they

00:36:27,770 --> 00:36:31,390
fetched and how long it took so you

00:36:29,150 --> 00:36:31,390
clean

00:36:35,410 --> 00:36:42,560
theoretically you can hover over it here

00:36:39,010 --> 00:36:44,060
okay it's hard to see in the small

00:36:42,560 --> 00:36:46,040
window but you can hover over here and

00:36:44,060 --> 00:36:48,290
for example this too is the time it took

00:36:46,040 --> 00:36:51,410
to fetch the data for this activity

00:36:48,290 --> 00:36:53,030
stream you and this makes it really

00:36:51,410 --> 00:36:54,410
really visible what happens in the

00:36:53,030 --> 00:36:56,990
application it also helps you to

00:36:54,410 --> 00:36:58,460
pinpoint performance problems and we are

00:36:56,990 --> 00:37:00,980
in the code in which component they

00:36:58,460 --> 00:37:03,020
actually are this is another example

00:37:00,980 --> 00:37:06,020
where we are just logging every metric

00:37:03,020 --> 00:37:08,090
that we are sending to graphite from our

00:37:06,020 --> 00:37:10,610
PHP application for example we are

00:37:08,090 --> 00:37:12,410
sending all cache miss its and mrs.

00:37:10,610 --> 00:37:18,530
there and if you scored on it we

00:37:12,410 --> 00:37:20,720
actually do this quite a lot yeah so

00:37:18,530 --> 00:37:22,430
there's no counter on it but it's not

00:37:20,720 --> 00:37:23,840
infinitely also be measuring the time

00:37:22,430 --> 00:37:26,300
here how long it took and it's in the

00:37:23,840 --> 00:37:29,360
nick of microseconds also what we are

00:37:26,300 --> 00:37:31,250
doing is even all this in microseconds

00:37:29,360 --> 00:37:32,540
would take a bit or a lot of time but we

00:37:31,250 --> 00:37:37,040
move it move it to the end of the

00:37:32,540 --> 00:37:38,390
request so the PHP script run it started

00:37:37,040 --> 00:37:40,670
then the request arrives and the peach

00:37:38,390 --> 00:37:43,250
strip runs and at one point in your PHP

00:37:40,670 --> 00:37:45,320
script you can say okay we finish the

00:37:43,250 --> 00:37:47,510
request now with engine X and then you

00:37:45,320 --> 00:37:48,890
move all that stuff that is not really

00:37:47,510 --> 00:37:50,630
needed for the user to see for the

00:37:48,890 --> 00:37:52,430
regeneration of the page like all this

00:37:50,630 --> 00:37:54,650
training stuff to the end of the request

00:37:52,430 --> 00:37:56,180
so we just calculate all the time I'll

00:37:54,650 --> 00:37:57,740
save them somewhere and at the end of

00:37:56,180 --> 00:37:59,540
the recurse we iterate over all that and

00:37:57,740 --> 00:38:01,340
send us just let see so the users even

00:37:59,540 --> 00:38:05,450
if thats part would be a bit of slow

00:38:01,340 --> 00:38:07,910
down the users never influenced by it so

00:38:05,450 --> 00:38:11,510
i would really recommend for you to look

00:38:07,910 --> 00:38:13,670
into these toolbars and think about what

00:38:11,510 --> 00:38:15,560
you can do in your application we also

00:38:13,670 --> 00:38:17,690
add stuff like experiments that are

00:38:15,560 --> 00:38:19,580
running we do a lot of a/b testing so we

00:38:17,690 --> 00:38:20,840
add to the tool of which experiments are

00:38:19,580 --> 00:38:23,710
running currently which variants were

00:38:20,840 --> 00:38:27,590
chosen you can go really crazy now and

00:38:23,710 --> 00:38:29,570
it's really versatile it's you find if

00:38:27,590 --> 00:38:31,220
you start doing this you will find a lot

00:38:29,570 --> 00:38:32,420
of bugs very very quickly or a lot of

00:38:31,220 --> 00:38:33,920
performance by our one's very very

00:38:32,420 --> 00:38:38,660
quickly that you never knew you had

00:38:33,920 --> 00:38:42,790
before so you know all that all

00:38:38,660 --> 00:38:44,829
questions to the toolbar thing yes

00:38:42,790 --> 00:38:52,119
there's

00:38:44,829 --> 00:38:54,400
am i coming sorry my question is not

00:38:52,119 --> 00:38:58,059
about the toolbar but it's regarding the

00:38:54,400 --> 00:39:00,219
tools you do this before do you see any

00:38:58,059 --> 00:39:02,529
advantage by using those tools the

00:39:00,219 --> 00:39:04,959
monitoring tools it compared to like it

00:39:02,529 --> 00:39:09,940
like New Relic for example what was the

00:39:04,959 --> 00:39:12,400
name New Relic ok the benefit is not

00:39:09,940 --> 00:39:15,670
none it's the only benefit is internal

00:39:12,400 --> 00:39:18,130
so nearly can become quite expensive but

00:39:15,670 --> 00:39:20,200
it's a really cool cool product if your

00:39:18,130 --> 00:39:21,430
company says or so your city OSS you are

00:39:20,200 --> 00:39:23,109
great we are using it we are paying for

00:39:21,430 --> 00:39:25,209
it because it gives us a lot of benefit

00:39:23,109 --> 00:39:27,989
and it's fine that another company has

00:39:25,209 --> 00:39:30,519
its data from a form from us great do it

00:39:27,989 --> 00:39:32,079
at some point you are growing big enough

00:39:30,519 --> 00:39:34,180
that it's becoming so expensive that

00:39:32,079 --> 00:39:35,890
putting the amount of effort into it to

00:39:34,180 --> 00:39:38,410
do it with open source or do it yourself

00:39:35,890 --> 00:39:39,910
it's worse it also you can do a bit more

00:39:38,410 --> 00:39:42,069
stuff there because you have the raw

00:39:39,910 --> 00:39:43,839
data available so you can just do your

00:39:42,069 --> 00:39:45,640
own calculations there this is also

00:39:43,839 --> 00:39:47,709
slide benefit but neurotic it's really

00:39:45,640 --> 00:39:51,459
great tool it's fine if you are allowed

00:39:47,709 --> 00:39:53,049
to use it to do it yeah so both is fine

00:39:51,459 --> 00:39:56,549
the important thing is you have to let

00:39:53,049 --> 00:39:56,549
you do it and you have the data somehow

00:39:57,869 --> 00:40:05,019
yes here's another question the same way

00:40:02,769 --> 00:40:06,670
you delay the time is mention to start

00:40:05,019 --> 00:40:08,140
stay until after the request has been

00:40:06,670 --> 00:40:14,380
returned to use you can you do that with

00:40:08,140 --> 00:40:15,969
apache and more PHP you have to put the

00:40:14,380 --> 00:40:18,969
stir then the stuff into shutdown

00:40:15,969 --> 00:40:20,859
handlers write code because you don't

00:40:18,969 --> 00:40:22,420
have a function call where you can say

00:40:20,859 --> 00:40:24,039
ok request is not finished send it to

00:40:22,420 --> 00:40:25,930
the user it's not completed don't wait

00:40:24,039 --> 00:40:27,789
shut the connection everything you can

00:40:25,930 --> 00:40:30,160
only do this with fast CGI I think it's

00:40:27,789 --> 00:40:34,660
fast CGI on let's go finish requests or

00:40:30,160 --> 00:40:36,459
something ok with Apache you have to do

00:40:34,660 --> 00:40:41,499
it in a shutdown handler thank you but

00:40:36,459 --> 00:40:43,719
that's also fine now that you have all

00:40:41,499 --> 00:40:45,789
these measurements but you can then do

00:40:43,719 --> 00:40:47,680
now and you also pinpointed where in

00:40:45,789 --> 00:40:50,289
your code something as slow the only

00:40:47,680 --> 00:40:51,969
thing missing is fixing it that's

00:40:50,289 --> 00:40:54,459
something you have to do I can't really

00:40:51,969 --> 00:40:56,859
help you with it sorry it's very part of

00:40:54,459 --> 00:40:57,500
your application there's so much stuff

00:40:56,859 --> 00:40:59,690
that can

00:40:57,500 --> 00:41:02,030
wrong one important thing is about

00:40:59,690 --> 00:41:05,120
fixing all that stuff is keep update up

00:41:02,030 --> 00:41:06,710
to date on the latest before stuff

00:41:05,120 --> 00:41:09,200
happening in the world of their parish

00:41:06,710 --> 00:41:11,060
performance there are great of many

00:41:09,200 --> 00:41:13,070
resources outside of course you can

00:41:11,060 --> 00:41:15,440
first go to conferences talk to people

00:41:13,070 --> 00:41:17,570
about what they are doing and then there

00:41:15,440 --> 00:41:20,000
are a lot of blocks and publications out

00:41:17,570 --> 00:41:22,790
there telling you about page performance

00:41:20,000 --> 00:41:24,470
and performance tricks and what they are

00:41:22,790 --> 00:41:27,710
doing what problems big companies that

00:41:24,470 --> 00:41:31,550
how they solved it and just one resource

00:41:27,710 --> 00:41:34,280
is perf planner com they have articles

00:41:31,550 --> 00:41:38,060
from engineers from all the big

00:41:34,280 --> 00:41:40,760
companies like from google from Twitter

00:41:38,060 --> 00:41:45,350
and all they are really caring about web

00:41:40,760 --> 00:41:47,300
performance so it's also a good thing so

00:41:45,350 --> 00:41:50,030
it's also good thing to just read up on

00:41:47,300 --> 00:41:52,550
it for example who does domain charting

00:41:50,030 --> 00:41:55,580
on the application so the main charting

00:41:52,550 --> 00:41:58,070
is when you load images and you don't

00:41:55,580 --> 00:41:59,660
not only load images from one source you

00:41:58,070 --> 00:42:02,600
have your CDN but you have basically

00:41:59,660 --> 00:42:04,700
image 1 dot you like your domain dot com

00:42:02,600 --> 00:42:07,040
image to remain calm and so on image 3

00:42:04,700 --> 00:42:08,540
your domain com to just have more

00:42:07,040 --> 00:42:12,680
connections available in the browser

00:42:08,540 --> 00:42:14,960
who's heard of that most actually it

00:42:12,680 --> 00:42:16,940
came out yet seeded a few of experiments

00:42:14,960 --> 00:42:18,500
in there doing too much domain shouting

00:42:16,940 --> 00:42:20,960
is actually also bad because you have

00:42:18,500 --> 00:42:23,690
some TCP issues then because you are

00:42:20,960 --> 00:42:26,150
basically hogging the TCP connections

00:42:23,690 --> 00:42:27,950
and this is very bad in poor form and so

00:42:26,150 --> 00:42:29,870
they measure this one second they

00:42:27,950 --> 00:42:31,730
measured it and what they came up with

00:42:29,870 --> 00:42:33,890
this domain shouting in the exit the

00:42:31,730 --> 00:42:36,140
good amount of numbers for the main

00:42:33,890 --> 00:42:38,750
Channing is just heading tube and before

00:42:36,140 --> 00:42:40,910
that everybody saw ok the mall better or

00:42:38,750 --> 00:42:43,630
I have four or something there's a

00:42:40,910 --> 00:42:48,130
question it's a question about that but

00:42:43,630 --> 00:42:50,390
this is a like that is a blog post last

00:42:48,130 --> 00:42:51,860
December I think and it was really

00:42:50,390 --> 00:42:53,510
interesting to read up on it and they

00:42:51,860 --> 00:42:55,900
were really surprised by the results as

00:42:53,510 --> 00:42:59,970
well so just an example it's good to

00:42:55,900 --> 00:43:03,090
read up on this blocks yes just on

00:42:59,970 --> 00:43:07,020
changeling yeah we use speedy to

00:43:03,090 --> 00:43:09,420
multiplex HTTPS requests hmm that's just

00:43:07,020 --> 00:43:11,369
kind of like an alternative yes if the

00:43:09,420 --> 00:43:13,800
brothers bought speedy this is great but

00:43:11,369 --> 00:43:16,140
not every browser does at the moment

00:43:13,800 --> 00:43:17,790
look later or an internal app yeah yeah

00:43:16,140 --> 00:43:19,710
then then is of course awesome if its

00:43:17,790 --> 00:43:22,160
internal yeah that's the question to the

00:43:19,710 --> 00:43:22,160
front of you

00:43:28,980 --> 00:43:37,230
I one comment just came up at one week

00:43:33,420 --> 00:43:41,430
up I was in London and turn out that the

00:43:37,230 --> 00:43:44,609
browser's they are supporting opening

00:43:41,430 --> 00:43:47,970
you know many connections so the domain

00:43:44,609 --> 00:43:51,450
charting is right now not so beneficial

00:43:47,970 --> 00:43:53,640
as yes I it is yeah people realize that

00:43:51,450 --> 00:43:56,580
and they actually change your code to

00:43:53,640 --> 00:43:58,470
use less of those really yes this is

00:43:56,580 --> 00:44:01,200
also something that changes over time so

00:43:58,470 --> 00:44:02,640
it's good to measure it and for example

00:44:01,200 --> 00:44:04,080
if browsers update and more and more

00:44:02,640 --> 00:44:06,060
users have modern browsers that have

00:44:04,080 --> 00:44:07,950
open more connections and with this mat

00:44:06,060 --> 00:44:09,540
away or support speedy who have these

00:44:07,950 --> 00:44:11,730
measurements all the time and see maybe

00:44:09,540 --> 00:44:13,140
oh we get slower for some reason and

00:44:11,730 --> 00:44:14,880
then you can dive down into it and see

00:44:13,140 --> 00:44:16,560
why because we haven't changed that much

00:44:14,880 --> 00:44:20,820
so having all this data then also

00:44:16,560 --> 00:44:22,590
benefit for these kinds of things but

00:44:20,820 --> 00:44:27,240
the most important thing to remember is

00:44:22,590 --> 00:44:29,310
really speed matters and we are actually

00:44:27,240 --> 00:44:31,590
very I'm finished with what I wanted to

00:44:29,310 --> 00:44:33,030
cover we are very good on time if there

00:44:31,590 --> 00:44:35,369
are more questions I'm happy to take

00:44:33,030 --> 00:44:38,430
them and if not I have some backup

00:44:35,369 --> 00:44:40,859
slides also about performance scenes and

00:44:38,430 --> 00:44:44,850
what you can do to improve performance

00:44:40,859 --> 00:44:47,910
but questions first yeah hi thanks for a

00:44:44,850 --> 00:44:50,430
great talk and and I've got a question

00:44:47,910 --> 00:44:52,400
about the navigation timing API have

00:44:50,430 --> 00:44:56,100
noted only six I've just heard about it

00:44:52,400 --> 00:44:58,800
I'd like to measure the time it takes

00:44:56,100 --> 00:45:01,770
the complete round-trip it takes for a

00:44:58,800 --> 00:45:03,869
new visitor to my site to see say the

00:45:01,770 --> 00:45:06,840
homepage because when they first see my

00:45:03,869 --> 00:45:09,420
site nothing's cached and like I think

00:45:06,840 --> 00:45:11,640
if we could have a metric in graphite

00:45:09,420 --> 00:45:14,340
that records that that would be great

00:45:11,640 --> 00:45:16,950
but does the navigation timing API give

00:45:14,340 --> 00:45:18,900
you anything any insight into the start

00:45:16,950 --> 00:45:22,080
of that request which is before someone

00:45:18,900 --> 00:45:23,910
even hit your site you only get the

00:45:22,080 --> 00:45:25,260
measurements of this specific request

00:45:23,910 --> 00:45:29,820
not in context of others but what you

00:45:25,260 --> 00:45:32,880
can for example do is you can if in the

00:45:29,820 --> 00:45:35,369
back end you can see if the session is

00:45:32,880 --> 00:45:36,840
new newly created and the chance that if

00:45:35,369 --> 00:45:39,270
the session is newly created is very

00:45:36,840 --> 00:45:40,890
high that not much as in the cash for

00:45:39,270 --> 00:45:41,880
this user because also caches are not

00:45:40,890 --> 00:45:44,640
often it

00:45:41,880 --> 00:45:46,260
most of the time and also if it's a lock

00:45:44,640 --> 00:45:48,840
and user you could see it is returning

00:45:46,260 --> 00:45:51,660
user or first-time user or something so

00:45:48,840 --> 00:45:54,690
what you can do is just rent out in some

00:45:51,660 --> 00:45:57,840
JavaScript property of very able that

00:45:54,690 --> 00:45:59,370
says okay it's a new session or it's an

00:45:57,840 --> 00:46:01,980
already existing session request in a

00:45:59,370 --> 00:46:06,990
session and maybe you said also as a key

00:46:01,980 --> 00:46:09,540
for metrics ok but just does the do I

00:46:06,990 --> 00:46:11,520
have any insight into exactly when you

00:46:09,540 --> 00:46:13,920
say say someone's on Google for example

00:46:11,520 --> 00:46:15,480
and they click the link on google is

00:46:13,920 --> 00:46:16,920
there any way of retrospective lee

00:46:15,480 --> 00:46:20,670
finding out when they clicked that link

00:46:16,920 --> 00:46:22,230
yes it's from link clicked to all

00:46:20,670 --> 00:46:24,270
through all the redirects you are doing

00:46:22,230 --> 00:46:26,340
until the page is fully loaded so it's

00:46:24,270 --> 00:46:30,270
not when the reckless ascent it's even

00:46:26,340 --> 00:46:31,560
before link click then TCP handshake TCP

00:46:30,270 --> 00:46:33,870
connection created and all that stuff

00:46:31,560 --> 00:46:35,940
you say and then that's really good and

00:46:33,870 --> 00:46:38,310
that's what I was hoping you'd say yeah

00:46:35,940 --> 00:46:41,610
thanks there was another question over

00:46:38,310 --> 00:46:44,340
there I think are there any would you

00:46:41,610 --> 00:46:46,830
say magic numbers for what is fast

00:46:44,340 --> 00:46:48,600
enough and what is not fast enough or is

00:46:46,830 --> 00:46:50,640
it really dependent on the application

00:46:48,600 --> 00:46:54,360
and the speed of the users connection

00:46:50,640 --> 00:46:57,600
assertion it depends we ask for

00:46:54,360 --> 00:47:00,240
consumer-facing stuff I would say back

00:46:57,600 --> 00:47:02,790
end all in all you should aim for under

00:47:00,240 --> 00:47:07,440
one second this is like it depends also

00:47:02,790 --> 00:47:08,970
a bit on what how complicated is the

00:47:07,440 --> 00:47:10,650
page it's one looks for the user there's

00:47:08,970 --> 00:47:12,360
also a negative effect which is really

00:47:10,650 --> 00:47:15,030
interesting that research has found out

00:47:12,360 --> 00:47:16,620
if the page is too fast also user are

00:47:15,030 --> 00:47:19,500
not trusting it anymore like if you have

00:47:16,620 --> 00:47:21,660
a complicated page and it took only 150

00:47:19,500 --> 00:47:23,820
milliseconds and you said oh there is

00:47:21,660 --> 00:47:28,260
something wrong something is broken I'm

00:47:23,820 --> 00:47:30,870
not trusting that so you have to beware

00:47:28,260 --> 00:47:32,910
of that effect as well so but I think

00:47:30,870 --> 00:47:35,340
like a rule of thumb something for

00:47:32,910 --> 00:47:37,410
consumer facing stop being under one

00:47:35,340 --> 00:47:41,340
second it's really really awesome all in

00:47:37,410 --> 00:47:42,900
all just or just not under one second

00:47:41,340 --> 00:47:45,000
until the user can interact with the

00:47:42,900 --> 00:47:47,160
page like when the downloaded given this

00:47:45,000 --> 00:47:49,880
done you can do lots of stuff then load

00:47:47,160 --> 00:47:52,560
stuff as in Cronus Lee afterwards or

00:47:49,880 --> 00:47:54,850
load stuff that is under the fold of the

00:47:52,560 --> 00:47:56,680
browser afterwards as well but

00:47:54,850 --> 00:47:58,450
it should take under one second for the

00:47:56,680 --> 00:48:01,360
user to actually be able to interact

00:47:58,450 --> 00:48:07,420
with the page or to get any kind of

00:48:01,360 --> 00:48:10,510
feedback yeah so another question yes is

00:48:07,420 --> 00:48:14,260
a standard login format for the times

00:48:10,510 --> 00:48:17,740
that should be used watch it a sternal

00:48:14,260 --> 00:48:19,300
offer I would just use when measuring

00:48:17,740 --> 00:48:22,690
page speed I would just take

00:48:19,300 --> 00:48:23,950
milliseconds retro- surmised hm so you

00:48:22,690 --> 00:48:27,280
can feed the day two in two different

00:48:23,950 --> 00:48:28,900
tools easily yeah so you should not

00:48:27,280 --> 00:48:31,990
matter time stamps because then you have

00:48:28,900 --> 00:48:35,170
issues with how clock settings are and

00:48:31,990 --> 00:48:36,280
different machines and time zones and

00:48:35,170 --> 00:48:38,500
everything that goes in there just

00:48:36,280 --> 00:48:40,660
measure on the same machine in the same

00:48:38,500 --> 00:48:43,450
environment how many milliseconds it

00:48:40,660 --> 00:48:49,600
took between two points and then sends

00:48:43,450 --> 00:48:51,820
this and measure this yeah if they are

00:48:49,600 --> 00:48:56,830
if you want to I can continue with my

00:48:51,820 --> 00:49:04,340
backup slides one second and there's

00:48:56,830 --> 00:49:07,740
awesome stuff in there I promise so

00:49:04,340 --> 00:49:11,070
something's on better performance these

00:49:07,740 --> 00:49:13,020
are in three parts in two for the first

00:49:11,070 --> 00:49:15,090
one and a half path I can go through

00:49:13,020 --> 00:49:17,790
them very quickly because they are kind

00:49:15,090 --> 00:49:19,340
of obvious because you have the obvious

00:49:17,790 --> 00:49:24,060
things you should do in your application

00:49:19,340 --> 00:49:26,640
enabling gzip using cdns looking at your

00:49:24,060 --> 00:49:28,830
DB queries and doing the indexes in this

00:49:26,640 --> 00:49:30,750
is right so that your DB queries are as

00:49:28,830 --> 00:49:33,060
fast as possible you should minify your

00:49:30,750 --> 00:49:35,400
JavaScript you should minify your CSS

00:49:33,060 --> 00:49:38,130
you should concatenate your JavaScript

00:49:35,400 --> 00:49:40,140
and CSS so that you have not like 500

00:49:38,130 --> 00:49:42,120
requests on every page which is

00:49:40,140 --> 00:49:44,160
especially bad for mobile you should

00:49:42,120 --> 00:49:46,380
look into your caching headers if they

00:49:44,160 --> 00:49:48,330
are set correctly especially for images

00:49:46,380 --> 00:49:50,340
and JavaScript and CSS and other static

00:49:48,330 --> 00:49:52,740
files I'll Justin clicks include these

00:49:50,340 --> 00:49:54,150
points also then into the slides I

00:49:52,740 --> 00:49:57,270
published on the speaker deck later on

00:49:54,150 --> 00:50:00,210
you should enable up cashing on PHP as

00:49:57,270 --> 00:50:03,240
like ABC or cash or something you should

00:50:00,210 --> 00:50:05,250
look into cashing your secret queries

00:50:03,240 --> 00:50:07,650
HTTP calls you're making to API

00:50:05,250 --> 00:50:11,340
somewhere in memcache or something if

00:50:07,650 --> 00:50:13,260
its data you should look into ABC you or

00:50:11,340 --> 00:50:15,060
userland a pc caching to cache

00:50:13,260 --> 00:50:16,590
configuration files for example

00:50:15,060 --> 00:50:18,870
templates or whatever you want to read

00:50:16,590 --> 00:50:20,790
from the file system you should look

00:50:18,870 --> 00:50:23,550
into memcached there was a great talk

00:50:20,790 --> 00:50:25,740
about memcache from eli yesterday look

00:50:23,550 --> 00:50:29,540
at the recording of him you should

00:50:25,740 --> 00:50:34,080
upgrade PHP who is running PHP 55

00:50:29,540 --> 00:50:37,710
awesome who is running PHP 5 to upgrade

00:50:34,080 --> 00:50:39,600
who's running p35 3 upgrade it's worth

00:50:37,710 --> 00:50:41,460
it it's really worse that you don't only

00:50:39,600 --> 00:50:43,980
get the new cool you already also get

00:50:41,460 --> 00:50:45,810
the cool features that the new PHP

00:50:43,980 --> 00:50:48,570
versions have but the performance

00:50:45,810 --> 00:50:50,580
improvement is astoundingly great and

00:50:48,570 --> 00:50:52,440
there is a link comparing that you see

00:50:50,580 --> 00:50:55,680
when companies upgrade you see graph

00:50:52,440 --> 00:50:57,570
that go like this in memory usage and

00:50:55,680 --> 00:51:00,360
response time so it's really really

00:50:57,570 --> 00:51:02,880
really really worth it so these are the

00:51:00,360 --> 00:51:04,050
obvious things to them the not so well

00:51:02,880 --> 00:51:06,420
announced things we already mentioned

00:51:04,050 --> 00:51:09,960
speedy enable it it's just installing

00:51:06,420 --> 00:51:12,150
not speedy on engine X or Apache and it

00:51:09,960 --> 00:51:14,160
gives you small Impala forms

00:51:12,150 --> 00:51:17,220
improvements especially if you are using

00:51:14,160 --> 00:51:19,010
SSL or TLS so this is

00:51:17,220 --> 00:51:21,030
reverse it for Chrome and Firefox

00:51:19,010 --> 00:51:24,000
minimize the amount of redirects you

00:51:21,030 --> 00:51:26,550
have so if somebody comes to your site

00:51:24,000 --> 00:51:28,980
and goes to example.com you rewrite into

00:51:26,550 --> 00:51:31,560
the 3wa example calm then you rewrite

00:51:28,980 --> 00:51:34,050
them to https 3w example.com then you

00:51:31,560 --> 00:51:36,720
relight them to https 3w examiner com /

00:51:34,050 --> 00:51:40,680
home this is actually a few redirects to

00:51:36,720 --> 00:51:42,840
much limited a tree rex lee direct costs

00:51:40,680 --> 00:51:45,720
time especially on mobile check image

00:51:42,840 --> 00:51:48,690
compression for all your icons and logos

00:51:45,720 --> 00:51:51,420
and all the stuff you have there is a

00:51:48,690 --> 00:51:54,780
great currency the URL but it's all

00:51:51,420 --> 00:51:57,030
sides there's a get great plugin for

00:51:54,780 --> 00:51:59,490
grunt for example called image menteur

00:51:57,030 --> 00:52:01,170
their tools command and tools adjust can

00:51:59,490 --> 00:52:02,609
run over all your images of all the

00:52:01,170 --> 00:52:05,040
static files and they're just recompress

00:52:02,609 --> 00:52:06,750
em losslessly and you're safe I know

00:52:05,040 --> 00:52:09,030
probably if you have never done this

00:52:06,750 --> 00:52:11,849
before a few megabytes or in total on

00:52:09,030 --> 00:52:15,300
all your images this is great and not

00:52:11,849 --> 00:52:17,280
much work compress your HTML output you

00:52:15,300 --> 00:52:18,869
don't need all these extra spaces and

00:52:17,280 --> 00:52:20,310
new lines and everything in the HTML

00:52:18,869 --> 00:52:23,010
yourself to the user on production at

00:52:20,310 --> 00:52:25,020
least so if you have some template files

00:52:23,010 --> 00:52:26,700
somewhere maybe have a compilation step

00:52:25,020 --> 00:52:28,349
on deployment hood which removes all the

00:52:26,700 --> 00:52:31,770
accepted as a excessive white spaces

00:52:28,349 --> 00:52:33,210
there check why slow and PageSpeed and

00:52:31,770 --> 00:52:34,619
all these tools that out they are

00:52:33,210 --> 00:52:38,670
because they tell you a lot of what you

00:52:34,619 --> 00:52:42,300
are doing wrong enable DNS prefetching

00:52:38,670 --> 00:52:43,680
for your CDN hosts this also saves like

00:52:42,300 --> 00:52:45,960
a few milliseconds here and there

00:52:43,680 --> 00:52:47,849
gayness prefetching means in your HTML

00:52:45,960 --> 00:52:50,820
code somewhere in the header you say

00:52:47,849 --> 00:52:52,710
just okay i have a few hosts that i'm

00:52:50,820 --> 00:52:55,020
probably going to call later while you

00:52:52,710 --> 00:52:57,420
at it while i'm sending you all the data

00:52:55,020 --> 00:52:59,849
please already do it doing dns lookup

00:52:57,420 --> 00:53:01,680
for these domains for where your host to

00:52:59,849 --> 00:53:03,000
images and javascript estar sheets so we

00:53:01,680 --> 00:53:04,770
are doing the dns lookup a few

00:53:03,000 --> 00:53:06,570
milliseconds before you actually

00:53:04,770 --> 00:53:08,580
requested and probably the linneans

00:53:06,570 --> 00:53:10,290
lagravis was already done then this is

00:53:08,580 --> 00:53:13,710
like also two lines of code and you're

00:53:10,290 --> 00:53:15,839
saving a bit everything counts move as

00:53:13,710 --> 00:53:17,880
as much complicated and expensive logic

00:53:15,839 --> 00:53:20,130
as possible to ellen Cronus workers you

00:53:17,880 --> 00:53:22,410
cmn or stuff or cues RabbitMQ or

00:53:20,130 --> 00:53:23,730
something to for example when you send

00:53:22,410 --> 00:53:25,950
mails you probably don't need to send

00:53:23,730 --> 00:53:28,140
the mail in the request that it serves

00:53:25,950 --> 00:53:30,289
HTML to the user you can just throw in

00:53:28,140 --> 00:53:31,549
events or create a job on gierman

00:53:30,289 --> 00:53:33,289
and the later on have worker which

00:53:31,549 --> 00:53:38,059
actually compute computes and sent the

00:53:33,289 --> 00:53:39,979
email and then the crazy stuff okay

00:53:38,059 --> 00:53:41,839
varnish is not really crazy but you if

00:53:39,979 --> 00:53:44,630
you have static content somewhere on the

00:53:41,839 --> 00:53:47,719
page you can use it with varnish all you

00:53:44,630 --> 00:53:50,209
can do is if a reverse proxy cache stuff

00:53:47,719 --> 00:53:53,539
before your application and use edge

00:53:50,209 --> 00:53:56,509
site includes what does it mean I have

00:53:53,539 --> 00:53:58,579
my application for my profile page with

00:53:56,509 --> 00:54:00,589
the publication's components about me

00:53:58,579 --> 00:54:02,630
component component the left column and

00:54:00,589 --> 00:54:04,279
institution component and for for

00:54:02,630 --> 00:54:06,949
example let's just say the botany

00:54:04,279 --> 00:54:10,309
component usually never changes and if

00:54:06,949 --> 00:54:13,329
it changes we can probably leave it they

00:54:10,309 --> 00:54:15,439
are for like a few minutes or so in a

00:54:13,329 --> 00:54:17,839
not-so-nice version so what i can do is

00:54:15,439 --> 00:54:19,880
in order to not having been needing to

00:54:17,839 --> 00:54:22,880
compute this about me component I can

00:54:19,880 --> 00:54:25,069
just render an etch that include tagged

00:54:22,880 --> 00:54:28,910
with an URL instead of the above me

00:54:25,069 --> 00:54:31,880
component and then what varnish does a

00:54:28,910 --> 00:54:33,739
thesis H light include and that's

00:54:31,880 --> 00:54:35,689
another request to your PHP back end to

00:54:33,739 --> 00:54:37,309
this URL your specified here this URL

00:54:35,689 --> 00:54:38,989
should then return the about me

00:54:37,309 --> 00:54:41,329
component and you can set different

00:54:38,989 --> 00:54:43,309
caching headers for both these two

00:54:41,329 --> 00:54:45,739
requests like the request to your actual

00:54:43,309 --> 00:54:48,499
profile page and the probe request is

00:54:45,739 --> 00:54:50,689
about me component and then for some you

00:54:48,499 --> 00:54:52,609
can say okay about me component catch me

00:54:50,689 --> 00:54:55,219
at one hour or something I'm well it for

00:54:52,609 --> 00:54:57,229
one hour and then for the next request

00:54:55,219 --> 00:54:58,609
to this page the profile component

00:54:57,229 --> 00:55:00,109
because it doesn't have any caching

00:54:58,609 --> 00:55:02,029
header will be fetched from a PHP

00:55:00,109 --> 00:55:04,039
applications it still has this edge set

00:55:02,029 --> 00:55:05,539
include in here but the Bob me component

00:55:04,039 --> 00:55:07,729
will be soft from cache automatically

00:55:05,539 --> 00:55:10,609
which is really really awesome if you

00:55:07,729 --> 00:55:12,739
have static stuff in there we can also

00:55:10,609 --> 00:55:14,869
do the other way around for example you

00:55:12,739 --> 00:55:17,539
can say my big profile page is very very

00:55:14,869 --> 00:55:19,339
static so okay profiles probably a

00:55:17,539 --> 00:55:21,979
better idea my news page is very very

00:55:19,339 --> 00:55:23,479
static so I suffered from cash tablet

00:55:21,979 --> 00:55:24,709
caching head out there but there is an

00:55:23,479 --> 00:55:26,029
edge that include for the comments

00:55:24,709 --> 00:55:28,909
section which should be up-to-date

00:55:26,029 --> 00:55:31,189
always so what happens then for the next

00:55:28,909 --> 00:55:32,779
request only the comments section will

00:55:31,189 --> 00:55:34,429
be served by your PHP script in the rest

00:55:32,779 --> 00:55:38,959
will come from cache which is really

00:55:34,429 --> 00:55:40,339
really awesome then if you don't want to

00:55:38,959 --> 00:55:42,270
install varnish and all this stuff and

00:55:40,339 --> 00:55:45,420
all the stuff needs to be

00:55:42,270 --> 00:55:47,280
somehow up to date all the time because

00:55:45,420 --> 00:55:49,880
everything is very dynamic you can also

00:55:47,280 --> 00:55:51,840
use something very similar to just load

00:55:49,880 --> 00:55:53,400
components or stuff on your page as in

00:55:51,840 --> 00:55:55,500
corona see for example stuff that is

00:55:53,400 --> 00:55:57,660
below the fold or on the right column or

00:55:55,500 --> 00:55:59,100
not that important same thing you have

00:55:57,660 --> 00:56:01,140
this about me components is probably

00:55:59,100 --> 00:56:02,910
somewhere on the far right down

00:56:01,140 --> 00:56:04,710
somewhere and we don't really need it

00:56:02,910 --> 00:56:06,870
when the user should interact first of

00:56:04,710 --> 00:56:08,070
the page so instead of computing all the

00:56:06,870 --> 00:56:10,380
stuff and render on it we can just

00:56:08,070 --> 00:56:12,030
render a small place holder and then at

00:56:10,380 --> 00:56:14,370
the end of a page render a script tag

00:56:12,030 --> 00:56:16,610
that doesn't Ajax request to some URL

00:56:14,370 --> 00:56:21,870
load this component and then replaces

00:56:16,610 --> 00:56:22,740
the placeholder with this component if

00:56:21,870 --> 00:56:25,710
you are doing this for example

00:56:22,740 --> 00:56:27,540
extensively for these small

00:56:25,710 --> 00:56:29,850
recommendation components on the page

00:56:27,540 --> 00:56:31,890
that are very heavy to compute take a

00:56:29,850 --> 00:56:33,180
few milliseconds and I'm not that

00:56:31,890 --> 00:56:36,390
important because there's somewhere on

00:56:33,180 --> 00:56:38,940
the right what you then can do is also

00:56:36,390 --> 00:56:41,190
flush content as early as possible most

00:56:38,940 --> 00:56:44,460
web frameworks like symphony or zent or

00:56:41,190 --> 00:56:46,650
something put you in into the kind of

00:56:44,460 --> 00:56:47,880
direction that you get a request you

00:56:46,650 --> 00:56:48,990
calculate everything you render

00:56:47,880 --> 00:56:50,520
everything you put it into a response

00:56:48,990 --> 00:56:52,950
object and then you flush it out to the

00:56:50,520 --> 00:56:56,550
client with HTTP what you can do is

00:56:52,950 --> 00:57:00,090
actually you can flush out stuff to the

00:56:56,550 --> 00:57:02,040
client all the time so while you are

00:57:00,090 --> 00:57:03,930
still computing something on the bottom

00:57:02,040 --> 00:57:05,220
of your page or somewhere you can

00:57:03,930 --> 00:57:06,570
already flush the header or to the

00:57:05,220 --> 00:57:09,210
client because already ready it's

00:57:06,570 --> 00:57:11,040
already computed do the user sees the

00:57:09,210 --> 00:57:12,570
header has some response and then you

00:57:11,040 --> 00:57:14,100
compute the other stuff in front you

00:57:12,570 --> 00:57:18,570
talk to the client in the same HTTP call

00:57:14,100 --> 00:57:20,160
as well as we said move logic to shut

00:57:18,570 --> 00:57:22,050
down headless as much as possible if you

00:57:20,160 --> 00:57:23,820
do tracking stuff analytics stuff or

00:57:22,050 --> 00:57:25,470
something that you don't need for

00:57:23,820 --> 00:57:28,590
actually computing the HTML move it down

00:57:25,470 --> 00:57:30,630
to shut down and loss very easy we gets

00:57:28,590 --> 00:57:32,700
the shutdown function and then if you're

00:57:30,630 --> 00:57:36,240
using engineers you can also use fast to

00:57:32,700 --> 00:57:37,710
drive finish request to say okay recurse

00:57:36,240 --> 00:57:40,650
is finished close the connection if

00:57:37,710 --> 00:57:43,520
you're doing HTTP calls to AP is you can

00:57:40,650 --> 00:57:46,800
use promises or futures that means you

00:57:43,520 --> 00:57:50,520
say okay I want to do an HTP call here

00:57:46,800 --> 00:57:52,350
through example.com start the HTTP call

00:57:50,520 --> 00:57:54,240
then I couldn't do a lot of what it does

00:57:52,350 --> 00:57:55,500
internally this is the library from

00:57:54,240 --> 00:57:56,790
facebook called

00:57:55,500 --> 00:57:58,860
whew till which is really really nice

00:57:56,790 --> 00:58:00,570
for that what it does internally it

00:57:58,860 --> 00:58:02,520
opens a socket sends the request and

00:58:00,570 --> 00:58:04,620
then it does not block but you can do

00:58:02,520 --> 00:58:06,930
other stuff and then if you really need

00:58:04,620 --> 00:58:08,820
the data so you get back a future object

00:58:06,930 --> 00:58:10,560
here object here and if you really need

00:58:08,820 --> 00:58:13,470
the data you say future resolve and then

00:58:10,560 --> 00:58:15,210
only at that point in time the you code

00:58:13,470 --> 00:58:17,640
blocks and wait for the request and in

00:58:15,210 --> 00:58:19,230
many places cases your regrets already

00:58:17,640 --> 00:58:22,260
finished and the data is already there

00:58:19,230 --> 00:58:24,690
and then you could do other more

00:58:22,260 --> 00:58:26,700
important stuff in between this can

00:58:24,690 --> 00:58:30,690
speed up a lot of stuff very very very

00:58:26,700 --> 00:58:32,250
very heavily then if you have users are

00:58:30,690 --> 00:58:36,110
modern use modern browsers you can stuff

00:58:32,250 --> 00:58:42,390
do stuff like push state so that means I

00:58:36,110 --> 00:58:46,160
just show it to you in an example if the

00:58:42,390 --> 00:58:46,160
internet connection is working hopefully

00:58:47,270 --> 00:58:53,640
looks good so you have in this case you

00:58:52,170 --> 00:58:55,560
have a few taps here and you can imagine

00:58:53,640 --> 00:58:58,260
if I click the step this part of the

00:58:55,560 --> 00:58:59,850
page it stays the same so why should i

00:58:58,260 --> 00:59:03,150
compute and load it again what I can

00:58:59,850 --> 00:59:06,060
just do is I when I click on here we

00:59:03,150 --> 00:59:09,270
fire off an Avox request request the

00:59:06,060 --> 00:59:10,920
lower part of the page and with- request

00:59:09,270 --> 00:59:12,600
and then just put it into this diff

00:59:10,920 --> 00:59:15,150
container and this part stays the same

00:59:12,600 --> 00:59:17,820
and this is a push state API we already

00:59:15,150 --> 00:59:19,950
also change the URL here so if I do

00:59:17,820 --> 00:59:24,000
which is very nice in it because then I

00:59:19,950 --> 00:59:27,720
can do a refresh and are on the same

00:59:24,000 --> 00:59:31,860
page again also what you did see here is

00:59:27,720 --> 00:59:35,190
this flashing content early that it

00:59:31,860 --> 00:59:39,120
action or here here you see it you see

00:59:35,190 --> 00:59:40,680
it hopefully better so we flush here the

00:59:39,120 --> 00:59:43,200
header and then the other parts of the

00:59:40,680 --> 00:59:46,170
page appear and this one it should be

00:59:43,200 --> 00:59:50,640
request but we flash content one after

00:59:46,170 --> 00:59:52,860
each other this does not make your page

00:59:50,640 --> 00:59:56,850
faster but it appears fast at the user

00:59:52,860 --> 00:59:58,500
so you're tricking a bit and then if you

00:59:56,850 --> 01:00:02,540
want to be really fancy you can do stuff

00:59:58,500 --> 01:00:05,460
like big pipe who is sort of big pipe

01:00:02,540 --> 01:00:08,400
okay big pipe is a technique that was

01:00:05,460 --> 01:00:08,940
made public or is used by Facebook a lot

01:00:08,400 --> 01:00:10,859
and

01:00:08,940 --> 01:00:13,020
a few other pages which is basically a

01:00:10,859 --> 01:00:14,970
combination of this flashing content

01:00:13,020 --> 01:00:16,460
early doing stuff as in corona see if

01:00:14,970 --> 01:00:19,530
therefore these pages like here you have

01:00:16,460 --> 01:00:22,430
three big components like an era left

01:00:19,530 --> 01:00:25,339
column right column what you can do is

01:00:22,430 --> 01:00:28,800
you identify these components and then

01:00:25,339 --> 01:00:31,589
you can flash flash out the whole page

01:00:28,800 --> 01:00:33,180
basically the menu the header calculate

01:00:31,589 --> 01:00:34,800
all that and for the left column right

01:00:33,180 --> 01:00:37,470
column you have flash out placeholders

01:00:34,800 --> 01:00:40,230
then you flush out the rest of the futon

01:00:37,470 --> 01:00:41,880
everything you need then you flush out

01:00:40,230 --> 01:00:43,470
all the JavaScript to bind already the

01:00:41,880 --> 01:00:45,480
header on there so the user can interact

01:00:43,470 --> 01:00:48,000
with the header and then you start to

01:00:45,480 --> 01:00:51,950
computing in the same HTTP request the

01:00:48,000 --> 01:00:55,319
left column you can render out some

01:00:51,950 --> 01:00:58,230
JavaScript that then takes the computer

01:00:55,319 --> 01:01:00,920
left column HTML and replaces the left

01:00:58,230 --> 01:01:03,300
column div with computed the thing here

01:01:00,920 --> 01:01:04,950
so this can take a few more hundred

01:01:03,300 --> 01:01:06,630
milliseconds because the HTTP calls

01:01:04,950 --> 01:01:08,190
happening there then the left column is

01:01:06,630 --> 01:01:10,109
there and then you can do the same for

01:01:08,190 --> 01:01:11,819
the right column and this way it's

01:01:10,109 --> 01:01:14,849
basically the same as flashing content

01:01:11,819 --> 01:01:16,950
golly but it's at some places easier to

01:01:14,849 --> 01:01:18,359
implement in your framework because you

01:01:16,950 --> 01:01:20,460
are rendering prey solace and then you

01:01:18,359 --> 01:01:22,400
do something do stuff afterwards and

01:01:20,460 --> 01:01:26,069
what you also can do you can prioritize

01:01:22,400 --> 01:01:28,920
content easily even if you're dumb does

01:01:26,069 --> 01:01:31,530
if the order of your dumb is not like

01:01:28,920 --> 01:01:34,470
the privatization we were to do you can

01:01:31,530 --> 01:01:38,040
render content for it in another order

01:01:34,470 --> 01:01:41,550
that you want to an example for facebook

01:01:38,040 --> 01:01:43,589
is what they are doing that's me hoping

01:01:41,550 --> 01:01:46,380
now that nobody put anything on my

01:01:43,589 --> 01:01:51,990
facebook page that is not good for

01:01:46,380 --> 01:01:54,089
recording our cute baby picture hi so

01:01:51,990 --> 01:01:56,040
what they are doing is do reload here

01:01:54,089 --> 01:01:59,369
you see that they have the menu first

01:01:56,040 --> 01:02:01,859
then the feet then the left may lower

01:01:59,369 --> 01:02:04,859
than you and then the advertisement on

01:02:01,859 --> 01:02:06,480
the right so dumb why's it could not be

01:02:04,859 --> 01:02:08,910
done like this if you just flash all the

01:02:06,480 --> 01:02:11,880
content one half of each other but by

01:02:08,910 --> 01:02:13,800
using this big pipe thing they can just

01:02:11,880 --> 01:02:15,630
prioritize and say hey this content here

01:02:13,800 --> 01:02:18,450
is more important than this one or this

01:02:15,630 --> 01:02:20,549
one even if this is in the dome speaking

01:02:18,450 --> 01:02:24,329
on top of this content

01:02:20,549 --> 01:02:35,009
and nice thing about Facebook is they

01:02:24,329 --> 01:02:37,469
also have been a possibility to they

01:02:35,009 --> 01:02:40,319
have a blog post about it and they have

01:02:37,469 --> 01:02:43,469
a possibility to deactivate this big

01:02:40,319 --> 01:02:45,059
pipe feature and render all this content

01:02:43,469 --> 01:02:46,469
in a single flash like computing

01:02:45,059 --> 01:02:48,959
everything and then flashing it in one

01:02:46,469 --> 01:02:51,029
go to the client and if you do this you

01:02:48,959 --> 01:02:56,819
see that facebook is actually really

01:02:51,029 --> 01:02:58,709
really slow so compared to using big

01:02:56,819 --> 01:03:01,140
pipe so they are cheating a lot on this

01:02:58,709 --> 01:03:04,130
as well and it's not nothing bad the

01:03:01,140 --> 01:03:06,989
user has just better user experience and

01:03:04,130 --> 01:03:08,759
with that and all these crazy tricks

01:03:06,989 --> 01:03:11,729
thank you very much for your attention

01:03:08,759 --> 01:03:15,239
if their questions I'm with overtime we

01:03:11,729 --> 01:03:17,969
can do questions okay we all of them

01:03:15,239 --> 01:03:20,339
I'll be outside after like 10 minutes or

01:03:17,969 --> 01:03:21,660
in front of here please go joint in read

01:03:20,339 --> 01:03:23,339
all the talks you have seen rate this

01:03:21,660 --> 01:03:25,859
talks give comments on it because it's

01:03:23,339 --> 01:03:27,929
like the first the second time I did it

01:03:25,859 --> 01:03:30,929
the first time is also extra stuff the

01:03:27,929 --> 01:03:32,429
first time in English so I hope to get

01:03:30,929 --> 01:03:34,259
like your comments positive or negative

01:03:32,429 --> 01:03:37,160
it really helps all the speakers improve

01:03:34,259 --> 01:03:37,160
thank you very much

01:03:39,589 --> 01:03:41,650

YouTube URL: https://www.youtube.com/watch?v=4TbxHDSDkiw


