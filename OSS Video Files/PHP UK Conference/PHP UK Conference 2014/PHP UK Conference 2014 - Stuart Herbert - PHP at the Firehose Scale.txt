Title: PHP UK Conference 2014 - Stuart Herbert - PHP at the Firehose Scale
Publication date: 2014-03-21
Playlist: PHP UK Conference 2014
Description: 
	Here's one to give the PHP bashers a well-deserved black eye! Twitter is one of the world's best know social media sites, handling over 500 million public tweets a day (that's around 6,000 tweets a second). Together, they're delivered to select partners as a 'firehose' of data, who in turn deliver it on to their customers. DataSift is one of Twitter's firehose partners, and when someone presses 'Send' in their Twitter client, we aim to get that tweet into the hands of our customers in about 1 second. And PHP plays several key roles in making that possible. Come along and hear Stuart explain just how.
Captions: 
	00:00:04,609 --> 00:00:10,410
good morning everybody there's lots of

00:00:08,490 --> 00:00:13,200
talks over the many years with

00:00:10,410 --> 00:00:18,630
conferences to do with web scale it's a

00:00:13,200 --> 00:00:20,430
well-understood problem and there's lots

00:00:18,630 --> 00:00:23,519
of great tools out there for doing web

00:00:20,430 --> 00:00:26,599
scale engine X Varney hip-hop's these

00:00:23,519 --> 00:00:30,660
days and of course the no SQL movement

00:00:26,599 --> 00:00:32,130
people like Derek with MongoDB but what

00:00:30,660 --> 00:00:35,130
I want to talk today is about data

00:00:32,130 --> 00:00:40,559
processing and how you can use PHP with

00:00:35,130 --> 00:00:42,870
fire hoses of data and that means big

00:00:40,559 --> 00:00:44,760
data so one of the things we can do

00:00:42,870 --> 00:00:46,200
today as we go along a little bit of a

00:00:44,760 --> 00:00:48,020
drinking game every time you see a big

00:00:46,200 --> 00:00:50,399
data hashtag you should have a drink

00:00:48,020 --> 00:00:54,840
we'll see who can walk out at the end of

00:00:50,399 --> 00:00:57,719
it now what is big data let's start with

00:00:54,840 --> 00:00:59,609
the definition of big data so what big

00:00:57,719 --> 00:01:02,250
data really is it's the business of

00:00:59,609 --> 00:01:05,400
society because the world is full of

00:01:02,250 --> 00:01:07,140
data and data has been around for

00:01:05,400 --> 00:01:10,290
hundreds of years and well before we had

00:01:07,140 --> 00:01:11,880
computers to process them now these days

00:01:10,290 --> 00:01:13,860
when people talk about big data they

00:01:11,880 --> 00:01:15,240
think of social because socials leading

00:01:13,860 --> 00:01:18,360
the way on this with fire hoses and

00:01:15,240 --> 00:01:20,340
things like that but you've also got a

00:01:18,360 --> 00:01:21,900
lot of data that's currently siloed

00:01:20,340 --> 00:01:25,560
you've got banks with all their data

00:01:21,900 --> 00:01:28,200
stores you've got supermarkets places

00:01:25,560 --> 00:01:30,960
like that and of course you've got the

00:01:28,200 --> 00:01:33,689
internet of things coming along which is

00:01:30,960 --> 00:01:35,909
going to produce data about everything

00:01:33,689 --> 00:01:37,229
you can have lamp post tweeting traffic

00:01:35,909 --> 00:01:40,770
likes tweeting who knows what's coming

00:01:37,229 --> 00:01:43,140
in there so a thing with big data is

00:01:40,770 --> 00:01:45,990
it's an old problem that's been

00:01:43,140 --> 00:01:48,140
rediscovered which is the story of

00:01:45,990 --> 00:01:50,399
computing over the decades really

00:01:48,140 --> 00:01:53,189
because computers have been processing

00:01:50,399 --> 00:01:56,759
data well before the web came along I

00:01:53,189 --> 00:01:58,619
mine i started industry and it was

00:01:56,759 --> 00:02:00,810
before the web was commercialized at all

00:01:58,619 --> 00:02:04,500
and we worked on data processing apps

00:02:00,810 --> 00:02:06,329
before we started doing websites but the

00:02:04,500 --> 00:02:08,789
last 15 years what we've seen is

00:02:06,329 --> 00:02:11,790
language and toolkits have all evolved

00:02:08,789 --> 00:02:13,440
for the web for publishing web pages for

00:02:11,790 --> 00:02:14,520
interacting with customers for doing

00:02:13,440 --> 00:02:19,570
e-commerce

00:02:14,520 --> 00:02:21,040
and big data really is kind of putting

00:02:19,570 --> 00:02:23,290
pressure on all of that and forcing

00:02:21,040 --> 00:02:26,110
languages to change again and at the

00:02:23,290 --> 00:02:28,720
moment big data is best tackled by a mix

00:02:26,110 --> 00:02:30,910
of languages and one of the things i

00:02:28,720 --> 00:02:33,520
want to show you today is how PHP has a

00:02:30,910 --> 00:02:35,950
role to play in all of that because if

00:02:33,520 --> 00:02:38,110
you listen to all the hype everyone says

00:02:35,950 --> 00:02:40,660
big data is java its hadoop or its

00:02:38,110 --> 00:02:44,230
python and numpy and things like that

00:02:40,660 --> 00:02:46,060
but PHP has a role to play as well in

00:02:44,230 --> 00:02:50,110
fact it's got two roles to play and

00:02:46,060 --> 00:02:51,880
that's what this talk is all about so

00:02:50,110 --> 00:02:54,100
let's get into what the talks we're

00:02:51,880 --> 00:02:55,930
going to cover for I want to explain a

00:02:54,100 --> 00:02:58,090
bit more about what a fire hoses because

00:02:55,930 --> 00:02:59,290
chances are you've not had the chance to

00:02:58,090 --> 00:03:02,770
really play with one before so we'll

00:02:59,290 --> 00:03:05,170
talk about that and look at that one of

00:03:02,770 --> 00:03:07,750
the things we do with PHP is we ingest

00:03:05,170 --> 00:03:09,730
fire hoses I'm going to show you how we

00:03:07,750 --> 00:03:13,030
do that what the architecture is that we

00:03:09,730 --> 00:03:16,180
use to achieve that now in our business

00:03:13,030 --> 00:03:17,830
we take the fire hose we make it smaller

00:03:16,180 --> 00:03:20,620
and then we deliver it to our customers

00:03:17,830 --> 00:03:22,090
and that's another area web PHP superb

00:03:20,620 --> 00:03:25,900
lee suited so i'm going to show you how

00:03:22,090 --> 00:03:28,090
we do that and why we use PHP that now i

00:03:25,900 --> 00:03:30,880
mentioned earlier about a mix of

00:03:28,090 --> 00:03:33,250
languages so we're going to show you the

00:03:30,880 --> 00:03:36,790
overall architecture and how PHP fits in

00:03:33,250 --> 00:03:38,290
around everything else and then i'm

00:03:36,790 --> 00:03:40,990
going to pull it all together give your

00:03:38,290 --> 00:03:44,980
nice big set of slides to show you why

00:03:40,990 --> 00:03:50,050
we use PHP so my inspiration for this

00:03:44,980 --> 00:03:51,790
talk is you go on Hacker News you follow

00:03:50,050 --> 00:03:54,580
certain people who are not name on

00:03:51,790 --> 00:03:59,140
twitter and PHP gets a lot of bashing as

00:03:54,580 --> 00:04:01,300
being a language for amateurs it's a

00:03:59,140 --> 00:04:03,400
language that allowed facebook to spend

00:04:01,300 --> 00:04:07,560
what was it 16 billion this week on a

00:04:03,400 --> 00:04:11,320
nap and their stuffs all built on PHP

00:04:07,560 --> 00:04:13,060
PHP is the language of big business it's

00:04:11,320 --> 00:04:17,290
a language of big data and i want to

00:04:13,060 --> 00:04:19,510
show you how we do that today there's a

00:04:17,290 --> 00:04:20,919
chap mother microphone for questions so

00:04:19,510 --> 00:04:25,720
we'll take questions at the end of the

00:04:20,919 --> 00:04:27,659
talk today fatso Cove everybody so let's

00:04:25,720 --> 00:04:31,180
get into it and let's start off

00:04:27,659 --> 00:04:33,639
by looking at what a fire hoses and to

00:04:31,180 --> 00:04:35,889
help explain a fire hose let's start off

00:04:33,639 --> 00:04:40,169
with scraping so hands up who's ever

00:04:35,889 --> 00:04:44,530
scraped your website for content that's

00:04:40,169 --> 00:04:45,520
almost everybody okay so a lot of what I

00:04:44,530 --> 00:04:47,020
were just about to explain about

00:04:45,520 --> 00:04:50,110
scraping hopefully is going to be very

00:04:47,020 --> 00:04:52,840
familiar to all of you so here's my

00:04:50,110 --> 00:04:55,270
definition of scraping you've got a

00:04:52,840 --> 00:04:57,039
robot downloads a web page and it tries

00:04:55,270 --> 00:04:58,930
to make sense of what it's downloaded

00:04:57,039 --> 00:05:01,330
that in a nutshell really is what

00:04:58,930 --> 00:05:03,669
scraping about let's explore that a

00:05:01,330 --> 00:05:04,779
little bit more detail first so the

00:05:03,669 --> 00:05:08,319
first thing is you've got a robot

00:05:04,779 --> 00:05:09,520
downloading a webpage or a website how

00:05:08,319 --> 00:05:13,090
does the robot know when to go and

00:05:09,520 --> 00:05:15,879
download it's got to go on a schedule

00:05:13,090 --> 00:05:17,740
and poll the website to scrape for

00:05:15,879 --> 00:05:19,689
content because you're not just looking

00:05:17,740 --> 00:05:22,569
for new content you're looking from an

00:05:19,689 --> 00:05:24,729
existing contents updated as well you've

00:05:22,569 --> 00:05:28,779
got to go and download it and hope you

00:05:24,729 --> 00:05:31,240
catch it in a reasonable time now RSS

00:05:28,779 --> 00:05:32,830
was you know help solve this problem

00:05:31,240 --> 00:05:34,810
because you could just pull the RSS feed

00:05:32,830 --> 00:05:36,190
and use that to go and get things but

00:05:34,810 --> 00:05:38,199
with google reader having closed down

00:05:36,190 --> 00:05:44,139
RSS is now starting to die out on the

00:05:38,199 --> 00:05:46,330
net now before i go there was one more

00:05:44,139 --> 00:05:47,589
point i want to make how many of you

00:05:46,330 --> 00:05:52,719
were in your own website blogs and

00:05:47,589 --> 00:05:54,969
things almost as many people how much of

00:05:52,719 --> 00:05:59,589
your traffic is bot scraping your

00:05:54,969 --> 00:06:03,339
website hardly anybody well my website

00:05:59,589 --> 00:06:05,229
gets scraped by over 20 BOTS it's it's

00:06:03,339 --> 00:06:08,349
the source of sixty seventy percent of

00:06:05,229 --> 00:06:09,849
the traffic on my website and I know I'm

00:06:08,349 --> 00:06:13,029
fed up of the bots or hammering the

00:06:09,849 --> 00:06:14,949
website at the same time and imagine

00:06:13,029 --> 00:06:16,990
you're scraping someone's content

00:06:14,949 --> 00:06:19,449
everyone wants to scrape that content

00:06:16,990 --> 00:06:21,639
the right Laraine scrapers but have a

00:06:19,449 --> 00:06:25,930
negative effect on people's websites

00:06:21,639 --> 00:06:27,430
it's a real pain in back side so that's

00:06:25,930 --> 00:06:29,589
one of the problems we've using a robot

00:06:27,430 --> 00:06:31,330
to download content but let's also look

00:06:29,589 --> 00:06:32,680
at the other part of it you've got to

00:06:31,330 --> 00:06:34,810
make sense of the content you've

00:06:32,680 --> 00:06:37,919
downloaded and the content you've

00:06:34,810 --> 00:06:40,599
downloaded is normally marked up HTML

00:06:37,919 --> 00:06:40,889
you can get an XML feed which is more

00:06:40,599 --> 00:06:43,319
some

00:06:40,889 --> 00:06:46,259
typically marked up but even today mark

00:06:43,319 --> 00:06:47,849
up just isn't used semantically I mean

00:06:46,259 --> 00:06:51,870
how long is the RDF movement been around

00:06:47,849 --> 00:06:53,249
10 years 12 years html5 s got tags to

00:06:51,870 --> 00:06:55,710
help us understand the shape of a

00:06:53,249 --> 00:06:57,629
website but how many people just use

00:06:55,710 --> 00:07:01,949
divs and classes everywhere for marking

00:06:57,629 --> 00:07:03,360
up their site lots of people do now

00:07:01,949 --> 00:07:04,680
you're trying to extract with a scraper

00:07:03,360 --> 00:07:06,330
you trying to extract content from the

00:07:04,680 --> 00:07:08,159
page that's got other stuff on it it's

00:07:06,330 --> 00:07:10,770
got navigation on it it's probably got

00:07:08,159 --> 00:07:12,330
adverts on it it's got sweet boxes it's

00:07:10,770 --> 00:07:14,099
got all sorts of things that your scrape

00:07:12,330 --> 00:07:17,099
has got to go and ignore in order to

00:07:14,099 --> 00:07:19,740
find the content that you want now this

00:07:17,099 --> 00:07:21,779
makes scraping fragile so all of you

00:07:19,740 --> 00:07:23,219
who've done scraping before how many

00:07:21,779 --> 00:07:24,539
times you've you had to go and fix a

00:07:23,219 --> 00:07:29,550
scraper because someone changed their

00:07:24,539 --> 00:07:32,580
website yeah and when it happens it's

00:07:29,550 --> 00:07:34,199
disruptive to your work isn't it takes

00:07:32,580 --> 00:07:35,819
time you've got to go and you're going

00:07:34,199 --> 00:07:37,319
to change your bot get it working again

00:07:35,819 --> 00:07:40,589
and during that time you're not able to

00:07:37,319 --> 00:07:44,659
scrape content it's not a really nice

00:07:40,589 --> 00:07:47,219
process to work with now we all know

00:07:44,659 --> 00:07:49,860
there's a great example of who's the

00:07:47,219 --> 00:07:52,319
most famous scraper vol and that's

00:07:49,860 --> 00:07:54,960
Google that's their business they scrape

00:07:52,319 --> 00:07:57,360
websites and turn it into search results

00:07:54,960 --> 00:07:58,710
and you think of Google you think of

00:07:57,360 --> 00:08:00,149
them hiring smartest people on the

00:07:58,710 --> 00:08:03,680
planet they go around the Hoover them up

00:08:00,149 --> 00:08:05,610
and they solve really difficult problems

00:08:03,680 --> 00:08:08,490
but when was the last time you did a

00:08:05,610 --> 00:08:10,080
search on Google and every item on the

00:08:08,490 --> 00:08:15,270
front page was relevant to your search

00:08:10,080 --> 00:08:17,939
term my point there is even Google with

00:08:15,270 --> 00:08:23,250
all the brainpower they've got struggle

00:08:17,939 --> 00:08:25,139
to make sense of a scraped web and just

00:08:23,250 --> 00:08:27,029
imagine how badly ever search engines do

00:08:25,139 --> 00:08:30,770
who can't hire the quality of people

00:08:27,029 --> 00:08:33,870
Google can hi so that's really hard work

00:08:30,770 --> 00:08:36,779
scrapings really hard work and doesn't

00:08:33,870 --> 00:08:40,529
sound like fun so this is where fire

00:08:36,779 --> 00:08:44,070
hoses come in so here's my definition of

00:08:40,529 --> 00:08:46,800
a fire hose notice how how it's much

00:08:44,070 --> 00:08:50,730
shorter for a start it's a live stream

00:08:46,800 --> 00:08:53,170
of events that you consume so let's

00:08:50,730 --> 00:08:55,570
break that down

00:08:53,170 --> 00:08:58,360
it's a stream of events it's a data flow

00:08:55,570 --> 00:09:01,720
of data coming in and their events it's

00:08:58,360 --> 00:09:03,370
not content it's it's an entity that

00:09:01,720 --> 00:09:05,019
tells you that something has happened it

00:09:03,370 --> 00:09:07,060
tells you what has happened whether

00:09:05,019 --> 00:09:09,850
there's been a new post whether there's

00:09:07,060 --> 00:09:12,279
been an update maybe someone's gotten

00:09:09,850 --> 00:09:13,779
deleted a content or a tweet or maybe

00:09:12,279 --> 00:09:15,430
the user status has changed they've got

00:09:13,779 --> 00:09:18,370
to mark their stuff as private for

00:09:15,430 --> 00:09:20,649
example you're getting told what's

00:09:18,370 --> 00:09:23,920
happening you're not having to guess

00:09:20,649 --> 00:09:26,880
it's great thing about firehose other

00:09:23,920 --> 00:09:31,209
thing about a fire hose is a live stream

00:09:26,880 --> 00:09:32,199
it's happening now right now those of

00:09:31,209 --> 00:09:34,120
you in the audience who are tweeting

00:09:32,199 --> 00:09:35,850
about that conference that data is going

00:09:34,120 --> 00:09:39,339
into a fire hose and is being delivered

00:09:35,850 --> 00:09:42,310
Twitter's fire hose partners right now

00:09:39,339 --> 00:09:44,019
it takes typically less than a second

00:09:42,310 --> 00:09:46,329
for when you press send on your Twitter

00:09:44,019 --> 00:09:51,670
button for reaching the fire hose

00:09:46,329 --> 00:09:53,589
partners to process real time the other

00:09:51,670 --> 00:09:55,740
point about a fire hose is you consume

00:09:53,589 --> 00:09:58,839
it you connect to it and data flows

00:09:55,740 --> 00:10:00,250
you're not going on a schedule you're

00:09:58,839 --> 00:10:02,680
not having to remember to go back and

00:10:00,250 --> 00:10:05,050
you've got polling with time outs etc to

00:10:02,680 --> 00:10:06,550
deal with outages the data is flowing

00:10:05,050 --> 00:10:09,339
and you've got to be johnny on the spot

00:10:06,550 --> 00:10:12,100
for it because there's no respite for

00:10:09,339 --> 00:10:15,310
this data it comes in every second of

00:10:12,100 --> 00:10:18,040
every day there's no second chance with

00:10:15,310 --> 00:10:19,750
fire hoses if you're connected to a fire

00:10:18,040 --> 00:10:21,670
hose and you can't keep up with the data

00:10:19,750 --> 00:10:23,560
coming through you're going to miss that

00:10:21,670 --> 00:10:27,459
data and it's gone forever you can't get

00:10:23,560 --> 00:10:29,949
it back with a fire hose so yeah with

00:10:27,459 --> 00:10:33,370
when you work consuming fire hoses you

00:10:29,949 --> 00:10:34,899
need extreme reliability and you've got

00:10:33,370 --> 00:10:38,920
to be able to scale to cope with the

00:10:34,899 --> 00:10:42,449
data BHP's perfect for that i'm going to

00:10:38,920 --> 00:10:44,829
show you why first of all when i say

00:10:42,449 --> 00:10:47,260
you've got to keep up with us here's

00:10:44,829 --> 00:10:50,079
some data from twitter this is on their

00:10:47,260 --> 00:10:52,269
engineering blog and it shows you want

00:10:50,079 --> 00:10:55,329
their largest peak last year so this

00:10:52,269 --> 00:10:57,639
happened on the third of august you

00:10:55,329 --> 00:11:00,779
probably can't see from the back but

00:10:57,639 --> 00:11:06,040
this goes from ooh what's that about

00:11:00,779 --> 00:11:11,470
15,000 a second all the way up to 104

00:11:06,040 --> 00:11:14,290
he three thousand tweets a second as 25

00:11:11,470 --> 00:11:15,940
times increasing traffic just like that

00:11:14,290 --> 00:11:18,699
no warning no one could know it was

00:11:15,940 --> 00:11:21,480
coming no time to plan for it it just

00:11:18,699 --> 00:11:25,329
happened that's what fire hoses can do

00:11:21,480 --> 00:11:27,490
because they're relentless in a typical

00:11:25,329 --> 00:11:30,339
day according to twitter zone public

00:11:27,490 --> 00:11:34,029
data over more than 500 million tweets

00:11:30,339 --> 00:11:35,709
are published via the fire hose that's a

00:11:34,029 --> 00:11:38,829
working average of five thousand seven

00:11:35,709 --> 00:11:40,449
hundred tweets per second all this

00:11:38,829 --> 00:11:44,290
informations on Twitter's engineering

00:11:40,449 --> 00:11:47,019
blog this is about a show called castle

00:11:44,290 --> 00:11:48,940
in the sky which was shown in Japan do

00:11:47,019 --> 00:11:51,459
go google it do go read about it it

00:11:48,940 --> 00:11:54,040
gives you a good idea for what fire host

00:11:51,459 --> 00:11:55,930
scale means and this is just one of the

00:11:54,040 --> 00:12:01,329
fire hoses we have a data set where I

00:11:55,930 --> 00:12:03,550
work so fire hoses feel like this it

00:12:01,329 --> 00:12:07,360
feels like the thunder of the Niagara

00:12:03,550 --> 00:12:10,620
Falls constant pressure coming over and

00:12:07,360 --> 00:12:10,620
you've got to be able to keep up with it

00:12:10,709 --> 00:12:16,360
PHP can do this one hundred percent of

00:12:14,589 --> 00:12:20,399
all the fire hose data that comes into

00:12:16,360 --> 00:12:22,839
our business is processed by PHP code

00:12:20,399 --> 00:12:25,860
every single piece of data that comes in

00:12:22,839 --> 00:12:30,670
via fire hose goes through our PHP code

00:12:25,860 --> 00:12:35,260
so if anyone says PHP can't do XYZ we

00:12:30,670 --> 00:12:37,540
know it can because we're doing it so

00:12:35,260 --> 00:12:41,740
how do we do that let's go and have a

00:12:37,540 --> 00:12:45,279
look let's look at first of all how we

00:12:41,740 --> 00:12:47,949
receive the fire hose because that's the

00:12:45,279 --> 00:12:49,240
first thing we do with our PHP code so

00:12:47,949 --> 00:12:51,910
here's an architecture diagram very

00:12:49,240 --> 00:12:54,490
simple now the key to this box is in

00:12:51,910 --> 00:12:55,930
blue like that I don't need you can see

00:12:54,490 --> 00:12:59,649
the laser pointer out there I hope you

00:12:55,930 --> 00:13:02,139
can boxes in blue are PHP code the boxes

00:12:59,649 --> 00:13:05,800
in orange on this particular diagram are

00:13:02,139 --> 00:13:09,490
written in C++ and the boxes in red are

00:13:05,800 --> 00:13:11,199
data sources their fire hoses so we get

00:13:09,490 --> 00:13:15,310
two types of fire hose in our in our

00:13:11,199 --> 00:13:17,050
business typically we get very high

00:13:15,310 --> 00:13:17,920
volume fire hoses and then we get

00:13:17,050 --> 00:13:20,800
smaller

00:13:17,920 --> 00:13:23,079
fire hoses because no two fire hoses are

00:13:20,800 --> 00:13:26,589
ever alike for the really high volume

00:13:23,079 --> 00:13:28,060
fire hoses we have a custom app in C++

00:13:26,589 --> 00:13:32,500
called goblin just to keep up with the

00:13:28,060 --> 00:13:34,329
flow of data coming through it lives in

00:13:32,500 --> 00:13:37,720
within the states in a data center very

00:13:34,329 --> 00:13:39,459
close to our upstream partners and it's

00:13:37,720 --> 00:13:41,019
got internal store forward buffers to

00:13:39,459 --> 00:13:46,720
smooth out Peaks like we saw in the

00:13:41,019 --> 00:13:48,730
earlier graph and we use this to help us

00:13:46,720 --> 00:13:51,459
cope with the very high volume fire

00:13:48,730 --> 00:13:53,470
hoses because you can only make one or

00:13:51,459 --> 00:13:55,209
two connections to these so you really

00:13:53,470 --> 00:13:56,649
need very tight fast code for this and

00:13:55,209 --> 00:13:58,889
that's where you need to move to a lower

00:13:56,649 --> 00:14:01,959
level language like C++ to achieve that

00:13:58,889 --> 00:14:04,079
but for the lower volume fire hoses PHP

00:14:01,959 --> 00:14:07,180
is fine it can keep up just fine and

00:14:04,079 --> 00:14:09,370
another reason for using PHP for this is

00:14:07,180 --> 00:14:11,199
every fire whose is unique it's got its

00:14:09,370 --> 00:14:13,600
own unique interface to interest to work

00:14:11,199 --> 00:14:15,279
with and when we start working with a

00:14:13,600 --> 00:14:18,310
partner we want to bring that fire hose

00:14:15,279 --> 00:14:20,829
on board as quickly as possible and PHP

00:14:18,310 --> 00:14:23,709
is a highly productive language you can

00:14:20,829 --> 00:14:26,709
get more done in PHP than in C++ in the

00:14:23,709 --> 00:14:28,540
same amount of time so PHP's are superb

00:14:26,709 --> 00:14:32,230
language for that it's much quicker to

00:14:28,540 --> 00:14:35,320
work with now together these two ways of

00:14:32,230 --> 00:14:37,810
loading here really map onto the extract

00:14:35,320 --> 00:14:41,380
phase of ETL how many people know what

00:14:37,810 --> 00:14:43,449
ETL is okay so as a few people done some

00:14:41,380 --> 00:14:45,850
data warehousing so ETL is extract

00:14:43,449 --> 00:14:49,000
transform load it's the process of

00:14:45,850 --> 00:14:51,040
taking data scrubbing it normalizing it

00:14:49,000 --> 00:14:53,980
and putting it into a data warehouse for

00:14:51,040 --> 00:14:56,230
searching and this maps onto the extract

00:14:53,980 --> 00:14:58,899
phase of ETL and for those of you have

00:14:56,230 --> 00:15:00,569
never heard of ETL i highly recommend go

00:14:58,899 --> 00:15:02,890
and have a look at data warehousing

00:15:00,569 --> 00:15:04,690
you'll find lots of architectural

00:15:02,890 --> 00:15:06,190
information that you can bring back to

00:15:04,690 --> 00:15:08,019
use to your own web apps and will help

00:15:06,190 --> 00:15:13,000
those scale as well it's well worth

00:15:08,019 --> 00:15:15,399
knowing about now all this data comes in

00:15:13,000 --> 00:15:18,250
to our interaction assembly application

00:15:15,399 --> 00:15:20,440
now what that application does is it

00:15:18,250 --> 00:15:22,600
takes the raw data upstream and

00:15:20,440 --> 00:15:24,160
restructures it into a normalized form

00:15:22,600 --> 00:15:27,819
so we're starting to get into the

00:15:24,160 --> 00:15:31,100
transform stage here of loading data so

00:15:27,819 --> 00:15:33,110
we take say a tweet or a bitly link

00:15:31,100 --> 00:15:36,080
we add our own additional information

00:15:33,110 --> 00:15:39,230
such as when we received it what the

00:15:36,080 --> 00:15:40,550
main content is it just gives a normal

00:15:39,230 --> 00:15:42,410
structure to help our customers

00:15:40,550 --> 00:15:46,190
understand the data we're about to

00:15:42,410 --> 00:15:47,960
deliver to them and then what we want to

00:15:46,190 --> 00:15:50,210
do is we want to add value to that data

00:15:47,960 --> 00:15:52,280
upstream and the game this is where PHP

00:15:50,210 --> 00:15:54,170
is great for this the first thing we do

00:15:52,280 --> 00:15:56,510
we're going to look for URLs are there

00:15:54,170 --> 00:15:58,730
any urls in the data and if so we want

00:15:56,510 --> 00:16:01,100
to go and expand those and find out what

00:15:58,730 --> 00:16:03,260
the where the URL really goes to so deal

00:16:01,100 --> 00:16:05,900
with any URL shorteners find out the

00:16:03,260 --> 00:16:08,180
title of the webpage find out the meta

00:16:05,900 --> 00:16:10,040
tag the keywords from there we want to

00:16:08,180 --> 00:16:11,480
find those out we want to add those to

00:16:10,040 --> 00:16:13,820
the original data we want to add value

00:16:11,480 --> 00:16:16,430
because the fire hose is valuable it's

00:16:13,820 --> 00:16:18,920
big business these days but a fire hose

00:16:16,430 --> 00:16:22,610
plus for lack of a better phrase fire

00:16:18,920 --> 00:16:26,480
hose plus augmented data really helps

00:16:22,610 --> 00:16:28,790
customers find information quicker so we

00:16:26,480 --> 00:16:30,110
go and we go and expand those links and

00:16:28,790 --> 00:16:31,640
that was our original business that was

00:16:30,110 --> 00:16:34,850
tweet me we're going to come back to in

00:16:31,640 --> 00:16:36,110
a little bit if there's no link we just

00:16:34,850 --> 00:16:38,780
feed it straight into another store

00:16:36,110 --> 00:16:41,390
forward buffer to be added additional

00:16:38,780 --> 00:16:43,340
data we do things like language

00:16:41,390 --> 00:16:45,560
detection what language is the person

00:16:43,340 --> 00:16:47,870
writing in so on Twitter profile might

00:16:45,560 --> 00:16:50,630
say what language they said is their

00:16:47,870 --> 00:16:51,920
native language but as usually go

00:16:50,630 --> 00:16:54,590
through tweets there's people use

00:16:51,920 --> 00:16:55,880
different languages all the time so

00:16:54,590 --> 00:17:00,020
you've got to look on it a case-by-case

00:16:55,880 --> 00:17:01,490
basis gender detection yeah who is the

00:17:00,020 --> 00:17:03,290
person who's tweeting or they may or

00:17:01,490 --> 00:17:06,650
they female do they consider themselves

00:17:03,290 --> 00:17:08,180
one of the alternatives what's the

00:17:06,650 --> 00:17:10,100
sentiment of that of the of the

00:17:08,180 --> 00:17:12,350
information they've just sent are they

00:17:10,100 --> 00:17:13,790
happy are they sad you know the same PHP

00:17:12,350 --> 00:17:15,650
UK's great they're saying the coffee

00:17:13,790 --> 00:17:19,490
downstairs was wonderful things like

00:17:15,650 --> 00:17:21,050
that very useful we go and try and

00:17:19,490 --> 00:17:24,050
extract topics we try and make sense of

00:17:21,050 --> 00:17:26,900
this this is based on a Wikipedia

00:17:24,050 --> 00:17:28,250
database and we try and go right are

00:17:26,900 --> 00:17:30,020
they tweeting about conferences of the

00:17:28,250 --> 00:17:31,700
teacher that treat tweeting about

00:17:30,020 --> 00:17:33,590
programming languages that sort of thing

00:17:31,700 --> 00:17:36,370
as well we're enhancing the original

00:17:33,590 --> 00:17:39,440
data doing all of this using PHP and

00:17:36,370 --> 00:17:41,870
these are all these are all HTTP request

00:17:39,440 --> 00:17:44,240
reply services with a lot of cashing in

00:17:41,870 --> 00:17:45,860
because we've got real time products so

00:17:44,240 --> 00:17:49,309
we've got to make things really really

00:17:45,860 --> 00:17:52,100
quick and then finally at the very end

00:17:49,309 --> 00:17:53,809
we dispatched the data out to our dare

00:17:52,100 --> 00:17:56,570
various pipelines for further processing

00:17:53,809 --> 00:17:58,460
once we built the data so this is our

00:17:56,570 --> 00:18:01,760
transform stage so we've got extraction

00:17:58,460 --> 00:18:06,830
we've got transformation and this is all

00:18:01,760 --> 00:18:11,270
done using PHP every piece of data goes

00:18:06,830 --> 00:18:12,800
through this done using PHP so what's

00:18:11,270 --> 00:18:14,300
our PHP apps look like which I imagine

00:18:12,800 --> 00:18:16,730
is real thing you want to hear from me

00:18:14,300 --> 00:18:19,280
so let's go into our architecture and

00:18:16,730 --> 00:18:20,750
internally we have a pattern a design

00:18:19,280 --> 00:18:25,880
pattern if you like that we call the job

00:18:20,750 --> 00:18:28,040
queue first thing to say about this is

00:18:25,880 --> 00:18:29,840
all our code runs on Linux doesn't run

00:18:28,040 --> 00:18:32,000
on windows at all so things like

00:18:29,840 --> 00:18:34,429
supervisor d there's these are learnt

00:18:32,000 --> 00:18:38,150
specific tools they're really handy for

00:18:34,429 --> 00:18:40,580
this so first of all the supervisor DS

00:18:38,150 --> 00:18:42,770
job is to make sure our process is

00:18:40,580 --> 00:18:46,370
running at all so it fires off and

00:18:42,770 --> 00:18:50,450
manager process it's a single UNIX

00:18:46,370 --> 00:18:52,580
process its job is to load the config

00:18:50,450 --> 00:18:54,590
for that particular application off disk

00:18:52,580 --> 00:18:58,340
our configs are just a straightforward

00:18:54,590 --> 00:19:00,830
JSON file we there's no xml there's no

00:18:58,340 --> 00:19:03,190
containers no service discovery of any

00:19:00,830 --> 00:19:05,720
kind it's just straight loaded up our

00:19:03,190 --> 00:19:08,360
configs are managed by chef we do all

00:19:05,720 --> 00:19:10,730
our deployments in production by chef so

00:19:08,360 --> 00:19:13,940
the app ships the code our ops team

00:19:10,730 --> 00:19:15,590
build the config in chef writes it to

00:19:13,940 --> 00:19:18,860
disk as a JSON file that the manager

00:19:15,590 --> 00:19:21,290
loads now the manager starts a pool of

00:19:18,860 --> 00:19:24,710
workers this is a bit like php-fpm you

00:19:21,290 --> 00:19:27,500
could argue it knows how many workers

00:19:24,710 --> 00:19:28,880
should run for that app it knows keeps

00:19:27,500 --> 00:19:30,980
an eye on them as well so if any of them

00:19:28,880 --> 00:19:33,050
stopped working for any reason it knows

00:19:30,980 --> 00:19:34,730
to kill it off and restart it so there's

00:19:33,050 --> 00:19:36,170
a keepalive service going along here

00:19:34,730 --> 00:19:38,420
which is something we've built into the

00:19:36,170 --> 00:19:39,860
app and this is very important because

00:19:38,420 --> 00:19:42,530
if you're processing data in real time

00:19:39,860 --> 00:19:44,420
and for some reason one of your you've

00:19:42,530 --> 00:19:46,700
got a bad loop in your code for example

00:19:44,420 --> 00:19:49,160
and your app stops responding you've got

00:19:46,700 --> 00:19:50,330
to be there straightaway to kill it and

00:19:49,160 --> 00:19:53,210
restart it you've got to have these

00:19:50,330 --> 00:19:54,920
mechanisms automated and we do that we

00:19:53,210 --> 00:19:57,360
manage all that through PHP

00:19:54,920 --> 00:19:58,710
the other thing the manager knows to do

00:19:57,360 --> 00:20:00,540
and every reason you need a manager is

00:19:58,710 --> 00:20:02,700
we need to be able to shut down these

00:20:00,540 --> 00:20:03,930
workers we want to do a code upgrade

00:20:02,700 --> 00:20:06,300
because these workers run for a long

00:20:03,930 --> 00:20:08,880
time it's not like a web request whether

00:20:06,300 --> 00:20:10,230
your script runs you serve the data back

00:20:08,880 --> 00:20:12,300
to the customer the script shuts down

00:20:10,230 --> 00:20:14,880
these are long running jobs these can

00:20:12,300 --> 00:20:17,250
run for weeks months at a time depending

00:20:14,880 --> 00:20:18,930
on how many releases we're doing so the

00:20:17,250 --> 00:20:21,360
manager needs to keep an eye on this and

00:20:18,930 --> 00:20:23,010
go at stopped working need to restart it

00:20:21,360 --> 00:20:24,780
and when it's time for an upgrade it

00:20:23,010 --> 00:20:26,790
needs to go let's shut it down so all

00:20:24,780 --> 00:20:28,860
the buffers with all the data in are

00:20:26,790 --> 00:20:31,010
drained first so there's no data in

00:20:28,860 --> 00:20:33,180
memory when we shut the process down

00:20:31,010 --> 00:20:35,190
because we've that's because that causes

00:20:33,180 --> 00:20:38,550
data loss we don't want any data loss at

00:20:35,190 --> 00:20:40,770
all now the workers they're part of a

00:20:38,550 --> 00:20:42,780
pipeline they're taking data from

00:20:40,770 --> 00:20:45,000
somewhere upstream they don't care what

00:20:42,780 --> 00:20:47,640
it is it's just as mq socket for them

00:20:45,000 --> 00:20:50,160
they read the data in they perform their

00:20:47,640 --> 00:20:51,930
activity their task and they write

00:20:50,160 --> 00:20:53,700
whatever the data is they've transformed

00:20:51,930 --> 00:20:55,980
back out of whatever's next in the

00:20:53,700 --> 00:20:57,240
pipeline they don't know what's in van

00:20:55,980 --> 00:20:59,820
in front they don't know what's behind

00:20:57,240 --> 00:21:03,330
they don't need to know all these

00:20:59,820 --> 00:21:05,130
components are isolated it means we've

00:21:03,330 --> 00:21:06,480
got a very flexible architecture we can

00:21:05,130 --> 00:21:08,220
easily change the shape of our

00:21:06,480 --> 00:21:10,110
architecture you can add new processing

00:21:08,220 --> 00:21:12,060
we can slim things down even if needed

00:21:10,110 --> 00:21:15,180
without affecting anything else in the

00:21:12,060 --> 00:21:16,950
pipeline now pipeline architectures have

00:21:15,180 --> 00:21:20,870
been around for decades the most famous

00:21:16,950 --> 00:21:23,730
example is unix system five streams

00:21:20,870 --> 00:21:27,750
anyone here worked on system five back

00:21:23,730 --> 00:21:30,570
in the day nope so the guys at bell labs

00:21:27,750 --> 00:21:33,030
came AT&T they were looking at a new way

00:21:30,570 --> 00:21:36,450
to do device drivers and a device driver

00:21:33,030 --> 00:21:37,530
back then before you had like frame

00:21:36,450 --> 00:21:40,830
buffers and all the stuff with modern

00:21:37,530 --> 00:21:42,480
GPUs they were basically data processing

00:21:40,830 --> 00:21:44,190
devices you sent data to them they did

00:21:42,480 --> 00:21:45,780
something with it and the device would

00:21:44,190 --> 00:21:48,120
also send data back for example when you

00:21:45,780 --> 00:21:49,560
move a mouse so the AT&T guys were

00:21:48,120 --> 00:21:51,690
looking at how to solve this and they

00:21:49,560 --> 00:21:54,660
decided to build their device drivers as

00:21:51,690 --> 00:22:00,660
a net of pipelines now this was back in

00:21:54,660 --> 00:22:03,150
the 80s dennis ritchie the rnk and

00:22:00,660 --> 00:22:05,640
Arthur Lance ansi c for new programs in

00:22:03,150 --> 00:22:07,560
c he's credited as one lead authors on

00:22:05,640 --> 00:22:08,770
this and they built all this stuff to

00:22:07,560 --> 00:22:10,660
build a whole operating system

00:22:08,770 --> 00:22:12,760
it worked on this and the reason you've

00:22:10,660 --> 00:22:14,740
not heard of system five it was too slow

00:22:12,760 --> 00:22:16,240
back then didn't have the computing

00:22:14,740 --> 00:22:18,850
power you've got today to do the

00:22:16,240 --> 00:22:21,850
architecture but today you're computing

00:22:18,850 --> 00:22:23,770
power is so readily available especially

00:22:21,850 --> 00:22:26,410
last week when intel finally announced

00:22:23,770 --> 00:22:28,810
the new 15 Corps xeon processors you can

00:22:26,410 --> 00:22:31,470
do so much with hardware today but makes

00:22:28,810 --> 00:22:34,510
these patterns from the 70s and the 80s

00:22:31,470 --> 00:22:35,920
reusable now and anytime you're looking

00:22:34,510 --> 00:22:37,540
to solve a problem first thing you

00:22:35,920 --> 00:22:40,330
should do is go back to the 70s and 80s

00:22:37,540 --> 00:22:42,850
and see whether or not someone had

00:22:40,330 --> 00:22:45,040
already solved it then chances are they

00:22:42,850 --> 00:22:49,060
did and it's just a pattern waiting for

00:22:45,040 --> 00:22:50,680
its time pipelines is one of those now

00:22:49,060 --> 00:22:53,410
this whole process is very simple very

00:22:50,680 --> 00:22:54,460
lightweight in fact i'll give you a tip

00:22:53,410 --> 00:22:57,610
if you're ever interested in joining

00:22:54,460 --> 00:22:59,440
DataSift this is one of our interview

00:22:57,610 --> 00:23:00,880
questions we ask people to come in and

00:22:59,440 --> 00:23:03,040
we ask them to write a lot of code so we

00:23:00,880 --> 00:23:04,330
can see that they can code so i'm giving

00:23:03,040 --> 00:23:05,920
you a little bit the heads up here so

00:23:04,330 --> 00:23:07,270
everyone hasn't come to this talk you

00:23:05,920 --> 00:23:09,220
have a little advantage over them if you

00:23:07,270 --> 00:23:10,810
ever want to work for us is we actually

00:23:09,220 --> 00:23:12,880
ask people to actually create their

00:23:10,810 --> 00:23:15,730
version of this framework from scratch

00:23:12,880 --> 00:23:19,980
and see how they would solve it okay

00:23:15,730 --> 00:23:22,930
that's what we do right so that's how we

00:23:19,980 --> 00:23:28,120
receive data and how our apps are

00:23:22,930 --> 00:23:30,580
structured to achieve luck the any thing

00:23:28,120 --> 00:23:32,890
we do is we deliver the hose once we

00:23:30,580 --> 00:23:35,470
filtered it I'm not going to talk about

00:23:32,890 --> 00:23:38,770
how we filter the hose here because we

00:23:35,470 --> 00:23:43,570
don't use any PHP for that we c plus

00:23:38,770 --> 00:23:44,680
plus we need extreme performance so

00:23:43,570 --> 00:23:47,110
extreme in fact that we're actually

00:23:44,680 --> 00:23:49,870
looking to port arco to run on GPUs to

00:23:47,110 --> 00:23:52,840
get even more parallelism and we also

00:23:49,870 --> 00:23:56,020
need really really good Unicode handling

00:23:52,840 --> 00:23:58,660
and Unicode is an unfinished story with

00:23:56,020 --> 00:24:00,850
PHP I think it's fair to say but still

00:23:58,660 --> 00:24:03,400
work to be done there forget PHP really

00:24:00,850 --> 00:24:06,130
good at unicode so for now for

00:24:03,400 --> 00:24:07,870
processing PHP is not used for that but

00:24:06,130 --> 00:24:10,900
once we once we've taken that data and

00:24:07,870 --> 00:24:12,640
we filtered it to isolate the data our

00:24:10,900 --> 00:24:14,890
customers want we need to deliver it to

00:24:12,640 --> 00:24:18,670
our customers and that's the second area

00:24:14,890 --> 00:24:20,160
where we use PHP and we call this the

00:24:18,670 --> 00:24:22,890
filtered hose

00:24:20,160 --> 00:24:25,050
so it's smaller than a fire hose but the

00:24:22,890 --> 00:24:26,490
thousands of them in parallel so they

00:24:25,050 --> 00:24:27,720
all add up together and I'll show you

00:24:26,490 --> 00:24:29,940
some numbers in a little bit to show you

00:24:27,720 --> 00:24:31,950
just how much they add up and here's our

00:24:29,940 --> 00:24:36,920
architecture for how we use PHP for that

00:24:31,950 --> 00:24:39,510
so once again same scheme blue boxes PHP

00:24:36,920 --> 00:24:43,320
orange boxes are something else in this

00:24:39,510 --> 00:24:47,640
case a mixture of c++ and JVM languages

00:24:43,320 --> 00:24:50,460
some java and some scholar as well now

00:24:47,640 --> 00:24:52,080
the first thing we do is data from the

00:24:50,460 --> 00:24:53,640
filtered hose comes in as to our

00:24:52,080 --> 00:24:55,770
security mechanism which is our access

00:24:53,640 --> 00:24:58,110
controller which make sure the customers

00:24:55,770 --> 00:25:00,930
authorized to receive the data that has

00:24:58,110 --> 00:25:03,690
been selected for them and then we put

00:25:00,930 --> 00:25:08,490
it viral push producer into Kafka anyone

00:25:03,690 --> 00:25:10,440
here use katica a few people so kefka is

00:25:08,490 --> 00:25:12,810
another storm forward buffer but allows

00:25:10,440 --> 00:25:15,930
you to have thousands of separate

00:25:12,810 --> 00:25:17,790
buffers in parallel on disk it's written

00:25:15,930 --> 00:25:21,330
in Java it's an Apache project i believe

00:25:17,790 --> 00:25:24,900
and it's very very good at doing this so

00:25:21,330 --> 00:25:27,780
we store this data into Kafka now we

00:25:24,900 --> 00:25:29,430
then need to find a new stream comes

00:25:27,780 --> 00:25:31,110
along for a customer we need to find it

00:25:29,430 --> 00:25:33,900
so we've got an app called push

00:25:31,110 --> 00:25:35,280
scheduler written in PHP that says okay

00:25:33,900 --> 00:25:36,630
tell me what new streams there are it

00:25:35,280 --> 00:25:40,920
discovers the new streams to be

00:25:36,630 --> 00:25:42,930
delivered it manages a pool of workers

00:25:40,920 --> 00:25:45,870
so again we've got the manager and the

00:25:42,930 --> 00:25:47,930
worker pattern repeated here this is

00:25:45,870 --> 00:25:52,530
this is another example of it being used

00:25:47,930 --> 00:25:54,540
the workers jobs they take the data from

00:25:52,530 --> 00:25:57,030
Kafka so they're told to deliver one

00:25:54,540 --> 00:25:59,250
stream they go and get that stream of

00:25:57,030 --> 00:26:01,950
data for that customer so they're

00:25:59,250 --> 00:26:04,650
reading it from Kafka and then they go

00:26:01,950 --> 00:26:07,650
and connect the customer servers they

00:26:04,650 --> 00:26:09,270
log into customer systems and put the

00:26:07,650 --> 00:26:13,410
data directly into the customers

00:26:09,270 --> 00:26:15,600
database into their applications and

00:26:13,410 --> 00:26:17,820
this is something PHP superb Lee gutter

00:26:15,600 --> 00:26:19,470
and when I say we log into customers

00:26:17,820 --> 00:26:23,180
applications we're delivering data to

00:26:19,470 --> 00:26:27,900
places like Google bigquery CouchDB

00:26:23,180 --> 00:26:31,050
Amazon's DynamoDB elasticsearch we've

00:26:27,900 --> 00:26:34,060
got a ftp support we can post it via

00:26:31,050 --> 00:26:37,450
HTTP we've got MongoDB support

00:26:34,060 --> 00:26:40,600
keep Derek happy mysql we support

00:26:37,450 --> 00:26:43,990
postgres as well redis Redis is really

00:26:40,600 --> 00:26:45,280
good redis is a great thing to go to

00:26:43,990 --> 00:26:47,260
when you've got any sort of queuing

00:26:45,280 --> 00:26:49,390
problem to solve really recommend Redis

00:26:47,260 --> 00:26:52,060
we can deliver Datone times and s3

00:26:49,390 --> 00:26:54,700
buckets we support various mechanisms

00:26:52,060 --> 00:26:56,020
for splunk which is enterprise log tool

00:26:54,700 --> 00:26:58,030
which is starting to branch out into

00:26:56,020 --> 00:26:59,410
other things and something called zoom

00:26:58,030 --> 00:27:00,550
data which I have to be honest and say I

00:26:59,410 --> 00:27:03,820
don't know what it is but it is on our

00:27:00,550 --> 00:27:07,540
website I've never used it myself so I

00:27:03,820 --> 00:27:08,590
don't know what it is and not some

00:27:07,540 --> 00:27:09,640
customers are you know they've got a

00:27:08,590 --> 00:27:11,560
firewall they're not going to open

00:27:09,640 --> 00:27:14,230
firewall ports for us to inject data

00:27:11,560 --> 00:27:15,760
into their apps so we also have a pool

00:27:14,230 --> 00:27:17,890
mechanism as well where they can connect

00:27:15,760 --> 00:27:19,990
to to our PHP code and say right give me

00:27:17,890 --> 00:27:21,820
the last 50 pull that down then connect

00:27:19,990 --> 00:27:24,280
again give me the last 50 for example as

00:27:21,820 --> 00:27:26,200
well and pull that down as well the

00:27:24,280 --> 00:27:28,120
whole point here is we're using PHP to

00:27:26,200 --> 00:27:30,670
make it as easy as possible for

00:27:28,120 --> 00:27:31,870
customers to use our apps we can link

00:27:30,670 --> 00:27:34,290
this back to joe's keynote this morning

00:27:31,870 --> 00:27:37,390
we're saying about overcoming barriers

00:27:34,290 --> 00:27:41,110
so receiving a fire hose is difficult it

00:27:37,390 --> 00:27:44,770
requires very reliable code very very

00:27:41,110 --> 00:27:46,570
fast code a filtered hose is smaller

00:27:44,770 --> 00:27:47,740
than a fire hose but for a customer it's

00:27:46,570 --> 00:27:49,630
probably still the biggest stream of

00:27:47,740 --> 00:27:51,880
data they've ever seen and they probably

00:27:49,630 --> 00:27:53,500
don't have those in how skills to do

00:27:51,880 --> 00:27:55,420
that especially as the use of these

00:27:53,500 --> 00:27:58,510
streams grow and they start to get more

00:27:55,420 --> 00:28:01,030
and more data so what we've done here is

00:27:58,510 --> 00:28:03,760
we've reached out to our customers and

00:28:01,030 --> 00:28:06,580
learn how to put data into their systems

00:28:03,760 --> 00:28:07,660
so the date is just there they're just

00:28:06,580 --> 00:28:09,580
as far as they're concerned the data

00:28:07,660 --> 00:28:12,220
just appears in MySQL they don't need to

00:28:09,580 --> 00:28:14,590
worry about how it gets there it makes

00:28:12,220 --> 00:28:18,250
life easy for customers and PHP is a key

00:28:14,590 --> 00:28:20,790
part of achieving this so this part of

00:28:18,250 --> 00:28:22,840
the architecture is the load part of ETL

00:28:20,790 --> 00:28:24,340
only we're not loading it into our own

00:28:22,840 --> 00:28:26,800
databases we're loading it into our

00:28:24,340 --> 00:28:30,520
customers but it's still the same

00:28:26,800 --> 00:28:36,580
pattern etl data warehousing definitely

00:28:30,520 --> 00:28:38,440
go learn it now some numbers we are

00:28:36,580 --> 00:28:42,730
delivering across all our customers more

00:28:38,440 --> 00:28:44,620
than one fire hose of data so every

00:28:42,730 --> 00:28:47,290
second with this is the amount of data

00:28:44,620 --> 00:28:48,090
that's going out to our customers via

00:28:47,290 --> 00:28:50,850
the spies

00:28:48,090 --> 00:28:52,289
by this PHP code every single second

00:28:50,850 --> 00:28:56,760
we're delivering more than one fire hose

00:28:52,289 --> 00:29:00,179
and it's all this mechanism is all going

00:28:56,760 --> 00:29:01,590
through our PHP code for this and again

00:29:00,179 --> 00:29:03,450
we're talking performance we're talking

00:29:01,590 --> 00:29:06,270
reliability and we're also talking

00:29:03,450 --> 00:29:07,710
connectivity as well on the reasons one

00:29:06,270 --> 00:29:08,610
of the reasons we use PHP for this is

00:29:07,710 --> 00:29:11,610
because it can talk to just about

00:29:08,610 --> 00:29:14,190
everything that matters and quite a lot

00:29:11,610 --> 00:29:16,320
of neat stuff as well it's superb for

00:29:14,190 --> 00:29:18,360
that if you're using another language

00:29:16,320 --> 00:29:20,190
you get the core language then you've

00:29:18,360 --> 00:29:21,450
got to go find all the different drivers

00:29:20,190 --> 00:29:22,620
and libraries for it and you've got to

00:29:21,450 --> 00:29:25,399
download though you've got to track

00:29:22,620 --> 00:29:28,260
changes for those it's a lot of work

00:29:25,399 --> 00:29:30,029
with PHP you can just use the extension

00:29:28,260 --> 00:29:33,830
as I ship with PHP and you can talk to

00:29:30,029 --> 00:29:37,470
most things so really is superb for that

00:29:33,830 --> 00:29:39,289
another number art peak for delivering

00:29:37,470 --> 00:29:43,320
to customers is more than two fire hoses

00:29:39,289 --> 00:29:45,090
at a time the equivalent of that and

00:29:43,320 --> 00:29:47,779
again we're doing that with PHP we just

00:29:45,090 --> 00:29:49,799
scale up it's not a problem at all

00:29:47,779 --> 00:29:52,440
another architecture I showed you

00:29:49,799 --> 00:29:53,700
earlier it scales because it's a share

00:29:52,440 --> 00:29:55,980
knotting architecture there's no

00:29:53,700 --> 00:29:57,539
databases in there we've got a cute

00:29:55,980 --> 00:29:59,909
we've got more we've got a store forward

00:29:57,539 --> 00:30:01,380
buffers they don't care who's reading

00:29:59,909 --> 00:30:02,970
the data then you know he's writing the

00:30:01,380 --> 00:30:05,070
data they just there to accept the data

00:30:02,970 --> 00:30:07,919
store it until our PHP codes ready to

00:30:05,070 --> 00:30:11,669
pull it off and deliver it no databases

00:30:07,919 --> 00:30:13,529
no application servers nothing that

00:30:11,669 --> 00:30:16,500
other communities take for granted in

00:30:13,529 --> 00:30:18,299
their design patterns none of that PHP

00:30:16,500 --> 00:30:20,039
mentality is to do away with all that

00:30:18,299 --> 00:30:24,929
guff and just go down to the bare

00:30:20,039 --> 00:30:26,850
essentials it's really good for that now

00:30:24,929 --> 00:30:29,460
I have another reason for doing this

00:30:26,850 --> 00:30:33,539
talk and that's why I will inspire

00:30:29,460 --> 00:30:36,240
people here our engineering team is

00:30:33,539 --> 00:30:38,610
British based here in Britain was

00:30:36,240 --> 00:30:41,580
founded in Britain we're now

00:30:38,610 --> 00:30:43,140
multinational company but you don't have

00:30:41,580 --> 00:30:46,380
to go to the valley to do this kind of

00:30:43,140 --> 00:30:48,630
engineering and you don't have to use

00:30:46,380 --> 00:30:51,630
trendy languages to do this kind of

00:30:48,630 --> 00:30:54,510
engineering we're a British engineering

00:30:51,630 --> 00:30:57,080
company taking advantage of American

00:30:54,510 --> 00:30:59,730
Finance American business know-how and

00:30:57,080 --> 00:31:01,019
multiple international nationalities

00:30:59,730 --> 00:31:04,149
sorry from around the

00:31:01,019 --> 00:31:05,440
last count I think we've got oh we must

00:31:04,149 --> 00:31:08,500
be approaching now a dozen different

00:31:05,440 --> 00:31:12,789
nationalities in the company but you can

00:31:08,500 --> 00:31:16,149
do this here in the UK it can be done

00:31:12,789 --> 00:31:18,490
our founder Nick Halstead was on CNBC

00:31:16,149 --> 00:31:20,230
this week and being interviewed because

00:31:18,490 --> 00:31:22,000
one of the things he's announced is that

00:31:20,230 --> 00:31:24,690
before the end of the decade we're

00:31:22,000 --> 00:31:28,120
hoping to do a billion dollar flotation

00:31:24,690 --> 00:31:36,759
that's a big tech success story for the

00:31:28,120 --> 00:31:38,200
UK can be done here in the UK so let's

00:31:36,759 --> 00:31:44,139
look at where PHP fits in with

00:31:38,200 --> 00:31:47,620
everything else this is our architecture

00:31:44,139 --> 00:31:49,330
diagram it'll be easier to read when you

00:31:47,620 --> 00:31:51,190
download the slides later after the talk

00:31:49,330 --> 00:31:55,360
but I'll talk you through some of the

00:31:51,190 --> 00:31:57,669
key points of it so what I've

00:31:55,360 --> 00:32:00,159
highlighted here are the parts of our

00:31:57,669 --> 00:32:02,649
architecture that I've already talked

00:32:00,159 --> 00:32:06,610
about in my talk hopefully you can see

00:32:02,649 --> 00:32:09,429
the laser pointer so this is the extract

00:32:06,610 --> 00:32:13,929
and transform stages up here store

00:32:09,429 --> 00:32:17,950
forward buffers PHP code and this box

00:32:13,929 --> 00:32:19,750
here is our old business tweet me is now

00:32:17,950 --> 00:32:22,360
one box on this architecture diagram

00:32:19,750 --> 00:32:26,529
that's how much we've grown for able to

00:32:22,360 --> 00:32:28,750
process fire hoses down here is our

00:32:26,529 --> 00:32:31,000
delivery mechanism we've got the

00:32:28,750 --> 00:32:32,860
scheduler discovering our streams to

00:32:31,000 --> 00:32:34,690
deliver out to all of our customers via

00:32:32,860 --> 00:32:37,240
the different mechanisms so these

00:32:34,690 --> 00:32:39,399
purposes pink boxes they look pink on

00:32:37,240 --> 00:32:42,129
the download the slides I promise they

00:32:39,399 --> 00:32:45,490
are where our PHP code is inside our

00:32:42,129 --> 00:32:48,250
data processing pipeline as you can see

00:32:45,490 --> 00:32:51,730
those are two reasonably sized boxes on

00:32:48,250 --> 00:32:55,230
a much larger diagram we also have

00:32:51,730 --> 00:32:57,730
service oriented architecture as well

00:32:55,230 --> 00:32:59,169
and you're all missing the service

00:32:57,730 --> 00:33:01,809
architecture talk can order come see me

00:32:59,169 --> 00:33:04,059
so thank you very much and what we have

00:33:01,809 --> 00:33:06,460
here is lots of ones like point a gun I

00:33:04,059 --> 00:33:09,639
think the batteries just died right so

00:33:06,460 --> 00:33:12,340
what we've got here is lots of simple

00:33:09,639 --> 00:33:14,419
request reply services that support the

00:33:12,340 --> 00:33:16,070
main pipeline applications

00:33:14,419 --> 00:33:18,649
hitting with requests they give a

00:33:16,070 --> 00:33:20,330
response out PHP's superb for that I

00:33:18,649 --> 00:33:23,359
mean that's the hit last the story of

00:33:20,330 --> 00:33:25,369
the web and there's no reason to use a

00:33:23,359 --> 00:33:30,019
different language for that PHP really

00:33:25,369 --> 00:33:31,519
really good at that now our architecture

00:33:30,019 --> 00:33:33,499
duck does a lot more I've mentioned

00:33:31,519 --> 00:33:35,330
pipeline so I want it all I put mobis

00:33:33,499 --> 00:33:38,720
PHP in context and show you what our

00:33:35,330 --> 00:33:42,249
different pipelines are so here's our

00:33:38,720 --> 00:33:46,009
ingestion again and I've added in some

00:33:42,249 --> 00:33:47,509
non firehose data we get as well not

00:33:46,009 --> 00:33:49,129
everything's a firehose even we have to

00:33:47,509 --> 00:33:51,350
scrape at the minute which is why we all

00:33:49,129 --> 00:33:54,230
hate it so much because we've been doing

00:33:51,350 --> 00:33:56,600
it and from there what we have is a

00:33:54,230 --> 00:33:58,399
real-time pipeline where we're

00:33:56,600 --> 00:33:59,899
processing the data as it's coming in

00:33:58,399 --> 00:34:02,960
and delivering to customers within that

00:33:59,899 --> 00:34:04,309
one second out to our customers so

00:34:02,960 --> 00:34:05,989
that's through people like Twitter's

00:34:04,309 --> 00:34:07,909
infrastructure across the Atlantic to us

00:34:05,989 --> 00:34:10,639
through our infrastructure minimum of

00:34:07,909 --> 00:34:11,960
nine hops out to customers who are often

00:34:10,639 --> 00:34:15,349
back over the other side of the world

00:34:11,960 --> 00:34:17,450
back over the Arctic and we do all of

00:34:15,349 --> 00:34:20,960
that in about a second now we can't do

00:34:17,450 --> 00:34:24,589
that with pure PHP PHP is not built for

00:34:20,960 --> 00:34:27,500
extreme speed like that we have to use a

00:34:24,589 --> 00:34:30,679
lot of C++ to achieve that so this box

00:34:27,500 --> 00:34:33,369
in the middle Caramon there we go so

00:34:30,679 --> 00:34:36,290
this box in the middle here this is all

00:34:33,369 --> 00:34:39,829
C++ code this is our filtering engine

00:34:36,290 --> 00:34:41,929
and I believe we're running that on

00:34:39,829 --> 00:34:44,750
about 40 boxes at the minute in parallel

00:34:41,929 --> 00:34:46,339
in order to keep up with the data so

00:34:44,750 --> 00:34:48,950
this nose visit this knows what a

00:34:46,339 --> 00:34:51,260
customer wants and it filters the data

00:34:48,950 --> 00:34:53,720
to only patch through the data that

00:34:51,260 --> 00:34:55,819
matches the customers filters there's a

00:34:53,720 --> 00:34:58,849
phrase in big data it's not information

00:34:55,819 --> 00:35:01,609
overload it's filter failure filtering

00:34:58,849 --> 00:35:03,049
is how you take big data and find the

00:35:01,609 --> 00:35:05,119
bits that matter to you and make sense

00:35:03,049 --> 00:35:08,599
to you and we have to use C++ for that

00:35:05,119 --> 00:35:10,549
for the performance now we also have a

00:35:08,599 --> 00:35:13,130
historic product and this is where

00:35:10,549 --> 00:35:14,420
Hadoop comes in so a Dupin big data like

00:35:13,130 --> 00:35:18,010
joined at the hip heading time in one

00:35:14,420 --> 00:35:22,339
talks about it and yes we use Hadoop

00:35:18,010 --> 00:35:24,970
we've got a HDFS 160-200 machine

00:35:22,339 --> 00:35:28,040
something like that I've lost track or

00:35:24,970 --> 00:35:30,740
storing petabytes of data

00:35:28,040 --> 00:35:33,470
social data going back to January 2010

00:35:30,740 --> 00:35:35,330
and this is our historic product where

00:35:33,470 --> 00:35:38,030
people can come and search for things

00:35:35,330 --> 00:35:40,730
that have happened in the past so that's

00:35:38,030 --> 00:35:43,610
using a mixture of Java and other JVM

00:35:40,730 --> 00:35:45,530
languages and we've got the same C++

00:35:43,610 --> 00:35:48,620
processing engine embedded in the Java

00:35:45,530 --> 00:35:50,000
via J&I the Java native interface so

00:35:48,620 --> 00:35:52,070
we've got the same filtering engine in

00:35:50,000 --> 00:35:56,330
both pipelines to make sure the filters

00:35:52,070 --> 00:35:58,310
work exactly the same everywhere but

00:35:56,330 --> 00:36:01,460
that comes back down to our PHP system

00:35:58,310 --> 00:36:05,030
for delivery so none of the data can

00:36:01,460 --> 00:36:08,750
escape our PHP code we don't work around

00:36:05,030 --> 00:36:11,690
PHP it's at the heart of what we do is

00:36:08,750 --> 00:36:15,110
superb for it so let's summarize why we

00:36:11,690 --> 00:36:17,450
use PHP and hopefully there's a good

00:36:15,110 --> 00:36:19,550
examples that you can take back to your

00:36:17,450 --> 00:36:20,870
firm's if anyone's ever pressuring

00:36:19,550 --> 00:36:24,170
pressuring you to move away from PHP

00:36:20,870 --> 00:36:26,120
Java languages and if you want to post

00:36:24,170 --> 00:36:29,180
this for the internet trolls feel free

00:36:26,120 --> 00:36:31,130
and I personally they had bility and

00:36:29,180 --> 00:36:33,110
personally of the opinion you shouldn't

00:36:31,130 --> 00:36:36,560
feed the trolls but if you want so

00:36:33,110 --> 00:36:38,750
hopefully this will help we need to

00:36:36,560 --> 00:36:41,420
acknowledge that we use PHP first of all

00:36:38,750 --> 00:36:44,660
because of our history PHP was a

00:36:41,420 --> 00:36:46,520
language we knew before DataSift grew

00:36:44,660 --> 00:36:49,610
out of a business called tweetmeme which

00:36:46,520 --> 00:36:51,470
is the the retweet button I found a nick

00:36:49,610 --> 00:36:55,100
house that invented that we home and

00:36:51,470 --> 00:36:57,050
then led Twitter habit before that he

00:36:55,100 --> 00:36:59,240
was doing an RSS reader called favorite

00:36:57,050 --> 00:37:04,430
which is where Nick learn to love zend

00:36:59,240 --> 00:37:05,930
framework so much not before launch it

00:37:04,430 --> 00:37:07,880
was either the first or the second like

00:37:05,930 --> 00:37:11,540
programming language of every engineer

00:37:07,880 --> 00:37:12,980
on the team people we have some great

00:37:11,540 --> 00:37:15,560
Python programmers and great Java

00:37:12,980 --> 00:37:19,520
programmers but the one language that

00:37:15,560 --> 00:37:22,160
everybody knew was PHP it's a universal

00:37:19,520 --> 00:37:24,080
language it's so widely used these days

00:37:22,160 --> 00:37:26,180
in university is quite rare to find a

00:37:24,080 --> 00:37:29,210
graduate who hasn't done a PHP project

00:37:26,180 --> 00:37:30,680
during their course sure they've done

00:37:29,210 --> 00:37:32,630
Java as well they're probably done

00:37:30,680 --> 00:37:34,820
Python these days but just about every

00:37:32,630 --> 00:37:38,120
comp sci graduate would have done PHP at

00:37:34,820 --> 00:37:40,400
some point even if it's only wordpress

00:37:38,120 --> 00:37:41,080
for their own website they would have

00:37:40,400 --> 00:37:44,890
used

00:37:41,080 --> 00:37:48,400
PHP we already knew how to optimize and

00:37:44,890 --> 00:37:49,480
scale PHP for us PHP was no risk we knew

00:37:48,400 --> 00:37:51,310
what we were doing we knew how it

00:37:49,480 --> 00:37:55,090
behaved we knew what we had to do to

00:37:51,310 --> 00:37:56,740
make it fast for us using a different

00:37:55,090 --> 00:37:59,280
language which may or may not have been

00:37:56,740 --> 00:38:01,240
better would have been a bad choice

00:37:59,280 --> 00:38:03,490
because we'd have had to learn all these

00:38:01,240 --> 00:38:05,230
things again with PHP we had the

00:38:03,490 --> 00:38:06,520
experience as I mentioned at the start

00:38:05,230 --> 00:38:08,500
when it comes to web scale the

00:38:06,520 --> 00:38:10,180
informations out there there's books

00:38:08,500 --> 00:38:13,270
there's talks those conferences like

00:38:10,180 --> 00:38:17,860
this it's a solved problem for how to

00:38:13,270 --> 00:38:19,120
scale PHP it's nothing new and this is

00:38:17,860 --> 00:38:22,780
something I really want to emphasize is

00:38:19,120 --> 00:38:24,400
how well PHP works it's easy to take PHP

00:38:22,780 --> 00:38:27,490
for granted because it works so well

00:38:24,400 --> 00:38:29,920
until you switch to alternatives and

00:38:27,490 --> 00:38:34,620
then you start to appreciate what PH

00:38:29,920 --> 00:38:38,530
just how well PHP works it doesn't crash

00:38:34,620 --> 00:38:40,990
doesn't seg fault it really doesn't leak

00:38:38,530 --> 00:38:44,140
memory that much it doesn't have

00:38:40,990 --> 00:38:45,940
unpredictable garbage collection these

00:38:44,140 --> 00:38:48,760
are things on other languages and I'm

00:38:45,940 --> 00:38:50,320
not going to name any names here these

00:38:48,760 --> 00:38:53,020
are things are other languages these are

00:38:50,320 --> 00:38:57,040
test of languages cannot pass we're PHP

00:38:53,020 --> 00:38:58,450
does now this has a nice benefit it's so

00:38:57,040 --> 00:39:00,640
important this especially she's scaling

00:38:58,450 --> 00:39:03,790
your your server farm I mentioned we've

00:39:00,640 --> 00:39:05,020
got hundreds of servers our ops team if

00:39:03,790 --> 00:39:08,980
they woke up in the middle of the night

00:39:05,020 --> 00:39:12,670
it's not because PHP crashed sure we may

00:39:08,980 --> 00:39:13,930
write bad PHP code and that's our fault

00:39:12,670 --> 00:39:17,200
that's not the languages fault

00:39:13,930 --> 00:39:20,950
nevertheless fault but we don't get

00:39:17,200 --> 00:39:23,170
random crashes with PHP right as we do

00:39:20,950 --> 00:39:24,940
with some of the alternatives and keep

00:39:23,170 --> 00:39:26,020
your ops team happy it's very very

00:39:24,940 --> 00:39:27,670
important especially if you've got a

00:39:26,020 --> 00:39:29,650
deadline to hit and you want them to do

00:39:27,670 --> 00:39:30,910
a release and they're going well we had

00:39:29,650 --> 00:39:32,830
a crash for that last night you need to

00:39:30,910 --> 00:39:36,670
do some extra testing first it's not

00:39:32,830 --> 00:39:38,320
very good for your deadline now no j/s

00:39:36,670 --> 00:39:39,850
also deserves a mention here because

00:39:38,320 --> 00:39:41,800
it's another engine that comes close to

00:39:39,850 --> 00:39:44,080
this level of reliability we found I

00:39:41,800 --> 00:39:46,480
think our up time for one of our node

00:39:44,080 --> 00:39:50,970
apps is several months last time I

00:39:46,480 --> 00:39:50,970
checked which is very impressive

00:39:52,150 --> 00:39:59,329
fire hoses are unstructured data PHP

00:39:57,009 --> 00:40:01,640
handles and structured data better than

00:39:59,329 --> 00:40:06,650
just about any other language we've come

00:40:01,640 --> 00:40:09,199
across so far json decode you feed it a

00:40:06,650 --> 00:40:12,140
JSON encoded string out pops an object

00:40:09,199 --> 00:40:13,939
tree no schemas you don't have to know

00:40:12,140 --> 00:40:18,469
what's in there as long as it's valid

00:40:13,939 --> 00:40:21,019
JSON it decodes Jason decoders for other

00:40:18,469 --> 00:40:23,150
languages are often demanding of schemas

00:40:21,019 --> 00:40:25,579
before they will decode because they

00:40:23,150 --> 00:40:27,229
want to create types objects with PHP

00:40:25,579 --> 00:40:29,779
we've got a generic object or standard

00:40:27,229 --> 00:40:32,059
class json decode just produces a tree

00:40:29,779 --> 00:40:33,439
like that it's fantastic for the type of

00:40:32,059 --> 00:40:35,349
data we're working with the working with

00:40:33,439 --> 00:40:38,390
fire hoses it makes life a lot easier

00:40:35,349 --> 00:40:41,660
see we don't need types objects for big

00:40:38,390 --> 00:40:44,269
data they don't actually matter because

00:40:41,660 --> 00:40:46,579
the data itself doesn't have behavior

00:40:44,269 --> 00:40:48,890
it's the processes of the data that have

00:40:46,579 --> 00:40:53,719
behavior so you don't need to co-locate

00:40:48,890 --> 00:40:55,849
data and code all in one object when

00:40:53,719 --> 00:40:59,289
you're processing the data get me to do

00:40:55,849 --> 00:41:02,660
it and this has really helped to scale

00:40:59,289 --> 00:41:05,420
because everything's lean it's simple

00:41:02,660 --> 00:41:07,459
it's very straightforward allows us to

00:41:05,420 --> 00:41:10,189
take on new data sources relatively

00:41:07,459 --> 00:41:12,199
quickly and that's what and for us as a

00:41:10,189 --> 00:41:13,999
business that's the game we're in taking

00:41:12,199 --> 00:41:15,410
on data sources getting them out into

00:41:13,999 --> 00:41:18,859
the hands of customers as quickly as

00:41:15,410 --> 00:41:20,989
possible helps us scale our business so

00:41:18,859 --> 00:41:23,920
PHP isn't just good for a technology

00:41:20,989 --> 00:41:26,359
it's good for business as well for us

00:41:23,920 --> 00:41:28,579
let's talk about string handling in PHP

00:41:26,359 --> 00:41:30,319
because this is something else that's

00:41:28,579 --> 00:41:33,920
easy to overlook when you're dealing

00:41:30,319 --> 00:41:38,479
with PHP and Unicode data PHP treats

00:41:33,920 --> 00:41:39,890
strings as a block of binary data only

00:41:38,479 --> 00:41:41,949
when you look inside the string do you

00:41:39,890 --> 00:41:44,329
need to know whether it's utf-8 utf-16

00:41:41,949 --> 00:41:47,059
anything like that but if you're just

00:41:44,329 --> 00:41:48,709
copying data from one part of an object

00:41:47,059 --> 00:41:51,199
to another which is what are transformed

00:41:48,709 --> 00:41:53,959
stages PHP just copies the whole block

00:41:51,199 --> 00:41:56,749
it doesn't care what's inside there so

00:41:53,959 --> 00:41:58,640
we don't have to care about Unicode so

00:41:56,749 --> 00:42:01,479
we can take all the utf-8 encoded data

00:41:58,640 --> 00:42:02,760
that comes in lots of people tweet in

00:42:01,479 --> 00:42:06,120
non-latin

00:42:02,760 --> 00:42:08,820
languages lon non-latin scripts and we

00:42:06,120 --> 00:42:11,670
get data from other sources as well East

00:42:08,820 --> 00:42:13,800
Asian scripts so that's utf-8 encoded

00:42:11,670 --> 00:42:17,580
with utf-16 surrogate pairs that's the

00:42:13,800 --> 00:42:19,530
standard for jason encoding as i say we

00:42:17,580 --> 00:42:20,820
don't look inside the data for PHP we

00:42:19,530 --> 00:42:23,790
use C++ for that because of the

00:42:20,820 --> 00:42:25,890
performance we require so PHP in its

00:42:23,790 --> 00:42:28,470
current state of Unicode doesn't matter

00:42:25,890 --> 00:42:33,090
for us we've worked around that you

00:42:28,470 --> 00:42:35,040
could say we use C++ or weezer JVM if we

00:42:33,090 --> 00:42:36,660
need to look inside because they're more

00:42:35,040 --> 00:42:39,330
mature in their handling of this at this

00:42:36,660 --> 00:42:43,650
point in time so we are keeping an eye

00:42:39,330 --> 00:42:44,790
on PHP 6 to see what happens there now

00:42:43,650 --> 00:42:47,400
the only reason we use PHP is

00:42:44,790 --> 00:42:48,780
connectivity I just mentioned earlier

00:42:47,400 --> 00:42:51,390
we're connecting to out to lots of

00:42:48,780 --> 00:42:55,770
customers lots of customer systems and

00:42:51,390 --> 00:42:57,240
PHP gives us all that for free so the

00:42:55,770 --> 00:42:59,280
stuff that's bundled with PHP or the

00:42:57,240 --> 00:43:01,470
extensions that bundled works really

00:42:59,280 --> 00:43:06,450
really well we have our own in-house

00:43:01,470 --> 00:43:08,790
builds of PHP we have no patches for any

00:43:06,450 --> 00:43:10,170
of the bundled extensions with PHP we

00:43:08,790 --> 00:43:12,900
don't patch a single one of them and

00:43:10,170 --> 00:43:15,720
we're stressing them quite hard and we

00:43:12,900 --> 00:43:17,010
don't patch any of them now this greatly

00:43:15,720 --> 00:43:19,170
contributes to the liability in

00:43:17,010 --> 00:43:21,450
production last thing we want to do is

00:43:19,170 --> 00:43:23,340
have to be redelivery fire hoses of data

00:43:21,450 --> 00:43:24,300
that's not fun you don't want to be

00:43:23,340 --> 00:43:26,820
doing that you want to deliver to the

00:43:24,300 --> 00:43:28,830
customer move on and with PHP we just do

00:43:26,820 --> 00:43:31,440
it sure we sometimes have bugs in our

00:43:28,830 --> 00:43:33,860
own code every developer does but the

00:43:31,440 --> 00:43:35,940
PHP stuff itself doesn't causes problems

00:43:33,860 --> 00:43:37,560
now I was putting this talk together I

00:43:35,940 --> 00:43:39,480
had to look at all the additional

00:43:37,560 --> 00:43:42,690
extensions that we find off the net and

00:43:39,480 --> 00:43:44,070
we put into our PHP build and I hadn't

00:43:42,690 --> 00:43:46,890
actually realize this until I did this

00:43:44,070 --> 00:43:49,800
talk we end up patching every single one

00:43:46,890 --> 00:43:51,720
of those that isn't included with PHP so

00:43:49,800 --> 00:43:55,080
the quality threshold for bundled

00:43:51,720 --> 00:43:57,120
extensions in PHP is much higher than we

00:43:55,080 --> 00:44:00,480
realized it's easy to take it for

00:43:57,120 --> 00:44:01,950
granted because it just works we could

00:44:00,480 --> 00:44:04,880
speculate as to why that is maybe it's

00:44:01,950 --> 00:44:06,960
because PHP so widely used one of when a

00:44:04,880 --> 00:44:10,530
extensions first added the bugs get

00:44:06,960 --> 00:44:13,950
found and fixed relatively quickly but

00:44:10,530 --> 00:44:16,600
the net result is if it's with PHP

00:44:13,950 --> 00:44:19,720
really good if its third party

00:44:16,600 --> 00:44:21,010
not so good at the minute I mentioned

00:44:19,720 --> 00:44:23,230
earlier about philosophy about the share

00:44:21,010 --> 00:44:24,790
nothing architecture because we've got

00:44:23,230 --> 00:44:27,400
so many people who have done projects

00:44:24,790 --> 00:44:30,670
with PHP they bring that mentality to

00:44:27,400 --> 00:44:32,500
the problems we ask them to solve and

00:44:30,670 --> 00:44:36,580
share nothing is so important for

00:44:32,500 --> 00:44:39,180
scaling it really is so let's go quickly

00:44:36,580 --> 00:44:43,180
run through a summary of my slides I

00:44:39,180 --> 00:44:46,320
explained what the fire hoses it's a

00:44:43,180 --> 00:44:48,970
live stream of events that you consume I

00:44:46,320 --> 00:44:51,280
showed you the architecture for how we

00:44:48,970 --> 00:44:53,800
receive fire hoses and what we use for

00:44:51,280 --> 00:44:57,010
pH and which parts of it are done by PHP

00:44:53,800 --> 00:44:59,560
I looked at how we delivered are

00:44:57,010 --> 00:45:01,150
filtered hoses and the role PHP plays in

00:44:59,560 --> 00:45:03,700
that and the vital role it plays with a

00:45:01,150 --> 00:45:05,890
connectivity in particular we looked at

00:45:03,700 --> 00:45:08,050
the PHP job queue pattern which is what

00:45:05,890 --> 00:45:09,910
we use for our PHP applications because

00:45:08,050 --> 00:45:12,640
they're not running behind engine X

00:45:09,910 --> 00:45:16,210
they're standalone programs that run for

00:45:12,640 --> 00:45:18,700
a long period of time I showed you PHP

00:45:16,210 --> 00:45:20,380
in the context of our entire data sift

00:45:18,700 --> 00:45:22,210
architecture and if you interested in

00:45:20,380 --> 00:45:23,800
knowing more about architecture I'll be

00:45:22,210 --> 00:45:24,970
downstairs in the coffee bar after this

00:45:23,800 --> 00:45:26,230
talk if you want to come and look at

00:45:24,970 --> 00:45:29,980
this in more detail and learn more about

00:45:26,230 --> 00:45:32,020
it talked about we use PHP because of

00:45:29,980 --> 00:45:34,660
our history because of how reliable it

00:45:32,020 --> 00:45:36,780
is it's very good handling of

00:45:34,660 --> 00:45:39,070
unstructured data and binary strings

00:45:36,780 --> 00:45:42,610
because binary strings are the default

00:45:39,070 --> 00:45:44,830
behavior in PHP it talks to everything

00:45:42,610 --> 00:45:48,660
we need to connect to a customer system

00:45:44,830 --> 00:45:51,670
chances are PHP can aldi dirt and the

00:45:48,660 --> 00:45:55,270
share nothing design philosophy is very

00:45:51,670 --> 00:45:56,770
pragmatic for scaling and that's PHP at

00:45:55,270 --> 00:46:00,550
the firehouse scale thank you very much

00:45:56,770 --> 00:46:04,330
do you have any questions there's one

00:46:00,550 --> 00:46:11,260
down here left excuse me the lights are

00:46:04,330 --> 00:46:14,110
a bit blinding hello all right you

00:46:11,260 --> 00:46:16,870
mentioned a custom build of PHP yes do

00:46:14,110 --> 00:46:18,100
you use HH vm with your custom build or

00:46:16,870 --> 00:46:21,740
do you just patch

00:46:18,100 --> 00:46:27,590
the claw projects at the minute we were

00:46:21,740 --> 00:46:29,690
using patched PHP 5.3 5.5 we were able

00:46:27,590 --> 00:46:31,490
to crash it for quite a while so we're

00:46:29,690 --> 00:46:33,670
still in the process of migrating to 55

00:46:31,490 --> 00:46:36,770
we don't use hip hop virtual machine

00:46:33,670 --> 00:46:40,700
because it doesn't yet have all the

00:46:36,770 --> 00:46:43,460
extensions that we rely on for PHP sorry

00:46:40,700 --> 00:46:46,250
in that case what's the most heavily

00:46:43,460 --> 00:46:49,460
modified portion of the PHP caught at

00:46:46,250 --> 00:46:52,400
the core I don't think we really patch

00:46:49,460 --> 00:46:54,020
the core to be honest it's more it's

00:46:52,400 --> 00:46:56,210
more patching third-party extensions

00:46:54,020 --> 00:46:58,550
when they seg fault or they have into

00:46:56,210 --> 00:47:00,200
integer overflows internally all they

00:46:58,550 --> 00:47:01,940
need patching because they were built

00:47:00,200 --> 00:47:03,530
against an older versions as end API and

00:47:01,940 --> 00:47:05,440
they're not using the macros correctly

00:47:03,530 --> 00:47:10,520
for compiling it's things like that

00:47:05,440 --> 00:47:19,610
fixes writes bug fixes yes thank you any

00:47:10,520 --> 00:47:21,980
more questions one down here you

00:47:19,610 --> 00:47:24,140
mentioned earlier and not Jesus yes are

00:47:21,980 --> 00:47:25,910
you using these for processing or for

00:47:24,140 --> 00:47:28,040
web access on your application we're

00:47:25,910 --> 00:47:31,760
using it for web access for HTTP

00:47:28,040 --> 00:47:34,040
streaming so we support web sockets for

00:47:31,760 --> 00:47:35,750
streaming data down to customers so that

00:47:34,040 --> 00:47:37,820
over the same connection they can change

00:47:35,750 --> 00:47:39,430
what data they want to receive web

00:47:37,820 --> 00:47:42,080
sockets is a great protocol for this

00:47:39,430 --> 00:47:44,960
nodejs was first with really good

00:47:42,080 --> 00:47:46,130
WebSocket support I have written a PHP

00:47:44,960 --> 00:47:48,860
extension to do this but I've never

00:47:46,130 --> 00:47:50,480
released it so at the minute nodejs is

00:47:48,860 --> 00:47:56,720
the best game in town in our opinion for

00:47:50,480 --> 00:48:01,870
this next question nope lots of stunned

00:47:56,720 --> 00:48:01,870
silence hopefully oh there's one more

00:48:03,270 --> 00:48:08,320
sorry WebSockets yes have you tried the

00:48:06,220 --> 00:48:12,640
socket server from the reactor framework

00:48:08,320 --> 00:48:15,100
no we haven't I imagine though it's

00:48:12,640 --> 00:48:18,130
written in pure PHP yeah yeah won't be

00:48:15,100 --> 00:48:20,280
fast enough you can't pass I don't if

00:48:18,130 --> 00:48:23,890
you familiar with the autobarn tests for

00:48:20,280 --> 00:48:25,750
WebSocket compliance okay so it was a

00:48:23,890 --> 00:48:27,820
project called Autobahn which reliever

00:48:25,750 --> 00:48:29,970
kelis a compliance test which they keep

00:48:27,820 --> 00:48:32,950
up to date as the WebSocket spec changes

00:48:29,970 --> 00:48:34,870
you can't pass that with pure PHP PHP

00:48:32,950 --> 00:48:36,550
too slow to do the utf-8 processing

00:48:34,870 --> 00:48:37,780
that's required for that that's one of

00:48:36,550 --> 00:48:39,940
the reasons I had to write a custom

00:48:37,780 --> 00:48:44,020
extension for it because if someone

00:48:39,940 --> 00:48:45,540
sends you invalid utf-8 for example you

00:48:44,020 --> 00:48:47,830
have to reject the data packet and

00:48:45,540 --> 00:48:50,880
that's the time critical operation in

00:48:47,830 --> 00:48:53,770
their tests and that's best done in see

00:48:50,880 --> 00:48:56,530
especially as utf-8 characters can be

00:48:53,770 --> 00:48:58,690
split across web frames because the

00:48:56,530 --> 00:49:00,310
WebSocket protocols frame-based you get

00:48:58,690 --> 00:49:04,810
a block of data and you have to combine

00:49:00,310 --> 00:49:13,360
those and move across them ok any more

00:49:04,810 --> 00:49:14,860
questions one down here for min oh by

00:49:13,360 --> 00:49:16,420
the way if you want to know about doing

00:49:14,860 --> 00:49:17,920
stuff in the 70s and 80s this is

00:49:16,420 --> 00:49:19,570
something in was talking about years

00:49:17,920 --> 00:49:21,640
before I've mentioned it you should

00:49:19,570 --> 00:49:25,960
definitely go grab a bite in a drink and

00:49:21,640 --> 00:49:27,070
get him to talk about it with them with

00:49:25,960 --> 00:49:28,480
this kind of architecture on with the

00:49:27,070 --> 00:49:30,970
fire hose where you have your sending

00:49:28,480 --> 00:49:33,700
data constantly and you can't miss any

00:49:30,970 --> 00:49:35,860
how do you approach testing that how do

00:49:33,700 --> 00:49:37,930
you approach quality before you okay

00:49:35,860 --> 00:49:39,400
which that code into production so the

00:49:37,930 --> 00:49:42,250
first thing i did when i joined DataSift

00:49:39,400 --> 00:49:43,930
was i built a fire host simulator called

00:49:42,250 --> 00:49:46,690
hornet because it's an evil test tool

00:49:43,930 --> 00:49:49,480
and it can simulate it can generate data

00:49:46,690 --> 00:49:51,700
sets for fire hoses and it can simulate

00:49:49,480 --> 00:49:53,200
volumes of data fire hoses because the

00:49:51,700 --> 00:49:55,960
fire hoses the units of measure we use

00:49:53,200 --> 00:49:57,940
for this and pre-launch we should we

00:49:55,960 --> 00:49:59,140
kicked off all our pre-launch customers

00:49:57,940 --> 00:50:00,790
shut the whole platform down for a week

00:49:59,140 --> 00:50:02,920
I had the whole datacenter to myself and

00:50:00,790 --> 00:50:06,090
we took it up to ten fire hoses

00:50:02,920 --> 00:50:08,980
simultaneously this is back in October

00:50:06,090 --> 00:50:11,890
2011 so just over two and a half years

00:50:08,980 --> 00:50:13,180
ago now I guess and at that point what

00:50:11,890 --> 00:50:13,630
we found was it was the network that

00:50:13,180 --> 00:50:16,980
melted

00:50:13,630 --> 00:50:19,630
first the data centers network switches

00:50:16,980 --> 00:50:20,740
couldn't cope with that amount of

00:50:19,630 --> 00:50:23,380
bandwidth going through their back

00:50:20,740 --> 00:50:25,180
planes and if you go on the dataset

00:50:23,380 --> 00:50:26,500
engineering blood Garrett I think that's

00:50:25,180 --> 00:50:29,140
where Gareth put it gave us put a blog

00:50:26,500 --> 00:50:30,519
out there about what we had to do what

00:50:29,140 --> 00:50:32,470
and switches we had to buy and ought

00:50:30,519 --> 00:50:35,230
upgrade the network so it could cope

00:50:32,470 --> 00:50:42,490
with that volume of data this is a great

00:50:35,230 --> 00:50:44,410
good resource go go go find it it's just

00:50:42,490 --> 00:50:49,569
worth noting the Hornets also listed in

00:50:44,410 --> 00:50:51,099
PHP yes yes so when I joined they were

00:50:49,569 --> 00:50:53,470
they were trying to reuse legs off the

00:50:51,099 --> 00:50:55,390
shelf Java tools and also a tool called

00:50:53,470 --> 00:50:56,650
bees with machine guns which i think is

00:50:55,390 --> 00:50:59,259
written in Ruby I'm not used it for a

00:50:56,650 --> 00:51:00,759
long time and these are resolve run on

00:50:59,259 --> 00:51:01,839
their even them for made of us and

00:51:00,759 --> 00:51:06,279
they're having trouble simulating the

00:51:01,839 --> 00:51:08,170
loads required so with PHP as long as

00:51:06,279 --> 00:51:10,589
you're not manipulating data you can

00:51:08,170 --> 00:51:12,910
generate data and push it out the door

00:51:10,589 --> 00:51:15,130
in can saturate a network link no

00:51:12,910 --> 00:51:16,720
problem at all and because hornets are

00:51:15,130 --> 00:51:18,579
shared nothing architecture you can just

00:51:16,720 --> 00:51:20,650
run loads of copies in parallel we what

00:51:18,579 --> 00:51:23,109
do we run 100 200 and parallel something

00:51:20,650 --> 00:51:25,930
like that in order to really stress test

00:51:23,109 --> 00:51:26,920
our application now post-launch of

00:51:25,930 --> 00:51:28,900
course we can't shut the whole platform

00:51:26,920 --> 00:51:31,680
down to do this so what we've done is

00:51:28,900 --> 00:51:34,180
we've built a replica that simulates our

00:51:31,680 --> 00:51:35,980
bottlenecks and we do our testing

00:51:34,180 --> 00:51:38,410
against that first and we know how to

00:51:35,980 --> 00:51:39,789
scale those results up to production so

00:51:38,410 --> 00:51:41,710
we know what load we can get on our

00:51:39,789 --> 00:51:43,029
simulated environment how that will

00:51:41,710 --> 00:51:44,259
translate to production so we know

00:51:43,029 --> 00:51:46,539
whether something's safe to go out the

00:51:44,259 --> 00:51:48,430
door or not and so Hornets still in

00:51:46,539 --> 00:51:51,609
daily use today two and a half years

00:51:48,430 --> 00:51:54,609
after it was invented it's an evil test

00:51:51,609 --> 00:51:56,890
tool and its user agencies horn at 666

00:51:54,609 --> 00:51:58,660
as the version number it always gets a

00:51:56,890 --> 00:52:00,160
good chuckle out of our developers when

00:51:58,660 --> 00:52:01,390
we bring someone new on and the like

00:52:00,160 --> 00:52:03,279
wondering what's hammering the crap out

00:52:01,390 --> 00:52:04,930
their application are those shipping for

00:52:03,279 --> 00:52:06,190
the first time when they joined us they

00:52:04,930 --> 00:52:09,549
go look in the headers and it normally

00:52:06,190 --> 00:52:14,230
makes for a good conversation any more

00:52:09,549 --> 00:52:15,460
questions nope well if you do have any

00:52:14,230 --> 00:52:17,589
more if you want to learn more about the

00:52:15,460 --> 00:52:19,450
architecture I'll be downstairs getting

00:52:17,589 --> 00:52:21,539
a nice cup of coffee thank you all for

00:52:19,450 --> 00:52:21,539
listening

00:52:25,480 --> 00:52:27,540

YouTube URL: https://www.youtube.com/watch?v=90EkomYUq9Y


