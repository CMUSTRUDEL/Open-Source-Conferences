Title: PHP UK Conference 2014 - Gary Hockin - Maximising Performance With Zend Framework
Publication date: 2014-03-21
Playlist: PHP UK Conference 2014
Description: 
	Zend Framework 2 is a complex beast, and has been wrongly criticised for it's performance in a number of places. There are plenty of ways to eek out extra cycles from Zend Framework 2, some of them are known, some, not so much. Fisrtly you'll be introduced to the ways to benchmark and profile your ZF2 app, then we'll discuss the out-of-the-box improvements such as config caching and compiling, but also cover some bespoke modules designed to help your performance. Finally, we'll cover some coding best practices that can really help to squeeze that little extra out of your entry level VM.
Captions: 
	00:00:05,990 --> 00:00:11,190
nobody looks particularly hungover this

00:00:08,400 --> 00:00:13,049
morning that's quite impressive who had

00:00:11,190 --> 00:00:16,980
a really late night last night you can

00:00:13,049 --> 00:00:18,449
own it yeah good work so i hope i'm not

00:00:16,980 --> 00:00:20,630
going to like put you to sleep if you've

00:00:18,449 --> 00:00:23,039
got a hangover you should be ok this is

00:00:20,630 --> 00:00:26,369
maximizing performance in Zen from work

00:00:23,039 --> 00:00:29,340
to my name is Gary hakan I man i'm a

00:00:26,369 --> 00:00:33,149
consultant at rove and also a part-time

00:00:29,340 --> 00:00:35,550
CTO of a streaming video company I'm

00:00:33,149 --> 00:00:38,010
ascend from work to contributors I'm

00:00:35,550 --> 00:00:40,050
from work one contributor I'm also that

00:00:38,010 --> 00:00:42,750
the docs maintain F is n framework one

00:00:40,050 --> 00:00:45,690
book too don't hate me too much for that

00:00:42,750 --> 00:00:47,550
but I'm only one man that's all I can

00:00:45,690 --> 00:00:49,739
say and we do acknowledge there's a

00:00:47,550 --> 00:00:54,120
problem and we're trying to slowly get

00:00:49,739 --> 00:00:55,559
through it yeah i'm also a yolo

00:00:54,120 --> 00:00:59,340
certified engineer for anyone who knows

00:00:55,559 --> 00:01:01,440
the values that's pretty cool I'm GH on

00:00:59,340 --> 00:01:02,760
IRC so please come and find me an IRC if

00:01:01,440 --> 00:01:04,589
you have any questions or just want to

00:01:02,760 --> 00:01:07,520
catch up after the talk always more than

00:01:04,589 --> 00:01:09,680
welcome I'm actually here John twitter

00:01:07,520 --> 00:01:11,790
i'm actually a zen from work to

00:01:09,680 --> 00:01:13,229
certified engineer but I'm not supposed

00:01:11,790 --> 00:01:15,750
to tell anyone that did all the third of

00:01:13,229 --> 00:01:16,890
March when the results get posted so for

00:01:15,750 --> 00:01:23,280
the sake of the video it's the fourth

00:01:16,890 --> 00:01:26,750
March today thank you so let's get on

00:01:23,280 --> 00:01:26,750
with what this talk is going to cover

00:01:27,200 --> 00:01:31,439
there's been some kind of misconceptions

00:01:29,909 --> 00:01:33,030
I don't know if anyone went to the

00:01:31,439 --> 00:01:35,670
symphysis kaylyn Symphony talk yesterday

00:01:33,030 --> 00:01:37,350
did anyone attend that talk so I guess

00:01:35,670 --> 00:01:38,820
this is pretty much the same messages

00:01:37,350 --> 00:01:41,130
was given in the early slides of that

00:01:38,820 --> 00:01:45,119
talk there's there's some misconceptions

00:01:41,130 --> 00:01:46,770
over that full-stack frameworks are not

00:01:45,119 --> 00:01:49,110
performant you know this benchmarks and

00:01:46,770 --> 00:01:51,509
they're not performant and yeah hello

00:01:49,110 --> 00:01:53,610
world benchmarks cylex and slim

00:01:51,509 --> 00:01:55,829
benchmark much better than Zen from work

00:01:53,610 --> 00:01:57,450
too and Symphony too but of course they

00:01:55,829 --> 00:01:59,130
do because they don't give you the

00:01:57,450 --> 00:02:03,119
benefits that a full stack frame will

00:01:59,130 --> 00:02:04,560
give you now I personally believe in a

00:02:03,119 --> 00:02:06,270
production environment that Zen from

00:02:04,560 --> 00:02:07,530
work to is significantly faster than

00:02:06,270 --> 00:02:09,360
them from AG one in an enterprise

00:02:07,530 --> 00:02:11,009
environment personally that's from

00:02:09,360 --> 00:02:13,190
personal experience we've got a

00:02:11,009 --> 00:02:14,960
like-for-like application that we pull

00:02:13,190 --> 00:02:17,330
across from them from work one design

00:02:14,960 --> 00:02:19,090
from work too and we saw somewhere in

00:02:17,330 --> 00:02:21,830
the region of twenty-five percent

00:02:19,090 --> 00:02:24,080
increase in performance so it's not

00:02:21,830 --> 00:02:28,610
actually as bad as is perceived out of

00:02:24,080 --> 00:02:32,240
the box but that said there are some

00:02:28,610 --> 00:02:33,200
hidden and kind of under documented

00:02:32,240 --> 00:02:34,550
features that you can use to

00:02:33,200 --> 00:02:37,250
significantly increase your performance

00:02:34,550 --> 00:02:39,200
in zen number two so we're going to

00:02:37,250 --> 00:02:40,850
introduce the concept of performance

00:02:39,200 --> 00:02:43,160
we're going to introduce the tools you

00:02:40,850 --> 00:02:45,620
need to monitor and report on your

00:02:43,160 --> 00:02:48,530
performance and we're going to show you

00:02:45,620 --> 00:02:50,390
some tips and tricks unknown performance

00:02:48,530 --> 00:02:51,470
increase techniques to help you increase

00:02:50,390 --> 00:02:53,870
the performance in your same framework

00:02:51,470 --> 00:02:55,940
to app we do dive into some chords you

00:02:53,870 --> 00:02:58,700
know there's this benchmarking i am

00:02:55,940 --> 00:03:00,530
going to give a quick introduction to to

00:02:58,700 --> 00:03:02,780
profile and benchmarking technique so if

00:03:00,530 --> 00:03:04,340
you already know that it's only sort of

00:03:02,780 --> 00:03:07,070
five to ten minutes so just bear with me

00:03:04,340 --> 00:03:09,760
while i run through that and if this

00:03:07,070 --> 00:03:14,150
isn't what you expected then I apologize

00:03:09,760 --> 00:03:16,070
you can leave that's fine well you're

00:03:14,150 --> 00:03:18,170
still you excellent so that means that I

00:03:16,070 --> 00:03:19,400
guess most of you guys are interested in

00:03:18,170 --> 00:03:21,500
performance improvements enzyme from

00:03:19,400 --> 00:03:24,200
work to which helps me so let's start

00:03:21,500 --> 00:03:25,850
with a question how many people use

00:03:24,200 --> 00:03:30,620
entering work to in production in the

00:03:25,850 --> 00:03:32,660
room excellent superb that's you know

00:03:30,620 --> 00:03:35,120
that's really encouraging so you should

00:03:32,660 --> 00:03:36,530
all of you should should get some you

00:03:35,120 --> 00:03:38,630
know some benefit I hope at some point

00:03:36,530 --> 00:03:39,560
in this talk how many people you know

00:03:38,630 --> 00:03:40,730
I've played around with the same

00:03:39,560 --> 00:03:43,820
framework to but don't use it in

00:03:40,730 --> 00:03:45,200
production yeah few and how many people

00:03:43,820 --> 00:03:48,920
don't use then from work to and never

00:03:45,200 --> 00:03:50,510
even understand how it works oh well I

00:03:48,920 --> 00:03:51,830
hope this helps you to actually get some

00:03:50,510 --> 00:03:55,459
excitement for zend framework to that's

00:03:51,830 --> 00:03:57,620
all I can say yeah so the first

00:03:55,459 --> 00:04:00,980
introduction is into the the tools that

00:03:57,620 --> 00:04:02,269
we use so the first thing that we need

00:04:00,980 --> 00:04:03,950
to do before we can apply any

00:04:02,269 --> 00:04:05,750
performance improvements is to

00:04:03,950 --> 00:04:07,970
understand how our application is

00:04:05,750 --> 00:04:10,730
performing at the baseline before we've

00:04:07,970 --> 00:04:14,180
made any tweaks and to do that I use a

00:04:10,730 --> 00:04:16,580
tool called siege and there's a bee

00:04:14,180 --> 00:04:18,440
Apache benchmark that does largely the

00:04:16,580 --> 00:04:19,820
same job and gets a pan that gets

00:04:18,440 --> 00:04:22,130
bundled with Apache so if you've got

00:04:19,820 --> 00:04:23,390
Apache installed in your dev machine you

00:04:22,130 --> 00:04:25,280
probably have that tool already

00:04:23,390 --> 00:04:28,730
available to you

00:04:25,280 --> 00:04:31,070
and basically all siege does is sends a

00:04:28,730 --> 00:04:32,990
known number of connections sorry it

00:04:31,070 --> 00:04:35,360
sends a no number of concurrent

00:04:32,990 --> 00:04:37,490
connections to your server for a known

00:04:35,360 --> 00:04:40,010
quantity of time and then reports how

00:04:37,490 --> 00:04:42,169
how those responses perform so it

00:04:40,010 --> 00:04:44,330
literally just says send ten concurrent

00:04:42,169 --> 00:04:45,710
connections for ten minutes in benchmark

00:04:44,330 --> 00:04:48,610
mode so send them as quickly as you can

00:04:45,710 --> 00:04:51,230
and then tell me what happened

00:04:48,610 --> 00:04:55,190
installing it is really real easy I mean

00:04:51,230 --> 00:04:58,730
basically there's packages for young apt

00:04:55,190 --> 00:05:01,370
brew windows I don't know you're on your

00:04:58,730 --> 00:05:04,130
own you'll have to kind of Google siege

00:05:01,370 --> 00:05:06,440
on Windows or something I don't know but

00:05:04,130 --> 00:05:10,190
yes I probably could work it out but I

00:05:06,440 --> 00:05:12,230
don't really want to but yeah it's

00:05:10,190 --> 00:05:14,480
really really simple to install and it's

00:05:12,230 --> 00:05:16,790
equally as simple to use so literally

00:05:14,480 --> 00:05:18,770
all we doing here is in please siege my

00:05:16,790 --> 00:05:21,320
server ten concurrent connections one

00:05:18,770 --> 00:05:23,450
minute dash B is really important

00:05:21,320 --> 00:05:25,430
because that says please use benchmark

00:05:23,450 --> 00:05:26,780
mode benchmark mode means and the

00:05:25,430 --> 00:05:30,590
connections as fast as you physically

00:05:26,780 --> 00:05:32,000
can out of the box siege will we'll run

00:05:30,590 --> 00:05:33,950
where it will try and kind of amulet

00:05:32,000 --> 00:05:35,570
real-life traffic so we'd leave a random

00:05:33,950 --> 00:05:38,360
gap between requests of one to three

00:05:35,570 --> 00:05:40,340
seconds by default so it out of the box

00:05:38,360 --> 00:05:42,260
it tries the kind of an elite real user

00:05:40,340 --> 00:05:43,970
experience but obviously for these

00:05:42,260 --> 00:05:45,470
purposes we want to know exactly what's

00:05:43,970 --> 00:05:46,970
going on when we when we bombard the

00:05:45,470 --> 00:05:50,390
server as fast as we possibly can and

00:05:46,970 --> 00:05:52,610
then you'll see that all these requests

00:05:50,390 --> 00:05:56,150
will be sent and then once you've

00:05:52,610 --> 00:05:58,100
completed it oh that's not a speck very

00:05:56,150 --> 00:06:00,500
short well once you've completed it

00:05:58,100 --> 00:06:02,000
you'll see something like this so this

00:06:00,500 --> 00:06:04,610
is telling you the statistics about how

00:06:02,000 --> 00:06:07,780
many requests and how many you know came

00:06:04,610 --> 00:06:10,840
back successfully how long it took I'm

00:06:07,780 --> 00:06:13,729
the pertinent piece of information here

00:06:10,840 --> 00:06:16,220
sorry the first thing I always look at

00:06:13,729 --> 00:06:17,539
those two stats because that's telling

00:06:16,220 --> 00:06:19,700
you whether there's any problems with

00:06:17,539 --> 00:06:20,660
with the actual code you're running you

00:06:19,700 --> 00:06:22,190
know you want one hundred percent

00:06:20,660 --> 00:06:25,250
availability and zero failed

00:06:22,190 --> 00:06:26,360
transactions obviously you don't want to

00:06:25,250 --> 00:06:28,930
be benchmarking something where there's

00:06:26,360 --> 00:06:31,610
been errors in the script you run it so

00:06:28,930 --> 00:06:33,590
this is a really useful tool actually

00:06:31,610 --> 00:06:36,440
for using in a in a kind of staging

00:06:33,590 --> 00:06:38,870
environment I even use this tool in a

00:06:36,440 --> 00:06:41,270
live environment with local currency

00:06:38,870 --> 00:06:42,770
may be perfectly honest but it's really

00:06:41,270 --> 00:06:44,030
useful if you've got a load balanced

00:06:42,770 --> 00:06:45,470
environment and you see in kind of

00:06:44,030 --> 00:06:47,030
intermittent problems and you're like is

00:06:45,470 --> 00:06:49,040
there a problem here somewhere I can't

00:06:47,030 --> 00:06:50,870
work it out I've got six servers and we

00:06:49,040 --> 00:06:54,230
got a bad deploy somewhere you know this

00:06:50,870 --> 00:06:55,580
is a great tool for for finding out if

00:06:54,230 --> 00:06:59,380
you have problems on one of your web

00:06:55,580 --> 00:07:02,540
heads and you do have to turn off sticky

00:06:59,380 --> 00:07:05,870
load balancing otherwise it doesn't help

00:07:02,540 --> 00:07:08,180
as I found out to my to my cost but for

00:07:05,870 --> 00:07:09,950
the sake of this talk the most important

00:07:08,180 --> 00:07:11,870
pieces of information will be looking at

00:07:09,950 --> 00:07:14,320
the response time and the transaction

00:07:11,870 --> 00:07:17,120
rate so the response time is the average

00:07:14,320 --> 00:07:20,270
time they took for the request to return

00:07:17,120 --> 00:07:22,340
the response and the transaction rate is

00:07:20,270 --> 00:07:24,230
how many transactions how many requests

00:07:22,340 --> 00:07:26,900
response transactions can my server

00:07:24,230 --> 00:07:29,240
currently handle per second so it's a

00:07:26,900 --> 00:07:30,590
really interesting metric not really

00:07:29,240 --> 00:07:32,480
useful in the real world but for

00:07:30,590 --> 00:07:36,170
benchmarking purposes it's you know it's

00:07:32,480 --> 00:07:37,460
a really really good metric it's kind of

00:07:36,170 --> 00:07:38,840
what we'll be using to measure

00:07:37,460 --> 00:07:40,760
performance improvement throughout this

00:07:38,840 --> 00:07:43,880
talk so there's anyone currently

00:07:40,760 --> 00:07:45,470
benchmark and use these tools yeah a few

00:07:43,880 --> 00:07:48,140
people okay so there's this information

00:07:45,470 --> 00:07:51,050
yeah that's good and that's our baseline

00:07:48,140 --> 00:07:52,820
so that's what we'll be using not that

00:07:51,050 --> 00:07:54,680
particular one but we will we will talk

00:07:52,820 --> 00:07:56,630
through improving the scale map and we

00:07:54,680 --> 00:07:57,980
will be using transactions per second as

00:07:56,630 --> 00:08:01,880
a measure of improvement throughout the

00:07:57,980 --> 00:08:05,620
talk so the next thing you need to do

00:08:01,880 --> 00:08:05,620
then is to profile your application

00:08:06,070 --> 00:08:11,260
we've recorded how our application is

00:08:08,870 --> 00:08:13,430
performing now we need to understand

00:08:11,260 --> 00:08:15,170
where the bottlenecks in our application

00:08:13,430 --> 00:08:17,690
our where's the bottlenecks in the PHP

00:08:15,170 --> 00:08:18,950
code and to do that we use them I should

00:08:17,690 --> 00:08:21,950
really stop looking up sorry that's

00:08:18,950 --> 00:08:24,640
really going to hurt my neck to do that

00:08:21,950 --> 00:08:29,530
we use a piece of software called XD bug

00:08:24,640 --> 00:08:32,480
there's also x.x hedge prof which is a

00:08:29,530 --> 00:08:36,080
smaller more neat piece of code which is

00:08:32,480 --> 00:08:37,430
written by facebook and i'm going to

00:08:36,080 --> 00:08:38,690
actually contradict what the speaker

00:08:37,430 --> 00:08:41,600
said yesterday you should never ever

00:08:38,690 --> 00:08:44,060
install XD bug in in production please

00:08:41,600 --> 00:08:46,970
don't do that even if it's turned off

00:08:44,060 --> 00:08:48,470
please don't do that exit pro funny i

00:08:46,970 --> 00:08:51,110
have on the other hand can be installed

00:08:48,470 --> 00:08:54,350
in production so can be used to profile

00:08:51,110 --> 00:08:56,029
live production code and and it's kind

00:08:54,350 --> 00:08:58,640
of neat to be kind of use XH prof in

00:08:56,029 --> 00:09:01,010
production we just like roll the dice on

00:08:58,640 --> 00:09:02,990
every request and one in a hundred will

00:09:01,010 --> 00:09:04,990
profile it or you know we can knock that

00:09:02,990 --> 00:09:06,950
up a bit if we're experiencing problems

00:09:04,990 --> 00:09:09,110
because you can actually call the

00:09:06,950 --> 00:09:12,560
profile in forex edge prof from within

00:09:09,110 --> 00:09:13,670
your PHP code whereas XD bug you know it

00:09:12,560 --> 00:09:15,320
either is deep again or it isn't

00:09:13,670 --> 00:09:17,570
debugging you can't just profile a small

00:09:15,320 --> 00:09:19,459
parts of your application so exits prof

00:09:17,570 --> 00:09:21,910
is definitely something to look at after

00:09:19,459 --> 00:09:25,070
this talk I'm going to be using X debug

00:09:21,910 --> 00:09:27,230
everybody should be using X debug anyway

00:09:25,070 --> 00:09:29,060
is anyone not using X debug I won't

00:09:27,230 --> 00:09:31,339
embarrass you it was fine yeah XD bug

00:09:29,060 --> 00:09:33,500
also as well as giving profiling gives

00:09:31,339 --> 00:09:35,630
you step debugging and stack traces and

00:09:33,500 --> 00:09:37,370
when you have exceptions are errors in

00:09:35,630 --> 00:09:38,930
your code so it's really useful if

00:09:37,370 --> 00:09:40,070
you've already got this invite you know

00:09:38,930 --> 00:09:44,450
installed in your def machine you're

00:09:40,070 --> 00:09:46,130
halfway there yeah installing it just

00:09:44,450 --> 00:09:48,470
I'm not going to really run through that

00:09:46,130 --> 00:09:50,120
but there's a umpteen ways to install X

00:09:48,470 --> 00:09:52,040
debug it used to be really difficult to

00:09:50,120 --> 00:09:56,120
install but it's much easier now thanks

00:09:52,040 --> 00:09:58,850
Derek you just need to enable it in your

00:09:56,120 --> 00:10:00,980
PHP any so the pertinent information

00:09:58,850 --> 00:10:03,800
here is looks comforting to ative

00:10:00,980 --> 00:10:07,100
because we say an enable equal zero well

00:10:03,800 --> 00:10:09,110
we don't want to actually profile every

00:10:07,100 --> 00:10:11,329
single request it can profile every

00:10:09,110 --> 00:10:15,290
request that comes in but if we use this

00:10:11,329 --> 00:10:18,500
trigger then it means that we can pass

00:10:15,290 --> 00:10:19,970
this XD bug profile get parameter

00:10:18,500 --> 00:10:21,560
coalition parameter and it lonely

00:10:19,970 --> 00:10:23,329
profile the requests that you pass that

00:10:21,560 --> 00:10:27,769
parameter to which is much more useful

00:10:23,329 --> 00:10:30,019
in my opinion and the other piece of

00:10:27,769 --> 00:10:32,209
software we use this web grind web grind

00:10:30,019 --> 00:10:35,029
is just a friendly way of displaying the

00:10:32,209 --> 00:10:37,010
profile information so the profile

00:10:35,029 --> 00:10:38,240
information is just this huge file that

00:10:37,010 --> 00:10:40,310
nobody is going to be able to read with

00:10:38,240 --> 00:10:42,230
their own eyes so you just need a piece

00:10:40,310 --> 00:10:47,420
of software to interpret that so that

00:10:42,230 --> 00:10:49,399
you can read it there's plenty of OS

00:10:47,420 --> 00:10:51,740
specific kind of desktop applications

00:10:49,399 --> 00:10:53,329
that do a slightly better job than where

00:10:51,740 --> 00:10:54,560
we're going but web brains just real

00:10:53,329 --> 00:10:56,870
easy to install and it gives me the

00:10:54,560 --> 00:10:59,480
information that I need and if you need

00:10:56,870 --> 00:11:01,790
to deep dive further into your profiles

00:10:59,480 --> 00:11:03,199
then yeah just look up there's linux and

00:11:01,790 --> 00:11:04,550
mac and i think there's even windows

00:11:03,199 --> 00:11:07,459
applications that will

00:11:04,550 --> 00:11:09,410
let you deep dive into the cord and web

00:11:07,459 --> 00:11:12,589
grind just looks a bit like that so in

00:11:09,410 --> 00:11:14,360
this example you know we've ordered by

00:11:12,589 --> 00:11:17,720
total self cost so we're ordering by the

00:11:14,360 --> 00:11:20,450
most expensive functions the most

00:11:17,720 --> 00:11:21,649
expensive processes first which is

00:11:20,450 --> 00:11:22,579
obviously what you want because you want

00:11:21,649 --> 00:11:25,220
to pick off the things that are most

00:11:22,579 --> 00:11:28,220
expensive we'll come back into that in

00:11:25,220 --> 00:11:30,560
more detail later and then you just need

00:11:28,220 --> 00:11:32,570
to you know once you've interpreted what

00:11:30,560 --> 00:11:34,880
is causing slowdown in your application

00:11:32,570 --> 00:11:37,250
you just need to change it you just need

00:11:34,880 --> 00:11:38,750
to make the code changes to think

00:11:37,250 --> 00:11:40,130
alright I can understand why there's a

00:11:38,750 --> 00:11:41,870
bottleneck there let you know let's cash

00:11:40,130 --> 00:11:44,899
this let's do that let's reduce that

00:11:41,870 --> 00:11:47,060
loop and then push those to your your

00:11:44,899 --> 00:11:49,279
stage environment and then of course you

00:11:47,060 --> 00:11:50,630
want a siege again because you want to

00:11:49,279 --> 00:11:51,950
confirm that the changes that you

00:11:50,630 --> 00:11:54,079
suspect have been causing the slowness

00:11:51,950 --> 00:11:56,750
have actually been fixed you know this

00:11:54,079 --> 00:11:58,310
isn't and should never be guesswork you

00:11:56,750 --> 00:12:00,430
really want to vindicate every change

00:11:58,310 --> 00:12:02,540
has given you a performance increase

00:12:00,430 --> 00:12:04,250
particularly sometimes you'll be doing a

00:12:02,540 --> 00:12:05,720
trade-off between performance and

00:12:04,250 --> 00:12:07,760
maintenance you'll be refactoring this

00:12:05,720 --> 00:12:09,440
little area so that you know it's more

00:12:07,760 --> 00:12:11,839
performant but you may be losing a bit

00:12:09,440 --> 00:12:14,390
of maintenance maintainability I should

00:12:11,839 --> 00:12:16,220
say rather than maintenance so making

00:12:14,390 --> 00:12:20,240
sure you've indicated each change is

00:12:16,220 --> 00:12:24,170
really really important yeah that's not

00:12:20,240 --> 00:12:26,810
kind of worthless so I guess yeah um I'm

00:12:24,170 --> 00:12:29,779
calling this a cycle of hope where you

00:12:26,810 --> 00:12:31,100
you've siege your profile and then you

00:12:29,779 --> 00:12:33,230
make a code changes and then you carry

00:12:31,100 --> 00:12:34,880
on and Davey shafiq who's actually

00:12:33,230 --> 00:12:37,100
speaking downstairs as a much better

00:12:34,880 --> 00:12:40,329
slide to me so I stole it blatantly from

00:12:37,100 --> 00:12:43,220
him and he got to the performance loop

00:12:40,329 --> 00:12:44,450
you won't be seeing him using this slide

00:12:43,220 --> 00:12:46,670
because he's actually talking right now

00:12:44,450 --> 00:12:54,550
I've ever so there we go he can't know

00:12:46,670 --> 00:12:56,589
that I'm you see it oh it's all good so

00:12:54,550 --> 00:13:00,680
are there any questions regarding

00:12:56,589 --> 00:13:03,470
profile in benchmarking is that all kind

00:13:00,680 --> 00:13:08,000
of straightforward it's good news oh I

00:13:03,470 --> 00:13:10,209
forgot to start my timer nevermind how

00:13:08,000 --> 00:13:10,209
many

00:13:10,780 --> 00:13:26,380
like 50 minutes not bad yeah yeah um

00:13:24,420 --> 00:13:28,030
it's an excellent question so the

00:13:26,380 --> 00:13:29,680
question is how do you know which page

00:13:28,030 --> 00:13:32,620
is the profile in the first place it may

00:13:29,680 --> 00:13:34,060
be that only certain requests are not

00:13:32,620 --> 00:13:35,590
very performant you know maybe your

00:13:34,060 --> 00:13:37,780
homepage is great but there's an odd

00:13:35,590 --> 00:13:43,720
page that's causing you problems that's

00:13:37,780 --> 00:13:50,140
where turning the enable to one is

00:13:43,720 --> 00:13:52,240
helpful in no not not not in production

00:13:50,140 --> 00:13:53,950
I mean if you're looking to do this in

00:13:52,240 --> 00:13:55,900
production this is where XH prof comes

00:13:53,950 --> 00:13:57,970
in really really useful I mean we

00:13:55,900 --> 00:13:59,920
genuinely even when we we feel like we

00:13:57,970 --> 00:14:01,690
don't have performance problems we run

00:13:59,920 --> 00:14:05,640
at exit prof with one in a thousand

00:14:01,690 --> 00:14:08,140
profile in for example and once I

00:14:05,640 --> 00:14:10,690
generally knock that configuration value

00:14:08,140 --> 00:14:12,580
down once we launch a new version of our

00:14:10,690 --> 00:14:13,810
software because I'm interested in

00:14:12,580 --> 00:14:15,190
looking at the profiles once we've

00:14:13,810 --> 00:14:18,370
released a new version and to find out

00:14:15,190 --> 00:14:22,030
if you know other any other more hidden

00:14:18,370 --> 00:14:25,050
bottlenecks yeah it's there is a kind of

00:14:22,030 --> 00:14:28,060
dark earth to understand in which part

00:14:25,050 --> 00:14:29,830
generally is because users a morning you

00:14:28,060 --> 00:14:31,180
know yeah everything looks fine but when

00:14:29,830 --> 00:14:32,530
I go to the news page it takes three

00:14:31,180 --> 00:14:34,690
seconds for the page to render or

00:14:32,530 --> 00:14:37,270
something but yeah it can be tricky to

00:14:34,690 --> 00:14:39,910
actually find out which parts I causing

00:14:37,270 --> 00:14:41,590
you problems I'm really talking about

00:14:39,910 --> 00:14:43,060
sorry I'll come to you I'm really

00:14:41,590 --> 00:14:44,950
talking in this talk I'm really talking

00:14:43,060 --> 00:14:47,740
about specifics of overall improvement

00:14:44,950 --> 00:14:50,350
of every page enzyme from work too and

00:14:47,740 --> 00:14:51,490
maybe some of these techniques will you

00:14:50,350 --> 00:14:53,350
know may help you to understand where

00:14:51,490 --> 00:14:57,820
the bottlenecks are so it was there a

00:14:53,350 --> 00:14:59,020
question I'm I'm really sorry I do tend

00:14:57,820 --> 00:15:03,700
to take questions all the way through

00:14:59,020 --> 00:15:05,680
physics so so when we've profiled order

00:15:03,700 --> 00:15:07,720
a to application we use in our M

00:15:05,680 --> 00:15:10,449
doctrine and

00:15:07,720 --> 00:15:13,600
I'd say large majority of the results

00:15:10,449 --> 00:15:15,389
are actually doctrine yeah so in terms

00:15:13,600 --> 00:15:18,550
of the code that we've actually written

00:15:15,389 --> 00:15:20,410
obviously a lot of it we use the RM but

00:15:18,550 --> 00:15:21,459
they tend to be at the top obviously

00:15:20,410 --> 00:15:24,160
it's talking to the database which is

00:15:21,459 --> 00:15:27,329
always lower yeah but in terms of us

00:15:24,160 --> 00:15:30,189
performing our own code it's very much

00:15:27,329 --> 00:15:32,560
in comparison a lot lower down the list

00:15:30,189 --> 00:15:36,009
yeah it would be um so the question is

00:15:32,560 --> 00:15:37,480
that generally the the doctrine or M is

00:15:36,009 --> 00:15:38,889
in use and that tends to be at the top

00:15:37,480 --> 00:15:42,879
of the list of performance hogs it's

00:15:38,889 --> 00:15:44,980
really common you'll hear me speaking

00:15:42,879 --> 00:15:46,810
about performance or remain maintained

00:15:44,980 --> 00:15:50,350
maintainability a lot through this talk

00:15:46,810 --> 00:15:52,180
some optimizations will give you you

00:15:50,350 --> 00:15:53,589
know much more performance but will mean

00:15:52,180 --> 00:15:55,149
further down the road you get more

00:15:53,589 --> 00:15:57,370
maintenance headaches and then that's

00:15:55,149 --> 00:16:00,550
the question is of you you guys to

00:15:57,370 --> 00:16:02,350
decide whether at this point is throw in

00:16:00,550 --> 00:16:04,750
more money yet you know bigger servers

00:16:02,350 --> 00:16:07,509
or faster servers more important than

00:16:04,750 --> 00:16:08,800
being able to maintain your called

00:16:07,509 --> 00:16:12,370
further down the line I would suggest

00:16:08,800 --> 00:16:16,029
it's not because CPU I was a lot cheaper

00:16:12,370 --> 00:16:17,980
than manoa so yeah that can be tricky I

00:16:16,029 --> 00:16:20,230
mean specifically this talk is talking

00:16:17,980 --> 00:16:21,670
about how to to make sure that the zend

00:16:20,230 --> 00:16:24,250
framework two parts and the ones that

00:16:21,670 --> 00:16:27,610
are at the top of your of your your

00:16:24,250 --> 00:16:28,809
performance hog but I can certainly if

00:16:27,610 --> 00:16:29,889
you find me after I can put you in touch

00:16:28,809 --> 00:16:31,750
with somebody who can help you out with

00:16:29,889 --> 00:16:33,069
doctoring performance without last you

00:16:31,750 --> 00:16:36,220
know that's not a problem and fall to

00:16:33,069 --> 00:16:46,149
the outside my expertise but yeah yeah

00:16:36,220 --> 00:16:51,550
shoot going to concurrent ages so you

00:16:46,149 --> 00:16:53,230
know first of all loader you yes yeah so

00:16:51,550 --> 00:16:55,529
there's you can so the question is is

00:16:53,230 --> 00:16:58,120
there a way that you can use siege two

00:16:55,529 --> 00:16:59,860
more properly replicate real user

00:16:58,120 --> 00:17:02,230
activity rather than just bombard in one

00:16:59,860 --> 00:17:03,910
page I guess that covers it so you can

00:17:02,230 --> 00:17:05,709
tell siege you can set up a text file

00:17:03,910 --> 00:17:08,020
and tell siege to visit these pages in

00:17:05,709 --> 00:17:11,140
order and what you can't you can also

00:17:08,020 --> 00:17:13,990
tell siege to send post data to the

00:17:11,140 --> 00:17:16,000
first page and you can also tell siege

00:17:13,990 --> 00:17:18,669
to use cookies so if you need to

00:17:16,000 --> 00:17:20,709
maintain the session that's really I

00:17:18,669 --> 00:17:21,580
found it to be it really really

00:17:20,709 --> 00:17:24,640
troublesome

00:17:21,580 --> 00:17:26,850
if I'm honest personally and maybe it's

00:17:24,640 --> 00:17:29,110
just that I'm kind of not really

00:17:26,850 --> 00:17:32,050
interested or very good at that kind of

00:17:29,110 --> 00:17:33,760
you know recreating human activity in

00:17:32,050 --> 00:17:35,290
the command button I tend to get bored

00:17:33,760 --> 00:17:37,240
and go it's not working then I'll forget

00:17:35,290 --> 00:17:41,890
it but yeah you can definitely do that

00:17:37,240 --> 00:17:43,780
with siege it's possible so quickly

00:17:41,890 --> 00:17:48,040
we're going to cover a few points in

00:17:43,780 --> 00:17:49,240
enzyme framework to hopefully because

00:17:48,040 --> 00:17:50,710
you've all said you know most of you

00:17:49,240 --> 00:17:52,330
said you've at least use them framework

00:17:50,710 --> 00:17:53,980
to you understand these concepts they

00:17:52,330 --> 00:17:55,150
make sense to you on that slide we'll

00:17:53,980 --> 00:18:00,760
cover them briefly when we get there

00:17:55,150 --> 00:18:04,110
anyway so this is a really really really

00:18:00,760 --> 00:18:06,310
important point the whole of the

00:18:04,110 --> 00:18:08,830
benchmarking and the profile in that is

00:18:06,310 --> 00:18:10,300
being done in this entire talk is only

00:18:08,830 --> 00:18:12,610
on the Zen from the two skeleton

00:18:10,300 --> 00:18:15,850
application so it's I'm literally only

00:18:12,610 --> 00:18:19,090
profile in the hello world Zen from a to

00:18:15,850 --> 00:18:20,740
scouting application I've done it to try

00:18:19,090 --> 00:18:24,100
and make it a little bit easier and to

00:18:20,740 --> 00:18:25,960
try and help to show the bottlenecks in

00:18:24,100 --> 00:18:29,170
the framework itself at its simplest

00:18:25,960 --> 00:18:31,120
level but you should always realize that

00:18:29,170 --> 00:18:35,770
in real world enterprise applications

00:18:31,120 --> 00:18:37,870
the figures i'm showing here will be the

00:18:35,770 --> 00:18:39,430
same because i'm showing the the

00:18:37,870 --> 00:18:40,780
problems in microseconds so those

00:18:39,430 --> 00:18:42,700
problems will still exist in your

00:18:40,780 --> 00:18:44,440
application however they may not be a

00:18:42,700 --> 00:18:45,880
very high percentage you may have user

00:18:44,440 --> 00:18:48,400
langkilde you may have a doctrine ORM

00:18:45,880 --> 00:18:51,850
that's you know that's also contributing

00:18:48,400 --> 00:18:53,380
to performance problems so while I've

00:18:51,850 --> 00:18:56,290
kind of used the simplest possible

00:18:53,380 --> 00:18:58,570
method to try and make it quick and easy

00:18:56,290 --> 00:19:00,250
for everyone to understand some of these

00:18:58,570 --> 00:19:01,570
figures need to be kind of taken away

00:19:00,250 --> 00:19:03,460
and thought about if you're looking to

00:19:01,570 --> 00:19:05,590
do this in your own application you will

00:19:03,460 --> 00:19:06,850
not you almost certainly will not see

00:19:05,590 --> 00:19:08,740
the performance increase for some of

00:19:06,850 --> 00:19:11,530
these techniques in your applications as

00:19:08,740 --> 00:19:13,660
i'm going to show here i've also kind of

00:19:11,530 --> 00:19:15,580
tried to exaggerate some of the problems

00:19:13,660 --> 00:19:16,720
just to make shoot you know to make sure

00:19:15,580 --> 00:19:17,800
with the point is hammered home but i'll

00:19:16,720 --> 00:19:23,980
tell you what i've done that at each

00:19:17,800 --> 00:19:26,860
point so this is the the first benchmark

00:19:23,980 --> 00:19:28,750
i did on the same framework to scout and

00:19:26,860 --> 00:19:30,640
application it was just seized on this

00:19:28,750 --> 00:19:33,270
math book right here it's hundred

00:19:30,640 --> 00:19:35,290
percent available there's no failures

00:19:33,270 --> 00:19:38,080
33.2 for transactions

00:19:35,290 --> 00:19:40,930
no point 3 response time not

00:19:38,080 --> 00:19:44,680
particularly good and this is just an

00:19:40,930 --> 00:19:47,830
out-of-the-box scout and application so

00:19:44,680 --> 00:19:49,480
then we profile we look at the profile

00:19:47,830 --> 00:19:50,860
in and there's something that if you can

00:19:49,480 --> 00:19:54,520
see can you see that at the back is

00:19:50,860 --> 00:19:58,570
there anyone in the other room excellent

00:19:54,520 --> 00:19:59,650
that's even better otherwise my laser

00:19:58,570 --> 00:20:02,440
pointer doesn't really make a lot of

00:19:59,650 --> 00:20:04,720
sense so can you see that at the back

00:20:02,440 --> 00:20:08,010
and you can you read that ok ok cool so

00:20:04,720 --> 00:20:11,050
the first thing to notice here is that

00:20:08,010 --> 00:20:12,340
the top of the list is composer autoload

00:20:11,050 --> 00:20:17,080
class all the load file to those are a

00:20:12,340 --> 00:20:21,580
little class or define file so 32.6

00:20:17,080 --> 00:20:23,440
percent of of this skeleton application

00:20:21,580 --> 00:20:25,660
is being taken up by composer loading

00:20:23,440 --> 00:20:27,970
classes and nearly eight percent is

00:20:25,660 --> 00:20:29,530
being taken up by compose an by the

00:20:27,970 --> 00:20:33,610
autoloader finding files on the

00:20:29,530 --> 00:20:35,140
operating system that's forty percent of

00:20:33,610 --> 00:20:38,110
your application response time is being

00:20:35,140 --> 00:20:40,960
used just get in the PHP files from the

00:20:38,110 --> 00:20:44,680
disk into the memory forty percent I

00:20:40,960 --> 00:20:46,690
mean that's pretty crazy but luckily

00:20:44,680 --> 00:20:48,250
it's really really easy to fix so this

00:20:46,690 --> 00:20:50,980
is my this was my development machine i

00:20:48,250 --> 00:20:53,200
don't have an opto installed does anyone

00:20:50,980 --> 00:20:54,760
here not run production code sorry let's

00:20:53,200 --> 00:20:56,970
make that easier that was going to be a

00:20:54,760 --> 00:20:59,260
full sentence of double negatives hmm

00:20:56,970 --> 00:21:02,530
there's anyone here not running off cash

00:20:59,260 --> 00:21:05,800
in production okay you should definitely

00:21:02,530 --> 00:21:08,020
run an all cash in production it's I

00:21:05,800 --> 00:21:10,900
mean literally it couldn't be easier to

00:21:08,020 --> 00:21:13,450
set it up and even like all of so

00:21:10,900 --> 00:21:16,990
literally you've got a PC on PHP 5 on 5

00:21:13,450 --> 00:21:20,260
or and you've got up cash from 5.5 which

00:21:16,990 --> 00:21:22,890
is bundled and and this is what the

00:21:20,260 --> 00:21:28,120
results are when you enable the OP cash

00:21:22,890 --> 00:21:30,700
so ten percent is now being used to load

00:21:28,120 --> 00:21:32,650
the classes and always actually being

00:21:30,700 --> 00:21:34,360
used to find the files but hey we still

00:21:32,650 --> 00:21:36,940
got a transaction rate has gone through

00:21:34,360 --> 00:21:39,040
the roof so when up cash is obviously

00:21:36,940 --> 00:21:40,210
I'm preaching to the converted everyone

00:21:39,040 --> 00:21:42,370
but a couple of people are using our

00:21:40,210 --> 00:21:44,290
cash you've already net you know and

00:21:42,370 --> 00:21:45,580
solved one of the biggest problems one

00:21:44,290 --> 00:21:49,530
of the biggest headaches as n from work

00:21:45,580 --> 00:21:52,810
to has but that's not really good enough

00:21:49,530 --> 00:21:55,510
you know it's still nearly twenty

00:21:52,810 --> 00:21:58,870
percent over twenty percent of this risk

00:21:55,510 --> 00:22:01,000
response is being taken up by just

00:21:58,870 --> 00:22:02,470
getting the PHP files into memory before

00:22:01,000 --> 00:22:04,420
that you know even though they only use

00:22:02,470 --> 00:22:06,250
it there is an OP cash codes now it

00:22:04,420 --> 00:22:08,470
still taking a 10 a time to find it I

00:22:06,250 --> 00:22:09,820
have no idea why that is when you've got

00:22:08,470 --> 00:22:12,310
a knock cash because these files should

00:22:09,820 --> 00:22:14,290
already be in memory and I've asked tons

00:22:12,310 --> 00:22:16,420
of people who were much more intelligent

00:22:14,290 --> 00:22:18,370
than me much brighter than me and know

00:22:16,420 --> 00:22:19,840
exactly what goes on in the fiddly

00:22:18,370 --> 00:22:22,290
internals bit that I don't really care

00:22:19,840 --> 00:22:24,520
about and nobody could really answer it

00:22:22,290 --> 00:22:28,090
but luckily there is a really really

00:22:24,520 --> 00:22:29,980
easy solution because there's a module

00:22:28,090 --> 00:22:31,600
out there that you can literally drop

00:22:29,980 --> 00:22:34,360
into your zone from work to application

00:22:31,600 --> 00:22:37,270
and it's called if I can pronounce this

00:22:34,360 --> 00:22:38,260
EDP superluminal and that might make

00:22:37,270 --> 00:22:39,850
sense to anyone who knows what

00:22:38,260 --> 00:22:41,170
superluminal is apparently it's like

00:22:39,850 --> 00:22:45,400
faster than the speed of light or

00:22:41,170 --> 00:22:47,800
something but it's it just literally

00:22:45,400 --> 00:22:50,470
looks at your your dependency graph

00:22:47,800 --> 00:22:53,050
which classes this request is dependent

00:22:50,470 --> 00:22:55,690
on and then all it does is combines them

00:22:53,050 --> 00:22:57,370
into one file it kind of minify them and

00:22:55,690 --> 00:22:59,380
just combines them into one file so

00:22:57,370 --> 00:23:01,390
instead of touching the disk to find you

00:22:59,380 --> 00:23:07,360
know 30 files it literally just loads

00:23:01,390 --> 00:23:10,180
one file in its it's written by by this

00:23:07,360 --> 00:23:11,590
guy Evan curry who wrote the Zen from

00:23:10,180 --> 00:23:13,180
work to module manager so we obviously

00:23:11,590 --> 00:23:15,130
know sort of what he's talking about

00:23:13,180 --> 00:23:16,810
when it comes to these things he's also

00:23:15,130 --> 00:23:21,040
my boss a trove so i have to say nice

00:23:16,810 --> 00:23:23,110
things but it's so simple to use it

00:23:21,040 --> 00:23:25,270
really is you know ultra-simple you

00:23:23,110 --> 00:23:27,100
literally clone it into your vendor

00:23:25,270 --> 00:23:28,930
folder because for some reason he hasn't

00:23:27,100 --> 00:23:30,910
put it on packages yet dial I will kick

00:23:28,930 --> 00:23:33,130
in about that when I get back from this

00:23:30,910 --> 00:23:34,480
conference and you know you should be

00:23:33,130 --> 00:23:38,830
able to use composer for it but you

00:23:34,480 --> 00:23:40,870
can't and then you literally enable it

00:23:38,830 --> 00:23:42,730
in your applications or config like you

00:23:40,870 --> 00:23:44,980
would with any module and then all you

00:23:42,730 --> 00:23:47,350
need to do is use this query string

00:23:44,980 --> 00:23:49,120
parameter to generate the cache file on

00:23:47,350 --> 00:23:52,630
any pages that you think are

00:23:49,120 --> 00:23:54,880
particularly heavy we use this in

00:23:52,630 --> 00:23:57,930
production and we use this as part of

00:23:54,880 --> 00:24:00,810
our deployment process we put we put the

00:23:57,930 --> 00:24:02,830
application into maintenance mode we

00:24:00,810 --> 00:24:05,769
push the new code

00:24:02,830 --> 00:24:07,149
all automatically we enable a conflict

00:24:05,769 --> 00:24:09,460
value to say yes we're going to allow

00:24:07,149 --> 00:24:12,700
these cache files to be built we hit the

00:24:09,460 --> 00:24:14,529
URLs we want to we turn off this cash

00:24:12,700 --> 00:24:16,090
generation because you don't want your

00:24:14,529 --> 00:24:19,019
user land users to be able to actually

00:24:16,090 --> 00:24:21,130
bring your application down by sort of

00:24:19,019 --> 00:24:23,260
DDoSing you with that with that that

00:24:21,130 --> 00:24:27,399
would be painful and then everything's

00:24:23,260 --> 00:24:31,809
good to go and then just by enabling

00:24:27,399 --> 00:24:34,230
that module you know we've gone to

00:24:31,809 --> 00:24:37,539
basically in significant amounts of

00:24:34,230 --> 00:24:40,870
profile information 117 152 transactions

00:24:37,539 --> 00:24:41,889
per second and the one percent now you

00:24:40,870 --> 00:24:43,870
don't have to worry about it you know

00:24:41,889 --> 00:24:44,919
anytime something that's that no you're

00:24:43,870 --> 00:24:48,389
just like that that's as good as it's

00:24:44,919 --> 00:24:52,090
going to get forget about it move on so

00:24:48,389 --> 00:24:54,519
luckily there's really easy wins to fix

00:24:52,090 --> 00:24:57,669
autoloading I guess these autoloading

00:24:54,519 --> 00:25:00,279
problems are a symptom of kind of the

00:24:57,669 --> 00:25:02,230
PSR movement where it's there's an

00:25:00,279 --> 00:25:05,380
agreement that will put one class

00:25:02,230 --> 00:25:06,700
profile and you know it it's a maint it

00:25:05,380 --> 00:25:08,679
makes maintenance and interoperability

00:25:06,700 --> 00:25:10,779
much much easier but there is a

00:25:08,679 --> 00:25:18,419
performance implication particularly if

00:25:10,779 --> 00:25:20,830
you're not using up cash yeah question I

00:25:18,419 --> 00:25:23,260
can just repeat the questions and this

00:25:20,830 --> 00:25:25,990
class loading problem wouldn't be

00:25:23,260 --> 00:25:29,049
possible to solve it by using some

00:25:25,990 --> 00:25:30,820
composure features like a class my think

00:25:29,049 --> 00:25:32,260
and this sort of thing so the question

00:25:30,820 --> 00:25:33,970
is it would it be easier would you be

00:25:32,260 --> 00:25:36,519
able to solve this using composers

00:25:33,970 --> 00:25:38,230
class-map generation features the answer

00:25:36,519 --> 00:25:42,940
is almost certainly yes you could

00:25:38,230 --> 00:25:44,860
improve the performance from you know

00:25:42,940 --> 00:25:47,380
from the 89 you could definitely get an

00:25:44,860 --> 00:25:49,450
improv put a performance improvement by

00:25:47,380 --> 00:25:51,159
using the composers class-map generation

00:25:49,450 --> 00:25:52,899
so I'm framework to also ships with some

00:25:51,159 --> 00:25:56,409
class map generators which will cover

00:25:52,899 --> 00:25:58,659
later on you wouldn't get you still

00:25:56,409 --> 00:26:00,039
would not get as a good a performance

00:25:58,659 --> 00:26:01,240
boost as this because you would still

00:26:00,039 --> 00:26:03,100
need to be touching all those into

00:26:01,240 --> 00:26:06,010
individual files so what you would see

00:26:03,100 --> 00:26:09,490
is that the find file value would would

00:26:06,010 --> 00:26:10,630
decrease because the autoloader doesn't

00:26:09,490 --> 00:26:12,070
need to look what where's this file

00:26:10,630 --> 00:26:14,529
it'll know because it just looked it up

00:26:12,070 --> 00:26:15,730
in the array the class map array but you

00:26:14,529 --> 00:26:16,450
wouldn't really get the Lord class

00:26:15,730 --> 00:26:18,130
benefit

00:26:16,450 --> 00:26:20,560
you still have to physically load those

00:26:18,130 --> 00:26:22,330
files on disk into memory so while you'd

00:26:20,560 --> 00:26:26,560
see smuts some improvement it wouldn't

00:26:22,330 --> 00:26:27,940
be as remarkable okay okay yeah but I

00:26:26,560 --> 00:26:29,380
guess there is a possibility that

00:26:27,940 --> 00:26:31,120
there's going to be increase the memory

00:26:29,380 --> 00:26:33,460
usage when you use something like this

00:26:31,120 --> 00:26:36,490
and you are loading something maybe it's

00:26:33,460 --> 00:26:39,310
not Rick part can you sorry could you

00:26:36,490 --> 00:26:42,550
repeat that no I was just saying if this

00:26:39,310 --> 00:26:44,350
a like a cache is loading files which

00:26:42,550 --> 00:26:46,450
are not required there might be slightly

00:26:44,350 --> 00:26:48,250
increased memory situation does it

00:26:46,450 --> 00:26:51,520
that's a really good point so the point

00:26:48,250 --> 00:26:53,830
was that obviously you very rarely get

00:26:51,520 --> 00:26:55,720
like free performance increase and the

00:26:53,830 --> 00:26:59,380
trade-off here is you will get slightly

00:26:55,720 --> 00:27:01,810
more memory usage for the trade off his

00:26:59,380 --> 00:27:04,690
performance for memory again i would say

00:27:01,810 --> 00:27:07,330
memory is cheap you know you you can you

00:27:04,690 --> 00:27:10,030
can easily run i mean we we don't run

00:27:07,330 --> 00:27:11,440
remarkably sized web heads we run and

00:27:10,030 --> 00:27:15,340
i'll sign from a trap like eight gig or

00:27:11,440 --> 00:27:16,810
something and memory generally with the

00:27:15,340 --> 00:27:19,450
zenfone work to up in my own experience

00:27:16,810 --> 00:27:21,460
and this is only my own experience and

00:27:19,450 --> 00:27:23,080
memory is the problem see you know

00:27:21,460 --> 00:27:24,760
normally typically you're you know

00:27:23,080 --> 00:27:28,030
thirty percent memory usage for like nor

00:27:24,760 --> 00:27:29,440
point two percent CPU usage but yeah you

00:27:28,030 --> 00:27:32,680
you would use slightly more memory

00:27:29,440 --> 00:27:34,600
definitely because the point is that

00:27:32,680 --> 00:27:37,390
this is one file as well this isn't one

00:27:34,600 --> 00:27:39,760
file per request so what you will do is

00:27:37,390 --> 00:27:41,140
you will end up loading classes you may

00:27:39,760 --> 00:27:43,270
not need for every request that you've

00:27:41,140 --> 00:27:44,890
run this on that is a point to be made i

00:27:43,270 --> 00:27:47,110
personally think it's a really good

00:27:44,890 --> 00:27:48,760
trade-off personally you know that's my

00:27:47,110 --> 00:27:53,080
decision but yeah it's something to be

00:27:48,760 --> 00:28:03,910
aware of so the next thing is conflict

00:27:53,080 --> 00:28:05,140
caching excuse me so I'll just run

00:28:03,910 --> 00:28:07,540
through this really quickly because it's

00:28:05,140 --> 00:28:09,370
fairly straightforward and the way that

00:28:07,540 --> 00:28:11,110
same framework to works is as you will

00:28:09,370 --> 00:28:13,270
all know there's like config files

00:28:11,110 --> 00:28:14,950
everywhere you've got config files for

00:28:13,270 --> 00:28:16,300
your application you've got your your

00:28:14,950 --> 00:28:18,640
auto loaded config files you've got a

00:28:16,300 --> 00:28:20,710
config file per module you know configs

00:28:18,640 --> 00:28:22,330
are all over the place and the way that

00:28:20,710 --> 00:28:25,930
the same framework to actually manages

00:28:22,330 --> 00:28:27,910
this is at runtime it'll merge all of

00:28:25,930 --> 00:28:29,430
those configurations into one big huge

00:28:27,910 --> 00:28:31,410
uber config file

00:28:29,430 --> 00:28:32,700
it's called the merge config you may you

00:28:31,410 --> 00:28:34,560
know you may hear people referring to an

00:28:32,700 --> 00:28:37,200
in blog post or an IRC or whatever it

00:28:34,560 --> 00:28:38,850
just means that those little config

00:28:37,200 --> 00:28:41,400
files are no good on their own so in

00:28:38,850 --> 00:28:42,750
order for this the you know the users to

00:28:41,400 --> 00:28:44,340
be able to find the keys they want it

00:28:42,750 --> 00:28:48,500
just gets merged into one huge config

00:28:44,340 --> 00:28:51,000
and checked into the service manager but

00:28:48,500 --> 00:28:53,970
recursively merge in all of those arrays

00:28:51,000 --> 00:28:58,650
at runtime is actually fairly expensive

00:28:53,970 --> 00:29:02,220
and do you really need to be merging

00:28:58,650 --> 00:29:03,990
those arrays every single request you

00:29:02,220 --> 00:29:08,520
know does your database credentials

00:29:03,990 --> 00:29:11,250
change per request do you know why are

00:29:08,520 --> 00:29:13,860
we even doing this so the solution is

00:29:11,250 --> 00:29:15,630
that we can cash the configs we can

00:29:13,860 --> 00:29:17,610
catch the merged config so that we don't

00:29:15,630 --> 00:29:19,830
have to do this iterative config merging

00:29:17,610 --> 00:29:21,510
at every request yeah cash all the

00:29:19,830 --> 00:29:23,460
things anyway so anything we can do that

00:29:21,510 --> 00:29:27,390
you know that cash is something to stop

00:29:23,460 --> 00:29:29,840
a process happening is obviously good so

00:29:27,390 --> 00:29:34,740
I need to remember oh right yes I know

00:29:29,840 --> 00:29:36,300
so this is this is an application I set

00:29:34,740 --> 00:29:39,030
up which has a hundred modules or a

00:29:36,300 --> 00:29:42,360
hundred config files obviously I've

00:29:39,030 --> 00:29:43,980
turned off EDP superluminal just to try

00:29:42,360 --> 00:29:46,650
and isolate the exact problem that i'm

00:29:43,980 --> 00:29:48,450
trying to show and we've got 20 3.69

00:29:46,650 --> 00:29:49,920
transactions per second this is actually

00:29:48,450 --> 00:29:53,520
not the Scout anabb this is a real world

00:29:49,920 --> 00:29:56,940
application and merge in the config is

00:29:53,520 --> 00:29:59,760
taken like 3,000 like microseconds it

00:29:56,940 --> 00:30:01,920
doesn't sound like much but then we can

00:29:59,760 --> 00:30:03,900
enable in the config cash is really

00:30:01,920 --> 00:30:07,680
really easy I mean it's just it's just

00:30:03,900 --> 00:30:10,350
this line just these lines and that's it

00:30:07,680 --> 00:30:13,170
you can I mean that cash into two discs

00:30:10,350 --> 00:30:14,910
and you can cash to other places but

00:30:13,170 --> 00:30:17,400
just for the sake of the simplest

00:30:14,910 --> 00:30:21,870
possible example we just cash in this to

00:30:17,400 --> 00:30:24,330
disk and then you think well hang on a

00:30:21,870 --> 00:30:27,770
second you've just turned on the config

00:30:24,330 --> 00:30:30,680
cash and the times are actually slower

00:30:27,770 --> 00:30:34,110
what the hell just happened there and

00:30:30,680 --> 00:30:36,420
this is a really simple explanation in

00:30:34,110 --> 00:30:39,900
the module door conflict or PHP for this

00:30:36,420 --> 00:30:42,179
application we've got a service manager

00:30:39,900 --> 00:30:46,649
factory that lets a closure

00:30:42,179 --> 00:30:48,090
and closures cannot be serialize causes

00:30:46,649 --> 00:30:50,700
that are stored in an array cannot be

00:30:48,090 --> 00:30:53,730
serialized so actually what we've done

00:30:50,700 --> 00:30:55,019
here is we turned on comfy cash in we've

00:30:53,730 --> 00:30:56,100
got a merged conflict that's got

00:30:55,019 --> 00:30:59,190
closures in it so it can't be

00:30:56,100 --> 00:31:00,509
serializable so all we've done is we

00:30:59,190 --> 00:31:02,009
took we've actually added another

00:31:00,509 --> 00:31:03,269
overhead because now the framework has

00:31:02,009 --> 00:31:04,919
to look in the cash first and go oh

00:31:03,269 --> 00:31:06,960
there's no cashier okay I'll do the

00:31:04,919 --> 00:31:11,070
merge anyway so we've added an overhead

00:31:06,960 --> 00:31:12,840
and not actually solved that um when I

00:31:11,070 --> 00:31:15,090
actually did this slide which wasn't

00:31:12,840 --> 00:31:17,460
that long ago you wouldn't get an error

00:31:15,090 --> 00:31:19,440
if you did this now you do get an error

00:31:17,460 --> 00:31:22,019
so if you run in the latest versions of

00:31:19,440 --> 00:31:23,940
zem framework you wouldn't be able to

00:31:22,019 --> 00:31:26,129
physically reproduce and these figures

00:31:23,940 --> 00:31:28,710
sorry because it'll just throw you a

00:31:26,129 --> 00:31:30,269
fatal which is either good or bad

00:31:28,710 --> 00:31:33,210
depending on how we want to look at it

00:31:30,269 --> 00:31:35,039
but yeah typically you when we have this

00:31:33,210 --> 00:31:36,539
on in production so I would advise

00:31:35,039 --> 00:31:37,559
before deployment turn it and you're

00:31:36,539 --> 00:31:39,539
going to turn this on in production and

00:31:37,559 --> 00:31:42,179
turn it on in stages so you can catch

00:31:39,539 --> 00:31:43,919
anything like this but it's real easy I

00:31:42,179 --> 00:31:45,899
mean you guys should all know that it's

00:31:43,919 --> 00:31:47,909
real easy to to move that to the module

00:31:45,899 --> 00:31:49,679
dot PHP so there's two places you can

00:31:47,909 --> 00:31:52,409
define services for the service manager

00:31:49,679 --> 00:31:55,019
in the module to configure PHP and in

00:31:52,409 --> 00:31:57,179
the module to PHP so we just move that I

00:31:55,019 --> 00:32:00,570
mean I personally love to use these

00:31:57,179 --> 00:32:02,940
closures as service factories does

00:32:00,570 --> 00:32:06,450
anyone here use this method everybody

00:32:02,940 --> 00:32:08,340
should be right yeah not everyone Wow so

00:32:06,450 --> 00:32:09,659
yeah I guess it's because I'm lazy and I

00:32:08,340 --> 00:32:11,249
really can't be bothered to write a

00:32:09,659 --> 00:32:14,779
whole new class for a factory I'll just

00:32:11,249 --> 00:32:18,269
get to check it in a closure who cares

00:32:14,779 --> 00:32:20,519
yes so there's this is the easy version

00:32:18,269 --> 00:32:23,009
the actual correct version is to use

00:32:20,519 --> 00:32:24,809
proper proper service service factories

00:32:23,009 --> 00:32:26,549
for each of your you know your classes

00:32:24,809 --> 00:32:29,490
but who wants to do that life's too

00:32:26,549 --> 00:32:31,590
short so we just move early just move

00:32:29,490 --> 00:32:35,369
that function and then we see the

00:32:31,590 --> 00:32:39,119
improvement we're expecting yeah kind of

00:32:35,369 --> 00:32:44,669
underwhelming these figures I guess yeah

00:32:39,119 --> 00:32:46,830
not so good not so good oh now I realize

00:32:44,669 --> 00:32:48,029
why it is because i didn't use this with

00:32:46,830 --> 00:32:51,740
a hundred modules i did it with ten

00:32:48,029 --> 00:32:54,179
modules so with ten modules we saw am a

00:32:51,740 --> 00:32:55,290
fairly small increase but we saw an

00:32:54,179 --> 00:32:57,120
increase in

00:32:55,290 --> 00:33:00,840
an enterprise app where you've got you

00:32:57,120 --> 00:33:03,150
know maybe 20 autoload configs you know

00:33:00,840 --> 00:33:09,810
100 modules 50 modules you will see

00:33:03,150 --> 00:33:21,810
improvement absolutely you will root in

00:33:09,810 --> 00:33:24,450
so you can so the question is could you

00:33:21,810 --> 00:33:27,180
store that config in an APC cash or

00:33:24,450 --> 00:33:30,930
memcached already yeah absolutely you

00:33:27,180 --> 00:33:32,820
can use any Zen cash container or you

00:33:30,930 --> 00:33:34,620
can write your own Zen cash compatible

00:33:32,820 --> 00:33:36,180
container to cash that as I say I just

00:33:34,620 --> 00:33:37,950
cashed it to disk because it it

00:33:36,180 --> 00:33:40,440
literally is one line of code to show in

00:33:37,950 --> 00:33:42,870
a slide rather than trying to show kind

00:33:40,440 --> 00:33:45,210
of more complicated gold but yeah you

00:33:42,870 --> 00:33:46,770
can cash it to an APC ABC would be ideal

00:33:45,210 --> 00:33:48,480
because it just wouldn't even see

00:33:46,770 --> 00:33:51,540
realize it would just stick it you know

00:33:48,480 --> 00:33:55,770
stick it into into the APC cash the user

00:33:51,540 --> 00:33:56,940
cash route in so actually routine in

00:33:55,770 --> 00:33:58,770
Zefram with two is pretty good

00:33:56,940 --> 00:34:02,180
particularly compared to the same

00:33:58,770 --> 00:34:06,600
framework one it's actually you know

00:34:02,180 --> 00:34:08,060
pretty cool it's not the slowest it's

00:34:06,600 --> 00:34:11,190
not the slowest part of your application

00:34:08,060 --> 00:34:13,620
but there is a secret to making sure

00:34:11,190 --> 00:34:17,600
that your roots and your routine is the

00:34:13,620 --> 00:34:20,550
snappiest it can be and the secret is

00:34:17,600 --> 00:34:22,080
not actually that exciting the origin of

00:34:20,550 --> 00:34:25,050
your module the ordering of your roots

00:34:22,080 --> 00:34:28,050
and the ordering of your roots actually

00:34:25,050 --> 00:34:34,350
make a huge difference to how quickly

00:34:28,050 --> 00:34:37,800
that route is matched so I set this up

00:34:34,350 --> 00:34:39,540
with 5000 roots so we've got the

00:34:37,800 --> 00:34:42,120
homepage root here at the top of your

00:34:39,540 --> 00:34:45,600
route definition and then there's 5,000

00:34:42,120 --> 00:34:47,220
roots under it course I'm hoping not

00:34:45,600 --> 00:34:49,910
many people have got 5,000 roots in

00:34:47,220 --> 00:34:52,710
production applications it's possible

00:34:49,910 --> 00:34:55,880
yeah absolutely keep it in the database

00:34:52,710 --> 00:34:58,020
was the comment yeah because that

00:34:55,880 --> 00:34:59,700
alleviates this first problem which is

00:34:58,020 --> 00:35:01,650
passing all of those routes from an

00:34:59,700 --> 00:35:03,570
array into a root object is a real

00:35:01,650 --> 00:35:05,760
problem which is why this would never

00:35:03,570 --> 00:35:07,290
run in production but I mean we can

00:35:05,760 --> 00:35:08,430
pretty much discount this possible

00:35:07,290 --> 00:35:08,910
definition because that isn't going to

00:35:08,430 --> 00:35:10,109
change but

00:35:08,910 --> 00:35:12,030
the examples that's going to be a

00:35:10,109 --> 00:35:14,250
constant so yeah while its kind of

00:35:12,030 --> 00:35:16,020
multiplying we can just put a line

00:35:14,250 --> 00:35:17,430
through it because that problem will

00:35:16,020 --> 00:35:19,410
exist through all the examples i'm going

00:35:17,430 --> 00:35:23,970
to give you so really what we're looking

00:35:19,410 --> 00:35:26,369
at is matching the root 267,000

00:35:23,970 --> 00:35:27,930
microseconds transaction rate obviously

00:35:26,369 --> 00:35:31,400
terrible because i'm passing an array

00:35:27,930 --> 00:35:36,740
into an object 5,000 times every request

00:35:31,400 --> 00:35:36,740
but it kind of highlights the problem oh

00:35:39,230 --> 00:35:45,930
yes that's the slide I wanted so then

00:35:42,630 --> 00:35:48,690
all we do here is we literally take the

00:35:45,930 --> 00:35:50,880
home page root definition and put it at

00:35:48,690 --> 00:35:53,069
the bottom of the config file so there's

00:35:50,880 --> 00:35:57,869
5,000 roots and then the home page rogue

00:35:53,069 --> 00:36:00,359
is at the bottom and the transaction

00:35:57,869 --> 00:36:01,619
rate you know goes up slightly but the

00:36:00,359 --> 00:36:03,480
pertinent information here is the

00:36:01,619 --> 00:36:06,420
matching actually goes down to 135

00:36:03,480 --> 00:36:07,680
microseconds the reason the transaction

00:36:06,420 --> 00:36:09,510
rate hasn't gone up very much is because

00:36:07,680 --> 00:36:11,490
we still pass in all those arrays into

00:36:09,510 --> 00:36:15,119
root object which as I say it's a

00:36:11,490 --> 00:36:16,559
constant but imagine how big this would

00:36:15,119 --> 00:36:19,380
be if we didn't have that problem if we

00:36:16,559 --> 00:36:21,510
were you know match in the root loading

00:36:19,380 --> 00:36:26,250
in the root objects from a different

00:36:21,510 --> 00:36:27,510
source we're still pals in the 5,000

00:36:26,250 --> 00:36:30,660
rules per request that's the perton

00:36:27,510 --> 00:36:32,549
information but by moving the route from

00:36:30,660 --> 00:36:35,220
the top of the definition to the bottom

00:36:32,549 --> 00:36:37,470
of the definition it matches a hell of a

00:36:35,220 --> 00:36:41,880
lot quicker and that's just simply

00:36:37,470 --> 00:36:43,920
because it's a last in first out the

00:36:41,880 --> 00:36:46,020
root matter actually looks at the last

00:36:43,920 --> 00:36:47,579
thing to find if it's got a match it'll

00:36:46,020 --> 00:36:48,660
just terminate early it won't iterate

00:36:47,579 --> 00:36:50,520
through all the routes to try and find

00:36:48,660 --> 00:36:54,150
another match it'll just say oh I found

00:36:50,520 --> 00:36:56,789
a match great so the ordering of your

00:36:54,150 --> 00:36:59,970
most popular routes to the bottom of the

00:36:56,789 --> 00:37:03,140
root definition is really a good way to

00:36:59,970 --> 00:37:05,400
improve performance in those pages I

00:37:03,140 --> 00:37:08,789
personally feel in production since we

00:37:05,400 --> 00:37:10,650
did this I didn't benchmark but I felt

00:37:08,789 --> 00:37:13,500
like our home page became it immediately

00:37:10,650 --> 00:37:15,720
slightly more snappier I was only using

00:37:13,500 --> 00:37:18,390
Chrome's tools to look at the response

00:37:15,720 --> 00:37:20,579
time um yeah there was about a ten

00:37:18,390 --> 00:37:21,809
percent improvement in the response time

00:37:20,579 --> 00:37:22,589
in chrome but we didn't do this

00:37:21,809 --> 00:37:25,289
scientifically

00:37:22,589 --> 00:37:26,910
um which I wish I had if I'd known I was

00:37:25,289 --> 00:37:29,940
going to give this talk but it

00:37:26,910 --> 00:37:32,660
definitely am helps the other thing to

00:37:29,940 --> 00:37:36,630
remember is the module or drain also

00:37:32,660 --> 00:37:38,309
counts here because if you've got the

00:37:36,630 --> 00:37:42,630
home or the most popular routes at the

00:37:38,309 --> 00:37:43,920
bottom of your module at the bottom of

00:37:42,630 --> 00:37:45,539
your route definitions of the module

00:37:43,920 --> 00:37:47,249
that's loaded first and all the other

00:37:45,539 --> 00:37:48,809
routes are going to come under it so you

00:37:47,249 --> 00:37:51,900
need to make sure that the module that's

00:37:48,809 --> 00:37:53,460
presenting the the most popular routes

00:37:51,900 --> 00:37:56,369
is at the bottom of your application to

00:37:53,460 --> 00:37:58,170
config top PHP sometimes that's not

00:37:56,369 --> 00:37:59,579
always feasible if you know you've got

00:37:58,170 --> 00:38:01,440
things or writing other things and you

00:37:59,579 --> 00:38:02,910
need module audran to be where it is

00:38:01,440 --> 00:38:04,410
then you may want to consider just

00:38:02,910 --> 00:38:07,559
having a routes module just present

00:38:04,410 --> 00:38:10,619
roots but yeah module ordering does

00:38:07,559 --> 00:38:18,719
actually make a difference here any

00:38:10,619 --> 00:38:22,739
questions cool so the next thing is the

00:38:18,719 --> 00:38:26,180
the view template map so we briefly

00:38:22,739 --> 00:38:29,130
touched on template template maps and

00:38:26,180 --> 00:38:32,549
maps in general earlier on the view

00:38:29,130 --> 00:38:35,009
template map literally it just says when

00:38:32,549 --> 00:38:37,499
you want to load this view file this is

00:38:35,009 --> 00:38:40,890
the file to use because if you don't

00:38:37,499 --> 00:38:42,420
have a view template map then the

00:38:40,890 --> 00:38:44,039
framework needs to look at all the

00:38:42,420 --> 00:38:45,539
modules that present view folders and

00:38:44,039 --> 00:38:47,849
look in each of those view folders to

00:38:45,539 --> 00:38:49,519
try and find the view the view file that

00:38:47,849 --> 00:38:52,680
it needs to load into the view renderer

00:38:49,519 --> 00:38:55,469
so that is you know there's a

00:38:52,680 --> 00:38:57,479
significant amount of the significant

00:38:55,469 --> 00:38:59,099
amount of overhead there this is again

00:38:57,479 --> 00:39:00,630
I've set up an application with a

00:38:59,099 --> 00:39:03,479
thousand template directories and

00:39:00,630 --> 00:39:05,910
defined not really feasible in the real

00:39:03,479 --> 00:39:07,619
world but you can imagine that if you've

00:39:05,910 --> 00:39:09,329
got you know I know for a fact that some

00:39:07,619 --> 00:39:12,960
of the popular modules like the refs

00:39:09,329 --> 00:39:14,849
user will present a view directory your

00:39:12,960 --> 00:39:16,769
own modules you know some of them will

00:39:14,849 --> 00:39:19,109
have View presenter edirectory some of

00:39:16,769 --> 00:39:21,450
them won't they would imagine but you

00:39:19,109 --> 00:39:23,880
know it's feasible for you to have 20 30

00:39:21,450 --> 00:39:27,440
50 view directories and you can see

00:39:23,880 --> 00:39:27,440
they're actually resolving the file

00:39:27,769 --> 00:39:31,279
takes a ton of time

00:39:31,440 --> 00:39:37,920
and then literally all we do is we we

00:39:36,270 --> 00:39:42,120
tell the view render aware where you

00:39:37,920 --> 00:39:44,070
actually can find these the view

00:39:42,120 --> 00:39:46,530
templates so this should be familiar to

00:39:44,070 --> 00:39:48,560
anyone who uses modules that present

00:39:46,530 --> 00:39:50,730
view files you're actually saying yeah I

00:39:48,560 --> 00:39:55,110
present view files and they're from this

00:39:50,730 --> 00:39:58,950
directory that's not the right cord oh

00:39:55,110 --> 00:40:02,310
okay yeah so all you need to do then is

00:39:58,950 --> 00:40:03,960
to actually add a template map so to say

00:40:02,310 --> 00:40:06,060
when I want layout layout use this when

00:40:03,960 --> 00:40:08,220
I want application index index use this

00:40:06,060 --> 00:40:09,390
and it means that it doesn't have to go

00:40:08,220 --> 00:40:11,910
into each directory and try and

00:40:09,390 --> 00:40:13,910
physically find the file and you

00:40:11,910 --> 00:40:18,650
actually get a nice performance boost

00:40:13,910 --> 00:40:18,650
from just from doing this template map

00:40:26,800 --> 00:40:33,350
so yeah this is kind of a theme that

00:40:31,160 --> 00:40:36,170
does sound like a ton of work who wants

00:40:33,350 --> 00:40:39,260
to actually you know go into kinda an

00:40:36,170 --> 00:40:42,320
array and write down all of the paths to

00:40:39,260 --> 00:40:43,760
their view files yeah you can do it

00:40:42,320 --> 00:40:45,440
there's a generator built into them

00:40:43,760 --> 00:40:47,540
framework too so you can you can

00:40:45,440 --> 00:40:51,260
generate these view template map files

00:40:47,540 --> 00:40:54,710
by using the the command line template

00:40:51,260 --> 00:40:56,330
map generator and then just say for your

00:40:54,710 --> 00:40:59,540
template map just include the map file

00:40:56,330 --> 00:41:00,950
that was created by that tool again you

00:40:59,540 --> 00:41:02,780
can build this into your deployment

00:41:00,950 --> 00:41:08,330
process you know there's no real reason

00:41:02,780 --> 00:41:12,320
not to you can you can definitely enable

00:41:08,330 --> 00:41:13,700
this process as part of your build so

00:41:12,320 --> 00:41:16,520
that you know the in production you

00:41:13,700 --> 00:41:19,010
always have these template maps it's an

00:41:16,520 --> 00:41:21,260
easy win for me it's an easy thing to

00:41:19,010 --> 00:41:23,480
build into your deployment process for a

00:41:21,260 --> 00:41:26,570
not an insignificant performance

00:41:23,480 --> 00:41:28,160
increase any time this spent that spent

00:41:26,570 --> 00:41:30,230
stopping the framework from trying to

00:41:28,160 --> 00:41:33,260
locate files which as you may now guess

00:41:30,230 --> 00:41:39,620
as a pattern in this talk is time you

00:41:33,260 --> 00:41:42,410
know you can easily save so there's also

00:41:39,620 --> 00:41:47,840
a few best practices you can use to eat

00:41:42,410 --> 00:41:50,120
some extra performance out obviously

00:41:47,840 --> 00:41:53,230
don't use closures in modular config.php

00:41:50,120 --> 00:41:56,240
we've already covered the reason why

00:41:53,230 --> 00:42:01,120
yeah it's not a great practice you

00:41:56,240 --> 00:42:05,780
should know by now the other thing is

00:42:01,120 --> 00:42:07,520
think about how much you use in the

00:42:05,780 --> 00:42:10,130
event manager and where you use in the

00:42:07,520 --> 00:42:13,580
event manager the event managers

00:42:10,130 --> 00:42:15,890
incredibly expensive it's because

00:42:13,580 --> 00:42:19,490
internally in the actual code of the

00:42:15,890 --> 00:42:21,080
event manager it uses an event stack and

00:42:19,490 --> 00:42:24,170
that event snack is cloned all over the

00:42:21,080 --> 00:42:26,720
place because it can't be ref it can't

00:42:24,170 --> 00:42:30,110
be it needs to be modified but the

00:42:26,720 --> 00:42:31,760
original event need to be kept so it's

00:42:30,110 --> 00:42:33,740
in the butt in the back end its cloned a

00:42:31,760 --> 00:42:35,670
ton of times which makes the performance

00:42:33,740 --> 00:42:38,170
severely degrade

00:42:35,670 --> 00:42:39,670
this is just a really quick example

00:42:38,170 --> 00:42:41,620
where we've triggered exactly the same

00:42:39,670 --> 00:42:44,170
amount of cold here but we've triggered

00:42:41,620 --> 00:42:46,390
the first example we triggered a hundred

00:42:44,170 --> 00:42:48,580
events that did the cord once each and

00:42:46,390 --> 00:42:50,320
the second example we've triggered two

00:42:48,580 --> 00:42:52,210
events that did the cord 50 times each

00:42:50,320 --> 00:42:54,490
and you can see straight away there's

00:42:52,210 --> 00:42:56,670
you know there's a massive nearly

00:42:54,490 --> 00:43:00,490
needing off nearly fifty percent a

00:42:56,670 --> 00:43:03,340
difference this is a really really

00:43:00,490 --> 00:43:06,010
tricky thing to talk about because as I

00:43:03,340 --> 00:43:08,260
mentioned earlier on the event managers

00:43:06,010 --> 00:43:10,960
a really really really good design

00:43:08,260 --> 00:43:12,940
pattern for maintainability for grouping

00:43:10,960 --> 00:43:15,910
of code for you know general best

00:43:12,940 --> 00:43:19,090
practices so this is a really big

00:43:15,910 --> 00:43:21,640
question of where is performance you're

00:43:19,090 --> 00:43:24,550
more important than maintainability this

00:43:21,640 --> 00:43:26,380
is a really difficult one um typically I

00:43:24,550 --> 00:43:28,150
tend to kind of ask myself three times

00:43:26,380 --> 00:43:30,010
before I put it in the event manager you

00:43:28,150 --> 00:43:32,290
know is this the right place for it is

00:43:30,010 --> 00:43:34,240
it really the right place okay yeah it

00:43:32,290 --> 00:43:37,480
is the right place I'll put it in there

00:43:34,240 --> 00:43:39,220
I see a lot of code where people for

00:43:37,480 --> 00:43:42,370
example we'll use the event manager to

00:43:39,220 --> 00:43:44,020
set up services so they'll they'll just

00:43:42,370 --> 00:43:46,870
you know trigger an event before the

00:43:44,020 --> 00:43:48,460
dispatch process that sets of you saying

00:43:46,870 --> 00:43:51,190
defaults in a service they want to use

00:43:48,460 --> 00:43:52,570
later that's a good example of where you

00:43:51,190 --> 00:43:55,240
will definitely be impacting performance

00:43:52,570 --> 00:43:57,220
and you could be doing that any service

00:43:55,240 --> 00:43:59,470
factory or somewhere else in your

00:43:57,220 --> 00:44:00,820
application that will definitely give

00:43:59,470 --> 00:44:02,650
you a performance boost if you're doing

00:44:00,820 --> 00:44:05,760
that a lot moving those things out of

00:44:02,650 --> 00:44:05,760
events will really help

00:44:09,369 --> 00:44:15,109
yeah I guess I don't really need to run

00:44:13,190 --> 00:44:16,579
over this too much because a number of

00:44:15,109 --> 00:44:18,140
other talks this conference have gone

00:44:16,579 --> 00:44:20,930
through cash in did anyone go to Eli's

00:44:18,140 --> 00:44:23,510
talk yesterday on cash in so I mean yeah

00:44:20,930 --> 00:44:25,940
pretty much he covered this it's you

00:44:23,510 --> 00:44:27,859
know it's realistically do you need to

00:44:25,940 --> 00:44:31,789
be hit in expensive storage then

00:44:27,859 --> 00:44:33,799
framework to houses and cash which you

00:44:31,789 --> 00:44:37,670
know is Zen cash storage storage

00:44:33,799 --> 00:44:41,180
interface brilliant it'll help beauty to

00:44:37,670 --> 00:44:44,359
connect to your cash there's not really

00:44:41,180 --> 00:44:47,420
the most performant way to connect to

00:44:44,359 --> 00:44:49,160
your caches which is kind of cool you

00:44:47,420 --> 00:44:50,869
probably better off using the native

00:44:49,160 --> 00:44:53,420
libraries the ship with whatever cash

00:44:50,869 --> 00:44:56,980
you use in I don't particularly feel

00:44:53,420 --> 00:44:59,930
like adding the overhead of a rapper is

00:44:56,980 --> 00:45:04,130
kind of sensible a particularly a rapper

00:44:59,930 --> 00:45:06,650
that's as in performant as this one I'm

00:45:04,130 --> 00:45:11,359
not saying don't use and cash but yeah

00:45:06,650 --> 00:45:13,579
don't use n cash I guess it's not yeah I

00:45:11,359 --> 00:45:15,559
mean if you use Redis you know you've

00:45:13,579 --> 00:45:17,450
got predator ivory if you use memcached

00:45:15,559 --> 00:45:20,089
I'm sure there's really good libraries

00:45:17,450 --> 00:45:21,440
there exist that you don't need the

00:45:20,089 --> 00:45:22,880
benefit of a rapper for this kind of

00:45:21,440 --> 00:45:26,319
thing I mean one of the things it does

00:45:22,880 --> 00:45:28,970
do nicely as it handles the time to live

00:45:26,319 --> 00:45:32,180
but it does if I add an extra cash items

00:45:28,970 --> 00:45:34,190
it doesn't like use the native methods

00:45:32,180 --> 00:45:36,589
of the the cash that you're actually

00:45:34,190 --> 00:45:38,900
using like memcached has already has a

00:45:36,589 --> 00:45:42,250
time to live built into it so you don't

00:45:38,900 --> 00:45:46,390
need to use ends implementation of that

00:45:42,250 --> 00:45:48,829
but yeah definitely cash in to be honest

00:45:46,390 --> 00:45:51,559
the question about the doctrine or em

00:45:48,829 --> 00:45:53,390
earlier and your cash in is the the best

00:45:51,559 --> 00:45:55,849
answer to these these performance

00:45:53,390 --> 00:45:57,619
problems the first place to look as I

00:45:55,849 --> 00:45:59,059
said this talk is largely about helping

00:45:57,619 --> 00:46:00,259
you to understand where the performance

00:45:59,059 --> 00:46:04,099
bottlenecks are in the framework itself

00:46:00,259 --> 00:46:05,509
almost certainly you gone you're going

00:46:04,099 --> 00:46:07,069
to be able to make your application feel

00:46:05,509 --> 00:46:09,890
snappier with some of these tips but

00:46:07,069 --> 00:46:13,420
realistically the expensive storage

00:46:09,890 --> 00:46:13,420
calls aware you need to look first

00:46:17,900 --> 00:46:23,850
so here's a bonus one view how many

00:46:20,970 --> 00:46:29,760
people run a production website without

00:46:23,850 --> 00:46:33,660
a fav icon oh one person and you should

00:46:29,760 --> 00:46:36,870
definitely know better so how many

00:46:33,660 --> 00:46:39,960
people run a production website without

00:46:36,870 --> 00:46:45,920
all of those stupid apple icons that iOS

00:46:39,960 --> 00:46:45,920
devices ask for yeah okay a few more

00:46:47,900 --> 00:47:01,200
really yeah I guess sorry burger sums up

00:46:57,120 --> 00:47:03,330
my my shock because you're using zend

00:47:01,200 --> 00:47:05,790
framework to you or you using symfony2

00:47:03,330 --> 00:47:10,440
are you using any framework that relies

00:47:05,790 --> 00:47:12,560
on URL rewriting so every request that

00:47:10,440 --> 00:47:14,730
would generate a 404 is actually

00:47:12,560 --> 00:47:17,070
bootstrapping your entire framework if

00:47:14,730 --> 00:47:18,990
you think about it if a file doesn't

00:47:17,070 --> 00:47:21,360
exist on the file system the whole

00:47:18,990 --> 00:47:23,670
nature and point of URL rewriting is to

00:47:21,360 --> 00:47:24,960
say oh we don't have this on the file

00:47:23,670 --> 00:47:27,090
system the framework needs to handle

00:47:24,960 --> 00:47:29,850
this and then the framework will look

00:47:27,090 --> 00:47:31,560
for a root and the framework will look

00:47:29,850 --> 00:47:35,130
for a root and they'll tell there's no

00:47:31,560 --> 00:47:38,610
route 40 4 and bearing in mind that if

00:47:35,130 --> 00:47:40,860
you have no fav icon particularly every

00:47:38,610 --> 00:47:42,630
single request that you your users are

00:47:40,860 --> 00:47:46,050
making their making two requests to your

00:47:42,630 --> 00:47:48,240
framework because browsers are stupid

00:47:46,050 --> 00:47:49,980
they'll continue to ask for the same fav

00:47:48,240 --> 00:47:51,510
icon over and over again if it doesn't

00:47:49,980 --> 00:47:53,550
have one if it has one it'll cash it

00:47:51,510 --> 00:47:55,860
it's fine but if it doesn't have one it

00:47:53,550 --> 00:47:57,450
continues to ask with every request and

00:47:55,860 --> 00:48:00,840
the Apple icons are the same you know

00:47:57,450 --> 00:48:02,400
the Apple iPhone things that you weirdly

00:48:00,840 --> 00:48:04,890
get asked for when people are looking at

00:48:02,400 --> 00:48:06,770
things on iPhones and iPads they'll

00:48:04,890 --> 00:48:10,320
continue to ask for those things and

00:48:06,770 --> 00:48:12,630
there's you know there's other files

00:48:10,320 --> 00:48:14,700
that will be asked for that will be

00:48:12,630 --> 00:48:16,940
resulting in a 404 that will be

00:48:14,700 --> 00:48:21,720
resulting in your whole stack being

00:48:16,940 --> 00:48:23,550
being used robots.txt ok Google another

00:48:21,720 --> 00:48:26,190
sorry

00:48:23,550 --> 00:48:27,990
across the main.xml you know Google will

00:48:26,190 --> 00:48:30,330
be hitting your website fairly often if

00:48:27,990 --> 00:48:31,950
you're you know if I hope Google is

00:48:30,330 --> 00:48:34,980
hitting help decide fairly often another

00:48:31,950 --> 00:48:36,420
other spiders because you obviously want

00:48:34,980 --> 00:48:38,810
that to be happening now even if you

00:48:36,420 --> 00:48:41,010
just have a robots.txt that's and allow

00:48:38,810 --> 00:48:42,420
it's going to help because it's not

00:48:41,010 --> 00:48:45,150
going to result in your framework being

00:48:42,420 --> 00:48:51,810
dispatched every time the Googlebot

00:48:45,150 --> 00:48:58,910
comes along so yeah go for it yeah no no

00:48:51,810 --> 00:48:58,910
please do just about the static assets

00:48:59,900 --> 00:49:05,550
that just does a match on the roots and

00:49:03,030 --> 00:49:08,430
pass off your txt files gift xml yeah

00:49:05,550 --> 00:49:10,770
Jess CSS yeah van for a force won't

00:49:08,430 --> 00:49:12,360
trigger your yes much so it's a good

00:49:10,770 --> 00:49:14,160
point the point that was that you can

00:49:12,360 --> 00:49:18,390
set this up in your web server so that

00:49:14,160 --> 00:49:20,460
it doesn't dispatch these dot ICO files

00:49:18,390 --> 00:49:24,090
or whatever to the framework you can set

00:49:20,460 --> 00:49:28,530
it up so your URL rewriting and will not

00:49:24,090 --> 00:49:30,240
try and parcels through you know it's a

00:49:28,530 --> 00:49:32,520
good point and you can do it that way I

00:49:30,240 --> 00:49:34,200
mean probably as a lazy man I would

00:49:32,520 --> 00:49:38,310
probably just want to add the files into

00:49:34,200 --> 00:49:40,200
into the into the assets you know the

00:49:38,310 --> 00:49:42,030
right place in the public directory but

00:49:40,200 --> 00:49:45,270
yes you can absolutely you can set up

00:49:42,030 --> 00:49:49,320
your your web server to to alleviate

00:49:45,270 --> 00:49:52,470
this problem it surprisingly does exist

00:49:49,320 --> 00:49:54,450
at an in the wild you know people don't

00:49:52,470 --> 00:49:56,040
kind of understand the problem and

00:49:54,450 --> 00:49:58,170
therefore it is a real problem in the

00:49:56,040 --> 00:50:00,030
real world so it's just yeah how you

00:49:58,170 --> 00:50:01,650
solve it completely up to you guys but

00:50:00,030 --> 00:50:04,080
just to be aware that that is a real

00:50:01,650 --> 00:50:05,970
problem you can meet immediately take

00:50:04,080 --> 00:50:09,680
some load off your framework by solving

00:50:05,970 --> 00:50:09,680
the problem however you think is is fit

00:50:09,800 --> 00:50:15,420
so just yet a quick summary I mean use

00:50:12,300 --> 00:50:16,770
up up cash you should take one thing

00:50:15,420 --> 00:50:22,530
away from the conference's if you don't

00:50:16,770 --> 00:50:24,210
use up cash use a knob cash please catch

00:50:22,530 --> 00:50:26,820
everything you can catch all the things

00:50:24,210 --> 00:50:30,150
you can even cashing them to disk makes

00:50:26,820 --> 00:50:31,980
a big difference cashew config cashew

00:50:30,150 --> 00:50:33,240
template Maps cash your expensive

00:50:31,980 --> 00:50:35,160
storage calls you know you're going to

00:50:33,240 --> 00:50:37,690
get real good benefit and quick easy

00:50:35,160 --> 00:50:40,760
wins that

00:50:37,690 --> 00:50:42,860
you GDP superluminal did I say that

00:50:40,760 --> 00:50:47,750
right against superluminal yes thank you

00:50:42,860 --> 00:50:50,030
um it's i personally use it in

00:50:47,750 --> 00:50:51,800
production you would definitely want to

00:50:50,030 --> 00:50:52,790
read through the code and understand how

00:50:51,800 --> 00:50:54,590
it works before making the decision

00:50:52,790 --> 00:50:56,090
whether it's right for you but

00:50:54,590 --> 00:50:59,780
definitely look at it if you have in

00:50:56,090 --> 00:51:01,130
performance problems personally I VT

00:50:59,780 --> 00:51:06,050
news and in production for over a year

00:51:01,130 --> 00:51:08,090
I've never had any problems yeah it's I

00:51:06,050 --> 00:51:12,470
think it's a really really quick and

00:51:08,090 --> 00:51:14,600
easy win just think about your route

00:51:12,470 --> 00:51:17,590
daughter in moving stuff to the bottom

00:51:14,600 --> 00:51:19,970
of the root tree makes it much quicker

00:51:17,590 --> 00:51:24,410
that can be an easy win if you've got a

00:51:19,970 --> 00:51:26,240
really root root heavy application yeah

00:51:24,410 --> 00:51:28,370
I think twice think think twice i put i

00:51:26,240 --> 00:51:30,020
think three times but just have a think

00:51:28,370 --> 00:51:34,280
about is the event manager really the

00:51:30,020 --> 00:51:36,680
right place for this piece of code yes

00:51:34,280 --> 00:51:38,390
is a perfectly acceptable answer you

00:51:36,680 --> 00:51:39,980
know the event managers there to be used

00:51:38,390 --> 00:51:44,390
it's a really really good design pattern

00:51:39,980 --> 00:51:45,830
yes is a good answer I can't read that

00:51:44,390 --> 00:51:48,980
on my screen now sorry oh yeah I have a

00:51:45,830 --> 00:51:51,980
fire gun as we just covered most

00:51:48,980 --> 00:51:54,650
importantly you know use tools use tools

00:51:51,980 --> 00:51:59,210
to record your progress if you take one

00:51:54,650 --> 00:52:01,040
thing away from this talk it's blindly

00:51:59,210 --> 00:52:02,750
flailing around presuming that you're

00:52:01,040 --> 00:52:05,330
making improvements because the site

00:52:02,750 --> 00:52:09,830
looks better snap here is no good you

00:52:05,330 --> 00:52:11,600
know record how you doing profile in a

00:52:09,830 --> 00:52:13,310
staging environment or on a live

00:52:11,600 --> 00:52:15,500
environment after every deploy

00:52:13,310 --> 00:52:16,970
understand if I if I really impacted

00:52:15,500 --> 00:52:18,020
performance with this release understand

00:52:16,970 --> 00:52:19,970
what's happening and where it's

00:52:18,020 --> 00:52:21,500
happening and those tools are super easy

00:52:19,970 --> 00:52:24,350
to use you know there's not really an

00:52:21,500 --> 00:52:26,630
excuse we siege and we profile after

00:52:24,350 --> 00:52:29,240
every single release we actually see

00:52:26,630 --> 00:52:31,970
John a live on our life platform with

00:52:29,240 --> 00:52:35,600
local currency just to confirm you know

00:52:31,970 --> 00:52:39,360
are you drinking wkd oh no sorry its

00:52:35,600 --> 00:52:41,580
power it who wasn't okay

00:52:39,360 --> 00:52:44,140
but yeah you know really and

00:52:41,580 --> 00:52:46,900
understanding how your application is

00:52:44,140 --> 00:52:50,170
performing is not that difficult it's

00:52:46,900 --> 00:52:53,670
really not genuinely so any more

00:52:50,170 --> 00:53:04,360
questions are we oftentimes aria

00:52:53,670 --> 00:53:05,650
excellent any questions surely is the if

00:53:04,360 --> 00:53:07,570
you think about the architecture one way

00:53:05,650 --> 00:53:08,830
is to sort of take the requests like so

00:53:07,570 --> 00:53:10,180
they don't even hit same framework so

00:53:08,830 --> 00:53:12,640
using varnish or something is there a

00:53:10,180 --> 00:53:14,920
cache module for Zen framework to that's

00:53:12,640 --> 00:53:16,690
easy to say for these roots said these

00:53:14,920 --> 00:53:19,540
expire hitters because that would I

00:53:16,690 --> 00:53:23,620
think I that's the question it is there

00:53:19,540 --> 00:53:26,110
any tools or modules excuse me for xan

00:53:23,620 --> 00:53:27,340
framework to that help you to like I'm

00:53:26,110 --> 00:53:31,690
guessing you're talking about reverse

00:53:27,340 --> 00:53:34,510
proxies ESI and unkind of sending the

00:53:31,690 --> 00:53:36,700
response headers I don't know of any and

00:53:34,510 --> 00:53:43,360
the good news is that set in response

00:53:36,700 --> 00:53:44,860
headers is super simple yeah it's a

00:53:43,360 --> 00:53:46,960
really good point so other any modules

00:53:44,860 --> 00:53:48,970
or techniques to be able to set response

00:53:46,960 --> 00:53:51,190
headers so that Zen framework to plays

00:53:48,970 --> 00:53:54,130
nicely with like a reverse proxy cache I

00:53:51,190 --> 00:53:55,780
guess so I don't know of any I'm willing

00:53:54,130 --> 00:53:57,430
to I'm willing to guess if you go to

00:53:55,780 --> 00:53:59,800
modules design framework to calm you'll

00:53:57,430 --> 00:54:02,800
find one how good that map doulas be I'm

00:53:59,800 --> 00:54:04,180
not going to be responsible but I think

00:54:02,800 --> 00:54:06,550
that's a really good point and if you're

00:54:04,180 --> 00:54:07,810
interested in making a module I'm more

00:54:06,550 --> 00:54:09,760
than a patinar more than happy to

00:54:07,810 --> 00:54:16,690
contribute so yeah that's a really good

00:54:09,760 --> 00:54:19,780
idea yeah oh yeah go for it uh yeah

00:54:16,690 --> 00:54:21,370
XD bug on production I don't use it

00:54:19,780 --> 00:54:23,590
myself because I just assumed it was too

00:54:21,370 --> 00:54:27,970
heavy but is there a specific reason you

00:54:23,590 --> 00:54:31,000
hate it so much and for me it comes down

00:54:27,970 --> 00:54:33,520
to two particular points I've seen tons

00:54:31,000 --> 00:54:35,530
of people who've left actually bag on by

00:54:33,520 --> 00:54:36,580
accident in production in fact the guy

00:54:35,530 --> 00:54:37,780
who was talking about the symphony

00:54:36,580 --> 00:54:39,610
yesterday you know said the same thing

00:54:37,780 --> 00:54:42,040
you left it all yeah I left actually bug

00:54:39,610 --> 00:54:43,810
on for ages laughing about it well for

00:54:42,040 --> 00:54:47,350
me that that's not only a performance

00:54:43,810 --> 00:54:51,010
problem that's an attack vector I don't

00:54:47,350 --> 00:54:52,090
think that a staff debugger has any

00:54:51,010 --> 00:54:54,610
place on

00:54:52,090 --> 00:54:57,370
your production server personally you

00:54:54,610 --> 00:54:58,900
know that a bum one bum config one

00:54:57,370 --> 00:55:01,120
mistake and somebody could be step

00:54:58,900 --> 00:55:03,850
debugging through your cold that's kind

00:55:01,120 --> 00:55:05,380
of scary not only do they get to see all

00:55:03,850 --> 00:55:06,940
the shortcuts you took and I'll you know

00:55:05,380 --> 00:55:08,910
all the pool called you've got but they

00:55:06,940 --> 00:55:12,220
can find any attack vectors they want so

00:55:08,910 --> 00:55:16,480
yeah I genuinely believe that XD bug has

00:55:12,220 --> 00:55:18,670
no place in a production server it yeah

00:55:16,480 --> 00:55:20,350
it's too risky for me personally exit

00:55:18,670 --> 00:55:21,820
profitez a damn good job of profiling in

00:55:20,350 --> 00:55:27,850
production it's there why you know use

00:55:21,820 --> 00:55:29,170
the right tool thanks to say I just go

00:55:27,850 --> 00:55:30,460
much the question about the response

00:55:29,170 --> 00:55:32,530
headers on the gentleman at the front

00:55:30,460 --> 00:55:37,360
yeah are you talking about etags and

00:55:32,530 --> 00:55:45,460
expires yeah view seen varnish yeah we

00:55:37,360 --> 00:55:46,570
talked so that so there's like this the

00:55:45,460 --> 00:55:49,060
questio the question was are there

00:55:46,570 --> 00:55:50,710
modules to help you use the head as the

00:55:49,060 --> 00:55:53,770
varnish needs to understand what to do

00:55:50,710 --> 00:55:56,200
with your responses so to set the

00:55:53,770 --> 00:55:59,170
headers that varnish needs to use with a

00:55:56,200 --> 00:56:00,040
in a good kind of cross yeah I can

00:55:59,170 --> 00:56:01,420
imagine what you're talking about

00:56:00,040 --> 00:56:02,800
something where you can like define

00:56:01,420 --> 00:56:05,380
these pages should have these time to

00:56:02,800 --> 00:56:06,850
live in one place these routes but I

00:56:05,380 --> 00:56:09,900
don't know of a module but it sounds

00:56:06,850 --> 00:56:13,120
like a really good project so anymore

00:56:09,900 --> 00:56:18,340
super okay we've got 11 here nine here

00:56:13,120 --> 00:56:21,940
next yeah shoot if the event manager is

00:56:18,340 --> 00:56:24,510
so slow regenerating the events between

00:56:21,940 --> 00:56:29,100
the different parts of the library

00:56:24,510 --> 00:56:33,840
shouldn't we be using a pc you

00:56:29,100 --> 00:56:37,420
internally yes I'm so same framework to

00:56:33,840 --> 00:56:42,580
doesn't have a dependency on any

00:56:37,420 --> 00:56:45,340
particular user on cash so and that's a

00:56:42,580 --> 00:56:47,230
business decision by the end and i can

00:56:45,340 --> 00:56:50,650
tell you why that is it's because then

00:56:47,230 --> 00:56:53,110
server doesn't support a pc you and zen

00:56:50,650 --> 00:56:55,000
framework will send will only ever let

00:56:53,110 --> 00:56:57,610
the framework run on platforms that

00:56:55,000 --> 00:56:58,870
xenserver will support that's a business

00:56:57,610 --> 00:57:01,000
decision by the end it out to the

00:56:58,870 --> 00:57:03,460
contributors hands so that's the reason

00:57:01,000 --> 00:57:05,359
why zend framework to is targeting PHP

00:57:03,460 --> 00:57:07,369
5.3 for example is

00:57:05,359 --> 00:57:09,769
at the time of release xenserver only

00:57:07,369 --> 00:57:12,970
supported PHP 5.3 so we couldn't pushed

00:57:09,769 --> 00:57:15,319
we wanted to push the 54 but we couldn't

00:57:12,970 --> 00:57:17,989
the event manager has been completely

00:57:15,319 --> 00:57:19,759
rewritten to use features in five four

00:57:17,989 --> 00:57:22,390
as as the root day by the way and

00:57:19,759 --> 00:57:25,849
there's been some discussion about

00:57:22,390 --> 00:57:27,559
design framework three which is going to

00:57:25,849 --> 00:57:29,989
be not a big massive backwards

00:57:27,559 --> 00:57:33,230
compatibility break like 12 2 was but

00:57:29,989 --> 00:57:34,940
it's more more things will be rewritten

00:57:33,230 --> 00:57:36,259
to take advantage of features of 54

00:57:34,940 --> 00:57:39,829
basically because then serve and I'll

00:57:36,259 --> 00:57:41,839
sports 54 so we three will be a break-in

00:57:39,829 --> 00:57:42,950
change version but it won't be like you

00:57:41,839 --> 00:57:46,220
have to rewrite all your code again

00:57:42,950 --> 00:57:48,230
it'll be just tweak this tweak that but

00:57:46,220 --> 00:57:49,999
yeah the event manager is has a massive

00:57:48,230 --> 00:57:51,710
performance improvement in the rewrite

00:57:49,999 --> 00:57:53,150
that's been done so that will be coming

00:57:51,710 --> 00:57:54,680
soon and there's probably be a more deal

00:57:53,150 --> 00:57:58,880
for backwards compatible leading design

00:57:54,680 --> 00:58:01,160
framework to any more cool hayase other

00:57:58,880 --> 00:58:05,420
any modules that will give you kind of

00:58:01,160 --> 00:58:06,799
like a an A to F rating on certain areas

00:58:05,420 --> 00:58:08,359
of your applications and make

00:58:06,799 --> 00:58:10,749
suggestions like I likewise lower page

00:58:08,359 --> 00:58:12,980
speed speed does for your browser to say

00:58:10,749 --> 00:58:14,749
like your routing example you were

00:58:12,980 --> 00:58:16,519
saying if you put it at the bottom you

00:58:14,749 --> 00:58:17,569
give you a suggestion like that that's

00:58:16,519 --> 00:58:19,309
pretty cool that's a pretty cool idea

00:58:17,569 --> 00:58:20,869
there's there's not no modules i know so

00:58:19,309 --> 00:58:22,369
the question was are there any modules

00:58:20,869 --> 00:58:26,150
that will give you like a page speed

00:58:22,369 --> 00:58:27,349
rank of your of your page i'm guessing i

00:58:26,150 --> 00:58:30,230
don't know how many people use then

00:58:27,349 --> 00:58:33,470
toolbar then develop a toolbar or

00:58:30,230 --> 00:58:35,749
whatever it's called so that as a quick

00:58:33,470 --> 00:58:37,849
promotion that rove will rewrite in the

00:58:35,749 --> 00:58:41,119
Zen developer toolbar to be more helpful

00:58:37,849 --> 00:58:42,289
and that is in design stage that's a

00:58:41,119 --> 00:58:44,059
really really good idea and I think

00:58:42,289 --> 00:58:47,089
we'll probably still up and included in

00:58:44,059 --> 00:58:50,299
the new the new toolbar that's covered

00:58:47,089 --> 00:58:55,160
up no problem um yeah we are we out of

00:58:50,299 --> 00:58:57,630
time are we see this is what I love

00:58:55,160 --> 00:59:00,099
thank you guys

00:58:57,630 --> 00:59:01,810
yes it absolutely completely open source

00:59:00,099 --> 00:59:05,470
yeah everything we do it is one source

00:59:01,810 --> 00:59:09,160
oh yeah hello I've seen people fork

00:59:05,470 --> 00:59:10,960
frameworks before to sort of refactor

00:59:09,160 --> 00:59:13,359
out inefficiencies they found in a

00:59:10,960 --> 00:59:15,250
framework what would your approach be if

00:59:13,359 --> 00:59:16,869
you were using a framework or a library

00:59:15,250 --> 00:59:18,760
and you found an inefficiency which was

00:59:16,869 --> 00:59:21,010
there for a good reason but is actually

00:59:18,760 --> 00:59:23,710
impacting your specific application I

00:59:21,010 --> 00:59:26,740
would I would submit to pull request

00:59:23,710 --> 00:59:30,400
with a verbose explanation of why I

00:59:26,740 --> 00:59:32,890
wanted this pull request and then

00:59:30,400 --> 00:59:35,290
failing that I would fork the individual

00:59:32,890 --> 00:59:36,400
component and use the patched version I

00:59:35,290 --> 00:59:37,330
mean the great thing about zend

00:59:36,400 --> 00:59:39,340
framework to is because its

00:59:37,330 --> 00:59:40,750
configuration of a magic replace an

00:59:39,340 --> 00:59:44,050
individual components is really real

00:59:40,750 --> 00:59:46,990
easy so I would try to explain why you

00:59:44,050 --> 00:59:49,990
think that the the change you've made is

00:59:46,990 --> 00:59:51,820
better and then when people say no and

00:59:49,990 --> 00:59:57,720
slap you down like just do it anyway I

00:59:51,820 --> 01:00:00,790
guess anymore we've got to make a cruel

00:59:57,720 --> 01:00:03,089
one of the big performance issues we had

01:00:00,790 --> 01:00:05,109
with Zenith one was the Ford plug-in and

01:00:03,089 --> 01:00:07,450
I don't know if you have experienced I

01:00:05,109 --> 01:00:09,369
didn't know in fact so with ZF one yeah

01:00:07,450 --> 01:00:11,740
one of the big performance issues was

01:00:09,369 --> 01:00:13,359
with forward plugin forward bugging

01:00:11,740 --> 01:00:16,150
because it would reduce patch or the sea

01:00:13,359 --> 01:00:18,190
yeah yeah yes it is f2 obviously being a

01:00:16,150 --> 01:00:20,830
lot more modular what I found is I'm

01:00:18,190 --> 01:00:23,500
using it a lot more and that is another

01:00:20,830 --> 01:00:25,450
bite bottleneck so basically what we do

01:00:23,500 --> 01:00:30,810
we hit a controller action and you would

01:00:25,450 --> 01:00:33,790
have of see a great views built up and

01:00:30,810 --> 01:00:35,770
having that functionality is fantastic

01:00:33,790 --> 01:00:37,570
but it does sort of impact performance

01:00:35,770 --> 01:00:40,510
in that regards you do you have any sort

01:00:37,570 --> 01:00:42,160
of suggestions there's two yeah that's

01:00:40,510 --> 01:00:43,930
kind of a technique I try and shy away

01:00:42,160 --> 01:00:45,730
from for the reason that it's not very

01:00:43,930 --> 01:00:49,750
performant in any framework that kind of

01:00:45,730 --> 01:00:51,580
architecture will will be expensive the

01:00:49,750 --> 01:00:53,290
the answer I'm gonna give you is not

01:00:51,580 --> 01:00:56,190
going to be helpful but cash in is the

01:00:53,290 --> 01:00:58,960
the solution there for me because i'm

01:00:56,190 --> 01:01:00,430
guessing having to dispatch multiple

01:00:58,960 --> 01:01:01,750
actions i'm guessing in single request

01:01:00,430 --> 01:01:05,589
is that where you're referring to your

01:01:01,750 --> 01:01:08,380
pc obviously you can tell you whether

01:01:05,589 --> 01:01:10,080
it's fine yeah you can all see cool the

01:01:08,380 --> 01:01:12,390
other controller actions directly

01:01:10,080 --> 01:01:14,850
but the downside for me is that you

01:01:12,390 --> 01:01:16,410
won't get the dispatch events yeah only

01:01:14,850 --> 01:01:18,060
we get the manager called e so you're

01:01:16,410 --> 01:01:19,440
actually what what the hell was I called

01:01:18,060 --> 01:01:21,770
enzyme from work one I was a trigger in

01:01:19,440 --> 01:01:24,510
the channel to see how evil it was the

01:01:21,770 --> 01:01:27,120
something stack the route dispatch

01:01:24,510 --> 01:01:30,780
action stack thank you yes by that man

01:01:27,120 --> 01:01:33,300
appear so yeah I mean I personally think

01:01:30,780 --> 01:01:34,890
that's not a great architecture to use I

01:01:33,300 --> 01:01:37,310
can understand why people use it because

01:01:34,890 --> 01:01:39,990
it does give you like really cool

01:01:37,310 --> 01:01:41,850
reusability and maintenance but I'm

01:01:39,990 --> 01:01:44,130
guessing you can cash the results of

01:01:41,850 --> 01:01:46,620
those individual dispatches and look in

01:01:44,130 --> 01:01:49,530
the cash first yeah I guess you could be

01:01:46,620 --> 01:01:51,840
I mean I'm personally even if you cash

01:01:49,530 --> 01:01:55,050
in in a very heavy website for 10

01:01:51,840 --> 01:01:57,420
seconds or even if your cash in for like

01:01:55,050 --> 01:01:59,460
having a poo so what I would do is I

01:01:57,420 --> 01:02:00,780
would cash this individual users

01:01:59,460 --> 01:02:02,580
information at the output of this for

01:02:00,780 --> 01:02:05,070
maybe three requests so it doesn't

01:02:02,580 --> 01:02:06,360
change for three refreshes I'm pretty

01:02:05,070 --> 01:02:08,040
sure there's lots of places in the

01:02:06,360 --> 01:02:09,750
application we're having still data for

01:02:08,040 --> 01:02:14,100
three or four refresh using so much of a

01:02:09,750 --> 01:02:17,040
problem yeah cool okay well we got have

01:02:14,100 --> 01:02:18,570
one more great yeah i'm eating into your

01:02:17,040 --> 01:02:22,130
break guys so if you do want to leave i

01:02:18,570 --> 01:02:24,690
will not be offended thank you and I

01:02:22,130 --> 01:02:26,280
don't really have a question but I want

01:02:24,690 --> 01:02:28,560
to talk a little bit about doctrine too

01:02:26,280 --> 01:02:31,860
because it was asked oh I've matter yeah

01:02:28,560 --> 01:02:34,530
i'm booked the biggest the single

01:02:31,860 --> 01:02:36,240
biggest performance issue i had on a

01:02:34,530 --> 01:02:39,810
production site that was written with

01:02:36,240 --> 01:02:42,450
zend framework to and doctrine to was

01:02:39,810 --> 01:02:44,780
the default configuration for doctrine

01:02:42,450 --> 01:02:47,430
is that it automatically generates

01:02:44,780 --> 01:02:50,820
hydrators and proxies which our files

01:02:47,430 --> 01:02:52,950
yeah on every single request so you can

01:02:50,820 --> 01:02:54,090
cash them all right but what you do is

01:02:52,950 --> 01:02:56,430
you change the configuration on

01:02:54,090 --> 01:02:59,480
production to not generate yeah and you

01:02:56,430 --> 01:03:02,160
submit them vice version control so

01:02:59,480 --> 01:03:03,510
that's perfect don't that's not that's

01:03:02,160 --> 01:03:04,920
on the video too so anyone was watching

01:03:03,510 --> 01:03:06,480
this is like oh yeah I wanted that

01:03:04,920 --> 01:03:08,790
doctoring question and sit so yeah

01:03:06,480 --> 01:03:10,440
that's all we got time for guys please

01:03:08,790 --> 01:03:12,300
please please read every single talk you

01:03:10,440 --> 01:03:15,060
see on joined in we need the feedback to

01:03:12,300 --> 01:03:17,850
improve and in my case to keep up my

01:03:15,060 --> 01:03:19,980
constantly high value so pleased you

01:03:17,850 --> 01:03:20,940
very much thanks Gary please do a rate

01:03:19,980 --> 01:03:23,660
everything

01:03:20,940 --> 01:03:23,660

YouTube URL: https://www.youtube.com/watch?v=QwpGPlL8oZc


