Title: PHP UK Conference 2014 - Ole Michaelis - Service Oriented Architecture for Robust & Scalable Systems
Publication date: 2014-03-28
Playlist: PHP UK Conference 2014
Description: 
	Software Architecture is hard. And when your business grows, its getting even harder because scaling doesn't come out the box and it's not only the software which grows it's also the team. So you have to find a way how to scale your software in a way that it stays easy maintainable for growing teams and scalable. I'd like to talk about Service Oriented Architecture in general and also share some experience and give some examples where SOA would save you in a tough spot and maybe places where SOA isn't the best idea to implement.
Captions: 
	00:00:04,879 --> 00:00:11,670
I like to introduce myself before we

00:00:08,970 --> 00:00:14,870
going deep in the topic my name is Alma

00:00:11,670 --> 00:00:17,850
Sheila's as mentioned I'm 26 years old

00:00:14,870 --> 00:00:20,130
living in Hamburg northern Germany and

00:00:17,850 --> 00:00:21,480
the Hamburg people say that having is

00:00:20,130 --> 00:00:23,400
the most beautiful city in the world and

00:00:21,480 --> 00:00:26,099
i would like to invite you to check it

00:00:23,400 --> 00:00:29,010
out yourself I really love the city um

00:00:26,099 --> 00:00:32,700
I'm web nerd user group ii and sometimes

00:00:29,010 --> 00:00:34,950
a conference speaker and you can even

00:00:32,700 --> 00:00:37,980
tweet me at code stars you can find my

00:00:34,950 --> 00:00:40,410
block codes to study you and I'm a

00:00:37,980 --> 00:00:42,809
curator of cell coded conference which

00:00:40,410 --> 00:00:46,710
happened last year and in my free time

00:00:42,809 --> 00:00:51,420
will also work at slattery oh I walk

00:00:46,710 --> 00:00:54,989
into new I'm there for over a year now

00:00:51,420 --> 00:00:57,570
and my working title is open source rock

00:00:54,989 --> 00:01:00,539
star or man which is kind of cool

00:00:57,570 --> 00:01:03,840
but and to put more into a relation um

00:01:00,539 --> 00:01:08,340
we are free to choose our tiles so I'm

00:01:03,840 --> 00:01:11,159
just software engineer stuff now a gym

00:01:08,340 --> 00:01:12,810
new i started my first year gym in the

00:01:11,159 --> 00:01:15,360
infrastructure team so did lots of

00:01:12,810 --> 00:01:18,119
operations and you know keeping things

00:01:15,360 --> 00:01:19,680
running but i have a very very strong

00:01:18,119 --> 00:01:21,210
software engineering background and

00:01:19,680 --> 00:01:23,729
that's why i switched back to our very

00:01:21,210 --> 00:01:27,509
first a service-oriented architecture

00:01:23,729 --> 00:01:29,250
team now um Jim new as a company is a

00:01:27,509 --> 00:01:31,320
website builder so we want people to

00:01:29,250 --> 00:01:34,290
have a website without knowing HTML CSS

00:01:31,320 --> 00:01:36,990
and JavaScript so whenever you know your

00:01:34,290 --> 00:01:38,579
mom asked you to have a website just

00:01:36,990 --> 00:01:40,259
sent her to gym to wind she can do it on

00:01:38,579 --> 00:01:43,790
your own and you have time for cool

00:01:40,259 --> 00:01:49,170
stuff and not sending up WordPress um

00:01:43,790 --> 00:01:51,630
yeah service I need a doctor so if you

00:01:49,170 --> 00:01:54,140
might have read the title and it has a

00:01:51,630 --> 00:01:56,280
pretty handy sub subtitles there and

00:01:54,140 --> 00:01:58,770
beside the very awesome keynote

00:01:56,280 --> 00:02:01,049
animation it's for robust and scalable

00:01:58,770 --> 00:02:03,810
system and I want to talk today about

00:02:01,049 --> 00:02:05,790
why why is service aren't actually

00:02:03,810 --> 00:02:10,649
necessary and why you should use it

00:02:05,790 --> 00:02:12,599
what's what's cool that what what it

00:02:10,649 --> 00:02:13,710
really is so what what this fancy term

00:02:12,599 --> 00:02:18,060
means

00:02:13,710 --> 00:02:20,730
and as last I want to talk about how you

00:02:18,060 --> 00:02:26,940
can do it and i also want to show some

00:02:20,730 --> 00:02:31,920
examples like in the wild so when you

00:02:26,940 --> 00:02:34,470
start a project um usually all of us or

00:02:31,920 --> 00:02:36,780
at least i am i'm pretty excited because

00:02:34,470 --> 00:02:40,620
you know it's greenfield project and i

00:02:36,780 --> 00:02:43,230
want to do everything right i'm super

00:02:40,620 --> 00:02:44,640
excited i want i have the big picture of

00:02:43,230 --> 00:02:47,550
my product in mind and want to be I want

00:02:44,640 --> 00:02:49,650
to be fast and you know I want to avoid

00:02:47,550 --> 00:02:52,950
the mistakes I did and several projects

00:02:49,650 --> 00:02:56,520
before so it's all about software

00:02:52,950 --> 00:02:58,230
architecture right as a good engineer we

00:02:56,520 --> 00:03:00,570
care a lot about software architecture

00:02:58,230 --> 00:03:03,540
we're making a ton of plans choosing a

00:03:00,570 --> 00:03:06,090
framework and we want to work out the

00:03:03,540 --> 00:03:08,160
best of what's possible so we want to

00:03:06,090 --> 00:03:10,860
build the best and most stable system

00:03:08,160 --> 00:03:14,100
we've ever built right before I joined

00:03:10,860 --> 00:03:16,740
gym do I work at an incubator also in

00:03:14,100 --> 00:03:18,200
Hamburg and it was it was a great time

00:03:16,740 --> 00:03:20,670
for me because I had the opportunity

00:03:18,200 --> 00:03:22,980
every three months to start a new

00:03:20,670 --> 00:03:26,970
greenfield project which is really

00:03:22,980 --> 00:03:30,620
really cool so when I started there we

00:03:26,970 --> 00:03:34,320
had the idea of a mobile flea market and

00:03:30,620 --> 00:03:36,120
it should be an iOS app so we didn't had

00:03:34,320 --> 00:03:39,270
any iOS developers so we decided to

00:03:36,120 --> 00:03:43,860
visit with her was off offshore company

00:03:39,270 --> 00:03:45,660
also in Germany so we had an API spec

00:03:43,860 --> 00:03:49,860
which I had to fulfill as a backend

00:03:45,660 --> 00:03:51,960
engineer and you know I was totally

00:03:49,860 --> 00:03:53,490
focusing on on how to do it right so I

00:03:51,960 --> 00:03:56,190
made a ton of plans you know I had a

00:03:53,490 --> 00:03:57,780
system design in my head and I totally

00:03:56,190 --> 00:04:00,120
wanted to make it was symfony2 because

00:03:57,780 --> 00:04:02,700
it's it was super new at this time and I

00:04:00,120 --> 00:04:05,580
heard this super super good to building

00:04:02,700 --> 00:04:07,070
your stuff and all my jobs before I

00:04:05,580 --> 00:04:09,240
always had to deal with legacy

00:04:07,070 --> 00:04:11,100
self-written frameworks and stuff so I

00:04:09,240 --> 00:04:14,610
really felt that this one would be a

00:04:11,100 --> 00:04:16,620
good thing and recite the architecture

00:04:14,610 --> 00:04:22,010
it's also about you know beautiful

00:04:16,620 --> 00:04:24,300
software any of you riding uml diagrams

00:04:22,010 --> 00:04:26,880
okay that's really three people that's

00:04:24,300 --> 00:04:27,570
great because I also don't do it frankly

00:04:26,880 --> 00:04:28,800
that might be reason

00:04:27,570 --> 00:04:32,160
to do it so I don't want to rant about

00:04:28,800 --> 00:04:35,120
that but I at least I feel like an age

00:04:32,160 --> 00:04:38,010
I'll and you know PHP startup land world

00:04:35,120 --> 00:04:41,630
it's not java right even if some people

00:04:38,010 --> 00:04:43,800
treat it like that so beautiful software

00:04:41,630 --> 00:04:45,870
do you know that feeling when you've

00:04:43,800 --> 00:04:48,210
just like written a class and it's fully

00:04:45,870 --> 00:04:50,940
tested and it fits onto your screen is

00:04:48,210 --> 00:04:52,710
just like three methods when I when I

00:04:50,940 --> 00:04:55,110
have this moment this is like I'm wow

00:04:52,710 --> 00:04:56,850
this is so so beautiful i want you know

00:04:55,110 --> 00:04:58,350
i just wanted to lean back and watch my

00:04:56,850 --> 00:05:01,650
code for about five minutes I'm feeling

00:04:58,350 --> 00:05:02,970
great so you know that feeling it's

00:05:01,650 --> 00:05:04,200
great so it's really about beautiful

00:05:02,970 --> 00:05:06,240
software right beautiful design

00:05:04,200 --> 00:05:08,130
beautiful classes everything is tested

00:05:06,240 --> 00:05:13,080
and you feel really really confident

00:05:08,130 --> 00:05:16,530
about shipping it but you know time time

00:05:13,080 --> 00:05:20,220
vent by and even in the company we did

00:05:16,530 --> 00:05:22,770
when the start of thing it's getting

00:05:20,220 --> 00:05:25,380
complicated overtime right so we're not

00:05:22,770 --> 00:05:29,910
a starter many more people joining the

00:05:25,380 --> 00:05:31,620
team and it's not only you doing doing

00:05:29,910 --> 00:05:33,720
the coding right so there might be some

00:05:31,620 --> 00:05:36,960
more junior guys there might be some

00:05:33,720 --> 00:05:39,660
students and in the worst case you have

00:05:36,960 --> 00:05:41,580
some India offshore stuff which it's

00:05:39,660 --> 00:05:44,670
mostly you know not not the best quality

00:05:41,580 --> 00:05:46,440
let me say like this so the code grows

00:05:44,670 --> 00:05:48,660
it's getting more complex and if you're

00:05:46,440 --> 00:05:50,760
taking metrics like rights of code this

00:05:48,660 --> 00:05:53,270
metric is like exploding even if your

00:05:50,760 --> 00:05:56,910
features I like kind of staying the same

00:05:53,270 --> 00:05:58,980
this is really hard um luckily when I

00:05:56,910 --> 00:06:01,740
was at the the iOS mobile free market

00:05:58,980 --> 00:06:04,410
stuff we were an incubator so before

00:06:01,740 --> 00:06:06,090
this happened I just passed away I

00:06:04,410 --> 00:06:07,590
handed over to another team to the

00:06:06,090 --> 00:06:09,960
founders team and I went off to the next

00:06:07,590 --> 00:06:12,360
Greenfield one there was a very happy

00:06:09,960 --> 00:06:15,240
time for me but unfortunately the

00:06:12,360 --> 00:06:17,610
incubator lost all its money even that

00:06:15,240 --> 00:06:19,290
can happen and I had to look for a new

00:06:17,610 --> 00:06:23,040
job so I joined my current company which

00:06:19,290 --> 00:06:27,300
is Jim do and Jim knew you know is it

00:06:23,040 --> 00:06:30,230
started in 2006 and it's like all the

00:06:27,300 --> 00:06:33,870
founders written the first version and

00:06:30,230 --> 00:06:35,370
it's like a monitor thingy I don't want

00:06:33,870 --> 00:06:37,590
to rent too much but you know how I cool

00:06:35,370 --> 00:06:39,970
how code looks like when it's bill 2006

00:06:37,590 --> 00:06:42,729
right and it still maintained

00:06:39,970 --> 00:06:49,610
luckily we got rid of page before now

00:06:42,729 --> 00:06:51,320
last year sorry so um I got like I got

00:06:49,610 --> 00:06:53,389
like a fast-forward because from a

00:06:51,320 --> 00:06:56,120
start-up point of view to that point

00:06:53,389 --> 00:06:58,759
it's usually five or six years and I had

00:06:56,120 --> 00:07:02,630
it because I switched the jobs within

00:06:58,759 --> 00:07:04,400
two months so I really see now what does

00:07:02,630 --> 00:07:05,810
it mean when you have a team of 50

00:07:04,400 --> 00:07:08,960
developers working on the same code base

00:07:05,810 --> 00:07:11,000
and you have to make you know take have

00:07:08,960 --> 00:07:13,580
you tried to make a technology decision

00:07:11,000 --> 00:07:17,870
with 50 people like agreeing on that one

00:07:13,580 --> 00:07:20,630
database it's you know it's horrible you

00:07:17,870 --> 00:07:22,220
should never do it because you get 50

00:07:20,630 --> 00:07:24,229
people and you've got 60 opinions and

00:07:22,220 --> 00:07:25,669
how does the room want to use no sequel

00:07:24,229 --> 00:07:29,270
and the other ones want to use

00:07:25,669 --> 00:07:31,729
phosphorus and there's my sequel and you

00:07:29,270 --> 00:07:36,110
can really you can't even agree on one

00:07:31,729 --> 00:07:38,539
thing so this is really hard and you

00:07:36,110 --> 00:07:41,810
should change before it's too late so

00:07:38,539 --> 00:07:45,409
there is a time when your project is

00:07:41,810 --> 00:07:48,530
growing we should realize well when I if

00:07:45,409 --> 00:07:50,860
I if I wouldn't stop now this one would

00:07:48,530 --> 00:07:54,020
be the next monolith big ball of modern

00:07:50,860 --> 00:07:57,949
you won't be able to split it even if

00:07:54,020 --> 00:07:59,810
you put like one year work in it so it's

00:07:57,949 --> 00:08:01,669
really hard and I know it's really hard

00:07:59,810 --> 00:08:03,970
to find that time because you know just

00:08:01,669 --> 00:08:06,229
you know daily life passes by and your

00:08:03,970 --> 00:08:08,710
to your features you have to implement

00:08:06,229 --> 00:08:12,979
and their stuff which has to be done and

00:08:08,710 --> 00:08:14,750
I know it's hard and if you would ask me

00:08:12,979 --> 00:08:17,120
what is the right time I have no idea

00:08:14,750 --> 00:08:19,159
it's just really you should reflect on

00:08:17,120 --> 00:08:21,320
yourself what's the code base like and

00:08:19,159 --> 00:08:24,099
if you should split it into into more

00:08:21,320 --> 00:08:24,099
different services

00:08:29,460 --> 00:08:38,590
so that's why Nexus what so what what

00:08:36,670 --> 00:08:42,610
does service oriented architecture means

00:08:38,590 --> 00:08:44,080
i mean it's it's more like a password at

00:08:42,610 --> 00:08:45,850
the moment right so there's no real

00:08:44,080 --> 00:08:48,070
definition i mean you could just pick up

00:08:45,850 --> 00:08:51,190
Wikipedia and Ted what's saying but this

00:08:48,070 --> 00:08:53,020
is just theory so for me I like to quote

00:08:51,190 --> 00:08:54,850
Amazon because Amazon is doing pretty

00:08:53,020 --> 00:08:57,490
great when it comes to that and this is

00:08:54,850 --> 00:08:59,950
vanna for go see CEO of amazon and he

00:08:57,490 --> 00:09:02,140
did this quote service orientation means

00:08:59,950 --> 00:09:04,090
in capturing data with the business

00:09:02,140 --> 00:09:06,340
logic that operates on the data with the

00:09:04,090 --> 00:09:09,820
only access to publish service interface

00:09:06,340 --> 00:09:12,310
and if your goal for today was to know

00:09:09,820 --> 00:09:14,200
what service architecture is you're

00:09:12,310 --> 00:09:16,930
gonna go now that is service or

00:09:14,200 --> 00:09:18,880
interaction for me but you know we have

00:09:16,930 --> 00:09:22,570
quite of time left so I I will go into

00:09:18,880 --> 00:09:24,910
some detail but but before I like to

00:09:22,570 --> 00:09:29,770
make another quote and it's again from

00:09:24,910 --> 00:09:31,240
amazon this one is Jeff Bezos um he

00:09:29,770 --> 00:09:33,810
recently bought bought like em and

00:09:31,240 --> 00:09:38,700
newspaper stuff you might hear of him um

00:09:33,810 --> 00:09:43,060
he sent out an email back in 2006 to all

00:09:38,700 --> 00:09:45,060
amazon employees it's like it's not

00:09:43,060 --> 00:09:47,290
switching rohini was kind of hanging um

00:09:45,060 --> 00:09:49,270
so he's sending out this mail i

00:09:47,290 --> 00:09:50,560
commended to every amazon employee at

00:09:49,270 --> 00:09:52,840
this time and everything at this time

00:09:50,560 --> 00:09:55,360
was already pretty pretty big right they

00:09:52,840 --> 00:09:58,150
had quite a bunch of employees and I'm

00:09:55,360 --> 00:09:59,950
Aquino is really great so he sent again

00:09:58,150 --> 00:10:01,360
he sent out this image really all

00:09:59,950 --> 00:10:03,840
employees you know we have to imagine

00:10:01,360 --> 00:10:06,520
it's like a really bunch of people and

00:10:03,840 --> 00:10:08,590
this this was mentioned all teams will

00:10:06,520 --> 00:10:11,550
henceforth expose their data in

00:10:08,590 --> 00:10:14,500
functionality through service interfaces

00:10:11,550 --> 00:10:17,560
teams must communicate through these

00:10:14,500 --> 00:10:19,180
interfaces which these other there will

00:10:17,560 --> 00:10:21,010
be there will be no other form of

00:10:19,180 --> 00:10:23,260
inter-process communication allowed no

00:10:21,010 --> 00:10:25,390
direct linking no direct reads of other

00:10:23,260 --> 00:10:28,630
teams data store no shared memory model

00:10:25,390 --> 00:10:30,670
no doubt no back doors whatsoever the

00:10:28,630 --> 00:10:33,340
only communication allowed is via 7f

00:10:30,670 --> 00:10:36,760
faced cause over the network it doesn't

00:10:33,340 --> 00:10:38,560
matter what technology they use and all

00:10:36,760 --> 00:10:40,420
service interfaces without exception

00:10:38,560 --> 00:10:42,130
must be designed from the ground up to

00:10:40,420 --> 00:10:44,230
be externalized able

00:10:42,130 --> 00:10:46,870
that is to say that he must plan and

00:10:44,230 --> 00:10:49,300
design to be able to expose their

00:10:46,870 --> 00:10:54,130
interface to developers in the outside

00:10:49,300 --> 00:10:56,890
world no exception and he closed this

00:10:54,130 --> 00:10:59,020
that men dead was anyone who does not

00:10:56,890 --> 00:11:05,980
follow this will be fired thank you have

00:10:59,020 --> 00:11:08,170
a nice day I mean what right ah this is

00:11:05,980 --> 00:11:10,300
a really tough statement and if I would

00:11:08,170 --> 00:11:14,530
have received this in this email I think

00:11:10,300 --> 00:11:17,680
I would quit um but you know it was back

00:11:14,530 --> 00:11:19,210
in two thousand six and really think of

00:11:17,680 --> 00:11:22,990
what happened with amazon since the

00:11:19,210 --> 00:11:24,340
stade they they really followed this and

00:11:22,990 --> 00:11:27,100
they followed it really really strictly

00:11:24,340 --> 00:11:29,200
and now they got amazon web services and

00:11:27,100 --> 00:11:31,090
they got super super rich and they're

00:11:29,200 --> 00:11:33,820
the biggest cloud you know around and

00:11:31,090 --> 00:11:36,130
everyone knows it and so this email had

00:11:33,820 --> 00:11:38,020
quite a lot of impact on amazon it was

00:11:36,130 --> 00:11:40,810
like the the really beginning of amazon

00:11:38,020 --> 00:11:45,850
web services so that's why i really like

00:11:40,810 --> 00:11:49,260
to make this quote but before we go on

00:11:45,850 --> 00:11:52,600
there son Kota I would like to read out

00:11:49,260 --> 00:11:55,630
this one is from melvin melvin conway

00:11:52,600 --> 00:11:57,220
and he says organization which design

00:11:55,630 --> 00:11:59,050
systems are constrained to produce

00:11:57,220 --> 00:12:00,640
designs which are copies of the

00:11:59,050 --> 00:12:04,050
communication structures of these

00:12:00,640 --> 00:12:07,900
organizations um I see a few of you like

00:12:04,050 --> 00:12:10,360
agreeing on there and if you don't agree

00:12:07,900 --> 00:12:12,790
on that yet just think of your current

00:12:10,360 --> 00:12:15,130
project you're working on um if you're a

00:12:12,790 --> 00:12:18,940
small team I would bet you of a small

00:12:15,130 --> 00:12:20,890
code base and you know it's really well

00:12:18,940 --> 00:12:23,380
designed because you have clear you have

00:12:20,890 --> 00:12:25,210
a clear communication structure and to

00:12:23,380 --> 00:12:29,740
put the example back to my current

00:12:25,210 --> 00:12:32,950
company we're a team of 50 people but we

00:12:29,740 --> 00:12:34,690
are divided into like sub teams so we

00:12:32,950 --> 00:12:37,630
have a payment team for example we have

00:12:34,690 --> 00:12:39,700
a feature team and we have a platform

00:12:37,630 --> 00:12:41,950
team and when you look at our code base

00:12:39,700 --> 00:12:45,340
even if it's just one repository you

00:12:41,950 --> 00:12:49,060
really see who who belongs so this class

00:12:45,340 --> 00:12:50,530
to whom it belongs and whenever I think

00:12:49,060 --> 00:12:52,930
about their statements i got another

00:12:50,530 --> 00:12:56,790
example department up in my mind why is

00:12:52,930 --> 00:12:59,400
this is so true but there's more

00:12:56,790 --> 00:13:03,400
there's even more more reasons to do so

00:12:59,400 --> 00:13:05,410
oriented architecture first you can

00:13:03,400 --> 00:13:07,690
really have faster decisions because you

00:13:05,410 --> 00:13:11,740
can lower the amount of people per code

00:13:07,690 --> 00:13:13,990
base as I mentioned before making a

00:13:11,740 --> 00:13:16,780
technology technology decision with 50

00:13:13,990 --> 00:13:18,610
people it's kind of impossible so when

00:13:16,780 --> 00:13:20,920
you would split up your services into

00:13:18,610 --> 00:13:22,570
smaller ones with smaller teams every

00:13:20,920 --> 00:13:24,490
team can agree on what they want to do

00:13:22,570 --> 00:13:26,230
and they don't have to ask like all the

00:13:24,490 --> 00:13:28,900
40 other people because it's their

00:13:26,230 --> 00:13:30,280
responsibility to do it and by the way

00:13:28,900 --> 00:13:33,280
this is how the Ukraine is doing

00:13:30,280 --> 00:13:36,760
democracy you can unload

00:13:33,280 --> 00:13:38,560
responsibilities you're as a team really

00:13:36,760 --> 00:13:40,780
are responsible for that service you are

00:13:38,560 --> 00:13:42,820
doing imagine you're doing the payment

00:13:40,780 --> 00:13:44,500
service almost every company has it

00:13:42,820 --> 00:13:47,410
right otherwise they can't afford you to

00:13:44,500 --> 00:13:49,840
go here so a payment thing is really

00:13:47,410 --> 00:13:51,550
cool because the feature team isn't

00:13:49,840 --> 00:13:53,650
responsible for what's happening over

00:13:51,550 --> 00:13:55,390
there right they just don't have to care

00:13:53,650 --> 00:13:58,750
and it's funny when you talk to

00:13:55,390 --> 00:14:01,480
developers talking about payment it's

00:13:58,750 --> 00:14:03,580
like binary state people just love it

00:14:01,480 --> 00:14:05,530
and they're totally into it or people

00:14:03,580 --> 00:14:08,260
just don't want to deal with with

00:14:05,530 --> 00:14:10,600
it I I'm the one I don't want to deal

00:14:08,260 --> 00:14:12,400
anything with it so I'm really happy if

00:14:10,600 --> 00:14:14,290
there's a team being responsible for all

00:14:12,400 --> 00:14:15,640
these kind of things and usually the

00:14:14,290 --> 00:14:18,340
payment developers at least the one I

00:14:15,640 --> 00:14:20,410
know they hate all this stuff which is

00:14:18,340 --> 00:14:22,000
user facing so they hate implementing

00:14:20,410 --> 00:14:25,450
really cool features which make the use

00:14:22,000 --> 00:14:27,220
of faster so you can really like no

00:14:25,450 --> 00:14:28,960
other responsibilities per service

00:14:27,220 --> 00:14:32,860
because you're only responsible for that

00:14:28,960 --> 00:14:37,150
one thing and you can even you know you

00:14:32,860 --> 00:14:39,460
can even reduce complexity other

00:14:37,150 --> 00:14:41,920
pictures is great right there's this a

00:14:39,460 --> 00:14:43,750
fun fact about this picture and when it

00:14:41,920 --> 00:14:46,030
was googling for it actually there's

00:14:43,750 --> 00:14:48,310
another one it's like this but it's a

00:14:46,030 --> 00:14:52,330
black phone so he did this more than

00:14:48,310 --> 00:14:56,470
once but anyway so you can reduce

00:14:52,330 --> 00:14:58,960
complexity in your app in your service

00:14:56,470 --> 00:15:01,300
in your code base right and reduced

00:14:58,960 --> 00:15:04,330
complexity has like a bunch bunch bunch

00:15:01,300 --> 00:15:06,010
of good things commonly wrong which

00:15:04,330 --> 00:15:08,470
is easier onboarding you know what I

00:15:06,010 --> 00:15:09,290
joined gym new I found myself with this

00:15:08,470 --> 00:15:11,509
one repository

00:15:09,290 --> 00:15:14,930
rhiannon took me about a month to dig

00:15:11,509 --> 00:15:16,790
through it and when I remember that time

00:15:14,930 --> 00:15:19,009
when i joined like smaller companies and

00:15:16,790 --> 00:15:22,250
smaller code bases it was just you know

00:15:19,009 --> 00:15:25,370
I it took me about a day to get all the

00:15:22,250 --> 00:15:27,680
stuff so you get easier onboarding and

00:15:25,370 --> 00:15:30,889
you can have faster development because

00:15:27,680 --> 00:15:33,800
people would be more convenient and

00:15:30,889 --> 00:15:38,480
there would be more certain in this

00:15:33,800 --> 00:15:42,889
changes they are doing right and this is

00:15:38,480 --> 00:15:46,069
really cool and you can again lower the

00:15:42,889 --> 00:15:48,560
the code base as it is so you get much

00:15:46,069 --> 00:15:50,380
happier developers right with a smaller

00:15:48,560 --> 00:15:53,029
code base you can do more deployments

00:15:50,380 --> 00:15:56,690
because you're more confident about what

00:15:53,029 --> 00:15:58,940
you're doing and you get you know you

00:15:56,690 --> 00:16:01,250
can get heavier developers and happier

00:15:58,940 --> 00:16:03,139
developers is always a thing you should

00:16:01,250 --> 00:16:05,329
aim for because they will stay you know

00:16:03,139 --> 00:16:08,480
they won't ask you for even more money

00:16:05,329 --> 00:16:11,360
because they love to work with your code

00:16:08,480 --> 00:16:13,040
base so this is really cool and you can

00:16:11,360 --> 00:16:16,220
win it scaling because you can scale

00:16:13,040 --> 00:16:18,260
each service independently so you don't

00:16:16,220 --> 00:16:21,260
have to scale your big ball of mud with

00:16:18,260 --> 00:16:24,019
you know adding more service or buying

00:16:21,260 --> 00:16:28,430
bigger ones you can just scale this

00:16:24,019 --> 00:16:30,980
service with the need for it imagine you

00:16:28,430 --> 00:16:32,810
have this big bowl and your bottleneck

00:16:30,980 --> 00:16:33,889
is the database and when you have just

00:16:32,810 --> 00:16:36,589
one thing you have to scale everything

00:16:33,889 --> 00:16:38,720
maybe and if another service just don't

00:16:36,589 --> 00:16:41,329
need this kind of scaling so that one is

00:16:38,720 --> 00:16:42,829
really is really important and to that

00:16:41,329 --> 00:16:44,720
picture by the way he's not like doing

00:16:42,829 --> 00:16:57,680
this winning fist actually he's eating

00:16:44,720 --> 00:16:59,420
sand okay enough memes um how right I

00:16:57,680 --> 00:17:01,279
promise you I'll talk about how you can

00:16:59,420 --> 00:17:03,199
how you can do service oriented

00:17:01,279 --> 00:17:06,309
architecture so that should be the next

00:17:03,199 --> 00:17:11,169
the next few slides first of all you

00:17:06,309 --> 00:17:14,419
should build your platform right and

00:17:11,169 --> 00:17:16,540
they're a bunch of steps how to do it

00:17:14,419 --> 00:17:19,549
right so how to build the right platform

00:17:16,540 --> 00:17:22,550
first you should really the state

00:17:19,549 --> 00:17:24,440
and when I say state and don't say

00:17:22,550 --> 00:17:26,720
a the country I don't want to I don't

00:17:24,440 --> 00:17:29,300
mean a country it's you know it's your

00:17:26,720 --> 00:17:32,090
application state your application have

00:17:29,300 --> 00:17:33,710
to be stateless there's no way around it

00:17:32,090 --> 00:17:36,110
when you want to scale and when you want

00:17:33,710 --> 00:17:39,500
to do a good platform your application

00:17:36,110 --> 00:17:41,480
have to be stateless in the old I like

00:17:39,500 --> 00:17:44,630
to do another gym to example so we had

00:17:41,480 --> 00:17:46,130
the system which is delivering websites

00:17:44,630 --> 00:17:49,100
because you know website builder blah

00:17:46,130 --> 00:17:51,350
blah blah and back in two thousand eight

00:17:49,100 --> 00:17:54,530
there wasn't a time when I wasn't at

00:17:51,350 --> 00:17:56,710
this company our CTO was at a tech

00:17:54,530 --> 00:18:00,680
conference and he heard a talk about

00:17:56,710 --> 00:18:02,300
sequel I'd and the day after he came

00:18:00,680 --> 00:18:03,740
back into the office and said you know I

00:18:02,300 --> 00:18:05,600
was at the conference and hear what

00:18:03,740 --> 00:18:06,740
secret light and this would be so cool

00:18:05,600 --> 00:18:09,730
for Jim knew because you know we can

00:18:06,740 --> 00:18:12,080
every customer their own database and

00:18:09,730 --> 00:18:15,620
unfortunately I wasn't there so I can I

00:18:12,080 --> 00:18:16,910
go against it so till that date every

00:18:15,620 --> 00:18:23,450
gym new customer had their own database

00:18:16,910 --> 00:18:25,430
on the five system okay this is not the

00:18:23,450 --> 00:18:29,660
only thing why we can scale and why we

00:18:25,430 --> 00:18:32,210
can't split it up but this was saying we

00:18:29,660 --> 00:18:34,400
so it doesn't take long till till we

00:18:32,210 --> 00:18:36,470
realize that is a bad that it is where

00:18:34,400 --> 00:18:39,980
thing but at this point it was already

00:18:36,470 --> 00:18:42,260
implemented and used so I'm implementing

00:18:39,980 --> 00:18:45,980
a feature takes way more time than

00:18:42,260 --> 00:18:48,680
implementing it right so there was a

00:18:45,980 --> 00:18:52,370
tough task and we had you know we had to

00:18:48,680 --> 00:18:54,950
do features so that's why it took about

00:18:52,370 --> 00:18:56,720
five years to do it and what I joined

00:18:54,950 --> 00:18:58,280
the company and I stumbled about the

00:18:56,720 --> 00:19:00,050
sequel aight i just grabbed the

00:18:58,280 --> 00:19:02,780
colleague who implemented it back in the

00:19:00,050 --> 00:19:05,480
days and said you know we both going for

00:19:02,780 --> 00:19:08,090
offside sprint now and taking two months

00:19:05,480 --> 00:19:09,860
off to refactor the out and yeah

00:19:08,090 --> 00:19:11,840
this is what happened so now we are rid

00:19:09,860 --> 00:19:15,440
of sequel I'd which is really great and

00:19:11,840 --> 00:19:17,330
now we can scale these systems so every

00:19:15,440 --> 00:19:19,160
server now can deliver every website

00:19:17,330 --> 00:19:22,130
which is really cool because there is no

00:19:19,160 --> 00:19:26,090
stayed at the single server so being

00:19:22,130 --> 00:19:29,060
stateless is super important and you

00:19:26,090 --> 00:19:30,740
should build up confidence you know when

00:19:29,060 --> 00:19:34,790
you're building a service-oriented

00:19:30,740 --> 00:19:36,230
architecture for your product um there's

00:19:34,790 --> 00:19:39,950
always the question

00:19:36,230 --> 00:19:42,290
we deal with on occasion right you might

00:19:39,950 --> 00:19:44,450
have calls which should not be

00:19:42,290 --> 00:19:46,460
accessible from the outside world so

00:19:44,450 --> 00:19:48,770
your customers shouldn't do these calls

00:19:46,460 --> 00:19:52,280
directly they should just an internal

00:19:48,770 --> 00:19:55,130
service so I've seen unfortunately very

00:19:52,280 --> 00:19:57,350
very much companies they're going with

00:19:55,130 --> 00:19:59,990
the VPN solution so they say okay you

00:19:57,350 --> 00:20:03,169
know I just have my web servers like

00:19:59,990 --> 00:20:04,760
shielding my internal VPN and all the

00:20:03,169 --> 00:20:06,710
service I'm doing it I needing

00:20:04,760 --> 00:20:09,830
internally they are resonating inside a

00:20:06,710 --> 00:20:11,240
VPN but I don't feel very confident

00:20:09,830 --> 00:20:12,980
about it because again it adds more

00:20:11,240 --> 00:20:17,120
complexity and as we heard complexities

00:20:12,980 --> 00:20:19,429
bad so what I would suggest is to use

00:20:17,120 --> 00:20:22,700
HTTP you know we are all very familiar

00:20:19,429 --> 00:20:25,669
with it and at a very basic level you

00:20:22,700 --> 00:20:27,830
get basic out this is like not very best

00:20:25,669 --> 00:20:29,419
when it comes to security relations and

00:20:27,830 --> 00:20:31,970
I know all the security people and he

00:20:29,419 --> 00:20:33,620
would kill me for that but you know it's

00:20:31,970 --> 00:20:35,809
it's a leap it's at least better than

00:20:33,620 --> 00:20:39,080
nothing the nothing and when you want to

00:20:35,809 --> 00:20:42,350
do more arm there's also like all things

00:20:39,080 --> 00:20:44,840
like odd to you can do and to not

00:20:42,350 --> 00:20:47,000
implement all the out handling over and

00:20:44,840 --> 00:20:51,230
over in every service you can just like

00:20:47,000 --> 00:20:53,540
think of a little proxy so like a little

00:20:51,230 --> 00:20:57,140
note proxy which just like doing the odd

00:20:53,540 --> 00:20:59,690
stuff so your service your PHP service

00:20:57,140 --> 00:21:01,910
does not listen to any public interface

00:20:59,690 --> 00:21:03,799
it's just listening to a to a local

00:21:01,910 --> 00:21:06,110
interface so your note service can like

00:21:03,799 --> 00:21:07,700
terminate the or indication and passes

00:21:06,110 --> 00:21:08,990
through this would make it even easier

00:21:07,700 --> 00:21:10,580
and development because you don't have

00:21:08,990 --> 00:21:13,549
to care about indication when you don't

00:21:10,580 --> 00:21:16,790
have this proxy in front and talking

00:21:13,549 --> 00:21:18,559
about confidence use ssl wherever it

00:21:16,790 --> 00:21:21,830
makes sense because when you're doing

00:21:18,559 --> 00:21:25,490
basic out do ssl you know you won't send

00:21:21,830 --> 00:21:28,130
your purse or plain um you should also

00:21:25,490 --> 00:21:31,130
design for independence so isolations

00:21:28,130 --> 00:21:33,500
like of the best word for this and this

00:21:31,130 --> 00:21:39,140
relates to the Amazon codes I just made

00:21:33,500 --> 00:21:41,179
um s Jeff Bezos said you should be able

00:21:39,140 --> 00:21:43,429
to found a company out of your service

00:21:41,179 --> 00:21:44,919
this is what I would like it's a good

00:21:43,429 --> 00:21:48,409
thing it's like a good rule of thumb

00:21:44,919 --> 00:21:49,490
that also prevent you to make too many

00:21:48,409 --> 00:21:51,440
services

00:21:49,490 --> 00:21:54,950
because you know you can even overdo

00:21:51,440 --> 00:21:57,350
this solar stuff imagine your company I

00:21:54,950 --> 00:22:00,200
don't know 20 developers and you have

00:21:57,350 --> 00:22:03,590
like 40 50 services nobody can ever

00:22:00,200 --> 00:22:06,320
maintain that so really be sure that

00:22:03,590 --> 00:22:09,500
it's not too small and that is there is

00:22:06,320 --> 00:22:13,670
enough of business logic inside the

00:22:09,500 --> 00:22:16,760
service and you should create

00:22:13,670 --> 00:22:18,650
reliability I love this topic because

00:22:16,760 --> 00:22:20,960
you know the last year I worked on our

00:22:18,650 --> 00:22:24,260
infrastructure team and this this point

00:22:20,960 --> 00:22:25,850
is a lot about infrastructure and I'm a

00:22:24,260 --> 00:22:28,670
really really big fan of infrastructure

00:22:25,850 --> 00:22:32,210
as a service because you don't have to

00:22:28,670 --> 00:22:34,280
care anything about your hardware even

00:22:32,210 --> 00:22:36,080
if it's maybe it's not just not hardware

00:22:34,280 --> 00:22:38,870
right so you can really focus on your

00:22:36,080 --> 00:22:41,000
business stuff and there are no failing

00:22:38,870 --> 00:22:43,400
hard disk there's no you know failing

00:22:41,000 --> 00:22:46,040
network components there is no I don't

00:22:43,400 --> 00:22:47,570
know rag which is overheated or whatever

00:22:46,040 --> 00:22:49,220
could happen to half where you

00:22:47,570 --> 00:22:51,950
just doesn't have to care so this is

00:22:49,220 --> 00:22:53,420
really what I could recommend and when

00:22:51,950 --> 00:22:55,340
you're doing infrastructure-as-a-service

00:22:53,420 --> 00:22:58,190
another point which is really important

00:22:55,340 --> 00:23:00,740
is automation so you should aim for a

00:22:58,190 --> 00:23:04,220
femoral host so a host could easily

00:23:00,740 --> 00:23:05,750
easily be replaced with another one just

00:23:04,220 --> 00:23:10,160
by running puppet or chef or any

00:23:05,750 --> 00:23:13,100
configuration system you want so you

00:23:10,160 --> 00:23:15,530
should you should be confident about

00:23:13,100 --> 00:23:17,390
when you're doing a service for your for

00:23:15,530 --> 00:23:20,660
your company and four other teams inside

00:23:17,390 --> 00:23:24,050
your company that you're responsible for

00:23:20,660 --> 00:23:26,929
that one so everyone in your company is

00:23:24,050 --> 00:23:33,200
relying on your service so you should

00:23:26,929 --> 00:23:33,950
really care about reliability and you

00:23:33,200 --> 00:23:36,710
might have heard of single

00:23:33,950 --> 00:23:41,150
responsibility principle mmm this is

00:23:36,710 --> 00:23:44,390
kind of the same but different so when

00:23:41,150 --> 00:23:46,520
you have PHP classes right there's the

00:23:44,390 --> 00:23:48,290
same responsibility and you know when

00:23:46,520 --> 00:23:50,929
you have a manager class it's definitely

00:23:48,290 --> 00:23:52,460
cold smell so because it's not doing one

00:23:50,929 --> 00:23:56,150
thing because it's manager do it at

00:23:52,460 --> 00:23:58,130
least twice or even more things when it

00:23:56,150 --> 00:24:01,190
comes to service Orion oriented

00:23:58,130 --> 00:24:03,440
architecture I think this manager stuff

00:24:01,190 --> 00:24:05,840
is good one so when you have like you

00:24:03,440 --> 00:24:09,379
management class make a service out of

00:24:05,840 --> 00:24:11,269
it right every every user related stuff

00:24:09,379 --> 00:24:14,029
can go into the service someone whenever

00:24:11,269 --> 00:24:16,070
you have a management thing it's a good

00:24:14,029 --> 00:24:19,970
indicator that you have that you can

00:24:16,070 --> 00:24:23,059
make a service out of that and talking

00:24:19,970 --> 00:24:24,789
about platforms circuit breaker is one

00:24:23,059 --> 00:24:26,929
pattern you should really know about

00:24:24,789 --> 00:24:30,019
have any of you heard about circuit

00:24:26,929 --> 00:24:34,399
breaker before oh that's right nobody

00:24:30,019 --> 00:24:36,470
okay I can explain in detail and I don't

00:24:34,399 --> 00:24:39,710
want it like I know anyone okay so

00:24:36,470 --> 00:24:41,990
circuit breaker means imagine you have a

00:24:39,710 --> 00:24:44,899
service only architecture and there's

00:24:41,990 --> 00:24:46,610
one service failing it has really

00:24:44,899 --> 00:24:49,370
troubled to fulfill the request right

00:24:46,610 --> 00:24:50,929
and imagine this one is very important

00:24:49,370 --> 00:24:53,330
so there are more services relying on

00:24:50,929 --> 00:24:56,179
that one and it's failing and I'm

00:24:53,330 --> 00:24:57,529
sending a request to it and it's just

00:24:56,179 --> 00:24:59,149
you know it can complete what I've send

00:24:57,529 --> 00:25:01,610
it and takes long and you know it's kind

00:24:59,149 --> 00:25:03,320
of struggling and I am sending more and

00:25:01,610 --> 00:25:04,879
more requests to it and the other ones

00:25:03,320 --> 00:25:07,190
are also sending requests and agree so

00:25:04,879 --> 00:25:10,100
they're hammering all the requests on an

00:25:07,190 --> 00:25:12,409
already broken service so how should

00:25:10,100 --> 00:25:13,789
this service ever recover right when

00:25:12,409 --> 00:25:16,879
they're even more requests like

00:25:13,789 --> 00:25:19,460
hammering it that's kind of possible so

00:25:16,879 --> 00:25:21,500
don't hammer requests on services which

00:25:19,460 --> 00:25:22,580
are already struggling and to do that

00:25:21,500 --> 00:25:24,440
you can have this circuit breaker

00:25:22,580 --> 00:25:26,960
pattern there are cool implementations

00:25:24,440 --> 00:25:28,970
for it there's some districts which is

00:25:26,960 --> 00:25:32,090
from the functional Netflix it's a JVM

00:25:28,970 --> 00:25:33,529
implementation and yammer just did a

00:25:32,090 --> 00:25:36,799
circuit breaker j/s which is the

00:25:33,529 --> 00:25:38,690
javascript implementation and when i'm

00:25:36,799 --> 00:25:40,820
now sending a request to a service

00:25:38,690 --> 00:25:42,590
there's a little little network layer in

00:25:40,820 --> 00:25:44,720
between which is the circuit breaker and

00:25:42,590 --> 00:25:47,210
when the circuit breaker realized that

00:25:44,720 --> 00:25:49,639
the service that's not answer in a given

00:25:47,210 --> 00:25:51,889
amount of time or the answer is like

00:25:49,639 --> 00:25:54,590
invalid it's like an error code 500 for

00:25:51,889 --> 00:25:56,330
example it would prevent all further

00:25:54,590 --> 00:25:58,370
coming requests and just send the last

00:25:56,330 --> 00:26:00,289
arrow one because the other one has to

00:25:58,370 --> 00:26:01,639
deal with it with the error then and

00:26:00,289 --> 00:26:03,350
this leads to my next point which is

00:26:01,639 --> 00:26:05,840
back pressure because when you have the

00:26:03,350 --> 00:26:07,549
circuit breaker in place there's still

00:26:05,840 --> 00:26:09,649
error in your system right it's not

00:26:07,549 --> 00:26:12,230
circuit breaker doesn't resolve any

00:26:09,649 --> 00:26:14,929
error so it's just preventing you know

00:26:12,230 --> 00:26:17,140
to do more damage so when this circuit

00:26:14,929 --> 00:26:21,460
breaker is doing um

00:26:17,140 --> 00:26:25,420
the the like re answering the request of

00:26:21,460 --> 00:26:27,130
a failure and there's a kind of back

00:26:25,420 --> 00:26:30,790
pressure popping up right because the

00:26:27,130 --> 00:26:32,530
failure is like now pump up pump back to

00:26:30,790 --> 00:26:35,440
the system which created it which

00:26:32,530 --> 00:26:38,350
created the request so you should like

00:26:35,440 --> 00:26:40,330
be aware that failures should stack up

00:26:38,350 --> 00:26:42,580
and you when your service can handle

00:26:40,330 --> 00:26:45,430
more ricos anymore don't accept more

00:26:42,580 --> 00:26:47,110
than you can handle so you don't have to

00:26:45,430 --> 00:26:49,930
take care of the failure which is

00:26:47,110 --> 00:26:52,240
happening so you should d couple right a

00:26:49,930 --> 00:26:54,520
good a good hint I can leave here it's

00:26:52,240 --> 00:26:56,440
like use cues for that so don't

00:26:54,520 --> 00:26:58,810
communicate directly just put a message

00:26:56,440 --> 00:27:01,890
into a queue and let you work us like

00:26:58,810 --> 00:27:04,600
let the other service read read that one

00:27:01,890 --> 00:27:08,560
so it's about building resilient systems

00:27:04,600 --> 00:27:11,410
and you should always remember your

00:27:08,560 --> 00:27:14,140
protocol so I'm a big fan of HTTP and I

00:27:11,410 --> 00:27:16,210
would assume you're also an HTTP you see

00:27:14,140 --> 00:27:20,050
really it's the only protocol which has

00:27:16,210 --> 00:27:21,940
proven to scale worldwide there is one

00:27:20,050 --> 00:27:23,650
petabyte of information into that

00:27:21,940 --> 00:27:25,620
protocol called like information on the

00:27:23,650 --> 00:27:30,130
Internet thanks both for my phone and

00:27:25,620 --> 00:27:32,350
there's 571 billion users using that

00:27:30,130 --> 00:27:36,340
protocol so this one is definitely

00:27:32,350 --> 00:27:38,470
proved to scale and you should not be

00:27:36,340 --> 00:27:40,150
but on the on the other hand you should

00:27:38,470 --> 00:27:42,610
not be afraid of doing your own there

00:27:40,150 --> 00:27:44,740
might be use cases and I don't know your

00:27:42,610 --> 00:27:48,480
use case where HTTP does not make sense

00:27:44,740 --> 00:27:51,550
because I don't know it's your use case

00:27:48,480 --> 00:27:53,860
but then it's totally fine to define

00:27:51,550 --> 00:27:58,330
your own but make sure you have checked

00:27:53,860 --> 00:28:01,050
all options before a my most important

00:27:58,330 --> 00:28:04,900
point notice building platform thing is

00:28:01,050 --> 00:28:07,570
timeouts I got another story for you so

00:28:04,900 --> 00:28:10,210
a friend of mine matias Maya he's

00:28:07,570 --> 00:28:11,470
working a travesty I and he just want he

00:28:10,210 --> 00:28:15,070
would just once told me you hoped only

00:28:11,470 --> 00:28:17,560
the story when we had a beer I guess you

00:28:15,070 --> 00:28:19,930
know Travis CI and so they're doing pull

00:28:17,560 --> 00:28:21,640
request testing on github right and they

00:28:19,930 --> 00:28:23,560
have one little worker checking the

00:28:21,640 --> 00:28:26,710
merge status so when I opening multiple

00:28:23,560 --> 00:28:28,030
requests Travis would be notified and

00:28:26,710 --> 00:28:29,380
then a Travis worker will check if

00:28:28,030 --> 00:28:31,180
there's one could be merged without a

00:28:29,380 --> 00:28:32,620
problem because otherwise

00:28:31,180 --> 00:28:37,390
it's just not necessary to start the

00:28:32,620 --> 00:28:41,110
test right so github once changed their

00:28:37,390 --> 00:28:44,320
API just a little bit and Travis just

00:28:41,110 --> 00:28:46,000
didn't realized that fast enough so what

00:28:44,320 --> 00:28:47,590
happened they removed the API field and

00:28:46,000 --> 00:28:51,340
the worker was trying to check that one

00:28:47,590 --> 00:28:53,920
field but it wasn't there anymore so the

00:28:51,340 --> 00:28:57,400
worker was retrying because there was a

00:28:53,920 --> 00:28:59,170
failure and was retrying and it took the

00:28:57,400 --> 00:29:01,720
work at 10 minutes to figure out that

00:28:59,170 --> 00:29:03,370
for that particular one pull request

00:29:01,720 --> 00:29:06,670
that the field is not not even there

00:29:03,370 --> 00:29:08,560
anymore so what happened is they have a

00:29:06,670 --> 00:29:11,500
queue and it filled out within two hours

00:29:08,560 --> 00:29:14,440
to the very maximum so they cannot

00:29:11,500 --> 00:29:16,450
accept even more so they had a timeout

00:29:14,440 --> 00:29:18,220
but it was set to 10 minutes which is

00:29:16,450 --> 00:29:20,050
was completely stupid in this case

00:29:18,220 --> 00:29:21,670
because it doesn't make any sense to

00:29:20,050 --> 00:29:23,560
wait 10 minutes when the work is broken

00:29:21,670 --> 00:29:24,940
right or when the response is broken so

00:29:23,560 --> 00:29:28,500
you should be really aware of timeouts

00:29:24,940 --> 00:29:31,140
and don't try infinitely just try for a

00:29:28,500 --> 00:29:33,130
for amount of time which makes sense and

00:29:31,140 --> 00:29:35,290
another thing you could get out of this

00:29:33,130 --> 00:29:37,360
story it's like don't have just one

00:29:35,290 --> 00:29:39,160
worker when it's like an important thing

00:29:37,360 --> 00:29:42,010
for your infrastructure I always have

00:29:39,160 --> 00:29:43,840
one more than one and on the fun part it

00:29:42,010 --> 00:29:47,070
took them like one day to get all the

00:29:43,840 --> 00:29:49,390
jobs done it was like a bigger outage

00:29:47,070 --> 00:29:51,640
those arias is saying that people

00:29:49,390 --> 00:29:54,460
remembering three parts out of him out

00:29:51,640 --> 00:29:57,490
of representation right I'm giving you

00:29:54,460 --> 00:29:59,590
lots of facts today and when you would

00:29:57,490 --> 00:30:01,930
just remember three things I want that

00:29:59,590 --> 00:30:05,110
time odds would be the first remember

00:30:01,930 --> 00:30:07,210
when you're doing like ZOA use timeouts

00:30:05,110 --> 00:30:09,690
video timeouts it's super super

00:30:07,210 --> 00:30:09,690
important

00:30:13,940 --> 00:30:20,750
alright so interface right now we have

00:30:17,690 --> 00:30:23,000
our platform like build up and it's when

00:30:20,750 --> 00:30:24,590
you follow all the advices in there you

00:30:23,000 --> 00:30:28,370
would be I would be your customer

00:30:24,590 --> 00:30:30,019
instantly it's really hard to do

00:30:28,370 --> 00:30:33,519
everything right I just wanted to you

00:30:30,019 --> 00:30:35,690
know describe what it could be like and

00:30:33,519 --> 00:30:38,029
now you have your platform down yeah I

00:30:35,690 --> 00:30:40,100
was running but how should other people

00:30:38,029 --> 00:30:42,980
talk with your service right so you have

00:30:40,100 --> 00:30:45,409
to define an interface and there are

00:30:42,980 --> 00:30:47,990
several ways to do it the first ways no

00:30:45,409 --> 00:30:50,419
you can define a high level protocol or

00:30:47,990 --> 00:30:51,799
not defined you can use one high level

00:30:50,419 --> 00:30:54,100
protocols so the first I'd like to

00:30:51,799 --> 00:30:58,940
mention riff right you can go for xmlrpc

00:30:54,100 --> 00:31:00,110
or you could go for so up but you have

00:30:58,940 --> 00:31:02,210
you know you have you should have in

00:31:00,110 --> 00:31:04,220
mind that there are some requirements

00:31:02,210 --> 00:31:07,750
for protocol right so the first is ease

00:31:04,220 --> 00:31:11,779
of use so soap and xml RPC i come about

00:31:07,750 --> 00:31:13,039
this rift I don't know that might be

00:31:11,779 --> 00:31:14,720
good use cases for that I'm just not a

00:31:13,039 --> 00:31:16,870
big fan of it but I don't want to run it

00:31:14,720 --> 00:31:19,279
and you know in front of public audience

00:31:16,870 --> 00:31:22,210
but what is really important that is

00:31:19,279 --> 00:31:24,529
should be developer and machine friendly

00:31:22,210 --> 00:31:27,769
and that's like the requirements you

00:31:24,529 --> 00:31:30,980
should have on a protocol and you can

00:31:27,769 --> 00:31:33,440
even go for message queues so reven mq

00:31:30,980 --> 00:31:37,159
is a possible thing SQS from amazon or

00:31:33,440 --> 00:31:38,990
zookeeper and they offer you reliability

00:31:37,159 --> 00:31:40,879
as you saw on the on the slides before

00:31:38,990 --> 00:31:41,870
reliability is a very important thing

00:31:40,879 --> 00:31:44,779
when you do a service oriented

00:31:41,870 --> 00:31:46,600
architecture so it would guarantee you

00:31:44,779 --> 00:31:48,590
that you won't ever lose a message

00:31:46,600 --> 00:31:50,120
imagine you for payment service for a

00:31:48,590 --> 00:31:51,470
company right I love the payment as an

00:31:50,120 --> 00:31:54,980
example because payment has lots of cool

00:31:51,470 --> 00:31:56,659
constraints um when the customer is

00:31:54,980 --> 00:31:59,029
requesting like the customer wants to

00:31:56,659 --> 00:32:01,610
buy your stuff you should not lose his

00:31:59,029 --> 00:32:03,049
request don't matter what's up with the

00:32:01,610 --> 00:32:05,809
infrastructure when he wants to give you

00:32:03,049 --> 00:32:08,120
money if you want to make sure that the

00:32:05,809 --> 00:32:11,450
Roofus is not lost so Hughes would offer

00:32:08,120 --> 00:32:13,639
that kind of reliability depending on

00:32:11,450 --> 00:32:16,519
the queue they are fast or easy to

00:32:13,639 --> 00:32:19,039
manage you should know what you want to

00:32:16,519 --> 00:32:20,419
use and I even brought some really

00:32:19,039 --> 00:32:22,789
shitty diagrams like how it could work

00:32:20,419 --> 00:32:24,070
right so on the left left right left

00:32:22,789 --> 00:32:26,530
side

00:32:24,070 --> 00:32:28,330
you got your service and its publishing

00:32:26,530 --> 00:32:29,590
the job into the queue and then there's

00:32:28,330 --> 00:32:32,950
the other stuff is getting a job out of

00:32:29,590 --> 00:32:35,710
it it's really basic you can go way

00:32:32,950 --> 00:32:38,910
advance to set up but it would just not

00:32:35,710 --> 00:32:41,590
fit in this talk to make it more detail

00:32:38,910 --> 00:32:44,110
you know your service is I would assume

00:32:41,590 --> 00:32:45,940
it's a web server and it would again

00:32:44,110 --> 00:32:48,250
publish into the queue and the other

00:32:45,940 --> 00:32:49,840
service hopefully have more than one

00:32:48,250 --> 00:32:55,450
worker as i mentioned to get this job

00:32:49,840 --> 00:32:57,550
out of there and what you what you can

00:32:55,450 --> 00:33:00,580
do is like you can do a classic HTTP API

00:32:57,550 --> 00:33:02,430
right I'm a big big fan of HTTP I just

00:33:00,580 --> 00:33:05,140
love that protocol if I'd realized

00:33:02,430 --> 00:33:08,650
because there's so much stuff you would

00:33:05,140 --> 00:33:10,720
need it's already built into it have you

00:33:08,650 --> 00:33:12,280
seen and I know symphony does it too and

00:33:10,720 --> 00:33:15,820
lots of framework dozen they don't get

00:33:12,280 --> 00:33:19,300
it at all imagine I have a rest like API

00:33:15,820 --> 00:33:20,680
and I want to have a JSON response what

00:33:19,300 --> 00:33:24,430
does all people do they appended doc

00:33:20,680 --> 00:33:26,560
Jason this is really crab you know there

00:33:24,430 --> 00:33:29,110
is there are accept header when you want

00:33:26,560 --> 00:33:32,140
to have Jason just tell the server

00:33:29,110 --> 00:33:34,150
you're only accepting Jason there's no

00:33:32,140 --> 00:33:36,550
need for this dot whatever format stuff

00:33:34,150 --> 00:33:39,310
but for when some reason I don't know

00:33:36,550 --> 00:33:41,680
they all doing it there's also content

00:33:39,310 --> 00:33:44,260
type right so whenever you are sending

00:33:41,680 --> 00:33:47,440
out a response tell what your response

00:33:44,260 --> 00:33:50,740
is tell that it's HT HTML tell that is

00:33:47,440 --> 00:33:53,260
Jason tell that it's XML whatever right

00:33:50,740 --> 00:33:54,790
so you make use of it and when you have

00:33:53,260 --> 00:33:58,450
when you want to send media information

00:33:54,790 --> 00:34:01,390
which does not fit any header and you

00:33:58,450 --> 00:34:02,890
can go with the X dash something you can

00:34:01,390 --> 00:34:06,460
define any kind of media data you want

00:34:02,890 --> 00:34:09,720
to and when it comes to classic HTTP

00:34:06,460 --> 00:34:13,480
stuff I have a big fan of Jason but

00:34:09,720 --> 00:34:15,310
don't make it that complex that you

00:34:13,480 --> 00:34:16,660
should better go for xml have you seen

00:34:15,310 --> 00:34:20,290
this kind of days in FB i--'s which

00:34:16,660 --> 00:34:22,270
should be better xml it's I feel it's so

00:34:20,290 --> 00:34:24,550
worse right but people still argue that

00:34:22,270 --> 00:34:27,010
anyway it's it's way easier to reform in

00:34:24,550 --> 00:34:30,460
sand like no it's not you have like

00:34:27,010 --> 00:34:32,140
three curly braces and even more in the

00:34:30,460 --> 00:34:34,660
Colin and whatever and I cannot even

00:34:32,140 --> 00:34:36,929
read it so i can better read xml so the

00:34:34,660 --> 00:34:39,210
point is not to keep your

00:34:36,929 --> 00:34:41,099
to make Jason or to making some other

00:34:39,210 --> 00:34:43,500
point is you should make your API simple

00:34:41,099 --> 00:34:46,919
enough to make it readable in any format

00:34:43,500 --> 00:34:50,250
that's the point and be careful with the

00:34:46,919 --> 00:34:51,780
restful term I would say like almost no

00:34:50,250 --> 00:34:54,780
api is restful because you know there's

00:34:51,780 --> 00:34:56,490
three levels of rest and I've just seen

00:34:54,780 --> 00:34:58,710
one API which follow it completely and

00:34:56,490 --> 00:35:01,440
the htl stuff so just say you have rest

00:34:58,710 --> 00:35:03,089
like API and everyone everybody would be

00:35:01,440 --> 00:35:04,800
fine with whatever you are doing right

00:35:03,089 --> 00:35:06,750
because usually when people say it's

00:35:04,800 --> 00:35:09,480
restful it means they're using HTTP

00:35:06,750 --> 00:35:10,980
verbs done which is when we talk about

00:35:09,480 --> 00:35:12,990
rest levels is just the first level

00:35:10,980 --> 00:35:17,270
there's even more complex stuff like

00:35:12,990 --> 00:35:19,410
hypermedia and discovery and whatever so

00:35:17,270 --> 00:35:20,609
again to this two points so the first

00:35:19,410 --> 00:35:23,069
one you should really remember out of

00:35:20,609 --> 00:35:25,170
this talk time outs the next one is HTTP

00:35:23,069 --> 00:35:26,790
it's a great protocol and especially as

00:35:25,170 --> 00:35:29,069
of here is filled free developers I

00:35:26,790 --> 00:35:31,140
would guess most of us that's like the

00:35:29,069 --> 00:35:32,400
one we've learned first that's like the

00:35:31,140 --> 00:35:33,990
first protocol we've we've learned

00:35:32,400 --> 00:35:35,940
before and then it's surrounded us every

00:35:33,990 --> 00:35:38,819
day so it's really great protocol so

00:35:35,940 --> 00:35:46,470
make sure you knew all the tiny bits of

00:35:38,819 --> 00:35:49,349
it so you know now we have a platform

00:35:46,470 --> 00:35:51,630
and you have an interface so I have the

00:35:49,349 --> 00:35:55,109
most reliable platform ever and it has

00:35:51,630 --> 00:35:59,640
the coolest rest like API doing HTTP of

00:35:55,109 --> 00:36:01,530
course so now imagine your company has

00:35:59,640 --> 00:36:03,329
this one platform and everyone choose

00:36:01,530 --> 00:36:04,980
their API but this doesn't make a

00:36:03,329 --> 00:36:07,319
product right this doesn't make just

00:36:04,980 --> 00:36:12,960
just make some services so in the end

00:36:07,319 --> 00:36:15,119
you want to deliver one result and it's

00:36:12,960 --> 00:36:16,770
really like tricky somehow how to

00:36:15,119 --> 00:36:19,890
integrate all these different services

00:36:16,770 --> 00:36:22,380
into another there are different ways

00:36:19,890 --> 00:36:24,750
how you can do it and the first one is

00:36:22,380 --> 00:36:27,170
you can do it in the back end so every

00:36:24,750 --> 00:36:29,339
team or every service should provide

00:36:27,170 --> 00:36:31,619
library in the main language of your

00:36:29,339 --> 00:36:34,890
company I know most companies have that

00:36:31,619 --> 00:36:36,599
kind of if you don't have this thing

00:36:34,890 --> 00:36:39,630
about shrift again because it can just

00:36:36,599 --> 00:36:41,490
compile into any language I don't want

00:36:39,630 --> 00:36:44,670
to say it's like a good one or you know

00:36:41,490 --> 00:36:46,380
it's possible or you can use HTTP again

00:36:44,670 --> 00:36:49,040
right because I haven't seen any

00:36:46,380 --> 00:36:51,170
language which have not an HTTP client

00:36:49,040 --> 00:36:53,880
especially PHP as like

00:36:51,170 --> 00:36:56,730
hundreds I feel like everyone has

00:36:53,880 --> 00:36:57,900
written their own already so when I say

00:36:56,730 --> 00:37:00,450
you want should integrate in the back

00:36:57,900 --> 00:37:02,760
end its services should ask other

00:37:00,450 --> 00:37:05,840
services for their data before

00:37:02,760 --> 00:37:08,850
delivering the response to the client

00:37:05,840 --> 00:37:10,800
I've a good example for that one too Jim

00:37:08,850 --> 00:37:14,370
knew when you build your website with us

00:37:10,800 --> 00:37:16,740
we offer you to have a blog blogs are

00:37:14,370 --> 00:37:19,080
super fancy when it comes to SEO at

00:37:16,740 --> 00:37:22,410
least regarding 20 a SEO specialist I've

00:37:19,080 --> 00:37:24,180
no clue about it at all so we as a

00:37:22,410 --> 00:37:26,160
developer had very fancy idea to just

00:37:24,180 --> 00:37:27,900
load the content afterward so you know

00:37:26,160 --> 00:37:30,330
we want to make a service out of it and

00:37:27,900 --> 00:37:32,670
then let the content load afterwards

00:37:30,330 --> 00:37:35,430
after the page is loaded and then SEO

00:37:32,670 --> 00:37:36,900
specialist goes crazy and like he runs

00:37:35,430 --> 00:37:38,340
through the company was yelling at

00:37:36,900 --> 00:37:41,160
everybody of us because we had this idea

00:37:38,340 --> 00:37:43,050
and he said you know Google won't won't

00:37:41,160 --> 00:37:45,270
execute JavaScript so you should not do

00:37:43,050 --> 00:37:49,740
that so we had the idea to do it in the

00:37:45,270 --> 00:37:52,020
backend plan it's way better another

00:37:49,740 --> 00:37:53,340
example would be like when you're doing

00:37:52,020 --> 00:37:55,320
e-commerce and you have a suggestion

00:37:53,340 --> 00:37:57,300
service because suggestion is like a

00:37:55,320 --> 00:37:58,560
super complex topic and it's a really

00:37:57,300 --> 00:38:00,780
cool thing to make ourselves out of it

00:37:58,560 --> 00:38:04,350
you can easily integrate it in the back

00:38:00,780 --> 00:38:08,430
end and the next point where can do

00:38:04,350 --> 00:38:10,890
integration is again the protocol so

00:38:08,430 --> 00:38:12,900
again it's HTTP because in HTTP you can

00:38:10,890 --> 00:38:14,340
do you can get a lot of stuff like for

00:38:12,900 --> 00:38:16,410
free because it's already in build you

00:38:14,340 --> 00:38:18,390
have proxying in build you have caching

00:38:16,410 --> 00:38:20,010
and build you are any patient in build

00:38:18,390 --> 00:38:22,980
so you don't have to care about that you

00:38:20,010 --> 00:38:24,450
just have to know enough about it and

00:38:22,980 --> 00:38:29,340
you have to know how to use it correctly

00:38:24,450 --> 00:38:30,600
and integrating on HTTP there are two

00:38:29,340 --> 00:38:33,500
points how you can make it though the

00:38:30,600 --> 00:38:36,090
first one is exile includes chords ESI

00:38:33,500 --> 00:38:38,090
symphony has this one inbuilt most

00:38:36,090 --> 00:38:41,610
people just finally does not know that

00:38:38,090 --> 00:38:47,070
it's not a standard unfortunately there

00:38:41,610 --> 00:38:48,630
was some some like people who want to

00:38:47,070 --> 00:38:51,330
make it a standard but that they didn't

00:38:48,630 --> 00:38:55,470
succeed it there is x-linked which is a

00:38:51,330 --> 00:38:57,660
similar XML standard behind it but it's

00:38:55,470 --> 00:38:59,520
set includes a widespread enough and it

00:38:57,660 --> 00:39:02,040
works pretty well and to give you just I

00:38:59,520 --> 00:39:03,630
want to show an example how excellent

00:39:02,040 --> 00:39:04,740
includes will look like so first of all

00:39:03,630 --> 00:39:07,020
you will need a header

00:39:04,740 --> 00:39:14,300
and then just check out my super awesome

00:39:07,020 --> 00:39:18,619
web page and now the interesting part is

00:39:14,300 --> 00:39:21,270
beside my super html5 skills is line 10

00:39:18,619 --> 00:39:25,230
so as you see in like 10 and we have

00:39:21,270 --> 00:39:27,990
this ESI tag so we tell the web server

00:39:25,230 --> 00:39:31,110
who or the proxy or whoever is doing the

00:39:27,990 --> 00:39:34,260
the integration that my source of this

00:39:31,110 --> 00:39:38,040
tag is behind this domain and at this

00:39:34,260 --> 00:39:41,550
route so this is what the other service

00:39:38,040 --> 00:39:44,790
would deliver so the varnish proxy when

00:39:41,550 --> 00:39:46,080
he's reading through that response he

00:39:44,790 --> 00:39:48,540
would just see that there's a nest at

00:39:46,080 --> 00:39:51,210
include tag he would vary the other yeah

00:39:48,540 --> 00:39:53,100
URL and fetch the content and replace it

00:39:51,210 --> 00:39:55,619
in there before the client gets real

00:39:53,100 --> 00:39:57,810
actual response so just imagine that

00:39:55,619 --> 00:39:59,460
this site by HTML is like into the side

00:39:57,810 --> 00:40:04,830
tag and then you have to complete

00:39:59,460 --> 00:40:06,960
respond what the user would get and you

00:40:04,830 --> 00:40:08,790
can also easily integrate in the front

00:40:06,960 --> 00:40:10,770
end it's like you can just do it in

00:40:08,790 --> 00:40:14,640
JavaScript as I mentioned before anyone

00:40:10,770 --> 00:40:15,930
of you use jammer one okay you might

00:40:14,640 --> 00:40:17,220
know it it's like horrible right you

00:40:15,930 --> 00:40:19,710
loading the page and you see just

00:40:17,220 --> 00:40:23,100
scaffolds you just see tables really it

00:40:19,710 --> 00:40:24,270
just almost nothing right on load time

00:40:23,100 --> 00:40:25,859
which is okay because they don't have

00:40:24,270 --> 00:40:28,410
the SAO because I don't want to have my

00:40:25,859 --> 00:40:29,520
company secrets on google but it

00:40:28,410 --> 00:40:32,580
couldn't get annoying so it's really

00:40:29,520 --> 00:40:35,160
important to do it right when you do it

00:40:32,580 --> 00:40:38,130
you should do it right and another part

00:40:35,160 --> 00:40:40,740
you know humans humans are sometimes

00:40:38,130 --> 00:40:42,180
difficult communication is hard but you

00:40:40,740 --> 00:40:44,090
should be aware of when you want to do

00:40:42,180 --> 00:40:46,640
as well as service architecture

00:40:44,090 --> 00:40:49,020
splitting the team just thought just

00:40:46,640 --> 00:40:50,910
does not mean that you would split the

00:40:49,020 --> 00:40:52,410
components and it does also not mean

00:40:50,910 --> 00:40:55,250
that the teams are going to split the

00:40:52,410 --> 00:40:58,109
components so be aware of that fact and

00:40:55,250 --> 00:41:00,450
when you have a state that everyone can

00:40:58,109 --> 00:41:02,670
decide what what could happen is that

00:41:00,450 --> 00:41:05,970
everyone wants to decide and then you

00:41:02,670 --> 00:41:08,700
again have the situation that you have a

00:41:05,970 --> 00:41:11,790
big chunk of team I wanted to make this

00:41:08,700 --> 00:41:14,940
one decision and when you have teams

00:41:11,790 --> 00:41:17,310
making decisions on their own and they

00:41:14,940 --> 00:41:18,270
have to solve the same problem it can

00:41:17,310 --> 00:41:21,360
easily happen that you

00:41:18,270 --> 00:41:23,790
do the same work twice this is kind of

00:41:21,360 --> 00:41:26,160
hard and you should be worth that and

00:41:23,790 --> 00:41:28,560
again communication is important between

00:41:26,160 --> 00:41:30,360
the teams think of Conway's law so

00:41:28,560 --> 00:41:31,770
remember that your software architecture

00:41:30,360 --> 00:41:34,620
could easy look like what your

00:41:31,770 --> 00:41:36,660
communication is looking looking like so

00:41:34,620 --> 00:41:38,250
I told you a lot of cool stuff about

00:41:36,660 --> 00:41:41,330
service and in architecture but they are

00:41:38,250 --> 00:41:44,400
obviously also bad parts I want to cover

00:41:41,330 --> 00:41:47,190
in a shellworld logging and monitoring

00:41:44,400 --> 00:41:51,270
is worse it's really hard imagine you

00:41:47,190 --> 00:41:53,070
have 20 services you don't want have 20

00:41:51,270 --> 00:41:55,200
logging systems right you still want to

00:41:53,070 --> 00:41:57,240
have one lock aggregating all the files

00:41:55,200 --> 00:42:00,180
and then you still have the problem that

00:41:57,240 --> 00:42:02,270
everyone who is used to decide on their

00:42:00,180 --> 00:42:05,220
own so we have to make company decision

00:42:02,270 --> 00:42:06,570
this can be hard and monitoring is the

00:42:05,220 --> 00:42:08,640
same right you don't want to have 20

00:42:06,570 --> 00:42:11,130
different monitoring solutions you just

00:42:08,640 --> 00:42:12,690
want to have the one and everybody is

00:42:11,130 --> 00:42:15,840
relying on it and this one should be

00:42:12,690 --> 00:42:17,700
super reliable so loggia monitoring is

00:42:15,840 --> 00:42:18,990
really like a difficult thing where you

00:42:17,700 --> 00:42:23,390
have to spend a lot of thought on that

00:42:18,990 --> 00:42:26,510
and the most important point you know

00:42:23,390 --> 00:42:30,060
even if you build super reliable systems

00:42:26,510 --> 00:42:31,650
it will fail so the question is not will

00:42:30,060 --> 00:42:35,010
it fail the question is when will it

00:42:31,650 --> 00:42:37,110
fail and if you're in solar world when

00:42:35,010 --> 00:42:39,210
the hits the fan it's getting

00:42:37,110 --> 00:42:41,370
really it's getting so worse you won't

00:42:39,210 --> 00:42:43,890
even imagine like you can easily get

00:42:41,370 --> 00:42:46,250
cascading failures right so imagine your

00:42:43,890 --> 00:42:48,900
front service is failing or delivering

00:42:46,250 --> 00:42:50,190
bad request to another service is this

00:42:48,900 --> 00:42:51,870
one is failing and then other ones

00:42:50,190 --> 00:42:54,360
relying on that also failing and you all

00:42:51,870 --> 00:42:58,340
system is broken up this takes some time

00:42:54,360 --> 00:43:00,930
to recover it it's really hard on you

00:42:58,340 --> 00:43:04,560
should really like when you follow the

00:43:00,930 --> 00:43:07,560
backpressure pattern and the all the

00:43:04,560 --> 00:43:09,090
decoupling is circuit breaker at least I

00:43:07,560 --> 00:43:13,560
can promise you that it would take some

00:43:09,090 --> 00:43:14,850
time till it will fail Oh actually

00:43:13,560 --> 00:43:18,470
there's one thing I want to mention for

00:43:14,850 --> 00:43:21,390
the slide too when I created that one

00:43:18,470 --> 00:43:23,060
ever don't don't Google ever for when

00:43:21,390 --> 00:43:28,250
the hits the fan

00:43:23,060 --> 00:43:37,160
I ended up with a little kid throwing

00:43:28,250 --> 00:43:40,100
sticker Snickers into a sin no okay last

00:43:37,160 --> 00:43:42,050
bed part responsibility it's really a

00:43:40,100 --> 00:43:44,030
thing right when you offer a service to

00:43:42,050 --> 00:43:46,670
your colleagues to your customers you

00:43:44,030 --> 00:43:50,150
are responsible there's no way around it

00:43:46,670 --> 00:43:52,160
right there's no obstacle at least I

00:43:50,150 --> 00:43:53,480
hope there is no obstacle because you

00:43:52,160 --> 00:43:57,440
know we are cross functional and DevOps

00:43:53,480 --> 00:43:59,180
is a thing and you're responsible of

00:43:57,440 --> 00:44:01,310
whatever is happening there so you

00:43:59,180 --> 00:44:03,620
should not just pass the responsibility

00:44:01,310 --> 00:44:06,680
to you know all my teammate he's taking

00:44:03,620 --> 00:44:09,680
care of that I don't mind this can have

00:44:06,680 --> 00:44:11,870
a crew pretty easily and as I said I've

00:44:09,680 --> 00:44:15,650
worked in the infrastructure department

00:44:11,870 --> 00:44:18,380
before the team i'm working and now so I

00:44:15,650 --> 00:44:20,450
learned on call the hard way so I just

00:44:18,380 --> 00:44:22,850
had our pager and then I went to bed and

00:44:20,450 --> 00:44:24,680
then I had no sleep at this night so on

00:44:22,850 --> 00:44:26,000
call this really a thing and you should

00:44:24,680 --> 00:44:28,910
you know you should at least talk about

00:44:26,000 --> 00:44:30,890
it who's doing on call and install well

00:44:28,910 --> 00:44:34,100
it's got a bit more complicated because

00:44:30,890 --> 00:44:35,690
developers of other teams have no I no

00:44:34,100 --> 00:44:42,350
clue what's happening in your system

00:44:35,690 --> 00:44:44,450
right so um that's like the what and the

00:44:42,350 --> 00:44:46,850
why and the how and now I promised to

00:44:44,450 --> 00:44:50,290
give some real life examples so here's

00:44:46,850 --> 00:44:53,120
what I got um I've been to jazz conf

00:44:50,290 --> 00:44:55,910
last year and there was a cool talk from

00:44:53,120 --> 00:44:59,150
Yammer and right inside their slides

00:44:55,910 --> 00:45:02,090
that came up with this one that's what

00:44:59,150 --> 00:45:05,780
they call the Yammer architecture um I

00:45:02,090 --> 00:45:08,750
won't make any statement on that i would

00:45:05,780 --> 00:45:10,250
i would say it's complex and i don't

00:45:08,750 --> 00:45:13,790
want to be that engineer who's working

00:45:10,250 --> 00:45:17,270
on the work feed right and I especially

00:45:13,790 --> 00:45:19,610
don't want to do on call for that so

00:45:17,270 --> 00:45:21,680
they have ten external services whatever

00:45:19,610 --> 00:45:23,390
that means aight internal five party 7

00:45:21,680 --> 00:45:26,330
storage since three cash there is a

00:45:23,390 --> 00:45:28,160
summary 33 services it's quite a bunch

00:45:26,330 --> 00:45:31,190
but they still have a grown product and

00:45:28,160 --> 00:45:34,130
this is at least I feel like it's really

00:45:31,190 --> 00:45:36,480
a cool thing to trap it's really cool

00:45:34,130 --> 00:45:39,000
architecture so I ever curious too

00:45:36,480 --> 00:45:41,790
more about that and there's one thing I

00:45:39,000 --> 00:45:45,450
was realized to you see that one vario I

00:45:41,790 --> 00:45:47,820
have no idea what is doing it seems to

00:45:45,450 --> 00:45:50,190
be like it's just there I don't know

00:45:47,820 --> 00:45:51,840
there's no communication at all but so

00:45:50,190 --> 00:45:55,710
too i would assume it's it's doing it's

00:45:51,840 --> 00:45:58,050
doing a good job right okay I've got

00:45:55,710 --> 00:46:02,010
another example you might know this this

00:45:58,050 --> 00:46:04,230
is twitter twitter head like a hard

00:46:02,010 --> 00:46:05,670
really tough scaling story so this is

00:46:04,230 --> 00:46:07,080
what they implication look like when

00:46:05,670 --> 00:46:09,570
they are growing and growing really fast

00:46:07,080 --> 00:46:11,490
so before they did really fancy stuff so

00:46:09,570 --> 00:46:14,190
they have their one rails application

00:46:11,490 --> 00:46:16,800
and they have their storage that's it

00:46:14,190 --> 00:46:19,710
yeah that's that was Twitter so

00:46:16,800 --> 00:46:21,780
architecture back in I don't know when

00:46:19,710 --> 00:46:23,130
you want to see the the real really good

00:46:21,780 --> 00:46:25,830
talk about that one there's a

00:46:23,130 --> 00:46:29,190
decomposing twitter by Jeremy cloud and

00:46:25,830 --> 00:46:32,460
that's why steal the slides it's really

00:46:29,190 --> 00:46:34,560
great talk and you know in his talk he

00:46:32,460 --> 00:46:36,510
was talking on how this happens and how

00:46:34,560 --> 00:46:38,640
they wanted to split it and the cool

00:46:36,510 --> 00:46:41,520
thing is at the end it looked like this

00:46:38,640 --> 00:46:44,280
and frankly speaking this is just the

00:46:41,520 --> 00:46:47,670
part Jeremy was working on so Twitter in

00:46:44,280 --> 00:46:49,500
general they're super super big even

00:46:47,670 --> 00:46:51,990
this on this slide where he is working

00:46:49,500 --> 00:46:53,880
on their over twenty services what is

00:46:51,990 --> 00:46:56,430
still interesting they got this more

00:46:53,880 --> 00:47:00,200
real still so sec it's really hard to

00:46:56,430 --> 00:47:02,250
get to get you know your old shared way

00:47:00,200 --> 00:47:03,720
but I don't want to talk about other

00:47:02,250 --> 00:47:05,760
companies because it kind of mean right

00:47:03,720 --> 00:47:08,369
I can I could just talk about them

00:47:05,760 --> 00:47:11,460
and they have no I cannot respond so i

00:47:08,369 --> 00:47:14,570
want to talk about Jim do this is our

00:47:11,460 --> 00:47:17,190
system it's proudly growing since 2006

00:47:14,570 --> 00:47:20,490
but you know we are aware of that fact

00:47:17,190 --> 00:47:23,820
and we had released our very first

00:47:20,490 --> 00:47:26,970
service for our iPhone app which is out

00:47:23,820 --> 00:47:30,240
now already we which was the API ruler

00:47:26,970 --> 00:47:33,150
and now i am part of this template

00:47:30,240 --> 00:47:35,730
servicing and at the moment you know we

00:47:33,150 --> 00:47:38,190
are learning all this stuff and that's

00:47:35,730 --> 00:47:41,369
mostly where all the slides and all the

00:47:38,190 --> 00:47:43,830
ideas i talked before came from so we

00:47:41,369 --> 00:47:46,760
learn it the hard way and i want just

00:47:43,830 --> 00:47:50,060
you're preventing to learn the hard way

00:47:46,760 --> 00:47:53,570
so many one builds a

00:47:50,060 --> 00:47:56,750
in PHP world a few passwords you should

00:47:53,570 --> 00:47:59,900
note you hopefully have heard of HTTP

00:47:56,750 --> 00:48:02,360
kernan interface use it this one is

00:47:59,900 --> 00:48:04,460
great whatever you were doing no matter

00:48:02,360 --> 00:48:07,220
of its any pre-built framework

00:48:04,460 --> 00:48:10,310
self-written framework or I don't know

00:48:07,220 --> 00:48:11,780
sigh legs they all it's like the bigger

00:48:10,310 --> 00:48:14,450
one uses it already like drupal

00:48:11,780 --> 00:48:16,310
symphonies I legs and their stack PHP

00:48:14,450 --> 00:48:18,410
around which is kind of kind of like

00:48:16,310 --> 00:48:20,840
rack from from we world which is really

00:48:18,410 --> 00:48:24,620
cool so you can just compose little

00:48:20,840 --> 00:48:27,050
services along this interface to do

00:48:24,620 --> 00:48:29,300
various stuff on the HTTP layer like on

00:48:27,050 --> 00:48:32,380
education caching and these kind of

00:48:29,300 --> 00:48:38,150
things so a typical interface is really

00:48:32,380 --> 00:48:40,690
my one thing and so just you know then

00:48:38,150 --> 00:48:43,850
remember um sergeant actuator

00:48:40,690 --> 00:48:47,120
service-oriented architecture sorry it

00:48:43,850 --> 00:48:48,170
has you know a bunch of good things you

00:48:47,120 --> 00:48:50,030
know you can scale the system's

00:48:48,170 --> 00:48:51,680
independently you will have happier

00:48:50,030 --> 00:48:53,150
developers and you will have happier

00:48:51,680 --> 00:48:56,240
customers because you're more reliable

00:48:53,150 --> 00:48:59,090
you're faster and you can react more

00:48:56,240 --> 00:49:03,080
quickly you can deliver a features

00:48:59,090 --> 00:49:04,580
faster and you have way you know you

00:49:03,080 --> 00:49:07,130
just have an easier life that's in

00:49:04,580 --> 00:49:09,560
general easier developer life when you

00:49:07,130 --> 00:49:13,190
split up services on the other hand

00:49:09,560 --> 00:49:16,430
there are some bad some bad parts don't

00:49:13,190 --> 00:49:17,600
Google for the wind hit the fan but

00:49:16,430 --> 00:49:19,520
when the hits the fan you know is

00:49:17,600 --> 00:49:22,220
getting complicated kind of and it will

00:49:19,520 --> 00:49:27,650
hurt but you should take that as a good

00:49:22,220 --> 00:49:33,260
opportunity to learn and you know when

00:49:27,650 --> 00:49:35,420
the system is failing be you know take

00:49:33,260 --> 00:49:37,840
it as an opportunity to learn again it

00:49:35,420 --> 00:49:41,480
is it shouldn't be that hard right

00:49:37,840 --> 00:49:44,690
nobody will die it's you'll came over it

00:49:41,480 --> 00:49:46,040
that's it and another bad part you might

00:49:44,690 --> 00:49:48,020
lose some scale effects as I mentioned

00:49:46,040 --> 00:49:52,250
some monitoring and logging it's really

00:49:48,020 --> 00:49:54,890
hard to agree on that one thing so if

00:49:52,250 --> 00:49:57,530
you were awake to through all this last

00:49:54,890 --> 00:50:01,370
50 minutes I told you about three things

00:49:57,530 --> 00:50:02,589
you really remember the first great

00:50:01,370 --> 00:50:06,650
second

00:50:02,589 --> 00:50:09,109
great so that one missing right last one

00:50:06,650 --> 00:50:10,910
and I want you to remember this three is

00:50:09,109 --> 00:50:13,580
obviously service-oriented architecture

00:50:10,910 --> 00:50:15,920
that's important really remember that do

00:50:13,580 --> 00:50:18,490
it practice it and share your story

00:50:15,920 --> 00:50:18,490
thank you

00:50:24,770 --> 00:50:30,270
okay so we will have 10 to 15 minutes

00:50:27,960 --> 00:50:31,830
for questions yeah roaming Mike both in

00:50:30,270 --> 00:50:33,599
here and in the other room so I'm sure

00:50:31,830 --> 00:50:36,869
hands we start moving the mics around

00:50:33,599 --> 00:50:39,780
for any questions you might have hi

00:50:36,869 --> 00:50:41,820
thanks for a great talk I'm just

00:50:39,780 --> 00:50:43,430
wondering what are the implications for

00:50:41,820 --> 00:50:45,750
testing if you're going to have

00:50:43,430 --> 00:50:48,720
functional testing integration testing

00:50:45,750 --> 00:50:51,060
how does that work out that's a good

00:50:48,720 --> 00:50:52,680
question what we are doing Adam knew I

00:50:51,060 --> 00:50:56,970
can just like share the doom the story

00:50:52,680 --> 00:50:58,470
on that again we have service marks so

00:50:56,970 --> 00:51:01,170
as again I'm working on this template

00:50:58,470 --> 00:51:04,050
service stuff and it's Reyes app what we

00:51:01,170 --> 00:51:06,210
did it's just we had a very simple cylex

00:51:04,050 --> 00:51:09,839
application which just mocking the API

00:51:06,210 --> 00:51:11,880
roots just you know always responding

00:51:09,839 --> 00:51:15,180
with the same thing this is the thing

00:51:11,880 --> 00:51:17,400
you can do there are even more complex

00:51:15,180 --> 00:51:20,369
system in a more you know generic way

00:51:17,400 --> 00:51:22,950
where you can just define especially

00:51:20,369 --> 00:51:25,080
Ruby world there's like HTTP call

00:51:22,950 --> 00:51:27,420
mocking library it would catch all

00:51:25,080 --> 00:51:29,700
system calls to to the network layer and

00:51:27,420 --> 00:51:32,130
just give any response so I would say

00:51:29,700 --> 00:51:34,500
you should mark it and when it comes to

00:51:32,130 --> 00:51:36,599
integration testing you know staging

00:51:34,500 --> 00:51:38,220
staging environment is also important so

00:51:36,599 --> 00:51:40,230
when you want test locally like having

00:51:38,220 --> 00:51:42,150
the marks and when you test like more

00:51:40,230 --> 00:51:44,070
general I'm having a staging environment

00:51:42,150 --> 00:51:46,380
which should be like really want one

00:51:44,070 --> 00:51:52,020
mirror from a life application does not

00:51:46,380 --> 00:51:57,920
see a question okay wait wait for them

00:51:52,020 --> 00:52:00,660
ugly what is your opening about a

00:51:57,920 --> 00:52:02,280
building back-end front and interaction

00:52:00,660 --> 00:52:04,500
as a service so let's say you have a

00:52:02,280 --> 00:52:06,720
back-end API driven and frontages

00:52:04,500 --> 00:52:11,580
completely nothing to do with the back

00:52:06,720 --> 00:52:13,980
end that's that's funny that's what we

00:52:11,580 --> 00:52:17,190
did when we had this mobile application

00:52:13,980 --> 00:52:19,349
i just mentioned before sometimes it's

00:52:17,190 --> 00:52:21,720
crap so frankly speaking it's really

00:52:19,349 --> 00:52:23,550
hard you have to do have really really

00:52:21,720 --> 00:52:25,050
good specs and you should have a really

00:52:23,550 --> 00:52:27,980
really good leader who's taking care of

00:52:25,050 --> 00:52:31,910
all the communication which is necessary

00:52:27,980 --> 00:52:34,200
but you can be faster kind of right so i

00:52:31,910 --> 00:52:36,750
heard it's hard for the front-end people

00:52:34,200 --> 00:52:37,860
because they need some kind of a place

00:52:36,750 --> 00:52:40,560
where they can fetch the ape

00:52:37,860 --> 00:52:42,540
guy so what I've seen often is that they

00:52:40,560 --> 00:52:45,480
just spend up a little Ruby script and

00:52:42,540 --> 00:52:47,940
mocking the calls and not really so note

00:52:45,480 --> 00:52:50,190
so they you know the front of geyser and

00:52:47,940 --> 00:52:51,840
they have this little no thing just

00:52:50,190 --> 00:52:53,850
mocking the roots and giving any kind of

00:52:51,840 --> 00:52:57,180
response what they think my back it will

00:52:53,850 --> 00:53:00,290
respond to but yeah it's not what we are

00:52:57,180 --> 00:53:02,970
actually responding then and it's hard

00:53:00,290 --> 00:53:04,530
it i guess it's depending on your team

00:53:02,970 --> 00:53:06,420
scale and if you can do you know when

00:53:04,530 --> 00:53:09,660
you're little small a little team you

00:53:06,420 --> 00:53:11,610
can still work very closely but i don't

00:53:09,660 --> 00:53:14,730
know when you have like 250 developers

00:53:11,610 --> 00:53:17,010
um I think there's no real weight around

00:53:14,730 --> 00:53:23,090
in having good specs I got that see I'm

00:53:17,010 --> 00:53:23,090
the answer to your question yea though

00:53:25,430 --> 00:53:29,630
and how does it impact performance so if

00:53:28,410 --> 00:53:32,040
you have a single process that would

00:53:29,630 --> 00:53:34,830
interact with multiple services of HTTP

00:53:32,040 --> 00:53:35,880
do you find that slows you down rather

00:53:34,830 --> 00:53:38,760
than having like and in the case of

00:53:35,880 --> 00:53:40,530
service is down or add does it slow down

00:53:38,760 --> 00:53:44,070
your performance if you've got multiple

00:53:40,530 --> 00:53:46,980
same server HTTP so um it can impact

00:53:44,070 --> 00:53:48,450
your service but I'm a big fan of you

00:53:46,980 --> 00:53:50,610
know you should solve the problem when

00:53:48,450 --> 00:53:52,710
it actually occurs so don't fix the

00:53:50,610 --> 00:53:54,600
problem which does not exist I'm often

00:53:52,710 --> 00:53:56,280
it's fast enough especially when you're

00:53:54,600 --> 00:53:58,050
just going for one platform and it's all

00:53:56,280 --> 00:53:59,480
in the same data center you know when

00:53:58,050 --> 00:54:01,830
it's all amazon is on the same region

00:53:59,480 --> 00:54:03,660
network calls even network code can be

00:54:01,830 --> 00:54:06,260
pretty fast and when it's not fast

00:54:03,660 --> 00:54:08,730
enough make sure you utilize caching

00:54:06,260 --> 00:54:11,610
with caching you can solve most of the

00:54:08,730 --> 00:54:15,260
performance issues and when caching

00:54:11,610 --> 00:54:20,550
doesn't do it then it gets really hard

00:54:15,260 --> 00:54:23,550
but mostly caching is a grantor uh-huh

00:54:20,550 --> 00:54:25,620
and when you have multiple system and

00:54:23,550 --> 00:54:27,060
two system how do you really linked them

00:54:25,620 --> 00:54:28,860
together for example I have a event

00:54:27,060 --> 00:54:31,050
system that I serve as a sort of

00:54:28,860 --> 00:54:33,780
software as a service and then I have my

00:54:31,050 --> 00:54:35,220
men system has user records so for

00:54:33,780 --> 00:54:36,840
apparently for these events I need to be

00:54:35,220 --> 00:54:39,090
linked to the users do you use your ID

00:54:36,840 --> 00:54:41,010
so how do you usually communicate owns

00:54:39,090 --> 00:54:45,000
because you need to know which event

00:54:41,010 --> 00:54:47,460
belong to which user early so speaking

00:54:45,000 --> 00:54:49,110
of what we did and mechanical yeah don't

00:54:47,460 --> 00:54:50,310
we don't have a relation there so I

00:54:49,110 --> 00:54:51,560
can't give you any like firsthand

00:54:50,310 --> 00:54:54,330
experience

00:54:51,560 --> 00:54:57,480
Hugh I this is obviously a good thing to

00:54:54,330 --> 00:54:59,610
do don't rely on one database providing

00:54:57,480 --> 00:55:02,700
like a primary key autoincrement stuff

00:54:59,610 --> 00:55:04,920
no this phase obviously pretty fast so

00:55:02,700 --> 00:55:08,010
uuid is a good thing to do all right and

00:55:04,920 --> 00:55:10,950
when it comes to like message passing I

00:55:08,010 --> 00:55:13,290
would go for a message queue or I don't

00:55:10,950 --> 00:55:15,360
know message passed systems ton of this

00:55:13,290 --> 00:55:23,490
kind of software around Britain thanks

00:55:15,360 --> 00:55:25,110
much yeah just a quick question on how

00:55:23,490 --> 00:55:26,400
you manage versioning because there's

00:55:25,110 --> 00:55:30,210
lots of different ways you can go about

00:55:26,400 --> 00:55:33,600
it yeah yeah that's a good question so

00:55:30,210 --> 00:55:37,200
you're versioning is hard best way you

00:55:33,600 --> 00:55:39,420
can do is API versioning that's that's

00:55:37,200 --> 00:55:43,260
kind of complex when you own all the

00:55:39,420 --> 00:55:46,560
clients um you can try to go without

00:55:43,260 --> 00:55:49,230
versioning so but then you have you no

00:55:46,560 --> 00:55:51,960
dependencies on you have first update

00:55:49,230 --> 00:55:54,390
this so and then the other one but i

00:55:51,960 --> 00:55:57,150
think api versions is like what what I

00:55:54,390 --> 00:55:58,350
did I've no other idea how I would solve

00:55:57,150 --> 00:56:03,900
the kind of issue when it comes to

00:55:58,350 --> 00:56:05,760
versioning right so in terms of you were

00:56:03,900 --> 00:56:07,470
talking about defining interfaces and

00:56:05,760 --> 00:56:09,810
that all the teams would communicate

00:56:07,470 --> 00:56:11,670
through those interfaces so I assume

00:56:09,810 --> 00:56:14,340
that means that the there's to be a very

00:56:11,670 --> 00:56:17,310
structured way of communicating these

00:56:14,340 --> 00:56:18,840
interfaces and when they change and you

00:56:17,310 --> 00:56:20,520
know basically the team's themselves

00:56:18,840 --> 00:56:23,070
have to be very good at communicating so

00:56:20,520 --> 00:56:24,600
that they can define them so what advice

00:56:23,070 --> 00:56:26,580
would you give for making that happen

00:56:24,600 --> 00:56:30,270
and also some of the problems you've

00:56:26,580 --> 00:56:32,570
seen with that communication sorry I

00:56:30,270 --> 00:56:35,070
just don't get the question oh um

00:56:32,570 --> 00:56:36,930
basically when teams are communicating

00:56:35,070 --> 00:56:38,970
trying to define interfaces for services

00:56:36,930 --> 00:56:42,150
so one service needs to communicate with

00:56:38,970 --> 00:56:44,820
another service what do you do to

00:56:42,150 --> 00:56:46,680
improve that communication alright I

00:56:44,820 --> 00:56:49,680
think what Amazon did is really good

00:56:46,680 --> 00:56:52,140
there so just treat your services and as

00:56:49,680 --> 00:56:55,740
an open source library kind of thing so

00:56:52,140 --> 00:56:57,420
it's like having a good read me having a

00:56:55,740 --> 00:56:59,160
good client library so when you don't do

00:56:57,420 --> 00:57:01,980
like HTTP stuff or even when you do it

00:56:59,160 --> 00:57:03,869
offer client libraries this can really

00:57:01,980 --> 00:57:05,609
help if you can do it

00:57:03,869 --> 00:57:07,019
rift would thought that for you because

00:57:05,609 --> 00:57:10,099
you can compile a clan Larry's out of

00:57:07,019 --> 00:57:12,720
that and then obviously there's a lot of

00:57:10,099 --> 00:57:14,490
organization work you can do right lots

00:57:12,720 --> 00:57:17,430
of I don't know meetings you can do all

00:57:14,490 --> 00:57:19,769
together you can just like defining

00:57:17,430 --> 00:57:22,049
several people in the teams who are

00:57:19,769 --> 00:57:23,849
responsible for interfaces and let them

00:57:22,049 --> 00:57:27,210
meet and these kind of things does

00:57:23,849 --> 00:57:28,890
answer a question okay so just continue

00:57:27,210 --> 00:57:31,890
from the question about how do you

00:57:28,890 --> 00:57:34,619
manage versioning so you can version

00:57:31,890 --> 00:57:36,859
api's and that's awesome I'm a fine for

00:57:34,619 --> 00:57:40,950
that as my team can probably attest to

00:57:36,859 --> 00:57:43,769
in terms of the data stores for instance

00:57:40,950 --> 00:57:45,390
in the schemas how do you manage vertige

00:57:43,769 --> 00:57:47,519
versioning those and ensure that if

00:57:45,390 --> 00:57:49,259
you're mutating your API that the

00:57:47,519 --> 00:57:51,359
schemas for instance doesn't end up

00:57:49,259 --> 00:57:53,460
becoming like multiple databases of

00:57:51,359 --> 00:57:56,400
different versions for instance and so

00:57:53,460 --> 00:57:58,799
on mmm i have never did with this kind

00:57:56,400 --> 00:58:02,160
of issue so Frankie speaking I've no

00:57:58,799 --> 00:58:06,019
idea how I would solve it um I don't

00:58:02,160 --> 00:58:08,519
know I don't want to tell I

00:58:06,019 --> 00:58:10,499
don't know that's all right so far

00:58:08,519 --> 00:58:12,359
that's been from the biggest issue of

00:58:10,499 --> 00:58:14,039
had with service or India or in today

00:58:12,359 --> 00:58:17,279
but I so have you experienced the

00:58:14,039 --> 00:58:20,160
problem um we are in the process of

00:58:17,279 --> 00:58:22,349
designing some potential system related

00:58:20,160 --> 00:58:24,450
to this kind of argot thank it's a

00:58:22,349 --> 00:58:25,890
pretty a problem which will appear but

00:58:24,450 --> 00:58:28,170
it would guess that you're pretty late

00:58:25,890 --> 00:58:31,289
in the process it's probably going to

00:58:28,170 --> 00:58:32,670
happen in the first instance okay yeah

00:58:31,289 --> 00:58:35,009
yeah as you know when you get about

00:58:32,670 --> 00:58:36,869
sales case external facing features okay

00:58:35,009 --> 00:58:38,700
so you start mutating yeah okay yeah

00:58:36,869 --> 00:58:41,640
exhale you have any of external facing

00:58:38,700 --> 00:58:43,559
stuff its way difficulty it's a good

00:58:41,640 --> 00:58:45,599
question in the other room so I found up

00:58:43,559 --> 00:58:47,789
I'll check again that was one I think

00:58:45,599 --> 00:58:51,059
there isn't should I come over there

00:58:47,789 --> 00:58:54,049
make me some questions hi they you

00:58:51,059 --> 00:58:59,660
mentioned logging and monitoring yeah

00:58:54,049 --> 00:59:02,579
what tools d is so we have a gray lock

00:58:59,660 --> 00:59:04,440
in our company and everybody is sending

00:59:02,579 --> 00:59:06,059
the stuff to Greylock I think locks

00:59:04,440 --> 00:59:08,489
Dashwood would be another cool tool to

00:59:06,059 --> 00:59:11,430
use so what I would recommend is just

00:59:08,489 --> 00:59:14,670
agreeing on one like pre-build ready

00:59:11,430 --> 00:59:17,200
build tool syslog for examples of a good

00:59:14,670 --> 00:59:19,240
thing because everyone can just send to

00:59:17,200 --> 00:59:21,190
sis lock and then there's like laksa

00:59:19,240 --> 00:59:23,680
Greylock just getting messages out of it

00:59:21,190 --> 00:59:28,780
so the handover point is really well

00:59:23,680 --> 00:59:33,329
defined and for monitoring we are going

00:59:28,780 --> 00:59:33,329
with a mix of pingdom and pagerduty

00:59:33,780 --> 00:59:42,250
Bingaman pagerduty kingdom and pagerduty

00:59:38,230 --> 00:59:44,619
pagerduty pagerduty yes I think we have

00:59:42,250 --> 00:59:48,579
time for one more question if we have

00:59:44,619 --> 00:59:50,619
one yeah if not i mean i'll be around

00:59:48,579 --> 00:59:52,180
for the next two days just he just come

00:59:50,619 --> 00:59:53,650
along and find me so I'm happily to

00:59:52,180 --> 00:59:56,020
answer and discuss all the stuff with

00:59:53,650 --> 00:59:58,210
you face to face so i would i would like

00:59:56,020 --> 00:59:59,740
to take a moment to thank all a for his

00:59:58,210 --> 01:00:05,079
presentation that's wonderful thank for

00:59:59,740 --> 01:00:08,650
your karmic thank you very much we will

01:00:05,079 --> 01:00:11,310
remember our time outs and HTTP and SOA

01:00:08,650 --> 01:00:11,310

YouTube URL: https://www.youtube.com/watch?v=ZcHV4nc_DTM


