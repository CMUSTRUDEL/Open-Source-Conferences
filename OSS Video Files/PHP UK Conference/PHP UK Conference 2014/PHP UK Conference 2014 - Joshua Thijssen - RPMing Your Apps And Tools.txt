Title: PHP UK Conference 2014 - Joshua Thijssen - RPMing Your Apps And Tools
Publication date: 2014-03-21
Playlist: PHP UK Conference 2014
Description: 
	Linux distributions are using very powerful package systems for deployment of software for many years now and it's time that developers start using those systems as well. We talk about how to setup up a private repository, how to create RPM files and how incorporate this in your version control system so everything will work automatically. We also will talk about the pro's and cons of the system, how to work with different package flavors and how we can use the system for other purposes. Both you and your system administrator will become best friends again!
Captions: 
	00:00:04,460 --> 00:00:14,130
um actually I'm amazed that people

00:00:08,639 --> 00:00:16,560
turned up for this talk when I was

00:00:14,130 --> 00:00:19,740
actually submitted this talk and and and

00:00:16,560 --> 00:00:21,960
they actually selected I was like I I

00:00:19,740 --> 00:00:24,510
really enjoy doing talks like this but I

00:00:21,960 --> 00:00:27,900
was thinking about like peach be

00:00:24,510 --> 00:00:30,420
developers and doing stuff with RPM if I

00:00:27,900 --> 00:00:32,820
told somebody like that two years ago I

00:00:30,420 --> 00:00:34,770
probably got either punched in the face

00:00:32,820 --> 00:00:37,050
or get laughed away or something like

00:00:34,770 --> 00:00:39,030
that because we don't do that with peach

00:00:37,050 --> 00:00:41,940
be developers we only do peach be work

00:00:39,030 --> 00:00:43,829
we don't mess around with up stuff for

00:00:41,940 --> 00:00:47,879
deaf up stuff of system administration

00:00:43,829 --> 00:00:51,690
stuff but I was thinking more about it

00:00:47,879 --> 00:00:54,480
and all the world's the Deaf worlds and

00:00:51,690 --> 00:00:57,449
the opera worlds it's kind of faded away

00:00:54,480 --> 00:00:59,760
it's just one big area and where

00:00:57,449 --> 00:01:01,980
everybody has one goal namely try to

00:00:59,760 --> 00:01:06,240
make software and get people to actually

00:01:01,980 --> 00:01:09,869
use that software so this talk is not

00:01:06,240 --> 00:01:13,650
really about oh you should do everything

00:01:09,869 --> 00:01:17,729
with RPM from now on well you could but

00:01:13,650 --> 00:01:20,310
I wouldn't really recognize but this is

00:01:17,729 --> 00:01:22,770
more like this is another tool inside

00:01:20,310 --> 00:01:25,049
your toolbox yeah if you have any

00:01:22,770 --> 00:01:27,180
reasons to use it at least you know how

00:01:25,049 --> 00:01:29,400
to use it you know what it is but don't

00:01:27,180 --> 00:01:32,579
use it for everything like deploying

00:01:29,400 --> 00:01:35,100
your apps use things like Capistrano

00:01:32,579 --> 00:01:37,950
capellini web web external stuff like

00:01:35,100 --> 00:01:40,140
that don't create rpms just for the sake

00:01:37,950 --> 00:01:42,390
of creating rpms do that in your spare

00:01:40,140 --> 00:01:45,720
time obviously but not like really

00:01:42,390 --> 00:01:47,939
deploy your software so my name is

00:01:45,720 --> 00:01:50,880
Joshua Tyson I'm a frail and consultant

00:01:47,939 --> 00:01:53,189
and trainer I do a lot of stuff a lot of

00:01:50,880 --> 00:01:57,060
stuff in PHP but also a lot of stuff in

00:01:53,189 --> 00:02:02,790
the operation world so this is why I'm

00:01:57,060 --> 00:02:07,049
really interested in items like RPM and

00:02:02,790 --> 00:02:10,679
and system administration so before I

00:02:07,049 --> 00:02:12,880
start with packaging rpm packages who

00:02:10,679 --> 00:02:17,500
actually knows about RPM who actually

00:02:12,880 --> 00:02:20,470
used it before okay so that's quite show

00:02:17,500 --> 00:02:22,150
fans have you ever used it as like I can

00:02:20,470 --> 00:02:23,860
install a package or if you have ever

00:02:22,150 --> 00:02:26,670
used it like I'm creating my own

00:02:23,860 --> 00:02:30,340
packages created your own packages

00:02:26,670 --> 00:02:33,700
awesome that's really nice so for the

00:02:30,340 --> 00:02:36,610
people who have no idea what RPM is RP M

00:02:33,700 --> 00:02:38,440
stands for redhat package manager now

00:02:36,610 --> 00:02:41,530
this doesn't mean that it's only for

00:02:38,440 --> 00:02:44,200
redhead it also means that it's also for

00:02:41,530 --> 00:02:47,230
all the derivatives and OS and fedora

00:02:44,200 --> 00:02:51,460
etc a lot of people will use debian

00:02:47,230 --> 00:02:54,220
ubuntu you could use rpms on those

00:02:51,460 --> 00:02:56,710
systems as well although I wouldn't

00:02:54,220 --> 00:02:59,080
really recommend it because it's quite a

00:02:56,710 --> 00:03:01,060
different infrastructure and it will

00:02:59,080 --> 00:03:04,810
make things a little bit more difficult

00:03:01,060 --> 00:03:08,560
you can actually convert rpm packages to

00:03:04,810 --> 00:03:11,710
Debian packages with tools like like

00:03:08,560 --> 00:03:13,600
alien and everything but I wouldn't

00:03:11,710 --> 00:03:18,070
really recommend it unless you really

00:03:13,600 --> 00:03:22,650
know what you're doing so why should we

00:03:18,070 --> 00:03:25,840
use package managers and the best way to

00:03:22,650 --> 00:03:32,440
explain it to you is by a very very

00:03:25,840 --> 00:03:38,830
simple graph anyone any idea what this

00:03:32,440 --> 00:03:41,140
is I composer right pretty much composer

00:03:38,830 --> 00:03:43,480
is really cool because now we have like

00:03:41,140 --> 00:03:45,430
bundles that we can just install and it

00:03:43,480 --> 00:03:47,380
sorts out all the dependencies we want

00:03:45,430 --> 00:03:50,080
and we don't have to care about all the

00:03:47,380 --> 00:03:51,940
stuff we used to care about when trying

00:03:50,080 --> 00:03:54,160
to get something up and running right so

00:03:51,940 --> 00:03:56,440
now it's really simple we just change

00:03:54,160 --> 00:03:58,480
something in an adjacent composer JSON

00:03:56,440 --> 00:03:59,920
file and all of a sudden everything move

00:03:58,480 --> 00:04:02,680
up from running and it will take care of

00:03:59,920 --> 00:04:07,600
where it's going to find stuff what for

00:04:02,680 --> 00:04:11,380
dependencies it needs etc etc so just

00:04:07,600 --> 00:04:13,630
like composer RPM at least the RPM

00:04:11,380 --> 00:04:17,170
infrastructure will take care of all the

00:04:13,630 --> 00:04:19,780
dependencies for you it also means it

00:04:17,170 --> 00:04:22,240
takes less time to install because if it

00:04:19,780 --> 00:04:26,190
will do that for me makes make sure that

00:04:22,240 --> 00:04:29,100
I save time another thing is and

00:04:26,190 --> 00:04:32,220
and this is for things like installing

00:04:29,100 --> 00:04:34,410
PHP or other binaries you don't need to

00:04:32,220 --> 00:04:39,090
compile it yourself as anyone try to

00:04:34,410 --> 00:04:41,100
compile PHP from scratch okay well

00:04:39,090 --> 00:04:45,660
that's that's fair enough amount of

00:04:41,100 --> 00:04:47,310
people obviously you can and PHP is

00:04:45,660 --> 00:04:48,900
really not that difficult but there are

00:04:47,310 --> 00:04:51,270
like tools out there that's really

00:04:48,900 --> 00:04:55,110
really difficult to install version

00:04:51,270 --> 00:04:57,830
systems of your libraries are off or all

00:04:55,110 --> 00:05:01,050
the versions you need to install etc etc

00:04:57,830 --> 00:05:02,550
when you install an RPM all the packages

00:05:01,050 --> 00:05:04,170
of all the compilation is already done

00:05:02,550 --> 00:05:06,800
for you so you don't have to worry about

00:05:04,170 --> 00:05:10,500
that so it's just up and running for you

00:05:06,800 --> 00:05:12,960
also means it's easier to maintain like

00:05:10,500 --> 00:05:15,840
if you compile PHP for yourself and you

00:05:12,960 --> 00:05:18,510
deploy it on a server or whatnot as soon

00:05:15,840 --> 00:05:21,090
as there is a security fix well never

00:05:18,510 --> 00:05:23,610
happens on PHP but an unlikely event

00:05:21,090 --> 00:05:26,010
that as a security fix you are the one

00:05:23,610 --> 00:05:29,070
responsible you have to recompile the

00:05:26,010 --> 00:05:32,190
PHP binaries you can deploy to your

00:05:29,070 --> 00:05:34,260
server or servers etc if you do an RPM

00:05:32,190 --> 00:05:36,570
people will do that for you and the only

00:05:34,260 --> 00:05:38,640
thing you have to do is doing RPM update

00:05:36,570 --> 00:05:41,460
and you're up and running again so makes

00:05:38,640 --> 00:05:44,150
it much more easier another thing is

00:05:41,460 --> 00:05:46,860
that a lot of people nowadays use

00:05:44,150 --> 00:05:49,620
configuration management tools like chef

00:05:46,860 --> 00:05:51,390
like puppet like ansible and they do

00:05:49,620 --> 00:05:55,410
that with the help of for instance

00:05:51,390 --> 00:05:58,770
vagrant or they just use it on AWS or

00:05:55,410 --> 00:06:01,500
rec space or any cloud system and having

00:05:58,770 --> 00:06:03,500
packages that are just there which you

00:06:01,500 --> 00:06:05,940
can install makes your life much easier

00:06:03,500 --> 00:06:08,040
like with puppet you only have to say

00:06:05,940 --> 00:06:09,710
okay install this package and you're

00:06:08,040 --> 00:06:12,540
done it's it's pretty much a one-liner

00:06:09,710 --> 00:06:14,280
so instead of doing all the menu

00:06:12,540 --> 00:06:17,880
compilation for every system and

00:06:14,280 --> 00:06:20,220
automate that just one single sister of

00:06:17,880 --> 00:06:22,890
one single line in your configuration

00:06:20,220 --> 00:06:24,240
management scripts they often running so

00:06:22,890 --> 00:06:26,790
that makes it much much more

00:06:24,240 --> 00:06:29,940
maintainable in the end especially

00:06:26,790 --> 00:06:32,310
nowadays when our infrastructure is not

00:06:29,940 --> 00:06:35,070
just a simple shared hosting lamp stack

00:06:32,310 --> 00:06:36,409
but like really big systems multiple

00:06:35,070 --> 00:06:40,569
systems multiple men

00:06:36,409 --> 00:06:44,979
Systems multiple web servers etc etc now

00:06:40,569 --> 00:06:47,929
so I will try to show you a bit about

00:06:44,979 --> 00:06:52,639
RPM usage before I start to talk about

00:06:47,929 --> 00:06:55,459
how to create rpm packages and when you

00:06:52,639 --> 00:06:59,029
use RPM packages you have pretty much

00:06:55,459 --> 00:07:02,919
two options use either rpm or use young

00:06:59,029 --> 00:07:06,289
humans like some kind of front-end ish

00:07:02,919 --> 00:07:11,839
type of system that actually uses rpm

00:07:06,289 --> 00:07:14,360
packages there will be a lot of code on

00:07:11,839 --> 00:07:17,629
the on the screen a lot of output so

00:07:14,360 --> 00:07:20,389
hopefully you can all see this so what I

00:07:17,629 --> 00:07:23,749
do here is I have a system in this case

00:07:20,389 --> 00:07:26,539
is sent OS system and I want to search

00:07:23,749 --> 00:07:28,159
for a package package called XD back I

00:07:26,539 --> 00:07:30,589
want to install XD back on that system

00:07:28,159 --> 00:07:33,739
so what I do is something like yum

00:07:30,589 --> 00:07:37,489
search in this case for the keywords PHP

00:07:33,739 --> 00:07:39,409
and x debug and all kinds of things will

00:07:37,489 --> 00:07:42,259
happen in the background and it will

00:07:39,409 --> 00:07:45,860
return information about I've got three

00:07:42,259 --> 00:07:48,919
packages for you that actually is about

00:07:45,860 --> 00:07:54,139
PHP and x debug namely peach beep echo

00:07:48,919 --> 00:07:58,249
XD bug php5 for WP collects debug and 55

00:07:54,139 --> 00:08:00,559
WX debug obviously one is an old PHP

00:07:58,249 --> 00:08:05,029
version one a speech be 5.4 and one is

00:08:00,559 --> 00:08:07,909
probably PHP 5.5 so I can actually look

00:08:05,029 --> 00:08:10,279
inside the repositories just like

00:08:07,909 --> 00:08:12,529
composer can use repositories that I

00:08:10,279 --> 00:08:14,629
have enabled to see what kind of

00:08:12,529 --> 00:08:19,519
packages are there I can search very

00:08:14,629 --> 00:08:21,019
quickly inside the system suppose I want

00:08:19,519 --> 00:08:23,959
to have more information about the

00:08:21,019 --> 00:08:26,779
package I can use yum info for that i

00:08:23,959 --> 00:08:29,659
can say yum info in this case peach p

00:08:26,779 --> 00:08:32,769
dash speckled x XD back and it will show

00:08:29,659 --> 00:08:36,110
you information about the package you

00:08:32,769 --> 00:08:38,180
can see the name of the package you can

00:08:36,110 --> 00:08:40,879
see the arc and arc stands for

00:08:38,180 --> 00:08:46,370
architecture now if you have binaries

00:08:40,879 --> 00:08:48,810
this will be either x86 64 for 64-bit

00:08:46,370 --> 00:08:53,690
systems or I 380

00:08:48,810 --> 00:08:57,270
or i686 for 32-bit systems nowadays it's

00:08:53,690 --> 00:08:59,760
x64 bit mostly you've got a version

00:08:57,270 --> 00:09:01,680
number of this package you got the

00:08:59,760 --> 00:09:03,300
release number of this package I got

00:09:01,680 --> 00:09:05,550
some more information like a description

00:09:03,300 --> 00:09:08,640
like the license which license is

00:09:05,550 --> 00:09:10,080
combined with this package etc etc so

00:09:08,640 --> 00:09:11,640
young info gives you detailed

00:09:10,080 --> 00:09:12,900
information about the packet it doesn't

00:09:11,640 --> 00:09:16,800
install it it just gives you the

00:09:12,900 --> 00:09:18,960
information and so this is a package

00:09:16,800 --> 00:09:21,060
that is not installed yet but I can also

00:09:18,960 --> 00:09:23,640
get information about the things that

00:09:21,060 --> 00:09:26,100
already installed on my system so you

00:09:23,640 --> 00:09:27,930
can do young list installed and I get a

00:09:26,100 --> 00:09:30,600
whole list of all the packages and I

00:09:27,930 --> 00:09:32,310
slipped away a lot of things here but

00:09:30,600 --> 00:09:35,160
you can see that the first package that

00:09:32,310 --> 00:09:39,480
installed is geoip with a certain

00:09:35,160 --> 00:09:43,560
version number make def etc and you see

00:09:39,480 --> 00:09:46,920
once in a while you see like the young

00:09:43,560 --> 00:09:48,360
plugin download only taught no arc so

00:09:46,920 --> 00:09:50,279
that means that this is a package that

00:09:48,360 --> 00:09:53,880
doesn't really contain a binary and can

00:09:50,279 --> 00:09:56,820
use can be used either on 32-bit

00:09:53,880 --> 00:09:58,830
platforms or 64-bit platforms so when

00:09:56,820 --> 00:10:00,630
you have PHP code for instance your

00:09:58,830 --> 00:10:03,060
peach pico doesn't really care if you're

00:10:00,630 --> 00:10:06,630
running it on a 64 32 bit system mostly

00:10:03,060 --> 00:10:08,850
so if you package your own PHP

00:10:06,630 --> 00:10:12,500
application you probably package with an

00:10:08,850 --> 00:10:15,660
architecture of no arc not 32 or 64 bit

00:10:12,500 --> 00:10:17,850
what you see here as well is where that

00:10:15,660 --> 00:10:20,730
package came from so in for instance the

00:10:17,850 --> 00:10:25,080
geoip package came from a repository

00:10:20,730 --> 00:10:27,630
called epale the young plugin download

00:10:25,080 --> 00:10:30,150
only came from a repository called base

00:10:27,630 --> 00:10:33,420
a lot of other stuff came from a

00:10:30,150 --> 00:10:36,270
repository called anaconda santo s etc

00:10:33,420 --> 00:10:38,280
etc those are packages that are actually

00:10:36,270 --> 00:10:41,240
installed during installation of this

00:10:38,280 --> 00:10:44,700
sent OS system so it creates sort of a

00:10:41,240 --> 00:10:46,650
temporary repository for that so we can

00:10:44,700 --> 00:10:49,320
actually see what's installed what

00:10:46,650 --> 00:10:50,820
versions of a package is installed and I

00:10:49,320 --> 00:10:55,170
can actually see where that package came

00:10:50,820 --> 00:10:58,230
from one cool thing as well as I can

00:10:55,170 --> 00:11:01,080
look inside a repository and see what's

00:10:58,230 --> 00:11:02,360
going on so what's inside the package so

00:11:01,080 --> 00:11:04,070
in this case

00:11:02,360 --> 00:11:08,630
I use another application for that

00:11:04,070 --> 00:11:11,029
called repo query minus Q minus L and

00:11:08,630 --> 00:11:13,370
then the package name and it just

00:11:11,029 --> 00:11:16,459
displays this are all the files these

00:11:13,370 --> 00:11:18,470
are all the files inside the package so

00:11:16,459 --> 00:11:20,779
if you're going to install PHP pekel XD

00:11:18,470 --> 00:11:23,810
back it will install these files on

00:11:20,779 --> 00:11:26,750
these part names so the x debug any file

00:11:23,810 --> 00:11:29,769
actual XD bug dot s 0 file some

00:11:26,750 --> 00:11:33,980
information in the documentation etc etc

00:11:29,769 --> 00:11:37,100
you can work away the other round two so

00:11:33,980 --> 00:11:38,480
for instance I can actually query a foul

00:11:37,100 --> 00:11:40,670
on my system and it will show you

00:11:38,480 --> 00:11:44,180
information on which packets it belong

00:11:40,670 --> 00:11:47,420
to I can do that with minus Q minus f so

00:11:44,180 --> 00:11:49,339
our PM minus Q minus f with a certain

00:11:47,420 --> 00:11:51,980
file in this case dot fame info in my

00:11:49,339 --> 00:11:53,720
file it will see well this film info

00:11:51,980 --> 00:11:55,640
file is not really belonging to a

00:11:53,720 --> 00:11:59,690
package which makes sense because it's

00:11:55,640 --> 00:12:02,329
like temporary phone however I can check

00:11:59,690 --> 00:12:06,019
our PM minus Q F and I will see on

00:12:02,329 --> 00:12:09,709
youtube in PHP that it says okay this

00:12:06,019 --> 00:12:14,149
pet this file belongs to peach be 55 w

00:12:09,709 --> 00:12:17,870
CL I etc so this is the PHP binary for

00:12:14,149 --> 00:12:20,959
the the CLI PHP binary for 5.5 coming

00:12:17,870 --> 00:12:23,630
from that package so if you have a file

00:12:20,959 --> 00:12:25,550
you have no idea where it came from you

00:12:23,630 --> 00:12:27,529
can actually use our PM minus Q F to

00:12:25,550 --> 00:12:33,290
actually figure that out this is really

00:12:27,529 --> 00:12:36,470
cool another thing you can do is there's

00:12:33,290 --> 00:12:38,779
an option in your again called what

00:12:36,470 --> 00:12:42,110
provides and it will actually tell me

00:12:38,779 --> 00:12:44,810
okay I need a file called user bin PHP

00:12:42,110 --> 00:12:47,320
for instance which packages do you know

00:12:44,810 --> 00:12:51,019
off that can actually provide this file

00:12:47,320 --> 00:12:54,440
and I'll give you a list so it will say

00:12:51,019 --> 00:12:56,180
okay it will be provided by PHP CLI five

00:12:54,440 --> 00:13:00,649
point three point three it will be

00:12:56,180 --> 00:13:04,250
provided by PHP 55 w CLI and it will be

00:13:00,649 --> 00:13:07,310
provided by peach pcl I but you can see

00:13:04,250 --> 00:13:10,459
the repository is either the base what

00:13:07,310 --> 00:13:12,829
that take updates and the last one is

00:13:10,459 --> 00:13:15,380
called repo installed that means this is

00:13:12,829 --> 00:13:15,950
actually the file that is installed so

00:13:15,380 --> 00:13:18,650
in this case

00:13:15,950 --> 00:13:24,080
user bin PHP has been installed by the

00:13:18,650 --> 00:13:25,760
PHP 55 w CLI package to make it a little

00:13:24,080 --> 00:13:28,670
bit easy you can disable all the

00:13:25,760 --> 00:13:30,560
repositories and it will just say this

00:13:28,670 --> 00:13:32,660
package of this file is installed

00:13:30,560 --> 00:13:37,010
through this packet and you do that with

00:13:32,660 --> 00:13:39,050
disabled repo is star in this case this

00:13:37,010 --> 00:13:44,120
is just for querying information about

00:13:39,050 --> 00:13:46,820
packages on your system now we want to

00:13:44,120 --> 00:13:48,770
install stuff on our system and in this

00:13:46,820 --> 00:13:54,250
case I'm going to install an application

00:13:48,770 --> 00:13:56,540
called screen anyone used it Oh awesome

00:13:54,250 --> 00:13:58,370
cool so a lot of people know about

00:13:56,540 --> 00:14:00,320
screen it's really awesome if you do

00:13:58,370 --> 00:14:02,270
come on line work especially with remote

00:14:00,320 --> 00:14:04,570
systems take a look at either screen or

00:14:02,270 --> 00:14:07,610
team your team Ark's awesome

00:14:04,570 --> 00:14:10,310
applications for that so what i'm doing

00:14:07,610 --> 00:14:12,380
here is doing a young install screen but

00:14:10,310 --> 00:14:14,060
obviously you can't really install as a

00:14:12,380 --> 00:14:16,640
normal user so you have to do that

00:14:14,060 --> 00:14:22,160
through super power super user rights in

00:14:16,640 --> 00:14:23,780
this case sudo yum install screen you

00:14:22,160 --> 00:14:25,490
will see it will do all kinds of

00:14:23,780 --> 00:14:29,270
information so there are like young

00:14:25,490 --> 00:14:30,950
plugins that it will check the download

00:14:29,270 --> 00:14:33,350
only in a facet mirror it's not really

00:14:30,950 --> 00:14:37,850
relevant right now but you will see that

00:14:33,350 --> 00:14:40,700
it will say package screen x86 64 blah

00:14:37,850 --> 00:14:43,970
blah blah will be installed etc and in

00:14:40,700 --> 00:14:46,520
the end in the dashed lines it will give

00:14:43,970 --> 00:14:49,280
you an overview on what actually is

00:14:46,520 --> 00:14:52,070
going to happen as soon as you press yes

00:14:49,280 --> 00:14:54,290
in this case it will say I'm going to

00:14:52,070 --> 00:14:56,780
install the package screen from this

00:14:54,290 --> 00:14:58,880
architecture for this version from this

00:14:56,780 --> 00:15:01,540
repository this will be the file size

00:14:58,880 --> 00:15:04,640
that i'm going to download or install

00:15:01,540 --> 00:15:07,250
after i say yes it will actually do that

00:15:04,640 --> 00:15:09,530
it will run the day that command and

00:15:07,250 --> 00:15:12,740
those transactions and then in the end

00:15:09,530 --> 00:15:15,350
it will say installed screen complete

00:15:12,740 --> 00:15:19,070
and now i can just use screen and do

00:15:15,350 --> 00:15:21,530
whatever I want with it suppose I want

00:15:19,070 --> 00:15:25,280
to get rid of a package just as easy I

00:15:21,530 --> 00:15:27,560
can say sudo yum remove screen and it

00:15:25,280 --> 00:15:29,209
will give a list again from this is what

00:15:27,560 --> 00:15:31,189
I will be removing screen

00:15:29,209 --> 00:15:34,009
this version this architecture from this

00:15:31,189 --> 00:15:37,129
but this repository and this file size

00:15:34,009 --> 00:15:39,819
and in the end if I say yes it will see

00:15:37,129 --> 00:15:43,160
it will say I just erased the screen

00:15:39,819 --> 00:15:46,069
removed it and everything is complete so

00:15:43,160 --> 00:15:48,170
you can find out exactly what's going on

00:15:46,069 --> 00:15:51,170
before it actually does it so you always

00:15:48,170 --> 00:15:54,829
have the option to say well let's not do

00:15:51,170 --> 00:15:56,149
that or let's change it or whatever but

00:15:54,829 --> 00:15:58,850
this is just a simple package with no

00:15:56,149 --> 00:16:02,350
dependencies let's try to install tick

00:15:58,850 --> 00:16:05,509
and thick it's like a front end for get

00:16:02,350 --> 00:16:07,459
so obviously it will probably will

00:16:05,509 --> 00:16:08,869
depend on the package get because it's

00:16:07,459 --> 00:16:12,220
pretty useless to have a front end

00:16:08,869 --> 00:16:14,769
forget without having get on your system

00:16:12,220 --> 00:16:18,170
what you see here is that it actually

00:16:14,769 --> 00:16:20,959
say package stick will be installed and

00:16:18,170 --> 00:16:23,179
then you see processing dependency get

00:16:20,959 --> 00:16:28,129
for baggage stick so it knows this

00:16:23,179 --> 00:16:29,869
package depends on the get package and

00:16:28,129 --> 00:16:33,379
the funny thing is that the package kit

00:16:29,869 --> 00:16:35,509
itself instr depends on other packages

00:16:33,379 --> 00:16:39,110
as well in this case the pearl get the

00:16:35,509 --> 00:16:42,199
rsync broke it again openssh ssh clients

00:16:39,110 --> 00:16:44,119
so the whole dependency tree will

00:16:42,199 --> 00:16:46,309
actually be figured out by in this case

00:16:44,119 --> 00:16:48,490
young and it will say about these

00:16:46,309 --> 00:16:52,759
packages you did not install already

00:16:48,490 --> 00:16:55,850
shall I install it for you as well in

00:16:52,759 --> 00:16:58,279
this case I have a list of saying I'm

00:16:55,850 --> 00:16:59,929
going to install take but I'm going to

00:16:58,279 --> 00:17:02,569
install the dependencies for take as

00:16:59,929 --> 00:17:05,779
well namely gate openssh clients etc etc

00:17:02,569 --> 00:17:08,480
would you like me to do that in this

00:17:05,779 --> 00:17:10,069
case later on I can say yes you can see

00:17:08,480 --> 00:17:14,630
completely all the transactions that

00:17:10,069 --> 00:17:17,449
will be will be run and in the end it

00:17:14,630 --> 00:17:19,339
will say I install tick i installed all

00:17:17,449 --> 00:17:22,939
the dependencies for take and everything

00:17:19,339 --> 00:17:26,240
is complete this should be fairly

00:17:22,939 --> 00:17:28,789
obvious for most people right so

00:17:26,240 --> 00:17:31,840
querying RPM packages Graham

00:17:28,789 --> 00:17:36,950
repositories and installing and removing

00:17:31,840 --> 00:17:40,669
applications or rpm packages however

00:17:36,950 --> 00:17:41,800
since well it sits there for a long time

00:17:40,669 --> 00:17:44,260
but none of those people

00:17:41,800 --> 00:17:47,050
we know it is yum actually has

00:17:44,260 --> 00:17:50,140
transaction history you can actually say

00:17:47,050 --> 00:17:52,660
sudo yum history list all and get all

00:17:50,140 --> 00:17:55,600
the transactions that's ever done on

00:17:52,660 --> 00:17:59,020
that system so we can track when a

00:17:55,600 --> 00:18:02,590
package is installed why how etc it's in

00:17:59,020 --> 00:18:04,690
there so in this case I've done eighteen

00:18:02,590 --> 00:18:07,210
different young transact of young

00:18:04,690 --> 00:18:10,000
transactions so the last transaction i

00:18:07,210 --> 00:18:12,310
did was i erased one package the

00:18:10,000 --> 00:18:14,380
transactions before that i installed six

00:18:12,310 --> 00:18:16,750
packages before that i erased one

00:18:14,380 --> 00:18:19,540
package again etc in see all the way at

00:18:16,750 --> 00:18:23,230
the bottom that somebody the system user

00:18:19,540 --> 00:18:26,290
installed 217 packages probably this is

00:18:23,230 --> 00:18:28,510
installing the base system so you can

00:18:26,290 --> 00:18:32,040
have a complete history on what happened

00:18:28,510 --> 00:18:36,940
during the installation of your system

00:18:32,040 --> 00:18:39,460
you can also pinpoint one single package

00:18:36,940 --> 00:18:42,340
and say sudo yum history package lists

00:18:39,460 --> 00:18:45,400
thick and it will show you which

00:18:42,340 --> 00:18:48,640
transactions was involved in the package

00:18:45,400 --> 00:18:51,850
ticket so in this case transaction ID 17

00:18:48,640 --> 00:18:54,220
installed tick and transaction ID 18

00:18:51,850 --> 00:18:56,740
erased dick again so if you want to

00:18:54,220 --> 00:18:58,660
figure out like oh but I installed tick

00:18:56,740 --> 00:19:01,210
and why isn't it working on my system

00:18:58,660 --> 00:19:03,970
try to see if it's actually there and if

00:19:01,210 --> 00:19:05,680
it's not you can figure out why it's not

00:19:03,970 --> 00:19:09,400
there who removed it when did they

00:19:05,680 --> 00:19:11,260
remove it etc other way around works as

00:19:09,400 --> 00:19:12,880
well so you can look inside the

00:19:11,260 --> 00:19:15,310
transaction ID and get all the history

00:19:12,880 --> 00:19:18,490
from that so in this case you see sudo

00:19:15,310 --> 00:19:20,410
yum history info transaction ID 17 and

00:19:18,490 --> 00:19:23,110
you see what's happened so in this case

00:19:20,410 --> 00:19:26,590
the command line Iran was installed tick

00:19:23,110 --> 00:19:30,250
from user me in this case and what did

00:19:26,590 --> 00:19:32,260
it do it installed the dependency get it

00:19:30,250 --> 00:19:35,470
installed the dependency open ssh client

00:19:32,260 --> 00:19:38,560
from the base repository and in the end

00:19:35,470 --> 00:19:40,780
it installed ticket from the epale

00:19:38,560 --> 00:19:44,440
repository so you can find out all

00:19:40,780 --> 00:19:47,890
information about packages whether they

00:19:44,440 --> 00:19:51,430
came from who installed what etc etc who

00:19:47,890 --> 00:19:54,020
knew about your mystery not allows

00:19:51,430 --> 00:19:56,060
people a few okay cool at least

00:19:54,020 --> 00:20:04,870
learn something right so that's a that's

00:19:56,060 --> 00:20:07,700
a win um this is all true yum and YUM

00:20:04,870 --> 00:20:10,820
uses repository so you don't really have

00:20:07,700 --> 00:20:12,680
your own custom rpms yet but sometimes

00:20:10,820 --> 00:20:15,170
you have a website that says oh I have a

00:20:12,680 --> 00:20:16,790
RPM package here for you you can

00:20:15,170 --> 00:20:19,910
download it and install it on your

00:20:16,790 --> 00:20:22,670
system this is normally done through RPM

00:20:19,910 --> 00:20:25,040
and what I always use and I know this is

00:20:22,670 --> 00:20:27,290
a really bad way of remembering it but

00:20:25,040 --> 00:20:31,850
the only way I remember it it's our pm-

00:20:27,290 --> 00:20:33,860
HIV this is how I actually remember how

00:20:31,850 --> 00:20:38,900
to install packages I know it's too bad

00:20:33,860 --> 00:20:41,210
but so RPM HIV install the package and I

00:20:38,900 --> 00:20:44,990
said before you can query a package the

00:20:41,210 --> 00:20:47,180
contents of it by using rpm ql in this

00:20:44,990 --> 00:20:50,180
case you only need to package name so

00:20:47,180 --> 00:20:51,770
not a version and dot RPM in the back /

00:20:50,180 --> 00:20:55,100
just the name of the package in this

00:20:51,770 --> 00:20:58,250
case take or screen or whatever you can

00:20:55,100 --> 00:21:01,880
also do a qf that will query for file

00:20:58,250 --> 00:21:05,330
etc and RPM has got loads and loads of

00:21:01,880 --> 00:21:07,190
functions I think maybe even ninety

00:21:05,330 --> 00:21:09,950
percent of the of the functionality of

00:21:07,190 --> 00:21:12,560
RPM I don't even use its it's really

00:21:09,950 --> 00:21:15,730
really powerful but even the few

00:21:12,560 --> 00:21:20,450
commands that you use more than enough

00:21:15,730 --> 00:21:23,540
okay so this is about creating of

00:21:20,450 --> 00:21:26,570
installing files let's try to create

00:21:23,540 --> 00:21:28,040
packages and the best way to explain how

00:21:26,570 --> 00:21:30,530
to create package is to actually

00:21:28,040 --> 00:21:35,840
demonstrate this obviously I won't do it

00:21:30,530 --> 00:21:38,330
life but if you want to create a package

00:21:35,840 --> 00:21:40,850
there are certain things you need so

00:21:38,330 --> 00:21:43,600
first of all you need sources right you

00:21:40,850 --> 00:21:46,130
need something that needs to be packaged

00:21:43,600 --> 00:21:50,600
optionally you have things like pets

00:21:46,130 --> 00:21:53,330
files so could be that you have a

00:21:50,600 --> 00:21:54,920
certain application but you want to

00:21:53,330 --> 00:21:56,840
create a package that does something a

00:21:54,920 --> 00:21:58,970
little bit different or have another

00:21:56,840 --> 00:22:01,040
feature that it's not in the main

00:21:58,970 --> 00:22:02,780
packets but you want it as well you can

00:22:01,040 --> 00:22:05,540
actually add those patch files as well

00:22:02,780 --> 00:22:06,570
and then the RPM can actually take care

00:22:05,540 --> 00:22:09,580
of that

00:22:06,570 --> 00:22:13,830
you probably need any other things you

00:22:09,580 --> 00:22:17,050
would like to add documentation examples

00:22:13,830 --> 00:22:19,420
init scripts all custom things that you

00:22:17,050 --> 00:22:21,130
want you can add to your rpm as well

00:22:19,420 --> 00:22:26,440
doesn't really matter there is not

00:22:21,130 --> 00:22:28,960
really anything you can't add to our PM

00:22:26,440 --> 00:22:31,660
packages and the most important part is

00:22:28,960 --> 00:22:34,210
you need to have a spec file spec file

00:22:31,660 --> 00:22:36,460
is really important because the spec

00:22:34,210 --> 00:22:40,440
file defines what we need to do with an

00:22:36,460 --> 00:22:43,350
RPM package building is pretty easy as

00:22:40,440 --> 00:22:48,610
long as you get your spec file correct

00:22:43,350 --> 00:22:50,980
so this sounds really easy obviously but

00:22:48,610 --> 00:22:54,300
getting a spec file correct is really

00:22:50,980 --> 00:22:56,890
hard so you've spent a lot of time

00:22:54,300 --> 00:22:59,980
configuring your spec files try to run

00:22:56,890 --> 00:23:02,350
it again see what's wrong etc etc but as

00:22:59,980 --> 00:23:06,100
soon as the spec file is correct you

00:23:02,350 --> 00:23:10,270
actually have a system that will build

00:23:06,100 --> 00:23:12,550
packages from sources in a way that it

00:23:10,270 --> 00:23:15,040
will be the same over and over again you

00:23:12,550 --> 00:23:17,680
can automate your stuff really easy as

00:23:15,040 --> 00:23:21,880
soon as you hit something that's

00:23:17,680 --> 00:23:24,220
configurable by a spec file if you're

00:23:21,880 --> 00:23:28,210
going to build you're going to build it

00:23:24,220 --> 00:23:30,160
with a tool called rpm built and the

00:23:28,210 --> 00:23:33,310
most important thing is that you don't

00:23:30,160 --> 00:23:36,040
build as root if you're going to look in

00:23:33,310 --> 00:23:39,970
building rpms pretty much every side

00:23:36,040 --> 00:23:42,400
says don't build as root if you want to

00:23:39,970 --> 00:23:45,100
figure out why please do try and build

00:23:42,400 --> 00:23:48,630
this route you probably will have to

00:23:45,100 --> 00:23:52,380
re-install your system sooner or later

00:23:48,630 --> 00:23:55,570
rpm building is done through an

00:23:52,380 --> 00:23:58,030
unprivileged user like your own user or

00:23:55,570 --> 00:24:00,040
maybe in a separate build user or

00:23:58,030 --> 00:24:01,660
whatever as long as it's not rude it

00:24:00,040 --> 00:24:06,820
will mess up your system sooner or later

00:24:01,660 --> 00:24:09,340
so let's try and build an RPM and for

00:24:06,820 --> 00:24:11,650
this I have a really awesome tool I've

00:24:09,340 --> 00:24:13,570
written it's called Auto bug fix and

00:24:11,650 --> 00:24:16,510
other bug fix is the world first

00:24:13,570 --> 00:24:19,500
automatic bug fixer it will actually fix

00:24:16,510 --> 00:24:22,740
his box while you type them

00:24:19,500 --> 00:24:25,240
it's dead awesome it will actually know

00:24:22,740 --> 00:24:27,580
before you typed it that you're going to

00:24:25,240 --> 00:24:31,030
type something wrong and it will dis

00:24:27,580 --> 00:24:32,980
allow you to type that code all of a

00:24:31,030 --> 00:24:37,480
sudden I can't type any PHP code anymore

00:24:32,980 --> 00:24:40,600
so I don't know why but all the bug fix

00:24:37,480 --> 00:24:43,390
has got three files it's got the binary

00:24:40,600 --> 00:24:46,630
auto bug fix it got a license with it

00:24:43,390 --> 00:24:48,430
and it's got a manual page so you can do

00:24:46,630 --> 00:24:50,530
on your command line you can do men auto

00:24:48,430 --> 00:24:55,870
Burke fix and it will show you all the

00:24:50,530 --> 00:24:57,550
options that the application has so it's

00:24:55,870 --> 00:25:00,970
really easy just to demonstrate how it

00:24:57,550 --> 00:25:03,670
works so what I'm going to do I'm going

00:25:00,970 --> 00:25:07,000
to get that package or the bug fix

00:25:03,670 --> 00:25:10,690
version 1.0 print up and GC I can get

00:25:07,000 --> 00:25:14,260
that from the auto burg fix website i

00:25:10,690 --> 00:25:17,500
can add patches somehow there's a book

00:25:14,260 --> 00:25:20,110
in my auto bug fix application ironic I

00:25:17,500 --> 00:25:21,880
know so there's a hotfix I like to add

00:25:20,110 --> 00:25:23,590
as well and I know there's an extra

00:25:21,880 --> 00:25:26,500
feature coming on but it's not in

00:25:23,590 --> 00:25:29,170
version 1.0 yet but I created a patch

00:25:26,500 --> 00:25:32,920
for that already so that my RPM will

00:25:29,170 --> 00:25:35,380
actually have that feature and I add

00:25:32,920 --> 00:25:37,780
other files like the license files the

00:25:35,380 --> 00:25:39,760
readme files etc etc and the last thing

00:25:37,780 --> 00:25:43,330
I need is the spec from all the bug fix

00:25:39,760 --> 00:25:45,010
dot spec now I told you before the spec

00:25:43,330 --> 00:25:49,720
file is the most important file because

00:25:45,010 --> 00:25:52,870
the spec file is actually a mixture of a

00:25:49,720 --> 00:25:56,320
script and configuration file that tells

00:25:52,870 --> 00:26:00,610
rpm build how to actually build RPM

00:25:56,320 --> 00:26:03,970
files they can be also used for building

00:26:00,610 --> 00:26:07,260
source rpms files and source rpm files

00:26:03,970 --> 00:26:12,900
are all the information needed to build

00:26:07,260 --> 00:26:12,900
rpms files from that for instance if you

00:26:13,020 --> 00:26:23,500
install in an open source system like

00:26:20,710 --> 00:26:26,140
sandwiches etc all the packages there

00:26:23,500 --> 00:26:28,150
are actually created from source rpm

00:26:26,140 --> 00:26:31,570
packages so you can actually use that

00:26:28,150 --> 00:26:33,640
one change packages however you see fit

00:26:31,570 --> 00:26:35,440
because what sent to as does is they

00:26:33,640 --> 00:26:39,460
take the source rpms from actually

00:26:35,440 --> 00:26:43,360
redhead in this case so you can really

00:26:39,460 --> 00:26:44,950
easy well not easy but it is possible it

00:26:43,360 --> 00:26:47,680
actually builds your own operating

00:26:44,950 --> 00:26:49,720
system from either center west packages

00:26:47,680 --> 00:26:51,400
or redhead packages or whatever because

00:26:49,720 --> 00:26:53,590
all the packages that you need to build

00:26:51,400 --> 00:26:55,630
that operating system are there it's

00:26:53,590 --> 00:27:00,580
open source and you can use the source

00:26:55,630 --> 00:27:03,520
rpms for that but let's go back to the

00:27:00,580 --> 00:27:06,690
RPM building itself so rpm built

00:27:03,520 --> 00:27:09,250
actually needs a directory structure

00:27:06,690 --> 00:27:10,990
something that like looks like this so

00:27:09,250 --> 00:27:14,320
you have an RPM bill directory and there

00:27:10,990 --> 00:27:16,990
are six different uppercase I don't know

00:27:14,320 --> 00:27:22,350
why uppercase directories inside sources

00:27:16,990 --> 00:27:24,940
specs build build root rpms s rpms

00:27:22,350 --> 00:27:27,220
obviously sources is where all our

00:27:24,940 --> 00:27:31,450
source files will in the auto bug fix

00:27:27,220 --> 00:27:35,110
dot 10 dot 0 rgz file will be in there

00:27:31,450 --> 00:27:37,780
the spec file however will be inside the

00:27:35,110 --> 00:27:39,640
spec directory the built and built root

00:27:37,780 --> 00:27:42,220
directory are actually directories where

00:27:39,640 --> 00:27:44,500
whole building of an application will

00:27:42,220 --> 00:27:49,390
take place and output of that building

00:27:44,500 --> 00:27:51,250
will be done in rpms and s rpms so the

00:27:49,390 --> 00:27:53,380
only thing you need is after the build

00:27:51,250 --> 00:27:57,450
take a look at the RPMs directory and

00:27:53,380 --> 00:28:01,210
your rpms will be there if you're lucky

00:27:57,450 --> 00:28:03,430
so what we do is we in this case we copy

00:28:01,210 --> 00:28:07,210
manually our source files into the

00:28:03,430 --> 00:28:10,180
sources directory it's possible to use

00:28:07,210 --> 00:28:12,490
URLs inside the spec file I will show

00:28:10,180 --> 00:28:14,620
you later but it doesn't manually copy

00:28:12,490 --> 00:28:16,780
desk from the URL so you have to do it

00:28:14,620 --> 00:28:19,030
many of automatically so you have to do

00:28:16,780 --> 00:28:22,300
it manually you have to copy the spec

00:28:19,030 --> 00:28:24,880
files into the specs directory and if

00:28:22,300 --> 00:28:26,890
you install and a source rpm this will

00:28:24,880 --> 00:28:30,070
automatically be done for you so this is

00:28:26,890 --> 00:28:32,380
why sometimes creating something from a

00:28:30,070 --> 00:28:36,480
source RPM is easier because you don't

00:28:32,380 --> 00:28:39,190
have to get all the information yourself

00:28:36,480 --> 00:28:44,640
what we do then is we're going to say

00:28:39,190 --> 00:28:49,270
our PM minus V for both minus B a

00:28:44,640 --> 00:28:50,980
that will say build all with the part to

00:28:49,270 --> 00:28:54,159
the spec file and then it will start

00:28:50,980 --> 00:28:55,870
building whatever the spec file says it

00:28:54,159 --> 00:28:58,779
has to build that could be one package

00:28:55,870 --> 00:29:01,600
but it also be 10 packages if you're

00:28:58,779 --> 00:29:03,940
going to build HTTP the server the

00:29:01,600 --> 00:29:06,700
Apache web server it will output

00:29:03,940 --> 00:29:09,370
something like four or five different

00:29:06,700 --> 00:29:11,260
packages just from one spec file like

00:29:09,370 --> 00:29:15,940
the debug version and the pre forked

00:29:11,260 --> 00:29:18,070
version and the normal version etc and I

00:29:15,940 --> 00:29:19,600
said before the RPM and the source rpms

00:29:18,070 --> 00:29:22,750
are actually created in the directories

00:29:19,600 --> 00:29:24,250
as specified so the spec file most

00:29:22,750 --> 00:29:27,130
important file how does it look like

00:29:24,250 --> 00:29:28,419
this is a really simple one they can be

00:29:27,130 --> 00:29:30,460
really complex i will show you a little

00:29:28,419 --> 00:29:33,340
bit later on but it looks something like

00:29:30,460 --> 00:29:37,630
this so the first part you see here is

00:29:33,340 --> 00:29:39,549
actually the configuration part so it

00:29:37,630 --> 00:29:41,860
will show you what is the name of the

00:29:39,549 --> 00:29:45,039
package auto bug fix what is the version

00:29:41,860 --> 00:29:47,500
this is version 1.0 what is the release

00:29:45,039 --> 00:29:50,820
normally have something like this which

00:29:47,500 --> 00:29:54,880
means it outputs something like 1 dot

00:29:50,820 --> 00:29:57,940
el6 or el5 things like that you will

00:29:54,880 --> 00:30:01,990
notice them inside the RPMs files if you

00:29:57,940 --> 00:30:04,390
install them a summary very important

00:30:01,990 --> 00:30:06,549
because you can actually when you run

00:30:04,390 --> 00:30:09,070
your search for instance it will

00:30:06,549 --> 00:30:11,409
actually use the summary to figure out

00:30:09,070 --> 00:30:13,090
okay what are you looking for so

00:30:11,409 --> 00:30:16,149
normally it's only the name and a

00:30:13,090 --> 00:30:17,770
summary that is searched upon but you

00:30:16,149 --> 00:30:19,870
can have more information inside the

00:30:17,770 --> 00:30:22,000
description and you can actually use

00:30:19,870 --> 00:30:23,770
young search to search inside your

00:30:22,000 --> 00:30:28,570
description as well if you want to but

00:30:23,770 --> 00:30:32,919
try to make a summary as as specific as

00:30:28,570 --> 00:30:35,500
possible you can have a group in this

00:30:32,919 --> 00:30:37,899
case development tools so it can

00:30:35,500 --> 00:30:40,690
actually see that oh this is something

00:30:37,899 --> 00:30:42,549
that belongs to a certain group so it's

00:30:40,690 --> 00:30:45,429
easier to track easy to figure out I

00:30:42,549 --> 00:30:46,870
want to install developer tools just

00:30:45,429 --> 00:30:49,539
show me what kind of developer tools

00:30:46,870 --> 00:30:52,059
that is etc there's a license in there

00:30:49,539 --> 00:30:53,710
you can see the URL where you can find

00:30:52,059 --> 00:30:56,870
information about the packets and here

00:30:53,710 --> 00:31:01,309
you see things like source 0 patch

00:30:56,870 --> 00:31:03,740
one etc so all the source zero sauce one

00:31:01,309 --> 00:31:07,309
source to source tree etc our source

00:31:03,740 --> 00:31:10,120
files that us those files are needed to

00:31:07,309 --> 00:31:13,850
actually start compiling your

00:31:10,120 --> 00:31:15,710
application the patch files are just

00:31:13,850 --> 00:31:18,559
patch files that you can add like new

00:31:15,710 --> 00:31:20,180
features like hot fixes etc etc so in

00:31:18,559 --> 00:31:25,640
this case I only have one patch file

00:31:20,180 --> 00:31:27,710
namely the hotfix 001 Dogpatch now these

00:31:25,640 --> 00:31:30,140
two files the source files in the batch

00:31:27,710 --> 00:31:33,020
files are from the same server but it

00:31:30,140 --> 00:31:34,940
could might as well be that somebody's

00:31:33,020 --> 00:31:37,280
created auto Burke fix and somebody else

00:31:34,940 --> 00:31:39,770
created a new feature and this package

00:31:37,280 --> 00:31:42,260
which is created by again somebody else

00:31:39,770 --> 00:31:46,280
just aggregates them and puts them

00:31:42,260 --> 00:31:49,720
together so as a source developer for

00:31:46,280 --> 00:31:52,400
the auto bug fix you don't need to be

00:31:49,720 --> 00:31:53,870
the spec file maintainer or you don't

00:31:52,400 --> 00:31:55,250
need to maintain all the patch files

00:31:53,870 --> 00:31:58,490
somebody else can do that for you

00:31:55,250 --> 00:32:00,890
doesn't matter it only needs a URL where

00:31:58,490 --> 00:32:03,800
can I find the tar files where I can i

00:32:00,890 --> 00:32:05,630
find the patch files etc things like

00:32:03,800 --> 00:32:10,429
bill truth isn't really that important

00:32:05,630 --> 00:32:13,640
build are in this case the auto bit auto

00:32:10,429 --> 00:32:16,610
big fix file is a beach be file go

00:32:13,640 --> 00:32:18,620
figure and so it doesn't need an

00:32:16,610 --> 00:32:20,510
architecture can run on 32-bit systems

00:32:18,620 --> 00:32:22,309
can run a 64-bit systems doesn't matter

00:32:20,510 --> 00:32:25,730
I'm the package maintainer in this case

00:32:22,309 --> 00:32:28,490
but this requires peach be common why

00:32:25,730 --> 00:32:31,550
because it's a PHP file so you can't run

00:32:28,490 --> 00:32:34,070
PHP you can't run other bug fix without

00:32:31,550 --> 00:32:37,490
having peach be there so I need peach be

00:32:34,070 --> 00:32:39,530
common in this case so these are the

00:32:37,490 --> 00:32:41,720
dependencies that will be installed as

00:32:39,530 --> 00:32:43,970
soon as you try to install other bug fix

00:32:41,720 --> 00:32:46,190
it will say ok you want to sall other

00:32:43,970 --> 00:32:49,130
back fix let's install PHP comment as

00:32:46,190 --> 00:32:52,700
well again there's a description with

00:32:49,130 --> 00:32:55,880
some information etc so this is like the

00:32:52,700 --> 00:33:00,800
config part of your spec file underneath

00:32:55,880 --> 00:33:04,240
you have the actual script file and this

00:33:00,800 --> 00:33:08,010
is really fun because this is all macros

00:33:04,240 --> 00:33:11,280
so everything you see here will

00:33:08,010 --> 00:33:12,810
actually be resolved into all kinds of

00:33:11,280 --> 00:33:15,840
other stuff but this is actually what

00:33:12,810 --> 00:33:20,190
makes it easier so the first thing you

00:33:15,840 --> 00:33:23,130
see is dollar prep and this is the part

00:33:20,190 --> 00:33:26,130
of the RPM building where it will

00:33:23,130 --> 00:33:29,040
prepare for whatever it needs to do in

00:33:26,130 --> 00:33:32,490
this case it will say setup minus Q and

00:33:29,040 --> 00:33:36,300
setup minus Q again is a macro that will

00:33:32,490 --> 00:33:38,040
actually unzip a tarball and just put it

00:33:36,300 --> 00:33:40,020
in the correct directories so normally

00:33:38,040 --> 00:33:42,120
you have to do that by yourself but

00:33:40,020 --> 00:33:44,400
because every package basically it's

00:33:42,120 --> 00:33:48,090
from a turbo they made something called

00:33:44,400 --> 00:33:50,940
set up to make your life much easier the

00:33:48,090 --> 00:33:53,790
other one dollar patch one just says

00:33:50,940 --> 00:33:56,880
okay the patch file the patch one file I

00:33:53,790 --> 00:33:58,830
showed you is actually a file that needs

00:33:56,880 --> 00:34:02,670
to be patched onto whatever you

00:33:58,830 --> 00:34:05,040
extracted from the towel bar if you

00:34:02,670 --> 00:34:08,820
don't have batch files could be in your

00:34:05,040 --> 00:34:10,860
PHP application you can just leave that

00:34:08,820 --> 00:34:13,830
you don't need to do that but a lot of

00:34:10,860 --> 00:34:17,280
applications inside rpms actually use

00:34:13,830 --> 00:34:20,520
batch files the next step is the build

00:34:17,280 --> 00:34:23,250
step in this case it will build stuff it

00:34:20,520 --> 00:34:24,990
will compile stuff now obviously it's a

00:34:23,250 --> 00:34:27,480
peach be application it doesn't need

00:34:24,990 --> 00:34:29,520
compiling it doesn't need configure make

00:34:27,480 --> 00:34:31,639
make install and stuff like that so this

00:34:29,520 --> 00:34:34,620
step is actually empty I don't need it

00:34:31,639 --> 00:34:36,720
however the next step is the install

00:34:34,620 --> 00:34:39,210
step this is really confusing because

00:34:36,720 --> 00:34:42,780
this is not installing it on your main

00:34:39,210 --> 00:34:45,179
system this is installing it inside the

00:34:42,780 --> 00:34:46,620
RPM build directory like to build and

00:34:45,179 --> 00:34:49,590
the build root directories that are

00:34:46,620 --> 00:34:51,840
there so what the RPM is actually doing

00:34:49,590 --> 00:34:55,429
the RPM builder is actually doing is it

00:34:51,840 --> 00:34:58,380
will compile the information like my

00:34:55,429 --> 00:35:00,090
turbo it will do stuff in this case it

00:34:58,380 --> 00:35:01,980
won't compile but there's a source tree

00:35:00,090 --> 00:35:05,940
there and it will copy everything over

00:35:01,980 --> 00:35:09,000
from the built root source directory

00:35:05,940 --> 00:35:12,230
over to the builds root directory so I

00:35:09,000 --> 00:35:15,810
just copy files over and from that place

00:35:12,230 --> 00:35:17,760
in this case it will be I'm going to

00:35:15,810 --> 00:35:20,580
make a directory / use a local much

00:35:17,760 --> 00:35:21,170
logic bin i will copy a file otto bug

00:35:20,580 --> 00:35:23,299
fixing that

00:35:21,170 --> 00:35:25,160
directory I will create a man directory

00:35:23,299 --> 00:35:27,650
i will copy a file into the main

00:35:25,160 --> 00:35:30,609
directory etc and the clean face is

00:35:27,650 --> 00:35:33,470
about cleaning everything up later on so

00:35:30,609 --> 00:35:38,059
until now the only thing i did was

00:35:33,470 --> 00:35:43,309
inside an RPM build directory the most

00:35:38,059 --> 00:35:46,609
important part is the files part because

00:35:43,309 --> 00:35:49,910
here we actually tell the RPM build

00:35:46,609 --> 00:35:52,549
which files do you need to package in

00:35:49,910 --> 00:35:54,589
this case I need to pack it doc files

00:35:52,549 --> 00:35:56,809
you see percentage doc and it knows that

00:35:54,589 --> 00:35:59,960
all the files inside the documentation

00:35:56,809 --> 00:36:03,049
should be inside users shared or

00:35:59,960 --> 00:36:05,000
whatever I need to have a directory user

00:36:03,049 --> 00:36:06,470
local I need to have a directory user

00:36:05,000 --> 00:36:09,410
local North logic I need to have a

00:36:06,470 --> 00:36:11,900
directory use a lot local Fox logic pin

00:36:09,410 --> 00:36:14,390
a lot of directories but I have to

00:36:11,900 --> 00:36:16,730
specify all of them and then I will say

00:36:14,390 --> 00:36:18,980
you have to have a file called user

00:36:16,730 --> 00:36:21,410
local North logic bin auto bugfix and

00:36:18,980 --> 00:36:26,780
you have to have a manual page called

00:36:21,410 --> 00:36:30,349
Auto bugfix dot one dot GC now what RPM

00:36:26,780 --> 00:36:33,710
build will do in this case is it will

00:36:30,349 --> 00:36:36,500
see if it can matches these files in the

00:36:33,710 --> 00:36:38,450
RPM build directory you create it if it

00:36:36,500 --> 00:36:41,510
can it will build a package if it can't

00:36:38,450 --> 00:36:43,190
it will blame you and you have to change

00:36:41,510 --> 00:36:48,640
your install scripts or change your

00:36:43,190 --> 00:36:51,619
configurable scripts etc in the end you

00:36:48,640 --> 00:36:54,980
have something called rpm lint to

00:36:51,619 --> 00:36:57,440
actually check your configuration so in

00:36:54,980 --> 00:37:00,500
this case I run RPM lint order bug fix

00:36:57,440 --> 00:37:02,869
talks back and it will say yeah okay

00:37:00,500 --> 00:37:05,420
there are 0 arrows but this one warning

00:37:02,869 --> 00:37:07,069
because you hard coded the package

00:37:05,420 --> 00:37:10,579
attack on this case doesn't really

00:37:07,069 --> 00:37:13,280
matter so this is like you can't compile

00:37:10,579 --> 00:37:15,559
your stuff you can check your spec file

00:37:13,280 --> 00:37:18,140
for errors and if everything is ok you

00:37:15,559 --> 00:37:21,650
can actually try it through RPM build-

00:37:18,140 --> 00:37:23,690
ba or minus V if you want as well with

00:37:21,650 --> 00:37:26,210
the spec file and in the end it will

00:37:23,690 --> 00:37:27,530
either succeed it or not and if it

00:37:26,210 --> 00:37:30,500
doesn't you have to change the spec file

00:37:27,530 --> 00:37:33,420
if it did inside the RPM directory there

00:37:30,500 --> 00:37:35,579
will be an auto bug fix or PM

00:37:33,420 --> 00:37:41,760
let's assume that everything went okay

00:37:35,579 --> 00:37:44,460
and i have the spec file i can use mine

00:37:41,760 --> 00:37:47,849
RPM minus q IP to get some information

00:37:44,460 --> 00:37:50,549
about a package and you see the name

00:37:47,849 --> 00:37:52,589
Otto bugfix diversion the release number

00:37:50,549 --> 00:37:54,740
you see it's not installed because it

00:37:52,589 --> 00:37:57,510
says install date it's not installed

00:37:54,740 --> 00:37:59,700
which hosts that you build it on when

00:37:57,510 --> 00:38:02,190
did you build it on who build it what's

00:37:59,700 --> 00:38:05,329
the information etc so now you actually

00:38:02,190 --> 00:38:09,869
have an RPM file which you can use

00:38:05,329 --> 00:38:12,180
install it again RPM by HIV auto bug fix

00:38:09,869 --> 00:38:15,960
etc and now it's actually installed in

00:38:12,180 --> 00:38:18,390
your system this is pretty much what you

00:38:15,960 --> 00:38:20,280
need to do at the spec file is the most

00:38:18,390 --> 00:38:22,319
important things all the rest getting a

00:38:20,280 --> 00:38:26,160
source file etc is not really that

00:38:22,319 --> 00:38:27,660
difficult but making spec file there's a

00:38:26,160 --> 00:38:29,760
lot of templates you can actually use

00:38:27,660 --> 00:38:33,030
but it's a lot of trial and error which

00:38:29,760 --> 00:38:36,569
you have to overcome before crying

00:38:33,030 --> 00:38:42,180
trying to create them this is an example

00:38:36,569 --> 00:38:45,599
from engine X about our engine X does

00:38:42,180 --> 00:38:48,390
everything so there's like some defines

00:38:45,599 --> 00:38:50,549
on top but you see here the name is

00:38:48,390 --> 00:38:53,250
engine X the version number the release

00:38:50,549 --> 00:38:56,010
number etc but you see it has got seven

00:38:53,250 --> 00:38:58,530
or eight different sources so you got

00:38:56,010 --> 00:39:00,420
the tarball at first but there's also

00:38:58,530 --> 00:39:02,549
other kinds of sources like this is

00:39:00,420 --> 00:39:05,339
config the init the configuration the

00:39:02,549 --> 00:39:08,069
examples etc there are license

00:39:05,339 --> 00:39:09,770
information they're different kind of

00:39:08,069 --> 00:39:13,109
groups where it needs to be installed

00:39:09,770 --> 00:39:15,180
you see built requires because if you're

00:39:13,109 --> 00:39:17,040
going to compile engine X you need to

00:39:15,180 --> 00:39:18,960
have the z lib development files you

00:39:17,040 --> 00:39:21,869
need to have the pc re development files

00:39:18,960 --> 00:39:24,960
you need to have pearl etc so before you

00:39:21,869 --> 00:39:27,000
can actually build it it will show you

00:39:24,960 --> 00:39:30,960
oh these are the dependencies you need

00:39:27,000 --> 00:39:33,150
to build it as well and there are

00:39:30,960 --> 00:39:35,280
requires there as well because you need

00:39:33,150 --> 00:39:38,670
for instance init script before you can

00:39:35,280 --> 00:39:41,880
actually start and installed at the RPM

00:39:38,670 --> 00:39:45,119
by itself so these are much much more

00:39:41,880 --> 00:39:45,670
complex obviously but they all follow

00:39:45,119 --> 00:39:48,040
the same

00:39:45,670 --> 00:39:51,549
principal like do some configuration in

00:39:48,040 --> 00:39:54,040
the back of in the in the top and have

00:39:51,549 --> 00:39:57,250
the confirmation at the bottom so you

00:39:54,040 --> 00:40:00,040
can see here as well that in this case

00:39:57,250 --> 00:40:02,290
it says this is the the bottom files

00:40:00,040 --> 00:40:04,660
debug that actually means that it's a

00:40:02,290 --> 00:40:07,359
separate package which only got one file

00:40:04,660 --> 00:40:09,720
namely engine XD Burke which debug

00:40:07,359 --> 00:40:12,339
version of engine X in this case

00:40:09,720 --> 00:40:15,309
sometimes packages will do things to

00:40:12,339 --> 00:40:17,290
your system like installing new users

00:40:15,309 --> 00:40:19,270
installing new groups and everything you

00:40:17,290 --> 00:40:21,609
can actually use the percentage spree

00:40:19,270 --> 00:40:23,770
and percentage post for that so in this

00:40:21,609 --> 00:40:27,160
case you will see that as soon as you

00:40:23,770 --> 00:40:30,940
install an engine X application it will

00:40:27,160 --> 00:40:33,549
actually run the things like at check

00:40:30,940 --> 00:40:37,299
engine X to check on fair and actually

00:40:33,549 --> 00:40:39,880
print a banner information so you can

00:40:37,299 --> 00:40:43,150
figure out what just happened etc you

00:40:39,880 --> 00:40:46,809
also have a pre and post when you

00:40:43,150 --> 00:40:50,049
uninstall to get rid of the users etc so

00:40:46,809 --> 00:40:52,630
this is for installing packages now

00:40:50,049 --> 00:40:55,210
obviously if you have a lot of packages

00:40:52,630 --> 00:40:57,220
and also to make make sense to have it

00:40:55,210 --> 00:41:00,400
automate it inside your own custom

00:40:57,220 --> 00:41:03,760
repository fortunately having

00:41:00,400 --> 00:41:05,140
repositories is really really simple the

00:41:03,760 --> 00:41:09,069
only thing you have to do is you have to

00:41:05,140 --> 00:41:10,750
install a file called create repo we

00:41:09,069 --> 00:41:13,059
have to create a structure on a public

00:41:10,750 --> 00:41:16,480
web directory you have to copy files

00:41:13,059 --> 00:41:18,670
over I have to run create repo for every

00:41:16,480 --> 00:41:23,680
directory that you created that's it and

00:41:18,670 --> 00:41:25,990
it's not really other than that if you

00:41:23,680 --> 00:41:29,410
look at repositories you'd normally

00:41:25,990 --> 00:41:32,140
notice that they are called us rpms and

00:41:29,410 --> 00:41:35,349
rpms x86 64 so those are the

00:41:32,140 --> 00:41:39,730
architectures again so i can create this

00:41:35,349 --> 00:41:42,910
on my web server and I can run create

00:41:39,730 --> 00:41:44,710
repo on these two directories and it

00:41:42,910 --> 00:41:46,960
will actually create something called a

00:41:44,710 --> 00:41:49,150
repo data structure which is like a

00:41:46,960 --> 00:41:51,460
simple database with all the information

00:41:49,150 --> 00:41:54,460
about all the packages that are found

00:41:51,460 --> 00:41:57,250
inside these two directories so what you

00:41:54,460 --> 00:41:59,470
normally do is you copy your rpm files

00:41:57,250 --> 00:42:04,630
over to these directories run

00:41:59,470 --> 00:42:07,619
eat repo and then you're older servers

00:42:04,630 --> 00:42:10,150
that actually use that repository can

00:42:07,619 --> 00:42:14,230
find the updates or find a new packages

00:42:10,150 --> 00:42:17,440
on your system so it's it's really easy

00:42:14,230 --> 00:42:19,599
to actually do that but if you create a

00:42:17,440 --> 00:42:21,730
new repository also need to add your

00:42:19,599 --> 00:42:24,849
repository too young and that's really

00:42:21,730 --> 00:42:28,330
easy because there's a file called etsy

00:42:24,849 --> 00:42:30,160
yum repost the directory and there you

00:42:28,330 --> 00:42:32,920
can add your own repository files in

00:42:30,160 --> 00:42:36,609
this case it's a repository for my own

00:42:32,920 --> 00:42:39,970
custom stuff and it's called it's found

00:42:36,609 --> 00:42:41,770
on reborn as logic Donnell etc this

00:42:39,970 --> 00:42:44,200
pretty much is the same thing that you

00:42:41,770 --> 00:42:47,490
will see when you install a pail when

00:42:44,200 --> 00:42:49,930
you install the base sent OS

00:42:47,490 --> 00:42:54,150
installations if you install web data

00:42:49,930 --> 00:42:57,520
etc etc they all follow the same system

00:42:54,150 --> 00:42:59,260
in this case i can run sudo yum repo

00:42:57,520 --> 00:43:01,119
list which actually shows you what kind

00:42:59,260 --> 00:43:03,910
of repositories there on your system and

00:43:01,119 --> 00:43:06,720
you can see here that now the NOx logic

00:43:03,910 --> 00:43:09,400
packages are there as well and it has

00:43:06,720 --> 00:43:12,460
two packages so there are now two

00:43:09,400 --> 00:43:14,380
packages inside the system not much

00:43:12,460 --> 00:43:17,619
compared to the ebell repository which

00:43:14,380 --> 00:43:20,290
has 10,000 over 10,000 packages I'm not

00:43:17,619 --> 00:43:23,050
there yet but trying to create more

00:43:20,290 --> 00:43:25,599
applications and RPM them and but you

00:43:23,050 --> 00:43:27,369
can also see what's available on that

00:43:25,599 --> 00:43:32,740
system so in this case there's an auto

00:43:27,369 --> 00:43:35,950
bug fix application 1.0 version 2 in

00:43:32,740 --> 00:43:39,220
this case and I for demonstration i

00:43:35,950 --> 00:43:41,800
actually created a PHP my admin package

00:43:39,220 --> 00:43:45,640
stairs well I'm sorry I'm a big peach

00:43:41,800 --> 00:43:49,480
p.m. i offend my admin fan don't hate me

00:43:45,640 --> 00:43:50,830
for that and you can do all the same

00:43:49,480 --> 00:43:52,720
things you can do with other packages

00:43:50,830 --> 00:43:56,200
because it's completely the same thing

00:43:52,720 --> 00:43:58,089
for 40 min rpm so I can do your info

00:43:56,200 --> 00:44:00,460
auto bug fix and I get all the

00:43:58,089 --> 00:44:03,490
information I can also install it in

00:44:00,460 --> 00:44:05,920
this case install the application yes I

00:44:03,490 --> 00:44:08,550
can do that and then in the end I have

00:44:05,920 --> 00:44:12,099
my order bug fix on my system now

00:44:08,550 --> 00:44:13,210
obviously you will not do this with your

00:44:12,099 --> 00:44:15,550
own epic

00:44:13,210 --> 00:44:21,430
every time you want to deploy something

00:44:15,550 --> 00:44:25,070
however if you need something different

00:44:21,430 --> 00:44:28,070
inside PHP because there's some really

00:44:25,070 --> 00:44:30,349
strange extension that you want to use

00:44:28,070 --> 00:44:31,730
but isn't really compiled with it and

00:44:30,349 --> 00:44:35,329
you need to recompile something like

00:44:31,730 --> 00:44:38,770
that don't recompile it from scratch on

00:44:35,329 --> 00:44:41,270
your system create an RPM for that why

00:44:38,770 --> 00:44:44,150
because it's much much easier to

00:44:41,270 --> 00:44:47,210
maintain and because we actually are

00:44:44,150 --> 00:44:49,640
doing something with rpms if you do it

00:44:47,210 --> 00:44:53,150
right you can automate the whole process

00:44:49,640 --> 00:44:56,300
in fact and this is what actually is

00:44:53,150 --> 00:45:01,160
happening on some of my customers they

00:44:56,300 --> 00:45:03,200
have php-tools that as soon as you

00:45:01,160 --> 00:45:05,750
deploy and tech something indicated

00:45:03,200 --> 00:45:08,270
master there will be a web hook called

00:45:05,750 --> 00:45:12,020
and that web hook will actually compile

00:45:08,270 --> 00:45:14,359
the RPMs put them on a web server so you

00:45:12,020 --> 00:45:16,460
can automatically update all the servers

00:45:14,359 --> 00:45:19,940
that are available with that new package

00:45:16,460 --> 00:45:22,490
just by tagging and committing something

00:45:19,940 --> 00:45:24,800
to the master repository and it works

00:45:22,490 --> 00:45:26,960
because everything is automated

00:45:24,800 --> 00:45:29,750
everything can be do once that could be

00:45:26,960 --> 00:45:33,680
twice ten times and everything has the

00:45:29,750 --> 00:45:35,750
same result if you're going to try this

00:45:33,680 --> 00:45:38,410
at home and you really should just for

00:45:35,750 --> 00:45:42,920
the sake of trying there are some tips

00:45:38,410 --> 00:45:45,020
when developing try to clear your cache

00:45:42,920 --> 00:45:49,130
once in a while you clean all if you

00:45:45,020 --> 00:45:51,440
don't what happens is yum will not see

00:45:49,130 --> 00:45:53,720
that you have new applications new rpm

00:45:51,440 --> 00:45:56,780
files inside your deposit or ease it

00:45:53,720 --> 00:46:00,500
will only check every 90 minutes or so

00:45:56,780 --> 00:46:03,010
so if you are trying to figure out why

00:46:00,500 --> 00:46:06,920
is my package not showing up it's

00:46:03,010 --> 00:46:09,770
because it's cached so try to do a young

00:46:06,920 --> 00:46:11,119
clean all before you actually try and

00:46:09,770 --> 00:46:12,890
figure out the packages normally it's

00:46:11,119 --> 00:46:18,050
not really a problem but it can also

00:46:12,890 --> 00:46:20,630
mean that that after 90 minutes you need

00:46:18,050 --> 00:46:22,160
to refresh all your data so if you have

00:46:20,630 --> 00:46:25,490
something like there needs to be a

00:46:22,160 --> 00:46:26,840
hotfix and it's rpm has to be installed

00:46:25,490 --> 00:46:29,150
it might not be

00:46:26,840 --> 00:46:31,340
mol that that it's available until the

00:46:29,150 --> 00:46:34,070
90 minutes have gone because then the

00:46:31,340 --> 00:46:37,340
new the cache expires and it will check

00:46:34,070 --> 00:46:40,940
again on your system another thing that

00:46:37,340 --> 00:46:43,430
will often go wrong is that they copy

00:46:40,940 --> 00:46:47,680
the files over to the web server but

00:46:43,430 --> 00:46:49,910
forget to run the create repo command

00:46:47,680 --> 00:46:52,010
obviously when you automate stuff it's

00:46:49,910 --> 00:46:53,420
not a problem if you do you're going to

00:46:52,010 --> 00:46:56,480
have a problem because if you forget it

00:46:53,420 --> 00:46:58,220
it will not show up because it's on the

00:46:56,480 --> 00:47:00,800
honor system but it's not in a database

00:46:58,220 --> 00:47:02,750
that create repo creates so you have to

00:47:00,800 --> 00:47:08,420
be really careful about that when you

00:47:02,750 --> 00:47:11,780
create it if you're going to do this you

00:47:08,420 --> 00:47:14,720
probably want maybe even need something

00:47:11,780 --> 00:47:19,010
called a repo package anyone installed

00:47:14,720 --> 00:47:22,160
the EPL repository okay so what they

00:47:19,010 --> 00:47:23,870
actually say is this is an RPM file just

00:47:22,160 --> 00:47:27,260
run the RPM file and that will actually

00:47:23,870 --> 00:47:30,290
install everything that you need to gain

00:47:27,260 --> 00:47:34,250
access to the repository like the

00:47:30,290 --> 00:47:39,440
signature keys the UM not repost OD foul

00:47:34,250 --> 00:47:41,450
I showed you before etc so this is what

00:47:39,440 --> 00:47:43,190
normally a repo package does it it's a

00:47:41,450 --> 00:47:47,120
fairly simple package as well you can

00:47:43,190 --> 00:47:49,700
actually base the repo based at packets

00:47:47,120 --> 00:47:52,850
on for instance the EPL repo package for

00:47:49,700 --> 00:47:54,830
that so you can use that one what I

00:47:52,850 --> 00:47:58,430
didn't discuss because it's a really

00:47:54,830 --> 00:48:00,830
difficult topic which has which needs

00:47:58,430 --> 00:48:03,920
much much more explanation is that you

00:48:00,830 --> 00:48:08,660
should sign your package as well anyone

00:48:03,920 --> 00:48:10,430
familiar with pgp key signing I feel

00:48:08,660 --> 00:48:13,250
okay that needs to be much much more

00:48:10,430 --> 00:48:15,590
what you actually do in this case you

00:48:13,250 --> 00:48:17,870
sign a package you put it on your web

00:48:15,590 --> 00:48:21,080
server and if somebody downloads that

00:48:17,870 --> 00:48:23,990
they are guaranteed that it will be the

00:48:21,080 --> 00:48:26,540
same package that you upload it to their

00:48:23,990 --> 00:48:30,920
it cannot be changed because if it

00:48:26,540 --> 00:48:33,230
changes you will detect it sometimes you

00:48:30,920 --> 00:48:37,220
see that on when you download our pm's

00:48:33,230 --> 00:48:40,070
files it will say oh you know I

00:48:37,220 --> 00:48:42,230
can't find that I can't trust this key

00:48:40,070 --> 00:48:44,540
should i install it anyway and you

00:48:42,230 --> 00:48:46,880
probably say yes but normally that means

00:48:44,540 --> 00:48:50,750
that okay so maybe you should verify

00:48:46,880 --> 00:48:53,510
where that package came from etc you

00:48:50,750 --> 00:48:56,090
could sign a package really easily but

00:48:53,510 --> 00:48:58,880
that's something you can find in the in

00:48:56,090 --> 00:49:02,300
the documentation later on anyway okay

00:48:58,880 --> 00:49:04,220
so basically these are the steps that

00:49:02,300 --> 00:49:06,380
you need to do to create rpms so you can

00:49:04,220 --> 00:49:10,460
actually create them you can actually

00:49:06,380 --> 00:49:22,820
deploy them onto a repository package ok

00:49:10,460 --> 00:49:25,820
any questions there's a few hi very good

00:49:22,820 --> 00:49:28,010
talk thank i have a few question too if

00:49:25,820 --> 00:49:32,119
it's ok because they're short yeah the

00:49:28,010 --> 00:49:34,940
first one is about dependencies versions

00:49:32,119 --> 00:49:39,020
yeah you you've been talking about PHP

00:49:34,940 --> 00:49:42,290
how do you you tell the system php5 or

00:49:39,020 --> 00:49:45,440
you can say this I have it in the engine

00:49:42,290 --> 00:49:47,720
next slide as well you can actually tell

00:49:45,440 --> 00:49:50,150
the dependencies that it has to be

00:49:47,720 --> 00:49:53,570
greater or equal to in this case init

00:49:50,150 --> 00:49:56,420
scripts 8.38 you can add at pretty much

00:49:53,570 --> 00:49:58,849
the same way as composer does it because

00:49:56,420 --> 00:50:01,609
you can do that as well and the second

00:49:58,849 --> 00:50:04,580
one is if I understood you list the

00:50:01,609 --> 00:50:07,460
files to be included into the RPM can

00:50:04,580 --> 00:50:10,730
you automate that sorry can you automate

00:50:07,460 --> 00:50:14,810
the list of files that you put a new

00:50:10,730 --> 00:50:17,960
spec file can you automate a thousand

00:50:14,810 --> 00:50:21,020
and thirty-two think that you mean the

00:50:17,960 --> 00:50:25,400
source one on the patch 1 files to slice

00:50:21,020 --> 00:50:30,800
further the one is that one this one's

00:50:25,400 --> 00:50:33,800
yeah no well not really let me put it

00:50:30,800 --> 00:50:35,420
that way and this is because this is why

00:50:33,800 --> 00:50:37,820
you actually define what goes into the

00:50:35,420 --> 00:50:39,849
package if you say how everything you

00:50:37,820 --> 00:50:42,589
got just put it in a package that would

00:50:39,849 --> 00:50:45,349
sort of kind of miss the point of

00:50:42,589 --> 00:50:47,510
package management because what you need

00:50:45,349 --> 00:50:50,160
is is to have a package that is

00:50:47,510 --> 00:50:52,260
completely whatever you specified

00:50:50,160 --> 00:50:53,460
if you say well I don't care what's

00:50:52,260 --> 00:50:55,410
inside the package you might as well

00:50:53,460 --> 00:50:59,790
just go and fetch the tall ball and

00:50:55,410 --> 00:51:01,710
install it like that so no normally you

00:50:59,790 --> 00:51:05,040
just put something like that you can

00:51:01,710 --> 00:51:08,010
automate a little bit but try to do it

00:51:05,040 --> 00:51:10,050
manually and most of the packages aren't

00:51:08,010 --> 00:51:12,090
really that that big for instance if you

00:51:10,050 --> 00:51:14,640
look at httpd for instance it's a huge

00:51:12,090 --> 00:51:17,090
spec file but it's still comprehensible

00:51:14,640 --> 00:51:22,890
even even the files section for that

00:51:17,090 --> 00:51:25,980
okay any more questions this one there

00:51:22,890 --> 00:51:32,280
Oh a guy with a beard so that's going to

00:51:25,980 --> 00:51:35,850
be like a really cool tech question i've

00:51:32,280 --> 00:51:38,790
been using unix like 1960 and i'm not

00:51:35,850 --> 00:51:40,590
out ok I'm sorry outside I masashi a

00:51:38,790 --> 00:51:43,080
simple question and do you have to take

00:51:40,590 --> 00:51:47,580
any special care that after you've

00:51:43,080 --> 00:51:51,480
uninstalled a library that no files

00:51:47,580 --> 00:51:53,640
remain on the system oh sorry can you do

00:51:51,480 --> 00:51:56,550
you have to take sorry do you have to

00:51:53,640 --> 00:51:59,250
take any care that no files remain on

00:51:56,550 --> 00:52:02,970
the system after you uninstall a package

00:51:59,250 --> 00:52:05,250
yeah obviously what an uninstall of a

00:52:02,970 --> 00:52:06,960
package does is it will only uninstall

00:52:05,250 --> 00:52:09,780
the files that are inside the files

00:52:06,960 --> 00:52:11,340
directory but only if they matches the

00:52:09,780 --> 00:52:13,800
same signature so if you're going to

00:52:11,340 --> 00:52:16,980
change a file like a configuration file

00:52:13,800 --> 00:52:19,050
is in there and you change it when you

00:52:16,980 --> 00:52:21,510
erase the package it will actually say

00:52:19,050 --> 00:52:24,420
ok I'm not really going to erase it

00:52:21,510 --> 00:52:27,210
because you have manually changed it so

00:52:24,420 --> 00:52:31,050
it's still there if an application

00:52:27,210 --> 00:52:32,910
creates files then they will stay there

00:52:31,050 --> 00:52:37,260
because it's not inside the files list

00:52:32,910 --> 00:52:40,860
so it won't touch it by default normally

00:52:37,260 --> 00:52:43,590
the packages are ok enough like for

00:52:40,860 --> 00:52:46,800
instance if you uninstall mysql for

00:52:43,590 --> 00:52:48,060
instance your VAR lib mysql tables will

00:52:46,800 --> 00:52:51,530
still be there because they are not

00:52:48,060 --> 00:52:56,160
inside the package so is there a way of

00:52:51,530 --> 00:53:00,360
telling the script to remove files that

00:52:56,160 --> 00:53:02,160
were generated if no because the RPM

00:53:00,360 --> 00:53:02,550
does not know that only application know

00:53:02,160 --> 00:53:12,080
that

00:53:02,550 --> 00:53:12,080
so Faxon yeah any of too many questions

00:53:18,270 --> 00:53:25,350
just the young man's they were really

00:53:22,950 --> 00:53:27,090
really useful I sort of my eyes but um

00:53:25,350 --> 00:53:30,150
this might be a really amateur question

00:53:27,090 --> 00:53:32,910
is there a young man to see what the

00:53:30,150 --> 00:53:35,130
package will install I'm forever looking

00:53:32,910 --> 00:53:37,320
through com files trying to find where

00:53:35,130 --> 00:53:39,690
the certain man files looking for where

00:53:37,320 --> 00:53:42,120
the configurations are looking for where

00:53:39,690 --> 00:53:44,340
things aren't sometimes it's just takes

00:53:42,120 --> 00:53:47,030
forever I'm not one hundred percent so

00:53:44,340 --> 00:53:50,550
is there a reasonably easy way to see

00:53:47,030 --> 00:53:53,370
through young or through RPM what files

00:53:50,550 --> 00:53:55,920
will be installed so i can find when it

00:53:53,370 --> 00:53:59,100
has installed where the configurations

00:53:55,920 --> 00:54:01,070
are what updated yeah i showed you

00:53:59,100 --> 00:54:04,380
before that in the beginning there

00:54:01,070 --> 00:54:10,230
there's a command and let me see if i

00:54:04,380 --> 00:54:11,820
can get it back for you this one repo

00:54:10,230 --> 00:54:13,590
query for instance that will actually

00:54:11,820 --> 00:54:17,370
show these are the files inside the

00:54:13,590 --> 00:54:18,900
repository yet alright that's the full

00:54:17,370 --> 00:54:25,350
roots of whether it be installed as well

00:54:18,900 --> 00:54:29,310
exactly ah ok thank you right alright

00:54:25,350 --> 00:54:33,030
then our updates handled if you have an

00:54:29,310 --> 00:54:34,890
update and you run yum update in this

00:54:33,030 --> 00:54:36,660
case it will detect that you already

00:54:34,890 --> 00:54:39,300
install the package and which and it

00:54:36,660 --> 00:54:41,040
will show you like okay I have an update

00:54:39,300 --> 00:54:42,930
for this package will you want to

00:54:41,040 --> 00:54:45,360
install it yet smell so it can detect

00:54:42,930 --> 00:54:48,240
that on based on the name of the package

00:54:45,360 --> 00:54:50,040
the version and actual the release as

00:54:48,240 --> 00:54:52,140
well so if you have aught fixes and

00:54:50,040 --> 00:54:54,090
everything you need to run your update

00:54:52,140 --> 00:54:58,400
and it will automatically update the

00:54:54,090 --> 00:55:00,990
packages if you like to so like that

00:54:58,400 --> 00:55:04,800
okay and what happens if there's a file

00:55:00,990 --> 00:55:06,570
name conflict if you package the file or

00:55:04,800 --> 00:55:11,450
it exists on the system do your install

00:55:06,570 --> 00:55:17,070
in t.o that that's actually a good one I

00:55:11,450 --> 00:55:19,350
don't know to be honest I am it's really

00:55:17,070 --> 00:55:21,540
easy to figure out because make a

00:55:19,350 --> 00:55:24,150
package that that actually installs user

00:55:21,540 --> 00:55:27,510
bin PHP for instance and see if hell

00:55:24,150 --> 00:55:29,850
breaks loose to be honest i don't know

00:55:27,510 --> 00:55:31,710
i'm not on absentia a vm will allow you

00:55:29,850 --> 00:55:34,290
to install the package if it

00:55:31,710 --> 00:55:37,260
already detects that it overrides a file

00:55:34,290 --> 00:55:38,880
that is being guarded by another package

00:55:37,260 --> 00:55:42,599
would be interesting to figure out I

00:55:38,880 --> 00:55:44,880
can't say that but trust me I will know

00:55:42,599 --> 00:55:49,440
by the end of the day great thank you

00:55:44,880 --> 00:55:52,349
right yeah you mentioned that in the

00:55:49,440 --> 00:55:55,800
sources list if you use a URL you have

00:55:52,349 --> 00:55:59,839
to manually install you just explain now

00:55:55,800 --> 00:56:02,910
well the thing is the RPM build is

00:55:59,839 --> 00:56:05,910
really a dumb application because it

00:56:02,910 --> 00:56:08,580
only does what says in the script but

00:56:05,910 --> 00:56:11,190
before it can do stuff it needs to know

00:56:08,580 --> 00:56:13,680
which files do I need to work with and

00:56:11,190 --> 00:56:17,760
those files are listed in the sources

00:56:13,680 --> 00:56:21,270
and an Apache configuration however if

00:56:17,760 --> 00:56:26,160
you actually using a URL inside the spec

00:56:21,270 --> 00:56:31,380
file in this case let me check it the

00:56:26,160 --> 00:56:33,960
sauce 0 it will not see that ok this is

00:56:31,380 --> 00:56:36,060
a URL let's try and fetch that from that

00:56:33,960 --> 00:56:38,369
URL and put it in the system before I

00:56:36,060 --> 00:56:41,670
build it it doesn't do that so what you

00:56:38,369 --> 00:56:43,800
need to do is manually copy the URL put

00:56:41,670 --> 00:56:46,950
it inside the sources directory and then

00:56:43,800 --> 00:56:49,920
it will happily do it stuff so that's

00:56:46,950 --> 00:56:53,369
bit of annoying I don't know why this is

00:56:49,920 --> 00:56:57,180
the case but so you normally define a

00:56:53,369 --> 00:57:00,290
URL but you have to still have to

00:56:57,180 --> 00:57:08,490
manually copy it over and install it

00:57:00,290 --> 00:57:15,390
okay anymore too many somebody with a

00:57:08,490 --> 00:57:19,080
mic coming over I you spec the sources

00:57:15,390 --> 00:57:23,730
you expect the patch but on the files

00:57:19,080 --> 00:57:28,200
the patch is not listed here in this

00:57:23,730 --> 00:57:30,660
case yes okay but further on on the file

00:57:28,200 --> 00:57:33,000
list it's not pleased it here now

00:57:30,660 --> 00:57:35,640
because what happens is you have the

00:57:33,000 --> 00:57:37,790
source file that's going to be in this

00:57:35,640 --> 00:57:40,460
case just

00:57:37,790 --> 00:57:43,700
extracted normally you compile stuff and

00:57:40,460 --> 00:57:46,580
the batch files are actually implemented

00:57:43,700 --> 00:57:49,720
before you compile that so inside the

00:57:46,580 --> 00:57:52,610
setup phase of of your application

00:57:49,720 --> 00:57:55,160
during the build the setup will actually

00:57:52,610 --> 00:57:57,440
do things like patch the foul this is

00:57:55,160 --> 00:58:00,290
what percentage spatch wonders so that

00:57:57,440 --> 00:58:02,840
but when is actually applying the boxes

00:58:00,290 --> 00:58:05,690
that you supply it on the original files

00:58:02,840 --> 00:58:07,790
yeah and then and then once you have

00:58:05,690 --> 00:58:08,870
built it and in case of PHP files you

00:58:07,790 --> 00:58:11,690
don't really have to build something

00:58:08,870 --> 00:58:14,270
then you have in this case an order bug

00:58:11,690 --> 00:58:16,010
fixed file that's already patched so at

00:58:14,270 --> 00:58:20,320
that point you don't really care about

00:58:16,010 --> 00:58:20,320
the batch files anymore okay okay

00:58:22,780 --> 00:58:31,310
anymore yeah sure I'm here all day where

00:58:28,460 --> 00:58:34,130
can I find templates peck files to copy

00:58:31,310 --> 00:58:37,370
and alter with their in the SLP ends of

00:58:34,130 --> 00:58:40,730
the census distribution yeah for

00:58:37,370 --> 00:58:43,190
instance you can take any any spec file

00:58:40,730 --> 00:58:46,850
you want to be honest this is just

00:58:43,190 --> 00:58:48,640
engine X but take simple once if you

00:58:46,850 --> 00:58:52,460
want to can I recommend a simple one

00:58:48,640 --> 00:58:54,500
yeah my auto bug fix is that that's not

00:58:52,460 --> 00:58:59,660
in the sense of 65 distribution I

00:58:54,500 --> 00:59:02,090
presumably no no simple ones are to be

00:58:59,660 --> 00:59:04,880
honest I have no idea what you could do

00:59:02,090 --> 00:59:06,470
is just go to the SR p.m. directory of

00:59:04,880 --> 00:59:09,680
either center when so redhead or

00:59:06,470 --> 00:59:11,780
anything and just try and get a very

00:59:09,680 --> 00:59:13,280
small file because normally the spec

00:59:11,780 --> 00:59:15,110
file will be small as well and it would

00:59:13,280 --> 00:59:18,050
be a really good way however there are a

00:59:15,110 --> 00:59:20,150
lot of tutorials out there that show you

00:59:18,050 --> 00:59:23,210
how to set up a spec file so it's not

00:59:20,150 --> 00:59:29,630
really that that hard to start with ok

00:59:23,210 --> 00:59:33,310
ok last one ok cool so that's basically

00:59:29,630 --> 00:59:33,310

YouTube URL: https://www.youtube.com/watch?v=IzX3U4U3eok


