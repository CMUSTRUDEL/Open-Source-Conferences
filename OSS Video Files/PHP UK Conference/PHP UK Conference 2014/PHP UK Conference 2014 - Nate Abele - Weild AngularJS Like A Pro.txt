Title: PHP UK Conference 2014 - Nate Abele - Weild AngularJS Like A Pro
Publication date: 2014-03-24
Playlist: PHP UK Conference 2014
Description: 
	Are you getting your feet wet with AngularJS, but looking to boost your skill level? Do you understand the basics, but get lost in the sea of available tools and resources? As a member of the AngularUI team, Nate has his finger on the pulse of the AngularJS community, and the state-of-the-art in tools and app-building practices. Be ready to take notes and ask questions in this resource-heavy talk.
Captions: 
	00:00:04,670 --> 00:00:16,560
hey you so yes I will attempt to help

00:00:11,429 --> 00:00:19,560
you wield angularjs like a pro so as has

00:00:16,560 --> 00:00:20,970
been already mentioned this is me these

00:00:19,560 --> 00:00:22,260
are my credentials I work with a bunch

00:00:20,970 --> 00:00:25,230
of really smart people at a company

00:00:22,260 --> 00:00:26,760
called union of rad if you want to give

00:00:25,230 --> 00:00:28,650
us your money if you want to take our

00:00:26,760 --> 00:00:30,840
money if you want to conspire with us to

00:00:28,650 --> 00:00:38,070
take someone else's money talk to me or

00:00:30,840 --> 00:00:39,600
it's got Jeff in the Boston hat and this

00:00:38,070 --> 00:00:42,210
is not because my talk is three slides

00:00:39,600 --> 00:00:43,800
but because i actually want to start by

00:00:42,210 --> 00:00:46,530
saying thank you rather than finish as

00:00:43,800 --> 00:00:50,399
most people do because this is kind of

00:00:46,530 --> 00:00:51,719
an amazing thing that um this is the

00:00:50,399 --> 00:00:55,800
thing that i would do anyway but

00:00:51,719 --> 00:00:57,739
amazingly people pay me for it and open

00:00:55,800 --> 00:01:00,449
source is also like a liquor really

00:00:57,739 --> 00:01:02,430
again I this is basically a hobby for me

00:01:00,449 --> 00:01:04,019
so the fact that I get to you know fly

00:01:02,430 --> 00:01:05,820
here and talk to all of you people is

00:01:04,019 --> 00:01:08,720
really sort of remarkable to me when I

00:01:05,820 --> 00:01:16,200
sit back back and think about it and

00:01:08,720 --> 00:01:18,060
finally how do I put this so I also find

00:01:16,200 --> 00:01:19,680
it really interesting that I exist in

00:01:18,060 --> 00:01:21,210
this time and place where technology is

00:01:19,680 --> 00:01:22,710
this thing that's like really important

00:01:21,210 --> 00:01:24,990
to people whereas if I'd been born like

00:01:22,710 --> 00:01:27,420
a thousand years ago and we're all kind

00:01:24,990 --> 00:01:29,040
of in this boat where hopefully we all

00:01:27,420 --> 00:01:32,340
are here because we have this aptitude

00:01:29,040 --> 00:01:33,720
for this thing called software but if we

00:01:32,340 --> 00:01:35,729
were born you know a thousand years ago

00:01:33,720 --> 00:01:37,170
we would probably be a peasant working a

00:01:35,729 --> 00:01:38,880
field or a farm or not that there's

00:01:37,170 --> 00:01:41,909
anything wrong with you know being a

00:01:38,880 --> 00:01:44,610
peasant but it's kind of amazing that

00:01:41,909 --> 00:01:46,079
I'm not because if I was born it you

00:01:44,610 --> 00:01:48,180
know a thousand years ago I probably

00:01:46,079 --> 00:01:49,860
would be and wouldn't get to do any of

00:01:48,180 --> 00:01:56,430
this that makes sense or am I just

00:01:49,860 --> 00:01:58,259
totally okay and while I'm so boxing I

00:01:56,430 --> 00:02:03,030
figure I'll just go for a couple more

00:01:58,259 --> 00:02:04,140
bullet points in in the process of you

00:02:03,030 --> 00:02:07,649
know being involved in these communities

00:02:04,140 --> 00:02:09,869
and you know working with with software

00:02:07,649 --> 00:02:11,700
with different groups of people I've

00:02:09,869 --> 00:02:13,590
discovered that even though we have this

00:02:11,700 --> 00:02:18,000
F all this emphasis on code it

00:02:13,590 --> 00:02:20,069
really is very much about people um so

00:02:18,000 --> 00:02:21,510
life lesson number one and I say this is

00:02:20,069 --> 00:02:24,110
someone who violates this bullet point

00:02:21,510 --> 00:02:26,010
on a regular basis try to be humble

00:02:24,110 --> 00:02:27,239
everyone especially an open source

00:02:26,010 --> 00:02:29,069
everyone has something to teach everyone

00:02:27,239 --> 00:02:30,569
has something to learn and in those

00:02:29,069 --> 00:02:32,879
moments where you're on the mailing list

00:02:30,569 --> 00:02:34,830
or IRC channel for your favourite

00:02:32,879 --> 00:02:36,989
framework and someone comes in asking

00:02:34,830 --> 00:02:43,110
you how to build a forum just try to

00:02:36,989 --> 00:02:46,590
keep that in mind also like I mentioned

00:02:43,110 --> 00:02:48,060
I'm being patronizing here when I say I

00:02:46,590 --> 00:02:50,870
work with really smart people because

00:02:48,060 --> 00:02:54,630
they're mostly all in the room right now

00:02:50,870 --> 00:02:56,459
but I do and I have the very good

00:02:54,630 --> 00:02:59,069
fortune of working on hard and

00:02:56,459 --> 00:03:00,569
interesting problems and very often

00:02:59,069 --> 00:03:04,739
there are a lot of things that I don't

00:03:00,569 --> 00:03:06,569
know and I say this not to like make

00:03:04,739 --> 00:03:08,430
myself feel better or whatever but I was

00:03:06,569 --> 00:03:09,870
one of the kids and I'm sure many of you

00:03:08,430 --> 00:03:11,310
can probably relate to this who grew up

00:03:09,870 --> 00:03:13,349
kind of being like the smart kid in

00:03:11,310 --> 00:03:14,879
class and knowing what's the answers

00:03:13,349 --> 00:03:18,239
without cracking the book open that sort

00:03:14,879 --> 00:03:19,680
of thing so like like knowledge and

00:03:18,239 --> 00:03:23,010
being smart and having the answers was

00:03:19,680 --> 00:03:24,780
um oftentimes like my refuge what gave

00:03:23,010 --> 00:03:28,319
me my sense of you know self-importance

00:03:24,780 --> 00:03:30,109
if you will but being able to feel

00:03:28,319 --> 00:03:32,579
stupid is really really liberating

00:03:30,109 --> 00:03:35,069
because I can't possibly know everything

00:03:32,579 --> 00:03:36,720
and no one can so the more you embrace

00:03:35,069 --> 00:03:37,950
that and more the more you embrace of

00:03:36,720 --> 00:03:39,900
willingness to learn about new stuff

00:03:37,950 --> 00:03:41,609
because we're constantly inundated with

00:03:39,900 --> 00:03:46,010
new stuff in this industry every single

00:03:41,609 --> 00:03:46,010
day it's actually a really good feeling

00:03:47,510 --> 00:03:53,480
finally um this industry is only like 50

00:03:51,030 --> 00:03:55,819
years old you know you take a

00:03:53,480 --> 00:03:57,720
architecture or you know prostitution

00:03:55,819 --> 00:04:01,139
that's supposed to be like the oldest

00:03:57,720 --> 00:04:03,840
profession in the world is something we

00:04:01,139 --> 00:04:06,030
still have no idea what we're doing so

00:04:03,840 --> 00:04:07,889
you know getting religious or militant

00:04:06,030 --> 00:04:10,410
or anything about any one particular way

00:04:07,889 --> 00:04:13,200
of doing things or it's just it's not

00:04:10,410 --> 00:04:14,519
you it's not useful and I think it's

00:04:13,200 --> 00:04:16,470
kind of holding us back as an industry

00:04:14,519 --> 00:04:19,109
so you know don't be afraid to like

00:04:16,470 --> 00:04:22,109
question ideas and you know challenge

00:04:19,109 --> 00:04:24,330
the status quo a little bit because none

00:04:22,109 --> 00:04:25,890
of us really fundamentally have any idea

00:04:24,330 --> 00:04:27,060
what we're doing you know hundred years

00:04:25,890 --> 00:04:29,940
from now

00:04:27,060 --> 00:04:32,070
you know we'll be who knows we have no

00:04:29,940 --> 00:04:33,960
idea so don't don't be afraid to like

00:04:32,070 --> 00:04:40,380
try something new despite ridicule and

00:04:33,960 --> 00:04:43,490
criticism okay off my soapbox so

00:04:40,380 --> 00:04:46,200
angularjs just really quickly show hands

00:04:43,490 --> 00:04:47,639
how many people kind of know what

00:04:46,200 --> 00:04:51,720
angular is but maybe haven't worked with

00:04:47,639 --> 00:04:55,230
it before okay so so a little less than

00:04:51,720 --> 00:04:57,180
half of you alright fair enough I'll go

00:04:55,230 --> 00:05:00,720
through the simple stuff so why I think

00:04:57,180 --> 00:05:03,270
angular is amazing is uh basically comes

00:05:00,720 --> 00:05:05,720
down to these four things two-way data

00:05:03,270 --> 00:05:08,490
binding which means you can write

00:05:05,720 --> 00:05:11,669
expressions in temp in HTML templates

00:05:08,490 --> 00:05:14,040
that get update updated live and also

00:05:11,669 --> 00:05:15,540
have expressions in input elements and

00:05:14,040 --> 00:05:17,490
things like that and when one changes

00:05:15,540 --> 00:05:21,270
all the other places where that data is

00:05:17,490 --> 00:05:23,340
use also change the fact that you can

00:05:21,270 --> 00:05:25,139
write these templates with these you

00:05:23,340 --> 00:05:28,169
know complex dynamic expressions in a

00:05:25,139 --> 00:05:30,240
very simple way and wire up these

00:05:28,169 --> 00:05:32,010
complex interfaces with remarkably

00:05:30,240 --> 00:05:34,530
little code compared to kind of how we

00:05:32,010 --> 00:05:37,530
used to do things how the abstraction

00:05:34,530 --> 00:05:39,570
layers used to exist in you know when we

00:05:37,530 --> 00:05:41,729
were just kind of using jQuery to smooth

00:05:39,570 --> 00:05:43,020
over the rough edges of the Dom like now

00:05:41,729 --> 00:05:48,120
we're operating at this whole different

00:05:43,020 --> 00:05:49,680
level of abstraction mmm angular also

00:05:48,120 --> 00:05:51,090
comes with this great dependency

00:05:49,680 --> 00:05:55,530
injection system which makes it really

00:05:51,090 --> 00:05:58,050
easy to wire up very complex application

00:05:55,530 --> 00:06:01,050
logic and also makes testing extremely

00:05:58,050 --> 00:06:02,520
easy test the philosophy of test-driven

00:06:01,050 --> 00:06:05,940
development is kind of built into

00:06:02,520 --> 00:06:07,470
angular in its design it also has this

00:06:05,940 --> 00:06:09,210
great module system that allows you to

00:06:07,470 --> 00:06:12,300
separate your code into kind of

00:06:09,210 --> 00:06:13,560
independent groups of features and then

00:06:12,300 --> 00:06:16,380
group them together to create these

00:06:13,560 --> 00:06:18,030
complex applications it solves problems

00:06:16,380 --> 00:06:19,380
for like packaging and distribution as

00:06:18,030 --> 00:06:24,810
well and makes all that stuff really

00:06:19,380 --> 00:06:26,310
really simple mmm in addition to being a

00:06:24,810 --> 00:06:27,780
framework that provides as very high

00:06:26,310 --> 00:06:31,200
level things that also has a bunch of

00:06:27,780 --> 00:06:32,550
these libraries that allow you to do

00:06:31,200 --> 00:06:38,250
these different things you know built

00:06:32,550 --> 00:06:40,200
into the framework it's also as I kind

00:06:38,250 --> 00:06:40,860
of alluded to a second ago it's a

00:06:40,200 --> 00:06:42,750
complete River

00:06:40,860 --> 00:06:45,780
perspective compared to the old way of

00:06:42,750 --> 00:06:47,490
like using jQuery to take a pre

00:06:45,780 --> 00:06:50,219
generated page and select some Dom

00:06:47,490 --> 00:06:53,189
elements and apply some logic to it now

00:06:50,219 --> 00:06:55,050
you're actually creating your HTML in a

00:06:53,189 --> 00:06:59,430
very structural way relative to your

00:06:55,050 --> 00:07:02,099
application and there's also lots of new

00:06:59,430 --> 00:07:04,289
terms that come with it you whenever it

00:07:02,099 --> 00:07:06,419
whenever you first were introduced to

00:07:04,289 --> 00:07:08,400
angular you're probably like a little

00:07:06,419 --> 00:07:10,139
bit intimidated as I certainly was with

00:07:08,400 --> 00:07:13,740
all the different terms and types of

00:07:10,139 --> 00:07:15,779
things the angular introduces so we'll

00:07:13,740 --> 00:07:17,129
just run through them briefly because

00:07:15,779 --> 00:07:22,560
they're actually mostly pretty

00:07:17,129 --> 00:07:25,610
straightforward so a controller and

00:07:22,560 --> 00:07:28,740
angular is something that deals with a

00:07:25,610 --> 00:07:31,919
particular chunk of the Dom it's code

00:07:28,740 --> 00:07:34,650
that that drives behavior with methods

00:07:31,919 --> 00:07:37,289
and properties that can be triggered by

00:07:34,650 --> 00:07:39,479
input elements or values that can be

00:07:37,289 --> 00:07:42,360
referenced in your templates or in input

00:07:39,479 --> 00:07:45,210
elements controllers always have a scope

00:07:42,360 --> 00:07:48,060
and the scope for the controller

00:07:45,210 --> 00:07:51,539
represents all the data and logic that

00:07:48,060 --> 00:07:53,099
are tied to this the particular section

00:07:51,539 --> 00:07:55,259
of the Dom that controller is attached

00:07:53,099 --> 00:07:56,550
to then we'll look at some code examples

00:07:55,259 --> 00:07:58,409
for what that actually looks like later

00:07:56,550 --> 00:08:00,180
but a controller is basically just a

00:07:58,409 --> 00:08:03,330
function that takes some parameters and

00:08:00,180 --> 00:08:06,990
because angular is magical it will read

00:08:03,330 --> 00:08:10,680
the parameters and inject services into

00:08:06,990 --> 00:08:12,330
your into your function like scope which

00:08:10,680 --> 00:08:16,949
is a special one that's tied to

00:08:12,330 --> 00:08:20,520
controllers directives are a way to kind

00:08:16,949 --> 00:08:22,349
of keep logic that's actually touches

00:08:20,520 --> 00:08:24,360
the Dom very encapsulated and away from

00:08:22,349 --> 00:08:26,250
the rest of your code so if you've ever

00:08:24,360 --> 00:08:27,900
tried to like a unit test a JavaScript

00:08:26,250 --> 00:08:30,569
application you've probably found that

00:08:27,900 --> 00:08:32,039
it's really really difficult because you

00:08:30,569 --> 00:08:34,969
actually constantly have to touch the

00:08:32,039 --> 00:08:37,169
Dom and you know all that messiness so

00:08:34,969 --> 00:08:39,690
the great thing about angular and its

00:08:37,169 --> 00:08:41,729
templating system is that it keeps all

00:08:39,690 --> 00:08:44,579
of all of your Dom logic kind of

00:08:41,729 --> 00:08:47,550
abstracted away from the your actual UI

00:08:44,579 --> 00:08:50,430
and business logic and directives are

00:08:47,550 --> 00:08:51,480
kind of an outlet for that we're in for

00:08:50,430 --> 00:08:53,640
the times that you actually have to

00:08:51,480 --> 00:08:54,660
touch the Dom it gives you a very simple

00:08:53,640 --> 00:08:58,110
very clean

00:08:54,660 --> 00:08:59,699
usable way to do that and about half

00:08:58,110 --> 00:09:01,399
this talk is about different directives

00:08:59,699 --> 00:09:04,110
so we'll take a look at those as well

00:09:01,399 --> 00:09:06,410
provider services and factories are all

00:09:04,110 --> 00:09:10,829
basically just different names for

00:09:06,410 --> 00:09:14,220
constructing objects any sort of generic

00:09:10,829 --> 00:09:17,579
reusable it's kind of like how you do a

00:09:14,220 --> 00:09:19,259
class in PHP and you can either define

00:09:17,579 --> 00:09:25,529
the class or you know write a factory

00:09:19,259 --> 00:09:29,759
that sets up the class same idea finally

00:09:25,529 --> 00:09:32,579
filters filters are a way to write

00:09:29,759 --> 00:09:34,439
something very expressive in when you're

00:09:32,579 --> 00:09:39,720
outputting data in the Dom in the

00:09:34,439 --> 00:09:42,389
template so this is like an expression

00:09:39,720 --> 00:09:45,329
that would go inside a Dom element in

00:09:42,389 --> 00:09:47,670
your page in a template you can have a

00:09:45,329 --> 00:09:50,430
value and that value can be you know a

00:09:47,670 --> 00:09:52,199
literal or a property that comes from

00:09:50,430 --> 00:09:55,379
your scope and then you give it this

00:09:52,199 --> 00:09:57,720
pipe symbol and then whatever whatever

00:09:55,379 --> 00:10:00,839
filter that you want to use and it will

00:09:57,720 --> 00:10:03,269
pass that through and and it's

00:10:00,839 --> 00:10:05,550
integrated with the angular localization

00:10:03,269 --> 00:10:07,259
system so depending on the locale it

00:10:05,550 --> 00:10:10,980
actually output the right currency or

00:10:07,259 --> 00:10:12,389
date or time or what have you but under

00:10:10,980 --> 00:10:14,639
the hood they're actually just services

00:10:12,389 --> 00:10:15,930
so you can implement your own in much

00:10:14,639 --> 00:10:19,529
the same way that you would implement a

00:10:15,930 --> 00:10:22,079
service and you can use them as a

00:10:19,529 --> 00:10:26,189
service in your controllers and and

00:10:22,079 --> 00:10:28,649
other services and there's also the

00:10:26,189 --> 00:10:32,339
filter filter which gives you a simple

00:10:28,649 --> 00:10:34,829
way to filter arrays of objects by by

00:10:32,339 --> 00:10:37,470
like matching properties so if you want

00:10:34,829 --> 00:10:40,259
to iterate over archived posts for

00:10:37,470 --> 00:10:42,630
example this would be how you how you do

00:10:40,259 --> 00:10:46,380
that you'd have a property called posts

00:10:42,630 --> 00:10:52,230
on your scope and you would pass it to

00:10:46,380 --> 00:10:53,720
the filter filter so I'm going to talk

00:10:52,230 --> 00:10:56,370
about a few practices of actually

00:10:53,720 --> 00:10:58,290
designing applications designing angular

00:10:56,370 --> 00:11:00,180
applications and I'm not calling them

00:10:58,290 --> 00:11:02,670
best practices these are just the

00:11:00,180 --> 00:11:04,949
practices I use like I said I don't like

00:11:02,670 --> 00:11:07,010
to get dogmatic about it send MIDI ever

00:11:04,949 --> 00:11:14,210
actually seen the movie dogma

00:11:07,010 --> 00:11:16,580
okay a few of you go watch it so first

00:11:14,210 --> 00:11:20,870
of all this is a common pitfall that I

00:11:16,580 --> 00:11:23,000
see in in a lot of applications where

00:11:20,870 --> 00:11:24,260
you just kind of have this j/s directory

00:11:23,000 --> 00:11:25,460
and it's dumping ground for all these

00:11:24,260 --> 00:11:28,300
different files which are in turn

00:11:25,460 --> 00:11:31,760
dumping grounds for things of that type

00:11:28,300 --> 00:11:34,640
that is super dumb instead what you want

00:11:31,760 --> 00:11:37,310
to do is have your your application

00:11:34,640 --> 00:11:38,930
organized into functional groups usually

00:11:37,310 --> 00:11:41,690
you'll have angular modules that

00:11:38,930 --> 00:11:43,400
represent individual features and those

00:11:41,690 --> 00:11:46,190
feature modules should be able to live

00:11:43,400 --> 00:11:48,170
on their own independent from other

00:11:46,190 --> 00:11:50,930
modules that it's collaborating with to

00:11:48,170 --> 00:11:52,520
actually create this application so

00:11:50,930 --> 00:11:54,890
instead of this you would have you know

00:11:52,520 --> 00:11:58,220
Jas slashed the name of a module and

00:11:54,890 --> 00:11:59,480
then you know cart model or cart service

00:11:58,220 --> 00:12:01,430
or something like that for like a

00:11:59,480 --> 00:12:03,380
shopping cart you would actually

00:12:01,430 --> 00:12:06,020
organized individual things into files

00:12:03,380 --> 00:12:11,090
within the larger context of the modules

00:12:06,020 --> 00:12:12,620
where they make sense to live another

00:12:11,090 --> 00:12:16,100
practice that i've been using quite

00:12:12,620 --> 00:12:17,930
frequently is having the UI for your

00:12:16,100 --> 00:12:20,900
application as being actually its own

00:12:17,930 --> 00:12:23,000
app so what I've done for all my apps

00:12:20,900 --> 00:12:26,120
recently is i'll have like a like a PHP

00:12:23,000 --> 00:12:28,730
back-end that's just an API and the UI

00:12:26,120 --> 00:12:30,200
will be an angular its own full-fledged

00:12:28,730 --> 00:12:32,270
angular application that will live in

00:12:30,200 --> 00:12:34,100
its own separate repository and just

00:12:32,270 --> 00:12:35,900
talk back to the back-end service I

00:12:34,100 --> 00:12:37,610
think this actually flows nicely from

00:12:35,900 --> 00:12:40,490
what all they was talking about with

00:12:37,610 --> 00:12:42,710
service-oriented architecture this is

00:12:40,490 --> 00:12:44,060
great because you can just have all of

00:12:42,710 --> 00:12:46,190
these different services that exist

00:12:44,060 --> 00:12:49,880
around your UI and stitch them together

00:12:46,190 --> 00:12:51,680
directly in the browser by thinking of

00:12:49,880 --> 00:12:59,030
and treating your UI as its own

00:12:51,680 --> 00:13:00,590
application another thing that I see

00:12:59,030 --> 00:13:03,050
happen a lot is people will take

00:13:00,590 --> 00:13:06,950
controllers and because controllers are

00:13:03,050 --> 00:13:08,780
the most like directly actionable piece

00:13:06,950 --> 00:13:13,220
of code they directly in or interact

00:13:08,780 --> 00:13:14,570
with your UI rather than refactor things

00:13:13,220 --> 00:13:16,310
and the services of directives

00:13:14,570 --> 00:13:18,860
controllers just kind of become dumping

00:13:16,310 --> 00:13:20,420
grounds for all these all of all of your

00:13:18,860 --> 00:13:23,660
application logic

00:13:20,420 --> 00:13:26,959
hmm controller should generally be

00:13:23,660 --> 00:13:29,149
around a very specific constrained part

00:13:26,959 --> 00:13:31,339
of the user interface and should maybe

00:13:29,149 --> 00:13:34,670
contain like anywhere from five to ten

00:13:31,339 --> 00:13:35,690
methods any more than that and you want

00:13:34,670 --> 00:13:37,519
to think about breaking up your

00:13:35,690 --> 00:13:39,889
controllers especially if you have like

00:13:37,519 --> 00:13:41,240
an outer window in an inner window and

00:13:39,889 --> 00:13:43,850
you have one controller it's kind of

00:13:41,240 --> 00:13:47,860
managing both think about breaking those

00:13:43,850 --> 00:13:50,570
controllers up into like the sort of

00:13:47,860 --> 00:13:52,370
like the principle of least you know

00:13:50,570 --> 00:13:53,959
access or privilege or however you want

00:13:52,370 --> 00:13:57,529
to think about it the controller should

00:13:53,959 --> 00:14:00,410
be only concerned with one job and you

00:13:57,529 --> 00:14:02,240
can use angular's event Broadcasting

00:14:00,410 --> 00:14:05,449
System to communicate between

00:14:02,240 --> 00:14:09,529
controllers but generally controller

00:14:05,449 --> 00:14:10,910
should be kept free constrained models

00:14:09,529 --> 00:14:12,380
this is kind of a weird one to talk

00:14:10,910 --> 00:14:16,180
about because angular doesn't actually

00:14:12,380 --> 00:14:18,440
have a model system it has scopes and

00:14:16,180 --> 00:14:20,990
scopes are kind of angular's idea of

00:14:18,440 --> 00:14:23,389
models so when it comes to actually

00:14:20,990 --> 00:14:26,060
modeling your domain logic you're kind

00:14:23,389 --> 00:14:27,380
of left to do that in your own which is

00:14:26,060 --> 00:14:30,320
kind of great because unlike other

00:14:27,380 --> 00:14:33,529
frameworks angular doesn't impose like a

00:14:30,320 --> 00:14:35,480
like a parent you know prototype or like

00:14:33,529 --> 00:14:36,920
a custom class that you have to inherit

00:14:35,480 --> 00:14:41,149
you can just use plain old JavaScript

00:14:36,920 --> 00:14:42,649
objects which is awesome but you know

00:14:41,149 --> 00:14:44,240
generally you want to have something for

00:14:42,649 --> 00:14:46,880
persistence and for organizing your

00:14:44,240 --> 00:14:50,240
domain logic so I have an example of one

00:14:46,880 --> 00:14:51,350
that we'll look at in a little bit but

00:14:50,240 --> 00:14:54,230
the main thing to be concerned about

00:14:51,350 --> 00:14:56,149
here is that your domain logic should

00:14:54,230 --> 00:14:58,550
only deal with your data and it should

00:14:56,149 --> 00:15:00,800
be kind of away from your other services

00:14:58,550 --> 00:15:02,540
and your controllers and everything and

00:15:00,800 --> 00:15:08,149
it should be used by those services and

00:15:02,540 --> 00:15:12,110
controllers finally services are great

00:15:08,149 --> 00:15:14,390
for like when you have logic that you

00:15:12,110 --> 00:15:16,430
can pull out of a controller or pull out

00:15:14,390 --> 00:15:18,819
of them or and doesn't necessarily

00:15:16,430 --> 00:15:21,500
belong with the model because it

00:15:18,819 --> 00:15:23,420
references more more than one thing or a

00:15:21,500 --> 00:15:25,880
series of services that are needed to

00:15:23,420 --> 00:15:28,190
perform a complex transaction and can

00:15:25,880 --> 00:15:30,470
create transaction specific services

00:15:28,190 --> 00:15:32,120
that bring together other services and

00:15:30,470 --> 00:15:33,860
model data and can be invoked by

00:15:32,120 --> 00:15:41,959
controllers to keep your controller

00:15:33,860 --> 00:15:43,459
ode small and clean and simple so before

00:15:41,959 --> 00:15:48,579
we get into the code I just want to run

00:15:43,459 --> 00:15:51,290
through a few tools that are that I use

00:15:48,579 --> 00:15:53,870
some of that are popular in the angular

00:15:51,290 --> 00:15:55,160
community by the way I forgot to mention

00:15:53,870 --> 00:15:57,890
this earlier but if you have any

00:15:55,160 --> 00:15:59,470
questions about any of this stuff feel

00:15:57,890 --> 00:16:01,339
free to raise your hand and interrupt me

00:15:59,470 --> 00:16:09,920
is that going to be a problem for you

00:16:01,339 --> 00:16:24,670
with the mic go for it yeah this one

00:16:09,920 --> 00:16:24,670
okay um could everybody hear that okay

00:16:24,700 --> 00:16:32,060
yeah so to answer your question correct

00:16:27,709 --> 00:16:35,990
the the separation is complete that the

00:16:32,060 --> 00:16:38,540
PHP back-end is only serving JSON the

00:16:35,990 --> 00:16:40,310
entire front end application is

00:16:38,540 --> 00:16:44,930
completely static HTML CSS and

00:16:40,310 --> 00:16:48,910
JavaScript any other questions while

00:16:44,930 --> 00:16:48,910
we're here yes in the back

00:17:01,850 --> 00:17:08,720
applications / give either

00:17:05,199 --> 00:17:13,780
twitter-bootstrap I wanted three

00:17:08,720 --> 00:17:17,630
separate ideas in each span mm-hmm

00:17:13,780 --> 00:17:19,250
you've got one ngu one route sir and you

00:17:17,630 --> 00:17:22,850
should only have one ng app and I

00:17:19,250 --> 00:17:35,630
couldn't work out how I could have them

00:17:22,850 --> 00:17:39,950
separate and still sort of control yeah

00:17:35,630 --> 00:17:43,820
so the general that yeah so the general

00:17:39,950 --> 00:17:47,059
question was about how to organize an

00:17:43,820 --> 00:17:49,309
application effectively you're saying so

00:17:47,059 --> 00:17:50,750
the the built in angular router was a

00:17:49,309 --> 00:17:59,179
constraint because you only have one

00:17:50,750 --> 00:18:02,570
view right we will get to that later

00:17:59,179 --> 00:18:05,179
okay but as far as like trying to widget

00:18:02,570 --> 00:18:07,159
eyes the page that is a common pitfall

00:18:05,179 --> 00:18:09,169
because like everybody's kind of coming

00:18:07,159 --> 00:18:10,820
from the old jquery way of thinking

00:18:09,169 --> 00:18:12,740
where it's like you build your entire

00:18:10,820 --> 00:18:14,870
dom and then you go selected and add

00:18:12,740 --> 00:18:16,549
some functionality so that is completely

00:18:14,870 --> 00:18:18,770
understandable and like when i wrote my

00:18:16,549 --> 00:18:20,480
first angular app the entire thing was

00:18:18,770 --> 00:18:23,539
basically one controller with a bunch of

00:18:20,480 --> 00:18:26,690
jQuery widgets so don't feel bad but um

00:18:23,539 --> 00:18:28,130
yeah hopefully by the end of this you

00:18:26,690 --> 00:18:30,799
will be enlightened and if not you know

00:18:28,130 --> 00:18:37,130
you can find me and pepper me with

00:18:30,799 --> 00:18:42,559
questions after okay so tools anything

00:18:37,130 --> 00:18:46,370
else by the way though great so angular

00:18:42,559 --> 00:18:48,830
and the angular community have developed

00:18:46,370 --> 00:18:54,190
a whole suite of tools and integrations

00:18:48,830 --> 00:18:54,190
with existing JavaScript tools and

00:18:54,700 --> 00:19:00,130
a lot of it is like like cogeneration

00:18:56,950 --> 00:19:01,900
and like if you ever seen angular seed

00:19:00,130 --> 00:19:04,330
it's like the bootstrap template for an

00:19:01,900 --> 00:19:06,100
angular application that's actually

00:19:04,330 --> 00:19:07,690
where that bad directory organization

00:19:06,100 --> 00:19:11,260
comes from so don't ever use angular

00:19:07,690 --> 00:19:13,180
seed to be fair Bauer is actually a

00:19:11,260 --> 00:19:15,910
really useful tool it's just kind of a

00:19:13,180 --> 00:19:18,370
nightmare for package maintain errs it's

00:19:15,910 --> 00:19:22,900
basically like package.json for it for

00:19:18,370 --> 00:19:25,150
node or you know composer for PHP so so

00:19:22,900 --> 00:19:26,890
that's useful that's good if you're

00:19:25,150 --> 00:19:30,340
super into you know code generation

00:19:26,890 --> 00:19:34,060
check out yona yeoman or I think grunt

00:19:30,340 --> 00:19:37,750
even has one now yeah otherwise no big

00:19:34,060 --> 00:19:41,010
deal Batarang is an extremely useful one

00:19:37,750 --> 00:19:46,810
counterpoint it's a Chrome extension

00:19:41,010 --> 00:19:48,100
that pops into the web inspector and it

00:19:46,810 --> 00:19:51,160
gives you a number of features one of

00:19:48,100 --> 00:19:53,470
which is when you when you click on an

00:19:51,160 --> 00:19:54,490
element in the element inspector in

00:19:53,470 --> 00:19:56,920
addition to getting all the other

00:19:54,490 --> 00:19:59,140
properties you also have this tab for

00:19:56,920 --> 00:20:03,010
all the angularjs scope properties that

00:19:59,140 --> 00:20:05,980
that element can see so you can see all

00:20:03,010 --> 00:20:08,380
of the immediate scope values and then

00:20:05,980 --> 00:20:09,520
you can click on you know proto to get

00:20:08,380 --> 00:20:12,790
like the parent scope and the

00:20:09,520 --> 00:20:16,210
grandparents scope and so on also it

00:20:12,790 --> 00:20:18,730
exposes a couple of variables in in the

00:20:16,210 --> 00:20:20,590
console so you know how you can do

00:20:18,730 --> 00:20:21,970
dollar zero and the console and i'll

00:20:20,590 --> 00:20:25,750
give you the currently selected element

00:20:21,970 --> 00:20:27,310
everybody familiar with that with this

00:20:25,750 --> 00:20:29,200
installed you can click on an element

00:20:27,310 --> 00:20:31,180
and type dollar scope in the console and

00:20:29,200 --> 00:20:32,890
it'll give you the scope for that

00:20:31,180 --> 00:20:34,600
element without having to go from the

00:20:32,890 --> 00:20:37,000
outside where you have to do angular

00:20:34,600 --> 00:20:40,090
element pass in dollar zero and then

00:20:37,000 --> 00:20:44,880
call a scope function so it's just a few

00:20:40,090 --> 00:20:44,880
little convenience things in that regard

00:20:45,810 --> 00:20:50,770
also it shows you the hierarchy of your

00:20:48,010 --> 00:20:52,630
entire page and all of the scopes so you

00:20:50,770 --> 00:20:55,630
can actually click through like the

00:20:52,630 --> 00:20:57,490
entire your entire application as it

00:20:55,630 --> 00:20:59,260
lives on that page and see how the

00:20:57,490 --> 00:21:02,470
scopes are nested see all the values for

00:20:59,260 --> 00:21:05,500
those scopes extremely extremely helpful

00:21:02,470 --> 00:21:07,510
for debugging also you have this

00:21:05,500 --> 00:21:08,350
interactive graph where you can roll

00:21:07,510 --> 00:21:09,970
over each one

00:21:08,350 --> 00:21:12,580
one of the controllers and services that

00:21:09,970 --> 00:21:14,740
you have exposed and it will show you a

00:21:12,580 --> 00:21:16,270
map of all of its all of its

00:21:14,740 --> 00:21:20,400
dependencies all of the things that

00:21:16,270 --> 00:21:22,570
depend on it so very very useful and

00:21:20,400 --> 00:21:26,710
probably the most useful feature of all

00:21:22,570 --> 00:21:28,750
is um it it does a performance analysis

00:21:26,710 --> 00:21:31,240
of all your watch expressions so if your

00:21:28,750 --> 00:21:32,789
page is suddenly really slow you can

00:21:31,240 --> 00:21:34,960
actually come in here and it'll tell you

00:21:32,789 --> 00:21:37,120
which expressions on your page are

00:21:34,960 --> 00:21:40,740
taking the longest to run this was

00:21:37,120 --> 00:21:42,880
extremely valuable on this gigantic

00:21:40,740 --> 00:21:45,280
admin form that we worked on a few

00:21:42,880 --> 00:21:48,309
months ago where it had you know dozens

00:21:45,280 --> 00:21:49,630
of checkboxes and tags and things and it

00:21:48,309 --> 00:21:51,669
was just thousands of thousands of

00:21:49,630 --> 00:21:54,039
elements on the page and we were able to

00:21:51,669 --> 00:21:56,650
use this tool to just write a couple of

00:21:54,039 --> 00:22:01,110
custom directives that brought our

00:21:56,650 --> 00:22:01,110
performance back to the realms of sanity

00:22:01,830 --> 00:22:07,030
so I'm going to talk about angular UI in

00:22:04,510 --> 00:22:11,010
a minute but i'm going to toot our own

00:22:07,030 --> 00:22:11,010
company's collective horn for a minute

00:22:11,220 --> 00:22:19,210
because we've written a bunch of stuff

00:22:14,880 --> 00:22:22,289
so angular file is and israel github

00:22:19,210 --> 00:22:24,100
references and i'll post the slides and

00:22:22,289 --> 00:22:25,929
you'll be able to click on those links

00:22:24,100 --> 00:22:29,700
and get to all these repositories really

00:22:25,929 --> 00:22:34,150
easily so angular natively does not have

00:22:29,700 --> 00:22:37,030
any bindings for file inputs every other

00:22:34,150 --> 00:22:38,559
HTML input has like this you know the

00:22:37,030 --> 00:22:40,390
ability to modify the value through

00:22:38,559 --> 00:22:42,580
JavaScript and really easily in things

00:22:40,390 --> 00:22:46,570
like that except for files because files

00:22:42,580 --> 00:22:48,669
are read-only and the html5 file api is

00:22:46,570 --> 00:22:51,039
only available in newer browsers which

00:22:48,669 --> 00:22:53,080
angular 1 wasn't targeting so we wrote

00:22:51,039 --> 00:22:57,220
this expression that allows you to have

00:22:53,080 --> 00:22:58,659
a normal ng model binding on file inputs

00:22:57,220 --> 00:23:02,130
which is something that doesn't exist in

00:22:58,659 --> 00:23:04,750
angular core right now so you can write

00:23:02,130 --> 00:23:07,330
your inputs and angular bindings as you

00:23:04,750 --> 00:23:10,179
normally would and actually manipulate

00:23:07,330 --> 00:23:12,640
them so this is a controller for anybody

00:23:10,179 --> 00:23:14,950
who doesn't know yet and this is kind of

00:23:12,640 --> 00:23:17,230
how you define them so this is angular

00:23:14,950 --> 00:23:21,299
Xin jection system where I'm I have

00:23:17,230 --> 00:23:23,070
scope and a thing called a resource

00:23:21,299 --> 00:23:26,700
it I don't actually recommend this but

00:23:23,070 --> 00:23:30,179
for demo purposes it's simple resource

00:23:26,700 --> 00:23:35,850
gives you very naive non hypermedia

00:23:30,179 --> 00:23:38,730
compliance rest a rest ish API call

00:23:35,850 --> 00:23:41,269
ability so you can create a particular

00:23:38,730 --> 00:23:44,070
resource to a path that's parameterised

00:23:41,269 --> 00:23:46,470
and then you can set up your binding the

00:23:44,070 --> 00:23:49,860
file input is going to bind to and then

00:23:46,470 --> 00:23:52,129
you can see here anytime the value

00:23:49,860 --> 00:23:55,200
changes we're going to call upload and

00:23:52,129 --> 00:23:57,509
pass in the model and then this is just

00:23:55,200 --> 00:23:59,070
to actually do the upload of the file

00:23:57,509 --> 00:24:02,429
and this is just a really clean

00:23:59,070 --> 00:24:09,119
convenient wrapper for the HTML file 5

00:24:02,429 --> 00:24:14,759
file API combined with xhr too so that's

00:24:09,119 --> 00:24:17,639
you know file uploading 101 we also

00:24:14,759 --> 00:24:19,440
wrote another module for just doing

00:24:17,639 --> 00:24:20,669
really simple work with canvases like

00:24:19,440 --> 00:24:27,109
the kind of thing that you would use to

00:24:20,669 --> 00:24:30,739
help a user upload an avatar let's say

00:24:27,109 --> 00:24:33,539
this actually builds off of the previous

00:24:30,739 --> 00:24:36,299
model angular file which also includes

00:24:33,539 --> 00:24:39,480
the ability to work with the html5

00:24:36,299 --> 00:24:42,960
drag-and-drop API and this is an example

00:24:39,480 --> 00:24:44,609
of how you write directives so the image

00:24:42,960 --> 00:24:48,149
editor directive is directed that's

00:24:44,609 --> 00:24:51,450
exposed by angular canvas it's a it's a

00:24:48,149 --> 00:24:53,460
tag that basically just wraps the canvas

00:24:51,450 --> 00:24:54,809
tag so when when angular actually

00:24:53,460 --> 00:24:58,619
renders this out under the hood it's

00:24:54,809 --> 00:25:01,919
just a canvas tag and it has some some

00:24:58,619 --> 00:25:05,249
properties like fit so like when I add a

00:25:01,919 --> 00:25:07,169
new image you know it can crop it it can

00:25:05,249 --> 00:25:09,629
scale it it can try and fit it

00:25:07,169 --> 00:25:12,299
intelligently here i'm just saying fit

00:25:09,629 --> 00:25:15,869
none so don't try and rescale it or

00:25:12,299 --> 00:25:17,850
anything drop target is another

00:25:15,869 --> 00:25:20,929
directive that's good that gets pulled

00:25:17,850 --> 00:25:23,580
in from angular file which I can use to

00:25:20,929 --> 00:25:27,470
designate this particular piece of Dom

00:25:23,580 --> 00:25:31,859
as a drop target for files this and

00:25:27,470 --> 00:25:33,330
these two are also directives that come

00:25:31,859 --> 00:25:36,270
with we

00:25:33,330 --> 00:25:38,760
angular file that you can use to set a

00:25:36,270 --> 00:25:41,610
hover class for when a file is you know

00:25:38,760 --> 00:25:44,370
hovering over waiting to be dropped and

00:25:41,610 --> 00:25:46,110
then drop and load or two events that

00:25:44,370 --> 00:25:49,260
are triggered and these are just setting

00:25:46,110 --> 00:25:53,010
the state of the UI dollar UI is just a

00:25:49,260 --> 00:25:57,560
custom JavaScript object that hangs off

00:25:53,010 --> 00:26:01,620
of scope and is exposed to the template

00:25:57,560 --> 00:26:03,510
so when when it's dropped set the state

00:26:01,620 --> 00:26:04,830
of the UI to like show a class or a

00:26:03,510 --> 00:26:07,670
message indicating that the files

00:26:04,830 --> 00:26:09,930
loading once it's actually done loaded

00:26:07,670 --> 00:26:13,560
indicate to the UI that it's ready to be

00:26:09,930 --> 00:26:15,090
edited and bind it to the users avatar

00:26:13,560 --> 00:26:16,880
and I'll actually show you a live

00:26:15,090 --> 00:26:19,440
working example this a little bit later

00:26:16,880 --> 00:26:23,700
does everybody follow how that works

00:26:19,440 --> 00:26:25,650
does that make sense yes okay sweet and

00:26:23,700 --> 00:26:27,630
again feel free to interrupt me at any

00:26:25,650 --> 00:26:30,810
time I know you're all you know very

00:26:27,630 --> 00:26:35,390
polite but it's okay i won't i won't be

00:26:30,810 --> 00:26:37,410
offended in fact i encourage it another

00:26:35,390 --> 00:26:39,660
module that we wrote that's kind of

00:26:37,410 --> 00:26:42,510
specific to how we've architected our

00:26:39,660 --> 00:26:44,540
applications specifically in the style

00:26:42,510 --> 00:26:48,330
where your UI is its own separate thing

00:26:44,540 --> 00:26:52,350
is this HTTP auth module as ola was

00:26:48,330 --> 00:26:54,000
mentioning HTTP basic auth is really

00:26:52,350 --> 00:26:55,830
convenient because it's sort of

00:26:54,000 --> 00:26:57,980
prepackaged with HTTP and you don't

00:26:55,830 --> 00:27:03,030
really have to think about it and

00:26:57,980 --> 00:27:04,530
angular's HTTP library is promised based

00:27:03,030 --> 00:27:09,380
how many people are familiar with how

00:27:04,530 --> 00:27:12,810
promises work in JavaScript okay so

00:27:09,380 --> 00:27:14,010
definitely less than a third I'm not

00:27:12,810 --> 00:27:16,110
going to show any code examples but

00:27:14,010 --> 00:27:18,510
basically promises allow you to chain

00:27:16,110 --> 00:27:20,910
functions that get called eventually

00:27:18,510 --> 00:27:22,230
rather than nesting callbacks and having

00:27:20,910 --> 00:27:23,850
this callback pyramid of death

00:27:22,230 --> 00:27:27,030
everyone's seen the callback pyramid of

00:27:23,850 --> 00:27:30,500
death right so you're right okay so

00:27:27,030 --> 00:27:33,150
promises are basically a way around that

00:27:30,500 --> 00:27:35,520
it's a way to say okay here's a thing

00:27:33,150 --> 00:27:37,260
that represents my HTTP call it's going

00:27:35,520 --> 00:27:39,660
to resolve eventually I can just keep

00:27:37,260 --> 00:27:42,270
attaching functions to it and those

00:27:39,660 --> 00:27:44,010
functions will get called there's a

00:27:42,270 --> 00:27:46,800
success callback in an error call back

00:27:44,010 --> 00:27:51,030
and one of them is going to called

00:27:46,800 --> 00:27:58,140
eventually some day and this HTTP auth

00:27:51,030 --> 00:28:01,620
module works with angular's HTTP xhr

00:27:58,140 --> 00:28:07,170
wrapper to say okay if a request fails

00:28:01,620 --> 00:28:08,760
with either a 401 or 403 don't just

00:28:07,170 --> 00:28:11,190
return it right away we're actually

00:28:08,760 --> 00:28:14,450
going to push it into a queue and so all

00:28:11,190 --> 00:28:16,980
of those outstanding promise resolutions

00:28:14,450 --> 00:28:18,540
promise resolution functions don't

00:28:16,980 --> 00:28:20,700
actually call them yet just defer them

00:28:18,540 --> 00:28:23,730
until later so what we do in our

00:28:20,700 --> 00:28:25,680
application is because the UI is all

00:28:23,730 --> 00:28:28,830
static and all of the the sensitive data

00:28:25,680 --> 00:28:31,170
is coming from the API the UI can just

00:28:28,830 --> 00:28:32,700
start firing off API requests

00:28:31,170 --> 00:28:34,890
immediately and as soon as there's

00:28:32,700 --> 00:28:36,750
something there that requires

00:28:34,890 --> 00:28:40,860
authentication that kicks back a 401 or

00:28:36,750 --> 00:28:45,060
403 our suppose initially it only be a

00:28:40,860 --> 00:28:47,580
401 as soon as that happens the system

00:28:45,060 --> 00:28:50,130
is like oh okay I noticed that you know

00:28:47,580 --> 00:28:52,080
a request has failed and there's you

00:28:50,130 --> 00:28:55,620
know one or more requests waiting in the

00:28:52,080 --> 00:28:56,970
queue so what we can do is pop up dialog

00:28:55,620 --> 00:28:59,040
and prompt the user for their

00:28:56,970 --> 00:29:02,730
authentication credentials and then come

00:28:59,040 --> 00:29:05,400
in here and say okay give the HTTP off

00:29:02,730 --> 00:29:08,190
mod service some credentials and then

00:29:05,400 --> 00:29:09,690
take the request queue and flush any

00:29:08,190 --> 00:29:11,490
outstanding requests so it'll take all

00:29:09,690 --> 00:29:14,310
those requests and try them all again

00:29:11,490 --> 00:29:17,540
and when they succeed all of the code

00:29:14,310 --> 00:29:20,670
that was originally chained off of those

00:29:17,540 --> 00:29:22,710
requests will actually finally get

00:29:20,670 --> 00:29:25,290
called so it's a really really simple

00:29:22,710 --> 00:29:33,000
convenient way to handle these otherwise

00:29:25,290 --> 00:29:35,930
very tricky complex problems and finally

00:29:33,000 --> 00:29:38,640
angular model which is a very simple

00:29:35,930 --> 00:29:42,900
module that we wrote just to be able to

00:29:38,640 --> 00:29:49,110
bind log domain logic to like specific

00:29:42,900 --> 00:29:51,810
API endpoints so what we do in in our

00:29:49,110 --> 00:29:53,220
HTML page so that hang so that our

00:29:51,810 --> 00:29:55,800
application knows where to look for

00:29:53,220 --> 00:29:59,100
these api resources is we actually have

00:29:55,800 --> 00:30:00,570
link tags in the header so it'll be you

00:29:59,100 --> 00:30:02,820
know link rel equals riso

00:30:00,570 --> 00:30:04,860
and then we'll give it a name which

00:30:02,820 --> 00:30:07,320
corresponds to one of these guys and

00:30:04,860 --> 00:30:09,389
then it will have a URL so i don't have

00:30:07,320 --> 00:30:10,830
to actually hard code in urls into my

00:30:09,389 --> 00:30:16,940
javascript it's all coming from the

00:30:10,830 --> 00:30:19,110
server and then by by using this model

00:30:16,940 --> 00:30:21,600
library i can actually define these

00:30:19,110 --> 00:30:23,789
models with names and have like an

00:30:21,600 --> 00:30:26,309
instance method that i can call on a

00:30:23,789 --> 00:30:30,690
specific user or a class method that i

00:30:26,309 --> 00:30:33,509
can call on on all users so this is just

00:30:30,690 --> 00:30:37,649
like a like a standard you know symphony

00:30:33,509 --> 00:30:39,629
cake rails style finders where I can

00:30:37,649 --> 00:30:43,379
pass some passing some query parameters

00:30:39,629 --> 00:30:45,240
that get see relized and this is just

00:30:43,379 --> 00:30:47,129
like a convenience wrapper for finding

00:30:45,240 --> 00:30:49,529
all the active users and because it

00:30:47,129 --> 00:30:51,779
returns a promise I can chain a function

00:30:49,529 --> 00:30:55,379
off of that method to do something with

00:30:51,779 --> 00:30:57,990
the result very convenient and I'm able

00:30:55,379 --> 00:31:00,480
to keep that logic you know contain and

00:30:57,990 --> 00:31:02,240
isolated around my domain objects all

00:31:00,480 --> 00:31:09,870
this makes sense so far any questions

00:31:02,240 --> 00:31:13,980
great so currently these are the

00:31:09,870 --> 00:31:16,700
features of angular model there are some

00:31:13,980 --> 00:31:19,259
competing like rest ish ones out there

00:31:16,700 --> 00:31:23,429
this isn't even fully rest compliant or

00:31:19,259 --> 00:31:26,059
hyper me hypermedia compliant but it's

00:31:23,429 --> 00:31:29,149
as i indicated it's based on promises

00:31:26,059 --> 00:31:31,769
all the HTTP calls are promised based

00:31:29,149 --> 00:31:34,500
unlike if you've ever used angular's

00:31:31,769 --> 00:31:37,200
built-in ng resource it's kind of hacky

00:31:34,500 --> 00:31:39,240
they fix that recently but not

00:31:37,200 --> 00:31:42,960
completely gives you a really convenient

00:31:39,240 --> 00:31:46,019
way to bind domain logic to urls it

00:31:42,960 --> 00:31:49,139
actually tracks as you edit fields it

00:31:46,019 --> 00:31:50,669
tracks which fields are are changed from

00:31:49,139 --> 00:31:53,399
the original version it will actually

00:31:50,669 --> 00:31:56,159
send like a smart patch request with

00:31:53,399 --> 00:31:59,909
just the updates it also intelligently

00:31:56,159 --> 00:32:02,309
handles errors so for our servant for

00:31:59,909 --> 00:32:05,070
our API service we kind of followed

00:32:02,309 --> 00:32:07,529
github model of if a request fails for

00:32:05,070 --> 00:32:12,419
validation reasons for example we send

00:32:07,529 --> 00:32:14,160
back an HTTP 422 its entity something

00:32:12,419 --> 00:32:18,580
something bad with the entity

00:32:14,160 --> 00:32:23,080
and then the JSON body response will

00:32:18,580 --> 00:32:27,750
actually be like a key value map of the

00:32:23,080 --> 00:32:27,750
fields and what the error messages are

00:32:27,990 --> 00:32:35,440
so this will handle that sorry

00:32:31,860 --> 00:32:42,310
unprocessed belen two teeth ank you wow

00:32:35,440 --> 00:32:44,920
it's really handy so yeah it'll handle

00:32:42,310 --> 00:32:46,750
those errors intelligently and it

00:32:44,920 --> 00:32:50,560
integrates well with angular's form

00:32:46,750 --> 00:32:51,970
handling so angular has features for you

00:32:50,560 --> 00:32:54,220
know handling validation errors in a

00:32:51,970 --> 00:32:55,630
form so you know you submit the form the

00:32:54,220 --> 00:32:59,140
errors come back and you can use them

00:32:55,630 --> 00:33:02,320
directly in in angular's form validation

00:32:59,140 --> 00:33:05,710
error handling and it is almost

00:33:02,320 --> 00:33:08,020
hypermedia compliant I say that because

00:33:05,710 --> 00:33:10,330
of the things that we're working on in

00:33:08,020 --> 00:33:12,850
the future which our relationship

00:33:10,330 --> 00:33:14,230
linking and embedding so like you'll be

00:33:12,850 --> 00:33:15,790
able to have you know this thing is

00:33:14,230 --> 00:33:18,310
related to this other thing and it has a

00:33:15,790 --> 00:33:22,390
link and when you traverse that link you

00:33:18,310 --> 00:33:25,770
can you know wrap the result in some

00:33:22,390 --> 00:33:28,240
other domain logic that's specific to it

00:33:25,770 --> 00:33:30,160
also for embedding like if you have a

00:33:28,240 --> 00:33:31,690
post and then you have an array of

00:33:30,160 --> 00:33:33,820
comments each one of those comments

00:33:31,690 --> 00:33:36,250
should be able to have its own embedded

00:33:33,820 --> 00:33:38,290
URL that you can call and get like the

00:33:36,250 --> 00:33:43,180
full response for that particular

00:33:38,290 --> 00:33:44,440
comment also getting smarter about URL

00:33:43,180 --> 00:33:47,650
based read through and right through

00:33:44,440 --> 00:33:50,290
caching actually respecting HT HTTP

00:33:47,650 --> 00:33:52,800
headers and using like local storage and

00:33:50,290 --> 00:33:55,030
things like that to cash this stuff

00:33:52,800 --> 00:33:56,950
because if you think about it we're

00:33:55,030 --> 00:33:58,780
actually because we're treating the UI

00:33:56,950 --> 00:34:01,450
as its own application we kind of have

00:33:58,780 --> 00:34:03,220
to do these things but that also allows

00:34:01,450 --> 00:34:04,960
us to be really smart about how we

00:34:03,220 --> 00:34:06,820
present things to the user so that the

00:34:04,960 --> 00:34:09,190
first time they show up this stuff is

00:34:06,820 --> 00:34:10,750
cached and then the next time they show

00:34:09,190 --> 00:34:15,460
up or even if they're offline we still

00:34:10,750 --> 00:34:17,169
have something to show them and that

00:34:15,460 --> 00:34:19,120
also works well as they're navigating

00:34:17,169 --> 00:34:21,610
through the app and changing things we

00:34:19,120 --> 00:34:26,530
can make the UI respond instantly even

00:34:21,610 --> 00:34:27,399
as you know the the server or the API is

00:34:26,530 --> 00:34:30,250
doing some work in the

00:34:27,399 --> 00:34:33,549
background and finally that brings me to

00:34:30,250 --> 00:34:35,919
message orientation where we're trying

00:34:33,549 --> 00:34:39,760
to figure out the best way to sort of

00:34:35,919 --> 00:34:41,139
pull apart these HTTP messages that are

00:34:39,760 --> 00:34:43,629
going back and forth from the actual

00:34:41,139 --> 00:34:45,159
data that you want to persist because

00:34:43,629 --> 00:34:47,049
that that for me was kind of like the

00:34:45,159 --> 00:34:49,869
key to understanding HTTP and how to

00:34:47,049 --> 00:34:54,730
leverage it properly is that it's not

00:34:49,869 --> 00:34:56,559
like it's not an RPC protocol for just

00:34:54,730 --> 00:34:59,339
shoveling objects back and forth it's

00:34:56,559 --> 00:35:01,779
actually a message passing protocol and

00:34:59,339 --> 00:35:04,000
understanding that paradigm and I can't

00:35:01,779 --> 00:35:05,559
really go into all of the what that

00:35:04,000 --> 00:35:07,240
means in this talk but actually

00:35:05,559 --> 00:35:10,119
understanding it as a message passing

00:35:07,240 --> 00:35:12,099
protocol is really a really powerful

00:35:10,119 --> 00:35:15,390
paradigm shift so we're figuring out the

00:35:12,099 --> 00:35:17,440
best way to allow people to say okay

00:35:15,390 --> 00:35:20,289
these fields are just part of the

00:35:17,440 --> 00:35:21,819
message and relate to you know this

00:35:20,289 --> 00:35:23,319
particular transaction that I'm doing

00:35:21,819 --> 00:35:25,150
right now but they're not actually

00:35:23,319 --> 00:35:26,440
something I'm going to persist so

00:35:25,150 --> 00:35:29,859
they're not actually part of my domain

00:35:26,440 --> 00:35:31,119
object in the API or what I'm going to

00:35:29,859 --> 00:35:37,349
show to the user is something that's

00:35:31,119 --> 00:35:37,349
editable does that make sense yes

00:35:38,870 --> 00:35:42,960
on the top link there the relationship

00:35:41,340 --> 00:35:46,230
linking and embedding I just wanted

00:35:42,960 --> 00:35:48,660
wondered if when talking to an API

00:35:46,230 --> 00:35:50,370
whether that JSON structure is kind of

00:35:48,660 --> 00:35:52,440
needs to be standardized in a way

00:35:50,370 --> 00:35:54,810
whether it's like a healthful mouse

00:35:52,440 --> 00:35:57,480
something does something there has to be

00:35:54,810 --> 00:36:00,480
standardized for angular to work better

00:35:57,480 --> 00:36:03,630
right um so obviously you all heard that

00:36:00,480 --> 00:36:05,490
I don't have to repeat it great so yes

00:36:03,630 --> 00:36:08,760
the responses do you have to be

00:36:05,490 --> 00:36:10,860
standardized what we are work and it's

00:36:08,760 --> 00:36:13,950
the format that we use is very similar

00:36:10,860 --> 00:36:17,700
to how the semantics are a little bit

00:36:13,950 --> 00:36:22,140
simpler to allow for you know more rich

00:36:17,700 --> 00:36:25,170
domain models and more sort of different

00:36:22,140 --> 00:36:26,550
ways of doing things because the way at

00:36:25,170 --> 00:36:28,680
least how and particularly the way the

00:36:26,550 --> 00:36:29,430
house structured is very constrained so

00:36:28,680 --> 00:36:31,800
the model that we've been working

00:36:29,430 --> 00:36:34,020
towards is that any object that has a

00:36:31,800 --> 00:36:36,870
dollar links property is its own

00:36:34,020 --> 00:36:40,590
resource whether it's embedded in an

00:36:36,870 --> 00:36:42,720
array in some other response or whatever

00:36:40,590 --> 00:36:44,910
so if it has a dollar links property and

00:36:42,720 --> 00:36:48,420
a dollar self property within that or a

00:36:44,910 --> 00:36:50,010
self property that has its own URL then

00:36:48,420 --> 00:36:52,830
it's it's own independently

00:36:50,010 --> 00:36:59,900
referenceable entity that answer your

00:36:52,830 --> 00:37:02,580
question okay so finally angular UI

00:36:59,900 --> 00:37:05,910
angular UI is basically broken up into

00:37:02,580 --> 00:37:10,620
into three broad categories the site's

00:37:05,910 --> 00:37:13,290
kind of crap we're working on it in

00:37:10,620 --> 00:37:16,860
addition to having these sort of Swiss

00:37:13,290 --> 00:37:19,860
Army utility libraries we also have

00:37:16,860 --> 00:37:21,540
standalone modules that are just angular

00:37:19,860 --> 00:37:23,360
native components like you I bootstrap

00:37:21,540 --> 00:37:25,770
which will be looking at in a second

00:37:23,360 --> 00:37:28,140
that are completely native angular

00:37:25,770 --> 00:37:30,090
components we also have other modules

00:37:28,140 --> 00:37:35,160
that rap like existing you know jQuery

00:37:30,090 --> 00:37:37,370
libraries or like Google Maps UI code

00:37:35,160 --> 00:37:42,890
mirror and ace and that kind of thing

00:37:37,370 --> 00:37:45,600
and so to talk about you I bootstrap

00:37:42,890 --> 00:37:47,940
first of all the documentation for you I

00:37:45,600 --> 00:37:49,200
bootstrap sort of alludes to this but

00:37:47,940 --> 00:37:50,660
the entire library is actually basically

00:37:49,200 --> 00:37:52,980
about kittens

00:37:50,660 --> 00:37:55,710
so you'll see that in the carousel

00:37:52,980 --> 00:37:57,570
example which I've replicated here you

00:37:55,710 --> 00:37:59,730
know you have your very series of

00:37:57,570 --> 00:38:01,380
kittens and to take a look at the code

00:37:59,730 --> 00:38:02,640
for that it's actually very simple so

00:38:01,380 --> 00:38:04,490
here's the controller and all you're

00:38:02,640 --> 00:38:07,590
really doing is defining some data and

00:38:04,490 --> 00:38:10,140
attaching it to the scope so you have a

00:38:07,590 --> 00:38:12,290
peer an interval that indicates how long

00:38:10,140 --> 00:38:14,820
the slide should wait before advancing

00:38:12,290 --> 00:38:17,580
and you have each one of your slides and

00:38:14,820 --> 00:38:20,250
you can actually look at how this is

00:38:17,580 --> 00:38:21,780
represented in HTML and you can see that

00:38:20,250 --> 00:38:23,760
those property names are all really very

00:38:21,780 --> 00:38:26,670
arbitrary because what matters is the

00:38:23,760 --> 00:38:29,040
directives that you're using so here is

00:38:26,670 --> 00:38:31,980
where I'm binding that particular

00:38:29,040 --> 00:38:34,890
JavaScript function to this bit of Dom

00:38:31,980 --> 00:38:37,860
and obviously just defining functions

00:38:34,890 --> 00:38:40,400
like this especially global functions is

00:38:37,860 --> 00:38:43,580
really not the way to do this I'm just

00:38:40,400 --> 00:38:47,550
showing you the simple example for

00:38:43,580 --> 00:38:49,680
fitting on the slide purposes so you

00:38:47,550 --> 00:38:51,900
have this carousel directive you're

00:38:49,680 --> 00:38:53,310
setting the interval again it's totally

00:38:51,900 --> 00:38:56,100
arbitrary like this could be a hard

00:38:53,310 --> 00:38:58,620
coded value but as it is it's just a

00:38:56,100 --> 00:39:01,170
reference to a scope value that I've

00:38:58,620 --> 00:39:04,830
organized in a particular way under an

00:39:01,170 --> 00:39:06,770
object called deck and then in the

00:39:04,830 --> 00:39:10,890
carousel I'll have a series of slides

00:39:06,770 --> 00:39:12,540
with the slide directive ng repeat again

00:39:10,890 --> 00:39:15,030
as an angular core directive that allows

00:39:12,540 --> 00:39:16,530
you to rate over objects and arrays so

00:39:15,030 --> 00:39:19,530
I'm saying you know for each it's

00:39:16,530 --> 00:39:22,950
basically you know for each slide in dec

00:39:19,530 --> 00:39:24,870
dot slides indicate which one is active

00:39:22,950 --> 00:39:28,080
that's a property that carousel sets for

00:39:24,870 --> 00:39:32,040
me and then I just have an image in some

00:39:28,080 --> 00:39:35,010
text so again it's really very much left

00:39:32,040 --> 00:39:38,970
up to me how I structure my data and how

00:39:35,010 --> 00:39:40,860
I structure my my HTML because the the

00:39:38,970 --> 00:39:43,440
directive syntax and the directive API

00:39:40,860 --> 00:39:48,780
allows me to combine these things in a

00:39:43,440 --> 00:39:50,460
very powerful way like as long as I know

00:39:48,780 --> 00:39:53,490
the correct elements and attributes use

00:39:50,460 --> 00:39:56,370
I can combine these things in you know

00:39:53,490 --> 00:39:58,110
any way I want to so like I like you saw

00:39:56,370 --> 00:40:00,600
in the the previous example with the

00:39:58,110 --> 00:40:02,220
canvas I'm taking you know a canvas

00:40:00,600 --> 00:40:03,760
element and combining some drag-and-drop

00:40:02,220 --> 00:40:05,950
directives with it

00:40:03,760 --> 00:40:09,160
to create this very rich behavior which

00:40:05,950 --> 00:40:11,620
will will demo in a second but getting

00:40:09,160 --> 00:40:14,860
back to to the cats you can also

00:40:11,620 --> 00:40:18,430
organize them in an accordion again the

00:40:14,860 --> 00:40:23,350
the code for that is very simple I'm

00:40:18,430 --> 00:40:24,970
just defining my cats and here's my

00:40:23,350 --> 00:40:28,360
accordion that I'm defining with you

00:40:24,970 --> 00:40:31,180
know an accordion element and setting

00:40:28,360 --> 00:40:34,210
you know the heading what cats I'm

00:40:31,180 --> 00:40:37,420
actually get a rating over and again

00:40:34,210 --> 00:40:40,210
just dumping out an image you can also

00:40:37,420 --> 00:40:42,220
schedule your cats and honestly we're

00:40:40,210 --> 00:40:45,370
really not even trying anymore at this

00:40:42,220 --> 00:40:48,630
point we're just giving it a date and I

00:40:45,370 --> 00:40:50,860
mean seriously this is ridiculous

00:40:48,630 --> 00:40:56,920
basically just specifying a date picker

00:40:50,860 --> 00:40:59,230
and a time picker you get the idea you I

00:40:56,920 --> 00:41:02,230
bootstrap also wraps basically every

00:40:59,230 --> 00:41:04,960
other element in bootstrap they recently

00:41:02,230 --> 00:41:10,060
just released 0-10 which is up upgraded

00:41:04,960 --> 00:41:11,860
or updated to I think bootstrap 303 so

00:41:10,060 --> 00:41:15,370
all you have to do to get all this

00:41:11,860 --> 00:41:19,930
wonderful cat magic pneus is include

00:41:15,370 --> 00:41:23,110
bootstrap 3 CSS and angular UI bootstrap

00:41:19,930 --> 00:41:25,540
just two files for all of this it wraps

00:41:23,110 --> 00:41:27,580
everything else that bootstrap offers

00:41:25,540 --> 00:41:30,010
except for the stuff that's literally

00:41:27,580 --> 00:41:33,370
just CSS you can check that out at

00:41:30,010 --> 00:41:35,260
angular UI github daioh / bootstrap

00:41:33,370 --> 00:41:36,760
again the slides will be up later so you

00:41:35,260 --> 00:41:41,950
can you don't have to memorize this sir

00:41:36,760 --> 00:41:43,180
whatever five minutes oh dang okay then

00:41:41,950 --> 00:41:45,280
I go fast yes so there's some other

00:41:43,180 --> 00:41:46,600
stuff in there too finally the project

00:41:45,280 --> 00:41:49,750
that I work on is UI router I'm going to

00:41:46,600 --> 00:41:52,780
start talking really really quickly so a

00:41:49,750 --> 00:41:54,460
long story short ng route which is the

00:41:52,780 --> 00:41:58,090
built in routing infrastructure for

00:41:54,460 --> 00:41:59,410
angular 1 currently it's crap don't tell

00:41:58,090 --> 00:42:01,360
the guys i said that they're super nice

00:41:59,410 --> 00:42:05,710
I mean actually I've told them that so

00:42:01,360 --> 00:42:07,330
don't worry so the reason why it's crap

00:42:05,710 --> 00:42:10,540
is it basically just gives you a bunch

00:42:07,330 --> 00:42:13,180
of URL pattern mattress that you can

00:42:10,540 --> 00:42:15,410
attach a template and a controller to

00:42:13,180 --> 00:42:17,150
and they only go one level deep

00:42:15,410 --> 00:42:20,539
and it's sort of useless for anything

00:42:17,150 --> 00:42:22,640
but the most basic scenarios where as UI

00:42:20,539 --> 00:42:24,440
router you actually have this like

00:42:22,640 --> 00:42:28,220
fundamentally different abstraction that

00:42:24,440 --> 00:42:29,720
exists between your URLs and actual

00:42:28,220 --> 00:42:32,359
state of your application it actually

00:42:29,720 --> 00:42:36,650
allows you to model your application is

00:42:32,359 --> 00:42:38,210
a hierarchical state machine so the

00:42:36,650 --> 00:42:41,630
basic features that it offers are you

00:42:38,210 --> 00:42:43,490
can organize your states in a tree so

00:42:41,630 --> 00:42:44,750
that you have this nested tree structure

00:42:43,490 --> 00:42:47,480
that actually makes sense according to

00:42:44,750 --> 00:42:50,780
your application with that you can nest

00:42:47,480 --> 00:42:53,059
your view templates URLs are

00:42:50,780 --> 00:42:55,069
hierarchical and it also has some nice

00:42:53,059 --> 00:43:00,069
animated transition goodies so let's see

00:42:55,069 --> 00:43:02,270
if here we go okay so this is a demo

00:43:00,069 --> 00:43:04,940
we'll see how much we can fit here so

00:43:02,270 --> 00:43:06,559
here we're at the home page and this is

00:43:04,940 --> 00:43:08,030
going to show us the URL the parameters

00:43:06,559 --> 00:43:09,380
are extracted from the URL and the

00:43:08,030 --> 00:43:12,010
actual name of the state that I'm

00:43:09,380 --> 00:43:15,049
currently in so I can go into contacts

00:43:12,010 --> 00:43:17,539
then animations looking a little rough I

00:43:15,049 --> 00:43:20,779
see my list of contacts I'm in the state

00:43:17,539 --> 00:43:23,150
contacts out list I can drill down into

00:43:20,779 --> 00:43:26,289
a particular contact I get the contact

00:43:23,150 --> 00:43:28,579
ID see if okay yeah so here's the URL

00:43:26,289 --> 00:43:32,500
there's a way to do it without this ugly

00:43:28,579 --> 00:43:35,630
hash but again you can drill in further

00:43:32,500 --> 00:43:37,670
and then actually edit this you'll

00:43:35,630 --> 00:43:39,500
notice that the Edit state doesn't

00:43:37,670 --> 00:43:40,849
actually have a URL so how nice that you

00:43:39,500 --> 00:43:42,380
can have states without having to have

00:43:40,849 --> 00:43:44,210
URLs for every single state that you

00:43:42,380 --> 00:43:51,619
have in your application so i can go

00:43:44,210 --> 00:43:53,329
update this and it's all very magical so

00:43:51,619 --> 00:43:57,349
that's suggest you can see things

00:43:53,329 --> 00:44:00,829
updating down here the app here and

00:43:57,349 --> 00:44:02,779
we'll switch back and this is the tree

00:44:00,829 --> 00:44:05,569
that basically describes the hierarchy

00:44:02,779 --> 00:44:07,369
of the states in the application so you

00:44:05,569 --> 00:44:09,829
have the root state which is just you

00:44:07,369 --> 00:44:14,799
know / when people initially show up at

00:44:09,829 --> 00:44:17,240
the application we redirect them home

00:44:14,799 --> 00:44:19,640
initially it's just the the simple home

00:44:17,240 --> 00:44:21,559
page and then you notice there was that

00:44:19,640 --> 00:44:24,859
contact state contacts that list in

00:44:21,559 --> 00:44:27,230
contacts detail the contact state is an

00:44:24,859 --> 00:44:28,710
ABS what's called an abstract state it's

00:44:27,230 --> 00:44:31,170
basically like an abstract class

00:44:28,710 --> 00:44:33,510
so you can attach behavior to it or use

00:44:31,170 --> 00:44:37,619
it as a way to organize organize your

00:44:33,510 --> 00:44:41,280
states and it has two parents list in

00:44:37,619 --> 00:44:43,460
detail details obviously the the contact

00:44:41,280 --> 00:44:45,359
detail view were chose email and phone

00:44:43,460 --> 00:44:48,200
then you can drill down into specific

00:44:45,359 --> 00:44:54,780
item and then actually edit that item

00:44:48,200 --> 00:44:55,710
questions so far no yes okay a couple of

00:44:54,780 --> 00:44:58,650
things that we're working on for the

00:44:55,710 --> 00:45:01,349
future are type parameters so all the

00:44:58,650 --> 00:45:02,820
things you saw there were simple

00:45:01,349 --> 00:45:05,880
parameters being pulled out of the URL

00:45:02,820 --> 00:45:07,410
so you have a contact ID and then like

00:45:05,880 --> 00:45:09,660
an ID for the particular piece of

00:45:07,410 --> 00:45:11,820
information that you want it to edit the

00:45:09,660 --> 00:45:14,220
email or the phone it was just like one

00:45:11,820 --> 00:45:16,050
and two so just simple IDs right and

00:45:14,220 --> 00:45:17,820
then you have to figure out what to

00:45:16,050 --> 00:45:19,349
actually do with those parameters you

00:45:17,820 --> 00:45:22,080
know pull them into your controller and

00:45:19,349 --> 00:45:24,330
you know call back to a service or what

00:45:22,080 --> 00:45:26,040
have you we're actually working on

00:45:24,330 --> 00:45:28,589
features where you can define a type of

00:45:26,040 --> 00:45:31,530
parameter like this type is an API

00:45:28,589 --> 00:45:33,930
resource and whenever I deserialize it

00:45:31,530 --> 00:45:36,180
I'll take the name of the parameter so I

00:45:33,930 --> 00:45:38,339
can have a parameter called users with

00:45:36,180 --> 00:45:40,560
an ID of one and actually put those two

00:45:38,339 --> 00:45:43,740
pieces of information together go call

00:45:40,560 --> 00:45:45,710
my API back-end say give me back a user

00:45:43,740 --> 00:45:48,119
and then once that user comes back

00:45:45,710 --> 00:45:50,940
initialize the state and pass that user

00:45:48,119 --> 00:45:54,119
to your controller and then finally rich

00:45:50,940 --> 00:45:56,460
transitions right now we don't because

00:45:54,119 --> 00:45:59,339
this isn't like a formal you know finite

00:45:56,460 --> 00:46:01,349
state machine you just have this tree of

00:45:59,339 --> 00:46:04,080
states and you can move from anyone to

00:46:01,349 --> 00:46:05,430
any other one sort of arbitrarily we

00:46:04,080 --> 00:46:07,530
have these events that end up becoming

00:46:05,430 --> 00:46:09,210
dumping grounds for well when I leave

00:46:07,530 --> 00:46:11,940
this state and go to the specific state

00:46:09,210 --> 00:46:17,460
you know execute this you know list of

00:46:11,940 --> 00:46:18,780
instructions so we have we we don't

00:46:17,460 --> 00:46:20,790
really have very good management for

00:46:18,780 --> 00:46:22,950
that right now so what we're working on

00:46:20,790 --> 00:46:25,619
is a transition service where you'll be

00:46:22,950 --> 00:46:27,690
actually be able to attach events that

00:46:25,619 --> 00:46:29,160
say okay if you go from any one of these

00:46:27,690 --> 00:46:31,410
states to any one of these other states

00:46:29,160 --> 00:46:33,150
and this user and saved and throw up a

00:46:31,410 --> 00:46:35,450
modal dialog that says hey you know you

00:46:33,150 --> 00:46:39,040
should probably do something about this

00:46:35,450 --> 00:46:42,790
and this

00:46:39,040 --> 00:46:44,710
is an actual application that we wrote

00:46:42,790 --> 00:46:49,900
don't worry Jeff I got permission to

00:46:44,710 --> 00:46:54,480
show this so this is a fairly large and

00:46:49,900 --> 00:46:59,920
complex application that we wrote around

00:46:54,480 --> 00:47:06,100
UI router it shows well here I'll do

00:46:59,920 --> 00:47:09,100
this beta epics whoa calm it shows a

00:47:06,100 --> 00:47:11,500
whole bunch of movies and then you can

00:47:09,100 --> 00:47:13,300
actually like let's say you know jack

00:47:11,500 --> 00:47:16,360
ryan that looks pretty cool I can

00:47:13,300 --> 00:47:18,220
transition from the list of projects to

00:47:16,360 --> 00:47:21,010
like an individual project and get this

00:47:18,220 --> 00:47:23,700
nice smooth animated transition and

00:47:21,010 --> 00:47:33,160
drill down and these are all states so

00:47:23,700 --> 00:47:35,260
if we go into states touch is so here i

00:47:33,160 --> 00:47:39,760
have this abstract state called projects

00:47:35,260 --> 00:47:43,500
that represents both this view as well

00:47:39,760 --> 00:47:46,450
as this view and then in my index state

00:47:43,500 --> 00:47:48,190
which is called main i can say okay

00:47:46,450 --> 00:47:50,650
assign this controller and this partial

00:47:48,190 --> 00:47:54,910
and then once i drill in i'm actually

00:47:50,650 --> 00:47:56,350
going to replace this entire view here

00:47:54,910 --> 00:48:00,220
with this other view that's going to

00:47:56,350 --> 00:48:01,930
show me the details for this project so

00:48:00,220 --> 00:48:04,770
that is transitioning to this state and

00:48:01,930 --> 00:48:09,130
i have the name of a project which is

00:48:04,770 --> 00:48:11,860
jack and then i can give it again a

00:48:09,130 --> 00:48:13,870
controller and a partial and then this

00:48:11,860 --> 00:48:16,630
thing called resolve where i can say ok

00:48:13,870 --> 00:48:18,730
i'll take my parameters and my model

00:48:16,630 --> 00:48:22,930
which will call back to my api and say

00:48:18,730 --> 00:48:24,580
okay i have a thing called projects

00:48:22,930 --> 00:48:26,290
which and we're doing this in a kind of

00:48:24,580 --> 00:48:29,800
hacky way because we have to fix some

00:48:26,290 --> 00:48:36,070
stuff in the API but I'm constructing

00:48:29,800 --> 00:48:39,010
URL and and passing it back to the the

00:48:36,070 --> 00:48:40,660
controller so that all my API logic and

00:48:39,010 --> 00:48:43,060
you know loading things and shunting

00:48:40,660 --> 00:48:44,380
data around is happening isolated away

00:48:43,060 --> 00:48:45,550
from the controller so that when the

00:48:44,380 --> 00:48:48,400
controller is actually doing its work

00:48:45,550 --> 00:48:50,500
can just work directly with the data so

00:48:48,400 --> 00:48:52,190
what's happening here is that it's not

00:48:50,500 --> 00:48:54,589
even going to finalize the

00:48:52,190 --> 00:48:56,930
into this state until the project is

00:48:54,589 --> 00:48:59,599
loaded so you can see like you know we

00:48:56,930 --> 00:49:02,030
have this loading thing here that waits

00:48:59,599 --> 00:49:05,450
tell all the things that state needs are

00:49:02,030 --> 00:49:09,200
loaded into the view and this is

00:49:05,450 --> 00:49:12,170
actually the the state that we're in so

00:49:09,200 --> 00:49:14,900
this outer area is in project view and

00:49:12,170 --> 00:49:24,020
this inner area is in projects top view

00:49:14,900 --> 00:49:25,220
assets and oh this got changed so i'm

00:49:24,020 --> 00:49:31,900
trying to find where the other resolve

00:49:25,220 --> 00:49:35,060
is there we go ok so again we're pulling

00:49:31,900 --> 00:49:37,579
this is all just model logic that's in

00:49:35,060 --> 00:49:39,410
the state machine itself that's pulling

00:49:37,579 --> 00:49:43,520
objects from the API for the

00:49:39,410 --> 00:49:46,670
controller's to work with and some

00:49:43,520 --> 00:49:49,940
states use for example so this is like a

00:49:46,670 --> 00:49:52,400
registration state it has a property

00:49:49,940 --> 00:49:54,829
called on enter which is a function that

00:49:52,400 --> 00:49:56,810
I can inject services to so that when a

00:49:54,829 --> 00:49:58,579
user comes and registers I can open a

00:49:56,810 --> 00:50:00,470
dialogue and then when they're done

00:49:58,579 --> 00:50:02,450
registering and I finalize the

00:50:00,470 --> 00:50:04,130
registration on the back end I can go to

00:50:02,450 --> 00:50:07,609
the index state so they can look at the

00:50:04,130 --> 00:50:09,829
projects that they came to see and it's

00:50:07,609 --> 00:50:12,950
hard to kind of show off the structure

00:50:09,829 --> 00:50:14,329
of this code in a really good way but

00:50:12,950 --> 00:50:17,089
basically it just gives me a really

00:50:14,329 --> 00:50:19,130
clean way to in one place and literally

00:50:17,089 --> 00:50:21,680
one file define the entire tree

00:50:19,130 --> 00:50:25,670
structure of my application we're coming

00:50:21,680 --> 00:50:27,859
up on time aren't we machine you have on

00:50:25,670 --> 00:50:30,530
show here do you want to leave some time

00:50:27,859 --> 00:50:32,900
for questions oh sweet huh there we go

00:50:30,530 --> 00:50:37,940
ah about now would be a good time for

00:50:32,900 --> 00:50:41,510
questions yes yes we work a lot with

00:50:37,940 --> 00:50:43,760
angular UI and I was wondering if there

00:50:41,510 --> 00:50:46,010
are some better ways to debug it because

00:50:43,760 --> 00:50:47,900
we're using debugging tools of course if

00:50:46,010 --> 00:50:51,040
you maybe have some tips and tricks for

00:50:47,900 --> 00:50:56,329
that um debugging angular UI itself

00:50:51,040 --> 00:50:59,119
anger and angular UI okay so generally

00:50:56,329 --> 00:51:00,680
debugging either you I Batarang which I

00:50:59,119 --> 00:51:02,280
showed is kind of my go-to tool for that

00:51:00,680 --> 00:51:04,590
are you using battering right now

00:51:02,280 --> 00:51:07,950
okay so yeah I would I would kind of

00:51:04,590 --> 00:51:09,780
recommend that because it gives you the

00:51:07,950 --> 00:51:11,370
ability to traverse your entire scope

00:51:09,780 --> 00:51:15,240
tree really easily and see all those

00:51:11,370 --> 00:51:16,260
values I mean is there any was in

00:51:15,240 --> 00:51:26,190
particular that you were having trouble

00:51:16,260 --> 00:51:29,370
debugging mostly scope conflicts social

00:51:26,190 --> 00:51:32,130
conflicts with ng trans clued and okay

00:51:29,370 --> 00:51:33,720
so difficult um like isolate scopes or

00:51:32,130 --> 00:51:36,930
just things over writing each other I

00:51:33,720 --> 00:51:38,520
had the latter sorry the ladders things

00:51:36,930 --> 00:51:40,470
that were running each other okay so how

00:51:38,520 --> 00:51:46,470
do you have like different UI elements

00:51:40,470 --> 00:51:47,970
like dislike so angular 1.2 has this

00:51:46,470 --> 00:51:50,010
really amazing feature called controller

00:51:47,970 --> 00:51:51,720
as where instead of just saying

00:51:50,010 --> 00:51:53,390
ng-controller equals you know home

00:51:51,720 --> 00:51:56,520
controller you can say ng-controller

00:51:53,390 --> 00:51:58,170
equals home controller as home and then

00:51:56,520 --> 00:52:00,570
everything in that scope that's from

00:51:58,170 --> 00:52:03,510
home controller you prefix with home dot

00:52:00,570 --> 00:52:05,070
and then whatever the property is so

00:52:03,510 --> 00:52:08,070
that's a really effective way of keeping

00:52:05,070 --> 00:52:18,450
things together and not conflicting with

00:52:08,070 --> 00:52:20,880
things that are unrelated okay yeah you

00:52:18,450 --> 00:52:24,120
you want to be careful with that with

00:52:20,880 --> 00:52:27,060
having a bunch of the entire page be run

00:52:24,120 --> 00:52:30,060
sorry be careful with won't with I was

00:52:27,060 --> 00:52:32,180
getting to that having your entire page

00:52:30,060 --> 00:52:33,840
kind of running as a single directive

00:52:32,180 --> 00:52:35,340
directives are very good when they're

00:52:33,840 --> 00:52:37,710
when they're isolated around a

00:52:35,340 --> 00:52:40,830
particular Dom element or like a set of

00:52:37,710 --> 00:52:42,570
feudal elements so if they're your

00:52:40,830 --> 00:52:46,250
entire page generally you'd want to look

00:52:42,570 --> 00:52:51,980
at using a controller for that instead

00:52:46,250 --> 00:52:51,980
any other questions yes here

00:52:53,380 --> 00:52:59,050
so the main thing stopping me from using

00:52:56,020 --> 00:53:01,660
something like angular would be how you

00:52:59,050 --> 00:53:05,410
handle SEO how you handle SEO the

00:53:01,660 --> 00:53:07,540
classic question seen so many answers

00:53:05,410 --> 00:53:09,730
for it and like yeah when you've got you

00:53:07,540 --> 00:53:12,670
I as your app how would you defer that

00:53:09,730 --> 00:53:15,180
to your API to serve up some static on

00:53:12,670 --> 00:53:18,700
don't two things on that first of all

00:53:15,180 --> 00:53:20,620
generally the stuff that we do is behind

00:53:18,700 --> 00:53:24,940
a login wall so it's not being indexed

00:53:20,620 --> 00:53:27,520
by you know search engines anyway so a

00:53:24,940 --> 00:53:29,260
lot of the like advanced dashboard stuff

00:53:27,520 --> 00:53:30,970
where you have graphs and things flying

00:53:29,260 --> 00:53:35,020
around like that's that's an app that's

00:53:30,970 --> 00:53:36,820
not really content so I in apps where

00:53:35,020 --> 00:53:38,830
you have both I try and segregate the

00:53:36,820 --> 00:53:41,590
two as much as possible and then in

00:53:38,830 --> 00:53:43,540
areas where they're kind of one in the

00:53:41,590 --> 00:53:45,280
same like you have a home page that has

00:53:43,540 --> 00:53:47,470
you know a bunch of content that content

00:53:45,280 --> 00:53:49,900
changes when a user logs in like that

00:53:47,470 --> 00:53:51,810
kind of thing there are a number of

00:53:49,900 --> 00:53:56,320
different tools to actually like

00:53:51,810 --> 00:53:59,740
precompile angularjs on the server using

00:53:56,320 --> 00:54:01,260
some node libraries and and you can

00:53:59,740 --> 00:54:03,910
you've probably seen articles on that

00:54:01,260 --> 00:54:06,670
it's I mean it's fairly straightforward

00:54:03,910 --> 00:54:07,750
just set up but you know you have to

00:54:06,670 --> 00:54:10,930
have knowed you have to be running on

00:54:07,750 --> 00:54:13,510
the server I'm working on a thing for

00:54:10,930 --> 00:54:16,830
that so hopefully I'll have more to

00:54:13,510 --> 00:54:16,830
report in the next couple of months

00:54:22,260 --> 00:54:27,100
one of the things I found only did you

00:54:25,390 --> 00:54:29,680
strangle on some of my hobby projects

00:54:27,100 --> 00:54:30,730
the one of the things I found is the for

00:54:29,680 --> 00:54:32,380
example there's some third-party

00:54:30,730 --> 00:54:35,080
libraries I want to use that is not

00:54:32,380 --> 00:54:36,820
compatible with angular is it the best

00:54:35,080 --> 00:54:39,790
way to just wrap them in directive or

00:54:36,820 --> 00:54:42,000
something mom like generic JavaScript

00:54:39,790 --> 00:54:44,950
library yeah something because i use the

00:54:42,000 --> 00:54:46,230
Marinette with backbone as well so some

00:54:44,950 --> 00:54:48,220
of the things that work with these

00:54:46,230 --> 00:54:51,130
apparently for Angela it just won't

00:54:48,220 --> 00:54:54,610
plugins right away so I can solve one of

00:54:51,130 --> 00:54:56,050
the practices to wrap them in directives

00:54:54,610 --> 00:54:59,050
which can be quite time-consuming

00:54:56,050 --> 00:55:01,320
sometimes yeah so two things there I

00:54:59,050 --> 00:55:04,390
mean it really depends on what it is I

00:55:01,320 --> 00:55:06,220
generally advocate people that for

00:55:04,390 --> 00:55:07,570
anything that's that's non trivial and

00:55:06,220 --> 00:55:11,140
not directly related to something

00:55:07,570 --> 00:55:12,580
angular specific i generally advocate

00:55:11,140 --> 00:55:13,930
writing like generic javascript

00:55:12,580 --> 00:55:16,630
libraries that are just you know

00:55:13,930 --> 00:55:18,820
collections of javascript objects and

00:55:16,630 --> 00:55:21,190
methods that can work in any context and

00:55:18,820 --> 00:55:23,430
then providing like specific wrappers or

00:55:21,190 --> 00:55:25,570
hoax to backbone or angular or whatever

00:55:23,430 --> 00:55:28,600
the worst part is when you have like

00:55:25,570 --> 00:55:30,730
these really really useful jquery

00:55:28,600 --> 00:55:33,130
plugins that only work with jquery and

00:55:30,730 --> 00:55:34,690
all the logic all the really valuable

00:55:33,130 --> 00:55:36,760
and useful logic is kind of wrapped up

00:55:34,690 --> 00:55:39,340
in them like stuffed into this jquery

00:55:36,760 --> 00:55:41,470
plugin so that's that's really the worst

00:55:39,340 --> 00:55:43,510
and and at that point yeah you can

00:55:41,470 --> 00:55:45,790
either write a directive or you know

00:55:43,510 --> 00:55:49,590
fork the the plug-in and like refactor

00:55:45,790 --> 00:55:49,590
it to actually be designed intelligently

00:55:55,470 --> 00:56:01,330
well I actually had one you struck a

00:55:58,150 --> 00:56:04,300
chord when you're asking about questions

00:56:01,330 --> 00:56:06,130
for persistence and messaging in HTTP ok

00:56:04,300 --> 00:56:07,900
so i don't know if you maybe care to

00:56:06,130 --> 00:56:09,910
expand a little on that as to why a

00:56:07,900 --> 00:56:12,460
persistent message isn't just a cached

00:56:09,910 --> 00:56:14,020
HTTP request ER oh gosh I don't ask

00:56:12,460 --> 00:56:17,920
deeper if I'm mentally prepared to

00:56:14,020 --> 00:56:21,970
address this without more coffee yeah so

00:56:17,920 --> 00:56:24,430
on so in terms of AP is up till now

00:56:21,970 --> 00:56:26,500
we've kind of used it as just like a way

00:56:24,430 --> 00:56:30,270
to shovel objects back and forth from

00:56:26,500 --> 00:56:33,910
the UI to the database and vice versa

00:56:30,270 --> 00:56:38,320
but yeah a lot of the power and

00:56:33,910 --> 00:56:39,640
expressiveness of HTTP comes in you know

00:56:38,320 --> 00:56:42,660
when you when you're actually using it

00:56:39,640 --> 00:56:45,390
as a messaging protocol so for example

00:56:42,660 --> 00:56:47,320
you know when you think about messages

00:56:45,390 --> 00:56:49,000
you're sending them back and forth

00:56:47,320 --> 00:56:52,240
because you want to perform some sort of

00:56:49,000 --> 00:56:55,510
transaction so in when you're performing

00:56:52,240 --> 00:56:57,990
a transaction you know let's say you

00:56:55,510 --> 00:57:00,100
know bank transfer right like you're

00:56:57,990 --> 00:57:01,180
manipulating two accounts and there's

00:57:00,100 --> 00:57:03,940
going to be some record of the

00:57:01,180 --> 00:57:05,890
transaction that's left over but there's

00:57:03,940 --> 00:57:08,560
all this ancillary data that might be

00:57:05,890 --> 00:57:11,980
relevant to you when you're designing a

00:57:08,560 --> 00:57:14,830
UI like you know how much is going to be

00:57:11,980 --> 00:57:16,570
left over this particular moment when

00:57:14,830 --> 00:57:18,310
you're doing the transaction but know

00:57:16,570 --> 00:57:19,330
that data is necessarily stored like

00:57:18,310 --> 00:57:21,250
you'll store a record of the transaction

00:57:19,330 --> 00:57:25,480
that has the mountain which counts and

00:57:21,250 --> 00:57:26,710
all that all that stuff but there's all

00:57:25,480 --> 00:57:29,260
this ancillary data which isn't really

00:57:26,710 --> 00:57:31,330
persisted anywhere and as an API

00:57:29,260 --> 00:57:33,070
designer if I'm going to get back on the

00:57:31,330 --> 00:57:34,870
soapbox as an API designer you should be

00:57:33,070 --> 00:57:37,810
thinking about how your data is going to

00:57:34,870 --> 00:57:41,080
be used by people who are consuming the

00:57:37,810 --> 00:57:44,170
service not you know not in terms of

00:57:41,080 --> 00:57:45,670
your database structure or you know

00:57:44,170 --> 00:57:48,420
what's easiest for you as an API

00:57:45,670 --> 00:57:51,190
designer because if you're actually

00:57:48,420 --> 00:57:53,650
designing a service to be useful you

00:57:51,190 --> 00:57:55,900
want somebody to be able to you know

00:57:53,650 --> 00:57:58,300
query an account and say oh hey I have

00:57:55,900 --> 00:58:00,010
this other URL that will allow you to

00:57:58,300 --> 00:58:02,590
initiate a transaction with this account

00:58:00,010 --> 00:58:04,570
and then you know post some details with

00:58:02,590 --> 00:58:06,190
the URL of another account to that

00:58:04,570 --> 00:58:08,050
account and you know have this other

00:58:06,190 --> 00:58:08,530
thing that says oh here's a transaction

00:58:08,050 --> 00:58:10,360
that has

00:58:08,530 --> 00:58:12,370
a bunch of information that's contextual

00:58:10,360 --> 00:58:14,080
to the system now that I'm not storing

00:58:12,370 --> 00:58:15,910
anywhere that you might find useful and

00:58:14,080 --> 00:58:20,080
then oh hey here's these other links to

00:58:15,910 --> 00:58:22,690
do these other things that making your

00:58:20,080 --> 00:58:25,770
messages rich enough for that particular

00:58:22,690 --> 00:58:30,280
point in time for the UI but not too

00:58:25,770 --> 00:58:32,440
right rich rich for the client and rich

00:58:30,280 --> 00:58:33,850
in terms of like this ancillary data

00:58:32,440 --> 00:58:35,440
that gets generated as part of this

00:58:33,850 --> 00:58:38,680
transaction that's not necessarily

00:58:35,440 --> 00:58:41,230
persisted anywhere it's generally

00:58:38,680 --> 00:58:43,780
thinking about how to make your API is

00:58:41,230 --> 00:58:45,640
in as useful as possible for the

00:58:43,780 --> 00:58:47,110
consumer not necessarily what's easiest

00:58:45,640 --> 00:58:49,390
for you like you should be able to

00:58:47,110 --> 00:58:57,490
change your database without affecting

00:58:49,390 --> 00:58:59,590
your API clients of the questions in

00:58:57,490 --> 00:59:03,420
which case I'd like to thank Nate ably

00:58:59,590 --> 00:59:03,420
again for his talk on angularjs

00:59:07,220 --> 00:59:10,790

YouTube URL: https://www.youtube.com/watch?v=uh6ExeXfnFg


