Title: PHP UK Conference 2014 - Marcello Duarte - Test, Transform, Refactor
Publication date: 2014-03-21
Playlist: PHP UK Conference 2014
Description: 
	Let's have a close look into the Red-Green-Refactor cycle and understand the subtleties of each step. When we go down the rabbit hole of Test Driven Design we sometimes take too big steps leading us to many failed tests we just can bring back to green without writing a lot of code. We need to take a step back and take the shrinking potion of baby steps again. This very illustrative talk, full of test and code examples, will dig into each of the steps of TDD to help you understand how to keep a sustainable pace that will lead you in the right track.
Captions: 
	00:00:05,240 --> 00:00:11,900
hello guys so this one is about learning

00:00:08,840 --> 00:00:16,920
right so we have been doing this TDD

00:00:11,900 --> 00:00:20,070
stuff since 2007 and in training people

00:00:16,920 --> 00:00:22,199
to do 3d since 2009 and the last two

00:00:20,070 --> 00:00:25,170
years have been trying to introduce the

00:00:22,199 --> 00:00:27,840
code cutters into my organization this

00:00:25,170 --> 00:00:28,320
is from the kolkata sessions what have I

00:00:27,840 --> 00:00:32,489
learned

00:00:28,320 --> 00:00:34,410
and so in ela learning in general what I

00:00:32,489 --> 00:00:36,809
have learned from it so this is a photo

00:00:34,410 --> 00:00:42,030
from our Kolkata see some smiles inner

00:00:36,809 --> 00:00:45,870
audience you're there so i'm marcelo on

00:00:42,030 --> 00:00:49,020
the square AMD on twitter i contribute

00:00:45,870 --> 00:00:50,789
to a to copy respect and I work as a

00:00:49,020 --> 00:00:54,239
head of training at a company calling

00:00:50,789 --> 00:00:55,530
Vika this is where we do the sessions

00:00:54,239 --> 00:00:58,079
our code kata

00:00:55,530 --> 00:01:01,469
if you don't know Kolkata's cata is a

00:00:58,079 --> 00:01:06,630
fancy Japanese would basically means

00:01:01,469 --> 00:01:09,200
form form because it could repetition of

00:01:06,630 --> 00:01:11,640
movements this comes from Oshawa safe

00:01:09,200 --> 00:01:13,590
everyone if you want your little kids if

00:01:11,640 --> 00:01:17,670
you did like karate stuff you wanted I

00:01:13,590 --> 00:01:20,909
did a little much Carter now but oh it's

00:01:17,670 --> 00:01:23,100
like white belt or something but we had

00:01:20,909 --> 00:01:25,979
to repeat some movements until you learn

00:01:23,100 --> 00:01:28,140
the sequences of movies or at least you

00:01:25,979 --> 00:01:30,930
have seen that movie do karate Kitty

00:01:28,140 --> 00:01:32,159
stuff keeps repeating the same movements

00:01:30,930 --> 00:01:35,400
and then when is actually go to

00:01:32,159 --> 00:01:40,350
real-life situation it gets like show me

00:01:35,400 --> 00:01:42,960
how to watch the the car the same idea

00:01:40,350 --> 00:01:45,990
of the kata you repeat the same series

00:01:42,960 --> 00:01:53,360
of movements this in this cases keyboard

00:01:45,990 --> 00:01:55,920
movements and then this idea of movement

00:01:53,360 --> 00:01:58,860
imprint the forms into your subconscious

00:01:55,920 --> 00:02:00,350
so it becomes easy for you to react with

00:01:58,860 --> 00:02:04,740
those movements in a real-life situation

00:02:00,350 --> 00:02:08,450
that's a the idea of cutters so this is

00:02:04,740 --> 00:02:12,720
all in a context a part of learning is

00:02:08,450 --> 00:02:13,860
practice it and someone said someone

00:02:12,720 --> 00:02:15,330
said to me is not

00:02:13,860 --> 00:02:17,400
Rochester makes perfect it's perfect

00:02:15,330 --> 00:02:20,820
practice that makes perfect do you have

00:02:17,400 --> 00:02:24,030
that saying in English no that's some

00:02:20,820 --> 00:02:25,650
language they do so it's saying it makes

00:02:24,030 --> 00:02:27,060
sense to me it's not just you know

00:02:25,650 --> 00:02:29,370
you're practicing something if you go to

00:02:27,060 --> 00:02:32,190
work on a day and daily basis and you're

00:02:29,370 --> 00:02:34,410
doing your job for I've seen developers

00:02:32,190 --> 00:02:36,750
they present me curriculums say I've

00:02:34,410 --> 00:02:38,520
been doing programming for 15 years and

00:02:36,750 --> 00:02:40,760
Wow let's get this guy in less entry

00:02:38,520 --> 00:02:44,730
let's interview him and it's absolutely

00:02:40,760 --> 00:02:46,800
horrendous so he's been doing this work

00:02:44,730 --> 00:02:50,190
on a day to day basis for 15 years and

00:02:46,800 --> 00:02:52,110
he's completely cracked at his craft so

00:02:50,190 --> 00:02:55,020
it's not practice that makes you a

00:02:52,110 --> 00:02:59,430
better developer or anything you have to

00:02:55,020 --> 00:03:00,540
practice in a particular way so there's

00:02:59,430 --> 00:03:02,220
this thing called deliberate practice

00:03:00,540 --> 00:03:05,250
have you heard of deliberate practice

00:03:02,220 --> 00:03:09,060
yes so it's you practice something

00:03:05,250 --> 00:03:12,180
deliberately and what are you doing

00:03:09,060 --> 00:03:14,489
there in that practice you're not going

00:03:12,180 --> 00:03:16,800
to use for anything so it's a throwaway

00:03:14,489 --> 00:03:18,630
task you practice something and then you

00:03:16,800 --> 00:03:20,760
throw gonna being it deletes everything

00:03:18,630 --> 00:03:22,560
at the end of it and you practice merely

00:03:20,760 --> 00:03:27,120
for the sake of getting better what you

00:03:22,560 --> 00:03:29,670
do right so if you play the guitar

00:03:27,120 --> 00:03:31,410
I played it a little bit so you have to

00:03:29,670 --> 00:03:33,860
be learning something new my son is

00:03:31,410 --> 00:03:37,709
learning the the police you know that

00:03:33,860 --> 00:03:40,650
1009 linden a song released that message

00:03:37,709 --> 00:03:42,750
then about so he's learning the reef in

00:03:40,650 --> 00:03:44,790
the guitar he's suffering so much with

00:03:42,750 --> 00:03:46,620
it he was all excited in the beginning

00:03:44,790 --> 00:03:47,180
when he stopped playing it oh this is

00:03:46,620 --> 00:03:49,920
awesome

00:03:47,180 --> 00:03:54,420
but then he could never get to the end

00:03:49,920 --> 00:03:56,489
so he gets frustrated you know and then

00:03:54,420 --> 00:03:59,580
but then you once you become good at it

00:03:56,489 --> 00:04:02,820
then you feel wow I can do this it's

00:03:59,580 --> 00:04:04,140
good so you feel rewarded but that's you

00:04:02,820 --> 00:04:05,850
know that practice that is a throwaway

00:04:04,140 --> 00:04:08,790
you're just repeating the same you don't

00:04:05,850 --> 00:04:10,200
even want to do it anymore just I'm

00:04:08,790 --> 00:04:13,320
gonna do something else I'm gonna play

00:04:10,200 --> 00:04:17,370
Mario Bros or something so that that's a

00:04:13,320 --> 00:04:19,169
deliberate practice so we do Qatar's

00:04:17,370 --> 00:04:22,520
catharsis a little bit as it falls into

00:04:19,169 --> 00:04:25,590
the category of deliberate practice and

00:04:22,520 --> 00:04:27,600
we in a code you do it for 20 minutes

00:04:25,590 --> 00:04:29,340
that's kind of 20 minutes practice you

00:04:27,600 --> 00:04:34,110
it's 20 minutes time box where you gonna

00:04:29,340 --> 00:04:36,150
do work on a problem and at the end of

00:04:34,110 --> 00:04:37,680
the 20 minutes I tell the developers now

00:04:36,150 --> 00:04:39,690
take your hands off the keyboard and

00:04:37,680 --> 00:04:41,100
then eat your code and they go over

00:04:39,690 --> 00:04:42,780
their heads and delete the code no you

00:04:41,100 --> 00:04:45,840
can touch it touched up with the hands

00:04:42,780 --> 00:04:47,520
and delete the code and some some of the

00:04:45,840 --> 00:04:49,830
fellas get really pissed off they have

00:04:47,520 --> 00:04:51,720
to delete the code oh I've been working

00:04:49,830 --> 00:04:53,850
for 20 minutes um why I want to continue

00:04:51,720 --> 00:04:56,310
working on it in the next 20 minutes no

00:04:53,850 --> 00:04:59,370
no you start from scratch again and the

00:04:56,310 --> 00:05:02,430
idea is that you're not really trying to

00:04:59,370 --> 00:05:05,430
solve the problem you are practicing

00:05:02,430 --> 00:05:06,360
something in that in that 20 minutes and

00:05:05,430 --> 00:05:09,900
there's something that you're practicing

00:05:06,360 --> 00:05:12,480
is not really how to create a string

00:05:09,900 --> 00:05:15,930
calculator or how to convert Roman

00:05:12,480 --> 00:05:18,420
numbers or it's not that you you're

00:05:15,930 --> 00:05:24,930
practicing the TDD rules and you're

00:05:18,420 --> 00:05:29,430
practicing the refactoring rules so so

00:05:24,930 --> 00:05:31,740
that is this test code refactor which I

00:05:29,430 --> 00:05:36,720
believe everyone familiar with that's

00:05:31,740 --> 00:05:38,250
our triangle so the the treaty rules

00:05:36,720 --> 00:05:39,870
that we say now we're gonna start up to

00:05:38,250 --> 00:05:45,180
20 minutes section in these 20 minutes

00:05:39,870 --> 00:05:46,830
you not allows to write any code that is

00:05:45,180 --> 00:05:49,280
not preceded by a test you're not

00:05:46,830 --> 00:05:52,380
allowed to do that the next 20 minutes

00:05:49,280 --> 00:05:55,200
you're not allowed to sucker you can

00:05:52,380 --> 00:05:58,680
circuit work but in this 20 minutes here

00:05:55,200 --> 00:06:00,780
you're gonna write a test first you're

00:05:58,680 --> 00:06:02,490
not even the goal here is not to solve

00:06:00,780 --> 00:06:05,580
the problem you go here's to practice

00:06:02,490 --> 00:06:07,170
this and then you're gonna write just

00:06:05,580 --> 00:06:12,530
enough tests together

00:06:07,170 --> 00:06:15,780
I read Oh a failure and once you do that

00:06:12,530 --> 00:06:18,510
then you allow to write code but just

00:06:15,780 --> 00:06:22,590
enough to get a green stage and then you

00:06:18,510 --> 00:06:24,150
have to refactor but the TDD rules

00:06:22,590 --> 00:06:25,320
doesn't say anything about the fact

00:06:24,150 --> 00:06:29,220
there's not nothing about refactoring

00:06:25,320 --> 00:06:32,970
here right that's only about the test

00:06:29,220 --> 00:06:35,490
phase which is no code without tests and

00:06:32,970 --> 00:06:38,669
just enough to get read so these are

00:06:35,490 --> 00:06:40,090
related to the test stage and to the

00:06:38,669 --> 00:06:43,020
code stage

00:06:40,090 --> 00:06:45,790
you have just enough to get it green so

00:06:43,020 --> 00:06:47,710
if you look at the TDD rules and you get

00:06:45,790 --> 00:06:50,350
people to start practicing to do with

00:06:47,710 --> 00:06:52,449
the TDD rules they start getting too

00:06:50,350 --> 00:06:55,780
into some bad habits if you just give

00:06:52,449 --> 00:06:58,630
them the TDD rules which is they do not

00:06:55,780 --> 00:07:02,620
refactor anybody not familiar with the

00:06:58,630 --> 00:07:05,650
ping pong model of pepra gramming yes so

00:07:02,620 --> 00:07:07,150
it's very competitive so you put two

00:07:05,650 --> 00:07:09,550
developers to work together on a problem

00:07:07,150 --> 00:07:11,740
then you say when once you get to the

00:07:09,550 --> 00:07:14,229
failing test you allow to give the

00:07:11,740 --> 00:07:15,639
keyboard to the other guy so the guy

00:07:14,229 --> 00:07:16,690
gets a failing test and he gives the

00:07:15,639 --> 00:07:18,100
keyboard to the other guy who has to

00:07:16,690 --> 00:07:19,389
make the test passed and then write

00:07:18,100 --> 00:07:22,030
another test and give back to the other

00:07:19,389 --> 00:07:24,400
developer so that's cool but then they

00:07:22,030 --> 00:07:26,290
stop refactoring because they get their

00:07:24,400 --> 00:07:27,550
competitors want to give their keyboard

00:07:26,290 --> 00:07:28,900
to the other guy and make it pass and

00:07:27,550 --> 00:07:30,880
not run another test give to the guy

00:07:28,900 --> 00:07:34,210
what's the refactoring it's no

00:07:30,880 --> 00:07:38,770
refactoring so after while the code is

00:07:34,210 --> 00:07:40,479
just growing and nobody ah it's not on

00:07:38,770 --> 00:07:43,080
my hands anymore it's in his hands I

00:07:40,479 --> 00:07:45,970
don't care doesn't doesn't really help

00:07:43,080 --> 00:07:48,400
so we did ping-pong some times and had

00:07:45,970 --> 00:07:51,639
the rule if the guy that you passed in

00:07:48,400 --> 00:07:53,440
the keyboard to it's not happy with the

00:07:51,639 --> 00:07:55,510
level of refactoring the current level

00:07:53,440 --> 00:07:56,770
refactoring he can complain and say he

00:07:55,510 --> 00:07:58,690
doesn't want to keyboard and Cheerios

00:07:56,770 --> 00:08:00,250
refactored so we add that into the

00:07:58,690 --> 00:08:01,720
ping-pong Pro if they want to do

00:08:00,250 --> 00:08:04,229
ping-pong they can do ping-pong but they

00:08:01,720 --> 00:08:07,419
have to use this rule that make sense

00:08:04,229 --> 00:08:10,389
okay and then we introduced the four

00:08:07,419 --> 00:08:12,700
rules of simple design so something was

00:08:10,389 --> 00:08:14,680
missing which is the refactoring phase I

00:08:12,700 --> 00:08:18,720
can't back talks about the four rules of

00:08:14,680 --> 00:08:21,639
simple design yeah you heard about it

00:08:18,720 --> 00:08:25,060
some some some heads like this some of

00:08:21,639 --> 00:08:27,550
you so it's basically some rules to

00:08:25,060 --> 00:08:29,020
regulate refactoring to guide you what

00:08:27,550 --> 00:08:31,300
what is it that you had to focus next if

00:08:29,020 --> 00:08:32,919
you're going to refactor your code first

00:08:31,300 --> 00:08:36,159
thing you're gonna do when you refactor

00:08:32,919 --> 00:08:40,450
is make sure that all tests are running

00:08:36,159 --> 00:08:42,219
and passing okay if your code is not

00:08:40,450 --> 00:08:45,490
covered with tests there is no

00:08:42,219 --> 00:08:47,470
refactoring right no it's not possible

00:08:45,490 --> 00:08:49,600
to refactor code there's not called by

00:08:47,470 --> 00:08:51,850
tests at the end of chapter one of the

00:08:49,600 --> 00:08:53,540
refactoring book Martin Fowler says and

00:08:51,850 --> 00:08:56,480
are you only started saying

00:08:53,540 --> 00:08:58,339
you have a suite of tests covering all

00:08:56,480 --> 00:09:02,990
your code and then again sub refactoring

00:08:58,339 --> 00:09:05,029
so no refactoring without tests and and

00:09:02,990 --> 00:09:06,889
then now so this also means that you

00:09:05,029 --> 00:09:08,600
know you're you're not seeing any smells

00:09:06,889 --> 00:09:12,139
on your tests you know seeing your tests

00:09:08,600 --> 00:09:14,449
expressive and you you know you don't

00:09:12,139 --> 00:09:18,470
have many assertions in in that test

00:09:14,449 --> 00:09:20,420
case you're just single surgeons and you

00:09:18,470 --> 00:09:23,240
look for test smells and then you look

00:09:20,420 --> 00:09:26,269
for repetition smells repetition smells

00:09:23,240 --> 00:09:28,940
is you know don't repeat yourself is are

00:09:26,269 --> 00:09:31,069
you missing a concept in your domain so

00:09:28,940 --> 00:09:33,980
when you say when you see yourself

00:09:31,069 --> 00:09:35,569
writing the same code twice that

00:09:33,980 --> 00:09:36,949
indicates that you missing a concept in

00:09:35,569 --> 00:09:39,649
your domain you're not capturing it and

00:09:36,949 --> 00:09:41,000
putting somewhere and and this is the

00:09:39,649 --> 00:09:42,920
worst scene you can commit when you're

00:09:41,000 --> 00:09:45,279
writing code that's so repetition

00:09:42,920 --> 00:09:48,980
repetition is the mother of all smells

00:09:45,279 --> 00:09:52,190
if you don't capture your concept if you

00:09:48,980 --> 00:09:53,240
don't protect your value objects this

00:09:52,190 --> 00:09:55,519
will come and haunt you

00:09:53,240 --> 00:09:57,139
so that's the first thing you have to do

00:09:55,519 --> 00:09:59,540
don't repeat yourself if you do any

00:09:57,139 --> 00:10:02,839
repetition you capture it and you get

00:09:59,540 --> 00:10:06,410
rid of it next thing you're gonna do is

00:10:02,839 --> 00:10:09,769
make sure that your code is very

00:10:06,410 --> 00:10:12,410
expressive right remove all opacity and

00:10:09,769 --> 00:10:15,050
the fourth rule simple design is that if

00:10:12,410 --> 00:10:18,440
you have become too obsessive about

00:10:15,050 --> 00:10:20,449
refactoring and gone too much down the

00:10:18,440 --> 00:10:22,190
line and you create too many classes and

00:10:20,449 --> 00:10:23,990
too many methods then you look back at

00:10:22,190 --> 00:10:26,420
it and it's you is anything I can

00:10:23,990 --> 00:10:29,329
simplify and you simplify back so design

00:10:26,420 --> 00:10:31,190
is a crazy activity sitting next to a

00:10:29,329 --> 00:10:33,319
guy who's a designer and you're just a

00:10:31,190 --> 00:10:36,380
junior developer you're gonna go insane

00:10:33,319 --> 00:10:38,480
because a senior developer will make a

00:10:36,380 --> 00:10:41,449
decision today and change his mind

00:10:38,480 --> 00:10:45,290
tomorrow and that's absolutely normal if

00:10:41,449 --> 00:10:46,880
you're if you know your craft it's okay

00:10:45,290 --> 00:10:49,639
to change your mind yeah and you only

00:10:46,880 --> 00:10:53,389
refactor you only stop refactoring when

00:10:49,639 --> 00:10:58,550
the last user dies so it's always as an

00:10:53,389 --> 00:11:00,920
eternal activity so one example of a

00:10:58,550 --> 00:11:02,420
problem that we give is the roman

00:11:00,920 --> 00:11:04,939
numbers guitar so the goal of this

00:11:02,420 --> 00:11:05,660
guitar is to convert Rome the Arabic

00:11:04,939 --> 00:11:10,370
numbers

00:11:05,660 --> 00:11:13,820
to Roman numeral so basically you given

00:11:10,370 --> 00:11:16,960
an input like like this one and then you

00:11:13,820 --> 00:11:20,450
you have to output something like that

00:11:16,960 --> 00:11:23,330
okay so if you follow the TDD rules you

00:11:20,450 --> 00:11:25,630
write some test make it read and then

00:11:23,330 --> 00:11:28,700
make it green and then make it right

00:11:25,630 --> 00:11:33,170
okay so I'm going to show to you how to

00:11:28,700 --> 00:11:34,250
do it wrongly so some of the partner if

00:11:33,170 --> 00:11:36,500
you're ever going to speak on a

00:11:34,250 --> 00:11:38,090
conference if you haven't yet what are

00:11:36,500 --> 00:11:40,250
you gonna do it when it comes to the

00:11:38,090 --> 00:11:42,230
demo you demo something that is supposed

00:11:40,250 --> 00:11:43,760
to go wrong then your demo never it's

00:11:42,230 --> 00:11:45,200
never gonna go wrong because your demo

00:11:43,760 --> 00:11:54,020
something that's supposed to go wrong

00:11:45,200 --> 00:11:59,270
anyway so I'm gonna show to you a at the

00:11:54,020 --> 00:12:00,880
meter to display so let's go here I have

00:11:59,270 --> 00:12:06,190
an empty can you see where I'm seeing

00:12:00,880 --> 00:12:10,270
yes you're very quiet today

00:12:06,190 --> 00:12:11,960
you're tired it's been intense two days

00:12:10,270 --> 00:12:13,730
all right cool

00:12:11,960 --> 00:12:19,100
is it okay at the back can you see it

00:12:13,730 --> 00:12:24,140
all right there yes good so I'm gonna

00:12:19,100 --> 00:12:26,360
start a code kata I'm describing a Roman

00:12:24,140 --> 00:12:29,720
numeral so I'm gonna start my test to

00:12:26,360 --> 00:12:31,610
say PHP spec well actually this is empty

00:12:29,720 --> 00:12:33,830
so I need to bhp spec here so I'm just

00:12:31,610 --> 00:12:38,690
gonna bring Beatrice back in I'm gonna

00:12:33,830 --> 00:12:45,080
say which piece back describe a Roman

00:12:38,690 --> 00:12:50,180
numeral number all Converter

00:12:45,080 --> 00:12:52,660
yeah it's good name okay so if I run my

00:12:50,180 --> 00:12:52,660
tests

00:12:55,010 --> 00:12:58,310
since they're the class doesn't exist

00:12:56,720 --> 00:13:02,300
create the class run the test again and

00:12:58,310 --> 00:13:08,860
then back to drain and I'm going here on

00:13:02,300 --> 00:13:12,410
my editor project and I have this test

00:13:08,860 --> 00:13:14,630
that's useless and he's gonna create a

00:13:12,410 --> 00:13:18,320
new one and what's the first thing he

00:13:14,630 --> 00:13:26,480
does it so I'm doing this wrongly okay

00:13:18,320 --> 00:13:30,910
some eight converts Roman to Arabic - no

00:13:26,480 --> 00:13:32,720
Arabic - Roman

00:13:30,910 --> 00:13:34,060
okay I'm gonna solve the whole problem

00:13:32,720 --> 00:13:42,829
in one test

00:13:34,060 --> 00:13:51,699
today's convert one simple thing I can

00:13:42,829 --> 00:13:51,699
think is one and shoot should we turn

00:13:52,630 --> 00:14:00,920
should return what one right if you go

00:13:58,519 --> 00:14:03,170
back there run the test create the

00:14:00,920 --> 00:14:06,199
matter to run the tests and it doesn't

00:14:03,170 --> 00:14:07,519
pass because it's not returning one I'm

00:14:06,199 --> 00:14:16,250
gonna solve this problem very quickly

00:14:07,519 --> 00:14:20,930
and then gonna return one yeah we're

00:14:16,250 --> 00:14:28,249
done I can go home

00:14:20,930 --> 00:14:31,129
so another test converts our avatar now

00:14:28,249 --> 00:14:33,170
I already have that name so I'm gonna do

00:14:31,129 --> 00:14:38,389
another session day because it's the

00:14:33,170 --> 00:14:41,209
same thing ever converts to what Uncle

00:14:38,389 --> 00:14:43,600
Bob would Uncle Bob does that too he

00:14:41,209 --> 00:14:48,649
puts all their sessions in the same

00:14:43,600 --> 00:14:52,759
ankle Babu can I can so it's red it says

00:14:48,649 --> 00:14:54,529
a expected to got one I know why I know

00:14:52,759 --> 00:15:02,449
why because it's easier one

00:14:54,529 --> 00:15:09,410
so if argument is two then I'm gonna

00:15:02,449 --> 00:15:12,019
return to right good I'm good to go

00:15:09,410 --> 00:15:13,639
it's working so stop for refactoring

00:15:12,019 --> 00:15:17,660
because the old and wise told me that

00:15:13,639 --> 00:15:29,179
should be factored let's go the factory

00:15:17,660 --> 00:15:32,420
name and Arabic okay are good another

00:15:29,179 --> 00:15:36,639
one is what's the next thing next

00:15:32,420 --> 00:15:36,639
logical thing is gonna be three for sure

00:15:37,179 --> 00:15:45,679
yeah after two three right makes sense

00:15:40,269 --> 00:15:50,089
so three I'm gonna go again all boy

00:15:45,679 --> 00:15:56,179
doesn't work come back there I know how

00:15:50,089 --> 00:15:58,129
to solve that it's a three this code

00:15:56,179 --> 00:15:59,809
wonderful and if you ping-pong that's

00:15:58,129 --> 00:16:03,319
what they do just get two green very

00:15:59,809 --> 00:16:08,240
quickly cool what's the next thing to do

00:16:03,319 --> 00:16:10,279
I know next thing are forced to

00:16:08,240 --> 00:16:12,019
complicate it because it has a V here

00:16:10,279 --> 00:16:14,449
and then haven't talked about V yet so

00:16:12,019 --> 00:16:16,970
I'm gonna do five and then when I have

00:16:14,449 --> 00:16:20,869
the V I'm gonna use for the four so I'm

00:16:16,970 --> 00:16:24,249
gonna run again this negative and okay

00:16:20,869 --> 00:16:30,530
if I know I know

00:16:24,249 --> 00:16:41,310
yeah because five

00:16:30,530 --> 00:16:43,590
then you see what this is going and then

00:16:41,310 --> 00:16:46,530
when you start going back and you start

00:16:43,590 --> 00:16:49,710
thinking about the algorithm it gets too

00:16:46,530 --> 00:16:57,690
light raise your hand if you've been

00:16:49,710 --> 00:17:01,260
there yes rabbit hole right that doesn't

00:16:57,690 --> 00:17:03,690
work and then and then when you go we

00:17:01,260 --> 00:17:05,220
try to solve this and then I'm gonna

00:17:03,690 --> 00:17:06,720
refactor and solve this and you spend

00:17:05,220 --> 00:17:09,990
like that all the twenty minutes trying

00:17:06,720 --> 00:17:12,350
to solve that that step yes and it

00:17:09,990 --> 00:17:15,089
cannot go back to writing test again

00:17:12,350 --> 00:17:23,130
okay so what's wrong what this doesn't

00:17:15,089 --> 00:17:29,870
work what's wrong with this okay I have

00:17:23,130 --> 00:17:29,870
to go back to my other view

00:17:32,570 --> 00:17:39,650
right sir Uncle Bob

00:17:35,570 --> 00:17:41,570
he gave recently a talk on the TPP the

00:17:39,650 --> 00:17:45,140
transformation priority premise

00:17:41,570 --> 00:17:48,530
introduced that in 2013 early 2013 but

00:17:45,140 --> 00:17:51,740
he has been talking about this a lot so

00:17:48,530 --> 00:17:58,540
basically it's introducing a new idea in

00:17:51,740 --> 00:18:02,480
the TDD steps which is the coding stage

00:17:58,540 --> 00:18:04,220
okay so it's very clear that when you

00:18:02,480 --> 00:18:06,050
when you run your test is very clear the

00:18:04,220 --> 00:18:09,230
steps that you go through you you create

00:18:06,050 --> 00:18:11,210
a a set up you go you do your range and

00:18:09,230 --> 00:18:15,410
then you do your act and then you do

00:18:11,210 --> 00:18:16,490
your assertions and then some cases if

00:18:15,410 --> 00:18:19,460
you're doing integration test you're

00:18:16,490 --> 00:18:21,200
gonna do annihilate but it's not very

00:18:19,460 --> 00:18:22,850
clear what you doing a coding stage and

00:18:21,200 --> 00:18:23,930
it's also again clear what you're doing

00:18:22,850 --> 00:18:26,390
the refactoring just follow the

00:18:23,930 --> 00:18:28,640
refactoring four steps it's very clear

00:18:26,390 --> 00:18:32,210
but what you do in a coding stage so

00:18:28,640 --> 00:18:35,540
Uncle Bob talks about transformation and

00:18:32,210 --> 00:18:39,200
he said transformation is another force

00:18:35,540 --> 00:18:42,350
in TDD so you it creates a new four so

00:18:39,200 --> 00:18:44,270
let's refactor is pushing to design and

00:18:42,350 --> 00:18:45,770
transformation is pushing to getting to

00:18:44,270 --> 00:18:47,170
drink so refactoring is pushing towards

00:18:45,770 --> 00:18:50,960
the stability could unity

00:18:47,170 --> 00:18:52,490
maintainability and there's this pool

00:18:50,960 --> 00:18:54,620
from transformation which is trying to

00:18:52,490 --> 00:18:57,200
get things done but not just trying to

00:18:54,620 --> 00:18:59,510
get things done in any way try to get

00:18:57,200 --> 00:19:01,250
things done in a way that you can

00:18:59,510 --> 00:19:02,960
progress with the algorithm and get

00:19:01,250 --> 00:19:06,410
closer to the algorithm rather than get

00:19:02,960 --> 00:19:09,620
lost in a rabbit hole okay and he

00:19:06,410 --> 00:19:11,480
compares that to playing golf and

00:19:09,620 --> 00:19:15,170
laughing because of remembering Rob Rob

00:19:11,480 --> 00:19:18,920
Whelan millions the golf joke this is

00:19:15,170 --> 00:19:21,340
the Scottish crazy golf so we had to hit

00:19:18,920 --> 00:19:24,890
the ball with the minimum amount of

00:19:21,340 --> 00:19:27,890
strikes to get to the hole so amazing

00:19:24,890 --> 00:19:30,080
sports and you put a small hole alone

00:19:27,890 --> 00:19:32,720
there there on the other hand end of the

00:19:30,080 --> 00:19:35,300
feud and put some obstacles and put some

00:19:32,720 --> 00:19:37,550
sand and put some lake and in do that

00:19:35,300 --> 00:19:40,670
one time now no 13 times you have to

00:19:37,550 --> 00:19:42,560
spend your day small ball trying to hit

00:19:40,670 --> 00:19:44,340
a small hole this is right across the

00:19:42,560 --> 00:19:46,980
other side of the world

00:19:44,340 --> 00:19:49,260
so and you had to do that with the

00:19:46,980 --> 00:19:51,690
minimum amount of strokes right so if

00:19:49,260 --> 00:19:54,510
you hit the ball with one stroke it get

00:19:51,690 --> 00:19:56,310
into the hole that's when you get your

00:19:54,510 --> 00:19:58,170
points and golf so here's the same thing

00:19:56,310 --> 00:20:01,440
we did with the transformation the goal

00:19:58,170 --> 00:20:04,800
is to get to green with a minimum amount

00:20:01,440 --> 00:20:09,750
of key strokes and on Kobol say you're

00:20:04,800 --> 00:20:10,980
playing golf so there are a bunch of

00:20:09,750 --> 00:20:13,500
transformations you can do to achieve

00:20:10,980 --> 00:20:15,510
that okay just like there are a bunch of

00:20:13,500 --> 00:20:17,420
every factoring techniques you can use

00:20:15,510 --> 00:20:21,690
extract methods

00:20:17,420 --> 00:20:23,880
extra a class or a bunch of refactoring

00:20:21,690 --> 00:20:27,230
techniques you also can think of

00:20:23,880 --> 00:20:30,210
transformations in a particular way now

00:20:27,230 --> 00:20:31,890
there is a priority element to

00:20:30,210 --> 00:20:33,360
transformation okay you're going to

00:20:31,890 --> 00:20:36,120
start with the simplest transformation

00:20:33,360 --> 00:20:38,790
and then go to the bigger transformation

00:20:36,120 --> 00:20:40,620
and that's the trick because if you

00:20:38,790 --> 00:20:43,440
follow these and sometimes it's not

00:20:40,620 --> 00:20:45,900
really intuitive it doesn't make sense

00:20:43,440 --> 00:20:48,120
but if you follow these you see the

00:20:45,900 --> 00:20:51,000
algorithm starts revealing itself to you

00:20:48,120 --> 00:20:52,710
it's very interesting and there's a

00:20:51,000 --> 00:20:55,020
reason for that Uncle Bob does not talk

00:20:52,710 --> 00:20:57,120
about that but I can't I was thinking

00:20:55,020 --> 00:21:00,420
about what he was doing and it really

00:20:57,120 --> 00:21:02,250
much remind me of when I study my

00:21:00,420 --> 00:21:05,130
calculus at the University you know the

00:21:02,250 --> 00:21:07,230
mathematic induction process so if it's

00:21:05,130 --> 00:21:10,350
true for and and it's true for n plus 1

00:21:07,230 --> 00:21:13,560
it's a very similar rationale so you

00:21:10,350 --> 00:21:16,650
start with a very simple case so there's

00:21:13,560 --> 00:21:19,530
one before this one which is avoid too

00:21:16,650 --> 00:21:20,820
new or nothing to our and address on to

00:21:19,530 --> 00:21:22,800
nobody in PHP does make any sense

00:21:20,820 --> 00:21:24,240
because in PHP all functions that

00:21:22,800 --> 00:21:27,240
doesn't return anything will return null

00:21:24,240 --> 00:21:29,940
so the first transformation for us is to

00:21:27,240 --> 00:21:32,670
transform node to a constant and a

00:21:29,940 --> 00:21:35,040
constant means add value so you're

00:21:32,670 --> 00:21:37,470
returning that hotpot had called value

00:21:35,040 --> 00:21:40,080
like I did in the first test I've

00:21:37,470 --> 00:21:42,000
returned the I valine

00:21:40,080 --> 00:21:43,980
so I was not returning anything and I

00:21:42,000 --> 00:21:47,280
converted that I transform it to return

00:21:43,980 --> 00:21:50,040
I so that's the very basic

00:21:47,280 --> 00:21:54,830
transformation the next one you do is to

00:21:50,040 --> 00:21:54,830
constant to a constant plus or some more

00:21:56,400 --> 00:22:05,220
it's like a elaborated constant so it

00:22:00,870 --> 00:22:09,299
may be an expression and then you can

00:22:05,220 --> 00:22:13,350
convert a conscious to scalers specific

00:22:09,299 --> 00:22:16,289
values in this case a variable so you

00:22:13,350 --> 00:22:18,720
can create a temporary variable within

00:22:16,289 --> 00:22:22,110
your method and that's a transformation

00:22:18,720 --> 00:22:24,870
that we hand the value as you see this

00:22:22,110 --> 00:22:26,789
in a minute you can also convert a

00:22:24,870 --> 00:22:28,320
statement to more than one statement and

00:22:26,789 --> 00:22:31,020
that's a simpler transformation than

00:22:28,320 --> 00:22:33,809
creating as I go a guard clause or any

00:22:31,020 --> 00:22:35,220
condition a next thing you're going to

00:22:33,809 --> 00:22:39,059
do is to convert the dose series of

00:22:35,220 --> 00:22:41,039
statements to if if conditions and this

00:22:39,059 --> 00:22:43,919
is the magic one when you see yourself

00:22:41,039 --> 00:22:46,830
converting a condition to a loop you're

00:22:43,919 --> 00:22:53,240
really very close to crack on on the on

00:22:46,830 --> 00:22:58,049
the algorithm so this week we lost Jim

00:22:53,240 --> 00:23:00,570
anybody knows Jim yeah okay you won't

00:22:58,049 --> 00:23:03,779
come here all the Rubies guys are y'all

00:23:00,570 --> 00:23:07,110
come here dumb don't be scared we we

00:23:03,779 --> 00:23:10,679
don't eat you so that he's from the Ruby

00:23:07,110 --> 00:23:12,179
community and many of us III know I do

00:23:10,679 --> 00:23:15,090
use a lot of his tools

00:23:12,179 --> 00:23:18,110
he's responsible for rake and he was

00:23:15,090 --> 00:23:21,960
also in a team who creates the ruby gems

00:23:18,110 --> 00:23:24,600
passed away last week and he did the

00:23:21,960 --> 00:23:28,799
coding guitar which are gonna show you

00:23:24,600 --> 00:23:33,620
too now but in the PHP version of the

00:23:28,799 --> 00:23:38,610
Roman numerals okay so we start with a a

00:23:33,620 --> 00:23:41,460
test and the first testing is from

00:23:38,610 --> 00:23:43,830
Arabic so I'm starting from the zero

00:23:41,460 --> 00:23:45,390
case what I'm choosing the 0 case this

00:23:43,830 --> 00:23:49,049
is going to return a constant a very

00:23:45,390 --> 00:23:51,809
simple constant and it eliminates a very

00:23:49,049 --> 00:23:54,750
basic scenario which is the most simple

00:23:51,809 --> 00:23:56,640
scenario which is used passing 0 and

00:23:54,750 --> 00:23:58,799
that's just gonna create me give me

00:23:56,640 --> 00:24:00,990
opportunity to create all the elements

00:23:58,799 --> 00:24:03,419
that are needing my system this is also

00:24:00,990 --> 00:24:05,940
called a walking skeleton so if you

00:24:03,419 --> 00:24:10,350
think about a project this is what you

00:24:05,940 --> 00:24:11,730
do if you are on the spring 0 if you

00:24:10,350 --> 00:24:14,940
street one if you're starting a project

00:24:11,730 --> 00:24:16,080
you want your feature to to take you're

00:24:14,940 --> 00:24:17,580
going to build a small part of your

00:24:16,080 --> 00:24:19,049
future but you want to make sure that

00:24:17,580 --> 00:24:22,470
all the basic elements of your

00:24:19,049 --> 00:24:23,730
boundaries are there okay and then

00:24:22,470 --> 00:24:29,059
you're gonna increment on that rather

00:24:23,730 --> 00:24:31,559
than in I do call it its incremental

00:24:29,059 --> 00:24:32,010
rather than stacking things on top of

00:24:31,559 --> 00:24:34,169
each other

00:24:32,010 --> 00:24:35,700
you're not gonna deliver this bunch of

00:24:34,169 --> 00:24:39,650
feature then add more features on it

00:24:35,700 --> 00:24:42,570
you're gonna create a very translucent

00:24:39,650 --> 00:24:44,640
version of your system and then engross

00:24:42,570 --> 00:24:46,049
it okay so that's called a walking

00:24:44,640 --> 00:24:47,280
skeleton and then you do that for tests

00:24:46,049 --> 00:24:48,840
as well you write a test that's gonna

00:24:47,280 --> 00:24:50,400
help give you the chance to write all

00:24:48,840 --> 00:24:54,000
the the things that you need together

00:24:50,400 --> 00:24:56,130
your system going so that's walking

00:24:54,000 --> 00:24:59,039
skeleton and then you run your tests

00:24:56,130 --> 00:25:00,780
first first time and you you know that's

00:24:59,039 --> 00:25:03,059
gonna tell tell the class doesn't exist

00:25:00,780 --> 00:25:04,980
and in the method doesn't exist and you

00:25:03,059 --> 00:25:06,179
create that for you or if using a proper

00:25:04,980 --> 00:25:13,169
tool you that the two will create that

00:25:06,179 --> 00:25:15,360
for you what and then you look at your

00:25:13,169 --> 00:25:18,929
class of course your class is empty and

00:25:15,360 --> 00:25:21,539
then you have red which gives you the

00:25:18,929 --> 00:25:25,470
chance to write code red means you

00:25:21,539 --> 00:25:27,120
allowed to write code and then the first

00:25:25,470 --> 00:25:28,919
transformation comes in said that you

00:25:27,120 --> 00:25:31,799
were going to transform the null the

00:25:28,919 --> 00:25:35,370
test is saying hey we're expecting a

00:25:31,799 --> 00:25:38,370
value and you've got no so what's the

00:25:35,370 --> 00:25:39,320
transformation now to constant make

00:25:38,370 --> 00:25:42,330
sense

00:25:39,320 --> 00:25:46,710
so that's the first transformation no to

00:25:42,330 --> 00:25:50,070
constant so I'm gonna put value there

00:25:46,710 --> 00:25:54,770
and then go back to green and then my

00:25:50,070 --> 00:25:59,070
next test is one should return one and

00:25:54,770 --> 00:26:01,679
then I run my test I get red I transform

00:25:59,070 --> 00:26:04,470
and now you're gonna see that I have an

00:26:01,679 --> 00:26:04,919
if clause okay I have introduced an if

00:26:04,470 --> 00:26:09,809
course

00:26:04,919 --> 00:26:12,059
so that's unconditional two if okay I

00:26:09,809 --> 00:26:13,890
didn't have anything better to do I saw

00:26:12,059 --> 00:26:15,299
I skipped a few transformation that was

00:26:13,890 --> 00:26:20,240
the best thing I could do it is at this

00:26:15,299 --> 00:26:20,240
point I look at that

00:26:20,539 --> 00:26:26,509
okay I'm thinking now my next what's my

00:26:23,899 --> 00:26:31,190
next test so I think I'm gonna go with

00:26:26,509 --> 00:26:34,820
two so it returns two for two I think

00:26:31,190 --> 00:26:38,119
that's gonna help me I see a pattern

00:26:34,820 --> 00:26:39,529
here 1 & 2 they kind of build on each

00:26:38,119 --> 00:26:45,079
other could build on each other but I'm

00:26:39,529 --> 00:26:47,749
gonna start with a very simple either

00:26:45,079 --> 00:26:50,929
not the statement there so I'm gonna do

00:26:47,749 --> 00:26:56,419
a trick here in PHP now you have a

00:26:50,929 --> 00:26:58,249
string repeat okay so I'm using the

00:26:56,419 --> 00:27:02,019
number that comes in and I'm repeating

00:26:58,249 --> 00:27:05,239
the number as many times as I have eyes

00:27:02,019 --> 00:27:07,219
okay so I'm converting a statement into

00:27:05,239 --> 00:27:10,269
another statement which a more complex

00:27:07,219 --> 00:27:14,119
statement and then I'm going out to the

00:27:10,269 --> 00:27:15,379
five okay I don't think I'm gonna learn

00:27:14,119 --> 00:27:17,869
anything with the tree it's gonna give

00:27:15,379 --> 00:27:19,639
me the same result with the - I'm not

00:27:17,869 --> 00:27:23,839
ready for the four yet so I'm gonna go

00:27:19,639 --> 00:27:25,579
for the five she has a simpler case so

00:27:23,839 --> 00:27:32,269
if I run that I get of course to get

00:27:25,579 --> 00:27:34,419
five eyes which is not ramen and for run

00:27:32,269 --> 00:27:38,809
I look at my code how I'm gonna do that

00:27:34,419 --> 00:27:41,329
I'm gonna create another if okay which

00:27:38,809 --> 00:27:43,599
is gonna look like this and I feel

00:27:41,329 --> 00:27:46,039
uncomfortable about it first I'm

00:27:43,599 --> 00:27:51,889
thinking is that anything I can do about

00:27:46,039 --> 00:27:53,779
this not sure yet so I can can skip the

00:27:51,889 --> 00:27:55,879
transformation and then keep going to

00:27:53,779 --> 00:27:59,149
six I think if I do six

00:27:55,879 --> 00:28:01,999
I can stop I can start go in a direction

00:27:59,149 --> 00:28:07,759
of Mogga rhythm have something in my

00:28:01,999 --> 00:28:11,589
head so good six again six eyes and

00:28:07,759 --> 00:28:13,789
that's not quite what I wants so a

00:28:11,589 --> 00:28:15,289
little bit of refactoring so that pushes

00:28:13,789 --> 00:28:17,149
me into the idea that there's something

00:28:15,289 --> 00:28:18,889
wrong with the design when when you see

00:28:17,149 --> 00:28:21,349
the repetition on your code it's time to

00:28:18,889 --> 00:28:24,079
go back and wear the the design hat and

00:28:21,349 --> 00:28:26,209
that's when you refactor okay so a time

00:28:24,079 --> 00:28:27,769
to transform is when you're trying to

00:28:26,209 --> 00:28:30,109
get to the easiest way to make your

00:28:27,769 --> 00:28:32,539
tests fast in a territory factories when

00:28:30,109 --> 00:28:33,260
you feel you struggling choosing your

00:28:32,539 --> 00:28:35,330
tests

00:28:33,260 --> 00:28:36,530
and it's time to reflect when it's hard

00:28:35,330 --> 00:28:41,180
to write a test you have to refactor

00:28:36,530 --> 00:28:43,010
your code okay it's an indicator so for

00:28:41,180 --> 00:28:45,230
now I'm gonna just comment throughout my

00:28:43,010 --> 00:28:47,990
test number six and which respect is

00:28:45,230 --> 00:28:49,790
nice and say hey if you comment your

00:28:47,990 --> 00:28:51,740
test it's gonna I'm gonna make it yellow

00:28:49,790 --> 00:28:55,120
you know that's right I'm not like all

00:28:51,740 --> 00:28:55,120
the tools they're gonna make it rain so

00:28:55,570 --> 00:28:59,720
you get here I'm going to go to my test

00:28:58,280 --> 00:29:01,820
now I'm gonna look at the cool how am I

00:28:59,720 --> 00:29:03,440
gonna introduce the six here and I'm

00:29:01,820 --> 00:29:05,570
gonna introduce a temporary variable

00:29:03,440 --> 00:29:07,750
maybe and you remember temporary

00:29:05,570 --> 00:29:11,410
variable is another transformation

00:29:07,750 --> 00:29:14,630
that's very very useful so that not only

00:29:11,410 --> 00:29:16,340
help me refactor my code also captures a

00:29:14,630 --> 00:29:18,290
concept that was missing in my domain

00:29:16,340 --> 00:29:21,440
which is the Roman that I'm returning

00:29:18,290 --> 00:29:24,170
I put a name into it it helps me see the

00:29:21,440 --> 00:29:27,040
different places where he appears so now

00:29:24,170 --> 00:29:30,020
if i uncomment my test and running again

00:29:27,040 --> 00:29:36,230
it will pass and the reason why it will

00:29:30,020 --> 00:29:42,640
pass is because I am concatenating other

00:29:36,230 --> 00:29:42,640
odd rather taking away the five and then

00:29:43,690 --> 00:29:54,620
concatenating with the 6c okay so yeah

00:29:52,160 --> 00:29:58,190
now you're taking away and then you add

00:29:54,620 --> 00:30:02,980
it to the Roman is that right what was

00:29:58,190 --> 00:30:02,980
it now it's here

00:30:03,559 --> 00:30:11,039
the never wrong order about them is

00:30:08,190 --> 00:30:13,200
lights okay buddy but the test tells me

00:30:11,039 --> 00:30:19,710
that I don't have a bug so I don't care

00:30:13,200 --> 00:30:26,010
what you say okay so now I'm gonna go

00:30:19,710 --> 00:30:28,649
for a ten so I'm go to ten and I just

00:30:26,010 --> 00:30:30,510
again I copy paste the five in a ten and

00:30:28,649 --> 00:30:37,679
this copy paste is really useful

00:30:30,510 --> 00:30:39,600
why is he useful one sorry because it

00:30:37,679 --> 00:30:41,340
yes it tells me that there's some

00:30:39,600 --> 00:30:44,010
something going on here there's there's

00:30:41,340 --> 00:30:47,130
a pattern and if the if there is a

00:30:44,010 --> 00:30:50,450
pattern here I I can think if the

00:30:47,130 --> 00:30:53,490
pattern applies to everything okay and

00:30:50,450 --> 00:30:55,860
and when you see a pattern happening

00:30:53,490 --> 00:30:57,960
what you have to do next is to try and

00:30:55,860 --> 00:31:01,230
see if you can convert conditions into

00:30:57,960 --> 00:31:03,480
loops okay and that's exactly what's

00:31:01,230 --> 00:31:05,419
gonna happen here how can I convert that

00:31:03,480 --> 00:31:07,409
condition there the top one into a loop

00:31:05,419 --> 00:31:14,850
what is the next test that I have to

00:31:07,409 --> 00:31:15,710
write anyone the first knot line nine to

00:31:14,850 --> 00:31:24,990
line 12

00:31:15,710 --> 00:31:27,990
what 20s okay so I'm gonna write one for

00:31:24,990 --> 00:31:32,220
20 and I run the test and it doesn't

00:31:27,990 --> 00:31:37,380
pass so I look at the evenness just

00:31:32,220 --> 00:31:39,210
convert that into a while and this is a

00:31:37,380 --> 00:31:42,450
great indicator that I'm in the right

00:31:39,210 --> 00:31:44,220
track of my algorithm okay look at that

00:31:42,450 --> 00:31:48,270
it's the same code I just convert that

00:31:44,220 --> 00:31:53,250
into a while and then now out of magic

00:31:48,270 --> 00:31:58,830
it passes okay I didn't I have to add

00:31:53,250 --> 00:32:02,429
another condition so I'm gonna add now I

00:31:58,830 --> 00:32:05,730
think I'm ready for for now for doesn't

00:32:02,429 --> 00:32:07,710
pass and I go look at my code and I add

00:32:05,730 --> 00:32:11,880
a copy paste for the for but you can see

00:32:07,710 --> 00:32:15,290
the same pattern pass the surges put

00:32:11,880 --> 00:32:17,270
wild everywhere and any works

00:32:15,290 --> 00:32:20,650
and I look at the last bit of code here

00:32:17,270 --> 00:32:25,340
can I convert that into the same while I

00:32:20,650 --> 00:32:27,950
could right can you see that so it's two

00:32:25,340 --> 00:32:30,460
passing I look at the last bit I convert

00:32:27,950 --> 00:32:33,770
that into a while as well the same way

00:32:30,460 --> 00:32:37,520
you see what's going on here you really

00:32:33,770 --> 00:32:38,929
there with algorithm so it passes so

00:32:37,520 --> 00:32:41,330
what I'm gonna do I'm gonna get the

00:32:38,929 --> 00:32:42,650
first while put into the for each and

00:32:41,330 --> 00:32:45,919
therefore each is going to go through

00:32:42,650 --> 00:32:48,290
the configuration which has my magic

00:32:45,919 --> 00:32:51,620
numbers so at the moment it just

00:32:48,290 --> 00:32:54,590
extracted one which is the ten case just

00:32:51,620 --> 00:32:56,120
to see if it works and it works so I'm

00:32:54,590 --> 00:33:00,890
just gonna do for all of them and remove

00:32:56,120 --> 00:33:03,470
all the repetition okay and it still

00:33:00,890 --> 00:33:06,350
passes and now I just want to make sure

00:33:03,470 --> 00:33:08,120
because I'm a bit obsessive if you just

00:33:06,350 --> 00:33:10,700
create a test with a crazy number to see

00:33:08,120 --> 00:33:17,049
if it works and just put everything

00:33:10,700 --> 00:33:17,049
there and then if it works I'm done and

00:33:17,140 --> 00:33:23,450
so that's that's the kata Beach so if

00:33:21,919 --> 00:33:26,540
you do this for a while what's gonna

00:33:23,450 --> 00:33:28,280
happen is that in and in your team some

00:33:26,540 --> 00:33:30,410
people is gonna say are not the Roman

00:33:28,280 --> 00:33:32,030
numerals again not the string

00:33:30,410 --> 00:33:33,530
calculators again let's do something new

00:33:32,030 --> 00:33:35,809
not you know all this thing you have is

00:33:33,530 --> 00:33:38,720
the same week the same thing and people

00:33:35,809 --> 00:33:43,220
going yeah so you're gonna fight some

00:33:38,720 --> 00:33:45,830
resistance and you know it is okay to

00:33:43,220 --> 00:33:48,500
create a variety when were you doing

00:33:45,830 --> 00:33:50,960
we're now doing something with a big

00:33:48,500 --> 00:33:52,429
number you have we have a problem out

00:33:50,960 --> 00:33:54,080
there were solving up for last three

00:33:52,429 --> 00:33:56,150
weeks or something that we haven't got

00:33:54,080 --> 00:33:58,460
to the end yet which is a problem you

00:33:56,150 --> 00:34:01,490
know each you have to have a very

00:33:58,460 --> 00:34:03,620
massive number and you have to add loads

00:34:01,490 --> 00:34:05,090
of massive numbers and at the end the

00:34:03,620 --> 00:34:06,770
result of the massive numbers you get

00:34:05,090 --> 00:34:09,109
the first ten numbers and display the

00:34:06,770 --> 00:34:11,030
result so of course the goal is not to

00:34:09,109 --> 00:34:14,300
solve the problem but just the thinking

00:34:11,030 --> 00:34:16,550
head that we have now applying TDD has

00:34:14,300 --> 00:34:18,020
completely shifted because we're not

00:34:16,550 --> 00:34:19,639
trying to solve the problem any more and

00:34:18,020 --> 00:34:25,580
creating new interesting problems for us

00:34:19,639 --> 00:34:28,050
and then off he he talked about cutters

00:34:25,580 --> 00:34:31,320
and deliberate practice

00:34:28,050 --> 00:34:32,880
and he was criticizing it saying that

00:34:31,320 --> 00:34:35,700
you know what's the point of doing

00:34:32,880 --> 00:34:39,210
kolkata kolkata is just something that

00:34:35,700 --> 00:34:41,010
you do for is a repetition thing you

00:34:39,210 --> 00:34:43,580
know and if you learn something through

00:34:41,010 --> 00:34:47,399
hip repetition is because you I end up

00:34:43,580 --> 00:34:49,260
very predictive environments okay so he

00:34:47,399 --> 00:34:51,240
says that if you're doing kata as a

00:34:49,260 --> 00:34:54,780
liberal practice you are optimizing for

00:34:51,240 --> 00:34:56,270
performance yeah it's like a guitar guy

00:34:54,780 --> 00:34:58,800
he's performing saying that it

00:34:56,270 --> 00:35:00,570
practising the same solo it's because

00:34:58,800 --> 00:35:05,190
he's gonna play the same solo and he

00:35:00,570 --> 00:35:07,500
goes live but we as developers if you're

00:35:05,190 --> 00:35:09,330
doing the same thing every day you

00:35:07,500 --> 00:35:11,220
should quit your job find another

00:35:09,330 --> 00:35:12,690
company to work for him because that's

00:35:11,220 --> 00:35:18,120
something wrong you don't do the same

00:35:12,690 --> 00:35:21,180
problems every day right so if you

00:35:18,120 --> 00:35:24,270
deliver practices for optimizing for

00:35:21,180 --> 00:35:26,370
performance and maximizing or variance

00:35:24,270 --> 00:35:28,980
minimizing variance so you know things

00:35:26,370 --> 00:35:30,660
that work the same way you just practice

00:35:28,980 --> 00:35:33,000
practice practice and you'll be able to

00:35:30,660 --> 00:35:36,420
control that much better and then he

00:35:33,000 --> 00:35:38,220
introduces it something else he's

00:35:36,420 --> 00:35:39,600
suggesting that better the delivery part

00:35:38,220 --> 00:35:41,880
is you'll be something like deliberate

00:35:39,600 --> 00:35:44,880
learning he says don't worry guys you

00:35:41,880 --> 00:35:46,920
can still use Japanese names is instead

00:35:44,880 --> 00:35:50,190
of using kata you gonna use : so Cohen

00:35:46,920 --> 00:35:54,390
is a concept from Zen Buddhist in which

00:35:50,190 --> 00:35:58,140
you know the design guru will give like

00:35:54,390 --> 00:36:00,870
a weird puzzle like what's the sound of

00:35:58,140 --> 00:36:02,910
a clap with one hand and then the

00:36:00,870 --> 00:36:06,480
students are gonna start thinking that

00:36:02,910 --> 00:36:09,620
there's you know this step it's not idea

00:36:06,480 --> 00:36:11,760
so it's practices that optimized for

00:36:09,620 --> 00:36:13,800
discovery because that's what we do in

00:36:11,760 --> 00:36:14,970
the daily basis you learn new things you

00:36:13,800 --> 00:36:16,380
learn about your customers you learn

00:36:14,970 --> 00:36:19,320
about your problems you learn about your

00:36:16,380 --> 00:36:21,630
domain you learn about the model and so

00:36:19,320 --> 00:36:26,010
this deliberate learning will be

00:36:21,630 --> 00:36:28,200
optimized for variance maximizing

00:36:26,010 --> 00:36:31,470
variance okay so that's an interesting

00:36:28,200 --> 00:36:33,510
idea so I talked to them at their joanna

00:36:31,470 --> 00:36:34,830
beach last year and I said you know you

00:36:33,510 --> 00:36:36,870
had to be very careful with what you're

00:36:34,830 --> 00:36:38,610
saying because you might discourage

00:36:36,870 --> 00:36:41,640
people to doing deliberate practice and

00:36:38,610 --> 00:36:45,269
I think my perception from the

00:36:41,640 --> 00:36:47,010
two years it has taken the guys many

00:36:45,269 --> 00:36:49,170
people who own the gym who didn't had

00:36:47,010 --> 00:36:51,180
the chance to practice DDD before to a

00:36:49,170 --> 00:36:55,529
level that they are now very comfortable

00:36:51,180 --> 00:36:59,190
with TDD so I think it's a very good

00:36:55,529 --> 00:37:02,099
element a very good element of learning

00:36:59,190 --> 00:37:04,859
the repetition and then the katas I

00:37:02,099 --> 00:37:06,329
think it's really good for if you

00:37:04,859 --> 00:37:08,309
haven't done an 80-degree before if

00:37:06,329 --> 00:37:10,289
you're trying to get into two DD head it

00:37:08,309 --> 00:37:12,990
really creates a muscle memory for

00:37:10,289 --> 00:37:15,240
fertility and I've seen that I think I

00:37:12,990 --> 00:37:18,809
think it's a good side effect of course

00:37:15,240 --> 00:37:21,839
if you know TDD and yukata is good for

00:37:18,809 --> 00:37:24,180
fun but you need more than that another

00:37:21,839 --> 00:37:27,690
important thing is that Curtis is not

00:37:24,180 --> 00:37:31,049
going to teach you today okay you cannot

00:37:27,690 --> 00:37:34,260
learn TDD in itself you don't learn TDD

00:37:31,049 --> 00:37:38,940
by just by doing TDD because TDD is just

00:37:34,260 --> 00:37:41,670
a way to express design so learning to

00:37:38,940 --> 00:37:43,079
do this learning that what that city can

00:37:41,670 --> 00:37:46,500
do for you you have to learn everything

00:37:43,079 --> 00:37:49,710
that is we can do for you if you know

00:37:46,500 --> 00:37:51,599
about design if you know about how to

00:37:49,710 --> 00:37:53,910
actually achieve this algorithm

00:37:51,599 --> 00:37:55,650
discovery all the things that Ikeda TDD

00:37:53,910 --> 00:37:58,019
can do you just make it the process flow

00:37:55,650 --> 00:37:59,640
it's just so a flowing mechanism and

00:37:58,019 --> 00:38:01,049
controls the fear and makes it

00:37:59,640 --> 00:38:02,490
everything is small and step and

00:38:01,049 --> 00:38:04,259
incremental but if you don't know how to

00:38:02,490 --> 00:38:08,279
design you won't be able to get benefit

00:38:04,259 --> 00:38:09,869
out of it okay so you have to learn

00:38:08,279 --> 00:38:12,450
design before you learn incremental

00:38:09,869 --> 00:38:15,960
designer emergent design and TDD is a

00:38:12,450 --> 00:38:17,250
merging design so there's a there's a

00:38:15,960 --> 00:38:18,839
book I'm reading I'm not reading the

00:38:17,250 --> 00:38:22,140
German version but this is the original

00:38:18,839 --> 00:38:27,059
one it's called my system by nimzowitsch

00:38:22,140 --> 00:38:28,410
I'm a chess lover so in this book means

00:38:27,059 --> 00:38:31,009
of each say that the beauty the beauty

00:38:28,410 --> 00:38:33,539
of a moves lies not in its appearance

00:38:31,009 --> 00:38:35,160
but in a thought behind and if you see

00:38:33,539 --> 00:38:39,029
Kasparov playing and he doesn't move

00:38:35,160 --> 00:38:42,119
like that and you go my god how did he

00:38:39,029 --> 00:38:44,460
see that this is like I think I cannot

00:38:42,119 --> 00:38:47,880
believe this a simple move I would not

00:38:44,460 --> 00:38:50,640
never have thought of it and he just not

00:38:47,880 --> 00:38:53,190
just thought of it of course he knows of

00:38:50,640 --> 00:38:54,030
it he understands the theory behind it

00:38:53,190 --> 00:38:56,130
he understands what

00:38:54,030 --> 00:38:57,510
going on in a chessboard he has a full

00:38:56,130 --> 00:38:59,550
awareness of what's going on in the

00:38:57,510 --> 00:39:01,920
board he can play without even looking

00:38:59,550 --> 00:39:03,720
at the board right so this this

00:39:01,920 --> 00:39:06,090
awareness that we need to develop we

00:39:03,720 --> 00:39:06,630
need to be aware where are we going with

00:39:06,090 --> 00:39:09,150
this

00:39:06,630 --> 00:39:10,650
I understand domain I understand what I

00:39:09,150 --> 00:39:13,110
want to achieve with this domain and

00:39:10,650 --> 00:39:15,780
know what I'm getting till it is great

00:39:13,110 --> 00:39:17,340
because it just pushes me forward but if

00:39:15,780 --> 00:39:20,160
you don't understand what you're trying

00:39:17,340 --> 00:39:23,760
to get with DD you know GD is not gonna

00:39:20,160 --> 00:39:25,200
get you anywhere you do have to learn so

00:39:23,760 --> 00:39:27,600
in this book he talks first you have to

00:39:25,200 --> 00:39:31,410
learn the elements of chess then you

00:39:27,600 --> 00:39:33,300
learn the positional play okay so how to

00:39:31,410 --> 00:39:37,280
gain control of the board

00:39:33,300 --> 00:39:41,070
and then next last thing is practice

00:39:37,280 --> 00:39:43,980
here's examples he is a successful play

00:39:41,070 --> 00:39:45,980
and it's a lot Louisville plays at his

00:39:43,980 --> 00:39:47,130
own home plays against other players

00:39:45,980 --> 00:39:48,630
okay

00:39:47,130 --> 00:39:51,960
so first you have to learn the elements

00:39:48,630 --> 00:39:53,970
of design then you learn how to drive

00:39:51,960 --> 00:39:55,800
the design with tests you do have to

00:39:53,970 --> 00:40:07,980
learn design to be able to use property

00:39:55,800 --> 00:40:10,350
duty okay so yeah also hiring and please

00:40:07,980 --> 00:40:14,820
try if you haven't preached respect and

00:40:10,350 --> 00:40:16,500
you can follow me on Twitter and there

00:40:14,820 --> 00:40:19,160
is also a training course where you can

00:40:16,500 --> 00:40:25,490
join me to hear more about these topics

00:40:19,160 --> 00:40:30,590
it's online thank you and if you have

00:40:25,490 --> 00:40:30,590
questions we have some time

00:40:33,809 --> 00:40:36,809
yes

00:40:43,890 --> 00:40:52,269
hi there just wanted to ask a question

00:40:47,410 --> 00:40:55,269
about the transform aspect yes so the

00:40:52,269 --> 00:40:58,869
way you're talking about it the test

00:40:55,269 --> 00:41:00,700
part would be defining the interface and

00:40:58,869 --> 00:41:03,130
making sure you understand that so with

00:41:00,700 --> 00:41:06,789
the transform would you view that as a

00:41:03,130 --> 00:41:11,230
rule set for building slush adopting the

00:41:06,789 --> 00:41:13,720
logic to solve the problem so that with

00:41:11,230 --> 00:41:16,450
the transform you're really trying to

00:41:13,720 --> 00:41:19,839
adapt the existing code

00:41:16,450 --> 00:41:22,440
- now satisfy the interface but with the

00:41:19,839 --> 00:41:24,029
minimum effort and falling a priority

00:41:22,440 --> 00:41:27,160
list

00:41:24,029 --> 00:41:29,950
simple transformations first and more

00:41:27,160 --> 00:41:33,789
complex transformation later okay so

00:41:29,950 --> 00:41:36,880
it's like you think about the in the

00:41:33,789 --> 00:41:39,760
project scale you also have the same

00:41:36,880 --> 00:41:42,010
forces so like scrum right you have the

00:41:39,760 --> 00:41:44,619
business so the business says out

00:41:42,010 --> 00:41:46,269
features more features out quickly and

00:41:44,619 --> 00:41:49,059
then the scrum master is saying

00:41:46,269 --> 00:41:51,069
sustainability keep the flow in

00:41:49,059 --> 00:41:53,650
optimized follow the values agile values

00:41:51,069 --> 00:41:55,960
you know don't work with extra hours

00:41:53,650 --> 00:41:58,269
then just maintain and then the team

00:41:55,960 --> 00:41:59,710
producing producing producing so you

00:41:58,269 --> 00:42:05,619
have the three elements into D D as well

00:41:59,710 --> 00:42:08,799
okay so you have the the test which is

00:42:05,619 --> 00:42:11,740
hoping for features say I want but

00:42:08,799 --> 00:42:15,029
please write this feature for me I want

00:42:11,740 --> 00:42:18,099
this and then the the transformation is

00:42:15,029 --> 00:42:22,230
it's about the work just like the team

00:42:18,099 --> 00:42:24,250
so delivering value but just enough and

00:42:22,230 --> 00:42:25,359
but then you have to refactor to

00:42:24,250 --> 00:42:27,190
maintain ability to keep the

00:42:25,359 --> 00:42:28,720
sustainability of your system so you

00:42:27,190 --> 00:42:31,809
have the three forces when it's reading

00:42:28,720 --> 00:42:34,720
so if a project is going wrong you can

00:42:31,809 --> 00:42:36,369
see what are the three what are the

00:42:34,720 --> 00:42:38,140
three dimension are the three dimensions

00:42:36,369 --> 00:42:40,930
which one is failing this

00:42:38,140 --> 00:42:43,420
maintainability is a business focus or

00:42:40,930 --> 00:42:49,319
is it delivered deliverable they will

00:42:43,420 --> 00:42:51,970
build deliverability okay so the

00:42:49,319 --> 00:42:53,829
transformation is about delivering in a

00:42:51,970 --> 00:42:55,460
way that is not gonna mess up your work

00:42:53,829 --> 00:42:57,140
you not gonna do more than you know

00:42:55,460 --> 00:43:06,700
plates you know I'm not gonna your gold

00:42:57,140 --> 00:43:10,400
plating yeah I just thought I'd add

00:43:06,700 --> 00:43:13,220
Uncle Bob's definition of transformation

00:43:10,400 --> 00:43:15,020
for the for the last question yeah he

00:43:13,220 --> 00:43:16,340
says that refactoring is changing the

00:43:15,020 --> 00:43:18,320
structure of the code without changing

00:43:16,340 --> 00:43:20,000
the behavior yeah where the

00:43:18,320 --> 00:43:22,640
transformation is changing the behavior

00:43:20,000 --> 00:43:26,270
without changing the structure yeah so

00:43:22,640 --> 00:43:27,890
what just good another thing that anchor

00:43:26,270 --> 00:43:32,510
Bob says in there and then you reminded

00:43:27,890 --> 00:43:34,430
me is that when you when I was playing

00:43:32,510 --> 00:43:38,270
first with that first guitar that I was

00:43:34,430 --> 00:43:41,540
doing I was adding conditions to try and

00:43:38,270 --> 00:43:44,750
resolve the Teta test so instead of

00:43:41,540 --> 00:43:49,640
making my code more generic I was making

00:43:44,750 --> 00:43:51,650
my code as vague and and abstract as my

00:43:49,640 --> 00:43:53,300
test was my test was like repeating the

00:43:51,650 --> 00:43:55,940
code was repeating everything that

00:43:53,300 --> 00:43:58,220
wasn't a test so transformation is about

00:43:55,940 --> 00:44:01,700
generalizing about bringing things

00:43:58,220 --> 00:44:04,450
together gluing all the code together so

00:44:01,700 --> 00:44:08,330
that's why code coverage is a scam

00:44:04,450 --> 00:44:10,510
code coverage implies that you have to

00:44:08,330 --> 00:44:13,790
have all the lines of your code tested

00:44:10,510 --> 00:44:15,440
and then you're gonna write one line of

00:44:13,790 --> 00:44:16,970
you can write up one code for this

00:44:15,440 --> 00:44:19,910
method and one code for this method and

00:44:16,970 --> 00:44:21,410
everyone is 100% tested but if you're

00:44:19,910 --> 00:44:23,450
doing it properly you're gonna have

00:44:21,410 --> 00:44:24,830
seven tests from one line of code and

00:44:23,450 --> 00:44:26,530
every time you either new test you

00:44:24,830 --> 00:44:29,210
decrease the amount of code you have

00:44:26,530 --> 00:44:31,160
okay that's why code coverage says can

00:44:29,210 --> 00:44:34,580
you should have many many tests for just

00:44:31,160 --> 00:44:36,140
and then the motorist you're right Uncle

00:44:34,580 --> 00:44:40,010
Bob puts in a very nice way as your

00:44:36,140 --> 00:44:46,370
tests become specific that the code

00:44:40,010 --> 00:44:48,700
becomes more generic right it's very

00:44:46,370 --> 00:44:48,700
nice

00:44:50,670 --> 00:45:01,930
and what else the questions say it next

00:44:57,310 --> 00:45:06,430
to you simple question why to use a

00:45:01,930 --> 00:45:09,730
pitch peace pact not to pitch bune it I

00:45:06,430 --> 00:45:11,410
did write PHP units for many years and

00:45:09,730 --> 00:45:14,020
when I start writing code for

00:45:11,410 --> 00:45:16,840
contributing for pitch respect the first

00:45:14,020 --> 00:45:21,580
thing I did is to convert all tests that

00:45:16,840 --> 00:45:23,650
was written in PHP t-to PHP unit so that

00:45:21,580 --> 00:45:25,180
they tested which respect with HB chief

00:45:23,650 --> 00:45:27,430
just to make a point that you know we're

00:45:25,180 --> 00:45:29,650
better than PHP unit I said no the PHP T

00:45:27,430 --> 00:45:31,360
it doesn't it's not for this so I

00:45:29,650 --> 00:45:33,130
converted everything to PHP unit and

00:45:31,360 --> 00:45:34,990
once everything was covered with pitch

00:45:33,130 --> 00:45:38,170
Fiona's the my next step was to convert

00:45:34,990 --> 00:45:42,970
everything to pitch respect because I

00:45:38,170 --> 00:45:47,800
think pitch respect forces me to design

00:45:42,970 --> 00:45:50,170
my code and if I try I can achieve the

00:45:47,800 --> 00:45:55,440
same things with PHP units but

00:45:50,170 --> 00:45:58,240
respect it's it's like my mother-in-law

00:45:55,440 --> 00:46:04,690
it's like finding faults and everything

00:45:58,240 --> 00:46:07,960
I do and in PHP Eunice is too kind let

00:46:04,690 --> 00:46:09,670
me write write crappy code and I prefer

00:46:07,960 --> 00:46:12,090
to have a mother-in-law who makes me a

00:46:09,670 --> 00:46:12,090
better person

00:46:17,640 --> 00:46:22,480
sorry another question

00:46:20,410 --> 00:46:24,730
so the code you looked it's kind of like

00:46:22,480 --> 00:46:28,030
a greenfield project you know you're

00:46:24,730 --> 00:46:31,090
starting from scratch but most of us are

00:46:28,030 --> 00:46:33,460
working with legacy code that's awful

00:46:31,090 --> 00:46:36,310
because six months ago we wrote it

00:46:33,460 --> 00:46:38,830
ourselves and didn't have a clue or

00:46:36,310 --> 00:46:40,480
somebody else see the Morse so what kind

00:46:38,830 --> 00:46:42,930
of advice would you give if you're

00:46:40,480 --> 00:46:47,020
trying to apply these techniques to

00:46:42,930 --> 00:46:49,390
legacy code that may not have tests so

00:46:47,020 --> 00:46:51,610
if you code that you're working does not

00:46:49,390 --> 00:46:53,290
have test the code that you working

00:46:51,610 --> 00:46:54,910
tomorrow will have to ask because you

00:46:53,290 --> 00:46:56,770
can't write code without test

00:46:54,910 --> 00:46:58,480
so the first code that you're gonna

00:46:56,770 --> 00:46:59,500
write tomorrow it's gonna have a test

00:46:58,480 --> 00:47:00,400
for the coder you're gonna write

00:46:59,500 --> 00:47:03,400
tomorrow

00:47:00,400 --> 00:47:05,110
and as you write features to your

00:47:03,400 --> 00:47:07,150
application you're gonna add more and

00:47:05,110 --> 00:47:09,040
more tests sometimes that's really hard

00:47:07,150 --> 00:47:11,410
because it's a part of the application

00:47:09,040 --> 00:47:13,180
that you rely on a lot and you change

00:47:11,410 --> 00:47:14,680
your change in the part of application

00:47:13,180 --> 00:47:17,170
and they're kind of very coupled

00:47:14,680 --> 00:47:18,970
together and it's very hard to write

00:47:17,170 --> 00:47:20,710
tests because the way the code was

00:47:18,970 --> 00:47:23,230
written doesn't doesn't let you replace

00:47:20,710 --> 00:47:25,660
the dependencies so you're going to work

00:47:23,230 --> 00:47:28,870
a little bit on refactoring the part

00:47:25,660 --> 00:47:30,160
that is paying for you to change so that

00:47:28,870 --> 00:47:31,830
you'll be able to continue write the

00:47:30,160 --> 00:47:34,840
test for the stuff that you're adding

00:47:31,830 --> 00:47:36,250
okay but what you don't want to do is to

00:47:34,840 --> 00:47:38,860
stop the everything and tell your

00:47:36,250 --> 00:47:40,960
project managers we can't continue with

00:47:38,860 --> 00:47:43,840
this because we have to refactor

00:47:40,960 --> 00:47:46,330
everything to write tests you can if you

00:47:43,840 --> 00:47:49,750
have resources for their money for that

00:47:46,330 --> 00:47:51,850
but you don't have to you can just my

00:47:49,750 --> 00:47:53,680
experience is always possible to from

00:47:51,850 --> 00:47:55,360
where you are you can start writing

00:47:53,680 --> 00:47:59,740
tests for the code that you're adding

00:47:55,360 --> 00:48:02,230
and then gradually increment to parts of

00:47:59,740 --> 00:48:07,870
the system that are not properly tested

00:48:02,230 --> 00:48:09,640
okay yes and there's also some parts of

00:48:07,870 --> 00:48:12,010
the systems that you could just

00:48:09,640 --> 00:48:13,360
acceptance test for if it's really

00:48:12,010 --> 00:48:15,610
really hard to test that part of the

00:48:13,360 --> 00:48:17,740
system you're changing stuff to be able

00:48:15,610 --> 00:48:25,000
to test that we can write some bihar

00:48:17,740 --> 00:48:29,560
tests for their part and then change and

00:48:25,000 --> 00:48:31,930
other questions yeah hi going back to

00:48:29,560 --> 00:48:35,110
your previous comment about PHP unit in

00:48:31,930 --> 00:48:40,000
PHP spec yeah do you have a concrete

00:48:35,110 --> 00:48:42,640
example of of what you said basic sure

00:48:40,000 --> 00:48:43,720
why it makes your code base yeah what I

00:48:42,640 --> 00:48:46,690
said it was actually a little bit

00:48:43,720 --> 00:48:50,190
inaccurate PHP spec is gentle and kind

00:48:46,690 --> 00:48:50,190
it's prophecy which is the beach

00:48:51,480 --> 00:49:00,880
because prophecy won't let you for

00:48:57,550 --> 00:49:02,590
example if you start typical scenario is

00:49:00,880 --> 00:49:06,220
when you have a collaborator inside of

00:49:02,590 --> 00:49:07,300
your class then your calling methods of

00:49:06,220 --> 00:49:09,790
the collaborators other of the

00:49:07,300 --> 00:49:12,190
collaborators so to be able to test that

00:49:09,790 --> 00:49:13,780
you had to return a stub of disturb so

00:49:12,190 --> 00:49:16,240
prophecy is gonna scream and complain

00:49:13,780 --> 00:49:19,870
about things like that or prophecy won't

00:49:16,240 --> 00:49:23,020
let you test magic methods or you know

00:49:19,870 --> 00:49:26,590
there's a lot of constraint so if you if

00:49:23,020 --> 00:49:28,480
you try to test something you can do in

00:49:26,590 --> 00:49:31,450
PHP in peach punitive Airy easily is

00:49:28,480 --> 00:49:34,660
that you can have micro integration

00:49:31,450 --> 00:49:36,610
tests inside of a unit tests so I can

00:49:34,660 --> 00:49:38,830
tell I cannot test this okay just let's

00:49:36,610 --> 00:49:41,590
just make a functional test or less you

00:49:38,830 --> 00:49:43,720
know the less it change from outside a

00:49:41,590 --> 00:49:46,180
small black box and then you instantiate

00:49:43,720 --> 00:49:48,370
all the classes in your tests and you

00:49:46,180 --> 00:49:50,650
put them in and wire them in and then

00:49:48,370 --> 00:49:53,680
you can just assert on a result can't do

00:49:50,650 --> 00:49:58,180
that in future space you have to you

00:49:53,680 --> 00:50:01,120
only you can only test the outputs of

00:49:58,180 --> 00:50:03,700
the methods of your class it won't let

00:50:01,120 --> 00:50:05,800
you unless Alice is coming directly from

00:50:03,700 --> 00:50:09,190
a club direct collaborator so if you've

00:50:05,800 --> 00:50:11,890
heard the law of Demeter with respect to

00:50:09,190 --> 00:50:13,570
complain so forces you think about

00:50:11,890 --> 00:50:15,580
collaborators and what's the right way

00:50:13,570 --> 00:50:16,960
of wiring up my collaborators in in this

00:50:15,580 --> 00:50:19,960
class okay

00:50:16,960 --> 00:50:21,730
you'll be horrible for you to write good

00:50:19,960 --> 00:50:26,310
code have a bad code with which respect

00:50:21,730 --> 00:50:33,300
would be a horrible experience thank you

00:50:26,310 --> 00:50:33,300
any other questions yeah this one here

00:50:38,750 --> 00:50:44,100
I've used PHP spoke before and from Y

00:50:41,670 --> 00:50:46,650
remember there were at the time a

00:50:44,100 --> 00:50:48,270
minimum amount of assertion methods or

00:50:46,650 --> 00:50:52,530
equivalent they're about me in five I

00:50:48,270 --> 00:50:54,540
think yeah and having a little looker

00:50:52,530 --> 00:50:57,840
so you are spec for example in the Ruby

00:50:54,540 --> 00:51:00,210
yeah there's a lot more equivalent to go

00:50:57,840 --> 00:51:02,580
with a similar type of framework has

00:51:00,210 --> 00:51:11,310
that changed since yeah so there are

00:51:02,580 --> 00:51:16,320
five families of assertions and you can

00:51:11,310 --> 00:51:17,760
use them too they have alliances so you

00:51:16,320 --> 00:51:19,560
can use the same assertion in different

00:51:17,760 --> 00:51:21,570
wording to make it easier for you to

00:51:19,560 --> 00:51:23,790
describe what you're trying to describe

00:51:21,570 --> 00:51:26,400
there is also something called a custom

00:51:23,790 --> 00:51:28,770
matcher so if something that runs away

00:51:26,400 --> 00:51:30,690
of the typical scenarios you can very

00:51:28,770 --> 00:51:32,180
easily translate them into something

00:51:30,690 --> 00:51:35,190
that makes sense in your domain but just

00:51:32,180 --> 00:51:39,210
writing a get mattress which is another

00:51:35,190 --> 00:51:41,340
Ikey keep-keep l-value the Curie's name

00:51:39,210 --> 00:51:43,170
of what you're trying to assert the name

00:51:41,340 --> 00:51:45,660
of the matcher and the value is a

00:51:43,170 --> 00:51:48,300
closure which you actually assert and

00:51:45,660 --> 00:51:50,010
you can pass that so you it's really

00:51:48,300 --> 00:51:53,370
rare that I find a situation where I

00:51:50,010 --> 00:51:56,310
need a matter that I can't either use

00:51:53,370 --> 00:52:00,450
from PHP spec or I can quickly create a

00:51:56,310 --> 00:52:02,550
running Lion matter for plus if you if

00:52:00,450 --> 00:52:04,890
it's if you are in a domain that you

00:52:02,550 --> 00:52:06,800
require different kinds of measures it's

00:52:04,890 --> 00:52:09,090
really easy to extend which respect now

00:52:06,800 --> 00:52:09,960
there's an extension system so you can

00:52:09,090 --> 00:52:12,390
just add

00:52:09,960 --> 00:52:19,340
matters to the matter manager very

00:52:12,390 --> 00:52:19,340
easily okay any other questions

00:52:22,160 --> 00:52:27,589

YouTube URL: https://www.youtube.com/watch?v=yPX3gZ7xgN8


