Title: PHP UK Conference 2014 - Beth Tucker Long - Normalisation: Friend Or Foe
Publication date: 2014-03-21
Playlist: PHP UK Conference 2014
Description: 
	Everyone wants a more organized database with less repetition, right? Quick answer: normalise! Great, but what does this actually mean for the structure of your tables? Which normal form should you use, and what is a normal form? Learn the pros and cons of normalisation techniques and find the right balance for your next project.
Captions: 
	00:00:07,309 --> 00:00:12,450
can everyone hear me all right ok I'm

00:00:11,099 --> 00:00:15,030
going to try not to turn my head too

00:00:12,450 --> 00:00:18,449
quickly or this will fall off so bear

00:00:15,030 --> 00:00:20,130
with me so this is normalization this is

00:00:18,449 --> 00:00:21,510
an intro to normalization if you're

00:00:20,130 --> 00:00:23,189
already familiar and you're looking for

00:00:21,510 --> 00:00:24,570
some advanced discussion this might be a

00:00:23,189 --> 00:00:26,099
little bit beginner for you it won't

00:00:24,570 --> 00:00:28,710
defend me if you want to go see another

00:00:26,099 --> 00:00:31,560
talk so this will be an introduction to

00:00:28,710 --> 00:00:33,090
normalization also I'm from the US and I

00:00:31,560 --> 00:00:34,860
tried really hard to correct all the

00:00:33,090 --> 00:00:38,910
spelling of normalization for you but

00:00:34,860 --> 00:00:40,920
let me know if I missed one ok so

00:00:38,910 --> 00:00:43,020
starting out with Who am I my name is

00:00:40,920 --> 00:00:45,930
Beth Tucker lung I'm the editor-in-chief

00:00:43,020 --> 00:00:47,820
of PHP architect magazine I also run a

00:00:45,930 --> 00:00:50,100
freelancing company so I do freelancing

00:00:47,820 --> 00:00:51,809
on the side I did bring a couple of

00:00:50,100 --> 00:00:53,610
issues of PHP architect if you're not

00:00:51,809 --> 00:00:55,980
familiar with it stop on by up front

00:00:53,610 --> 00:00:57,360
here afterwards I have four issues if

00:00:55,980 --> 00:00:59,489
you'd like an issue to take home I have

00:00:57,360 --> 00:01:00,809
some extras in my bag please don't take

00:00:59,489 --> 00:01:03,989
the four that are on the table those are

00:01:00,809 --> 00:01:05,840
my very last copies so don't take those

00:01:03,989 --> 00:01:08,400
but if you'd like an issue let me know

00:01:05,840 --> 00:01:09,930
i'm also a stay-at-home mom this is my

00:01:08,400 --> 00:01:12,150
family and I'm also a user group

00:01:09,930 --> 00:01:14,340
organizer I hope you are all familiar

00:01:12,150 --> 00:01:16,590
with the PHP London user group here in

00:01:14,340 --> 00:01:18,240
town but if you are not familiar with a

00:01:16,590 --> 00:01:20,009
user group in your area I strongly

00:01:18,240 --> 00:01:22,770
recommend you take a look and find one

00:01:20,009 --> 00:01:24,509
user groups are amazing there's so much

00:01:22,770 --> 00:01:26,520
learning goes on there it's a great way

00:01:24,509 --> 00:01:28,680
to network with people get support on

00:01:26,520 --> 00:01:31,229
things you need and just really grow as

00:01:28,680 --> 00:01:33,030
a developer if there's not a user group

00:01:31,229 --> 00:01:34,650
in your area then I strongly recommend

00:01:33,030 --> 00:01:36,240
that you start one and I would love to

00:01:34,650 --> 00:01:37,950
help you start one don't worry we're not

00:01:36,240 --> 00:01:39,299
going to send you off on your own we

00:01:37,950 --> 00:01:43,229
would love to help you start one so just

00:01:39,299 --> 00:01:45,479
get in touch with me afterwards a small

00:01:43,229 --> 00:01:47,399
disclaimer before we get started besides

00:01:45,479 --> 00:01:49,020
the spelling of normalization the

00:01:47,399 --> 00:01:51,210
databases that I'm showing you here are

00:01:49,020 --> 00:01:53,369
for example purposes only there's a lot

00:01:51,210 --> 00:01:55,049
of things wrong with these databases so

00:01:53,369 --> 00:01:56,939
just bear with me they're strictly for

00:01:55,049 --> 00:02:01,799
the example purposes so we can show sort

00:01:56,939 --> 00:02:04,079
of the point of normalization so what

00:02:01,799 --> 00:02:05,520
exactly is normalization well

00:02:04,079 --> 00:02:07,799
normalization generally deals with

00:02:05,520 --> 00:02:10,530
relational databases and it's a way to

00:02:07,799 --> 00:02:12,480
sort of organize those databases so that

00:02:10,530 --> 00:02:13,140
we are not having a lot of redundant

00:02:12,480 --> 00:02:14,819
data so

00:02:13,140 --> 00:02:17,010
we are not having a lot of dependency of

00:02:14,819 --> 00:02:19,440
the data on other things and when we go

00:02:17,010 --> 00:02:21,090
in to modify the data we don't have to

00:02:19,440 --> 00:02:23,220
worry about finding it in multiple

00:02:21,090 --> 00:02:25,530
places to modify it especially in when

00:02:23,220 --> 00:02:27,240
you're dealing with a very large

00:02:25,530 --> 00:02:29,220
database you don't want to have to go

00:02:27,240 --> 00:02:31,770
through multiple tables and update the

00:02:29,220 --> 00:02:33,390
same data multiple times because you

00:02:31,770 --> 00:02:34,770
could run into collisions we don't want

00:02:33,390 --> 00:02:36,330
to have some places update in other

00:02:34,770 --> 00:02:38,010
places not we want to keep our data

00:02:36,330 --> 00:02:42,209
consistent and we want to maintain the

00:02:38,010 --> 00:02:44,010
integrity of our data so when did

00:02:42,209 --> 00:02:45,720
normalization start well normalization

00:02:44,010 --> 00:02:48,620
has been around for a very very long

00:02:45,720 --> 00:02:52,140
time so it was started basically in

00:02:48,620 --> 00:02:55,580
1970s when it officially became a I

00:02:52,140 --> 00:02:57,870
guess a buzzword of sorts the theory

00:02:55,580 --> 00:03:00,239
started evolving long before nineteen

00:02:57,870 --> 00:03:02,340
seventy but in 1970s when the paper was

00:03:00,239 --> 00:03:04,350
published that first sort of officially

00:03:02,340 --> 00:03:06,630
defined the first normal form of

00:03:04,350 --> 00:03:08,489
normalization the second and third

00:03:06,630 --> 00:03:10,320
normal forms came one year later and

00:03:08,489 --> 00:03:13,050
they were introduced by a man named

00:03:10,320 --> 00:03:15,300
Edgar F cod who is generally credited

00:03:13,050 --> 00:03:17,700
with creating the idea of relational

00:03:15,300 --> 00:03:20,880
today generally credited with creating

00:03:17,700 --> 00:03:23,100
relational databases now there are more

00:03:20,880 --> 00:03:24,480
normal forms than just the three that

00:03:23,100 --> 00:03:26,450
we're going to cover today there's also

00:03:24,480 --> 00:03:30,840
fourth and fifth normal form and there's

00:03:26,450 --> 00:03:32,190
several other forms as well we are only

00:03:30,840 --> 00:03:34,950
going to cover the first three today

00:03:32,190 --> 00:03:36,480
just for simplicity sake but I do have

00:03:34,950 --> 00:03:38,610
some more resources later on in my

00:03:36,480 --> 00:03:39,780
slides and you will be able to do some

00:03:38,610 --> 00:03:44,130
more research if you'd like to know more

00:03:39,780 --> 00:03:45,660
about those other forms so very briefly

00:03:44,130 --> 00:03:48,060
let's start with the first normal form

00:03:45,660 --> 00:03:51,060
so the first normal form says each

00:03:48,060 --> 00:03:52,680
record has the same number of fields now

00:03:51,060 --> 00:03:54,180
generally in our modern relational

00:03:52,680 --> 00:03:57,540
databases that one is already a given

00:03:54,180 --> 00:04:00,180
that's just built in for us not having

00:03:57,540 --> 00:04:03,680
any duplicate records that's another one

00:04:00,180 --> 00:04:06,329
that generally is easy to take care of

00:04:03,680 --> 00:04:08,640
the third item is each set of data must

00:04:06,329 --> 00:04:11,670
have a unique identifier now this does

00:04:08,640 --> 00:04:14,609
not have to be a numeric ID it could be

00:04:11,670 --> 00:04:18,000
the name it could be a word it could be

00:04:14,609 --> 00:04:20,700
even a set of fields so you can actually

00:04:18,000 --> 00:04:22,910
use multiple fields as your defining key

00:04:20,700 --> 00:04:26,250
it doesn't have to be a single field

00:04:22,910 --> 00:04:27,030
generally though what most people do is

00:04:26,250 --> 00:04:28,680
they have an

00:04:27,030 --> 00:04:30,360
ID field that auto increment sits

00:04:28,680 --> 00:04:31,770
numeric and it just automatically gives

00:04:30,360 --> 00:04:34,790
you the next highest number so it's

00:04:31,770 --> 00:04:37,650
always unique it's an easy way to do it

00:04:34,790 --> 00:04:40,050
the last item to be first normal

00:04:37,650 --> 00:04:42,300
compliant is to have only one value per

00:04:40,050 --> 00:04:46,050
field that's another one that we

00:04:42,300 --> 00:04:48,300
oftentimes do but not always so another

00:04:46,050 --> 00:04:49,740
one to take note of so let's take a look

00:04:48,300 --> 00:04:51,750
at what this actually looks like in

00:04:49,740 --> 00:04:54,870
practice so here we have a sample

00:04:51,750 --> 00:04:56,490
database table it's a bus and train it's

00:04:54,870 --> 00:04:58,680
an imaginary company don't try to line

00:04:56,490 --> 00:05:00,600
it up with any real city so it's an

00:04:58,680 --> 00:05:02,730
imaginary train company that also runs

00:05:00,600 --> 00:05:04,230
buses and so we have some information in

00:05:02,730 --> 00:05:05,940
the database about which lines have

00:05:04,230 --> 00:05:07,500
buses versus trains you'll notice the

00:05:05,940 --> 00:05:09,540
red line is just bust the blue line is

00:05:07,500 --> 00:05:13,380
just train but the yellow line has both

00:05:09,540 --> 00:05:16,740
train and bus so going through with our

00:05:13,380 --> 00:05:18,360
first normal form here each record

00:05:16,740 --> 00:05:20,070
already has the same number of fields

00:05:18,360 --> 00:05:21,960
just based on the relational database

00:05:20,070 --> 00:05:24,479
that we're using we don't currently have

00:05:21,960 --> 00:05:26,460
any duplicate records if we look here

00:05:24,479 --> 00:05:27,780
even though we have two records for the

00:05:26,460 --> 00:05:31,169
yellow line you'll notice that they are

00:05:27,780 --> 00:05:32,760
not identical so one is a train record

00:05:31,169 --> 00:05:35,010
and one is a bus record so they're not

00:05:32,760 --> 00:05:38,120
identical even though almost all of the

00:05:35,010 --> 00:05:40,500
information is identical for this record

00:05:38,120 --> 00:05:42,900
so the third item is that each set of

00:05:40,500 --> 00:05:44,760
data must have a unique identifier so

00:05:42,900 --> 00:05:46,140
our table is currently lacking that so

00:05:44,760 --> 00:05:50,340
let's take a look at how we could add

00:05:46,140 --> 00:05:53,220
this right now as I said we don't have

00:05:50,340 --> 00:05:55,590
to necessarily use a number we could use

00:05:53,220 --> 00:05:57,180
say the line name now right now we can't

00:05:55,590 --> 00:06:00,000
use the line name because we have two

00:05:57,180 --> 00:06:01,560
different yellow line records so we

00:06:00,000 --> 00:06:03,870
could do is we could combine those two

00:06:01,560 --> 00:06:06,360
yellow line records into one so we have

00:06:03,870 --> 00:06:10,130
train and bus and now we have red yellow

00:06:06,360 --> 00:06:12,000
and blue lines which are now unique

00:06:10,130 --> 00:06:14,430
however that's not always a good

00:06:12,000 --> 00:06:16,110
solution and requires you to always make

00:06:14,430 --> 00:06:17,640
sure that that's unique every time you

00:06:16,110 --> 00:06:19,410
go in and add another line you have to

00:06:17,640 --> 00:06:22,110
double check it's not always a good

00:06:19,410 --> 00:06:24,419
solution so we can add an ID field and

00:06:22,110 --> 00:06:26,370
that ID field as I said if we set it to

00:06:24,419 --> 00:06:28,580
auto increment will always get a new

00:06:26,370 --> 00:06:30,840
number and that will stay unique for us

00:06:28,580 --> 00:06:34,580
so now we have our two yellow line

00:06:30,840 --> 00:06:37,349
records back and we have a unique ID

00:06:34,580 --> 00:06:39,630
however we're not quite up to the first

00:06:37,349 --> 00:06:40,740
normal form yet we still need to make

00:06:39,630 --> 00:06:42,660
sure we have only one

00:06:40,740 --> 00:06:45,630
value per field and those values need to

00:06:42,660 --> 00:06:47,639
pee consistent so let's start with the

00:06:45,630 --> 00:06:50,039
values being consistent so right now

00:06:47,639 --> 00:06:52,199
what that means is in the line name

00:06:50,039 --> 00:06:54,419
field we only have line names that's

00:06:52,199 --> 00:06:55,710
fine so our data is pretty consistent if

00:06:54,419 --> 00:06:57,449
you look at each field we're very

00:06:55,710 --> 00:07:00,449
consistent about what data is in that

00:06:57,449 --> 00:07:02,610
field however we do have several fields

00:07:00,449 --> 00:07:04,830
that have multiple values in them for

00:07:02,610 --> 00:07:07,620
instance the district column if you look

00:07:04,830 --> 00:07:10,199
at district we have district 1 and 2 2 3

00:07:07,620 --> 00:07:12,330
4 & 5 so those are multiple values even

00:07:10,199 --> 00:07:14,699
though they're all districts it's

00:07:12,330 --> 00:07:16,139
multiple districts in one field so we're

00:07:14,699 --> 00:07:17,970
not going to be able to comply with the

00:07:16,139 --> 00:07:22,110
first normal form until we take care of

00:07:17,970 --> 00:07:23,789
that so we can stretch our table out now

00:07:22,110 --> 00:07:26,400
we have 12 records instead of three or

00:07:23,789 --> 00:07:28,229
four so we have a lot more records but

00:07:26,400 --> 00:07:31,110
we are now meeting the first normal form

00:07:28,229 --> 00:07:33,539
you'll notice now that all of the fields

00:07:31,110 --> 00:07:37,289
only contain one value each of the

00:07:33,539 --> 00:07:38,909
records or each of the columns I each of

00:07:37,289 --> 00:07:40,710
the columns contains only one type of

00:07:38,909 --> 00:07:43,560
data so we're consistent in which data

00:07:40,710 --> 00:07:45,900
is being displayed in that column we

00:07:43,560 --> 00:07:47,780
have a unique identifier and we have the

00:07:45,900 --> 00:07:51,120
same number of fields in each record

00:07:47,780 --> 00:07:52,979
first normal form is pretty common to

00:07:51,120 --> 00:07:54,330
have but generally people don't stop

00:07:52,979 --> 00:07:56,370
there generally they go all the way to

00:07:54,330 --> 00:07:59,070
the third so let's talk about second

00:07:56,370 --> 00:08:00,599
normal form second normal form must meet

00:07:59,070 --> 00:08:03,659
all of the requirements of the first

00:08:00,599 --> 00:08:06,180
normal form and in addition to the first

00:08:03,659 --> 00:08:07,710
normal form requirements the first

00:08:06,180 --> 00:08:09,240
normal form requirements being each

00:08:07,710 --> 00:08:11,190
record as the same number fields no

00:08:09,240 --> 00:08:13,229
duplicate records each set of data has

00:08:11,190 --> 00:08:14,969
to have a unique identifier and only one

00:08:13,229 --> 00:08:17,099
value per field and values must be

00:08:14,969 --> 00:08:18,509
consistent so we're adding to that list

00:08:17,099 --> 00:08:20,280
we're going to add everything must

00:08:18,509 --> 00:08:23,400
relate directly to the key or the main

00:08:20,280 --> 00:08:25,169
value now as I said the key doesn't have

00:08:23,400 --> 00:08:27,750
to be a numeric value it could be the

00:08:25,169 --> 00:08:30,750
line name or it could be any other type

00:08:27,750 --> 00:08:32,310
of data that's unique to your table so

00:08:30,750 --> 00:08:35,610
in this case in this case it doesn't

00:08:32,310 --> 00:08:37,709
have to relate directly to a numeric key

00:08:35,610 --> 00:08:39,659
it has to relate directly to whatever is

00:08:37,709 --> 00:08:42,270
the most important piece of data for

00:08:39,659 --> 00:08:44,850
your table so taking a look at our

00:08:42,270 --> 00:08:46,670
schedule here probably the most

00:08:44,850 --> 00:08:49,260
important piece of data here for us

00:08:46,670 --> 00:08:51,990
would be the lines everything sort of

00:08:49,260 --> 00:08:54,089
relates back to the line so as far as

00:08:51,990 --> 00:08:54,480
the red line goes the transportation

00:08:54,089 --> 00:08:55,829
type

00:08:54,480 --> 00:08:57,449
it's to the red line the district that

00:08:55,829 --> 00:09:00,029
it's in relates to the red line and so

00:08:57,449 --> 00:09:02,970
on so that's sort of our key piece of

00:09:00,029 --> 00:09:05,430
data now we want to make sure that

00:09:02,970 --> 00:09:08,250
everything relates directly to that now

00:09:05,430 --> 00:09:10,170
when we look at this yes transportation

00:09:08,250 --> 00:09:11,790
type relates directly to that district

00:09:10,170 --> 00:09:14,160
relates directly to that the district

00:09:11,790 --> 00:09:16,860
office relates to the district not

00:09:14,160 --> 00:09:19,199
necessarily to the line so that is not

00:09:16,860 --> 00:09:20,880
relating directly to our key so we need

00:09:19,199 --> 00:09:22,620
to pull that district information out

00:09:20,880 --> 00:09:24,779
into a separate table to comply with

00:09:22,620 --> 00:09:26,910
second normal form so here you can see

00:09:24,779 --> 00:09:29,579
what I've done and I apologize that the

00:09:26,910 --> 00:09:31,050
headings on the columns are wrapping as

00:09:29,579 --> 00:09:32,519
we get more and more tables it gets

00:09:31,050 --> 00:09:35,399
harder and harder to fit them all on one

00:09:32,519 --> 00:09:37,649
slide so I apologize about the weird

00:09:35,399 --> 00:09:40,529
word wrapping at the top there but what

00:09:37,649 --> 00:09:42,510
we have here now is we have a table

00:09:40,529 --> 00:09:44,820
which contains our line specific

00:09:42,510 --> 00:09:47,430
information including the district and

00:09:44,820 --> 00:09:49,380
then we have a district table which is

00:09:47,430 --> 00:09:51,990
now has all the district specific

00:09:49,380 --> 00:09:53,850
information this will comply with second

00:09:51,990 --> 00:09:55,949
normal form now what I've done here is

00:09:53,850 --> 00:09:57,899
since district already had a number we

00:09:55,949 --> 00:10:00,360
had a district number originally I did

00:09:57,899 --> 00:10:02,339
not create a second ID number for that

00:10:00,360 --> 00:10:06,029
because we already have a unique number

00:10:02,339 --> 00:10:08,040
for the district so the foreign key in

00:10:06,029 --> 00:10:10,440
the first table district relates to the

00:10:08,040 --> 00:10:11,850
district field in the second table so

00:10:10,440 --> 00:10:13,230
that's how we'll create the relationship

00:10:11,850 --> 00:10:17,100
between the two will relate those two

00:10:13,230 --> 00:10:18,389
tables through the district numbers okay

00:10:17,100 --> 00:10:21,990
so now we're a second normal form

00:10:18,389 --> 00:10:23,880
compliant going to third normal form

00:10:21,990 --> 00:10:26,010
compliant again we have to meet all of

00:10:23,880 --> 00:10:27,510
the first normal form requirements all

00:10:26,010 --> 00:10:30,149
of the second normal form requirements

00:10:27,510 --> 00:10:32,819
and now we're going to add no transitive

00:10:30,149 --> 00:10:35,730
dependencies now a transitive dependency

00:10:32,819 --> 00:10:38,370
is going to be any time the nan a nan

00:10:35,730 --> 00:10:41,699
key value is dependent upon another non

00:10:38,370 --> 00:10:43,529
key value and again as I say key I don't

00:10:41,699 --> 00:10:45,600
necessarily mean the ID field it's

00:10:43,529 --> 00:10:48,449
whatever is the key piece of data in our

00:10:45,600 --> 00:10:51,120
table so what does that mean for our

00:10:48,449 --> 00:10:55,019
table while taking a look at our table

00:10:51,120 --> 00:10:56,160
we have our line table it has all our

00:10:55,019 --> 00:10:58,380
line information and we have our

00:10:56,160 --> 00:11:00,029
district table now in the line table we

00:10:58,380 --> 00:11:02,399
have transportation type which directs

00:11:00,029 --> 00:11:04,170
relate relates directly to the line and

00:11:02,399 --> 00:11:06,149
we have the district which relates

00:11:04,170 --> 00:11:07,889
directly to the line so that table is

00:11:06,149 --> 00:11:09,589
third normal

00:11:07,889 --> 00:11:12,420
apply it with third normal form our

00:11:09,589 --> 00:11:14,189
district table however we have the

00:11:12,420 --> 00:11:16,290
district office relates directly to the

00:11:14,189 --> 00:11:18,689
district and then we have a district

00:11:16,290 --> 00:11:20,939
manager that relates to a district but

00:11:18,689 --> 00:11:22,559
then we have an extension the extension

00:11:20,939 --> 00:11:23,939
doesn't relate to the district that's

00:11:22,559 --> 00:11:26,129
the phone number for the district

00:11:23,939 --> 00:11:28,649
manager so that relates directly to the

00:11:26,129 --> 00:11:31,230
district manager so what we have here is

00:11:28,649 --> 00:11:33,689
we have an on key value depending on

00:11:31,230 --> 00:11:36,480
another non key value so what we need to

00:11:33,689 --> 00:11:38,850
do is pull those out so we are going to

00:11:36,480 --> 00:11:41,519
pull out the district managers and make

00:11:38,850 --> 00:11:43,559
those are key in a new table and now our

00:11:41,519 --> 00:11:45,899
extension the phone number now relates

00:11:43,559 --> 00:11:49,169
to that key value in the table as

00:11:45,899 --> 00:11:51,149
opposed to a non key value so now our

00:11:49,169 --> 00:11:54,089
red line table everything relates

00:11:51,149 --> 00:11:55,679
directly to the red line key and in the

00:11:54,089 --> 00:11:59,009
district table everything relates to the

00:11:55,679 --> 00:12:01,410
district key and in the in the district

00:11:59,009 --> 00:12:03,569
manager table everything relates to that

00:12:01,410 --> 00:12:05,879
district manager so we've done is we've

00:12:03,569 --> 00:12:08,429
split it out we have three tables now so

00:12:05,879 --> 00:12:10,709
we have more tables more records but

00:12:08,429 --> 00:12:14,369
what we do have now is third normal form

00:12:10,709 --> 00:12:16,319
compliance so let's go through this one

00:12:14,369 --> 00:12:18,689
more time so let's take a different

00:12:16,319 --> 00:12:21,569
example so once again to get to third

00:12:18,689 --> 00:12:24,299
normal form these are the steps so all

00:12:21,569 --> 00:12:26,220
six of these the first for our first

00:12:24,299 --> 00:12:28,319
normal form number five brings us to

00:12:26,220 --> 00:12:32,459
second and number six brings us to third

00:12:28,319 --> 00:12:34,379
normal form so let's say we have a

00:12:32,459 --> 00:12:36,959
database with food in it so we're going

00:12:34,379 --> 00:12:40,110
to make some food I'm glad I'm after

00:12:36,959 --> 00:12:41,790
lunch and not right before so let's take

00:12:40,110 --> 00:12:43,169
for instance our fruit salad so we have

00:12:41,790 --> 00:12:44,610
a fruit salad we have a description of

00:12:43,169 --> 00:12:46,379
the fruit salad and even though it's

00:12:44,610 --> 00:12:49,949
split on to two lines this is all one

00:12:46,379 --> 00:12:51,389
database or one table at part of me so

00:12:49,949 --> 00:12:53,519
to get this let's start with first

00:12:51,389 --> 00:12:57,149
normal form again so looking at first

00:12:53,519 --> 00:12:58,949
normal form we sort of have a key with

00:12:57,149 --> 00:13:01,619
fruit salad cheese display and have

00:12:58,949 --> 00:13:03,749
already on rye but let's say in the

00:13:01,619 --> 00:13:05,129
future we add another fruit salad it's

00:13:03,749 --> 00:13:06,689
still called fruit salad but has

00:13:05,129 --> 00:13:08,339
different ingredients so that's really

00:13:06,689 --> 00:13:12,989
not going to work for us for a primary

00:13:08,339 --> 00:13:15,299
key so we add an ID column the next step

00:13:12,989 --> 00:13:16,860
is we have to make sure that all of the

00:13:15,299 --> 00:13:18,449
fields have their all of the records

00:13:16,860 --> 00:13:20,970
have the same number of fields we have

00:13:18,449 --> 00:13:21,720
that each of the fields only contains

00:13:20,970 --> 00:13:24,300
one set

00:13:21,720 --> 00:13:27,480
data and we are failing at that pretty

00:13:24,300 --> 00:13:30,180
miserably here so we're going to split

00:13:27,480 --> 00:13:32,699
out our ingredients into multiple fields

00:13:30,180 --> 00:13:34,319
so again i have not split them out into

00:13:32,699 --> 00:13:36,180
multiple tables what I've done here has

00:13:34,319 --> 00:13:38,189
just added more fields to the record

00:13:36,180 --> 00:13:39,930
it's not necessarily an ideal solution

00:13:38,189 --> 00:13:42,689
but it does meet second normal form

00:13:39,930 --> 00:13:45,449
there I'm sorry first normal form so

00:13:42,689 --> 00:13:47,100
right now we have our descriptions we

00:13:45,449 --> 00:13:49,860
have our ingredients we have ingredient

00:13:47,100 --> 00:13:53,310
2 and so on now this isn't going to work

00:13:49,860 --> 00:13:54,870
necessarily very well because we might

00:13:53,310 --> 00:13:57,540
have a dish in the future that has three

00:13:54,870 --> 00:13:58,709
ingredients or four or 27 and we don't

00:13:57,540 --> 00:14:00,149
want to have to keep changing the

00:13:58,709 --> 00:14:02,819
structure of our table every time we add

00:14:00,149 --> 00:14:04,980
a new ingredient so even though we have

00:14:02,819 --> 00:14:06,420
met first normal form compliance we may

00:14:04,980 --> 00:14:10,379
want to still split this out a bit

00:14:06,420 --> 00:14:13,319
further and add in two more tables here

00:14:10,379 --> 00:14:15,420
so what I have now is I have the dish

00:14:13,319 --> 00:14:17,279
table where we have which dish we're

00:14:15,420 --> 00:14:18,959
going to create I have an ingredients

00:14:17,279 --> 00:14:21,000
table that lists the ingredients and now

00:14:18,959 --> 00:14:22,500
I have a third table to relate the two

00:14:21,000 --> 00:14:24,269
so now it doesn't matter how many

00:14:22,500 --> 00:14:26,850
ingredients a dish has we don't have to

00:14:24,269 --> 00:14:28,259
change the structure of our table I do

00:14:26,850 --> 00:14:32,899
want to point out though that as I said

00:14:28,259 --> 00:14:32,899
both of these meet the first normal form

00:14:33,829 --> 00:14:41,009
so normalizing to second and third form

00:14:38,209 --> 00:14:43,170
we're going to get in here with our

00:14:41,009 --> 00:14:45,870
tables we're pretty pretty close but

00:14:43,170 --> 00:14:48,420
what we need to do now is split out the

00:14:45,870 --> 00:14:49,740
preparation method so here we have the

00:14:48,420 --> 00:14:51,809
preparation method in with the

00:14:49,740 --> 00:14:53,699
ingredient but the preparation

00:14:51,809 --> 00:14:57,120
description relies on the preparation

00:14:53,699 --> 00:14:59,180
method not on the ingredient name so

00:14:57,120 --> 00:15:02,040
what we need to do is split those out so

00:14:59,180 --> 00:15:04,529
now we have four tables so we're going

00:15:02,040 --> 00:15:06,120
to have our dish we're going to have the

00:15:04,529 --> 00:15:08,279
ingredient relation table and the

00:15:06,120 --> 00:15:10,550
ingredients table and then we're also

00:15:08,279 --> 00:15:13,110
going to have a preparation method table

00:15:10,550 --> 00:15:15,959
now you'll notice that I didn't create a

00:15:13,110 --> 00:15:17,699
another table for matching up the

00:15:15,959 --> 00:15:20,910
preparation method with the ingredient

00:15:17,699 --> 00:15:22,649
and that's because for our purposes I'm

00:15:20,910 --> 00:15:24,899
assuming that each ingredient will only

00:15:22,649 --> 00:15:27,300
have one preparation method however

00:15:24,899 --> 00:15:30,059
that's not very likely in the real world

00:15:27,300 --> 00:15:32,130
so in the real well in the real real

00:15:30,059 --> 00:15:34,380
world you'll probably want to have a

00:15:32,130 --> 00:15:35,550
fifth table that will then relate the

00:15:34,380 --> 00:15:37,680
ingredients to the

00:15:35,550 --> 00:15:42,510
method that will also decrease some

00:15:37,680 --> 00:15:43,920
duplication and things like that so I

00:15:42,510 --> 00:15:45,779
have a few slides in here with some

00:15:43,920 --> 00:15:47,519
normalization resources some articles

00:15:45,779 --> 00:15:49,920
you can look at this is for later when

00:15:47,519 --> 00:15:51,450
you download my slides but there are

00:15:49,920 --> 00:15:53,310
some really great articles out there of

00:15:51,450 --> 00:15:54,779
course the Wikipedia definition to get

00:15:53,310 --> 00:15:57,029
you started but there are a lot of great

00:15:54,779 --> 00:15:58,350
articles there's even some YouTube

00:15:57,029 --> 00:16:00,450
videos if you would like to watch

00:15:58,350 --> 00:16:02,279
someone normalize the database depending

00:16:00,450 --> 00:16:03,959
on what which way you prefer so there's

00:16:02,279 --> 00:16:07,709
articles to read videos to watch a lot

00:16:03,959 --> 00:16:10,019
of great resources now normalization is

00:16:07,709 --> 00:16:12,269
great but eventually you get to a point

00:16:10,019 --> 00:16:15,089
and you might run into a situation where

00:16:12,269 --> 00:16:17,820
normalization does not help okay the

00:16:15,089 --> 00:16:20,700
goal is to make things easier make

00:16:17,820 --> 00:16:23,670
things more stable but sometimes

00:16:20,700 --> 00:16:26,370
normalization can cause issues so one

00:16:23,670 --> 00:16:28,019
could normalization hurt us well

00:16:26,370 --> 00:16:31,440
normalization can get into a problem

00:16:28,019 --> 00:16:33,690
where suddenly we now have so many joins

00:16:31,440 --> 00:16:36,680
to get these tables back together that

00:16:33,690 --> 00:16:38,850
we're taking a major performance hit now

00:16:36,680 --> 00:16:41,459
normally what you want to do is try to

00:16:38,850 --> 00:16:42,839
create an index or try to create a view

00:16:41,459 --> 00:16:44,910
or something whatever database you're

00:16:42,839 --> 00:16:47,339
using try to create some sort of index

00:16:44,910 --> 00:16:49,320
where you're already adding the data

00:16:47,339 --> 00:16:51,839
back together d normalizing out of sorts

00:16:49,320 --> 00:16:53,910
and then querying off that d normalized

00:16:51,839 --> 00:16:56,339
form but still maintaining the stability

00:16:53,910 --> 00:16:58,550
and the integrity of the data in

00:16:56,339 --> 00:17:02,130
normalized tables in the background

00:16:58,550 --> 00:17:05,579
however in some cases that may not be

00:17:02,130 --> 00:17:08,429
enough and just to give you an idea so

00:17:05,579 --> 00:17:12,089
we went from a select star from dish as

00:17:08,429 --> 00:17:16,050
our first query to this huge query down

00:17:12,089 --> 00:17:18,329
here with three left joins so it really

00:17:16,050 --> 00:17:20,760
went from a very very simple query to a

00:17:18,329 --> 00:17:22,860
very complicated one very quickly now

00:17:20,760 --> 00:17:24,839
there is quite a big disagreement about

00:17:22,860 --> 00:17:26,579
whether or not that's just laziness on

00:17:24,839 --> 00:17:28,800
our part if we want to denormalize to

00:17:26,579 --> 00:17:30,690
not have such complicated queries or if

00:17:28,800 --> 00:17:33,270
it really is worthwhile to denormalize

00:17:30,690 --> 00:17:34,940
to simplify things and that's a decision

00:17:33,270 --> 00:17:37,080
that you and your team have to make I

00:17:34,940 --> 00:17:39,809
would venture to say that there's no

00:17:37,080 --> 00:17:41,910
correct answer in that argument based on

00:17:39,809 --> 00:17:45,030
how many people are staunchly on one

00:17:41,910 --> 00:17:47,570
side or the other but evaluate with your

00:17:45,030 --> 00:17:49,169
team see if the time you're spending

00:17:47,570 --> 00:17:50,759
making sure

00:17:49,169 --> 00:17:52,499
that the queries are going to run

00:17:50,759 --> 00:17:55,710
quickly creating the views every time

00:17:52,499 --> 00:17:57,299
you need a new query is that worth the

00:17:55,710 --> 00:18:00,809
performance hit that you're taking by D

00:17:57,299 --> 00:18:03,330
normalizing additionally if d

00:18:00,809 --> 00:18:05,879
normalizing your data isn't really

00:18:03,330 --> 00:18:09,720
giving you much more security or saving

00:18:05,879 --> 00:18:11,279
you from the risk of updating some data

00:18:09,720 --> 00:18:13,679
and not others so your data gets out of

00:18:11,279 --> 00:18:16,139
sync and so on then the performance hit

00:18:13,679 --> 00:18:18,749
may not be worthwhile however sometimes

00:18:16,139 --> 00:18:20,460
the performance hit is worthwhile if you

00:18:18,749 --> 00:18:23,789
are gaining that level of security in

00:18:20,460 --> 00:18:26,399
your data another reason that

00:18:23,789 --> 00:18:28,739
normalization might not be necessary and

00:18:26,399 --> 00:18:30,960
another reason that normalization might

00:18:28,739 --> 00:18:33,480
not be necessary is if your data is not

00:18:30,960 --> 00:18:35,909
going to change one of the major reasons

00:18:33,480 --> 00:18:37,590
to normalize as I said is to make sure

00:18:35,909 --> 00:18:40,139
that when you update your data when you

00:18:37,590 --> 00:18:41,940
insert data that everything stays in

00:18:40,139 --> 00:18:43,919
sync all the tables stay in sync all the

00:18:41,940 --> 00:18:45,720
instances of that piece of data stay in

00:18:43,919 --> 00:18:47,369
sync so you only want to have to update

00:18:45,720 --> 00:18:49,649
it in one place because if you have to

00:18:47,369 --> 00:18:51,330
update it in 10 different places if that

00:18:49,649 --> 00:18:53,159
takes a while if it has to get queued up

00:18:51,330 --> 00:18:55,769
and done later things can get out of

00:18:53,159 --> 00:18:57,899
sync very easily now if you are

00:18:55,769 --> 00:19:00,480
archiving records let's say you have

00:18:57,899 --> 00:19:03,269
some historical financial data that

00:19:00,480 --> 00:19:05,190
can't be changed ever then perhaps

00:19:03,269 --> 00:19:07,200
normalization is overkill because you're

00:19:05,190 --> 00:19:08,999
never going to be changing that data so

00:19:07,200 --> 00:19:11,940
there's no opportunity for it to be out

00:19:08,999 --> 00:19:14,340
of sync in that case you might want to

00:19:11,940 --> 00:19:16,499
go with the better performing route and

00:19:14,340 --> 00:19:17,909
have a denormalized table to make it

00:19:16,499 --> 00:19:19,950
easier to search you don't have to keep

00:19:17,909 --> 00:19:22,669
creating multi-use every time you need a

00:19:19,950 --> 00:19:25,679
different type of query and so on so

00:19:22,669 --> 00:19:27,509
normalization is very good but there

00:19:25,679 --> 00:19:32,460
comes a point when normalization may not

00:19:27,509 --> 00:19:34,470
be good for you as well so I also have

00:19:32,460 --> 00:19:37,649
some denormalization resources some

00:19:34,470 --> 00:19:40,169
articles for you to read later these are

00:19:37,649 --> 00:19:41,789
some people who have talked about places

00:19:40,169 --> 00:19:44,369
for instance where they're working so

00:19:41,789 --> 00:19:46,169
these are real life situations I do have

00:19:44,369 --> 00:19:48,960
some case studies as well I'm talking

00:19:46,169 --> 00:19:51,119
about Twitter and the second article

00:19:48,960 --> 00:19:54,899
sounds a lot like facebook but they call

00:19:51,119 --> 00:19:57,899
it a social networking site so it goes

00:19:54,899 --> 00:19:59,669
on and talks about okay in these types

00:19:57,899 --> 00:20:02,220
of really large situations where you're

00:19:59,669 --> 00:20:02,970
dealing with thousands of pieces of data

00:20:02,220 --> 00:20:04,530
but

00:20:02,970 --> 00:20:05,970
thousands of users having to hit it and

00:20:04,530 --> 00:20:08,549
you're really really concerned about

00:20:05,970 --> 00:20:11,940
performance when does normalization make

00:20:08,549 --> 00:20:13,409
sense and one does it not so it kind of

00:20:11,940 --> 00:20:14,669
goes through especially the social

00:20:13,409 --> 00:20:17,280
networking one goes through and talks

00:20:14,669 --> 00:20:19,169
about okay in this case duplicating the

00:20:17,280 --> 00:20:21,090
data and making sure that the data is

00:20:19,169 --> 00:20:24,840
consistent in two different places is

00:20:21,090 --> 00:20:26,970
way better than having to join in 12

00:20:24,840 --> 00:20:29,549
tables to keep just those two fields in

00:20:26,970 --> 00:20:31,080
sync another thing to take into

00:20:29,549 --> 00:20:32,520
consideration is whether or not your

00:20:31,080 --> 00:20:35,220
data is really going to make any

00:20:32,520 --> 00:20:36,809
difference if it's out of sync sometimes

00:20:35,220 --> 00:20:38,880
it's very very critical that everything

00:20:36,809 --> 00:20:41,340
be in sync instantly in other

00:20:38,880 --> 00:20:43,500
applications maybe it's not such a big

00:20:41,340 --> 00:20:44,970
deal your users maybe won't care if it

00:20:43,500 --> 00:20:46,350
takes 20 minutes to make sure

00:20:44,970 --> 00:20:49,169
everything's updated throughout the

00:20:46,350 --> 00:20:50,909
whole site in other situations like

00:20:49,169 --> 00:20:53,070
medical instances and things like that

00:20:50,909 --> 00:20:55,710
banking instances people get very upset

00:20:53,070 --> 00:20:58,080
if it's inconsistent so you have to kind

00:20:55,710 --> 00:21:00,360
of gauge your users and see what are

00:20:58,080 --> 00:21:02,760
they tolerant of are they more tolerant

00:21:00,360 --> 00:21:04,409
of data inconsistencies or they more

00:21:02,760 --> 00:21:06,900
tolerant of performance hits and

00:21:04,409 --> 00:21:09,600
slowness it's very very difficult to

00:21:06,900 --> 00:21:14,190
always do both so it depends on your

00:21:09,600 --> 00:21:15,390
situation at this point I'd like to

00:21:14,190 --> 00:21:17,520
pause just for a second and see if

00:21:15,390 --> 00:21:18,780
anybody has any questions and I was I

00:21:17,520 --> 00:21:20,820
forgot to mention at the beginning if

00:21:18,780 --> 00:21:24,900
you do have questions we're supposed to

00:21:20,820 --> 00:21:33,480
wait for a microphone to come up anyone

00:21:24,900 --> 00:21:36,120
have any questions okay um so I'm going

00:21:33,480 --> 00:21:37,710
to flip back here to the table so when

00:21:36,120 --> 00:21:39,179
we were talking about our fruit salad

00:21:37,710 --> 00:21:42,390
and our cheese display here in our and

00:21:39,179 --> 00:21:44,640
our are different dishes so we're going

00:21:42,390 --> 00:21:46,950
through and we have information about

00:21:44,640 --> 00:21:49,350
the dishes as well now this is third

00:21:46,950 --> 00:21:51,419
normal compliance however it depends on

00:21:49,350 --> 00:21:53,490
what your data is we can split the desk

00:21:51,419 --> 00:21:55,409
this out quite a bit further and in

00:21:53,490 --> 00:21:57,480
these situations we've only added four

00:21:55,409 --> 00:22:00,179
tables to this but in a real situation

00:21:57,480 --> 00:22:02,760
when you're dealing with user data let's

00:22:00,179 --> 00:22:03,809
say you have a membership table you're

00:22:02,760 --> 00:22:05,100
going to have their login information

00:22:03,809 --> 00:22:07,260
you're going to have their address and

00:22:05,100 --> 00:22:08,940
so on and so forth one of the very

00:22:07,260 --> 00:22:10,380
common mistakes that people make with

00:22:08,940 --> 00:22:13,289
normalization is when dealing with

00:22:10,380 --> 00:22:14,760
addresses so they feel like the address

00:22:13,289 --> 00:22:16,310
relates to the user so you can leave it

00:22:14,760 --> 00:22:18,650
in the user table

00:22:16,310 --> 00:22:20,420
but an address the address itself

00:22:18,650 --> 00:22:22,640
relates to the user but the individual

00:22:20,420 --> 00:22:26,150
fields in the address don't for instance

00:22:22,640 --> 00:22:28,460
this city and the state for those of us

00:22:26,150 --> 00:22:30,200
in the US or province in Canada and so

00:22:28,460 --> 00:22:33,050
on it's different for every country

00:22:30,200 --> 00:22:35,840
obviously but those relate generally to

00:22:33,050 --> 00:22:37,850
the postal code or depending on how your

00:22:35,840 --> 00:22:40,010
address is structured so that's one of

00:22:37,850 --> 00:22:42,260
the major things that people miss when

00:22:40,010 --> 00:22:44,270
trying to be third form normal is that

00:22:42,260 --> 00:22:46,550
they miss those small transitive

00:22:44,270 --> 00:22:48,790
dependencies and end up leaving more in

00:22:46,550 --> 00:22:51,560
the table then they necessarily should

00:22:48,790 --> 00:22:53,480
again though how often are you pulling

00:22:51,560 --> 00:22:55,340
out part of the address but not all of

00:22:53,480 --> 00:22:57,380
it and are you ever pulling up the

00:22:55,340 --> 00:22:59,540
customer record without that address

00:22:57,380 --> 00:23:00,950
information so that's the kind of thing

00:22:59,540 --> 00:23:02,390
you have to look at are we going to pull

00:23:00,950 --> 00:23:04,820
it up without the address information

00:23:02,390 --> 00:23:06,380
ever if so maybe it's good to split it

00:23:04,820 --> 00:23:10,100
out so we don't have to always pull that

00:23:06,380 --> 00:23:12,680
but if we use them separately more often

00:23:10,100 --> 00:23:14,840
or say a customer has multiple addresses

00:23:12,680 --> 00:23:16,640
you can really get into a lot of tables

00:23:14,840 --> 00:23:19,430
quickly if you're normalizing because

00:23:16,640 --> 00:23:21,260
now you have the customer record which

00:23:19,430 --> 00:23:23,890
relates you to an address record table

00:23:21,260 --> 00:23:26,960
which now has to relate you to a city

00:23:23,890 --> 00:23:29,960
table or a postal code table or a state

00:23:26,960 --> 00:23:32,390
or province table and so on and suddenly

00:23:29,960 --> 00:23:34,820
you're ending up with 16 tables just to

00:23:32,390 --> 00:23:37,850
put together a street address it's not

00:23:34,820 --> 00:23:39,380
necessarily a good thing and so that's

00:23:37,850 --> 00:23:41,240
one of the cases where denormalization

00:23:39,380 --> 00:23:44,030
is actually very common in that

00:23:41,240 --> 00:23:45,800
situation with addresses because of the

00:23:44,030 --> 00:23:47,570
complexity that you get into in those

00:23:45,800 --> 00:23:52,520
transitive dependencies to get to third

00:23:47,570 --> 00:23:54,590
normal form yep don't forget to wait for

00:23:52,520 --> 00:23:57,400
the microphone i'm going to try really

00:23:54,590 --> 00:23:59,900
hard to remember that i have a question

00:23:57,400 --> 00:24:01,550
before when you showed the example of

00:23:59,900 --> 00:24:03,560
select staffing table and then you

00:24:01,550 --> 00:24:06,260
showed the complex one you said

00:24:03,560 --> 00:24:07,430
something about using a view I wanted

00:24:06,260 --> 00:24:09,080
being an intro talk if you could

00:24:07,430 --> 00:24:11,780
describe what a view is and how that

00:24:09,080 --> 00:24:13,730
could help in this situation sure so um

00:24:11,780 --> 00:24:16,730
well it depends which database you're

00:24:13,730 --> 00:24:19,910
using obviously but like in MySQL or

00:24:16,730 --> 00:24:22,190
sequel you can you can create an index

00:24:19,910 --> 00:24:24,950
or of you and what the view does is

00:24:22,190 --> 00:24:26,660
basically you create the complicated

00:24:24,950 --> 00:24:28,970
query and you run that and then that

00:24:26,660 --> 00:24:29,990
creates the view and then now you can

00:24:28,970 --> 00:24:33,140
query that view teh

00:24:29,990 --> 00:24:34,460
so instead of having to do all of the

00:24:33,140 --> 00:24:36,620
joints every time you need to query that

00:24:34,460 --> 00:24:38,690
section of data you query the view

00:24:36,620 --> 00:24:43,910
instead at that I would say that's a

00:24:38,690 --> 00:24:45,410
basic definition okay um it for those of

00:24:43,910 --> 00:24:47,540
you that don't know Morgan works with

00:24:45,410 --> 00:24:52,429
MySQL so I was like oh great pop quiz on

00:24:47,540 --> 00:24:55,309
MySQL right in front of Morgan no no

00:24:52,429 --> 00:24:58,730
that's good that's good yeah any other

00:24:55,309 --> 00:25:01,510
questions I apologize I'm going like

00:24:58,730 --> 00:25:07,460
this i can't see you if i don't do this

00:25:01,510 --> 00:25:10,010
okay um anyone have any databases that

00:25:07,460 --> 00:25:12,410
they have normalization questions on any

00:25:10,010 --> 00:25:18,790
examples that you're wondering about any

00:25:12,410 --> 00:25:18,790
types of data I see I hear some laughing

00:25:20,620 --> 00:25:28,460
hang on just for the microphone right up

00:25:23,300 --> 00:25:34,850
front here okay right over here in the

00:25:28,460 --> 00:25:38,390
red hi I'm about the one for you / field

00:25:34,850 --> 00:25:40,580
what if you feel dizzy said one of my

00:25:38,390 --> 00:25:43,580
fields is a set know what if the field

00:25:40,580 --> 00:25:46,550
type is set in mysql you ever said it

00:25:43,580 --> 00:25:50,990
takes more than one value right um in

00:25:46,550 --> 00:25:52,850
that case if it's a set its kind of

00:25:50,990 --> 00:25:54,980
considered one value because it's one

00:25:52,850 --> 00:25:58,340
set right so as long as you don't have

00:25:54,980 --> 00:26:02,090
multiple sets I would I personally would

00:25:58,340 --> 00:26:06,250
consider that meeting first normal form

00:26:02,090 --> 00:26:08,809
or set yet first normal form however

00:26:06,250 --> 00:26:10,400
there's sort of some disagreement on how

00:26:08,809 --> 00:26:13,280
to handle those kind of fields

00:26:10,400 --> 00:26:14,420
especially um and it doesn't it's not

00:26:13,280 --> 00:26:16,429
even just sets but even if you're

00:26:14,420 --> 00:26:17,870
storing like an array of data in there

00:26:16,429 --> 00:26:19,460
and things like that there's a lot of

00:26:17,870 --> 00:26:21,440
different ways to get multiple values in

00:26:19,460 --> 00:26:24,500
there but it's still sort of is one

00:26:21,440 --> 00:26:27,559
value so it kind of depends on how

00:26:24,500 --> 00:26:29,120
strictly you want to follow it like I

00:26:27,559 --> 00:26:32,630
said for my situation I would consider

00:26:29,120 --> 00:26:34,760
one set to be one value because you

00:26:32,630 --> 00:26:36,350
wouldn't really split that out into

00:26:34,760 --> 00:26:38,330
multiple records at least not easily

00:26:36,350 --> 00:26:41,210
generally it depends what's in it I

00:26:38,330 --> 00:26:43,440
guess but the complexity you'd add to

00:26:41,210 --> 00:26:44,970
the table to get all of those

00:26:43,440 --> 00:26:46,710
all the duplication you would add to the

00:26:44,970 --> 00:26:49,559
table to get all of those into separate

00:26:46,710 --> 00:26:54,090
records I think outweighs the benefit of

00:26:49,559 --> 00:26:55,799
having fewer values in that field so I

00:26:54,090 --> 00:26:58,590
would say as long as you have one set it

00:26:55,799 --> 00:26:59,970
would be normalized but again that's my

00:26:58,590 --> 00:27:01,350
opinion there the problem with

00:26:59,970 --> 00:27:04,649
normalization is that there's a lot of

00:27:01,350 --> 00:27:06,299
opinions because it's easy to interpret

00:27:04,649 --> 00:27:07,980
things in different ways and there's so

00:27:06,299 --> 00:27:10,019
many different types of data that can be

00:27:07,980 --> 00:27:12,659
stored in different types of ways to

00:27:10,019 --> 00:27:14,970
store the data so you really get into

00:27:12,659 --> 00:27:18,000
some nitpicky stuff about no no yes it

00:27:14,970 --> 00:27:19,679
is no it's not kind of situations but

00:27:18,000 --> 00:27:22,559
like I said in my opinion I would say if

00:27:19,679 --> 00:27:24,679
it's one set in a set field that's the

00:27:22,559 --> 00:27:34,009
data type that's supposed to be in there

00:27:24,679 --> 00:27:34,009
thank you you're welcome anyone else oh

00:27:36,019 --> 00:27:44,970
good i agree with exactly what you said

00:27:43,529 --> 00:27:49,019
i just wanted to make the comment that

00:27:44,970 --> 00:27:51,269
sex is a mysql extension so this is kind

00:27:49,019 --> 00:27:55,740
of talking more about SQL standards and

00:27:51,269 --> 00:27:58,139
some purists that aim for 3nf they won't

00:27:55,740 --> 00:27:59,279
use sets so it's it's up to you if you

00:27:58,139 --> 00:28:01,139
want to take advantage of that

00:27:59,279 --> 00:28:04,950
enhancement or that extension or not

00:28:01,139 --> 00:28:06,750
mmhmm yeah and like I said I mean for me

00:28:04,950 --> 00:28:09,059
when I'm looking at things I tend to

00:28:06,750 --> 00:28:11,789
look at what type of data is supposed to

00:28:09,059 --> 00:28:13,889
be in that field and whether or not

00:28:11,789 --> 00:28:16,230
there's more than one of that type of

00:28:13,889 --> 00:28:18,179
data and so like I said with a set field

00:28:16,230 --> 00:28:20,519
it's supposed to have a set in it so if

00:28:18,179 --> 00:28:25,320
it has one set in it I would consider

00:28:20,519 --> 00:28:27,379
that one one value so any other

00:28:25,320 --> 00:28:27,379
questions

00:28:29,950 --> 00:28:38,350
okay we're a little bit early here but

00:28:36,970 --> 00:28:40,539
I'm going to give you a little more

00:28:38,350 --> 00:28:43,630
information about me so you can find me

00:28:40,539 --> 00:28:45,100
on twitter if you have questions the

00:28:43,630 --> 00:28:46,809
slides are will be available they're not

00:28:45,100 --> 00:28:50,230
quite there yet but they will be there

00:28:46,809 --> 00:28:55,179
very soon so tree line design com /

00:28:50,230 --> 00:28:57,130
slides again I work for PHP architect

00:28:55,179 --> 00:28:58,600
magazine if you are interested in seeing

00:28:57,130 --> 00:29:00,309
the magazine it's up here on the table

00:28:58,600 --> 00:29:02,169
I'd love you to come take a look I have

00:29:00,309 --> 00:29:05,649
a twenty percent off coupon if you are

00:29:02,169 --> 00:29:07,179
interested come and talk to me you can

00:29:05,649 --> 00:29:09,850
rate this talk as well as all the other

00:29:07,179 --> 00:29:12,100
talks in the conference on joined in so

00:29:09,850 --> 00:29:16,269
the talk link for the specific talk is

00:29:12,100 --> 00:29:17,710
10 693 so feel free to give feedback

00:29:16,269 --> 00:29:19,179
there if you'd like to give me feedback

00:29:17,710 --> 00:29:20,980
directly or if you have questions this

00:29:19,179 --> 00:29:23,049
is my email address also if you are

00:29:20,980 --> 00:29:27,850
interested in starting a user group feel

00:29:23,049 --> 00:29:29,679
free to email me as well and i'm not

00:29:27,850 --> 00:29:31,149
sure if if people want to take a little

00:29:29,679 --> 00:29:32,860
break i know there was really not much

00:29:31,149 --> 00:29:34,269
of a break between luncheon here feel

00:29:32,860 --> 00:29:35,710
free to sneak out but otherwise if you'd

00:29:34,269 --> 00:29:37,240
like to we can keep talking about

00:29:35,710 --> 00:29:39,340
different types of data and how we would

00:29:37,240 --> 00:29:42,519
normalize it if you would like to

00:29:39,340 --> 00:29:45,269
discuss that as well otherwise thank you

00:29:42,519 --> 00:29:45,269
for coming to my talk

00:29:49,159 --> 00:29:52,729
I apologize that it was a little short

00:29:51,590 --> 00:29:54,080
sometimes it's hard to gauge how many

00:29:52,729 --> 00:29:56,090
questions they're going to be last time

00:29:54,080 --> 00:29:58,309
I gave this talk i had 45 minutes of

00:29:56,090 --> 00:30:10,159
questions i had to cram everything into

00:29:58,309 --> 00:30:12,729
15 minutes so yes go ahead okay hi i

00:30:10,159 --> 00:30:15,019
guess one of the advantages of

00:30:12,729 --> 00:30:19,879
normalization is to have a kind of

00:30:15,019 --> 00:30:21,769
single point of tooth in a way and it's

00:30:19,879 --> 00:30:24,710
just something that came up to my mind

00:30:21,769 --> 00:30:28,519
are now doing your presentation is that

00:30:24,710 --> 00:30:32,149
after all even if the database is not

00:30:28,519 --> 00:30:34,309
normalized but while your team develops

00:30:32,149 --> 00:30:36,649
they don't look at the database in a way

00:30:34,309 --> 00:30:39,739
but there is enough stretch abstraction

00:30:36,649 --> 00:30:43,099
layer and they called the pii pii code

00:30:39,739 --> 00:30:46,909
that anyway presenter normalize the

00:30:43,099 --> 00:30:51,200
access yeah so that can be interesting

00:30:46,909 --> 00:30:53,059
yeah yeah definitely um so single point

00:30:51,200 --> 00:30:54,950
of access for the database is another

00:30:53,059 --> 00:30:58,220
interesting way to handle this for

00:30:54,950 --> 00:31:00,019
instance amazon is not normalized on

00:30:58,220 --> 00:31:01,820
their back end at least as far as the

00:31:00,019 --> 00:31:03,109
information they've released they don't

00:31:01,820 --> 00:31:06,379
obviously tell us too much about their

00:31:03,109 --> 00:31:08,299
back end but they don't follow strict

00:31:06,379 --> 00:31:10,309
normalization on their back end however

00:31:08,299 --> 00:31:13,639
what they do is they minimize the risk

00:31:10,309 --> 00:31:15,830
of the data be coming out of sync by not

00:31:13,639 --> 00:31:17,659
allowing multiple points of access to

00:31:15,830 --> 00:31:19,609
the database everything goes through one

00:31:17,659 --> 00:31:21,739
point of access and only that one point

00:31:19,609 --> 00:31:24,259
of access can make the updates and so

00:31:21,739 --> 00:31:27,019
the the updates get queued so they only

00:31:24,259 --> 00:31:28,700
happen one at a time and this way they

00:31:27,019 --> 00:31:30,109
sort of mitigate that risk of the data

00:31:28,700 --> 00:31:32,960
being out of sync by only allowing

00:31:30,109 --> 00:31:35,389
access through that one point so that's

00:31:32,960 --> 00:31:37,580
another way you can sort of denormalize

00:31:35,389 --> 00:31:44,529
but still maintain the benefits of

00:31:37,580 --> 00:31:44,529
normalization thank you yeah thank you

00:31:45,309 --> 00:31:52,200
anyone else

00:31:47,710 --> 00:31:52,200
mm-hmm hang on one second

00:31:55,530 --> 00:32:00,690
I mean is there a sword general wolf or

00:31:58,530 --> 00:32:02,910
because basically normalizes

00:32:00,690 --> 00:32:04,170
non-normalized he's really down to how

00:32:02,910 --> 00:32:05,430
many records you've got so if you're

00:32:04,170 --> 00:32:08,520
talking about tens of thousands or

00:32:05,430 --> 00:32:11,010
millions of records so he's a general

00:32:08,520 --> 00:32:14,160
point where you should only have four or

00:32:11,010 --> 00:32:15,270
five links if you've got tens of

00:32:14,160 --> 00:32:18,060
thousands but if you're going into

00:32:15,270 --> 00:32:19,740
millions like Amazon then try talking

00:32:18,060 --> 00:32:23,520
about links between the table yes or no

00:32:19,740 --> 00:32:25,260
is there general rule oh sure as far as

00:32:23,520 --> 00:32:27,900
normalization goes it's not really based

00:32:25,260 --> 00:32:30,390
on necessarily how many records you have

00:32:27,900 --> 00:32:33,390
although that can play into it but

00:32:30,390 --> 00:32:36,930
generally it's how many times you have

00:32:33,390 --> 00:32:39,120
to access the database because querying

00:32:36,930 --> 00:32:41,430
a large number of records is taxing on

00:32:39,120 --> 00:32:44,640
the database but not as taxing is having

00:32:41,430 --> 00:32:50,430
to join say 20 tables a million times a

00:32:44,640 --> 00:32:52,140
day so it's a little bit and will ya so

00:32:50,430 --> 00:32:53,940
I think it's a little more based on that

00:32:52,140 --> 00:32:55,710
but in general they recommend

00:32:53,940 --> 00:32:57,930
normalization even if you have a few

00:32:55,710 --> 00:33:00,150
number of records just because of the

00:32:57,930 --> 00:33:02,190
the data integrity issue happens as soon

00:33:00,150 --> 00:33:06,450
as you have one record so it's not

00:33:02,190 --> 00:33:10,080
necessarily how many records you have um

00:33:06,450 --> 00:33:13,500
totally agree I just wanted to add some

00:33:10,080 --> 00:33:15,020
mysql context some people say is that

00:33:13,500 --> 00:33:18,660
general rule you were looking for

00:33:15,020 --> 00:33:21,420
normalized to hertz to normalize till it

00:33:18,660 --> 00:33:23,610
works and you can actually get bad

00:33:21,420 --> 00:33:26,940
performance characteristics from either

00:33:23,610 --> 00:33:29,340
a lot more people associate the bad

00:33:26,940 --> 00:33:31,380
performance with normalization but if

00:33:29,340 --> 00:33:33,390
you are denormalized to do a

00:33:31,380 --> 00:33:35,460
modification you have to lock too many

00:33:33,390 --> 00:33:38,700
rows and that can reduce your

00:33:35,460 --> 00:33:40,980
concurrency in doing that so like

00:33:38,700 --> 00:33:46,500
everything in life it's going to it's

00:33:40,980 --> 00:33:48,180
going to depend on the situation yep so

00:33:46,500 --> 00:33:49,410
that phrase that Morgan just said you

00:33:48,180 --> 00:33:52,500
know normalized till it hurts

00:33:49,410 --> 00:33:54,900
denormalized till it works so normalize

00:33:52,500 --> 00:33:56,460
all the way and then see how bad it's

00:33:54,900 --> 00:33:58,260
hurting you and kind of go backwards if

00:33:56,460 --> 00:34:02,750
you need to at that point is generally

00:33:58,260 --> 00:34:02,750
the the preferred method of doing it

00:34:02,870 --> 00:34:08,180
okay

00:34:05,620 --> 00:34:11,930
just a quick question about fourth and

00:34:08,180 --> 00:34:14,780
fifth normal Foreman just a quick what's

00:34:11,930 --> 00:34:20,180
the benefits of those the benefits of

00:34:14,780 --> 00:34:21,860
those are additional stability I to be

00:34:20,180 --> 00:34:24,200
honest I don't use them very often

00:34:21,860 --> 00:34:27,110
because it's a significant performance

00:34:24,200 --> 00:34:28,520
hit I feel when you get I mean getting

00:34:27,110 --> 00:34:30,170
to third is kind of a performance hit

00:34:28,520 --> 00:34:32,200
but when you get to fourth and fifth I

00:34:30,170 --> 00:34:34,430
feel it's even more of a performance hit

00:34:32,200 --> 00:34:37,880
but it's a lot more dealing with the

00:34:34,430 --> 00:34:40,160
subject matter of the data and generally

00:34:37,880 --> 00:34:42,110
with the data that I work with once you

00:34:40,160 --> 00:34:43,430
get to third normal form I feel like the

00:34:42,110 --> 00:34:46,880
topic of the data has been segregated

00:34:43,430 --> 00:34:49,220
out enough for my purposes but if you're

00:34:46,880 --> 00:34:51,230
dealing with extremely large record

00:34:49,220 --> 00:34:53,960
types it's like tons and tons of data

00:34:51,230 --> 00:34:56,360
huge amounts of data then going into 4th

00:34:53,960 --> 00:35:00,500
and 5th can really help drill down to

00:34:56,360 --> 00:35:02,030
those specific topics and really pulling

00:35:00,500 --> 00:35:04,520
out like when you need to make an update

00:35:02,030 --> 00:35:07,000
you don't need to hit so many tables

00:35:04,520 --> 00:35:09,410
kind of a thing or you don't need to

00:35:07,000 --> 00:35:11,540
mess with records that aren't being

00:35:09,410 --> 00:35:14,060
updated is another thing so you're not

00:35:11,540 --> 00:35:16,520
locking records that are not related to

00:35:14,060 --> 00:35:20,710
what you're specifically updating is

00:35:16,520 --> 00:35:20,710
that kind of answer your question okay

00:35:24,220 --> 00:35:30,410
any other questions all right well thank

00:35:28,610 --> 00:35:32,150
you very much for coming um I will be

00:35:30,410 --> 00:35:33,620
here the rest of the slot just in case

00:35:32,150 --> 00:35:34,630
you have more questions so feel free to

00:35:33,620 --> 00:35:36,920
come up and talk to me about

00:35:34,630 --> 00:35:38,960
normalization or the magazine or

00:35:36,920 --> 00:35:41,230
anything at all all right thank you very

00:35:38,960 --> 00:35:41,230

YouTube URL: https://www.youtube.com/watch?v=g6cPTEB7D58


