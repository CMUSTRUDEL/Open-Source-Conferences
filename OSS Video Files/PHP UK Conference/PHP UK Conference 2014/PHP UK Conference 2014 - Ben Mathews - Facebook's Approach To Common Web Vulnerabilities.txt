Title: PHP UK Conference 2014 - Ben Mathews - Facebook's Approach To Common Web Vulnerabilities
Publication date: 2014-03-21
Playlist: PHP UK Conference 2014
Description: 
	The web is a security minefield, with many hazards like cross-site scripting, cross-site request forgery, and SQL injection. In this talk, I will explain how Facebook handles these common problems with good security libraries, automated detection, and lint rules. I'll describe some of the attacks that we have seen, and I will talk about some of the lessons that we have learned.
Captions: 
	00:00:04,040 --> 00:00:09,870
all right hi everybody how's it going

00:00:07,259 --> 00:00:10,860
today nice to see you all here this is

00:00:09,870 --> 00:00:13,469
pretty good crowd i'm pretty excited

00:00:10,860 --> 00:00:15,929
about it so my name is ben i'm an

00:00:13,469 --> 00:00:18,240
engineer here at or at Facebook so I

00:00:15,929 --> 00:00:20,699
work here in London we just opened an

00:00:18,240 --> 00:00:21,990
office here about two years ago and so I

00:00:20,699 --> 00:00:24,510
moved over here to help start that

00:00:21,990 --> 00:00:27,240
office so anyway yeah so I work here in

00:00:24,510 --> 00:00:28,320
London in our Covent Garden office the

00:00:27,240 --> 00:00:31,050
main thing that I've worked on at

00:00:28,320 --> 00:00:32,790
Facebook is security and what I want to

00:00:31,050 --> 00:00:34,590
talk to you guys about today is how

00:00:32,790 --> 00:00:37,320
we've approached security problems at

00:00:34,590 --> 00:00:38,940
Facebook there's a whole host of common

00:00:37,320 --> 00:00:41,160
security problems that many websites run

00:00:38,940 --> 00:00:43,260
into and we've spent a lot of time

00:00:41,160 --> 00:00:45,059
combating these obviously Facebook is a

00:00:43,260 --> 00:00:47,039
really big target and so we get a lot of

00:00:45,059 --> 00:00:48,960
attacks but you know we have a lot of

00:00:47,039 --> 00:00:50,820
resources to deal with these so I just

00:00:48,960 --> 00:00:52,350
want to talk about you know through some

00:00:50,820 --> 00:00:55,550
of the history of what we've done what

00:00:52,350 --> 00:00:58,530
has worked for us and what hasn't so

00:00:55,550 --> 00:01:00,329
just to start off we have this slogan at

00:00:58,530 --> 00:01:02,010
Facebook which is you see kind of

00:01:00,329 --> 00:01:04,320
plastered around campus it says move

00:01:02,010 --> 00:01:06,510
fast and break things the idea behind

00:01:04,320 --> 00:01:08,159
this slogan is we want to be able to

00:01:06,510 --> 00:01:10,670
ship products quickly okay we want to

00:01:08,159 --> 00:01:14,040
get things done quickly try things out

00:01:10,670 --> 00:01:15,299
never stop moving basically and the

00:01:14,040 --> 00:01:16,890
break thinks part of this what that

00:01:15,299 --> 00:01:18,540
really means is don't be afraid of

00:01:16,890 --> 00:01:19,950
making mistakes don't be afraid of

00:01:18,540 --> 00:01:22,710
failure don't be afraid of doing things

00:01:19,950 --> 00:01:24,270
wrong the problem is there are certain

00:01:22,710 --> 00:01:26,220
areas you know it's one thing if we have

00:01:24,270 --> 00:01:27,810
a bug in the site it's one thing if you

00:01:26,220 --> 00:01:29,490
know a user's unable to upload a photo

00:01:27,810 --> 00:01:30,720
but it's an entirely different thing if

00:01:29,490 --> 00:01:32,280
we have a security problem on the site

00:01:30,720 --> 00:01:35,520
or if we have a privacy problem on the

00:01:32,280 --> 00:01:36,960
site so the goal of my team or the team

00:01:35,520 --> 00:01:38,460
that I've been working on is basically

00:01:36,960 --> 00:01:39,390
to help prevent these problems to make

00:01:38,460 --> 00:01:41,220
sure that we don't have security

00:01:39,390 --> 00:01:43,259
problems that show up on the site and

00:01:41,220 --> 00:01:45,360
that we enable our product engineers to

00:01:43,259 --> 00:01:49,590
actually build products and develop

00:01:45,360 --> 00:01:50,759
quickly and move fast so there's kind of

00:01:49,590 --> 00:01:53,310
two main approaches but I'm going to be

00:01:50,759 --> 00:01:56,340
talking about throughout this talk one

00:01:53,310 --> 00:01:58,290
is building good api's so a few guys

00:01:56,340 --> 00:02:00,119
that are easy to use that are really

00:01:58,290 --> 00:02:03,119
hard to get wrong that take care of

00:02:00,119 --> 00:02:04,829
security problems as you know as much as

00:02:03,119 --> 00:02:06,840
possible so that product engineers don't

00:02:04,829 --> 00:02:09,330
have to think about them but also api's

00:02:06,840 --> 00:02:12,239
that are really compelling so api's that

00:02:09,330 --> 00:02:13,360
are better to use than what the product

00:02:12,239 --> 00:02:15,700
engineers had before

00:02:13,360 --> 00:02:17,680
so the idea being they should prefer to

00:02:15,700 --> 00:02:19,050
use these api's versus the old broken

00:02:17,680 --> 00:02:21,940
things that they were using before and

00:02:19,050 --> 00:02:23,140
then the other part of this that's not

00:02:21,940 --> 00:02:24,190
going to catch everything there's always

00:02:23,140 --> 00:02:26,080
going to be somebody who doesn't know

00:02:24,190 --> 00:02:27,760
about the API somebody who uses the API

00:02:26,080 --> 00:02:29,770
wrong so then the other part of this is

00:02:27,760 --> 00:02:31,360
always doing automatic detection to try

00:02:29,770 --> 00:02:33,520
to detect security problems that we have

00:02:31,360 --> 00:02:35,170
on the site so we'll be talking about

00:02:33,520 --> 00:02:36,400
this about with multiple kinds of

00:02:35,170 --> 00:02:39,850
vulnerabilities as we go through this

00:02:36,400 --> 00:02:41,940
talk today one thing that I just want to

00:02:39,850 --> 00:02:44,140
mention before we get started is

00:02:41,940 --> 00:02:46,630
facebook we have a monolithic code base

00:02:44,140 --> 00:02:48,340
so we have one giant PHP code base that

00:02:46,630 --> 00:02:50,709
contains most of the code for the site

00:02:48,340 --> 00:02:52,230
most of the business logic most the code

00:02:50,709 --> 00:02:54,310
for rendering HTML and all of that

00:02:52,230 --> 00:02:55,989
there's a bunch of back-end services

00:02:54,310 --> 00:02:58,930
behind that but the PHP code base is the

00:02:55,989 --> 00:03:01,030
heart of what we what we do and it's

00:02:58,930 --> 00:03:02,650
giant it's you know together with the

00:03:01,030 --> 00:03:05,080
get directory it's something like 49

00:03:02,650 --> 00:03:06,640
gigabytes so it's quite a lot to have

00:03:05,080 --> 00:03:08,950
but there are some really huge

00:03:06,640 --> 00:03:11,200
advantages to this which is if

00:03:08,950 --> 00:03:12,520
especially in terms of security if we

00:03:11,200 --> 00:03:14,020
want to make a security change to the

00:03:12,520 --> 00:03:15,910
site it's really easy to do that in one

00:03:14,020 --> 00:03:18,280
place and have that affect the entire

00:03:15,910 --> 00:03:19,870
website and push that out quickly with

00:03:18,280 --> 00:03:22,510
this code base we're doing pushes you

00:03:19,870 --> 00:03:24,430
know twice a day regularly so it's

00:03:22,510 --> 00:03:26,019
pretty easy to like push something out

00:03:24,430 --> 00:03:27,790
and make changes and make fixes on the

00:03:26,019 --> 00:03:30,790
website so this has been a huge help for

00:03:27,790 --> 00:03:32,530
us in terms of security so that being

00:03:30,790 --> 00:03:33,670
said let's jump into the first

00:03:32,530 --> 00:03:36,040
vulnerability that I want to talk about

00:03:33,670 --> 00:03:37,660
which is cross-site scripting so this is

00:03:36,040 --> 00:03:38,769
a pretty standard vulnerability this is

00:03:37,660 --> 00:03:42,280
something that you see on a lot of

00:03:38,769 --> 00:03:43,900
websites and this is you know the basic

00:03:42,280 --> 00:03:46,209
pattern that you see that's dangerous is

00:03:43,900 --> 00:03:49,600
somebody is building up a piece of HTML

00:03:46,209 --> 00:03:52,480
and they have some you know user data

00:03:49,600 --> 00:03:54,180
that they are concatenated into an HTML

00:03:52,480 --> 00:03:56,799
tag that they're building up here and

00:03:54,180 --> 00:03:58,390
the problem is if you just stick user

00:03:56,799 --> 00:04:00,549
data in there that allows people to

00:03:58,390 --> 00:04:02,110
execute arbitrary JavaScript and if they

00:04:00,549 --> 00:04:03,640
can execute arbitrary JavaScript then

00:04:02,110 --> 00:04:04,780
they can take over users accounts and

00:04:03,640 --> 00:04:07,810
they can do whatever they want with

00:04:04,780 --> 00:04:09,760
those accounts so this is a really bad

00:04:07,810 --> 00:04:12,340
flaw and unfortunately it's really

00:04:09,760 --> 00:04:14,739
comment on the web but anyway the first

00:04:12,340 --> 00:04:16,750
solution that we adopted at Facebook was

00:04:14,739 --> 00:04:19,299
basically what i would call manual

00:04:16,750 --> 00:04:20,769
escaping so everybody goes through and

00:04:19,299 --> 00:04:23,500
when they're building up a piece of HTML

00:04:20,769 --> 00:04:25,570
they call htmlspecialchars and they

00:04:23,500 --> 00:04:26,950
escape all the dangerous characters so

00:04:25,570 --> 00:04:28,780
they get rid of the less fans and

00:04:26,950 --> 00:04:32,130
greater thans and all that stuff and

00:04:28,780 --> 00:04:34,180
this makes the as makes your HTML safe

00:04:32,130 --> 00:04:36,690
the problem is this is not a very

00:04:34,180 --> 00:04:39,040
scalable solution to building safe HTML

00:04:36,690 --> 00:04:41,500
if you have a bunch of engineers who are

00:04:39,040 --> 00:04:43,510
writing code like this there's two

00:04:41,500 --> 00:04:45,130
problems they might forget to do it so

00:04:43,510 --> 00:04:46,930
you need really good code reviews to

00:04:45,130 --> 00:04:48,640
make sure that people do it right the

00:04:46,930 --> 00:04:50,770
other problem is that eventually you

00:04:48,640 --> 00:04:53,110
start passing pieces of HTML around your

00:04:50,770 --> 00:04:55,390
site and or between different functions

00:04:53,110 --> 00:04:56,950
so you'll have a bunch of strings

00:04:55,390 --> 00:04:59,170
floating around your code base some of

00:04:56,950 --> 00:05:01,240
which are safe pieces of HTML and some

00:04:59,170 --> 00:05:03,490
strings are of which are you know unsafe

00:05:01,240 --> 00:05:05,020
data that came from the user and it's

00:05:03,490 --> 00:05:06,820
really hard and a large code base to

00:05:05,020 --> 00:05:08,500
tell the difference between the two when

00:05:06,820 --> 00:05:11,110
you look at a string it's really hard to

00:05:08,500 --> 00:05:12,730
see is this safer is this unsafe and so

00:05:11,110 --> 00:05:14,140
as your code base gets bigger and bigger

00:05:12,730 --> 00:05:15,670
it's harder and harder to keep track of

00:05:14,140 --> 00:05:17,890
this and it's harder and harder to make

00:05:15,670 --> 00:05:21,280
sure that you're escaping everything so

00:05:17,890 --> 00:05:23,440
this was not a great solution for us we

00:05:21,280 --> 00:05:24,880
went with it for a while but eventually

00:05:23,440 --> 00:05:27,880
we just realized that it wasn't working

00:05:24,880 --> 00:05:30,490
very well for us so the thing that we

00:05:27,880 --> 00:05:34,750
actually do now is a system called xhp

00:05:30,490 --> 00:05:38,560
so xhp allows us to stick HTML tags

00:05:34,750 --> 00:05:41,500
directly into our PHP source code those

00:05:38,560 --> 00:05:43,240
gets transformed into objects and xhp

00:05:41,500 --> 00:05:46,390
handles all of the escaping onto the

00:05:43,240 --> 00:05:47,530
covers so it basically engineers product

00:05:46,390 --> 00:05:48,760
engineers don't have to think about this

00:05:47,530 --> 00:05:50,350
at all they don't have to think about

00:05:48,760 --> 00:05:53,770
when do I need to escape but when do I

00:05:50,350 --> 00:05:55,150
not xhp keeps track of all this

00:05:53,770 --> 00:05:57,280
automatically and basically the

00:05:55,150 --> 00:05:59,740
assumption that it makes is if you have

00:05:57,280 --> 00:06:01,090
a string any string is unsafe okay any

00:05:59,740 --> 00:06:03,160
string that we have in the code base is

00:06:01,090 --> 00:06:05,290
assumed to be user data that is not

00:06:03,160 --> 00:06:07,120
allowed to be output and then on the

00:06:05,290 --> 00:06:09,580
other hand if it's HTML if it's a safe

00:06:07,120 --> 00:06:11,680
piece of HTML it's actually an object so

00:06:09,580 --> 00:06:13,320
we can distinguish between these in our

00:06:11,680 --> 00:06:17,710
code base which is really really helpful

00:06:13,320 --> 00:06:19,300
so and the thing about this API is if

00:06:17,710 --> 00:06:22,120
you compare the way that we write code

00:06:19,300 --> 00:06:23,320
now with a simple HTML tag versus the

00:06:22,120 --> 00:06:25,570
stuff that we were doing before with

00:06:23,320 --> 00:06:27,700
string concatenation it's clear that

00:06:25,570 --> 00:06:30,010
this xhp is it's just a much more

00:06:27,700 --> 00:06:32,410
compelling API so it's much easier for

00:06:30,010 --> 00:06:33,790
product engineers to use it's much

00:06:32,410 --> 00:06:34,960
easier to see the code and they they

00:06:33,790 --> 00:06:36,730
don't have to spend their time worrying

00:06:34,960 --> 00:06:38,710
about security so this is basically a

00:06:36,730 --> 00:06:40,150
win for everybody it allows the product

00:06:38,710 --> 00:06:40,840
engineers to move quickly and it allows

00:06:40,150 --> 00:06:42,669
it makes

00:06:40,840 --> 00:06:46,510
that we have security that we don't have

00:06:42,669 --> 00:06:48,639
xss on the site and we do a similar

00:06:46,510 --> 00:06:50,680
thing in JavaScript as well that allows

00:06:48,639 --> 00:06:55,210
us to just put HTML tags directly into

00:06:50,680 --> 00:06:56,710
our JavaScript so that was great when we

00:06:55,210 --> 00:06:58,030
introduced this I mean we introduced

00:06:56,710 --> 00:06:59,889
this I don't know five years ago or

00:06:58,030 --> 00:07:02,680
something like that and and most of the

00:06:59,889 --> 00:07:05,139
site is now built using this xhp the

00:07:02,680 --> 00:07:06,310
thing is we always have legacy code even

00:07:05,139 --> 00:07:07,479
today we still have code that was

00:07:06,310 --> 00:07:10,180
written you know endpoints that were

00:07:07,479 --> 00:07:11,910
created more than five years ago so the

00:07:10,180 --> 00:07:14,680
the question is how do we detect those

00:07:11,910 --> 00:07:17,530
issues those any xss holes that we had

00:07:14,680 --> 00:07:19,450
before we switched over to xhp and for

00:07:17,530 --> 00:07:21,220
that we use a bit of automated XSS

00:07:19,450 --> 00:07:24,520
detection so we have this thing called

00:07:21,220 --> 00:07:26,050
XSS detector and basically we use a

00:07:24,520 --> 00:07:28,450
little trick while we're doing our

00:07:26,050 --> 00:07:29,710
escaping so basically normally when

00:07:28,450 --> 00:07:32,500
you're escaping characters you only

00:07:29,710 --> 00:07:35,410
escape less than greater than quotes

00:07:32,500 --> 00:07:37,690
things like that in our case when we

00:07:35,410 --> 00:07:39,820
turn the detector on we also escape the

00:07:37,690 --> 00:07:42,850
lower the letter e and we turn it into

00:07:39,820 --> 00:07:45,520
this code pound 101 ampersand pound 101

00:07:42,850 --> 00:07:47,139
semicolon into the browser this renders

00:07:45,520 --> 00:07:49,330
is an a when it gets to the browser and

00:07:47,139 --> 00:07:51,370
and it gets displayed it actually shows

00:07:49,330 --> 00:07:54,280
up as an e so to the user it doesn't

00:07:51,370 --> 00:07:56,530
change anything but what this allows us

00:07:54,280 --> 00:07:57,760
to do is at the end of the page when

00:07:56,530 --> 00:07:59,919
we're sending the output back to the

00:07:57,760 --> 00:08:02,320
user we can scan through the whole HTML

00:07:59,919 --> 00:08:03,760
we can say oh okay so we found a

00:08:02,320 --> 00:08:06,130
lowercase e character here and if we

00:08:03,760 --> 00:08:07,330
ever find a lowercase e that means that

00:08:06,130 --> 00:08:08,470
was something that we did in this game

00:08:07,330 --> 00:08:11,020
that didn't actually go through the

00:08:08,470 --> 00:08:12,220
escaping function so this is a pretty

00:08:11,020 --> 00:08:14,349
clever trick that allowed us to

00:08:12,220 --> 00:08:16,930
basically find most of the XS s holes

00:08:14,349 --> 00:08:21,849
that existed before we switched over to

00:08:16,930 --> 00:08:23,349
X HP there's and basically we continue

00:08:21,849 --> 00:08:25,120
to run this basically we don't run it on

00:08:23,349 --> 00:08:26,740
every request we want to we run it on

00:08:25,120 --> 00:08:28,450
some small fraction of requests maybe

00:08:26,740 --> 00:08:30,729
one out of a million requests or

00:08:28,450 --> 00:08:33,789
something like that and it does depend

00:08:30,729 --> 00:08:35,620
it's kind of a random system for finding

00:08:33,789 --> 00:08:37,719
XSS holes and that it only finds the

00:08:35,620 --> 00:08:40,300
nexus s hole if there happens to be an e

00:08:37,719 --> 00:08:41,709
in that location but overall you run

00:08:40,300 --> 00:08:45,070
this on enough requests and it works out

00:08:41,709 --> 00:08:47,500
pretty well we ran into some funny

00:08:45,070 --> 00:08:49,980
problems with this system though one

00:08:47,500 --> 00:08:52,180
example was Japanese mobile phones

00:08:49,980 --> 00:08:53,680
here's what our composure should look

00:08:52,180 --> 00:08:54,460
like on the left and then on the right

00:08:53,680 --> 00:08:55,690
when

00:08:54,460 --> 00:08:57,880
was rendered on one of these mobile

00:08:55,690 --> 00:08:59,500
phones it turned out the composer had

00:08:57,880 --> 00:09:01,840
all these hidden input fields shown and

00:08:59,500 --> 00:09:03,340
what it turned out was some of these

00:09:01,840 --> 00:09:06,580
mobile phones they did not properly

00:09:03,340 --> 00:09:08,470
handle having an escaped e inside of an

00:09:06,580 --> 00:09:11,410
input tag that said type equals hidden

00:09:08,470 --> 00:09:14,410
so this was kind of a clever thing or

00:09:11,410 --> 00:09:16,500
kind of a funny problem but anyway what

00:09:14,410 --> 00:09:18,730
we ended up doing is adding a final pass

00:09:16,500 --> 00:09:20,170
basically after we check the output and

00:09:18,730 --> 00:09:22,390
we make sure that there's no XSS holes

00:09:20,170 --> 00:09:25,030
we remove all these special codes and we

00:09:22,390 --> 00:09:27,220
change it back to an e so that it's all

00:09:25,030 --> 00:09:28,780
normal to the browser basically but

00:09:27,220 --> 00:09:30,790
anyway this is worked out really well

00:09:28,780 --> 00:09:32,500
for us this whole system so again with

00:09:30,790 --> 00:09:35,410
XSS we've there's these two approaches

00:09:32,500 --> 00:09:37,360
right there's the better API that's easy

00:09:35,410 --> 00:09:38,890
to use and works out better for everyone

00:09:37,360 --> 00:09:40,720
and then on the other hand there's

00:09:38,890 --> 00:09:44,290
automatic automatic enforcement trying

00:09:40,720 --> 00:09:46,780
to find XSS holes so one interesting

00:09:44,290 --> 00:09:47,950
attack that we've run across I don't

00:09:46,780 --> 00:09:49,180
know that we've ever actually seen this

00:09:47,950 --> 00:09:50,890
in the wild but this is something that

00:09:49,180 --> 00:09:52,360
one of our engineers that we've seen

00:09:50,890 --> 00:09:54,130
like people post about in one of our

00:09:52,360 --> 00:09:56,650
engineers figured out how you could

00:09:54,130 --> 00:09:59,050
apply it to Facebook is something called

00:09:56,650 --> 00:10:01,360
character set reinterpretation and the

00:09:59,050 --> 00:10:02,770
idea behind this attack is if you can

00:10:01,360 --> 00:10:04,450
convince the user to change the

00:10:02,770 --> 00:10:07,210
character set in their browser that can

00:10:04,450 --> 00:10:10,930
actually cause a security hole so in

00:10:07,210 --> 00:10:12,520
this instance well in this example that

00:10:10,930 --> 00:10:14,800
i'm going to give basically we have an

00:10:12,520 --> 00:10:16,300
input tag that has a value that has a

00:10:14,800 --> 00:10:21,220
japanese character in it the japanese

00:10:16,300 --> 00:10:22,930
character coo and if that if you do this

00:10:21,220 --> 00:10:24,430
if you give them this code or I'll put

00:10:22,930 --> 00:10:26,410
this code somehow and then you tell the

00:10:24,430 --> 00:10:28,450
user ok switch your character set from

00:10:26,410 --> 00:10:30,490
utf-8 which is what we normally use on

00:10:28,450 --> 00:10:33,520
facebook if you switch it from utf-8 to

00:10:30,490 --> 00:10:37,960
EU CJP then the browser starts miss

00:10:33,520 --> 00:10:40,030
parsing this and what normally this this

00:10:37,960 --> 00:10:41,980
coup is three bytes in utf-8 and then

00:10:40,030 --> 00:10:44,590
the quote is one bite but when you

00:10:41,980 --> 00:10:46,270
switch to EU CJP then you end up with

00:10:44,590 --> 00:10:47,710
the browser parsa get as two bites and

00:10:46,270 --> 00:10:49,650
two bites and so it completely misses

00:10:47,710 --> 00:10:52,030
the close quote character in this tag

00:10:49,650 --> 00:10:54,760
which gives the an attack or an

00:10:52,030 --> 00:10:58,240
opportunity to go through and and insert

00:10:54,760 --> 00:10:59,920
some JavaScript later on in the tag this

00:10:58,240 --> 00:11:01,150
is a pretty pretty clever attack and as

00:10:59,920 --> 00:11:02,830
I said I don't think we've ever seen

00:11:01,150 --> 00:11:06,280
this in the wild but we still didn't

00:11:02,830 --> 00:11:08,200
want to leave this as a possibility so

00:11:06,280 --> 00:11:12,070
what we actually ended up doing what

00:11:08,200 --> 00:11:15,310
is escaping those non-ascii characters

00:11:12,070 --> 00:11:16,690
so what we do is in any HTML tag if you

00:11:15,310 --> 00:11:18,280
have something that's not an H that's

00:11:16,690 --> 00:11:21,730
not an ascii character it gets escaped

00:11:18,280 --> 00:11:23,170
into its HTML entity form so there's

00:11:21,730 --> 00:11:24,640
basically no way the character set

00:11:23,170 --> 00:11:26,770
doesn't matter anymore as long as we all

00:11:24,640 --> 00:11:31,240
agree that on the base ascii characters

00:11:26,770 --> 00:11:32,740
it's fine and again this is you know i

00:11:31,240 --> 00:11:34,060
think a lot of modern browsers deal with

00:11:32,740 --> 00:11:35,800
this they actually handle this and it's

00:11:34,060 --> 00:11:37,600
not really a problem like if we say

00:11:35,800 --> 00:11:40,360
utf-8 the browser doesn't let the user

00:11:37,600 --> 00:11:41,860
change it anymore but this is something

00:11:40,360 --> 00:11:44,170
it's like nice to be able to protect

00:11:41,860 --> 00:11:45,610
against these things and xhp made this

00:11:44,170 --> 00:11:47,260
really simple because we had this one

00:11:45,610 --> 00:11:48,910
uniform place where we could escape

00:11:47,260 --> 00:11:50,650
everything where we could just take like

00:11:48,910 --> 00:11:52,690
basically make one line change and say

00:11:50,650 --> 00:11:54,430
okay when we're doing an attribute do

00:11:52,690 --> 00:11:56,460
this but we don't want to do it for body

00:11:54,430 --> 00:11:58,390
text like most of the body text on site

00:11:56,460 --> 00:12:00,460
body text doesn't have this problem

00:11:58,390 --> 00:12:04,030
because there's no quotes to be to be

00:12:00,460 --> 00:12:05,800
aware of so so we just decided okay body

00:12:04,030 --> 00:12:07,240
text doesn't doesn't matter and we can

00:12:05,800 --> 00:12:09,460
only do this for attributes and save us

00:12:07,240 --> 00:12:13,380
some you know so we're not adding too

00:12:09,460 --> 00:12:15,220
many more bites to the page ok so that's

00:12:13,380 --> 00:12:17,520
xss so let's move on to another

00:12:15,220 --> 00:12:20,560
vulnerability so sequel injection

00:12:17,520 --> 00:12:22,090
hopefully this is also really well known

00:12:20,560 --> 00:12:24,610
and everybody knows a lot of that sequel

00:12:22,090 --> 00:12:27,790
injection and how this works XKCD really

00:12:24,610 --> 00:12:29,710
helped with this process so you know

00:12:27,790 --> 00:12:31,180
again it's the same problem it's you're

00:12:29,710 --> 00:12:33,160
building up something you're building up

00:12:31,180 --> 00:12:34,540
a sequel query and you're sticking user

00:12:33,160 --> 00:12:36,010
data in there and if you're not careful

00:12:34,540 --> 00:12:38,740
about the user data you put in there

00:12:36,010 --> 00:12:40,480
then the person can break out and start

00:12:38,740 --> 00:12:43,740
executing whatever sequel queries they

00:12:40,480 --> 00:12:45,730
want so our first approach here was

00:12:43,740 --> 00:12:47,860
something that we call parameterised

00:12:45,730 --> 00:12:50,680
sequel so this looks a little bit like

00:12:47,860 --> 00:12:52,270
printf it basically we have all these

00:12:50,680 --> 00:12:53,650
percent and coatings that you can put

00:12:52,270 --> 00:12:56,290
into your query so you can say for

00:12:53,650 --> 00:12:58,270
instance % s I want to stick a string

00:12:56,290 --> 00:13:00,160
here in the query and then you give the

00:12:58,270 --> 00:13:01,780
argument and obviously this is not like

00:13:00,160 --> 00:13:02,980
printf if you did this with printf it

00:13:01,780 --> 00:13:04,990
would be horribly unsafe because you

00:13:02,980 --> 00:13:07,120
wouldn't it would be a sequel injection

00:13:04,990 --> 00:13:09,610
hole but this function automatically

00:13:07,120 --> 00:13:11,620
handles the escaping if there's a quote

00:13:09,610 --> 00:13:13,060
in the in the string for instance it

00:13:11,620 --> 00:13:18,160
puts a backslash before it and then it's

00:13:13,060 --> 00:13:19,990
been it's fine so this is fine this

00:13:18,160 --> 00:13:22,060
worked out pretty well for us for a

00:13:19,990 --> 00:13:23,620
while but again the

00:13:22,060 --> 00:13:26,980
there's and actually it's a really

00:13:23,620 --> 00:13:28,510
compelling API so one thing about this

00:13:26,980 --> 00:13:30,520
is this this lets we have a lot of

00:13:28,510 --> 00:13:32,320
specialized conversions that let you do

00:13:30,520 --> 00:13:34,450
things really easily and in sequel like

00:13:32,320 --> 00:13:38,320
if you want to put a list of integers or

00:13:34,450 --> 00:13:39,880
you have a map of sort of key names to

00:13:38,320 --> 00:13:41,470
values and you want to turn that into a

00:13:39,880 --> 00:13:44,260
where Clause we have a specialized thing

00:13:41,470 --> 00:13:47,020
% w that does that for you so there's a

00:13:44,260 --> 00:13:48,250
lot of really nice tricks that make it

00:13:47,020 --> 00:13:53,260
really easy to build up sequel queries

00:13:48,250 --> 00:13:54,730
using using this API so again the

00:13:53,260 --> 00:13:56,020
problem with this API though so it's got

00:13:54,730 --> 00:13:57,550
the compelling part going for it and

00:13:56,020 --> 00:14:00,580
it's pretty safe if you use it correctly

00:13:57,550 --> 00:14:03,910
but it is a bit hard to prevent misuse

00:14:00,580 --> 00:14:05,680
of this API so in particular there's

00:14:03,910 --> 00:14:07,840
nothing that prevents people from doing

00:14:05,680 --> 00:14:10,180
their own string concatenation and just

00:14:07,840 --> 00:14:12,550
shoving user data into the query

00:14:10,180 --> 00:14:15,040
somewhere so if somebody does this if

00:14:12,550 --> 00:14:16,270
they you know one one common pattern

00:14:15,040 --> 00:14:18,310
when you're building up a sequel query

00:14:16,270 --> 00:14:19,810
at least in our code base one common

00:14:18,310 --> 00:14:22,030
pattern is that people want to start by

00:14:19,810 --> 00:14:23,590
building up a where clause and then they

00:14:22,030 --> 00:14:24,940
want to you know and they'll maybe build

00:14:23,590 --> 00:14:26,350
that up piece by piece and then they'll

00:14:24,940 --> 00:14:29,770
stick that into a larger select

00:14:26,350 --> 00:14:31,330
statement somewhere and so this kind of

00:14:29,770 --> 00:14:32,950
you know when you end up having the

00:14:31,330 --> 00:14:34,750
sequel query built built up across

00:14:32,950 --> 00:14:36,610
multiple lines it can be easy to make

00:14:34,750 --> 00:14:39,130
mistakes like this where you shove some

00:14:36,610 --> 00:14:42,970
user data in there and there was no way

00:14:39,130 --> 00:14:44,650
for us to find this basically so the

00:14:42,970 --> 00:14:47,380
better way that you were supposed to do

00:14:44,650 --> 00:14:49,630
this was something you basically would

00:14:47,380 --> 00:14:52,240
call a function this was kind of like

00:14:49,630 --> 00:14:55,240
htmlspecialchars all over again you

00:14:52,240 --> 00:14:57,070
would call you're escaping function and

00:14:55,240 --> 00:14:59,950
you would build up the where clause as a

00:14:57,070 --> 00:15:02,110
string you would build a safe string for

00:14:59,950 --> 00:15:04,420
the where clause and then you would

00:15:02,110 --> 00:15:05,950
shove that into your query using % q

00:15:04,420 --> 00:15:08,830
which is a special thing that allows you

00:15:05,950 --> 00:15:11,440
to shove other bits of query in there so

00:15:08,830 --> 00:15:13,330
this is all right like you again you can

00:15:11,440 --> 00:15:14,800
make this safe but it's still not it's

00:15:13,330 --> 00:15:16,990
still not perfect because we still can't

00:15:14,800 --> 00:15:18,940
tell okay is this a safe query or is

00:15:16,990 --> 00:15:22,840
this unsafe so what we ended up

00:15:18,940 --> 00:15:24,370
switching to the newest thing is we have

00:15:22,840 --> 00:15:25,930
switched over to objects so this is

00:15:24,370 --> 00:15:29,020
basically the same solution for sequel

00:15:25,930 --> 00:15:30,370
that we had for xhp instead of passing a

00:15:29,020 --> 00:15:32,580
bunch of strings around instead of

00:15:30,370 --> 00:15:34,930
having sequel strings and unsafe strings

00:15:32,580 --> 00:15:35,550
instead of having HTML strings and

00:15:34,930 --> 00:15:37,200
unsafe store

00:15:35,550 --> 00:15:39,029
what we've done is turned everything

00:15:37,200 --> 00:15:40,830
into an object so you have sequel

00:15:39,029 --> 00:15:42,240
objects and then if it's a string again

00:15:40,830 --> 00:15:43,680
we just assume that all strings are

00:15:42,240 --> 00:15:48,420
unsafe and they have not been escaped

00:15:43,680 --> 00:15:49,800
yet so what's great about this API so

00:15:48,420 --> 00:15:51,420
you can build up your query piece by

00:15:49,800 --> 00:15:53,640
piece you can create a where clause and

00:15:51,420 --> 00:15:56,120
that's usually you can create a fragment

00:15:53,640 --> 00:15:59,399
of a query and that can be an SQL object

00:15:56,120 --> 00:16:02,220
what we enforce with this is the first

00:15:59,399 --> 00:16:03,839
argument to this SQL query the for

00:16:02,220 --> 00:16:05,730
instance this format string here this

00:16:03,839 --> 00:16:08,010
always has to be a constant string in

00:16:05,730 --> 00:16:10,290
the code base so it can't you're not

00:16:08,010 --> 00:16:12,060
allowed to stick any variables in there

00:16:10,290 --> 00:16:13,529
you're not allowed to do you know

00:16:12,060 --> 00:16:15,209
concatenate any variables in there and

00:16:13,529 --> 00:16:17,970
that's how we show that so there's

00:16:15,209 --> 00:16:20,850
basically lint roll that that says you

00:16:17,970 --> 00:16:23,370
may not do that so with that that's how

00:16:20,850 --> 00:16:24,990
we guarantee that there are no sequel

00:16:23,370 --> 00:16:26,670
injection holes in the code base this

00:16:24,990 --> 00:16:28,170
format string you know we know that the

00:16:26,670 --> 00:16:30,240
format string is a constant string and

00:16:28,170 --> 00:16:31,529
then we know that anything that you any

00:16:30,240 --> 00:16:33,360
of the other arguments that you pass

00:16:31,529 --> 00:16:35,220
into the sequel function like the the

00:16:33,360 --> 00:16:36,660
email parameter the where Clause we know

00:16:35,220 --> 00:16:40,230
those are going to be escaped correctly

00:16:36,660 --> 00:16:44,399
and down here in the with the % q down

00:16:40,230 --> 00:16:46,380
here we can say okay % q whenever we

00:16:44,399 --> 00:16:48,060
have % q that has to be a sequel object

00:16:46,380 --> 00:16:49,680
that's being passed down so again we can

00:16:48,060 --> 00:16:52,200
sort of tighten the whole thing up and

00:16:49,680 --> 00:16:56,370
we can make sure that there's no way for

00:16:52,200 --> 00:16:58,470
unsafe data to get in there so so this

00:16:56,370 --> 00:17:00,390
has been a pretty compelling API and it

00:16:58,470 --> 00:17:02,310
works pretty well one question you might

00:17:00,390 --> 00:17:04,439
have is why not use prepared sequel

00:17:02,310 --> 00:17:06,360
statements prepared sequel statements or

00:17:04,439 --> 00:17:08,880
you know a very common suggestion for

00:17:06,360 --> 00:17:10,770
how to avoid sequel injection there's

00:17:08,880 --> 00:17:12,900
kind of a few reasons for this one is

00:17:10,770 --> 00:17:14,459
that in some cases prepared statements

00:17:12,900 --> 00:17:17,040
takes a take an extra round trip to

00:17:14,459 --> 00:17:18,419
prepare which may not be a problem for

00:17:17,040 --> 00:17:20,490
if you have a small website that's

00:17:18,419 --> 00:17:22,530
probably not a problem for us our

00:17:20,490 --> 00:17:23,970
databases may be located at different

00:17:22,530 --> 00:17:26,480
data center or something so those round

00:17:23,970 --> 00:17:29,010
trips are actually really painful for us

00:17:26,480 --> 00:17:30,720
the other thing is as I mentioned all

00:17:29,010 --> 00:17:32,610
those other type conversions that we

00:17:30,720 --> 00:17:35,790
have we have a bunch of type conversions

00:17:32,610 --> 00:17:37,260
for comments for table names you know

00:17:35,790 --> 00:17:39,510
for building up where clauses and lists

00:17:37,260 --> 00:17:41,309
of integers and all of this and those it

00:17:39,510 --> 00:17:43,650
makes a very rich API compared to the

00:17:41,309 --> 00:17:47,480
standard prepared sequel statement API

00:17:43,650 --> 00:17:49,290
so this is why we've gone with that so

00:17:47,480 --> 00:17:50,580
beyond that though

00:17:49,290 --> 00:17:52,500
of course the thing is we've tried to

00:17:50,580 --> 00:17:54,810
really avoid sequel in the first place

00:17:52,500 --> 00:17:56,160
at Facebook we have a bunch of you know

00:17:54,810 --> 00:17:58,110
there's a bunch of internal tools and

00:17:56,160 --> 00:18:00,000
things that are still built using sequel

00:17:58,110 --> 00:18:03,150
queries but really what we've tried to

00:18:00,000 --> 00:18:05,640
do is move towards a social graph model

00:18:03,150 --> 00:18:07,380
a graph data model so basically what we

00:18:05,640 --> 00:18:10,770
have is we have a bunch of nodes in our

00:18:07,380 --> 00:18:13,110
graph or objects and each object can be

00:18:10,770 --> 00:18:14,790
connected to other objects using what we

00:18:13,110 --> 00:18:17,190
call associations which are edges in the

00:18:14,790 --> 00:18:18,960
graph and so we have this nice API that

00:18:17,190 --> 00:18:20,850
lets you create nodes that lets you

00:18:18,960 --> 00:18:22,410
create edges and there's basically no

00:18:20,850 --> 00:18:24,270
way that you can have any sort of

00:18:22,410 --> 00:18:27,180
injection attack against that you're not

00:18:24,270 --> 00:18:29,250
writing sequel queries anymore you just

00:18:27,180 --> 00:18:30,690
specify this is the data that I want to

00:18:29,250 --> 00:18:32,340
put in there and the low level functions

00:18:30,690 --> 00:18:34,710
take care of all of the escaping so

00:18:32,340 --> 00:18:36,240
honestly this is the best way to take

00:18:34,710 --> 00:18:38,220
care of sequel problem you know sequel

00:18:36,240 --> 00:18:41,610
injection is to stop having your

00:18:38,220 --> 00:18:43,080
developers write SQL but you know that's

00:18:41,610 --> 00:18:45,300
not always possible but for us we've

00:18:43,080 --> 00:18:47,130
found a way and it has actually you know

00:18:45,300 --> 00:18:49,230
this has had a lot of benefits for us in

00:18:47,130 --> 00:18:50,610
terms of how we've designed our site so

00:18:49,230 --> 00:18:56,760
product engineer is just never rights

00:18:50,610 --> 00:18:58,830
equal now okay so let's move on to our

00:18:56,760 --> 00:19:03,120
third security problem so cross-site

00:18:58,830 --> 00:19:04,980
request forgery so the idea behind

00:19:03,120 --> 00:19:09,000
cross-site request forgery for those of

00:19:04,980 --> 00:19:10,500
you who don't know the idea is when you

00:19:09,000 --> 00:19:13,560
as a website when you receive a request

00:19:10,500 --> 00:19:15,300
you don't know for sure whether the user

00:19:13,560 --> 00:19:18,990
actually intended to make that request

00:19:15,300 --> 00:19:21,030
or not so what I mean is an attacker can

00:19:18,990 --> 00:19:25,010
post can put some code on their site

00:19:21,030 --> 00:19:27,870
that sends requests to facebook com and

00:19:25,010 --> 00:19:29,370
so if if a user goes and visits that

00:19:27,870 --> 00:19:31,710
attack our website and the attacker

00:19:29,370 --> 00:19:33,960
website sends you know triggers some

00:19:31,710 --> 00:19:36,420
requests to Facebook your browser will

00:19:33,960 --> 00:19:38,190
happily send along all the cookies for

00:19:36,420 --> 00:19:39,870
facebook com and when we get that

00:19:38,190 --> 00:19:41,460
request we get those cookies and it

00:19:39,870 --> 00:19:43,950
looks to us like the users logged in I

00:19:41,460 --> 00:19:46,380
mean the user is logged in and the

00:19:43,950 --> 00:19:48,450
problem is we don't know did the user

00:19:46,380 --> 00:19:50,430
you know when they made this action do

00:19:48,450 --> 00:19:51,720
they come from facebook com were they on

00:19:50,430 --> 00:19:53,880
Facebook and they click the like button

00:19:51,720 --> 00:19:55,890
or were they on this attacker site and

00:19:53,880 --> 00:19:59,670
the attackers website sent those

00:19:55,890 --> 00:20:01,590
requests to Facebook so the usual answer

00:19:59,670 --> 00:20:03,779
here for see surf is

00:20:01,590 --> 00:20:07,080
you add a sea surf token to everything

00:20:03,779 --> 00:20:09,450
okay so every form has a hidden element

00:20:07,080 --> 00:20:12,270
that contains this little secret code

00:20:09,450 --> 00:20:14,789
and the secret code it's a different

00:20:12,270 --> 00:20:16,230
secret code for every user so it's not

00:20:14,789 --> 00:20:18,210
possible like basically the attacker

00:20:16,230 --> 00:20:20,039
doesn't have any idea the attacker can't

00:20:18,210 --> 00:20:21,900
predict what this code is so they can't

00:20:20,039 --> 00:20:23,220
send it when they make the request so

00:20:21,900 --> 00:20:24,870
this allows us to distinguish between

00:20:23,220 --> 00:20:27,510
legitimate requests that came from

00:20:24,870 --> 00:20:29,010
facebook com where the user actually

00:20:27,510 --> 00:20:30,600
click the like button because that will

00:20:29,010 --> 00:20:32,970
have the token versus something that

00:20:30,600 --> 00:20:36,659
came from the attacker where that will

00:20:32,970 --> 00:20:39,210
not have the token so the first thing

00:20:36,659 --> 00:20:40,860
that we did a long time ago you know six

00:20:39,210 --> 00:20:43,649
years ago or something like that we were

00:20:40,860 --> 00:20:45,840
doing all manual checks of our tokens so

00:20:43,649 --> 00:20:47,250
this is really awful basically every

00:20:45,840 --> 00:20:49,020
endpoint started like this you would

00:20:47,250 --> 00:20:50,789
open you would like include your

00:20:49,020 --> 00:20:52,529
libraries you would check who the login

00:20:50,789 --> 00:20:54,659
who the logged in user was and then you

00:20:52,529 --> 00:20:57,659
would check okay does this request have

00:20:54,659 --> 00:21:00,000
AC serve token attached to it and this

00:20:57,659 --> 00:21:01,289
is basically like again this is like all

00:21:00,000 --> 00:21:03,029
the other things we've talked about if

00:21:01,289 --> 00:21:05,100
you have really good code reviews if you

00:21:03,029 --> 00:21:06,630
have a you know a bunch of product

00:21:05,100 --> 00:21:08,490
engineers who really understand security

00:21:06,630 --> 00:21:10,590
you can make this work it is possible

00:21:08,490 --> 00:21:11,880
but you're always going to you're

00:21:10,590 --> 00:21:14,010
probably going to forget something I

00:21:11,880 --> 00:21:15,330
mean with enough people with enough time

00:21:14,010 --> 00:21:18,360
you're going to forget to add this check

00:21:15,330 --> 00:21:20,029
somewhere so what we realized is that we

00:21:18,360 --> 00:21:23,490
needed to be checking this automatically

00:21:20,029 --> 00:21:25,740
so back in i think 2009 or something

00:21:23,490 --> 00:21:27,539
like that we decided to turn on

00:21:25,740 --> 00:21:30,570
automatic enforcement for see serve

00:21:27,539 --> 00:21:33,510
tokens and the way we divided this was

00:21:30,570 --> 00:21:35,899
we had get requests on one side and post

00:21:33,510 --> 00:21:38,010
requests on the other so get requests

00:21:35,899 --> 00:21:40,020
basically get requests they don't have

00:21:38,010 --> 00:21:41,460
to have a token okay a get request is

00:21:40,020 --> 00:21:43,620
just somebody coming to read data from

00:21:41,460 --> 00:21:46,380
the site but a get request is also not

00:21:43,620 --> 00:21:48,870
allowed to write any data on the site so

00:21:46,380 --> 00:21:50,340
what we did was we added check in all of

00:21:48,870 --> 00:21:51,899
our low level you know our database

00:21:50,340 --> 00:21:54,270
functions and anything else that did it

00:21:51,899 --> 00:21:56,190
right we added a check in there to say

00:21:54,270 --> 00:21:58,049
yes this is a post request you know this

00:21:56,190 --> 00:21:59,880
only works if it's a post request it

00:21:58,049 --> 00:22:02,220
doesn't work if it's a get request okay

00:21:59,880 --> 00:22:03,779
so and then post requests on the other

00:22:02,220 --> 00:22:05,760
hand we automatically check to the

00:22:03,779 --> 00:22:08,190
beginning of every post request okay you

00:22:05,760 --> 00:22:09,450
must have a SI sirve token and then once

00:22:08,190 --> 00:22:12,870
you have that okay it's fine you can go

00:22:09,450 --> 00:22:14,640
do rights so this was a huge step

00:22:12,870 --> 00:22:15,570
forward for us and it cleared up a lot

00:22:14,640 --> 00:22:19,130
of

00:22:15,570 --> 00:22:21,360
problems the only problem with this is

00:22:19,130 --> 00:22:23,630
you have to go through an instrument

00:22:21,360 --> 00:22:25,350
every single thing that might do a write

00:22:23,630 --> 00:22:26,850
some of these are really straightforward

00:22:25,350 --> 00:22:28,740
the database calls those are pretty

00:22:26,850 --> 00:22:30,240
straightforward when somebody makes a

00:22:28,740 --> 00:22:32,160
database query you can just look at the

00:22:30,240 --> 00:22:34,830
database query and say okay this is a

00:22:32,160 --> 00:22:37,980
select stable sorry this is a select

00:22:34,830 --> 00:22:40,200
statement so obviously that's just a

00:22:37,980 --> 00:22:41,550
read that's fine or this is an insert or

00:22:40,200 --> 00:22:42,990
an update or whatever and so that's a

00:22:41,550 --> 00:22:46,070
right statement and so you're not

00:22:42,990 --> 00:22:48,180
allowed to do that on a get request but

00:22:46,070 --> 00:22:50,220
there are other things that just don't

00:22:48,180 --> 00:22:51,420
where it's harder to tell okay so we

00:22:50,220 --> 00:22:53,100
have a lot of back end services at

00:22:51,420 --> 00:22:54,360
Facebook and it's hard to tell when

00:22:53,100 --> 00:22:56,310
somebody makes a request to a back-end

00:22:54,360 --> 00:22:59,370
are they just reading data or they just

00:22:56,310 --> 00:23:01,290
are they trying to do something like or

00:22:59,370 --> 00:23:03,690
as an example our messages are all

00:23:01,290 --> 00:23:06,450
stored in a separate a separate service

00:23:03,690 --> 00:23:08,190
and so whenever you send a message

00:23:06,450 --> 00:23:10,080
you're sending this request off to the

00:23:08,190 --> 00:23:12,150
messages service and the question is how

00:23:10,080 --> 00:23:13,620
do you know did the person you know are

00:23:12,150 --> 00:23:15,900
you reading messages or you writing

00:23:13,620 --> 00:23:16,950
messages so you have to go in and

00:23:15,900 --> 00:23:18,990
there's always things that you're going

00:23:16,950 --> 00:23:20,370
to miss when you do this and so what we

00:23:18,990 --> 00:23:23,030
ended up doing is adding a second layer

00:23:20,370 --> 00:23:25,200
of protection and so the second layer is

00:23:23,030 --> 00:23:27,450
every endpoint controller on the site

00:23:25,200 --> 00:23:29,070
must declare is it a read endpoint or is

00:23:27,450 --> 00:23:30,780
it a right endpoint and again the same

00:23:29,070 --> 00:23:32,400
rules apply if it's a read endpoint

00:23:30,780 --> 00:23:34,110
you're not allowed to do any database

00:23:32,400 --> 00:23:35,850
rights you're not allowed to you don't

00:23:34,110 --> 00:23:37,440
need the sea serve token all of that but

00:23:35,850 --> 00:23:38,880
if it's a right endpoint that you are

00:23:37,440 --> 00:23:40,020
allowed to and you get the sea so you

00:23:38,880 --> 00:23:41,940
have to have the sea search token and

00:23:40,020 --> 00:23:45,120
all that so with these two things

00:23:41,940 --> 00:23:48,930
combined that lets us prevent most see

00:23:45,120 --> 00:23:51,420
surf problems there's a final thing that

00:23:48,930 --> 00:23:52,740
we can do in modern browsers so some

00:23:51,420 --> 00:23:54,810
amount of some modern browsers anyway

00:23:52,740 --> 00:23:57,090
they send an Origin header so the origin

00:23:54,810 --> 00:23:58,860
header says basically where the request

00:23:57,090 --> 00:24:01,440
came from so in one of these modern

00:23:58,860 --> 00:24:03,090
browsers if an attacker you know if evil

00:24:01,440 --> 00:24:05,310
com tries to send a request over to

00:24:03,090 --> 00:24:07,500
Facebook then the origin header will say

00:24:05,310 --> 00:24:11,310
evil calm and we can just regret rude

00:24:07,500 --> 00:24:12,810
sorry reject the request so that helps

00:24:11,310 --> 00:24:14,220
us a little bit but we still need all

00:24:12,810 --> 00:24:18,380
this other stuff because there are older

00:24:14,220 --> 00:24:20,610
browsers that just don't do that so

00:24:18,380 --> 00:24:22,440
anyway this is all great this automatic

00:24:20,610 --> 00:24:23,670
enforcement is great except that there

00:24:22,440 --> 00:24:25,920
are always times when people need to

00:24:23,670 --> 00:24:27,210
work around it I wish we could live in a

00:24:25,920 --> 00:24:28,950
perfect world where everybody you know

00:24:27,210 --> 00:24:29,430
nobody did any rights on a get request

00:24:28,950 --> 00:24:30,840
but

00:24:29,430 --> 00:24:32,970
that's just not true that's just not how

00:24:30,840 --> 00:24:35,910
the world works there's a couple reasons

00:24:32,970 --> 00:24:38,070
why people might need to do rights

00:24:35,910 --> 00:24:40,650
during a get request so one example

00:24:38,070 --> 00:24:42,930
would be if somebody there's certain

00:24:40,650 --> 00:24:44,610
pages on Facebook we keep track of the

00:24:42,930 --> 00:24:46,560
last time you visited that page so that

00:24:44,610 --> 00:24:47,940
we can show you oh hey here are the new

00:24:46,560 --> 00:24:51,420
things that showed up since the last

00:24:47,940 --> 00:24:52,860
time you were here so for those pages we

00:24:51,420 --> 00:24:54,090
need to write something every time you

00:24:52,860 --> 00:24:57,540
visit the page so we can keep track of

00:24:54,090 --> 00:25:00,360
that another example is there are some

00:24:57,540 --> 00:25:02,000
cases where we lazily create data the

00:25:00,360 --> 00:25:04,680
first time that you try to read it so

00:25:02,000 --> 00:25:06,390
there are some example as an example we

00:25:04,680 --> 00:25:08,850
have some random parameters that are

00:25:06,390 --> 00:25:10,890
used like parameters where we for each

00:25:08,850 --> 00:25:13,380
user we generate a random value and we

00:25:10,890 --> 00:25:14,910
don't generate that random value when

00:25:13,380 --> 00:25:16,170
you create the account we generated the

00:25:14,910 --> 00:25:17,310
first time that you ever need it the

00:25:16,170 --> 00:25:19,140
first time that you try to read it and

00:25:17,310 --> 00:25:21,090
so that's a case where you're reading

00:25:19,140 --> 00:25:23,550
data but actually you need to write

00:25:21,090 --> 00:25:24,600
something back to the database so the

00:25:23,550 --> 00:25:25,890
way that we deal with these are the

00:25:24,600 --> 00:25:28,110
original way that we dealt with these is

00:25:25,890 --> 00:25:30,150
something called a scope guard and so

00:25:28,110 --> 00:25:31,440
the idea of a scope guard is you've got

00:25:30,150 --> 00:25:32,970
this little section of code where you

00:25:31,440 --> 00:25:34,080
know ok I'm going to do something I'm

00:25:32,970 --> 00:25:35,280
going to cheat a little bit i'm going to

00:25:34,080 --> 00:25:38,340
do a write even though it's a get

00:25:35,280 --> 00:25:41,340
request so we had this way of saying

00:25:38,340 --> 00:25:42,630
okay you grab this guard and as long as

00:25:41,340 --> 00:25:44,340
you you know from the time that you

00:25:42,630 --> 00:25:46,470
create the guard until the time you call

00:25:44,340 --> 00:25:50,040
release you are allowed to do any rights

00:25:46,470 --> 00:25:52,230
to the databases so we gave it a really

00:25:50,040 --> 00:25:53,850
scary name because we found that product

00:25:52,230 --> 00:25:55,560
engineers if we didn't give it a scary

00:25:53,850 --> 00:25:56,910
name they would just call it they would

00:25:55,560 --> 00:25:58,800
just like get some error they would get

00:25:56,910 --> 00:26:00,090
a SI sirve error and they would just add

00:25:58,800 --> 00:26:01,770
the guard somewhere because they just

00:26:00,090 --> 00:26:03,150
wanted to make their product work so we

00:26:01,770 --> 00:26:05,520
needed to make it this a really scary

00:26:03,150 --> 00:26:06,870
name to make sure they understood what

00:26:05,520 --> 00:26:10,800
the consequences were of what they were

00:26:06,870 --> 00:26:13,740
doing now the problem that happens with

00:26:10,800 --> 00:26:15,030
scope guards is it's really hard to

00:26:13,740 --> 00:26:18,510
figure out where to put these scope

00:26:15,030 --> 00:26:19,770
guards in your stack so if you think

00:26:18,510 --> 00:26:21,120
about this from the top of your stack

00:26:19,770 --> 00:26:22,530
being an endpoint controller in the

00:26:21,120 --> 00:26:25,110
bottom being your low level like

00:26:22,530 --> 00:26:26,820
database access functions if you put the

00:26:25,110 --> 00:26:28,650
stack if you put the guard too high on

00:26:26,820 --> 00:26:30,120
your stack if you put it in an endpoint

00:26:28,650 --> 00:26:31,920
controller then you would allow any

00:26:30,120 --> 00:26:33,450
rights to happen in that endpoint

00:26:31,920 --> 00:26:34,830
controller so that's obviously too high

00:26:33,450 --> 00:26:36,810
and if you put it all the way in the

00:26:34,830 --> 00:26:38,910
low-level database access then you would

00:26:36,810 --> 00:26:42,210
allow any rights to happen on the site

00:26:38,910 --> 00:26:43,230
anywhere so you have to find this weird

00:26:42,210 --> 00:26:45,390
middle ground

00:26:43,230 --> 00:26:47,309
that is you know a logging function or

00:26:45,390 --> 00:26:48,780
something like that where you know okay

00:26:47,309 --> 00:26:50,100
everything going through here is safe

00:26:48,780 --> 00:26:52,740
and it's really hard to make sure that

00:26:50,100 --> 00:26:54,179
you choose the right place it's hard for

00:26:52,740 --> 00:26:56,549
me as a security engineer to choose that

00:26:54,179 --> 00:26:57,690
place it's even harder for our product

00:26:56,549 --> 00:27:00,240
engineers who don't think about this

00:26:57,690 --> 00:27:02,490
every day to choose that place so it's a

00:27:00,240 --> 00:27:03,600
really difficult problem to put that in

00:27:02,490 --> 00:27:08,549
to put the scope guard in the right

00:27:03,600 --> 00:27:10,110
place the other thing is we've as we've

00:27:08,549 --> 00:27:12,750
gone along we've moved towards more of

00:27:10,110 --> 00:27:15,090
an event-driven model for for

00:27:12,750 --> 00:27:17,040
programming at Facebook and so we have

00:27:15,090 --> 00:27:18,990
this feature called asynchronous

00:27:17,040 --> 00:27:21,450
functions which is basically a form of

00:27:18,990 --> 00:27:23,040
co routines that we use in facebook if

00:27:21,450 --> 00:27:24,840
you've used C sharp you might recognize

00:27:23,040 --> 00:27:27,960
this syntax it's quite similar to c

00:27:24,840 --> 00:27:29,669
sharp but basically we have a special

00:27:27,960 --> 00:27:31,799
keyword called a weight and what a

00:27:29,669 --> 00:27:33,570
weight does is it says okay I've got

00:27:31,799 --> 00:27:37,440
some long operation that I want to run

00:27:33,570 --> 00:27:39,390
so when I when I hit the await just stop

00:27:37,440 --> 00:27:41,460
executing me go off and execute some

00:27:39,390 --> 00:27:43,559
other stuff and then when that long

00:27:41,460 --> 00:27:45,150
running operation finishes come back and

00:27:43,559 --> 00:27:47,429
start running me again from this point

00:27:45,150 --> 00:27:49,320
so in this case you might have one

00:27:47,429 --> 00:27:52,380
function that grabs a guard and is

00:27:49,320 --> 00:27:54,179
trying to write some data but then it's

00:27:52,380 --> 00:27:55,620
because that right takes a long time we

00:27:54,179 --> 00:27:57,900
switch to a different a completely

00:27:55,620 --> 00:28:00,360
different function and then it tries to

00:27:57,900 --> 00:28:01,950
do a right and the thing is this right

00:28:00,360 --> 00:28:05,160
the guard is there i mean the guard is a

00:28:01,950 --> 00:28:07,440
global variable so the guard basically

00:28:05,160 --> 00:28:09,330
it doesn't matter like the global

00:28:07,440 --> 00:28:10,620
variable takes effect for both of these

00:28:09,330 --> 00:28:11,790
functions at the same time because

00:28:10,620 --> 00:28:13,799
they're kind of being run simultaneously

00:28:11,790 --> 00:28:16,350
I mean this is still a single threaded

00:28:13,799 --> 00:28:17,280
system to be clear but because we're

00:28:16,350 --> 00:28:18,870
switching back and forth between

00:28:17,280 --> 00:28:21,200
different functions this global variable

00:28:18,870 --> 00:28:23,400
model doesn't work very well at all so

00:28:21,200 --> 00:28:25,260
this was another reason why we had to

00:28:23,400 --> 00:28:27,990
abandon guard so like guards just don't

00:28:25,260 --> 00:28:30,270
work for us in our code base anymore so

00:28:27,990 --> 00:28:33,030
what we ended up doing is we realized

00:28:30,270 --> 00:28:35,490
really what we wanted it's not really we

00:28:33,030 --> 00:28:37,799
don't want to specify a specific code

00:28:35,490 --> 00:28:39,360
path that's safe or that is allowed to

00:28:37,799 --> 00:28:41,010
write generally what we want to do is we

00:28:39,360 --> 00:28:42,240
want to specify a specific type of data

00:28:41,010 --> 00:28:44,880
that's right that's allowed to be

00:28:42,240 --> 00:28:46,919
written so we want to say something like

00:28:44,880 --> 00:28:49,049
okay we've got a database table and all

00:28:46,919 --> 00:28:51,900
that the data in this table is logging

00:28:49,049 --> 00:28:54,630
data or we've got a specific type of

00:28:51,900 --> 00:28:56,419
object in the graph and this you know

00:28:54,630 --> 00:28:57,980
this object is always

00:28:56,419 --> 00:29:00,769
you know it's a special kind of data

00:28:57,980 --> 00:29:02,239
that we create lazily and so we switch

00:29:00,769 --> 00:29:05,149
to a whitelist where we basically say

00:29:02,239 --> 00:29:07,399
okay these database tables these node

00:29:05,149 --> 00:29:09,499
types these edge types you're allowed to

00:29:07,399 --> 00:29:11,799
write to those on a get request and this

00:29:09,499 --> 00:29:14,090
has been much more scalable for us it's

00:29:11,799 --> 00:29:15,559
it doesn't have any of the problems with

00:29:14,090 --> 00:29:16,669
async functions it doesn't have any of

00:29:15,559 --> 00:29:18,739
the problems with trying to figure out

00:29:16,669 --> 00:29:20,659
where to put this the garden you're in

00:29:18,739 --> 00:29:22,669
your code base there's still some cases

00:29:20,659 --> 00:29:24,529
where we need solutions like what we

00:29:22,669 --> 00:29:26,960
head back there but this is worked out

00:29:24,529 --> 00:29:31,929
so much better for us and it's been it's

00:29:26,960 --> 00:29:36,350
actually yeah it's been a huge help okay

00:29:31,929 --> 00:29:38,749
so next thing so cryptography so

00:29:36,350 --> 00:29:41,480
cryptography is a fun is a fun example

00:29:38,749 --> 00:29:43,249
because there's a really a clear example

00:29:41,480 --> 00:29:46,669
of a case where Facebook did this wrong

00:29:43,249 --> 00:29:48,320
and it caused problems so this is again

00:29:46,669 --> 00:29:49,639
a really long time ago most of my

00:29:48,320 --> 00:29:51,739
stories come from a long time ago when

00:29:49,639 --> 00:29:54,249
we didn't really we didn't have as good

00:29:51,739 --> 00:29:57,320
of a security team back then but

00:29:54,249 --> 00:29:58,609
basically there was this thing there's

00:29:57,320 --> 00:30:02,450
this feature that we have on Facebook

00:29:58,609 --> 00:30:04,220
called public photo links and the idea

00:30:02,450 --> 00:30:06,019
of a public photo link is that you might

00:30:04,220 --> 00:30:07,730
have an album they or something on

00:30:06,019 --> 00:30:08,840
Facebook or a photo that you want to

00:30:07,730 --> 00:30:10,700
share with somebody who doesn't actually

00:30:08,840 --> 00:30:12,739
have a Facebook account and so in order

00:30:10,700 --> 00:30:14,269
to enable that we have this way of

00:30:12,739 --> 00:30:16,749
generating a public photo link that has

00:30:14,269 --> 00:30:19,429
a special hash and that hatch says

00:30:16,749 --> 00:30:21,830
basically gives authentication that

00:30:19,429 --> 00:30:23,960
allows the person to see the album well

00:30:21,830 --> 00:30:26,749
so back in 2009 this is what our links

00:30:23,960 --> 00:30:29,239
look like the hash was five characters

00:30:26,749 --> 00:30:31,369
because a hexadecimal string if you do

00:30:29,239 --> 00:30:33,440
the math that's 20 bits that's only a

00:30:31,369 --> 00:30:35,509
million possibilities for this hash so

00:30:33,440 --> 00:30:36,649
basically what some guy figured out that

00:30:35,509 --> 00:30:39,289
you could just go through these one by

00:30:36,649 --> 00:30:41,210
one try every single possible hash until

00:30:39,289 --> 00:30:42,499
you found the one that worked and he

00:30:41,210 --> 00:30:46,220
wrote a blog post about it how you could

00:30:42,499 --> 00:30:48,200
basically see anybody's photos and you

00:30:46,220 --> 00:30:49,580
know it wasn't fast it took a little bit

00:30:48,200 --> 00:30:52,159
of time to run all these requests but it

00:30:49,580 --> 00:30:55,549
was still a really bad privacy problem

00:30:52,159 --> 00:30:57,409
for us so what's interesting is if you

00:30:55,549 --> 00:31:00,289
go and look at the function that does

00:30:57,409 --> 00:31:01,850
this that generated this code it has a

00:31:00,289 --> 00:31:04,460
huge number of examples of things that

00:31:01,850 --> 00:31:05,950
we did wrong with the cryptography so

00:31:04,460 --> 00:31:10,220
here's the function that we were using

00:31:05,950 --> 00:31:12,730
so basically what you had is we were get

00:31:10,220 --> 00:31:14,840
a secret a secret parameter for the user

00:31:12,730 --> 00:31:17,090
because obviously these photo links need

00:31:14,840 --> 00:31:19,549
to be different for every user and then

00:31:17,090 --> 00:31:21,590
we were doing an md5 and then we were

00:31:19,549 --> 00:31:24,500
taking the first five characters from

00:31:21,590 --> 00:31:26,419
the md5 so the first problem of course

00:31:24,500 --> 00:31:27,860
we were taking only five characters so

00:31:26,419 --> 00:31:30,020
that was really bad that's what allowed

00:31:27,860 --> 00:31:32,140
the person to iterate through all of

00:31:30,020 --> 00:31:34,610
them and try all million possibilities

00:31:32,140 --> 00:31:37,159
so the next thing there's a hard-coded

00:31:34,610 --> 00:31:38,150
secret in here so hard coded secrets are

00:31:37,159 --> 00:31:41,630
generally bad in your source code

00:31:38,150 --> 00:31:42,860
because first of all somebody might get

00:31:41,630 --> 00:31:45,919
a hold of your source code like your

00:31:42,860 --> 00:31:47,720
source code at least we try to assume

00:31:45,919 --> 00:31:49,309
that at Facebook that our source code

00:31:47,720 --> 00:31:51,110
eventually is going to leak and that

00:31:49,309 --> 00:31:52,370
somebody is going to see it so we

00:31:51,110 --> 00:31:54,470
shouldn't put secrets in here we should

00:31:52,370 --> 00:31:56,690
put secrets somewhere else where we can

00:31:54,470 --> 00:31:58,850
actually protect them the other thing is

00:31:56,690 --> 00:32:00,830
if you ever want to change the secret if

00:31:58,850 --> 00:32:02,809
the secret does get leaked you want a

00:32:00,830 --> 00:32:04,789
process in place for how to change that

00:32:02,809 --> 00:32:06,169
without completely disrupting everybody

00:32:04,789 --> 00:32:08,330
that's currently using a service and

00:32:06,169 --> 00:32:10,159
basically there's no way to rotate this

00:32:08,330 --> 00:32:12,169
secret safely the way this function is

00:32:10,159 --> 00:32:14,510
written then there's the fact that it's

00:32:12,169 --> 00:32:16,730
using md5 which is an old hash function

00:32:14,510 --> 00:32:18,740
it's not completely broken but there's a

00:32:16,730 --> 00:32:20,330
lot of known vulnerabilities in md5 and

00:32:18,740 --> 00:32:23,480
so it's just not a good idea to use it a

00:32:20,330 --> 00:32:26,030
new code and then there's the fact that

00:32:23,480 --> 00:32:27,830
this is a regular hash it's just a

00:32:26,030 --> 00:32:29,720
straight hash of the data rather than an

00:32:27,830 --> 00:32:31,610
H Mac so when you're doing any sort of

00:32:29,720 --> 00:32:34,700
this is essentially what we would call a

00:32:31,610 --> 00:32:36,620
message authentication code and in that

00:32:34,700 --> 00:32:38,240
case you need to use an h-back algorithm

00:32:36,620 --> 00:32:40,250
rather than doing this hash itself

00:32:38,240 --> 00:32:41,390
because there have been a text there's

00:32:40,250 --> 00:32:44,419
something called a length extension

00:32:41,390 --> 00:32:46,970
attack you can do on an md5 which anyway

00:32:44,419 --> 00:32:50,809
has actually affected other services but

00:32:46,970 --> 00:32:53,330
anyway this is just not a good strategy

00:32:50,809 --> 00:32:54,710
for for building like there's just a

00:32:53,330 --> 00:32:57,860
surprising number of things wrong with

00:32:54,710 --> 00:33:00,350
this function so what we ended up doing

00:32:57,860 --> 00:33:03,590
is building a library to take care of

00:33:00,350 --> 00:33:05,480
this for us so basically again the idea

00:33:03,590 --> 00:33:07,730
was let's build an API that is super

00:33:05,480 --> 00:33:09,440
easy to use that is way easier than

00:33:07,730 --> 00:33:11,570
writing this function ever would have

00:33:09,440 --> 00:33:12,440
been I mean this function is not you

00:33:11,570 --> 00:33:13,730
know you have to kind of think about

00:33:12,440 --> 00:33:15,950
what you're doing and make sure you're

00:33:13,730 --> 00:33:17,659
doing it all right nowadays you

00:33:15,950 --> 00:33:19,730
basically write three lines you create

00:33:17,659 --> 00:33:20,990
your uri signer Yusei which user you're

00:33:19,730 --> 00:33:22,970
trying to sign something forward and you

00:33:20,990 --> 00:33:23,740
sign it and that's it and it takes care

00:33:22,970 --> 00:33:25,730
of

00:33:23,740 --> 00:33:28,610
everything for you you know it generates

00:33:25,730 --> 00:33:30,980
it does all the all the cryptography it

00:33:28,610 --> 00:33:33,110
stores the keys this as you can see this

00:33:30,980 --> 00:33:35,000
this sorry the secret keys are not

00:33:33,110 --> 00:33:37,730
stored here in the code they're stored

00:33:35,000 --> 00:33:39,380
somewhere else there's a nice web

00:33:37,730 --> 00:33:41,180
interface where you can say I want to

00:33:39,380 --> 00:33:42,800
rotate this key it's time to get rid of

00:33:41,180 --> 00:33:45,740
the old keys and you can switch your

00:33:42,800 --> 00:33:47,960
your algorithm you can say I want to use

00:33:45,740 --> 00:33:50,240
ja one maybe somebody finds a flaw in

00:33:47,960 --> 00:33:52,640
sha-1 and so we go and switch everything

00:33:50,240 --> 00:33:54,080
over to sha-256 or child 5 12 or

00:33:52,640 --> 00:33:55,400
whatever that's really easy to do

00:33:54,080 --> 00:33:56,750
because we don't have to change any of

00:33:55,400 --> 00:33:58,190
the code we can just go do it in the

00:33:56,750 --> 00:34:01,910
configuration which is stored somewhere

00:33:58,190 --> 00:34:04,090
else and then checking the signature is

00:34:01,910 --> 00:34:06,710
just as simple it's also three lines so

00:34:04,090 --> 00:34:08,510
so this is a really great API it makes

00:34:06,710 --> 00:34:09,980
product engineers lives easier it makes

00:34:08,510 --> 00:34:13,100
my life easier because we don't have

00:34:09,980 --> 00:34:14,570
these bad security problems and then

00:34:13,100 --> 00:34:17,480
this is all based around a centralized

00:34:14,570 --> 00:34:19,130
cryptography library so again it's the

00:34:17,480 --> 00:34:21,200
same thing like let's make this as

00:34:19,130 --> 00:34:24,800
simple as possible to use as hard to get

00:34:21,200 --> 00:34:26,600
wrong as possible so these these

00:34:24,800 --> 00:34:29,420
operations the nice thing about building

00:34:26,600 --> 00:34:32,660
this cryptography API at first we

00:34:29,420 --> 00:34:35,300
implemented in entirely in C++ sorry in

00:34:32,660 --> 00:34:36,560
PHP and then we decided you know what it

00:34:35,300 --> 00:34:38,570
would actually be a good idea to move

00:34:36,560 --> 00:34:41,060
this out of PHP and move it into a

00:34:38,570 --> 00:34:44,300
separate service what this allows us to

00:34:41,060 --> 00:34:45,650
do is you know originally all of our

00:34:44,300 --> 00:34:46,910
secret keys even though they weren't in

00:34:45,650 --> 00:34:48,980
the source code they were still being

00:34:46,910 --> 00:34:50,360
pulled into the web server because if

00:34:48,980 --> 00:34:52,400
you're going to do this in PHP you need

00:34:50,360 --> 00:34:54,680
to have the key available to you there

00:34:52,400 --> 00:34:56,840
in the web server so now we have a

00:34:54,680 --> 00:34:58,160
separate crypto service that if you want

00:34:56,840 --> 00:34:59,540
to do certain crypto operations you

00:34:58,160 --> 00:35:01,430
actually go contact a separate service

00:34:59,540 --> 00:35:03,140
and it has the key and so the web server

00:35:01,430 --> 00:35:05,960
it ever even has access to it so this

00:35:03,140 --> 00:35:08,690
has allowed us to to make our keys

00:35:05,960 --> 00:35:13,220
actually more secure than they were in

00:35:08,690 --> 00:35:14,630
the past now of course we've got to

00:35:13,220 --> 00:35:16,160
convince everybody to use this library I

00:35:14,630 --> 00:35:18,190
mean hopefully everybody sees that it's

00:35:16,160 --> 00:35:20,360
amazing and just wants to use it but

00:35:18,190 --> 00:35:21,770
there's still people who don't know

00:35:20,360 --> 00:35:23,180
about it so we have a bunch of lint

00:35:21,770 --> 00:35:25,010
rules in the code base that check and

00:35:23,180 --> 00:35:26,930
see like oh are you trying to call md5

00:35:25,010 --> 00:35:28,130
are you trying to call one of the

00:35:26,930 --> 00:35:29,870
encryption functions or something like

00:35:28,130 --> 00:35:31,910
that and we give you a warning and tell

00:35:29,870 --> 00:35:35,060
you to go use our crypto API if you do

00:35:31,910 --> 00:35:37,330
that so this brings me into another

00:35:35,060 --> 00:35:41,320
bigger topic which is lint rules and

00:35:37,330 --> 00:35:42,550
all so we have an interesting system for

00:35:41,320 --> 00:35:45,040
writing some of these lint rolls at

00:35:42,550 --> 00:35:47,800
Facebook we have this thing called

00:35:45,040 --> 00:35:49,210
syntactical grep which is this is an

00:35:47,800 --> 00:35:50,920
open source project so you can download

00:35:49,210 --> 00:35:54,460
it and use it on your code base if you

00:35:50,920 --> 00:35:57,730
want what's cool about this is it allows

00:35:54,460 --> 00:35:59,980
you to write grip rules that are instead

00:35:57,730 --> 00:36:02,290
of being you know text-based they're

00:35:59,980 --> 00:36:04,030
based on the syntax tree of the PHP so I

00:36:02,290 --> 00:36:05,950
can say something like I want to find

00:36:04,030 --> 00:36:07,870
all calls to exec I mean these are the

00:36:05,950 --> 00:36:09,760
simple rules would be all calls to exec

00:36:07,870 --> 00:36:12,310
I want to find any call to system and he

00:36:09,760 --> 00:36:14,470
called the md5 something like that but

00:36:12,310 --> 00:36:16,180
then you can specify more complicated

00:36:14,470 --> 00:36:17,320
rules and then by the way this is

00:36:16,180 --> 00:36:19,600
exactly the way that the rules are

00:36:17,320 --> 00:36:22,510
written this is not like this is exactly

00:36:19,600 --> 00:36:24,250
what you type into sync tactical grab so

00:36:22,510 --> 00:36:26,050
you can say for instance I want to find

00:36:24,250 --> 00:36:27,850
any instance where somebody calls

00:36:26,050 --> 00:36:29,650
implode and the first parameter they

00:36:27,850 --> 00:36:31,210
pass is an ampersand because if they're

00:36:29,650 --> 00:36:32,740
doing that then they're probably trying

00:36:31,210 --> 00:36:34,360
to build up a URI and if they're

00:36:32,740 --> 00:36:36,610
building up a URI without using the URI

00:36:34,360 --> 00:36:37,690
class then that we've created then

00:36:36,610 --> 00:36:39,850
they're probably doing something wrong

00:36:37,690 --> 00:36:41,620
so this is an example of how we could

00:36:39,850 --> 00:36:44,710
try to detect some dangerous patterns in

00:36:41,620 --> 00:36:48,610
the code base this third one here the

00:36:44,710 --> 00:36:50,200
ternary operator case I many of you

00:36:48,610 --> 00:36:52,750
probably know that PHP is ternary

00:36:50,200 --> 00:36:54,670
operator has the wrong associativity so

00:36:52,750 --> 00:36:56,680
it's different from you know the way

00:36:54,670 --> 00:36:58,840
that it works in C++ and Java and all of

00:36:56,680 --> 00:37:00,490
that so this is just something that we

00:36:58,840 --> 00:37:02,080
just disallow for the code base because

00:37:00,490 --> 00:37:04,570
it's it's just going to confuse people

00:37:02,080 --> 00:37:06,820
if they see two ternary operators in a

00:37:04,570 --> 00:37:08,230
row but anyway the point is syntactical

00:37:06,820 --> 00:37:10,810
grip allows us to find these things

00:37:08,230 --> 00:37:11,710
really easily we don't have to worry you

00:37:10,810 --> 00:37:13,150
know it doesn't matter if there's

00:37:11,710 --> 00:37:14,880
comments in the way it doesn't matter if

00:37:13,150 --> 00:37:17,110
this is spread out across multiple lines

00:37:14,880 --> 00:37:20,620
it's in tactical grep will find the

00:37:17,110 --> 00:37:21,910
problem for us and then another tool

00:37:20,620 --> 00:37:24,460
that comes with this package is

00:37:21,910 --> 00:37:26,290
something called syntactical patch so

00:37:24,460 --> 00:37:27,640
the idea here is if you have some change

00:37:26,290 --> 00:37:30,070
that you want to make to the code base

00:37:27,640 --> 00:37:31,630
say you removed the second argument from

00:37:30,070 --> 00:37:33,610
a function and you want to remove that

00:37:31,630 --> 00:37:34,990
from all the call sites so tactical

00:37:33,610 --> 00:37:36,940
patch can help you with this so

00:37:34,990 --> 00:37:38,260
syntactical patch you basically provide

00:37:36,940 --> 00:37:40,420
something that looks like the

00:37:38,260 --> 00:37:42,610
syntactical grip thing but then you say

00:37:40,420 --> 00:37:46,300
okay I want to remove that second line

00:37:42,610 --> 00:37:47,590
that contains the Y parameter and you

00:37:46,300 --> 00:37:48,970
just run this across your code base and

00:37:47,590 --> 00:37:51,180
it'll make all the changes for you so

00:37:48,970 --> 00:37:53,700
this has been really helpful for us

00:37:51,180 --> 00:37:57,680
in terms of doing code migrations and

00:37:53,700 --> 00:37:57,680
things where we wanted to change api's

00:37:58,640 --> 00:38:06,180
okay so back to security vulnerabilities

00:38:03,380 --> 00:38:08,339
one thing that comes up a lot with a

00:38:06,180 --> 00:38:11,130
website many websites are built so that

00:38:08,339 --> 00:38:13,410
such that you have a firewall and you

00:38:11,130 --> 00:38:14,670
have an internal network which you know

00:38:13,410 --> 00:38:16,349
has all the web servers and has the

00:38:14,670 --> 00:38:18,180
databases and all of that and then you

00:38:16,349 --> 00:38:19,410
have the external network the wider

00:38:18,180 --> 00:38:20,970
internet and you want to keep those

00:38:19,410 --> 00:38:23,309
separate right you don't want to allow

00:38:20,970 --> 00:38:25,260
somebody outside your website to start

00:38:23,309 --> 00:38:28,140
making in you know arbitrary requests

00:38:25,260 --> 00:38:29,190
inside of your network so there's a

00:38:28,140 --> 00:38:32,010
bunch of cases where you have to be

00:38:29,190 --> 00:38:34,410
careful about this one of these is curl

00:38:32,010 --> 00:38:37,619
if you ever allow the user to control

00:38:34,410 --> 00:38:39,390
the URL that you give to curl then they

00:38:37,619 --> 00:38:41,130
have the opportunity basically what

00:38:39,390 --> 00:38:42,569
somebody could say is I'm going to give

00:38:41,130 --> 00:38:44,970
you a URL that points it one of your

00:38:42,569 --> 00:38:47,990
internal servers and then your web

00:38:44,970 --> 00:38:50,400
server will go try to fetch this URL and

00:38:47,990 --> 00:38:52,829
not knowing any better it'll just go

00:38:50,400 --> 00:38:55,349
contact this internal server you know

00:38:52,829 --> 00:38:56,819
hopefully you have authentication in

00:38:55,349 --> 00:38:59,700
place and stuff so hopefully this isn't

00:38:56,819 --> 00:39:02,400
a big deal but it's still a good

00:38:59,700 --> 00:39:04,250
practice to try to avoid letting anybody

00:39:02,400 --> 00:39:06,390
make these requests in the first place

00:39:04,250 --> 00:39:09,390
it's just good to have sort of more

00:39:06,390 --> 00:39:11,010
layers of security if possible so in

00:39:09,390 --> 00:39:13,170
this case yeah you don't want to ever do

00:39:11,010 --> 00:39:16,740
this where you pass a random URL to curl

00:39:13,170 --> 00:39:18,390
so what we ended up doing we just

00:39:16,740 --> 00:39:19,890
deprecated all these curl functions

00:39:18,390 --> 00:39:23,040
basically and replace them with our own

00:39:19,890 --> 00:39:24,630
curl library so we have our own curl

00:39:23,040 --> 00:39:26,549
class and the first thing you have to do

00:39:24,630 --> 00:39:28,440
whenever you try to do a curl inside of

00:39:26,549 --> 00:39:29,940
our code base is you have to say I'm

00:39:28,440 --> 00:39:31,710
trying to access an external server

00:39:29,940 --> 00:39:33,780
outside of Facebook or I'm trying to

00:39:31,710 --> 00:39:36,359
access an internal server and the idea

00:39:33,780 --> 00:39:38,670
here is well if you're taking a URL from

00:39:36,359 --> 00:39:40,740
the user presumably you doing external

00:39:38,670 --> 00:39:42,299
and so you specify external and then the

00:39:40,740 --> 00:39:43,710
curl library makes sure that okay

00:39:42,299 --> 00:39:45,599
there's no way that you can make a

00:39:43,710 --> 00:39:47,240
request to internal server and so that

00:39:45,599 --> 00:39:49,140
that prevents a lot of these problems

00:39:47,240 --> 00:39:51,089
and obviously if you're doing an

00:39:49,140 --> 00:39:52,920
internal request well hopefully you're

00:39:51,089 --> 00:39:57,030
doing that with a URL that you created

00:39:52,920 --> 00:39:59,369
yourself so this you know dealt with a

00:39:57,030 --> 00:40:01,530
lot of the problems for us this is a

00:39:59,369 --> 00:40:03,240
pretty good API and and honestly it's a

00:40:01,530 --> 00:40:04,800
little bit easier to use I think than

00:40:03,240 --> 00:40:06,330
the old API because

00:40:04,800 --> 00:40:07,770
because it's all packaged into an object

00:40:06,330 --> 00:40:11,120
and so it's just a little bit easier to

00:40:07,770 --> 00:40:12,900
use than the standard curl library but

00:40:11,120 --> 00:40:15,780
unfortunately this is not all that you

00:40:12,900 --> 00:40:18,420
have to deal with in PHP so we also have

00:40:15,780 --> 00:40:20,370
there's also the F open functions so

00:40:18,420 --> 00:40:22,830
these in PHP by default these can take

00:40:20,370 --> 00:40:24,930
URLs so this is something that we shut

00:40:22,830 --> 00:40:27,750
off in our code base there's an ini

00:40:24,930 --> 00:40:30,690
setting that you can use to to remove

00:40:27,750 --> 00:40:32,130
that not that you should be letting

00:40:30,690 --> 00:40:34,590
again not that you should be letting an

00:40:32,130 --> 00:40:36,330
user open an arbitrary file on your

00:40:34,590 --> 00:40:39,060
server but again this is just like

00:40:36,330 --> 00:40:41,730
adding extra layers of you know trying

00:40:39,060 --> 00:40:43,620
to stop an attacker if they happen to

00:40:41,730 --> 00:40:47,490
find a flaw let's limit the damage that

00:40:43,620 --> 00:40:51,240
they can do one interesting example that

00:40:47,490 --> 00:40:54,330
came up recently is something called XML

00:40:51,240 --> 00:40:56,700
and xml external entity vulnerability so

00:40:54,330 --> 00:40:59,370
this is something that that happens with

00:40:56,700 --> 00:41:01,290
lib XML basically whenever you're

00:40:59,370 --> 00:41:03,870
parsing an XML file there's this way an

00:41:01,290 --> 00:41:05,640
XML that you can specify ok I want you

00:41:03,870 --> 00:41:06,990
to go include this external resource

00:41:05,640 --> 00:41:10,500
where the external resource could be a

00:41:06,990 --> 00:41:13,470
file it could be a an HTTP URL or

00:41:10,500 --> 00:41:17,070
whatever and so the thing is this

00:41:13,470 --> 00:41:19,860
allowed a guy actually found this an

00:41:17,070 --> 00:41:21,390
external white hat guy actually found

00:41:19,860 --> 00:41:24,000
this and reported it to our bug bounty

00:41:21,390 --> 00:41:25,680
program and we actually paid him a ton

00:41:24,000 --> 00:41:27,150
of money for this big this is the large

00:41:25,680 --> 00:41:30,330
amount that we've ever paid out for a

00:41:27,150 --> 00:41:32,610
bug at Facebook and basically what it

00:41:30,330 --> 00:41:34,790
boiled down to was this external entity

00:41:32,610 --> 00:41:37,980
thing that he was able to find a way to

00:41:34,790 --> 00:41:40,290
execute or basically load arbitrary

00:41:37,980 --> 00:41:43,590
files so he could read our password file

00:41:40,290 --> 00:41:45,410
and he was able to even make web

00:41:43,590 --> 00:41:52,530
requests inside of our network and so

00:41:45,410 --> 00:41:54,270
this was pretty bad yeah and fortunately

00:41:52,530 --> 00:41:56,160
one interesting anyway we wrote up a

00:41:54,270 --> 00:41:57,780
blog post about it and he did too so if

00:41:56,160 --> 00:42:00,360
you're interested in that you check out

00:41:57,780 --> 00:42:02,370
this URL here which talks about how he

00:42:00,360 --> 00:42:04,530
found it and all that but unfortunately

00:42:02,370 --> 00:42:06,300
this is a really simple fix you just

00:42:04,530 --> 00:42:09,810
disable the external entity loader and

00:42:06,300 --> 00:42:12,720
lib XML and then you're done so a you

00:42:09,810 --> 00:42:14,040
know it's really interesting how just

00:42:12,720 --> 00:42:15,990
how many things you have to worry about

00:42:14,040 --> 00:42:17,400
how many that like this is something

00:42:15,990 --> 00:42:18,609
that's turned on by default that you

00:42:17,400 --> 00:42:20,920
wish was disabled by you

00:42:18,609 --> 00:42:26,529
because it's just kind of a problem

00:42:20,920 --> 00:42:27,880
waiting to happen okay so the next

00:42:26,529 --> 00:42:28,960
question then is we have all these

00:42:27,880 --> 00:42:31,960
vulnerabilities that we've talked about

00:42:28,960 --> 00:42:33,489
right so what do we do when we find a

00:42:31,960 --> 00:42:37,180
vulnerability on facebook how do we deal

00:42:33,489 --> 00:42:39,099
with that so obviously you know the

00:42:37,180 --> 00:42:41,289
first step is we'd love to just fix the

00:42:39,099 --> 00:42:44,049
code and push that code out and and get

00:42:41,289 --> 00:42:45,999
that on the site you know as I said

00:42:44,049 --> 00:42:47,349
earlier we push the website twice a day

00:42:45,999 --> 00:42:48,999
so we actually have a lot of

00:42:47,349 --> 00:42:50,829
opportunities to push fixes out to the

00:42:48,999 --> 00:42:52,329
website if need be we can do a hotfix

00:42:50,829 --> 00:42:54,160
and we can push that out and about an

00:42:52,329 --> 00:42:56,589
hour probably to get that out to the

00:42:54,160 --> 00:42:59,200
site but in some cases an hour is still

00:42:56,589 --> 00:43:01,450
too slow so one thing we built is this

00:42:59,200 --> 00:43:02,680
thing called take down the site and the

00:43:01,450 --> 00:43:04,779
reason we call it take down the site is

00:43:02,680 --> 00:43:06,849
because if you misuse it you could

00:43:04,779 --> 00:43:11,019
probably cause the whole site to stop

00:43:06,849 --> 00:43:13,660
working so what this is is it's a

00:43:11,019 --> 00:43:15,970
configuration variable that has a list

00:43:13,660 --> 00:43:17,259
of rules to run and these rules are

00:43:15,970 --> 00:43:19,539
evaluated at the beginning of every

00:43:17,259 --> 00:43:22,480
request on facebook so as an example

00:43:19,539 --> 00:43:26,049
this rule here says okay we're going to

00:43:22,480 --> 00:43:28,119
grab the HTTP host header out of the

00:43:26,049 --> 00:43:29,470
dollar underscore server and then we're

00:43:28,119 --> 00:43:31,839
going to check it against this regular

00:43:29,470 --> 00:43:33,489
expression here and if it matches the

00:43:31,839 --> 00:43:34,900
regular expression which is to say in

00:43:33,489 --> 00:43:37,150
this case it has a dangerous character

00:43:34,900 --> 00:43:40,480
in it then we're going to block the

00:43:37,150 --> 00:43:42,130
request here and this allows us you know

00:43:40,480 --> 00:43:44,380
this is something again that we were

00:43:42,130 --> 00:43:48,759
able to deploy in a matter of minutes to

00:43:44,380 --> 00:43:50,499
protect against a vulnerability the you

00:43:48,759 --> 00:43:52,210
don't have to go straight to blocking in

00:43:50,499 --> 00:43:53,559
order like in order to be safe here

00:43:52,210 --> 00:43:55,809
normally what we do is we have a

00:43:53,559 --> 00:43:57,759
separate mode where we can say log

00:43:55,809 --> 00:43:59,470
anything first log anything that

00:43:57,759 --> 00:44:01,779
violates the rule okay and then you can

00:43:59,470 --> 00:44:03,519
test the rule you can test first of all

00:44:01,779 --> 00:44:04,569
is it logging everything like is it

00:44:03,519 --> 00:44:07,329
going to does it look like it's going to

00:44:04,569 --> 00:44:09,730
take down site or you know and then you

00:44:07,329 --> 00:44:11,349
can test your you know exploiting the

00:44:09,730 --> 00:44:13,450
vulnerability and you can see okay did

00:44:11,349 --> 00:44:14,589
that actually hit the log is this going

00:44:13,450 --> 00:44:16,420
to protect against what we think it's

00:44:14,589 --> 00:44:18,489
going to protect and then you switch it

00:44:16,420 --> 00:44:19,839
over to block so anyway the whole point

00:44:18,489 --> 00:44:22,119
is you can do this in a matter of

00:44:19,839 --> 00:44:24,460
minutes it's much faster than pushing

00:44:22,119 --> 00:44:26,799
code out to the site so this is a pretty

00:44:24,460 --> 00:44:29,140
fun tool that we use we don't use it a

00:44:26,799 --> 00:44:30,369
lot but when we need it when we really

00:44:29,140 --> 00:44:32,380
need to get a fix out quickly it's

00:44:30,369 --> 00:44:34,520
really helpful for us

00:44:32,380 --> 00:44:37,070
another example of how you might use

00:44:34,520 --> 00:44:39,020
this is suppose we discovered an xss

00:44:37,070 --> 00:44:41,390
vulnerability on a reflected xss

00:44:39,020 --> 00:44:43,760
vulnerability on facebook what we would

00:44:41,390 --> 00:44:44,960
do is we would say okay let's check the

00:44:43,760 --> 00:44:46,610
get parameter will take the get

00:44:44,960 --> 00:44:48,290
parameter here whatever that's called

00:44:46,610 --> 00:44:50,240
and we'll check does it have a less than

00:44:48,290 --> 00:44:52,340
sign somewhere in it and if so we would

00:44:50,240 --> 00:44:55,220
block it again to say that's a reflected

00:44:52,340 --> 00:44:56,960
XSS whole again right this is the kind

00:44:55,220 --> 00:44:58,760
of thing where if you did this you would

00:44:56,960 --> 00:45:00,350
probably be rejecting some legitimate

00:44:58,760 --> 00:45:01,970
requests there are probably people who

00:45:00,350 --> 00:45:03,530
would actually be writing you know a

00:45:01,970 --> 00:45:04,610
less than sign somewhere in there they

00:45:03,530 --> 00:45:07,160
would be writing less than three or

00:45:04,610 --> 00:45:08,240
whatever in there in their message and

00:45:07,160 --> 00:45:10,610
you would probably be blocking some

00:45:08,240 --> 00:45:12,170
legitimate requests but that's better

00:45:10,610 --> 00:45:13,670
than leaving the security hole you know

00:45:12,170 --> 00:45:15,620
and you can try to push that fix in the

00:45:13,670 --> 00:45:17,900
next hour and then remove this whole or

00:45:15,620 --> 00:45:22,070
remove this rule and then go back to to

00:45:17,900 --> 00:45:24,440
allowing everything so the other thing

00:45:22,070 --> 00:45:27,830
here as I mentioned we have a white hat

00:45:24,440 --> 00:45:29,540
program so if anybody finds a white hat

00:45:27,830 --> 00:45:31,190
sorry finds a vulnerability in facebook

00:45:29,540 --> 00:45:32,720
we are happy to pay money for that as

00:45:31,190 --> 00:45:35,090
long as you disclose that to us

00:45:32,720 --> 00:45:37,520
responsibly so this has helped us become

00:45:35,090 --> 00:45:39,230
a lot better in terms of knowing what

00:45:37,520 --> 00:45:40,610
things we need to be thinking about what

00:45:39,230 --> 00:45:41,990
are the things that are what are the

00:45:40,610 --> 00:45:45,250
vulnerabilities that are easy for people

00:45:41,990 --> 00:45:48,020
to find that we don't know about and and

00:45:45,250 --> 00:45:49,160
you know it's just generally it's been a

00:45:48,020 --> 00:45:51,020
really good practice and we've tried to

00:45:49,160 --> 00:45:52,670
be very open about this you know these

00:45:51,020 --> 00:45:55,280
are the kinds of vulnerabilities that

00:45:52,670 --> 00:45:56,750
people are finding and you know we will

00:45:55,280 --> 00:45:58,430
let people we often let people write

00:45:56,750 --> 00:46:01,280
blog posts about the things they found

00:45:58,430 --> 00:46:02,900
as i mentioned that guy who got the huge

00:46:01,280 --> 00:46:05,570
bug bounty reward you know he wrote a

00:46:02,900 --> 00:46:07,820
blog post about it so you know it's good

00:46:05,570 --> 00:46:11,360
for him it's good for us this is the

00:46:07,820 --> 00:46:14,330
goal of the program and finally just one

00:46:11,360 --> 00:46:16,100
thing here if you are interested in

00:46:14,330 --> 00:46:17,480
these web security topics i think this

00:46:16,100 --> 00:46:20,270
is a really great book it's called the

00:46:17,480 --> 00:46:22,340
tangled web it's got its by a guy who

00:46:20,270 --> 00:46:23,780
knows tons of stuff about browsers and

00:46:22,340 --> 00:46:26,360
how they work and what all the quirks

00:46:23,780 --> 00:46:28,130
are that you can run into so this wasn't

00:46:26,360 --> 00:46:30,890
a great resource for me in terms of

00:46:28,130 --> 00:46:34,030
figuring out what things i need to be we

00:46:30,890 --> 00:46:36,770
need to be thinking about now with that

00:46:34,030 --> 00:46:39,260
one final plug before i start taking

00:46:36,770 --> 00:46:41,270
questions just as i said i work in the

00:46:39,260 --> 00:46:42,560
london office we have about a hundred

00:46:41,270 --> 00:46:44,120
engineers in that office and we are

00:46:42,560 --> 00:46:44,730
hiring so if you're interested in that

00:46:44,120 --> 00:46:47,640
stuff

00:46:44,730 --> 00:46:50,130
shoot me an email or or go to our career

00:46:47,640 --> 00:46:53,880
site so with that does anybody have any

00:46:50,130 --> 00:47:00,150
questions and we're going to wait for

00:46:53,880 --> 00:47:02,250
microphones here so and yeah first off

00:47:00,150 --> 00:47:05,490
do you have any sort of combats against

00:47:02,250 --> 00:47:07,170
click hijacking at all click jacking yes

00:47:05,490 --> 00:47:09,000
okay so clickjacking is an interesting

00:47:07,170 --> 00:47:11,100
thing so the idea behind clickjacking is

00:47:09,000 --> 00:47:13,710
somebody takes one of our our webpages

00:47:11,100 --> 00:47:14,880
and they put it in an iframe and then

00:47:13,710 --> 00:47:16,470
they cover it up with something else

00:47:14,880 --> 00:47:21,540
that's usually a game or something that

00:47:16,470 --> 00:47:24,630
says like click here to get to to you

00:47:21,540 --> 00:47:27,240
know see a video or whatever and the

00:47:24,630 --> 00:47:29,250
things that we've done against this most

00:47:27,240 --> 00:47:31,560
almost all pages on the site are served

00:47:29,250 --> 00:47:33,720
with X frame options deny which keeps

00:47:31,560 --> 00:47:35,370
like you just can't attack it with that

00:47:33,720 --> 00:47:40,830
as long as we serve X frame options

00:47:35,370 --> 00:47:42,690
tonight the one the one outlier is all

00:47:40,830 --> 00:47:45,240
the social plugins that we put on other

00:47:42,690 --> 00:47:46,530
sites so for instance when you have a

00:47:45,240 --> 00:47:48,630
like button and you embed that on

00:47:46,530 --> 00:47:50,010
another site that is something where we

00:47:48,630 --> 00:47:51,990
can't say x frame options tonight

00:47:50,010 --> 00:47:55,740
because we want it to be on the other

00:47:51,990 --> 00:47:57,150
side so this is an unfortunate thing and

00:47:55,740 --> 00:47:58,080
it's not just true it's not just a

00:47:57,150 --> 00:47:59,370
problem for us it's a problem for

00:47:58,080 --> 00:48:03,300
anybody that has any sort of social

00:47:59,370 --> 00:48:05,220
plugin like this but we invest a lot of

00:48:03,300 --> 00:48:08,610
time in trying to detect clickjacking

00:48:05,220 --> 00:48:10,200
and so there's we have a huge spam

00:48:08,610 --> 00:48:12,420
fighting team whose job is to look for

00:48:10,200 --> 00:48:14,370
these sorts of things to look for mmm

00:48:12,420 --> 00:48:17,580
okay this is a URL that's getting shared

00:48:14,370 --> 00:48:18,870
a lot and then you know maybe if one

00:48:17,580 --> 00:48:22,080
thing that you can look at one signal

00:48:18,870 --> 00:48:23,580
you can look at is all these people you

00:48:22,080 --> 00:48:24,870
know shared this or they liked it and

00:48:23,580 --> 00:48:26,610
then they went back and they undid that

00:48:24,870 --> 00:48:28,890
later if they deleted the share or they

00:48:26,610 --> 00:48:30,180
unliked it or they later said I my

00:48:28,890 --> 00:48:31,860
account was hacked and we can kind of

00:48:30,180 --> 00:48:34,320
correlate that and use that to detect

00:48:31,860 --> 00:48:35,940
these so a lot of our time is spent

00:48:34,320 --> 00:48:38,700
trying to detect it after the fact

00:48:35,940 --> 00:48:41,220
trying to block domains that are doing

00:48:38,700 --> 00:48:42,330
this if we have domains that we know or

00:48:41,220 --> 00:48:45,180
spammy and are trying to use

00:48:42,330 --> 00:48:46,800
clickjacking we try to keep users from

00:48:45,180 --> 00:48:49,520
going to the sites so those are that's

00:48:46,800 --> 00:48:53,040
our general approach have a second one

00:48:49,520 --> 00:48:55,800
well let's eat it yeah go ahead go ahead

00:48:53,040 --> 00:48:56,850
no it's a really quick one and CSRF

00:48:55,800 --> 00:48:57,999
you're talking about is already

00:48:56,850 --> 00:48:59,289
reasonable you don't use in

00:48:57,999 --> 00:49:02,439
requests is that purely a

00:48:59,289 --> 00:49:03,849
man-in-the-middle attacks so it just was

00:49:02,439 --> 00:49:05,589
easier for us to make that distinction

00:49:03,849 --> 00:49:09,429
between get requests and post requests

00:49:05,589 --> 00:49:10,929
basically it's it's not a necessary

00:49:09,429 --> 00:49:12,219
distinction that you have to make as I

00:49:10,929 --> 00:49:14,679
said like you could do this by just

00:49:12,219 --> 00:49:16,479
having every right controller spesa tour

00:49:14,679 --> 00:49:18,729
sorry every endpoint controllers specify

00:49:16,479 --> 00:49:20,139
I'm a right controller or I'm not but we

00:49:18,729 --> 00:49:22,629
felt that it's just a little bit easier

00:49:20,139 --> 00:49:24,429
to do that with get and post requests in

00:49:22,629 --> 00:49:26,919
particular one thing we were worried

00:49:24,429 --> 00:49:28,089
about with a get request is if you put a

00:49:26,919 --> 00:49:30,189
get request if you put the cease or

00:49:28,089 --> 00:49:31,959
token in a get request then it ends up

00:49:30,189 --> 00:49:33,849
in the URL and the address bar and then

00:49:31,959 --> 00:49:35,529
the user might copy and paste that and

00:49:33,849 --> 00:49:37,389
send that to somebody else which would

00:49:35,529 --> 00:49:39,489
reveal their SI sirve token so then I

00:49:37,389 --> 00:49:41,109
think about a post request is the season

00:49:39,489 --> 00:49:50,589
of token is never there where the user

00:49:41,109 --> 00:49:52,659
can copy it so yeah just a quick

00:49:50,589 --> 00:49:54,759
follow-up on the sea sir tell ya and get

00:49:52,659 --> 00:49:56,859
some pace I mean obviously a right it's

00:49:54,759 --> 00:49:59,319
going to be really bad on that sort of

00:49:56,859 --> 00:50:01,509
attack but does it read is a risk of

00:49:59,319 --> 00:50:04,329
sensitive data exposure or disclosure

00:50:01,509 --> 00:50:05,799
knows its own right so this is an area

00:50:04,329 --> 00:50:07,029
where the browser helps us actually so

00:50:05,799 --> 00:50:10,059
the browser security model basically

00:50:07,029 --> 00:50:11,529
says if an external site tries to make a

00:50:10,059 --> 00:50:13,509
request to Facebook they're allowed to

00:50:11,529 --> 00:50:16,089
make the request but they can't see the

00:50:13,509 --> 00:50:17,439
response they can't see the the results

00:50:16,089 --> 00:50:18,969
of that request so there's actually no

00:50:17,439 --> 00:50:21,669
dater there's no danger of the data

00:50:18,969 --> 00:50:27,099
leaking to another site fortunately yeah

00:50:21,669 --> 00:50:31,109
yeah who else do we have do I have any

00:50:27,099 --> 00:50:31,109
other questions out there

00:50:36,029 --> 00:50:46,630
what's your impression on security about

00:50:39,849 --> 00:50:52,390
whatsapp that is a good question uh so I

00:50:46,630 --> 00:50:54,130
don't know the answer I what so

00:50:52,390 --> 00:50:55,930
generally what happens with these is we

00:50:54,130 --> 00:50:57,880
the security team gets to look at the

00:50:55,930 --> 00:51:00,490
code you know a week or so after the

00:50:57,880 --> 00:51:02,019
deal actually starts in this case I do

00:51:00,490 --> 00:51:03,220
not believe that the security team has

00:51:02,019 --> 00:51:05,710
had a chance to look at the code so i

00:51:03,220 --> 00:51:08,230
don't know the answer i honestly would

00:51:05,710 --> 00:51:09,700
be speculating but i would say the one

00:51:08,230 --> 00:51:11,380
good thing about what's up I mean

00:51:09,700 --> 00:51:12,490
Facebook is a very complicated web site

00:51:11,380 --> 00:51:15,039
where there are lots and lots of

00:51:12,490 --> 00:51:17,140
endpoints right whatsapp has a very

00:51:15,039 --> 00:51:18,460
small set of features and has a very

00:51:17,140 --> 00:51:19,900
small therefore it must have a very

00:51:18,460 --> 00:51:22,359
small set of endpoints that are exposed

00:51:19,900 --> 00:51:24,220
so I would hope that means it's not too

00:51:22,359 --> 00:51:25,869
hard to actually check the security of

00:51:24,220 --> 00:51:30,279
what's up but I honestly don't know the

00:51:25,869 --> 00:51:32,589
answer yeah but and like anything else

00:51:30,279 --> 00:51:34,359
that we acquire you know any acquisition

00:51:32,589 --> 00:51:37,359
that we make is becomes part of our bug

00:51:34,359 --> 00:51:44,259
bounty program so you know go start

00:51:37,359 --> 00:51:47,279
looking for problems anybody else is

00:51:44,259 --> 00:51:47,279
that it Oh back there in the

00:51:50,040 --> 00:51:56,890
how do you handle incoming user data

00:51:53,430 --> 00:51:58,900
like post requests get requests anything

00:51:56,890 --> 00:52:02,140
like you're talking about escaping it on

00:51:58,900 --> 00:52:03,700
the day basis for action layer would you

00:52:02,140 --> 00:52:06,040
do anything before that or do you just

00:52:03,700 --> 00:52:09,610
allow of your developers actors to be

00:52:06,040 --> 00:52:11,800
gay poster / variables right so our

00:52:09,610 --> 00:52:14,110
approach has been to generally we don't

00:52:11,800 --> 00:52:17,170
do any sanitization on input except we

00:52:14,110 --> 00:52:18,490
do utf-8 sanitization on input just to

00:52:17,170 --> 00:52:20,140
make sure because everything on facebook

00:52:18,490 --> 00:52:23,650
is supposed to be a valid utf-8 string

00:52:20,140 --> 00:52:25,720
but otherwise we allow any characters we

00:52:23,650 --> 00:52:27,640
kind of take the approach that people

00:52:25,720 --> 00:52:29,020
should be able to discuss whatever they

00:52:27,640 --> 00:52:32,290
want on facebook so they should be able

00:52:29,020 --> 00:52:34,300
to put you know less than signs in there

00:52:32,290 --> 00:52:36,190
you know and talk about HTML tags in

00:52:34,300 --> 00:52:39,670
their posts and we should handle that

00:52:36,190 --> 00:52:41,140
correctly so there's no sanitization on

00:52:39,670 --> 00:52:44,170
endpoint and one of the reasons that

00:52:41,140 --> 00:52:45,580
this is important is because you know

00:52:44,170 --> 00:52:47,350
honestly if you try to say I think

00:52:45,580 --> 00:52:49,780
sanitizing on input is really hard

00:52:47,350 --> 00:52:51,880
because there are so many different ways

00:52:49,780 --> 00:52:53,410
you can try to use the data since you're

00:52:51,880 --> 00:52:55,480
trying to use it in a sequel query you

00:52:53,410 --> 00:52:57,130
might try to use it in HTML you might

00:52:55,480 --> 00:52:58,870
try to put it into JavaScript and then

00:52:57,130 --> 00:53:03,100
put it into HTML you might try to put it

00:52:58,870 --> 00:53:05,650
into a CSS rule and so trying to cover

00:53:03,100 --> 00:53:08,020
all of those with a single set of rules

00:53:05,650 --> 00:53:10,840
is really on input is really really

00:53:08,020 --> 00:53:12,430
difficult and so we've gone with the

00:53:10,840 --> 00:53:14,110
approach of always escaping things on

00:53:12,430 --> 00:53:16,330
output rather than try to deal with it

00:53:14,110 --> 00:53:19,230
on input does that answer your question

00:53:16,330 --> 00:53:19,230
yes

00:53:22,180 --> 00:53:26,380
I think you mentioned one of the tools

00:53:24,370 --> 00:53:28,690
is on get up there or any of the others

00:53:26,380 --> 00:53:31,240
available at the moment so most of these

00:53:28,690 --> 00:53:33,550
unfortunately really tied strongly into

00:53:31,240 --> 00:53:37,030
our code base and we haven't found a way

00:53:33,550 --> 00:53:40,060
to pull them out separately I think

00:53:37,030 --> 00:53:41,950
maybe you know some of them I mean sorry

00:53:40,060 --> 00:53:44,950
X HP is an example of something that we

00:53:41,950 --> 00:53:46,480
have open source but I don't know if

00:53:44,950 --> 00:53:49,870
we've done a good job of maintaining

00:53:46,480 --> 00:53:51,870
that open source counterpart and one of

00:53:49,870 --> 00:53:54,790
the reasons that's been weird I mean

00:53:51,870 --> 00:53:56,500
honestly one of the reasons is weird is

00:53:54,790 --> 00:53:59,650
because we released an extension that

00:53:56,500 --> 00:54:02,260
worked for zend and now we use HH p.m.

00:53:59,650 --> 00:54:04,300
instead of zend so it's actually baked

00:54:02,260 --> 00:54:06,340
xhp is actually baked and does end and I

00:54:04,300 --> 00:54:07,750
think there's an effort to open source

00:54:06,340 --> 00:54:11,290
that library and make that work well for

00:54:07,750 --> 00:54:12,610
everyone react Jas which is I've

00:54:11,290 --> 00:54:15,280
mentioned this briefly but we do a

00:54:12,610 --> 00:54:17,830
similar thing to xhp that is entirely

00:54:15,280 --> 00:54:19,990
open sourced so that's there other

00:54:17,830 --> 00:54:21,640
things like you know our C surf

00:54:19,990 --> 00:54:23,920
framework that's the sort of thing

00:54:21,640 --> 00:54:25,360
that's really tied into a lot of hooks

00:54:23,920 --> 00:54:29,110
into our code base that would be very

00:54:25,360 --> 00:54:31,630
hard I think to pull out and share with

00:54:29,110 --> 00:54:32,470
other people unfortunately but anyway

00:54:31,630 --> 00:54:33,940
it's something we should definitely

00:54:32,470 --> 00:54:37,920
continue to think about because I think

00:54:33,940 --> 00:54:37,920
it's valuable to help other people

00:54:42,200 --> 00:54:47,170
is that it alright cool thanks guys

00:54:44,390 --> 00:54:47,170

YouTube URL: https://www.youtube.com/watch?v=z53RgVINzK8


