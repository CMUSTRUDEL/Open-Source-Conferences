Title: PHP UK Conference 2014 - Erika Heidi - Vagrant Provisioners In A Nutshell
Publication date: 2014-03-21
Playlist: PHP UK Conference 2014
Description: 
	Vagrant is one of the most mainstream tools on the devops world nowadays, specially between Open Source developers - now we can finally forget about the environment and focus on the code, without worrying about the "works on my machine" problem. This talk will review Vagrant basics and focus on its main provisioners - Puppet, Chef and Ansible - giving an overview of each one and how we can use them to provision a PHP development server. The talk will include a set of protips to create better and optimized vagrant development boxes for different kinds of projects.
Captions: 
	00:00:05,509 --> 00:00:11,160
good afternoon everybody the pleasure to

00:00:08,460 --> 00:00:12,929
be here my name is erica's you already

00:00:11,160 --> 00:00:16,650
know and I'm today i'm presenting

00:00:12,929 --> 00:00:19,800
integrant provisioners in a nutshell so

00:00:16,650 --> 00:00:23,640
let me present myself properly first I

00:00:19,800 --> 00:00:26,910
am from Brazil but I live in Amsterdam

00:00:23,640 --> 00:00:30,689
since 2012 and work with PHP for about

00:00:26,910 --> 00:00:32,669
10 years and I recently i published the

00:00:30,689 --> 00:00:34,980
book about vagrant online bub the

00:00:32,669 --> 00:00:37,410
vagrant cookbook I would talk a little

00:00:34,980 --> 00:00:41,280
bit more about it and before the end of

00:00:37,410 --> 00:00:45,960
the talk and what to expect from this

00:00:41,280 --> 00:00:48,719
talk this talk is focused on three most

00:00:45,960 --> 00:00:52,800
used vagrant provisioners puppet chef

00:00:48,719 --> 00:00:55,800
and NC bow but i will start with a quick

00:00:52,800 --> 00:00:58,140
guide on vagrant with the basics for

00:00:55,800 --> 00:01:02,760
those who aren't familiar yet with

00:00:58,140 --> 00:01:06,119
vagrant afterwards i will give you some

00:01:02,760 --> 00:01:08,640
tips for building better vagrant

00:01:06,119 --> 00:01:14,070
projects and i've shared some useful

00:01:08,640 --> 00:01:18,869
resources also for getting started so

00:01:14,070 --> 00:01:22,770
let's start one of the first things that

00:01:18,869 --> 00:01:24,869
people ask about vagrant when I talk

00:01:22,770 --> 00:01:27,540
about vagrants like why using vagrant

00:01:24,869 --> 00:01:29,460
because I've been working I've been

00:01:27,540 --> 00:01:33,869
developing for years and I never needed

00:01:29,460 --> 00:01:36,030
it and why do I need it now the truth is

00:01:33,869 --> 00:01:40,740
that you always needed but it will drink

00:01:36,030 --> 00:01:44,130
no I think this pretty much answers the

00:01:40,740 --> 00:01:46,950
question I think that everybody here

00:01:44,130 --> 00:01:50,070
probably already heard that or say that

00:01:46,950 --> 00:01:52,560
because it's a very common problem it's

00:01:50,070 --> 00:01:56,310
very hard to keep the environments

00:01:52,560 --> 00:01:58,439
unpassable and when even harder when you

00:01:56,310 --> 00:02:01,680
have a lot of coworkers in the same

00:01:58,439 --> 00:02:05,070
project and with different operating

00:02:01,680 --> 00:02:08,149
systems so vagrant comes to solve this

00:02:05,070 --> 00:02:10,709
problem by providing you with

00:02:08,149 --> 00:02:12,060
reproducible and portable development

00:02:10,709 --> 00:02:16,069
environments they

00:02:12,060 --> 00:02:19,470
on virtual machines and so it's

00:02:16,069 --> 00:02:22,790
reproducible because I'll all you need

00:02:19,470 --> 00:02:25,650
to to create this environment will be

00:02:22,790 --> 00:02:29,790
set in files you will define everything

00:02:25,650 --> 00:02:32,670
you need and this this files go with the

00:02:29,790 --> 00:02:36,030
project repository so you will just need

00:02:32,670 --> 00:02:38,670
to clone the repository and run vagrant

00:02:36,030 --> 00:02:41,910
app and in a few minutes your project

00:02:38,670 --> 00:02:44,340
will be up and running so it really

00:02:41,910 --> 00:02:47,370
enables easier cold collaboration and

00:02:44,340 --> 00:02:50,220
this is especially important for open

00:02:47,370 --> 00:02:53,010
source projects because it makes easier

00:02:50,220 --> 00:02:56,390
for the people to contribute you with

00:02:53,010 --> 00:02:59,340
the project if you have a vagrant set up

00:02:56,390 --> 00:03:01,920
someone can just clone and run vagrant

00:02:59,340 --> 00:03:04,790
app and start contributing without

00:03:01,920 --> 00:03:09,239
worrying about the environment and the

00:03:04,790 --> 00:03:12,660
requirements so you can always go can

00:03:09,239 --> 00:03:15,750
also use vagrant to perform some bacon

00:03:12,660 --> 00:03:18,690
environment tests to see how your

00:03:15,750 --> 00:03:20,910
application performs on different

00:03:18,690 --> 00:03:24,780
environments and different web servers

00:03:20,910 --> 00:03:27,569
for instance and you can also use

00:03:24,780 --> 00:03:29,700
vagrant to to test automation tools the

00:03:27,569 --> 00:03:33,780
configuration to that we are going to

00:03:29,700 --> 00:03:36,530
see today puppet chef and ansible it's a

00:03:33,780 --> 00:03:39,390
really nice way to to get started and

00:03:36,530 --> 00:03:42,209
vagrant can also be used to deploy real

00:03:39,390 --> 00:03:45,630
servers and services like digital ocean

00:03:42,209 --> 00:03:48,569
and a double yes and everything without

00:03:45,630 --> 00:03:50,579
messing with your working machine with

00:03:48,569 --> 00:03:55,170
your operating system you need don't eat

00:03:50,579 --> 00:03:57,780
you install sort of different softwares

00:03:55,170 --> 00:03:59,670
in your in your machine you can just

00:03:57,780 --> 00:04:04,230
create a vagrant with all the

00:03:59,670 --> 00:04:07,889
requirements for the project so what do

00:04:04,230 --> 00:04:10,609
you need to get started the basic thing

00:04:07,889 --> 00:04:15,019
you need is vagrant and virtualbox

00:04:10,609 --> 00:04:18,539
ritual box future box is the default

00:04:15,019 --> 00:04:22,720
vagrant provider because it's free and

00:04:18,539 --> 00:04:24,610
open source but what is the provider

00:04:22,720 --> 00:04:27,960
and it's a very important thing to

00:04:24,610 --> 00:04:32,800
understand about fragrance how it works

00:04:27,960 --> 00:04:36,340
so fragrance you have the host the host

00:04:32,800 --> 00:04:38,740
is your real machine where you have

00:04:36,340 --> 00:04:42,400
Figment installed and you need the

00:04:38,740 --> 00:04:44,890
provider a provider can be VirtualBox

00:04:42,400 --> 00:04:48,370
the default but can also be VMware or

00:04:44,890 --> 00:04:52,480
digital ocean on WS you can think about

00:04:48,370 --> 00:04:54,790
the provider as a computer store where

00:04:52,480 --> 00:04:57,070
you go and you have some requirements

00:04:54,790 --> 00:05:00,820
and they will provide you with a machine

00:04:57,070 --> 00:05:03,580
based on your requirements and with a

00:05:00,820 --> 00:05:06,340
basic operating system installed very

00:05:03,580 --> 00:05:08,920
basic and when you get this computer you

00:05:06,340 --> 00:05:11,500
will need to install yours your stuff

00:05:08,920 --> 00:05:15,070
your software's your web server and this

00:05:11,500 --> 00:05:16,990
is the role of the provisioner so the

00:05:15,070 --> 00:05:20,320
provisioner is responsible for

00:05:16,990 --> 00:05:22,930
automating the process of installing web

00:05:20,320 --> 00:05:25,780
server for instance apache and

00:05:22,930 --> 00:05:30,220
Jeanette's HB everything you need for

00:05:25,780 --> 00:05:32,919
the project to get up and running and so

00:05:30,220 --> 00:05:35,200
the quest machine is the virtual machine

00:05:32,919 --> 00:05:38,169
that you will you will create with

00:05:35,200 --> 00:05:40,240
vagrant so the provider will give you

00:05:38,169 --> 00:05:42,310
the glass and the provisioner will

00:05:40,240 --> 00:05:45,940
provision the quest will set up the

00:05:42,310 --> 00:05:48,820
quest with everything you need and as

00:05:45,940 --> 00:05:52,300
provisionals we have since the basic

00:05:48,820 --> 00:05:54,790
shell provisioner you can create some

00:05:52,300 --> 00:05:56,830
shell scripts to to install your stuff

00:05:54,790 --> 00:06:00,430
and do everything but the shell

00:05:56,830 --> 00:06:02,950
provisioner is very limited like you can

00:06:00,430 --> 00:06:06,400
do a lot of stuff of course but if you

00:06:02,950 --> 00:06:09,820
use an automation to like Papa Jeff and

00:06:06,400 --> 00:06:12,400
Sybil salt you will have more power

00:06:09,820 --> 00:06:15,370
because they are like frame words you

00:06:12,400 --> 00:06:18,190
have a lot of features built-in features

00:06:15,370 --> 00:06:21,310
you don't have to worry about all a lot

00:06:18,190 --> 00:06:28,750
of stuff that you would need you if you

00:06:21,310 --> 00:06:32,050
were using show so let's see a practical

00:06:28,750 --> 00:06:33,840
thing this is the simplest thing that

00:06:32,050 --> 00:06:36,780
does something

00:06:33,840 --> 00:06:40,230
is a vagrant file and when you create

00:06:36,780 --> 00:06:42,750
your project you have having vagrant and

00:06:40,230 --> 00:06:44,880
virtualbox already installed and then

00:06:42,750 --> 00:06:47,250
you will need to create a vagrant file

00:06:44,880 --> 00:06:53,630
the vagrant file contains the project

00:06:47,250 --> 00:06:57,330
settings so this is a very basic one and

00:06:53,630 --> 00:06:59,699
you can see that it's Ruby but it's not

00:06:57,330 --> 00:07:02,340
you don't need to know Ruby because it's

00:06:59,699 --> 00:07:06,180
really simple so this is the Box

00:07:02,340 --> 00:07:08,040
definition the box is the operating

00:07:06,180 --> 00:07:09,660
system basically is an image of an

00:07:08,040 --> 00:07:13,470
operating system with some metadata

00:07:09,660 --> 00:07:18,720
files usually will you will be using

00:07:13,470 --> 00:07:21,810
some previously provided box there are

00:07:18,720 --> 00:07:24,810
some official box from vagrants where

00:07:21,810 --> 00:07:27,330
you bunch of boxes the official ones for

00:07:24,810 --> 00:07:30,270
now but you also can find a lot of

00:07:27,330 --> 00:07:36,270
different boxes for sent OS previous day

00:07:30,270 --> 00:07:39,479
or other Linux distributions and this is

00:07:36,270 --> 00:07:42,680
the provision definition so this is the

00:07:39,479 --> 00:07:46,650
shell provisioner very basic example

00:07:42,680 --> 00:07:50,510
just an inline shell script is just a

00:07:46,650 --> 00:07:54,870
common and Neko Kamen so the next slides

00:07:50,510 --> 00:07:59,099
is a video showing how it works so it

00:07:54,870 --> 00:08:02,280
will run vagrant app and you can see

00:07:59,099 --> 00:08:06,419
that it's importing the bass box that i

00:08:02,280 --> 00:08:08,849
define it in the vagrant file so this

00:08:06,419 --> 00:08:11,550
box was already imported before in my

00:08:08,849 --> 00:08:14,240
system that's why it's not downloading

00:08:11,550 --> 00:08:16,620
if you if it's the first time ever

00:08:14,240 --> 00:08:19,349
vagrant wheel down would try to download

00:08:16,620 --> 00:08:23,789
that box that's why you provide also a

00:08:19,349 --> 00:08:28,289
URL you can also have a local file in

00:08:23,789 --> 00:08:30,510
your file system for a box and then you

00:08:28,289 --> 00:08:34,260
can see all the steps here it is it's

00:08:30,510 --> 00:08:37,529
using VirtualBox and setting the network

00:08:34,260 --> 00:08:41,700
forwarding ports and then it's booting

00:08:37,529 --> 00:08:45,990
the machine and at the end this is you

00:08:41,700 --> 00:08:46,450
can ignore this error the virtual the

00:08:45,990 --> 00:08:47,920
glass

00:08:46,450 --> 00:08:50,680
ditions don't need to worry that much

00:08:47,920 --> 00:08:54,670
about it if you have problems then you

00:08:50,680 --> 00:08:56,500
must update but it's really high you

00:08:54,670 --> 00:08:59,080
usually don't have problems with that

00:08:56,500 --> 00:09:02,440
and then here at the end you can see the

00:08:59,080 --> 00:09:05,560
output of that she'll inline scripts

00:09:02,440 --> 00:09:09,190
that we set up in a vagrant file very

00:09:05,560 --> 00:09:12,430
simple so normally of course you'll have

00:09:09,190 --> 00:09:15,850
a complex provision installing packages

00:09:12,430 --> 00:09:22,450
setting up configurations and everything

00:09:15,850 --> 00:09:25,690
you need and this is a quick cheat sheet

00:09:22,450 --> 00:09:29,110
of the Commons and vagrants so you have

00:09:25,690 --> 00:09:32,440
vagrant up the most famous one when your

00:09:29,110 --> 00:09:34,990
machine is turn it off then you must use

00:09:32,440 --> 00:09:39,940
vagrant app this will turn the machine

00:09:34,990 --> 00:09:42,220
on and if you already run the machine

00:09:39,940 --> 00:09:44,830
before provision admission before it

00:09:42,220 --> 00:09:46,930
will not run the provision but if it's

00:09:44,830 --> 00:09:51,220
the first time it will turn on the

00:09:46,930 --> 00:09:53,590
machine and run the provision vagrant as

00:09:51,220 --> 00:09:55,480
I say it is to log into the machine you

00:09:53,590 --> 00:09:58,090
don't need to provide a password by the

00:09:55,480 --> 00:10:02,740
fluid already runs had some keys by the

00:09:58,090 --> 00:10:06,070
fool and vagrant reload we reboot the

00:10:02,740 --> 00:10:08,200
machine so if your machine is already

00:10:06,070 --> 00:10:11,730
torino and you want you if you make

00:10:08,200 --> 00:10:14,440
changes to the vagrant file like adding

00:10:11,730 --> 00:10:17,290
specify specifying the memory or

00:10:14,440 --> 00:10:20,530
something else you have to reload the

00:10:17,290 --> 00:10:22,510
machine and you can also run only the

00:10:20,530 --> 00:10:25,390
provision if you're on vagrant provision

00:10:22,510 --> 00:10:28,720
this will only run the provisioners you

00:10:25,390 --> 00:10:31,870
define in your vagrant file to turn off

00:10:28,720 --> 00:10:34,150
the machine you run vagrant out if you

00:10:31,870 --> 00:10:37,630
want to save the state your own vagrant

00:10:34,150 --> 00:10:41,050
suspend and vagrant resumed you come

00:10:37,630 --> 00:10:44,080
back suspended machine and Raven destroy

00:10:41,050 --> 00:10:46,510
you use it for like cleaning everything

00:10:44,080 --> 00:10:49,150
all the changes and starting from

00:10:46,510 --> 00:10:51,040
scratch so if you are beautiful revision

00:10:49,150 --> 00:10:54,100
you'll need to use this comment

00:10:51,040 --> 00:10:58,019
sometimes check if you your process is

00:10:54,100 --> 00:11:01,689
all going well from the start to the end

00:10:58,019 --> 00:11:05,289
so do you have questions about the

00:11:01,689 --> 00:11:09,459
vagrants now anybody has a question this

00:11:05,289 --> 00:11:11,289
was the the basic guide on vagran it was

00:11:09,459 --> 00:11:13,179
really basic because we are going to

00:11:11,289 --> 00:11:17,829
focus on the provisioners but if you

00:11:13,179 --> 00:11:22,779
have questions for now no okay okay good

00:11:17,829 --> 00:11:27,039
very good okay so let's go for the

00:11:22,779 --> 00:11:29,649
provisioners so I call this a

00:11:27,039 --> 00:11:32,499
provisional tasting because it's a

00:11:29,649 --> 00:11:37,269
another view it's not possible to teach

00:11:32,499 --> 00:11:38,799
these tools in it out in three in and

00:11:37,269 --> 00:11:42,479
talked and possible because they are

00:11:38,799 --> 00:11:45,549
complex tools even using with vagrants

00:11:42,479 --> 00:11:47,379
they are a bit complex but I what I'm

00:11:45,549 --> 00:11:49,329
going to do is show the main

00:11:47,379 --> 00:11:52,779
characteristics and share were a

00:11:49,329 --> 00:11:55,059
practical example a simple example so

00:11:52,779 --> 00:11:58,679
you can compare them and then afterwards

00:11:55,059 --> 00:12:04,919
you can choose the one you like best

00:11:58,679 --> 00:12:08,729
let's start with ansible and Sybil is

00:12:04,919 --> 00:12:13,839
quite new comparing to the others and

00:12:08,729 --> 00:12:17,669
it's very straightforward to the scripts

00:12:13,839 --> 00:12:21,759
are written in y ml and it's very very

00:12:17,669 --> 00:12:25,989
clean and like very human readable the

00:12:21,759 --> 00:12:28,859
scripts are colored playbooks and the

00:12:25,989 --> 00:12:32,079
execution order in NC bow is sequential

00:12:28,859 --> 00:12:34,089
which means that the tasks are executed

00:12:32,079 --> 00:12:38,189
in the same order you define them in the

00:12:34,089 --> 00:12:40,720
file in a playbook which is good

00:12:38,189 --> 00:12:43,089
instable has a lot of built in modules

00:12:40,720 --> 00:12:47,379
to make things easier things like

00:12:43,089 --> 00:12:50,079
updating the apt get update for instance

00:12:47,379 --> 00:12:52,569
or that for dealing with digital ocean

00:12:50,079 --> 00:12:54,249
even on creating database users they

00:12:52,569 --> 00:12:57,519
have a lot of beauty in modules for

00:12:54,249 --> 00:13:01,239
helping with that you can also create

00:12:57,519 --> 00:13:04,349
your own modules and organize your your

00:13:01,239 --> 00:13:09,279
stuffing into roles there are kind of

00:13:04,349 --> 00:13:11,230
bundles with a specific task like engine

00:13:09,279 --> 00:13:14,140
X then you have a lot of

00:13:11,230 --> 00:13:17,980
blades or in tests to install and set up

00:13:14,140 --> 00:13:21,670
an engine x server in cebu is the third

00:13:17,980 --> 00:13:24,070
most user provisioner this data this

00:13:21,670 --> 00:13:29,200
information statistics are based on a

00:13:24,070 --> 00:13:32,140
research I made with 720 fragrant users

00:13:29,200 --> 00:13:36,760
in January so vagrant is the third most

00:13:32,140 --> 00:13:40,960
use it nowadays and the documentation is

00:13:36,760 --> 00:13:43,510
very clear very good and vagrants very

00:13:40,960 --> 00:13:46,810
own in cebu is very straightforward it's

00:13:43,510 --> 00:13:50,050
a really not not hard to get started

00:13:46,810 --> 00:13:53,350
with instable but there is something you

00:13:50,050 --> 00:13:55,150
need to install the ansible package to

00:13:53,350 --> 00:13:57,310
use ansible it's different from the

00:13:55,150 --> 00:14:01,870
other two provisioners that we are going

00:13:57,310 --> 00:14:05,350
to see because before a vagrant user to

00:14:01,870 --> 00:14:08,890
bundle the provisioners together with

00:14:05,350 --> 00:14:11,170
vegan so chef and puppet come together I

00:14:08,890 --> 00:14:14,050
gotta bundle together but for the newer

00:14:11,170 --> 00:14:16,120
ones they are not doing this anymore so

00:14:14,050 --> 00:14:22,360
you have to install instable it's not a

00:14:16,120 --> 00:14:25,210
big deal but just a heads up and this is

00:14:22,360 --> 00:14:28,240
the vagrant file the provisional part

00:14:25,210 --> 00:14:30,490
you probably remember the inline

00:14:28,240 --> 00:14:32,610
JavaScript we use it before so for

00:14:30,490 --> 00:14:36,160
instable we have something like that

00:14:32,610 --> 00:14:38,650
this is the very basic stuff we are just

00:14:36,160 --> 00:14:41,350
defining a playbook that we are going to

00:14:38,650 --> 00:14:43,990
use we can also set other options but

00:14:41,350 --> 00:14:48,510
this is that the basic the most basic

00:14:43,990 --> 00:14:52,800
stuff and this is an example of playbook

00:14:48,510 --> 00:14:56,460
it's a very simple playbook of course

00:14:52,800 --> 00:15:00,820
I'm telling here and Sybil to / from

00:14:56,460 --> 00:15:04,510
perform these two tasks here and using

00:15:00,820 --> 00:15:08,320
sudo for for both and to execute them in

00:15:04,510 --> 00:15:11,110
all the hosts with fragrant usually we

00:15:08,320 --> 00:15:13,330
have only one host but when you use only

00:15:11,110 --> 00:15:14,740
ansible you can have control a lot of

00:15:13,330 --> 00:15:18,070
different hosts a lot of different

00:15:14,740 --> 00:15:21,100
machines but with vagrant we usually

00:15:18,070 --> 00:15:24,310
don't don't need to worry about that so

00:15:21,100 --> 00:15:27,670
we are updating apt-get

00:15:24,310 --> 00:15:31,270
the apt and we are installing engine X

00:15:27,670 --> 00:15:33,820
and is it I will use this say the same

00:15:31,270 --> 00:15:38,380
example for the other provisioner so you

00:15:33,820 --> 00:15:44,230
can compare compare the the script so i

00:15:38,380 --> 00:15:48,040
will show running now i skipped the

00:15:44,230 --> 00:15:50,890
initial part the vagrant up initial part

00:15:48,040 --> 00:15:55,150
then this is the output from ansible you

00:15:50,890 --> 00:16:01,240
can see here running apt-get update and

00:15:55,150 --> 00:16:04,500
install engine X and that's oops yeah

00:16:01,240 --> 00:16:09,130
just but it's very straightforward and

00:16:04,500 --> 00:16:12,490
the output is nice also it's very it

00:16:09,130 --> 00:16:16,540
shows that all the tests performing nice

00:16:12,490 --> 00:16:20,320
and NC bow as I said before that it's

00:16:16,540 --> 00:16:23,920
very straightforward so if you are

00:16:20,320 --> 00:16:25,779
starting and you want you to get with

00:16:23,920 --> 00:16:30,040
started with something simple once you

00:16:25,779 --> 00:16:31,720
go is a good way to go and that was in

00:16:30,040 --> 00:16:38,830
stable now I'm going to talk about

00:16:31,720 --> 00:16:41,430
puppets so puppet puppet actually has

00:16:38,830 --> 00:16:43,870
two different provisioners for vagrants

00:16:41,430 --> 00:16:46,060
we are going to talk about puppet apply

00:16:43,870 --> 00:16:49,810
that is the most used provision for

00:16:46,060 --> 00:16:54,520
vagrant nowadays it also has puppet

00:16:49,810 --> 00:16:57,339
agents it's for using the the complex

00:16:54,520 --> 00:17:00,670
infrastructure with multiple nodes and

00:16:57,339 --> 00:17:03,820
everything and it the puppet agent

00:17:00,670 --> 00:17:06,670
requires a puppet server so it's more

00:17:03,820 --> 00:17:12,429
complex normally with vagrant you only

00:17:06,670 --> 00:17:18,670
need to use puppet apply puppet is has a

00:17:12,429 --> 00:17:21,400
custom syntax based on rub ruby and some

00:17:18,670 --> 00:17:23,260
people don't like that because like they

00:17:21,400 --> 00:17:25,540
got something and they make something

00:17:23,260 --> 00:17:28,120
cool stone is another thing that you

00:17:25,540 --> 00:17:30,160
have to learn but actually that's

00:17:28,120 --> 00:17:34,720
something good about it because it's

00:17:30,160 --> 00:17:36,610
very specific and like one job so it has

00:17:34,720 --> 00:17:41,290
more clarity

00:17:36,610 --> 00:17:45,630
it's something more specific and the

00:17:41,290 --> 00:17:48,220
puppet scripts are colored manifests and

00:17:45,630 --> 00:17:50,380
the most important thing about profit

00:17:48,220 --> 00:17:53,770
that's a bad thing is that the execution

00:17:50,380 --> 00:17:56,260
order is not sequential and you have to

00:17:53,770 --> 00:17:59,110
always remember that because like it's

00:17:56,260 --> 00:18:00,790
logical for you that the tests are going

00:17:59,110 --> 00:18:03,610
to be as a cuter in the same order you

00:18:00,790 --> 00:18:05,650
define them in the file but that's not

00:18:03,610 --> 00:18:08,140
what happens with puppets you have to

00:18:05,650 --> 00:18:10,090
explicitly declare dependencies you have

00:18:08,140 --> 00:18:12,640
to say that one task depends on other

00:18:10,090 --> 00:18:15,700
tests and this really adds some

00:18:12,640 --> 00:18:20,410
complexity to your scripts to your

00:18:15,700 --> 00:18:22,090
provision puppet is the most popular the

00:18:20,410 --> 00:18:25,559
most user provision of a vagrant

00:18:22,090 --> 00:18:28,750
nowadays and this is a really good thing

00:18:25,559 --> 00:18:31,780
by the other hand because you can find

00:18:28,750 --> 00:18:33,700
pretty much anything you want like to do

00:18:31,780 --> 00:18:35,740
you want to do something that you think

00:18:33,700 --> 00:18:38,049
that nobody did before but probably

00:18:35,740 --> 00:18:42,309
you're going to find it just have to

00:18:38,049 --> 00:18:44,260
search and you have a lot of modules on

00:18:42,309 --> 00:18:48,669
internet open source modules very easy

00:18:44,260 --> 00:18:51,669
to find and but the documentation is a

00:18:48,669 --> 00:18:54,280
bit confusing it's very verbose as a lot

00:18:51,669 --> 00:18:59,620
of stuff so sometimes it's a bit hard to

00:18:54,280 --> 00:19:01,360
get started but as it's very popular you

00:18:59,620 --> 00:19:05,590
can find a lot of good tutorials on

00:19:01,360 --> 00:19:08,679
internet so it's not so hard and also

00:19:05,590 --> 00:19:11,169
I'm going to talk about this before but

00:19:08,679 --> 00:19:13,510
there's a tool called puff bet that you

00:19:11,169 --> 00:19:15,100
can use to get started but there's also

00:19:13,510 --> 00:19:20,470
two for instable I'm going to talk to

00:19:15,100 --> 00:19:24,270
that about that later so this is the

00:19:20,470 --> 00:19:27,100
vagrant file for puppet the very simple

00:19:24,270 --> 00:19:31,090
vagrant file just defining a path for

00:19:27,100 --> 00:19:34,179
the modules we usually have used puppet

00:19:31,090 --> 00:19:38,860
with modules so we have a module for

00:19:34,179 --> 00:19:42,720
engine X for instance for PHP and to

00:19:38,860 --> 00:19:47,100
better organize our provision

00:19:42,720 --> 00:19:49,470
and this is a manifest this is the same

00:19:47,100 --> 00:19:52,289
thing that the ansible was doing the

00:19:49,470 --> 00:19:57,809
play book on in siebel you can see here

00:19:52,289 --> 00:20:01,830
the apt get update and the installation

00:19:57,809 --> 00:20:04,200
of engine exit package so perfect and

00:20:01,830 --> 00:20:07,440
author chef as you are going to see they

00:20:04,200 --> 00:20:09,900
see the a system through results so you

00:20:07,440 --> 00:20:13,460
define everything you're going to do you

00:20:09,900 --> 00:20:16,440
define resources so you have a package

00:20:13,460 --> 00:20:22,919
resources you have also file resources

00:20:16,440 --> 00:20:27,419
user resources and exact resources this

00:20:22,919 --> 00:20:30,080
line at the top is just for helping make

00:20:27,419 --> 00:20:33,929
it easier so you don't need here to

00:20:30,080 --> 00:20:38,130
provide the full path for the common you

00:20:33,929 --> 00:20:42,750
can just use apt-get update it's just

00:20:38,130 --> 00:20:47,010
defining the path and you can see here

00:20:42,750 --> 00:20:53,700
you can notice here the Packers the

00:20:47,010 --> 00:20:56,549
requirements of the the other task so

00:20:53,700 --> 00:21:00,000
you have to explicitly require that this

00:20:56,549 --> 00:21:04,950
this task is going to be executed only

00:21:00,000 --> 00:21:06,780
after this one so that's the tricky part

00:21:04,950 --> 00:21:10,890
of Puppets that you have to always

00:21:06,780 --> 00:21:13,350
remember because sometimes you when you

00:21:10,890 --> 00:21:14,970
add something you have a provision

00:21:13,350 --> 00:21:16,740
already working and you have you add

00:21:14,970 --> 00:21:19,740
something new and you forget about that

00:21:16,740 --> 00:21:30,360
and it breaks everything so always

00:21:19,740 --> 00:21:33,809
remember that and this is it running so

00:21:30,360 --> 00:21:42,120
it starts here running provisional

00:21:33,809 --> 00:21:45,419
puppet and apt-get update and the

00:21:42,120 --> 00:21:49,440
package installation but I don't know

00:21:45,419 --> 00:21:52,470
why this happened but maybe I can go

00:21:49,440 --> 00:21:54,429
back in but it's starting again I'm

00:21:52,470 --> 00:21:58,269
sorry about that

00:21:54,429 --> 00:22:00,249
the output of puppets is simpler is but

00:21:58,269 --> 00:22:02,889
you can make it more verbose if you want

00:22:00,249 --> 00:22:06,129
also for the other provisioners you can

00:22:02,889 --> 00:22:08,080
just add a line into the vagrant file to

00:22:06,129 --> 00:22:10,450
make it more for both so it will tell

00:22:08,080 --> 00:22:15,490
you more information about the tasks

00:22:10,450 --> 00:22:18,940
that are being as a kitten and this is

00:22:15,490 --> 00:22:21,879
puppet so as you can see it has some bad

00:22:18,940 --> 00:22:24,639
things like the the requirement the test

00:22:21,879 --> 00:22:27,009
requirement you have to declare but by

00:22:24,639 --> 00:22:30,999
the other hand it's very popular so it

00:22:27,009 --> 00:22:32,889
makes it easier to get started for for

00:22:30,999 --> 00:22:44,009
some people it might be easier because

00:22:32,889 --> 00:22:47,769
it's very popular and next chef so chef

00:22:44,009 --> 00:22:50,590
chef also has two different provisioners

00:22:47,769 --> 00:22:54,999
for vagrant there's chef solo and chef

00:22:50,590 --> 00:22:59,679
clients and chef solo the same way as

00:22:54,999 --> 00:23:02,019
puppets the simpler one chef client you

00:22:59,679 --> 00:23:06,820
need to have a chef server and more

00:23:02,019 --> 00:23:11,200
complex you usually don't need chef the

00:23:06,820 --> 00:23:14,200
scripts in chef are based are rubia are

00:23:11,200 --> 00:23:18,100
pure Ruby so you really actually right

00:23:14,200 --> 00:23:21,999
Ruby for the recipes there are also some

00:23:18,100 --> 00:23:26,129
Q stone staff there for some specific

00:23:21,999 --> 00:23:29,740
resources but it's pretty much Ruby and

00:23:26,129 --> 00:23:32,169
the screeds are colored recipes and they

00:23:29,740 --> 00:23:37,330
are organized into cookbooks which is

00:23:32,169 --> 00:23:40,090
cute you can also find a lot of

00:23:37,330 --> 00:23:42,429
cookbooks on internet it's very easy to

00:23:40,090 --> 00:23:45,789
find they have a lot of QuickBooks on

00:23:42,429 --> 00:23:48,899
the official website the execution order

00:23:45,789 --> 00:23:53,619
is sequential also as expected the

00:23:48,899 --> 00:23:56,320
normal thing and and chef is the second

00:23:53,619 --> 00:24:00,249
most used provisioner for vagrants and

00:23:56,320 --> 00:24:03,820
also some interesting information that I

00:24:00,249 --> 00:24:06,220
got in my research is that Chef is the

00:24:03,820 --> 00:24:07,180
most popular with Ruby developers of

00:24:06,220 --> 00:24:12,550
course

00:24:07,180 --> 00:24:18,160
because it's Ruby the documentation it's

00:24:12,550 --> 00:24:21,280
chaotic if someone new like you never

00:24:18,160 --> 00:24:23,170
use it vagrant or never use it some tool

00:24:21,280 --> 00:24:25,180
like this before and you go to the chef

00:24:23,170 --> 00:24:28,060
website to the documentation you really

00:24:25,180 --> 00:24:30,100
feel totally lost completely lost very

00:24:28,060 --> 00:24:32,950
hard to get started by their official

00:24:30,100 --> 00:24:35,410
documentation and the last time I

00:24:32,950 --> 00:24:39,250
checked they didn't even had a search

00:24:35,410 --> 00:24:42,700
box in the documentation so that's

00:24:39,250 --> 00:24:45,310
nonsense so but of course you can find

00:24:42,700 --> 00:24:48,430
third-party tutorials like tutorial

00:24:45,310 --> 00:24:51,100
tutorials were eaten by users and stuff

00:24:48,430 --> 00:24:53,320
like that but of the first thing you do

00:24:51,100 --> 00:24:56,170
is go to the official website when you

00:24:53,320 --> 00:24:59,790
want to learn something right and the

00:24:56,170 --> 00:25:04,600
document is really really complex and

00:24:59,790 --> 00:25:09,130
but chef is complex he has a lot of a

00:25:04,600 --> 00:25:12,250
complex infrastructure the normal usage

00:25:09,130 --> 00:25:14,800
for deploying and for all itself with

00:25:12,250 --> 00:25:17,740
vagrants is more simple you don't need

00:25:14,800 --> 00:25:20,200
all that stuff that's why it looks too

00:25:17,740 --> 00:25:23,200
much you know if you are going to use

00:25:20,200 --> 00:25:26,370
with vagrant but by the other hand chef

00:25:23,200 --> 00:25:29,820
is very powerful because it's the

00:25:26,370 --> 00:25:32,170
recipes are written in peel Ruby Ruby

00:25:29,820 --> 00:25:35,980
you can use pretty much everything

00:25:32,170 --> 00:25:40,030
inside it it's good for some people find

00:25:35,980 --> 00:25:44,280
it really amazing but maybe it's not so

00:25:40,030 --> 00:25:49,630
amazing because it loves it lose it lost

00:25:44,280 --> 00:25:54,370
clarity you know in favor of powerful so

00:25:49,630 --> 00:25:59,440
of power anyways this is a vagrant file

00:25:54,370 --> 00:26:03,790
for using chef so very simple also you

00:25:59,440 --> 00:26:05,920
add a recipe actually I it should be at

00:26:03,790 --> 00:26:10,950
cookbook because this is a cookbook not

00:26:05,920 --> 00:26:10,950
arrested but that's how it's done

00:26:11,220 --> 00:26:16,930
cookbooks are organized in a very

00:26:14,020 --> 00:26:19,210
specific way also the puppet modules are

00:26:16,930 --> 00:26:23,470
the same you have to use a specific

00:26:19,210 --> 00:26:26,590
big organization for the directory but

00:26:23,470 --> 00:26:29,370
it gets very well organized maybe a bit

00:26:26,590 --> 00:26:32,409
verbose you have to create a lot of

00:26:29,370 --> 00:26:37,240
subfolders and everything but it's okay

00:26:32,409 --> 00:26:42,340
it looks good at the end and this is a

00:26:37,240 --> 00:26:45,370
recipe so it's pretty strict for also if

00:26:42,340 --> 00:26:48,909
you like Ruby find it sexy as some

00:26:45,370 --> 00:26:50,770
people say you probably like that but

00:26:48,909 --> 00:26:56,049
first I'm gonna knew it might be

00:26:50,770 --> 00:26:57,730
complicated that blogs and you know it's

00:26:56,049 --> 00:27:01,870
not very straightforward if you're not

00:26:57,730 --> 00:27:04,870
used to the language but you you can

00:27:01,870 --> 00:27:08,350
learn that's not a problem right you got

00:27:04,870 --> 00:27:15,460
developers and this is the output from

00:27:08,350 --> 00:27:20,350
chef so it collected it's collecting

00:27:15,460 --> 00:27:22,840
some information cookbooks and it's more

00:27:20,350 --> 00:27:25,630
verbose and puppet you can see it's

00:27:22,840 --> 00:27:28,419
telling everything and you can make it

00:27:25,630 --> 00:27:36,399
even more verbose if you want to this is

00:27:28,419 --> 00:27:40,240
the default executing apt and oops okay

00:27:36,399 --> 00:27:42,730
sorry and so the output is more of

00:27:40,240 --> 00:27:46,630
verbal than puppet it shows more

00:27:42,730 --> 00:27:50,260
information which is good i like the

00:27:46,630 --> 00:27:53,380
output and everything so the thing about

00:27:50,260 --> 00:27:56,380
Chef is very powerful but you have to

00:27:53,380 --> 00:27:59,440
learn some Ruby you cannot use it

00:27:56,380 --> 00:28:02,289
without learning some Ruby so it might

00:27:59,440 --> 00:28:06,179
be it might be a bad thing for some

00:28:02,289 --> 00:28:11,679
people might be a you know barrier but

00:28:06,179 --> 00:28:14,679
it's very powerful and ok that was the

00:28:11,679 --> 00:28:16,929
provision a tasting so it was just an

00:28:14,679 --> 00:28:20,080
overview so you could compare them and

00:28:16,929 --> 00:28:24,360
see the the pros and cons of each one

00:28:20,080 --> 00:28:26,350
and now i'm going to talk about some

00:28:24,360 --> 00:28:30,539
important

00:28:26,350 --> 00:28:38,280
advice and building better vagrant boxes

00:28:30,539 --> 00:28:42,490
and projects the first thing is bugging

00:28:38,280 --> 00:28:45,460
so sometimes things that are not really

00:28:42,490 --> 00:28:49,330
going well and you have problems of

00:28:45,460 --> 00:28:52,059
course that happens and you can get some

00:28:49,330 --> 00:28:55,870
some really weird errors on vagrants

00:28:52,059 --> 00:28:57,610
sometimes and if you get some unknown

00:28:55,870 --> 00:29:00,539
vagrant arrow something that you really

00:28:57,610 --> 00:29:03,880
do the error message is not very clear

00:29:00,539 --> 00:29:06,640
then you should use the GUI from the

00:29:03,880 --> 00:29:10,510
provider in this case normally

00:29:06,640 --> 00:29:13,480
VirtualBox or VMware you can just open

00:29:10,510 --> 00:29:15,220
that the VirtualBox you have a list of

00:29:13,480 --> 00:29:18,070
all the machines you've already created

00:29:15,220 --> 00:29:20,950
in your system of the virtual machines

00:29:18,070 --> 00:29:22,630
and you can just run from there and if

00:29:20,950 --> 00:29:26,230
there is any problem with the provider

00:29:22,630 --> 00:29:29,620
it will show the message it will be more

00:29:26,230 --> 00:29:32,200
easier and clearer for you sometimes

00:29:29,620 --> 00:29:35,320
vagrant cannot cannot access like cannot

00:29:32,200 --> 00:29:38,169
know the make the error from vagrant

00:29:35,320 --> 00:29:41,020
from virtual box so even sometimes they

00:29:38,169 --> 00:29:43,990
like this in vagrant even stays in the

00:29:41,020 --> 00:29:46,659
error message if you have a vui from the

00:29:43,990 --> 00:29:51,789
provider open it to check the arrow and

00:29:46,659 --> 00:29:55,419
it's a good good tip if you have known

00:29:51,789 --> 00:29:58,179
provision or arrow say you are a runny

00:29:55,419 --> 00:29:59,890
Papa danceable chef and you have an area

00:29:58,179 --> 00:30:03,010
that's not clear the message then you

00:29:59,890 --> 00:30:05,140
should increase the verbosity as I said

00:30:03,010 --> 00:30:07,419
before you can do that by adding a line

00:30:05,140 --> 00:30:10,659
to the vagrant file and then you have

00:30:07,419 --> 00:30:15,520
much more information about what is

00:30:10,659 --> 00:30:19,020
going on and if it's not working and is

00:30:15,520 --> 00:30:22,720
expected which is the most common case

00:30:19,020 --> 00:30:27,360
there is no error but the server is not

00:30:22,720 --> 00:30:30,580
ready when you finishes and boom well

00:30:27,360 --> 00:30:33,549
then you have to log in a fix and

00:30:30,580 --> 00:30:37,570
automate because you cannot automate

00:30:33,549 --> 00:30:39,160
everything at first no sometimes you

00:30:37,570 --> 00:30:42,340
have to just log in

00:30:39,160 --> 00:30:48,700
stead and afterwards you know what to do

00:30:42,340 --> 00:30:53,560
to automate so the next row tip is about

00:30:48,700 --> 00:30:56,640
performance I didn't talk about this

00:30:53,560 --> 00:30:59,260
before but it's important you have a

00:30:56,640 --> 00:31:01,870
shared folder between the virtual

00:30:59,260 --> 00:31:04,570
machine the glass machine and the host

00:31:01,870 --> 00:31:07,620
machine because then you can keep

00:31:04,570 --> 00:31:10,630
working in your host machine using your

00:31:07,620 --> 00:31:14,260
phpstorm or anything else you want to

00:31:10,630 --> 00:31:17,560
use and just use the VMG run the

00:31:14,260 --> 00:31:19,900
application to test the application but

00:31:17,560 --> 00:31:21,850
for that you need to share the files in

00:31:19,900 --> 00:31:24,760
some way you need to have a common

00:31:21,850 --> 00:31:27,280
shared folder synchronized folder so you

00:31:24,760 --> 00:31:29,530
make changes here and the changes are

00:31:27,280 --> 00:31:33,700
reflected inside the view to a machine

00:31:29,530 --> 00:31:38,200
and vagrant by the full it creates a

00:31:33,700 --> 00:31:40,990
virtual shared folder inside the it

00:31:38,200 --> 00:31:43,740
shares on the location / vagrant inside

00:31:40,990 --> 00:31:47,860
the virtual machine it has a default

00:31:43,740 --> 00:31:51,790
synchronization folder but it's kind of

00:31:47,860 --> 00:31:55,270
low is low you have to use NFS if

00:31:51,790 --> 00:32:00,490
possible to make it faster but even with

00:31:55,270 --> 00:32:03,070
NFS it's still problematic when you have

00:32:00,490 --> 00:32:05,530
like symphony or other framework other

00:32:03,070 --> 00:32:08,200
application that has a lot of writing

00:32:05,530 --> 00:32:11,620
operations on this this has a high cost

00:32:08,200 --> 00:32:14,290
because it's it's change in the files it

00:32:11,620 --> 00:32:17,890
will try to synchronize and then it will

00:32:14,290 --> 00:32:21,820
be very slow so you can have to avoid

00:32:17,890 --> 00:32:24,160
that by changing the location you can

00:32:21,820 --> 00:32:26,590
change the cash and logs folder and

00:32:24,160 --> 00:32:29,800
symphony for instance is not very hard

00:32:26,590 --> 00:32:32,740
you can change the edit the app kernel

00:32:29,800 --> 00:32:35,200
and overwrite some methods and then you

00:32:32,740 --> 00:32:37,840
can change the location for outside the

00:32:35,200 --> 00:32:41,860
shared folder there will not be a big

00:32:37,840 --> 00:32:45,400
problem and you will be it will be very

00:32:41,860 --> 00:32:49,370
very faster so i have a demonstration

00:32:45,400 --> 00:32:53,660
like french screens of course

00:32:49,370 --> 00:32:57,530
this is the local server here in my

00:32:53,660 --> 00:33:01,070
machine and it's as simple as a symphony

00:32:57,530 --> 00:33:04,180
application and you can see here the

00:33:01,070 --> 00:33:07,970
this is like the complete loading time

00:33:04,180 --> 00:33:12,140
for the everything with the front-end

00:33:07,970 --> 00:33:15,500
resources everything so five seconds

00:33:12,140 --> 00:33:19,730
around five seconds and then when you go

00:33:15,500 --> 00:33:21,530
for the vagrant environment the same the

00:33:19,730 --> 00:33:26,090
very same application the very same

00:33:21,530 --> 00:33:29,390
thing it goes to 25 24 seconds so it's

00:33:26,090 --> 00:33:32,030
very slow and this is like to buy the

00:33:29,390 --> 00:33:34,970
fool so when you make this optimization

00:33:32,030 --> 00:33:37,670
that I said before to change the logs

00:33:34,970 --> 00:33:40,490
and cache folder it goes back to you

00:33:37,670 --> 00:33:43,580
five seconds and even it's even faster

00:33:40,490 --> 00:33:46,700
than the regular environment in your

00:33:43,580 --> 00:33:53,270
local machine so it really makes big

00:33:46,700 --> 00:33:55,130
difference ok that was the the pro tips

00:33:53,270 --> 00:33:59,870
and now i'm going to share some

00:33:55,130 --> 00:34:05,480
resources for you to get started yeah it

00:33:59,870 --> 00:34:08,750
has to be a cat right of course so the

00:34:05,480 --> 00:34:14,629
first one is the fed up of fate of puffy

00:34:08,750 --> 00:34:17,270
I'm not sure how it's called but this is

00:34:14,629 --> 00:34:20,120
one of the reasons puppets so popular

00:34:17,270 --> 00:34:22,370
especially with PHP developers because

00:34:20,120 --> 00:34:25,250
this project really makes it easier to

00:34:22,370 --> 00:34:29,300
get started with vagrant you can create

00:34:25,250 --> 00:34:32,899
a complex provisioner with a lot of

00:34:29,300 --> 00:34:35,840
different options and you just download

00:34:32,899 --> 00:34:39,590
a bundle with everything you need but

00:34:35,840 --> 00:34:42,560
it's puppet so maybe you are not going

00:34:39,590 --> 00:34:44,240
to like maybe you are going to like I

00:34:42,560 --> 00:34:48,320
don't know if you like it or not pop it

00:34:44,240 --> 00:34:53,690
if you like ansible now there's another

00:34:48,320 --> 00:34:58,190
option sensible this is really an early

00:34:53,690 --> 00:35:01,990
stages I built this this thursday I was

00:34:58,190 --> 00:35:04,480
like 12 hour 12 hours of work and

00:35:01,990 --> 00:35:08,230
of course it's open source so you can

00:35:04,480 --> 00:35:12,460
contribute and it's very simple for now

00:35:08,230 --> 00:35:14,710
but you can create the bundle the

00:35:12,460 --> 00:35:18,850
complete bundle for NC bow with

00:35:14,710 --> 00:35:21,640
different web servers and even a JDM so

00:35:18,850 --> 00:35:23,770
it's good right and can choose some

00:35:21,640 --> 00:35:26,650
packages but it's you really it's really

00:35:23,770 --> 00:35:29,380
an early stages so we need to improve

00:35:26,650 --> 00:35:34,360
that a little bit but it's working

00:35:29,380 --> 00:35:38,170
actually even working and if you want to

00:35:34,360 --> 00:35:40,750
go more deep into the provisioners and

00:35:38,170 --> 00:35:45,240
compare make a proper comparison between

00:35:40,750 --> 00:35:48,730
them it can also check these send box

00:35:45,240 --> 00:35:52,690
that i built and I share it on github it

00:35:48,730 --> 00:35:55,780
has the provisioner of a PHP web server

00:35:52,690 --> 00:35:58,480
and three different tools so you can

00:35:55,780 --> 00:36:05,310
actually compare them and see

00:35:58,480 --> 00:36:09,190
differences and everything and also I

00:36:05,310 --> 00:36:13,060
wrote this book on lean pub and there's

00:36:09,190 --> 00:36:16,420
this discount coupon if you want you get

00:36:13,060 --> 00:36:19,480
it on a special price so the book covers

00:36:16,420 --> 00:36:23,050
is similar to this dog but it goes of

00:36:19,480 --> 00:36:25,540
course way deeper into each topic and it

00:36:23,050 --> 00:36:29,190
shows how to get started in this

00:36:25,540 --> 00:36:32,380
provisional shows more information about

00:36:29,190 --> 00:36:39,310
about them and how to actually write

00:36:32,380 --> 00:36:42,210
some some provision with them and so you

00:36:39,310 --> 00:36:42,210
have questions

00:36:46,940 --> 00:37:00,079
oh yeah sure sorry I'm going to treat

00:36:55,250 --> 00:37:02,750
this also but if you want you so when

00:37:00,079 --> 00:37:04,130
you mention the of NFS mounting why

00:37:02,750 --> 00:37:06,170
weren't you storing the code on the

00:37:04,130 --> 00:37:08,540
vagrant box and mounting at the other

00:37:06,170 --> 00:37:12,619
direction I'm sorry I'm better at

00:37:08,540 --> 00:37:15,680
hearing okay so um you were storing the

00:37:12,619 --> 00:37:18,980
code on your host machine and then

00:37:15,680 --> 00:37:21,050
mounting sharing accord and then

00:37:18,980 --> 00:37:23,270
mounting that from your vagrant box when

00:37:21,050 --> 00:37:26,450
you brought up yes why didn't you have

00:37:23,270 --> 00:37:32,089
the codes on that box to cut your i/o

00:37:26,450 --> 00:37:35,210
down the things that it must be the code

00:37:32,089 --> 00:37:38,450
must be shared in some way right so you

00:37:35,210 --> 00:37:42,020
don't need you actually manually share

00:37:38,450 --> 00:37:45,829
because vagrants already does that it

00:37:42,020 --> 00:37:47,930
creates that shared folder and also you

00:37:45,829 --> 00:37:49,900
could copy the code but then it would

00:37:47,930 --> 00:37:52,750
not be updated if you make changes

00:37:49,900 --> 00:37:57,339
through the host machine you have to

00:37:52,750 --> 00:37:57,339
replicate the changes inside the box

00:38:01,060 --> 00:38:11,900
direction the IR when you run actually

00:38:09,829 --> 00:38:16,040
it's not like what from one direction

00:38:11,900 --> 00:38:18,170
it's it's something that for for the

00:38:16,040 --> 00:38:20,540
shared folders from virtualbox and by

00:38:18,170 --> 00:38:23,630
the fool it's it must be done in the

00:38:20,540 --> 00:38:28,310
both sides of the thing to keep

00:38:23,630 --> 00:38:33,910
synchronized so you could not use that

00:38:28,310 --> 00:38:36,319
and use in use VA MVM our inside your

00:38:33,910 --> 00:38:39,140
your virtual machine edit the files

00:38:36,319 --> 00:38:41,500
there also but it would be faster but

00:38:39,140 --> 00:38:45,010
then you cannot use the host machine I

00:38:41,500 --> 00:38:45,010
don't know my clear

00:38:46,619 --> 00:38:53,319
sorry her lease surely help the whole

00:38:51,670 --> 00:38:54,849
point of it is that the host machine is

00:38:53,319 --> 00:38:59,619
disposable you want to be able to throw

00:38:54,849 --> 00:39:03,880
it away ah the horse machine the Virgin

00:38:59,619 --> 00:39:05,619
glass the virtual yeah yeah yeah go to

00:39:03,880 --> 00:39:09,039
throw that away so you want the code on

00:39:05,619 --> 00:39:12,609
your local machine yeah yeah yeah

00:39:09,039 --> 00:39:19,450
exactly yeah you can destroy it and just

00:39:12,609 --> 00:39:20,769
do it again and you go sync again they

00:39:19,450 --> 00:39:22,509
don't have to set anything up in the

00:39:20,769 --> 00:39:25,180
host machine it's all configured in the

00:39:22,509 --> 00:39:27,430
gas so if you if you've set all that up

00:39:25,180 --> 00:39:30,960
in the guys then obviously if I give you

00:39:27,430 --> 00:39:34,390
a bigger file you can just do that but

00:39:30,960 --> 00:39:42,609
it just works yeah the code of be in the

00:39:34,390 --> 00:39:46,450
repository yeah and just like a vagrant

00:39:42,609 --> 00:39:48,910
will release a 1 dot 5 version soon and

00:39:46,450 --> 00:39:52,390
it will have a new resource for sharing

00:39:48,910 --> 00:39:56,710
folders it will use our sink also our

00:39:52,390 --> 00:39:59,470
sink which will probably be better they

00:39:56,710 --> 00:40:02,230
at least from the the blog post they say

00:39:59,470 --> 00:40:04,769
that will be way better and so we are

00:40:02,230 --> 00:40:07,960
really waiting for looking forward to it

00:40:04,769 --> 00:40:11,859
go ahead just a question about

00:40:07,960 --> 00:40:14,819
provisioners and so a well-written

00:40:11,859 --> 00:40:18,670
puppet module can be parameterised and

00:40:14,819 --> 00:40:20,829
therefore your Ops guys can take the

00:40:18,670 --> 00:40:23,440
same puppet modules they use for the

00:40:20,829 --> 00:40:24,880
production machine and give it to you to

00:40:23,440 --> 00:40:26,559
reuse and you just pass different

00:40:24,880 --> 00:40:29,529
parameters through to run it on your

00:40:26,559 --> 00:40:31,599
virtual machine yeah just wondering does

00:40:29,529 --> 00:40:33,430
ansible have something very similar to

00:40:31,599 --> 00:40:37,119
that because I don't know anything about

00:40:33,430 --> 00:40:41,289
ansible well it's a different

00:40:37,119 --> 00:40:44,410
infrastructure but you can use the same

00:40:41,289 --> 00:40:48,190
the same row the same tests you can use

00:40:44,410 --> 00:40:51,069
also for NC bow and pretty much the same

00:40:48,190 --> 00:40:53,829
but because of cost puppet has a master

00:40:51,069 --> 00:40:58,279
but ansible doesn't have a mess

00:40:53,829 --> 00:41:01,099
so you run everything from your like you

00:40:58,279 --> 00:41:03,680
are hearing from the shell you can run a

00:41:01,099 --> 00:41:08,089
comment in all the machines in your

00:41:03,680 --> 00:41:12,789
repository in your inventory it will run

00:41:08,089 --> 00:41:17,240
the playbooks you want so I think it's

00:41:12,789 --> 00:41:19,819
almost the same thing but different you

00:41:17,240 --> 00:41:22,039
know yeah and you can use the same if

00:41:19,819 --> 00:41:25,490
you've a grant also for providing the

00:41:22,039 --> 00:41:28,160
proc for you creating the machines on

00:41:25,490 --> 00:41:31,250
WTS and digital ocean you can use the

00:41:28,160 --> 00:41:32,390
very same tasks and just of course

00:41:31,250 --> 00:41:35,329
you're going to need to change some

00:41:32,390 --> 00:41:38,390
stuff to make it more safe and secure on

00:41:35,329 --> 00:41:41,240
the production but you can do that with

00:41:38,390 --> 00:41:46,759
variables and some specific some Q

00:41:41,240 --> 00:41:49,160
stones stuff I what have you found to be

00:41:46,759 --> 00:41:53,000
the main advantages of using ansible

00:41:49,160 --> 00:41:55,250
over a different provision er sorry what

00:41:53,000 --> 00:41:59,440
are the main advantages of using ansible

00:41:55,250 --> 00:42:02,359
rather than puppet or chef um well um

00:41:59,440 --> 00:42:05,900
the provisioner is just is really a

00:42:02,359 --> 00:42:08,059
personal taste something at you of

00:42:05,900 --> 00:42:11,299
course also if you have some legacy

00:42:08,059 --> 00:42:15,559
puppets provision you're not going to

00:42:11,299 --> 00:42:17,960
you are not want to use a new one to

00:42:15,559 --> 00:42:20,960
build everything from again you know the

00:42:17,960 --> 00:42:24,589
provisioner but and simo is very simple

00:42:20,960 --> 00:42:27,799
it's very clear it's more easy for other

00:42:24,589 --> 00:42:31,400
people to like you you've made the

00:42:27,799 --> 00:42:33,079
provisioner and another co-worker want

00:42:31,400 --> 00:42:35,119
to add something it's easier because

00:42:33,079 --> 00:42:38,180
it's human readable it's very

00:42:35,119 --> 00:42:40,160
straightforward it's the most the most

00:42:38,180 --> 00:42:48,410
important thing about instable the

00:42:40,160 --> 00:42:50,240
simplicity welcome all the questions so

00:42:48,410 --> 00:42:51,859
do you know if for uncivil there is

00:42:50,240 --> 00:42:54,079
something like a client-server

00:42:51,859 --> 00:42:57,140
architecture sensing that you have for

00:42:54,079 --> 00:43:01,759
puppet and chess like the with the

00:42:57,140 --> 00:43:03,529
master and so Papa MasterChef solo sorry

00:43:01,759 --> 00:43:05,560
chef thailand this is something similar

00:43:03,529 --> 00:43:10,720
for answer and Sybil

00:43:05,560 --> 00:43:13,360
as far as I know no because you when you

00:43:10,720 --> 00:43:17,320
run in siebel without vagrant like just

00:43:13,360 --> 00:43:20,620
in siebel you run from your machine from

00:43:17,320 --> 00:43:23,830
it uses ssh to run the comments you

00:43:20,620 --> 00:43:27,520
don't need the server is not that's why

00:43:23,830 --> 00:43:30,430
it's simple overall simplicity because

00:43:27,520 --> 00:43:34,030
you just run here you can run without

00:43:30,430 --> 00:43:36,820
vagrant you can run NC bo on the on my

00:43:34,030 --> 00:43:39,220
inventory web servers and you can have

00:43:36,820 --> 00:43:41,950
different groups of servers and Cameron

00:43:39,220 --> 00:43:45,250
comments in in separated group of

00:43:41,950 --> 00:43:47,620
servers innocent the other thing is you

00:43:45,250 --> 00:43:49,600
set at the very beginning that uncivil

00:43:47,620 --> 00:43:51,430
is not installed by default in the root

00:43:49,600 --> 00:43:53,020
on the change yeah so you I guess that

00:43:51,430 --> 00:43:55,750
you have to run its shell script a

00:43:53,020 --> 00:43:58,510
provisional no no you don't need to

00:43:55,750 --> 00:44:00,730
install on the question the host you

00:43:58,510 --> 00:44:03,160
have to when you in the place you are

00:44:00,730 --> 00:44:05,260
going to use vagrants you need to when

00:44:03,160 --> 00:44:08,710
you have vagrant in virtualbox install

00:44:05,260 --> 00:44:10,840
you have to also install ansible but if

00:44:08,710 --> 00:44:13,300
you are going to use the other tools

00:44:10,840 --> 00:44:16,900
without vagrant you also have to install

00:44:13,300 --> 00:44:20,470
puppets and chef in your machine to run

00:44:16,900 --> 00:44:24,220
puppet to run in siebel you know but you

00:44:20,470 --> 00:44:28,240
rang uncivil in the guest you run from

00:44:24,220 --> 00:44:31,240
the host vagrant will run from the host

00:44:28,240 --> 00:44:36,010
and then it will perform the tasks

00:44:31,240 --> 00:44:38,040
inside the glass using SSH ok ok thank

00:44:36,010 --> 00:44:38,040
you

00:44:44,880 --> 00:44:51,910
you mentioned the public chef have

00:44:49,079 --> 00:44:53,490
ready-made recipes modules of your

00:44:51,910 --> 00:44:59,700
dining experience Keys ansible galaxy

00:44:53,490 --> 00:45:05,230
and Sybil for ansible there are roles

00:44:59,700 --> 00:45:06,849
sorry bomdila ansible have got a site

00:45:05,230 --> 00:45:08,710
where you can now contribute your own

00:45:06,849 --> 00:45:09,819
modules for this to reuse I just

00:45:08,710 --> 00:45:13,750
wondering if you have experience using

00:45:09,819 --> 00:45:16,720
that to contribute i'm not sure if

00:45:13,750 --> 00:45:19,540
there's a central place from the website

00:45:16,720 --> 00:45:24,730
i I didn't see that as we have with

00:45:19,540 --> 00:45:28,480
puppet and chef but we can find it's not

00:45:24,730 --> 00:45:30,309
hard to find like contributions from

00:45:28,480 --> 00:45:33,790
people not on the official website

00:45:30,309 --> 00:45:38,470
because actually it already has a lot of

00:45:33,790 --> 00:45:40,660
butene modules is not like puppets many

00:45:38,470 --> 00:45:44,170
modules from puppet that are largely

00:45:40,660 --> 00:45:47,020
used widely use it they are contributed

00:45:44,170 --> 00:45:49,599
from the community and you have to

00:45:47,020 --> 00:45:52,569
download them with NC boy you have

00:45:49,599 --> 00:45:55,059
already a lot of modules bewteen already

00:45:52,569 --> 00:46:03,130
shipped with ansible so i think they

00:45:55,059 --> 00:46:05,020
don't have a central point for that Wow

00:46:03,130 --> 00:46:07,150
Thank You Erica it's a very informative

00:46:05,020 --> 00:46:09,309
talk any more questions please feel free

00:46:07,150 --> 00:46:15,819
to raise them or raise them after the

00:46:09,309 --> 00:46:21,880
talk what slides oh yeah just ah you you

00:46:15,819 --> 00:46:27,160
got it yeah I got it no did you read

00:46:21,880 --> 00:46:32,680
about it no yeah yeah so is that an

00:46:27,160 --> 00:46:35,109
invite any other questions no okay so if

00:46:32,680 --> 00:46:38,140
you have other questions you can talk

00:46:35,109 --> 00:46:42,069
with me talk with me later I'm Erika

00:46:38,140 --> 00:46:45,069
Heidi on on Twitter and i'm also on IRC

00:46:42,069 --> 00:46:46,960
and if you can please rate this stock so

00:46:45,069 --> 00:46:49,390
i can make it better in the future I

00:46:46,960 --> 00:46:51,569
appreciate thank you very much thank you

00:46:49,390 --> 00:46:51,569
very much

00:46:56,960 --> 00:46:59,020

YouTube URL: https://www.youtube.com/watch?v=x7iA4yzDsAg


