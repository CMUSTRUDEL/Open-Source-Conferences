Title: PHP UK Conference 2014 - Stephan HochdÃ¶rfer - The 7 Deadly Sins of Dependency Injection
Publication date: 2014-03-21
Playlist: PHP UK Conference 2014
Description: 
	There exist quite a few misconceptions when it comes to the Dependency Injection (DI) pattern. While the principal pattern is easy to understand, it can be difficult to succeed with DI. In this session I will share some of my real world experience with DI. I will guide you to use DI in "The Right Wayâ„¢" to get the most out of it and to increase the maintainability of your application.
Captions: 
	00:00:08,670 --> 00:00:14,250
my name is Jeff ANOVA as you can

00:00:11,309 --> 00:00:16,440
probably guess by this weird letter in

00:00:14,250 --> 00:00:17,910
my last time I'm from Germany I lived

00:00:16,440 --> 00:00:20,070
there i run my own company there the

00:00:17,910 --> 00:00:21,810
company is called bit expert we founded

00:00:20,070 --> 00:00:24,000
the company 10 years ago we're doing

00:00:21,810 --> 00:00:26,640
software and mobile development for our

00:00:24,000 --> 00:00:28,380
clients I'm currently holding the

00:00:26,640 --> 00:00:29,789
position being head of IT which means

00:00:28,380 --> 00:00:31,439
I'm responsible for all the technology

00:00:29,789 --> 00:00:33,540
based decisions concerning our customer

00:00:31,439 --> 00:00:35,970
projects internal projects and the

00:00:33,540 --> 00:00:37,680
products that we built our I will be

00:00:35,970 --> 00:00:39,090
here today and tomorrow if any questions

00:00:37,680 --> 00:00:43,800
this is my email address this my Twitter

00:00:39,090 --> 00:00:46,440
account for free to pay me um that's

00:00:43,800 --> 00:00:47,940
about me who are you so who have you has

00:00:46,440 --> 00:00:50,159
heard of the term dependency injection

00:00:47,940 --> 00:00:53,370
please raise your hand almost that's

00:00:50,159 --> 00:00:55,350
awesome i'm talking about di for roughly

00:00:53,370 --> 00:00:58,260
four years and when i started my first

00:00:55,350 --> 00:01:00,720
PHP conference or talking at my first

00:00:58,260 --> 00:01:01,920
PHP conference about the eye and no one

00:01:00,720 --> 00:01:05,610
raised his hand so it's really awesome

00:01:01,920 --> 00:01:09,030
to see the this great adoption arm who

00:01:05,610 --> 00:01:16,079
have you likes di ok quite a few ok who

00:01:09,030 --> 00:01:18,180
not know 10 just run ok to be honest I'm

00:01:16,079 --> 00:01:21,390
really biased about do I rain comes to

00:01:18,180 --> 00:01:24,810
to the DI topic I'm doing it since 2005

00:01:21,390 --> 00:01:28,079
so in 2005 we started to convert our own

00:01:24,810 --> 00:01:31,530
application framework into a DI based

00:01:28,079 --> 00:01:36,899
one and all of our projects that we are

00:01:31,530 --> 00:01:39,420
doing on use di as a as a pattern so

00:01:36,899 --> 00:01:42,299
yeah as I said I'm really biased we did

00:01:39,420 --> 00:01:46,409
roughly 200 projects in the last couple

00:01:42,299 --> 00:01:48,359
of years I trained our devs um help them

00:01:46,409 --> 00:01:50,969
tackle the problems and solving their

00:01:48,359 --> 00:01:55,859
problems so really biased when it comes

00:01:50,969 --> 00:01:57,780
to the I um I really like the talk title

00:01:55,859 --> 00:01:59,969
it was really easy to come up with it

00:01:57,780 --> 00:02:02,869
the content may really suck but the talk

00:01:59,969 --> 00:02:06,509
title is really awesome oh just kidding

00:02:02,869 --> 00:02:08,550
when I googled for the definition of the

00:02:06,509 --> 00:02:10,860
seven sins seven deadly sins i came

00:02:08,550 --> 00:02:12,840
across a site that sells seven deadly

00:02:10,860 --> 00:02:14,610
sins t-shirts this is an html5

00:02:12,840 --> 00:02:16,860
presentations or this is a link to the

00:02:14,610 --> 00:02:18,540
to the e-commerce website the site

00:02:16,860 --> 00:02:20,760
actually says if you buy at least five

00:02:18,540 --> 00:02:22,020
of these items you increase some your

00:02:20,760 --> 00:02:23,460
chance to

00:02:22,020 --> 00:02:25,440
to heaven by roughly a hundred percent

00:02:23,460 --> 00:02:27,000
so if you made any mistakes in the past

00:02:25,440 --> 00:02:30,750
you probably want to do something

00:02:27,000 --> 00:02:32,880
against it just kidding um I don't make

00:02:30,750 --> 00:02:38,100
any money from that one that would be a

00:02:32,880 --> 00:02:39,780
sin okay di or IFC is really a cool

00:02:38,100 --> 00:02:43,590
thing a really a good idea it's quite an

00:02:39,780 --> 00:02:46,470
old pattern um it's exists like 20 years

00:02:43,590 --> 00:02:48,630
or so um and like any of these good

00:02:46,470 --> 00:02:51,870
ideas you should use it with moderation

00:02:48,630 --> 00:02:53,520
you should understand why you should use

00:02:51,870 --> 00:02:56,670
it how you should use it what the

00:02:53,520 --> 00:03:00,090
problems you can solve with ioc and how

00:02:56,670 --> 00:03:02,490
to apply it in your projects oh sorry

00:03:00,090 --> 00:03:05,330
and so I OSC means inversion of control

00:03:02,490 --> 00:03:07,590
so it's quite closely related to the eye

00:03:05,330 --> 00:03:10,140
that's a good question if you have any

00:03:07,590 --> 00:03:11,460
questions feel free to ask um oh no

00:03:10,140 --> 00:03:13,230
please do not ask because the torque is

00:03:11,460 --> 00:03:17,040
recorded we'll discuss it at the end

00:03:13,230 --> 00:03:18,990
just kidding so as I said use it with

00:03:17,040 --> 00:03:21,660
moderation make sure that you understand

00:03:18,990 --> 00:03:23,010
what is C is all about how it applies

00:03:21,660 --> 00:03:26,100
into your project and where you should

00:03:23,010 --> 00:03:28,140
really need it if you say if you let's

00:03:26,100 --> 00:03:30,360
say if you write a database import

00:03:28,140 --> 00:03:33,270
script 20 lines of code you don't need

00:03:30,360 --> 00:03:35,220
ioc obviously use it where it makes

00:03:33,270 --> 00:03:37,160
sense and if you don't make sense don't

00:03:35,220 --> 00:03:39,660
use it that's that's the basic idea um

00:03:37,160 --> 00:03:42,030
so the talk is called the seven deadly

00:03:39,660 --> 00:03:46,530
sins of dependency injection who of you

00:03:42,030 --> 00:03:48,600
can name the seven deadly sins okay I

00:03:46,530 --> 00:03:51,000
give a helping hand we're talking about

00:03:48,600 --> 00:03:53,100
lust we're talking about greed talking

00:03:51,000 --> 00:03:59,070
about gluttony are we talking about

00:03:53,100 --> 00:04:02,790
sloth wrath envy and pride arm let's get

00:03:59,070 --> 00:04:05,340
started so last last actually was a or

00:04:02,790 --> 00:04:07,950
originally was a term for desire and

00:04:05,340 --> 00:04:12,209
therefore lust could involve the intense

00:04:07,950 --> 00:04:15,060
desire of money food fame or power or in

00:04:12,209 --> 00:04:19,169
the case that I'm covering on dealing

00:04:15,060 --> 00:04:20,760
with too many dependencies let's say we

00:04:19,169 --> 00:04:22,380
have a controller that looks like this

00:04:20,760 --> 00:04:24,300
so it's a controller class it has a

00:04:22,380 --> 00:04:27,540
action method my action which will

00:04:24,300 --> 00:04:29,669
return a response now visit that's

00:04:27,540 --> 00:04:32,460
pretty boring code right it does not

00:04:29,669 --> 00:04:35,160
really do anything useful so we start

00:04:32,460 --> 00:04:38,370
adding services like in

00:04:35,160 --> 00:04:40,410
case the my service we inject a instance

00:04:38,370 --> 00:04:46,380
of my service via the constructor and

00:04:40,410 --> 00:04:47,880
use it below here in our action um we're

00:04:46,380 --> 00:04:48,930
running the code in production something

00:04:47,880 --> 00:04:51,030
it's not really working we need to

00:04:48,930 --> 00:04:53,880
figure out what's going on so we add a

00:04:51,030 --> 00:04:57,090
logger again we inject the logger as a

00:04:53,880 --> 00:04:58,470
constructor dependency and use it in our

00:04:57,090 --> 00:05:00,180
action that's okay that's two

00:04:58,470 --> 00:05:03,270
dependencies we can can live with that

00:05:00,180 --> 00:05:04,740
but what if we want to add a mailer

00:05:03,270 --> 00:05:08,640
because we want to send out an email

00:05:04,740 --> 00:05:10,830
when do something failed or just some

00:05:08,640 --> 00:05:14,400
weird things happened well we add the

00:05:10,830 --> 00:05:16,290
mail dependency and the control evolves

00:05:14,400 --> 00:05:18,240
evolves we add keep adding adding

00:05:16,290 --> 00:05:21,390
dependencies dependencies dependencies

00:05:18,240 --> 00:05:23,160
at the end we probably have 5 10 20

00:05:21,390 --> 00:05:25,620
dependencies now that doesn't really

00:05:23,160 --> 00:05:27,870
look good right it's really smells like

00:05:25,620 --> 00:05:29,670
there is something wrong in there now

00:05:27,870 --> 00:05:31,380
there are people out there who think we

00:05:29,670 --> 00:05:34,830
can solve this problem we can solve this

00:05:31,380 --> 00:05:36,330
problem by using a service locator who

00:05:34,830 --> 00:05:40,530
of you is aware of the term service

00:05:36,330 --> 00:05:43,920
locator okay awesome right so instead of

00:05:40,530 --> 00:05:45,900
injecting the dependencies that we need

00:05:43,920 --> 00:05:48,360
in the constructor we simply inject the

00:05:45,900 --> 00:05:51,360
container and if you can look at the

00:05:48,360 --> 00:05:53,430
code it's clearly that right now we just

00:05:51,360 --> 00:05:55,100
have one dependency so our controller

00:05:53,430 --> 00:05:58,500
depends on the container and that's it

00:05:55,100 --> 00:06:00,710
but that's not true well obviously it is

00:05:58,500 --> 00:06:03,720
true because we can see it here but

00:06:00,710 --> 00:06:06,210
indirectly we depend we still do depend

00:06:03,720 --> 00:06:08,160
on the service class on the logger that

00:06:06,210 --> 00:06:11,400
we manually pull out from the container

00:06:08,160 --> 00:06:15,300
in the constructor now if you look from

00:06:11,400 --> 00:06:17,490
the outside we don't see what's going on

00:06:15,300 --> 00:06:21,150
right it's not documented and from the

00:06:17,490 --> 00:06:25,770
outside I mean looking at the doc blog

00:06:21,150 --> 00:06:28,800
comments or the arm or the API

00:06:25,770 --> 00:06:30,419
documentation we just see this

00:06:28,800 --> 00:06:31,919
constructor that needs an argument

00:06:30,419 --> 00:06:34,200
container we have no clue what's going

00:06:31,919 --> 00:06:36,680
on in the constructor and that's really

00:06:34,200 --> 00:06:39,180
bad so this clearly violates the

00:06:36,680 --> 00:06:41,580
separation of concerns principle because

00:06:39,180 --> 00:06:43,289
the class is or the class should not be

00:06:41,580 --> 00:06:45,780
responsible for resolving its

00:06:43,289 --> 00:06:47,250
dependencies like we do in this case the

00:06:45,780 --> 00:06:48,910
class should just concentrate on its

00:06:47,250 --> 00:06:51,360
core business values right do

00:06:48,910 --> 00:06:53,800
the stuff that the class should do um

00:06:51,360 --> 00:06:57,070
second we've added a dependency to our

00:06:53,800 --> 00:06:59,200
framework the container over here which

00:06:57,070 --> 00:07:01,150
is really bad because your classes in an

00:06:59,200 --> 00:07:04,450
ideally world should not depend on

00:07:01,150 --> 00:07:05,830
framework classes and a third are we

00:07:04,450 --> 00:07:08,020
just pull out something from the

00:07:05,830 --> 00:07:10,960
container something that is identified

00:07:08,020 --> 00:07:12,970
by a string service and lager ideally

00:07:10,960 --> 00:07:14,710
it's exactly the service that we expect

00:07:12,970 --> 00:07:17,260
ideally it's exactly the logger instance

00:07:14,710 --> 00:07:19,500
that we came back but maybe we just get

00:07:17,260 --> 00:07:23,410
back some integer or a string or whatnot

00:07:19,500 --> 00:07:24,880
so we need to explicitly check what we

00:07:23,410 --> 00:07:27,580
get back and if that matches our needs

00:07:24,880 --> 00:07:30,310
and that's really stupid we should avoid

00:07:27,580 --> 00:07:32,350
that um so that's not really the best

00:07:30,310 --> 00:07:34,270
idea of doing things but it can really

00:07:32,350 --> 00:07:36,700
get worse so they are frameworks out

00:07:34,270 --> 00:07:38,800
there who are the I frameworks who

00:07:36,700 --> 00:07:41,320
implement these aware interfaces arm

00:07:38,800 --> 00:07:43,270
which basically means that any of my

00:07:41,320 --> 00:07:45,880
class can in this case implement the

00:07:43,270 --> 00:07:49,900
container where interface which defines

00:07:45,880 --> 00:07:52,570
a set container method arm which will be

00:07:49,900 --> 00:07:54,400
called implicitly by this di framework

00:07:52,570 --> 00:07:56,590
whenever an instance of my controller

00:07:54,400 --> 00:07:58,920
gets created and this container where

00:07:56,590 --> 00:08:02,860
method just says inject this container

00:07:58,920 --> 00:08:05,980
into my instance now this is really

00:08:02,860 --> 00:08:08,200
reverse in the other example over here

00:08:05,980 --> 00:08:10,330
the container was a constructor argument

00:08:08,200 --> 00:08:12,250
so I know I know when I create the

00:08:10,330 --> 00:08:15,340
controller I have to pass the container

00:08:12,250 --> 00:08:17,680
so in this example it is a constructor

00:08:15,340 --> 00:08:20,740
argument so I know that I have to pass

00:08:17,680 --> 00:08:23,470
it when I create the instance when I use

00:08:20,740 --> 00:08:25,600
the aware interface I have no clue that

00:08:23,470 --> 00:08:28,030
I need to call the set container method

00:08:25,600 --> 00:08:30,190
before I can execute or call in my

00:08:28,030 --> 00:08:32,620
action method otherwise the dependencies

00:08:30,190 --> 00:08:35,950
are not set I don't know that and this

00:08:32,620 --> 00:08:39,310
is really really bad um so I need to

00:08:35,950 --> 00:08:42,550
clearly communicate that so for that

00:08:39,310 --> 00:08:45,550
reason are please do avoid this

00:08:42,550 --> 00:08:48,010
container aware stuff and Toby like in

00:08:45,550 --> 00:08:49,870
September tweeted this awesome statement

00:08:48,010 --> 00:08:52,360
container where senior singleton and I

00:08:49,870 --> 00:08:54,700
hope you guys don't use any Singleton's

00:08:52,360 --> 00:08:59,040
we're still using Singleton's yeah no

00:08:54,700 --> 00:09:02,260
one's raising the head 01 okay I'm sorry

00:08:59,040 --> 00:09:03,570
so singles are really bad and container

00:09:02,260 --> 00:09:07,089
where as well

00:09:03,570 --> 00:09:09,130
second as I said before we should try to

00:09:07,089 --> 00:09:12,600
establish boundaries right we should not

00:09:09,130 --> 00:09:14,829
really depend on framework classes yeah

00:09:12,600 --> 00:09:16,600
establish boundaries make sure your

00:09:14,829 --> 00:09:18,550
application is separated from the

00:09:16,600 --> 00:09:20,769
framework so in the in the very best

00:09:18,550 --> 00:09:22,480
case are you can take your application

00:09:20,769 --> 00:09:24,490
put it on top of a different framework

00:09:22,480 --> 00:09:26,949
and it just will work I know this sounds

00:09:24,490 --> 00:09:32,290
like some really fancy stuff but it can

00:09:26,949 --> 00:09:35,740
be possible in some ways so agree greed

00:09:32,290 --> 00:09:38,399
is a desire to acquire or to possess

00:09:35,740 --> 00:09:40,750
more than one needs especially with with

00:09:38,399 --> 00:09:44,139
especially with respect to material

00:09:40,750 --> 00:09:50,470
wealth what do I mean with that well I'm

00:09:44,139 --> 00:09:54,250
talking about classes that are greedy

00:09:50,470 --> 00:09:55,690
that need a lot of dependencies now this

00:09:54,250 --> 00:09:57,940
doesn't only apply to controllers this

00:09:55,690 --> 00:10:00,100
just does apply to almost all different

00:09:57,940 --> 00:10:02,589
types of classes but in controllers it's

00:10:00,100 --> 00:10:04,420
quite common we can use a service

00:10:02,589 --> 00:10:08,529
locator instead because we don't want to

00:10:04,420 --> 00:10:10,089
have to 10 20 30 dependencies and use a

00:10:08,529 --> 00:10:12,670
service locator just to have one but

00:10:10,089 --> 00:10:13,899
this is really stupid um if this is the

00:10:12,670 --> 00:10:16,750
only reason for you using a service

00:10:13,899 --> 00:10:18,699
locator you're doing it wrong um so if

00:10:16,750 --> 00:10:22,529
you take a greedy controller or a fat

00:10:18,699 --> 00:10:25,000
controller or had anything class are

00:10:22,529 --> 00:10:26,500
restructured its ok to have multiple

00:10:25,000 --> 00:10:28,240
classes don't be afraid of too many

00:10:26,500 --> 00:10:29,769
classes I know there are a lot of people

00:10:28,240 --> 00:10:30,970
out there who think that we are still

00:10:29,769 --> 00:10:35,380
living in this world where just one

00:10:30,970 --> 00:10:38,350
class is enough but I the East today are

00:10:35,380 --> 00:10:44,199
really able to cope with many classes

00:10:38,350 --> 00:10:45,910
and you should too so just coming back

00:10:44,199 --> 00:10:50,440
one slide so in this case we have this

00:10:45,910 --> 00:10:53,110
user controller and there are some

00:10:50,440 --> 00:10:57,760
people out there who think that a user

00:10:53,110 --> 00:11:00,149
controller should cover should cover

00:10:57,760 --> 00:11:02,800
anything that is related to a user like

00:11:00,149 --> 00:11:04,750
creating a user registering forgot your

00:11:02,800 --> 00:11:07,540
password creating orders creating

00:11:04,750 --> 00:11:09,459
comments I are now so you got a user

00:11:07,540 --> 00:11:14,439
controller that does almost anything

00:11:09,459 --> 00:11:16,279
everything which is stupid what you

00:11:14,439 --> 00:11:18,829
should do instead

00:11:16,279 --> 00:11:20,870
planning what you should do instead is

00:11:18,829 --> 00:11:23,660
yeah restructure your controllers use

00:11:20,870 --> 00:11:28,249
multiple of them use controllers for

00:11:23,660 --> 00:11:30,379
specific reasons use a controller for

00:11:28,249 --> 00:11:31,970
authentication use a controller for the

00:11:30,379 --> 00:11:33,470
user management part use a controller

00:11:31,970 --> 00:11:35,300
for the order management so think

00:11:33,470 --> 00:11:36,559
differently right the user is not the

00:11:35,300 --> 00:11:38,569
central piece of your application in

00:11:36,559 --> 00:11:41,120
most cases it's all the other stuff that

00:11:38,569 --> 00:11:48,490
they do the user is just the guy

00:11:41,120 --> 00:11:50,329
executing things yeah so point is

00:11:48,490 --> 00:11:51,769
architecture and structure are really

00:11:50,329 --> 00:11:53,420
agnostic of tools so if you use a

00:11:51,769 --> 00:11:56,029
framework that forces you into thinking

00:11:53,420 --> 00:11:57,499
into a specific structure try to get rid

00:11:56,029 --> 00:11:59,540
of it so the framework should not limit

00:11:57,499 --> 00:12:02,029
yourself into a certain structure

00:11:59,540 --> 00:12:03,889
there's the application and the the

00:12:02,029 --> 00:12:05,540
model of the domain I think like that

00:12:03,889 --> 00:12:08,870
that should force you to think in a

00:12:05,540 --> 00:12:12,319
certain structure and do not blame the

00:12:08,870 --> 00:12:14,480
eye that you have to deal with so many

00:12:12,319 --> 00:12:16,300
dependencies right the eye is not the

00:12:14,480 --> 00:12:18,649
problem it's I'm sorry it's your problem

00:12:16,300 --> 00:12:20,389
you're doing it wrong just rethink your

00:12:18,649 --> 00:12:22,220
architecture we think your structure of

00:12:20,389 --> 00:12:24,529
the application rethink how the

00:12:22,220 --> 00:12:26,600
different classes objects communicate

00:12:24,529 --> 00:12:28,490
with each other and all all these things

00:12:26,600 --> 00:12:31,550
so di is not really problem it really

00:12:28,490 --> 00:12:33,500
helps to solve these problems and know

00:12:31,550 --> 00:12:35,779
that works pretty good and the service

00:12:33,500 --> 00:12:37,790
locator that you've seen before doesn't

00:12:35,779 --> 00:12:40,009
really fix it it hides it helps you to

00:12:37,790 --> 00:12:41,540
hide these problems right it it looks

00:12:40,009 --> 00:12:43,779
like it's just one dependency but it's

00:12:41,540 --> 00:12:48,079
not you're pulling that stuff out arm

00:12:43,779 --> 00:12:50,649
which is really bad so this is one part

00:12:48,079 --> 00:12:56,290
of the greediness the other part is on

00:12:50,649 --> 00:13:00,050
you should always think or think on what

00:12:56,290 --> 00:13:01,790
is really needed in my specific use case

00:13:00,050 --> 00:13:05,809
what kind of dependencies do i really

00:13:01,790 --> 00:13:09,529
need and arm yeah how do I communicate

00:13:05,809 --> 00:13:12,139
with these dependencies that sounds

00:13:09,529 --> 00:13:13,759
terrible but i'll try to explain so in

00:13:12,139 --> 00:13:16,579
this case we have a login controller

00:13:13,759 --> 00:13:19,149
that has a dependency which is called

00:13:16,579 --> 00:13:22,579
oath service which is an implementation

00:13:19,149 --> 00:13:26,660
now this is bad because we are depending

00:13:22,579 --> 00:13:29,689
on a fixed class of fixed implementation

00:13:26,660 --> 00:13:30,230
in this case the or service now there's

00:13:29,689 --> 00:13:34,160
a guy

00:13:30,230 --> 00:13:35,930
named Uncle Bob Robertson Martin on who

00:13:34,160 --> 00:13:38,360
came up with the dependency inversion

00:13:35,930 --> 00:13:40,130
principle which basically says that high

00:13:38,360 --> 00:13:41,600
level modules should not depend upon low

00:13:40,130 --> 00:13:43,640
level modules or should depend on

00:13:41,600 --> 00:13:45,620
abstractions abstractions should not

00:13:43,640 --> 00:13:47,510
depend upon details details should

00:13:45,620 --> 00:13:51,980
depend on obstructions this is really

00:13:47,510 --> 00:13:54,260
high level speak for this so instead of

00:13:51,980 --> 00:13:56,030
depending on a concrete implementation

00:13:54,260 --> 00:13:58,490
like we did before the oil service we

00:13:56,030 --> 00:14:00,500
just depend on the earth interface this

00:13:58,490 --> 00:14:03,080
is all the login controller needs to

00:14:00,500 --> 00:14:06,110
know the login controller does not need

00:14:03,080 --> 00:14:08,360
to care about how the specific

00:14:06,110 --> 00:14:11,180
implementation of this earth interface

00:14:08,360 --> 00:14:12,410
is done right so the login controller

00:14:11,180 --> 00:14:14,300
does not need to know that we

00:14:12,410 --> 00:14:18,800
authenticate a user against a web

00:14:14,300 --> 00:14:22,250
service a soap service an ldap system

00:14:18,800 --> 00:14:24,470
what not all the login controller needs

00:14:22,250 --> 00:14:26,870
to know is we have this earth interface

00:14:24,470 --> 00:14:29,270
this also interface provides just exact

00:14:26,870 --> 00:14:30,800
one method which is called login the

00:14:29,270 --> 00:14:33,650
login method accepts two parameters

00:14:30,800 --> 00:14:35,990
username and password and it will return

00:14:33,650 --> 00:14:38,420
true or false this is all the login

00:14:35,990 --> 00:14:41,150
controller needs to know and needs to be

00:14:38,420 --> 00:14:43,910
aware of so the concrete implementation

00:14:41,150 --> 00:14:48,310
doesn't really matter that's that's the

00:14:43,910 --> 00:14:53,210
main point on so that was greediness

00:14:48,310 --> 00:14:56,360
next up is gluttony gluttony is the over

00:14:53,210 --> 00:14:58,760
consumption of anything to the point of

00:14:56,360 --> 00:15:01,960
waste so blatantly can be interpreted as

00:14:58,760 --> 00:15:04,580
selfishness essentially placing armed

00:15:01,960 --> 00:15:07,780
with one's own interests above the

00:15:04,580 --> 00:15:10,340
well-being or the interests of others on

00:15:07,780 --> 00:15:12,950
this is really what I really like and

00:15:10,340 --> 00:15:16,480
I'm really happy that it's recorded I'm

00:15:12,950 --> 00:15:16,480
talking about too many implementations

00:15:20,650 --> 00:15:30,980
who view knows composer awesome okay who

00:15:26,120 --> 00:15:32,600
uses it same amount of hands awesome so

00:15:30,980 --> 00:15:37,100
I went to packages I searched for

00:15:32,600 --> 00:15:42,550
dependency injection I got 19 pages of

00:15:37,100 --> 00:15:44,120
search results 19 which boils down to

00:15:42,550 --> 00:15:47,270
00:15:44,120 --> 00:15:48,740
packages now that the search is not

00:15:47,270 --> 00:15:50,270
exact so it will either search for

00:15:48,740 --> 00:15:52,130
dependency or injection so there are

00:15:50,270 --> 00:15:54,860
some other packages around that do not

00:15:52,130 --> 00:15:59,210
cover a DI in that case let's assume we

00:15:54,860 --> 00:16:04,220
have 150 implementations does that make

00:15:59,210 --> 00:16:06,740
sense no exactly thing is um 10-15 years

00:16:04,220 --> 00:16:08,750
ago when a developer wanted to show off

00:16:06,740 --> 00:16:10,310
his skills he right he wrote a content

00:16:08,750 --> 00:16:12,410
management system who of you has ever

00:16:10,310 --> 00:16:14,750
written a content management system yeah

00:16:12,410 --> 00:16:16,520
okay today when you want to show off

00:16:14,750 --> 00:16:20,870
your skills you either write a no sequel

00:16:16,520 --> 00:16:23,480
store or a DI container that's as simple

00:16:20,870 --> 00:16:26,839
as that but what's the problem with that

00:16:23,480 --> 00:16:29,839
my point is all these let's say hundred

00:16:26,839 --> 00:16:33,710
fifty different packages are do the I in

00:16:29,839 --> 00:16:35,360
their own specific way so they have

00:16:33,710 --> 00:16:37,370
their own set of features they react

00:16:35,360 --> 00:16:38,779
differently internal you have no clue

00:16:37,370 --> 00:16:40,220
what's going on so when try to remove

00:16:38,779 --> 00:16:42,500
from run one framework from one

00:16:40,220 --> 00:16:46,640
implementation to another this might

00:16:42,500 --> 00:16:48,320
does not really work so I had the idea a

00:16:46,640 --> 00:16:50,350
couple of times and proposed to fig that

00:16:48,320 --> 00:16:53,000
we should have something like a Adi

00:16:50,350 --> 00:16:57,980
standard but guys did not really pick it

00:16:53,000 --> 00:17:00,200
up um up to now thing is that I really

00:16:57,980 --> 00:17:04,490
believe in this idea and I have this

00:17:00,200 --> 00:17:07,970
tree I really do I want to pull in the

00:17:04,490 --> 00:17:09,380
dependency from composer arm my di

00:17:07,970 --> 00:17:11,000
container should recognize all the

00:17:09,380 --> 00:17:14,179
classes and it should pick them up and I

00:17:11,000 --> 00:17:15,589
can easily access them as the reminder

00:17:14,179 --> 00:17:19,010
this is really my dream make it really

00:17:15,589 --> 00:17:20,720
easy to use external libraries and not

00:17:19,010 --> 00:17:23,000
really having to deal with the

00:17:20,720 --> 00:17:27,470
dependencies and how to how to wire

00:17:23,000 --> 00:17:30,220
things up and things like that and for

00:17:27,470 --> 00:17:33,980
that reason I think we need a standard

00:17:30,220 --> 00:17:36,650
luckily it's not all in me arm last

00:17:33,980 --> 00:17:39,080
December last December yes two guys

00:17:36,650 --> 00:17:41,270
created on github a container interop

00:17:39,080 --> 00:17:45,010
project so the project was started by

00:17:41,270 --> 00:17:50,840
David negri a and Matthew Nepali and

00:17:45,010 --> 00:17:53,270
this is like pre PSR whatever collecting

00:17:50,840 --> 00:17:57,470
ideas and thinking about how things

00:17:53,270 --> 00:18:01,150
should work on so the idea is that we

00:17:57,470 --> 00:18:03,760
find interfaces and define how the on

00:18:01,150 --> 00:18:06,860
how the interfaces should be used and

00:18:03,760 --> 00:18:10,190
take that as a basis and turn that into

00:18:06,860 --> 00:18:13,940
a PSR standard maybe someone so if you

00:18:10,190 --> 00:18:16,340
have any ideas or any arm requirements

00:18:13,940 --> 00:18:18,890
feel free to join the group and discuss

00:18:16,340 --> 00:18:24,970
the stuff with us would really awesome

00:18:18,890 --> 00:18:27,559
to to see that going live next up sloth

00:18:24,970 --> 00:18:30,440
so sloth has been defined as a failure

00:18:27,559 --> 00:18:32,240
to do things that one should do and by

00:18:30,440 --> 00:18:37,250
definition evil exists when good men

00:18:32,240 --> 00:18:40,549
fail to act what I mean with that well

00:18:37,250 --> 00:18:42,350
um the basic outline is don't be lazy

00:18:40,549 --> 00:18:45,010
don't take shortcuts right solve the

00:18:42,350 --> 00:18:48,110
problems the right way there are

00:18:45,010 --> 00:18:50,510
dependency injection frameworks arm that

00:18:48,110 --> 00:18:53,090
allow you to use property injection

00:18:50,510 --> 00:18:55,970
which basically means I have a property

00:18:53,090 --> 00:18:58,970
in my class on have a dog blog have some

00:18:55,970 --> 00:19:02,510
annotation like ed inject and whenever

00:18:58,970 --> 00:19:05,419
the DI container will create an instance

00:19:02,510 --> 00:19:07,789
for me it will inject the lover into the

00:19:05,419 --> 00:19:13,490
property so and don't have to deal with

00:19:07,789 --> 00:19:14,960
it mmm first of all I do strongly

00:19:13,490 --> 00:19:19,340
believe that public properties are

00:19:14,960 --> 00:19:21,260
really bad because I can set them to any

00:19:19,340 --> 00:19:23,380
value it's like a global variable I can

00:19:21,260 --> 00:19:25,970
easily access it I can easily modify it

00:19:23,380 --> 00:19:34,630
which basically means that I have to

00:19:25,970 --> 00:19:40,309
check even for null values or wait yes

00:19:34,630 --> 00:19:42,289
sorry I got lost I got lost so I have to

00:19:40,309 --> 00:19:45,409
check for null values in this case just

00:19:42,289 --> 00:19:48,289
to make sure that the the property is

00:19:45,409 --> 00:19:49,940
set ideally I should check with the

00:19:48,289 --> 00:19:51,740
instance of operator to make really sure

00:19:49,940 --> 00:19:55,280
I get the exact instance because

00:19:51,740 --> 00:19:58,520
obviously i can set logger 25 arm which

00:19:55,280 --> 00:20:01,520
probably does not work so public

00:19:58,520 --> 00:20:03,580
property injection is really bad there

00:20:01,520 --> 00:20:07,870
are frameworks out there that allow

00:20:03,580 --> 00:20:07,870
protected property injection

00:20:07,980 --> 00:20:11,610
which basically means I don't have a

00:20:09,870 --> 00:20:14,820
public property by the protective one

00:20:11,610 --> 00:20:19,460
the same way the notation works thing is

00:20:14,820 --> 00:20:22,799
to use or to it to be able to inject on

00:20:19,460 --> 00:20:25,320
an object into logger I need the

00:20:22,799 --> 00:20:27,600
reflection API I'm not able to access

00:20:25,320 --> 00:20:30,210
the field from the outside I don't have

00:20:27,600 --> 00:20:32,280
any setter method for it and as we all

00:20:30,210 --> 00:20:34,110
know the reflection API is really slow

00:20:32,280 --> 00:20:39,750
so we should not use it in production

00:20:34,110 --> 00:20:41,850
and second as I just said we don't have

00:20:39,750 --> 00:20:45,210
any setter method if i take the this

00:20:41,850 --> 00:20:48,030
user controller and run it in my mind

00:20:45,210 --> 00:20:49,799
you in my unit test i'm not able to set

00:20:48,030 --> 00:20:53,460
the logger from the outside because it's

00:20:49,799 --> 00:20:55,320
protected I can't access it so that's

00:20:53,460 --> 00:20:57,750
really bad because I don't know it I

00:20:55,320 --> 00:21:00,179
don't see it as I said before it's not

00:20:57,750 --> 00:21:02,100
visual from the outside right we have we

00:21:00,179 --> 00:21:04,320
have no documentation that there is a a

00:21:02,100 --> 00:21:06,270
property in the code that needs to be

00:21:04,320 --> 00:21:08,160
said first before the code can be

00:21:06,270 --> 00:21:10,230
executed and even versa as I said I

00:21:08,160 --> 00:21:12,179
can't even set it because it's protected

00:21:10,230 --> 00:21:16,730
it's hidden from myself well that's

00:21:12,179 --> 00:21:21,330
really really bad so thing is don't do

00:21:16,730 --> 00:21:26,640
what okay that one so don't do it never

00:21:21,330 --> 00:21:30,780
ever make your dependencies clear make

00:21:26,640 --> 00:21:34,260
clear on what your code needs to be able

00:21:30,780 --> 00:21:36,809
to work document it make sure that you

00:21:34,260 --> 00:21:40,260
can take a class use it somewhere else

00:21:36,809 --> 00:21:43,530
without being without the need of using

00:21:40,260 --> 00:21:46,320
this di framework so the basic idea of

00:21:43,530 --> 00:21:48,360
the I is really are take the class and

00:21:46,320 --> 00:21:50,490
be able to use it anywhere that you that

00:21:48,360 --> 00:21:52,410
you like so this is really just make it

00:21:50,490 --> 00:21:57,360
easy for for anyone to pick it up and

00:21:52,410 --> 00:21:59,340
use it in your own product most guys use

00:21:57,360 --> 00:22:02,100
this property injection just as a

00:21:59,340 --> 00:22:04,260
shortcut because most guys are just too

00:22:02,100 --> 00:22:07,830
lazy to write the setter method like

00:22:04,260 --> 00:22:10,500
four or five lines of code instead hoing

00:22:07,830 --> 00:22:12,600
yeah instead we just use an annotation

00:22:10,500 --> 00:22:14,669
which also is like three or four lines

00:22:12,600 --> 00:22:20,039
long okay that's not really worth it

00:22:14,669 --> 00:22:21,509
right um so yeah don't do it instead

00:22:20,039 --> 00:22:27,179
use something like constructor injection

00:22:21,509 --> 00:22:30,119
oh wait it's really not easy with two

00:22:27,179 --> 00:22:32,340
clickers yeah use something like

00:22:30,119 --> 00:22:33,960
constructor injection define your

00:22:32,340 --> 00:22:36,299
constructor the final dependencies there

00:22:33,960 --> 00:22:38,009
that's good if I want to create an

00:22:36,299 --> 00:22:41,009
instance of user control i instantly

00:22:38,009 --> 00:22:45,059
know i instantly see that I need a North

00:22:41,009 --> 00:22:49,259
interface just take your time it's not

00:22:45,059 --> 00:22:56,159
big deal what could possibly go wrong in

00:22:49,259 --> 00:22:59,729
this presentation just kidding it's not

00:22:56,159 --> 00:23:02,039
against you it's just my fault so yeah

00:22:59,729 --> 00:23:04,950
as I said past your passive dependencies

00:23:02,039 --> 00:23:07,830
as a construct argument because there is

00:23:04,950 --> 00:23:09,599
a clear communication what you need to

00:23:07,830 --> 00:23:12,739
be able to create an instance of the

00:23:09,599 --> 00:23:14,789
controller and to be able to use it and

00:23:12,739 --> 00:23:16,979
constructor injection in most cases

00:23:14,789 --> 00:23:19,739
makes sense because you don't want to

00:23:16,979 --> 00:23:21,899
change like in this case this both

00:23:19,739 --> 00:23:24,509
implementation during the lifetime of

00:23:21,899 --> 00:23:29,789
the user controller right so I don't

00:23:24,509 --> 00:23:31,950
inject a soap authentication class into

00:23:29,789 --> 00:23:34,109
the user controller and like five

00:23:31,950 --> 00:23:36,570
minutes later I change it to a web

00:23:34,109 --> 00:23:38,549
service authentication class that

00:23:36,570 --> 00:23:40,409
doesn't make any sense so I injected

00:23:38,549 --> 00:23:43,769
it's okay it can be used I kind of

00:23:40,409 --> 00:23:45,929
modified that's the basic idea and again

00:23:43,769 --> 00:23:47,580
if you're using to any concert too many

00:23:45,929 --> 00:23:48,779
dependencies in a constructor you're

00:23:47,580 --> 00:23:51,809
doing it wrong we think your

00:23:48,779 --> 00:23:55,409
architecture that's the the Nets debase

00:23:51,809 --> 00:24:00,139
plan um however you can use setter

00:23:55,409 --> 00:24:04,019
injection in some more specific ways

00:24:00,139 --> 00:24:06,989
like in this case um we have a set

00:24:04,019 --> 00:24:10,950
logger method which is there to be able

00:24:06,989 --> 00:24:14,489
to inject a logger instance and use it

00:24:10,950 --> 00:24:17,099
down below here this is used for

00:24:14,489 --> 00:24:18,899
optional dependencies stuff that I may

00:24:17,099 --> 00:24:22,470
or may not want to turn on or turn off

00:24:18,899 --> 00:24:24,029
like in this case I on production maybe

00:24:22,470 --> 00:24:26,940
I don't want to have to logger for

00:24:24,029 --> 00:24:29,429
whatever reasons so I don't set it in my

00:24:26,940 --> 00:24:32,460
in my configuration code it won't be

00:24:29,429 --> 00:24:33,970
injected it won't be used it can make

00:24:32,460 --> 00:24:37,360
sense if you have

00:24:33,970 --> 00:24:40,270
a application that you customize and

00:24:37,360 --> 00:24:42,310
install for different clients and you

00:24:40,270 --> 00:24:45,430
configure the behavior of the

00:24:42,310 --> 00:24:49,980
application why a setter injection let's

00:24:45,430 --> 00:24:53,800
say you have a ecommerce site on which

00:24:49,980 --> 00:24:56,620
whenever you create an order would post

00:24:53,800 --> 00:24:59,680
a message on facebook social media as

00:24:56,620 --> 00:25:01,330
bad as it can get but anyway so maybe

00:24:59,680 --> 00:25:03,580
there are clients who like that behavior

00:25:01,330 --> 00:25:05,260
so you inject this dependency in the

00:25:03,580 --> 00:25:07,090
order controller there are other clients

00:25:05,260 --> 00:25:08,950
who don't like that and you don't inject

00:25:07,090 --> 00:25:13,180
the stuff and it will work the same way

00:25:08,950 --> 00:25:15,280
so you can customize let's say runtime

00:25:13,180 --> 00:25:19,660
behavior using cetera setter injection

00:25:15,280 --> 00:25:23,530
that's that's the basic idea on if you

00:25:19,660 --> 00:25:25,690
use setter injection to make sure that

00:25:23,530 --> 00:25:28,420
you have these no checks in place no

00:25:25,690 --> 00:25:30,370
checks or if you want instance off as i

00:25:28,420 --> 00:25:34,560
said before instance of might be better

00:25:30,370 --> 00:25:34,560
on because you're checking for the type

00:25:35,370 --> 00:25:39,810
so yeah as I said no Czechs everywhere

00:25:38,290 --> 00:25:42,930
that's that's really important um

00:25:39,810 --> 00:25:46,780
otherwise your code might blow up um

00:25:42,930 --> 00:25:51,580
there's another thing we're setting

00:25:46,780 --> 00:25:55,830
rejection can make sense although you

00:25:51,580 --> 00:25:59,830
should not use it circular dependencies

00:25:55,830 --> 00:26:02,320
let's say we have this user service that

00:25:59,830 --> 00:26:04,720
needs something that implements a North

00:26:02,320 --> 00:26:06,660
interface and we have the simple of

00:26:04,720 --> 00:26:10,030
service which implements the interface

00:26:06,660 --> 00:26:13,180
but itself needs for some reason the

00:26:10,030 --> 00:26:14,860
user service now I cannot create an

00:26:13,180 --> 00:26:16,870
instance of user service because I'm

00:26:14,860 --> 00:26:18,430
missing the auth interface I need to

00:26:16,870 --> 00:26:21,610
provide an implementation of that I

00:26:18,430 --> 00:26:23,560
cannot instantiate the simple or service

00:26:21,610 --> 00:26:25,630
below here because I'm missing the user

00:26:23,560 --> 00:26:28,210
service so i'm not in not able to

00:26:25,630 --> 00:26:33,700
instantiate either of those and inject

00:26:28,210 --> 00:26:37,210
the other one into anyway so i can't

00:26:33,700 --> 00:26:41,170
solve this problem well i can solve it

00:26:37,210 --> 00:26:43,780
with a twist we can do this so the user

00:26:41,170 --> 00:26:46,240
service still needs an oath interface as

00:26:43,780 --> 00:26:47,860
a constructor argument but in the simple

00:26:46,240 --> 00:26:50,230
or service we change the concert

00:26:47,860 --> 00:26:53,290
to injection to a setter one so i can

00:26:50,230 --> 00:26:55,360
create an instance from that one put it

00:26:53,290 --> 00:26:57,040
in in the constructor take the instance

00:26:55,360 --> 00:27:00,940
from here and call the set er down there

00:26:57,040 --> 00:27:03,840
so that's a way to solve it but again

00:27:00,940 --> 00:27:07,000
you get this circular dependency problem

00:27:03,840 --> 00:27:08,650
that you really want that you really

00:27:07,000 --> 00:27:13,420
want to avoid circular dependencies are

00:27:08,650 --> 00:27:16,000
really bad there is a fourth option that

00:27:13,420 --> 00:27:19,240
you can can use which is called

00:27:16,000 --> 00:27:23,650
interface injection not all frameworks

00:27:19,240 --> 00:27:26,380
to support it but if you do I thing is

00:27:23,650 --> 00:27:30,100
you can name your interface blah blah

00:27:26,380 --> 00:27:32,799
blah something aware and the DI

00:27:30,100 --> 00:27:38,140
containers will pick that up and

00:27:32,799 --> 00:27:40,809
whenever your arm whenever a class of

00:27:38,140 --> 00:27:45,520
your application implements the logger

00:27:40,809 --> 00:27:46,809
aware interface in this case oh yeah we

00:27:45,520 --> 00:27:50,470
need to implement it in our controller

00:27:46,809 --> 00:27:52,600
and when the DI container creates an

00:27:50,470 --> 00:27:54,910
instance of the user controller it sees

00:27:52,600 --> 00:27:56,710
all wait the user control implements the

00:27:54,910 --> 00:27:59,919
logger air interface that means I need

00:27:56,710 --> 00:28:05,350
to call the set logger function um which

00:27:59,919 --> 00:28:06,970
we defined over here so um from a 10,000

00:28:05,350 --> 00:28:08,830
point of view this looks exactly like

00:28:06,970 --> 00:28:11,380
setter injection because what we do is

00:28:08,830 --> 00:28:13,179
we create a setter method ah but it's a

00:28:11,380 --> 00:28:18,429
bit more it's like forced setter

00:28:13,179 --> 00:28:21,429
injection it's implicit it's like

00:28:18,429 --> 00:28:23,110
implicit wiring thank you which

00:28:21,429 --> 00:28:25,809
basically means that I don't need to

00:28:23,110 --> 00:28:29,620
configure the instance on my own it's

00:28:25,809 --> 00:28:31,179
just the container who does it um which

00:28:29,620 --> 00:28:32,770
on the one hand if I know what's going

00:28:31,179 --> 00:28:34,510
on in my container is really an awesome

00:28:32,770 --> 00:28:37,540
thing if I have no clue what the

00:28:34,510 --> 00:28:39,760
container does on I can really freak out

00:28:37,540 --> 00:28:41,650
figuring out what's going on so you need

00:28:39,760 --> 00:28:43,870
to be around that you need to be aware

00:28:41,650 --> 00:28:47,950
that what your framework is capable of

00:28:43,870 --> 00:28:49,929
doing um it can make sense for for stuff

00:28:47,950 --> 00:28:52,000
like I really like it for the for this

00:28:49,929 --> 00:28:53,470
logging thing right it's part of the

00:28:52,000 --> 00:28:55,179
framework the framework will inject it

00:28:53,470 --> 00:28:56,380
and I can really access is I don't need

00:28:55,179 --> 00:28:59,740
to create the instance on myself and

00:28:56,380 --> 00:29:01,720
that's it um don't overdo it it's like

00:28:59,740 --> 00:29:03,520
ioc as i said before in the

00:29:01,720 --> 00:29:05,770
nning don't overdo it make sure you

00:29:03,520 --> 00:29:08,590
understand what's what's the purpose of

00:29:05,770 --> 00:29:15,910
this idea and applied to to your code

00:29:08,590 --> 00:29:24,640
but don't overdo it yeah next up default

00:29:15,910 --> 00:29:27,490
dependencies let's say you write a

00:29:24,640 --> 00:29:29,710
library an authentication library and

00:29:27,490 --> 00:29:31,840
you want to share the library with

00:29:29,710 --> 00:29:33,760
others now in this case we have this all

00:29:31,840 --> 00:29:37,330
service that needs an oath provider

00:29:33,760 --> 00:29:39,250
interface arm if I would put this up on

00:29:37,330 --> 00:29:41,350
composer and you would just download it

00:29:39,250 --> 00:29:43,600
into your own application you would need

00:29:41,350 --> 00:29:45,880
to know what this earth provider

00:29:43,600 --> 00:29:49,120
interface is how I need to configure it

00:29:45,880 --> 00:29:51,640
how I need to inject it in here so that

00:29:49,120 --> 00:29:53,110
I'm able to use this all service it

00:29:51,640 --> 00:29:54,790
might be a bit too much now this is

00:29:53,110 --> 00:29:56,530
really simple example obviously but it

00:29:54,790 --> 00:29:59,460
might be a bit too much if you're using

00:29:56,530 --> 00:30:01,840
like a really large lip with a lot of

00:29:59,460 --> 00:30:05,130
possible dependencies and stuff like

00:30:01,840 --> 00:30:09,130
that so it's probably a good idea to

00:30:05,130 --> 00:30:10,600
provide a factory method arm we define

00:30:09,130 --> 00:30:13,300
it here it's static it's called get

00:30:10,600 --> 00:30:15,460
instance we create your service inject

00:30:13,300 --> 00:30:18,130
in this case the database or provider

00:30:15,460 --> 00:30:21,160
which because we think this is the most

00:30:18,130 --> 00:30:24,520
used one from from our users and that's

00:30:21,160 --> 00:30:27,610
it point is that we've introduced tight

00:30:24,520 --> 00:30:29,280
coupling over here this is a fixed

00:30:27,610 --> 00:30:31,840
dependency right we can't change it

00:30:29,280 --> 00:30:33,280
which is okay in this case because we

00:30:31,840 --> 00:30:35,710
are shipping this code word it's our

00:30:33,280 --> 00:30:38,200
library it's our classes well on the

00:30:35,710 --> 00:30:40,960
other hand arm you should probably think

00:30:38,200 --> 00:30:42,970
about separating the concerns separating

00:30:40,960 --> 00:30:46,780
the class with its own business logic

00:30:42,970 --> 00:30:49,150
from a factory that is responsible for

00:30:46,780 --> 00:30:50,650
creating the instances and this is an

00:30:49,150 --> 00:30:54,400
idea that I really picked up lately and

00:30:50,650 --> 00:30:57,580
I really begin liking it because it

00:30:54,400 --> 00:30:58,810
clearly make it clearly communicates

00:30:57,580 --> 00:31:01,150
what's going on right we have this

00:30:58,810 --> 00:31:04,480
factory which is which has the only

00:31:01,150 --> 00:31:06,760
purpose of creating the instances of the

00:31:04,480 --> 00:31:09,460
services and on the other hand we have

00:31:06,760 --> 00:31:11,590
the old service um whose only purpose is

00:31:09,460 --> 00:31:13,260
providing the business logic for the

00:31:11,590 --> 00:31:19,390
authentication part

00:31:13,260 --> 00:31:35,440
any questions so far am i clear thank

00:31:19,390 --> 00:31:39,700
you oh yes as I try to explain its

00:31:35,440 --> 00:31:42,820
really the instantiation part should not

00:31:39,700 --> 00:31:46,030
be part of the class itself because the

00:31:42,820 --> 00:31:49,060
class itself should only focus on the

00:31:46,030 --> 00:31:51,070
business logic so it's better to have a

00:31:49,060 --> 00:31:52,750
separate class just focusing on the

00:31:51,070 --> 00:31:55,300
instantiation part that's that's the

00:31:52,750 --> 00:31:58,420
base point it won't hurt if you put it

00:31:55,300 --> 00:32:01,180
up there it's okay but um especially in

00:31:58,420 --> 00:32:03,370
this case because you're depending on a

00:32:01,180 --> 00:32:05,680
class that you provide with the

00:32:03,370 --> 00:32:08,830
framework itself because you're shipping

00:32:05,680 --> 00:32:12,310
this whole library part it probably is a

00:32:08,830 --> 00:32:13,720
bit worser if you do this in your

00:32:12,310 --> 00:32:15,520
application logic where you may be

00:32:13,720 --> 00:32:17,470
depend on a third party package where

00:32:15,520 --> 00:32:20,470
you have no clue where that's that class

00:32:17,470 --> 00:32:22,120
is coming from so in that case it might

00:32:20,470 --> 00:32:24,400
be a better idea to use this factory

00:32:22,120 --> 00:32:31,840
approach because then it's just a bit um

00:32:24,400 --> 00:32:35,620
yeah off so to speak next next in wrath

00:32:31,840 --> 00:32:37,750
or rage as it may be known so wrath is

00:32:35,620 --> 00:32:40,590
the only sin that is not necessarily

00:32:37,750 --> 00:32:44,350
associated with selfishness or

00:32:40,590 --> 00:32:46,210
self-interest although our one can of

00:32:44,350 --> 00:32:50,380
course be wrathful for selfish reasons

00:32:46,210 --> 00:32:52,630
um I really had a hard time find a good

00:32:50,380 --> 00:32:55,420
example for that so bear with me it

00:32:52,630 --> 00:32:59,200
doesn't make any sense at all oh just

00:32:55,420 --> 00:33:01,270
kidding just kidding okay one of these

00:32:59,200 --> 00:33:03,490
endless discussions and discussions on

00:33:01,270 --> 00:33:06,160
the internet a dependency injection

00:33:03,490 --> 00:33:10,200
container versus service locator can any

00:33:06,160 --> 00:33:10,200
one of you explain the difference to me

00:33:11,250 --> 00:33:14,250
yes

00:33:16,610 --> 00:33:24,870
exactly exactly that's exactly the point

00:33:21,690 --> 00:33:28,290
if we look how a interface looks like

00:33:24,870 --> 00:33:32,580
from a service locator on it looks like

00:33:28,290 --> 00:33:35,790
this we have a function get which gets

00:33:32,580 --> 00:33:38,760
an ID and identifiers and will return

00:33:35,790 --> 00:33:41,400
the instance that is associated with the

00:33:38,760 --> 00:33:43,710
ID if we don't find the ID or we don't

00:33:41,400 --> 00:33:47,580
find an association for the ID we throw

00:33:43,710 --> 00:33:49,410
a note found exception um to work around

00:33:47,580 --> 00:33:52,590
the note found exception we have also a

00:33:49,410 --> 00:33:54,750
has method which simply checks are if we

00:33:52,590 --> 00:33:58,200
could can resolve the ID which return a

00:33:54,750 --> 00:34:00,120
boolean value if you have a look at the

00:33:58,200 --> 00:34:02,130
public interface of a dependency

00:34:00,120 --> 00:34:06,020
injection container so from the point of

00:34:02,130 --> 00:34:09,090
view of a consumer um it looks like this

00:34:06,020 --> 00:34:13,260
we do have a get method that has an ID

00:34:09,090 --> 00:34:14,730
as a parameter the dependency injection

00:34:13,260 --> 00:34:16,169
container will resolve the idea and you

00:34:14,730 --> 00:34:19,230
turn the object associated with the ID

00:34:16,169 --> 00:34:20,970
if we do not find the association we

00:34:19,230 --> 00:34:22,770
return on our town exception to back

00:34:20,970 --> 00:34:26,070
around the not found exception we have a

00:34:22,770 --> 00:34:27,860
has method which accepts 90 and returns

00:34:26,070 --> 00:34:30,560
a boolean now you're laughing right

00:34:27,860 --> 00:34:34,770
because it looks exactly the same and

00:34:30,560 --> 00:34:36,630
that's that's it from a from a interface

00:34:34,770 --> 00:34:38,370
point of view it's really exactly the

00:34:36,630 --> 00:34:41,760
same what's different is exactly what

00:34:38,370 --> 00:34:45,960
you said it's what I call push versus

00:34:41,760 --> 00:34:47,820
pull like um when I when I'm dealing

00:34:45,960 --> 00:34:49,740
with a service locator I'm actively

00:34:47,820 --> 00:34:51,450
pulling out the dependencies right I

00:34:49,740 --> 00:34:54,900
need to write the code that pulls out

00:34:51,450 --> 00:34:56,580
the stuff vial in a in a dependency

00:34:54,900 --> 00:34:58,740
injection framework the framework itself

00:34:56,580 --> 00:35:01,260
will push me the dependencies right so

00:34:58,740 --> 00:35:03,090
it will create an instance of my class

00:35:01,260 --> 00:35:04,470
if you push the constructor arguments it

00:35:03,090 --> 00:35:07,950
would call the setters that I've defined

00:35:04,470 --> 00:35:11,010
so that's that's the difference um yeah

00:35:07,950 --> 00:35:12,990
so again if I would use a service

00:35:11,010 --> 00:35:14,790
locator I just interject inject the

00:35:12,990 --> 00:35:17,220
service locator and I would actively

00:35:14,790 --> 00:35:19,260
call get and again I have no clue what's

00:35:17,220 --> 00:35:21,420
coming back ideally it's exactly the

00:35:19,260 --> 00:35:24,090
service that I want ideally it's exactly

00:35:21,420 --> 00:35:26,130
the logger that I want it could be no it

00:35:24,090 --> 00:35:29,250
could be a scholar value I don't know

00:35:26,130 --> 00:35:30,420
all right anyone could set it any time

00:35:29,250 --> 00:35:34,100
if I use a dependency injection

00:35:30,420 --> 00:35:37,380
container um I first of all I clearly

00:35:34,100 --> 00:35:39,390
communicate my dependencies I say my

00:35:37,380 --> 00:35:40,950
controller needs my service and my lord

00:35:39,390 --> 00:35:42,810
if you want to create an instance

00:35:40,950 --> 00:35:44,790
provide me something that implements my

00:35:42,810 --> 00:35:48,690
service and something that implements my

00:35:44,790 --> 00:35:51,120
lager um in addition to that as you can

00:35:48,690 --> 00:35:53,250
see we have no dependency to any other

00:35:51,120 --> 00:35:56,070
framework or whatnot so it's really just

00:35:53,250 --> 00:35:59,010
my code base are really clean code

00:35:56,070 --> 00:36:09,150
maximum code reuse that's that's the

00:35:59,010 --> 00:36:11,190
point of view next up NV NV is

00:36:09,150 --> 00:36:15,380
characterized by an in stainable desire

00:36:11,190 --> 00:36:18,450
um envy is quite similar to jealousy um

00:36:15,380 --> 00:36:22,470
and again I really had a hard time

00:36:18,450 --> 00:36:23,640
finding good example for that well try

00:36:22,470 --> 00:36:26,610
to manage I want to talk about

00:36:23,640 --> 00:36:28,680
configuration types um they're basically

00:36:26,610 --> 00:36:31,050
two types of configuration for a DI

00:36:28,680 --> 00:36:33,000
container are one is internal

00:36:31,050 --> 00:36:35,550
configuration the other one is external

00:36:33,000 --> 00:36:38,220
configuration and I just want to outline

00:36:35,550 --> 00:36:39,540
the differences and y1 matters and why

00:36:38,220 --> 00:36:42,420
you should probably both in your

00:36:39,540 --> 00:36:44,760
application because they are focusing on

00:36:42,420 --> 00:36:47,880
different parts they've just different

00:36:44,760 --> 00:36:49,800
ideas that may or may not be clear to to

00:36:47,880 --> 00:36:52,350
some of you so internal configuration

00:36:49,800 --> 00:36:54,630
basically means annotations that's the

00:36:52,350 --> 00:36:57,690
only way that we can configure stuff in

00:36:54,630 --> 00:37:00,120
the code so there are frameworks that

00:36:57,690 --> 00:37:03,240
provide an annotation that's called add

00:37:00,120 --> 00:37:06,540
inject when the dependency injection

00:37:03,240 --> 00:37:10,110
container tries to create a instance of

00:37:06,540 --> 00:37:12,480
all service it will see that there is a

00:37:10,110 --> 00:37:15,330
notation for the constructor so the

00:37:12,480 --> 00:37:16,620
container will try to resolve the

00:37:15,330 --> 00:37:18,890
dependencies of the constructor

00:37:16,620 --> 00:37:21,630
instantiate them and then inject them

00:37:18,890 --> 00:37:25,890
while creating the instance of the oil

00:37:21,630 --> 00:37:29,040
service thing is in this case it might

00:37:25,890 --> 00:37:31,140
be easy because on we probably have just

00:37:29,040 --> 00:37:33,390
one class that implements this interface

00:37:31,140 --> 00:37:35,220
but what happens if we have multiple

00:37:33,390 --> 00:37:39,720
implementations of the earth provider

00:37:35,220 --> 00:37:41,400
interface anyone idea well the whole

00:37:39,720 --> 00:37:43,020
thing will blow up because the DI

00:37:41,400 --> 00:37:44,850
container doesn't know we

00:37:43,020 --> 00:37:48,350
instance you really want to inject in

00:37:44,850 --> 00:37:53,250
this case we can work around with that

00:37:48,350 --> 00:37:54,240
arm and this is just randomly used so it

00:37:53,250 --> 00:37:56,520
could be different in different

00:37:54,240 --> 00:38:02,670
frameworks are there is a net named

00:37:56,520 --> 00:38:05,730
annotation mmm which would define the

00:38:02,670 --> 00:38:09,090
class that should be injected so anytime

00:38:05,730 --> 00:38:11,850
I create an instance of or service the

00:38:09,090 --> 00:38:13,350
DI framework will inject the rest orth

00:38:11,850 --> 00:38:17,250
provider I don't have to configure it

00:38:13,350 --> 00:38:20,430
myself it's just written there but I'm

00:38:17,250 --> 00:38:23,610
not able to influence that so if for

00:38:20,430 --> 00:38:25,620
some weird reasons I want an author is

00:38:23,610 --> 00:38:28,020
instantiated with a different provider

00:38:25,620 --> 00:38:33,090
it's not possible because the framework

00:38:28,020 --> 00:38:38,580
really takes on the dependency in the ad

00:38:33,090 --> 00:38:40,830
named annotation um there is another way

00:38:38,580 --> 00:38:43,500
what it can do are we can use

00:38:40,830 --> 00:38:47,670
annotations at the interface interface

00:38:43,500 --> 00:38:50,130
point we can say implemented by which

00:38:47,670 --> 00:38:51,840
basically means that the DI container

00:38:50,130 --> 00:38:54,960
will see hey we got this oath provider

00:38:51,840 --> 00:38:57,570
interface and anywhere in my application

00:38:54,960 --> 00:39:00,270
code where I refer to auth provider

00:38:57,570 --> 00:39:03,090
interface I actually mean rest or

00:39:00,270 --> 00:39:06,150
provider so it doesn't belong or it does

00:39:03,090 --> 00:39:08,550
not fix the dependency to just one class

00:39:06,150 --> 00:39:11,880
but to all the occurrences of auth

00:39:08,550 --> 00:39:15,870
provider interface a model co-pays so

00:39:11,880 --> 00:39:18,210
that's even more explicit and you're not

00:39:15,870 --> 00:39:21,240
able to influence that so the thing is

00:39:18,210 --> 00:39:25,610
that annotations really focus on classes

00:39:21,240 --> 00:39:29,160
not on the instances so i define i

00:39:25,610 --> 00:39:30,750
define the injection types really on a

00:39:29,160 --> 00:39:34,830
class level i'm not able to influence

00:39:30,750 --> 00:39:37,260
that on the other hand we have external

00:39:34,830 --> 00:39:39,440
configuration and there are tons of

00:39:37,260 --> 00:39:44,070
examples so this is jemel there

00:39:39,440 --> 00:39:46,320
frameworks that use XML or I and I or

00:39:44,070 --> 00:39:48,080
PHP files or whatnot so it's really up

00:39:46,320 --> 00:39:49,910
to you to pick whatever you like

00:39:48,080 --> 00:39:52,740
external confirmation is a bit different

00:39:49,910 --> 00:39:55,500
first of all I need to write a bit more

00:39:52,740 --> 00:39:56,580
configuration code like in this case we

00:39:55,500 --> 00:39:58,050
say

00:39:56,580 --> 00:39:59,640
we have North provider that is

00:39:58,050 --> 00:40:01,710
implemented by the rest of all provider

00:39:59,640 --> 00:40:04,290
class we have an old service that is

00:40:01,710 --> 00:40:06,540
using the all service class and it has

00:40:04,290 --> 00:40:08,490
arguments so the first argument of the

00:40:06,540 --> 00:40:10,560
old service is the auth provider so i

00:40:08,490 --> 00:40:14,070
doth provider refers to the definition

00:40:10,560 --> 00:40:17,090
over here if I want to reconfigure that

00:40:14,070 --> 00:40:24,720
on I can do so I'm really free to do so

00:40:17,090 --> 00:40:26,970
wait okay like in this case we have

00:40:24,720 --> 00:40:29,610
different two types of providers we've

00:40:26,970 --> 00:40:31,860
got a rest provider a so provider and we

00:40:29,610 --> 00:40:34,530
got to implement two implementations two

00:40:31,860 --> 00:40:36,990
configurations and also with rest and

00:40:34,530 --> 00:40:39,510
author is soap the class is exactly the

00:40:36,990 --> 00:40:42,960
same what's different is just the

00:40:39,510 --> 00:40:46,440
argument so the rest also is points to

00:40:42,960 --> 00:40:51,770
the rest provider while the the also

00:40:46,440 --> 00:40:54,120
rizzo points to the sole provider so I I

00:40:51,770 --> 00:40:56,610
tend to call it like virtual instances

00:40:54,120 --> 00:41:01,560
so I really configure that stuff and I'm

00:40:56,610 --> 00:41:03,530
able to use it arm even though the code

00:41:01,560 --> 00:41:06,270
is not there right so it's just

00:41:03,530 --> 00:41:08,550
virtually configured in this container I

00:41:06,270 --> 00:41:11,910
just wire things up exactly how I need

00:41:08,550 --> 00:41:14,970
them and just pull the stuff out as i do

00:41:11,910 --> 00:41:17,490
need them so we don't need to have any

00:41:14,970 --> 00:41:22,980
child classes to do all the wiring it

00:41:17,490 --> 00:41:24,840
can all be done in the container so this

00:41:22,980 --> 00:41:26,490
is pretty powerful but as you can see

00:41:24,840 --> 00:41:28,500
you probably need to write a lot code

00:41:26,490 --> 00:41:30,990
and most people don't like this external

00:41:28,500 --> 00:41:32,640
configuration stuff because you create a

00:41:30,990 --> 00:41:34,710
class a PHP class then you have to

00:41:32,640 --> 00:41:36,450
switch to the configuration file at the

00:41:34,710 --> 00:41:39,020
different settings switching back to the

00:41:36,450 --> 00:41:43,410
code yeah jumping back and forth so it

00:41:39,020 --> 00:41:46,770
can be curacao thing is that both to

00:41:43,410 --> 00:41:48,990
make sense probably it's the best to go

00:41:46,770 --> 00:41:50,700
for both like using a mix of internal

00:41:48,990 --> 00:41:53,580
and external configuration but again you

00:41:50,700 --> 00:41:57,420
need to be aware of the of the ideas of

00:41:53,580 --> 00:41:59,850
the limitations of each of the different

00:41:57,420 --> 00:42:05,430
ways and choose whatever makes sense to

00:41:59,850 --> 00:42:08,720
you as I said before they are frameworks

00:42:05,430 --> 00:42:10,350
out there that use a php-based

00:42:08,720 --> 00:42:15,120
configuration like in this

00:42:10,350 --> 00:42:18,120
case arm that looks like a lot code

00:42:15,120 --> 00:42:20,340
right it's 13 lines of code with these

00:42:18,120 --> 00:42:24,180
certain lines of code I want to express

00:42:20,340 --> 00:42:26,580
this we probably don't see it in the

00:42:24,180 --> 00:42:30,570
back it says new auth service and then

00:42:26,580 --> 00:42:33,480
we inject the new rest of provider if I

00:42:30,570 --> 00:42:35,880
have to use 13 lines of code to express

00:42:33,480 --> 00:42:38,700
like a single line the framework is

00:42:35,880 --> 00:42:40,230
doing it wrong the framework should not

00:42:38,700 --> 00:42:42,180
be in your way right I don't want to

00:42:40,230 --> 00:42:45,060
write 13 lines of code just to express a

00:42:42,180 --> 00:42:47,010
single line that's really stupid arm so

00:42:45,060 --> 00:42:49,980
if your framework forces you to do that

00:42:47,010 --> 00:42:53,820
you probably should switch it pick

00:42:49,980 --> 00:42:56,040
another one um so yeah as I said if the

00:42:53,820 --> 00:42:58,550
configuration is too complex maybe

00:42:56,040 --> 00:43:00,930
you're using the wrong container arm

00:42:58,550 --> 00:43:06,240
there are people out there who think

00:43:00,930 --> 00:43:09,330
that di is slow which I can say it

00:43:06,240 --> 00:43:16,760
really depends on the DI implementation

00:43:09,330 --> 00:43:19,410
um if you use oh wait if I use a

00:43:16,760 --> 00:43:22,110
configuration language like this or if I

00:43:19,410 --> 00:43:24,240
use an XML file or a gem file that gets

00:43:22,110 --> 00:43:26,430
parsed on every request and you use the

00:43:24,240 --> 00:43:28,890
reflection API to create all the

00:43:26,430 --> 00:43:32,840
dependencies then yes di might be slow

00:43:28,890 --> 00:43:35,640
if you are able to use a php-based

00:43:32,840 --> 00:43:37,740
configuration that looks like this down

00:43:35,640 --> 00:43:39,450
below here where you're really like hard

00:43:37,740 --> 00:43:41,970
code the different dependencies like you

00:43:39,450 --> 00:43:46,130
would do manually d is super fast

00:43:41,970 --> 00:43:48,810
because it's not more than just a normal

00:43:46,130 --> 00:43:50,550
object dependency chaining whatever you

00:43:48,810 --> 00:43:52,770
call it it can't get any faster than

00:43:50,550 --> 00:43:56,160
that if you get code that is called that

00:43:52,770 --> 00:43:57,870
that works faster than that probably

00:43:56,160 --> 00:43:59,790
came up with a better and PHP

00:43:57,870 --> 00:44:01,020
implementation I don't know so the eye

00:43:59,790 --> 00:44:05,070
is not really slow if you use a

00:44:01,020 --> 00:44:11,580
container that that supports stuff like

00:44:05,070 --> 00:44:15,270
that yeah so last up I'm pretty good on

00:44:11,580 --> 00:44:17,490
time actually pride so pride is

00:44:15,270 --> 00:44:19,620
considered being the original and the

00:44:17,490 --> 00:44:22,710
most series of the seven deadly sins and

00:44:19,620 --> 00:44:24,120
the source of all the others are it is

00:44:22,710 --> 00:44:25,260
identified as believing that

00:44:24,120 --> 00:44:33,540
one is essentially better than any

00:44:25,260 --> 00:44:40,830
others which basically boils down to

00:44:33,540 --> 00:44:42,390
this in the first part of this talk I

00:44:40,830 --> 00:44:44,160
really bitched about this service

00:44:42,390 --> 00:44:48,900
locator thing and I don't really like

00:44:44,160 --> 00:44:51,390
that thing is that a service locator is

00:44:48,900 --> 00:44:53,700
not really bad or tight couple

00:44:51,390 --> 00:44:57,090
components may not really bad in certain

00:44:53,700 --> 00:44:59,640
situations um be aware of the

00:44:57,090 --> 00:45:01,800
limitations be aware of the things that

00:44:59,640 --> 00:45:03,960
you need to do be aware of how to

00:45:01,800 --> 00:45:06,300
structure your code and pick the right

00:45:03,960 --> 00:45:09,440
solution right no over-engineering don't

00:45:06,300 --> 00:45:12,870
do just too much just to make the code

00:45:09,440 --> 00:45:15,390
super beautiful make sure what it's

00:45:12,870 --> 00:45:17,100
needed to get the job done on the other

00:45:15,390 --> 00:45:19,590
hand obviously you need to understand

00:45:17,100 --> 00:45:20,670
the eye and as I saw many of you raise

00:45:19,590 --> 00:45:29,220
their hands so I guess you have

00:45:20,670 --> 00:45:31,260
understood the eye on I lost track yeah

00:45:29,220 --> 00:45:34,320
make sure that you understand how it

00:45:31,260 --> 00:45:37,800
works how for which parts it can be used

00:45:34,320 --> 00:45:40,860
how it should be used and learn to love

00:45:37,800 --> 00:45:42,780
it thing is that I really think the eye

00:45:40,860 --> 00:45:46,260
is a different kind of lifestyle it's

00:45:42,780 --> 00:45:48,390
about thinking how you manage your your

00:45:46,260 --> 00:45:51,840
dependencies how you structure your code

00:45:48,390 --> 00:45:56,070
how to rethink about on yet the

00:45:51,840 --> 00:45:59,960
dependencies of your code and how all of

00:45:56,070 --> 00:46:03,690
that works together we're almost there

00:45:59,960 --> 00:46:06,180
the famous final words it's actually the

00:46:03,690 --> 00:46:08,250
quote that I started my first year I

00:46:06,180 --> 00:46:09,720
presentation four years ago dependency

00:46:08,250 --> 00:46:14,190
injection is a key element of an agile

00:46:09,720 --> 00:46:17,790
architecture who view is doing waterfall

00:46:14,190 --> 00:46:21,360
development no one raises and thank you

00:46:17,790 --> 00:46:23,670
so much so you're all doing agile i

00:46:21,360 --> 00:46:27,930
right scrum Kanban whatnot your own

00:46:23,670 --> 00:46:29,970
thing what now thing is we are living in

00:46:27,930 --> 00:46:32,400
a world that's that's going really fast

00:46:29,970 --> 00:46:34,320
right I mean we are working for for

00:46:32,400 --> 00:46:37,350
customers who come up with idea with new

00:46:34,320 --> 00:46:37,950
ideas on a daily basis which is good for

00:46:37,350 --> 00:46:40,040
us because

00:46:37,950 --> 00:46:43,920
generates jobs but on the other hand

00:46:40,040 --> 00:46:46,890
obviously we need to incorporate these

00:46:43,920 --> 00:46:50,849
ideas and these changes to a existing

00:46:46,890 --> 00:46:52,800
code base if you think first and this is

00:46:50,849 --> 00:46:55,880
again what I said at the beginning if

00:46:52,800 --> 00:46:58,200
you think first and plan up front how a

00:46:55,880 --> 00:47:01,380
good application structure could look

00:46:58,200 --> 00:47:03,570
like it might be really easy to add a

00:47:01,380 --> 00:47:05,880
different implementation and just use

00:47:03,570 --> 00:47:08,520
some configuration code to exchange it

00:47:05,880 --> 00:47:11,070
and it will run so it might be pretty

00:47:08,520 --> 00:47:13,530
easy for you to get changes in pretty

00:47:11,070 --> 00:47:15,660
fast in your code base and to react on

00:47:13,530 --> 00:47:18,540
on the customers on changing customer

00:47:15,660 --> 00:47:22,079
requirements really easy depending on

00:47:18,540 --> 00:47:24,540
your customer obviously which can be

00:47:22,079 --> 00:47:28,230
really hard I know it's probably another

00:47:24,540 --> 00:47:31,200
talk um yeah so that was it from my side

00:47:28,230 --> 00:47:34,680
I hope you had a lot of fun especially

00:47:31,200 --> 00:47:38,339
in the first part I hope you learned a

00:47:34,680 --> 00:47:40,190
bit from it and last but not least this

00:47:38,339 --> 00:47:42,420
is the second time I gave the talk

00:47:40,190 --> 00:47:45,839
please do rate it I'm really interested

00:47:42,420 --> 00:47:49,470
in your opinion um tell me if I

00:47:45,839 --> 00:47:51,599
completely up tell me if this was

00:47:49,470 --> 00:47:57,170
the best talk ever maybe it's something

00:47:51,599 --> 00:47:57,170
in between going for either end thank

00:48:06,320 --> 00:48:10,560
we do got time for some questions so if

00:48:09,090 --> 00:48:15,140
you have any questions feel free to

00:48:10,560 --> 00:48:15,140
raise your hand or come to the front yes

00:48:16,130 --> 00:48:30,600
yes yes can you think of any can you

00:48:28,140 --> 00:48:37,290
give an example of the reason why you do

00:48:30,600 --> 00:48:38,970
that simply hmm I'm probably the wrong

00:48:37,290 --> 00:48:40,530
guy asking these questions because I

00:48:38,970 --> 00:48:44,580
don't really like the internal

00:48:40,530 --> 00:48:48,810
configuration stuff mostly because well

00:48:44,580 --> 00:48:57,720
let's see if I can get back whoa where

00:48:48,810 --> 00:49:01,620
is it yes I don't like it for the reason

00:48:57,720 --> 00:49:03,990
I mean let me put it the other way most

00:49:01,620 --> 00:49:06,300
people like it because it's right next

00:49:03,990 --> 00:49:09,540
to the code where it belongs to which

00:49:06,300 --> 00:49:12,480
can be a valid argument um I don't like

00:49:09,540 --> 00:49:16,320
it because for from my point of view

00:49:12,480 --> 00:49:18,600
it's just hidden in a comment right it's

00:49:16,320 --> 00:49:21,090
I see it's a configuration I can see it

00:49:18,600 --> 00:49:23,460
I can see it in the dot block but yeah

00:49:21,090 --> 00:49:26,490
it's connected to the code so this is

00:49:23,460 --> 00:49:35,430
not really my thing obviously it can

00:49:26,490 --> 00:49:38,370
make sense um it can make sense it can

00:49:35,430 --> 00:49:40,200
make sense I've no good I dad just try

00:49:38,370 --> 00:49:45,150
to come up with an idea what what what

00:49:40,200 --> 00:49:48,300
could be yo use of what yeah negate does

00:49:45,150 --> 00:49:52,230
it negate the purpose of using an

00:49:48,300 --> 00:49:55,020
interface in the first place apart here

00:49:52,230 --> 00:49:59,640
you use the old provider interface you

00:49:55,020 --> 00:50:04,710
might as well say rest out provider oh

00:49:59,640 --> 00:50:08,280
yeah ok icse a perfect question which

00:50:04,710 --> 00:50:09,750
can generate a lot of discussions which

00:50:08,280 --> 00:50:16,400
it in the past and we will do so in the

00:50:09,750 --> 00:50:18,710
future thing is you don't want that

00:50:16,400 --> 00:50:20,660
but that's the simple as possible as you

00:50:18,710 --> 00:50:26,569
don't want to depend on a specific

00:50:20,660 --> 00:50:30,980
implementation because you want to have

00:50:26,569 --> 00:50:36,440
a dependency defined as abstract as

00:50:30,980 --> 00:50:39,799
possible as I try to say before for the

00:50:36,440 --> 00:50:42,049
earth service it is not relevant that

00:50:39,799 --> 00:50:44,420
there is an oath and the rest of

00:50:42,049 --> 00:50:46,279
provider out there the old service

00:50:44,420 --> 00:50:49,730
should just know there is this interface

00:50:46,279 --> 00:50:51,799
it has like two methods and they

00:50:49,730 --> 00:50:53,710
interface it like a contract it's a

00:50:51,799 --> 00:50:57,520
contract between the earth service and

00:50:53,710 --> 00:51:00,140
anything I will ever inject in it the

00:50:57,520 --> 00:51:01,369
service knows the public interface it

00:51:00,140 --> 00:51:03,680
knows the methods it knows the

00:51:01,369 --> 00:51:06,349
parameters it knows the returning values

00:51:03,680 --> 00:51:09,260
and both sides like the oil service

00:51:06,349 --> 00:51:11,599
itself and the implementation class like

00:51:09,260 --> 00:51:13,700
in this case the rest of provider have

00:51:11,599 --> 00:51:15,490
to adhere to this interface it's a

00:51:13,700 --> 00:51:19,339
contract if you violate the contract

00:51:15,490 --> 00:51:23,359
someone something will blow up and you

00:51:19,339 --> 00:51:25,910
can quite easily easily identify who

00:51:23,359 --> 00:51:27,230
violated against the contract because it

00:51:25,910 --> 00:51:29,240
was either the or service or the

00:51:27,230 --> 00:51:32,410
implementing class that's basically the

00:51:29,240 --> 00:51:36,680
idea why we want an interface in there I

00:51:32,410 --> 00:51:45,980
still no good example for 424 when to

00:51:36,680 --> 00:51:48,640
use annotations no I'm sorry yes doesn't

00:51:45,980 --> 00:51:56,720
this kind of internal configuration make

00:51:48,640 --> 00:52:04,460
the code order to test or the other way

00:51:56,720 --> 00:52:06,890
around yes I would think so yes because

00:52:04,460 --> 00:52:10,819
if i go for the external configuration

00:52:06,890 --> 00:52:12,500
approach hope you're here if you go for

00:52:10,819 --> 00:52:16,010
the external configuration approach you

00:52:12,500 --> 00:52:17,359
can have a configuration file for

00:52:16,010 --> 00:52:20,329
production mode and the configuration

00:52:17,359 --> 00:52:22,520
file for for the test mode with internal

00:52:20,329 --> 00:52:24,230
configuration you don't have this you

00:52:22,520 --> 00:52:26,089
don't have the possibility for for these

00:52:24,230 --> 00:52:29,210
two because as i said it's just hard

00:52:26,089 --> 00:52:30,109
coded in there um so that may be a point

00:52:29,210 --> 00:52:34,069
where you can say it's

00:52:30,109 --> 00:52:41,420
it's bad Oh too many hands I think you

00:52:34,069 --> 00:52:44,480
were first yes for my battery dependency

00:52:41,420 --> 00:52:50,119
management from the very start from your

00:52:44,480 --> 00:52:53,390
own experience does that mom easier at

00:52:50,119 --> 00:52:55,789
least you you are you're may be more

00:52:53,390 --> 00:52:58,670
aware of these dependencies and how how

00:52:55,789 --> 00:53:02,029
how to wire things up where to put

00:52:58,670 --> 00:53:04,069
things yes if you really come from this

00:53:02,029 --> 00:53:07,039
testing point and you need to mock

00:53:04,069 --> 00:53:16,730
objects mock dependencies this makes it

00:53:07,039 --> 00:53:20,859
really easy if you're um yes point yes

00:53:16,730 --> 00:53:20,859
but we one here one there you decide

00:53:21,609 --> 00:53:34,579
what's your framework of choice our own

00:53:29,749 --> 00:53:37,849
one if you ask me which the I framework

00:53:34,579 --> 00:53:39,829
I would prefer I think in this case soon

00:53:37,849 --> 00:53:43,880
funny I think they did a pretty good job

00:53:39,829 --> 00:53:44,980
arm since this talk is recorded I won't

00:53:43,880 --> 00:53:47,569
comment on any other frameworks

00:53:44,980 --> 00:53:54,380
otherwise some of my speaker friends

00:53:47,569 --> 00:53:55,609
might be annoyed yes hate to sound a

00:53:54,380 --> 00:53:57,950
complaint another nail in the

00:53:55,609 --> 00:54:00,220
annotations but you have to use a

00:53:57,950 --> 00:54:02,630
reflection class right Oh deflection

00:54:00,220 --> 00:54:04,940
exactly that's another downside yes

00:54:02,630 --> 00:54:08,059
obviously to get actually in the current

00:54:04,940 --> 00:54:09,950
PHP implementation as far as I know you

00:54:08,059 --> 00:54:12,349
need the reflection API to be able to

00:54:09,950 --> 00:54:14,359
get the doc block and then just do some

00:54:12,349 --> 00:54:16,910
string stuff to swing manipulations to

00:54:14,359 --> 00:54:18,470
get it that's out please don't write

00:54:16,910 --> 00:54:21,859
your own annotation library there are

00:54:18,470 --> 00:54:23,420
tons out there um just use what's there

00:54:21,859 --> 00:54:31,210
if you want to really reinvent the wheel

00:54:23,420 --> 00:54:31,210
just think of another wheel yes

00:54:32,230 --> 00:54:45,820
I am how do you feel about using traits

00:54:38,560 --> 00:54:47,830
to implement interface injection um so

00:54:45,820 --> 00:54:50,410
far I have not used it but I plan to use

00:54:47,830 --> 00:54:52,510
it because obviously it makes sense I

00:54:50,410 --> 00:54:55,150
don't want to write this setter stuff

00:54:52,510 --> 00:54:58,780
all over again so trade perfectly fits

00:54:55,150 --> 00:55:02,290
in that direction I guess so yeah that's

00:54:58,780 --> 00:55:06,810
definitely way to go one over okay one

00:55:02,290 --> 00:55:16,600
last one no one one last free answer

00:55:06,810 --> 00:55:17,770
okay up in the front in two levels of

00:55:16,600 --> 00:55:20,920
dependency injection so everything you

00:55:17,770 --> 00:55:22,780
sure you've really had one level being

00:55:20,920 --> 00:55:24,970
ejected and that first level things

00:55:22,780 --> 00:55:27,010
being very simple to construct so if you

00:55:24,970 --> 00:55:28,330
can have things that you can slip blonde

00:55:27,010 --> 00:55:30,460
thing that's got several dependencies in

00:55:28,330 --> 00:55:32,619
you pass that into something else and

00:55:30,460 --> 00:55:34,090
passed out to something else there's

00:55:32,619 --> 00:55:35,290
anything that you've talked about change

00:55:34,090 --> 00:55:38,410
when you get into those kind of levels

00:55:35,290 --> 00:55:40,030
of complexity um not really because you

00:55:38,410 --> 00:55:42,430
don't care actually so that's probably

00:55:40,030 --> 00:55:44,980
the easiest answer because I'm i just

00:55:42,430 --> 00:55:46,960
say i need object X and I really don't

00:55:44,980 --> 00:55:49,390
care about its dependencies all I need

00:55:46,960 --> 00:55:51,430
to care is what I want to care about is

00:55:49,390 --> 00:55:53,380
first of all the interface that I set up

00:55:51,430 --> 00:55:55,330
and then the object that implements it

00:55:53,380 --> 00:55:57,520
but the dependencies of that object I

00:55:55,330 --> 00:55:59,020
don't really care I know the container

00:55:57,520 --> 00:56:01,000
will pick that up and we'll do it for me

00:55:59,020 --> 00:56:03,130
that's really one of the key parts of

00:56:01,000 --> 00:56:05,650
the I I don't need to focus on this

00:56:03,130 --> 00:56:15,369
whole object trees I don't care about

00:56:05,650 --> 00:56:17,170
that one oh yeah that's exactly the

00:56:15,369 --> 00:56:19,000
point yes so instead of going like

00:56:17,170 --> 00:56:23,470
horizontally you probably go vertical

00:56:19,000 --> 00:56:25,300
yeah maybe automix one good point so

00:56:23,470 --> 00:56:29,640
that was the last question I don't think

00:56:25,300 --> 00:56:29,640
we have any more thank you very much

00:56:30,770 --> 00:56:32,830

YouTube URL: https://www.youtube.com/watch?v=hMix8gfDy54


