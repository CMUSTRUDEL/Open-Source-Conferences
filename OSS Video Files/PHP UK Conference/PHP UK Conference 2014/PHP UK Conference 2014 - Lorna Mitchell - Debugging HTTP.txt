Title: PHP UK Conference 2014 - Lorna Mitchell - Debugging HTTP
Publication date: 2014-03-21
Playlist: PHP UK Conference 2014
Description: 
	In this world where we have moved beyond web pages and build ever-more asynchronous applications, often things that go wrong result in errors we can't see. This session will give a very technical overview of HTTP and how to inspect your application's communications, whether on the web or on a mobile device. Using Curl, Wireshark and Charles, we can quickly and painlessly identify where the problem exists, without spending a lot of time making changes to our application to identify a problem. Whether you're debugging a backend API, an ajax request or an unexpected timeout, these are the tools you will want to have at hand.
Captions: 
	00:00:04,790 --> 00:00:09,870
good morning everybody it's great to see

00:00:07,440 --> 00:00:11,519
you great to be here my name is Lorna

00:00:09,870 --> 00:00:15,960
and I'm here to talk to you about

00:00:11,519 --> 00:00:19,800
debugging HTTP let's start with the

00:00:15,960 --> 00:00:23,490
debugging there are six recognized

00:00:19,800 --> 00:00:26,119
stages in the process of debugging some

00:00:23,490 --> 00:00:32,399
of them may be familiar to you

00:00:26,119 --> 00:00:37,559
the first is denial that cannot happen

00:00:32,399 --> 00:00:38,670
the second is frustration it doesn't

00:00:37,559 --> 00:00:41,579
happen on my machine

00:00:38,670 --> 00:00:44,360
this may translate as it was perfectly

00:00:41,579 --> 00:00:47,579
fine when I deployed it two hours ago I

00:00:44,360 --> 00:00:51,180
may move on to I've never seen it do

00:00:47,579 --> 00:00:55,559
that before the third phase is the

00:00:51,180 --> 00:01:01,829
disbelief like this is the you cannot be

00:00:55,559 --> 00:01:04,140
serious phase of debugging the next

00:01:01,829 --> 00:01:07,350
stage is where we start to get a bit

00:01:04,140 --> 00:01:11,790
more constructive about it I call it the

00:01:07,350 --> 00:01:15,299
curious phase you are done with kind of

00:01:11,790 --> 00:01:18,150
the emotional response and you're now

00:01:15,299 --> 00:01:20,580
into using your skills to look at and

00:01:18,150 --> 00:01:22,770
solve the problem so we start to look at

00:01:20,580 --> 00:01:28,880
why something has gone wrong and how we

00:01:22,770 --> 00:01:31,619
can understand the problem it once we do

00:01:28,880 --> 00:01:34,500
gotcha that's when the light comes on

00:01:31,619 --> 00:01:39,900
and you proceed to relief and wonder how

00:01:34,500 --> 00:01:42,090
this ever worked this is familiar to you

00:01:39,900 --> 00:01:45,000
and I kind of wanted to open with that

00:01:42,090 --> 00:01:48,299
because I want to make the point that

00:01:45,000 --> 00:01:50,130
fault finding with HTTP trying to debug

00:01:48,299 --> 00:01:55,350
problems in an increasingly

00:01:50,130 --> 00:01:57,479
interconnected world is really much like

00:01:55,350 --> 00:02:00,180
fault finding everywhere else in the

00:01:57,479 --> 00:02:03,780
project my backgrounds in electronic

00:02:00,180 --> 00:02:05,909
engineering and the theories of you know

00:02:03,780 --> 00:02:08,009
testing things get the multimeter out

00:02:05,909 --> 00:02:08,780
look at what's going on it's the same

00:02:08,009 --> 00:02:14,980
kind of

00:02:08,780 --> 00:02:17,510
attitude when you debug it's usually

00:02:14,980 --> 00:02:21,740
finding the problem that is the hardest

00:02:17,510 --> 00:02:24,830
part I am going to today try and show

00:02:21,740 --> 00:02:27,380
you some tools that will help you to

00:02:24,830 --> 00:02:30,680
find and understand the problems in your

00:02:27,380 --> 00:02:33,050
system we'll talk about reproducing the

00:02:30,680 --> 00:02:36,530
problem I'm going to show you Wireshark

00:02:33,050 --> 00:02:38,900
for inspecting traffic Cal for making

00:02:36,530 --> 00:02:41,630
any kind of HTTP requests in the world

00:02:38,900 --> 00:02:44,480
that you might want to and Charles proxy

00:02:41,630 --> 00:02:48,489
for some other clever tricks that might

00:02:44,480 --> 00:02:53,000
come in handy so this is my attempt to

00:02:48,489 --> 00:02:56,060
allow all of you to kind of look over my

00:02:53,000 --> 00:02:58,280
shoulder the tools that I use do a lot

00:02:56,060 --> 00:03:00,680
of PHP and ape specifically API

00:02:58,280 --> 00:03:03,890
development and these are the tools that

00:03:00,680 --> 00:03:06,319
I use and I want to try try and scale

00:03:03,890 --> 00:03:08,750
that up so in quite enthusiastic about

00:03:06,319 --> 00:03:11,209
this and I hope that you will get

00:03:08,750 --> 00:03:13,310
something from it the tools are really

00:03:11,209 --> 00:03:15,350
important understanding your tools

00:03:13,310 --> 00:03:17,989
really well is what will allow you to

00:03:15,350 --> 00:03:21,079
find the problems and be the hero under

00:03:17,989 --> 00:03:23,060
pressure it's about making the most of

00:03:21,079 --> 00:03:25,730
your tools and getting to know what they

00:03:23,060 --> 00:03:30,170
can do going to start with a tool called

00:03:25,730 --> 00:03:33,110
curl curls one of my favorite tools it

00:03:30,170 --> 00:03:34,459
tends not to be well-loved by PHP

00:03:33,110 --> 00:03:38,329
developers and I think that's a

00:03:34,459 --> 00:03:39,200
combination of not all of us a command

00:03:38,329 --> 00:03:42,920
line nuts

00:03:39,200 --> 00:03:46,070
I will tell you now that I am a command

00:03:42,920 --> 00:03:52,840
line nut and use Twitter from the

00:03:46,070 --> 00:03:55,880
command line not all of us are also the

00:03:52,840 --> 00:03:57,799
so PHP has this thing called a curl

00:03:55,880 --> 00:04:00,320
extension I don't know if you've ever

00:03:57,799 --> 00:04:02,780
used it but it has basically the worst

00:04:00,320 --> 00:04:06,350
interface of any extension in the world

00:04:02,780 --> 00:04:09,560
ever so if you think that is curl then

00:04:06,350 --> 00:04:11,329
yeah I would hate it to curl is a

00:04:09,560 --> 00:04:13,459
command line tool it's a multi-tool it's

00:04:11,329 --> 00:04:16,489
a Swiss Army knife it does everything

00:04:13,459 --> 00:04:20,390
you could possibly need it to do the man

00:04:16,489 --> 00:04:21,170
page for curl is I'm going to say

00:04:20,390 --> 00:04:24,890
substantial

00:04:21,170 --> 00:04:26,810
chill okay there's a lot to it but in

00:04:24,890 --> 00:04:30,770
fact there are only a few switches that

00:04:26,810 --> 00:04:33,290
I ever use this slide is titled curl as

00:04:30,770 --> 00:04:35,810
your friend because I really think it

00:04:33,290 --> 00:04:38,960
can be I really think it can be a really

00:04:35,810 --> 00:04:41,300
good way of working with HTTP so here is

00:04:38,960 --> 00:04:42,890
the Launer man page for things you

00:04:41,300 --> 00:04:44,120
actually need to know about curl and

00:04:42,890 --> 00:04:48,860
we'll leave all those other switches

00:04:44,120 --> 00:04:50,930
aside I use the dash X with a verb to

00:04:48,860 --> 00:04:53,360
say what kind of requests I'm making so

00:04:50,930 --> 00:04:56,180
might be get or post I work a lot with

00:04:53,360 --> 00:04:58,820
restful api so put delete patch head

00:04:56,180 --> 00:05:02,530
options other things not yet invented by

00:04:58,820 --> 00:05:05,810
HTTP curl does have some specific

00:05:02,530 --> 00:05:08,690
switches for sending a get request

00:05:05,810 --> 00:05:10,970
sending a post request it doesn't have

00:05:08,690 --> 00:05:16,190
them for every possible verb so I always

00:05:10,970 --> 00:05:19,420
use - X - H to send a header value and

00:05:16,190 --> 00:05:22,490
you literally quote the key colon value

00:05:19,420 --> 00:05:23,990
pair that you want to send and if you

00:05:22,490 --> 00:05:27,170
want to send another header then you

00:05:23,990 --> 00:05:31,310
send another - H switch you're gonna see

00:05:27,170 --> 00:05:34,610
these in a demo that I do in a moment -

00:05:31,310 --> 00:05:37,340
D is for data if you just do - D with

00:05:34,610 --> 00:05:39,290
key value pairs by default curl will

00:05:37,340 --> 00:05:40,550
send that as opposed to requesting to

00:05:39,290 --> 00:05:42,590
send them as if you would submitted them

00:05:40,550 --> 00:05:47,900
from a webform which is often what we're

00:05:42,590 --> 00:05:51,140
trying to do you can send a series of

00:05:47,900 --> 00:05:53,780
key value pairs you can send a string in

00:05:51,140 --> 00:05:56,630
another format or you can just give the

00:05:53,780 --> 00:05:58,430
name of a file to take data from so

00:05:56,630 --> 00:06:01,700
you're testing actually sending data to

00:05:58,430 --> 00:06:03,290
an API that data on the command line can

00:06:01,700 --> 00:06:05,450
kind of just make it rap and rap and rap

00:06:03,290 --> 00:06:08,780
and rap so you can put the date so just

00:06:05,450 --> 00:06:13,190
into a file and load it each time edit

00:06:08,780 --> 00:06:14,980
it load it again very useful - s I

00:06:13,190 --> 00:06:18,290
mentioned because I'm about to show you

00:06:14,980 --> 00:06:21,410
it's the silent switch so if you want to

00:06:18,290 --> 00:06:24,020
pet to pipe the output of curl to

00:06:21,410 --> 00:06:26,480
something else which isn't your terminal

00:06:24,020 --> 00:06:29,390
curl will detect this and try and

00:06:26,480 --> 00:06:30,890
hopefully give you a progress bar I'm

00:06:29,390 --> 00:06:32,750
not sure if I'm using it wrong but

00:06:30,890 --> 00:06:34,729
basically that's never what I want it to

00:06:32,750 --> 00:06:38,270
do so

00:06:34,729 --> 00:06:40,189
- s just suppress that output of a

00:06:38,270 --> 00:06:43,129
progress bar and just get the output of

00:06:40,189 --> 00:06:46,189
curl piped - whatever it was you want it

00:06:43,129 --> 00:06:51,110
I mean it might just be less because the

00:06:46,189 --> 00:06:56,089
outputs quite long you choose - see and

00:06:51,110 --> 00:06:58,309
- be used together give you cookies in

00:06:56,089 --> 00:07:01,189
the way that your browser would do it

00:06:58,309 --> 00:07:04,460
so the - C is for capturing the cookie

00:07:01,189 --> 00:07:06,949
to use - C and then a filename argument

00:07:04,460 --> 00:07:09,589
which is called the cookie jar

00:07:06,949 --> 00:07:13,610
in case anyone doubted that HTTP geeks

00:07:09,589 --> 00:07:15,229
have a sense of humor - B is for

00:07:13,610 --> 00:07:17,509
broadcasting the cookies so for all of

00:07:15,229 --> 00:07:20,599
your requests have - C and a cookie jar

00:07:17,509 --> 00:07:23,360
file name - B and another cookie jar

00:07:20,599 --> 00:07:25,669
file name you're doing the same thing as

00:07:23,360 --> 00:07:27,649
your browsers will do by convention in

00:07:25,669 --> 00:07:30,020
terms of accepting cookies and then

00:07:27,649 --> 00:07:31,879
resending them for subsequent requests

00:07:30,020 --> 00:07:34,129
so if you need to test with curl you

00:07:31,879 --> 00:07:38,330
need to log in or whatever it's all in

00:07:34,129 --> 00:07:40,039
there finally the - V switch is really

00:07:38,330 --> 00:07:42,169
useful because it shows you request and

00:07:40,039 --> 00:07:43,759
response headers so you can just have a

00:07:42,169 --> 00:07:45,949
look at what was sent and what was

00:07:43,759 --> 00:07:49,639
received which is great to talk about

00:07:45,949 --> 00:07:54,050
and now I'd like to show you so please

00:07:49,639 --> 00:07:59,899
come and meet my good friend curl like I

00:07:54,050 --> 00:08:03,620
say it's command line tool so I am gonna

00:07:59,899 --> 00:08:07,729
make a get request with curl from the

00:08:03,620 --> 00:08:09,770
command line this is a request to my

00:08:07,729 --> 00:08:13,430
local development copy of the API for

00:08:09,770 --> 00:08:15,050
the joined in open source project that's

00:08:13,430 --> 00:08:17,629
because I'm the project lead of the

00:08:15,050 --> 00:08:19,430
joined in open source project and met

00:08:17,629 --> 00:08:23,080
much of my spare time mostly looks like

00:08:19,430 --> 00:08:25,520
this as I work on developing the API

00:08:23,080 --> 00:08:28,009
pretty much all of the examples that

00:08:25,520 --> 00:08:32,800
you'll see today have the joined in

00:08:28,009 --> 00:08:35,180
project as it as its as its example

00:08:32,800 --> 00:08:37,130
partly because I'm the Project Lead so

00:08:35,180 --> 00:08:39,860
this is where I spend like a good chance

00:08:37,130 --> 00:08:41,930
a good chunk of my time but also because

00:08:39,860 --> 00:08:43,789
it's open source so if you want to jump

00:08:41,930 --> 00:08:47,089
in and look at this stuff be my guest

00:08:43,789 --> 00:08:48,529
it's out there for you to look at so

00:08:47,089 --> 00:08:52,370
making a curl request to

00:08:48,529 --> 00:08:56,149
you API joined in local which is my dev

00:08:52,370 --> 00:09:00,009
version of the API and to URL which is

00:08:56,149 --> 00:09:02,990
events a specific event identifier and

00:09:00,009 --> 00:09:05,689
comments so this is the collection of

00:09:02,990 --> 00:09:07,430
comments made on a specific event the

00:09:05,689 --> 00:09:09,379
conference here have asked you all to

00:09:07,430 --> 00:09:11,360
leave comments on talks and comments on

00:09:09,379 --> 00:09:13,100
events so this is the kind of thing we

00:09:11,360 --> 00:09:15,079
would be doing after this session you

00:09:13,100 --> 00:09:19,639
will be able to do that with curl should

00:09:15,079 --> 00:09:21,709
you so choose so I run that command and

00:09:19,639 --> 00:09:24,529
curl literally just spits back the

00:09:21,709 --> 00:09:26,360
response to me its JSON I have an empty

00:09:24,529 --> 00:09:28,129
comments array there's a meta block

00:09:26,360 --> 00:09:31,480
telling me telling me there is a count

00:09:28,129 --> 00:09:34,730
of zero records in my response and

00:09:31,480 --> 00:09:39,230
there's some links to pagination going

00:09:34,730 --> 00:09:43,309
on there cool so far so good let's take

00:09:39,230 --> 00:09:47,949
that a step further and instead of JSON

00:09:43,309 --> 00:09:52,009
let's send an accept header of text HTML

00:09:47,949 --> 00:09:54,829
if you hit API join dot in in your

00:09:52,009 --> 00:09:57,490
browser right now you will get an HTML

00:09:54,829 --> 00:09:59,750
rendered output of the data in the API

00:09:57,490 --> 00:10:03,709
there's no access control for read-only

00:09:59,750 --> 00:10:05,720
so absolutely be my guest if that's done

00:10:03,709 --> 00:10:08,779
on your accept header so your browser

00:10:05,720 --> 00:10:10,189
will say I understand HTML and joined in

00:10:08,779 --> 00:10:15,189
server will be like alright here it is

00:10:10,189 --> 00:10:15,189
so I can send that header with curl a

00:10:15,970 --> 00:10:22,339
few other things then that we can also

00:10:18,559 --> 00:10:26,269
do with curl from the command line again

00:10:22,339 --> 00:10:29,120
making that basic request if I add the

00:10:26,269 --> 00:10:32,000
dash V switch we get extra information

00:10:29,120 --> 00:10:33,350
about the headers that were sent and the

00:10:32,000 --> 00:10:35,839
headers that came back in the response

00:10:33,350 --> 00:10:36,920
so if you have a look at this the arrows

00:10:35,839 --> 00:10:38,779
come in from the left

00:10:36,920 --> 00:10:42,620
into the screen those are the request

00:10:38,779 --> 00:10:44,990
headers I made a get request curl sends

00:10:42,620 --> 00:10:46,629
a user agent you can override that if

00:10:44,990 --> 00:10:49,490
you want to pretend to be something else

00:10:46,629 --> 00:10:51,679
or there's a host header curl very

00:10:49,490 --> 00:10:55,519
optimistically claims to accept star

00:10:51,679 --> 00:10:57,139
slash star the response headers coming

00:10:55,519 --> 00:10:58,699
from the middle of the screen back out

00:10:57,139 --> 00:11:00,829
to the side that's what's coming back

00:10:58,699 --> 00:11:02,110
from the server the response headers

00:11:00,829 --> 00:11:04,029
tellers

00:11:02,110 --> 00:11:06,550
we've got a response it's 200 okay

00:11:04,029 --> 00:11:09,070
there's some date information some

00:11:06,550 --> 00:11:12,399
Apache PHP information content length

00:11:09,070 --> 00:11:14,800
and content type so that tells us how to

00:11:12,399 --> 00:11:17,380
understand the body if something has

00:11:14,800 --> 00:11:19,720
gone wrong the dash B allows you to

00:11:17,380 --> 00:11:23,640
inspect the status code the response

00:11:19,720 --> 00:11:28,570
types a lot of PHP frameworks and tools

00:11:23,640 --> 00:11:30,490
will usually return you JSON except if

00:11:28,570 --> 00:11:32,470
you fire their exception handlers they

00:11:30,490 --> 00:11:35,170
get like a default web thing so you can

00:11:32,470 --> 00:11:37,959
get a 200 okay and when you look closely

00:11:35,170 --> 00:11:41,170
the content type is HTML and the

00:11:37,959 --> 00:11:43,000
contents are a big error message so and

00:11:41,170 --> 00:11:47,170
that can sometimes be something that you

00:11:43,000 --> 00:11:50,500
would use curl for one more thing before

00:11:47,170 --> 00:11:52,690
we go on and start actually posting data

00:11:50,500 --> 00:11:55,630
with curl and that is to show you a

00:11:52,690 --> 00:12:00,190
nicer format of this JSON output that we

00:11:55,630 --> 00:12:02,709
do I need the - s switch because I'm

00:12:00,190 --> 00:12:06,579
going to pipe this JSON output to

00:12:02,709 --> 00:12:08,970
something else and what I'm going to do

00:12:06,579 --> 00:12:14,019
here is pipe it to a Python extension

00:12:08,970 --> 00:12:15,750
called JSON tool I'm rubbish at pausing

00:12:14,019 --> 00:12:19,630
before I press return

00:12:15,750 --> 00:12:22,240
- M JSON tool and all that does is give

00:12:19,630 --> 00:12:25,120
you a nice pretty print output of your

00:12:22,240 --> 00:12:26,800
JSON makes it a bit more humane to read

00:12:25,120 --> 00:12:29,649
there are a few other ways you might do

00:12:26,800 --> 00:12:33,370
this a nice tool called HTTP ie gives

00:12:29,649 --> 00:12:35,110
you much much prettier output for JSON

00:12:33,370 --> 00:12:37,449
but has less logical command-line

00:12:35,110 --> 00:12:39,550
arguments in my opinion so I just I just

00:12:37,449 --> 00:12:45,100
I understand curl so I'm always back

00:12:39,550 --> 00:12:47,079
there using curl so that's lovely and I

00:12:45,100 --> 00:12:51,430
think we should move on now and start to

00:12:47,079 --> 00:12:54,399
create data using curl we don't just

00:12:51,430 --> 00:12:56,320
consume things often we need to interact

00:12:54,399 --> 00:12:57,899
in more assertive ways with the tools

00:12:56,320 --> 00:13:01,630
that we use

00:12:57,899 --> 00:13:03,130
it's a restful ish don't call it restful

00:13:01,630 --> 00:13:06,040
people will hunt you down set by to you

00:13:03,130 --> 00:13:09,579
it's an HTTP web service that we have on

00:13:06,040 --> 00:13:13,449
the joined in API so in order to create

00:13:09,579 --> 00:13:14,870
a new record you post to the collection

00:13:13,449 --> 00:13:18,140
that it will be

00:13:14,870 --> 00:13:19,220
it will be added to join insane API

00:13:18,140 --> 00:13:21,170
actually does have some quite good

00:13:19,220 --> 00:13:22,700
documentation but often you will be

00:13:21,170 --> 00:13:25,820
fighting in the dark with somebody

00:13:22,700 --> 00:13:29,330
else's API and curl is my pointy stick

00:13:25,820 --> 00:13:31,460
for this for this purpose I know I need

00:13:29,330 --> 00:13:33,860
to post but I'm not really sure what

00:13:31,460 --> 00:13:36,710
else I need to do so let's just post and

00:13:33,860 --> 00:13:39,770
it comes straight back you must be

00:13:36,710 --> 00:13:40,850
logged in to create data I just told you

00:13:39,770 --> 00:13:42,920
you could click around on your browser

00:13:40,850 --> 00:13:46,430
you can but you can't write without

00:13:42,920 --> 00:13:48,680
being logged in joined in uses a wolf so

00:13:46,430 --> 00:13:51,110
you can see I'm changing focus here just

00:13:48,680 --> 00:13:54,140
to copy and paste the access token that

00:13:51,110 --> 00:13:55,310
I made earlier so I will send an

00:13:54,140 --> 00:13:59,450
authorization header

00:13:55,310 --> 00:14:01,940
ooofff access token there it is let's

00:13:59,450 --> 00:14:05,750
see what happens okay

00:14:01,940 --> 00:14:08,450
I tried to post an empty request you

00:14:05,750 --> 00:14:12,020
must be logged in I try logging in and

00:14:08,450 --> 00:14:12,980
the next error message is different this

00:14:12,020 --> 00:14:15,740
is an important thing to know about

00:14:12,980 --> 00:14:19,040
debugging if you get an error message

00:14:15,740 --> 00:14:21,140
and you do something and then you get a

00:14:19,040 --> 00:14:21,790
different error message you'll make in

00:14:21,140 --> 00:14:23,779
progress

00:14:21,790 --> 00:14:26,060
you're probably heading in the right

00:14:23,779 --> 00:14:27,500
direction you get the same error message

00:14:26,060 --> 00:14:30,350
over and over and over again you're

00:14:27,500 --> 00:14:32,180
probably not making progress if you a

00:14:30,350 --> 00:14:36,050
new error message that qualifies as

00:14:32,180 --> 00:14:38,690
progress keep trying okay right so we

00:14:36,050 --> 00:14:41,990
need to post a field called comment

00:14:38,690 --> 00:14:43,940
alright now obviously I have some inside

00:14:41,990 --> 00:14:46,670
information I already know that I need

00:14:43,940 --> 00:14:51,140
to send JSON so we'll send the

00:14:46,670 --> 00:14:53,870
content-type header content type is an

00:14:51,140 --> 00:14:57,290
entity header so usually we see it in

00:14:53,870 --> 00:14:59,390
the response of an HTTP request/response

00:14:57,290 --> 00:15:02,510
pair and that's usually because

00:14:59,390 --> 00:15:04,279
responses have bodies if you need to

00:15:02,510 --> 00:15:05,540
send a body with your request you're

00:15:04,279 --> 00:15:07,970
still going to send the content-type

00:15:05,540 --> 00:15:10,760
header so content type is an entity

00:15:07,970 --> 00:15:13,940
header you send it when you have a body

00:15:10,760 --> 00:15:15,980
to send so there's the content type and

00:15:13,940 --> 00:15:17,420
we'll send the actual data I'm just

00:15:15,980 --> 00:15:19,690
going to put the JSON on a command line

00:15:17,420 --> 00:15:22,430
here because there's one field

00:15:19,690 --> 00:15:24,980
I'll even realize that I need quotes in

00:15:22,430 --> 00:15:26,010
this screencast and when I get to the

00:15:24,980 --> 00:15:35,180
end and

00:15:26,010 --> 00:15:35,180
that boom it looks like nothing happened

00:15:36,740 --> 00:15:43,170
restful api is can be a little bit UNIX

00:15:39,660 --> 00:15:48,540
command-line okay sometimes they can be

00:15:43,170 --> 00:15:51,510
a little bit terse so mmm what did

00:15:48,540 --> 00:15:53,610
happen there well we've already seen the

00:15:51,510 --> 00:15:56,040
- V switch so let's just run that again

00:15:53,610 --> 00:15:58,440
and have a look here it comes

00:15:56,040 --> 00:16:00,690
put the - V switch in run it again and

00:15:58,440 --> 00:16:03,630
look at the headers of the requests a

00:16:00,690 --> 00:16:05,310
response that came back handily

00:16:03,630 --> 00:16:07,260
I hope this font sizes begin a few to

00:16:05,310 --> 00:16:09,300
see because it was the perfect size to

00:16:07,260 --> 00:16:12,480
get everything on the screen more by

00:16:09,300 --> 00:16:14,700
luck than judgment so again the request

00:16:12,480 --> 00:16:17,280
headers are those that are coming into

00:16:14,700 --> 00:16:20,130
the screen from the left and we sent a

00:16:17,280 --> 00:16:22,890
post request user agent host accept some

00:16:20,130 --> 00:16:25,110
content type the off header that you saw

00:16:22,890 --> 00:16:27,300
that I needed some content length to go

00:16:25,110 --> 00:16:30,200
with that JSON that we sent coming back

00:16:27,300 --> 00:16:33,960
so going back out the screen that way

00:16:30,200 --> 00:16:37,590
201 created and read down a few more

00:16:33,960 --> 00:16:40,170
lines a location header that's very

00:16:37,590 --> 00:16:43,110
normal for a restful service you've

00:16:40,170 --> 00:16:44,970
created something and your status code

00:16:43,110 --> 00:16:47,910
instead of being two hundred will be 201

00:16:44,970 --> 00:16:49,620
created and then you get the redirect to

00:16:47,910 --> 00:16:51,510
the thing that you just made and you can

00:16:49,620 --> 00:16:55,380
see it's a specific event comment URL

00:16:51,510 --> 00:16:59,100
that we get in the location header so

00:16:55,380 --> 00:17:02,400
actually when I did that I created a

00:16:59,100 --> 00:17:04,020
record on my remote server well on my

00:17:02,400 --> 00:17:07,079
laptop because this is my local death

00:17:04,020 --> 00:17:08,760
copy and we can verify that we could go

00:17:07,079 --> 00:17:10,199
back and use the same request that we

00:17:08,760 --> 00:17:12,120
use earlier you can watch me key up

00:17:10,199 --> 00:17:15,440
through my history pipe it through the

00:17:12,120 --> 00:17:17,940
pretty print and here we go

00:17:15,440 --> 00:17:20,670
my meta block is showing me a count of

00:17:17,940 --> 00:17:23,570
two and if I scroll up now then I can

00:17:20,670 --> 00:17:28,560
see there's not one but two fab event

00:17:23,570 --> 00:17:32,160
comments been added there so using curl

00:17:28,560 --> 00:17:33,840
I have kind of come to a new API made

00:17:32,160 --> 00:17:35,910
some requests tried making a post

00:17:33,840 --> 00:17:37,919
request then kind of iterative defined

00:17:35,910 --> 00:17:41,309
what the curve

00:17:37,919 --> 00:17:42,960
HTTP request would be I don't need to do

00:17:41,309 --> 00:17:44,880
that like fighting with my application

00:17:42,960 --> 00:17:47,070
and working out how to use the

00:17:44,880 --> 00:17:49,409
intermediate libraries I just poke at it

00:17:47,070 --> 00:17:51,720
on the command line until it does what I

00:17:49,409 --> 00:17:54,480
want it's a bit like developing the

00:17:51,720 --> 00:17:56,190
correct SQL statement from the card line

00:17:54,480 --> 00:17:57,780
or in your in your workbench tools and

00:17:56,190 --> 00:18:00,690
then dropping it into your application

00:17:57,780 --> 00:18:06,590
it's kind of a parallel to how I use

00:18:00,690 --> 00:18:10,169
curl in that kind of setting so slides

00:18:06,590 --> 00:18:12,690
yes there's the link to the python json

00:18:10,169 --> 00:18:15,690
library that i just used in case you're

00:18:12,690 --> 00:18:18,780
interested any Python you like just pipe

00:18:15,690 --> 00:18:21,330
it through to Python - MJ's on tool and

00:18:18,780 --> 00:18:23,130
it'll give you that pretty print makes

00:18:21,330 --> 00:18:28,440
it a bit easier if you are working with

00:18:23,130 --> 00:18:32,250
JSON often my next tool to show you

00:18:28,440 --> 00:18:34,500
today is Wireshark why sharks amazing

00:18:32,250 --> 00:18:38,150
just like curl and they should have said

00:18:34,500 --> 00:18:40,620
this already just like curl it is

00:18:38,150 --> 00:18:42,900
available cross-platform and it's free

00:18:40,620 --> 00:18:46,830
to use so just download it and try it

00:18:42,900 --> 00:18:48,840
Wireshark inspects the traffic that's

00:18:46,830 --> 00:18:50,309
going through your network card you'll

00:18:48,840 --> 00:18:52,289
see when I start it I get to choose

00:18:50,309 --> 00:18:55,860
between the network cards in the machine

00:18:52,289 --> 00:18:58,559
and I love it because I don't need to

00:18:55,860 --> 00:19:00,330
edit the applications sometimes I may

00:18:58,559 --> 00:19:02,820
not have any control over one or the

00:19:00,330 --> 00:19:06,539
other of them sometimes I might just not

00:19:02,820 --> 00:19:08,340
care enough to get in and start finding

00:19:06,539 --> 00:19:10,200
where the requests are made from where I

00:19:08,340 --> 00:19:13,620
should put some var dump or some error

00:19:10,200 --> 00:19:15,570
log commands in just you have a problem

00:19:13,620 --> 00:19:17,760
you can reproduce the problem start

00:19:15,570 --> 00:19:20,070
Wireshark get the problem have a look at

00:19:17,760 --> 00:19:23,520
Wireshark what happened you're able to

00:19:20,070 --> 00:19:25,559
observe the traffic if you need to

00:19:23,520 --> 00:19:27,510
capture traffic which is not on the same

00:19:25,559 --> 00:19:29,220
machine as you're gonna run Wireshark on

00:19:27,510 --> 00:19:30,780
so let's say that you need to grab this

00:19:29,220 --> 00:19:33,539
office server which you don't want to

00:19:30,780 --> 00:19:35,820
put the GUI tool on you can capture

00:19:33,539 --> 00:19:38,190
traffic with a tool called TCP dump

00:19:35,820 --> 00:19:40,400
which does the same thing and you can

00:19:38,190 --> 00:19:43,409
examine it later with Wireshark

00:19:40,400 --> 00:19:46,470
so I'm going to show you Wireshark in a

00:19:43,409 --> 00:19:49,590
kind of live capture scenario but you

00:19:46,470 --> 00:19:51,840
can download capture data honest honest

00:19:49,590 --> 00:19:54,419
and download it equally you can capture

00:19:51,840 --> 00:19:57,360
it locally save it later show it to

00:19:54,419 --> 00:19:59,700
somebody else look at it again it

00:19:57,360 --> 00:20:01,500
doesn't have to be the live capture it's

00:19:59,700 --> 00:20:04,529
also very useful if you have what I call

00:20:01,500 --> 00:20:06,330
a Heisenberg something which is broken

00:20:04,529 --> 00:20:07,919
until we put the debug in and then it's

00:20:06,330 --> 00:20:11,340
fixed and then you take the debug out

00:20:07,919 --> 00:20:13,200
and then it's broken and then right this

00:20:11,340 --> 00:20:17,159
is a few people nodding at me from the

00:20:13,200 --> 00:20:19,080
audience yeah why shot doesn't interfere

00:20:17,159 --> 00:20:23,039
with your application so it's just a

00:20:19,080 --> 00:20:26,130
separate thing I find it most useful

00:20:23,039 --> 00:20:27,779
when I'm debugging between layers the

00:20:26,130 --> 00:20:31,409
example that I'm going to show you is

00:20:27,779 --> 00:20:33,120
the new joined insight the web 2 site

00:20:31,409 --> 00:20:35,669
that we're working on talks to an API

00:20:33,120 --> 00:20:38,480
back-end so now I'm in a situation where

00:20:35,669 --> 00:20:40,049
it's not me like browser web server

00:20:38,480 --> 00:20:42,659
something's gone wrong

00:20:40,049 --> 00:20:46,309
var don't see it in the browser because

00:20:42,659 --> 00:20:49,559
it's browser web server web server API

00:20:46,309 --> 00:20:52,500
API other API API database you tell me

00:20:49,559 --> 00:20:54,570
so you can have connections between lots

00:20:52,500 --> 00:20:57,210
of different elements of quite a

00:20:54,570 --> 00:21:00,330
service-oriented architecture things get

00:20:57,210 --> 00:21:02,909
further and further away that's becoming

00:21:00,330 --> 00:21:05,370
much more normal for PHP developers I'm

00:21:02,909 --> 00:21:07,890
building a lot of api's some of them are

00:21:05,370 --> 00:21:10,890
mobile backends some of them are part of

00:21:07,890 --> 00:21:14,520
web sites so these are skills that are

00:21:10,890 --> 00:21:16,110
handy and indispensable when you need to

00:21:14,520 --> 00:21:18,659
work in a setup that looks like this

00:21:16,110 --> 00:21:22,980
this is the joined in setup so the API

00:21:18,659 --> 00:21:24,720
you've just seen web 2 is the site I'm

00:21:22,980 --> 00:21:27,000
about to show you we've got an Android

00:21:24,720 --> 00:21:28,799
app who knows what else is consuming

00:21:27,000 --> 00:21:30,510
that API is publicly available right I

00:21:28,799 --> 00:21:34,919
don't know and I don't need to know you

00:21:30,510 --> 00:21:39,330
build what you will so my second demo is

00:21:34,919 --> 00:21:42,770
called why doesn't this work oh the

00:21:39,330 --> 00:21:42,770
noise I make when I use white shark

00:21:44,980 --> 00:21:51,580
okay this is the new joined in sight if

00:21:49,370 --> 00:21:54,800
you're interested in the project hit M

00:21:51,580 --> 00:21:59,120
joined dot in to see the real one of

00:21:54,800 --> 00:22:00,530
these not the test data version I've

00:21:59,120 --> 00:22:02,780
lorem ipsum it in here

00:22:00,530 --> 00:22:05,180
because once upon a time many years ago

00:22:02,780 --> 00:22:07,580
Josh built the project a really nice

00:22:05,180 --> 00:22:09,170
sample data generator so you can install

00:22:07,580 --> 00:22:10,910
joined in and instantly get a set of

00:22:09,170 --> 00:22:13,970
data to work with but it's all a bit

00:22:10,910 --> 00:22:17,120
nonsense and Latin this is my def system

00:22:13,970 --> 00:22:18,680
so that's what you're seeing so this is

00:22:17,120 --> 00:22:22,460
the web to project and I'm just going to

00:22:18,680 --> 00:22:24,380
click into a random event and have a go

00:22:22,460 --> 00:22:28,550
at creating a comment because I've had a

00:22:24,380 --> 00:22:30,110
bug reported with this functionality so

00:22:28,550 --> 00:22:32,960
I make a very plausible comment and I

00:22:30,110 --> 00:22:36,560
submit it and sure enough there's an

00:22:32,960 --> 00:22:37,490
error so I'd like to meet my good friend

00:22:36,560 --> 00:22:41,150
Wireshark

00:22:37,490 --> 00:22:44,090
all I need to do is start Wireshark here

00:22:41,150 --> 00:22:48,380
I'm choosing my local network card

00:22:44,090 --> 00:22:50,900
because my dev copies have joined in are

00:22:48,380 --> 00:22:53,960
on the same laptop so my machine will

00:22:50,900 --> 00:22:55,580
route all the network for that to

00:22:53,960 --> 00:22:59,480
through that network card rather than

00:22:55,580 --> 00:23:02,210
out through my WLAN card this is useful

00:22:59,480 --> 00:23:03,440
because I also means I don't capture all

00:23:02,210 --> 00:23:04,790
the googling for Stack Overflow

00:23:03,440 --> 00:23:06,530
that goes on while I'm debugging a

00:23:04,790 --> 00:23:09,560
problem you just get the traffic that

00:23:06,530 --> 00:23:11,900
goes through your local card so I start

00:23:09,560 --> 00:23:16,100
the capture and one thing I always do

00:23:11,900 --> 00:23:19,040
here is I add an HTTP filter that's

00:23:16,100 --> 00:23:21,560
because why sharks a networked level

00:23:19,040 --> 00:23:23,360
tool it's it doesn't understand HTTP

00:23:21,560 --> 00:23:26,990
it's not really about the web it's about

00:23:23,360 --> 00:23:28,940
network traffic and so it's very low

00:23:26,990 --> 00:23:32,000
level and network II and it shows me

00:23:28,940 --> 00:23:34,550
things I don't understand like DNS and

00:23:32,000 --> 00:23:36,860
UDP and TCP and I'm making a web request

00:23:34,550 --> 00:23:38,870
for a web browser and that's what I want

00:23:36,860 --> 00:23:41,540
to see so I always add this little

00:23:38,870 --> 00:23:44,450
filter to kind of just show me things

00:23:41,540 --> 00:23:47,060
that I really want to see start

00:23:44,450 --> 00:23:48,740
Wireshark reproduce the problem get back

00:23:47,060 --> 00:23:52,160
over to the browser submit that thing

00:23:48,740 --> 00:23:55,250
again see the error again awesome come

00:23:52,160 --> 00:23:57,910
back then to Wireshark

00:23:55,250 --> 00:24:03,470
let's have a look at what happened well

00:23:57,910 --> 00:24:06,560
the top pane is a list of requests and

00:24:03,470 --> 00:24:12,050
responses separately so this is like a

00:24:06,560 --> 00:24:15,890
story of what has happened the lower

00:24:12,050 --> 00:24:18,560
pane is drill down detail detail on a

00:24:15,890 --> 00:24:20,350
single response so you can see that I

00:24:18,560 --> 00:24:23,930
did get a 500 internal server error

00:24:20,350 --> 00:24:27,650
before that I got a 400 bad request so

00:24:23,930 --> 00:24:30,110
website requests browser requests

00:24:27,650 --> 00:24:32,180
website website requests API API

00:24:30,110 --> 00:24:35,750
responds website web server responds

00:24:32,180 --> 00:24:39,290
this is the 500 leg but a 400 actually

00:24:35,750 --> 00:24:41,660
came back from the API if I drill into

00:24:39,290 --> 00:24:43,850
what request was sent who could see the

00:24:41,660 --> 00:24:47,150
problem with this you probably can't on

00:24:43,850 --> 00:24:50,240
the projector my access token seems to

00:24:47,150 --> 00:24:51,890
have a PHP variable name in it instead

00:24:50,240 --> 00:24:53,870
of sending however many characters of

00:24:51,890 --> 00:24:57,830
hex I would appear to be sending dollar

00:24:53,870 --> 00:25:00,170
this arrow access token hmm I think I

00:24:57,830 --> 00:25:02,300
can see the problem that's the problem

00:25:00,170 --> 00:25:04,790
that would be quite difficult to see

00:25:02,300 --> 00:25:07,460
without a tool like this that lets you

00:25:04,790 --> 00:25:09,910
drill in to the request that the web

00:25:07,460 --> 00:25:13,160
server made to another external service

00:25:09,910 --> 00:25:14,630
so okay let's have a go at fixing that

00:25:13,160 --> 00:25:17,680
we're going to go into the application

00:25:14,630 --> 00:25:20,450
and instead of you watching me type PHP

00:25:17,680 --> 00:25:23,030
instead we'll just go to the branch I

00:25:20,450 --> 00:25:26,120
made earlier and check out the one that

00:25:23,030 --> 00:25:27,770
doesn't have this bug this is open

00:25:26,120 --> 00:25:29,210
source right so I also had to then I

00:25:27,770 --> 00:25:30,620
can't check out master because I had to

00:25:29,210 --> 00:25:31,660
patch a different bug that I found while

00:25:30,620 --> 00:25:35,690
I was trying to take this screencast

00:25:31,660 --> 00:25:38,920
awesome good so let's just give that

00:25:35,690 --> 00:25:42,260
another go submit the comment again and

00:25:38,920 --> 00:25:44,330
there we go this time it's worse because

00:25:42,260 --> 00:25:45,980
I've been able to inspect the problem go

00:25:44,330 --> 00:25:48,800
in and fix where I was sending the

00:25:45,980 --> 00:25:50,510
access token header so having Wireshark

00:25:48,800 --> 00:25:54,710
running allows you to look at a problem

00:25:50,510 --> 00:25:56,780
that's happening and inspect what's

00:25:54,710 --> 00:26:01,070
going on even a few layers down the

00:25:56,780 --> 00:26:02,870
stack for straight PHP back-end kind of

00:26:01,070 --> 00:26:03,740
web front-end development it's still

00:26:02,870 --> 00:26:05,420
really handy

00:26:03,740 --> 00:26:07,970
you don't need multi tiers to make use

00:26:05,420 --> 00:26:08,750
of Wireshark if you're doing Ajax see

00:26:07,970 --> 00:26:10,010
requests

00:26:08,750 --> 00:26:12,880
we just want to have a look at the

00:26:10,010 --> 00:26:15,740
traffic without editing your application

00:26:12,880 --> 00:26:23,030
fabulous tool and I used just Wireshark

00:26:15,740 --> 00:26:25,370
for years and years right good we're

00:26:23,030 --> 00:26:27,680
doing okay for time this is good

00:26:25,370 --> 00:26:29,090
I worried I brought too much stuff but

00:26:27,680 --> 00:26:31,850
there was nothing I wanted to not tell

00:26:29,090 --> 00:26:33,290
you so all of the content is still in

00:26:31,850 --> 00:26:36,800
the talk we just have to get through it

00:26:33,290 --> 00:26:42,320
all somehow my next tool is a tool

00:26:36,800 --> 00:26:46,450
called Charles proxy and in contrast to

00:26:42,320 --> 00:26:51,530
both curl and Wireshark Charles proxy is

00:26:46,450 --> 00:26:53,810
not free it's cross platform it's not

00:26:51,530 --> 00:26:56,780
free it might be the only software I

00:26:53,810 --> 00:27:00,650
have paid for in about eight years

00:26:56,780 --> 00:27:06,560
something like that Charles proxy costs

00:27:00,650 --> 00:27:09,380
$50 that was 29 pounds in 98 pence

00:27:06,560 --> 00:27:11,690
earlier in the week it makes its money

00:27:09,380 --> 00:27:14,360
back pretty quickly so don't take the

00:27:11,690 --> 00:27:15,730
paid for license and hold it against it

00:27:14,360 --> 00:27:17,720
it's fabulous tool

00:27:15,730 --> 00:27:20,030
Charles allows you to do a bunch of

00:27:17,720 --> 00:27:22,070
things a lot of what you can do with

00:27:20,030 --> 00:27:24,980
Charles you can do is Wireshark it

00:27:22,070 --> 00:27:28,280
allows you to observe requests Charles

00:27:24,980 --> 00:27:31,310
is specifically a web debugging proxy so

00:27:28,280 --> 00:27:34,400
it has a better understanding of web

00:27:31,310 --> 00:27:36,170
requests and responses it joins them up

00:27:34,400 --> 00:27:39,230
in pairs so you can see the request

00:27:36,170 --> 00:27:42,740
response together there is a Firefox

00:27:39,230 --> 00:27:46,400
plugin Charles proxy is a true proxy

00:27:42,740 --> 00:27:47,960
your traffic goes from your browser or

00:27:46,400 --> 00:27:52,220
whatever you're about to see an example

00:27:47,960 --> 00:27:53,960
with a phone into Charles out the other

00:27:52,220 --> 00:27:56,690
side of Charles and then off wherever it

00:27:53,960 --> 00:27:58,190
was going it's a true proxy Wireshark

00:27:56,690 --> 00:28:01,820
just sort of observes the traffic

00:27:58,190 --> 00:28:04,400
Charles is a proxy there's a Firefox

00:28:01,820 --> 00:28:06,500
plugin that you just plug in enable it

00:28:04,400 --> 00:28:09,530
in Firefox so you go to Firefox and be

00:28:06,500 --> 00:28:12,410
like turn on Charles run Charles do

00:28:09,530 --> 00:28:13,820
whatever you were doing in Firefox the

00:28:12,410 --> 00:28:17,330
traffic goes through Charles

00:28:13,820 --> 00:28:19,880
very very easy to set up really easy to

00:28:17,330 --> 00:28:21,410
set up on a Bunter with the permissions

00:28:19,880 --> 00:28:25,520
for Wireshark is probably

00:28:21,410 --> 00:28:28,730
easier to set up Charles as well as

00:28:25,520 --> 00:28:32,870
observing requests Charles proxy allows

00:28:28,730 --> 00:28:35,660
you to change requests you can rewrite

00:28:32,870 --> 00:28:36,290
any requests you like in any way you

00:28:35,660 --> 00:28:38,060
like

00:28:36,290 --> 00:28:40,730
so you can make the host names different

00:28:38,060 --> 00:28:42,290
send some extra headers had one recently

00:28:40,730 --> 00:28:43,760
where someone tried to tell me that I

00:28:42,290 --> 00:28:46,520
couldn't talk to his soap service

00:28:43,760 --> 00:28:50,930
because I was sending the wrong except

00:28:46,520 --> 00:28:51,830
headers it couldn't all be soaked

00:28:50,930 --> 00:28:53,990
service because he hadn't actually

00:28:51,830 --> 00:28:56,270
published his sub service anyway I

00:28:53,990 --> 00:28:58,310
proved this by rooting through Charles

00:28:56,270 --> 00:29:02,600
setting the head as he said I needed and

00:28:58,310 --> 00:29:05,300
sure enough it didn't help you can also

00:29:02,600 --> 00:29:06,860
use Charles as a network proxy Charles

00:29:05,300 --> 00:29:10,550
is not just about what's running on this

00:29:06,860 --> 00:29:12,980
machine I'm gonna show you a demo where

00:29:10,550 --> 00:29:14,270
I am running on this machine and then

00:29:12,980 --> 00:29:16,130
I'm going to show you a demo where

00:29:14,270 --> 00:29:19,240
Charles is going to interfere with my

00:29:16,130 --> 00:29:21,770
mobile phone requests so if you need to

00:29:19,240 --> 00:29:23,780
network something else on the same

00:29:21,770 --> 00:29:27,110
wireless network as you through your

00:29:23,780 --> 00:29:32,450
laptop to use Charles as a proxy go for

00:29:27,110 --> 00:29:34,970
it Charles also has very nice ability to

00:29:32,450 --> 00:29:36,980
repeat requests change requests and you

00:29:34,970 --> 00:29:41,720
can save and load different requests or

00:29:36,980 --> 00:29:44,230
sessions so in terms of using it within

00:29:41,720 --> 00:29:46,880
a team if you're all using Charles

00:29:44,230 --> 00:29:48,470
understand that quite a few

00:29:46,880 --> 00:29:50,330
organizations now are starting to have

00:29:48,470 --> 00:29:53,720
the corporate license you've got a bunch

00:29:50,330 --> 00:29:57,380
of developers it's really worth it you

00:29:53,720 --> 00:30:00,110
can see something save that request

00:29:57,380 --> 00:30:01,970
attach it to the to the bug tracker just

00:30:00,110 --> 00:30:03,710
drop it into the ticket somebody else

00:30:01,970 --> 00:30:06,170
can load it and replicate that problem

00:30:03,710 --> 00:30:08,210
immediately so it's none of this login

00:30:06,170 --> 00:30:09,950
its own so slogging is somebody who's

00:30:08,210 --> 00:30:12,500
got admin privileges and such and such a

00:30:09,950 --> 00:30:16,430
role then if you change your profile and

00:30:12,500 --> 00:30:19,100
go to save it in Charles run it in

00:30:16,430 --> 00:30:20,870
Charles just cuts out all the messing

00:30:19,100 --> 00:30:24,530
about and very very easy to replicate

00:30:20,870 --> 00:30:28,160
problems I could talk about Charles all

00:30:24,530 --> 00:30:29,540
day you might hate me although feel free

00:30:28,160 --> 00:30:32,450
to just find me later and I'll keep

00:30:29,540 --> 00:30:33,789
going I wrote quite a long article and

00:30:32,450 --> 00:30:36,460
it's

00:30:33,789 --> 00:30:39,129
written tutorial styles so if you want

00:30:36,460 --> 00:30:40,539
to sort of look again at some of the

00:30:39,129 --> 00:30:44,499
things I've shown you with Charles today

00:30:40,539 --> 00:30:45,820
go there it's an article for tech portal

00:30:44,499 --> 00:30:48,249
hopefully you've seen in beaker

00:30:45,820 --> 00:30:49,690
downstairs of their tech portal really

00:30:48,249 --> 00:30:50,979
nice outlet to write for so if you're

00:30:49,690 --> 00:30:54,249
thinking of writing going right for that

00:30:50,979 --> 00:30:55,960
I wrote about Charles proxy so go and

00:30:54,249 --> 00:31:00,309
read that for the things I didn't have

00:30:55,960 --> 00:31:04,479
time to tell you okay first one of the

00:31:00,309 --> 00:31:08,259
Charles demos is called a few Charles

00:31:04,479 --> 00:31:09,729
proxy tricks so the only thing you need

00:31:08,259 --> 00:31:12,099
to notice here is that I'm using

00:31:09,729 --> 00:31:16,200
wireshark normally I use Chrome at

00:31:12,099 --> 00:31:16,200
Wireshark come on Firefox

00:31:16,229 --> 00:31:24,639
this isn't gin but should be and that's

00:31:20,739 --> 00:31:26,559
the live joined in em join in as the

00:31:24,639 --> 00:31:28,899
live web 2 project took this about a

00:31:26,559 --> 00:31:32,609
week ago so PHP UK hasn't floated up

00:31:28,899 --> 00:31:32,609
sunshine PHP was still on

00:31:32,919 --> 00:31:37,720
great cool lovely with click around to

00:31:35,200 --> 00:31:41,320
see some requests coming in this is

00:31:37,720 --> 00:31:44,889
Charles same kind of idea too Wireshark

00:31:41,320 --> 00:31:47,470
in that the top half is the story there

00:31:44,889 --> 00:31:49,210
are two tabs there so you can see it in

00:31:47,470 --> 00:31:52,029
a sequence or see the structure the

00:31:49,210 --> 00:31:53,769
structure kind of shows you URL stems so

00:31:52,029 --> 00:31:56,799
you can look at sort of classifications

00:31:53,769 --> 00:31:59,979
of requests I always use it in sequence

00:31:56,799 --> 00:32:02,979
it's just the way my brain works the

00:31:59,979 --> 00:32:05,139
lower pane on this screen is detail of

00:32:02,979 --> 00:32:07,599
the specific request response pair that

00:32:05,139 --> 00:32:10,450
you are looking at so I'm clicking

00:32:07,599 --> 00:32:12,639
around on the site I'm in Firefox

00:32:10,450 --> 00:32:14,919
Firefox is proxy and through Charles

00:32:12,639 --> 00:32:19,029
Charles is showing me all of the traffic

00:32:14,919 --> 00:32:22,090
this is lovely we can scroll up and have

00:32:19,029 --> 00:32:24,999
a look by clicking - Sunshine PHP so

00:32:22,090 --> 00:32:27,159
focus on shine PHP in the top half of

00:32:24,999 --> 00:32:29,649
the screen and down here I'm getting the

00:32:27,159 --> 00:32:30,970
detail on Sunshine PHP the overview

00:32:29,649 --> 00:32:34,779
gives you a bunch of requests and

00:32:30,970 --> 00:32:37,720
responses here you get lots of

00:32:34,779 --> 00:32:40,059
information about the transaction if

00:32:37,720 --> 00:32:42,190
charles has applied some rewrite rules

00:32:40,059 --> 00:32:44,259
or something you'll also see them here

00:32:42,190 --> 00:32:45,389
cunning Mia didn't manage to get that in

00:32:44,259 --> 00:32:46,950
the screencast where I

00:32:45,389 --> 00:32:51,089
actually done that so you would see them

00:32:46,950 --> 00:32:53,789
here you can get detailed information

00:32:51,089 --> 00:32:56,249
about the request so here we're seeing

00:32:53,789 --> 00:32:58,829
the headers you can check which cookies

00:32:56,249 --> 00:33:01,559
were sent the response comes back

00:32:58,829 --> 00:33:04,109
because this is a web response its HTML

00:33:01,559 --> 00:33:05,789
then Charles knows that it reads the

00:33:04,109 --> 00:33:08,729
content type header and it shows me an

00:33:05,789 --> 00:33:10,469
HTML tab I can also check out the

00:33:08,729 --> 00:33:13,349
headers that I got with the response and

00:33:10,469 --> 00:33:15,329
have a look at it in text format you'll

00:33:13,349 --> 00:33:17,249
see a later example where I've got JSON

00:33:15,329 --> 00:33:19,919
and it renders it as JSON instead of as

00:33:17,249 --> 00:33:21,959
HTML so it's quite clued up with the

00:33:19,919 --> 00:33:24,869
kinds of things that we might be doing

00:33:21,959 --> 00:33:27,679
with web requests Wireshark I could say

00:33:24,869 --> 00:33:32,039
a bit more network II technical term

00:33:27,679 --> 00:33:37,379
Charles proxy a bit more web oriented in

00:33:32,039 --> 00:33:38,879
the way that it works so that's the HTML

00:33:37,379 --> 00:33:40,769
view there it's all very pretty and

00:33:38,879 --> 00:33:42,839
lovely you can see I've got some very

00:33:40,769 --> 00:33:44,429
nice comments on sunshine PHP because

00:33:42,839 --> 00:33:49,339
apparently was an amazing event that

00:33:44,429 --> 00:33:54,389
wasn't there so let's have a look at

00:33:49,339 --> 00:33:56,009
Charles's rewrite functionality the

00:33:54,389 --> 00:33:58,249
request is gonna come from the browser

00:33:56,009 --> 00:34:01,320
into Charles and Charles is going to

00:33:58,249 --> 00:34:05,879
fiddle a little bit before it sends that

00:34:01,320 --> 00:34:08,669
request on here's one I made earlier if

00:34:05,879 --> 00:34:12,960
I enable this rule here what we've got

00:34:08,669 --> 00:34:15,059
is this box up here is which domains the

00:34:12,960 --> 00:34:17,399
rule will apply to so I'm applying it to

00:34:15,059 --> 00:34:19,919
em join des in the web to project you

00:34:17,399 --> 00:34:22,679
just saw and the rule that's being

00:34:19,919 --> 00:34:26,129
applied is in the rules box a bit

00:34:22,679 --> 00:34:30,269
further down where the host end joint in

00:34:26,129 --> 00:34:33,720
will become M joined in dot local which

00:34:30,269 --> 00:34:38,519
is of course my dev copy so we'll press

00:34:33,720 --> 00:34:43,740
ok on that set up the rewrite rule pop

00:34:38,519 --> 00:34:46,559
back over to Firefox come on pop back

00:34:43,740 --> 00:34:50,309
over to Firefox and let's have a look we

00:34:46,559 --> 00:34:55,950
see that we're hitting M joined in dot

00:34:50,309 --> 00:34:57,650
local and if I scroll down there that's

00:34:55,950 --> 00:35:00,630
not the live site

00:34:57,650 --> 00:35:04,500
that's the sample data off my local

00:35:00,630 --> 00:35:07,380
request so I've set up the rewrite rule

00:35:04,500 --> 00:35:12,329
or my next set of requests make this

00:35:07,380 --> 00:35:17,220
happen so I've got sample data look at

00:35:12,329 --> 00:35:20,910
the address bar the browser thinks it's

00:35:17,220 --> 00:35:22,380
sitting MDOT joint in so this is kind of

00:35:20,910 --> 00:35:24,839
a contrived example because I'm just

00:35:22,380 --> 00:35:25,920
showing you that I can make browsers I

00:35:24,839 --> 00:35:27,210
think it's hitting one thing and I'm

00:35:25,920 --> 00:35:30,210
hitting something else so I can play

00:35:27,210 --> 00:35:32,819
with my I can play with my dev copy this

00:35:30,210 --> 00:35:34,680
is really useful when you need to work

00:35:32,819 --> 00:35:36,540
on a test copy of a website and all the

00:35:34,680 --> 00:35:38,640
assets are pointing to the hard-coded

00:35:36,540 --> 00:35:40,950
domain or WordPress doesn't know to move

00:35:38,640 --> 00:35:42,569
its folder name or what any of those

00:35:40,950 --> 00:35:44,369
problems where it's just like this isn't

00:35:42,569 --> 00:35:46,319
quite right well I'm working on a

00:35:44,369 --> 00:35:48,480
development copy so all the images are

00:35:46,319 --> 00:35:50,730
broken route it through Charles fix it

00:35:48,480 --> 00:35:53,700
lots and lots of little bits and pieces

00:35:50,730 --> 00:35:56,220
we can do in all areas of what we do

00:35:53,700 --> 00:35:58,470
we're actually just routing it in and

00:35:56,220 --> 00:36:00,569
the Firefox plugin is I'd like to say

00:35:58,470 --> 00:36:02,040
idiot-proof I have my moments but for

00:36:00,569 --> 00:36:06,599
the most part I find it very painless

00:36:02,040 --> 00:36:08,099
and and easy to work with so that's part

00:36:06,599 --> 00:36:10,500
one of what I wanted to show you with

00:36:08,099 --> 00:36:14,460
Charles there's a bunch of things that

00:36:10,500 --> 00:36:16,890
you can do in terms of the rewrites you

00:36:14,460 --> 00:36:19,950
can also do other things the web 2 is

00:36:16,890 --> 00:36:23,130
aimed at being a bit friendly as a

00:36:19,950 --> 00:36:26,670
smaller screens and also aimed at being

00:36:23,130 --> 00:36:27,990
used on rubbish connections now we're

00:36:26,670 --> 00:36:30,690
not on a rubbish connection because this

00:36:27,990 --> 00:36:32,880
event is held at the brewery but most

00:36:30,690 --> 00:36:34,819
joined in usage comes from conferences

00:36:32,880 --> 00:36:37,950
and most conferences have either

00:36:34,819 --> 00:36:39,359
dreadful local connection or no local

00:36:37,950 --> 00:36:42,630
connection so everybody's on a mobile

00:36:39,359 --> 00:36:46,109
connection charles has a throttling

00:36:42,630 --> 00:36:48,510
option so you can develop with a

00:36:46,109 --> 00:36:50,670
simulated 3G connection and get a sense

00:36:48,510 --> 00:36:53,099
of what this would be like for a user

00:36:50,670 --> 00:36:54,809
who isn't in your office on decent

00:36:53,099 --> 00:36:59,010
internet connection so you can get a

00:36:54,809 --> 00:37:00,930
real sense of how that would work and we

00:36:59,010 --> 00:37:03,420
try not to talk about Charles all day we

00:37:00,930 --> 00:37:10,710
should get out of here in time for the

00:37:03,420 --> 00:37:12,180
next talk okay so here is

00:37:10,710 --> 00:37:14,910
another trick that I want to show you

00:37:12,180 --> 00:37:17,820
with Charles and I mentioned that it can

00:37:14,910 --> 00:37:19,560
be a network proxy so you can put other

00:37:17,820 --> 00:37:22,830
devices on the network let's say for

00:37:19,560 --> 00:37:25,950
example a phone proxy them through

00:37:22,830 --> 00:37:28,200
Charles so it's not just web requests or

00:37:25,950 --> 00:37:30,900
things on your laptop that you set the

00:37:28,200 --> 00:37:33,480
proxy settings for it's a it's a network

00:37:30,900 --> 00:37:35,190
proxy it's got a port open so the first

00:37:33,480 --> 00:37:38,609
thing I've done is I've read is config

00:37:35,190 --> 00:37:41,460
and I need to check what my wireless

00:37:38,609 --> 00:37:44,670
network card IP address is because

00:37:41,460 --> 00:37:50,119
that's where the proxy is so stay with

00:37:44,670 --> 00:37:52,980
me 10-1 naught 53 awesome use the phone

00:37:50,119 --> 00:37:55,830
so we get on the phone and we set up the

00:37:52,980 --> 00:37:57,540
network to proxy through that address go

00:37:55,830 --> 00:38:00,240
to the Wi-Fi settings this is an Android

00:37:57,540 --> 00:38:03,720
phone you need 4.0 or later don't ask me

00:38:00,240 --> 00:38:06,630
why my personal mobile isn't modify the

00:38:03,720 --> 00:38:09,030
network scroll down tick the show

00:38:06,630 --> 00:38:12,450
Advanced Options proxy settings to

00:38:09,030 --> 00:38:15,869
manual and put in that same IP address

00:38:12,450 --> 00:38:17,520
and the port number by default Charles

00:38:15,869 --> 00:38:19,080
is on 8 8 8 8 but you can if you have

00:38:17,520 --> 00:38:22,920
something else on there you can set it

00:38:19,080 --> 00:38:25,320
in Charles so as soon as you do that

00:38:22,920 --> 00:38:30,030
with the phone I'm on the same wireless

00:38:25,320 --> 00:38:34,109
network put in the IP address then we go

00:38:30,030 --> 00:38:35,670
back to Charles and this happens as soon

00:38:34,109 --> 00:38:38,070
as the phone tries to connect through

00:38:35,670 --> 00:38:43,020
the proxy Charles warns you and it tells

00:38:38,070 --> 00:38:44,790
me that 10 1 0 52 the phone is trying to

00:38:43,020 --> 00:38:46,650
make a connection this is so that you

00:38:44,790 --> 00:38:48,240
can run an open proxy on the network and

00:38:46,650 --> 00:38:50,609
not have all kinds of things coming

00:38:48,240 --> 00:38:52,140
through your machine it might be

00:38:50,609 --> 00:38:53,700
interesting to have all kinds of things

00:38:52,140 --> 00:38:55,859
coming through your machine depending

00:38:53,700 --> 00:38:58,470
what network you're on but on the whole

00:38:55,859 --> 00:39:00,660
not brilliant practice so you get a

00:38:58,470 --> 00:39:03,960
warning and you need to expressly allow

00:39:00,660 --> 00:39:06,930
this so ok I meant to do that so we'll

00:39:03,960 --> 00:39:09,900
allow that and you can see the requests

00:39:06,930 --> 00:39:11,670
coming in now hitting API joined in

00:39:09,900 --> 00:39:13,830
because I'm running the joined in

00:39:11,670 --> 00:39:17,609
Android app on the Android phone that

00:39:13,830 --> 00:39:18,510
I'm using for the example mmm ok so

00:39:17,609 --> 00:39:20,339
that's interesting

00:39:18,510 --> 00:39:22,950
straight away we're at the point where

00:39:20,339 --> 00:39:24,390
we can debug mobile apps I do quite a

00:39:22,950 --> 00:39:30,119
lot of API development

00:39:24,390 --> 00:39:31,910
but I don't always do the mobile end I

00:39:30,119 --> 00:39:36,690
have code in the joined in Android app

00:39:31,910 --> 00:39:39,299
but not a lot but straight away I could

00:39:36,690 --> 00:39:40,799
start to kind of get in with those tools

00:39:39,299 --> 00:39:41,940
I don't need too many special debugging

00:39:40,799 --> 00:39:44,279
on the phone I just routed through the

00:39:41,940 --> 00:39:46,410
laptop it's hitting my API and I've got

00:39:44,279 --> 00:39:51,450
some insight down into what's going on

00:39:46,410 --> 00:39:55,680
on that platform the API you've already

00:39:51,450 --> 00:39:58,859
seen this speaks JSON so we hit the page

00:39:55,680 --> 00:40:00,210
and we see the PHP tech the upcoming

00:39:58,859 --> 00:40:03,569
event so it's far in the future

00:40:00,210 --> 00:40:05,640
hot events sunshine PHP you just saw

00:40:03,569 --> 00:40:08,519
that on the website so we're seeing API

00:40:05,640 --> 00:40:11,130
drop joined in Charles knows it's JSON

00:40:08,519 --> 00:40:13,529
so it shows us JSON and JSON text JSON

00:40:11,130 --> 00:40:15,809
just raw JSON JSON text slightly more

00:40:13,529 --> 00:40:19,920
readable JSON we saw that the HTML

00:40:15,809 --> 00:40:21,359
requests showed us HTML and indeed if I

00:40:19,920 --> 00:40:25,470
was web browsing you would see that as

00:40:21,359 --> 00:40:29,519
well let's have a play with the rewrite

00:40:25,470 --> 00:40:32,220
rules again okay so that's the mobile

00:40:29,519 --> 00:40:36,210
rule that I said earlier we're gonna

00:40:32,220 --> 00:40:40,619
swap over now and rewrite API joined in

00:40:36,210 --> 00:40:42,660
to API dot joined in dot local and so

00:40:40,619 --> 00:40:45,059
now I've got the shiny new edition of

00:40:42,660 --> 00:40:46,890
the Android app at one point I thought I

00:40:45,059 --> 00:40:49,200
was going to have a screencast of an

00:40:46,890 --> 00:40:50,670
Android app that you can't use yet but

00:40:49,200 --> 00:40:53,000
we shipped about two days ago so feel

00:40:50,670 --> 00:40:56,940
free to download or update it

00:40:53,000 --> 00:40:59,809
rewriting API jungle into API dot joined

00:40:56,940 --> 00:41:02,700
in dot local have it recompiled the app

00:40:59,809 --> 00:41:08,250
i've just set some settings in Charles

00:41:02,700 --> 00:41:12,509
and we can save those settings refresh

00:41:08,250 --> 00:41:14,730
some pages and we're getting 403

00:41:12,509 --> 00:41:17,730
forbidden on an event icon classic right

00:41:14,730 --> 00:41:21,930
so now we're getting the test data that

00:41:17,730 --> 00:41:24,210
you saw earlier because the app is now

00:41:21,930 --> 00:41:26,670
hitting it doesn't know it's hitting my

00:41:24,210 --> 00:41:29,460
dev copy but it is and if I show you the

00:41:26,670 --> 00:41:34,170
app then here's the data for sunshine

00:41:29,460 --> 00:41:35,940
dot PHP and we can just reload make sure

00:41:34,170 --> 00:41:36,890
that we're doing that set the settings

00:41:35,940 --> 00:41:44,300
in

00:41:36,890 --> 00:41:45,800
reload it again that's my dev data so

00:41:44,300 --> 00:41:47,869
I'm working with an app that I may not

00:41:45,800 --> 00:41:49,010
rebuild may not be able to rebuild if

00:41:47,869 --> 00:41:52,730
it's an iPhone app I don't have the

00:41:49,010 --> 00:41:54,619
tools or the platform I can work against

00:41:52,730 --> 00:41:58,460
a test version of the API change the

00:41:54,619 --> 00:41:59,990
backend API do some debugging observe it

00:41:58,460 --> 00:42:02,150
with Charles change it with Charles

00:41:59,990 --> 00:42:05,119
realize that I've got a PHP variable

00:42:02,150 --> 00:42:06,740
name in my access token um

00:42:05,119 --> 00:42:11,180
any of those other things that could

00:42:06,740 --> 00:42:13,250
happen find this very powerful because I

00:42:11,180 --> 00:42:17,660
do API stuff I don't really do Webster

00:42:13,250 --> 00:42:20,180
so having Charles allows me to debug not

00:42:17,660 --> 00:42:23,150
only the web things but also other

00:42:20,180 --> 00:42:25,220
devices and I think that is becoming

00:42:23,150 --> 00:42:27,109
increasingly relevant whether you're

00:42:25,220 --> 00:42:30,250
doing apps or whether you're just doing

00:42:27,109 --> 00:42:34,490
a lot of device testing maybe you care

00:42:30,250 --> 00:42:36,500
what your site looks like on different

00:42:34,490 --> 00:42:38,450
sizes of screen different resolutions

00:42:36,500 --> 00:42:40,640
different network speeds Charles can

00:42:38,450 --> 00:42:42,200
give you all of that and you can save

00:42:40,640 --> 00:42:49,760
the sessions and evaluate them later

00:42:42,200 --> 00:42:51,740
really really powerful tool okay one

00:42:49,760 --> 00:42:55,160
other thing that I wanted to talk about

00:42:51,740 --> 00:42:59,450
with Charles excuse me our time work

00:42:55,160 --> 00:43:02,270
technology jolly good okay is SSL you

00:42:59,450 --> 00:43:04,670
can do SSL with wire shark but you need

00:43:02,270 --> 00:43:06,640
to serve a key so if it's your server

00:43:04,670 --> 00:43:10,010
you can feed the same keys in and

00:43:06,640 --> 00:43:13,720
Wireshark can do some SSL Charles does

00:43:10,010 --> 00:43:17,810
SSL very nicely it is a classic

00:43:13,720 --> 00:43:21,410
man-in-the-middle attack so what happens

00:43:17,810 --> 00:43:25,480
with Charles and SSL is your browser or

00:43:21,410 --> 00:43:28,609
whatever makes a request to Charles

00:43:25,480 --> 00:43:31,250
Charles does the handshake with you for

00:43:28,609 --> 00:43:33,260
that leg Charles then requests the

00:43:31,250 --> 00:43:35,480
remote server and uses the normal remote

00:43:33,260 --> 00:43:38,240
server SSL cert and does being the

00:43:35,480 --> 00:43:41,240
encryption for that but this leg

00:43:38,240 --> 00:43:42,980
Charles is being is being is doing the

00:43:41,240 --> 00:43:45,230
SSL handshake with you so this the

00:43:42,980 --> 00:43:47,340
certificate won't match what the service

00:43:45,230 --> 00:43:50,130
should be this is

00:43:47,340 --> 00:43:51,300
the experience that you get is like when

00:43:50,130 --> 00:43:52,950
you've created your own test

00:43:51,300 --> 00:43:53,550
certificates you're developing an SSL

00:43:52,950 --> 00:43:55,020
site

00:43:53,550 --> 00:43:57,240
you're not buying it yet because you're

00:43:55,020 --> 00:43:59,400
not live so in your browser you see

00:43:57,240 --> 00:44:03,780
something like this you need to confirm

00:43:59,400 --> 00:44:06,420
the exception for devices Charles is a

00:44:03,780 --> 00:44:10,140
certificate authority so you can you can

00:44:06,420 --> 00:44:11,100
install the CA on to the device and if

00:44:10,140 --> 00:44:12,540
you're doing more than just like

00:44:11,100 --> 00:44:14,940
confirming it in Wireshark then you

00:44:12,540 --> 00:44:19,440
could do SSL like this so this is again

00:44:14,940 --> 00:44:20,940
something that I widely use Charles for

00:44:19,440 --> 00:44:23,400
it's got SSL in the what in the Centers

00:44:20,940 --> 00:44:25,260
I tend to use Charles as my tool of

00:44:23,400 --> 00:44:29,070
choice because it is really good for

00:44:25,260 --> 00:44:31,830
this doing the what you'd expect

00:44:29,070 --> 00:44:34,050
SSL with the remote site and then once

00:44:31,830 --> 00:44:37,140
you hit Charles it's reciting it so your

00:44:34,050 --> 00:44:39,120
browser will do the SSL but it's this is

00:44:37,140 --> 00:44:44,970
there's a man-in-the-middle attack going

00:44:39,120 --> 00:44:47,550
on there yeah okay so I think I've

00:44:44,970 --> 00:44:51,660
covered most things that I wanted to the

00:44:47,550 --> 00:44:52,890
thing about talking about HTTP tools is

00:44:51,660 --> 00:44:54,300
it doesn't matter what to talk about but

00:44:52,890 --> 00:44:56,130
somebody always comes up to me

00:44:54,300 --> 00:44:58,260
afterwards angry because there's a

00:44:56,130 --> 00:45:01,710
fabulous tool in the world and I didn't

00:44:58,260 --> 00:45:03,630
mention it and there are some fabulous

00:45:01,710 --> 00:45:06,090
tools in the world trying to show you

00:45:03,630 --> 00:45:08,700
over my shoulder insight into the ones

00:45:06,090 --> 00:45:10,890
that I use are a bunch of others these

00:45:08,700 --> 00:45:15,270
are the ones that people most get angry

00:45:10,890 --> 00:45:16,830
about me not mentioning so I really

00:45:15,270 --> 00:45:19,710
think that some of these may be worth a

00:45:16,830 --> 00:45:20,340
look in particular the curl stuff I did

00:45:19,710 --> 00:45:23,310
at the beginning

00:45:20,340 --> 00:45:25,230
I think curl is a key skill but it isn't

00:45:23,310 --> 00:45:28,230
particularly humane so if you would

00:45:25,230 --> 00:45:30,270
rather use a GUI tool if that's more

00:45:28,230 --> 00:45:32,190
your style of working then we're all

00:45:30,270 --> 00:45:35,520
different and one of these may be the

00:45:32,190 --> 00:45:39,300
right thing HTT I'm not sure it's HTTP

00:45:35,520 --> 00:45:41,700
HTTP ie is a really nice tool still

00:45:39,300 --> 00:45:44,850
command line bit more modern than curl

00:45:41,700 --> 00:45:46,080
perhaps really pretty JSON output if you

00:45:44,850 --> 00:45:47,490
need to do like documentation or

00:45:46,080 --> 00:45:49,560
anything use this for your JSON output

00:45:47,490 --> 00:45:52,560
it does pigments and everything it's

00:45:49,560 --> 00:45:55,320
lovely it's Python tool we've got

00:45:52,560 --> 00:45:58,830
fiddler which is a restful HTTP

00:45:55,320 --> 00:45:59,119
requesting tool for your browser they're

00:45:58,830 --> 00:46:01,369
in

00:45:59,119 --> 00:46:02,900
nice tools built in for postman the

00:46:01,369 --> 00:46:06,380
chrome restclient

00:46:02,900 --> 00:46:09,619
for firefox there ways that you can use

00:46:06,380 --> 00:46:12,380
your in browser tools to make different

00:46:09,619 --> 00:46:14,210
kinds of HTTP requests inspect the

00:46:12,380 --> 00:46:17,089
responses get involved with those in

00:46:14,210 --> 00:46:21,289
different ways there are a lot of gooeys

00:46:17,089 --> 00:46:24,410
a lot of the ide s also have some kind

00:46:21,289 --> 00:46:25,849
of request e plug in the other vim user

00:46:24,410 --> 00:46:27,319
I don't know what that is

00:46:25,849 --> 00:46:29,480
but there are things in your IDE you

00:46:27,319 --> 00:46:32,299
should press the buttons if that's a

00:46:29,480 --> 00:46:33,529
tool that you enjoy using should have

00:46:32,299 --> 00:46:36,769
gone and pick the brains of the jet jet

00:46:33,529 --> 00:46:39,140
the protect brains people but whatever

00:46:36,769 --> 00:46:41,839
tools you're using understanding the

00:46:39,140 --> 00:46:45,279
principles of HTTP understanding how

00:46:41,839 --> 00:46:52,180
those tools work is really really key

00:46:45,279 --> 00:46:54,259
debugging is it's about attitude

00:46:52,180 --> 00:46:57,259
sometimes you might say it's about

00:46:54,259 --> 00:46:59,240
experience you know the more you've

00:46:57,259 --> 00:47:01,549
earned you your stripes through

00:46:59,240 --> 00:47:03,769
predominantly bad experiences it's the

00:47:01,549 --> 00:47:05,359
better you are at debugging but I don't

00:47:03,769 --> 00:47:07,819
think you have to necessarily learn it

00:47:05,359 --> 00:47:11,660
all the hard way I think having a good

00:47:07,819 --> 00:47:14,739
attitude to understanding where in the

00:47:11,660 --> 00:47:16,640
system something could be happening

00:47:14,739 --> 00:47:20,569
understanding which tools are available

00:47:16,640 --> 00:47:22,489
and which can help you and then knowing

00:47:20,569 --> 00:47:25,940
how to apply those tools to find the

00:47:22,489 --> 00:47:28,789
problem fixing the problem whole

00:47:25,940 --> 00:47:30,739
different ballgame your developers you

00:47:28,789 --> 00:47:33,710
understand your systems I know you can

00:47:30,739 --> 00:47:36,920
fix it but to actually find the problem

00:47:33,710 --> 00:47:38,989
in a multi service layered type system

00:47:36,920 --> 00:47:41,630
can be tricky and I really hope that

00:47:38,989 --> 00:47:44,140
these tools will help you integrate with

00:47:41,630 --> 00:47:46,849
other api's publish your own debug

00:47:44,140 --> 00:47:49,430
internal API is all those kinds of

00:47:46,849 --> 00:47:52,549
different things so get to know your

00:47:49,430 --> 00:47:54,609
tools take some time with them ideally

00:47:52,549 --> 00:47:56,809
know when you're not under pressure

00:47:54,609 --> 00:47:58,849
because when you need them

00:47:56,809 --> 00:48:03,400
then you'll be ready you'll be ready to

00:47:58,849 --> 00:48:07,220
go that's the end of my formal content I

00:48:03,400 --> 00:48:08,720
do have time for questions so if anyone

00:48:07,220 --> 00:48:10,880
has any questions this would be a

00:48:08,720 --> 00:48:12,500
wonderful moment and thing you'd like me

00:48:10,880 --> 00:48:20,420
to talk about more or

00:48:12,500 --> 00:48:24,410
again the question I'm often asked here

00:48:20,420 --> 00:48:26,150
is about which is the best tool I've

00:48:24,410 --> 00:48:28,580
shown you all three because I use all

00:48:26,150 --> 00:48:30,860
three if you want to know more about

00:48:28,580 --> 00:48:32,930
this kind of stuff there's a book on the

00:48:30,860 --> 00:48:34,940
slide behind me

00:48:32,930 --> 00:48:36,980
I wrote the PHP web services book for

00:48:34,940 --> 00:48:39,620
O'Reilly I have checked and Josette has

00:48:36,980 --> 00:48:41,300
it I also have some discount cards if

00:48:39,620 --> 00:48:42,740
you want to buy it online or just get

00:48:41,300 --> 00:48:44,510
the e-book come and see me because I

00:48:42,740 --> 00:48:47,150
have some business cards to give you a

00:48:44,510 --> 00:48:51,080
discount I also mentioned the Charles

00:48:47,150 --> 00:48:52,700
article my slides will be uploaded

00:48:51,080 --> 00:49:00,950
you really can't come up with a question

00:48:52,700 --> 00:49:03,950
for me like not one person okay well

00:49:00,950 --> 00:49:06,590
good I'm quite happy to just have a bit

00:49:03,950 --> 00:49:08,420
of a sit down I don't feel like terribly

00:49:06,590 --> 00:49:10,670
good value but that's that's okay

00:49:08,420 --> 00:49:12,440
alright so if you want to get in touch

00:49:10,670 --> 00:49:14,690
with me then my contact details are at

00:49:12,440 --> 00:49:17,600
the bottom of this slide you have seen

00:49:14,690 --> 00:49:19,340
rather a lot of the joined in project in

00:49:17,600 --> 00:49:19,910
this talk I would really appreciate your

00:49:19,340 --> 00:49:22,580
feedback

00:49:19,910 --> 00:49:24,290
I don't know particularly because no

00:49:22,580 --> 00:49:25,760
one's just talked to me I don't know if

00:49:24,290 --> 00:49:27,290
this worked for you if it was a good

00:49:25,760 --> 00:49:29,510
format if it was helpful

00:49:27,290 --> 00:49:32,180
if you'd learn something or if not any

00:49:29,510 --> 00:49:33,950
of the above so if you could just take a

00:49:32,180 --> 00:49:36,590
moment to fill in some feedback for me

00:49:33,950 --> 00:49:37,940
on joined in I would be grateful I'm

00:49:36,590 --> 00:49:40,850
around the rest of the day I will

00:49:37,940 --> 00:49:42,170
definitely be in the bar later so come

00:49:40,850 --> 00:49:45,140
and find me if you'd like to chat and

00:49:42,170 --> 00:49:48,880
with that thank you very much

00:49:45,140 --> 00:49:48,880

YouTube URL: https://www.youtube.com/watch?v=1hfDMrsdO80


