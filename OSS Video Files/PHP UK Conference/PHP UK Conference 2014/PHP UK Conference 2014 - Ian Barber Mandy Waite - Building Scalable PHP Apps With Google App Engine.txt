Title: PHP UK Conference 2014 - Ian Barber Mandy Waite - Building Scalable PHP Apps With Google App Engine
Publication date: 2014-03-21
Playlist: PHP UK Conference 2014
Description: 
	At Google I/O 2013 back in June, we announced the addition of a new PHP language runtime for App Engine. Google App Engine allows you to build web applications on the same scalable systems that power Google applications. In this talk we'll take a look at building and running highly scalable PHP applications on the App Engine platform. Here's some of the topics that we'll cover:

- Deploying and running popular PHP applications and frameworks on App Engine
- Differences between applications running on App Engine and a typical LAMP stack
- Using asynchronous calls for I/O requests
- Utilising App Engine services such as task queues, memcache, mail and servers.
- Composing applications with Google Cloud Storage and Google Cloud SQL
Captions: 
	00:00:04,370 --> 00:00:10,530
so my name is Ian barber I'm a developer

00:00:07,470 --> 00:00:12,420
programs engineer with Google and this

00:00:10,530 --> 00:00:14,849
is my colleague Mandy and I'm manuh I'm

00:00:12,420 --> 00:00:16,049
a developer advocate pretty well was for

00:00:14,849 --> 00:00:19,710
the Google cloud platform now for

00:00:16,049 --> 00:00:22,580
scalable outreach so we are going to

00:00:19,710 --> 00:00:24,779
talk about the Google cloud platform

00:00:22,580 --> 00:00:27,510
specifically App Engine and specifically

00:00:24,779 --> 00:00:29,220
PHP on App Engine and there's a bit of a

00:00:27,510 --> 00:00:30,660
division between us where Mandy actually

00:00:29,220 --> 00:00:33,120
knows about this stuff and I've done

00:00:30,660 --> 00:00:36,930
some PhD in the past and this is how we

00:00:33,120 --> 00:00:40,649
ended up talking Oh in October at PHP

00:00:36,930 --> 00:00:42,780
Northwest about App Engine and PHP and

00:00:40,649 --> 00:00:44,190
in that case we actually ported joined

00:00:42,780 --> 00:00:47,700
in we wanted to see how long would it

00:00:44,190 --> 00:00:51,239
take to take a site which is MVC which

00:00:47,700 --> 00:00:53,789
is you know maybe not the world's most

00:00:51,239 --> 00:00:55,230
consistent code base and get it on to

00:00:53,789 --> 00:00:56,879
App Engine they took about three days it

00:00:55,230 --> 00:00:59,699
wasn't that hard and so we talked about

00:00:56,879 --> 00:01:00,870
that then but for you guys we thought

00:00:59,699 --> 00:01:02,809
we'll do something a little bit

00:01:00,870 --> 00:01:07,500
different we go in another direction

00:01:02,809 --> 00:01:09,119
specifically one direction so how many

00:01:07,500 --> 00:01:13,979
of you guys have heard of the band One

00:01:09,119 --> 00:01:15,360
Direction who can I witness like with

00:01:13,979 --> 00:01:17,460
all your hands when obviously so how

00:01:15,360 --> 00:01:19,530
many of your fans of One Direction we

00:01:17,460 --> 00:01:24,770
should probably had less hands but okay

00:01:19,530 --> 00:01:29,520
so what's that but he's still herded by

00:01:24,770 --> 00:01:33,119
come on so anyway so back on the number

00:01:29,520 --> 00:01:37,110
twenty third one direction the boyband

00:01:33,119 --> 00:01:40,140
did a survey with her the sensation it's

00:01:37,110 --> 00:01:42,240
a sensation the boyband sensation they

00:01:40,140 --> 00:01:44,280
did OE YouTube live stream seven hour

00:01:42,240 --> 00:01:49,530
livestream the biggest livestream ever

00:01:44,280 --> 00:01:51,689
on YouTube and one direction happened to

00:01:49,530 --> 00:01:53,310
be the biggest social interesting social

00:01:51,689 --> 00:01:54,930
media and you see on the planet they

00:01:53,310 --> 00:01:57,659
have like 17 million Twitter followers

00:01:54,930 --> 00:02:00,860
which is close to what you have right

00:01:57,659 --> 00:02:04,470
yeah it's in the ballpark okay

00:02:00,860 --> 00:02:06,810
so as part of a size thing they wanted

00:02:04,470 --> 00:02:08,670
to build a second screen application a

00:02:06,810 --> 00:02:09,630
screen that people could use while

00:02:08,670 --> 00:02:10,830
they're watching the live stream that

00:02:09,630 --> 00:02:13,530
they can interact with them maybe their

00:02:10,830 --> 00:02:15,060
mobile device or maybe on their laptop

00:02:13,530 --> 00:02:18,480
anything like that but it's a quiz app

00:02:15,060 --> 00:02:20,430
so about three or four weeks before the

00:02:18,480 --> 00:02:22,740
events they boarding the agency to

00:02:20,430 --> 00:02:24,690
develop the code for it and we help them

00:02:22,740 --> 00:02:27,810
develop this application this 1d day

00:02:24,690 --> 00:02:29,790
quiz and it has one main feature well to

00:02:27,810 --> 00:02:31,739
make pizzas really right so one is it

00:02:29,790 --> 00:02:33,630
never falls down that people don't get a

00:02:31,739 --> 00:02:37,489
bad experience with it and one is scales

00:02:33,630 --> 00:02:39,360
to handle hundreds of thousands of users

00:02:37,489 --> 00:02:40,800
potentially 16 williams for the

00:02:39,360 --> 00:02:42,390
followers i'm integrating it could have

00:02:40,800 --> 00:02:46,110
been millions but it's probably going to

00:02:42,390 --> 00:02:47,340
be in the hundreds of thousands and this

00:02:46,110 --> 00:02:49,739
is the kind of traffic pattern we got

00:02:47,340 --> 00:02:51,810
this is a summary window from App Engine

00:02:49,739 --> 00:02:54,690
the application one known App Engine and

00:02:51,810 --> 00:02:56,610
this is queries per second so this is a

00:02:54,690 --> 00:02:58,230
spike we'll talk more about the

00:02:56,610 --> 00:02:59,910
architecture of the app and how we

00:02:58,230 --> 00:03:04,140
deliver questions in fact we have

00:02:59,910 --> 00:03:06,900
something a surprise in store for this

00:03:04,140 --> 00:03:09,299
basically shows queries per second over

00:03:06,900 --> 00:03:11,400
time oh you're not only am sorry yeah

00:03:09,299 --> 00:03:14,670
where's the second overtime and that's

00:03:11,400 --> 00:03:17,310
quite impressive this is like 750 QPS

00:03:14,670 --> 00:03:19,290
sustained over a long period of time and

00:03:17,310 --> 00:03:21,120
we had a much much bigger spike in that

00:03:19,290 --> 00:03:22,860
as well was it nine thousand cube yet

00:03:21,120 --> 00:03:24,120
yeah so we are spikin into that an

00:03:22,860 --> 00:03:27,360
obviously we can't use this application

00:03:24,120 --> 00:03:31,410
and so we have this application so

00:03:27,360 --> 00:03:33,239
actually the app was built with PHP the

00:03:31,410 --> 00:03:35,519
1d app was built using PHP on the front

00:03:33,239 --> 00:03:37,110
end but we wanted to build something

00:03:35,519 --> 00:03:39,299
kind of for you guys that we can

00:03:37,110 --> 00:03:42,510
actually share the code for so I made

00:03:39,299 --> 00:03:44,280
this and the front end much like the 1d

00:03:42,510 --> 00:03:46,950
app is in JavaScript and as you can see

00:03:44,280 --> 00:03:50,160
my design skills pretty much at the same

00:03:46,950 --> 00:03:54,390
level pretty much there so yeah you can

00:03:50,160 --> 00:03:57,239
try it it's a PHP UK quiz appspot com so

00:03:54,390 --> 00:03:59,489
a work on mobile hopefully and it'll

00:03:57,239 --> 00:04:02,280
work on desktop hopefully and assuming

00:03:59,489 --> 00:04:05,160
the wifis up and it works exactly the

00:04:02,280 --> 00:04:07,590
same way as the original one direction

00:04:05,160 --> 00:04:09,750
quiz so what happens is every so many

00:04:07,590 --> 00:04:11,410
seconds about five minutes you're going

00:04:09,750 --> 00:04:12,580
to get a new question about

00:04:11,410 --> 00:04:14,290
something that's happened over the last

00:04:12,580 --> 00:04:17,230
two days of the conference one of the

00:04:14,290 --> 00:04:18,760
talks or some of the content and you get

00:04:17,230 --> 00:04:20,500
to answer it and there's a score at the

00:04:18,760 --> 00:04:23,650
end so this model is exactly how they

00:04:20,500 --> 00:04:27,700
built their app but with a slightly

00:04:23,650 --> 00:04:29,730
smaller use base none of you guys have

00:04:27,700 --> 00:04:32,680
got desktop stone right thing with you

00:04:29,730 --> 00:04:34,300
you mentioned desktops yeah yeah yeahs

00:04:32,680 --> 00:04:36,340
desti our desktops and mobile you okay

00:04:34,300 --> 00:04:37,720
all right so they're basically one of

00:04:36,340 --> 00:04:39,490
the questions that come up and I think

00:04:37,720 --> 00:04:42,490
Glen Campbell touched on this subject

00:04:39,490 --> 00:04:43,870
this morning as white cloud or PHP how

00:04:42,490 --> 00:04:47,230
many people might imply HP in the cloud

00:04:43,870 --> 00:04:49,900
today okay it was a good number so it's

00:04:47,230 --> 00:04:53,920
quite a few of you so one of the reasons

00:04:49,900 --> 00:04:55,300
why you might want to run thank you you

00:04:53,920 --> 00:04:58,600
might want to run PHP in the cloud so

00:04:55,300 --> 00:05:00,340
let's think about this as developers for

00:04:58,600 --> 00:05:02,560
a long time we've been constrained be

00:05:00,340 --> 00:05:05,140
constrained up by the our imagination by

00:05:02,560 --> 00:05:06,850
the things we can build in our minds at

00:05:05,140 --> 00:05:09,100
least but by the resources that we have

00:05:06,850 --> 00:05:10,750
available to actually build it and in

00:05:09,100 --> 00:05:12,520
the days of cost-effective cloud

00:05:10,750 --> 00:05:14,650
services virtual machines in the cloud

00:05:12,520 --> 00:05:17,620
stores in the cloud other services in

00:05:14,650 --> 00:05:18,940
the cloud the reality has now changed we

00:05:17,620 --> 00:05:21,910
now have the ability to build what we

00:05:18,940 --> 00:05:22,990
want build what we can envision so all

00:05:21,910 --> 00:05:25,210
of those kind of constraints have gone

00:05:22,990 --> 00:05:28,060
away also we want the ability to be able

00:05:25,210 --> 00:05:29,380
to scale scale on demand and who have

00:05:28,060 --> 00:05:31,060
the resources that we need when we need

00:05:29,380 --> 00:05:34,150
them we'll talk more about scale in a

00:05:31,060 --> 00:05:37,150
couple of slides also with some cloud

00:05:34,150 --> 00:05:40,360
services platform as a service we give

00:05:37,150 --> 00:05:43,690
you they give you fully manage software

00:05:40,360 --> 00:05:45,130
stacks in the cloud and that means you

00:05:43,690 --> 00:05:46,900
can spend your time focusing on

00:05:45,130 --> 00:05:49,870
developing your application code and not

00:05:46,900 --> 00:05:52,270
building systems or configuring and

00:05:49,870 --> 00:05:54,130
managing software stacks another great

00:05:52,270 --> 00:05:55,780
feature of the cloud is the ability to

00:05:54,130 --> 00:05:59,890
gather analytics now you can gather

00:05:55,780 --> 00:06:02,860
analytics anywhere but theta sin su data

00:05:59,890 --> 00:06:04,840
tends to get big very big you need lots

00:06:02,860 --> 00:06:06,790
of space to store data the cloud is a

00:06:04,840 --> 00:06:08,590
perfect place for storing data and it

00:06:06,790 --> 00:06:10,780
also provides halsey on which you can

00:06:08,590 --> 00:06:12,460
run analytics across that data to gain

00:06:10,780 --> 00:06:14,260
insight into how your application is

00:06:12,460 --> 00:06:16,510
doing how its performing how your users

00:06:14,260 --> 00:06:17,980
interact with the application that can

00:06:16,510 --> 00:06:20,110
give you the ability to actually update

00:06:17,980 --> 00:06:22,990
your application and tailor it to suit

00:06:20,110 --> 00:06:25,169
your users needs then there's global

00:06:22,990 --> 00:06:27,639
availability now you can develop

00:06:25,169 --> 00:06:28,900
duplex in the server in London and

00:06:27,639 --> 00:06:30,520
that's great for people in London who

00:06:28,900 --> 00:06:32,139
can access our application what about

00:06:30,520 --> 00:06:34,270
the guy in Beijing how does the access

00:06:32,139 --> 00:06:36,070
your application so now you're not going

00:06:34,270 --> 00:06:37,449
to deploy your application everywhere in

00:06:36,070 --> 00:06:40,060
the world we're gonna have it running in

00:06:37,449 --> 00:06:41,949
one place but with data sensors

00:06:40,060 --> 00:06:43,870
everywhere in the world users can

00:06:41,949 --> 00:06:45,669
connect your application very easily for

00:06:43,870 --> 00:06:47,710
the local data center we can cast

00:06:45,669 --> 00:06:49,750
content very close to the user using

00:06:47,710 --> 00:06:54,100
edge caching or peer relationships of

00:06:49,750 --> 00:06:56,560
ISPs and whence the once the users

00:06:54,100 --> 00:06:57,940
connected to the data thing so we can

00:06:56,560 --> 00:07:01,050
get their requests to where the

00:06:57,940 --> 00:07:03,880
application is running very very quickly

00:07:01,050 --> 00:07:05,590
you could build it yourself and I'm not

00:07:03,880 --> 00:07:07,060
ready going to talking inside this kind

00:07:05,590 --> 00:07:08,979
of slide takes me back to the days when

00:07:07,060 --> 00:07:10,750
I used to configure systems just look at

00:07:08,979 --> 00:07:12,400
it you know what it's like to build lab

00:07:10,750 --> 00:07:14,590
sacks and to configure machines and

00:07:12,400 --> 00:07:18,130
databases you don't have to do that in

00:07:14,590 --> 00:07:20,169
the cloud you can read ahead you can

00:07:18,130 --> 00:07:22,930
also try to anticipate demand Leslie

00:07:20,169 --> 00:07:25,330
we're also scale comes in now good Iman

00:07:22,930 --> 00:07:27,850
traffic patterns they change they change

00:07:25,330 --> 00:07:29,380
dramatically you could be flashed on /

00:07:27,850 --> 00:07:32,020
dotted you could be tech for inst and

00:07:29,380 --> 00:07:34,090
your traffic demand in the application

00:07:32,020 --> 00:07:35,950
could grow very rapidly overnight even

00:07:34,090 --> 00:07:38,320
so how do you deal with these kind of

00:07:35,950 --> 00:07:39,580
spikes in traffic that we have here how

00:07:38,320 --> 00:07:42,370
do you deal with situations where you

00:07:39,580 --> 00:07:44,860
have pattern-based traffic demand well

00:07:42,370 --> 00:07:46,510
you have some level of usage then the

00:07:44,860 --> 00:07:48,880
usage goes away maybe overnight or

00:07:46,510 --> 00:07:50,440
something like that or seasonal traffic

00:07:48,880 --> 00:07:52,120
patterns where you have resources

00:07:50,440 --> 00:07:54,760
available that aren't being used because

00:07:52,120 --> 00:07:56,669
you have no traffic how do you handle

00:07:54,760 --> 00:08:00,820
linear growth how do you handle

00:07:56,669 --> 00:08:02,440
exponential growth and traffic demand so

00:08:00,820 --> 00:08:05,229
really the focus of this talk is app

00:08:02,440 --> 00:08:06,130
engine so we saw it in the title so

00:08:05,229 --> 00:08:08,289
we're going to be talking about App

00:08:06,130 --> 00:08:11,169
Engine mostly or at least in the context

00:08:08,289 --> 00:08:13,060
of App Engine PHP and I think gene is a

00:08:11,169 --> 00:08:14,889
platform as a service offering it gives

00:08:13,060 --> 00:08:19,810
you fully managed soft by selecting the

00:08:14,889 --> 00:08:23,080
cloud and I could list a whole bunch of

00:08:19,810 --> 00:08:24,280
bullet points here detailing happens and

00:08:23,080 --> 00:08:26,710
features but I'm gonna stick to a few

00:08:24,280 --> 00:08:28,900
the ability to also scale this should

00:08:26,710 --> 00:08:31,449
ability to actually handle the traffic

00:08:28,900 --> 00:08:33,219
is coming into your application not

00:08:31,449 --> 00:08:33,690
necessarily big Peaks but also small

00:08:33,219 --> 00:08:35,909
troughs

00:08:33,690 --> 00:08:37,560
well that you have the resources you

00:08:35,909 --> 00:08:40,380
need when you need them and you only pay

00:08:37,560 --> 00:08:42,630
for what you use also is completely free

00:08:40,380 --> 00:08:44,039
to start you have a Google account sign

00:08:42,630 --> 00:08:45,810
up for App Engine but you don't have to

00:08:44,039 --> 00:08:47,520
put in any billing information you don't

00:08:45,810 --> 00:08:49,200
have to put your credit card in you get

00:08:47,520 --> 00:08:51,690
a reasonable amount of quota per day

00:08:49,200 --> 00:08:54,110
that you can use to have your

00:08:51,690 --> 00:08:57,870
application serving request some users

00:08:54,110 --> 00:08:58,950
also we have SDKs or our language 1

00:08:57,870 --> 00:09:01,530
times which I'll talk about in a minute

00:08:58,950 --> 00:09:03,330
and yes decays give us local development

00:09:01,530 --> 00:09:06,960
environments in which you can develop

00:09:03,330 --> 00:09:09,150
your application run and test it also we

00:09:06,960 --> 00:09:11,370
have access to service abstractions

00:09:09,150 --> 00:09:14,490
cloud scales service abstractions things

00:09:11,370 --> 00:09:16,140
like mem cache and data store and for

00:09:14,490 --> 00:09:17,990
App Engine users have access direct

00:09:16,140 --> 00:09:22,710
access to the Google API such as Maps

00:09:17,990 --> 00:09:24,720
YouTube Google+ the software stacks that

00:09:22,710 --> 00:09:26,760
we have or what we call language one

00:09:24,720 --> 00:09:31,650
times they're fully managed the

00:09:26,760 --> 00:09:36,450
languages we support our PHP a PHP PHP

00:09:31,650 --> 00:09:38,130
and Python Java and go these are fully

00:09:36,450 --> 00:09:39,930
managed for you you do not have to apply

00:09:38,130 --> 00:09:42,030
any patches you don't have to apply any

00:09:39,930 --> 00:09:44,850
updates and they are maintained for us

00:09:42,030 --> 00:09:47,460
by what we call sres sacral ivan as soon

00:09:44,850 --> 00:09:50,160
as the site reliability engineers who we

00:09:47,460 --> 00:09:51,900
have enormous respect for they carry the

00:09:50,160 --> 00:09:55,200
pages there to guide to get woken up the

00:09:51,900 --> 00:09:58,490
guys and gals who get woke up with their

00:09:55,200 --> 00:10:00,690
pages when anything goes on back engine

00:09:58,490 --> 00:10:02,940
once again just want to kind of touch on

00:10:00,690 --> 00:10:05,100
as well is this kind of difference

00:10:02,940 --> 00:10:06,900
between platform as a service where we

00:10:05,100 --> 00:10:08,700
have a tool such as App Engine which

00:10:06,900 --> 00:10:10,560
provides software stacks and

00:10:08,700 --> 00:10:13,350
infrastructures of service which provide

00:10:10,560 --> 00:10:14,730
virtual machines in the cloud so now

00:10:13,350 --> 00:10:16,530
we've already established that App

00:10:14,730 --> 00:10:18,360
Engine the platform as a service

00:10:16,530 --> 00:10:21,150
offering is perfectly suited for these

00:10:18,360 --> 00:10:23,610
webtype workloads and also perfectly

00:10:21,150 --> 00:10:25,470
suited for mobile and cloud mobile and

00:10:23,610 --> 00:10:27,780
gaming backends it's great for

00:10:25,470 --> 00:10:30,089
undetermined at type traffic patterns

00:10:27,780 --> 00:10:31,380
and also for auto scaling whereas

00:10:30,089 --> 00:10:33,540
something like infrastructure as a

00:10:31,380 --> 00:10:35,160
service could do all of that you could

00:10:33,540 --> 00:10:37,530
write your own paths if you wanted to

00:10:35,160 --> 00:10:39,300
you could run Heroku say on compute

00:10:37,530 --> 00:10:41,400
engine or you build your own and run it

00:10:39,300 --> 00:10:45,150
on compute engine our infrastructure as

00:10:41,400 --> 00:10:46,889
a service but to Putin and

00:10:45,150 --> 00:10:49,019
infrastructure the service generally

00:10:46,889 --> 00:10:50,670
is best suited for compute type

00:10:49,019 --> 00:10:53,189
workloads things such as batch

00:10:50,670 --> 00:10:55,369
processing one in my produces doing

00:10:53,189 --> 00:10:58,230
things like Monte Carlo simulations or

00:10:55,369 --> 00:11:00,600
one thing we saw last year was the Atlas

00:10:58,230 --> 00:11:03,149
Project at CERN use compute engine as

00:11:00,600 --> 00:11:06,119
part of a hybrid cloud which is really

00:11:03,149 --> 00:11:08,249
gone platform is a service and the

00:11:06,119 --> 00:11:10,230
massage with service can both do one

00:11:08,249 --> 00:11:11,910
thing really well background processing

00:11:10,230 --> 00:11:14,459
they both do that equally well you can

00:11:11,910 --> 00:11:16,859
do it or neither but in the middle days

00:11:14,459 --> 00:11:18,179
this capabilities chain App Engine can

00:11:16,859 --> 00:11:20,910
do what it does because it's very

00:11:18,179 --> 00:11:22,619
opinionated it wants to do things in a

00:11:20,910 --> 00:11:25,619
certain way that's what gives gives it

00:11:22,619 --> 00:11:26,819
the ability to also scale and you have

00:11:25,619 --> 00:11:28,350
to imagine here when I'm talking about

00:11:26,819 --> 00:11:30,389
auto scaling so glad you abilities have

00:11:28,350 --> 00:11:32,639
really respond to rapid changes in

00:11:30,389 --> 00:11:35,429
traffic it's a scale up very quickly

00:11:32,639 --> 00:11:40,230
without seeing extended periods of high

00:11:35,429 --> 00:11:42,269
response times so the one thing that App

00:11:40,230 --> 00:11:44,009
Engine and some other platforms or

00:11:42,269 --> 00:11:45,779
service can't do very well are things

00:11:44,009 --> 00:11:47,129
like some languages we've already listed

00:11:45,779 --> 00:11:48,600
the poor languages that app engine

00:11:47,129 --> 00:11:51,239
supports and that's all it supports it

00:11:48,600 --> 00:11:53,639
currently also what about extensions to

00:11:51,239 --> 00:11:54,749
the language also what happens if you

00:11:53,639 --> 00:11:56,549
need routes access to your virtual

00:11:54,749 --> 00:11:59,429
machines you want to run some software

00:11:56,549 --> 00:12:01,669
on their alternative PHP stacks we have

00:11:59,429 --> 00:12:04,470
PHP in the talk more about the later and

00:12:01,669 --> 00:12:07,110
also web sockets as well so there's this

00:12:04,470 --> 00:12:08,910
kind of middle ground where platforms

00:12:07,110 --> 00:12:10,589
your service isn't perfectly suited we

00:12:08,910 --> 00:12:14,549
really want to actually push all of that

00:12:10,589 --> 00:12:17,549
works infrastructure-as-a-service yeah

00:12:14,549 --> 00:12:20,100
so I wanted to talk a little bit about

00:12:17,549 --> 00:12:22,350
what it's like to run PHP on App Engine

00:12:20,100 --> 00:12:25,410
and those kind of mandy was describing

00:12:22,350 --> 00:12:27,660
its part it's a choice it's the choice

00:12:25,410 --> 00:12:29,519
where most of the work is done for you

00:12:27,660 --> 00:12:31,410
but you've got the other end of that

00:12:29,519 --> 00:12:34,079
choice which is running your own stuff

00:12:31,410 --> 00:12:35,639
on compute engine and hopefully as

00:12:34,079 --> 00:12:37,589
you'll see it's pretty easy to actually

00:12:35,639 --> 00:12:39,360
mix and match how you run different bits

00:12:37,589 --> 00:12:41,129
of your stack how you're on different

00:12:39,360 --> 00:12:45,389
bits your system so if you want to run

00:12:41,129 --> 00:12:47,279
HH vm and your own builds on the compute

00:12:45,389 --> 00:12:49,079
instances you can do that but on App

00:12:47,279 --> 00:12:51,539
Engine you really need to know about

00:12:49,079 --> 00:12:53,939
three areas i think to understand what

00:12:51,539 --> 00:12:57,720
you will need to change in your PHP code

00:12:53,939 --> 00:12:59,189
to make it run well App Engine

00:12:57,720 --> 00:13:00,160
effectively works a little bit like

00:12:59,189 --> 00:13:02,889
engine X and F

00:13:00,160 --> 00:13:05,350
pm so instead of it being a module

00:13:02,889 --> 00:13:07,209
that's run in a web server if there is a

00:13:05,350 --> 00:13:09,009
web server like engine exits the Google

00:13:07,209 --> 00:13:10,389
front end there's going to take requests

00:13:09,009 --> 00:13:12,790
and it's going to send them across to

00:13:10,389 --> 00:13:15,000
the application server in fpm that would

00:13:12,790 --> 00:13:18,220
be fcgi to the actual fbm instance and

00:13:15,000 --> 00:13:19,720
in App Engine that is App Engine so

00:13:18,220 --> 00:13:21,370
that's where your application is going

00:13:19,720 --> 00:13:22,629
to run it's going to be spun up on an

00:13:21,370 --> 00:13:24,579
app engine instance and you can think

00:13:22,629 --> 00:13:27,040
about almost like a process like if you

00:13:24,579 --> 00:13:29,319
imagine the whole google cloud as one

00:13:27,040 --> 00:13:31,329
machine this is like a process is

00:13:29,319 --> 00:13:34,300
spinning up to handle the request that's

00:13:31,329 --> 00:13:35,889
how an instance is treated so there are

00:13:34,300 --> 00:13:37,300
some things you don't get in the request

00:13:35,889 --> 00:13:39,610
like if you want to set the keeper live

00:13:37,300 --> 00:13:41,399
settings no because you are not the web

00:13:39,610 --> 00:13:43,029
server the web server is not

00:13:41,399 --> 00:13:44,649
communicating you are not communicating

00:13:43,029 --> 00:13:46,810
with the outside world directly you are

00:13:44,649 --> 00:13:48,279
going viral web server so keeper lives

00:13:46,810 --> 00:13:51,339
things like that are handled by the

00:13:48,279 --> 00:13:53,829
request handled by the GFE not by you on

00:13:51,339 --> 00:13:55,420
the other side it does mean you get some

00:13:53,829 --> 00:13:57,129
benefits like you get things like dose

00:13:55,420 --> 00:13:59,379
protection built in for free you can

00:13:57,129 --> 00:14:01,120
easily blacklist IPS and it costs you

00:13:59,379 --> 00:14:03,939
nothing and it means you get additional

00:14:01,120 --> 00:14:06,699
information like geolocation information

00:14:03,939 --> 00:14:08,290
you're going to get the a country-region

00:14:06,699 --> 00:14:09,670
city that kind of information just in

00:14:08,290 --> 00:14:12,040
the request it just turns up in the

00:14:09,670 --> 00:14:13,209
server superglobal on the response it's

00:14:12,040 --> 00:14:15,459
pretty much the same pretty much

00:14:13,209 --> 00:14:17,230
whatever you would expect to be able to

00:14:15,459 --> 00:14:21,279
write back except there are some

00:14:17,230 --> 00:14:23,529
limitations so you can only really do a

00:14:21,279 --> 00:14:25,750
request response model if you want to do

00:14:23,529 --> 00:14:27,430
a kind of react style bring out the

00:14:25,750 --> 00:14:29,019
service and have it handle loads it's

00:14:27,430 --> 00:14:31,240
not a good fit that's not what app

00:14:29,019 --> 00:14:33,550
engines for you can use compute engine

00:14:31,240 --> 00:14:35,910
or anything else if you want that it's

00:14:33,550 --> 00:14:39,160
also got a limitation you can use up to

00:14:35,910 --> 00:14:40,630
32 meg in a response so you can't send

00:14:39,160 --> 00:14:42,279
anything larger than that if you need to

00:14:40,630 --> 00:14:44,170
send files there is a separate cloud

00:14:42,279 --> 00:14:46,300
storage system a block store as you

00:14:44,170 --> 00:14:49,149
might expect that can use send large

00:14:46,300 --> 00:14:50,649
files out but as your response you're

00:14:49,149 --> 00:14:51,970
going to have to limit yourself to 32

00:14:50,649 --> 00:14:54,130
megabytes you're going to have to limit

00:14:51,970 --> 00:14:55,660
yourself to a 30-second respond 60

00:14:54,130 --> 00:14:57,430
seconds sorry response time so you've

00:14:55,660 --> 00:14:59,350
got to execute in that time for most of

00:14:57,430 --> 00:15:01,269
us this is not unusual 60 second

00:14:59,350 --> 00:15:03,100
response time for some of the other

00:15:01,269 --> 00:15:04,750
platforms it's a bit strange your Java

00:15:03,100 --> 00:15:08,110
people sometimes question these kind of

00:15:04,750 --> 00:15:09,850
things we've also got to think about the

00:15:08,110 --> 00:15:10,720
kind of encoding we check out you can't

00:15:09,850 --> 00:15:12,759
do chunk tinker

00:15:10,720 --> 00:15:14,230
you can't do because again we're not

00:15:12,759 --> 00:15:15,699
streaming so we're not going to send out

00:15:14,230 --> 00:15:17,379
part of a response and then some more

00:15:15,699 --> 00:15:18,490
we're sending the whole response to the

00:15:17,379 --> 00:15:19,870
Google front end which may then

00:15:18,490 --> 00:15:22,149
communicate it in different ways to the

00:15:19,870 --> 00:15:24,699
server such as it might automatically

00:15:22,149 --> 00:15:26,980
use speedy if the client can support it

00:15:24,699 --> 00:15:28,930
and you don't have to think about that

00:15:26,980 --> 00:15:31,389
you can optionally turn on things like

00:15:28,930 --> 00:15:33,339
PageSpeed as well and finally you've got

00:15:31,389 --> 00:15:35,980
the the actual execution environment

00:15:33,339 --> 00:15:39,730
this is like what the PHP is running in

00:15:35,980 --> 00:15:41,889
and it is PHP it's see PHP it's not

00:15:39,730 --> 00:15:44,829
running it on the JVM it's not some

00:15:41,889 --> 00:15:47,560
funny version in fact it's a fork of PHP

00:15:44,829 --> 00:15:50,829
5 for 19 at the time of writing and the

00:15:47,560 --> 00:15:53,500
reason it's a fork is because the some

00:15:50,829 --> 00:15:55,300
of the changes needed to run well on App

00:15:53,500 --> 00:15:57,490
Engine had to be made at that lower

00:15:55,300 --> 00:15:59,649
layer and if you want to see what's in

00:15:57,490 --> 00:16:01,360
that fork it is all on github it can't

00:15:59,649 --> 00:16:03,610
quite see that link there but all these

00:16:01,360 --> 00:16:05,649
slides you can get at the end they have

00:16:03,610 --> 00:16:07,120
all the links on but it's on github you

00:16:05,649 --> 00:16:08,319
can go and look at the code you can go

00:16:07,120 --> 00:16:10,689
and look at the changes made there's

00:16:08,319 --> 00:16:12,639
nothing odd in there it's mainly tweaks

00:16:10,689 --> 00:16:15,069
to make it work with the infrastructure

00:16:12,639 --> 00:16:17,649
and as an example when we do URL fetch

00:16:15,069 --> 00:16:19,269
II when you do a file get contents that

00:16:17,649 --> 00:16:21,519
doesn't come straight from your instance

00:16:19,269 --> 00:16:23,559
it goes via our URL fetching service

00:16:21,519 --> 00:16:25,300
which is a lot better for a lot of

00:16:23,559 --> 00:16:27,189
reasons but you don't have to care you

00:16:25,300 --> 00:16:31,000
just go out a new fetcher URL then comes

00:16:27,189 --> 00:16:32,529
back the PHP limitations that will tend

00:16:31,000 --> 00:16:35,050
to get you are the fact that this

00:16:32,529 --> 00:16:36,670
instance it's like a process or maybe

00:16:35,050 --> 00:16:39,339
even more like a thread it can be spun

00:16:36,670 --> 00:16:41,139
up and it can be spun down so you cannot

00:16:39,339 --> 00:16:43,449
rely on things being there and in fact

00:16:41,139 --> 00:16:45,790
the file system is totally read only you

00:16:43,449 --> 00:16:47,259
cannot write to the file system most of

00:16:45,790 --> 00:16:49,589
the time it doesn't matter sessions are

00:16:47,259 --> 00:16:54,370
automatically stored off into memcache

00:16:49,589 --> 00:16:56,230
you can push data that you need into

00:16:54,370 --> 00:16:57,879
memcache you can push it into a Google

00:16:56,230 --> 00:16:59,170
Cloud storage if you need a file system

00:16:57,879 --> 00:17:00,879
right and of course that will be

00:16:59,170 --> 00:17:03,009
applicable across App Engine instances

00:17:00,879 --> 00:17:05,140
but you can't for example write some

00:17:03,009 --> 00:17:07,870
stuff into temp you can't log files

00:17:05,140 --> 00:17:10,240
directly to VAR log that kind of thing

00:17:07,870 --> 00:17:11,439
so in some cases applications need a

00:17:10,240 --> 00:17:17,169
little bit of tweaking for example

00:17:11,439 --> 00:17:18,429
joined ended now what we built and if

00:17:17,169 --> 00:17:19,870
the Wi-Fi is not working you haven't had

00:17:18,429 --> 00:17:21,809
a chance to see roughly what it looks

00:17:19,870 --> 00:17:24,870
like is this we've got three sections

00:17:21,809 --> 00:17:26,850
this little quiz app and well this quiz

00:17:24,870 --> 00:17:29,220
app is based on a real thing it is based

00:17:26,850 --> 00:17:31,129
on the thing the one direction agency

00:17:29,220 --> 00:17:34,970
did and is based on something that was

00:17:31,129 --> 00:17:37,830
scaled very successfully think about

00:17:34,970 --> 00:17:39,299
instances out of your own work wear

00:17:37,830 --> 00:17:41,100
something like this might be applicable

00:17:39,299 --> 00:17:42,840
where you might have built a microsite

00:17:41,100 --> 00:17:44,580
or a campaign site or where you might

00:17:42,840 --> 00:17:47,249
have built a component of something you

00:17:44,580 --> 00:17:48,929
work on because those kind of questions

00:17:47,249 --> 00:17:50,909
that you might come up with about how

00:17:48,929 --> 00:17:52,440
would I do this how would I put this on

00:17:50,909 --> 00:17:54,600
to our pinch those are the things this

00:17:52,440 --> 00:17:56,309
is a great time to ask I'm having Mandy

00:17:54,600 --> 00:17:58,529
here you've got an awful lot of

00:17:56,309 --> 00:18:01,379
knowledge available so if you do start

00:17:58,529 --> 00:18:03,929
thinking I hold on but in my setup I

00:18:01,379 --> 00:18:05,100
would have this problem or please ask

00:18:03,929 --> 00:18:07,110
that and please think about your own

00:18:05,100 --> 00:18:10,139
problems in this but this thing is very

00:18:07,110 --> 00:18:11,429
simple we have a login so you can you're

00:18:10,139 --> 00:18:12,720
answering to go do you login we've got

00:18:11,429 --> 00:18:14,669
to authenticate the user so we know

00:18:12,720 --> 00:18:16,139
who's answering the questions we've got

00:18:14,669 --> 00:18:17,850
a question timer so we get back

00:18:16,139 --> 00:18:20,279
questions we know when the next one is

00:18:17,850 --> 00:18:21,509
and then we're going to show it and then

00:18:20,279 --> 00:18:23,190
when you get a question you have to

00:18:21,509 --> 00:18:25,259
answer it so someone chooses an answer

00:18:23,190 --> 00:18:26,909
and sends them back same thing except

00:18:25,259 --> 00:18:31,110
slightly different topic to the one dia

00:18:26,909 --> 00:18:32,970
and we built that just the same way so

00:18:31,110 --> 00:18:35,340
we had really most of the work in

00:18:32,970 --> 00:18:36,539
JavaScript because then it's more scale

00:18:35,340 --> 00:18:38,820
right we don't have to do a

00:18:36,539 --> 00:18:41,820
request-response round trip we don't

00:18:38,820 --> 00:18:43,919
have to do extra processing on the

00:18:41,820 --> 00:18:45,570
server at all it's faster it's less for

00:18:43,919 --> 00:18:47,580
Christ's great so we do almost

00:18:45,570 --> 00:18:49,830
everything in JavaScript with just a

00:18:47,580 --> 00:18:51,779
little bit of configuration from PHP so

00:18:49,830 --> 00:18:53,129
PHP is outputting some HTML at the start

00:18:51,779 --> 00:18:54,869
and then kind of getting out of the game

00:18:53,129 --> 00:18:57,059
at the front end and then we have a

00:18:54,869 --> 00:18:58,740
bunch of kind of restful services just

00:18:57,059 --> 00:19:01,019
things that you've seen forum post too

00:18:58,740 --> 00:19:02,639
and you get json back it's not even to

00:19:01,019 --> 00:19:04,590
the level of call in air service but it

00:19:02,639 --> 00:19:06,629
means we have this very clear front-end

00:19:04,590 --> 00:19:09,749
back-end delineation now the front end

00:19:06,629 --> 00:19:12,480
is all JavaScript and the back end is a

00:19:09,749 --> 00:19:14,460
little tiny bit of PHP using silex so

00:19:12,480 --> 00:19:16,529
that's using composer that was just

00:19:14,460 --> 00:19:19,139
built exactly as you would and then

00:19:16,529 --> 00:19:21,659
deployed up to App Engine and at the

00:19:19,139 --> 00:19:22,799
bottom we've got a data store now I

00:19:21,659 --> 00:19:24,659
think a lot of us if we were building

00:19:22,799 --> 00:19:27,029
something like this you just build it

00:19:24,659 --> 00:19:28,980
right you just build controller that

00:19:27,029 --> 00:19:30,410
gives you the home directory and our

00:19:28,980 --> 00:19:32,300
control over exposed

00:19:30,410 --> 00:19:33,590
are some functions for you know the

00:19:32,300 --> 00:19:36,080
getting questions getting the user

00:19:33,590 --> 00:19:38,930
sending the answer because it's easy we

00:19:36,080 --> 00:19:41,120
deploy that thing and we're done but

00:19:38,930 --> 00:19:43,460
there are two very clear different

00:19:41,120 --> 00:19:44,870
layers here we have the layer for the

00:19:43,460 --> 00:19:47,120
JavaScript on the front end we have the

00:19:44,870 --> 00:19:48,950
layer for the back end and they don't

00:19:47,120 --> 00:19:50,720
they're not really the same but we treat

00:19:48,950 --> 00:19:53,060
them the same because it's simple to do

00:19:50,720 --> 00:19:54,230
so and one of the great things one of

00:19:53,060 --> 00:19:56,480
the really great features about App

00:19:54,230 --> 00:19:58,550
Engine and this is how I I didn't know

00:19:56,480 --> 00:19:59,840
about last time we did a talk like this

00:19:58,550 --> 00:20:02,180
is something I discovered as we're going

00:19:59,840 --> 00:20:03,920
for it how easy it is to take sections

00:20:02,180 --> 00:20:07,100
of your site sections of your one code

00:20:03,920 --> 00:20:11,120
base and split them off into what App

00:20:07,100 --> 00:20:14,660
Engine calls modules part in the battle

00:20:11,120 --> 00:20:19,550
like an Olympic event anybody notices a

00:20:14,660 --> 00:20:20,990
boar in a walk and also Ian's

00:20:19,550 --> 00:20:22,580
application has a picture of us off in

00:20:20,990 --> 00:20:24,290
it he's very Clara so hopefully you're

00:20:22,580 --> 00:20:27,140
playing the application playing the quiz

00:20:24,290 --> 00:20:28,610
and getting along the cedar sloth there

00:20:27,140 --> 00:20:30,470
are appengine modules that's right a

00:20:28,610 --> 00:20:32,930
little bit on the side appengine modules

00:20:30,470 --> 00:20:34,790
so App Engine anybody who worked about

00:20:32,930 --> 00:20:36,950
engine a couple years ago probably knows

00:20:34,790 --> 00:20:38,780
factories have fun sensitive backends

00:20:36,950 --> 00:20:41,630
and back ends with front engine it's all

00:20:38,780 --> 00:20:42,920
quite complicated so with PHP and with

00:20:41,630 --> 00:20:44,780
all of the other languages we now have

00:20:42,920 --> 00:20:46,400
this feature called modules and that

00:20:44,780 --> 00:20:48,080
allows us to effectively take a very big

00:20:46,400 --> 00:20:51,560
application and patch it up into small

00:20:48,080 --> 00:20:53,840
bits into small modules and modules are

00:20:51,560 --> 00:20:56,090
all pretty much the same apart from site

00:20:53,840 --> 00:20:58,340
we look at our next slide and they can

00:20:56,090 --> 00:21:00,350
run parts of your application this could

00:20:58,340 --> 00:21:02,300
be something you might expose externally

00:21:00,350 --> 00:21:04,460
to users or you might just use

00:21:02,300 --> 00:21:06,680
internally to do internal type stuff

00:21:04,460 --> 00:21:10,490
like backend stuff like long running

00:21:06,680 --> 00:21:12,110
processes and all of these modules being

00:21:10,490 --> 00:21:13,460
the same they all have versions so you

00:21:12,110 --> 00:21:15,650
can have different versions of different

00:21:13,460 --> 00:21:17,060
modules version in an app engine allows

00:21:15,650 --> 00:21:19,220
you to actually deploy multiple versions

00:21:17,060 --> 00:21:20,780
of your application and then do things

00:21:19,220 --> 00:21:23,000
like traffic splitting through a be

00:21:20,780 --> 00:21:25,790
testing across multiple versions which

00:21:23,000 --> 00:21:30,020
is really cool and versions have have

00:21:25,790 --> 00:21:31,280
instances and these instances are have

00:21:30,020 --> 00:21:33,260
some differences will look at that on

00:21:31,280 --> 00:21:35,330
the next slide but these instances can

00:21:33,260 --> 00:21:37,340
also be computing gin remember we looks

00:21:35,330 --> 00:21:40,490
at compute engine earlier Melissa I as

00:21:37,340 --> 00:21:41,020
little pads and these instances can be

00:21:40,490 --> 00:21:43,510
compute

00:21:41,020 --> 00:21:45,670
virtual machines and can run pretty much

00:21:43,510 --> 00:21:47,290
anything you like so you're not kind of

00:21:45,670 --> 00:21:48,820
restricted to the poor languages

00:21:47,290 --> 00:21:51,180
ultimately you'll be able to run

00:21:48,820 --> 00:21:54,130
anything on these backends so these

00:21:51,180 --> 00:21:56,200
managed backends as we call them or VM

00:21:54,130 --> 00:21:57,490
instances or we have lots of different

00:21:56,200 --> 00:21:59,140
names for this product that we're going

00:21:57,490 --> 00:22:02,590
to release it in trusted tester

00:21:59,140 --> 00:22:04,450
currently but it looks really cool the

00:22:02,590 --> 00:22:07,150
property the thing that makes modules

00:22:04,450 --> 00:22:09,790
different is the scaling type and so we

00:22:07,150 --> 00:22:11,650
have freedom skin types we have this

00:22:09,790 --> 00:22:13,690
kind of rail routing sorry browser I

00:22:11,650 --> 00:22:17,100
unreal up with the American you should a

00:22:13,690 --> 00:22:19,750
word this routing tables a dispatching

00:22:17,100 --> 00:22:21,490
to different URLs based on the incoming

00:22:19,750 --> 00:22:24,130
requests means going to sort worry about

00:22:21,490 --> 00:22:26,260
that later but we have free options for

00:22:24,130 --> 00:22:27,700
scaling we have manual scaling manual

00:22:26,260 --> 00:22:29,590
scaling means you basically responsible

00:22:27,700 --> 00:22:31,840
for adding more instances as you need

00:22:29,590 --> 00:22:34,270
them so you might have five instances or

00:22:31,840 --> 00:22:35,800
ten instances basically scaling allows

00:22:34,270 --> 00:22:38,110
you to say well i'm going to have 20

00:22:35,800 --> 00:22:40,630
instances and we'll use some very simple

00:22:38,110 --> 00:22:42,550
algorithms to scale within up to that

00:22:40,630 --> 00:22:43,900
maximum so the traffic increases we

00:22:42,550 --> 00:22:45,760
might have put them in another instance

00:22:43,900 --> 00:22:48,760
but we won't use a very complicated

00:22:45,760 --> 00:22:51,340
algorithm auto scaling is the App Engine

00:22:48,760 --> 00:22:52,750
classic auto scaling and that works are

00:22:51,340 --> 00:22:54,910
very complicated algorithm that works

00:22:52,750 --> 00:22:56,650
extremely well so this is basically just

00:22:54,910 --> 00:23:00,910
a property of modules and kind of

00:22:56,650 --> 00:23:02,260
separates and defines me yeah so we get

00:23:00,910 --> 00:23:03,460
all the modules we can use we just can

00:23:02,260 --> 00:23:05,830
use to one for the front end one for the

00:23:03,460 --> 00:23:08,080
back end and those are going to be both

00:23:05,830 --> 00:23:10,150
App Engine modules you know you can mix

00:23:08,080 --> 00:23:11,890
and match how you need an application

00:23:10,150 --> 00:23:13,360
now if you're thinking of setting up a

00:23:11,890 --> 00:23:15,340
lamp stack or you know an engine X

00:23:13,360 --> 00:23:16,600
tackle whatever you're generally going

00:23:15,340 --> 00:23:20,020
to think about setting up some host

00:23:16,600 --> 00:23:22,180
config on the web server and then I'm

00:23:20,020 --> 00:23:25,090
you know a mod rewrite rules these kind

00:23:22,180 --> 00:23:27,700
of things do your routine from URLs to

00:23:25,090 --> 00:23:29,560
actual controllers and App Engine kind

00:23:27,700 --> 00:23:31,210
of splits that up a little bit a bunch

00:23:29,560 --> 00:23:32,770
of App Engine stuff you set up on App

00:23:31,210 --> 00:23:34,300
Engine or google com and you can go

00:23:32,770 --> 00:23:36,550
there now you can set up a site you can

00:23:34,300 --> 00:23:39,370
see all the many many configuration

00:23:36,550 --> 00:23:41,080
options on the dashboard but that's like

00:23:39,370 --> 00:23:42,640
one place you can find the domain name

00:23:41,080 --> 00:23:44,140
there you're gonna be able to deal with

00:23:42,640 --> 00:23:47,680
certificates and so on there that's like

00:23:44,140 --> 00:23:49,540
the central project and then you've got

00:23:47,680 --> 00:23:51,170
the actual application and that's

00:23:49,540 --> 00:23:53,630
configured in a yamel file

00:23:51,170 --> 00:23:56,060
it should please symphony fans you

00:23:53,630 --> 00:23:58,070
indicate which application is so you

00:23:56,060 --> 00:24:00,920
give it your application ID ours is PHP

00:23:58,070 --> 00:24:03,710
UK quiz and you can then specify the

00:24:00,920 --> 00:24:05,840
version as Mandy said if I have version

00:24:03,710 --> 00:24:08,690
1 and I want to test the version 2 I

00:24:05,840 --> 00:24:11,300
could create update my yamel to say

00:24:08,690 --> 00:24:13,850
version 2 and then I could deploy that

00:24:11,300 --> 00:24:16,010
and have like both running and maybe put

00:24:13,850 --> 00:24:17,210
ten percent of traffic diversion to to

00:24:16,010 --> 00:24:18,950
see if it's breaking things so you can

00:24:17,210 --> 00:24:21,140
do vamps and you can do rollouts and all

00:24:18,950 --> 00:24:22,730
that good dev ops ii stuff you've got

00:24:21,140 --> 00:24:25,220
the actual runtime you're using so we're

00:24:22,730 --> 00:24:27,350
PHP and the API version which is the

00:24:25,220 --> 00:24:29,990
runtime version we're talking to one is

00:24:27,350 --> 00:24:32,120
the only one for PHP and fred safe which

00:24:29,990 --> 00:24:34,010
is don't worry about too much in in this

00:24:32,120 --> 00:24:35,810
case so that's like all app

00:24:34,010 --> 00:24:37,970
configuration and that's just connecting

00:24:35,810 --> 00:24:39,800
the code you're uploading the code

00:24:37,970 --> 00:24:42,350
you're going to deploy to the App Engine

00:24:39,800 --> 00:24:44,440
instance the next bit is this handlers

00:24:42,350 --> 00:24:47,240
section and the handle is section is

00:24:44,440 --> 00:24:49,130
kind of equivalent to your HT access

00:24:47,240 --> 00:24:51,410
right it's kind of according to rewrite

00:24:49,130 --> 00:24:54,230
rules you can't do everything in it that

00:24:51,410 --> 00:24:55,550
you can do with ma be right and you can

00:24:54,230 --> 00:24:56,750
do some things in it that you can't do

00:24:55,550 --> 00:25:00,200
with Madhuri right so they're not quite

00:24:56,750 --> 00:25:01,730
an even match but broadly I think for

00:25:00,200 --> 00:25:03,520
most modern PHP applications you're

00:25:01,730 --> 00:25:06,320
going to have some static content files

00:25:03,520 --> 00:25:08,420
javascript CSS and so on and you're

00:25:06,320 --> 00:25:10,040
going to have a front controller and you

00:25:08,420 --> 00:25:11,510
want to route all your requests to a fun

00:25:10,040 --> 00:25:13,580
controller because it's been up your NBC

00:25:11,510 --> 00:25:15,980
stack and that's what we've got set up

00:25:13,580 --> 00:25:17,900
here we've got a URL static and all our

00:25:15,980 --> 00:25:20,090
static stuff lives under there and we've

00:25:17,900 --> 00:25:21,890
got a rewrite of everything else to

00:25:20,090 --> 00:25:23,810
index dot PHP so that's where our from

00:25:21,890 --> 00:25:26,120
controller lives very straightforward

00:25:23,810 --> 00:25:28,490
the static thing here is a bit more

00:25:26,120 --> 00:25:30,650
clever it's not saying just route it to

00:25:28,490 --> 00:25:33,050
these files if they exist it's also

00:25:30,650 --> 00:25:34,640
saying this content is static you don't

00:25:33,050 --> 00:25:36,710
need to get it from an app engine

00:25:34,640 --> 00:25:38,330
instance you can go and put it on some

00:25:36,710 --> 00:25:40,160
edge cash you can go and put it further

00:25:38,330 --> 00:25:42,910
forward in the network so that

00:25:40,160 --> 00:25:45,260
information is cheaper to serve and is

00:25:42,910 --> 00:25:46,960
faster to serve with an information that

00:25:45,260 --> 00:25:50,180
has to come dynamically which is great

00:25:46,960 --> 00:25:51,950
now in this we also have the back end so

00:25:50,180 --> 00:25:53,750
that app piano was the default you'll

00:25:51,950 --> 00:25:56,060
always have an appt llamo but we're

00:25:53,750 --> 00:26:00,170
going to have a DB Amal as well as a DB

00:25:56,060 --> 00:26:01,550
yamel is our module for our back end so

00:26:00,170 --> 00:26:04,130
this is for the get questions call the

00:26:01,550 --> 00:26:04,940
set answers the get user it looks pretty

00:26:04,130 --> 00:26:06,110
much the same

00:26:04,940 --> 00:26:08,120
you'll see there's the extra line in

00:26:06,110 --> 00:26:09,740
their module module just says this is

00:26:08,120 --> 00:26:11,360
another module in it and we have another

00:26:09,740 --> 00:26:13,670
set of handlers you can see because

00:26:11,360 --> 00:26:15,050
we're using composer the source path is

00:26:13,670 --> 00:26:18,830
is slightly different but all of this is

00:26:15,050 --> 00:26:20,720
11 file system you know we're deploying

00:26:18,830 --> 00:26:23,270
one thing up to do this I've not split

00:26:20,720 --> 00:26:24,890
them up at all that I could and then

00:26:23,270 --> 00:26:26,810
finally we have this dispatch not ya

00:26:24,890 --> 00:26:29,270
know and this is another file that

00:26:26,810 --> 00:26:32,150
allows us to control routine two modules

00:26:29,270 --> 00:26:33,980
now modules can be accessed by defaults

00:26:32,150 --> 00:26:35,570
you can they automatically are going to

00:26:33,980 --> 00:26:37,430
pen the module name and you can append

00:26:35,570 --> 00:26:41,690
the version name and so on so you could

00:26:37,430 --> 00:26:43,460
you can target modules automatically but

00:26:41,690 --> 00:26:45,380
all the time you want to do the routine

00:26:43,460 --> 00:26:47,240
under one domain you want certain chunks

00:26:45,380 --> 00:26:48,560
of URL to go to one module certain

00:26:47,240 --> 00:26:50,330
chunks to go to another so in this case

00:26:48,560 --> 00:26:53,300
we're sending all of the DB request to

00:26:50,330 --> 00:26:56,030
our DB module so it presents as one URL

00:26:53,300 --> 00:26:58,160
it's under one https certificate but

00:26:56,030 --> 00:27:02,110
it's routine two quite different things

00:26:58,160 --> 00:27:05,690
which can be scaled quite differently so

00:27:02,110 --> 00:27:06,650
the application is not complicated have

00:27:05,690 --> 00:27:08,240
you seen it there's a bunch of

00:27:06,650 --> 00:27:11,630
JavaScript but you can see that it's not

00:27:08,240 --> 00:27:13,190
super interesting the back end is a

00:27:11,630 --> 00:27:15,560
silence app and it's taken some calls

00:27:13,190 --> 00:27:18,640
and the only really complicated thing it

00:27:15,560 --> 00:27:21,500
has to do is get a list of questions and

00:27:18,640 --> 00:27:23,930
write back a list of answers and those

00:27:21,500 --> 00:27:25,370
are just database operations so we had

00:27:23,930 --> 00:27:27,530
to decide where do we store the data

00:27:25,370 --> 00:27:30,950
that's the big question of this kind of

00:27:27,530 --> 00:27:32,690
application and that is a slightly

00:27:30,950 --> 00:27:34,520
different decision that was made here

00:27:32,690 --> 00:27:36,320
than we did with joined it joined in we

00:27:34,520 --> 00:27:40,970
used a thing called cloud SQL which is

00:27:36,320 --> 00:27:42,830
MySQL in the cloud with the 1d app they

00:27:40,970 --> 00:27:44,540
didn't want to use something like MySQL

00:27:42,830 --> 00:27:46,370
because they have those two entities

00:27:44,540 --> 00:27:48,230
questions and answers and there's no

00:27:46,370 --> 00:27:51,860
real relation like you might look up all

00:27:48,230 --> 00:27:54,290
answers by question ID but it's you

00:27:51,860 --> 00:27:55,940
don't need set operations for that so

00:27:54,290 --> 00:27:58,100
they wanted to use something slightly

00:27:55,940 --> 00:28:02,240
different and so they chose to use a

00:27:58,100 --> 00:28:03,500
service called cloud datastore ok so a

00:28:02,240 --> 00:28:06,740
lot of you i need this way many good

00:28:03,500 --> 00:28:10,280
ones like okay thank you ok so the cloud

00:28:06,740 --> 00:28:12,170
datastore so first uh we talked about

00:28:10,280 --> 00:28:13,940
white papers we've had several white

00:28:12,170 --> 00:28:16,760
papers at Google over the years one of

00:28:13,940 --> 00:28:18,140
them is gfs Google file system on top of

00:28:16,760 --> 00:28:20,270
Google file system we call built this

00:28:18,140 --> 00:28:22,490
thing called big tail and big tables use

00:28:20,270 --> 00:28:25,130
the storing a lot of they say Google and

00:28:22,490 --> 00:28:28,100
historically it's one of our most used

00:28:25,130 --> 00:28:30,020
data storage systems on top of that we

00:28:28,100 --> 00:28:32,810
built a thing called megastore some of

00:28:30,020 --> 00:28:35,150
the things that BigTable didn't do quite

00:28:32,810 --> 00:28:36,590
well were fixed in mega store and on top

00:28:35,150 --> 00:28:38,180
of that we built a datastore and we

00:28:36,590 --> 00:28:40,970
build up engine around that datastore

00:28:38,180 --> 00:28:44,240
App Engine & datastore have a real tight

00:28:40,970 --> 00:28:47,660
affinity with each other the datastore

00:28:44,240 --> 00:28:50,150
is effectively a managed no SQL stimulus

00:28:47,660 --> 00:28:53,330
database or datastore you want to use

00:28:50,150 --> 00:28:54,830
that word and it's massively scalable it

00:28:53,330 --> 00:28:56,720
scales without you having to do anything

00:28:54,830 --> 00:28:59,300
you don't have to worry about handling

00:28:56,720 --> 00:29:01,780
the scale building it for you so more

00:28:59,300 --> 00:29:04,790
data before I sit the more spread out

00:29:01,780 --> 00:29:06,770
stat data is it's effectively sided

00:29:04,790 --> 00:29:09,410
across multiple systems multiple data

00:29:06,770 --> 00:29:12,200
sensitive it's automatically scales

00:29:09,410 --> 00:29:16,640
dependent or needs effectively it's

00:29:12,200 --> 00:29:18,620
completely object-oriented object-based

00:29:16,640 --> 00:29:21,230
we have entrances the idea of entities

00:29:18,620 --> 00:29:24,110
and entity groups we also have a robust

00:29:21,230 --> 00:29:26,720
query engine the term robust came from a

00:29:24,110 --> 00:29:28,490
marketing side I'm afraid and I couldn't

00:29:26,720 --> 00:29:30,830
quite really work out what's replacing

00:29:28,490 --> 00:29:33,080
them so a robust query engine that does

00:29:30,830 --> 00:29:36,440
sql-like queries it does atomic

00:29:33,080 --> 00:29:38,660
transactions all of that from Java and

00:29:36,440 --> 00:29:40,540
from Python we can access natively from

00:29:38,660 --> 00:29:43,400
within App Engine we have a native API

00:29:40,540 --> 00:29:45,560
from PHP we don't quite have that yet is

00:29:43,400 --> 00:29:48,650
in process hopefully we'll have it at

00:29:45,560 --> 00:29:50,990
some point so for PHP we used to being

00:29:48,650 --> 00:29:52,520
called the cloud datastore this is the

00:29:50,990 --> 00:29:55,070
same thing under the hood but it's an

00:29:52,520 --> 00:29:57,320
API so we can effectively access the

00:29:55,070 --> 00:29:59,090
data store from anywhere so even your

00:29:57,320 --> 00:30:00,560
application data within App Engine but

00:29:59,090 --> 00:30:02,990
from your Python your Java applications

00:30:00,560 --> 00:30:06,650
can be accessed via the Google Cloud

00:30:02,990 --> 00:30:09,950
datastore and that's pretty much it for

00:30:06,650 --> 00:30:14,240
them okay so as many was saying

00:30:09,950 --> 00:30:15,960
datastore in in Python and Java if you

00:30:14,240 --> 00:30:18,060
look at the code to access it's very

00:30:15,960 --> 00:30:19,650
it's very elegant and the code in PHP is

00:30:18,060 --> 00:30:21,750
not an eye so elegant so we'll look at

00:30:19,650 --> 00:30:24,960
it and hopefully isn't you it won't be

00:30:21,750 --> 00:30:27,090
too bad but it's accessed via a restful

00:30:24,960 --> 00:30:31,410
api so there's a few hops you have to go

00:30:27,090 --> 00:30:32,820
through we have the set up a API console

00:30:31,410 --> 00:30:34,350
project this is automatically created

00:30:32,820 --> 00:30:35,820
when you create app engine we've gotta

00:30:34,350 --> 00:30:37,410
turn on the API as you want to use in

00:30:35,820 --> 00:30:39,450
our case we're using the file datastore

00:30:37,410 --> 00:30:41,910
API am using plus which is just to get

00:30:39,450 --> 00:30:43,980
the profile information the user this is

00:30:41,910 --> 00:30:45,600
a place you will find yourself going to

00:30:43,980 --> 00:30:47,340
if you want to use any Google API so

00:30:45,600 --> 00:30:49,740
freely it should be fairly familiar and

00:30:47,340 --> 00:30:52,440
when you do turn it on you get access to

00:30:49,740 --> 00:30:54,120
a nice console so the console will let

00:30:52,440 --> 00:30:55,620
you see what kind of entities are in

00:30:54,120 --> 00:30:57,870
there what the usage is like and you can

00:30:55,620 --> 00:31:00,300
go in and do all the normal create edit

00:30:57,870 --> 00:31:01,740
delete operations on entities directly

00:31:00,300 --> 00:31:03,270
through those which is very very helpful

00:31:01,740 --> 00:31:04,710
while testing which is why I wanted to

00:31:03,270 --> 00:31:06,150
put it in here so you can just poke

00:31:04,710 --> 00:31:09,870
things in and out as you're trying to

00:31:06,150 --> 00:31:11,250
get everything else to work now this is

00:31:09,870 --> 00:31:12,990
really going into the code of how this

00:31:11,250 --> 00:31:14,940
stuff is done I've tried to focus on the

00:31:12,990 --> 00:31:16,710
code that is relevant and the code that

00:31:14,940 --> 00:31:18,780
is related to the scalability part of

00:31:16,710 --> 00:31:22,470
the things that help you actually make

00:31:18,780 --> 00:31:24,660
these calls and then make them fast to

00:31:22,470 --> 00:31:27,450
actually access data store at all we are

00:31:24,660 --> 00:31:30,450
going to use the Google PHP client

00:31:27,450 --> 00:31:32,390
library this is okay it is a 52

00:31:30,450 --> 00:31:34,380
supporting client library so we have

00:31:32,390 --> 00:31:36,690
underscoring names we don't have

00:31:34,380 --> 00:31:38,780
namespaces in it at this point it's on

00:31:36,690 --> 00:31:41,820
github it's on composer so you can just

00:31:38,780 --> 00:31:42,720
include it and it's going to autoload so

00:31:41,820 --> 00:31:46,890
at least you don't have to worry about

00:31:42,720 --> 00:31:50,070
it too much and when we use this we need

00:31:46,890 --> 00:31:52,290
to authenticate ourselves to the Google

00:31:50,070 --> 00:31:53,760
API servers now normally was sighting

00:31:52,290 --> 00:31:55,680
like Oh auth you're going to do an

00:31:53,760 --> 00:31:58,320
exchange you're going to get a code back

00:31:55,680 --> 00:32:01,320
in the token you use that token to say I

00:31:58,320 --> 00:32:03,420
am acting on behalf of this user but in

00:32:01,320 --> 00:32:05,370
this case we're acting on behalf of the

00:32:03,420 --> 00:32:08,370
application we'd say I would like as

00:32:05,370 --> 00:32:10,710
this bit of code to access data that is

00:32:08,370 --> 00:32:12,030
owned by this application so for that we

00:32:10,710 --> 00:32:14,490
use something called a service account

00:32:12,030 --> 00:32:15,930
and all that is is a private public key

00:32:14,490 --> 00:32:18,510
pair you create it through the API

00:32:15,930 --> 00:32:21,330
console you download the private part

00:32:18,510 --> 00:32:23,430
google keeps the public part and you

00:32:21,330 --> 00:32:26,070
sign requests with it so you sign a

00:32:23,430 --> 00:32:28,140
request and say this is from me and i

00:32:26,070 --> 00:32:29,789
would like an access token for the

00:32:28,140 --> 00:32:32,700
datastore API

00:32:29,789 --> 00:32:34,710
and I would also like to have the user

00:32:32,700 --> 00:32:36,840
info email scope and that's just because

00:32:34,710 --> 00:32:39,450
service accounts are identified by email

00:32:36,840 --> 00:32:41,669
so these two things are saying give me

00:32:39,450 --> 00:32:43,440
back an authentication I can use to

00:32:41,669 --> 00:32:44,580
query the data store so once you've done

00:32:43,440 --> 00:32:48,119
that once you don't have to worry about

00:32:44,580 --> 00:32:50,190
it and if again to actually make the

00:32:48,119 --> 00:32:53,580
query we're building up a fairly

00:32:50,190 --> 00:32:55,200
annoying object structure so there are a

00:32:53,580 --> 00:32:56,609
few levels of this but hopefully you can

00:32:55,200 --> 00:32:59,220
kind of see where it's going we have a

00:32:56,609 --> 00:33:01,979
data store request the data store

00:32:59,220 --> 00:33:05,070
requests contains a query the query

00:33:01,979 --> 00:33:07,229
object contains a kind that's like a

00:33:05,070 --> 00:33:09,749
collection in it's like a table in

00:33:07,229 --> 00:33:12,029
sequel it's you know it's the the the

00:33:09,749 --> 00:33:15,419
type of the entity that you're trying to

00:33:12,029 --> 00:33:17,159
retrieve our kind is question we're then

00:33:15,419 --> 00:33:18,450
going to add a filter so saying all of

00:33:17,159 --> 00:33:21,690
the questions we would like to filter

00:33:18,450 --> 00:33:23,279
them by these things a property filter

00:33:21,690 --> 00:33:25,289
so in fact we're going to look for the

00:33:23,279 --> 00:33:26,909
start time property we're looking for

00:33:25,289 --> 00:33:29,639
start times which are greater than or

00:33:26,909 --> 00:33:32,399
equal to this value the value being the

00:33:29,639 --> 00:33:34,619
current time so we're saying give us the

00:33:32,399 --> 00:33:37,080
all questions which are greater than

00:33:34,619 --> 00:33:39,269
this time and then we're going to order

00:33:37,080 --> 00:33:42,599
that so we want them in ascending order

00:33:39,269 --> 00:33:45,389
and we're going to filter it so we just

00:33:42,599 --> 00:33:47,849
take three so we get back the next few

00:33:45,389 --> 00:33:49,769
questions the code as a set is a bit

00:33:47,849 --> 00:33:51,960
verbose we got like few pages over here

00:33:49,769 --> 00:33:53,460
it is one line of Python hopefully we

00:33:51,960 --> 00:33:56,759
will get to the point where we have an

00:33:53,460 --> 00:33:59,759
equivalent API in PHP which is actually

00:33:56,759 --> 00:34:01,889
making the calls / protocol buffers

00:33:59,759 --> 00:34:05,009
actually just how those how it's done in

00:34:01,889 --> 00:34:06,840
those other languages so to make the

00:34:05,009 --> 00:34:08,609
call we need to pass that request we

00:34:06,840 --> 00:34:11,700
built up to the Google client object and

00:34:08,609 --> 00:34:14,129
when we do so we just call run query

00:34:11,700 --> 00:34:16,470
with a data set ID and the data set ID

00:34:14,129 --> 00:34:19,139
generally equals our project name so our

00:34:16,470 --> 00:34:21,540
data set ID is going to be PHP UK quiz

00:34:19,139 --> 00:34:23,040
that's just saying you can have multiple

00:34:21,540 --> 00:34:25,230
of them but the one you get by default

00:34:23,040 --> 00:34:26,879
is going to be PHP UK quiz so in general

00:34:25,230 --> 00:34:28,859
we're going to go and make the call to

00:34:26,879 --> 00:34:32,700
that data set and get back our next

00:34:28,859 --> 00:34:34,169
questions but that's while we query in

00:34:32,700 --> 00:34:36,359
datastore we still have to think about

00:34:34,169 --> 00:34:38,490
things like performance-based always

00:34:36,359 --> 00:34:40,049
quick data store is going to execute

00:34:38,490 --> 00:34:41,579
quickly and it's going to get your data

00:34:40,049 --> 00:34:42,399
back quickly but that doesn't mean we

00:34:41,579 --> 00:34:44,409
want to hit

00:34:42,399 --> 00:34:46,539
every time we also want to think about

00:34:44,409 --> 00:34:47,980
costs when you're playing with this

00:34:46,539 --> 00:34:50,230
you're going to be entirely in the free

00:34:47,980 --> 00:34:52,899
quota so it doesn't matter but if you

00:34:50,230 --> 00:34:55,809
are going to have thousands of teenage

00:34:52,899 --> 00:34:59,260
girls hitting a site you don't want to

00:34:55,809 --> 00:35:01,750
go and retrieve all of that data every

00:34:59,260 --> 00:35:04,210
time because part of the cost structure

00:35:01,750 --> 00:35:05,770
of data store so what you pay for data

00:35:04,210 --> 00:35:07,750
store once you get over the free quota

00:35:05,770 --> 00:35:10,210
is based on reads and writes so if you

00:35:07,750 --> 00:35:12,069
can avoid doing them you should so we

00:35:10,210 --> 00:35:14,349
want to introduce caching and we can do

00:35:12,069 --> 00:35:16,119
cash in in two places very easily and

00:35:14,349 --> 00:35:19,029
very cheaply the first one fairly

00:35:16,119 --> 00:35:20,349
obvious is memcache and memcache

00:35:19,029 --> 00:35:22,890
actually has a couple of different

00:35:20,349 --> 00:35:25,240
options in App Engine right it does

00:35:22,890 --> 00:35:26,859
business lights now will it take that

00:35:25,240 --> 00:35:29,079
you can never okay now I can hand it

00:35:26,859 --> 00:35:31,990
over to you know when we're finished but

00:35:29,079 --> 00:35:34,059
basically a memcache is one of these big

00:35:31,990 --> 00:35:36,010
cloud scale services that we have it's

00:35:34,059 --> 00:35:37,750
available to all of the applications of

00:35:36,010 --> 00:35:39,640
an app engine but it's shared across all

00:35:37,750 --> 00:35:43,270
the applications are about in App Engine

00:35:39,640 --> 00:35:46,869
so the eviction policy will likely mean

00:35:43,270 --> 00:35:49,900
that your data could be evicted from

00:35:46,869 --> 00:35:52,630
memcache by somebody else's data that's

00:35:49,900 --> 00:35:54,339
okay this is perfectly free it may not

00:35:52,630 --> 00:35:56,589
be the best option for you we also have

00:35:54,339 --> 00:35:59,799
an option for dedicated memcache in

00:35:56,589 --> 00:36:02,589
which you can reserve by gigabytes for a

00:35:59,799 --> 00:36:04,210
certain price some memcache of your own

00:36:02,589 --> 00:36:07,210
so effectively you'll have your own

00:36:04,210 --> 00:36:09,369
memcache service available to you that

00:36:07,210 --> 00:36:13,329
way your data will only be a victim from

00:36:09,369 --> 00:36:15,490
them cash buy your own data cool so

00:36:13,329 --> 00:36:17,859
which one you tend to go with is going

00:36:15,490 --> 00:36:20,410
to make sense on price how much you need

00:36:17,859 --> 00:36:22,599
the cash in to happen and that kind of

00:36:20,410 --> 00:36:24,460
thing you can actually go wrong by

00:36:22,599 --> 00:36:26,200
getting a you know getting reserved

00:36:24,460 --> 00:36:27,700
memcache but not getting enough so you

00:36:26,200 --> 00:36:29,890
find you actually turning your own data

00:36:27,700 --> 00:36:31,059
too much in this case we're just going

00:36:29,890 --> 00:36:32,650
to use a free Mon cash which work

00:36:31,059 --> 00:36:34,240
completely fine and way through i was

00:36:32,650 --> 00:36:36,819
testing this did exactly what i expected

00:36:34,240 --> 00:36:38,230
and it works exactly like regular

00:36:36,819 --> 00:36:40,920
memcache we see we are creating a mem

00:36:38,230 --> 00:36:43,960
cached object there is also a memcache

00:36:40,920 --> 00:36:46,119
object type just like in PHP it is the

00:36:43,960 --> 00:36:47,529
same objects as in PHP this is one of

00:36:46,119 --> 00:36:51,940
the core modifications that we're making

00:36:47,529 --> 00:36:53,470
and that the difference is just there's

00:36:51,940 --> 00:36:55,810
no connect we're not connecting to a

00:36:53,470 --> 00:36:57,370
port we're not connecting to an IP it's

00:36:55,810 --> 00:36:58,900
just connected to this kind of cloud

00:36:57,370 --> 00:37:00,400
memcache that's out there so you don't

00:36:58,900 --> 00:37:02,020
have to worry about it and if you do get

00:37:00,400 --> 00:37:04,570
a reserved instance you don't have to a

00:37:02,020 --> 00:37:06,550
reserved space you don't have to pass

00:37:04,570 --> 00:37:08,470
any connection string as well it'll

00:37:06,550 --> 00:37:10,840
automatically use that so there's like

00:37:08,470 --> 00:37:12,430
no configuration required the other

00:37:10,840 --> 00:37:15,010
thing we can do for scalability is

00:37:12,430 --> 00:37:17,080
output cache control headers and these

00:37:15,010 --> 00:37:20,110
are honored so we can output this header

00:37:17,080 --> 00:37:22,900
that says max age 60 seconds and it

00:37:20,110 --> 00:37:25,210
means that the front ends and our edge

00:37:22,900 --> 00:37:27,070
caching network will keep this data and

00:37:25,210 --> 00:37:29,200
will serve it preferentially from there

00:37:27,070 --> 00:37:31,060
up until that point so we can avoid

00:37:29,200 --> 00:37:32,890
those requests even coming into App

00:37:31,060 --> 00:37:34,300
Engine even requiring bouncing out to

00:37:32,890 --> 00:37:36,610
memcache they just get handled at the

00:37:34,300 --> 00:37:39,970
edge now if you use any of these things

00:37:36,610 --> 00:37:42,310
there's consoles inside App Engine or

00:37:39,970 --> 00:37:43,690
google com this memcache viewer is great

00:37:42,310 --> 00:37:45,190
you can see stats and so on but the

00:37:43,690 --> 00:37:47,470
really important part is there's a flush

00:37:45,190 --> 00:37:49,390
button so when you're developing it you

00:37:47,470 --> 00:37:52,210
can flush it and make sure things work

00:37:49,390 --> 00:37:53,710
and the other cool thing is one of the

00:37:52,210 --> 00:37:56,200
dashboards that the mandy showed me the

00:37:53,710 --> 00:37:59,080
other day if you change the chart type

00:37:56,200 --> 00:38:02,050
to request by type per second you can

00:37:59,080 --> 00:38:04,690
see what kinds of usage each of the

00:38:02,050 --> 00:38:06,370
different types of data have had so you

00:38:04,690 --> 00:38:07,900
can see on their dynamic requests that's

00:38:06,370 --> 00:38:10,540
where your App Engine instance is doing

00:38:07,900 --> 00:38:12,280
something static requests are those are

00:38:10,540 --> 00:38:14,710
requests for those static files which

00:38:12,280 --> 00:38:16,240
you identified in your IP Amal and then

00:38:14,710 --> 00:38:17,890
catch the Christ so these are things

00:38:16,240 --> 00:38:19,780
that have been caught by the edge cash

00:38:17,890 --> 00:38:21,910
and you can really see hey is my stuff

00:38:19,780 --> 00:38:25,540
being cash properly am i avoiding having

00:38:21,910 --> 00:38:28,390
to deal with that traffic at all so

00:38:25,540 --> 00:38:30,040
that's reading and reading is pretty

00:38:28,390 --> 00:38:31,600
scalable because reading is inherently

00:38:30,040 --> 00:38:34,270
cacheable if you have data like this

00:38:31,600 --> 00:38:36,520
where that beta is valid for like five

00:38:34,270 --> 00:38:37,840
minutes we can chuck it in a memcache we

00:38:36,520 --> 00:38:39,640
can chuck it in an age cash and it's

00:38:37,840 --> 00:38:41,320
going to work but we also have answers

00:38:39,640 --> 00:38:43,000
and we have to handle the answers as

00:38:41,320 --> 00:38:45,640
they come in but there are still some

00:38:43,000 --> 00:38:48,970
tricks that the 1d app used to make sure

00:38:45,640 --> 00:38:50,110
this was as scalable as possible which

00:38:48,970 --> 00:38:52,420
we'll go we'll go through a few of them

00:38:50,110 --> 00:38:54,550
here the first one and what I've really

00:38:52,420 --> 00:38:56,500
really like is you remember that spiky

00:38:54,550 --> 00:38:58,660
chart that we saw at the start that had

00:38:56,500 --> 00:39:00,820
all the link that was every time the

00:38:58,660 --> 00:39:02,110
question appeared so the questions in

00:39:00,820 --> 00:39:03,430
their version the quiz appeared every

00:39:02,110 --> 00:39:07,210
ten minutes rather than every four

00:39:03,430 --> 00:39:08,860
minutes and at the star the fans would

00:39:07,210 --> 00:39:09,410
see it and they would immediately answer

00:39:08,860 --> 00:39:11,390
it there was

00:39:09,410 --> 00:39:13,010
wait I mean it was like a five seconds

00:39:11,390 --> 00:39:14,330
of question answering and then the rest

00:39:13,010 --> 00:39:16,370
of the ten minutes waiting for the next

00:39:14,330 --> 00:39:17,780
one they knew the answer instantly so

00:39:16,370 --> 00:39:20,060
they're going to just jam on that thing

00:39:17,780 --> 00:39:23,600
so even though you go okay we might get

00:39:20,060 --> 00:39:25,820
n hundred n thousand in whatever people

00:39:23,600 --> 00:39:27,500
answering this spread over ten minutes

00:39:25,820 --> 00:39:28,970
that's fine it wasn't spread over ten

00:39:27,500 --> 00:39:32,600
minutes it was spread over like three

00:39:28,970 --> 00:39:35,300
seconds so to avoid that they introduced

00:39:32,600 --> 00:39:37,130
jitter into the actual post so when the

00:39:35,300 --> 00:39:38,840
post happened rather than just doing a

00:39:37,130 --> 00:39:41,930
bit of Ajax immediately saying here's

00:39:38,840 --> 00:39:44,390
the answer randomly delay that so put

00:39:41,930 --> 00:39:46,400
the actual post in a set timeout give it

00:39:44,390 --> 00:39:49,670
a random time and that just diffuses

00:39:46,400 --> 00:39:52,970
that spike over 10 seconds 30 seconds a

00:39:49,670 --> 00:39:54,920
minute now in some cases those wouldn't

00:39:52,970 --> 00:39:56,390
make it right some users would close the

00:39:54,920 --> 00:39:58,250
browser but if it's this kind of

00:39:56,390 --> 00:40:00,020
information you're not that bothered

00:39:58,250 --> 00:40:02,240
it's better that it stays up it's better

00:40:00,020 --> 00:40:05,300
that you have this smoother load graph

00:40:02,240 --> 00:40:07,040
then it is that every answer definitely

00:40:05,300 --> 00:40:08,270
gets recorded in the database obviously

00:40:07,040 --> 00:40:10,580
that's not going to be true if you're

00:40:08,270 --> 00:40:12,830
doing e-commerce transactions but some

00:40:10,580 --> 00:40:15,170
of these same ideas work diffusing some

00:40:12,830 --> 00:40:16,850
of that load over a wider time span can

00:40:15,170 --> 00:40:20,060
really help give you more predictable

00:40:16,850 --> 00:40:22,940
performance now once the request

00:40:20,060 --> 00:40:24,410
actually makes it to App Engine we don't

00:40:22,940 --> 00:40:26,570
want to hit the data store if we don't

00:40:24,410 --> 00:40:29,390
have to so we can just store a very

00:40:26,570 --> 00:40:31,820
lightweight counter or value in memcache

00:40:29,390 --> 00:40:33,560
saying have we seen this before so we

00:40:31,820 --> 00:40:36,620
write the question ID and the user ID

00:40:33,560 --> 00:40:38,810
into memcache and say I've it's already

00:40:36,620 --> 00:40:40,490
there so we can't add it just fail

00:40:38,810 --> 00:40:42,680
there's no point there's no point we've

00:40:40,490 --> 00:40:45,110
already stored a user for an answer for

00:40:42,680 --> 00:40:47,390
this user so either it's just the double

00:40:45,110 --> 00:40:49,100
send or you know they've got it open in

00:40:47,390 --> 00:40:50,720
multiple windows or whatever we don't

00:40:49,100 --> 00:40:52,220
need to do it again but we also don't

00:40:50,720 --> 00:40:54,470
need to give them a problem so we can

00:40:52,220 --> 00:40:58,250
return a 202 them we can return all is

00:40:54,470 --> 00:41:00,140
ok we can also use this point to

00:40:58,250 --> 00:41:03,140
calculate some lightweight information

00:41:00,140 --> 00:41:06,050
so for example we increment the users

00:41:03,140 --> 00:41:07,700
score in memcache so that if they reload

00:41:06,050 --> 00:41:09,410
the page and they need to update their

00:41:07,700 --> 00:41:10,580
score they get their score again we

00:41:09,410 --> 00:41:12,410
don't have to go to a datastore and

00:41:10,580 --> 00:41:14,090
calculate it we can just grab that out

00:41:12,410 --> 00:41:15,680
of memcache it's mostly going to be

00:41:14,090 --> 00:41:17,540
there and it's mostly going to be fine

00:41:15,680 --> 00:41:20,960
so it's just these things to try and

00:41:17,540 --> 00:41:22,400
make the majority case fast and this is

00:41:20,960 --> 00:41:22,910
a trick that I thought was really good

00:41:22,400 --> 00:41:26,180
it wasn't

00:41:22,910 --> 00:41:27,500
but as an idea I think this is fantastic

00:41:26,180 --> 00:41:29,539
and the fact that you can put this into

00:41:27,500 --> 00:41:31,309
a little campaign app means you can

00:41:29,539 --> 00:41:32,539
really do this kind of thing if you're

00:41:31,309 --> 00:41:34,160
building a bigger more serious

00:41:32,539 --> 00:41:36,470
application and what this is is a

00:41:34,160 --> 00:41:39,470
pressure valve so if you're getting too

00:41:36,470 --> 00:41:40,849
many rights of like there you know no

00:41:39,470 --> 00:41:42,349
matter how scalable a system that can

00:41:40,849 --> 00:41:44,030
always be hot spots and if for whatever

00:41:42,349 --> 00:41:45,530
reason you're hitting a hot spot a lot

00:41:44,030 --> 00:41:47,569
of Rights going into the same cluster

00:41:45,530 --> 00:41:49,809
and you just aren't getting the right

00:41:47,569 --> 00:41:53,210
performance out of it you need to in

00:41:49,809 --> 00:41:55,760
this case they could go and write into

00:41:53,210 --> 00:41:57,920
memcache a certain value and change what

00:41:55,760 --> 00:42:00,289
percentage of requests would actually

00:41:57,920 --> 00:42:02,780
hit the data store so instead of having

00:42:00,289 --> 00:42:05,480
an application perform really slowly or

00:42:02,780 --> 00:42:07,220
instead of having it go down even the

00:42:05,480 --> 00:42:09,319
people running the quiz could just back

00:42:07,220 --> 00:42:10,819
off the right percentage some of the

00:42:09,319 --> 00:42:12,260
users wouldn't have their answers

00:42:10,819 --> 00:42:13,760
written but they would never know and

00:42:12,260 --> 00:42:15,680
everyone else would have a better

00:42:13,760 --> 00:42:17,569
experience so just let them let off

00:42:15,680 --> 00:42:19,039
pressure if need it was needed in the

00:42:17,569 --> 00:42:21,230
end but I think it's a fantastic idea

00:42:19,039 --> 00:42:23,510
and it's super easy to do you just have

00:42:21,230 --> 00:42:25,339
to check for a value in memcache you

00:42:23,510 --> 00:42:27,289
never write that value that would be

00:42:25,339 --> 00:42:29,359
written through an into an interface

00:42:27,289 --> 00:42:31,700
like an app engine or google com if

00:42:29,359 --> 00:42:35,750
there was a genuine problem if you were

00:42:31,700 --> 00:42:37,190
seeing that in the logs so if we've got

00:42:35,750 --> 00:42:39,650
through all that and we are doing a

00:42:37,190 --> 00:42:43,220
right we again use the datastore API

00:42:39,650 --> 00:42:44,960
looks like this we have a transactional

00:42:43,220 --> 00:42:45,980
non-transactional request which

00:42:44,960 --> 00:42:47,450
obviously implies you can do

00:42:45,980 --> 00:42:50,329
transactional ones if you want to batch

00:42:47,450 --> 00:42:52,700
up a bunch changes we have a type

00:42:50,329 --> 00:42:56,270
english case answer type so that's again

00:42:52,700 --> 00:42:59,270
like a collection like a table and we

00:42:56,270 --> 00:43:01,579
have an ID within that we have an entity

00:42:59,270 --> 00:43:03,260
which has a bunch of properties and each

00:43:01,579 --> 00:43:06,950
other properties kind of looks like the

00:43:03,260 --> 00:43:08,839
user ID one there now this data is

00:43:06,950 --> 00:43:10,640
actually typed so you set a string value

00:43:08,839 --> 00:43:12,920
or an integer value or a boolean value

00:43:10,640 --> 00:43:14,240
more float value so you do have to think

00:43:12,920 --> 00:43:16,700
about the type of the data you're

00:43:14,240 --> 00:43:19,069
sending you can also set here a flag

00:43:16,700 --> 00:43:21,440
called indexed and if you do indexed it

00:43:19,069 --> 00:43:24,200
will not only write in to that entity

00:43:21,440 --> 00:43:26,390
store it will also write a pointer into

00:43:24,200 --> 00:43:28,640
an index so that you can do much much

00:43:26,390 --> 00:43:30,079
faster queries on it so in the case of

00:43:28,640 --> 00:43:31,700
the answers we don't really in dec six

00:43:30,079 --> 00:43:34,190
we don't need to do any quick queries on

00:43:31,700 --> 00:43:35,099
it but in terms of the questions we

00:43:34,190 --> 00:43:38,640
actually in debt

00:43:35,099 --> 00:43:41,369
the question ID and the start time

00:43:38,640 --> 00:43:42,900
because we use those finally we put it

00:43:41,369 --> 00:43:44,759
into an upset here so the actual

00:43:42,900 --> 00:43:46,759
mutation we do to the data stories and

00:43:44,759 --> 00:43:49,559
upsets that's an update or an insert if

00:43:46,759 --> 00:43:51,960
we wanted to we could just do an update

00:43:49,559 --> 00:43:53,339
just to an insert delete all those kind

00:43:51,960 --> 00:43:55,319
of things so it's pretty much as you'd

00:43:53,339 --> 00:43:57,269
expect and you notice we can pass an

00:43:55,319 --> 00:43:59,579
array here so if we wanted to send

00:43:57,269 --> 00:44:02,009
multiple changes at once we could batch

00:43:59,579 --> 00:44:03,779
them all up save ourselves a little bit

00:44:02,009 --> 00:44:05,190
of network time all of this stuff when

00:44:03,779 --> 00:44:06,900
it's going to a Google API is actually

00:44:05,190 --> 00:44:09,450
going within Google's network so it's

00:44:06,900 --> 00:44:12,269
pretty fast but less network calls his

00:44:09,450 --> 00:44:14,700
less network calls regardless to

00:44:12,269 --> 00:44:17,190
actually make the call we simply right

00:44:14,700 --> 00:44:19,829
into the datastore client and and we're

00:44:17,190 --> 00:44:21,180
done but we can get an exception things

00:44:19,829 --> 00:44:23,640
can go wrong we could have an

00:44:21,180 --> 00:44:25,079
interruption even if we sent perfectly

00:44:23,640 --> 00:44:26,819
valid stuff there's always a chance of a

00:44:25,079 --> 00:44:28,289
failure and we probably don't want to

00:44:26,819 --> 00:44:30,450
just now put it to the user like this

00:44:28,289 --> 00:44:31,950
like that's not that helpful but we may

00:44:30,450 --> 00:44:33,989
not be able to do anything useful with

00:44:31,950 --> 00:44:36,660
it right then so we might want to think

00:44:33,989 --> 00:44:38,940
about logging and logging is difficult

00:44:36,660 --> 00:44:41,609
if you can't write to a file system if

00:44:38,940 --> 00:44:43,289
we can't go to VAR log and get it we

00:44:41,609 --> 00:44:46,079
need a slightly different approach and

00:44:43,289 --> 00:44:48,779
so the way App Engine handles it is

00:44:46,079 --> 00:44:50,249
syslog anything going towards syslog

00:44:48,779 --> 00:44:53,430
anything that will be going to the sappy

00:44:50,249 --> 00:44:55,739
log is automatically collected and sent

00:44:53,430 --> 00:44:57,779
to a central login repository which you

00:44:55,739 --> 00:44:59,729
can actually access through App Engine

00:44:57,779 --> 00:45:01,589
or google.com and this has a couple of

00:44:59,729 --> 00:45:04,259
decent features I think I think he does

00:45:01,589 --> 00:45:06,749
mmm I need this mm-hmm they're basically

00:45:04,259 --> 00:45:09,180
so log in is quite extensive it's a

00:45:06,749 --> 00:45:11,519
really good interface and we have one

00:45:09,180 --> 00:45:12,869
important feature so how many of you

00:45:11,519 --> 00:45:14,849
have had the frustration experience of

00:45:12,869 --> 00:45:15,839
having to look through a log file for

00:45:14,849 --> 00:45:18,569
something that has happened in different

00:45:15,839 --> 00:45:20,489
time zone and trying to equate the time

00:45:18,569 --> 00:45:21,989
zone or the event with the time zone the

00:45:20,489 --> 00:45:23,729
urine and trying to work out when things

00:45:21,989 --> 00:45:26,069
will happen you can actually change the

00:45:23,729 --> 00:45:28,079
time zone of the log in here up here on

00:45:26,069 --> 00:45:29,309
this option here and to your local

00:45:28,079 --> 00:45:31,739
timezone so you can see everything

00:45:29,309 --> 00:45:32,969
relevant to your time as opposed to the

00:45:31,739 --> 00:45:34,710
time in which it happens for the

00:45:32,969 --> 00:45:37,079
application so that's really powerful

00:45:34,710 --> 00:45:39,479
you can also export data all of the

00:45:37,079 --> 00:45:41,460
login data into bigquery so Google

00:45:39,479 --> 00:45:44,549
bigquery is a sword that allows you to

00:45:41,460 --> 00:45:46,840
run analytics interactive analytics

00:45:44,549 --> 00:45:49,090
effectively across massive data sets

00:45:46,840 --> 00:45:51,010
and it's got an SQL like syntax very

00:45:49,090 --> 00:45:52,750
easy to use but this would effectively

00:45:51,010 --> 00:45:54,730
allow you to import all of your log data

00:45:52,750 --> 00:45:56,650
and it could be a huge amount of log

00:45:54,730 --> 00:45:58,630
data should be something like the one

00:45:56,650 --> 00:46:00,070
direct snap or they haven't seen much

00:45:58,630 --> 00:46:02,770
traffic in such a short period of time

00:46:00,070 --> 00:46:08,380
so you can run bigquery to do analytics

00:46:02,770 --> 00:46:09,630
across that to look what is going on so

00:46:08,380 --> 00:46:11,890
there's only a couple of areas really

00:46:09,630 --> 00:46:14,590
you know left in the app so much of it

00:46:11,890 --> 00:46:16,480
is just writing and reading questions so

00:46:14,590 --> 00:46:17,710
just in case you're wondering syslog

00:46:16,480 --> 00:46:19,240
works but if you plug this into

00:46:17,710 --> 00:46:22,090
monologue or something it would go just

00:46:19,240 --> 00:46:24,190
fine so the first thing is we have sign

00:46:22,090 --> 00:46:26,320
in and if you looked at it you may have

00:46:24,190 --> 00:46:28,240
seen that it's using Google+ sign-in and

00:46:26,320 --> 00:46:29,560
the first thing to be aware of with

00:46:28,240 --> 00:46:32,560
google+ sign-in is it does not

00:46:29,560 --> 00:46:34,000
necessarily require Google+ so in this

00:46:32,560 --> 00:46:35,500
case we're just requiring the scope

00:46:34,000 --> 00:46:38,530
called profile which just means you need

00:46:35,500 --> 00:46:39,970
a google account and the reason we're

00:46:38,530 --> 00:46:42,130
using this is because we can use a

00:46:39,970 --> 00:46:43,750
javascript api and do everything within

00:46:42,130 --> 00:46:45,790
javascript we don't actually have to go

00:46:43,750 --> 00:46:47,260
back and hit the user until the user has

00:46:45,790 --> 00:46:50,260
signed in so we don't have to hit the

00:46:47,260 --> 00:46:53,050
server sorry we define the parameters

00:46:50,260 --> 00:46:54,760
for our sign in in metadata and we

00:46:53,050 --> 00:46:57,460
create a sign-in button just with a tag

00:46:54,760 --> 00:46:59,680
here to make that all go we need to

00:46:57,460 --> 00:47:01,330
include a load of JavaScript which sits

00:46:59,680 --> 00:47:03,460
at the bottom of the page and this will

00:47:01,330 --> 00:47:06,010
automatically as soon as it has executed

00:47:03,460 --> 00:47:08,230
read those configuration meta tags and

00:47:06,010 --> 00:47:11,020
attempt to see if the user has signed in

00:47:08,230 --> 00:47:12,550
and the reason for doing that is we want

00:47:11,020 --> 00:47:14,890
to allow people to move between devices

00:47:12,550 --> 00:47:16,840
so if you're on your desktop and you're

00:47:14,890 --> 00:47:18,850
logged into your Google account and you

00:47:16,840 --> 00:47:20,770
sign in you consent you give it access

00:47:18,850 --> 00:47:22,990
to that profile scope to know who you

00:47:20,770 --> 00:47:25,390
are and then you take your phone out and

00:47:22,990 --> 00:47:27,220
you've got a google account the same

00:47:25,390 --> 00:47:29,560
Google account on your phone you go to

00:47:27,220 --> 00:47:31,450
the site in that case it automatically

00:47:29,560 --> 00:47:32,800
signs you in it doesn't need to prompt

00:47:31,450 --> 00:47:34,810
to you again it doesn't need to show you

00:47:32,800 --> 00:47:36,760
the button so that just made life easier

00:47:34,810 --> 00:47:38,530
for us we didn't have to do so much and

00:47:36,760 --> 00:47:41,470
that exchange could happen on the client

00:47:38,530 --> 00:47:42,550
side but we still need to identify we'd

00:47:41,470 --> 00:47:44,350
still need to do a little bit work on

00:47:42,550 --> 00:47:48,040
the server to identify the user and in

00:47:44,350 --> 00:47:49,990
fact what we do is send back a code from

00:47:48,040 --> 00:47:52,030
the client side to the server there's a

00:47:49,990 --> 00:47:53,230
couple of ways you can do this but the

00:47:52,030 --> 00:47:55,240
distinctions are a little bit technical

00:47:53,230 --> 00:47:57,280
so if you want to know about ID tokens

00:47:55,240 --> 00:47:58,410
and open ID connect which is this close

00:47:57,280 --> 00:48:01,650
to standardization

00:47:58,410 --> 00:48:04,079
come grab me after but this is what we

00:48:01,650 --> 00:48:06,270
actually get back so every time the user

00:48:04,079 --> 00:48:07,950
loads the page we're going to get a call

00:48:06,270 --> 00:48:09,660
back to this either it'll say nope

00:48:07,950 --> 00:48:11,309
they're not signed in or to say yes they

00:48:09,660 --> 00:48:12,869
are signed it so if they then press the

00:48:11,309 --> 00:48:15,329
button will get a further call back

00:48:12,869 --> 00:48:17,220
saying yes they are signed in with that

00:48:15,329 --> 00:48:19,589
callback we get a code which we can send

00:48:17,220 --> 00:48:21,450
to the server and on the server we can

00:48:19,589 --> 00:48:23,789
exchange that for a token we can use to

00:48:21,450 --> 00:48:26,160
call the api and in this case we're

00:48:23,789 --> 00:48:27,960
going to call the Google+ API which can

00:48:26,160 --> 00:48:30,329
be used to retrieve profile data has a

00:48:27,960 --> 00:48:32,640
profile section within it we're looking

00:48:30,329 --> 00:48:35,309
for the profile of the current user me

00:48:32,640 --> 00:48:37,170
and out of that we're just returning a

00:48:35,309 --> 00:48:39,059
hash of information which we're going to

00:48:37,170 --> 00:48:41,520
send back in JSON that's just going to

00:48:39,059 --> 00:48:43,770
be their name it's going to be a obvious

00:48:41,520 --> 00:48:46,260
gated version of the user ID which is

00:48:43,770 --> 00:48:48,660
going to be hashed with a rotating salt

00:48:46,260 --> 00:48:50,099
and it's going to include their City

00:48:48,660 --> 00:48:51,690
which we're getting from the App Engine

00:48:50,099 --> 00:48:55,500
header so this is that automatic

00:48:51,690 --> 00:48:57,539
geolocation and the point is we don't

00:48:55,500 --> 00:49:00,119
put this in a session we're going over

00:48:57,539 --> 00:49:01,619
HTTPS it's secure we can just send it

00:49:00,119 --> 00:49:04,680
back to the client and then we've

00:49:01,619 --> 00:49:06,569
removed state even on a system like App

00:49:04,680 --> 00:49:08,190
Engine even on signing scalable the less

00:49:06,569 --> 00:49:10,049
calls we have to do to anything else

00:49:08,190 --> 00:49:12,420
that better so this way the client can

00:49:10,049 --> 00:49:14,520
send us everything that we need to

00:49:12,420 --> 00:49:17,460
record an answer for them everything

00:49:14,520 --> 00:49:21,210
that we need to handle their

00:49:17,460 --> 00:49:22,619
interactions with our app so the one

00:49:21,210 --> 00:49:25,109
last thing I wanted to mention is that

00:49:22,619 --> 00:49:25,950
there's a lot of random little bits of

00:49:25,109 --> 00:49:27,359
App Engine that aren't necessarily

00:49:25,950 --> 00:49:29,339
obvious things we haven't covered

00:49:27,359 --> 00:49:32,339
tonight things like task queues and so

00:49:29,339 --> 00:49:34,470
on but they all work on that kind of URL

00:49:32,339 --> 00:49:36,270
pattern so what we did use in this app

00:49:34,470 --> 00:49:39,299
which wasn't used in the one direction

00:49:36,270 --> 00:49:41,160
at was a crumb and in our app it

00:49:39,299 --> 00:49:43,619
actually resets so kind of on the hour

00:49:41,160 --> 00:49:44,849
it resets and goes again with slightly

00:49:43,619 --> 00:49:46,770
different questions so there's more

00:49:44,849 --> 00:49:49,799
questions than the 12 that actually get

00:49:46,770 --> 00:49:51,900
displayed and the way we do that is by

00:49:49,799 --> 00:49:53,789
having cron jobs and cron jobs in App

00:49:51,900 --> 00:49:55,799
Engine look like this you have another

00:49:53,789 --> 00:49:58,020
yamel file of course which you deploy

00:49:55,799 --> 00:50:00,779
separately you say what the URL you want

00:49:58,020 --> 00:50:02,579
to call it you say which module you'd

00:50:00,779 --> 00:50:04,109
like it to be in if you'd leave that out

00:50:02,579 --> 00:50:06,180
it will use the default and you give it

00:50:04,109 --> 00:50:08,130
a schedule and you can do quite

00:50:06,180 --> 00:50:09,720
complicated strings it's not the old a

00:50:08,130 --> 00:50:11,310
stroke size to accessories extracts of

00:50:09,720 --> 00:50:13,110
cron it's a little

00:50:11,310 --> 00:50:16,080
more human readable so you can write in

00:50:13,110 --> 00:50:18,000
quite flexible and detailed definitions

00:50:16,080 --> 00:50:19,710
of when you want jobs to run and you can

00:50:18,000 --> 00:50:21,570
say the timezone of it so there's a

00:50:19,710 --> 00:50:24,360
special command to actually push that

00:50:21,570 --> 00:50:26,550
out and that is that allows us to you

00:50:24,360 --> 00:50:28,200
know kick this job off as we need it go

00:50:26,550 --> 00:50:31,110
and be set the database clear things up

00:50:28,200 --> 00:50:33,300
generate new questions so in this case

00:50:31,110 --> 00:50:36,030
you'll notice as well that URL I mean

00:50:33,300 --> 00:50:38,040
anyone could call right but one of the

00:50:36,030 --> 00:50:40,320
advantages of having a google front-end

00:50:38,040 --> 00:50:43,800
between you guys and the actual servers

00:50:40,320 --> 00:50:46,950
is the we can trust if we see the cron

00:50:43,800 --> 00:50:48,840
header in a request that it is coming

00:50:46,950 --> 00:50:50,220
from the cron service if you try and

00:50:48,840 --> 00:50:51,690
spoof that crown header it's going to

00:50:50,220 --> 00:50:53,310
get filtered out before it gets anywhere

00:50:51,690 --> 00:50:56,160
near our application so it's very easy

00:50:53,310 --> 00:50:59,580
to secure that URL just with the simple

00:50:56,160 --> 00:51:01,650
jack so finally we've got the app

00:50:59,580 --> 00:51:03,390
everything's there we've got all the

00:51:01,650 --> 00:51:05,790
database calls we've got the JavaScript

00:51:03,390 --> 00:51:09,600
we need to actually deploy it as you saw

00:51:05,790 --> 00:51:11,100
in the last slide we had a tool that we

00:51:09,600 --> 00:51:12,930
are calling to deploy the crown that

00:51:11,100 --> 00:51:14,670
same tool can be used to do a lot of

00:51:12,930 --> 00:51:16,800
management and configuration of App

00:51:14,670 --> 00:51:19,440
Engine services so in this case we're

00:51:16,800 --> 00:51:21,270
just going to use the app config pi tool

00:51:19,440 --> 00:51:23,280
to push out each of our modules

00:51:21,270 --> 00:51:25,710
individually and it's important to note

00:51:23,280 --> 00:51:27,660
it is individually if you just do at the

00:51:25,710 --> 00:51:29,310
amal your DB module does not get

00:51:27,660 --> 00:51:31,350
deployed you've got to deploy all of

00:51:29,310 --> 00:51:33,420
them and that's because they can be

00:51:31,350 --> 00:51:35,580
deployed individually you can rev these

00:51:33,420 --> 00:51:37,800
up as you need them the other thing

00:51:35,580 --> 00:51:39,630
that's available is get pushed to deploy

00:51:37,800 --> 00:51:41,280
so if you're used to using if you're

00:51:39,630 --> 00:51:42,900
using get already if you're using git

00:51:41,280 --> 00:51:45,720
push to deploy on another service it'll

00:51:42,900 --> 00:51:48,450
work the same way so you just get a git

00:51:45,720 --> 00:51:50,130
repo URL you add it as a remote and when

00:51:48,450 --> 00:51:52,020
you push to it that's going to kick off

00:51:50,130 --> 00:51:53,790
a deploy process that works pretty much

00:51:52,020 --> 00:51:57,600
exactly the same as the tool so you will

00:51:53,790 --> 00:52:00,330
have your new versions deployed so

00:51:57,600 --> 00:52:01,710
that's pretty much what we went through

00:52:00,330 --> 00:52:05,580
in terms of building this little quiz

00:52:01,710 --> 00:52:08,400
and what I wanted to sort of leave you

00:52:05,580 --> 00:52:10,410
with as an idea was thinking about what

00:52:08,400 --> 00:52:12,510
would need to be done to actually deploy

00:52:10,410 --> 00:52:16,140
an application to App Engine in broadly

00:52:12,510 --> 00:52:18,510
it is the same as what you would do

00:52:16,140 --> 00:52:21,270
building any PHP up but when you're done

00:52:18,510 --> 00:52:22,800
think about setting up an appt camel

00:52:21,270 --> 00:52:24,150
configuring those different modules and

00:52:22,800 --> 00:52:26,549
dividing your service

00:52:24,150 --> 00:52:28,950
into those differently scalable elements

00:52:26,549 --> 00:52:32,250
so you can have the right tools and the

00:52:28,950 --> 00:52:34,279
right rules applied to each and think

00:52:32,250 --> 00:52:37,319
about what your data store should be

00:52:34,279 --> 00:52:39,359
cloud SQL is great it works if you need

00:52:37,319 --> 00:52:42,000
relational data you can use it cloud

00:52:39,359 --> 00:52:44,099
datastore is probably easier to scale

00:52:42,000 --> 00:52:46,859
because it's so much flatter and you've

00:52:44,099 --> 00:52:50,010
got of course the cloud storage as well

00:52:46,859 --> 00:52:52,049
for files and so on and then that's

00:52:50,010 --> 00:52:55,230
pretty much it put the configuration

00:52:52,049 --> 00:52:57,210
together and deploy I think I have one

00:52:55,230 --> 00:52:59,010
key takeaway as well so if anybody comes

00:52:57,210 --> 00:53:00,869
you say that we want to build an

00:52:59,010 --> 00:53:02,910
applications in the service probably up

00:53:00,869 --> 00:53:05,339
to a million users over a sudden our

00:53:02,910 --> 00:53:07,140
period and we need to build it in three

00:53:05,339 --> 00:53:09,029
weeks I think happens in is the perfect

00:53:07,140 --> 00:53:11,970
place to build it so I think that's what

00:53:09,029 --> 00:53:15,240
we did for the 1d day application and I

00:53:11,970 --> 00:53:18,270
think in the show you a great example of

00:53:15,240 --> 00:53:19,440
a full PHP application here on the side

00:53:18,270 --> 00:53:21,720
today so I think that's really really

00:53:19,440 --> 00:53:24,089
good so you're going to talk about it

00:53:21,720 --> 00:53:25,980
well yeah we didn't we have a lot of

00:53:24,089 --> 00:53:27,720
links we wanted to put up so we decided

00:53:25,980 --> 00:53:30,029
rather than put them all up on a slide

00:53:27,720 --> 00:53:32,099
especially cuz to the last talked we put

00:53:30,029 --> 00:53:34,049
them on a site so on that quiz URL PHP

00:53:32,099 --> 00:53:37,460
UK quizzed on appspot com if you go to

00:53:34,049 --> 00:53:39,750
their / talk you'll get all of the links

00:53:37,460 --> 00:53:41,760
including the links to the slides for

00:53:39,750 --> 00:53:43,500
this talk the links to the slide on the

00:53:41,760 --> 00:53:45,390
talk what we converted joined in if you

00:53:43,500 --> 00:53:47,549
want to see more about that links to the

00:53:45,390 --> 00:53:49,650
App Engine SDK for PHP so you can just

00:53:47,549 --> 00:53:51,990
download it and it also includes this

00:53:49,650 --> 00:53:54,750
cloud platform starter pack thing yeah

00:53:51,990 --> 00:53:56,339
so we've been giving us away for quite

00:53:54,750 --> 00:53:58,529
some time now so if you want to actually

00:53:56,339 --> 00:53:59,970
kick the tires with App Engine it's free

00:53:58,529 --> 00:54:01,890
to start anyway but if you want to do

00:53:59,970 --> 00:54:03,900
more than just the quotas allow you to

00:54:01,890 --> 00:54:05,490
do you can get one thousand dollars

00:54:03,900 --> 00:54:06,980
worth of credits for App Engine one

00:54:05,490 --> 00:54:09,180
thousand dollars worth of credits for

00:54:06,980 --> 00:54:12,270
computing junel that's other cloud

00:54:09,180 --> 00:54:15,869
services go to this URL is short for me

00:54:12,270 --> 00:54:18,029
RL here and enter the code PHP UK that's

00:54:15,869 --> 00:54:19,529
cool there is a process to go through to

00:54:18,029 --> 00:54:20,940
get all these credits applied for your

00:54:19,529 --> 00:54:23,130
account but it's fairly straightforward

00:54:20,940 --> 00:54:25,619
many many people have done this so far

00:54:23,130 --> 00:54:27,359
and so those all last four years so you

00:54:25,619 --> 00:54:29,700
can really you know try things out and

00:54:27,359 --> 00:54:33,260
experiment with it and that's about it

00:54:29,700 --> 00:54:33,260

YouTube URL: https://www.youtube.com/watch?v=5Ligesk23ys


