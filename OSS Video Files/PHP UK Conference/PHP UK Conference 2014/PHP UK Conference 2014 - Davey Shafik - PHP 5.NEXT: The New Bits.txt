Title: PHP UK Conference 2014 - Davey Shafik - PHP 5.NEXT: The New Bits
Publication date: 2014-03-21
Playlist: PHP UK Conference 2014
Description: 
	PHP 5.5 is has been unleashed into the world; bringing some great new features including generators and coroutines, a finally construct, simple password hashing and other small changes. Now PHP 5.6 on the horizon bringing even more changes, including variadic functions and the splat operator. This talk is aimed at developers who use PHP every day and are looking to start new projects with the latest and greatest, or want to future-proof legacy code.
Captions: 
	00:00:04,640 --> 00:00:10,440
so as i said i am david shafi what does

00:00:08,400 --> 00:00:13,860
that mean so I am a community engineer

00:00:10,440 --> 00:00:16,980
at Engine Yard I am the author of the

00:00:13,860 --> 00:00:19,350
Zen php5 certification study guide PHP

00:00:16,980 --> 00:00:23,699
anthology and PHP master foresight point

00:00:19,350 --> 00:00:26,580
I am a contributor to zend framework one

00:00:23,699 --> 00:00:29,750
and two PHP docs internals little bit

00:00:26,580 --> 00:00:34,230
and lots of lots of other projects and

00:00:29,750 --> 00:00:37,290
I'm active shattuck on twitter before i

00:00:34,230 --> 00:00:39,030
start i wanted to point out that PT

00:00:37,290 --> 00:00:41,100
women is doing a fundraiser for purple

00:00:39,030 --> 00:00:45,840
elephants PHP women org slash elephant

00:00:41,100 --> 00:00:47,670
go and grab one Kickstarter I want to

00:00:45,840 --> 00:00:49,350
apologize for my accent I will switch

00:00:47,670 --> 00:00:50,820
back and forth between I don't know what

00:00:49,350 --> 00:00:54,059
music now my British from my American

00:00:50,820 --> 00:00:56,280
accent so sorry for laughs one more

00:00:54,059 --> 00:00:58,109
thing before I start I am hard of

00:00:56,280 --> 00:01:00,899
hearing this slide did not transition

00:00:58,109 --> 00:01:05,790
right so if you have a question please

00:01:00,899 --> 00:01:07,229
do speak up all right so I run my slides

00:01:05,790 --> 00:01:09,450
a little differently to a lot of other

00:01:07,229 --> 00:01:12,390
speakers so typically i have two slides

00:01:09,450 --> 00:01:13,710
per sort of thing so a title slide like

00:01:12,390 --> 00:01:16,200
this and then behind it i will have

00:01:13,710 --> 00:01:17,580
bullets the i'll skip so if you see me

00:01:16,200 --> 00:01:19,290
skipping slides that's all i'm doing but

00:01:17,580 --> 00:01:21,930
when you download them later they'll be

00:01:19,290 --> 00:01:26,220
available to you and really it's because

00:01:21,930 --> 00:01:28,979
nobody wants subtitles so we're going to

00:01:26,220 --> 00:01:32,640
start with the small stuff so i will

00:01:28,979 --> 00:01:34,140
start by saying that PHP 56 is probably

00:01:32,640 --> 00:01:37,439
the smallest release that we've seen

00:01:34,140 --> 00:01:40,409
since 53 there is not a huge number of

00:01:37,439 --> 00:01:43,530
amazing features but the rest of still

00:01:40,409 --> 00:01:45,149
some cool stuff so I was waiting

00:01:43,530 --> 00:01:46,740
watching the RFC's go through going had

00:01:45,149 --> 00:01:50,070
more stuff I need more content for my

00:01:46,740 --> 00:01:52,799
talk so we've got enough I hope we'll

00:01:50,070 --> 00:01:55,079
start with the t power or the exponent

00:01:52,799 --> 00:01:57,509
operator so T power is the new token

00:01:55,079 --> 00:01:59,790
that was added for that so basically

00:01:57,509 --> 00:02:03,240
this is a double asterisk operator which

00:01:59,790 --> 00:02:06,149
does raising to the power so the left

00:02:03,240 --> 00:02:10,020
side gets raised to the right so for

00:02:06,149 --> 00:02:13,500
example echo to star star 3 star star 2

00:02:10,020 --> 00:02:17,130
is 512 so it's right associate

00:02:13,500 --> 00:02:19,170
him what I've got underneath here I have

00:02:17,130 --> 00:02:20,490
a pointer on this thing here we go what

00:02:19,170 --> 00:02:22,280
I've got underneath is how it actually

00:02:20,490 --> 00:02:25,800
breaks down with the right associative

00:02:22,280 --> 00:02:29,010
stuff it could also equal 64 if it was

00:02:25,800 --> 00:02:32,400
left associative but it's not it's been

00:02:29,010 --> 00:02:37,560
added as right that's very clear to look

00:02:32,400 --> 00:02:39,150
at the operator sits between binary not

00:02:37,560 --> 00:02:42,690
which is the tilde down at the bottom

00:02:39,150 --> 00:02:46,920
and yoona reef minus which is the

00:02:42,690 --> 00:02:51,900
negative on the numbers that's really

00:02:46,920 --> 00:02:54,030
all there is to say about their constant

00:02:51,900 --> 00:02:55,800
scalar expressions and this one's a cool

00:02:54,030 --> 00:02:57,330
one action it was proposed once and got

00:02:55,800 --> 00:03:00,540
knocked down and then proposed again and

00:02:57,330 --> 00:03:03,000
this is what got in basically you can

00:03:00,540 --> 00:03:05,640
now use expressions when defining global

00:03:03,000 --> 00:03:08,640
constants using the Const keyword Co NS

00:03:05,640 --> 00:03:11,370
t or class constants you can also use

00:03:08,640 --> 00:03:13,860
them during defining class properties

00:03:11,370 --> 00:03:16,070
static variables and in function

00:03:13,860 --> 00:03:18,570
arguments this is actually really cool

00:03:16,070 --> 00:03:20,820
so basically the expressions that are

00:03:18,570 --> 00:03:22,290
supported they're all static that's the

00:03:20,820 --> 00:03:24,810
key point to this there's something that

00:03:22,290 --> 00:03:27,660
can be worked out earlier on in the

00:03:24,810 --> 00:03:30,450
process then run time so you can use

00:03:27,660 --> 00:03:32,070
integers integers floats and strings you

00:03:30,450 --> 00:03:34,200
can use a bunch of the magic constants

00:03:32,070 --> 00:03:36,540
and then he adopts a long as you're not

00:03:34,200 --> 00:03:38,580
using constants sorry not using

00:03:36,540 --> 00:03:40,560
variables and now doc which doesn't

00:03:38,580 --> 00:03:45,030
support variables and then you can use

00:03:40,560 --> 00:03:46,380
regular constants and class constants so

00:03:45,030 --> 00:03:50,549
looking at what that actually looks like

00:03:46,380 --> 00:03:54,840
so these are global constants so prior

00:03:50,549 --> 00:03:56,130
to 54 it was 53 they added the Const

00:03:54,840 --> 00:03:58,860
keyword so before that you would use

00:03:56,130 --> 00:04:01,260
define to create global constants you

00:03:58,860 --> 00:04:02,610
can now use the Const keyword and if you

00:04:01,260 --> 00:04:05,640
do that you have the ability to use

00:04:02,610 --> 00:04:08,130
expressions like this um so foo equals

00:04:05,640 --> 00:04:10,320
one plus one prior to 56 that wasn't

00:04:08,130 --> 00:04:12,540
possible it has to be too and of course

00:04:10,320 --> 00:04:13,980
you know that it's too but in some cases

00:04:12,540 --> 00:04:15,150
where you're doing for example on the

00:04:13,980 --> 00:04:16,890
bottom where we're adding multiple

00:04:15,150 --> 00:04:19,680
constants if you've got logic around

00:04:16,890 --> 00:04:21,840
those then you can actually create

00:04:19,680 --> 00:04:24,599
constants kind of on the fly so that's

00:04:21,840 --> 00:04:26,710
global constants clash constants are

00:04:24,599 --> 00:04:30,340
basically the same except they're within

00:04:26,710 --> 00:04:32,650
the scope of a class class properties

00:04:30,340 --> 00:04:36,190
however this one I think is kind of cool

00:04:32,650 --> 00:04:38,110
so used to be that they have to be you

00:04:36,190 --> 00:04:39,789
know a straight string or a number same

00:04:38,110 --> 00:04:42,759
as constants and then or you know a

00:04:39,789 --> 00:04:44,819
static array something like that now you

00:04:42,759 --> 00:04:48,340
can do expressions including for example

00:04:44,819 --> 00:04:51,190
concatenation so this one is actually

00:04:48,340 --> 00:04:53,169
really cool you'll notice I use they'll

00:04:51,190 --> 00:04:56,050
double underscore directory therefore

00:04:53,169 --> 00:05:00,039
the magic constant that one's a nice one

00:04:56,050 --> 00:05:01,750
to be able to do and static variables I

00:05:00,039 --> 00:05:03,430
don't know anyone who uses static does

00:05:01,750 --> 00:05:08,440
anyone use static variables at all for

00:05:03,430 --> 00:05:11,380
anything all rights just me then so

00:05:08,440 --> 00:05:18,580
static variables now support expressions

00:05:11,380 --> 00:05:20,680
and I've missed one what was the last 10

00:05:18,580 --> 00:05:24,720
functional that's a shame especially my

00:05:20,680 --> 00:05:26,590
favorite slide there is so now in your

00:05:24,720 --> 00:05:29,500
argument you can actually have

00:05:26,590 --> 00:05:33,509
expressions to create values so for

00:05:29,500 --> 00:05:36,699
example this last one c equals bar ?

00:05:33,509 --> 00:05:39,340
ternary so if bar is positive then it's

00:05:36,699 --> 00:05:41,080
10 if it's negative it's 100 I would

00:05:39,340 --> 00:05:43,570
never use a constant for that kind of

00:05:41,080 --> 00:05:46,889
thing but it called it could also be you

00:05:43,570 --> 00:05:51,360
know some other static value is whatever

00:05:46,889 --> 00:05:54,039
so this one is really quite powerful

00:05:51,360 --> 00:05:57,490
this just got in a couple of maybe a

00:05:54,039 --> 00:06:00,849
week ago maybe two debug info so this is

00:05:57,490 --> 00:06:05,080
a magic method that was added to control

00:06:00,849 --> 00:06:07,449
the output of VAR dump so taking

00:06:05,080 --> 00:06:10,840
something like this we have a class

00:06:07,449 --> 00:06:12,849
called file with a resource in it which

00:06:10,840 --> 00:06:17,740
is our file pointer to you know f open

00:06:12,849 --> 00:06:19,419
something like that prior to debug info

00:06:17,740 --> 00:06:21,400
being there if you dumped it you just

00:06:19,419 --> 00:06:22,900
get this resource of stream or something

00:06:21,400 --> 00:06:25,240
like that coming out which is kind of

00:06:22,900 --> 00:06:27,250
useless but actually there's a whole

00:06:25,240 --> 00:06:30,280
bunch of metadata that we can retrieve

00:06:27,250 --> 00:06:33,430
that is useful to someone debugging this

00:06:30,280 --> 00:06:36,130
in this this object so by defining this

00:06:33,430 --> 00:06:38,349
debug info but we can do is say if the

00:06:36,130 --> 00:06:40,750
file pointer is true which means it's

00:06:38,349 --> 00:06:43,090
got a value in our case then return

00:06:40,750 --> 00:06:45,550
Stream get metadata just an array or

00:06:43,090 --> 00:06:49,330
just return an empty array so if we

00:06:45,550 --> 00:06:53,710
actually run that now instead of getting

00:06:49,330 --> 00:06:55,000
our VAR dump with the resource the first

00:06:53,710 --> 00:06:58,600
time we do it before we've opened our

00:06:55,000 --> 00:06:59,830
file we get an empty array oh sorry we

00:06:58,600 --> 00:07:01,750
get nothing actually because we've

00:06:59,830 --> 00:07:04,000
returned an empty array or after we've

00:07:01,750 --> 00:07:06,880
opened it we get this wonderful set of

00:07:04,000 --> 00:07:09,580
debug information so you can now pretty

00:07:06,880 --> 00:07:13,740
much do anything in that so if you have

00:07:09,580 --> 00:07:17,080
for example a an ORM that does

00:07:13,740 --> 00:07:19,630
interpolation of variables for prepared

00:07:17,080 --> 00:07:21,850
queries you could when you dub you could

00:07:19,630 --> 00:07:24,580
actually output the finalized query as

00:07:21,850 --> 00:07:28,830
opposed to here's the placeholders and

00:07:24,580 --> 00:07:36,940
the values so debug info is kind of cool

00:07:28,830 --> 00:07:42,790
any questions so far what is the scope

00:07:36,940 --> 00:07:44,979
of debug info how do you mean no it's

00:07:42,790 --> 00:07:46,419
within each class so yeah so it's it's

00:07:44,979 --> 00:07:48,790
like double underscore get double

00:07:46,419 --> 00:07:50,410
underscore set you just define it within

00:07:48,790 --> 00:07:53,290
the class that's going to be or the

00:07:50,410 --> 00:07:56,010
object that would get dumped so this one

00:07:53,290 --> 00:07:57,940
is really boring but also kind of cool

00:07:56,010 --> 00:08:00,850
GMP improvements and operator

00:07:57,940 --> 00:08:03,610
overloading so GMP is an extension for

00:08:00,850 --> 00:08:07,090
doing math that is more accurate than

00:08:03,610 --> 00:08:09,040
standard PHP math it's like bc math and

00:08:07,090 --> 00:08:11,560
so what they've done is it used to be

00:08:09,040 --> 00:08:13,600
resource based and as we just talked

00:08:11,560 --> 00:08:15,669
about dumping resources with VAR dump is

00:08:13,600 --> 00:08:18,070
kind of crap so they've switched to

00:08:15,669 --> 00:08:19,660
alter objects which is sort of a

00:08:18,070 --> 00:08:21,360
backwards compatibility issue but most

00:08:19,660 --> 00:08:23,790
people are not going to see it as one

00:08:21,360 --> 00:08:26,830
one of the big drawbacks of using

00:08:23,790 --> 00:08:29,110
resources is if you cast that to an

00:08:26,830 --> 00:08:32,860
integer it actually returns a valid

00:08:29,110 --> 00:08:34,599
integer which is the resource ID not the

00:08:32,860 --> 00:08:37,089
number that's actually in your GMP

00:08:34,599 --> 00:08:40,360
resource so they've switched it all to

00:08:37,089 --> 00:08:41,950
objects that makes it serializable it

00:08:40,360 --> 00:08:45,520
means you can cast it as I said properly

00:08:41,950 --> 00:08:47,080
and it's far dump a ball what they also

00:08:45,520 --> 00:08:50,170
added though is operator overloading

00:08:47,080 --> 00:08:53,200
which is an internal only feature for

00:08:50,170 --> 00:08:53,769
now I'm hoping someone will I know this

00:08:53,200 --> 00:08:55,660
people show

00:08:53,769 --> 00:08:59,499
heads but I hope it comes to to user

00:08:55,660 --> 00:09:01,480
lamb and basically it allows objects

00:08:59,499 --> 00:09:05,379
internal objects to define the behavior

00:09:01,480 --> 00:09:08,860
when operators are used on multiples of

00:09:05,379 --> 00:09:10,869
that object so basic math operators bit

00:09:08,860 --> 00:09:14,079
shifting concatenation and the boolean

00:09:10,869 --> 00:09:16,299
math operators are all supported what

00:09:14,079 --> 00:09:18,910
that means is is if you take something

00:09:16,299 --> 00:09:20,829
like this which is from some sort of RSA

00:09:18,910 --> 00:09:23,860
implementation or something which looks

00:09:20,829 --> 00:09:25,839
horrible it is terrible to read where

00:09:23,860 --> 00:09:28,420
we're doing like GM p.m. you are for

00:09:25,839 --> 00:09:30,610
multiplications adding whatnot we can

00:09:28,420 --> 00:09:32,649
now turn it into what looks like actual

00:09:30,610 --> 00:09:37,149
math except for the inverts because

00:09:32,649 --> 00:09:40,179
there's no operator for that this works

00:09:37,149 --> 00:09:42,790
really well so if you for example use a

00:09:40,179 --> 00:09:45,790
standard PHP integer and a GMP object

00:09:42,790 --> 00:09:50,559
they'll work correctly to do what you

00:09:45,790 --> 00:09:57,879
need to do but yeah I hope it comes to

00:09:50,559 --> 00:10:00,910
use a line so PHP debug or dbg sappy

00:09:57,879 --> 00:10:05,740
this is a toss-up for my favorite

00:10:00,910 --> 00:10:09,100
feature in 56 so basically it's a new

00:10:05,740 --> 00:10:11,679
server server API safi that sits

00:10:09,100 --> 00:10:15,610
alongside like CLI or CGI FSCJ those

00:10:11,679 --> 00:10:17,679
kind of things and it's a standalone gdb

00:10:15,610 --> 00:10:19,600
like debugger so you just run it from

00:10:17,679 --> 00:10:26,799
the command line and then you can start

00:10:19,600 --> 00:10:28,689
debugging code it's not an extension so

00:10:26,799 --> 00:10:30,189
if you've used XD buggers n debugger it

00:10:28,689 --> 00:10:32,199
doesn't work in the same way it's not

00:10:30,189 --> 00:10:34,029
part of your standard like it's not if

00:10:32,199 --> 00:10:36,249
you're using apache for example it's not

00:10:34,029 --> 00:10:37,889
in that process space it is standalone

00:10:36,249 --> 00:10:40,240
which is really important to understand

00:10:37,889 --> 00:10:42,399
but it is really full featured so you

00:10:40,240 --> 00:10:45,790
can break on files functions methods up

00:10:42,399 --> 00:10:47,619
line addresses you can break on

00:10:45,790 --> 00:10:50,499
expressions or conditions or you can

00:10:47,619 --> 00:10:52,299
break on op codes it does for

00:10:50,499 --> 00:10:54,459
disassembly of code so if you're writing

00:10:52,299 --> 00:10:55,569
an extension that's really helpful or if

00:10:54,459 --> 00:10:56,529
you really want to see what's going on

00:10:55,569 --> 00:10:59,889
or if you want to come to my talk

00:10:56,529 --> 00:11:01,419
tomorrow then that's how you can get

00:10:59,889 --> 00:11:06,939
that information and it also supports

00:11:01,419 --> 00:11:07,420
remote debugging there is a GUI but it's

00:11:06,939 --> 00:11:09,430
really just

00:11:07,420 --> 00:11:18,310
sort of a command line deal written in

00:11:09,430 --> 00:11:24,640
Java yeah that's that's basically what

00:11:18,310 --> 00:11:26,730
is it called PHP PHP DB g 00 it's just

00:11:24,640 --> 00:11:28,810
built its part it's distributed with it

00:11:26,730 --> 00:11:29,950
actually didn't look what it's called

00:11:28,810 --> 00:11:31,660
I've never used it i just use the

00:11:29,950 --> 00:11:34,720
command line I just run the southeast

00:11:31,660 --> 00:11:36,670
raid on the command line there's really

00:11:34,720 --> 00:11:43,420
no benefit to this except that you can

00:11:36,670 --> 00:11:46,660
do the remote stuff with it so import

00:11:43,420 --> 00:11:49,060
namespace functions and constants so

00:11:46,660 --> 00:11:51,400
it's possible to define functions and

00:11:49,060 --> 00:11:52,960
Constance within namespaces but outside

00:11:51,400 --> 00:11:57,190
of that namespace you have to reference

00:11:52,960 --> 00:11:58,960
them using the full qualified name you

00:11:57,190 --> 00:12:02,890
could alias the name space itself to

00:11:58,960 --> 00:12:05,290
shorten that but it was really crap so

00:12:02,890 --> 00:12:07,150
what this does is it adds two new

00:12:05,290 --> 00:12:08,710
keyword sequences so they're not new

00:12:07,150 --> 00:12:11,830
keywords they're just combinations of

00:12:08,710 --> 00:12:13,870
keywords so use function to import

00:12:11,830 --> 00:12:16,480
functions and use const to import

00:12:13,870 --> 00:12:21,640
constants and then you use commas to

00:12:16,480 --> 00:12:24,580
separate multiples so here we have a

00:12:21,640 --> 00:12:28,120
namespace of fubar define our constant

00:12:24,580 --> 00:12:29,770
hello world we're now defining a

00:12:28,120 --> 00:12:31,330
function called str ln which we

00:12:29,770 --> 00:12:32,620
obviously conflict normally if it was in

00:12:31,330 --> 00:12:36,310
the global namespace but we're not so

00:12:32,620 --> 00:12:39,070
that's great now we have an empty

00:12:36,310 --> 00:12:41,350
namespace just to separate this out use

00:12:39,070 --> 00:12:43,000
function foo bar str LMK what that'll do

00:12:41,350 --> 00:12:46,960
is import that function now we can just

00:12:43,000 --> 00:12:48,790
call str LED if we need the regular PHP

00:12:46,960 --> 00:12:50,440
one we're fully quite fully qualify it

00:12:48,790 --> 00:12:54,150
with the backward slash as I'm doing

00:12:50,440 --> 00:12:56,020
inside of the string left at the top

00:12:54,150 --> 00:12:57,450
something that's really important i'm

00:12:56,020 --> 00:12:59,140
going to fall over the back here sorry

00:12:57,450 --> 00:13:01,450
something that's really important to

00:12:59,140 --> 00:13:04,630
understand is you can use function on

00:13:01,450 --> 00:13:07,360
something that doesn't exist and what'll

00:13:04,630 --> 00:13:09,310
happen is rather than full back to

00:13:07,360 --> 00:13:12,760
looking at the global namespace it'll

00:13:09,310 --> 00:13:15,040
just fail with a fatal error so it won't

00:13:12,760 --> 00:13:17,380
fail at the point of the use it'll fail

00:13:15,040 --> 00:13:19,090
at the time of the cool this is actually

00:13:17,380 --> 00:13:20,400
the case with classes as well you can

00:13:19,090 --> 00:13:23,460
use a class that doesn't exist

00:13:20,400 --> 00:13:27,770
it won't use it won't call the

00:13:23,460 --> 00:13:30,360
autoloader until you actually use it so

00:13:27,770 --> 00:13:32,610
but yeah by using news function foo bar

00:13:30,360 --> 00:13:34,680
str Len it's no longer ambiguous so we

00:13:32,610 --> 00:13:37,290
can call str Len without any / behind it

00:13:34,680 --> 00:13:39,000
or the full qualified namespace and then

00:13:37,290 --> 00:13:41,420
we can also use our constant hello world

00:13:39,000 --> 00:13:44,930
because we've imported that as wealth

00:13:41,420 --> 00:13:48,390
it's great for domain-specific languages

00:13:44,930 --> 00:13:51,300
so in this case use function HTML div

00:13:48,390 --> 00:13:54,390
HTML phtml m and now we have this really

00:13:51,300 --> 00:13:56,430
nice short syntax for template thing for

00:13:54,390 --> 00:14:10,470
example this is pulled straight from the

00:13:56,430 --> 00:14:13,230
RSC so I said that PHP debug was kind of

00:14:10,470 --> 00:14:15,270
a toss-up this is the other well this

00:14:13,230 --> 00:14:20,130
and its partner the other features that

00:14:15,270 --> 00:14:23,280
I kind of love from 5-6 so it adds a new

00:14:20,130 --> 00:14:26,910
syntax so very edit functions is a way

00:14:23,280 --> 00:14:29,580
to codify and define functions that

00:14:26,910 --> 00:14:32,760
accept an undetermined number of

00:14:29,580 --> 00:14:35,790
arguments before where I'll get to that

00:14:32,760 --> 00:14:37,830
so the adds a new syntax triple dollar

00:14:35,790 --> 00:14:40,620
variable so when you're defining your

00:14:37,830 --> 00:14:43,080
function the last argument can be this

00:14:40,620 --> 00:14:44,430
style and anything else that you pass

00:14:43,080 --> 00:14:48,750
into that function will end up in an

00:14:44,430 --> 00:14:51,330
array inside of a function so before

00:14:48,750 --> 00:14:52,980
adding this it was possible to do this

00:14:51,330 --> 00:14:55,620
PHP has always supported this for the

00:14:52,980 --> 00:14:59,310
longest time which is you can use funk

00:14:55,620 --> 00:15:00,690
num args and funk get args to grab all

00:14:59,310 --> 00:15:01,950
the arguments that are passed into a

00:15:00,690 --> 00:15:05,040
function whether they've been defined or

00:15:01,950 --> 00:15:08,070
not one thing to understand about that

00:15:05,040 --> 00:15:10,350
though is that it includes the defined

00:15:08,070 --> 00:15:13,770
arguments also so if your function has

00:15:10,350 --> 00:15:16,140
in its signature two arguments you have

00:15:13,770 --> 00:15:21,210
to remove those from the funk get augs

00:15:16,140 --> 00:15:23,760
response this new syntax however is an

00:15:21,210 --> 00:15:25,190
array with just the the variable

00:15:23,760 --> 00:15:27,270
arguments just the ones on the end

00:15:25,190 --> 00:15:29,070
what's nice about this is it gives you

00:15:27,270 --> 00:15:31,830
self documenting code which should

00:15:29,070 --> 00:15:32,910
always be a goal it supports by

00:15:31,830 --> 00:15:34,980
reference so

00:15:32,910 --> 00:15:36,810
so funky args does not support

00:15:34,980 --> 00:15:38,010
references at all but there is a syntax

00:15:36,810 --> 00:15:41,130
that allows you to do references with

00:15:38,010 --> 00:15:43,620
this it allows type hints so you can say

00:15:41,130 --> 00:15:45,930
that everything that comes at certain

00:15:43,620 --> 00:15:47,340
point has to be of a certain type and it

00:15:45,930 --> 00:15:50,250
must be the last argument which is the

00:15:47,340 --> 00:15:53,160
last thing you need to keep in mind so

00:15:50,250 --> 00:15:54,990
what does this look like so we've got

00:15:53,160 --> 00:15:57,210
our function here FN which has one

00:15:54,990 --> 00:16:00,300
required parameter 1 which defaults to

00:15:57,210 --> 00:16:02,190
null and then our triple dot params on

00:16:00,300 --> 00:16:04,760
the end and then we're just vile dumping

00:16:02,190 --> 00:16:06,510
it so if we pass in just one argument

00:16:04,760 --> 00:16:08,160
obviously our second one is going to be

00:16:06,510 --> 00:16:10,350
null just like it always has been the

00:16:08,160 --> 00:16:12,780
third one will be an empty array that

00:16:10,350 --> 00:16:14,640
will obviously evaluate to true start to

00:16:12,780 --> 00:16:16,680
false so if you want to check if you've

00:16:14,640 --> 00:16:18,800
got very addicts as simple you know if

00:16:16,680 --> 00:16:21,750
false that you don't have any arguments

00:16:18,800 --> 00:16:23,940
if we pass in two arguments we still end

00:16:21,750 --> 00:16:29,370
up with our empty ra3 we start filling

00:16:23,940 --> 00:16:31,470
out our array and then from there on for

00:16:29,370 --> 00:16:34,440
references you just put an ampersand

00:16:31,470 --> 00:16:36,570
before now it's important to understand

00:16:34,440 --> 00:16:39,000
that every single argument then is a

00:16:36,570 --> 00:16:42,120
reference this is another example from

00:16:39,000 --> 00:16:44,010
the RFC so I wasn't going to include it

00:16:42,120 --> 00:16:45,150
cuz I'm like this is kind of bulky for a

00:16:44,010 --> 00:16:48,390
slide and stuff it's actually really

00:16:45,150 --> 00:16:50,190
nice code so we have our prepare which

00:16:48,390 --> 00:16:54,240
takes our query and then any number of

00:16:50,190 --> 00:16:56,220
params once it goes into the function we

00:16:54,240 --> 00:16:58,350
for each over it and again we're using

00:16:56,220 --> 00:17:00,060
the emphasis on purim there so we're

00:16:58,350 --> 00:17:03,930
still using references very important

00:17:00,060 --> 00:17:06,270
and then we can bind it so the way bind

00:17:03,930 --> 00:17:09,270
forum works in P do it is create a

00:17:06,270 --> 00:17:10,470
reference type deal so using references

00:17:09,270 --> 00:17:12,810
the whole way through if we make sure

00:17:10,470 --> 00:17:15,360
that we can modify then whatever

00:17:12,810 --> 00:17:16,980
variable was passed in to prepare at the

00:17:15,360 --> 00:17:19,140
scope it was passed in like an see down

00:17:16,980 --> 00:17:21,540
here and it will actually update the

00:17:19,140 --> 00:17:24,780
bound parameter so when we're calling

00:17:21,540 --> 00:17:26,370
this we DB prepare passing name email

00:17:24,780 --> 00:17:28,950
and age as variables those are now

00:17:26,370 --> 00:17:30,540
references and then in our for each for

00:17:28,950 --> 00:17:33,660
using the new lift syntax that would add

00:17:30,540 --> 00:17:36,540
that was added in 55 to define those

00:17:33,660 --> 00:17:38,820
from another from an array so what

00:17:36,540 --> 00:17:41,070
happens is we for each each iteration we

00:17:38,820 --> 00:17:43,020
use the list we define name email and

00:17:41,070 --> 00:17:45,330
age those then because there are

00:17:43,020 --> 00:17:48,419
references barrels to the pram

00:17:45,330 --> 00:17:50,460
and then we can just execute it's

00:17:48,419 --> 00:17:53,220
actually quite elegant but also quite

00:17:50,460 --> 00:17:57,570
hard to follow that I like to so anyways

00:17:53,220 --> 00:18:00,990
references the last part as i said is

00:17:57,570 --> 00:18:03,630
tight painting so in this case we have

00:18:00,990 --> 00:18:07,529
callable so everything must be a valid

00:18:03,630 --> 00:18:09,450
call back in PHP 55 that was added so

00:18:07,529 --> 00:18:11,519
cool of all means it can be a valid

00:18:09,450 --> 00:18:13,440
string which is a function name it can

00:18:11,519 --> 00:18:15,809
be an array which is a class name as a

00:18:13,440 --> 00:18:18,899
string and a method or a object and a

00:18:15,809 --> 00:18:22,639
method it can be a closure or it can be

00:18:18,899 --> 00:18:26,340
a class with a double underscore invoke

00:18:22,639 --> 00:18:29,870
magic method I guess technically it also

00:18:26,340 --> 00:18:31,980
have an invoke static as well but

00:18:29,870 --> 00:18:33,679
basically what that means is is we know

00:18:31,980 --> 00:18:36,149
everything coming into this function

00:18:33,679 --> 00:18:39,210
other than the name is a callable so we

00:18:36,149 --> 00:18:40,590
can use it as a call back immediately an

00:18:39,210 --> 00:18:42,899
hour for each that means we don't have

00:18:40,590 --> 00:18:48,570
to validate every single argument which

00:18:42,899 --> 00:18:51,090
is fantastic so those are cool but we

00:18:48,570 --> 00:18:57,570
also have argument unpack also known as

00:18:51,090 --> 00:19:02,639
splat syntax for this is the same but we

00:18:57,570 --> 00:19:05,789
use it in a different place so argument

00:19:02,639 --> 00:19:07,980
unpacking is the ability to pass an

00:19:05,789 --> 00:19:11,130
array in to a function and have those

00:19:07,980 --> 00:19:13,019
order a light data structure and have

00:19:11,130 --> 00:19:15,169
them unpack two separate arguments so if

00:19:13,019 --> 00:19:17,820
you've ever used cool user func array

00:19:15,169 --> 00:19:19,380
this kind of does the same thing but

00:19:17,820 --> 00:19:22,980
it's not as slow because call user func

00:19:19,380 --> 00:19:25,110
array is slow so it's kind of the

00:19:22,980 --> 00:19:26,580
opposite of very attic functions so it

00:19:25,110 --> 00:19:33,269
unpacks and array as i said or similar

00:19:26,580 --> 00:19:34,950
so it's not a traitor's um yeah I guess

00:19:33,269 --> 00:19:39,899
it's yeah iterators are supported as

00:19:34,950 --> 00:19:41,429
well as other object type deals so yeah

00:19:39,899 --> 00:19:44,880
no more call user func array which as I

00:19:41,429 --> 00:19:47,460
said is slow it's valid for any argument

00:19:44,880 --> 00:19:50,039
list so if you're doing new object to

00:19:47,460 --> 00:19:51,389
anything like that and you have say an

00:19:50,039 --> 00:19:52,590
array of configuration variables you

00:19:51,389 --> 00:19:54,059
don't need to now define those

00:19:52,590 --> 00:19:57,159
separately in the cool you just use this

00:19:54,059 --> 00:19:59,320
triple dot syntax this

00:19:57,159 --> 00:20:03,220
not defined in the function level this

00:19:59,320 --> 00:20:06,299
is when you call the function there's no

00:20:03,220 --> 00:20:08,859
limitations on placement by that I mean

00:20:06,299 --> 00:20:09,999
you can use multiples or you can put it

00:20:08,859 --> 00:20:12,099
at the end or the beginning doesn't

00:20:09,999 --> 00:20:13,359
matter basically a little unpack and

00:20:12,099 --> 00:20:17,349
then everything the followers will just

00:20:13,359 --> 00:20:20,499
follow as an argument so if we look at

00:20:17,349 --> 00:20:22,389
some examples here function tests we've

00:20:20,499 --> 00:20:24,549
got a very attic in there so our

00:20:22,389 --> 00:20:26,169
arguments that come in and then we're

00:20:24,549 --> 00:20:27,879
cooling it with either one two three

00:20:26,169 --> 00:20:30,759
which is standard that of our dump is an

00:20:27,879 --> 00:20:33,580
array in our uggs or we can do our new

00:20:30,759 --> 00:20:37,179
splat operator passes an array or an

00:20:33,580 --> 00:20:44,859
array-like object so splat is kind of

00:20:37,179 --> 00:20:48,729
cool as I mentioned you can use it

00:20:44,859 --> 00:20:51,039
multiple times so we've got to slap

00:20:48,729 --> 00:20:52,659
operators like I said it will just

00:20:51,039 --> 00:20:55,029
enumerate the first one then a numerate

00:20:52,659 --> 00:20:56,889
the second one is extra arguments or you

00:20:55,029 --> 00:20:59,799
can combine and do whatever you want so

00:20:56,889 --> 00:21:01,179
they're really the only thing that you

00:20:59,799 --> 00:21:02,710
could run into trouble with is obviously

00:21:01,179 --> 00:21:05,409
if you have a set number of arguments

00:21:02,710 --> 00:21:07,450
into a function and you have more than

00:21:05,409 --> 00:21:09,099
that in your array and you don't realize

00:21:07,450 --> 00:21:11,049
it because you modified it somewhere

00:21:09,099 --> 00:21:12,970
else and then you have an argument that

00:21:11,049 --> 00:21:15,580
you meant to pass in at the end so be a

00:21:12,970 --> 00:21:20,739
little careful with the second syntax so

00:21:15,580 --> 00:21:23,049
the last syntax right before I go any

00:21:20,739 --> 00:21:30,669
further does anyone have any questions

00:21:23,049 --> 00:21:32,590
about those five six features right so

00:21:30,669 --> 00:21:34,690
what next so that basically that is

00:21:32,590 --> 00:21:39,609
everything that's new in five six to

00:21:34,690 --> 00:21:41,559
date five six is currently on alpha 2 so

00:21:39,609 --> 00:21:45,580
hopefully we'll be seeing a release in

00:21:41,559 --> 00:21:46,690
the next while when it's ready but 56

00:21:45,580 --> 00:21:48,340
isn't quite ready yet but it will be

00:21:46,690 --> 00:21:50,799
soon so what next what if that's

00:21:48,340 --> 00:21:55,989
everything in 56 what else is out there

00:21:50,799 --> 00:21:57,929
so I wanted to mention HH vm i think

00:21:55,989 --> 00:22:01,450
that as developers as we're evaluating

00:21:57,929 --> 00:22:02,739
56 or 55 whenever you are evaluating for

00:22:01,450 --> 00:22:04,899
your next version i think you should be

00:22:02,739 --> 00:22:06,970
evaluating HH p.m. as well as a

00:22:04,899 --> 00:22:07,510
potential for where you want to move

00:22:06,970 --> 00:22:10,670
next

00:22:07,510 --> 00:22:12,559
so if you don't know hhv em it's an

00:22:10,670 --> 00:22:17,420
alternative PHP runtime from the folks

00:22:12,559 --> 00:22:19,760
of facebook it's super fast it's close

00:22:17,420 --> 00:22:22,640
to feature parity so you can pretty much

00:22:19,760 --> 00:22:24,620
just run PHP code now in it straight up

00:22:22,640 --> 00:22:26,900
you usually don't hit any issues there

00:22:24,620 --> 00:22:29,510
are a few edge cases but their motto is

00:22:26,900 --> 00:22:31,850
bug for bug so if there's a bug in PHP

00:22:29,510 --> 00:22:33,920
they'll also reproduce that buggin hvm

00:22:31,850 --> 00:22:36,980
intentionally so your code will work the

00:22:33,920 --> 00:22:39,260
same way mostly it's just missing some

00:22:36,980 --> 00:22:40,160
key extensions so the int L extension

00:22:39,260 --> 00:22:42,200
for example is one that they were

00:22:40,160 --> 00:22:43,400
missing that they're working on these

00:22:42,200 --> 00:22:46,010
guys are just they're working an

00:22:43,400 --> 00:22:51,559
incredible pace to add extensions and as

00:22:46,010 --> 00:22:54,520
I said it's just super crazy fast along

00:22:51,559 --> 00:22:56,750
with HH vm there's a thing called hack

00:22:54,520 --> 00:22:58,130
which I possibly shouldn't talk about

00:22:56,750 --> 00:23:02,000
it's basically the worst-kept ND a

00:22:58,130 --> 00:23:03,800
secret in the world I was introduced to

00:23:02,000 --> 00:23:05,300
it last year and they've just now

00:23:03,800 --> 00:23:08,179
started talking about to publicly so

00:23:05,300 --> 00:23:11,240
what I'm saying here is subject to

00:23:08,179 --> 00:23:12,590
hearsay will say so it may not be a

00:23:11,240 --> 00:23:14,000
hundred percent accurate but I'm hoping

00:23:12,590 --> 00:23:16,220
everything here is accurate there just

00:23:14,000 --> 00:23:19,340
may be some stuff missing it is the most

00:23:16,220 --> 00:23:22,790
uncool global name ever so I'm hoping

00:23:19,340 --> 00:23:25,130
that they rename it it's basically a new

00:23:22,790 --> 00:23:26,720
it they call it a fork of PHP so it's

00:23:25,130 --> 00:23:28,370
not really a new language because it

00:23:26,720 --> 00:23:31,820
does sort of look like PHP and it works

00:23:28,370 --> 00:23:33,380
the same way it's how know I'm doing

00:23:31,820 --> 00:23:36,260
like subtitles here but I didn't want to

00:23:33,380 --> 00:23:38,300
put a whole slide it so it is mostly a

00:23:36,260 --> 00:23:40,250
dev tool so basically we've got a really

00:23:38,300 --> 00:23:42,170
cool set of tools that can integrate

00:23:40,250 --> 00:23:44,960
into their own IDE that they're building

00:23:42,170 --> 00:23:48,260
or into your own idea said phpstorm

00:23:44,960 --> 00:23:50,240
which is what i use and it will tell you

00:23:48,260 --> 00:23:51,830
on the fly if you're doing something

00:23:50,240 --> 00:23:53,960
stupid like passing in a variable that's

00:23:51,830 --> 00:23:57,290
an integer into a function that requires

00:23:53,960 --> 00:23:59,900
a string so it predominantly runs as a

00:23:57,290 --> 00:24:01,460
dev tool and it's ignored during runtime

00:23:59,900 --> 00:24:03,440
so by the time that the code actually

00:24:01,460 --> 00:24:07,070
execute all of this information is

00:24:03,440 --> 00:24:10,790
actually thrown out and it runs just as

00:24:07,070 --> 00:24:13,910
the normal PHP does on HH vm it uses the

00:24:10,790 --> 00:24:16,850
? page akes open tag and what i love

00:24:13,910 --> 00:24:20,270
about this is they've had stickers for

00:24:16,850 --> 00:24:22,340
I don't know two years the Open bracket

00:24:20,270 --> 00:24:24,020
question mark hhv mi mites actual

00:24:22,340 --> 00:24:27,800
opening tag and nobody knows about hack

00:24:24,020 --> 00:24:31,100
that's amazing so there's two variants

00:24:27,800 --> 00:24:33,410
to that there's the standard ? h h which

00:24:31,100 --> 00:24:35,810
is the non strict mode what that means

00:24:33,410 --> 00:24:37,970
is that it can coexist with stand PHP

00:24:35,810 --> 00:24:40,150
scripts it can include them and just

00:24:37,970 --> 00:24:43,310
kind of work so you can sort of

00:24:40,150 --> 00:24:44,990
incrementally rewrite in half and then

00:24:43,310 --> 00:24:46,670
they have this slash slash strict

00:24:44,990 --> 00:24:48,560
afterwards which is kind of like you

00:24:46,670 --> 00:24:50,990
strict in JavaScript and other languages

00:24:48,560 --> 00:24:53,630
I think pearl has it as well which means

00:24:50,990 --> 00:24:55,370
that you have to one you have to only

00:24:53,630 --> 00:24:59,300
use hack and to everything has to be

00:24:55,370 --> 00:25:01,850
type hinted so I think most people are

00:24:59,300 --> 00:25:05,720
going to go with the straight HH it

00:25:01,850 --> 00:25:06,950
supports a native XHTML syntax so they

00:25:05,720 --> 00:25:08,000
don't have to be strings or I'll show

00:25:06,950 --> 00:25:10,130
you that but it's kind of hard to

00:25:08,000 --> 00:25:11,960
describe and it also supports easy

00:25:10,130 --> 00:25:14,840
paralyzation with asynchronous functions

00:25:11,960 --> 00:25:16,610
which is really cool so the guy who was

00:25:14,840 --> 00:25:19,460
on performing talked about how they're

00:25:16,610 --> 00:25:22,040
using nodejs and they haven't looked at

00:25:19,460 --> 00:25:26,330
HH family at this async stuff is really

00:25:22,040 --> 00:25:28,640
cool for that so looking at hack as I

00:25:26,330 --> 00:25:30,140
said it's not really a fork but it kind

00:25:28,640 --> 00:25:32,240
of is like it's not a new language but

00:25:30,140 --> 00:25:34,400
it kind of is so our simple function up

00:25:32,240 --> 00:25:36,590
here we just have a string type int

00:25:34,400 --> 00:25:38,660
which is not available in PHP because

00:25:36,590 --> 00:25:41,240
they won't do it for some reason but

00:25:38,660 --> 00:25:43,070
then we have this array syntax now this

00:25:41,240 --> 00:25:46,880
one here is interesting because there is

00:25:43,070 --> 00:25:48,380
a proposal for something similar in PHP

00:25:46,880 --> 00:25:50,360
and the HH game guys are like we have a

00:25:48,380 --> 00:25:53,510
syntax please use it I'm so you may see

00:25:50,360 --> 00:25:56,270
this one coming 257 i would guess or

00:25:53,510 --> 00:25:58,370
maybe 607 whatever that number is going

00:25:56,270 --> 00:26:00,110
to be so basically we have this array

00:25:58,370 --> 00:26:01,460
and then an int and what that means is

00:26:00,110 --> 00:26:03,350
is it has to be an array of integers

00:26:01,460 --> 00:26:06,500
right so we're being a little more

00:26:03,350 --> 00:26:09,290
specific about our data types there's a

00:26:06,500 --> 00:26:11,870
syntax here this double equals arrow

00:26:09,290 --> 00:26:14,210
thing I've no idea what it is nobody can

00:26:11,870 --> 00:26:16,490
explain it to me and like I've looked at

00:26:14,210 --> 00:26:18,800
it I'm like well I think it's sort of a

00:26:16,490 --> 00:26:23,120
for each shortcut but I'm not sure so no

00:26:18,800 --> 00:26:26,300
idea what that is it also supports what

00:26:23,120 --> 00:26:28,550
are called vectors sets and maps these

00:26:26,300 --> 00:26:30,950
are specialized array types that do very

00:26:28,550 --> 00:26:32,179
special things they have full

00:26:30,950 --> 00:26:34,370
de torreon two interfaces which is

00:26:32,179 --> 00:26:36,740
lovely and then they have frozen and

00:26:34,370 --> 00:26:39,529
mutable variants so if you look down

00:26:36,740 --> 00:26:41,299
here we create a vector using curly

00:26:39,529 --> 00:26:42,860
braces to define our variables are

00:26:41,299 --> 00:26:45,080
values sorry and then we're actually

00:26:42,860 --> 00:26:47,090
using it as an object with add reverse

00:26:45,080 --> 00:26:51,429
and map and all this fun stuff here so

00:26:47,090 --> 00:26:53,539
this is cool it has array access type

00:26:51,429 --> 00:26:55,909
thing so you can use it as a straight

00:26:53,539 --> 00:27:01,760
array as well as its object oriented

00:26:55,909 --> 00:27:05,450
type deal but yeah and then I mentioned

00:27:01,760 --> 00:27:07,130
the the native XHTML type stuff so if

00:27:05,450 --> 00:27:08,480
you look down at the very bottom here

00:27:07,130 --> 00:27:11,980
we've got this echo div and you'll

00:27:08,480 --> 00:27:14,929
notice it's not quoted at all basically

00:27:11,980 --> 00:27:18,019
tags become sort of first level language

00:27:14,929 --> 00:27:20,149
constructs almost and it has to be valid

00:27:18,019 --> 00:27:21,500
so if you screw up your and this is why

00:27:20,149 --> 00:27:23,929
i said as x a system of you scrub your

00:27:21,500 --> 00:27:27,559
xml it actually will cause an error a

00:27:23,929 --> 00:27:29,059
parse error so it's kind of validating

00:27:27,559 --> 00:27:36,350
and making sure that your HTML is valid

00:27:29,059 --> 00:27:40,909
at the language level another cool thing

00:27:36,350 --> 00:27:43,130
that I've seen react PHP so react is an

00:27:40,909 --> 00:27:48,950
event-based a sip hang on before you end

00:27:43,130 --> 00:27:52,130
of any questions on a th vm so react as

00:27:48,950 --> 00:27:53,899
an event-based asynchronous toolkit I'll

00:27:52,130 --> 00:27:55,429
call it it's actually written in PHP

00:27:53,899 --> 00:27:59,210
when it's based on a couple of

00:27:55,429 --> 00:28:02,240
extensions to do the eventing so it uses

00:27:59,210 --> 00:28:04,039
Libby V live event or the stream socket

00:28:02,240 --> 00:28:05,630
selectors kind of a final for Mac so

00:28:04,039 --> 00:28:07,039
even if you can't install the pack

00:28:05,630 --> 00:28:12,610
extensions you can get a lot of the

00:28:07,039 --> 00:28:12,610
benefit of the asynchronous nosov react

00:28:15,130 --> 00:28:23,690
so Phil sturgeon did a blog post about

00:28:20,840 --> 00:28:25,549
three months ago someone did a someone

00:28:23,690 --> 00:28:27,679
else holder who did a blog post about

00:28:25,549 --> 00:28:31,370
how know this so much faster than PHP

00:28:27,679 --> 00:28:33,980
and his example was they were doing

00:28:31,370 --> 00:28:35,990
asynchronous file accesses versus

00:28:33,980 --> 00:28:38,480
synchronous file accesses which is PHP

00:28:35,990 --> 00:28:39,470
and of course asynchronous is faster

00:28:38,480 --> 00:28:42,049
than synchronous when you're doing

00:28:39,470 --> 00:28:44,419
things like blocking operations like

00:28:42,049 --> 00:28:47,629
file i/o so he

00:28:44,419 --> 00:28:50,480
went back and he redid the PHP version

00:28:47,629 --> 00:28:53,269
in react and it actually benchmarked

00:28:50,480 --> 00:28:55,190
faster than nodejs now I don't hold a

00:28:53,269 --> 00:28:57,259
lot of stock in benchmarks but it's

00:28:55,190 --> 00:28:59,149
something to keep in mind if you don't

00:28:57,259 --> 00:29:01,340
know nodejs or you don't want to get a

00:28:59,149 --> 00:29:02,869
JavaScript stack happening react is

00:29:01,340 --> 00:29:06,649
actually a really good way to do a vent

00:29:02,869 --> 00:29:11,299
base asynchronous applications so

00:29:06,649 --> 00:29:14,539
looking at some code basically we're

00:29:11,299 --> 00:29:16,070
going to do a very short HTTP server so

00:29:14,539 --> 00:29:17,239
we have this anonymous function that

00:29:16,070 --> 00:29:19,399
we're going to create this is basically

00:29:17,239 --> 00:29:23,179
our entire application it takes our

00:29:19,399 --> 00:29:27,679
request and a response the response

00:29:23,179 --> 00:29:30,679
should actually be reference and then

00:29:27,679 --> 00:29:32,989
basically it writes out a 200 and a

00:29:30,679 --> 00:29:34,580
content type of text plane and outputs

00:29:32,989 --> 00:29:36,350
hello world so any requests this web

00:29:34,580 --> 00:29:38,809
server is just going to give a 200

00:29:36,350 --> 00:29:42,139
status that is text plain and hello

00:29:38,809 --> 00:29:45,379
world we create our event loop which is

00:29:42,139 --> 00:29:48,889
the main loop within a react application

00:29:45,379 --> 00:29:50,629
we create our socket server and then we

00:29:48,889 --> 00:29:52,820
create an HTTP server which takes both

00:29:50,629 --> 00:29:55,549
the event loop and the socket and then

00:29:52,820 --> 00:29:57,679
basically we turn it on so we say on

00:29:55,549 --> 00:30:01,190
request do this so this is our event

00:29:57,679 --> 00:30:04,220
that we're registering so on request

00:30:01,190 --> 00:30:07,159
cool our closure that could obviously be

00:30:04,220 --> 00:30:08,809
any type of valid call back and then we

00:30:07,159 --> 00:30:10,820
are go out with the servers running and

00:30:08,809 --> 00:30:15,440
then we listen so this listens on port

00:30:10,820 --> 00:30:18,649
8080 any HTTP request to 8080 will end

00:30:15,440 --> 00:30:22,429
up calling our callback and response and

00:30:18,649 --> 00:30:24,919
hello world it has an ax synchronous

00:30:22,429 --> 00:30:28,700
readers client zeromq at stumps appalled

00:30:24,919 --> 00:30:30,139
promises so if you familiar with

00:30:28,700 --> 00:30:33,259
JavaScript promises it's the same

00:30:30,139 --> 00:30:35,869
interface it does partials and then give

00:30:33,259 --> 00:30:36,799
socket which is kind of an amazing cool

00:30:35,869 --> 00:30:41,739
thing where you have real-time

00:30:36,799 --> 00:30:44,779
communications through animated gifts so

00:30:41,739 --> 00:30:46,549
as I said 56 is not the biggest release

00:30:44,779 --> 00:30:48,980
so that's actually everything that I

00:30:46,549 --> 00:30:51,799
have so any feedback or questions I'd

00:30:48,980 --> 00:30:53,750
love to hear them yes oh hang on who's

00:30:51,799 --> 00:31:00,290
got a mic

00:30:53,750 --> 00:31:02,390
I sorry it's about the edge hvm hack

00:31:00,290 --> 00:31:06,590
yeah it's very own google also i forgot

00:31:02,390 --> 00:31:09,590
the website for it so hea he said eight

00:31:06,590 --> 00:31:12,320
atrium hackers on googleable so hack

00:31:09,590 --> 00:31:15,050
itself is unglue ball but HH vm is not

00:31:12,320 --> 00:31:16,400
and the address should be h hv m dot org

00:31:15,050 --> 00:31:23,630
i think i can actually pull it up as a

00:31:16,400 --> 00:31:30,310
good habit in my browser sorry to the AV

00:31:23,630 --> 00:31:34,520
guys so 8 h vm itself is super easy to

00:31:30,310 --> 00:31:36,530
to Google which is just a JDM calm but

00:31:34,520 --> 00:31:39,350
hack itself is not officially released

00:31:36,530 --> 00:31:41,510
it so it's included in HH vm but they

00:31:39,350 --> 00:31:43,570
have not got any documentation they're

00:31:41,510 --> 00:31:46,430
kind of officially denying it

00:31:43,570 --> 00:31:49,550
unofficially not they're basically

00:31:46,430 --> 00:31:52,430
waiting for some manager to say okay

00:31:49,550 --> 00:31:54,920
we're done so hack is not something that

00:31:52,430 --> 00:31:56,150
you can go away and use today and but

00:31:54,920 --> 00:31:59,660
it's certainly something to think about

00:31:56,150 --> 00:32:01,220
for six months maybe and as i said if

00:31:59,660 --> 00:32:04,670
you're evaluating PHP runtimes

00:32:01,220 --> 00:32:09,430
specifically 55 56 h h vm is definitely

00:32:04,670 --> 00:32:09,430
something to look at any other questions

00:32:13,080 --> 00:32:19,620
other any performance increases in

00:32:16,470 --> 00:32:21,480
between 55 and 56 so 54 was

00:32:19,620 --> 00:32:23,370
fantastically fast if I beat the

00:32:21,480 --> 00:32:24,780
question oh thank you so he asked is

00:32:23,370 --> 00:32:27,150
that any performance increases in five

00:32:24,780 --> 00:32:29,270
six short answer no not really but

00:32:27,150 --> 00:32:35,430
there's no performance decreases either

00:32:29,270 --> 00:32:40,080
what versus who's using 53 stuff who's

00:32:35,430 --> 00:32:44,100
using 54 55 anyone that's actually more

00:32:40,080 --> 00:32:46,170
on 55 that's good so 54 was way faster

00:32:44,100 --> 00:32:49,650
than 53 so if you're still using 53

00:32:46,170 --> 00:32:51,870
upgrade for the love of God upgrade 55

00:32:49,650 --> 00:32:54,690
was as fast again I felt than 54 was

00:32:51,870 --> 00:32:56,280
over 53 55 is fantastic 56 does not

00:32:54,690 --> 00:32:58,320
continue that trend but it does not slow

00:32:56,280 --> 00:33:05,910
down either which is a win when you're

00:32:58,320 --> 00:33:11,610
adding features any other questions all

00:33:05,910 --> 00:33:14,790
right oh how far they are we from

00:33:11,610 --> 00:33:17,910
version 6 from okay how far are we from

00:33:14,790 --> 00:33:19,440
version 6 so I am NOT an internal

00:33:17,910 --> 00:33:22,590
developer but I do follow the mailing

00:33:19,440 --> 00:33:24,840
list I personally feel that version 6

00:33:22,590 --> 00:33:26,970
will never happen not that we won't move

00:33:24,840 --> 00:33:29,580
on from the 5 Series but we have a

00:33:26,970 --> 00:33:32,040
problem where a bunch of authors went

00:33:29,580 --> 00:33:33,720
and created PHP six books that obviously

00:33:32,040 --> 00:33:36,990
have nothing to do with whatever PHP 6

00:33:33,720 --> 00:33:38,670
would actually turn out to be so unless

00:33:36,990 --> 00:33:40,710
we can somehow purge those from the

00:33:38,670 --> 00:33:42,720
market I kind of feel like PHP 6 as a

00:33:40,710 --> 00:33:44,160
version number is tainted I'm I've asked

00:33:42,720 --> 00:33:46,470
the HH p.m. guys I'm like a new release

00:33:44,160 --> 00:33:48,270
hhv m6 and then p if we can have seven

00:33:46,470 --> 00:33:50,490
like some weird way they would do that

00:33:48,270 --> 00:33:54,890
but i think honestly will probably do

00:33:50,490 --> 00:33:57,060
seven i say we they will do 7th so

00:33:54,890 --> 00:34:01,170
timeline on that i don't think anyone

00:33:57,060 --> 00:34:02,370
has come up with a any feature that is

00:34:01,170 --> 00:34:05,010
backwards incompatible that is

00:34:02,370 --> 00:34:08,880
compelling enough to go on to a new

00:34:05,010 --> 00:34:12,840
major version so i think HH vm possibly

00:34:08,880 --> 00:34:15,240
would have is really the successor in

00:34:12,840 --> 00:34:20,690
terms of moving away from where we are

00:34:15,240 --> 00:34:20,690
right now there's a question over there

00:34:24,679 --> 00:34:41,220
of how far away are we from PHP 7 when

00:34:33,659 --> 00:34:42,390
it's done Wow anymore I could honestly I

00:34:41,220 --> 00:34:45,870
can't even tell you how far we are away

00:34:42,390 --> 00:34:50,190
from 5-6 so to be fair where we are from

00:34:45,870 --> 00:34:54,620
5-7 well oh all right you ask a question

00:34:50,190 --> 00:34:54,620
of stretchy Oh over there in the back

00:34:55,880 --> 00:34:58,880
run

00:35:02,740 --> 00:35:06,400
usually I get out and listen to people

00:35:04,930 --> 00:35:08,920
so I'm glad I've got runners today I

00:35:06,400 --> 00:35:10,540
just just wondering that it reached a VN

00:35:08,920 --> 00:35:11,890
thing I mean do you have a benchmark how

00:35:10,540 --> 00:35:16,150
much it's going to be quicker than the

00:35:11,890 --> 00:35:18,100
normal p 85.6 so ath vm bench and i

00:35:16,150 --> 00:35:20,050
could give you numbers but i always feel

00:35:18,100 --> 00:35:22,510
like benchmarks very synthetic and kind

00:35:20,050 --> 00:35:25,930
of so there are benchmarks on

00:35:22,510 --> 00:35:28,810
like specific math functions that are

00:35:25,930 --> 00:35:33,430
like 100 times faster but they don't

00:35:28,810 --> 00:35:35,830
matter realistically you are going to

00:35:33,430 --> 00:35:37,869
see at least as much of a performance

00:35:35,830 --> 00:35:41,920
increases like when you turn on a pc for

00:35:37,869 --> 00:35:44,260
standard PHP I have been told by the HH

00:35:41,920 --> 00:35:46,450
p.m. team they're actually implementing

00:35:44,260 --> 00:35:49,119
most of their extensions unless they're

00:35:46,450 --> 00:35:51,820
wrapping like a c library in PHP and

00:35:49,119 --> 00:35:53,260
then they run it through HH vm to give

00:35:51,820 --> 00:35:55,480
them the machine code and then they

00:35:53,260 --> 00:35:57,910
build that into the HH vm binary because

00:35:55,480 --> 00:36:00,130
it's actually faster the code that HH vm

00:35:57,910 --> 00:36:03,580
puts out is faster than them writing C++

00:36:00,130 --> 00:36:06,640
code so i think that's kind of

00:36:03,580 --> 00:36:08,109
compelling but yeah it's stupid crazy

00:36:06,640 --> 00:36:14,020
fast it really depends on what you're

00:36:08,109 --> 00:36:16,270
doing that also there's this html5 for

00:36:14,020 --> 00:36:17,680
like a native support in htn thing I

00:36:16,270 --> 00:36:22,980
mean it's that not against the design

00:36:17,680 --> 00:36:25,810
pattern for the coupling is the dative

00:36:22,980 --> 00:36:27,520
XHTML support against coupling I would

00:36:25,810 --> 00:36:31,450
say not if you're using it in your

00:36:27,520 --> 00:36:32,440
templates so I mean if you have like

00:36:31,450 --> 00:36:35,109
views like you have in zend framework

00:36:32,440 --> 00:36:37,510
type deal which are PHP code then that's

00:36:35,109 --> 00:36:40,119
fine but yeah obviously separation of

00:36:37,510 --> 00:36:41,320
concerns is important I just mentioned

00:36:40,119 --> 00:36:44,800
it cuz it's a feature I don't know if

00:36:41,320 --> 00:36:46,920
it's a good one it's good point anyone

00:36:44,800 --> 00:36:46,920
else

00:36:52,479 --> 00:36:58,249
with HH vm can you just throw any PHP

00:36:56,210 --> 00:37:00,410
framework on it will it okay to fight

00:36:58,249 --> 00:37:01,759
ability issues with a th vm is there any

00:37:00,410 --> 00:37:03,469
framework on it so one of the things

00:37:01,759 --> 00:37:05,809
that the ATM team has been doing for the

00:37:03,469 --> 00:37:08,059
last three or four months is they've

00:37:05,809 --> 00:37:10,400
actually set up a tool to run framework

00:37:08,059 --> 00:37:11,630
test Suites against HH vm with the goal

00:37:10,400 --> 00:37:14,539
of getting one hundred percent of at

00:37:11,630 --> 00:37:16,160
ability at least three frameworks but I

00:37:14,539 --> 00:37:23,719
couldn't tell you which are compatible

00:37:16,160 --> 00:37:27,319
at this point did you say then silence

00:37:23,719 --> 00:37:28,849
and 70 slim silex and symphony to that

00:37:27,319 --> 00:37:34,430
would make sense because I lectures

00:37:28,849 --> 00:37:36,200
based on symphony to it okay so ZF one

00:37:34,430 --> 00:37:38,269
is ninety-seven percent compatible ZF to

00:37:36,200 --> 00:37:40,099
the issue they ran into a first was the

00:37:38,269 --> 00:37:50,299
incl extension which I fix the test for

00:37:40,099 --> 00:37:53,359
that but they haven't died so yeah they

00:37:50,299 --> 00:37:55,339
are really aware of compatibility their

00:37:53,359 --> 00:37:57,259
goal is feature parity and then

00:37:55,339 --> 00:37:59,779
obviously beyond that their own feature

00:37:57,259 --> 00:38:01,400
set they are also working really hard to

00:37:59,779 --> 00:38:03,920
try and bring as much of it back just

00:38:01,400 --> 00:38:06,890
vanilla PHP as possible they kind of

00:38:03,920 --> 00:38:08,630
consider themselves a test bed for new

00:38:06,890 --> 00:38:11,869
syntax is so for example generators that

00:38:08,630 --> 00:38:15,229
were added in 55 and co routines they've

00:38:11,869 --> 00:38:18,380
had that in in ATM since day one well

00:38:15,229 --> 00:38:19,969
yeah this current iteration of HH vm the

00:38:18,380 --> 00:38:21,140
syntax was slightly different they have

00:38:19,969 --> 00:38:23,029
to go back and change it to match

00:38:21,140 --> 00:38:25,160
vanilla but it was a feature that they

00:38:23,029 --> 00:38:28,359
first brought up and that they did

00:38:25,160 --> 00:38:35,509
originally proposed but was knocked down

00:38:28,359 --> 00:38:38,630
anything else okay so say you've got a

00:38:35,509 --> 00:38:40,849
simple web service in any speak up sorry

00:38:38,630 --> 00:38:42,680
so you've got a simple web service yes

00:38:40,849 --> 00:38:44,150
and you want to put that into reactor

00:38:42,680 --> 00:38:46,940
there any major pitfalls you should be

00:38:44,150 --> 00:38:49,849
aware of how easy is it to do that too

00:38:46,940 --> 00:38:51,859
yeah because it to me is a no-brainer it

00:38:49,849 --> 00:38:53,930
is okay so is there any pitfalls to

00:38:51,859 --> 00:38:56,089
moving the simple web service to react

00:38:53,930 --> 00:38:57,979
yes and no asynchronous programming is a

00:38:56,089 --> 00:39:00,289
very different mindset so if you know

00:38:57,979 --> 00:39:00,770
what you're doing then that's fine but

00:39:00,289 --> 00:39:01,850
there is

00:39:00,770 --> 00:39:03,740
Lee a learning curve moving to

00:39:01,850 --> 00:39:06,260
asynchronous stuff I think react would

00:39:03,740 --> 00:39:09,110
be great behind something like an

00:39:06,260 --> 00:39:10,790
angularjs like app that's very client

00:39:09,110 --> 00:39:13,340
heavy that just needs to kind of send

00:39:10,790 --> 00:39:16,790
responses back and from the server as

00:39:13,340 --> 00:39:19,070
quickly as possible reactors is really

00:39:16,790 --> 00:39:21,290
at this point it's like 04 it's not

00:39:19,070 --> 00:39:23,630
necessarily stable but Igor wheedle of

00:39:21,290 --> 00:39:26,750
Vila where we say his name he wrote it

00:39:23,630 --> 00:39:29,090
and I kind of trust his code it is

00:39:26,750 --> 00:39:30,470
written in straight PHP so if you have a

00:39:29,090 --> 00:39:33,380
bug you can fix it it's not a see

00:39:30,470 --> 00:39:34,790
extension that you can't see yeah it's

00:39:33,380 --> 00:39:37,220
definitely something worth exploring and

00:39:34,790 --> 00:39:39,880
again it's it's more about kind of where

00:39:37,220 --> 00:39:44,240
you're headed next like HH p.m. or 56

00:39:39,880 --> 00:39:46,360
than saying react is amazing anything

00:39:44,240 --> 00:39:46,360
else

00:39:54,030 --> 00:39:59,770
regarding agh vm again should we be

00:39:57,549 --> 00:40:02,170
concerned that the future of PHP

00:39:59,770 --> 00:40:04,750
potentially lies with a evil corporation

00:40:02,170 --> 00:40:07,809
like Facebook so should we be concerned

00:40:04,750 --> 00:40:10,900
that Facebook owns a th p.m. I would say

00:40:07,809 --> 00:40:14,530
no because it's open source that that's

00:40:10,900 --> 00:40:16,900
really my thinking face book doesn't

00:40:14,530 --> 00:40:19,559
have a do no evil credo but we know how

00:40:16,900 --> 00:40:21,970
well that works for jeep for google so

00:40:19,559 --> 00:40:23,799
yeah I don't have any concerns about it

00:40:21,970 --> 00:40:25,900
then again i know people personally

00:40:23,799 --> 00:40:29,319
there so that is obviously going to

00:40:25,900 --> 00:40:31,150
change at some point no i don't think

00:40:29,319 --> 00:40:32,559
it's an issue i think being open source

00:40:31,150 --> 00:40:36,250
and they're being very upfront and

00:40:32,559 --> 00:40:37,780
they've this last year they've really

00:40:36,250 --> 00:40:40,059
kind of pushed on the open-source

00:40:37,780 --> 00:40:42,280
aspects of it not only to get

00:40:40,059 --> 00:40:45,640
contributors but also to make sure that

00:40:42,280 --> 00:40:47,500
it is out there they also are they're

00:40:45,640 --> 00:40:49,450
not trying to take over PHP they're not

00:40:47,500 --> 00:40:51,010
trying to replace PHP they want to

00:40:49,450 --> 00:40:53,799
provide an alternative they don't

00:40:51,010 --> 00:40:55,690
necessarily want to be PHP and they're

00:40:53,799 --> 00:40:57,130
very clear about that as well so I don't

00:40:55,690 --> 00:40:58,599
have a problem with it but that's the

00:40:57,130 --> 00:41:06,579
kind of philosophical question you'll

00:40:58,599 --> 00:41:07,690
have to ask yourself anybody else so I

00:41:06,579 --> 00:41:12,660
think I should have done any change i am

00:41:07,690 --> 00:41:16,630
talk that's all right it's a fun subject

00:41:12,660 --> 00:41:18,430
garbage collection in java can be a bit

00:41:16,630 --> 00:41:21,220
of a black art sometimes how does

00:41:18,430 --> 00:41:22,930
garbage collection work with age ish vm

00:41:21,220 --> 00:41:27,809
does it suffer from stop the world

00:41:22,930 --> 00:41:30,940
pauses in the same way as the JVM does I

00:41:27,809 --> 00:41:32,260
don't know 100 was okay is the garbage

00:41:30,940 --> 00:41:34,720
collection HP himself from the same

00:41:32,260 --> 00:41:36,549
problems the JVM does I honestly don't

00:41:34,720 --> 00:41:38,650
know the exact answer it should work

00:41:36,549 --> 00:41:40,480
very similarly to how PHP does which is

00:41:38,650 --> 00:41:42,040
ref counting but I actually no that's

00:41:40,480 --> 00:41:43,329
not quite the case they do they are

00:41:42,040 --> 00:41:48,150
doing something magical there but I

00:41:43,329 --> 00:41:48,150
don't know the answer anything else

00:41:52,460 --> 00:41:56,790
okay so i am giving an internal talk

00:41:54,900 --> 00:41:59,520
tomorrow so come along to that i'm in

00:41:56,790 --> 00:42:00,720
one of the side rooms so i'll hopefully

00:41:59,520 --> 00:42:02,990
see you all there and thank you very

00:42:00,720 --> 00:42:02,990
much

00:42:22,140 --> 00:42:27,970
hello just let you know that lunch will

00:42:25,539 --> 00:42:31,269
be served in 15 minutes down in the main

00:42:27,970 --> 00:42:34,170
hall and we start again at two o'clock

00:42:31,269 --> 00:42:34,170

YouTube URL: https://www.youtube.com/watch?v=zX_U5mymWAg


