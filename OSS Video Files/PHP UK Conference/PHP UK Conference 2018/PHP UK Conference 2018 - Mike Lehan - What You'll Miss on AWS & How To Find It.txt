Title: PHP UK Conference 2018 - Mike Lehan - What You'll Miss on AWS & How To Find It
Publication date: 2018-03-27
Playlist: PHP UK Conference 2018
Description: 
	AWS is exciting & provides a boost to your app's availability, scalability and security. But moving from traditional hosting to the cloud can change how you develop, deploy & manage infrastructure. We can use old & new tools to smooth the migration, getting the power of the cloud without the pain! In the talk we will look over 9 things you'll miss on AWS and how to get them back. We'll cover auto scaling, load balancing, networked file systems, PHP opcache, Lambda functions, databases, logging, & queues - giving you a pathway to AWS operation with minimal changes to your application, keeping the cost down and the productivity high!
Captions: 
	00:00:04,110 --> 00:00:09,389
[Applause]

00:00:07,250 --> 00:00:10,469
great well I said that would be a short

00:00:09,389 --> 00:00:11,610
intro and it was even shorter than I was

00:00:10,469 --> 00:00:13,469
expecting so you've all caught me by

00:00:11,610 --> 00:00:14,700
surprise a little bit yeah

00:00:13,469 --> 00:00:17,160
thanks for coming along this morning and

00:00:14,700 --> 00:00:21,150
to hear about what you'll miss in AWS

00:00:17,160 --> 00:00:32,610
and how to find it the clicker is

00:00:21,150 --> 00:00:34,380
already not working okay there we go

00:00:32,610 --> 00:00:36,809
right so the clicker is now working and

00:00:34,380 --> 00:00:39,629
we can continue and my name is Mike I'm

00:00:36,809 --> 00:00:41,670
a software engineer and CTO at company

00:00:39,629 --> 00:00:45,180
called shoe rents and check us out if

00:00:41,670 --> 00:00:48,480
you're interested in working for us I'm

00:00:45,180 --> 00:00:49,590
also a skydiver and a northerner so if

00:00:48,480 --> 00:00:51,000
you can't understand anything I say

00:00:49,590 --> 00:00:52,980
coming up some clarifications afterwards

00:00:51,000 --> 00:00:55,230
and you can follow me on twitter at m1

00:00:52,980 --> 00:00:56,760
ke and we've got a joined in link there

00:00:55,230 --> 00:00:58,890
I'll put that up at the end of the talk

00:00:56,760 --> 00:01:00,570
again if you're interested and give you

00:00:58,890 --> 00:01:02,629
some feedback if you like me tell me if

00:01:00,570 --> 00:01:05,220
you don't like me so up to you really

00:01:02,629 --> 00:01:07,920
so cloud is gonna change how we work

00:01:05,220 --> 00:01:09,270
it's really cool it's cool enough that a

00:01:07,920 --> 00:01:10,140
lot of you have come along to see a guy

00:01:09,270 --> 00:01:12,420
you've never heard of before

00:01:10,140 --> 00:01:14,340
talk about it this morning it's cool

00:01:12,420 --> 00:01:16,619
that even people with real jobs like

00:01:14,340 --> 00:01:19,320
administrator and manager have heard

00:01:16,619 --> 00:01:21,270
about it as well as every developer from

00:01:19,320 --> 00:01:22,890
the script kiddie right up to a senior

00:01:21,270 --> 00:01:25,290
vice president of engineering or some

00:01:22,890 --> 00:01:26,759
equally overblown title on LinkedIn but

00:01:25,290 --> 00:01:29,030
this means that you might get pressure

00:01:26,759 --> 00:01:31,350
to move to the cloud without knowing why

00:01:29,030 --> 00:01:33,659
as we're going to see moving to the

00:01:31,350 --> 00:01:36,570
cloud can look simple but it's often

00:01:33,659 --> 00:01:38,369
anything but and what I want to focus on

00:01:36,570 --> 00:01:40,860
when I talk to you and what my company

00:01:38,369 --> 00:01:43,079
focused on when we move to AWS wasn't

00:01:40,860 --> 00:01:46,530
the height or the tech or all the jargon

00:01:43,079 --> 00:01:48,750
but the business case not just why move

00:01:46,530 --> 00:01:50,759
to the cloud but can we do it in a way

00:01:48,750 --> 00:01:53,880
that makes sense to our modern hopefully

00:01:50,759 --> 00:01:54,869
agile business practices so firstly why

00:01:53,880 --> 00:01:57,299
are we even going to move in the first

00:01:54,869 --> 00:01:59,130
place we identified three things and

00:01:57,299 --> 00:02:02,310
that were the reasons to move to a cloud

00:01:59,130 --> 00:02:05,280
service scalability availability and

00:02:02,310 --> 00:02:07,560
durability the scalability is a simple

00:02:05,280 --> 00:02:10,670
one it's wise your business grows as

00:02:07,560 --> 00:02:13,650
your use case grows can um improve the

00:02:10,670 --> 00:02:15,269
compute capacity or storage capacity or

00:02:13,650 --> 00:02:17,400
other processing requirement of your

00:02:15,269 --> 00:02:19,980
system over time without costly

00:02:17,400 --> 00:02:21,720
migrations downtime getting new

00:02:19,980 --> 00:02:24,200
contracts working with new providers

00:02:21,720 --> 00:02:26,189
every few years as your business grows

00:02:24,200 --> 00:02:27,689
availability this was a big one for us

00:02:26,189 --> 00:02:29,040
and that would probably be the same for

00:02:27,689 --> 00:02:29,790
most people some businesses might be

00:02:29,040 --> 00:02:31,920
able to do without it

00:02:29,790 --> 00:02:33,989
but availability means is your service

00:02:31,920 --> 00:02:35,819
online can your customers access your

00:02:33,989 --> 00:02:37,650
product availability is going to be

00:02:35,819 --> 00:02:39,180
crucial for anyone who's selling things

00:02:37,650 --> 00:02:41,010
because any time you're down you're not

00:02:39,180 --> 00:02:42,840
selling it's going to be crucial for

00:02:41,010 --> 00:02:43,980
anyone providing a consistent service to

00:02:42,840 --> 00:02:45,690
people like software as a service

00:02:43,980 --> 00:02:48,900
platforms if you're down or your

00:02:45,690 --> 00:02:50,849
customers are down and durability fixing

00:02:48,900 --> 00:02:52,530
things that break obviously we're all

00:02:50,849 --> 00:02:55,319
wonderful software engineers that never

00:02:52,530 --> 00:02:56,370
make a mistake but every now and then we

00:02:55,319 --> 00:02:58,109
accidentally hire someone who's not a

00:02:56,370 --> 00:03:01,319
wonderful software engineer and they

00:02:58,109 --> 00:03:03,209
make a mistake and things break

00:03:01,319 --> 00:03:06,450
so can we fix things that break can we

00:03:03,209 --> 00:03:08,519
recover from problems and so where are

00:03:06,450 --> 00:03:10,200
we coming from this might be the same

00:03:08,519 --> 00:03:14,579
for a lot of you and you might be on a

00:03:10,200 --> 00:03:15,959
single server a lamp stack sometimes you

00:03:14,579 --> 00:03:17,370
might have separated out to maybe a

00:03:15,959 --> 00:03:20,819
separate database so you've got two

00:03:17,370 --> 00:03:22,290
servers these might be VPS in various

00:03:20,819 --> 00:03:24,180
composing companies they might already

00:03:22,290 --> 00:03:27,959
be a sort of minor cloud provider at

00:03:24,180 --> 00:03:29,760
digitalocean or you might be on a

00:03:27,959 --> 00:03:32,250
traditional bare metal box that you own

00:03:29,760 --> 00:03:33,269
in a data center somewhere if you've got

00:03:32,250 --> 00:03:35,129
a bit further you could be on

00:03:33,269 --> 00:03:36,900
hypervisors where you are running

00:03:35,129 --> 00:03:39,000
multiple machines but still on a single

00:03:36,900 --> 00:03:40,049
piece of dedicated hardware somewhere so

00:03:39,000 --> 00:03:42,810
you're still vulnerable to some of the

00:03:40,049 --> 00:03:44,099
same failures that can happen to any

00:03:42,810 --> 00:03:47,250
sort of dedicated hardware in a data

00:03:44,099 --> 00:03:48,359
center data centers are great things but

00:03:47,250 --> 00:03:49,229
you can have problems with them no

00:03:48,359 --> 00:03:50,370
matter how much they show you how

00:03:49,229 --> 00:03:52,349
nothing can ever go wrong in this data

00:03:50,370 --> 00:03:53,609
center I know if one recently that

00:03:52,349 --> 00:03:54,720
someone drilled through both of their

00:03:53,609 --> 00:03:58,940
redundant power supplies at the same

00:03:54,720 --> 00:04:00,870
time so you can't always be perfect and

00:03:58,940 --> 00:04:04,440
another thing we have to be prepared off

00:04:00,870 --> 00:04:06,590
as we go into a dress is acronyms a DBS

00:04:04,440 --> 00:04:09,209
is full of acronyms AWS is an acronym

00:04:06,590 --> 00:04:10,949
and the coolest ones amongst you might

00:04:09,209 --> 00:04:12,959
know all the acronyms but I won't assume

00:04:10,949 --> 00:04:14,400
that I definitely didn't so these slides

00:04:12,959 --> 00:04:15,629
are gonna explain it all and if it gets

00:04:14,400 --> 00:04:18,570
too much for you there's a nice icon of

00:04:15,629 --> 00:04:21,060
a plant and we're not going to be going

00:04:18,570 --> 00:04:23,039
into tutorial detail here so this isn't

00:04:21,060 --> 00:04:24,930
a sort of how to win how to move your

00:04:23,039 --> 00:04:26,790
entire service to AWS

00:04:24,930 --> 00:04:29,490
I don't have time to do that

00:04:26,790 --> 00:04:31,920
but I I'm gonna offer you our pathway

00:04:29,490 --> 00:04:33,450
the reasons we made our decisions and

00:04:31,920 --> 00:04:35,400
afterwards will be time fo for you to

00:04:33,450 --> 00:04:38,190
ask some questions about me about how we

00:04:35,400 --> 00:04:39,990
did it and also I'm planning to do a

00:04:38,190 --> 00:04:41,100
sort of impromptu workshop sometime

00:04:39,990 --> 00:04:42,420
later in the day if you want to come

00:04:41,100 --> 00:04:45,000
along and get a bit more hands-on with

00:04:42,420 --> 00:04:47,520
your own business case I want final

00:04:45,000 --> 00:04:50,820
thing is this really the best way to do

00:04:47,520 --> 00:04:53,190
this the answer is no what we're doing

00:04:50,820 --> 00:04:55,350
here is not best practice this isn't

00:04:53,190 --> 00:04:58,650
what a a degree a certified solutions

00:04:55,350 --> 00:05:01,050
architect will tell you this is the

00:04:58,650 --> 00:05:01,920
journey from where you are now which

00:05:01,050 --> 00:05:05,010
could be in a variety of different

00:05:01,920 --> 00:05:06,870
places through to being up on AWS fully

00:05:05,010 --> 00:05:08,790
and there are times when business case

00:05:06,870 --> 00:05:10,830
and best practice do line up so it seems

00:05:08,790 --> 00:05:13,350
like security making sure your data is

00:05:10,830 --> 00:05:14,910
protected and backed up but all the

00:05:13,350 --> 00:05:17,070
times we want to move more slowly

00:05:14,910 --> 00:05:18,570
we need critical components onto LVS to

00:05:17,070 --> 00:05:20,760
protect our business availability and

00:05:18,570 --> 00:05:22,020
scaling requirements but we can then

00:05:20,760 --> 00:05:24,210
move other parts and change our

00:05:22,020 --> 00:05:26,610
practices later if you were to go up to

00:05:24,210 --> 00:05:27,900
your boss or your investors or whoever

00:05:26,610 --> 00:05:30,000
else it's a stakeholder in your product

00:05:27,900 --> 00:05:31,590
and say by the way we can't do any work

00:05:30,000 --> 00:05:33,900
for six months we're training the entire

00:05:31,590 --> 00:05:36,840
team in DevOps and moving everything to

00:05:33,900 --> 00:05:38,460
AWS so we'll see you in the next year

00:05:36,840 --> 00:05:40,350
they are not going to be too happy and

00:05:38,460 --> 00:05:41,610
there probably is going to say no so

00:05:40,350 --> 00:05:44,220
this is the way you can present a case

00:05:41,610 --> 00:05:46,440
to move on to AWS in a way that works

00:05:44,220 --> 00:05:49,290
for your business and works for your

00:05:46,440 --> 00:05:51,690
development team so this is all about

00:05:49,290 --> 00:05:54,630
what we're going to miss and let's begin

00:05:51,690 --> 00:05:57,660
with your server being on Amazon give a

00:05:54,630 --> 00:05:59,490
service level agreement of 99.95%

00:05:57,660 --> 00:06:01,020
this equates to about four hours of

00:05:59,490 --> 00:06:03,960
downtime a year which i think is pretty

00:06:01,020 --> 00:06:06,420
good there's a clarification in this SLA

00:06:03,960 --> 00:06:07,830
which says this only applies if you've

00:06:06,420 --> 00:06:10,770
got redundancy in to your set up

00:06:07,830 --> 00:06:12,540
yourself so talk about what redundancy

00:06:10,770 --> 00:06:15,420
means we need to understand how AWS is

00:06:12,540 --> 00:06:19,050
structured so we have our first acronym

00:06:15,420 --> 00:06:21,390
explainer slide so we have ec2 this is

00:06:19,050 --> 00:06:23,580
Elastic Compute cloud basically service

00:06:21,390 --> 00:06:26,310
they call them instances but def their

00:06:23,580 --> 00:06:28,110
service their virtual machines RDS is

00:06:26,310 --> 00:06:30,780
the relational database service which is

00:06:28,110 --> 00:06:33,960
servers but with a managed SQL on top of

00:06:30,780 --> 00:06:36,390
them all flavors of SQL are offered and

00:06:33,960 --> 00:06:38,460
then a Zed this is an availability zone

00:06:36,390 --> 00:06:39,669
and that bears going into a bit more

00:06:38,460 --> 00:06:42,009
detail

00:06:39,669 --> 00:06:44,439
EDIS is split into regions and it moves

00:06:42,009 --> 00:06:46,689
fast this map that I put in my slides a

00:06:44,439 --> 00:06:49,000
few months ago is already out of date

00:06:46,689 --> 00:06:51,310
there are already new AWS regions that

00:06:49,000 --> 00:06:54,069
are open and being built at the moment

00:06:51,310 --> 00:06:55,719
the numbers in each of the circles are

00:06:54,069 --> 00:06:58,030
the number of availability zones per

00:06:55,719 --> 00:07:00,669
region and availability zone map made of

00:06:58,030 --> 00:07:03,430
one or more data centers so you can see

00:07:00,669 --> 00:07:07,060
if we look at the middle of the graph

00:07:03,430 --> 00:07:09,520
that's Dublin which is known as EU West

00:07:07,060 --> 00:07:11,349
one has three availability zones this

00:07:09,520 --> 00:07:14,830
means there are three independent hubs

00:07:11,349 --> 00:07:17,409
of AWS data providers and storage in

00:07:14,830 --> 00:07:19,840
Dublin at any time

00:07:17,409 --> 00:07:21,789
AWS reserve the right to simply have an

00:07:19,840 --> 00:07:23,620
AZ switch off so if they need to do

00:07:21,789 --> 00:07:25,029
maintenance if something goes wrong they

00:07:23,620 --> 00:07:26,830
are totally happy to just kill an

00:07:25,029 --> 00:07:28,900
availability zone without much warning

00:07:26,830 --> 00:07:30,250
if they know they're going to do it they

00:07:28,900 --> 00:07:31,419
will try and give you warning if

00:07:30,250 --> 00:07:33,879
something goes wrong they would rather

00:07:31,419 --> 00:07:36,069
preserve their power and take the aether

00:07:33,879 --> 00:07:37,750
down then give everyone warning and

00:07:36,069 --> 00:07:39,699
maybe risk something else going wrong um

00:07:37,750 --> 00:07:41,650
so we have to be able to avoid the loss

00:07:39,699 --> 00:07:43,719
of an availability zone so if your idea

00:07:41,650 --> 00:07:46,539
of moving to AWS is we're just going to

00:07:43,719 --> 00:07:49,330
do exactly we did with a VPS or dedicate

00:07:46,539 --> 00:07:50,740
box but start servers on Ed of us you

00:07:49,330 --> 00:07:54,039
might face the server suddenly going

00:07:50,740 --> 00:07:56,440
offline without any notice so we can't

00:07:54,039 --> 00:07:59,650
do that we have to avoid the loss of one

00:07:56,440 --> 00:08:01,930
availability zone with ec2 this involves

00:07:59,650 --> 00:08:03,789
launching your instances in multiple

00:08:01,930 --> 00:08:06,069
availability zones so when you launch

00:08:03,789 --> 00:08:08,289
one from the console or command line you

00:08:06,069 --> 00:08:09,460
can say I want this to be in EU West 1a

00:08:08,289 --> 00:08:12,039
or 1b

00:08:09,460 --> 00:08:13,539
the idea is if you have servers in

00:08:12,039 --> 00:08:14,979
multiple availability zones you are

00:08:13,539 --> 00:08:16,360
protected if one of the develop bility

00:08:14,979 --> 00:08:18,669
zones goes offline and you're now

00:08:16,360 --> 00:08:21,490
covered by that 99.95%

00:08:18,669 --> 00:08:22,979
service level agreement with RDS the

00:08:21,490 --> 00:08:26,379
database service this is even simpler

00:08:22,979 --> 00:08:29,650
there's a multi AZ tick box so you took

00:08:26,379 --> 00:08:31,300
that and automatically AWS creates extra

00:08:29,650 --> 00:08:32,829
database service for you in other

00:08:31,300 --> 00:08:35,500
regions so if your main one goes offline

00:08:32,829 --> 00:08:38,019
your system fails over with around 1 to

00:08:35,500 --> 00:08:40,240
2 seconds consistency which should be

00:08:38,019 --> 00:08:41,320
pretty good for most use cases and again

00:08:40,240 --> 00:08:42,519
they don't expect it to happen and

00:08:41,320 --> 00:08:45,490
they'll try and transition you slowly if

00:08:42,519 --> 00:08:47,529
they can some services it does matter so

00:08:45,490 --> 00:08:48,880
if you're using s3 and which some of you

00:08:47,529 --> 00:08:50,410
might already because it's very separate

00:08:48,880 --> 00:08:52,660
for a lot of their other services for

00:08:50,410 --> 00:08:53,320
data storage that's already replicated

00:08:52,660 --> 00:08:55,030
across all

00:08:53,320 --> 00:08:57,030
availability zones and they copy each

00:08:55,030 --> 00:08:59,770
object I think it's around seven times

00:08:57,030 --> 00:09:00,790
so you're very safe so much lambda which

00:08:59,770 --> 00:09:02,680
we're going to talk about later and

00:09:00,790 --> 00:09:03,790
their DNS service obviously you don't

00:09:02,680 --> 00:09:04,870
have to create we've done the DNS

00:09:03,790 --> 00:09:05,700
servers all that would be going a little

00:09:04,870 --> 00:09:07,750
bit too far

00:09:05,700 --> 00:09:09,880
once we realize we need to manage

00:09:07,750 --> 00:09:11,650
servers to even start to use a

00:09:09,880 --> 00:09:13,450
digression reliably things already

00:09:11,650 --> 00:09:15,060
become complicated this is where you hit

00:09:13,450 --> 00:09:19,060
that first problem in the business case

00:09:15,060 --> 00:09:21,190
so we have auto scaling auto scaling is

00:09:19,060 --> 00:09:22,720
a dresses core mechanism to make the

00:09:21,190 --> 00:09:25,300
service and therefore your products

00:09:22,720 --> 00:09:28,030
highly available it's built from a

00:09:25,300 --> 00:09:30,340
simple process you create an image which

00:09:28,030 --> 00:09:33,310
is a configuration so your server config

00:09:30,340 --> 00:09:35,080
and plus a snapshot of your disk so your

00:09:33,310 --> 00:09:37,510
operating system or your files come fix

00:09:35,080 --> 00:09:39,400
everything else you then create a launch

00:09:37,510 --> 00:09:41,170
configuration this tells out of us that

00:09:39,400 --> 00:09:44,170
you want this image to be used with this

00:09:41,170 --> 00:09:46,900
size hard disk networking and this size

00:09:44,170 --> 00:09:49,150
of instance and then you have

00:09:46,900 --> 00:09:51,670
availability zones you choose whether

00:09:49,150 --> 00:09:53,650
you want to launch it one you don't if

00:09:51,670 --> 00:09:54,850
you want to launch it multiple and then

00:09:53,650 --> 00:09:56,590
you can say how what you want the

00:09:54,850 --> 00:09:58,120
balance to be do you always want one

00:09:56,590 --> 00:10:00,610
instance per availability zone are you

00:09:58,120 --> 00:10:02,860
happy with one every two and it's up to

00:10:00,610 --> 00:10:05,080
you to how you want to balance that and

00:10:02,860 --> 00:10:07,210
address then start instances for you

00:10:05,080 --> 00:10:09,730
once it started instances for you in the

00:10:07,210 --> 00:10:11,500
event that one of them goes down a DBS

00:10:09,730 --> 00:10:12,580
will simply start another one up that

00:10:11,500 --> 00:10:14,020
could be going down because of your own

00:10:12,580 --> 00:10:15,280
configuration problems you could have

00:10:14,020 --> 00:10:17,290
broken something your server could just

00:10:15,280 --> 00:10:18,580
crash and they fade up yes notices it's

00:10:17,290 --> 00:10:21,010
crashed it will simply take it out of

00:10:18,580 --> 00:10:22,230
service and give you a new instance so

00:10:21,010 --> 00:10:24,460
it's great if you are running

00:10:22,230 --> 00:10:25,990
specifically like hockey programs that

00:10:24,460 --> 00:10:27,370
might break a server you can just have

00:10:25,990 --> 00:10:29,730
your server but much more durable by

00:10:27,370 --> 00:10:32,860
putting it in an auto scaling group um

00:10:29,730 --> 00:10:34,630
but there's a problem and we talked

00:10:32,860 --> 00:10:36,430
about lamp that's the one box that runs

00:10:34,630 --> 00:10:38,650
all your stuff well now you have

00:10:36,430 --> 00:10:41,410
multiple boxes so where does your

00:10:38,650 --> 00:10:44,410
traffic go and you're gonna miss mapping

00:10:41,410 --> 00:10:46,060
an IP to a domain name we're all

00:10:44,410 --> 00:10:48,640
familiar with this format we have one

00:10:46,060 --> 00:10:50,230
server so our DNS looks something like

00:10:48,640 --> 00:10:52,480
this you have your domain you get the IP

00:10:50,230 --> 00:10:53,380
from your provider you stick it in it

00:10:52,480 --> 00:10:54,910
all works

00:10:53,380 --> 00:10:57,430
unless we want to tell our users can you

00:10:54,910 --> 00:11:00,100
guys access an a domain comm and you

00:10:57,430 --> 00:11:01,330
guys beat domain calm and with lots of

00:11:00,100 --> 00:11:04,120
subdomains that's not gonna work for

00:11:01,330 --> 00:11:04,690
multiple servers hopefully 80s still

00:11:04,120 --> 00:11:06,840
hasn't covered

00:11:04,690 --> 00:11:08,740
we've got load balancing

00:11:06,840 --> 00:11:10,780
load-balancing again is a fairly simple

00:11:08,740 --> 00:11:12,010
process motional processes I've managed

00:11:10,780 --> 00:11:14,230
to break down into four steps which

00:11:12,010 --> 00:11:15,580
shows how well address those things you

00:11:14,230 --> 00:11:17,320
choose a target group this can be

00:11:15,580 --> 00:11:20,620
instances that you're managing manually

00:11:17,320 --> 00:11:23,020
and/or auto scaling groups that it'll

00:11:20,620 --> 00:11:24,820
work with either you add some rules so

00:11:23,020 --> 00:11:26,560
the simplest rule is forward everything

00:11:24,820 --> 00:11:29,590
that arrives at your load balancer on

00:11:26,560 --> 00:11:31,810
port 443 to your servers on port 4 for 3

00:11:29,590 --> 00:11:33,910
you can map them between so you can have

00:11:31,810 --> 00:11:35,560
everything that arrives on your HTTP

00:11:33,910 --> 00:11:38,230
port on the load balancer just go to

00:11:35,560 --> 00:11:39,610
your HTTP 4 on your server and then you

00:11:38,230 --> 00:11:41,410
can add a whole lot of complex routing

00:11:39,610 --> 00:11:42,760
rules in between does the request

00:11:41,410 --> 00:11:45,160
contain this information in that case

00:11:42,760 --> 00:11:46,540
then it to this server you have some

00:11:45,160 --> 00:11:48,160
health checks this is a way that the

00:11:46,540 --> 00:11:49,590
load balancer can just ping your

00:11:48,160 --> 00:11:52,810
instances to say hey you still there

00:11:49,590 --> 00:11:54,490
that can relate from a simple return of

00:11:52,810 --> 00:11:55,810
a HTML file if you just want to be

00:11:54,490 --> 00:11:57,100
simple or you could even have your

00:11:55,810 --> 00:11:58,780
health check and do something like

00:11:57,100 --> 00:12:00,010
connect to your database or connect to

00:11:58,780 --> 00:12:01,750
another crucial service you're running

00:12:00,010 --> 00:12:03,310
so that you know that if traffic is

00:12:01,750 --> 00:12:04,540
going to your instance it's running your

00:12:03,310 --> 00:12:06,760
application in the way you intended to

00:12:04,540 --> 00:12:08,590
be run if a server fails a health check

00:12:06,760 --> 00:12:09,820
again a degress can take it out of

00:12:08,590 --> 00:12:11,920
service and give you a new one

00:12:09,820 --> 00:12:13,180
or at the very least not sent traffic to

00:12:11,920 --> 00:12:15,580
it and alert you there's something's

00:12:13,180 --> 00:12:17,170
wrong load balancers are across multiple

00:12:15,580 --> 00:12:17,860
availability zones by default you don't

00:12:17,170 --> 00:12:20,680
have to say anything

00:12:17,860 --> 00:12:22,150
it's called a load balancer and one

00:12:20,680 --> 00:12:23,590
fairly early pitfall is it doesn't

00:12:22,150 --> 00:12:25,780
actually do any balancing it's a

00:12:23,590 --> 00:12:27,520
randomizer so if you have certain

00:12:25,780 --> 00:12:29,080
processes that might be activated

00:12:27,520 --> 00:12:30,880
through a web route that are very

00:12:29,080 --> 00:12:33,430
intensive on your processor maybe you're

00:12:30,880 --> 00:12:35,020
rendering some sort of video files or

00:12:33,430 --> 00:12:37,420
doing lots of image processing when

00:12:35,020 --> 00:12:38,860
someone uploads something and you could

00:12:37,420 --> 00:12:40,540
still get one server being overwhelmed

00:12:38,860 --> 00:12:41,950
so don't just assume that if your server

00:12:40,540 --> 00:12:44,230
can handle sort of seventy-five percent

00:12:41,950 --> 00:12:45,730
load that all the load of one specific

00:12:44,230 --> 00:12:48,160
thing won't go to one server and still

00:12:45,730 --> 00:12:50,560
bring it down it's a load randomizer not

00:12:48,160 --> 00:12:52,780
necessarily a balancer um

00:12:50,560 --> 00:12:56,770
the default storage for sessions in

00:12:52,780 --> 00:12:59,220
Apache and PHP is on disk now we have

00:12:56,770 --> 00:13:02,590
multiple disks across multiple servers

00:12:59,220 --> 00:13:05,410
again if your users are accessing your

00:13:02,590 --> 00:13:06,640
site with their sessions and they hit

00:13:05,410 --> 00:13:07,900
multiple servers they're going to happy

00:13:06,640 --> 00:13:09,910
ask for a new session each time they

00:13:07,900 --> 00:13:12,940
sign in so unless you're already using

00:13:09,910 --> 00:13:15,070
something like stateless login with JWT

00:13:12,940 --> 00:13:16,330
and you are going to find your user

00:13:15,070 --> 00:13:17,500
suddenly getting logged out for no

00:13:16,330 --> 00:13:18,940
apparent reason and the same with

00:13:17,500 --> 00:13:20,470
anything in your application that relies

00:13:18,940 --> 00:13:23,050
on them storing data into

00:13:20,470 --> 00:13:24,970
session once again NBS does have us

00:13:23,050 --> 00:13:27,160
covered with sticky sessions you can

00:13:24,970 --> 00:13:28,810
tick a box and this puts a cookie on

00:13:27,160 --> 00:13:31,050
your user browser that says any time I

00:13:28,810 --> 00:13:33,010
come to you send me to the same server

00:13:31,050 --> 00:13:35,350
obviously if that server goes out of

00:13:33,010 --> 00:13:36,640
commission all your users will still get

00:13:35,350 --> 00:13:38,530
signed out or lose their session data

00:13:36,640 --> 00:13:40,180
but you probably need to handle that in

00:13:38,530 --> 00:13:41,380
your application anyway most

00:13:40,180 --> 00:13:44,200
applications should handle the user

00:13:41,380 --> 00:13:45,550
losing their session for some reason so

00:13:44,200 --> 00:13:47,800
you can use cookies or you can store

00:13:45,550 --> 00:13:49,960
something to disk if you need it and

00:13:47,800 --> 00:13:53,440
with too many servers though we now have

00:13:49,960 --> 00:13:54,880
to deploy code to a lot of servers um it

00:13:53,440 --> 00:13:56,950
will take you a bit longer to our sync

00:13:54,880 --> 00:13:58,870
code to two servers than one but it will

00:13:56,950 --> 00:14:01,960
take even longer to us in code to 20

00:13:58,870 --> 00:14:03,160
service and deploying that way it's been

00:14:01,960 --> 00:14:05,290
a consistent feature of most development

00:14:03,160 --> 00:14:08,500
environments for years and so you'll

00:14:05,290 --> 00:14:10,900
miss using the file system each server

00:14:08,500 --> 00:14:12,310
has its own disk but they don't talk to

00:14:10,900 --> 00:14:13,720
each other unless you start setting up

00:14:12,310 --> 00:14:15,160
some complex routing and again we're

00:14:13,720 --> 00:14:18,010
trying to do is the simplest case for

00:14:15,160 --> 00:14:21,220
our business and it's not just code

00:14:18,010 --> 00:14:22,570
either if you're using a CMS which many

00:14:21,220 --> 00:14:24,460
of you will be given the most prophecy a

00:14:22,570 --> 00:14:26,650
message generally written in PHP we were

00:14:24,460 --> 00:14:28,480
using WordPress using Magento that will

00:14:26,650 --> 00:14:30,490
store all your users content to disk

00:14:28,480 --> 00:14:32,140
unless you want to start rewriting your

00:14:30,490 --> 00:14:33,730
CMS to tell it to store it somewhere

00:14:32,140 --> 00:14:36,130
else you're going to have a challenge

00:14:33,730 --> 00:14:37,600
with your migration your own apps can

00:14:36,130 --> 00:14:40,360
react it to court may be slightly easier

00:14:37,600 --> 00:14:41,920
but it could still be a big challenge so

00:14:40,360 --> 00:14:43,450
we have some storage acronyms we've got

00:14:41,920 --> 00:14:45,310
to teach you first

00:14:43,450 --> 00:14:47,500
EBS this is elastic block store

00:14:45,310 --> 00:14:48,670
basically hard disks they do like to

00:14:47,500 --> 00:14:52,420
come up with fun names for things

00:14:48,670 --> 00:14:54,160
um EFS elastic filesystem this is a

00:14:52,420 --> 00:14:55,780
networked hard disk you'll notice it's

00:14:54,160 --> 00:14:58,900
also the most expensive storage option

00:14:55,780 --> 00:14:59,950
per gigabyte and s3 this is a say the

00:14:58,900 --> 00:15:01,510
one that a lot of people would already

00:14:59,950 --> 00:15:03,700
have heard of this was the first service

00:15:01,510 --> 00:15:05,770
a DBS released and has become very

00:15:03,700 --> 00:15:08,400
successful throughout the world for

00:15:05,770 --> 00:15:11,410
disclosing private information publicly

00:15:08,400 --> 00:15:13,360
so EFS volumes are a networked hard

00:15:11,410 --> 00:15:15,880
drive which you can choose to mount onto

00:15:13,360 --> 00:15:19,540
any number of instances no matter what

00:15:15,880 --> 00:15:20,890
availability zone they're in so they're

00:15:19,540 --> 00:15:22,690
stored across all availability zones

00:15:20,890 --> 00:15:24,850
you'd have to worry about that there's

00:15:22,690 --> 00:15:25,720
no need to set a volume size you just

00:15:24,850 --> 00:15:28,210
pay for what you use

00:15:25,720 --> 00:15:29,770
and they have right consistency so this

00:15:28,210 --> 00:15:30,820
means that when you write a file to EFS

00:15:29,770 --> 00:15:33,220
it only tells you yes I've finished

00:15:30,820 --> 00:15:33,970
writing when it knows it's replicated it

00:15:33,220 --> 00:15:36,100
wherever it needs you

00:15:33,970 --> 00:15:38,740
gated and and it scales with the number

00:15:36,100 --> 00:15:40,389
of stored files if you go into an

00:15:38,740 --> 00:15:43,689
instance once it's got an EFS volume

00:15:40,389 --> 00:15:45,850
mounted and do the linux DF command you

00:15:43,689 --> 00:15:49,600
get to see the available storage size on

00:15:45,850 --> 00:15:52,420
EFS which is 8e I had to look it up

00:15:49,600 --> 00:15:54,220
that's exabytes that's a lot of zeros

00:15:52,420 --> 00:15:55,449
bytes I don't know if anyone's I've ever

00:15:54,220 --> 00:15:57,009
managed to fill it I guess you could

00:15:55,449 --> 00:15:59,199
just set DD running and see if it

00:15:57,009 --> 00:16:02,920
completes or if they'd have us call you

00:15:59,199 --> 00:16:06,509
first but you know good look if it wants

00:16:02,920 --> 00:16:08,470
to try I will retweet you if you do so

00:16:06,509 --> 00:16:11,319
unfortunately this is becoming a bit the

00:16:08,470 --> 00:16:14,319
habit we have a few problems now with

00:16:11,319 --> 00:16:16,240
the FS files upload slowly and PHP file

00:16:14,319 --> 00:16:21,939
that's acute even more slowly so you're

00:16:16,240 --> 00:16:23,740
gonna miss speed why we talked about EFS

00:16:21,939 --> 00:16:25,360
is characteristics it has right

00:16:23,740 --> 00:16:27,939
consistency and it's networks across

00:16:25,360 --> 00:16:29,800
multiple locations so right consistency

00:16:27,939 --> 00:16:31,509
every file has to let you know it's

00:16:29,800 --> 00:16:33,009
everywhere it needs to be before it

00:16:31,509 --> 00:16:34,389
tells you it's done otherwise your

00:16:33,009 --> 00:16:36,009
application could go yeah that's stored

00:16:34,389 --> 00:16:37,389
one of the EFS nodes could have a

00:16:36,009 --> 00:16:40,149
problem and you've got this inconsistent

00:16:37,389 --> 00:16:41,860
file system for a single file this is

00:16:40,149 --> 00:16:44,980
fine the the right consistency takes

00:16:41,860 --> 00:16:47,379
extra milliseconds I don't know about

00:16:44,980 --> 00:16:50,110
your source code base um our code

00:16:47,379 --> 00:16:51,579
contains about 17,000 files and that's

00:16:50,110 --> 00:16:53,800
suddenly the little time on each one

00:16:51,579 --> 00:16:55,899
takes a lot longer and I'll synch to our

00:16:53,800 --> 00:16:56,139
server that used to take a minute maybe

00:16:55,899 --> 00:16:58,439
two

00:16:56,139 --> 00:17:00,610
took 20 when we first moved on to EFS

00:16:58,439 --> 00:17:02,829
that's not really affordable in your

00:17:00,610 --> 00:17:05,110
average development environment and then

00:17:02,829 --> 00:17:07,209
network read reading over network again

00:17:05,110 --> 00:17:08,890
as a network connection it's a fairly

00:17:07,209 --> 00:17:10,299
simple network connection but the

00:17:08,890 --> 00:17:12,760
latency is noticeable if you're reading

00:17:10,299 --> 00:17:14,079
one file you won't see it PHP

00:17:12,760 --> 00:17:16,059
applications tend to use a lot of files

00:17:14,079 --> 00:17:17,770
if you load an average route in a

00:17:16,059 --> 00:17:19,270
symphony application you're going to

00:17:17,770 --> 00:17:21,370
call one to two hundred different files

00:17:19,270 --> 00:17:22,720
and that get loaded in via the magic of

00:17:21,370 --> 00:17:24,730
autoloading and the fact we don't think

00:17:22,720 --> 00:17:26,409
about what we're loading anymore and

00:17:24,730 --> 00:17:28,809
that means that your file read delay

00:17:26,409 --> 00:17:30,460
slows down the entire application and

00:17:28,809 --> 00:17:31,840
file handling in the apps also affected

00:17:30,460 --> 00:17:32,890
again for single file uploads you won't

00:17:31,840 --> 00:17:36,309
notice this but if you're letting users

00:17:32,890 --> 00:17:38,289
upload big sets of documents or zip

00:17:36,309 --> 00:17:39,700
files and unzipping them then you're

00:17:38,289 --> 00:17:42,340
going to find a problem with your

00:17:39,700 --> 00:17:43,679
application as well so we tried a few

00:17:42,340 --> 00:17:47,779
ways to solve these problems

00:17:43,679 --> 00:17:50,840
we tried atomic deployments PHP op cash

00:17:47,779 --> 00:17:52,429
and then eventually s3 deployments so

00:17:50,840 --> 00:17:54,529
basically we tried a few things and

00:17:52,429 --> 00:17:56,239
again as the theme of the talk goes they

00:17:54,529 --> 00:17:57,679
didn't work but I'm going to talk to you

00:17:56,239 --> 00:17:59,989
about them anyway atomic deployments you

00:17:57,679 --> 00:18:01,279
might already be familiar with this some

00:17:59,989 --> 00:18:04,159
deployment agents things like catfish

00:18:01,279 --> 00:18:06,590
Rana will use this where you upload

00:18:04,159 --> 00:18:07,669
files somewhere to a timestamp directory

00:18:06,590 --> 00:18:08,299
and then when everything is in the

00:18:07,669 --> 00:18:10,219
correct place

00:18:08,299 --> 00:18:12,559
you flip a symlink that's pointing to

00:18:10,219 --> 00:18:16,219
your your code that says this is now the

00:18:12,559 --> 00:18:18,409
active version of my website and that's

00:18:16,219 --> 00:18:19,549
generally a really good pattern as well

00:18:18,409 --> 00:18:20,779
because it means you don't get this

00:18:19,549 --> 00:18:21,499
slight delay where you have code from

00:18:20,779 --> 00:18:23,899
different versions of your application

00:18:21,499 --> 00:18:25,639
all at the same time again with an R

00:18:23,899 --> 00:18:26,989
sync that takes a few seconds and a lo

00:18:25,639 --> 00:18:28,940
user base you might not have a problem

00:18:26,989 --> 00:18:30,469
with that but this is a good idea even

00:18:28,940 --> 00:18:33,619
if you're not doing a degress on your on

00:18:30,469 --> 00:18:35,239
one server and so you send files to EBS

00:18:33,619 --> 00:18:36,820
which is you're connected hard disk

00:18:35,239 --> 00:18:39,919
which is really fast

00:18:36,820 --> 00:18:41,089
they're SSDs you never really notice any

00:18:39,919 --> 00:18:43,879
write problems with them unless you're

00:18:41,089 --> 00:18:45,589
doing some crazy video encoding and then

00:18:43,879 --> 00:18:47,719
you start your instance synchronizing to

00:18:45,589 --> 00:18:49,879
EFS now this is still slow even from a

00:18:47,719 --> 00:18:52,070
DBS but at least now your machine that

00:18:49,879 --> 00:18:53,179
you're developing on or your machine

00:18:52,070 --> 00:18:54,889
that's doing your continues deployment

00:18:53,179 --> 00:18:56,450
isn't having to do the work it's not

00:18:54,889 --> 00:18:57,409
having to this really long file copy you

00:18:56,450 --> 00:18:58,629
can just leave it going and have

00:18:57,409 --> 00:19:02,029
something notify you when you're done

00:18:58,629 --> 00:19:03,169
and then once it's done you switch and

00:19:02,029 --> 00:19:05,330
the problem is that deployment is still

00:19:03,169 --> 00:19:06,469
slow if I start a deployment I still

00:19:05,330 --> 00:19:07,789
have to tell anyone who's waiting for

00:19:06,469 --> 00:19:09,649
deployment oh yeah guys that we've done

00:19:07,789 --> 00:19:10,909
in half an hour people don't understand

00:19:09,649 --> 00:19:12,229
a half an hour wait time when it comes

00:19:10,909 --> 00:19:13,969
to computers they assume everything is

00:19:12,229 --> 00:19:14,539
instant so when you say yes it's done in

00:19:13,969 --> 00:19:16,820
half an hour

00:19:14,539 --> 00:19:18,379
they're very confused so we found that

00:19:16,820 --> 00:19:20,229
we especially things like bug fixes or

00:19:18,379 --> 00:19:22,190
peep features that people want early or

00:19:20,229 --> 00:19:25,219
trying to do a deployment at 6 o'clock

00:19:22,190 --> 00:19:26,779
and trying to go home so it's still slow

00:19:25,219 --> 00:19:29,450
but your machine is free at first copy

00:19:26,779 --> 00:19:31,429
which is a little better then you have

00:19:29,450 --> 00:19:33,080
the PHP speed issue you might find

00:19:31,429 --> 00:19:34,129
you're already used PHP off cache it's

00:19:33,080 --> 00:19:36,049
enabled on a lot of default

00:19:34,129 --> 00:19:38,929
configurations off cache basically means

00:19:36,049 --> 00:19:41,239
that you run a PHP script and it caches

00:19:38,929 --> 00:19:43,249
all the generated op codes from passing

00:19:41,239 --> 00:19:45,019
your PHP and that way the next time that

00:19:43,249 --> 00:19:46,759
runs it doesn't have to do this massive

00:19:45,019 --> 00:19:48,619
read of the entirety of the symfony

00:19:46,759 --> 00:19:51,739
framework to render your page it just

00:19:48,619 --> 00:19:53,629
goes to the existing op cache and so

00:19:51,739 --> 00:19:56,690
this does solve the slow performance due

00:19:53,629 --> 00:19:58,669
to the file read time on EFS are by

00:19:56,690 --> 00:20:00,499
default op cached validates timestamps

00:19:58,669 --> 00:20:01,490
if you've been following along you'll

00:20:00,499 --> 00:20:02,900
notice that that's going to kill

00:20:01,490 --> 00:20:04,100
performance again because it's gonna

00:20:02,900 --> 00:20:05,809
have to validate timestamps on these

00:20:04,100 --> 00:20:07,580
hundred files anyway which is the same

00:20:05,809 --> 00:20:09,710
with the network read and so you have to

00:20:07,580 --> 00:20:11,840
turn that off but now you have the issue

00:20:09,710 --> 00:20:13,280
that your opt cache is fixed if you're

00:20:11,840 --> 00:20:14,480
not validating timestamps your OP cache

00:20:13,280 --> 00:20:16,970
will keep the same opcodes

00:20:14,480 --> 00:20:20,330
cached forever so you need a way to

00:20:16,970 --> 00:20:22,580
reset so we came up with a very simple

00:20:20,330 --> 00:20:25,760
way which was you have a system running

00:20:22,580 --> 00:20:27,050
a cron every minute you check if at

00:20:25,760 --> 00:20:29,030
times that file that you upload with a

00:20:27,050 --> 00:20:30,890
deployment has changed if it has you

00:20:29,030 --> 00:20:33,950
curl a local PHP root which runs up

00:20:30,890 --> 00:20:35,390
cache reset and that will log a reset in

00:20:33,950 --> 00:20:36,620
your up cache refresh everything and

00:20:35,390 --> 00:20:38,120
everything will cache again that does

00:20:36,620 --> 00:20:39,800
mean the users who access your site

00:20:38,120 --> 00:20:41,330
immediately after will get the slowdown

00:20:39,800 --> 00:20:43,730
for the first few minutes and setup

00:20:41,330 --> 00:20:45,980
caches cached everything so you do get a

00:20:43,730 --> 00:20:47,840
slow first loads and op cache is now

00:20:45,980 --> 00:20:49,100
critical to your application working so

00:20:47,840 --> 00:20:50,480
any issues with up cash missing

00:20:49,100 --> 00:20:51,559
something not working in a certain case

00:20:50,480 --> 00:20:54,470
and there have been cases with

00:20:51,559 --> 00:20:56,510
specifically complex and PHP that off

00:20:54,470 --> 00:20:57,679
cache can can go wrong on we had one

00:20:56,510 --> 00:20:59,990
recently that we were chasing for a

00:20:57,679 --> 00:21:01,730
while off cache is now critical to your

00:20:59,990 --> 00:21:05,750
app even performing normally let alone

00:21:01,730 --> 00:21:06,100
speeding it up so we have to change our

00:21:05,750 --> 00:21:07,940
plans

00:21:06,100 --> 00:21:10,220
there are a few of the deployment

00:21:07,940 --> 00:21:14,300
mechanisms that are suggested by people

00:21:10,220 --> 00:21:17,120
who are experts in Eddy is blue to green

00:21:14,300 --> 00:21:20,420
deployment is basically a common pattern

00:21:17,120 --> 00:21:21,860
where you put up servers and then deploy

00:21:20,420 --> 00:21:23,330
your application to those and then flip

00:21:21,860 --> 00:21:25,340
over where your load balancer points to

00:21:23,330 --> 00:21:27,820
and Amazon have their own tool called

00:21:25,340 --> 00:21:30,200
code deploy which will do this for you

00:21:27,820 --> 00:21:32,929
we had a look at this and it seemed

00:21:30,200 --> 00:21:34,550
great it will create a new group of

00:21:32,929 --> 00:21:36,140
service for you put your code on those

00:21:34,550 --> 00:21:38,390
and only when it's ready will it move

00:21:36,140 --> 00:21:39,320
all your users across the issue with

00:21:38,390 --> 00:21:40,880
that is that you can still have a

00:21:39,320 --> 00:21:43,010
problem of consistency there can be a

00:21:40,880 --> 00:21:45,020
time when users might be accessing two

00:21:43,010 --> 00:21:45,920
sides of your codebase this creates

00:21:45,020 --> 00:21:47,320
problems if you ever wanted to do

00:21:45,920 --> 00:21:49,610
something like a database schema change

00:21:47,320 --> 00:21:50,990
where suddenly queries that are running

00:21:49,610 --> 00:21:52,280
on one codebase might be hitting a

00:21:50,990 --> 00:21:53,570
database that's already changed its

00:21:52,280 --> 00:21:56,900
schema to match the new code base and

00:21:53,570 --> 00:21:58,820
you get errors it's not helpful it for

00:21:56,900 --> 00:22:00,500
different types of service so if you're

00:21:58,820 --> 00:22:02,510
running your same codebase across

00:22:00,500 --> 00:22:04,250
multiple servers of different uses such

00:22:02,510 --> 00:22:06,080
as one server for serving web and one

00:22:04,250 --> 00:22:07,130
server for running batch jobs you might

00:22:06,080 --> 00:22:09,260
have them configured differently

00:22:07,130 --> 00:22:10,910
blue/green deployments via code deploy

00:22:09,260 --> 00:22:12,679
can't handle that they have to target a

00:22:10,910 --> 00:22:15,510
single auto scaling group at the moment

00:22:12,679 --> 00:22:16,860
amazon might change this and

00:22:15,510 --> 00:22:18,000
it's harder to run post-deployment code

00:22:16,860 --> 00:22:19,020
so if you have things that need to

00:22:18,000 --> 00:22:22,200
happen at certain stages in your

00:22:19,020 --> 00:22:24,150
deployment to your sequel databases to

00:22:22,200 --> 00:22:25,140
files to anything else you're going to

00:22:24,150 --> 00:22:27,240
find it harder with the Bluegreen

00:22:25,140 --> 00:22:30,090
deployment because of the hooking into

00:22:27,240 --> 00:22:32,070
when it's completed so this didn't work

00:22:30,090 --> 00:22:35,790
for his either and we came up with our

00:22:32,070 --> 00:22:38,310
own method deploying via s3 we wrote an

00:22:35,790 --> 00:22:41,280
agent which can monitor for deployments

00:22:38,310 --> 00:22:43,410
on s3 and then it can synchronize this

00:22:41,280 --> 00:22:45,540
across servers principal we use was that

00:22:43,410 --> 00:22:47,940
you upload code to an s3 bucket which is

00:22:45,540 --> 00:22:49,320
fast and you load a timestamp saying

00:22:47,940 --> 00:22:51,810
this is the latest development I've done

00:22:49,320 --> 00:22:53,310
you then check your instances check

00:22:51,810 --> 00:22:55,110
yesterday timestamp on schedule or you

00:22:53,310 --> 00:22:56,400
could go further and s3 has an event

00:22:55,110 --> 00:22:57,750
system which you could use to send an

00:22:56,400 --> 00:22:58,860
event to your servers but that has a

00:22:57,750 --> 00:23:01,230
whole actual problem of way you route

00:22:58,860 --> 00:23:02,640
those events to once your server is

00:23:01,230 --> 00:23:04,710
aware that needs to deployment it

00:23:02,640 --> 00:23:06,900
creates a lock and synchronizes all your

00:23:04,710 --> 00:23:08,640
files to the current instance and this

00:23:06,900 --> 00:23:09,990
lock and it can be read by all the

00:23:08,640 --> 00:23:11,910
service so when servers have different

00:23:09,990 --> 00:23:13,560
times to synchronize they can each check

00:23:11,910 --> 00:23:15,570
all the locks from the other servers in

00:23:13,560 --> 00:23:17,370
order to all switch to your code at the

00:23:15,570 --> 00:23:19,050
exact same time this avoids having

00:23:17,370 --> 00:23:21,810
problems for things like front-end

00:23:19,050 --> 00:23:24,240
caches where if you're using long life

00:23:21,810 --> 00:23:26,430
caches for your JavaScript CSS or images

00:23:24,240 --> 00:23:28,410
and then changing a querystring

00:23:26,430 --> 00:23:29,550
timestamp to invalidate them the last

00:23:28,410 --> 00:23:31,080
thing you want is to change that time

00:23:29,550 --> 00:23:32,760
stamp and then caches go and pick up the

00:23:31,080 --> 00:23:34,260
old version of your files because now

00:23:32,760 --> 00:23:37,230
you have some really inconsistent bugs

00:23:34,260 --> 00:23:39,540
that are very hard to trace so if s

00:23:37,230 --> 00:23:41,130
doesn't cut it for code um but it's

00:23:39,540 --> 00:23:42,840
still really good for shared content so

00:23:41,130 --> 00:23:44,670
your images or your files are still fine

00:23:42,840 --> 00:23:47,490
on EFS and so you can move to something

00:23:44,670 --> 00:23:51,300
else and we're also going to miss

00:23:47,490 --> 00:23:53,190
modifying servers on the fly if you

00:23:51,300 --> 00:23:55,380
thought deploying code is hard just try

00:23:53,190 --> 00:23:58,050
going to patch the latest OS level

00:23:55,380 --> 00:24:00,090
vulnerability or installing a PHP

00:23:58,050 --> 00:24:03,660
extension or patching a vulnerability in

00:24:00,090 --> 00:24:06,870
a PHP extension on your own server we

00:24:03,660 --> 00:24:08,640
all do this we sign in by SSH make some

00:24:06,870 --> 00:24:11,250
conflict changes we sign out and hope

00:24:08,640 --> 00:24:13,170
everything works on a DBS you can't do

00:24:11,250 --> 00:24:15,030
this because servers can just vanish and

00:24:13,170 --> 00:24:17,340
be recreated by auto-scaling

00:24:15,030 --> 00:24:19,590
so your config needs to be versioned

00:24:17,340 --> 00:24:22,080
there are tools to manage your

00:24:19,590 --> 00:24:23,550
configuration as code but again we've

00:24:22,080 --> 00:24:25,590
talked about we don't want our entire

00:24:23,550 --> 00:24:27,270
team to have to go off and learn DevOps

00:24:25,590 --> 00:24:28,750
hopefully a lot of our teams are already

00:24:27,270 --> 00:24:30,130
fairly good at this kind of tasks

00:24:28,750 --> 00:24:32,200
simple server administration basic

00:24:30,130 --> 00:24:34,600
sysadmin work they do on their own

00:24:32,200 --> 00:24:36,700
machines I imagine so rather than

00:24:34,600 --> 00:24:38,860
killing our team what can we do

00:24:36,700 --> 00:24:40,750
I've got a few more acronyms before I

00:24:38,860 --> 00:24:42,820
can tell you about the solution so we

00:24:40,750 --> 00:24:45,550
have an ASG this is an auto scaling

00:24:42,820 --> 00:24:46,930
group we've talked about these LC we

00:24:45,550 --> 00:24:48,640
mentioned that talking about auto

00:24:46,930 --> 00:24:50,380
scaling this is a launch configuration

00:24:48,640 --> 00:24:52,090
so it tells you how you'll want your

00:24:50,380 --> 00:24:56,830
instances to be created in your auto

00:24:52,090 --> 00:24:57,850
scaling group and ami or ami some people

00:24:56,830 --> 00:25:00,400
disagree on the pronounciation and

00:24:57,850 --> 00:25:01,750
thoughts afterwards this is an Amazon

00:25:00,400 --> 00:25:05,800
machine image so this is your

00:25:01,750 --> 00:25:10,060
configuration and your disk snapshot and

00:25:05,800 --> 00:25:11,590
so we have a master instance the helpful

00:25:10,060 --> 00:25:13,600
thing about ATS is they don't charge you

00:25:11,590 --> 00:25:14,890
for instances which are switched off you

00:25:13,600 --> 00:25:16,780
pay for the storage what the storage is

00:25:14,890 --> 00:25:18,190
relatively cheap so if you have an

00:25:16,780 --> 00:25:19,990
instance it spends much time switched

00:25:18,190 --> 00:25:21,160
off you don't get charged any money and

00:25:19,990 --> 00:25:22,510
that's different to a lot of other cloud

00:25:21,160 --> 00:25:24,700
providers who will charge you even if

00:25:22,510 --> 00:25:26,830
your instances are switched on so you

00:25:24,700 --> 00:25:28,270
can have this master image which you can

00:25:26,830 --> 00:25:31,150
turn on and make config changes whenever

00:25:28,270 --> 00:25:33,040
you want you turn it on you change it

00:25:31,150 --> 00:25:34,840
you edit your configurations and then

00:25:33,040 --> 00:25:37,450
you switch it off once it's off you

00:25:34,840 --> 00:25:38,920
create a new image and then you build a

00:25:37,450 --> 00:25:41,140
launch configuration from that image and

00:25:38,920 --> 00:25:43,720
then you tell your auto scaling group to

00:25:41,140 --> 00:25:45,070
use this launch configuration now when

00:25:43,720 --> 00:25:46,480
your auto scaling group starts new

00:25:45,070 --> 00:25:48,400
service they're going to be using your

00:25:46,480 --> 00:25:49,900
new configuration now remember this

00:25:48,400 --> 00:25:51,880
isn't about deploying code this is about

00:25:49,900 --> 00:25:53,440
a player operating system-level changes

00:25:51,880 --> 00:25:55,540
which hopefully you're not doing on a

00:25:53,440 --> 00:25:56,620
daily basis but it's still very

00:25:55,540 --> 00:25:58,090
important to make these changes

00:25:56,620 --> 00:26:01,000
especially if there is a new security

00:25:58,090 --> 00:26:03,340
vulnerability but we would like to

00:26:01,000 --> 00:26:05,620
automate it because that whole process

00:26:03,340 --> 00:26:07,210
seems slow you have to turn on an

00:26:05,620 --> 00:26:09,700
instance you have to SSH and do your

00:26:07,210 --> 00:26:11,470
work turn it off image it put it into

00:26:09,700 --> 00:26:13,320
your auto scaling group kill your old

00:26:11,470 --> 00:26:17,290
servers one by one that's a lot of work

00:26:13,320 --> 00:26:19,450
so we have lambda lambda is currently

00:26:17,290 --> 00:26:20,800
the new hotness enable us everyone's

00:26:19,450 --> 00:26:23,290
talking about service there's still a

00:26:20,800 --> 00:26:25,540
server it's just not one you control but

00:26:23,290 --> 00:26:28,750
it lets you run single scripts on

00:26:25,540 --> 00:26:31,210
schedules or triggers I costs basically

00:26:28,750 --> 00:26:32,500
nothing especially for automated work if

00:26:31,210 --> 00:26:33,790
you put a web front-end in front of it

00:26:32,500 --> 00:26:35,740
and send all your requests there it

00:26:33,790 --> 00:26:38,200
would start costing you something um

00:26:35,740 --> 00:26:42,250
it runs Python and a few were the lesser

00:26:38,200 --> 00:26:42,730
languages but not PHP so you can use two

00:26:42,250 --> 00:26:45,220
sets of line

00:26:42,730 --> 00:26:46,900
functions in order to handle rolling out

00:26:45,220 --> 00:26:50,860
your Amazon machine images into your

00:26:46,900 --> 00:26:53,380
auto-scaling groups so one will watch a

00:26:50,860 --> 00:26:55,690
instance your master instance for it

00:26:53,380 --> 00:26:57,190
being stopped every time it stops this

00:26:55,690 --> 00:26:58,990
function just helpfully goes and makes

00:26:57,190 --> 00:27:00,100
an image of it for you so you don't need

00:26:58,990 --> 00:27:01,510
to worry about going and clicking that

00:27:00,100 --> 00:27:02,890
make image button work out what you call

00:27:01,510 --> 00:27:05,350
it everything like that and they

00:27:02,890 --> 00:27:07,540
generate in about five minutes you then

00:27:05,350 --> 00:27:10,390
have a second function which puts this

00:27:07,540 --> 00:27:13,630
new aim our mi into service in the auto

00:27:10,390 --> 00:27:17,530
scaling group it finds the latest ami it

00:27:13,630 --> 00:27:19,000
copies it it puts the launch

00:27:17,530 --> 00:27:20,890
configuration together and tells you

00:27:19,000 --> 00:27:22,390
what's going to get to use this one but

00:27:20,890 --> 00:27:24,429
you now have all these instances in your

00:27:22,390 --> 00:27:28,090
auto scaling group using your old am I

00:27:24,429 --> 00:27:29,200
so you can then use scheduling or just

00:27:28,090 --> 00:27:31,720
instructions to your auto scaling group

00:27:29,200 --> 00:27:33,820
from lambda to tell it okay I want more

00:27:31,720 --> 00:27:37,150
instances the new instances were

00:27:33,820 --> 00:27:38,710
launched with your new ami then you have

00:27:37,150 --> 00:27:41,380
a schedule which says ok 10 minutes

00:27:38,710 --> 00:27:43,390
after that half the size of my group

00:27:41,380 --> 00:27:45,760
again and your auto scaling group will

00:27:43,390 --> 00:27:47,650
kill the old instances first so now you

00:27:45,760 --> 00:27:48,940
have with about 10 minutes of creating a

00:27:47,650 --> 00:27:50,770
changes you have a full new

00:27:48,940 --> 00:27:52,270
configuration you've not learning new

00:27:50,770 --> 00:27:54,840
tools this can all be done from within

00:27:52,270 --> 00:27:58,540
ed aggresses control panel

00:27:54,840 --> 00:28:01,150
you're gonna miss cron we thought we

00:27:58,540 --> 00:28:03,880
nearly there didn't we this is part of

00:28:01,150 --> 00:28:05,710
many applications it's used for loads of

00:28:03,880 --> 00:28:09,280
different things and the tasks can be

00:28:05,710 --> 00:28:11,280
minor statistics or they can be pretty

00:28:09,280 --> 00:28:14,290
major handling your payment processing

00:28:11,280 --> 00:28:16,390
so not having your Cron's is a bad thing

00:28:14,290 --> 00:28:17,710
probably even worse to run your Cron's

00:28:16,390 --> 00:28:20,230
multiple times across different

00:28:17,710 --> 00:28:21,700
instances because whilst you can maybe

00:28:20,230 --> 00:28:23,230
check things like locks if everything's

00:28:21,700 --> 00:28:24,730
running at the same time you might miss

00:28:23,230 --> 00:28:27,370
something and customers being charged

00:28:24,730 --> 00:28:28,780
twice for things or having twice the

00:28:27,370 --> 00:28:30,640
number of items arrive or twice the

00:28:28,780 --> 00:28:33,790
number of emails arrived from you it's

00:28:30,640 --> 00:28:35,230
gonna be pretty upsetting and instances

00:28:33,790 --> 00:28:37,120
can start and stop at any time so you

00:28:35,230 --> 00:28:39,850
have one of your instances running a

00:28:37,120 --> 00:28:41,440
cron and then it goes down so what's the

00:28:39,850 --> 00:28:42,610
state of that that cron job now does

00:28:41,440 --> 00:28:45,130
another one pick it up how would you

00:28:42,610 --> 00:28:48,070
handle these things so we looked a few

00:28:45,130 --> 00:28:50,020
ways to get around this problem one of

00:28:48,070 --> 00:28:51,940
them was a centralized lock so could we

00:28:50,020 --> 00:28:55,280
have all our instances running Cron's

00:28:51,940 --> 00:28:57,260
and just have a lock using EFS

00:28:55,280 --> 00:28:58,670
you lock when you begin a process and

00:28:57,260 --> 00:28:59,510
you hope that if there's tiny sort of

00:28:58,670 --> 00:29:02,210
millisecond differences between

00:28:59,510 --> 00:29:04,820
instances that they notices you to the

00:29:02,210 --> 00:29:06,320
first we thought that could work but it

00:29:04,820 --> 00:29:07,490
seemed a risk we didn't necessarily have

00:29:06,320 --> 00:29:09,590
proved ability that the locking would

00:29:07,490 --> 00:29:11,270
work what if you check for the lock and

00:29:09,590 --> 00:29:12,590
then you find time you create a lock

00:29:11,270 --> 00:29:14,330
someone else has missed the check for

00:29:12,590 --> 00:29:16,550
the lock and you get some really nasty

00:29:14,330 --> 00:29:17,930
timing issues and you could just set

00:29:16,550 --> 00:29:19,430
your instance is all about a few seconds

00:29:17,930 --> 00:29:20,810
apart and their clocks but that has

00:29:19,430 --> 00:29:23,240
another problem

00:29:20,810 --> 00:29:25,070
we also let's accuse Amazon has a

00:29:23,240 --> 00:29:26,120
queuing service so we thought well you

00:29:25,070 --> 00:29:28,010
could have a separate instance it just

00:29:26,120 --> 00:29:29,120
pushes tasks to a queue and something

00:29:28,010 --> 00:29:31,520
else can pull them off the queue at the

00:29:29,120 --> 00:29:32,840
other end that did seem like it was a

00:29:31,520 --> 00:29:36,320
good idea and that was recommended by

00:29:32,840 --> 00:29:37,640
our consultants in ATS the problem with

00:29:36,320 --> 00:29:39,530
that was once again we're at the stage

00:29:37,640 --> 00:29:40,880
you have to design an entire new system

00:29:39,530 --> 00:29:43,280
to do something we're already used to

00:29:40,880 --> 00:29:45,890
doing so we came up with an easier

00:29:43,280 --> 00:29:47,360
option we have a control instance the

00:29:45,890 --> 00:29:50,120
control instance can use the same shared

00:29:47,360 --> 00:29:51,800
code base and pulled off s3 it connects

00:29:50,120 --> 00:29:54,050
the same database the same EFS volume

00:29:51,800 --> 00:29:57,380
but it's a different image it's not a

00:29:54,050 --> 00:29:59,990
web server and we can use auto scaling

00:29:57,380 --> 00:30:01,610
with a fixed group size of one and this

00:29:59,990 --> 00:30:05,060
means that the cron server should just

00:30:01,610 --> 00:30:06,290
stay up if it does go down the auto

00:30:05,060 --> 00:30:08,120
scaling group will start a new server

00:30:06,290 --> 00:30:09,770
only after it's been off and we can do

00:30:08,120 --> 00:30:12,020
this with cron was we can't do it as web

00:30:09,770 --> 00:30:13,460
with web obviously if your instance is

00:30:12,020 --> 00:30:15,080
booting there's five minutes that you're

00:30:13,460 --> 00:30:17,900
down for that could still be critical to

00:30:15,080 --> 00:30:19,460
your business but with krons generally

00:30:17,900 --> 00:30:20,720
you can sustain a few minutes of

00:30:19,460 --> 00:30:22,550
downtime because your cron can just

00:30:20,720 --> 00:30:23,960
catch up when it's back so you might

00:30:22,550 --> 00:30:25,400
have to think about how your jobs run if

00:30:23,960 --> 00:30:26,990
you have jobs that room once a day that

00:30:25,400 --> 00:30:28,400
are essential you might want to check

00:30:26,990 --> 00:30:29,630
they have run a little while afterwards

00:30:28,400 --> 00:30:32,000
in case something's gone wrong with your

00:30:29,630 --> 00:30:34,310
servers the way we dealt with it is

00:30:32,000 --> 00:30:36,350
using a system called cloud watch which

00:30:34,310 --> 00:30:38,090
I will introduce later and sending

00:30:36,350 --> 00:30:39,920
metrics to cloud watch that tells the

00:30:38,090 --> 00:30:41,450
server selectively if those metrics fail

00:30:39,920 --> 00:30:43,730
we get an alert at least we can go and

00:30:41,450 --> 00:30:46,670
investigate what's happening we've got

00:30:43,730 --> 00:30:49,630
this control instance but how can we SSH

00:30:46,670 --> 00:30:51,380
into the instances if they keep moving

00:30:49,630 --> 00:30:52,700
you've got this auto scaling group

00:30:51,380 --> 00:30:54,650
things are going up things are going

00:30:52,700 --> 00:30:55,880
down you don't know where your instances

00:30:54,650 --> 00:30:58,070
are day to day they might have different

00:30:55,880 --> 00:30:59,810
IP addresses but if you want to do

00:30:58,070 --> 00:31:02,630
monitoring about krons if we want to

00:30:59,810 --> 00:31:05,200
check files on the EFS volume or access

00:31:02,630 --> 00:31:07,880
MySQL through the instances without

00:31:05,200 --> 00:31:09,159
publishing a MySQL by PHP myadmin or

00:31:07,880 --> 00:31:10,899
opening my scope or

00:31:09,159 --> 00:31:13,210
publicly which I wouldn't recommend and

00:31:10,899 --> 00:31:16,359
then ssh into your instances somewhere

00:31:13,210 --> 00:31:18,340
secure is a really useful tool so a

00:31:16,359 --> 00:31:20,019
service change IP and we want to access

00:31:18,340 --> 00:31:22,210
them without opening the Avs dashboard

00:31:20,019 --> 00:31:24,190
and seeing what the current IP is we've

00:31:22,210 --> 00:31:27,309
got a few more acronyms here

00:31:24,190 --> 00:31:28,720
EW is an elastic IP basically a fixed IP

00:31:27,309 --> 00:31:30,669
address that's given to you they won't

00:31:28,720 --> 00:31:33,220
change and you can choose what server or

00:31:30,669 --> 00:31:34,929
network interface is assigned to I'm

00:31:33,220 --> 00:31:36,220
gonna have route 53 that's not an

00:31:34,929 --> 00:31:36,909
acronym but I thought I'd use this point

00:31:36,220 --> 00:31:39,849
to mention it

00:31:36,909 --> 00:31:42,549
that's Amazon's DNS service so that's

00:31:39,849 --> 00:31:44,379
how they handle all their name services

00:31:42,549 --> 00:31:48,759
and their DNS is really useful for

00:31:44,379 --> 00:31:51,940
things like load balancing um so I had a

00:31:48,759 --> 00:31:53,950
system using a IPS to map to our domains

00:31:51,940 --> 00:31:55,989
but actually whilst I was writing the

00:31:53,950 --> 00:31:57,249
notes for this slide a few weeks ago I

00:31:55,989 --> 00:31:58,539
realized there's actually a better way

00:31:57,249 --> 00:32:00,729
this is one of the wonderful things

00:31:58,539 --> 00:32:03,099
about eight of us even writing a

00:32:00,729 --> 00:32:05,979
presentation telling you how we do a ws

00:32:03,099 --> 00:32:07,359
I learned some new ways to do AWS it

00:32:05,979 --> 00:32:09,039
does mean you're always on your toes and

00:32:07,359 --> 00:32:10,239
some more always come along and tell you

00:32:09,039 --> 00:32:12,279
everything you're doing might have been

00:32:10,239 --> 00:32:12,820
wrong but it's really exciting to just

00:32:12,279 --> 00:32:17,049
keep learning

00:32:12,820 --> 00:32:19,419
so the alias CLI this is a Python

00:32:17,049 --> 00:32:22,409
package which you can install using pip

00:32:19,419 --> 00:32:24,669
and it takes your API credentials

00:32:22,409 --> 00:32:26,559
everything in any rest can be done via

00:32:24,669 --> 00:32:28,570
CLI basically their dashboard is just a

00:32:26,559 --> 00:32:30,220
big interface to their back-end command

00:32:28,570 --> 00:32:32,559
line system so anything you can do in

00:32:30,220 --> 00:32:35,590
dashboard and fetching data changing

00:32:32,559 --> 00:32:37,479
things you can do by the CLI a really

00:32:35,590 --> 00:32:39,190
helpful part of learning CLI means that

00:32:37,479 --> 00:32:40,840
you're also learning their software

00:32:39,190 --> 00:32:42,849
development kits so if you're using the

00:32:40,840 --> 00:32:46,450
PHP interface that's just named after

00:32:42,849 --> 00:32:48,099
everything from the CLI and their

00:32:46,450 --> 00:32:50,349
authentication so they have a system

00:32:48,099 --> 00:32:52,539
called I am which is a user management

00:32:50,349 --> 00:32:55,960
if you start using a DBS with any

00:32:52,539 --> 00:32:58,599
regularity you will grow to hate I am it

00:32:55,960 --> 00:33:01,119
is defining policies which allow certain

00:32:58,599 --> 00:33:02,919
users to access certain things they have

00:33:01,119 --> 00:33:04,720
recently released a nice editor for I am

00:33:02,919 --> 00:33:06,729
policies which makes things a lot less

00:33:04,720 --> 00:33:08,769
headache-inducing but some things are

00:33:06,729 --> 00:33:10,419
still complicated try and set up

00:33:08,769 --> 00:33:13,149
multi-factor authentication on one of

00:33:10,419 --> 00:33:15,190
your users if you don't believe me but

00:33:13,149 --> 00:33:18,039
if you are using the CLI you'll learn

00:33:15,190 --> 00:33:19,989
all these helpful commands you need for

00:33:18,039 --> 00:33:21,500
I am so when you run a command you then

00:33:19,989 --> 00:33:24,020
just add that command name to

00:33:21,500 --> 00:33:25,130
role or policy in I am so you can allow

00:33:24,020 --> 00:33:29,450
users to do the thing you're trying to

00:33:25,130 --> 00:33:31,400
do various CLI returns JSON and that

00:33:29,450 --> 00:33:33,980
means that output can be passed using

00:33:31,400 --> 00:33:36,860
something like JQ if you haven't used JQ

00:33:33,980 --> 00:33:40,370
it's an awesome little command-line JSON

00:33:36,860 --> 00:33:41,900
parser and search system so we can run a

00:33:40,370 --> 00:33:44,780
little system like this where we say

00:33:41,900 --> 00:33:46,400
address describe my instances with an

00:33:44,780 --> 00:33:47,840
instance ID which can be our control

00:33:46,400 --> 00:33:49,430
instance or you can put in a more

00:33:47,840 --> 00:33:52,700
complicated filter like a tag or

00:33:49,430 --> 00:33:54,250
instance size and then using JQ we

00:33:52,700 --> 00:33:56,990
filter to get the public IP address

00:33:54,250 --> 00:33:58,490
stick that into a bash script and have

00:33:56,990 --> 00:34:00,320
it ssh into whatever instance it returns

00:33:58,490 --> 00:34:02,420
from that and you now have easier search

00:34:00,320 --> 00:34:05,450
access into your server without using

00:34:02,420 --> 00:34:08,389
any other part of that of your stack if

00:34:05,450 --> 00:34:10,490
you do do this be warned when you

00:34:08,389 --> 00:34:13,510
connect to different servers twice on

00:34:10,490 --> 00:34:16,879
the same ip your SSH will freak out

00:34:13,510 --> 00:34:18,320
because it thinks it's being spoofed you

00:34:16,879 --> 00:34:21,110
can remove it using the SS keychain

00:34:18,320 --> 00:34:22,700
command there are may be ways around

00:34:21,110 --> 00:34:24,830
this I've not looked into yet I thought

00:34:22,700 --> 00:34:26,690
about there are instance startup scripts

00:34:24,830 --> 00:34:28,490
you can run which do things like set a

00:34:26,690 --> 00:34:30,800
hostname so could we actually modify the

00:34:28,490 --> 00:34:32,530
startup scripts in order to do something

00:34:30,800 --> 00:34:34,580
like set a common set of names for us

00:34:32,530 --> 00:34:36,500
but then where would you get those names

00:34:34,580 --> 00:34:38,179
from it got a little bit complicated if

00:34:36,500 --> 00:34:42,080
you have a solution for that please do

00:34:38,179 --> 00:34:44,389
tell me you're gonna miss viewing your

00:34:42,080 --> 00:34:45,889
logs though even though we can now SSH

00:34:44,389 --> 00:34:48,889
into our instances we still have a lot

00:34:45,889 --> 00:34:50,860
of them I don't know how you currently

00:34:48,889 --> 00:34:53,360
manage your logs or tracking things

00:34:50,860 --> 00:34:55,210
genuinely at the moment or so at the

00:34:53,360 --> 00:34:57,410
moment before we moved on to a DBS and

00:34:55,210 --> 00:34:59,690
the Y way of handling logs on our

00:34:57,410 --> 00:35:01,550
servers was to SSH in and stick tail on

00:34:59,690 --> 00:35:03,950
at the start of every day and just watch

00:35:01,550 --> 00:35:05,600
them coming through it's especially fun

00:35:03,950 --> 00:35:08,660
to watch a DDoS attack in real time

00:35:05,600 --> 00:35:11,060
through your access logs with no power

00:35:08,660 --> 00:35:12,680
to do anything about it and so you've

00:35:11,060 --> 00:35:14,300
got your system doing logs system-level

00:35:12,680 --> 00:35:18,110
you've got things on all flocks you've

00:35:14,300 --> 00:35:20,690
got syslog MySQL has its own logs and

00:35:18,110 --> 00:35:24,110
most likely your application is logging

00:35:20,690 --> 00:35:25,790
a lot of things already so you can

00:35:24,110 --> 00:35:27,500
change your configuration and new

00:35:25,790 --> 00:35:28,880
servers appear so all your old logs that

00:35:27,500 --> 00:35:30,860
were on the old servers just vanish

00:35:28,880 --> 00:35:33,020
so all this history of access whose

00:35:30,860 --> 00:35:35,119
access what what errors did we it did we

00:35:33,020 --> 00:35:36,819
have happen just go away

00:35:35,119 --> 00:35:38,900
but you still want to monitor everything

00:35:36,819 --> 00:35:40,579
now you could rewrite your application

00:35:38,900 --> 00:35:42,650
again all your logs just get sent

00:35:40,579 --> 00:35:44,269
somewhere remote but once more we have

00:35:42,650 --> 00:35:45,650
the business case do we actually want to

00:35:44,269 --> 00:35:47,599
rewrite our whole application how were

00:35:45,650 --> 00:35:50,059
used to doing things to deal with a new

00:35:47,599 --> 00:35:51,589
world of working if you're already

00:35:50,059 --> 00:35:54,049
seeing lots of third-party maybe you're

00:35:51,589 --> 00:35:55,730
already fine but again we're dealing

00:35:54,049 --> 00:35:58,940
with this minimal case so how did you

00:35:55,730 --> 00:36:01,339
get your logs back well currently we've

00:35:58,940 --> 00:36:03,200
said we have system logs in Val log you

00:36:01,339 --> 00:36:04,849
might have your own logs room time

00:36:03,200 --> 00:36:06,559
errors can appear in different places so

00:36:04,849 --> 00:36:08,329
sometimes they'll appear in the Apache

00:36:06,559 --> 00:36:09,559
logs sometimes PHP HUBZone logs

00:36:08,329 --> 00:36:12,470
sometimes aren't be exceptions your

00:36:09,559 --> 00:36:14,480
application logs somewhere else cron

00:36:12,470 --> 00:36:17,299
sometimes have problems for some reason

00:36:14,480 --> 00:36:18,619
often logs of invar mail if you ever

00:36:17,299 --> 00:36:20,809
found that one there's a massive mail

00:36:18,619 --> 00:36:22,220
folder with the root name and tons of

00:36:20,809 --> 00:36:24,980
logs for years of crumbs that were

00:36:22,220 --> 00:36:27,170
failing and you never knew but with

00:36:24,980 --> 00:36:29,240
multiple servers nope

00:36:27,170 --> 00:36:30,920
you can't access these logs because of

00:36:29,240 --> 00:36:33,440
you say they could vanish at any point

00:36:30,920 --> 00:36:35,509
and it's very hard to monitor them so we

00:36:33,440 --> 00:36:37,789
use cloud watch I already mentioned

00:36:35,509 --> 00:36:39,799
cloud before cloud watch is basically a

00:36:37,789 --> 00:36:41,900
degress its way of monitoring all of

00:36:39,799 --> 00:36:44,749
your stuff there's loads of features in

00:36:41,900 --> 00:36:47,329
cloud watch you have metrics dashboards

00:36:44,749 --> 00:36:49,609
alarms I could probably do an entire

00:36:47,329 --> 00:36:51,710
talk on cloud watch so come back next

00:36:49,609 --> 00:36:53,779
year for that one but this is just going

00:36:51,710 --> 00:36:55,970
to look at logs cloud watch has an agent

00:36:53,779 --> 00:36:57,589
you install this agent on your service

00:36:55,970 --> 00:36:59,809
you put it into your ami that rolls it

00:36:57,589 --> 00:37:00,950
out across all your servers and then you

00:36:59,809 --> 00:37:03,980
tell cloud watch where my logs are

00:37:00,950 --> 00:37:06,950
stored so I want to log my Apache logs

00:37:03,980 --> 00:37:08,089
I want my author lock for SSH I want

00:37:06,950 --> 00:37:10,249
various of the logs that I care about

00:37:08,089 --> 00:37:13,069
from my application to send into cloud

00:37:10,249 --> 00:37:14,359
watch the agent is really useful because

00:37:13,069 --> 00:37:16,579
it will just track your logs as you make

00:37:14,359 --> 00:37:18,380
them you can point your agent at a

00:37:16,579 --> 00:37:20,089
single log file or a directory so any

00:37:18,380 --> 00:37:22,249
new files appearing that directory

00:37:20,089 --> 00:37:24,319
should get logged it's reasonably good

00:37:22,249 --> 00:37:25,549
at handling things that log rotate so if

00:37:24,319 --> 00:37:27,230
you're rotating logs it's not going to

00:37:25,549 --> 00:37:31,609
then relog your old logs when they get

00:37:27,230 --> 00:37:34,430
rotated but every now then it does but

00:37:31,609 --> 00:37:36,319
if you want multiple log files from a

00:37:34,430 --> 00:37:38,089
single directory to be sent into

00:37:36,319 --> 00:37:39,440
different log streams because maybe it's

00:37:38,089 --> 00:37:40,849
an application-level log and you're just

00:37:39,440 --> 00:37:43,759
your developers just drop files

00:37:40,849 --> 00:37:45,289
somewhere and they log something you'll

00:37:43,759 --> 00:37:46,819
end up with them all in one stream so

00:37:45,289 --> 00:37:48,590
totally unrelated parts your application

00:37:46,819 --> 00:37:51,140
now I again have to add ABI

00:37:48,590 --> 00:37:53,330
beer isn't allowed to a directory or you

00:37:51,140 --> 00:37:56,090
have all these logs in one stream and we

00:37:53,330 --> 00:37:58,220
didn't like that so I wrote an extra log

00:37:56,090 --> 00:38:00,680
checker so it's sort of the 80s logs

00:37:58,220 --> 00:38:02,960
agent agent and what this does is this

00:38:00,680 --> 00:38:05,030
handles in a bit more intelligently your

00:38:02,960 --> 00:38:06,770
file system it analyzes your log files

00:38:05,030 --> 00:38:08,090
and then it rewrites the Atos logging

00:38:06,770 --> 00:38:11,420
agent configuration if it sees a

00:38:08,090 --> 00:38:13,910
difference and I've recently added the

00:38:11,420 --> 00:38:15,530
ability to also add instance IDs to your

00:38:13,910 --> 00:38:17,630
foot to your log streams so you can not

00:38:15,530 --> 00:38:19,370
only tell where a log is coming from but

00:38:17,630 --> 00:38:22,100
which instance created it in the first

00:38:19,370 --> 00:38:24,920
place and so if we want to be real

00:38:22,100 --> 00:38:28,160
professional loggers we can look at the

00:38:24,920 --> 00:38:31,420
ATS log package this is something again

00:38:28,160 --> 00:38:33,950
I found out whilst writing this talk and

00:38:31,420 --> 00:38:36,950
the best loggers use CL is the log

00:38:33,950 --> 00:38:39,500
package lets you have a CLI into your

00:38:36,950 --> 00:38:41,540
logs you could do things like like tail

00:38:39,500 --> 00:38:43,370
basically your entire logging

00:38:41,540 --> 00:38:45,530
infrastructure so logs from ten servers

00:38:43,370 --> 00:38:47,840
can get streamed down to a CLI on your

00:38:45,530 --> 00:38:49,160
own system so you can easily view them

00:38:47,840 --> 00:38:51,140
in real time so again for watching

00:38:49,160 --> 00:38:54,110
things like errors for watching that

00:38:51,140 --> 00:38:55,850
exciting fun fun DDoS or just for

00:38:54,110 --> 00:38:58,010
monitoring general things you can do it

00:38:55,850 --> 00:39:00,710
you can use this for search it's a

00:38:58,010 --> 00:39:02,480
really great tool really nice coloring

00:39:00,710 --> 00:39:03,050
and things like that if you're

00:39:02,480 --> 00:39:05,120
interested

00:39:03,050 --> 00:39:07,220
so again if anyone wants help setting

00:39:05,120 --> 00:39:09,620
that up just drop me your tweets I've

00:39:07,220 --> 00:39:11,570
been doing that recently so where are we

00:39:09,620 --> 00:39:14,840
now we have an application that is

00:39:11,570 --> 00:39:16,910
hopefully running on AWS we've had a few

00:39:14,840 --> 00:39:18,200
challenges we've had some slowdown we've

00:39:16,910 --> 00:39:19,580
had a lot of questions from the board of

00:39:18,200 --> 00:39:21,800
directors as to what on earth we're

00:39:19,580 --> 00:39:23,450
doing and why so many acronyms

00:39:21,800 --> 00:39:24,680
no one Reno's what they're paying for

00:39:23,450 --> 00:39:27,470
these services but we'll work that out

00:39:24,680 --> 00:39:31,460
in the end so why have we done all this

00:39:27,470 --> 00:39:34,760
well we get to the good parts and sorry

00:39:31,460 --> 00:39:36,950
Tony trout script fans and we have a lot

00:39:34,760 --> 00:39:38,420
of new flexibility and without ABS there

00:39:36,950 --> 00:39:39,740
are a lot of new tools we have as well

00:39:38,420 --> 00:39:40,940
as the ones we talked at the start the

00:39:39,740 --> 00:39:43,340
basic infrastructure of level

00:39:40,940 --> 00:39:44,900
flexibility EDPs is a constantly

00:39:43,340 --> 00:39:46,850
expanding platform I don't want to sound

00:39:44,900 --> 00:39:48,950
like some sort of fanboy a lot of these

00:39:46,850 --> 00:39:51,380
things will apply to you Google cloud

00:39:48,950 --> 00:39:53,720
platform and or Azure or anyone else who

00:39:51,380 --> 00:39:55,490
tries to seek to compete with them but

00:39:53,720 --> 00:39:57,410
the strengths of these kind of services

00:39:55,490 --> 00:39:59,600
is that they are always advancing faster

00:39:57,410 --> 00:40:01,809
than the things we build ourselves so if

00:39:59,600 --> 00:40:04,089
you want bulletproof backup

00:40:01,809 --> 00:40:06,969
if you want the ability to analyze

00:40:04,089 --> 00:40:08,439
massive amounts of data in a short

00:40:06,969 --> 00:40:09,699
amount of time you can start sending

00:40:08,439 --> 00:40:12,339
things your information into

00:40:09,699 --> 00:40:14,079
elasticsearch or into other services a

00:40:12,339 --> 00:40:16,029
degress offer and every time that you

00:40:14,079 --> 00:40:18,279
think a service is really hard to set up

00:40:16,029 --> 00:40:20,439
and use and configure you can guarantee

00:40:18,279 --> 00:40:21,969
that in about a year's time a DBS is

00:40:20,439 --> 00:40:24,309
going to have automated that process for

00:40:21,969 --> 00:40:26,109
you so each each time each year each

00:40:24,309 --> 00:40:28,269
time they release new features our

00:40:26,109 --> 00:40:30,039
ability as developers just goes bigger

00:40:28,269 --> 00:40:33,910
we have to do less of the boilerplate of

00:40:30,039 --> 00:40:35,709
managing servers of SSH into things and

00:40:33,910 --> 00:40:38,049
more of building our applications and

00:40:35,709 --> 00:40:40,930
our services one of things I realized

00:40:38,049 --> 00:40:42,969
fairly early on is that actually a DBS

00:40:40,930 --> 00:40:46,059
is seen as a cloud server provider it's

00:40:42,969 --> 00:40:48,099
not it's a cloud data center with a DBS

00:40:46,059 --> 00:40:50,799
you have the ability to create an entire

00:40:48,099 --> 00:40:52,509
data center architecture if you want you

00:40:50,799 --> 00:40:55,209
can create networking systems you can

00:40:52,509 --> 00:40:56,859
create firewalls you can use nap

00:40:55,209 --> 00:40:59,019
gateways to route traffic to different

00:40:56,859 --> 00:41:00,819
places you can make different subnets

00:40:59,019 --> 00:41:03,699
that talk to each other you can create

00:41:00,819 --> 00:41:05,829
Bank level security in your own little

00:41:03,699 --> 00:41:09,549
application just by firing a few things

00:41:05,829 --> 00:41:10,509
at the ad rest console or CLI and it

00:41:09,549 --> 00:41:13,420
really does offer a huge amount of

00:41:10,509 --> 00:41:15,939
flexibility challenges that that would

00:41:13,420 --> 00:41:17,259
at one time be very insurmountable to a

00:41:15,939 --> 00:41:20,380
small development team a very easy

00:41:17,259 --> 00:41:22,359
variable yes we had an API client who we

00:41:20,380 --> 00:41:24,189
started working with who told us shortly

00:41:22,359 --> 00:41:26,049
after our integration was finished that

00:41:24,189 --> 00:41:28,809
the API could only be accessed over HTTP

00:41:26,049 --> 00:41:32,109
and that wasn't secure which is good

00:41:28,809 --> 00:41:33,880
news to us but that to be secure we were

00:41:32,109 --> 00:41:36,249
gonna have a VPN permanently into their

00:41:33,880 --> 00:41:38,380
internal intranet in order to access the

00:41:36,249 --> 00:41:41,559
API I mean you know who ever heard of

00:41:38,380 --> 00:41:43,089
rest right with a previous provider we'd

00:41:41,559 --> 00:41:44,319
have had to say well we can't do this we

00:41:43,089 --> 00:41:46,089
now have to talk to our server provider

00:41:44,319 --> 00:41:47,349
they have to set up networking systems a

00:41:46,089 --> 00:41:51,099
VPN it's going to cost a lot of money

00:41:47,349 --> 00:41:54,429
who monitors it with a DBS I look to for

00:41:51,099 --> 00:41:55,660
guidance a less and I followed it and I

00:41:54,429 --> 00:41:57,130
sent them the configuration at the end

00:41:55,660 --> 00:41:59,739
and we now have a VPN into their network

00:41:57,130 --> 00:42:02,259
still a stupid system but we could

00:41:59,739 --> 00:42:03,849
actually do it without extra expertise

00:42:02,259 --> 00:42:05,170
or extra money even though this

00:42:03,849 --> 00:42:08,049
requirement is just dropped on us at the

00:42:05,170 --> 00:42:08,799
end of a long project so anywhere is a

00:42:08,049 --> 00:42:10,929
cloud datacenter

00:42:08,799 --> 00:42:13,650
you will find more and more ways to use

00:42:10,929 --> 00:42:15,460
it once your based on their platform

00:42:13,650 --> 00:42:17,200
terraform

00:42:15,460 --> 00:42:19,840
terraform is something you might not

00:42:17,200 --> 00:42:23,080
have heard of before this is one of

00:42:19,840 --> 00:42:25,900
these configuration as code systems so

00:42:23,080 --> 00:42:28,210
terraform allows you to declare what you

00:42:25,900 --> 00:42:30,700
want your ats infrastructure to be so to

00:42:28,210 --> 00:42:33,730
declare your dns your s3 buckets your

00:42:30,700 --> 00:42:35,770
instances databases networking uses

00:42:33,730 --> 00:42:37,210
everything and then it will go to a

00:42:35,770 --> 00:42:39,280
degree s and say this is all the stuff I

00:42:37,210 --> 00:42:40,720
want what's currently there and what we

00:42:39,280 --> 00:42:43,090
need to change and it will handle it all

00:42:40,720 --> 00:42:44,500
for you it's a great thing they've made

00:42:43,090 --> 00:42:45,670
their own little language there's a

00:42:44,500 --> 00:42:47,160
syntax highlighter for terraform

00:42:45,670 --> 00:42:51,040
available for phpstorm

00:42:47,160 --> 00:42:53,710
and terraform genuinely changes the way

00:42:51,040 --> 00:42:55,030
you actually use lus I don't know if you

00:42:53,710 --> 00:42:56,680
would get the same benefit from going

00:42:55,030 --> 00:42:58,240
straight in to terraform it might be

00:42:56,680 --> 00:43:00,130
helpful to use their console for a bit

00:42:58,240 --> 00:43:01,960
first sort of learned the basics before

00:43:00,130 --> 00:43:03,010
you then add terraform I think once

00:43:01,960 --> 00:43:04,390
you've been using the console for a

00:43:03,010 --> 00:43:06,550
while moving to terraform suddenly

00:43:04,390 --> 00:43:07,780
changes your life in a new way

00:43:06,550 --> 00:43:11,020
if you want to learn more about teraphim

00:43:07,780 --> 00:43:13,660
and theis is doing a talk at 2:40 in the

00:43:11,020 --> 00:43:16,110
main track and talking about that and a

00:43:13,660 --> 00:43:18,670
few other DevOps tools so I'll be there

00:43:16,110 --> 00:43:20,530
to try and unlearn everything I've

00:43:18,670 --> 00:43:23,320
already learned and so come and join us

00:43:20,530 --> 00:43:25,690
for that and CloudFront

00:43:23,320 --> 00:43:28,060
you can use cloud for right now if

00:43:25,690 --> 00:43:29,830
you're not using CloudFront maybe take

00:43:28,060 --> 00:43:32,590
some time at lunchtime today to go and

00:43:29,830 --> 00:43:35,230
start using cloud front cloud front is

00:43:32,590 --> 00:43:37,240
an edge caching system simply put this

00:43:35,230 --> 00:43:40,660
means that it caches things from your

00:43:37,240 --> 00:43:42,610
server near to where your users are so

00:43:40,660 --> 00:43:44,050
static resources basically so you're

00:43:42,610 --> 00:43:45,250
serving JavaScript you probably are

00:43:44,050 --> 00:43:47,230
you're probably having some massive

00:43:45,250 --> 00:43:49,630
overblown JavaScript libraries go and

00:43:47,230 --> 00:43:51,190
catch them you're serving CSS go and

00:43:49,630 --> 00:43:52,630
cache that serving massive image files

00:43:51,190 --> 00:43:55,360
that no one's ever bought to optimise go

00:43:52,630 --> 00:43:57,190
and cache those to CloudFront can be put

00:43:55,360 --> 00:43:59,680
in front of your existing site right

00:43:57,190 --> 00:44:02,050
away and simply cache requests for

00:43:59,680 --> 00:44:04,420
certain resource types it takes a bit of

00:44:02,050 --> 00:44:06,610
configuration to start with but why bit

00:44:04,420 --> 00:44:08,110
I mean maybe two hours and then you

00:44:06,610 --> 00:44:09,280
suddenly have this massive load

00:44:08,110 --> 00:44:10,750
reduction on your server because your

00:44:09,280 --> 00:44:12,460
server isn't trying to work out how to

00:44:10,750 --> 00:44:13,930
constantly serve ten million JavaScript

00:44:12,460 --> 00:44:15,010
files anymore your server can do what

00:44:13,930 --> 00:44:17,560
it's there to do which is produced

00:44:15,010 --> 00:44:19,150
dynamic web content CloudFront is also

00:44:17,560 --> 00:44:21,250
really useful tool even in front of your

00:44:19,150 --> 00:44:22,990
dynamic web content because you can

00:44:21,250 --> 00:44:24,430
apply amazon's firewall technology to it

00:44:22,990 --> 00:44:27,040
so if you are someone it comes under

00:44:24,430 --> 00:44:28,920
DDoS attack if you come under lots of

00:44:27,040 --> 00:44:31,770
people trying to do SQL injection

00:44:28,920 --> 00:44:33,660
attacks automatically on your system use

00:44:31,770 --> 00:44:35,460
CloudFront with their firewall system

00:44:33,660 --> 00:44:39,150
which allows it to do things like strip

00:44:35,460 --> 00:44:40,740
out malicious SQL from your requests so

00:44:39,150 --> 00:44:42,570
CloudFront will save your server load

00:44:40,740 --> 00:44:44,070
and it will improve browser performance

00:44:42,570 --> 00:44:46,020
for your users and that especially

00:44:44,070 --> 00:44:47,730
matters if your global so if you're a

00:44:46,020 --> 00:44:50,849
global business serving people in

00:44:47,730 --> 00:44:52,380
Australia whilst your site content is

00:44:50,849 --> 00:44:53,820
quite small and gets there quickly your

00:44:52,380 --> 00:44:54,780
images in your CSS and JavaScript are

00:44:53,820 --> 00:44:56,310
going to take ages to get there

00:44:54,780 --> 00:44:59,490
CloudFront caches them near to your

00:44:56,310 --> 00:44:59,910
users so like a combination of go and go

00:44:59,490 --> 00:45:01,140
and do it now

00:44:59,910 --> 00:45:02,970
I think cloud form probably saved our

00:45:01,140 --> 00:45:04,109
life this year before we could finish

00:45:02,970 --> 00:45:08,070
our migration to ell us

00:45:04,109 --> 00:45:09,290
I went nice identity had a baby and that

00:45:08,070 --> 00:45:12,000
suddenly took me out of work for a while

00:45:09,290 --> 00:45:13,619
and that meant that during the busiest

00:45:12,000 --> 00:45:16,109
time of our year no one was there to

00:45:13,619 --> 00:45:18,150
manage our infrastructure helpfully we

00:45:16,109 --> 00:45:19,440
deploy cloud from the week before and

00:45:18,150 --> 00:45:21,990
that meant that this massive amount of

00:45:19,440 --> 00:45:23,070
load in our service just died and our

00:45:21,990 --> 00:45:25,470
servers went down to a much better

00:45:23,070 --> 00:45:28,710
baseline load so yeah I can't advocate

00:45:25,470 --> 00:45:29,940
for enough and that's it thank you for

00:45:28,710 --> 00:45:33,330
listening

00:45:29,940 --> 00:45:35,730
don't clap yet and once again you can

00:45:33,330 --> 00:45:37,920
find on Twitter at Mike Allen slack

00:45:35,730 --> 00:45:39,720
their PHP Northwest slack group is open

00:45:37,920 --> 00:45:43,170
if you want to invite to that on PHP

00:45:39,720 --> 00:45:45,180
Northwest audit UK and og AWS this is

00:45:43,170 --> 00:45:46,680
the open guide to 80s

00:45:45,180 --> 00:45:48,990
it's a github repo you can contribute to

00:45:46,680 --> 00:45:50,369
if you have your own feedback and they

00:45:48,990 --> 00:45:52,470
have an amazing slack channel with a

00:45:50,369 --> 00:45:54,390
really helpful community lots of them

00:45:52,470 --> 00:45:57,570
are based in London and lots worldwide

00:45:54,390 --> 00:45:58,859
so join us if you want some real good

00:45:57,570 --> 00:46:00,420
advice and that's where I get most of my

00:45:58,859 --> 00:46:03,030
information so you'll see me every their

00:46:00,420 --> 00:46:06,650
daily asking questions um if you like

00:46:03,030 --> 00:46:06,650

YouTube URL: https://www.youtube.com/watch?v=ofJULYfOUlI


