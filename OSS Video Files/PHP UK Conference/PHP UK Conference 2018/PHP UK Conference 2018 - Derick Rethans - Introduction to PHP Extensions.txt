Title: PHP UK Conference 2018 - Derick Rethans - Introduction to PHP Extensions
Publication date: 2018-03-27
Playlist: PHP UK Conference 2018
Description: 
	n this presentation, we take a first look at writing PHP extensions. Using step-by-step examples, we'll take a function written in PHP and convert them into a loadable extension using C. We'll then test both versions and compare the results. After seeing the size and scope of the benefits that can be realized with only a few minor changes, you'll want to try it out for yourself. You'll also understand why we start with simple things, and not try to rewrite all of Symfony in C.
Captions: 
	00:00:02,960 --> 00:00:10,309
I'm giving a talk it's an introduction

00:00:05,990 --> 00:00:12,080
into PHP extensions when I was yesterday

00:00:10,309 --> 00:00:13,760
talking to somebody they thought I was

00:00:12,080 --> 00:00:15,860
going to show you lots of different PHP

00:00:13,760 --> 00:00:18,099
extensions which is not the case I'm

00:00:15,860 --> 00:00:21,800
going to talk about a little bit about

00:00:18,099 --> 00:00:23,599
why you why you might want to write an

00:00:21,800 --> 00:00:25,119
extension and then show a little bit on

00:00:23,599 --> 00:00:27,200
how you actually end up doing this and a

00:00:25,119 --> 00:00:31,669
little bit about myself I'm Derrick

00:00:27,200 --> 00:00:34,969
hello good morning good morning just

00:00:31,669 --> 00:00:36,379
making sure y'all awake at I work from

00:00:34,969 --> 00:00:39,469
longer to be on the PHP driver from

00:00:36,379 --> 00:00:40,879
MongoDB as Matt already set I wrote XT

00:00:39,469 --> 00:00:42,859
bug peach peach day times worked on a

00:00:40,879 --> 00:00:46,190
whole bunch of other things I like maps

00:00:42,859 --> 00:00:48,019
I like beer I like whiskey I don't think

00:00:46,190 --> 00:00:50,539
I have any examples of either of those

00:00:48,019 --> 00:00:51,920
in my slides as I usually have there's

00:00:50,539 --> 00:00:53,629
any questions we'll keep those to the

00:00:51,920 --> 00:00:55,370
end because otherwise you need to keep

00:00:53,629 --> 00:00:57,890
turning off the lights and stuff like

00:00:55,370 --> 00:00:59,600
that and I'm more than happy to hear

00:00:57,890 --> 00:01:02,569
your later questions and comments either

00:00:59,600 --> 00:01:04,670
on Twitter or by email or enjoined in of

00:01:02,569 --> 00:01:06,530
course but also the all the contact

00:01:04,670 --> 00:01:07,549
leaders on the last night all right so

00:01:06,530 --> 00:01:09,979
what are we going to talk about this

00:01:07,549 --> 00:01:12,110
morning well you're going to have a look

00:01:09,979 --> 00:01:13,939
at what our extensions why would you

00:01:12,110 --> 00:01:16,070
want to write wrong and how do we write

00:01:13,939 --> 00:01:18,409
an extension now the last point really

00:01:16,070 --> 00:01:20,540
needs about a week's time I have 50

00:01:18,409 --> 00:01:23,630
minutes so I don't expect that you'll be

00:01:20,540 --> 00:01:25,070
fully fledged PHP extension developer by

00:01:23,630 --> 00:01:26,630
the end of this presentation it's just

00:01:25,070 --> 00:01:30,170
not enough time for this to do is in 50

00:01:26,630 --> 00:01:32,840
minutes or even a day reading all right

00:01:30,170 --> 00:01:35,030
so what our extent is well extensions in

00:01:32,840 --> 00:01:39,130
PHP bring you additional functions and

00:01:35,030 --> 00:01:41,390
classes so if you just look at PHP wrong

00:01:39,130 --> 00:01:43,729
the only thing it really influences the

00:01:41,390 --> 00:01:46,430
syntax it won't have think functions

00:01:43,729 --> 00:01:48,770
like stln or any of the array functions

00:01:46,430 --> 00:01:51,079
that I'll implement as extensions now

00:01:48,770 --> 00:01:53,659
all those extensions are written in C

00:01:51,079 --> 00:01:55,729
some of them like for example the

00:01:53,659 --> 00:01:56,960
date/time extension or the standard

00:01:55,729 --> 00:01:58,369
accenture it influenced all the array

00:01:56,960 --> 00:02:00,619
function and string function stuff like

00:01:58,369 --> 00:02:02,359
that they are actually part of PHP and

00:02:00,619 --> 00:02:04,399
are very difficult to separate from it

00:02:02,359 --> 00:02:07,039
but technically they are developed as a

00:02:04,399 --> 00:02:09,289
extension and some people have tried in

00:02:07,039 --> 00:02:11,300
the past when they wanted to run PHP on

00:02:09,289 --> 00:02:13,480
embedded systems actually not low-dose

00:02:11,300 --> 00:02:15,390
by change making things through the code

00:02:13,480 --> 00:02:17,790
so

00:02:15,390 --> 00:02:19,380
these are although these are extensions

00:02:17,790 --> 00:02:22,700
days of course although extensions that

00:02:19,380 --> 00:02:25,140
she load did she sometimes load into PHP

00:02:22,700 --> 00:02:28,140
it's very common for Linux distribution

00:02:25,140 --> 00:02:31,800
that all the extra extension aren't part

00:02:28,140 --> 00:02:34,110
of the PHP core for example you load two

00:02:31,800 --> 00:02:36,150
shared objects those are extensions that

00:02:34,110 --> 00:02:38,070
are compelled separately from PHP but

00:02:36,150 --> 00:02:40,710
loaded into the same process to your

00:02:38,070 --> 00:02:43,260
extension equals lines in PHP i9 and

00:02:40,710 --> 00:02:45,030
some of them are bundled with PHP yes

00:02:43,260 --> 00:02:47,520
for example my school is bundled with

00:02:45,030 --> 00:02:50,600
PHP some are distributed to Peckham

00:02:47,520 --> 00:02:54,270
which is the PHP extension code library

00:02:50,600 --> 00:02:56,420
that does a backronym I mean I don't I

00:02:54,270 --> 00:02:59,130
sure actually meant something else but

00:02:56,420 --> 00:03:01,830
you'll just make something up as we go

00:02:59,130 --> 00:03:03,570
right as for example Act among it'll be

00:03:01,830 --> 00:03:05,910
extension you can install by by using

00:03:03,570 --> 00:03:07,350
pecco install extension name and there's

00:03:05,910 --> 00:03:09,060
also a whole bunch of extensions that

00:03:07,350 --> 00:03:10,380
are not available through peco's so you

00:03:09,060 --> 00:03:12,390
need to go find them on the internet on

00:03:10,380 --> 00:03:14,340
clone github repositories and whatever

00:03:12,390 --> 00:03:16,230
things people come up with sometimes

00:03:14,340 --> 00:03:19,500
so there's different class of extensions

00:03:16,230 --> 00:03:21,989
different ways of distributing them and

00:03:19,500 --> 00:03:24,120
but are all written in C with a very old

00:03:21,989 --> 00:03:27,420
exception of an extension written in C++

00:03:24,120 --> 00:03:29,459
hander alright so why would you want to

00:03:27,420 --> 00:03:31,290
write on right I mean it's a lot harder

00:03:29,459 --> 00:03:32,910
to write C code Ernest to write PHP code

00:03:31,290 --> 00:03:36,000
especially when you need to think about

00:03:32,910 --> 00:03:39,570
debugging as well as memory management

00:03:36,000 --> 00:03:41,220
and stuff like that so when starting to

00:03:39,570 --> 00:03:42,570
think why would I want to our next

00:03:41,220 --> 00:03:44,400
century well there's a few reasons why

00:03:42,570 --> 00:03:46,950
you might want to do that so the first

00:03:44,400 --> 00:03:50,459
one is if you want to wrap an existing

00:03:46,950 --> 00:03:52,310
library not everything can actually be

00:03:50,459 --> 00:03:54,450
implemented in PHP code directly or

00:03:52,310 --> 00:03:56,400
sometimes for speed so let's have a look

00:03:54,450 --> 00:03:59,840
at it of this category so the first one

00:03:56,400 --> 00:04:03,739
is the wrapping libraries on right so

00:03:59,840 --> 00:04:06,570
most database drivers there's always a

00:04:03,739 --> 00:04:08,250
library system the whole library

00:04:06,570 --> 00:04:11,130
available that implements all a

00:04:08,250 --> 00:04:13,680
complicated connection management query

00:04:11,130 --> 00:04:15,180
translation and stuff like that so form

00:04:13,680 --> 00:04:17,190
I'm gonna be does live longer see for my

00:04:15,180 --> 00:04:20,430
scholars live my scroll as an example

00:04:17,190 --> 00:04:23,700
here image processing libraries much

00:04:20,430 --> 00:04:26,280
more easy to do because these libraries

00:04:23,700 --> 00:04:27,120
already exists rewriting them in PHP is

00:04:26,280 --> 00:04:28,920
a bit silly

00:04:27,120 --> 00:04:31,920
although some people do that

00:04:28,920 --> 00:04:33,450
you can you can write 3d rendering ray

00:04:31,920 --> 00:04:35,790
traces in PHP if you really want to do

00:04:33,450 --> 00:04:38,430
that it's not going to be very fast but

00:04:35,790 --> 00:04:40,200
you can um so yeah all this wrapping

00:04:38,430 --> 00:04:42,120
these libraries that is one of the one

00:04:40,200 --> 00:04:43,980
of two use case and the one that most

00:04:42,120 --> 00:04:45,300
people actually tend to do because I

00:04:43,980 --> 00:04:47,390
already have some functionality they're

00:04:45,300 --> 00:04:49,770
now going to make available in PHP and

00:04:47,390 --> 00:04:51,240
writing this very thin layer in between

00:04:49,770 --> 00:04:54,300
a library and PHP isn't actually that

00:04:51,240 --> 00:04:55,920
difficult to do so the other thing is

00:04:54,300 --> 00:04:58,050
there so not everything is possible

00:04:55,920 --> 00:05:00,120
doing and userland image userland I mean

00:04:58,050 --> 00:05:02,610
writing things in PHP itself like

00:05:00,120 --> 00:05:05,280
writing PHP scripts so if you need to

00:05:02,610 --> 00:05:07,020
persist data in between requests you

00:05:05,280 --> 00:05:09,900
can't really do that in PHP userland

00:05:07,020 --> 00:05:12,030
you can of course store things in shared

00:05:09,900 --> 00:05:13,830
memory like PHP data structure and tough

00:05:12,030 --> 00:05:16,860
like that but you cannot do that for

00:05:13,830 --> 00:05:18,750
connections C C or system level

00:05:16,860 --> 00:05:21,060
connections to your database for example

00:05:18,750 --> 00:05:22,620
you can't really model those in PHP

00:05:21,060 --> 00:05:24,720
Uslan so if you want to have persistent

00:05:22,620 --> 00:05:27,540
connections you're required to read in

00:05:24,720 --> 00:05:29,760
extensions and in extension there's

00:05:27,540 --> 00:05:32,250
different ways and tricks of how you can

00:05:29,760 --> 00:05:33,930
do these these positioned connections

00:05:32,250 --> 00:05:35,670
and then of course there's a whole bunch

00:05:33,930 --> 00:05:39,270
of extensions that need to look so deep

00:05:35,670 --> 00:05:40,680
into PHP internals that yeah you just

00:05:39,270 --> 00:05:44,550
can't do that in petrie user and so the

00:05:40,680 --> 00:05:46,110
things as VOD which is a tool to to see

00:05:44,550 --> 00:05:49,860
what goes on and at Hooten PHP or X

00:05:46,110 --> 00:05:51,540
debug the things index debug turkey does

00:05:49,860 --> 00:05:53,460
you can definitely not do in PHP user

00:05:51,540 --> 00:05:56,060
lens and the same thing with PHP up

00:05:53,460 --> 00:05:58,860
cache right it is it's a low-level

00:05:56,060 --> 00:06:00,690
system thing kind of stuff does that

00:05:58,860 --> 00:06:01,830
stores things in shared memory for you

00:06:00,690 --> 00:06:05,190
and that's something you can't do in PHP

00:06:01,830 --> 00:06:07,200
them so those things you have to write

00:06:05,190 --> 00:06:09,360
an extension for and then the third one

00:06:07,200 --> 00:06:12,600
is speed I mean PHP is a very fast

00:06:09,360 --> 00:06:14,070
language especially in PHP seven but C

00:06:12,600 --> 00:06:16,620
is still going to be faster and there's

00:06:14,070 --> 00:06:19,880
no way around this right so which means

00:06:16,620 --> 00:06:22,620
that algorithmic implementations and see

00:06:19,880 --> 00:06:26,040
often outperform code and PHP that

00:06:22,620 --> 00:06:26,750
should be should be quite obvious really

00:06:26,040 --> 00:06:30,540
right

00:06:26,750 --> 00:06:31,740
all right so on the other side why do

00:06:30,540 --> 00:06:33,480
you not want to implement something

00:06:31,740 --> 00:06:35,010
extension I think my abstract at some

00:06:33,480 --> 00:06:37,140
points that and I will tell you why not

00:06:35,010 --> 00:06:40,380
to implement offs or symphony in xn

00:06:37,140 --> 00:06:42,210
choice because it takes a lot more time

00:06:40,380 --> 00:06:46,800
to write extensions

00:06:42,210 --> 00:06:48,750
then it takes to write PHP code C is a

00:06:46,800 --> 00:06:50,009
harder language you need to deal with

00:06:48,750 --> 00:06:51,720
pointers you need to deal with memory

00:06:50,009 --> 00:06:53,610
management you to make sure you clean up

00:06:51,720 --> 00:06:55,259
your memory that you don't reuse memory

00:06:53,610 --> 00:06:58,319
that you've already freed none of those

00:06:55,259 --> 00:06:59,880
problems exists in PHP the same on the

00:06:58,319 --> 00:07:01,770
same side debugging things and see

00:06:59,880 --> 00:07:03,900
extensions is harder than doing this in

00:07:01,770 --> 00:07:06,270
PHP as oh I mean the debugging tools are

00:07:03,900 --> 00:07:08,430
just as good but it's because the whole

00:07:06,270 --> 00:07:10,349
concept is more complex the debugging is

00:07:08,430 --> 00:07:11,940
more complex as well and because of that

00:07:10,349 --> 00:07:13,770
the maintenance it takes a lot more time

00:07:11,940 --> 00:07:16,919
to make the maintain as extensions right

00:07:13,770 --> 00:07:19,740
so it makes sense that if you have

00:07:16,919 --> 00:07:21,389
something in a big PHP framework or let

00:07:19,740 --> 00:07:23,870
me take an example actually it's a real

00:07:21,389 --> 00:07:26,849
example the trick templating language

00:07:23,870 --> 00:07:29,099
when this is written was seven eight

00:07:26,849 --> 00:07:30,810
years ago might be a bit old out on the

00:07:29,099 --> 00:07:34,110
time frame but about seven eight years

00:07:30,810 --> 00:07:35,580
ago is the people who wrote a fairly

00:07:34,110 --> 00:07:38,520
important share I think he reached out

00:07:35,580 --> 00:07:40,020
to me said well we've used profilers and

00:07:38,520 --> 00:07:42,240
figured out everything but it says one

00:07:40,020 --> 00:07:43,830
function this vom function that is just

00:07:42,240 --> 00:07:47,190
really slow and we can't optimize this

00:07:43,830 --> 00:07:48,750
and you ask well can you see where our

00:07:47,190 --> 00:07:51,000
writing extension for this actually

00:07:48,750 --> 00:07:53,009
makes sense so there's now a trixie

00:07:51,000 --> 00:07:55,889
extension that implements just this one

00:07:53,009 --> 00:07:58,500
single function because that's the only

00:07:55,889 --> 00:08:00,750
thing that made sense to write in P and

00:07:58,500 --> 00:08:03,060
in C code because it was is one thing it

00:08:00,750 --> 00:08:04,620
couldn't be optimized in PHP anymore but

00:08:03,060 --> 00:08:06,389
it still was taking a lot of time so

00:08:04,620 --> 00:08:08,190
doing N and C makes a lot of sense and

00:08:06,389 --> 00:08:09,719
of course if you use trick you can now

00:08:08,190 --> 00:08:12,509
choose to install this extension or it

00:08:09,719 --> 00:08:14,849
count or choose not to insult so

00:08:12,509 --> 00:08:16,380
implementing very specific parts of an

00:08:14,849 --> 00:08:19,320
application of framework makes a lot of

00:08:16,380 --> 00:08:21,419
sense sometimes during all Symphony or

00:08:19,320 --> 00:08:22,979
off trick it's going to take you years

00:08:21,419 --> 00:08:25,740
and years and years and you're not going

00:08:22,979 --> 00:08:28,050
to be very happy afterwards I can tell

00:08:25,740 --> 00:08:32,430
I've tried all right so let's talk about

00:08:28,050 --> 00:08:34,589
Belgium oh the maps came back after I'd

00:08:32,430 --> 00:08:36,419
forgotten so Belgium right if you want

00:08:34,589 --> 00:08:38,250
to draw the outer end of Belgium you

00:08:36,419 --> 00:08:39,690
have quite a lot of lines here right of

00:08:38,250 --> 00:08:41,550
course if you zoom out you don't really

00:08:39,690 --> 00:08:43,140
care about all the with squiggly lines

00:08:41,550 --> 00:08:45,930
of border between the Netherlands and

00:08:43,140 --> 00:08:48,240
Belgium for example at the top so when

00:08:45,930 --> 00:08:50,550
you zoom out drawing the outline the

00:08:48,240 --> 00:08:51,810
border outline of Belgium it's taking a

00:08:50,550 --> 00:08:53,010
lot of time right especially if you want

00:08:51,810 --> 00:08:54,810
to do it for all the countries in the

00:08:53,010 --> 00:08:55,950
world I mean the browser is going to

00:08:54,810 --> 00:08:57,570
take a lot of time drawing all

00:08:55,950 --> 00:08:59,880
those things with true JavaScript lines

00:08:57,570 --> 00:09:01,770
and canvas stuff and whatever so having

00:08:59,880 --> 00:09:03,720
an algorithm that optimizes the outline

00:09:01,770 --> 00:09:05,910
of polygons actually makes a lot of

00:09:03,720 --> 00:09:07,890
sense you need to do something like that

00:09:05,910 --> 00:09:10,590
otherwise she just won't be able to show

00:09:07,890 --> 00:09:12,540
things in a browser anymore so this is

00:09:10,590 --> 00:09:14,460
actually thing I was looking at for some

00:09:12,540 --> 00:09:16,950
hobby project at some point and I

00:09:14,460 --> 00:09:18,960
realized well I need to do this better I

00:09:16,950 --> 00:09:20,880
mean I need to simplify those lines in

00:09:18,960 --> 00:09:24,960
order to be able to draw all the things

00:09:20,880 --> 00:09:26,760
I want on a map all right so yeah when

00:09:24,960 --> 00:09:29,490
you get to Belgium polygon I mean I can

00:09:26,760 --> 00:09:31,020
scroll down I want but it's a very very

00:09:29,490 --> 00:09:34,110
long list of coordinates right it's like

00:09:31,020 --> 00:09:36,450
1,200 lines or something like that and

00:09:34,110 --> 00:09:38,820
there's of course algorithms to simplify

00:09:36,450 --> 00:09:40,950
these polygons into something so it's

00:09:38,820 --> 00:09:42,630
called a Rama Douglas Tucker if that's

00:09:40,950 --> 00:09:43,860
how you pronounce that I don't know yeah

00:09:42,630 --> 00:09:47,220
something like that which is not a

00:09:43,860 --> 00:09:49,280
recursive algorithm that simplifies

00:09:47,220 --> 00:09:51,420
polygons by looking at a full line

00:09:49,280 --> 00:09:53,760
determining like an something they call

00:09:51,420 --> 00:09:56,720
epsilon which is that it's difficult to

00:09:53,760 --> 00:10:00,750
see in the contrast here but it's the

00:09:56,720 --> 00:10:02,730
how do you say that the light blue box

00:10:00,750 --> 00:10:04,470
it draws around the lines in the

00:10:02,730 --> 00:10:05,690
algorithm so that is the epsilon the way

00:10:04,470 --> 00:10:08,430
how this works if you look at the line

00:10:05,690 --> 00:10:10,800
you draw the line between the outside

00:10:08,430 --> 00:10:12,420
points you draw the epsilon box around

00:10:10,800 --> 00:10:16,410
it and all the points that far out of

00:10:12,420 --> 00:10:20,090
the box are considered to stay in the in

00:10:16,410 --> 00:10:23,760
the end result of the of the algorithm

00:10:20,090 --> 00:10:25,650
so this is recursive algorithm and then

00:10:23,760 --> 00:10:29,040
comes up with a simplified polygon now

00:10:25,650 --> 00:10:31,200
if I did it for Belgium a hundred times

00:10:29,040 --> 00:10:34,560
when an afternoon of 0.01 which is only

00:10:31,200 --> 00:10:36,620
a small small simplification doing an in

00:10:34,560 --> 00:10:40,170
the PHP function takes about 45 seconds

00:10:36,620 --> 00:10:42,390
doing this in C it took me a third of a

00:10:40,170 --> 00:10:45,510
second which is a whole lot faster ice

00:10:42,390 --> 00:10:48,810
are we going warp speeds need to get to

00:10:45,510 --> 00:10:50,640
get jokes in somehow and so yes it is so

00:10:48,810 --> 00:10:54,350
much faster right and because this is an

00:10:50,640 --> 00:10:56,760
an algorithm a complex thing to run

00:10:54,350 --> 00:10:58,260
implementing these little things in C

00:10:56,760 --> 00:11:00,360
makes all of sense so let's have a look

00:10:58,260 --> 00:11:03,690
at how we're actually doing that so what

00:11:00,360 --> 00:11:06,750
makes up an extension in PHP no this is

00:11:03,690 --> 00:11:09,480
a mostly it is conventions not all the

00:11:06,750 --> 00:11:12,020
extensions follow all these things

00:11:09,480 --> 00:11:16,110
that most of the most extensions will do

00:11:12,020 --> 00:11:19,110
so there is a config m4 and a config

00:11:16,110 --> 00:11:21,540
w-30 - phone these are the files that

00:11:19,110 --> 00:11:24,840
provide build instructions to PHP build

00:11:21,540 --> 00:11:29,820
system m4 is a really ridiculously

00:11:24,840 --> 00:11:31,650
annoying macro language we've just gone

00:11:29,820 --> 00:11:34,560
through re-implementing this for the

00:11:31,650 --> 00:11:36,150
MongoDB driver and because we have so

00:11:34,560 --> 00:11:40,170
many libraries that we need to depend on

00:11:36,150 --> 00:11:44,460
doing that if not easy it is really

00:11:40,170 --> 00:11:46,230
really gross language to use config w 32

00:11:44,460 --> 00:11:48,270
which is this Windows equivalent is all

00:11:46,230 --> 00:11:50,430
done in JavaScript ish which is a lot

00:11:48,270 --> 00:11:51,840
easier but then on Windows you don't

00:11:50,430 --> 00:11:54,330
really need to do much configuration

00:11:51,840 --> 00:11:56,220
because you can assume things being

00:11:54,330 --> 00:11:57,720
there a lot more than on on Linux or

00:11:56,220 --> 00:11:59,790
UNIX based system right because coming

00:11:57,720 --> 00:12:02,610
unforce for every unix you can think of

00:11:59,790 --> 00:12:05,330
a max whereas the w 32 is just for

00:12:02,610 --> 00:12:07,740
windows making that a lot easier alright

00:12:05,330 --> 00:12:10,700
so we'll look at all those files in a

00:12:07,740 --> 00:12:13,560
moment you have a PHP underscore

00:12:10,700 --> 00:12:15,480
extension name dot H phone which is the

00:12:13,560 --> 00:12:17,490
head of files and provide some glue some

00:12:15,480 --> 00:12:18,270
help to PHP to be able to load things

00:12:17,490 --> 00:12:20,520
and stuff like that

00:12:18,270 --> 00:12:23,460
you have extension name don't see which

00:12:20,520 --> 00:12:25,050
implements the extension definition

00:12:23,460 --> 00:12:27,300
functional implementations basically

00:12:25,050 --> 00:12:29,370
implementation you can choose to have of

00:12:27,300 --> 00:12:31,710
course multiple file so if you have an

00:12:29,370 --> 00:12:33,630
algorithm already has a C function you

00:12:31,710 --> 00:12:35,730
often have separate function implements

00:12:33,630 --> 00:12:38,160
specific things if you get a more

00:12:35,730 --> 00:12:40,290
complex extension for example for Hmong

00:12:38,160 --> 00:12:42,450
it'll be will have AC foe for every

00:12:40,290 --> 00:12:46,020
class that we have any extension just to

00:12:42,450 --> 00:12:49,290
make it more manageable XD brooke has

00:12:46,020 --> 00:12:50,880
like 40 or 50 different files there but

00:12:49,290 --> 00:12:52,890
many many extensions just have this

00:12:50,880 --> 00:12:55,830
extension of Seefeld as PHP underscore

00:12:52,890 --> 00:12:58,230
extension dot H file the confer camphor

00:12:55,830 --> 00:13:00,000
for and then of course it is recruiting

00:12:58,230 --> 00:13:03,300
to write tests for extensions right and

00:13:00,000 --> 00:13:05,810
tests are written in a dot PHP T format

00:13:03,300 --> 00:13:09,890
I which is a very simple way of

00:13:05,810 --> 00:13:11,910
providing the PHP script to run and then

00:13:09,890 --> 00:13:13,920
comparing that to the output that you

00:13:11,910 --> 00:13:14,660
expect again I'll show you that in a

00:13:13,920 --> 00:13:17,310
moment

00:13:14,660 --> 00:13:19,080
alright so the smallest extension you

00:13:17,310 --> 00:13:20,370
can probably get away with it's about

00:13:19,080 --> 00:13:22,440
this size I know you can't read this I

00:13:20,370 --> 00:13:23,340
can't read it almost light either but it

00:13:22,440 --> 00:13:25,620
is about

00:13:23,340 --> 00:13:27,960
but is its hundred lines of code in

00:13:25,620 --> 00:13:29,970
total and this is the most minimal

00:13:27,960 --> 00:13:31,890
extension that influence a function that

00:13:29,970 --> 00:13:33,660
is called hello world and shows hello

00:13:31,890 --> 00:13:38,310
world on the screen I mean you need to

00:13:33,660 --> 00:13:39,900
start with something right so let's have

00:13:38,310 --> 00:13:41,640
a look at all those files that make up

00:13:39,900 --> 00:13:43,470
this stuff so the first thing to look at

00:13:41,640 --> 00:13:45,090
because and because this is such a

00:13:43,470 --> 00:13:48,120
simple extension that becomes a look at

00:13:45,090 --> 00:13:50,400
is all very small so this config and for

00:13:48,120 --> 00:13:52,230
phone they often start with like a

00:13:50,400 --> 00:13:53,550
little comment saying this is the config

00:13:52,230 --> 00:13:55,500
and for for for the extension of the

00:13:53,550 --> 00:13:57,540
extension name in this case the name of

00:13:55,500 --> 00:13:59,640
the extensions called geospacial which

00:13:57,540 --> 00:14:01,620
is an actual extension i've written that

00:13:59,640 --> 00:14:03,420
implements this algorithm and a whole

00:14:01,620 --> 00:14:04,770
bunch of other things and all the people

00:14:03,420 --> 00:14:06,870
have contributed to these extensions or

00:14:04,770 --> 00:14:08,370
implements a lots of do you spatial

00:14:06,870 --> 00:14:10,920
related algorithms like coordinate

00:14:08,370 --> 00:14:12,390
transversions polygons simplifications

00:14:10,920 --> 00:14:16,110
what I'm looking at here now and a whole

00:14:12,390 --> 00:14:17,820
bunch of other things so the next few

00:14:16,110 --> 00:14:20,070
lines you get in a config and for phone

00:14:17,820 --> 00:14:21,570
is you need to define you configure

00:14:20,070 --> 00:14:23,970
option flanks so in this case you're

00:14:21,570 --> 00:14:26,160
saying PHP are enable geospatial in the

00:14:23,970 --> 00:14:29,070
name of your extension then you get a

00:14:26,160 --> 00:14:32,010
description this description that shows

00:14:29,070 --> 00:14:34,740
when you would configure the extension

00:14:32,010 --> 00:14:37,440
by typing dot slash configure on the

00:14:34,740 --> 00:14:40,800
command line it will then check whether

00:14:37,440 --> 00:14:42,990
this arguments been passed show you date

00:14:40,800 --> 00:14:45,270
whether to enable geospatial support in

00:14:42,990 --> 00:14:47,220
its output and if you would do configure

00:14:45,270 --> 00:14:49,290
- - help you'll get the enabled

00:14:47,220 --> 00:14:50,670
geospatial and enable geospatial support

00:14:49,290 --> 00:14:55,860
that is what those two lines really do

00:14:50,670 --> 00:14:58,860
it is convention that enable issues for

00:14:55,860 --> 00:15:01,980
extensions that do not depend on

00:14:58,860 --> 00:15:07,230
external libraries and it is convention

00:15:01,980 --> 00:15:09,240
to use PHP in our arc width WI th for

00:15:07,230 --> 00:15:11,790
extensions that depends on extra on the

00:15:09,240 --> 00:15:15,110
libraries why did convention exist I

00:15:11,790 --> 00:15:17,850
don't know but that's just how it is

00:15:15,110 --> 00:15:22,110
yeah and this is this m4 kind of

00:15:17,850 --> 00:15:23,730
language macro stuff and then after all

00:15:22,110 --> 00:15:25,980
your options all your libraries have

00:15:23,730 --> 00:15:27,900
been checked for example then you need

00:15:25,980 --> 00:15:29,970
to tell PHP build system to do a few

00:15:27,900 --> 00:15:32,460
things as well so the buildin structures

00:15:29,970 --> 00:15:36,660
here say well if we had passed in the

00:15:32,460 --> 00:15:37,170
flag and it isn't no because you can do

00:15:36,660 --> 00:15:39,839
enable

00:15:37,170 --> 00:15:41,600
use facial equals know why you would

00:15:39,839 --> 00:15:44,160
want to do that I don't know but you can

00:15:41,600 --> 00:15:45,750
and you need to test for that I mean

00:15:44,160 --> 00:15:47,550
this does not make a lot of sense to do

00:15:45,750 --> 00:15:49,320
for standalone extensions but it makes a

00:15:47,550 --> 00:15:51,570
lot of sense if you have extensions that

00:15:49,320 --> 00:15:53,399
are part of the PHP core right and then

00:15:51,570 --> 00:15:55,440
you might want to choose whether enables

00:15:53,399 --> 00:15:58,529
something or not this being external

00:15:55,440 --> 00:16:00,240
extension not enabling is silly because

00:15:58,529 --> 00:16:02,339
why would you bother trying to compile

00:16:00,240 --> 00:16:03,570
it in the first place at night so but

00:16:02,339 --> 00:16:05,339
yeah it's convention it needs to be

00:16:03,570 --> 00:16:08,399
there and then with the PHP new

00:16:05,339 --> 00:16:10,949
extension macro you define well my the

00:16:08,399 --> 00:16:12,360
name of my extensions geospatial I have

00:16:10,949 --> 00:16:14,160
two following c fault that you need to

00:16:12,360 --> 00:16:16,199
compile you have a coma and then you

00:16:14,160 --> 00:16:18,930
have the dollar x shared which you just

00:16:16,199 --> 00:16:21,420
need to do I can't explain you why

00:16:18,930 --> 00:16:22,230
either so but it needs to be there

00:16:21,420 --> 00:16:25,040
otherwise it doesn't work

00:16:22,230 --> 00:16:28,470
yeah the magical time for that something

00:16:25,040 --> 00:16:32,000
all right the W 32 fell is very simple

00:16:28,470 --> 00:16:35,010
very similar but it's Adal in JavaScript

00:16:32,000 --> 00:16:37,560
there's our Knable and C PHP our Knable

00:16:35,010 --> 00:16:39,300
the name is the same you need to specify

00:16:37,560 --> 00:16:44,519
the default arguments here in this case

00:16:39,300 --> 00:16:46,890
or the reverse negative whatever didn't

00:16:44,519 --> 00:16:50,579
know is there I don't know exactly why

00:16:46,890 --> 00:16:52,500
to be honest and a set of PHP new extent

00:16:50,579 --> 00:16:54,690
you just use extension because this is

00:16:52,500 --> 00:16:56,220
bills isn't being written off the peach

00:16:54,690 --> 00:16:58,709
piece built system has been rewritten a

00:16:56,220 --> 00:17:00,540
few times so in PDF PHP new extension

00:16:58,709 --> 00:17:03,690
which is of course a newer version of

00:17:00,540 --> 00:17:05,880
PHP extension but nobody uses the old

00:17:03,690 --> 00:17:07,559
one anymore and again you have to

00:17:05,880 --> 00:17:09,630
specify the C files and you don't have

00:17:07,559 --> 00:17:12,000
to do the silly ex share itself because

00:17:09,630 --> 00:17:15,959
this is a lot more saner to use to be

00:17:12,000 --> 00:17:17,699
honest alright so I've shown you the

00:17:15,959 --> 00:17:18,929
confident for foe but of course we

00:17:17,699 --> 00:17:22,439
haven't really spoken about how you

00:17:18,929 --> 00:17:24,120
compile external extensions there's

00:17:22,439 --> 00:17:25,650
usually three steps if you speckle

00:17:24,120 --> 00:17:27,059
install extension name evolve run those

00:17:25,650 --> 00:17:29,010
steps for you so you don't have to think

00:17:27,059 --> 00:17:31,380
about it but if you would clone extent

00:17:29,010 --> 00:17:34,410
you from get for example you need to run

00:17:31,380 --> 00:17:37,010
PHP is PHP is is a tool that comes with

00:17:34,410 --> 00:17:40,850
the PHP def package most of the time

00:17:37,010 --> 00:17:44,970
which is a little script that proof

00:17:40,850 --> 00:17:47,340
prepares PHP build system with the

00:17:44,970 --> 00:17:49,080
information in the extension so it will

00:17:47,340 --> 00:17:50,640
look at the config and for fun if

00:17:49,080 --> 00:17:53,100
there's all the files it will do things

00:17:50,640 --> 00:17:56,160
you see prepare them so that when he

00:17:53,100 --> 00:17:58,170
done run configure it goes through the

00:17:56,160 --> 00:18:00,360
script and does things with it some PHP

00:17:58,170 --> 00:18:02,549
ice is equivalent to if you've ever

00:18:00,360 --> 00:18:03,540
compiled PHP itself if you do those

00:18:02,549 --> 00:18:06,030
flash build Kampf

00:18:03,540 --> 00:18:08,240
that is what PHP is as for for

00:18:06,030 --> 00:18:10,140
extensions and it it creates this

00:18:08,240 --> 00:18:12,929
configure script that you then need to

00:18:10,140 --> 00:18:14,429
run to check all the things that are

00:18:12,929 --> 00:18:16,830
available in the system or not check for

00:18:14,429 --> 00:18:18,780
your your arguments and then that

00:18:16,830 --> 00:18:21,299
creates a make phone and it makes all

00:18:18,780 --> 00:18:23,010
can then be run by make to build the

00:18:21,299 --> 00:18:26,309
extension so those three steps are there

00:18:23,010 --> 00:18:27,690
and you need all the time what do I do

00:18:26,309 --> 00:18:29,280
for most of my extension I actually

00:18:27,690 --> 00:18:32,490
create a little script which is called

00:18:29,280 --> 00:18:34,200
rebuild up as H which is all these steps

00:18:32,490 --> 00:18:36,120
for me and a few other things so it set

00:18:34,200 --> 00:18:39,299
some compiler flags that I like using

00:18:36,120 --> 00:18:42,230
for for giving me more warnings and

00:18:39,299 --> 00:18:45,929
errors and developing extensions so yeah

00:18:42,230 --> 00:18:47,220
it would be nice that if PHP eyes would

00:18:45,929 --> 00:18:48,630
have this rebuilding in there or

00:18:47,220 --> 00:18:51,270
something like that I don't know make

00:18:48,630 --> 00:18:53,340
sense all right so let's look at the the

00:18:51,270 --> 00:18:56,400
Olaf files that we have so the header

00:18:53,340 --> 00:18:58,950
phone defines a few things about your

00:18:56,400 --> 00:19:02,820
extension they always start with this

00:18:58,950 --> 00:19:04,890
guard it's a thing in C that makes sure

00:19:02,820 --> 00:19:08,070
that if you end up including a header

00:19:04,890 --> 00:19:10,830
for multiple times you don't actually do

00:19:08,070 --> 00:19:12,240
both you don't actually include well

00:19:10,830 --> 00:19:14,580
that's in the header file multiple times

00:19:12,240 --> 00:19:16,470
because if you end up defining things in

00:19:14,580 --> 00:19:18,210
a head of foam defining that twice you

00:19:16,470 --> 00:19:20,070
get a you get an error or a warning out

00:19:18,210 --> 00:19:22,830
of there so the first two lines here the

00:19:20,070 --> 00:19:25,700
if not death if not defined beach for

00:19:22,830 --> 00:19:28,410
UNESCO geospatial as age so basically

00:19:25,700 --> 00:19:30,750
everything in the whole fall gets

00:19:28,410 --> 00:19:33,270
excluded if PHP geospatial dot H is

00:19:30,750 --> 00:19:35,309
already defined and then the next line

00:19:33,270 --> 00:19:38,460
defines it making sure that you can

00:19:35,309 --> 00:19:40,049
really it really only does the

00:19:38,460 --> 00:19:45,179
instructions in this fall at maximum

00:19:40,049 --> 00:19:47,280
bones then you have a version string it

00:19:45,179 --> 00:19:48,809
is also convention that you use PHP

00:19:47,280 --> 00:19:50,700
underscore extension name in a score

00:19:48,809 --> 00:19:53,220
version if you don't do that

00:19:50,700 --> 00:19:57,210
peko packaging tools will actually warn

00:19:53,220 --> 00:20:00,059
about that you get your model definition

00:19:57,210 --> 00:20:02,970
that is something that PHP requires to

00:20:00,059 --> 00:20:04,230
be able to load a share extension that

00:20:02,970 --> 00:20:06,360
needs to be there it needs

00:20:04,230 --> 00:20:08,340
the exact same formats with the exact

00:20:06,360 --> 00:20:10,440
same names the word geospatial and

00:20:08,340 --> 00:20:11,760
geospatial model entry needs to match

00:20:10,440 --> 00:20:14,690
the name of your extension needs to

00:20:11,760 --> 00:20:17,850
match the name of your shared objects

00:20:14,690 --> 00:20:20,399
then often you get some module

00:20:17,850 --> 00:20:24,120
initialize initializer declarations

00:20:20,399 --> 00:20:26,519
these are definitions for PHP m inutes

00:20:24,120 --> 00:20:29,789
which stands for module in it which is a

00:20:26,519 --> 00:20:31,289
function that gets run when extension

00:20:29,789 --> 00:20:34,230
gets loaded you can do initialization

00:20:31,289 --> 00:20:35,730
things in there for example M info is

00:20:34,230 --> 00:20:38,880
the function that's going to be cold

00:20:35,730 --> 00:20:40,919
when you do PHP info so you next then

00:20:38,880 --> 00:20:44,100
she can define their own table of

00:20:40,919 --> 00:20:46,980
information to show in there as you can

00:20:44,100 --> 00:20:48,929
see if you know C well enough there are

00:20:46,980 --> 00:20:50,730
just four word declarations they don't

00:20:48,929 --> 00:20:53,460
actually implement anything and ahead of

00:20:50,730 --> 00:20:57,090
phone in C you don't implement anything

00:20:53,460 --> 00:20:59,389
in had a phone yeah and then you have

00:20:57,090 --> 00:21:01,919
some other forward declarations

00:20:59,389 --> 00:21:04,019
basically defining all the functions

00:21:01,919 --> 00:21:06,120
that you have in your extension in this

00:21:04,019 --> 00:21:07,529
case we have our AP and the score

00:21:06,120 --> 00:21:08,760
simplify which is the name of the

00:21:07,529 --> 00:21:12,659
function we're going to have a look at

00:21:08,760 --> 00:21:13,950
as implementing make sense yeah nobody's

00:21:12,659 --> 00:21:19,320
falling asleep it I hear no snoring

00:21:13,950 --> 00:21:21,480
that's always good alright so now we

00:21:19,320 --> 00:21:23,490
have done the head of all the main

00:21:21,480 --> 00:21:28,110
things of course all happens in this c

00:21:23,490 --> 00:21:30,179
film and in the CFL they usually follow

00:21:28,110 --> 00:21:32,100
the same order of things but it isn't

00:21:30,179 --> 00:21:35,090
strictly necessary it is a bit of a

00:21:32,100 --> 00:21:37,470
preference where you put all the all the

00:21:35,090 --> 00:21:39,149
information to tell the extension what

00:21:37,470 --> 00:21:41,399
the name of functions are and where to

00:21:39,149 --> 00:21:42,720
find implementation at the bottom not

00:21:41,399 --> 00:21:45,750
everybody does that some people put it

00:21:42,720 --> 00:21:48,389
at the top what can I say it's

00:21:45,750 --> 00:21:50,010
preference but what you always have at

00:21:48,389 --> 00:21:53,340
the top is your hair during inclusions

00:21:50,010 --> 00:21:56,820
these headers define things of the PHP

00:21:53,340 --> 00:21:59,639
API and almost all of the time

00:21:56,820 --> 00:22:00,870
you need pH field H included because

00:21:59,639 --> 00:22:03,330
without it you won't be able to get

00:22:00,870 --> 00:22:05,700
anything Dom PHP ini you need to include

00:22:03,330 --> 00:22:09,809
if you have in a like PHP ionized

00:22:05,700 --> 00:22:13,139
settings if you have a info function to

00:22:09,809 --> 00:22:17,159
get things into PHP info output you need

00:22:13,139 --> 00:22:18,160
to include X standard info dot H you

00:22:17,159 --> 00:22:19,750
also always include

00:22:18,160 --> 00:22:22,050
a default for your extension of course

00:22:19,750 --> 00:22:24,070
and then if you make use of exceptions

00:22:22,050 --> 00:22:26,920
normal exceptions ours and such

00:22:24,070 --> 00:22:29,740
exceptions if use SPO exceptions as X

00:22:26,920 --> 00:22:32,050
SPL SPL underscore exceptions and then

00:22:29,740 --> 00:22:34,210
for many other things that you might use

00:22:32,050 --> 00:22:36,400
from the PHP API you need to have a

00:22:34,210 --> 00:22:38,200
specific header includes all four array

00:22:36,400 --> 00:22:40,210
functions for string functions are all

00:22:38,200 --> 00:22:42,160
different files that you need to include

00:22:40,210 --> 00:22:43,930
and it depends of course what you make

00:22:42,160 --> 00:22:47,290
use of in a PHP API which won't

00:22:43,930 --> 00:22:49,000
including all right after the header

00:22:47,290 --> 00:22:51,550
files you get argument information

00:22:49,000 --> 00:22:53,680
definitions this is information that you

00:22:51,550 --> 00:22:57,280
provide that you will see when you use

00:22:53,680 --> 00:22:59,260
reflection and it also gets used for

00:22:57,280 --> 00:23:00,090
argument parsing argument parse we'll

00:22:59,260 --> 00:23:05,230
get back to in a moment

00:23:00,090 --> 00:23:07,120
so P is nth begin arc info X you give a

00:23:05,230 --> 00:23:08,920
name the name is usually function name

00:23:07,120 --> 00:23:12,730
and and underscore arcs again convention

00:23:08,920 --> 00:23:14,800
then you get a few flags in there the

00:23:12,730 --> 00:23:17,380
last one being the most important saying

00:23:14,800 --> 00:23:19,090
this is the amount of arguments that are

00:23:17,380 --> 00:23:21,640
required to be passed into this function

00:23:19,090 --> 00:23:24,190
so this one says it has two arguments

00:23:21,640 --> 00:23:27,940
and both are required to be Poulsen and

00:23:24,190 --> 00:23:30,010
then you define the names of these of

00:23:27,940 --> 00:23:31,330
the arguments and this is only the names

00:23:30,010 --> 00:23:33,040
that show up when you use reflection

00:23:31,330 --> 00:23:35,320
nothing else is really done with it if

00:23:33,040 --> 00:23:37,480
you have a race or objects there's

00:23:35,320 --> 00:23:40,870
different version there's zant arcinfo

00:23:37,480 --> 00:23:42,580
array ins and arcinfo objects so you get

00:23:40,870 --> 00:23:44,890
to define a class name with and the

00:23:42,580 --> 00:23:47,200
names of the classes are actually being

00:23:44,890 --> 00:23:49,090
checked when you parsing arguments so it

00:23:47,200 --> 00:23:51,370
doesn't it does do some things with

00:23:49,090 --> 00:23:55,180
argument parsing but not everything that

00:23:51,370 --> 00:23:57,010
you might want to them and then you need

00:23:55,180 --> 00:23:59,200
to define a list of functions and a list

00:23:57,010 --> 00:24:01,240
of functions this but what I say is all

00:23:59,200 --> 00:24:04,180
of this it's the list of functions and

00:24:01,240 --> 00:24:05,980
there's a macro called PHP underscore Fe

00:24:04,180 --> 00:24:10,930
which stands for PHP function entering

00:24:05,980 --> 00:24:12,340
you linked in name in this case the name

00:24:10,930 --> 00:24:15,100
of the function that we are implementing

00:24:12,340 --> 00:24:16,870
our DP and score simplify is also going

00:24:15,100 --> 00:24:18,820
to be the name of the implementation

00:24:16,870 --> 00:24:20,650
file so not the name of the

00:24:18,820 --> 00:24:23,380
implementation function in the same C

00:24:20,650 --> 00:24:25,930
film sometimes you might want to a Lea's

00:24:23,380 --> 00:24:29,050
then there's macros for that if you want

00:24:25,930 --> 00:24:31,240
to methods define on classes that speak

00:24:29,050 --> 00:24:32,020
their speech Fiona score Emmy there's an

00:24:31,240 --> 00:24:33,640
alias

00:24:32,020 --> 00:24:35,770
a whole bunch of these different macros

00:24:33,640 --> 00:24:37,000
doing slightly different things gets

00:24:35,770 --> 00:24:39,070
more complicated if you want to do

00:24:37,000 --> 00:24:40,750
namespaces again but there's a whole

00:24:39,070 --> 00:24:42,460
bunch of these in this case we're

00:24:40,750 --> 00:24:47,740
keeping it simple so we just used PHP

00:24:42,460 --> 00:24:48,460
FAS PHP function entry and now we still

00:24:47,740 --> 00:24:49,960
haven't got them to actually

00:24:48,460 --> 00:24:54,820
implementing anything and we won't be

00:24:49,960 --> 00:24:56,980
there for a moment so in order for PHP

00:24:54,820 --> 00:24:58,510
to know where all your implementations

00:24:56,980 --> 00:25:01,000
live you need to have this module

00:24:58,510 --> 00:25:03,930
extension definition this defines the

00:25:01,000 --> 00:25:06,130
version number the name which

00:25:03,930 --> 00:25:08,320
initialization and destruction methods

00:25:06,130 --> 00:25:11,920
are being used so we have M in it here

00:25:08,320 --> 00:25:14,590
and I'm info here the geospatial version

00:25:11,920 --> 00:25:16,600
you need to do I don't know why I still

00:25:14,590 --> 00:25:19,030
have the if Zen module API number is

00:25:16,600 --> 00:25:22,810
larger than the number because this is

00:25:19,030 --> 00:25:25,560
stuff that has been added to PHP API as

00:25:22,810 --> 00:25:27,730
you can see the number in 2001 so

00:25:25,560 --> 00:25:29,800
probably not necessary to keep it

00:25:27,730 --> 00:25:31,240
anymore because there's no way this

00:25:29,800 --> 00:25:33,960
extension will compile with peace before

00:25:31,240 --> 00:25:35,350
I can guarantee you that that won't work

00:25:33,960 --> 00:25:37,420
all right

00:25:35,350 --> 00:25:40,840
and then the last bits the last few

00:25:37,420 --> 00:25:44,830
lines are actually necessary for to make

00:25:40,840 --> 00:25:48,390
sure that PHP can find the the function

00:25:44,830 --> 00:25:51,580
definitions when it loads things into

00:25:48,390 --> 00:25:54,280
into PHP itself and this is done with a

00:25:51,580 --> 00:25:56,800
guard it's it's the compiled DDLJ

00:25:54,280 --> 00:26:00,670
geospatial so it would only define its

00:25:56,800 --> 00:26:02,580
function when it's been loaded as a

00:26:00,670 --> 00:26:05,170
shared object because when it's built

00:26:02,580 --> 00:26:08,530
when you choose to compile an extension

00:26:05,170 --> 00:26:10,450
at pH peace normal build system you

00:26:08,530 --> 00:26:11,890
can't define this method because then

00:26:10,450 --> 00:26:15,550
things don't work so that's why it has a

00:26:11,890 --> 00:26:18,130
guard around it alright and then you get

00:26:15,550 --> 00:26:19,870
some axillary init and info section so a

00:26:18,130 --> 00:26:22,060
minute yeah it's a place where you can

00:26:19,870 --> 00:26:23,890
for example register constants if you

00:26:22,060 --> 00:26:25,570
have to initialize a library that you

00:26:23,890 --> 00:26:30,490
make use of goes into a minute as well

00:26:25,570 --> 00:26:33,760
and in it is being run once per per

00:26:30,490 --> 00:26:35,770
process so long as PHP fpm or PHP CLI

00:26:33,760 --> 00:26:38,770
starts up it will call this a minute

00:26:35,770 --> 00:26:41,770
functions sometimes it is necessary to

00:26:38,770 --> 00:26:44,740
initialization per request for that you

00:26:41,770 --> 00:26:45,610
have R in it an hour in it you can do a

00:26:44,740 --> 00:26:47,440
little bit more you can

00:26:45,610 --> 00:26:50,410
allocate a few things that you come to

00:26:47,440 --> 00:26:52,780
an M in it and that tends to be you

00:26:50,410 --> 00:26:55,150
allocate things in there you initialize

00:26:52,780 --> 00:26:58,270
things in there for for just a single

00:26:55,150 --> 00:27:01,210
request and you're going to have in most

00:26:58,270 --> 00:27:02,860
cases and are shut down which is the

00:27:01,210 --> 00:27:04,720
opposite of the United ization because

00:27:02,860 --> 00:27:06,220
if you initialize things it is very

00:27:04,720 --> 00:27:08,650
likely that you might have to earn an

00:27:06,220 --> 00:27:12,010
initialize things as well in this case I

00:27:08,650 --> 00:27:13,420
don't have an answer down because the

00:27:12,010 --> 00:27:16,390
registration of a constants you don't

00:27:13,420 --> 00:27:18,429
have to undo when PHP exits because it's

00:27:16,390 --> 00:27:22,510
exiting anyway so what's the point there

00:27:18,429 --> 00:27:24,880
right and then you have M info which is

00:27:22,510 --> 00:27:28,480
kind of funny because you use C

00:27:24,880 --> 00:27:29,919
functions to build HTML tables yeah

00:27:28,480 --> 00:27:32,049
there's no templating or anything in

00:27:29,919 --> 00:27:34,780
there really it's kind of it's quite a

00:27:32,049 --> 00:27:36,820
quirky better works and it is it's

00:27:34,780 --> 00:27:38,590
recommended that you show at least the

00:27:36,820 --> 00:27:40,419
name of your extension in there and then

00:27:38,590 --> 00:27:42,370
which version it is so that you when you

00:27:40,419 --> 00:27:44,860
see PHP info you can see which version

00:27:42,370 --> 00:27:47,429
of the extension is run which is my my

00:27:44,860 --> 00:27:52,179
only row of information basically in it

00:27:47,429 --> 00:27:53,710
alright so so far what we have seen is

00:27:52,179 --> 00:27:55,809
the implementations all boilerplate

00:27:53,710 --> 00:27:57,640
every extension is all of this and it

00:27:55,809 --> 00:27:59,049
isn't particularly interesting to look

00:27:57,640 --> 00:28:01,059
at and write on but the interesting

00:27:59,049 --> 00:28:02,860
things are as of course the function

00:28:01,059 --> 00:28:06,190
itself right this is where you do all

00:28:02,860 --> 00:28:07,960
the useful works so there's usually four

00:28:06,190 --> 00:28:10,299
stages for every function that your user

00:28:07,960 --> 00:28:12,010
that you implement you need to look at

00:28:10,299 --> 00:28:15,070
all the arguments that are being passed

00:28:12,010 --> 00:28:17,980
in from PHP scripts use and kind of

00:28:15,070 --> 00:28:19,179
things libraries often needs this

00:28:17,980 --> 00:28:22,120
information in a slightly different

00:28:19,179 --> 00:28:23,860
format so you need to convert the data

00:28:22,120 --> 00:28:27,160
that comes into PHP into the right

00:28:23,860 --> 00:28:28,990
format usually different C data

00:28:27,160 --> 00:28:30,150
structures and things like that I'll

00:28:28,990 --> 00:28:32,830
show you in a moment

00:28:30,150 --> 00:28:35,770
then he need to run the stuff that the

00:28:32,830 --> 00:28:37,570
library implements and then from that

00:28:35,770 --> 00:28:39,370
you need to convert that to the right

00:28:37,570 --> 00:28:41,860
data structure so that he can return it

00:28:39,370 --> 00:28:44,799
back to the user that calls a PHP

00:28:41,860 --> 00:28:48,250
function anybody wants to guess what

00:28:44,799 --> 00:28:51,570
this function is no no physics geeks

00:28:48,250 --> 00:28:53,350
here you have to look this up Layton

00:28:51,570 --> 00:28:56,169
homework that's right

00:28:53,350 --> 00:28:59,290
alright so parsing there the the input

00:28:56,169 --> 00:29:01,420
parameters so I will slowly

00:28:59,290 --> 00:29:03,550
go through a whole implementation of a

00:29:01,420 --> 00:29:06,220
single functional and I'm doing this in

00:29:03,550 --> 00:29:12,420
sections and as I said the first one is

00:29:06,220 --> 00:29:15,460
parsing input parameters so in PHP every

00:29:12,420 --> 00:29:17,800
bit of data that is used is usually

00:29:15,460 --> 00:29:20,890
something we call as that phone or if

00:29:17,800 --> 00:29:23,680
you're an American as evil eye prefers

00:29:20,890 --> 00:29:26,650
absol as ethyl is a data structure that

00:29:23,680 --> 00:29:29,560
wraps around a value as well as it type

00:29:26,650 --> 00:29:31,570
because PHP is a weakly typed language

00:29:29,560 --> 00:29:34,750
PHP for every variable needs to keep the

00:29:31,570 --> 00:29:37,510
type as also value in order to do

00:29:34,750 --> 00:29:40,180
information things with it later on so

00:29:37,510 --> 00:29:44,590
that is what is that fulness a double is

00:29:40,180 --> 00:29:46,900
a c c way of calling a floating-point

00:29:44,590 --> 00:29:50,530
number so you can also use float but it

00:29:46,900 --> 00:29:52,960
has less precision in PHP your floating

00:29:50,530 --> 00:29:54,910
point is always a double so because it's

00:29:52,960 --> 00:29:58,720
always a double and C you need to use a

00:29:54,910 --> 00:30:00,670
double here so for parsing input

00:29:58,720 --> 00:30:02,710
parameters there's a PHP API function

00:30:00,670 --> 00:30:05,020
called Zen parts parameters which

00:30:02,710 --> 00:30:07,510
accepts a bunch of arguments here so it

00:30:05,020 --> 00:30:09,580
first has Zenda mark which is a marker

00:30:07,510 --> 00:30:13,330
that tells you how many arguments are

00:30:09,580 --> 00:30:15,790
being passed in in this case we because

00:30:13,330 --> 00:30:17,020
we remember in the arc info we defined

00:30:15,790 --> 00:30:20,710
that it has to be two so that will

00:30:17,020 --> 00:30:22,960
always be two or nothing nothing if

00:30:20,710 --> 00:30:26,290
because the extent that the function

00:30:22,960 --> 00:30:28,150
will get called the tsrm LSCC thing I'm

00:30:26,290 --> 00:30:31,300
going to skip over because in PHP seven

00:30:28,150 --> 00:30:33,430
that's no longer necessary and then the

00:30:31,300 --> 00:30:35,110
argument that you then get is in the one

00:30:33,430 --> 00:30:39,430
a double quotes the one that says that D

00:30:35,110 --> 00:30:42,870
is your issue definition of both types

00:30:39,430 --> 00:30:47,010
of arguments are being passed in an

00:30:42,870 --> 00:30:49,210
depending on the latter you get as

00:30:47,010 --> 00:30:52,240
subsequent argument Suzanne parts

00:30:49,210 --> 00:30:55,660
parameters you need to provide a

00:30:52,240 --> 00:30:57,430
definition or a reference to the C data

00:30:55,660 --> 00:31:01,210
type that you have defined beforehand so

00:30:57,430 --> 00:31:04,120
the latter that means I'm going to see

00:31:01,210 --> 00:31:05,830
is that for we don't really know what

00:31:04,120 --> 00:31:06,820
kind of data disease and we're going to

00:31:05,830 --> 00:31:08,830
have to look at later

00:31:06,820 --> 00:31:13,100
but it's the right type and do something

00:31:08,830 --> 00:31:15,260
with it epsilon is this like

00:31:13,100 --> 00:31:17,510
this this is argument to the function

00:31:15,260 --> 00:31:20,570
that defines it smoothness basically

00:31:17,510 --> 00:31:23,179
this is a double and a double we specify

00:31:20,570 --> 00:31:25,820
we did letter D if you get your letters

00:31:23,179 --> 00:31:27,590
which your datatypes wrong it will crash

00:31:25,820 --> 00:31:29,150
you need to get it right

00:31:27,590 --> 00:31:31,190
luckily there's a nice documentation

00:31:29,150 --> 00:31:33,610
file one of the few things is exactly

00:31:31,190 --> 00:31:36,260
documented vulner PHP api to be honest

00:31:33,610 --> 00:31:38,179
which links your letters which would see

00:31:36,260 --> 00:31:39,950
datatype that you need sues emperor

00:31:38,179 --> 00:31:41,600
akbar's parameters requires a format

00:31:39,950 --> 00:31:47,360
that very type their match with a c type

00:31:41,600 --> 00:31:50,150
and also did the data that you get in

00:31:47,360 --> 00:31:52,070
here gets freed up at the end of calling

00:31:50,150 --> 00:31:54,890
the function which is important if you

00:31:52,070 --> 00:31:57,200
have things like a string and C you are

00:31:54,890 --> 00:31:58,909
not allowed to free that string because

00:31:57,200 --> 00:32:00,049
if you free that string which he tries

00:31:58,909 --> 00:32:02,559
to do that for you again and it's

00:32:00,049 --> 00:32:04,580
already freed and then as questions

00:32:02,559 --> 00:32:08,390
basically everything you do wrong

00:32:04,580 --> 00:32:10,460
crashes so you need to be all right so

00:32:08,390 --> 00:32:13,400
yeah as I said although he gets in the

00:32:10,460 --> 00:32:15,320
first argument as a zet foe we still

00:32:13,400 --> 00:32:17,090
want this to be an array now there is a

00:32:15,320 --> 00:32:19,450
specific data for an array well I

00:32:17,090 --> 00:32:22,970
haven't used that I can't quite tell you

00:32:19,450 --> 00:32:25,010
I think with the intention of later also

00:32:22,970 --> 00:32:26,990
supporting objects in there and there is

00:32:25,010 --> 00:32:29,179
well there wasn't when I wrote is

00:32:26,990 --> 00:32:31,010
extension a letter that would accept

00:32:29,179 --> 00:32:33,799
boat an array or an object at the same

00:32:31,010 --> 00:32:36,590
time that exists now so it's a little

00:32:33,799 --> 00:32:39,200
bit old code sometimes but what we can

00:32:36,590 --> 00:32:40,190
do with there's what I've done in the

00:32:39,200 --> 00:32:43,820
last three lines of the implementation

00:32:40,190 --> 00:32:46,520
here it is that an escort type return to

00:32:43,820 --> 00:32:49,370
the type of deceitful very variable and

00:32:46,520 --> 00:32:52,120
then you can compare that with its inner

00:32:49,370 --> 00:32:54,679
score data type in this case an array

00:32:52,120 --> 00:32:56,960
well so what I'm saying here if points

00:32:54,679 --> 00:33:00,919
array is not an array I'm going to

00:32:56,960 --> 00:33:04,490
return from the function so returning

00:33:00,919 --> 00:33:07,730
from a function in PHP C implementations

00:33:04,490 --> 00:33:12,980
often and means you the function returns

00:33:07,730 --> 00:33:15,140
no the way how you return variables from

00:33:12,980 --> 00:33:17,659
PHP implemented from functions like

00:33:15,140 --> 00:33:21,260
we've implementing here is not by using

00:33:17,659 --> 00:33:25,549
return in C which is kind of weird but

00:33:21,260 --> 00:33:27,049
that's how it is alright so well this is

00:33:25,549 --> 00:33:29,029
that full thing I've already

00:33:27,049 --> 00:33:31,419
from that a little bit so this is a

00:33:29,029 --> 00:33:33,379
petri representation of the value the

00:33:31,419 --> 00:33:35,149
implementation of that has changed

00:33:33,379 --> 00:33:37,820
significantly between peach before peach

00:33:35,149 --> 00:33:39,379
p5 and p3 7 but most of that has been

00:33:37,820 --> 00:33:41,809
abstracted for you don't have to deal

00:33:39,379 --> 00:33:43,369
with very much so as I said it contains

00:33:41,809 --> 00:33:46,340
the type which you can access through Z

00:33:43,369 --> 00:33:50,080
type P and you can also access to vary

00:33:46,340 --> 00:33:54,409
the value in there by using Z underscore

00:33:50,080 --> 00:33:57,409
short name for datatype Val underscore P

00:33:54,409 --> 00:33:59,570
so there is our foe for getting array

00:33:57,409 --> 00:34:02,269
information out of there there is

00:33:59,570 --> 00:34:04,369
Bevo for a boolean value that's L fo for

00:34:02,269 --> 00:34:07,659
an integer number there's Devo for

00:34:04,369 --> 00:34:10,940
double they're still vote for a string

00:34:07,659 --> 00:34:12,919
there's still an for the length of a

00:34:10,940 --> 00:34:14,990
string and so on and so on yeah I know

00:34:12,919 --> 00:34:19,970
those acronyms are very interesting to

00:34:14,990 --> 00:34:23,299
pronounce but those all exist and if you

00:34:19,970 --> 00:34:26,030
don't know beforehand what the data type

00:34:23,299 --> 00:34:27,549
is you really need to check it with that

00:34:26,030 --> 00:34:30,710
type P before you access information

00:34:27,549 --> 00:34:33,260
because if you would try to access the

00:34:30,710 --> 00:34:36,980
array information in a variable but it's

00:34:33,260 --> 00:34:38,359
actually a double is going to crash as I

00:34:36,980 --> 00:34:41,799
said everything is going to crash if you

00:34:38,359 --> 00:34:47,149
did run or the chance of things crashing

00:34:41,799 --> 00:34:48,109
increases let me put it over so as I

00:34:47,149 --> 00:34:51,169
said there's a whole bunch of these

00:34:48,109 --> 00:34:53,270
letters this is not an exhaustive list

00:34:51,169 --> 00:34:55,190
because it would fit on the slide but

00:34:53,270 --> 00:34:57,530
they're the important ones a for array B

00:34:55,190 --> 00:35:01,450
for boolean if you want to accept

00:34:57,530 --> 00:35:05,349
objects you can use an uppercase o and

00:35:01,450 --> 00:35:08,299
unlike a normal argument it exactly it

00:35:05,349 --> 00:35:10,339
requires two extra argument to send

00:35:08,299 --> 00:35:12,440
parts parameters so the first one is

00:35:10,339 --> 00:35:14,450
going to be a 0 which is going to be

00:35:12,440 --> 00:35:15,980
handled to your object and then the

00:35:14,450 --> 00:35:18,349
second one is something called as n

00:35:15,980 --> 00:35:19,760
class entry which basically is the

00:35:18,349 --> 00:35:21,799
definition of your class the most

00:35:19,760 --> 00:35:23,510
important thing in this case in there it

00:35:21,799 --> 00:35:25,400
is going to contain a name of the class

00:35:23,510 --> 00:35:27,650
so we do uppercase so you can actually

00:35:25,400 --> 00:35:29,359
instructors n parts parameters to

00:35:27,650 --> 00:35:31,339
already check whether a objected

00:35:29,359 --> 00:35:33,440
chapasana is of the correct class and if

00:35:31,339 --> 00:35:36,349
it isn't you get your standard peach

00:35:33,440 --> 00:35:39,619
people or arguments arguments wrong

00:35:36,349 --> 00:35:40,820
Arabic so as n parts parameters actually

00:35:39,619 --> 00:35:42,260
does quite a lot of these things

00:35:40,820 --> 00:35:44,290
for you so that you don't have to check

00:35:42,260 --> 00:35:48,650
the right types and stuff like that

00:35:44,290 --> 00:35:50,210
alright as I said after accepting the

00:35:48,650 --> 00:35:52,640
arguments we now need to convert it to

00:35:50,210 --> 00:35:54,560
something that the library can do

00:35:52,640 --> 00:35:57,050
something right so what I've done I've

00:35:54,560 --> 00:35:59,420
implemented this RTP simplified function

00:35:57,050 --> 00:36:02,540
as a see function sort of in an external

00:35:59,420 --> 00:36:04,250
files to simulate this is actually a

00:36:02,540 --> 00:36:07,310
library it isn't really the case because

00:36:04,250 --> 00:36:09,770
it's built with the extension but it

00:36:07,310 --> 00:36:11,690
illustrates the example manner and in

00:36:09,770 --> 00:36:13,850
there I have a implemented function it's

00:36:11,690 --> 00:36:17,120
called geo hash table two array which

00:36:13,850 --> 00:36:20,390
converts my zero and point array to a

00:36:17,120 --> 00:36:21,650
data structure that my C implementation

00:36:20,390 --> 00:36:25,130
of the rdp simplified function

00:36:21,650 --> 00:36:27,350
understands and it looks something like

00:36:25,130 --> 00:36:28,940
this I just want to show you this I

00:36:27,350 --> 00:36:30,560
don't want to go fully over this because

00:36:28,940 --> 00:36:32,270
it's going to depend very much on things

00:36:30,560 --> 00:36:36,920
but there's interesting things now in

00:36:32,270 --> 00:36:39,560
there like PHP has specific macros like

00:36:36,920 --> 00:36:42,740
zant hash for each Val to iterate over

00:36:39,560 --> 00:36:46,550
an array for you which works very

00:36:42,740 --> 00:36:48,410
similar as a for each in PHP itself so

00:36:46,550 --> 00:36:51,080
there's for each valve that will only do

00:36:48,410 --> 00:36:53,870
you the value there's also for it index

00:36:51,080 --> 00:36:56,170
fell or ID X well if you want to get

00:36:53,870 --> 00:36:58,460
both a numerical index as well so value

00:36:56,170 --> 00:36:59,960
and there's also of course one for

00:36:58,460 --> 00:37:01,790
having associative arrays and stuff like

00:36:59,960 --> 00:37:03,950
that there there are a new addition in

00:37:01,790 --> 00:37:06,170
PHP 7 that makes doing these kinds of

00:37:03,950 --> 00:37:09,890
loops very much easier than the previous

00:37:06,170 --> 00:37:11,420
iteration of it so basically what I'm

00:37:09,890 --> 00:37:14,230
doing here which will for each fell I'm

00:37:11,420 --> 00:37:16,670
looping over the array and each of the

00:37:14,230 --> 00:37:18,490
elements in the array is a coordinate

00:37:16,670 --> 00:37:21,080
pair it's a longer tooth latitude term

00:37:18,490 --> 00:37:23,780
and that's what I'm parsing with parts

00:37:21,080 --> 00:37:25,250
point pair I'm parsing this element it

00:37:23,780 --> 00:37:27,170
will also check for the correct types

00:37:25,250 --> 00:37:29,810
and then returning them to the

00:37:27,170 --> 00:37:32,510
information in long and that's all

00:37:29,810 --> 00:37:35,330
that's to AC base terrain which is the

00:37:32,510 --> 00:37:36,590
TMP variable in here I set the status to

00:37:35,330 --> 00:37:37,910
one for each of those point and the

00:37:36,590 --> 00:37:40,310
state is one for the algorithm means

00:37:37,910 --> 00:37:42,260
this is a point we're going to keep so

00:37:40,310 --> 00:37:46,400
once the algorithm runs it will set for

00:37:42,260 --> 00:37:48,290
some point the status to zero I'll get

00:37:46,400 --> 00:37:50,120
to that in a moment also important

00:37:48,290 --> 00:37:51,970
because we created a data structure if

00:37:50,120 --> 00:37:54,500
something goes wrong

00:37:51,970 --> 00:37:55,790
we need to free the data structure if

00:37:54,500 --> 00:37:57,700
you don't feed a data structure

00:37:55,790 --> 00:38:00,890
you got something called a memory and

00:37:57,700 --> 00:38:03,530
that is okay once but not if this runs a

00:38:00,890 --> 00:38:06,830
hundred thousand times and then your PHP

00:38:03,530 --> 00:38:09,440
process runs out of memory which is it's

00:38:06,830 --> 00:38:11,210
likely means it's going to crash all

00:38:09,440 --> 00:38:13,420
right so the main thing is of course

00:38:11,210 --> 00:38:16,190
we're running the algorithm now I'm not

00:38:13,420 --> 00:38:19,340
I'm going to show you a little bit the

00:38:16,190 --> 00:38:22,160
how close the C implementation of RTP

00:38:19,340 --> 00:38:23,150
simplify would be to the PHP function so

00:38:22,160 --> 00:38:27,530
that's the next few slides

00:38:23,150 --> 00:38:29,300
okay so we have RTP and PHP it's this

00:38:27,530 --> 00:38:31,160
kind of complex weather

00:38:29,300 --> 00:38:32,180
I know there's like a few more lines it

00:38:31,160 --> 00:38:34,850
doesn't fit on the slide it doesn't

00:38:32,180 --> 00:38:37,300
matter but just compare that to this to

00:38:34,850 --> 00:38:41,260
the the one on C right

00:38:37,300 --> 00:38:43,610
can you see what how close they are in

00:38:41,260 --> 00:38:45,530
PHP of course you don't have to define a

00:38:43,610 --> 00:38:48,080
data type for first point last point and

00:38:45,530 --> 00:38:50,000
index in C you see well you need to

00:38:48,080 --> 00:38:52,250
define those as C data types because in

00:38:50,000 --> 00:38:54,620
C you need to declare variables if you

00:38:52,250 --> 00:38:57,530
look at the ends - start being smaller

00:38:54,620 --> 00:38:59,090
than - in PHP we have dollar signs in

00:38:57,530 --> 00:39:02,810
front of the ends and a start right it's

00:38:59,090 --> 00:39:05,330
very quite close doing like algorithm

00:39:02,810 --> 00:39:08,030
kind of things in C and PHP isn't very

00:39:05,330 --> 00:39:09,680
far away from each other the problems

00:39:08,030 --> 00:39:11,030
are going to be mostly memory management

00:39:09,680 --> 00:39:12,530
that you need to take care of that is

00:39:11,030 --> 00:39:15,200
probably one of the bigger things that

00:39:12,530 --> 00:39:18,050
is different between writing something

00:39:15,200 --> 00:39:20,270
and C then it isn't PHP I won't go

00:39:18,050 --> 00:39:21,770
through the whole algorithm oh I have

00:39:20,270 --> 00:39:23,570
the slides put on line already so you

00:39:21,770 --> 00:39:25,310
can go through it later or find the

00:39:23,570 --> 00:39:26,480
extension itself and see what all the

00:39:25,310 --> 00:39:29,270
kinds of cool things we've implemented

00:39:26,480 --> 00:39:31,880
in there all right some I've said so

00:39:29,270 --> 00:39:33,320
woman we pass the arguments we convert

00:39:31,880 --> 00:39:35,750
them to something that the library uses

00:39:33,320 --> 00:39:37,100
we execute the library function and then

00:39:35,750 --> 00:39:39,200
of course we need to return the

00:39:37,100 --> 00:39:41,120
information back to the person that

00:39:39,200 --> 00:39:43,760
called a function or the user in this

00:39:41,120 --> 00:39:46,130
case so in this case what we're doing is

00:39:43,760 --> 00:39:48,050
we need to tell that a return value is

00:39:46,130 --> 00:39:52,820
going to be an array and there is a

00:39:48,050 --> 00:39:56,960
magic magic no my laser pointer diet is

00:39:52,820 --> 00:39:59,390
a magic variable return called a return

00:39:56,960 --> 00:40:02,960
underscore value that you do not declare

00:39:59,390 --> 00:40:04,940
yourself if you see the start of an

00:40:02,960 --> 00:40:05,660
implementation in this case the top line

00:40:04,940 --> 00:40:08,240
of my exam

00:40:05,660 --> 00:40:11,329
here says PHP underscore function which

00:40:08,240 --> 00:40:14,030
is a macro it is a macro let us do a few

00:40:11,329 --> 00:40:15,829
extra things with the function name and

00:40:14,030 --> 00:40:18,289
one of the things is make sure that you

00:40:15,829 --> 00:40:20,450
get those magic variables like return

00:40:18,289 --> 00:40:24,260
value or it provides the information

00:40:20,450 --> 00:40:25,309
that's sent parts parameters users you

00:40:24,260 --> 00:40:28,099
don't need to do anything about it

00:40:25,309 --> 00:40:29,180
yourself but it is a variable T of

00:40:28,099 --> 00:40:32,059
course you use for rating and

00:40:29,180 --> 00:40:33,770
information back to the users and

00:40:32,059 --> 00:40:37,250
because this is an array we need to call

00:40:33,770 --> 00:40:43,099
array in a talent what you should not do

00:40:37,250 --> 00:40:44,359
is allocate this by by by allocating is

00:40:43,099 --> 00:40:46,069
that fall for it because it's already

00:40:44,359 --> 00:40:48,260
allocated for you and if you do that

00:40:46,069 --> 00:40:51,650
it's likely that things will crash I

00:40:48,260 --> 00:40:54,520
know from experience in this case I know

00:40:51,650 --> 00:40:58,220
I keep saying that a lot in any case

00:40:54,520 --> 00:41:01,789
what a library turns is a data structure

00:40:58,220 --> 00:41:03,589
that are stored in points it's the same

00:41:01,789 --> 00:41:05,750
array that we passed into the library

00:41:03,589 --> 00:41:07,670
function but now it has modified the

00:41:05,750 --> 00:41:09,619
status flag for each of those points so

00:41:07,670 --> 00:41:12,020
what we're now doing is we're looping

00:41:09,619 --> 00:41:13,549
over this array which we know how many

00:41:12,020 --> 00:41:17,089
elements it has because that's part of

00:41:13,549 --> 00:41:19,430
the data structure in count for each of

00:41:17,089 --> 00:41:23,390
those pairs what we create is we create

00:41:19,430 --> 00:41:27,730
a array we use array in it to create a

00:41:23,390 --> 00:41:30,760
to not allocate to create in an already

00:41:27,730 --> 00:41:35,180
available variable called set for parent

00:41:30,760 --> 00:41:37,700
second line of the example we tell PHP

00:41:35,180 --> 00:41:41,119
to turn that into an array variable so

00:41:37,700 --> 00:41:42,799
that we can add elements to it so the

00:41:41,119 --> 00:41:45,910
four lines in the middle basically

00:41:42,799 --> 00:41:47,569
creates an array then adds the two

00:41:45,910 --> 00:41:49,730
coordinates or the latitude and

00:41:47,569 --> 00:41:52,609
longitude which are done an x and y in

00:41:49,730 --> 00:41:54,980
this case and then it adds the newly

00:41:52,609 --> 00:41:57,619
created structure with the coordinate

00:41:54,980 --> 00:42:01,250
pair in it to the array in return value

00:41:57,619 --> 00:42:03,859
so art index sorry our next index is

00:42:01,250 --> 00:42:06,920
that for basically a speech P speak for

00:42:03,859 --> 00:42:09,109
out a element to the end of the array if

00:42:06,920 --> 00:42:11,480
you have an associative array there's a

00:42:09,109 --> 00:42:12,829
different function for that if you have

00:42:11,480 --> 00:42:15,200
something else than is that for if you

00:42:12,829 --> 00:42:17,900
have a double there's out in Dec next

00:42:15,200 --> 00:42:19,010
index double and so on and so on if you

00:42:17,900 --> 00:42:22,150
already have a

00:42:19,010 --> 00:42:24,560
arrey key there's a function called art

00:42:22,150 --> 00:42:26,630
index at four-way then have to specify

00:42:24,560 --> 00:42:28,580
the numerical key and so on and so on so

00:42:26,630 --> 00:42:30,830
there's a whole bunch of these functions

00:42:28,580 --> 00:42:32,840
depending on what sort of data type you

00:42:30,830 --> 00:42:35,720
add and whether you have a key already

00:42:32,840 --> 00:42:37,930
or not and stuff like that and again

00:42:35,720 --> 00:42:41,240
important to know that once we are done

00:42:37,930 --> 00:42:43,790
by adding all these things to the return

00:42:41,240 --> 00:42:45,500
value is to free your data structure

00:42:43,790 --> 00:42:47,840
because if you don't feed the data

00:42:45,500 --> 00:42:50,900
structure that you've allocated PHP

00:42:47,840 --> 00:42:52,700
won't do it for you and then you have a

00:42:50,900 --> 00:42:54,650
memory leak and luckily there's tools

00:42:52,700 --> 00:42:57,920
for that too for you to find out those

00:42:54,650 --> 00:43:00,320
things exist all right and that's what

00:42:57,920 --> 00:43:02,090
we don't accept that there's also

00:43:00,320 --> 00:43:03,770
different ways of returning information

00:43:02,090 --> 00:43:06,490
right I mentioned before that if you

00:43:03,770 --> 00:43:09,560
just call return with a semicolon

00:43:06,490 --> 00:43:12,020
PHP ends up returning nil to userland

00:43:09,560 --> 00:43:13,850
and there's a different ways how you can

00:43:12,020 --> 00:43:15,740
actually return information like what

00:43:13,850 --> 00:43:18,320
I've done here is you see I actually

00:43:15,740 --> 00:43:20,690
don't end up returning anything there's

00:43:18,320 --> 00:43:22,190
no return statements but what I have to

00:43:20,690 --> 00:43:23,030
only saved on this array in that bit

00:43:22,190 --> 00:43:25,280
return value

00:43:23,030 --> 00:43:27,200
so basically manipulating the already

00:43:25,280 --> 00:43:29,900
allocated return value bit information I

00:43:27,200 --> 00:43:31,850
want to do if it's an array there's no

00:43:29,900 --> 00:43:33,650
macros for this if it's the same simple

00:43:31,850 --> 00:43:35,950
values there is something like that so

00:43:33,650 --> 00:43:38,330
taking example from the MongoDB driver

00:43:35,950 --> 00:43:41,300
we want to make sure that the cursor is

00:43:38,330 --> 00:43:42,980
alive so we use return bool and what

00:43:41,300 --> 00:43:45,200
return ball does is add this information

00:43:42,980 --> 00:43:47,800
to in the score return value and then

00:43:45,200 --> 00:43:50,360
immediately return from the function

00:43:47,800 --> 00:43:53,180
which is not something you always want

00:43:50,360 --> 00:43:55,550
to do because as I said you need to

00:43:53,180 --> 00:43:57,170
clean up all your memory allocated

00:43:55,550 --> 00:43:58,820
memory structures are the things you've

00:43:57,170 --> 00:44:00,110
allocated a member you need to free but

00:43:58,820 --> 00:44:02,900
if he is one of the return underscore

00:44:00,110 --> 00:44:04,280
macros it would return immediately from

00:44:02,900 --> 00:44:06,500
a function without you having a chance

00:44:04,280 --> 00:44:08,570
to clean up and for these situations

00:44:06,500 --> 00:44:10,580
there is another set of macros and

00:44:08,570 --> 00:44:13,160
they're called rats Ville underscore and

00:44:10,580 --> 00:44:17,030
then exactly the same as before so that

00:44:13,160 --> 00:44:19,730
you can then still clean up the data

00:44:17,030 --> 00:44:22,520
structure that you've allocated so yeah

00:44:19,730 --> 00:44:24,830
so you can return immediately or you can

00:44:22,520 --> 00:44:26,540
just set the return value you can then

00:44:24,830 --> 00:44:28,580
later change the return value again a so

00:44:26,540 --> 00:44:31,130
if you want to do that and I just have

00:44:28,580 --> 00:44:32,420
just a quick thing about PHP 5 versus

00:44:31,130 --> 00:44:33,950
PHP 7

00:44:32,420 --> 00:44:35,660
as an extension developers it is

00:44:33,950 --> 00:44:37,040
sometimes a little bit annoying that you

00:44:35,660 --> 00:44:39,200
have to take care of both of them of

00:44:37,040 --> 00:44:40,430
course people write in extensions now

00:44:39,200 --> 00:44:42,500
they're not going to have to take care

00:44:40,430 --> 00:44:45,880
about php5 anymore because none of you

00:44:42,500 --> 00:44:49,130
should be using this yeah right

00:44:45,880 --> 00:44:51,290
yes my PHP 7 spill all right so that's

00:44:49,130 --> 00:44:54,530
returning as I said before many times

00:44:51,290 --> 00:44:58,160
memory management is very important pH

00:44:54,530 --> 00:45:01,070
piece API has some assistant things with

00:44:58,160 --> 00:45:04,580
you there sometimes if you have a set

00:45:01,070 --> 00:45:06,380
fall you need to if you need to use that

00:45:04,580 --> 00:45:08,780
phone that you have created in vom

00:45:06,380 --> 00:45:11,660
function using an auto functions you

00:45:08,780 --> 00:45:15,080
need to use is that RDF that asked like

00:45:11,660 --> 00:45:18,440
a bumps of like in is that fall to make

00:45:15,080 --> 00:45:20,690
sure that if PHP wants to destruct it it

00:45:18,440 --> 00:45:22,070
only lowers down the counter and it

00:45:20,690 --> 00:45:23,420
would only end up freeing it if the

00:45:22,070 --> 00:45:25,790
counter hits zero so everything gets

00:45:23,420 --> 00:45:29,990
allocated with the counter well if you

00:45:25,790 --> 00:45:31,610
are graph it bumps at 2 2 then when the

00:45:29,990 --> 00:45:34,700
function ends and parts parameters

00:45:31,610 --> 00:45:36,410
functionality decreases the number it

00:45:34,700 --> 00:45:41,270
doesn't as long as it doesn't get

00:45:36,410 --> 00:45:43,250
returned to 0 it it won't free it so

00:45:41,270 --> 00:45:45,890
that's to keep things alive and safe in

00:45:43,250 --> 00:45:47,540
the same request of course if you do

00:45:45,890 --> 00:45:48,890
that at one point at some other point

00:45:47,540 --> 00:45:50,360
you're going to have to decrease the

00:45:48,890 --> 00:45:53,570
number otherwise you get a memory link

00:45:50,360 --> 00:46:00,170
which is not cool and annoyingly that is

00:45:53,570 --> 00:46:01,490
not called that Dell Raph Y PHP all

00:46:00,170 --> 00:46:02,990
right so and then the last thing of

00:46:01,490 --> 00:46:04,490
course you need to write tests right and

00:46:02,990 --> 00:46:06,620
a test go in a test directory there in a

00:46:04,490 --> 00:46:10,070
peach PT format and you render with make

00:46:06,620 --> 00:46:12,560
tests a simple test fall is not much

00:46:10,070 --> 00:46:14,210
more than a simple file with few

00:46:12,560 --> 00:46:15,980
sections in there so the section that

00:46:14,210 --> 00:46:18,260
I've used in here are the ones in red so

00:46:15,980 --> 00:46:20,150
test defines the name of your testimony

00:46:18,260 --> 00:46:23,030
that shows up if you type make tests you

00:46:20,150 --> 00:46:24,440
have to foul that is a PHP script that's

00:46:23,030 --> 00:46:28,400
what it is it's no more no less

00:46:24,440 --> 00:46:31,160
and then the expects section is what you

00:46:28,400 --> 00:46:34,160
expect this PHP script to output to

00:46:31,160 --> 00:46:35,960
standard output there's no such thing as

00:46:34,160 --> 00:46:38,030
as you have assertions like yet impeach

00:46:35,960 --> 00:46:40,700
the unit for example it is very simple

00:46:38,030 --> 00:46:42,170
comparison the output of the script to

00:46:40,700 --> 00:46:43,700
all of us and this is something

00:46:42,170 --> 00:46:45,700
sometimes important because of course

00:46:43,700 --> 00:46:49,420
things written and see

00:46:45,700 --> 00:46:51,010
can crash sometimes and if all of this

00:46:49,420 --> 00:46:54,430
would run in the same request

00:46:51,010 --> 00:46:56,130
if one test would fill or crash then it

00:46:54,430 --> 00:46:59,020
would stop running all of the tests so

00:46:56,130 --> 00:47:01,330
what make tes actually does it spins up

00:46:59,020 --> 00:47:03,640
a PHP process for every test and by

00:47:01,330 --> 00:47:04,990
doing that having to load things like

00:47:03,640 --> 00:47:07,030
Picchu unit in there for every single

00:47:04,990 --> 00:47:08,170
process is going to make things so slow

00:47:07,030 --> 00:47:10,690
to make it unusable

00:47:08,170 --> 00:47:12,839
also when PHP T was invented peach for

00:47:10,690 --> 00:47:15,790
unit both Indians and Indians all

00:47:12,839 --> 00:47:17,260
technology him there's a few other

00:47:15,790 --> 00:47:19,540
things she can do instead of expect

00:47:17,260 --> 00:47:22,300
after you can also use X sorting instead

00:47:19,540 --> 00:47:25,900
of expects you can also use aspect XS or

00:47:22,300 --> 00:47:28,210
as difficult to pronounce expect F where

00:47:25,900 --> 00:47:30,220
you can then use things like dollar D to

00:47:28,210 --> 00:47:33,040
match a number or dollar as it's no

00:47:30,220 --> 00:47:34,780
dollar sorry percent s or percent d to

00:47:33,040 --> 00:47:36,609
match your string to match some number

00:47:34,780 --> 00:47:37,900
and all the other data type you can also

00:47:36,609 --> 00:47:40,420
put regular expressions in there if you

00:47:37,900 --> 00:47:42,130
want to do that but yeah it's just a

00:47:40,420 --> 00:47:45,540
simple PHP script so they're very simple

00:47:42,130 --> 00:47:45,540

YouTube URL: https://www.youtube.com/watch?v=cxu3mcum-Sk


