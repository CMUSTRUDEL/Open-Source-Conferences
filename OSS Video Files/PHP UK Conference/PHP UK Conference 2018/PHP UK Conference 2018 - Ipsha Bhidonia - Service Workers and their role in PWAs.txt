Title: PHP UK Conference 2018 - Ipsha Bhidonia - Service Workers and their role in PWAs
Publication date: 2018-03-27
Playlist: PHP UK Conference 2018
Description: 
	Progressive Web Applications have gained unparalleled momentum in the tech world and are currently one of the hottest trends in Web Development. Find out how PWA attempts to combine features offered by most modern browsers with the benefits of mobile experience and how service workers make them fast, reliable & engaging. In this session we dive into whatâ€™s in store beyond providing the offline experience, push and background sync features. This talk examines how Service Workers fill the gap between web and native, and how they give better performance and user experiences.
Captions: 
	00:00:02,570 --> 00:00:08,559
thank you everyone fun fact you know how

00:00:06,229 --> 00:00:11,530
they say that when you walk onto a stage

00:00:08,559 --> 00:00:14,080
sometimes everything just blacks out I

00:00:11,530 --> 00:00:17,450
can vouch for that

00:00:14,080 --> 00:00:19,160
okay so anyway I'm EPSA I come from

00:00:17,450 --> 00:00:21,470
India and I'm here to speak about

00:00:19,160 --> 00:00:23,349
progressive web apps how they are

00:00:21,470 --> 00:00:26,410
different from normal web applications

00:00:23,349 --> 00:00:29,029
what technologies lie at the core of

00:00:26,410 --> 00:00:32,270
progressive web apps and how it also

00:00:29,029 --> 00:00:34,630
works so seamlessly well especially from

00:00:32,270 --> 00:00:37,130
a perspective of the user experience

00:00:34,630 --> 00:00:39,020
today is a great time to be building

00:00:37,130 --> 00:00:41,210
something for the web it's the largest

00:00:39,020 --> 00:00:44,450
software platform ever and we are seeing

00:00:41,210 --> 00:00:47,450
pounds of improvement in its industry on

00:00:44,450 --> 00:00:49,280
basically on daily basis so I'm really

00:00:47,450 --> 00:00:51,800
excited to be here and talk about

00:00:49,280 --> 00:00:53,980
progressive web apps before we go any

00:00:51,800 --> 00:00:56,930
further I'd like to introduce myself

00:00:53,980 --> 00:00:58,940
professionally back in India I work in

00:00:56,930 --> 00:01:02,329
the domain of digital security with

00:00:58,940 --> 00:01:05,570
gemalto as a software engineer I'm also

00:01:02,329 --> 00:01:07,700
a part of Mozilla India Company T I have

00:01:05,570 --> 00:01:09,740
been involved with Mozilla since my

00:01:07,700 --> 00:01:12,229
college years when I first interned with

00:01:09,740 --> 00:01:14,870
it and eventually became a part of the

00:01:12,229 --> 00:01:17,810
technical speaker community and a mentor

00:01:14,870 --> 00:01:19,729
for the open leadership program today I

00:01:17,810 --> 00:01:22,490
stand here to talk about something that

00:01:19,729 --> 00:01:25,040
is close not only to Mozilla but to all

00:01:22,490 --> 00:01:28,659
the major mobile browser makers like

00:01:25,040 --> 00:01:33,650
Google Chrome Microsoft edge opera etc

00:01:28,659 --> 00:01:35,630
so before we start how many of you here

00:01:33,650 --> 00:01:42,799
actually know what exactly progressive

00:01:35,630 --> 00:01:48,830
web apps are my job simpler right so I'm

00:01:42,799 --> 00:01:51,320
a person and so to start with when

00:01:48,830 --> 00:01:53,570
you're developing applications we are

00:01:51,320 --> 00:01:58,130
basically doing that for me Julie to

00:01:53,570 --> 00:02:01,070
platform the web and native now how do

00:01:58,130 --> 00:02:03,560
you decide which one to go with yes the

00:02:01,070 --> 00:02:05,960
life old discussion between the native

00:02:03,560 --> 00:02:08,330
and the web and thousands and thousands

00:02:05,960 --> 00:02:11,840
of statistics and statistical data

00:02:08,330 --> 00:02:14,510
telling us which one is better I mean

00:02:11,840 --> 00:02:18,829
how do you decide not all decisions are

00:02:14,510 --> 00:02:22,640
as easy as this right and clearly we are

00:02:18,829 --> 00:02:25,970
left with two major options and not one

00:02:22,640 --> 00:02:28,610
valid choice so when we talk about the

00:02:25,970 --> 00:02:32,299
native app and web app they are like the

00:02:28,610 --> 00:02:34,909
flora and fauna of an ecosystem both are

00:02:32,299 --> 00:02:36,739
equally essential to drive the ecosystem

00:02:34,909 --> 00:02:40,519
and we just cannot thrive with either

00:02:36,739 --> 00:02:41,989
one of them so what if I tell you there

00:02:40,519 --> 00:02:44,239
is a way to combine the flora and the

00:02:41,989 --> 00:02:46,670
fauna and in the sense that we can

00:02:44,239 --> 00:02:49,400
combine the best of the web and best of

00:02:46,670 --> 00:02:52,579
the native that's exactly what

00:02:49,400 --> 00:02:54,500
progressive web apps do we come up with

00:02:52,579 --> 00:02:56,959
an application that leverages the low

00:02:54,500 --> 00:02:59,269
friction of the web but at the same time

00:02:56,959 --> 00:03:02,000
they are as readily and easily available

00:02:59,269 --> 00:03:03,920
as native applications so progressive

00:03:02,000 --> 00:03:05,810
web apps are experiences that combine

00:03:03,920 --> 00:03:09,459
the best of the web and the best of the

00:03:05,810 --> 00:03:12,829
native apps now why is this important

00:03:09,459 --> 00:03:15,139
when we talk in a general sense we mean

00:03:12,829 --> 00:03:17,599
develop application for different

00:03:15,139 --> 00:03:20,239
purposes but the one thing that remains

00:03:17,599 --> 00:03:22,790
constant in all all our applications is

00:03:20,239 --> 00:03:25,699
that we want more and more people to use

00:03:22,790 --> 00:03:28,519
our applications right and that can be

00:03:25,699 --> 00:03:31,299
measured in two parameters the reach of

00:03:28,519 --> 00:03:33,650
the application and the user engagement

00:03:31,299 --> 00:03:36,230
when we talk about the reach of an

00:03:33,650 --> 00:03:39,049
application we are basically looking at

00:03:36,230 --> 00:03:43,040
the number of time a user opens up an

00:03:39,049 --> 00:03:45,260
application or visits the website now

00:03:43,040 --> 00:03:48,440
think of a situation when you need some

00:03:45,260 --> 00:03:51,230
quick random information off of your

00:03:48,440 --> 00:03:55,280
mobile browser or on your mobile device

00:03:51,230 --> 00:03:57,769
what do you use you most likely not want

00:03:55,280 --> 00:03:59,989
to go to the App Store and search for

00:03:57,769 --> 00:04:01,940
the right download the app accept

00:03:59,989 --> 00:04:05,329
permissions and eventually be low on

00:04:01,940 --> 00:04:07,730
both data and storage right when you

00:04:05,329 --> 00:04:10,430
just need some random information of

00:04:07,730 --> 00:04:12,440
your mobile phones you'd most likely you

00:04:10,430 --> 00:04:17,269
rather just get it off the mobile

00:04:12,440 --> 00:04:21,889
browser that's why we see the mobile web

00:04:17,269 --> 00:04:24,010
is two times as good as the native

00:04:21,889 --> 00:04:26,419
application in reaching the users

00:04:24,010 --> 00:04:27,760
however when it comes to the user

00:04:26,419 --> 00:04:30,460
engagement

00:04:27,760 --> 00:04:33,160
people are more likely to spend much

00:04:30,460 --> 00:04:35,470
more time on a few selective apps that

00:04:33,160 --> 00:04:38,770
they really like and that aligns with

00:04:35,470 --> 00:04:40,600
their interests right as compared to you

00:04:38,770 --> 00:04:43,960
know when they're just perhaps just

00:04:40,600 --> 00:04:47,290
browsing through the web so that's why

00:04:43,960 --> 00:04:49,960
we see that users are much more engaged

00:04:47,290 --> 00:04:52,810
with the native application and we can

00:04:49,960 --> 00:04:58,480
see from the data here that it's almost

00:04:52,810 --> 00:05:03,310
16x as compared to the web so now we see

00:04:58,480 --> 00:05:05,800
a contrasting data here right the web

00:05:03,310 --> 00:05:07,600
applications are good at usual reach but

00:05:05,800 --> 00:05:09,670
not very good with the user engagement

00:05:07,600 --> 00:05:12,190
but the native applications are

00:05:09,670 --> 00:05:15,280
brilliant with the user engagement and

00:05:12,190 --> 00:05:17,860
not so much with the users reach when it

00:05:15,280 --> 00:05:20,170
comes to progressive Web Apps we somehow

00:05:17,860 --> 00:05:22,960
just combine the best of the both worlds

00:05:20,170 --> 00:05:26,770
and we end up with a higher user

00:05:22,960 --> 00:05:29,830
engagement and a higher user reach so

00:05:26,770 --> 00:05:32,050
that's all great we can see why we need

00:05:29,830 --> 00:05:36,160
progressive web apps but now what

00:05:32,050 --> 00:05:39,370
exactly are progressive web apps so

00:05:36,160 --> 00:05:42,400
progressive web apps or pwace is a term

00:05:39,370 --> 00:05:45,850
coined by Alex Russell in 2015 from

00:05:42,400 --> 00:05:49,290
Google and the idea of progressive web

00:05:45,850 --> 00:05:52,720
apps is that in addition to normal

00:05:49,290 --> 00:05:55,410
applications progressive web app uses

00:05:52,720 --> 00:05:58,740
modern web capabilities like providing

00:05:55,410 --> 00:06:02,230
offline experiences push notifications

00:05:58,740 --> 00:06:05,980
background sync to deliver an app like

00:06:02,230 --> 00:06:10,120
user experience they evolve from browser

00:06:05,980 --> 00:06:12,670
tabs into immersive talk level

00:06:10,120 --> 00:06:15,670
applications leveraging from web's

00:06:12,670 --> 00:06:17,830
low-friction now what does that mean

00:06:15,670 --> 00:06:20,500
when you start using an application on

00:06:17,830 --> 00:06:24,910
your browser you'll be prompted or Add

00:06:20,500 --> 00:06:26,680
to Home screen button you can simply

00:06:24,910 --> 00:06:28,900
click on the Add to Home screen button

00:06:26,680 --> 00:06:31,540
and you can get that application on your

00:06:28,900 --> 00:06:34,330
home screen or with the latest release

00:06:31,540 --> 00:06:37,240
of Mozilla last month you can now get a

00:06:34,330 --> 00:06:38,950
small home icon next to the URL and you

00:06:37,240 --> 00:06:41,260
can just click it to get the application

00:06:38,950 --> 00:06:45,010
on your home screen this is

00:06:41,260 --> 00:06:47,560
by using the web manifest app which is

00:06:45,010 --> 00:06:50,920
just simply a basically a JSON file that

00:06:47,560 --> 00:06:53,320
gives you the developer control over how

00:06:50,920 --> 00:06:55,960
the application is launched by the user

00:06:53,320 --> 00:06:58,690
and how it looks to the user at places

00:06:55,960 --> 00:07:01,270
they might want to find it like at the

00:06:58,690 --> 00:07:04,690
home screen or at the app selector or

00:07:01,270 --> 00:07:06,700
the app drawer so it's basically a

00:07:04,690 --> 00:07:10,120
simple JSON file which gives you the

00:07:06,700 --> 00:07:15,220
metadata about the background theme the

00:07:10,120 --> 00:07:17,110
display mode icon description etc so you

00:07:15,220 --> 00:07:19,630
can just simply click on it and have the

00:07:17,110 --> 00:07:22,090
icon on the home screen when you click

00:07:19,630 --> 00:07:25,210
on it you can experience the standalone

00:07:22,090 --> 00:07:26,890
version of the application and honestly

00:07:25,210 --> 00:07:30,490
this is so much better than what we were

00:07:26,890 --> 00:07:32,890
offered earlier with the continue in the

00:07:30,490 --> 00:07:34,450
app and download the app interstitial

00:07:32,890 --> 00:07:37,330
which won't allow us to continue

00:07:34,450 --> 00:07:39,790
browsing the app continue browsing the

00:07:37,330 --> 00:07:44,290
website unless and until we downloaded

00:07:39,790 --> 00:07:46,210
the app and sometimes sometimes we just

00:07:44,290 --> 00:07:48,130
want to experience the lighter version

00:07:46,210 --> 00:07:50,710
of the application and you know just

00:07:48,130 --> 00:07:52,690
click on URL and just get out of there

00:07:50,710 --> 00:07:56,550
not necessarily download the application

00:07:52,690 --> 00:07:58,900
every time by the way Google Plus um

00:07:56,550 --> 00:08:02,650
came up with their interstitial and

00:07:58,900 --> 00:08:04,600
found that 69% of their users abandon

00:08:02,650 --> 00:08:07,240
their application rather than download

00:08:04,600 --> 00:08:09,100
the application because of this so it is

00:08:07,240 --> 00:08:09,970
they would vouch for that that it was a

00:08:09,100 --> 00:08:14,530
terrible idea

00:08:09,970 --> 00:08:17,250
and which leaves us with progressive web

00:08:14,530 --> 00:08:20,290
apps now we have been talking about how

00:08:17,250 --> 00:08:22,930
progressive web apps leverage the low

00:08:20,290 --> 00:08:27,220
friction of the web now what does that

00:08:22,930 --> 00:08:30,910
exactly mean there's a study by Google

00:08:27,220 --> 00:08:36,099
that says each step to download an

00:08:30,910 --> 00:08:39,640
application produces 20% of the users so

00:08:36,099 --> 00:08:41,979
in a consumer mobile app you can see the

00:08:39,640 --> 00:08:43,630
number of user decreasing with each step

00:08:41,979 --> 00:08:46,810
that it takes in the installation

00:08:43,630 --> 00:08:49,870
process so when it comes to the native

00:08:46,810 --> 00:08:52,330
app installation user flow we see that

00:08:49,870 --> 00:08:54,700
we go to the App Store we look for the

00:08:52,330 --> 00:08:57,160
right app we download the

00:08:54,700 --> 00:08:59,080
we accept the permission install it and

00:08:57,160 --> 00:09:01,390
there are a lot of steps involved in it

00:08:59,080 --> 00:09:04,000
and with each step we are losing users

00:09:01,390 --> 00:09:08,440
but when it comes to progressive web

00:09:04,000 --> 00:09:10,660
apps we are just one step in the way we

00:09:08,440 --> 00:09:17,740
click on the URL and we get to use the

00:09:10,660 --> 00:09:19,720
application so why not just click on the

00:09:17,740 --> 00:09:21,850
application use it and install it

00:09:19,720 --> 00:09:24,520
instead of installing it first and then

00:09:21,850 --> 00:09:27,280
using it this is the basic concept

00:09:24,520 --> 00:09:30,180
behind progressive web apps and you can

00:09:27,280 --> 00:09:35,650
see the time difference and

00:09:30,180 --> 00:09:38,020
inconvenience it causes so to sum up the

00:09:35,650 --> 00:09:40,930
progressive web app experience there's a

00:09:38,020 --> 00:09:43,510
list of features that the app must

00:09:40,930 --> 00:09:47,050
support to be qualified as a progressive

00:09:43,510 --> 00:09:52,990
web apps now let's just quickly look at

00:09:47,050 --> 00:09:56,170
that so these are a few features that

00:09:52,990 --> 00:09:58,840
progressive web apps should support the

00:09:56,170 --> 00:10:01,810
first as the name suggests they are

00:09:58,840 --> 00:10:04,150
progressive in nature which means that

00:10:01,810 --> 00:10:07,120
the basic content and functionality of

00:10:04,150 --> 00:10:09,700
the application is available for every

00:10:07,120 --> 00:10:13,270
user regardless of the browser choice or

00:10:09,700 --> 00:10:15,850
the bandwidth while at the same time

00:10:13,270 --> 00:10:18,970
providing an enhanced version of the

00:10:15,850 --> 00:10:21,820
application to users with modern

00:10:18,970 --> 00:10:23,920
browsers or better connectivity so

00:10:21,820 --> 00:10:26,670
progressive web apps are made with

00:10:23,920 --> 00:10:31,510
progressive enhancement as the co-tenant

00:10:26,670 --> 00:10:34,360
they feel up like they are designed with

00:10:31,510 --> 00:10:37,630
the actual model which discriminates

00:10:34,360 --> 00:10:41,710
between the content and functionality of

00:10:37,630 --> 00:10:44,560
the application so the basic content of

00:10:41,710 --> 00:10:47,020
the application the interface or the

00:10:44,560 --> 00:10:50,320
shell model is all is already cached on

00:10:47,020 --> 00:10:52,990
the device and we can use it as the

00:10:50,320 --> 00:10:55,200
native web application we already saw

00:10:52,990 --> 00:10:59,050
the add to homescreen feature

00:10:55,200 --> 00:11:01,750
progressive web apps are linkable in the

00:10:59,050 --> 00:11:03,940
sense that you only need to link the

00:11:01,750 --> 00:11:07,010
application with a URL and you can use

00:11:03,940 --> 00:11:08,840
it at one go you can use the link

00:11:07,010 --> 00:11:12,860
to open and use the application and it's

00:11:08,840 --> 00:11:16,100
easy to share just at one go next we

00:11:12,860 --> 00:11:18,890
have discoverable progressive web apps

00:11:16,100 --> 00:11:23,000
are identifiable as application by

00:11:18,890 --> 00:11:30,170
browsers so they can find them run them

00:11:23,000 --> 00:11:32,120
catalogue them etc pwace are reengaged

00:11:30,170 --> 00:11:34,820
able because this support features like

00:11:32,120 --> 00:11:37,580
web push notification which can be used

00:11:34,820 --> 00:11:39,740
to deliver notifications to user even

00:11:37,580 --> 00:11:43,160
when the user is not using the

00:11:39,740 --> 00:11:45,590
application they are responsive in the

00:11:43,160 --> 00:11:48,620
sense that they follow the water is

00:11:45,590 --> 00:11:51,200
content philosophy and they're designed

00:11:48,620 --> 00:11:53,920
to fit any form factor desktop mobile

00:11:51,200 --> 00:11:57,320
tablet whatever is next

00:11:53,920 --> 00:12:00,190
connectivity independent so they are

00:11:57,320 --> 00:12:03,620
enhanced with service focus to provide

00:12:00,190 --> 00:12:07,540
offline first experiences and work even

00:12:03,620 --> 00:12:10,760
on low quality networks they are safe

00:12:07,540 --> 00:12:13,730
because they are served over HTTP which

00:12:10,760 --> 00:12:16,190
means that it prevents snooping and it

00:12:13,730 --> 00:12:19,310
ensures that data has not been tampered

00:12:16,190 --> 00:12:23,060
with so when we talk about progressive

00:12:19,310 --> 00:12:25,910
web apps being served only over HTTP the

00:12:23,060 --> 00:12:28,340
main reason is that they make use

00:12:25,910 --> 00:12:31,730
heavily of service workers which are

00:12:28,340 --> 00:12:33,470
served only over HTTPS so most of the

00:12:31,730 --> 00:12:35,420
amazing features that we saw about

00:12:33,470 --> 00:12:38,270
progressive web apps are made possible

00:12:35,420 --> 00:12:41,600
because of service workers they sort of

00:12:38,270 --> 00:12:46,160
form the background to progressive web

00:12:41,600 --> 00:12:50,450
app so to get started with service

00:12:46,160 --> 00:12:53,450
workers what exactly are they well to

00:12:50,450 --> 00:12:55,310
begin with service workers are simple

00:12:53,450 --> 00:12:57,590
worker scripts that run in the

00:12:55,310 --> 00:13:00,800
background they come with the ability to

00:12:57,590 --> 00:13:05,810
do two things best intercept Network

00:13:00,800 --> 00:13:09,050
requests and cached responses so what

00:13:05,810 --> 00:13:12,470
exactly are service workers they are

00:13:09,050 --> 00:13:15,950
persistent fully asynchronous separately

00:13:12,470 --> 00:13:19,250
threaded event based workers that's a

00:13:15,950 --> 00:13:20,600
lot of words so let's go through that

00:13:19,250 --> 00:13:24,020
one I want

00:13:20,600 --> 00:13:26,210
persistence that means that they exist

00:13:24,020 --> 00:13:29,000
outside the browser tabs and they know

00:13:26,210 --> 00:13:32,450
when to expire they are separately

00:13:29,000 --> 00:13:35,720
threaded they run on a different global

00:13:32,450 --> 00:13:38,330
script contacts in the background there

00:13:35,720 --> 00:13:41,000
are fully asynchronous they make heavy

00:13:38,330 --> 00:13:44,120
use of promises and are hence

00:13:41,000 --> 00:13:45,920
non-blocking they are event based

00:13:44,120 --> 00:13:47,630
workers since they have no direct

00:13:45,920 --> 00:13:52,100
control from the main thread they

00:13:47,630 --> 00:13:56,660
respond only to events like push sync

00:13:52,100 --> 00:13:59,680
fetch install etc so this is the

00:13:56,660 --> 00:14:03,920
definition of service workers but now

00:13:59,680 --> 00:14:07,270
how does the service worker work service

00:14:03,920 --> 00:14:10,340
workers essentially act as client-side

00:14:07,270 --> 00:14:13,730
proxy servers that's it between the

00:14:10,340 --> 00:14:16,370
application and the browser it takes the

00:14:13,730 --> 00:14:18,740
form of a JavaScript file and can

00:14:16,370 --> 00:14:21,680
control web pages which is associated

00:14:18,740 --> 00:14:23,630
with them so they can intercept and

00:14:21,680 --> 00:14:26,360
modify a navigation and resource

00:14:23,630 --> 00:14:29,120
requests by sitting in the middle of the

00:14:26,360 --> 00:14:31,550
page and so on so it gives you complete

00:14:29,120 --> 00:14:34,010
control of how your application behaves

00:14:31,550 --> 00:14:36,200
in certain situations the most obvious

00:14:34,010 --> 00:14:40,970
one being you know when you're offline

00:14:36,200 --> 00:14:46,040
of the network now um just posnick from

00:14:40,970 --> 00:14:49,700
google describes service workers as air

00:14:46,040 --> 00:14:52,400
traffic controller so it's like oh the

00:14:49,700 --> 00:14:55,490
VAP requests are like the planes taking

00:14:52,400 --> 00:14:59,330
off and service workers are like the air

00:14:55,490 --> 00:15:01,610
traffic controller so when they act as

00:14:59,330 --> 00:15:04,220
air traffic controller service worker

00:15:01,610 --> 00:15:06,290
gives you complete control over each and

00:15:04,220 --> 00:15:09,230
every request that is made from your

00:15:06,290 --> 00:15:12,020
site in the same way as air traffic

00:15:09,230 --> 00:15:14,570
controller may redirect a plane to land

00:15:12,020 --> 00:15:17,410
at some different Airport or even delay

00:15:14,570 --> 00:15:20,420
a landing so this also enables you to

00:15:17,410 --> 00:15:28,910
redirect your request or even stop them

00:15:20,420 --> 00:15:32,300
completely so to quickly recap service

00:15:28,910 --> 00:15:33,980
workers are number one javascript file

00:15:32,300 --> 00:15:36,320
they act as

00:15:33,980 --> 00:15:39,350
rock scissors between the web app and

00:15:36,320 --> 00:15:42,080
browser they run in the background on a

00:15:39,350 --> 00:15:44,180
different thread they have no direct Dom

00:15:42,080 --> 00:15:47,000
access so they cannot modify the

00:15:44,180 --> 00:15:50,060
elements on the webpage they are fully

00:15:47,000 --> 00:15:53,840
asynchronous and non blocking they work

00:15:50,060 --> 00:15:55,690
with HTTPS because when you are using

00:15:53,840 --> 00:15:58,700
service workers you're basically

00:15:55,690 --> 00:16:01,070
hijacking the connection fabricating and

00:15:58,700 --> 00:16:03,590
filtering responses that is a lot of

00:16:01,070 --> 00:16:05,720
powerful stuff and while you may do that

00:16:03,590 --> 00:16:08,720
for good reasons the man in the middle

00:16:05,720 --> 00:16:10,640
might not and so too prevents looping

00:16:08,720 --> 00:16:12,470
and to ensure that the data is not

00:16:10,640 --> 00:16:15,620
tampered with service workers are

00:16:12,470 --> 00:16:19,250
strictly served with HTTPS and we cannot

00:16:15,620 --> 00:16:21,350
use it in private browsing mode so this

00:16:19,250 --> 00:16:24,680
was the basic introduction to Service

00:16:21,350 --> 00:16:27,650
Worker when we come to the lifecycle of

00:16:24,680 --> 00:16:31,870
Service Worker it includes three major

00:16:27,650 --> 00:16:37,130
steps register install and activate

00:16:31,870 --> 00:16:39,230
let's look that in a bit detail once you

00:16:37,130 --> 00:16:39,740
register a service worker with your

00:16:39,230 --> 00:16:43,160
browser

00:16:39,740 --> 00:16:46,190
there can be two cases either it's an

00:16:43,160 --> 00:16:48,590
absolutely new service worker or a

00:16:46,190 --> 00:16:53,120
service worker already existed and it's

00:16:48,590 --> 00:16:54,470
an updated service worker so now when we

00:16:53,120 --> 00:16:55,880
get a new service worker it goes

00:16:54,470 --> 00:16:58,610
straight to installation and our

00:16:55,880 --> 00:17:01,820
activation but if it's an updated

00:16:58,610 --> 00:17:04,280
service worker which by the way is found

00:17:01,820 --> 00:17:06,350
out a bit wise compared with bitwise

00:17:04,280 --> 00:17:09,590
comparison between the new and the old

00:17:06,350 --> 00:17:12,920
service worker so when we get an updated

00:17:09,590 --> 00:17:15,920
service worker it's it's ideally after

00:17:12,920 --> 00:17:18,170
the download and is not activated unless

00:17:15,920 --> 00:17:19,700
and until all the pages associated with

00:17:18,170 --> 00:17:23,750
the older version of the Service Worker

00:17:19,700 --> 00:17:26,660
are closed because added at a given time

00:17:23,750 --> 00:17:30,620
for a given scope they can only be one

00:17:26,660 --> 00:17:34,070
active service worker so if there's

00:17:30,620 --> 00:17:36,200
already one active you your service

00:17:34,070 --> 00:17:39,950
worker has to wait and it eventually

00:17:36,200 --> 00:17:43,940
begins activate after all the tabs are

00:17:39,950 --> 00:17:47,090
closed now once your service worker is

00:17:43,940 --> 00:17:50,360
at a stage to control the clients

00:17:47,090 --> 00:17:53,330
and handle the request it files the

00:17:50,360 --> 00:17:55,250
activation event the activation event is

00:17:53,330 --> 00:17:58,549
where the service worker sits idle

00:17:55,250 --> 00:18:01,580
unless and until it is received by a

00:17:58,549 --> 00:18:04,610
network request in which case it loads

00:18:01,580 --> 00:18:06,820
the subsequent pages and if it's not

00:18:04,610 --> 00:18:10,700
then it terminates to save some memory

00:18:06,820 --> 00:18:14,090
so this is the life cycle of how a

00:18:10,700 --> 00:18:17,390
service worker works now let's look at

00:18:14,090 --> 00:18:23,000
that from a code point of view how is

00:18:17,390 --> 00:18:25,340
that achieved so the first step with

00:18:23,000 --> 00:18:27,500
working with service worker is

00:18:25,340 --> 00:18:29,720
registering a service worker now this

00:18:27,500 --> 00:18:31,549
all code is basically in JavaScript

00:18:29,720 --> 00:18:35,779
because so his focus R is in that way

00:18:31,549 --> 00:18:38,090
but we'll go through it step-by-step so

00:18:35,779 --> 00:18:41,450
the code starts by checking for browser

00:18:38,090 --> 00:18:44,059
support with so navigator dot service

00:18:41,450 --> 00:18:46,549
worker if the browser supports the

00:18:44,059 --> 00:18:48,529
service worker we can then register

00:18:46,549 --> 00:18:50,240
register the service worker using

00:18:48,529 --> 00:18:52,880
navigator dot service worker dot

00:18:50,240 --> 00:18:56,029
register which basically returns a

00:18:52,880 --> 00:18:58,360
promise that is resolved when once the

00:18:56,029 --> 00:19:03,500
sauce worker is successfully registered

00:18:58,360 --> 00:19:07,730
we can also log the scope of the service

00:19:03,500 --> 00:19:09,799
worker with registration dot scope the

00:19:07,730 --> 00:19:11,690
scope of a service worker determines

00:19:09,799 --> 00:19:14,870
which files the service worker can

00:19:11,690 --> 00:19:17,240
control or in other word from which path

00:19:14,870 --> 00:19:20,929
the service worker will intercept

00:19:17,240 --> 00:19:23,149
replace the default scope is the

00:19:20,929 --> 00:19:26,029
location of the service worker and it um

00:19:23,149 --> 00:19:30,020
it goes down and extends down to all the

00:19:26,029 --> 00:19:33,200
directories below that so this is how we

00:19:30,020 --> 00:19:36,919
register a service worker next we come

00:19:33,200 --> 00:19:39,279
to installation installation is the step

00:19:36,919 --> 00:19:42,140
that where we cache all our resources

00:19:39,279 --> 00:19:44,480
right so when we come to the

00:19:42,140 --> 00:19:46,730
installation step we can go to the

00:19:44,480 --> 00:19:50,539
network and cache all the resources that

00:19:46,730 --> 00:19:53,330
we might require to make that app work

00:19:50,539 --> 00:19:55,789
in an offline mode so it's the great

00:19:53,330 --> 00:19:58,070
place to cache all the resources and

00:19:55,789 --> 00:20:01,030
then go to go to the next state which

00:19:58,070 --> 00:20:04,340
which is the activate state

00:20:01,030 --> 00:20:08,559
to do the installation thing we add an

00:20:04,340 --> 00:20:12,590
event listener to the event install now

00:20:08,559 --> 00:20:16,730
we see a cache is not open and cache dot

00:20:12,590 --> 00:20:18,860
at all they both are async operations so

00:20:16,730 --> 00:20:20,450
this means that the service worker might

00:20:18,860 --> 00:20:23,870
actually terminate before they

00:20:20,450 --> 00:20:26,840
successfully are done operating so

00:20:23,870 --> 00:20:29,840
because of that we add an event dot wait

00:20:26,840 --> 00:20:32,390
until which tells the service workers to

00:20:29,840 --> 00:20:36,650
wait until the promise is resolved or

00:20:32,390 --> 00:20:39,650
rejected so we can simply use cache dot

00:20:36,650 --> 00:20:43,730
add all to add all the assets to the

00:20:39,650 --> 00:20:46,790
cache and it's also good to remember and

00:20:43,730 --> 00:20:49,190
keep in mind that if any of any one of

00:20:46,790 --> 00:20:51,559
the file fails to be added to the cache

00:20:49,190 --> 00:20:57,080
the installation process would not

00:20:51,559 --> 00:20:59,990
complete next we come to activating a

00:20:57,080 --> 00:21:02,750
service worker so once your source

00:20:59,990 --> 00:21:04,790
worker is ready to control the clients

00:21:02,750 --> 00:21:09,530
and handle all sorts of network requests

00:21:04,790 --> 00:21:12,410
we get the active activate event so now

00:21:09,530 --> 00:21:16,400
it is at a stage where it can handle

00:21:12,410 --> 00:21:18,740
events like push and fetch and sync so

00:21:16,400 --> 00:21:20,750
this is the ideal place to do all the

00:21:18,740 --> 00:21:22,669
things which we couldn't do when an

00:21:20,750 --> 00:21:25,880
older version of service worker was

00:21:22,669 --> 00:21:28,179
still in use which means we can migrate

00:21:25,880 --> 00:21:30,230
all the database and delete all the cash

00:21:28,179 --> 00:21:35,150
associated with the older version of

00:21:30,230 --> 00:21:37,390
service worker at this step so to look

00:21:35,150 --> 00:21:41,330
at the code we add an event listener

00:21:37,390 --> 00:21:43,520
associated with the activate event so we

00:21:41,330 --> 00:21:45,110
are just filtering the cache and using

00:21:43,520 --> 00:21:47,210
the cache name and deleting the

00:21:45,110 --> 00:21:50,990
resources that is stored in that

00:21:47,210 --> 00:21:54,010
particular cache now um this ability to

00:21:50,990 --> 00:21:57,230
cache files using service worker

00:21:54,010 --> 00:21:59,809
basically forms the background or the

00:21:57,230 --> 00:22:03,919
backbone of providing offline

00:21:59,809 --> 00:22:06,860
experiences in progressive web apps now

00:22:03,919 --> 00:22:10,190
offline experiences as you all might

00:22:06,860 --> 00:22:12,770
know our experiences with application

00:22:10,190 --> 00:22:13,850
when there is no network so if you have

00:22:12,770 --> 00:22:17,660
already

00:22:13,850 --> 00:22:20,030
some page of a website you can go back

00:22:17,660 --> 00:22:23,750
and review it even when you're not

00:22:20,030 --> 00:22:27,910
connected to the Internet so um let's

00:22:23,750 --> 00:22:31,850
take an example of offline experience

00:22:27,910 --> 00:22:35,720
this is flip card this is India's

00:22:31,850 --> 00:22:37,730
largest online shops so they use flip

00:22:35,720 --> 00:22:41,000
card light as their progressive web apps

00:22:37,730 --> 00:22:44,090
and they are showing us how how the

00:22:41,000 --> 00:22:45,980
offline first experience work for their

00:22:44,090 --> 00:22:49,159
case and I really like this example

00:22:45,980 --> 00:22:51,049
because because of how they just gray

00:22:49,159 --> 00:22:53,270
out everything to show you that you're

00:22:51,049 --> 00:22:55,789
actually offline even when you can see

00:22:53,270 --> 00:23:00,490
the content of the application so that's

00:22:55,789 --> 00:23:03,890
it's great and the general idea behind

00:23:00,490 --> 00:23:07,159
using service workers to provide an

00:23:03,890 --> 00:23:10,520
enhanced version of your application to

00:23:07,159 --> 00:23:14,030
improve performance or provide offline

00:23:10,520 --> 00:23:16,250
experience is this so your app makes an

00:23:14,030 --> 00:23:18,590
request to the service worker this

00:23:16,250 --> 00:23:20,750
always work it checks if it's online or

00:23:18,590 --> 00:23:23,480
not if it's online it can go to the

00:23:20,750 --> 00:23:25,730
backend fetch the response and give it

00:23:23,480 --> 00:23:29,659
to your app if it's not it can go to the

00:23:25,730 --> 00:23:32,419
offline cache but this general idea can

00:23:29,659 --> 00:23:38,690
be extended to improve the performance

00:23:32,419 --> 00:23:41,870
of an application how do we do that with

00:23:38,690 --> 00:23:44,570
this work though so the page makes some

00:23:41,870 --> 00:23:48,530
requests to the service worker the sauce

00:23:44,570 --> 00:23:51,620
worker goes to the cache if it does not

00:23:48,530 --> 00:23:53,720
find any saved response for the request

00:23:51,620 --> 00:23:57,140
then it would go to the network and

00:23:53,720 --> 00:24:01,340
fetch the response so this is how you

00:23:57,140 --> 00:24:04,130
can improve the performance but when it

00:24:01,340 --> 00:24:07,760
comes to offline experience what we do

00:24:04,130 --> 00:24:10,669
is we go to the cache first look if we

00:24:07,760 --> 00:24:12,830
have any stored response for that

00:24:10,669 --> 00:24:14,659
request if we do not we go to the

00:24:12,830 --> 00:24:17,179
network but since you're offline you

00:24:14,659 --> 00:24:19,490
won't have any response from the network

00:24:17,179 --> 00:24:20,870
in which case we can go back to the

00:24:19,490 --> 00:24:24,169
cache and just

00:24:20,870 --> 00:24:26,750
fetch some offline dot HTML file that we

00:24:24,169 --> 00:24:29,540
might have saved to provide in case

00:24:26,750 --> 00:24:31,700
of the offline experience like when you

00:24:29,540 --> 00:24:33,260
use Google Chrome and you're not

00:24:31,700 --> 00:24:35,870
connected to the network you see that

00:24:33,260 --> 00:24:38,180
little dinosaur coming up so that's

00:24:35,870 --> 00:24:41,810
basically what is stored in the cache as

00:24:38,180 --> 00:24:44,390
the default offline behavior so we can

00:24:41,810 --> 00:24:45,280
just go to the cache and fetch that

00:24:44,390 --> 00:24:50,440
response

00:24:45,280 --> 00:24:54,230
um so looking at the code for doing this

00:24:50,440 --> 00:24:57,230
service workers come with a function

00:24:54,230 --> 00:25:00,590
called fetch so we can add an image

00:24:57,230 --> 00:25:02,660
listener to the fetch event and what we

00:25:00,590 --> 00:25:05,150
are trying to do here is basically we

00:25:02,660 --> 00:25:08,060
are first trying to reach the cache and

00:25:05,150 --> 00:25:11,990
see if we have any stored response if

00:25:08,060 --> 00:25:14,780
the cache the cache match is a success

00:25:11,990 --> 00:25:17,120
we return the response if however it's

00:25:14,780 --> 00:25:20,960
not we fall back to the network now the

00:25:17,120 --> 00:25:22,940
network would not return any response so

00:25:20,960 --> 00:25:25,070
in the case when both of them fails we

00:25:22,940 --> 00:25:27,380
just go back to the cache to match with

00:25:25,070 --> 00:25:30,470
an off sign dot HTML and then return

00:25:27,380 --> 00:25:32,390
that response so that's how we can

00:25:30,470 --> 00:25:35,330
actually you know improve the

00:25:32,390 --> 00:25:37,700
performance of an application by relying

00:25:35,330 --> 00:25:39,950
on the cache first and then going to the

00:25:37,700 --> 00:25:42,500
network because cache is definitely

00:25:39,950 --> 00:25:44,300
faster than network so the first step is

00:25:42,500 --> 00:25:46,010
to go to the cache if you can't find

00:25:44,300 --> 00:25:47,540
anything there go to the network if you

00:25:46,010 --> 00:25:50,410
can't find there go come back to the

00:25:47,540 --> 00:25:55,700
cache and just load the offline version

00:25:50,410 --> 00:25:58,670
so that's how it's done now next coming

00:25:55,700 --> 00:26:01,580
to another great feature of progressive

00:25:58,670 --> 00:26:05,480
web apps which are push notifications

00:26:01,580 --> 00:26:08,780
push notifications web push

00:26:05,480 --> 00:26:11,000
notifications get their name from the

00:26:08,780 --> 00:26:14,540
fact that the notifications are pushed

00:26:11,000 --> 00:26:16,820
from the server to the client even when

00:26:14,540 --> 00:26:19,460
the user are not using the browser

00:26:16,820 --> 00:26:21,530
because they are enhanced with

00:26:19,460 --> 00:26:23,360
serviceworkers which run in the

00:26:21,530 --> 00:26:27,410
background so they do not necessarily

00:26:23,360 --> 00:26:30,410
need the browser to be up and running we

00:26:27,410 --> 00:26:32,840
can just push messages or notifications

00:26:30,410 --> 00:26:36,890
even when the user is not using the

00:26:32,840 --> 00:26:38,810
application so the the pop-up messages

00:26:36,890 --> 00:26:40,880
that we get on our mobile devices all

00:26:38,810 --> 00:26:42,650
the time from the native applications

00:26:40,880 --> 00:26:45,350
that is now possible with the web as

00:26:42,650 --> 00:26:50,540
well and we make use of that in

00:26:45,350 --> 00:26:51,670
progressive web apps so a widest push

00:26:50,540 --> 00:26:56,360
matter

00:26:51,670 --> 00:26:58,910
um they are used to obviously engage

00:26:56,360 --> 00:27:00,860
more user because even when they are not

00:26:58,910 --> 00:27:04,040
using the application you can send them

00:27:00,860 --> 00:27:06,710
updates or notifications to make them

00:27:04,040 --> 00:27:10,420
come back on your application they have

00:27:06,710 --> 00:27:13,400
been proven to retain a lot of users

00:27:10,420 --> 00:27:16,100
they are strictly permission based which

00:27:13,400 --> 00:27:19,160
means that the user explicitly has to

00:27:16,100 --> 00:27:21,830
opt in or subscribe to receiving

00:27:19,160 --> 00:27:24,050
notifications from a website so you

00:27:21,830 --> 00:27:27,980
cannot just send notifications to anyone

00:27:24,050 --> 00:27:31,070
unless and until they accept that these

00:27:27,980 --> 00:27:33,890
they are used to send timely updates to

00:27:31,070 --> 00:27:37,820
the user with relevant information and

00:27:33,890 --> 00:27:40,850
of course there are no force commitments

00:27:37,820 --> 00:27:43,700
in the sense that the user does not have

00:27:40,850 --> 00:27:46,610
to share any contact information via the

00:27:43,700 --> 00:27:49,640
email ID or anything the messages are

00:27:46,610 --> 00:27:51,980
just routed to the capability URL

00:27:49,640 --> 00:27:54,860
associated with the Service Worker for

00:27:51,980 --> 00:27:56,950
that particular page so and of course

00:27:54,860 --> 00:28:01,130
the user can opt out of receiving

00:27:56,950 --> 00:28:06,710
notification anytime that they want so

00:28:01,130 --> 00:28:09,650
no commitments service workers are used

00:28:06,710 --> 00:28:14,900
for web push so definitely even this is

00:28:09,650 --> 00:28:18,350
done over HTTPS so now when we say that

00:28:14,900 --> 00:28:22,880
a web push notifications works over

00:28:18,350 --> 00:28:25,250
HTTPS we mean that we have a server we

00:28:22,880 --> 00:28:26,930
have a client a server that sends the

00:28:25,250 --> 00:28:30,260
message to crime that receives a message

00:28:26,930 --> 00:28:33,740
and a web push service that sits in

00:28:30,260 --> 00:28:36,110
between them now being HTTPS only

00:28:33,740 --> 00:28:37,970
ensures that the communication channel

00:28:36,110 --> 00:28:40,130
between the server and the push service

00:28:37,970 --> 00:28:43,580
and that between the client and push

00:28:40,130 --> 00:28:46,300
service is secure however it does not

00:28:43,580 --> 00:28:47,570
ensure that the push service itself is

00:28:46,300 --> 00:28:50,510
secure

00:28:47,570 --> 00:28:53,210
so that's why we encrypt the push

00:28:50,510 --> 00:28:54,380
message and service side using the

00:28:53,210 --> 00:28:57,320
clients public

00:28:54,380 --> 00:29:00,440
key so that when finally the message

00:28:57,320 --> 00:29:02,510
reaches the client only they can decrypt

00:29:00,440 --> 00:29:04,430
the message and read it so the poor

00:29:02,510 --> 00:29:07,970
service that actually sits in between

00:29:04,430 --> 00:29:13,700
them has no capability to read the

00:29:07,970 --> 00:29:16,300
actual message it's encrypted so a basic

00:29:13,700 --> 00:29:19,190
overflow or the workflow of how

00:29:16,300 --> 00:29:23,600
everything works for push notification

00:29:19,190 --> 00:29:26,870
is this the client registers for push

00:29:23,600 --> 00:29:29,480
notification with the push service sends

00:29:26,870 --> 00:29:32,270
the identifier to the app so wherever

00:29:29,480 --> 00:29:34,070
there's a new message the server sends

00:29:32,270 --> 00:29:36,500
the message to the push service add the

00:29:34,070 --> 00:29:39,250
identifier URL and the push service

00:29:36,500 --> 00:29:42,830
redirects or reroutes the message to the

00:29:39,250 --> 00:29:45,770
client that is associated with that URL

00:29:42,830 --> 00:29:50,170
now if anything that I said in the last

00:29:45,770 --> 00:29:54,050
30 seconds seemed like a mobile

00:29:50,170 --> 00:29:58,190
comparison of this then I sincerely

00:29:54,050 --> 00:30:02,270
apologize but let's look at it one by

00:29:58,190 --> 00:30:04,490
one so what makes push notifications to

00:30:02,270 --> 00:30:08,090
API is the push API and the notification

00:30:04,490 --> 00:30:10,550
API push API is invoked when a server

00:30:08,090 --> 00:30:12,440
supplies information to the service

00:30:10,550 --> 00:30:13,240
worker and allow service worker to

00:30:12,440 --> 00:30:16,250
handle it

00:30:13,240 --> 00:30:18,260
notification API is used by the service

00:30:16,250 --> 00:30:21,620
worker to determine how it's going to

00:30:18,260 --> 00:30:24,500
show the message to the users so the

00:30:21,620 --> 00:30:28,390
first step in the entire workflow is to

00:30:24,500 --> 00:30:32,390
subscribe to you know the push service

00:30:28,390 --> 00:30:35,600
so this is done by the client or the

00:30:32,390 --> 00:30:38,330
user clicking on the allow notification

00:30:35,600 --> 00:30:41,060
on the web pages so that is basically

00:30:38,330 --> 00:30:43,220
the user saying hey their website I

00:30:41,060 --> 00:30:46,370
would like to receive messages from you

00:30:43,220 --> 00:30:49,150
so when it subscribes to the push

00:30:46,370 --> 00:30:51,830
service it gets in response a

00:30:49,150 --> 00:30:54,260
subscription object now this

00:30:51,830 --> 00:30:57,500
subscription object is basically a

00:30:54,260 --> 00:31:00,140
combination of two things the endpoint

00:30:57,500 --> 00:31:04,040
URL that is associated with that line

00:31:00,140 --> 00:31:07,070
and the clients public key so the client

00:31:04,040 --> 00:31:08,179
then sends this subscription object to

00:31:07,070 --> 00:31:10,369
the server

00:31:08,179 --> 00:31:12,619
where this oppress subscription object

00:31:10,369 --> 00:31:14,990
is stored in the database and can be

00:31:12,619 --> 00:31:19,610
used whenever there is a new message to

00:31:14,990 --> 00:31:21,409
be sent to the client so the object

00:31:19,610 --> 00:31:25,970
looks something like this it has an

00:31:21,409 --> 00:31:29,629
endpoint URL which tells which line it

00:31:25,970 --> 00:31:33,490
is so it's specific and particularly it

00:31:29,629 --> 00:31:36,470
is unique to a subscription so each

00:31:33,490 --> 00:31:39,350
client has a unique endpoint URL and

00:31:36,470 --> 00:31:40,789
then there's obviously the client public

00:31:39,350 --> 00:31:43,149
key which the server would use to

00:31:40,789 --> 00:31:46,279
encrypt the data like we talked with you

00:31:43,149 --> 00:31:48,830
when coming to the push when coming to

00:31:46,279 --> 00:31:51,610
the server side the server now has the

00:31:48,830 --> 00:31:55,340
clients public key and the endpoint URL

00:31:51,610 --> 00:31:58,399
so whenever the server has a new message

00:31:55,340 --> 00:32:01,759
to deliver to the client it just simply

00:31:58,399 --> 00:32:04,460
uses that endpoint URL and sends it to

00:32:01,759 --> 00:32:07,009
that particular location after

00:32:04,460 --> 00:32:11,029
encrypting it with the clients public

00:32:07,009 --> 00:32:13,100
key so it just sort of routes the

00:32:11,029 --> 00:32:16,070
message to the push service at the

00:32:13,100 --> 00:32:18,289
endpoint URL now remember the push

00:32:16,070 --> 00:32:19,669
service cannot actually read the message

00:32:18,289 --> 00:32:23,240
because it's encrypted using the

00:32:19,669 --> 00:32:26,869
client's public key so the push service

00:32:23,240 --> 00:32:29,690
can only redirect or reroute the message

00:32:26,869 --> 00:32:31,700
to the correct client correct client

00:32:29,690 --> 00:32:36,799
which is associated with that particular

00:32:31,700 --> 00:32:38,840
endpoint URL right now coming back to

00:32:36,799 --> 00:32:41,360
the client side when a service worker

00:32:38,840 --> 00:32:44,600
receives the message Porsche event is

00:32:41,360 --> 00:32:47,409
triggered it wakes up and executes the

00:32:44,600 --> 00:32:50,240
listener associated with the push event

00:32:47,409 --> 00:32:52,549
this is where we handle displaying the

00:32:50,240 --> 00:32:58,909
notification of the client side using

00:32:52,549 --> 00:33:01,730
the notification API so when we add the

00:32:58,909 --> 00:33:04,820
listener to the push event we can do a

00:33:01,730 --> 00:33:07,460
whole bunch of stuff under that we can

00:33:04,820 --> 00:33:09,830
set the title options etc etc which is

00:33:07,460 --> 00:33:13,279
basically how we want to display the

00:33:09,830 --> 00:33:15,679
notification to the user and we can then

00:33:13,279 --> 00:33:19,210
use a registration dot show notification

00:33:15,679 --> 00:33:21,960
to show the notification to the client

00:33:19,210 --> 00:33:24,240
so that's it this completes

00:33:21,960 --> 00:33:26,279
this cycle and you get a real-time web

00:33:24,240 --> 00:33:29,419
push notification from the app server

00:33:26,279 --> 00:33:34,260
through the client wire service workers

00:33:29,419 --> 00:33:38,070
now this is how web push notification

00:33:34,260 --> 00:33:41,130
works and even though I can point out a

00:33:38,070 --> 00:33:43,980
lot of data and statistics that proves

00:33:41,130 --> 00:33:47,640
that push notifications effectively

00:33:43,980 --> 00:33:50,100
reengage users and retain a substantial

00:33:47,640 --> 00:33:54,120
number of users to your website they

00:33:50,100 --> 00:33:58,620
still act as a double-edged sword and by

00:33:54,120 --> 00:34:01,260
that I mean that sending unnecessary

00:33:58,620 --> 00:34:06,120
messages or untimely messages to users

00:34:01,260 --> 00:34:08,970
can result to be really destructive so

00:34:06,120 --> 00:34:15,270
let's not be too pushy with the push

00:34:08,970 --> 00:34:17,429
notifications and that's a wrap so these

00:34:15,270 --> 00:34:21,030
were a few things to show what

00:34:17,429 --> 00:34:24,149
progressive web apps can do if any of

00:34:21,030 --> 00:34:26,040
this has caught your attention or if any

00:34:24,149 --> 00:34:28,560
of this interests you you can check out

00:34:26,040 --> 00:34:31,409
this website it's a really cool website

00:34:28,560 --> 00:34:33,929
listing a bunch of progressive web apps

00:34:31,409 --> 00:34:36,510
it can give you a lot of inspiration to

00:34:33,929 --> 00:34:41,070
go ahead with them so do check out this

00:34:36,510 --> 00:34:42,780
website PWA rocks and then there's this

00:34:41,070 --> 00:34:45,240
website which shows incredible

00:34:42,780 --> 00:34:48,210
statistics about improvement of website

00:34:45,240 --> 00:34:52,139
who actually you know use progressive

00:34:48,210 --> 00:34:54,899
web apps PWA stats if the technology of

00:34:52,139 --> 00:34:57,089
serviceworker somehow residual resonates

00:34:54,899 --> 00:34:59,190
with the work that you're doing and if

00:34:57,089 --> 00:35:02,880
you want to go ahead and play around

00:34:59,190 --> 00:35:05,730
with them this is a really nice place to

00:35:02,880 --> 00:35:09,150
start off with the serviceworker

00:35:05,730 --> 00:35:11,960
cookbook it it is an amazing compilation

00:35:09,150 --> 00:35:15,180
of code which is feature wise

00:35:11,960 --> 00:35:17,730
distinguished or in the application and

00:35:15,180 --> 00:35:19,320
you can use it to look at the code and

00:35:17,730 --> 00:35:23,730
see what all features serviceworker

00:35:19,320 --> 00:35:25,920
support and if you're wondering what all

00:35:23,730 --> 00:35:28,890
the serviceworker can currently do at a

00:35:25,920 --> 00:35:32,760
particular browser do check out this

00:35:28,890 --> 00:35:35,690
website it tells you where the browser

00:35:32,760 --> 00:35:37,910
is in the supporting source work

00:35:35,690 --> 00:35:39,910
so there are a lot of things associated

00:35:37,910 --> 00:35:42,200
with serviceworker and not all browser

00:35:39,910 --> 00:35:44,810
support each of the features so if you

00:35:42,200 --> 00:35:46,579
want to check out a which is supported

00:35:44,810 --> 00:35:49,990
before trying your hands on something

00:35:46,579 --> 00:35:53,990
this is a really nice place to start

00:35:49,990 --> 00:35:56,660
okay so these were a few things related

00:35:53,990 --> 00:35:59,480
to progressive web apps and how service

00:35:56,660 --> 00:36:02,420
workers are used to get the maximum

00:35:59,480 --> 00:36:04,940
benefit out of the web progressive web

00:36:02,420 --> 00:36:07,010
apps are undoubtedly one of the best

00:36:04,940 --> 00:36:09,859
things to have happen to the web lately

00:36:07,010 --> 00:36:11,960
and we all are crazily excited about

00:36:09,859 --> 00:36:16,490
what's in store next

00:36:11,960 --> 00:36:20,320
so until then thank you very much

00:36:16,490 --> 00:36:20,320

YouTube URL: https://www.youtube.com/watch?v=fUJWNiWeQ98


