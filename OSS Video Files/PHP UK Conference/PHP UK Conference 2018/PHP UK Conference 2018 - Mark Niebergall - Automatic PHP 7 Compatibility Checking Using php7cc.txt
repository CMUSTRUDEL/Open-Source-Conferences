Title: PHP UK Conference 2018 - Mark Niebergall - Automatic PHP 7 Compatibility Checking Using php7cc
Publication date: 2018-03-27
Playlist: PHP UK Conference 2018
Description: 
	Running PHP 5 and ready to upgrade to PHP 7 but want to check your code for compatibility? Learn all about using php7cc to automatically check code for PHP 7 compatibility, including installation, syntax, options, and how to run the tool. Discuss the commonly seen incompatible code and see how to fix the code to be compatible with PHP 7. Leave with the tools and knowledge needed to upgrade any PHP 5 project to PHP 7.
Captions: 
	00:00:02,419 --> 00:00:07,609
we were talking about PHP 7cc and he

00:00:06,319 --> 00:00:08,540
should be compatibility I didn't snuck

00:00:07,609 --> 00:00:09,320
that one they had a couple static

00:00:08,540 --> 00:00:11,179
analysis tools

00:00:09,320 --> 00:00:15,049
who here is running seven two in

00:00:11,179 --> 00:00:17,600
production C few hands not too many this

00:00:15,049 --> 00:00:18,980
this tool is helpful for all the way up

00:00:17,600 --> 00:00:20,810
to seven to both these can help you

00:00:18,980 --> 00:00:22,460
helpful so this will be very pertinent

00:00:20,810 --> 00:00:24,260
everybody here sounds like other than

00:00:22,460 --> 00:00:27,950
other than wim and another person so

00:00:24,260 --> 00:00:29,360
we're good the talks are my slides are

00:00:27,950 --> 00:00:32,419
posted online if you want to follow

00:00:29,360 --> 00:00:34,010
along see the examples anything like

00:00:32,419 --> 00:00:36,740
that the pose the slides are posted on

00:00:34,010 --> 00:00:39,620
the joined in all the coding examples

00:00:36,740 --> 00:00:41,510
that I have are posted on github you can

00:00:39,620 --> 00:00:42,920
also go and pull that down and follow

00:00:41,510 --> 00:00:43,910
along and look at the code and see

00:00:42,920 --> 00:00:46,430
what's wrong with it why it's not

00:00:43,910 --> 00:00:47,870
compatible so if feel free to follow

00:00:46,430 --> 00:00:49,760
along you have your laptop's up

00:00:47,870 --> 00:00:53,450
installing things that's perfectly fine

00:00:49,760 --> 00:00:55,070
I like that like that a approach as I

00:00:53,450 --> 00:00:56,930
mentioned it runs Utah PHP user group

00:00:55,070 --> 00:00:58,640
that's about five thousand miles away

00:00:56,930 --> 00:00:59,450
it's long track but it's good to come

00:00:58,640 --> 00:01:01,850
here

00:00:59,450 --> 00:01:03,020
left flying drones similar senior

00:01:01,850 --> 00:01:05,239
software engineer but working on a drug

00:01:03,020 --> 00:01:06,770
testing platform I'm sorry if you've

00:01:05,239 --> 00:01:09,290
ever been fired for positive drug test

00:01:06,770 --> 00:01:12,080
it relates the United States mostly so

00:01:09,290 --> 00:01:15,590
front on its own here but masters degree

00:01:12,080 --> 00:01:16,909
and so on I learned yesterday on the

00:01:15,590 --> 00:01:19,250
Utah keeps for user groups older than

00:01:16,909 --> 00:01:20,690
any user group in the UK it's from 2003

00:01:19,250 --> 00:01:23,330
so it's gonna beat by just a year

00:01:20,690 --> 00:01:24,979
it's an early starting one I did live up

00:01:23,330 --> 00:01:26,479
in Manchester for a couple years if you

00:01:24,979 --> 00:01:28,070
live living that area come talk to me of

00:01:26,479 --> 00:01:32,270
love talking about Manchester the Lake

00:01:28,070 --> 00:01:35,030
District so that there's a great time I

00:01:32,270 --> 00:01:37,189
had up there there's a while ago but was

00:01:35,030 --> 00:01:38,960
there for a couple years this is where I

00:01:37,189 --> 00:01:41,390
live I love flying drones as a drone

00:01:38,960 --> 00:01:42,770
picture it's a nice Mountain is there's

00:01:41,390 --> 00:01:46,610
some snow and yeah I'm gonna say at the

00:01:42,770 --> 00:01:48,229
western US mountains not mountains and

00:01:46,610 --> 00:01:49,400
there's open West's I flew my drone

00:01:48,229 --> 00:01:50,979
during lunch at open West to that

00:01:49,400 --> 00:01:53,210
picture it's very happy with it

00:01:50,979 --> 00:01:56,360
good Salt Lake Valley there it's a fun

00:01:53,210 --> 00:01:57,530
polyglot conference in the summertime if

00:01:56,360 --> 00:02:01,579
you want to run out the clocks it's a

00:01:57,530 --> 00:02:03,799
good one we're gonna talk about these

00:02:01,579 --> 00:02:08,060
tools has it wouldn't know what this is

00:02:03,799 --> 00:02:12,700
anyone know this tool is a see one hand

00:02:08,060 --> 00:02:12,700
go up any others anyone do you

00:02:12,830 --> 00:02:16,770
only one I see a couple okay I see

00:02:15,210 --> 00:02:20,070
another hand someone wanna be brave and

00:02:16,770 --> 00:02:24,030
tell me what it is yeah crimping tool

00:02:20,070 --> 00:02:27,210
for PEX piping so if you've never used

00:02:24,030 --> 00:02:29,460
one of these it's a tool I had I learned

00:02:27,210 --> 00:02:32,280
how to use it not too long ago there's

00:02:29,460 --> 00:02:34,770
some plumbing in my house a little

00:02:32,280 --> 00:02:36,300
leaking wasn't too bad luckily but you

00:02:34,770 --> 00:02:38,850
have a few parts to it you have the main

00:02:36,300 --> 00:02:42,120
tool you have these little rings that go

00:02:38,850 --> 00:02:45,290
into the tool and you have this tool

00:02:42,120 --> 00:02:49,140
over here it's a compatibility checker

00:02:45,290 --> 00:02:51,990
it lets you know if what you're doing is

00:02:49,140 --> 00:02:54,750
right it checks to make sure that you've

00:02:51,990 --> 00:02:56,010
got the crimp on right and that the

00:02:54,750 --> 00:02:57,240
Plumbing's gonna work if you don't get

00:02:56,010 --> 00:02:59,910
it on right you're gonna have leaks

00:02:57,240 --> 00:03:03,390
you're gonna have bugs you're gonna have

00:02:59,910 --> 00:03:05,100
issues okay so this is a practical

00:03:03,390 --> 00:03:07,020
real-world example of where we had a

00:03:05,100 --> 00:03:10,200
compatibility checker something's used

00:03:07,020 --> 00:03:12,480
in plumbing to help prevent problems we

00:03:10,200 --> 00:03:14,700
had the same thing for code we have some

00:03:12,480 --> 00:03:18,690
tools that we can use to help prevent

00:03:14,700 --> 00:03:21,030
issues when we upgrade so when you walk

00:03:18,690 --> 00:03:24,360
out of here my hope is that you have a

00:03:21,030 --> 00:03:26,280
good understanding of how of why to

00:03:24,360 --> 00:03:28,470
upgrade to PHP 7 some of the important

00:03:26,280 --> 00:03:30,450
things there if you here for whims talk

00:03:28,470 --> 00:03:33,959
yesterday you bent much more depth and

00:03:30,450 --> 00:03:35,340
I'm gonna go into and primarily you're

00:03:33,959 --> 00:03:37,200
gonna know how to use these tools so

00:03:35,340 --> 00:03:38,070
we're gonna cover you'll be able to

00:03:37,200 --> 00:03:39,990
should be able to walk out of here

00:03:38,070 --> 00:03:42,630
knowing exactly how to use them and

00:03:39,990 --> 00:03:43,980
build a run against your projects you

00:03:42,630 --> 00:03:45,360
can even run it against a project during

00:03:43,980 --> 00:03:48,180
this talk if you'd like to it's

00:03:45,360 --> 00:03:50,730
perfectly fine and again

00:03:48,180 --> 00:03:52,950
the slides are posted the code is posted

00:03:50,730 --> 00:03:54,720
if you want to fall along unjoined and

00:03:52,950 --> 00:04:01,160
the slides are posted on through the

00:03:54,720 --> 00:04:03,510
joynton why are these tools important

00:04:01,160 --> 00:04:05,880
the main project I worked on that drug

00:04:03,510 --> 00:04:10,650
testing when I mentioned it was a big

00:04:05,880 --> 00:04:14,580
project that started in PHP 4 so I had

00:04:10,650 --> 00:04:16,640
some very old styles of code it was

00:04:14,580 --> 00:04:20,820
hundreds of thousands of lines of code

00:04:16,640 --> 00:04:22,820
and because was a legacy application it

00:04:20,820 --> 00:04:30,410
had few unit tests

00:04:22,820 --> 00:04:32,480
okay and upgrading it to five was a mess

00:04:30,410 --> 00:04:35,480
getting it to seven was gonna be even

00:04:32,480 --> 00:04:37,250
harder now that project has made a lot

00:04:35,480 --> 00:04:39,350
of progress it's gotten a lot of unit

00:04:37,250 --> 00:04:42,110
tests added to it behavioral tests add

00:04:39,350 --> 00:04:43,040
it to it it's gotten framework done

00:04:42,110 --> 00:04:44,720
framework on it's got all these

00:04:43,040 --> 00:04:45,920
different nice things goes in Express if

00:04:44,720 --> 00:04:49,150
all these nice things coming on to it

00:04:45,920 --> 00:04:51,020
but we wanted to move it to PHP seven

00:04:49,150 --> 00:04:53,150
again hundreds of thousand lines of code

00:04:51,020 --> 00:04:55,430
there's no way to look at all those

00:04:53,150 --> 00:04:58,010
lines of code and make sure it's gonna

00:04:55,430 --> 00:05:00,920
work and the unit tests didn't have

00:04:58,010 --> 00:05:04,400
complete full code coverage so unit

00:05:00,920 --> 00:05:05,960
tests didn't have complete coverage so

00:05:04,400 --> 00:05:07,810
there's a there's a common struggling

00:05:05,960 --> 00:05:11,300
one in that kind of similar situation

00:05:07,810 --> 00:05:13,910
it's very common right

00:05:11,300 --> 00:05:17,090
and then upgrading to peach b7 was it

00:05:13,910 --> 00:05:20,120
was a testable two tasks as a developer

00:05:17,090 --> 00:05:22,370
I had my project manager tried to

00:05:20,120 --> 00:05:25,430
upgrade and didn't kick pick up an

00:05:22,370 --> 00:05:27,110
attraction so then I try to work with

00:05:25,430 --> 00:05:29,210
our customers which happened to be a

00:05:27,110 --> 00:05:31,190
child company about it was just kind of

00:05:29,210 --> 00:05:33,680
funny organization and that didn't work

00:05:31,190 --> 00:05:36,380
out very well so I went to sis admins

00:05:33,680 --> 00:05:38,900
and the traction didn't pick up they

00:05:36,380 --> 00:05:39,740
were busy with others to Savin things so

00:05:38,900 --> 00:05:42,980
finally as a developer that

00:05:39,740 --> 00:05:46,130
responsibility fell unto me there's a

00:05:42,980 --> 00:05:48,590
process I took was running these

00:05:46,130 --> 00:05:51,590
automated tests or these automated code

00:05:48,590 --> 00:05:53,840
coverage running unit tests and making

00:05:51,590 --> 00:05:55,340
sure that the code is compatible with PG

00:05:53,840 --> 00:05:57,520
seven and then were able to move that

00:05:55,340 --> 00:06:00,110
along and once I took ownership of that

00:05:57,520 --> 00:06:01,490
it moved up very fast within a couple of

00:06:00,110 --> 00:06:04,730
months we were on PHP seven one in

00:06:01,490 --> 00:06:07,340
production so as developers that's

00:06:04,730 --> 00:06:09,650
something you can take on the push to

00:06:07,340 --> 00:06:11,240
move to upgrade to Peachtree seven

00:06:09,650 --> 00:06:12,020
because if you don't do it nobody else

00:06:11,240 --> 00:06:16,610
that can do it for you

00:06:12,020 --> 00:06:19,550
most likely here's a quick rundown a

00:06:16,610 --> 00:06:22,100
quick overview of our agenda why

00:06:19,550 --> 00:06:23,720
upgrading introduction to the tools how

00:06:22,100 --> 00:06:26,660
to use the tools we go into the options

00:06:23,720 --> 00:06:27,710
with them some common issues we're gonna

00:06:26,660 --> 00:06:30,110
do some live demos

00:06:27,710 --> 00:06:32,720
I've got analysis that we're gonna

00:06:30,110 --> 00:06:33,800
compare some frameworks around the tools

00:06:32,720 --> 00:06:35,360
against some frameworks we're gonna see

00:06:33,800 --> 00:06:35,550
how they how they how they're doing

00:06:35,360 --> 00:06:39,390
right

00:06:35,550 --> 00:06:41,520
now and the CSV output of that by the

00:06:39,390 --> 00:06:42,990
way is on the github repo as you can

00:06:41,520 --> 00:06:46,560
want to run with it and do it everyone

00:06:42,990 --> 00:06:52,140
on there to add some considerations at

00:06:46,560 --> 00:06:55,500
the end so why would we want to upgrade

00:06:52,140 --> 00:06:56,940
to PHP seven and as we go through these

00:06:55,500 --> 00:06:59,760
different things the focus right here

00:06:56,940 --> 00:07:01,470
really is identifying incompatibilities

00:06:59,760 --> 00:07:02,700
things that are not gonna work if you

00:07:01,470 --> 00:07:04,140
upgrade to PHP seven right now in

00:07:02,700 --> 00:07:06,140
production is gonna break right we want

00:07:04,140 --> 00:07:07,860
to watch for those we want to fix those

00:07:06,140 --> 00:07:12,750
and we're gonna talk about how these

00:07:07,860 --> 00:07:15,270
automated tools can help out so PHP

00:07:12,750 --> 00:07:18,750
seven is two to three times faster than

00:07:15,270 --> 00:07:20,520
PHP five six that's very good right your

00:07:18,750 --> 00:07:22,290
server responses going to become faster

00:07:20,520 --> 00:07:25,710
it's thirty five thirty to fifty percent

00:07:22,290 --> 00:07:28,740
better memory consumption than five six

00:07:25,710 --> 00:07:30,150
five six and more requests which leads

00:07:28,740 --> 00:07:33,690
to more requests per second so our apps

00:07:30,150 --> 00:07:36,120
become faster our server load goes down

00:07:33,690 --> 00:07:38,430
okay we start seeing some some time

00:07:36,120 --> 00:07:40,290
saving some money saving customers are

00:07:38,430 --> 00:07:42,930
happier we're getting things done the

00:07:40,290 --> 00:07:44,150
server is responding faster that's all

00:07:42,930 --> 00:07:47,430
good

00:07:44,150 --> 00:07:50,160
security we have C spring which is a has

00:07:47,430 --> 00:07:51,330
random byte and random mints so we get

00:07:50,160 --> 00:07:55,440
some good cryptographically secure

00:07:51,330 --> 00:07:57,800
numbers live sodium it was is was

00:07:55,440 --> 00:08:02,700
introduced into PHP core and seven -

00:07:57,800 --> 00:08:04,550
it's the first made peach pea the first

00:08:02,700 --> 00:08:08,490
programming language to have a modern

00:08:04,550 --> 00:08:10,200
security suite built in two core so

00:08:08,490 --> 00:08:12,030
everyone is laughing at PHP previously

00:08:10,200 --> 00:08:13,380
is no longer laughing anymore so you're

00:08:12,030 --> 00:08:16,080
good it passed a full security audit and

00:08:13,380 --> 00:08:17,700
everything is a great great project if

00:08:16,080 --> 00:08:18,540
you're looking into there's any

00:08:17,700 --> 00:08:21,000
encryption at all

00:08:18,540 --> 00:08:23,820
look into Lib sodium m crypt was kicked

00:08:21,000 --> 00:08:26,850
out because it's based on stuff that has

00:08:23,820 --> 00:08:29,580
been updated for dozen years so it was

00:08:26,850 --> 00:08:35,280
deprecated in 71 it'll be gone probably

00:08:29,580 --> 00:08:38,850
seven three or eight password hash lost

00:08:35,280 --> 00:08:40,650
its salt option yes those aren't the

00:08:38,850 --> 00:08:42,000
worst things you could do it's gone it's

00:08:40,650 --> 00:08:44,130
good it automatically does it now and

00:08:42,000 --> 00:08:46,530
it's a deprecated it's a gone function

00:08:44,130 --> 00:08:49,160
deprecated are gone to anyone using

00:08:46,530 --> 00:08:50,810
argon two on their password hashing

00:08:49,160 --> 00:08:53,509
it's not the default yet but it's

00:08:50,810 --> 00:08:55,730
available in 72 and that's better than

00:08:53,509 --> 00:08:57,199
Blowfish that's currently the default so

00:08:55,730 --> 00:08:59,029
that's great I'm not sure when it's

00:08:57,199 --> 00:09:04,370
slated me come to you default but it's

00:08:59,029 --> 00:09:06,350
coming up we have scalar type

00:09:04,370 --> 00:09:10,040
declarations this is one of the best

00:09:06,350 --> 00:09:12,500
features of PHP 7 to 7 PP 7 so we have

00:09:10,040 --> 00:09:14,569
the ability to have scalar type so we

00:09:12,500 --> 00:09:16,639
have hint being passed in is forced to

00:09:14,569 --> 00:09:18,199
the end we have return type so we have

00:09:16,639 --> 00:09:21,439
something being specified on the return

00:09:18,199 --> 00:09:25,250
that right there is bliss it's so nice

00:09:21,439 --> 00:09:27,259
to have that Levi Morrison did a lot of

00:09:25,250 --> 00:09:28,850
work on that one he lives down the road

00:09:27,259 --> 00:09:30,410
for me okay like 20 minutes down the

00:09:28,850 --> 00:09:32,209
road for me he did a lot of work on that

00:09:30,410 --> 00:09:34,160
and he he did a great job that it's a

00:09:32,209 --> 00:09:38,240
huge benefit for PHP dad they strict

00:09:34,160 --> 00:09:40,009
typed on the method returns but this is

00:09:38,240 --> 00:09:41,600
one of the big catches we have reserved

00:09:40,009 --> 00:09:44,029
class names we're trying to upgrade to

00:09:41,600 --> 00:09:46,639
PHP 7 if you have a class name int or

00:09:44,029 --> 00:09:49,879
string or float treble or null or true

00:09:46,639 --> 00:09:51,259
or false they're all incompatible so the

00:09:49,879 --> 00:09:54,560
compatibility tools are gonna be able to

00:09:51,259 --> 00:09:57,319
pick up on these and catch those as a 72

00:09:54,560 --> 00:10:03,050
you can also add void to that list an

00:09:57,319 --> 00:10:06,370
object as deprecated something we'll get

00:10:03,050 --> 00:10:09,110
into whether the tools catch that or not

00:10:06,370 --> 00:10:11,449
no cholesky I love the question question

00:10:09,110 --> 00:10:14,569
mark as basically says this if it's not

00:10:11,449 --> 00:10:16,220
if it's null then do the second thing so

00:10:14,569 --> 00:10:18,649
what it basically does spaceship

00:10:16,220 --> 00:10:21,680
operator Devi traffic this is favorite

00:10:18,649 --> 00:10:23,870
one the names is great

00:10:21,680 --> 00:10:25,720
we have anonymous classes we have

00:10:23,870 --> 00:10:27,949
generated return from expressions

00:10:25,720 --> 00:10:30,290
exceptions and errors instead of hard

00:10:27,949 --> 00:10:32,959
failures many more great features we all

00:10:30,290 --> 00:10:35,389
cover all this isn't a peach b7 focused

00:10:32,959 --> 00:10:36,709
as far as features but just be aware of

00:10:35,389 --> 00:10:38,180
what's there and what could be

00:10:36,709 --> 00:10:43,220
incompatible with what you currently

00:10:38,180 --> 00:10:46,129
have so I have a the top 3 offenders

00:10:43,220 --> 00:10:48,290
list that we're gonna go into the number

00:10:46,129 --> 00:10:50,329
one offender that I have I found when we

00:10:48,290 --> 00:10:53,600
were upgrading was classes that still

00:10:50,329 --> 00:10:54,740
had peach p4 style constructors right so

00:10:53,600 --> 00:10:58,250
instead of having underscore underscore

00:10:54,740 --> 00:11:01,640
construct it had the class name

00:10:58,250 --> 00:11:04,160
that that's a CHP for style that's long

00:11:01,640 --> 00:11:08,120
gone if you have those leave will not

00:11:04,160 --> 00:11:11,690
work in peach b7 it must be fixed number

00:11:08,120 --> 00:11:13,850
two I found was HTTP Rob post data hey

00:11:11,690 --> 00:11:15,410
everybody have that lingering around we

00:11:13,850 --> 00:11:16,580
had some really old soap services that

00:11:15,410 --> 00:11:19,130
apparently still were using it and we

00:11:16,580 --> 00:11:21,260
had to go fix all those luckily it's an

00:11:19,130 --> 00:11:23,270
easy one fix we won't be going into

00:11:21,260 --> 00:11:25,280
detail exactly how to fix these php.net

00:11:23,270 --> 00:11:27,140
if you've look up those specific things

00:11:25,280 --> 00:11:30,230
it lists out exactly what the

00:11:27,140 --> 00:11:31,400
recommended replacement is so just be

00:11:30,230 --> 00:11:33,230
aware of that we won't go into exactly

00:11:31,400 --> 00:11:35,090
how to fix it but you'll be able to

00:11:33,230 --> 00:11:35,540
identify them and know what needs to get

00:11:35,090 --> 00:11:37,460
fixed

00:11:35,540 --> 00:11:41,180
then you have the tools available to go

00:11:37,460 --> 00:11:44,030
and make those fixes the third offender

00:11:41,180 --> 00:11:47,210
I found was static calls to non static

00:11:44,030 --> 00:11:49,460
methods okay so you know maybe a

00:11:47,210 --> 00:11:51,650
developer didn't notice or whether they

00:11:49,460 --> 00:11:54,440
wanted to take a shortcut so instead of

00:11:51,650 --> 00:11:57,620
newing up an instance of it they just

00:11:54,440 --> 00:12:00,170
did a colon colon method because public

00:11:57,620 --> 00:12:02,330
right you can do it it works well okay

00:12:00,170 --> 00:12:06,800
it doesn't that's not was intended to be

00:12:02,330 --> 00:12:09,920
used and in PHP seven that's no longer

00:12:06,800 --> 00:12:11,750
available it's deprecated so that was a

00:12:09,920 --> 00:12:16,010
big thing to look I found and had to

00:12:11,750 --> 00:12:18,440
watch for other things that are removed

00:12:16,010 --> 00:12:21,670
to be aware of call user method and call

00:12:18,440 --> 00:12:24,740
user method Ray we have ear edge is gone

00:12:21,670 --> 00:12:27,680
my seagulls replaced with a my sequel I

00:12:24,740 --> 00:12:29,620
or PDO seamless sequel mssql so you

00:12:27,680 --> 00:12:32,450
sequel server or PDO videos recommended

00:12:29,620 --> 00:12:35,240
some magic quotes runtimes that socket

00:12:32,450 --> 00:12:36,080
bind blocking and so on so we have a

00:12:35,240 --> 00:12:40,400
whole bunch of things that have changed

00:12:36,080 --> 00:12:41,839
or been removed in PHP seven so if we're

00:12:40,400 --> 00:12:45,500
using any of these things we have a

00:12:41,839 --> 00:12:48,740
problem that's going to get fixed we

00:12:45,500 --> 00:12:53,810
also have short opening tags these P

00:12:48,740 --> 00:12:57,620
tags that are gone the X debug no longer

00:12:53,810 --> 00:12:59,660
supports PHP seven sorry PHP 5 so if

00:12:57,620 --> 00:13:01,070
you're using the s debug you upgrade to

00:12:59,660 --> 00:13:02,360
seven you got to upgrade your X debug

00:13:01,070 --> 00:13:05,120
version as well I'm gonna talk about

00:13:02,360 --> 00:13:07,790
that yesterday well next to you bug and

00:13:05,120 --> 00:13:10,130
most libraries are focused on peach b7 I

00:13:07,790 --> 00:13:11,820
found especially on if you composer to

00:13:10,130 --> 00:13:12,930
install packages and libraries

00:13:11,820 --> 00:13:15,600
a lot of them are starting to lose

00:13:12,930 --> 00:13:17,820
support for peach b5 since it's no

00:13:15,600 --> 00:13:22,230
longer actively supported it's in the

00:13:17,820 --> 00:13:23,430
security patches only so they see these

00:13:22,230 --> 00:13:31,890
are what reasons why it's important to

00:13:23,430 --> 00:13:35,000
get this upgrade done so peach p7 CC is

00:13:31,890 --> 00:13:40,890
the first tool that we will talk about

00:13:35,000 --> 00:13:46,590
and we're gonna go to a live demo so

00:13:40,890 --> 00:13:49,920
peach b7 c c is a command you can run

00:13:46,590 --> 00:13:53,580
it's a available with composer you run

00:13:49,920 --> 00:13:59,430
it against a code base and it gives you

00:13:53,580 --> 00:14:01,890
some output so in this case we see array

00:13:59,430 --> 00:14:05,280
order and it gave us a warning because

00:14:01,890 --> 00:14:09,360
it's the possible rate element creation

00:14:05,280 --> 00:14:13,860
during by reference assignment okay we

00:14:09,360 --> 00:14:15,300
have bitwise shift going on bitwise

00:14:13,860 --> 00:14:16,680
shift by a negative number that's gonna

00:14:15,300 --> 00:14:19,710
fail so it tells us exactly what's gonna

00:14:16,680 --> 00:14:22,740
happen it gives us the line number it

00:14:19,710 --> 00:14:25,050
tells us what happened here's a

00:14:22,740 --> 00:14:27,690
constructor right so we have a

00:14:25,050 --> 00:14:30,540
constructor dot PHP and of course it's

00:14:27,690 --> 00:14:32,970
got peach before style naming on the

00:14:30,540 --> 00:14:37,290
constructor and it tells you that it's

00:14:32,970 --> 00:14:39,990
now deprecated we have no date

00:14:37,290 --> 00:14:41,370
formatting divided by zero it's gonna

00:14:39,990 --> 00:14:44,490
catch a lot of these meetings and these

00:14:41,370 --> 00:14:46,410
scripts are intended to be backwards

00:14:44,490 --> 00:14:47,130
incompatible things that is run against

00:14:46,410 --> 00:14:48,990
so there's gonna be a whole bunch of

00:14:47,130 --> 00:14:51,330
errors in here and that's expected ear

00:14:48,990 --> 00:14:53,250
edge removed right so we see this

00:14:51,330 --> 00:14:56,490
removed function you read your place you

00:14:53,250 --> 00:14:58,110
rigged anyway so you can see it gives

00:14:56,490 --> 00:15:00,300
you nice output it tells you the line

00:14:58,110 --> 00:15:02,370
numbers it tells you what's what's what

00:15:00,300 --> 00:15:06,360
happened what it gives you an error or a

00:15:02,370 --> 00:15:08,400
warning there's also an info I here's my

00:15:06,360 --> 00:15:09,330
sequel trying to my sequel connect of

00:15:08,400 --> 00:15:11,550
course it's gonna here because my

00:15:09,330 --> 00:15:15,690
sequels gone so it tells you exactly

00:15:11,550 --> 00:15:18,860
what happened what line it was and so on

00:15:15,690 --> 00:15:21,180
down the listing see split right removed

00:15:18,860 --> 00:15:24,930
at the end it tells you how many files

00:15:21,180 --> 00:15:25,590
are checked as a note peach b7 CC gets a

00:15:24,930 --> 00:15:27,870
few

00:15:25,590 --> 00:15:30,180
you were files than PHP compatibility

00:15:27,870 --> 00:15:34,320
because PHP seven-seat see defaults to

00:15:30,180 --> 00:15:35,250
only PHP files and it tells you the

00:15:34,320 --> 00:15:36,930
amount of time it took and we'll get

00:15:35,250 --> 00:15:47,460
into the analysis at the end too or near

00:15:36,930 --> 00:15:48,870
the end on that okay so now we've seen

00:15:47,460 --> 00:15:50,040
it I like to start with the kind of live

00:15:48,870 --> 00:15:51,690
demo to get an idea of what it looks

00:15:50,040 --> 00:15:55,290
like and get a feel for it before we

00:15:51,690 --> 00:15:57,360
dive into it I don't know that the

00:15:55,290 --> 00:16:00,540
author's name of it even know four

00:15:57,360 --> 00:16:02,870
author's name I have the github name but

00:16:00,540 --> 00:16:05,130
I don't have the person who actually did

00:16:02,870 --> 00:16:09,540
it's a standalone library available

00:16:05,130 --> 00:16:12,510
through composer static of code analysis

00:16:09,540 --> 00:16:14,730
tool like we've talked about so it's

00:16:12,510 --> 00:16:17,460
available just to run by itself as

00:16:14,730 --> 00:16:19,470
standalone we get to PHP compatibility

00:16:17,460 --> 00:16:20,480
it's a sniff for code sniffer so that's

00:16:19,470 --> 00:16:23,520
a little difference there

00:16:20,480 --> 00:16:26,610
it's was focused primarily for upgrading

00:16:23,520 --> 00:16:29,430
to PGP seven so it doesn't catch a lot

00:16:26,610 --> 00:16:31,020
of the PHP 71 and 72 things but it

00:16:29,430 --> 00:16:32,790
catches a lot of the things going from

00:16:31,020 --> 00:16:37,680
PHP five three to five six all the way

00:16:32,790 --> 00:16:39,210
up to PC seven and again it doesn't

00:16:37,680 --> 00:16:41,550
automatically fix things for you that'd

00:16:39,210 --> 00:16:44,960
be so nice if it did but that would be

00:16:41,550 --> 00:16:47,130
really really hard to make it do that

00:16:44,960 --> 00:16:48,540
and it's really not too bad as a

00:16:47,130 --> 00:16:50,700
developer to go fix them if you have

00:16:48,540 --> 00:16:52,980
identified the specific lines you know

00:16:50,700 --> 00:16:54,780
php.net reference to look good up know

00:16:52,980 --> 00:17:03,780
what had to happen and no one needs to

00:16:54,780 --> 00:17:04,560
occur to make that start working to

00:17:03,780 --> 00:17:09,500
install it

00:17:04,560 --> 00:17:12,270
composer require estatal a slash PP 7 CC

00:17:09,500 --> 00:17:17,370
dev is the default now but you can do -

00:17:12,270 --> 00:17:20,550
- dev and then to run it dot slash

00:17:17,370 --> 00:17:24,750
vendor slash bin slash PHP 7 CC and then

00:17:20,550 --> 00:17:27,570
the path or the specific file if you add

00:17:24,750 --> 00:17:30,330
it to your path using those commands

00:17:27,570 --> 00:17:35,130
right there then you can just do PHP 7

00:17:30,330 --> 00:17:36,870
CC and then whatever target you have and

00:17:35,130 --> 00:17:41,070
that will give you that nice output that

00:17:36,870 --> 00:17:42,720
I showed you earlier and so if you're

00:17:41,070 --> 00:17:46,830
following along and your laptop's feel

00:17:42,720 --> 00:17:49,050
free to pull it down and run it again

00:17:46,830 --> 00:17:54,510
you can go target specific paths or you

00:17:49,050 --> 00:17:55,680
can target a specific file using it so

00:17:54,510 --> 00:17:57,180
we're gonna go over the options as well

00:17:55,680 --> 00:17:59,220
because that helps with display and

00:17:57,180 --> 00:18:01,320
determining what needs to happen so the

00:17:59,220 --> 00:18:03,930
dash H or dash dash H is pretty standard

00:18:01,320 --> 00:18:06,300
gives you the help information and it

00:18:03,930 --> 00:18:07,890
looks like that we'll go through each of

00:18:06,300 --> 00:18:11,910
these real quick so you're familiar with

00:18:07,890 --> 00:18:13,320
those so - ease extensions as I

00:18:11,910 --> 00:18:17,790
mentioned the default extension for

00:18:13,320 --> 00:18:19,980
peach b7 CC is PHP but maybe you have

00:18:17,790 --> 00:18:22,790
other files that have PHP code in them

00:18:19,980 --> 00:18:26,190
that are not PHP files then you can

00:18:22,790 --> 00:18:27,660
target those files specifically so we

00:18:26,190 --> 00:18:29,400
had changed changed extension to

00:18:27,660 --> 00:18:32,490
whatever that you know maybe peach B s

00:18:29,400 --> 00:18:37,010
and PHP files would be example it's

00:18:32,490 --> 00:18:41,910
comma separated available you have

00:18:37,010 --> 00:18:43,980
accept so R - X to exclude specific

00:18:41,910 --> 00:18:45,450
files or specific directories this is

00:18:43,980 --> 00:18:47,280
especially helpful for running it

00:18:45,450 --> 00:18:49,890
against vendor so you're using composer

00:18:47,280 --> 00:18:53,520
again then you have vendor and you can

00:18:49,890 --> 00:18:55,710
skip that directory that's because

00:18:53,520 --> 00:18:57,060
you're not gonna want to run PHP 7cc

00:18:55,710 --> 00:19:00,420
against your vendor directory generally

00:18:57,060 --> 00:19:03,750
speaking because it's you're targeting

00:19:00,420 --> 00:19:05,460
your files right so you'll use composer

00:19:03,750 --> 00:19:07,410
to upgrade the packages rather than

00:19:05,460 --> 00:19:10,070
running compatibility checkers against

00:19:07,410 --> 00:19:10,070
vendor code

00:19:10,759 --> 00:19:16,179
you have the level so the default is to

00:19:13,759 --> 00:19:19,459
info and everything above that so info

00:19:16,179 --> 00:19:22,399
warning message and error good warning

00:19:19,459 --> 00:19:23,749
yeah you can change that if you want if

00:19:22,399 --> 00:19:25,309
you want to see the infos and don't want

00:19:23,749 --> 00:19:28,129
to see the warnings just want the maybe

00:19:25,309 --> 00:19:29,089
just two errors general you gonna want

00:19:28,129 --> 00:19:30,409
to look at least through all of them at

00:19:29,089 --> 00:19:34,820
least ones this is gonna make sure it's

00:19:30,409 --> 00:19:36,349
gonna be compatible - are is very

00:19:34,820 --> 00:19:38,209
helpful it gives you relative paths it

00:19:36,349 --> 00:19:41,359
cleans up the output when I showed you

00:19:38,209 --> 00:19:43,789
the demo the head - are in it so instead

00:19:41,359 --> 00:19:45,139
of having to full path to the file it's

00:19:43,789 --> 00:19:47,239
gonna have the relative path from where

00:19:45,139 --> 00:19:50,449
you're at the command line their

00:19:47,239 --> 00:19:55,239
terminal so much cleaner output much

00:19:50,449 --> 00:19:55,239
easier to read not necessary but helpful

00:19:56,289 --> 00:20:03,829
integer size used for bitwise shift

00:19:59,539 --> 00:20:05,479
checks you have o output format this is

00:20:03,829 --> 00:20:07,219
really helpful if you if you wanted if

00:20:05,479 --> 00:20:09,049
you have a lot of files and a lot of

00:20:07,219 --> 00:20:12,249
things you go change is the option for

00:20:09,049 --> 00:20:14,899
JSON format so you can take that JSON

00:20:12,249 --> 00:20:16,909
grab it in some PHP code and code it and

00:20:14,899 --> 00:20:18,769
do some things with it for example maybe

00:20:16,909 --> 00:20:20,239
you could have it create tickets

00:20:18,769 --> 00:20:22,759
automatically for all the changes and

00:20:20,239 --> 00:20:24,529
you can go and hit those you just maybe

00:20:22,759 --> 00:20:26,749
create user stories or defects against

00:20:24,529 --> 00:20:28,309
that and go fix all those we had an

00:20:26,749 --> 00:20:29,869
example that was might be going a bit

00:20:28,309 --> 00:20:31,339
overboard but if you have a very large

00:20:29,869 --> 00:20:34,039
project with a lot of issues that would

00:20:31,339 --> 00:20:37,879
be a good way to a good use of that so

00:20:34,039 --> 00:20:39,379
it's nice to have the JSON format you

00:20:37,879 --> 00:20:40,729
have a quiet mode which runs without

00:20:39,379 --> 00:20:43,489
output so if you have a very large

00:20:40,729 --> 00:20:45,799
project perhaps that that you don't want

00:20:43,489 --> 00:20:47,690
to have it's killing it basically new

00:20:45,799 --> 00:20:51,829
processes running would be an option to

00:20:47,690 --> 00:20:53,149
go to quiet that down - B gives you the

00:20:51,829 --> 00:20:54,440
versions you know which version you're

00:20:53,149 --> 00:21:01,459
on but composers are going to tell you

00:20:54,440 --> 00:21:04,699
that - my case is running with 12.1 ANSI

00:21:01,459 --> 00:21:07,399
horses the ANSI output for pretty colors

00:21:04,699 --> 00:21:11,809
if you're in the terminal or no ANSI if

00:21:07,399 --> 00:21:15,549
you want to turn it off you different

00:21:11,809 --> 00:21:15,549
for both levels defaults to one

00:21:16,899 --> 00:21:21,819
so there's a quick introduction to the

00:21:19,179 --> 00:21:23,499
options with that tool and we'll jump

00:21:21,819 --> 00:21:25,690
over to PHP compatibility we'll go back

00:21:23,499 --> 00:21:26,889
to it and we'll do some comparisons back

00:21:25,690 --> 00:21:29,649
and forth comparisons when comparing

00:21:26,889 --> 00:21:42,599
these two different tools so PHP

00:21:29,649 --> 00:21:46,599
compatibility is a another tool it's RAM

00:21:42,599 --> 00:21:50,469
and just come back up here so it gives

00:21:46,599 --> 00:21:51,759
you a different looking output is it run

00:21:50,469 --> 00:21:54,039
along it runs along if you have the

00:21:51,759 --> 00:21:56,079
progress on it gives you a it looks like

00:21:54,039 --> 00:21:57,899
we're running a bunch of unit tests it

00:21:56,079 --> 00:22:01,299
looks like that similar output

00:21:57,899 --> 00:22:02,409
it gives ease for errors w-4 warnings

00:22:01,299 --> 00:22:03,789
you can kind of watch the exhibition on

00:22:02,409 --> 00:22:04,809
a bigger project otherwise it just sits

00:22:03,789 --> 00:22:06,249
there you don't know what's going on

00:22:04,809 --> 00:22:09,149
but tells you exactly was going on was

00:22:06,249 --> 00:22:13,179
it running it tells you the file

00:22:09,149 --> 00:22:15,999
it was ran those checked gives you the

00:22:13,179 --> 00:22:17,289
number of errors the line number so we

00:22:15,999 --> 00:22:19,359
here see here this one's got the best

00:22:17,289 --> 00:22:21,719
bitwise shift operators by negative

00:22:19,359 --> 00:22:23,889
number so we saw that with the PP 7cc

00:22:21,719 --> 00:22:27,399
okay so it did catch that same thing

00:22:23,889 --> 00:22:29,199
there you know it's gonna give you

00:22:27,399 --> 00:22:31,839
multiple errors if the two line to line

00:22:29,199 --> 00:22:34,779
three give you give you a similar

00:22:31,839 --> 00:22:40,539
description as PP 7 CC so you see it's

00:22:34,779 --> 00:22:42,159
telling you what happened and why and

00:22:40,539 --> 00:22:43,629
you can go through this there's the

00:22:42,159 --> 00:22:45,969
output can be very large if you have a

00:22:43,629 --> 00:22:49,349
very large project you might want to you

00:22:45,969 --> 00:22:49,349
know pipe it out to a file or something

00:22:51,209 --> 00:23:02,649
so big output and it tells you the the

00:22:55,959 --> 00:23:04,209
time it took and the memory used you can

00:23:02,649 --> 00:23:05,199
use that if we'll go into the

00:23:04,209 --> 00:23:08,859
comparisons we'll see which one's faster

00:23:05,199 --> 00:23:10,209
well any guesses yet and you this was

00:23:08,859 --> 00:23:11,879
faster anybody know how many we're gonna

00:23:10,209 --> 00:23:17,379
take a guess

00:23:11,879 --> 00:23:20,319
well maybe in the second one see the PHP

00:23:17,379 --> 00:23:21,719
compatibility out here well getting that

00:23:20,319 --> 00:23:23,499
we'll see we'll see

00:23:21,719 --> 00:23:25,089
they have different strengths and

00:23:23,499 --> 00:23:28,340
weaknesses so it's interesting to see

00:23:25,089 --> 00:23:32,010
which ones we'll get into that

00:23:28,340 --> 00:23:33,210
teach me compatibility primarily written

00:23:32,010 --> 00:23:36,210
by rim who's sitting right here in the

00:23:33,210 --> 00:23:38,820
front so thank you for your contribution

00:23:36,210 --> 00:23:42,270
to the community with that one

00:23:38,820 --> 00:23:44,880
it's a sniff for PHP code sniffer so if

00:23:42,270 --> 00:23:47,190
you use code sniffer for sniffing code

00:23:44,880 --> 00:23:48,000
to check for coding standards is what

00:23:47,190 --> 00:23:51,630
it's typically used for

00:23:48,000 --> 00:23:53,550
so if you're running PS are back in

00:23:51,630 --> 00:23:55,470
ideas para coding standards and you can

00:23:53,550 --> 00:23:57,000
run these different sniffs to make to

00:23:55,470 --> 00:23:59,790
ensure that code meets specific

00:23:57,000 --> 00:24:01,110
standards you know maybe it's Taz versus

00:23:59,790 --> 00:24:03,420
spaces and the curly brace on the

00:24:01,110 --> 00:24:08,060
newline and indentation all these

00:24:03,420 --> 00:24:08,060
different type of styles and standards

00:24:08,150 --> 00:24:11,460
so you can add different sniffs into

00:24:10,470 --> 00:24:13,620
like SoCo sniff we can add different

00:24:11,460 --> 00:24:16,020
sniffs you can customize sniffs and

00:24:13,620 --> 00:24:19,650
these sniffs could've all be configured

00:24:16,020 --> 00:24:22,950
to run we go together against code often

00:24:19,650 --> 00:24:24,480
used as like pre-commit hooks so

00:24:22,950 --> 00:24:26,550
committing your code up there's got to

00:24:24,480 --> 00:24:29,850
pass the sniff before it can be pushed

00:24:26,550 --> 00:24:31,890
up for example it's a static code

00:24:29,850 --> 00:24:36,000
analysis it's not gonna fix the code for

00:24:31,890 --> 00:24:38,880
you and it's used for upgrading from

00:24:36,000 --> 00:24:41,550
going all the way back to peach p51 all

00:24:38,880 --> 00:24:44,070
the way up to peach b7 - so it has of

00:24:41,550 --> 00:24:46,590
wider covers and peach p7c see it goes

00:24:44,070 --> 00:24:48,510
back a previous me a couple of hurt

00:24:46,590 --> 00:24:50,550
minor versions and goes forward a couple

00:24:48,510 --> 00:24:53,460
of minor versions ahead of peach b7 c c

00:24:50,550 --> 00:24:55,860
so wider range it also has the ability

00:24:53,460 --> 00:25:01,770
to specify where you're at where you're

00:24:55,860 --> 00:25:05,970
going the simple install composer

00:25:01,770 --> 00:25:07,590
require peach P compatibility you also

00:25:05,970 --> 00:25:10,770
have to have code sniffer installed or

00:25:07,590 --> 00:25:13,020
set up these are those three together

00:25:10,770 --> 00:25:15,290
will help get you there help you build a

00:25:13,020 --> 00:25:15,290
run it

00:25:18,800 --> 00:25:24,570
if you only have one sniff you can set

00:25:22,260 --> 00:25:28,020
it to have the install pass you can copy

00:25:24,570 --> 00:25:30,900
paste that you can check which sniffs

00:25:28,020 --> 00:25:33,210
you have installed it speech piece cs4

00:25:30,900 --> 00:25:34,470
coding for coat sniffer - - because show

00:25:33,210 --> 00:25:39,930
config show notes show your

00:25:34,470 --> 00:25:42,900
configuration and then you run it

00:25:39,930 --> 00:25:46,380
similar to peach b7 CC if you hit don't

00:25:42,900 --> 00:25:50,430
have any path - Destler dot slash and .

00:25:46,380 --> 00:25:52,680
/ vendor been PPC s and then coding

00:25:50,430 --> 00:25:54,780
standard equals and you told the coding

00:25:52,680 --> 00:25:56,700
standard you can run if you leave it off

00:25:54,780 --> 00:25:58,770
it'll run all your sniffs if you specify

00:25:56,700 --> 00:26:00,150
it if you don't if you didn't specifying

00:25:58,770 --> 00:26:07,140
the configuration you have to specify it

00:26:00,150 --> 00:26:09,060
there and the target if the if the ban

00:26:07,140 --> 00:26:13,680
is quitting your path then it's just

00:26:09,060 --> 00:26:15,420
peach pcs by itself and if you don't see

00:26:13,680 --> 00:26:21,480
any field specify the standard is gonna

00:26:15,420 --> 00:26:24,200
run all of them so we're gonna go over

00:26:21,480 --> 00:26:26,370
the help for this this tool as well

00:26:24,200 --> 00:26:27,830
we'll go over all of them but we'll go

00:26:26,370 --> 00:26:32,730
over the ones that are applicable to

00:26:27,830 --> 00:26:34,500
coding or to upgrading to peach p7 so

00:26:32,730 --> 00:26:37,200
you have n which is your warning

00:26:34,500 --> 00:26:39,860
severity you can turn off warnings just

00:26:37,200 --> 00:26:44,520
the errors so it kind of gives you a

00:26:39,860 --> 00:26:46,650
check in there you have W show errors

00:26:44,520 --> 00:26:48,390
and warnings which is the default value

00:26:46,650 --> 00:26:52,290
so you don't you generally won't ever

00:26:48,390 --> 00:26:54,660
use that but you can you have local

00:26:52,290 --> 00:26:57,090
directory only which doesn't go

00:26:54,660 --> 00:26:58,710
recursively this was very helpful if you

00:26:57,090 --> 00:26:59,790
want to check a specific directory but

00:26:58,710 --> 00:27:01,770
maybe you don't want to run against the

00:26:59,790 --> 00:27:03,090
entire project at that time especially

00:27:01,770 --> 00:27:04,350
if you have a large project you want to

00:27:03,090 --> 00:27:05,820
just check one directory at a time or

00:27:04,350 --> 00:27:07,800
you get it broken apart and right so

00:27:05,820 --> 00:27:10,560
maybe you're hitting your peach B memory

00:27:07,800 --> 00:27:11,850
a memory limit and it's crashing you

00:27:10,560 --> 00:27:14,400
just want to go you know one directory

00:27:11,850 --> 00:27:16,620
at a time perhaps this is a good option

00:27:14,400 --> 00:27:19,280
to use there so just check it without

00:27:16,620 --> 00:27:19,280
going recursively

00:27:20,360 --> 00:27:28,260
- s gives you the sniff codes so if you

00:27:26,070 --> 00:27:30,660
look here it says peach pick you bad

00:27:28,260 --> 00:27:33,870
ability forbidden switch with multiple

00:27:30,660 --> 00:27:36,150
default blocks okay so if you like the

00:27:33,870 --> 00:27:39,300
filename is switch multiple defaults or

00:27:36,150 --> 00:27:41,400
so you know that that point that that's

00:27:39,300 --> 00:27:43,260
the sniff that picked it up and you can

00:27:41,400 --> 00:27:45,590
look at that sniff and compared what

00:27:43,260 --> 00:27:47,730
what you have and understand why better

00:27:45,590 --> 00:27:51,450
so it's very helpful for understanding

00:27:47,730 --> 00:27:52,770
why something's not compatible these are

00:27:51,450 --> 00:27:59,880
the more information that you might want

00:27:52,770 --> 00:28:01,170
might need interactive mode for this one

00:27:59,880 --> 00:28:04,940
i want to do a quick live demo because

00:28:01,170 --> 00:28:07,230
it's it's easier to show than to explain

00:28:04,940 --> 00:28:10,920
it basically gives you the ability to

00:28:07,230 --> 00:28:17,880
interact with the with the process of

00:28:10,920 --> 00:28:22,230
the progress so it gives you a hit enter

00:28:17,880 --> 00:28:24,960
to recheck s to skip or Q to quit so if

00:28:22,230 --> 00:28:27,060
you hit enter it's going to recheck the

00:28:24,960 --> 00:28:28,260
exact same thing and it's gonna tell you

00:28:27,060 --> 00:28:30,660
it's not fixed and it's gonna ask you

00:28:28,260 --> 00:28:33,890
what I'll do next so then you can switch

00:28:30,660 --> 00:28:36,690
over to your IDE you can make the fix

00:28:33,890 --> 00:28:38,670
hit enter again and if it's fixed it'll

00:28:36,690 --> 00:28:40,620
go on to the next one so this one's

00:28:38,670 --> 00:28:42,720
really helpful if you're working through

00:28:40,620 --> 00:28:44,700
code you're just gonna step through one

00:28:42,720 --> 00:28:46,080
by one right you're gonna fix it go to

00:28:44,700 --> 00:28:48,210
the next one and fix it go to the next

00:28:46,080 --> 00:28:49,650
one and you don't have to fire up the

00:28:48,210 --> 00:28:51,210
tool every single time so you step

00:28:49,650 --> 00:28:54,360
through and fix it one by one so a very

00:28:51,210 --> 00:28:57,420
helpful tool s to skip and we'll just go

00:28:54,360 --> 00:29:01,610
to the next one right until you fix that

00:28:57,420 --> 00:29:01,610
one and then Q if you want to quit out

00:29:09,160 --> 00:29:12,850
so let's interactive mode you know I

00:29:11,440 --> 00:29:15,630
like that mode is very helpful for

00:29:12,850 --> 00:29:17,470
working through a project and fixing it

00:29:15,630 --> 00:29:21,820
fixing your pot your code to make it

00:29:17,470 --> 00:29:26,530
compatible - ease to explain a coding

00:29:21,820 --> 00:29:29,410
standard it tells you the number of snez

00:29:26,530 --> 00:29:31,360
so it's got sixty seven sniffs so you

00:29:29,410 --> 00:29:33,280
know it's gonna fix about 67 different

00:29:31,360 --> 00:29:36,160
incompatibilities okay you guys give me

00:29:33,280 --> 00:29:38,770
an idea what's going on it's got a

00:29:36,160 --> 00:29:40,299
generic sniff it tells you and they

00:29:38,770 --> 00:29:44,020
don't list all of them there's 66 right

00:29:40,299 --> 00:29:47,380
there that it goes through and and it

00:29:44,020 --> 00:29:48,880
has it's gonna run against this we're

00:29:47,380 --> 00:29:50,350
just breaking it apart it crates tokens

00:29:48,880 --> 00:29:54,090
and under figured out the code and then

00:29:50,350 --> 00:29:57,010
runs those sniffs it checks for patterns

00:29:54,090 --> 00:30:00,039
- key shows the progress I mentioned

00:29:57,010 --> 00:30:01,120
that one earlier or it gives you it its

00:30:00,039 --> 00:30:03,760
little hard to see the green but it

00:30:01,120 --> 00:30:05,500
gives you a PHP unit looking progress on

00:30:03,760 --> 00:30:07,900
there I'll tell you the number of files

00:30:05,500 --> 00:30:10,090
the percentage it tells you when it's

00:30:07,900 --> 00:30:12,580
hit an error or warning or whatever

00:30:10,090 --> 00:30:16,690
other issue you have pop up so it keeps

00:30:12,580 --> 00:30:19,470
you up to date on where you're at quiet

00:30:16,690 --> 00:30:22,860
mode we saw that with peach p7 CC

00:30:19,470 --> 00:30:24,940
disables a progress and verbose output

00:30:22,860 --> 00:30:27,850
if you have memory issues that might be

00:30:24,940 --> 00:30:30,220
a helpful thing - M

00:30:27,850 --> 00:30:34,120
stops - memory error messages from being

00:30:30,220 --> 00:30:36,309
recorded maybe for using a really large

00:30:34,120 --> 00:30:39,039
project and you just don't want to

00:30:36,309 --> 00:30:41,559
output it but you got to be careful with

00:30:39,039 --> 00:30:45,820
it - it's gonna trigger some different

00:30:41,559 --> 00:30:49,299
cascading issues less files processed

00:30:45,820 --> 00:30:50,320
there's - V this is very helpful just to

00:30:49,299 --> 00:30:52,809
you if you wanted to share what happened

00:30:50,320 --> 00:30:55,480
it's going to tell you the what's

00:30:52,809 --> 00:30:57,610
processing the number of tokens so the

00:30:55,480 --> 00:31:00,190
tokens basically see the the PHP

00:30:57,610 --> 00:31:02,200
compiler is breaking apart the PHP code

00:31:00,190 --> 00:31:04,720
and how it interprets it so it's telling

00:31:02,200 --> 00:31:05,980
you is 59 tokens and 11 lines and so on

00:31:04,720 --> 00:31:09,070
and tell you number errors and warnings

00:31:05,980 --> 00:31:13,780
I use this to grab the analysis stuff

00:31:09,070 --> 00:31:15,880
the end to the comparison - VV prints

00:31:13,780 --> 00:31:17,200
the rule sets so you can start going to

00:31:15,880 --> 00:31:20,080
the tokenizing and see what's happening

00:31:17,200 --> 00:31:20,799
so we see a beginning a PHP tag it's got

00:31:20,080 --> 00:31:22,540
a class

00:31:20,799 --> 00:31:24,670
static calls curly

00:31:22,540 --> 00:31:26,800
race bracket public so those and breaks

00:31:24,670 --> 00:31:28,210
apart the PHP code to give you a better

00:31:26,800 --> 00:31:31,170
understanding of how that sniff is

00:31:28,210 --> 00:31:33,460
working exactly um

00:31:31,170 --> 00:31:35,020
it's helpful for debugging is helpful

00:31:33,460 --> 00:31:40,300
for understanding but what exactly is

00:31:35,020 --> 00:31:45,100
going on the - vvv sells very very

00:31:40,300 --> 00:31:47,650
verbose is that debugging mode gives you

00:31:45,100 --> 00:31:51,310
some more information we probably need

00:31:47,650 --> 00:31:52,810
that what we're doing here - I gives you

00:31:51,310 --> 00:31:55,240
installed sniffs you know what's

00:31:52,810 --> 00:31:58,390
installed what's gonna be running - D

00:31:55,240 --> 00:32:01,180
gives you the directives this is very

00:31:58,390 --> 00:32:03,490
helpful you can add like memory limit

00:32:01,180 --> 00:32:05,620
for example so maybe you have a large

00:32:03,490 --> 00:32:09,370
code base again and but your memory

00:32:05,620 --> 00:32:10,930
limits may be like 128 or 256 but it's

00:32:09,370 --> 00:32:14,590
gonna run us may be gonna take you know

00:32:10,930 --> 00:32:17,500
600 megabytes to run you can do a - D

00:32:14,590 --> 00:32:19,360
memory limit increase it to 1024 run it

00:32:17,500 --> 00:32:22,000
again it'll work you won't hit that

00:32:19,360 --> 00:32:24,640
memory error and that's when I had to

00:32:22,000 --> 00:32:28,240
use quite a bit especially large

00:32:24,640 --> 00:32:30,220
projects there's other options available

00:32:28,240 --> 00:32:31,950
we won't go into all of them those are

00:32:30,220 --> 00:32:35,830
the ones that are most applicable to

00:32:31,950 --> 00:32:38,620
what we're trying to do here it's common

00:32:35,830 --> 00:32:41,260
issues as a developer we want to have

00:32:38,620 --> 00:32:42,880
our air reporting cranked up we want to

00:32:41,260 --> 00:32:44,050
see those deprecated flags you want to

00:32:42,880 --> 00:32:47,350
see those warnings you want to see those

00:32:44,050 --> 00:32:48,760
errors if we don't have that on and we

00:32:47,350 --> 00:32:50,940
try to run the code we're not gonna know

00:32:48,760 --> 00:32:53,350
that you know it's not really fixed

00:32:50,940 --> 00:32:55,840
these static tool analysis there's

00:32:53,350 --> 00:32:57,460
static code analysis tools do not pick

00:32:55,840 --> 00:33:01,000
up everything you're still gonna have

00:32:57,460 --> 00:33:02,650
issues it's not perfect some of the

00:33:01,000 --> 00:33:05,470
patterns are too hard to recognize

00:33:02,650 --> 00:33:07,120
automatically by having our air

00:33:05,470 --> 00:33:08,680
reporting turn-on it helps us indicate

00:33:07,120 --> 00:33:11,530
and if we're watching interlocks - of

00:33:08,680 --> 00:33:15,420
course it helps indicate where the

00:33:11,530 --> 00:33:15,420
problems are and help track them down a

00:33:16,950 --> 00:33:22,840
unit tests this is a common issue the

00:33:20,470 --> 00:33:24,640
unit tests and functional tests really

00:33:22,840 --> 00:33:26,850
help but it's kind of a double-edged

00:33:24,640 --> 00:33:29,500
sword often with older sister projects

00:33:26,850 --> 00:33:31,000
they're not gonna have unit tests right

00:33:29,500 --> 00:33:33,220
and they probably don't have dependency

00:33:31,000 --> 00:33:35,530
injection and other techniques to help

00:33:33,220 --> 00:33:37,150
with with testing

00:33:35,530 --> 00:33:39,820
so that's another item that's very

00:33:37,150 --> 00:33:41,320
helpful to make sure your application is

00:33:39,820 --> 00:33:43,150
going to run after upgrading is to have

00:33:41,320 --> 00:33:46,690
those automated tests to make to ensure

00:33:43,150 --> 00:33:50,830
the functionality and the the code is

00:33:46,690 --> 00:33:52,420
working you also pick up on those other

00:33:50,830 --> 00:33:54,880
areas that may not automatically be

00:33:52,420 --> 00:34:01,630
caught by the compatibility checker

00:33:54,880 --> 00:34:04,390
tools again the common issue if you're

00:34:01,630 --> 00:34:06,460
trying to fix the vendor directory it's

00:34:04,390 --> 00:34:08,980
not the right approach we want to use

00:34:06,460 --> 00:34:10,720
composer to upgrade that so we want to

00:34:08,980 --> 00:34:13,179
tell composer and I'll upgrade these

00:34:10,720 --> 00:34:16,090
packages before peach p71 or seven to

00:34:13,179 --> 00:34:18,070
whatever we're upgrading to and let let

00:34:16,090 --> 00:34:19,810
composer handle the dependencies and do

00:34:18,070 --> 00:34:21,850
the upgrades for you there so you can

00:34:19,810 --> 00:34:24,250
just ignore the vendor directory - most

00:34:21,850 --> 00:34:26,290
the vast majority of the time you should

00:34:24,250 --> 00:34:31,090
just be ignoring that on European code

00:34:26,290 --> 00:34:32,590
sniffing Ratko checking hb7 CC does have

00:34:31,090 --> 00:34:35,860
an infinite loop errors I've run into a

00:34:32,590 --> 00:34:36,909
few times and they don't appear to be

00:34:35,860 --> 00:34:39,129
fixing that any time soon

00:34:36,909 --> 00:34:42,100
so if you run into that you start having

00:34:39,129 --> 00:34:44,350
having to do like accept dig is a skip

00:34:42,100 --> 00:34:45,730
basically so you'll see where it's at

00:34:44,350 --> 00:34:47,440
and you kind of figure ok it's in this

00:34:45,730 --> 00:34:48,639
directory we're just skip that and you

00:34:47,440 --> 00:34:49,869
had to run file one file at a time

00:34:48,639 --> 00:34:50,830
they're kind of narrow it down until you

00:34:49,869 --> 00:34:53,290
figure out which one exactly it's

00:34:50,830 --> 00:34:54,940
failing on so that's kind of a heads up

00:34:53,290 --> 00:34:58,900
there that one does rear its head

00:34:54,940 --> 00:35:01,750
occasionally and just be aware of that

00:34:58,900 --> 00:35:04,210
backwards compatible code so for example

00:35:01,750 --> 00:35:06,760
a framework might say you know if if

00:35:04,210 --> 00:35:09,280
this is peach pea 5/6 and do this if

00:35:06,760 --> 00:35:10,300
it's peach b7 do that so you don't want

00:35:09,280 --> 00:35:11,380
to go changing those though of course

00:35:10,300 --> 00:35:12,640
those are gonna be most in the vendor

00:35:11,380 --> 00:35:14,290
directory but maybe you should run your

00:35:12,640 --> 00:35:15,430
code worth doing that I'll just keep

00:35:14,290 --> 00:35:17,080
that in mind that you if you're

00:35:15,430 --> 00:35:19,330
upgrading peach b7 you can go to remove

00:35:17,080 --> 00:35:20,770
those backwards compatibility z' you're

00:35:19,330 --> 00:35:21,850
not gonna need those anymore but they

00:35:20,770 --> 00:35:24,670
may have been in there for a reason

00:35:21,850 --> 00:35:28,690
right so the code could work on an older

00:35:24,670 --> 00:35:34,180
version of PHP for example that's a

00:35:28,690 --> 00:35:36,520
common one that is seen the analysis so

00:35:34,180 --> 00:35:41,220
I again I posted this all online already

00:35:36,520 --> 00:35:41,220
on github includes a spreadsheet

00:35:42,420 --> 00:35:50,309
I ran this with PPE five six going to

00:35:45,930 --> 00:35:55,109
peach p7 249 files were examined for

00:35:50,309 --> 00:35:56,910
this to create these files I went

00:35:55,109 --> 00:35:58,140
through all the compatibilities and

00:35:56,910 --> 00:36:01,260
backwards and compatibilities the

00:35:58,140 --> 00:36:04,650
deprecated of things on peach be net and

00:36:01,260 --> 00:36:06,569
track them down made a file to replicate

00:36:04,650 --> 00:36:08,880
that so I had 49 some of them have

00:36:06,569 --> 00:36:10,530
multiple issues with them if you look

00:36:08,880 --> 00:36:13,319
through them all I would not recommend

00:36:10,530 --> 00:36:18,960
using any of them in production they are

00:36:13,319 --> 00:36:23,460
all bad intentionally a snapshot of what

00:36:18,960 --> 00:36:25,230
I found the peach pcs which was the

00:36:23,460 --> 00:36:30,000
peach P compatibility through peach

00:36:25,230 --> 00:36:32,160
peacoat sniffer had a total of 33 which

00:36:30,000 --> 00:36:35,369
is a sum of errors that were found in

00:36:32,160 --> 00:36:40,349
the in that small code set I had four

00:36:35,369 --> 00:36:43,140
warnings compared to peach BCC which

00:36:40,349 --> 00:36:46,799
only found 30 but found six morning's

00:36:43,140 --> 00:36:48,690
okay so little difference there they're

00:36:46,799 --> 00:36:53,369
fairly close but there are some

00:36:48,690 --> 00:36:58,200
differences PE compatibility found a

00:36:53,369 --> 00:36:59,819
total of 23 23 files that have problems

00:36:58,200 --> 00:37:01,200
in them okay so that's what the counter

00:36:59,819 --> 00:37:04,559
refers to there's a number of files that

00:37:01,200 --> 00:37:07,470
have problems and three of them had

00:37:04,559 --> 00:37:11,069
warnings whereas peach piece 7 CC found

00:37:07,470 --> 00:37:12,839
27 and 5 it's a little different the

00:37:11,069 --> 00:37:15,210
unique one so this is where there was a

00:37:12,839 --> 00:37:17,490
file they had like for example an error

00:37:15,210 --> 00:37:20,460
in it that none of the other three

00:37:17,490 --> 00:37:24,089
warnings errors showed up on the other

00:37:20,460 --> 00:37:26,490
columns so peach peak compatibility had

00:37:24,089 --> 00:37:29,309
the most unique ones they're equal they

00:37:26,490 --> 00:37:33,119
had four verses the errors versus four

00:37:29,309 --> 00:37:35,460
warnings of peach p7c see so they're not

00:37:33,119 --> 00:37:39,020
catching the same stuff are they there's

00:37:35,460 --> 00:37:40,770
a discrepancy there they're different

00:37:39,020 --> 00:37:42,630
that's okay

00:37:40,770 --> 00:37:46,230
the good thing is they're both open

00:37:42,630 --> 00:37:48,030
source we can use them both there's a

00:37:46,230 --> 00:37:49,980
quick little pie chart because try pie

00:37:48,030 --> 00:37:52,710
charts are amazing and they make cells

00:37:49,980 --> 00:37:56,550
and all sorts of stuff so

00:37:52,710 --> 00:37:59,160
peach p7c see again this is just a pie

00:37:56,550 --> 00:38:01,530
chart and the thought be great we kind

00:37:59,160 --> 00:38:03,150
of see that there that the errors are

00:38:01,530 --> 00:38:05,550
most common the warnings are gonna be

00:38:03,150 --> 00:38:06,690
smaller that they pick up on the

00:38:05,550 --> 00:38:09,570
warnings of things that you may or may

00:38:06,690 --> 00:38:10,770
not need to fix most of the time you do

00:38:09,570 --> 00:38:11,730
have to fix them but not always

00:38:10,770 --> 00:38:18,930
the errors or things that are absolutely

00:38:11,730 --> 00:38:22,410
just gonna break okay so here's a know

00:38:18,930 --> 00:38:25,320
review those files when I ran that so we

00:38:22,410 --> 00:38:28,530
have then the names of the files reflect

00:38:25,320 --> 00:38:31,140
the problem with them so we have extra

00:38:28,530 --> 00:38:35,640
parens we have a for each with a pointer

00:38:31,140 --> 00:38:38,580
in it funk get argh so we just see that

00:38:35,640 --> 00:38:40,530
the different checkers found different

00:38:38,580 --> 00:38:45,089
things okay this is where the stats come

00:38:40,530 --> 00:38:46,589
from kind of interesting that they pick

00:38:45,089 --> 00:38:49,619
up on the same things most of the time

00:38:46,589 --> 00:38:51,560
but there are some differences and I

00:38:49,619 --> 00:38:53,730
coated these to the best of my knowledge

00:38:51,560 --> 00:38:56,690
so maybe it wasn't a perfect example

00:38:53,730 --> 00:38:59,460
maybe that's why they didn't get caught

00:38:56,690 --> 00:39:05,940
that could be or it could be that the

00:38:59,460 --> 00:39:07,230
pattern is too hard to catch so so that

00:39:05,940 --> 00:39:12,540
gives you an idea where we're at with

00:39:07,230 --> 00:39:14,339
these ones the next set HTTP Rob post

00:39:12,540 --> 00:39:18,420
data they both found that one pretty

00:39:14,339 --> 00:39:20,700
easily int as a class name they both

00:39:18,420 --> 00:39:25,220
found for example invalid octal they

00:39:20,700 --> 00:39:28,619
both found JSON to JSON D was changed

00:39:25,220 --> 00:39:34,170
then catch that empty JSON string for

00:39:28,619 --> 00:39:37,109
example M crept deprecated the was

00:39:34,170 --> 00:39:40,470
deprecated in PHP seven one so we would

00:39:37,109 --> 00:39:43,080
not expect HB 7 CC to catch that would

00:39:40,470 --> 00:39:45,119
be an example of where PHP compatibility

00:39:43,080 --> 00:39:50,550
is gonna be a major benefit to get the

00:39:45,119 --> 00:39:53,040
get you all we up to seven to mssql my

00:39:50,550 --> 00:39:54,720
sequel we both those pickles up and so

00:39:53,040 --> 00:39:55,710
on it's kind of funny to read through it

00:39:54,720 --> 00:39:57,990
and let's do it and see which one's

00:39:55,710 --> 00:39:59,490
picked up what little little competition

00:39:57,990 --> 00:40:03,660
between the two compatibility to

00:39:59,490 --> 00:40:05,310
checkers here's the next set we have

00:40:03,660 --> 00:40:06,330
static calls right so this one I

00:40:05,310 --> 00:40:07,620
mentioned

00:40:06,330 --> 00:40:10,020
neither own fountain I was kind of

00:40:07,620 --> 00:40:12,240
surprised that's probably hard one to

00:40:10,020 --> 00:40:13,500
see when thinking about he's thinking

00:40:12,240 --> 00:40:15,810
about it why wouldn't it catch that yeah

00:40:13,500 --> 00:40:17,700
it's a it's a hard one

00:40:15,810 --> 00:40:20,940
it had to analyze what is trying to call

00:40:17,700 --> 00:40:22,020
into so it may not even be the same file

00:40:20,940 --> 00:40:23,280
it could be a complete different files

00:40:22,020 --> 00:40:26,550
trying to clone to and so you just don't

00:40:23,280 --> 00:40:27,900
know which is again what are the unit

00:40:26,550 --> 00:40:30,090
tests and stuff come in much more

00:40:27,900 --> 00:40:33,830
handily Andy even if it's a you know

00:40:30,090 --> 00:40:36,390
selenium or clicking on things test

00:40:33,830 --> 00:40:38,250
switch multiple defaults were whose Cod

00:40:36,390 --> 00:40:41,130
yield with parentheses kind of surprised

00:40:38,250 --> 00:40:42,750
that if you to be 7c CEO it was only one

00:40:41,130 --> 00:40:45,480
picked that one up

00:40:42,750 --> 00:40:47,580
peach b7 one these are pp seven one

00:40:45,480 --> 00:40:53,670
specific items and he's our peach b7 two

00:40:47,580 --> 00:40:56,220
specific items so dynamic calls was

00:40:53,670 --> 00:40:57,630
picked up by peach p7c see which kind of

00:40:56,220 --> 00:41:03,270
blew my mind because it wasn't written

00:40:57,630 --> 00:41:05,130
for peach b7 one but we see that keeps

00:41:03,270 --> 00:41:07,350
me compatibility did pick up on mornings

00:41:05,130 --> 00:41:09,050
of course then then if you see seven CC

00:41:07,350 --> 00:41:11,280
did in the seventh one and seventy realm

00:41:09,050 --> 00:41:14,100
which is expected and that's good

00:41:11,280 --> 00:41:18,180
it tells us that we want to use more

00:41:14,100 --> 00:41:21,480
than one tool one tool by itself will

00:41:18,180 --> 00:41:22,860
get it's a long ways but it's not but if

00:41:21,480 --> 00:41:24,330
we can run multiple as it gets this you

00:41:22,860 --> 00:41:26,130
know that maybe might guess ninety-five

00:41:24,330 --> 00:41:28,050
percent the first tool and then the next

00:41:26,130 --> 00:41:30,650
one's gonna get us the next Jeremy a few

00:41:28,050 --> 00:41:30,650
percent closer

00:41:35,040 --> 00:41:41,490
a few more

00:41:38,580 --> 00:41:43,980
they both caught the object again that's

00:41:41,490 --> 00:41:45,240
a seven - peach B seven - but peach p7c

00:41:43,980 --> 00:41:47,280
see count cut it so it's kind of

00:41:45,240 --> 00:41:51,570
surprising one - and there's where the

00:41:47,280 --> 00:41:53,250
yes stats came from timing

00:41:51,570 --> 00:41:58,920
so I ran this on a very large project

00:41:53,250 --> 00:42:01,710
they had 2364 PHP files okay so very

00:41:58,920 --> 00:42:03,990
large project larger than the most much

00:42:01,710 --> 00:42:05,910
huge and it's a bigger course but it's

00:42:03,990 --> 00:42:10,860
good good data the good data set to run

00:42:05,910 --> 00:42:13,260
against PHP 7 CC took 276 seconds

00:42:10,860 --> 00:42:15,720
PHP compatibility took 271 so they came

00:42:13,260 --> 00:42:17,790
in pretty close could you be

00:42:15,720 --> 00:42:21,090
compatibility was just just barely beat

00:42:17,790 --> 00:42:22,740
it out not by a ton so they're about

00:42:21,090 --> 00:42:26,000
data take about the same amount of time

00:42:22,740 --> 00:42:26,000
is what I found

00:42:31,840 --> 00:42:35,650
okay everybody everybody who cashed that

00:42:33,700 --> 00:42:39,000
okay which which frameworks gonna win

00:42:35,650 --> 00:42:44,800
any guesses so I did it against his end

00:42:39,000 --> 00:42:47,640
slim Symphony laravel WordPress and he

00:42:44,800 --> 00:42:52,120
guesses which one was the fastest

00:42:47,640 --> 00:42:55,030
Arabelle I'm here maybe slim was the

00:42:52,120 --> 00:43:00,370
fastest which one do you think had the

00:42:55,030 --> 00:43:02,110
most problems hmm and remember though it

00:43:00,370 --> 00:43:03,850
may not be that it's a bad framework it

00:43:02,110 --> 00:43:05,800
has problems it could be that has

00:43:03,850 --> 00:43:08,140
backwards-compatibility built into it so

00:43:05,800 --> 00:43:11,860
that's a you know big caveat with that

00:43:08,140 --> 00:43:18,820
one it may be in there intentionally and

00:43:11,860 --> 00:43:21,670
that's okay so Zen framework one with

00:43:18,820 --> 00:43:23,890
330 backwards compatibility issues but

00:43:21,670 --> 00:43:25,810
it ran into the infinite loop error

00:43:23,890 --> 00:43:29,130
which piece B 7 C C so I couldn't ever

00:43:25,810 --> 00:43:32,400
finish it okay

00:43:29,130 --> 00:43:38,950
and it had 2300 files

00:43:32,400 --> 00:43:42,070
Symphony with 3700 files only had 34

00:43:38,950 --> 00:43:45,880
issues that's impressive it's pretty

00:43:42,070 --> 00:43:50,320
good okay peach b7 CC that gives you a

00:43:45,880 --> 00:43:52,510
timing - of how long they took so

00:43:50,320 --> 00:43:56,110
generally speaking we found peach b7 CC

00:43:52,510 --> 00:44:01,270
was faster on the big project I ran it

00:43:56,110 --> 00:44:03,190
was slower but on the frameworks you

00:44:01,270 --> 00:44:04,600
teach me seven C's he was slightly

00:44:03,190 --> 00:44:07,210
faster it's not a huge difference though

00:44:04,600 --> 00:44:11,500
just a little bit to run this basically

00:44:07,210 --> 00:44:14,380
what I did is I just used composer to

00:44:11,500 --> 00:44:16,360
require those frameworks on a project by

00:44:14,380 --> 00:44:18,100
itself and then I ran the tool against

00:44:16,360 --> 00:44:25,030
that directory that sits in entire

00:44:18,100 --> 00:44:27,580
directory so we see slim with only 46

00:44:25,030 --> 00:44:30,640
files of course was the fastest they had

00:44:27,580 --> 00:44:32,260
no PHP codes compatibility issues you

00:44:30,640 --> 00:44:35,200
know he won that peach b7 CC caught

00:44:32,260 --> 00:44:40,150
pretty good that one ran really fast and

00:44:35,200 --> 00:44:43,420
it was quick WordPress took the longest

00:44:40,150 --> 00:44:45,130
not too surprising it's a very it has

00:44:43,420 --> 00:44:50,250
fewer files but

00:44:45,130 --> 00:44:53,529
bigger it had 302 compatibility issues

00:44:50,250 --> 00:44:55,569
hundred 77 case BCC issues but as I

00:44:53,529 --> 00:44:57,279
mentioned these could be intentional so

00:44:55,569 --> 00:44:59,710
we can't just judge a framework by its

00:44:57,279 --> 00:45:00,910
stats in this case because that like I

00:44:59,710 --> 00:45:02,319
said it often you'll see like you know

00:45:00,910 --> 00:45:04,750
if the PGP version is this then do that

00:45:02,319 --> 00:45:05,799
and so it'll still pick up on those even

00:45:04,750 --> 00:45:07,960
though the code is specifically

00:45:05,799 --> 00:45:11,769
identifying which version to do so it

00:45:07,960 --> 00:45:12,940
may not necessarily reflect an issue so

00:45:11,769 --> 00:45:15,339
that's again that's a big caveat with

00:45:12,940 --> 00:45:18,700
these with these stats any surprises in

00:45:15,339 --> 00:45:20,529
there anybody's surprising like that so

00:45:18,700 --> 00:45:24,250
kind of interesting to run it against

00:45:20,529 --> 00:45:28,750
the frameworks and and see where words

00:45:24,250 --> 00:45:34,059
yet so what we're gonna do next is I

00:45:28,750 --> 00:45:36,759
need one volunteer a lucky volunteer to

00:45:34,059 --> 00:45:41,880
tell me a package that you'd like to run

00:45:36,759 --> 00:45:41,880
this against we're gonna do a live demo

00:45:42,779 --> 00:45:50,920
anyone what's the package you'd like to

00:45:45,039 --> 00:45:53,400
run us against any packages you want to

00:45:50,920 --> 00:45:53,400
run against

00:45:54,660 --> 00:45:57,470
we hat

00:46:08,069 --> 00:46:10,670
okay

00:46:20,210 --> 00:46:35,690
okay so now we have B hat so we're gonna

00:46:27,950 --> 00:46:38,589
run this let's install B hat I have my

00:46:35,690 --> 00:46:38,589
debugging on don't I

00:46:45,400 --> 00:46:48,300
yes I do

00:46:50,310 --> 00:46:55,320
okay so now it's we're using composure

00:46:52,890 --> 00:46:59,660
we're installing b-hat so I just want to

00:46:55,320 --> 00:46:59,660
demonstrate how easy it is to run this

00:47:00,500 --> 00:47:12,330
so we installed so we have be had there

00:47:09,480 --> 00:47:14,550
okay so we're gonna pop back over here

00:47:12,330 --> 00:47:18,120
and we're just going to change this

00:47:14,550 --> 00:47:20,810
we're gonna run peach p7c see I was

00:47:18,120 --> 00:47:20,810
gonna run it against

00:47:32,230 --> 00:47:39,609
in Derby hat okay let's run HP 7cc

00:47:37,359 --> 00:47:42,540
against B hat we'll see how it does then

00:47:39,609 --> 00:47:44,980
we'll run PHP compatibility against it

00:47:42,540 --> 00:47:46,660
so I want to do this because we want to

00:47:44,980 --> 00:47:49,329
mow see this is this is something we can

00:47:46,660 --> 00:47:52,420
do this is a an easy

00:47:49,329 --> 00:47:55,900
these are easy tools we can use to run

00:47:52,420 --> 00:47:57,369
against and see what's happening so

00:47:55,900 --> 00:48:06,329
that's gonna take a couple of minutes

00:47:57,369 --> 00:48:08,140
here to run now we have a yes are there

00:48:06,329 --> 00:48:10,589
it found nothing

00:48:08,140 --> 00:48:15,400
that's impressive it found nothing

00:48:10,589 --> 00:48:17,140
that's a B hat wow that was a that's a

00:48:15,400 --> 00:48:19,869
robust project they are Verret they are

00:48:17,140 --> 00:48:25,920
on top of this apparently let's try it

00:48:19,869 --> 00:48:25,920
with uh let's try it with this one um

00:48:26,099 --> 00:48:29,670
this will do the same

00:48:34,400 --> 00:48:40,090
okay I might need another project to run

00:48:36,590 --> 00:48:40,090
this against if it's gonna be that good

00:48:40,600 --> 00:48:45,140
what could around you guys phpunit that

00:48:42,890 --> 00:48:47,110
might be a mic trigger a few more I

00:48:45,140 --> 00:48:52,220
don't know

00:48:47,110 --> 00:48:55,640
only one okay so no pitch befo code was

00:48:52,220 --> 00:48:58,310
found on this file and short tip open

00:48:55,640 --> 00:49:03,460
tags are not allowed okay so only gave

00:48:58,310 --> 00:49:05,570
us one okay so that was pretty good I

00:49:03,460 --> 00:49:07,430
think B hat that's impressive

00:49:05,570 --> 00:49:10,220
that's a amazing oh we got interactive

00:49:07,430 --> 00:49:10,940
no that's what it was okay well we're in

00:49:10,220 --> 00:49:12,950
it again

00:49:10,940 --> 00:49:14,450
take off interactive could call him okay

00:49:12,950 --> 00:49:17,540
so there we go yeah that's why it was

00:49:14,450 --> 00:49:24,370
pending all right so 731 files we see

00:49:17,540 --> 00:49:26,840
the progress running that's pretty clean

00:49:24,370 --> 00:49:28,730
so here this is probably example of a

00:49:26,840 --> 00:49:30,230
project we could do this and say install

00:49:28,730 --> 00:49:32,540
an older version of it and it probably

00:49:30,230 --> 00:49:34,790
have a lot of problems but in this case

00:49:32,540 --> 00:49:35,270
just has that one warning art all is

00:49:34,790 --> 00:49:40,130
forgiven

00:49:35,270 --> 00:49:42,550
any other projects one try it on try

00:49:40,130 --> 00:49:42,550
Drupal

00:49:54,200 --> 00:50:00,170
even though the see Emma knows exactly

00:49:57,599 --> 00:50:00,170
which one it is

00:50:00,890 --> 00:50:08,880
what now triple-s the triple I did it

00:50:06,510 --> 00:50:18,839
pulled up when I triple that's right no

00:50:08,880 --> 00:50:24,920
okay so we'll do we had closer and still

00:50:18,839 --> 00:50:24,920
require true poles

00:50:26,330 --> 00:50:30,390
okay so we'll run against Drupal this

00:50:28,470 --> 00:50:32,970
will be the last one will do and again

00:50:30,390 --> 00:50:34,830
if you have your own project run it

00:50:32,970 --> 00:50:37,650
against your project right now see

00:50:34,830 --> 00:50:39,170
you'll see what you find kind of

00:50:37,650 --> 00:50:42,660
interesting to see what we get here

00:50:39,170 --> 00:50:44,220
so we're downloading it Drupal will run

00:50:42,660 --> 00:50:46,400
it against there and then see what looks

00:50:44,220 --> 00:50:46,400

YouTube URL: https://www.youtube.com/watch?v=59fbepJZ_3w


