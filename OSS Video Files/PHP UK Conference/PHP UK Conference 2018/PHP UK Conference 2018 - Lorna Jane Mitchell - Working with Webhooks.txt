Title: PHP UK Conference 2018 - Lorna Jane Mitchell - Working with Webhooks
Publication date: 2018-03-27
Playlist: PHP UK Conference 2018
Description: 
	In an increasingly connected world, APIs are key to great tools and effective workflows. What is better than an API? A webhook of course! Webhooks are a key building block of a modern application, allowing systems to exchange data in response to events. This session gives examples of webhooks currently in use ""in the wild"", and examines both when a webhook is useful and the internal design and structuring of webhook payloads. We'll discuss how to work with webhooks in a scalable way regardless of technology stack; how to receive and process incoming webhooks from an external system and how to design and publish your own for use by partners or consumers. Recommended for anyone wanting to teach their applications to play nicely with others.
Captions: 
	00:00:02,400 --> 00:00:06,750
hi good morning thanks for coming some

00:00:05,580 --> 00:00:08,100
of you went early enough and I've got a

00:00:06,750 --> 00:00:09,870
bunch of people standing at the back I'm

00:00:08,100 --> 00:00:12,150
sorry I hope that you can see the slides

00:00:09,870 --> 00:00:14,280
if anyone would rather have the slides

00:00:12,150 --> 00:00:16,320
on their own device either to add some

00:00:14,280 --> 00:00:18,660
notes or to make them easier to read

00:00:16,320 --> 00:00:20,220
they're already online I've just tweeted

00:00:18,660 --> 00:00:21,509
them from my Twitter account and if you

00:00:20,220 --> 00:00:23,429
look at I'm also learning to Jane on

00:00:21,509 --> 00:00:25,470
speaker deck so if you'd rather grab

00:00:23,429 --> 00:00:28,560
those slides that's where they are

00:00:25,470 --> 00:00:31,640
please help yourselves my name is Lorna

00:00:28,560 --> 00:00:33,780
I'm a developer advocate with IBM this

00:00:31,640 --> 00:00:36,270
statement usually

00:00:33,780 --> 00:00:40,020
leads people to ask me what developer

00:00:36,270 --> 00:00:42,900
advocate does it's a job of two halves

00:00:40,020 --> 00:00:45,810
so I spend some of my time doing this

00:00:42,900 --> 00:00:48,510
kind of thing explaining technical or

00:00:45,810 --> 00:00:50,640
IBM ish things to developers and I spend

00:00:48,510 --> 00:00:54,680
the other half of my time trying to

00:00:50,640 --> 00:00:56,970
explain developer ish things to IBM so

00:00:54,680 --> 00:00:59,550
anything that makes things better for

00:00:56,970 --> 00:01:01,620
developers using IBM cloud that's what I

00:00:59,550 --> 00:01:03,030
do my specialist topics are mostly open

00:01:01,620 --> 00:01:05,129
source databases

00:01:03,030 --> 00:01:07,830
open source scripting languages and of

00:01:05,129 --> 00:01:13,380
course our cloud today I'm going to be

00:01:07,830 --> 00:01:17,940
speaking about web hooks and this might

00:01:13,380 --> 00:01:23,970
lead you to ask what is a web hook a web

00:01:17,940 --> 00:01:27,570
hook is an HTTP POST request and I'm

00:01:23,970 --> 00:01:30,870
totally not gonna do this but I would

00:01:27,570 --> 00:01:35,190
feel entirely justified if I ended my

00:01:30,870 --> 00:01:39,330
talk now like I think the pubs probably

00:01:35,190 --> 00:01:41,580
open if anyone I'm gonna give you some

00:01:39,330 --> 00:01:46,470
more information but hold on to this if

00:01:41,580 --> 00:01:49,799
you know about post requests then you're

00:01:46,470 --> 00:01:54,380
already qualified to work with web hooks

00:01:49,799 --> 00:01:58,409
this is everything that you need to know

00:01:54,380 --> 00:02:00,690
you've also already seen them out and

00:01:58,409 --> 00:02:03,240
about even if you don't know this is

00:02:00,690 --> 00:02:07,170
what they're called right you have seen

00:02:03,240 --> 00:02:09,330
web hooks in the wild they're what power

00:02:07,170 --> 00:02:13,200
your slack integrations if you have your

00:02:09,330 --> 00:02:15,159
github or gitlab and projects chatting

00:02:13,200 --> 00:02:17,079
into channel

00:02:15,159 --> 00:02:19,319
do not let me give the chat opps talk

00:02:17,079 --> 00:02:23,620
now we'll be here all day

00:02:19,319 --> 00:02:25,359
but the idea that we can integrate two

00:02:23,620 --> 00:02:30,629
systems you do something in one place

00:02:25,359 --> 00:02:33,280
you push to github and that event causes

00:02:30,629 --> 00:02:34,900
something to happen in the conversation

00:02:33,280 --> 00:02:37,299
I love chat ups and love having

00:02:34,900 --> 00:02:39,250
notifications in the channel in context

00:02:37,299 --> 00:02:42,400
with the conversation that the

00:02:39,250 --> 00:02:44,200
developers are having if you are looking

00:02:42,400 --> 00:02:47,200
to integrate a system that doesn't have

00:02:44,200 --> 00:02:50,290
a click here to add this integration on

00:02:47,200 --> 00:02:53,919
slack you just choose incoming webhook

00:02:50,290 --> 00:02:55,980
and you can accept any kind of

00:02:53,919 --> 00:03:00,040
notification into your slack channel on

00:02:55,980 --> 00:03:02,949
github we have it with the builds this

00:03:00,040 --> 00:03:05,769
is a Travis CI build somebody owned a

00:03:02,949 --> 00:03:08,139
pull request and the build failed we

00:03:05,769 --> 00:03:12,280
know not to merge it but that build was

00:03:08,139 --> 00:03:15,219
run on Travis in response to new commits

00:03:12,280 --> 00:03:18,909
on github and that integration is also a

00:03:15,219 --> 00:03:21,340
web hook web hooks are all over the

00:03:18,909 --> 00:03:24,609
place I use them quite a lot with zapier

00:03:21,340 --> 00:03:26,889
which is an amazing platform do not

00:03:24,609 --> 00:03:30,579
Google this now listen to my talk first

00:03:26,889 --> 00:03:31,780
right because it's too interesting but

00:03:30,579 --> 00:03:33,609
if you haven't played with xavier have a

00:03:31,780 --> 00:03:36,519
look it's a brilliant way of integrating

00:03:33,609 --> 00:03:38,709
lots of different events something

00:03:36,519 --> 00:03:40,780
happens on Dropbox take a copy of it

00:03:38,709 --> 00:03:42,729
upload it here when you tweet this do

00:03:40,780 --> 00:03:45,250
that add it to a Google Doc somebody

00:03:42,729 --> 00:03:47,470
mentions you put it over here so there's

00:03:45,250 --> 00:03:51,340
lots and lots of ways that we can use

00:03:47,470 --> 00:03:55,329
these web hooks to exchange data between

00:03:51,340 --> 00:04:02,430
systems to allow systems to react to one

00:03:55,329 --> 00:04:05,829
another exchanging data between systems

00:04:02,430 --> 00:04:08,409
over HTTP and you're thinking I think

00:04:05,829 --> 00:04:11,739
she's trying to sell as api's with a

00:04:08,409 --> 00:04:15,430
different name let's compare those two

00:04:11,739 --> 00:04:17,769
ideas how api's work the client asks the

00:04:15,430 --> 00:04:21,310
server please may have some data and the

00:04:17,769 --> 00:04:22,690
server says here's your data unless

00:04:21,310 --> 00:04:26,560
there isn't any in which case it kinda

00:04:22,690 --> 00:04:29,050
says nope in a friendly way compare this

00:04:26,560 --> 00:04:31,960
with web hooks

00:04:29,050 --> 00:04:36,340
the same conversation takes place but

00:04:31,960 --> 00:04:38,979
the server starts the conversation the

00:04:36,340 --> 00:04:44,009
server says hey client I have some data

00:04:38,979 --> 00:04:49,509
for you and the client says thanks

00:04:44,009 --> 00:04:51,759
smiley in HTTP we spell this like 200 ok

00:04:49,509 --> 00:04:53,789
and but you can think of it as thanks

00:04:51,759 --> 00:04:56,979
smiley

00:04:53,789 --> 00:04:59,409
so that's a web hook the server starts

00:04:56,979 --> 00:05:01,870
the conversation the server has to know

00:04:59,409 --> 00:05:03,729
where the clients are that would want

00:05:01,870 --> 00:05:05,530
this data there's a little bit of

00:05:03,729 --> 00:05:11,620
preamble we have to set this up in

00:05:05,530 --> 00:05:14,080
advance like many excellent technical

00:05:11,620 --> 00:05:15,460
concepts these things seem pretty much

00:05:14,080 --> 00:05:16,810
equivalent until you think about how

00:05:15,460 --> 00:05:19,690
they're gonna work in practice under

00:05:16,810 --> 00:05:20,740
load or over time so let's have a look

00:05:19,690 --> 00:05:23,199
at this and for this I flipped the

00:05:20,740 --> 00:05:25,750
diagram around time is going left to

00:05:23,199 --> 00:05:27,819
right with the client at the top and the

00:05:25,750 --> 00:05:30,370
server at the bottom so with an API

00:05:27,819 --> 00:05:32,500
model we're gonna be polling the client

00:05:30,370 --> 00:05:34,840
asks the server for some data and may or

00:05:32,500 --> 00:05:40,389
may not get some and you can see this

00:05:34,840 --> 00:05:42,669
quite chattery set of traffic going on

00:05:40,389 --> 00:05:46,020
here and only one piece of data getting

00:05:42,669 --> 00:05:50,289
delivered the second conversation along

00:05:46,020 --> 00:05:52,539
compare this with the web hooks when

00:05:50,289 --> 00:05:54,279
there's some data we send the data we

00:05:52,539 --> 00:05:56,639
don't need to talk about it the rest of

00:05:54,279 --> 00:06:00,909
the time okay we're not doing an ongoing

00:05:56,639 --> 00:06:03,460
anything no anything no right web hooks

00:06:00,909 --> 00:06:08,949
are a bit more efficient it isn't a

00:06:03,460 --> 00:06:13,469
coincidence that it's github that I keep

00:06:08,949 --> 00:06:17,229
using as an example can you think about

00:06:13,469 --> 00:06:19,120
how many repositories you have on your

00:06:17,229 --> 00:06:23,110
github account or maybe your

00:06:19,120 --> 00:06:24,610
organization's github account now think

00:06:23,110 --> 00:06:26,620
about what the web traffic would look

00:06:24,610 --> 00:06:30,819
like if your CI servers were pinging

00:06:26,620 --> 00:06:32,560
every one of those repos every minute to

00:06:30,819 --> 00:06:35,259
look for changes and you'd have to wait

00:06:32,560 --> 00:06:37,509
up to 60 seconds for the build to even

00:06:35,259 --> 00:06:40,330
get in the queue or the message to come

00:06:37,509 --> 00:06:42,010
in a channel and to us that's outrageous

00:06:40,330 --> 00:06:44,380
who wants to wait 60 sec

00:06:42,010 --> 00:06:47,670
what is this an overnight batch CSV

00:06:44,380 --> 00:06:50,260
import right we're accustomed to this

00:06:47,670 --> 00:06:55,090
reactive programming that the on-demand

00:06:50,260 --> 00:06:58,090
web hooks give us I wanted to touch a

00:06:55,090 --> 00:07:00,550
little bit on the data that we put into

00:06:58,090 --> 00:07:03,250
the web payloads and I had this

00:07:00,550 --> 00:07:10,320
brilliant idea that I would show you a

00:07:03,250 --> 00:07:13,540
real example web hook payloads are quite

00:07:10,320 --> 00:07:17,110
verbose there are a hundred and eleven

00:07:13,540 --> 00:07:18,490
more lines not shown here I experimented

00:07:17,110 --> 00:07:27,370
with a smaller font but it was basically

00:07:18,490 --> 00:07:28,180
nonsense so write verbose is kinda where

00:07:27,370 --> 00:07:30,520
it's at

00:07:28,180 --> 00:07:34,540
with web hooks and it's something that

00:07:30,520 --> 00:07:37,690
you need to take into consideration when

00:07:34,540 --> 00:07:41,020
you're designing payloads of your own we

00:07:37,690 --> 00:07:45,030
often work with this kind of loose spec

00:07:41,020 --> 00:07:47,380
JSON nested data and we try and include

00:07:45,030 --> 00:07:49,690
the majority of things that our users

00:07:47,380 --> 00:07:52,480
going to need here you can see that

00:07:49,690 --> 00:07:53,980
we've got the previous commit ref the

00:07:52,480 --> 00:07:56,230
new commit ref some information about

00:07:53,980 --> 00:07:58,120
what happened here a link to comparison

00:07:56,230 --> 00:08:00,340
and then inside the commits array

00:07:58,120 --> 00:08:03,820
there'll be information with the commit

00:08:00,340 --> 00:08:06,730
ID the commit ID the timestamp the email

00:08:03,820 --> 00:08:08,410
the message for every commit all the

00:08:06,730 --> 00:08:10,330
details of the repository all the links

00:08:08,410 --> 00:08:12,130
to the contributors and branches and

00:08:10,330 --> 00:08:14,410
pull requests and everything of that

00:08:12,130 --> 00:08:15,580
repository and the same for the pusher

00:08:14,410 --> 00:08:18,160
and the sender which are normally the

00:08:15,580 --> 00:08:20,530
same but not always there's a lot of

00:08:18,160 --> 00:08:25,210
stuff in here and I think it's a fairly

00:08:20,530 --> 00:08:28,750
typical webhook payload idea when you're

00:08:25,210 --> 00:08:32,410
designing webhook payloads it's exactly

00:08:28,750 --> 00:08:37,020
it feels very machine oriented but we

00:08:32,410 --> 00:08:42,130
exactly need to begin from a user story

00:08:37,020 --> 00:08:45,910
why would a user subscribe to this web

00:08:42,130 --> 00:08:48,960
hook event what is it they're gonna do

00:08:45,910 --> 00:08:51,300
next what what reaction are they having

00:08:48,960 --> 00:08:54,480
because if you sin

00:08:51,300 --> 00:08:57,420
just the committe references in an array

00:08:54,480 --> 00:09:00,660
and there are let's say you're the Linux

00:08:57,420 --> 00:09:02,340
kernel project right and there are tens

00:09:00,660 --> 00:09:04,290
of thousands of people hundreds of

00:09:02,340 --> 00:09:07,290
thousands of people subscribe to that

00:09:04,290 --> 00:09:09,420
event you send you send out the wave

00:09:07,290 --> 00:09:11,010
hook from your wonderfully scalable

00:09:09,420 --> 00:09:13,770
system which I'm going to show you how

00:09:11,010 --> 00:09:17,400
to build and then every single one of

00:09:13,770 --> 00:09:21,060
those consumers makes an API call for

00:09:17,400 --> 00:09:22,800
each commit reference to get the name of

00:09:21,060 --> 00:09:24,510
the committer and the commit message and

00:09:22,800 --> 00:09:27,830
the other information right okay and

00:09:24,510 --> 00:09:31,560
this is what I like to call a DIY

00:09:27,830 --> 00:09:35,400
thundering herd problem right you made

00:09:31,560 --> 00:09:38,820
this you sent out an incomplete event

00:09:35,400 --> 00:09:41,460
notification and caused all of those

00:09:38,820 --> 00:09:43,680
incoming API requests so be careful try

00:09:41,460 --> 00:09:44,340
to think about what people are likely to

00:09:43,680 --> 00:09:47,190
do next

00:09:44,340 --> 00:09:50,250
feel free to go minimal with your

00:09:47,190 --> 00:09:53,430
payload but then look which API calls

00:09:50,250 --> 00:09:56,010
get hit next and start adding data in it

00:09:53,430 --> 00:09:57,180
should be safe to add data into your

00:09:56,010 --> 00:10:03,600
payload that shouldn't break other

00:09:57,180 --> 00:10:05,460
people's code um we over years of

00:10:03,600 --> 00:10:07,580
working with api's I mean I've been

00:10:05,460 --> 00:10:11,220
building api's long enough that we

00:10:07,580 --> 00:10:14,940
considered not only the cost of the

00:10:11,220 --> 00:10:17,280
user's data package and the speed of a

00:10:14,940 --> 00:10:19,680
network but also whether they would have

00:10:17,280 --> 00:10:22,230
a chip in their phone powerful enough to

00:10:19,680 --> 00:10:23,460
decode this format right a lot of them

00:10:22,230 --> 00:10:26,940
didn't have good string manipulation

00:10:23,460 --> 00:10:29,880
chips I'm going back a while and for

00:10:26,940 --> 00:10:32,550
api's for mobile facing stuff even for

00:10:29,880 --> 00:10:34,500
client web facing stuff we tend to try

00:10:32,550 --> 00:10:38,370
to keep things quite small we're very

00:10:34,500 --> 00:10:41,550
conscious of packet size web hooks are

00:10:38,370 --> 00:10:44,360
for the most part server to server

00:10:41,550 --> 00:10:46,260
they're two server-side applications

00:10:44,360 --> 00:10:48,150
communicating with each other or you

00:10:46,260 --> 00:10:50,310
know twenty thousand however many all

00:10:48,150 --> 00:10:52,260
communicating with each other you can

00:10:50,310 --> 00:10:56,070
assume that these are powerful machines

00:10:52,260 --> 00:10:59,930
on a decent network so verbose is

00:10:56,070 --> 00:11:03,240
actually okay depending on your use case

00:10:59,930 --> 00:11:04,560
I'm keep the data formats simple I saw a

00:11:03,240 --> 00:11:07,650
project

00:11:04,560 --> 00:11:09,870
a while ago which had this absolute I

00:11:07,650 --> 00:11:13,470
mean it was it was glorious it was it

00:11:09,870 --> 00:11:16,380
was beautiful sort of validated schemers

00:11:13,470 --> 00:11:17,430
and whatever no third party could

00:11:16,380 --> 00:11:19,260
integrate with it because it was just

00:11:17,430 --> 00:11:20,910
too complicated and it wasn't well

00:11:19,260 --> 00:11:23,400
supported enough across different

00:11:20,910 --> 00:11:25,980
programming languages seriously JSON

00:11:23,400 --> 00:11:29,070
beasts on some Apache thrift some sort

00:11:25,980 --> 00:11:31,910
of serialized format just keep it super

00:11:29,070 --> 00:11:37,080
simple and very standard and then

00:11:31,910 --> 00:11:40,860
everyone can integrate with you please

00:11:37,080 --> 00:11:42,690
don't forget that we know how to secure

00:11:40,860 --> 00:11:46,050
HTTP traffic we've been doing this web

00:11:42,690 --> 00:11:49,410
thing for a little while and so don't

00:11:46,050 --> 00:11:53,040
forget how to do that and don't invent

00:11:49,410 --> 00:11:56,190
anything new right we know how to secure

00:11:53,040 --> 00:11:58,500
this think about what your attack

00:11:56,190 --> 00:12:00,529
vectors are I think this is a massive

00:11:58,500 --> 00:12:03,480
issue in our industry right now

00:12:00,529 --> 00:12:07,050
particularly with the advent of the

00:12:03,480 --> 00:12:10,710
Internet of Things where security seems

00:12:07,050 --> 00:12:15,480
to be completely optional and in many

00:12:10,710 --> 00:12:17,490
cases so don't go there think about

00:12:15,480 --> 00:12:20,280
think about what can happen if you are

00:12:17,490 --> 00:12:21,300
receiving web hooks right you've got an

00:12:20,280 --> 00:12:22,950
open endpoint

00:12:21,300 --> 00:12:25,440
anybody could point could pose to that

00:12:22,950 --> 00:12:28,880
what could that do if a lot of requests

00:12:25,440 --> 00:12:31,650
came in if you're publishing web hooks

00:12:28,880 --> 00:12:34,560
what if a lot of people subscribe to

00:12:31,650 --> 00:12:37,560
that how much can your system scale or

00:12:34,560 --> 00:12:38,970
how much potentially wasted resorts do

00:12:37,560 --> 00:12:41,910
you want on that do you need to register

00:12:38,970 --> 00:12:43,589
everybody think about what those things

00:12:41,910 --> 00:12:47,130
can do because these are its this is at

00:12:43,589 --> 00:12:47,670
scale so it's not a person making a web

00:12:47,130 --> 00:12:50,160
request

00:12:47,670 --> 00:12:51,780
it's a botnet taking all of your

00:12:50,160 --> 00:12:55,800
platforms out or at least running up

00:12:51,780 --> 00:12:57,630
your hosting bills always use SSL this

00:12:55,800 --> 00:12:59,339
is non-negotiable if you are doing web

00:12:57,630 --> 00:13:01,980
hooks and you are not using HTTPS you

00:12:59,339 --> 00:13:03,570
are doing it wrong there are very few

00:13:01,980 --> 00:13:05,820
situations where I tell you you are

00:13:03,570 --> 00:13:07,290
doing it wrong not using SSL on

00:13:05,820 --> 00:13:10,860
production web hooks you're doing it

00:13:07,290 --> 00:13:13,170
wrong if you register with a git for a

00:13:10,860 --> 00:13:16,290
github webhook you'll notice that they

00:13:13,170 --> 00:13:18,030
offer the shared seek the secret option

00:13:16,290 --> 00:13:20,370
if you set the sea

00:13:18,030 --> 00:13:21,720
they use that to create a hash that you

00:13:20,370 --> 00:13:23,790
can then check on your side when the

00:13:21,720 --> 00:13:26,010
packet arrives everything you know about

00:13:23,790 --> 00:13:29,970
HTTP is good and hopefully I'm not

00:13:26,010 --> 00:13:34,470
teaching anyone anything new okay the

00:13:29,970 --> 00:13:34,950
bunnies are here to remind me to slow

00:13:34,470 --> 00:13:37,740
down

00:13:34,950 --> 00:13:39,360
and just take a break between sections

00:13:37,740 --> 00:13:49,220
so I don't blow your minds completely I

00:13:39,360 --> 00:13:51,600
mean I'm not promising I won't but right

00:13:49,220 --> 00:13:55,680
gonna show you how to publish web hooks

00:13:51,600 --> 00:13:57,330
from your own PHP application before we

00:13:55,680 --> 00:13:58,530
start let's talk about why you might

00:13:57,330 --> 00:14:01,320
want to do that please just don't go and

00:13:58,530 --> 00:14:05,280
publish my books for no reason um there

00:14:01,320 --> 00:14:08,460
are some very clear use cases the first

00:14:05,280 --> 00:14:11,610
one has to be the github continuous

00:14:08,460 --> 00:14:15,960
integration problem right something

00:14:11,610 --> 00:14:18,090
pulls your API loads and mostly gets no

00:14:15,960 --> 00:14:21,360
data brilliant move it to a web hook

00:14:18,090 --> 00:14:22,860
right now or at least offer it maybe not

00:14:21,360 --> 00:14:24,600
everyone knows how to handle those web

00:14:22,860 --> 00:14:26,970
hooks not all of your clients want that

00:14:24,600 --> 00:14:31,020
but if you're if you have an API you

00:14:26,970 --> 00:14:34,020
have a lot of polling then yes I would

00:14:31,020 --> 00:14:36,150
definitely recommend it if it's common

00:14:34,020 --> 00:14:39,330
for another application to react to

00:14:36,150 --> 00:14:41,940
changes in your application now I'm

00:14:39,330 --> 00:14:43,470
saying application like this is yours

00:14:41,940 --> 00:14:44,880
and this is gonna be like some other

00:14:43,470 --> 00:14:49,920
third party somewhere else in the world

00:14:44,880 --> 00:14:52,470
I am sure that a lot of you are moving

00:14:49,920 --> 00:14:55,050
to a more sort of modern microservices

00:14:52,470 --> 00:14:56,580
componentized architecture one

00:14:55,050 --> 00:14:58,560
application and another application

00:14:56,580 --> 00:15:01,470
could be components within the same

00:14:58,560 --> 00:15:02,340
organization this is the most common use

00:15:01,470 --> 00:15:05,730
of web hooks

00:15:02,340 --> 00:15:09,450
I see internal integration sending

00:15:05,730 --> 00:15:13,080
notifications between parts of your own

00:15:09,450 --> 00:15:16,530
system those parts might be owned by

00:15:13,080 --> 00:15:18,390
other people so the other team might own

00:15:16,530 --> 00:15:20,490
that component you own this component

00:15:18,390 --> 00:15:24,330
and you just agree on how you how you

00:15:20,490 --> 00:15:28,700
integrate and I see both web hooks but

00:15:24,330 --> 00:15:28,700
also message queues in use here

00:15:28,730 --> 00:15:34,940
I also see webhooks a lot for

00:15:30,829 --> 00:15:37,220
notifications so especially if you're

00:15:34,940 --> 00:15:38,839
using like an external or third-party

00:15:37,220 --> 00:15:42,350
library for push notifications to

00:15:38,839 --> 00:15:44,750
devices that kind of thing then that's a

00:15:42,350 --> 00:15:47,199
really good use case as well for web

00:15:44,750 --> 00:15:49,850
hooks or even just moving your own

00:15:47,199 --> 00:15:51,470
notification stuff out into a separate

00:15:49,850 --> 00:15:56,240
component web hooks can really help with

00:15:51,470 --> 00:15:59,149
that as well so with that in mind I have

00:15:56,240 --> 00:16:04,459
built you an example application try to

00:15:59,149 --> 00:16:09,290
keep it quite simple and it is a retro

00:16:04,459 --> 00:16:12,649
guestbook so once upon a time quite a

00:16:09,290 --> 00:16:15,920
long time ago probably if you were

00:16:12,649 --> 00:16:18,260
online before the year 2000 we all had

00:16:15,920 --> 00:16:20,389
websites and these websites had guest

00:16:18,260 --> 00:16:22,430
books on them I'm conscious not all of

00:16:20,389 --> 00:16:23,690
you were online before the year 2000 so

00:16:22,430 --> 00:16:28,160
I'm just gonna explain this tomb will

00:16:23,690 --> 00:16:30,380
skate over how old I am okay mmm and the

00:16:28,160 --> 00:16:31,940
idea of the guestbook exactly like you

00:16:30,380 --> 00:16:33,829
see in a nice holiday cottage or a hotel

00:16:31,940 --> 00:16:36,230
or you write your name where you're from

00:16:33,829 --> 00:16:37,880
and how much you liked the place right

00:16:36,230 --> 00:16:39,560
you always like something nice that is

00:16:37,880 --> 00:16:42,680
exactly what the internet was like in

00:16:39,560 --> 00:16:45,079
1999 because we had these guest books on

00:16:42,680 --> 00:16:47,360
our web sites like early dynamic web

00:16:45,079 --> 00:16:49,660
pages and it was lots of people laughing

00:16:47,360 --> 00:16:53,480
at me of you

00:16:49,660 --> 00:16:56,240
and without registering any users

00:16:53,480 --> 00:16:58,639
without any moderation on the common

00:16:56,240 --> 00:17:00,230
content at all people could write their

00:16:58,639 --> 00:17:01,790
name and write what they liked about

00:17:00,230 --> 00:17:04,130
your website and we displayed those

00:17:01,790 --> 00:17:06,140
things on our web sites that was a real

00:17:04,130 --> 00:17:09,350
thing lots of people just shaking their

00:17:06,140 --> 00:17:11,089
heads at me I know I know but it was it

00:17:09,350 --> 00:17:12,470
was genuinely was a real thing ask me

00:17:11,089 --> 00:17:16,220
about web rings in the bar it'll blow

00:17:12,470 --> 00:17:19,459
your mind okay so this example

00:17:16,220 --> 00:17:22,579
application is a guestbook so it allows

00:17:19,459 --> 00:17:25,370
us to write our name and leave a comment

00:17:22,579 --> 00:17:28,160
it allows us to see those comments that

00:17:25,370 --> 00:17:29,720
have already been stored and because

00:17:28,160 --> 00:17:32,000
we're really cutting edge with our

00:17:29,720 --> 00:17:34,220
guestbook it also sends web hooks you

00:17:32,000 --> 00:17:36,740
can register to get notifications of a

00:17:34,220 --> 00:17:38,840
new comment if you just can't wait to

00:17:36,740 --> 00:17:41,360
check the database later you could get a

00:17:38,840 --> 00:17:43,450
web book notification of any new comment

00:17:41,360 --> 00:17:49,100
on your guestbook

00:17:43,450 --> 00:17:52,009
it looks like this the reason it looks

00:17:49,100 --> 00:17:54,980
like a developer made it is because she

00:17:52,009 --> 00:17:57,679
did um well it's got CSS what do you

00:17:54,980 --> 00:18:02,929
want from me I'm an API developer for a

00:17:57,679 --> 00:18:04,009
reason okay and the process when you

00:18:02,929 --> 00:18:06,440
fill in the form looks something like

00:18:04,009 --> 00:18:08,809
this first we validate the data then we

00:18:06,440 --> 00:18:10,879
write the data to the database well then

00:18:08,809 --> 00:18:13,250
we normally return a response to the

00:18:10,879 --> 00:18:14,929
user but we're gonna deal with web hooks

00:18:13,250 --> 00:18:17,090
we're gonna send the web hooks to the

00:18:14,929 --> 00:18:20,659
subscribers before we return the

00:18:17,090 --> 00:18:22,610
response to the user there are a few

00:18:20,659 --> 00:18:24,350
ways we might do this mmm

00:18:22,610 --> 00:18:26,659
some of them make more impact on how

00:18:24,350 --> 00:18:29,179
long the user has to wait than others so

00:18:26,659 --> 00:18:31,730
option 1 for this turquoise circle is

00:18:29,179 --> 00:18:35,450
simply to look up the list of web hooks

00:18:31,730 --> 00:18:37,759
and send each web hook in turn and if

00:18:35,450 --> 00:18:39,889
there's 10,000 people registered the

00:18:37,759 --> 00:18:43,629
users gonna wait a really long time to

00:18:39,889 --> 00:18:50,149
see their page okay so we could probably

00:18:43,629 --> 00:18:53,419
improve on that let's use a queue a

00:18:50,149 --> 00:18:54,740
queue is ideal for asynchronous

00:18:53,419 --> 00:18:56,840
processing don't let me give a whole

00:18:54,740 --> 00:18:58,340
rabbitmq talk now I'm determined to get

00:18:56,840 --> 00:19:02,899
you to the fruit of the lunch queue okay

00:18:58,340 --> 00:19:04,399
so we have a queue so what we do is we

00:19:02,899 --> 00:19:06,649
take the new comment that was made we

00:19:04,399 --> 00:19:08,779
take that data we look up a list of web

00:19:06,649 --> 00:19:11,600
hooks and we just stick all that data in

00:19:08,779 --> 00:19:14,149
the queue fire-and-forget and we return

00:19:11,600 --> 00:19:17,240
the response for the user why am I

00:19:14,149 --> 00:19:21,320
looking up the web hooks from the web

00:19:17,240 --> 00:19:22,879
page we could do that later I like to

00:19:21,320 --> 00:19:24,679
look up the list of subscribers here

00:19:22,879 --> 00:19:26,539
because the website component already

00:19:24,679 --> 00:19:28,279
has access to the database it's already

00:19:26,539 --> 00:19:31,309
reading and writing to the database if

00:19:28,279 --> 00:19:32,509
every single part of your system writes

00:19:31,309 --> 00:19:35,690
to the database or reads from the

00:19:32,509 --> 00:19:36,919
database you've just created so more

00:19:35,690 --> 00:19:38,990
might that's not microservices that's

00:19:36,919 --> 00:19:41,450
some kind of almighty mess I know a lot

00:19:38,990 --> 00:19:43,879
of organizations that have converted to

00:19:41,450 --> 00:19:45,049
micro services and coincidentally their

00:19:43,879 --> 00:19:48,860
DBA resigned

00:19:45,049 --> 00:19:51,619
yeah right this is what happens so we

00:19:48,860 --> 00:19:56,310
need to be we need to be really careful

00:19:51,619 --> 00:19:57,750
about our data hygiene so I

00:19:56,310 --> 00:20:00,420
I'm gonna do all the database work up

00:19:57,750 --> 00:20:01,890
top put it all on the queue I don't need

00:20:00,420 --> 00:20:04,070
to look at anything else up after this

00:20:01,890 --> 00:20:06,330
point so this is all independent and

00:20:04,070 --> 00:20:07,800
then yeah we'll write a worker that

00:20:06,330 --> 00:20:14,790
takes the message off the queue and

00:20:07,800 --> 00:20:16,530
sends those hooks in a loop awesome um I

00:20:14,790 --> 00:20:18,870
just want to jump in with some PHP code

00:20:16,530 --> 00:20:20,880
this is how you write to a queue so here

00:20:18,870 --> 00:20:22,470
is the this is all on github so you can

00:20:20,880 --> 00:20:23,970
see the full version where I just ripped

00:20:22,470 --> 00:20:25,740
out a load I think you will know how to

00:20:23,970 --> 00:20:28,140
write two databases I took that bit out

00:20:25,740 --> 00:20:29,850
so it would fit on the slide so first of

00:20:28,140 --> 00:20:33,090
all we sanitize the incoming data from

00:20:29,850 --> 00:20:35,310
the form that you saw we save the data

00:20:33,090 --> 00:20:38,130
to the database we pick up a list of web

00:20:35,310 --> 00:20:40,590
hooks we assemble the date we connect to

00:20:38,130 --> 00:20:42,840
rabbit and then we just create a new

00:20:40,590 --> 00:20:44,760
message and publish it to the queue so

00:20:42,840 --> 00:20:47,490
this is all the code you need to write

00:20:44,760 --> 00:20:49,050
to wrap mq feel confident you're all

00:20:47,490 --> 00:20:51,330
gonna handle this so if you're not

00:20:49,050 --> 00:20:53,550
already working with queues go for it

00:20:51,330 --> 00:20:58,230
it's really not that hard I'm using

00:20:53,550 --> 00:21:01,650
RabbitMQ here we have it on IBM cloud

00:20:58,230 --> 00:21:03,480
that's not the only reason I actually

00:21:01,650 --> 00:21:05,040
love rabbitmq it's not really a hardship

00:21:03,480 --> 00:21:08,960
but it's like oh I have to use rabbit

00:21:05,040 --> 00:21:11,010
how terrible and but if you're using

00:21:08,960 --> 00:21:13,830
Beanstalk day I have known and loved

00:21:11,010 --> 00:21:15,660
I've used Gaiman with PHP as well bit

00:21:13,830 --> 00:21:18,810
further back all of that stuff is good

00:21:15,660 --> 00:21:20,600
if you're stuck Redis can do it like you

00:21:18,810 --> 00:21:23,400
probably have that in your stack already

00:21:20,600 --> 00:21:27,000
so nothing really I'm not hiding

00:21:23,400 --> 00:21:29,490
anything complicated from you here so we

00:21:27,000 --> 00:21:32,190
could do this website puts messages on

00:21:29,490 --> 00:21:34,320
the queue and the worker just loops and

00:21:32,190 --> 00:21:37,260
sends this is kind of tedious and if

00:21:34,320 --> 00:21:40,440
something goes wrong partway through we

00:21:37,260 --> 00:21:41,940
don't really know where we got up to so

00:21:40,440 --> 00:21:44,970
at the risk of delivering a RabbitMQ

00:21:41,940 --> 00:21:48,260
lecture think your geeks and you might

00:21:44,970 --> 00:21:50,730
be interested here's how I really do it

00:21:48,260 --> 00:21:53,670
so I do exactly the same I put the

00:21:50,730 --> 00:21:56,910
comment comment data list of web hooks

00:21:53,670 --> 00:21:59,100
onto a message the first worker picks

00:21:56,910 --> 00:22:01,860
that up and put some one new message

00:21:59,100 --> 00:22:05,130
into a different queue for each web hook

00:22:01,860 --> 00:22:09,570
we need to send so one endpoint and the

00:22:05,130 --> 00:22:12,270
message data into each one those Joe

00:22:09,570 --> 00:22:15,540
that go in this second q are now

00:22:12,270 --> 00:22:18,270
independent this is what distributed

00:22:15,540 --> 00:22:19,890
systems are made of they do not have any

00:22:18,270 --> 00:22:21,390
external dependencies they do not need

00:22:19,890 --> 00:22:22,530
to make any Network calls they do not

00:22:21,390 --> 00:22:25,410
need to look at anything about the

00:22:22,530 --> 00:22:27,810
database we just have a worker that will

00:22:25,410 --> 00:22:30,560
we can now scale this horizontally as

00:22:27,810 --> 00:22:33,870
much as we need to because every job is

00:22:30,560 --> 00:22:36,330
independent and this is why I do it this

00:22:33,870 --> 00:22:37,950
way webhooks

00:22:36,330 --> 00:22:42,900
because you're holding the connection

00:22:37,950 --> 00:22:46,500
open can can be a real difficult

00:22:42,900 --> 00:22:48,480
performance issue but and if you've

00:22:46,500 --> 00:22:49,680
worked with the slack integrations you

00:22:48,480 --> 00:22:51,450
don't respond within three seconds they

00:22:49,680 --> 00:22:54,060
close the connection and this is because

00:22:51,450 --> 00:22:56,370
otherwise they run out of webserver

00:22:54,060 --> 00:22:59,400
right holding connections open waiting

00:22:56,370 --> 00:23:01,410
for you so I'm gonna talk a little bit

00:22:59,400 --> 00:23:04,290
more about receiving web hooks in a bit

00:23:01,410 --> 00:23:07,290
but just this is why I do it this way

00:23:04,290 --> 00:23:10,140
it's just to keep each piece independent

00:23:07,290 --> 00:23:11,280
and to allow you to scale up obviously

00:23:10,140 --> 00:23:13,170
I'm hoping all of you will write

00:23:11,280 --> 00:23:14,580
terribly successful applications and

00:23:13,170 --> 00:23:18,690
therefore you'll have to scale up nodes

00:23:14,580 --> 00:23:21,030
because you'll be really successful so

00:23:18,690 --> 00:23:22,950
this is what we've got the web site puts

00:23:21,030 --> 00:23:26,130
things in the queue the first worker

00:23:22,950 --> 00:23:27,480
puts more things one per endpoint into

00:23:26,130 --> 00:23:29,580
the notification queue we have a bunch

00:23:27,480 --> 00:23:32,160
of workers actually sending those web

00:23:29,580 --> 00:23:35,850
hooks which is sort of release

00:23:32,160 --> 00:23:37,740
relatedly slower I am going to attempt

00:23:35,850 --> 00:23:41,190
to demo that guestbook and show you

00:23:37,740 --> 00:23:43,170
around how those moving parts actually

00:23:41,190 --> 00:23:47,490
move and how you would do this as a

00:23:43,170 --> 00:23:53,160
developer for my endpoints I'm gonna use

00:23:47,490 --> 00:23:55,110
a tool called request bin this is a free

00:23:53,160 --> 00:23:56,340
tool it's hosted by run scopes so if you

00:23:55,110 --> 00:23:57,990
find request bin doesn't do it your need

00:23:56,340 --> 00:24:01,080
you'll find Rynn scope does do what you

00:23:57,990 --> 00:24:02,820
need but run scope support request bin

00:24:01,080 --> 00:24:04,230
it's also an open source project so if

00:24:02,820 --> 00:24:05,460
your sack close enough to one of the

00:24:04,230 --> 00:24:07,830
screens you can see I'm actually running

00:24:05,460 --> 00:24:10,320
it on a VM it's just Python and I think

00:24:07,830 --> 00:24:13,440
it has a celery dependency and I use

00:24:10,320 --> 00:24:16,680
this loads if I'm not sure if I'm

00:24:13,440 --> 00:24:18,930
sending the right web format or anything

00:24:16,680 --> 00:24:22,520
just put this in as your end point and

00:24:18,930 --> 00:24:25,890
then inspect it you'll see an example

00:24:22,520 --> 00:24:30,110
let's see if I can run a video and talk

00:24:25,890 --> 00:24:30,110
at the same time could be a challenge

00:24:31,760 --> 00:24:38,360
alright so first of all I would like to

00:24:35,790 --> 00:24:40,710
introduce you to the rabbit MQ

00:24:38,360 --> 00:24:42,780
management console this is just a plugin

00:24:40,710 --> 00:24:44,370
for rabbit gives you a web interface at

00:24:42,780 --> 00:24:46,530
the top you'll see how many messages are

00:24:44,370 --> 00:24:50,160
in the queue all the queues and down

00:24:46,530 --> 00:24:54,060
here you'll see things being published

00:24:50,160 --> 00:24:55,530
to the queue delivered acknowledged will

00:24:54,060 --> 00:24:59,780
see those graphs changing as we go

00:24:55,530 --> 00:25:02,550
through so here we are with RabbitMQ and

00:24:59,780 --> 00:25:05,340
the first thing we need to do is set up

00:25:02,550 --> 00:25:07,230
these endpoints with request bin so this

00:25:05,340 --> 00:25:09,210
is what request bin looks like click the

00:25:07,230 --> 00:25:13,170
big green I'd like a new request bin

00:25:09,210 --> 00:25:18,660
button and copy the URL here's the

00:25:13,170 --> 00:25:20,910
guestbook so we will register our web

00:25:18,660 --> 00:25:22,470
hook end point with the guestbook so

00:25:20,910 --> 00:25:25,020
that new comments will be send

00:25:22,470 --> 00:25:27,150
notifications to the endpoint so here's

00:25:25,020 --> 00:25:28,230
an endpoint this isn't all that

00:25:27,150 --> 00:25:29,580
interesting unless you have more than

00:25:28,230 --> 00:25:31,860
one endpoint so I'm just gonna do that

00:25:29,580 --> 00:25:35,220
again with request bin and register a

00:25:31,860 --> 00:25:37,140
second URL with the guestbook so that we

00:25:35,220 --> 00:25:42,300
you'll see that we go from one message

00:25:37,140 --> 00:25:44,430
to two messages all the workers on this

00:25:42,300 --> 00:25:46,800
system are currently stopped if they

00:25:44,430 --> 00:25:49,080
weren't you wouldn't see anything on the

00:25:46,800 --> 00:25:50,640
rabbit Thank You admin console because

00:25:49,080 --> 00:25:53,220
we're like sending a web request it's

00:25:50,640 --> 00:25:55,260
quite quick I've definitely had this

00:25:53,220 --> 00:25:58,380
problem before when developing with any

00:25:55,260 --> 00:26:02,240
kind of queues and workers setup you I

00:25:58,380 --> 00:26:05,670
would very strongly recommend that you

00:26:02,240 --> 00:26:07,100
regularly stop all your workers while

00:26:05,670 --> 00:26:10,530
you're developing and testing the system

00:26:07,100 --> 00:26:12,240
because that shows you what happens when

00:26:10,530 --> 00:26:14,040
the queues are building up all the

00:26:12,240 --> 00:26:16,350
workers are stalled for any reason so

00:26:14,040 --> 00:26:18,090
you should see what happens if just the

00:26:16,350 --> 00:26:20,820
queues are quite long and it's slow cuz

00:26:18,090 --> 00:26:22,440
on dev you never see that you don't see

00:26:20,820 --> 00:26:25,200
it till load testing but you can kind of

00:26:22,440 --> 00:26:27,720
preempt it I had one where I could

00:26:25,200 --> 00:26:30,330
reliably do the image processing on a

00:26:27,720 --> 00:26:33,480
new registration before we loaded the

00:26:30,330 --> 00:26:36,179
Welcome page except one day I broke my

00:26:33,480 --> 00:26:39,720
workers and I realized that if it wasn't

00:26:36,179 --> 00:26:42,090
is the ugliest era ever and we put in a

00:26:39,720 --> 00:26:45,119
placeholder image which we never saw

00:26:42,090 --> 00:26:46,409
forgot about it and we were soft live

00:26:45,119 --> 00:26:48,360
and then a famous footballer tweeted a

00:26:46,409 --> 00:26:51,480
link to it lots of people registered

00:26:48,360 --> 00:26:53,029
strangely enough and the image

00:26:51,480 --> 00:26:55,860
processing queue fell over quite quickly

00:26:53,029 --> 00:26:57,330
but it all just kept on working users

00:26:55,860 --> 00:26:59,039
had an experience that showed them some

00:26:57,330 --> 00:27:02,220
sort of placeholder image and our

00:26:59,039 --> 00:27:06,629
workers eventually overnight we ran out

00:27:02,220 --> 00:27:09,360
of I knows anyway wow that was a tangent

00:27:06,629 --> 00:27:10,559
right that's not a comment so remember

00:27:09,360 --> 00:27:11,789
this is a guestbook so we're going to

00:27:10,559 --> 00:27:12,929
write something nice a bit like you're

00:27:11,789 --> 00:27:17,429
gonna do in your joined in feedback

00:27:12,929 --> 00:27:20,009
later so we save a comment and we check

00:27:17,429 --> 00:27:22,259
out the RabbitMQ admin console oh yeah

00:27:20,009 --> 00:27:23,820
look a single message has arrived we've

00:27:22,259 --> 00:27:28,320
added one comment we're in the first

00:27:23,820 --> 00:27:32,190
queue now I'll start the workers so this

00:27:28,320 --> 00:27:35,279
is just the first worker and if you have

00:27:32,190 --> 00:27:39,179
a look what happens here in the bottom

00:27:35,279 --> 00:27:42,659
graph I've had one message acknowledged

00:27:39,179 --> 00:27:45,299
and two messages published because we

00:27:42,659 --> 00:27:47,220
took the list of webhooks lists there's

00:27:45,299 --> 00:27:49,409
two of them and our comment data and

00:27:47,220 --> 00:27:53,100
turned it into two messages these are

00:27:49,409 --> 00:27:56,100
independent if I now start the other

00:27:53,100 --> 00:27:57,779
worker to process the second queue

00:27:56,100 --> 00:28:00,869
that's why I've got them running under

00:27:57,779 --> 00:28:04,980
different system D jobs here it is let's

00:28:00,869 --> 00:28:07,379
start that service and check back with

00:28:04,980 --> 00:28:11,309
rabbit MQ yep I've got two messages

00:28:07,379 --> 00:28:12,720
acknowledged and nothing in the queue we

00:28:11,309 --> 00:28:14,580
can also go and check out request bin

00:28:12,720 --> 00:28:16,440
because they love requests Ben is where

00:28:14,580 --> 00:28:18,960
we'll have received our webhooks

00:28:16,440 --> 00:28:20,190
it doesn't scale up all that well so I'm

00:28:18,960 --> 00:28:22,740
not sure if you can read this but it

00:28:20,190 --> 00:28:24,450
shows an incoming post request all the

00:28:22,740 --> 00:28:26,759
headers that were sent this can be

00:28:24,450 --> 00:28:28,559
really useful for Diagnostics if you

00:28:26,759 --> 00:28:31,080
need to you can see everything that came

00:28:28,559 --> 00:28:33,149
in the content type and here's the

00:28:31,080 --> 00:28:35,639
actual content which is the comment of

00:28:33,149 --> 00:28:38,700
my session coming in there and the same

00:28:35,639 --> 00:28:41,990
if i record i refresh the other request

00:28:38,700 --> 00:28:41,990
bin as well

00:28:50,300 --> 00:28:55,260
another bunny yeah okay good I'm really

00:28:53,340 --> 00:29:01,950
gonna put these bunnies in also kittens

00:28:55,260 --> 00:29:04,500
are overrated my team saw this talk

00:29:01,950 --> 00:29:07,560
rehearsal and they said no now in these

00:29:04,500 --> 00:29:12,840
needs more cats need needs more cats and

00:29:07,560 --> 00:29:16,010
I was a bit like it's all about the

00:29:12,840 --> 00:29:18,800
function you need the thing to perform

00:29:16,010 --> 00:29:21,960
rather than what they look like

00:29:18,800 --> 00:29:23,730
so thanks bunnies you're you're helping

00:29:21,960 --> 00:29:27,560
me here it's all you've seen there is

00:29:23,730 --> 00:29:30,690
how in a PHP application we would add

00:29:27,560 --> 00:29:32,700
messages to a queue and then process

00:29:30,690 --> 00:29:34,410
those messages you've seen kind of

00:29:32,700 --> 00:29:37,110
there's a lot of moving parts there if

00:29:34,410 --> 00:29:37,850
you're accustomed to just web server

00:29:37,110 --> 00:29:40,200
sends

00:29:37,850 --> 00:29:42,510
browser sends requests web server sends

00:29:40,200 --> 00:29:44,010
response there's a lot moving here but

00:29:42,510 --> 00:29:48,030
I'm hoping that I'm showing you around

00:29:44,010 --> 00:29:54,540
all right let's look at the other side

00:29:48,030 --> 00:29:59,910
of this now I think this part is the

00:29:54,540 --> 00:30:02,010
most important part of this talk I'm not

00:29:59,910 --> 00:30:04,500
sure that every application has a use

00:30:02,010 --> 00:30:06,210
case for publishing web hooks just

00:30:04,500 --> 00:30:10,470
depending what you're doing may not lend

00:30:06,210 --> 00:30:12,330
itself really well but I think receiving

00:30:10,470 --> 00:30:14,400
web hooks integrating with other

00:30:12,330 --> 00:30:16,590
people's applications whether it's in

00:30:14,400 --> 00:30:19,980
your actual application or in your bot

00:30:16,590 --> 00:30:23,760
or other internal tools I think as

00:30:19,980 --> 00:30:27,450
developers this is something we can all

00:30:23,760 --> 00:30:29,040
work with so if I lost you already then

00:30:27,450 --> 00:30:35,430
please tune back in I promise to be less

00:30:29,040 --> 00:30:36,330
scary okay just remember it's just a

00:30:35,430 --> 00:30:38,070
post request

00:30:36,330 --> 00:30:40,500
it's a weird setup because it's kind of

00:30:38,070 --> 00:30:43,350
like a backwards API if you're building

00:30:40,500 --> 00:30:45,420
an API then you know you are the server

00:30:43,350 --> 00:30:48,270
and people ask you for things and the

00:30:45,420 --> 00:30:51,690
post request comes this way whereas

00:30:48,270 --> 00:30:54,390
often when you're receiving web hooks

00:30:51,690 --> 00:30:58,200
you're kind of the client but the HTTP

00:30:54,390 --> 00:31:02,060
traffic comes in the same way PHP is

00:30:58,200 --> 00:31:05,960
designed to solve the web problem

00:31:02,060 --> 00:31:11,180
it is ideal perfect for these kinds of

00:31:05,960 --> 00:31:16,970
applications some things I'd really like

00:31:11,180 --> 00:31:21,470
to just kind of flag or recommend to you

00:31:16,970 --> 00:31:23,060
is to think hard about what needs to be

00:31:21,470 --> 00:31:25,010
done immediately when the webhook

00:31:23,060 --> 00:31:28,130
arrives and what can be done

00:31:25,010 --> 00:31:30,590
asynchronously a lot of the time this

00:31:28,130 --> 00:31:32,480
doesn't well it's a web hook so it's not

00:31:30,590 --> 00:31:34,940
really real time anyway a lot of the

00:31:32,480 --> 00:31:38,000
time it doesn't need to be instant and

00:31:34,940 --> 00:31:42,530
if you are doing processing in as the

00:31:38,000 --> 00:31:46,160
web hook arrives then you're holding

00:31:42,530 --> 00:31:48,980
your web connection open and this way

00:31:46,160 --> 00:31:51,830
lies madness holding open web connection

00:31:48,980 --> 00:31:54,410
incoming connections is where the hockey

00:31:51,830 --> 00:31:55,700
stick graph comes from because then

00:31:54,410 --> 00:31:56,810
everything's waiting and everything's

00:31:55,700 --> 00:32:00,560
waiting and everything gets lower and

00:31:56,810 --> 00:32:01,760
then with all goes wrong so if you can

00:32:00,560 --> 00:32:05,030
and this depends on your application

00:32:01,760 --> 00:32:07,460
just accept the data make sure to store

00:32:05,030 --> 00:32:09,290
it make sure you've got it and then send

00:32:07,460 --> 00:32:12,850
back the acknowledgement I already

00:32:09,290 --> 00:32:15,200
remember 200 okay smiley yeah and I

00:32:12,850 --> 00:32:17,180
already mentioned that slack have rules

00:32:15,200 --> 00:32:19,880
about how quickly you need to respond

00:32:17,180 --> 00:32:21,440
when you do this right so you need to

00:32:19,880 --> 00:32:23,690
there isn't time for you to bootstrap

00:32:21,440 --> 00:32:26,060
bootstrap an enormous full stack PHP

00:32:23,690 --> 00:32:28,070
framework and check that all the

00:32:26,060 --> 00:32:30,590
incoming data is valid and the accounts

00:32:28,070 --> 00:32:33,200
are active and then RIA reak I used to

00:32:30,590 --> 00:32:35,030
work on an a smart energy system and it

00:32:33,200 --> 00:32:36,770
recalculated the monthly running totals

00:32:35,030 --> 00:32:38,390
every time a reading came in

00:32:36,770 --> 00:32:39,950
well the readings came in every five

00:32:38,390 --> 00:32:41,080
minutes we had a 48-hour lag on

00:32:39,950 --> 00:32:43,640
processing them because we were

00:32:41,080 --> 00:32:46,490
constantly Reform Act recalculating the

00:32:43,640 --> 00:32:48,530
running totals right so really think

00:32:46,490 --> 00:32:51,370
about what you're doing here if you can

00:32:48,530 --> 00:32:53,600
just store it and process it later

00:32:51,370 --> 00:32:55,670
you've all worked with systems that do

00:32:53,600 --> 00:32:59,270
this if you've integrated with paypal

00:32:55,670 --> 00:33:02,510
then you get that note of that call back

00:32:59,270 --> 00:33:04,100
later so that the you've you forward

00:33:02,510 --> 00:33:05,630
your user to PayPal they get forwarded

00:33:04,100 --> 00:33:07,370
back to you and then you get the

00:33:05,630 --> 00:33:10,090
notification to say yes the payment went

00:33:07,370 --> 00:33:12,410
through right so that's an out-of-band

00:33:10,090 --> 00:33:13,990
notification coming back to you you can

00:33:12,410 --> 00:33:15,940
do that with web hooks

00:33:13,990 --> 00:33:17,920
try not to validate

00:33:15,940 --> 00:33:23,080
Datta try not to hang around try to just

00:33:17,920 --> 00:33:25,090
accept it and log the incoming body of

00:33:23,080 --> 00:33:30,780
the data in full always just love the

00:33:25,090 --> 00:33:34,210
whole thing I have been increasingly

00:33:30,780 --> 00:33:37,240
moving this kind of functionality to a

00:33:34,210 --> 00:33:40,690
service endpoint one of the reasons that

00:33:37,240 --> 00:33:44,560
I like to store immediately is just to

00:33:40,690 --> 00:33:48,310
try to protect myself against the very

00:33:44,560 --> 00:33:50,500
bursty nature of Internet traffic in

00:33:48,310 --> 00:33:51,730
general web hooks in particular it tends

00:33:50,500 --> 00:33:53,670
to be the stuff happening and there are

00:33:51,730 --> 00:33:56,680
hooks everywhere or it's quite quiet

00:33:53,670 --> 00:33:58,000
with that smart energy project we used

00:33:56,680 --> 00:33:59,530
to instrument a whole block of flats and

00:33:58,000 --> 00:34:00,880
then like turn it on all at once every

00:33:59,530 --> 00:34:02,470
device in the building would phone home

00:34:00,880 --> 00:34:06,490
the server would fall over as our come

00:34:02,470 --> 00:34:08,320
on so look out for that look out for

00:34:06,490 --> 00:34:11,260
being able to accept all of that data

00:34:08,320 --> 00:34:13,780
and process it even if it lags by a few

00:34:11,260 --> 00:34:15,690
seconds right that's most applications

00:34:13,780 --> 00:34:18,910
it's fine

00:34:15,690 --> 00:34:21,780
let's talk about serverless I try not to

00:34:18,910 --> 00:34:24,580
talk too much about service the service

00:34:21,780 --> 00:34:25,870
technology and I'm just going to try and

00:34:24,580 --> 00:34:29,890
introduce it I know some of you haven't

00:34:25,870 --> 00:34:31,570
used it and the idea behind seven I mean

00:34:29,890 --> 00:34:34,390
I love the name server list this is

00:34:31,570 --> 00:34:37,810
nonsense right it's right up there with

00:34:34,390 --> 00:34:39,910
no ups but no apps okay

00:34:37,810 --> 00:34:41,710
I might not need to do any ops I'm a

00:34:39,910 --> 00:34:44,410
developer it is best if I do not do apps

00:34:41,710 --> 00:34:47,140
right but somebody did the best ops

00:34:44,410 --> 00:34:50,140
you've ever seen and calling it no ops

00:34:47,140 --> 00:34:51,429
seems a bit rubbish really serverless is

00:34:50,140 --> 00:34:54,010
the same they're really awesome

00:34:51,429 --> 00:34:57,070
excellent service and what happens is

00:34:54,010 --> 00:35:02,170
you write just a function and I'm about

00:34:57,070 --> 00:35:04,330
to show you an example and you don't

00:35:02,170 --> 00:35:06,040
worry about the operating system the

00:35:04,330 --> 00:35:07,990
framework you need to worry about your

00:35:06,040 --> 00:35:10,270
language dependencies but essentially

00:35:07,990 --> 00:35:13,210
you just write a function and you deploy

00:35:10,270 --> 00:35:15,910
just the function it gets containerized

00:35:13,210 --> 00:35:18,910
for you and you just say when this

00:35:15,910 --> 00:35:21,490
happens run my function you can run a

00:35:18,910 --> 00:35:24,070
command line make it run it's very

00:35:21,490 --> 00:35:28,870
common and we'll this is what we'll see

00:35:24,070 --> 00:35:29,680
in this example to hook it up with like

00:35:28,870 --> 00:35:31,809
an incoming eight

00:35:29,680 --> 00:35:33,670
ttp requests when this request when a

00:35:31,809 --> 00:35:37,119
request comes to this endpoint run my

00:35:33,670 --> 00:35:41,099
function it might be when there's a

00:35:37,119 --> 00:35:41,099
change on that database run my function

00:35:41,220 --> 00:35:47,710
every five minutes run my function when

00:35:44,800 --> 00:35:49,690
this value of this feed crosses this

00:35:47,710 --> 00:35:52,869
particular boundary run my function

00:35:49,690 --> 00:35:56,109
right you just set up the function and

00:35:52,869 --> 00:35:59,290
what's beautiful about this is it's

00:35:56,109 --> 00:36:01,809
incredibly simple it's much easier than

00:35:59,290 --> 00:36:04,119
any like actual whole framework PHP

00:36:01,809 --> 00:36:07,150
right is it so small it's like writing

00:36:04,119 --> 00:36:10,839
really small and command-line apps but

00:36:07,150 --> 00:36:15,099
you just run them in the cloud it's

00:36:10,839 --> 00:36:17,170
pay-as-you-go if you deploy this and

00:36:15,099 --> 00:36:17,910
nobody uses it it doesn't cost you

00:36:17,170 --> 00:36:21,339
anything

00:36:17,910 --> 00:36:23,470
there's no capacity planning there's no

00:36:21,339 --> 00:36:28,000
please sir may I have another sip may I

00:36:23,470 --> 00:36:29,800
have another server it just runs when it

00:36:28,000 --> 00:36:35,109
runs and you can keep an eye on it all

00:36:29,800 --> 00:36:37,089
of the platforms have three tiers so for

00:36:35,109 --> 00:36:41,829
prototyping or low traffic sites

00:36:37,089 --> 00:36:44,950
you're never gonna pay for anyway if the

00:36:41,829 --> 00:36:48,099
opposite is true and you're you get a

00:36:44,950 --> 00:36:49,839
lot of triggers causing your function to

00:36:48,099 --> 00:36:52,390
run then it just scales up horizontally

00:36:49,839 --> 00:36:55,720
when you turn on the building of sensors

00:36:52,390 --> 00:36:57,579
and all those devices phone home at once

00:36:55,720 --> 00:36:59,829
will just run some more of those

00:36:57,579 --> 00:37:03,240
function and handle that load so again

00:36:59,829 --> 00:37:05,680
you to think about horizontally scalable

00:37:03,240 --> 00:37:07,390
systems and how you could keep each of

00:37:05,680 --> 00:37:11,950
those pieces of work as independent as

00:37:07,390 --> 00:37:15,190
possible you've probably heard of Amazon

00:37:11,950 --> 00:37:17,980
lambda I obviously I said here comes the

00:37:15,190 --> 00:37:19,660
IBM cloud story they pay me and my

00:37:17,980 --> 00:37:22,839
hosting bills there's nothing to not

00:37:19,660 --> 00:37:25,660
like about this um IBM cloud has IBM

00:37:22,839 --> 00:37:27,910
cloud functions it's actually a hosted

00:37:25,660 --> 00:37:30,549
version of an open source project called

00:37:27,910 --> 00:37:32,859
Apache open wisk so you can develop with

00:37:30,549 --> 00:37:36,220
that locally or an open wisk on your own

00:37:32,859 --> 00:37:40,680
hosting anyway or we have a hosted

00:37:36,220 --> 00:37:40,680
version that i use and like

00:37:40,890 --> 00:37:45,660
she open whisk and I think some of the

00:37:44,010 --> 00:37:48,270
other service providers but I'm not sure

00:37:45,660 --> 00:37:49,740
supports PHP out of the box so you don't

00:37:48,270 --> 00:37:52,320
need to docker eyes it or whatever you

00:37:49,740 --> 00:37:54,540
to work around it supports PHP out in

00:37:52,320 --> 00:37:55,830
the box and that implementation was done

00:37:54,540 --> 00:37:57,960
by Rob Allen who I can't embarrass

00:37:55,830 --> 00:38:00,960
because he's on the stage upstairs so

00:37:57,960 --> 00:38:02,610
he's not here for me to point out so we

00:38:00,960 --> 00:38:04,920
have PHP running on our platform so

00:38:02,610 --> 00:38:06,960
servers PHP yeah that's a thing and it

00:38:04,920 --> 00:38:08,790
lends itself to serverless really well

00:38:06,960 --> 00:38:10,770
because pitch peace pretty simple it

00:38:08,790 --> 00:38:12,900
reads from top to bottom it's great

00:38:10,770 --> 00:38:15,750
works well with incoming web requests

00:38:12,900 --> 00:38:17,940
it's a web it's a web language and if

00:38:15,750 --> 00:38:22,470
you want to use another platform I'm not

00:38:17,940 --> 00:38:23,880
sure but I suspect in a roomful of PHP

00:38:22,470 --> 00:38:27,870
developers that maybe some of you know

00:38:23,880 --> 00:38:29,340
some JavaScript maybe and nodejs is

00:38:27,870 --> 00:38:30,990
supported on all of the platforms and

00:38:29,340 --> 00:38:33,000
typically you'll find yourself reading

00:38:30,990 --> 00:38:34,770
the no js' documentation on all the

00:38:33,000 --> 00:38:37,800
platforms regardless of which language

00:38:34,770 --> 00:38:39,360
you're using so that's that's service

00:38:37,800 --> 00:38:41,490
you write a function you deploy the

00:38:39,360 --> 00:38:43,610
function you say when it should run so

00:38:41,490 --> 00:38:45,840
here's my function it's written in PHP

00:38:43,610 --> 00:38:47,460
little bit of white space crime to put

00:38:45,840 --> 00:38:49,020
it on the slide not too much sorry about

00:38:47,460 --> 00:38:52,920
the closing bracket really couldn't fit

00:38:49,020 --> 00:38:56,160
it on so you write a function and it

00:38:52,920 --> 00:38:57,990
should be called main and that function

00:38:56,160 --> 00:39:01,950
accepts one parameter everyone still

00:38:57,990 --> 00:39:03,990
with me okay that function accepts one

00:39:01,950 --> 00:39:05,820
parameter and it's called params could

00:39:03,990 --> 00:39:09,320
be called whatever you like and here is

00:39:05,820 --> 00:39:11,220
all the incoming data so if you've set

00:39:09,320 --> 00:39:13,650
variables when you deployed your

00:39:11,220 --> 00:39:16,830
function like environment variable style

00:39:13,650 --> 00:39:18,660
then you'll find those here if there are

00:39:16,830 --> 00:39:21,780
variables that you set when you called

00:39:18,660 --> 00:39:25,410
the function then you'll find those here

00:39:21,780 --> 00:39:27,690
if you are you can optionally set it up

00:39:25,410 --> 00:39:30,090
to pass incoming post variables or pass

00:39:27,690 --> 00:39:31,980
or JSON body and stuff and extract those

00:39:30,090 --> 00:39:33,660
variables as well I've not done that cuz

00:39:31,980 --> 00:39:38,250
it makes me a bit register Global's

00:39:33,660 --> 00:39:40,350
frightened itchy online - I'm accessing

00:39:38,250 --> 00:39:42,510
that parameters they're able to pull out

00:39:40,350 --> 00:39:45,600
the Cloudant URL you'll see that being

00:39:42,510 --> 00:39:48,120
set in a demo in a minute and then I'm

00:39:45,600 --> 00:39:51,750
manually decoding the body so to get the

00:39:48,120 --> 00:39:53,940
body just as it was it comes in basic C

00:39:51,750 --> 00:39:54,510
four encoded so you can just decode it

00:39:53,940 --> 00:39:56,940
and then

00:39:54,510 --> 00:39:58,740
mine's JSON you've just seen my webhook

00:39:56,940 --> 00:40:02,040
this code is going to receive the web

00:39:58,740 --> 00:40:04,200
hook that you just saw me publish so i'm

00:40:02,040 --> 00:40:05,550
just json decoding it and noticed that

00:40:04,200 --> 00:40:08,100
this is a very optimistic version

00:40:05,550 --> 00:40:10,080
everything's fine we successfully decode

00:40:08,100 --> 00:40:12,420
everything there's no problems with the

00:40:10,080 --> 00:40:14,280
basics before encoding this it's valid

00:40:12,420 --> 00:40:15,720
JSON every time there are narrower

00:40:14,280 --> 00:40:17,970
conditions this is like totally

00:40:15,720 --> 00:40:23,820
optimistic developer advocate doesn't

00:40:17,970 --> 00:40:27,530
run on production code so then we store

00:40:23,820 --> 00:40:30,690
it and we send the response so here I'm

00:40:27,530 --> 00:40:33,090
writing to CouchDB i've recently

00:40:30,690 --> 00:40:34,680
published a new PHP couchdb library so

00:40:33,090 --> 00:40:37,200
if you're working with PHP and couchdb

00:40:34,680 --> 00:40:38,760
please try it and then tell me what

00:40:37,200 --> 00:40:41,550
you'd like done differently because it's

00:40:38,760 --> 00:40:44,940
new but it may turned my 10 lines of

00:40:41,550 --> 00:40:46,640
code into 3 so I went I am using it

00:40:44,940 --> 00:40:50,010
because I like it that's why I made it

00:40:46,640 --> 00:40:52,440
and what we do here is we connect

00:40:50,010 --> 00:40:54,300
CouchDB we say which database we'd like

00:40:52,440 --> 00:40:57,390
to use it's called incoming it's where I

00:40:54,300 --> 00:40:59,910
store my incoming webhook data we said

00:40:57,390 --> 00:41:01,860
it was a metadata just to record when we

00:40:59,910 --> 00:41:06,510
received it and set the status to be new

00:41:01,860 --> 00:41:08,880
if you are just gonna come back and loop

00:41:06,510 --> 00:41:10,440
through the data that's come in and look

00:41:08,880 --> 00:41:12,720
at which hasn't been processed yet then

00:41:10,440 --> 00:41:14,610
the status field is quite useful I'm

00:41:12,720 --> 00:41:16,230
using CouchDB so realistically I would

00:41:14,610 --> 00:41:18,360
be watching the change your speed but

00:41:16,230 --> 00:41:19,560
for an ordinary database you probably

00:41:18,360 --> 00:41:23,610
would want to come back and look at it

00:41:19,560 --> 00:41:26,790
like that and then yeah just create the

00:41:23,610 --> 00:41:28,680
record on line 10 and return thanks with

00:41:26,790 --> 00:41:31,410
a smiley on line 11 because that's how

00:41:28,680 --> 00:41:33,810
we do that's how we do web hooks we send

00:41:31,410 --> 00:41:37,770
back that 200 okay and I'm sending back

00:41:33,810 --> 00:41:40,290
the smiley right so let me show you this

00:41:37,770 --> 00:41:41,670
as it happens cuz I I want to give you a

00:41:40,290 --> 00:41:49,110
better concept of again how the

00:41:41,670 --> 00:41:52,650
developer experience is for that so that

00:41:49,110 --> 00:41:55,970
would be this one here it is so in this

00:41:52,650 --> 00:41:58,260
directory I have some files

00:41:55,970 --> 00:42:00,810
none of this should look alarming you

00:41:58,260 --> 00:42:04,500
will use composer yes

00:42:00,810 --> 00:42:06,570
we've got deployed or SH that's my hacky

00:42:04,500 --> 00:42:08,069
script too I just edited my PHP file

00:42:06,570 --> 00:42:09,719
here is what I'm going to run

00:42:08,069 --> 00:42:12,900
I'm gonna type those commands and walk

00:42:09,719 --> 00:42:15,029
through them with you here I've got

00:42:12,900 --> 00:42:17,400
ignore file because I've got a vendor

00:42:15,029 --> 00:42:20,759
file hookshot Zippy's what we're going

00:42:17,400 --> 00:42:23,430
to create index dot PHP is where the

00:42:20,759 --> 00:42:25,769
code actually lives where the function

00:42:23,430 --> 00:42:27,029
lives and that'll be our entry point it

00:42:25,769 --> 00:42:31,499
needs to be at the root of the zip file

00:42:27,029 --> 00:42:32,910
that we're about to make don't think

00:42:31,499 --> 00:42:35,430
he's under source control but if you

00:42:32,910 --> 00:42:37,680
look on my blog it's um to work with

00:42:35,430 --> 00:42:40,019
open whisk you can say show me the last

00:42:37,680 --> 00:42:43,229
activations the last functions that ran

00:42:40,019 --> 00:42:46,499
and then you can do gave me the logs

00:42:43,229 --> 00:42:48,239
from this activation so this is a script

00:42:46,499 --> 00:42:49,890
that like does one of those and grips it

00:42:48,239 --> 00:42:51,749
cuts it puts it there X args and just

00:42:49,890 --> 00:42:56,459
shows me the most reason the most recent

00:42:51,749 --> 00:42:59,400
log it's a little hacky script so here's

00:42:56,459 --> 00:43:00,599
my code I'm gonna zip it and then I'm

00:42:59,400 --> 00:43:03,660
going to deploy it and the reason that

00:43:00,599 --> 00:43:07,680
I'm dipping it is because I'm using that

00:43:03,660 --> 00:43:09,779
PHP CouchDB library it's currently about

00:43:07,680 --> 00:43:11,969
to fix this currently not available by

00:43:09,779 --> 00:43:14,579
default on open wisk but we've you have

00:43:11,969 --> 00:43:15,779
any composed of dependencies guzzles

00:43:14,579 --> 00:43:18,150
they're by default that covers a lot of

00:43:15,779 --> 00:43:21,089
use cases if you have any dependencies

00:43:18,150 --> 00:43:24,239
then you can just use composer and then

00:43:21,089 --> 00:43:26,219
zip it like this so I'm using zip with

00:43:24,239 --> 00:43:28,199
dash R because I'm going to recurse down

00:43:26,219 --> 00:43:30,329
into the vendor directory you probably

00:43:28,199 --> 00:43:34,680
want to use dash Q here to avoid the

00:43:30,329 --> 00:43:36,269
insane output the robot C and and into

00:43:34,680 --> 00:43:38,519
hook does it I'm putting index dot PHP

00:43:36,269 --> 00:43:40,410
that's where my function is and I'm

00:43:38,519 --> 00:43:41,969
putting the vendor folder because I need

00:43:40,410 --> 00:43:44,339
those dependencies as well and I'm

00:43:41,969 --> 00:43:47,940
including the auto loader so there's the

00:43:44,339 --> 00:43:51,359
zip file created next we'll deploy this

00:43:47,940 --> 00:43:53,130
function so here's a bunch of

00:43:51,359 --> 00:43:56,369
gobbledygook let's work through it

00:43:53,130 --> 00:43:58,529
so BX the IBM cloud used to be called

00:43:56,369 --> 00:44:01,499
bluemix so it's command is still called

00:43:58,529 --> 00:44:03,449
bluemix or bx for short then I'm working

00:44:01,499 --> 00:44:06,930
with open wisk so it's bluemix open

00:44:03,449 --> 00:44:09,420
whisk whisk and i'm going to create an

00:44:06,930 --> 00:44:13,319
action I know that word doesn't say

00:44:09,420 --> 00:44:15,239
create but open whisk if it's not if it

00:44:13,319 --> 00:44:17,489
doesn't exist and you try to update it

00:44:15,239 --> 00:44:18,930
alyssum you mean create so you can write

00:44:17,489 --> 00:44:21,240
update in all your scripts and it will

00:44:18,930 --> 00:44:24,270
always work I love this just

00:44:21,240 --> 00:44:26,790
super-friendly so we're gonna update an

00:44:24,270 --> 00:44:29,220
action this is the name of the action

00:44:26,790 --> 00:44:30,360
guests put comment right when there's a

00:44:29,220 --> 00:44:31,770
guestbook comment it's going to hit this

00:44:30,360 --> 00:44:34,980
endpoint I've called it guestbook

00:44:31,770 --> 00:44:37,320
comment it is a PHP action I need to

00:44:34,980 --> 00:44:37,860
specify the kind when I upload a zip

00:44:37,320 --> 00:44:40,920
file

00:44:37,860 --> 00:44:43,110
if you upload index dot PHP without

00:44:40,920 --> 00:44:48,920
zipping it without dependencies it knows

00:44:43,110 --> 00:44:52,320
what to do if you upload in index yes

00:44:48,920 --> 00:44:54,869
but because I'm zipping it it can't tell

00:44:52,320 --> 00:44:58,350
so will say please run it with PHP I

00:44:54,869 --> 00:45:00,000
would like - - web raw meaning please

00:44:58,350 --> 00:45:01,860
don't try and pass my incoming variables

00:45:00,000 --> 00:45:04,920
I would rather do that myself and know

00:45:01,860 --> 00:45:09,690
where my data came from maybe I'm being

00:45:04,920 --> 00:45:12,060
old-fashioned about that maybe not and

00:45:09,690 --> 00:45:13,500
finally I need to specify where the code

00:45:12,060 --> 00:45:16,950
is so that's the zip file that we just

00:45:13,500 --> 00:45:19,170
created so cool we updated the action in

00:45:16,950 --> 00:45:23,160
fact we've created it but it says we

00:45:19,170 --> 00:45:25,320
flip dos did now I've made it I need to

00:45:23,160 --> 00:45:27,780
set those parameters remember I need to

00:45:25,320 --> 00:45:29,880
connect the database so I'm gonna update

00:45:27,780 --> 00:45:32,400
the action give the name of the action

00:45:29,880 --> 00:45:34,800
and specify some parameters you just do

00:45:32,400 --> 00:45:41,010
that on the command line here and what I

00:45:34,800 --> 00:45:44,130
usually do is this step goes in the

00:45:41,010 --> 00:45:47,250
continuous integration server so I just

00:45:44,130 --> 00:45:49,020
pushed master and Travis says oh yeah ok

00:45:47,250 --> 00:45:50,130
here's the script that I run here are

00:45:49,020 --> 00:45:51,930
the environment variables that already

00:45:50,130 --> 00:45:55,859
set up I'll deploy these parameters with

00:45:51,930 --> 00:45:59,550
these actions or on open wist there are

00:45:55,859 --> 00:46:01,859
also packages so I'm setting a URL there

00:45:59,550 --> 00:46:02,970
this isn't the real URL so then there's

00:46:01,859 --> 00:46:05,520
like a little pause while I set it

00:46:02,970 --> 00:46:06,930
correctly in the other window so this

00:46:05,520 --> 00:46:10,650
sets my real credentials and the whole

00:46:06,930 --> 00:46:12,869
thing works brilliant now I'm gonna get

00:46:10,650 --> 00:46:15,540
the URL of this action so I just say to

00:46:12,869 --> 00:46:18,990
the action what URL e1 and it says this

00:46:15,540 --> 00:46:21,690
mess all of the server list platforms

00:46:18,990 --> 00:46:24,450
offer API gateways where you can set up

00:46:21,690 --> 00:46:27,210
nicer routes and all and some

00:46:24,450 --> 00:46:29,850
authentication there you can also set it

00:46:27,210 --> 00:46:31,680
up so that there's like a disconnect

00:46:29,850 --> 00:46:33,750
between the URL and you can change which

00:46:31,680 --> 00:46:35,050
action it points to so that's really

00:46:33,750 --> 00:46:37,300
good for Bluegreen

00:46:35,050 --> 00:46:39,220
trying to keep it really simple today so

00:46:37,300 --> 00:46:43,119
I'm just copying and pasting the raw web

00:46:39,220 --> 00:46:45,580
URL I often use web hooks just like this

00:46:43,119 --> 00:46:47,200
not sure I should say that I just grab

00:46:45,580 --> 00:46:49,390
the URL and work with it usually from

00:46:47,200 --> 00:46:52,599
the slack bot notification type stuff

00:46:49,390 --> 00:46:55,300
tend to just use this anyway so yay

00:46:52,599 --> 00:46:56,560
let's add a new comment first of all I'm

00:46:55,300 --> 00:47:00,930
going to put that URL that I just copied

00:46:56,560 --> 00:47:05,530
in so that we register it as a web hook

00:47:00,930 --> 00:47:09,010
and then when I add a new comment the

00:47:05,530 --> 00:47:12,460
web hook will webhook here it is yay

00:47:09,010 --> 00:47:18,130
more positive comments there it is it's

00:47:12,460 --> 00:47:20,680
quite hard to show an an incoming web

00:47:18,130 --> 00:47:22,240
hook but we did write to the database in

00:47:20,680 --> 00:47:24,430
our action that we created we wrote a

00:47:22,240 --> 00:47:27,760
Cloudant so we can go and have a look at

00:47:24,430 --> 00:47:30,190
Cloudant and see our data there so

00:47:27,760 --> 00:47:32,410
there's our incoming data this is the

00:47:30,190 --> 00:47:35,440
incoming database holding incoming data

00:47:32,410 --> 00:47:37,480
I'm not confused at all um and there's

00:47:35,440 --> 00:47:39,820
the data we can see it in detail here

00:47:37,480 --> 00:47:42,760
I'm learning so much love lis HTML HTML

00:47:39,820 --> 00:47:44,349
escaping and learning so much and the

00:47:42,760 --> 00:47:47,140
metadata that we added as well with that

00:47:44,349 --> 00:47:48,970
new status so our action received the

00:47:47,140 --> 00:47:51,520
incoming web hook from the guestbook and

00:47:48,970 --> 00:47:55,359
wrote it to the database and sent back

00:47:51,520 --> 00:47:57,280
the success response kind of give you an

00:47:55,359 --> 00:47:59,619
idea of how this would how this would

00:47:57,280 --> 00:48:03,220
work do often also write to queues here

00:47:59,619 --> 00:48:05,530
at this stage so to put the the incoming

00:48:03,220 --> 00:48:08,099
web hook data into a queue and then sort

00:48:05,530 --> 00:48:13,270
of deal with it later that also works

00:48:08,099 --> 00:48:15,970
and you may want to store I'm using

00:48:13,270 --> 00:48:17,349
CouchDB this is cloud and it's the

00:48:15,970 --> 00:48:19,150
product name for capped apache couchdb

00:48:17,349 --> 00:48:22,960
it's an open source document database if

00:48:19,150 --> 00:48:25,480
you've used MongoDB CouchDB is in the

00:48:22,960 --> 00:48:27,040
same sort of umbrella area

00:48:25,480 --> 00:48:28,510
they're both document databases so you

00:48:27,040 --> 00:48:30,790
can store this nested JSON in your

00:48:28,510 --> 00:48:32,290
database it's an even a feel if it feels

00:48:30,790 --> 00:48:33,820
are slightly different that's fine you

00:48:32,290 --> 00:48:36,430
can store a nested JSON you can search

00:48:33,820 --> 00:48:38,080
on nested JSON if you're not using a

00:48:36,430 --> 00:48:39,790
document database then you might want to

00:48:38,080 --> 00:48:43,780
extract some of the fields that you're

00:48:39,790 --> 00:48:45,609
going to want to search on and but if

00:48:43,780 --> 00:48:47,349
you're using Postgres it has brilliant

00:48:45,609 --> 00:48:48,430
JSON support and the new and MySQL's

00:48:47,349 --> 00:48:50,260
have

00:48:48,430 --> 00:48:53,490
probably all the all the JSON support

00:48:50,260 --> 00:48:55,660
that you need for this kind of thing

00:48:53,490 --> 00:48:58,960
awesome one more thing I want to mention

00:48:55,660 --> 00:49:04,030
I have a slide on it so let's find the

00:48:58,960 --> 00:49:08,950
slide is this nope this yes one more

00:49:04,030 --> 00:49:11,800
thing I want to mention is ingre in this

00:49:08,950 --> 00:49:15,370
example I was pushing my receiving code

00:49:11,800 --> 00:49:17,410
to to the cloud making a service

00:49:15,370 --> 00:49:19,000
endpoint a lot of the time the

00:49:17,410 --> 00:49:21,000
development work that we do is on our

00:49:19,000 --> 00:49:25,630
local machines or on virtual machines

00:49:21,000 --> 00:49:28,150
and that's annoying for testing web

00:49:25,630 --> 00:49:30,820
hooks because you need a public URL to

00:49:28,150 --> 00:49:32,470
register so that the incoming web hooks

00:49:30,820 --> 00:49:33,850
server can find your client but your

00:49:32,470 --> 00:49:35,920
clients on a virtual machine on your

00:49:33,850 --> 00:49:39,670
laptop inside the corporate network ok

00:49:35,920 --> 00:49:43,120
so the answer to that problem is called

00:49:39,670 --> 00:49:45,100
end Rock it's a brilliant tool and you

00:49:43,120 --> 00:49:47,170
run it from command line saying which

00:49:45,100 --> 00:49:49,300
port you would like to tunnel from and

00:49:47,170 --> 00:49:53,050
it tunnels out to hang Rock servers

00:49:49,300 --> 00:49:55,750
gives you a public URL and that URL if

00:49:53,050 --> 00:49:58,210
you use it allows incoming web stuff to

00:49:55,750 --> 00:50:00,460
come into your dev server this is

00:49:58,210 --> 00:50:03,460
brilliant for testing web hooks it is

00:50:00,460 --> 00:50:05,710
brilliant for testing websites on phones

00:50:03,460 --> 00:50:07,330
or other devices or asking other people

00:50:05,710 --> 00:50:09,460
in other locations to look at what's on

00:50:07,330 --> 00:50:14,170
your dev machine that's not the good

00:50:09,460 --> 00:50:17,860
part ok the good part is that n grok has

00:50:14,170 --> 00:50:21,340
a dashboard it allows you to inspect in

00:50:17,860 --> 00:50:23,920
detail the headers and body and

00:50:21,340 --> 00:50:25,990
everything of requests and response of

00:50:23,920 --> 00:50:28,690
all the traffic that's coming over here

00:50:25,990 --> 00:50:31,360
I use it a lot just to diagnose what's

00:50:28,690 --> 00:50:36,520
gone wrong between HTTP between two

00:50:31,360 --> 00:50:39,820
things that's also not a good part on

00:50:36,520 --> 00:50:43,000
that dashboard when you inspect the

00:50:39,820 --> 00:50:46,720
request and response there's a button

00:50:43,000 --> 00:50:50,020
and the button says replay so if your

00:50:46,720 --> 00:50:52,810
web hook is the web hook that github

00:50:50,020 --> 00:50:54,340
sends when someone adds a comment to a

00:50:52,810 --> 00:50:57,310
closed pull request on a particular

00:50:54,340 --> 00:50:59,170
open-source project right you create

00:50:57,310 --> 00:51:02,289
that event once capture it in in brock

00:50:59,170 --> 00:51:04,299
and if your response wasn't quite

00:51:02,289 --> 00:51:05,769
effect change the code press the replay

00:51:04,299 --> 00:51:08,259
button change the code press the replay

00:51:05,769 --> 00:51:09,939
button you don't need to do that you

00:51:08,259 --> 00:51:11,349
know it's when you're testing the web

00:51:09,939 --> 00:51:13,929
hook for when a new user has registered

00:51:11,349 --> 00:51:16,390
and it's convoluted but it's really

00:51:13,929 --> 00:51:17,859
frustrating so this is the good part you

00:51:16,390 --> 00:51:19,599
can inspect everything but you can

00:51:17,859 --> 00:51:23,289
replay it and keep changing what you're

00:51:19,599 --> 00:51:25,119
doing so so powerful for lots of aspects

00:51:23,289 --> 00:51:27,849
of web development but especially these

00:51:25,119 --> 00:51:29,229
incoming web hooks key tool I had this

00:51:27,849 --> 00:51:31,359
in my demo and I took it out because I'm

00:51:29,229 --> 00:51:35,309
really using service now I had to leave

00:51:31,359 --> 00:51:39,519
the slide in to give you this tip okay

00:51:35,309 --> 00:51:44,489
by now perhaps you've realized that I am

00:51:39,519 --> 00:51:49,239
a huge fan of web hooks they've made my

00:51:44,489 --> 00:51:50,679
PHP applications dance and sing in a way

00:51:49,239 --> 00:51:52,029
that I'm not sure how I'd have

00:51:50,679 --> 00:51:54,849
implemented a lot of those features

00:51:52,029 --> 00:51:57,279
without this and I think in an

00:51:54,849 --> 00:52:01,109
increasingly componentized and

00:51:57,279 --> 00:52:03,910
event-driven world all those big kind of

00:52:01,109 --> 00:52:06,400
rhetoric software architecture talks

00:52:03,910 --> 00:52:08,439
they tell you how that you should do

00:52:06,400 --> 00:52:12,459
things keep things separate they don't

00:52:08,439 --> 00:52:14,439
really tell you how where props are one

00:52:12,459 --> 00:52:16,329
way you can do that and your web

00:52:14,439 --> 00:52:18,579
developers and it's a post request and

00:52:16,329 --> 00:52:24,789
suddenly all this stuff is within your

00:52:18,579 --> 00:52:26,679
grasp using them at the right time

00:52:24,789 --> 00:52:30,509
knowing when they're useful they're

00:52:26,679 --> 00:52:33,869
useful when one system or component

00:52:30,509 --> 00:52:36,669
needs to notify when an event happens

00:52:33,869 --> 00:52:39,579
another system where polling is less

00:52:36,669 --> 00:52:41,799
useful right so something happens we're

00:52:39,579 --> 00:52:45,219
going to broadcast it it's pub/sub it's

00:52:41,799 --> 00:52:47,789
it's event-driven architectures I've

00:52:45,219 --> 00:52:50,349
tried hard to include what you need as a

00:52:47,789 --> 00:52:51,429
PHP developer and it's all vanilla PHP

00:52:50,349 --> 00:52:54,339
but you can do it in all of your

00:52:51,429 --> 00:52:58,539
frameworks and if you need examples come

00:52:54,339 --> 00:52:59,949
and see me how that implements it I know

00:52:58,539 --> 00:53:02,349
there were a lot of moving parts here

00:52:59,949 --> 00:53:04,119
and I put in a queue as well you're a

00:53:02,349 --> 00:53:05,349
pretty qualified technical audience I

00:53:04,119 --> 00:53:07,359
think you can handle it and this is how

00:53:05,349 --> 00:53:09,339
I really do it I didn't want to bring

00:53:07,359 --> 00:53:11,069
you a dumbed down version yes there's a

00:53:09,339 --> 00:53:14,289
github repo yes it's a simple example

00:53:11,069 --> 00:53:15,630
but it's a pretty good shadow of how I

00:53:14,289 --> 00:53:18,120
would build a more compact

00:53:15,630 --> 00:53:19,470
system as an engineer I'm a developer

00:53:18,120 --> 00:53:21,320
advocate today that's not what I've

00:53:19,470 --> 00:53:25,800
always done

00:53:21,320 --> 00:53:28,410
crucially web hooks their HTTP and just

00:53:25,800 --> 00:53:29,820
the web you understand the web you

00:53:28,410 --> 00:53:32,040
already know how to do this you already

00:53:29,820 --> 00:53:33,090
know how to make a post request from PHP

00:53:32,040 --> 00:53:34,470
if you don't know how to make a post

00:53:33,090 --> 00:53:37,200
request in PHP you need to see me after

00:53:34,470 --> 00:53:39,990
class okay seriously sit come sit in

00:53:37,200 --> 00:53:41,490
front way we'll do it and you know how

00:53:39,990 --> 00:53:42,930
to work with post requests and this will

00:53:41,490 --> 00:53:46,110
enable so many things in your

00:53:42,930 --> 00:53:48,390
applications and with that I just have a

00:53:46,110 --> 00:53:49,410
few links to share and then I'm gonna

00:53:48,390 --> 00:53:52,910
get you to the front of a lunch cube

00:53:49,410 --> 00:53:55,920
right so um please leave feedback the

00:53:52,910 --> 00:53:58,170
organization is using joined in it is a

00:53:55,920 --> 00:54:01,350
brilliant way to let speakers know

00:53:58,170 --> 00:54:02,790
what's working not working please tell

00:54:01,350 --> 00:54:04,650
me what's not working as well because I

00:54:02,790 --> 00:54:05,850
do this all the time so other audiences

00:54:04,650 --> 00:54:09,060
will have to sit through this terrible

00:54:05,850 --> 00:54:10,380
experience if you don't fix me if you

00:54:09,060 --> 00:54:12,840
want to try any of the stuff that I've

00:54:10,380 --> 00:54:15,420
mentioned and check out IBM cloud we

00:54:12,840 --> 00:54:17,520
have three tiers your PHP will run there

00:54:15,420 --> 00:54:19,140
on an ordinary hosting platform you can

00:54:17,520 --> 00:54:21,930
try out the serverless stuff as well we

00:54:19,140 --> 00:54:23,340
have MySQL on our platform and let me

00:54:21,930 --> 00:54:24,930
know how that experience goes because my

00:54:23,340 --> 00:54:26,340
job to improve things I would like to

00:54:24,930 --> 00:54:29,100
improve things for the PHP community

00:54:26,340 --> 00:54:32,370
specifically link to request bin link to

00:54:29,100 --> 00:54:33,960
end rock O'Reilly you're not here this

00:54:32,370 --> 00:54:35,810
year which I would guess means you

00:54:33,960 --> 00:54:38,700
didn't buy enough books last year and

00:54:35,810 --> 00:54:41,370
but I am the author of PHP web services

00:54:38,700 --> 00:54:43,440
which has a chapter on web hooks so you

00:54:41,370 --> 00:54:45,660
might find that useful as well here's

00:54:43,440 --> 00:54:47,970
the repo for the example app here is the

00:54:45,660 --> 00:54:51,110
PHP CouchDB library and with that I'll

00:54:47,970 --> 00:54:51,110

YouTube URL: https://www.youtube.com/watch?v=kBlmEfljrn0


