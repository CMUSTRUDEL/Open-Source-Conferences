Title: PHP UK Conference 2018 - Kat Zien - Performance optimisation: how do I go about it?
Publication date: 2018-03-27
Playlist: PHP UK Conference 2018
Description: 
	Every developer should be confident that their code is efficient and safe to run in production. But it can be hard to get started. What tools to use? What do the graphs mean? What to look at first? In this talk, we will analyse and optimise the performance of a simple PHP application. By demonstrating how to use some of the excellent open source projects such as xdebug, xhprof or ApacheBench, I hope to give you a good idea of where to start with analysing and optimising your PHP code.
Captions: 
	00:00:02,480 --> 00:00:08,059
hello everyone my name is cat thanks for

00:00:05,390 --> 00:00:10,220
coming to my talk I'm a software

00:00:08,059 --> 00:00:12,500
developer I've been doing PHP for give

00:00:10,220 --> 00:00:15,200
or take seven years I also had read like

00:00:12,500 --> 00:00:17,270
Galang I do a bit of Java work I do a

00:00:15,200 --> 00:00:19,430
tiny bit of Ruby a little bit of bash so

00:00:17,270 --> 00:00:21,830
I kind of did a bit of everything and I

00:00:19,430 --> 00:00:23,360
quite like to pick-and-mix I work for a

00:00:21,830 --> 00:00:24,080
company called bright roll and they're

00:00:23,360 --> 00:00:25,640
in Bristol

00:00:24,080 --> 00:00:28,580
I've lived in Bristol for the last

00:00:25,640 --> 00:00:30,860
almost a decade now I'm from Warsaw in

00:00:28,580 --> 00:00:34,460
Poland originally so has my slightly

00:00:30,860 --> 00:00:36,500
different Twitter handle and today I

00:00:34,460 --> 00:00:39,530
want to talk to you about optimizing

00:00:36,500 --> 00:00:40,640
performance as developers when we start

00:00:39,530 --> 00:00:42,800
working on something and when we were

00:00:40,640 --> 00:00:45,410
given a task then we usually probably

00:00:42,800 --> 00:00:47,150
would like to go off and do a bit of

00:00:45,410 --> 00:00:48,739
planning so you either sit down and you

00:00:47,150 --> 00:00:50,510
work out what you want to do or maybe

00:00:48,739 --> 00:00:52,730
you have a proper planning like agile

00:00:50,510 --> 00:00:54,530
style if the sticky notes on the

00:00:52,730 --> 00:00:56,780
whiteboard and then you go and write

00:00:54,530 --> 00:00:58,610
your code and then you run your tests

00:00:56,780 --> 00:01:00,649
and your tests pass and maybe your

00:00:58,610 --> 00:01:02,120
continuous integration pipeline passes

00:01:00,649 --> 00:01:06,140
as well so we're good to go to

00:01:02,120 --> 00:01:08,659
production right well where is

00:01:06,140 --> 00:01:11,179
performance like we most of us don't

00:01:08,659 --> 00:01:13,490
really consider performance day-to-day

00:01:11,179 --> 00:01:15,350
when we're working on stuff and that's a

00:01:13,490 --> 00:01:16,869
very typical scenario and you can't

00:01:15,350 --> 00:01:20,060
really blame developers for that because

00:01:16,869 --> 00:01:23,119
analyzing performance is hard it can be

00:01:20,060 --> 00:01:24,709
tedious and not many people know how to

00:01:23,119 --> 00:01:27,170
get started with it I mean we all know

00:01:24,709 --> 00:01:28,670
the theory of what is it about but how

00:01:27,170 --> 00:01:31,819
do you actually go about it how do you

00:01:28,670 --> 00:01:33,499
actually do it so today I thought I will

00:01:31,819 --> 00:01:35,929
show you a little example of how you can

00:01:33,499 --> 00:01:38,630
go about it I'm by no means an expert

00:01:35,929 --> 00:01:41,420
but this is just me sharing what I've

00:01:38,630 --> 00:01:45,979
learned when I first had to do it for

00:01:41,420 --> 00:01:48,259
work so let's start with the first

00:01:45,979 --> 00:01:50,420
things first why should you care about

00:01:48,259 --> 00:01:52,520
performance I'm not going to spend too

00:01:50,420 --> 00:01:55,340
much time on this because hopefully it's

00:01:52,520 --> 00:01:58,310
obvious to most people in case it's not

00:01:55,340 --> 00:02:02,499
obvious how about this fast is better

00:01:58,310 --> 00:02:05,119
than slow duh memory efficient is good

00:02:02,499 --> 00:02:06,919
saving money is good because you may run

00:02:05,119 --> 00:02:10,160
your app on less servers if they need

00:02:06,919 --> 00:02:13,010
less memory running out of memory in

00:02:10,160 --> 00:02:15,049
production is bad and suddenly running

00:02:13,010 --> 00:02:15,950
out of memory in production is really

00:02:15,049 --> 00:02:18,260
bad

00:02:15,950 --> 00:02:19,750
I mean probably some of you have been

00:02:18,260 --> 00:02:22,129
there I've been there

00:02:19,750 --> 00:02:24,530
or maybe you're just forced to look at

00:02:22,129 --> 00:02:26,660
performance once maybe one of your graph

00:02:24,530 --> 00:02:29,480
starts looking like one of these so the

00:02:26,660 --> 00:02:32,239
top one it shows memory that's that's a

00:02:29,480 --> 00:02:33,830
typical memory leak up there so if you

00:02:32,239 --> 00:02:35,870
have the jaded line at the top and

00:02:33,830 --> 00:02:37,700
that's the GC doing its work it's you're

00:02:35,870 --> 00:02:40,459
still garbage collecting but overall

00:02:37,700 --> 00:02:44,480
over time that line keeps going up and

00:02:40,459 --> 00:02:45,830
it just creeps up over time or maybe you

00:02:44,480 --> 00:02:47,989
had one of those graphs like at the

00:02:45,830 --> 00:02:49,760
bottom with like some spikes in here so

00:02:47,989 --> 00:02:51,080
some requests taking 30 seconds or

00:02:49,760 --> 00:02:53,660
longer and you're wondering why and

00:02:51,080 --> 00:02:55,819
what's going on in here or maybe you had

00:02:53,660 --> 00:03:00,319
the dreaded fatal error allowed memory

00:02:55,819 --> 00:03:01,940
size exhausted or maybe you just want to

00:03:00,319 --> 00:03:04,190
have a look inside the memory and just

00:03:01,940 --> 00:03:08,420
figure out what's inside your code when

00:03:04,190 --> 00:03:10,220
you're running it so that kind of covers

00:03:08,420 --> 00:03:12,290
the whys you know we all have to deal

00:03:10,220 --> 00:03:13,519
with it at some point in our lives in

00:03:12,290 --> 00:03:16,579
terms of when you should look at

00:03:13,519 --> 00:03:18,650
performance optimization you should kind

00:03:16,579 --> 00:03:20,209
of be looking at it every step of the

00:03:18,650 --> 00:03:23,120
way like every stage of this software

00:03:20,209 --> 00:03:24,799
development lifecycle ready so you know

00:03:23,120 --> 00:03:26,060
you should be looking at it in dev when

00:03:24,799 --> 00:03:28,940
you're writing code or maybe you're

00:03:26,060 --> 00:03:30,560
asked to analyze an existing app you

00:03:28,940 --> 00:03:32,090
might have a dedicated load testing

00:03:30,560 --> 00:03:33,560
phase before you go to production so

00:03:32,090 --> 00:03:35,600
after you've done your unit test and

00:03:33,560 --> 00:03:37,220
you're your general testing you might

00:03:35,600 --> 00:03:38,600
have some kind of performance testing

00:03:37,220 --> 00:03:41,150
suite that will run and then see if

00:03:38,600 --> 00:03:43,459
you've improved or maybe degraded

00:03:41,150 --> 00:03:44,959
performance and then even after you're

00:03:43,459 --> 00:03:47,260
done working on your software you should

00:03:44,959 --> 00:03:49,670
still still keep an eye on it over time

00:03:47,260 --> 00:03:51,410
because sometimes issues only come out a

00:03:49,670 --> 00:03:53,750
bit later because maybe the memory leak

00:03:51,410 --> 00:03:56,120
is quite small so you only notice it

00:03:53,750 --> 00:03:57,920
after some time so you should monitor

00:03:56,120 --> 00:03:59,510
your production environment to spot any

00:03:57,920 --> 00:04:04,370
issues and then you can just tackle them

00:03:59,510 --> 00:04:07,370
right away so that covers the when and

00:04:04,370 --> 00:04:09,230
why um what about the what to optimize I

00:04:07,370 --> 00:04:13,459
mean we all kind of have a general idea

00:04:09,230 --> 00:04:15,169
I like when I like look at problems I

00:04:13,459 --> 00:04:17,510
like to start start with this question

00:04:15,169 --> 00:04:18,739
do I really need to do this and that's

00:04:17,510 --> 00:04:20,599
something that it's so easy to forget

00:04:18,739 --> 00:04:22,460
because we're all just like jumping in

00:04:20,599 --> 00:04:23,570
and just started micro optimizing right

00:04:22,460 --> 00:04:25,849
away

00:04:23,570 --> 00:04:27,320
and it is really easy to forget that it

00:04:25,849 --> 00:04:29,720
is important to take the step back and

00:04:27,320 --> 00:04:30,920
first of all ask yourself is

00:04:29,720 --> 00:04:32,270
the thing that I'm looking at do I

00:04:30,920 --> 00:04:34,040
actually need to do it like is this

00:04:32,270 --> 00:04:36,020
redundant code maybe it's dead code

00:04:34,040 --> 00:04:39,890
maybe I don't need to do it more than

00:04:36,020 --> 00:04:41,390
once because of course doing it faster

00:04:39,890 --> 00:04:41,900
is better but not doing anything in the

00:04:41,390 --> 00:04:44,000
first place

00:04:41,900 --> 00:04:47,000
is the best kind of optimization you can

00:04:44,000 --> 00:04:48,920
make so think about that first and that

00:04:47,000 --> 00:04:50,090
applies to you like I said dead code may

00:04:48,920 --> 00:04:53,270
be something that you're doing multiple

00:04:50,090 --> 00:04:55,100
times instead of once so kind of be lazy

00:04:53,270 --> 00:04:56,330
to start with you know if you don't need

00:04:55,100 --> 00:05:01,580
to optimize if you can just get rid of

00:04:56,330 --> 00:05:03,050
something and do that and you know in

00:05:01,580 --> 00:05:04,580
terms of the general things most of us

00:05:03,050 --> 00:05:06,470
have a good idea for what we should look

00:05:04,580 --> 00:05:09,260
for so we want our programs to run

00:05:06,470 --> 00:05:10,940
faster and consume less memory so you

00:05:09,260 --> 00:05:13,340
know we want our garbage collection

00:05:10,940 --> 00:05:16,220
pauses short and infrequent and very

00:05:13,340 --> 00:05:18,290
efficient so we should we know that we

00:05:16,220 --> 00:05:21,110
should may probably measure memory usage

00:05:18,290 --> 00:05:22,910
and execution time in addition to that

00:05:21,110 --> 00:05:25,190
you should probably try and establish

00:05:22,910 --> 00:05:27,620
your maximum minimum and average values

00:05:25,190 --> 00:05:29,720
because it is important to know what

00:05:27,620 --> 00:05:31,250
your apps requirements are and your it's

00:05:29,720 --> 00:05:32,919
assad's and your DevOps will love you

00:05:31,250 --> 00:05:34,640
for that information and very often

00:05:32,919 --> 00:05:36,290
developers just can't answer that

00:05:34,640 --> 00:05:37,640
question when they are asked like you

00:05:36,290 --> 00:05:39,080
know what kind of server does your app

00:05:37,640 --> 00:05:40,550
need you know we just like to check

00:05:39,080 --> 00:05:42,380
stuff over and go well can you just

00:05:40,550 --> 00:05:44,630
deploy that now and then if you can

00:05:42,380 --> 00:05:46,310
actually give your sides or your DevOps

00:05:44,630 --> 00:05:48,470
some kind of information for like I'm

00:05:46,310 --> 00:05:50,210
expecting this app to require this

00:05:48,470 --> 00:05:50,630
amount of memory on average they'll love

00:05:50,210 --> 00:05:52,610
you for that

00:05:50,630 --> 00:05:54,110
and then again you know then want to

00:05:52,610 --> 00:05:55,700
watch out for when you're monitoring

00:05:54,110 --> 00:06:00,979
your production you know what's normal

00:05:55,700 --> 00:06:03,080
and what's maybe slightly off so this is

00:06:00,979 --> 00:06:04,550
a my very there's a bit of caveat to

00:06:03,080 --> 00:06:07,729
this and this is my very unscientific

00:06:04,550 --> 00:06:10,300
graph to try and explain that so we have

00:06:07,729 --> 00:06:13,490
three aspects we have memory or memory

00:06:10,300 --> 00:06:15,320
time and code and we're kind of aiming

00:06:13,490 --> 00:06:16,970
for that zero point here that Unicorn

00:06:15,320 --> 00:06:19,250
where we've got as little memory as we

00:06:16,970 --> 00:06:22,729
can it's just the code that we need and

00:06:19,250 --> 00:06:27,320
as little times as as possible but it is

00:06:22,729 --> 00:06:28,880
important that that's it's important to

00:06:27,320 --> 00:06:30,890
keep in mind that that's zero Unicorn

00:06:28,880 --> 00:06:34,270
point is it's not really something that

00:06:30,890 --> 00:06:36,350
you should necessarily ain't word so

00:06:34,270 --> 00:06:39,260
optimizing performance is more of a bass

00:06:36,350 --> 00:06:40,910
balancing act because it does come at a

00:06:39,260 --> 00:06:43,000
cost and the cost is readability of your

00:06:40,910 --> 00:06:44,770
code and maintainability

00:06:43,000 --> 00:06:46,720
people sometimes just go crazy and they

00:06:44,770 --> 00:06:48,790
write really weird code just because in

00:06:46,720 --> 00:06:50,950
theory it performs faster but it makes

00:06:48,790 --> 00:06:52,720
sense to anybody else and even them

00:06:50,950 --> 00:06:54,490
reading that code three months later

00:06:52,720 --> 00:06:56,380
they're like I don't know what I meant

00:06:54,490 --> 00:06:58,000
here so it is important to keep in mind

00:06:56,380 --> 00:07:00,070
that you do sometimes compromise

00:06:58,000 --> 00:07:02,230
readability if you want to do things

00:07:00,070 --> 00:07:04,330
faster so you shouldn't necessarily aim

00:07:02,230 --> 00:07:06,760
for that zero points like a die hard

00:07:04,330 --> 00:07:08,260
kind of thing you should just stop at a

00:07:06,760 --> 00:07:10,180
sensible point something that is good

00:07:08,260 --> 00:07:12,970
enough for production or for production

00:07:10,180 --> 00:07:16,169
it's probably good to stop at so don't

00:07:12,970 --> 00:07:20,080
necessarily expect to get to the Unicorn

00:07:16,169 --> 00:07:22,270
in terms of again the what there are a

00:07:20,080 --> 00:07:24,340
few sort of typical things that we

00:07:22,270 --> 00:07:26,110
probably already know when we think

00:07:24,340 --> 00:07:28,780
about performance we've got the memory

00:07:26,110 --> 00:07:30,490
leaks which is a potential issue so your

00:07:28,780 --> 00:07:32,350
amount the amount of memory your program

00:07:30,490 --> 00:07:34,510
uses may increase me maybe increasing

00:07:32,350 --> 00:07:37,030
over time or maybe it is that your app

00:07:34,510 --> 00:07:38,620
is just using more memory and it could

00:07:37,030 --> 00:07:40,960
use a bit less and you just want to make

00:07:38,620 --> 00:07:44,320
it use less memory and that might be

00:07:40,960 --> 00:07:46,510
caused by you know leftover open file

00:07:44,320 --> 00:07:48,190
handles your overflowing buffers that

00:07:46,510 --> 00:07:50,560
kind of thing

00:07:48,190 --> 00:07:51,850
timeouts so your app might just be stuck

00:07:50,560 --> 00:07:54,880
waiting on something and you don't know

00:07:51,850 --> 00:07:56,890
why or what it's waiting for concurrency

00:07:54,880 --> 00:07:58,390
if your program is concurrent it's not

00:07:56,890 --> 00:08:00,669
something that you typically do in PHP

00:07:58,390 --> 00:08:01,960
but you can so if your PHP is concurrent

00:08:00,669 --> 00:08:03,610
then you've got all the lovely issues

00:08:01,960 --> 00:08:05,560
that come with concurrency like race

00:08:03,610 --> 00:08:07,090
conditions and thread safety and

00:08:05,560 --> 00:08:10,180
deadlocks and live locks so that's

00:08:07,090 --> 00:08:12,040
something to watch out for the tip

00:08:10,180 --> 00:08:14,400
normal redundancy and inefficiency so

00:08:12,040 --> 00:08:17,530
doing them something more than once and

00:08:14,400 --> 00:08:19,630
also dead codes and unused libraries and

00:08:17,530 --> 00:08:21,490
you might think that's not really a big

00:08:19,630 --> 00:08:23,380
issue but it will affect for example

00:08:21,490 --> 00:08:25,930
your deployment speed your compiler

00:08:23,380 --> 00:08:27,520
builds step time you're a compilation

00:08:25,930 --> 00:08:29,500
speed because if you're just pulling

00:08:27,520 --> 00:08:31,180
some kind of libraries I don't really

00:08:29,500 --> 00:08:32,620
use then you're still taking that time

00:08:31,180 --> 00:08:35,140
to do it and then you're not using it so

00:08:32,620 --> 00:08:38,589
even stuff like deploy build time might

00:08:35,140 --> 00:08:40,750
matter to you and there's obviously a

00:08:38,589 --> 00:08:42,760
lot more issues around your server

00:08:40,750 --> 00:08:44,560
config you know the where you run your

00:08:42,760 --> 00:08:46,240
app how you split it but I'm not gonna

00:08:44,560 --> 00:08:47,890
focus on that today so you could do

00:08:46,240 --> 00:08:49,720
things like op cache settings

00:08:47,890 --> 00:08:51,130
optimizations you could tweak your and

00:08:49,720 --> 00:08:52,630
unix and apache settings and that kind

00:08:51,130 --> 00:08:54,370
of thing but i just wanted to focus

00:08:52,630 --> 00:08:57,270
today on there specifically the code

00:08:54,370 --> 00:08:57,270
issues that you might have

00:08:58,380 --> 00:09:03,310
and then when you start googling you

00:09:01,030 --> 00:09:05,830
might find some sane advice in the

00:09:03,310 --> 00:09:07,540
internets and you know that these are

00:09:05,830 --> 00:09:09,580
what I would say just general good

00:09:07,540 --> 00:09:11,140
coding habits like sort of the ones the

00:09:09,580 --> 00:09:13,360
two ones at the top and the in the same

00:09:11,140 --> 00:09:14,980
ones so it's things like you know if you

00:09:13,360 --> 00:09:16,600
have a condition in your for-loop don't

00:09:14,980 --> 00:09:18,370
evaluate that every time if you're doing

00:09:16,600 --> 00:09:19,750
something you know if you have a count

00:09:18,370 --> 00:09:20,950
in there or something don't evaluate

00:09:19,750 --> 00:09:22,840
that every time you look for the

00:09:20,950 --> 00:09:26,050
function do that beforehand and then

00:09:22,840 --> 00:09:28,090
just use a constant in the loop body or

00:09:26,050 --> 00:09:30,760
in the loop condition that's pretty

00:09:28,090 --> 00:09:32,560
sensible watch out for DB queries that's

00:09:30,760 --> 00:09:35,470
kind of very common if you've got really

00:09:32,560 --> 00:09:37,030
long if and else ladders and really long

00:09:35,470 --> 00:09:38,860
if statements or else statements and

00:09:37,030 --> 00:09:40,450
really long blocks and then maybe

00:09:38,860 --> 00:09:42,340
somewhere inside you're doing is select

00:09:40,450 --> 00:09:43,510
something from the database that you

00:09:42,340 --> 00:09:45,430
could have just done at the beginning

00:09:43,510 --> 00:09:46,750
for multiple IDs instead of just looking

00:09:45,430 --> 00:09:48,910
through the IDs and doing that one by

00:09:46,750 --> 00:09:51,850
one something that you know it's easy to

00:09:48,910 --> 00:09:55,510
miss and then you get into the things

00:09:51,850 --> 00:09:58,570
like you know use is empty array instead

00:09:55,510 --> 00:10:00,130
of count array equals zero zero or use a

00:09:58,570 --> 00:10:01,660
triple equal instead of string compare

00:10:00,130 --> 00:10:03,430
for string comparison because it's

00:10:01,660 --> 00:10:04,960
faster and then use single quotes

00:10:03,430 --> 00:10:07,210
instead of double quotes when you're not

00:10:04,960 --> 00:10:09,850
concatenate is my absolute favorite and

00:10:07,210 --> 00:10:11,680
then you know people say oh use reg X

00:10:09,850 --> 00:10:14,110
instead of some crazy string mangling

00:10:11,680 --> 00:10:15,880
like that you do manually but then don't

00:10:14,110 --> 00:10:17,620
use reg X because it's less efficient

00:10:15,880 --> 00:10:22,630
than the native PHP functions so you're

00:10:17,620 --> 00:10:24,280
all like what and coming back to the

00:10:22,630 --> 00:10:27,550
list of issues none of those things

00:10:24,280 --> 00:10:29,320
actually address any of this

00:10:27,550 --> 00:10:32,650
none of those tips will help us actually

00:10:29,320 --> 00:10:33,790
sort solve the easier issues and on one

00:10:32,650 --> 00:10:35,230
hand you don't want to ignore these

00:10:33,790 --> 00:10:37,060
things because they are just good coding

00:10:35,230 --> 00:10:40,060
habits you might as well follow the good

00:10:37,060 --> 00:10:41,860
habits and even if they might seem

00:10:40,060 --> 00:10:43,630
insignificant on their own sometimes a

00:10:41,860 --> 00:10:46,540
lot of tiny optimizations might actually

00:10:43,630 --> 00:10:48,850
add up to something actually making a

00:10:46,540 --> 00:10:53,380
big difference so don't necessarily

00:10:48,850 --> 00:10:54,880
ignore them but and it this kind of

00:10:53,380 --> 00:10:56,560
stuff might matter if you're not

00:10:54,880 --> 00:10:57,940
actually addressing an actual problem

00:10:56,560 --> 00:11:00,580
with a memory leak maybe you're just

00:10:57,940 --> 00:11:01,840
trying to squeeze out like the last bit

00:11:00,580 --> 00:11:03,880
of performance juice out of your app

00:11:01,840 --> 00:11:06,040
then yeah maybe those tiny optimizations

00:11:03,880 --> 00:11:07,690
will actually make a difference but you

00:11:06,040 --> 00:11:11,070
know is it really how most of us should

00:11:07,690 --> 00:11:11,070
go about optimizing performance

00:11:11,150 --> 00:11:16,800
and just to show you this so these are

00:11:14,580 --> 00:11:18,390
some stats taken from I've got a link

00:11:16,800 --> 00:11:21,450
here I've shared the sides already so

00:11:18,390 --> 00:11:23,070
you can check out the whole website so

00:11:21,450 --> 00:11:26,040
this is from themo Mattox

00:11:23,070 --> 00:11:27,990
websites so he runs PC benchmarks live

00:11:26,040 --> 00:11:30,210
on his server the server is running PHP

00:11:27,990 --> 00:11:31,830
5.3 but it doesn't really matter because

00:11:30,210 --> 00:11:33,840
it's kind of the same thing in seven

00:11:31,830 --> 00:11:36,120
even and he's just compared to the

00:11:33,840 --> 00:11:37,260
typical things that you find on the

00:11:36,120 --> 00:11:41,220
Internet and just to see if this is

00:11:37,260 --> 00:11:44,820
actually true so this is the single and

00:11:41,220 --> 00:11:46,560
double quote myth and you can see here

00:11:44,820 --> 00:11:48,480
that you're only actually shaving off

00:11:46,560 --> 00:11:50,460
two milliseconds I mean that's a drop in

00:11:48,480 --> 00:11:54,600
the ocean that's not really causing your

00:11:50,460 --> 00:11:56,310
memory issues and there are some other

00:11:54,600 --> 00:11:58,380
ones so you know a lot of us might

00:11:56,310 --> 00:12:00,150
wonder like oh is variable before the

00:11:58,380 --> 00:12:01,830
constant you know should the variable go

00:12:00,150 --> 00:12:03,600
before the constant you know on it on an

00:12:01,830 --> 00:12:05,840
equals comparison or the other way

00:12:03,600 --> 00:12:09,200
around no difference whatsoever

00:12:05,840 --> 00:12:12,840
milliseconds you know if you're doing

00:12:09,200 --> 00:12:14,910
haystack zero is N or string position to

00:12:12,840 --> 00:12:17,850
just check the first character no

00:12:14,910 --> 00:12:19,710
difference string replace compared to

00:12:17,850 --> 00:12:21,540
preg replace only three milliseconds

00:12:19,710 --> 00:12:26,790
difference I mean that's not a huge

00:12:21,540 --> 00:12:27,690
difference and all of those tips what

00:12:26,790 --> 00:12:30,420
they all have in common is that they are

00:12:27,690 --> 00:12:33,170
all micro optimizations so I would say

00:12:30,420 --> 00:12:36,510
99% of the time ignore them every time

00:12:33,170 --> 00:12:37,950
it is worth looking into those things

00:12:36,510 --> 00:12:40,500
when you have evidence that they are

00:12:37,950 --> 00:12:43,410
actually causing problems or they are a

00:12:40,500 --> 00:12:45,120
bottleneck and you should oh you should

00:12:43,410 --> 00:12:47,010
try to micro optimize maybe bits of your

00:12:45,120 --> 00:12:49,050
code not the entire app I mean don't go

00:12:47,010 --> 00:12:50,730
off and start changing its double quotes

00:12:49,050 --> 00:12:53,070
the single quotes everywhere and that's

00:12:50,730 --> 00:12:54,810
that's probably not the way to go it's

00:12:53,070 --> 00:12:56,580
probably not worth spending time on or

00:12:54,810 --> 00:12:58,590
arguing about I mean I've had so many

00:12:56,580 --> 00:13:02,130
pointless it's like vim vim versus Emacs

00:12:58,590 --> 00:13:03,450
like which quotes should you use and you

00:13:02,130 --> 00:13:04,890
should always benchmark and measure to

00:13:03,450 --> 00:13:06,300
prove that you're actually improving

00:13:04,890 --> 00:13:07,770
situations don't just do this because

00:13:06,300 --> 00:13:09,060
you've read about it on the internet

00:13:07,770 --> 00:13:10,410
somebody on Stack Overflow five years

00:13:09,060 --> 00:13:12,630
ago said that that's what you should do

00:13:10,410 --> 00:13:13,710
now always measure always prove that

00:13:12,630 --> 00:13:16,680
you're actually doing something right

00:13:13,710 --> 00:13:18,210
and most importantly don't miss the real

00:13:16,680 --> 00:13:19,200
bottleneck like don't focus on these

00:13:18,210 --> 00:13:22,260
things because there's probably some

00:13:19,200 --> 00:13:24,030
more important issues to tackle so focus

00:13:22,260 --> 00:13:26,210
on the whole paths in your code or whole

00:13:24,030 --> 00:13:28,500
areas

00:13:26,210 --> 00:13:30,600
well that's all good and well I'm good

00:13:28,500 --> 00:13:33,450
focus on the whole paps in there yes if

00:13:30,600 --> 00:13:34,950
you know how but the how is what most

00:13:33,450 --> 00:13:36,450
people get stuck on and I got stuck on

00:13:34,950 --> 00:13:39,000
that as well

00:13:36,450 --> 00:13:42,090
if you already know how that's all well

00:13:39,000 --> 00:13:45,600
and good but really how how do I know

00:13:42,090 --> 00:13:48,240
how do I know what to improve how do I

00:13:45,600 --> 00:13:50,790
know my how my app is doing how do I

00:13:48,240 --> 00:13:52,320
gain that visibility into my code how do

00:13:50,790 --> 00:13:54,090
I know what my app can handle in

00:13:52,320 --> 00:13:56,280
production how do I know it's not

00:13:54,090 --> 00:13:58,830
leaking memory how do I prove that no

00:13:56,280 --> 00:14:00,330
will I run out of memory or maybe I am

00:13:58,830 --> 00:14:01,770
over provisioning and maybe my app

00:14:00,330 --> 00:14:04,410
doesn't need the massive server that is

00:14:01,770 --> 00:14:06,420
running on how do I prove my guess is

00:14:04,410 --> 00:14:09,480
how do I prove my theories and the

00:14:06,420 --> 00:14:11,490
general answer is of course measure but

00:14:09,480 --> 00:14:14,340
then how do you measure and what do you

00:14:11,490 --> 00:14:15,780
measure and how often do you measure so

00:14:14,340 --> 00:14:17,580
I was there myself I had all these

00:14:15,780 --> 00:14:19,140
questions so I thought it might be

00:14:17,580 --> 00:14:20,580
useful to do a practical example of

00:14:19,140 --> 00:14:22,980
maybe how you could go about answering

00:14:20,580 --> 00:14:27,270
those questions and how do you actually

00:14:22,980 --> 00:14:29,640
go about doing it so let's start with

00:14:27,270 --> 00:14:32,040
the tools and this is potentially the

00:14:29,640 --> 00:14:33,180
first very confusing very / overwhelming

00:14:32,040 --> 00:14:35,070
things when you're starting out because

00:14:33,180 --> 00:14:36,960
there are so many of them and people who

00:14:35,070 --> 00:14:38,940
tell you use this use that is this and

00:14:36,960 --> 00:14:41,400
you're like well but what is everything

00:14:38,940 --> 00:14:43,970
for it like how do I you know why when

00:14:41,400 --> 00:14:46,350
should I use this when should I use that

00:14:43,970 --> 00:14:48,090
and it is important to know what each

00:14:46,350 --> 00:14:49,380
each tool is useful for like what's the

00:14:48,090 --> 00:14:51,510
purpose of it over to and I've kind of

00:14:49,380 --> 00:14:52,920
tried to group them here by roughly what

00:14:51,510 --> 00:14:55,170
the purpose is so you've got your

00:14:52,920 --> 00:14:57,360
monitoring tools at the top those things

00:14:55,170 --> 00:15:01,920
like data dog New Relic Blackfyre IO

00:14:57,360 --> 00:15:04,890
your typical Elks tag graphite loads of

00:15:01,920 --> 00:15:06,420
those things out there and you might be

00:15:04,890 --> 00:15:07,590
lucky enough to actually already have

00:15:06,420 --> 00:15:09,000
something like that set up for your

00:15:07,590 --> 00:15:11,400
system so you may already have some

00:15:09,000 --> 00:15:13,260
performance data available you know if

00:15:11,400 --> 00:15:15,090
you've got something monitoring your

00:15:13,260 --> 00:15:17,160
memory usage your CPU usage for example

00:15:15,090 --> 00:15:19,140
you've already got some data and I will

00:15:17,160 --> 00:15:20,340
give you the bigger picture the idea of

00:15:19,140 --> 00:15:22,620
you know how your app is doing in

00:15:20,340 --> 00:15:24,510
general how it's doing over time has it

00:15:22,620 --> 00:15:26,520
gotten slower hasn't gotten faster and

00:15:24,510 --> 00:15:28,110
you might be able to tell from those

00:15:26,520 --> 00:15:29,310
graphs and from those tools if there is

00:15:28,110 --> 00:15:30,690
anything that you need to worry about

00:15:29,310 --> 00:15:32,190
you know if you see spikes if you see

00:15:30,690 --> 00:15:33,720
something worrying then you probably

00:15:32,190 --> 00:15:36,120
know that you should you should look at

00:15:33,720 --> 00:15:38,240
your app if you don't have any

00:15:36,120 --> 00:15:39,709
production data available you could use

00:15:38,240 --> 00:15:41,209
the load testing or the benchmarking

00:15:39,709 --> 00:15:43,490
tools and those are basically tools that

00:15:41,209 --> 00:15:45,830
will generate the load for you and they

00:15:43,490 --> 00:15:48,440
there is a million of them I've only

00:15:45,830 --> 00:15:50,000
listed here a bunch of them my favorite

00:15:48,440 --> 00:15:52,160
one is go work for simple things that's

00:15:50,000 --> 00:15:54,350
a go up and it's just a really simple

00:15:52,160 --> 00:15:55,970
simple to use app there are some more

00:15:54,350 --> 00:15:58,220
complicated ones that take a little bit

00:15:55,970 --> 00:16:00,410
more time to learn and use so things

00:15:58,220 --> 00:16:02,750
like jmeter or Gatling and Taurus or

00:16:00,410 --> 00:16:04,160
Apache bench they allow you to do a lot

00:16:02,750 --> 00:16:05,660
more they allow you to customize your

00:16:04,160 --> 00:16:08,089
load they allow you to specify different

00:16:05,660 --> 00:16:09,620
parameters to vary the load that sort of

00:16:08,089 --> 00:16:13,490
thing but they are a little bit more

00:16:09,620 --> 00:16:15,260
difficult to set up and sometimes you

00:16:13,490 --> 00:16:18,230
know just a really big loop in your code

00:16:15,260 --> 00:16:19,910
like four at ten thousand iterations do

00:16:18,230 --> 00:16:21,020
this that's also load generation you

00:16:19,910 --> 00:16:27,170
know so you can actually just do it

00:16:21,020 --> 00:16:28,190
yourself and the goal here like the goal

00:16:27,170 --> 00:16:30,140
of those load testing and benchmarking

00:16:28,190 --> 00:16:31,670
tool benchmarking tools is really just

00:16:30,140 --> 00:16:33,350
to avoid sitting there and refreshing

00:16:31,670 --> 00:16:34,550
your have multiple times especially you

00:16:33,350 --> 00:16:36,050
want loads of data like you're not gonna

00:16:34,550 --> 00:16:38,930
sit there and press the refresh button

00:16:36,050 --> 00:16:42,080
10,000 times so that's what those tools

00:16:38,930 --> 00:16:43,970
are for but monitoring and benchmarking

00:16:42,080 --> 00:16:46,370
will only give you a higher level view

00:16:43,970 --> 00:16:47,660
and and sort of higher level data about

00:16:46,370 --> 00:16:50,810
your app they won't really tell you

00:16:47,660 --> 00:16:52,399
what's going on inside your app and so

00:16:50,810 --> 00:16:54,140
for it to dig deeper you need more

00:16:52,399 --> 00:16:56,450
detailed information you need things

00:16:54,140 --> 00:16:58,399
like low level Stax stats and stack

00:16:56,450 --> 00:17:00,380
traces and your memory usage and

00:16:58,399 --> 00:17:02,540
execution time for every single function

00:17:00,380 --> 00:17:04,610
in your code ideally so you need

00:17:02,540 --> 00:17:06,980
something called a profiler and then

00:17:04,610 --> 00:17:09,319
usually profilers will do gent like

00:17:06,980 --> 00:17:11,360
gather the data for you but they they

00:17:09,319 --> 00:17:12,470
will just spit out a bunch of files that

00:17:11,360 --> 00:17:14,120
when you open those files they make

00:17:12,470 --> 00:17:16,010
absolutely no sense to you so you

00:17:14,120 --> 00:17:17,480
usually need some visualization on top

00:17:16,010 --> 00:17:21,860
of it to actually help you make sense of

00:17:17,480 --> 00:17:24,380
all the data that you have so how does

00:17:21,860 --> 00:17:25,910
that look for PHP well first are there's

00:17:24,380 --> 00:17:28,339
none of this is built into the language

00:17:25,910 --> 00:17:29,870
which is great I mean compared to gogo

00:17:28,339 --> 00:17:31,160
has most of these tools just shipped

00:17:29,870 --> 00:17:32,840
with the language so actually when you

00:17:31,160 --> 00:17:35,000
install go you install all those tools

00:17:32,840 --> 00:17:36,620
with PHP when you install PHP you

00:17:35,000 --> 00:17:39,290
install PHP you don't have any any

00:17:36,620 --> 00:17:42,110
profilers available you could roll your

00:17:39,290 --> 00:17:43,460
own I mean to be honest I'm not against

00:17:42,110 --> 00:17:45,230
just doing micro time at the beginning

00:17:43,460 --> 00:17:46,760
micro time at the end and then just to

00:17:45,230 --> 00:17:48,500
subtract them that's how long my

00:17:46,760 --> 00:17:50,670
function take I mean for a quick and

00:17:48,500 --> 00:17:52,380
easy and quick and dirty

00:17:50,670 --> 00:17:54,180
sort of measurements I think that's

00:17:52,380 --> 00:17:55,380
completely fine but if you wanted

00:17:54,180 --> 00:17:57,840
something you know you're obviously not

00:17:55,380 --> 00:17:59,580
going to do this across your entire app

00:17:57,840 --> 00:18:01,650
so to do that you kind of needs a more

00:17:59,580 --> 00:18:04,250
professional tool and most of those

00:18:01,650 --> 00:18:07,050
tools are available as PHP extensions

00:18:04,250 --> 00:18:08,460
luckily you don't need much extension

00:18:07,050 --> 00:18:09,870
food to get going I mean I'm not an

00:18:08,460 --> 00:18:12,810
extensions expert and I managed to

00:18:09,870 --> 00:18:15,450
install a lot of them it's quite easy so

00:18:12,810 --> 00:18:17,940
just to recap this is how you can

00:18:15,450 --> 00:18:18,780
install PHP extensions I'll probably go

00:18:17,940 --> 00:18:21,570
through this pretty quickly cuz

00:18:18,780 --> 00:18:23,100
hopefully you you know this your mileage

00:18:21,570 --> 00:18:25,800
may vary because obviously depending on

00:18:23,100 --> 00:18:27,240
what platform you're in how you know how

00:18:25,800 --> 00:18:28,980
old is your operating system that kind

00:18:27,240 --> 00:18:33,000
of thing some packages may or may not be

00:18:28,980 --> 00:18:34,950
available the you know that actually

00:18:33,000 --> 00:18:36,540
most convenient way these days for me

00:18:34,950 --> 00:18:38,130
because I run a Mac is just to use

00:18:36,540 --> 00:18:40,110
homebrew if I can for all the extensions

00:18:38,130 --> 00:18:41,820
so if homebrew or whatever package

00:18:40,110 --> 00:18:44,250
manager you have like yum apt-get

00:18:41,820 --> 00:18:44,820
whatever your distribution is you just

00:18:44,250 --> 00:18:47,160
do that

00:18:44,820 --> 00:18:49,260
install name and boom done your

00:18:47,160 --> 00:18:52,350
extension is on your system you can use

00:18:49,260 --> 00:18:53,910
pickle which is part of pear and so once

00:18:52,350 --> 00:18:55,590
you install pickle on your system you

00:18:53,910 --> 00:19:00,000
can do pecola install name of the

00:18:55,590 --> 00:19:01,380
package that should work the S word or

00:19:00,000 --> 00:19:02,880
you could compile from source and that's

00:19:01,380 --> 00:19:04,080
actually not as scary as it sounds so

00:19:02,880 --> 00:19:06,180
what you have to do is just get your

00:19:04,080 --> 00:19:08,880
source code down so usually get clone or

00:19:06,180 --> 00:19:10,950
something go into that directory you

00:19:08,880 --> 00:19:13,350
your you run something called PHP eyes

00:19:10,950 --> 00:19:15,000
and then you run something called

00:19:13,350 --> 00:19:16,530
configure this is kind of like

00:19:15,000 --> 00:19:17,850
installing see apps who ever did see

00:19:16,530 --> 00:19:20,940
development this will sound familiar

00:19:17,850 --> 00:19:22,290
because PHP is written in C any options

00:19:20,940 --> 00:19:23,760
for the extensions usually the readme

00:19:22,290 --> 00:19:25,170
for the extension will have those

00:19:23,760 --> 00:19:26,490
instructions there so always check out

00:19:25,170 --> 00:19:29,880
the readme this is just like a

00:19:26,490 --> 00:19:32,010
generalized list and you do make make

00:19:29,880 --> 00:19:34,290
install and then you need to not forget

00:19:32,010 --> 00:19:36,990
to put your any file in your app each

00:19:34,290 --> 00:19:39,570
piece like comedy in each directory

00:19:36,990 --> 00:19:42,180
because that's how you actually load the

00:19:39,570 --> 00:19:43,620
extension into PHP so we tell PHP use

00:19:42,180 --> 00:19:46,290
that extension and you can specify your

00:19:43,620 --> 00:19:48,540
any values there if you do pakil or brew

00:19:46,290 --> 00:19:49,680
those any files are usually created for

00:19:48,540 --> 00:19:52,410
you automatically so you can just edit

00:19:49,680 --> 00:19:55,650
them on the Mac I believe it's user

00:19:52,410 --> 00:19:57,480
local et Cie PHP version and then

00:19:55,650 --> 00:20:00,000
confidence where your files live if

00:19:57,480 --> 00:20:01,380
you're using brew homebrew which to be

00:20:00,000 --> 00:20:05,230
honest I recommend it because it's just

00:20:01,380 --> 00:20:08,049
that the least painful painful

00:20:05,230 --> 00:20:10,429
so let's go get ourselves a profiler

00:20:08,049 --> 00:20:12,429
this is a list of the ones that I found

00:20:10,429 --> 00:20:15,679
there is probably a lot more in github

00:20:12,429 --> 00:20:17,269
the first one APD that used to be an

00:20:15,679 --> 00:20:19,039
extension used for profiling and

00:20:17,269 --> 00:20:21,740
debugging but it is actually no longer

00:20:19,039 --> 00:20:25,070
maintained I think the last main paned

00:20:21,740 --> 00:20:26,510
update was 2004 2007 so I kind of cross

00:20:25,070 --> 00:20:28,970
that out because I think we should just

00:20:26,510 --> 00:20:31,220
forget about it the two most popular

00:20:28,970 --> 00:20:33,919
ones and I heard about them is XD

00:20:31,220 --> 00:20:35,390
buggers and exit proof and a lot of

00:20:33,919 --> 00:20:37,149
people wonder like what's the difference

00:20:35,390 --> 00:20:39,950
between them and which one should I pick

00:20:37,149 --> 00:20:42,889
so both are installed as PHP extensions

00:20:39,950 --> 00:20:44,149
they are both available via homebrew for

00:20:42,889 --> 00:20:46,190
example which is slightly easier I'm

00:20:44,149 --> 00:20:49,340
pretty sure like apt-get has packages as

00:20:46,190 --> 00:20:51,919
well and the deal with that is that in

00:20:49,340 --> 00:20:55,240
the old days of p2p 5 and old some of us

00:20:51,919 --> 00:20:57,500
are still in on 55 but in the old days

00:20:55,240 --> 00:20:59,419
xdebug didn't have memory profiling

00:20:57,500 --> 00:21:01,519
built into it so you could do your step

00:20:59,419 --> 00:21:03,019
debugging and you could do some

00:21:01,519 --> 00:21:05,059
profiling but you didn't have the memory

00:21:03,019 --> 00:21:07,070
information or as xh proof which was

00:21:05,059 --> 00:21:08,690
developed by facebook and then open

00:21:07,070 --> 00:21:10,010
sourced that gave you all the memory

00:21:08,690 --> 00:21:14,570
information so you kind of have to use

00:21:10,010 --> 00:21:15,950
both but since PHP 7 facebook is no

00:21:14,570 --> 00:21:18,139
longer maintaining exit proof because

00:21:15,950 --> 00:21:20,330
they've moved from Zend to a to g vm so

00:21:18,139 --> 00:21:24,470
they've abandoned that and luckily some

00:21:20,330 --> 00:21:27,440
kind souls created p2p 7 for X of the

00:21:24,470 --> 00:21:29,210
exit or off extension so the - probably

00:21:27,440 --> 00:21:30,529
most popular ones are tied ways and

00:21:29,210 --> 00:21:31,760
again I've put links here I've shared

00:21:30,529 --> 00:21:33,830
the slides so you can that click through

00:21:31,760 --> 00:21:35,240
it and find it on github so Tideway is

00:21:33,830 --> 00:21:36,919
exit rough extension which kind of is

00:21:35,240 --> 00:21:38,630
now just becoming their own product in

00:21:36,919 --> 00:21:40,399
their own thing and they've slightly

00:21:38,630 --> 00:21:42,830
modified the original exit broth or

00:21:40,399 --> 00:21:44,029
there's this Chinese person on github

00:21:42,830 --> 00:21:45,590
that I will probably butch the name so

00:21:44,029 --> 00:21:48,110
I'm not gonna attempt to read that but

00:21:45,590 --> 00:21:50,419
that that Chinese person has created a

00:21:48,110 --> 00:21:53,169
fork for p2p 7 which is actually very

00:21:50,419 --> 00:21:55,519
very close to the original XH profit and

00:21:53,169 --> 00:21:57,080
in terms of when you should use these

00:21:55,519 --> 00:21:58,789
like they are they are absolutely not

00:21:57,080 --> 00:22:00,380
mutually exclusive so you can have both

00:21:58,789 --> 00:22:02,720
installed on your system and you can use

00:22:00,380 --> 00:22:04,760
both at the same time the one thing to

00:22:02,720 --> 00:22:06,380
remember is X debug should only ever be

00:22:04,760 --> 00:22:09,080
run in development I mean it will make

00:22:06,380 --> 00:22:11,809
your app a lot slower if you use it so

00:22:09,080 --> 00:22:13,520
don't ever run it on production exit

00:22:11,809 --> 00:22:15,169
proof can be used on production if you

00:22:13,520 --> 00:22:16,800
had to it's actually it's it's got such

00:22:15,169 --> 00:22:18,030
a small footprint that it won't really

00:22:16,800 --> 00:22:19,530
the performance of your app so that's

00:22:18,030 --> 00:22:21,300
something to keep in mind if you have to

00:22:19,530 --> 00:22:23,690
use it or use something on production

00:22:21,300 --> 00:22:26,400
it's probably gonna be excess profit and

00:22:23,690 --> 00:22:28,770
then there are other things like the

00:22:26,400 --> 00:22:30,870
memory profiler and the mem info there

00:22:28,770 --> 00:22:32,460
are two other extensions that are that

00:22:30,870 --> 00:22:34,350
also allow you to profile your memory

00:22:32,460 --> 00:22:36,690
we're gonna have a look at PHP memens

00:22:34,350 --> 00:22:38,670
info in a bit and there is probably a

00:22:36,690 --> 00:22:44,450
lot more but I just couldn't didn't have

00:22:38,670 --> 00:22:46,560
time to go through all of them so

00:22:44,450 --> 00:22:48,000
guessing really isn't enough like I mean

00:22:46,560 --> 00:22:49,290
you might have some ideas to start with

00:22:48,000 --> 00:22:51,270
for what might be causing your issues

00:22:49,290 --> 00:22:53,150
but you really need to work out and

00:22:51,270 --> 00:22:55,200
prove what's going on in your app so

00:22:53,150 --> 00:22:58,980
doing Institue do some Diagnostics

00:22:55,200 --> 00:23:00,840
before you do the diagnosis now so I

00:22:58,980 --> 00:23:02,610
tried to find a real-life example to do

00:23:00,840 --> 00:23:04,890
that demo on and then anything I worked

00:23:02,610 --> 00:23:06,090
on at work would just be too big and it

00:23:04,890 --> 00:23:07,830
would just take way too much time to

00:23:06,090 --> 00:23:10,110
explain what it does and I will probably

00:23:07,830 --> 00:23:11,790
bore you to death and I also didn't want

00:23:10,110 --> 00:23:13,620
to give you an example with like foo and

00:23:11,790 --> 00:23:15,300
bar and Class A and Class B because

00:23:13,620 --> 00:23:17,310
that's not really how real life is I

00:23:15,300 --> 00:23:18,840
mean we can all optimize a 5 long feed

00:23:17,310 --> 00:23:21,450
for you but that's just not what real

00:23:18,840 --> 00:23:24,180
life is like so then a friend of mine

00:23:21,450 --> 00:23:26,460
mut that you probably know you probably

00:23:24,180 --> 00:23:28,680
know grunty he tweeted about his side

00:23:26,460 --> 00:23:30,060
project and I just randomly had a look

00:23:28,680 --> 00:23:33,180
and I was like oh this is a really

00:23:30,060 --> 00:23:35,930
lovely pH v7f that just just fits that

00:23:33,180 --> 00:23:40,920
need perfectly to come and line up so I

00:23:35,930 --> 00:23:42,750
used brunches off as for my demo cigar

00:23:40,920 --> 00:23:44,610
which is the name of the app it's a

00:23:42,750 --> 00:23:46,860
smoke testing tool so what you do is

00:23:44,610 --> 00:23:49,560
just you specify their URLs and the

00:23:46,860 --> 00:23:51,960
expected HTTP code and the any expected

00:23:49,560 --> 00:23:53,220
content see if you have it and cigar

00:23:51,960 --> 00:23:54,870
will just run through the list that you

00:23:53,220 --> 00:23:56,520
specify in the file and compare what you

00:23:54,870 --> 00:23:58,710
expected to get with what you actually

00:23:56,520 --> 00:24:01,530
got and if everything's fine and go yep

00:23:58,710 --> 00:24:03,060
I check those URLs I got the HTTP codes

00:24:01,530 --> 00:24:04,440
that you expected I got the content that

00:24:03,060 --> 00:24:07,680
you expected everything's fine

00:24:04,440 --> 00:24:09,390
that's all it does so you already know

00:24:07,680 --> 00:24:12,150
it we'll make some external calls to the

00:24:09,390 --> 00:24:13,320
Internet's and you don't really need to

00:24:12,150 --> 00:24:15,270
know the full details I'm kind of doing

00:24:13,320 --> 00:24:16,740
this on purpose right now because in the

00:24:15,270 --> 00:24:18,000
real life very often when you're asked

00:24:16,740 --> 00:24:19,530
to optimize something or look at

00:24:18,000 --> 00:24:21,330
something you might know very little

00:24:19,530 --> 00:24:23,400
about the app you might not be the one

00:24:21,330 --> 00:24:24,870
the person that originally coded that in

00:24:23,400 --> 00:24:26,220
so you might even not know what the code

00:24:24,870 --> 00:24:30,090
does you know all you have is just some

00:24:26,220 --> 00:24:31,560
vague idea for what the app does

00:24:30,090 --> 00:24:32,670
so let's imagine the first scenario of

00:24:31,560 --> 00:24:34,560
the app is running slowly you know

00:24:32,670 --> 00:24:36,870
somebody comes along to us one day and

00:24:34,560 --> 00:24:38,850
says hey that's cigarette or that used

00:24:36,870 --> 00:24:40,140
to take you know not point five seconds

00:24:38,850 --> 00:24:40,890
to run now it's taking something like

00:24:40,140 --> 00:24:45,000
three seconds

00:24:40,890 --> 00:24:46,830
what's going on so well we can set up X

00:24:45,000 --> 00:24:49,200
each probe to start with and and see

00:24:46,830 --> 00:24:51,600
what that gives us so the way you set up

00:24:49,200 --> 00:24:53,250
X is probe is this is on on the readme

00:24:51,600 --> 00:24:55,020
so you can just copy and paste from the

00:24:53,250 --> 00:24:56,880
read Me's you basically just add a bit

00:24:55,020 --> 00:24:59,010
of code at the beginning of your file

00:24:56,880 --> 00:25:01,020
and then at the end so the first bit is

00:24:59,010 --> 00:25:02,460
just enabling X which probe and then the

00:25:01,020 --> 00:25:05,670
second bit is just disabling it and then

00:25:02,460 --> 00:25:07,320
saving the data to to a file and you can

00:25:05,670 --> 00:25:09,360
just copy and paste like we did here so

00:25:07,320 --> 00:25:11,310
copy and paste in in any file that you

00:25:09,360 --> 00:25:12,840
need it doesn't have to be right at the

00:25:11,310 --> 00:25:14,840
beginning or right at the end like you

00:25:12,840 --> 00:25:17,760
can just profile bits of your app you

00:25:14,840 --> 00:25:19,170
can check those two bits of code in a

00:25:17,760 --> 00:25:21,390
separate file and then include them or

00:25:19,170 --> 00:25:22,800
require them for every file to avoid

00:25:21,390 --> 00:25:25,470
copying and pasting this all over the

00:25:22,800 --> 00:25:28,080
place or you could use the auto prepend

00:25:25,470 --> 00:25:30,030
and auto appends any directives - then

00:25:28,080 --> 00:25:31,710
get PHP to automatically prepend and

00:25:30,030 --> 00:25:32,760
append those two bits to your code so

00:25:31,710 --> 00:25:36,870
you just don't have to worry about it

00:25:32,760 --> 00:25:39,360
and annex each probe gives you a browser

00:25:36,870 --> 00:25:40,950
view at the original xh probe gives you

00:25:39,360 --> 00:25:43,020
a way to view the results in the browser

00:25:40,950 --> 00:25:44,580
the tied ways extension and that's the

00:25:43,020 --> 00:25:46,500
reason why i actually haven't used that

00:25:44,580 --> 00:25:48,600
extension for this demo i think they've

00:25:46,500 --> 00:25:50,460
gotten rid of the original one because i

00:25:48,600 --> 00:25:52,710
couldn't find it anywhere there's there

00:25:50,460 --> 00:25:55,080
is a directory called xh prof underscore

00:25:52,710 --> 00:25:56,520
HTML which is actually the HTML viewer

00:25:55,080 --> 00:25:57,810
and that's not in the tied ways

00:25:56,520 --> 00:25:59,010
extensions or at least i couldn't find

00:25:57,810 --> 00:26:01,470
it so i think they might have gotten rid

00:25:59,010 --> 00:26:03,120
of it in the original xh probe this is

00:26:01,470 --> 00:26:06,930
the original kind of UI that you get

00:26:03,120 --> 00:26:08,910
when you run it and exit ref will spit

00:26:06,930 --> 00:26:10,200
you out a URL when you when you run your

00:26:08,910 --> 00:26:12,090
app so that you can just click on it and

00:26:10,200 --> 00:26:14,610
go to this and you just give it a run

00:26:12,090 --> 00:26:15,660
number and some other stuff i mean this

00:26:14,610 --> 00:26:17,430
is all on the readme as well so you

00:26:15,660 --> 00:26:20,130
don't have to remember it and that's the

00:26:17,430 --> 00:26:21,720
first page so what you see here is well

00:26:20,130 --> 00:26:23,700
we've got the main function here and

00:26:21,720 --> 00:26:25,320
then we've got some some of our code

00:26:23,700 --> 00:26:27,930
some of our Sagara code we've got the

00:26:25,320 --> 00:26:30,570
parse function we've got get URL objects

00:26:27,930 --> 00:26:32,190
and then we've got a closure here so and

00:26:30,570 --> 00:26:34,110
those are the top three ones here and

00:26:32,190 --> 00:26:35,610
they seem to be taking over two million

00:26:34,110 --> 00:26:38,640
microseconds I think that's the unit

00:26:35,610 --> 00:26:40,470
that they use here so the first most

00:26:38,640 --> 00:26:42,120
important thing in us again what a lot

00:26:40,470 --> 00:26:43,810
of people tend to forget is to establish

00:26:42,120 --> 00:26:45,640
a baseline so before you act

00:26:43,810 --> 00:26:47,440
go and change a single line you need to

00:26:45,640 --> 00:26:49,720
know how your app is doing now so then

00:26:47,440 --> 00:26:51,310
you can compare after your changes you

00:26:49,720 --> 00:26:52,750
can compare results after your changes

00:26:51,310 --> 00:26:54,550
and see if you've improved things or

00:26:52,750 --> 00:26:55,780
maybe you've made things worse so always

00:26:54,550 --> 00:26:57,580
make sure that you grab that baseline

00:26:55,780 --> 00:26:59,680
first before you go off and change

00:26:57,580 --> 00:27:02,290
things so our baseline is the three

00:26:59,680 --> 00:27:05,890
point not 64 seconds that we saw earlier

00:27:02,290 --> 00:27:08,080
on and the next each probe also whoa

00:27:05,890 --> 00:27:11,020
this is really bleak but it doesn't

00:27:08,080 --> 00:27:12,310
really matter here so exit ref also

00:27:11,020 --> 00:27:13,870
gives you a call graph you can click on

00:27:12,310 --> 00:27:16,750
the call graph color brown coal graph

00:27:13,870 --> 00:27:18,430
link and it will help it will try to be

00:27:16,750 --> 00:27:20,590
helpful and it will try to show you a

00:27:18,430 --> 00:27:22,090
hot path here so this one you probably

00:27:20,590 --> 00:27:23,920
can't see this but this one is the parse

00:27:22,090 --> 00:27:25,630
function the big red thing is the parse

00:27:23,920 --> 00:27:28,420
function so it kind of agrees with what

00:27:25,630 --> 00:27:30,190
we saw on the list so exit proof is kind

00:27:28,420 --> 00:27:35,500
of saying that well this parse function

00:27:30,190 --> 00:27:36,940
is taking the most time but that's kind

00:27:35,500 --> 00:27:38,260
of as close as we can get to the code

00:27:36,940 --> 00:27:40,150
with xh probe we don't really know

00:27:38,260 --> 00:27:42,910
what's inside that red box we don't

00:27:40,150 --> 00:27:45,820
really know what the code is so but at

00:27:42,910 --> 00:27:48,010
least we know now what area to focus on

00:27:45,820 --> 00:27:49,450
I mean we know this the get URL objects

00:27:48,010 --> 00:27:51,430
function is something that is causing

00:27:49,450 --> 00:27:53,590
problems so at least we it allowed us to

00:27:51,430 --> 00:27:56,500
like zoom zoom into the bit of code that

00:27:53,590 --> 00:27:57,670
we might be interested in but then how

00:27:56,500 --> 00:27:59,260
do we find out what's going on inside

00:27:57,670 --> 00:28:00,730
that function well we could obviously

00:27:59,260 --> 00:28:03,010
look at the source code at this point

00:28:00,730 --> 00:28:06,940
which is something that you might do but

00:28:03,010 --> 00:28:08,260
let's use X debug so the way you set up

00:28:06,940 --> 00:28:09,520
XD bug this is actually something that

00:28:08,260 --> 00:28:11,590
you get out-of-the-box if you use

00:28:09,520 --> 00:28:13,210
homebrew it's just three directives you

00:28:11,590 --> 00:28:14,950
basically just enable it give you the

00:28:13,210 --> 00:28:17,470
give the output directory for where

00:28:14,950 --> 00:28:19,540
where to save your output files and then

00:28:17,470 --> 00:28:21,460
just give the output name for the files

00:28:19,540 --> 00:28:23,170
so you save the files as cache grind

00:28:21,460 --> 00:28:26,440
don't out with some random number at the

00:28:23,170 --> 00:28:28,300
end so you don't get clashes and then

00:28:26,440 --> 00:28:30,550
what will that what that will do is

00:28:28,300 --> 00:28:32,260
every time you run your app whether it's

00:28:30,550 --> 00:28:34,300
a browser app or a command line app X

00:28:32,260 --> 00:28:36,490
debug will work in profile your app

00:28:34,300 --> 00:28:38,920
behind the scenes and save the results

00:28:36,490 --> 00:28:40,840
to a file but then again the file when

00:28:38,920 --> 00:28:43,120
you open it is just random string of

00:28:40,840 --> 00:28:45,880
nonsense ready it's not nonsense but it

00:28:43,120 --> 00:28:47,590
doesn't make any sense to you so there

00:28:45,880 --> 00:28:49,720
are some there is lots of you eyes to

00:28:47,590 --> 00:28:52,350
view XD bug data I'm gonna use cue cards

00:28:49,720 --> 00:28:54,760
or K cash grinder think it's on Linux

00:28:52,350 --> 00:28:56,560
which that tool looks like it's from

00:28:54,760 --> 00:28:57,400
1995 I mean it's been around for a long

00:28:56,560 --> 00:28:59,020
time

00:28:57,400 --> 00:29:02,340
but it's actually the thing that still

00:28:59,020 --> 00:29:04,330
most people use as the default XD bug UI

00:29:02,340 --> 00:29:06,280
there are other ones there are paid

00:29:04,330 --> 00:29:07,630
versions on Apple Store you can use

00:29:06,280 --> 00:29:09,490
something called web grind so there is

00:29:07,630 --> 00:29:10,780
there are a few options but queue cash

00:29:09,490 --> 00:29:12,130
grind is actually not too hard to

00:29:10,780 --> 00:29:14,350
install these days you can install the

00:29:12,130 --> 00:29:16,750
fire brew with the cavea that you can't

00:29:14,350 --> 00:29:18,250
see because it's - it's it's it's not

00:29:16,750 --> 00:29:20,020
visible enough but basically on the

00:29:18,250 --> 00:29:22,330
latest mac if you install it via brew

00:29:20,020 --> 00:29:23,890
because of the changes to security that

00:29:22,330 --> 00:29:26,290
they've done that you can't put binaries

00:29:23,890 --> 00:29:28,210
into user bin anymore and they are in

00:29:26,290 --> 00:29:30,340
local queue cash grind can't find some

00:29:28,210 --> 00:29:32,050
of the binaries it needs so this is a

00:29:30,340 --> 00:29:33,910
workaround thing a nutshell or I've

00:29:32,050 --> 00:29:35,140
shared the slides already so you can if

00:29:33,910 --> 00:29:36,910
you run into this this is a tiny

00:29:35,140 --> 00:29:39,820
workaround you created a shell wrapper

00:29:36,910 --> 00:29:41,680
around it to get it going so it does

00:29:39,820 --> 00:29:44,800
work on the latest Mac even though it

00:29:41,680 --> 00:29:49,330
really looks like an app from kind of

00:29:44,800 --> 00:29:52,660
like a 1995 so first of all you have a

00:29:49,330 --> 00:29:54,490
drop down here called sorry there is a

00:29:52,660 --> 00:29:55,660
drop down with time or memory so you can

00:29:54,490 --> 00:29:57,250
select do you want to view time

00:29:55,660 --> 00:29:58,780
information or memory information so we

00:29:57,250 --> 00:30:01,210
want to view time because we're we're

00:29:58,780 --> 00:30:03,250
now we're looking at time and then we've

00:30:01,210 --> 00:30:05,650
got the same parser font functions at

00:30:03,250 --> 00:30:09,340
the top here so we kind of see the same

00:30:05,650 --> 00:30:10,690
results as X X X H profit and online

00:30:09,340 --> 00:30:13,210
right you've got something called the

00:30:10,690 --> 00:30:15,880
color map and that gives you this weird

00:30:13,210 --> 00:30:17,080
looking pyramid diagram and it might

00:30:15,880 --> 00:30:18,250
look very confusing at first but

00:30:17,080 --> 00:30:20,500
basically if you're looking at

00:30:18,250 --> 00:30:21,850
performance what you need to what are

00:30:20,500 --> 00:30:24,040
you looking for what you're looking for

00:30:21,850 --> 00:30:25,780
is big squares with nothing in them

00:30:24,040 --> 00:30:28,090
because that means that proportionally

00:30:25,780 --> 00:30:30,220
that squared that green square took the

00:30:28,090 --> 00:30:32,050
most time in the app but it didn't call

00:30:30,220 --> 00:30:34,690
any functions there is nothing inside it

00:30:32,050 --> 00:30:36,850
no dots no squares inside it which means

00:30:34,690 --> 00:30:39,820
use the last function that the profiler

00:30:36,850 --> 00:30:41,740
on the in the profiling trace that was

00:30:39,820 --> 00:30:43,330
found most of the time and when you

00:30:41,740 --> 00:30:46,990
hover over it that hover is the powers

00:30:43,330 --> 00:30:49,750
class here so again the way you read it

00:30:46,990 --> 00:30:51,340
is that those little squares here you

00:30:49,750 --> 00:30:52,630
might think oh that's really busy that's

00:30:51,340 --> 00:30:54,160
that's something going on in here

00:30:52,630 --> 00:30:55,840
that's actually nothing to worry about

00:30:54,160 --> 00:30:57,850
that's just lots of functions calling

00:30:55,840 --> 00:31:02,350
other functions and taking a relatively

00:30:57,850 --> 00:31:05,500
small time overall so what else can we

00:31:02,350 --> 00:31:07,150
get from Q cash grind well at the bottom

00:31:05,500 --> 00:31:09,130
there is a tab called call graph so you

00:31:07,150 --> 00:31:11,080
can get the call graph and we see the

00:31:09,130 --> 00:31:13,360
same same things as I

00:31:11,080 --> 00:31:15,669
xh prof and then we can see here that

00:31:13,360 --> 00:31:20,769
this this one is the closure so this is

00:31:15,669 --> 00:31:22,450
taking fairly long time and closures are

00:31:20,769 --> 00:31:24,640
one of those things that are really

00:31:22,450 --> 00:31:26,649
really hard to debug to debug when it

00:31:24,640 --> 00:31:28,179
comes to performance because the tool

00:31:26,649 --> 00:31:29,529
won't give you a name of a function

00:31:28,179 --> 00:31:31,059
right away to look into they will just

00:31:29,529 --> 00:31:32,289
say like oh in this file there is a

00:31:31,059 --> 00:31:34,450
closure and sometimes you might need to

00:31:32,289 --> 00:31:36,659
work out like which one is it so that's

00:31:34,450 --> 00:31:39,159
that's a little bit tricky to work out

00:31:36,659 --> 00:31:42,429
and then if you compare the two that I

00:31:39,159 --> 00:31:44,350
just did it for just out of curiosity

00:31:42,429 --> 00:31:46,630
comparing the two call graphs they look

00:31:44,350 --> 00:31:48,610
the same so they they are from two

00:31:46,630 --> 00:31:50,889
separate runs so the overall time parse

00:31:48,610 --> 00:31:53,139
in exit row F is shown as 81% of the

00:31:50,889 --> 00:31:54,100
time and then here it's 79 percent of

00:31:53,139 --> 00:31:55,779
the time but that's because it's two

00:31:54,100 --> 00:31:58,029
separate runs so your your data will

00:31:55,779 --> 00:31:59,380
vary between the runs slightly but we do

00:31:58,029 --> 00:32:02,649
kind of get the same general idea that

00:31:59,380 --> 00:32:06,370
that parse function and that one seems

00:32:02,649 --> 00:32:08,500
to be taking quite a while so back to

00:32:06,370 --> 00:32:09,880
cue cache grind we select the second

00:32:08,500 --> 00:32:11,049
function from the top so this one the

00:32:09,880 --> 00:32:13,090
top one is main which is always going to

00:32:11,049 --> 00:32:17,769
be at the top obviously and then there

00:32:13,090 --> 00:32:19,990
is the array map function and here you

00:32:17,769 --> 00:32:22,090
can see so the top the top section here

00:32:19,990 --> 00:32:23,559
is the colors of that function and at

00:32:22,090 --> 00:32:25,570
the bottom one is the Col deze of that

00:32:23,559 --> 00:32:27,190
function and in the Calise you can see

00:32:25,570 --> 00:32:28,240
that closure well you can't see it

00:32:27,190 --> 00:32:32,399
because it's probably not visible but

00:32:28,240 --> 00:32:35,019
that is that has the closure in the list

00:32:32,399 --> 00:32:36,220
so then you can you can do even more

00:32:35,019 --> 00:32:38,529
cool stuff in queue cache Brian can you

00:32:36,220 --> 00:32:41,590
view the source code here so when you

00:32:38,529 --> 00:32:44,529
click on the view source code well some

00:32:41,590 --> 00:32:47,799
weird stuff like high equals for that

00:32:44,529 --> 00:32:49,419
kind of thing or maybe somebody might

00:32:47,799 --> 00:32:53,110
have put some code in there to calculate

00:32:49,419 --> 00:32:54,970
pi as well as fetching the URLs in they

00:32:53,110 --> 00:32:56,320
get URLs for objects functions so when

00:32:54,970 --> 00:32:57,820
you then look at the code that's

00:32:56,320 --> 00:33:00,880
actually I've just I've just pasted that

00:32:57,820 --> 00:33:02,500
and it wasn't that it was me so I just

00:33:00,880 --> 00:33:04,090
made it slow on purpose to make it show

00:33:02,500 --> 00:33:06,340
in the graphs but that's kind of how you

00:33:04,090 --> 00:33:10,120
arrive at what bit of code exactly is

00:33:06,340 --> 00:33:12,370
taking the most time and so then when we

00:33:10,120 --> 00:33:13,899
remove the PI code we've improved things

00:33:12,370 --> 00:33:17,049
it's back to not point three seconds

00:33:13,899 --> 00:33:18,340
surprise surprise so we've got a reprove

00:33:17,049 --> 00:33:20,350
here we've actually you know we've got

00:33:18,340 --> 00:33:22,600
some some some numbers so it's not just

00:33:20,350 --> 00:33:24,410
me saying oh I think that was it you

00:33:22,600 --> 00:33:26,090
know I've actually got proof that I've

00:33:24,410 --> 00:33:27,500
I got it down from three seconds to not

00:33:26,090 --> 00:33:31,520
point three which is kind of what you

00:33:27,500 --> 00:33:33,770
want and then just for completeness we

00:33:31,520 --> 00:33:35,240
run Exeter off again this is the top of

00:33:33,770 --> 00:33:36,680
the list of the functions it doesn't

00:33:35,240 --> 00:33:38,750
show up there anymore there's no parse

00:33:36,680 --> 00:33:40,280
here and there's no parts here and then

00:33:38,750 --> 00:33:43,340
somewhere at the bottom there is the get

00:33:40,280 --> 00:33:44,450
URL page and it's now so now it's

00:33:43,340 --> 00:33:46,250
something like seven hundred and

00:33:44,450 --> 00:33:49,040
thirty-seven microseconds versus the

00:33:46,250 --> 00:33:50,450
over two million milliseconds so extra

00:33:49,040 --> 00:33:55,370
stuff is selling saying the same thing

00:33:50,450 --> 00:33:56,840
we've made it better and again this does

00:33:55,370 --> 00:33:58,550
didn't really show up too well but this

00:33:56,840 --> 00:34:00,680
is the call graphs and now so this is

00:33:58,550 --> 00:34:02,180
the old one where the parse was here and

00:34:00,680 --> 00:34:04,820
then parse is somewhere here which you

00:34:02,180 --> 00:34:06,590
completely can't see I apologize but now

00:34:04,820 --> 00:34:09,470
exits trough is showing us a different

00:34:06,590 --> 00:34:11,929
hot path that it thinks might be now the

00:34:09,470 --> 00:34:14,419
busiest path and you also can't see it

00:34:11,929 --> 00:34:16,100
but this is all guzzle classes so gas

00:34:14,419 --> 00:34:17,870
weighs a lot at an HTTP library that use

00:34:16,100 --> 00:34:20,150
for making requests and then we know

00:34:17,870 --> 00:34:21,800
that this app is likely to make external

00:34:20,150 --> 00:34:24,530
requests so this isn't necessarily worth

00:34:21,800 --> 00:34:26,000
worrying because well you know it's what

00:34:24,530 --> 00:34:27,950
we expect from this app to use guzzle

00:34:26,000 --> 00:34:31,220
and to mostly use guzzle to do its job

00:34:27,950 --> 00:34:32,690
so this is not alarming anymore one

00:34:31,220 --> 00:34:35,600
thing I would say is don't discount

00:34:32,690 --> 00:34:37,700
library code from your from when you're

00:34:35,600 --> 00:34:39,620
optimizing performance because the fact

00:34:37,700 --> 00:34:41,210
that it's a library it's still code it

00:34:39,620 --> 00:34:41,780
can still have bugs it can still have

00:34:41,210 --> 00:34:43,580
memory leaks

00:34:41,780 --> 00:34:45,110
I mean I've at work we've had a memory

00:34:43,580 --> 00:34:46,850
leak on one of the metrics libraries

00:34:45,110 --> 00:34:48,470
that we've used so when you're looking

00:34:46,850 --> 00:34:50,060
at performance just because you see some

00:34:48,470 --> 00:34:52,640
familiar names like oh it's gazwal or

00:34:50,060 --> 00:34:54,200
it's symphony or ads and or whatever you

00:34:52,640 --> 00:34:55,460
know most of the time you can trust that

00:34:54,200 --> 00:34:57,140
they've done a good job and they don't

00:34:55,460 --> 00:34:58,790
have any issues and it's just because

00:34:57,140 --> 00:35:00,770
the app you know mostly makes external

00:34:58,790 --> 00:35:02,270
calls but it could be you know if you're

00:35:00,770 --> 00:35:04,880
if you spent hours looking at something

00:35:02,270 --> 00:35:06,560
and all your clues point at a library

00:35:04,880 --> 00:35:08,740
code by all means look at it because it

00:35:06,560 --> 00:35:12,680
might actually have some some issues and

00:35:08,740 --> 00:35:14,060
I make a pull request obviously so then

00:35:12,680 --> 00:35:16,280
back to queue cache grind we've got

00:35:14,060 --> 00:35:17,960
parse we don't have parse at the top

00:35:16,280 --> 00:35:19,100
there is a handy search as well so you

00:35:17,960 --> 00:35:21,170
don't have to look through it

00:35:19,100 --> 00:35:23,180
nowhere near at the top this now looks

00:35:21,170 --> 00:35:24,790
different and now this is also guzzle so

00:35:23,180 --> 00:35:27,500
we can see that Gazeta is taking

00:35:24,790 --> 00:35:31,520
proportionally the the most time so this

00:35:27,500 --> 00:35:33,020
is kind of what we expect now that was a

00:35:31,520 --> 00:35:36,740
good first step you know that was like

00:35:33,020 --> 00:35:37,640
yeah we've done something good by the

00:35:36,740 --> 00:35:41,000
way you can

00:35:37,640 --> 00:35:42,829
also view xhd X debug profiling things

00:35:41,000 --> 00:35:44,630
in phpstorm for those of you who use it

00:35:42,829 --> 00:35:47,240
in tools you've got something called

00:35:44,630 --> 00:35:48,230
analyze X debug profiler and that gives

00:35:47,240 --> 00:35:49,789
you something like that

00:35:48,230 --> 00:35:52,190
it gives you nowhere near as much

00:35:49,789 --> 00:35:53,930
information as q cache grind so it's not

00:35:52,190 --> 00:35:55,130
really a replacement but if you just

00:35:53,930 --> 00:35:56,720
want it to view something quickly you

00:35:55,130 --> 00:35:58,250
can do that it gives you something

00:35:56,720 --> 00:35:59,960
called like a cull tree so you can like

00:35:58,250 --> 00:36:02,269
in a typical phpstorm where you can do

00:35:59,960 --> 00:36:05,390
the drop down drill drill drill into the

00:36:02,269 --> 00:36:08,690
drop downs one caveat with that is with

00:36:05,390 --> 00:36:10,549
PHP 7.2 the stable phpstorm version

00:36:08,690 --> 00:36:11,029
doesn't actually work with this it can't

00:36:10,549 --> 00:36:13,670
open it

00:36:11,029 --> 00:36:15,650
X debug 2.6 files so you have to I have

00:36:13,670 --> 00:36:17,299
to install the EAP version and the EP

00:36:15,650 --> 00:36:19,730
version seems to be fixed for that so I

00:36:17,299 --> 00:36:21,680
think it's in the 2018 release that they

00:36:19,730 --> 00:36:23,420
will actually put those bug fixes in so

00:36:21,680 --> 00:36:25,369
just to keep it keep it in mind that you

00:36:23,420 --> 00:36:29,720
might have to go go for the EAP version

00:36:25,369 --> 00:36:32,119
if you want to use this 4x debug so what

00:36:29,720 --> 00:36:34,130
more can we get here from from the X

00:36:32,119 --> 00:36:36,890
debug output and and what more can we

00:36:34,130 --> 00:36:38,599
see in Q cache crying well one of the

00:36:36,890 --> 00:36:40,819
cool things it shows you is this column

00:36:38,599 --> 00:36:42,529
shows you the number of times a function

00:36:40,819 --> 00:36:44,420
was called which is kind of which is

00:36:42,529 --> 00:36:47,210
which is really handy sometimes so here

00:36:44,420 --> 00:36:48,589
for example we've got 123 calls to

00:36:47,210 --> 00:36:50,839
string to lower and you might be

00:36:48,589 --> 00:36:52,819
wondering like you know why is that and

00:36:50,839 --> 00:36:55,339
then again you can look at the colors

00:36:52,819 --> 00:36:57,019
list which is really handy because that

00:36:55,339 --> 00:36:59,480
shows you all the classes and all the

00:36:57,019 --> 00:37:01,670
functions that have called PHP string to

00:36:59,480 --> 00:37:03,440
lower which is quite handy and here we

00:37:01,670 --> 00:37:04,970
can see that so all of these are again

00:37:03,440 --> 00:37:06,890
guzzle functions and all of these

00:37:04,970 --> 00:37:08,450
functions here are to do with headers so

00:37:06,890 --> 00:37:10,670
it's something that heads set header get

00:37:08,450 --> 00:37:14,990
get header add header that kind of thing

00:37:10,670 --> 00:37:17,150
so we can guess that guzzle is lowering

00:37:14,990 --> 00:37:18,319
all the strings using that function when

00:37:17,150 --> 00:37:19,700
it's setting the headers and again

00:37:18,319 --> 00:37:21,920
because it's doing a lot of external

00:37:19,700 --> 00:37:23,599
requests it's no wonder that it's doing

00:37:21,920 --> 00:37:26,480
you know over 100 calls to that function

00:37:23,599 --> 00:37:28,900
so the reason why I'm showing you this

00:37:26,480 --> 00:37:30,890
is that you can really gain a lot of

00:37:28,900 --> 00:37:32,269
understanding of what your code is doing

00:37:30,890 --> 00:37:33,440
when you do something like that you can

00:37:32,269 --> 00:37:35,089
click around here all of this is

00:37:33,440 --> 00:37:36,019
clickable they're going to just click on

00:37:35,089 --> 00:37:37,670
these things and get an understanding

00:37:36,019 --> 00:37:38,960
for you know what's what's exactly

00:37:37,670 --> 00:37:40,789
calling this is this something that

00:37:38,960 --> 00:37:45,680
should be worried worried about or is

00:37:40,789 --> 00:37:47,809
this normal and unwell scan we see so we

00:37:45,680 --> 00:37:52,310
can see that we have 9 calls to the F

00:37:47,809 --> 00:37:56,300
open function and well we know that

00:37:52,310 --> 00:37:58,280
our the cigar app is only opening a file

00:37:56,300 --> 00:38:00,200
once it's got one config file that will

00:37:58,280 --> 00:38:02,770
it will read the list of URLs from so

00:38:00,200 --> 00:38:05,240
we'd expect more like one call to F open

00:38:02,770 --> 00:38:08,030
and again looking at the colors list

00:38:05,240 --> 00:38:09,410
here we can see that this is our get

00:38:08,030 --> 00:38:11,660
file contents function which is actually

00:38:09,410 --> 00:38:13,490
the one that in the file that we the

00:38:11,660 --> 00:38:15,770
config file that we are reading there is

00:38:13,490 --> 00:38:17,720
also some guzzle things and again you

00:38:15,770 --> 00:38:19,430
might be wondering what is guzzle open

00:38:17,720 --> 00:38:21,650
doing with F open like is it opening

00:38:19,430 --> 00:38:23,390
files no maybe it's some temporary files

00:38:21,650 --> 00:38:24,650
that it writes down and again you can

00:38:23,390 --> 00:38:28,850
look at the source code and you can see

00:38:24,650 --> 00:38:31,070
here that is the PHP temp some writes to

00:38:28,850 --> 00:38:33,160
PHP temp so then now you know that Gazoo

00:38:31,070 --> 00:38:35,930
is actually writing some temporary files

00:38:33,160 --> 00:38:38,060
as part of its work and again that kind

00:38:35,930 --> 00:38:43,310
of visibility you can gain by by just

00:38:38,060 --> 00:38:46,700
clicking around so now we can flip the

00:38:43,310 --> 00:38:48,620
drop down here to memory and come back

00:38:46,700 --> 00:38:49,970
to our get file contents function you

00:38:48,620 --> 00:38:52,460
can search for it or you can just find

00:38:49,970 --> 00:38:53,870
it in the list so we click on that and

00:38:52,460 --> 00:38:55,820
you can see that the you know we do like

00:38:53,870 --> 00:38:57,500
an F open F read and F closed and that

00:38:55,820 --> 00:39:01,520
seems to be taking quite a bit of memory

00:38:57,500 --> 00:39:03,050
and I wonder because since we and this

00:39:01,520 --> 00:39:04,340
is kind of the part that mostly just

00:39:03,050 --> 00:39:05,930
comes with your experience or how

00:39:04,340 --> 00:39:08,090
quickly the light bulb is gonna go off

00:39:05,930 --> 00:39:09,740
in your head but when you think about it

00:39:08,090 --> 00:39:11,870
we're only reading from the config file

00:39:09,740 --> 00:39:13,400
we're not writing to it and there's a

00:39:11,870 --> 00:39:15,350
different function in PHP for doing just

00:39:13,400 --> 00:39:17,390
reading from file called file get

00:39:15,350 --> 00:39:19,310
contents so again you might be wondering

00:39:17,390 --> 00:39:21,170
oh is it gonna be faster if I use that

00:39:19,310 --> 00:39:25,070
function instead or like is there going

00:39:21,170 --> 00:39:26,930
to be any difference at all and so we

00:39:25,070 --> 00:39:30,560
saw we swapped that function and then

00:39:26,930 --> 00:39:34,820
sure enough just file get constants here

00:39:30,560 --> 00:39:36,350
now gives you instead of over 8,000 here

00:39:34,820 --> 00:39:38,360
in the memory what the units are I think

00:39:36,350 --> 00:39:39,440
it's bytes now it's like four hundred

00:39:38,360 --> 00:39:41,450
and ninety-six

00:39:39,440 --> 00:39:44,540
and then overall if you look at the

00:39:41,450 --> 00:39:46,670
colors list so the parse function which

00:39:44,540 --> 00:39:51,680
then inside calls the gate file contents

00:39:46,670 --> 00:39:54,440
that was 512 before and now it's 496 now

00:39:51,680 --> 00:39:56,030
so again you know now that using that

00:39:54,440 --> 00:39:57,140
function is faster in your case so you

00:39:56,030 --> 00:39:58,400
should probably go with it but again

00:39:57,140 --> 00:40:01,390
you've got the hard proof you've got the

00:39:58,400 --> 00:40:03,740
numbers that this is actually better and

00:40:01,390 --> 00:40:04,940
this is so easy to play around with as

00:40:03,740 --> 00:40:06,470
well like you can all

00:40:04,940 --> 00:40:08,180
have to do is edit your code your ex

00:40:06,470 --> 00:40:09,560
debug is running in the background you

00:40:08,180 --> 00:40:11,540
just run your app again you get a new

00:40:09,560 --> 00:40:13,010
file you open it a cat in cash grind and

00:40:11,540 --> 00:40:14,900
you've got different results so this is

00:40:13,010 --> 00:40:16,130
a really quick feedback loop it's not

00:40:14,900 --> 00:40:17,720
we're not talking about minutes to

00:40:16,130 --> 00:40:18,980
compile or anything so it's really easy

00:40:17,720 --> 00:40:20,599
to play around with this if you want to

00:40:18,980 --> 00:40:21,710
play around we're using different

00:40:20,599 --> 00:40:25,400
functions see if it makes a difference

00:40:21,710 --> 00:40:27,079
maybe it does maybe it doesn't and by

00:40:25,400 --> 00:40:29,359
the way for this case exit off wouldn't

00:40:27,079 --> 00:40:31,339
show us any of this information so in

00:40:29,359 --> 00:40:33,050
the UI you can click through things so

00:40:31,339 --> 00:40:36,170
when I click on the get file contents

00:40:33,050 --> 00:40:37,670
thing function from the first list this

00:40:36,170 --> 00:40:40,220
is as far as it gets me clicking on that

00:40:37,670 --> 00:40:41,480
link takes you nowhere further so this

00:40:40,220 --> 00:40:43,099
is all you get and this is the call

00:40:41,480 --> 00:40:44,690
graph and it just shows you that parse

00:40:43,099 --> 00:40:46,609
function that then calls get file

00:40:44,690 --> 00:40:48,770
contents but you don't know anything

00:40:46,609 --> 00:40:50,869
more than that like F open doesn't show

00:40:48,770 --> 00:40:52,339
here so you wouldn't get that

00:40:50,869 --> 00:40:55,160
information from exit off in this case

00:40:52,339 --> 00:40:57,349
and this is why you should really use

00:40:55,160 --> 00:40:59,270
all the tools I mean don't just stick to

00:40:57,349 --> 00:41:00,800
one because sometimes it might help you

00:40:59,270 --> 00:41:02,540
sometimes both might show you the same

00:41:00,800 --> 00:41:04,310
results but sometimes one of them might

00:41:02,540 --> 00:41:06,829
be much better than the other or show

00:41:04,310 --> 00:41:08,930
you more information so by all means go

00:41:06,829 --> 00:41:13,910
ahead and use as many as you want or try

00:41:08,930 --> 00:41:15,829
out new ones so what if you want to do

00:41:13,910 --> 00:41:17,300
some general export explorations I mean

00:41:15,829 --> 00:41:18,920
those were things that we could kind of

00:41:17,300 --> 00:41:20,720
spot as maybe potential problems but

00:41:18,920 --> 00:41:22,280
what if you want to just know what's

00:41:20,720 --> 00:41:24,800
inside inside your memory in your app

00:41:22,280 --> 00:41:26,839
maybe there is something that could not

00:41:24,800 --> 00:41:28,339
be there so you know and how do you

00:41:26,839 --> 00:41:32,270
check that your program is not leaking

00:41:28,339 --> 00:41:33,740
memory for sure you can inspect you can

00:41:32,270 --> 00:41:36,079
look at the memory numbers index debug

00:41:33,740 --> 00:41:37,460
or or exit proof and kind of yes on that

00:41:36,079 --> 00:41:39,619
you know roughly how much memory you

00:41:37,460 --> 00:41:41,359
take your you're taking and does it go

00:41:39,619 --> 00:41:43,040
up between the runs does it not go up

00:41:41,359 --> 00:41:44,270
you could watch your monitoring graphs

00:41:43,040 --> 00:41:45,579
your production monitoring graphs

00:41:44,270 --> 00:41:49,130
obviously those are good things

00:41:45,579 --> 00:41:50,119
and if you look at the GC stats for

00:41:49,130 --> 00:41:52,520
example you know if you see something

00:41:50,119 --> 00:41:54,950
like this so these are all the GC phases

00:41:52,520 --> 00:41:56,660
that's okay because the overall this is

00:41:54,950 --> 00:41:58,430
flat so as long as this stays fats that

00:41:56,660 --> 00:42:02,359
that's fine this is just GC doing its

00:41:58,430 --> 00:42:05,060
its stuff but it would be nice to know

00:42:02,359 --> 00:42:06,290
what's in your in our memory at the end

00:42:05,060 --> 00:42:08,180
of the run of your program like of what

00:42:06,290 --> 00:42:12,890
what exactly what objects are there when

00:42:08,180 --> 00:42:15,260
you finish running your program so for

00:42:12,890 --> 00:42:18,349
that we can use the PHP mmm info

00:42:15,260 --> 00:42:18,830
extension again once you install it you

00:42:18,349 --> 00:42:21,440
just need to

00:42:18,830 --> 00:42:22,790
and one-line so at the end this

00:42:21,440 --> 00:42:23,660
basically just tells to save the output

00:42:22,790 --> 00:42:25,490
to a file

00:42:23,660 --> 00:42:26,870
it saves output in JSON files so you

00:42:25,490 --> 00:42:29,960
can't actually open them and make sense

00:42:26,870 --> 00:42:31,720
of them which is nice so this is all you

00:42:29,960 --> 00:42:34,520
have to do you just do mem info-dump and

00:42:31,720 --> 00:42:37,280
it will shove some information into the

00:42:34,520 --> 00:42:39,200
file that you can then analyze and

00:42:37,280 --> 00:42:43,010
Explorer it also comes with an analyzer

00:42:39,200 --> 00:42:45,110
that is just a PHP app so comes bundle

00:42:43,010 --> 00:42:47,650
up with everything you need so let's add

00:42:45,110 --> 00:42:50,630
that to the end of the parser file and

00:42:47,650 --> 00:42:53,360
the sorry not the parser file so this is

00:42:50,630 --> 00:42:55,610
the entry whoops the entry file to cigar

00:42:53,360 --> 00:42:57,290
so every PHP app is gonna start with the

00:42:55,610 --> 00:42:59,630
procedural file so this is the main

00:42:57,290 --> 00:43:01,040
binary file that you four cigar so you

00:42:59,630 --> 00:43:02,450
just we just add it at the end of the

00:43:01,040 --> 00:43:04,220
main file so we know that we're gonna

00:43:02,450 --> 00:43:08,720
get the data at the end of the of the

00:43:04,220 --> 00:43:10,490
whole app and then you use use the

00:43:08,720 --> 00:43:13,070
analyzer so it just it's just a binary

00:43:10,490 --> 00:43:14,990
that you run and you've got a summary

00:43:13,070 --> 00:43:16,880
call for example which is a good one to

00:43:14,990 --> 00:43:18,290
start with so just do your summary and

00:43:16,880 --> 00:43:20,420
then the name of the file and it gives

00:43:18,290 --> 00:43:22,550
you something like this and it gives you

00:43:20,420 --> 00:43:24,890
the exact count of Alden um all the

00:43:22,550 --> 00:43:29,150
objects are in the memory when we dump

00:43:24,890 --> 00:43:30,560
the the output to the file so we can see

00:43:29,150 --> 00:43:32,150
how many instances of everything are

00:43:30,560 --> 00:43:34,310
there I mean there is some output or and

00:43:32,150 --> 00:43:36,500
parser which is the cigar code and there

00:43:34,310 --> 00:43:38,060
are strings array integers there is URLs

00:43:36,500 --> 00:43:40,670
there's results all sorts of things

00:43:38,060 --> 00:43:42,770
we've got 44 strings for example this is

00:43:40,670 --> 00:43:46,130
how much memory they are taking it's

00:43:42,770 --> 00:43:47,750
pretty useful and the cool thing about

00:43:46,130 --> 00:43:49,580
it is that if there was a memory leak

00:43:47,750 --> 00:43:51,050
you'd probably see an object that you

00:43:49,580 --> 00:43:52,520
wouldn't expect to see here like if

00:43:51,050 --> 00:43:54,200
there was an object that you would you'd

00:43:52,520 --> 00:43:56,300
think like why is why is it here and on

00:43:54,200 --> 00:43:58,610
top of that if there was like a hundred

00:43:56,300 --> 00:44:01,010
and something instances of it that might

00:43:58,610 --> 00:44:02,240
be a warning sign sign so this is quite

00:44:01,010 --> 00:44:04,940
a good outfit like we see nothing

00:44:02,240 --> 00:44:06,800
warning alarming here but if you did see

00:44:04,940 --> 00:44:08,660
like a random object that you'd think it

00:44:06,800 --> 00:44:10,370
should be long gone and there is a

00:44:08,660 --> 00:44:13,070
hundred and twenty four of those things

00:44:10,370 --> 00:44:14,660
and maybe you shouldn't be that's a

00:44:13,070 --> 00:44:19,490
really good good tool for that to spot

00:44:14,660 --> 00:44:21,950
any of this and by the way for this

00:44:19,490 --> 00:44:23,450
demonstration I tried to create a memory

00:44:21,950 --> 00:44:24,920
leak to show you like an actual memory

00:44:23,450 --> 00:44:27,050
leak here but it's really really hard to

00:44:24,920 --> 00:44:30,740
trick PHP seven into memory leaks these

00:44:27,050 --> 00:44:32,690
days like I've all my tricks I've known

00:44:30,740 --> 00:44:34,910
from PHP five don't work for PHP

00:44:32,690 --> 00:44:37,460
so if you leave open file handles if you

00:44:34,910 --> 00:44:39,440
leave circular references to objects

00:44:37,460 --> 00:44:44,569
none of this works in PHP 7 anymore it's

00:44:39,440 --> 00:44:45,650
gotten a lot more clever so let's just

00:44:44,569 --> 00:44:47,000
for the sake of the demonstration and

00:44:45,650 --> 00:44:49,819
see what you have here well we've got

00:44:47,000 --> 00:44:52,400
our favorite parser object again but

00:44:49,819 --> 00:44:54,020
then if you think about it

00:44:52,400 --> 00:44:55,940
when we look at the source code we

00:44:54,020 --> 00:44:58,700
create the new parser object and then we

00:44:55,940 --> 00:45:00,380
parse the file to get the config so get

00:44:58,700 --> 00:45:02,660
the URLs that we are we're gonna call

00:45:00,380 --> 00:45:05,270
and then we do the calling like we do we

00:45:02,660 --> 00:45:06,920
do this a synchronously so we only read

00:45:05,270 --> 00:45:08,599
the file 1 so we only need the parts

00:45:06,920 --> 00:45:09,799
parser object once and never again

00:45:08,599 --> 00:45:11,750
because we only read the file

00:45:09,799 --> 00:45:13,670
information once so why the hell is it

00:45:11,750 --> 00:45:16,250
still in the mem in memory at the end of

00:45:13,670 --> 00:45:19,069
it it could be that because overall your

00:45:16,250 --> 00:45:20,839
program it is not taking a huge amount

00:45:19,069 --> 00:45:22,579
of memory the GC just doesn't get to it

00:45:20,839 --> 00:45:24,500
like maybe if there was a moment more

00:45:22,579 --> 00:45:26,839
memory used the parser object would get

00:45:24,500 --> 00:45:29,780
cleanest as part of it but maybe not so

00:45:26,839 --> 00:45:31,309
so why so so why is GC is not cleaning

00:45:29,780 --> 00:45:33,140
it likewise why is that object still

00:45:31,309 --> 00:45:34,220
there at the end of the file when we we

00:45:33,140 --> 00:45:43,250
only use it here and we don't really

00:45:34,220 --> 00:45:45,470
need it anymore so we looks like we are

00:45:43,250 --> 00:45:50,270
creating a variable here and we're using

00:45:45,470 --> 00:45:52,609
it here and when you look at the when

00:45:50,270 --> 00:45:54,500
you look at the query command in the

00:45:52,609 --> 00:45:56,119
analyzer you can filter it by class as

00:45:54,500 --> 00:45:58,609
well so we can zoom in to the parser

00:45:56,119 --> 00:46:00,589
function specifically then it gives you

00:45:58,609 --> 00:46:03,260
all the information about that

00:46:00,589 --> 00:46:05,089
particular object in memory so gives you

00:46:03,260 --> 00:46:07,609
the ID of the object tells me that it's

00:46:05,089 --> 00:46:11,450
an object of this class there's two

00:46:07,609 --> 00:46:14,750
references to it and it's a root so it's

00:46:11,450 --> 00:46:16,490
not a child object and it's in the

00:46:14,750 --> 00:46:17,990
global execution frame which is what we

00:46:16,490 --> 00:46:20,079
would expect because we're in the main

00:46:17,990 --> 00:46:25,220
procedural file so it's a global scope

00:46:20,079 --> 00:46:28,400
and then can we dig deeper like well we

00:46:25,220 --> 00:46:31,609
can we can we can use this ID in the

00:46:28,400 --> 00:46:34,250
next command which is the ref ref ref

00:46:31,609 --> 00:46:36,170
command which shows you all the

00:46:34,250 --> 00:46:39,230
references to that object so we have two

00:46:36,170 --> 00:46:41,270
references here one of them is the self

00:46:39,230 --> 00:46:42,770
reference here which is the self

00:46:41,270 --> 00:46:44,750
reference from the object to itself and

00:46:42,770 --> 00:46:46,460
every PHP object will have it and then

00:46:44,750 --> 00:46:47,930
the other one is from the global scope

00:46:46,460 --> 00:46:49,760
the parser object so that kind of gives

00:46:47,930 --> 00:46:51,470
you an idea for it for if you want to

00:46:49,760 --> 00:46:53,210
find out if you've got lots of objects

00:46:51,470 --> 00:46:54,980
in your in your memory and you want to

00:46:53,210 --> 00:46:57,200
know what is the reference that is

00:46:54,980 --> 00:46:58,819
preventing this object from being GCD

00:46:57,200 --> 00:47:00,589
then that's a great tool to use because

00:46:58,819 --> 00:47:01,849
that will show you exactly what is still

00:47:00,589 --> 00:47:03,290
referencing that object like in this

00:47:01,849 --> 00:47:04,730
case this is not alarming this is just

00:47:03,290 --> 00:47:06,740
self in global this is what we expect

00:47:04,730 --> 00:47:09,319
but if there was something suspicious if

00:47:06,740 --> 00:47:11,630
like something else was reference was

00:47:09,319 --> 00:47:12,980
referencing this object or that we

00:47:11,630 --> 00:47:17,869
wouldn't expect you it should show up

00:47:12,980 --> 00:47:19,250
here so that gives you a good idea so

00:47:17,869 --> 00:47:21,200
out of curiosity we can look at the

00:47:19,250 --> 00:47:23,329
Global's ID as well so in the in the

00:47:21,200 --> 00:47:24,740
previous one you can have the ID here

00:47:23,329 --> 00:47:26,720
for the global scope and if you do that

00:47:24,740 --> 00:47:30,770
you can see all the familiar PHP things

00:47:26,720 --> 00:47:32,450
so this is get post cookie files request

00:47:30,770 --> 00:47:37,160
server all of that stuff is here in

00:47:32,450 --> 00:47:39,410
memory in the global scope so can we

00:47:37,160 --> 00:47:40,579
make that parser object go away I mean

00:47:39,410 --> 00:47:43,630
we don't really need we know we don't

00:47:40,579 --> 00:47:45,829
need it so is there a way to do that

00:47:43,630 --> 00:47:47,930
well PHP gives you the option of

00:47:45,829 --> 00:47:49,640
creating that object on the fly and then

00:47:47,930 --> 00:47:51,260
calling that function on the newly

00:47:49,640 --> 00:47:53,780
created object but without really

00:47:51,260 --> 00:47:55,670
keeping it variable attached to it so

00:47:53,780 --> 00:47:57,049
does it change things if we do that

00:47:55,670 --> 00:48:01,280
instead I mean we know we don't need

00:47:57,049 --> 00:48:03,859
that parser variable anymore so then we

00:48:01,280 --> 00:48:05,180
run the analyzer again after we have run

00:48:03,859 --> 00:48:07,250
the summary commit command again and

00:48:05,180 --> 00:48:10,099
then it's gone it's no longer in memory

00:48:07,250 --> 00:48:12,170
so again we've got the hard proof that

00:48:10,099 --> 00:48:16,309
we've done it and it's no longer here in

00:48:12,170 --> 00:48:17,720
memory and this is something this is a

00:48:16,309 --> 00:48:19,130
good trick to keep in mind that that

00:48:17,720 --> 00:48:20,210
sort of dynamic reference if you've if

00:48:19,130 --> 00:48:22,309
you know if you're creating an object

00:48:20,210 --> 00:48:23,960
just for a single use and it might not

00:48:22,309 --> 00:48:25,250
need it anymore especially if it's in

00:48:23,960 --> 00:48:26,869
the global scope and you want to make

00:48:25,250 --> 00:48:28,549
sure that it doesn't necessarily hog the

00:48:26,869 --> 00:48:30,650
memory that's a good trick to keep in

00:48:28,549 --> 00:48:32,210
mind and again you can run your analyzer

00:48:30,650 --> 00:48:35,210
to then find out if it's actually

00:48:32,210 --> 00:48:37,460
working or not so just to make it clear

00:48:35,210 --> 00:48:39,440
I have to be clear none of these things

00:48:37,460 --> 00:48:41,329
were in bronty's original code he didn't

00:48:39,440 --> 00:48:43,910
make any of those mistakes he's done his

00:48:41,329 --> 00:48:45,710
performance homework I have made a lot

00:48:43,910 --> 00:48:49,280
of edits to this code to make it to make

00:48:45,710 --> 00:48:53,660
it bad so thank you much for letting me

00:48:49,280 --> 00:48:55,790
use this so I hope it was useful to see

00:48:53,660 --> 00:48:58,099
the demo like this and I hope it seems a

00:48:55,790 --> 00:48:59,990
bit less scary now there are many many

00:48:58,099 --> 00:49:00,380
more tools out there all of them have

00:48:59,990 --> 00:49:01,880
read me

00:49:00,380 --> 00:49:04,700
so we can probably work out how to run

00:49:01,880 --> 00:49:06,650
them it might seem a bit I mean this was

00:49:04,700 --> 00:49:08,269
a small team demo and I already knew

00:49:06,650 --> 00:49:10,519
where I was going with things normal

00:49:08,269 --> 00:49:12,619
performance optimization might seem very

00:49:10,519 --> 00:49:15,589
tedious at times they might seem a bit

00:49:12,619 --> 00:49:17,720
daunting but it is so rewarding at the

00:49:15,589 --> 00:49:19,279
end of the day it's really worth it I

00:49:17,720 --> 00:49:21,140
mean you know the feeling that you get

00:49:19,279 --> 00:49:23,480
when you get the final result and you go

00:49:21,140 --> 00:49:25,579
yes you know I've got it down from like

00:49:23,480 --> 00:49:26,930
three seconds to not 0.5 seconds it's

00:49:25,579 --> 00:49:30,980
really worth it even though it might

00:49:26,930 --> 00:49:34,339
seem a bit tedious some key takeaways

00:49:30,980 --> 00:49:37,549
just to summarise prioritize what to

00:49:34,339 --> 00:49:39,079
focus on look at the gains versus effort

00:49:37,549 --> 00:49:40,700
it would take to optimize something and

00:49:39,079 --> 00:49:44,180
focus on the most important things first

00:49:40,700 --> 00:49:45,650
I mean the reality of of most of for

00:49:44,180 --> 00:49:47,480
most of us is that we're given a

00:49:45,650 --> 00:49:48,740
specific time to optimize a project and

00:49:47,480 --> 00:49:50,240
you're just never going to do everything

00:49:48,740 --> 00:49:53,779
that you want to do so just focus on the

00:49:50,240 --> 00:49:55,609
most important things and ignore micro

00:49:53,779 --> 00:49:57,250
optimizations unless you really really

00:49:55,609 --> 00:49:59,779
have a good reason to worry about them

00:49:57,250 --> 00:50:01,880
design changes sometimes redesigning

00:49:59,779 --> 00:50:03,589
your whole app like actually changing

00:50:01,880 --> 00:50:05,900
how it works is way more important than

00:50:03,589 --> 00:50:07,900
single code changes or your flipping of

00:50:05,900 --> 00:50:10,609
your single quotes or double quotes

00:50:07,900 --> 00:50:12,289
usually try to focus on the hot paths I

00:50:10,609 --> 00:50:14,660
mean you can use the exit proof as a

00:50:12,289 --> 00:50:16,609
guidance for for what's the fault path

00:50:14,660 --> 00:50:17,990
but not always know sometimes the hot

00:50:16,609 --> 00:50:20,059
path is there because that's the nature

00:50:17,990 --> 00:50:22,819
of the app so definitely don't ignore

00:50:20,059 --> 00:50:26,619
the rest of the tree you know don't sort

00:50:22,819 --> 00:50:28,609
of take it for a silver bullet always

00:50:26,619 --> 00:50:29,900
customise your optimization for your

00:50:28,609 --> 00:50:31,609
needs I mean there is usually more than

00:50:29,900 --> 00:50:33,200
one way to optimize there's usually more

00:50:31,609 --> 00:50:35,240
than one correct answer to make

00:50:33,200 --> 00:50:36,859
something better and don't be afraid to

00:50:35,240 --> 00:50:38,900
break the rules don't be afraid to break

00:50:36,859 --> 00:50:40,480
the rules if it works for your use case

00:50:38,900 --> 00:50:42,829
so it's kind of the same thing as

00:50:40,480 --> 00:50:44,990
denormalizing databases I mean in theory

00:50:42,829 --> 00:50:46,490
you shouldn't do that because you're did

00:50:44,990 --> 00:50:48,920
normalizing things but actually if it

00:50:46,490 --> 00:50:50,180
works for your particular use case then

00:50:48,920 --> 00:50:51,710
you should do it and it's the same with

00:50:50,180 --> 00:50:53,240
performance I mean you know maybe you're

00:50:51,710 --> 00:50:54,589
not doing something textbook correct but

00:50:53,240 --> 00:50:59,150
if it works for your case if it makes it

00:50:54,589 --> 00:51:00,980
faster don't be afraid to do that use

00:50:59,150 --> 00:51:04,549
the data to prove your guesses measure

00:51:00,980 --> 00:51:06,619
everything keep in mind to do this with

00:51:04,549 --> 00:51:08,599
minimal impact on performance especially

00:51:06,619 --> 00:51:10,430
in production so try and avoid profiling

00:51:08,599 --> 00:51:11,660
in production if you can you can just do

00:51:10,430 --> 00:51:14,030
all of that stuff in your web

00:51:11,660 --> 00:51:15,500
development but

00:51:14,030 --> 00:51:17,090
always measure everything always have

00:51:15,500 --> 00:51:19,820
the benchmarks to prove your your

00:51:17,090 --> 00:51:22,010
guesses and remember that performance

00:51:19,820 --> 00:51:23,690
optimization is an iterative process I

00:51:22,010 --> 00:51:25,280
mean it's not enough to do it once you

00:51:23,690 --> 00:51:27,260
usually have to come back to it over

00:51:25,280 --> 00:51:29,900
time you need to know your trends over

00:51:27,260 --> 00:51:32,240
time you need to observe how how they

00:51:29,900 --> 00:51:34,130
change over time so have monitoring in

00:51:32,240 --> 00:51:37,340
place maybe have some other thing in

00:51:34,130 --> 00:51:39,290
place based on the trends you could run

00:51:37,340 --> 00:51:41,630
your automated load tests to prefer it

00:51:39,290 --> 00:51:43,010
prevents the grading performance so you

00:51:41,630 --> 00:51:44,630
know you could run it after every commit

00:51:43,010 --> 00:51:47,600
even to make sure that it doesn't make

00:51:44,630 --> 00:51:49,310
things worse and for the VIP experience

00:51:47,600 --> 00:51:50,600
this is something that C does and they

00:51:49,310 --> 00:51:52,580
have a really good blog post about it

00:51:50,600 --> 00:51:55,040
they actually have a graph which which

00:51:52,580 --> 00:51:56,600
shows the memory usage and they've

00:51:55,040 --> 00:51:59,000
correlated that with deployments so

00:51:56,600 --> 00:52:01,100
actually they have vertical lines for

00:51:59,000 --> 00:52:03,290
every time they deploy something and

00:52:01,100 --> 00:52:05,270
then you can easily see that after this

00:52:03,290 --> 00:52:06,710
deployment the graph suddenly spikes so

00:52:05,270 --> 00:52:09,680
you know exactly what deployment which

00:52:06,710 --> 00:52:11,510
deployment made things worse which again

00:52:09,680 --> 00:52:15,470
just helps you narrow things down a lot

00:52:11,510 --> 00:52:17,680
faster that is all for me thank you very

00:52:15,470 --> 00:52:17,680

YouTube URL: https://www.youtube.com/watch?v=4hB7tGcz1l8


