Title: PHP UK Conference 2018 - Freek Van der Herton - Creating a dashboard with Laravel, Vue and Pusher
Publication date: 2018-03-27
Playlist: PHP UK Conference 2018
Description: 
	Building a realtime dashboard is probably something every developer wants to do at one point. In this talk I'll explain how we leveraged both Laravel 5.5 and Vue to build the dashboard. After demonstrating the dashboard itself we'll take a deep dive in the code. We'll take a look at the entire flow: the grid system, how events are broadcasted using Pusher, some cool Vue mixins and much more. After this talk you'll be able to setup your own dashboard using our open sourced code.
Captions: 
	00:00:02,929 --> 00:00:08,670
I'm going to be speaking about a

00:00:05,790 --> 00:00:12,630
dashboard I created a while ago using a

00:00:08,670 --> 00:00:14,639
laravel fuel and pusher I'm phreak from

00:00:12,630 --> 00:00:16,859
the hectare I'm a partner and a

00:00:14,639 --> 00:00:20,640
developer at an entropy company called

00:00:16,859 --> 00:00:23,609
Spa see like many of you I'm active on

00:00:20,640 --> 00:00:26,609
twitter my handle is fake Marissa and I

00:00:23,609 --> 00:00:30,560
have got a blog Merced LBE where I talk

00:00:26,609 --> 00:00:33,420
about modern PHP and larval development

00:00:30,560 --> 00:00:37,440
now I do a couple of other things as

00:00:33,420 --> 00:00:40,440
well I run the local PHP user group in

00:00:37,440 --> 00:00:42,719
entropy together with my buddies Driss

00:00:40,440 --> 00:00:44,969
and Fredrik if you're ever in the

00:00:42,719 --> 00:00:47,610
vicinity of our beautiful city I want to

00:00:44,969 --> 00:00:49,770
speak at our user group let us know we

00:00:47,610 --> 00:00:52,440
are looking for speakers of any level

00:00:49,770 --> 00:00:55,890
and the talks of any length so get in

00:00:52,440 --> 00:00:59,250
touch I also have a side project called

00:00:55,890 --> 00:01:01,620
oh dear app which is a South that can

00:00:59,250 --> 00:01:03,989
monitor your websites to see if they're

00:01:01,620 --> 00:01:06,000
up if they are not containing mixed

00:01:03,989 --> 00:01:09,060
content it will send you notifications

00:01:06,000 --> 00:01:13,170
if there are broken links around its yet

00:01:09,060 --> 00:01:17,460
my first SAS app which I launched like a

00:01:13,170 --> 00:01:19,860
month ago but my main gig is spa see

00:01:17,460 --> 00:01:22,290
that's that's my company it's been

00:01:19,860 --> 00:01:24,750
around since 2003 with q8 websites

00:01:22,290 --> 00:01:27,119
applications and web shops our team is

00:01:24,750 --> 00:01:29,579
quite small we're only 7 developers and

00:01:27,119 --> 00:01:33,150
one manager and yeah we specialize in

00:01:29,579 --> 00:01:36,270
larval development now before heading

00:01:33,150 --> 00:01:38,579
into the wonderful world of dashboards

00:01:36,270 --> 00:01:43,170
itself I want to say a few words about

00:01:38,579 --> 00:01:46,049
open source software at our company we

00:01:43,170 --> 00:01:48,119
create a lot of open source software and

00:01:46,049 --> 00:01:51,240
we have a big list on our company

00:01:48,119 --> 00:01:54,990
website of all the packages that that

00:01:51,240 --> 00:01:59,280
we've created we currently have hundred

00:01:54,990 --> 00:02:00,810
60 public repositories on github our

00:01:59,280 --> 00:02:03,210
packages that have been downloaded now

00:02:00,810 --> 00:02:06,119
for 9 million times and they are being

00:02:03,210 --> 00:02:09,119
downloaded now for 1 million times a

00:02:06,119 --> 00:02:12,150
month which is quite nice for a company

00:02:09,119 --> 00:02:15,659
that is small of

00:02:12,150 --> 00:02:18,689
sighs and we see that creating packages

00:02:15,659 --> 00:02:21,750
has a lot of benefits for us

00:02:18,689 --> 00:02:24,590
of course we learn a lot by just solving

00:02:21,750 --> 00:02:27,629
the problem the package tries to tackle

00:02:24,590 --> 00:02:30,060
we have to write quality documentation

00:02:27,629 --> 00:02:33,000
because without documentation nobody

00:02:30,060 --> 00:02:36,780
will know how to use our stuff we have

00:02:33,000 --> 00:02:39,890
to write very good tests because without

00:02:36,780 --> 00:02:44,040
this nobody is gonna trust our packages

00:02:39,890 --> 00:02:46,799
if you take a look at the code then I

00:02:44,040 --> 00:02:49,829
hope you'll conclude that we know our

00:02:46,799 --> 00:02:53,010
way around PHP and laravel and of course

00:02:49,829 --> 00:02:59,010
we're also using those packages in our

00:02:53,010 --> 00:03:00,780
own projects and if you're in a place in

00:02:59,010 --> 00:03:03,560
your company where you can advocate the

00:03:00,780 --> 00:03:06,090
development of open source software I

00:03:03,560 --> 00:03:09,480
highly encourage you to do so because

00:03:06,090 --> 00:03:12,180
they are really nothing but benefits now

00:03:09,480 --> 00:03:15,540
I get asked a lot how does our company

00:03:12,180 --> 00:03:18,209
manage so creating and maintaining so

00:03:15,540 --> 00:03:20,069
much open-source software that's really

00:03:18,209 --> 00:03:23,519
a talk of its own but I've blogged about

00:03:20,069 --> 00:03:27,720
it and that's that last link on the

00:03:23,519 --> 00:03:29,579
slide here now all those packages I

00:03:27,720 --> 00:03:32,609
should have mentioned that they are not

00:03:29,579 --> 00:03:36,389
entirely free there's special license on

00:03:32,609 --> 00:03:38,150
them called postcard where and if any of

00:03:36,389 --> 00:03:41,129
our stuff makes it into your production

00:03:38,150 --> 00:03:44,569
environment you are required to send us

00:03:41,129 --> 00:03:47,680
a postcard this is a this is our address

00:03:44,569 --> 00:03:49,840
currently missing nine million postcards

00:03:47,680 --> 00:03:55,750
[Laughter]

00:03:49,840 --> 00:03:58,090
so get your license in order we we have

00:03:55,750 --> 00:04:02,709
a wall magnetic wall in our office where

00:03:58,090 --> 00:04:05,080
every postcard gets its place now let's

00:04:02,709 --> 00:04:07,780
turn around in our office this is our

00:04:05,080 --> 00:04:09,730
actual office and what you see there on

00:04:07,780 --> 00:04:12,489
the other side of the wall is a

00:04:09,730 --> 00:04:16,630
dashboard let's step in a little bit

00:04:12,489 --> 00:04:20,799
closer there we are that's our dashboard

00:04:16,630 --> 00:04:24,160
now before taking a technical dive into

00:04:20,799 --> 00:04:27,490
it let's first discuss what was being

00:04:24,160 --> 00:04:32,200
displayed here now the first style here

00:04:27,490 --> 00:04:36,070
is a Twitter tile it shows in real-time

00:04:32,200 --> 00:04:40,350
each tweets where our company is is

00:04:36,070 --> 00:04:44,229
mentioned in now the next one is our

00:04:40,350 --> 00:04:46,180
color calendar tile it shows all the

00:04:44,229 --> 00:04:47,850
events that are important for our

00:04:46,180 --> 00:04:51,340
company

00:04:47,850 --> 00:04:54,190
each member of our team is quite

00:04:51,340 --> 00:04:55,660
passionate about music so we want to

00:04:54,190 --> 00:04:58,630
know which music is playing in our

00:04:55,660 --> 00:05:00,460
office and that tile displays that here

00:04:58,630 --> 00:05:03,460
it's yeah we were listening to an

00:05:00,460 --> 00:05:06,130
excellent number by Sonic Youth this

00:05:03,460 --> 00:05:08,710
style really needs no explanation that's

00:05:06,130 --> 00:05:12,580
just to whether at the time I can see

00:05:08,710 --> 00:05:15,250
that I took this screenshot on a

00:05:12,580 --> 00:05:19,450
particularly hot day in the summer it

00:05:15,250 --> 00:05:23,800
was 27 degrees at half past 10 so it was

00:05:19,450 --> 00:05:26,650
nice I've talked a little bit about our

00:05:23,800 --> 00:05:29,770
open source stuff for quite proud of

00:05:26,650 --> 00:05:32,950
that so we display some statistics of of

00:05:29,770 --> 00:05:36,280
the downloads these numbers we fetch via

00:05:32,950 --> 00:05:39,550
the packages the API I call this one the

00:05:36,280 --> 00:05:43,210
the happy tile this is the unhappy tile

00:05:39,550 --> 00:05:49,389
so it shows how many issues and PRS are

00:05:43,210 --> 00:05:53,020
open in the middle there's a tile for

00:05:49,389 --> 00:05:55,150
each member of our team and it displays

00:05:53,020 --> 00:05:59,979
the tasks of the things they should be

00:05:55,150 --> 00:06:01,330
should be working on we have here a tile

00:05:59,979 --> 00:06:04,900
that

00:06:01,330 --> 00:06:08,920
that says if our sites are up if any of

00:06:04,900 --> 00:06:12,670
our sites are down then then this style

00:06:08,920 --> 00:06:15,220
will become yellow and we will be the CA

00:06:12,670 --> 00:06:19,300
we should take a look at at this site

00:06:15,220 --> 00:06:23,290
and that is what is being displayed at

00:06:19,300 --> 00:06:26,740
our dashboard the dashboard itself is

00:06:23,290 --> 00:06:28,840
also completely open source in this repo

00:06:26,740 --> 00:06:32,350
on github you'll find the actual code

00:06:28,840 --> 00:06:35,440
that's being deployed on our server so

00:06:32,350 --> 00:06:37,450
yeah feel free to to fork it after this

00:06:35,440 --> 00:06:41,890
talk you'll be able to set up and

00:06:37,450 --> 00:06:45,090
customize a dashboard of your own okay

00:06:41,890 --> 00:06:50,170
let's get a little bit technical and

00:06:45,090 --> 00:06:53,980
start off with a high-level overview so

00:06:50,170 --> 00:06:57,490
in short the dashboard is a single HTML

00:06:53,980 --> 00:07:02,380
page it's being displayed full screen in

00:06:57,490 --> 00:07:04,330
a browser and once we load that page we

00:07:02,380 --> 00:07:07,000
will never reload it again because

00:07:04,330 --> 00:07:10,060
otherwise you see it build up and we

00:07:07,000 --> 00:07:12,970
want our dashboard to be very very calm

00:07:10,060 --> 00:07:17,740
we don't want to attract much attention

00:07:12,970 --> 00:07:20,980
to it that's why we don't reload it so

00:07:17,740 --> 00:07:24,490
what do we do to keep it up-to-date well

00:07:20,980 --> 00:07:29,110
with this we update the dashboard with

00:07:24,490 --> 00:07:32,710
the ava's script and every tile has its

00:07:29,110 --> 00:07:35,020
own update frequency so the packages

00:07:32,710 --> 00:07:39,390
style we update that once an hour and

00:07:35,020 --> 00:07:42,930
the clock is being updated once a second

00:07:39,390 --> 00:07:46,540
which technologies did you use for this

00:07:42,930 --> 00:07:48,970
laravel pusher and vue.js that are the

00:07:46,540 --> 00:07:51,910
three big ones now a quick show of hands

00:07:48,970 --> 00:07:54,810
who here is familiarity with laravel

00:07:51,910 --> 00:08:01,660
uses that ok quite some people nice

00:07:54,810 --> 00:08:05,680
pusher not so many a few hands of UJS ok

00:08:01,660 --> 00:08:08,410
also few heads now if you don't know a

00:08:05,680 --> 00:08:11,070
lot of rail pusher of you yes no problem

00:08:08,410 --> 00:08:16,230
I'm gonna take it slow so you can so

00:08:11,070 --> 00:08:18,510
can follow so first one la Rafael it

00:08:16,230 --> 00:08:20,670
really needs no introduction these days

00:08:18,510 --> 00:08:26,070
anymore I think everybody has at least

00:08:20,670 --> 00:08:27,450
heard of it it's a PHP framework for

00:08:26,070 --> 00:08:32,880
this project we use the latest version

00:08:27,450 --> 00:08:36,450
which is larval 5.6 and what it must do

00:08:32,880 --> 00:08:39,690
in our project is it will render that

00:08:36,450 --> 00:08:42,530
initial page and it also will fetch data

00:08:39,690 --> 00:08:48,390
from all the api's that the dashboard

00:08:42,530 --> 00:08:50,580
uses so for that list of events that's

00:08:48,390 --> 00:08:52,920
being displayed we use a Google Calendar

00:08:50,580 --> 00:08:55,590
for that so larva will reach out to the

00:08:52,920 --> 00:08:59,610
Google Calendar API to fetch the data

00:08:55,590 --> 00:09:01,200
for the current music that's playing in

00:08:59,610 --> 00:09:07,650
our office we use a service called

00:09:01,200 --> 00:09:13,200
last.fm for that which which has an API

00:09:07,650 --> 00:09:15,720
where we can since you can't let iTunes

00:09:13,200 --> 00:09:17,490
or Spotify sense your current track -

00:09:15,720 --> 00:09:20,340
and you have an API where you can fetch

00:09:17,490 --> 00:09:21,960
that back from larvell is also

00:09:20,340 --> 00:09:24,840
responsible in this project for

00:09:21,960 --> 00:09:27,270
broadcasting an event when new data

00:09:24,840 --> 00:09:33,570
arrives and that event that's going to

00:09:27,270 --> 00:09:36,720
be picked up by the client-side yeah

00:09:33,570 --> 00:09:42,380
I've already said a little bit about it

00:09:36,720 --> 00:09:44,940
so yeah we use a few api's to get data I

00:09:42,380 --> 00:09:47,430
searched around for a few packages to

00:09:44,940 --> 00:09:49,080
work with the Google Calendar API and

00:09:47,430 --> 00:09:51,540
with Twitter and with lots of them but I

00:09:49,080 --> 00:09:56,400
found none so we created a few packages

00:09:51,540 --> 00:09:59,340
of our own and we also use the excellent

00:09:56,400 --> 00:10:05,060
game peel apps get up an API package to

00:09:59,340 --> 00:10:07,860
get the statistics out of given pusher

00:10:05,060 --> 00:10:11,190
pusher is a service and they didn't

00:10:07,860 --> 00:10:13,920
describe themselves as a service that

00:10:11,190 --> 00:10:18,000
provides full duplex communications

00:10:13,920 --> 00:10:21,500
channel over a single TCP connection now

00:10:18,000 --> 00:10:24,720
that's a mouthful we tend to call these

00:10:21,500 --> 00:10:27,810
WebSockets but I like to call it magic

00:10:24,720 --> 00:10:31,380
because it is so fast and it is so

00:10:27,810 --> 00:10:34,940
reliable and we use this to transport

00:10:31,380 --> 00:10:39,660
events from the server to the browser so

00:10:34,940 --> 00:10:41,820
laravel will send a signal to pusher and

00:10:39,660 --> 00:10:44,580
pusher will send it off to the

00:10:41,820 --> 00:10:49,620
client-side it happens in real time it's

00:10:44,580 --> 00:10:53,610
really really fast it does it also in a

00:10:49,620 --> 00:10:56,040
secure way because there isn't really

00:10:53,610 --> 00:10:58,560
highly sensitive information being

00:10:56,040 --> 00:11:00,270
displayed on our dashboard but current

00:10:58,560 --> 00:11:01,080
tasks each member of our team should be

00:11:00,270 --> 00:11:03,210
working on

00:11:01,080 --> 00:11:06,660
we like that to be a little bit private

00:11:03,210 --> 00:11:09,750
I should also mention that pusher is a

00:11:06,660 --> 00:11:12,690
paid service but they have a free tier

00:11:09,750 --> 00:11:15,270
where we can I think send a hundred

00:11:12,690 --> 00:11:17,670
thousand events a day for free and the

00:11:15,270 --> 00:11:20,280
dashboard currently uses 4000 Defensor

00:11:17,670 --> 00:11:24,660
you're pretty good in the in the free

00:11:20,280 --> 00:11:29,820
tier sorry last technology

00:11:24,660 --> 00:11:33,690
few J's vue.js is a very easy to pick up

00:11:29,820 --> 00:11:40,290
Yahveh script framework and it makes it

00:11:33,690 --> 00:11:43,530
easy to make reusable components and in

00:11:40,290 --> 00:11:47,250
our dashboard each tile that you see on

00:11:43,530 --> 00:11:51,690
the dashboard is its own few component

00:11:47,250 --> 00:11:55,260
now each tiles each tile will listen for

00:11:51,690 --> 00:11:58,080
incoming events and when it sees an

00:11:55,260 --> 00:12:01,380
event coming in that is targeted at at

00:11:58,080 --> 00:12:04,430
it it will update itself with with the

00:12:01,380 --> 00:12:08,940
new information contained in the event

00:12:04,430 --> 00:12:12,150
now this is it the whole flow in little

00:12:08,940 --> 00:12:16,100
schema so we have the external services

00:12:12,150 --> 00:12:18,870
on the left here laravel will fetch new

00:12:16,100 --> 00:12:21,240
information and when it has new

00:12:18,870 --> 00:12:26,070
information it sends an HTTP request to

00:12:21,240 --> 00:12:30,270
pusher pusher we'll send it out to the

00:12:26,070 --> 00:12:32,250
browser via WebSockets that's in in a

00:12:30,270 --> 00:12:37,370
bird's-eye view how the dashboard is

00:12:32,250 --> 00:12:39,440
working now I can talk a lot about

00:12:37,370 --> 00:12:41,930
this dashboard but yeah it's more fun

00:12:39,440 --> 00:12:45,980
that you get a little bit of a feel of

00:12:41,930 --> 00:12:48,980
it and I'd like to just demonstrate some

00:12:45,980 --> 00:12:53,089
code to you what are we going to cover

00:12:48,980 --> 00:12:55,730
the grid system how can we position

00:12:53,089 --> 00:12:59,690
things on the dashboard spoiler it's

00:12:55,730 --> 00:13:01,460
really easy we're going to see how the

00:12:59,690 --> 00:13:02,570
clock tile works that's for the people

00:13:01,460 --> 00:13:05,089
that don't know

00:13:02,570 --> 00:13:08,360
UJ as well it's really a crash course

00:13:05,089 --> 00:13:10,490
interview then we are going to see the

00:13:08,360 --> 00:13:15,290
how the packages style works because we

00:13:10,490 --> 00:13:18,230
are using the the API so now we see the

00:13:15,290 --> 00:13:21,470
entire flow and then we'll have a little

00:13:18,230 --> 00:13:24,350
bit of fun with what a Twitter tile so

00:13:21,470 --> 00:13:26,960
there will be some live coding there I

00:13:24,350 --> 00:13:29,120
will use an internet connection

00:13:26,960 --> 00:13:31,339
lots of things can go wrong people said

00:13:29,120 --> 00:13:35,630
to me don't do this but we are going to

00:13:31,339 --> 00:13:41,720
do it okay let's do it

00:13:35,630 --> 00:13:45,260
moment of glory let's minimize keynote

00:13:41,720 --> 00:13:48,050
here for a sec and here I hope you can

00:13:45,260 --> 00:13:50,990
see this all yep

00:13:48,050 --> 00:13:53,089
this is a local version of the

00:13:50,990 --> 00:13:56,330
dashboards slightly adapted that

00:13:53,089 --> 00:13:58,190
yeah just runs on on my Mac here so you

00:13:56,330 --> 00:14:00,380
can see there's not a lot of information

00:13:58,190 --> 00:14:03,380
being displayed we have just just a

00:14:00,380 --> 00:14:04,959
clock here now let's switch over to

00:14:03,380 --> 00:14:08,690
phpstorm

00:14:04,959 --> 00:14:12,260
is this readable in the back yeah okay

00:14:08,690 --> 00:14:14,240
cool so people that have experienced

00:14:12,260 --> 00:14:16,610
with laravel they immediately recognize

00:14:14,240 --> 00:14:21,200
hey this is the structure of a laravel

00:14:16,610 --> 00:14:23,930
application there's only one view in

00:14:21,200 --> 00:14:26,779
this dashboard being used namely the

00:14:23,930 --> 00:14:28,520
view that that you that you see Anna

00:14:26,779 --> 00:14:33,110
laravel views live in the resources

00:14:28,520 --> 00:14:37,580
folder views dashboard and we see we see

00:14:33,110 --> 00:14:40,279
this it's only yeah it's it's not much

00:14:37,580 --> 00:14:42,830
HTML you you can see that we have some

00:14:40,279 --> 00:14:44,450
rear tags here going on those are the

00:14:42,830 --> 00:14:47,089
few components we'll dive into that

00:14:44,450 --> 00:14:50,279
later what I want to show you first is

00:14:47,089 --> 00:14:54,300
that every tile here

00:14:50,279 --> 00:14:56,759
as a position thing going on e1 here for

00:14:54,300 --> 00:14:58,889
the time madam you should think of the

00:14:56,759 --> 00:15:01,860
dashboard a little bit like an Excel

00:14:58,889 --> 00:15:06,060
spreadsheet where every row has a number

00:15:01,860 --> 00:15:10,410
and every column has as a letter so if I

00:15:06,060 --> 00:15:13,949
put this in a 1 this will go into the

00:15:10,410 --> 00:15:14,850
top let me clear out all this garbage

00:15:13,949 --> 00:15:19,589
here first

00:15:14,850 --> 00:15:24,959
Oh a little bit too much only this

00:15:19,589 --> 00:15:27,569
should go and this should go as well so

00:15:24,959 --> 00:15:28,309
we have a very Spartan dashboard going

00:15:27,569 --> 00:15:32,009
on here

00:15:28,309 --> 00:15:36,809
let's switch to the browser sure enough

00:15:32,009 --> 00:15:40,259
we have that clock here running now if

00:15:36,809 --> 00:15:43,649
you want to you can make it a little bit

00:15:40,259 --> 00:15:46,589
bigger your tile the the pushes

00:15:43,649 --> 00:15:48,899
positioning system supports ranges so if

00:15:46,589 --> 00:15:55,860
I want to make this a little bit wider I

00:15:48,899 --> 00:15:58,350
just put a right range here you can see

00:15:55,860 --> 00:16:01,290
it's a little bit wider what you can

00:15:58,350 --> 00:16:05,160
also do of course is if you want to have

00:16:01,290 --> 00:16:08,639
multiple clocks maybe for some reason

00:16:05,160 --> 00:16:11,639
you want to display another clock can

00:16:08,639 --> 00:16:15,540
put this on the on the second row

00:16:11,639 --> 00:16:18,660
another clock now for 4 o'clock this

00:16:15,540 --> 00:16:21,089
doesn't really make sense but remember

00:16:18,660 --> 00:16:23,250
those tasks been displayed fine for each

00:16:21,089 --> 00:16:24,600
member of our our team that's actually

00:16:23,250 --> 00:16:26,970
the same tile with just another

00:16:24,600 --> 00:16:30,089
parameter on it so yeah you can see

00:16:26,970 --> 00:16:33,439
positioning things is very easy if you

00:16:30,089 --> 00:16:37,529
want to have your dashboard have an an

00:16:33,439 --> 00:16:39,689
extra row or column just add another one

00:16:37,529 --> 00:16:42,769
here and you have a you have an extra

00:16:39,689 --> 00:16:50,309
row so that's that's how that works

00:16:42,769 --> 00:16:52,439
cool yeah yeah we at spa see we have one

00:16:50,309 --> 00:16:55,829
employee who's in a in different time

00:16:52,439 --> 00:16:58,439
zone and so yeah we display his time as

00:16:55,829 --> 00:17:00,770
well on it so that's a good use case for

00:16:58,439 --> 00:17:06,840
multiple clocks

00:17:00,770 --> 00:17:11,310
um okay let's restore everything here so

00:17:06,840 --> 00:17:14,430
we're back back to the original

00:17:11,310 --> 00:17:19,920
dashboard here okay Oh still that

00:17:14,430 --> 00:17:23,010
positioning thing back okay let's take a

00:17:19,920 --> 00:17:25,110
look at how that that clock works so

00:17:23,010 --> 00:17:29,760
this is the little view crash course

00:17:25,110 --> 00:17:33,840
that I'm going to get so I've said that

00:17:29,760 --> 00:17:37,080
yeah we have some really funny HTML tags

00:17:33,840 --> 00:17:40,530
here those are actual view components

00:17:37,080 --> 00:17:44,760
few will scan the DOM and it will

00:17:40,530 --> 00:17:48,570
replace the HTML in the strange attacks

00:17:44,760 --> 00:17:51,570
by the HTML that's defined into that

00:17:48,570 --> 00:17:54,380
component so we have that time.whether

00:17:51,570 --> 00:17:58,370
thing here going on let's take a look at

00:17:54,380 --> 00:18:02,330
that component itself now in laravel all

00:17:58,370 --> 00:18:05,370
JavaScript lives in resources assets

00:18:02,330 --> 00:18:08,340
JavaScript and I've created a folder

00:18:05,370 --> 00:18:11,430
here called components you can see that

00:18:08,340 --> 00:18:12,930
for each style we have a file here now

00:18:11,430 --> 00:18:16,560
let's take a look at that time weather

00:18:12,930 --> 00:18:23,460
component thing and this is a view

00:18:16,560 --> 00:18:26,910
component so in a component there can be

00:18:23,460 --> 00:18:30,060
three sections namely a templating

00:18:26,910 --> 00:18:35,040
section where HTML lives and this is the

00:18:30,060 --> 00:18:41,220
HTML that will actually be replaced or

00:18:35,040 --> 00:18:43,890
that will replace that this tag here we

00:18:41,220 --> 00:18:46,950
have a script section here where all

00:18:43,890 --> 00:18:48,900
behavior of the component is and we

00:18:46,950 --> 00:18:51,030
don't used in this project but you could

00:18:48,900 --> 00:18:54,420
also have a style section where you can

00:18:51,030 --> 00:18:57,510
put CSS that this component uses in but

00:18:54,420 --> 00:18:59,130
for this project we've done it in a

00:18:57,510 --> 00:19:01,610
little bit more traditional way where we

00:18:59,130 --> 00:19:06,090
have all the CSS in in separate files

00:19:01,610 --> 00:19:12,280
now let's take a look at the HTML here

00:19:06,090 --> 00:19:15,020
so this is what what what will be

00:19:12,280 --> 00:19:19,299
did this HTML will end up in the Dom

00:19:15,020 --> 00:19:22,940
eventually it gets here that we have a

00:19:19,299 --> 00:19:26,780
few parameters here we have your date

00:19:22,940 --> 00:19:30,440
and the time and each view component has

00:19:26,780 --> 00:19:33,650
a thing in it called state so that's the

00:19:30,440 --> 00:19:40,309
information where that's most important

00:19:33,650 --> 00:19:45,070
for rendering this component if I go to

00:19:40,309 --> 00:19:49,580
the behavior here then you can see here

00:19:45,070 --> 00:19:52,610
the data function contains the initial

00:19:49,580 --> 00:19:57,110
values of of that state of data it's

00:19:52,610 --> 00:20:00,049
it's an empty string a view component

00:19:57,110 --> 00:20:02,900
also has a created method which we which

00:20:00,049 --> 00:20:05,540
you can compare to a constructor in a

00:20:02,900 --> 00:20:08,210
pitch B class now what are we going to

00:20:05,540 --> 00:20:13,100
do here we are going to call a function

00:20:08,210 --> 00:20:15,620
called refresh time that function

00:20:13,100 --> 00:20:18,140
refresh time what's it going to do it's

00:20:15,620 --> 00:20:22,610
going to use a popular JavaScript

00:20:18,140 --> 00:20:26,510
library called moment to parse dates and

00:20:22,610 --> 00:20:29,990
times and it's going to set the actual

00:20:26,510 --> 00:20:36,200
date in the actual time in to that date

00:20:29,990 --> 00:20:38,419
and time state of this component and

00:20:36,200 --> 00:20:41,270
what you should know is whenever you

00:20:38,419 --> 00:20:44,809
update the state of a component the

00:20:41,270 --> 00:20:47,210
component will rerender itself so as

00:20:44,809 --> 00:20:49,610
soon as I put another thing in the time

00:20:47,210 --> 00:20:53,000
variable here the component will

00:20:49,610 --> 00:20:56,510
rerender now that refresh time method we

00:20:53,000 --> 00:20:59,000
also tell to - Yahveh script hey run

00:20:56,510 --> 00:21:03,380
this function every second so every

00:20:59,000 --> 00:21:05,750
second that time variable and that yeah

00:21:03,380 --> 00:21:11,330
that date and time variable are being

00:21:05,750 --> 00:21:15,890
updated and that's how you get this in

00:21:11,330 --> 00:21:18,080
the HTML that's very basic few things I

00:21:15,890 --> 00:21:20,409
hope I've explained it a little bit

00:21:18,080 --> 00:21:24,049
correctly

00:21:20,409 --> 00:21:26,890
okay let's delve a little bit deeper and

00:21:24,049 --> 00:21:30,770
take a look at the packages component

00:21:26,890 --> 00:21:32,900
because that date time component is just

00:21:30,770 --> 00:21:38,900
JavaScript there isn't anything

00:21:32,900 --> 00:21:44,750
server related going on okay let's close

00:21:38,900 --> 00:21:47,390
some folders and let's see how the

00:21:44,750 --> 00:21:52,190
dashboard fetches the data from from

00:21:47,390 --> 00:21:55,340
packages so if you use larval and you

00:21:52,190 --> 00:21:57,409
know that every command is in the

00:21:55,340 --> 00:22:00,049
console folder here and I've created the

00:21:57,409 --> 00:22:05,299
components folder here you can see that

00:22:00,049 --> 00:22:10,210
I have a surfer here for each for each

00:22:05,299 --> 00:22:15,289
tile that fetches data from from api's

00:22:10,210 --> 00:22:22,640
so I have got here a package a package

00:22:15,289 --> 00:22:24,500
East tasks called fetch notice now again

00:22:22,640 --> 00:22:27,230
if you use larval you immediately

00:22:24,500 --> 00:22:32,480
recognize a this is a command I can run

00:22:27,230 --> 00:22:35,600
it from from the terminal like this but

00:22:32,480 --> 00:22:38,299
you can also schedule those components

00:22:35,600 --> 00:22:42,260
I've said that that the dashboard will

00:22:38,299 --> 00:22:45,559
fetch data periodically we just use

00:22:42,260 --> 00:22:48,049
Laura Pels built-in scheduler for that

00:22:45,559 --> 00:22:52,220
and in laravel you can schedule commands

00:22:48,049 --> 00:22:53,990
in the so called console kernel and this

00:22:52,220 --> 00:22:55,789
is that kernel and when I scroll a

00:22:53,990 --> 00:22:59,929
little bit down you guys hear that we

00:22:55,789 --> 00:23:02,049
have scheduled command and for the fetch

00:22:59,929 --> 00:23:06,710
packages total you can see here that

00:23:02,049 --> 00:23:10,250
laravel will just execute this every

00:23:06,710 --> 00:23:15,740
hour and that's how we automatically

00:23:10,250 --> 00:23:20,500
fetch a new data now let's go to the

00:23:15,740 --> 00:23:25,549
packages task itself what do we do here

00:23:20,500 --> 00:23:29,480
yeah we spin up a new instance of our

00:23:25,549 --> 00:23:33,490
packages API and then we are going to do

00:23:29,480 --> 00:23:37,070
some mumbo-jumbo here to fetch all the

00:23:33,490 --> 00:23:38,510
thirty-six of our packages and we are

00:23:37,070 --> 00:23:42,260
going to sum it up and the most

00:23:38,510 --> 00:23:44,000
important bit is that the total daily

00:23:42,260 --> 00:23:48,770
downloads monthly downloads and total

00:23:44,000 --> 00:23:52,280
downloads they will be returned as an

00:23:48,770 --> 00:23:57,110
array in this totals variable so here we

00:23:52,280 --> 00:24:00,470
have an array with these keys in it how

00:23:57,110 --> 00:24:01,790
are we going to transport it to to push

00:24:00,470 --> 00:24:04,220
him well

00:24:01,790 --> 00:24:07,610
Marvel has a built-in system for that as

00:24:04,220 --> 00:24:12,050
well you can say in laravel hey fire of

00:24:07,610 --> 00:24:14,450
this event and broadcast it to the the

00:24:12,050 --> 00:24:17,090
pro Scout broadcasting service that's

00:24:14,450 --> 00:24:19,390
being configured now that broadcasting

00:24:17,090 --> 00:24:22,070
service for this project is its pushing

00:24:19,390 --> 00:24:24,710
let's see how we can fire off an event

00:24:22,070 --> 00:24:27,200
to push so it's very easy we have a

00:24:24,710 --> 00:24:29,030
helper function called event and we have

00:24:27,200 --> 00:24:31,040
a class here totals fetched which

00:24:29,030 --> 00:24:34,760
represents that event and we pass it

00:24:31,040 --> 00:24:38,270
that totals variable if I open up that

00:24:34,760 --> 00:24:41,840
event here gets here that that's a

00:24:38,270 --> 00:24:44,060
simple class and what we do here in the

00:24:41,840 --> 00:24:47,660
constructor is yeah we get that array

00:24:44,060 --> 00:24:51,140
and then we set every key in that array

00:24:47,660 --> 00:24:52,100
to a public property on that class why

00:24:51,140 --> 00:24:54,410
do we do that

00:24:52,100 --> 00:24:58,330
because in laravel if you are going to

00:24:54,410 --> 00:25:02,600
broadcast an event then the data being

00:24:58,330 --> 00:25:04,910
broadcasted that are the public property

00:25:02,600 --> 00:25:06,800
so larva will just see aid these are the

00:25:04,910 --> 00:25:08,990
public properties of the event class I'm

00:25:06,800 --> 00:25:12,920
going to broadcast that that's why we

00:25:08,990 --> 00:25:15,050
put the public properties here now if I

00:25:12,920 --> 00:25:17,600
delve a little bit deeper here you can

00:25:15,050 --> 00:25:20,780
see here that a total fetched class

00:25:17,600 --> 00:25:23,840
extends the dashboard event class and if

00:25:20,780 --> 00:25:26,210
I open up that they can see here that

00:25:23,840 --> 00:25:28,670
this class implements an interface

00:25:26,210 --> 00:25:31,280
called should broadcast and should

00:25:28,670 --> 00:25:33,860
broadcast that's the hint that you give

00:25:31,280 --> 00:25:37,130
chlorophyll hey this event should really

00:25:33,860 --> 00:25:39,890
be broadcasted it also has a single

00:25:37,130 --> 00:25:42,230
method called broadcast on and we use a

00:25:39,890 --> 00:25:46,270
private channel called dashboard now

00:25:42,230 --> 00:25:49,570
pusher you can you can use

00:25:46,270 --> 00:25:51,190
different channels to to push things to

00:25:49,570 --> 00:25:54,510
push you it's a little bit like a radio

00:25:51,190 --> 00:25:56,950
I transmit something on this channel and

00:25:54,510 --> 00:26:01,240
only the ones listening on that channel

00:25:56,950 --> 00:26:03,640
will will receive it we're using one

00:26:01,240 --> 00:26:10,450
single channel in this project called

00:26:03,640 --> 00:26:14,850
called dashboard okay before heading

00:26:10,450 --> 00:26:17,890
over to the client site to see how we

00:26:14,850 --> 00:26:22,120
captured an event let's just see that

00:26:17,890 --> 00:26:27,940
it's actually working this part okay so

00:26:22,120 --> 00:26:31,750
if I go to the forum again you can see

00:26:27,940 --> 00:26:35,860
here that we have zeros here all around

00:26:31,750 --> 00:26:37,600
I have also here open a second tap on

00:26:35,860 --> 00:26:41,140
the pusher service it clear this out

00:26:37,600 --> 00:26:46,120
this is the debug console of pusher it

00:26:41,140 --> 00:26:48,220
shows everything that pusher receives

00:26:46,120 --> 00:26:55,150
from our larval application and what

00:26:48,220 --> 00:26:58,179
information is being pushed okay I'm in

00:26:55,150 --> 00:27:02,040
the wrong directory here it should be

00:26:58,179 --> 00:27:02,040
dashboard demo sorry about that

00:27:02,790 --> 00:27:07,630
if I just run that command manually now

00:27:06,820 --> 00:27:13,170
that you see

00:27:07,630 --> 00:27:13,170
it's called fetch package it's totals

00:27:13,770 --> 00:27:18,179
let's run

00:27:15,160 --> 00:27:22,360
I should explain this I have a command a

00:27:18,179 --> 00:27:24,520
here and that's just alias to PHP

00:27:22,360 --> 00:27:28,929
artisan so that I don't have to type

00:27:24,520 --> 00:27:32,650
that the whole time so a dashboard fetch

00:27:28,929 --> 00:27:34,750
packages totals and with any luck we

00:27:32,650 --> 00:27:37,750
should see some numbers pop in Europe

00:27:34,750 --> 00:27:42,309
and yeah this is the live count of our

00:27:37,750 --> 00:27:45,070
packages starts so it has worked and if

00:27:42,309 --> 00:27:47,470
I go to pusher here you can see R that

00:27:45,070 --> 00:27:50,290
there was an event on the private

00:27:47,470 --> 00:27:52,840
dashboard channel and the event was

00:27:50,290 --> 00:27:55,960
total fetched and this data was being

00:27:52,840 --> 00:27:57,220
transferred now that stars thing that

00:27:55,960 --> 00:27:59,059
sucks a little bit that's from a

00:27:57,220 --> 00:28:02,269
previous version I should should

00:27:59,059 --> 00:28:05,480
ended up so don't mind that but you see

00:28:02,269 --> 00:28:10,100
that the public properties of that event

00:28:05,480 --> 00:28:14,269
are being transmitted okay let's take a

00:28:10,100 --> 00:28:17,600
look at the client side at how we catch

00:28:14,269 --> 00:28:20,299
the event so that's back into the

00:28:17,600 --> 00:28:23,509
resources folder assets JavaScript

00:28:20,299 --> 00:28:25,999
components and we have a packages

00:28:23,509 --> 00:28:29,870
component here it's a view component so

00:28:25,999 --> 00:28:31,759
it also has that HTML section and it has

00:28:29,870 --> 00:28:33,830
that behavior section a little bit of

00:28:31,759 --> 00:28:36,169
you have a script going down here you

00:28:33,830 --> 00:28:40,100
can see here that we have that daily

00:28:36,169 --> 00:28:44,749
monthly total thing here you're going on

00:28:40,100 --> 00:28:48,230
and if I go here into the behavior of it

00:28:44,749 --> 00:28:51,860
there are a few methods in it and one is

00:28:48,230 --> 00:28:55,360
get event handlers and one of the event

00:28:51,860 --> 00:29:00,200
handlers here is packages totals fetched

00:28:55,360 --> 00:29:03,799
so this function will be executed

00:29:00,200 --> 00:29:06,200
whenever we see this event coming in and

00:29:03,799 --> 00:29:08,960
that function gets a response and what

00:29:06,200 --> 00:29:10,940
are we going to do we are going to take

00:29:08,960 --> 00:29:13,399
off the daily monthly and total

00:29:10,940 --> 00:29:15,049
variables of the response and we'll put

00:29:13,399 --> 00:29:18,230
it into the internal state of the

00:29:15,049 --> 00:29:20,720
component and remember whenever we

00:29:18,230 --> 00:29:23,600
update the internal state of the

00:29:20,720 --> 00:29:26,749
component the component will rerender

00:29:23,600 --> 00:29:34,669
itself and that's why you see these

00:29:26,749 --> 00:29:37,970
numbers coming in okay let's delve a

00:29:34,669 --> 00:29:40,639
little bit deeper into that get event

00:29:37,970 --> 00:29:43,190
handlers function how does it work

00:29:40,639 --> 00:29:46,249
and this if you don't know your way

00:29:43,190 --> 00:29:49,909
around JavaScript very well it might

00:29:46,249 --> 00:29:52,809
prove a little bit tricky but if you

00:29:49,909 --> 00:29:55,399
don't understand the things that's that

00:29:52,809 --> 00:30:02,899
that's no problem at all we don't build

00:29:55,399 --> 00:30:05,539
further upon it so how does this work I

00:30:02,899 --> 00:30:08,539
should first say that there is a special

00:30:05,539 --> 00:30:12,840
key on this few component called mix-ins

00:30:08,539 --> 00:30:15,690
and mixin is very comparable to trait in

00:30:12,840 --> 00:30:18,450
in PHP you put a few functions in there

00:30:15,690 --> 00:30:21,929
that you want to have multiple classes

00:30:18,450 --> 00:30:26,070
or in this case components use so in the

00:30:21,929 --> 00:30:30,090
echo mixing everything with pusher

00:30:26,070 --> 00:30:32,519
handling is is being defined now why is

00:30:30,090 --> 00:30:35,070
it called a hoe because under the hood

00:30:32,519 --> 00:30:37,889
it uses another framework called laravel

00:30:35,070 --> 00:30:42,320
echo which is a framework to easily

00:30:37,889 --> 00:30:44,460
handle web six WebSocket connections

00:30:42,320 --> 00:30:49,139
let's take a look at that

00:30:44,460 --> 00:30:51,749
echo mixing so this is the contents of

00:30:49,139 --> 00:30:57,090
that mixin and you can see that it only

00:30:51,749 --> 00:31:02,090
has that created method here so this

00:30:57,090 --> 00:31:06,029
created method it's being applied to the

00:31:02,090 --> 00:31:09,049
the packages component and what does it

00:31:06,029 --> 00:31:14,399
do so whenever this component is created

00:31:09,049 --> 00:31:20,820
we will execute the function get event

00:31:14,399 --> 00:31:26,490
handlers which is this function and what

00:31:20,820 --> 00:31:29,549
will it do it will register the what's

00:31:26,490 --> 00:31:35,070
being returned from get event handlers

00:31:29,549 --> 00:31:39,929
with the echo instance on the root

00:31:35,070 --> 00:31:42,419
application so here we use larval echo

00:31:39,929 --> 00:31:45,779
itself and you can see we listen to the

00:31:42,419 --> 00:31:52,110
private channel and whenever an event

00:31:45,779 --> 00:31:55,590
name comes in which is this this part we

00:31:52,110 --> 00:32:00,769
are going to give the response to the

00:31:55,590 --> 00:32:04,799
handler and execute and execute that so

00:32:00,769 --> 00:32:06,869
this function will be executed so that's

00:32:04,799 --> 00:32:09,090
what we do here so when the the

00:32:06,869 --> 00:32:13,320
component is created we are just

00:32:09,090 --> 00:32:17,389
registering everything this method

00:32:13,320 --> 00:32:20,039
returns with laravel echo so that's a

00:32:17,389 --> 00:32:22,139
little bit deep if you have some

00:32:20,039 --> 00:32:24,720
questions about this just yeah hit me up

00:32:22,139 --> 00:32:26,240
after the talk and I'll explain it to

00:32:24,720 --> 00:32:30,980
you a little bit more

00:32:26,240 --> 00:32:35,720
but that's how we handle things coming

00:32:30,980 --> 00:32:39,800
in from from the web books okay let's do

00:32:35,720 --> 00:32:47,480
one more thing let's have a little bit

00:32:39,800 --> 00:32:50,840
of fun with a Twitter tile so actually

00:32:47,480 --> 00:32:55,670
let's do one one other thing first now

00:32:50,840 --> 00:33:00,020
that I'm in the packages component I've

00:32:55,670 --> 00:33:03,650
said that all data is coming in via the

00:33:00,020 --> 00:33:06,530
web sockets so what do you think would

00:33:03,650 --> 00:33:09,559
happen if I just refresh the dashboard

00:33:06,530 --> 00:33:11,929
it will have no contents right because

00:33:09,559 --> 00:33:15,440
there are no events coming in but if i

00:33:11,929 --> 00:33:19,460
refresh here you can see these numbers

00:33:15,440 --> 00:33:22,160
stay and how is that working because

00:33:19,460 --> 00:33:25,100
every time an event comes in and we

00:33:22,160 --> 00:33:28,220
change the state of it we are going to

00:33:25,100 --> 00:33:31,610
write a copy of the state to local

00:33:28,220 --> 00:33:34,550
storage and whenever we reload the

00:33:31,610 --> 00:33:36,350
dashboard we are just reading the local

00:33:34,550 --> 00:33:39,280
storage to set up the internal state of

00:33:36,350 --> 00:33:41,750
the component so if I go to the

00:33:39,280 --> 00:33:44,030
application here the local storage front

00:33:41,750 --> 00:33:46,550
you can see here the packages here are

00:33:44,030 --> 00:33:51,500
the numbers that are in there if I

00:33:46,550 --> 00:33:55,340
remove that then we have no numbers

00:33:51,500 --> 00:33:59,330
anymore how does that work internally

00:33:55,340 --> 00:34:01,220
it's also mixing because remember I've

00:33:59,330 --> 00:34:05,390
said mixing is a little bit like a trade

00:34:01,220 --> 00:34:08,119
so we use this mix it for every

00:34:05,390 --> 00:34:12,050
component that we want to let let it

00:34:08,119 --> 00:34:16,040
save its State and I'm not going to go

00:34:12,050 --> 00:34:19,460
fully in this but in view you can define

00:34:16,040 --> 00:34:23,690
a watcher and which is a function that

00:34:19,460 --> 00:34:26,570
will be executed whenever a certain key

00:34:23,690 --> 00:34:29,510
in our state is exchanged and here we

00:34:26,570 --> 00:34:32,389
say yeah just call this whenever the

00:34:29,510 --> 00:34:36,290
state changes we are going to call save

00:34:32,389 --> 00:34:39,809
state and it closes up save state is

00:34:36,290 --> 00:34:42,720
here a function that just gets our

00:34:39,809 --> 00:34:47,509
our internal state and saves it to the

00:34:42,720 --> 00:34:52,889
two local storage and this mixin also

00:34:47,509 --> 00:34:53,819
will add a function at created at

00:34:52,889 --> 00:34:56,069
created level

00:34:53,819 --> 00:34:58,259
so whenever the component is created we

00:34:56,069 --> 00:35:00,660
are going to call load State and we were

00:34:58,259 --> 00:35:03,329
just going to get the safe state and set

00:35:00,660 --> 00:35:05,309
it into the internal data of the

00:35:03,329 --> 00:35:08,670
component itself so that's how that's

00:35:05,309 --> 00:35:11,460
working if you want to have safe State

00:35:08,670 --> 00:35:14,130
behavior to to your few components I'm

00:35:11,460 --> 00:35:16,680
happy to say that we've extracted that

00:35:14,130 --> 00:35:18,990
mix into its own package so you can use

00:35:16,680 --> 00:35:21,599
it in your own projects that package is

00:35:18,990 --> 00:35:23,240
called few safe State so that's how that

00:35:21,599 --> 00:35:27,079
works

00:35:23,240 --> 00:35:31,859
okay let's have a little bit of fun with

00:35:27,079 --> 00:35:33,750
the Twitter component here so the

00:35:31,859 --> 00:35:38,190
Twitter component is a little bit

00:35:33,750 --> 00:35:43,589
special one it leverages the Twitter

00:35:38,190 --> 00:35:47,480
streaming API so Twitter exposes a few

00:35:43,589 --> 00:35:50,099
real-time api's where you can listen for

00:35:47,480 --> 00:35:53,190
every event that's that's happening on

00:35:50,099 --> 00:35:55,529
Twitter you can really crash your

00:35:53,190 --> 00:35:59,099
machine with this if you listen for

00:35:55,529 --> 00:36:01,500
popular subjects then you get like a

00:35:59,099 --> 00:36:05,190
million events coming in a your computer

00:36:01,500 --> 00:36:08,960
will or your process at least will will

00:36:05,190 --> 00:36:11,970
just crash now handling the Twitter

00:36:08,960 --> 00:36:15,539
real-time streams is a little bit nasty

00:36:11,970 --> 00:36:18,720
in PHP that's why I created the package

00:36:15,539 --> 00:36:22,079
above it to make it to make it easier to

00:36:18,720 --> 00:36:24,559
work with and here you can see that we

00:36:22,079 --> 00:36:26,910
are using the Twitter streaming API

00:36:24,559 --> 00:36:30,420
we're going to listen to the public

00:36:26,910 --> 00:36:34,380
stream which are all events and when we

00:36:30,420 --> 00:36:37,230
hear one of those key words here we are

00:36:34,380 --> 00:36:39,359
going to send an event called mentioned

00:36:37,230 --> 00:36:43,859
with the properties of that of that

00:36:39,359 --> 00:36:45,900
tweet I remember when we fire off that

00:36:43,859 --> 00:36:49,349
event and that whole dance with pusher

00:36:45,900 --> 00:36:51,539
will start over again the information

00:36:49,349 --> 00:36:52,830
will be broadcast to pusher the

00:36:51,539 --> 00:36:57,270
dashboard I will listen

00:36:52,830 --> 00:37:00,840
and we'll display it now normally we use

00:36:57,270 --> 00:37:03,000
our our company name here to listen for

00:37:00,840 --> 00:37:07,650
it but I think it might be fun if we

00:37:03,000 --> 00:37:10,620
just do PHP UK conference here and I

00:37:07,650 --> 00:37:12,420
hope that some of you are subscribed to

00:37:10,620 --> 00:37:14,550
Twitter and can send a few tweets so we

00:37:12,420 --> 00:37:16,380
can test this this is the the handle of

00:37:14,550 --> 00:37:22,550
the conference right which PUK

00:37:16,380 --> 00:37:30,690
conference and let's open the floodgates

00:37:22,550 --> 00:37:32,970
so I'm going to start listening for four

00:37:30,690 --> 00:37:35,760
things here and now I await your tweets

00:37:32,970 --> 00:37:39,780
and I hope this will this will work and

00:37:35,760 --> 00:37:41,670
yeah yeah I think so too so you can have

00:37:39,780 --> 00:37:47,070
your moment of glory now in the

00:37:41,670 --> 00:37:49,110
dashboard very good Morten and yet those

00:37:47,070 --> 00:37:51,840
trying it out they will see that it's

00:37:49,110 --> 00:37:54,420
really instant probably your tweet will

00:37:51,840 --> 00:37:56,100
be faster on our dashboard and then the

00:37:54,420 --> 00:37:59,400
application on your smartphone will

00:37:56,100 --> 00:38:02,310
confirm that that is there so yeah

00:37:59,400 --> 00:38:04,770
that's that's how that works you can see

00:38:02,310 --> 00:38:13,200
it's it's really not that that's hard to

00:38:04,770 --> 00:38:15,330
do cool I'm on the dashboard yeah maybe

00:38:13,200 --> 00:38:17,700
I should leave this open for for a

00:38:15,330 --> 00:38:19,050
little bit well I've done that at a few

00:38:17,700 --> 00:38:24,200
conference and then then it got a little

00:38:19,050 --> 00:38:28,230
bit nasty so then I had to cheat it down

00:38:24,200 --> 00:38:30,660
okay that's everything I had technical

00:38:28,230 --> 00:38:33,600
to say about the dashboard let's go back

00:38:30,660 --> 00:38:36,110
to to the presentation so I'm quite

00:38:33,600 --> 00:38:39,150
happy that that that worked a little bit

00:38:36,110 --> 00:38:44,670
now one thing that I want to touch upon

00:38:39,150 --> 00:38:50,160
is how we are displaying this on our TV

00:38:44,670 --> 00:38:53,130
set in our in our office well behind our

00:38:50,160 --> 00:38:59,130
TV screen there lives a little Raspberry

00:38:53,130 --> 00:39:01,530
Pi and it's quite cool because it it is

00:38:59,130 --> 00:39:04,230
it is powered by the USB port of the TV

00:39:01,530 --> 00:39:07,800
itself so you don't need any extra

00:39:04,230 --> 00:39:13,620
extra power cord for that the Raspberry

00:39:07,800 --> 00:39:15,390
Pi is is a Raspberry Pi - it uses recipe

00:39:13,620 --> 00:39:19,440
and Jessie which is the default

00:39:15,390 --> 00:39:22,530
operating system and when it boots up it

00:39:19,440 --> 00:39:25,710
will just so show you chromium

00:39:22,530 --> 00:39:29,760
56 and it will go into full-screen mode

00:39:25,710 --> 00:39:32,850
now this is a very exciting part of the

00:39:29,760 --> 00:39:35,280
presentation for me I have here a clone

00:39:32,850 --> 00:39:38,100
of our dashboard on this Raspberry Pi

00:39:35,280 --> 00:39:41,760
this Raspberry Pi gets its internet

00:39:38,100 --> 00:39:44,190
connection from my Mac we will hopefully

00:39:41,760 --> 00:39:48,360
see the output soon on the on the TV

00:39:44,190 --> 00:39:51,750
screen and it also will get its power

00:39:48,360 --> 00:39:54,510
from from my Mac so if I pulled in I put

00:39:51,750 --> 00:39:56,880
it in it should boot up and just yeah

00:39:54,510 --> 00:40:04,580
show you the dashboard after it has

00:39:56,880 --> 00:40:08,970
booted up so I hope we can switch to our

00:40:04,580 --> 00:40:11,910
our little raspberry raspberry pie okay

00:40:08,970 --> 00:40:15,860
here it is booting up that's that's a

00:40:11,910 --> 00:40:17,430
boot sequence fingers crossed here

00:40:15,860 --> 00:40:21,660
everything is good here

00:40:17,430 --> 00:40:24,450
so it will power up its its graphical

00:40:21,660 --> 00:40:27,810
user interface and you'll see that

00:40:24,450 --> 00:40:31,500
Chrome will display once and you'll see

00:40:27,810 --> 00:40:33,570
it having a nasty restore taps dialogue

00:40:31,500 --> 00:40:37,500
I don't know how to remove it so I just

00:40:33,570 --> 00:40:39,900
quit chrome again and booted up again so

00:40:37,500 --> 00:40:42,810
that that's how I do it so it's gone now

00:40:39,900 --> 00:40:44,730
and now we do it again Adam and it

00:40:42,810 --> 00:40:46,980
didn't work it still is there sometimes

00:40:44,730 --> 00:40:50,250
it does that but hopefully the dashboard

00:40:46,980 --> 00:40:52,740
will at least come on yeah that's that's

00:40:50,250 --> 00:40:55,320
the dashboard that's the the actual

00:40:52,740 --> 00:40:57,570
dashboard now so if you T treat

00:40:55,320 --> 00:41:04,520
something to do spouse it will it will

00:40:57,570 --> 00:41:12,240
come there so that's that's that okay

00:41:04,520 --> 00:41:15,590
let's power that down again and we're

00:41:12,240 --> 00:41:15,590
back at the slice hopefully

00:41:18,700 --> 00:41:25,250
okay cool so you can try out this dance

00:41:24,230 --> 00:41:29,750
for yourself

00:41:25,250 --> 00:41:32,059
I've already mentioned that the source

00:41:29,750 --> 00:41:34,910
code is publicly available on github

00:41:32,059 --> 00:41:38,990
I've also written quite an extensive

00:41:34,910 --> 00:41:40,490
blog post about this where I say mostly

00:41:38,990 --> 00:41:42,319
the same things that I've said during

00:41:40,490 --> 00:41:47,809
this talk but I explained a few other

00:41:42,319 --> 00:41:49,069
components now I've been babbling about

00:41:47,809 --> 00:41:50,720
this dashboard the whole time so you

00:41:49,069 --> 00:41:54,349
might think hey this guy really knows

00:41:50,720 --> 00:41:56,750
his stuff but the truth is that like

00:41:54,349 --> 00:42:02,000
most things that we do in our company it

00:41:56,750 --> 00:42:03,589
was teamwork and the other team members

00:42:02,000 --> 00:42:07,130
involved in this project we're my

00:42:03,589 --> 00:42:09,319
colleague will which is responsible for

00:42:07,130 --> 00:42:12,829
the the create looks of the dashboards

00:42:09,319 --> 00:42:16,130
yeah he designed that looks and my

00:42:12,829 --> 00:42:18,730
colleague Sebastian he scrutinized all

00:42:16,130 --> 00:42:26,089
my crap and made the Ava's script code

00:42:18,730 --> 00:42:28,910
look much much nicer here are a few more

00:42:26,089 --> 00:42:31,790
packages that are of interest I've

00:42:28,910 --> 00:42:34,880
demonstrated these dashboards with

00:42:31,790 --> 00:42:37,760
pusher but you can actually use a local

00:42:34,880 --> 00:42:40,730
node server on your machine if you don't

00:42:37,760 --> 00:42:43,549
like using a service like pusher and the

00:42:40,730 --> 00:42:49,160
laravel echo server package it will just

00:42:43,549 --> 00:42:51,470
mimic pusher on on your on your server

00:42:49,160 --> 00:42:53,710
so you don't need to to install pusher

00:42:51,470 --> 00:42:56,569
and it works really really great and

00:42:53,710 --> 00:42:59,990
I've touched upon our view safe State

00:42:56,569 --> 00:43:03,799
thing to easily save State from from

00:42:59,990 --> 00:43:07,490
your view components so that's all I had

00:43:03,799 --> 00:43:09,049
to say about this dashboard I really

00:43:07,490 --> 00:43:11,599
want to improve this talk a little bit

00:43:09,049 --> 00:43:15,260
so please please give me feedback good

00:43:11,599 --> 00:43:17,540
or bad on on joint in I've also uploaded

00:43:15,260 --> 00:43:20,299
the slides there oh it's it's the wrong

00:43:17,540 --> 00:43:23,560
URL but I'll tweet after the right URL

00:43:20,299 --> 00:43:25,970
later also

00:43:23,560 --> 00:43:28,490
yeah take a look at our company website

00:43:25,970 --> 00:43:32,180
probably we have made something a

00:43:28,490 --> 00:43:36,650
package that can be used for for use of

00:43:32,180 --> 00:43:38,120
you in in the next project yeah take a

00:43:36,650 --> 00:43:41,960
look at my block if you want to stay

00:43:38,120 --> 00:43:44,390
current with PHP and try out out here if

00:43:41,960 --> 00:43:45,420
you need a monitoring solution that's it

00:43:44,390 --> 00:43:49,170
thank you

00:43:45,420 --> 00:43:49,170

YouTube URL: https://www.youtube.com/watch?v=3q64HgGmLP4


