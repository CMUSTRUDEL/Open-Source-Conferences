Title: PHP UK Conference 2018 - Michael Hausenblas - Building Cloud-Native Applications
Publication date: 2018-03-27
Playlist: PHP UK Conference 2018
Description: 
	In this talk we will review best practices developing and operating cloud native applications and discuss when and how to use containers, including a demo how to do cloud native PHP apps using OpenShift, Red Hatâ€™s enterprise Kubernetes distribution.
Captions: 
	00:00:02,629 --> 00:00:08,269
welcome to my talk on building and

00:00:06,240 --> 00:00:12,509
operating cloud native applications a

00:00:08,269 --> 00:00:14,790
little bit about myself I'm currently a

00:00:12,509 --> 00:00:16,500
developer advocate at Red Hat focusing

00:00:14,790 --> 00:00:19,109
on go I'm sorry

00:00:16,500 --> 00:00:21,779
communities and open shift some mainly

00:00:19,109 --> 00:00:24,150
working upstream in communities before

00:00:21,779 --> 00:00:25,949
that I was an advocate mesosphere I was

00:00:24,150 --> 00:00:28,199
in container space pretty much the same

00:00:25,949 --> 00:00:32,130
role before that I was chief data

00:00:28,199 --> 00:00:34,079
engineer at map are another startup in

00:00:32,130 --> 00:00:36,780
the head of space when Hadoop was cool

00:00:34,079 --> 00:00:40,110
and before that I did applied research

00:00:36,780 --> 00:00:44,399
in Austria and in Ireland and nowadays

00:00:40,110 --> 00:00:48,750
as I said Emily gopher I did too PHP

00:00:44,399 --> 00:00:52,320
around 2009/2010 so cut me some slack I

00:00:48,750 --> 00:00:57,840
you know I know it but I'm certainly an

00:00:52,320 --> 00:01:01,109
expert and I'm what I would call a

00:00:57,840 --> 00:01:07,490
developer turned ops person so I started

00:01:01,109 --> 00:01:10,710
out 1997 ish when Java was the cool kid

00:01:07,490 --> 00:01:12,960
earning my money with developing stuff

00:01:10,710 --> 00:01:15,450
and then like the last four or five

00:01:12,960 --> 00:01:18,570
years essentially when I got into

00:01:15,450 --> 00:01:21,600
containers more on the operation side of

00:01:18,570 --> 00:01:24,030
things so this is essentially this def

00:01:21,600 --> 00:01:25,979
and ops thing that you you are aware of

00:01:24,030 --> 00:01:27,479
what the other side is doing and that

00:01:25,979 --> 00:01:29,490
doesn't mean that I'm actually operating

00:01:27,479 --> 00:01:32,579
stuff I'm just you know interested in

00:01:29,490 --> 00:01:38,240
and understand the language of operation

00:01:32,579 --> 00:01:44,540
folks quick show of hands who's an admin

00:01:38,240 --> 00:01:51,630
ok sre site reliability engineer ok

00:01:44,540 --> 00:01:55,770
developer guys the majority yeah QA good

00:01:51,630 --> 00:01:59,100
good for you architect architects yeah

00:01:55,770 --> 00:02:02,549
don't be shy right that's fine product

00:01:59,100 --> 00:02:03,090
or project management ish now comes the

00:02:02,549 --> 00:02:06,990
hard part

00:02:03,090 --> 00:02:09,500
pointy hairy bus no ok so we are amongst

00:02:06,990 --> 00:02:12,590
as technicians go

00:02:09,500 --> 00:02:16,030
all right so obviously we're gonna start

00:02:12,590 --> 00:02:18,680
with y because the Y is the main thing

00:02:16,030 --> 00:02:21,050
like if you get bad if you get D the

00:02:18,680 --> 00:02:23,330
underlying motivation then the rest

00:02:21,050 --> 00:02:25,550
follows the rest is really really simple

00:02:23,330 --> 00:02:27,440
and and you will see that at the end of

00:02:25,550 --> 00:02:28,940
the day the technology it might be

00:02:27,440 --> 00:02:32,180
overwhelming at first but it's not

00:02:28,940 --> 00:02:34,970
really the hard part so why are we doing

00:02:32,180 --> 00:02:37,220
that why are we you know bothering you

00:02:34,970 --> 00:02:39,850
know cloud made here from containers and

00:02:37,220 --> 00:02:43,760
all that chest at the end of the day

00:02:39,850 --> 00:02:45,770
well we want to outperform the

00:02:43,760 --> 00:02:49,510
competition we want to ship features

00:02:45,770 --> 00:02:52,220
faster you know we live in this 24/7

00:02:49,510 --> 00:02:54,980
everything at our fingertips ready we

00:02:52,220 --> 00:02:56,780
get nervous if we can't buy something

00:02:54,980 --> 00:02:59,540
immediately or can't like that cat

00:02:56,780 --> 00:03:01,430
picture or whatever and and we demand

00:02:59,540 --> 00:03:03,830
and business demands that we actually

00:03:01,430 --> 00:03:05,240
ship fast and ship faster and if we can

00:03:03,830 --> 00:03:07,250
ship faster than the competition at

00:03:05,240 --> 00:03:11,120
least that's the theory then last year

00:03:07,250 --> 00:03:12,350
then we you know we are better off to me

00:03:11,120 --> 00:03:14,390
that's not the most important thing but

00:03:12,350 --> 00:03:19,450
I do understand that the business the

00:03:14,390 --> 00:03:19,450
business needs drive a lot of that

00:03:19,570 --> 00:03:24,680
related to that and and as I said it can

00:03:22,430 --> 00:03:26,780
be independent in terms of money is ship

00:03:24,680 --> 00:03:29,360
around the clock right this old

00:03:26,780 --> 00:03:31,790
traditional way of throwing things over

00:03:29,360 --> 00:03:35,269
the fence and you say like twice a year

00:03:31,790 --> 00:03:38,450
you're rolling out something new turns

00:03:35,269 --> 00:03:41,720
into this many many many small batches

00:03:38,450 --> 00:03:43,400
small future updates if you reload your

00:03:41,720 --> 00:03:47,450
Facebook your LinkedIn whatever app you

00:03:43,400 --> 00:03:49,580
have or webpage you have there pretty

00:03:47,450 --> 00:03:52,700
much every time you have a new version

00:03:49,580 --> 00:03:54,769
compare that with once a year and you

00:03:52,700 --> 00:03:57,769
see this do people still know what a CD

00:03:54,769 --> 00:04:00,230
is yeah who knows okay right you might

00:03:57,769 --> 00:04:02,480
have had bad writing Wow look at that

00:04:00,230 --> 00:04:05,360
you see I get an install a new version

00:04:02,480 --> 00:04:08,390
or discs before that floppy discs so

00:04:05,360 --> 00:04:10,010
that has changed and and again it might

00:04:08,390 --> 00:04:12,350
be business that drives certain demands

00:04:10,010 --> 00:04:14,810
or it might be some some some other

00:04:12,350 --> 00:04:16,820
entity but the tendency is really this

00:04:14,810 --> 00:04:19,549
ship around the clock whenever there is

00:04:16,820 --> 00:04:21,859
a new version available you potentially

00:04:19,549 --> 00:04:22,970
also want to ship it and the internet

00:04:21,859 --> 00:04:24,890
obviously makes that

00:04:22,970 --> 00:04:28,910
to actually distribute the data either

00:04:24,890 --> 00:04:30,800
software and last but not least to me at

00:04:28,910 --> 00:04:34,130
least the most important one is this

00:04:30,800 --> 00:04:36,890
togetherness sometimes if you're paying

00:04:34,130 --> 00:04:39,620
a consultant this is called DevOps I

00:04:36,890 --> 00:04:42,050
always ask them how much DevOps do you

00:04:39,620 --> 00:04:45,830
want it's it a kilogram more you know

00:04:42,050 --> 00:04:48,140
more in reality it's really all about

00:04:45,830 --> 00:04:49,730
that and this is really the hard part

00:04:48,140 --> 00:04:53,300
you will see that at the end of the talk

00:04:49,730 --> 00:04:55,400
I hope that the technology that's you

00:04:53,300 --> 00:04:57,110
know it's simple most of that is open

00:04:55,400 --> 00:04:59,240
source you can just grab it for free can

00:04:57,110 --> 00:05:02,440
use it this is the hard part

00:04:59,240 --> 00:05:04,460
unfortunately I don't really have good

00:05:02,440 --> 00:05:06,410
suggestions for that other than empathy

00:05:04,460 --> 00:05:08,510
and you know learning the language of

00:05:06,410 --> 00:05:10,720
the other ones in my experience the ops

00:05:08,510 --> 00:05:13,280
folks are a little bit better than

00:05:10,720 --> 00:05:15,380
developers they kind of like over the

00:05:13,280 --> 00:05:17,600
years you know they learn languages and

00:05:15,380 --> 00:05:19,280
they understand stuff from the

00:05:17,600 --> 00:05:21,020
development side we're kind of like yeah

00:05:19,280 --> 00:05:23,570
why do I need to know about monitoring

00:05:21,020 --> 00:05:26,690
and this and that so maybe this is a

00:05:23,570 --> 00:05:31,220
kind of you know encourage you to to

00:05:26,690 --> 00:05:36,110
learn a bit from the up side so these

00:05:31,220 --> 00:05:39,200
this three things you know outperforming

00:05:36,110 --> 00:05:41,540
the competition and and shipping around

00:05:39,200 --> 00:05:44,210
the clock and the togetherness these are

00:05:41,540 --> 00:05:45,980
the underlying the whys why we are doing

00:05:44,210 --> 00:05:48,200
what we're doing here in terms of cloud

00:05:45,980 --> 00:05:52,820
native now we're moving on to something

00:05:48,200 --> 00:05:54,830
more tangible that so far might have

00:05:52,820 --> 00:05:57,860
been some you know gardener or whatever

00:05:54,830 --> 00:05:59,990
high level pitch to CEOs but now we're

00:05:57,860 --> 00:06:02,810
talking about the actual tenants of

00:05:59,990 --> 00:06:06,340
cloud native computing and I came up

00:06:02,810 --> 00:06:10,820
with this moniker whatever AAA

00:06:06,340 --> 00:06:14,990
automation immutability and api's what

00:06:10,820 --> 00:06:18,070
do I mean by that automation essentially

00:06:14,990 --> 00:06:22,490
means that processes that have been

00:06:18,070 --> 00:06:26,060
manual steps are automated in in a way

00:06:22,490 --> 00:06:29,120
like software typically it means that we

00:06:26,060 --> 00:06:30,890
replace something that manual typically

00:06:29,120 --> 00:06:33,680
means it's brittle its error-prone

00:06:30,890 --> 00:06:35,700
people you know if I get up if I get

00:06:33,680 --> 00:06:37,020
paged and need to fix something

00:06:35,700 --> 00:06:39,060
you know I might be hangover if I might

00:06:37,020 --> 00:06:42,390
you know might not have had the best

00:06:39,060 --> 00:06:43,920
time and I you know fed finger something

00:06:42,390 --> 00:06:45,690
and whoops you know that there was a

00:06:43,920 --> 00:06:47,430
couple of years ago where someone at

00:06:45,690 --> 00:06:50,280
Google did that and whoops half of the

00:06:47,430 --> 00:06:53,430
internet was gone like there's a

00:06:50,280 --> 00:06:55,290
Facebook study that showed that they

00:06:53,430 --> 00:06:58,230
have as pretty much every like the big

00:06:55,290 --> 00:07:00,210
ones have proper ultimate systems

00:06:58,230 --> 00:07:02,760
everywhere that during the week the

00:07:00,210 --> 00:07:04,710
error rate is I don't know five percent

00:07:02,760 --> 00:07:06,690
or whatever at a certain level and the

00:07:04,710 --> 00:07:08,100
weekend sorry other way around on

00:07:06,690 --> 00:07:10,020
weekends too the error level is

00:07:08,100 --> 00:07:12,000
relatively low and during the week it

00:07:10,020 --> 00:07:14,130
goes up why because people are there and

00:07:12,000 --> 00:07:16,980
people are doing stuff so people are

00:07:14,130 --> 00:07:19,980
making these mistakes I did that myself

00:07:16,980 --> 00:07:23,310
so I know what I'm talking about the the

00:07:19,980 --> 00:07:25,380
original approach to that was Play Books

00:07:23,310 --> 00:07:27,900
and and fire drills so you would have

00:07:25,380 --> 00:07:30,180
these are the steps and make sure check

00:07:27,900 --> 00:07:31,650
against this is the expected outcome and

00:07:30,180 --> 00:07:33,450
then every now and then you would have a

00:07:31,650 --> 00:07:35,010
fire drill you would say you know assume

00:07:33,450 --> 00:07:37,530
this wreck goes down and now let's see

00:07:35,010 --> 00:07:39,120
what we can do about that it's a good

00:07:37,530 --> 00:07:41,190
step it's a first step and I had many

00:07:39,120 --> 00:07:42,600
discussions with people who say play

00:07:41,190 --> 00:07:44,790
books that's all we need right we only

00:07:42,600 --> 00:07:47,280
need these instructions and then all is

00:07:44,790 --> 00:07:49,050
good I would argue let's let's go a step

00:07:47,280 --> 00:07:52,460
further and although I don't like the

00:07:49,050 --> 00:07:56,730
term agility it it it helps a lot to

00:07:52,460 --> 00:07:58,740
automate things all the things last but

00:07:56,730 --> 00:08:00,090
not least considered the bus factor that

00:07:58,740 --> 00:08:03,030
might not be a problem if you're in a

00:08:00,090 --> 00:08:05,190
big you know company or whatever but you

00:08:03,030 --> 00:08:06,720
know smaller environments you might be a

00:08:05,190 --> 00:08:08,910
starter you might be contract or

00:08:06,720 --> 00:08:11,610
whatever what if that one guy or that

00:08:08,910 --> 00:08:13,770
one person who knows you know but not

00:08:11,610 --> 00:08:16,230
only in terms of has access to something

00:08:13,770 --> 00:08:18,570
but actually knows oh yeah this database

00:08:16,230 --> 00:08:21,270
I first need to start dead and then that

00:08:18,570 --> 00:08:24,030
what if that person is not available

00:08:21,270 --> 00:08:26,580
anymore it you know moves on bus hits

00:08:24,030 --> 00:08:30,650
that person or whatever can you actually

00:08:26,580 --> 00:08:33,300
still keep it up can you somehow

00:08:30,650 --> 00:08:36,419
continue that operation and they're

00:08:33,300 --> 00:08:38,760
obviously automation helps a lot if you

00:08:36,419 --> 00:08:40,530
have any questions don't be shy I think

00:08:38,760 --> 00:08:42,599
we have microphones here you can ask at

00:08:40,530 --> 00:08:44,430
any point in time or we will have ten

00:08:42,599 --> 00:08:47,190
minutes at the end but just raise your

00:08:44,430 --> 00:08:48,730
hand and and microphone will fly into

00:08:47,190 --> 00:08:52,070
your direction

00:08:48,730 --> 00:08:55,580
immutable infrastructure who does not

00:08:52,070 --> 00:08:58,910
know about heads versus cattle it's not

00:08:55,580 --> 00:09:01,730
heard that term every one few not okay

00:08:58,910 --> 00:09:07,700
so obviously on the left hand side I

00:09:01,730 --> 00:09:13,370
think that's from exactly and on the

00:09:07,700 --> 00:09:17,649
other hand you have cattle right so the

00:09:13,370 --> 00:09:19,810
basic idea there is we used to treat our

00:09:17,649 --> 00:09:23,029
infrastructure or servers or whatever

00:09:19,810 --> 00:09:24,829
very much like pets right and you kind

00:09:23,029 --> 00:09:29,180
of still see it sometimes where you know

00:09:24,829 --> 00:09:32,959
you enter www dot I think IBM comm and

00:09:29,180 --> 00:09:36,410
then you get redirected to ww2 whatever

00:09:32,959 --> 00:09:38,660
so you have this static partitioning and

00:09:36,410 --> 00:09:40,850
you know you have a front-end that then

00:09:38,660 --> 00:09:42,769
redirects to a certain server or for

00:09:40,850 --> 00:09:45,560
databases or whatever so you actually

00:09:42,769 --> 00:09:47,660
treat these machines as very very you

00:09:45,560 --> 00:09:50,540
know as pets it's very specific and if

00:09:47,660 --> 00:09:52,820
they get sick if they you know there's a

00:09:50,540 --> 00:09:54,470
virus on it or whatever then you know

00:09:52,820 --> 00:09:56,709
you take care of them and and you know

00:09:54,470 --> 00:10:01,040
trying to to nurture them back to health

00:09:56,709 --> 00:10:03,260
versus cattle well they might not even

00:10:01,040 --> 00:10:05,600
have names it's the cattle one two three

00:10:03,260 --> 00:10:06,320
four five and if it gets sick well bad

00:10:05,600 --> 00:10:11,029
luck for you

00:10:06,320 --> 00:10:13,010
next I'll come back to that later in the

00:10:11,029 --> 00:10:16,070
in the context of stateful versus state

00:10:13,010 --> 00:10:17,149
less in the sense that for stateless

00:10:16,070 --> 00:10:18,500
stuff if you have a web server

00:10:17,149 --> 00:10:20,899
application server that doesn't have

00:10:18,500 --> 00:10:22,760
state that's pretty easy to achieve if

00:10:20,899 --> 00:10:24,920
you have stateful stuff then you

00:10:22,760 --> 00:10:27,440
sometimes actually have to resort to

00:10:24,920 --> 00:10:28,520
this pets approach and databases are a

00:10:27,440 --> 00:10:31,279
prime example of that

00:10:28,520 --> 00:10:33,199
I generally if someone is not familiar

00:10:31,279 --> 00:10:35,390
with immutable infrastructure

00:10:33,199 --> 00:10:37,160
compare that with these mold figures

00:10:35,390 --> 00:10:39,110
where you essentially you know you have

00:10:37,160 --> 00:10:41,149
something and you put something in and

00:10:39,110 --> 00:10:42,620
boom that's it you don't change it you

00:10:41,149 --> 00:10:46,180
know go there and carve something

00:10:42,620 --> 00:10:50,329
whatever that's not what you do right

00:10:46,180 --> 00:10:51,980
the main question there is in terms of

00:10:50,329 --> 00:10:55,550
operations against that infrastructure

00:10:51,980 --> 00:10:57,370
is does it support idempotence and that

00:10:55,550 --> 00:11:00,730
essentially means I can

00:10:57,370 --> 00:11:01,990
we do a certain operation over and over

00:11:00,730 --> 00:11:07,150
again and always get the same result

00:11:01,990 --> 00:11:08,800
which for example my bank account is a I

00:11:07,150 --> 00:11:11,230
can examine the counter example right

00:11:08,800 --> 00:11:12,520
I can certainly not do that or at some

00:11:11,230 --> 00:11:17,110
point in time I will get a nice letter

00:11:12,520 --> 00:11:18,610
from my bank together with that so if

00:11:17,110 --> 00:11:20,980
you have immutable infrastructure if you

00:11:18,610 --> 00:11:23,200
have it in potency then you typically

00:11:20,980 --> 00:11:28,120
have increased rigorously we produce

00:11:23,200 --> 00:11:30,640
ability and all these three things

00:11:28,120 --> 00:11:32,890
together pads versus kettle wherever

00:11:30,640 --> 00:11:35,200
it's possible idempotency and and

00:11:32,890 --> 00:11:38,850
increased represented reproducibility

00:11:35,200 --> 00:11:41,410
horrible word that essentially together

00:11:38,850 --> 00:11:46,780
more or less mix makes this immutable

00:11:41,410 --> 00:11:50,950
infrastructure moving on to api's so

00:11:46,780 --> 00:11:54,400
this is kind of like I don't know if

00:11:50,950 --> 00:11:58,480
it's self explaining but they shift over

00:11:54,400 --> 00:12:01,720
the the 1015 past years really moved to

00:11:58,480 --> 00:12:04,120
api's and not implementation being the

00:12:01,720 --> 00:12:06,520
important bit some examples here I used

00:12:04,120 --> 00:12:08,560
to work at map R and HDFS was

00:12:06,520 --> 00:12:12,130
essentially it is based on the Google

00:12:08,560 --> 00:12:15,670
paper this open source publicly

00:12:12,130 --> 00:12:18,460
agreed-upon interface the HDFS interface

00:12:15,670 --> 00:12:20,410
so distributed file system and the

00:12:18,460 --> 00:12:22,510
company I worked for created a

00:12:20,410 --> 00:12:25,930
proprietary closed source version of a

00:12:22,510 --> 00:12:28,720
distributed file system that was able to

00:12:25,930 --> 00:12:30,400
talk HDFS and with that essentially say

00:12:28,720 --> 00:12:33,910
it's a dropper and drop-in replacement

00:12:30,400 --> 00:12:36,130
for the dis open source thing graph QL

00:12:33,910 --> 00:12:38,170
being another example or communities API

00:12:36,130 --> 00:12:41,410
which we will have a look later on in

00:12:38,170 --> 00:12:43,740
greater detail all of them the examples

00:12:41,410 --> 00:12:46,920
of them have this thing in common that

00:12:43,740 --> 00:12:48,940
you not necessarily care about

00:12:46,920 --> 00:12:50,950
implementation you might pick one over

00:12:48,940 --> 00:12:53,140
the other because the one is more you

00:12:50,950 --> 00:12:55,390
know performant or more resource

00:12:53,140 --> 00:12:58,320
efficient or whatever but you care about

00:12:55,390 --> 00:13:01,210
the API about the stability of the API

00:12:58,320 --> 00:13:04,230
is it you know is it an open standard

00:13:01,210 --> 00:13:06,930
and so on any questions so far

00:13:04,230 --> 00:13:09,850
make sense

00:13:06,930 --> 00:13:11,620
so api's obviously helped to decouple of

00:13:09,850 --> 00:13:13,540
things so you can if you have a nicely

00:13:11,620 --> 00:13:16,780
defined API you can decouple things and

00:13:13,540 --> 00:13:20,110
you can just use the API to integrate

00:13:16,780 --> 00:13:22,990
smaller bits already mentioned to me at

00:13:20,110 --> 00:13:24,940
least rather important that don't

00:13:22,990 --> 00:13:27,190
necessary always have to be community

00:13:24,940 --> 00:13:30,870
defined but at least they're considered

00:13:27,190 --> 00:13:33,670
open so people can suggest additions or

00:13:30,870 --> 00:13:35,350
there is some some governance around

00:13:33,670 --> 00:13:37,630
that it could be something more formal

00:13:35,350 --> 00:13:40,720
like right here for w3c or

00:13:37,630 --> 00:13:43,540
you know one company that has enough

00:13:40,720 --> 00:13:46,900
power to suggest it and push that

00:13:43,540 --> 00:13:49,270
through I personally like declarative

00:13:46,900 --> 00:13:53,260
API so I'm not telling you know do this

00:13:49,270 --> 00:13:55,510
and do that but this is the expected end

00:13:53,260 --> 00:13:57,190
result go off do whatever you like

00:13:55,510 --> 00:13:59,110
to achieve that and we'll come back

00:13:57,190 --> 00:14:01,950
again in communities to see that this is

00:13:59,110 --> 00:14:04,210
actually this declarative API is and

00:14:01,950 --> 00:14:06,340
essentially just saying this is the

00:14:04,210 --> 00:14:10,630
state I want to have is pretty pretty

00:14:06,340 --> 00:14:12,550
central to communities and others okay

00:14:10,630 --> 00:14:15,970
so we had the tenants now which is

00:14:12,550 --> 00:14:18,130
already a step further to the actual

00:14:15,970 --> 00:14:20,740
meat of this talk and now we're really

00:14:18,130 --> 00:14:24,370
talking about the the set of

00:14:20,740 --> 00:14:26,080
technologies tools and methods that are

00:14:24,370 --> 00:14:29,650
cloud native that make up the cloud

00:14:26,080 --> 00:14:31,540
native so there's this term planet of

00:14:29,650 --> 00:14:33,430
computing and I'm gonna attempt to

00:14:31,540 --> 00:14:34,810
define at the moment we are talking

00:14:33,430 --> 00:14:38,680
about containers and container

00:14:34,810 --> 00:14:41,020
orchestration service my meshes and data

00:14:38,680 --> 00:14:43,410
meshes and last but not least a little

00:14:41,020 --> 00:14:48,610
bit more on the opposite side of things

00:14:43,410 --> 00:14:52,210
observability so big question what is

00:14:48,610 --> 00:14:58,570
cloud native any any takers what is

00:14:52,210 --> 00:15:03,310
cloud native no food coma okay so there

00:14:58,570 --> 00:15:06,360
is a linux foundation called cloud

00:15:03,310 --> 00:15:09,430
native computing foundation it was born

00:15:06,360 --> 00:15:13,080
initially essentially to host quality

00:15:09,430 --> 00:15:15,580
second this was or is a Google started

00:15:13,080 --> 00:15:18,340
open source project and they wanted to

00:15:15,580 --> 00:15:19,829
find a home for communities to you know

00:15:18,340 --> 00:15:24,089
make it

00:15:19,829 --> 00:15:27,149
neutral in a neutral home and overtime

00:15:24,089 --> 00:15:29,100
so we are now at around I think 14 15

00:15:27,149 --> 00:15:31,290
project depending it changes pretty much

00:15:29,100 --> 00:15:33,540
every week new projects joined since you

00:15:31,290 --> 00:15:35,939
have but initially as I said it was it

00:15:33,540 --> 00:15:39,779
was really greatest and then over time

00:15:35,939 --> 00:15:41,790
other most of them more or less than the

00:15:39,779 --> 00:15:45,179
infrastructure opposite side of things

00:15:41,790 --> 00:15:48,540
monitoring distributed tracing fluent II

00:15:45,179 --> 00:15:53,220
like locks - for routing metrics and

00:15:48,540 --> 00:15:55,379
events ERP see a RPC framework and so on

00:15:53,220 --> 00:15:58,559
like you have many many many more here

00:15:55,379 --> 00:16:00,239
with s that's my sequin communities just

00:15:58,559 --> 00:16:02,489
trying to think week ago whatever

00:16:00,239 --> 00:16:04,679
service measures and so on so if many

00:16:02,489 --> 00:16:08,129
many projects that essentially have

00:16:04,679 --> 00:16:09,720
their home in CNCs in contrast to Apache

00:16:08,129 --> 00:16:13,889
so do people know Apache Software

00:16:09,720 --> 00:16:18,110
Foundation SF it's not necessarily an

00:16:13,889 --> 00:16:21,769
engineering community it's more about

00:16:18,110 --> 00:16:24,230
the marketing side of things events

00:16:21,769 --> 00:16:26,879
conferences being able to exchange

00:16:24,230 --> 00:16:29,249
thoughts and so on it has working groups

00:16:26,879 --> 00:16:31,049
in turns 6 and so on but it's not about

00:16:29,249 --> 00:16:32,670
like in Apache Software Foundation where

00:16:31,049 --> 00:16:34,730
people come together and say we're going

00:16:32,670 --> 00:16:37,319
to code on that and we release something

00:16:34,730 --> 00:16:38,819
every each and every of these projects

00:16:37,319 --> 00:16:41,220
is essentially required to come up with

00:16:38,819 --> 00:16:42,990
their own governance and most take that

00:16:41,220 --> 00:16:46,470
model from SF but you don't have to you

00:16:42,990 --> 00:16:49,559
can come up with whatever roughly

00:16:46,470 --> 00:16:52,379
speaking you give any questions by the

00:16:49,559 --> 00:16:55,019
way or I want to say how awful the talk

00:16:52,379 --> 00:16:58,589
was hit me up on Twitter here it's on

00:16:55,019 --> 00:17:00,420
each slide on the bottom moving on that

00:16:58,589 --> 00:17:02,249
is the current cloud native landscape

00:17:00,420 --> 00:17:04,260
that the scenes have put together and as

00:17:02,249 --> 00:17:05,819
you can see there are well you probably

00:17:04,260 --> 00:17:08,069
can't see it but there are many many

00:17:05,819 --> 00:17:12,029
things going on and these blue box

00:17:08,069 --> 00:17:13,529
things are already part of CN CF and

00:17:12,029 --> 00:17:17,730
some of them are kind of earmarked they

00:17:13,529 --> 00:17:20,730
might become they might be invited and

00:17:17,730 --> 00:17:23,970
that is version 1.1 and that again

00:17:20,730 --> 00:17:26,850
rapidly changes and gets updated the

00:17:23,970 --> 00:17:29,190
point here is really or the goal more or

00:17:26,850 --> 00:17:31,679
less to come up with the kind of a

00:17:29,190 --> 00:17:32,590
toolbox where for each of the layers

00:17:31,679 --> 00:17:34,840
here

00:17:32,590 --> 00:17:37,210
cloud-powered for provisioning runtime

00:17:34,840 --> 00:17:41,830
and so on and so forth you have at least

00:17:37,210 --> 00:17:43,840
one sometimes even two projects in CN CF

00:17:41,830 --> 00:17:45,880
that you know you can can use for a

00:17:43,840 --> 00:17:48,429
certain use case you'd say oh I need a a

00:17:45,880 --> 00:17:52,450
service mash so I might you know choose

00:17:48,429 --> 00:17:54,909
link ID and/or n boy for example some of

00:17:52,450 --> 00:17:57,580
them like container orchestration there

00:17:54,909 --> 00:18:00,640
is the can only be one there is only one

00:17:57,580 --> 00:18:06,820
that's qualities but there there are

00:18:00,640 --> 00:18:08,799
examples where you have two or more you

00:18:06,820 --> 00:18:10,659
know the old saying it works on my

00:18:08,799 --> 00:18:12,909
desktop or my laptop the cloud native

00:18:10,659 --> 00:18:14,830
version might be it works on my

00:18:12,909 --> 00:18:19,210
communities cluster or whatever cluster

00:18:14,830 --> 00:18:20,440
you have although I tweeted that I don't

00:18:19,210 --> 00:18:22,870
necessarily think that that is the

00:18:20,440 --> 00:18:24,700
greatest of the definitions so let's

00:18:22,870 --> 00:18:27,100
have a look at you know where did it

00:18:24,700 --> 00:18:29,890
come from and and you know I'm a more

00:18:27,100 --> 00:18:33,100
formal definition so people might be

00:18:29,890 --> 00:18:36,039
aware of things like you know what Sun

00:18:33,100 --> 00:18:39,520
did back in the 2000s and VMware then

00:18:36,039 --> 00:18:42,340
AWS cannot with ec2 Heroku

00:18:39,520 --> 00:18:44,860
I heard that last couple of days a lot

00:18:42,340 --> 00:18:47,380
when working into boosts that Heroku

00:18:44,860 --> 00:18:50,440
seems to be quite known thank him out

00:18:47,380 --> 00:18:53,320
opus tag at cloud foundry there in 2013

00:18:50,440 --> 00:18:55,990
docker essentially we inventing this

00:18:53,320 --> 00:18:58,330
this container and making it actually

00:18:55,990 --> 00:19:00,880
usable that the UX really well done and

00:18:58,330 --> 00:19:03,240
then 2015 the cloud native foundation

00:19:00,880 --> 00:19:06,730
cool it is incarnated foundation in it

00:19:03,240 --> 00:19:11,500
so that the hair it's more or less from

00:19:06,730 --> 00:19:15,190
all of those previous projects products

00:19:11,500 --> 00:19:19,120
ideas taking the best of all of them and

00:19:15,190 --> 00:19:23,830
combining them who knows about 12 factor

00:19:19,120 --> 00:19:25,690
apps a few so maybe a little background

00:19:23,830 --> 00:19:27,669
so if you're interested in its it's a

00:19:25,690 --> 00:19:29,529
little data it's still valid but it's

00:19:27,669 --> 00:19:31,600
like not as important as it was when it

00:19:29,529 --> 00:19:35,140
came out the Heroku folks essentially

00:19:31,600 --> 00:19:38,470
put together a number of well 12 that's

00:19:35,140 --> 00:19:41,230
why it's called 12 factors best

00:19:38,470 --> 00:19:44,230
practices essentially describing how

00:19:41,230 --> 00:19:45,870
they run their stuff and things like

00:19:44,230 --> 00:19:47,850
well you know

00:19:45,870 --> 00:19:49,140
you have a code base you have version

00:19:47,850 --> 00:19:51,720
control system where everything is there

00:19:49,140 --> 00:19:54,180
and you take stuff from there you have

00:19:51,720 --> 00:19:58,010
explicit dependencies configuration

00:19:54,180 --> 00:20:00,600
explicit and separated from the code a

00:19:58,010 --> 00:20:03,870
number of things that some of them are

00:20:00,600 --> 00:20:06,960
kind of like well that's nowadays it's

00:20:03,870 --> 00:20:11,160
it's not a big thing anymore and some of

00:20:06,960 --> 00:20:13,140
them well in in modern setups that there

00:20:11,160 --> 00:20:13,980
are a few more which I want to discuss

00:20:13,140 --> 00:20:15,390
with you in a moment

00:20:13,980 --> 00:20:17,010
but this is a kind of good starting

00:20:15,390 --> 00:20:18,420
points if you're not familiar with 12

00:20:17,010 --> 00:20:21,690
factor it certainly makes sense but keep

00:20:18,420 --> 00:20:23,760
in mind it's kind of like six seven

00:20:21,690 --> 00:20:28,020
eight years old so it's not necessarily

00:20:23,760 --> 00:20:31,740
you know it's a starting point so beyond

00:20:28,020 --> 00:20:33,390
and I'm pointing out here a work in

00:20:31,740 --> 00:20:36,540
progress that the scenes have currently

00:20:33,390 --> 00:20:39,179
does to define to properly formally find

00:20:36,540 --> 00:20:40,820
cloud native just a Google Docs and you

00:20:39,179 --> 00:20:42,900
know you're invited to go there and

00:20:40,820 --> 00:20:46,410
comment on that it's it's open to

00:20:42,900 --> 00:20:49,020
everyone and I'm basing my definition or

00:20:46,410 --> 00:20:51,120
explanation on it but it's you know as

00:20:49,020 --> 00:20:53,309
it is working progress you know we might

00:20:51,120 --> 00:20:57,530
need to refine or update one what's here

00:20:53,309 --> 00:20:59,520
my slide so one of the very defining

00:20:57,530 --> 00:21:01,320
characteristics and that was certainly

00:20:59,520 --> 00:21:03,000
not the case for the 12 factor because

00:21:01,320 --> 00:21:05,610
there was obviously written by the

00:21:03,000 --> 00:21:07,920
Heroku folks which did not really have

00:21:05,610 --> 00:21:09,780
portability between their environment

00:21:07,920 --> 00:21:10,920
and someone else's in mind they wanted

00:21:09,780 --> 00:21:13,800
to have obviously people on their

00:21:10,920 --> 00:21:15,840
environment but that is essentially what

00:21:13,800 --> 00:21:18,809
what things like when it is give you you

00:21:15,840 --> 00:21:20,640
you know start out on premises and you

00:21:18,809 --> 00:21:23,070
want to move to it of yes or you might

00:21:20,640 --> 00:21:24,300
have different clouds there and you want

00:21:23,070 --> 00:21:25,890
to have this portability you want to

00:21:24,300 --> 00:21:27,450
have you want to be able to move your

00:21:25,890 --> 00:21:29,670
workload from one environment to the

00:21:27,450 --> 00:21:32,370
other without being dependent on

00:21:29,670 --> 00:21:36,420
concrete api's of that cloud provider or

00:21:32,370 --> 00:21:38,309
OpenStack or whatever you're using the

00:21:36,420 --> 00:21:41,580
question is then what is the unit of

00:21:38,309 --> 00:21:43,710
deployment so for example the things

00:21:41,580 --> 00:21:46,620
that you package up and ship and that

00:21:43,710 --> 00:21:51,960
get launched our VMs or containers or

00:21:46,620 --> 00:21:53,640
functions very often but this is not

00:21:51,960 --> 00:21:55,050
like a hard requirement we're dealing

00:21:53,640 --> 00:21:56,580
with distributed systems if you think

00:21:55,050 --> 00:21:58,530
about micro services that potentially

00:21:56,580 --> 00:21:59,280
run in different nodes you end up with a

00:21:58,530 --> 00:22:02,100
distributed

00:21:59,280 --> 00:22:03,750
right so this is not like there are

00:22:02,100 --> 00:22:05,160
cloud native things that just simply run

00:22:03,750 --> 00:22:07,500
on one machine this is not a hard

00:22:05,160 --> 00:22:09,300
requirement but typically you do end up

00:22:07,500 --> 00:22:13,340
with it or eventually you do end up with

00:22:09,300 --> 00:22:15,330
a distributed system and one of the most

00:22:13,340 --> 00:22:18,090
probably interesting thing for many

00:22:15,330 --> 00:22:19,980
people are is elasticity so depending on

00:22:18,090 --> 00:22:21,510
the workload so you need metrics you

00:22:19,980 --> 00:22:24,990
need to know you know what the traffic

00:22:21,510 --> 00:22:27,570
is or how how high the utilization is it

00:22:24,990 --> 00:22:29,520
can scale it can automatically scale

00:22:27,570 --> 00:22:31,950
that can be on the application level so

00:22:29,520 --> 00:22:33,420
having more instances of the same thing

00:22:31,950 --> 00:22:36,450
running which is pretty easy to achieve

00:22:33,420 --> 00:22:38,490
when it's stateless or you're adding

00:22:36,450 --> 00:22:41,670
nodes so you might start out with three

00:22:38,490 --> 00:22:43,290
nodes so three VMs or whatever and then

00:22:41,670 --> 00:22:45,090
you're provisioning you're adding a new

00:22:43,290 --> 00:22:47,250
VM which obviously takes longer than

00:22:45,090 --> 00:22:49,140
spinning up a container but you know

00:22:47,250 --> 00:22:52,170
you're extending your infrastructure as

00:22:49,140 --> 00:22:55,200
the workload goes up any questions so

00:22:52,170 --> 00:22:58,730
far regarding these four things because

00:22:55,200 --> 00:23:02,280
now we're gonna go deeper even deeper

00:22:58,730 --> 00:23:05,070
portability one of the main things and

00:23:02,280 --> 00:23:08,400
again Kalidas gives you that is to avoid

00:23:05,070 --> 00:23:11,430
platform locking so rather than coding

00:23:08,400 --> 00:23:14,700
against a specific AWS or Azure or

00:23:11,430 --> 00:23:17,370
Google compute API you're essentially

00:23:14,700 --> 00:23:19,950
while you're logged in to critics if you

00:23:17,370 --> 00:23:21,930
want but that at least allows you to

00:23:19,950 --> 00:23:25,140
choose your your underlying platform

00:23:21,930 --> 00:23:26,670
then it also enables hybrid cloud

00:23:25,140 --> 00:23:29,340
deployments as I mentioned earlier on

00:23:26,670 --> 00:23:32,070
either that's what I see quite often

00:23:29,340 --> 00:23:34,290
with customers they start off in a test

00:23:32,070 --> 00:23:36,510
evaluation phase on premises and then

00:23:34,290 --> 00:23:40,200
move for the real workload into a torus

00:23:36,510 --> 00:23:42,030
for example and yeah so that you can

00:23:40,200 --> 00:23:44,520
have both you can have you know global

00:23:42,030 --> 00:23:46,560
load balancer that depending on the type

00:23:44,520 --> 00:23:49,350
of user roles the traffic but

00:23:46,560 --> 00:23:51,300
essentially this really multi cloud or

00:23:49,350 --> 00:23:55,200
hybrid cloud deployments is possible

00:23:51,300 --> 00:23:57,780
with it the unit of deployment as I said

00:23:55,200 --> 00:24:00,330
traditionally many years ago sometimes

00:23:57,780 --> 00:24:02,510
still the case you actually think and

00:24:00,330 --> 00:24:04,350
work in terms of physical servers

00:24:02,510 --> 00:24:06,060
nowadays especially in cloud

00:24:04,350 --> 00:24:07,460
environments you typically have the

00:24:06,060 --> 00:24:10,409
virtual machine

00:24:07,460 --> 00:24:14,009
increasingly containers and some say

00:24:10,409 --> 00:24:16,649
that the future belongs to servers or

00:24:14,009 --> 00:24:18,690
functions of the service so the unit

00:24:16,649 --> 00:24:22,679
that's that's the thing that you as a

00:24:18,690 --> 00:24:24,750
developer kind of care of or or have to

00:24:22,679 --> 00:24:26,610
be bothered with so if it's functions as

00:24:24,750 --> 00:24:29,100
a resource server that's the old term

00:24:26,610 --> 00:24:32,960
was then you just say okay this is my

00:24:29,100 --> 00:24:35,250
function and I upload it somewhere and

00:24:32,960 --> 00:24:36,929
magically this function will be executed

00:24:35,250 --> 00:24:39,690
we get to that in a moment but that's

00:24:36,929 --> 00:24:41,460
all you care if your unit of deployment

00:24:39,690 --> 00:24:43,649
is a container however then you probably

00:24:41,460 --> 00:24:46,440
you know you will hear or you will be

00:24:43,649 --> 00:24:50,009
bothered with what is the base image how

00:24:46,440 --> 00:24:51,450
do I get my my PHP source code into that

00:24:50,009 --> 00:24:53,279
and build my container which you're

00:24:51,450 --> 00:24:54,990
dealing with container registries you

00:24:53,279 --> 00:24:58,830
need a container Orchestrator and so on

00:24:54,990 --> 00:25:00,840
and VMs yeah so you thinking and

00:24:58,830 --> 00:25:02,460
deploying in terms of this VM and this

00:25:00,840 --> 00:25:04,830
VM and you somehow need to get the code

00:25:02,460 --> 00:25:08,460
there and so on so VMs and containers in

00:25:04,830 --> 00:25:10,259
a sense are very very rather similar in

00:25:08,460 --> 00:25:14,000
terms of this this workflow and how

00:25:10,259 --> 00:25:16,110
often F work together functions have

00:25:14,000 --> 00:25:18,620
total different characteristics

00:25:16,110 --> 00:25:22,559
especially the implications for

00:25:18,620 --> 00:25:24,600
developers so because there is no ops

00:25:22,559 --> 00:25:26,519
folks I mean there it's always some

00:25:24,600 --> 00:25:28,259
office Oaks but probably not the ones

00:25:26,519 --> 00:25:31,230
that you know are in your team or in

00:25:28,259 --> 00:25:34,470
your company so who gets paged who who

00:25:31,230 --> 00:25:36,750
will fix some some broken function

00:25:34,470 --> 00:25:42,090
that's probably you if you're a

00:25:36,750 --> 00:25:47,179
developer and another remark regarding

00:25:42,090 --> 00:25:50,340
distributed systems the typical

00:25:47,179 --> 00:25:51,840
assumption is that whatever you're

00:25:50,340 --> 00:25:53,970
building there whatever distributed

00:25:51,840 --> 00:25:56,100
system can scale out on commodity

00:25:53,970 --> 00:25:58,889
hardware this is nowadays it's kind of

00:25:56,100 --> 00:26:01,080
like yeah what else some fifteen twenty

00:25:58,889 --> 00:26:04,409
years ago that was a big thing that

00:26:01,080 --> 00:26:08,700
actually led Google to build things like

00:26:04,409 --> 00:26:10,139
borg and the Google file system and many

00:26:08,700 --> 00:26:12,870
many other things because they said well

00:26:10,139 --> 00:26:15,049
we're not gonna pay HPE or whatever big

00:26:12,870 --> 00:26:17,789
money for these big boxes we're gonna

00:26:15,049 --> 00:26:19,529
make our stuff run on quality hardware

00:26:17,789 --> 00:26:20,650
that doesn't mean cheap hardware it just

00:26:19,529 --> 00:26:22,660
means you know quality

00:26:20,650 --> 00:26:25,840
just can buy it everywhere and put it in

00:26:22,660 --> 00:26:28,210
and we just put many many many of the

00:26:25,840 --> 00:26:32,230
same boxes there and actually take care

00:26:28,210 --> 00:26:33,730
of the the failover the reliability and

00:26:32,230 --> 00:26:36,190
so on on the software layer we are not

00:26:33,730 --> 00:26:38,770
you know trying to make hardware and

00:26:36,190 --> 00:26:41,080
paying for hardware that is fault

00:26:38,770 --> 00:26:43,030
tolerant and whatever we are doing that

00:26:41,080 --> 00:26:45,490
and the software layer nowadays it's

00:26:43,030 --> 00:26:47,230
kind of like yeah I mean does anyone of

00:26:45,490 --> 00:26:50,020
you still have kind of like dedicated

00:26:47,230 --> 00:26:52,060
special hardware which is not kind of

00:26:50,020 --> 00:26:55,270
quality where it can buy it everywhere

00:26:52,060 --> 00:27:00,040
you want anyone yeah you you seem to be

00:26:55,270 --> 00:27:01,660
very special there is the good old

00:27:00,040 --> 00:27:07,930
fallacies of distributed computing

00:27:01,660 --> 00:27:09,720
around 2004 remember a guy from from San

00:27:07,930 --> 00:27:13,690
put that together seven or eight

00:27:09,720 --> 00:27:15,460
fallacies things like the network it's

00:27:13,690 --> 00:27:18,040
not reliable and so on and so forth and

00:27:15,460 --> 00:27:20,590
that that's that is still true and and

00:27:18,040 --> 00:27:23,920
even more so in these setups where

00:27:20,590 --> 00:27:25,150
public cloud private and so on so read

00:27:23,920 --> 00:27:26,510
up on the fallacies if you don't know

00:27:25,150 --> 00:27:28,320
them

00:27:26,510 --> 00:27:31,840
[Music]

00:27:28,320 --> 00:27:33,520
together with this commodity hardware

00:27:31,840 --> 00:27:35,950
there is one thing and you might

00:27:33,520 --> 00:27:38,650
remember this wonderful term no sequel

00:27:35,950 --> 00:27:41,080
which was never really about sequel but

00:27:38,650 --> 00:27:43,540
about the fact that relational databases

00:27:41,080 --> 00:27:47,020
were not inherently able to shark the

00:27:43,540 --> 00:27:49,630
data right Along Came the MongoDB is and

00:27:47,020 --> 00:27:51,790
Cassandra's and whatnot that essentially

00:27:49,630 --> 00:27:53,860
said well I I can just shard I can just

00:27:51,790 --> 00:27:56,680
chop up my date and distribute it on

00:27:53,860 --> 00:27:59,380
different nodes and still present the

00:27:56,680 --> 00:28:02,350
kind of logical unified view towards the

00:27:59,380 --> 00:28:03,670
the end user you can do like nowadays

00:28:02,350 --> 00:28:05,080
with K'Ehleyr or whatever you can do

00:28:03,670 --> 00:28:08,200
that the same thing for relational

00:28:05,080 --> 00:28:11,290
databases it was just back then 1012

00:28:08,200 --> 00:28:15,460
years ago just not not there out

00:28:11,290 --> 00:28:17,470
available in the open source finally we

00:28:15,460 --> 00:28:20,830
move on to the containers and container

00:28:17,470 --> 00:28:25,480
orchestration container 101 what is a

00:28:20,830 --> 00:28:29,020
container any takers any brave people

00:28:25,480 --> 00:28:31,120
what is a container not not the ship

00:28:29,020 --> 00:28:32,230
thing that the thing that runs on your

00:28:31,120 --> 00:28:41,169
computer

00:28:32,230 --> 00:28:43,419
yes I take the processes yes yes I take

00:28:41,169 --> 00:28:46,899
the processes I slightly rephrase that

00:28:43,419 --> 00:28:50,919
and say it's really just a process group

00:28:46,899 --> 00:28:54,809
technically process on steroids taking a

00:28:50,919 --> 00:28:57,880
few of these built-in Linux kernel

00:28:54,809 --> 00:28:59,860
concepts namespaces see groups and copy

00:28:57,880 --> 00:29:01,779
and write file systems and the big

00:28:59,860 --> 00:29:03,399
innovation the big you know thank you

00:29:01,779 --> 00:29:05,200
for for doing that docker was

00:29:03,399 --> 00:29:08,139
essentially to make that usable so

00:29:05,200 --> 00:29:12,279
containers existed for for a long time

00:29:08,139 --> 00:29:14,620
you know we had Giroud I don't know 20

00:29:12,279 --> 00:29:16,450
years ago we had Solaris zones we had

00:29:14,620 --> 00:29:19,539
many alexey with many many things but

00:29:16,450 --> 00:29:21,940
they were mainly operation tools

00:29:19,539 --> 00:29:23,590
operators administrators they would know

00:29:21,940 --> 00:29:25,720
their way around they would you know be

00:29:23,590 --> 00:29:27,159
happily directly creating a c group in

00:29:25,720 --> 00:29:29,710
the namespace and enter that namespace

00:29:27,159 --> 00:29:33,940
and whatnot and doc committed a CCS or

00:29:29,710 --> 00:29:37,059
doc haram boom even my my dad can do

00:29:33,940 --> 00:29:38,860
that so really i mean

00:29:37,059 --> 00:29:40,720
don't bother with all the details here

00:29:38,860 --> 00:29:42,909
but if you are interested in i maintain

00:29:40,720 --> 00:29:45,070
this containers in for this advocacy

00:29:42,909 --> 00:29:46,870
side if you're really interested in what

00:29:45,070 --> 00:29:51,760
exactly is the pit namespace and what

00:29:46,870 --> 00:29:55,029
exactly is the Seagram x you typically

00:29:51,760 --> 00:29:58,179
as a developer you might you might have

00:29:55,029 --> 00:29:59,830
reason why you want to you know control

00:29:58,179 --> 00:30:01,779
a certain c group or a namespace or

00:29:59,830 --> 00:30:04,299
whatever typically you don't it's it's

00:30:01,779 --> 00:30:07,480
kind of hidden away but it's nice to

00:30:04,299 --> 00:30:09,250
know and so that the see groups version

00:30:07,480 --> 00:30:11,740
of hydra one there is now a new one

00:30:09,250 --> 00:30:13,179
version two coming out but again that's

00:30:11,740 --> 00:30:15,429
that's kind of like hidden away wrapped

00:30:13,179 --> 00:30:16,690
away by da current and others that you

00:30:15,429 --> 00:30:19,419
don't need to bother about that

00:30:16,690 --> 00:30:21,159
you just remember container is really

00:30:19,419 --> 00:30:23,139
nothing else then process or process

00:30:21,159 --> 00:30:24,850
group that leverages a few kernel

00:30:23,139 --> 00:30:27,070
features like name is bcc groups and

00:30:24,850 --> 00:30:28,990
copy-on-write file systems to give you

00:30:27,070 --> 00:30:31,000
this nice experience and what's the goal

00:30:28,990 --> 00:30:35,830
of container why do we use containers

00:30:31,000 --> 00:30:39,399
but what problem does it solve blank

00:30:35,830 --> 00:30:41,470
stares who is who is done doc heron who

00:30:39,399 --> 00:30:43,080
has ever done docker run ok why did you

00:30:41,470 --> 00:30:45,659
do that because it's cool right

00:30:43,080 --> 00:30:47,760
No consider your boss told you like what

00:30:45,659 --> 00:30:55,230
why did you do that what what problem

00:30:47,760 --> 00:30:57,630
does it solve okay you again yes yes

00:30:55,230 --> 00:30:59,870
excellent I will again rephrase it

00:30:57,630 --> 00:31:03,120
slightly but you hit the the nail

00:30:59,870 --> 00:31:05,130
essentially what containers really

00:31:03,120 --> 00:31:07,260
solves is justice application level

00:31:05,130 --> 00:31:09,570
dependency management I don't know if

00:31:07,260 --> 00:31:10,830
that exists in PHP please educate me I

00:31:09,570 --> 00:31:12,330
just know it from Python where it's

00:31:10,830 --> 00:31:14,850
called virtual and for a century say

00:31:12,330 --> 00:31:16,919
well I need this specific version so I'm

00:31:14,850 --> 00:31:18,809
gonna create a virtual environment and I

00:31:16,919 --> 00:31:20,850
can install whatever I want there I

00:31:18,809 --> 00:31:22,830
don't pollute the global system does

00:31:20,850 --> 00:31:30,350
that exist in PHP is that a problem in

00:31:22,830 --> 00:31:33,000
PHP no PHP doesn't use versions no issue

00:31:30,350 --> 00:31:34,710
okay but that's that's a problem right

00:31:33,000 --> 00:31:37,200
because on my machine here I might have

00:31:34,710 --> 00:31:38,850
version help me out five or whatever in

00:31:37,200 --> 00:31:40,980
production I use or other way around I

00:31:38,850 --> 00:31:43,529
have version PHP seven here and in

00:31:40,980 --> 00:31:46,230
production I five whatever and you know

00:31:43,529 --> 00:31:47,789
it works a lot machine when I deploy it

00:31:46,230 --> 00:31:50,010
there and it doesn't work and you know

00:31:47,789 --> 00:31:52,970
yours head and administrator said and

00:31:50,010 --> 00:31:55,769
yells at you and you like Shrek so

00:31:52,970 --> 00:31:57,870
that's what containers do they make sure

00:31:55,769 --> 00:32:01,110
that all the application level

00:31:57,870 --> 00:32:03,510
dependencies are packaged up so you know

00:32:01,110 --> 00:32:05,399
that that that works in your

00:32:03,510 --> 00:32:08,669
machine is exactly the same that works

00:32:05,399 --> 00:32:11,789
or breaks in production but at least you

00:32:08,669 --> 00:32:13,889
know what it is right so you don't need

00:32:11,789 --> 00:32:22,679
to like oh can I quickly ssh into that

00:32:13,889 --> 00:32:24,600
box and SSH access so it's reproducible

00:32:22,679 --> 00:32:28,080
right it's about environments language

00:32:24,600 --> 00:32:29,730
specific environments and and it solves

00:32:28,080 --> 00:32:31,830
this packaging problem on a generic

00:32:29,730 --> 00:32:35,309
level not on a per language level but on

00:32:31,830 --> 00:32:38,010
a chair clip so you say I want to base

00:32:35,309 --> 00:32:41,100
this on this version of PHP let's say

00:32:38,010 --> 00:32:43,860
five point six or whatever it is and by

00:32:41,100 --> 00:32:45,059
creating this container image which the

00:32:43,860 --> 00:32:47,850
end of three uses these copy-on-write

00:32:45,059 --> 00:32:50,659
file systems layers then package just

00:32:47,850 --> 00:32:52,919
them up slap some metadata on top of it

00:32:50,659 --> 00:32:55,260
you can run it locally you can say

00:32:52,919 --> 00:32:56,200
docker run boom and it works and then

00:32:55,260 --> 00:32:59,139
you put that

00:32:56,200 --> 00:33:00,519
a registry and someone post it from the

00:32:59,139 --> 00:33:01,929
air and can deploy it and has to

00:33:00,519 --> 00:33:03,549
guarantee that it's exactly the same

00:33:01,929 --> 00:33:06,070
environment that's the kind of dream

00:33:03,549 --> 00:33:08,649
that we always had right development QA

00:33:06,070 --> 00:33:09,159
whatever production always looks the

00:33:08,649 --> 00:33:13,899
same

00:33:09,159 --> 00:33:16,389
voila we have solved that problem almost

00:33:13,899 --> 00:33:19,750
container orchestration container

00:33:16,389 --> 00:33:22,480
orchestration is like okay I've solved

00:33:19,750 --> 00:33:25,380
that problem running a single container

00:33:22,480 --> 00:33:28,389
on a machine which is you know the Quran

00:33:25,380 --> 00:33:31,600
but what about if I have micro-services

00:33:28,389 --> 00:33:35,049
or I have multiple things that you know

00:33:31,600 --> 00:33:36,460
look identically wait replicates or I

00:33:35,049 --> 00:33:40,380
want to charge something or whatever so

00:33:36,460 --> 00:33:43,860
more containers on more than one note

00:33:40,380 --> 00:33:45,760
well I need something that does this for

00:33:43,860 --> 00:33:49,419
castration thing orchestrations it's

00:33:45,760 --> 00:33:51,850
really a very fluffy term that spends

00:33:49,419 --> 00:33:54,309
typically these things so you're talking

00:33:51,850 --> 00:33:56,950
about scheduling I need to decide well

00:33:54,309 --> 00:33:59,769
this container here I'm gonna put it I'm

00:33:56,950 --> 00:34:01,330
gonna launch it on this node and then if

00:33:59,769 --> 00:34:03,190
I want to connect to it then I somehow

00:34:01,330 --> 00:34:04,870
need to remember I had this container is

00:34:03,190 --> 00:34:06,360
on that node so you know if traffic

00:34:04,870 --> 00:34:09,700
comes in I'm gonna route it to this node

00:34:06,360 --> 00:34:11,950
who did that so far without containers

00:34:09,700 --> 00:34:15,700
and container orchestrators or how did

00:34:11,950 --> 00:34:16,960
we do that if you're not in operations

00:34:15,700 --> 00:34:19,329
you probably don't know but you know you

00:34:16,960 --> 00:34:21,520
had we had a spreadsheet right this

00:34:19,329 --> 00:34:23,139
application runs on this node so if

00:34:21,520 --> 00:34:25,030
someone asks that well you know you have

00:34:23,139 --> 00:34:27,250
to connect to this node on this port in

00:34:25,030 --> 00:34:29,230
order to start with that application so

00:34:27,250 --> 00:34:31,690
there was a container or an application

00:34:29,230 --> 00:34:34,329
or whatever Orchestrator just was not

00:34:31,690 --> 00:34:36,099
very automated later on there were other

00:34:34,329 --> 00:34:38,020
approaches you know using chef and

00:34:36,099 --> 00:34:41,530
puppet in the first generation there was

00:34:38,020 --> 00:34:44,020
fleet from Korres you can do shell

00:34:41,530 --> 00:34:45,909
scripts whenever you find yourself that

00:34:44,020 --> 00:34:47,470
you're resenting the wheel there's

00:34:45,909 --> 00:34:49,960
something else that actually does it

00:34:47,470 --> 00:34:51,609
maybe don't do it maybe use that thing

00:34:49,960 --> 00:34:54,040
that actually was written for that by

00:34:51,609 --> 00:34:56,589
people who know what they're doing you

00:34:54,040 --> 00:34:59,050
have some kind of organizational

00:34:56,589 --> 00:35:01,270
primitives used to work at atmosphere

00:34:59,050 --> 00:35:03,130
with messes they were where these kind

00:35:01,270 --> 00:35:04,950
of like static or marathon really the

00:35:03,130 --> 00:35:07,690
aesthetic constructs called groups in

00:35:04,950 --> 00:35:10,000
later on labels where we're introduced

00:35:07,690 --> 00:35:11,800
in committees we're organizing things

00:35:10,000 --> 00:35:14,440
with labels we are labeling stuff saying

00:35:11,800 --> 00:35:16,690
like this thing here this part or

00:35:14,440 --> 00:35:19,180
whatever this is something that runs in

00:35:16,690 --> 00:35:21,790
production or in death or it belongs to

00:35:19,180 --> 00:35:24,700
this organization or it has been created

00:35:21,790 --> 00:35:26,590
by this author or whatever so we just

00:35:24,700 --> 00:35:28,330
slept labels on things and then we can

00:35:26,590 --> 00:35:30,250
filter by that we can you know do set

00:35:28,330 --> 00:35:33,610
based operations we say I want to see

00:35:30,250 --> 00:35:36,850
all parts that micro created in this

00:35:33,610 --> 00:35:39,670
namespace in this environment in you

00:35:36,850 --> 00:35:42,580
know that are five days old well most

00:35:39,670 --> 00:35:43,900
parts are not but scaling that's one of

00:35:42,580 --> 00:35:46,810
the things we already mentioned earlier

00:35:43,900 --> 00:35:48,220
on upgrade so you can do rolling

00:35:46,810 --> 00:35:51,330
upgrades you can do Bluegreen

00:35:48,220 --> 00:35:53,590
deployments you can do maybe deployments

00:35:51,330 --> 00:35:55,180
service discovery which is kind of like

00:35:53,590 --> 00:35:57,250
the price you're paying for this

00:35:55,180 --> 00:35:59,770
automatic scheduling that's this kind of

00:35:57,250 --> 00:36:01,570
lookup thing where you say well I don't

00:35:59,770 --> 00:36:03,730
really know where this container runs so

00:36:01,570 --> 00:36:06,430
I need to have some system that tells me

00:36:03,730 --> 00:36:09,060
to which actual VM or whatever hosts

00:36:06,430 --> 00:36:11,620
that container I need to connect to

00:36:09,060 --> 00:36:14,800
health checks or probes as we call them

00:36:11,620 --> 00:36:17,440
in communities essentially if you

00:36:14,800 --> 00:36:19,300
provide certain mechanism that the

00:36:17,440 --> 00:36:21,340
container Orchestrator can check how

00:36:19,300 --> 00:36:23,050
your application is doing then certain

00:36:21,340 --> 00:36:25,390
things can be automated for example you

00:36:23,050 --> 00:36:27,510
could say well I'm gonna hit the route

00:36:25,390 --> 00:36:31,960
they're gonna you know your application

00:36:27,510 --> 00:36:34,180
HTTP route and if I get a 200 I consider

00:36:31,960 --> 00:36:36,730
this application runs right or is is

00:36:34,180 --> 00:36:38,620
healthy or you could have some database

00:36:36,730 --> 00:36:41,110
application where I need to connect my a

00:36:38,620 --> 00:36:44,110
TCP and if I you know can connect and

00:36:41,110 --> 00:36:48,520
yeah I consider it healthy and based on

00:36:44,110 --> 00:36:50,830
that information either yeah some some

00:36:48,520 --> 00:36:53,620
kind of thing that looks after services

00:36:50,830 --> 00:36:55,210
routing traffic or some local supervisor

00:36:53,620 --> 00:36:57,010
that decides when to restart the

00:36:55,210 --> 00:36:58,960
container can just automatically do

00:36:57,010 --> 00:37:00,790
things that typically used to be done by

00:36:58,960 --> 00:37:02,680
humans that would look but poked

00:37:00,790 --> 00:37:06,160
applications are that looks dead I think

00:37:02,680 --> 00:37:09,040
I'm gonna restart get any questions here

00:37:06,160 --> 00:37:10,240
so quite a lot of information but just

00:37:09,040 --> 00:37:12,310
on a very high level that's what a

00:37:10,240 --> 00:37:14,080
container Orchestrator if you if you're

00:37:12,310 --> 00:37:15,340
buying into a container Orchestrator and

00:37:14,080 --> 00:37:16,630
it only does one thing then it's

00:37:15,340 --> 00:37:19,950
probably not a container Orchestrator

00:37:16,630 --> 00:37:22,120
but the scheduler or whatever else so

00:37:19,950 --> 00:37:23,790
what do we use what's the standard

00:37:22,120 --> 00:37:26,160
that's very simple as of

00:37:23,790 --> 00:37:28,920
2018 it's committees so the container

00:37:26,160 --> 00:37:31,740
orchestration wars over committees has

00:37:28,920 --> 00:37:34,920
has one essentially it takes care of

00:37:31,740 --> 00:37:38,040
this container lifecycle management you

00:37:34,920 --> 00:37:40,860
define you say here I have a stateless

00:37:38,040 --> 00:37:42,780
long-running workload and you know Kunis

00:37:40,860 --> 00:37:45,240
takes care of all that on the right hand

00:37:42,780 --> 00:37:46,950
side you see a typical set up with all

00:37:45,240 --> 00:37:49,380
the details you don't really see it but

00:37:46,950 --> 00:37:51,330
once you get the slides that has

00:37:49,380 --> 00:37:53,370
components up there that's the control

00:37:51,330 --> 00:37:55,650
plane there are a few things in there

00:37:53,370 --> 00:37:57,150
the API server which is kind of like the

00:37:55,650 --> 00:37:58,710
brain everything talks with the API

00:37:57,150 --> 00:38:00,390
server which is stateless pretty much

00:37:58,710 --> 00:38:03,090
all of that is stateless besides EDD

00:38:00,390 --> 00:38:05,130
which is a distributed key-value store

00:38:03,090 --> 00:38:08,550
where everything the entire cluster

00:38:05,130 --> 00:38:10,890
state is is captured so if you launch

00:38:08,550 --> 00:38:14,640
pot there then you know there will be an

00:38:10,890 --> 00:38:17,100
entry in entity that says this part or

00:38:14,640 --> 00:38:18,840
the on this node there is a part running

00:38:17,100 --> 00:38:21,510
that belongs to this deployment for

00:38:18,840 --> 00:38:23,670
example and then you have all these

00:38:21,510 --> 00:38:25,740
nodes you know okay three those are the

00:38:23,670 --> 00:38:27,840
worker nodes that actually carry out the

00:38:25,740 --> 00:38:29,750
work and they're again a few things

00:38:27,840 --> 00:38:31,950
there that communities needs it's the

00:38:29,750 --> 00:38:33,870
the cubelet is kind of like the

00:38:31,950 --> 00:38:35,940
supervisor for the runtime you have

00:38:33,870 --> 00:38:38,220
queue proxy and then the actual runtime

00:38:35,940 --> 00:38:40,020
which now they still the default is

00:38:38,220 --> 00:38:40,560
darker but there are alternatives like

00:38:40,020 --> 00:38:43,830
cryo

00:38:40,560 --> 00:38:46,080
that start to replace to occur there so

00:38:43,830 --> 00:38:47,880
at the end of the day if you are you

00:38:46,080 --> 00:38:51,180
know on your machine you would say doc

00:38:47,880 --> 00:38:52,800
Herron or docker PS or whatever so as an

00:38:51,180 --> 00:38:54,270
admin you typically as a developer you

00:38:52,800 --> 00:38:56,790
don't get there but there's an admin you

00:38:54,270 --> 00:38:59,070
would ssh into node one and you could

00:38:56,790 --> 00:39:01,290
actually say docker PS and you would see

00:38:59,070 --> 00:39:04,530
all the parts all the containers that

00:39:01,290 --> 00:39:07,140
run that run there and koona this just

00:39:04,530 --> 00:39:09,420
adds another abstraction on top of

00:39:07,140 --> 00:39:15,330
containers so called parts which mainly

00:39:09,420 --> 00:39:18,390
are useful for local locality for strong

00:39:15,330 --> 00:39:21,650
coupling as I mentioned early on very

00:39:18,390 --> 00:39:24,720
very important characteristics of API

00:39:21,650 --> 00:39:27,360
the whole thing in qualities is

00:39:24,720 --> 00:39:29,460
declarative so you just say this is the

00:39:27,360 --> 00:39:33,180
state that I want to have for example I

00:39:29,460 --> 00:39:35,700
want to have three instances or replicas

00:39:33,180 --> 00:39:36,990
of nginx running take care of it I don't

00:39:35,700 --> 00:39:38,970
care how you do it just

00:39:36,990 --> 00:39:40,410
make sure three are running and then you

00:39:38,970 --> 00:39:42,780
know something might happen to note

00:39:40,410 --> 00:39:46,140
three you know power outage and a trike

00:39:42,780 --> 00:39:49,650
or whatever and then something it's

00:39:46,140 --> 00:39:51,329
called the controller that just runs in

00:39:49,650 --> 00:39:53,400
a loop and that's the state driven part

00:39:51,329 --> 00:39:54,990
looks at it and says oh users have three

00:39:53,400 --> 00:39:56,819
and you know this note is gone so that

00:39:54,990 --> 00:39:58,800
part is gone oh I need to spin up

00:39:56,819 --> 00:40:00,630
another pod somewhere else right so you

00:39:58,800 --> 00:40:02,550
as a user don't care about how

00:40:00,630 --> 00:40:07,819
communities manages that you just say I

00:40:02,550 --> 00:40:07,819
want three go ahead you know make it so

00:40:07,880 --> 00:40:12,960
great this is super extensible and

00:40:10,530 --> 00:40:15,210
that's also very scary because there are

00:40:12,960 --> 00:40:17,160
so many moving parts even I or others

00:40:15,210 --> 00:40:19,260
who work upstream who work in

00:40:17,160 --> 00:40:21,359
communities don't typically know all of

00:40:19,260 --> 00:40:23,069
the extension points because depending

00:40:21,359 --> 00:40:26,130
on where you look you can write plug-ins

00:40:23,069 --> 00:40:28,079
for the for cube cuddle you can write

00:40:26,130 --> 00:40:30,390
plug-ins for that you can exchange the

00:40:28,079 --> 00:40:33,240
runtime you can exchange different types

00:40:30,390 --> 00:40:37,260
of storage networking layer everywhere

00:40:33,240 --> 00:40:41,430
you can extend the objects or resources

00:40:37,260 --> 00:40:43,790
that that the API server understands you

00:40:41,430 --> 00:40:46,380
can define so-called custom resources

00:40:43,790 --> 00:40:48,089
like you can extend it in every

00:40:46,380 --> 00:40:50,010
direction that's scary that's a good

00:40:48,089 --> 00:40:52,770
thing but that's scary so typically what

00:40:50,010 --> 00:40:56,490
people do is that the reason why people

00:40:52,770 --> 00:40:57,750
like myself have a job is they you know

00:40:56,490 --> 00:40:59,790
rather than rolling their own

00:40:57,750 --> 00:41:01,770
communities distribution they they take

00:40:59,790 --> 00:41:03,299
a existing could this distribution like

00:41:01,770 --> 00:41:07,710
like over shift the stuff that I'm gonna

00:41:03,299 --> 00:41:09,930
show you later on and yeah last but not

00:41:07,710 --> 00:41:12,780
least all of that is built with this

00:41:09,930 --> 00:41:15,750
idea of being very robust and and and

00:41:12,780 --> 00:41:17,520
scalable so each of the parts you know

00:41:15,750 --> 00:41:19,920
can just die and can come up again and

00:41:17,520 --> 00:41:23,549
continue to work and many of those we

00:41:19,920 --> 00:41:26,609
typically seen thousand two thousand

00:41:23,549 --> 00:41:29,520
node clusters tens of thousands of

00:41:26,609 --> 00:41:32,130
services that still you know doable with

00:41:29,520 --> 00:41:33,359
without bending yourself or backwards

00:41:32,130 --> 00:41:37,040
you can just do that with the vanilla

00:41:33,359 --> 00:41:39,990
setups there any questions so far

00:41:37,040 --> 00:41:41,970
because now we are getting into a little

00:41:39,990 --> 00:41:45,150
bit more inspirational things things

00:41:41,970 --> 00:41:46,390
that exist but not necessarily our

00:41:45,150 --> 00:41:49,660
production ready

00:41:46,390 --> 00:41:51,370
let's put it that way service meshes who

00:41:49,660 --> 00:41:55,690
has heard about service meshes or a

00:41:51,370 --> 00:41:58,060
service mesh one - of course you - three

00:41:55,690 --> 00:42:02,980
okay so three people out of I don't know

00:41:58,060 --> 00:42:04,210
40 50 60 the basic idea is essentially

00:42:02,980 --> 00:42:07,840
the same as with communities where you

00:42:04,210 --> 00:42:09,910
say well you know if you find yourself

00:42:07,840 --> 00:42:13,330
doing certain things at Hakan you know

00:42:09,910 --> 00:42:15,220
with shell scripts or whatever maybe

00:42:13,330 --> 00:42:17,410
this is a good time to actually use

00:42:15,220 --> 00:42:19,930
something that actually was designed for

00:42:17,410 --> 00:42:21,430
that and in the case of service meshes

00:42:19,930 --> 00:42:23,590
it's really about the communication

00:42:21,430 --> 00:42:27,340
between different entities in this case

00:42:23,590 --> 00:42:31,060
parts in within communities is do is

00:42:27,340 --> 00:42:33,520
generic or you can use should be able to

00:42:31,060 --> 00:42:36,130
use it with others as well but it

00:42:33,520 --> 00:42:40,330
focuses for now on communities so forget

00:42:36,130 --> 00:42:42,490
about all these labels there at the end

00:42:40,330 --> 00:42:44,320
of the day what you want to say is if I

00:42:42,490 --> 00:42:45,820
have something an application in

00:42:44,320 --> 00:42:48,670
communities running here and something

00:42:45,820 --> 00:42:50,260
running there this one is allowed to

00:42:48,670 --> 00:42:54,070
talk to this one but not the other way

00:42:50,260 --> 00:42:57,100
around or you want to inject some

00:42:54,070 --> 00:43:00,460
failure and you want to make sure that

00:42:57,100 --> 00:43:02,760
the connection is secure by a TLS for

00:43:00,460 --> 00:43:05,980
example so it's about traffic management

00:43:02,760 --> 00:43:08,110
you get for free you get a monitoring

00:43:05,980 --> 00:43:10,630
and tracing so rather than pushing that

00:43:08,110 --> 00:43:12,940
into developers has anyone ever been

00:43:10,630 --> 00:43:14,410
asked to instrument their code do people

00:43:12,940 --> 00:43:18,730
actually know what instrument in their

00:43:14,410 --> 00:43:22,060
code is no lucky you so really it's

00:43:18,730 --> 00:43:23,770
about well you know we we need to get

00:43:22,060 --> 00:43:25,210
some insight into what's going on in to

00:43:23,770 --> 00:43:27,220
your application so please provide an

00:43:25,210 --> 00:43:33,280
endpoint that gives us certain metrics

00:43:27,220 --> 00:43:35,680
and that the service message measures

00:43:33,280 --> 00:43:37,710
essentially solve that problem they take

00:43:35,680 --> 00:43:40,810
care of that outside of the application

00:43:37,710 --> 00:43:44,320
you can have policy enforcement as I

00:43:40,810 --> 00:43:46,230
said early on and it provides each of

00:43:44,320 --> 00:43:49,510
these players with an identity and

00:43:46,230 --> 00:43:51,610
enable security idea and the most

00:43:49,510 --> 00:43:53,710
important thing as I said it just runs

00:43:51,610 --> 00:43:55,480
with the code itself you don't need to

00:43:53,710 --> 00:43:59,100
change the code all of these things are

00:43:55,480 --> 00:44:01,830
automatically injected through sidecars

00:43:59,100 --> 00:44:04,560
pattern data meshes essentially the same

00:44:01,830 --> 00:44:07,280
idea applied to data and the problem

00:44:04,560 --> 00:44:13,500
we're solving is essentially this one

00:44:07,280 --> 00:44:16,260
which is not unknown or uncommon the

00:44:13,500 --> 00:44:19,080
product here launched very very recently

00:44:16,260 --> 00:44:20,100
actually UK based company called what

00:44:19,080 --> 00:44:22,430
the company is called differently but

00:44:20,100 --> 00:44:24,930
the product is called top mesh and

00:44:22,430 --> 00:44:28,320
essentially allows you to capture this

00:44:24,930 --> 00:44:29,840
state think databases data stores across

00:44:28,320 --> 00:44:33,780
different micro-services

00:44:29,840 --> 00:44:36,270
operates in the file system level and it

00:44:33,780 --> 00:44:37,970
kind of like externalizes to snapshot in

00:44:36,270 --> 00:44:42,150
the same way that service meshes

00:44:37,970 --> 00:44:43,410
externalize this matrix issue for you so

00:44:42,150 --> 00:44:45,330
you don't need to do that in your

00:44:43,410 --> 00:44:48,450
application you just say oh I'm running

00:44:45,330 --> 00:44:50,610
elasticsearch MongoDB my sequel database

00:44:48,450 --> 00:44:55,340
and you can just snapshot that and then

00:44:50,610 --> 00:44:59,010
compare that and aggregate that as well

00:44:55,340 --> 00:45:00,780
it really helps you in terms of you know

00:44:59,010 --> 00:45:02,190
what happened there well you can go

00:45:00,780 --> 00:45:03,690
through all the logs and trying to

00:45:02,190 --> 00:45:05,760
figure out what happened or you can

00:45:03,690 --> 00:45:08,490
actually look at that snapshot and say

00:45:05,760 --> 00:45:10,380
ah ok I see that was the state of let's

00:45:08,490 --> 00:45:12,360
say the date database table at that

00:45:10,380 --> 00:45:14,640
point in time and that's the diff here

00:45:12,360 --> 00:45:16,950
ah ok so if you if you're familiar with

00:45:14,640 --> 00:45:19,200
git and that get interface get commit

00:45:16,950 --> 00:45:21,990
and so on in terms of UX it has

00:45:19,200 --> 00:45:23,280
essentially that interface with slightly

00:45:21,990 --> 00:45:26,640
different semantics and as I said

00:45:23,280 --> 00:45:30,360
targeted focusing on on data stores

00:45:26,640 --> 00:45:33,240
databases if you interested in that I

00:45:30,360 --> 00:45:37,320
interviewed Luke Merson of the CEO of

00:45:33,240 --> 00:45:40,890
the company last week and you can you

00:45:37,320 --> 00:45:42,240
can watch this video on YouTube last but

00:45:40,890 --> 00:45:46,650
not least and then we're getting funny

00:45:42,240 --> 00:45:48,180
to the demo is observability and that is

00:45:46,650 --> 00:45:49,650
a very very op c

00:45:48,180 --> 00:45:51,330
topic but you should at least be aware

00:45:49,650 --> 00:45:53,430
of it what it means in the context of

00:45:51,330 --> 00:45:56,340
containers you want to be able to

00:45:53,430 --> 00:45:58,440
monitor not only the host the Box were

00:45:56,340 --> 00:46:00,890
containers run but actually each and

00:45:58,440 --> 00:46:03,090
every individual container or part and

00:46:00,890 --> 00:46:04,830
that means that the traditional way of

00:46:03,090 --> 00:46:06,390
doing monitoring does not really work so

00:46:04,830 --> 00:46:08,490
you need to be able to because

00:46:06,390 --> 00:46:12,510
containers come and go right they might

00:46:08,490 --> 00:46:15,570
only run for 30 seconds maybe a minute

00:46:12,510 --> 00:46:18,290
run longer but it's not the same way

00:46:15,570 --> 00:46:20,400
that you know a VM weeks and and

00:46:18,290 --> 00:46:23,520
potentially month but you know in terms

00:46:20,400 --> 00:46:24,750
of yeah could be seconds so you need to

00:46:23,520 --> 00:46:27,450
be fast you need to be immediately

00:46:24,750 --> 00:46:29,190
available to grab the metrics to

00:46:27,450 --> 00:46:31,800
aggregate stuff across different nodes

00:46:29,190 --> 00:46:34,320
same from monitoring and logging and

00:46:31,800 --> 00:46:36,540
distributed tracing if you think about

00:46:34,320 --> 00:46:38,520
when you open up developer mode in your

00:46:36,540 --> 00:46:41,400
browser that thing that you see down

00:46:38,520 --> 00:46:43,290
there this call graph that's the same

00:46:41,400 --> 00:46:45,750
thing for a cluster or for micro

00:46:43,290 --> 00:46:47,550
services so you see oh you know it first

00:46:45,750 --> 00:46:50,700
went through this micro service and then

00:46:47,550 --> 00:46:52,350
it spent 500 seconds in that one and so

00:46:50,700 --> 00:46:54,390
on so you can you get an idea where it's

00:46:52,350 --> 00:46:56,310
the bottleneck you see what you can

00:46:54,390 --> 00:46:58,170
optimize you can use it for for

00:46:56,310 --> 00:47:01,410
troubleshooting so essentially the same

00:46:58,170 --> 00:47:02,790
idea that you have in your browser two

00:47:01,410 --> 00:47:04,980
people know what I mean this waterfall

00:47:02,790 --> 00:47:06,450
thing there yeah the same thing for

00:47:04,980 --> 00:47:08,910
distributed system that's just really

00:47:06,450 --> 00:47:11,430
tracing this little fellow here the

00:47:08,910 --> 00:47:13,800
Jaeger project there is a standard

00:47:11,430 --> 00:47:15,780
behind that open tracing and he kept

00:47:13,800 --> 00:47:17,940
being one of these products from it as

00:47:15,780 --> 00:47:20,370
being this monitoring in qualities it's

00:47:17,940 --> 00:47:22,440
the standard nowadays and one example a

00:47:20,370 --> 00:47:26,730
very popular one for logging for logging

00:47:22,440 --> 00:47:29,670
aggregation being this either efk or LK

00:47:26,730 --> 00:47:33,120
Elks tag elasticsearch log stash and or

00:47:29,670 --> 00:47:34,980
fluent E or fluently and Cabana as the

00:47:33,120 --> 00:47:39,770
front end where you can actually query

00:47:34,980 --> 00:47:42,260
logs across different containers now I

00:47:39,770 --> 00:47:44,400
was lying a bit

00:47:42,260 --> 00:47:47,900
there's one last section before we get

00:47:44,400 --> 00:47:47,900
to a demo I'm doing time voice

00:47:51,350 --> 00:48:00,920
okay did I believe what most people do

00:47:59,120 --> 00:48:02,830
currently is looks pretty much like that

00:48:00,920 --> 00:48:07,100
you take your code configuration

00:48:02,830 --> 00:48:09,050
credentials you run that put that into

00:48:07,100 --> 00:48:10,970
code repo and have probably hopefully a

00:48:09,050 --> 00:48:13,280
CCD pipeline and at the end of the day

00:48:10,970 --> 00:48:15,380
create a binary or scripts or whatever

00:48:13,280 --> 00:48:17,930
that they deploy on either a bare metal

00:48:15,380 --> 00:48:22,850
or VM that's kind of like who is doing

00:48:17,930 --> 00:48:25,760
something like that some and the other

00:48:22,850 --> 00:48:29,840
is you you ship it by a floppy disks or

00:48:25,760 --> 00:48:31,610
how do you get your stuff on okay cool

00:48:29,840 --> 00:48:33,470
so that's what I would then call the

00:48:31,610 --> 00:48:35,270
cloud native way you still have code

00:48:33,470 --> 00:48:36,980
configuration and Crenshaw's that's the

00:48:35,270 --> 00:48:40,130
same but then you also have this

00:48:36,980 --> 00:48:41,780
container image manifest your docker

00:48:40,130 --> 00:48:45,080
file you have to contain a runtime

00:48:41,780 --> 00:48:47,390
manifest for example in Qin it is a yama

00:48:45,080 --> 00:48:49,610
manifest we say there's a deployment it

00:48:47,390 --> 00:48:52,100
has three replicas use this container

00:48:49,610 --> 00:48:53,570
image expose that port and so on or

00:48:52,100 --> 00:48:56,330
docker compose or whatever you have

00:48:53,570 --> 00:48:59,600
there a service mesh manifest that

00:48:56,330 --> 00:49:03,170
defines policies and and so on and then

00:48:59,600 --> 00:49:04,970
you take that and put that again in the

00:49:03,170 --> 00:49:08,780
repository you run it through a CD

00:49:04,970 --> 00:49:11,510
pipeline and then now you have this new

00:49:08,780 --> 00:49:13,730
blue bluish being more on the left side

00:49:11,510 --> 00:49:15,380
greenish more on the top side you have

00:49:13,730 --> 00:49:17,960
this container registry where at least

00:49:15,380 --> 00:49:20,060
these artifacts the container images the

00:49:17,960 --> 00:49:22,280
application container images are stored

00:49:20,060 --> 00:49:24,530
and which then get pulled by the

00:49:22,280 --> 00:49:26,330
container Orchestrator and or service

00:49:24,530 --> 00:49:29,930
mesh to actually deploy container and

00:49:26,330 --> 00:49:31,280
run it so this is this handoff now you

00:49:29,930 --> 00:49:32,870
know it might have been something you

00:49:31,280 --> 00:49:34,730
used before like artifact Ori or

00:49:32,870 --> 00:49:36,500
whatever but now without a container

00:49:34,730 --> 00:49:38,290
registry you cannot use the container

00:49:36,500 --> 00:49:40,340
that needs some container registry

00:49:38,290 --> 00:49:42,500
people typically start with docker hub

00:49:40,340 --> 00:49:44,090
and if you're more to its production you

00:49:42,500 --> 00:49:47,840
have your own container registry there

00:49:44,090 --> 00:49:49,790
and if you look at the artifacts that we

00:49:47,840 --> 00:49:51,560
are dealing with and or producing and

00:49:49,790 --> 00:49:54,620
the respective tooling it looks a bit

00:49:51,560 --> 00:49:56,630
like that core again we always start

00:49:54,620 --> 00:49:59,360
with the code the configuration which

00:49:56,630 --> 00:50:02,060
again already due to the 12 factors best

00:49:59,360 --> 00:50:04,280
practices is separate from the code it's

00:50:02,060 --> 00:50:05,280
not you know hard-coded in there and the

00:50:04,280 --> 00:50:07,050
credentials upon

00:50:05,280 --> 00:50:09,270
potentially have so things like this is

00:50:07,050 --> 00:50:13,590
the database password this is an API key

00:50:09,270 --> 00:50:16,260
for some AWS API or whatever the

00:50:13,590 --> 00:50:19,230
corresponding thing here is the the code

00:50:16,260 --> 00:50:21,330
repository and the csv pipeline same for

00:50:19,230 --> 00:50:23,460
container image manifest would be the

00:50:21,330 --> 00:50:25,050
container registry the runtime manifest

00:50:23,460 --> 00:50:27,030
would be the container Orchestrator and

00:50:25,050 --> 00:50:29,550
the service if if you are there the

00:50:27,030 --> 00:50:32,970
service mesh manifest would be consumed

00:50:29,550 --> 00:50:35,150
and worked on by the service mesh and as

00:50:32,970 --> 00:50:39,720
you can see it grows from inside out so

00:50:35,150 --> 00:50:42,540
tip here is if you are here right that

00:50:39,720 --> 00:50:45,330
means you have a docker file and have

00:50:42,540 --> 00:50:47,250
done docker run on your machine right go

00:50:45,330 --> 00:50:50,340
from inside out don't start with the

00:50:47,250 --> 00:50:51,900
service mesh and many well you might be

00:50:50,340 --> 00:50:53,400
laughing but many people come like Oh

00:50:51,900 --> 00:50:55,770
Mike I want to benefit from containers

00:50:53,400 --> 00:50:59,700
and I think I should also do some

00:50:55,770 --> 00:51:03,540
service management no the thing is if

00:50:59,700 --> 00:51:05,460
you don't have your act together and

00:51:03,540 --> 00:51:06,510
have sorted out the CS CD pipeline there

00:51:05,460 --> 00:51:08,220
is no point in hell that you're

00:51:06,510 --> 00:51:11,220
benefiting from service measure you need

00:51:08,220 --> 00:51:13,470
to do your homework have your source

00:51:11,220 --> 00:51:16,230
code in you know get whatever you have

00:51:13,470 --> 00:51:18,870
it I have a CCD pipeline that works and

00:51:16,230 --> 00:51:21,090
then you can move on to something like

00:51:18,870 --> 00:51:22,290
worrying about ok this this should be in

00:51:21,090 --> 00:51:23,880
a container register that should be

00:51:22,290 --> 00:51:26,190
secure should be scanned yeah they are

00:51:23,880 --> 00:51:27,510
the other and then you worry about well

00:51:26,190 --> 00:51:29,280
actually I might need a container

00:51:27,510 --> 00:51:30,870
Orchestrator and rather than you know

00:51:29,280 --> 00:51:32,760
having a bunch of shell scripts you

00:51:30,870 --> 00:51:34,160
probably want to use communities or any

00:51:32,760 --> 00:51:37,350
other container Orchestrator i

00:51:34,160 --> 00:51:40,560
communities and again if you're hitting

00:51:37,350 --> 00:51:41,610
if you have more than five or 10 micro

00:51:40,560 --> 00:51:43,680
service and you find yourself

00:51:41,610 --> 00:51:46,320
implementing these policies and all

00:51:43,680 --> 00:51:48,450
these things by hand you probably you're

00:51:46,320 --> 00:51:50,490
ripe for for a service match to go like

00:51:48,450 --> 00:51:52,710
actually I'm not gonna reinvent it we

00:51:50,490 --> 00:51:54,150
let the service mesh handle that but

00:51:52,710 --> 00:51:56,700
it's really this maturity model from

00:51:54,150 --> 00:51:58,350
inside out not the other way don't start

00:51:56,700 --> 00:52:02,040
with service measures or container

00:51:58,350 --> 00:52:07,470
orchestrators and one last thing before

00:52:02,040 --> 00:52:09,440
we finally get the demo promised so if

00:52:07,470 --> 00:52:11,640
you have a cluster then you have

00:52:09,440 --> 00:52:13,260
something that is local so that might be

00:52:11,640 --> 00:52:15,090
your machine and something that is for

00:52:13,260 --> 00:52:18,180
example in the cloud or somewhere else

00:52:15,090 --> 00:52:18,990
so you have local and remote one way

00:52:18,180 --> 00:52:21,660
would be pure

00:52:18,990 --> 00:52:23,220
which means that both the development

00:52:21,660 --> 00:52:27,270
development environment your IDE

00:52:23,220 --> 00:52:30,090
whatever and the cluster is on your

00:52:27,270 --> 00:52:31,770
local machine another way would be

00:52:30,090 --> 00:52:33,960
proxied which means that the cluster you

00:52:31,770 --> 00:52:36,150
somehow get the traffic network traffic

00:52:33,960 --> 00:52:38,760
off the cluster onto your local machine

00:52:36,150 --> 00:52:40,200
and that means that you know if you're

00:52:38,760 --> 00:52:42,150
calling out to another micro-services

00:52:40,200 --> 00:52:43,650
from your machine it looks like it's

00:52:42,150 --> 00:52:45,060
it's you know running on your machine

00:52:43,650 --> 00:52:48,270
it's actually running a cluster but it's

00:52:45,060 --> 00:52:50,460
proxy then the life thing you actually

00:52:48,270 --> 00:52:52,140
have this this separation of those and

00:52:50,460 --> 00:52:53,460
then the only way to get stuff in there

00:52:52,140 --> 00:52:55,050
is putting you know going through the

00:52:53,460 --> 00:52:57,869
CCD pipeline and putting something in

00:52:55,050 --> 00:52:59,970
the registry or pure online environments

00:52:57,869 --> 00:53:01,290
there are a couple of them where you

00:52:59,970 --> 00:53:02,610
were everything even the development

00:53:01,290 --> 00:53:03,710
environment essentially lives in your

00:53:02,610 --> 00:53:06,750
browser everything is in the cloud

00:53:03,710 --> 00:53:09,000
that's great if you're always online and

00:53:06,750 --> 00:53:12,240
just to give you an idea there are you

00:53:09,000 --> 00:53:14,580
know plenty of tools that you can use

00:53:12,240 --> 00:53:17,130
from you know you might have installed

00:53:14,580 --> 00:53:18,900
the create addition of tarkir for Mac or

00:53:17,130 --> 00:53:20,790
Windows but there are many many others

00:53:18,900 --> 00:53:23,310
that you can use all have you know

00:53:20,790 --> 00:53:25,800
limitations or pros and cons some of

00:53:23,310 --> 00:53:27,690
them are more for proxied some of them

00:53:25,800 --> 00:53:30,420
are more for local development but there

00:53:27,690 --> 00:53:33,300
are many many tools that help you to

00:53:30,420 --> 00:53:38,970
develop in and with containers in the

00:53:33,300 --> 00:53:40,710
micro service distributed set up there

00:53:38,970 --> 00:53:42,690
is still something there function so

00:53:40,710 --> 00:53:44,910
service we already talked about it the

00:53:42,690 --> 00:53:47,310
new name of function of service is fast

00:53:44,910 --> 00:53:49,650
so you have some triggers that could be

00:53:47,310 --> 00:53:52,980
you know upload something as a pin

00:53:49,650 --> 00:53:55,290
uploaded to s3 or time or whatever the

00:53:52,980 --> 00:53:57,960
trigger is and there's a developer you

00:53:55,290 --> 00:53:59,850
just provide that function and that does

00:53:57,960 --> 00:54:02,609
something it's stateless its short-lived

00:53:59,850 --> 00:54:03,840
and the main point being that you can

00:54:02,609 --> 00:54:05,910
integrate because it's stateless you

00:54:03,840 --> 00:54:08,580
need to manage the state outside so you

00:54:05,910 --> 00:54:11,609
know integration in a database message

00:54:08,580 --> 00:54:13,680
queue or whatever and again the CNC F

00:54:11,609 --> 00:54:15,119
provides some some guidance there where

00:54:13,680 --> 00:54:17,010
we currently are this is really new I

00:54:15,119 --> 00:54:21,780
think it has been released yesterday or

00:54:17,010 --> 00:54:25,020
so demo so how much more time do I have

00:54:21,780 --> 00:54:27,510
five minutes oh we've been talking too

00:54:25,020 --> 00:54:32,180
long oh sorry all right very quick demo

00:54:27,510 --> 00:54:32,180
I'm gonna deploy a production already

00:54:32,230 --> 00:54:39,640
containerized micro-services did i miss

00:54:35,380 --> 00:54:41,320
any password here in less than five

00:54:39,640 --> 00:54:42,760
minutes that should that should we do

00:54:41,320 --> 00:54:50,410
who thinks that's doable

00:54:42,760 --> 00:54:54,820
yes okay let's see um leave everything

00:54:50,410 --> 00:54:55,780
here actually like it is I'm not gonna

00:54:54,820 --> 00:54:58,270
change anything

00:54:55,780 --> 00:55:00,310
let's see what else I need to provide a

00:54:58,270 --> 00:55:03,190
name there right blah blah what's

00:55:00,310 --> 00:55:04,839
missing here that uh anything missing no

00:55:03,190 --> 00:55:08,589
fine fine fine

00:55:04,839 --> 00:55:12,130
oh I need to see it it's a new project

00:55:08,589 --> 00:55:16,300
so we create a new project whatever I

00:55:12,130 --> 00:55:18,960
don't care just using the defaults

00:55:16,300 --> 00:55:21,700
everywhere oh really

00:55:18,960 --> 00:55:22,990
it's a global like I'm using object

00:55:21,700 --> 00:55:24,220
online which is a global system it's

00:55:22,990 --> 00:55:26,260
like you know Google and many others

00:55:24,220 --> 00:55:30,040
with the bucket so as three buckets they

00:55:26,260 --> 00:55:32,140
need to be unique and test is probably

00:55:30,040 --> 00:55:34,390
someone else have that idea ready so

00:55:32,140 --> 00:55:37,119
what it does now is we can have a look

00:55:34,390 --> 00:55:40,599
at that test PHP cons the first thing

00:55:37,119 --> 00:55:42,220
remember these these steps it creates a

00:55:40,599 --> 00:55:43,690
build pipeline that could be Jenkins

00:55:42,220 --> 00:55:46,780
somewhere else but we're just using here

00:55:43,690 --> 00:55:51,550
the build and stuff so we say here is

00:55:46,780 --> 00:55:53,020
our source code please you know pull it

00:55:51,550 --> 00:55:55,089
from this github repo here I don't know

00:55:53,020 --> 00:55:58,630
if you can see that right that's where

00:55:55,089 --> 00:56:00,220
the source code lives it will then build

00:55:58,630 --> 00:56:02,740
it and everything here is done in that

00:56:00,220 --> 00:56:04,990
that pot it will then build it you know

00:56:02,740 --> 00:56:08,650
with all the dependencies here whatever

00:56:04,990 --> 00:56:10,300
it has cake testing bla bla bla bla at

00:56:08,650 --> 00:56:12,339
some point in time it will be done and

00:56:10,300 --> 00:56:14,319
then it will create a container image

00:56:12,339 --> 00:56:17,109
based on this base image that I used

00:56:14,319 --> 00:56:21,790
here PHP seven you should see these

00:56:17,109 --> 00:56:23,440
layers very soon being built one two

00:56:21,790 --> 00:56:25,359
that's the same thing if you do docker

00:56:23,440 --> 00:56:28,290
built on your local machine so you

00:56:25,359 --> 00:56:30,970
layers are built it will push it to the

00:56:28,290 --> 00:56:32,740
built-in container registry so you can

00:56:30,970 --> 00:56:34,270
use an external one if you want but in

00:56:32,740 --> 00:56:36,359
our case the default it just pushes it

00:56:34,270 --> 00:56:39,579
to the opposite internal registry and

00:56:36,359 --> 00:56:43,540
then it will say well I'm done building

00:56:39,579 --> 00:56:45,970
that how about we deploy that almost

00:56:43,540 --> 00:56:47,980
there and then it will kick off

00:56:45,970 --> 00:56:50,320
deployment and at the end of the day you

00:56:47,980 --> 00:56:52,480
will have a deployment which is by

00:56:50,320 --> 00:56:55,690
default one replica of that stateless

00:56:52,480 --> 00:56:57,250
stuff running and an end point that I

00:56:55,690 --> 00:56:58,780
can direct to you so you can once you

00:56:57,250 --> 00:57:00,730
see that you can directly go there and

00:56:58,780 --> 00:57:02,980
and try it out so first successful means

00:57:00,730 --> 00:57:07,599
I've done the container this this build

00:57:02,980 --> 00:57:10,750
is done just checking here complete cool

00:57:07,599 --> 00:57:13,930
so I expect to see a deployment here yes

00:57:10,750 --> 00:57:17,109
in this case it's post a stateless and

00:57:13,930 --> 00:57:19,840
the stateful from I sequel running great

00:57:17,109 --> 00:57:25,570
so I should now see that and that's the

00:57:19,840 --> 00:57:32,320
URL not ready yet okay okay okay still

00:57:25,570 --> 00:57:35,410
says recreate deployment okay what's

00:57:32,320 --> 00:57:48,369
going on mounted everything okay almost

00:57:35,410 --> 00:57:50,800
there started so currently let's okay

00:57:48,369 --> 00:57:53,170
takes a little bit until everything is

00:57:50,800 --> 00:57:59,680
there health checks kicking in very nice

00:57:53,170 --> 00:58:03,460
okay and it's running boom so that was

00:57:59,680 --> 00:58:05,500
how hard it was to build from scratch

00:58:03,460 --> 00:58:07,930
and application deployed and that is

00:58:05,500 --> 00:58:10,000
production ready this is something and I

00:58:07,930 --> 00:58:14,250
mean it this is really it has everything

00:58:10,000 --> 00:58:17,349
built in it has you know I can look here

00:58:14,250 --> 00:58:22,089
metrics I can look at the logs if I want

00:58:17,349 --> 00:58:23,859
to of a single one or here boom you have

00:58:22,089 --> 00:58:25,690
Cubana there if you want you can have

00:58:23,859 --> 00:58:29,070
log aggregation about all your parts if

00:58:25,690 --> 00:58:31,839
you want to so this is really end-to-end

00:58:29,070 --> 00:58:34,750
production ready container orchestration

00:58:31,839 --> 00:58:36,940
based on the things that we discussed

00:58:34,750 --> 00:58:38,920
earlier on build tools and so on

00:58:36,940 --> 00:58:41,910
at your fingertips social source you can

00:58:38,920 --> 00:58:45,400
just download it and install it and

00:58:41,910 --> 00:58:47,380
enjoy it so it looks like that the

00:58:45,400 --> 00:58:50,950
question section will be very very short

00:58:47,380 --> 00:58:52,780
but I'm almost done here challenges it's

00:58:50,950 --> 00:58:54,550
very fast moving so you want to ask

00:58:52,780 --> 00:58:56,200
people like myself or my colleagues or

00:58:54,550 --> 00:58:59,140
from other companies for a bit of

00:58:56,200 --> 00:58:59,940
guidance absolutely it's pretty key we

00:58:59,140 --> 00:59:01,830
haven't talked about

00:58:59,940 --> 00:59:03,750
purity in our case its built-in

00:59:01,830 --> 00:59:05,940
sometimes you need to take care of that

00:59:03,750 --> 00:59:07,470
yourself but most importantly and that's

00:59:05,940 --> 00:59:08,880
something where I can't directly help

00:59:07,470 --> 00:59:11,040
not psychologist

00:59:08,880 --> 00:59:11,970
it's about organizations so tooling is

00:59:11,040 --> 00:59:14,190
the easy part

00:59:11,970 --> 00:59:16,740
right you can do it you can grab it but

00:59:14,190 --> 00:59:18,930
it's really about the organization's few

00:59:16,740 --> 00:59:21,570
resources you can study in your own time

00:59:18,930 --> 00:59:23,070
if you want to and if you want to try

00:59:21,570 --> 00:59:24,810
out OpenShift go to learn don't open

00:59:23,070 --> 00:59:27,470
drift or come free environment and you

00:59:24,810 --> 00:59:27,470

YouTube URL: https://www.youtube.com/watch?v=417JirTmp2g


