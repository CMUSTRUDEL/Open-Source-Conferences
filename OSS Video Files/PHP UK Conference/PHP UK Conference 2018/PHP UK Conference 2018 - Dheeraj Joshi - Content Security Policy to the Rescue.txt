Title: PHP UK Conference 2018 - Dheeraj Joshi - Content Security Policy to the Rescue
Publication date: 2018-03-27
Playlist: PHP UK Conference 2018
Description: 
	Developing web applications with security in mind is very much important in today's world with the increase in online attacks and fraud. Content Security Policy is a defense-in-depth mechanism which can help in mitigating Cross-Site Scripting vulnerabilities. In this talk, we'll see a live demo of an intentionally vulnerable web application and how Content Security Policy can prevent attacks. I’ll also talk about some success stories where companies successfully deployed CSP. We’ll discuss some common bypasses available for CSP and how CSP can be used to prevent other sets of issues like clickjacking, HTTPS migration, secure form submissions.
Captions: 
	00:00:02,540 --> 00:00:06,859
thank you guys for having me here I'm

00:00:04,400 --> 00:00:10,040
really excited there's my second time to

00:00:06,859 --> 00:00:13,429
London and so always get excited when

00:00:10,040 --> 00:00:15,559
you been to London so hello everyone my

00:00:13,429 --> 00:00:18,770
name is tiara and today I'm going to

00:00:15,559 --> 00:00:20,690
talk about content security policy so we

00:00:18,770 --> 00:00:23,440
will be discussing about a lot many

00:00:20,690 --> 00:00:26,390
offensive and defensive strategies to

00:00:23,440 --> 00:00:29,540
secure web application and we'll also be

00:00:26,390 --> 00:00:31,940
talking about security best practices

00:00:29,540 --> 00:00:33,950
which you can apply to secure or web

00:00:31,940 --> 00:00:36,560
applications and with the help of

00:00:33,950 --> 00:00:39,590
convinced security policies by adding an

00:00:36,560 --> 00:00:41,630
additional layer of defense before we

00:00:39,590 --> 00:00:43,730
get started I just a quick raise of

00:00:41,630 --> 00:00:47,510
hands how many of heard about content

00:00:43,730 --> 00:00:50,450
security policy before all right almost

00:00:47,510 --> 00:00:55,160
everyone and how many of you have

00:00:50,450 --> 00:00:58,940
actually deployed CSP to production and

00:00:55,160 --> 00:01:01,190
without breaking the production know

00:00:58,940 --> 00:01:03,950
what all right great

00:01:01,190 --> 00:01:05,750
a little introduction about me like

00:01:03,950 --> 00:01:08,929
who's this random guy on stage talking

00:01:05,750 --> 00:01:11,359
about security I work for a company

00:01:08,929 --> 00:01:14,509
called vinify that's in India it's very

00:01:11,359 --> 00:01:16,749
well known for its AP testing product

00:01:14,509 --> 00:01:19,969
that is Vida Blue I take care of

00:01:16,749 --> 00:01:22,039
application security there and before

00:01:19,969 --> 00:01:25,700
moving completely into security I was a

00:01:22,039 --> 00:01:29,149
front-end artisan working with angularjs

00:01:25,700 --> 00:01:31,909
and one in large JavaScript and I also

00:01:29,149 --> 00:01:35,779
do open source stuffs like recently I

00:01:31,909 --> 00:01:37,999
published a CLI to read awesome medium

00:01:35,779 --> 00:01:42,709
stories Without Really letting your boss

00:01:37,999 --> 00:01:45,799
know about it and also I maintain a list

00:01:42,709 --> 00:01:49,579
of comprehensive bug bounty programs on

00:01:45,799 --> 00:01:52,130
get up and I can also play table tennis

00:01:49,579 --> 00:01:57,609
with both of my hands switching in

00:01:52,130 --> 00:02:01,789
between it's kind of fun a little more

00:01:57,609 --> 00:02:05,149
when I'm not writing code I try to find

00:02:01,789 --> 00:02:07,849
wannabes in web applications and these

00:02:05,149 --> 00:02:09,310
are the applications where some of the

00:02:07,849 --> 00:02:13,459
applications where I've reported

00:02:09,310 --> 00:02:15,670
security issues and most of my attacks

00:02:13,459 --> 00:02:18,000
have been on the client side

00:02:15,670 --> 00:02:24,340
you must have seen this little pop-up

00:02:18,000 --> 00:02:26,920
from the browser window and so today

00:02:24,340 --> 00:02:29,380
stuff for the talk is to understand what

00:02:26,920 --> 00:02:31,420
basically security is and why is it

00:02:29,380 --> 00:02:35,050
necessary and before getting into

00:02:31,420 --> 00:02:37,000
content security policy we really need

00:02:35,050 --> 00:02:39,069
to understand what type of attacks it

00:02:37,000 --> 00:02:41,830
Saul's and moreover it is like

00:02:39,069 --> 00:02:44,410
cross-site scripting and other injection

00:02:41,830 --> 00:02:48,190
attacks and how to mitigate those

00:02:44,410 --> 00:02:50,440
attacks using CSP and how do you how do

00:02:48,190 --> 00:02:53,680
you deploy CSP without breaking

00:02:50,440 --> 00:02:56,830
production and also we'll be talking

00:02:53,680 --> 00:03:00,610
about crypto jackin how many of you not

00:02:56,830 --> 00:03:03,640
heard about triple checking for all

00:03:00,610 --> 00:03:07,060
right so in the recent powers actually

00:03:03,640 --> 00:03:10,090
the last week more than 4,000 websites

00:03:07,060 --> 00:03:12,549
got hit by a crypto jacking where you

00:03:10,090 --> 00:03:14,680
know if you visit a website that's

00:03:12,549 --> 00:03:17,799
infected website the malicious

00:03:14,680 --> 00:03:19,690
JavaScript could actually run and mine

00:03:17,799 --> 00:03:23,230
our cryptocurrencies and your browser

00:03:19,690 --> 00:03:25,260
and and this practice of secretly

00:03:23,230 --> 00:03:28,900
loading javascript in your browser is

00:03:25,260 --> 00:03:34,060
known as crypto jacking or in drive in

00:03:28,900 --> 00:03:36,910
mining similarly and good some couple of

00:03:34,060 --> 00:03:40,090
months back word page WordPress blogs

00:03:36,910 --> 00:03:43,329
were known to have recording user

00:03:40,090 --> 00:03:47,049
credentials and which is very dangerous

00:03:43,329 --> 00:03:50,019
because it acts like a key loggers and

00:03:47,049 --> 00:03:53,890
we were sending the credentials to some

00:03:50,019 --> 00:03:55,600
other attackers endpoints and security

00:03:53,890 --> 00:03:57,820
is important now in most of the times

00:03:55,600 --> 00:03:59,319
which I have seen that security is like

00:03:57,820 --> 00:04:01,840
an elephant in the room where everyone

00:03:59,319 --> 00:04:04,450
agrees to it but only a few wait takes

00:04:01,840 --> 00:04:07,660
it very seriously and since the first

00:04:04,450 --> 00:04:10,180
time your app is compromised you lose

00:04:07,660 --> 00:04:15,660
most of your users they no longer trust

00:04:10,180 --> 00:04:20,669
your app or you and Security's always

00:04:15,660 --> 00:04:23,350
takes priety when some bad happens and

00:04:20,669 --> 00:04:25,510
before that it's always takes a backseat

00:04:23,350 --> 00:04:27,830
and most of the cases and especially

00:04:25,510 --> 00:04:32,810
when you talk about startups or who

00:04:27,830 --> 00:04:35,750
want to you know create some basics

00:04:32,810 --> 00:04:39,289
products so and interestingly one of the

00:04:35,750 --> 00:04:41,889
things where most of us developers think

00:04:39,289 --> 00:04:44,210
that security is all about back-end but

00:04:41,889 --> 00:04:47,689
actually with lots of frameworks coming

00:04:44,210 --> 00:04:49,099
out in JavaScript and attacks happening

00:04:47,689 --> 00:04:51,740
on the browser level like crypto

00:04:49,099 --> 00:04:55,759
checking which I mentioned you cannot

00:04:51,740 --> 00:04:58,969
neglect front-end security and and you

00:04:55,759 --> 00:05:01,789
can see that javascript frameworks like

00:04:58,969 --> 00:05:06,069
every new word every day we have seen

00:05:01,789 --> 00:05:09,770
new JavaScript frameworks coming out and

00:05:06,069 --> 00:05:12,469
so let's talk about cross-site scripting

00:05:09,770 --> 00:05:14,870
so when we when we talk about any

00:05:12,469 --> 00:05:16,969
client-side or browser level attack the

00:05:14,870 --> 00:05:21,889
XS X is the first one ability that comes

00:05:16,969 --> 00:05:24,229
to everyone Minds and this is a this so

00:05:21,889 --> 00:05:28,460
popular that I have known some person

00:05:24,229 --> 00:05:33,500
who have been doing PhD and XS X so it's

00:05:28,460 --> 00:05:35,900
so so so complex and it's and so some

00:05:33,500 --> 00:05:38,330
years ago where people used to disable

00:05:35,900 --> 00:05:43,389
JavaScript to mitigate all this browser

00:05:38,330 --> 00:05:47,659
level risk but nowadays with with such

00:05:43,389 --> 00:05:50,270
new browsers we cannot remove JavaScript

00:05:47,659 --> 00:05:53,690
to compromise with the user experience

00:05:50,270 --> 00:05:56,870
and that's the we have to enable all

00:05:53,690 --> 00:05:59,389
this JavaScript to on a browser and

00:05:56,870 --> 00:06:02,839
that's that's that's the one where

00:05:59,389 --> 00:06:06,139
occurs when basically your data become

00:06:02,839 --> 00:06:08,180
code or your code becomes data and when

00:06:06,139 --> 00:06:11,210
I talk about data it's mostly the data

00:06:08,180 --> 00:06:16,879
coming from and attacker who has bad

00:06:11,210 --> 00:06:20,029
intentions and so for example where you

00:06:16,879 --> 00:06:21,800
can see this little script of code which

00:06:20,029 --> 00:06:24,110
is loading and trying to load an image

00:06:21,800 --> 00:06:25,940
which doesn't exist and and using an

00:06:24,110 --> 00:06:29,509
ordinary attribute who's being able to

00:06:25,940 --> 00:06:32,389
show a little pop-up and this little

00:06:29,509 --> 00:06:35,089
pop-up was shown on our website

00:06:32,389 --> 00:06:37,310
Ubud calm and I'm sure everyone heard

00:06:35,089 --> 00:06:39,020
about that and this dashboard where I

00:06:37,310 --> 00:06:40,430
had reported this one ability couple of

00:06:39,020 --> 00:06:44,630
years back where

00:06:40,430 --> 00:06:47,450
where I just try to set my name was this

00:06:44,630 --> 00:06:51,200
little piece of code and and when I try

00:06:47,450 --> 00:06:54,050
to when any other user try to remove my

00:06:51,200 --> 00:06:56,890
project or my name or my cringe my user

00:06:54,050 --> 00:07:00,950
this this little pop-up would occur and

00:06:56,890 --> 00:07:03,080
similarly I have reported the one

00:07:00,950 --> 00:07:06,080
abilities to some other websites like

00:07:03,080 --> 00:07:08,720
one of the interesting one I remember is

00:07:06,080 --> 00:07:12,290
recruiterbox which an Indian platform

00:07:08,720 --> 00:07:14,780
for hiding hiding platform where I was

00:07:12,290 --> 00:07:17,150
able to inject and one every malicious

00:07:14,780 --> 00:07:19,460
code using which I was able to take a

00:07:17,150 --> 00:07:22,280
job at any any any of the openings on

00:07:19,460 --> 00:07:24,590
their website and that's how cool and I

00:07:22,280 --> 00:07:29,930
would be able to place at some good

00:07:24,590 --> 00:07:31,490
company and it's not about the just a

00:07:29,930 --> 00:07:34,070
pop-up it's more than that it's

00:07:31,490 --> 00:07:37,640
basically a tack user it has access to

00:07:34,070 --> 00:07:40,520
your Dom it can hijack the sessions it

00:07:37,640 --> 00:07:43,550
can steal the cookies or steal the

00:07:40,520 --> 00:07:49,220
informations and it can even recall your

00:07:43,550 --> 00:07:55,790
sessions and moreover it can even lead

00:07:49,220 --> 00:07:58,760
to crypto jacking and so a typical

00:07:55,790 --> 00:08:01,480
reflected access X looks like this where

00:07:58,760 --> 00:08:04,610
someone sends you a malicious code and

00:08:01,480 --> 00:08:07,640
you click on that and it would try to

00:08:04,610 --> 00:08:09,800
get all your cookies which might also

00:08:07,640 --> 00:08:12,340
have your session cookies and send it

00:08:09,800 --> 00:08:15,680
over to attacker and this basically

00:08:12,340 --> 00:08:18,170
cookie would let anyone if the cookie is

00:08:15,680 --> 00:08:20,330
having the session cookie and then it

00:08:18,170 --> 00:08:26,270
would let attackers to have control over

00:08:20,330 --> 00:08:27,740
your session so we'll be seeing a live

00:08:26,270 --> 00:08:30,380
demonstration how this one ability

00:08:27,740 --> 00:08:38,170
occurs so to have complete understanding

00:08:30,380 --> 00:08:41,300
about it so I'm running a very basic

00:08:38,170 --> 00:08:46,220
wonderful applications where you have

00:08:41,300 --> 00:08:47,960
search features to that's basically very

00:08:46,220 --> 00:08:50,540
common so its feature we can have find

00:08:47,960 --> 00:08:53,000
it on any website or any blog showing on

00:08:50,540 --> 00:08:54,220
WordPress or any other things and if you

00:08:53,000 --> 00:08:57,160
just try to say

00:08:54,220 --> 00:08:59,319
hey hello and it will just show you the

00:08:57,160 --> 00:09:10,300
output so why don't we try something

00:08:59,319 --> 00:09:11,800
else where I've already VOCs and if you

00:09:10,300 --> 00:09:14,649
try to something else it sure little

00:09:11,800 --> 00:09:17,430
pop-up and this is basically due to

00:09:14,649 --> 00:09:21,160
cross-site scripting and developers

00:09:17,430 --> 00:09:24,399
forget to escape the user input and like

00:09:21,160 --> 00:09:26,769
I was mentioning when your data becomes

00:09:24,399 --> 00:09:30,579
code it can lead to cross-site scripting

00:09:26,769 --> 00:09:33,730
and this little piece of code becomes

00:09:30,579 --> 00:09:38,319
dangerous because when you share this

00:09:33,730 --> 00:09:42,399
particular URL to someone and they open

00:09:38,319 --> 00:09:45,370
this URL and this could put it could

00:09:42,399 --> 00:09:48,819
exhibit and this is a typical reflected

00:09:45,370 --> 00:09:52,689
access X where a user input is being

00:09:48,819 --> 00:09:57,699
rendered by the application and this is

00:09:52,689 --> 00:10:00,750
how excess X attack occurs getting back

00:09:57,699 --> 00:10:04,000
to the slides

00:10:00,750 --> 00:10:07,980
so how do we mitigate such type of tags

00:10:04,000 --> 00:10:14,230
so where we can have HTTP only cookies

00:10:07,980 --> 00:10:16,870
which get which can lead to we can make

00:10:14,230 --> 00:10:18,779
sure that your browser doesn't get

00:10:16,870 --> 00:10:22,300
access to those cookies so it's very

00:10:18,779 --> 00:10:24,699
useful to put HTTP only cookies of for

00:10:22,300 --> 00:10:27,370
your session cookies HTTP only flag for

00:10:24,699 --> 00:10:31,269
your session cookies and then one can do

00:10:27,370 --> 00:10:34,059
input sanitization at the backend so

00:10:31,269 --> 00:10:37,449
that any malicious input doesn't occur

00:10:34,059 --> 00:10:41,769
but in the demo which we have seen the

00:10:37,449 --> 00:10:45,370
input was never going to the back end

00:10:41,769 --> 00:10:49,029
and it is basically a type of XS X that

00:10:45,370 --> 00:10:52,209
is domme Dom access X and it means that

00:10:49,029 --> 00:10:54,339
doesn't necessarily - it doesn't help to

00:10:52,209 --> 00:10:56,410
sanitize and put on the back end because

00:10:54,339 --> 00:11:00,970
the input will never reach to that and

00:10:56,410 --> 00:11:02,829
it occurs when the Y nobody exists

00:11:00,970 --> 00:11:07,059
because of on-the-fly creating Dom

00:11:02,829 --> 00:11:08,050
elements and so that's the reason you

00:11:07,059 --> 00:11:10,149
have to analyze

00:11:08,050 --> 00:11:13,509
places where doorman events are created

00:11:10,149 --> 00:11:16,360
on the fly and the correct defense for

00:11:13,509 --> 00:11:18,429
excess X is to construct HTML securely

00:11:16,360 --> 00:11:22,360
in a framework that automatically

00:11:18,429 --> 00:11:24,999
escapes untrusted user data and which

00:11:22,360 --> 00:11:27,549
should be followed by a good dorm

00:11:24,999 --> 00:11:33,100
sanitizer as a second layer of defense

00:11:27,549 --> 00:11:36,759
and but that's really a problem because

00:11:33,100 --> 00:11:39,519
of escaping cultures and different

00:11:36,759 --> 00:11:43,720
browser quirks it's very difficult to

00:11:39,519 --> 00:11:45,819
get it right and XS X is made much salt

00:11:43,720 --> 00:11:49,209
problem if we do all these three things

00:11:45,819 --> 00:11:52,449
but then people think that they

00:11:49,209 --> 00:11:57,069
understand JavaScript and it's kind of

00:11:52,449 --> 00:11:59,110
funny because it's true right I'm sure

00:11:57,069 --> 00:12:00,699
some of you must be wondering about this

00:11:59,110 --> 00:12:03,399
particular little piece of code and

00:12:00,699 --> 00:12:11,199
trying in your developer tools but I

00:12:03,399 --> 00:12:14,949
would say it works and now when we say

00:12:11,199 --> 00:12:19,509
that this is a problem we have content

00:12:14,949 --> 00:12:23,769
security policy and so let's get started

00:12:19,509 --> 00:12:25,480
with CSP it's so basically a standard

00:12:23,769 --> 00:12:29,139
which allows you to define resources

00:12:25,480 --> 00:12:32,379
loaded in your website it can be set by

00:12:29,139 --> 00:12:37,209
our HTTP response header is something's

00:12:32,379 --> 00:12:40,179
very similar to HSTs and it can also be

00:12:37,209 --> 00:12:42,429
set by our meta tags which is very

00:12:40,179 --> 00:12:44,939
useful in the cases where you do not

00:12:42,429 --> 00:12:50,040
have access to the servers for example

00:12:44,939 --> 00:12:52,959
get up pages and you would be able to

00:12:50,040 --> 00:12:55,509
specify content security policy is just

00:12:52,959 --> 00:12:57,480
using the meta tags and it should never

00:12:55,509 --> 00:13:03,040
be your first line of defense and

00:12:57,480 --> 00:13:06,009
because XS x can actually occur if you

00:13:03,040 --> 00:13:08,350
do not imp deploy CSP very correctly so

00:13:06,009 --> 00:13:12,369
it should always be a defense in depth

00:13:08,350 --> 00:13:15,429
strategy and CSP also has to be issued

00:13:12,369 --> 00:13:18,100
on every page because browser doesn't

00:13:15,429 --> 00:13:21,880
cache it's like for example in case of

00:13:18,100 --> 00:13:26,170
SSDs or which is used for deploy come

00:13:21,880 --> 00:13:26,770
GTP's application and in CSP like in

00:13:26,170 --> 00:13:28,450
HSTs

00:13:26,770 --> 00:13:31,870
a browser would just do those

00:13:28,450 --> 00:13:34,030
information and the the website will

00:13:31,870 --> 00:13:37,270
always be loaded on HTTP no matter what

00:13:34,030 --> 00:13:40,000
user tries to load but in case of CSP it

00:13:37,270 --> 00:13:44,350
has to be applied every time on every

00:13:40,000 --> 00:13:48,760
page request and so because browser

00:13:44,350 --> 00:13:51,940
doesn't catch the policy and so CSP

00:13:48,760 --> 00:13:55,210
basically helps in mitigating cross-site

00:13:51,940 --> 00:13:57,600
scripting attacks and securing form

00:13:55,210 --> 00:13:59,650
submissions where you know it allow

00:13:57,600 --> 00:14:04,120
restricting browser to send information

00:13:59,650 --> 00:14:05,890
to any of the locations like like in

00:14:04,120 --> 00:14:07,840
case of password managers let's say if

00:14:05,890 --> 00:14:10,060
they are stealing your credentials and

00:14:07,840 --> 00:14:12,550
actually see skin see if we can help in

00:14:10,060 --> 00:14:18,750
those scenarios where you know data

00:14:12,550 --> 00:14:22,410
exfiltration x' can be really solved and

00:14:18,750 --> 00:14:27,040
and you can also mitigate clickjacking

00:14:22,410 --> 00:14:31,300
using CSP and the most interesting part

00:14:27,040 --> 00:14:34,810
is doing HTTP migration and which is

00:14:31,300 --> 00:14:39,430
kind of very easy for the application

00:14:34,810 --> 00:14:43,210
which are very old and you do not need

00:14:39,430 --> 00:14:45,850
to write some code to migrate and it can

00:14:43,210 --> 00:14:47,950
be really helpful in that so let's get

00:14:45,850 --> 00:14:50,200
started how do you how do we add this

00:14:47,950 --> 00:14:52,600
security header it's basically it's a

00:14:50,200 --> 00:14:54,850
response here where you can see the

00:14:52,600 --> 00:14:57,220
policy goes here and you can define

00:14:54,850 --> 00:15:00,400
consent security policies with this

00:14:57,220 --> 00:15:04,780
particular header and it looks like this

00:15:00,400 --> 00:15:07,630
where you have set up particular default

00:15:04,780 --> 00:15:10,330
source itself it means that it allows

00:15:07,630 --> 00:15:11,080
loading it for resources from the same

00:15:10,330 --> 00:15:15,160
region

00:15:11,080 --> 00:15:17,380
so what same origin is really really

00:15:15,160 --> 00:15:19,870
need to understand here self is here

00:15:17,380 --> 00:15:23,110
same origin and the origin comprises of

00:15:19,870 --> 00:15:25,390
three components one is the schema the

00:15:23,110 --> 00:15:28,330
second is the host name and third is a

00:15:25,390 --> 00:15:31,589
port and and if when we talk about same

00:15:28,330 --> 00:15:35,110
origin if any of these components is

00:15:31,589 --> 00:15:35,779
different then it would not be on the

00:15:35,110 --> 00:15:39,949
same origin

00:15:35,779 --> 00:15:42,199
for example if there's a site called CSP

00:15:39,949 --> 00:15:45,170
awesome and if we try to compare with

00:15:42,199 --> 00:15:47,569
another site HTTP is your origin it will

00:15:45,170 --> 00:15:49,220
not be on the same origin and when we

00:15:47,569 --> 00:15:51,860
say it's not on the same origin browser

00:15:49,220 --> 00:15:54,889
would not be sharing this resources like

00:15:51,860 --> 00:16:01,870
cookies or local storage and other

00:15:54,889 --> 00:16:04,720
information provided by the browser so

00:16:01,870 --> 00:16:06,709
so there are certain type of CSP

00:16:04,720 --> 00:16:10,129
directives which could help you to

00:16:06,709 --> 00:16:12,579
define CSP policy and the first one is a

00:16:10,129 --> 00:16:15,259
script source where you can define what

00:16:12,579 --> 00:16:17,899
JavaScript elements you need to put

00:16:15,259 --> 00:16:20,420
inside your application the major risk

00:16:17,899 --> 00:16:24,680
involved in putting in this directive

00:16:20,420 --> 00:16:28,009
was to solve X X and the size source

00:16:24,680 --> 00:16:32,420
could be helpful in loading resources

00:16:28,009 --> 00:16:37,610
like CSS stylesheets and the major risk

00:16:32,420 --> 00:16:41,779
is website defacement or stealing of

00:16:37,610 --> 00:16:44,720
information like CSF tokens and image

00:16:41,779 --> 00:16:47,209
source can actually be very risky where

00:16:44,720 --> 00:16:49,610
you know someone can send information to

00:16:47,209 --> 00:16:51,910
their own domain by appending the

00:16:49,610 --> 00:16:54,259
information that query pair arms and

00:16:51,910 --> 00:16:57,949
similarly we have other source directive

00:16:54,259 --> 00:17:00,589
like connect source which is for XML

00:16:57,949 --> 00:17:02,240
HTTP requests that is Ajax and other web

00:17:00,589 --> 00:17:05,179
socket requests to be defined by this

00:17:02,240 --> 00:17:07,069
and we have some other source directive

00:17:05,179 --> 00:17:10,610
like frame source which could be used

00:17:07,069 --> 00:17:12,740
for loading the iframes inside your

00:17:10,610 --> 00:17:15,799
applications and then we have found

00:17:12,740 --> 00:17:17,689
source to define your fonts load on your

00:17:15,799 --> 00:17:19,159
website and then there was an

00:17:17,689 --> 00:17:21,530
interesting thing called the phone

00:17:19,159 --> 00:17:23,240
source which act as a fallback when you

00:17:21,530 --> 00:17:24,169
do not specify any of the fetch

00:17:23,240 --> 00:17:26,299
directive

00:17:24,169 --> 00:17:33,710
when I say fetch directive which is

00:17:26,299 --> 00:17:37,460
always appended by hyphens SRC so in its

00:17:33,710 --> 00:17:39,799
exact in an example if I fail to write

00:17:37,460 --> 00:17:41,390
scripts or it would write with the

00:17:39,799 --> 00:17:47,210
browser would look for default source

00:17:41,390 --> 00:17:49,460
and that's how it becomes a fallback so

00:17:47,210 --> 00:17:51,890
in this particular example where we

00:17:49,460 --> 00:17:55,820
define image so the star and this is act

00:17:51,890 --> 00:17:57,050
as a white card which allow so and so in

00:17:55,820 --> 00:18:00,260
this particular case it allows any

00:17:57,050 --> 00:18:04,850
images except the blob data or

00:18:00,260 --> 00:18:07,700
filesystem schemas and so it's not

00:18:04,850 --> 00:18:10,240
advisable to wild card to use wild card

00:18:07,700 --> 00:18:13,430
unless you are very sure about it and

00:18:10,240 --> 00:18:15,770
then we have other shows expression like

00:18:13,430 --> 00:18:18,680
none so in this example we have said

00:18:15,770 --> 00:18:21,500
object sources none its prevents loading

00:18:18,680 --> 00:18:24,040
plugins from any source and when we say

00:18:21,500 --> 00:18:25,970
about plugins like flash or any other

00:18:24,040 --> 00:18:31,550
plugins which could lead to one

00:18:25,970 --> 00:18:33,920
abilities for example you have tile

00:18:31,550 --> 00:18:37,240
source at example.com in this way you

00:18:33,920 --> 00:18:40,400
can specify certain domains where you

00:18:37,240 --> 00:18:43,760
brush those domains and you can easily

00:18:40,400 --> 00:18:46,480
allow them to load the resources on your

00:18:43,760 --> 00:18:48,980
website so in this case we have allowed

00:18:46,480 --> 00:18:51,530
the stylesheet to be loaded from this

00:18:48,980 --> 00:18:55,900
specific example comm and if you want to

00:18:51,530 --> 00:19:01,640
specify more and you can keep them

00:18:55,900 --> 00:19:04,040
separated with a space and simple policy

00:19:01,640 --> 00:19:06,440
looks like this where we have defined

00:19:04,040 --> 00:19:10,820
scripts over self object sources

00:19:06,440 --> 00:19:14,090
non-base urs nun and so this policy

00:19:10,820 --> 00:19:17,210
actually disallow external scripts which

00:19:14,090 --> 00:19:19,190
are not hosted on your domain and also

00:19:17,210 --> 00:19:22,910
it doesn't allow inline script elements

00:19:19,190 --> 00:19:27,650
where or like even handlers like in this

00:19:22,910 --> 00:19:30,830
case image on error and also the object

00:19:27,650 --> 00:19:34,490
source says that it should not be able

00:19:30,830 --> 00:19:37,100
to host any any interactive content like

00:19:34,490 --> 00:19:40,310
I said before it's like flash or and

00:19:37,100 --> 00:19:42,350
then base URI makes sure that it should

00:19:40,310 --> 00:19:46,540
not break any script which are using the

00:19:42,350 --> 00:19:49,700
relative parts and this kind of a very

00:19:46,540 --> 00:19:53,360
same secure policy which you can start

00:19:49,700 --> 00:19:57,530
with but there are some bad ideas where

00:19:53,360 --> 00:20:00,500
people try to put unsafe inline or

00:19:57,530 --> 00:20:03,080
unsafe evil and CSP by default doesn't

00:20:00,500 --> 00:20:05,330
allow any inline JavaScript and

00:20:03,080 --> 00:20:09,230
that's the basic idea behind preventing

00:20:05,330 --> 00:20:13,100
cross-site scripting attacks but so in

00:20:09,230 --> 00:20:15,440
this case where someone tries to define

00:20:13,100 --> 00:20:17,990
unsafe inline or eval they're actually

00:20:15,440 --> 00:20:21,110
allowing inline source of elements such

00:20:17,990 --> 00:20:24,470
as style attributes on click script tag

00:20:21,110 --> 00:20:28,250
bodies or any well functions which is

00:20:24,470 --> 00:20:31,010
kind of dangerous and but there are some

00:20:28,250 --> 00:20:35,270
cases where you really need to have some

00:20:31,010 --> 00:20:38,750
kind of inline script for example you

00:20:35,270 --> 00:20:40,970
have some code like Google Analytics

00:20:38,750 --> 00:20:44,270
code which can have some performant

00:20:40,970 --> 00:20:46,400
impact and you do not want to move that

00:20:44,270 --> 00:20:48,680
file somewhere or do you not want to do

00:20:46,400 --> 00:20:50,450
it loaded there and it has to be inline

00:20:48,680 --> 00:20:53,780
there are certain ways you can put those

00:20:50,450 --> 00:20:57,380
scripts and also the lag is some legacy

00:20:53,780 --> 00:20:59,720
applications where you want to allow

00:20:57,380 --> 00:21:02,660
inline scripting then you can basically

00:20:59,720 --> 00:21:04,970
do things like putting them in the

00:21:02,660 --> 00:21:07,370
external files so that you can put as a

00:21:04,970 --> 00:21:10,280
source expression itself so it will be

00:21:07,370 --> 00:21:13,040
loaded on your own domain and also you

00:21:10,280 --> 00:21:16,250
can use other strategies like hash nonce

00:21:13,040 --> 00:21:19,160
or script dynamic and we'll be

00:21:16,250 --> 00:21:21,980
discussing that as well so when I talk

00:21:19,160 --> 00:21:24,350
about hash you have a script called

00:21:21,980 --> 00:21:26,900
alert and you want to convert it into a

00:21:24,350 --> 00:21:28,910
hash you basically do a basic step or

00:21:26,900 --> 00:21:33,080
encoding of this particular hash and

00:21:28,910 --> 00:21:37,130
using a sha algorithm which could be 256

00:21:33,080 --> 00:21:40,090
or 384 or 512 and if you give that

00:21:37,130 --> 00:21:42,830
expression it could give you an X and

00:21:40,090 --> 00:21:45,200
base64 encoded value which you can put

00:21:42,830 --> 00:21:46,880
it in the setter in the header and it

00:21:45,200 --> 00:21:49,340
looks like this and which would allow

00:21:46,880 --> 00:21:52,910
only this exact script that can be run

00:21:49,340 --> 00:21:55,160
in your browser and if you allow this

00:21:52,910 --> 00:22:00,680
and no other scripts would be allowed to

00:21:55,160 --> 00:22:03,200
execute so these approaches are some

00:22:00,680 --> 00:22:05,780
sometimes very hard to maintain when

00:22:03,200 --> 00:22:10,100
let's say when you have more than 10

00:22:05,780 --> 00:22:12,020
inline scripts and and you frequently

00:22:10,100 --> 00:22:14,300
change those scripts it's very hard to

00:22:12,020 --> 00:22:16,700
have back and for changing the

00:22:14,300 --> 00:22:21,230
application and talking to your death

00:22:16,700 --> 00:22:23,629
and DevOps Kai to update those headers

00:22:21,230 --> 00:22:26,210
in the server so we have another

00:22:23,629 --> 00:22:28,730
approach called Nance where you can

00:22:26,210 --> 00:22:32,230
define our nuns in your content security

00:22:28,730 --> 00:22:34,999
policy header and this nuns had to be

00:22:32,230 --> 00:22:39,320
cryptographically securely random

00:22:34,999 --> 00:22:43,009
generator and it would allow any script

00:22:39,320 --> 00:22:44,509
with the nuns attribute given as the

00:22:43,009 --> 00:22:46,549
same as the header the browser would be

00:22:44,509 --> 00:22:52,100
checking and allowing only those scripts

00:22:46,549 --> 00:22:54,529
which matches the nuns so this is how

00:22:52,100 --> 00:22:58,759
total CSP looks like and even it could

00:22:54,529 --> 00:23:01,879
not fit my browser screen I mean the

00:22:58,759 --> 00:23:03,799
presentation screen and this is where

00:23:01,879 --> 00:23:06,950
they're using the nuns approach and

00:23:03,799 --> 00:23:09,499
their white listing all the domains it's

00:23:06,950 --> 00:23:12,440
kind of you know you have it's very hard

00:23:09,499 --> 00:23:14,899
to make sure that these domains are very

00:23:12,440 --> 00:23:17,299
secure and no one ability occurs on

00:23:14,899 --> 00:23:19,669
those who means so and it's very hard to

00:23:17,299 --> 00:23:23,059
do it right and so that we have

00:23:19,669 --> 00:23:25,940
something called dynamic and this source

00:23:23,059 --> 00:23:29,749
expressions have provided in the script

00:23:25,940 --> 00:23:32,690
source it basically gives a complete

00:23:29,749 --> 00:23:36,190
trust to any applications where in this

00:23:32,690 --> 00:23:39,169
particular example where Twitter was i

00:23:36,190 --> 00:23:41,779
lying different source foreign fonts or

00:23:39,169 --> 00:23:43,940
media source which were actually

00:23:41,779 --> 00:23:45,889
required by certain script elements and

00:23:43,940 --> 00:23:48,499
it could have been easily prevented with

00:23:45,889 --> 00:23:51,109
a strict dynamic and where you basically

00:23:48,499 --> 00:23:52,580
trust a given piece of code and you

00:23:51,109 --> 00:23:54,769
allow them to do each and everything

00:23:52,580 --> 00:24:00,019
what they are doing and so that it

00:23:54,769 --> 00:24:03,049
basically allows you to not have a bunch

00:24:00,019 --> 00:24:04,730
of domains which could get compromised

00:24:03,049 --> 00:24:05,450
and if you do not take care of them in

00:24:04,730 --> 00:24:07,999
the right way

00:24:05,450 --> 00:24:10,879
and so basically when you have a strict

00:24:07,999 --> 00:24:12,619
dynamic source expression present it the

00:24:10,879 --> 00:24:15,139
browser would ignore the whitelist ik

00:24:12,619 --> 00:24:17,899
domains and and it will only allow the

00:24:15,139 --> 00:24:22,399
domain which are having hash and nuns

00:24:17,899 --> 00:24:24,529
representation so we have talked about

00:24:22,399 --> 00:24:26,840
these approaches how how these

00:24:24,529 --> 00:24:30,440
approaches are actually helping X s X

00:24:26,840 --> 00:24:33,740
let's let's see that so in this

00:24:30,440 --> 00:24:35,840
example where we have scripts or cell

00:24:33,740 --> 00:24:39,019
and we are allowing a domain called API

00:24:35,840 --> 00:24:41,179
to google.com and when someone tried to

00:24:39,019 --> 00:24:42,889
inject a script which is coming from an

00:24:41,179 --> 00:24:45,980
evil com

00:24:42,889 --> 00:24:48,440
it says refused to load the script and

00:24:45,980 --> 00:24:53,120
this how you avoided the content

00:24:48,440 --> 00:24:57,080
security policy so I can give you a

00:24:53,120 --> 00:25:06,399
quick demo or where we have given this

00:24:57,080 --> 00:25:06,399
one ability and it could be I would just

00:25:25,780 --> 00:25:33,610
so I would just quickly set the header

00:25:29,020 --> 00:25:41,220
at CSP I'm sorry but I'm not able to put

00:25:33,610 --> 00:25:41,220
that in the screen demos are hard

00:26:10,680 --> 00:26:25,560
so the screen is flickering I would

00:26:22,500 --> 00:26:32,210
actually have the hair set by myself

00:26:25,560 --> 00:26:32,210
and if we try to load these expressions

00:27:06,309 --> 00:27:15,140
it was working five minutes ago but

00:27:08,990 --> 00:27:25,100
anyways so going forward we can talk

00:27:15,140 --> 00:27:26,809
about mitigating access ex and let's

00:27:25,100 --> 00:27:29,059
talk about some common mistakes where

00:27:26,809 --> 00:27:33,110
default source will be used as a

00:27:29,059 --> 00:27:35,960
fallback and you can actually have to

00:27:33,110 --> 00:27:39,200
you know avoid using wildcard domains

00:27:35,960 --> 00:27:42,650
and default source would be omitted if

00:27:39,200 --> 00:27:45,559
you do not specify it and it's it's not

00:27:42,650 --> 00:27:48,049
really advisable to do that and use of

00:27:45,559 --> 00:27:51,890
dangerous elements like unsafe inline

00:27:48,049 --> 00:27:54,820
unsafe eval and also whitelisting domain

00:27:51,890 --> 00:27:59,510
with JSONP endpoints user uploads or

00:27:54,820 --> 00:28:01,549
open redirect or dangerous and if you

00:27:59,510 --> 00:28:03,260
want to break some stuff good of

00:28:01,549 --> 00:28:06,620
explicitly in wise researcher to break

00:28:03,260 --> 00:28:09,890
their CSP policy and hacker one has also

00:28:06,620 --> 00:28:15,559
paid have some paid bounty CSP pipe

00:28:09,890 --> 00:28:17,780
hours and Dropbox is also having a CSP

00:28:15,559 --> 00:28:19,460
journey blog where you where they have

00:28:17,780 --> 00:28:22,700
published some interesting articles

00:28:19,460 --> 00:28:26,960
about how they have migrated their

00:28:22,700 --> 00:28:31,280
journey from having a CSP not having CSP

00:28:26,960 --> 00:28:34,910
to having CSP now that we have

00:28:31,280 --> 00:28:38,929
understood how CSP works and now how

00:28:34,910 --> 00:28:41,350
should we deploy CSP to our production

00:28:38,929 --> 00:28:45,049
and there are two ways where you can

00:28:41,350 --> 00:28:47,030
actually the first one can be used to

00:28:45,049 --> 00:28:49,250
block and report a tags

00:28:47,030 --> 00:28:52,240
that's enforcing it and the second one

00:28:49,250 --> 00:28:54,860
is report only where you can allow the

00:28:52,240 --> 00:28:57,830
report abuses to a specific reporting

00:28:54,860 --> 00:29:00,260
server and when we when I say about the

00:28:57,830 --> 00:29:02,179
reporting you can actually have the

00:29:00,260 --> 00:29:06,080
policy with the headers and content

00:29:02,179 --> 00:29:08,570
security policy report only and you have

00:29:06,080 --> 00:29:13,160
to specify a reporting URL where the

00:29:08,570 --> 00:29:15,620
logs would be sent to and for this you

00:29:13,160 --> 00:29:19,220
can use report URI calm which could be

00:29:15,620 --> 00:29:19,980
very easy to maintain and get a get

00:29:19,220 --> 00:29:23,790
incomplete I

00:29:19,980 --> 00:29:26,490
about these logs and now let's move on

00:29:23,790 --> 00:29:32,280
to interesting approach where you can

00:29:26,490 --> 00:29:34,740
use CSV to migrate to HTTPS and life is

00:29:32,280 --> 00:29:37,530
about grew harder for the website having

00:29:34,740 --> 00:29:40,590
known as GDPs and chrome is actually

00:29:37,530 --> 00:29:47,929
going to mark all the non-https website

00:29:40,590 --> 00:29:47,929
as non non secure starting July 2018 and

00:29:48,230 --> 00:29:53,790
mushy B migration is very hard for

00:29:51,179 --> 00:29:57,500
legacy applications where you know you

00:29:53,790 --> 00:30:01,410
have to do a lot lot of code based

00:29:57,500 --> 00:30:05,400
refactoring and and thus yours you can

00:30:01,410 --> 00:30:08,429
specify a directive called default

00:30:05,400 --> 00:30:10,830
source which is set to HTTPS and a form

00:30:08,429 --> 00:30:12,900
action which says to HTTPS which you

00:30:10,830 --> 00:30:18,780
using which you can identify what all as

00:30:12,900 --> 00:30:19,799
it's all loading using HTTP and also it

00:30:18,780 --> 00:30:22,140
helps you to unsecure

00:30:19,799 --> 00:30:25,530
any fiying where the secure form

00:30:22,140 --> 00:30:28,140
submission is not happening so when

00:30:25,530 --> 00:30:32,090
someone try to load an image using HTTP

00:30:28,140 --> 00:30:34,710
it would also violate the policy and

00:30:32,090 --> 00:30:36,840
there is something there's a source

00:30:34,710 --> 00:30:38,790
there's a directive called upgrading to

00:30:36,840 --> 00:30:44,040
your secure request which would

00:30:38,790 --> 00:30:47,280
basically upgrade all your HTTP requests

00:30:44,040 --> 00:30:50,429
to HTTPS and for example you have an

00:30:47,280 --> 00:30:53,040
image which is loaded on a CDP before

00:30:50,429 --> 00:30:55,230
sending the request to the server the

00:30:53,040 --> 00:30:58,400
browser would convert that the question

00:30:55,230 --> 00:31:02,730
to HTTPS and thus doing all of your work

00:30:58,400 --> 00:31:04,620
without specifying these specifics

00:31:02,730 --> 00:31:06,540
changing the schemas in your code base

00:31:04,620 --> 00:31:08,100
and you just need to apply this

00:31:06,540 --> 00:31:10,740
particular directive in your content

00:31:08,100 --> 00:31:16,820
security policy and this can be combined

00:31:10,740 --> 00:31:19,500
with our other speech directives and so

00:31:16,820 --> 00:31:22,710
next one every I would want to talk

00:31:19,500 --> 00:31:25,799
about clickjacking everyone thinks that

00:31:22,710 --> 00:31:28,140
is a salt problem where you know it's

00:31:25,799 --> 00:31:30,630
this one I believe is basically is a

00:31:28,140 --> 00:31:33,120
malicious technique where you can trick

00:31:30,630 --> 00:31:35,190
a user into clicking into a

00:31:33,120 --> 00:31:38,610
something different what user sees that

00:31:35,190 --> 00:31:41,100
and if user is able to click on that he

00:31:38,610 --> 00:31:44,640
would be actually compromising some

00:31:41,100 --> 00:31:47,040
confidential information or even it

00:31:44,640 --> 00:31:49,680
could lead to account takeover basically

00:31:47,040 --> 00:31:54,390
it looks like this where you be you

00:31:49,680 --> 00:32:02,430
trying to click on a button and it gives

00:31:54,390 --> 00:32:12,660
you something different I have a demo

00:32:02,430 --> 00:32:14,940
for this but see how it works so I have

00:32:12,660 --> 00:32:17,850
an application which has a feature

00:32:14,940 --> 00:32:21,480
called delete sensitive information and

00:32:17,850 --> 00:32:23,460
with GDP are coming alone along you must

00:32:21,480 --> 00:32:27,330
be developing this particular feature

00:32:23,460 --> 00:32:31,830
for each and every applications and when

00:32:27,330 --> 00:32:34,530
you have such critical user actions and

00:32:31,830 --> 00:32:37,020
I try to so we have an application

00:32:34,530 --> 00:32:40,170
running on host 3000 and I have another

00:32:37,020 --> 00:32:42,690
application running on 3000 to so the

00:32:40,170 --> 00:32:45,150
this these two application do not rely

00:32:42,690 --> 00:32:48,179
on the same origin and user would not be

00:32:45,150 --> 00:32:50,670
able to share any of the resources now

00:32:48,179 --> 00:32:55,290
if you see this particular website where

00:32:50,670 --> 00:33:02,510
I have said their opacity as very very

00:32:55,290 --> 00:33:10,770
low and you can basically see the iframe

00:33:02,510 --> 00:33:15,210
like this and when you try to click on

00:33:10,770 --> 00:33:17,520
this button to see you awesome dog flips

00:33:15,210 --> 00:33:26,820
and you are actually clicking on

00:33:17,520 --> 00:33:28,620
something different and and here if you

00:33:26,820 --> 00:33:30,450
are able to see that there's a pop up

00:33:28,620 --> 00:33:33,540
coming on that the data has been deleted

00:33:30,450 --> 00:33:35,820
and so using this particular approach

00:33:33,540 --> 00:33:39,480
where people are hiding some

00:33:35,820 --> 00:33:41,970
informations on their browsers behind an

00:33:39,480 --> 00:33:44,010
iframe the user are actually making

00:33:41,970 --> 00:33:46,560
people think that clicking on something

00:33:44,010 --> 00:33:46,899
else and but we have seen that these

00:33:46,560 --> 00:33:50,289
were

00:33:46,899 --> 00:33:53,229
these can be easily solved using header

00:33:50,289 --> 00:33:56,109
called extreme options but with the

00:33:53,229 --> 00:33:59,049
serious with the support like deny which

00:33:56,109 --> 00:34:01,570
will not there's a parameter where you

00:33:59,049 --> 00:34:05,049
can define deny which will not allow the

00:34:01,570 --> 00:34:07,779
website to be iframe and then you have

00:34:05,049 --> 00:34:11,710
same origin which could allow only this

00:34:07,779 --> 00:34:13,510
the same origin website to iframe the

00:34:11,710 --> 00:34:15,730
website and then you have something

00:34:13,510 --> 00:34:17,919
called allow firm which is not supported

00:34:15,730 --> 00:34:21,250
by the IE and chrome and which allows

00:34:17,919 --> 00:34:25,419
you to define a URI which where you want

00:34:21,250 --> 00:34:27,760
to allow the iframe to be loaded and but

00:34:25,419 --> 00:34:29,679
interestingly we have these two

00:34:27,760 --> 00:34:35,020
approaches where same origin and the law

00:34:29,679 --> 00:34:37,569
of Rome works very differently where the

00:34:35,020 --> 00:34:43,389
expected behavior would be to check the

00:34:37,569 --> 00:34:44,980
domains the insisted domain and actually

00:34:43,389 --> 00:34:47,770
they are checking the top-level domain

00:34:44,980 --> 00:34:52,029
to the current domain so to have it

00:34:47,770 --> 00:34:55,029
understand in a better way where someone

00:34:52,029 --> 00:34:56,919
is able to inject the iframe inside a

00:34:55,029 --> 00:34:59,829
page which is LaRonde victim.com

00:34:56,919 --> 00:35:02,559
and they have inserted and another frame

00:34:59,829 --> 00:35:04,359
is like an inception where you are

00:35:02,559 --> 00:35:07,150
loading in tacit comment inside you are

00:35:04,359 --> 00:35:09,309
loading in victim.com now the browser

00:35:07,150 --> 00:35:11,049
would check the top domain and the

00:35:09,309 --> 00:35:13,690
current domain and instead they should

00:35:11,049 --> 00:35:16,599
have checked you know very in sister

00:35:13,690 --> 00:35:19,539
path and which is not being supported by

00:35:16,599 --> 00:35:23,109
x-frame option which is kind of wrong so

00:35:19,539 --> 00:35:27,010
how is it problem where you have the

00:35:23,109 --> 00:35:29,740
site that frame untrusted pages that

00:35:27,010 --> 00:35:32,170
would be wonderful and while I was

00:35:29,740 --> 00:35:36,549
creating slides for content security

00:35:32,170 --> 00:35:40,059
policy I was using site calm and when I

00:35:36,549 --> 00:35:43,059
try to load the response header and I

00:35:40,059 --> 00:35:48,010
can see X frame option the same origin

00:35:43,059 --> 00:35:53,170
policy same origin attribute and if it's

00:35:48,010 --> 00:35:57,670
there I am able to add HTML where I was

00:35:53,170 --> 00:36:00,100
able to add the iframe and and it was

00:35:57,670 --> 00:36:06,910
wonderful I reported the one ability

00:36:00,100 --> 00:36:09,580
and I got a free upgrade yeah so how do

00:36:06,910 --> 00:36:12,160
we protect prevent a clickjacking using

00:36:09,580 --> 00:36:15,550
CSP there is a directive called frame

00:36:12,160 --> 00:36:19,180
and sisters where you can define as nun

00:36:15,550 --> 00:36:21,910
that it would not allow any website to Y

00:36:19,180 --> 00:36:24,610
frame it and similarly we can specify

00:36:21,910 --> 00:36:31,290
multiple domains along with cell that

00:36:24,610 --> 00:36:34,420
means same origin and similarly we have

00:36:31,290 --> 00:36:36,970
other approaches using which you can

00:36:34,420 --> 00:36:39,970
prevent such type of attack where you

00:36:36,970 --> 00:36:43,300
can combine both X frame options and CSP

00:36:39,970 --> 00:36:46,420
where you know the CSP is supported by a

00:36:43,300 --> 00:36:50,410
maturity of new browsers and old

00:36:46,420 --> 00:36:52,150
browsers like below Chrome 30 you would

00:36:50,410 --> 00:36:54,370
not basically support some of the

00:36:52,150 --> 00:36:56,260
directives so you can apply both

00:36:54,370 --> 00:36:57,390
approaches and browser will take care of

00:36:56,260 --> 00:37:02,140
it

00:36:57,390 --> 00:37:03,010
so CSP is kind of cool you can do a lot

00:37:02,140 --> 00:37:07,000
of stuff

00:37:03,010 --> 00:37:09,990
do not break stuff I have another demo

00:37:07,000 --> 00:37:09,990
in place where

00:37:18,430 --> 00:37:28,990
I would not open my editor again could

00:37:21,040 --> 00:37:37,059
not break I have an exploit which I can

00:37:28,990 --> 00:37:38,710
copy and put that inside so there was

00:37:37,059 --> 00:37:41,400
the XS X which we have seen on this

00:37:38,710 --> 00:37:44,470
particular page now you can see that

00:37:41,400 --> 00:37:46,869
there was an exploit which I've copied

00:37:44,470 --> 00:37:50,970
and I have shared the URL with them but

00:37:46,869 --> 00:37:50,970
what actually happening at the back I

00:37:52,650 --> 00:38:13,510
opened my developer console I was

00:38:09,670 --> 00:38:15,369
actually running a crypto mining that is

00:38:13,510 --> 00:38:18,010
crypto checking which I have been

00:38:15,369 --> 00:38:21,700
talking about it since beginning and I

00:38:18,010 --> 00:38:25,119
have been running and generating some

00:38:21,700 --> 00:38:27,790
good gold crypto mining and the

00:38:25,119 --> 00:38:29,589
basically where I was able to collect

00:38:27,790 --> 00:38:31,390
all these hashes and if you visit this

00:38:29,589 --> 00:38:33,270
particular and if you try to run this

00:38:31,390 --> 00:38:36,190
particular applications on your browser

00:38:33,270 --> 00:38:40,690
you would actually be helping me giving

00:38:36,190 --> 00:38:49,420
some money that's how you can respond to

00:38:40,690 --> 00:38:51,280
my talk or you so yeah CSP was cool

00:38:49,420 --> 00:38:52,930
if you want to deploy it do not break

00:38:51,280 --> 00:38:58,720
the production you can use condensed

00:38:52,930 --> 00:39:00,730
security report only header and you care

00:38:58,720 --> 00:39:03,400
if you want to learn more you can have a

00:39:00,730 --> 00:39:05,799
reference guide which is on content

00:39:03,400 --> 00:39:08,049
security policy comm follow this guy's

00:39:05,799 --> 00:39:10,930
caught and actually he was the one who

00:39:08,049 --> 00:39:12,790
was able to identify all this website

00:39:10,930 --> 00:39:15,160
could have infected with jackin last

00:39:12,790 --> 00:39:18,420
week and helping with the website

00:39:15,160 --> 00:39:22,450
government website as well and he knows

00:39:18,420 --> 00:39:24,910
his stuff he knows about CSP and also

00:39:22,450 --> 00:39:28,839
you have a useful scripts on this

00:39:24,910 --> 00:39:31,540
particular URL and I'm also going to

00:39:28,839 --> 00:39:32,110
publish some handbook which I was

00:39:31,540 --> 00:39:34,570
actually

00:39:32,110 --> 00:39:37,150
working on so that's all I got for the

00:39:34,570 --> 00:39:39,160
today's talk thank you very much and you

00:39:37,150 --> 00:39:42,670
can fall if you have any questions I'll

00:39:39,160 --> 00:39:44,800
be right right here and if you can

00:39:42,670 --> 00:39:47,950
follow me on github or Twitter if you

00:39:44,800 --> 00:39:50,920
have any questions oh it's just yeah

00:39:47,950 --> 00:39:54,940
questions my I start one with a question

00:39:50,920 --> 00:39:58,480
yeah um TWA is progressive web apps they

00:39:54,940 --> 00:40:00,760
require they're based on HTTP how far do

00:39:58,480 --> 00:40:04,060
I really need ten content security

00:40:00,760 --> 00:40:06,910
policy so all these applications where

00:40:04,060 --> 00:40:08,740
you have to define actually condense

00:40:06,910 --> 00:40:10,750
security policy and going forward these

00:40:08,740 --> 00:40:13,840
will be mandatory by the browsers and

00:40:10,750 --> 00:40:16,090
it's and basically even if you I have

00:40:13,840 --> 00:40:18,970
honestly I have never worked with PWA

00:40:16,090 --> 00:40:20,920
but I would actually say that if PW are

00:40:18,970 --> 00:40:23,080
going moving towards secure context

00:40:20,920 --> 00:40:27,450
there is HTTPS and they would make sure

00:40:23,080 --> 00:40:27,450

YouTube URL: https://www.youtube.com/watch?v=GZS5uS_4PMs


