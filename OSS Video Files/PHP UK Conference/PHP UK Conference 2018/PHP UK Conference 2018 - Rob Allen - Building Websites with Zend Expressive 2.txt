Title: PHP UK Conference 2018 - Rob Allen - Building Websites with Zend Expressive 2
Publication date: 2018-03-27
Playlist: PHP UK Conference 2018
Description: 
	Zend Expressive 2 is the ideal framework for building PHP applications of all types. Its easy-to-understand architecture makes it ideal for projects of all shapes and sizes. In this talk, I'll show you how to build an Expressive application than can scale with your needs. We will look at how Expressive's middleware system leverages the upcoming PSR-15 specification to create easily understandable and flexible applications. We will cover application setup, routing and error handling before diving into some thoughts on how architect an Expressive application. By the end of the session, you will be equipped to create Expressive applications yourself.
Captions: 
	00:00:02,860 --> 00:00:09,969
hello the observant amongst you might

00:00:07,720 --> 00:00:13,540
have noticed that there's a possible

00:00:09,969 --> 00:00:15,160
type of my slights in that your schedule

00:00:13,540 --> 00:00:17,439
says that this is building websites

00:00:15,160 --> 00:00:19,439
we've send expressive to and I seem to

00:00:17,439 --> 00:00:21,340
have put three on the slide

00:00:19,439 --> 00:00:22,600
who was talk about yesterday's

00:00:21,340 --> 00:00:25,660
technology when we can talk about

00:00:22,600 --> 00:00:28,810
tomorrow's sent expressive three is now

00:00:25,660 --> 00:00:32,050
in alpha so it is not yet stable but it

00:00:28,810 --> 00:00:34,330
is coming it will be stable before March

00:00:32,050 --> 00:00:35,739
the 15th which i think is really

00:00:34,330 --> 00:00:37,900
specific for the project lead to have

00:00:35,739 --> 00:00:40,750
said as I've said it will go live on

00:00:37,900 --> 00:00:44,140
this date or in about sometime it will

00:00:40,750 --> 00:00:46,180
definitely be before March the 15th I

00:00:44,140 --> 00:00:47,619
assume Matthew was going on vacation on

00:00:46,180 --> 00:00:49,360
that day and that's why he wants it done

00:00:47,619 --> 00:00:52,600
before then so we're gonna be talking

00:00:49,360 --> 00:00:54,549
about Zend expressive 3 which is roughly

00:00:52,600 --> 00:00:57,150
similar to expressive 2 but there are

00:00:54,549 --> 00:00:59,769
some changes so we'll cover what is

00:00:57,150 --> 00:01:03,460
going to be relevant in about a month

00:00:59,769 --> 00:01:04,839
and half time something like that my

00:01:03,460 --> 00:01:07,480
name is Rob Allen I've been doing

00:01:04,839 --> 00:01:11,290
framework stuff since the very first

00:01:07,480 --> 00:01:15,520
version same framework 0.1 was released

00:01:11,290 --> 00:01:18,040
in 2006 and my first commit to sin

00:01:15,520 --> 00:01:21,580
framework 0.1 happened the day later I

00:01:18,040 --> 00:01:23,410
got commit access about a month after

00:01:21,580 --> 00:01:26,410
that and I've been a contributor ever

00:01:23,410 --> 00:01:27,100
since I'm fairly polyglot I'm

00:01:26,410 --> 00:01:30,370
self-employed

00:01:27,100 --> 00:01:34,480
I freelance so I work with whichever

00:01:30,370 --> 00:01:35,890
framework my clients use so I've got

00:01:34,480 --> 00:01:37,540
quite a lot of experience in frameworks

00:01:35,890 --> 00:01:40,020
nice feel quite like this one so that's

00:01:37,540 --> 00:01:42,490
one we're gonna be talking about today

00:01:40,020 --> 00:01:44,560
so if we already heard of same framework

00:01:42,490 --> 00:01:46,060
sanfran what one's if I were to if I

00:01:44,560 --> 00:01:48,250
were three they're all monolithic

00:01:46,060 --> 00:01:50,860
frameworks and then we've got send

00:01:48,250 --> 00:01:53,590
expressive and the best description I've

00:01:50,860 --> 00:01:56,710
got for sent expressive is a micro

00:01:53,590 --> 00:01:59,229
framework with full stack components so

00:01:56,710 --> 00:02:01,690
what we have here is a very small

00:01:59,229 --> 00:02:05,979
framework but we have a wider ecosystem

00:02:01,690 --> 00:02:11,140
around it to support it and provide more

00:02:05,979 --> 00:02:13,630
functionality so in terms of the macro

00:02:11,140 --> 00:02:15,520
framework core we've got we'd expected a

00:02:13,630 --> 00:02:15,860
micro framework so if you've used celexa

00:02:15,520 --> 00:02:18,050
views

00:02:15,860 --> 00:02:20,120
slim if you've used lube in they've all

00:02:18,050 --> 00:02:21,950
got the same set of core components

00:02:20,120 --> 00:02:23,870
you've got some sort of Rooter you've

00:02:21,950 --> 00:02:26,210
got some sort of dependency injection

00:02:23,870 --> 00:02:28,520
container some sort of mechanism for

00:02:26,210 --> 00:02:31,190
rendering templates you know the HTML

00:02:28,520 --> 00:02:34,130
half of your website some sort of error

00:02:31,190 --> 00:02:36,200
handling is required and you're going to

00:02:34,130 --> 00:02:39,170
have to deal with configuration so there

00:02:36,200 --> 00:02:42,650
will be some configuration as well in

00:02:39,170 --> 00:02:44,660
any micro framework and micro so I said

00:02:42,650 --> 00:02:47,959
dispersive is no different this is its

00:02:44,660 --> 00:02:51,140
core and then because we're part of the

00:02:47,959 --> 00:02:55,160
Zend ecosystem we have a whole plethora

00:02:51,140 --> 00:02:57,860
of other components that will slot

00:02:55,160 --> 00:03:00,350
straight into your expressive

00:02:57,860 --> 00:03:02,360
application things that you're going to

00:03:00,350 --> 00:03:04,459
need to flesh out your website or flesh

00:03:02,360 --> 00:03:06,830
out your API I'm personally an API

00:03:04,459 --> 00:03:09,489
person so things like the API rendering

00:03:06,830 --> 00:03:12,350
components are always in my apps

00:03:09,489 --> 00:03:14,000
filtering and validation is required for

00:03:12,350 --> 00:03:16,280
just about every app out there

00:03:14,000 --> 00:03:19,310
database abstraction session handling

00:03:16,280 --> 00:03:21,470
etc you're going to need them in your

00:03:19,310 --> 00:03:23,450
application there are Zen components

00:03:21,470 --> 00:03:25,880
that you can use it will slot straight

00:03:23,450 --> 00:03:29,330
in however because it is a micro

00:03:25,880 --> 00:03:33,769
framework you don't have to you can use

00:03:29,330 --> 00:03:35,690
which ever components you like and they

00:03:33,769 --> 00:03:42,890
will just work because we're composer

00:03:35,690 --> 00:03:45,440
based expressive is agnostic the Rooter

00:03:42,890 --> 00:03:48,830
can be the fast route or a dot Rooter or

00:03:45,440 --> 00:03:51,830
Zen Rooter we don't force you to pick a

00:03:48,830 --> 00:03:53,750
Rooter obviously there's an framework

00:03:51,830 --> 00:03:57,080
has its own router that came through

00:03:53,750 --> 00:03:59,420
from said f2 so that's available do I

00:03:57,080 --> 00:04:01,910
container the same thing it turns out

00:03:59,420 --> 00:04:04,040
that people have strong opinions about

00:04:01,910 --> 00:04:07,130
which dependency injection container

00:04:04,040 --> 00:04:09,799
they use so expressive will support all

00:04:07,130 --> 00:04:11,780
of these different containers so the one

00:04:09,799 --> 00:04:13,850
you are most comfortable with is the one

00:04:11,780 --> 00:04:16,729
you should use and similarly with your

00:04:13,850 --> 00:04:20,180
template layouts people like using twig

00:04:16,729 --> 00:04:22,490
if they want automatic escape in other

00:04:20,180 --> 00:04:24,470
people prefer a PHP based templating

00:04:22,490 --> 00:04:26,450
system so send fewer plates will make

00:04:24,470 --> 00:04:27,600
more sense to them you can pick the one

00:04:26,450 --> 00:04:32,160
that makes

00:04:27,600 --> 00:04:33,000
your project work best for you and I

00:04:32,160 --> 00:04:34,470
know what you're thinking you're

00:04:33,000 --> 00:04:39,300
thinking this is a Zend framework

00:04:34,470 --> 00:04:40,920
project sind expressive so clearly but

00:04:39,300 --> 00:04:43,130
defaults are going to be Zend router

00:04:40,920 --> 00:04:47,510
send service man chat and send view and

00:04:43,130 --> 00:04:50,970
they're not the defaults are fast route

00:04:47,510 --> 00:04:53,630
send service manager and no template

00:04:50,970 --> 00:04:55,980
whatsoever because a good proportion of

00:04:53,630 --> 00:04:59,010
applications nowadays are api's and you

00:04:55,980 --> 00:05:00,270
do not need a template layer for that so

00:04:59,010 --> 00:05:02,730
we're not even going to provide a

00:05:00,270 --> 00:05:06,030
default to pick the one you want fast

00:05:02,730 --> 00:05:08,580
route is a really good Rooter so that is

00:05:06,030 --> 00:05:10,140
our preferred one nowadays if you're

00:05:08,580 --> 00:05:13,080
more comfortable ways and Rooter works

00:05:10,140 --> 00:05:16,500
then you can use it means Express if we

00:05:13,080 --> 00:05:19,710
choose fast route by default for dua

00:05:16,500 --> 00:05:21,600
containers lots of choice I personally

00:05:19,710 --> 00:05:24,060
think census man juries are really good

00:05:21,600 --> 00:05:27,330
dua container so I'm quite happy that it

00:05:24,060 --> 00:05:29,640
is a default but already the I and Alvin

00:05:27,330 --> 00:05:31,230
in particular are also really good if

00:05:29,640 --> 00:05:34,350
you aren't used to them oh you want auto

00:05:31,230 --> 00:05:36,150
wiring then our Rin or Symphony do I can

00:05:34,350 --> 00:05:44,070
clean them might be better choices for

00:05:36,150 --> 00:05:45,870
you expressive is mid web based so how

00:05:44,070 --> 00:05:47,730
we handle a dispatch pipeline is

00:05:45,870 --> 00:05:49,880
different to if you've used sim

00:05:47,730 --> 00:05:52,830
framework one or so in framework to or

00:05:49,880 --> 00:05:56,580
Symphony what they've got a more event

00:05:52,830 --> 00:05:59,190
based pipeline expressive is middleware

00:05:56,580 --> 00:06:00,840
based it's a remarkably simple system is

00:05:59,190 --> 00:06:03,210
quite easy to get your head round we

00:06:00,840 --> 00:06:06,360
have a request from the browser and then

00:06:03,210 --> 00:06:08,910
we pass it through individual components

00:06:06,360 --> 00:06:11,400
very small components that can

00:06:08,910 --> 00:06:14,460
manipulate the request or act on the

00:06:11,400 --> 00:06:17,450
request before sending it down the

00:06:14,460 --> 00:06:21,150
pipeline to the next component we

00:06:17,450 --> 00:06:24,570
provide some middleware by default so a

00:06:21,150 --> 00:06:27,540
routing middleware is a component that

00:06:24,570 --> 00:06:31,200
inspects the URL and works out which

00:06:27,540 --> 00:06:33,300
action we need to execute later and then

00:06:31,200 --> 00:06:35,910
we have a dispatch making middleware

00:06:33,300 --> 00:06:38,460
which will actually do the dispatching

00:06:35,910 --> 00:06:40,710
of your action itself so that you can

00:06:38,460 --> 00:06:43,890
slot additional middleware components

00:06:40,710 --> 00:06:46,050
between the two so it's quite pipeline

00:06:43,890 --> 00:06:54,300
there's one put one thing after another

00:06:46,050 --> 00:06:56,130
and you must return a response then we

00:06:54,300 --> 00:06:58,170
heard of the fig the framework

00:06:56,130 --> 00:07:01,800
interoperability group they've been

00:06:58,170 --> 00:07:04,500
around a while the fig is a group of

00:07:01,800 --> 00:07:06,870
people a group of projects that agree

00:07:04,500 --> 00:07:09,240
common standards amongst themselves in

00:07:06,870 --> 00:07:12,870
order to make interoperability between

00:07:09,240 --> 00:07:15,120
components easier it's been going for a

00:07:12,870 --> 00:07:17,130
long while now and the very first

00:07:15,120 --> 00:07:20,010
standard they created was called PSR

00:07:17,130 --> 00:07:22,860
zero which you've probably all heard of

00:07:20,010 --> 00:07:25,740
it allows for auto load in to be

00:07:22,860 --> 00:07:28,530
standardised which means that we can use

00:07:25,740 --> 00:07:31,740
any component in our project without

00:07:28,530 --> 00:07:34,200
having to do all the hassle around

00:07:31,740 --> 00:07:35,000
registering magic autoloaders and things

00:07:34,200 --> 00:07:39,210
like that

00:07:35,000 --> 00:07:42,330
PSR zero is a reason that Jordan Nils

00:07:39,210 --> 00:07:45,420
were able to write composer I'll be all

00:07:42,330 --> 00:07:48,480
using composer yes we are pretty much

00:07:45,420 --> 00:07:50,160
few people not composer is wonderful and

00:07:48,480 --> 00:07:52,320
the only worse cause of pierre sauce

00:07:50,160 --> 00:07:55,200
Aaron Pierce are four so that we can

00:07:52,320 --> 00:07:59,010
autoload our components and the big

00:07:55,200 --> 00:08:01,290
group flush with the success of getting

00:07:59,010 --> 00:08:03,000
a autoloading system have gone on

00:08:01,290 --> 00:08:05,670
created a whole load of additional

00:08:03,000 --> 00:08:09,930
standards and the ones we're interested

00:08:05,670 --> 00:08:11,700
in today are PSR seven and PSR 15 PSR

00:08:09,930 --> 00:08:14,400
seven is related to request responses

00:08:11,700 --> 00:08:18,210
Pierce r15 is related to middleware and

00:08:14,400 --> 00:08:23,430
was approved a fortnight ago it's now a

00:08:18,210 --> 00:08:26,520
standard expressive middleware pipeline

00:08:23,430 --> 00:08:29,100
is PSR 15 compatible so it will be the

00:08:26,520 --> 00:08:31,440
first micro framework that supports this

00:08:29,100 --> 00:08:33,000
standard there will be others coming I'm

00:08:31,440 --> 00:08:35,280
lead developer of slim frame work we

00:08:33,000 --> 00:08:37,440
will becomes piss off if they miss limb

00:08:35,280 --> 00:08:41,700
for probably towards the middle of this

00:08:37,440 --> 00:08:43,860
year like all the PSRs except for

00:08:41,700 --> 00:08:46,680
located standard ones it's essentially a

00:08:43,860 --> 00:08:49,830
set of interfaces and the one we care

00:08:46,680 --> 00:08:52,620
about is a middleware interface so if

00:08:49,830 --> 00:08:54,420
this our HTTP server is our name space

00:08:52,620 --> 00:08:58,170
and it is just this

00:08:54,420 --> 00:09:01,680
of middle way through this interface one

00:08:58,170 --> 00:09:03,209
function process so you have to

00:09:01,680 --> 00:09:06,720
implement process to implement a

00:09:03,209 --> 00:09:11,100
component in the pipeline this function

00:09:06,720 --> 00:09:14,070
takes two parameters a request which is

00:09:11,100 --> 00:09:17,490
a PS or seven request object and a

00:09:14,070 --> 00:09:23,100
handler which is a pointer object to the

00:09:17,490 --> 00:09:28,019
next elements in the pipeline and as I

00:09:23,100 --> 00:09:30,269
said you must return a response as you

00:09:28,019 --> 00:09:32,040
can tell from this interface with use

00:09:30,269 --> 00:09:36,420
type engine and we've use return type

00:09:32,040 --> 00:09:39,620
int in it's a PHP 7 or above interface

00:09:36,420 --> 00:09:43,639
if you're a 5.6 you need to be upgrading

00:09:39,620 --> 00:09:43,639
fortunately womens just told you how to

00:09:44,120 --> 00:09:48,660
somebody the way looks a bit like this

00:09:46,199 --> 00:09:50,399
this is a really simple time in

00:09:48,660 --> 00:09:55,040
middleware I implement them into our

00:09:50,399 --> 00:09:57,600
interface and I do something before

00:09:55,040 --> 00:10:00,089
anything else so the first thing I do is

00:09:57,600 --> 00:10:03,810
some work in this particular case I'm

00:10:00,089 --> 00:10:07,019
just storing the current time then I

00:10:03,810 --> 00:10:11,339
call handle on the handle object so that

00:10:07,019 --> 00:10:13,560
sends me down the middleware pipeline so

00:10:11,339 --> 00:10:16,110
now I've left left control of my

00:10:13,560 --> 00:10:18,390
middleware and all the other middleware

00:10:16,110 --> 00:10:21,930
components are now being executed in

00:10:18,390 --> 00:10:24,209
turn all the way down to my action my

00:10:21,930 --> 00:10:27,120
action will return the response come

00:10:24,209 --> 00:10:29,279
back through all the Midwest before they

00:10:27,120 --> 00:10:32,430
get back to here as that response

00:10:29,279 --> 00:10:36,060
returned so I now have a response object

00:10:32,430 --> 00:10:38,430
that has come from my action I then do

00:10:36,060 --> 00:10:41,430
some more work after the rest of my

00:10:38,430 --> 00:10:43,920
application executed in this tie case I

00:10:41,430 --> 00:10:46,860
simply get the current time it took to

00:10:43,920 --> 00:10:49,079
execute and I write it to the body so I

00:10:46,860 --> 00:10:53,790
can modify the response object on the

00:10:49,079 --> 00:10:56,339
way out of the midway and finally I had

00:10:53,790 --> 00:10:57,899
to return my response obviously you

00:10:56,339 --> 00:11:00,300
would never write code like this in the

00:10:57,899 --> 00:11:02,850
real world because you might not have

00:11:00,300 --> 00:11:04,680
HTML going out of the response so you

00:11:02,850 --> 00:11:08,569
would probably check that this HTML

00:11:04,680 --> 00:11:08,569
before you go and write an HTML comment

00:11:08,600 --> 00:11:16,380
so that's what psi bid where looks like

00:11:11,450 --> 00:11:18,420
how do we get started with expressive we

00:11:16,380 --> 00:11:20,130
use composer everyone uses composer

00:11:18,420 --> 00:11:25,860
we've already agreed that composer

00:11:20,130 --> 00:11:27,840
create project as an framework etc and

00:11:25,860 --> 00:11:31,140
then what send expressive does is it

00:11:27,840 --> 00:11:34,020
leverages a feature of composer to act

00:11:31,140 --> 00:11:36,060
as an installer composer is a really

00:11:34,020 --> 00:11:37,620
really good project they're really good

00:11:36,060 --> 00:11:41,490
for people over there we've leveraged

00:11:37,620 --> 00:11:44,850
their work and what we do is when you do

00:11:41,490 --> 00:11:48,170
your create project we hook into the

00:11:44,850 --> 00:11:50,520
composer system to ask you what type of

00:11:48,170 --> 00:11:51,690
expressive project you want and there's

00:11:50,520 --> 00:11:53,760
a whole set of questions that come up

00:11:51,690 --> 00:11:57,060
that you can't read they look something

00:11:53,760 --> 00:11:58,290
like this so nice blue background or

00:11:57,060 --> 00:12:00,060
cyan background what type of

00:11:58,290 --> 00:12:01,560
installation would you like and then you

00:12:00,060 --> 00:12:03,030
can say well I went to minimal one I

00:12:01,560 --> 00:12:04,500
want a flat one I went to modular one

00:12:03,030 --> 00:12:06,510
however you are laying out your

00:12:04,500 --> 00:12:08,880
particular expressive application

00:12:06,510 --> 00:12:10,380
there's multiple choices and then we

00:12:08,880 --> 00:12:12,000
asked you which rooty you weren't which

00:12:10,380 --> 00:12:15,750
the eye container you weren't whether

00:12:12,000 --> 00:12:17,490
you want templates etc we just asked all

00:12:15,750 --> 00:12:20,310
the questions and then we build up a

00:12:17,490 --> 00:12:24,390
project that matches what you're trying

00:12:20,310 --> 00:12:29,240
to do and then we prove that we are not

00:12:24,390 --> 00:12:33,270
designers what if we do before bootstrap

00:12:29,240 --> 00:12:35,670
and you get a really really simple demo

00:12:33,270 --> 00:12:37,050
HTML page just to prove to yourself so

00:12:35,670 --> 00:12:38,730
you've actually installed a project

00:12:37,050 --> 00:12:40,500
obviously the first thing you do is wipe

00:12:38,730 --> 00:12:42,690
all this out because moved in what's a

00:12:40,500 --> 00:12:44,760
website looks like this nowadays but

00:12:42,690 --> 00:12:46,140
you're now running your expressive

00:12:44,760 --> 00:12:50,940
website you're confident that the

00:12:46,140 --> 00:12:53,600
pipeline is working this is a standard

00:12:50,940 --> 00:12:58,170
directory structure if you pick the flat

00:12:53,600 --> 00:13:01,260
format if you choose the minimal you'll

00:12:58,170 --> 00:13:02,490
get a lot fewer directories but we've

00:13:01,260 --> 00:13:03,870
got a number of stuff going on here you

00:13:02,490 --> 00:13:05,400
can see a bin directory

00:13:03,870 --> 00:13:07,050
they've been directories where any

00:13:05,400 --> 00:13:09,570
scripts go that you need to run for

00:13:07,050 --> 00:13:14,390
within your project config holds

00:13:09,570 --> 00:13:18,120
configuration config auto load holds

00:13:14,390 --> 00:13:20,110
application instance configuration such

00:13:18,120 --> 00:13:21,519
as your database credential

00:13:20,110 --> 00:13:23,670
or some things like that would go into

00:13:21,519 --> 00:13:26,529
the autoload folder they get loaded

00:13:23,670 --> 00:13:29,680
automatically for you the ones in the

00:13:26,529 --> 00:13:31,600
route config directory like pipeline and

00:13:29,680 --> 00:13:35,589
routes or how you configure the way your

00:13:31,600 --> 00:13:37,540
application is structured public folder

00:13:35,589 --> 00:13:39,550
fairly obvious that's going to be the

00:13:37,540 --> 00:13:41,890
folder that the web server will surf

00:13:39,550 --> 00:13:44,579
from so you can see in index dot PHP in

00:13:41,890 --> 00:13:46,779
there that is your entry point source

00:13:44,579 --> 00:13:49,630
that's clearly where your source code

00:13:46,779 --> 00:13:51,100
goes test is clearly aware your tesco

00:13:49,630 --> 00:13:56,050
because you are obviously all writing

00:13:51,100 --> 00:13:58,899
tests that's all slash out directory

00:13:56,050 --> 00:14:01,990
acts as a module so you can live in your

00:13:58,899 --> 00:14:03,399
own namespace particular coder then

00:14:01,990 --> 00:14:06,310
create multiple main spaces within

00:14:03,399 --> 00:14:08,740
source in order to separate out our code

00:14:06,310 --> 00:14:10,870
maybe reuse it between projects or just

00:14:08,740 --> 00:14:14,860
for organizational purposes all your

00:14:10,870 --> 00:14:17,769
code goes in here there's one class that

00:14:14,860 --> 00:14:20,380
lives in your app folder which is called

00:14:17,769 --> 00:14:23,110
config provider which enables

00:14:20,380 --> 00:14:25,240
configuration of the code within this

00:14:23,110 --> 00:14:27,720
codebase so that's where you will add

00:14:25,240 --> 00:14:32,290
the I registrations for this particular

00:14:27,720 --> 00:14:33,579
module looks something like that so

00:14:32,290 --> 00:14:36,790
we've got a source folder and a test

00:14:33,579 --> 00:14:39,070
folder again and then we've got handlers

00:14:36,790 --> 00:14:43,930
is the word we use for actions nowadays

00:14:39,070 --> 00:14:47,110
because it's modern icing so there's our

00:14:43,930 --> 00:14:49,540
homepage handler that is an action ping

00:14:47,110 --> 00:14:51,820
handler that is another action templates

00:14:49,540 --> 00:14:54,130
that's where our HTML code goes this

00:14:51,820 --> 00:14:59,649
time I've chosen twig so that's why I've

00:14:54,130 --> 00:15:03,910
got a twig extension handlers look like

00:14:59,649 --> 00:15:06,579
this the other half of PS r15 is the

00:15:03,910 --> 00:15:08,079
request handler interface and the

00:15:06,579 --> 00:15:09,940
request header interface has a method

00:15:08,079 --> 00:15:13,089
called handle init which takes a request

00:15:09,940 --> 00:15:18,820
and you must return a response so this

00:15:13,089 --> 00:15:21,250
is your action your action is at the end

00:15:18,820 --> 00:15:24,399
of the pipeline chain so you have to

00:15:21,250 --> 00:15:29,430
return the response containing the HTML

00:15:24,399 --> 00:15:29,430
that you want to send out to the browser

00:15:29,800 --> 00:15:33,459
so part of the request objects with

00:15:31,809 --> 00:15:35,170
sorry part of the pestle 7

00:15:33,459 --> 00:15:37,689
implementation within expressive there's

00:15:35,170 --> 00:15:40,179
an HTML response object so you can guess

00:15:37,689 --> 00:15:43,480
what that one does it says content type

00:15:40,179 --> 00:15:45,519
2 HTML that's a 200 status code and you

00:15:43,480 --> 00:15:49,720
put your HTML eNOS the first parameter

00:15:45,519 --> 00:15:51,040
of the constructor we now have the

00:15:49,720 --> 00:15:53,920
world's most simplest hello world

00:15:51,040 --> 00:15:57,429
application not probably otherwise my

00:15:53,920 --> 00:16:01,389
simplest within expressive so frightened

00:15:57,429 --> 00:16:04,119
web page see this come up with a demo

00:16:01,389 --> 00:16:05,170
and my normal demos are things like crud

00:16:04,119 --> 00:16:07,749
application so I normally use

00:16:05,170 --> 00:16:09,579
bookshelves or in the old days I used to

00:16:07,749 --> 00:16:12,549
use CDs but nobody knows what CD is

00:16:09,579 --> 00:16:14,110
anymore so that one went what's current

00:16:12,549 --> 00:16:17,679
today you know what's current today

00:16:14,110 --> 00:16:20,110
Bitcoin is current today so this is a

00:16:17,679 --> 00:16:22,569
Bitcoin conversion program which will

00:16:20,110 --> 00:16:25,239
tell you how much one Bitcoin is worth

00:16:22,569 --> 00:16:27,069
in pounds dollars or Euros and I chose

00:16:25,239 --> 00:16:30,069
this one because there's a free to

00:16:27,069 --> 00:16:33,449
access API that gives me the data which

00:16:30,069 --> 00:16:35,319
is why it's nice and simple to implement

00:16:33,449 --> 00:16:36,999
downside of course is I have to keep

00:16:35,319 --> 00:16:40,449
changing the screenshots because the

00:16:36,999 --> 00:16:42,040
value changes so frequently so we're

00:16:40,449 --> 00:16:45,399
gonna need a route we're going to put

00:16:42,040 --> 00:16:48,819
our new page on a URL our page URL is

00:16:45,399 --> 00:16:51,279
going to be such Bitcoin so do this we

00:16:48,819 --> 00:16:55,449
put some code into the config slash

00:16:51,279 --> 00:16:58,480
route PHP file firstly we have to

00:16:55,449 --> 00:17:01,269
specify the method this is going to be a

00:16:58,480 --> 00:17:04,020
get request it's good practice nowadays

00:17:01,269 --> 00:17:07,059
to be aware of which methods are

00:17:04,020 --> 00:17:10,299
accepted by your action so this

00:17:07,059 --> 00:17:14,740
particular action only accepts get

00:17:10,299 --> 00:17:17,199
requests we have a method for all the

00:17:14,740 --> 00:17:19,929
HTTP methods get post put pressure elite

00:17:17,199 --> 00:17:22,389
if you wish to have one action and

00:17:19,929 --> 00:17:24,970
respond to multiple methods you can use

00:17:22,389 --> 00:17:26,860
either any or you can use route and then

00:17:24,970 --> 00:17:29,830
you pass in a list of the methods you

00:17:26,860 --> 00:17:32,470
support it's very difficult to justify

00:17:29,830 --> 00:17:34,919
those two you probably should not be

00:17:32,470 --> 00:17:34,919
using them

00:17:36,080 --> 00:17:43,409
roots have a pattern this is the URLs

00:17:39,600 --> 00:17:45,330
that the Rooter will look at in order to

00:17:43,409 --> 00:17:47,059
work out if this action needs to be

00:17:45,330 --> 00:17:49,710
executed or not

00:17:47,059 --> 00:17:51,270
so the pattern can be a literal string

00:17:49,710 --> 00:17:53,429
we're going to use fast rates here cuz

00:17:51,270 --> 00:17:56,399
that's the default and it also fit on

00:17:53,429 --> 00:17:58,950
one slide that way literal string /

00:17:56,399 --> 00:18:00,330
hello you're on magic / hello we're

00:17:58,950 --> 00:18:04,110
gonna run this cut and recover on this

00:18:00,330 --> 00:18:06,720
action placeholders we don't want to

00:18:04,110 --> 00:18:09,000
have to create loads and loads of routes

00:18:06,720 --> 00:18:10,409
with all the possible human names in the

00:18:09,000 --> 00:18:14,250
world so we could have a placeholder

00:18:10,409 --> 00:18:17,520
called name I put it in braces and now I

00:18:14,250 --> 00:18:20,250
can do app get hello / Rob and this

00:18:17,520 --> 00:18:22,200
action will run I can make them optional

00:18:20,250 --> 00:18:24,840
but square brackets around it

00:18:22,200 --> 00:18:29,070
I can nest my square brackets so it's

00:18:24,840 --> 00:18:33,210
less news or such news / ear or such

00:18:29,070 --> 00:18:35,190
news / yes / month I can't do such news

00:18:33,210 --> 00:18:39,659
/ month it doesn't matter that it's

00:18:35,190 --> 00:18:41,789
associative left to right lastly I can

00:18:39,659 --> 00:18:42,690
constrain my placeholders via regular

00:18:41,789 --> 00:18:45,090
expressions

00:18:42,690 --> 00:18:47,429
I know you all love regular expressions

00:18:45,090 --> 00:18:49,220
because you're developers we're all

00:18:47,429 --> 00:18:51,240
really good at them aren't we

00:18:49,220 --> 00:18:54,090
fortunately other people are so we just

00:18:51,240 --> 00:18:56,490
steal other people's reg X's but this

00:18:54,090 --> 00:18:59,039
sounds nice and simple / d four digits

00:18:56,490 --> 00:19:03,149
exactly four of them please so here I

00:18:59,039 --> 00:19:07,080
specified that my year must have exactly

00:19:03,149 --> 00:19:13,049
four digits and all things work

00:19:07,080 --> 00:19:14,760
wonderfully it's clever name so I can

00:19:13,049 --> 00:19:17,970
name this root Bitcoin

00:19:14,760 --> 00:19:21,390
why would I name a root I mostly named a

00:19:17,970 --> 00:19:24,990
route because SEO experts think they

00:19:21,390 --> 00:19:26,549
control the URL no base so sooner or

00:19:24,990 --> 00:19:28,470
later you've written your application

00:19:26,549 --> 00:19:30,450
and someone comes along and says you

00:19:28,470 --> 00:19:34,110
know that URL such Bitcoin we need to

00:19:30,450 --> 00:19:36,120
change it to the such Bitcoin - this -

00:19:34,110 --> 00:19:38,850
that - the other - or something else in

00:19:36,120 --> 00:19:39,990
order to make it more visible so when

00:19:38,850 --> 00:19:41,370
they do that you don't want all the

00:19:39,990 --> 00:19:43,350
links in your website to have to be

00:19:41,370 --> 00:19:45,690
changed as well all the places where you

00:19:43,350 --> 00:19:47,280
refer to it so we can use a URL helper

00:19:45,690 --> 00:19:51,010
to

00:19:47,280 --> 00:19:52,840
generate the URI based off the name so

00:19:51,010 --> 00:19:55,030
here I'm generating user dot profile I

00:19:52,840 --> 00:19:57,430
parse in one of the parameters requires

00:19:55,030 --> 00:19:59,680
a name and it will generate the URL for

00:19:57,430 --> 00:20:02,380
me so no matter how often the marketing

00:19:59,680 --> 00:20:05,770
types rename it from profile to

00:20:02,380 --> 00:20:09,310
something else it will continue to work

00:20:05,770 --> 00:20:12,490
and lastly roots have a handler which if

00:20:09,310 --> 00:20:15,580
you remember is the same as an action so

00:20:12,490 --> 00:20:20,470
roots have an action a handler the code

00:20:15,580 --> 00:20:25,330
that is run only for this particular URL

00:20:20,470 --> 00:20:27,280
pattern handlers receiver PS are seven

00:20:25,330 --> 00:20:29,680
requests and they manage your business

00:20:27,280 --> 00:20:32,080
logic because you are really good

00:20:29,680 --> 00:20:35,320
developers most of your code does not

00:20:32,080 --> 00:20:38,530
live in your controller that's what we

00:20:35,320 --> 00:20:42,280
used to do but we have learnt most of

00:20:38,530 --> 00:20:44,470
our code now lives in our model layer in

00:20:42,280 --> 00:20:47,920
our service classes in our domain layer

00:20:44,470 --> 00:20:50,770
and we have a very small action which

00:20:47,920 --> 00:20:53,290
just operates against the peer saw seven

00:20:50,770 --> 00:20:55,840
response marshals it deals with our

00:20:53,290 --> 00:20:58,660
business logic and then it must return

00:20:55,840 --> 00:21:01,620
the PS awesome response so say it's been

00:20:58,660 --> 00:21:03,550
implemented as a PS r15 request handler

00:21:01,620 --> 00:21:05,380
if you need to create one of these

00:21:03,550 --> 00:21:08,650
there's a tool for doing so

00:21:05,380 --> 00:21:10,900
composer because we like composer then

00:21:08,650 --> 00:21:13,150
the tools expressive handler : create

00:21:10,900 --> 00:21:16,090
and it will go and create you your

00:21:13,150 --> 00:21:18,160
action class for you and as of yesterday

00:21:16,090 --> 00:21:21,430
it will also create the template file

00:21:18,160 --> 00:21:23,050
for you as well so that you get a good

00:21:21,430 --> 00:21:27,550
start in place to create your new

00:21:23,050 --> 00:21:29,830
actions this is what it looks like this

00:21:27,550 --> 00:21:31,750
is a fairly typical action they're not

00:21:29,830 --> 00:21:36,640
very big you will notice that there is

00:21:31,750 --> 00:21:37,330
one function in the action we don't have

00:21:36,640 --> 00:21:40,060
controllers

00:21:37,330 --> 00:21:41,260
it's an action class so if you're coming

00:21:40,060 --> 00:21:43,960
from the same framework to for instance

00:21:41,260 --> 00:21:45,100
we had a controller class with multiple

00:21:43,960 --> 00:21:48,970
action methods in it

00:21:45,100 --> 00:21:50,590
we now have one action one class this

00:21:48,970 --> 00:21:53,470
makes testing much easier it makes

00:21:50,590 --> 00:21:56,730
pendency injection much cleaner so that

00:21:53,470 --> 00:21:56,730
is the way we go nowadays

00:21:56,820 --> 00:22:03,370
there's a handle method as before Pierce

00:22:00,520 --> 00:22:08,140
ar-15s handle into her handler interface

00:22:03,370 --> 00:22:10,060
there's our actual work all the actual

00:22:08,140 --> 00:22:12,490
work related to this particular webpage

00:22:10,060 --> 00:22:15,310
is done in some service the Bitcoin

00:22:12,490 --> 00:22:16,510
service BTC service and it magically

00:22:15,310 --> 00:22:18,550
gets current prices

00:22:16,510 --> 00:22:19,960
you don't really call about this I don't

00:22:18,550 --> 00:22:22,660
have to show you the code for that so

00:22:19,960 --> 00:22:24,430
you can just assume it works see it's in

00:22:22,660 --> 00:22:26,770
the model someone else's problem and

00:22:24,430 --> 00:22:29,980
then we return a text to our response

00:22:26,770 --> 00:22:32,800
but to generate the HTML we use a

00:22:29,980 --> 00:22:36,070
template so we have a twig template

00:22:32,800 --> 00:22:39,580
which is referenced by app code on :

00:22:36,070 --> 00:22:44,310
Bitcoin - page which will render out our

00:22:39,580 --> 00:22:44,310
data and make it visible to our users

00:22:44,670 --> 00:22:51,490
that Bitcoin service needs to be

00:22:47,410 --> 00:22:54,640
injected into our action you'll notice

00:22:51,490 --> 00:22:58,330
that we didn't instantiate it within the

00:22:54,640 --> 00:23:00,850
action itself we pass it in via the

00:22:58,330 --> 00:23:03,460
constructor we do this to make

00:23:00,850 --> 00:23:04,990
everything much more testable so

00:23:03,460 --> 00:23:08,020
dependency injection is baked into

00:23:04,990 --> 00:23:09,760
expressive it is much easier to use it

00:23:08,020 --> 00:23:13,030
than to not use it so you may as well

00:23:09,760 --> 00:23:15,100
use it so we go create a constructor

00:23:13,030 --> 00:23:16,870
fire action is going to take the

00:23:15,100 --> 00:23:18,910
template interface that's a template

00:23:16,870 --> 00:23:20,560
render interface for rendering our

00:23:18,910 --> 00:23:22,300
templates and it's gonna take our

00:23:20,560 --> 00:23:27,340
Bitcoin service doesn't do much just

00:23:22,300 --> 00:23:28,780
assign some two variables in order to

00:23:27,340 --> 00:23:31,780
show you how that works I don't need to

00:23:28,780 --> 00:23:35,830
segue quickly into expressive

00:23:31,780 --> 00:23:39,400
configuration this is a technical term

00:23:35,830 --> 00:23:42,040
it's a mushed-up array we starts with

00:23:39,400 --> 00:23:44,170
the config provider classes from our

00:23:42,040 --> 00:23:47,140
modules so our app config can ride the

00:23:44,170 --> 00:23:51,580
class and then each PHP file that lives

00:23:47,140 --> 00:23:54,160
in config autoload is smushed on top so

00:23:51,580 --> 00:23:57,460
any file that you go to config autoload

00:23:54,160 --> 00:24:00,940
can override the configuration created

00:23:57,460 --> 00:24:02,410
by the modules so your modules can have

00:24:00,940 --> 00:24:05,070
default configuration that this

00:24:02,410 --> 00:24:07,120
particular application can overwrite

00:24:05,070 --> 00:24:09,580
that's really powerful and really

00:24:07,120 --> 00:24:10,179
convenient and it's all PHP arrays so

00:24:09,580 --> 00:24:12,399
it's quite

00:24:10,179 --> 00:24:14,110
see to understand you get number of

00:24:12,399 --> 00:24:17,320
common top-level keys but you can create

00:24:14,110 --> 00:24:21,610
any keys you like so dependencies twig

00:24:17,320 --> 00:24:24,669
validators etc the sort of keys you

00:24:21,610 --> 00:24:27,220
expect to see obviously the pendant sees

00:24:24,669 --> 00:24:30,240
is the key we used for configuring our

00:24:27,220 --> 00:24:32,619
di container and you can use the same

00:24:30,240 --> 00:24:36,759
configuration for all the different di

00:24:32,619 --> 00:24:38,590
containers we support this is what a

00:24:36,759 --> 00:24:41,529
config provide that looks like it is

00:24:38,590 --> 00:24:43,749
simply an Evo Keable class so you use a

00:24:41,529 --> 00:24:46,360
magic method under Scott and score

00:24:43,749 --> 00:24:48,999
invoke and then we have to return an

00:24:46,360 --> 00:24:51,279
associative array for convenience we

00:24:48,999 --> 00:24:54,159
tend to split it out into sub functions

00:24:51,279 --> 00:24:56,019
or sub methods so that this doesn't get

00:24:54,159 --> 00:24:57,879
too big makes it easier to reason the

00:24:56,019 --> 00:25:01,749
belt and makes it easier to fit on

00:24:57,879 --> 00:25:05,619
slides when you're presenting so guess

00:25:01,749 --> 00:25:08,320
what get dependencies looks like it

00:25:05,619 --> 00:25:10,419
returns the sub key factories it also

00:25:08,320 --> 00:25:12,309
does in vocables it does aliases and a

00:25:10,419 --> 00:25:14,610
whole other other stuff lookup them they

00:25:12,309 --> 00:25:17,799
do I contain a documentation if you care

00:25:14,610 --> 00:25:19,779
I'm going to return a factory so I have

00:25:17,799 --> 00:25:23,080
to tell the do I contain there how the

00:25:19,779 --> 00:25:27,100
what factory I wish to execute for a

00:25:23,080 --> 00:25:29,980
given given class and action class in

00:25:27,100 --> 00:25:32,619
this case so I map him my Bitcoin page

00:25:29,980 --> 00:25:35,919
handler which is my action class against

00:25:32,619 --> 00:25:37,990
my Bitcoin page factory which is a class

00:25:35,919 --> 00:25:43,149
that knows how to create the action

00:25:37,990 --> 00:25:46,119
class then my dispatcher when it decides

00:25:43,149 --> 00:25:48,490
it needs to render or execute the

00:25:46,119 --> 00:25:51,159
Bitcoin page handler will ask do I

00:25:48,490 --> 00:25:55,119
container please give me a fully

00:25:51,159 --> 00:25:59,009
configured action class please and the

00:25:55,119 --> 00:26:01,330
DI container will run my factory for me

00:25:59,009 --> 00:26:02,440
so my factory looks at a lot of this so

00:26:01,330 --> 00:26:04,749
factories are not fairly complicated

00:26:02,440 --> 00:26:06,700
word we use it to make ourselves sound

00:26:04,749 --> 00:26:08,499
clever there's an awful lot of

00:26:06,700 --> 00:26:11,230
terminology in terminology in software

00:26:08,499 --> 00:26:12,759
industry we have this terminology to

00:26:11,230 --> 00:26:15,340
make sure that we feel superior to

00:26:12,759 --> 00:26:16,480
junior developers there's probably

00:26:15,340 --> 00:26:20,289
another reason but I'm not quite sure

00:26:16,480 --> 00:26:22,980
all is so a factory simply means we have

00:26:20,289 --> 00:26:26,239
to return a new instance of a

00:26:22,980 --> 00:26:29,249
as all that means were creating classes

00:26:26,239 --> 00:26:33,539
so again it is my mom's mom's gonna

00:26:29,249 --> 00:26:37,139
invoke method and I return a new Bitcoin

00:26:33,539 --> 00:26:39,450
page handler that's my action class

00:26:37,139 --> 00:26:42,269
that's all my Factory has to do and I

00:26:39,450 --> 00:26:44,820
can pass in my dependencies that my

00:26:42,269 --> 00:26:47,820
constructor for my action needs and I

00:26:44,820 --> 00:26:49,769
retrieved them from the container and

00:26:47,820 --> 00:26:52,320
the reason I do that is that the

00:26:49,769 --> 00:26:55,109
container will not construct them unless

00:26:52,320 --> 00:26:57,899
we need them so I'm avoiding creating

00:26:55,109 --> 00:27:00,359
class II so I will not necessarily need

00:26:57,899 --> 00:27:04,379
for this particular quest she's a little

00:27:00,359 --> 00:27:06,299
bit more efficient and that's it that's

00:27:04,379 --> 00:27:08,190
forgot that far we've now got our action

00:27:06,299 --> 00:27:10,230
don't we have our service class injected

00:27:08,190 --> 00:27:12,210
interaction we're executing our service

00:27:10,230 --> 00:27:14,460
class within the API booking it all the

00:27:12,210 --> 00:27:18,379
way back now we need to display it to

00:27:14,460 --> 00:27:24,090
the user we call that template in

00:27:18,379 --> 00:27:25,499
inexpressive it's a view layer you've

00:27:24,090 --> 00:27:28,859
already seen that we have a render

00:27:25,499 --> 00:27:30,989
method which takes the template name and

00:27:28,859 --> 00:27:33,299
the data that you wish to pass through

00:27:30,989 --> 00:27:33,989
to the template to be rendered there

00:27:33,299 --> 00:27:37,019
namespaced

00:27:33,989 --> 00:27:39,419
with the colon colon tends to be the

00:27:37,019 --> 00:27:42,809
same PHP namespace but lower cased and

00:27:39,419 --> 00:27:45,119
it maps to a directory on disk so app

00:27:42,809 --> 00:27:49,049
colon colon maps to the app directory

00:27:45,119 --> 00:27:51,899
and then the other half of the template

00:27:49,049 --> 00:27:56,789
name Bitcoin - page maps to the file

00:27:51,899 --> 00:27:59,009
name on disk but dot HTML dot twig is

00:27:56,789 --> 00:28:02,249
provided by expressive because we've

00:27:59,009 --> 00:28:03,840
chosen a twig renderer had we chosen the

00:28:02,249 --> 00:28:06,480
Zen View renderer

00:28:03,840 --> 00:28:09,029
it would have been Bitcoin - page dot P

00:28:06,480 --> 00:28:11,070
HTML because that's what same view uses

00:28:09,029 --> 00:28:14,480
so it does that automatically for you

00:28:11,070 --> 00:28:17,159
I quite like tweak and on here use tweak

00:28:14,480 --> 00:28:19,350
yeah a few people it's quite a nicer

00:28:17,159 --> 00:28:22,019
culture innocencio people they're clever

00:28:19,350 --> 00:28:24,809
we like the balot they've got a fairly

00:28:22,019 --> 00:28:27,239
good manual and that's one of the key

00:28:24,809 --> 00:28:28,679
things i use for evaluating whether i'm

00:28:27,239 --> 00:28:31,019
going to use a components or not can i

00:28:28,679 --> 00:28:32,849
understand the manual so twig Josephina

00:28:31,019 --> 00:28:34,320
calm will give you the manual key things

00:28:32,849 --> 00:28:36,149
you need to care about variables are in

00:28:34,320 --> 00:28:36,710
double braces control statements

00:28:36,149 --> 00:28:40,940
embraced

00:28:36,710 --> 00:28:45,649
cents and comments to embrace hash so

00:28:40,940 --> 00:28:47,149
this is a typical template got a lot

00:28:45,649 --> 00:28:49,669
going on there key things we care about

00:28:47,149 --> 00:28:52,220
you notice there's a brace brace for

00:28:49,669 --> 00:28:54,799
rendering out a particular piece of data

00:28:52,220 --> 00:28:57,409
so I'm rendering out the symbol say said

00:28:54,799 --> 00:28:59,419
dollars or is it euros or is it pounds

00:28:57,409 --> 00:29:00,620
and then I'm rendering out the rate

00:28:59,419 --> 00:29:02,750
which is a float

00:29:00,620 --> 00:29:04,490
so ID number format it so I pass it

00:29:02,750 --> 00:29:06,649
through what twit caused a filter in

00:29:04,490 --> 00:29:09,559
order to make it look quite pretty two

00:29:06,649 --> 00:29:12,649
decimal places is plenty for no more

00:29:09,559 --> 00:29:15,289
fear currencies we have some control

00:29:12,649 --> 00:29:17,840
statements there's a for loop so for

00:29:15,289 --> 00:29:21,700
pricing prices and that's brace percent

00:29:17,840 --> 00:29:24,020
and then we had template inheritance

00:29:21,700 --> 00:29:26,809
template inheritance is how we do

00:29:24,020 --> 00:29:28,520
layouts and Twigg so any given template

00:29:26,809 --> 00:29:31,159
that we choose to render can inherit

00:29:28,520 --> 00:29:32,840
from a parent template which can inherit

00:29:31,159 --> 00:29:36,049
from a parent template again you can

00:29:32,840 --> 00:29:38,840
have a tree as deep as you like and the

00:29:36,049 --> 00:29:41,330
key thing about the templates

00:29:38,840 --> 00:29:44,360
inheritance is it provides cohesive look

00:29:41,330 --> 00:29:46,370
and feel so our default CSS our default

00:29:44,360 --> 00:29:49,039
java scripts the structure around their

00:29:46,370 --> 00:29:50,899
HTML can all go in one place so we don't

00:29:49,039 --> 00:29:53,840
have to copy and paste it around you get

00:29:50,899 --> 00:29:56,240
a base skeleton and you'd pick which

00:29:53,840 --> 00:29:59,120
particular skeleton you want by that

00:29:56,240 --> 00:30:04,039
extends line at the top so here I'm

00:29:59,120 --> 00:30:05,600
extending the default layout so my base

00:30:04,039 --> 00:30:06,950
skeleton looks something like this if

00:30:05,600 --> 00:30:08,600
you go to the actual base skeleton

00:30:06,950 --> 00:30:10,220
there's an awful lot more code in it but

00:30:08,600 --> 00:30:13,610
the fundamentals it looks something like

00:30:10,220 --> 00:30:17,450
that there's some HTML under fretted

00:30:13,610 --> 00:30:20,210
HTML there's some tags here key things

00:30:17,450 --> 00:30:24,500
are blocks so here I've got a block

00:30:20,210 --> 00:30:27,380
content which my original template can

00:30:24,500 --> 00:30:30,320
overwrite can provide the content for so

00:30:27,380 --> 00:30:32,750
block content there block head and then

00:30:30,320 --> 00:30:34,640
block title can live within block head

00:30:32,750 --> 00:30:36,380
so I get to choose whether to override

00:30:34,640 --> 00:30:38,090
just a title or whether I need to

00:30:36,380 --> 00:30:39,860
override everything they get a lot of

00:30:38,090 --> 00:30:42,409
flexibility to it I quite like I think

00:30:39,860 --> 00:30:45,679
it's worth investigating and you get

00:30:42,409 --> 00:30:47,480
this which proofs are I know even less

00:30:45,679 --> 00:30:49,220
of our styling based eval pages and the

00:30:47,480 --> 00:30:51,380
same people do

00:30:49,220 --> 00:30:53,600
these prices were correct two days ago

00:30:51,380 --> 00:30:56,600
don't base your investment decisions on

00:30:53,600 --> 00:31:01,280
them so one Bitcoin is worth roughly

00:30:56,600 --> 00:31:02,510
eight at $9,000 ish today unless of

00:31:01,280 --> 00:31:04,659
course there's been a massive spike in

00:31:02,510 --> 00:31:07,250
lost and half but I don't know about

00:31:04,659 --> 00:31:08,809
great we now have over working website

00:31:07,250 --> 00:31:11,120
you now know how to build an expressive

00:31:08,809 --> 00:31:15,429
site it's not particularly complicated

00:31:11,120 --> 00:31:20,360
how cool is that very good overview I

00:31:15,429 --> 00:31:22,940
said that expressive was a had a wider

00:31:20,360 --> 00:31:25,010
ecosystem had components from the wider

00:31:22,940 --> 00:31:27,890
Zend ecosystem so let's look a little

00:31:25,010 --> 00:31:30,770
bit about ideas for components we're

00:31:27,890 --> 00:31:32,630
going to add the ability to enter our

00:31:30,770 --> 00:31:35,150
own amount in pounds and find out how

00:31:32,630 --> 00:31:38,480
many bitcoins they are this time we need

00:31:35,150 --> 00:31:41,090
lots of decimal places so hundred twenty

00:31:38,480 --> 00:31:45,289
three pounds and forty five pence

00:31:41,090 --> 00:31:46,090
is worth point zero two zero zero one

00:31:45,289 --> 00:31:48,710
one Bitcoin

00:31:46,090 --> 00:31:52,100
there's not many Bitcoin for a hundred

00:31:48,710 --> 00:31:57,110
crews how do we do that we need a forum

00:31:52,100 --> 00:31:58,850
on our webpage that's bed easy I don't

00:31:57,110 --> 00:32:01,429
know about HTML but even I can write a

00:31:58,850 --> 00:32:02,990
forum in HTML so this is where I

00:32:01,429 --> 00:32:05,929
recommend you write a forum in your web

00:32:02,990 --> 00:32:13,820
sites use HTML it's quite good at it so

00:32:05,929 --> 00:32:15,710
we create a forum a little bit of twig

00:32:13,820 --> 00:32:17,870
with don't brace brace a mountain there

00:32:15,710 --> 00:32:19,730
so we have a label we have our input

00:32:17,870 --> 00:32:20,900
filter we have our button and then

00:32:19,730 --> 00:32:23,870
finally we're going to output our

00:32:20,900 --> 00:32:27,049
results so number formats six decimal

00:32:23,870 --> 00:32:32,270
points this time and now we need to

00:32:27,049 --> 00:32:35,659
validate the data you're not going to

00:32:32,270 --> 00:32:38,679
accept any data from a user in any form

00:32:35,659 --> 00:32:43,760
whatsoever without validating it

00:32:38,679 --> 00:32:48,200
do not ever trust a user they are

00:32:43,760 --> 00:32:50,750
untrustworthy fundamentally send input

00:32:48,200 --> 00:32:52,880
filter is quite a good input and

00:32:50,750 --> 00:32:55,789
filtering filtering and validation

00:32:52,880 --> 00:32:57,950
component so that's one we'll use there

00:32:55,789 --> 00:33:00,020
are other ones out there I use this one

00:32:57,950 --> 00:33:01,570
even when I'm writing applications in

00:33:00,020 --> 00:33:03,430
other frameworks because I think

00:33:01,570 --> 00:33:05,350
someone's remarkably well it's quite a

00:33:03,430 --> 00:33:08,440
simple system we have our untrusted data

00:33:05,350 --> 00:33:10,060
we pass it through a filtering layer we

00:33:08,440 --> 00:33:13,270
pass it through a validation layer and

00:33:10,060 --> 00:33:15,040
if it is valid we can use that data and

00:33:13,270 --> 00:33:21,730
if it's not valid we will reject that

00:33:15,040 --> 00:33:24,010
data we're going to install it via

00:33:21,730 --> 00:33:25,930
composer because that's how we install

00:33:24,010 --> 00:33:28,150
every component in the world so we're

00:33:25,930 --> 00:33:30,190
going to do that and because it's a Zen

00:33:28,150 --> 00:33:32,920
framework component or a sink component

00:33:30,190 --> 00:33:36,370
we are aware that you are installed in

00:33:32,920 --> 00:33:38,320
it into an expressive application so

00:33:36,370 --> 00:33:40,480
again we hook into the magic of composer

00:33:38,320 --> 00:33:41,350
and we thank Jordan Niels for the extra

00:33:40,480 --> 00:33:42,940
work they did for us

00:33:41,350 --> 00:33:46,210
well not for us personally but we're

00:33:42,940 --> 00:33:48,160
leveraging it where we can ask you do

00:33:46,210 --> 00:33:49,870
you want to automatically install the

00:33:48,160 --> 00:33:51,520
conflict provider enjoy expressive

00:33:49,870 --> 00:33:54,910
application and you will not say yes

00:33:51,520 --> 00:33:56,410
which is a default because that's what

00:33:54,910 --> 00:33:58,690
you will want to do so we will

00:33:56,410 --> 00:34:00,580
automatically configure the Zen

00:33:58,690 --> 00:34:02,140
component into your expressive

00:34:00,580 --> 00:34:04,720
application for you it will

00:34:02,140 --> 00:34:06,820
automatically register the dependency

00:34:04,720 --> 00:34:08,740
injection factories required and any

00:34:06,820 --> 00:34:13,060
configuration required without you

00:34:08,740 --> 00:34:14,890
having to think about it and we create

00:34:13,060 --> 00:34:16,180
an input filter input filters look

00:34:14,890 --> 00:34:21,310
something like this

00:34:16,180 --> 00:34:23,320
they're basically an array the user

00:34:21,310 --> 00:34:25,690
factory as you can imagine a factory

00:34:23,320 --> 00:34:28,030
creates a new instance so our factory

00:34:25,690 --> 00:34:31,690
will create a input filter object for us

00:34:28,030 --> 00:34:34,540
and we pass in an associative array the

00:34:31,690 --> 00:34:37,720
key of each element in the array matches

00:34:34,540 --> 00:34:40,720
the name of your form elements or if

00:34:37,720 --> 00:34:42,220
you're doing an API the name of the keys

00:34:40,720 --> 00:34:44,920
in your JSON payload that you're

00:34:42,220 --> 00:34:48,340
accepting then you have your filters

00:34:44,920 --> 00:34:52,990
filters are destructive they normalize

00:34:48,340 --> 00:34:55,300
the data if you're doing telephone

00:34:52,990 --> 00:34:57,430
numbers this is where you remove the

00:34:55,300 --> 00:34:59,710
spaces that the user has added or the

00:34:57,430 --> 00:35:01,540
brackets or the hyphens or whatever else

00:34:59,710 --> 00:35:03,130
they're added just remove them because

00:35:01,540 --> 00:35:07,110
you don't care about them but the user

00:35:03,130 --> 00:35:11,530
types them in so we can remove unneeded

00:35:07,110 --> 00:35:14,040
information from the user I'm asking for

00:35:11,530 --> 00:35:15,990
a number so I go convert it

00:35:14,040 --> 00:35:20,990
number two int is a really really bad

00:35:15,990 --> 00:35:24,720
choice mangy and then I can validate it

00:35:20,990 --> 00:35:27,690
validation is a yes/no question does

00:35:24,720 --> 00:35:30,120
this data meet this criteria if it

00:35:27,690 --> 00:35:32,310
doesn't we throw it away we reject it

00:35:30,120 --> 00:35:34,230
I'm going to say it's a great is a

00:35:32,310 --> 00:35:37,260
number that we provided the amount

00:35:34,230 --> 00:35:40,730
greater than zero we're not doing

00:35:37,260 --> 00:35:44,220
negative numbers in this application

00:35:40,730 --> 00:35:45,930
this processor we looked at before in

00:35:44,220 --> 00:35:48,480
terms of the flow diagram the key thing

00:35:45,930 --> 00:35:50,790
see is we call is valid you know point

00:35:48,480 --> 00:35:53,850
three and then we have to retrieve the

00:35:50,790 --> 00:35:57,480
sanitized data using get values so code

00:35:53,850 --> 00:35:59,280
wise it looks something like this so

00:35:57,480 --> 00:36:03,270
back into our action there's our handle

00:35:59,280 --> 00:36:07,040
method we retrieved the data from the

00:36:03,270 --> 00:36:09,480
user using the standard PS our seven

00:36:07,040 --> 00:36:11,280
methods get query parameters in this

00:36:09,480 --> 00:36:14,670
case because I would like to have URL

00:36:11,280 --> 00:36:17,820
that my users can email around if it's

00:36:14,670 --> 00:36:19,380
post data I would use get past body so

00:36:17,820 --> 00:36:20,640
we know where our data came from did it

00:36:19,380 --> 00:36:23,520
come from the query did it come from the

00:36:20,640 --> 00:36:25,830
post data set it into my input filter

00:36:23,520 --> 00:36:29,850
and then I can call this valid is this

00:36:25,830 --> 00:36:32,700
data valid or not if it is then I'm

00:36:29,850 --> 00:36:35,070
going to retrieve the data using get

00:36:32,700 --> 00:36:36,690
values and then I'm going to send it off

00:36:35,070 --> 00:36:39,270
to my service to do all the real work

00:36:36,690 --> 00:36:46,320
it's all the real work is still done in

00:36:39,270 --> 00:36:48,630
my domain layer and then I can if on a

00:36:46,320 --> 00:36:50,610
failure sorry if the data is invalid

00:36:48,630 --> 00:36:53,610
it's minus three or something like that

00:36:50,610 --> 00:36:55,530
I can retrieve the error messages using

00:36:53,610 --> 00:36:58,170
get messages and then I can display

00:36:55,530 --> 00:37:03,980
locally user and say you messed up try

00:36:58,170 --> 00:37:03,980
again that's it

00:37:04,290 --> 00:37:11,090
so in some ways what I've told you today

00:37:07,580 --> 00:37:14,130
if any expressive is a micro framework

00:37:11,090 --> 00:37:16,920
it's a future of the Zen components

00:37:14,130 --> 00:37:18,840
project we still have send NBC if you

00:37:16,920 --> 00:37:21,660
are used to the design framework 2-0 a

00:37:18,840 --> 00:37:24,360
three way of working that is not going

00:37:21,660 --> 00:37:28,410
away it will be supported for a long

00:37:24,360 --> 00:37:30,480
time ahead and there's a gentleman

00:37:28,410 --> 00:37:34,560
circus who is currently working really

00:37:30,480 --> 00:37:36,600
hard to modernize our monolithic

00:37:34,560 --> 00:37:40,320
framework so that is still in existence

00:37:36,600 --> 00:37:43,530
I think Zend expressive and the micro

00:37:40,320 --> 00:37:47,250
framework paradigm is way more relevant

00:37:43,530 --> 00:37:49,740
today I think you are way more likely to

00:37:47,250 --> 00:37:52,350
be creating micro services and smaller

00:37:49,740 --> 00:37:54,090
websites going forward we're gonna see a

00:37:52,350 --> 00:37:59,130
lot more use of JavaScript on the front

00:37:54,090 --> 00:38:01,770
end that is using XHTML requests X HTTP

00:37:59,130 --> 00:38:04,740
requests sorry to talk to back-end

00:38:01,770 --> 00:38:06,660
services and micro framework is a far

00:38:04,740 --> 00:38:08,940
better way to implement those sort of

00:38:06,660 --> 00:38:12,200
websites so expressive is really good at

00:38:08,940 --> 00:38:15,120
this it comes with the Rooter comes with

00:38:12,200 --> 00:38:17,610
the I container the DI container is

00:38:15,120 --> 00:38:21,020
really important you should be using di

00:38:17,610 --> 00:38:24,900
nowadays because it simplifies testing

00:38:21,020 --> 00:38:27,810
it also carries use it encourages you to

00:38:24,900 --> 00:38:30,630
split out your business logic from your

00:38:27,810 --> 00:38:34,380
controller actions and that means that

00:38:30,630 --> 00:38:37,380
your main code base will and can outlast

00:38:34,380 --> 00:38:38,700
your framework usage they'd not type of

00:38:37,380 --> 00:38:41,580
app you write the sort of apps are I

00:38:38,700 --> 00:38:44,760
write I've changed frameworks but kept

00:38:41,580 --> 00:38:48,390
all the core logic before now separation

00:38:44,760 --> 00:38:49,920
out is really important because send

00:38:48,390 --> 00:38:52,880
expressive comes from the same framework

00:38:49,920 --> 00:38:55,580
community we already have a wide

00:38:52,880 --> 00:38:58,890
ecosystem got a lot of other components

00:38:55,580 --> 00:39:01,140
that are useful for creating websites

00:38:58,890 --> 00:39:03,540
and api's if you're creating api's I

00:39:01,140 --> 00:39:06,150
highly recommend you look at the problem

00:39:03,540 --> 00:39:08,280
API component and you look at the whole

00:39:06,150 --> 00:39:12,570
component they make generate in

00:39:08,280 --> 00:39:15,050
compliant and nice to use ap is so much

00:39:12,570 --> 00:39:15,050
easier

00:39:15,240 --> 00:39:19,800
particularly the error-handling one one

00:39:18,240 --> 00:39:22,410
pet peeve of mine is if you're gonna

00:39:19,800 --> 00:39:27,020
write an API please make sure you supply

00:39:22,410 --> 00:39:29,670
the error messages in Jason not in HTML

00:39:27,020 --> 00:39:32,130
this isn't difficult stuff it's a

00:39:29,670 --> 00:39:34,230
component install away with and

00:39:32,130 --> 00:39:36,420
expressive composer requires an

00:39:34,230 --> 00:39:40,470
framework and expressive problem details

00:39:36,420 --> 00:39:42,600
and your API will always return Jason if

00:39:40,470 --> 00:39:45,210
that's what the client has asked for or

00:39:42,600 --> 00:39:47,790
XML because it's in Nice standard I

00:39:45,210 --> 00:39:49,830
highly recommend you take advantage of

00:39:47,790 --> 00:39:52,590
the wider ecosystem with your micro

00:39:49,830 --> 00:39:54,990
framework you get to pick the components

00:39:52,590 --> 00:39:56,630
that work best for you so we see a lot

00:39:54,990 --> 00:39:58,860
of expressive applications that use

00:39:56,630 --> 00:40:00,750
illuminate an eloquent for their

00:39:58,860 --> 00:40:03,630
database or use doctrine for those X

00:40:00,750 --> 00:40:05,369
base you're not tied to use in send dB

00:40:03,630 --> 00:40:08,340
yes because it comes from the same

00:40:05,369 --> 00:40:11,040
project use the components that work

00:40:08,340 --> 00:40:15,090
best for you that's what the expressive

00:40:11,040 --> 00:40:18,330
gives you learn a little bit more about

00:40:15,090 --> 00:40:21,000
this the documentation is on Doc's and

00:40:18,330 --> 00:40:22,410
framework table fairly obviously the

00:40:21,000 --> 00:40:25,200
actual code base if you were to actually

00:40:22,410 --> 00:40:27,090
look at the code is on github I write

00:40:25,200 --> 00:40:30,780
about this stuff so I could rather calm

00:40:27,090 --> 00:40:32,850
in the send expressive category there's

00:40:30,780 --> 00:40:35,250
Mpho where people will block and if they

00:40:32,850 --> 00:40:37,770
do it's on frame with CENTCOM such block

00:40:35,250 --> 00:40:39,240
and if you actually want to book yeah

00:40:37,770 --> 00:40:41,430
I've heard the books apparently they're

00:40:39,240 --> 00:40:43,260
still a thing then mat cetera written

00:40:41,430 --> 00:40:45,619
send expressive essentials which is

00:40:43,260 --> 00:40:45,619

YouTube URL: https://www.youtube.com/watch?v=koW1titx9cU


