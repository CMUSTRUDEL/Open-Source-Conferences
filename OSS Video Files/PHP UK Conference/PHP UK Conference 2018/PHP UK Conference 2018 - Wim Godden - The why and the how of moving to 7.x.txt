Title: PHP UK Conference 2018 - Wim Godden - The why and the how of moving to 7.x
Publication date: 2018-03-28
Playlist: PHP UK Conference 2018
Description: 
	With PHP 7.2 recently released and PHP 5.3 and 5.4 still accounting for over 40% of all production environments, it's time to paint a clear picture on not just why everyone should move to 7.0 (or 7.1), but on how to get code ready for the latest version of PHP. In this talk, we'll look at some handy tools and techniques to ease the migration.
Captions: 
	00:00:02,770 --> 00:00:06,460
obviously we're going to talk about why

00:00:04,810 --> 00:00:10,510
you should move to PHP seven if you

00:00:06,460 --> 00:00:12,700
haven't already and how that process how

00:00:10,510 --> 00:00:16,330
we can help sort of automate that

00:00:12,700 --> 00:00:18,040
process to some extent yeah I've been

00:00:16,330 --> 00:00:19,300
introduced already so I don't have to

00:00:18,040 --> 00:00:23,099
say a whole lot anymore

00:00:19,300 --> 00:00:25,869
I guess I'm from Belgium best known for

00:00:23,099 --> 00:00:29,259
Belgian beer and Belgian chocolate and

00:00:25,869 --> 00:00:31,360
other tasty yummy things and odd-looking

00:00:29,259 --> 00:00:34,570
buildings this is an iron crystal

00:00:31,360 --> 00:00:37,030
magnified sixty five billion times I'm

00:00:34,570 --> 00:00:39,190
from a town very close to Antwerp we

00:00:37,030 --> 00:00:40,890
have a beautiful Abbey and castles and

00:00:39,190 --> 00:00:43,660
stuff like that it's all very nice

00:00:40,890 --> 00:00:46,960
except when we have some snow that's

00:00:43,660 --> 00:00:49,929
what we get then and smack in the middle

00:00:46,960 --> 00:00:51,760
of that I started the company about 17

00:00:49,929 --> 00:00:54,190
years ago now called cube solutions we

00:00:51,760 --> 00:00:57,640
do mostly PHP would be a lot of training

00:00:54,190 --> 00:01:02,079
stuff high scalability things and I've

00:00:57,640 --> 00:01:03,399
been doing open source for 21 year old

00:01:02,079 --> 00:01:05,620
okay

00:01:03,399 --> 00:01:07,329
and I've written the tool PHP

00:01:05,620 --> 00:01:10,270
compatibility which I'm going to talk

00:01:07,329 --> 00:01:11,710
about as well today I used to write a

00:01:10,270 --> 00:01:14,380
tool called open X which is an

00:01:11,710 --> 00:01:16,329
advertising server and I've been doing

00:01:14,380 --> 00:01:22,479
talks like these for the last couple of

00:01:16,329 --> 00:01:24,880
years so this this talk is in two parts

00:01:22,479 --> 00:01:27,149
part one is why should you upgrade so

00:01:24,880 --> 00:01:32,380
I'm gonna talk about what's new in PHP

00:01:27,149 --> 00:01:36,399
7.0 27.2 at this point these are not

00:01:32,380 --> 00:01:37,960
good reasons to upgrade it's cool to

00:01:36,399 --> 00:01:39,280
have the latest version yes it is cool

00:01:37,960 --> 00:01:42,250
but that's not a good reason to upgrade

00:01:39,280 --> 00:01:44,979
and especially not a good reason to

00:01:42,250 --> 00:01:48,490
upgrade is to annoy your sis at mins but

00:01:44,979 --> 00:01:50,350
that kind of makes sense part two I'm

00:01:48,490 --> 00:01:52,930
gonna talk about how to upgrade and how

00:01:50,350 --> 00:01:55,090
to automate some of that process don't

00:01:52,930 --> 00:01:57,009
expect me to provide some magical

00:01:55,090 --> 00:01:59,560
solution here we can't solve everything

00:01:57,009 --> 00:02:01,600
but you'll notice that a lot of the

00:01:59,560 --> 00:02:04,020
stuff can be automated a lot of the

00:02:01,600 --> 00:02:06,340
issues can be detected automatically

00:02:04,020 --> 00:02:08,170
I'd like to start with a show of hands

00:02:06,340 --> 00:02:10,300
I'd like to know who is running which

00:02:08,170 --> 00:02:10,810
version in production who is still

00:02:10,300 --> 00:02:12,880
running

00:02:10,810 --> 00:02:16,030
peach p3 or peach p4 anywhere in

00:02:12,880 --> 00:02:19,060
production yeah there is always at least

00:02:16,030 --> 00:02:20,650
one there's two yes and it kind of makes

00:02:19,060 --> 00:02:24,420
sense because they're still code out

00:02:20,650 --> 00:02:26,740
there that was built by someone way back

00:02:24,420 --> 00:02:30,430
who is probably not working there

00:02:26,740 --> 00:02:33,130
anymore who's maybe dead even yeah I

00:02:30,430 --> 00:02:36,160
mean I've seen it happen

00:02:33,130 --> 00:02:38,319
and yeah the code needs to be maintained

00:02:36,160 --> 00:02:42,569
but nobody dares to touch it

00:02:38,319 --> 00:02:50,310
really who's running $5 in production

00:02:42,569 --> 00:02:51,550
okay 5.1 mm 5.2 couple of hands okay 5.3

00:02:50,310 --> 00:02:57,030
yeah

00:02:51,550 --> 00:02:58,810
more hands 5.4 yes even more five five

00:02:57,030 --> 00:03:07,030
not that many

00:02:58,810 --> 00:03:16,480
five 6s could be expected 6.0 yeah we

00:03:07,030 --> 00:03:20,170
skip that one 7.0 7.1 okay 7.2 8.0 No

00:03:16,480 --> 00:03:21,880
okay so let's I mean you'll you'll

00:03:20,170 --> 00:03:26,170
notice I'm gonna give the actual numbers

00:03:21,880 --> 00:03:27,549
now that come from w3 Tech which is

00:03:26,170 --> 00:03:30,010
actually a very nice site it gives you

00:03:27,549 --> 00:03:31,540
an overview of not just PHP but a lot of

00:03:30,010 --> 00:03:34,390
other technologies now which versions

00:03:31,540 --> 00:03:37,269
are actually running how exactly they

00:03:34,390 --> 00:03:40,150
gather their their data comes from you

00:03:37,269 --> 00:03:43,470
can find that information on the site so

00:03:40,150 --> 00:03:48,370
it turns out I looked at the numbers in

00:03:43,470 --> 00:03:51,130
2013 2015 and now and so pitch before is

00:03:48,370 --> 00:03:54,130
luckily dropping but it's still almost

00:03:51,130 --> 00:03:56,350
1% which means if you have a hundred web

00:03:54,130 --> 00:03:57,940
serve web sites running about one

00:03:56,350 --> 00:04:01,200
percent of them are still running peach

00:03:57,940 --> 00:04:04,540
before which is kind of scary actually

00:04:01,200 --> 00:04:07,090
PHP 5 still makes up the bulk eighty

00:04:04,540 --> 00:04:09,549
seven point two percent of all web sites

00:04:07,090 --> 00:04:11,890
are still running PHP web sites are

00:04:09,549 --> 00:04:14,530
still running on PHP five and the

00:04:11,890 --> 00:04:18,850
biggest chunk of that is five three five

00:04:14,530 --> 00:04:22,780
four and five five oh five six has made

00:04:18,850 --> 00:04:27,010
a major leap now recently PHP seven

00:04:22,780 --> 00:04:29,030
accounts for only 12% but it's yeah it's

00:04:27,010 --> 00:04:33,390
getting there gradually of course

00:04:29,030 --> 00:04:35,130
so these are the main whirring ones five

00:04:33,390 --> 00:04:37,680
two five three five four have been

00:04:35,130 --> 00:04:40,200
end-of-life for a very long time but

00:04:37,680 --> 00:04:44,640
still they account for a massive amount

00:04:40,200 --> 00:04:47,250
of PHP installations about 40 something

00:04:44,640 --> 00:04:51,360
percent fifty percent almost of all PHP

00:04:47,250 --> 00:04:54,420
five installations main reason for that

00:04:51,360 --> 00:04:58,910
is for example Debian squeezie the what

00:04:54,420 --> 00:05:02,460
is it 7.0 version is stuck on 5.33 which

00:04:58,910 --> 00:05:04,050
accounts for 12% of that and they

00:05:02,460 --> 00:05:07,140
provided no patches with their default

00:05:04,050 --> 00:05:12,600
distribution so no upgrades that's a big

00:05:07,140 --> 00:05:15,300
issue so before I go and talk about 700

00:05:12,600 --> 00:05:17,400
let's have a very quick recap or one

00:05:15,300 --> 00:05:20,010
slide recap of what we've actually done

00:05:17,400 --> 00:05:22,770
in five five three five six because

00:05:20,010 --> 00:05:24,960
you'll notice that a lot of has evolved

00:05:22,770 --> 00:05:27,360
in PHP but some of the stuff you might

00:05:24,960 --> 00:05:29,910
take for granted now but this is what we

00:05:27,360 --> 00:05:31,970
went through from 5 3 to 5 6 so we did

00:05:29,910 --> 00:05:35,730
namespaces that was a big one of course

00:05:31,970 --> 00:05:37,920
we wouldn't have most modern frameworks

00:05:35,730 --> 00:05:40,020
today use namespaces so we wouldn't have

00:05:37,920 --> 00:05:42,900
all that functionality in their late

00:05:40,020 --> 00:05:45,360
static binding closures of course a big

00:05:42,900 --> 00:05:49,130
one better garbage collection that was

00:05:45,360 --> 00:05:51,750
really useful in PHP 5 for go-to well

00:05:49,130 --> 00:05:53,550
yeah we can we can argue about that

00:05:51,750 --> 00:05:56,100
whether it's useful or not but it does

00:05:53,550 --> 00:05:56,480
serve a purpose every now every now and

00:05:56,100 --> 00:06:00,270
then

00:05:56,480 --> 00:06:04,260
MySQL native driver performance gain

00:06:00,270 --> 00:06:06,360
yeah PHP 5 4 & 5 5 5 5 had massive

00:06:04,260 --> 00:06:08,460
performance gains this short array

00:06:06,360 --> 00:06:11,160
syntax which I think everybody is

00:06:08,460 --> 00:06:13,260
gradually switching to finally traits

00:06:11,160 --> 00:06:15,240
were introduced a built-in web server

00:06:13,260 --> 00:06:17,720
that we can use for development which is

00:06:15,240 --> 00:06:20,850
kind of nice as well

00:06:17,720 --> 00:06:22,830
binary notation was introduced we

00:06:20,850 --> 00:06:25,140
finally got rid of register Global's

00:06:22,830 --> 00:06:27,150
magic word CPC and the thing that was

00:06:25,140 --> 00:06:31,710
actually not really safe which was

00:06:27,150 --> 00:06:33,420
called safe mode we have generators now

00:06:31,710 --> 00:06:35,070
and we have a nice password hash

00:06:33,420 --> 00:06:37,310
function so that we don't have to write

00:06:35,070 --> 00:06:39,690
our own hashing function anymore

00:06:37,310 --> 00:06:41,790
anyone's still using their own functions

00:06:39,690 --> 00:06:44,190
please switch to password hash

00:06:41,790 --> 00:06:45,750
and we have a built-in op cache so we

00:06:44,190 --> 00:06:47,970
don't need to install a PC or a

00:06:45,750 --> 00:06:50,400
accelerator and so on it's all built in

00:06:47,970 --> 00:06:53,580
so that was a lot of stuff that we got

00:06:50,400 --> 00:06:55,380
in the five dot X release but of course

00:06:53,580 --> 00:06:58,410
it was time to move forward

00:06:55,380 --> 00:07:00,630
then again 5.6 has been out for a very

00:06:58,410 --> 00:07:02,910
long time and a lot of people are still

00:07:00,630 --> 00:07:05,730
not using it forty nine point two

00:07:02,910 --> 00:07:11,610
percent of all PHP 5 installations are

00:07:05,730 --> 00:07:13,440
still 5 5 as are still 5 4 and B 4 which

00:07:11,610 --> 00:07:15,120
means you cannot run Symphony 3 which

00:07:13,440 --> 00:07:18,270
means you cannot run Zend framework 3

00:07:15,120 --> 00:07:21,540
and many other frameworks on it that's

00:07:18,270 --> 00:07:23,490
kind of a problem for developers so in a

00:07:21,540 --> 00:07:25,500
lot of companies production servers are

00:07:23,490 --> 00:07:27,780
maintained by system engineers and they

00:07:25,500 --> 00:07:31,380
don't like upgrading or they don't like

00:07:27,780 --> 00:07:33,600
touching something that's not broken and

00:07:31,380 --> 00:07:35,550
so yeah it's becoming a bigger and

00:07:33,600 --> 00:07:36,930
bigger problem for PHP developers if

00:07:35,550 --> 00:07:41,250
they cannot use the latest frameworks

00:07:36,930 --> 00:07:43,980
obviously so let's talk about PHP 7 what

00:07:41,250 --> 00:07:46,350
has changed well we have new features

00:07:43,980 --> 00:07:47,990
we'll talk about those we'll have a look

00:07:46,350 --> 00:07:50,240
at some performance and memory usage

00:07:47,990 --> 00:07:52,050
improvements we have a lot of

00:07:50,240 --> 00:07:54,780
consistency problems that have been

00:07:52,050 --> 00:07:56,700
resolved and a lot of things have been

00:07:54,780 --> 00:08:00,150
removed or deprecated and will be

00:07:56,700 --> 00:08:03,630
removed in future versions let's talk

00:08:00,150 --> 00:08:07,200
about new things one of the big things

00:08:03,630 --> 00:08:09,630
scalar type scalar typing and return

00:08:07,200 --> 00:08:12,390
type declarations so what you can do now

00:08:09,630 --> 00:08:15,000
is you can have a function sum function

00:08:12,390 --> 00:08:16,740
and then instead of having just your

00:08:15,000 --> 00:08:19,620
parameters to that function you can now

00:08:16,740 --> 00:08:21,840
specify hey this is an int or this is a

00:08:19,620 --> 00:08:25,590
string and I'm going to have this

00:08:21,840 --> 00:08:27,450
function return a boolean this has been

00:08:25,590 --> 00:08:27,840
a long time coming some people didn't

00:08:27,450 --> 00:08:30,690
like it

00:08:27,840 --> 00:08:32,580
some people protested against it but we

00:08:30,690 --> 00:08:35,550
finally have it so we have new scalar

00:08:32,580 --> 00:08:37,110
types int float bool and string and we

00:08:35,550 --> 00:08:38,880
can have return types that can be

00:08:37,110 --> 00:08:41,250
specified and of course they can be one

00:08:38,880 --> 00:08:43,290
of those scalar types as well so this is

00:08:41,250 --> 00:08:45,450
an extension on top of the fact that you

00:08:43,290 --> 00:08:48,630
could specify objects and arrays in the

00:08:45,450 --> 00:08:52,560
past now we can also have these new

00:08:48,630 --> 00:08:55,350
scalar types now there is still PHP

00:08:52,560 --> 00:08:59,220
always was a weekly

00:08:55,350 --> 00:09:02,250
language and there is still a choice you

00:08:59,220 --> 00:09:05,060
can make you can still use these as week

00:09:02,250 --> 00:09:08,700
so you can say okay I have that I

00:09:05,060 --> 00:09:11,280
parameter that first parameter it's an

00:09:08,700 --> 00:09:14,280
inch yes but you can still give it a

00:09:11,280 --> 00:09:16,500
float what will happen is PHP will just

00:09:14,280 --> 00:09:18,600
convert it to an int when the function

00:09:16,500 --> 00:09:20,040
is called but it's not going to complain

00:09:18,600 --> 00:09:22,320
it's not going to tell you hey you're

00:09:20,040 --> 00:09:25,710
giving me a float but I'm expecting an

00:09:22,320 --> 00:09:27,120
int it's just going to say okay I'm just

00:09:25,710 --> 00:09:31,860
going to convert it I'm just going to

00:09:27,120 --> 00:09:33,870
curse it so PHP five style but it has it

00:09:31,860 --> 00:09:36,840
is actually going to convert it when the

00:09:33,870 --> 00:09:38,970
function is called the other or the

00:09:36,840 --> 00:09:43,020
alternative is using stronger strict

00:09:38,970 --> 00:09:46,860
typing in which case you need to define

00:09:43,020 --> 00:09:49,890
it at the top of the file now when I say

00:09:46,860 --> 00:09:52,650
the file I mean every single file where

00:09:49,890 --> 00:09:55,650
you want to use strict typing to do that

00:09:52,650 --> 00:09:58,800
you declare strict types equals one that

00:09:55,650 --> 00:10:02,160
means if you have let's say an index dot

00:09:58,800 --> 00:10:05,040
PHP and you include a file in there if

00:10:02,160 --> 00:10:07,380
that included file has declared strict

00:10:05,040 --> 00:10:10,410
types equals one it's only valid for

00:10:07,380 --> 00:10:10,740
that file if you include another file in

00:10:10,410 --> 00:10:13,020
it

00:10:10,740 --> 00:10:14,850
it's still only valid for that file and

00:10:13,020 --> 00:10:17,310
not the file you include within that

00:10:14,850 --> 00:10:20,310
file so that's kind of important to

00:10:17,310 --> 00:10:24,180
realize that if you declare strict types

00:10:20,310 --> 00:10:27,960
and you use the wrong type it's going to

00:10:24,180 --> 00:10:31,290
throw a type error which is a fatal

00:10:27,960 --> 00:10:34,020
error now in PHP five any fatal error

00:10:31,290 --> 00:10:35,180
would end the program as we'll see in a

00:10:34,020 --> 00:10:37,500
minute

00:10:35,180 --> 00:10:39,990
PHP seven has changed error handling

00:10:37,500 --> 00:10:42,990
strategy and you can actually catch a

00:10:39,990 --> 00:10:45,450
lot of the fatal errors returning null

00:10:42,990 --> 00:10:47,610
is actually also invalid if you specify

00:10:45,450 --> 00:10:49,590
that a bull will be returned then

00:10:47,610 --> 00:10:53,040
returning null will give you a type

00:10:49,590 --> 00:10:54,960
error as well so if you say I want to

00:10:53,040 --> 00:10:56,610
return an int I knew you return an int

00:10:54,960 --> 00:10:58,410
or you're going to get an error there is

00:10:56,610 --> 00:11:02,850
a way around that we'll see that in a

00:10:58,410 --> 00:11:05,910
minute another new feature the null

00:11:02,850 --> 00:11:09,300
coalescing operator in PHP five if you

00:11:05,910 --> 00:11:13,410
wanted to get something from

00:11:09,300 --> 00:11:15,090
get or post and use that information but

00:11:13,410 --> 00:11:16,770
you weren't sure if the information was

00:11:15,090 --> 00:11:18,660
actually going to be there you would

00:11:16,770 --> 00:11:20,820
have to use it set and then use the

00:11:18,660 --> 00:11:23,880
ternary operator and then use the

00:11:20,820 --> 00:11:26,520
parameter and then some default in case

00:11:23,880 --> 00:11:28,650
it wasn't there in peach v7 we can make

00:11:26,520 --> 00:11:32,640
that a little bit shorter two question

00:11:28,650 --> 00:11:36,990
marks so it's going to use the parameter

00:11:32,640 --> 00:11:39,420
from the get string or it's going to use

00:11:36,990 --> 00:11:41,340
the default and you can change them so

00:11:39,420 --> 00:11:43,890
you can say okay I'm gonna try from get

00:11:41,340 --> 00:11:47,640
I'm gonna try from post and then I'm

00:11:43,890 --> 00:11:50,070
gonna use the default so useful feature

00:11:47,640 --> 00:11:54,060
a little bit less typing which we all

00:11:50,070 --> 00:11:57,720
like I had to put a rocket up there

00:11:54,060 --> 00:12:01,260
because another new feature is the

00:11:57,720 --> 00:12:04,340
spaceship operator and if you look

00:12:01,260 --> 00:12:09,720
carefully it looks a little bit like

00:12:04,340 --> 00:12:11,730
what are they called from star wars tie

00:12:09,720 --> 00:12:13,080
fighter thank you it looks a little bit

00:12:11,730 --> 00:12:15,870
like that which is why it's called a

00:12:13,080 --> 00:12:18,780
spaceship operator what does it do it

00:12:15,870 --> 00:12:22,830
compares expressions it's gonna return

00:12:18,780 --> 00:12:26,040
minus 1 0 or 1 so easiest to illustrate

00:12:22,830 --> 00:12:28,110
with an example of course if you compare

00:12:26,040 --> 00:12:29,970
one with one you're gonna get 0 because

00:12:28,110 --> 00:12:33,570
there is no difference between the left

00:12:29,970 --> 00:12:35,970
side and the right side of the expo if

00:12:33,570 --> 00:12:38,550
you compare 1 and 3 you're gonna get

00:12:35,970 --> 00:12:41,940
minus 1 because the left side is smaller

00:12:38,550 --> 00:12:43,860
than the right side 5 & 2 you're gonna

00:12:41,940 --> 00:12:47,280
get one because the left side is larger

00:12:43,860 --> 00:12:50,610
the same goes for strings a n a gives

00:12:47,280 --> 00:12:53,160
you 0 a and Z gives you minus 1 z n a

00:12:50,610 --> 00:12:54,540
gives you 1 it also works on arrays I

00:12:53,160 --> 00:12:58,170
don't have an example of it here but

00:12:54,540 --> 00:13:00,870
it's going to compare arrays one element

00:12:58,170 --> 00:13:02,610
at a time if you give it a longer string

00:13:00,870 --> 00:13:04,620
it's going to compare one character at a

00:13:02,610 --> 00:13:06,600
time until it finds a difference it

00:13:04,620 --> 00:13:09,960
finds no difference it's going to return

00:13:06,600 --> 00:13:15,360
0 of course so this is quite useful in

00:13:09,960 --> 00:13:17,910
many cases mostly in my opinion for for

00:13:15,360 --> 00:13:19,950
things that are not too complicated I

00:13:17,910 --> 00:13:22,520
don't personally use it for anything

00:13:19,950 --> 00:13:22,520
like a race

00:13:22,890 --> 00:13:28,750
another new feature in peace be $7.00 is

00:13:25,660 --> 00:13:31,480
the hmm Unicode code point escape syntax

00:13:28,750 --> 00:13:34,210
that's a very complicated thing to

00:13:31,480 --> 00:13:37,600
basically say that you can use a

00:13:34,210 --> 00:13:40,570
hexadecimal string and it will convert

00:13:37,600 --> 00:13:42,520
that hexadecimal string into UDV utf-8

00:13:40,570 --> 00:13:45,790
double coated strings so for example

00:13:42,520 --> 00:13:53,640
echo backslash you curly brace two six

00:13:45,790 --> 00:13:56,380
one five will output a coffee cup nice

00:13:53,640 --> 00:13:57,430
this one I particularly like and it's

00:13:56,380 --> 00:13:58,960
it's something that you don't see

00:13:57,430 --> 00:14:02,560
mentioned when people talk about PHP

00:13:58,960 --> 00:14:05,890
seven but if you have to unsee realized

00:14:02,560 --> 00:14:07,450
data coming from some API call or you

00:14:05,890 --> 00:14:09,220
stored something in the database or

00:14:07,450 --> 00:14:10,750
someone else stored something in the

00:14:09,220 --> 00:14:14,050
database and you need to work with that

00:14:10,750 --> 00:14:16,240
data then in many cases you don't know

00:14:14,050 --> 00:14:19,570
what's going to be in there and of

00:14:16,240 --> 00:14:22,660
course you only want to get not only

00:14:19,570 --> 00:14:25,510
valid data but also data that is of the

00:14:22,660 --> 00:14:26,890
types that you really want now uncie

00:14:25,510 --> 00:14:29,890
realizing means you're going to

00:14:26,890 --> 00:14:34,150
initialize classes in many cases and

00:14:29,890 --> 00:14:36,370
there's a new option in the uncie

00:14:34,150 --> 00:14:39,670
realized function that allows you to

00:14:36,370 --> 00:14:41,710
specify which classes are allowed now

00:14:39,670 --> 00:14:44,140
you could use the first one which is

00:14:41,710 --> 00:14:45,430
allowed class as false which kind of

00:14:44,140 --> 00:14:47,980
doesn't make sense because then you're

00:14:45,430 --> 00:14:49,690
telling and serialized yeah

00:14:47,980 --> 00:14:51,970
go and and serialize but don't allow

00:14:49,690 --> 00:14:55,000
anything which makes no sense so you're

00:14:51,970 --> 00:14:57,430
going to get an object of the type PHP

00:14:55,000 --> 00:14:59,740
incomplete class but if for example in

00:14:57,430 --> 00:15:02,590
the second in the second example you use

00:14:59,740 --> 00:15:04,480
allowed classes article in user you know

00:15:02,590 --> 00:15:07,840
that you're only going to get objects of

00:15:04,480 --> 00:15:09,880
the type article user or again beach

00:15:07,840 --> 00:15:12,700
being complete class if someone else

00:15:09,880 --> 00:15:14,800
someone pushed something else into it so

00:15:12,700 --> 00:15:19,680
this is a good way of kind of

00:15:14,800 --> 00:15:19,680
restricting what is being unsee realized

00:15:20,370 --> 00:15:30,250
also 7.0 CSP running G function this is

00:15:27,850 --> 00:15:32,770
a very useful feature to generate random

00:15:30,250 --> 00:15:35,290
data and not just generate random data

00:15:32,770 --> 00:15:38,110
but do it in a way that works

00:15:35,290 --> 00:15:39,880
the same way across all platforms so

00:15:38,110 --> 00:15:41,530
depending on whether your Linux or

00:15:39,880 --> 00:15:44,290
Windows it's gonna use completely

00:15:41,530 --> 00:15:47,050
different different libraries for that

00:15:44,290 --> 00:15:49,090
for example on Linux it might use a

00:15:47,050 --> 00:15:52,720
number of libraries and then fall back

00:15:49,090 --> 00:15:53,920
eventually to dev view random on Windows

00:15:52,720 --> 00:15:55,660
it's going to use two completely other

00:15:53,920 --> 00:15:57,940
libraries but it's going to generate

00:15:55,660 --> 00:16:02,730
random data that's cryptographically

00:15:57,940 --> 00:16:05,470
secure so no messing around with weird

00:16:02,730 --> 00:16:07,740
self-created random stuff there's two

00:16:05,470 --> 00:16:09,880
functions for that there's random bytes

00:16:07,740 --> 00:16:12,420
which you can give a length and it's

00:16:09,880 --> 00:16:16,060
going to produce a number of bytes

00:16:12,420 --> 00:16:18,130
randomly and there's random int which is

00:16:16,060 --> 00:16:27,400
obviously going to create a random ins

00:16:18,130 --> 00:16:29,200
between min and max of course there are

00:16:27,400 --> 00:16:32,380
certain things that are deprecated in

00:16:29,200 --> 00:16:36,100
peach b7 one of them is the peach before

00:16:32,380 --> 00:16:38,290
style constructor get anyone ever build

00:16:36,100 --> 00:16:41,200
PHP code with a peach before style

00:16:38,290 --> 00:16:44,650
constructor yes some people have been

00:16:41,200 --> 00:16:46,600
coding for a very long time or have to

00:16:44,650 --> 00:16:50,280
have to make changes to peach before

00:16:46,600 --> 00:16:52,180
code of course so that's deprecated now

00:16:50,280 --> 00:16:54,040
you can still do it

00:16:52,180 --> 00:16:57,640
it'll so work but it's going to be

00:16:54,040 --> 00:17:00,430
removed in probably PHP 8 the other

00:16:57,640 --> 00:17:03,070
thing you can still do but is deprecated

00:17:00,430 --> 00:17:06,400
and will give you an e deprecated notice

00:17:03,070 --> 00:17:09,370
is when you make a static call to a

00:17:06,400 --> 00:17:11,680
method that is not defined as static you

00:17:09,370 --> 00:17:13,480
can still do it it's not advisable and

00:17:11,680 --> 00:17:19,240
it's going to be removed anyway in the

00:17:13,480 --> 00:17:20,770
future another thing that is modified as

00:17:19,240 --> 00:17:23,890
preg replace no longer supports

00:17:20,770 --> 00:17:27,520
backslash e which was basically telling

00:17:23,890 --> 00:17:30,760
preg replace to do an eval which is kind

00:17:27,520 --> 00:17:33,070
of evil anyway so you have to use preg

00:17:30,760 --> 00:17:35,320
replace callback as an alternative there

00:17:33,070 --> 00:17:38,340
which is if you do it properly

00:17:35,320 --> 00:17:41,110
a little bit safer a little bit better

00:17:38,340 --> 00:17:44,710
so I said before that error handling has

00:17:41,110 --> 00:17:47,380
significantly changed in PHP 7 so most

00:17:44,710 --> 00:17:48,490
fatal errors that you encountered in PHP

00:17:47,380 --> 00:17:52,810
00:17:48,490 --> 00:17:55,120
have now become exceptions in PHP 7 so

00:17:52,810 --> 00:17:58,450
you can actually catch those there's a

00:17:55,120 --> 00:18:00,730
new class called error which means also

00:17:58,450 --> 00:18:02,770
that if your PHP 5 code currently has a

00:18:00,730 --> 00:18:04,720
class called error you will need to

00:18:02,770 --> 00:18:08,320
rename that because it's kind of

00:18:04,720 --> 00:18:11,200
conflict all the error and exception

00:18:08,320 --> 00:18:16,080
classes they implement the throwable

00:18:11,200 --> 00:18:18,340
interface which is interesting to know

00:18:16,080 --> 00:18:21,010
and it's not just an implementation

00:18:18,340 --> 00:18:22,720
detail as we'll see in a minute so when

00:18:21,010 --> 00:18:24,610
you encounter an error in this case

00:18:22,720 --> 00:18:27,520
let's imagine that you have a type error

00:18:24,610 --> 00:18:30,190
because you gave a float where an INT

00:18:27,520 --> 00:18:32,320
was expected the error of is thrown by

00:18:30,190 --> 00:18:34,360
PHP and it will bubble up through all

00:18:32,320 --> 00:18:37,480
the functions method calls that you have

00:18:34,360 --> 00:18:39,970
until it hits a matching cat block and

00:18:37,480 --> 00:18:42,190
then of course the code in that catch

00:18:39,970 --> 00:18:45,070
block is run now if it if it doesn't

00:18:42,190 --> 00:18:46,630
find a matching catch block it's gonna

00:18:45,070 --> 00:18:49,840
go to the default exception error

00:18:46,630 --> 00:18:52,120
handler a default error handler if that

00:18:49,840 --> 00:18:54,790
error handler doesn't exist then it's

00:18:52,120 --> 00:18:56,920
gonna still throw a fatal error so you

00:18:54,790 --> 00:18:59,710
might still get fatal errors if you do

00:18:56,920 --> 00:19:03,250
not properly handle the errors or

00:18:59,710 --> 00:19:05,410
exceptions that are being thrown this is

00:19:03,250 --> 00:19:07,870
probably unreadable at the back but

00:19:05,410 --> 00:19:09,400
these are all the errors and all the

00:19:07,870 --> 00:19:12,280
exceptions the exceptions are pretty

00:19:09,400 --> 00:19:14,410
similar to what we already had in PHP 5

00:19:12,280 --> 00:19:17,320
not a lot of them happen

00:19:14,410 --> 00:19:19,540
I mean some of them have been added but

00:19:17,320 --> 00:19:21,880
the errors are completely brand new so

00:19:19,540 --> 00:19:24,430
we have an arithmetic error with an

00:19:21,880 --> 00:19:26,290
division by zero error we have that type

00:19:24,430 --> 00:19:28,300
error before we have even have a parse

00:19:26,290 --> 00:19:30,670
error which can be called for example if

00:19:28,300 --> 00:19:33,370
you do eval and you provide it with code

00:19:30,670 --> 00:19:37,260
that is actually not correct PHP code

00:19:33,370 --> 00:19:37,260
then it's going to throw a parse error

00:19:37,710 --> 00:19:44,170
so what's important is that if you just

00:19:42,340 --> 00:19:46,840
do catch sorry

00:19:44,170 --> 00:19:49,060
catch and then say exception as the type

00:19:46,840 --> 00:19:51,940
of what you're trying to catch it's not

00:19:49,060 --> 00:19:54,100
going to catch errors in PHP 7 and if

00:19:51,940 --> 00:19:57,670
you do catch error it's not going to

00:19:54,100 --> 00:19:59,500
catch exceptions so the only way to do

00:19:57,670 --> 00:20:01,320
it properly and to have code that works

00:19:59,500 --> 00:20:05,340
in PHP 5 and Peach

00:20:01,320 --> 00:20:08,220
seven is to catch throwable which is the

00:20:05,340 --> 00:20:11,190
interface that both error and exception

00:20:08,220 --> 00:20:12,750
implement but that's not gonna work in

00:20:11,190 --> 00:20:16,200
PHP five so we still have to catch

00:20:12,750 --> 00:20:18,570
exception for PHP five as well it's kind

00:20:16,200 --> 00:20:22,470
of a workaround for as long as we're

00:20:18,570 --> 00:20:25,019
using PHP five and looking at how long

00:20:22,470 --> 00:20:28,350
we're still using peach before in

00:20:25,019 --> 00:20:33,710
production in some places we'll need

00:20:28,350 --> 00:20:36,360
this workaround for a while probably now

00:20:33,710 --> 00:20:40,740
set error handler always allowed you to

00:20:36,360 --> 00:20:42,269
set your own error handling system so

00:20:40,740 --> 00:20:45,600
you would normally write a function

00:20:42,269 --> 00:20:47,700
Handler and then you would assign that

00:20:45,600 --> 00:20:50,820
using set error handler however because

00:20:47,700 --> 00:20:54,240
of the same reasons it doesn't work when

00:20:50,820 --> 00:20:56,639
you give it a parameter exception so if

00:20:54,240 --> 00:20:59,190
you want it to work in PHP five and

00:20:56,639 --> 00:21:01,980
seven you cannot specify a type anymore

00:20:59,190 --> 00:21:03,720
there which is kind of odd because you a

00:21:01,980 --> 00:21:06,120
lot of people have been getting used to

00:21:03,720 --> 00:21:09,330
specifying your type you can't do that

00:21:06,120 --> 00:21:11,399
anymore unless of course you want to say

00:21:09,330 --> 00:21:13,320
oh I don't care about PHP five code I'm

00:21:11,399 --> 00:21:15,120
running everything on PHP seven in that

00:21:13,320 --> 00:21:21,450
case you can again just specify

00:21:15,120 --> 00:21:24,000
throwable another change that might

00:21:21,450 --> 00:21:28,139
cause issues if you migrate code from

00:21:24,000 --> 00:21:31,259
PHP five to PHP seven is the variable

00:21:28,139 --> 00:21:33,779
variable handling this was caused

00:21:31,259 --> 00:21:35,789
actually by the fact that PHP now relies

00:21:33,779 --> 00:21:40,110
on the abstract syntax tree so that's

00:21:35,789 --> 00:21:45,240
basically when PHP is when PHP code is

00:21:40,110 --> 00:21:47,669
interpreted and turn into op codes it's

00:21:45,240 --> 00:21:48,990
going to build an entire tree of what

00:21:47,669 --> 00:21:52,620
the code looks like you can actually

00:21:48,990 --> 00:21:54,570
retrieve that from PHP now and have a

00:21:52,620 --> 00:21:58,379
look at how exactly the code is

00:21:54,570 --> 00:22:00,929
structured internally but because of the

00:21:58,379 --> 00:22:03,570
changes that were made to to implement

00:22:00,929 --> 00:22:05,820
that there have been a number of changes

00:22:03,570 --> 00:22:08,850
now this is this is basically a

00:22:05,820 --> 00:22:11,399
screenshot from the PHP manual it didn't

00:22:08,850 --> 00:22:14,640
feel like copying this all over because

00:22:11,399 --> 00:22:16,730
it's it's perfectly illustrates that

00:22:14,640 --> 00:22:20,100
whenever you have a specific expression

00:22:16,730 --> 00:22:24,660
the interpretation between PHP 5 and PHP

00:22:20,100 --> 00:22:29,400
7 can be completely different luckily

00:22:24,660 --> 00:22:31,520
you can detect most of these most of the

00:22:29,400 --> 00:22:35,450
places where this might cause a problem

00:22:31,520 --> 00:22:39,240
however modifying it automatically is

00:22:35,450 --> 00:22:41,550
well difficult because you'll need to

00:22:39,240 --> 00:22:44,910
actually look at the code and say what

00:22:41,550 --> 00:22:47,280
was I doing here in PHP 5 and how do I

00:22:44,910 --> 00:22:49,320
need to modify it to make it work in PHP

00:22:47,280 --> 00:22:53,220
7 so this is one of the things that

00:22:49,320 --> 00:22:55,200
could actually break applications now it

00:22:53,220 --> 00:22:59,280
was never a good idea to do things like

00:22:55,200 --> 00:23:01,530
that but we all did things that we're

00:22:59,280 --> 00:23:04,620
not too proud of I guess so

00:23:01,530 --> 00:23:13,200
so it will require manual testing fixing

00:23:04,620 --> 00:23:17,460
and so on so some stuff was removed as

00:23:13,200 --> 00:23:19,380
well for example you cannot do global

00:23:17,460 --> 00:23:21,750
the global keyword and then use a

00:23:19,380 --> 00:23:24,030
variable variable behind that that's no

00:23:21,750 --> 00:23:25,980
longer allowed I don't think a lot of

00:23:24,030 --> 00:23:29,430
people ever did that but it's not

00:23:25,980 --> 00:23:34,260
possible anymore the salt option in the

00:23:29,430 --> 00:23:37,140
pretty new password hash function has

00:23:34,260 --> 00:23:39,030
been deprecated peach people do that for

00:23:37,140 --> 00:23:41,940
you it will generate a salt that's good

00:23:39,030 --> 00:23:43,020
for you automatically other stuff that's

00:23:41,940 --> 00:23:46,580
been removed

00:23:43,020 --> 00:23:48,630
Eirik is not there anymore the mssql

00:23:46,580 --> 00:23:50,720
extension is not there anymore

00:23:48,630 --> 00:23:53,490
the MySQL extension is not there anymore

00:23:50,720 --> 00:23:57,450
which means you'll have to use MySQL I

00:23:53,490 --> 00:23:59,270
my school native driver and so on we

00:23:57,450 --> 00:24:03,720
finally got rid of my school I mean

00:23:59,270 --> 00:24:07,290
sorry I don't mean we finally got rid of

00:24:03,720 --> 00:24:10,020
MySQL but the old module at least Sybase

00:24:07,290 --> 00:24:13,470
ET is not there and starting with PHP

00:24:10,020 --> 00:24:15,750
7.1 M crypt is gone and we actually

00:24:13,470 --> 00:24:18,900
encountered last week we encountered a

00:24:15,750 --> 00:24:21,870
project where we're using brand-new code

00:24:18,900 --> 00:24:26,160
we're using a very modern framework it's

00:24:21,870 --> 00:24:28,590
built on top of symphony 2.0 3 at this

00:24:26,160 --> 00:24:32,640
point but it's using M

00:24:28,590 --> 00:24:35,030
and so we cannot upgrade to PHP 7.1 on

00:24:32,640 --> 00:24:35,030
that one

00:24:36,059 --> 00:24:40,289
yeah as I said II reg was removed so all

00:24:38,669 --> 00:24:42,090
the functions of course removed call

00:24:40,289 --> 00:24:44,190
user method called me user method RA

00:24:42,090 --> 00:24:47,070
have a new moved the DL function is

00:24:44,190 --> 00:24:48,750
still there but it's not there in PHP

00:24:47,070 --> 00:24:51,150
fpm anymore because it was causing some

00:24:48,750 --> 00:24:53,220
issues and everything related to /

00:24:51,150 --> 00:24:56,070
script type 1 fonts have has been

00:24:53,220 --> 00:24:59,190
removed as well that's long gone that's

00:24:56,070 --> 00:25:02,100
ancient history and then there's a lot

00:24:59,190 --> 00:25:03,690
of ini function ini settings that have

00:25:02,100 --> 00:25:05,730
been removed as well I'm not going to go

00:25:03,690 --> 00:25:08,429
through these I'm not mentioning

00:25:05,730 --> 00:25:10,770
everything that's changed just like the

00:25:08,429 --> 00:25:13,020
most critical ones couple of other

00:25:10,770 --> 00:25:16,799
things that have changed if you have an

00:25:13,020 --> 00:25:20,880
invalid octal in the past PHP would just

00:25:16,799 --> 00:25:22,530
cut it off and we just ignore now it's

00:25:20,880 --> 00:25:25,200
gonna throw a parse error which is

00:25:22,530 --> 00:25:28,010
catchable so you can actually give a

00:25:25,200 --> 00:25:31,110
nice error message to your users

00:25:28,010 --> 00:25:34,020
negative bit shifts should never have

00:25:31,110 --> 00:25:37,409
been there in the first place if you do

00:25:34,020 --> 00:25:40,110
it now you get an arithmetic error which

00:25:37,409 --> 00:25:42,659
again you can catch a division by zero

00:25:40,110 --> 00:25:44,309
now doesn't give a fatal error it

00:25:42,659 --> 00:25:48,780
actually gives you a division by zero

00:25:44,309 --> 00:25:51,330
error and hexadecimal strings are no

00:25:48,780 --> 00:25:57,539
longer numeric they are now actual

00:25:51,330 --> 00:25:58,440
strings and of course given the fact

00:25:57,539 --> 00:26:01,650
that we have a couple of new

00:25:58,440 --> 00:26:04,140
introductions into the types there are

00:26:01,650 --> 00:26:06,179
some new reserved keywords and there are

00:26:04,140 --> 00:26:08,580
some that have been reserved for future

00:26:06,179 --> 00:26:11,039
use as well like voyage iterable

00:26:08,580 --> 00:26:14,760
resource and so on they're not reserved

00:26:11,039 --> 00:26:16,830
today they're not you can still use them

00:26:14,760 --> 00:26:22,190
for other purposes but it's not

00:26:16,830 --> 00:26:27,059
recommended anymore however PHP 7 also

00:26:22,190 --> 00:26:29,610
kind of loosened restrictions on the use

00:26:27,059 --> 00:26:32,700
of keywords so one of the things you can

00:26:29,610 --> 00:26:37,860
do now within a class bla you can do

00:26:32,700 --> 00:26:40,649
function yield which is actually a

00:26:37,860 --> 00:26:41,520
function in PHP but you can now use it

00:26:40,649 --> 00:26:44,580
as a

00:26:41,520 --> 00:26:47,130
the name of a class of the of a method

00:26:44,580 --> 00:26:51,240
again which personally I don't like very

00:26:47,130 --> 00:26:53,640
much but it is allowed again to me it's

00:26:51,240 --> 00:26:56,399
very confusing if I see function yield

00:26:53,640 --> 00:26:58,980
I'm like what yield yield I know that

00:26:56,399 --> 00:27:03,029
but that's a function in PHP so very

00:26:58,980 --> 00:27:06,690
confusing and this has been deprecated

00:27:03,029 --> 00:27:09,270
for a very long time you cannot assign

00:27:06,690 --> 00:27:13,649
by reference on the new when you're

00:27:09,270 --> 00:27:16,140
using new creating a new object it's now

00:27:13,649 --> 00:27:18,720
going to give you a parser saying that

00:27:16,140 --> 00:27:20,520
you can not do that although honestly I

00:27:18,720 --> 00:27:22,049
don't like the error message because

00:27:20,520 --> 00:27:24,059
it's not actually telling you what you

00:27:22,049 --> 00:27:29,490
did wrong it's just saying I didn't

00:27:24,059 --> 00:27:33,149
expect new which is kind of odd yeah ASP

00:27:29,490 --> 00:27:34,409
and script PHP tags have been removed I

00:27:33,149 --> 00:27:36,659
don't think anyone was using those

00:27:34,409 --> 00:27:39,000
anymore but still and a switch statement

00:27:36,659 --> 00:27:43,020
can no longer have more than one default

00:27:39,000 --> 00:27:46,169
block which is kind of silly anyway but

00:27:43,020 --> 00:27:48,059
yeah you can't do that and the date time

00:27:46,169 --> 00:27:52,830
zone warning that you used to get after

00:27:48,059 --> 00:27:56,429
PHP 5.3 if you didn't set it that's now

00:27:52,830 --> 00:27:58,169
been removed again so if you don't set

00:27:56,429 --> 00:28:03,120
it it's fine by default it's gonna set

00:27:58,169 --> 00:28:06,570
itself to UTC the biggest change I think

00:28:03,120 --> 00:28:10,350
performance and memory usage between 5 6

00:28:06,570 --> 00:28:11,970
& 7 performance has gone up anywhere and

00:28:10,350 --> 00:28:13,980
it depends on which application you're

00:28:11,970 --> 00:28:15,809
using and depends on who's doing the

00:28:13,980 --> 00:28:17,429
testing really and who's showing the

00:28:15,809 --> 00:28:19,110
graphs and I'm not actually gonna show

00:28:17,429 --> 00:28:21,630
you any graphs because there's plenty

00:28:19,110 --> 00:28:23,399
out of the out there and they're all

00:28:21,630 --> 00:28:25,770
different but they all show anywhere

00:28:23,399 --> 00:28:27,870
between 200 and 300 percent increase of

00:28:25,770 --> 00:28:30,179
course if your code is three lines

00:28:27,870 --> 00:28:31,320
you're not gonna notice if you're

00:28:30,179 --> 00:28:35,250
loading the entire symfony framework

00:28:31,320 --> 00:28:37,130
it's gonna be a massive difference what

00:28:35,250 --> 00:28:39,539
did they do they optimized a lot of

00:28:37,130 --> 00:28:42,539
things in the core they took a lot more

00:28:39,539 --> 00:28:46,440
direct approaches less redirection

00:28:42,539 --> 00:28:49,470
inside the code they allocate a lot less

00:28:46,440 --> 00:28:52,289
memory for every single thing and every

00:28:49,470 --> 00:28:53,760
data structure has become smaller for

00:28:52,289 --> 00:28:55,440
every single data type actually and

00:28:53,760 --> 00:28:57,570
given the fact that we're

00:28:55,440 --> 00:29:01,860
tossing data around that makes a huge

00:28:57,570 --> 00:29:05,400
difference of course memory usage up to

00:29:01,860 --> 00:29:07,860
50% drop which of course gives you a big

00:29:05,400 --> 00:29:10,200
impact on large frameworks sort of

00:29:07,860 --> 00:29:10,860
things like WordPress or Drupal makes a

00:29:10,200 --> 00:29:16,200
huge difference

00:29:10,860 --> 00:29:17,850
so if for any reason if there's if

00:29:16,200 --> 00:29:20,280
you're looking for a reason to upgrade

00:29:17,850 --> 00:29:22,740
to PHP 7 this is probably the biggest

00:29:20,280 --> 00:29:25,380
one because if you have 10 servers

00:29:22,740 --> 00:29:30,390
running today you could do with half

00:29:25,380 --> 00:29:32,340
tomorrow now most of these were 7

00:29:30,390 --> 00:29:36,060
although I'm quickly going to tell you

00:29:32,340 --> 00:29:38,910
what's new in 7.1 as well so I said

00:29:36,060 --> 00:29:41,460
before that if you wonder if you specify

00:29:38,910 --> 00:29:44,850
that a bull has to be returned from a

00:29:41,460 --> 00:29:47,700
function and you return null it's gonna

00:29:44,850 --> 00:29:50,610
give an error well that's true except in

00:29:47,700 --> 00:29:53,190
7.1 you can specify a nullable type and

00:29:50,610 --> 00:29:54,120
you do that by prepending with a

00:29:53,190 --> 00:29:55,940
question mark

00:29:54,120 --> 00:29:58,920
so in this case you're actually saying

00:29:55,940 --> 00:30:03,380
I'm gonna return an int or I'm gonna

00:29:58,920 --> 00:30:03,380
return null so that's possible now

00:30:04,250 --> 00:30:09,630
you're also gonna get an exception in

00:30:06,480 --> 00:30:12,120
PHP 7.1 if you specify that you're

00:30:09,630 --> 00:30:15,330
expecting a parameter in your function

00:30:12,120 --> 00:30:20,090
and you're not actually passing one then

00:30:15,330 --> 00:30:20,090
you're gonna get an argument count error

00:30:22,190 --> 00:30:27,720
other changes ran the nester and you can

00:30:26,430 --> 00:30:31,680
still use them but they're actually just

00:30:27,720 --> 00:30:34,560
aliases now you cannot do this on a

00:30:31,680 --> 00:30:37,970
string anymore because a string is a

00:30:34,560 --> 00:30:40,860
string it's not an array although it is

00:30:37,970 --> 00:30:42,810
consists of characters but still so you

00:30:40,860 --> 00:30:44,490
cannot append something to a string like

00:30:42,810 --> 00:30:47,400
that anymore you're gonna get a fatal

00:30:44,490 --> 00:30:49,770
error the day time constructed now by

00:30:47,400 --> 00:30:53,010
default uses microseconds whereas in the

00:30:49,770 --> 00:30:55,830
past it only uses use seconds that does

00:30:53,010 --> 00:30:57,180
mean if you create two day times even if

00:30:55,830 --> 00:30:58,740
you create them on the same second and

00:30:57,180 --> 00:31:00,870
you compare them they will be different

00:30:58,740 --> 00:31:02,340
now whereas in the past they were the

00:31:00,870 --> 00:31:06,420
same because you created them at the

00:31:02,340 --> 00:31:07,920
same moment yeah SSL version 2 has been

00:31:06,420 --> 00:31:09,210
dropped which is very good thing for

00:31:07,920 --> 00:31:11,399
security reasons

00:31:09,210 --> 00:31:15,630
a new function called session GC garbage

00:31:11,399 --> 00:31:19,919
collection mostly useful if you have a

00:31:15,630 --> 00:31:22,409
low traffic site I'm gonna have to speed

00:31:19,919 --> 00:31:24,149
up apparently if you have a low traffic

00:31:22,409 --> 00:31:26,490
side garbage collection might not be

00:31:24,149 --> 00:31:28,350
cold enough if you have a high traffic

00:31:26,490 --> 00:31:29,909
site you don't want garbage collection

00:31:28,350 --> 00:31:33,529
to be called the whole time so this

00:31:29,909 --> 00:31:33,529
allows you to do it manually basically

00:31:33,919 --> 00:31:36,919
okay

00:31:44,870 --> 00:31:52,040
okay

00:31:46,670 --> 00:31:54,670
oops I was there already yeah there's a

00:31:52,040 --> 00:31:58,160
new sodium extension which adds a lot of

00:31:54,670 --> 00:32:01,160
cryptographic stuff as well now and

00:31:58,160 --> 00:32:03,260
there is a new object type that you can

00:32:01,160 --> 00:32:05,870
specify so you can basically tell it I'm

00:32:03,260 --> 00:32:09,800
going to return an object without

00:32:05,870 --> 00:32:13,550
specifying which type new functionality

00:32:09,800 --> 00:32:15,890
for password hash newing new TLS version

00:32:13,550 --> 00:32:19,400
that's specified by default and some

00:32:15,890 --> 00:32:21,620
stuff that's removed as well create

00:32:19,400 --> 00:32:23,930
function is deprecated also load is

00:32:21,620 --> 00:32:26,540
deprecated as well now the magic at

00:32:23,930 --> 00:32:27,710
least and each is deprecated because we

00:32:26,540 --> 00:32:30,230
have for each which is much more

00:32:27,710 --> 00:32:32,060
efficient so the question is should you

00:32:30,230 --> 00:32:35,360
upgrade to PHP 7 today

00:32:32,060 --> 00:32:37,610
the answer is mostly yes unless of

00:32:35,360 --> 00:32:39,350
course you're using any of the front

00:32:37,610 --> 00:32:40,820
extensions that have been removed or any

00:32:39,350 --> 00:32:44,720
of the functions that have been removed

00:32:40,820 --> 00:32:47,210
if you have no unit tests or if you have

00:32:44,720 --> 00:32:49,280
no packages for PHP 7 available for your

00:32:47,210 --> 00:32:51,290
servers and you have to manually compile

00:32:49,280 --> 00:32:54,890
everything you might want to hold off

00:32:51,290 --> 00:32:57,530
then again it might be a good reason to

00:32:54,890 --> 00:33:02,240
reinstall your servers altogether or set

00:32:57,530 --> 00:33:04,570
up new ones postponing upgrades brings

00:33:02,240 --> 00:33:07,940
you to the problem of end-of-life

00:33:04,570 --> 00:33:11,000
whereas in the past the principle was

00:33:07,940 --> 00:33:13,780
yeah we'll see now the principle is

00:33:11,000 --> 00:33:17,750
whenever a minor release is brought out

00:33:13,780 --> 00:33:22,160
at 2 to that minor release and that one

00:33:17,750 --> 00:33:24,770
is end-of-life so and then you still get

00:33:22,160 --> 00:33:27,920
critical security patches for one year

00:33:24,770 --> 00:33:31,130
but you get no bug fixes that means as

00:33:27,920 --> 00:33:33,230
soon as 7 or 2 came out $7 became in of

00:33:31,130 --> 00:33:35,900
life so anyone who's done a lot of

00:33:33,230 --> 00:33:38,390
effort upgrading to 7 although well

00:33:35,900 --> 00:33:41,090
you're gonna get critical security bug

00:33:38,390 --> 00:33:42,950
fixes and security fixes until probably

00:33:41,090 --> 00:33:45,500
the end of the year and then it's gonna

00:33:42,950 --> 00:33:49,100
be end-of-life and the same goes for

00:33:45,500 --> 00:33:52,220
when 7.3 is released 7.1 will be end of

00:33:49,100 --> 00:33:53,300
life and anyone still running 5 6 and

00:33:52,220 --> 00:33:56,420
there were a lot of people a lot of

00:33:53,300 --> 00:33:58,790
hands went up it's currently on security

00:33:56,420 --> 00:34:00,559
patches only and by the 1st of January

00:33:58,790 --> 00:34:03,200
it's going to be end-of-life

00:34:00,559 --> 00:34:04,730
no security patches whatsoever so that

00:34:03,200 --> 00:34:08,060
will be the end of the five dot X

00:34:04,730 --> 00:34:12,889
release so you have about eleven months

00:34:08,060 --> 00:34:16,250
well ten and a half so if you're on PHP

00:34:12,889 --> 00:34:19,369
seven or 7.1 start upgrading as well to

00:34:16,250 --> 00:34:22,609
the latest version again because of

00:34:19,369 --> 00:34:27,290
course that's the biggest one eighty

00:34:22,609 --> 00:34:28,970
seven percent still but yeah and I don't

00:34:27,290 --> 00:34:32,329
have to tell you main reasons are

00:34:28,970 --> 00:34:35,839
security performance framework support

00:34:32,329 --> 00:34:39,589
symphony for requires 7.1 oh three Zen

00:34:35,839 --> 00:34:42,730
framework 3 requires still 5.6 laravel

00:34:39,589 --> 00:34:45,530
five six also requires 7.1 oh three and

00:34:42,730 --> 00:34:47,179
it's just a good idea to keep every

00:34:45,530 --> 00:34:55,119
single developer motivated so that they

00:34:47,179 --> 00:34:57,829
can use the latest the latest tools so a

00:34:55,119 --> 00:35:00,470
couple of ways you can upgrade of course

00:34:57,829 --> 00:35:02,180
you can run all your unit tests you can

00:35:00,470 --> 00:35:05,560
try to visit every single page on your

00:35:02,180 --> 00:35:09,140
website or you can try to automate it

00:35:05,560 --> 00:35:14,599
using static analysis and that's what

00:35:09,140 --> 00:35:17,060
we're gonna have a look at now so back

00:35:14,599 --> 00:35:19,700
in 2010 I had to do this for about 40

00:35:17,060 --> 00:35:21,710
different projects when I was working in

00:35:19,700 --> 00:35:25,099
the Belgian railways there was code

00:35:21,710 --> 00:35:26,810
there from peach before and peach b5 and

00:35:25,099 --> 00:35:30,440
we had to migrate all that and I thought

00:35:26,810 --> 00:35:32,240
how am I gonna pull this off and then I

00:35:30,440 --> 00:35:33,349
thought I'm gonna try to automate it

00:35:32,240 --> 00:35:35,540
using our continuous integration

00:35:33,349 --> 00:35:37,280
environment we have some unit tests let

00:35:35,540 --> 00:35:39,950
me put all the projects in there even

00:35:37,280 --> 00:35:41,869
the ones that don't have unit tests and

00:35:39,950 --> 00:35:44,540
let me use a tool called PHP code

00:35:41,869 --> 00:35:49,550
sniffer who here uses PHP code sniffer

00:35:44,540 --> 00:35:51,650
was anyone yeah quite a few okay oops so

00:35:49,550 --> 00:35:53,960
PHP code sniffer was originally a pear

00:35:51,650 --> 00:35:56,869
package it's now available in the

00:35:53,960 --> 00:36:00,589
composer as well it's been mostly

00:35:56,869 --> 00:36:02,420
rebuilt recently for provision 3 and it

00:36:00,589 --> 00:36:04,160
is actually designed to detect coding

00:36:02,420 --> 00:36:06,170
standard violations so it will tell you

00:36:04,160 --> 00:36:08,000
hey you're putting this curly brace

00:36:06,170 --> 00:36:10,609
there and you should be putting it on

00:36:08,000 --> 00:36:12,619
the next line or you need to use spaces

00:36:10,609 --> 00:36:13,310
instead of tabs that's what it was

00:36:12,619 --> 00:36:14,790
designed for

00:36:13,310 --> 00:36:17,280
it supports most

00:36:14,790 --> 00:36:19,680
standards so of course it supports

00:36:17,280 --> 00:36:21,930
things like PSR too but it also supports

00:36:19,680 --> 00:36:23,790
the same framework coding standard or

00:36:21,930 --> 00:36:24,570
any other that you might come up with

00:36:23,790 --> 00:36:29,610
yourself

00:36:24,570 --> 00:36:32,640
please don't and it is a static analysis

00:36:29,610 --> 00:36:34,440
tool that means it goes and analyzes

00:36:32,640 --> 00:36:37,230
your code without actually executing the

00:36:34,440 --> 00:36:39,930
code so it's gonna split up your code in

00:36:37,230 --> 00:36:43,230
what they call tokens so a token could

00:36:39,930 --> 00:36:45,360
be open curly braket or false or a semi

00:36:43,230 --> 00:36:47,510
column those are all tokens and it's

00:36:45,360 --> 00:36:53,670
gonna parse every single file separately

00:36:47,510 --> 00:37:03,410
so if you run it and I'm gonna show that

00:36:53,670 --> 00:37:06,180
now okay so I have here an index dot PHP

00:37:03,410 --> 00:37:08,640
so if you've installed it which you can

00:37:06,180 --> 00:37:11,070
do with composer you can run PHP CSS

00:37:08,640 --> 00:37:13,140
code sniffer - I and it will tell you

00:37:11,070 --> 00:37:16,050
the asfalt coding standards are and then

00:37:13,140 --> 00:37:17,850
you get a whole list and now I can just

00:37:16,050 --> 00:37:20,550
say okay I'm going to use a specific

00:37:17,850 --> 00:37:22,740
standard I'm going to use this Zen

00:37:20,550 --> 00:37:24,570
standard for example and I'm going to

00:37:22,740 --> 00:37:27,360
run it on my current directory which

00:37:24,570 --> 00:37:30,420
only has one file in this case and it

00:37:27,360 --> 00:37:32,160
will tell you oh look I found an opening

00:37:30,420 --> 00:37:35,000
brace of a class it must be on the line

00:37:32,160 --> 00:37:37,290
after the definition and so on or

00:37:35,000 --> 00:37:40,260
consider putting global function tests

00:37:37,290 --> 00:37:42,630
in a static class so it will tell you

00:37:40,260 --> 00:37:47,340
everything that is not correct according

00:37:42,630 --> 00:37:53,160
to the coding standard and if I can

00:37:47,340 --> 00:37:57,440
switch back now there would be nice yeah

00:37:53,160 --> 00:38:00,300
so I wrote a tool to do that migration

00:37:57,440 --> 00:38:02,190
called PHP compatibility and it is

00:38:00,300 --> 00:38:05,310
actually what they call a standard in

00:38:02,190 --> 00:38:07,680
PHP code sniffer you can install many of

00:38:05,310 --> 00:38:10,740
those standards each have different rule

00:38:07,680 --> 00:38:12,720
sets in there and the only purpose of

00:38:10,740 --> 00:38:14,460
PHP compatibility is to find

00:38:12,720 --> 00:38:16,380
compatibility issues so it's not

00:38:14,460 --> 00:38:19,200
actually a coding standard it's just

00:38:16,380 --> 00:38:21,780
gonna look for what it can find that

00:38:19,200 --> 00:38:23,580
might not be compatible with other PHP

00:38:21,780 --> 00:38:25,260
versions so it's going to detect

00:38:23,580 --> 00:38:27,780
deprecated functions deprecated

00:38:25,260 --> 00:38:29,370
extensions

00:38:27,780 --> 00:38:31,530
prohibit its function names or class

00:38:29,370 --> 00:38:35,790
names and so on it works for anything

00:38:31,530 --> 00:38:38,820
starting from peach b5 and above to make

00:38:35,790 --> 00:38:40,560
it work it's very simple if you use

00:38:38,820 --> 00:38:41,220
composer you can just install the

00:38:40,560 --> 00:38:44,760
package

00:38:41,220 --> 00:38:47,850
that's located on get up its whimsy

00:38:44,760 --> 00:38:49,860
slash peach B - compatibility and then

00:38:47,850 --> 00:38:52,350
you have one step that you still need to

00:38:49,860 --> 00:38:55,440
do because you need to give code sniffer

00:38:52,350 --> 00:38:57,390
the location of the standard otherwise

00:38:55,440 --> 00:38:58,980
it doesn't know where to look for it so

00:38:57,390 --> 00:39:01,590
if Peach P compatibility is the only

00:38:58,980 --> 00:39:04,140
coding standards that you have installed

00:39:01,590 --> 00:39:06,120
you can just add a script that's very

00:39:04,140 --> 00:39:07,710
easy I will put these slides online by

00:39:06,120 --> 00:39:10,290
the way so you can use this as a

00:39:07,710 --> 00:39:11,700
reference as well if you have more than

00:39:10,290 --> 00:39:14,280
one coding standard there are a couple

00:39:11,700 --> 00:39:17,210
of additional packages that you can

00:39:14,280 --> 00:39:20,070
install to automate that process as well

00:39:17,210 --> 00:39:22,380
if you don't use composer you can just

00:39:20,070 --> 00:39:24,450
download the package and again run can

00:39:22,380 --> 00:39:29,250
fix it and give it the path where you

00:39:24,450 --> 00:39:32,130
installed PHP compatibility so as I said

00:39:29,250 --> 00:39:34,080
PHP CS - I tells you which standards are

00:39:32,130 --> 00:39:38,330
available and then you can actually just

00:39:34,080 --> 00:39:42,000
specify which standard you want to use

00:39:38,330 --> 00:39:44,460
now what's important is if you have a

00:39:42,000 --> 00:39:47,550
huge directory this could be very slow

00:39:44,460 --> 00:39:50,250
if you run this across a huge

00:39:47,550 --> 00:39:53,850
installation with a vendor directory

00:39:50,250 --> 00:39:55,350
that contains 300 packages it's not

00:39:53,850 --> 00:39:57,090
recommended you should never run it

00:39:55,350 --> 00:39:58,080
across the vendor packages they should

00:39:57,090 --> 00:40:00,440
do that themselves

00:39:58,080 --> 00:40:04,050
you should only run it across your code

00:40:00,440 --> 00:40:06,420
however you should definitely always use

00:40:04,050 --> 00:40:08,910
bash - extensions there's no point in

00:40:06,420 --> 00:40:10,680
scanning javascript files or images or

00:40:08,910 --> 00:40:13,470
videos or something like that it's not

00:40:10,680 --> 00:40:16,500
going to contain PHP if you want to test

00:40:13,470 --> 00:40:20,330
for $7 compatibility you need to run

00:40:16,500 --> 00:40:22,830
your tests on a 7.0 installation of PHP

00:40:20,330 --> 00:40:26,790
otherwise it's not gonna recognize

00:40:22,830 --> 00:40:28,920
certain keywords and again it doesn't

00:40:26,790 --> 00:40:30,660
actually run the code which means it

00:40:28,920 --> 00:40:33,450
cannot detect every single

00:40:30,660 --> 00:40:36,120
incompatibility some things only happen

00:40:33,450 --> 00:40:37,710
when the code is actually running but it

00:40:36,120 --> 00:40:40,200
will provide you with a file name and a

00:40:37,710 --> 00:40:41,050
number of course so let's have a quick

00:40:40,200 --> 00:40:44,230
look at

00:40:41,050 --> 00:40:47,620
what that looks like so if I say no I'm

00:40:44,230 --> 00:40:51,090
not gonna run Zen I'm gonna run HP

00:40:47,620 --> 00:40:58,240
compatibility oops

00:40:51,090 --> 00:41:01,600
I'd made a typo bility so I'm going to

00:40:58,240 --> 00:41:05,950
show you that file first so I have a

00:41:01,600 --> 00:41:08,530
file here and it's it has a for loop

00:41:05,950 --> 00:41:10,390
with a break in there for example a

00:41:08,530 --> 00:41:13,810
break with a parameter which is no

00:41:10,390 --> 00:41:15,610
longer allowed in recent versions I also

00:41:13,810 --> 00:41:18,190
have this little weird thing that I

00:41:15,610 --> 00:41:20,230
already mentioned before that's

00:41:18,190 --> 00:41:23,170
different it behaves differently in PHP

00:41:20,230 --> 00:41:26,140
5 in PHP 7 I also have a beach before

00:41:23,170 --> 00:41:29,590
style constructor here and I'm doing a

00:41:26,140 --> 00:41:32,350
new width by reference which is also of

00:41:29,590 --> 00:41:34,480
course not allowed so let's have a look

00:41:32,350 --> 00:41:37,030
if we run it across it it's going to

00:41:34,480 --> 00:41:38,920
tell you oh you're using a variable

00:41:37,030 --> 00:41:42,040
argument on the break which is correct

00:41:38,920 --> 00:41:45,880
that's forbidden since PHP 5.4 so that's

00:41:42,040 --> 00:41:49,360
an error you're having in direct access

00:41:45,880 --> 00:41:51,070
to variables it has changed left to

00:41:49,360 --> 00:41:55,360
right order and stink things like that

00:41:51,070 --> 00:41:57,660
so you might want to check that

00:41:55,360 --> 00:42:00,460
then there's the constructor which is

00:41:57,660 --> 00:42:03,370
currently deprecated so it's not an

00:42:00,460 --> 00:42:06,130
actual error it's a warning and then of

00:42:03,370 --> 00:42:09,310
course that new width by reference that

00:42:06,130 --> 00:42:14,470
is forbidden in PHP 7 although so this

00:42:09,310 --> 00:42:15,910
is kind of the output you would get it

00:42:14,470 --> 00:42:18,400
will run it across a couple of other

00:42:15,910 --> 00:42:20,590
things in a minute now by default it's

00:42:18,400 --> 00:42:24,880
going to check for the latest PHP

00:42:20,590 --> 00:42:27,340
version so in this case 7.2 is what what

00:42:24,880 --> 00:42:30,340
is defined in PHP compatibility but you

00:42:27,340 --> 00:42:32,170
can specify on run time you can say no

00:42:30,340 --> 00:42:35,350
you need to test for seven although for

00:42:32,170 --> 00:42:37,360
example so source there here is the

00:42:35,350 --> 00:42:39,310
directory you want to check of course or

00:42:37,360 --> 00:42:43,810
you can say I want you to check for

00:42:39,310 --> 00:42:45,940
seven although to 7.1 or anything Samuel

00:42:43,810 --> 00:42:49,000
Doe and higher but you can also do the

00:42:45,940 --> 00:42:52,330
opposite so you can say I'm coding on my

00:42:49,000 --> 00:42:55,060
machine I'm writing code in 7.2 but my

00:42:52,330 --> 00:43:01,600
production environment is running

00:42:55,060 --> 00:43:03,870
5.6 for example so in that case you can

00:43:01,600 --> 00:43:03,870
specify

00:43:14,119 --> 00:43:17,890
No yeah

00:43:22,370 --> 00:43:33,680
let's say five four yeah so you can tell

00:43:30,740 --> 00:43:37,790
now that I have one there or less I

00:43:33,680 --> 00:43:39,740
think yeah so if I go to five two for

00:43:37,790 --> 00:43:41,180
example it's going to do something

00:43:39,740 --> 00:43:42,980
completely different now it's going to

00:43:41,180 --> 00:43:45,650
complain about the fact that the int

00:43:42,980 --> 00:43:48,050
type declaration is not present in an

00:43:45,650 --> 00:43:50,420
older version so if you're writing code

00:43:48,050 --> 00:43:52,940
on 7.2 and you're trying to deploy it on

00:43:50,420 --> 00:43:54,890
five six and you're not doing any checks

00:43:52,940 --> 00:43:57,200
you might actually break your production

00:43:54,890 --> 00:43:58,550
environment if you run this across it it

00:43:57,200 --> 00:44:00,620
will tell you you're using this

00:43:58,550 --> 00:44:03,260
functionality but that's not available

00:44:00,620 --> 00:44:12,560
on your server so the bull return type

00:44:03,260 --> 00:44:21,560
is not present in five six issues here

00:44:12,560 --> 00:44:22,550
okay now you can also disable warnings

00:44:21,560 --> 00:44:25,310
because sometimes you're going to get

00:44:22,550 --> 00:44:28,430
warnings about one specific rule in

00:44:25,310 --> 00:44:31,010
there you can create a PHP CS dot XML

00:44:28,430 --> 00:44:33,200
file and in there you can put something

00:44:31,010 --> 00:44:36,110
like yeah I'm using PHP compatibility

00:44:33,200 --> 00:44:39,530
but I want you to ignore that specific

00:44:36,110 --> 00:44:41,210
rule because of the fact that you know

00:44:39,530 --> 00:44:43,820
about it it's not a problem for your

00:44:41,210 --> 00:44:46,010
specific installation every now and then

00:44:43,820 --> 00:44:47,770
it will give a false positive it will

00:44:46,010 --> 00:44:50,710
tell you there's a problem here because

00:44:47,770 --> 00:44:54,230
you created very complicated code maybe

00:44:50,710 --> 00:44:55,970
with a lot of a lot of curly braces in

00:44:54,230 --> 00:44:58,220
there a lot of other braces in there and

00:44:55,970 --> 00:45:00,050
it's gonna say who I think this is a

00:44:58,220 --> 00:45:02,360
problem but in fact it might not be a

00:45:00,050 --> 00:45:06,140
problem also here you can specify the

00:45:02,360 --> 00:45:08,840
test version so this is a way of kind of

00:45:06,140 --> 00:45:11,930
automating on the continuous integration

00:45:08,840 --> 00:45:15,650
side of it there are a couple of other

00:45:11,930 --> 00:45:17,810
tools there is that will do the same

00:45:15,650 --> 00:45:19,430
thing for WordPress there's a PHP

00:45:17,810 --> 00:45:22,310
compatibility checker which actually

00:45:19,430 --> 00:45:24,590
uses beach B compatibility and it will

00:45:22,310 --> 00:45:26,360
run across all your plugins and tell you

00:45:24,590 --> 00:45:28,700
hey this plugin is not compatible with

00:45:26,360 --> 00:45:30,080
beach be7 so don't upgrade your server

00:45:28,700 --> 00:45:32,720
because your WordPress will not work

00:45:30,080 --> 00:45:34,700
anymore and then you can have a look

00:45:32,720 --> 00:45:35,960
whether there's a new update for the

00:45:34,700 --> 00:45:37,700
plug-in or maybe you need to

00:45:35,960 --> 00:45:41,810
to a different plugin but at least you

00:45:37,700 --> 00:45:44,240
know there's in phpstorm 10 and higher

00:45:41,810 --> 00:45:47,000
there is a PHP 7 compatibility

00:45:44,240 --> 00:45:49,670
inspection but it will do most of the

00:45:47,000 --> 00:45:52,000
inspection only on the parameter types

00:45:49,670 --> 00:45:54,560
it doesn't do a lot of the other things

00:45:52,000 --> 00:45:56,089
this one is a very interesting one and I

00:45:54,560 --> 00:46:00,170
know there's a talk tomorrow afternoon

00:45:56,089 --> 00:46:02,150
that will focus mostly on PHP 7 CC which

00:46:00,170 --> 00:46:04,250
is a very similar project to PHP

00:46:02,150 --> 00:46:05,960
compatibility it's slightly less

00:46:04,250 --> 00:46:09,410
up-to-date I think the last update this

00:46:05,960 --> 00:46:12,260
was in in April last year but it has

00:46:09,410 --> 00:46:14,210
very similar functionality and in that

00:46:12,260 --> 00:46:16,430
talk tomorrow I know he's gonna show

00:46:14,210 --> 00:46:18,859
some comparisons between the two so I'm

00:46:16,430 --> 00:46:20,990
actually very curious about that and

00:46:18,859 --> 00:46:23,960
then there's also fan which was built

00:46:20,990 --> 00:46:26,960
originally by Rasmus Lerner the creator

00:46:23,960 --> 00:46:29,210
of PHP which is a general static

00:46:26,960 --> 00:46:31,670
analyzer which does a lot more than just

00:46:29,210 --> 00:46:35,030
compatibility checks in fact the

00:46:31,670 --> 00:46:37,430
compatibility checks are very limited

00:46:35,030 --> 00:46:39,950
but it does a lot of other code checks

00:46:37,430 --> 00:46:45,349
that are very interesting to have a look

00:46:39,950 --> 00:46:47,900
at and this one actually is a docker

00:46:45,349 --> 00:46:50,060
image that uses all of the above you can

00:46:47,900 --> 00:46:52,040
just run it across your code and it will

00:46:50,060 --> 00:46:55,250
run all of those automatically and we'll

00:46:52,040 --> 00:46:56,690
give we give you a bunch of reports with

00:46:55,250 --> 00:46:58,670
all of the tools without having to

00:46:56,690 --> 00:47:03,020
manually install all of them so it's

00:46:58,670 --> 00:47:06,310
just kind of automated - so to conclude

00:47:03,020 --> 00:47:08,690
there is no way to 100% detects all

00:47:06,310 --> 00:47:12,050
compatibility issues but if you could

00:47:08,690 --> 00:47:16,280
automate like 95% of it that's a big

00:47:12,050 --> 00:47:18,050
gain of course first install PHP

00:47:16,280 --> 00:47:20,300
compatibility or one of the other tools

00:47:18,050 --> 00:47:21,589
on the local machine but please use it

00:47:20,300 --> 00:47:23,720
in your continuous integration

00:47:21,589 --> 00:47:26,930
environment because today you might

00:47:23,720 --> 00:47:29,570
upgrade to peach b7 but then you need to

00:47:26,930 --> 00:47:32,150
go to 7/3 at some point and 7/4 and then

00:47:29,570 --> 00:47:34,820
maybe 8 so it's going to help you all

00:47:32,150 --> 00:47:39,050
the time it's going to be a continuous

00:47:34,820 --> 00:47:43,930
non-stop check for your code so start

00:47:39,050 --> 00:47:43,930
upgrading how much time do I have left

00:47:44,220 --> 00:47:51,300
about ten minutes for questions okay I'm

00:47:47,339 --> 00:47:59,400
gonna do one small little thing that I

00:47:51,300 --> 00:48:03,240
want to show I install laravel and I

00:47:59,400 --> 00:48:06,980
thought I'd just run PHP compatibility

00:48:03,240 --> 00:48:14,280
whoops with the latest version of course

00:48:06,980 --> 00:48:17,460
across that oh yeah so there is one very

00:48:14,280 --> 00:48:20,550
nice feature - P gives you progress

00:48:17,460 --> 00:48:22,050
which for very big tests can be useful

00:48:20,550 --> 00:48:25,020
to see that actually something is

00:48:22,050 --> 00:48:30,089
happening and I noticed yesterday if I

00:48:25,020 --> 00:48:34,140
tell laravel if I try with the laravel

00:48:30,089 --> 00:48:37,290
framework and I say PHP 7.1 that it's

00:48:34,140 --> 00:48:39,089
actually going to tell us that there is

00:48:37,290 --> 00:48:41,280
a problem and I should ignore warnings

00:48:39,089 --> 00:48:44,790
because we're gonna get a lot of

00:48:41,280 --> 00:48:48,329
warnings here yeah empty files will also

00:48:44,790 --> 00:48:50,849
be reported as hey there's no coding

00:48:48,329 --> 00:48:53,250
there that's a problem but you can

00:48:50,849 --> 00:48:54,930
ignore that you can in fact disable that

00:48:53,250 --> 00:48:57,930
warning altogether but you can tell that

00:48:54,930 --> 00:49:00,599
there's an e when it says error w is a

00:48:57,930 --> 00:49:06,960
warning and so what you can see here is

00:49:00,599 --> 00:49:09,660
that actually laravel requires PHP 7.2

00:49:06,960 --> 00:49:14,130
in fact the latest version which is not

00:49:09,660 --> 00:49:16,560
out it was a master so yeah a lot of the

00:49:14,130 --> 00:49:21,140
big frameworks are now actually on the

00:49:16,560 --> 00:49:24,480
very very latest version of of PHP so

00:49:21,140 --> 00:49:26,510
upgrading is the the task at hand right

00:49:24,480 --> 00:49:26,510

YouTube URL: https://www.youtube.com/watch?v=l4Nb9xWxuc0


