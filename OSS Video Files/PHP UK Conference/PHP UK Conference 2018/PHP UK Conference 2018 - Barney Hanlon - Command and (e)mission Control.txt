Title: PHP UK Conference 2018 - Barney Hanlon - Command and (e)mission Control
Publication date: 2018-03-27
Playlist: PHP UK Conference 2018
Description: 
	Using event dispatchers and command buses in applications is becoming common place, but are we using them in a way that aids understanding? With the rise in popularity of Domain-Driven Design to drive meaning in applications, and our applications becoming increasingly small and "hexagonal", the concept of defining the difference between an Event and a Command is becoming more important. This talk explores using command buses and event dispatchers in combination to clearly segregate the structure, and uses an example of how to use these to create clean CQRS-based applications.
Captions: 
	00:00:02,570 --> 00:00:07,859
I'm Barney

00:00:04,410 --> 00:00:11,070
Bonnie Hanlon and I was asked before we

00:00:07,859 --> 00:00:12,660
kicked off what's that from and so I'll

00:00:11,070 --> 00:00:15,900
just clarify that I am a massive

00:00:12,660 --> 00:00:17,430
Battlestar Gallactica fan if you don't

00:00:15,900 --> 00:00:19,619
know the series

00:00:17,430 --> 00:00:25,650
well no questions from you until you

00:00:19,619 --> 00:00:27,240
answer that so firstly yet today's a

00:00:25,650 --> 00:00:29,760
very special day for me in what this is

00:00:27,240 --> 00:00:33,770
not only my first ever talk at the

00:00:29,760 --> 00:00:37,079
conference but it's my tenth conference

00:00:33,770 --> 00:00:41,760
which when I look back actually feels

00:00:37,079 --> 00:00:45,420
really amazing and I'd like to thank PHP

00:00:41,760 --> 00:00:48,510
Southwest especially because last month

00:00:45,420 --> 00:00:49,739
they invited me up to give this talk so

00:00:48,510 --> 00:00:52,140
I got a lot really good positive

00:00:49,739 --> 00:00:55,949
feedback from them and they were lovely

00:00:52,140 --> 00:00:58,530
and if you want to do speaking and come

00:00:55,949 --> 00:01:00,780
up here I don't think you'll need to do

00:00:58,530 --> 00:01:03,930
nine conferences before you attempt it

00:01:00,780 --> 00:01:06,810
but I would recommend that you go to PHP

00:01:03,930 --> 00:01:11,549
Bristol and practice your talk and then

00:01:06,810 --> 00:01:13,320
come up here so what do I do

00:01:11,549 --> 00:01:17,430
well sharp-eyed amongst you might have

00:01:13,320 --> 00:01:20,640
noticed this a logo on here and has my

00:01:17,430 --> 00:01:22,070
manager is in there from there so I work

00:01:20,640 --> 00:01:25,350
for world-first

00:01:22,070 --> 00:01:28,860
we are foreign currency and payment

00:01:25,350 --> 00:01:31,200
specialists so transferring euros to

00:01:28,860 --> 00:01:34,500
dollars pounds whatever you want around

00:01:31,200 --> 00:01:37,170
the world there's 60 of us in IT

00:01:34,500 --> 00:01:43,229
developers DevOps infrastructure oh I

00:01:37,170 --> 00:01:48,180
forgot keyways they will kill me none of

00:01:43,229 --> 00:01:49,649
my stories are getting through now guess

00:01:48,180 --> 00:01:57,530
what probably like a lot of people here

00:01:49,649 --> 00:02:00,920
we're hiring so I work as a developer

00:01:57,530 --> 00:02:06,149
specializing in mentoring internally on

00:02:00,920 --> 00:02:08,700
better practices improving code and so

00:02:06,149 --> 00:02:11,610
forth and my team love me they've

00:02:08,700 --> 00:02:12,900
shortened how they describe me as the de

00:02:11,610 --> 00:02:16,019
mentor

00:02:12,900 --> 00:02:20,610
so anyhow it's a great company to work

00:02:16,019 --> 00:02:25,440
for but it's not without problems we had

00:02:20,610 --> 00:02:27,659
huge growth which led to developers

00:02:25,440 --> 00:02:31,409
sticky taping on more and more to a

00:02:27,659 --> 00:02:33,030
monolith and then we've we've obviously

00:02:31,409 --> 00:02:36,930
identified that when we start to try and

00:02:33,030 --> 00:02:39,269
solve that but finance FinTech is a

00:02:36,930 --> 00:02:40,620
rapidly changing market there's a lot of

00:02:39,269 --> 00:02:43,200
deregulation happening a lot of new

00:02:40,620 --> 00:02:45,750
products out there and we have to be

00:02:43,200 --> 00:02:50,340
competitive or be talk and competition

00:02:45,750 --> 00:02:51,269
as well on top of the changes in the

00:02:50,340 --> 00:02:53,400
regulations

00:02:51,269 --> 00:02:57,209
there's also needs to be more compliant

00:02:53,400 --> 00:02:58,319
be aware of security changes and when

00:02:57,209 --> 00:03:01,349
you have a monolith that becomes

00:02:58,319 --> 00:03:04,530
obviously very heavy to make any changes

00:03:01,349 --> 00:03:06,060
so you know refactor all the things so

00:03:04,530 --> 00:03:09,180
we started coming up with some solutions

00:03:06,060 --> 00:03:12,180
in 2016 towards this start moving with a

00:03:09,180 --> 00:03:15,680
domain driven design approach moving

00:03:12,180 --> 00:03:19,739
more term micro ish services and

00:03:15,680 --> 00:03:23,730
adopting TDD and BDD everywhere I don't

00:03:19,739 --> 00:03:25,829
think that's groundbreaking by any means

00:03:23,730 --> 00:03:28,019
I think most people have tried that or

00:03:25,829 --> 00:03:29,519
are doing that themselves and it's only

00:03:28,019 --> 00:03:32,790
answer to everything we still have some

00:03:29,519 --> 00:03:36,030
problems with new products comes a lot

00:03:32,790 --> 00:03:39,389
of changes in the domain logic we

00:03:36,030 --> 00:03:43,049
adopted the Spotify model who is

00:03:39,389 --> 00:03:47,609
familiar with the Spotify model ok a few

00:03:43,049 --> 00:03:51,440
hands see not that many hands hands up

00:03:47,609 --> 00:03:51,440
if you hate audience participation

00:03:52,940 --> 00:04:01,620
okay so we we started to spit up squads

00:03:58,290 --> 00:04:04,140
and give them more independence but what

00:04:01,620 --> 00:04:07,200
that starts leading to is a fracturing

00:04:04,140 --> 00:04:09,480
in frameworks a lot more libraries being

00:04:07,200 --> 00:04:13,440
used as different squads go with a

00:04:09,480 --> 00:04:16,230
particular approach and that's great but

00:04:13,440 --> 00:04:18,889
it also means that you're having to

00:04:16,230 --> 00:04:21,870
learn a new framework if you move squad

00:04:18,889 --> 00:04:24,240
it also means that because the squads

00:04:21,870 --> 00:04:26,729
are sort of working independently and

00:04:24,240 --> 00:04:28,410
choosing a lot of ways to do stuff

00:04:26,729 --> 00:04:30,330
themselves we start having like a

00:04:28,410 --> 00:04:34,830
zillion internal end points for our

00:04:30,330 --> 00:04:36,750
api's which is okay but then you start

00:04:34,830 --> 00:04:40,440
having to just learn another squads

00:04:36,750 --> 00:04:46,830
Jason this is perhaps my favorite ever

00:04:40,440 --> 00:04:48,060
recruiters email to me unfortunately it

00:04:46,830 --> 00:04:54,540
does become a thing that you become a

00:04:48,060 --> 00:04:56,640
Jason programmer so we started to think

00:04:54,540 --> 00:04:59,850
about this last year and how are you

00:04:56,640 --> 00:05:02,240
going to solve this and so quoting the

00:04:59,850 --> 00:05:05,789
great philosopher been an vanilla ice

00:05:02,240 --> 00:05:07,560
alright stop collaborate and listen he

00:05:05,789 --> 00:05:09,990
then went on to say that he was back for

00:05:07,560 --> 00:05:12,450
the brand new invention but we can leave

00:05:09,990 --> 00:05:13,830
that but some of the things that he

00:05:12,450 --> 00:05:16,650
would have sung about as well is that

00:05:13,830 --> 00:05:18,960
you know we're not going to refactor all

00:05:16,650 --> 00:05:21,210
of these working api's just so they have

00:05:18,960 --> 00:05:23,729
the same framework doesn't give us

00:05:21,210 --> 00:05:26,520
anything there's tests there's you know

00:05:23,729 --> 00:05:29,580
somebody's using luminol laravel because

00:05:26,520 --> 00:05:33,060
they're masochistic or they're using

00:05:29,580 --> 00:05:34,830
symphony or whatever yeah I thought I've

00:05:33,060 --> 00:05:37,800
mentioned that specifically because of

00:05:34,830 --> 00:05:40,650
the chat last night but it doesn't

00:05:37,800 --> 00:05:43,470
matter what your framework is if it's

00:05:40,650 --> 00:05:45,560
working don't replace it you know it's

00:05:43,470 --> 00:05:49,229
good there is no need for a company-wide

00:05:45,560 --> 00:05:51,410
framework but we do need to handle a way

00:05:49,229 --> 00:05:55,200
to all of these different changes and

00:05:51,410 --> 00:05:58,050
how we're going to get things to work in

00:05:55,200 --> 00:05:59,760
a certain is common kind of way

00:05:58,050 --> 00:06:01,650
and we need to plug in this new

00:05:59,760 --> 00:06:02,790
functionality we've got new products we

00:06:01,650 --> 00:06:07,410
need to

00:06:02,790 --> 00:06:09,690
you know slot them into these api's so

00:06:07,410 --> 00:06:11,310
we started to think about how we're

00:06:09,690 --> 00:06:13,650
going to do this and we came up with a

00:06:11,310 --> 00:06:15,660
couple of solutions so we're now I'm

00:06:13,650 --> 00:06:18,870
going to use command buses to tell our

00:06:15,660 --> 00:06:20,700
domain that we want to do something then

00:06:18,870 --> 00:06:22,730
we're going to use event buses to inform

00:06:20,700 --> 00:06:25,200
our domain that something has been done

00:06:22,730 --> 00:06:26,760
and we're going to use action domain

00:06:25,200 --> 00:06:28,590
responder pattern to control the

00:06:26,760 --> 00:06:34,650
interaction between framework and the

00:06:28,590 --> 00:06:39,960
command bus so it's really now about how

00:06:34,650 --> 00:06:43,110
we be commanding okay problem is the

00:06:39,960 --> 00:06:44,640
term is overloaded if you start thinking

00:06:43,110 --> 00:06:48,660
about what a command is if you type

00:06:44,640 --> 00:06:50,460
command PHP into Google that would

00:06:48,660 --> 00:06:52,560
probably bring back a lot of results

00:06:50,460 --> 00:06:53,370
none of which would be very useful to

00:06:52,560 --> 00:06:55,080
you

00:06:53,370 --> 00:06:59,730
Gang of Four talk about the command

00:06:55,080 --> 00:07:01,680
pattern okay that's one domain driven

00:06:59,730 --> 00:07:03,450
design refers to commands within

00:07:01,680 --> 00:07:05,280
business processes when you do domain

00:07:03,450 --> 00:07:07,560
mapping and then of course another

00:07:05,280 --> 00:07:11,640
popular one which was mentioned in the

00:07:07,560 --> 00:07:14,730
talk just before mine CQRS well so CQRS

00:07:11,640 --> 00:07:16,410
because whilst all of these patterns are

00:07:14,730 --> 00:07:19,380
different they play nicely together and

00:07:16,410 --> 00:07:22,080
they're not mutually exclusive so CQRS

00:07:19,380 --> 00:07:26,910
is command query responsibility

00:07:22,080 --> 00:07:28,590
segregation and the heart of it is this

00:07:26,910 --> 00:07:31,020
notion that you can use a different

00:07:28,590 --> 00:07:35,550
model to update information than a model

00:07:31,020 --> 00:07:38,820
you use to read information if you start

00:07:35,550 --> 00:07:40,590
if you come from using doctrine early

00:07:38,820 --> 00:07:42,180
doctrine usage you'd probably see that

00:07:40,590 --> 00:07:47,490
you have like one entity that does

00:07:42,180 --> 00:07:49,110
everything you know it has a column it's

00:07:47,490 --> 00:07:52,260
basically mapping to every single column

00:07:49,110 --> 00:07:54,840
in your tables or related table you have

00:07:52,260 --> 00:07:58,620
a user table with 30 bits of information

00:07:54,840 --> 00:08:00,060
that synteny entity has 30 private

00:07:58,620 --> 00:08:03,720
variables or protected variables in the

00:08:00,060 --> 00:08:06,470
case of doctrine but you're only going

00:08:03,720 --> 00:08:09,870
to be using a small subset of those

00:08:06,470 --> 00:08:11,550
during certain operations but you've now

00:08:09,870 --> 00:08:13,860
created this massive one that you have

00:08:11,550 --> 00:08:15,830
to test and use and make sure it's

00:08:13,860 --> 00:08:19,250
working it's not

00:08:15,830 --> 00:08:20,690
thoroughly helpful it's also not being a

00:08:19,250 --> 00:08:22,780
single responsibility it's now

00:08:20,690 --> 00:08:25,010
everything to do with user

00:08:22,780 --> 00:08:26,750
well when I'm registering a user they're

00:08:25,010 --> 00:08:29,480
not a user they're a customer or they're

00:08:26,750 --> 00:08:32,240
a client I only need maybe an email

00:08:29,480 --> 00:08:33,310
address and password why do I have all

00:08:32,240 --> 00:08:35,600
of this stuff about their account number

00:08:33,310 --> 00:08:38,710
now that could be that you just go our

00:08:35,600 --> 00:08:41,540
world normalize your database

00:08:38,710 --> 00:08:44,210
potentially but you're already in this

00:08:41,540 --> 00:08:47,600
this place the thing is to have smaller

00:08:44,210 --> 00:08:49,280
models that are more related to how you

00:08:47,600 --> 00:08:52,010
use your app rather than just one

00:08:49,280 --> 00:08:56,960
supermodel and along comes a command

00:08:52,010 --> 00:09:00,320
pattern now I couldn't find my Gang of

00:08:56,960 --> 00:09:04,520
Four book to look up their definition so

00:09:00,320 --> 00:09:06,830
I want on the ever reliable Wikipedia so

00:09:04,520 --> 00:09:08,540
it's saying in object-oriented

00:09:06,830 --> 00:09:10,760
programming the command pattern is a

00:09:08,540 --> 00:09:12,350
behavioral design pattern in which an

00:09:10,760 --> 00:09:14,480
object is used to encapsulate all

00:09:12,350 --> 00:09:17,720
information needed to perform an action

00:09:14,480 --> 00:09:20,210
or trigger an event at a later time this

00:09:17,720 --> 00:09:22,190
information includes the method name the

00:09:20,210 --> 00:09:26,750
object that owns the method and values

00:09:22,190 --> 00:09:28,880
of the method parameters okay fair

00:09:26,750 --> 00:09:31,730
enough that's a good dictionary

00:09:28,880 --> 00:09:34,130
description but in a more helpful kind

00:09:31,730 --> 00:09:37,970
of way they're very simple data transfer

00:09:34,130 --> 00:09:41,750
objects they don't know how they're

00:09:37,970 --> 00:09:44,180
going to be used but only enough

00:09:41,750 --> 00:09:45,920
information so that they can be used so

00:09:44,180 --> 00:09:49,370
enough to complete the command basically

00:09:45,920 --> 00:09:51,920
and if you have this command that you've

00:09:49,370 --> 00:09:55,120
created and you have another command

00:09:51,920 --> 00:09:58,460
that's got the same values it is equal

00:09:55,120 --> 00:10:05,020
simple value object I have some code now

00:09:58,460 --> 00:10:09,650
to show you so the launch vipers command

00:10:05,020 --> 00:10:13,400
so it's very simple good as constructors

00:10:09,650 --> 00:10:15,680
and private variables it takes the

00:10:13,400 --> 00:10:19,280
launch time in and creates it as an

00:10:15,680 --> 00:10:24,500
immutable and it's got some simple

00:10:19,280 --> 00:10:27,230
getters nothing really useful about it

00:10:24,500 --> 00:10:28,460
in that sense apart from its name is

00:10:27,230 --> 00:10:31,430
quite fixed

00:10:28,460 --> 00:10:33,380
so launch vipers command it's clear what

00:10:31,430 --> 00:10:36,589
it does even if he doesn't know what

00:10:33,380 --> 00:10:41,180
it's going to do so if you look at

00:10:36,589 --> 00:10:43,820
command buses so there's less on this

00:10:41,180 --> 00:10:45,410
the first proper reference I came across

00:10:43,820 --> 00:10:49,459
this was on the League of Extraordinary

00:10:45,410 --> 00:10:51,700
packages it's when you combine the

00:10:49,459 --> 00:10:54,800
command pattern with the service layer

00:10:51,700 --> 00:10:56,390
it's job is to take a command object

00:10:54,800 --> 00:10:58,370
which describes what the user wants to

00:10:56,390 --> 00:11:00,680
do and match it to a handler which

00:10:58,370 --> 00:11:03,410
executes it this can help structure your

00:11:00,680 --> 00:11:05,839
code neatly I firmly believe after a

00:11:03,410 --> 00:11:09,620
year of using it on that last sentence

00:11:05,839 --> 00:11:11,600
it does make your code very neat there

00:11:09,620 --> 00:11:13,550
are two libraries that I'm familiar with

00:11:11,600 --> 00:11:16,010
I was reminded of one just before this

00:11:13,550 --> 00:11:17,750
talk is simple bus which I have excluded

00:11:16,010 --> 00:11:18,770
from this which is a bit of a shame but

00:11:17,750 --> 00:11:20,570
the one that will be using today's

00:11:18,770 --> 00:11:23,720
tactician which is by the league and

00:11:20,570 --> 00:11:25,399
another one is called Broadway now

00:11:23,720 --> 00:11:28,160
Broadway is very interesting because

00:11:25,399 --> 00:11:30,410
it's actually full event sourcing which

00:11:28,160 --> 00:11:35,870
will touch on the periphery of this talk

00:11:30,410 --> 00:11:38,930
I use Broadway and I like it

00:11:35,870 --> 00:11:41,209
I think everybody can help by giving

00:11:38,930 --> 00:11:44,240
them some pull requests with some better

00:11:41,209 --> 00:11:46,520
documentation because they have some

00:11:44,240 --> 00:11:50,750
good examples but it's not the easiest

00:11:46,520 --> 00:11:52,190
thing to immediately jump into but I

00:11:50,750 --> 00:11:55,370
would certainly recommend it if you want

00:11:52,190 --> 00:11:58,820
to save your events to a database and so

00:11:55,370 --> 00:12:04,130
here's a simple Handler see we're going

00:11:58,820 --> 00:12:05,810
to use the deck crew service and so this

00:12:04,130 --> 00:12:09,250
is the launch vipers handler in the case

00:12:05,810 --> 00:12:11,870
of out-of-the-box tactician we'll take a

00:12:09,250 --> 00:12:13,820
command so it's called launch vipers

00:12:11,870 --> 00:12:16,040
command this is called the launch vipers

00:12:13,820 --> 00:12:20,450
handler it will automatically map for

00:12:16,040 --> 00:12:22,959
two and we have one method handle which

00:12:20,450 --> 00:12:25,700
takes in the command and it's going to

00:12:22,959 --> 00:12:29,029
take the deck crew service and tell it

00:12:25,700 --> 00:12:31,490
to get the birds in the air for a given

00:12:29,029 --> 00:12:32,870
Battlestar from a flight pod with that

00:12:31,490 --> 00:12:35,149
squadron as you can see it's getting

00:12:32,870 --> 00:12:37,250
everything that it needs from the

00:12:35,149 --> 00:12:38,660
command doesn't need to know about

00:12:37,250 --> 00:12:40,649
anything else apart from the service

00:12:38,660 --> 00:12:43,680
that was injected into its constructor

00:12:40,649 --> 00:12:45,660
and then tying this all together there's

00:12:43,680 --> 00:12:48,180
a lot of code there actually gosh

00:12:45,660 --> 00:12:51,569
make a note of that so we're going to

00:12:48,180 --> 00:12:53,730
create Charles deck gang as the deck

00:12:51,569 --> 00:12:55,949
crew service we're going to set up the

00:12:53,730 --> 00:12:57,959
handler with it and then we're going to

00:12:55,949 --> 00:13:00,179
use tactician QuickStart method when we

00:12:57,959 --> 00:13:03,389
just say okay to make sure that we're

00:13:00,179 --> 00:13:06,589
explicit about it the command of that

00:13:03,389 --> 00:13:09,420
class will go to that handler simple map

00:13:06,589 --> 00:13:12,809
then we create a command and then we say

00:13:09,420 --> 00:13:15,360
off you go handle it command bus we

00:13:12,809 --> 00:13:18,089
don't need to know much about the

00:13:15,360 --> 00:13:20,040
command bus itself it's a simple enough

00:13:18,089 --> 00:13:23,759
map for us and gives us a point of

00:13:20,040 --> 00:13:25,529
abstraction within tactician you can

00:13:23,759 --> 00:13:28,100
also instead of creating a handler like

00:13:25,529 --> 00:13:30,749
this you can also use a PSR 11 container

00:13:28,100 --> 00:13:34,259
so that you can load your handlers in a

00:13:30,749 --> 00:13:38,339
lazy lazy load them based on what

00:13:34,259 --> 00:13:40,860
command comes in so let's talk about

00:13:38,339 --> 00:13:44,749
event buses so that's command buses

00:13:40,860 --> 00:13:49,319
they're fairly simple the ignition is

00:13:44,749 --> 00:13:51,509
the other side of it and PHP has

00:13:49,319 --> 00:13:56,009
certainly had event bus like structures

00:13:51,509 --> 00:13:57,509
for some time probably the first one

00:13:56,009 --> 00:13:59,730
that I came across was Drupal and it's

00:13:57,509 --> 00:14:02,910
hook system it's a very simple pub/sub

00:13:59,730 --> 00:14:06,059
system before there were real events and

00:14:02,910 --> 00:14:07,980
listeners Zen framework then took it a

00:14:06,059 --> 00:14:11,610
little bit further with pre dispatch and

00:14:07,980 --> 00:14:13,709
post dispatch and although it didn't

00:14:11,610 --> 00:14:16,410
provide as many hooks as Drupal what it

00:14:13,709 --> 00:14:20,730
did bring was prioritization which is an

00:14:16,410 --> 00:14:23,579
important aspect to event listening then

00:14:20,730 --> 00:14:26,100
long somebody wrote SPL observer which

00:14:23,579 --> 00:14:30,209
is there but I haven't really seen a lot

00:14:26,100 --> 00:14:32,069
of people use and then probably the most

00:14:30,209 --> 00:14:34,410
popular one is the symphony event

00:14:32,069 --> 00:14:37,079
dispatcher which you see regularly being

00:14:34,410 --> 00:14:39,360
used within I think even PHP spec and B

00:14:37,079 --> 00:14:41,129
hat use it PHP unit might use a

00:14:39,360 --> 00:14:45,679
variation of it I can't remember but

00:14:41,129 --> 00:14:50,269
there is another one coming soon which

00:14:45,679 --> 00:14:50,269
I'm hoping to finish this year which

00:14:50,500 --> 00:14:54,690
I've rewritten it three times because I

00:14:52,780 --> 00:14:57,700
keep keep coming up with different ideas

00:14:54,690 --> 00:15:03,130
the one thing that I'm trying to improve

00:14:57,700 --> 00:15:05,020
is that all of the event dispatches and

00:15:03,130 --> 00:15:08,050
I think the term dispatcher has come

00:15:05,020 --> 00:15:09,880
from their history with ins and

00:15:08,050 --> 00:15:13,200
framework or Symphony as being the

00:15:09,880 --> 00:15:16,390
background the backbone of an MVC system

00:15:13,200 --> 00:15:18,720
League has an event system they call it

00:15:16,390 --> 00:15:22,750
in Mission which in some ways sort of

00:15:18,720 --> 00:15:25,270
correctly help split the mindset because

00:15:22,750 --> 00:15:27,820
otherwise we're not really using events

00:15:25,270 --> 00:15:29,440
inside MV scenes in the right way I feel

00:15:27,820 --> 00:15:31,050
it's like we we should call them a

00:15:29,440 --> 00:15:35,050
mission with so where it's saying hey

00:15:31,050 --> 00:15:38,920
something has happened and bounced when

00:15:35,050 --> 00:15:42,550
I finally finish it has a cue so that

00:15:38,920 --> 00:15:45,070
because at a moment all of the system's

00:15:42,550 --> 00:15:50,800
out there only accept one event at the

00:15:45,070 --> 00:15:53,980
time which is a breaks how you want the

00:15:50,800 --> 00:15:58,090
application to flow sometimes hey how so

00:15:53,980 --> 00:16:00,460
a very simple event I rewatched the mini

00:15:58,090 --> 00:16:04,720
series two nights ago to make sure I got

00:16:00,460 --> 00:16:08,170
this correct radial radiological alarm

00:16:04,720 --> 00:16:10,990
was triggered event so we have an

00:16:08,170 --> 00:16:15,130
inbound Cylon Raider and it has a number

00:16:10,990 --> 00:16:18,450
of nukes that it's going to launch and

00:16:15,130 --> 00:16:22,300
again we're doing very simple guesses

00:16:18,450 --> 00:16:26,350
now we want a listener for this now if

00:16:22,300 --> 00:16:28,510
it's a symphony listener then it's just

00:16:26,350 --> 00:16:32,380
a simple callable so we're going to use

00:16:28,510 --> 00:16:35,260
invoke on it and clearly what we want is

00:16:32,380 --> 00:16:36,730
we don't want to be hit by nukes so

00:16:35,260 --> 00:16:39,100
we're going to have the listener if

00:16:36,730 --> 00:16:41,610
there are inbound nukes we're going to

00:16:39,100 --> 00:16:45,820
send our Viper to intercept the nukes

00:16:41,610 --> 00:16:48,460
and we'll see if we're successful later

00:16:45,820 --> 00:16:51,910
on but now we'll set it up in some ways

00:16:48,460 --> 00:16:56,140
it's very similar to how we set up the

00:16:51,910 --> 00:16:58,300
command bus as you can see where we

00:16:56,140 --> 00:17:00,180
again we say to the event bus in this

00:16:58,300 --> 00:17:02,680
case it's the symphony event dispatcher

00:17:00,180 --> 00:17:06,100
we're going to add a listener we can say

00:17:02,680 --> 00:17:10,000
okay you can listen on this event and

00:17:06,100 --> 00:17:14,530
then we dispatch the event to the event

00:17:10,000 --> 00:17:19,380
bus and hopefully the listener will act

00:17:14,530 --> 00:17:24,250
and stop the nuke if you compare them

00:17:19,380 --> 00:17:26,230
they're pretty simple pretty similar but

00:17:24,250 --> 00:17:30,340
there are you know some differences

00:17:26,230 --> 00:17:33,700
they're both very simple DT OS I like to

00:17:30,340 --> 00:17:37,870
think of them as beautifully done there

00:17:33,700 --> 00:17:41,440
is almost nothing to test on an event or

00:17:37,870 --> 00:17:43,240
a command apart from I put something in

00:17:41,440 --> 00:17:48,190
your constructor can I get that thing

00:17:43,240 --> 00:17:50,320
out they should be self validating

00:17:48,190 --> 00:17:53,280
however you should not be able to create

00:17:50,320 --> 00:17:55,510
a command or an event with invalid data

00:17:53,280 --> 00:17:58,809
there should be something within its

00:17:55,510 --> 00:18:00,070
constructor that says hey you know in in

00:17:58,809 --> 00:18:01,570
some cases that might be it's just as

00:18:00,070 --> 00:18:05,380
simple as type hinting but it might be

00:18:01,570 --> 00:18:07,150
that it does a little bit more the main

00:18:05,380 --> 00:18:09,480
difference is that you know commands

00:18:07,150 --> 00:18:13,380
know or have a one-to-one relationship

00:18:09,480 --> 00:18:15,370
with a single handler whereas events

00:18:13,380 --> 00:18:17,080
don't know I don't have that

00:18:15,370 --> 00:18:20,530
relationship with listeners they may

00:18:17,080 --> 00:18:23,950
have in very simple example here we have

00:18:20,530 --> 00:18:25,690
one event with one listener but there

00:18:23,950 --> 00:18:29,500
could be n number of listeners and the

00:18:25,690 --> 00:18:31,150
names mean nothing at that point they

00:18:29,500 --> 00:18:33,190
also don't know anything about the

00:18:31,150 --> 00:18:34,720
mechanism there was nothing in there

00:18:33,190 --> 00:18:38,800
that said by the way you're coming from

00:18:34,720 --> 00:18:41,890
the command line or HTTP or at the end

00:18:38,800 --> 00:18:43,420
of the queue so their world the world of

00:18:41,890 --> 00:18:45,610
a handler and world of a listener is

00:18:43,420 --> 00:18:48,880
basically whatever you put inside the

00:18:45,610 --> 00:18:51,820
command or the event which makes them

00:18:48,880 --> 00:18:54,160
extremely easy to test because you

00:18:51,820 --> 00:18:59,230
during full control of that command or

00:18:54,160 --> 00:19:01,690
that event the command bus abstracts

00:18:59,230 --> 00:19:03,340
away the direct link between the command

00:19:01,690 --> 00:19:06,010
and handler you see you can switch out

00:19:03,340 --> 00:19:07,540
stuff but it's still one-to-one and the

00:19:06,010 --> 00:19:10,150
event bus is role is to manage and

00:19:07,540 --> 00:19:12,220
many-to-many relationship because

00:19:10,150 --> 00:19:14,730
there's nothing stopping a listener

00:19:12,220 --> 00:19:17,170
listening on n number of events or you

00:19:14,730 --> 00:19:21,150
know

00:19:17,170 --> 00:19:23,770
so okay that's commands and vents but

00:19:21,150 --> 00:19:26,730
how do we use them or what is the

00:19:23,770 --> 00:19:29,860
advantage of them so talk briefly about

00:19:26,730 --> 00:19:31,390
hexagonal architecture it's also known

00:19:29,860 --> 00:19:35,350
as ports and adapters as people familiar

00:19:31,390 --> 00:19:37,810
with hexagonal architecture some some

00:19:35,350 --> 00:19:41,050
raise hands okay not enough raised hand

00:19:37,810 --> 00:19:43,720
so we will go through this so allow an

00:19:41,050 --> 00:19:46,510
application to be driven equally by

00:19:43,720 --> 00:19:48,490
users programs automated test or back

00:19:46,510 --> 00:19:51,340
scripts and to be developed and tested

00:19:48,490 --> 00:19:53,380
in isolation from its eventual runtime

00:19:51,340 --> 00:19:55,930
devices and databases this is by

00:19:53,380 --> 00:19:57,520
Cockburn who I believe well he was

00:19:55,930 --> 00:20:00,400
certainly the one that that comes up

00:19:57,520 --> 00:20:03,370
highest on Google for knowing about this

00:20:00,400 --> 00:20:05,310
anyhow this this diagram I'm sure if

00:20:03,370 --> 00:20:07,900
you've seen hexagonal architecture

00:20:05,310 --> 00:20:10,300
before you'll be aware of this but we

00:20:07,900 --> 00:20:12,780
can see that we have adapters around the

00:20:10,300 --> 00:20:16,180
edge so we have UI test agent

00:20:12,780 --> 00:20:17,920
integrations and we even have it at the

00:20:16,180 --> 00:20:20,470
other end of our mock database or a real

00:20:17,920 --> 00:20:24,130
database so we're in control and in our

00:20:20,470 --> 00:20:25,720
application is in the center of that the

00:20:24,130 --> 00:20:27,460
nice thing is that the application is

00:20:25,720 --> 00:20:31,870
beautifully ignorant of the nature of

00:20:27,460 --> 00:20:35,200
the input device so what from a PHP

00:20:31,870 --> 00:20:40,020
perspective are those adapters well HTTP

00:20:35,200 --> 00:20:44,650
it could be laravel lumen Symphony and

00:20:40,020 --> 00:20:46,870
even Drupal if if you're using whisky or

00:20:44,650 --> 00:20:50,650
it could be the command line if you're

00:20:46,870 --> 00:20:52,540
using simply console or artisan it could

00:20:50,650 --> 00:20:54,850
be just a coulis now or it could be your

00:20:52,540 --> 00:20:56,890
testing framework these are all the

00:20:54,850 --> 00:20:59,350
inputs and they should be treated as

00:20:56,890 --> 00:21:03,790
adapters so when you're using the

00:20:59,350 --> 00:21:05,290
command pattern here's a diagram that

00:21:03,790 --> 00:21:07,060
basically shows that you can think of

00:21:05,290 --> 00:21:11,380
this as your HTTP adapter and that could

00:21:07,060 --> 00:21:14,650
be an entire symphony flex stack or just

00:21:11,380 --> 00:21:16,300
you know a slim micro framework one it

00:21:14,650 --> 00:21:17,950
doesn't really matter the important

00:21:16,300 --> 00:21:21,220
thing is your domain logics way over

00:21:17,950 --> 00:21:24,660
there doesn't know about it and you use

00:21:21,220 --> 00:21:28,310
the command bus to communicate with it

00:21:24,660 --> 00:21:30,440
now why bother

00:21:28,310 --> 00:21:33,680
you might think well it's just another

00:21:30,440 --> 00:21:34,300
level of abstraction what do I gain from

00:21:33,680 --> 00:21:39,650
it

00:21:34,300 --> 00:21:41,090
can anybody say which CEO said this take

00:21:39,650 --> 00:21:43,160
as long as you need to understand your

00:21:41,090 --> 00:21:45,560
domain logic before building a working

00:21:43,160 --> 00:21:52,760
product your product can change your

00:21:45,560 --> 00:21:58,900
logic shouldn't anyone know no CEO has

00:21:52,760 --> 00:22:03,980
ever said when it comes to writing

00:21:58,900 --> 00:22:06,980
domain logic the reality is key people

00:22:03,980 --> 00:22:08,810
are unavailable you know if you go to

00:22:06,980 --> 00:22:11,720
the head of compliance and you say can I

00:22:08,810 --> 00:22:14,990
speak to you about how are we compliant

00:22:11,720 --> 00:22:17,120
in Singapore and they say sure I've got

00:22:14,990 --> 00:22:19,960
a slot in my diary in five weeks time

00:22:17,120 --> 00:22:22,280
for half an hour

00:22:19,960 --> 00:22:25,220
okay can you delegate that to somebody

00:22:22,280 --> 00:22:27,260
else yeah they'll be available in three

00:22:25,220 --> 00:22:30,260
weeks okay

00:22:27,260 --> 00:22:33,650
well does that mean that we can't write

00:22:30,260 --> 00:22:35,420
any code to do with compliance for three

00:22:33,650 --> 00:22:37,580
weeks or could we do the rest of the

00:22:35,420 --> 00:22:39,020
stuff you've got to get your app towards

00:22:37,580 --> 00:22:42,200
the finish line you need points where

00:22:39,020 --> 00:22:44,720
you can just say we'll come back to this

00:22:42,200 --> 00:22:47,780
the reality is is that that's just how

00:22:44,720 --> 00:22:53,690
it's going to be you also can't mock

00:22:47,780 --> 00:22:55,100
something unless you know what it is you

00:22:53,690 --> 00:22:57,050
need to know a name you need to know a

00:22:55,100 --> 00:22:59,000
method that you're going to say I will

00:22:57,050 --> 00:23:01,460
return true or it will return false or

00:22:59,000 --> 00:23:03,550
whatever it might be so let's take a

00:23:01,460 --> 00:23:06,440
look at an app without a bus this is a

00:23:03,550 --> 00:23:08,900
launch vipers controller so we're going

00:23:06,440 --> 00:23:12,860
to use the we'll have then index action

00:23:08,900 --> 00:23:15,950
and we're reading from a server request

00:23:12,860 --> 00:23:19,340
we're going to get the type of the Viper

00:23:15,950 --> 00:23:20,990
we're going to set up a battle star it's

00:23:19,340 --> 00:23:26,090
name and number which I assume would be

00:23:20,990 --> 00:23:27,740
75 we're going to read what flight pod

00:23:26,090 --> 00:23:31,640
it is we're going to create the launch

00:23:27,740 --> 00:23:32,960
time as now or no sorry some point in

00:23:31,640 --> 00:23:34,460
the future and then we're going to go to

00:23:32,960 --> 00:23:36,710
the deck crew and say get the birds in

00:23:34,460 --> 00:23:40,310
the app and then we've got some catching

00:23:36,710 --> 00:23:42,440
for if any of that data is invalid the

00:23:40,310 --> 00:23:45,090
thing with this though is

00:23:42,440 --> 00:23:46,380
I'm now doing the same with my console

00:23:45,090 --> 00:23:49,890
command let's say that I want to be able

00:23:46,380 --> 00:23:51,180
to do this from two sources so I'm doing

00:23:49,890 --> 00:23:53,220
the same sort of stuff now

00:23:51,180 --> 00:23:55,670
but I'm also then going down to the deck

00:23:53,220 --> 00:23:58,920
crew and I'm saying get birds in the air

00:23:55,670 --> 00:24:00,360
okay this works that there are some

00:23:58,920 --> 00:24:05,600
downsides apart from the obvious

00:24:00,360 --> 00:24:08,880
duplication what's happening now is we

00:24:05,600 --> 00:24:11,550
knew some things we knew that we were

00:24:08,880 --> 00:24:13,080
going to use a deck crew service and we

00:24:11,550 --> 00:24:16,020
knew that the deck crew service had a

00:24:13,080 --> 00:24:18,320
method on it so we were already done a

00:24:16,020 --> 00:24:22,320
little bit of exploring of our domain

00:24:18,320 --> 00:24:26,130
okay but if we don't know anything

00:24:22,320 --> 00:24:29,850
upfront then we're having to wait to get

00:24:26,130 --> 00:24:32,550
at least that bit of information mmm

00:24:29,850 --> 00:24:35,610
okay that's that's great if you know a

00:24:32,550 --> 00:24:38,780
little bit about your domain perfect if

00:24:35,610 --> 00:24:42,650
you have an unexplored domain then

00:24:38,780 --> 00:24:46,370
here's the command controller we know

00:24:42,650 --> 00:24:50,250
that there is some functionality that

00:24:46,370 --> 00:24:51,270
launches vipers we don't know that it's

00:24:50,250 --> 00:24:52,890
anything to do with the deck crew

00:24:51,270 --> 00:24:55,500
because we haven't done any we haven't

00:24:52,890 --> 00:24:57,120
interviewed you know the the crew and

00:24:55,500 --> 00:24:57,540
gone hey how do you actually launch a

00:24:57,120 --> 00:25:00,870
Viper

00:24:57,540 --> 00:25:02,820
but we know that we can see that Vipers

00:25:00,870 --> 00:25:05,730
clearly are launched and we can see that

00:25:02,820 --> 00:25:07,560
clearly they happen in result of

00:25:05,730 --> 00:25:11,610
something so in this case we could say

00:25:07,560 --> 00:25:14,010
well there is a command and we know some

00:25:11,610 --> 00:25:15,510
bits of data that we collect another

00:25:14,010 --> 00:25:18,390
example of this would be registration

00:25:15,510 --> 00:25:19,590
how do we register users well we know

00:25:18,390 --> 00:25:22,080
that we collect email and password

00:25:19,590 --> 00:25:24,420
because that's on every wireframe where

00:25:22,080 --> 00:25:26,400
we're going to save it how we save it do

00:25:24,420 --> 00:25:30,200
we tell compliance and so forth we don't

00:25:26,400 --> 00:25:32,550
know yet we can defer knowing that so

00:25:30,200 --> 00:25:35,340
instead though we do know that there is

00:25:32,550 --> 00:25:36,720
a command that we're going to issue and

00:25:35,340 --> 00:25:38,820
we're going to take the information from

00:25:36,720 --> 00:25:42,360
the request we dump it onto the command

00:25:38,820 --> 00:25:44,430
bus now the advantage of that is you're

00:25:42,360 --> 00:25:49,200
turning the controller back int and just

00:25:44,430 --> 00:25:51,090
knowing about HTTP he knows about a one

00:25:49,200 --> 00:25:53,280
command but really what it's doing is

00:25:51,090 --> 00:25:55,730
going hey I'm going to interrogate this

00:25:53,280 --> 00:25:59,100
request and use the data within it

00:25:55,730 --> 00:26:00,960
you're in control of the command bus so

00:25:59,100 --> 00:26:02,970
it's nice and easy to mock it you can

00:26:00,960 --> 00:26:05,430
say hey the command bus threw an

00:26:02,970 --> 00:26:06,740
exception or did the command bus just go

00:26:05,430 --> 00:26:11,000
yep good job

00:26:06,740 --> 00:26:14,190
nice and easy breakpoint for your tests

00:26:11,000 --> 00:26:18,360
so you don't need to have any of the

00:26:14,190 --> 00:26:19,770
services if you go and you had to write

00:26:18,360 --> 00:26:22,530
that back and you'd started with

00:26:19,770 --> 00:26:24,180
services if something new came in you

00:26:22,530 --> 00:26:26,610
would have to go back into every single

00:26:24,180 --> 00:26:28,410
control of that did it and change it

00:26:26,610 --> 00:26:31,080
over which means you have to run your

00:26:28,410 --> 00:26:34,200
tests again build maybe that's minor but

00:26:31,080 --> 00:26:37,530
you know it's not great we just did one

00:26:34,200 --> 00:26:40,080
single service if we did that for three

00:26:37,530 --> 00:26:43,530
or four services I'm doing that over and

00:26:40,080 --> 00:26:45,750
over and over again mm-hmm the command

00:26:43,530 --> 00:26:51,060
bus allows us to have it all in a

00:26:45,750 --> 00:26:53,190
handler away from our code so the other

00:26:51,060 --> 00:26:54,690
advantage is if you're doing front-end

00:26:53,190 --> 00:26:58,140
work is you can just say okay well now

00:26:54,690 --> 00:27:02,040
we can design this front-end well we can

00:26:58,140 --> 00:27:04,320
have the 404 page or we can have success

00:27:02,040 --> 00:27:07,560
we can just assume that the command

00:27:04,320 --> 00:27:10,130
handler appropriately behaves and then

00:27:07,560 --> 00:27:13,200
we can go back and solve that later so

00:27:10,130 --> 00:27:15,960
this application flow internally within

00:27:13,200 --> 00:27:20,610
the teams that well first that use it we

00:27:15,960 --> 00:27:22,530
call this the du done cycle so basically

00:27:20,610 --> 00:27:24,750
you're either your console commander or

00:27:22,530 --> 00:27:27,840
your controller acts as your adapter and

00:27:24,750 --> 00:27:30,480
then fires a command do something and

00:27:27,840 --> 00:27:32,340
just hand it to the command bus command

00:27:30,480 --> 00:27:34,560
bus then says okay this is the correct

00:27:32,340 --> 00:27:37,830
command Handler to deal with this

00:27:34,560 --> 00:27:40,860
command then at that point the handler

00:27:37,830 --> 00:27:43,910
will will always have within it an event

00:27:40,860 --> 00:27:47,310
bus and say I've done something that

00:27:43,910 --> 00:27:49,530
goes to the event bus and then that may

00:27:47,310 --> 00:27:51,270
then generate more stuff itself so here

00:27:49,530 --> 00:27:56,400
we are we've got the commence FTL jump

00:27:51,270 --> 00:27:58,500
handler so we're gonna spool up we're

00:27:56,400 --> 00:28:01,560
going to handle the commence the FTL

00:27:58,500 --> 00:28:02,910
jump and we're going to jump the battle

00:28:01,560 --> 00:28:06,870
star we have some coordinates that come

00:28:02,910 --> 00:28:09,810
out of it and we go we'll we'll verify

00:28:06,870 --> 00:28:12,090
this with the navigation computer

00:28:09,810 --> 00:28:15,090
and if it's successful we'll fire an

00:28:12,090 --> 00:28:20,930
event saying jump was successful if not

00:28:15,090 --> 00:28:23,550
will fire a jump was off-course event so

00:28:20,930 --> 00:28:25,770
then on the other side we have listener

00:28:23,550 --> 00:28:29,970
who's going oh right okay I'm listening

00:28:25,770 --> 00:28:33,210
for a bad jump event when that happens

00:28:29,970 --> 00:28:37,500
I'm going to take time to calculate as a

00:28:33,210 --> 00:28:39,990
plot device the new coordinates because

00:28:37,500 --> 00:28:45,180
they will fill several episodes with bad

00:28:39,990 --> 00:28:46,820
jumps and then so this is another

00:28:45,180 --> 00:28:49,890
listener that says okay I'm going to

00:28:46,820 --> 00:28:51,630
handle the reap lot of the FTL jump

00:28:49,890 --> 00:28:53,760
command I've actually just gone the

00:28:51,630 --> 00:28:55,470
listener in this case doesn't do

00:28:53,760 --> 00:28:59,790
anything itself it just uses the command

00:28:55,470 --> 00:29:02,610
bus itself so you only have writing

00:28:59,790 --> 00:29:04,340
doing in command handlers your listeners

00:29:02,610 --> 00:29:06,510
then don't even do anything they just

00:29:04,340 --> 00:29:08,910
appropriately generate a new command

00:29:06,510 --> 00:29:11,430
themselves so this leads to this pattern

00:29:08,910 --> 00:29:15,060
where you can go okay a command will

00:29:11,430 --> 00:29:17,640
fire an event which then because there

00:29:15,060 --> 00:29:20,070
are maybe three four listeners listening

00:29:17,640 --> 00:29:22,890
for that event generate three commands

00:29:20,070 --> 00:29:25,590
themselves those then fire events and

00:29:22,890 --> 00:29:27,660
then of course there may not be anything

00:29:25,590 --> 00:29:28,890
listening on two of those events they

00:29:27,660 --> 00:29:30,930
might just be you're firing them but

00:29:28,890 --> 00:29:32,790
you're logging them all you know to know

00:29:30,930 --> 00:29:35,220
that your application did something and

00:29:32,790 --> 00:29:39,540
then one of those events is important

00:29:35,220 --> 00:29:43,560
and so that then runs three commands and

00:29:39,540 --> 00:29:45,810
they fire event on and on and on so with

00:29:43,560 --> 00:29:48,860
this model we use action domain

00:29:45,810 --> 00:29:51,810
responder which is a pattern that I

00:29:48,860 --> 00:29:54,330
first heard about reading through the

00:29:51,810 --> 00:29:56,100
slim framework documentation there's a

00:29:54,330 --> 00:29:57,930
little bit in there

00:29:56,100 --> 00:30:01,200
it describes it as a web specific

00:29:57,930 --> 00:30:03,420
refinement of the MVC pattern and is

00:30:01,200 --> 00:30:06,930
like more suited to the closure based

00:30:03,420 --> 00:30:09,360
micro frameworks if you want to read up

00:30:06,930 --> 00:30:12,300
on it directly rather than just through

00:30:09,360 --> 00:30:15,390
the same documentation there is the link

00:30:12,300 --> 00:30:20,970
to it it's quite a useful pattern that

00:30:15,390 --> 00:30:22,680
the important stuff from it is MVC Model

00:30:20,970 --> 00:30:25,450
View controller

00:30:22,680 --> 00:30:27,370
do we really have views anymore in the

00:30:25,450 --> 00:30:32,320
same sense do we have models like that

00:30:27,370 --> 00:30:34,600
in the same way where as ADR talks about

00:30:32,320 --> 00:30:36,280
actions and it uses actions in a sense

00:30:34,600 --> 00:30:39,430
of what the same documentation talks

00:30:36,280 --> 00:30:40,840
about in vocable collar balls as you

00:30:39,430 --> 00:30:42,690
know you just set up a little function

00:30:40,840 --> 00:30:45,220
and off you go

00:30:42,690 --> 00:30:46,990
the domain well we've talked about

00:30:45,220 --> 00:30:51,640
domain logic in the sense of hexagonal

00:30:46,990 --> 00:30:53,350
architecture in a responder with views

00:30:51,640 --> 00:30:55,480
being quite clever there's you know you

00:30:53,350 --> 00:30:58,890
have conversations with front-end Deb's

00:30:55,480 --> 00:31:01,500
and they say don't dismiss the

00:30:58,890 --> 00:31:03,820
presentation logic of an application

00:31:01,500 --> 00:31:06,300
there's important stuff going on in

00:31:03,820 --> 00:31:09,190
there you know and a lot of the

00:31:06,300 --> 00:31:11,710
complexity in say JavaScript frameworks

00:31:09,190 --> 00:31:13,480
like flux or which you know they're

00:31:11,710 --> 00:31:16,720
clever but let's not get around they are

00:31:13,480 --> 00:31:20,170
they are more complex that for the first

00:31:16,720 --> 00:31:22,300
time user of it then we would like so

00:31:20,170 --> 00:31:25,540
there is some there is some cunning

00:31:22,300 --> 00:31:28,750
going into our presentation logic and so

00:31:25,540 --> 00:31:30,880
the responder is effectively handling

00:31:28,750 --> 00:31:34,060
all of that the nice thing is that by

00:31:30,880 --> 00:31:36,940
having a separate responder you can have

00:31:34,060 --> 00:31:39,640
responders specific to the mechanism you

00:31:36,940 --> 00:31:40,590
can have an HTTP responder or a console

00:31:39,640 --> 00:31:43,120
responder or

00:31:40,590 --> 00:31:46,630
for a cue you might not say anything

00:31:43,120 --> 00:31:51,070
apart from hey syn/ack yeah good job

00:31:46,630 --> 00:31:53,590
this happened but you're using you're

00:31:51,070 --> 00:31:56,610
not using a view it could be multiple

00:31:53,590 --> 00:31:59,200
views your idea of what a view is in MVC

00:31:56,610 --> 00:32:02,590
is probably going to be more complex

00:31:59,200 --> 00:32:04,870
than the examples that that you see in a

00:32:02,590 --> 00:32:06,460
lot of you know online documentation you

00:32:04,870 --> 00:32:08,880
will want that complexity and you want

00:32:06,460 --> 00:32:18,070
to responder to handle that complexity

00:32:08,880 --> 00:32:20,620
so taking a DR further the easiest way

00:32:18,070 --> 00:32:23,200
to sort of describe this is using the

00:32:20,620 --> 00:32:26,680
commands in a useful kind of way to sort

00:32:23,200 --> 00:32:30,430
of cause this cascade of events so in

00:32:26,680 --> 00:32:32,500
comes a request okay now we have an

00:32:30,430 --> 00:32:36,020
action

00:32:32,500 --> 00:32:38,679
and the action is probably well we're

00:32:36,020 --> 00:32:43,040
gonna use slim for this example I think

00:32:38,679 --> 00:32:46,040
so all we're going to do is set up at

00:32:43,040 --> 00:32:50,960
forward slash that there is some index

00:32:46,040 --> 00:32:53,420
action and we'll run it okay fine

00:32:50,960 --> 00:32:56,840
doesn't really do much but it's going to

00:32:53,420 --> 00:32:59,270
fire off a command to the command bus so

00:32:56,840 --> 00:33:00,800
here we go this is moving away from

00:32:59,270 --> 00:33:07,040
Battlestar because I was running out of

00:33:00,800 --> 00:33:10,340
episodes to watch this is check balance

00:33:07,040 --> 00:33:16,670
it's made up this is not real code it's

00:33:10,340 --> 00:33:17,840
okay it's okay boss so we throw into the

00:33:16,670 --> 00:33:20,030
constructor of it a command bus

00:33:17,840 --> 00:33:21,980
interface and responder interface in

00:33:20,030 --> 00:33:24,980
this case we are certainly dealing with

00:33:21,980 --> 00:33:28,670
HTTP so it's an HTTP responder interface

00:33:24,980 --> 00:33:30,350
and again it needs to be just as simple

00:33:28,670 --> 00:33:34,460
in vocable so we're going to take in the

00:33:30,350 --> 00:33:37,490
request we're going to pull apart a UUID

00:33:34,460 --> 00:33:39,950
from the header and say okay there's

00:33:37,490 --> 00:33:42,550
there's a user and then we're just going

00:33:39,950 --> 00:33:45,800
to create a new check user balance

00:33:42,550 --> 00:33:49,400
command with that user ID and give it to

00:33:45,800 --> 00:33:51,590
the command bus nice and simple now we

00:33:49,400 --> 00:33:55,910
need a handler and handler is going to

00:33:51,590 --> 00:33:57,920
talk to a service or multiple services

00:33:55,910 --> 00:33:59,780
it doesn't really matter at this point

00:33:57,920 --> 00:34:03,140
so neither your from your point of view

00:33:59,780 --> 00:34:05,710
of your action it doesn't care it's way

00:34:03,140 --> 00:34:07,640
over there and this is your real domain

00:34:05,710 --> 00:34:09,500
logic here this is the bit when you

00:34:07,640 --> 00:34:10,850
actually care about in a bit that you're

00:34:09,500 --> 00:34:14,720
going to be talking to your stakeholders

00:34:10,850 --> 00:34:19,369
about so here we go this is a simple

00:34:14,720 --> 00:34:20,690
check user balance handler if ask an

00:34:19,369 --> 00:34:23,780
authorization service if they're

00:34:20,690 --> 00:34:27,440
authorized with that user ID

00:34:23,780 --> 00:34:30,560
I can guarantee our security model is a

00:34:27,440 --> 00:34:33,800
lot tighter than this just in case

00:34:30,560 --> 00:34:37,100
you're worried and we go okay yeah

00:34:33,800 --> 00:34:40,760
you're authorized you can now see a

00:34:37,100 --> 00:34:43,550
balance so let's emit an event onto the

00:34:40,760 --> 00:34:46,290
event bus a new user balance was checked

00:34:43,550 --> 00:34:50,700
event and we're going to give it

00:34:46,290 --> 00:34:55,710
the balance for that user so that events

00:34:50,700 --> 00:34:57,930
now coming out and so what is that it's

00:34:55,710 --> 00:35:01,530
pretty simple again it has the actual

00:34:57,930 --> 00:35:04,560
balance it has the user ID simple

00:35:01,530 --> 00:35:07,650
guesses that's now going on to an event

00:35:04,560 --> 00:35:10,470
bus from the event bus it's going to go

00:35:07,650 --> 00:35:12,870
to n number of listeners and at this

00:35:10,470 --> 00:35:14,820
point you can probably see where this is

00:35:12,870 --> 00:35:16,890
going so okay we're going to listen and

00:35:14,820 --> 00:35:19,650
we go user balance was checked but this

00:35:16,890 --> 00:35:22,490
has a balanced responder inside it now

00:35:19,650 --> 00:35:26,070
in this case the balanced responder and

00:35:22,490 --> 00:35:29,790
the HDTV responder interface are one in

00:35:26,070 --> 00:35:33,090
the same class because one cares about

00:35:29,790 --> 00:35:35,160
hey I'm for HTTP and the other part of

00:35:33,090 --> 00:35:40,410
it the other interface here cares that

00:35:35,160 --> 00:35:42,510
it can accept a user's balance so we're

00:35:40,410 --> 00:35:46,260
just going to say hey responder update

00:35:42,510 --> 00:35:48,630
the user balance now in reality what's

00:35:46,260 --> 00:35:52,790
going to happen is that could be very

00:35:48,630 --> 00:35:55,410
complex that could be a whole twig

00:35:52,790 --> 00:35:58,370
templating system inside there going all

00:35:55,410 --> 00:36:02,400
right okay well if the users balance is

00:35:58,370 --> 00:36:04,080
higher than 1000 we give them a gold

00:36:02,400 --> 00:36:06,000
star or it doesn't matter what it what

00:36:04,080 --> 00:36:07,590
it it could be anything anything you

00:36:06,000 --> 00:36:09,570
want on there or there could be things

00:36:07,590 --> 00:36:11,520
like oh well you've got a negative

00:36:09,570 --> 00:36:14,160
balance that we use this stylesheet we

00:36:11,520 --> 00:36:16,200
bring something to your attention we you

00:36:14,160 --> 00:36:20,130
know which is not appropriate for an API

00:36:16,200 --> 00:36:21,510
or a command line it is appropriate

00:36:20,130 --> 00:36:25,110
though for when you're looking at the

00:36:21,510 --> 00:36:28,560
site over HTTP so the balance responder

00:36:25,110 --> 00:36:30,810
it takes care of that and in fact if you

00:36:28,560 --> 00:36:33,150
were testing this fire CLI you would

00:36:30,810 --> 00:36:35,490
just get back here I think you'd use

00:36:33,150 --> 00:36:38,010
right Ln and just say hey here's the

00:36:35,490 --> 00:36:41,220
user balance but it would accept the

00:36:38,010 --> 00:36:43,680
same parameters so okay so now the

00:36:41,220 --> 00:36:46,460
listeners updated the responder and now

00:36:43,680 --> 00:36:51,090
we get a response back nice and simple

00:36:46,460 --> 00:36:53,730
hope saying so in this example here you

00:36:51,090 --> 00:36:54,960
know where we're taking this and once

00:36:53,730 --> 00:36:56,640
we've done all of this we go this

00:36:54,960 --> 00:37:00,470
responder respond which in this case

00:36:56,640 --> 00:37:00,470
returns a response interface

00:37:00,799 --> 00:37:05,640
the domain doesn't know about any of

00:37:03,450 --> 00:37:08,400
that didn't care or doesn't isn't aware

00:37:05,640 --> 00:37:10,499
in any way that this is to do with HTTP

00:37:08,400 --> 00:37:13,470
doesn't know it's a PS r7 responder

00:37:10,499 --> 00:37:17,599
doesn't know any of that it's just that

00:37:13,470 --> 00:37:20,460
these two are the same linked object so

00:37:17,599 --> 00:37:22,769
it's nice and easy for us to switch out

00:37:20,460 --> 00:37:25,799
the action and respond to pair for any

00:37:22,769 --> 00:37:27,390
adapter if you're doing testing for

00:37:25,799 --> 00:37:29,099
example you just have it well you're not

00:37:27,390 --> 00:37:30,960
interested actually in the output

00:37:29,099 --> 00:37:33,299
generally speaking you're not gonna go

00:37:30,960 --> 00:37:34,769
well is the stylesheet looking

00:37:33,299 --> 00:37:36,420
appropriate whatever like that would you

00:37:34,769 --> 00:37:38,809
want to see is does that respond to have

00:37:36,420 --> 00:37:41,309
the data in it that the cycle of work

00:37:38,809 --> 00:37:43,319
from all of those listeners and events

00:37:41,309 --> 00:37:44,069
does it actually do what it's supposed

00:37:43,319 --> 00:37:47,430
to do

00:37:44,069 --> 00:37:50,220
so responders can be as smart or as dumb

00:37:47,430 --> 00:37:52,410
as you like in this pattern you know one

00:37:50,220 --> 00:37:54,539
of the things that you can do is because

00:37:52,410 --> 00:37:56,880
you're listening you have n number of

00:37:54,539 --> 00:37:58,499
listeners populating responder so you

00:37:56,880 --> 00:38:01,410
can start getting into like multiple

00:37:58,499 --> 00:38:04,019
events iterating over a responder and

00:38:01,410 --> 00:38:06,930
building it up so if user has logged in

00:38:04,019 --> 00:38:09,109
is you know all user is authorized well

00:38:06,930 --> 00:38:11,609
I'm a responder that says welcome Barney

00:38:09,109 --> 00:38:14,700
so all I do is I'm just going to tell

00:38:11,609 --> 00:38:16,950
the responder hey welcome the user or

00:38:14,700 --> 00:38:18,630
yes they're logged in the responders

00:38:16,950 --> 00:38:21,390
role then is go are well I know that the

00:38:18,630 --> 00:38:24,900
heading on this page will have my name

00:38:21,390 --> 00:38:27,089
on it or the customer name on it but you

00:38:24,900 --> 00:38:28,440
don't care about that for the CLI or

00:38:27,089 --> 00:38:31,529
maybe you do but in a completely

00:38:28,440 --> 00:38:35,809
different way so they can be smart and

00:38:31,529 --> 00:38:38,549
they can be built up over time now

00:38:35,809 --> 00:38:41,009
because your world when you're moving

00:38:38,549 --> 00:38:45,960
through your app is just commands and

00:38:41,009 --> 00:38:47,430
events these are really small it's so it

00:38:45,960 --> 00:38:49,319
fits well with CQRS

00:38:47,430 --> 00:38:53,549
and going back to when we were talking

00:38:49,319 --> 00:38:55,049
about how the patterns fit together

00:38:53,549 --> 00:38:57,809
nicely or at least are not mutually

00:38:55,049 --> 00:38:59,249
exclusive you can literally write for a

00:38:57,809 --> 00:39:00,239
lot of things on your domain map when

00:38:59,249 --> 00:39:01,819
you're going through and going alright

00:39:00,239 --> 00:39:04,229
we're going to do domain driven design

00:39:01,819 --> 00:39:07,200
and say this is a command have it

00:39:04,229 --> 00:39:09,329
literally as code and say this is a

00:39:07,200 --> 00:39:11,990
command register this user check this

00:39:09,329 --> 00:39:14,840
balance move this money to here

00:39:11,990 --> 00:39:16,670
and actually use that terminology so

00:39:14,840 --> 00:39:20,600
you're doing tell don't ask within your

00:39:16,670 --> 00:39:24,140
system so here inside the balanced

00:39:20,600 --> 00:39:26,720
responder in this case I'm taking a

00:39:24,140 --> 00:39:30,110
response interface response interface as

00:39:26,720 --> 00:39:32,090
you probably know is immutable so in

00:39:30,110 --> 00:39:34,850
this case we're just going to add a

00:39:32,090 --> 00:39:37,010
header to it we'll just say it's an API

00:39:34,850 --> 00:39:41,360
it's just going to respond back with

00:39:37,010 --> 00:39:43,640
your balance in the response header week

00:39:41,360 --> 00:39:46,550
just as well be any of the other types I

00:39:43,640 --> 00:39:49,310
mentioned before and the important thing

00:39:46,550 --> 00:39:51,770
is that because you're moving through

00:39:49,310 --> 00:39:54,310
your application with self validating D

00:39:51,770 --> 00:39:57,680
Tio's these commands and events you

00:39:54,310 --> 00:39:59,330
don't need to wait for a response from

00:39:57,680 --> 00:40:01,780
your command bar CEO you shouldn't get

00:39:59,330 --> 00:40:05,000
anything back from your command bus

00:40:01,780 --> 00:40:06,740
instead you're just going okay well if I

00:40:05,000 --> 00:40:09,619
form this command I gave it to the

00:40:06,740 --> 00:40:14,140
command bus and I want to use that data

00:40:09,619 --> 00:40:16,760
here and now it must be valid because

00:40:14,140 --> 00:40:19,220
the command bus didn't throw a big

00:40:16,760 --> 00:40:22,130
wobbly or the event bus didn't throw you

00:40:19,220 --> 00:40:25,400
know an exception things must be working

00:40:22,130 --> 00:40:30,290
so now I've created a user ID like a

00:40:25,400 --> 00:40:32,240
UUID I've got that to hand so that you

00:40:30,290 --> 00:40:33,320
you ID must be valid I can just respond

00:40:32,240 --> 00:40:35,030
directly if I don't want to use a

00:40:33,320 --> 00:40:36,920
responder I can just go directly back

00:40:35,030 --> 00:40:45,080
and say head your here's your user ID

00:40:36,920 --> 00:40:49,609
well done so it does sound complex and I

00:40:45,080 --> 00:40:55,390
have some caveats I don't actually have

00:40:49,609 --> 00:40:58,010
caveats I really like the pattern so

00:40:55,390 --> 00:41:00,530
this is my first talk and I've run it a

00:40:58,010 --> 00:41:03,790
little bit quicker than I expected so

00:41:00,530 --> 00:41:03,790

YouTube URL: https://www.youtube.com/watch?v=syCpDX4I8H8


