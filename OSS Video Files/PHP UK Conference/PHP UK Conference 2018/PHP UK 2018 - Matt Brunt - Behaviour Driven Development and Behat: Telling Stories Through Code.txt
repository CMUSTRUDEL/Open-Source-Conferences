Title: PHP UK 2018 - Matt Brunt - Behaviour Driven Development and Behat: Telling Stories Through Code
Publication date: 2018-03-27
Playlist: PHP UK Conference 2018
Description: 
	Stories? Scenarios? BDD? Are these just more words in the ever-growing list of jargon that developers have to know? Or are they something more important than new terms to memorise? In this session we'll look at how BDD fits into the software development work-flow, how to tell user stories through features, and how to automate them in Behat. These techniques will help to ensure you're writing well designed and tested software that focuses on what the users want from a system.
Captions: 
	00:00:02,510 --> 00:00:06,860
so we'll start by really quickly the

00:00:05,300 --> 00:00:07,880
stuff that you don't care about I'm a

00:00:06,860 --> 00:00:09,920
senior software engineer a company

00:00:07,880 --> 00:00:11,299
called V variety with the folks in our

00:00:09,920 --> 00:00:13,240
in hoodies at events if you ever see us

00:00:11,299 --> 00:00:16,100
come and say hello were quite friendly

00:00:13,240 --> 00:00:19,519
Bronte on Twitter also organized pitch

00:00:16,100 --> 00:00:21,109
peace Midlands in Leicester joined in

00:00:19,519 --> 00:00:22,640
the slides were available on there as

00:00:21,109 --> 00:00:24,800
well if you do want to follow along as

00:00:22,640 --> 00:00:27,619
well as the codes the code for the talk

00:00:24,800 --> 00:00:31,329
and any feedback after the talk will be

00:00:27,619 --> 00:00:31,329
really helpful so thank you in advance

00:00:31,630 --> 00:00:37,120
so before we talk about behavior driven

00:00:35,000 --> 00:00:40,219
development and that side of things

00:00:37,120 --> 00:00:44,510
let's briefly talk about test-driven

00:00:40,219 --> 00:00:45,829
development now the way this is often

00:00:44,510 --> 00:00:47,780
worded is when people say oh it's

00:00:45,829 --> 00:00:49,910
test-driven development versus behavior

00:00:47,780 --> 00:00:52,940
driven development and I don't

00:00:49,910 --> 00:00:54,379
particularly like that myself I don't

00:00:52,940 --> 00:00:55,309
think that they're competing I don't

00:00:54,379 --> 00:00:56,390
think they're trying to challenge one

00:00:55,309 --> 00:00:59,079
another they're not going head-to-head

00:00:56,390 --> 00:01:01,550
in battle to the death

00:00:59,079 --> 00:01:03,440
BDD actually kind of more emerged from

00:01:01,550 --> 00:01:05,269
test-driven development it didn't seek

00:01:03,440 --> 00:01:07,580
to sort of wipe everything out and go

00:01:05,269 --> 00:01:09,890
did it wrong it just took some of the

00:01:07,580 --> 00:01:11,810
ideas and the approach of test-driven

00:01:09,890 --> 00:01:13,880
development changed the way we look at

00:01:11,810 --> 00:01:16,490
some things and basically went from

00:01:13,880 --> 00:01:19,220
there and to go along with this people

00:01:16,490 --> 00:01:22,250
I've seen said and heard a few times

00:01:19,220 --> 00:01:24,290
myself and people say that BDD is TDD

00:01:22,250 --> 00:01:26,540
done rights and this is just sort of

00:01:24,290 --> 00:01:27,620
further to the combative nature of the

00:01:26,540 --> 00:01:29,240
way people like to view things you're

00:01:27,620 --> 00:01:31,850
either on my side of you're against me

00:01:29,240 --> 00:01:33,890
there's no in-between and it's not black

00:01:31,850 --> 00:01:38,600
and white like that it's not binary it's

00:01:33,890 --> 00:01:42,140
a it works alongside it so when I talk

00:01:38,600 --> 00:01:45,050
about BDD I don't consider TDD versus

00:01:42,140 --> 00:01:50,840
BDD I like to think of it as TDD

00:01:45,050 --> 00:01:53,090
alongside BDD the reason that I've sort

00:01:50,840 --> 00:01:55,760
of taken to BDD in the way a lot of it

00:01:53,090 --> 00:01:57,880
works is when we consider testing in

00:01:55,760 --> 00:02:00,080
industries outside of development and

00:01:57,880 --> 00:02:02,060
the tests are the things that you do

00:02:00,080 --> 00:02:04,030
after the thing is built you can't test

00:02:02,060 --> 00:02:06,440
a car for safety until the cars built

00:02:04,030 --> 00:02:07,550
but with test-driven development people

00:02:06,440 --> 00:02:08,270
sort of focus on you've got to write the

00:02:07,550 --> 00:02:09,950
tests first

00:02:08,270 --> 00:02:11,719
and people struggle with this because

00:02:09,950 --> 00:02:13,159
the way they see testing as a word is

00:02:11,719 --> 00:02:14,689
that well I can't test something that's

00:02:13,159 --> 00:02:15,950
not built I don't know what it is yet so

00:02:14,689 --> 00:02:19,040
I can't test it

00:02:15,950 --> 00:02:21,020
and BDD just kind of changes the words

00:02:19,040 --> 00:02:22,280
that you use it seeks to reevaluate and

00:02:21,020 --> 00:02:24,020
look at the language that's used and the

00:02:22,280 --> 00:02:27,530
vocabulary that's used along with this

00:02:24,020 --> 00:02:29,950
idea of building systems so we don't

00:02:27,530 --> 00:02:32,510
talk about tests we talk about behavior

00:02:29,950 --> 00:02:35,660
we're gonna talk about test cases their

00:02:32,510 --> 00:02:37,580
specifications or scenarios and we just

00:02:35,660 --> 00:02:38,540
look okay well don't consider the test

00:02:37,580 --> 00:02:40,970
because if you're struggling with

00:02:38,540 --> 00:02:41,810
writing tests first and I can't test

00:02:40,970 --> 00:02:43,810
what's not built yet

00:02:41,810 --> 00:02:45,830
well don't think of it as a test just

00:02:43,810 --> 00:02:47,060
describe how you want the system to

00:02:45,830 --> 00:02:50,050
behave what do you want it to do and

00:02:47,060 --> 00:02:52,819
that's a very basic level all it does

00:02:50,050 --> 00:02:54,290
but once you put that approach towards

00:02:52,819 --> 00:02:56,000
people they kind of take to it a little

00:02:54,290 --> 00:02:57,560
bit more and it's just a little easier

00:02:56,000 --> 00:02:59,750
to get to grips with I can actually

00:02:57,560 --> 00:03:01,850
start thinking about the the design of

00:02:59,750 --> 00:03:02,989
my system before I build it because

00:03:01,850 --> 00:03:04,100
that's what ultimately we're doing with

00:03:02,989 --> 00:03:05,720
behavior driven development we're not

00:03:04,100 --> 00:03:07,819
trying to test the system we're trying

00:03:05,720 --> 00:03:09,049
to design a system that does the right

00:03:07,819 --> 00:03:13,940
things according to the behavior we've

00:03:09,049 --> 00:03:16,160
specified so another sort of TLDR way of

00:03:13,940 --> 00:03:17,120
putting it is I'm starting with the TLDR

00:03:16,160 --> 00:03:20,720
so you can all go to sleep after this

00:03:17,120 --> 00:03:22,459
and TDD is building the thing right it's

00:03:20,720 --> 00:03:24,620
making sure you're using best practices

00:03:22,459 --> 00:03:26,750
it's making sure you're using the right

00:03:24,620 --> 00:03:28,310
design patterns and building decoupled

00:03:26,750 --> 00:03:31,970
and modular code and all that side of

00:03:28,310 --> 00:03:33,079
things which is cool but BDD is about

00:03:31,970 --> 00:03:35,120
making sure that you've built the right

00:03:33,079 --> 00:03:37,070
thing because it's all very well having

00:03:35,120 --> 00:03:37,670
the most well architected piece of code

00:03:37,070 --> 00:03:39,320
in the world

00:03:37,670 --> 00:03:40,190
that's fully decoupled and you can do

00:03:39,320 --> 00:03:41,600
whatever you want with it and it's

00:03:40,190 --> 00:03:43,280
really awesome and performant and

00:03:41,600 --> 00:03:45,140
amazing but if it doesn't do the job

00:03:43,280 --> 00:03:46,959
that you need it to do it's useless and

00:03:45,140 --> 00:03:50,299
it's worthless

00:03:46,959 --> 00:03:52,010
so with TDD developers are often the

00:03:50,299 --> 00:03:54,380
core focus of it it's about us as

00:03:52,010 --> 00:03:55,940
developers building good software but

00:03:54,380 --> 00:03:57,049
using the right patterns and practices

00:03:55,940 --> 00:03:59,569
and that sort of things making sure the

00:03:57,049 --> 00:04:01,010
code works under the surface behavior

00:03:59,569 --> 00:04:02,329
driven development looks to take us out

00:04:01,010 --> 00:04:03,530
of that little bubble that we like to

00:04:02,329 --> 00:04:05,480
live in as developers where we put our

00:04:03,530 --> 00:04:06,920
headphones on and we say no to the

00:04:05,480 --> 00:04:09,170
outside world and we just sit writing

00:04:06,920 --> 00:04:11,060
code and it seeks to bring us into a

00:04:09,170 --> 00:04:12,709
world where we look at okay what other

00:04:11,060 --> 00:04:15,079
people are invested in this system what

00:04:12,709 --> 00:04:16,579
other stakeholders have I got I don't

00:04:15,079 --> 00:04:18,260
mean in terms of monetary investment I

00:04:16,579 --> 00:04:21,169
mean in terms of who's got an interest

00:04:18,260 --> 00:04:24,169
in this project succeeding me as a

00:04:21,169 --> 00:04:26,210
developer I have an interest in it QA

00:04:24,169 --> 00:04:27,800
they have an interest in it the business

00:04:26,210 --> 00:04:29,370
analyst or the domain expert or the

00:04:27,800 --> 00:04:31,770
product owner they have a

00:04:29,370 --> 00:04:33,570
interested in and if say you're building

00:04:31,770 --> 00:04:35,370
a point-of-sale system for the front of

00:04:33,570 --> 00:04:36,540
a shop as tempting as it would be to be

00:04:35,370 --> 00:04:37,710
given a load of money to build this and

00:04:36,540 --> 00:04:39,960
you go off and you build it and you come

00:04:37,710 --> 00:04:41,639
back the most important person in that

00:04:39,960 --> 00:04:44,820
example to speak to would be the person

00:04:41,639 --> 00:04:46,080
who works the till every day because

00:04:44,820 --> 00:04:47,280
they can tell you the things that go

00:04:46,080 --> 00:04:49,620
wrong with the system and they can tell

00:04:47,280 --> 00:04:51,360
you what they needed to do when a parent

00:04:49,620 --> 00:04:52,380
comes up to them with a kid who's crying

00:04:51,360 --> 00:04:53,940
and they just need to get through the

00:04:52,380 --> 00:04:55,290
till as quick as possible but they're

00:04:53,940 --> 00:04:57,020
searching for where the right button is

00:04:55,290 --> 00:04:59,520
because they don't know it's not obvious

00:04:57,020 --> 00:05:00,870
so it seeks to bring us out of this

00:04:59,520 --> 00:05:02,280
little developer bubble we have and take

00:05:00,870 --> 00:05:04,110
us into a world where actually there's

00:05:02,280 --> 00:05:07,130
other people involved in this process of

00:05:04,110 --> 00:05:09,990
building software let's talk to them

00:05:07,130 --> 00:05:13,440
we'll be looking at scenario BDD as an

00:05:09,990 --> 00:05:17,030
example today and basically we're gonna

00:05:13,440 --> 00:05:18,960
specify that any test in a system

00:05:17,030 --> 00:05:20,430
shouldn't be considered test it should

00:05:18,960 --> 00:05:23,789
be described in terms of the desired

00:05:20,430 --> 00:05:26,610
behavior of that particular thing the

00:05:23,789 --> 00:05:28,590
desired behavior comes from requirements

00:05:26,610 --> 00:05:30,690
set by the business but it's not always

00:05:28,590 --> 00:05:35,130
purely what they want it's a

00:05:30,690 --> 00:05:37,320
collaborative effort there's a number of

00:05:35,130 --> 00:05:38,820
types of BDD scenarios one of them spec

00:05:37,320 --> 00:05:40,680
BDD is another one which if you've used

00:05:38,820 --> 00:05:42,690
the tool or heard of a toy like PHP spec

00:05:40,680 --> 00:05:44,700
that's more along those lines will be

00:05:42,690 --> 00:05:49,110
going along with scenario or story BDD

00:05:44,700 --> 00:05:52,260
for this particular talk so BDD was come

00:05:49,110 --> 00:05:54,150
up with by Dan North and it's described

00:05:52,260 --> 00:05:55,800
read this you got ten seconds there'll

00:05:54,150 --> 00:05:58,229
be a pop quiz at the end of the dock and

00:05:55,800 --> 00:06:00,150
BD is a second generation outside in

00:05:58,229 --> 00:06:02,190
pull based multiple stakeholder multiple

00:06:00,150 --> 00:06:04,130
scale high automation agile methodology

00:06:02,190 --> 00:06:09,150
we've got a number of buzz words here

00:06:04,130 --> 00:06:12,270
pull based stakeholders scale and agile

00:06:09,150 --> 00:06:14,010
we like buzzwords and I'm gonna pick out

00:06:12,270 --> 00:06:16,820
a few key points from this it's second

00:06:14,010 --> 00:06:19,349
generation in that it didn't seek to

00:06:16,820 --> 00:06:21,479
completely get rid of TDD but it evolved

00:06:19,349 --> 00:06:23,190
from it it looked at the lessons learned

00:06:21,479 --> 00:06:25,080
in TDD and kind of went okay I can

00:06:23,190 --> 00:06:26,310
improve upon these we can we can make

00:06:25,080 --> 00:06:31,560
this a better process for everyone

00:06:26,310 --> 00:06:34,669
involved people focus in on TDD kind of

00:06:31,560 --> 00:06:37,020
focus on the how how is something bill

00:06:34,669 --> 00:06:38,340
but they lose sight of the most

00:06:37,020 --> 00:06:39,630
important question as far as I'm

00:06:38,340 --> 00:06:42,479
concerned in software development which

00:06:39,630 --> 00:06:43,520
is why why am i building this what am I

00:06:42,479 --> 00:06:45,629
trying to achieve

00:06:43,520 --> 00:06:46,889
because you've told me what to build but

00:06:45,629 --> 00:06:48,270
that doesn't tell me what your goals are

00:06:46,889 --> 00:06:49,229
for this particular thing if you tell me

00:06:48,270 --> 00:06:51,509
about your goals and your achievements

00:06:49,229 --> 00:06:53,909
and what you want to achieve then we can

00:06:51,509 --> 00:06:55,169
work together to create a system that

00:06:53,909 --> 00:06:57,169
actually achieves that rather than just

00:06:55,169 --> 00:07:00,449
you telling me what to do I go and do it

00:06:57,169 --> 00:07:02,520
and these come from it being a multiple

00:07:00,449 --> 00:07:03,779
stakeholder based methodology it works

00:07:02,520 --> 00:07:05,399
best when you do get multiple

00:07:03,779 --> 00:07:06,749
stakeholders involved and I don't just

00:07:05,399 --> 00:07:07,889
mean getting your team of developers and

00:07:06,749 --> 00:07:09,210
sitting down and doing it unless you're

00:07:07,889 --> 00:07:11,369
all the most important part of that

00:07:09,210 --> 00:07:13,710
particular part of the system I mean

00:07:11,369 --> 00:07:16,319
talking to other areas of the business

00:07:13,710 --> 00:07:19,499
that are involved that's where the best

00:07:16,319 --> 00:07:20,969
things come from and it works quite

00:07:19,499 --> 00:07:23,119
nicely as an agile methodology because

00:07:20,969 --> 00:07:25,889
it works really well in short iterations

00:07:23,119 --> 00:07:27,149
the shorter feedback loops you have the

00:07:25,889 --> 00:07:30,449
better this sort of particular thing

00:07:27,149 --> 00:07:31,439
works so I'm going to sort of hark on

00:07:30,449 --> 00:07:34,110
this point of multiple stakeholders

00:07:31,439 --> 00:07:35,899
quite a lot and they're absolutely

00:07:34,110 --> 00:07:39,149
crucial for behavior driven development

00:07:35,899 --> 00:07:42,149
without them quite frankly you're not

00:07:39,149 --> 00:07:43,559
doing behavior driven development but

00:07:42,149 --> 00:07:45,719
through these conversations you have you

00:07:43,559 --> 00:07:47,430
end up doing things like establishing a

00:07:45,719 --> 00:07:48,749
common language with each other you will

00:07:47,430 --> 00:07:51,300
start referring to things by the same

00:07:48,749 --> 00:07:52,439
terms which goes on to improve your code

00:07:51,300 --> 00:07:53,849
because if you use it to drive that

00:07:52,439 --> 00:07:55,319
development suddenly you realize I'm

00:07:53,849 --> 00:07:57,809
using these business terms in my code

00:07:55,319 --> 00:08:01,559
which is the sort of gateway to domain

00:07:57,809 --> 00:08:02,939
driven design effectively so with these

00:08:01,559 --> 00:08:05,729
stakeholders we'll end up having things

00:08:02,939 --> 00:08:08,159
like technical people and they'll live

00:08:05,729 --> 00:08:10,019
in their little bubble then we have

00:08:08,159 --> 00:08:12,959
users of the system they'll live in

00:08:10,019 --> 00:08:14,219
their little bubble we'll have the

00:08:12,959 --> 00:08:16,139
domain experts and they'll live in their

00:08:14,219 --> 00:08:17,459
little bubble and each of these groups

00:08:16,139 --> 00:08:20,879
have different ideas of what they

00:08:17,459 --> 00:08:23,610
actually want no one group has the best

00:08:20,879 --> 00:08:25,439
idea the best idea comes from all of you

00:08:23,610 --> 00:08:27,089
through talking through these things

00:08:25,439 --> 00:08:29,629
that you want having the conversations

00:08:27,089 --> 00:08:32,159
that's where the good stuff comes from

00:08:29,629 --> 00:08:34,560
in reality it's not necessarily always

00:08:32,159 --> 00:08:36,360
about the people it's about what the

00:08:34,560 --> 00:08:37,740
technical people think they want that's

00:08:36,360 --> 00:08:39,479
a key part what they think they want

00:08:37,740 --> 00:08:40,800
because they what they think they want

00:08:39,479 --> 00:08:42,139
and then what they actually want two

00:08:40,800 --> 00:08:44,399
very different things

00:08:42,139 --> 00:08:46,829
it's what the users of the system think

00:08:44,399 --> 00:08:49,259
they want and it's what the business

00:08:46,829 --> 00:08:50,459
thinks they want and again that's where

00:08:49,259 --> 00:08:51,630
the good stuff comes when you get people

00:08:50,459 --> 00:08:53,459
in a room talking about what they think

00:08:51,630 --> 00:08:54,870
they want suddenly they start realizing

00:08:53,459 --> 00:08:55,720
hi there's another aspect to this I

00:08:54,870 --> 00:08:58,210
haven't considered

00:08:55,720 --> 00:08:59,200
and in the end that overlap in the

00:08:58,210 --> 00:09:01,630
center of the Venn diagram where

00:08:59,200 --> 00:09:06,910
everyone's ideas kind of come together

00:09:01,630 --> 00:09:08,820
that's where the good stuff lies so with

00:09:06,910 --> 00:09:11,410
behavior driven development and

00:09:08,820 --> 00:09:16,960
conversations are the single most

00:09:11,410 --> 00:09:20,560
important part of BDD it's a

00:09:16,960 --> 00:09:22,360
collaborative process so these

00:09:20,560 --> 00:09:23,830
conversations with other people form

00:09:22,360 --> 00:09:26,350
that starting point for collaboration

00:09:23,830 --> 00:09:28,030
where you sit down you talk through what

00:09:26,350 --> 00:09:31,360
the process is what you need to achieve

00:09:28,030 --> 00:09:32,590
and then just through honestly natural

00:09:31,360 --> 00:09:34,690
discussion is what it ends up it

00:09:32,590 --> 00:09:35,650
evolving into you realize okay I'm

00:09:34,690 --> 00:09:40,570
starting to get an idea of what's going

00:09:35,650 --> 00:09:42,490
on now the order you really want to do

00:09:40,570 --> 00:09:45,340
this is you want to have these

00:09:42,490 --> 00:09:47,170
conversations first and then when you're

00:09:45,340 --> 00:09:50,830
having them you want to start capturing

00:09:47,170 --> 00:09:52,510
them writing them down and then you want

00:09:50,830 --> 00:09:53,530
to leave this to last but the automating

00:09:52,510 --> 00:09:55,120
conversations is the part that

00:09:53,530 --> 00:09:57,310
developers love jumping to because we

00:09:55,120 --> 00:09:58,690
love automating things and we'll jump to

00:09:57,310 --> 00:10:00,700
automating the conversations stick them

00:09:58,690 --> 00:10:03,850
all in feature files in go akin run them

00:10:00,700 --> 00:10:05,290
and be hand like cool um but if you

00:10:03,850 --> 00:10:06,820
haven't captured those conversations

00:10:05,290 --> 00:10:09,040
you're not automating conversations

00:10:06,820 --> 00:10:13,210
you're automating what you want as a

00:10:09,040 --> 00:10:14,200
developer which is not the same thing so

00:10:13,210 --> 00:10:16,390
you need to have these conversations

00:10:14,200 --> 00:10:19,120
before you start writing code in your

00:10:16,390 --> 00:10:21,600
system and don't do it too far before

00:10:19,120 --> 00:10:24,130
don't do it months and months in advance

00:10:21,600 --> 00:10:26,200
but definitely before you start writing

00:10:24,130 --> 00:10:28,660
code in reality before you really start

00:10:26,200 --> 00:10:29,980
thinking about the code because behavior

00:10:28,660 --> 00:10:31,570
driven development focuses on the

00:10:29,980 --> 00:10:33,820
business requirements and what everyone

00:10:31,570 --> 00:10:35,710
wants doesn't care how its implemented

00:10:33,820 --> 00:10:37,630
it doesn't care what piece of code

00:10:35,710 --> 00:10:40,089
you're writing to achieve this it looks

00:10:37,630 --> 00:10:44,710
to focus on ok what's the goal here what

00:10:40,089 --> 00:10:46,000
are we all working towards then when

00:10:44,710 --> 00:10:47,740
you've had them then you can start

00:10:46,000 --> 00:10:50,530
capturing them and we can use them to

00:10:47,740 --> 00:10:53,110
drive development from these

00:10:50,530 --> 00:10:56,020
conversations you'll end up writing them

00:10:53,110 --> 00:10:58,480
in format called gherkin I will go

00:10:56,020 --> 00:10:59,860
through that in a little bit but when

00:10:58,480 --> 00:11:01,480
you're talking through systems with

00:10:59,860 --> 00:11:03,670
people you'll realize that everyone

00:11:01,480 --> 00:11:05,380
starts talking in examples they'll give

00:11:03,670 --> 00:11:07,660
you examples of what they've encountered

00:11:05,380 --> 00:11:08,890
they relate these conversations they're

00:11:07,660 --> 00:11:10,630
having about a system to their real

00:11:08,890 --> 00:11:12,820
world

00:11:10,630 --> 00:11:14,110
and they'll kind of start describing

00:11:12,820 --> 00:11:15,160
things in a way that you think okay

00:11:14,110 --> 00:11:16,150
that's I can see that's actually

00:11:15,160 --> 00:11:20,650
happened to them that's something

00:11:16,150 --> 00:11:22,180
they've actually encountered and Liz

00:11:20,650 --> 00:11:25,630
Keogh put it really really sort of

00:11:22,180 --> 00:11:28,180
nicely and ultimately BDD is the art of

00:11:25,630 --> 00:11:30,250
using examples in conversation to

00:11:28,180 --> 00:11:31,750
illustrate behavior it's about having

00:11:30,250 --> 00:11:33,190
these conversations using those examples

00:11:31,750 --> 00:11:35,590
that you're picking up with the people

00:11:33,190 --> 00:11:37,000
you're talking to and using those to

00:11:35,590 --> 00:11:39,940
illustrate the behavior in your system

00:11:37,000 --> 00:11:41,620
and how you want it to work so

00:11:39,940 --> 00:11:42,940
unfortunately if you became a programmer

00:11:41,620 --> 00:11:44,380
because you want to hide in a dark room

00:11:42,940 --> 00:11:46,450
on your own not talk to anyone and write

00:11:44,380 --> 00:11:49,300
code all day BDD is not going to work

00:11:46,450 --> 00:11:52,500
for you but I would argue that BDD

00:11:49,300 --> 00:11:52,500
ultimately builds better software

00:11:53,580 --> 00:11:58,360
examples are completely essential to

00:11:56,200 --> 00:12:01,660
what we're doing as let's mention that

00:11:58,360 --> 00:12:03,580
they are that's the art of BDD but

00:12:01,660 --> 00:12:05,920
examples remove a lot of ambiguity in

00:12:03,580 --> 00:12:07,630
systems when you're talking as a

00:12:05,920 --> 00:12:10,210
developer you often think in terms of

00:12:07,630 --> 00:12:12,370
rules we like rules we like structure we

00:12:10,210 --> 00:12:14,890
like okay give me a defined set of

00:12:12,370 --> 00:12:16,870
things to work with but rules can be

00:12:14,890 --> 00:12:18,880
incredibly ambiguous once you dig a

00:12:16,870 --> 00:12:21,070
little bit deeper on the surface it

00:12:18,880 --> 00:12:21,970
might make sense or without even

00:12:21,070 --> 00:12:23,350
realizing it you'll start making

00:12:21,970 --> 00:12:26,740
assumptions on the rules you've been

00:12:23,350 --> 00:12:27,910
given for example if you're working and

00:12:26,740 --> 00:12:30,520
building a point-of-sale system in a

00:12:27,910 --> 00:12:33,160
shop and they say ok students in this

00:12:30,520 --> 00:12:35,500
shop get a 10% discount and you go cool

00:12:33,160 --> 00:12:37,270
ok you go away and build a system that

00:12:35,500 --> 00:12:40,000
gives students a 10% discount in the

00:12:37,270 --> 00:12:41,980
store and then a student turns up and

00:12:40,000 --> 00:12:46,180
looks to buy item that's already 50% off

00:12:41,980 --> 00:12:49,300
what does it do does the 50% discount

00:12:46,180 --> 00:12:51,640
override the 10% do they get it for a

00:12:49,300 --> 00:12:54,760
further 10% off if it was 10 pounds it's

00:12:51,640 --> 00:12:56,500
now 5 do they get it for 4050 if you

00:12:54,760 --> 00:12:58,390
don't seek to clarify these things with

00:12:56,500 --> 00:12:59,830
actual examples of what happened you

00:12:58,390 --> 00:13:03,010
look at rules you implement them and

00:12:59,830 --> 00:13:05,650
then there's a 50/50 chance that you'll

00:13:03,010 --> 00:13:07,630
be wrong but my experience both ways are

00:13:05,650 --> 00:13:08,620
wrong often because business

00:13:07,630 --> 00:13:12,550
requirements are very different than

00:13:08,620 --> 00:13:15,900
just 50/50 so when you talk through a

00:13:12,550 --> 00:13:18,190
system in examples it boils down to just

00:13:15,900 --> 00:13:20,320
asking when you're having a conversation

00:13:18,190 --> 00:13:21,580
if you hear a rule mentioned to you it's

00:13:20,320 --> 00:13:22,520
kind of having that internal switch that

00:13:21,580 --> 00:13:23,630
goes

00:13:22,520 --> 00:13:24,980
okay I need to explore that a little

00:13:23,630 --> 00:13:25,580
further I can't just take this at face

00:13:24,980 --> 00:13:28,580
value

00:13:25,580 --> 00:13:30,050
and the question I always get asked is

00:13:28,580 --> 00:13:32,630
well how do I do that how do I get

00:13:30,050 --> 00:13:36,760
examples from people I'm just kind of

00:13:32,630 --> 00:13:39,740
ahead five words can I have an example

00:13:36,760 --> 00:13:42,080
and all you need to ask for someone is

00:13:39,740 --> 00:13:43,880
can I have an example and when they say

00:13:42,080 --> 00:13:46,070
to you I want a 10% discount you say to

00:13:43,880 --> 00:13:47,330
them can I have an example and someone

00:13:46,070 --> 00:13:48,740
who's got that real-world experience

00:13:47,330 --> 00:13:50,060
with the system will immediately go back

00:13:48,740 --> 00:13:51,650
into their kind of internal memory and

00:13:50,060 --> 00:13:53,060
be like right I've encountered this

00:13:51,650 --> 00:13:54,650
before this is what happened and this is

00:13:53,060 --> 00:13:55,940
what should have happened and they'll

00:13:54,650 --> 00:13:57,140
start telling talking you through it and

00:13:55,940 --> 00:13:59,960
in reality you'll end up with more than

00:13:57,140 --> 00:14:01,400
one example but just taking those rules

00:13:59,960 --> 00:14:03,290
at face value and accepting those as

00:14:01,400 --> 00:14:05,330
gospel that's not the way this works

00:14:03,290 --> 00:14:07,220
it's about seeking more clarification

00:14:05,330 --> 00:14:09,050
through don't don't focus on rules

00:14:07,220 --> 00:14:13,520
through focus on the human interaction

00:14:09,050 --> 00:14:15,950
in the real world conversations so as

00:14:13,520 --> 00:14:19,090
developers we like doing things with

00:14:15,950 --> 00:14:23,540
languages this is a lot of sort of

00:14:19,090 --> 00:14:25,220
meatspace talking right now so we want

00:14:23,540 --> 00:14:27,530
to start looking at how can I start

00:14:25,220 --> 00:14:30,410
putting this in place what can I do is

00:14:27,530 --> 00:14:32,180
it about developer to take these

00:14:30,410 --> 00:14:34,790
conversations I'm having work with them

00:14:32,180 --> 00:14:37,910
and actually start improving the way I'm

00:14:34,790 --> 00:14:40,730
working and just really quick I can't

00:14:37,910 --> 00:14:43,940
Lisi show of hands and shout and wave if

00:14:40,730 --> 00:14:47,300
you've used be had before I see a few

00:14:43,940 --> 00:14:49,340
hands waving whose first experience with

00:14:47,300 --> 00:14:51,290
B hat was writing given I am on this

00:14:49,340 --> 00:14:56,230
page when I click this button this thing

00:14:51,290 --> 00:14:56,230
is on the page and sees that yeah okay

00:14:57,370 --> 00:15:01,820
gherkin is a way to describe that sort

00:14:59,780 --> 00:15:03,020
of interaction with the system and a lot

00:15:01,820 --> 00:15:04,790
of people's first encounter with it is

00:15:03,020 --> 00:15:08,000
cool I can drive a browser with this and

00:15:04,790 --> 00:15:09,530
that's not wrong it's a little misguided

00:15:08,000 --> 00:15:11,540
but that's the way a lot of us come to

00:15:09,530 --> 00:15:13,310
first approach things I did I came to it

00:15:11,540 --> 00:15:15,350
and I was like an ultimate browsers with

00:15:13,310 --> 00:15:17,750
this and do it that way and then I found

00:15:15,350 --> 00:15:19,730
out that that's using B has a testing

00:15:17,750 --> 00:15:20,960
tool but it's not using it for behavior

00:15:19,730 --> 00:15:22,510
driven development and they are two

00:15:20,960 --> 00:15:24,230
different things

00:15:22,510 --> 00:15:26,150
so when we're capturing these

00:15:24,230 --> 00:15:27,310
conversations we write them in a format

00:15:26,150 --> 00:15:29,810
called gherkin

00:15:27,310 --> 00:15:33,560
it's a domain-specific language that

00:15:29,810 --> 00:15:36,529
focuses on a few key words and phrases

00:15:33,560 --> 00:15:38,839
to be able to illustrate the Pavey

00:15:36,529 --> 00:15:42,110
that we're describing and the good thing

00:15:38,839 --> 00:15:45,199
about gherkin is it's human readable it

00:15:42,110 --> 00:15:48,230
works for stakeholders that are not

00:15:45,199 --> 00:15:49,639
technical we as developers look at our

00:15:48,230 --> 00:15:51,980
unit tests and we think I can read that

00:15:49,639 --> 00:15:53,959
that's really simple that's I can that

00:15:51,980 --> 00:15:56,360
that's fairly straightforward you show

00:15:53,959 --> 00:15:57,620
it to the business analyst product owner

00:15:56,360 --> 00:15:58,819
someone who's non-technical and all they

00:15:57,620 --> 00:16:02,059
see is just the green text from the

00:15:58,819 --> 00:16:03,860
matrix and they switch off so as

00:16:02,059 --> 00:16:05,269
readable as it is to us anything code

00:16:03,860 --> 00:16:06,589
related people just immediately switch

00:16:05,269 --> 00:16:07,430
off see the matrix and go yeah that's

00:16:06,589 --> 00:16:09,769
fine and thinking about when they're

00:16:07,430 --> 00:16:12,319
getting the next cup of tea it doesn't

00:16:09,769 --> 00:16:13,670
work so gherkin is a really nice format

00:16:12,319 --> 00:16:14,990
that's literally just human readable

00:16:13,670 --> 00:16:16,610
language that they can read through and

00:16:14,990 --> 00:16:18,170
agree that yeah that's how this should

00:16:16,610 --> 00:16:19,970
work that's what this should do that's

00:16:18,170 --> 00:16:24,319
describing the value that I'm trying to

00:16:19,970 --> 00:16:25,639
achieve tools that work with it can

00:16:24,319 --> 00:16:27,589
include multilingual support as well

00:16:25,639 --> 00:16:29,689
which is quite nice and if you're

00:16:27,589 --> 00:16:30,920
working with cross language barrier

00:16:29,689 --> 00:16:35,509
teams it can be quite nice for that as

00:16:30,920 --> 00:16:37,610
well if you're a pirate good job you got

00:16:35,509 --> 00:16:39,529
supporting this as well so we're

00:16:37,610 --> 00:16:41,839
including pirates if we need to

00:16:39,529 --> 00:16:45,279
rebuilding that I'm the latest software

00:16:41,839 --> 00:16:47,449
source first for swashbuckling good work

00:16:45,279 --> 00:16:49,040
but what specifically gherkin is a

00:16:47,449 --> 00:16:51,230
keyword based language I'll go through

00:16:49,040 --> 00:16:53,000
the keywords in a little bit and it's

00:16:51,230 --> 00:16:56,089
line oriented so each line has new

00:16:53,000 --> 00:16:58,930
meaning in gherkin so it's a bit like

00:16:56,089 --> 00:17:00,800
Gamal in the the line based way

00:16:58,930 --> 00:17:03,589
importantly though gherkin is

00:17:00,800 --> 00:17:05,149
documentation for your system who here

00:17:03,589 --> 00:17:07,730
writes documentation for their system

00:17:05,149 --> 00:17:08,839
explicitly who here likes writing

00:17:07,730 --> 00:17:13,640
documentation for their system

00:17:08,839 --> 00:17:14,809
explicitly for your hands and the

00:17:13,640 --> 00:17:15,799
problem with documentation is pretty

00:17:14,809 --> 00:17:18,260
much as soon as you've written it it's

00:17:15,799 --> 00:17:20,299
out of date and you have to go back and

00:17:18,260 --> 00:17:22,520
you keep it updated that proves to be a

00:17:20,299 --> 00:17:24,110
lot of work with gherkin because you're

00:17:22,520 --> 00:17:26,149
describing the value that this piece of

00:17:24,110 --> 00:17:27,620
software is achieving you can kind of

00:17:26,149 --> 00:17:29,600
document what the system is meant to be

00:17:27,620 --> 00:17:30,799
doing just by having these files that

00:17:29,600 --> 00:17:33,559
you're using for your development and

00:17:30,799 --> 00:17:36,350
your automation and because of that if

00:17:33,559 --> 00:17:38,360
the feature changes or the goal changes

00:17:36,350 --> 00:17:39,679
well the feature files should change and

00:17:38,360 --> 00:17:41,000
therefore that's updated just through

00:17:39,679 --> 00:17:44,720
the process of development it's not an

00:17:41,000 --> 00:17:46,250
explicit documentation test and as I

00:17:44,720 --> 00:17:49,400
mentioned gherkin allows us automate

00:17:46,250 --> 00:17:55,070
within a system which is great because

00:17:49,400 --> 00:17:56,390
developers we love automation we will

00:17:55,070 --> 00:17:58,010
automate absolutely anything if we can

00:17:56,390 --> 00:18:00,170
hey boss I spent the past week

00:17:58,010 --> 00:18:01,670
automating this task yeah but you do it

00:18:00,170 --> 00:18:04,520
once a day and it takes five minutes

00:18:01,670 --> 00:18:11,390
yeah well given a few years I'll get my

00:18:04,520 --> 00:18:13,760
time back I've mentioned it briefly

00:18:11,390 --> 00:18:15,290
before with gherkin just because you're

00:18:13,760 --> 00:18:16,940
you're writing gherkin in your systems

00:18:15,290 --> 00:18:18,830
and it doesn't mean you're doing

00:18:16,940 --> 00:18:20,300
behavior-driven development it just

00:18:18,830 --> 00:18:29,690
means you're using gherkin as a testing

00:18:20,300 --> 00:18:32,150
tool yeah so move on to the subject of

00:18:29,690 --> 00:18:33,650
features and within a system we describe

00:18:32,150 --> 00:18:37,220
features of the application this is what

00:18:33,650 --> 00:18:39,140
our particular things should do and in

00:18:37,220 --> 00:18:41,660
agile world they are often considered

00:18:39,140 --> 00:18:43,040
user stories a journey through the

00:18:41,660 --> 00:18:46,520
system and how it should work what the

00:18:43,040 --> 00:18:47,960
user expects to happen few key tips

00:18:46,520 --> 00:18:50,380
listen to me a novel writing class don't

00:18:47,960 --> 00:18:54,770
worry but when you're writing stories

00:18:50,380 --> 00:18:57,590
don't start with once upon a time but be

00:18:54,770 --> 00:18:59,300
descriptive when we're talking through

00:18:57,590 --> 00:19:02,690
these examples don't be vague don't be

00:18:59,300 --> 00:19:04,010
overly when a thing happens be concrete

00:19:02,690 --> 00:19:06,770
in the examples that you're working with

00:19:04,010 --> 00:19:08,330
but that comes for using real-world

00:19:06,770 --> 00:19:09,920
examples in what it is you're building

00:19:08,330 --> 00:19:13,490
those come from the conversations you're

00:19:09,920 --> 00:19:14,540
having describe the business logic and

00:19:13,490 --> 00:19:16,490
the business value that you're working

00:19:14,540 --> 00:19:19,150
with here don't describe how it's

00:19:16,490 --> 00:19:21,260
implemented that doesn't matter

00:19:19,150 --> 00:19:21,680
and you want to give context to what

00:19:21,260 --> 00:19:23,780
you're doing

00:19:21,680 --> 00:19:26,120
often the context comes in the form of

00:19:23,780 --> 00:19:27,560
why why am i doing this if I'm told to

00:19:26,120 --> 00:19:29,450
do something it's very difficult for me

00:19:27,560 --> 00:19:31,220
to do it unless I know why I'm doing it

00:19:29,450 --> 00:19:32,810
I want meaning behind the work that I'm

00:19:31,220 --> 00:19:35,350
doing and if I can if I know that

00:19:32,810 --> 00:19:37,580
meaning then I'm more able to be able to

00:19:35,350 --> 00:19:39,140
potentially offer an alternative route

00:19:37,580 --> 00:19:41,090
that might achieve that goal a little

00:19:39,140 --> 00:19:46,730
bit better it might not but we don't

00:19:41,090 --> 00:19:49,400
know unless we talk about it when you're

00:19:46,730 --> 00:19:51,950
writing your features features go in a

00:19:49,400 --> 00:19:54,500
dot feature file in a directory that you

00:19:51,950 --> 00:19:55,580
can specify yourself or a default you

00:19:54,500 --> 00:19:58,640
know root of the project features

00:19:55,580 --> 00:20:00,920
directory you want a single feature per

00:19:58,640 --> 00:20:02,550
file you can group them in folders you

00:20:00,920 --> 00:20:03,900
can organize them however you want

00:20:02,550 --> 00:20:06,360
but you want to stick to a single peak

00:20:03,900 --> 00:20:07,920
feature per file because that allows you

00:20:06,360 --> 00:20:12,510
to make sure that it's more focused on

00:20:07,920 --> 00:20:13,890
what it's doing within this you will

00:20:12,510 --> 00:20:16,110
probably use multiple other things

00:20:13,890 --> 00:20:21,680
within it but one feature that's the way

00:20:16,110 --> 00:20:24,720
it works you've seen this sort format of

00:20:21,680 --> 00:20:30,240
describing something before as a roll I

00:20:24,720 --> 00:20:32,930
want feature so that benefit yeah this

00:20:30,240 --> 00:20:37,860
is how a lot of feature files get rid as

00:20:32,930 --> 00:20:42,270
a customer in a shop I want to be able

00:20:37,860 --> 00:20:43,830
to buy a gift so that I have a gift for

00:20:42,270 --> 00:20:47,010
my partner's birthday however it might

00:20:43,830 --> 00:20:49,950
be the problem with this particular

00:20:47,010 --> 00:20:52,650
format I found as a developer is we look

00:20:49,950 --> 00:20:53,400
as a role and we say ok cool I know who

00:20:52,650 --> 00:20:55,890
I'm working with it

00:20:53,400 --> 00:20:57,300
I want feature I'll go and build it and

00:20:55,890 --> 00:20:59,370
then we walk off we don't build with the

00:20:57,300 --> 00:21:00,660
feature and we've missed the most

00:20:59,370 --> 00:21:01,740
important part of all of this which is

00:21:00,660 --> 00:21:03,120
the benefit we're trying to achieve

00:21:01,740 --> 00:21:06,990
that's the goal we're trying to achieve

00:21:03,120 --> 00:21:08,310
here so an alternative way to word this

00:21:06,990 --> 00:21:11,070
is something that Liz Keogh came up with

00:21:08,310 --> 00:21:14,580
and it's just a very simple change but

00:21:11,070 --> 00:21:17,730
you say in order to achieve value as a

00:21:14,580 --> 00:21:20,640
role I want feature you put the value

00:21:17,730 --> 00:21:22,080
that you're trying to achieve first you

00:21:20,640 --> 00:21:24,120
can't ignore it then it's a really

00:21:22,080 --> 00:21:25,260
simple thing but subconsciously else

00:21:24,120 --> 00:21:27,480
developers will switch off from the

00:21:25,260 --> 00:21:31,400
previous example this one you put it

00:21:27,480 --> 00:21:31,400
from in center you can't ignore it them

00:21:32,450 --> 00:21:36,050
within a feature where they're not

00:21:34,350 --> 00:21:39,450
working with something called scenarios

00:21:36,050 --> 00:21:43,290
now a scenario describes a situation an

00:21:39,450 --> 00:21:45,420
example in your system as I've mentioned

00:21:43,290 --> 00:21:47,040
before in the conversational side of it

00:21:45,420 --> 00:21:48,660
examples are absolutely essential to

00:21:47,040 --> 00:21:51,600
what we do there the art of bar bait

00:21:48,660 --> 00:21:53,100
behavior driven development without them

00:21:51,600 --> 00:21:56,340
we're not really going to be able to

00:21:53,100 --> 00:21:57,540
build the best software and within our

00:21:56,340 --> 00:22:00,120
system features can have multiple

00:21:57,540 --> 00:22:01,860
scenarios so a single feature per file

00:22:00,120 --> 00:22:03,540
but a feature can have multiple ways of

00:22:01,860 --> 00:22:06,450
describing examples that that feature

00:22:03,540 --> 00:22:09,060
may work so if we were doing login on a

00:22:06,450 --> 00:22:10,950
site for example authentication and we

00:22:09,060 --> 00:22:14,400
might have separate files for login

00:22:10,950 --> 00:22:15,910
logout register forgotten password but

00:22:14,400 --> 00:22:17,350
within that we might have feature

00:22:15,910 --> 00:22:19,270
files that describe logging in with

00:22:17,350 --> 00:22:21,550
correct credentials logging in with

00:22:19,270 --> 00:22:24,490
incorrect credentials logging in on a

00:22:21,550 --> 00:22:25,990
disabled account for example those are

00:22:24,490 --> 00:22:27,460
different examples of how the login

00:22:25,990 --> 00:22:31,150
feature could work but they can all live

00:22:27,460 --> 00:22:32,470
within the same file and then with

00:22:31,150 --> 00:22:35,260
scenarios the way we describe this

00:22:32,470 --> 00:22:37,180
because this is line based so now here's

00:22:35,260 --> 00:22:40,990
half steps and the step describes what

00:22:37,180 --> 00:22:47,440
actually happens on each execution phase

00:22:40,990 --> 00:22:51,120
of the Gherkin file steps rely on a few

00:22:47,440 --> 00:22:53,890
inc or point keywords the first is given

00:22:51,120 --> 00:22:56,980
in testing the phrase that's often used

00:22:53,890 --> 00:23:00,540
is a range actor sir or assemble actor

00:22:56,980 --> 00:23:03,580
sir and the first part of any scenario

00:23:00,540 --> 00:23:05,560
specification or test is to put yourself

00:23:03,580 --> 00:23:08,740
in a known state what what world am i

00:23:05,560 --> 00:23:11,140
working in here because if I don't have

00:23:08,740 --> 00:23:15,310
a known state for this example every

00:23:11,140 --> 00:23:16,900
single time I can't necessarily assert

00:23:15,310 --> 00:23:18,370
that the behavior is gonna be the same I

00:23:16,900 --> 00:23:19,690
can't tell you that the behaviors going

00:23:18,370 --> 00:23:21,340
to be the same the next time I run it if

00:23:19,690 --> 00:23:22,980
I'm not if I'm not working from the same

00:23:21,340 --> 00:23:25,180
point in my system

00:23:22,980 --> 00:23:28,600
that's what given does it puts us in a

00:23:25,180 --> 00:23:30,490
known state to work with we then use

00:23:28,600 --> 00:23:32,110
when to describe the key action that

00:23:30,490 --> 00:23:34,150
we're actually implementing within our

00:23:32,110 --> 00:23:37,600
system what's the particularly key

00:23:34,150 --> 00:23:39,940
business rule or piece of business value

00:23:37,600 --> 00:23:42,970
that we're trying to achieve here what

00:23:39,940 --> 00:23:44,560
are we trying to do and then in order to

00:23:42,970 --> 00:23:46,660
observe the outcome of the behavior that

00:23:44,560 --> 00:23:48,130
we're testing and we use then which

00:23:46,660 --> 00:23:51,520
describes something that we can observe

00:23:48,130 --> 00:23:53,500
that basically tells us that the system

00:23:51,520 --> 00:23:55,540
has done what it should do is my

00:23:53,500 --> 00:23:56,650
behavior correct based on being in a

00:23:55,540 --> 00:24:03,090
known state and then doing something

00:23:56,650 --> 00:24:05,140
with it so we might have a scenario that

00:24:03,090 --> 00:24:07,060
reads given I have a large t-shirt

00:24:05,140 --> 00:24:09,160
product when I had a large t-shirt to my

00:24:07,060 --> 00:24:11,620
basket then I should have a large

00:24:09,160 --> 00:24:13,810
t-shirt in my basket what this is done

00:24:11,620 --> 00:24:15,430
it's a very simple example but what it

00:24:13,810 --> 00:24:17,410
does is it says okay I'm in a known

00:24:15,430 --> 00:24:20,530
state I have a t-shirt there's a t-shirt

00:24:17,410 --> 00:24:22,360
available when I had a large t-shirt to

00:24:20,530 --> 00:24:25,420
my basket then I should see it in my

00:24:22,360 --> 00:24:26,920
basket if we hadn't set the world up

00:24:25,420 --> 00:24:28,570
with an with a t-shirt we hadn't

00:24:26,920 --> 00:24:29,420
described it well how do we know that

00:24:28,570 --> 00:24:30,920
there's even a tee

00:24:29,420 --> 00:24:32,330
available for you to put in your basket

00:24:30,920 --> 00:24:35,380
if it's not there it doesn't really

00:24:32,330 --> 00:24:37,400
describe what's actually happening

00:24:35,380 --> 00:24:37,940
there's a copy of other words to go with

00:24:37,400 --> 00:24:41,810
it as well

00:24:37,940 --> 00:24:43,490
there's and and there's but they don't

00:24:41,810 --> 00:24:45,440
do an awful lot but in terms of the

00:24:43,490 --> 00:24:46,790
human readable nature of gherkin they

00:24:45,440 --> 00:24:49,100
allow a lot of power in what we're

00:24:46,790 --> 00:24:50,240
trying to get across because it's a more

00:24:49,100 --> 00:24:51,980
human readable language they're just

00:24:50,240 --> 00:24:55,520
more natural to use these words in order

00:24:51,980 --> 00:24:57,800
to build this software so a sort of

00:24:55,520 --> 00:24:59,420
larger example might be given over a

00:24:57,800 --> 00:25:01,580
large t-shirt product that costs nine

00:24:59,420 --> 00:25:04,070
pounds ninety-nine and I have an empty

00:25:01,580 --> 00:25:06,320
basket and I am a tax-exempt customer

00:25:04,070 --> 00:25:07,820
that's setting up my world into a known

00:25:06,320 --> 00:25:11,360
state what's what situation am i working

00:25:07,820 --> 00:25:12,050
with him when I had a large t-shirt to

00:25:11,360 --> 00:25:13,820
my basket

00:25:12,050 --> 00:25:16,640
that's my action my thing that I'm

00:25:13,820 --> 00:25:19,070
performing then I have a large t-shirt

00:25:16,640 --> 00:25:22,130
in my basket and the basket total should

00:25:19,070 --> 00:25:25,250
be 90 pounds 99th but I do not have tax

00:25:22,130 --> 00:25:26,780
applied to my order so with these

00:25:25,250 --> 00:25:27,770
additional words we can sort of write

00:25:26,780 --> 00:25:30,200
something that describes the way a

00:25:27,770 --> 00:25:32,180
system works in human readable language

00:25:30,200 --> 00:25:36,710
that ultimately anyone can really go on

00:25:32,180 --> 00:25:39,740
with so with the makeup of our feature

00:25:36,710 --> 00:25:42,140
file the entire feature is considered

00:25:39,740 --> 00:25:44,090
whatever's in here there may be multiple

00:25:42,140 --> 00:25:47,320
scenarios for the sake of space I kept

00:25:44,090 --> 00:25:50,900
it just one well this is our feature

00:25:47,320 --> 00:25:53,450
within this we have our scenario as a

00:25:50,900 --> 00:25:55,850
single block here and then each of these

00:25:53,450 --> 00:25:56,930
lines acts as a step within the system

00:25:55,850 --> 00:26:00,590
that describes something that should

00:25:56,930 --> 00:26:02,390
happen so I'm gonna give you a brief

00:26:00,590 --> 00:26:07,550
story writing lesson about writing a

00:26:02,390 --> 00:26:10,400
good story scenario I can add a product

00:26:07,550 --> 00:26:13,970
to my basket given I'm on the product

00:26:10,400 --> 00:26:15,800
one page when I press add to basket then

00:26:13,970 --> 00:26:20,180
I will see playstation4 and I will see

00:26:15,800 --> 00:26:22,130
250 pounds this works goes to the

00:26:20,180 --> 00:26:24,290
website go to the right page presses the

00:26:22,130 --> 00:26:27,050
button product is put in my basket it's

00:26:24,290 --> 00:26:30,640
kind of good right this is where I

00:26:27,050 --> 00:26:33,320
started with writing gherkin and B half

00:26:30,640 --> 00:26:35,120
the way I would look at writing this now

00:26:33,320 --> 00:26:36,470
this comes from a very I know what I'm

00:26:35,120 --> 00:26:39,530
building I'm putting this in place this

00:26:36,470 --> 00:26:41,570
is what's happening perspective which

00:26:39,530 --> 00:26:42,980
there's an automation tool in a quote

00:26:41,570 --> 00:26:46,100
testing tool would

00:26:42,980 --> 00:26:47,419
a better way to describe this would be

00:26:46,100 --> 00:26:48,620
to go right back to the conversations

00:26:47,419 --> 00:26:49,880
you're having this is probably an

00:26:48,620 --> 00:26:51,950
example of something written without a

00:26:49,880 --> 00:26:53,210
conversation when you're talking through

00:26:51,950 --> 00:26:54,830
the conversation of adding products

00:26:53,210 --> 00:26:56,120
they're not gonna the state college

00:26:54,830 --> 00:26:58,190
you're working with they're not going to

00:26:56,120 --> 00:27:00,740
be focused on URLs and buttons and that

00:26:58,190 --> 00:27:03,530
sort of stuff they'll pretty much say

00:27:00,740 --> 00:27:05,210
something of more along lines of spacing

00:27:03,530 --> 00:27:07,460
issue given I have a PlayStation 4 that

00:27:05,210 --> 00:27:09,799
costs 250 pounds when I had the

00:27:07,460 --> 00:27:10,880
PlayStation 4 to my basket then I have

00:27:09,799 --> 00:27:14,090
one product in my basket and the basket

00:27:10,880 --> 00:27:17,960
total will be 250 pounds this is more of

00:27:14,090 --> 00:27:19,250
a conversational way of writing things

00:27:17,960 --> 00:27:21,919
it's come from a natural conversation

00:27:19,250 --> 00:27:25,610
and it's been captured this is a better

00:27:21,919 --> 00:27:27,770
story reason being in the previous

00:27:25,610 --> 00:27:32,150
example what happens when that button

00:27:27,770 --> 00:27:33,230
changes to say Add to Cart product when

00:27:32,150 --> 00:27:34,790
it comes back to you and says we've run

00:27:33,230 --> 00:27:35,990
extensive focus group testing we've

00:27:34,790 --> 00:27:37,640
spent millions on this and they've

00:27:35,990 --> 00:27:39,799
decided that the word basket just isn't

00:27:37,640 --> 00:27:41,240
playing well with customers we reckon we

00:27:39,799 --> 00:27:43,090
can get like a 50 percent increase in

00:27:41,240 --> 00:27:45,590
sales if we change it to say a tocar

00:27:43,090 --> 00:27:46,880
then you're gonna arm damn i've now

00:27:45,590 --> 00:27:48,799
gonna go and change all of my feature

00:27:46,880 --> 00:27:50,090
files to saying at Takai instead of add

00:27:48,799 --> 00:27:54,140
to basket because that's the button it's

00:27:50,090 --> 00:27:55,669
looking for this example is one that's

00:27:54,140 --> 00:27:57,770
written with implementation and it cares

00:27:55,669 --> 00:28:02,360
about the web because we've got a URL to

00:27:57,770 --> 00:28:06,620
visit we've got a button to press it's

00:28:02,360 --> 00:28:08,000
more of a UI based test so don't write

00:28:06,620 --> 00:28:11,030
this sort of implementation in your

00:28:08,000 --> 00:28:12,350
feature files but you can avoid that by

00:28:11,030 --> 00:28:13,760
having these conversations before you

00:28:12,350 --> 00:28:15,980
start writing the code don't just jump

00:28:13,760 --> 00:28:20,630
into using gherkin as a way to automate

00:28:15,980 --> 00:28:21,860
tests in a really quick way if you're

00:28:20,630 --> 00:28:23,030
still struggling with thinking about

00:28:21,860 --> 00:28:25,429
implementation even when you're having

00:28:23,030 --> 00:28:26,809
these conversations consider what would

00:28:25,429 --> 00:28:28,820
happen if I'm trying to build this

00:28:26,809 --> 00:28:30,620
feature in these scenarios over in what

00:28:28,820 --> 00:28:33,250
would happen if I try to run this on the

00:28:30,620 --> 00:28:36,740
command line or through a mobile app

00:28:33,250 --> 00:28:38,840
well a mobile app doesn't have URLs it

00:28:36,740 --> 00:28:41,450
has few layers and controllers and

00:28:38,840 --> 00:28:42,620
actions press Add to basket there might

00:28:41,450 --> 00:28:43,549
be a button available for that that's

00:28:42,620 --> 00:28:45,410
fine but that might work but

00:28:43,549 --> 00:28:48,730
fundamentally it doesn't describe a

00:28:45,410 --> 00:28:50,860
mobile app it describes a web interface

00:28:48,730 --> 00:28:53,210
whereas if we go back to this example

00:28:50,860 --> 00:28:54,710
this just doesn't describe any interface

00:28:53,210 --> 00:28:56,340
it doesn't care how it's run it could be

00:28:54,710 --> 00:28:57,990
done by the command line it

00:28:56,340 --> 00:29:00,390
be done via a mobile app a web interface

00:28:57,990 --> 00:29:01,740
it describes you walking into a

00:29:00,390 --> 00:29:03,360
brick-and-mortar store and actually

00:29:01,740 --> 00:29:09,150
performing this action that's what

00:29:03,360 --> 00:29:10,409
you're trying to capture here so how

00:29:09,150 --> 00:29:13,830
does developers work with it we've gone

00:29:10,409 --> 00:29:16,200
from the meatspace talking conversations

00:29:13,830 --> 00:29:17,370
and collaboration we've looked at how we

00:29:16,200 --> 00:29:20,130
can start putting these things in place

00:29:17,370 --> 00:29:21,090
into capturing these conversations but

00:29:20,130 --> 00:29:25,650
how to actually start going through the

00:29:21,090 --> 00:29:27,090
process of automating this with BDD

00:29:25,650 --> 00:29:30,149
tools we have something known as a step

00:29:27,090 --> 00:29:33,059
definition and step definitions match a

00:29:30,149 --> 00:29:34,559
step within your feature file to a piece

00:29:33,059 --> 00:29:38,460
of code that can be executed under the

00:29:34,559 --> 00:29:40,620
surface so in this example we will say

00:29:38,460 --> 00:29:43,320
given I have a large t-shirt product and

00:29:40,620 --> 00:29:45,840
then for PHP and B half using

00:29:43,320 --> 00:29:48,240
annotations it will say given I have a

00:29:45,840 --> 00:29:49,590
product and then when you've run it

00:29:48,240 --> 00:29:51,929
through this particular file under the

00:29:49,590 --> 00:29:55,830
surface P hat matches this and executes

00:29:51,929 --> 00:29:57,029
the code within this block that's kind

00:29:55,830 --> 00:30:00,870
of the starting point for everything

00:29:57,029 --> 00:30:02,610
within B hem we then have arguments and

00:30:00,870 --> 00:30:05,970
what arguments allow us to do is pass

00:30:02,610 --> 00:30:07,230
data from feature files into our step

00:30:05,970 --> 00:30:08,370
definitions in order to work with them

00:30:07,230 --> 00:30:10,289
think they're a little bit like

00:30:08,370 --> 00:30:13,559
variables effectively under the surface

00:30:10,289 --> 00:30:15,510
this is called turnip syntax with the

00:30:13,559 --> 00:30:19,250
colon product there's a big obsession

00:30:15,510 --> 00:30:21,630
with vegetables in gherkin cucumber and

00:30:19,250 --> 00:30:23,760
what it does is it'll say anything that

00:30:21,630 --> 00:30:25,919
matches either a regex pattern or this

00:30:23,760 --> 00:30:28,020
particular pan gets put into this

00:30:25,919 --> 00:30:33,990
product parameter for my step definition

00:30:28,020 --> 00:30:36,390
and then executes it through in some

00:30:33,990 --> 00:30:38,669
tools and in B hat in particular they

00:30:36,390 --> 00:30:40,620
have what's known as a suite and a

00:30:38,669 --> 00:30:45,090
profile or multiple Suites and multiple

00:30:40,620 --> 00:30:47,880
profiles what these allow you to do is

00:30:45,090 --> 00:30:50,340
to take those step definitions those all

00:30:47,880 --> 00:30:51,630
those feature files sorry and you can

00:30:50,340 --> 00:30:53,399
run the same feature file against

00:30:51,630 --> 00:30:54,899
multiple implementations so under the

00:30:53,399 --> 00:30:56,370
surface you could execute two different

00:30:54,899 --> 00:30:59,940
pieces of code based on that same

00:30:56,370 --> 00:31:01,110
feature file they effectively allow you

00:30:59,940 --> 00:31:04,320
to test features with different

00:31:01,110 --> 00:31:05,909
configurations under the surface so you

00:31:04,320 --> 00:31:08,540
could have a suite that uses the same

00:31:05,909 --> 00:31:09,860
feature files as every other suite

00:31:08,540 --> 00:31:11,060
or you could say some sweets use

00:31:09,860 --> 00:31:12,610
different feature files because they're

00:31:11,060 --> 00:31:15,590
not particularly applicable to this

00:31:12,610 --> 00:31:19,100
testing suite the world.this be a BDD

00:31:15,590 --> 00:31:20,840
suite we're working with so with sweets

00:31:19,100 --> 00:31:22,580
and tags as I'll get onto a little bit

00:31:20,840 --> 00:31:24,170
you can take use the same feature file

00:31:22,580 --> 00:31:26,120
to test different implementations of

00:31:24,170 --> 00:31:29,690
your system so what this allows you to

00:31:26,120 --> 00:31:31,520
do is have a UI sweet on the surface

00:31:29,690 --> 00:31:33,620
that uses different step definitions and

00:31:31,520 --> 00:31:35,360
different code then a service or a

00:31:33,620 --> 00:31:37,120
domain or a lower-level suite within

00:31:35,360 --> 00:31:41,030
your application

00:31:37,120 --> 00:31:43,580
so we could say this is my domain level

00:31:41,030 --> 00:31:45,590
suite I'm just testing objects here when

00:31:43,580 --> 00:31:47,810
I add the playstation4 to the basket

00:31:45,590 --> 00:31:50,180
all it does under the surface is it

00:31:47,810 --> 00:31:53,330
calls an ad product method on the basket

00:31:50,180 --> 00:31:54,440
object we've got that's cool it means

00:31:53,330 --> 00:31:56,470
we're just testing objects and the way

00:31:54,440 --> 00:31:58,790
the system works under the surface but

00:31:56,470 --> 00:32:00,500
then if we did want to run this test

00:31:58,790 --> 00:32:04,130
through a UI we could load a different

00:32:00,500 --> 00:32:07,520
step definition that says well actually

00:32:04,130 --> 00:32:09,920
now I've got the same step within my

00:32:07,520 --> 00:32:11,780
feature file I've got the same step

00:32:09,920 --> 00:32:13,460
definition annotation that matches but

00:32:11,780 --> 00:32:14,990
this would be in a different file loaded

00:32:13,460 --> 00:32:16,580
in a different what's called a context

00:32:14,990 --> 00:32:18,770
within Beha which is a world that you

00:32:16,580 --> 00:32:20,810
work it in effectively and this one

00:32:18,770 --> 00:32:23,530
instead of just calling and add a

00:32:20,810 --> 00:32:26,510
product method on a basket object is

00:32:23,530 --> 00:32:28,790
visiting a webpage and pressing a button

00:32:26,510 --> 00:32:30,680
that says add to basket so we're still

00:32:28,790 --> 00:32:32,330
doing that UI level testing but we're

00:32:30,680 --> 00:32:35,960
not describing it within our feature

00:32:32,330 --> 00:32:38,180
file so what this means is that with

00:32:35,960 --> 00:32:39,530
this example we can change our

00:32:38,180 --> 00:32:42,770
implementation without changing the

00:32:39,530 --> 00:32:45,130
documented business values and kind of

00:32:42,770 --> 00:32:48,620
that's where the power in all this lies

00:32:45,130 --> 00:32:51,440
because implementation changes a lot

00:32:48,620 --> 00:32:53,210
more frequently than business rules it's

00:32:51,440 --> 00:32:55,070
just the way it is it's always the way

00:32:53,210 --> 00:32:56,720
it's been business rules they do change

00:32:55,070 --> 00:33:00,590
then they're not immutable they do

00:32:56,720 --> 00:33:02,450
change but it's much more likely that

00:33:00,590 --> 00:33:04,580
you're told to change the implementation

00:33:02,450 --> 00:33:06,950
and don't have this particularly URL or

00:33:04,580 --> 00:33:09,500
don't have that particular button that

00:33:06,950 --> 00:33:11,150
can change quite a lot but the actual

00:33:09,500 --> 00:33:12,770
process of adding a product to your

00:33:11,150 --> 00:33:13,880
basket that's probably not going to

00:33:12,770 --> 00:33:16,280
change all that much for an e-commerce

00:33:13,880 --> 00:33:18,290
company for example that's going to be

00:33:16,280 --> 00:33:20,280
one of the core pieces of their

00:33:18,290 --> 00:33:23,920
application

00:33:20,280 --> 00:33:26,250
so I'm really quickly going to jump over

00:33:23,920 --> 00:33:34,480
to a demo that will likely cause issues

00:33:26,250 --> 00:33:37,290
we'll see okay so this is a feature file

00:33:34,480 --> 00:33:40,150
I have this is just within phpstorm

00:33:37,290 --> 00:33:41,920
but similar to the examples open using

00:33:40,150 --> 00:33:45,580
already to keep us sort of going on that

00:33:41,920 --> 00:33:48,160
theme of buying products for a basket so

00:33:45,580 --> 00:33:50,080
that I can buy gifts for friends as a

00:33:48,160 --> 00:33:52,840
customer I need to be able to put

00:33:50,080 --> 00:33:54,820
products into a basket firstly I've

00:33:52,840 --> 00:33:56,200
described what's the value I'm trying to

00:33:54,820 --> 00:33:58,450
achieve here I know that I'm trying to

00:33:56,200 --> 00:34:01,480
do it for friends I'm buying products

00:33:58,450 --> 00:34:02,350
with gifts for friends as a customer I

00:34:01,480 --> 00:34:07,180
need to be able to put them into a

00:34:02,350 --> 00:34:08,740
basket now the area between the feature

00:34:07,180 --> 00:34:10,210
file in the first scenario is kind of

00:34:08,740 --> 00:34:12,250
like a free-form text area you can

00:34:10,210 --> 00:34:16,300
pretty much do whatever you want I've

00:34:12,250 --> 00:34:17,890
put some rules in here now those aren't

00:34:16,300 --> 00:34:19,690
the be-all and end-all rules don't

00:34:17,890 --> 00:34:21,520
describe everything within the system

00:34:19,690 --> 00:34:23,140
this is just the kind of almost like a

00:34:21,520 --> 00:34:24,700
notepad to remind me what I'm working

00:34:23,140 --> 00:34:26,740
with along with the examples I'm working

00:34:24,700 --> 00:34:28,300
with I mentioned earlier that rules are

00:34:26,740 --> 00:34:30,310
very ambiguous but they're not useless

00:34:28,300 --> 00:34:31,929
they work in coordination with the

00:34:30,310 --> 00:34:33,400
examples you've got to form a fuller

00:34:31,929 --> 00:34:36,760
picture of what the system in the world

00:34:33,400 --> 00:34:38,020
you're working with in is this is just

00:34:36,760 --> 00:34:39,400
some comments about things you could do

00:34:38,020 --> 00:34:42,280
further if you do go I won't go and look

00:34:39,400 --> 00:34:45,940
at the code but we now have a scenario

00:34:42,280 --> 00:34:48,100
here I'm buying a single product given

00:34:45,940 --> 00:34:50,710
there's a Playstation 4 which costs 250

00:34:48,100 --> 00:34:52,480
pounds when I had the PlayStation 4 to

00:34:50,710 --> 00:34:53,860
the basket then I should have one

00:34:52,480 --> 00:34:57,310
product in the basket and the overall

00:34:53,860 --> 00:34:58,720
basket price should be 250 pounds if we

00:34:57,310 --> 00:35:02,620
look at the overall basket price there

00:34:58,720 --> 00:35:04,630
that matches our rules with delivery is

00:35:02,620 --> 00:35:06,280
free on orders over 100 pounds this

00:35:04,630 --> 00:35:10,660
order is over 100 pounds so the total

00:35:06,280 --> 00:35:12,220
price should be 250 pounds next example

00:35:10,660 --> 00:35:15,400
I have is I'm putting multiple products

00:35:12,220 --> 00:35:17,740
into my basket I have two products added

00:35:15,400 --> 00:35:19,090
into the basket I should have two

00:35:17,740 --> 00:35:21,970
products in the basket and the overall

00:35:19,090 --> 00:35:23,800
basket price should be 65 pounds my rule

00:35:21,970 --> 00:35:26,350
state that anything below 100 pounds

00:35:23,800 --> 00:35:28,660
costs 10 pounds delivery so 45 plus 10

00:35:26,350 --> 00:35:30,760
is 55 plus an additional 10 pounds

00:35:28,660 --> 00:35:32,950
delivery leaves me the 65 pounds for my

00:35:30,760 --> 00:35:35,180
total basket price

00:35:32,950 --> 00:35:37,430
what you may also notice as well is

00:35:35,180 --> 00:35:41,090
we've got these two tags at the top here

00:35:37,430 --> 00:35:43,490
domain and web UI in B hat if you above

00:35:41,090 --> 00:35:45,020
a scenario if you use an @ symbol what

00:35:43,490 --> 00:35:46,610
they'll do is it will tag that scenario

00:35:45,020 --> 00:35:49,280
with a particular tag it's almost like

00:35:46,610 --> 00:35:50,930
categorizing them and I've got behind

00:35:49,280 --> 00:35:53,540
the scenes some configuration that says

00:35:50,930 --> 00:35:55,760
ok I'm gonna run all my scenarios that

00:35:53,540 --> 00:35:58,570
are tagged with @ domain through one set

00:35:55,760 --> 00:36:00,830
of contexts one set of step definitions

00:35:58,570 --> 00:36:02,360
everything tampered with web UI I'm

00:36:00,830 --> 00:36:05,210
gonna run that through a different set

00:36:02,360 --> 00:36:06,770
of step definitions and finally down

00:36:05,210 --> 00:36:08,690
here I have one that's tagged JavaScript

00:36:06,770 --> 00:36:09,830
as well because for whatever reason this

00:36:08,690 --> 00:36:11,540
is a particular piece of functionality

00:36:09,830 --> 00:36:12,980
on the site that I need to run through

00:36:11,540 --> 00:36:15,080
selenium I need to run it through a full

00:36:12,980 --> 00:36:17,510
browser so I've got JavaScript

00:36:15,080 --> 00:36:18,530
I wouldn't recommend doing that with all

00:36:17,510 --> 00:36:24,080
your tests because they will be really

00:36:18,530 --> 00:36:25,930
slow now if I go and look at the code

00:36:24,080 --> 00:36:28,370
that's driving these under the surface

00:36:25,930 --> 00:36:30,680
there's a configuration file with B hat

00:36:28,370 --> 00:36:32,990
and you use it to configure your

00:36:30,680 --> 00:36:35,450
different Suites so I have a domain

00:36:32,990 --> 00:36:36,530
suite I have a work-in-progress suite if

00:36:35,450 --> 00:36:38,090
I've written some features that are

00:36:36,530 --> 00:36:40,850
still a work-in-progress they don't need

00:36:38,090 --> 00:36:42,680
to be executed I can ignore them in my

00:36:40,850 --> 00:36:44,570
domain suite up here I've tagged it with

00:36:42,680 --> 00:36:47,750
okay look at everything that's got a

00:36:44,570 --> 00:36:50,050
domain tag on it and I don't want

00:36:47,750 --> 00:36:53,840
anything that's got work in progress

00:36:50,050 --> 00:36:55,100
they tilled in B hat is not basically I

00:36:53,840 --> 00:36:55,580
don't want anything that's tagged with

00:36:55,100 --> 00:36:56,810
in progress

00:36:55,580 --> 00:37:00,080
anything tagged domain we're good to

00:36:56,810 --> 00:37:02,270
work with on that one web UI

00:37:00,080 --> 00:37:05,300
I want everything that's tagged web UI

00:37:02,270 --> 00:37:06,410
and again not working progress I don't

00:37:05,300 --> 00:37:08,810
want your script as well I'll leave

00:37:06,410 --> 00:37:10,400
those for a separate test and then I

00:37:08,810 --> 00:37:13,270
have a JavaScript street that looks for

00:37:10,400 --> 00:37:16,070
everything that's tagged with JavaScript

00:37:13,270 --> 00:37:18,500
so I've got on multiple different ways

00:37:16,070 --> 00:37:20,060
of executing this code in my system if I

00:37:18,500 --> 00:37:21,620
look at my given step if you're using

00:37:20,060 --> 00:37:23,120
phpstorm by the way it's got really nice

00:37:21,620 --> 00:37:24,530
be hat support where you can come and

00:37:23,120 --> 00:37:26,000
click on things and it'll take you to

00:37:24,530 --> 00:37:28,670
the definitions for them makes working

00:37:26,000 --> 00:37:30,110
with it quite quickly so I've got two

00:37:28,670 --> 00:37:32,960
contexts here I've got a basket domain

00:37:30,110 --> 00:37:34,340
context and a web UI context as I

00:37:32,960 --> 00:37:36,200
mentioned before contexts are the way

00:37:34,340 --> 00:37:39,140
you kind of describe the world within a

00:37:36,200 --> 00:37:41,330
system and how the world works and what

00:37:39,140 --> 00:37:42,890
environment I in am I in here so within

00:37:41,330 --> 00:37:44,060
my domain context I'm kind of working

00:37:42,890 --> 00:37:45,000
with the domain level code under the

00:37:44,060 --> 00:37:46,950
surface

00:37:45,000 --> 00:37:49,020
with my web UI context I've now got the

00:37:46,950 --> 00:37:50,700
concept of web UI to go through I've got

00:37:49,020 --> 00:37:54,240
I have a network stack or I've got a

00:37:50,700 --> 00:37:57,690
fuller application to work with so if I

00:37:54,240 --> 00:37:59,760
look at my domain context very similar

00:37:57,690 --> 00:38:02,160
to the example when I add the product to

00:37:59,760 --> 00:38:04,619
the basket I call an ad product method

00:38:02,160 --> 00:38:06,599
on a basket object if I look through the

00:38:04,619 --> 00:38:07,740
code under the surface this is don't

00:38:06,599 --> 00:38:10,140
write this code in production this is

00:38:07,740 --> 00:38:11,880
just really simplistic examples but

00:38:10,140 --> 00:38:15,030
effectively my basket object has just

00:38:11,880 --> 00:38:17,040
got an array that should be on your

00:38:15,030 --> 00:38:18,510
products I add the product to it and

00:38:17,040 --> 00:38:20,420
every time you had a product of the

00:38:18,510 --> 00:38:25,410
basket just increment the product price

00:38:20,420 --> 00:38:29,400
by the price of the product that's the

00:38:25,410 --> 00:38:33,960
way my context for that works so I can

00:38:29,400 --> 00:38:35,970
run that domain further on my domain

00:38:33,960 --> 00:38:38,460
level suite what this will do under the

00:38:35,970 --> 00:38:39,900
surface this is just a script that goes

00:38:38,460 --> 00:38:44,160
into docker and run some tests for me

00:38:39,900 --> 00:38:47,310
and to me that bit be what it's done is

00:38:44,160 --> 00:38:49,530
it's gone through and much like a lot of

00:38:47,310 --> 00:38:51,630
other automated tools gives you a nice

00:38:49,530 --> 00:38:54,060
green stuff when stuff passes red stuff

00:38:51,630 --> 00:38:57,599
if stuff doesn't pass but it's picked up

00:38:54,060 --> 00:39:00,660
the three scenarios I have that a tagged

00:38:57,599 --> 00:39:05,369
at domain and it's run those for me and

00:39:00,660 --> 00:39:07,230
it's told me ok these let me just do so

00:39:05,369 --> 00:39:10,410
you can see it these three scenarios

00:39:07,230 --> 00:39:12,359
have passed I executed 13 steps and it

00:39:10,410 --> 00:39:14,010
happened in lore point not eight seconds

00:39:12,359 --> 00:39:15,510
which is pretty quick but that's because

00:39:14,010 --> 00:39:17,790
under the surface this is just testing

00:39:15,510 --> 00:39:19,410
objects talking together this is the

00:39:17,790 --> 00:39:21,780
main level code just talking to each

00:39:19,410 --> 00:39:25,859
other there's no network that going

00:39:21,780 --> 00:39:28,050
through this if I look at the web UI

00:39:25,859 --> 00:39:29,730
context that I've got now we start

00:39:28,050 --> 00:39:30,720
getting a bit more higher level we're

00:39:29,730 --> 00:39:32,550
not dealing with objects under the

00:39:30,720 --> 00:39:33,780
surface we're actually dealing with well

00:39:32,550 --> 00:39:35,820
I've got a product page here

00:39:33,780 --> 00:39:37,770
that's a abstracted way of just

00:39:35,820 --> 00:39:40,530
effectively talking to a URL on a system

00:39:37,770 --> 00:39:42,930
and I'm opening the page with the

00:39:40,530 --> 00:39:44,430
product ID that I want to get and then

00:39:42,930 --> 00:39:46,680
I'm calling this add to basket method

00:39:44,430 --> 00:39:48,900
which under the surface just presses the

00:39:46,680 --> 00:39:50,310
button that's got an ID or a class or

00:39:48,900 --> 00:39:53,160
anything that you can match with add to

00:39:50,310 --> 00:39:54,660
basket so now we're getting into the oh

00:39:53,160 --> 00:39:56,220
look I'm actually doing the UI tests

00:39:54,660 --> 00:39:57,270
that we could have described earlier but

00:39:56,220 --> 00:39:58,320
I'm not doing it through the feature

00:39:57,270 --> 00:39:59,730
files that I'm working with

00:39:58,320 --> 00:40:03,330
I'm doing it via the context under the

00:39:59,730 --> 00:40:08,970
surface that I'm working with so now

00:40:03,330 --> 00:40:11,490
when I run my suite instead with my web

00:40:08,970 --> 00:40:15,270
UI what you'll see is it will pick up

00:40:11,490 --> 00:40:17,670
two scenarios instead it's picked up the

00:40:15,270 --> 00:40:21,000
both the ones that were tagged at domain

00:40:17,670 --> 00:40:23,400
in that web UI if we quickly go back to

00:40:21,000 --> 00:40:25,620
the configuration here you'll see that

00:40:23,400 --> 00:40:28,020
my web UI I said I didn't want anything

00:40:25,620 --> 00:40:29,730
that was tagged JavaScript in my feature

00:40:28,020 --> 00:40:31,350
file I've got three scenarios one of

00:40:29,730 --> 00:40:32,760
which is tagged web UI but it's tagged

00:40:31,350 --> 00:40:34,170
JavaScript so don't include that one

00:40:32,760 --> 00:40:38,940
just just ignore that I want to run this

00:40:34,170 --> 00:40:40,890
in a separate configuration we will

00:40:38,940 --> 00:40:42,330
notice is that it's done these two

00:40:40,890 --> 00:40:45,360
scenarios but it's taken a bit longer

00:40:42,330 --> 00:40:46,920
under the surface it's calling my

00:40:45,360 --> 00:40:48,690
symphony application and passing a

00:40:46,920 --> 00:40:50,220
request through the kernel this isn't

00:40:48,690 --> 00:40:51,150
using a full network stack it's not

00:40:50,220 --> 00:40:53,970
going through

00:40:51,150 --> 00:40:55,110
a connection to it because I've got an

00:40:53,970 --> 00:40:56,940
extension installed that means I can

00:40:55,110 --> 00:40:58,170
talk directly to my application but a

00:40:56,940 --> 00:40:59,340
lot of the time you might end up going

00:40:58,170 --> 00:41:00,510
through a full network stack which is

00:40:59,340 --> 00:41:04,370
just going to increase the time it takes

00:41:00,510 --> 00:41:09,080
to run these scenarios even further and

00:41:04,370 --> 00:41:11,670
then finally I have a JavaScript tag

00:41:09,080 --> 00:41:13,440
this effectively is using the same

00:41:11,670 --> 00:41:15,300
context as the web UI because it's

00:41:13,440 --> 00:41:18,030
driving a browser bihar under the

00:41:15,300 --> 00:41:20,100
surface uses an engine called mink which

00:41:18,030 --> 00:41:22,260
is used to talk to a number of different

00:41:20,100 --> 00:41:24,030
ways of interactive browsers so it can

00:41:22,260 --> 00:41:25,500
use a browser that's like it doesn't use

00:41:24,030 --> 00:41:27,690
phantom Jess anymore because that's gone

00:41:25,500 --> 00:41:29,370
I think but you can drive selenium with

00:41:27,690 --> 00:41:30,690
it you can drive headless PHP browsers

00:41:29,370 --> 00:41:32,670
there's a lot of number of really fast

00:41:30,690 --> 00:41:34,560
browsers that can drive when I tagged it

00:41:32,670 --> 00:41:36,890
with that JavaScript mink is told okay

00:41:34,560 --> 00:41:40,610
now you need to go and talk to selenium

00:41:36,890 --> 00:41:42,750
and in reality selenium is at the minute

00:41:40,610 --> 00:41:45,330
it will be running in a docker container

00:41:42,750 --> 00:41:47,160
this is just a dr container that runs

00:41:45,330 --> 00:41:48,360
selenium and nothing else so that i can

00:41:47,160 --> 00:41:50,070
show you that this isn't just all

00:41:48,360 --> 00:41:51,300
scripted niceness and I'm making it pass

00:41:50,070 --> 00:41:58,170
just for the sake of it it does actually

00:41:51,300 --> 00:41:59,070
do something so if I run my job I'm

00:41:58,170 --> 00:42:00,360
going to be really quick here I'm gonna

00:41:59,070 --> 00:42:04,110
run my JavaScript test and then switch

00:42:00,360 --> 00:42:06,360
to my selenium viewer you'll see

00:42:04,110 --> 00:42:08,370
effectively a Chrome browser window pop

00:42:06,360 --> 00:42:09,480
open a couple of pages load really quick

00:42:08,370 --> 00:42:10,440
and then it'll disappear behind the

00:42:09,480 --> 00:42:11,760
surface the

00:42:10,440 --> 00:42:12,900
because mink behind-the-scenes is being

00:42:11,760 --> 00:42:15,150
told okay now you need to talk to

00:42:12,900 --> 00:42:17,310
selenium go away and drive that and

00:42:15,150 --> 00:42:22,589
we'll do that in a proper proper full-on

00:42:17,310 --> 00:42:25,650
browser popped up it's got it was pretty

00:42:22,589 --> 00:42:28,829
quick thanks to some docker magnet for

00:42:25,650 --> 00:42:31,170
magic well you'll also see is that this

00:42:28,829 --> 00:42:32,369
has only run one scenario it's used

00:42:31,170 --> 00:42:34,230
three steps but it's only run one

00:42:32,369 --> 00:42:35,790
scenario and it's actually taking one

00:42:34,230 --> 00:42:38,099
point six seven seconds which might not

00:42:35,790 --> 00:42:40,319
seem like a lot of time but this is a a

00:42:38,099 --> 00:42:42,540
really simple test B not a very big

00:42:40,319 --> 00:42:44,579
system that's doing an awful lot and C

00:42:42,540 --> 00:42:46,349
this is one of potentially thousands of

00:42:44,579 --> 00:42:49,680
tests or examples or scenarios that you

00:42:46,349 --> 00:42:51,510
may have within a system so when people

00:42:49,680 --> 00:42:53,520
sort of look at the their first

00:42:51,510 --> 00:42:56,910
interaction with B hat is to just jump

00:42:53,520 --> 00:42:59,040
in an automated browser yes it works but

00:42:56,910 --> 00:43:01,680
you're using B hat as a an automation

00:42:59,040 --> 00:43:04,550
tool you're not using it as a behavior

00:43:01,680 --> 00:43:04,550
driven development tool

00:43:10,730 --> 00:43:18,050
so in summary the way I can sort of wrap

00:43:13,410 --> 00:43:20,910
this up BDD is about collaboration

00:43:18,050 --> 00:43:24,210
through conversation with concrete

00:43:20,910 --> 00:43:25,410
examples and the way you're working with

00:43:24,210 --> 00:43:28,230
those three things if you collaborate

00:43:25,410 --> 00:43:29,940
and you have those conversations and you

00:43:28,230 --> 00:43:33,150
come up with those concrete examples in

00:43:29,940 --> 00:43:35,400
the system you're 90% of the way there

00:43:33,150 --> 00:43:36,750
the automation stuff that's just an

00:43:35,400 --> 00:43:38,490
implementation detail that's just how

00:43:36,750 --> 00:43:40,440
you put it within your system but if

00:43:38,490 --> 00:43:42,270
you're talking to people even if you're

00:43:40,440 --> 00:43:43,950
not capturing those conversations you're

00:43:42,270 --> 00:43:45,569
already getting an idea of what the

00:43:43,950 --> 00:43:50,579
system should be doing outside of your

00:43:45,569 --> 00:43:53,339
little developer bubble you want your

00:43:50,579 --> 00:43:54,690
stories told by real-world examples you

00:43:53,339 --> 00:43:55,980
want to use those real-world examples

00:43:54,690 --> 00:43:58,859
from people that have an investment in

00:43:55,980 --> 00:44:00,420
your system that you're building you

00:43:58,859 --> 00:44:01,740
want those user stories to be your

00:44:00,420 --> 00:44:03,030
requirements for the system because

00:44:01,740 --> 00:44:04,230
those user stories are really quite

00:44:03,030 --> 00:44:07,530
important in the grand scheme of

00:44:04,230 --> 00:44:08,940
building this piece of software you want

00:44:07,530 --> 00:44:10,559
to involve multiple stakeholders when

00:44:08,940 --> 00:44:13,589
you're building the system because no

00:44:10,559 --> 00:44:15,990
single idea is the best idea it's a

00:44:13,589 --> 00:44:18,329
collaboration and it's a it's an effort

00:44:15,990 --> 00:44:19,589
between multiple people you know give a

00:44:18,329 --> 00:44:21,180
little bit of give-and-take you give a

00:44:19,589 --> 00:44:22,859
bit of your space in what you think you

00:44:21,180 --> 00:44:24,030
want to actually know that's a bit more

00:44:22,859 --> 00:44:26,730
reasonable when we've spoken through

00:44:24,030 --> 00:44:29,640
this you want to write your features

00:44:26,730 --> 00:44:30,960
before you've written code and you want

00:44:29,640 --> 00:44:32,490
to write them without implementation but

00:44:30,960 --> 00:44:34,290
that's a lot easier to do when you're

00:44:32,490 --> 00:44:39,089
having these discussions before writing

00:44:34,290 --> 00:44:40,859
code at the beginning of all of this

00:44:39,089 --> 00:44:41,880
you're going to have a conversation

00:44:40,859 --> 00:44:44,369
you're going to capture that

00:44:41,880 --> 00:44:45,540
conversation in the middle of it you'll

00:44:44,369 --> 00:44:47,250
do the developer stuff that we all like

00:44:45,540 --> 00:44:48,630
which is all automating and implementing

00:44:47,250 --> 00:44:51,569
that conversation the code side of

00:44:48,630 --> 00:44:54,510
things but you can't have a middle

00:44:51,569 --> 00:44:56,940
without a beginning to your story and in

00:44:54,510 --> 00:44:58,799
the end of your story pretty much you'll

00:44:56,940 --> 00:45:01,230
have Safi stakeholders and pretty well

00:44:58,799 --> 00:45:02,609
built software you'll have software that

00:45:01,230 --> 00:45:04,049
does what actually needs to do software

00:45:02,609 --> 00:45:06,690
that achieves the business goals that

00:45:04,049 --> 00:45:10,619
have been set out and you get the nice

00:45:06,690 --> 00:45:12,059
warm fuzzies inside the slides will be

00:45:10,619 --> 00:45:13,470
online they already are there's links

00:45:12,059 --> 00:45:16,609
and reading available if you do want to

00:45:13,470 --> 00:45:18,700
look anything thank you for listening

00:45:16,609 --> 00:45:22,100
fine down joined in there

00:45:18,700 --> 00:45:22,100

YouTube URL: https://www.youtube.com/watch?v=bCLlBgYQoIk


