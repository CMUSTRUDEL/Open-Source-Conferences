Title: PHP UK Conference 2018 - Michael Cullum - Introduction to GraphQL
Publication date: 2018-03-27
Playlist: PHP UK Conference 2018
Description: 
	Since GraphQL was announced by Facebook in 2015 it has started to gain quite a bit of traction with many companies such as Github looking to adopt it to either replace or complement their existing REST APIs. GraphQL provides a powerful way for the frontend to be able to query data sources and your business logic, giving and receiving only the data that they need, without having to always have custom designed endpoints for every use-case. As a consumer of third party APIs it probably won't be long before you're consuming a GraphQL API; and as a designer or creator of APIs, GraphQL can sometimes provide a better alternative than a REST API. Join me for a tour of what GraphQL looks like, what it works well for, how to consume a GraphQL API, and how to easily design and create one in PHP.
Captions: 
	00:00:02,330 --> 00:00:06,170
my name is Michael Calum that's my

00:00:04,279 --> 00:00:08,050
twitter handle I'm gonna be up here for

00:00:06,170 --> 00:00:11,330
the next hour so if you want to tweet

00:00:08,050 --> 00:00:14,320
feedback or abuse at me whatever

00:00:11,330 --> 00:00:17,150
whatever goes I'm completely defenseless

00:00:14,320 --> 00:00:20,210
so go for it it'll be in the corner of

00:00:17,150 --> 00:00:22,369
most bunch of my slides as well I work

00:00:20,210 --> 00:00:25,550
for a company called Sam knows Sam knows

00:00:22,369 --> 00:00:27,380
we do internet measurement data we do

00:00:25,550 --> 00:00:28,730
deal with huge amounts of data we do

00:00:27,380 --> 00:00:30,319
cool things with it data intelligence

00:00:28,730 --> 00:00:33,800
machine learning buzzword buzzword

00:00:30,319 --> 00:00:36,260
buzzword if any of you are looking for a

00:00:33,800 --> 00:00:39,170
job then we're hiring so come and chat

00:00:36,260 --> 00:00:40,519
to me afterwards I've just joined the

00:00:39,170 --> 00:00:43,879
symphony core team there's a security

00:00:40,519 --> 00:00:45,410
lead I am also on the core committee of

00:00:43,879 --> 00:00:47,570
the PHP fake I used to be a fixed

00:00:45,410 --> 00:00:49,640
secretary until quite recently and I'm

00:00:47,570 --> 00:00:50,629
also on the management team of PHP BB so

00:00:49,640 --> 00:00:51,769
if you're interested in any of these

00:00:50,629 --> 00:00:55,370
projects come have a chat with me

00:00:51,769 --> 00:00:57,260
afterwards but you're not here to listen

00:00:55,370 --> 00:00:59,749
to me talk about myself no matter how

00:00:57,260 --> 00:01:02,089
much I like might like that you're here

00:00:59,749 --> 00:01:04,370
to learn about grass right and I don't

00:01:02,089 --> 00:01:13,880
kind of mean this kind of graph although

00:01:04,370 --> 00:01:16,180
this is a cool graph graphs are cool but

00:01:13,880 --> 00:01:18,530
they they show us interesting things

00:01:16,180 --> 00:01:21,230
we're here to learn about this kind of

00:01:18,530 --> 00:01:22,430
graph so throughout this talk I'm

00:01:21,230 --> 00:01:23,840
actually going to use github as an

00:01:22,430 --> 00:01:26,180
example it's something that we're all

00:01:23,840 --> 00:01:29,450
quite familiar with we'll talk about

00:01:26,180 --> 00:01:30,530
users will talk about repositories but

00:01:29,450 --> 00:01:33,470
if we start to think about this as a

00:01:30,530 --> 00:01:35,030
graph we have you as a central user and

00:01:33,470 --> 00:01:36,710
then so we want to expand out we want to

00:01:35,030 --> 00:01:39,500
look at the organizations you belong to

00:01:36,710 --> 00:01:42,370
so I belong to Sam nose and symphony for

00:01:39,500 --> 00:01:44,240
example now inside that organization

00:01:42,370 --> 00:01:47,150
symphony we've got a whole bunch of

00:01:44,240 --> 00:01:49,130
other users that might be fabian it

00:01:47,150 --> 00:01:51,830
might be Nicolas it might be other core

00:01:49,130 --> 00:01:54,170
contributors I also have a Sam nose

00:01:51,830 --> 00:01:56,300
organization for example and that

00:01:54,170 --> 00:01:57,650
contains a bunch of repositories so some

00:01:56,300 --> 00:02:00,230
of those are private some of those are

00:01:57,650 --> 00:02:02,300
public and then we have a whole load of

00:02:00,230 --> 00:02:05,240
commits now each one of these is an

00:02:02,300 --> 00:02:06,650
object now object-oriented programming

00:02:05,240 --> 00:02:08,629
I'm not kind of going to go into the

00:02:06,650 --> 00:02:11,030
depths of but you can kind of begin to

00:02:08,629 --> 00:02:12,620
represent us in the graph and when you

00:02:11,030 --> 00:02:15,950
use something like graph QL the

00:02:12,620 --> 00:02:19,700
relationships are first-class citizens

00:02:15,950 --> 00:02:21,319
and how they all relate to each other so

00:02:19,700 --> 00:02:23,450
that's why I'm she can talk very briefly

00:02:21,319 --> 00:02:26,450
about rest api's who's used rest api s--

00:02:23,450 --> 00:02:30,110
quite sensibly okay basically the entire

00:02:26,450 --> 00:02:32,000
room wonderful so with your stone of

00:02:30,110 --> 00:02:33,440
rest api you've got a number of

00:02:32,000 --> 00:02:35,480
endpoints you've got gets you've got

00:02:33,440 --> 00:02:37,190
posts and hopefully a whole bunch of

00:02:35,480 --> 00:02:40,970
other HTTP verbs and that you're all

00:02:37,190 --> 00:02:43,519
using correctly right so if you want to

00:02:40,970 --> 00:02:46,730
get content and by the way I get I don't

00:02:43,519 --> 00:02:49,069
mean post content and I want to have a

00:02:46,730 --> 00:02:52,640
look at like a specific repository I do

00:02:49,069 --> 00:02:54,350
get repos ID and it would return the

00:02:52,640 --> 00:02:56,810
correct status code cuz you're using the

00:02:54,350 --> 00:02:59,080
right status codes as well right yeah

00:02:56,810 --> 00:03:04,130
okay that's the correct answer

00:02:59,080 --> 00:03:06,980
it's the okay answer returns to 200 okay

00:03:04,130 --> 00:03:09,739
might get some organizations we might

00:03:06,980 --> 00:03:11,120
get a specific organization but then

00:03:09,739 --> 00:03:12,260
here what we'd start to do is we start

00:03:11,120 --> 00:03:14,090
to say actually I want to look at the

00:03:12,260 --> 00:03:15,769
repositories for that organization and

00:03:14,090 --> 00:03:17,959
if you think back to that graph that I

00:03:15,769 --> 00:03:21,620
was showing you earlier that's sort of

00:03:17,959 --> 00:03:25,730
like a child in a graph in a rest

00:03:21,620 --> 00:03:29,120
context now always assuming children

00:03:25,730 --> 00:03:30,350
actually can kind of confuse sort of the

00:03:29,120 --> 00:03:32,660
way of thinking about it and so if you

00:03:30,350 --> 00:03:34,130
think about them as connections then you

00:03:32,660 --> 00:03:36,769
can traverse the graph in any way that

00:03:34,130 --> 00:03:37,850
you choose and rest isn't this is one of

00:03:36,769 --> 00:03:39,620
the things that rest isn't quite so

00:03:37,850 --> 00:03:41,060
great at and then finally down the

00:03:39,620 --> 00:03:43,459
bottom oh I've got a post org so

00:03:41,060 --> 00:03:44,720
creating an organization and again 201

00:03:43,459 --> 00:03:48,560
because you're using the right response

00:03:44,720 --> 00:03:50,870
codes a REST API might look a little bit

00:03:48,560 --> 00:03:54,650
like this this is kind of fake and it's

00:03:50,870 --> 00:03:57,200
also not a great rest api it's just

00:03:54,650 --> 00:03:59,150
something i grabbed off the internet so

00:03:57,200 --> 00:04:00,799
you'll notice in here that there are

00:03:59,150 --> 00:04:02,060
lots of links that was raw grab this

00:04:00,799 --> 00:04:04,760
example there's lots of links in it

00:04:02,060 --> 00:04:07,150
we've got a link to itself we've got a

00:04:04,760 --> 00:04:09,790
limit so much stuff to do pagination

00:04:07,150 --> 00:04:12,139
we've and then we've got sort of

00:04:09,790 --> 00:04:15,410
relationships and we say call this other

00:04:12,139 --> 00:04:16,609
link this other URL and then we'll send

00:04:15,410 --> 00:04:20,690
you through and you can essentially

00:04:16,609 --> 00:04:23,090
traverse a REST API a little bit like a

00:04:20,690 --> 00:04:24,740
wet or like a human can browse the

00:04:23,090 --> 00:04:26,419
Internet you go into a search engine you

00:04:24,740 --> 00:04:28,099
click on a thing you click on another

00:04:26,419 --> 00:04:29,380
thing you click on another thing it's

00:04:28,099 --> 00:04:31,660
very rare actually now

00:04:29,380 --> 00:04:33,460
you to type in a complete URL to a

00:04:31,660 --> 00:04:34,810
specific page on a website how when was

00:04:33,460 --> 00:04:37,300
the last time you did that like probably

00:04:34,810 --> 00:04:38,980
a week ago or when you were testing

00:04:37,300 --> 00:04:42,790
something but the common user doesn't

00:04:38,980 --> 00:04:44,710
type a full URL now that's a good REST

00:04:42,790 --> 00:04:46,240
API if you can follow all the links but

00:04:44,710 --> 00:04:48,700
not all of them have that if you don't

00:04:46,240 --> 00:04:55,210
have links in your REST API it's not

00:04:48,700 --> 00:04:56,620
really a REST API graph QL so moving on

00:04:55,210 --> 00:04:58,210
from rest we'll come back to sort of

00:04:56,620 --> 00:05:00,670
like the differences later so what is

00:04:58,210 --> 00:05:02,470
graph queue up graphically are two

00:05:00,670 --> 00:05:05,230
things it's a query language for your

00:05:02,470 --> 00:05:06,610
API and it's also a server-side runtime

00:05:05,230 --> 00:05:10,240
for executing queries using a type

00:05:06,610 --> 00:05:13,420
system you define what what does that

00:05:10,240 --> 00:05:15,280
mean so essentially there are two

00:05:13,420 --> 00:05:17,620
different portions to it you have the

00:05:15,280 --> 00:05:19,990
actual language that you query with it

00:05:17,620 --> 00:05:21,280
is a query language just like sequel is

00:05:19,990 --> 00:05:23,590
for example when you're querying on a

00:05:21,280 --> 00:05:26,080
database and then it's the other side

00:05:23,590 --> 00:05:29,440
it's the actual system of managing types

00:05:26,080 --> 00:05:30,880
so in the our github example we have

00:05:29,440 --> 00:05:33,580
users we have repositories we have

00:05:30,880 --> 00:05:35,400
commits we have more users and we have a

00:05:33,580 --> 00:05:39,490
whole bunch of other different types of

00:05:35,400 --> 00:05:43,030
types of entity so let's have a look at

00:05:39,490 --> 00:05:45,190
like starting to query this right this

00:05:43,030 --> 00:05:47,560
is something in graphic you are this is

00:05:45,190 --> 00:05:49,840
a request and what I'm saying is on the

00:05:47,560 --> 00:05:54,280
me object I want to get the property

00:05:49,840 --> 00:05:56,080
name I want to get my name it is just as

00:05:54,280 --> 00:05:57,520
simple like this is this is this is the

00:05:56,080 --> 00:06:00,030
most bare-bones sort of thing you can do

00:05:57,520 --> 00:06:03,130
I'm getting a property off of an object

00:06:00,030 --> 00:06:05,290
and this is what it returns it returns

00:06:03,130 --> 00:06:07,030
my name Michael Calum and it returns it

00:06:05,290 --> 00:06:09,550
in exactly the same format that I

00:06:07,030 --> 00:06:11,620
requested it in and it only returns me

00:06:09,550 --> 00:06:14,410
the fields so I specifically asked for

00:06:11,620 --> 00:06:15,820
so again we've got me here which is the

00:06:14,410 --> 00:06:18,700
object and then inside of that we've got

00:06:15,820 --> 00:06:20,770
the property name which has the value

00:06:18,700 --> 00:06:24,690
Michael Colin so it's given me that data

00:06:20,770 --> 00:06:27,580
it's given me the name of the me object

00:06:24,690 --> 00:06:29,950
now I can add others I can add company

00:06:27,580 --> 00:06:32,590
in here because I let's say I want to

00:06:29,950 --> 00:06:34,870
know what my company is I run that and

00:06:32,590 --> 00:06:36,640
again I get that extra property back I

00:06:34,870 --> 00:06:38,830
find out what that property value is and

00:06:36,640 --> 00:06:40,960
that property value is Sam knows and

00:06:38,830 --> 00:06:42,640
again you'll see that like company the

00:06:40,960 --> 00:06:43,150
exact words I've used here is exactly

00:06:42,640 --> 00:06:46,570
the same

00:06:43,150 --> 00:06:48,340
it's the the the require a response will

00:06:46,570 --> 00:06:50,020
always mirror the request unless you

00:06:48,340 --> 00:06:52,870
assets specifically not to which I'll go

00:06:50,020 --> 00:06:55,660
into later now this is great for scalar

00:06:52,870 --> 00:06:58,300
values but I was talking all about

00:06:55,660 --> 00:06:59,410
graphs and stuff like that earlier which

00:06:58,300 --> 00:07:02,530
means that we're gonna have to like nest

00:06:59,410 --> 00:07:06,760
objects at some point right so let's

00:07:02,530 --> 00:07:08,890
lesson objective about github so let's

00:07:06,760 --> 00:07:10,870
have a look at some repositories so I

00:07:08,890 --> 00:07:14,800
want to get the name of a couple of

00:07:10,870 --> 00:07:17,830
repositories so I specify an object here

00:07:14,800 --> 00:07:20,620
repose which is a property but it's not

00:07:17,830 --> 00:07:22,360
a scalar property it's it's a list so

00:07:20,620 --> 00:07:25,270
therefore I say for each of these repos

00:07:22,360 --> 00:07:26,620
I want to get the name so that's exactly

00:07:25,270 --> 00:07:28,030
what I have I have repose and then I

00:07:26,620 --> 00:07:31,180
have a list of repose there might be

00:07:28,030 --> 00:07:32,710
there would be more on there and then I

00:07:31,180 --> 00:07:34,990
just get the name of the repo which is

00:07:32,710 --> 00:07:38,860
that property and again it's an exactly

00:07:34,990 --> 00:07:40,060
the same format so I said I'm gonna use

00:07:38,860 --> 00:07:42,280
github as an example quite a lot

00:07:40,060 --> 00:07:45,760
throughout this talk so I'm also going

00:07:42,280 --> 00:07:49,060
to use the so there's a tool called grey

00:07:45,760 --> 00:07:50,680
graph iql which is interactive

00:07:49,060 --> 00:07:53,940
essentially it allows you to customize

00:07:50,680 --> 00:07:57,220
your requests in one side it will do

00:07:53,940 --> 00:07:59,650
auto completion etc for you and then it

00:07:57,220 --> 00:08:03,570
will tell you the results so let's have

00:07:59,650 --> 00:08:03,570
a look at some stuff to do with

00:08:17,280 --> 00:08:25,540
right can you see that at the back oh

00:08:20,040 --> 00:08:26,280
that's a bit much can you see that at

00:08:25,540 --> 00:08:31,030
the back

00:08:26,280 --> 00:08:35,620
yeah cool so here what I'm doing pretend

00:08:31,030 --> 00:08:38,169
that this word query doesn't exist yeah

00:08:35,620 --> 00:08:41,200
so here we are I'm looking at a viewer

00:08:38,169 --> 00:08:43,180
object viewer in github context kind of

00:08:41,200 --> 00:08:45,820
means me the person who is viewing the

00:08:43,180 --> 00:08:47,410
API I've signed in as myself this is

00:08:45,820 --> 00:08:49,570
actually touching on github production

00:08:47,410 --> 00:08:51,070
data I'm just going to have to try very

00:08:49,570 --> 00:08:53,760
hard in this live demo not to

00:08:51,070 --> 00:08:57,100
accidentally show you any private repos

00:08:53,760 --> 00:08:59,290
so log in is the property on here that

00:08:57,100 --> 00:09:01,540
essentially gives you my username and my

00:08:59,290 --> 00:09:02,470
user name is Michael color so that's

00:09:01,540 --> 00:09:05,110
really simple right

00:09:02,470 --> 00:09:06,970
now like we can do something a bit we

00:09:05,110 --> 00:09:14,170
can look at other things other types of

00:09:06,970 --> 00:09:15,370
object so on the on the github API one

00:09:14,170 --> 00:09:17,860
of the things that lets you get is a

00:09:15,370 --> 00:09:21,670
series of codes of conduct so a code of

00:09:17,860 --> 00:09:22,990
conduct is an object and it has a name

00:09:21,670 --> 00:09:24,340
field so when I was saying about all

00:09:22,990 --> 00:09:25,930
your completion this is what I mean and

00:09:24,340 --> 00:09:27,130
it also tells me the type which is

00:09:25,930 --> 00:09:30,220
really useful because my memory isn't

00:09:27,130 --> 00:09:34,420
that great it's also why I feel brave

00:09:30,220 --> 00:09:36,250
enough to do a live demo so here I can

00:09:34,420 --> 00:09:38,140
just see is it's saying that there are

00:09:36,250 --> 00:09:40,330
two code of conduct objects that it's

00:09:38,140 --> 00:09:42,010
finding and in each of these code of

00:09:40,330 --> 00:09:45,640
conduct objects I'm getting the name

00:09:42,010 --> 00:09:52,780
property now I can add some more I can

00:09:45,640 --> 00:10:02,290
get a description I think no I can't I

00:09:52,780 --> 00:10:04,680
can get the body I can get I can get a

00:10:02,290 --> 00:10:04,680
Europe

00:10:10,180 --> 00:10:13,820
so there we go so now I'm actually

00:10:12,320 --> 00:10:17,120
getting the full body of all of these

00:10:13,820 --> 00:10:19,580
codes of conduct now that's great but

00:10:17,120 --> 00:10:21,620
realistically like I don't actually want

00:10:19,580 --> 00:10:23,960
to get the full body of every single

00:10:21,620 --> 00:10:26,030
code of conduct so let's say I just want

00:10:23,960 --> 00:10:30,650
to look at one so one of the fields that

00:10:26,030 --> 00:10:39,440
I grabbed here was key now reason I know

00:10:30,650 --> 00:10:44,150
I didn't grab you so I can see here

00:10:39,440 --> 00:10:45,860
contribute to covenant that's a key now

00:10:44,150 --> 00:10:47,840
I'll show you exactly how this works in

00:10:45,860 --> 00:10:57,620
a moment but essentially what I want to

00:10:47,840 --> 00:11:01,160
do is I want to only look at one hopeful

00:10:57,620 --> 00:11:08,170
didn't lock my screen and there we go

00:11:01,160 --> 00:11:08,170
I'm just and I can just look at one

00:11:11,830 --> 00:11:22,160
thanks yeah

00:11:20,030 --> 00:11:23,330
so I can just look at one as well and

00:11:22,160 --> 00:11:24,560
that really depends on the kind of

00:11:23,330 --> 00:11:26,750
object that I'm querying whether or not

00:11:24,560 --> 00:11:30,320
I'm looking at an array or whether or

00:11:26,750 --> 00:11:33,310
not I'm looking at a single object so

00:11:30,320 --> 00:11:33,310
it's come back here

00:11:37,059 --> 00:11:42,350
so what you just saw me do is I was

00:11:39,860 --> 00:11:43,699
passing in an argument so essentially

00:11:42,350 --> 00:11:46,639
what this actually is is it's kind of

00:11:43,699 --> 00:11:48,550
it's essentially a function if you

00:11:46,639 --> 00:11:50,809
consider that in in sort of PHP

00:11:48,550 --> 00:11:53,230
terminology so I'm passing in an

00:11:50,809 --> 00:11:55,819
argument I know all arguments are named

00:11:53,230 --> 00:11:57,860
this is not something we really have in

00:11:55,819 --> 00:12:00,439
PHP you can't say which arguments you're

00:11:57,860 --> 00:12:04,279
which you're giving you can only sort of

00:12:00,439 --> 00:12:08,089
pass in all of the arguments or just the

00:12:04,279 --> 00:12:10,759
required ones so I'm saying login so

00:12:08,089 --> 00:12:12,769
that's the variable name that's the key

00:12:10,759 --> 00:12:14,480
and then I'm saying that the value of

00:12:12,769 --> 00:12:16,699
Dyke was my column and I want to look at

00:12:14,480 --> 00:12:17,809
the name for that and then I get back

00:12:16,699 --> 00:12:19,790
exactly the same thing that we were

00:12:17,809 --> 00:12:22,160
looking at earlier this means I can look

00:12:19,790 --> 00:12:24,230
at all of the users I can say I actually

00:12:22,160 --> 00:12:25,459
just care about this one because I

00:12:24,230 --> 00:12:27,079
generally don't care about I don't want

00:12:25,459 --> 00:12:28,610
to get every single user on github I

00:12:27,079 --> 00:12:34,369
want to get this one user and I want to

00:12:28,610 --> 00:12:37,850
specify which user so I can also use

00:12:34,369 --> 00:12:39,679
arguments on scalar properties so now

00:12:37,850 --> 00:12:41,209
github I couldn't find examples of where

00:12:39,679 --> 00:12:43,999
they do this and so I can't give you a

00:12:41,209 --> 00:12:45,860
live demo of this with with the github

00:12:43,999 --> 00:12:48,620
part but essentially what you could do

00:12:45,860 --> 00:12:54,499
is say I want name and height now who

00:12:48,620 --> 00:12:57,529
prefers metric who prefers feet one guy

00:12:54,499 --> 00:13:00,019
okay it's it's it's fine who measures

00:12:57,529 --> 00:13:01,429
the height in feet though exactly so

00:13:00,019 --> 00:13:06,050
most of you yeah you're not you're not

00:13:01,429 --> 00:13:07,699
alone but we are but so we can specify

00:13:06,050 --> 00:13:09,829
the specific unit that we want so we can

00:13:07,699 --> 00:13:11,389
say I want my height in foot because

00:13:09,829 --> 00:13:14,120
whilst I might normally default to

00:13:11,389 --> 00:13:15,980
metric my prefer metric I prefer my

00:13:14,120 --> 00:13:18,279
height in feet so it would then come up

00:13:15,980 --> 00:13:20,209
with michael and six foot four and

00:13:18,279 --> 00:13:21,889
essentially what I can do is I can just

00:13:20,209 --> 00:13:24,920
use that for a manipulation of a scalar

00:13:21,889 --> 00:13:27,470
field so arguments can kind of go

00:13:24,920 --> 00:13:31,519
wherever which is an odd concept that we

00:13:27,470 --> 00:13:32,899
might not be used to so something I've

00:13:31,519 --> 00:13:36,019
talked about a lot is that the request

00:13:32,899 --> 00:13:39,470
and the response match each other now if

00:13:36,019 --> 00:13:42,049
they always match each other like this

00:13:39,470 --> 00:13:44,269
we've got me company name company and

00:13:42,049 --> 00:13:46,689
then again here we've got user name

00:13:44,269 --> 00:13:49,100
repos again all the structure matches

00:13:46,689 --> 00:13:50,270
what happens when I want to get more

00:13:49,100 --> 00:13:52,790
than one user the

00:13:50,270 --> 00:13:55,970
because here I've got user and and I've

00:13:52,790 --> 00:13:57,140
got myself like I'm coming up but well

00:13:55,970 --> 00:14:00,110
let's say I want to get the date on two

00:13:57,140 --> 00:14:02,390
users I want to get the data on the two

00:14:00,110 --> 00:14:06,500
most common the two most popular users

00:14:02,390 --> 00:14:07,220
on get up or height with highest number

00:14:06,500 --> 00:14:10,070
of contributions

00:14:07,220 --> 00:14:12,620
now that's fabian and andrew i don't

00:14:10,070 --> 00:14:16,100
know who this andrew guy is but fabian I

00:14:12,620 --> 00:14:18,560
expect most of you do know we use

00:14:16,100 --> 00:14:20,630
something called aliases so aliases

00:14:18,560 --> 00:14:23,510
allow us to actually change the response

00:14:20,630 --> 00:14:25,130
and use different keys if I had two

00:14:23,510 --> 00:14:27,080
users it would throw an error

00:14:25,130 --> 00:14:29,360
you saw what an error look like earlier

00:14:27,080 --> 00:14:30,620
accidentally I was going to show it to

00:14:29,360 --> 00:14:33,680
you properly out later but you've

00:14:30,620 --> 00:14:35,390
already seen it so what I can say is I

00:14:33,680 --> 00:14:36,770
want this object to be called Andrew I

00:14:35,390 --> 00:14:39,530
know what this one's we call Fabian and

00:14:36,770 --> 00:14:41,900
what I want you to do is get me a user

00:14:39,530 --> 00:14:44,600
and pass in this argument and that looks

00:14:41,900 --> 00:14:45,530
like this so we've got Fabian here

00:14:44,600 --> 00:14:47,930
Fabian

00:14:45,530 --> 00:14:49,010
Andrew Andrew and then with still

00:14:47,930 --> 00:14:52,510
throwing through that name because the

00:14:49,010 --> 00:14:54,560
name is property that we're getting now

00:14:52,510 --> 00:14:56,090
that's great when you're only looking at

00:14:54,560 --> 00:14:57,770
one field but let's say that you want to

00:14:56,090 --> 00:15:00,080
have multiple different fields in there

00:14:57,770 --> 00:15:02,870
you want to have like name email company

00:15:00,080 --> 00:15:05,060
now as a developer this makes me hurt

00:15:02,870 --> 00:15:06,440
this makes me want to cry because I'm

00:15:05,060 --> 00:15:09,280
seeing I'm repeating the same thing

00:15:06,440 --> 00:15:12,170
right which we all know is bad practice

00:15:09,280 --> 00:15:16,190
but craft graph QL can handle this for

00:15:12,170 --> 00:15:17,990
us using something called fragments so

00:15:16,190 --> 00:15:20,240
what we do is we say fragment user

00:15:17,990 --> 00:15:22,700
details on user so what we're saying is

00:15:20,240 --> 00:15:24,770
I want to create a fragment the name of

00:15:22,700 --> 00:15:27,080
that fragment is user details and we

00:15:24,770 --> 00:15:28,040
want to create it on a user type so I

00:15:27,080 --> 00:15:30,530
haven't really talked too much about

00:15:28,040 --> 00:15:31,970
types I'm going talk about a bit more

00:15:30,530 --> 00:15:33,800
depth later but essentially what we're

00:15:31,970 --> 00:15:37,790
doing is we're looking at a user type

00:15:33,800 --> 00:15:39,530
here and then what I do is I include

00:15:37,790 --> 00:15:42,500
user details and then it essentially

00:15:39,530 --> 00:15:45,590
repeats this the name email company in

00:15:42,500 --> 00:15:49,370
both Michael and Fabian on there so if I

00:15:45,590 --> 00:15:51,670
jump back across to github never play

00:15:49,370 --> 00:15:51,670
with this

00:15:55,590 --> 00:16:00,120
so let's go with

00:16:34,380 --> 00:16:38,520
so essentially what I'm doing areas I'm

00:16:36,090 --> 00:16:41,670
just duplicating what I was kind of just

00:16:38,520 --> 00:16:42,810
talking about so we've got that behavior

00:16:41,670 --> 00:16:44,250
that I was saying and you can see the

00:16:42,810 --> 00:16:46,110
alias is working so we've got Fabian

00:16:44,250 --> 00:16:47,610
here we've got Michael and Fabian and

00:16:46,110 --> 00:16:50,670
Michael can you see at the bottom of the

00:16:47,610 --> 00:16:52,200
screen at the back is it does it what

00:16:50,670 --> 00:16:53,990
does it cut off like sort of there with

00:16:52,200 --> 00:16:58,160
heads or can you see the whole thing oh

00:16:53,990 --> 00:17:01,620
you've got screens back there fantastic

00:16:58,160 --> 00:17:04,920
okay so now I want to add a couple of

00:17:01,620 --> 00:17:07,440
extra fields so let's add email please

00:17:04,920 --> 00:17:16,100
don't spam me oh no that's not what I

00:17:07,440 --> 00:17:16,100
wanted and that's grab company as well

00:17:22,329 --> 00:17:28,779
this uses a funky editor just like all

00:17:25,569 --> 00:17:41,200
of github stuff and therefore it tries

00:17:28,779 --> 00:17:42,789
to do right there we go so I can run

00:17:41,200 --> 00:17:45,179
that and I've got those extra fields now

00:17:42,789 --> 00:17:48,580
I'll extract this out into a fragment

00:17:45,179 --> 00:17:50,950
and I'm not going to try retyping it

00:17:48,580 --> 00:17:53,200
because it won't let me

00:17:50,950 --> 00:18:04,990
now the fragments sits outside of the

00:17:53,200 --> 00:18:06,279
query that we're doing here and then I

00:18:04,990 --> 00:18:08,289
just paste the exact fields in here

00:18:06,279 --> 00:18:10,899
almost as if it is actually in here

00:18:08,289 --> 00:18:13,389
itself now what if I actually just did

00:18:10,899 --> 00:18:16,000
name here and I ran this it would

00:18:13,389 --> 00:18:19,080
actually error if you define a fragment

00:18:16,000 --> 00:18:21,880
and don't use it it will error out you

00:18:19,080 --> 00:18:24,000
so you can't just simply load every

00:18:21,880 --> 00:18:26,320
single one of your fragments or

00:18:24,000 --> 00:18:28,600
transformers I suppose you could kind of

00:18:26,320 --> 00:18:30,730
liken them to you can't just load every

00:18:28,600 --> 00:18:32,909
single one on every single query you

00:18:30,730 --> 00:18:41,710
have to only load the ones that you need

00:18:32,909 --> 00:18:44,529
so then I use the ellipse operator to

00:18:41,710 --> 00:18:51,039
say essentially expand user details here

00:18:44,529 --> 00:18:54,100
and then we'll see that that's exactly

00:18:51,039 --> 00:18:56,080
the same response this makes life so

00:18:54,100 --> 00:18:57,370
much easier in terms of how to instead

00:18:56,080 --> 00:18:59,679
of having to duplicate things a hundred

00:18:57,370 --> 00:19:08,380
times you can just specify exactly what

00:18:59,679 --> 00:19:10,600
you need so we've looked a lot of

00:19:08,380 --> 00:19:13,179
properties and that kind of thing let's

00:19:10,600 --> 00:19:14,590
not have a look at operations because we

00:19:13,179 --> 00:19:19,659
want to do things a little bit more

00:19:14,590 --> 00:19:22,840
dynamically now when we're having a look

00:19:19,659 --> 00:19:24,429
at all of the previous ones that we've

00:19:22,840 --> 00:19:27,580
been doing I've said I've just submitted

00:19:24,429 --> 00:19:31,270
that query keyword the query keyword is

00:19:27,580 --> 00:19:32,470
unnecessary but recommended so all of

00:19:31,270 --> 00:19:34,480
the previous examples that you've seen

00:19:32,470 --> 00:19:35,980
just add query at the beginning and

00:19:34,480 --> 00:19:39,460
you'll be following best practices

00:19:35,980 --> 00:19:41,980
now just like n PHP we can have

00:19:39,460 --> 00:19:44,470
anonymous functions or particularly in

00:19:41,980 --> 00:19:45,669
JavaScript JavaScript owes us a lot it's

00:19:44,470 --> 00:19:47,890
a lot better to name them

00:19:45,669 --> 00:19:49,900
it makes debugging easier it makes it a

00:19:47,890 --> 00:19:51,040
lot easier to find things particularly

00:19:49,900 --> 00:19:53,830
when you get one of those errors and

00:19:51,040 --> 00:19:56,200
you've got a long query so what you can

00:19:53,830 --> 00:19:58,630
do is you can also name your functions

00:19:56,200 --> 00:20:02,590
or your operations so here I want to get

00:19:58,630 --> 00:20:04,360
user and company now the advantage of

00:20:02,590 --> 00:20:06,190
this is that you can start to pass in

00:20:04,360 --> 00:20:10,179
variables that aren't part of your

00:20:06,190 --> 00:20:13,090
specific graphic URL request body so

00:20:10,179 --> 00:20:14,530
it's not part of your query now why

00:20:13,090 --> 00:20:16,720
might you want to do this why can't I

00:20:14,530 --> 00:20:19,330
just like insert it into the query as I

00:20:16,720 --> 00:20:21,340
build it if you try to do string

00:20:19,330 --> 00:20:24,760
manipulation to generate your graph QL

00:20:21,340 --> 00:20:28,299
query then you're not going to enjoy

00:20:24,760 --> 00:20:29,710
your life it's gonna be an absolute pain

00:20:28,299 --> 00:20:31,690
in the ass it's going to be horrible to

00:20:29,710 --> 00:20:35,620
unit test it's going to be horrible to

00:20:31,690 --> 00:20:39,040
develop on how many people's like stills

00:20:35,620 --> 00:20:40,690
spend a lot of time using string

00:20:39,040 --> 00:20:43,900
manipulating queries together instead of

00:20:40,690 --> 00:20:46,660
using a some kind of query builder it's

00:20:43,900 --> 00:20:48,220
a similar kind of situation so what you

00:20:46,660 --> 00:20:50,260
want to do is you want to say hi I'm

00:20:48,220 --> 00:20:52,390
just going to pass in this variable and

00:20:50,260 --> 00:20:54,160
you can specify types so I'm gonna talk

00:20:52,390 --> 00:20:55,419
a lot more about types but for here I'm

00:20:54,160 --> 00:20:58,090
just going to say it's a string we all

00:20:55,419 --> 00:20:59,620
know what a string is this exclamation

00:20:58,090 --> 00:21:01,929
point what this does is it says that

00:20:59,620 --> 00:21:04,750
it's required an exclamation point means

00:21:01,929 --> 00:21:07,840
that an argument is required you can't

00:21:04,750 --> 00:21:09,370
it will just simply error if it's not if

00:21:07,840 --> 00:21:13,390
I excluded this and it would mean that

00:21:09,370 --> 00:21:15,070
null is possible now the way that graph

00:21:13,390 --> 00:21:17,620
QR handles null is that there is one

00:21:15,070 --> 00:21:19,210
null everything is that same null it's

00:21:17,620 --> 00:21:21,580
not like each individual type has its

00:21:19,210 --> 00:21:23,980
own null version so it's not like the

00:21:21,580 --> 00:21:29,290
null of a integer would be zero

00:21:23,980 --> 00:21:32,740
it's just null so I grab the login here

00:21:29,290 --> 00:21:34,000
as I say I want a string and then I say

00:21:32,740 --> 00:21:36,040
I want the user for this particular

00:21:34,000 --> 00:21:38,260
login and I want to the name I want

00:21:36,040 --> 00:21:40,450
company and I want is hireable and then

00:21:38,260 --> 00:21:43,270
separately I give it as another body of

00:21:40,450 --> 00:21:44,799
text which is the variables so for

00:21:43,270 --> 00:21:47,770
example let's say this was a car request

00:21:44,799 --> 00:21:49,420
I might say here is the body which is

00:21:47,770 --> 00:21:50,740
essentially the query

00:21:49,420 --> 00:21:52,390
here are the variables they're two

00:21:50,740 --> 00:21:55,480
completely separate things that you send

00:21:52,390 --> 00:21:58,180
in your request now we can do more

00:21:55,480 --> 00:22:02,800
things with this as well we can do if

00:21:58,180 --> 00:22:04,600
statements so let's say that I only want

00:22:02,800 --> 00:22:06,490
I want to be able to have this and this

00:22:04,600 --> 00:22:09,250
method and its operation but I want to

00:22:06,490 --> 00:22:10,630
use it for two things it's not exactly

00:22:09,250 --> 00:22:11,980
the best practice in this example but

00:22:10,630 --> 00:22:16,000
it's simple enough that it kind of makes

00:22:11,980 --> 00:22:19,150
sense so what I say is is hireable I've

00:22:16,000 --> 00:22:19,750
actually missed out the argument here

00:22:19,150 --> 00:22:21,370
for hireable

00:22:19,750 --> 00:22:24,520
that's my mistake it should be a boolean

00:22:21,370 --> 00:22:26,680
in there and then it's exactly the same

00:22:24,520 --> 00:22:30,130
name company is horrible but then I have

00:22:26,680 --> 00:22:33,970
this particular thing here now what that

00:22:30,130 --> 00:22:38,950
says is only include it if horrible is

00:22:33,970 --> 00:22:41,410
true this should be a billion now you

00:22:38,950 --> 00:22:43,680
can also have the opposite of this and

00:22:41,410 --> 00:22:48,450
you can say if it's not that essentially

00:22:43,680 --> 00:22:48,450
so let's have another quick look at that

00:22:51,420 --> 00:22:59,760
so let's grab only you want to look at

00:22:56,350 --> 00:22:59,760
one I'll just get rid of this fragment

00:23:02,730 --> 00:23:08,500
now I've kind of hidden this down here

00:23:05,920 --> 00:23:09,910
query variables so this is where in the

00:23:08,500 --> 00:23:19,920
UI it allows me to insert those

00:23:09,910 --> 00:23:22,420
variables so I want to grab login and

00:23:19,920 --> 00:23:25,000
here as I said I'm inserting the query

00:23:22,420 --> 00:23:32,010
text just to make it M so it works and I

00:23:25,000 --> 00:23:32,010
want to get of user

00:23:35,420 --> 00:23:38,729
[Music]

00:23:48,690 --> 00:23:54,000
cool so if I run this it will fail and

00:23:52,560 --> 00:23:56,190
the reason being is because I've said

00:23:54,000 --> 00:23:57,420
that this login here is required and

00:23:56,190 --> 00:23:59,010
that's what that exclamation point is

00:23:57,420 --> 00:24:04,470
for I'm just gonna get rid of all of

00:23:59,010 --> 00:24:06,990
that comment text getting in the way so

00:24:04,470 --> 00:24:08,790
yeah so here we can see the string was

00:24:06,990 --> 00:24:16,650
provided with an invalid value now what

00:24:08,790 --> 00:24:18,090
I can do down here is Assoc so if we go

00:24:16,650 --> 00:24:22,230
down here I can specify what that login

00:24:18,090 --> 00:24:24,840
variable should be so oh it's all to

00:24:22,230 --> 00:24:29,490
complete that for me so I can say that

00:24:24,840 --> 00:24:33,120
this one I want Fabian I can complete

00:24:29,490 --> 00:24:36,720
that run this and essentially it just

00:24:33,120 --> 00:24:38,880
auto fills that data kind of like code

00:24:36,720 --> 00:24:45,090
right kind of like a you know query

00:24:38,880 --> 00:24:46,830
language now if I decide I want to add

00:24:45,090 --> 00:25:00,930
another one on here so I can add is

00:24:46,830 --> 00:25:04,280
hireable include yeah I don't know and I

00:25:00,930 --> 00:25:04,280
can specify another thing up here

00:25:13,400 --> 00:25:25,270
it's her and then I can specify you see

00:25:20,059 --> 00:25:25,270
this complete it's like nice but not

00:25:27,580 --> 00:25:34,010
there we go so now because I've passed

00:25:31,010 --> 00:25:37,670
in true it will tell me that Fabian is

00:25:34,010 --> 00:25:44,240
horrible apparently great however if I

00:25:37,670 --> 00:25:48,590
put false then will not like me very

00:25:44,240 --> 00:25:51,710
much there we go and it will then hide

00:25:48,590 --> 00:25:54,559
that field so you can use one particular

00:25:51,710 --> 00:25:56,179
thing of query language send it multiple

00:25:54,559 --> 00:25:57,740
times and just customize the variables

00:25:56,179 --> 00:25:59,360
which can help you when you're actually

00:25:57,740 --> 00:26:07,130
crafting these queries it can make your

00:25:59,360 --> 00:26:09,590
life a lot easier so I've talked a lot

00:26:07,130 --> 00:26:11,690
about fetching data now fetching data

00:26:09,590 --> 00:26:17,090
graph QL is very very good at fetching

00:26:11,690 --> 00:26:19,840
data I prefer it for fetching data using

00:26:17,090 --> 00:26:21,890
it to write data feels a bit odd

00:26:19,840 --> 00:26:24,200
particularly seeing as you user get all

00:26:21,890 --> 00:26:26,630
the time all of graph QL is on a single

00:26:24,200 --> 00:26:28,190
endpoint you send it your query you send

00:26:26,630 --> 00:26:30,230
your variables it returns a response to

00:26:28,190 --> 00:26:33,340
you it's slash graph key well normally

00:26:30,230 --> 00:26:37,460
is kind of the standard and it's a get

00:26:33,340 --> 00:26:40,610
but you can modify data now let's have a

00:26:37,460 --> 00:26:42,950
look at how we do that so what we do is

00:26:40,610 --> 00:26:45,920
we first of all and this isn't actually

00:26:42,950 --> 00:26:47,630
strictly required but it's good practice

00:26:45,920 --> 00:26:49,640
to do it instead of saying query I say

00:26:47,630 --> 00:26:51,170
it's a mutation it's a different type of

00:26:49,640 --> 00:26:54,440
operation that I'm doing I'm doing a

00:26:51,170 --> 00:26:55,910
mutation I'm changing something then

00:26:54,440 --> 00:26:57,590
what I do is I specify what this

00:26:55,910 --> 00:26:59,390
operation is called now again this is

00:26:57,590 --> 00:27:00,559
completely unnecessary it's just simply

00:26:59,390 --> 00:27:04,760
useful to have it there for debugging

00:27:00,559 --> 00:27:08,809
purposes I specify the user and then I

00:27:04,760 --> 00:27:10,010
specify the input repo input now I'll

00:27:08,809 --> 00:27:14,230
have a look at that and on the next

00:27:10,010 --> 00:27:16,760
slide and then what I do is I run this

00:27:14,230 --> 00:27:18,590
operation essentially because all of

00:27:16,760 --> 00:27:20,900
these are operations when I'm talking

00:27:18,590 --> 00:27:22,010
about user and grabbing that what I'm

00:27:20,900 --> 00:27:24,170
actually doing is I'm running an

00:27:22,010 --> 00:27:25,810
operation to get that user it then

00:27:24,170 --> 00:27:28,180
returns to me an object and that's what

00:27:25,810 --> 00:27:31,330
manipulating so I'm saying create repo

00:27:28,180 --> 00:27:33,760
for this user and this repo and it will

00:27:31,330 --> 00:27:35,560
automatically stop and then it will

00:27:33,760 --> 00:27:38,940
return to me what it's created in the

00:27:35,560 --> 00:27:41,890
form that format that I've asked it to

00:27:38,940 --> 00:27:43,800
which is name and description not name

00:27:41,890 --> 00:27:47,110
em repo sorry about that

00:27:43,800 --> 00:27:50,530
now the way that I define like a repo an

00:27:47,110 --> 00:27:52,210
input format is that you say for your in

00:27:50,530 --> 00:27:55,330
your schema which we'll come on to in a

00:27:52,210 --> 00:27:56,530
moment we say input we say repo input

00:27:55,330 --> 00:27:58,120
and then you can specify all of your

00:27:56,530 --> 00:27:59,650
different fields you can say their types

00:27:58,120 --> 00:28:01,660
you can say if they're not herbal you

00:27:59,650 --> 00:28:04,750
can even specify that they'd be another

00:28:01,660 --> 00:28:09,690
type so for example I could say repo

00:28:04,750 --> 00:28:11,980
name description and then I could have

00:28:09,690 --> 00:28:14,890
organization and I expect either that be

00:28:11,980 --> 00:28:16,420
of the type organization and this allows

00:28:14,890 --> 00:28:20,230
you to create an entire object when

00:28:16,420 --> 00:28:21,970
you're putting it in there so schemas

00:28:20,230 --> 00:28:23,560
how does this work on the other side so

00:28:21,970 --> 00:28:25,960
that was all about how we can query

00:28:23,560 --> 00:28:28,690
graph queue up but how do we actually

00:28:25,960 --> 00:28:31,420
define the schema of our own graph you

00:28:28,690 --> 00:28:33,520
are around and the thing is is that even

00:28:31,420 --> 00:28:35,950
if you're only querying a graph QL ever

00:28:33,520 --> 00:28:37,660
it's still use very useful to understand

00:28:35,950 --> 00:28:39,160
like how this type system works and the

00:28:37,660 --> 00:28:44,050
type system primarily belongs on the

00:28:39,160 --> 00:28:45,910
server but using tools like graph iql it

00:28:44,050 --> 00:28:47,860
allows you to validate essentially your

00:28:45,910 --> 00:28:50,140
graph quick your call your queries

00:28:47,860 --> 00:28:53,380
before you actually ever send them which

00:28:50,140 --> 00:28:56,860
you can't do in languages like PHP in

00:28:53,380 --> 00:29:00,640
quite the same way unless use strict

00:28:56,860 --> 00:29:01,990
types use strict types so I'm gonna

00:29:00,640 --> 00:29:04,510
create a type here I'm gonna create a

00:29:01,990 --> 00:29:06,340
conference talk and then I specified the

00:29:04,510 --> 00:29:08,950
different properties on this I'm just

00:29:06,340 --> 00:29:10,030
using an arbitrary syntax on here but

00:29:08,950 --> 00:29:12,940
essentially you would define this in

00:29:10,030 --> 00:29:14,590
your code so first of all I'm gonna have

00:29:12,940 --> 00:29:16,780
a title which is a string it's not

00:29:14,590 --> 00:29:18,790
nullable I'm gonna have a speaker also

00:29:16,780 --> 00:29:22,240
not nullable you can't have a talk

00:29:18,790 --> 00:29:24,490
without a speaker that would be odd it's

00:29:22,240 --> 00:29:26,650
going to be an attract now you can see

00:29:24,490 --> 00:29:29,320
here is that I've defined a custom type

00:29:26,650 --> 00:29:32,110
here called track I'll show you what

00:29:29,320 --> 00:29:33,640
that looks like in a minute now I've

00:29:32,110 --> 00:29:35,860
also known I've got ratings and what I'm

00:29:33,640 --> 00:29:37,480
using is I'm using this list syntax so

00:29:35,860 --> 00:29:39,890
that allows me to essentially have an

00:29:37,480 --> 00:29:41,330
array of different rating so

00:29:39,890 --> 00:29:43,670
this I'm meaning kind of joined in kind

00:29:41,330 --> 00:29:45,200
of that kind of thing now you'll notice

00:29:43,670 --> 00:29:48,170
I've got an exclamation mark on the

00:29:45,200 --> 00:29:50,720
inside here what that means is I can't

00:29:48,170 --> 00:29:52,490
give it a null review so I couldn't I

00:29:50,720 --> 00:29:54,260
would have liked if I had an array and I

00:29:52,490 --> 00:29:56,270
had two reviews in it and one element

00:29:54,260 --> 00:29:58,700
that was null it wouldn't allow that

00:29:56,270 --> 00:30:00,770
null element however there isn't an

00:29:58,700 --> 00:30:02,900
exclamation mark after the list which

00:30:00,770 --> 00:30:05,060
means that it's having no reviews is

00:30:02,900 --> 00:30:06,680
absolutely fine it just prevents a

00:30:05,060 --> 00:30:08,030
review from being null it doesn't

00:30:06,680 --> 00:30:09,590
prevent the list from being null if I

00:30:08,030 --> 00:30:11,260
wanted to say that there must be reviews

00:30:09,590 --> 00:30:15,560
on this talk

00:30:11,260 --> 00:30:17,480
remember joined in there must be then

00:30:15,560 --> 00:30:18,950
add an exclamation mark here and that

00:30:17,480 --> 00:30:20,570
would essentially require that and you

00:30:18,950 --> 00:30:29,810
can use these lists and you can nest

00:30:20,570 --> 00:30:32,330
them etc etc so at the root of all the

00:30:29,810 --> 00:30:34,280
schema you have something called query

00:30:32,330 --> 00:30:35,690
so we were talking about query earlier

00:30:34,280 --> 00:30:37,900
and that thing that I was talking about

00:30:35,690 --> 00:30:39,770
adding at the beginning mutation

00:30:37,900 --> 00:30:43,520
essentially what this does is it defines

00:30:39,770 --> 00:30:44,720
the highest level of functions that

00:30:43,520 --> 00:30:45,260
you're kind of running the things that

00:30:44,720 --> 00:30:46,790
you're doing

00:30:45,260 --> 00:30:48,410
so I'm saying hi I want to look at this

00:30:46,790 --> 00:30:50,210
talk I want to look at the talk ID I

00:30:48,410 --> 00:30:52,250
want to look at the speaker oh and look

00:30:50,210 --> 00:30:54,080
at this review so that's where you're

00:30:52,250 --> 00:30:56,330
defining all of those like upper level

00:30:54,080 --> 00:31:00,140
operations to go and get like a specific

00:30:56,330 --> 00:31:02,600
one or to get a series of them I won't

00:31:00,140 --> 00:31:04,700
cover pagination in much detail in this

00:31:02,600 --> 00:31:08,270
talk I might bring up in a github demo

00:31:04,700 --> 00:31:10,430
just to show you if we've got time so

00:31:08,270 --> 00:31:12,920
what I'm doing here is I'm saying talk I

00:31:10,430 --> 00:31:15,380
want to throw in the argument ID and

00:31:12,920 --> 00:31:18,680
it's of the type ID so ID is a special

00:31:15,380 --> 00:31:21,110
type in graph QL and I want to return a

00:31:18,680 --> 00:31:22,730
conference talk if it's a review or a

00:31:21,110 --> 00:31:24,290
review if it's a speaker or turn the

00:31:22,730 --> 00:31:26,560
speaker object and these are special

00:31:24,290 --> 00:31:31,670
objects and types that I've defined

00:31:26,560 --> 00:31:35,120
almost like a class now it comes with a

00:31:31,670 --> 00:31:39,200
series of inbuilt types those are string

00:31:35,120 --> 00:31:40,640
integer float boolean and ID ID it will

00:31:39,200 --> 00:31:42,710
default to if you're sort of doings

00:31:40,640 --> 00:31:45,560
doing a lookup and you haven't like

00:31:42,710 --> 00:31:47,290
specified exactly what field it is now

00:31:45,560 --> 00:31:49,670
you can also have your custom types

00:31:47,290 --> 00:31:51,650
which look a bit like this conference

00:31:49,670 --> 00:31:54,260
talk here this is a type a custom type

00:31:51,650 --> 00:31:56,909
so you would add this on to the series

00:31:54,260 --> 00:31:59,639
and you can also have enums who knows

00:31:56,909 --> 00:32:01,710
what any num is most of you that's

00:31:59,639 --> 00:32:06,860
fantastic Derek we should definitely get

00:32:01,710 --> 00:32:13,529
this in PHP cool sorry

00:32:06,860 --> 00:32:17,010
seriously though today so enums

00:32:13,529 --> 00:32:19,200
are fantastic they allow us to have a

00:32:17,010 --> 00:32:21,929
series of different values and only one

00:32:19,200 --> 00:32:23,370
of these values can be specified so at

00:32:21,929 --> 00:32:27,000
this conference we have three tracks we

00:32:23,370 --> 00:32:28,110
have the red shifts at the I don't

00:32:27,000 --> 00:32:29,039
actually I'd know how to pronounce this

00:32:28,110 --> 00:32:33,149
which is awkward because there's a

00:32:29,039 --> 00:32:35,760
triply speaking mark I Macari Macari if

00:32:33,149 --> 00:32:37,440
Macari track and the bite-mark track and

00:32:35,760 --> 00:32:39,029
that means that when i'm specifying here

00:32:37,440 --> 00:32:40,710
the track it means it has to be one of

00:32:39,029 --> 00:32:43,529
those three values I can't specify

00:32:40,710 --> 00:32:45,750
anything else it's almost like having an

00:32:43,529 --> 00:32:46,950
array on a string for those of you that

00:32:45,750 --> 00:32:49,669
are not use you know you know once

00:32:46,950 --> 00:32:53,460
before but better like much better

00:32:49,669 --> 00:32:55,440
because it's a type right and the final

00:32:53,460 --> 00:32:59,250
thing kind of on this before I go into

00:32:55,440 --> 00:33:01,169
how to do some PHP is introspection and

00:32:59,250 --> 00:33:04,799
I'm just gonna jump straight into github

00:33:01,169 --> 00:33:07,080
and show you this so with a REST API

00:33:04,799 --> 00:33:08,940
what you commonly need to do is you need

00:33:07,080 --> 00:33:11,340
to define it in a format like swagger

00:33:08,940 --> 00:33:14,190
you need to put it on an aweful tool

00:33:11,340 --> 00:33:15,480
like api re to know in order to be able

00:33:14,190 --> 00:33:18,120
to document it all that kind of thing

00:33:15,480 --> 00:33:20,340
now with graph QL you can actually ask

00:33:18,120 --> 00:33:23,010
the API to give you its documentation

00:33:20,340 --> 00:33:25,260
itself because the schema documents the

00:33:23,010 --> 00:33:27,240
API you can see all the fields you can

00:33:25,260 --> 00:33:30,480
see the types of those fields you can

00:33:27,240 --> 00:33:32,820
bless you you can see the description of

00:33:30,480 --> 00:33:44,880
all the fields and and you can actually

00:33:32,820 --> 00:33:45,990
just ask graph QL to give that to you so

00:33:44,880 --> 00:33:47,639
what I'm going to do is I'm going to use

00:33:45,990 --> 00:33:51,059
one of these special types so they have

00:33:47,639 --> 00:33:53,179
a whole bunch of inbuilt types that are

00:33:51,059 --> 00:33:56,549
special that I'm not going to talk about

00:33:53,179 --> 00:34:00,090
but one of these is schema and what

00:33:56,549 --> 00:34:02,340
schema will do bless you that was to in

00:34:00,090 --> 00:34:06,220
in perfect harmony

00:34:02,340 --> 00:34:09,369
so from schema I can get a list of tire

00:34:06,220 --> 00:34:11,800
and array of types so I'm actually just

00:34:09,369 --> 00:34:13,629
using plain old graph QL Here I am I'm

00:34:11,800 --> 00:34:15,310
looking at types and it's the reason

00:34:13,629 --> 00:34:18,310
it's erroring at me is because that's

00:34:15,310 --> 00:34:20,020
actually an array and then under the

00:34:18,310 --> 00:34:22,869
types I can say I want the name of the

00:34:20,020 --> 00:34:27,159
type I want the fields of the type I

00:34:22,869 --> 00:34:28,750
want the kind of the type and then under

00:34:27,159 --> 00:34:30,280
fields again this is another array so

00:34:28,750 --> 00:34:32,440
you're starting to see like how we can

00:34:30,280 --> 00:34:35,080
miss things here and all I'm doing is

00:34:32,440 --> 00:34:39,940
querying graph QL itself so again I can

00:34:35,080 --> 00:34:41,200
say name description I can see if it's

00:34:39,940 --> 00:34:44,109
deprecated I'll talk about about

00:34:41,200 --> 00:34:55,389
deprecations in a moment and I can get

00:34:44,109 --> 00:34:59,920
also its type of the field so this will

00:34:55,389 --> 00:35:02,080
be huge by the way so what we see here

00:34:59,920 --> 00:35:04,180
is it's showing me all of the different

00:35:02,080 --> 00:35:06,760
different types that it can give you so

00:35:04,180 --> 00:35:09,310
under query so that top-level that we're

00:35:06,760 --> 00:35:10,780
looking at we can see code of conduct we

00:35:09,310 --> 00:35:12,570
can see codes of conduct we can see

00:35:10,780 --> 00:35:15,430
which is what we were looking at earlier

00:35:12,570 --> 00:35:18,640
we can see the the plural and the

00:35:15,430 --> 00:35:20,380
singular there if I actually asked for

00:35:18,640 --> 00:35:22,180
arguments over here it will tell me that

00:35:20,380 --> 00:35:24,310
under code of conduct there is one

00:35:22,180 --> 00:35:28,240
argument which is the idea of the code

00:35:24,310 --> 00:35:31,330
of conduct or the key I can see licenses

00:35:28,240 --> 00:35:34,330
if I scroll down a bit more

00:35:31,330 --> 00:35:35,950
I can see organizations that's something

00:35:34,330 --> 00:35:40,270
we're all familiar with

00:35:35,950 --> 00:35:42,339
I can see users and down here somewhere

00:35:40,270 --> 00:35:43,690
will be repositories as well so

00:35:42,339 --> 00:35:45,339
essentially what this is doing is it's

00:35:43,690 --> 00:35:47,200
telling me things like the description

00:35:45,339 --> 00:35:49,900
account the authenticated user is the

00:35:47,200 --> 00:35:53,170
field deprecated yes or no and I can see

00:35:49,900 --> 00:35:59,220
the type now if I use sign called kind

00:35:53,170 --> 00:35:59,220
of then it will kind of show me the type

00:35:59,280 --> 00:36:05,589
okay that yeah fair enough

00:36:02,099 --> 00:36:07,060
worth the try right we can also get the

00:36:05,589 --> 00:36:08,589
name of a type which will often return

00:36:07,060 --> 00:36:10,810
as null it's just kind of a quirk of

00:36:08,589 --> 00:36:13,690
graph QL in terms of when you're looking

00:36:10,810 --> 00:36:14,950
at objects versus scalar types what soon

00:36:13,690 --> 00:36:15,890
as you get down scalar types these

00:36:14,950 --> 00:36:18,920
fields will like safe

00:36:15,890 --> 00:36:21,200
during etc um this is really cool like I

00:36:18,920 --> 00:36:23,480
can look at all the different I can

00:36:21,200 --> 00:36:28,220
actually look at graphic UL itself and I

00:36:23,480 --> 00:36:31,549
don't need to document my API right now

00:36:28,220 --> 00:36:32,930
with deprecations it's really cool the

00:36:31,549 --> 00:36:35,359
reason that deprecations are cool in

00:36:32,930 --> 00:36:36,859
graph QL is because what you can do on a

00:36:35,359 --> 00:36:42,039
field is you can just specify a

00:36:36,859 --> 00:36:44,809
deprecation reason and as one of the

00:36:42,039 --> 00:36:47,299
properties of a field and what it will

00:36:44,809 --> 00:36:49,099
then say to you is it will give you when

00:36:47,299 --> 00:36:50,809
you're querying this it will say is

00:36:49,099 --> 00:36:53,299
deprecated true it does that magically

00:36:50,809 --> 00:36:56,349
for you and it will then also give you a

00:36:53,299 --> 00:36:59,599
deprecated reason and this allows you to

00:36:56,349 --> 00:37:01,460
deprecated parts of your API in ways

00:36:59,599 --> 00:37:05,529
that you you can't really do in a REST

00:37:01,460 --> 00:37:05,529
API you can't query it about itself free

00:37:08,529 --> 00:37:17,569
so service ID this is probably the most

00:37:13,099 --> 00:37:19,549
popular library for graph QL in PHP it

00:37:17,569 --> 00:37:20,619
will essentially give you all of the

00:37:19,549 --> 00:37:23,509
bootstrapping you need

00:37:20,619 --> 00:37:24,680
it's the dependency of like most common

00:37:23,509 --> 00:37:27,440
graphic you are other graphic you are

00:37:24,680 --> 00:37:29,089
libraries that you'll see now this runs

00:37:27,440 --> 00:37:31,640
on a single endpoint file I'm not going

00:37:29,089 --> 00:37:34,519
to show it to you because it's boring

00:37:31,640 --> 00:37:36,319
honestly essentially what it does it

00:37:34,519 --> 00:37:39,650
will grab some input it will register

00:37:36,319 --> 00:37:42,890
all of your object types so like query

00:37:39,650 --> 00:37:44,240
it will and that kind of thing and then

00:37:42,890 --> 00:37:46,609
it allows you to just execute that it

00:37:44,240 --> 00:37:47,990
will return a response to you now when

00:37:46,609 --> 00:37:53,539
we're defining a type what does a live

00:37:47,990 --> 00:37:57,019
like so I mentioned that we want to

00:37:53,539 --> 00:37:58,250
always have something like called query

00:37:57,019 --> 00:38:00,140
at the top level I'm kind of ignoring

00:37:58,250 --> 00:38:03,230
that for now so I just want to define a

00:38:00,140 --> 00:38:06,920
user type I give it a description I say

00:38:03,230 --> 00:38:08,720
it's our blog visitor I specify some

00:38:06,920 --> 00:38:10,400
fields I specify first-name I have a

00:38:08,720 --> 00:38:12,529
description on each of those fields I

00:38:10,400 --> 00:38:14,569
have the type of those fields this is

00:38:12,529 --> 00:38:15,980
the most important thing here right I'm

00:38:14,569 --> 00:38:19,880
essentially doing a check to make sure

00:38:15,980 --> 00:38:21,349
it's a tight it's a string I've also got

00:38:19,880 --> 00:38:23,240
an email field which is also a string

00:38:21,349 --> 00:38:25,819
and I don't bother to specify other

00:38:23,240 --> 00:38:27,319
fields like the description so I just

00:38:25,819 --> 00:38:28,869
let free say the type that's a shorthand

00:38:27,319 --> 00:38:30,800
syntax

00:38:28,869 --> 00:38:32,720
and then I've got this function here

00:38:30,800 --> 00:38:34,579
called resolve now what this allows me

00:38:32,720 --> 00:38:37,010
to do is for this very specific type I

00:38:34,579 --> 00:38:39,380
can choose what I want it to be able to

00:38:37,010 --> 00:38:41,119
return to me how I want it to get that

00:38:39,380 --> 00:38:42,680
result do I want it to run a query do I

00:38:41,119 --> 00:38:44,630
want it to return some kind of scalar

00:38:42,680 --> 00:38:49,130
value do I want it to look up from like

00:38:44,630 --> 00:38:51,560
a map array now this is great

00:38:49,130 --> 00:38:52,670
when unlike a smaller scale but you

00:38:51,560 --> 00:38:54,650
don't want to have to do that for every

00:38:52,670 --> 00:38:56,210
single one of your entities so what you

00:38:54,650 --> 00:38:59,810
can use is you can use a default field

00:38:56,210 --> 00:39:02,839
resolver and you can say hey if it's on

00:38:59,810 --> 00:39:04,430
take this type pass it into like this

00:39:02,839 --> 00:39:06,050
this particular type of object and then

00:39:04,430 --> 00:39:08,540
run this through my RM for example if

00:39:06,050 --> 00:39:11,300
you're using an arm and it can then

00:39:08,540 --> 00:39:12,740
resolve all the fields for you and do

00:39:11,300 --> 00:39:14,420
that magically essentially without you

00:39:12,740 --> 00:39:16,040
having to specify what would end up

00:39:14,420 --> 00:39:21,589
being quite a lot of complex logic every

00:39:16,040 --> 00:39:22,940
single time now that's great but if you

00:39:21,589 --> 00:39:24,710
want to do it all this automatically you

00:39:22,940 --> 00:39:26,930
can use API platform API platform is

00:39:24,710 --> 00:39:29,270
great I really like it for this kind of

00:39:26,930 --> 00:39:30,650
thing when you want to just sort of

00:39:29,270 --> 00:39:32,240
rapid application development if you can

00:39:30,650 --> 00:39:34,099
just spin it up you define your entity's

00:39:32,240 --> 00:39:36,290
insane like doctor know where I'm if

00:39:34,099 --> 00:39:38,810
you're just doing cried and then it will

00:39:36,290 --> 00:39:40,910
automatically generate a graph QL thing

00:39:38,810 --> 00:39:42,560
for it the only step you have to do is

00:39:40,910 --> 00:39:44,060
requiring that other graph to our

00:39:42,560 --> 00:39:48,680
library and it will automatically enable

00:39:44,060 --> 00:39:49,790
itself it's really cool I will very

00:39:48,680 --> 00:39:52,880
quickly show you this because I'm

00:39:49,790 --> 00:39:59,839
beginning to run out of time essentially

00:39:52,880 --> 00:40:02,480
what I've got on here is I've just got

00:39:59,839 --> 00:40:14,089
an example of that graph QL script you

00:40:02,480 --> 00:40:16,069
can't see that at the back I wanted so

00:40:14,089 --> 00:40:18,349
here I'm specifying a field I'm under

00:40:16,069 --> 00:40:20,210
query Michael's name I'm specifying a

00:40:18,349 --> 00:40:22,790
type and I want it towards that we're

00:40:20,210 --> 00:40:24,050
always resolved the string true then

00:40:22,790 --> 00:40:26,359
I've got all of this bootstrapping which

00:40:24,050 --> 00:40:31,250
basically says like do craft graph QL

00:40:26,359 --> 00:40:34,450
stuff and when I execute this then it

00:40:31,250 --> 00:40:36,740
returns a JSON blob which you can't see

00:40:34,450 --> 00:40:38,660
down here which just says the data

00:40:36,740 --> 00:40:40,430
michaels named foo so that's like a

00:40:38,660 --> 00:40:49,490
working graphic UI on my laptop like in

00:40:40,430 --> 00:40:52,760
like 40 lines of code so rest of us is

00:40:49,490 --> 00:40:54,050
graph QR now Phil put this really well

00:40:52,760 --> 00:40:54,890
in it so you need a blog article when

00:40:54,050 --> 00:40:56,510
graphic you all came out because

00:40:54,890 --> 00:40:58,849
everyone was like hey graphic you all

00:40:56,510 --> 00:41:02,030
this thing's amazing I'm gonna replace

00:40:58,849 --> 00:41:04,490
all the rest api's I've got with it now

00:41:02,030 --> 00:41:05,930
then that caused the backlash of graph

00:41:04,490 --> 00:41:08,300
QL is rubbish don't use it for

00:41:05,930 --> 00:41:12,579
everything and then you ended up with

00:41:08,300 --> 00:41:14,480
kind of like this this this conflict

00:41:12,579 --> 00:41:16,520
where some graph QL are totally

00:41:14,480 --> 00:41:18,380
different they're completely different

00:41:16,520 --> 00:41:20,050
they do different things they do it in a

00:41:18,380 --> 00:41:22,609
different way

00:41:20,050 --> 00:41:24,920
graph QL isn't a magic bullet nor is it

00:41:22,609 --> 00:41:27,050
better it's it doesn't solve all of your

00:41:24,920 --> 00:41:29,780
problems it's not a replacement for rest

00:41:27,050 --> 00:41:32,240
it's an alternative to rest you can use

00:41:29,780 --> 00:41:34,160
both of them at the same time some for

00:41:32,240 --> 00:41:36,680
and some companies do

00:41:34,160 --> 00:41:38,180
graph QL is great for if you're working

00:41:36,680 --> 00:41:39,319
very closely with your mobile developers

00:41:38,180 --> 00:41:41,750
for example and you just want to give

00:41:39,319 --> 00:41:44,780
them access to everything you don't want

00:41:41,750 --> 00:41:47,359
to have any information visibility it's

00:41:44,780 --> 00:41:48,680
really great if you use it right if you

00:41:47,359 --> 00:41:50,420
use it for the right things but don't

00:41:48,680 --> 00:41:51,980
just think oh hey I'm just gonna jump

00:41:50,420 --> 00:41:54,380
over and use graph QL because it's

00:41:51,980 --> 00:41:58,819
better than rest it's not better than

00:41:54,380 --> 00:42:03,200
rice it's an alternative to rest rest is

00:41:58,819 --> 00:42:05,560
a sin it's very built on HTTP it has no

00:42:03,200 --> 00:42:08,540
specification it has no set of tools

00:42:05,560 --> 00:42:10,430
whereas graph QL is very specific it's a

00:42:08,540 --> 00:42:12,440
query language it has a specification it

00:42:10,430 --> 00:42:14,089
has these tools available to you I can

00:42:12,440 --> 00:42:16,069
jump on github Singh and I can run

00:42:14,089 --> 00:42:18,260
queries and it can autocomplete it with

00:42:16,069 --> 00:42:22,880
complete rubbish like why would you not

00:42:18,260 --> 00:42:25,670
want that but it can also optimize for

00:42:22,880 --> 00:42:27,410
like flexibility and performance you are

00:42:25,670 --> 00:42:28,670
always specifying the fields you want

00:42:27,410 --> 00:42:30,200
you don't have to have this like mega

00:42:28,670 --> 00:42:32,500
include at the end of your graph queue

00:42:30,200 --> 00:42:34,970
render your rest api link

00:42:32,500 --> 00:42:36,380
versioning is great because so

00:42:34,970 --> 00:42:40,910
versioning your api's is bad in general

00:42:36,380 --> 00:42:44,150
right if you've got v1 v2 v3 please stop

00:42:40,910 --> 00:42:48,280
a much better way to version your API is

00:42:44,150 --> 00:42:51,020
to deprecated fields and very simply

00:42:48,280 --> 00:42:53,960
just come up with a new name for a name

00:42:51,020 --> 00:42:54,740
for the end point so for example you

00:42:53,960 --> 00:42:57,950
might change

00:42:54,740 --> 00:42:59,180
like users to people or something like

00:42:57,950 --> 00:43:01,160
that if you really need to make a

00:42:59,180 --> 00:43:03,020
breaking change but it's much better to

00:43:01,160 --> 00:43:04,730
just not make a breaking change it's and

00:43:03,020 --> 00:43:06,140
we draft you well because you're always

00:43:04,730 --> 00:43:08,690
specifying the exact fields that you

00:43:06,140 --> 00:43:11,030
want it's very easy to know exactly who

00:43:08,690 --> 00:43:12,350
is using which fields and you can reach

00:43:11,030 --> 00:43:13,910
out to them saying hey you're using this

00:43:12,350 --> 00:43:14,600
deprecated field and you have been for

00:43:13,910 --> 00:43:16,100
like two years

00:43:14,600 --> 00:43:17,390
please start we're gonna get rid of it

00:43:16,100 --> 00:43:20,060
next month and you can automate that

00:43:17,390 --> 00:43:21,650
process you can automate informing your

00:43:20,060 --> 00:43:25,030
users that they're using a deprecated

00:43:21,650 --> 00:43:28,100
part of your API that's cool

00:43:25,030 --> 00:43:29,330
deprecations are much much better and it

00:43:28,100 --> 00:43:33,020
doesn't have any kind of version you

00:43:29,330 --> 00:43:34,640
can't do v1 slash graphic you are what

00:43:33,020 --> 00:43:35,660
are the issues of graphic UL I've kind

00:43:34,640 --> 00:43:39,530
of talked some about something already

00:43:35,660 --> 00:43:43,190
caching it's all on one end point it's

00:43:39,530 --> 00:43:45,770
all on slash graphic you are you can't

00:43:43,190 --> 00:43:48,260
use HTTP varnish and that kind of thing

00:43:45,770 --> 00:43:49,340
in quite the same way it also because

00:43:48,260 --> 00:43:51,860
lots of people are going to be

00:43:49,340 --> 00:43:53,330
requesting different fields it makes

00:43:51,860 --> 00:43:55,040
caching a complete nightmare because

00:43:53,330 --> 00:43:57,200
instead of having one endpoint that

00:43:55,040 --> 00:43:58,790
everyone is always hitting they're

00:43:57,200 --> 00:44:00,200
always requesting a completely different

00:43:58,790 --> 00:44:02,720
version of even requesting that

00:44:00,200 --> 00:44:05,600
particular resource so basically the

00:44:02,720 --> 00:44:08,840
answer to caching is be very good at it

00:44:05,600 --> 00:44:10,340
at lower levels your authentication your

00:44:08,840 --> 00:44:12,619
caching etc should all be at levels

00:44:10,340 --> 00:44:15,170
below graph QL it should be just above

00:44:12,619 --> 00:44:17,869
your persistence layer in your business

00:44:15,170 --> 00:44:21,290
logic layer essentially use Redis

00:44:17,869 --> 00:44:23,810
basically don't rely on HTTP caching it

00:44:21,290 --> 00:44:25,070
in quite the same way but you do have

00:44:23,810 --> 00:44:27,500
the performance benefit of the fact

00:44:25,070 --> 00:44:28,790
you're only giving what you need and

00:44:27,500 --> 00:44:30,260
find it information hiding the whole

00:44:28,790 --> 00:44:32,030
point of graph QL is you don't hide

00:44:30,260 --> 00:44:33,530
information point is you give them exact

00:44:32,030 --> 00:44:36,530
access whatever they want front-end

00:44:33,530 --> 00:44:37,940
developers love graph QL because it

00:44:36,530 --> 00:44:39,080
means that they can just develop without

00:44:37,940 --> 00:44:42,290
having to constantly ask the back-end

00:44:39,080 --> 00:44:43,460
team for extra changes to be made it can

00:44:42,290 --> 00:44:45,140
help speed up development of your

00:44:43,460 --> 00:44:46,430
back-end team because suddenly you're no

00:44:45,140 --> 00:44:49,550
longer having to constantly respond to

00:44:46,430 --> 00:44:50,990
the front-end team and you haven't got

00:44:49,550 --> 00:44:52,520
that that dependency in quite the same

00:44:50,990 --> 00:44:55,130
way you just give them the API and they

00:44:52,520 --> 00:44:57,020
can do all this stuff but if you want to

00:44:55,130 --> 00:45:01,040
do information hiding that's not really

00:44:57,020 --> 00:45:02,600
what it's designed for I think that's

00:45:01,040 --> 00:45:06,890
all I've got time for if not I can show

00:45:02,600 --> 00:45:07,910
you a couple of more quick demos yeah

00:45:06,890 --> 00:45:14,330
okay

00:45:07,910 --> 00:45:16,730
so I can jump over onto ya what should I

00:45:14,330 --> 00:45:18,050
show you so let's have a look at some

00:45:16,730 --> 00:45:20,780
errors very quickly Oh

00:45:18,050 --> 00:45:24,470
[Music]

00:45:20,780 --> 00:45:25,820
oh yeah okay that works so when you're

00:45:24,470 --> 00:45:27,410
looking at errors it will give you all

00:45:25,820 --> 00:45:28,700
of the details you need so for example

00:45:27,410 --> 00:45:30,680
it will tell you exactly where your

00:45:28,700 --> 00:45:32,180
error is if I had a function name up

00:45:30,680 --> 00:45:35,480
here it would tell me the exact function

00:45:32,180 --> 00:45:37,070
that was erroring and it gives you

00:45:35,480 --> 00:45:39,220
essentially an error just like a jason

00:45:37,070 --> 00:45:39,220

YouTube URL: https://www.youtube.com/watch?v=ZE-1Q-QAVpU


