Title: PHP UK 2018 - Hannes Van De Vreken - Inversion of Control Containers Beyond Constructor Injection
Publication date: 2018-03-27
Playlist: PHP UK Conference 2018
Description: 
	Did you know your IoC container can do a whole lot more than just constructor injection? It's packed with features. In this talk you will learn to leverage the container to write loosely coupled code. Well designed code put together by your container will make your apps decoupled from the framework!
Captions: 
	00:00:02,419 --> 00:00:10,440
hi good morning not as full as last year

00:00:07,740 --> 00:00:13,650
last year was a that the other room was

00:00:10,440 --> 00:00:17,190
full as well so I have to step up my

00:00:13,650 --> 00:00:19,800
game now please tweet about this session

00:00:17,190 --> 00:00:22,260
with the hashtag PHP UK and my twitter

00:00:19,800 --> 00:00:27,449
handle is quite long my notifications

00:00:22,260 --> 00:00:29,849
are off so you won't bother me so thanks

00:00:27,449 --> 00:00:31,320
for introducing me my name is Hannes I I

00:00:29,849 --> 00:00:32,969
can describe myself with a couple of

00:00:31,320 --> 00:00:35,430
emoji characters

00:00:32,969 --> 00:00:39,239
I'm a Belgian I like to swim cycle and

00:00:35,430 --> 00:00:40,860
run I work as a software engineer slash

00:00:39,239 --> 00:00:43,020
developer advocate for a company called

00:00:40,860 --> 00:00:46,170
get stream dot IO I joined the company

00:00:43,020 --> 00:00:49,530
six months ago we build scalable news

00:00:46,170 --> 00:00:51,930
feeds and activity streams can you show

00:00:49,530 --> 00:00:57,079
me some hands who has ever set up a

00:00:51,930 --> 00:01:01,260
follower relationship pivot table right

00:00:57,079 --> 00:01:04,379
you probably know that when your user

00:01:01,260 --> 00:01:07,650
base grows the pivot table gets enormous

00:01:04,379 --> 00:01:09,689
ly large and sometimes for some people

00:01:07,650 --> 00:01:13,049
like Twitter in the in the early days

00:01:09,689 --> 00:01:15,119
when they had a lot of fail wheels their

00:01:13,049 --> 00:01:17,580
pivot table was basically so big they

00:01:15,119 --> 00:01:19,439
couldn't handle joining it with any

00:01:17,580 --> 00:01:21,330
other table because that would it would

00:01:19,439 --> 00:01:23,670
go out of memory and it would be super

00:01:21,330 --> 00:01:25,860
hard to fetch a time line for some user

00:01:23,670 --> 00:01:27,360
so that's what we do we build scalable

00:01:25,860 --> 00:01:29,490
news feeds and timelines and

00:01:27,360 --> 00:01:33,090
notification feeds and activity streams

00:01:29,490 --> 00:01:35,310
so everything you see in some social app

00:01:33,090 --> 00:01:37,320
or you can follow people you can

00:01:35,310 --> 00:01:39,479
basically use our tool to build that

00:01:37,320 --> 00:01:41,070
feature and you don't have to think

00:01:39,479 --> 00:01:44,640
about different tables or memory or

00:01:41,070 --> 00:01:47,939
whatever so we have a page called get

00:01:44,640 --> 00:01:49,740
stream that io / try the API it's pretty

00:01:47,939 --> 00:01:52,049
easy I'll remember you after a talk as

00:01:49,740 --> 00:01:54,000
well you can sign up with github or

00:01:52,049 --> 00:01:56,070
register with github it's totally free

00:01:54,000 --> 00:01:58,920
and you can browse through our API and

00:01:56,070 --> 00:01:59,490
see how it works but that's not what you

00:01:58,920 --> 00:02:01,590
came for

00:01:59,490 --> 00:02:04,579
you came for this you came for IOC

00:02:01,590 --> 00:02:07,229
container it's quite tricky

00:02:04,579 --> 00:02:10,020
let me first preface this by saying what

00:02:07,229 --> 00:02:12,480
this talk is not about I will see when I

00:02:10,020 --> 00:02:13,180
talk about IOC I'm not using it as an

00:02:12,480 --> 00:02:16,140
acronym

00:02:13,180 --> 00:02:19,269
for International Olympic Committee

00:02:16,140 --> 00:02:22,090
that's not what it's about you might

00:02:19,269 --> 00:02:24,790
think IOC container well it's about

00:02:22,090 --> 00:02:28,180
docker no that's not true either

00:02:24,790 --> 00:02:30,040
it's about inversion of control but to

00:02:28,180 --> 00:02:32,079
understand inversion of control we need

00:02:30,040 --> 00:02:35,260
to understand a couple of design

00:02:32,079 --> 00:02:36,909
patterns first so this is a quick quick

00:02:35,260 --> 00:02:42,040
quick five-minute lesson on design

00:02:36,909 --> 00:02:43,989
patterns and there's no better way to

00:02:42,040 --> 00:02:46,750
show off design patterns by showing some

00:02:43,989 --> 00:02:49,030
code so this is the first class I want

00:02:46,750 --> 00:02:51,430
to show you it's a super simple service

00:02:49,030 --> 00:02:53,230
cloth and it has one method and it

00:02:51,430 --> 00:02:56,139
calculates something it gets something

00:02:53,230 --> 00:02:57,939
from storage calculates it does some

00:02:56,139 --> 00:02:58,659
calculations and returns the result it's

00:02:57,939 --> 00:03:01,709
super simple

00:02:58,659 --> 00:03:04,030
we all have dozens of classes like this

00:03:01,709 --> 00:03:06,250
but to get something from storage you

00:03:04,030 --> 00:03:09,760
actually need a connection with FTP so

00:03:06,250 --> 00:03:12,180
we do a first design pattern here we

00:03:09,760 --> 00:03:14,319
inject FTP into the service class

00:03:12,180 --> 00:03:16,329
basically you want something that's

00:03:14,319 --> 00:03:18,340
already configured and set up and inject

00:03:16,329 --> 00:03:20,199
that into the constructor so that's the

00:03:18,340 --> 00:03:22,750
second design pattern first I talked

00:03:20,199 --> 00:03:24,729
about dependency injection which is

00:03:22,750 --> 00:03:27,280
injecting a dependency something you

00:03:24,729 --> 00:03:32,560
depend on so this service clause depends

00:03:27,280 --> 00:03:34,840
on FTP connection to work and the way we

00:03:32,560 --> 00:03:36,909
inject it is constructor injection so

00:03:34,840 --> 00:03:41,290
that's two design patterns just in the

00:03:36,909 --> 00:03:45,250
first few slides so the project rows

00:03:41,290 --> 00:03:47,139
along and some some people come in and

00:03:45,250 --> 00:03:50,530
say well we were hitting quite a lot of

00:03:47,139 --> 00:03:52,840
FTP traffic here maybe once you want to

00:03:50,530 --> 00:03:54,459
add some caching so developer comes in

00:03:52,840 --> 00:03:56,470
and says ok let's get this job done

00:03:54,459 --> 00:03:58,479
super quick let's add a few lines in

00:03:56,470 --> 00:04:01,299
this service class where we actually do

00:03:58,479 --> 00:04:03,669
the FTP fetching so we catch some stuff

00:04:01,299 --> 00:04:05,879
and prevent the class from hitting they

00:04:03,669 --> 00:04:10,900
have to be over and over again

00:04:05,879 --> 00:04:12,250
now the QA engineer or whoever jumps

00:04:10,900 --> 00:04:15,189
into the room again and says well we

00:04:12,250 --> 00:04:18,070
want to know how how much of how much we

00:04:15,189 --> 00:04:20,919
actually hit this FTP server so you add

00:04:18,070 --> 00:04:23,289
some logging again a few lines to this

00:04:20,919 --> 00:04:25,600
simple service class but now the service

00:04:23,289 --> 00:04:28,870
class does five different things it gets

00:04:25,600 --> 00:04:31,690
something from the FTP caches it logs it

00:04:28,870 --> 00:04:33,190
to monologue or whatever this dozen

00:04:31,690 --> 00:04:35,200
calculations and returns the result

00:04:33,190 --> 00:04:37,900
that's a lot of stuff going into one

00:04:35,200 --> 00:04:40,540
simple class that's kind of a goat smell

00:04:37,900 --> 00:04:44,920
but okay it works so I'll just deal with

00:04:40,540 --> 00:04:48,280
it but later on we see that we depend a

00:04:44,920 --> 00:04:50,320
lot on FTP here we did depend on FTP to

00:04:48,280 --> 00:04:52,270
get some stuff we cache what we get from

00:04:50,320 --> 00:04:54,580
the FTP we log what the what we get from

00:04:52,270 --> 00:04:56,440
the FTP that's that's a super easy

00:04:54,580 --> 00:04:59,320
refactor right just get everything that

00:04:56,440 --> 00:05:01,360
has to do with FTP the storage thing and

00:04:59,320 --> 00:05:03,640
just extract it to a different class

00:05:01,360 --> 00:05:06,520
that's the first step there's the first

00:05:03,640 --> 00:05:09,190
simple refactoring we're going to do so

00:05:06,520 --> 00:05:11,890
we create a new FTP storage class and we

00:05:09,190 --> 00:05:14,590
just copy/paste some code we give it a

00:05:11,890 --> 00:05:16,300
new method name which is get and then a

00:05:14,590 --> 00:05:19,480
key or a file name whatever you want to

00:05:16,300 --> 00:05:21,700
call it and we refactor the service

00:05:19,480 --> 00:05:25,030
class to inject the the FTP storage

00:05:21,700 --> 00:05:27,670
class instead of the FTP right that's a

00:05:25,030 --> 00:05:29,470
super simple refactoring and now this

00:05:27,670 --> 00:05:31,690
service class is super clean it does one

00:05:29,470 --> 00:05:33,820
thing only and that's getting something

00:05:31,690 --> 00:05:38,590
something from storage and return it the

00:05:33,820 --> 00:05:41,440
calculation on that value the next step

00:05:38,590 --> 00:05:43,960
we can introduce is introducing

00:05:41,440 --> 00:05:47,260
interfaces right the service clause

00:05:43,960 --> 00:05:50,220
depends still on a super detailed FTP

00:05:47,260 --> 00:05:53,920
storage class which is super low level

00:05:50,220 --> 00:05:57,430
it's super yeah super specific to this

00:05:53,920 --> 00:06:00,010
use case we might want to depend on

00:05:57,430 --> 00:06:05,230
something more abstract maybe a sort a

00:06:00,010 --> 00:06:07,540
storage interface right this is a super

00:06:05,230 --> 00:06:11,020
simple refactoring step again just

00:06:07,540 --> 00:06:12,730
introduce an interface make the FTP

00:06:11,020 --> 00:06:15,340
storage implement the interface and

00:06:12,730 --> 00:06:18,000
refactor the service class to type in

00:06:15,340 --> 00:06:21,700
the storage instead of the FTP storage

00:06:18,000 --> 00:06:24,400
right what we are left with is two

00:06:21,700 --> 00:06:27,820
classes and one interface the service

00:06:24,400 --> 00:06:30,430
class and FTP storage cloth which

00:06:27,820 --> 00:06:32,890
implements the storage interface the

00:06:30,430 --> 00:06:35,050
next step is we can go back and refactor

00:06:32,890 --> 00:06:37,330
the FTP storage which still does a lot

00:06:35,050 --> 00:06:39,280
of things its fetch it's fetching from

00:06:37,330 --> 00:06:41,380
the FTP it's caching it

00:06:39,280 --> 00:06:43,810
and it's logging it that's still

00:06:41,380 --> 00:06:46,690
treating Zin one class so if you're

00:06:43,810 --> 00:06:50,200
striving for single responsibility we

00:06:46,690 --> 00:06:53,169
can refactor that by using this storage

00:06:50,200 --> 00:06:56,500
interface we can start introducing some

00:06:53,169 --> 00:06:59,169
decorators this is the first one the

00:06:56,500 --> 00:07:03,160
caching decorator implements the same

00:06:59,169 --> 00:07:05,320
storage interface it's super simple and

00:07:03,160 --> 00:07:08,290
it's basically going to wrap another

00:07:05,320 --> 00:07:10,450
storage class doesn't have to be an FTP

00:07:08,290 --> 00:07:13,450
storage it could be a login decorator as

00:07:10,450 --> 00:07:17,080
well so we inject the login decorator

00:07:13,450 --> 00:07:19,600
which wraps an FTP starch in here we

00:07:17,080 --> 00:07:22,180
also take a caching implementation so we

00:07:19,600 --> 00:07:25,720
can actually remember what it's what it

00:07:22,180 --> 00:07:27,460
has returned in the past the same thing

00:07:25,720 --> 00:07:31,540
is true for the login decorator it just

00:07:27,460 --> 00:07:35,520
wraps any kind of storage into it yeah

00:07:31,540 --> 00:07:37,540
interface type thing could be the cache

00:07:35,520 --> 00:07:39,760
decorator could be the FTP search

00:07:37,540 --> 00:07:46,360
decorator could be an s3 Amazon s3

00:07:39,760 --> 00:07:49,060
Decker implementation so if you now look

00:07:46,360 --> 00:07:51,280
at the FTP storage it's it only has one

00:07:49,060 --> 00:07:56,380
responsibility left and that's to get

00:07:51,280 --> 00:07:57,970
something from the FTP so I showed you a

00:07:56,380 --> 00:08:00,010
lot of code but now I want to show you

00:07:57,970 --> 00:08:02,169
how the different classes and interfaces

00:08:00,010 --> 00:08:04,780
work together in the beginning we

00:08:02,169 --> 00:08:07,600
started with this we had a service class

00:08:04,780 --> 00:08:13,270
which depended on an FTP storage which

00:08:07,600 --> 00:08:16,990
is dependent on an FTP class if you look

00:08:13,270 --> 00:08:19,330
at this graph all the arrows go up but

00:08:16,990 --> 00:08:23,500
the class at the top it's like the most

00:08:19,330 --> 00:08:25,300
specific class that's the most low level

00:08:23,500 --> 00:08:28,870
implementation that you have in this

00:08:25,300 --> 00:08:30,820
paragraph which is completely the

00:08:28,870 --> 00:08:32,919
opposite of what you want you want the

00:08:30,820 --> 00:08:35,530
low level implementation to be at the

00:08:32,919 --> 00:08:39,310
bottom of your graph and to go to have

00:08:35,530 --> 00:08:43,210
all the arrows go upwards so after the

00:08:39,310 --> 00:08:44,680
refactoring we end up with this graph we

00:08:43,210 --> 00:08:46,570
end up with this service class which

00:08:44,680 --> 00:08:50,140
depends on an interface which is high

00:08:46,570 --> 00:08:52,450
level and then we have an FTP storage

00:08:50,140 --> 00:08:54,910
class which is low level

00:08:52,450 --> 00:08:57,400
the bottom of the graph which in in

00:08:54,910 --> 00:08:59,530
itself depends on FTP which is still

00:08:57,400 --> 00:09:03,010
lower level than the service class the

00:08:59,530 --> 00:09:06,610
service class does no longer care about

00:09:03,010 --> 00:09:09,790
what the search is is it an s3 search

00:09:06,610 --> 00:09:11,680
interface is it is it the caching

00:09:09,790 --> 00:09:13,950
decorator is it the login decorator it

00:09:11,680 --> 00:09:16,420
doesn't matter so all of these low-level

00:09:13,950 --> 00:09:18,610
implementations and decorators they're

00:09:16,420 --> 00:09:21,870
all lower level than the service class

00:09:18,610 --> 00:09:25,420
which depends on any kind of these

00:09:21,870 --> 00:09:28,390
implementations so if we put in side by

00:09:25,420 --> 00:09:32,680
side you see that the FTP class has

00:09:28,390 --> 00:09:37,000
become has moved from the top of the

00:09:32,680 --> 00:09:39,160
graph to the bottom of the graph so yeah

00:09:37,000 --> 00:09:43,590
the design patterns I was talking about

00:09:39,160 --> 00:09:47,590
our dependency inversion instead of

00:09:43,590 --> 00:09:49,360
depending on a low-level implementation

00:09:47,590 --> 00:09:51,760
you're going to depend on a high-level

00:09:49,360 --> 00:09:53,740
abstraction so all errors are going up

00:09:51,760 --> 00:09:57,190
and your low-level implementations are

00:09:53,740 --> 00:10:01,090
going down in the dependency graph the

00:09:57,190 --> 00:10:02,980
second design pattern ends is dependency

00:10:01,090 --> 00:10:05,680
injection you're going to inject

00:10:02,980 --> 00:10:08,920
whatever you depend on for example the

00:10:05,680 --> 00:10:11,740
storage interface through a constructor

00:10:08,920 --> 00:10:16,030
injection so that's that's a form of

00:10:11,740 --> 00:10:19,150
dependency injection so sometimes people

00:10:16,030 --> 00:10:21,400
use di as the acronym for dependency

00:10:19,150 --> 00:10:24,010
inversion and it's actually the same

00:10:21,400 --> 00:10:26,050
acronym as dependency injection but

00:10:24,010 --> 00:10:28,180
they're actually two different design

00:10:26,050 --> 00:10:29,500
patterns so keep that in mind and then

00:10:28,180 --> 00:10:32,050
the last one actually works together

00:10:29,500 --> 00:10:34,990
with the top - and that's inversion of

00:10:32,050 --> 00:10:40,000
control inversion of control

00:10:34,990 --> 00:10:45,970
IOC basically means you're no longer

00:10:40,000 --> 00:10:51,730
going to let the service class new up a

00:10:45,970 --> 00:10:54,760
FTP storage like this in the beginning

00:10:51,730 --> 00:10:57,250
we had this we created a new service and

00:10:54,760 --> 00:11:02,220
we inject an FTP and at the end we had

00:10:57,250 --> 00:11:05,180
this which is pretty much a lot of code

00:11:02,220 --> 00:11:06,890
which we don't want to write

00:11:05,180 --> 00:11:11,420
and that's where the IFC container comes

00:11:06,890 --> 00:11:13,970
in right so instead of calling all of

00:11:11,420 --> 00:11:16,280
this or newing up all of this inside the

00:11:13,970 --> 00:11:19,520
service class we're going to reverse

00:11:16,280 --> 00:11:23,810
that and say well whatever it is you're

00:11:19,520 --> 00:11:26,540
going to call me right you're I'm going

00:11:23,810 --> 00:11:28,520
to pass off control to the Container and

00:11:26,540 --> 00:11:31,790
I'm going to say what container you're

00:11:28,520 --> 00:11:33,350
up it's it's your task to tell me what

00:11:31,790 --> 00:11:35,300
is going to be injected inside the

00:11:33,350 --> 00:11:38,870
service class so I'm going to reverse

00:11:35,300 --> 00:11:40,520
the the method the object creation to

00:11:38,870 --> 00:11:41,870
let the ioc container itself do the

00:11:40,520 --> 00:11:45,530
object creation for me

00:11:41,870 --> 00:11:48,020
so that's inversion of control and when

00:11:45,530 --> 00:11:50,450
we use a container and say well get me a

00:11:48,020 --> 00:11:52,250
service class object it's going to look

00:11:50,450 --> 00:11:54,440
up what it what needs to be done to

00:11:52,250 --> 00:11:56,930
create a service class object first it's

00:11:54,440 --> 00:11:58,340
going to create the FTP search class

00:11:56,930 --> 00:12:00,500
that is going to wrap it with log

00:11:58,340 --> 00:12:03,320
decorator then the cache decorator and

00:12:00,500 --> 00:12:05,570
then inject all of that well the cache

00:12:03,320 --> 00:12:07,520
decorator instance which is wrapping all

00:12:05,570 --> 00:12:11,570
the other instances into the service

00:12:07,520 --> 00:12:15,020
cloth note that the object that the

00:12:11,570 --> 00:12:17,150
service class is being injected with

00:12:15,020 --> 00:12:20,300
it's actually the cache decorator and

00:12:17,150 --> 00:12:22,190
not the FTP storage but because the

00:12:20,300 --> 00:12:24,290
cache decorator implements the storage

00:12:22,190 --> 00:12:27,080
interface the service class doesn't

00:12:24,290 --> 00:12:30,080
matter it doesn't care what's being

00:12:27,080 --> 00:12:34,220
injected so that's ioc inversion of

00:12:30,080 --> 00:12:36,260
control helps you with composing all of

00:12:34,220 --> 00:12:43,760
these objects that the ioc container

00:12:36,260 --> 00:12:48,740
help you with composition now enough

00:12:43,760 --> 00:12:51,710
with Gang of Four the design patterns

00:12:48,740 --> 00:12:54,160
here let's talk about the actual

00:12:51,710 --> 00:12:57,950
implementations we can find on packages

00:12:54,160 --> 00:12:59,630
as so there's a ton of frameworks and

00:12:57,950 --> 00:13:02,450
all of these frameworks come with their

00:12:59,630 --> 00:13:05,390
ioc container there's symfony dependency

00:13:02,450 --> 00:13:08,240
injection aluminate which is a laravel

00:13:05,390 --> 00:13:11,470
container or the ice Zend framework

00:13:08,240 --> 00:13:15,100
pimple lis container and most of these

00:13:11,470 --> 00:13:17,960
implements some kind of interoperable

00:13:15,100 --> 00:13:19,880
interface so there's container interrupt

00:13:17,960 --> 00:13:22,519
slash container intro

00:13:19,880 --> 00:13:25,790
which is now deprecated in favor of the

00:13:22,519 --> 00:13:32,589
PSR 11 p sr / container package or

00:13:25,790 --> 00:13:35,149
interface so last year Valentine's Day

00:13:32,589 --> 00:13:38,959
they basically deprecated container

00:13:35,149 --> 00:13:43,100
Interop in favor of PSR 11 so that's

00:13:38,959 --> 00:13:46,100
some love for the PHP fig this is what

00:13:43,100 --> 00:13:49,010
the the interrupt container looks like

00:13:46,100 --> 00:13:50,779
right now it just extends the PSR

00:13:49,010 --> 00:13:52,699
container so it doesn't add anything to

00:13:50,779 --> 00:13:55,579
it and this is what the PSR container

00:13:52,699 --> 00:13:57,500
looks like it has two simple methods the

00:13:55,579 --> 00:14:00,139
first one is the get method which

00:13:57,500 --> 00:14:03,230
returns the result resolved object or

00:14:00,139 --> 00:14:05,180
should return the result object and the

00:14:03,230 --> 00:14:08,269
second method is just a boolean method

00:14:05,180 --> 00:14:10,570
so it just returns yes or no I can I can

00:14:08,269 --> 00:14:14,870
resolve this or I cannot resolve this

00:14:10,570 --> 00:14:17,060
right now let's let's talk about how

00:14:14,870 --> 00:14:20,329
this container works right the internals

00:14:17,060 --> 00:14:26,740
that's what you are all interested in I

00:14:20,329 --> 00:14:26,740
hope so

00:14:27,800 --> 00:14:33,910
the first way a container could work is

00:14:31,069 --> 00:14:37,579
by and doing by doing something called

00:14:33,910 --> 00:14:39,440
automatic object resolution that's just

00:14:37,579 --> 00:14:41,750
some fancy words for saying it's going

00:14:39,440 --> 00:14:44,149
to look at the at the constructor and

00:14:41,750 --> 00:14:46,870
see what needs to be injected so to be

00:14:44,149 --> 00:14:49,399
able to create this send invoice class

00:14:46,870 --> 00:14:51,410
you need to look at the constructor

00:14:49,399 --> 00:14:56,139
because that's how you knew up a new

00:14:51,410 --> 00:15:00,459
object so the constructor has a mailer

00:14:56,139 --> 00:15:03,350
argument which is typing that mailer now

00:15:00,459 --> 00:15:06,019
we're going to do some constructor

00:15:03,350 --> 00:15:09,050
injection here I use a container to do

00:15:06,019 --> 00:15:12,440
that and if we use the PHP Li container

00:15:09,050 --> 00:15:14,420
we can tell it to use a reflection

00:15:12,440 --> 00:15:18,709
container and this reflection container

00:15:14,420 --> 00:15:22,399
is using a PHP native feature called

00:15:18,709 --> 00:15:25,399
reflection and the reflection API goes

00:15:22,399 --> 00:15:28,040
like this you pass in the class name to

00:15:25,399 --> 00:15:29,540
a refraction class object you get a

00:15:28,040 --> 00:15:31,760
constructor and you get to construct

00:15:29,540 --> 00:15:32,360
parameters and then you can loop those

00:15:31,760 --> 00:15:35,120
parameters

00:15:32,360 --> 00:15:37,120
and get those the get the defense the

00:15:35,120 --> 00:15:41,240
die painted class of those constructor

00:15:37,120 --> 00:15:43,700
arguments and the container is going to

00:15:41,240 --> 00:15:47,510
do that recursively so if you go back to

00:15:43,700 --> 00:15:49,940
this this sent invoice class the sent

00:15:47,510 --> 00:15:51,470
invoice class needs a mailer object but

00:15:49,940 --> 00:15:55,070
if the mailer object needs something

00:15:51,470 --> 00:15:57,800
else in that constructor it's going to

00:15:55,070 --> 00:16:00,019
resolve those objects as well so it's

00:15:57,800 --> 00:16:02,810
going to crawl down the dependency graph

00:16:00,019 --> 00:16:05,360
and find all the objects or all the type

00:16:02,810 --> 00:16:09,560
and resolve them from the container by

00:16:05,360 --> 00:16:11,360
doing automatic resolution and then it's

00:16:09,560 --> 00:16:15,950
going to inject it back into this and

00:16:11,360 --> 00:16:19,820
invoice class so it's going to do it

00:16:15,950 --> 00:16:23,060
recursively and basically all of the all

00:16:19,820 --> 00:16:24,980
of the ISU containers have it the

00:16:23,060 --> 00:16:27,470
symphony the IC container has it the

00:16:24,980 --> 00:16:31,910
sent the Zen framework container has it

00:16:27,470 --> 00:16:34,579
laravel li container so that's the super

00:16:31,910 --> 00:16:36,920
easiest way just tell it to do automatic

00:16:34,579 --> 00:16:39,620
resolution and you don't have to help it

00:16:36,920 --> 00:16:40,880
just give me the send invoice class it's

00:16:39,620 --> 00:16:43,550
going to look at the constructor

00:16:40,880 --> 00:16:48,680
arguments and recursively resolve those

00:16:43,550 --> 00:16:50,300
objects obviously it only ends when

00:16:48,680 --> 00:16:52,910
there's one constructor without any

00:16:50,300 --> 00:16:55,610
arguments so it can new up that object

00:16:52,910 --> 00:16:57,500
enroll go back up the dependency graph

00:16:55,610 --> 00:17:01,910
to inject everything into this and

00:16:57,500 --> 00:17:04,990
invoice container but I just basically

00:17:01,910 --> 00:17:08,240
told you to depend on an interface

00:17:04,990 --> 00:17:10,069
instead of a low-level implementation so

00:17:08,240 --> 00:17:14,540
we're gonna need to help the container

00:17:10,069 --> 00:17:16,610
sometimes so if we would have type ended

00:17:14,540 --> 00:17:20,419
the sent invoice class with mailer

00:17:16,610 --> 00:17:22,309
interface we're gonna need to tell the

00:17:20,419 --> 00:17:24,679
container which interface or which

00:17:22,309 --> 00:17:26,449
implementation to inject into the sent

00:17:24,679 --> 00:17:30,470
invoice class

00:17:26,449 --> 00:17:32,090
so the first situation is where we need

00:17:30,470 --> 00:17:34,160
to help the container is when we type

00:17:32,090 --> 00:17:37,940
into an interface and we actually need

00:17:34,160 --> 00:17:40,880
some concrete class to be to be resolved

00:17:37,940 --> 00:17:44,210
to injector the first way to solve this

00:17:40,880 --> 00:17:46,200
is to use aliasing right we're going to

00:17:44,210 --> 00:17:49,320
tell the container well whenever

00:17:46,200 --> 00:17:53,789
this an object is needed with this

00:17:49,320 --> 00:17:55,799
interface use this concrete class in

00:17:53,789 --> 00:17:58,440
laravel it looks like this container

00:17:55,799 --> 00:18:01,649
alias mailer interface use this concrete

00:17:58,440 --> 00:18:04,919
mail or implementation and symfony we

00:18:01,649 --> 00:18:10,620
can do the same thing with set alias and

00:18:04,919 --> 00:18:13,409
in most other most other containers we

00:18:10,620 --> 00:18:15,960
can use something called a anonymous

00:18:13,409 --> 00:18:21,210
function which is used to resolve this

00:18:15,960 --> 00:18:23,370
so we can say well leak container I'm

00:18:21,210 --> 00:18:25,799
gonna add a anonymous function here

00:18:23,370 --> 00:18:27,950
which you can call whenever someone

00:18:25,799 --> 00:18:30,480
needs a mail or interface object and

00:18:27,950 --> 00:18:32,940
whenever someone needs mailer interface

00:18:30,480 --> 00:18:35,429
objects call this anonymous function and

00:18:32,940 --> 00:18:40,769
I will return you the result which you

00:18:35,429 --> 00:18:42,289
need to inject so we basically ask we

00:18:40,769 --> 00:18:44,820
basically tell the container

00:18:42,289 --> 00:18:46,950
here's another anonymous function and

00:18:44,820 --> 00:18:52,769
trust me I'm going to return a mailer

00:18:46,950 --> 00:18:54,630
interfaced typed object so we can create

00:18:52,769 --> 00:18:56,880
a super simple one-line anonymous

00:18:54,630 --> 00:19:00,330
function that says container gets mailer

00:18:56,880 --> 00:19:02,760
class it just returns the returns back

00:19:00,330 --> 00:19:04,679
to the container to say well here's the

00:19:02,760 --> 00:19:08,760
actual implementation you want to in you

00:19:04,679 --> 00:19:13,309
want to be injecting the second

00:19:08,760 --> 00:19:16,139
situation is when a constructor has

00:19:13,309 --> 00:19:21,950
arguments and one or more of those

00:19:16,139 --> 00:19:21,950
arguments are not depended for example

00:19:23,929 --> 00:19:28,710
you want yeah you have a constructor

00:19:26,669 --> 00:19:32,510
with two arguments and one is type int

00:19:28,710 --> 00:19:34,769
that the one is not then basically the

00:19:32,510 --> 00:19:37,470
reflection container or the reflection

00:19:34,769 --> 00:19:38,970
class doesn't have any type in the

00:19:37,470 --> 00:19:41,760
container doesn't know what to inject

00:19:38,970 --> 00:19:44,100
into that constructor so we're gonna

00:19:41,760 --> 00:19:46,350
have to define those dependencies and

00:19:44,100 --> 00:19:51,870
simply we can do this we can say

00:19:46,350 --> 00:19:54,480
register mailer and arguments we can

00:19:51,870 --> 00:19:56,549
call that argument method multiple times

00:19:54,480 --> 00:19:58,289
to say well this is the order of the

00:19:56,549 --> 00:19:59,490
arguments you want to inject into that

00:19:58,289 --> 00:20:04,320
constructor when I

00:19:59,490 --> 00:20:06,660
you instantiate the Mahler class for

00:20:04,320 --> 00:20:09,980
basically any any other container you

00:20:06,660 --> 00:20:13,500
can again use this this struct of

00:20:09,980 --> 00:20:15,390
anonymous functions so for the pimple

00:20:13,500 --> 00:20:18,050
and the lis container you can say well

00:20:15,390 --> 00:20:21,330
whenever Miller interface is resolved

00:20:18,050 --> 00:20:23,790
call this anonymous function so it's the

00:20:21,330 --> 00:20:27,420
same principle here it's kind of a

00:20:23,790 --> 00:20:28,890
factory method or a anonymous function

00:20:27,420 --> 00:20:31,410
closure or whatever you want to call it

00:20:28,890 --> 00:20:32,880
and you basically tell the Container

00:20:31,410 --> 00:20:35,280
well trust me if you call this function

00:20:32,880 --> 00:20:41,600
I'm going to return you an object with

00:20:35,280 --> 00:20:44,940
this interface the next situation is

00:20:41,600 --> 00:20:48,900
when a class is type int it I want to

00:20:44,940 --> 00:20:51,480
return I want to inject an object but

00:20:48,900 --> 00:20:53,370
the next time this the I want I want

00:20:51,480 --> 00:20:57,000
something to be resolved I want to

00:20:53,370 --> 00:20:59,210
return the exact same object this is

00:20:57,000 --> 00:21:01,890
useful for injecting a translator

00:20:59,210 --> 00:21:07,050
something with a global state translator

00:21:01,890 --> 00:21:09,510
has the the locale which is global for

00:21:07,050 --> 00:21:11,970
the entire application or an entity

00:21:09,510 --> 00:21:14,490
manager you only want one entity manager

00:21:11,970 --> 00:21:18,020
to be used in to into your entire

00:21:14,490 --> 00:21:20,250
application or an event dispatcher

00:21:18,020 --> 00:21:22,050
something that you want to share all

00:21:20,250 --> 00:21:24,750
over your application and you want to

00:21:22,050 --> 00:21:29,100
have the exact same object so sharing an

00:21:24,750 --> 00:21:35,280
instance in laravel looks like this you

00:21:29,100 --> 00:21:38,190
do a container share and know you do you

00:21:35,280 --> 00:21:40,860
you do a container singleton and in the

00:21:38,190 --> 00:21:43,830
lis continue do container share and a

00:21:40,860 --> 00:21:46,590
symphony it says register and then set

00:21:43,830 --> 00:21:49,559
shared to true and basically any

00:21:46,590 --> 00:21:52,830
container has this feature some have

00:21:49,559 --> 00:21:56,610
this sharing feature as the default some

00:21:52,830 --> 00:21:58,050
have it disabled by default so it

00:21:56,610 --> 00:22:01,559
depends on the container you're actually

00:21:58,050 --> 00:22:03,450
using but you can define per dependency

00:22:01,559 --> 00:22:06,830
whether you want to reuse the same

00:22:03,450 --> 00:22:06,830
result object or not

00:22:09,610 --> 00:22:19,460
the next situation is when you have

00:22:15,550 --> 00:22:21,710
different classes and they basically

00:22:19,460 --> 00:22:23,810
have the same type and for example file

00:22:21,710 --> 00:22:25,760
system interface but you want to inject

00:22:23,810 --> 00:22:30,980
different implementations or different

00:22:25,760 --> 00:22:32,540
configured objects so for example you

00:22:30,980 --> 00:22:34,160
have a file system interface and you

00:22:32,540 --> 00:22:36,770
have a bunch of controllers a photos

00:22:34,160 --> 00:22:39,170
controller a PDF controller but you want

00:22:36,770 --> 00:22:43,520
them to have a different configured file

00:22:39,170 --> 00:22:45,020
system interface object to do this we

00:22:43,520 --> 00:22:48,530
can use something called contextual

00:22:45,020 --> 00:22:50,620
binding I found I found this feature in

00:22:48,530 --> 00:22:54,950
laravel I don't know if any other

00:22:50,620 --> 00:22:57,620
containers have this but I'm I'm pretty

00:22:54,950 --> 00:22:59,810
sure there's some other containers which

00:22:57,620 --> 00:23:04,520
have this but it'll air well it's super

00:22:59,810 --> 00:23:05,840
easy basically I do this I go to the

00:23:04,520 --> 00:23:08,690
container and I tell it there's

00:23:05,840 --> 00:23:11,720
different file system interface objects

00:23:08,690 --> 00:23:14,060
that you can resolve and I'm going to

00:23:11,720 --> 00:23:16,400
name them the first one I'm going to

00:23:14,060 --> 00:23:19,310
name file system not photos file system

00:23:16,400 --> 00:23:23,480
not files fascism the PDFs file system

00:23:19,310 --> 00:23:27,170
not avatars and I give them different

00:23:23,480 --> 00:23:29,600
names so when there's a photos

00:23:27,170 --> 00:23:31,190
controller I can say when photos

00:23:29,600 --> 00:23:34,760
controller needs file system interface

00:23:31,190 --> 00:23:35,960
give it a file system that photos and I

00:23:34,760 --> 00:23:40,010
do the same thing for different

00:23:35,960 --> 00:23:42,380
controllers so depending on the context

00:23:40,010 --> 00:23:45,380
in this case the photos controller I'm

00:23:42,380 --> 00:23:49,940
going to inject a different item from

00:23:45,380 --> 00:23:52,910
the container based on the name I gave

00:23:49,940 --> 00:23:54,980
it so this name is the same name I gave

00:23:52,910 --> 00:23:58,130
it when I registered it on the container

00:23:54,980 --> 00:24:01,820
so I said container add fascism not

00:23:58,130 --> 00:24:04,940
photos whenever someone resolve as file

00:24:01,820 --> 00:24:09,370
system not photos give it this this

00:24:04,940 --> 00:24:11,270
implementation or this this instance and

00:24:09,370 --> 00:24:13,700
that's how you are

00:24:11,270 --> 00:24:16,850
you basically register different items

00:24:13,700 --> 00:24:19,070
and you tag them or you give it the name

00:24:16,850 --> 00:24:22,130
fascist node photos and you inject it in

00:24:19,070 --> 00:24:24,260
the right place you can still do this in

00:24:22,130 --> 00:24:28,600
different containers as well for example

00:24:24,260 --> 00:24:31,640
in the Li container I just use a default

00:24:28,600 --> 00:24:34,430
anonymous function and I say well when

00:24:31,640 --> 00:24:37,220
fascism when photos controllers is

00:24:34,430 --> 00:24:39,290
resolved I want to get container get

00:24:37,220 --> 00:24:41,540
fascism that photos and I want to inject

00:24:39,290 --> 00:24:46,940
it as a first argument it's as simple as

00:24:41,540 --> 00:24:49,730
that the next situation is when you are

00:24:46,940 --> 00:24:53,840
resolving something for example an event

00:24:49,730 --> 00:24:56,720
dispatcher or a entity manager from

00:24:53,840 --> 00:24:59,080
doctrine you want to do something right

00:24:56,720 --> 00:25:02,240
before you inject it somewhere for

00:24:59,080 --> 00:25:05,780
example you want to resolve some you

00:25:02,240 --> 00:25:10,130
want to register some some listeners for

00:25:05,780 --> 00:25:12,320
the entity manager in doctrine I still

00:25:10,130 --> 00:25:14,240
want to resolve it in a normal way but

00:25:12,320 --> 00:25:20,680
right before I'm injecting it I want to

00:25:14,240 --> 00:25:22,340
register some stuff for this we can use

00:25:20,680 --> 00:25:26,090
solution called

00:25:22,340 --> 00:25:28,130
container events some some

00:25:26,090 --> 00:25:33,710
implementations call it in flexors some

00:25:28,130 --> 00:25:39,010
call it hooks you can call it a post

00:25:33,710 --> 00:25:41,800
resolving or pre resolving hook or event

00:25:39,010 --> 00:25:44,420
and I like it the most in the leak

00:25:41,800 --> 00:25:46,580
implementation and the leak container

00:25:44,420 --> 00:25:49,010
has something like this a container in

00:25:46,580 --> 00:25:53,630
flector and then you give it a class

00:25:49,010 --> 00:25:56,660
name and whenever an entity manager is

00:25:53,630 --> 00:25:59,330
being resolved right before injecting it

00:25:56,660 --> 00:26:00,800
into where it needs to be injected it's

00:25:59,330 --> 00:26:02,600
going to call this class at this

00:26:00,800 --> 00:26:05,480
anonymous function first and it's

00:26:02,600 --> 00:26:07,010
passing in the entity manager as the

00:26:05,480 --> 00:26:10,190
first argument the first and only

00:26:07,010 --> 00:26:12,890
argument I can then call some methods on

00:26:10,190 --> 00:26:15,770
it for example get configuration get the

00:26:12,890 --> 00:26:18,740
entity listener resolver and register

00:26:15,770 --> 00:26:20,720
some entity listeners and this is being

00:26:18,740 --> 00:26:24,020
done right before the entity manager is

00:26:20,720 --> 00:26:26,000
being injected somewhere of course when

00:26:24,020 --> 00:26:28,580
I share this entity manager this is only

00:26:26,000 --> 00:26:30,380
going to be resolved this is only going

00:26:28,580 --> 00:26:32,480
to be called once otherwise I'll be

00:26:30,380 --> 00:26:34,800
registering the same model listener over

00:26:32,480 --> 00:26:37,080
and over again which is not useful

00:26:34,800 --> 00:26:39,990
nerville it looks like this you say

00:26:37,080 --> 00:26:43,020
container resolving and then you give it

00:26:39,990 --> 00:26:45,360
an anonymous function and it's going to

00:26:43,020 --> 00:26:48,450
user its same reflection API found in

00:26:45,360 --> 00:26:50,100
PHP where it's going to look at the

00:26:48,450 --> 00:26:52,140
first argument of this anonymous

00:26:50,100 --> 00:26:55,200
function and it's going to see oh well

00:26:52,140 --> 00:26:57,000
whenever an entity manager is resolved I

00:26:55,200 --> 00:27:03,300
want to call this anonymous function

00:26:57,000 --> 00:27:07,740
because it takes an entity manager I use

00:27:03,300 --> 00:27:11,130
this feature a lot and I use it for

00:27:07,740 --> 00:27:13,800
different purposes the first one is to

00:27:11,130 --> 00:27:16,380
inject something that would otherwise

00:27:13,800 --> 00:27:18,660
require a connection with the global

00:27:16,380 --> 00:27:21,570
state or the global container for

00:27:18,660 --> 00:27:23,010
example an environment if you want to

00:27:21,570 --> 00:27:25,620
know the environment where you're

00:27:23,010 --> 00:27:28,200
working like local or staging or

00:27:25,620 --> 00:27:31,770
production that's that's such a super

00:27:28,200 --> 00:27:33,780
simple string that I actually created an

00:27:31,770 --> 00:27:36,900
interface and a trade which I just add

00:27:33,780 --> 00:27:40,980
to some classes that need the context of

00:27:36,900 --> 00:27:43,590
the environment and then I tell the

00:27:40,980 --> 00:27:45,740
container well whenever something is

00:27:43,590 --> 00:27:49,020
being resolved with this interface

00:27:45,740 --> 00:27:52,890
vironment aware interface I'm going to

00:27:49,020 --> 00:27:56,490
inject the environment into the into the

00:27:52,890 --> 00:27:59,130
object this is just an example but you

00:27:56,490 --> 00:28:03,240
can use it for more than one thing you

00:27:59,130 --> 00:28:06,120
can use it for injecting command bus or

00:28:03,240 --> 00:28:09,420
injecting an event listener just add an

00:28:06,120 --> 00:28:11,700
interface event listener aware and a

00:28:09,420 --> 00:28:13,980
trait event listener aware or event

00:28:11,700 --> 00:28:16,320
dispatcher aware and whenever something

00:28:13,980 --> 00:28:18,180
is being resolved with this either one

00:28:16,320 --> 00:28:20,220
of these interfaces I'm going to

00:28:18,180 --> 00:28:23,220
actually inject the event dispatcher or

00:28:20,220 --> 00:28:25,800
the command bus that's for me it's a

00:28:23,220 --> 00:28:29,100
super super simple way to define

00:28:25,800 --> 00:28:31,260
dependencies and to inject them with a

00:28:29,100 --> 00:28:34,500
well this is actually a different kind

00:28:31,260 --> 00:28:36,540
of this is a different kind of

00:28:34,500 --> 00:28:38,550
dependency injection instead of the

00:28:36,540 --> 00:28:40,620
injecting each route constructor I'm

00:28:38,550 --> 00:28:43,790
going to inject it through a method so

00:28:40,620 --> 00:28:43,790
it's methods injection

00:28:45,400 --> 00:28:56,380
I know some people are against this but

00:28:47,860 --> 00:29:00,220
I like it so the next thing I like to

00:28:56,380 --> 00:29:04,390
use this for is for injecting soft

00:29:00,220 --> 00:29:06,610
dependencies now sometimes a class needs

00:29:04,390 --> 00:29:12,490
a dependency but it doesn't always need

00:29:06,610 --> 00:29:15,820
it for example if you have a Miller

00:29:12,490 --> 00:29:17,760
class sometimes you want to queue a meal

00:29:15,820 --> 00:29:21,130
you want to put it on a background job

00:29:17,760 --> 00:29:25,630
so to be able to do this you need a

00:29:21,130 --> 00:29:27,780
dependency on a queue class but it's not

00:29:25,630 --> 00:29:31,030
always that you need a queue class so

00:29:27,780 --> 00:29:33,130
you want to new up the mailer but you

00:29:31,030 --> 00:29:34,840
don't want it to know about the queue

00:29:33,130 --> 00:29:36,880
class before it's actually going to use

00:29:34,840 --> 00:29:39,190
it so it's a soft dependency you don't

00:29:36,880 --> 00:29:42,520
want to open up a connection with your

00:29:39,190 --> 00:29:45,130
what your message bus or something so

00:29:42,520 --> 00:29:48,490
what I'm going to do here is I'm going

00:29:45,130 --> 00:29:51,130
to inject a anonymous function which can

00:29:48,490 --> 00:29:54,880
be called by the mailer whenever it

00:29:51,130 --> 00:29:57,070
needs a queue so it's a anonymous queue

00:29:54,880 --> 00:30:00,610
resolver which I'm going to inject with

00:29:57,070 --> 00:30:03,250
method injection with a set queue

00:30:00,610 --> 00:30:06,160
resolver method on the mailer

00:30:03,250 --> 00:30:08,530
so whenever the mailer needs to queue it

00:30:06,160 --> 00:30:11,560
already has an anonymous function it can

00:30:08,530 --> 00:30:13,360
call to resolve the queue class from the

00:30:11,560 --> 00:30:15,250
container but it doesn't need to have a

00:30:13,360 --> 00:30:17,560
connection with the container because it

00:30:15,250 --> 00:30:24,550
has a anonymous function which it can

00:30:17,560 --> 00:30:28,090
call to create a queue class so quickly

00:30:24,550 --> 00:30:32,880
quickly injecting stuff injecting soft

00:30:28,090 --> 00:30:36,730
dependencies but I also use it to inject

00:30:32,880 --> 00:30:42,090
well it's basically like the environment

00:30:36,730 --> 00:30:46,330
variable its injecting configurate can

00:30:42,090 --> 00:30:48,250
configurable variables so a lot of

00:30:46,330 --> 00:30:53,080
frameworks have something called a

00:30:48,250 --> 00:30:56,250
config class which it can use to to get

00:30:53,080 --> 00:30:56,250
some config variables

00:30:56,520 --> 00:31:03,700
so sometimes the people that classes

00:31:01,780 --> 00:31:06,910
depend on the config class of the

00:31:03,700 --> 00:31:08,710
framework which is basically injecting

00:31:06,910 --> 00:31:11,530
your framework in into your custom

00:31:08,710 --> 00:31:14,800
domain code and I think personally that

00:31:11,530 --> 00:31:18,850
that is a good smell so what I like to

00:31:14,800 --> 00:31:24,340
do differently is I want to inject those

00:31:18,850 --> 00:31:26,890
config things into the classes without

00:31:24,340 --> 00:31:31,210
actually injecting the config class as a

00:31:26,890 --> 00:31:33,400
whole so whenever this is just an

00:31:31,210 --> 00:31:38,620
example whenever this validator is being

00:31:33,400 --> 00:31:40,690
resolved there's a typo here when the

00:31:38,620 --> 00:31:42,580
validator is resolved I want to get

00:31:40,690 --> 00:31:45,010
something from the config and inject it

00:31:42,580 --> 00:31:47,650
through a method so this validator I

00:31:45,010 --> 00:31:50,170
would add a set allowed file types

00:31:47,650 --> 00:31:52,360
method on it which I can use to inject

00:31:50,170 --> 00:31:55,000
config variables so whenever the

00:31:52,360 --> 00:31:58,600
validator is being resolved I'm going to

00:31:55,000 --> 00:32:00,550
use method injection to let validate and

00:31:58,600 --> 00:32:04,330
know hey here are the file types that

00:32:00,550 --> 00:32:07,480
are valid instead of injecting a

00:32:04,330 --> 00:32:10,570
complete config object into the

00:32:07,480 --> 00:32:13,060
validator so I get to config class from

00:32:10,570 --> 00:32:14,770
the container I get the allowed file

00:32:13,060 --> 00:32:22,630
types and I inject it through methods

00:32:14,770 --> 00:32:29,080
injection so that's how to help the

00:32:22,630 --> 00:32:30,970
container but now I want to yeah where

00:32:29,080 --> 00:32:33,850
do you put all this when do you put all

00:32:30,970 --> 00:32:36,250
the aliasing and the contextual binding

00:32:33,850 --> 00:32:39,010
and the resolving the callbacks and a

00:32:36,250 --> 00:32:42,160
and the container events where to put

00:32:39,010 --> 00:32:45,370
all this there's another container

00:32:42,160 --> 00:32:49,000
interrupt project called service

00:32:45,370 --> 00:32:50,920
provider which basically says well you

00:32:49,000 --> 00:32:54,580
can put it in these service providers

00:32:50,920 --> 00:32:56,200
and they can tell the container what

00:32:54,580 --> 00:32:58,450
needs to be resolved and how it needs to

00:32:56,200 --> 00:33:01,060
be resolved there's a similar thing

00:32:58,450 --> 00:33:03,520
called a service provider in leaked

00:33:01,060 --> 00:33:06,190
slash container and laravel also has

00:33:03,520 --> 00:33:08,890
service providers and simply you can do

00:33:06,190 --> 00:33:09,850
the same thing in configuration files or

00:33:08,890 --> 00:33:12,190
in factories

00:33:09,850 --> 00:33:15,700
and incense you can do the same thing

00:33:12,190 --> 00:33:18,670
with factories as well and config and

00:33:15,700 --> 00:33:20,980
all these kind of things and so every

00:33:18,670 --> 00:33:30,580
project has its own way of telling the

00:33:20,980 --> 00:33:34,420
Container how to resolve something right

00:33:30,580 --> 00:33:37,120
so we just told the Container how to

00:33:34,420 --> 00:33:39,610
resolve something but when are we going

00:33:37,120 --> 00:33:43,270
to use it what and how are we going to

00:33:39,610 --> 00:33:46,980
use it basically I prefer to use the

00:33:43,270 --> 00:33:50,830
container only in a limited set of

00:33:46,980 --> 00:33:54,420
classes or in a limited set of places in

00:33:50,830 --> 00:33:56,650
my entire framework or application I

00:33:54,420 --> 00:33:58,780
don't want to inject a container in

00:33:56,650 --> 00:34:01,060
every single class of my application I

00:33:58,780 --> 00:34:03,360
don't want to make it global I just want

00:34:01,060 --> 00:34:08,050
to use it in this limited set of places

00:34:03,360 --> 00:34:10,980
for example in the factory or an event

00:34:08,050 --> 00:34:13,450
dispatcher or in a router or command bus

00:34:10,980 --> 00:34:16,120
basically in places where you need to

00:34:13,450 --> 00:34:17,980
call other code but you don't know up

00:34:16,120 --> 00:34:21,220
front what what what the code is going

00:34:17,980 --> 00:34:23,980
to be for example I want to call it I

00:34:21,220 --> 00:34:27,670
want to call a controller an HTTP

00:34:23,980 --> 00:34:30,490
controller but I don't know yet how to

00:34:27,670 --> 00:34:32,590
resolve this controller so I'm going to

00:34:30,490 --> 00:34:34,870
inject a container and I'm going to say

00:34:32,590 --> 00:34:37,870
well container now give me an

00:34:34,870 --> 00:34:38,880
instantiated photos controller or an

00:34:37,870 --> 00:34:44,890
instantiated

00:34:38,880 --> 00:34:46,720
cell invoice listener so it's just in a

00:34:44,890 --> 00:34:54,570
limited set of places where I'm going to

00:34:46,720 --> 00:34:54,570
actually use this container so the first

00:34:55,530 --> 00:35:01,930
the first and simplest way of using this

00:34:58,390 --> 00:35:04,030
container is to get something from it so

00:35:01,930 --> 00:35:06,880
as I showed you before the peers are 11

00:35:04,030 --> 00:35:08,560
container interface has two methods and

00:35:06,880 --> 00:35:11,820
the first one is has the second one is

00:35:08,560 --> 00:35:15,030
get and first one just it's a boolean

00:35:11,820 --> 00:35:18,340
can you resolve something with FS or

00:35:15,030 --> 00:35:22,170
file system and second one is well now

00:35:18,340 --> 00:35:22,170
actually give it to me please

00:35:24,550 --> 00:35:31,110
the second way and this is not something

00:35:27,670 --> 00:35:35,410
that's in DPS our interface but that's

00:35:31,110 --> 00:35:39,220
getting an object but I want to use some

00:35:35,410 --> 00:35:42,369
arguments there for example I want to

00:35:39,220 --> 00:35:44,560
get the file system object but here's an

00:35:42,369 --> 00:35:48,070
array of arguments it's like passing in

00:35:44,560 --> 00:35:53,020
CLI arguments if you do a bad batch

00:35:48,070 --> 00:35:56,860
command so give me a fascism fascism

00:35:53,020 --> 00:36:01,770
object but here are some arguments I use

00:35:56,860 --> 00:36:08,950
this to to get a file system object but

00:36:01,770 --> 00:36:11,020
give me the images one I use this to to

00:36:08,950 --> 00:36:15,369
quickly define the file system that

00:36:11,020 --> 00:36:18,550
images but always call the same file

00:36:15,369 --> 00:36:22,270
system resolving and give it an argument

00:36:18,550 --> 00:36:24,310
so I would redefine the same block for

00:36:22,270 --> 00:36:26,920
fascism images fast and not photos

00:36:24,310 --> 00:36:34,540
fascism that pdf's fascism that files

00:36:26,920 --> 00:36:36,250
something like that so another way to

00:36:34,540 --> 00:36:38,020
use a container and this is something

00:36:36,250 --> 00:36:41,980
that only a limited set of containers

00:36:38,020 --> 00:36:43,890
has is calling functions and using the

00:36:41,980 --> 00:36:47,380
container to call an anonymous function

00:36:43,890 --> 00:36:48,640
to look at to inspect the arguments of

00:36:47,380 --> 00:36:52,540
the anonymous function and to

00:36:48,640 --> 00:36:55,780
automatically resolve those so for

00:36:52,540 --> 00:36:59,350
example in this line I have an anonymous

00:36:55,780 --> 00:37:02,710
function with one argument could be

00:36:59,350 --> 00:37:07,060
multiple so whenever I call this

00:37:02,710 --> 00:37:10,270
anonymous function I want the container

00:37:07,060 --> 00:37:12,310
to automatically resolve a mailer object

00:37:10,270 --> 00:37:16,960
and use it to call this anonymous

00:37:12,310 --> 00:37:19,810
function so this is what it looks like

00:37:16,960 --> 00:37:23,380
in leak in the leak container and in the

00:37:19,810 --> 00:37:28,540
laravel container and basically those

00:37:23,380 --> 00:37:32,140
three things here are all anonymous

00:37:28,540 --> 00:37:35,350
functions so this simple array with two

00:37:32,140 --> 00:37:37,900
items it's also an hour

00:37:35,350 --> 00:37:41,500
this function you can use this like any

00:37:37,900 --> 00:37:44,020
other closure so the listener object has

00:37:41,500 --> 00:37:50,830
to be resolved has to be a national

00:37:44,020 --> 00:37:52,930
instance with a method handle so you can

00:37:50,830 --> 00:37:56,050
basically say well this is a closure

00:37:52,930 --> 00:37:58,150
which is a simple array with two items

00:37:56,050 --> 00:38:00,760
instance and a method name you have to

00:37:58,150 --> 00:38:03,250
call on it and then it's going to use

00:38:00,760 --> 00:38:06,340
the reflection API to find the arguments

00:38:03,250 --> 00:38:08,470
of the anonymous function and the bottom

00:38:06,340 --> 00:38:11,140
one is also another an anonymous

00:38:08,470 --> 00:38:14,770
function given that listener is a class

00:38:11,140 --> 00:38:17,410
name which has a static method handle a

00:38:14,770 --> 00:38:23,860
lot of people don't notice but all three

00:38:17,410 --> 00:38:26,290
of these are anonymous functions so it's

00:38:23,860 --> 00:38:30,160
going to use a reflection function which

00:38:26,290 --> 00:38:31,660
is a class and it's in native PHP and

00:38:30,160 --> 00:38:34,480
you don't need to install anything for

00:38:31,660 --> 00:38:39,700
it you can get the callback whether

00:38:34,480 --> 00:38:42,700
that's a listener : : handle or the

00:38:39,700 --> 00:38:45,460
simple area form or an actual defined

00:38:42,700 --> 00:38:48,580
anonymous function and then you can get

00:38:45,460 --> 00:38:50,530
parameters loop over those look at the

00:38:48,580 --> 00:38:54,460
type ends and resolve those from the

00:38:50,530 --> 00:38:58,000
container itself and then there's

00:38:54,460 --> 00:39:00,210
another way to do this in laravel it's

00:38:58,000 --> 00:39:02,440
going to wrap it or nonnamous function

00:39:00,210 --> 00:39:04,870
this anonymous function can have

00:39:02,440 --> 00:39:06,610
multiple arguments it doesn't matter

00:39:04,870 --> 00:39:09,070
it's going to return a anonymous

00:39:06,610 --> 00:39:12,520
function without any arguments so you

00:39:09,070 --> 00:39:15,190
can inject this into any other legacy

00:39:12,520 --> 00:39:17,380
code base and say well I still want to

00:39:15,190 --> 00:39:19,720
use the container but I still want to

00:39:17,380 --> 00:39:22,200
use my legacy code base so this is an

00:39:19,720 --> 00:39:25,090
intermediate form where I can inject

00:39:22,200 --> 00:39:26,770
closures without any arguments and I

00:39:25,090 --> 00:39:30,400
still want to use container to resolve

00:39:26,770 --> 00:39:33,220
stuff and this is this is what it looks

00:39:30,400 --> 00:39:36,490
like it's a public function wrap give it

00:39:33,220 --> 00:39:39,940
a callback with some arguments and just

00:39:36,490 --> 00:39:42,220
return an empty anonymous function which

00:39:39,940 --> 00:39:44,740
will call the same container so this is

00:39:42,220 --> 00:39:48,490
the wrap function it is a function of

00:39:44,740 --> 00:39:49,300
the container itself call itself with

00:39:48,490 --> 00:39:54,790
this callback

00:39:49,300 --> 00:39:57,580
which will in then in in turn I find all

00:39:54,790 --> 00:39:59,530
the rid all the all the arguments and

00:39:57,580 --> 00:40:03,130
the defense of the call back and resolve

00:39:59,530 --> 00:40:10,860
it the next feature I want to talk about

00:40:03,130 --> 00:40:12,820
is tagging and I want to warn you first

00:40:10,860 --> 00:40:15,400
tagging in Symphony it's not the same

00:40:12,820 --> 00:40:17,320
stacking in laravel tagging in Symphony

00:40:15,400 --> 00:40:20,130
is just a way of documenting stuff and

00:40:17,320 --> 00:40:23,020
in laravel it it's actually adding tags

00:40:20,130 --> 00:40:25,210
to items in the container so you can

00:40:23,020 --> 00:40:28,210
resolve all those items at the same time

00:40:25,210 --> 00:40:30,250
for example I use a I use this file

00:40:28,210 --> 00:40:36,310
system that images and faxes not PDFs a

00:40:30,250 --> 00:40:38,470
lot and I can use the container or at

00:40:36,310 --> 00:40:40,600
least the larval container to get all

00:40:38,470 --> 00:40:43,870
the file system tagged items from the

00:40:40,600 --> 00:40:46,000
container and loop over those so if I

00:40:43,870 --> 00:40:47,950
have fast note images I want to tag it

00:40:46,000 --> 00:40:49,390
with file system if I have file system

00:40:47,950 --> 00:40:51,670
add photos I want to tag it with file

00:40:49,390 --> 00:40:53,800
system too and now when I ask the

00:40:51,670 --> 00:40:56,770
container now give me all the instances

00:40:53,800 --> 00:40:58,630
that are tagged file system it's going

00:40:56,770 --> 00:41:01,840
to give me an array of all those

00:40:58,630 --> 00:41:04,570
resolved instances and then I can loop

00:41:01,840 --> 00:41:06,820
over all those instance instances which

00:41:04,570 --> 00:41:09,070
I hope are the same interface of course

00:41:06,820 --> 00:41:11,820
and then I can do something with them I

00:41:09,070 --> 00:41:16,750
want to maybe clear them or I want to

00:41:11,820 --> 00:41:19,480
copy them to s3 or whatever this which

00:41:16,750 --> 00:41:21,760
is tagging it's super a neat feature I

00:41:19,480 --> 00:41:25,720
can basically get all the same typed in

00:41:21,760 --> 00:41:27,910
instances from a container in but again

00:41:25,720 --> 00:41:29,860
I want to warn you if you google it and

00:41:27,910 --> 00:41:31,480
you want to use the same feature and

00:41:29,860 --> 00:41:35,230
Symphony tagging meeting something

00:41:31,480 --> 00:41:37,240
completely different than Symphony since

00:41:35,230 --> 00:41:42,070
I have some time left I want to show you

00:41:37,240 --> 00:41:44,830
some bonus slides I want to show you how

00:41:42,070 --> 00:41:46,510
to resolve circular dependencies so I

00:41:44,830 --> 00:41:49,890
told you the container can do something

00:41:46,510 --> 00:41:52,300
recursively until it hits a a

00:41:49,890 --> 00:41:54,730
constructor with zero arguments and then

00:41:52,300 --> 00:41:58,360
it can roll back up to the dependency

00:41:54,730 --> 00:42:00,880
dependency graph and inject stuff but

00:41:58,360 --> 00:42:03,040
what if there's a Mahler class which

00:42:00,880 --> 00:42:04,450
depends on the queue interface or the

00:42:03,040 --> 00:42:06,190
you implementation and a queue

00:42:04,450 --> 00:42:08,980
implementation depends on a mil into

00:42:06,190 --> 00:42:11,260
implementation or with some more

00:42:08,980 --> 00:42:15,610
intermediary steps so if there's a

00:42:11,260 --> 00:42:17,650
circular a circular thing in your

00:42:15,610 --> 00:42:19,480
dependency graph you might have a

00:42:17,650 --> 00:42:23,620
problem or your container might have a

00:42:19,480 --> 00:42:26,610
problem for example the mail or depends

00:42:23,620 --> 00:42:29,740
on the Q and the Q depends on the mailer

00:42:26,610 --> 00:42:32,950
your container will probably fail and

00:42:29,740 --> 00:42:36,910
say well I looped over this many many

00:42:32,950 --> 00:42:38,380
times and I couldn't resolve it because

00:42:36,910 --> 00:42:40,660
it's recursively it's going to keep a

00:42:38,380 --> 00:42:44,410
counter and stop at like 100 or

00:42:40,660 --> 00:42:46,680
something and the way to stop this from

00:42:44,410 --> 00:42:49,450
happening is to use something called

00:42:46,680 --> 00:42:52,660
well I showed you before it's basically

00:42:49,450 --> 00:42:55,150
making one of those implementations or

00:42:52,660 --> 00:42:57,640
one of those dependency that dependency

00:42:55,150 --> 00:43:01,420
is a soft dependency so instead of

00:42:57,640 --> 00:43:03,370
making the mail or have a hard

00:43:01,420 --> 00:43:05,470
dependency on the queue I'm going to

00:43:03,370 --> 00:43:07,960
make the mailer have a soft dependency

00:43:05,470 --> 00:43:10,480
on the queue so I'm going to add another

00:43:07,960 --> 00:43:15,400
method on the mailer class which is the

00:43:10,480 --> 00:43:17,140
set Q resolver which we we can then we

00:43:15,400 --> 00:43:19,870
can then use to tell the Container well

00:43:17,140 --> 00:43:22,000
whenever the mailer is being resolved so

00:43:19,870 --> 00:43:24,340
this is a container event again or an in

00:43:22,000 --> 00:43:26,500
flexor we're going to say well whenever

00:43:24,340 --> 00:43:28,870
the mailer is being resolved right

00:43:26,500 --> 00:43:31,300
before returning it here's an anonymous

00:43:28,870 --> 00:43:33,160
function to tell the mailer whenever you

00:43:31,300 --> 00:43:35,200
need a queue hey you can use this

00:43:33,160 --> 00:43:36,880
anonymous function and if you call it I

00:43:35,200 --> 00:43:46,180
promise you I will give you a queue

00:43:36,880 --> 00:43:48,460
interface object so that's basically it

00:43:46,180 --> 00:43:52,240
that's that's the bonus files I want to

00:43:48,460 --> 00:43:53,950
quickly recap here so if you use

00:43:52,240 --> 00:43:56,140
dependent if you use dependency

00:43:53,950 --> 00:44:00,390
injection and depend dependency

00:43:56,140 --> 00:44:00,390
inversion and IOC and all of those

00:44:00,660 --> 00:44:06,430
design patterns you might want to use a

00:44:04,090 --> 00:44:08,800
IFC container to compose all those

00:44:06,430 --> 00:44:11,170
objects because all those objects or all

00:44:08,800 --> 00:44:13,180
those classes are super small they have

00:44:11,170 --> 00:44:15,910
one responsibility single responsibility

00:44:13,180 --> 00:44:16,900
principle and it's super hard to compose

00:44:15,910 --> 00:44:18,820
all of that

00:44:16,900 --> 00:44:23,260
and to do that you use the ioc container

00:44:18,820 --> 00:44:25,000
to compose them and to call a new

00:44:23,260 --> 00:44:27,360
service class or to create a new service

00:44:25,000 --> 00:44:30,940
class and the container will know how to

00:44:27,360 --> 00:44:33,340
compose that but you want to help the

00:44:30,940 --> 00:44:35,800
container by using aliasing and

00:44:33,340 --> 00:44:37,630
container events and soft dependencies

00:44:35,800 --> 00:44:39,940
and Method injection and all those

00:44:37,630 --> 00:44:42,220
things to be able to compose all of that

00:44:39,940 --> 00:44:47,100
and if you do that you have super small

00:44:42,220 --> 00:44:49,510
usable unit testable classes and

00:44:47,100 --> 00:44:51,510
everything depends on high level

00:44:49,510 --> 00:44:54,850
abstractions and not on low level

00:44:51,510 --> 00:44:56,770
implementations and when you when you

00:44:54,850 --> 00:44:58,900
draw the beautiful design graph or the

00:44:56,770 --> 00:45:00,760
the dependency graph you will see that

00:44:58,900 --> 00:45:02,890
you have a lot of interfaces on top and

00:45:00,760 --> 00:45:06,400
a lot of low-level implementations on

00:45:02,890 --> 00:45:08,880
the bottom you can also resolve circle

00:45:06,400 --> 00:45:11,350
circular dependencies with soft

00:45:08,880 --> 00:45:13,270
dependencies by making one dependency a

00:45:11,350 --> 00:45:16,780
soft dependency instead of too hard

00:45:13,270 --> 00:45:19,870
dependencies which make a circular loop

00:45:16,780 --> 00:45:22,710
inside your dependency graph so yeah

00:45:19,870 --> 00:45:22,710

YouTube URL: https://www.youtube.com/watch?v=moNNCdLCJr8


