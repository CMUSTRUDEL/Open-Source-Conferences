Title: PHP UK Conference 2018 - Dave Stokes - MySQL 8 -- A New Beginning
Publication date: 2018-03-27
Playlist: PHP UK Conference 2018
Description: 
	MySQL 8 is a major redesign of the most popular database on the web. it will have a true data dictionary (no more .frm, MYI, or other little files) which means you can have millions of tables within a schema. Windowing Functions and Common Table Expressions are available, multi plane character support (because you need emojis in your data), user roles, more JSON functions, and big optimizer improvements. And there will be a better 'out of the box' user experience. And you will learn what happened to MySQL 6 and MySQL 7.
Captions: 
	00:00:07,400 --> 00:00:19,850
[Music]

00:00:25,360 --> 00:00:56,259
[Music]

00:01:07,340 --> 00:01:10,459
[Music]

00:01:13,730 --> 00:01:29,069
[Music]

00:01:35,570 --> 00:01:48,420
now that was the best 10 bucks I ever

00:01:37,770 --> 00:01:49,620
spent professionally in my life for

00:01:48,420 --> 00:01:50,790
those of you who don't know me my name

00:01:49,620 --> 00:01:53,640
is Dave Stokes

00:01:50,790 --> 00:01:55,170
I'm a MySQL community manager Oracle

00:01:53,640 --> 00:01:58,170
pays me to travel around talking about

00:01:55,170 --> 00:02:02,040
MySQL here's my contact information

00:01:58,170 --> 00:02:04,170
don't be shy in reaching out to me by

00:02:02,040 --> 00:02:08,009
the way I'll be back in April for PHP

00:02:04,170 --> 00:02:09,540
Yorkshire so if you I'll be bringing a

00:02:08,009 --> 00:02:12,959
little stuffed dolphin to that show so

00:02:09,540 --> 00:02:15,300
that's another reason to buy tickets by

00:02:12,959 --> 00:02:17,820
the way safe harbor agreement i put the

00:02:15,300 --> 00:02:19,200
you in it for harbor so anytime you ever

00:02:17,820 --> 00:02:21,000
say a word like harbor color i am

00:02:19,200 --> 00:02:22,980
putting the you in there we Americans

00:02:21,000 --> 00:02:24,780
don't do that often enough this is

00:02:22,980 --> 00:02:27,060
basically Oracle's lawyers letting you

00:02:24,780 --> 00:02:30,300
know that I'm talking about a product it

00:02:27,060 --> 00:02:31,890
isn't not officially released so take

00:02:30,300 --> 00:02:35,640
what I say until it has a stock keeping

00:02:31,890 --> 00:02:36,959
number on it with a grain of salt so how

00:02:35,640 --> 00:02:39,420
many of you know in the past five years

00:02:36,959 --> 00:02:43,049
there's been a big big big revolution in

00:02:39,420 --> 00:02:49,410
databases hasn't been Derek here well

00:02:43,049 --> 00:02:52,110
there has been there's been an onslaught

00:02:49,410 --> 00:02:53,720
of no SQL a lot of relational database

00:02:52,110 --> 00:02:55,769
companies have had promise with this

00:02:53,720 --> 00:02:58,590
ironically just about all of them have

00:02:55,769 --> 00:03:00,150
added a JSON data type a lot of the new

00:02:58,590 --> 00:03:02,600
SQL vendors who are promising acid

00:03:00,150 --> 00:03:05,519
compliance are still promising it

00:03:02,600 --> 00:03:07,739
storage big revolution in storage you

00:03:05,519 --> 00:03:11,549
guys are about it sideswiped by this in

00:03:07,739 --> 00:03:13,560
the next six months to 18 months the

00:03:11,549 --> 00:03:15,930
storage vendors are making big big big

00:03:13,560 --> 00:03:17,940
changes of course means you get to buy

00:03:15,930 --> 00:03:20,130
new equipment one of the things you're

00:03:17,940 --> 00:03:22,320
going to get used to is no discs in your

00:03:20,130 --> 00:03:24,239
disk drives otherwise you here used to

00:03:22,320 --> 00:03:26,940
solve state drives haven't seen anything

00:03:24,239 --> 00:03:29,459
yet we now have flash drives coming at

00:03:26,940 --> 00:03:34,590
you that are bigger better stronger and

00:03:29,459 --> 00:03:37,650
of course more expensive developers in

00:03:34,590 --> 00:03:39,959
the past several years as I talked to

00:03:37,650 --> 00:03:42,389
developers as they keep getting younger

00:03:39,959 --> 00:03:45,050
and younger in my eyes fewer and fewer

00:03:42,389 --> 00:03:51,320
of you are having any training in

00:03:45,050 --> 00:03:55,040
relational theory databases relational

00:03:51,320 --> 00:03:58,730
calculus or SQL so we're making some

00:03:55,040 --> 00:03:59,990
changes there to adapt and the other

00:03:58,730 --> 00:04:01,640
thing of course if you haven't heard

00:03:59,990 --> 00:04:03,920
this word there's a thing called a cloud

00:04:01,640 --> 00:04:07,430
that's coming it's gonna be all the

00:04:03,920 --> 00:04:09,020
future everyone keeps telling me when I

00:04:07,430 --> 00:04:10,490
was a kid I kept hearing how we were all

00:04:09,020 --> 00:04:13,550
the programmers we're gonna be replaced

00:04:10,490 --> 00:04:15,260
in the 1960s because they had a language

00:04:13,550 --> 00:04:20,900
that anyone could write called COBOL

00:04:15,260 --> 00:04:22,220
common business oriented language and as

00:04:20,900 --> 00:04:23,750
this cartoon says it doesn't matter how

00:04:22,220 --> 00:04:25,640
many resources you have if you don't

00:04:23,750 --> 00:04:28,130
know how to use them properly that's

00:04:25,640 --> 00:04:29,330
what my job is to come here and and

00:04:28,130 --> 00:04:32,990
encourage you folks to use things

00:04:29,330 --> 00:04:35,990
properly I was in Scotland last fall and

00:04:32,990 --> 00:04:38,690
I saw this lovely sign in the US the

00:04:35,990 --> 00:04:39,800
signs it's I'm not so polite but I

00:04:38,690 --> 00:04:43,760
thought was rather appropriate for

00:04:39,800 --> 00:04:45,380
what's going on with MySQL 8 so

00:04:43,760 --> 00:04:47,260
masculine news for those who have never

00:04:45,380 --> 00:04:50,180
heard of us were 23 years old

00:04:47,260 --> 00:04:50,660
we were bought by Oracle roughly eight

00:04:50,180 --> 00:04:52,940
years ago

00:04:50,660 --> 00:04:55,210
we've roughly sex tuple developers in

00:04:52,940 --> 00:04:58,010
time

00:04:55,210 --> 00:04:59,840
very interesting Oracle's been rather

00:04:58,010 --> 00:05:00,950
hands-off on us and crius like its own

00:04:59,840 --> 00:05:03,380
little business units we were doing

00:05:00,950 --> 00:05:04,850
rather well current releases MySQL five

00:05:03,380 --> 00:05:08,090
seven been out two and a half almost

00:05:04,850 --> 00:05:10,250
three years one of the big features in

00:05:08,090 --> 00:05:11,930
there was the JSON data type I'll touch

00:05:10,250 --> 00:05:16,100
a little bit on that a little bit later

00:05:11,930 --> 00:05:20,420
some news we also revved up security a

00:05:16,100 --> 00:05:22,040
whole lot those you who are used to five

00:05:20,420 --> 00:05:25,610
six and beyond where we can't kind of

00:05:22,040 --> 00:05:28,310
sloppy sequel management if you're

00:05:25,610 --> 00:05:30,560
putting 32 characters in a 30 character

00:05:28,310 --> 00:05:32,810
field we just truncated it and gave you

00:05:30,560 --> 00:05:35,890
a warning with five seven and we stopped

00:05:32,810 --> 00:05:38,419
that we had a lot of demands for that

00:05:35,890 --> 00:05:39,710
for those you have bit I'm sorry but she

00:05:38,419 --> 00:05:41,900
should have been making sure that you

00:05:39,710 --> 00:05:44,450
were fitting the proper size pegging and

00:05:41,900 --> 00:05:47,690
proper size hole also we started

00:05:44,450 --> 00:05:48,980
offering at rest encryption I know some

00:05:47,690 --> 00:05:51,530
time in April y'all are going to be

00:05:48,980 --> 00:05:54,410
facing a rather nasty new standard for

00:05:51,530 --> 00:05:55,880
encryption we have at rest encryption

00:05:54,410 --> 00:05:57,110
with key management that's rather

00:05:55,880 --> 00:05:58,290
interesting I can talk about that

00:05:57,110 --> 00:05:59,580
offline

00:05:58,290 --> 00:06:02,880
also you made a lot of changes in

00:05:59,580 --> 00:06:04,830
performance something also added I'll

00:06:02,880 --> 00:06:06,900
touch later on is documents during group

00:06:04,830 --> 00:06:09,060
replication well and by the way we're

00:06:06,900 --> 00:06:10,740
hiring most MySQL folks work from home

00:06:09,060 --> 00:06:12,330
but if you really want to go to a

00:06:10,740 --> 00:06:18,780
cubicle farm we have those all over the

00:06:12,330 --> 00:06:20,430
planet too so MySQL 8 first questions I

00:06:18,780 --> 00:06:22,890
usually get are what happened to my

00:06:20,430 --> 00:06:24,900
school 6 and what happened to MySQL 7

00:06:22,890 --> 00:06:28,950
and in this audience I could say well

00:06:24,900 --> 00:06:33,540
what happened to PHP 6 does not work

00:06:28,950 --> 00:06:36,480
with a ruby audience by the way well 5 7

00:06:33,540 --> 00:06:38,340
has been out since October 2015 our

00:06:36,480 --> 00:06:39,630
cluster product which for those of you

00:06:38,340 --> 00:06:41,850
with cell phones as you travel from

00:06:39,630 --> 00:06:45,480
tower to tower your cell phone vendor is

00:06:41,850 --> 00:06:46,770
tracking you with MySQL cluster they've

00:06:45,480 --> 00:06:49,650
been using the 7 Series for quite a

00:06:46,770 --> 00:06:51,330
while and back in the pre Sundays

00:06:49,650 --> 00:06:52,680
there's a MySQL 6 it had some

00:06:51,330 --> 00:06:54,510
interesting features and a lot of things

00:06:52,680 --> 00:06:57,470
too didn't work those interesting

00:06:54,510 --> 00:06:59,790
features are back ported into MySQL 5-1

00:06:57,470 --> 00:07:02,790
and with some of the stuff you're gonna

00:06:59,790 --> 00:07:04,020
see me talk about you'll see there's

00:07:02,790 --> 00:07:06,300
enough changes where we decided to just

00:07:04,020 --> 00:07:07,410
make it a brand-new number now I'm not

00:07:06,300 --> 00:07:09,120
gonna talk about the things like the

00:07:07,410 --> 00:07:10,680
redo log and some of those stuff that

00:07:09,120 --> 00:07:12,750
really on the back end performance wise

00:07:10,680 --> 00:07:14,190
make a big change your developers you

00:07:12,750 --> 00:07:17,580
want to hear what's gonna whack you in

00:07:14,190 --> 00:07:19,860
the side of the head first is the data

00:07:17,580 --> 00:07:22,940
dictionary if you've ever gone to varlet

00:07:19,860 --> 00:07:24,990
MySQL under your database and done an LS

00:07:22,940 --> 00:07:27,740
you've seen a whole bunch of files dot

00:07:24,990 --> 00:07:32,460
frm myi da-da-da-da-da

00:07:27,740 --> 00:07:34,740
that was all the metadata and when they

00:07:32,460 --> 00:07:36,480
started my spiel 25 years ago that's a

00:07:34,740 --> 00:07:39,030
great way to do things unfortunately are

00:07:36,480 --> 00:07:41,240
tied to the number of free I nodes on

00:07:39,030 --> 00:07:43,350
your system you have to worry about

00:07:41,240 --> 00:07:45,000
junior developers coming and not knowing

00:07:43,350 --> 00:07:48,510
when a dot frm is and delije and all

00:07:45,000 --> 00:07:49,950
that so now I hear a couple chuckles so

00:07:48,510 --> 00:07:52,110
someone's that someone's happened that

00:07:49,950 --> 00:07:54,840
it's happened to him so now we're

00:07:52,110 --> 00:07:57,360
keeping everything in the database so we

00:07:54,840 --> 00:07:59,100
have a true data dictionary even the

00:07:57,360 --> 00:08:02,250
system tables are now going to be in

00:07:59,100 --> 00:08:07,440
nodb so those you who's still running my

00:08:02,250 --> 00:08:09,000
I Sam time to move the good news with

00:08:07,440 --> 00:08:11,400
this is you now have millions of tables

00:08:09,000 --> 00:08:12,780
with an ax schema the bad news

00:08:11,400 --> 00:08:16,050
you now have millions of tables with an

00:08:12,780 --> 00:08:17,610
ax schema those of you with gray hair

00:08:16,050 --> 00:08:19,650
might remember when Microsoft was

00:08:17,610 --> 00:08:23,820
telling us was all we needed was 640 K

00:08:19,650 --> 00:08:25,229
of memory I'm sure very soon I'll have

00:08:23,820 --> 00:08:26,729
someone tell me that they need more than

00:08:25,229 --> 00:08:30,570
millions of tables in a scheme and they

00:08:26,729 --> 00:08:34,169
probably need billions other big change

00:08:30,570 --> 00:08:38,250
how many of you write sub queries how

00:08:34,169 --> 00:08:40,890
many who writes sub queries well much

00:08:38,250 --> 00:08:43,320
much smaller number

00:08:40,890 --> 00:08:45,209
the old joke used to be that MySQL

00:08:43,320 --> 00:08:47,220
didn't do sub queries so I had to write

00:08:45,209 --> 00:08:48,390
everything as joins and Postgres didn't

00:08:47,220 --> 00:08:51,180
do joins you had to rewrite everything

00:08:48,390 --> 00:08:55,339
as a sub query thankfully in the past 10

00:08:51,180 --> 00:08:58,020
years that's nothing that has changed

00:08:55,339 --> 00:09:00,810
well one of the things we did was MySQL

00:08:58,020 --> 00:09:02,760
8 was we got very inexpensive temporary

00:09:00,810 --> 00:09:05,820
tables which was really now two common

00:09:02,760 --> 00:09:08,160
table expressions those who grew up with

00:09:05,820 --> 00:09:10,310
MySQL or some of the other open source

00:09:08,160 --> 00:09:12,870
databases may not know what these R's

00:09:10,310 --> 00:09:15,600
there well let me start with windowing

00:09:12,870 --> 00:09:18,750
functions windowing functions let you

00:09:15,600 --> 00:09:21,180
work over a subset of data to find out

00:09:18,750 --> 00:09:24,270
interesting interesting facts mainly

00:09:21,180 --> 00:09:26,160
used for analytics the keyword is over

00:09:24,270 --> 00:09:29,430
so here we're selecting name department

00:09:26,160 --> 00:09:31,459
ID salary and some salary over the the

00:09:29,430 --> 00:09:36,450
various departments to get a list of the

00:09:31,459 --> 00:09:38,850
employee pay by department here's

00:09:36,450 --> 00:09:41,459
another example select date amount some

00:09:38,850 --> 00:09:44,130
of amount from payments and we're

00:09:41,459 --> 00:09:46,350
looking for an order range between one

00:09:44,130 --> 00:09:48,690
week intervals preceding the current row

00:09:46,350 --> 00:09:49,830
and order by date so if you're trying to

00:09:48,690 --> 00:09:53,339
figure out who owes you money

00:09:49,830 --> 00:09:56,010
very handy function here's a little bit

00:09:53,339 --> 00:09:59,279
better example especially it's fading

00:09:56,010 --> 00:10:02,630
out up here what we're doing is we're

00:09:59,279 --> 00:10:06,209
partitioning the data by country and by

00:10:02,630 --> 00:10:09,930
country over a year in product and we're

00:10:06,209 --> 00:10:12,900
calculating the the profit now doing

00:10:09,930 --> 00:10:18,990
this with a sub query as possible what I

00:10:12,900 --> 00:10:22,350
want to do it no it's messy see tes the

00:10:18,990 --> 00:10:24,600
keyword is with and in this example with

00:10:22,350 --> 00:10:27,420
a query calling n

00:10:24,600 --> 00:10:30,290
select key one from my table and then we

00:10:27,420 --> 00:10:33,690
do whatever processing we want from that

00:10:30,290 --> 00:10:37,620
sub table here's an example that I like

00:10:33,690 --> 00:10:39,899
to see tes the first one selecting a and

00:10:37,620 --> 00:10:42,899
B from Table one second one is selecting

00:10:39,899 --> 00:10:47,149
C and D from Table two and then we're

00:10:42,899 --> 00:10:51,920
from those two we select B and D from

00:10:47,149 --> 00:10:55,279
zt1 and zt2 joining on these two fields

00:10:51,920 --> 00:10:59,269
much easier to read yes sir alright

00:10:55,279 --> 00:11:02,880
common table expression sorry

00:10:59,269 --> 00:11:05,610
press that much easier than running as a

00:11:02,880 --> 00:11:07,819
sub-query much easier to read especially

00:11:05,610 --> 00:11:10,290
if we have folks who don't know SQL

00:11:07,819 --> 00:11:12,690
reading the sub query for this would be

00:11:10,290 --> 00:11:15,630
rather nasty for them this is much

00:11:12,690 --> 00:11:17,790
easier to use much faster to write also

00:11:15,630 --> 00:11:20,430
we have recursive common table

00:11:17,790 --> 00:11:22,949
expressions so for those of you who are

00:11:20,430 --> 00:11:25,740
in computer science programs this is

00:11:22,949 --> 00:11:27,029
wonderful how many people programming

00:11:25,740 --> 00:11:31,100
for over five years actually use a

00:11:27,029 --> 00:11:33,420
recursive function four or something

00:11:31,100 --> 00:11:36,660
okay much bigger the number that I

00:11:33,420 --> 00:11:39,120
thought usually recursive functions

00:11:36,660 --> 00:11:43,589
other than loading tables you don't see

00:11:39,120 --> 00:11:47,639
very often optimizer part of the

00:11:43,589 --> 00:11:49,829
database is the optimizer it looks at

00:11:47,639 --> 00:11:54,120
your code your sequence equal and

00:11:49,829 --> 00:11:57,870
figures out how to arrange things this

00:11:54,120 --> 00:11:59,579
time we're adding descending indexes we

00:11:57,870 --> 00:12:01,050
also give you optimizer traces for those

00:11:59,579 --> 00:12:03,209
who really want to dig down and get the

00:12:01,050 --> 00:12:06,540
last little percentages of performance

00:12:03,209 --> 00:12:10,139
out of your in your database we let you

00:12:06,540 --> 00:12:11,970
do optimizer hints on the sequel line if

00:12:10,139 --> 00:12:14,250
you know how the optimizer should do

00:12:11,970 --> 00:12:18,569
things new system variables to tell you

00:12:14,250 --> 00:12:19,800
how things are working and we have no

00:12:18,569 --> 00:12:21,839
weight and skip lock that I'll go into

00:12:19,800 --> 00:12:24,750
it a little bit of detail that will make

00:12:21,839 --> 00:12:26,519
your life a lot easier for most of you

00:12:24,750 --> 00:12:28,290
developers this really isn't something

00:12:26,519 --> 00:12:30,000
you're going to care about it's like

00:12:28,290 --> 00:12:32,279
wearing what type of crankcase bearings

00:12:30,000 --> 00:12:33,870
you have in your car but for those who

00:12:32,279 --> 00:12:36,600
are interested in we we've done a lot of

00:12:33,870 --> 00:12:38,060
work here first one that you're probably

00:12:36,600 --> 00:12:40,250
gonna like is skipped

00:12:38,060 --> 00:12:42,710
Laak here we're doing a transaction

00:12:40,250 --> 00:12:44,840
we're selecting all from the seats table

00:12:42,710 --> 00:12:47,770
or seat numbers between two and three

00:12:44,840 --> 00:12:50,210
and booked equals no so imagine you're

00:12:47,770 --> 00:12:51,980
writing a program to book seats on an

00:12:50,210 --> 00:12:55,490
airplane or the venue for some sort of

00:12:51,980 --> 00:12:58,070
event if you go out and grab all these

00:12:55,490 --> 00:13:00,320
but you don't have to wait for the

00:12:58,070 --> 00:13:05,950
records that aren't available you just

00:13:00,320 --> 00:13:10,880
skipped over the locked ones much faster

00:13:05,950 --> 00:13:12,230
and we also have no wait here's an

00:13:10,880 --> 00:13:15,350
example where we're going out and again

00:13:12,230 --> 00:13:17,810
grabbing seats using a row number and we

00:13:15,350 --> 00:13:19,820
want the available seats and we're gonna

00:13:17,810 --> 00:13:21,440
say okay we're gonna look for the ones

00:13:19,820 --> 00:13:24,980
that are we're gonna skip the ones that

00:13:21,440 --> 00:13:26,510
are locked and if everything's locked

00:13:24,980 --> 00:13:28,880
don't wait around for him immediately

00:13:26,510 --> 00:13:30,770
return so you go back and say hey row

00:13:28,880 --> 00:13:36,770
two isn't available but maybe row three

00:13:30,770 --> 00:13:39,680
is out there for me here's another

00:13:36,770 --> 00:13:42,410
example actually three examples on one

00:13:39,680 --> 00:13:45,860
page in the top left we create a table

00:13:42,410 --> 00:13:48,650
with three values 1 2 & 3 and then we

00:13:45,860 --> 00:13:50,860
grab number 2 for update someone else

00:13:48,650 --> 00:13:53,480
comes along and in blue on the right

00:13:50,860 --> 00:13:56,600
once we go out and grab that record for

00:13:53,480 --> 00:13:59,660
update but it's locked over here they

00:13:56,600 --> 00:14:03,410
immediately get a return you can't get

00:13:59,660 --> 00:14:07,640
to it in the past you'd block until this

00:14:03,410 --> 00:14:09,650
one completed also what skip block let's

00:14:07,640 --> 00:14:11,660
go out and get all those records oh we

00:14:09,650 --> 00:14:13,640
got one in three once again 2 is locked

00:14:11,660 --> 00:14:22,130
up here so we're only getting the ones

00:14:13,640 --> 00:14:23,300
that are available to us histograms this

00:14:22,130 --> 00:14:24,890
is something I kind of hesitated about

00:14:23,300 --> 00:14:26,930
putting in this presentation but it's

00:14:24,890 --> 00:14:31,790
rather important for those you who are

00:14:26,930 --> 00:14:35,060
doing complex or compound indexes so if

00:14:31,790 --> 00:14:38,060
you have a columns that's not the first

00:14:35,060 --> 00:14:39,590
column and an index and it's on the

00:14:38,060 --> 00:14:42,380
right-hand side of a where condition

00:14:39,590 --> 00:14:46,310
especially on a join and in or an order

00:14:42,380 --> 00:14:49,490
by you can create histograms basically

00:14:46,310 --> 00:14:52,040
histograms take your your index and

00:14:49,490 --> 00:14:54,500
create buckets feel like every

00:14:52,040 --> 00:14:57,070
ten buckets for your entire index so the

00:14:54,500 --> 00:15:00,680
optimizer knows much more precisely

00:14:57,070 --> 00:15:02,870
where that secondary index is so if

00:15:00,680 --> 00:15:04,550
you're using secondary indexes and nodb

00:15:02,870 --> 00:15:10,610
this will really make your queries

00:15:04,550 --> 00:15:14,480
scream that is the smuggest picture of a

00:15:10,610 --> 00:15:18,680
cat I could find which is not an easy

00:15:14,480 --> 00:15:20,960
statement to say last year from the

00:15:18,680 --> 00:15:22,640
University of Michigan came a paper

00:15:20,960 --> 00:15:26,110
talking about contention aware

00:15:22,640 --> 00:15:29,210
transaction scheduling of course our

00:15:26,110 --> 00:15:32,840
optimizer folks looked at this and

00:15:29,210 --> 00:15:34,340
thought this is the best thing ever so

00:15:32,840 --> 00:15:35,650
they went and implemented it and it

00:15:34,340 --> 00:15:39,800
didn't work

00:15:35,650 --> 00:15:41,180
anyone have that happen in their code so

00:15:39,800 --> 00:15:43,640
they contacted the authors and the

00:15:41,180 --> 00:15:46,210
authors say oh yeah we forgot to mention

00:15:43,640 --> 00:15:48,830
this and you got to try this and do this

00:15:46,210 --> 00:15:50,540
and with a little bit of work and a

00:15:48,830 --> 00:15:53,780
little bit of pain they got to work and

00:15:50,540 --> 00:15:55,790
boy does it work it is amazing the basic

00:15:53,780 --> 00:15:59,300
idea is that if you have various

00:15:55,790 --> 00:16:01,300
processes locking up resources the most

00:15:59,300 --> 00:16:05,390
greedy one wins

00:16:01,300 --> 00:16:08,360
now I'm greatly simplifying someone's

00:16:05,390 --> 00:16:11,030
PhD thesis or dissertation there but

00:16:08,360 --> 00:16:13,370
that's the idea what this does for you

00:16:11,030 --> 00:16:15,890
is it means if you're doing a lot of

00:16:13,370 --> 00:16:18,170
locks things will go through a lot

00:16:15,890 --> 00:16:19,520
faster the optimizer knows whose degree

00:16:18,170 --> 00:16:22,310
ones and tries to get them out of the

00:16:19,520 --> 00:16:29,210
way faster that really drives down

00:16:22,310 --> 00:16:32,150
overall latency rolls the old hey this

00:16:29,210 --> 00:16:34,310
account works in tests but doesn't work

00:16:32,150 --> 00:16:37,100
in production or it works in dev but not

00:16:34,310 --> 00:16:39,920
in production or vice versa it's often

00:16:37,100 --> 00:16:42,620
hard to copy accounts from one

00:16:39,920 --> 00:16:44,420
environment to another also it's hard

00:16:42,620 --> 00:16:46,040
when you have jobs like accountants

00:16:44,420 --> 00:16:48,140
where they bring in people for seasonal

00:16:46,040 --> 00:16:50,900
work tax times over they get rid of them

00:16:48,140 --> 00:16:54,350
so what roles what you do is create a

00:16:50,900 --> 00:16:56,150
function select accounting and the

00:16:54,350 --> 00:17:00,290
accounting folks can see X Y & Z

00:16:56,150 --> 00:17:02,090
databases but not a B and C and as you

00:17:00,290 --> 00:17:05,010
get more people you assign them to that

00:17:02,090 --> 00:17:07,679
role so you have a new user name mayor

00:17:05,010 --> 00:17:09,000
Mary's in accounting she automatically

00:17:07,679 --> 00:17:12,540
it has that role she has all the

00:17:09,000 --> 00:17:14,910
privileges for that group you hired Joe

00:17:12,540 --> 00:17:19,079
to work on accounting but he's also

00:17:14,910 --> 00:17:21,270
working on personnel you had signed him

00:17:19,079 --> 00:17:23,370
to the group that sees personnel files

00:17:21,270 --> 00:17:25,650
but not the stuff for and the stuff for

00:17:23,370 --> 00:17:27,179
accounting or any hire someone else

00:17:25,650 --> 00:17:29,520
who's only gonna see the personnel stuff

00:17:27,179 --> 00:17:31,260
keep them out of counting you now assign

00:17:29,520 --> 00:17:34,169
roles to it much easier than trying to

00:17:31,260 --> 00:17:39,590
go back and look at the share grants and

00:17:34,169 --> 00:17:47,610
who's doing what to whom character sets

00:17:39,590 --> 00:17:49,020
finally yes okay I got spoiled 20-some

00:17:47,610 --> 00:17:51,690
odd years ago when I started playing in

00:17:49,020 --> 00:17:55,169
MySQL and I found out I can make things

00:17:51,690 --> 00:17:56,280
run much faster by having only Latin one

00:17:55,169 --> 00:17:58,980
character sets

00:17:56,280 --> 00:18:00,990
I used to recompile my server so it only

00:17:58,980 --> 00:18:03,870
had that character set it was smaller

00:18:00,990 --> 00:18:06,090
faster more agile really great back in

00:18:03,870 --> 00:18:09,120
the three days not so good in the four

00:18:06,090 --> 00:18:13,290
days doesn't work on the side of the

00:18:09,120 --> 00:18:17,669
Atlantic very well so MySQL eight will

00:18:13,290 --> 00:18:22,080
officially be utf-8 and B for previously

00:18:17,669 --> 00:18:23,970
our utf-8 was actually UTF mb3 for those

00:18:22,080 --> 00:18:25,530
who who don't have to play with us on a

00:18:23,970 --> 00:18:27,950
regular basis it sounds like equivalent

00:18:25,530 --> 00:18:30,150
between a three and a four well

00:18:27,950 --> 00:18:32,880
previously were three bytes that meant

00:18:30,150 --> 00:18:34,710
you had no emojis we didn't have the

00:18:32,880 --> 00:18:37,200
Supplemental multilingual plane we now

00:18:34,710 --> 00:18:40,230
have that our Chinese Japanese Korean

00:18:37,200 --> 00:18:41,700
support was kind of sketchy at best but

00:18:40,230 --> 00:18:43,980
a couple years ago we got support for

00:18:41,700 --> 00:18:46,410
the GBA T no 30 character set which is

00:18:43,980 --> 00:18:49,049
the official People's Republic of China

00:18:46,410 --> 00:18:51,360
character set and we started working on

00:18:49,049 --> 00:18:55,590
this if there's going to be an upgrade

00:18:51,360 --> 00:18:58,830
problem it will probably in here so test

00:18:55,590 --> 00:19:01,080
your datasets make sure that everything

00:18:58,830 --> 00:19:04,140
works also in the past we've offered

00:19:01,080 --> 00:19:06,540
case insensitive and case sensitive

00:19:04,140 --> 00:19:10,950
collation so that you could compare

00:19:06,540 --> 00:19:13,620
things that way we're also going to have

00:19:10,950 --> 00:19:16,190
accent insensitive character sets to go

00:19:13,620 --> 00:19:16,190
along with this

00:19:17,220 --> 00:19:22,020
so why is this important well in the

00:19:20,790 --> 00:19:23,100
past few years when I'm talking to

00:19:22,020 --> 00:19:24,600
developers about this

00:19:23,100 --> 00:19:27,420
they mentioned to me there's one thing

00:19:24,600 --> 00:19:29,510
they all want in their database and what

00:19:27,420 --> 00:19:32,070
could that be

00:19:29,510 --> 00:19:36,330
for some reason emojis have taken over

00:19:32,070 --> 00:19:43,370
the world especially this one yeah

00:19:36,330 --> 00:19:43,370
there's so much of it invisible indexes

00:19:43,460 --> 00:19:49,770
years ago if you wanted to check out the

00:19:47,210 --> 00:19:52,170
performance of a query and you ran

00:19:49,770 --> 00:19:53,520
explain on it and it was using an index

00:19:52,170 --> 00:19:57,240
you weren't quite sure was the right

00:19:53,520 --> 00:19:59,370
index you could delete that index and

00:19:57,240 --> 00:20:00,990
rerun explain and find out that you

00:19:59,370 --> 00:20:03,510
really didn't need that ink in that

00:20:00,990 --> 00:20:05,250
index and try to rebuild that index and

00:20:03,510 --> 00:20:09,090
find out that it took an hour two hours

00:20:05,250 --> 00:20:11,550
three hours a weekend a week invisible

00:20:09,090 --> 00:20:13,950
indexes for the session allow you to

00:20:11,550 --> 00:20:18,680
turn it off from view from the optimizer

00:20:13,950 --> 00:20:20,970
so when you run explain on a query

00:20:18,680 --> 00:20:23,720
you're going to quickly tell where the

00:20:20,970 --> 00:20:26,520
index is actually helping you or not

00:20:23,720 --> 00:20:28,590
well by the way our descending indexes

00:20:26,520 --> 00:20:30,180
in MySQL eight are true descending

00:20:28,590 --> 00:20:32,820
indexes we're just not flipping the

00:20:30,180 --> 00:20:39,690
pointer better performance for folks who

00:20:32,820 --> 00:20:41,880
sort things backwards set persist if you

00:20:39,690 --> 00:20:44,250
have a server especially in the cloud

00:20:41,880 --> 00:20:46,080
where you're admitting it on Monday and

00:20:44,250 --> 00:20:48,270
Tuesday someone else wants to change on

00:20:46,080 --> 00:20:49,530
Wednesday and over the weekend someone

00:20:48,270 --> 00:20:52,470
else makes a change and then things

00:20:49,530 --> 00:20:53,940
reboot in the past you lost all those

00:20:52,470 --> 00:20:57,540
settings unless someone put them in the

00:20:53,940 --> 00:20:59,390
config file well with set persist we

00:20:57,540 --> 00:21:02,700
actually write it into a file

00:20:59,390 --> 00:21:06,330
MySQL auto dot CNF that runs after your

00:21:02,700 --> 00:21:10,020
my dot CNF so any changes you've made

00:21:06,330 --> 00:21:13,790
are stored of course you have to

00:21:10,020 --> 00:21:13,790
remember to type in set persist but

00:21:13,880 --> 00:21:18,270
makes that a policy to do stuff we've

00:21:16,950 --> 00:21:19,530
had a lot of cases especially in the

00:21:18,270 --> 00:21:22,080
cloud repeating when someone make a

00:21:19,530 --> 00:21:24,150
change some of your boots and they were

00:21:22,080 --> 00:21:27,890
change wasn't staying there so we've

00:21:24,150 --> 00:21:27,890
implemented a set persist

00:21:29,960 --> 00:21:38,400
resource groups you can dedicate certain

00:21:35,550 --> 00:21:42,330
CPUs on a multi CPU system to certain

00:21:38,400 --> 00:21:44,790
functions so like the example that we

00:21:42,330 --> 00:21:47,150
use in the manual is recreate a research

00:21:44,790 --> 00:21:49,980
group or a resource group called batch

00:21:47,150 --> 00:21:54,720
and it's a user group and we're gonna

00:21:49,980 --> 00:21:58,650
dedicate CPUs two and three at a

00:21:54,720 --> 00:22:00,180
priority of ten for reading so like

00:21:58,650 --> 00:22:02,250
during the day you have batch uploads

00:22:00,180 --> 00:22:05,460
and you don't want to mess up your other

00:22:02,250 --> 00:22:09,690
operations you said it with a mask you

00:22:05,460 --> 00:22:12,030
love entering hours so like seven to

00:22:09,690 --> 00:22:13,530
seven and after seven reset that for or

00:22:12,030 --> 00:22:15,300
to something higher when you can run

00:22:13,530 --> 00:22:19,350
more batch jobs it has many interactive

00:22:15,300 --> 00:22:21,660
users one of our engineers who runs on

00:22:19,350 --> 00:22:25,610
very very big systems finds this is

00:22:21,660 --> 00:22:28,050
absolutely amazing to get performance on

00:22:25,610 --> 00:22:30,050
different qualities and quantities of

00:22:28,050 --> 00:22:33,270
queries for different groups and

00:22:30,050 --> 00:22:34,860
something else you can do is when you

00:22:33,270 --> 00:22:37,410
log into your session you set your

00:22:34,860 --> 00:22:38,520
resource group to whatever you want for

00:22:37,410 --> 00:22:40,680
the rest of the session you're running

00:22:38,520 --> 00:22:43,680
at that priority and it's something you

00:22:40,680 --> 00:22:46,080
do on your queries is within a comment

00:22:43,680 --> 00:22:48,450
set the resource group so resource

00:22:46,080 --> 00:22:52,050
underscore group batch sets your

00:22:48,450 --> 00:22:53,070
priority to batch so for those of you

00:22:52,050 --> 00:22:54,270
have curious that you're gonna run

00:22:53,070 --> 00:22:57,510
during the day that you don't really

00:22:54,270 --> 00:22:58,440
need right away you can do something

00:22:57,510 --> 00:22:59,010
like this and make your life a lot

00:22:58,440 --> 00:23:01,230
easier

00:22:59,010 --> 00:23:08,670
also set higher resource groups to get

00:23:01,230 --> 00:23:11,810
things back faster okay that should be

00:23:08,670 --> 00:23:15,210
3d Jerome scenes there's three G sorry

00:23:11,810 --> 00:23:16,860
quote from Governor Schwarzenegger GS is

00:23:15,210 --> 00:23:21,150
a form of digital mapping technology

00:23:16,860 --> 00:23:26,760
kinda like Google Earth but better up

00:23:21,150 --> 00:23:30,360
until five seven my friends who wanted

00:23:26,760 --> 00:23:33,450
to run GIS type information I advised

00:23:30,360 --> 00:23:35,060
him to run post GIS I did it better was

00:23:33,450 --> 00:23:37,440
more complete had better functionality

00:23:35,060 --> 00:23:40,370
that changed with five seven we've been

00:23:37,440 --> 00:23:42,770
working very very much

00:23:40,370 --> 00:23:44,630
with the open geometry folks and the

00:23:42,770 --> 00:23:47,150
folks from boost dot geometry and open G

00:23:44,630 --> 00:23:49,100
ID so now you're gonna have a flat world

00:23:47,150 --> 00:23:53,360
or lips idle world where things wrapped

00:23:49,100 --> 00:23:55,159
around we have all the things where you

00:23:53,360 --> 00:23:58,070
can say okay I'm at location X what's

00:23:55,159 --> 00:24:00,350
the nearest pizza to me and have all

00:23:58,070 --> 00:24:02,690
that stuff works so if you've been

00:24:00,350 --> 00:24:06,279
running post GIS because my school would

00:24:02,690 --> 00:24:08,809
handle this you now have another option

00:24:06,279 --> 00:24:10,880
JSON by the way I like to mention that I

00:24:08,809 --> 00:24:13,250
have a book on JSON and MySQL coming out

00:24:10,880 --> 00:24:19,850
hopefully in the spring so please look

00:24:13,250 --> 00:24:21,440
for that MySQL five seven was up was the

00:24:19,850 --> 00:24:22,970
upgraded choice for many folks the past

00:24:21,440 --> 00:24:26,179
couple years because just because of the

00:24:22,970 --> 00:24:27,740
JSON data type my friends at Amazon were

00:24:26,179 --> 00:24:30,049
complaining about they didn't have it

00:24:27,740 --> 00:24:32,809
until this past week so if you're

00:24:30,049 --> 00:24:36,789
dealing with JSON data it's a it's a big

00:24:32,809 --> 00:24:41,419
boost one of the things we added was

00:24:36,789 --> 00:24:45,620
this - double arrow operator in the past

00:24:41,419 --> 00:24:49,190
if you wanted a value like the value for

00:24:45,620 --> 00:24:51,470
my path from a JSON document and you

00:24:49,190 --> 00:24:54,350
wanted without quotes around it you had

00:24:51,470 --> 00:24:57,080
to run JSON unquote JSON extract to get

00:24:54,350 --> 00:24:58,720
it and we had a shorthand for JSON

00:24:57,080 --> 00:25:01,429
extract it was a single arrow operator

00:24:58,720 --> 00:25:02,630
we implemented that and then people

00:25:01,429 --> 00:25:05,659
started complaining well I hate writing

00:25:02,630 --> 00:25:13,580
JSON and code around all that so these

00:25:05,659 --> 00:25:17,929
three lines here are equivalent JSON

00:25:13,580 --> 00:25:19,520
pretty as you get older in your program

00:25:17,929 --> 00:25:21,860
experience and you run into something

00:25:19,520 --> 00:25:28,250
and they put it oh by the way it's human

00:25:21,860 --> 00:25:29,630
readable take take caution sgml xml and

00:25:28,250 --> 00:25:31,549
whole bunch of other stuff we're all

00:25:29,630 --> 00:25:36,350
supposed to be human readable didn't

00:25:31,549 --> 00:25:39,380
quite pull it off JSON is a lot better

00:25:36,350 --> 00:25:41,539
at that unfortunately as things get

00:25:39,380 --> 00:25:44,240
embedded they get nasty to look at and

00:25:41,539 --> 00:25:45,470
on a command line they wrap and at three

00:25:44,240 --> 00:25:48,350
o'clock in the morning at all looks like

00:25:45,470 --> 00:25:50,990
gibberish so we've implemented a JSON

00:25:48,350 --> 00:25:52,950
pretty function here I'm doing JSON

00:25:50,990 --> 00:25:55,470
pretty on a document from

00:25:52,950 --> 00:25:58,380
a table and it actually pretty prints it

00:25:55,470 --> 00:26:00,059
for you may not seem like a big

00:25:58,380 --> 00:26:02,870
revolution but three o'clock in the

00:26:00,059 --> 00:26:06,450
morning when you're looking at it is

00:26:02,870 --> 00:26:09,179
also another interesting function is

00:26:06,450 --> 00:26:13,220
JSON array aggregation this will let you

00:26:09,179 --> 00:26:13,220
take multiple columns or multiple

00:26:13,460 --> 00:26:18,809
multiple records and aggregate them into

00:26:16,019 --> 00:26:20,880
one big record and we also have one for

00:26:18,809 --> 00:26:22,559
objects something that works rather

00:26:20,880 --> 00:26:25,230
nicely is it doesn't just have to be

00:26:22,559 --> 00:26:28,080
JSON information that you can put into

00:26:25,230 --> 00:26:29,970
an object or an aggregation of an object

00:26:28,080 --> 00:26:35,399
as you can see here I'm actually

00:26:29,970 --> 00:26:37,500
grabbing a relational column so if you

00:26:35,399 --> 00:26:40,710
need to have data output as either an

00:26:37,500 --> 00:26:45,480
array JSON formatted array or JSON

00:26:40,710 --> 00:26:48,630
object we have functions for that with

00:26:45,480 --> 00:26:51,179
our JSON storage type you get roughly a

00:26:48,630 --> 00:26:52,500
gigabyte of storage now if you're

00:26:51,179 --> 00:26:54,029
playing with in memory can be a little

00:26:52,500 --> 00:26:56,460
bit bigger than a gigabyte but do the

00:26:54,029 --> 00:26:58,110
MySQL protocol when you write it out

00:26:56,460 --> 00:27:01,230
it's going to have to be a gigabyte so

00:26:58,110 --> 00:27:03,960
for those of you who are up near the

00:27:01,230 --> 00:27:05,250
upper limit you can actually find out

00:27:03,960 --> 00:27:06,389
how much you're actually storing in

00:27:05,250 --> 00:27:12,720
there and how much you're freeing is

00:27:06,389 --> 00:27:15,720
you're changing it JSON table JSON is

00:27:12,720 --> 00:27:17,279
wonderful it's schema-less data there's

00:27:15,720 --> 00:27:18,870
only one trouble you have all the

00:27:17,279 --> 00:27:20,159
schemas data and someone comes in and

00:27:18,870 --> 00:27:22,679
says well I need you to run this report

00:27:20,159 --> 00:27:25,679
like it's the sequel table so there's a

00:27:22,679 --> 00:27:29,909
function called JSON table and what you

00:27:25,679 --> 00:27:32,880
do is you pull out your document and you

00:27:29,909 --> 00:27:34,559
say okay we're gonna have a column we're

00:27:32,880 --> 00:27:38,850
gonna call country name so go out and

00:27:34,559 --> 00:27:43,019
find the name key value pair and format

00:27:38,850 --> 00:27:45,029
it as a car 20 also go out and find the

00:27:43,019 --> 00:27:47,070
independence here and we're gonna call

00:27:45,029 --> 00:27:50,399
it independence here or into year and

00:27:47,070 --> 00:27:52,200
assign as an integer and then from there

00:27:50,399 --> 00:27:54,600
you can do your grouping or your having

00:27:52,200 --> 00:27:59,519
or your where or your other joints that

00:27:54,600 --> 00:28:00,750
you need to do it's kind of funny that

00:27:59,519 --> 00:28:02,490
you have to go from schema less the

00:28:00,750 --> 00:28:04,139
schema and do that all that in a

00:28:02,490 --> 00:28:05,570
relational database but it's a very

00:28:04,139 --> 00:28:07,490
handy function

00:28:05,570 --> 00:28:10,190
also we have ways for if you have

00:28:07,490 --> 00:28:11,840
missing data or default values or you

00:28:10,190 --> 00:28:15,200
can do case like statement information

00:28:11,840 --> 00:28:17,540
in there to get this out it's a very

00:28:15,200 --> 00:28:20,260
complex function by the way when you

00:28:17,540 --> 00:28:22,520
read through the manual page for this

00:28:20,260 --> 00:28:25,460
it's probably the worst one out there

00:28:22,520 --> 00:28:26,840
that we have it's very thorough but it's

00:28:25,460 --> 00:28:28,100
kind of hard to wrap around your idea

00:28:26,840 --> 00:28:30,020
that you're playing with schema less

00:28:28,100 --> 00:28:34,910
data and throwing it into a semi schema

00:28:30,020 --> 00:28:39,350
in a temp table also something that

00:28:34,910 --> 00:28:41,690
we've become rather aware of is that we

00:28:39,350 --> 00:28:45,110
know that as the releases get bigger and

00:28:41,690 --> 00:28:47,030
bigger and more complex it's harder to

00:28:45,110 --> 00:28:50,410
implement them so we started with five

00:28:47,030 --> 00:28:52,790
six and five seven to do plugins

00:28:50,410 --> 00:28:56,660
basically you get on the command line

00:28:52,790 --> 00:28:58,130
and you install shared object name and

00:28:56,660 --> 00:29:01,910
away you go and that plugins there if

00:28:58,130 --> 00:29:03,890
you want to unload it later you can well

00:29:01,910 --> 00:29:07,760
for features like group replication and

00:29:03,890 --> 00:29:09,020
document storage it's easier just to do

00:29:07,760 --> 00:29:11,450
this by plugin than putting in the

00:29:09,020 --> 00:29:12,680
release and also it means we have to

00:29:11,450 --> 00:29:16,190
make sure that our stuff works better

00:29:12,680 --> 00:29:20,510
between releases so if you want to go

00:29:16,190 --> 00:29:22,970
out and play with us today dev - Colette

00:29:20,510 --> 00:29:26,360
comm slash download slash my SQL there

00:29:22,970 --> 00:29:29,750
are docker images out there they worked

00:29:26,360 --> 00:29:31,580
rather nicely if you're looking for more

00:29:29,750 --> 00:29:33,680
detail on a lot of stuff that I'm

00:29:31,580 --> 00:29:35,960
skipped over or didn't mention today

00:29:33,680 --> 00:29:40,850
it's out there at unofficial MySQL guide

00:29:35,960 --> 00:29:45,590
calm and whoo that's a lot of stuff to

00:29:40,850 --> 00:29:49,340
get through now one things I want to

00:29:45,590 --> 00:29:50,990
mention is group replication basically

00:29:49,340 --> 00:29:52,370
if you're doing things right your

00:29:50,990 --> 00:29:55,400
application really shouldn't care what

00:29:52,370 --> 00:29:57,590
database server it's writing to with

00:29:55,400 --> 00:29:59,780
group replication the idea is you write

00:29:57,590 --> 00:30:02,090
to one master out of a pool of masters

00:29:59,780 --> 00:30:03,410
and that pool of masters updates each

00:30:02,090 --> 00:30:08,330
other to make sure everything stays

00:30:03,410 --> 00:30:10,160
current if one of the masters disappears

00:30:08,330 --> 00:30:11,960
or you need to do some sort of upgrade

00:30:10,160 --> 00:30:13,430
or schema change you can take it offline

00:30:11,960 --> 00:30:15,590
when it comes back online the other

00:30:13,430 --> 00:30:16,510
masters are made aware and the changes

00:30:15,590 --> 00:30:20,590
are interchange

00:30:16,510 --> 00:30:23,020
or any updates are given to it this is

00:30:20,590 --> 00:30:25,990
active active master master replication

00:30:23,020 --> 00:30:27,910
we were kind of looking for a way to get

00:30:25,990 --> 00:30:29,800
rid of Galera from the mysql echo system

00:30:27,910 --> 00:30:31,840
nothing against Galera we just don't

00:30:29,800 --> 00:30:33,429
think it's very efficient and this works

00:30:31,840 --> 00:30:36,250
in a layer below so it's gonna be a lot

00:30:33,429 --> 00:30:37,720
faster also you'll be able to take care

00:30:36,250 --> 00:30:38,590
of this with the new MySQL shell I'll

00:30:37,720 --> 00:30:41,530
give you a demo of that

00:30:38,590 --> 00:30:43,390
the idea is you fire up a shell you in

00:30:41,530 --> 00:30:47,309
five lines or able to set up a

00:30:43,390 --> 00:30:50,650
fault-tolerant high availability group

00:30:47,309 --> 00:30:54,809
document story with the json data type

00:30:50,650 --> 00:30:58,420
we gain the ability to go schema-less

00:30:54,809 --> 00:31:00,100
so similar to what does is you

00:30:58,420 --> 00:31:06,120
have a JSON document in a collection

00:31:00,100 --> 00:31:08,650
that you write to here's an example

00:31:06,120 --> 00:31:11,320
rather than do two directional SQL

00:31:08,650 --> 00:31:15,610
string in your code you now something

00:31:11,320 --> 00:31:18,360
looks more like modern PHP good benefits

00:31:15,610 --> 00:31:20,290
here is that if you write horrible SQL

00:31:18,360 --> 00:31:22,240
you don't have to embed that in your

00:31:20,290 --> 00:31:24,090
code it's a lot easier for a lot of

00:31:22,240 --> 00:31:27,000
junior programmers to pick up this style

00:31:24,090 --> 00:31:31,510
here we're going out from a collection

00:31:27,000 --> 00:31:33,550
that's called from the world database

00:31:31,510 --> 00:31:36,370
the country info collection we're saying

00:31:33,550 --> 00:31:40,210
OK for the record that has the ID equals

00:31:36,370 --> 00:31:41,280
us a find the fields name we're gonna

00:31:40,210 --> 00:31:44,050
printed out his country

00:31:41,280 --> 00:31:46,240
geography is geo and the region and

00:31:44,050 --> 00:31:49,480
execute that query and give me the

00:31:46,240 --> 00:31:51,910
output now for those who don't like it

00:31:49,480 --> 00:31:53,350
running SQL this is another option for

00:31:51,910 --> 00:31:56,020
you for those who you like writing SQL

00:31:53,350 --> 00:32:00,100
can do things the old way we're hoping

00:31:56,020 --> 00:32:02,700
this wake caches popular catches on this

00:32:00,100 --> 00:32:06,130
is currently a petal extension for PHP

00:32:02,700 --> 00:32:09,570
we have connectors for Java Python

00:32:06,130 --> 00:32:15,520
JavaScript nodejs

00:32:09,570 --> 00:32:19,179
whole bunch of other languages and whew

00:32:15,520 --> 00:32:20,640
thank you please give me feedback I had

00:32:19,179 --> 00:32:23,980
some feedback last week when I gave a

00:32:20,640 --> 00:32:28,300
variation of this talk at sunshine now

00:32:23,980 --> 00:32:30,600
if I can indulge you for indulge me for

00:32:28,300 --> 00:32:30,600
a minute

00:32:30,610 --> 00:32:36,890
don't need to show that again we're also

00:32:34,640 --> 00:32:39,860
as we redo things as I mentioned the old

00:32:36,890 --> 00:32:42,220
MySQL protocol had a one gigabyte limit

00:32:39,860 --> 00:32:44,240
for the jace under this there's type

00:32:42,220 --> 00:32:45,860
we're redoing things we're coming up

00:32:44,240 --> 00:32:48,530
with a new API that we're calling the X

00:32:45,860 --> 00:32:52,220
dev API we're coming with a new protocol

00:32:48,530 --> 00:32:54,050
and with this new protocol we're able to

00:32:52,220 --> 00:32:58,520
do a shell for the shell you're gonna be

00:32:54,050 --> 00:33:00,590
able to do queries and whole bunch of

00:32:58,520 --> 00:33:03,430
other stuff you also be able to admin

00:33:00,590 --> 00:33:03,430
servers from this

00:33:14,920 --> 00:33:27,300
in some ways it looks like the old shell

00:33:16,320 --> 00:33:27,300
oops it might be

00:33:32,330 --> 00:33:39,289
okay somehow my password has changed

00:33:36,830 --> 00:33:40,789
overnight well then I say sorry about

00:33:39,289 --> 00:33:44,840
that one of the nice things about this

00:33:40,789 --> 00:33:49,070
it has command completion so you can do

00:33:44,840 --> 00:33:51,710
select from select star from and type in

00:33:49,070 --> 00:33:55,039
the first couple characters of an either

00:33:51,710 --> 00:33:57,200
cable name or a function and it will

00:33:55,039 --> 00:34:14,240
complete it for you so it makes life a

00:33:57,200 --> 00:34:15,589
little bit easier by the way my dog

00:34:14,240 --> 00:34:22,369
hates this picture she doesn't think she

00:34:15,589 --> 00:34:24,139
looks good in glasses so slides are out

00:34:22,369 --> 00:34:26,470
there at slideshare.net slash David M

00:34:24,139 --> 00:34:26,470

YouTube URL: https://www.youtube.com/watch?v=LMF2ESRxp7w


