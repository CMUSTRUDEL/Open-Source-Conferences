Title: The La(te)st PHP 7 â€” What's new in PHP 7.4 - Derrick Rethans - PHP UK 2020
Publication date: 2020-03-11
Playlist: PHP UK Conference 2020
Description: 
	We are going to look at the new features in PHP 7.4. Join me to have a look at how the type system is strengthened with typed properties and co- and contra-variance of methods, what changes to operator precedence are, and which new features, such as pre-loading classes, have been added.
Captions: 
	00:00:02,310 --> 00:00:08,370
hi i'm derek i I'm European I live here

00:00:06,060 --> 00:00:10,620
in London I am PHP sevenforce release

00:00:08,370 --> 00:00:12,389
manager which pretty much means that

00:00:10,620 --> 00:00:14,639
every month or so I have to make

00:00:12,389 --> 00:00:16,049
packages make sure that the security

00:00:14,639 --> 00:00:17,279
patches get merged and then release

00:00:16,049 --> 00:00:19,500
things by announcing those in the

00:00:17,279 --> 00:00:22,800
mailing list today is the release date

00:00:19,500 --> 00:00:26,310
of BG 743 so of this presentation I'm

00:00:22,800 --> 00:00:27,840
going to have to release that and I also

00:00:26,310 --> 00:00:30,269
work on next debug you might have heard

00:00:27,840 --> 00:00:33,629
of that if not please google it and if

00:00:30,269 --> 00:00:35,600
questions feel free to ask me if there's

00:00:33,629 --> 00:00:38,820
anything during the presentation I

00:00:35,600 --> 00:00:40,649
usually invite you to ask the questions

00:00:38,820 --> 00:00:43,230
by raising your hand but I won't be able

00:00:40,649 --> 00:00:44,550
to see the hands so do the questions at

00:00:43,230 --> 00:00:45,960
the end of the presentation I think that

00:00:44,550 --> 00:00:47,250
work would work better and maybe

00:00:45,960 --> 00:00:48,750
somebody can run around with the mic I

00:00:47,250 --> 00:00:52,079
don't know whether that works or not

00:00:48,750 --> 00:00:53,520
I like naps I like we are like whisky

00:00:52,079 --> 00:00:55,739
some of these things will come back in

00:00:53,520 --> 00:00:58,469
examples and if there's any further

00:00:55,739 --> 00:00:59,960
comments feel free to ping me on Twitter

00:00:58,469 --> 00:01:03,930
it's also in the both of my slides

00:00:59,960 --> 00:01:05,700
mm-hmm quite see that that's ok all

00:01:03,930 --> 00:01:10,470
right so what is the biggest thing in

00:01:05,700 --> 00:01:12,540
PHP 7 for it is type properties now you

00:01:10,470 --> 00:01:15,420
know how I said that I like whiskey so

00:01:12,540 --> 00:01:16,650
my example Mike I also like using emojis

00:01:15,420 --> 00:01:18,360
in my class names

00:01:16,650 --> 00:01:20,430
I wouldn't recommend you do that in

00:01:18,360 --> 00:01:23,280
production code but at least put some

00:01:20,430 --> 00:01:25,770
color to the slide Sam so property she

00:01:23,280 --> 00:01:27,689
can already have in PHP 7 or PHP 5 or

00:01:25,770 --> 00:01:29,939
even peach before but what you can out

00:01:27,689 --> 00:01:35,549
in 74 is you can also add a type to it

00:01:29,939 --> 00:01:37,170
which is new and pretty cool so in this

00:01:35,549 --> 00:01:39,890
case we have the word public private or

00:01:37,170 --> 00:01:42,479
protected and then you have a type name

00:01:39,890 --> 00:01:45,270
in this case in for integer it's a

00:01:42,479 --> 00:01:47,159
number you can use class names you can

00:01:45,270 --> 00:01:49,880
use fully qualified class name is the

00:01:47,159 --> 00:01:52,950
namespace in front of it as well as

00:01:49,880 --> 00:01:56,850
nullable version source also the buffler

00:01:52,950 --> 00:02:02,670
can either be a class so an object of

00:01:56,850 --> 00:02:04,890
the bottler class or it can be known you

00:02:02,670 --> 00:02:07,439
can also make them own static properties

00:02:04,890 --> 00:02:11,009
again the type name comes after the

00:02:07,439 --> 00:02:12,599
public and static keywords you can't of

00:02:11,009 --> 00:02:15,140
course have a type called static because

00:02:12,599 --> 00:02:15,140
that gets confusing

00:02:15,300 --> 00:02:20,130
you can use default values for them so

00:02:17,550 --> 00:02:21,900
in this case the inte rating is 92 that

00:02:20,130 --> 00:02:24,600
sounds like a pretty good whisky to me

00:02:21,900 --> 00:02:27,090
if it's at 100 and then you have things

00:02:24,600 --> 00:02:29,880
like nullable strings and then the last

00:02:27,090 --> 00:02:31,950
bit is that it is also possible to have

00:02:29,880 --> 00:02:34,770
multiple properties in Monda in one row

00:02:31,950 --> 00:02:36,390
but I think that most kerning standards

00:02:34,770 --> 00:02:39,060
prohibit at and I would probably not

00:02:36,390 --> 00:02:41,970
recommend she do that but it is possible

00:02:39,060 --> 00:02:43,620
possible that the keyword public would

00:02:41,970 --> 00:02:45,230
count for both of those property names

00:02:43,620 --> 00:02:48,300
that you've defined and so will the type

00:02:45,230 --> 00:02:52,140
so this has public pool chill filter

00:02:48,300 --> 00:02:54,810
them public pool coloring added but now

00:02:52,140 --> 00:02:56,730
how does this actually work now if we

00:02:54,810 --> 00:03:00,180
have the following bit of code again

00:02:56,730 --> 00:03:02,700
don't use emojis in your real code but

00:03:00,180 --> 00:03:04,890
which it gets the output of this moss do

00:03:02,700 --> 00:03:09,990
you think this output any wants to shout

00:03:04,890 --> 00:03:11,250
out an error yep I heard an initialized

00:03:09,990 --> 00:03:14,370
property some of you have been using

00:03:11,250 --> 00:03:17,640
peach b7 for or reading documentation

00:03:14,370 --> 00:03:20,850
that's mean bit yes it will give you an

00:03:17,640 --> 00:03:24,120
error message because this property H

00:03:20,850 --> 00:03:26,070
hasn't been initialized yet and if it's

00:03:24,120 --> 00:03:27,480
not been initialized yet you don't know

00:03:26,070 --> 00:03:29,640
which type it is so PHP doesn't know

00:03:27,480 --> 00:03:33,209
what type it is which means that anytime

00:03:29,640 --> 00:03:35,700
you access an initialized property that

00:03:33,209 --> 00:03:38,070
hasn't been set to any value default

00:03:35,700 --> 00:03:41,690
value is a set value then you'll get a

00:03:38,070 --> 00:03:44,340
error turrible

00:03:41,690 --> 00:03:48,540
so the initialized state is checked when

00:03:44,340 --> 00:03:49,260
reading properties okay next one this

00:03:48,540 --> 00:03:52,050
bit of code again

00:03:49,260 --> 00:03:54,420
the distillery property has been defined

00:03:52,050 --> 00:03:57,660
as a type distillery as a class i set it

00:03:54,420 --> 00:03:59,040
as a string what do we get as output you

00:03:57,660 --> 00:04:01,800
get an error right because that's what

00:03:59,040 --> 00:04:04,200
you expect says it must be an instance

00:04:01,800 --> 00:04:06,600
of the salary but we use a string so

00:04:04,200 --> 00:04:11,310
type validation is used when writing to

00:04:06,600 --> 00:04:12,720
properties okay so what's the output is

00:04:11,310 --> 00:04:14,519
this one in this case I'm not setting

00:04:12,720 --> 00:04:18,450
the salary but I was setting the int the

00:04:14,519 --> 00:04:25,950
H to the string 29 anybody wants to

00:04:18,450 --> 00:04:28,230
guess what this does come here anything

00:04:25,950 --> 00:04:31,050
but this works this works fine because

00:04:28,230 --> 00:04:33,480
type creation is still being used the

00:04:31,050 --> 00:04:35,610
script isn't doing tricks typing because

00:04:33,480 --> 00:04:37,200
we didn't define it for the script so

00:04:35,610 --> 00:04:39,390
type coercion still works it gets

00:04:37,200 --> 00:04:41,310
automatically converted to names that

00:04:39,390 --> 00:04:46,680
you just like it would do for a argument

00:04:41,310 --> 00:04:49,560
for a method or function argument so

00:04:46,680 --> 00:04:50,730
when you define strip strict types then

00:04:49,560 --> 00:04:53,640
of course you'll get the error saying

00:04:50,730 --> 00:04:57,300
that it's the wrong property type that

00:04:53,640 --> 00:04:59,430
makes sense on top of the introduction

00:04:57,300 --> 00:05:02,010
of type property a few other things have

00:04:59,430 --> 00:05:06,000
also been changed or actually added

00:05:02,010 --> 00:05:09,270
stoop each piece type system before PHP

00:05:06,000 --> 00:05:12,510
74 if you would inherit a method you'd

00:05:09,270 --> 00:05:14,220
have an overloaded methods then all the

00:05:12,510 --> 00:05:18,060
method arguments as well as all the

00:05:14,220 --> 00:05:21,000
return types had to be the same type PHP

00:05:18,060 --> 00:05:23,790
7/4 relaxes this so that it follows the

00:05:21,000 --> 00:05:26,240
Liskov substitution principle big works

00:05:23,790 --> 00:05:31,070
I hope to explain it a little bit him

00:05:26,240 --> 00:05:33,600
but it would allow you to widen types or

00:05:31,070 --> 00:05:36,150
narrow types depending on whether you

00:05:33,600 --> 00:05:38,130
have an overloaded either argument or

00:05:36,150 --> 00:05:41,460
return type so let's have a look at the

00:05:38,130 --> 00:05:45,150
return types first if you have a bakery

00:05:41,460 --> 00:05:46,380
bakery mains makes brats that is a quite

00:05:45,150 --> 00:05:48,180
a wide range of things because it

00:05:46,380 --> 00:05:51,180
includes muffins and whatever things

00:05:48,180 --> 00:05:53,970
right bratty things a patisserie is a

00:05:51,180 --> 00:05:55,410
more specific type of bakery and it

00:05:53,970 --> 00:05:57,450
would only make baguettes I mean that's

00:05:55,410 --> 00:06:00,180
silly examples but hopefully you got it

00:05:57,450 --> 00:06:02,460
just out of this which means that in

00:06:00,180 --> 00:06:04,020
this case a return types are covariant

00:06:02,460 --> 00:06:05,790
meaning that they can return a more

00:06:04,020 --> 00:06:08,010
specific type because that means that

00:06:05,790 --> 00:06:10,140
anytime you'd use this overload as class

00:06:08,010 --> 00:06:13,080
in any context where you originally

00:06:10,140 --> 00:06:15,210
would accept a bakery that's still fine

00:06:13,080 --> 00:06:17,340
right because the return can never

00:06:15,210 --> 00:06:20,690
return more than the original class or

00:06:17,340 --> 00:06:23,280
original method might have expected so

00:06:20,690 --> 00:06:25,410
restricting what you return in a return

00:06:23,280 --> 00:06:28,590
type is fine or leaving it the same as

00:06:25,410 --> 00:06:33,510
it is that's called covariant return

00:06:28,590 --> 00:06:34,800
times and in this case you get a fatal

00:06:33,510 --> 00:06:35,220
error because we're doing all the way

00:06:34,800 --> 00:06:37,320
around

00:06:35,220 --> 00:06:39,780
we start with a more specific type and

00:06:37,320 --> 00:06:41,490
then widen it in an overloaded matter

00:06:39,780 --> 00:06:43,080
and you can't do that because originally

00:06:41,490 --> 00:06:45,960
classes that would have made use of the

00:06:43,080 --> 00:06:49,350
original class wooden nestled in stands

00:06:45,960 --> 00:06:50,669
how to do anything beyond using a

00:06:49,350 --> 00:06:54,180
baguettes they don't know how to handle

00:06:50,669 --> 00:06:56,160
all the other brats for example so they

00:06:54,180 --> 00:06:57,919
cannot return a more broader type but

00:06:56,160 --> 00:07:01,320
they can return the same time

00:06:57,919 --> 00:07:03,600
now the argument types are exactly the

00:07:01,320 --> 00:07:07,320
other way around so in this case we have

00:07:03,600 --> 00:07:09,450
the class Astrix need to cut the example

00:07:07,320 --> 00:07:12,180
from somewhere right and Asterix home

00:07:09,450 --> 00:07:15,270
spores which is quite a specific type of

00:07:12,180 --> 00:07:17,880
animal now any class that is that has an

00:07:15,270 --> 00:07:22,680
extended method is fine to accept a

00:07:17,880 --> 00:07:25,440
wider range of animals because classes

00:07:22,680 --> 00:07:28,710
this method could then decide on its own

00:07:25,440 --> 00:07:32,130
to handle the wider class of animals and

00:07:28,710 --> 00:07:36,600
then also handle the bore case for

00:07:32,130 --> 00:07:39,300
example so methods arguments can accept

00:07:36,600 --> 00:07:41,520
a wider or a broader type range or the

00:07:39,300 --> 00:07:43,500
same but you can't do it the other way

00:07:41,520 --> 00:07:46,040
around because that would mean that in a

00:07:43,500 --> 00:07:48,750
context where you would usually use

00:07:46,040 --> 00:07:51,060
Astrix as a class you wouldn't be able

00:07:48,750 --> 00:07:55,020
to use goals because you would only be

00:07:51,060 --> 00:07:58,200
able to handle a narrower type in this

00:07:55,020 --> 00:08:00,030
case a bore means it's a bit of a tricky

00:07:58,200 --> 00:08:01,620
concept but it does make sense if you

00:08:00,030 --> 00:08:03,450
look at it you basically need to say if

00:08:01,620 --> 00:08:06,030
I have an overloaded class and methods

00:08:03,450 --> 00:08:08,720
can I use it in the same context that I

00:08:06,030 --> 00:08:12,390
could use the original class a method

00:08:08,720 --> 00:08:14,010
now there's one addition to this which

00:08:12,390 --> 00:08:16,760
ties in back to the properties the

00:08:14,010 --> 00:08:21,890
property types so property type in PHP

00:08:16,760 --> 00:08:23,760
can only have the same type in this case

00:08:21,890 --> 00:08:26,479
they are the same type they're both

00:08:23,760 --> 00:08:29,039
planets so that's fine because

00:08:26,479 --> 00:08:31,800
properties about something you can read

00:08:29,039 --> 00:08:33,839
to sorry write to and read from and

00:08:31,800 --> 00:08:36,270
because of both these constrictions

00:08:33,839 --> 00:08:38,250
you'd in order to be able to use a

00:08:36,270 --> 00:08:41,039
property in an overloaded class they

00:08:38,250 --> 00:08:44,460
have to be the same type so these call

00:08:41,039 --> 00:08:48,230
these invariant property types and if

00:08:44,460 --> 00:08:52,140
you do this wrong make an error message

00:08:48,230 --> 00:08:53,430
kind of a complex subject PHP 8 is going

00:08:52,140 --> 00:08:57,810
to make this more complicated

00:08:53,430 --> 00:08:58,890
by also having union types and I need to

00:08:57,810 --> 00:09:03,089
figure out to come up with better

00:08:58,890 --> 00:09:04,890
examples in that case okay that's a

00:09:03,089 --> 00:09:06,270
whole bunch of smaller things in PHP

00:09:04,890 --> 00:09:08,250
seven four I will go through there's a

00:09:06,270 --> 00:09:10,350
bit quicker and then we go back to

00:09:08,250 --> 00:09:14,390
slightly more interesting things so it's

00:09:10,350 --> 00:09:17,100
a bit of a big big mix of things in here

00:09:14,390 --> 00:09:19,380
PT all we had as an assignment operator

00:09:17,100 --> 00:09:22,709
is the equal sign or the percent equals

00:09:19,380 --> 00:09:25,320
not percent sorry Astrix equal sign

00:09:22,709 --> 00:09:28,430
basically changed the value in angle

00:09:25,320 --> 00:09:30,779
right by doing the multiplication we

00:09:28,430 --> 00:09:34,490
have something like the new coalesce

00:09:30,779 --> 00:09:39,180
operators means that if this first if

00:09:34,490 --> 00:09:41,700
the bit behind the equal sign is no then

00:09:39,180 --> 00:09:45,180
we use the value the string value behind

00:09:41,700 --> 00:09:47,310
but you still had to duplicate the whole

00:09:45,180 --> 00:09:49,680
property that you're going to set to as

00:09:47,310 --> 00:09:52,709
well as so long as you comparing with to

00:09:49,680 --> 00:09:54,959
be able to use this failure or default

00:09:52,709 --> 00:09:56,940
value in PHP 74 you can now do this in

00:09:54,959 --> 00:09:59,010
one go by using the question mark

00:09:56,940 --> 00:10:03,779
question mark equals operate or the nil

00:09:59,010 --> 00:10:04,980
coalesce assignment operator can be kind

00:10:03,779 --> 00:10:06,150
of handy in this kind of situations

00:10:04,980 --> 00:10:09,930
where you need default values for

00:10:06,150 --> 00:10:12,390
example the sprat operator is something

00:10:09,930 --> 00:10:14,760
that has been added to also be able to

00:10:12,390 --> 00:10:17,010
use this in a literal in an array

00:10:14,760 --> 00:10:19,110
literal the dot dot dot or splat

00:10:17,010 --> 00:10:21,300
operator or subtract operator everyone

00:10:19,110 --> 00:10:24,959
to college you could already use to

00:10:21,300 --> 00:10:27,690
accept an array of arguments sorry

00:10:24,959 --> 00:10:30,870
extra arguments to method that then will

00:10:27,690 --> 00:10:33,180
be put in an array that is would have

00:10:30,870 --> 00:10:35,010
been in this case apples as an array and

00:10:33,180 --> 00:10:37,500
these things you could already do seven

00:10:35,010 --> 00:10:40,050
for extensions to be able to in line

00:10:37,500 --> 00:10:42,150
array literals in a northern in another

00:10:40,050 --> 00:10:43,620
array literal so in this case we have an

00:10:42,150 --> 00:10:45,750
array called apples we have a red apple

00:10:43,620 --> 00:10:47,760
and a green apple and then we have an

00:10:45,750 --> 00:10:50,040
array fruits where we have a pair a

00:10:47,760 --> 00:10:52,770
peach then we and that all the other

00:10:50,040 --> 00:10:55,500
elements from apples in them and we

00:10:52,770 --> 00:10:57,029
don't having apples as a static array

00:10:55,500 --> 00:10:59,310
here you could also use an iterator for

00:10:57,029 --> 00:11:01,920
that for example and then at the end we

00:10:59,310 --> 00:11:03,810
add a strawberry and a tomato and then

00:11:01,920 --> 00:11:05,400
when you call implode on them you'll see

00:11:03,810 --> 00:11:07,080
that we get our lovely fruit salad now

00:11:05,400 --> 00:11:12,270
people complain about that too

00:11:07,080 --> 00:11:14,460
I am willing on fruit salad but I got it

00:11:12,270 --> 00:11:17,160
as criticism at previous versions of the

00:11:14,460 --> 00:11:19,860
song but I'm going to leave it in all

00:11:17,160 --> 00:11:23,580
rights there's a whole bunch of code

00:11:19,860 --> 00:11:26,040
that you could write in PHP that it's

00:11:23,580 --> 00:11:29,400
really silly and of course everybody

00:11:26,040 --> 00:11:30,960
makes any mistakes but in PHP 7 3 and

00:11:29,400 --> 00:11:35,370
earlier you'd never get a warning on

00:11:30,960 --> 00:11:39,420
this it just returned no HP 74 it turns

00:11:35,370 --> 00:11:41,910
in into a lot of warnings so the first

00:11:39,420 --> 00:11:44,280
one we have far we set it to false it

00:11:41,910 --> 00:11:46,440
gives you now five warnings or notices

00:11:44,280 --> 00:11:49,160
in this first one it says try to access

00:11:46,440 --> 00:11:53,270
an array offset or value of type bool

00:11:49,160 --> 00:11:56,970
that gives you warning and then the

00:11:53,270 --> 00:11:59,040
square bracket two will give you offset

00:11:56,970 --> 00:12:01,110
on type know the three two four and five

00:11:59,040 --> 00:12:02,610
are alternate which is kind of handy

00:12:01,110 --> 00:12:04,770
basically show you that you're doing

00:12:02,610 --> 00:12:07,380
something wrong rather otherwise you

00:12:04,770 --> 00:12:09,240
just got no and it's kind of hard to

00:12:07,380 --> 00:12:11,550
find because it could either be the one

00:12:09,240 --> 00:12:12,720
two three four five array index that

00:12:11,550 --> 00:12:15,900
would have been different and you

00:12:12,720 --> 00:12:18,060
wouldn't necessarily know what it will

00:12:15,900 --> 00:12:20,190
also do this array offsets all numbers

00:12:18,060 --> 00:12:22,590
like I have in the second example for

00:12:20,190 --> 00:12:24,120
array is one two three four zero is of

00:12:22,590 --> 00:12:26,280
course the new mobile to tree but you

00:12:24,120 --> 00:12:27,570
can take the one offset out of a number

00:12:26,280 --> 00:12:29,970
so you can an error for that

00:12:27,570 --> 00:12:31,800
and similarly you'll get the same kind

00:12:29,970 --> 00:12:36,300
of warnings if you do this on a race

00:12:31,800 --> 00:12:38,040
with no in the last example something a

00:12:36,300 --> 00:12:40,110
bit bigger in PHP seven four is

00:12:38,040 --> 00:12:44,670
something called FFI foreign function

00:12:40,110 --> 00:12:47,460
interface is this big disclaimer is

00:12:44,670 --> 00:12:51,210
absolutely necessary FF is a really good

00:12:47,460 --> 00:12:54,090
way of talking to see libraries directly

00:12:51,210 --> 00:12:56,820
from PHP there used to be an extension

00:12:54,090 --> 00:12:59,520
in PHP in pakil a long time ago for PHP

00:12:56,820 --> 00:13:01,950
five is called X F of I we also name

00:12:59,520 --> 00:13:05,310
that X dangerous because of the fastest

00:13:01,950 --> 00:13:08,040
way of making PHP crash not because

00:13:05,310 --> 00:13:09,660
it'll wrongly implement it but because

00:13:08,040 --> 00:13:11,340
it's really hard to do because in order

00:13:09,660 --> 00:13:13,500
to make use of this foreign function

00:13:11,340 --> 00:13:15,660
interface you need to know how you

00:13:13,500 --> 00:13:17,280
interact with C code and how pointers

00:13:15,660 --> 00:13:17,870
work and memory management works and

00:13:17,280 --> 00:13:20,280
things like that

00:13:17,870 --> 00:13:20,940
normally PHP developers are not massive

00:13:20,280 --> 00:13:24,200
elf

00:13:20,940 --> 00:13:28,110
familiar with that so this is kind of a

00:13:24,200 --> 00:13:28,590
harder way of doing this or let me

00:13:28,110 --> 00:13:30,660
rephrase that

00:13:28,590 --> 00:13:33,840
it is an easy way of doing things with C

00:13:30,660 --> 00:13:35,850
libraries but it is the harder way of

00:13:33,840 --> 00:13:39,810
debugging this kind of thing because you

00:13:35,850 --> 00:13:42,120
have to do it but C and PHP so this is

00:13:39,810 --> 00:13:43,560
bundled with PHP 74 but it isn't enabled

00:13:42,120 --> 00:13:46,290
by default because it can be kind of

00:13:43,560 --> 00:13:49,260
dangerous also considers experimental

00:13:46,290 --> 00:13:52,770
and there's no documentation or a very

00:13:49,260 --> 00:13:54,750
little documentation in my opinion this

00:13:52,770 --> 00:13:55,950
should not have been part of PHP 7 for I

00:13:54,750 --> 00:13:57,540
think it should have been an epochal

00:13:55,950 --> 00:14:02,700
extension for though and then introduce

00:13:57,540 --> 00:14:05,720
in PHP 8-bit Sam notes always my opinion

00:14:02,700 --> 00:14:09,120
counts or counts but let's agree with me

00:14:05,720 --> 00:14:10,500
so now how do I use this now I'm not

00:14:09,120 --> 00:14:12,260
sure how many of you have seen that C

00:14:10,500 --> 00:14:15,300
code so I'll start at a very simple

00:14:12,260 --> 00:14:17,730
function which I have in a library that

00:14:15,300 --> 00:14:21,240
I've written for doing calculating the

00:14:17,730 --> 00:14:23,280
position of the Sun in the sky basically

00:14:21,240 --> 00:14:27,750
what the arguments mean is like the

00:14:23,280 --> 00:14:30,570
double the D is a time or a point in

00:14:27,750 --> 00:14:31,590
time it is not UNIX timestamps but it

00:14:30,570 --> 00:14:35,910
doesn't particularly matter whether this

00:14:31,590 --> 00:14:36,990
you get to a UNIX phone no this doesn't

00:14:35,910 --> 00:14:39,570
work on the screen I always keep

00:14:36,990 --> 00:14:41,040
forgetting it you go from the UNIX

00:14:39,570 --> 00:14:42,930
timestamp to the number that it needs by

00:14:41,040 --> 00:14:47,280
this calculation I can't actually

00:14:42,930 --> 00:14:52,380
remember all of this but we're in PHP

00:14:47,280 --> 00:14:54,180
you can really return only one one

00:14:52,380 --> 00:14:56,190
return value from a function that's the

00:14:54,180 --> 00:14:59,520
same for C then in this case this

00:14:56,190 --> 00:15:01,890
function needs to return six values and

00:14:59,520 --> 00:15:04,610
in C it's a common way to do that as an

00:15:01,890 --> 00:15:08,850
API by using by passing in the pointer

00:15:04,610 --> 00:15:11,339
to where you want to store the value in

00:15:08,850 --> 00:15:12,510
and in order to from Sealand to do that

00:15:11,339 --> 00:15:15,780
you need to make sure that you have

00:15:12,510 --> 00:15:17,190
created space for this pointer that the

00:15:15,780 --> 00:15:19,560
Sun post function is going to write

00:15:17,190 --> 00:15:20,850
enter HV doesn't really have that

00:15:19,560 --> 00:15:23,790
concept so it makes a bit harder to

00:15:20,850 --> 00:15:25,380
explain okay so what the function does

00:15:23,790 --> 00:15:26,700
is you gave it one number and it returns

00:15:25,380 --> 00:15:29,460
six numbers back which tells you where

00:15:26,700 --> 00:15:32,520
the Sun should be in the sky now how do

00:15:29,460 --> 00:15:34,620
you use that from PHP lens you use

00:15:32,520 --> 00:15:37,530
either file loads you

00:15:34,620 --> 00:15:39,630
they had a phone and in see that's a

00:15:37,530 --> 00:15:41,970
common way to have had a falls define an

00:15:39,630 --> 00:15:44,670
h-file so they chose whatever I

00:15:41,970 --> 00:15:47,220
implement so that leaves very basic part

00:15:44,670 --> 00:15:49,980
of H file that only will innocence

00:15:47,220 --> 00:15:51,840
function definitions as well as type

00:15:49,980 --> 00:15:53,250
definitions and round Roo preprocessor

00:15:51,840 --> 00:15:56,490
macros and stuff like that so it's a

00:15:53,250 --> 00:16:01,740
very stripped down parser of pedophiles

00:15:56,490 --> 00:16:04,350
and see so this F this variable F of I

00:16:01,740 --> 00:16:06,690
now holds this well it's basically an

00:16:04,350 --> 00:16:08,040
object that does marshalling for the

00:16:06,690 --> 00:16:11,280
function that are defined in the setup

00:16:08,040 --> 00:16:13,230
on this case samples now because we use

00:16:11,280 --> 00:16:15,690
this pointer thing we need to create

00:16:13,230 --> 00:16:18,660
places in memory words to store these

00:16:15,690 --> 00:16:21,090
values in and in order because this is

00:16:18,660 --> 00:16:23,400
done with a C type it's the CC type

00:16:21,090 --> 00:16:27,210
although this is the same in PHP you

00:16:23,400 --> 00:16:29,220
need to create these five arguments here

00:16:27,210 --> 00:16:32,460
you need to allocate an active object

00:16:29,220 --> 00:16:35,460
that has the exact same type as what had

00:16:32,460 --> 00:16:37,350
a definition says in the menu called

00:16:35,460 --> 00:16:40,380
some post function you give him this

00:16:37,350 --> 00:16:44,670
date here I'll have to use this math you

00:16:40,380 --> 00:16:46,650
put his date in here and then you get by

00:16:44,670 --> 00:16:49,040
passing in the address of the containers

00:16:46,650 --> 00:16:51,720
that you make because that is what the

00:16:49,040 --> 00:16:53,580
Asterix does in front of the m return

00:16:51,720 --> 00:16:56,520
types in the head of phone you can then

00:16:53,580 --> 00:17:00,330
the result of the spec now this is a

00:16:56,520 --> 00:17:01,380
trivial example but it took me quite

00:17:00,330 --> 00:17:03,750
some time to come up with this because

00:17:01,380 --> 00:17:05,370
as I said there's no documentation so

00:17:03,750 --> 00:17:07,140
you need to come up with well how do I

00:17:05,370 --> 00:17:09,480
create memory structures well you did by

00:17:07,140 --> 00:17:12,630
a defining how do I pass a name that FFF

00:17:09,480 --> 00:17:16,680
address in the end I think this could be

00:17:12,630 --> 00:17:18,090
quite useful for writing PHP extensions

00:17:16,680 --> 00:17:22,080
that you now will have to write C code

00:17:18,090 --> 00:17:24,090
for write them in fi which is basically

00:17:22,080 --> 00:17:26,820
right in mm PHP but it does mean that

00:17:24,090 --> 00:17:29,130
you could compose or install these PHP

00:17:26,820 --> 00:17:30,960
extensions without having to recompile

00:17:29,130 --> 00:17:33,090
anything so I think this is quite

00:17:30,960 --> 00:17:35,520
powerful but I think it is more

00:17:33,090 --> 00:17:38,490
something to be used for people that

00:17:35,520 --> 00:17:40,590
already know C and wants to make all the

00:17:38,490 --> 00:17:43,380
libraries available through compose

00:17:40,590 --> 00:17:44,970
without you as a user having to compile

00:17:43,380 --> 00:17:47,160
any new extension so that I think that's

00:17:44,970 --> 00:17:50,240
where the features are all right I can

00:17:47,160 --> 00:17:50,240
see so I can answer you

00:17:55,489 --> 00:18:00,419
alright ok so the question is does this

00:17:58,710 --> 00:18:01,649
create an object it doesn't really

00:18:00,419 --> 00:18:04,950
create an object at all

00:18:01,649 --> 00:18:07,710
the fo5 variable is basically just some

00:18:04,950 --> 00:18:11,309
magic that makes this work so there's no

00:18:07,710 --> 00:18:15,619
actual object and there's no compilation

00:18:11,309 --> 00:18:18,239
happening whatsoever no no all right

00:18:15,619 --> 00:18:19,499
the next big thing is pre-loading well

00:18:18,239 --> 00:18:21,799
or so we thought

00:18:19,499 --> 00:18:24,629
I'll give you the cave yets in a moment

00:18:21,799 --> 00:18:26,299
op caches and awesome tools to make sure

00:18:24,629 --> 00:18:28,619
that PHP doesn't spend lots of time

00:18:26,299 --> 00:18:32,129
recompiling or parsing your scripts

00:18:28,619 --> 00:18:32,700
every time it sees a new file it is

00:18:32,129 --> 00:18:35,789
awesome

00:18:32,700 --> 00:18:38,519
but everything in PHP is currently based

00:18:35,789 --> 00:18:40,859
per file which means if you have a fault

00:18:38,519 --> 00:18:43,980
defining a class that extends another

00:18:40,859 --> 00:18:45,899
class and that class that file hasn't

00:18:43,980 --> 00:18:47,940
been loaded PHP uses Auto loading

00:18:45,899 --> 00:18:52,049
mechanisms right and that still works

00:18:47,940 --> 00:18:54,539
fine with up cache but for every time it

00:18:52,049 --> 00:18:56,639
ceases fall in every new request it

00:18:54,539 --> 00:18:57,600
would still have to check whether the

00:18:56,639 --> 00:18:59,789
inheritance works

00:18:57,600 --> 00:19:01,470
where are the function arguments match

00:18:59,789 --> 00:19:03,389
and it will have some do more work and

00:19:01,470 --> 00:19:06,899
then a p37 for because of the type

00:19:03,389 --> 00:19:09,929
properties it has to do quite a bit of

00:19:06,899 --> 00:19:14,009
work still now wouldn't that be great it

00:19:09,929 --> 00:19:16,499
wasn't a way of PHP doing this performs

00:19:14,009 --> 00:19:18,869
before it even starts running your

00:19:16,499 --> 00:19:22,379
script and that is what pre learning is

00:19:18,869 --> 00:19:23,999
about to solve some PHP 74 has his new

00:19:22,379 --> 00:19:27,090
any directive called up cached or

00:19:23,999 --> 00:19:29,730
preload of which you can specify a PHP

00:19:27,090 --> 00:19:34,320
file which will be run before peach

00:19:29,730 --> 00:19:38,629
peace request cycle starts and where you

00:19:34,320 --> 00:19:42,210
can preload code now as a small example

00:19:38,629 --> 00:19:44,909
on the command line you turn it on by up

00:19:42,210 --> 00:19:48,840
cache enable 1 which you need to have op

00:19:44,909 --> 00:19:51,720
cache enable C light album because up

00:19:48,840 --> 00:19:54,600
cache usually only works in a web server

00:19:51,720 --> 00:19:58,830
environment and then the extra argument

00:19:54,600 --> 00:20:00,749
is up cache preload equals of falling if

00:19:58,830 --> 00:20:02,790
you do you can of course also do this in

00:20:00,749 --> 00:20:05,650
PHP ini

00:20:02,790 --> 00:20:07,330
now the moment you do this the Falls

00:20:05,650 --> 00:20:09,970
that are being pre-loaded through this

00:20:07,330 --> 00:20:13,060
preload fall if you change them on disk

00:20:09,970 --> 00:20:14,770
it won't change anything in your

00:20:13,060 --> 00:20:16,210
application in the only way of

00:20:14,770 --> 00:20:18,910
refreshing your code has been pre

00:20:16,210 --> 00:20:21,370
loading is by restarting PHP fpm or

00:20:18,910 --> 00:20:24,520
anything else at once PHP just something

00:20:21,370 --> 00:20:26,590
as a cave yet now how does this work or

00:20:24,520 --> 00:20:28,240
how do you make use of it in this case

00:20:26,590 --> 00:20:30,790
this little script what it basically

00:20:28,240 --> 00:20:32,830
does it has the earnest core preload

00:20:30,790 --> 00:20:34,660
function and the only thing it does the

00:20:32,830 --> 00:20:36,520
base key loops over all the argument all

00:20:34,660 --> 00:20:37,870
the files in the current array if the

00:20:36,520 --> 00:20:40,210
directory calls itself

00:20:37,870 --> 00:20:43,300
it's basically recursive way of finding

00:20:40,210 --> 00:20:47,350
all the PHP files and they're a certain

00:20:43,300 --> 00:20:50,110
path in this case for WWE and framework

00:20:47,350 --> 00:20:52,810
library and for each of these files that

00:20:50,110 --> 00:20:56,680
it finds it calls up cache compiled

00:20:52,810 --> 00:21:01,360
found it does all of this and then at

00:20:56,680 --> 00:21:05,080
the end up cache has already pre

00:21:01,360 --> 00:21:08,830
discovered a pre result inheritances

00:21:05,080 --> 00:21:10,330
checked all the abstractions resolved

00:21:08,830 --> 00:21:12,640
all the traits that you might have used

00:21:10,330 --> 00:21:14,590
so there won't be any overhead of doing

00:21:12,640 --> 00:21:17,170
that per request which of course means

00:21:14,590 --> 00:21:19,240
that you end up speeding things up it's

00:21:17,170 --> 00:21:24,910
not a lot but it is about 10% which is

00:21:19,240 --> 00:21:27,370
always worthwhile to have um okay so KP

00:21:24,910 --> 00:21:30,460
it's about pre loading it doesn't work

00:21:27,370 --> 00:21:32,170
on Windows and I can explain at a

00:21:30,460 --> 00:21:37,450
similar point later why it doesn't work

00:21:32,170 --> 00:21:39,190
and we for PHP 743 it's not really it's

00:21:37,450 --> 00:21:41,350
a bit crash in places so let me put it

00:21:39,190 --> 00:21:44,230
away so wait until later today if you

00:21:41,350 --> 00:21:45,880
want to play this HP 743 should have all

00:21:44,230 --> 00:21:47,890
these things results but it still won't

00:21:45,880 --> 00:21:53,290
work on windows for reasons that I'll

00:21:47,890 --> 00:21:55,900
leave for smaller points now I spoke

00:21:53,290 --> 00:22:01,390
about FFI a little bit the stage that is

00:21:55,900 --> 00:22:03,310
really slow in using FFI is looking at

00:22:01,390 --> 00:22:05,140
all the definitions in the age valve now

00:22:03,310 --> 00:22:06,850
if it is only one line with a simple sum

00:22:05,140 --> 00:22:08,920
previously that's not a lot of work but

00:22:06,850 --> 00:22:12,720
if it's a more complicated API that

00:22:08,920 --> 00:22:15,940
takes quite a lot of time but you can

00:22:12,720 --> 00:22:20,109
hook pre loading and fi together

00:22:15,940 --> 00:22:21,819
and in this case in my preload Inc the

00:22:20,109 --> 00:22:24,639
one that I used in a previous slide to

00:22:21,819 --> 00:22:28,719
load design framework I can also use F

00:22:24,639 --> 00:22:31,629
of I load gave it a head of phone and

00:22:28,719 --> 00:22:33,039
then in the head of all that I'm loading

00:22:31,629 --> 00:22:36,759
I have my function definition for

00:22:33,039 --> 00:22:39,609
simples as well as the F of I scoped the

00:22:36,759 --> 00:22:42,389
F of I scoped you can then use later in

00:22:39,609 --> 00:22:45,129
your scripts to find this little

00:22:42,389 --> 00:22:46,509
marshaling object F of I to then call

00:22:45,129 --> 00:22:51,789
the functions against which is what I've

00:22:46,509 --> 00:22:54,279
done him now this is going to be fun for

00:22:51,789 --> 00:22:57,399
the future but I wouldn't quite say this

00:22:54,279 --> 00:23:00,249
is prime ready to use yet I'd wait until

00:22:57,399 --> 00:23:01,869
seven for five or seven four six to

00:23:00,249 --> 00:23:07,899
really use this in production I would

00:23:01,869 --> 00:23:10,359
say alright so with type properties come

00:23:07,899 --> 00:23:13,869
in other problems some frameworks

00:23:10,359 --> 00:23:16,269
Symphony in this case uses a hack to

00:23:13,869 --> 00:23:18,609
find out whether arrays are references

00:23:16,269 --> 00:23:24,129
of each other and it uses it like a side

00:23:18,609 --> 00:23:27,159
effect in PHP where if you assign a

00:23:24,129 --> 00:23:31,269
array although it copies over the main

00:23:27,159 --> 00:23:33,190
array all the array elements in there if

00:23:31,269 --> 00:23:35,409
there were references to other things it

00:23:33,190 --> 00:23:38,879
will still keep these references it

00:23:35,409 --> 00:23:41,379
wouldn't duplicate these bits and

00:23:38,879 --> 00:23:43,149
symphony uses that for finding out where

00:23:41,379 --> 00:23:46,329
the things are reference or not oh and

00:23:43,149 --> 00:23:48,219
Pete v7 for you can no longer do that so

00:23:46,329 --> 00:23:50,409
there is a new class part of the

00:23:48,219 --> 00:23:53,799
reflections called reference reflection

00:23:50,409 --> 00:23:56,139
and you can use that for finding out

00:23:53,799 --> 00:23:57,789
what is a reference to each other now i

00:23:56,139 --> 00:24:00,129
have a very small example i've i've

00:23:57,789 --> 00:24:03,849
created an array with three elements 0 1

00:24:00,129 --> 00:24:06,099
& 2 i creates two references once to the

00:24:03,849 --> 00:24:08,769
second element in the array in one

00:24:06,099 --> 00:24:10,359
sitive third one then i add an element

00:24:08,769 --> 00:24:13,359
to the array the fourth element to the

00:24:10,359 --> 00:24:17,289
array which i then also make a reference

00:24:13,359 --> 00:24:21,249
to the third element in the array which

00:24:17,289 --> 00:24:24,309
is the number two I really should have

00:24:21,249 --> 00:24:27,549
made this one based and nonzero base for

00:24:24,309 --> 00:24:29,860
this to make more sense in an example in

00:24:27,549 --> 00:24:33,250
any case Buddha's reflection

00:24:29,860 --> 00:24:35,230
reference we get back something that

00:24:33,250 --> 00:24:37,240
represents a reference or you got no if

00:24:35,230 --> 00:24:38,410
that if it's not a reference so let's

00:24:37,240 --> 00:24:41,080
have a look at what the script actually

00:24:38,410 --> 00:24:44,010
outputs for the first one for the far

00:24:41,080 --> 00:24:47,679
damp R 0 and R 1 it returns first no

00:24:44,010 --> 00:24:49,990
because well the first element in the

00:24:47,679 --> 00:24:51,580
rate is 0 has not been referenced

00:24:49,990 --> 00:24:55,570
anywhere so it's not a reference

00:24:51,580 --> 00:25:00,299
whereas for r1 which is a reference

00:24:55,570 --> 00:25:03,220
which you get see here as a work ever

00:25:00,299 --> 00:25:05,230
reference reflection reference you get

00:25:03,220 --> 00:25:09,100
back as an object and then all the other

00:25:05,230 --> 00:25:10,840
ones you can get the ID out and if the

00:25:09,100 --> 00:25:13,540
ID is the same then you know that these

00:25:10,840 --> 00:25:15,010
things reference the same elements now

00:25:13,540 --> 00:25:17,620
this is something that I don't think

00:25:15,010 --> 00:25:19,840
many of you would be using should be

00:25:17,620 --> 00:25:22,630
using but it is there in case you relied

00:25:19,840 --> 00:25:27,790
on this additional behavior that peach

00:25:22,630 --> 00:25:29,620
peach p73 and early at there is a new

00:25:27,790 --> 00:25:33,760
custom serialization mechanism because

00:25:29,620 --> 00:25:35,650
two of them isn't enough there's a

00:25:33,760 --> 00:25:38,140
reason why this has been added the

00:25:35,650 --> 00:25:42,429
serial serializable interface in PHP has

00:25:38,140 --> 00:25:47,320
issues in such a way that if you

00:25:42,429 --> 00:25:49,660
serialize lots of nested objects and

00:25:47,320 --> 00:25:50,799
serializing only one of those objects

00:25:49,660 --> 00:25:52,720
that have been embedded in this

00:25:50,799 --> 00:25:56,340
serialize string you can't really do

00:25:52,720 --> 00:25:59,590
because it define depends on context

00:25:56,340 --> 00:26:02,500
potentially don't earlier in the string

00:25:59,590 --> 00:26:05,830
so you can't plug out only certain bits

00:26:02,500 --> 00:26:06,730
to em serialize reliably so that is a

00:26:05,830 --> 00:26:08,740
problem at the serializable interface

00:26:06,730 --> 00:26:10,630
the sleep and wake up magic methods are

00:26:08,740 --> 00:26:13,660
not powerful enough to do any useful

00:26:10,630 --> 00:26:15,910
things that because with sleep you can

00:26:13,660 --> 00:26:19,510
only specify the property names that you

00:26:15,910 --> 00:26:21,220
want to serialize basically and which

00:26:19,510 --> 00:26:23,010
means you can tell in calculations you

00:26:21,220 --> 00:26:25,750
come to type checking and stuff and that

00:26:23,010 --> 00:26:28,270
so that has a deficiency so the next one

00:26:25,750 --> 00:26:29,950
in seven four is two new magic methods

00:26:28,270 --> 00:26:32,140
they are called serialize sorry

00:26:29,950 --> 00:26:34,630
underscore underscore serialize and in

00:26:32,140 --> 00:26:38,620
the score underscore unsterilized which

00:26:34,630 --> 00:26:41,110
if available you can use to return the

00:26:38,620 --> 00:26:43,540
property names and the values that you

00:26:41,110 --> 00:26:47,890
want to serialize so any example here

00:26:43,540 --> 00:26:51,430
sorry let me call serialize here I'll

00:26:47,890 --> 00:26:54,700
basically returning is the property T or

00:26:51,430 --> 00:26:56,950
then we call it t that is shorter than

00:26:54,700 --> 00:26:58,780
temperature and in that we store the

00:26:56,950 --> 00:27:01,420
temperature and mmm restoring this by

00:26:58,780 --> 00:27:03,700
using underscore in the answer lies then

00:27:01,420 --> 00:27:06,670
we pluck out the value of the

00:27:03,700 --> 00:27:09,520
temperature back out of the rain now if

00:27:06,670 --> 00:27:12,520
you want to do this in a nested way you

00:27:09,520 --> 00:27:14,500
can but you need to do this yourself so

00:27:12,520 --> 00:27:15,730
in this case we have a fire class that

00:27:14,500 --> 00:27:17,830
has serializing unsterilized

00:27:15,730 --> 00:27:20,800
and then we have a star class that

00:27:17,830 --> 00:27:23,980
extends fire so how you would serialize

00:27:20,800 --> 00:27:25,840
from that is then you do the properties

00:27:23,980 --> 00:27:27,970
of that of the clouds that you're doing

00:27:25,840 --> 00:27:30,220
in and then you call parents and it's

00:27:27,970 --> 00:27:31,870
coroner's who are sterilized all the

00:27:30,220 --> 00:27:34,210
class has been extended to dance

00:27:31,870 --> 00:27:37,780
serialize that baths so it is up to you

00:27:34,210 --> 00:27:39,640
now whether you would serialize the

00:27:37,780 --> 00:27:42,160
properties from classes that you have

00:27:39,640 --> 00:27:44,350
inherited and of course if you do that

00:27:42,160 --> 00:27:47,140
you also need to restore them by calling

00:27:44,350 --> 00:27:49,210
calling parent unsterilized in this

00:27:47,140 --> 00:27:50,710
course it's the same thing as setting up

00:27:49,210 --> 00:27:52,270
class class of it constructors and

00:27:50,710 --> 00:27:54,040
destructors right you're supposed to

00:27:52,270 --> 00:27:56,260
call parent parent in its gonna score

00:27:54,040 --> 00:27:58,690
constructs to set up things defining the

00:27:56,260 --> 00:28:01,660
parent class and then you get this

00:27:58,690 --> 00:28:02,680
lovely string that well it's on the

00:28:01,660 --> 00:28:06,420
bottom of the screen it's not

00:28:02,680 --> 00:28:08,650
particularly interesting beach p73 if

00:28:06,420 --> 00:28:11,170
you wanted the hash extension you had to

00:28:08,650 --> 00:28:12,970
enable it and PHP 74 it's always there

00:28:11,170 --> 00:28:15,430
by default which is a great move which

00:28:12,970 --> 00:28:16,930
means that function like password hash

00:28:15,430 --> 00:28:19,360
impulse would verify always available

00:28:16,930 --> 00:28:21,090
now and everybody who should be using

00:28:19,360 --> 00:28:28,180
that if you do anything with passwords

00:28:21,090 --> 00:28:30,430
yeah I know PHP 74 has new features we

00:28:28,180 --> 00:28:32,260
also remove the few features or we

00:28:30,430 --> 00:28:34,870
removed a few extensions from the core

00:28:32,260 --> 00:28:38,490
distribution to be more specific X

00:28:34,870 --> 00:28:41,580
recode anybody of you ever used that I

00:28:38,490 --> 00:28:44,050
have but that's probably 15 years ago

00:28:41,580 --> 00:28:46,210
alternatives called I convey is a lot

00:28:44,050 --> 00:28:48,160
better at a recode library that the

00:28:46,210 --> 00:28:54,090
extension use hasn't been updated since

00:28:48,160 --> 00:28:56,890
2001 old Sofer shouldn't really be used

00:28:54,090 --> 00:28:57,460
xwd DX and if you've used that for

00:28:56,890 --> 00:29:00,520
anything

00:28:57,460 --> 00:29:04,990
it sort of started at the same time as

00:29:00,520 --> 00:29:07,950
soap of course is has now been surpassed

00:29:04,990 --> 00:29:10,419
by using Jason as a transport mechanism

00:29:07,950 --> 00:29:13,299
so this extension hasn't been removed

00:29:10,419 --> 00:29:15,370
yet and there's no alternative for it

00:29:13,299 --> 00:29:18,130
and it has been moved to the pakil

00:29:15,370 --> 00:29:20,140
extension repository which we sometimes

00:29:18,130 --> 00:29:23,190
currently refer to as AB area because

00:29:20,140 --> 00:29:26,500
this is where extensions go to freeze

00:29:23,190 --> 00:29:28,120
basically and then the X and Z base

00:29:26,500 --> 00:29:31,720
extension has been removed from the core

00:29:28,120 --> 00:29:34,000
distribution had no maintainer x' the

00:29:31,720 --> 00:29:36,460
moment the vote for removing his

00:29:34,000 --> 00:29:38,380
extension came through a few maintainer

00:29:36,460 --> 00:29:40,600
x' that's apparently existed that didn't

00:29:38,380 --> 00:29:41,950
interact with anybody else saying while

00:29:40,600 --> 00:29:44,620
you're removing this room maintaining

00:29:41,950 --> 00:29:47,710
this a bit late now we did ask for

00:29:44,620 --> 00:29:49,179
people that are maintaining it so I'm

00:29:47,710 --> 00:29:50,860
happy to announce that although this is

00:29:49,179 --> 00:29:52,299
no longer part of the core distribution

00:29:50,860 --> 00:29:54,309
people are maintaining at the end which

00:29:52,299 --> 00:29:56,770
is good news and I can do this in this

00:29:54,309 --> 00:29:58,149
only in their own leisurely time in a

00:29:56,770 --> 00:29:59,830
pack of repository without having to

00:29:58,149 --> 00:30:02,890
wait for the p2p release cycles which

00:29:59,830 --> 00:30:05,080
happen basically once every year alright

00:30:02,890 --> 00:30:08,020
so I like talking to people about all

00:30:05,080 --> 00:30:09,940
the stuff that makes into PHP and it's a

00:30:08,020 --> 00:30:10,570
modern thing tonight you start with the

00:30:09,940 --> 00:30:12,220
podcast

00:30:10,570 --> 00:30:14,679
so I started podcast last year called

00:30:12,220 --> 00:30:18,340
PHP internals news I got to talk to all

00:30:14,679 --> 00:30:19,750
the people that are things with PHP now

00:30:18,340 --> 00:30:21,850
because there are so many features in

00:30:19,750 --> 00:30:23,770
PHP and it gets kind of boring to talk

00:30:21,850 --> 00:30:25,029
about it but I sort of on siddhu's also

00:30:23,770 --> 00:30:31,149
introduce you to people that actually

00:30:25,029 --> 00:30:33,669
work on the code and that's the opening

00:30:31,149 --> 00:30:35,049
soon so what I'm doing is every time I

00:30:33,669 --> 00:30:38,590
talk to somebody I have them introduce

00:30:35,049 --> 00:30:41,080
themselves and I end up talking to a lot

00:30:38,590 --> 00:30:44,980
to a specific person he's Nikita Popov

00:30:41,080 --> 00:30:47,559
he's basically responsible responsible

00:30:44,980 --> 00:30:53,980
for pretty much 80% of us get added to

00:30:47,559 --> 00:30:55,210
PHP but let me introduce and I work to

00:30:53,980 --> 00:30:58,840
develop PHP

00:30:55,210 --> 00:31:01,690
take your writing song nice air sees

00:30:58,840 --> 00:31:03,520
that we can discuss this podcast this

00:31:01,690 --> 00:31:05,320
was episode 1 I've since then I've

00:31:03,520 --> 00:31:07,450
spoken 20 times to him or something like

00:31:05,320 --> 00:31:08,980
that he gets a little bit annoyed with

00:31:07,450 --> 00:31:10,779
me bugging him anytime he comes up with

00:31:08,980 --> 00:31:11,350
something cool again in any case the

00:31:10,779 --> 00:31:13,330
first thing

00:31:11,350 --> 00:31:17,169
we spoke about those same string and

00:31:13,330 --> 00:31:19,179
number comparisons you know that PHP is

00:31:17,169 --> 00:31:21,070
kind of weird with comparing zeros to

00:31:19,179 --> 00:31:24,010
strings with zeros in it and so on so

00:31:21,070 --> 00:31:28,000
you made a nice RC finance however it is

00:31:24,010 --> 00:31:29,950
never made it to voting so does mine

00:31:28,000 --> 00:31:32,049
make it into PHP eight so it's kind of

00:31:29,950 --> 00:31:40,900
useless to talk about them in PHP 7/4 on

00:31:32,049 --> 00:31:42,760
that it might show plato's that's me so

00:31:40,900 --> 00:31:44,679
Joe he does kind of interesting

00:31:42,760 --> 00:31:47,440
extensions like slightly on the edge

00:31:44,679 --> 00:31:49,750
kind of things he did the parallels

00:31:47,440 --> 00:31:51,700
extension for using some parallel

00:31:49,750 --> 00:31:53,730
execution in PHP but I spoke to him

00:31:51,700 --> 00:31:56,020
about something called weak references

00:31:53,730 --> 00:31:58,360
so weak reference that actually made it

00:31:56,020 --> 00:32:01,150
into PHP 74 is a way of creating a

00:31:58,360 --> 00:32:04,179
reference to an object without keeping a

00:32:01,150 --> 00:32:06,179
PHP memory manager reference to it and

00:32:04,179 --> 00:32:08,950
this is important in situations where

00:32:06,179 --> 00:32:11,590
sometimes you have like an OD m in or RM

00:32:08,950 --> 00:32:14,049
that keeps objects meta information

00:32:11,590 --> 00:32:17,740
about objects that has loaded from the

00:32:14,049 --> 00:32:18,909
database in memory but today how what

00:32:17,740 --> 00:32:21,400
currently happens is that they usually

00:32:18,909 --> 00:32:23,740
create like a big array with all with

00:32:21,400 --> 00:32:25,330
each array elements having a link to the

00:32:23,740 --> 00:32:28,390
object and then the method information

00:32:25,330 --> 00:32:31,360
but a moment she do that PHP can never

00:32:28,390 --> 00:32:32,919
free the memory associated with these

00:32:31,360 --> 00:32:35,669
opiates anymore because there's a

00:32:32,919 --> 00:32:37,870
reference to it which isn't really

00:32:35,669 --> 00:32:39,789
particularly performance

00:32:37,870 --> 00:32:41,710
so what weak reference allow you to do

00:32:39,789 --> 00:32:43,960
is they allow you to create a reference

00:32:41,710 --> 00:32:47,080
to an object but it doesn't prevent a

00:32:43,960 --> 00:32:49,510
PHP memory manager from freeing the

00:32:47,080 --> 00:32:52,059
object if there's no normal order

00:32:49,510 --> 00:32:54,640
reference link to it which is a kind of

00:32:52,059 --> 00:32:56,559
a useful thing to have and the way how

00:32:54,640 --> 00:32:58,990
this works is that there's a class

00:32:56,559 --> 00:33:01,120
called weak reference and you can

00:32:58,990 --> 00:33:03,970
construct a rick reference by using the

00:33:01,120 --> 00:33:06,610
create method on that it's a static

00:33:03,970 --> 00:33:08,820
factory methods call it with the object

00:33:06,610 --> 00:33:14,080
and then you get a weak reference class

00:33:08,820 --> 00:33:15,789
that encapsulates that object so and in

00:33:14,080 --> 00:33:17,710
order to get the object back out of it

00:33:15,789 --> 00:33:19,450
you call the guts method out of that and

00:33:17,710 --> 00:33:22,390
that returns either the object or know

00:33:19,450 --> 00:33:24,679
if peach peas memory manager has freed

00:33:22,390 --> 00:33:27,110
it for all the reasons so this

00:33:24,679 --> 00:33:28,519
case account used to keep forgetting

00:33:27,110 --> 00:33:31,309
about that we have this class called

00:33:28,519 --> 00:33:34,070
ghost has a method called boo which

00:33:31,309 --> 00:33:37,519
echoes boo I mean what else do ghosts do

00:33:34,070 --> 00:33:39,350
alright so we created objects we create

00:33:37,519 --> 00:33:41,330
a weak reference to it and then we call

00:33:39,350 --> 00:33:44,059
get on the rig reference and Emma call

00:33:41,330 --> 00:33:46,369
the method boo on it when we then unset

00:33:44,059 --> 00:33:48,950
it and try to get you object again it no

00:33:46,369 --> 00:33:51,889
longer exists first thing it says boo

00:33:48,950 --> 00:33:55,879
and then the second forum says well it

00:33:51,889 --> 00:33:59,149
is no in evil code if I would have tried

00:33:55,879 --> 00:34:00,590
to call the boo method directly on this

00:33:59,149 --> 00:34:02,990
no of course you get an exception

00:34:00,590 --> 00:34:04,460
because she can't call methods or no so

00:34:02,990 --> 00:34:06,769
you do always need to make sure that

00:34:04,460 --> 00:34:08,960
their reference or the weak reference is

00:34:06,769 --> 00:34:12,169
still valid before you do things on it

00:34:08,960 --> 00:34:14,089
which is kind of useful thing to have so

00:34:12,169 --> 00:34:15,980
they're made into seven for PHP eight

00:34:14,089 --> 00:34:19,339
will have something extended of this

00:34:15,980 --> 00:34:28,790
called a rig reference map but this is

00:34:19,339 --> 00:34:32,379
PHP seven for tone okay so Nikita again

00:34:28,790 --> 00:34:35,089
we spoke about short arrow functions and

00:34:32,379 --> 00:34:39,379
short arrow functions is a new way of

00:34:35,089 --> 00:34:42,440
writing closures but in a shorthand form

00:34:39,379 --> 00:34:43,879
so traditionally in PHP seven three and

00:34:42,440 --> 00:34:46,940
earlier if you want to have a closure

00:34:43,879 --> 00:34:48,950
that adds two numbers to each other we

00:34:46,940 --> 00:34:51,589
have to do arrows the name of the

00:34:48,950 --> 00:34:53,510
function function as the keywords the

00:34:51,589 --> 00:34:55,760
arguments that are being passed into the

00:34:53,510 --> 00:34:58,280
function when it is being called you see

00:34:55,760 --> 00:35:00,920
use keywords and then the Y in this case

00:34:58,280 --> 00:35:03,650
is all the arguments that are bound from

00:35:00,920 --> 00:35:06,740
the outside scope to also be able to use

00:35:03,650 --> 00:35:09,200
inside a closure now what you can do in

00:35:06,740 --> 00:35:10,579
seven four is the following you can

00:35:09,200 --> 00:35:13,150
define a closure not using by the

00:35:10,579 --> 00:35:15,470
function keyword but by using FN

00:35:13,150 --> 00:35:18,859
combined with the arrow following the

00:35:15,470 --> 00:35:20,510
name of the function you still have the

00:35:18,859 --> 00:35:22,880
arguments that you pass in into the

00:35:20,510 --> 00:35:25,910
arrow function which is the X but you

00:35:22,880 --> 00:35:28,309
don't have to import would use all the

00:35:25,910 --> 00:35:31,369
other variables from the surrounding

00:35:28,309 --> 00:35:33,920
scope anymore so this is of course a lot

00:35:31,369 --> 00:35:35,329
shorter to write but it also has

00:35:33,920 --> 00:35:37,859
additional benefit that you don't have

00:35:35,329 --> 00:35:40,840
to use the use keyword too

00:35:37,859 --> 00:35:43,150
implicitly finds variables from the

00:35:40,840 --> 00:35:45,730
outer scope into the closure now this is

00:35:43,150 --> 00:35:48,010
mostly useful for things like this where

00:35:45,730 --> 00:35:51,240
if you have like an array filter you

00:35:48,010 --> 00:35:54,790
won't only want to keep in your weighing

00:35:51,240 --> 00:35:56,920
everything that is already part of

00:35:54,790 --> 00:35:59,380
another array that we do in a first-come

00:35:56,920 --> 00:36:02,230
put in a right here impeach p7 4 you can

00:35:59,380 --> 00:36:05,380
write it a lot more shorter by using

00:36:02,230 --> 00:36:07,720
this shorthand or short array function

00:36:05,380 --> 00:36:09,760
and I in my opinion that makes it a

00:36:07,720 --> 00:36:11,740
little bit more readable now the

00:36:09,760 --> 00:36:14,950
implementation in 7/4 only allows a

00:36:11,740 --> 00:36:16,780
single expression after the arrow it is

00:36:14,950 --> 00:36:21,099
possible that in future version of PHP

00:36:16,780 --> 00:36:22,420
we would allow for multiple lines which

00:36:21,099 --> 00:36:24,220
of course is currently what you can do

00:36:22,420 --> 00:36:26,050
with a traditional closure but also has

00:36:24,220 --> 00:36:29,170
still keep this additional benefit of

00:36:26,050 --> 00:36:32,170
having the variables from the outer

00:36:29,170 --> 00:36:34,960
scope implicitly bound to the closure

00:36:32,170 --> 00:36:39,270
themselves as on but that might be PHP 8

00:36:34,960 --> 00:36:41,920
or not all right

00:36:39,270 --> 00:36:44,170
57 for tidies up some warnings that

00:36:41,920 --> 00:36:47,589
depending on whether you implement a

00:36:44,170 --> 00:36:50,830
class sorry we're in it class implements

00:36:47,589 --> 00:36:52,599
an interface any arguments arguments in

00:36:50,830 --> 00:36:54,400
the signatures don't match you get a

00:36:52,599 --> 00:36:58,180
fatal error but if you did it between

00:36:54,400 --> 00:37:01,690
two classes you'd only get a warning and

00:36:58,180 --> 00:37:03,250
PHP 7 for these things are being thrown

00:37:01,690 --> 00:37:05,950
together to make sure that always

00:37:03,250 --> 00:37:10,150
behaves the same but also that doesn't

00:37:05,950 --> 00:37:11,619
make into PHP 74 peach p8 again sorry

00:37:10,150 --> 00:37:15,730
you have to wait until the end of the

00:37:11,619 --> 00:37:24,760
year question for you what is the output

00:37:15,730 --> 00:37:27,240
of this lot little scripts the correct

00:37:24,760 --> 00:37:30,190
answer is this shouldn't have passed

00:37:27,240 --> 00:37:34,839
code review because nobody should write

00:37:30,190 --> 00:37:37,230
code like this so in PHP 7 for this now

00:37:34,839 --> 00:37:40,140
adds warnings it outputs for by the way

00:37:37,230 --> 00:37:44,080
yeah go try it out as if you want later

00:37:40,140 --> 00:37:45,849
and PHP 7/4 will now show you this it

00:37:44,080 --> 00:37:48,790
will show you a deprecation warning

00:37:45,849 --> 00:37:51,530
saying that you can't use nested turn

00:37:48,790 --> 00:37:55,550
ares unless you use parent teasers

00:37:51,530 --> 00:37:58,880
indicate what you really mean to do mph

00:37:55,550 --> 00:38:00,890
p8 it is possible that you'll get a

00:37:58,880 --> 00:38:02,930
fatal error if you don't use parantesis

00:38:00,890 --> 00:38:07,460
but I'm not sure whether that actually

00:38:02,930 --> 00:38:09,620
be merged into the language yet because

00:38:07,460 --> 00:38:11,560
of course doing that breaks code we

00:38:09,620 --> 00:38:14,450
don't like breaking people's code

00:38:11,560 --> 00:38:16,840
alright what is the output of this

00:38:14,450 --> 00:38:16,840
example

00:38:22,630 --> 00:38:28,430
what did I hear he said shouted

00:38:24,860 --> 00:38:31,730
something some 37 know the output of

00:38:28,430 --> 00:38:35,030
this is actually just seven you want to

00:38:31,730 --> 00:38:37,100
guess why I will try to explain it the

00:38:35,030 --> 00:38:38,990
dot and the plus operators have the same

00:38:37,100 --> 00:38:41,780
precedence meaning that will get

00:38:38,990 --> 00:38:43,960
executed from left to right so the first

00:38:41,780 --> 00:38:47,420
thing that Petrie does it does sum and

00:38:43,960 --> 00:38:50,510
then it arts as a string the number

00:38:47,420 --> 00:38:54,440
three to it so that results in a string

00:38:50,510 --> 00:38:56,480
some colon space three then we add a

00:38:54,440 --> 00:38:59,000
number to it and the moment you use a

00:38:56,480 --> 00:39:01,250
plus both operands need to be number

00:38:59,000 --> 00:39:04,400
what is the numeric value of the string

00:39:01,250 --> 00:39:06,170
some going on space straight is zero and

00:39:04,400 --> 00:39:10,520
then it's out seven so the result is

00:39:06,170 --> 00:39:11,980
seven in PHP seven for it says the

00:39:10,520 --> 00:39:14,360
behavior of unparent

00:39:11,980 --> 00:39:16,460
and can't pronounce that word impaired

00:39:14,360 --> 00:39:18,710
incised expressions containing both the

00:39:16,460 --> 00:39:20,840
dots and a plus or minus will change the

00:39:18,710 --> 00:39:22,430
PHP eight where the plus and minus will

00:39:20,840 --> 00:39:24,700
take a higher precedence which is sort

00:39:22,430 --> 00:39:28,730
of what you would expect to happen in

00:39:24,700 --> 00:39:30,740
now these subtle changes can potentially

00:39:28,730 --> 00:39:32,390
break quite a lot of coats because it's

00:39:30,740 --> 00:39:35,510
a very subtle thing that changes in a

00:39:32,390 --> 00:39:37,370
language so when Akita wrote this he

00:39:35,510 --> 00:39:41,030
actually looked at a top thousand PHP

00:39:37,370 --> 00:39:42,740
protects on Stack Overflow and found

00:39:41,030 --> 00:39:46,430
several occasions where this was done

00:39:42,740 --> 00:39:48,950
but all of these web bucks and so we are

00:39:46,430 --> 00:39:50,810
pretty confident that anywhere where

00:39:48,950 --> 00:39:53,510
people do this it is never on purpose

00:39:50,810 --> 00:39:55,970
and in that case that makes it any

00:39:53,510 --> 00:39:57,530
easier decision for us to then break

00:39:55,970 --> 00:39:58,820
this kind of code and eight because if

00:39:57,530 --> 00:40:01,520
it's book and all the case that we can

00:39:58,820 --> 00:40:03,680
find us pretty sure it's going to cause

00:40:01,520 --> 00:40:07,880
issues that you hadn't expected in your

00:40:03,680 --> 00:40:10,310
own code somewhere as well okay I have

00:40:07,880 --> 00:40:12,920
Nikita again no worries I won't play his

00:40:10,310 --> 00:40:15,680
sound out over and over again it's a

00:40:12,920 --> 00:40:17,510
simple example change in seven force

00:40:15,680 --> 00:40:19,280
that you can note now to throw

00:40:17,510 --> 00:40:21,530
exceptions from the two string methods

00:40:19,280 --> 00:40:23,540
in seven three-year current and you've

00:40:21,530 --> 00:40:25,130
got a fatal error that says matters x

00:40:23,540 --> 00:40:29,030
pro to string must not throw an

00:40:25,130 --> 00:40:31,910
exception in seven four it will still

00:40:29,030 --> 00:40:34,100
get a fail to error because you haven't

00:40:31,910 --> 00:40:36,140
called the exception that you won't get

00:40:34,100 --> 00:40:37,760
a failure because you

00:40:36,140 --> 00:40:39,380
throwing exception from a two-string

00:40:37,760 --> 00:40:41,870
method which is kind of handy

00:40:39,380 --> 00:40:45,050
it's a minor thing but I guess it makes

00:40:41,870 --> 00:40:47,180
sense at some points simple change to

00:40:45,050 --> 00:40:50,990
the language quite a big change

00:40:47,180 --> 00:40:54,080
internally in PHP because to string is

00:40:50,990 --> 00:40:56,390
used in so many contexts that and they

00:40:54,080 --> 00:40:58,100
all had to be made safe for them also

00:40:56,390 --> 00:41:01,070
being able to do with an exception being

00:40:58,100 --> 00:41:02,780
drunk from that so sometimes these

00:41:01,070 --> 00:41:06,130
things look simple but actually quite a

00:41:02,780 --> 00:41:06,130
bit harder than than they look like

00:41:09,160 --> 00:41:15,880
sometimes the sound quality isn't the

00:41:11,570 --> 00:41:17,660
greatest this was Scott and he made a

00:41:15,880 --> 00:41:19,700
simple change that

00:41:17,660 --> 00:41:22,610
oh that me personally causes the most

00:41:19,700 --> 00:41:27,440
amount of grief in my own code what is

00:41:22,610 --> 00:41:30,920
the output of this script these converts

00:41:27,440 --> 00:41:32,600
converts the string from base 16 in this

00:41:30,920 --> 00:41:34,220
case to base them that's some

00:41:32,600 --> 00:41:37,880
hexadecimal to decimal what is the

00:41:34,220 --> 00:41:39,490
output of this if you can guess what the

00:41:37,880 --> 00:41:42,200
answer is you're pretty good with us

00:41:39,490 --> 00:41:45,260
I'll give you I'll give you the answer

00:41:42,200 --> 00:41:49,280
it is 237 no warnings or anything like

00:41:45,260 --> 00:41:52,010
that how does it get to 237 here well

00:41:49,280 --> 00:41:53,450
basically the base comforters it ignores

00:41:52,010 --> 00:41:55,820
everything it doesn't understand for

00:41:53,450 --> 00:41:58,250
that base which means it only sees the E

00:41:55,820 --> 00:42:03,170
and the D in a string and the

00:41:58,250 --> 00:42:06,260
hexadecimal Edie is 237 yeah great isn't

00:42:03,170 --> 00:42:08,300
it PHP 74 this will now say deprecated

00:42:06,260 --> 00:42:11,350
and valid characters pass for attempted

00:42:08,300 --> 00:42:13,820
conversion now some of my code I had

00:42:11,350 --> 00:42:17,150
used this as like a cache key for

00:42:13,820 --> 00:42:19,100
something at some point but it had a

00:42:17,150 --> 00:42:20,600
minus character in it and minuses of

00:42:19,100 --> 00:42:25,220
course not part of this so they'd end up

00:42:20,600 --> 00:42:25,760
filling up my lock saying that I did do

00:42:25,220 --> 00:42:27,230
something wrong

00:42:25,760 --> 00:42:28,670
AXI that code is used in this

00:42:27,230 --> 00:42:30,200
presentation so I had to go through all

00:42:28,670 --> 00:42:31,970
these slides to make sure that the

00:42:30,200 --> 00:42:33,380
templates will catch otherwise this

00:42:31,970 --> 00:42:36,830
error would have actually shown up on my

00:42:33,380 --> 00:42:38,390
slides giving the presentation yeah I

00:42:36,830 --> 00:42:40,430
haven't fixed that code yet I should win

00:42:38,390 --> 00:42:43,670
this shop would you mind introducing

00:42:40,430 --> 00:42:46,130
yourself as well yes I am also a full

00:42:43,670 --> 00:42:48,310
stack developer have been using PHP

00:42:46,130 --> 00:42:50,119
since 2003

00:42:48,310 --> 00:42:52,849
okay so Bishop ants

00:42:50,119 --> 00:42:56,210
got together to add another syntax trick

00:42:52,849 --> 00:42:58,519
to PHP semaphore if you have big numbers

00:42:56,210 --> 00:43:01,309
it's sometimes really hard to see how

00:42:58,519 --> 00:43:03,230
big the number is because well if you

00:43:01,309 --> 00:43:06,230
would write this down in like text you'd

00:43:03,230 --> 00:43:08,539
use a dot or Camargue whatever or an

00:43:06,230 --> 00:43:10,819
apostrophe between a thousands right in

00:43:08,539 --> 00:43:13,309
peach we could never really do that but

00:43:10,819 --> 00:43:15,769
you can on PHP seven four you can use

00:43:13,309 --> 00:43:19,039
the underscore between numbers in

00:43:15,769 --> 00:43:24,559
numeric literals to make these things

00:43:19,039 --> 00:43:28,910
easier to read it also works for all of

00:43:24,559 --> 00:43:31,369
the other situations where you can have

00:43:28,910 --> 00:43:32,779
a numeric literal so it works in like

00:43:31,369 --> 00:43:34,490
floating-point numbers where you can

00:43:32,779 --> 00:43:37,009
have the underscore between every third

00:43:34,490 --> 00:43:39,589
where you cannot have t in the score is

00:43:37,009 --> 00:43:42,799
between the three and a dot and adults

00:43:39,589 --> 00:43:45,109
and one it has to be between two numbers

00:43:42,799 --> 00:43:49,099
and if it's a hexadecimal number

00:43:45,109 --> 00:43:51,079
the a 2df also count as a number you can

00:43:49,099 --> 00:43:55,509
so in this case I use that for pi didn't

00:43:51,079 --> 00:43:58,940
pi didn't fit on my slide it's kind of

00:43:55,509 --> 00:44:00,890
too early for jokes but I think weathers

00:43:58,940 --> 00:44:04,279
mostly makes sense in cases where you

00:44:00,890 --> 00:44:07,910
have like so like the TT watch thing is

00:44:04,279 --> 00:44:09,710
a little - that I that I've extended to

00:44:07,910 --> 00:44:11,630
to read the date of my watch and have

00:44:09,710 --> 00:44:13,460
complained all kinds of hexadecimal

00:44:11,630 --> 00:44:14,960
numbers and and boxes and stuff like

00:44:13,460 --> 00:44:17,059
that and these things you had a hard

00:44:14,960 --> 00:44:18,109
code and by being able to use unit

00:44:17,059 --> 00:44:20,900
square that actually made that code

00:44:18,109 --> 00:44:22,249
quite a bit easier to read now or when

00:44:20,900 --> 00:44:25,130
you have to do a little bit binary

00:44:22,249 --> 00:44:26,869
things for turning on the i/o ports on

00:44:25,130 --> 00:44:30,589
your Raspberry Pi and stuff like that I

00:44:26,869 --> 00:44:32,660
think this is a more usable case and

00:44:30,589 --> 00:44:37,210
just doing for big numbers because in

00:44:32,660 --> 00:44:39,710
general it's very unlikely that you have

00:44:37,210 --> 00:44:41,900
like constants for these big numbers in

00:44:39,710 --> 00:44:44,450
the first place where you absolutely

00:44:41,900 --> 00:44:46,009
should never use it for is for things

00:44:44,450 --> 00:44:48,049
that aren't actually numbers

00:44:46,009 --> 00:44:49,489
now hopefully you never hard code a

00:44:48,049 --> 00:44:51,200
phone number or a credit card or the

00:44:49,489 --> 00:44:54,619
social security number in your PHP code

00:44:51,200 --> 00:44:57,259
if you do you probably should find a

00:44:54,619 --> 00:44:59,210
different job for my opinion unless of

00:44:57,259 --> 00:45:00,470
course you're doing testing but the

00:44:59,210 --> 00:45:01,809
payments right where you sort of have

00:45:00,470 --> 00:45:04,020
the heart go to your credit card bit

00:45:01,809 --> 00:45:05,520
remember these things are not

00:45:04,020 --> 00:45:07,260
the credit card is not a number you

00:45:05,520 --> 00:45:08,730
don't do calculations with a phone

00:45:07,260 --> 00:45:10,710
number you don't do calculation he don't

00:45:08,730 --> 00:45:12,360
add one to the number now I actually

00:45:10,710 --> 00:45:13,950
don't know if this is a real phone

00:45:12,360 --> 00:45:16,670
number so please don't call it

00:45:13,950 --> 00:45:18,960
I just match up some numbers again I

00:45:16,670 --> 00:45:21,300
probably should have added an A or

00:45:18,960 --> 00:45:22,710
something in it to make sure that yeah

00:45:21,300 --> 00:45:26,880
so don't do that but you should never

00:45:22,710 --> 00:45:29,340
have donors in the first place I'm a

00:45:26,880 --> 00:45:31,920
full-stack developer I've been working

00:45:29,340 --> 00:45:34,080
with PHP for almost 10 years now

00:45:31,920 --> 00:45:35,910
so this is a curious thing most of the

00:45:34,080 --> 00:45:39,600
people that did some of the smaller

00:45:35,910 --> 00:45:41,930
changes to PHP 74 they were into

00:45:39,600 --> 00:45:44,369
original C developers they were all

00:45:41,930 --> 00:45:46,590
working on their PHP code I found

00:45:44,369 --> 00:45:48,420
something wrong with PHP and they came

00:45:46,590 --> 00:45:50,070
up with an idea though maybe make PHP

00:45:48,420 --> 00:45:51,930
little bit better so I write an RFC for

00:45:50,070 --> 00:45:54,119
it some of them can write our own code

00:45:51,930 --> 00:45:56,970
their own C code statically implemented

00:45:54,119 --> 00:45:59,580
features but many others let's go

00:45:56,970 --> 00:46:01,410
together with somebody else that is more

00:45:59,580 --> 00:46:03,090
familiar with the code in this case I

00:46:01,410 --> 00:46:06,240
think Theodore's spoke with bisshop

00:46:03,090 --> 00:46:07,740
again to then implement a feature in PHP

00:46:06,240 --> 00:46:11,520
so you don't necessarily have to be a C

00:46:07,740 --> 00:46:13,770
developer to propose changes to PHP but

00:46:11,520 --> 00:46:15,570
it would be really helpful if you at

00:46:13,770 --> 00:46:17,940
least have some patch it doesn't have to

00:46:15,570 --> 00:46:19,410
be a fully fledged patch but it needs to

00:46:17,940 --> 00:46:21,600
be something that it looks like it is

00:46:19,410 --> 00:46:24,300
implementable because sometimes IDs are

00:46:21,600 --> 00:46:27,180
great but implementations are really

00:46:24,300 --> 00:46:28,440
hard to as an example generics I'm sure

00:46:27,180 --> 00:46:32,070
all of you would love the hair doesn't

00:46:28,440 --> 00:46:36,210
PHP but that is not a simple task for

00:46:32,070 --> 00:46:38,880
example in any case theater I came up in

00:46:36,210 --> 00:46:41,520
our c2 deprecated the curly brace method

00:46:38,880 --> 00:46:45,060
for accessing array elements and string

00:46:41,520 --> 00:46:47,700
off sense so the PHP 7/4 will no longer

00:46:45,060 --> 00:46:49,410
just show you 5 5 SS but it will also

00:46:47,700 --> 00:46:50,910
show you the warning at array in string

00:46:49,410 --> 00:46:55,530
offset axes with curly braces are now

00:46:50,910 --> 00:47:01,560
deprecated all right yes hi I'm Matt

00:46:55,530 --> 00:47:03,450
obokata and I'm a PHP unsalted Meili I'm

00:47:01,560 --> 00:47:05,400
at Mateus several times he helps

00:47:03,450 --> 00:47:08,609
organize in the PHP day conference and

00:47:05,400 --> 00:47:10,410
in Italy and he likes PDO and he likes

00:47:08,609 --> 00:47:13,730
using newer fangled

00:47:10,410 --> 00:47:18,650
operators in his

00:47:13,730 --> 00:47:20,359
in his escrow statements so in the last

00:47:18,650 --> 00:47:22,190
few years relational databases like

00:47:20,359 --> 00:47:25,790
Moscow and poster school have all that

00:47:22,190 --> 00:47:27,230
Jason Carnival stall things in order to

00:47:25,790 --> 00:47:29,839
get along with the times where you have

00:47:27,230 --> 00:47:32,210
like document data source like how to be

00:47:29,839 --> 00:47:34,849
among a tree for example and the way how

00:47:32,210 --> 00:47:37,460
they implement all this interesting new

00:47:34,849 --> 00:47:39,049
features is by introducing new operators

00:47:37,460 --> 00:47:43,040
in this case it's the question mark

00:47:39,049 --> 00:47:45,380
operator now the question mark in PDO as

00:47:43,040 --> 00:47:48,559
you probably know is basically a

00:47:45,380 --> 00:47:53,319
placeholder for value so you couldn't

00:47:48,559 --> 00:47:53,319
use this SQL statement that wasn't me

00:48:03,790 --> 00:48:07,450
I don't know what happened there any

00:48:05,770 --> 00:48:10,780
case I'll just don't continue I'll just

00:48:07,450 --> 00:48:14,250
continue talking you can't have the

00:48:10,780 --> 00:48:18,130
question mark because this is a value

00:48:14,250 --> 00:48:21,760
right it represents a value operator so

00:48:18,130 --> 00:48:24,369
you need to then you know call that

00:48:21,760 --> 00:48:26,590
escaped it to be able to use it so that

00:48:24,369 --> 00:48:30,850
is what Matteo provided the other than

00:48:26,590 --> 00:48:32,800
RFC that allows you to escape the

00:48:30,850 --> 00:48:36,690
question mark and the way how you do

00:48:32,800 --> 00:48:38,859
that is by duplicating the character now

00:48:36,690 --> 00:48:40,600
so instead of having five to one

00:48:38,859 --> 00:48:42,670
question mark II had two question marks

00:48:40,600 --> 00:48:44,980
only now that looks a bit weird because

00:48:42,670 --> 00:48:46,450
usually you'd expect things to be

00:48:44,980 --> 00:48:49,359
escaping as fashion from the villain

00:48:46,450 --> 00:48:52,660
strings but in s codes already common

00:48:49,359 --> 00:48:54,369
thing to escape operators that needs to

00:48:52,660 --> 00:48:57,310
be escaped by duplicating them so in

00:48:54,369 --> 00:49:00,609
this case instead of having a JSON call

00:48:57,310 --> 00:49:03,760
question mark through you get JSON call

00:49:00,609 --> 00:49:07,990
question mark question mark foo so it

00:49:03,760 --> 00:49:10,930
doesn't interpret that specific question

00:49:07,990 --> 00:49:12,960
mark as a placeholder for value bin

00:49:10,930 --> 00:49:14,920
instead use it as an operator

00:49:12,960 --> 00:49:18,790
okay I'm not quite sure what's going on

00:49:14,920 --> 00:49:20,560
I only have two more slides so the last

00:49:18,790 --> 00:49:22,150
slides I can just talk about is the

00:49:20,560 --> 00:49:24,910
slide is not important it's all the

00:49:22,150 --> 00:49:26,350
deprecations in PHP seven four there are

00:49:24,910 --> 00:49:29,109
a whole bunch of things that we have

00:49:26,350 --> 00:49:33,430
removed from here from the language that

00:49:29,109 --> 00:49:38,050
almost none of you use your real type is

00:49:33,430 --> 00:49:39,660
basically a synonym for double type so

00:49:38,050 --> 00:49:41,440
we don't need us anymore there are some

00:49:39,660 --> 00:49:44,109
constants that are not there anymore

00:49:41,440 --> 00:49:47,590
that's the filter sanitized magic closed

00:49:44,109 --> 00:49:50,109
filter hopefully none of you even know

00:49:47,590 --> 00:49:52,750
what is anymore there's some other codes

00:49:50,109 --> 00:49:57,250
that still made use of magic quotes yeah

00:49:52,750 --> 00:49:59,770
that's been removed PHP 5 for a decade

00:49:57,250 --> 00:50:02,980
or something ago and a whole bunch of

00:49:59,770 --> 00:50:05,080
other things that none of you really use

00:50:02,980 --> 00:50:08,590
very much or we couldn't really find any

00:50:05,080 --> 00:50:10,960
evidence for for people still using it's

00:50:08,590 --> 00:50:13,900
still flashing like no signal linked I

00:50:10,960 --> 00:50:16,780
mean distracting me I don't know it's

00:50:13,900 --> 00:50:17,890
definitely plugged in so yeah these

00:50:16,780 --> 00:50:20,799
things are removed

00:50:17,890 --> 00:50:24,160
I wasn't going to all of them one by one

00:50:20,799 --> 00:50:26,140
anyway and that I have looked at the

00:50:24,160 --> 00:50:27,789
slides when they get published to find

00:50:26,140 --> 00:50:29,910
out whether these things affect you or

00:50:27,789 --> 00:50:29,910

YouTube URL: https://www.youtube.com/watch?v=e8rBPAzxnEM


