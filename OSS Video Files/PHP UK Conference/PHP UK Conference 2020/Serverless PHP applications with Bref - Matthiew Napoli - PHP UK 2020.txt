Title: Serverless PHP applications with Bref - Matthiew Napoli - PHP UK 2020
Publication date: 2020-03-11
Playlist: PHP UK Conference 2020
Description: 
	Running PHP used to be as simple as copying files onto a shared host via FTP. What if we could get back to something that simple, but gain in security, performances and scalability as well? Letâ€™s deploy PHP on AWS Lambda using Bref, an open-source solution for building serverless PHP applications.
Captions: 
	00:00:02,780 --> 00:00:10,370
okay I want to start with PHP the very

00:00:06,890 --> 00:00:13,250
old logo of PHP which was created not

00:00:10,370 --> 00:00:16,550
the logo PHP was created about 25 years

00:00:13,250 --> 00:00:18,949
ago and I'm not going to do the whole

00:00:16,550 --> 00:00:22,150
story but there is one thing I really

00:00:18,949 --> 00:00:24,789
like about it is that at the time

00:00:22,150 --> 00:00:28,849
creating a website or a web application

00:00:24,789 --> 00:00:32,090
meant you had to do maybe C code or it

00:00:28,849 --> 00:00:36,740
was really complex and PHP arrived and

00:00:32,090 --> 00:00:38,450
it made the web the web accessible and I

00:00:36,740 --> 00:00:42,080
think this is really amazing being able

00:00:38,450 --> 00:00:45,050
to start as a loan developer to start as

00:00:42,080 --> 00:00:48,470
a small web web agency and create stuff

00:00:45,050 --> 00:00:51,260
and I am really really passionate about

00:00:48,470 --> 00:00:53,270
service and I talk about it because I

00:00:51,260 --> 00:00:56,000
think I see the same thing happening

00:00:53,270 --> 00:00:58,130
today it's so hard to create web

00:00:56,000 --> 00:01:00,080
application and host it in a proper

00:00:58,130 --> 00:01:02,390
secure way something that can maybe

00:01:00,080 --> 00:01:05,140
scale or something that those look

00:01:02,390 --> 00:01:07,870
actually decent and with several s

00:01:05,140 --> 00:01:10,880
finally the web is accessible again

00:01:07,870 --> 00:01:13,340
so let's look into that

00:01:10,880 --> 00:01:17,060
my name is Mathieu Nepali I'm French I

00:01:13,340 --> 00:01:19,940
come from Leo and I've been working with

00:01:17,060 --> 00:01:22,820
PHP for a long time now of 10 years

00:01:19,940 --> 00:01:26,000
about 10 years I've been working on some

00:01:22,820 --> 00:01:28,580
open source projects like PHP di silly

00:01:26,000 --> 00:01:31,400
couscous breath which I will mention in

00:01:28,580 --> 00:01:36,620
the talk I've worked also on some

00:01:31,400 --> 00:01:38,600
standards like PSR 1115 and 17 and yeah

00:01:36,620 --> 00:01:42,500
this is my twitter handle if you want to

00:01:38,600 --> 00:01:45,650
tweet some slides so anyway we've talked

00:01:42,500 --> 00:01:48,470
about why serve less but what actually

00:01:45,650 --> 00:01:53,049
is service and I find this is a concept

00:01:48,470 --> 00:01:56,570
that is can it can be hard to understand

00:01:53,049 --> 00:01:58,670
service is not a technology there is

00:01:56,570 --> 00:02:00,979
definitely technology behind that but

00:01:58,670 --> 00:02:02,930
service is an approach it's an approach

00:02:00,979 --> 00:02:05,540
not where there are no servers

00:02:02,930 --> 00:02:06,950
obviously there are but it's an approach

00:02:05,540 --> 00:02:09,920
where you don't think about them you

00:02:06,950 --> 00:02:12,380
don't manage them and the way I like to

00:02:09,920 --> 00:02:15,170
explain it is to look at how we run

00:02:12,380 --> 00:02:16,190
applications today today if we want to

00:02:15,170 --> 00:02:19,970
host an application

00:02:16,190 --> 00:02:23,210
we think with resources a server how

00:02:19,970 --> 00:02:27,050
much RAM do we need how many CPUs we

00:02:23,210 --> 00:02:30,410
think with disk space and and we use we

00:02:27,050 --> 00:02:33,770
buy rent provision those resources we

00:02:30,410 --> 00:02:35,810
have to monitor them scale them moving

00:02:33,770 --> 00:02:42,110
to server less is moving from resources

00:02:35,810 --> 00:02:44,060
to services so with a service the job

00:02:42,110 --> 00:02:46,340
gets done and you don't really care how

00:02:44,060 --> 00:02:49,400
I'm it's always interesting to know how

00:02:46,340 --> 00:02:51,580
but that's not your job anymore so let

00:02:49,400 --> 00:02:54,470
me give you a few example to illustrate

00:02:51,580 --> 00:02:58,790
storage as a service is a very good

00:02:54,470 --> 00:03:02,620
example instead of behind disk with a

00:02:58,790 --> 00:03:04,850
specific amount I can use Amazon s3 or

00:03:02,620 --> 00:03:06,620
something similar in another cloud

00:03:04,850 --> 00:03:09,080
provider and that's it

00:03:06,620 --> 00:03:11,290
who has used Amazon s3 before raise your

00:03:09,080 --> 00:03:14,180
hand okay so you've done several s

00:03:11,290 --> 00:03:16,550
congratulation you don't deal with the

00:03:14,180 --> 00:03:19,070
disk you don't monitor it that's amazing

00:03:16,550 --> 00:03:21,650
stuff and they scale it and the great

00:03:19,070 --> 00:03:23,510
thing as well is that you don't pay for

00:03:21,650 --> 00:03:27,290
the whole disk you just pay for whatever

00:03:23,510 --> 00:03:29,630
you send to Amazon the backups are there

00:03:27,290 --> 00:03:30,950
program but you have any services like

00:03:29,630 --> 00:03:32,450
that and you have more and more every

00:03:30,950 --> 00:03:36,770
day you have database as a service like

00:03:32,450 --> 00:03:40,370
firebase fire store you have dynamodb

00:03:36,770 --> 00:03:42,440
Amazon and you we start to see like my

00:03:40,370 --> 00:03:43,520
sequel and post critic well as a service

00:03:42,440 --> 00:03:46,519
as well

00:03:43,520 --> 00:03:49,300
it's not completely service yet but it's

00:03:46,519 --> 00:03:51,200
really interesting caching as a service

00:03:49,300 --> 00:03:53,330
authentication as a service like old

00:03:51,200 --> 00:03:55,160
zero is a good example where you just

00:03:53,330 --> 00:03:58,160
delegate authentication to an external

00:03:55,160 --> 00:04:00,019
service or Amazon Cognito as well search

00:03:58,160 --> 00:04:03,140
as a service instead of setting up

00:04:00,019 --> 00:04:06,769
elastic search you can use Algeria for

00:04:03,140 --> 00:04:08,390
example for your search and the idea

00:04:06,769 --> 00:04:10,970
behind all of that and behind the

00:04:08,390 --> 00:04:14,230
service approach is that you have less

00:04:10,970 --> 00:04:16,760
to do you have new things to do new

00:04:14,230 --> 00:04:19,489
technologies to understand so it's not

00:04:16,760 --> 00:04:21,440
magical but you have less things to do

00:04:19,489 --> 00:04:23,390
when the long term promise is that you

00:04:21,440 --> 00:04:26,419
can do less of the infrastructure and

00:04:23,390 --> 00:04:29,810
more of the development you can scale

00:04:26,419 --> 00:04:32,210
more easily because Amazon

00:04:29,810 --> 00:04:35,830
and Microsoft and Google they are really

00:04:32,210 --> 00:04:39,260
good at scaling and at least me I'm not

00:04:35,830 --> 00:04:43,970
and you pay usually you pay for what you

00:04:39,260 --> 00:04:45,350
use this is not always the case but most

00:04:43,970 --> 00:04:46,430
of the time you pay for what you use and

00:04:45,350 --> 00:04:49,540
that's really interesting because

00:04:46,430 --> 00:04:52,040
instead of over-provisioning stuff well

00:04:49,540 --> 00:04:54,800
you pay exactly for what you need and

00:04:52,040 --> 00:04:56,210
you can save some money sometimes so

00:04:54,800 --> 00:04:59,510
this is great but I guess you're

00:04:56,210 --> 00:05:02,180
thinking like okay but where is PHP in

00:04:59,510 --> 00:05:04,190
all of that there is one service that is

00:05:02,180 --> 00:05:08,300
really interesting to us developers and

00:05:04,190 --> 00:05:12,790
that is function as a service this is a

00:05:08,300 --> 00:05:15,950
service where you send code and it runs

00:05:12,790 --> 00:05:17,630
so let me give you an example because

00:05:15,950 --> 00:05:22,010
the term function is a bit confusing

00:05:17,630 --> 00:05:23,870
maybe this is an example of two

00:05:22,010 --> 00:05:26,540
functions in Python and JavaScript of

00:05:23,870 --> 00:05:29,919
what you can do on AWS lambda for

00:05:26,540 --> 00:05:33,880
example so these are functions you have

00:05:29,919 --> 00:05:37,130
a function that takes an event object

00:05:33,880 --> 00:05:38,990
the event is what triggered the function

00:05:37,130 --> 00:05:41,690
and you can do whatever you want

00:05:38,990 --> 00:05:45,280
query a database process some stuffs and

00:05:41,690 --> 00:05:48,289
emails and then you can return a result

00:05:45,280 --> 00:05:50,990
so the first time I've seen that was

00:05:48,289 --> 00:05:53,570
like two years ago I was like that's

00:05:50,990 --> 00:05:55,070
great but what do I do with that where

00:05:53,570 --> 00:05:57,440
do I go because I don't really care

00:05:55,070 --> 00:05:59,840
about doing a crazy even driven

00:05:57,440 --> 00:06:03,380
architectures with everything I just

00:05:59,840 --> 00:06:07,280
want to build the website and an API but

00:06:03,380 --> 00:06:10,450
the thing is that an event and even

00:06:07,280 --> 00:06:13,400
driven architecture isn't that exotic

00:06:10,450 --> 00:06:17,210
HTTP applications are even driven the

00:06:13,400 --> 00:06:19,310
event is the request chrome tasks are

00:06:17,210 --> 00:06:21,380
even driven because it's like every day

00:06:19,310 --> 00:06:24,260
I mean at midnight run this piece of

00:06:21,380 --> 00:06:26,990
code this is an event messages in a

00:06:24,260 --> 00:06:28,070
message queue are even driven because

00:06:26,990 --> 00:06:30,130
whenever there's a message in the

00:06:28,070 --> 00:06:35,320
message queue we need to run some code

00:06:30,130 --> 00:06:39,140
so moving to service isn't that hard and

00:06:35,320 --> 00:06:41,690
yeah this is to illustrate to transition

00:06:39,140 --> 00:06:42,900
to service so let's say we have a piece

00:06:41,690 --> 00:06:45,270
of code the blue

00:06:42,900 --> 00:06:47,639
squarely blue bar and we have an event

00:06:45,270 --> 00:06:49,350
or request the green arrow the green

00:06:47,639 --> 00:06:51,810
arrow the request will trigger the

00:06:49,350 --> 00:06:54,300
execution of the code but if you don't

00:06:51,810 --> 00:06:56,190
do several s what you usually have as an

00:06:54,300 --> 00:06:58,800
architect as an infra infrastructure is

00:06:56,190 --> 00:07:01,199
something like this where the large blue

00:06:58,800 --> 00:07:04,530
bar here is the webserver

00:07:01,199 --> 00:07:07,770
it's the demon running waiting for

00:07:04,530 --> 00:07:12,479
requests that's how it runs with apache

00:07:07,770 --> 00:07:14,729
or nginx or any go python node java

00:07:12,479 --> 00:07:18,360
application in those languages you start

00:07:14,729 --> 00:07:22,350
the process and it keeps alive in memory

00:07:18,360 --> 00:07:24,330
and it waits for requests PHP is a bit

00:07:22,350 --> 00:07:27,150
different but if you run workers in PHP

00:07:24,330 --> 00:07:29,160
you start to work a process and it waits

00:07:27,150 --> 00:07:31,260
for messages in the queue and then

00:07:29,160 --> 00:07:33,479
whenever there's an event request a

00:07:31,260 --> 00:07:36,300
message it will run yo code your

00:07:33,479 --> 00:07:39,930
controller your job handler your chrome

00:07:36,300 --> 00:07:42,360
task your CI come on whatever so moving

00:07:39,930 --> 00:07:47,370
to server less is actually moving from

00:07:42,360 --> 00:07:50,729
that to that we don't deal with Apache

00:07:47,370 --> 00:07:54,349
with nginx we don't write demons we

00:07:50,729 --> 00:07:57,210
don't write anything that waits pools

00:07:54,349 --> 00:08:03,750
yeah stuff like this we just write the

00:07:57,210 --> 00:08:06,750
code that reacts to the event and again

00:08:03,750 --> 00:08:09,360
if you're not doing PHP that means your

00:08:06,750 --> 00:08:10,860
application needs to change a little if

00:08:09,360 --> 00:08:13,320
you take a JavaScript a node application

00:08:10,860 --> 00:08:16,470
where you can share variables in memory

00:08:13,320 --> 00:08:19,470
inside the server process this is a bit

00:08:16,470 --> 00:08:21,479
of a change but with PHP it's

00:08:19,470 --> 00:08:23,909
interesting because we've always always

00:08:21,479 --> 00:08:27,180
worked like that for the web

00:08:23,909 --> 00:08:29,460
we have Apache or nginx and we have like

00:08:27,180 --> 00:08:32,520
PHP fpm and whenever there's a request

00:08:29,460 --> 00:08:36,690
there's a new process handles the

00:08:32,520 --> 00:08:38,940
request and then it dies so this is

00:08:36,690 --> 00:08:45,300
really interesting to me it means that

00:08:38,940 --> 00:08:47,940
PHP is perfect for service so let's have

00:08:45,300 --> 00:08:51,150
a look at what happens in reality like

00:08:47,940 --> 00:08:54,000
how does it work run first your write

00:08:51,150 --> 00:08:56,430
your code then you put it into a zip

00:08:54,000 --> 00:08:58,920
file you can use tools obviously

00:08:56,430 --> 00:09:05,040
and you have upload that to Amazon

00:08:58,920 --> 00:09:08,040
lambda for example great but what

00:09:05,040 --> 00:09:11,250
happens then the great thing is that

00:09:08,040 --> 00:09:14,839
nothing happens the code is not deployed

00:09:11,250 --> 00:09:17,430
anywhere you don't pay for anything

00:09:14,839 --> 00:09:20,100
until the first request or the first

00:09:17,430 --> 00:09:23,970
even comes in nothing is running and

00:09:20,100 --> 00:09:27,110
then first request so I would say Amazon

00:09:23,970 --> 00:09:31,220
do this applies to any fast provider

00:09:27,110 --> 00:09:34,200
Amazon will boot some kind of container

00:09:31,220 --> 00:09:38,480
like a Linux environment from scratch

00:09:34,200 --> 00:09:41,339
and inside that it will run your code

00:09:38,480 --> 00:09:43,380
the index that PHP could be any language

00:09:41,339 --> 00:09:44,940
doesn't really matter your code will

00:09:43,380 --> 00:09:49,020
return a response or will generate

00:09:44,940 --> 00:09:50,790
whatever result we need and that's the

00:09:49,020 --> 00:09:55,380
Kali stop the container container is

00:09:50,790 --> 00:09:57,300
frozen and that's it for optimization

00:09:55,380 --> 00:09:59,459
instead of booting processes all the

00:09:57,300 --> 00:10:01,440
time Amazon will keep the processor live

00:09:59,459 --> 00:10:05,040
and the container alive for about 10

00:10:01,440 --> 00:10:06,630
minutes before shutting it down but what

00:10:05,040 --> 00:10:09,870
you need to understand is that all those

00:10:06,630 --> 00:10:10,380
containers are can be thrown away at any

00:10:09,870 --> 00:10:14,250
time

00:10:10,380 --> 00:10:16,500
you can't configure the 10 minutes so

00:10:14,250 --> 00:10:18,290
that's great but what if there is a

00:10:16,500 --> 00:10:20,730
second request

00:10:18,290 --> 00:10:22,860
well the container is ready it will

00:10:20,730 --> 00:10:25,350
handle the request again and return a

00:10:22,860 --> 00:10:29,370
response but what if there is a third

00:10:25,350 --> 00:10:31,050
request and this container is busy a new

00:10:29,370 --> 00:10:34,350
container will be booted on the fly and

00:10:31,050 --> 00:10:36,240
that execution model is really different

00:10:34,350 --> 00:10:39,060
from you know a little auto scaling

00:10:36,240 --> 00:10:40,980
platform here this auto scaling is at

00:10:39,060 --> 00:10:44,520
the most renewal around the request

00:10:40,980 --> 00:10:45,750
level and what's really important to

00:10:44,520 --> 00:10:48,690
understand here is that there is no

00:10:45,750 --> 00:10:50,220
concurrency inside the container your

00:10:48,690 --> 00:10:53,450
code and your container will handle

00:10:50,220 --> 00:10:57,300
exactly one even one request at a time

00:10:53,450 --> 00:10:59,370
just like PHP and that's really great

00:10:57,300 --> 00:11:02,970
because it simplifies a lot of things

00:10:59,370 --> 00:11:04,020
you can then scale up again and you

00:11:02,970 --> 00:11:07,910
don't have to do anything this is

00:11:04,020 --> 00:11:07,910
Amazon's job to create the containers

00:11:08,089 --> 00:11:12,470
containers are reused whenever there are

00:11:10,279 --> 00:11:14,360
new requests and then the container will

00:11:12,470 --> 00:11:16,699
be killed because there is no activity

00:11:14,360 --> 00:11:22,759
and later on containers can be recreated

00:11:16,699 --> 00:11:25,040
again to sum up so this is how it works

00:11:22,759 --> 00:11:27,050
to sum up if you have no requests

00:11:25,040 --> 00:11:28,759
nothing is executing you don't pay for

00:11:27,050 --> 00:11:30,800
anything if you have one request yeah

00:11:28,759 --> 00:11:33,800
one container and you call this running

00:11:30,800 --> 00:11:36,019
once if you have 1,000 requests at the

00:11:33,800 --> 00:11:40,610
same time at the same exact millisecond

00:11:36,019 --> 00:11:42,649
you have 1,000 containers each container

00:11:40,610 --> 00:11:44,509
is completely isolated from the rest it

00:11:42,649 --> 00:11:47,870
can run at the other side of the planet

00:11:44,509 --> 00:11:50,540
that's fine and this is what makes this

00:11:47,870 --> 00:11:53,600
so scalable because we are only limited

00:11:50,540 --> 00:11:58,100
by the number of servers at Amazon so we

00:11:53,600 --> 00:12:04,430
are good again it looks a lot like PHP I

00:11:58,100 --> 00:12:07,279
know now how much do you pay you have

00:12:04,430 --> 00:12:09,199
five minutes now to give you an idea

00:12:07,279 --> 00:12:11,149
better idea of how much you will pay

00:12:09,199 --> 00:12:12,470
with lambda because this is the formula

00:12:11,149 --> 00:12:16,189
and it's it's not really easy to

00:12:12,470 --> 00:12:17,870
understand let's take this example let's

00:12:16,189 --> 00:12:19,699
say this is website you get a bit of

00:12:17,870 --> 00:12:22,279
traffic so during the night here at

00:12:19,699 --> 00:12:24,050
first there is not really there is no

00:12:22,279 --> 00:12:26,420
traffic on the website it's really quiet

00:12:24,050 --> 00:12:31,819
then there's a slight peak at 8:00 a.m.

00:12:26,420 --> 00:12:36,949
and the large traffic spike is at 9:00

00:12:31,819 --> 00:12:39,230
p.m. so at 9:00 p.m. I mean you wouldn't

00:12:36,949 --> 00:12:43,009
want to use a server that can handle the

00:12:39,230 --> 00:12:44,300
traffic at 9:00 p.m. right so we you

00:12:43,009 --> 00:12:46,339
will buy and set up a server for that

00:12:44,300 --> 00:12:49,249
and at 9:00 p.m.

00:12:46,339 --> 00:12:52,309
everything is perfect you have the

00:12:49,249 --> 00:12:57,709
perfect setup but at any other time of

00:12:52,309 --> 00:13:00,110
the day you have too much resources so

00:12:57,709 --> 00:13:02,420
if you were to use server less and

00:13:00,110 --> 00:13:04,819
function as a service you would pay only

00:13:02,420 --> 00:13:08,420
for something proportional to the green

00:13:04,819 --> 00:13:09,949
area if you are not using service you

00:13:08,420 --> 00:13:13,639
would pay something proportional to the

00:13:09,949 --> 00:13:17,509
green plus the blue area for the whole

00:13:13,639 --> 00:13:20,420
box so what I'm saying here is that look

00:13:17,509 --> 00:13:24,230
at your application in production

00:13:20,420 --> 00:13:27,139
and basically the more blue you have the

00:13:24,230 --> 00:13:30,139
more resources you are wasting the more

00:13:27,139 --> 00:13:32,389
blue you have the more money you are

00:13:30,139 --> 00:13:34,220
wasting and the more blue you have the

00:13:32,389 --> 00:13:37,610
more you could save by moving to service

00:13:34,220 --> 00:13:40,760
of course it really depends on the

00:13:37,610 --> 00:13:43,339
application some applications really

00:13:40,760 --> 00:13:45,290
match your applications with very fine

00:13:43,339 --> 00:13:50,180
auto scaling they don't have a lot of

00:13:45,290 --> 00:13:51,740
blue that's fine but some do some some

00:13:50,180 --> 00:13:54,709
kind of applications have a lot of blue

00:13:51,740 --> 00:13:58,880
like workers batch processes were

00:13:54,709 --> 00:14:00,260
running during the night cron tasks this

00:13:58,880 --> 00:14:04,610
is really interesting because you can

00:14:00,260 --> 00:14:06,620
run tasks with a very a lot of resources

00:14:04,610 --> 00:14:08,899
for a very short time and you don't have

00:14:06,620 --> 00:14:10,810
to provision containers or whatever and

00:14:08,899 --> 00:14:16,190
deal with auto scaling it's done for you

00:14:10,810 --> 00:14:17,930
so to sum up you manage less stuff you

00:14:16,190 --> 00:14:19,040
don't deal with the physical servers you

00:14:17,930 --> 00:14:21,889
don't deal with the Linux environment

00:14:19,040 --> 00:14:24,139
you can't configure that you don't deal

00:14:21,889 --> 00:14:27,890
with the Apache or nginx configuration

00:14:24,139 --> 00:14:31,730
and routing you don't even configure for

00:14:27,890 --> 00:14:36,350
example PHP fpm there are so many things

00:14:31,730 --> 00:14:38,600
that you do less of course again there

00:14:36,350 --> 00:14:42,350
are new things and this can trip you up

00:14:38,600 --> 00:14:44,449
at first but promise is it gets much

00:14:42,350 --> 00:14:45,980
easier you can scale more easily because

00:14:44,449 --> 00:14:47,720
of the execution model which is

00:14:45,980 --> 00:14:49,550
stateless which means there is not in

00:14:47,720 --> 00:14:53,600
currency and you pay for what you use

00:14:49,550 --> 00:14:56,870
which can save you sometimes money I've

00:14:53,600 --> 00:15:00,040
talked about Amazon lambda AWS lambda

00:14:56,870 --> 00:15:03,199
but there are many providers out there

00:15:00,040 --> 00:15:06,500
there is I am running Apache open wisk

00:15:03,199 --> 00:15:10,610
you have Microsoft aja functions Google

00:15:06,500 --> 00:15:14,180
Cloud functions some are based in terms

00:15:10,610 --> 00:15:16,370
of technology on docker containers most

00:15:14,180 --> 00:15:18,970
of them are not like here there's only

00:15:16,370 --> 00:15:21,470
open whisk which is based on containers

00:15:18,970 --> 00:15:24,769
the major providers like Amazon

00:15:21,470 --> 00:15:27,150
Microsoft and Google are using closed

00:15:24,769 --> 00:15:30,200
technology

00:15:27,150 --> 00:15:33,150
but then you have a Linux environment so

00:15:30,200 --> 00:15:34,950
in every month you have a new provider

00:15:33,150 --> 00:15:38,610
that comes out so there's a lot of

00:15:34,950 --> 00:15:40,740
choice if you want to get started my

00:15:38,610 --> 00:15:41,730
personal recommendation is to start with

00:15:40,740 --> 00:15:44,610
Amazon Anandi

00:15:41,730 --> 00:15:46,620
this is the provider which is the like

00:15:44,610 --> 00:15:48,500
the most popular one so this is the one

00:15:46,620 --> 00:15:53,810
where you will find the most resources

00:15:48,500 --> 00:15:58,350
the most help online and the one with

00:15:53,810 --> 00:16:00,570
like reliable and good performances

00:15:58,350 --> 00:16:05,790
compared to for example Microsoft and

00:16:00,570 --> 00:16:06,890
Google cloud functions but there is one

00:16:05,790 --> 00:16:10,970
funny thing here

00:16:06,890 --> 00:16:14,490
Amazon lambda does not support PHP and

00:16:10,970 --> 00:16:17,930
this is a bit ironic because again PHP

00:16:14,490 --> 00:16:24,120
is perfect here but no support for PHP

00:16:17,930 --> 00:16:28,050
so that's fine since November 2018 we

00:16:24,120 --> 00:16:29,940
can create our own custom runtime it's

00:16:28,050 --> 00:16:32,370
like a docker image basically you can

00:16:29,940 --> 00:16:37,920
create like add support to any language

00:16:32,370 --> 00:16:40,620
you want on lambda to do is do that you

00:16:37,920 --> 00:16:42,810
can download PHP sources compiled them

00:16:40,620 --> 00:16:45,360
for the specific Linux version running

00:16:42,810 --> 00:16:47,310
on lambda you can add the extensions you

00:16:45,360 --> 00:16:49,620
won't compile them at the system

00:16:47,310 --> 00:16:51,480
libraries writes the specific boot

00:16:49,620 --> 00:16:54,330
bootstrap files and integration with

00:16:51,480 --> 00:16:56,220
Amazon lambda and everything and you

00:16:54,330 --> 00:16:59,130
probably don't want to do that you want

00:16:56,220 --> 00:17:00,930
to do less but that's fine

00:16:59,130 --> 00:17:03,690
if you want to get started there is

00:17:00,930 --> 00:17:07,199
breath breath is an open source project

00:17:03,690 --> 00:17:10,890
that brings support for PHP on Amazon

00:17:07,199 --> 00:17:13,189
lambda but breath doesn't stop there the

00:17:10,890 --> 00:17:16,020
goal of breath is actually a bit larger

00:17:13,189 --> 00:17:18,839
its goal is to give you everything that

00:17:16,020 --> 00:17:25,800
you need to create several s PHP

00:17:18,839 --> 00:17:27,780
applications and this is not just a

00:17:25,800 --> 00:17:31,020
technological problem it's not just

00:17:27,780 --> 00:17:33,480
about tooling the first thing with

00:17:31,020 --> 00:17:37,500
breath when you go into the website is

00:17:33,480 --> 00:17:39,840
that it helps you make choices which

00:17:37,500 --> 00:17:43,139
provider to use which

00:17:39,840 --> 00:17:45,720
to run PHP n whatever which tool to use

00:17:43,139 --> 00:17:48,059
to deploy how to do this how to do that

00:17:45,720 --> 00:17:50,999
pref makes a few of those choices for

00:17:48,059 --> 00:17:51,720
you what guides you so that you can get

00:17:50,999 --> 00:17:54,419
started

00:17:51,720 --> 00:17:55,049
easily of course you can then make your

00:17:54,419 --> 00:17:58,889
own choices

00:17:55,049 --> 00:18:02,129
but it helps you on that front of course

00:17:58,889 --> 00:18:04,950
it comes with documentation because

00:18:02,129 --> 00:18:06,779
again service is a bit new if you start

00:18:04,950 --> 00:18:10,169
from scratch again it's a bit

00:18:06,779 --> 00:18:14,549
intimidating and yes finally tooling

00:18:10,169 --> 00:18:16,499
like the PHP runtime for lambda but also

00:18:14,549 --> 00:18:20,460
CLI tooling to get you started

00:18:16,499 --> 00:18:23,519
easily a logger made specifically for

00:18:20,460 --> 00:18:28,350
lambda integration with frameworks and

00:18:23,519 --> 00:18:31,320
stuff like this so if you want to run

00:18:28,350 --> 00:18:34,889
PHP on lambda with breath you have three

00:18:31,320 --> 00:18:43,619
ways of doing it not just one because it

00:18:34,889 --> 00:18:46,860
would be too simple the first one the

00:18:43,619 --> 00:18:50,309
first way the first runtime is the PHP

00:18:46,860 --> 00:18:52,679
function and it looks a lot like the

00:18:50,309 --> 00:18:55,139
JavaScript example and the Python

00:18:52,679 --> 00:18:57,690
example I showed at the beginning and

00:18:55,139 --> 00:18:59,639
this is intentional the goal with this

00:18:57,690 --> 00:19:02,279
runtime is to provide something that

00:18:59,639 --> 00:19:06,059
would look like what Amazon would

00:19:02,279 --> 00:19:11,340
provide if they were to support PHP it's

00:19:06,059 --> 00:19:13,200
very like non open opinionated it's

00:19:11,340 --> 00:19:16,320
basically a function an anonymous

00:19:13,200 --> 00:19:19,679
function that takes an event and returns

00:19:16,320 --> 00:19:22,429
a result now with the latest brave

00:19:19,679 --> 00:19:25,860
version with add we've added even more

00:19:22,429 --> 00:19:28,259
tooling if you want to write workers

00:19:25,860 --> 00:19:31,559
that are triggered by message queues or

00:19:28,259 --> 00:19:34,110
even buses you can even write instead of

00:19:31,559 --> 00:19:35,909
functions object and classes this is

00:19:34,110 --> 00:19:38,700
really fun but I can't get it into those

00:19:35,909 --> 00:19:41,999
details right now but really powerful

00:19:38,700 --> 00:19:44,429
once you get started but again if you've

00:19:41,999 --> 00:19:46,080
never used several s before you don't

00:19:44,429 --> 00:19:47,940
really care about I mean that's great

00:19:46,080 --> 00:19:50,100
but what do we do how do we go from

00:19:47,940 --> 00:19:52,019
where do we go from here so that's fine

00:19:50,100 --> 00:19:52,890
if you want to get started I really

00:19:52,019 --> 00:19:56,630
recommend just

00:19:52,890 --> 00:19:59,910
with the HTTP layer the HTTP runtime

00:19:56,630 --> 00:20:03,240
that way you can run api's and websites

00:19:59,910 --> 00:20:07,380
and the great thing here is that it runs

00:20:03,240 --> 00:20:09,750
PHP fpm on lambda so your favorite

00:20:07,380 --> 00:20:13,500
application framework symphony in

00:20:09,750 --> 00:20:16,080
laravel whatever runs the same there's

00:20:13,500 --> 00:20:18,240
index dot PHP it's called that for every

00:20:16,080 --> 00:20:20,429
request you have the log at dollar past

00:20:18,240 --> 00:20:23,790
you can set others cookies whatever it

00:20:20,429 --> 00:20:28,590
works the same so that's why it's the

00:20:23,790 --> 00:20:30,510
best way to get started and finally

00:20:28,590 --> 00:20:32,850
there's a third runtime which is the

00:20:30,510 --> 00:20:35,280
console runtime it's a bit less

00:20:32,850 --> 00:20:38,309
important it's more of a tool to help

00:20:35,280 --> 00:20:40,710
you run console Symphony console

00:20:38,309 --> 00:20:44,070
commands or laravel artisan commands on

00:20:40,710 --> 00:20:46,470
nonde because you don't have SSH into

00:20:44,070 --> 00:20:49,340
lambda there's no server running so if

00:20:46,470 --> 00:20:51,120
you want to run database migrations

00:20:49,340 --> 00:20:53,760
administrative commands whatever you

00:20:51,120 --> 00:20:55,679
want this will help you you can run the

00:20:53,760 --> 00:20:57,600
same command as you run locally but run

00:20:55,679 --> 00:21:01,970
it with the bref CLI command and it will

00:20:57,600 --> 00:21:04,590
run in production or staging in lambda

00:21:01,970 --> 00:21:08,309
now this is great this is how PHP runs

00:21:04,590 --> 00:21:11,460
to deploy you can go through the UI and

00:21:08,309 --> 00:21:14,400
with the zip file method but if you've

00:21:11,460 --> 00:21:16,890
used Amazon before you probably you know

00:21:14,400 --> 00:21:19,230
that this is not the right way the AWS

00:21:16,890 --> 00:21:22,980
UI is really confusing really complex

00:21:19,230 --> 00:21:24,630
it's horrible honestly and so this is

00:21:22,980 --> 00:21:26,220
the first person the second reason that

00:21:24,630 --> 00:21:28,860
you don't want to do it manually is that

00:21:26,220 --> 00:21:30,660
you probably want to automate stuff have

00:21:28,860 --> 00:21:31,020
continuous deployment and things like

00:21:30,660 --> 00:21:34,020
this

00:21:31,020 --> 00:21:37,890
so for that breadth recommends using the

00:21:34,020 --> 00:21:42,450
7s framework if you've used oh if you

00:21:37,890 --> 00:21:46,290
know about ansible chef puppet terraform

00:21:42,450 --> 00:21:48,510
CloudFormation all those tools this is

00:21:46,290 --> 00:21:49,250
the same except it's a little bit

00:21:48,510 --> 00:21:52,429
simpler

00:21:49,250 --> 00:21:55,110
at least to me it's much simpler and

00:21:52,429 --> 00:22:00,000
it's specific for surveillance

00:21:55,110 --> 00:22:01,860
applications this is today the like the

00:22:00,000 --> 00:22:03,480
most popular tooling that you can use to

00:22:01,860 --> 00:22:06,050
create service application so that's why

00:22:03,480 --> 00:22:11,270
breath for all these reasons breath

00:22:06,050 --> 00:22:13,640
chose to use that that tool and this is

00:22:11,270 --> 00:22:15,290
also why breath doesn't deploy your

00:22:13,640 --> 00:22:16,910
project this is the service framework

00:22:15,290 --> 00:22:18,920
that does it instead of reinventing the

00:22:16,910 --> 00:22:20,900
wheel we use perfectly perfectly good

00:22:18,920 --> 00:22:23,390
software do when you set your

00:22:20,900 --> 00:22:25,880
application up and you say oh I want a

00:22:23,390 --> 00:22:31,370
database I want an HTTP API and

00:22:25,880 --> 00:22:33,530
everything is via a yam L file yeah this

00:22:31,370 --> 00:22:36,080
is a very short example so you set the

00:22:33,530 --> 00:22:39,800
name of your application at the top you

00:22:36,080 --> 00:22:41,960
say hey I want to use AWS and here I

00:22:39,800 --> 00:22:44,180
create my functions and here I'm

00:22:41,960 --> 00:22:46,190
creating a small API so I have just one

00:22:44,180 --> 00:22:48,680
function because I want to send all the

00:22:46,190 --> 00:22:51,980
requests to index dot PHP then my

00:22:48,680 --> 00:22:55,240
framework will take over so just like

00:22:51,980 --> 00:22:58,460
you would do with PHP fpm or htaccess or

00:22:55,240 --> 00:23:02,090
nginx you say the handler for all

00:22:58,460 --> 00:23:04,040
requests is indexed at PHP then you have

00:23:02,090 --> 00:23:06,290
a bit of boilerplate where you say I

00:23:04,040 --> 00:23:10,460
want to use the breadth PHP runtime and

00:23:06,290 --> 00:23:15,410
then you say I want all routes all URLs

00:23:10,460 --> 00:23:18,950
to be sent to that function and that's

00:23:15,410 --> 00:23:21,410
it if you want to get started quickly

00:23:18,950 --> 00:23:23,810
you can so breakfast a compose a package

00:23:21,410 --> 00:23:27,430
install it and run breath in it and it

00:23:23,810 --> 00:23:32,540
will it will create that file for you

00:23:27,430 --> 00:23:35,270
once that's done composer install with

00:23:32,540 --> 00:23:37,580
without the development dependencies so

00:23:35,270 --> 00:23:41,210
it's lighter and you'll run several

00:23:37,580 --> 00:23:43,430
let's deploy single commands and that's

00:23:41,210 --> 00:23:47,320
it after about one minute your service

00:23:43,430 --> 00:23:50,510
is online you get beautiful URL here

00:23:47,320 --> 00:23:53,840
this is Amazon's signature of making

00:23:50,510 --> 00:23:56,060
things really simple but it works and of

00:23:53,840 --> 00:23:58,700
course you can add your own domain in

00:23:56,060 --> 00:24:01,070
front of that so if you're writing like

00:23:58,700 --> 00:24:03,410
a way book that you want to put into

00:24:01,070 --> 00:24:05,480
somewhere you don't really care too ugly

00:24:03,410 --> 00:24:08,240
URL that's fine if you want to build a

00:24:05,480 --> 00:24:13,460
proper API or website you can put a

00:24:08,240 --> 00:24:16,400
domain name now I've mentioned it but

00:24:13,460 --> 00:24:19,310
yes you can run symphony you can run

00:24:16,400 --> 00:24:19,940
laravel you can run your favorite

00:24:19,310 --> 00:24:23,059
framework

00:24:19,940 --> 00:24:25,699
on lambda but there are a few things to

00:24:23,059 --> 00:24:29,809
consider this framework will run fine

00:24:25,699 --> 00:24:33,169
except that you are now running in a

00:24:29,809 --> 00:24:34,969
distributed environment so I'm not

00:24:33,169 --> 00:24:38,839
talking about vendor Loki

00:24:34,969 --> 00:24:41,539
looking here it's still classic PHP

00:24:38,839 --> 00:24:43,669
application but just like if you were to

00:24:41,539 --> 00:24:46,639
deploy on many containers that could do

00:24:43,669 --> 00:24:50,479
talk scale with lambda you don't for

00:24:46,639 --> 00:24:52,249
example write logs on disk because if

00:24:50,479 --> 00:24:55,519
the container is destroyed you lose the

00:24:52,249 --> 00:24:58,339
logs same with the sessions so all those

00:24:55,519 --> 00:25:00,579
problems that can get with a distributed

00:24:58,339 --> 00:25:02,779
application you will get them here

00:25:00,579 --> 00:25:04,819
fortunately it's not that hard with the

00:25:02,779 --> 00:25:07,909
frameworks if you want to send the logs

00:25:04,819 --> 00:25:10,099
for symphonia laravel into you want to

00:25:07,909 --> 00:25:13,309
send them to the standard error output

00:25:10,099 --> 00:25:15,169
just like in containers and then they

00:25:13,309 --> 00:25:17,539
will all be centralized into a system

00:25:15,169 --> 00:25:19,489
that's usually an environment variable

00:25:17,539 --> 00:25:21,440
or a configuration line that you set

00:25:19,489 --> 00:25:24,039
same with the sessions you can store

00:25:21,440 --> 00:25:26,839
them in database in Redis in cookies

00:25:24,039 --> 00:25:31,069
whichever you want

00:25:26,839 --> 00:25:34,459
we have guides on the ref website and a

00:25:31,069 --> 00:25:36,559
few examples as well but yeah that's you

00:25:34,459 --> 00:25:39,319
have to be aware that you need to

00:25:36,559 --> 00:25:44,959
configure a few things mostly block

00:25:39,319 --> 00:25:49,399
cookies sessions and I think that's most

00:25:44,959 --> 00:25:51,049
basic part now I just want to take a

00:25:49,399 --> 00:25:54,079
moment to talk about performances

00:25:51,049 --> 00:25:56,089
because I'm sure when I show you before

00:25:54,079 --> 00:25:59,239
how like the execution model of lambda

00:25:56,089 --> 00:26:01,309
you were all thinking about how how does

00:25:59,239 --> 00:26:05,649
it work in terms of response time in

00:26:01,309 --> 00:26:07,849
performances so let's cover that first

00:26:05,649 --> 00:26:10,219
you need to be aware that when you

00:26:07,849 --> 00:26:12,469
deploy to lambda you can choose certain

00:26:10,219 --> 00:26:16,309
amount of memory for your application

00:26:12,469 --> 00:26:18,079
and the more memory you have just like

00:26:16,309 --> 00:26:20,179
if you were to choose a digital ocean

00:26:18,079 --> 00:26:24,829
server the more memory you have the more

00:26:20,179 --> 00:26:28,009
powerful the CPU is you can have very

00:26:24,829 --> 00:26:32,469
small lambdas like 100 megabytes of RAM

00:26:28,009 --> 00:26:32,469
but those are really slow

00:26:32,590 --> 00:26:37,630
if you have more RAM you have the more

00:26:34,690 --> 00:26:41,350
powerful CPU and your code runs much

00:26:37,630 --> 00:26:44,260
faster the one here the one gigabyte

00:26:41,350 --> 00:26:46,450
lambda is the one you want to use by

00:26:44,260 --> 00:26:49,480
default it's the one that has the about

00:26:46,450 --> 00:26:52,630
the same performances as any server like

00:26:49,480 --> 00:26:54,310
the standard server fortunately this is

00:26:52,630 --> 00:26:56,920
a default with pref and the 7s framework

00:26:54,310 --> 00:26:59,500
so you don't have anything to do but be

00:26:56,920 --> 00:27:02,290
careful if you try out lambda manually

00:26:59,500 --> 00:27:04,810
and hear about that a lot lambda by

00:27:02,290 --> 00:27:06,790
default may give you the smaller lambda

00:27:04,810 --> 00:27:08,830
and you may be thinking I don't need one

00:27:06,790 --> 00:27:10,240
gigabyte of memory I will use less but

00:27:08,830 --> 00:27:15,250
then it's really slow and you don't

00:27:10,240 --> 00:27:18,660
understand why and that's confusing the

00:27:15,250 --> 00:27:21,370
larger lambdas are actually quite fast

00:27:18,660 --> 00:27:23,560
this so this is you can trade yourself

00:27:21,370 --> 00:27:25,600
on your computer this is the bench dot

00:27:23,560 --> 00:27:28,180
PHP file this is a fight that is inside

00:27:25,600 --> 00:27:33,220
the PHP code sauce and it benchmarks the

00:27:28,180 --> 00:27:37,810
CPU operations when I ran it on my

00:27:33,220 --> 00:27:39,940
computer I'm about 0.5 or 6 seconds so I

00:27:37,810 --> 00:27:44,890
guess you can have pretty good CPUs in

00:27:39,940 --> 00:27:48,070
lambda obviously the more powerful is

00:27:44,890 --> 00:27:51,970
the more expensive now if we look at

00:27:48,070 --> 00:27:55,300
response times we need to separate two

00:27:51,970 --> 00:27:57,640
things first one is the warm response

00:27:55,300 --> 00:28:00,490
time when the container is booted ready

00:27:57,640 --> 00:28:03,040
to handle requests and the second one is

00:28:00,490 --> 00:28:06,130
the cold response time when the

00:28:03,040 --> 00:28:09,550
container is booting from scratch with

00:28:06,130 --> 00:28:12,610
the one response time so this is a PHP

00:28:09,550 --> 00:28:15,040
hello world symphony hello world both

00:28:12,610 --> 00:28:17,590
should be about zero millisecond or so

00:28:15,040 --> 00:28:20,230
be careful with the small lambda you

00:28:17,590 --> 00:28:24,850
don't have really good numbers but with

00:28:20,230 --> 00:28:27,190
larger lambdas it's okay you get about

00:28:24,850 --> 00:28:29,230
one millisecond or four milliseconds for

00:28:27,190 --> 00:28:31,720
symphony of overhead it's like the time

00:28:29,230 --> 00:28:35,020
for Symphony to boot and you get the

00:28:31,720 --> 00:28:37,480
same numbers if you run PHP or symphony

00:28:35,020 --> 00:28:40,740
on digital ocean or ec2 or whichever

00:28:37,480 --> 00:28:44,140
server so this is great that means that

00:28:40,740 --> 00:28:45,620
for one response time we've got the same

00:28:44,140 --> 00:28:49,610
performances then on

00:28:45,620 --> 00:28:52,450
platform but obviously there are the

00:28:49,610 --> 00:28:56,930
cold response time you cold starts and

00:28:52,450 --> 00:28:59,420
those are about 250 milliseconds they

00:28:56,930 --> 00:29:07,450
can be even more depending on how large

00:28:59,420 --> 00:29:10,309
your application is so obviously

00:29:07,450 --> 00:29:13,130
depending on your use case this can be a

00:29:10,309 --> 00:29:15,050
deal-breaker and that's fine that's fine

00:29:13,130 --> 00:29:18,650
if it's if it's not a good fit for your

00:29:15,050 --> 00:29:22,000
application don't use it but this is

00:29:18,650 --> 00:29:27,260
interesting to put that into perspective

00:29:22,000 --> 00:29:29,420
take any website refresh it open the

00:29:27,260 --> 00:29:31,850
developer toolbox and see how long it

00:29:29,420 --> 00:29:35,270
takes to load completely most of the

00:29:31,850 --> 00:29:39,920
time it's 20 seconds 30 seconds to load

00:29:35,270 --> 00:29:42,380
all the assets and render everything you

00:29:39,920 --> 00:29:46,160
need to put things into perspective you

00:29:42,380 --> 00:29:49,010
get a cool start about 0.5 percent of

00:29:46,160 --> 00:29:50,750
the time in an application that received

00:29:49,010 --> 00:29:53,740
some traffic where containers are

00:29:50,750 --> 00:29:56,510
usually live and responding to requests

00:29:53,740 --> 00:29:57,040
so this doesn't happen a lot but it can

00:29:56,510 --> 00:29:59,420
happen

00:29:57,040 --> 00:30:01,610
another thing to consider as well is

00:29:59,420 --> 00:30:06,460
let's say you have a website where you

00:30:01,610 --> 00:30:09,530
sell concert tickets and at midnight

00:30:06,460 --> 00:30:12,170
there's a sale that will open everybody

00:30:09,530 --> 00:30:14,750
rushes onto the website at midnight and

00:30:12,170 --> 00:30:16,700
with your server set up you don't get

00:30:14,750 --> 00:30:19,940
caught that's great but whenever your

00:30:16,700 --> 00:30:21,830
server is overloaded you get much much

00:30:19,940 --> 00:30:25,160
worse response time than that you can

00:30:21,830 --> 00:30:27,679
you can at least hear the promise is you

00:30:25,160 --> 00:30:30,260
never have server slow down because each

00:30:27,679 --> 00:30:34,010
container is isolated and that's the

00:30:30,260 --> 00:30:35,300
worst that you can get so again

00:30:34,010 --> 00:30:37,250
depending on the application this is a

00:30:35,300 --> 00:30:41,000
really good deal this is the worst that

00:30:37,250 --> 00:30:44,179
you can get now if you really want to

00:30:41,000 --> 00:30:47,420
use Rhonda and you you are worried about

00:30:44,179 --> 00:30:49,429
that you can also provision instances so

00:30:47,420 --> 00:30:51,679
you can provision containers like say I

00:30:49,429 --> 00:30:54,440
want always to have 10 containers alive

00:30:51,679 --> 00:30:56,690
and they will they will always be warm

00:30:54,440 --> 00:30:58,920
you pay for that obviously but that's

00:30:56,690 --> 00:31:03,510
possible you can even

00:30:58,920 --> 00:31:04,980
provision with like different parameters

00:31:03,510 --> 00:31:06,870
you know that you have a peak time at

00:31:04,980 --> 00:31:10,140
lunch and dinner so you can anticipate

00:31:06,870 --> 00:31:11,670
that and avoid cold start entirely so

00:31:10,140 --> 00:31:13,890
that is possible that's something I

00:31:11,670 --> 00:31:17,040
would really recommend for larger

00:31:13,890 --> 00:31:20,549
project but you know I talked with web

00:31:17,040 --> 00:31:22,110
web agencies startups small projects or

00:31:20,549 --> 00:31:25,710
small that will be big

00:31:22,110 --> 00:31:30,330
everybody will be big someday but for

00:31:25,710 --> 00:31:33,780
most of them it's perfectly fine now I

00:31:30,330 --> 00:31:36,780
have a few case studies to show you some

00:31:33,780 --> 00:31:39,179
applications that run in production with

00:31:36,780 --> 00:31:41,610
lambda and with pref so that will give

00:31:39,179 --> 00:31:45,600
you an idea of what to expect and what

00:31:41,610 --> 00:31:46,530
can actually run on lambda I have a mix

00:31:45,600 --> 00:31:50,940
of use cases

00:31:46,530 --> 00:31:54,179
the first one is worker oriented workers

00:31:50,940 --> 00:31:56,970
are awesome on lambda and I hope to help

00:31:54,179 --> 00:31:58,200
you understand why the practice GI is a

00:31:56,970 --> 00:32:01,700
website that I built

00:31:58,200 --> 00:32:04,710
it's a SAS for continuous integration

00:32:01,700 --> 00:32:08,220
for coding standards so whenever you

00:32:04,710 --> 00:32:10,559
push to github it will run a CI job that

00:32:08,220 --> 00:32:12,960
will run PHP code sniffer or PHP CCS

00:32:10,559 --> 00:32:16,440
fixer for you then on your pull request

00:32:12,960 --> 00:32:18,840
you can see it's green or it's right and

00:32:16,440 --> 00:32:21,660
I implemented that as a laravel

00:32:18,840 --> 00:32:24,210
application I deployed that on digital

00:32:21,660 --> 00:32:28,110
ocean server five the last month that's

00:32:24,210 --> 00:32:29,910
great and that's it I used workers so

00:32:28,110 --> 00:32:32,940
that whenever there's a commit I ran a

00:32:29,910 --> 00:32:37,620
worker with a laravel queues and it was

00:32:32,940 --> 00:32:40,710
fine until I got more let's say than

00:32:37,620 --> 00:32:42,720
five four people pushing at the same

00:32:40,710 --> 00:32:44,309
time for jobs running at the same time

00:32:42,720 --> 00:32:47,280
because I have a small server

00:32:44,309 --> 00:32:49,110
I have only like three workers so

00:32:47,280 --> 00:32:51,150
whatever the workers are running the

00:32:49,110 --> 00:32:52,470
queue will pile up a little bit and

00:32:51,150 --> 00:32:57,179
people will be waiting

00:32:52,470 --> 00:32:59,340
that's how queue works so then I'm I

00:32:57,179 --> 00:33:02,610
don't like managing servers

00:32:59,340 --> 00:33:04,620
I don't like scaling that I didn't want

00:33:02,610 --> 00:33:06,809
people to wait I didn't want to deal

00:33:04,620 --> 00:33:09,450
with the servers so I moved the workers

00:33:06,809 --> 00:33:11,940
in just the workers at first never move

00:33:09,450 --> 00:33:12,550
the website in the end just lazy for

00:33:11,940 --> 00:33:16,960
that but

00:33:12,550 --> 00:33:18,820
move the workers to lambda so yesterday

00:33:16,960 --> 00:33:22,360
as I said this is laravel it of API

00:33:18,820 --> 00:33:25,060
I used the function runtime because I

00:33:22,360 --> 00:33:31,630
have no HTTP for the 95 should be under

00:33:25,060 --> 00:33:33,700
the workers and now whenever there is a

00:33:31,630 --> 00:33:35,890
new commit there's a new message in the

00:33:33,700 --> 00:33:38,170
message queue there will be instantly a

00:33:35,890 --> 00:33:40,300
new container running and it's

00:33:38,170 --> 00:33:43,120
transforming a little bit how queues

00:33:40,300 --> 00:33:45,910
work because instead of messages piling

00:33:43,120 --> 00:33:48,970
up instead the lambdas will be piling up

00:33:45,910 --> 00:33:52,960
and processing the messages immediately

00:33:48,970 --> 00:33:55,960
of course there's a limit but by default

00:33:52,960 --> 00:33:58,240
the limit is 1,000 lambdas running

00:33:55,960 --> 00:34:00,330
concurrently so I can handle 1,000

00:33:58,240 --> 00:34:03,430
pushes at the same time I'm good

00:34:00,330 --> 00:34:06,820
and so this is why I what I see often

00:34:03,430 --> 00:34:08,260
now whenever I push to github the pretty

00:34:06,820 --> 00:34:10,810
see I'd check runs in less than 5

00:34:08,260 --> 00:34:14,020
seconds when there's not a huge project

00:34:10,810 --> 00:34:17,080
obviously so it's pretty instant but the

00:34:14,020 --> 00:34:21,429
rest of the checks are just pending

00:34:17,080 --> 00:34:23,950
waiting for a container to be free so

00:34:21,429 --> 00:34:26,470
for me moving to lambda in that use case

00:34:23,950 --> 00:34:29,020
was really great because for the user

00:34:26,470 --> 00:34:31,030
experience and even for my developer not

00:34:29,020 --> 00:34:33,820
having to maintain service the cost is

00:34:31,030 --> 00:34:36,490
actually also extremely low I think I

00:34:33,820 --> 00:34:41,800
pay close to zero dollars for that so

00:34:36,490 --> 00:34:44,110
it's a win-win for everything the second

00:34:41,800 --> 00:34:47,140
use case is a website to show a

00:34:44,110 --> 00:34:50,830
different side that external that IO is

00:34:47,140 --> 00:34:54,070
a website that shows the latest threats

00:34:50,830 --> 00:34:56,260
in the PHP internals mailing list so

00:34:54,070 --> 00:35:01,470
this is where you can follow new PHP

00:34:56,260 --> 00:35:05,170
features RFC's and yeah how PHP evolves

00:35:01,470 --> 00:35:06,640
it's a website I'm pretty happy with the

00:35:05,170 --> 00:35:09,670
response time I hoped amazed that a

00:35:06,640 --> 00:35:12,100
little bit there is a chrome task though

00:35:09,670 --> 00:35:14,200
that will run every five minutes fetch

00:35:12,100 --> 00:35:17,860
the new emails insert them into database

00:35:14,200 --> 00:35:18,880
so this is my sequel database so I used

00:35:17,860 --> 00:35:22,480
both runtimes

00:35:18,880 --> 00:35:24,280
HTTP for the website with PHP fpm and I

00:35:22,480 --> 00:35:25,500
have a second function running with the

00:35:24,280 --> 00:35:28,050
function runtime

00:35:25,500 --> 00:35:32,640
for the chrome task so you can see that

00:35:28,050 --> 00:35:34,590
you can mix both I used custom PHP

00:35:32,640 --> 00:35:36,180
framework that I built that I'm not

00:35:34,590 --> 00:35:40,230
really proud of but it's okay

00:35:36,180 --> 00:35:44,609
and my spell to store the messages I get

00:35:40,230 --> 00:35:46,890
about 100,000 requests per month so it's

00:35:44,609 --> 00:35:48,510
not a huge website but it's still

00:35:46,890 --> 00:35:54,900
getting some traffic it's interesting

00:35:48,510 --> 00:35:57,030
because it's like a real use case and at

00:35:54,900 --> 00:36:00,390
first I was running that on digital

00:35:57,030 --> 00:36:04,170
ocean I had a free program problems with

00:36:00,390 --> 00:36:08,099
you know losing the database not having

00:36:04,170 --> 00:36:09,780
backups running PHP 5/3 at the time or

00:36:08,099 --> 00:36:13,140
something like this and it was really

00:36:09,780 --> 00:36:16,590
painful so I moved to a fast platform as

00:36:13,140 --> 00:36:19,020
a service platform SH at the time so

00:36:16,590 --> 00:36:21,030
they were happy to sponsor me so I did

00:36:19,020 --> 00:36:23,580
not pay platform message but the plan

00:36:21,030 --> 00:36:25,410
was about the equivalent plan for the

00:36:23,580 --> 00:36:27,900
service of that having to deal with all

00:36:25,410 --> 00:36:30,300
of that I went from a plan for five

00:36:27,900 --> 00:36:33,780
dollars per month at each dilution to 50

00:36:30,300 --> 00:36:35,460
dollars per month at platform SH and

00:36:33,780 --> 00:36:38,670
then I moved to lambda everything and

00:36:35,460 --> 00:36:41,520
now it costs me seventeen dollars per

00:36:38,670 --> 00:36:43,410
month for about the same service which

00:36:41,520 --> 00:36:46,020
is not having to deal with the

00:36:43,410 --> 00:36:49,080
infrastructure so this is why I like to

00:36:46,020 --> 00:36:51,960
compare things that are comparable not

00:36:49,080 --> 00:36:53,400
really the server costs only by itself

00:36:51,960 --> 00:36:58,619
but also everything that you get with

00:36:53,400 --> 00:37:01,500
that of those seventeen dollars fifteen

00:36:58,619 --> 00:37:03,150
dollars are for the database because my

00:37:01,500 --> 00:37:04,170
sequel database you have to pay your

00:37:03,150 --> 00:37:07,410
fixed costs

00:37:04,170 --> 00:37:10,440
I wished was scaling and paper use as

00:37:07,410 --> 00:37:12,420
well but it's not so that means I paid

00:37:10,440 --> 00:37:14,640
two dollars per month for serving

00:37:12,420 --> 00:37:18,720
serving the website which is to me I

00:37:14,640 --> 00:37:20,430
think a pretty good deal and what's

00:37:18,720 --> 00:37:23,339
interesting as well with its website is

00:37:20,430 --> 00:37:27,030
that it let me see what happens

00:37:23,339 --> 00:37:29,970
when you get to traffic spike because

00:37:27,030 --> 00:37:32,450
everything is running right and sometime

00:37:29,970 --> 00:37:36,480
around like last year last summer maybe

00:37:32,450 --> 00:37:38,800
zero raske posted message in the mailing

00:37:36,480 --> 00:37:40,780
list about creating p+

00:37:38,800 --> 00:37:43,480
Plus which was a for coffee I feel

00:37:40,780 --> 00:37:45,820
something anyway people we're really

00:37:43,480 --> 00:37:48,100
really wanted to read the emails and I

00:37:45,820 --> 00:37:51,370
got like more than ten times the traffic

00:37:48,100 --> 00:37:54,190
the usual traffic on on externals of IO

00:37:51,370 --> 00:37:58,740
it was a really good case to see how

00:37:54,190 --> 00:38:03,280
much would I pay for that extra traffic

00:37:58,740 --> 00:38:05,460
fortunately it cost me four cents so I'm

00:38:03,280 --> 00:38:05,460
good

00:38:05,490 --> 00:38:11,950
turns out the compute time on lambda is

00:38:08,560 --> 00:38:14,740
it's honestly it's cheap what you will

00:38:11,950 --> 00:38:17,500
pay for is mostly the database and if

00:38:14,740 --> 00:38:19,450
you do stuff like have a lot of fun with

00:38:17,500 --> 00:38:23,560
some videos or images you can pay a bit

00:38:19,450 --> 00:38:25,420
like this but most of the time I don't

00:38:23,560 --> 00:38:28,630
want to say all of course but most of

00:38:25,420 --> 00:38:30,820
the time running PHP on lambda is

00:38:28,630 --> 00:38:34,030
cheaper than on the seller but you have

00:38:30,820 --> 00:38:36,400
to be careful with other services I made

00:38:34,030 --> 00:38:39,550
an estimation if I were to run the same

00:38:36,400 --> 00:38:44,110
thing and get two million requests per

00:38:39,550 --> 00:38:46,750
month instead of 100k I would go if I

00:38:44,110 --> 00:38:49,240
did prepare optimization not change the

00:38:46,750 --> 00:38:51,310
code but instead of using the version 1

00:38:49,240 --> 00:38:53,140
of epi Gateway used version 2 just a few

00:38:51,310 --> 00:38:57,070
changes in the architecture I would go

00:38:53,140 --> 00:38:59,050
from 17 to 39 dollars per month so it's

00:38:57,070 --> 00:39:01,870
not like I would go to a few hundred

00:38:59,050 --> 00:39:03,820
dollars per month the equivalent

00:39:01,870 --> 00:39:07,210
platform SH plan is five hundred dollars

00:39:03,820 --> 00:39:09,160
per month for that so again really

00:39:07,210 --> 00:39:13,420
interesting and it puts fing put things

00:39:09,160 --> 00:39:17,860
into perspective I have another worker

00:39:13,420 --> 00:39:20,890
case study more money talk n op TI is a

00:39:17,860 --> 00:39:23,230
French startup and what they do is they

00:39:20,890 --> 00:39:26,710
run a lot of background jobs because

00:39:23,230 --> 00:39:30,760
they process a lot of energy bills they

00:39:26,710 --> 00:39:32,410
try to help you switch providers so they

00:39:30,760 --> 00:39:36,190
don't have a lot of web traffic but I

00:39:32,410 --> 00:39:39,940
have a few jobs and they are startup the

00:39:36,190 --> 00:39:42,310
numbers are a few now a few years old

00:39:39,940 --> 00:39:44,320
but still interesting they were growing

00:39:42,310 --> 00:39:46,720
sending more and more clients running

00:39:44,320 --> 00:39:51,000
more and more jobs and they used to run

00:39:46,720 --> 00:39:55,230
PhD workers on ec2 with you know simple

00:39:51,000 --> 00:39:57,660
workers thing is that the Amazon bills

00:39:55,230 --> 00:40:01,530
started growing as well and they had

00:39:57,660 --> 00:40:04,260
trouble scaling service they started

00:40:01,530 --> 00:40:06,420
losing messages or I'm dumb time I mean

00:40:04,260 --> 00:40:09,450
it wasn't really great experience for

00:40:06,420 --> 00:40:11,250
them so what they did in the middle of

00:40:09,450 --> 00:40:14,460
the summer in July they started started

00:40:11,250 --> 00:40:16,470
migrating some services to lamda and I

00:40:14,460 --> 00:40:20,960
soon as they started they started

00:40:16,470 --> 00:40:24,090
decreasing their Amazon bill in the end

00:40:20,960 --> 00:40:28,350
they I think they divided by three their

00:40:24,090 --> 00:40:30,840
bill while growing as well and they did

00:40:28,350 --> 00:40:32,670
not share publicly total numbers but it

00:40:30,840 --> 00:40:34,800
did share specific numbers for a

00:40:32,670 --> 00:40:37,620
specific micro service that they

00:40:34,800 --> 00:40:41,370
migrated entirely on lamda and they went

00:40:37,620 --> 00:40:44,880
from 800 dollars per month to 90 dollars

00:40:41,370 --> 00:40:48,150
per month for a better service because

00:40:44,880 --> 00:40:51,630
now job jobs were running almost

00:40:48,150 --> 00:40:53,940
instantly scaling automatically they had

00:40:51,630 --> 00:40:57,120
some processing time going from 2 hours

00:40:53,940 --> 00:41:00,930
because of the cute jobs to a few

00:40:57,120 --> 00:41:04,110
minutes and also the important thing for

00:41:00,930 --> 00:41:06,510
them was going from place where they

00:41:04,110 --> 00:41:08,010
were afraid of the tech stack and afraid

00:41:06,510 --> 00:41:10,380
of growing to a place where they could

00:41:08,010 --> 00:41:12,660
sign any new client without having to

00:41:10,380 --> 00:41:18,960
worry and as a start-up this is

00:41:12,660 --> 00:41:20,790
important now again another website make

00:41:18,960 --> 00:41:23,130
it quick on this one this is a Brazilian

00:41:20,790 --> 00:41:25,110
website which I had no idea existed

00:41:23,130 --> 00:41:28,890
before someone talked about it in the

00:41:25,110 --> 00:41:31,050
breath issues so this is a website that

00:41:28,890 --> 00:41:33,360
runs with a website and an API the

00:41:31,050 --> 00:41:38,010
website calls the API pretty good

00:41:33,360 --> 00:41:43,620
response times to be honest it runs with

00:41:38,010 --> 00:41:47,610
Falcon the framework it's PHP I mean the

00:41:43,620 --> 00:41:50,100
code base is PHP it uses my sequel so my

00:41:47,610 --> 00:41:53,460
sequel a scale with PHP and lambda it

00:41:50,100 --> 00:41:57,500
works well and when I say at scale I

00:41:53,460 --> 00:42:01,230
mean they get 440 million requests today

00:41:57,500 --> 00:42:03,079
they are in the top three top three

00:42:01,230 --> 00:42:05,029
thousand websites in the world

00:42:03,079 --> 00:42:08,450
so I think this is good use case to see

00:42:05,029 --> 00:42:11,119
how it behaves at scale and yeah when

00:42:08,450 --> 00:42:15,969
they get picked traffic they get more

00:42:11,119 --> 00:42:18,559
than 2,000 lambda instances containers

00:42:15,969 --> 00:42:21,589
alive at the same time to serve the

00:42:18,559 --> 00:42:26,140
website they are really happy with the

00:42:21,589 --> 00:42:29,420
migration they used to run on CCS NEC -

00:42:26,140 --> 00:42:31,609
they saved money by moving to lambda

00:42:29,420 --> 00:42:34,180
even for a large website with continuous

00:42:31,609 --> 00:42:36,319
traffic they save 25% of their bill and

00:42:34,180 --> 00:42:39,109
they are really happy because they don't

00:42:36,319 --> 00:42:42,619
have to scale anything they can spend

00:42:39,109 --> 00:42:46,219
that time doing something else now the

00:42:42,619 --> 00:42:49,749
last one isn't really a case study per

00:42:46,219 --> 00:42:55,039
se but I've talked about until now about

00:42:49,749 --> 00:42:57,859
api's website and workers but what's

00:42:55,039 --> 00:43:01,489
really interesting is where we can be

00:42:57,859 --> 00:43:04,459
where we are going with service at the

00:43:01,489 --> 00:43:06,469
moment and in the future years what I

00:43:04,459 --> 00:43:09,259
mean by that is that instead of viewing

00:43:06,469 --> 00:43:12,199
our application as large box receiving

00:43:09,259 --> 00:43:15,469
requests redundant responses we can view

00:43:12,199 --> 00:43:17,390
it as separate I don't like the term

00:43:15,469 --> 00:43:19,819
micro services here but maybe that's the

00:43:17,390 --> 00:43:22,849
correct term but using lambdas for

00:43:19,819 --> 00:43:23,989
specific jobs and unlike micro services

00:43:22,849 --> 00:43:25,759
we don't have to deal with the

00:43:23,989 --> 00:43:28,009
infrastructure we check which makes it

00:43:25,759 --> 00:43:30,170
much more interesting at least to me I

00:43:28,009 --> 00:43:32,630
don't like doing dealing with servers

00:43:30,170 --> 00:43:33,920
and scaling here is an example of a

00:43:32,630 --> 00:43:38,180
project I did for a client

00:43:33,920 --> 00:43:40,400
I mean simplify it but here you have a

00:43:38,180 --> 00:43:42,949
back office which is a PHP application

00:43:40,400 --> 00:43:46,670
it's a laravel or Symphony running on

00:43:42,949 --> 00:43:49,940
lambda and the user clicks a button send

00:43:46,670 --> 00:43:52,609
an alert instead of calling the API is

00:43:49,940 --> 00:43:54,469
like Facebook doing a Facebook post a

00:43:52,609 --> 00:43:57,170
Twitter post and sending emails in my

00:43:54,469 --> 00:44:00,499
controller where things can go wrong and

00:43:57,170 --> 00:44:02,359
I can send publish on Facebook then mess

00:44:00,499 --> 00:44:04,989
up Twitter and have done half the

00:44:02,359 --> 00:44:10,400
publication and ask the user to retry

00:44:04,989 --> 00:44:12,289
instead of that I can use services you

00:44:10,400 --> 00:44:16,130
know several services like even bridge

00:44:12,289 --> 00:44:16,950
which is like to me it's very close to

00:44:16,130 --> 00:44:20,089
what simple

00:44:16,950 --> 00:44:22,859
messenger of those except as

00:44:20,089 --> 00:44:24,900
infrastructure instead of code so you

00:44:22,859 --> 00:44:28,160
can publish messages in there and have

00:44:24,900 --> 00:44:31,140
subscribers that will execute separately

00:44:28,160 --> 00:44:33,359
they can fail separately I can pass to

00:44:31,140 --> 00:44:35,640
Facebook send my emails have Twitter

00:44:33,359 --> 00:44:40,109
fail because of a down time and set up

00:44:35,640 --> 00:44:42,510
Auto retries and automatically with the

00:44:40,109 --> 00:44:44,339
cloud my thing will be retried without

00:44:42,510 --> 00:44:46,710
having a peer to use a PHP library or

00:44:44,339 --> 00:44:48,690
could the behavior myself so Twitter is

00:44:46,710 --> 00:44:50,910
done for a few minutes it's okay the

00:44:48,690 --> 00:44:53,700
message will be sent later on if Twitter

00:44:50,910 --> 00:44:55,829
is down for the day you know so this is

00:44:53,700 --> 00:44:58,859
a pattern design pattern called the

00:44:55,829 --> 00:45:00,599
fan-out sorry the fan-out pattern you

00:44:58,859 --> 00:45:03,630
have many architecture patterns like

00:45:00,599 --> 00:45:05,730
this if let's say Twitter is done for

00:45:03,630 --> 00:45:07,500
the whole day I can't send the message

00:45:05,730 --> 00:45:09,570
on Twitter that's fine you have another

00:45:07,500 --> 00:45:12,660
architectural pattern called the dead

00:45:09,570 --> 00:45:14,700
letter Q and messages can be then stored

00:45:12,660 --> 00:45:16,380
separately a developer will be alerted

00:45:14,700 --> 00:45:19,320
oh there's actually a bug in my lambda

00:45:16,380 --> 00:45:21,810
fix it I can republish the messages and

00:45:19,320 --> 00:45:23,700
automatically the behavior that failed

00:45:21,810 --> 00:45:28,200
before can be replayed again separately

00:45:23,700 --> 00:45:32,040
and individually so I'm not saying we

00:45:28,200 --> 00:45:33,810
should all do that but that's really

00:45:32,040 --> 00:45:37,290
interesting to see where we are going

00:45:33,810 --> 00:45:40,380
because that means doing less and less

00:45:37,290 --> 00:45:42,660
of server management but less of all the

00:45:40,380 --> 00:45:46,280
wirings and you know wiring stuff

00:45:42,660 --> 00:45:50,490
together orchestrating our application

00:45:46,280 --> 00:45:53,700
this is what is called I'll try to say

00:45:50,490 --> 00:45:58,260
it right undifferentiated heavy lifting

00:45:53,700 --> 00:46:01,349
I use a framework because I don't want

00:45:58,260 --> 00:46:04,530
to write a PHP router and a logger and

00:46:01,349 --> 00:46:08,280
and all that stuff we are used now to

00:46:04,530 --> 00:46:10,770
using frameworks it makes sense and I

00:46:08,280 --> 00:46:13,160
think these services here is just one

00:46:10,770 --> 00:46:16,560
and two but there are so many available

00:46:13,160 --> 00:46:18,480
crazy stuff and it looks to me like this

00:46:16,560 --> 00:46:20,400
is going to be the next evolution of our

00:46:18,480 --> 00:46:22,829
our frameworks like an architectural

00:46:20,400 --> 00:46:25,570
framework so this is really interesting

00:46:22,829 --> 00:46:28,930
to look into

00:46:25,570 --> 00:46:29,920
okay let's conclude what should we

00:46:28,930 --> 00:46:32,890
conclude

00:46:29,920 --> 00:46:37,140
should we go to work tomorrow and move

00:46:32,890 --> 00:46:40,870
everything to several s I don't think so

00:46:37,140 --> 00:46:44,070
several s is starting to be mature we

00:46:40,870 --> 00:46:47,470
have countless case studies of companies

00:46:44,070 --> 00:46:49,750
running stuff on Nam down and I've

00:46:47,470 --> 00:46:52,270
mentioned Amazon s3 use s3 it's really

00:46:49,750 --> 00:46:55,690
mature you can definitely create several

00:46:52,270 --> 00:46:57,280
s applications with PHP as well the

00:46:55,690 --> 00:47:00,400
thing to consider though is your

00:46:57,280 --> 00:47:04,450
experience with it so I guess this is

00:47:00,400 --> 00:47:06,400
more of learning at the moment growing

00:47:04,450 --> 00:47:10,870
how much we know as a community about

00:47:06,400 --> 00:47:14,250
this growing our best practices and this

00:47:10,870 --> 00:47:17,410
is why sharing I think is so important

00:47:14,250 --> 00:47:19,630
is the future several s I think it would

00:47:17,410 --> 00:47:21,460
be a bold statement to say that but I'm

00:47:19,630 --> 00:47:24,460
convinced be convinced personally that

00:47:21,460 --> 00:47:27,040
service will play an important part in

00:47:24,460 --> 00:47:29,590
the future yes those architectures and

00:47:27,040 --> 00:47:32,290
those execution models are not for every

00:47:29,590 --> 00:47:36,090
applications obviously just like PHP is

00:47:32,290 --> 00:47:38,380
not for not is not for all applications

00:47:36,090 --> 00:47:40,990
but it will play an important part

00:47:38,380 --> 00:47:45,130
because Sam LS is not just a technical

00:47:40,990 --> 00:47:47,980
solution it's also a business problem we

00:47:45,130 --> 00:47:50,020
started using frameworks and now we use

00:47:47,980 --> 00:47:51,730
frameworks and this is now a business

00:47:50,020 --> 00:47:54,130
problem to use frameworks because we

00:47:51,730 --> 00:47:55,960
don't want to spend developer time to

00:47:54,130 --> 00:47:59,830
rebuild again and again the same

00:47:55,960 --> 00:48:02,110
components just like spending time on

00:47:59,830 --> 00:48:04,420
scaling servers and maintaining them is

00:48:02,110 --> 00:48:08,530
a business problem instead of hiring an

00:48:04,420 --> 00:48:10,750
ops person you can hire a developer work

00:48:08,530 --> 00:48:14,290
on the product work on what makes your

00:48:10,750 --> 00:48:16,810
company different in successful I used

00:48:14,290 --> 00:48:20,460
to talk about an example of the irobot

00:48:16,810 --> 00:48:23,590
company they make Roomba vacuum cleaners

00:48:20,460 --> 00:48:26,260
they so those things are connected to

00:48:23,590 --> 00:48:28,300
the Internet and the new versions in and

00:48:26,260 --> 00:48:31,410
this is a large Arctic infrastructure

00:48:28,300 --> 00:48:34,030
that they manage they are two developers

00:48:31,410 --> 00:48:37,210
they run the company with two developers

00:48:34,030 --> 00:48:38,119
and companies and project like these are

00:48:37,210 --> 00:48:40,249
becoming more

00:48:38,119 --> 00:48:46,339
more possible just like again when PHP

00:48:40,249 --> 00:48:48,319
was born years ago and PHP I think

00:48:46,339 --> 00:48:53,269
server less could play a huge role in

00:48:48,319 --> 00:48:55,220
PHP so future because of an alignment of

00:48:53,269 --> 00:48:57,740
technologies of the execution model it's

00:48:55,220 --> 00:48:59,720
the same thing it's easy to go from PHP

00:48:57,740 --> 00:49:01,640
to server less it's harder when you're

00:48:59,720 --> 00:49:04,309
not developer and you think about a

00:49:01,640 --> 00:49:06,410
synchronous stuff and and corrosion

00:49:04,309 --> 00:49:08,359
execution and concurrent execution it's

00:49:06,410 --> 00:49:10,460
easier of us developers serverless

00:49:08,359 --> 00:49:13,730
is here for us and I think it could play

00:49:10,460 --> 00:49:15,759
a part in PHP future but I also think

00:49:13,730 --> 00:49:19,099
again there's an alignment in goals

00:49:15,759 --> 00:49:21,499
making the web more accessible we have

00:49:19,099 --> 00:49:25,039
so many web shops everywhere around the

00:49:21,499 --> 00:49:26,930
world and being able to run PHP at scale

00:49:25,039 --> 00:49:30,829
easily without having to do service is

00:49:26,930 --> 00:49:32,690
amazing so this is why I guess you you

00:49:30,829 --> 00:49:33,019
get it now I'm passionate about all of

00:49:32,690 --> 00:49:35,210
this

00:49:33,019 --> 00:49:38,299
so I really encourage you to give it a

00:49:35,210 --> 00:49:41,720
try play with it see for yourself how it

00:49:38,299 --> 00:49:44,239
runs how it works and share what you've

00:49:41,720 --> 00:49:46,730
learned so that we can all as a

00:49:44,239 --> 00:49:49,190
community grow from this thank you very

00:49:46,730 --> 00:49:52,759
much if you want to learn more about

00:49:49,190 --> 00:49:54,319
breath this is the website i run news

00:49:52,759 --> 00:49:56,960
that our monthly newsletter where i

00:49:54,319 --> 00:50:00,319
share news about severus that relates to

00:49:56,960 --> 00:50:04,609
PHP specifically and this is my company

00:50:00,319 --> 00:50:06,470
now I am not employed by AWS I'm not

00:50:04,609 --> 00:50:08,660
employed by all a very large companies

00:50:06,470 --> 00:50:11,029
so I do consulting work to help people

00:50:08,660 --> 00:50:15,519
get started with service and help them

00:50:11,029 --> 00:50:15,519

YouTube URL: https://www.youtube.com/watch?v=R2V4QTM2aes


