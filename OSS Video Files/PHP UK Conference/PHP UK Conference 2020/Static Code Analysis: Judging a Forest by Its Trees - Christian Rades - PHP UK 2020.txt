Title: Static Code Analysis: Judging a Forest by Its Trees - Christian Rades - PHP UK 2020
Publication date: 2020-03-11
Playlist: PHP UK Conference 2020
Description: 
	Static code analysis can help you automate the boring parts of your code reviews. This talk is an overview of several tools and tips on how to use them in new and existing projects, featuring the following tools that can help you: Stop nit-picking your colleaguesâ€™ code style (Easy Coding Standard), keep up with best practices (Psalm, PHPStan, PHP Insights) and generate graphs visualising your dependencies (Deptrac, PhpMetrics).
Captions: 
	00:00:02,929 --> 00:00:08,510
I'm Christian goddess and I've been a

00:00:05,210 --> 00:00:12,200
professional PHP developer for the last

00:00:08,510 --> 00:00:15,769
three years at shop where and not only

00:00:12,200 --> 00:00:18,320
do I live in a rural shopping where shop

00:00:15,769 --> 00:00:20,960
where is based it looks like this so

00:00:18,320 --> 00:00:24,770
really nothing much to to go on about

00:00:20,960 --> 00:00:27,050
just Meadows some cows a few trees you

00:00:24,770 --> 00:00:30,829
know just normal village stuff more cows

00:00:27,050 --> 00:00:34,730
than people and so there are two things

00:00:30,829 --> 00:00:38,960
I can talk about trees and beer

00:00:34,730 --> 00:00:41,390
so today it's going to be trees but

00:00:38,960 --> 00:00:46,789
maybe next time be here so thank you bye

00:00:41,390 --> 00:00:48,530
out for that and the thing is today I'm

00:00:46,789 --> 00:00:53,210
going to talk a bit about forests and

00:00:48,530 --> 00:00:56,239
trees as the talk said and forest a very

00:00:53,210 --> 00:00:57,739
cultivated thing nowadays I mean they

00:00:56,239 --> 00:01:00,350
might look rough-and-tumble

00:00:57,739 --> 00:01:02,929
but in fact a lot of forests are

00:01:00,350 --> 00:01:09,050
maintained by humans going through there

00:01:02,929 --> 00:01:11,180
and taking care like this guy and these

00:01:09,050 --> 00:01:13,460
people there you know they measure the

00:01:11,180 --> 00:01:17,180
trees they cut them down if they are

00:01:13,460 --> 00:01:19,610
rotten and their caretakers and the

00:01:17,180 --> 00:01:22,250
thing I want to drive home is you are

00:01:19,610 --> 00:01:24,200
caretakers as well for your software I

00:01:22,250 --> 00:01:26,300
mean kinda you don't go out in the

00:01:24,200 --> 00:01:31,010
forest and cut down trees but I mean the

00:01:26,300 --> 00:01:34,070
metaphor still works probably right but

00:01:31,010 --> 00:01:37,430
what kinds of trees does your that's

00:01:34,070 --> 00:01:40,430
your application contain I've got this

00:01:37,430 --> 00:01:43,100
year as a little example I mean it's

00:01:40,430 --> 00:01:46,430
it's just a soy dough so it'll call

00:01:43,100 --> 00:01:49,280
trace you know you have a controller at

00:01:46,430 --> 00:01:51,770
the checkout route the check out will

00:01:49,280 --> 00:01:54,740
fetch some users from the database will

00:01:51,770 --> 00:01:57,260
fetch a card from the database and then

00:01:54,740 --> 00:01:59,780
you know calculate the bill and then you

00:01:57,260 --> 00:02:04,970
render it so you know a normal call

00:01:59,780 --> 00:02:06,170
graph and keeping keeping your trees in

00:02:04,970 --> 00:02:08,810
order when they are small and

00:02:06,170 --> 00:02:10,999
well-groomed is easy right having an

00:02:08,810 --> 00:02:15,530
application that was already or that has

00:02:10,999 --> 00:02:16,800
already been taken care of well and has

00:02:15,530 --> 00:02:19,860
been developed with things

00:02:16,800 --> 00:02:22,650
like clean code in mind are often easier

00:02:19,860 --> 00:02:25,110
to keep in that state but the thing is

00:02:22,650 --> 00:02:27,720
most people who start to use stuff like

00:02:25,110 --> 00:02:31,020
aesthetic analysis they encounter more

00:02:27,720 --> 00:02:33,540
something like this okay the thing is

00:02:31,020 --> 00:02:36,330
it's really hard to get order into that

00:02:33,540 --> 00:02:40,590
and to start changing it for the better

00:02:36,330 --> 00:02:43,590
because you have to know some you know

00:02:40,590 --> 00:02:48,180
you have to have values metrics stuff

00:02:43,590 --> 00:02:52,860
like that and so enough for the trees

00:02:48,180 --> 00:02:54,840
for now the thing I want to talk about

00:02:52,860 --> 00:02:57,540
first is readability you know as a

00:02:54,840 --> 00:03:02,370
cornerstone of like getting your trees

00:02:57,540 --> 00:03:04,950
in order and I mean we all know about

00:03:02,370 --> 00:03:08,010
code style readability it's quite

00:03:04,950 --> 00:03:10,260
important because readability is not

00:03:08,010 --> 00:03:12,570
only for the developers maintaining the

00:03:10,260 --> 00:03:17,310
code base you know searching through it

00:03:12,570 --> 00:03:20,730
but also it's important for you know

00:03:17,310 --> 00:03:24,150
just the first the first way you see it

00:03:20,730 --> 00:03:26,130
right how you how you feel about the

00:03:24,150 --> 00:03:28,380
code when it's properly indented stuff

00:03:26,130 --> 00:03:30,209
like that so you don't just go in a code

00:03:28,380 --> 00:03:31,140
base and think oh my god like what's

00:03:30,209 --> 00:03:34,080
happening here

00:03:31,140 --> 00:03:36,360
it's not even formatted properly and

00:03:34,080 --> 00:03:40,110
you've got stuff like indentation line

00:03:36,360 --> 00:03:43,610
breaks maximum line width you got the

00:03:40,110 --> 00:03:47,030
occasional stray space and the thing is

00:03:43,610 --> 00:03:50,400
it's not only I mean it's quite obvious

00:03:47,030 --> 00:03:52,950
but it's hard to get right because in a

00:03:50,400 --> 00:03:57,330
code review for example you only have a

00:03:52,950 --> 00:03:59,910
limited amount of time to really do some

00:03:57,330 --> 00:04:02,190
concentrated looking through the code so

00:03:59,910 --> 00:04:04,800
every second you spend thinking about

00:04:02,190 --> 00:04:08,150
like it's the space too much or is this

00:04:04,800 --> 00:04:10,260
indented not properly you will lose

00:04:08,150 --> 00:04:15,030
concentrated time thinking about stuff

00:04:10,260 --> 00:04:16,919
like data flow and the general idea of

00:04:15,030 --> 00:04:20,400
what there's pull requests is trying to

00:04:16,919 --> 00:04:23,720
do so the thing is style issues are

00:04:20,400 --> 00:04:27,479
boring you don't want to bicker about

00:04:23,720 --> 00:04:29,669
how long lines should be or when to put

00:04:27,479 --> 00:04:30,449
a new line stuff like that or should you

00:04:29,669 --> 00:04:33,210
use comments

00:04:30,449 --> 00:04:35,610
shouldn't you use comments and the

00:04:33,210 --> 00:04:41,430
tooling for that is quite well explored

00:04:35,610 --> 00:04:45,080
so we have easy coding standard and the

00:04:41,430 --> 00:04:48,629
nice thing about easy coding standard is

00:04:45,080 --> 00:04:52,710
that it combines two tools you have on

00:04:48,629 --> 00:04:56,009
the one hand PHP CS fixer this does a

00:04:52,710 --> 00:05:00,719
lot of you know the standard the

00:04:56,009 --> 00:05:04,919
standard layout stuff like you know line

00:05:00,719 --> 00:05:07,740
with spacers and you've got the PHP code

00:05:04,919 --> 00:05:12,150
sniffer which also does some cleanliness

00:05:07,740 --> 00:05:14,909
checks and they they were quite well in

00:05:12,150 --> 00:05:19,409
conjunction you're also gets you also

00:05:14,909 --> 00:05:22,199
have some custom rules and you can just

00:05:19,409 --> 00:05:25,439
use ECS out of the box because it's

00:05:22,199 --> 00:05:29,969
already got an opinionated collection of

00:05:25,439 --> 00:05:33,589
limbs and style for matters that can

00:05:29,969 --> 00:05:36,749
automatically bring your code in line so

00:05:33,589 --> 00:05:40,349
after this quick quick detour to

00:05:36,749 --> 00:05:44,849
readability we're back to the trees like

00:05:40,349 --> 00:05:48,899
here and today I'm not only want to talk

00:05:44,849 --> 00:05:51,599
about like green trees but PHP itself

00:05:48,899 --> 00:05:53,879
the language also has trees it's

00:05:51,599 --> 00:05:58,499
actually what enquired the horrible pun

00:05:53,879 --> 00:06:04,740
that is my title and it's the abstract

00:05:58,499 --> 00:06:08,029
syntax tree it's been in PHP since PHP 7

00:06:04,740 --> 00:06:11,639
it was put in there by Nikita Popov and

00:06:08,029 --> 00:06:15,029
it enabled a language to be more memory

00:06:11,639 --> 00:06:17,550
efficient and be a bit quicker with the

00:06:15,029 --> 00:06:23,849
compiling and also made more made the

00:06:17,550 --> 00:06:27,149
PHP runtime more maintainable and I mean

00:06:23,849 --> 00:06:29,999
I could show you a PHP syntax tree but

00:06:27,149 --> 00:06:34,469
they are quite big so let's start a bit

00:06:29,999 --> 00:06:38,069
smaller like this because as it turns

00:06:34,469 --> 00:06:40,800
out math has some kind of syntax tree as

00:06:38,069 --> 00:06:43,909
well you can pass a mathematical term

00:06:40,800 --> 00:06:43,909
like this one here

00:06:44,040 --> 00:06:50,370
a tree and why is this a good idea

00:06:46,320 --> 00:06:51,420
because if you just read this term left

00:06:50,370 --> 00:06:54,060
to right you get the wrong answer

00:06:51,420 --> 00:06:58,830
obviously because it's not six times

00:06:54,060 --> 00:07:01,530
three it's it's I can't do math right

00:06:58,830 --> 00:07:02,010
now no been a long day standing all the

00:07:01,530 --> 00:07:03,540
time

00:07:02,010 --> 00:07:07,710
we don't have chairs at the shop we're

00:07:03,540 --> 00:07:13,230
stand outside but the thing is the right

00:07:07,710 --> 00:07:15,360
answer is ten obviously and to get to

00:07:13,230 --> 00:07:18,030
this answer the computer has to build a

00:07:15,360 --> 00:07:20,480
model about precedence and you can

00:07:18,030 --> 00:07:23,210
represent this model about precedence

00:07:20,480 --> 00:07:26,670
with trees right you have to first

00:07:23,210 --> 00:07:29,760
figure out what is what are the

00:07:26,670 --> 00:07:32,070
arguments for your addition and after

00:07:29,760 --> 00:07:35,460
you figure out and to figure that out

00:07:32,070 --> 00:07:38,310
you need to figure out what is what is

00:07:35,460 --> 00:07:41,580
the result of the multiplication and so

00:07:38,310 --> 00:07:45,030
you can then just collapse your tree and

00:07:41,580 --> 00:07:47,640
get out the right answer to give you an

00:07:45,030 --> 00:07:51,270
example about how big these abstract

00:07:47,640 --> 00:07:53,990
syntax trees in PHP can get I've just

00:07:51,270 --> 00:07:56,940
taken the shop where six index.php and

00:07:53,990 --> 00:07:57,540
run a line code on it like hundred and

00:07:56,940 --> 00:07:59,730
four lines

00:07:57,540 --> 00:08:01,860
that's not much cold I mean everybody

00:07:59,730 --> 00:08:03,650
can keep that in their head and think

00:08:01,860 --> 00:08:08,150
about it stuff like that

00:08:03,650 --> 00:08:12,540
but if I run the PHP paws are on it and

00:08:08,150 --> 00:08:16,070
output the ast to Jason suddenly it's

00:08:12,540 --> 00:08:19,860
like thirty five forward in volume so

00:08:16,070 --> 00:08:21,990
you have no chance to think about that

00:08:19,860 --> 00:08:26,790
manually right just reading through the

00:08:21,990 --> 00:08:28,830
ast that won't happen and so I want to

00:08:26,790 --> 00:08:32,849
show you two tools to help you with that

00:08:28,830 --> 00:08:37,680
the first one is the some older tool

00:08:32,849 --> 00:08:40,140
it's called PHP Stan and it does

00:08:37,680 --> 00:08:43,500
basically the job of looking through the

00:08:40,140 --> 00:08:46,170
syntax tree finding some weird parts and

00:08:43,500 --> 00:08:51,300
maybe erroneous parts and telling this

00:08:46,170 --> 00:08:54,480
to you and one of the main proper line

00:08:51,300 --> 00:08:57,650
of the one of the main pros of PHP Stan

00:08:54,480 --> 00:08:57,650
is it's easy config

00:09:02,200 --> 00:09:09,040
the configuration itself has nine levels

00:09:06,790 --> 00:09:12,640
that's all you need to do you need to

00:09:09,040 --> 00:09:15,370
decide what level to take level zero is

00:09:12,640 --> 00:09:18,970
the most permissive so it only finds

00:09:15,370 --> 00:09:21,460
stuff like syntax errors there and level

00:09:18,970 --> 00:09:23,830
eight is the most restrictive so it

00:09:21,460 --> 00:09:30,370
looks into stuff like types and that

00:09:23,830 --> 00:09:32,710
code logical conditions and to run it

00:09:30,370 --> 00:09:35,710
you know it's really just you give it

00:09:32,710 --> 00:09:38,340
the level you point it to your source

00:09:35,710 --> 00:09:40,600
directory and off you go

00:09:38,340 --> 00:09:44,080
PHP s then we'll look through your code

00:09:40,600 --> 00:09:46,420
and it's not that slow as well so lots

00:09:44,080 --> 00:09:48,900
of people may be thinking all static

00:09:46,420 --> 00:09:53,740
analysis it will take quite a while I

00:09:48,900 --> 00:09:58,720
think we run our like 3000 files in an

00:09:53,740 --> 00:10:01,060
of five minutes maybe 10 this is

00:09:58,720 --> 00:10:03,820
obviously a bit much for a day to date

00:10:01,060 --> 00:10:06,010
for day-to-day development like having

00:10:03,820 --> 00:10:10,030
it continuously run after every code

00:10:06,010 --> 00:10:12,730
change but it's good enough to run a

00:10:10,030 --> 00:10:15,460
perverse request so you just know if

00:10:12,730 --> 00:10:22,360
you're building errors into your

00:10:15,460 --> 00:10:25,300
software that don't need to be there the

00:10:22,360 --> 00:10:28,120
other thing it's really cool about PHP

00:10:25,300 --> 00:10:32,530
is then is that you can define custom

00:10:28,120 --> 00:10:36,970
rules so these custom rules are just PHP

00:10:32,530 --> 00:10:39,670
files implementing some methods at PHP

00:10:36,970 --> 00:10:45,340
Stan calls to check out the tree with

00:10:39,670 --> 00:10:48,670
custom information for example a chopper

00:10:45,340 --> 00:10:54,190
we're more of a vendor kind of software

00:10:48,670 --> 00:10:55,840
and so we have to take care that our

00:10:54,190 --> 00:10:58,930
code is usable for third-party

00:10:55,840 --> 00:11:01,390
developers and so we need to make clear

00:10:58,930 --> 00:11:04,090
to our own developers and people who

00:11:01,390 --> 00:11:06,400
might work on it later that we want

00:11:04,090 --> 00:11:09,310
clear interfaces for example through

00:11:06,400 --> 00:11:10,720
decoration and so we implemented an

00:11:09,310 --> 00:11:13,300
annotation

00:11:10,720 --> 00:11:16,930
called at decorate Abel that make sure

00:11:13,300 --> 00:11:20,290
that the class that is marked with at

00:11:16,930 --> 00:11:23,529
decorate Abel is properly decorate able

00:11:20,290 --> 00:11:26,439
through Symphony services and we don't

00:11:23,529 --> 00:11:30,220
accidentally break this decorator bonus

00:11:26,439 --> 00:11:32,259
because of some later change we don't

00:11:30,220 --> 00:11:35,199
get direct feedback about things like

00:11:32,259 --> 00:11:38,319
these because we don't decorate our

00:11:35,199 --> 00:11:41,290
services ourselves but other people will

00:11:38,319 --> 00:11:43,689
and we don't have their code bases so we

00:11:41,290 --> 00:11:45,600
would you know just break code somewhere

00:11:43,689 --> 00:11:49,029
else and we wouldn't know about it

00:11:45,600 --> 00:11:50,529
so we implemented a few of these checks

00:11:49,029 --> 00:11:53,259
that all fit into this

00:11:50,529 --> 00:11:55,569
this class is decorator Bo category and

00:11:53,259 --> 00:11:57,550
I mean obviously it needs to implement

00:11:55,569 --> 00:11:59,290
of interface so we've written a rule

00:11:57,550 --> 00:12:03,370
that checks does it implement any

00:11:59,290 --> 00:12:06,730
interface then we have a rule that says

00:12:03,370 --> 00:12:08,980
you know that's not at another public

00:12:06,730 --> 00:12:11,589
method cause you can't decorate the

00:12:08,980 --> 00:12:13,689
methods that aren't in the interface you

00:12:11,589 --> 00:12:17,559
know stuff like that it's not using any

00:12:13,689 --> 00:12:21,490
of their own methods and this is why

00:12:17,559 --> 00:12:23,620
we're using PHP Stan and some people

00:12:21,490 --> 00:12:26,379
think you'd only need two or you only

00:12:23,620 --> 00:12:28,689
can run one static analysis and if

00:12:26,379 --> 00:12:30,939
you've running more than one tool they

00:12:28,689 --> 00:12:35,439
might have overlap but as it turns out

00:12:30,939 --> 00:12:40,259
with Kyle you're still getting added

00:12:35,439 --> 00:12:40,259
benefits of running both tools at once

00:12:42,930 --> 00:12:48,069
the thing is that's so awesome about

00:12:46,269 --> 00:12:53,139
sand which by the way is developed by

00:12:48,069 --> 00:12:57,059
Vimeo is that it has an extended type

00:12:53,139 --> 00:13:02,439
system it puts a lot of effort into

00:12:57,059 --> 00:13:06,160
building additional typing into PHP even

00:13:02,439 --> 00:13:10,569
stuff like Sulu generics with their

00:13:06,160 --> 00:13:12,850
templating mechanism and the typing

00:13:10,569 --> 00:13:18,220
system adds other things as well like

00:13:12,850 --> 00:13:22,689
for example Union types they do exist in

00:13:18,220 --> 00:13:24,750
the type a notation that that is pretty

00:13:22,689 --> 00:13:27,870
common in PHP like

00:13:24,750 --> 00:13:30,000
just annotating types instead of putting

00:13:27,870 --> 00:13:31,850
them directly in the function body or

00:13:30,000 --> 00:13:37,230
not function body but function signature

00:13:31,850 --> 00:13:39,390
and for example with the weird functions

00:13:37,230 --> 00:13:43,620
like the string functions that may

00:13:39,390 --> 00:13:46,470
return zero or false you can even take

00:13:43,620 --> 00:13:49,530
like enemy values like directly false

00:13:46,470 --> 00:13:52,710
it cannot be an integer or true or false

00:13:49,530 --> 00:13:55,560
you know into a pool but it is either

00:13:52,710 --> 00:13:57,810
int or false and with that annotation

00:13:55,560 --> 00:14:01,110
you can find errors later down the line

00:13:57,810 --> 00:14:04,290
when maybe somebody cast the result of

00:14:01,110 --> 00:14:07,010
this operation down to a bool because if

00:14:04,290 --> 00:14:10,500
you cast this operation down to a pool

00:14:07,010 --> 00:14:12,450
somewhere to maybe fit into another

00:14:10,500 --> 00:14:15,930
function signature that expects boolean

00:14:12,450 --> 00:14:19,440
x' and it will never be true so this is

00:14:15,930 --> 00:14:23,490
able to find that code the other thing

00:14:19,440 --> 00:14:25,650
is that's typed arrays something that we

00:14:23,490 --> 00:14:29,430
cannot have in the PHP code itself

00:14:25,650 --> 00:14:34,350
because it would be too slow excuse me

00:14:29,430 --> 00:14:38,910
the thing about type arrays in PHP is

00:14:34,350 --> 00:14:43,350
that array sits there set themselves are

00:14:38,910 --> 00:14:47,339
quite quite pliable well you can throw a

00:14:43,350 --> 00:14:49,260
lot of stuff in PHP arrays and if you

00:14:47,339 --> 00:14:52,290
were to have them type checked you have

00:14:49,260 --> 00:14:54,810
to run the check on every single item on

00:14:52,290 --> 00:14:57,960
every single array operation and that

00:14:54,810 --> 00:14:59,790
would just be too slow so we do it and

00:14:57,960 --> 00:15:04,140
you know some kind of compile step like

00:14:59,790 --> 00:15:07,860
the static analysis that sound us and as

00:15:04,140 --> 00:15:10,950
you can see we cannot only define define

00:15:07,860 --> 00:15:14,339
the value of the array but if it's an

00:15:10,950 --> 00:15:16,860
associate associative array sorry you

00:15:14,339 --> 00:15:18,839
can also define the key type if we

00:15:16,860 --> 00:15:25,050
define the key type as int it's like a

00:15:18,839 --> 00:15:27,330
normal non associative array and by now

00:15:25,050 --> 00:15:30,360
I think PHP stands supports the same

00:15:27,330 --> 00:15:32,850
notation so there appeared recent and

00:15:30,360 --> 00:15:34,860
time work in conjunction and if you

00:15:32,850 --> 00:15:38,040
define it in the same notation

00:15:34,860 --> 00:15:38,579
PHP s then will most likely also help

00:15:38,040 --> 00:15:46,350
you

00:15:38,579 --> 00:15:49,589
finding bugs due to typing mistakes the

00:15:46,350 --> 00:15:53,910
next thing is that's quite special to

00:15:49,589 --> 00:15:56,579
Zion is it's got object like arrays time

00:15:53,910 --> 00:16:00,449
is of my knowledge the only tool that

00:15:56,579 --> 00:16:04,170
asset but you can even type in certain

00:16:00,449 --> 00:16:07,429
keys in your associative arrays so what

00:16:04,170 --> 00:16:10,709
looks like a jason jason object

00:16:07,429 --> 00:16:14,459
basically guarantees that whatever is

00:16:10,709 --> 00:16:18,209
written in the v variable here has to

00:16:14,459 --> 00:16:22,529
contain a item another key value and an

00:16:18,209 --> 00:16:25,529
item another key name and this is of

00:16:22,529 --> 00:16:27,929
course useful for api's and stuff like

00:16:25,529 --> 00:16:30,569
that because you can write assertions

00:16:27,929 --> 00:16:33,860
for that time does know about that as

00:16:30,569 --> 00:16:38,100
well you can say right it asserts that

00:16:33,860 --> 00:16:40,549
the array has a key a key value pair you

00:16:38,100 --> 00:16:43,829
know value and an object type foo and

00:16:40,549 --> 00:16:46,829
once you've run this assertion on your

00:16:43,829 --> 00:16:49,829
input data all the code that comes after

00:16:46,829 --> 00:16:52,259
it or will be treated will be treated

00:16:49,829 --> 00:16:54,720
like this is a valid assumption and so

00:16:52,259 --> 00:16:58,049
you can find even more bugs and you have

00:16:54,720 --> 00:17:02,040
forced by silent basically to have a

00:16:58,049 --> 00:17:04,409
proper input validation but I mean I can

00:17:02,040 --> 00:17:07,529
talk all day about you know language

00:17:04,409 --> 00:17:11,579
quirks but the question that comes up is

00:17:07,529 --> 00:17:13,559
why even care about type safety and

00:17:11,579 --> 00:17:17,789
excuse me for the lot of drinking my

00:17:13,559 --> 00:17:20,579
mouth is quite right today but the thing

00:17:17,789 --> 00:17:22,019
is have a look at this this is a

00:17:20,579 --> 00:17:26,870
real-life example we found it in our

00:17:22,019 --> 00:17:30,659
code I mean it's quite quite small and

00:17:26,870 --> 00:17:34,130
somebody wanted to sort an array so they

00:17:30,659 --> 00:17:37,769
gave it an anonymous function that

00:17:34,130 --> 00:17:39,779
sorted by the value of type and this

00:17:37,769 --> 00:17:43,799
looks correct right you have a greater

00:17:39,779 --> 00:17:49,350
than part there but once we've run Sam

00:17:43,799 --> 00:17:51,179
on it it says invalid scalar argument so

00:17:49,350 --> 00:17:52,350
I mean in this case I reproduce it so

00:17:51,179 --> 00:17:56,490
that's why it's in the main

00:17:52,350 --> 00:17:59,130
Vianne like a top of the file and it

00:17:56,490 --> 00:18:03,840
found out that the collar bill you give

00:17:59,130 --> 00:18:07,080
it grid must return an integer but the

00:18:03,840 --> 00:18:10,650
collar bill that we had here returns a

00:18:07,080 --> 00:18:15,059
bool what does that mean it means that

00:18:10,650 --> 00:18:18,200
you saw it another hood will cast your

00:18:15,059 --> 00:18:22,669
bool to an integer and you might say

00:18:18,200 --> 00:18:26,010
okay so why should I care the thing is

00:18:22,669 --> 00:18:29,039
it represents not only if an item is

00:18:26,010 --> 00:18:31,530
larger than another one it represents

00:18:29,039 --> 00:18:34,799
the cases an item is larger than the

00:18:31,530 --> 00:18:38,460
previous and item is equal and an item

00:18:34,799 --> 00:18:41,840
is smaller so what you should do like

00:18:38,460 --> 00:18:45,299
here or what you should do is excuse me

00:18:41,840 --> 00:18:49,530
is you need to produce a value between

00:18:45,299 --> 00:18:52,890
minus one and one so that the you sort

00:18:49,530 --> 00:18:56,130
function knows how they how these two

00:18:52,890 --> 00:18:59,190
items relate to each other and it even

00:18:56,130 --> 00:19:02,070
says in the PHP manual that if two

00:18:59,190 --> 00:19:04,679
members compare equal their ordering is

00:19:02,070 --> 00:19:07,980
not guaranteed so while it might work

00:19:04,679 --> 00:19:10,799
for you know I know might work for four

00:19:07,980 --> 00:19:13,169
years even but suddenly a little change

00:19:10,799 --> 00:19:15,900
that throws around the ordering of the

00:19:13,169 --> 00:19:18,480
array before they sorted nice change the

00:19:15,900 --> 00:19:22,789
sorting after it is sorted which the

00:19:18,480 --> 00:19:28,169
total no-go because in this case PHP PHP

00:19:22,789 --> 00:19:32,789
cannot cannot tell if a is smaller than

00:19:28,169 --> 00:19:34,500
B or is equal to B and so the fix is

00:19:32,789 --> 00:19:36,900
quite easy I mean you just have to swap

00:19:34,500 --> 00:19:40,679
out the operator PHP even provides one

00:19:36,900 --> 00:19:44,010
for that but this was just to show you

00:19:40,679 --> 00:19:49,350
that types safety really is something

00:19:44,010 --> 00:19:51,390
you should care about and but there's

00:19:49,350 --> 00:19:58,679
another thing I want to talk you I want

00:19:51,390 --> 00:20:02,549
to show you and this is metrics because

00:19:58,679 --> 00:20:06,150
the thing is we can try and satisfy

00:20:02,549 --> 00:20:10,160
tooling all we want but we might still

00:20:06,150 --> 00:20:14,760
want to have a have an easily possible

00:20:10,160 --> 00:20:17,760
quality measure a way to know if your

00:20:14,760 --> 00:20:20,970
software is going to is going in the

00:20:17,760 --> 00:20:23,760
right direction right if it becomes more

00:20:20,970 --> 00:20:25,530
maintainable not less you know people

00:20:23,760 --> 00:20:29,460
have to measure trees to know if they

00:20:25,530 --> 00:20:34,400
are sick and the first tool I have here

00:20:29,460 --> 00:20:37,710
for you is that track depth track itself

00:20:34,400 --> 00:20:39,780
can be configured through a dependency

00:20:37,710 --> 00:20:42,360
file and this again is a real-world

00:20:39,780 --> 00:20:45,420
example on a project I worked on like

00:20:42,360 --> 00:20:48,810
two years ago it was quite a legacy

00:20:45,420 --> 00:20:51,840
project and we tried to refactor it get

00:20:48,810 --> 00:20:56,340
it more maintainable so we could put it

00:20:51,840 --> 00:20:58,590
a bit on the backburner and I mean first

00:20:56,340 --> 00:21:01,200
of all you just tell it where does it

00:20:58,590 --> 00:21:04,410
find these software components in our

00:21:01,200 --> 00:21:06,660
component folder and we don't want the

00:21:04,410 --> 00:21:09,210
relationships of our test files with it

00:21:06,660 --> 00:21:11,520
because I mean tests are tests they can

00:21:09,210 --> 00:21:13,890
do whatever they want as long as they

00:21:11,520 --> 00:21:18,560
make sure that software works correctly

00:21:13,890 --> 00:21:23,060
and then this is the cool part you can

00:21:18,560 --> 00:21:26,790
customize what for depth track

00:21:23,060 --> 00:21:30,950
constitutes a module a dependency it's

00:21:26,790 --> 00:21:34,320
because if you plot out every class and

00:21:30,950 --> 00:21:37,260
their relationships to each other you

00:21:34,320 --> 00:21:39,570
will just get you know giant graph with

00:21:37,260 --> 00:21:43,830
like a million lines and you can't tell

00:21:39,570 --> 00:21:45,630
it apart from each other very good this

00:21:43,830 --> 00:21:49,260
problem has actually has a name it's

00:21:45,630 --> 00:21:51,690
called the big ball of Matt because you

00:21:49,260 --> 00:21:55,170
arrange your classes in a circle and

00:21:51,690 --> 00:21:58,920
then print out their print out their

00:21:55,170 --> 00:22:01,650
relationships as lines in the circle and

00:21:58,920 --> 00:22:04,080
for most software projects of a medium

00:22:01,650 --> 00:22:05,640
size just turns into one big black

00:22:04,080 --> 00:22:11,040
circle where you can't tell anything

00:22:05,640 --> 00:22:14,670
apart so we define our layers for

00:22:11,040 --> 00:22:16,890
example you know a CDN layer and the

00:22:14,670 --> 00:22:20,240
collector is what actually does the

00:22:16,890 --> 00:22:24,270
assignment of the

00:22:20,240 --> 00:22:27,090
classes to the respective modules so in

00:22:24,270 --> 00:22:29,930
this case we just go through the class

00:22:27,090 --> 00:22:32,580
names you have in this case a rec X and

00:22:29,930 --> 00:22:34,890
this rec extras checks the fully

00:22:32,580 --> 00:22:38,220
qualified class name so this is quite

00:22:34,890 --> 00:22:40,970
important cause maybe you want to have

00:22:38,220 --> 00:22:44,220
bowls that spend several several

00:22:40,970 --> 00:22:45,990
namespaces or just at some point further

00:22:44,220 --> 00:22:48,600
down have like a common ancestor or

00:22:45,990 --> 00:22:53,820
something so you can specify a whole

00:22:48,600 --> 00:22:56,550
parts of the namespace there then you

00:22:53,820 --> 00:22:58,170
can define your rule set because the

00:22:56,550 --> 00:22:59,190
nice thing about depth rec is that you

00:22:58,170 --> 00:23:01,590
can teach it

00:22:59,190 --> 00:23:04,260
what kind of dependencies do you want to

00:23:01,590 --> 00:23:06,930
avoid because I mean this is the reason

00:23:04,260 --> 00:23:09,720
we're doing this to figure out where we

00:23:06,930 --> 00:23:12,030
make mistakes and so in this case we

00:23:09,720 --> 00:23:13,710
have two components that really contain

00:23:12,030 --> 00:23:16,020
cross-cutting concerns

00:23:13,710 --> 00:23:18,870
they're called SDK and common you know

00:23:16,020 --> 00:23:23,270
stuff like logging messaging stuff like

00:23:18,870 --> 00:23:27,120
that you'd find in these two modules and

00:23:23,270 --> 00:23:29,730
we basically tell the pet track that

00:23:27,120 --> 00:23:31,770
every module is allowed to have

00:23:29,730 --> 00:23:36,300
dependencies on these two cross-cutting

00:23:31,770 --> 00:23:38,370
concerns but not on anything else so it

00:23:36,300 --> 00:23:41,970
took like I don't know an afternoon to

00:23:38,370 --> 00:23:46,590
get working and after we ran it we found

00:23:41,970 --> 00:23:48,690
this I mean we had we don't have that

00:23:46,590 --> 00:23:52,160
many modules but you have to keep in

00:23:48,690 --> 00:23:56,010
mind that each of these modules contains

00:23:52,160 --> 00:23:59,100
tons and tons of classes themselves so

00:23:56,010 --> 00:24:01,920
you know stuff like the updater was like

00:23:59,100 --> 00:24:04,140
the main component and that's why the

00:24:01,920 --> 00:24:05,850
other components depended on it for

00:24:04,140 --> 00:24:11,490
example here the index on what we call

00:24:05,850 --> 00:24:14,040
the social network and the problem that

00:24:11,490 --> 00:24:16,860
was becoming obvious here was that we

00:24:14,040 --> 00:24:18,990
had an application that was instead of

00:24:16,860 --> 00:24:22,410
you know a distributed monolith which

00:24:18,990 --> 00:24:24,510
was badly architecture microservices

00:24:22,410 --> 00:24:28,290
where every micro service knows about

00:24:24,510 --> 00:24:30,930
every other micro service and constantly

00:24:28,290 --> 00:24:33,270
works with everything else and you don't

00:24:30,930 --> 00:24:33,720
have any clear paths for your data to

00:24:33,270 --> 00:24:35,880
take

00:24:33,720 --> 00:24:38,990
we had something similar in a monolith

00:24:35,880 --> 00:24:42,030
we had components that wanted to be a

00:24:38,990 --> 00:24:43,980
modularized quite strongly but they

00:24:42,030 --> 00:24:46,880
didn't because at some point some

00:24:43,980 --> 00:24:49,740
developer probably inadvertently even

00:24:46,880 --> 00:24:51,570
built up dependencies because it was

00:24:49,740 --> 00:24:55,140
just you know the quick way to go

00:24:51,570 --> 00:25:01,800
through there so we came up with the

00:24:55,140 --> 00:25:03,540
idea to just use XML RPC because we used

00:25:01,800 --> 00:25:07,590
sticks and RPC and that project for some

00:25:03,540 --> 00:25:10,230
other things and to take all these

00:25:07,590 --> 00:25:12,960
dependencies and move them to an RPC

00:25:10,230 --> 00:25:15,740
interface so that the modules don't have

00:25:12,960 --> 00:25:17,370
to know about each other anymore and

00:25:15,740 --> 00:25:20,790
after a first

00:25:17,370 --> 00:25:23,390
I think months three weeks around that

00:25:20,790 --> 00:25:30,860
we were at that stage where we reduce

00:25:23,390 --> 00:25:35,100
the wrong dependencies by like 40 then

00:25:30,860 --> 00:25:37,650
after you know like two more months time

00:25:35,100 --> 00:25:40,170
with it we put quite a lot of work into

00:25:37,650 --> 00:25:43,920
this and we got this it's just perfectly

00:25:40,170 --> 00:25:46,470
fine and it becomes easy to understand

00:25:43,920 --> 00:25:48,570
that the SDK and the common bandar are

00:25:46,470 --> 00:25:52,340
cross-cutting concerns their base

00:25:48,570 --> 00:25:57,360
they're forming a layer below the rest

00:25:52,340 --> 00:25:59,700
so this is this is what just simple

00:25:57,360 --> 00:26:02,520
dependency tracking can do for you can

00:25:59,700 --> 00:26:05,870
make it obvious where there are like hot

00:26:02,520 --> 00:26:05,870
bets you want to refactor

00:26:12,299 --> 00:26:23,950
the next tool is PHP metrics PHP metrics

00:26:19,299 --> 00:26:26,860
is has quite the feature a quite quite

00:26:23,950 --> 00:26:31,000
amount of features as you can see by the

00:26:26,860 --> 00:26:33,759
dots on there and the thing is it can

00:26:31,000 --> 00:26:36,070
output like totally totally simple stuff

00:26:33,759 --> 00:26:38,590
like lines of code I mean I did it with

00:26:36,070 --> 00:26:42,490
you know a 30 year old UNIX command so

00:26:38,590 --> 00:26:46,179
that's nothing special you have stuff

00:26:42,490 --> 00:26:49,210
like cyclomatic complexity if you don't

00:26:46,179 --> 00:26:52,809
know cyclomatic complexity it basically

00:26:49,210 --> 00:26:56,710
models statically how many paths there

00:26:52,809 --> 00:26:59,830
are through a function so when you've

00:26:56,710 --> 00:27:02,470
got a function I mean that is cyclomatic

00:26:59,830 --> 00:27:04,600
complexity of I believe zero it might be

00:27:02,470 --> 00:27:08,039
one and nothing happens there you know

00:27:04,600 --> 00:27:11,799
data goes in data might come out easy

00:27:08,039 --> 00:27:13,779
but when you introduce and if suddenly

00:27:11,799 --> 00:27:16,240
you have two ways your data can go

00:27:13,779 --> 00:27:18,730
through the function it might go into

00:27:16,240 --> 00:27:20,769
that if it might not depending on a

00:27:18,730 --> 00:27:23,169
condition and so your cyclomatic

00:27:20,769 --> 00:27:25,720
complexity increases and then when

00:27:23,169 --> 00:27:27,789
you've got a loop in there you have even

00:27:25,720 --> 00:27:30,519
more possibilities like the loop might

00:27:27,789 --> 00:27:33,460
not loop once it might terminate

00:27:30,519 --> 00:27:37,149
somewhere in between so you got even

00:27:33,460 --> 00:27:39,190
more and if you put you know ifs in

00:27:37,149 --> 00:27:39,580
loops and loops and loops and stuff like

00:27:39,190 --> 00:27:42,909
that

00:27:39,580 --> 00:27:46,149
cyclomatic complexity balloons up so it

00:27:42,909 --> 00:27:48,159
is a measure of how complicated code is

00:27:46,149 --> 00:27:51,429
to understand because after all we are

00:27:48,159 --> 00:27:54,250
not computers if we run if we read this

00:27:51,429 --> 00:27:59,529
code we might not spot all the ways in

00:27:54,250 --> 00:28:05,019
this dysfunction performs and so it's a

00:27:59,529 --> 00:28:08,830
good thing to keep track of but as as I

00:28:05,019 --> 00:28:10,419
can tell you if you try and write or use

00:28:08,830 --> 00:28:12,970
test growth and development cyclomatic

00:28:10,419 --> 00:28:15,309
complexity tends to stay quite low per

00:28:12,970 --> 00:28:16,899
default but if you're not using

00:28:15,309 --> 00:28:22,119
test-driven development which basically

00:28:16,899 --> 00:28:24,129
most of us I included it will be a good

00:28:22,119 --> 00:28:25,930
measure of what function should be

00:28:24,129 --> 00:28:28,150
tested more intensely

00:28:25,930 --> 00:28:31,600
right because if your function has a

00:28:28,150 --> 00:28:34,840
high cyclomatic complexity of like 10 15

00:28:31,600 --> 00:28:38,350
or even 20 you know it's like maybe a

00:28:34,840 --> 00:28:41,020
hundred lines long and you only got one

00:28:38,350 --> 00:28:44,470
test for it that test might better be

00:28:41,020 --> 00:28:46,240
like gigantic to test through all the

00:28:44,470 --> 00:28:48,280
different cases and that functions or

00:28:46,240 --> 00:28:50,170
you have a problem because there might

00:28:48,280 --> 00:28:54,930
be a code path that behaves completely

00:28:50,170 --> 00:28:59,260
and and completely unknown

00:28:54,930 --> 00:29:02,620
so also what's pretty neat is the

00:28:59,260 --> 00:29:06,040
distributions of the lines of codes you

00:29:02,620 --> 00:29:08,920
have a nice graph with percentiles like

00:29:06,040 --> 00:29:11,920
I don't know the 50th percentile of your

00:29:08,920 --> 00:29:16,360
classes is below 50 lines of code stuff

00:29:11,920 --> 00:29:19,000
like that and like the 95th percentile

00:29:16,360 --> 00:29:23,170
it's like 400 these numbers I've got

00:29:19,000 --> 00:29:27,040
from Twix I just had a bit of spare time

00:29:23,170 --> 00:29:28,900
like last week and ran it on twig quite

00:29:27,040 --> 00:29:32,410
fast by the way I mean twig it's not

00:29:28,900 --> 00:29:35,770
that big but also not snow not small and

00:29:32,410 --> 00:29:38,290
it took like I don't know 10 seconds to

00:29:35,770 --> 00:29:40,750
run through it this does not even as far

00:29:38,290 --> 00:29:43,420
as I know does not even build a abstract

00:29:40,750 --> 00:29:47,440
syntax tree it really only looks at the

00:29:43,420 --> 00:29:50,200
code as text then you've got a quite the

00:29:47,440 --> 00:29:55,990
curious measure here the average box per

00:29:50,200 --> 00:29:58,090
class now a proper question for that

00:29:55,990 --> 00:30:01,150
would be well how do you know how many

00:29:58,090 --> 00:30:03,310
bugs are in code if you don't run it you

00:30:01,150 --> 00:30:06,400
don't test it you just look at it as

00:30:03,310 --> 00:30:09,100
text but this was the idea of some

00:30:06,400 --> 00:30:11,980
computer scientists like 40 years ago he

00:30:09,100 --> 00:30:15,340
basically looked at how many unique

00:30:11,980 --> 00:30:20,560
operators do you have in your code stuff

00:30:15,340 --> 00:30:24,780
like addition function calls stuff like

00:30:20,560 --> 00:30:28,630
return statements and how many unique

00:30:24,780 --> 00:30:30,820
operands do you have like variables I

00:30:28,630 --> 00:30:33,130
mean all kinds of areas are static

00:30:30,820 --> 00:30:39,220
variables stuff like that and by these

00:30:33,130 --> 00:30:42,909
measures you can calculate how come

00:30:39,220 --> 00:30:45,669
flex a piece of software is and then you

00:30:42,909 --> 00:30:48,100
can infer from this complexity through

00:30:45,669 --> 00:30:50,440
experimental results how probable it is

00:30:48,100 --> 00:30:53,740
that your code will contain a buck this

00:30:50,440 --> 00:30:58,059
is of course a bit of divining you know

00:30:53,740 --> 00:31:01,450
it's it's a pretty general measure so

00:30:58,059 --> 00:31:04,330
even very good code bases will have some

00:31:01,450 --> 00:31:08,200
number that is greater than zero by

00:31:04,330 --> 00:31:10,059
about average box per class but it might

00:31:08,200 --> 00:31:12,250
give you a good indication of how

00:31:10,059 --> 00:31:15,630
probable it is that your code does

00:31:12,250 --> 00:31:15,630
something you don't expect it to

00:31:15,700 --> 00:31:21,340
then it got efferent coupling and

00:31:18,360 --> 00:31:23,289
efferent coupling I hope I said that

00:31:21,340 --> 00:31:25,539
right I always get them mixed up and

00:31:23,289 --> 00:31:28,450
that's a non-native speaker afferent and

00:31:25,539 --> 00:31:32,350
efferent not the easiest to say either

00:31:28,450 --> 00:31:37,780
and the thing is about efferent coupling

00:31:32,350 --> 00:31:40,840
it's basically in what it's in what

00:31:37,780 --> 00:31:44,409
coupling so if you have a class in this

00:31:40,840 --> 00:31:47,169
class gets depended upon by other

00:31:44,409 --> 00:31:50,380
classes from your from your module

00:31:47,169 --> 00:31:52,929
this is afferent coupling and this

00:31:50,380 --> 00:31:56,110
basically means that the class has just

00:31:52,929 --> 00:31:58,770
used a lot in your code base on the

00:31:56,110 --> 00:32:03,669
other hand you have efferent coupling

00:31:58,770 --> 00:32:07,150
also called fan-out coupling and this

00:32:03,669 --> 00:32:11,919
coupling is how many other classes does

00:32:07,150 --> 00:32:15,220
your class use so the matter with these

00:32:11,919 --> 00:32:19,539
two is they give an indication how

00:32:15,220 --> 00:32:21,909
fragile your class might be because if

00:32:19,539 --> 00:32:25,720
you depend on a lot of more or less

00:32:21,909 --> 00:32:31,179
primitives classes objects structs from

00:32:25,720 --> 00:32:33,970
another from another software bundle it

00:32:31,179 --> 00:32:36,940
might break because well dependencies

00:32:33,970 --> 00:32:39,010
dependencies can change and when they

00:32:36,940 --> 00:32:40,720
change and they are used in a lot of

00:32:39,010 --> 00:32:43,960
different places these places might

00:32:40,720 --> 00:32:47,919
break and there's a measure for

00:32:43,960 --> 00:32:50,559
instability that is basically efferent

00:32:47,919 --> 00:32:53,410
coupling divided by efferent coupling

00:32:50,559 --> 00:32:56,620
plus efferent coupling so if

00:32:53,410 --> 00:32:58,570
/ the general coupling and this class

00:32:56,620 --> 00:33:02,890
means that if your class is more or less

00:32:58,570 --> 00:33:06,100
just a facade about above another piece

00:33:02,890 --> 00:33:10,210
of software it's not as hip hit as

00:33:06,100 --> 00:33:13,150
Hartley by the coupling effect if it's

00:33:10,210 --> 00:33:15,820
more of a user kind of class so it uses

00:33:13,150 --> 00:33:19,270
these other primitives then just hide

00:33:15,820 --> 00:33:21,130
them and last but not least it can

00:33:19,270 --> 00:33:23,320
output the class relationships that I

00:33:21,130 --> 00:33:25,300
just talked about with you know the big

00:33:23,320 --> 00:33:26,490
ball of bat and the grass that are not

00:33:25,300 --> 00:33:30,310
so easy to read

00:33:26,490 --> 00:33:34,030
PHP metrics has the nice the nice

00:33:30,310 --> 00:33:37,000
benefit of outputting an HTML site as an

00:33:34,030 --> 00:33:40,930
artifact so you can click around in it

00:33:37,000 --> 00:33:44,440
and you can have a look at that and it

00:33:40,930 --> 00:33:48,670
uses some JavaScript use some JavaScript

00:33:44,440 --> 00:33:50,980
to keep all the graphs readable and you

00:33:48,670 --> 00:33:55,900
know they highlight stuff they make

00:33:50,980 --> 00:33:59,380
links to files and it also can tell you

00:33:55,900 --> 00:34:04,300
about the maintainability so as I told

00:33:59,380 --> 00:34:08,560
you I've run this on twig and the thing

00:34:04,300 --> 00:34:12,280
about that is you can see lots of

00:34:08,560 --> 00:34:17,679
circles going in and all of these

00:34:12,280 --> 00:34:20,290
circles are a class and the size of this

00:34:17,679 --> 00:34:23,950
class is basically an indicator of how

00:34:20,290 --> 00:34:26,080
long it is so you know tiny classes will

00:34:23,950 --> 00:34:29,379
be somewhere here large classes will be

00:34:26,080 --> 00:34:31,600
outside and that color is representative

00:34:29,379 --> 00:34:35,290
of their maintainability which is an

00:34:31,600 --> 00:34:44,470
aggregated score of all the metrics I've

00:34:35,290 --> 00:34:47,679
shown you before so you know classes on

00:34:44,470 --> 00:34:51,129
top of here very cherry red quite big

00:34:47,679 --> 00:34:53,919
they are probable probable breaking

00:34:51,129 --> 00:34:56,470
points in your application should you

00:34:53,919 --> 00:34:58,300
want to change something or should any

00:34:56,470 --> 00:35:00,370
of your dependencies decide to change

00:34:58,300 --> 00:35:04,000
something which is quite common because

00:35:00,370 --> 00:35:07,860
after all your code is used by people

00:35:04,000 --> 00:35:10,600
and they may have changing

00:35:07,860 --> 00:35:12,640
requirements but also you might find

00:35:10,600 --> 00:35:15,430
security bugs and that's the point where

00:35:12,640 --> 00:35:17,800
hey we can't add another feature it's no

00:35:15,430 --> 00:35:19,810
longer a valid way to keep your code

00:35:17,800 --> 00:35:24,610
stable because whether you gotta fix

00:35:19,810 --> 00:35:27,490
security issues although it is nice that

00:35:24,610 --> 00:35:30,220
PHP metrics generates like a ton of

00:35:27,490 --> 00:35:36,220
different stuff and values and graphs

00:35:30,220 --> 00:35:39,160
and even a whole HTML page you want

00:35:36,220 --> 00:35:41,500
something that's more easy to digest and

00:35:39,160 --> 00:35:46,030
that's why I want to recommend recommend

00:35:41,500 --> 00:35:49,300
you PHP insides PHP insights it's a bit

00:35:46,030 --> 00:35:51,010
young it's very opinionated you

00:35:49,300 --> 00:35:53,800
definitely have to configure it if you

00:35:51,010 --> 00:35:56,350
run it because it this allows it

00:35:53,800 --> 00:35:58,390
disallow certain things like I think it

00:35:56,350 --> 00:36:02,020
says no comments and code and are no

00:35:58,390 --> 00:36:02,620
circumstances which is not that good an

00:36:02,020 --> 00:36:04,350
idea

00:36:02,620 --> 00:36:07,180
I mean you shouldn't just like write

00:36:04,350 --> 00:36:09,490
everything your method does inside the

00:36:07,180 --> 00:36:11,170
method but at some points maybe you're

00:36:09,490 --> 00:36:13,870
using something magic and you want to

00:36:11,170 --> 00:36:19,060
document that in the code for the next

00:36:13,870 --> 00:36:21,370
guy because it will be useful and this

00:36:19,060 --> 00:36:25,390
is the output of it I've just run on a

00:36:21,370 --> 00:36:27,430
plugin I'm currently developing and the

00:36:25,390 --> 00:36:31,750
really great thing why I like this is

00:36:27,430 --> 00:36:33,760
it's in CI CLI app so for developers is

00:36:31,750 --> 00:36:36,430
quite natural I mean you're running your

00:36:33,760 --> 00:36:41,080
tests you might as well run PHP insides

00:36:36,430 --> 00:36:43,330
and and since might say more about me

00:36:41,080 --> 00:36:45,730
than the tool but I really like the fact

00:36:43,330 --> 00:36:48,280
that it's got color coded output I mean

00:36:45,730 --> 00:36:53,050
not only does it look kind of pretty for

00:36:48,280 --> 00:36:55,480
a terminal app it also it's also

00:36:53,050 --> 00:36:58,780
rewarding to see like you know it will

00:36:55,480 --> 00:37:02,650
test you hey you did well and it's not

00:36:58,780 --> 00:37:04,210
to be underestimated right cause you

00:37:02,650 --> 00:37:07,870
want to feel good about your code and

00:37:04,210 --> 00:37:10,240
this helps you it does you know run some

00:37:07,870 --> 00:37:13,360
general analysis like yeah how much

00:37:10,240 --> 00:37:15,160
comments do you have classes and how big

00:37:13,360 --> 00:37:19,390
are your function stuff like that takes

00:37:15,160 --> 00:37:20,710
that apart then you have a complexity

00:37:19,390 --> 00:37:23,200
measure with

00:37:20,710 --> 00:37:27,490
just as I told about cyclomatic

00:37:23,200 --> 00:37:34,560
complexity basically and well we've got

00:37:27,490 --> 00:37:37,510
one one point called architecture and I

00:37:34,560 --> 00:37:41,470
mean it's maybe a bit of a controversial

00:37:37,510 --> 00:37:45,400
misnomer because architecture is more

00:37:41,470 --> 00:37:48,369
like how people envision software to be

00:37:45,400 --> 00:37:50,770
and how to how its modularized how it

00:37:48,369 --> 00:37:56,349
depends upon different parts of the

00:37:50,770 --> 00:37:58,510
software and so this does not do that so

00:37:56,349 --> 00:38:00,700
who architecture might be more aptly

00:37:58,510 --> 00:38:03,490
called clean code it checks that your

00:38:00,700 --> 00:38:05,020
interfaces are not too big it checks

00:38:03,490 --> 00:38:07,750
that you don't have functions that take

00:38:05,020 --> 00:38:11,140
like a million parameters stuff like

00:38:07,750 --> 00:38:15,070
that what I'm not showing you here but

00:38:11,140 --> 00:38:18,130
it's pretty neat the issues it's fine it

00:38:15,070 --> 00:38:20,560
finds it will show you them in this CLI

00:38:18,130 --> 00:38:24,369
with a bit of interaction so you can

00:38:20,560 --> 00:38:26,369
scroll through them one by one and they

00:38:24,369 --> 00:38:30,609
are a mixture of like slave or matte

00:38:26,369 --> 00:38:33,520
style style recommendations but also

00:38:30,609 --> 00:38:37,990
concrete ways where your function

00:38:33,520 --> 00:38:40,300
function header might be too big or you

00:38:37,990 --> 00:38:42,220
might have like gigantic cyclomatic

00:38:40,300 --> 00:38:44,680
complexity somewhere in a function like

00:38:42,220 --> 00:38:49,650
if you put four each in a while and then

00:38:44,680 --> 00:38:52,780
and if as well so these are the tools

00:38:49,650 --> 00:38:55,180
these are the general tools that I

00:38:52,780 --> 00:38:57,670
wanted to show you right these are the

00:38:55,180 --> 00:39:01,240
tools that we can use to keep our code

00:38:57,670 --> 00:39:03,910
clean but here's the thing we're safe

00:39:01,240 --> 00:39:07,599
we're software developers and not

00:39:03,910 --> 00:39:09,670
gardeners so this does not cut it

00:39:07,599 --> 00:39:14,470
right we need automation we need the

00:39:09,670 --> 00:39:18,430
really big guns so for that I mean I

00:39:14,470 --> 00:39:21,460
recommend you see I I think it's quite

00:39:18,430 --> 00:39:23,859
well adapted by now that a lot of you

00:39:21,460 --> 00:39:28,780
will use some form of CI maybe now at

00:39:23,859 --> 00:39:31,810
least maybe continually I mean right but

00:39:28,780 --> 00:39:34,520
the thing is just because you have your

00:39:31,810 --> 00:39:37,070
checks running in a server somewhere

00:39:34,520 --> 00:39:38,840
does not mean you should not use local

00:39:37,070 --> 00:39:43,580
you may you make these tools available

00:39:38,840 --> 00:39:46,430
locally because the thing is your CI

00:39:43,580 --> 00:39:48,950
will always be slower than running it

00:39:46,430 --> 00:39:51,650
locally simply because you've got

00:39:48,950 --> 00:39:55,040
limited resources on your CI server and

00:39:51,650 --> 00:39:57,380
I've seen it myself at a shop where we

00:39:55,040 --> 00:40:00,470
have like 50 people committing on a

00:39:57,380 --> 00:40:03,050
project and the CI server will almost

00:40:00,470 --> 00:40:05,840
burst into flames because it's all these

00:40:03,050 --> 00:40:08,360
jobs getting queued and cute and cute

00:40:05,840 --> 00:40:10,700
and then maybe somebody finds another

00:40:08,360 --> 00:40:12,590
pack does another rebase or something

00:40:10,700 --> 00:40:15,020
like that and every time the workload

00:40:12,590 --> 00:40:18,560
increases increases increases and every

00:40:15,020 --> 00:40:20,600
time they see I failed you will find a

00:40:18,560 --> 00:40:23,720
percent get another merge require you

00:40:20,600 --> 00:40:26,600
know get another task for the CI because

00:40:23,720 --> 00:40:29,510
well the developer fixed it and this

00:40:26,600 --> 00:40:32,750
means that running a task might take

00:40:29,510 --> 00:40:36,260
quite a while to get scheduled so you

00:40:32,750 --> 00:40:40,190
push us code in the repository you open

00:40:36,260 --> 00:40:42,710
up a merge request and suddenly you need

00:40:40,190 --> 00:40:45,310
to wait like half an hour on the result

00:40:42,710 --> 00:40:48,410
of your static analysis and tests and

00:40:45,310 --> 00:40:52,520
when they fail that's the moment where

00:40:48,410 --> 00:40:55,520
people say oh this just oh man I'm

00:40:52,520 --> 00:40:58,310
really down I'm really angry because you

00:40:55,520 --> 00:41:02,630
know just a lot of time and you expect

00:40:58,310 --> 00:41:04,550
it to to run successfully so the key

00:41:02,630 --> 00:41:06,260
takeaway I want to take you is you need

00:41:04,550 --> 00:41:09,710
to keep the friction low right you need

00:41:06,260 --> 00:41:12,820
to lubricate it and what better way to

00:41:09,710 --> 00:41:16,310
do that what better way to do that then

00:41:12,820 --> 00:41:19,820
making your tools available locally but

00:41:16,310 --> 00:41:22,190
the thing is in PHP if you were to go

00:41:19,820 --> 00:41:23,960
near a flea about adding these tools you

00:41:22,190 --> 00:41:26,600
might put them in your composer

00:41:23,960 --> 00:41:29,060
dependencies or force people to install

00:41:26,600 --> 00:41:31,340
them globally installing them globally

00:41:29,060 --> 00:41:33,500
is a bit bad because you have to tell

00:41:31,340 --> 00:41:35,180
people that it's hard for them to find

00:41:33,500 --> 00:41:40,730
out themselves because it needs to be

00:41:35,180 --> 00:41:44,690
documented somewhere and to keep a

00:41:40,730 --> 00:41:47,750
separation but still have it running

00:41:44,690 --> 00:41:48,300
automatically I can just warmly

00:41:47,750 --> 00:41:52,890
recommend

00:41:48,300 --> 00:41:55,620
ud bomani composable plugin it's quite a

00:41:52,890 --> 00:41:57,630
neat invention you basically install

00:41:55,620 --> 00:42:03,360
this plugin into a composer file and

00:41:57,630 --> 00:42:05,550
then the composer bin command will allow

00:42:03,360 --> 00:42:08,190
you to have name spaces for your

00:42:05,550 --> 00:42:10,350
composer dependencies you're basically

00:42:08,190 --> 00:42:14,630
automatically building tiny composer

00:42:10,350 --> 00:42:18,180
projects in each of these namespaces and

00:42:14,630 --> 00:42:22,320
in this case I have a PHP I have a PHP s

00:42:18,180 --> 00:42:23,520
then name space and require PHP standard

00:42:22,320 --> 00:42:25,380
that's all

00:42:23,520 --> 00:42:28,080
the composer bin plug-in will then

00:42:25,380 --> 00:42:32,820
automatically go open up a new composer

00:42:28,080 --> 00:42:35,190
jason in the PHP stand folder i'm more

00:42:32,820 --> 00:42:39,240
precisely in the bin slash PHP stand

00:42:35,190 --> 00:42:41,340
folder and it will manage the

00:42:39,240 --> 00:42:43,560
dependencies there so you no longer have

00:42:41,340 --> 00:42:45,810
a problem with dependencies because your

00:42:43,560 --> 00:42:48,530
CLI tools might update at different

00:42:45,810 --> 00:42:51,140
rates and when you know a very common

00:42:48,530 --> 00:42:55,530
dependency like Symphony's command

00:42:51,140 --> 00:42:57,690
updates then your tools might break

00:42:55,530 --> 00:42:59,730
because they all want a different

00:42:57,690 --> 00:43:00,690
version of symphony right some updated

00:42:59,730 --> 00:43:03,390
some didn't

00:43:00,690 --> 00:43:06,480
maybe the project's gonna bit into a

00:43:03,390 --> 00:43:07,230
hiatus and so you want that and

00:43:06,480 --> 00:43:10,040
capsulated

00:43:07,230 --> 00:43:13,080
and the bin plugin helps you with that

00:43:10,040 --> 00:43:15,720
so the result of running these commands

00:43:13,080 --> 00:43:18,510
is trust this file tree you have a

00:43:15,720 --> 00:43:20,250
vendor bin folder and in the vendor bin

00:43:18,510 --> 00:43:22,980
folder you find your namespaces

00:43:20,250 --> 00:43:26,880
decomposer jason's and locks for it and

00:43:22,980 --> 00:43:30,000
it also installs the vendor event or

00:43:26,880 --> 00:43:33,740
folders fetches the dependencies and you

00:43:30,000 --> 00:43:36,810
can also run stuff like composer bin all

00:43:33,740 --> 00:43:39,080
so if you want to update your tooling

00:43:36,810 --> 00:43:45,570
you just have to run one command to

00:43:39,080 --> 00:43:48,030
update all your tools at once and the

00:43:45,570 --> 00:43:51,480
thing is the thing that makes this

00:43:48,030 --> 00:43:54,500
really good is that you now have tools

00:43:51,480 --> 00:43:57,120
like spread across the file system but

00:43:54,500 --> 00:44:01,290
the composer plugin does another neat

00:43:57,120 --> 00:44:02,109
thing it symlinks the executables you

00:44:01,290 --> 00:44:04,029
find in each

00:44:02,109 --> 00:44:08,200
and every one of these vendor bin

00:44:04,029 --> 00:44:10,960
folders to your main venue our bin so

00:44:08,200 --> 00:44:14,109
for the user it looks like these are

00:44:10,960 --> 00:44:15,940
dependencies of your project in use you

00:44:14,109 --> 00:44:16,839
know like bend or bin PHP stands

00:44:15,940 --> 00:44:19,180
something like that

00:44:16,839 --> 00:44:21,190
but in reality then capsulated and

00:44:19,180 --> 00:44:35,739
you're not in dependency hell with these

00:44:21,190 --> 00:44:38,650
applications next thing I mean having an

00:44:35,739 --> 00:44:44,130
capsulated tooling that comes with your

00:44:38,650 --> 00:44:47,259
with your repository is very nice but

00:44:44,130 --> 00:44:49,180
what I also want to tell you is you can

00:44:47,259 --> 00:44:50,890
still make it a bit more easier most

00:44:49,180 --> 00:44:53,319
people don't want to run like five

00:44:50,890 --> 00:44:56,339
commands to get everything installed and

00:44:53,319 --> 00:44:58,920
so I mean I prefer make file for example

00:44:56,339 --> 00:45:02,339
it's an old and better approval tool

00:44:58,920 --> 00:45:07,390
these syntax is admittedly a bit weird

00:45:02,339 --> 00:45:10,089
but with stuff like make file you can

00:45:07,390 --> 00:45:14,349
just encapsulate even your commands like

00:45:10,089 --> 00:45:16,359
the easy coding style will check in will

00:45:14,349 --> 00:45:18,700
check and dry mode and then you've got

00:45:16,359 --> 00:45:20,680
another command to just append a fix I

00:45:18,700 --> 00:45:22,839
mean you might say oh great this saves

00:45:20,680 --> 00:45:28,930
you like five characters but it adds up

00:45:22,839 --> 00:45:32,079
it's just accelerating your point and I

00:45:28,930 --> 00:45:34,779
mean the same for aesthetic analysis you

00:45:32,079 --> 00:45:37,450
can adjust at more and more tools they

00:45:34,779 --> 00:45:40,599
are the same way they run in your CLI

00:45:37,450 --> 00:45:44,019
and with stuff like with stuff like

00:45:40,599 --> 00:45:46,329
these pipes you can also require

00:45:44,019 --> 00:45:48,819
different commands running in order so

00:45:46,329 --> 00:45:51,579
it will automatically run a composer

00:45:48,819 --> 00:45:53,230
install before it runs your tools if it

00:45:51,579 --> 00:45:57,400
doesn't find a composer log file or

00:45:53,230 --> 00:46:01,509
something of course there are some

00:45:57,400 --> 00:46:03,430
alternatives you might want to prefer

00:46:01,509 --> 00:46:05,499
writing plain shell scripts that's

00:46:03,430 --> 00:46:08,890
totally fine as well and also more

00:46:05,499 --> 00:46:11,619
compatible with most common sea ice or

00:46:08,890 --> 00:46:16,390
even PHP I got a colleague that wrote

00:46:11,619 --> 00:46:18,700
basically a whole build tool in PHP

00:46:16,390 --> 00:46:21,460
to run shell scripts in a more organized

00:46:18,700 --> 00:46:23,279
fashion and I mean there are thousands

00:46:21,460 --> 00:46:26,049
of other ways I mean you could use

00:46:23,279 --> 00:46:28,119
whatever kind of make fact like I guess

00:46:26,049 --> 00:46:31,690
see make would be a possibility if

00:46:28,119 --> 00:46:33,759
you're into that or outlandish stuff

00:46:31,690 --> 00:46:35,470
like writing your own to write your own

00:46:33,759 --> 00:46:38,079
application and something else maybe

00:46:35,470 --> 00:46:41,170
JavaScript or something fall I care you

00:46:38,079 --> 00:46:44,410
might input it into NPM the most

00:46:41,170 --> 00:46:46,769
important part is that it's easy for

00:46:44,410 --> 00:46:49,329
your developers to use your tooling and

00:46:46,769 --> 00:46:51,819
with that I want to thank you all for

00:46:49,329 --> 00:46:54,180
attending my talk and I wish you all a

00:46:51,819 --> 00:46:54,180

YouTube URL: https://www.youtube.com/watch?v=bYYpCkmjdYo


