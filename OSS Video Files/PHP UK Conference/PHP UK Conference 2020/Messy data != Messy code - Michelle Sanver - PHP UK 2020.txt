Title: Messy data != Messy code - Michelle Sanver - PHP UK 2020
Publication date: 2020-03-11
Playlist: PHP UK Conference 2020
Description: 
	The role of our API in Switzerland is to consume a lot of data that was not meant for a digital age and to transform it into beautiful output, for one of the biggest retailers in Switzerland. This is a journey of consuming a lot of data and APIs from different sources and in different formats. Some of them made us laugh, some of us got migraines. We built a smooth architecture to consume and output data. I am proud of our architecture that we seamlessly upgraded to keep the latest versions, now Symfony 4 along the way. I want to share with you how we managed to keep this API up to date for over 5 years and the architecture that we use to make it happen.
Captions: 
	00:00:02,760 --> 00:00:11,090
hi I'm here today to talk about

00:00:06,689 --> 00:00:13,469
something I'm very very passionate about

00:00:11,090 --> 00:00:17,279
code and master data

00:00:13,469 --> 00:00:19,259
yes I'm passionate about messy data but

00:00:17,279 --> 00:00:24,119
I'm mostly passionate about making it

00:00:19,259 --> 00:00:25,800
beautiful so a wise man once said learn

00:00:24,119 --> 00:00:31,790
the most by sharing your knowledge with

00:00:25,800 --> 00:00:34,410
others so here I am on stage today and

00:00:31,790 --> 00:00:36,600
in case this talk is not interesting to

00:00:34,410 --> 00:00:39,510
you and you get nothing else out of this

00:00:36,600 --> 00:00:42,960
talk here's a picture of me with the

00:00:39,510 --> 00:00:46,699
dragon she's the one who causes those

00:00:42,960 --> 00:00:51,350
Friday fires you're so afraid to deploy

00:00:46,699 --> 00:00:55,230
I'm Michelle summer I'm an addict I

00:00:51,350 --> 00:00:57,390
color and code addict so it's nothing

00:00:55,230 --> 00:00:59,340
and working to get rid of I've been

00:00:57,390 --> 00:01:02,550
programming since I was a little child

00:00:59,340 --> 00:01:07,260
and I never really wanted to stop I just

00:01:02,550 --> 00:01:10,050
kept doing it and it's great so that you

00:01:07,260 --> 00:01:13,860
don't spend the entire talk wondering

00:01:10,050 --> 00:01:16,620
about my accents I'm from Sweden I'm

00:01:13,860 --> 00:01:20,700
half Danish I lived in Netherlands for

00:01:16,620 --> 00:01:26,720
six years and since 2014 I live in

00:01:20,700 --> 00:01:30,870
Switzerland so it's European in

00:01:26,720 --> 00:01:36,200
Switzerland I work at this really

00:01:30,870 --> 00:01:38,490
amazing company called leaf we are

00:01:36,200 --> 00:01:41,640
self-managed which means I am my own

00:01:38,490 --> 00:01:43,890
manager and it also means it's really

00:01:41,640 --> 00:01:49,170
tricky to fire people because I don't

00:01:43,890 --> 00:01:53,070
like doing that so basically we can do

00:01:49,170 --> 00:01:57,770
anything we want at leat except we can't

00:01:53,070 --> 00:01:57,770
because we still have to get paid in

00:01:57,860 --> 00:02:07,980
basically yeah it's great how many

00:02:02,550 --> 00:02:11,129
people here have heard of leap before ok

00:02:07,980 --> 00:02:12,750
the people who already know me I was

00:02:11,129 --> 00:02:14,099
gonna take a picture of all the people

00:02:12,750 --> 00:02:16,010
putting your hand stuff because you

00:02:14,099 --> 00:02:22,040
heard of leap and it's cool

00:02:16,010 --> 00:02:24,080
that's not so leap is a web agency in

00:02:22,040 --> 00:02:27,349
this agency I've been working with the

00:02:24,080 --> 00:02:30,920
same thing since I started and more than

00:02:27,349 --> 00:02:33,440
five years ago we built a product that

00:02:30,920 --> 00:02:36,890
improves the way the Swiss people do

00:02:33,440 --> 00:02:39,319
shopping that's pretty cool because it

00:02:36,890 --> 00:02:41,090
also improves the way I do something how

00:02:39,319 --> 00:02:47,599
often do you get to be a consumer of

00:02:41,090 --> 00:02:50,269
your own product I love that a little

00:02:47,599 --> 00:02:54,950
bit of a disclaimer I do a lot of

00:02:50,269 --> 00:02:57,560
ranting in the stock retailer data is a

00:02:54,950 --> 00:03:01,970
really complex business and I don't mean

00:02:57,560 --> 00:03:04,790
to be condescending or whatever

00:03:01,970 --> 00:03:07,670
we have nothing against our data

00:03:04,790 --> 00:03:10,340
providers they all have a lot of data

00:03:07,670 --> 00:03:13,690
that was not meant for a digital age and

00:03:10,340 --> 00:03:17,060
it's our job to take that messy data and

00:03:13,690 --> 00:03:20,150
convert it to a digital age it's their

00:03:17,060 --> 00:03:26,049
job to provide us with the data so it's

00:03:20,150 --> 00:03:28,669
messy but it's okay this talk is for

00:03:26,049 --> 00:03:32,120
everyone I hope that everyone can get

00:03:28,669 --> 00:03:34,970
something out of it some concepts may be

00:03:32,120 --> 00:03:37,459
a little bit confusing and specifically

00:03:34,970 --> 00:03:38,959
if you haven't used symphony before how

00:03:37,459 --> 00:03:42,410
many of you have used Symphony the

00:03:38,959 --> 00:03:46,340
framework before okay so it's probably

00:03:42,410 --> 00:03:48,230
not that confusing but if it is

00:03:46,340 --> 00:03:51,620
confusing I have any questions I will

00:03:48,230 --> 00:03:53,930
have a Q&A in the end so you can write

00:03:51,620 --> 00:03:58,540
down your questions and I'll try to

00:03:53,930 --> 00:04:02,269
answer them or answer them in the break

00:03:58,540 --> 00:04:05,209
so the agenda today first I will talk

00:04:02,269 --> 00:04:08,329
about the project the biggest retailer

00:04:05,209 --> 00:04:12,319
Switzerland then I will discuss some

00:04:08,329 --> 00:04:14,980
challenges so it's a huge API how did we

00:04:12,319 --> 00:04:17,590
solve this you realize the bottleneck

00:04:14,980 --> 00:04:20,199
when we import the data and the

00:04:17,590 --> 00:04:22,669
third-party data provided lies to you

00:04:20,199 --> 00:04:26,210
it's supposed to be a string why is it

00:04:22,669 --> 00:04:29,750
suddenly an object I don't know and

00:04:26,210 --> 00:04:33,620
mapping how we map the data to contain a

00:04:29,750 --> 00:04:38,479
mess in one little place with unicorns

00:04:33,620 --> 00:04:40,759
and then I will talk how we evolved in a

00:04:38,479 --> 00:04:42,789
symphony project how we kept that

00:04:40,759 --> 00:04:45,979
project up to date I would still love

00:04:42,789 --> 00:04:49,550
working in that code today was still the

00:04:45,979 --> 00:04:50,479
same team today developers that we were

00:04:49,550 --> 00:04:52,520
five years ago

00:04:50,479 --> 00:04:55,099
and that's really really rare in this

00:04:52,520 --> 00:04:57,080
industry to everyone to keep working

00:04:55,099 --> 00:05:02,410
together for so long and how did we do

00:04:57,080 --> 00:05:04,699
that so let's talk about the future I

00:05:02,410 --> 00:05:10,370
wanted to have one of these Star Wars

00:05:04,699 --> 00:05:12,580
screens in a country far far away it

00:05:10,370 --> 00:05:16,039
started as a small API

00:05:12,580 --> 00:05:19,880
it was meant in the beginning to output

00:05:16,039 --> 00:05:21,770
a few products and a website and then

00:05:19,880 --> 00:05:24,949
the retailer thought okay this is really

00:05:21,770 --> 00:05:27,020
cool we can actually give them all our

00:05:24,949 --> 00:05:29,000
data and it looks nice in the end so

00:05:27,020 --> 00:05:31,610
they just kept giving us data giving us

00:05:29,000 --> 00:05:34,610
data year after year after year we'll

00:05:31,610 --> 00:05:38,090
keep adding features and now there's a

00:05:34,610 --> 00:05:41,180
whole range of websites that this

00:05:38,090 --> 00:05:43,940
retailer has using our API and apps and

00:05:41,180 --> 00:05:47,990
everything and even the cash registers

00:05:43,940 --> 00:05:52,130
are using our API now so that's started

00:05:47,990 --> 00:05:54,020
as a small API for a website to

00:05:52,130 --> 00:05:56,570
something really complicated the cash

00:05:54,020 --> 00:05:59,659
registers use our guru organically and

00:05:56,570 --> 00:06:04,580
we managed to do that because we kept a

00:05:59,659 --> 00:06:08,240
code up to date we have a huge

00:06:04,580 --> 00:06:10,780
technology stack and there's no way one

00:06:08,240 --> 00:06:13,669
person in our team can know everything

00:06:10,780 --> 00:06:18,259
so we use mainly symphony and

00:06:13,669 --> 00:06:20,750
elasticsearch we use rabbitmq for

00:06:18,259 --> 00:06:23,349
killing we use my scale to store the

00:06:20,750 --> 00:06:27,310
original data we use Redis for caching

00:06:23,349 --> 00:06:31,460
we use new relic and health check for

00:06:27,310 --> 00:06:36,620
monitoring and we use ex debug of course

00:06:31,460 --> 00:06:39,470
for debugging we are opening PHP CS fix

00:06:36,620 --> 00:06:42,370
a PHP Stan node

00:06:39,470 --> 00:06:48,980
JAAA son react for admin panel and

00:06:42,370 --> 00:06:53,330
golang because log with kids and since

00:06:48,980 --> 00:06:54,680
there's so many and Symphony people in

00:06:53,330 --> 00:06:58,550
this room were at least people who are

00:06:54,680 --> 00:07:00,890
know soon funny yes we have an API no we

00:06:58,550 --> 00:07:02,690
don't use API platform and if you don't

00:07:00,890 --> 00:07:04,490
know about if you have pad platform

00:07:02,690 --> 00:07:07,660
don't worry about it it's just a

00:07:04,490 --> 00:07:11,920
disclaimer so that you don't wonder

00:07:07,660 --> 00:07:16,040
further on in the talk and get confused

00:07:11,920 --> 00:07:18,050
so this is us this is our team Timur is

00:07:16,040 --> 00:07:21,980
the new Pio so he doesn't have a cool

00:07:18,050 --> 00:07:26,630
colorful picture yet but we are its

00:07:21,980 --> 00:07:33,310
developers ray Toby Christian Teresa

00:07:26,630 --> 00:07:37,250
Martin David Mandela and me and we all

00:07:33,310 --> 00:07:40,250
have the same role in our development

00:07:37,250 --> 00:07:42,500
team we try to not distinguish between

00:07:40,250 --> 00:07:44,780
who has the most experience as the least

00:07:42,500 --> 00:07:48,230
experienced it doesn't matter because we

00:07:44,780 --> 00:07:50,120
all have inputs and we all have eyes and

00:07:48,230 --> 00:07:53,419
we all think of things in different ways

00:07:50,120 --> 00:07:56,960
and that's one of the keys to this no

00:07:53,419 --> 00:08:00,260
hierarchy and then when we have Timur

00:07:56,960 --> 00:08:04,160
and Colin who keeps us sane when there's

00:08:00,260 --> 00:08:06,140
a lot of customers trying to talk to us

00:08:04,160 --> 00:08:09,290
and then the flio

00:08:06,140 --> 00:08:12,169
are a scrum master who is way too

00:08:09,290 --> 00:08:14,540
passionate about agile it's scary and

00:08:12,169 --> 00:08:16,700
then there's that guy who's really

00:08:14,540 --> 00:08:18,950
annoying because he throw a problem at

00:08:16,700 --> 00:08:21,500
him and he solves it when you have been

00:08:18,950 --> 00:08:23,840
trying to solve within two days it's all

00:08:21,500 --> 00:08:26,090
set in ten minutes that's Craig we call

00:08:23,840 --> 00:08:34,039
him our cloud tamer in lack of a better

00:08:26,090 --> 00:08:37,310
role so in this talk I will now assume

00:08:34,039 --> 00:08:40,190
you know what symphonies and the general

00:08:37,310 --> 00:08:44,690
structure of symphony when I talk about

00:08:40,190 --> 00:08:47,720
controllers services or config I expect

00:08:44,690 --> 00:08:49,580
you don't get confused but if you do get

00:08:47,720 --> 00:08:52,280
confused that's fine that's not the main

00:08:49,580 --> 00:08:54,800
part of this talk

00:08:52,280 --> 00:08:56,390
this is our API very very simplified

00:08:54,800 --> 00:08:59,330
there's a lot more to it

00:08:56,390 --> 00:08:59,960
so we have our rest controllers using

00:08:59,330 --> 00:09:04,810
the rest

00:08:59,960 --> 00:09:09,350
bundle phosphorus panel we have

00:09:04,810 --> 00:09:11,780
sterilizing elasticsearch mapping MySQL

00:09:09,350 --> 00:09:13,400
importing and the data provider so if

00:09:11,780 --> 00:09:15,500
you look from the bottom the taster

00:09:13,400 --> 00:09:19,790
provider gives us data we import that

00:09:15,500 --> 00:09:22,850
original data into MySQL we store that

00:09:19,790 --> 00:09:26,600
data there and then from my scale we map

00:09:22,850 --> 00:09:28,510
that data into elastic search an elastic

00:09:26,600 --> 00:09:30,890
search is the source of beautiful data

00:09:28,510 --> 00:09:36,950
that we done serialize to get the

00:09:30,890 --> 00:09:40,250
outputs that the consumers requests so

00:09:36,950 --> 00:09:44,480
I'm not going to talk about controllers

00:09:40,250 --> 00:09:46,610
or API at all in this talk but if you

00:09:44,480 --> 00:09:52,160
have any questions about it later feel

00:09:46,610 --> 00:09:58,270
free to ask so let's jump into the

00:09:52,160 --> 00:10:04,610
challenges did I mention that our API is

00:09:58,270 --> 00:10:08,870
huge both code and data so if we look at

00:10:04,610 --> 00:10:12,980
just the code the source folder is eight

00:10:08,870 --> 00:10:18,860
point seven megabytes with 2067 items

00:10:12,980 --> 00:10:23,570
tests is a bit larger because for

00:10:18,860 --> 00:10:25,730
fixtures a config is 329 items in it and

00:10:23,570 --> 00:10:33,170
then I'm a bit afraid to show you the

00:10:25,730 --> 00:10:35,210
vendor folder and that's just code so

00:10:33,170 --> 00:10:42,290
this is the structure that we have in

00:10:35,210 --> 00:10:44,330
our API under API that's basically our

00:10:42,290 --> 00:10:48,890
domain in here we have things like

00:10:44,330 --> 00:10:52,310
products disk Arabs coupons and we name

00:10:48,890 --> 00:10:56,300
everything that clients it's the

00:10:52,310 --> 00:10:59,510
third-party clients for the data

00:10:56,300 --> 00:11:01,400
providers that gets us the data and then

00:10:59,510 --> 00:11:05,900
we have infrastructure for everything

00:11:01,400 --> 00:11:07,880
that we need to do in between

00:11:05,900 --> 00:11:11,780
and migration for data and Doctrine

00:11:07,880 --> 00:11:17,260
migrations and a few loose things that

00:11:11,780 --> 00:11:20,660
make sense so one of the challenges is

00:11:17,260 --> 00:11:24,490
importing a lot of data and not just

00:11:20,660 --> 00:11:28,070
from one source how do you import data

00:11:24,490 --> 00:11:33,140
from all these sources and put it in one

00:11:28,070 --> 00:11:38,510
nice system this is the part of our API

00:11:33,140 --> 00:11:45,560
that does that well it's importing a lot

00:11:38,510 --> 00:11:50,060
and it's data providers so the way we

00:11:45,560 --> 00:11:52,640
import data is with import commands so

00:11:50,060 --> 00:11:55,430
we have a command and symfony and that

00:11:52,640 --> 00:12:01,090
talks to our data providers and imports

00:11:55,430 --> 00:12:06,260
it into MySQL we also have workers using

00:12:01,090 --> 00:12:10,190
RabbitMQ and this is really really

00:12:06,260 --> 00:12:13,220
really really important and crucial we

00:12:10,190 --> 00:12:16,250
store their original data in MySQL

00:12:13,220 --> 00:12:19,820
because if we don't do that and we map

00:12:16,250 --> 00:12:21,980
the data then we don't know if something

00:12:19,820 --> 00:12:25,820
went wrong because we will make bugs

00:12:21,980 --> 00:12:28,760
we can't remap it we have to re-import

00:12:25,820 --> 00:12:31,580
it from the data provider and it becomes

00:12:28,760 --> 00:12:33,860
a huge mess always doesn't have to be my

00:12:31,580 --> 00:12:40,060
scale but always find somewhere to store

00:12:33,860 --> 00:12:42,860
the data important lesson learned so

00:12:40,060 --> 00:12:46,960
problem is that any of the data

00:12:42,860 --> 00:12:51,400
providers can send us data at any time

00:12:46,960 --> 00:12:55,370
and when it happens we have to make sure

00:12:51,400 --> 00:12:57,350
we can handle it and they can send us a

00:12:55,370 --> 00:13:00,080
lot of data at any time they can send us

00:12:57,350 --> 00:13:03,440
millions of product updates let's say a

00:13:00,080 --> 00:13:05,720
category changed names the main category

00:13:03,440 --> 00:13:09,830
of this big retailer the mission has

00:13:05,720 --> 00:13:12,110
millions of updates so then we have

00:13:09,830 --> 00:13:14,720
queues and workers without the scaling

00:13:12,110 --> 00:13:19,760
to handle this how many people worked

00:13:14,720 --> 00:13:21,710
with queuing before most of you

00:13:19,760 --> 00:13:25,510
for the ones who didn't and if you have

00:13:21,710 --> 00:13:25,510
questions feel free to ask it later

00:13:25,930 --> 00:13:33,980
so our queues in queueing we used to use

00:13:29,330 --> 00:13:35,690
the amqp RabbitMQ plugin but we recently

00:13:33,980 --> 00:13:43,390
switched to same from the messenger

00:13:35,690 --> 00:13:47,060
which is so much nicer basically

00:13:43,390 --> 00:13:51,830
Symphony messenger took a lot of time of

00:13:47,060 --> 00:13:53,690
switching this is just a couple of pull

00:13:51,830 --> 00:13:56,360
requests that a colleague of mine made

00:13:53,690 --> 00:13:58,370
Symphony messenger itself when we

00:13:56,360 --> 00:14:00,260
started working on it so it's actually

00:13:58,370 --> 00:14:03,220
thanks to our project the same when a

00:14:00,260 --> 00:14:09,380
messenger is so cool today

00:14:03,220 --> 00:14:11,360
nice so here's his merge request 167

00:14:09,380 --> 00:14:15,980
change is just switching to Symphony

00:14:11,360 --> 00:14:23,050
messenger so you can see there was a

00:14:15,980 --> 00:14:23,050
discussion 49 comments yeah

00:14:23,770 --> 00:14:31,210
switching to Symphony messenger

00:14:26,440 --> 00:14:33,620
simplified our code a lot so normally

00:14:31,210 --> 00:14:36,680
with an aquiline you would have to

00:14:33,620 --> 00:14:39,710
define your cues and you have to define

00:14:36,680 --> 00:14:43,400
your workers and everything but with

00:14:39,710 --> 00:14:46,850
Symphony messenger you can remove a lot

00:14:43,400 --> 00:14:52,520
of that boilerplate code and that's the

00:14:46,850 --> 00:14:56,350
result you see here it forced us to use

00:14:52,520 --> 00:15:00,020
more value objects before we had the

00:14:56,350 --> 00:15:03,020
AMQP envelope and it forced us to write

00:15:00,020 --> 00:15:05,990
better code now we have a category

00:15:03,020 --> 00:15:09,290
deleted message for instance and

00:15:05,990 --> 00:15:11,480
everything is clear now we know what

00:15:09,290 --> 00:15:14,660
message we get and everything is clear

00:15:11,480 --> 00:15:16,730
it's not just Jason blubber and XML blob

00:15:14,660 --> 00:15:19,250
before of course who could have done

00:15:16,730 --> 00:15:23,870
this before but we didn't because it's

00:15:19,250 --> 00:15:29,770
so easy not to so I love when components

00:15:23,870 --> 00:15:31,960
force you to write better code yeah

00:15:29,770 --> 00:15:34,660
so before I couldn't even show you in

00:15:31,960 --> 00:15:39,790
one screen all the commands we have but

00:15:34,660 --> 00:15:43,600
now I can use messenger consume I showed

00:15:39,790 --> 00:15:48,370
you that so switching to messenger was

00:15:43,600 --> 00:15:52,600
well worth the time and how many are you

00:15:48,370 --> 00:15:55,870
soon for the messenger almost no one but

00:15:52,600 --> 00:15:58,870
a lot of you have been using queues and

00:15:55,870 --> 00:16:00,400
a lot of you know about symphony so you

00:15:58,870 --> 00:16:06,850
can hear Symphony messenger without

00:16:00,400 --> 00:16:08,950
using symphony and it's a very you can

00:16:06,850 --> 00:16:13,180
it's a tool that doesn't depend on

00:16:08,950 --> 00:16:15,070
RabbitMQ or Kafka you can it's a generic

00:16:13,180 --> 00:16:17,470
tool which really helps because if we

00:16:15,070 --> 00:16:21,120
now want to switch to Kafka we can very

00:16:17,470 --> 00:16:24,130
easily do that so play around with it

00:16:21,120 --> 00:16:25,690
and I love that we could give back to

00:16:24,130 --> 00:16:29,770
the symphony community where it is

00:16:25,690 --> 00:16:32,530
beautiful but actually the one thing me

00:16:29,770 --> 00:16:34,890
as a developer love the most in my

00:16:32,530 --> 00:16:40,090
day-to-day work with Symphony messenger

00:16:34,890 --> 00:16:41,890
before with rabbits MQ I couldn't exit

00:16:40,090 --> 00:16:46,740
the worker would come troll see I can do

00:16:41,890 --> 00:16:50,500
that now yay it reminds me of this whim

00:16:46,740 --> 00:16:52,990
joke we're trying to exit them every

00:16:50,500 --> 00:16:57,960
time someone tries to exit a worker it

00:16:52,990 --> 00:17:01,990
fast like that so let's talk about

00:16:57,960 --> 00:17:06,810
consuming bad in quotes api's without

00:17:01,990 --> 00:17:09,880
crying or becoming an alcoholic so first

00:17:06,810 --> 00:17:13,230
let's talk about somewhat api's that we

00:17:09,880 --> 00:17:18,490
do consume that are not that great and

00:17:13,230 --> 00:17:22,860
one of them i call so fish api so they

00:17:18,490 --> 00:17:28,930
do at first I had a soap API with one

00:17:22,860 --> 00:17:33,600
request which said action or something

00:17:28,930 --> 00:17:36,220
like this and that worked and soap and

00:17:33,600 --> 00:17:36,760
you sent it your XML and everything's

00:17:36,220 --> 00:17:38,710
great

00:17:36,760 --> 00:17:41,500
but they decided to do that with rest

00:17:38,710 --> 00:17:42,929
and then in a post party you're supposed

00:17:41,500 --> 00:17:45,179
to define what

00:17:42,929 --> 00:17:48,330
one from them it's really messy it's

00:17:45,179 --> 00:17:55,009
really confusing that's not the restful

00:17:48,330 --> 00:17:58,440
soap so then we have the flexible API

00:17:55,009 --> 00:18:02,419
which means they basically have a key

00:17:58,440 --> 00:18:08,100
value store for complex data and then

00:18:02,419 --> 00:18:12,149
it's like using readies for objects it

00:18:08,100 --> 00:18:14,820
doesn't really work it's a in their

00:18:12,149 --> 00:18:18,450
flexible API they try to be so flexible

00:18:14,820 --> 00:18:23,879
that you tell them what you want in the

00:18:18,450 --> 00:18:26,340
URL so if I want Product ID and a name

00:18:23,879 --> 00:18:30,119
for instance I say in the URL I want to

00:18:26,340 --> 00:18:35,879
field Product ID and name and then I get

00:18:30,119 --> 00:18:38,129
a JSON response and then it gives me a

00:18:35,879 --> 00:18:40,320
pointer to get the string of that

00:18:38,129 --> 00:18:42,450
Product ID because it just says it's a

00:18:40,320 --> 00:18:44,190
string and here it's the string is

00:18:42,450 --> 00:18:47,190
stored and then I have to make another

00:18:44,190 --> 00:18:52,230
request yeah you get the point it's

00:18:47,190 --> 00:18:55,309
flexible and it's horrible also the way

00:18:52,230 --> 00:18:55,309
you defined the

00:18:55,460 --> 00:19:00,690
variables in your route the data comes

00:18:57,840 --> 00:19:04,309
back enough in that order but without

00:19:00,690 --> 00:19:10,769
the keys I had to remember where was

00:19:04,309 --> 00:19:13,169
flexible it's great but when you do have

00:19:10,769 --> 00:19:16,919
to consume ap I was like that that are

00:19:13,169 --> 00:19:22,289
not great first of all you get a lot of

00:19:16,919 --> 00:19:25,379
inspiration because you know that you

00:19:22,289 --> 00:19:27,480
can do better and that's great and then

00:19:25,379 --> 00:19:30,389
you laugh about it and you pair program

00:19:27,480 --> 00:19:34,080
and write songs and you play baby shark

00:19:30,389 --> 00:19:36,720
and annoy your colleagues really that's

00:19:34,080 --> 00:19:40,259
how we managed to survive when we get

00:19:36,720 --> 00:19:43,289
headaches literally it's to joke about

00:19:40,259 --> 00:19:48,330
it together pairing is caring

00:19:43,289 --> 00:19:50,690
suffering is best done together in I

00:19:48,330 --> 00:19:53,549
like to think that we are superheroes

00:19:50,690 --> 00:19:56,320
we're shielding our consumers from the

00:19:53,549 --> 00:19:58,389
pain that we have our main

00:19:56,320 --> 00:20:00,130
that's kind of Stockholm Syndrome or

00:19:58,389 --> 00:20:08,610
something but I like to think that we

00:20:00,130 --> 00:20:08,610
are superheroes yeah

00:20:09,779 --> 00:20:17,679
so let's talk about third-party data

00:20:13,179 --> 00:20:20,590
providers and when they lie to you we

00:20:17,679 --> 00:20:22,779
had cases where we were supposed to get

00:20:20,590 --> 00:20:24,940
one formative data but got something

00:20:22,779 --> 00:20:27,880
else we're supposed to get one product

00:20:24,940 --> 00:20:31,360
if we get a list of ten it was supposed

00:20:27,880 --> 00:20:33,789
to get a string but we get an array all

00:20:31,360 --> 00:20:35,759
these cancer things that makes it really

00:20:33,789 --> 00:20:42,549
difficult for you

00:20:35,759 --> 00:20:44,200
so again parent really it's caring but

00:20:42,549 --> 00:20:46,179
what we started to do is that we

00:20:44,200 --> 00:20:49,299
realized that it's difficult for them to

00:20:46,179 --> 00:20:53,980
validate their own data and that's okay

00:20:49,299 --> 00:20:56,080
we live in an age where there's just too

00:20:53,980 --> 00:20:58,299
much data and they can't do it on their

00:20:56,080 --> 00:21:02,500
own and someone has to tell them when

00:20:58,299 --> 00:21:05,590
the data is bad so we started using JSON

00:21:02,500 --> 00:21:09,279
schema for that how many of you have

00:21:05,590 --> 00:21:13,360
used JSON schema before okay about a

00:21:09,279 --> 00:21:16,389
third of you so with this we can take

00:21:13,360 --> 00:21:19,389
the JSON data and we can define exactly

00:21:16,389 --> 00:21:22,480
how it should look like like this so

00:21:19,389 --> 00:21:25,750
here we see title products it's an

00:21:22,480 --> 00:21:28,419
object and has some properties in it

00:21:25,750 --> 00:21:33,899
that we can find for instance the ID

00:21:28,419 --> 00:21:33,899
property we can give it a pattern and

00:21:33,929 --> 00:21:43,690
etc etc so we tell them exactly how the

00:21:37,779 --> 00:21:48,340
data should look like in with this we

00:21:43,690 --> 00:21:52,029
can validate their data for them when we

00:21:48,340 --> 00:21:56,230
get a message from them we run this to

00:21:52,029 --> 00:22:03,159
validate so here we see validates with

00:21:56,230 --> 00:22:07,080
the JSON string and we throw an

00:22:03,159 --> 00:22:07,080
exception if we can't validate it

00:22:09,890 --> 00:22:19,710
don't worry I will share the code later

00:22:12,660 --> 00:22:23,450
and the flights and also something that

00:22:19,710 --> 00:22:26,550
becomes extremely extremely extremely

00:22:23,450 --> 00:22:29,550
important when you don't know what data

00:22:26,550 --> 00:22:32,960
you get is the fancy programming there's

00:22:29,550 --> 00:22:35,700
no such thing as this won't happen right

00:22:32,960 --> 00:22:37,410
your tasks first and when you think you

00:22:35,700 --> 00:22:38,850
have all the tests right the ridiculous

00:22:37,410 --> 00:22:45,120
tests that you think could never happen

00:22:38,850 --> 00:22:48,090
because it does so yes right the test

00:22:45,120 --> 00:22:49,650
for what happens if the data is known

00:22:48,090 --> 00:22:57,680
even though they told us the data will

00:22:49,650 --> 00:22:59,880
always be there etc it helps sorry

00:22:57,680 --> 00:23:02,000
there's a really really good talk about

00:22:59,880 --> 00:23:05,120
this if you want to learn more about

00:23:02,000 --> 00:23:07,260
defensive programming by Marco pavetta

00:23:05,120 --> 00:23:10,590
it's a new tube and it's called

00:23:07,260 --> 00:23:14,570
extremely defensive PHP a lot of you

00:23:10,590 --> 00:23:14,570
might know him better as a Crimea's

00:23:24,690 --> 00:23:32,129
so we started out as I said as a tiny

00:23:28,979 --> 00:23:37,679
API we had only one data source and it

00:23:32,129 --> 00:23:39,809
was pretty easy for us and yeah it

00:23:37,679 --> 00:23:42,149
wasn't that hard but then they added

00:23:39,809 --> 00:23:45,450
another data source and another and then

00:23:42,149 --> 00:23:47,070
we have to prioritize and we have to

00:23:45,450 --> 00:23:49,470
figure out okay this data comes from

00:23:47,070 --> 00:23:52,049
this source that data comes from that

00:23:49,470 --> 00:23:54,809
source this product comes from this

00:23:52,049 --> 00:23:58,190
source etc and it becomes messy really

00:23:54,809 --> 00:24:01,739
fast if you don't think about it

00:23:58,190 --> 00:24:08,129
so we made a thing called a decider

00:24:01,739 --> 00:24:11,309
service so your that idea from API X you

00:24:08,129 --> 00:24:15,149
from that idea from API Y so before we

00:24:11,309 --> 00:24:17,340
imported a a product we use our decider

00:24:15,149 --> 00:24:22,799
service to decide where we should

00:24:17,340 --> 00:24:29,519
important data from and importing that

00:24:22,799 --> 00:24:33,330
way becomes easy but mapping did I

00:24:29,519 --> 00:24:35,849
mention that data quality sucks you know

00:24:33,330 --> 00:24:38,279
missing spaces strings instead of int

00:24:35,849 --> 00:24:40,830
arrays instead of an object objects

00:24:38,279 --> 00:24:42,809
instead of a string differently named

00:24:40,830 --> 00:24:45,989
fields when you expect the name to be

00:24:42,809 --> 00:24:48,179
field to be called description but

00:24:45,989 --> 00:24:52,830
suddenly they decided to use German for

00:24:48,179 --> 00:24:58,190
description yeah required data is

00:24:52,830 --> 00:24:58,190
missing and more and more and more and

00:24:59,840 --> 00:25:07,019
but you can keep your sanity by

00:25:03,149 --> 00:25:10,259
containing that and that's very very

00:25:07,019 --> 00:25:14,970
important that you don't try too early

00:25:10,259 --> 00:25:18,659
to fix their code you can use validating

00:25:14,970 --> 00:25:21,710
to tell them that their data is messy

00:25:18,659 --> 00:25:24,419
but don't try too early to fix it

00:25:21,710 --> 00:25:27,179
because then you will get into a loop of

00:25:24,419 --> 00:25:30,269
having horrible data hacks everywhere in

00:25:27,179 --> 00:25:31,919
the code we recently looked in a code

00:25:30,269 --> 00:25:34,019
everywhere where we had a comment that

00:25:31,919 --> 00:25:36,299
said hack we had to change it because

00:25:34,019 --> 00:25:39,200
nothing is a hack it has to be

00:25:36,299 --> 00:25:39,200
purposefully done

00:25:40,320 --> 00:25:47,919
so we have a product mapper and that

00:25:45,879 --> 00:25:50,440
puts the product on elasticsearch and

00:25:47,919 --> 00:25:52,929
then we output that from elasticsearch

00:25:50,440 --> 00:25:57,729
with sterilizing in between pretty

00:25:52,929 --> 00:26:00,249
simple concepts so product mapper could

00:25:57,729 --> 00:26:04,019
look like this we map name brand

00:26:00,249 --> 00:26:07,139
category price and description on it

00:26:04,019 --> 00:26:11,979
each one of these is a map runner oh

00:26:07,139 --> 00:26:14,859
this is how it used to work like so NBC

00:26:11,979 --> 00:26:17,979
P DS mappers and we add some more

00:26:14,859 --> 00:26:21,190
mappers oh and we add some more mappers

00:26:17,979 --> 00:26:23,320
and we have so much data on the product

00:26:21,190 --> 00:26:26,710
that the product mapper eventually

00:26:23,320 --> 00:26:30,700
explodes there's just way too much data

00:26:26,710 --> 00:26:35,529
but what if we take all the data we're

00:26:30,700 --> 00:26:38,879
mapping on the products and we split

00:26:35,529 --> 00:26:42,279
them into tiny parts and we decide that

00:26:38,879 --> 00:26:47,080
instead of mapping all the data that we

00:26:42,279 --> 00:26:50,919
need on a product on a products we go

00:26:47,080 --> 00:26:52,599
through every mapper each one so we have

00:26:50,919 --> 00:26:55,049
the name rapper we have the description

00:26:52,599 --> 00:26:57,549
mapper we have the image mapper and

00:26:55,049 --> 00:27:00,969
everything piece by piece

00:26:57,549 --> 00:27:02,649
that way every little thing we need to

00:27:00,969 --> 00:27:05,139
do every data we need to double check

00:27:02,649 --> 00:27:07,960
and convert it's contained in this

00:27:05,139 --> 00:27:11,649
little box and we don't have these

00:27:07,960 --> 00:27:13,779
ridiculous classes and tests anymore so

00:27:11,649 --> 00:27:19,239
then we put a mapper interface on it so

00:27:13,779 --> 00:27:22,629
you can map it and put it put a factory

00:27:19,239 --> 00:27:27,539
around that you give the factory all the

00:27:22,629 --> 00:27:30,369
classes and then it can loop through and

00:27:27,539 --> 00:27:34,210
that's where you have clean data to

00:27:30,369 --> 00:27:37,889
store in elasticsearch great in theory

00:27:34,210 --> 00:27:40,359
in practice this doesn't work very well

00:27:37,889 --> 00:27:43,119
so first of all you have to configure

00:27:40,359 --> 00:27:45,929
all of the mappers in order we've got

00:27:43,119 --> 00:27:48,639
seven depends of three you have to have

00:27:45,929 --> 00:27:51,900
something a description if we have

00:27:48,639 --> 00:27:55,780
ingredients or whatever four depends of

00:27:51,900 --> 00:27:57,220
25 depends on basically everything so

00:27:55,780 --> 00:27:59,500
you have to order it and have to be

00:27:57,220 --> 00:28:02,980
careful and every time we change the

00:27:59,500 --> 00:28:05,410
config a test might blow up or even

00:28:02,980 --> 00:28:08,170
worse if we miss the tester entire

00:28:05,410 --> 00:28:12,160
application would blow up because we

00:28:08,170 --> 00:28:15,240
changed a little bit in a config that's

00:28:12,160 --> 00:28:17,770
not nice at all

00:28:15,240 --> 00:28:19,360
also languages since we live in

00:28:17,770 --> 00:28:22,240
Switzerland we always have to deal with

00:28:19,360 --> 00:28:26,590
at least three languages which is German

00:28:22,240 --> 00:28:30,700
French and Italian so with this product

00:28:26,590 --> 00:28:33,700
factory what we used to do is that we

00:28:30,700 --> 00:28:37,050
called it three times once for German

00:28:33,700 --> 00:28:41,410
once for Italian and once for French

00:28:37,050 --> 00:28:44,920
with Sun caching in between this meant

00:28:41,410 --> 00:28:47,020
that mapping a product with language

00:28:44,920 --> 00:28:50,080
specific data often took three times

00:28:47,020 --> 00:28:53,770
longer when it didn't have to it was a

00:28:50,080 --> 00:28:56,680
mess but let's see how it felt that so

00:28:53,770 --> 00:28:58,630
mapper dependencies in symphony they

00:28:56,680 --> 00:29:00,820
have a thing called a compiler pass how

00:28:58,630 --> 00:29:04,480
many of you wrote compiler passes before

00:29:00,820 --> 00:29:14,680
a few of you how many of you know what

00:29:04,480 --> 00:29:16,720
it is it's not less than root okay so in

00:29:14,680 --> 00:29:20,710
symphony when you compile a compiler

00:29:16,720 --> 00:29:22,480
pass is basically code that runs before

00:29:20,710 --> 00:29:27,370
you warm up the cache that's all there

00:29:22,480 --> 00:29:32,530
is to it and also it can hook into the

00:29:27,370 --> 00:29:34,860
process and play with your config and

00:29:32,530 --> 00:29:37,420
make the services and everything for you

00:29:34,860 --> 00:29:41,320
and basically that's what we want to do

00:29:37,420 --> 00:29:43,870
we want to make the services so every

00:29:41,320 --> 00:29:46,330
mapper in the mapper interface we study

00:29:43,870 --> 00:29:48,550
needs to have get dependent fields and

00:29:46,330 --> 00:29:52,660
get fields so here we see the retailer

00:29:48,550 --> 00:29:55,920
mapper so it depends on post number

00:29:52,660 --> 00:30:00,000
categories and additional categories in

00:29:55,920 --> 00:30:03,000
its the mapper itself handles the field

00:30:00,000 --> 00:30:03,000
retailer

00:30:03,280 --> 00:30:18,430
and then in the compiler pass we yeah we

00:30:16,390 --> 00:30:22,450
process that and we check if it's the

00:30:18,430 --> 00:30:26,950
product factory class and if not we

00:30:22,450 --> 00:30:34,240
continue and then we deal with the

00:30:26,950 --> 00:30:37,330
mappers here find sorted wrappers so

00:30:34,240 --> 00:30:40,480
this is basically our dealing with

00:30:37,330 --> 00:30:42,750
dependencies we can deal with

00:30:40,480 --> 00:30:45,130
dependencies in the compiler path

00:30:42,750 --> 00:30:48,820
magically we don't have to have a config

00:30:45,130 --> 00:30:53,380
anymore we just check all of the mappers

00:30:48,820 --> 00:30:59,950
that we have and we write our services

00:30:53,380 --> 00:31:01,290
that's great yeah so a short time would

00:30:59,950 --> 00:31:04,330
loop through mappers until the

00:31:01,290 --> 00:31:07,530
dependencies can be solved and we have a

00:31:04,330 --> 00:31:12,360
logic exception here if it counts

00:31:07,530 --> 00:31:19,600
luckily I never saw that exception but

00:31:12,360 --> 00:31:23,350
it can happen in theory so the dealing

00:31:19,600 --> 00:31:26,290
with languages only deal with languages

00:31:23,350 --> 00:31:27,540
when you have to and image doesn't have

00:31:26,290 --> 00:31:29,860
three languages

00:31:27,540 --> 00:31:32,980
unless there's text on the image which

00:31:29,860 --> 00:31:36,520
is a whole other story but in theory a

00:31:32,980 --> 00:31:38,710
lot of the things when it's code like

00:31:36,520 --> 00:31:42,190
category code etc it doesn't have a

00:31:38,710 --> 00:31:45,870
language you don't need to deal with all

00:31:42,190 --> 00:31:45,870
the languages in your application then

00:31:45,930 --> 00:31:56,890
so here is how we did that for each

00:31:51,970 --> 00:31:59,740
translator product as products we deal

00:31:56,890 --> 00:32:03,190
with it that way we just for each in

00:31:59,740 --> 00:32:08,080
every mapper instead of running it 3/3

00:32:03,190 --> 00:32:14,020
and when we don't when we don't need a

00:32:08,080 --> 00:32:16,240
language that we don't need average so

00:32:14,020 --> 00:32:20,490
obviously I said there would be unicorns

00:32:16,240 --> 00:32:23,680
and this is Alfred exactor a unicorn

00:32:20,490 --> 00:32:25,750
yeah I did implement the unicorn ticket

00:32:23,680 --> 00:32:31,690
as soon as I settle in this team and

00:32:25,750 --> 00:32:33,940
that was cool of course there's some

00:32:31,690 --> 00:32:36,010
things that goes without saying you have

00:32:33,940 --> 00:32:39,190
to ensure quality so you need to write

00:32:36,010 --> 00:32:41,260
tests you need to have logging lots and

00:32:39,190 --> 00:32:43,810
lots and lots and lots of logging and

00:32:41,260 --> 00:32:45,820
you need to write documentation on how

00:32:43,810 --> 00:32:48,490
you log so people can actually find

00:32:45,820 --> 00:32:50,530
those log messages we had a lot of

00:32:48,490 --> 00:32:53,860
logging but a lot of us didn't know how

00:32:50,530 --> 00:32:57,130
to deal with those those embarrassing

00:32:53,860 --> 00:33:00,670
and awkward and then we have monitoring

00:32:57,130 --> 00:33:04,600
so you have to monetary keys and

00:33:00,670 --> 00:33:08,110
everything so legality banging you will

00:33:04,600 --> 00:33:13,060
love you monetary cues monetary Upton's

00:33:08,110 --> 00:33:17,080
and react quickly we also have a

00:33:13,060 --> 00:33:20,230
separate acceptance test app when you

00:33:17,080 --> 00:33:23,310
deal with a lot of data you can have

00:33:20,230 --> 00:33:25,990
things when you deploy and when you

00:33:23,310 --> 00:33:29,200
remap the data suddenly there's a bug

00:33:25,990 --> 00:33:32,650
you didn't catch in your tests and data

00:33:29,200 --> 00:33:37,810
disappears but luckily accept assess

00:33:32,650 --> 00:33:40,600
we'll catch that test for critical data

00:33:37,810 --> 00:33:43,930
if a product should always have a

00:33:40,600 --> 00:33:46,990
product name and make sure there's an

00:33:43,930 --> 00:33:52,060
acceptance test that checks if there's

00:33:46,990 --> 00:33:54,760
any products without a product name and

00:33:52,060 --> 00:33:58,620
then this of course another project

00:33:54,760 --> 00:34:02,860
challenge of big API responses because

00:33:58,620 --> 00:34:04,930
we started as a API of the biggest

00:34:02,860 --> 00:34:07,890
retailers with tanana's products and

00:34:04,930 --> 00:34:11,560
just a few things on our products and

00:34:07,890 --> 00:34:14,010
organically our consumers started to

00:34:11,560 --> 00:34:18,389
want more and more and more and

00:34:14,010 --> 00:34:20,159
more things on that product and that

00:34:18,389 --> 00:34:22,770
becomes a mess like the slack

00:34:20,159 --> 00:34:25,200
conversation we had recently how much

00:34:22,770 --> 00:34:29,130
stuff can put in a JSON file what cannot

00:34:25,200 --> 00:34:33,600
put in a JSON file and the way we saw

00:34:29,130 --> 00:34:37,110
that is that we use varnish is I so that

00:34:33,600 --> 00:34:39,470
we can partially cache everything every

00:34:37,110 --> 00:34:42,419
product so if you have a product listing

00:34:39,470 --> 00:34:47,250
it doesn't matter what combination that

00:34:42,419 --> 00:34:48,840
is they are partially cached so I'm not

00:34:47,250 --> 00:34:51,419
going to talk too much about that but

00:34:48,840 --> 00:34:56,930
it's a term you can write down as

00:34:51,419 --> 00:34:59,610
varnish ESI that will really help you so

00:34:56,930 --> 00:35:05,550
let's look at sterilizing versioning and

00:34:59,610 --> 00:35:09,110
groups so we need to handle different

00:35:05,550 --> 00:35:13,230
versions in our API when we have

00:35:09,110 --> 00:35:16,560
breaking changes and things and we need

00:35:13,230 --> 00:35:18,960
to handle groups so yeah we have output

00:35:16,560 --> 00:35:22,080
something in the data view and we output

00:35:18,960 --> 00:35:25,500
something else in the ListView and we

00:35:22,080 --> 00:35:28,560
tried a lot of serializers and we used

00:35:25,500 --> 00:35:30,600
to Emma serialize it right now and all

00:35:28,560 --> 00:35:33,480
of them suck when you have a lot of

00:35:30,600 --> 00:35:37,140
complex data they are slow they're

00:35:33,480 --> 00:35:40,680
cumbersome it's painful they handle

00:35:37,140 --> 00:35:42,990
everything great but they suck so plain

00:35:40,680 --> 00:35:46,290
JSON decode won't work that well for

00:35:42,990 --> 00:35:49,980
this the symphony serializer is cool and

00:35:46,290 --> 00:35:52,050
all but it's slow better serialize it

00:35:49,980 --> 00:35:56,310
would maybe be better if we could make

00:35:52,050 --> 00:36:00,420
it work it doesn't deal with complex

00:35:56,310 --> 00:36:03,540
data so yesterday I'm a sterilizer which

00:36:00,420 --> 00:36:06,300
is great it has annotations it has a

00:36:03,540 --> 00:36:11,310
version support that we need and so you

00:36:06,300 --> 00:36:14,400
can say output a Santa version to output

00:36:11,310 --> 00:36:16,620
this since version 3 and we also have

00:36:14,400 --> 00:36:18,300
virtual properties which means we can

00:36:16,620 --> 00:36:22,650
have a little bit of logic when we act

00:36:18,300 --> 00:36:24,660
with something it works like magic with

00:36:22,650 --> 00:36:27,060
most frameworks including symphony in

00:36:24,660 --> 00:36:32,290
which we use

00:36:27,060 --> 00:36:36,490
and you have this config and it just

00:36:32,290 --> 00:36:38,920
works remember to set your date time

00:36:36,490 --> 00:36:41,890
format because if you don't it can get

00:36:38,920 --> 00:36:45,730
really messy if you not consistent way

00:36:41,890 --> 00:36:48,510
you form with your dates yeah you can

00:36:45,730 --> 00:36:52,420
read the docs about Gemma sterilizer

00:36:48,510 --> 00:36:56,860
but as I said it didn't really work that

00:36:52,420 --> 00:36:58,960
great for us it does everything we need

00:36:56,860 --> 00:37:04,120
to do it but it was slow and we had a

00:36:58,960 --> 00:37:06,930
bottleneck off yeah we called visit

00:37:04,120 --> 00:37:08,640
property for one of a big product over

00:37:06,930 --> 00:37:11,800
60,000 times

00:37:08,640 --> 00:37:16,870
how can calling a method that many times

00:37:11,800 --> 00:37:19,750
ever be fast never but all modern

00:37:16,870 --> 00:37:21,580
sterilizes in PHP that I saw they use a

00:37:19,750 --> 00:37:25,390
thing called the visitor pattern and

00:37:21,580 --> 00:37:29,200
that is great unless you visit each

00:37:25,390 --> 00:37:31,300
property a lot so we wrote something

00:37:29,200 --> 00:37:34,660
else that we like to call the leap

00:37:31,300 --> 00:37:39,040
sterilizer which is not as much of a

00:37:34,660 --> 00:37:40,930
sterilizer as it is a generator so you

00:37:39,040 --> 00:37:43,870
have your model with your annotations

00:37:40,930 --> 00:37:49,600
and then you parse those imitate

00:37:43,870 --> 00:37:54,610
annotations and you generate a new file

00:37:49,600 --> 00:37:57,550
based on that and then instead of

00:37:54,610 --> 00:38:00,430
visitor property etc you use your

00:37:57,550 --> 00:38:02,710
generated code and you call one function

00:38:00,430 --> 00:38:04,480
once and that generate the code is some

00:38:02,710 --> 00:38:06,100
of the ugliest code that was ever part

00:38:04,480 --> 00:38:11,350
of writing but I didn't technically

00:38:06,100 --> 00:38:14,620
write it so it's okay we had an overall

00:38:11,350 --> 00:38:17,080
performance gain of 55 percent over TMS

00:38:14,620 --> 00:38:21,670
for a use case that means our response

00:38:17,080 --> 00:38:25,450
could go from 390 milliseconds 275 and

00:38:21,670 --> 00:38:29,080
CPU and I await both down by about 50%

00:38:25,450 --> 00:38:34,090
and a 21% memory gain I would consider

00:38:29,080 --> 00:38:36,790
this a way we tried using go line first

00:38:34,090 --> 00:38:39,850
and that's an entire talk of mine how he

00:38:36,790 --> 00:38:40,270
his goal and then went back to PHP for

00:38:39,850 --> 00:38:43,180
serial

00:38:40,270 --> 00:38:45,040
I think I could talk about this for

00:38:43,180 --> 00:38:48,730
hours and if you're curious about the

00:38:45,040 --> 00:38:50,920
serializer you can ask me later or you

00:38:48,730 --> 00:38:54,580
can read the blog post that I wrote or

00:38:50,920 --> 00:39:04,380
look at the lip sterilizer on github

00:38:54,580 --> 00:39:07,150
it's open source so communication I

00:39:04,380 --> 00:39:10,600
would say we have so many technical

00:39:07,150 --> 00:39:13,620
challenges but the one we still never

00:39:10,600 --> 00:39:19,330
could get quite right is communication

00:39:13,620 --> 00:39:22,390
communication is hard because we have to

00:39:19,330 --> 00:39:25,870
work together and working together with

00:39:22,390 --> 00:39:27,610
other people it's really difficult so

00:39:25,870 --> 00:39:29,650
it's important to give each other

00:39:27,610 --> 00:39:32,980
feedback and to establish a feedback

00:39:29,650 --> 00:39:35,710
culture and that's not only personal

00:39:32,980 --> 00:39:40,960
feedback peer-to-peer but it also goes

00:39:35,710 --> 00:39:46,210
into code reviews so I recently had a

00:39:40,960 --> 00:39:49,660
moment where I felt really insecure and

00:39:46,210 --> 00:39:52,390
impostor syndrome was hitting me and I

00:39:49,660 --> 00:39:55,090
realized then that all the code reviews

00:39:52,390 --> 00:39:58,390
that I had lately from others they only

00:39:55,090 --> 00:40:01,000
pointed out what's bad so you get

00:39:58,390 --> 00:40:02,440
constant feedback on what's bad but

00:40:01,000 --> 00:40:04,360
never feedback on what's good in your

00:40:02,440 --> 00:40:08,320
code and so that can really bring

00:40:04,360 --> 00:40:10,810
someone down so we tried and what really

00:40:08,320 --> 00:40:12,400
helped was to also point out what's good

00:40:10,810 --> 00:40:16,090
and that's why you encourage that

00:40:12,400 --> 00:40:18,760
behavior and people keep doing what's

00:40:16,090 --> 00:40:20,680
good I like the way you use generators

00:40:18,760 --> 00:40:22,120
here good they would keep doing that I

00:40:20,680 --> 00:40:25,360
like the way you did this and this and

00:40:22,120 --> 00:40:26,770
that encourage good behavior and always

00:40:25,360 --> 00:40:28,810
point out when he likes something

00:40:26,770 --> 00:40:30,400
because if they topped something they

00:40:28,810 --> 00:40:34,840
might not do it again and that's a shame

00:40:30,400 --> 00:40:38,230
if you liked it and then we also have

00:40:34,840 --> 00:40:42,550
retrospectives every two weeks how many

00:40:38,230 --> 00:40:45,550
of you here you scrum okay

00:40:42,550 --> 00:40:47,860
about half so a retrospective is what

00:40:45,550 --> 00:40:49,570
you do when you look back and you try to

00:40:47,860 --> 00:40:53,410
improve you don't need to use scrum for

00:40:49,570 --> 00:40:54,220
this but you discuss things like why

00:40:53,410 --> 00:40:56,470
didn't

00:40:54,220 --> 00:40:59,109
we managed to finish the things with it

00:40:56,470 --> 00:41:01,630
and you try to improve the process both

00:40:59,109 --> 00:41:04,060
your code but mostly how you work

00:41:01,630 --> 00:41:07,480
together communication communication is

00:41:04,060 --> 00:41:10,599
hard yes as I said respect fully

00:41:07,480 --> 00:41:13,270
improved code together and team events

00:41:10,599 --> 00:41:17,040
really keep morale high our team is

00:41:13,270 --> 00:41:20,230
called team Lego so one time we made

00:41:17,040 --> 00:41:26,380
little Lego minifigs for everyone that's

00:41:20,230 --> 00:41:28,420
great and also a key which is really

00:41:26,380 --> 00:41:31,750
important we have an amazing customer

00:41:28,420 --> 00:41:33,760
they listened to us and if you don't

00:41:31,750 --> 00:41:37,150
have an amazing customer or you are your

00:41:33,760 --> 00:41:39,609
own customer then you have to listen to

00:41:37,150 --> 00:41:41,770
them more they can become an amazing

00:41:39,609 --> 00:41:44,440
customer you have to listen to their

00:41:41,770 --> 00:41:49,930
needs and if they're not well that makes

00:41:44,440 --> 00:41:52,930
everything hard so in a symphony project

00:41:49,930 --> 00:41:55,420
there's some really important things you

00:41:52,930 --> 00:42:00,130
have to prioritize upgrades upgrade as

00:41:55,420 --> 00:42:04,770
soon as ever possible even minor

00:42:00,130 --> 00:42:11,050
versions fixed application warnings

00:42:04,770 --> 00:42:14,290
refactor often it's not optional when

00:42:11,050 --> 00:42:19,450
there comes new components like Symphony

00:42:14,290 --> 00:42:21,580
messenger etc try to use them try to try

00:42:19,450 --> 00:42:23,680
to use the components that they're

00:42:21,580 --> 00:42:26,560
replace previous parts of your

00:42:23,680 --> 00:42:28,630
application with a solution that

00:42:26,560 --> 00:42:31,810
everyone in the community can help you

00:42:28,630 --> 00:42:34,420
solve also contribute to open source if

00:42:31,810 --> 00:42:36,849
you have something like that right in

00:42:34,420 --> 00:42:41,410
your component give back have some

00:42:36,849 --> 00:42:44,890
control over your tools and utilize the

00:42:41,410 --> 00:42:47,890
community did I mention that you really

00:42:44,890 --> 00:42:50,280
need a lot of tests and an amazing

00:42:47,890 --> 00:42:50,280
customer

00:42:52,930 --> 00:43:02,590
so some final words it's okay to start

00:42:59,080 --> 00:43:06,390
small and refactor later in fact it's

00:43:02,590 --> 00:43:10,420
preferred code for what you need now

00:43:06,390 --> 00:43:13,620
refactor when it needs change we had a

00:43:10,420 --> 00:43:16,540
lot of cases where we made really

00:43:13,620 --> 00:43:18,760
complicated code anticipating our needs

00:43:16,540 --> 00:43:20,710
and that messed everything up

00:43:18,760 --> 00:43:26,050
refactor later code for what you need

00:43:20,710 --> 00:43:28,360
now right dev Docs so it write really

00:43:26,050 --> 00:43:30,220
good consumer Docs and your consumer is

00:43:28,360 --> 00:43:32,140
happy and your customer is happy and

00:43:30,220 --> 00:43:33,820
then you look at the code you wrote

00:43:32,140 --> 00:43:36,280
three years ago and you have no clue

00:43:33,820 --> 00:43:38,500
what's going on so really right

00:43:36,280 --> 00:43:40,390
documentation not only for the people

00:43:38,500 --> 00:43:43,030
that work with you but for yourself

00:43:40,390 --> 00:43:44,950
you're not gonna remember a huge

00:43:43,030 --> 00:43:49,270
codebase everything you did over five

00:43:44,950 --> 00:43:52,450
years and write down decisions you make

00:43:49,270 --> 00:43:54,070
especially architecture decisions etc if

00:43:52,450 --> 00:43:56,890
you don't you're all gonna code in

00:43:54,070 --> 00:43:59,380
different ways and someone's gonna

00:43:56,890 --> 00:44:01,240
comment on your mat request this is

00:43:59,380 --> 00:44:04,660
wrong and I would say no this is not

00:44:01,240 --> 00:44:06,400
wrong and both are correct how do you

00:44:04,660 --> 00:44:11,400
deal with that you need to write dev

00:44:06,400 --> 00:44:13,650
documentation and especially things like

00:44:11,400 --> 00:44:19,360
how you do things

00:44:13,650 --> 00:44:22,030
architecture as I said refactor often

00:44:19,360 --> 00:44:26,050
use the fancy programming because what

00:44:22,030 --> 00:44:30,250
can go wrong will go wrong and also when

00:44:26,050 --> 00:44:32,200
there's so much code involved changing

00:44:30,250 --> 00:44:35,190
one thing can break something else if

00:44:32,200 --> 00:44:39,190
you're not defensive enough about it

00:44:35,190 --> 00:44:41,200
work as a team work on the communication

00:44:39,190 --> 00:44:44,760
at least as much as you work on the code

00:44:41,200 --> 00:44:48,250
and if you do all these things then

00:44:44,760 --> 00:44:51,870
messy data does not have to mean messy

00:44:48,250 --> 00:44:51,870

YouTube URL: https://www.youtube.com/watch?v=tMWZGNdPDnM


