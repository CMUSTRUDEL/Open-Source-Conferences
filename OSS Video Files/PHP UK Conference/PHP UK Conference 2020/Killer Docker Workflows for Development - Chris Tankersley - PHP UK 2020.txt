Title: Killer Docker Workflows for Development - Chris Tankersley - PHP UK 2020
Publication date: 2020-03-11
Playlist: PHP UK Conference 2020
Description: 
	Docker is not just about deploying containers to hundreds of servers. Developers need tools that help with day-to-day tasks and to do their job more effectively. Docker is a great addition to most workflows, from starting projects to writing utilities to make development less repetitive. Docker can help take care of many problems developers face during development such as “it works on my machine” as well as keeping tooling consistent between all of the people working on a project. See how easy it is to take an existing development setup and application and move it over to Docker, no matter your operating system.
Captions: 
	00:00:02,690 --> 00:00:07,400
so my name is Chris Tankersley hopefully

00:00:05,300 --> 00:00:10,010
you remember me from yesterday but today

00:00:07,400 --> 00:00:13,010
I'm gonna talk actually about docker and

00:00:10,010 --> 00:00:14,959
some things that we can do and think

00:00:13,010 --> 00:00:18,440
about as we start to design work

00:00:14,959 --> 00:00:20,690
workflows and move it more into the

00:00:18,440 --> 00:00:22,970
development stage docker is one of those

00:00:20,690 --> 00:00:25,840
things that has really started to pick

00:00:22,970 --> 00:00:29,030
up over the last three four years as a

00:00:25,840 --> 00:00:32,809
development tool as opposed to just

00:00:29,030 --> 00:00:35,570
primarily a deployment system even

00:00:32,809 --> 00:00:37,370
though originally that's kind of how it

00:00:35,570 --> 00:00:39,649
was designed so I stole this from the

00:00:37,370 --> 00:00:41,839
docker website years ago I don't even

00:00:39,649 --> 00:00:44,239
know if this page exists anymore but

00:00:41,839 --> 00:00:46,129
doctors build as an open platform for

00:00:44,239 --> 00:00:48,170
developers and system ins to build ship

00:00:46,129 --> 00:00:51,859
and run distributed applications and

00:00:48,170 --> 00:00:54,530
that was primarily its core focus it

00:00:51,859 --> 00:00:58,639
wasn't necessarily designed as a

00:00:54,530 --> 00:01:01,479
development tool but we make it work for

00:00:58,639 --> 00:01:03,649
us because realistically we want our

00:01:01,479 --> 00:01:06,770
setups to work all the way from

00:01:03,649 --> 00:01:08,600
development to production and we want to

00:01:06,770 --> 00:01:12,470
get away from that it works on my

00:01:08,600 --> 00:01:14,150
machine mentality so depending on how

00:01:12,470 --> 00:01:15,710
long you've been doing development we

00:01:14,150 --> 00:01:19,310
went through the same kind of

00:01:15,710 --> 00:01:21,310
Renaissance seven eight years ago with

00:01:19,310 --> 00:01:23,780
tools like vagrant which made

00:01:21,310 --> 00:01:26,630
virtualization a much more attractive

00:01:23,780 --> 00:01:29,000
option for doing development because it

00:01:26,630 --> 00:01:31,700
fixed a lot of problems doing work

00:01:29,000 --> 00:01:35,180
directly on your machine causes

00:01:31,700 --> 00:01:37,370
inconsistencies that you don't or that

00:01:35,180 --> 00:01:39,230
you don't want to have minor PHP version

00:01:37,370 --> 00:01:42,620
differences configuration differences

00:01:39,230 --> 00:01:44,540
and vagrant promised kind of that same

00:01:42,620 --> 00:01:46,280
set up to get rid of the it works on my

00:01:44,540 --> 00:01:48,370
machine problem but very few places

00:01:46,280 --> 00:01:50,870
actually followed through on it as they

00:01:48,370 --> 00:01:53,480
generally didn't use the same puppet or

00:01:50,870 --> 00:01:55,100
ansible configs and vagrant that they

00:01:53,480 --> 00:01:58,370
actually used in production if they used

00:01:55,100 --> 00:02:00,620
any at all docker still kind of has that

00:01:58,370 --> 00:02:03,740
problem but one of the big advantages is

00:02:00,620 --> 00:02:05,990
in you have a same binary base across

00:02:03,740 --> 00:02:08,479
the board so it even lessens that more

00:02:05,990 --> 00:02:10,729
and more it's kind of at the bottom of

00:02:08,479 --> 00:02:12,440
here docker enables apps to be quickly

00:02:10,729 --> 00:02:14,540
assembled from components and eliminates

00:02:12,440 --> 00:02:15,300
the friction between development QA and

00:02:14,540 --> 00:02:17,640
production and

00:02:15,300 --> 00:02:20,610
and that's really the big thing that we

00:02:17,640 --> 00:02:22,980
worry about as developers is making sure

00:02:20,610 --> 00:02:25,530
that our work flows from dev to

00:02:22,980 --> 00:02:27,570
production are as seamless as possible

00:02:25,530 --> 00:02:31,230
and we can reuse those environments as

00:02:27,570 --> 00:02:33,270
much as possible so I'm gonna spend just

00:02:31,230 --> 00:02:35,790
a small portion of time on exactly what

00:02:33,270 --> 00:02:39,450
a container is if you are not familiar

00:02:35,790 --> 00:02:41,130
with how docker works already I would

00:02:39,450 --> 00:02:42,870
suggest maybe going to one of the other

00:02:41,130 --> 00:02:45,480
talks I'm not really gonna go over the

00:02:42,870 --> 00:02:47,130
basic fundamentals of docker above and

00:02:45,480 --> 00:02:52,080
beyond this because how a container

00:02:47,130 --> 00:02:54,030
works is a very important topic so if

00:02:52,080 --> 00:02:55,620
you're not sure how docker works or

00:02:54,030 --> 00:02:58,650
exactly how you want to get like compose

00:02:55,620 --> 00:03:01,620
set up this is gonna be a little bit

00:02:58,650 --> 00:03:03,000
slightly higher level but I want to make

00:03:01,620 --> 00:03:05,310
sure that we're all on the same page on

00:03:03,000 --> 00:03:07,290
what a container is because what

00:03:05,310 --> 00:03:12,300
containers are kind of influences how we

00:03:07,290 --> 00:03:14,910
actually structure our workflows so in

00:03:12,300 --> 00:03:18,090
the really old days of my previous job

00:03:14,910 --> 00:03:23,160
last year you would deploy code to a

00:03:18,090 --> 00:03:25,260
bare metal server and in all honesty 80%

00:03:23,160 --> 00:03:28,110
of the projects I work on probably still

00:03:25,260 --> 00:03:29,220
get deployed to a bare metal server it's

00:03:28,110 --> 00:03:31,950
really easy to setup

00:03:29,220 --> 00:03:35,250
it's very non resource intensive but

00:03:31,950 --> 00:03:36,090
from like a large enterprise setup or

00:03:35,250 --> 00:03:39,360
like you looking something like

00:03:36,090 --> 00:03:41,610
digitalocean or AWS or Rackspace it's

00:03:39,360 --> 00:03:43,830
super inefficient so we've got a fake

00:03:41,610 --> 00:03:45,720
little computer here with some processes

00:03:43,830 --> 00:03:47,850
being used in a normal setup you've got

00:03:45,720 --> 00:03:49,800
your processes up there in green they

00:03:47,850 --> 00:03:51,750
talk to an operating system and the

00:03:49,800 --> 00:03:54,600
operating system talks to the hardware

00:03:51,750 --> 00:03:56,760
and this works really well if your PHP

00:03:54,600 --> 00:03:58,530
application says I want Ram it asks the

00:03:56,760 --> 00:04:00,540
operating system instead of having to

00:03:58,530 --> 00:04:03,270
understand how to talk to the actual

00:04:00,540 --> 00:04:05,220
physical hardware to get that RAM now

00:04:03,270 --> 00:04:07,200
there is a little bit of overhead our

00:04:05,220 --> 00:04:09,180
operating system takes up some resources

00:04:07,200 --> 00:04:10,500
so that's our graph on the side we're

00:04:09,180 --> 00:04:15,300
gonna say our operating system takes up

00:04:10,500 --> 00:04:17,280
10% CPU 20% ram and then our application

00:04:15,300 --> 00:04:19,590
sits on top of that and gobbles up some

00:04:17,280 --> 00:04:23,330
more of that makes total sense we use

00:04:19,590 --> 00:04:25,950
resources but if we have a single

00:04:23,330 --> 00:04:28,110
application on a single server that's

00:04:25,950 --> 00:04:28,889
really inefficient but we really don't

00:04:28,110 --> 00:04:30,629
want to overload

00:04:28,889 --> 00:04:32,879
there's too much and there are issues

00:04:30,629 --> 00:04:36,599
especially security issues with shared

00:04:32,879 --> 00:04:38,400
hosts so a lot of place has moved over

00:04:36,599 --> 00:04:40,439
to virtual machines and this worked

00:04:38,400 --> 00:04:44,330
great this is why vagrant was so

00:04:40,439 --> 00:04:46,319
powerful but there's a lot more resource

00:04:44,330 --> 00:04:48,900
resources used with all this

00:04:46,319 --> 00:04:51,479
so generally with a virtual machine we

00:04:48,900 --> 00:04:53,189
still have our base operating system we

00:04:51,479 --> 00:04:54,870
have the hardware at the bottom but then

00:04:53,189 --> 00:04:57,180
we have this intermediary layer called a

00:04:54,870 --> 00:04:58,620
hypervisor sometimes that's built into

00:04:57,180 --> 00:05:00,449
the operating system sometimes it's a

00:04:58,620 --> 00:05:03,300
completely separate software product

00:05:00,449 --> 00:05:05,520
like VirtualBox you have things like

00:05:03,300 --> 00:05:08,250
hyper-v and Windows which kind of blur

00:05:05,520 --> 00:05:10,560
that line but basically the hypervisor

00:05:08,250 --> 00:05:12,330
is an intermediary between the

00:05:10,560 --> 00:05:15,000
virtualized operating system and the

00:05:12,330 --> 00:05:16,650
real one so whatever you deploy an

00:05:15,000 --> 00:05:18,900
application you get a whole new

00:05:16,650 --> 00:05:21,449
operating system with all the processes

00:05:18,900 --> 00:05:24,449
on top of it so our resource usage goes

00:05:21,449 --> 00:05:26,159
up but we get the better separation of

00:05:24,449 --> 00:05:28,349
concerns between those individual

00:05:26,159 --> 00:05:31,199
machines that's great for big companies

00:05:28,349 --> 00:05:33,330
like AWS and Rackspace and stuff because

00:05:31,199 --> 00:05:35,789
they can shove more operating systems on

00:05:33,330 --> 00:05:37,370
a single machine not worry about them

00:05:35,789 --> 00:05:40,500
clobbering each other with different

00:05:37,370 --> 00:05:41,789
configuration needs or whatever and you

00:05:40,500 --> 00:05:43,440
get some benefits of being able to like

00:05:41,789 --> 00:05:46,169
move them around through like some of

00:05:43,440 --> 00:05:48,089
the various VMware technologies you can

00:05:46,169 --> 00:05:51,930
do cool things like hot swap of VMs with

00:05:48,089 --> 00:05:53,909
no downtime but there's a lot of

00:05:51,930 --> 00:05:56,460
overhead with that because your PHP

00:05:53,909 --> 00:05:58,289
application needs to read a file PHP

00:05:56,460 --> 00:05:59,729
talks to the virtualized operating

00:05:58,289 --> 00:06:01,439
system which then has to talk to the

00:05:59,729 --> 00:06:03,300
hypervisor which then has to talk to the

00:06:01,439 --> 00:06:05,129
real operating system which then has to

00:06:03,300 --> 00:06:07,979
ask the hard drive for the information

00:06:05,129 --> 00:06:10,560
and then it has to flow all backup how

00:06:07,979 --> 00:06:16,529
many people here use OS mac OS with

00:06:10,560 --> 00:06:17,729
docker that's why it's so slow because

00:06:16,529 --> 00:06:18,599
we cheat and I'll talk a little more

00:06:17,729 --> 00:06:23,219
about that in a bit

00:06:18,599 --> 00:06:26,400
so but what containers do is let you run

00:06:23,219 --> 00:06:29,580
everything bare metal but just separates

00:06:26,400 --> 00:06:31,919
out the processes themselves into little

00:06:29,580 --> 00:06:35,430
walled gardens so here we've got them

00:06:31,919 --> 00:06:37,500
walled off in the red with our VMs comes

00:06:35,430 --> 00:06:39,300
up kind of brownish on here but our VMs

00:06:37,500 --> 00:06:41,550
are separated by the red boundary here

00:06:39,300 --> 00:06:42,650
containers we do the same thing but

00:06:41,550 --> 00:06:47,090
you'll notice there's no in

00:06:42,650 --> 00:06:48,830
mediary layer so if PHP asks or Ram it's

00:06:47,090 --> 00:06:50,690
going to ask the actual operating system

00:06:48,830 --> 00:06:53,120
and the operating system will give it

00:06:50,690 --> 00:06:55,070
RAM the separation just becomes what the

00:06:53,120 --> 00:06:58,160
processes can actually see alongside

00:06:55,070 --> 00:07:00,830
themselves so they're literally just

00:06:58,160 --> 00:07:04,520
walled processes so in a normal setup

00:07:00,830 --> 00:07:05,810
you have a kernel sitting at the top 90%

00:07:04,520 --> 00:07:07,669
of the time it's gonna be some sort of

00:07:05,810 --> 00:07:09,169
Linux kernel so we're gonna fake it and

00:07:07,669 --> 00:07:12,080
say it see a bunch of kernel here and

00:07:09,169 --> 00:07:13,490
that has its own world view so you know

00:07:12,080 --> 00:07:16,520
everything that's in the root directory

00:07:13,490 --> 00:07:19,220
you have been your Etsy or VAR WW

00:07:16,520 --> 00:07:21,320
clients whatever and when you run

00:07:19,220 --> 00:07:23,810
processes they talk directly to the

00:07:21,320 --> 00:07:24,850
kernel and the kernel by default looks

00:07:23,810 --> 00:07:28,370
at that view

00:07:24,850 --> 00:07:32,479
all a container does is create a new

00:07:28,370 --> 00:07:37,010
view and point a process to that new

00:07:32,479 --> 00:07:39,169
view that new view gives us some things

00:07:37,010 --> 00:07:41,090
like not being able to see other

00:07:39,169 --> 00:07:43,820
people's processes getting your own

00:07:41,090 --> 00:07:45,650
separate network topology all kinds of

00:07:43,820 --> 00:07:46,910
nice little things but a high-level all

00:07:45,650 --> 00:07:53,090
it's doing is just creating another

00:07:46,910 --> 00:07:55,070
little world inside your system so

00:07:53,090 --> 00:07:58,330
docker itself when you get right down to

00:07:55,070 --> 00:08:00,770
it is just vagrant four containers

00:07:58,330 --> 00:08:03,580
docker doesn't actually do anything

00:08:00,770 --> 00:08:07,099
magical it's using existing technologies

00:08:03,580 --> 00:08:10,900
docker nowadays especially is an entire

00:08:07,099 --> 00:08:12,830
ecosystem so we get this kind of muddled

00:08:10,900 --> 00:08:15,080
terminology with like when we say docker

00:08:12,830 --> 00:08:16,639
what exactly are we talking about 9

00:08:15,080 --> 00:08:18,590
times out of 10 you're probably talking

00:08:16,639 --> 00:08:19,970
about docker engine which is the actual

00:08:18,590 --> 00:08:21,919
thing that you know the command line

00:08:19,970 --> 00:08:24,470
you're typing into and the API that it's

00:08:21,919 --> 00:08:25,940
talking to you have a couple other

00:08:24,470 --> 00:08:28,400
things on top of that like machine

00:08:25,940 --> 00:08:29,570
compose and swarm though I really should

00:08:28,400 --> 00:08:30,860
probably take swarm out at this point

00:08:29,570 --> 00:08:33,500
cuz nobody uses it

00:08:30,860 --> 00:08:35,029
it failed in the market but you've got

00:08:33,500 --> 00:08:36,890
docker compose for your orchestration

00:08:35,029 --> 00:08:40,550
and docker machine for building machines

00:08:36,890 --> 00:08:42,469
that do docker so where a lot of the

00:08:40,550 --> 00:08:44,560
pain points come in especially as you

00:08:42,469 --> 00:08:47,390
start to talk about docker with teams is

00:08:44,560 --> 00:08:50,240
how it actually works for you

00:08:47,390 --> 00:08:52,490
individually on your machines so if

00:08:50,240 --> 00:08:54,740
you're like me and despite having a

00:08:52,490 --> 00:08:55,670
macbook i generally actually do most of

00:08:54,740 --> 00:08:58,580
my programming on

00:08:55,670 --> 00:09:00,500
so it works out of the box using a bunch

00:08:58,580 --> 00:09:03,410
of built-in things into the Linux kernel

00:09:00,500 --> 00:09:05,570
because Dockers primarily actually a

00:09:03,410 --> 00:09:08,720
Linux technology it takes advantage of

00:09:05,570 --> 00:09:10,370
things like C groups and the way it

00:09:08,720 --> 00:09:13,220
handles processes and visibility

00:09:10,370 --> 00:09:15,020
straight out of the box it can use a

00:09:13,220 --> 00:09:16,880
variety of different container

00:09:15,020 --> 00:09:19,940
technologies under the hood but

00:09:16,880 --> 00:09:23,390
primarily it's just talking to a Linux

00:09:19,940 --> 00:09:26,180
kernel because it talks to a Linux

00:09:23,390 --> 00:09:27,770
kernel the other two options Windows and

00:09:26,180 --> 00:09:29,960
Mac OS all actually have a virtual

00:09:27,770 --> 00:09:31,610
machine in there which eats up some

00:09:29,960 --> 00:09:34,790
resources and causes some additional

00:09:31,610 --> 00:09:37,790
pain points because you're probably not

00:09:34,790 --> 00:09:41,630
deploying to a docker install on Windows

00:09:37,790 --> 00:09:44,810
or a docker install on OS X I'll put a

00:09:41,630 --> 00:09:46,730
little asterisk next to that so with OS

00:09:44,810 --> 00:09:48,290
X most of your problems you're gonna run

00:09:46,730 --> 00:09:50,720
into our because of that virtualization

00:09:48,290 --> 00:09:53,120
layer it doesn't quite handle port

00:09:50,720 --> 00:09:56,210
binding the way that it does in Linux or

00:09:53,120 --> 00:09:57,410
it will in production ignoring that

00:09:56,210 --> 00:09:58,730
you're probably running like kubernetes

00:09:57,410 --> 00:10:00,920
and stuff in production but just

00:09:58,730 --> 00:10:02,120
straight docker it works a little bit

00:10:00,920 --> 00:10:04,460
differently because you can do different

00:10:02,120 --> 00:10:06,830
port bindings and docker expects ports

00:10:04,460 --> 00:10:10,760
to work a specific way and they kind of

00:10:06,830 --> 00:10:13,220
fudge a lot of that in OS X because of

00:10:10,760 --> 00:10:15,530
the X I've virtually ssin layer that

00:10:13,220 --> 00:10:18,320
layer actually has a really poor i/o

00:10:15,530 --> 00:10:20,300
implementation so if you're using layer

00:10:18,320 --> 00:10:21,770
of basically anything had a symphony

00:10:20,300 --> 00:10:25,040
base that uses a lot of annotations

00:10:21,770 --> 00:10:28,400
reading and a lot of i/o there IO layer

00:10:25,040 --> 00:10:30,740
at the operating system level is super

00:10:28,400 --> 00:10:32,480
inefficient which is what causes all of

00:10:30,740 --> 00:10:34,610
the slowdowns it's not actually a docker

00:10:32,480 --> 00:10:37,220
problem but it's also a problem you'll

00:10:34,610 --> 00:10:38,690
never have in production it exists

00:10:37,220 --> 00:10:41,210
solely because of that virtualization

00:10:38,690 --> 00:10:42,740
layer Windows actually has three

00:10:41,210 --> 00:10:46,000
different ways to run containers all

00:10:42,740 --> 00:10:48,950
fully supported by Microsoft and docker

00:10:46,000 --> 00:10:51,320
the bottom two are the most common use

00:10:48,950 --> 00:10:52,850
cases for people so you have hyper-v

00:10:51,320 --> 00:10:54,230
containers where there is a virtual

00:10:52,850 --> 00:10:57,650
earth there is a virtual machine running

00:10:54,230 --> 00:10:59,600
like OS X it sets up a small little

00:10:57,650 --> 00:11:01,850
Linux machine actually running a

00:10:59,600 --> 00:11:04,910
distribution called movie Linux and runs

00:11:01,850 --> 00:11:06,320
everything in there the newer style way

00:11:04,910 --> 00:11:09,470
which is still technically in beta

00:11:06,320 --> 00:11:12,110
preview is the ws l2

00:11:09,470 --> 00:11:17,930
stuff do we have anybody in here who

00:11:12,110 --> 00:11:20,230
runs Windows dicen Hampel I WS l2 and

00:11:17,930 --> 00:11:23,690
everything is wonderful I love it

00:11:20,230 --> 00:11:25,460
it works with native containers but

00:11:23,690 --> 00:11:27,920
still actually in a virtual machine

00:11:25,460 --> 00:11:30,890
because WS l2 has moved to a virtual

00:11:27,920 --> 00:11:32,860
machine WS l1 doesn't use a virtual

00:11:30,890 --> 00:11:35,440
machine it actually has this weird

00:11:32,860 --> 00:11:39,140
translation translation layer to turn

00:11:35,440 --> 00:11:41,180
POSIX stuff into native windows calls

00:11:39,140 --> 00:11:45,230
which is why there was no overhead with

00:11:41,180 --> 00:11:46,910
WS l1 w SL 2 introduces a tiny amount of

00:11:45,230 --> 00:11:48,860
overhead but they've done a ton of work

00:11:46,910 --> 00:11:51,710
to get that to work it's not actually a

00:11:48,860 --> 00:11:53,390
full-on Linux installation though so if

00:11:51,710 --> 00:11:56,480
you need things that use like system D

00:11:53,390 --> 00:11:58,370
doesn't work but docker is working with

00:11:56,480 --> 00:12:01,610
Microsoft to actually make that all work

00:11:58,370 --> 00:12:03,770
itself Windows is in a unique position

00:12:01,610 --> 00:12:06,860
as well because they actually have a

00:12:03,770 --> 00:12:09,230
native server technology that they kind

00:12:06,860 --> 00:12:12,050
of worked with docker to do you can

00:12:09,230 --> 00:12:15,110
actually dock your eyes windows programs

00:12:12,050 --> 00:12:17,480
windows core perhaps so dotnet can

00:12:15,110 --> 00:12:19,130
actually be distributed as a windows

00:12:17,480 --> 00:12:22,180
container or what they call a server

00:12:19,130 --> 00:12:25,820
container and you can deploy that on

00:12:22,180 --> 00:12:28,210
Server 2016 and up and I believe Windows

00:12:25,820 --> 00:12:30,320
pro and up through docker docker desktop

00:12:28,210 --> 00:12:31,790
so if you're building Windows

00:12:30,320 --> 00:12:33,320
applications are done add applications

00:12:31,790 --> 00:12:34,880
you can actually compile them as a

00:12:33,320 --> 00:12:35,360
Windows binary and ship them off as a

00:12:34,880 --> 00:12:38,690
container

00:12:35,360 --> 00:12:40,700
there's no VM and I'm involved because a

00:12:38,690 --> 00:12:42,890
windows binary knows how to talk to a

00:12:40,700 --> 00:12:45,410
Windows kernel there's no need for an

00:12:42,890 --> 00:12:47,870
intermediary layer we have to use

00:12:45,410 --> 00:12:52,280
virtual machines because we tend to run

00:12:47,870 --> 00:12:54,590
Linux binaries on non Linux systems so

00:12:52,280 --> 00:12:56,150
you can't expect a Linux binary to

00:12:54,590 --> 00:13:00,260
understand how to talk to a Windows NT

00:12:56,150 --> 00:13:02,120
kernel or the the mach kernel inside OS

00:13:00,260 --> 00:13:04,730
X that's why we have those

00:13:02,120 --> 00:13:07,190
virtualization layers and they will

00:13:04,730 --> 00:13:08,420
probably never go away Apple doesn't

00:13:07,190 --> 00:13:11,030
seem to be interested in coming up with

00:13:08,420 --> 00:13:14,750
their own kernel set up but even if they

00:13:11,030 --> 00:13:16,400
did you'd have to get Mac OS containers

00:13:14,750 --> 00:13:17,750
which would be separate from your Linux

00:13:16,400 --> 00:13:20,400
containers which are separate from what

00:13:17,750 --> 00:13:23,760
you probably deploy in the production

00:13:20,400 --> 00:13:26,310
there is the kind of like Linux e the PI

00:13:23,760 --> 00:13:28,560
subset of containers because those are

00:13:26,310 --> 00:13:31,560
ARM processors not generally x86

00:13:28,560 --> 00:13:34,980
processors you have to get high specific

00:13:31,560 --> 00:13:38,310
containers for a lot of those things if

00:13:34,980 --> 00:13:40,980
you are on an old version of OS X or Y

00:13:38,310 --> 00:13:44,880
or on Windows less than 10 or you're not

00:13:40,980 --> 00:13:48,510
on Windows Pro sorry pay the upgrade fee

00:13:44,880 --> 00:13:53,420
to Windows Professional there is docker

00:13:48,510 --> 00:13:55,950
toolbox I do not suggest using it at all

00:13:53,420 --> 00:13:58,170
many of you are laughing but it's using

00:13:55,950 --> 00:14:00,810
VirtualBox which is has its own

00:13:58,170 --> 00:14:05,010
performance problems especially with the

00:14:00,810 --> 00:14:08,340
the file mounting system so if you think

00:14:05,010 --> 00:14:11,730
it's bad on OS X natively it gets worse

00:14:08,340 --> 00:14:15,030
with docker toolbox so they offer it but

00:14:11,730 --> 00:14:17,340
it's it is definitely a best-effort kind

00:14:15,030 --> 00:14:19,380
of thing you will have much less

00:14:17,340 --> 00:14:21,210
headaches just up upgrading your

00:14:19,380 --> 00:14:24,420
operating system level as much as you

00:14:21,210 --> 00:14:28,110
can or paying the license fee to go from

00:14:24,420 --> 00:14:33,450
home to pro if you are in an environment

00:14:28,110 --> 00:14:34,800
where your company says no I don't know

00:14:33,450 --> 00:14:39,660
really how to help you install a Linux

00:14:34,800 --> 00:14:43,760
virtual machine but I'd really caution

00:14:39,660 --> 00:14:43,760
you to not standardize on docker toolbox

00:14:44,270 --> 00:14:49,200
I've been giving this talk in various

00:14:46,680 --> 00:14:50,520
forms for many many years and we have

00:14:49,200 --> 00:14:53,160
finally gotten to the point where I

00:14:50,520 --> 00:14:55,260
think it's very comfortable to say we

00:14:53,160 --> 00:14:58,200
don't use docker for everything anymore

00:14:55,260 --> 00:15:02,070
it really is turning into a development

00:14:58,200 --> 00:15:04,890
layer tool containers are not just

00:15:02,070 --> 00:15:07,290
docker in fact in production you're

00:15:04,890 --> 00:15:10,070
probably not actually running docker I

00:15:07,290 --> 00:15:12,720
mean people in here running kubernetes a

00:15:10,070 --> 00:15:14,190
good smattering of you it's probably not

00:15:12,720 --> 00:15:16,350
using the docker engine under the hood

00:15:14,190 --> 00:15:18,750
it actually uses a different container

00:15:16,350 --> 00:15:20,670
technology under under there the cool

00:15:18,750 --> 00:15:23,670
thing is all of these different tools

00:15:20,670 --> 00:15:25,770
are talking to each other so you can use

00:15:23,670 --> 00:15:27,510
all of those things back and forth and

00:15:25,770 --> 00:15:29,370
you can reduce that friction even if

00:15:27,510 --> 00:15:30,270
you're not using the tooling from top to

00:15:29,370 --> 00:15:32,220
bottom

00:15:30,270 --> 00:15:33,170
red hats been working a lot on their pod

00:15:32,220 --> 00:15:35,300
man tool

00:15:33,170 --> 00:15:38,150
which is a rootless version of running

00:15:35,300 --> 00:15:40,670
containers it can run docker containers

00:15:38,150 --> 00:15:43,100
and it has its own it uses the standard

00:15:40,670 --> 00:15:45,080
there's a standard for how you should

00:15:43,100 --> 00:15:48,050
build images and things like that and

00:15:45,080 --> 00:15:50,230
it'll use those as well once they get

00:15:48,050 --> 00:15:53,660
all of dock the docker compose

00:15:50,230 --> 00:15:55,550
translation stuff handled I'm going to

00:15:53,660 --> 00:15:56,690
probably assume that's what a lot of

00:15:55,550 --> 00:15:58,370
people are gonna run start running in

00:15:56,690 --> 00:16:01,760
production for simpler applications

00:15:58,370 --> 00:16:06,020
kubernetes has one the distributed like

00:16:01,760 --> 00:16:07,400
multi node system so i'm not gonna get

00:16:06,020 --> 00:16:09,590
into like production level stuff here

00:16:07,400 --> 00:16:14,240
because that's a whole other ball of wax

00:16:09,590 --> 00:16:19,460
but just remember that docker is a

00:16:14,240 --> 00:16:24,380
single portion of the ecosystem not the

00:16:19,460 --> 00:16:26,540
entire ecosystem so probably one of the

00:16:24,380 --> 00:16:29,540
best ways to think about the workflows

00:16:26,540 --> 00:16:32,600
for what you want to do is this idea of

00:16:29,540 --> 00:16:35,390
a 12 factor application

00:16:32,600 --> 00:16:37,670
I believe it's 12 factor net has a list

00:16:35,390 --> 00:16:39,230
of really good ideas to think about as

00:16:37,670 --> 00:16:42,200
you're building distributed applications

00:16:39,230 --> 00:16:43,610
and even if ultimately you're not going

00:16:42,200 --> 00:16:47,780
to have an application that needs to

00:16:43,610 --> 00:16:50,780
scale to hundreds of containers because

00:16:47,780 --> 00:16:53,660
docker was designed with distributed in

00:16:50,780 --> 00:16:55,630
mind 12 factor applications give us a

00:16:53,660 --> 00:16:58,160
lot of things to think about and

00:16:55,630 --> 00:17:00,560
implement as we start to add workflows

00:16:58,160 --> 00:17:02,270
to our things because there are a lot of

00:17:00,560 --> 00:17:03,820
anti patterns and docker that you can

00:17:02,270 --> 00:17:06,530
really fall into because they're easy

00:17:03,820 --> 00:17:08,480
but that will make production deployment

00:17:06,530 --> 00:17:10,070
very hard and if you follow many of

00:17:08,480 --> 00:17:11,420
these workflows you're actually going to

00:17:10,070 --> 00:17:14,480
get to a point where pushing to

00:17:11,420 --> 00:17:16,130
production should be fairly seamlessly

00:17:14,480 --> 00:17:17,480
even if currently you're deploying to a

00:17:16,130 --> 00:17:24,110
bare-metal server and you're just using

00:17:17,480 --> 00:17:25,670
docker for development so couple these

00:17:24,110 --> 00:17:28,010
are gonna sound really really obvious is

00:17:25,670 --> 00:17:29,540
anybody in here not using some sort of

00:17:28,010 --> 00:17:31,670
some sort of version control even if

00:17:29,540 --> 00:17:35,810
you're still using CVS is anybody not

00:17:31,670 --> 00:17:37,670
using version control this is the first

00:17:35,810 --> 00:17:40,520
conference in a while we're not at least

00:17:37,670 --> 00:17:41,570
not one person has risen their hand you

00:17:40,520 --> 00:17:44,000
want to keep everything in version

00:17:41,570 --> 00:17:46,190
control for many obvious reasons but the

00:17:44,000 --> 00:17:48,260
big reason for that is you need to

00:17:46,190 --> 00:17:51,680
start keeping track of everything in

00:17:48,260 --> 00:17:54,470
time you should have a single repository

00:17:51,680 --> 00:17:56,390
for every full application that you're

00:17:54,470 --> 00:17:57,880
deploying I don't care if it's a micro

00:17:56,390 --> 00:18:00,650
service or a monolith or whatever

00:17:57,880 --> 00:18:03,980
everything for an application goes into

00:18:00,650 --> 00:18:07,430
a singular repository I've worked on

00:18:03,980 --> 00:18:09,320
some consulting contracts where you have

00:18:07,430 --> 00:18:11,180
your config stored in a specific

00:18:09,320 --> 00:18:13,190
directory your application and another

00:18:11,180 --> 00:18:15,560
for example they're building an

00:18:13,190 --> 00:18:17,510
application currently in vagrant so that

00:18:15,560 --> 00:18:18,800
has its own config repository and the

00:18:17,510 --> 00:18:20,330
doctor stuffs in another one and you

00:18:18,800 --> 00:18:23,500
marry those two things together when you

00:18:20,330 --> 00:18:25,670
do a deploy that stuff gets out of sync

00:18:23,500 --> 00:18:28,360
anything that you need for your

00:18:25,670 --> 00:18:32,830
application goes into the repository

00:18:28,360 --> 00:18:35,450
sans like private configuration things

00:18:32,830 --> 00:18:38,960
if you're not tagging your releases now

00:18:35,450 --> 00:18:41,450
begin to tag them for many of this this

00:18:38,960 --> 00:18:42,860
is probably kind of a thing but there's

00:18:41,450 --> 00:18:45,170
many places that don't tag any of their

00:18:42,860 --> 00:18:47,090
releases you want to start getting in

00:18:45,170 --> 00:18:50,360
the habit of being able to say I release

00:18:47,090 --> 00:18:53,390
this thing on this day picks ember pick

00:18:50,360 --> 00:18:55,250
date based pick incremental I don't care

00:18:53,390 --> 00:18:57,490
but pick something consistent that you

00:18:55,250 --> 00:19:02,660
can point back to and say that I

00:18:57,490 --> 00:19:04,880
deployed version 5.3 on this day I can

00:19:02,660 --> 00:19:08,450
go back to five point three and look at

00:19:04,880 --> 00:19:12,170
it as of that snapshot does anybody ever

00:19:08,450 --> 00:19:14,830
move to tag you are better than some

00:19:12,170 --> 00:19:17,150
fortune 500 companies I've worked with

00:19:14,830 --> 00:19:19,550
you can move tags you can delete them

00:19:17,150 --> 00:19:21,650
and retag things don't ever do that

00:19:19,550 --> 00:19:24,500
because then you lose confidence in what

00:19:21,650 --> 00:19:27,110
a version number is one company I

00:19:24,500 --> 00:19:30,260
consulted for at one point we had five

00:19:27,110 --> 00:19:33,470
different versions of those that it was

00:19:30,260 --> 00:19:35,870
2.3 of an application deployed to

00:19:33,470 --> 00:19:38,590
customers you could not guarantee 2.3

00:19:35,870 --> 00:19:41,660
was the same from customer to customer

00:19:38,590 --> 00:19:44,330
doing tech support for that was a

00:19:41,660 --> 00:19:45,980
nightmare for that team because they

00:19:44,330 --> 00:19:50,180
literally had to figure out which get

00:19:45,980 --> 00:19:52,160
commit would that 2.3 point it to so

00:19:50,180 --> 00:19:54,190
don't ever move a tag if you tagged

00:19:52,160 --> 00:19:56,510
something and you find a bug

00:19:54,190 --> 00:19:57,680
congratulations you have a new tag you

00:19:56,510 --> 00:19:59,309
don't move the other one I don't care if

00:19:57,680 --> 00:20:02,610
you found it four hours after

00:19:59,309 --> 00:20:04,440
you make a new release and run your unit

00:20:02,610 --> 00:20:10,440
tests you're not your NE you tests run

00:20:04,440 --> 00:20:12,210
unit tests I love this debate monolith

00:20:10,440 --> 00:20:15,899
sources micro-services is anybody

00:20:12,210 --> 00:20:18,240
considering moving the microservices ask

00:20:15,899 --> 00:20:22,679
yourself really heavily why you're

00:20:18,240 --> 00:20:25,169
moving to a micro service there is

00:20:22,679 --> 00:20:26,249
nothing wrong with a properly

00:20:25,169 --> 00:20:29,029
constructed monolith

00:20:26,249 --> 00:20:31,740
if you cannot construct a monolith now

00:20:29,029 --> 00:20:34,220
you cannot construct a micro service if

00:20:31,740 --> 00:20:36,779
you're breaking up a monolith

00:20:34,220 --> 00:20:40,200
congratulations your monolith now exists

00:20:36,779 --> 00:20:42,090
on five different servers ma micro

00:20:40,200 --> 00:20:43,320
services have their place but you really

00:20:42,090 --> 00:20:47,429
need to treat them as separate

00:20:43,320 --> 00:20:50,009
applications not as one big global

00:20:47,429 --> 00:20:51,990
application each part of your micro

00:20:50,009 --> 00:20:54,419
service needs to be treated as some sort

00:20:51,990 --> 00:20:56,909
of third party service I have no control

00:20:54,419 --> 00:20:59,039
over Twitter so if my application relies

00:20:56,909 --> 00:21:00,450
on Twitter I have to be completely

00:20:59,039 --> 00:21:02,279
separate from them Twitter is not going

00:21:00,450 --> 00:21:04,409
to say oh hey by the way we're gonna

00:21:02,279 --> 00:21:06,389
break this in six months make sure that

00:21:04,409 --> 00:21:09,629
you're up to date and that you deploy on

00:21:06,389 --> 00:21:12,419
March 25th because we're also going to

00:21:09,629 --> 00:21:15,240
deploy if you have to have that level of

00:21:12,419 --> 00:21:17,190
granularity with your deploys you just

00:21:15,240 --> 00:21:18,779
have a monolith that you've broken up

00:21:17,190 --> 00:21:21,749
and now just have to figure out all that

00:21:18,779 --> 00:21:23,429
coding stuff micro services are not bad

00:21:21,749 --> 00:21:26,070
but you have to treat them as separate

00:21:23,429 --> 00:21:28,049
applications if you store all of your

00:21:26,070 --> 00:21:31,559
micro services and let's say a gigantic

00:21:28,049 --> 00:21:35,940
mono repo congratulations you have a

00:21:31,559 --> 00:21:37,889
monolith treat any micro service you

00:21:35,940 --> 00:21:40,100
have as a separate project completely

00:21:37,889 --> 00:21:42,149
they can all be handled by the same team

00:21:40,100 --> 00:21:44,490
but they have to be thought of as

00:21:42,149 --> 00:21:46,980
complete concrete separate applications

00:21:44,490 --> 00:21:48,360
in their own repository with their own

00:21:46,980 --> 00:21:51,869
deploy steps with their own

00:21:48,360 --> 00:21:53,700
configuration kind of like with the bare

00:21:51,869 --> 00:21:55,320
metal stuff I generally just build

00:21:53,700 --> 00:22:01,590
monolithic applications because they

00:21:55,320 --> 00:22:02,850
work they can scale just as well so if

00:22:01,590 --> 00:22:04,409
you're gonna move to micro services

00:22:02,850 --> 00:22:06,690
especially if you're breaking up a

00:22:04,409 --> 00:22:08,250
monolith ask yourself what you're

00:22:06,690 --> 00:22:12,149
gaining out of it before you make that

00:22:08,250 --> 00:22:13,120
step it might look like it will help you

00:22:12,149 --> 00:22:16,960
with docker

00:22:13,120 --> 00:22:20,020
but it probably won't this is another

00:22:16,960 --> 00:22:21,070
dull one for us as PHP developers but

00:22:20,020 --> 00:22:23,500
you should declare all of your

00:22:21,070 --> 00:22:25,270
dependencies don't do something like

00:22:23,500 --> 00:22:28,600
commit your vendor directory to your

00:22:25,270 --> 00:22:31,180
repository it's bad and get you in the

00:22:28,600 --> 00:22:33,160
habit of editing those files with no

00:22:31,180 --> 00:22:35,590
kind of way to actually audit those if

00:22:33,160 --> 00:22:37,510
you need to update but you need to

00:22:35,590 --> 00:22:39,540
explicitly declare and isolate those

00:22:37,510 --> 00:22:42,270
dependencies regardless if it's a

00:22:39,540 --> 00:22:44,380
package.json a composer dot JSON

00:22:42,270 --> 00:22:48,400
whatever else you're using for your

00:22:44,380 --> 00:22:50,260
application hot take of the day commit

00:22:48,400 --> 00:22:53,440
composer dot JSON and your composer lock

00:22:50,260 --> 00:22:54,250
files both of them the only time you

00:22:53,440 --> 00:22:55,900
don't do that is when you're

00:22:54,250 --> 00:22:57,400
distributing a library but at that point

00:22:55,900 --> 00:22:59,530
you're not building containers so it

00:22:57,400 --> 00:23:01,750
doesn't really matter so like my day job

00:22:59,530 --> 00:23:03,490
I work on the PHP SDK at next bow we

00:23:01,750 --> 00:23:05,170
don't ship a lock file because that

00:23:03,490 --> 00:23:06,580
introduces some compatibility issues

00:23:05,170 --> 00:23:10,360
with people trying to build their stuff

00:23:06,580 --> 00:23:12,430
sometimes guzzle is a great Collider

00:23:10,360 --> 00:23:15,310
with our stuff if we ship it composer

00:23:12,430 --> 00:23:17,170
dot lock file so we just ship it

00:23:15,310 --> 00:23:19,570
composer dot JSON if you're shipping an

00:23:17,170 --> 00:23:21,280
entire application commit your lock file

00:23:19,570 --> 00:23:22,750
that way you get the specific version

00:23:21,280 --> 00:23:25,810
that you know works with all of your

00:23:22,750 --> 00:23:28,270
tests and all of that it also helps if

00:23:25,810 --> 00:23:29,530
you need to rebuild an older version so

00:23:28,270 --> 00:23:32,050
that you make sure you get the old

00:23:29,530 --> 00:23:35,860
version of the libraries you're using

00:23:32,050 --> 00:23:38,140
and you can debug those properly one

00:23:35,860 --> 00:23:40,270
company I worked with we didn't commit

00:23:38,140 --> 00:23:41,380
the lock file so if we had to go back to

00:23:40,270 --> 00:23:44,110
an old version for a customer because

00:23:41,380 --> 00:23:45,550
they just hadn't upgraded I got newer

00:23:44,110 --> 00:23:48,040
versions of libraries which may

00:23:45,550 --> 00:23:49,720
introduce slight bugs despite how well

00:23:48,040 --> 00:23:52,480
people follow cember sometimes those

00:23:49,720 --> 00:23:54,130
things slipped through and maybe they

00:23:52,480 --> 00:23:55,680
were being caused by a library bug that

00:23:54,130 --> 00:23:57,760
has since been fixed in a patch update

00:23:55,680 --> 00:24:00,670
but we would never know because we

00:23:57,760 --> 00:24:01,660
didn't keep a lock file and kind of

00:24:00,670 --> 00:24:03,760
along that when you're talking with

00:24:01,660 --> 00:24:07,540
docker also commit all your docker files

00:24:03,760 --> 00:24:09,790
to that same repository that you keep

00:24:07,540 --> 00:24:12,430
everything else in your docker file is a

00:24:09,790 --> 00:24:13,990
dependency it tells you what image

00:24:12,430 --> 00:24:15,820
you're going to be building from and the

00:24:13,990 --> 00:24:17,350
steps you need to build it so that needs

00:24:15,820 --> 00:24:19,680
to live alongside the rest of your

00:24:17,350 --> 00:24:19,680
codebase

00:24:21,830 --> 00:24:25,830
for configuration you're going to have

00:24:24,629 --> 00:24:28,980
to look at how you're gonna split that

00:24:25,830 --> 00:24:31,499
up but ultimately you want to start

00:24:28,980 --> 00:24:36,029
storing your configuration files in the

00:24:31,499 --> 00:24:38,909
environment itself not as files or dot M

00:24:36,029 --> 00:24:41,340
files or whatever you want to make sure

00:24:38,909 --> 00:24:44,639
that your application can just request

00:24:41,340 --> 00:24:47,659
whatever it needs from the system and it

00:24:44,639 --> 00:24:49,440
will make life much easier to deploy

00:24:47,659 --> 00:24:51,179
anything that's environments

00:24:49,440 --> 00:24:52,919
specific should move to these

00:24:51,179 --> 00:24:55,590
configuration variables if you want to

00:24:52,919 --> 00:24:58,799
ship like a default like set pagination

00:24:55,590 --> 00:25:01,289
automatically to 25 or you know a

00:24:58,799 --> 00:25:02,580
default time zone for you know a new

00:25:01,289 --> 00:25:05,399
customer to deploy or whatever that's

00:25:02,580 --> 00:25:07,889
not quite so bad but things like where's

00:25:05,399 --> 00:25:10,740
my database located where's my caching

00:25:07,889 --> 00:25:13,409
located where are my PHP servers at

00:25:10,740 --> 00:25:17,759
those things should start to move to

00:25:13,409 --> 00:25:19,499
environment variables we sometimes get

00:25:17,759 --> 00:25:21,869
in the habit of being stuck on like oh I

00:25:19,499 --> 00:25:23,490
shipped a dot M file so we're kind of

00:25:21,869 --> 00:25:26,369
doing it but if you're shipping a file

00:25:23,490 --> 00:25:29,119
you're still kind of doing it wrong dot

00:25:26,369 --> 00:25:32,399
M exists so that we can replicate

00:25:29,119 --> 00:25:36,450
environment variables in development not

00:25:32,399 --> 00:25:38,700
as a way to actually deploy them this

00:25:36,450 --> 00:25:40,679
makes it a lot easier to deploy your

00:25:38,700 --> 00:25:43,379
code because you can pull an image down

00:25:40,679 --> 00:25:45,330
give it some config variable config

00:25:43,379 --> 00:25:47,309
environment variables and start it up

00:25:45,330 --> 00:25:49,169
you don't have to edit any files you can

00:25:47,309 --> 00:25:51,720
just point it to your dev database or

00:25:49,169 --> 00:25:53,399
whatever and move those things around

00:25:51,720 --> 00:25:56,460
it's a lot less you have to maintain in

00:25:53,399 --> 00:25:58,139
the containers themselves as you go

00:25:56,460 --> 00:25:59,789
through and you think about okay when do

00:25:58,139 --> 00:26:02,309
I need this configuration how do I pull

00:25:59,789 --> 00:26:03,720
it out and you just start to say well I

00:26:02,309 --> 00:26:06,539
need configuration just start using get

00:26:03,720 --> 00:26:09,090
M your code cares less about what

00:26:06,539 --> 00:26:10,169
external services it's talking to and it

00:26:09,090 --> 00:26:14,730
makes you think about where you're

00:26:10,169 --> 00:26:16,470
actually hard coding things in for

00:26:14,730 --> 00:26:18,869
docker itself depending on how you're

00:26:16,470 --> 00:26:20,309
actually invoking your application if

00:26:18,869 --> 00:26:22,259
you're just doing like a real basic apps

00:26:20,309 --> 00:26:25,379
you know prototyping something you can

00:26:22,259 --> 00:26:28,320
use the dash II command or the dash e

00:26:25,379 --> 00:26:30,539
parameter and do multiples of them to do

00:26:28,320 --> 00:26:32,039
var name equals value and that will pass

00:26:30,539 --> 00:26:34,700
them in as a normal environment variable

00:26:32,039 --> 00:26:38,360
if you have a lot of them that you use

00:26:34,700 --> 00:26:40,880
commonly you can use - - EMV - file and

00:26:38,360 --> 00:26:43,250
pass it in any file that has all of

00:26:40,880 --> 00:26:44,840
these things Skelton out as well and you

00:26:43,250 --> 00:26:46,940
can use them in parallel so if you want

00:26:44,840 --> 00:26:49,010
to change something real quick you can

00:26:46,940 --> 00:26:51,320
throw a dashi in there and then kind of

00:26:49,010 --> 00:26:55,040
override stuff if you're using docker

00:26:51,320 --> 00:26:57,170
compose you can also specify this so

00:26:55,040 --> 00:26:59,120
there is an environment file and an EMV

00:26:57,170 --> 00:27:02,240
section in docker compose if you want a

00:26:59,120 --> 00:27:03,650
hard code that kind of stuff but get in

00:27:02,240 --> 00:27:07,250
the habit of pulling those things out

00:27:03,650 --> 00:27:08,960
and tracking them that way instead of

00:27:07,250 --> 00:27:13,780
worrying about what goes into a

00:27:08,960 --> 00:27:16,090
configuration file in speaking of that

00:27:13,780 --> 00:27:20,120
anything that is not your application

00:27:16,090 --> 00:27:21,710
treat as a third party treat is

00:27:20,120 --> 00:27:25,850
something that you don't actually have

00:27:21,710 --> 00:27:28,540
any control over so one big thing we do

00:27:25,850 --> 00:27:32,360
like when we talk to database server

00:27:28,540 --> 00:27:35,750
usually like MySQL we just say connect -

00:27:32,360 --> 00:27:38,170
go on localhost well with docker you

00:27:35,750 --> 00:27:41,540
don't have a concept of a local socket

00:27:38,170 --> 00:27:43,190
you technically they're there but you

00:27:41,540 --> 00:27:44,960
can't talk to my SQL because MySQL is

00:27:43,190 --> 00:27:46,070
not running in your container you need

00:27:44,960 --> 00:27:48,230
to get in the habit of talking to

00:27:46,070 --> 00:27:50,150
everything over a network but then also

00:27:48,230 --> 00:27:52,880
thinking about well if it's over a

00:27:50,150 --> 00:27:54,980
network it's technically external how do

00:27:52,880 --> 00:27:59,300
I handle failures how do I handle the

00:27:54,980 --> 00:28:01,730
network latency I know most of the

00:27:59,300 --> 00:28:05,840
projects I work on we will probably use

00:28:01,730 --> 00:28:07,400
RDS in production but not development so

00:28:05,840 --> 00:28:08,840
being able to separate those things out

00:28:07,400 --> 00:28:10,400
through things like the configuration

00:28:08,840 --> 00:28:12,620
files but that's still treating it as a

00:28:10,400 --> 00:28:13,790
network resource really come in handy

00:28:12,620 --> 00:28:16,040
there's less I have to do in my

00:28:13,790 --> 00:28:19,730
application code if I just assume it's a

00:28:16,040 --> 00:28:20,690
network request across the board you

00:28:19,730 --> 00:28:22,010
don't really have to start thinking

00:28:20,690 --> 00:28:23,780
about anything that's running locally on

00:28:22,010 --> 00:28:26,090
the box like what what do I need to have

00:28:23,780 --> 00:28:29,210
on the machine for my application to run

00:28:26,090 --> 00:28:32,330
your application just needs whatever it

00:28:29,210 --> 00:28:33,770
has everything else is external you can

00:28:32,330 --> 00:28:35,960
do things like scale up your my your

00:28:33,770 --> 00:28:39,080
database server through proper database

00:28:35,960 --> 00:28:40,790
scaling techniques cuz don't run your

00:28:39,080 --> 00:28:44,930
database in docker if that's not what it

00:28:40,790 --> 00:28:46,940
that's not how they scale but you can do

00:28:44,930 --> 00:28:48,470
take care of things specifically and

00:28:46,940 --> 00:28:50,179
then if you need to swap out

00:28:48,470 --> 00:28:52,490
to a third-party service like a SAS or

00:28:50,179 --> 00:28:54,260
whatever you can run fake versions of

00:28:52,490 --> 00:28:56,750
them locally and then point the the real

00:28:54,260 --> 00:28:58,130
ones in in the real-world environment if

00:28:56,750 --> 00:28:59,090
you're using environment variables it

00:28:58,130 --> 00:29:02,059
should just be an environment variable

00:28:59,090 --> 00:29:03,320
config change no code changes and it

00:29:02,059 --> 00:29:04,700
makes it a lot easier to scale up

00:29:03,320 --> 00:29:07,280
especially as you start to scale up

00:29:04,700 --> 00:29:09,169
individual containers in the back end

00:29:07,280 --> 00:29:11,419
which is another thing we'll consider

00:29:09,169 --> 00:29:13,460
but you can if you start to treat

00:29:11,419 --> 00:29:14,750
everything as external you can scale

00:29:13,460 --> 00:29:16,360
your individual pieces of your

00:29:14,750 --> 00:29:19,250
application what's easier

00:29:16,360 --> 00:29:20,840
there's nothing specifically inherent in

00:29:19,250 --> 00:29:21,890
docker to do this this is something

00:29:20,840 --> 00:29:23,960
that's probably gonna be a code change

00:29:21,890 --> 00:29:25,460
for you but it is something to consider

00:29:23,960 --> 00:29:27,620
as you're starting to architect your

00:29:25,460 --> 00:29:32,210
application and and build the workflow

00:29:27,620 --> 00:29:34,880
for yourself your build release and run

00:29:32,210 --> 00:29:37,130
steps should be separate concrete stages

00:29:34,880 --> 00:29:39,440
that individually can be run by

00:29:37,130 --> 00:29:42,919
themselves and re run by themselves with

00:29:39,440 --> 00:29:45,080
the same output so you should end up

00:29:42,919 --> 00:29:48,110
with actually three steps every time you

00:29:45,080 --> 00:29:49,610
do a deploy the first one is your build

00:29:48,110 --> 00:29:51,830
step that's gonna take all of your

00:29:49,610 --> 00:29:54,559
dependencies compiles any files you have

00:29:51,830 --> 00:29:56,539
like if your for the most part for us

00:29:54,559 --> 00:29:59,090
it's gonna be pulling down composer and

00:29:56,539 --> 00:30:00,470
probably running npm install but if

00:29:59,090 --> 00:30:03,740
you're using like python if it's got to

00:30:00,470 --> 00:30:05,630
compile any files in the backend to do

00:30:03,740 --> 00:30:08,120
that and you'll get some sort of

00:30:05,630 --> 00:30:09,760
artifact out of that depending on what

00:30:08,120 --> 00:30:11,659
you're using that might be a tar file

00:30:09,760 --> 00:30:14,090
for docker it's probably gonna be an

00:30:11,659 --> 00:30:16,250
image file but this will be a thing that

00:30:14,090 --> 00:30:17,780
has no configuration or deployment

00:30:16,250 --> 00:30:19,400
information in it whatsoever this is

00:30:17,780 --> 00:30:22,070
just a thing that I can put on another

00:30:19,400 --> 00:30:25,700
machine with some configuration and have

00:30:22,070 --> 00:30:29,059
it work your release step will pull a

00:30:25,700 --> 00:30:31,909
build artifact off the shelf and then

00:30:29,059 --> 00:30:34,429
start to prep that and put that into

00:30:31,909 --> 00:30:36,590
production and then your run step will

00:30:34,429 --> 00:30:38,860
actually do the flipping from one

00:30:36,590 --> 00:30:41,780
version to the next

00:30:38,860 --> 00:30:43,490
so for docker itself you want to start

00:30:41,780 --> 00:30:46,280
thinking about this build step as being

00:30:43,490 --> 00:30:51,380
an image that comes with everything you

00:30:46,280 --> 00:30:53,840
need to run so with a standard standard

00:30:51,380 --> 00:30:56,150
PHP app if we go really super simple and

00:30:53,840 --> 00:30:58,490
we're just using Apache and mod PHP this

00:30:56,150 --> 00:31:00,740
will be a single image with all of our

00:30:58,490 --> 00:31:01,600
dependencies and all of our code inside

00:31:00,740 --> 00:31:04,240
of an image

00:31:01,600 --> 00:31:06,490
that we store somewhere you can put it

00:31:04,240 --> 00:31:09,340
on docker hub you can put it on Amazon

00:31:06,490 --> 00:31:11,770
don't care where but we'll have a pretty

00:31:09,340 --> 00:31:13,210
phat image with all of the data inside

00:31:11,770 --> 00:31:15,340
of it that we need to run our

00:31:13,210 --> 00:31:17,260
application we can then pull that off

00:31:15,340 --> 00:31:19,870
the shelf and shove it wherever we

00:31:17,260 --> 00:31:21,520
ultimately need to deploy it you should

00:31:19,870 --> 00:31:23,590
be able to run that build step multiple

00:31:21,520 --> 00:31:25,750
times and get the same output you're

00:31:23,590 --> 00:31:27,190
using your composer not lock file you'll

00:31:25,750 --> 00:31:30,330
always get the same dependencies pulled

00:31:27,190 --> 00:31:32,410
down if you're using the same image

00:31:30,330 --> 00:31:35,740
versions they should all be pulled down

00:31:32,410 --> 00:31:38,260
the same every single way when you're

00:31:35,740 --> 00:31:39,909
ready to deploy you'll grab an image

00:31:38,260 --> 00:31:41,860
from the repository and shove it

00:31:39,909 --> 00:31:44,890
wherever it needs to go be it my local

00:31:41,860 --> 00:31:47,169
machine be it a QA server like a QA

00:31:44,890 --> 00:31:50,110
cluster you've got setup or an actual

00:31:47,169 --> 00:31:51,610
like kubernetes production but it's

00:31:50,110 --> 00:31:53,260
never gonna actually build directly from

00:31:51,610 --> 00:31:55,030
the repository you want to get in the

00:31:53,260 --> 00:31:58,510
habit of pulling those images from a

00:31:55,030 --> 00:32:02,020
registry not building it and then

00:31:58,510 --> 00:32:04,090
deploying immediately tag all your

00:32:02,020 --> 00:32:05,890
builds and by that I mean come up with a

00:32:04,090 --> 00:32:08,049
nice naming convention I usually do it

00:32:05,890 --> 00:32:10,840
by date underscore version because I

00:32:08,049 --> 00:32:12,250
might deploy like dev versions or QA

00:32:10,840 --> 00:32:14,320
versions multiple times throughout the

00:32:12,250 --> 00:32:15,940
day as we tweak little different things

00:32:14,320 --> 00:32:17,559
but you want to be able to say like

00:32:15,940 --> 00:32:19,720
which version am I actually running in

00:32:17,559 --> 00:32:21,280
QA in production you know query

00:32:19,720 --> 00:32:24,760
kubernetes real quick and be like okay I

00:32:21,280 --> 00:32:26,409
know exactly what that is and track all

00:32:24,760 --> 00:32:27,460
of your releases somehow this is a

00:32:26,409 --> 00:32:29,169
little bit more important if you're

00:32:27,460 --> 00:32:31,090
doing like client or consultant where

00:32:29,169 --> 00:32:32,590
type of stuff but if you have like a

00:32:31,090 --> 00:32:36,039
white box app product that you're

00:32:32,590 --> 00:32:37,570
selling off to people tag who and what

00:32:36,039 --> 00:32:38,470
goes out to where different customers

00:32:37,570 --> 00:32:40,120
probably have different release

00:32:38,470 --> 00:32:43,150
schedules and are comfortable with

00:32:40,120 --> 00:32:44,980
different layers of work but you want to

00:32:43,150 --> 00:32:46,299
know what actually goes out and you want

00:32:44,980 --> 00:32:50,710
to know what version you're pulling down

00:32:46,299 --> 00:32:53,919
when you start to do development if you

00:32:50,710 --> 00:32:55,900
are not building now start small your

00:32:53,919 --> 00:32:59,770
build application can be run composer

00:32:55,900 --> 00:33:02,020
run NPM do whatever NPM build stuff you

00:32:59,770 --> 00:33:03,789
need to do and then use docker build to

00:33:02,020 --> 00:33:05,890
just make an image that can be your

00:33:03,789 --> 00:33:07,809
entire build step and then shove it to a

00:33:05,890 --> 00:33:09,220
private registry if you don't want to

00:33:07,809 --> 00:33:12,940
really worry about it docker hub is

00:33:09,220 --> 00:33:14,350
super cheap I'm not gonna tell you how

00:33:12,940 --> 00:33:14,960
but there are ways to get around some of

00:33:14,350 --> 00:33:17,180
their limits

00:33:14,960 --> 00:33:20,150
but it's really super cheap and really

00:33:17,180 --> 00:33:22,010
easy to get into I like pushing people

00:33:20,150 --> 00:33:23,330
that way because AWS can be very

00:33:22,010 --> 00:33:25,760
intimidating especially if you're not

00:33:23,330 --> 00:33:28,520
deploying to AWS if you're deploying to

00:33:25,760 --> 00:33:30,220
AWS use AWS registry you're probably

00:33:28,520 --> 00:33:34,820
already fully invested in that stack

00:33:30,220 --> 00:33:36,200
just tack that on for your build step

00:33:34,820 --> 00:33:40,910
there's a couple of things you can look

00:33:36,200 --> 00:33:42,260
at generally depending on what how your

00:33:40,910 --> 00:33:44,210
application is structured you might be

00:33:42,260 --> 00:33:47,360
using individual docker files or you

00:33:44,210 --> 00:33:49,970
might be using a multi-stage file but I

00:33:47,360 --> 00:33:51,710
never keep my docker file like in the

00:33:49,970 --> 00:33:55,010
root of my directory I actually keep it

00:33:51,710 --> 00:33:57,110
in a separate docker folder so you can

00:33:55,010 --> 00:34:00,050
use - - file to actually point to a

00:33:57,110 --> 00:34:02,980
specific file separate from where the

00:34:00,050 --> 00:34:07,360
the where you're running the command I

00:34:02,980 --> 00:34:09,490
always recommend using - - new - cash

00:34:07,360 --> 00:34:12,740
docker tries to be really super helpful

00:34:09,490 --> 00:34:16,280
in that if it doesn't need to rebuild an

00:34:12,740 --> 00:34:19,220
individual build step it won't but you

00:34:16,280 --> 00:34:22,370
really run the risk of getting outdated

00:34:19,220 --> 00:34:23,540
layers there out there if you've got

00:34:22,370 --> 00:34:26,480
something where you're pulling down a

00:34:23,540 --> 00:34:28,490
couple libraries for dependencies for

00:34:26,480 --> 00:34:30,230
different things those can get out of

00:34:28,490 --> 00:34:31,580
date and if those get out of date

00:34:30,230 --> 00:34:34,220
you're not pulling in security fixes

00:34:31,580 --> 00:34:36,230
that can be really bad from a lot of

00:34:34,220 --> 00:34:38,960
stand points so always get in the habit

00:34:36,230 --> 00:34:43,700
of not using a build cache for that

00:34:38,960 --> 00:34:45,380
it'll take 40 seconds longer but then

00:34:43,700 --> 00:34:48,260
you can fight on the chairs as you

00:34:45,380 --> 00:34:49,130
compile all your code ah good a couple

00:34:48,260 --> 00:34:52,040
people laughs so a couple people

00:34:49,130 --> 00:34:53,840
remember that that comic but mostly it's

00:34:52,040 --> 00:34:54,920
a security issue like always make sure

00:34:53,840 --> 00:34:57,650
you're pulling down the latest

00:34:54,920 --> 00:34:59,390
dependencies that you have and then do a

00:34:57,650 --> 00:35:00,830
- - pull that make sure you're pulling

00:34:59,390 --> 00:35:03,110
the latest version of whatever your base

00:35:00,830 --> 00:35:04,850
images again to make sure that you're

00:35:03,110 --> 00:35:06,790
getting all of these security updates

00:35:04,850 --> 00:35:08,810
and things like that

00:35:06,790 --> 00:35:11,150
three or four years ago there was a

00:35:08,810 --> 00:35:13,670
really bad outbreak where various

00:35:11,150 --> 00:35:15,200
versions of bash had a lot of security

00:35:13,670 --> 00:35:17,570
flaws

00:35:15,200 --> 00:35:19,160
turns out atonic containers should have

00:35:17,570 --> 00:35:20,660
updated but they never did so a ton of

00:35:19,160 --> 00:35:23,090
containers went out with a bunch of bash

00:35:20,660 --> 00:35:25,700
flaws you don't want to have that happen

00:35:23,090 --> 00:35:27,900
to you so always do a poll to grab the

00:35:25,700 --> 00:35:29,759
latest version and always use no cache

00:35:27,900 --> 00:35:32,970
to make sure you're getting the latest

00:35:29,759 --> 00:35:35,819
dependencies so you could do docker

00:35:32,970 --> 00:35:39,089
build - - no cache in this case we've

00:35:35,819 --> 00:35:41,579
got docker in a my docker file is in a

00:35:39,089 --> 00:35:43,200
docker PHP folder because of this

00:35:41,579 --> 00:35:45,539
example nginx was in its own separate

00:35:43,200 --> 00:35:49,079
folder just makes keeping configuration

00:35:45,539 --> 00:35:51,749
files separate cleaner so you'd use - F

00:35:49,079 --> 00:35:53,519
to pass that in - and then - T will give

00:35:51,749 --> 00:35:55,109
you giving your tag name you really

00:35:53,519 --> 00:35:57,119
should be using like vendor slash

00:35:55,109 --> 00:35:59,579
whatever but I've only got so much

00:35:57,119 --> 00:36:01,680
screen space and there's an option that

00:35:59,579 --> 00:36:03,450
most people don't really notice with

00:36:01,680 --> 00:36:06,079
docker build and that's at the last

00:36:03,450 --> 00:36:08,819
parameter for it last argument is

00:36:06,079 --> 00:36:11,309
actually where the root of your project

00:36:08,819 --> 00:36:14,069
exists you don't have to run docker

00:36:11,309 --> 00:36:15,539
build next to your docker file you don't

00:36:14,069 --> 00:36:17,220
have to run it anywhere near your code

00:36:15,539 --> 00:36:20,220
you can point it to a file and then

00:36:17,220 --> 00:36:22,410
wherever your build output is and change

00:36:20,220 --> 00:36:25,410
the context where docker the docker file

00:36:22,410 --> 00:36:27,059
runs the docker file will run in the

00:36:25,410 --> 00:36:29,789
context of whatever that last argument

00:36:27,059 --> 00:36:31,559
is so you can have docker build run from

00:36:29,789 --> 00:36:33,960
wherever and just point to wherever your

00:36:31,559 --> 00:36:35,130
build directory is so a lot of times

00:36:33,960 --> 00:36:36,799
I'll actually have that build directory

00:36:35,130 --> 00:36:40,980
as like a variable and a shell script

00:36:36,799 --> 00:36:44,569
with whatever the last build folder is

00:36:40,980 --> 00:36:47,130
because I'll randomize file names and

00:36:44,569 --> 00:36:48,329
then the last thing you can do or one of

00:36:47,130 --> 00:36:51,989
the steps in your docker file you'll do

00:36:48,329 --> 00:36:53,549
is you'll just do a copy this is what

00:36:51,989 --> 00:36:56,910
trips a lot of people up trying to build

00:36:53,549 --> 00:37:00,359
these copy and add if you want to use

00:36:56,910 --> 00:37:03,900
add runs in the context of your build

00:37:00,359 --> 00:37:08,430
directory not in the context of where

00:37:03,900 --> 00:37:13,410
your docker file exists so if I tell it

00:37:08,430 --> 00:37:16,289
to look in opt builds 2016 10 10 copy

00:37:13,410 --> 00:37:19,980
will actually copy from that folder into

00:37:16,289 --> 00:37:21,509
my container from bar WW if I run this

00:37:19,980 --> 00:37:23,549
command in the root of my directory but

00:37:21,509 --> 00:37:25,559
I supply something it's not going to run

00:37:23,549 --> 00:37:26,970
in the root of my directory so that's

00:37:25,559 --> 00:37:28,319
where you can start to split things up

00:37:26,970 --> 00:37:30,989
but you have to be really careful about

00:37:28,319 --> 00:37:32,999
the context this runs in because if your

00:37:30,989 --> 00:37:36,930
docker files in a subfolder and you

00:37:32,999 --> 00:37:38,789
don't change that that target it'll try

00:37:36,930 --> 00:37:40,380
to run in the context of that subfolder

00:37:38,789 --> 00:37:43,190
not the root of your project so that's

00:37:40,380 --> 00:37:43,190
something that can't keep them

00:37:44,660 --> 00:37:49,830
another hot take of the day execute apps

00:37:47,370 --> 00:37:52,260
is one or more stateless processes if

00:37:49,830 --> 00:37:55,680
you have more than one process in your

00:37:52,260 --> 00:37:57,440
container you're doing it wrong don't at

00:37:55,680 --> 00:38:00,420
me you're doing it wrong

00:37:57,440 --> 00:38:03,560
docker is not designed to run multiple

00:38:00,420 --> 00:38:05,850
processes in a single container it can

00:38:03,560 --> 00:38:08,670
but just because you can doesn't mean

00:38:05,850 --> 00:38:11,510
you should if your container contains a

00:38:08,670 --> 00:38:14,880
supervisor process like supervisor D

00:38:11,510 --> 00:38:15,680
you're doing it wrong sorry you're doing

00:38:14,880 --> 00:38:18,780
it wrong

00:38:15,680 --> 00:38:20,580
if supervisor crashes it takes

00:38:18,780 --> 00:38:22,590
everything else down with it because

00:38:20,580 --> 00:38:25,260
docker will only ever watch one process

00:38:22,590 --> 00:38:26,790
at a time it is not designed to run

00:38:25,260 --> 00:38:29,330
multiple processes inside of a single

00:38:26,790 --> 00:38:32,280
container if you need that functionality

00:38:29,330 --> 00:38:35,640
don't use docker use something like LX c

00:38:32,280 --> 00:38:38,010
or lxd from canonical those are designed

00:38:35,640 --> 00:38:40,740
to replicate an entire machine with a

00:38:38,010 --> 00:38:43,680
full init process and run multiple

00:38:40,740 --> 00:38:46,830
things at once docker only wants one

00:38:43,680 --> 00:38:48,750
process at a time the reason for this

00:38:46,830 --> 00:38:50,880
goes back to my very first slide if

00:38:48,750 --> 00:38:53,250
you're distributing your application

00:38:50,880 --> 00:38:56,970
across multiple servers you don't need

00:38:53,250 --> 00:38:58,920
to scale everything all at once so

00:38:56,970 --> 00:39:01,530
traditional PHP app you probably have

00:38:58,920 --> 00:39:04,650
nginx and PHP F p.m. at the at a bare

00:39:01,530 --> 00:39:06,510
minimum for your application those are

00:39:04,650 --> 00:39:08,880
two separate processes those are two

00:39:06,510 --> 00:39:11,490
separate containers don't use supervisor

00:39:08,880 --> 00:39:14,040
D to startup both of them because

00:39:11,490 --> 00:39:17,070
generally your bottleneck will not be

00:39:14,040 --> 00:39:19,890
both of them if you're having slowness

00:39:17,070 --> 00:39:23,730
serving static files then you will need

00:39:19,890 --> 00:39:25,500
to scale up your nginx end not your PHP

00:39:23,730 --> 00:39:29,880
end if you need more raw processing

00:39:25,500 --> 00:39:31,380
power scale up your PHP processes this

00:39:29,880 --> 00:39:32,880
also allows you to swap out images as

00:39:31,380 --> 00:39:36,410
you need so let's say you want to

00:39:32,880 --> 00:39:37,950
upgrade from five seven four to eight I

00:39:36,410 --> 00:39:39,150
don't think we're building eight

00:39:37,950 --> 00:39:41,550
containers yet but let's say when that

00:39:39,150 --> 00:39:43,230
day comes you could just swap out that

00:39:41,550 --> 00:39:46,430
one image not touch your web server

00:39:43,230 --> 00:39:49,020
image and have a lot more fun with that

00:39:46,430 --> 00:39:51,540
but make sure that you're not getting in

00:39:49,020 --> 00:39:54,710
that anti pattern of running multiple

00:39:51,540 --> 00:39:54,710
processes in a single container

00:39:55,140 --> 00:39:59,049
you want to get in the habit of like I

00:39:57,760 --> 00:40:02,039
said treating everything is an external

00:39:59,049 --> 00:40:05,200
resource and if it has a network port

00:40:02,039 --> 00:40:11,019
export that you want your services to

00:40:05,200 --> 00:40:12,789
live on ports not as sockets this is

00:40:11,019 --> 00:40:14,650
built in automatically every container

00:40:12,789 --> 00:40:17,260
gets an IP address in docker

00:40:14,650 --> 00:40:20,279
so you can reference a much a container

00:40:17,260 --> 00:40:22,599
by its IP address and the port on it

00:40:20,279 --> 00:40:23,769
this gets people a little bit confused

00:40:22,599 --> 00:40:26,019
because if they're running multiple

00:40:23,769 --> 00:40:28,150
nginx or let's say multiple PHP fpm

00:40:26,019 --> 00:40:29,769
those all are listening on port 9000 I

00:40:28,150 --> 00:40:32,500
now have a bunch of things listening on

00:40:29,769 --> 00:40:35,339
port 9000 that's awesome but they're all

00:40:32,500 --> 00:40:37,299
probably running in their own IP space

00:40:35,339 --> 00:40:39,400
and they're all they all have their own

00:40:37,299 --> 00:40:43,450
individual IPS so we can get away with

00:40:39,400 --> 00:40:45,279
that because we probably separated

00:40:43,450 --> 00:40:47,200
everything out as external things you're

00:40:45,279 --> 00:40:48,940
already talking over a network shouldn't

00:40:47,200 --> 00:40:51,460
be a ton of extra configuration from

00:40:48,940 --> 00:40:53,019
that end this will also let you work

00:40:51,460 --> 00:40:55,510
with service locators that are port

00:40:53,019 --> 00:40:56,950
based there are some that will say oh

00:40:55,510 --> 00:40:58,450
this is port 80 we're going to assume

00:40:56,950 --> 00:40:59,829
that it's a webserver you will

00:40:58,450 --> 00:41:02,799
automatically dump this into a web

00:40:59,829 --> 00:41:04,390
server route I don't personally like

00:41:02,799 --> 00:41:08,619
those but there are some that make it

00:41:04,390 --> 00:41:10,269
makes life easier for people because we

00:41:08,619 --> 00:41:12,730
adhere to the one process for container

00:41:10,269 --> 00:41:14,769
rule we can easily adhere to the

00:41:12,730 --> 00:41:17,440
concurrency rule which is scale-out via

00:41:14,769 --> 00:41:19,390
the process model scale out the things

00:41:17,440 --> 00:41:21,579
that need to scale don't scale

00:41:19,390 --> 00:41:26,559
everything 100% you're just gonna waste

00:41:21,579 --> 00:41:27,640
resources you really have to think about

00:41:26,559 --> 00:41:30,910
what happens when your application

00:41:27,640 --> 00:41:33,819
scales though docker will not make your

00:41:30,910 --> 00:41:36,789
application scalable it will help you

00:41:33,819 --> 00:41:38,200
deploy multiple copies but that doesn't

00:41:36,789 --> 00:41:41,109
mean your codes gonna automatically know

00:41:38,200 --> 00:41:42,519
what to do so your code probably runs

00:41:41,109 --> 00:41:45,640
perfectly fine right now with one single

00:41:42,519 --> 00:41:48,190
application what happens when you have

00:41:45,640 --> 00:41:50,559
two of them running what happens when

00:41:48,190 --> 00:41:53,079
you have three of them running if a user

00:41:50,559 --> 00:41:55,119
uploads a file how do you other two

00:41:53,079 --> 00:41:57,190
processes get it where are those things

00:41:55,119 --> 00:42:00,970
being stored how are you handling that

00:41:57,190 --> 00:42:03,490
in your application Dockers not going to

00:42:00,970 --> 00:42:05,829
fix that for you but it allows you to

00:42:03,490 --> 00:42:07,010
scale out a little bit nicer in the case

00:42:05,829 --> 00:42:08,510
of like uploading a file

00:42:07,010 --> 00:42:10,400
you might want to consider doing

00:42:08,510 --> 00:42:12,710
something like fly system as an

00:42:10,400 --> 00:42:14,990
abstraction layer and saying well in

00:42:12,710 --> 00:42:17,390
development we're gonna do fly system to

00:42:14,990 --> 00:42:20,720
a local folder but in production it's

00:42:17,390 --> 00:42:22,520
gonna be an s3 bucket because you're

00:42:20,720 --> 00:42:24,410
you're taking advantage of just changing

00:42:22,520 --> 00:42:27,110
that configuration at that specific

00:42:24,410 --> 00:42:28,400
deployment time but again we're doing

00:42:27,110 --> 00:42:30,530
one process per container so we can

00:42:28,400 --> 00:42:31,970
scale those things just up and you can

00:42:30,530 --> 00:42:34,160
scale up just a container that's needed

00:42:31,970 --> 00:42:35,660
docker compose has ways to automatically

00:42:34,160 --> 00:42:38,000
scale your containers up and down in

00:42:35,660 --> 00:42:39,800
development so if you want to test how

00:42:38,000 --> 00:42:42,650
your application scales especially under

00:42:39,800 --> 00:42:45,620
load you can say give me ten instances

00:42:42,650 --> 00:42:48,190
of HP fbm but two of nginx does anything

00:42:45,620 --> 00:42:50,300
fall over as you start to run your tests

00:42:48,190 --> 00:42:52,010
ultimately your apps should not care how

00:42:50,300 --> 00:42:54,260
many instances of itself are running

00:42:52,010 --> 00:42:57,890
just the fact that it is running it

00:42:54,260 --> 00:43:00,100
should never know how many copies of PHP

00:42:57,890 --> 00:43:03,380
fpm are actually running how many

00:43:00,100 --> 00:43:05,120
webserver heads are in front of it it

00:43:03,380 --> 00:43:07,790
just needs to know if I get a request in

00:43:05,120 --> 00:43:09,440
how do I handle it docker won't tell

00:43:07,790 --> 00:43:11,390
your application how to do that but it

00:43:09,440 --> 00:43:19,070
makes it much easier to test when you

00:43:11,390 --> 00:43:20,870
add that distribution in I still haven't

00:43:19,070 --> 00:43:23,480
come up with a good phrase to replace

00:43:20,870 --> 00:43:27,350
the normal one but your containers are

00:43:23,480 --> 00:43:30,080
cattle not pets you should be able to

00:43:27,350 --> 00:43:33,200
get them quickly and call them quickly

00:43:30,080 --> 00:43:34,400
and that's not the most vegetarian way

00:43:33,200 --> 00:43:36,490
of doing it if someone else has a much

00:43:34,400 --> 00:43:38,420
better way of phrasing that let me know

00:43:36,490 --> 00:43:41,000
but generally like if you're gonna

00:43:38,420 --> 00:43:44,120
Google stuff treat him as cattle not as

00:43:41,000 --> 00:43:47,270
pets they should start very quick and

00:43:44,120 --> 00:43:49,070
they should gracefully shut down I

00:43:47,270 --> 00:43:53,600
didn't say they should quickly shut down

00:43:49,070 --> 00:43:55,880
they should gracefully shut down docker

00:43:53,600 --> 00:43:57,380
because it starts a single instance most

00:43:55,880 --> 00:43:59,360
of our applications start pretty

00:43:57,380 --> 00:44:01,400
instantly nginx and Apache have almost

00:43:59,360 --> 00:44:03,620
no boot time like we don't do a lot of

00:44:01,400 --> 00:44:05,990
logic to get set up PHP just kind of

00:44:03,620 --> 00:44:07,520
starts and waits for a request databases

00:44:05,990 --> 00:44:08,930
sometimes take a little bit longer but

00:44:07,520 --> 00:44:11,390
docker will start a container pretty

00:44:08,930 --> 00:44:13,880
quickly there's almost no difference

00:44:11,390 --> 00:44:17,420
between running a native native process

00:44:13,880 --> 00:44:18,410
and running a container process what you

00:44:17,420 --> 00:44:20,040
really want to start getting in the

00:44:18,410 --> 00:44:21,540
habit of handling and this is more of a

00:44:20,040 --> 00:44:23,250
coding issue than a workflow issue is

00:44:21,540 --> 00:44:26,220
how do you things happen when they shut

00:44:23,250 --> 00:44:32,310
down so what doctor will actually do is

00:44:26,220 --> 00:44:34,650
it will send a signal turbine signal so

00:44:32,310 --> 00:44:35,820
that your application can handle that so

00:44:34,650 --> 00:44:38,160
you need it if you have like worker

00:44:35,820 --> 00:44:39,780
processes think about how do they

00:44:38,160 --> 00:44:41,190
actually shut down you might want to do

00:44:39,780 --> 00:44:43,050
something graceful like a stop the

00:44:41,190 --> 00:44:46,670
current like finish the current work

00:44:43,050 --> 00:44:48,600
unit and don't accept anymore

00:44:46,670 --> 00:44:50,400
Calvin's has a really good book called

00:44:48,600 --> 00:44:52,890
signaling PHP if you've never worked

00:44:50,400 --> 00:44:55,470
with POSIX signals before it's a it's

00:44:52,890 --> 00:44:57,510
like a five dollar ebook I would

00:44:55,470 --> 00:44:58,710
recommend picking that up just so you

00:44:57,510 --> 00:45:01,140
can get in the habit of working with

00:44:58,710 --> 00:45:03,120
those things because what will happen is

00:45:01,140 --> 00:45:05,520
docker will send a cig and if it doesn't

00:45:03,120 --> 00:45:07,860
get a proper response or it's not timed

00:45:05,520 --> 00:45:09,870
properly like you don't you don't tell

00:45:07,860 --> 00:45:11,070
docker to like wait longer it will just

00:45:09,870 --> 00:45:13,590
send us think kill and just kill your

00:45:11,070 --> 00:45:14,790
application right there for most PHP

00:45:13,590 --> 00:45:16,410
applications it's probably not a big

00:45:14,790 --> 00:45:18,090
deal it really gets to when you're

00:45:16,410 --> 00:45:19,980
thinking about long-running processes

00:45:18,090 --> 00:45:23,240
and Damons like if you're running react

00:45:19,980 --> 00:45:23,240
or workers or things like that

00:45:24,350 --> 00:45:30,180
we kind of get this out of the box Devon

00:45:26,820 --> 00:45:34,830
production parity use the same image

00:45:30,180 --> 00:45:37,020
from top to bottom and that's kind of

00:45:34,830 --> 00:45:39,570
the whole point of docker is being able

00:45:37,020 --> 00:45:41,490
to use that same image but in your

00:45:39,570 --> 00:45:44,460
development process use the exact same

00:45:41,490 --> 00:45:46,020
image that you build in production when

00:45:44,460 --> 00:45:47,760
you pull it down to your machine you can

00:45:46,020 --> 00:45:49,800
do things like host mount your volumes

00:45:47,760 --> 00:45:51,990
so that way your code that you're live

00:45:49,800 --> 00:45:53,760
editing on your your computer gets

00:45:51,990 --> 00:45:55,410
injected in but you're still pulling

00:45:53,760 --> 00:45:57,480
down that same image you're using in

00:45:55,410 --> 00:45:59,490
production work with your team to make

00:45:57,480 --> 00:46:01,290
sure that your docker compose files

00:45:59,490 --> 00:46:03,210
which should be in your repository and

00:46:01,290 --> 00:46:05,580
should be being version controlled are

00:46:03,210 --> 00:46:07,050
being properly pulled down and you're

00:46:05,580 --> 00:46:09,450
all using that same kind of static build

00:46:07,050 --> 00:46:11,490
yes the production image is probably

00:46:09,450 --> 00:46:12,840
fairly large but you're probably not you

00:46:11,490 --> 00:46:16,470
should really probably be changing that

00:46:12,840 --> 00:46:17,970
terribly often so we want to keep that

00:46:16,470 --> 00:46:19,770
as similar as possible that cuts down on

00:46:17,970 --> 00:46:20,880
a lot of those those problems and then

00:46:19,770 --> 00:46:22,710
you're kind of left with just

00:46:20,880 --> 00:46:25,470
development issues where like I ran a

00:46:22,710 --> 00:46:27,390
composer update by example for example

00:46:25,470 --> 00:46:30,420
and that a new library has broken

00:46:27,390 --> 00:46:33,290
something or like weird little machine

00:46:30,420 --> 00:46:33,290
specific problems

00:46:33,550 --> 00:46:38,030
anything that you log treat is an event

00:46:36,020 --> 00:46:40,460
stream you never want to get in the

00:46:38,030 --> 00:46:42,859
habit of relying on local logs because

00:46:40,460 --> 00:46:44,990
they will not exist in production as

00:46:42,859 --> 00:46:48,050
soon as you remove a container it gets

00:46:44,990 --> 00:46:49,970
pulled out a rotation by default the

00:46:48,050 --> 00:46:52,700
logs disappear so on my machine if I do

00:46:49,970 --> 00:46:55,030
a docker RM all those logs disappear I

00:46:52,700 --> 00:46:57,920
have no way of getting any of those back

00:46:55,030 --> 00:46:59,750
the nice thing is docker has various

00:46:57,920 --> 00:47:02,329
logging methodologies built into it the

00:46:59,750 --> 00:47:04,430
default is JSON so if you do docker logs

00:47:02,329 --> 00:47:07,010
it's actually just reading a JSON file

00:47:04,430 --> 00:47:08,480
and spitting it out depending on what

00:47:07,010 --> 00:47:10,220
you're doing that may work you can tail

00:47:08,480 --> 00:47:12,710
it you can you know just just like

00:47:10,220 --> 00:47:15,829
running the tail command to not see

00:47:12,710 --> 00:47:17,839
everything or to see it live updates but

00:47:15,829 --> 00:47:18,980
it's not really sustainable especially

00:47:17,839 --> 00:47:20,089
if you've got multiple containers that

00:47:18,980 --> 00:47:23,869
you need to watch and you need to

00:47:20,089 --> 00:47:25,550
correlate events so these should be all

00:47:23,869 --> 00:47:28,760
the main options that you can do out of

00:47:25,550 --> 00:47:32,589
the box with no special like additional

00:47:28,760 --> 00:47:34,730
plugins what I would probably suggest

00:47:32,589 --> 00:47:37,220
especially starting out is using the

00:47:34,730 --> 00:47:39,260
fluent D unfortunately there's no log

00:47:37,220 --> 00:47:41,930
stash one too fluent D is logstash

00:47:39,260 --> 00:47:44,180
compliant because then you can give the

00:47:41,930 --> 00:47:45,859
habit of throwing those logs out to a

00:47:44,180 --> 00:47:48,500
third-party service or at least another

00:47:45,859 --> 00:47:50,359
container to log those and get in the

00:47:48,500 --> 00:47:51,829
habit of it journal D and syslog are

00:47:50,359 --> 00:47:53,599
really good because if you have an ops

00:47:51,829 --> 00:47:55,550
team they're probably already remotely

00:47:53,599 --> 00:47:56,930
shoving those logs away anyway and they

00:47:55,550 --> 00:47:59,839
probably have a system for handling that

00:47:56,930 --> 00:48:01,700
so don't go to fluent D if productions

00:47:59,839 --> 00:48:07,940
already using something else like work

00:48:01,700 --> 00:48:08,990
within whatever your constraints are one

00:48:07,940 --> 00:48:11,359
you'll get the added benefit of

00:48:08,990 --> 00:48:13,130
everything is logged but - they're much

00:48:11,359 --> 00:48:16,180
more searchable because like I said if a

00:48:13,130 --> 00:48:18,380
container dies and the system calls it

00:48:16,180 --> 00:48:20,810
they're gone you don't get those logs

00:48:18,380 --> 00:48:23,270
back you also don't want to get in the

00:48:20,810 --> 00:48:25,280
habit of like what we used to do 20-30

00:48:23,270 --> 00:48:28,550
years ago or last year like for the most

00:48:25,280 --> 00:48:31,369
part for me going onto a server a server

00:48:28,550 --> 00:48:33,500
and looking at the Apache logs it's not

00:48:31,369 --> 00:48:36,380
sustainable you won't have access to

00:48:33,500 --> 00:48:38,030
those clusters now you can host this

00:48:36,380 --> 00:48:40,849
yourself where you can pay for a sass if

00:48:38,030 --> 00:48:43,970
you're going to go and do this to push

00:48:40,849 --> 00:48:45,500
your logs the ELQ stack is one that many

00:48:43,970 --> 00:48:47,180
people are familiar with you

00:48:45,500 --> 00:48:50,330
you just can't use logstash you can

00:48:47,180 --> 00:48:51,760
replace it with fluent D I'm going to

00:48:50,330 --> 00:48:53,900
assume most of you cannot read these

00:48:51,760 --> 00:48:55,400
examples I'm gonna read through them

00:48:53,900 --> 00:48:57,650
I'll post these slides so you can get

00:48:55,400 --> 00:48:59,510
them later but suffice to say you're

00:48:57,650 --> 00:49:02,540
gonna have a new section called logging

00:48:59,510 --> 00:49:04,580
in your compose file you can tell it use

00:49:02,540 --> 00:49:07,160
fluent D and then basically point to

00:49:04,580 --> 00:49:08,570
whatever the localhost address that

00:49:07,160 --> 00:49:10,190
you're gonna have so in this case I'm

00:49:08,570 --> 00:49:11,870
gonna point it to localhost

00:49:10,190 --> 00:49:15,980
and I'm gonna give it a tag called

00:49:11,870 --> 00:49:17,660
Apache access and then you can add a

00:49:15,980 --> 00:49:19,580
fluent D service to your docker compose

00:49:17,660 --> 00:49:22,940
file so you can put this in like your

00:49:19,580 --> 00:49:24,170
your dev config but you can run fluent D

00:49:22,940 --> 00:49:25,730
inside docker there's no reason you

00:49:24,170 --> 00:49:28,960
can't do that so you'll push your logs

00:49:25,730 --> 00:49:31,250
from one docker container to another and

00:49:28,960 --> 00:49:36,470
you really only have to pass in a config

00:49:31,250 --> 00:49:37,970
file and open up the ports there is one

00:49:36,470 --> 00:49:39,800
thing you have to do fluent D does not

00:49:37,970 --> 00:49:42,260
have an elasticsearch plugin by default

00:49:39,800 --> 00:49:43,840
you have to install it so you'll

00:49:42,260 --> 00:49:47,210
probably have a docker file for that

00:49:43,840 --> 00:49:50,990
just to get that additional dependency

00:49:47,210 --> 00:49:52,970
and we'll see of course I close that

00:49:50,990 --> 00:49:54,080
window I'll change it so that actually

00:49:52,970 --> 00:49:56,690
links to it I didn't mean to close my

00:49:54,080 --> 00:49:58,100
chrome window but there's some kid fig

00:49:56,690 --> 00:50:02,450
files you could set up in fluent D to

00:49:58,100 --> 00:50:03,770
push it off to elasticsearch and then

00:50:02,450 --> 00:50:05,270
you can run elasticsearch in a container

00:50:03,770 --> 00:50:07,010
so you can keep all of your

00:50:05,270 --> 00:50:09,080
elasticsearch and Cabana which is the

00:50:07,010 --> 00:50:11,210
visualization part you can keep all the

00:50:09,080 --> 00:50:12,800
stuff in your docker compose file scale

00:50:11,210 --> 00:50:15,200
them up when you need them shut them

00:50:12,800 --> 00:50:17,480
down when you don't and then this can be

00:50:15,200 --> 00:50:19,310
part of a dev docker compose file and

00:50:17,480 --> 00:50:21,010
you never have to have it push to

00:50:19,310 --> 00:50:27,160
production production can push to a

00:50:21,010 --> 00:50:30,410
fully backed up compliant SAS setup

00:50:27,160 --> 00:50:33,890
you've never loo used kibana before has

00:50:30,410 --> 00:50:38,360
a nice web interface horrible query

00:50:33,890 --> 00:50:40,040
structure but so down here below that

00:50:38,360 --> 00:50:42,470
little graph you can see actually the

00:50:40,040 --> 00:50:44,360
actual log file that was dumped out and

00:50:42,470 --> 00:50:46,910
you can search through this gem a lot

00:50:44,360 --> 00:50:48,440
nicer and correlate logs from multiple

00:50:46,910 --> 00:50:50,330
containers it especially if you've got

00:50:48,440 --> 00:50:52,160
five or six fpm containers running you

00:50:50,330 --> 00:50:55,480
don't know which container was actually

00:50:52,160 --> 00:50:58,250
talked to so you can deal with that

00:50:55,480 --> 00:50:59,390
docker logs command though will stop

00:50:58,250 --> 00:51:01,460
working if you

00:50:59,390 --> 00:51:03,950
move it off the default JSON driver so

00:51:01,460 --> 00:51:06,230
if you switch to using fluent D and you

00:51:03,950 --> 00:51:07,849
run docker logs you'll get no logs I

00:51:06,230 --> 00:51:11,390
think unless you're paying for docker

00:51:07,849 --> 00:51:14,660
enterprise but I honestly don't know

00:51:11,390 --> 00:51:15,740
anybody who pays for that the example

00:51:14,660 --> 00:51:16,880
can be cleaned up a bit there's some

00:51:15,740 --> 00:51:20,480
port things with that so when you grab

00:51:16,880 --> 00:51:24,140
the slides just keep note it's very much

00:51:20,480 --> 00:51:28,430
tailored for a slide format then like a

00:51:24,140 --> 00:51:30,650
true production format and you want to

00:51:28,430 --> 00:51:32,900
get the habit of container izing all of

00:51:30,650 --> 00:51:35,539
the scripts that you need to run as

00:51:32,900 --> 00:51:39,349
commands docker will actually allow you

00:51:35,539 --> 00:51:41,750
to containerize your entire tooling

00:51:39,349 --> 00:51:44,390
structure as well as the actual

00:51:41,750 --> 00:51:46,670
applications that you're running so in

00:51:44,390 --> 00:51:50,450
this case we can have a test runner

00:51:46,670 --> 00:51:53,150
service and if you specify a command you

00:51:50,450 --> 00:51:55,880
can actually tell it to by default run a

00:51:53,150 --> 00:51:58,819
command so I can do docker compose run

00:51:55,880 --> 00:52:01,400
test runner and it will run my PHP unit

00:51:58,819 --> 00:52:02,960
tests for me if I have database

00:52:01,400 --> 00:52:04,640
migrations that I need to run especially

00:52:02,960 --> 00:52:09,349
in a production environment you might

00:52:04,640 --> 00:52:11,329
containerize that I hate having stuff

00:52:09,349 --> 00:52:14,089
installed on my laptop especially

00:52:11,329 --> 00:52:15,440
multiple versions primary I'm a Linux

00:52:14,089 --> 00:52:16,970
developer I do not understand how

00:52:15,440 --> 00:52:19,460
homebrew works with multiple versions of

00:52:16,970 --> 00:52:21,559
PHP so I will use docker to have

00:52:19,460 --> 00:52:23,569
multiple versions of PHP installed and I

00:52:21,559 --> 00:52:26,720
can swap those out based on the build

00:52:23,569 --> 00:52:27,920
parameter to different docker files and

00:52:26,720 --> 00:52:32,720
then run PHP unit or different versions

00:52:27,920 --> 00:52:34,009
of PHP I can run all my NPM stuff under

00:52:32,720 --> 00:52:38,660
the various versions because sometimes

00:52:34,009 --> 00:52:41,000
you get version locked but you can start

00:52:38,660 --> 00:52:42,619
to take all of your commands throw them

00:52:41,000 --> 00:52:44,779
in as services and then you can docker

00:52:42,619 --> 00:52:47,569
compose run them just like a regular

00:52:44,779 --> 00:52:49,759
command now your tooling actually moves

00:52:47,569 --> 00:52:53,740
from machine to machine and developer to

00:52:49,759 --> 00:52:55,880
developer further reducing how much

00:52:53,740 --> 00:53:00,019
further reducing the differences between

00:52:55,880 --> 00:53:01,819
each person's machine a couple other

00:53:00,019 --> 00:53:05,599
tidbits while we got a couple couple

00:53:01,819 --> 00:53:09,849
minutes left you can stack compose files

00:53:05,599 --> 00:53:12,710
to build up to a specific configuration

00:53:09,849 --> 00:53:13,250
so docker compose allows you to specify

00:53:12,710 --> 00:53:16,670
multi

00:53:13,250 --> 00:53:18,800
we'll files with the - F flag so you can

00:53:16,670 --> 00:53:20,840
have a base stalker composed amo file

00:53:18,800 --> 00:53:22,460
which just kind of skeletons out your

00:53:20,840 --> 00:53:24,650
services and then you can have a

00:53:22,460 --> 00:53:26,630
production compose which adds what your

00:53:24,650 --> 00:53:28,220
external ports are what extra

00:53:26,630 --> 00:53:31,040
configuration variables you need and

00:53:28,220 --> 00:53:32,930
then even added ev1 which might have

00:53:31,040 --> 00:53:34,100
different port bindings and does all

00:53:32,930 --> 00:53:35,990
your hosts mounting and things like that

00:53:34,100 --> 00:53:38,210
so that way it makes it easier to deploy

00:53:35,990 --> 00:53:41,240
and you can just stack those compose

00:53:38,210 --> 00:53:43,160
files on top of each other so in this

00:53:41,240 --> 00:53:46,010
case we might have a docker compose file

00:53:43,160 --> 00:53:50,060
which by default says hey use the nginx

00:53:46,010 --> 00:53:55,160
docker file open port 80 and 443 here's

00:53:50,060 --> 00:53:56,870
our PHP stuff and then MySQL really

00:53:55,160 --> 00:53:58,370
you'll notice we're not pushing any code

00:53:56,870 --> 00:53:59,930
into here if you were to live edit

00:53:58,370 --> 00:54:02,990
through phpstorm

00:53:59,930 --> 00:54:04,160
or Visual Studio code the stuff you edit

00:54:02,990 --> 00:54:05,330
on your desktop is not going to be

00:54:04,160 --> 00:54:06,680
pushed into these containers we're not

00:54:05,330 --> 00:54:09,980
doing any hosts mounting or anything

00:54:06,680 --> 00:54:13,340
like that we can push that off to a dev

00:54:09,980 --> 00:54:15,050
file which does add our volumes which

00:54:13,340 --> 00:54:17,060
allow us to do our hosts mounting and

00:54:15,050 --> 00:54:21,560
stuff like that so we can start to

00:54:17,060 --> 00:54:23,510
actually get that ability to say the

00:54:21,560 --> 00:54:26,150
configuration I'm using in production

00:54:23,510 --> 00:54:29,930
I can also replicate down to my

00:54:26,150 --> 00:54:31,820
development in a true way but also have

00:54:29,930 --> 00:54:33,920
an easy way to override for my

00:54:31,820 --> 00:54:37,300
development stack one thing I'll do a

00:54:33,920 --> 00:54:40,070
lot is I will override the build to a

00:54:37,300 --> 00:54:41,900
debug build which has X debug and stuff

00:54:40,070 --> 00:54:45,800
like that so I won't ship X debug your

00:54:41,900 --> 00:54:47,930
production I'll switch my docker file to

00:54:45,800 --> 00:54:49,820
point to one that has X debug installed

00:54:47,930 --> 00:54:53,540
and I'll do that through my dev docker

00:54:49,820 --> 00:54:57,200
compose and set up all my X debug stuff

00:54:53,540 --> 00:54:59,360
as separate environment variables then

00:54:57,200 --> 00:55:02,930
to use it you just stacked the dash F it

00:54:59,360 --> 00:55:05,780
does go left to right and override so

00:55:02,930 --> 00:55:10,700
first it'll take docker compose and then

00:55:05,780 --> 00:55:15,170
it will layer dev on top of it one other

00:55:10,700 --> 00:55:20,170
kind of little gotcha is that it for

00:55:15,170 --> 00:55:24,980
anything that's an array like ports or

00:55:20,170 --> 00:55:27,290
volumes it does not replace it appends

00:55:24,980 --> 00:55:29,690
so technically in this example if I'm

00:55:27,290 --> 00:55:32,660
opening port 80 and 443 from my

00:55:29,690 --> 00:55:36,200
production one those will also be open

00:55:32,660 --> 00:55:38,359
and I don't open like port 8080 on here

00:55:36,200 --> 00:55:40,790
if I had another ports in here we would

00:55:38,359 --> 00:55:43,790
actually have all three of them open not

00:55:40,790 --> 00:55:48,350
it won't replace that's one kind of

00:55:43,790 --> 00:55:49,580
weird thing to keep in mind and then

00:55:48,350 --> 00:55:51,380
when you're doing a deployment you just

00:55:49,580 --> 00:55:53,480
do like a doctor compose up or whatever

00:55:51,380 --> 00:55:56,260
you're doing use the the production one

00:55:53,480 --> 00:55:58,400
and it won't pull in all the debug stuff

00:55:56,260 --> 00:56:00,080
another cool thing you can do with

00:55:58,400 --> 00:56:03,770
docker compose is it will actually do

00:56:00,080 --> 00:56:06,500
variable substitution so if you put any

00:56:03,770 --> 00:56:09,980
of your values in dollar sign curly

00:56:06,500 --> 00:56:13,580
bracket it will replace that from a

00:56:09,980 --> 00:56:15,410
local environment configuration so you

00:56:13,580 --> 00:56:17,300
might do something like image is

00:56:15,410 --> 00:56:20,590
deployed version underscore PHP it's

00:56:17,300 --> 00:56:23,570
whatever I last built so then doing

00:56:20,590 --> 00:56:27,410
deployment you can say deploy version

00:56:23,570 --> 00:56:30,080
equals 28 T no 525 docker compose up

00:56:27,410 --> 00:56:32,450
dash D and then it will actually inject

00:56:30,080 --> 00:56:34,760
that into that and bear that variable

00:56:32,450 --> 00:56:38,630
this allows you to especially during a

00:56:34,760 --> 00:56:40,990
build process use a very generic compose

00:56:38,630 --> 00:56:40,990

YouTube URL: https://www.youtube.com/watch?v=1d-M0BHC8rI


