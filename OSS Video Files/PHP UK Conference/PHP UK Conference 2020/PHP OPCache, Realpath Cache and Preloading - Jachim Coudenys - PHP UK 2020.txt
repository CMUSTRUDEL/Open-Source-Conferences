Title: PHP OPCache, Realpath Cache and Preloading - Jachim Coudenys - PHP UK 2020
Publication date: 2020-03-11
Playlist: PHP UK Conference 2020
Description: 
	Everybody wants quick applications. A lot of that speed can be gained by the way you write your software, but a big chunk has to do with the way PHP is configured.
Captions: 
	00:00:02,710 --> 00:00:09,030
so welcome to this talk about which be

00:00:05,890 --> 00:00:11,740
up cash real pop cash and preload in so

00:00:09,030 --> 00:00:15,700
we will be talking today about how we

00:00:11,740 --> 00:00:19,630
continue our PHP installation and we

00:00:15,700 --> 00:00:23,350
will do that by tuning HP settings so

00:00:19,630 --> 00:00:25,840
new PC versions always get faster but

00:00:23,350 --> 00:00:28,119
you can make them go even faster just by

00:00:25,840 --> 00:00:31,930
changing the things that we get for free

00:00:28,119 --> 00:00:35,649
so if we take a new version they figure

00:00:31,930 --> 00:00:38,560
out some way of doing memory management

00:00:35,649 --> 00:00:41,649
bits a bit better so we get faster PHP

00:00:38,560 --> 00:00:45,550
versions we saw that from 5 to to 7 and

00:00:41,649 --> 00:00:49,360
every minor version since 7 got a little

00:00:45,550 --> 00:00:52,960
bit faster so we have that straight out

00:00:49,360 --> 00:00:56,079
of the box but we can also improve it so

00:00:52,960 --> 00:00:59,460
even more just by fine-tuning the

00:00:56,079 --> 00:01:03,719
settings of these of these new figures

00:00:59,460 --> 00:01:03,719
so first some groundwork

00:01:04,140 --> 00:01:12,250
who doesn't know PHP there's one ok so

00:01:09,600 --> 00:01:14,500
PHP is a scripting language as you will

00:01:12,250 --> 00:01:16,840
know and basically it's a

00:01:14,500 --> 00:01:19,659
fire-and-forget language so this means

00:01:16,840 --> 00:01:21,880
that we don't have any manual

00:01:19,659 --> 00:01:24,010
compilation step so every time we type

00:01:21,880 --> 00:01:26,170
something we go to a browser we hit

00:01:24,010 --> 00:01:27,610
reloads everything is it getting

00:01:26,170 --> 00:01:31,540
compiled on the fly and we see our new

00:01:27,610 --> 00:01:35,710
output so this is the groundwork we all

00:01:31,540 --> 00:01:38,290
are familiar with what PHP is and then

00:01:35,710 --> 00:01:41,680
the second concept

00:01:38,290 --> 00:01:45,909
for setting the stage is PHP F p.m. so

00:01:41,680 --> 00:01:48,009
who isn't using PHP f p.m. I think yeah

00:01:45,909 --> 00:01:51,009
few hands but almost everybody is using

00:01:48,009 --> 00:01:55,539
F p.m. it's the only relevance sarpy

00:01:51,009 --> 00:01:59,110
nowadays so what is F p.m. we have a

00:01:55,539 --> 00:02:03,280
prominent web server like Apache or

00:01:59,110 --> 00:02:05,710
nginx and if we have a PHP PHP file that

00:02:03,280 --> 00:02:10,600
has to be has to be executed we forward

00:02:05,710 --> 00:02:12,519
that request to a to DF p.m. so for

00:02:10,600 --> 00:02:15,459
instance we listen we have a master

00:02:12,519 --> 00:02:18,130
process listening on port 9000 and every

00:02:15,459 --> 00:02:20,830
time a request comes in the master

00:02:18,130 --> 00:02:24,489
process starts or looks if there are any

00:02:20,830 --> 00:02:28,180
child process processes available and

00:02:24,489 --> 00:02:31,440
then creates one or just forwards it to

00:02:28,180 --> 00:02:34,120
the running to the running trial process

00:02:31,440 --> 00:02:36,730
so just to keep in mind for the rest of

00:02:34,120 --> 00:02:39,400
the presentation we have shared memory

00:02:36,730 --> 00:02:41,620
and shared memory is located in the

00:02:39,400 --> 00:02:45,160
master process so if you have child

00:02:41,620 --> 00:02:48,010
processes the shared memory is located

00:02:45,160 --> 00:02:50,920
in the master process so this is really

00:02:48,010 --> 00:02:53,319
the concept of this memory so here we

00:02:50,920 --> 00:02:55,060
have an example of the master process

00:02:53,319 --> 00:02:57,720
that's always running and every time

00:02:55,060 --> 00:03:01,150
somebody goes to our website we have a

00:02:57,720 --> 00:03:03,069
child process running in the rare

00:03:01,150 --> 00:03:07,780
occasion that I have multiple visitors

00:03:03,069 --> 00:03:10,989
on my site I have more processes so yeah

00:03:07,780 --> 00:03:12,790
you know you get you get the concept so

00:03:10,989 --> 00:03:14,739
now this shared memory what is this

00:03:12,790 --> 00:03:17,560
shared memory so in computer hardware

00:03:14,739 --> 00:03:19,030
shared memory refers to the block of

00:03:17,560 --> 00:03:21,040
random access memory that can be

00:03:19,030 --> 00:03:23,139
accessed by several different central

00:03:21,040 --> 00:03:25,630
processing units and a multi processing

00:03:23,139 --> 00:03:27,850
computer system so what this means is

00:03:25,630 --> 00:03:32,620
every process has its own batch of

00:03:27,850 --> 00:03:36,359
memory and the shared memory is shared

00:03:32,620 --> 00:03:39,540
over those processes so if we want to

00:03:36,359 --> 00:03:41,680
save something and share it between

00:03:39,540 --> 00:03:44,590
different processes we use a shared

00:03:41,680 --> 00:03:45,849
memory so this is the this is the

00:03:44,590 --> 00:03:51,240
groundwork for the rest of the

00:03:45,849 --> 00:03:56,970
presentation so all set okay

00:03:51,240 --> 00:03:59,010
Rakeem goodness I'm a father I started

00:03:56,970 --> 00:04:03,090
running like a couple of years like now

00:03:59,010 --> 00:04:07,010
a year and enjoying that very much but

00:04:03,090 --> 00:04:10,860
more relevant to this presentation as

00:04:07,010 --> 00:04:14,250
I'm the co-organizer of a local user

00:04:10,860 --> 00:04:17,580
group in Belgium I'm a coach at our

00:04:14,250 --> 00:04:20,100
local coda dojo where we teach kids how

00:04:17,580 --> 00:04:24,180
to have the program and how to interact

00:04:20,100 --> 00:04:27,810
with cool little robots and stuff and

00:04:24,180 --> 00:04:32,700
I'm a developer at combo a web hosting

00:04:27,810 --> 00:04:34,740
company in in Belgium so this talk is

00:04:32,700 --> 00:04:37,530
about performance right yeah you're

00:04:34,740 --> 00:04:40,500
right this is all about performance but

00:04:37,530 --> 00:04:42,360
why do we why did I create this

00:04:40,500 --> 00:04:45,270
presentation it's because I've come well

00:04:42,360 --> 00:04:48,020
I'm part of the performance team so

00:04:45,270 --> 00:04:52,710
that's and that's a special team which

00:04:48,020 --> 00:04:55,920
analyzes problematic websites from

00:04:52,710 --> 00:04:58,710
customers we do a deep dive and the in

00:04:55,920 --> 00:05:00,450
the code of the of the customer and we

00:04:58,710 --> 00:05:02,820
also have the knowledge of how our

00:05:00,450 --> 00:05:05,190
systems our back-end systems are set up

00:05:02,820 --> 00:05:08,880
so we really know where to where to look

00:05:05,190 --> 00:05:11,250
and where two spots issues so here we

00:05:08,880 --> 00:05:12,750
have the quotes 80% of the performance

00:05:11,250 --> 00:05:16,440
issues have nothing to do with your

00:05:12,750 --> 00:05:18,330
server so we really dive empty and as a

00:05:16,440 --> 00:05:20,490
hosting company we want to sell more

00:05:18,330 --> 00:05:24,210
servers but sometimes we really have to

00:05:20,490 --> 00:05:26,730
optimize optimize the code itself and a

00:05:24,210 --> 00:05:28,770
lot of that optimization is just by

00:05:26,730 --> 00:05:32,730
knowing how everything works under the

00:05:28,770 --> 00:05:35,910
hood and knowing where we can in tune

00:05:32,730 --> 00:05:43,350
settings but also how you write specific

00:05:35,910 --> 00:05:49,380
code so this is a example is a pretty

00:05:43,350 --> 00:05:51,360
famous just where they where we have an

00:05:49,380 --> 00:05:54,900
overview of the different latency

00:05:51,360 --> 00:05:58,830
numbers so at the top we have the l1 and

00:05:54,900 --> 00:06:00,990
l2 caching from the from CPU and you see

00:05:58,830 --> 00:06:04,240
that every time we go a step further so

00:06:00,990 --> 00:06:06,580
if we want to read stuff from memory

00:06:04,240 --> 00:06:09,520
we are a bit slower if we want to if you

00:06:06,580 --> 00:06:12,039
want to read a mega mega byte from the

00:06:09,520 --> 00:06:17,680
heart right well again a bit slower if

00:06:12,039 --> 00:06:19,720
you want to add a round-trip to the two

00:06:17,680 --> 00:06:21,970
different data center everything gets

00:06:19,720 --> 00:06:24,819
slower this so we want to keep

00:06:21,970 --> 00:06:28,810
everything as close to the to the CPU as

00:06:24,819 --> 00:06:32,740
possible so this is more a graphical

00:06:28,810 --> 00:06:36,069
visualization of that so now that we

00:06:32,740 --> 00:06:37,960
know all the things that we want to that

00:06:36,069 --> 00:06:42,610
we want to change how can we actually

00:06:37,960 --> 00:06:46,479
fix it and we see a lot of problems with

00:06:42,610 --> 00:06:50,590
disk i/o and this guy oh if you have a

00:06:46,479 --> 00:06:53,410
look at the Linux the Linux storage

00:06:50,590 --> 00:06:55,990
stack at the top there you have our

00:06:53,410 --> 00:06:59,979
little application and every time we

00:06:55,990 --> 00:07:02,500
want to access the disks we go to the

00:06:59,979 --> 00:07:04,750
virtual file system and there we have

00:07:02,500 --> 00:07:08,199
the block based file systems that we

00:07:04,750 --> 00:07:10,659
know so like the local storage but at a

00:07:08,199 --> 00:07:13,720
hosting company we we use the network

00:07:10,659 --> 00:07:16,659
for a system a lot because that's easier

00:07:13,720 --> 00:07:19,479
just to just to scale do backups but the

00:07:16,659 --> 00:07:21,909
problem there is we don't we don't not

00:07:19,479 --> 00:07:24,009
only doing the file system lookup but we

00:07:21,909 --> 00:07:29,560
also have to do a round-trip to the to

00:07:24,009 --> 00:07:31,840
the network so if you slide this bit up

00:07:29,560 --> 00:07:34,240
you come the Eco mode lock layer and

00:07:31,840 --> 00:07:38,219
then the block layer will talk to the to

00:07:34,240 --> 00:07:41,560
the physical drives but in ours and our

00:07:38,219 --> 00:07:43,180
and our setup we use NFS so the network

00:07:41,560 --> 00:07:47,860
file system and the network file system

00:07:43,180 --> 00:07:50,800
has an has an extra we have all the all

00:07:47,860 --> 00:07:53,979
the advantages of using the NFS but we

00:07:50,800 --> 00:07:56,320
have a new set of problems because

00:07:53,979 --> 00:07:59,110
instead of going from our user program

00:07:56,320 --> 00:08:01,719
to the file system through the VFS we

00:07:59,110 --> 00:08:05,530
have to go through the network and then

00:08:01,719 --> 00:08:08,680
go do again look at the file system at

00:08:05,530 --> 00:08:12,520
the NFS server and then there take all

00:08:08,680 --> 00:08:15,520
the take all the file information so a

00:08:12,520 --> 00:08:19,389
lot of the things that we can optimize

00:08:15,520 --> 00:08:21,490
our located in that and stopping that

00:08:19,389 --> 00:08:24,219
overhead of coming over the over the

00:08:21,490 --> 00:08:27,940
wire so we have a few familiar with NFS

00:08:24,219 --> 00:08:31,180
you have NFS cache which catches a lot

00:08:27,940 --> 00:08:33,400
of information on the client but if we

00:08:31,180 --> 00:08:36,669
are using PHP we want to have highly

00:08:33,400 --> 00:08:39,479
dynamic we want to program what PHP we

00:08:36,669 --> 00:08:42,279
want to change our files so we still

00:08:39,479 --> 00:08:45,730
occasionally have to travel that network

00:08:42,279 --> 00:08:48,550
layer so another that I had that I

00:08:45,730 --> 00:08:52,029
showed you all the all the theoretical

00:08:48,550 --> 00:08:56,020
information how can we actually tackle

00:08:52,029 --> 00:08:58,510
all these challenges and PHP and as the

00:08:56,020 --> 00:09:00,670
talk title suggested we have three

00:08:58,510 --> 00:09:02,650
topics that we use to tackle all these

00:09:00,670 --> 00:09:06,000
all these problems we have the real

00:09:02,650 --> 00:09:10,959
podcast the up cash and then pre-loading

00:09:06,000 --> 00:09:15,100
so let's dive into the real podcast so

00:09:10,959 --> 00:09:19,720
what the real podcast is it is a system

00:09:15,100 --> 00:09:22,839
in PHP and it is used to with this I oh

00:09:19,720 --> 00:09:24,100
so we want to eliminate the i/o coming

00:09:22,839 --> 00:09:28,120
to the first system as much as possible

00:09:24,100 --> 00:09:32,170
and it does that by caching all possible

00:09:28,120 --> 00:09:36,940
parts to a specific destination part so

00:09:32,170 --> 00:09:38,380
if we if we use composer we have a lot

00:09:36,940 --> 00:09:40,870
of we have a lot of files that we want

00:09:38,380 --> 00:09:44,230
to load and in our application we do a

00:09:40,870 --> 00:09:47,140
lot of relative spots like dot dot slash

00:09:44,230 --> 00:09:50,380
and now we go to a path instead of

00:09:47,140 --> 00:09:55,500
always calculating all those where that

00:09:50,380 --> 00:09:59,010
specific file is living it will explode

00:09:55,500 --> 00:10:02,230
kind of explodes on the on the path and

00:09:59,010 --> 00:10:06,490
complete part and store every every

00:10:02,230 --> 00:10:08,170
segment in a real part cache so that so

00:10:06,490 --> 00:10:10,329
that it doesn't have to go to the file

00:10:08,170 --> 00:10:14,110
system every time it needs to find out

00:10:10,329 --> 00:10:16,329
where something is located so remember

00:10:14,110 --> 00:10:18,459
the shared memory I thought we talked

00:10:16,329 --> 00:10:20,530
about this year memory is located in the

00:10:18,459 --> 00:10:23,170
parent process and the master process

00:10:20,530 --> 00:10:25,839
but will pod cache is not stored and

00:10:23,170 --> 00:10:29,640
shared memory it's stored in the process

00:10:25,839 --> 00:10:33,760
memory so this means that

00:10:29,640 --> 00:10:35,920
every time a child starts it has to

00:10:33,760 --> 00:10:39,160
rebuild the whole the whole wheel path

00:10:35,920 --> 00:10:41,500
cache which isn't that bad but if you if

00:10:39,160 --> 00:10:43,870
you see a lot of problems with like cold

00:10:41,500 --> 00:10:46,810
starts of the of the process you just

00:10:43,870 --> 00:10:49,089
want to have at least one process always

00:10:46,810 --> 00:10:53,020
running so the real part cache isn't and

00:10:49,089 --> 00:10:55,060
isn't cleared so by default we have four

00:10:53,020 --> 00:10:58,240
megabytes for that wheel podcast to

00:10:55,060 --> 00:11:00,430
store but again it's not stored and

00:10:58,240 --> 00:11:02,560
shared memory so you have to watch out

00:11:00,430 --> 00:11:05,410
if you have like two hundred child

00:11:02,560 --> 00:11:06,970
processes you have four megabytes times

00:11:05,410 --> 00:11:10,450
two hundred so you have to watch out

00:11:06,970 --> 00:11:12,160
that you don't run out of memory so

00:11:10,450 --> 00:11:15,070
before hb7

00:11:12,160 --> 00:11:16,870
the default was 16 K and we all know

00:11:15,070 --> 00:11:19,420
that's all the frameworks that we use

00:11:16,870 --> 00:11:24,150
that's way too much way too low so the

00:11:19,420 --> 00:11:26,830
new the new default is for megabyte and

00:11:24,150 --> 00:11:29,920
as I mentioned before this helps a lot

00:11:26,830 --> 00:11:36,089
with the Oedipus problem that we that we

00:11:29,920 --> 00:11:39,760
have so try to keep try to keep as much

00:11:36,089 --> 00:11:42,220
processes running to to avoid the

00:11:39,760 --> 00:11:44,650
overhead so we have a couple of

00:11:42,220 --> 00:11:47,740
functions that we can use we have the

00:11:44,650 --> 00:11:49,810
real pot cache get which just gives you

00:11:47,740 --> 00:11:52,480
a list of all the files that are that

00:11:49,810 --> 00:11:54,550
are in the will podcast and we have the

00:11:52,480 --> 00:11:57,240
cache size which just shows you the

00:11:54,550 --> 00:12:00,790
configured and the currently configured

00:11:57,240 --> 00:12:04,240
size there's also a real pot function

00:12:00,790 --> 00:12:06,700
but this and has nothing to do with will

00:12:04,240 --> 00:12:08,290
part caching it uses real podcasting

00:12:06,700 --> 00:12:11,290
under the hood but it just calculates

00:12:08,290 --> 00:12:17,050
the actual destination parts of a

00:12:11,290 --> 00:12:21,339
specific relative part so a small demo I

00:12:17,050 --> 00:12:24,520
have this I have this file which I try

00:12:21,339 --> 00:12:28,750
to access three files on disk so I have

00:12:24,520 --> 00:12:32,640
a relative one the FFI HP then I have an

00:12:28,750 --> 00:12:36,370
absolute one and then again the another

00:12:32,640 --> 00:12:40,089
another example of file loading so if I

00:12:36,370 --> 00:12:42,190
open the real part cash gets I first of

00:12:40,089 --> 00:12:45,010
all get my current working directory

00:12:42,190 --> 00:12:48,100
so I have my home directory and then you

00:12:45,010 --> 00:12:51,310
can see that it stores all the all the

00:12:48,100 --> 00:12:53,760
upper parts so when some women are in

00:12:51,310 --> 00:12:58,210
another process with another script is

00:12:53,760 --> 00:12:59,740
accessing something differently most of

00:12:58,210 --> 00:13:03,130
the information is already as already

00:12:59,740 --> 00:13:05,500
there so if we scroll down we see that

00:13:03,130 --> 00:13:08,200
we have the relative path to the FFI

00:13:05,500 --> 00:13:09,760
which maps to the absolute path and then

00:13:08,200 --> 00:13:14,950
again we have the absolute part which

00:13:09,760 --> 00:13:18,130
maps which maps everything so you can

00:13:14,950 --> 00:13:20,770
see that if you have a framework if you

00:13:18,130 --> 00:13:25,150
have a lot of files this can get quick

00:13:20,770 --> 00:13:28,900
quite what quite quickly but this helps

00:13:25,150 --> 00:13:30,880
a lot with with performance so real pop

00:13:28,900 --> 00:13:33,940
cache simple concept there's a couple of

00:13:30,880 --> 00:13:36,850
things you can see we have some I&I

00:13:33,940 --> 00:13:39,700
settings so we have the size which is 4

00:13:36,850 --> 00:13:42,190
megabyte we have the time to live so

00:13:39,700 --> 00:13:44,290
time to live on the server just put it

00:13:42,190 --> 00:13:47,260
put it really high it's not really that

00:13:44,290 --> 00:13:49,930
important if you're in developments and

00:13:47,260 --> 00:13:53,560
you want to benefit from it put it a bit

00:13:49,930 --> 00:13:58,570
lower it's just it's just a small a

00:13:53,560 --> 00:14:02,020
small time to live okay so real pop

00:13:58,570 --> 00:14:04,060
cache not that exciting just keep in

00:14:02,020 --> 00:14:09,790
mind that it's there and you want to

00:14:04,060 --> 00:14:16,930
keep the master and child processes in

00:14:09,790 --> 00:14:20,470
check so next up is up cache who is not

00:14:16,930 --> 00:14:22,510
using up guys nobody that means

00:14:20,470 --> 00:14:26,200
everybody is on a recent PHP version

00:14:22,510 --> 00:14:29,530
because up cache which just added by

00:14:26,200 --> 00:14:31,180
default and what is up guys it's the

00:14:29,530 --> 00:14:33,280
proofs PHP performance by storing

00:14:31,180 --> 00:14:36,370
precompiled script bytecode and shared

00:14:33,280 --> 00:14:38,200
memory thereby removing the need for PHP

00:14:36,370 --> 00:14:41,920
to load and parse scripts on each

00:14:38,200 --> 00:14:46,120
request so a basic PHP request looks

00:14:41,920 --> 00:14:48,550
like this we have the PHP code and we

00:14:46,120 --> 00:14:49,990
want to execute that code and first of

00:14:48,550 --> 00:14:53,290
all we have a lexer and parser which

00:14:49,990 --> 00:14:54,700
creates tokens and that's token those

00:14:53,290 --> 00:14:57,800
tokens are

00:14:54,700 --> 00:15:01,760
then available as an abstract syntax

00:14:57,800 --> 00:15:04,820
tree and then we can use those tokens in

00:15:01,760 --> 00:15:07,490
a compiler the compiler will generate up

00:15:04,820 --> 00:15:09,920
codes and those up codes will go into a

00:15:07,490 --> 00:15:12,800
specific VM for a specific operating

00:15:09,920 --> 00:15:17,570
system and then X will be executed to

00:15:12,800 --> 00:15:20,029
produce the results so as I mentioned

00:15:17,570 --> 00:15:22,940
before PHP as a fire-and-forget as a

00:15:20,029 --> 00:15:27,050
throwaway language so it always performs

00:15:22,940 --> 00:15:30,020
these these steps which the PHP code

00:15:27,050 --> 00:15:31,850
it's Lexus it creates tokens then add

00:15:30,020 --> 00:15:35,540
composites and generate up codes and

00:15:31,850 --> 00:15:37,820
then it executes those approach and once

00:15:35,540 --> 00:15:39,500
that's done the request is served

00:15:37,820 --> 00:15:41,570
all the information is discarded

00:15:39,500 --> 00:15:43,610
everything is thrown away so every

00:15:41,570 --> 00:15:48,470
request we have to do that we have to do

00:15:43,610 --> 00:15:51,980
that over and over again so if we have a

00:15:48,470 --> 00:15:55,250
look we have the app tax abstract since

00:15:51,980 --> 00:15:59,480
X 3 and then the next step is the okk is

00:15:55,250 --> 00:16:02,779
the opcode but what what our op codes so

00:15:59,480 --> 00:16:03,740
in computing an operation code is the

00:16:02,779 --> 00:16:05,750
portion of a machine language

00:16:03,740 --> 00:16:09,470
instruction that specifies the operation

00:16:05,750 --> 00:16:11,959
to be performed so what does it mean in

00:16:09,470 --> 00:16:14,000
the context of PHP if you want to have a

00:16:11,959 --> 00:16:16,790
look at what up codes that are available

00:16:14,000 --> 00:16:20,240
and what up codes that are being used in

00:16:16,790 --> 00:16:23,060
PHP you can go to evil dork where you

00:16:20,240 --> 00:16:26,870
can run a lot of a lot of PHP scripts

00:16:23,060 --> 00:16:28,430
and then yeah run them over all the

00:16:26,870 --> 00:16:32,209
versions that are available but there's

00:16:28,430 --> 00:16:34,400
also a little tab called a VOD and that

00:16:32,209 --> 00:16:38,750
source for the Vulcan logic dumper and

00:16:34,400 --> 00:16:41,000
the focal logic dumper and generates a

00:16:38,750 --> 00:16:43,070
list of all the things that you are that

00:16:41,000 --> 00:16:47,360
your little script is doing and it shows

00:16:43,070 --> 00:16:50,480
you all the upcoming generated so here

00:16:47,360 --> 00:16:54,560
you can see that we have a echo that we

00:16:50,480 --> 00:16:58,700
have a jump if something if the false is

00:16:54,560 --> 00:17:00,770
a big true a false a false then you go

00:16:58,700 --> 00:17:02,690
to the to the next branch so here are

00:17:00,770 --> 00:17:06,169
all the up codes for this little for

00:17:02,690 --> 00:17:08,000
this little script so again as you can

00:17:06,169 --> 00:17:10,949
imagine this can get big

00:17:08,000 --> 00:17:17,549
fairly quickly if you're using libraries

00:17:10,949 --> 00:17:19,110
or frameworks so the this is just the

00:17:17,549 --> 00:17:21,179
small to small script was just to show

00:17:19,110 --> 00:17:23,939
you all the all the up codes but this

00:17:21,179 --> 00:17:25,439
can get gigantic if you have if you have

00:17:23,939 --> 00:17:29,580
a lot of if you have a lot of fun

00:17:25,439 --> 00:17:31,650
oat and most of the time the the up

00:17:29,580 --> 00:17:33,840
coach don't change first of all if

00:17:31,650 --> 00:17:35,970
you're using composer and you have a

00:17:33,840 --> 00:17:40,799
vendor directory all the files and the

00:17:35,970 --> 00:17:43,049
vendors directly are not changing and if

00:17:40,799 --> 00:17:44,820
you are running a specific version of

00:17:43,049 --> 00:17:47,549
your application and production

00:17:44,820 --> 00:17:49,770
you're not hopefully live editing files

00:17:47,549 --> 00:17:52,440
in production so those up coach they

00:17:49,770 --> 00:17:55,559
don't they don't change so when things

00:17:52,440 --> 00:17:56,900
don't change what do we do we just add

00:17:55,559 --> 00:18:01,799
some cash in it

00:17:56,900 --> 00:18:05,730
and here is where up cash comes into

00:18:01,799 --> 00:18:08,100
comes into play and up cash

00:18:05,730 --> 00:18:10,830
comes from a long history of up code

00:18:08,100 --> 00:18:15,360
caches so before we had up cash as part

00:18:10,830 --> 00:18:17,330
of the PHP engine we had a PC we had a

00:18:15,360 --> 00:18:20,820
memcache who had the cent optimizer so

00:18:17,330 --> 00:18:23,419
we had a bunch of up cash up code caches

00:18:20,820 --> 00:18:30,150
that we have to that we had to enable

00:18:23,419 --> 00:18:34,710
manually but as of version 5.5 cent

00:18:30,150 --> 00:18:38,520
donated the OP descent optimizer C to

00:18:34,710 --> 00:18:41,929
the PHP to the PHP source and then

00:18:38,520 --> 00:18:45,419
optimizer came from Zant guard which was

00:18:41,929 --> 00:18:48,419
which was or still as a tool to encode

00:18:45,419 --> 00:18:51,720
your encode your PHP files and then

00:18:48,419 --> 00:18:54,720
distributed them but they took out that

00:18:51,720 --> 00:19:00,559
optimizer parts and just put it into

00:18:54,720 --> 00:19:02,580
into PHP so this whole step this whole

00:19:00,559 --> 00:19:05,700
parsing and then compiling and then

00:19:02,580 --> 00:19:08,610
executing if we add the cash we just

00:19:05,700 --> 00:19:13,260
eliminate the the the first the first

00:19:08,610 --> 00:19:15,419
part of it so all those up cash and all

00:19:13,260 --> 00:19:19,559
those of opcodes are cached into the

00:19:15,419 --> 00:19:21,440
shared memory so they're in the case of

00:19:19,559 --> 00:19:30,440
the FBM all store

00:19:21,440 --> 00:19:34,220
in the in the master process so part of

00:19:30,440 --> 00:19:37,490
the up cache was because it stems from

00:19:34,220 --> 00:19:39,980
sent optimizer part of the up cache

00:19:37,490 --> 00:19:43,390
optimizer part of the up cache

00:19:39,980 --> 00:19:48,980
sorry is the up cache optimizer and

00:19:43,390 --> 00:19:51,500
that's a specific part of up cache which

00:19:48,980 --> 00:19:54,680
gets better every time there's a new

00:19:51,500 --> 00:19:59,780
release and what it does it is its

00:19:54,680 --> 00:20:01,820
optimizes it optimizes branches it

00:19:59,780 --> 00:20:03,260
optimizes dead code so if it sees that

00:20:01,820 --> 00:20:06,320
there's there are there's some lines

00:20:03,260 --> 00:20:08,690
below a return well that it will detect

00:20:06,320 --> 00:20:12,800
that and just throw away the up coach

00:20:08,690 --> 00:20:15,620
instead of storing up codes that aren't

00:20:12,800 --> 00:20:18,980
actually doing anything and also small

00:20:15,620 --> 00:20:21,440
things like this notation if you don't

00:20:18,980 --> 00:20:24,110
do this already with a static analyzer a

00:20:21,440 --> 00:20:27,260
static analyzer the up code optimizer

00:20:24,110 --> 00:20:31,760
will just do it underneath it and save

00:20:27,260 --> 00:20:35,540
the better way of doing it and the of

00:20:31,760 --> 00:20:39,890
cash so if we have a look at how that's

00:20:35,540 --> 00:20:43,400
how that actually results so what you

00:20:39,890 --> 00:20:46,610
see here is we have the if false so the

00:20:43,400 --> 00:20:50,900
first part is never is never executed so

00:20:46,610 --> 00:20:55,810
all the all the parts of the of the

00:20:50,900 --> 00:20:58,280
condition I just not need it there so

00:20:55,810 --> 00:21:01,790
what the OP cache optimizer will do is

00:20:58,280 --> 00:21:04,160
just echo true and then assign something

00:21:01,790 --> 00:21:07,970
and then echo again and return so you

00:21:04,160 --> 00:21:11,810
can see that this reduces the op codes

00:21:07,970 --> 00:21:15,650
in this example by half but if you have

00:21:11,810 --> 00:21:18,890
a lot of if you have a lot of PHP PHP

00:21:15,650 --> 00:21:24,440
files this will reduce all the up cash

00:21:18,890 --> 00:21:27,650
all the up codes drastically so now that

00:21:24,440 --> 00:21:30,830
we know what the up caches are what can

00:21:27,650 --> 00:21:33,260
we what functions do we have so we have

00:21:30,830 --> 00:21:34,460
some functions to gather some

00:21:33,260 --> 00:21:37,190
information

00:21:34,460 --> 00:21:39,139
so we have the gate configuration which

00:21:37,190 --> 00:21:42,409
just all these settings that are being

00:21:39,139 --> 00:21:44,629
and are being used we have the up cache

00:21:42,409 --> 00:21:47,200
get status which is the most important

00:21:44,629 --> 00:21:50,899
one to get all the information from I

00:21:47,200 --> 00:21:54,889
have a example later on then you have

00:21:50,899 --> 00:21:57,860
some you can pass a specific file to to

00:21:54,889 --> 00:22:00,019
the cache to see if it's stored in the

00:21:57,860 --> 00:22:02,080
and your cache and then we have some

00:22:00,019 --> 00:22:06,950
specific functions to do to take action

00:22:02,080 --> 00:22:09,320
so there's a there's a function compile

00:22:06,950 --> 00:22:12,889
file where we can manually say take this

00:22:09,320 --> 00:22:15,259
file and store all the OP caches so

00:22:12,889 --> 00:22:19,070
calculate the approach and store them in

00:22:15,259 --> 00:22:23,210
to-do app cache we can validate specific

00:22:19,070 --> 00:22:26,809
files so this as this is handy if you

00:22:23,210 --> 00:22:29,059
doing release deploy and you want to

00:22:26,809 --> 00:22:31,399
invalidate specific files so that they

00:22:29,059 --> 00:22:33,860
get that the new of codes are getting

00:22:31,399 --> 00:22:36,679
stored and there's also the up cache

00:22:33,860 --> 00:22:38,779
reset where it's just resetting the

00:22:36,679 --> 00:22:40,399
completes and the complete up cache so

00:22:38,779 --> 00:22:45,409
all the all the files that are cached

00:22:40,399 --> 00:22:47,990
are being are being destroyed so again a

00:22:45,409 --> 00:22:50,990
small demo I have a small script which

00:22:47,990 --> 00:22:55,610
just does a printer of up cache get

00:22:50,990 --> 00:22:57,830
status and what that gets us is a nice

00:22:55,610 --> 00:23:02,869
overview of everything that's happening

00:22:57,830 --> 00:23:04,970
with app cache so we can see that op

00:23:02,869 --> 00:23:08,590
cache is enabled the cache is not full

00:23:04,970 --> 00:23:11,659
we have not nothing we have no restart

00:23:08,590 --> 00:23:14,809
coming up and then the most important

00:23:11,659 --> 00:23:17,600
part the memory usage you can see if

00:23:14,809 --> 00:23:20,600
it's full or F it's at the F the of the

00:23:17,600 --> 00:23:24,009
up cache is nearly full we have the

00:23:20,600 --> 00:23:27,249
wasted memory marker more on that later

00:23:24,009 --> 00:23:31,340
then we have the enter in strings

00:23:27,249 --> 00:23:33,740
that's also a trick to get our up coach

00:23:31,340 --> 00:23:36,110
a bit a bit smaller also more on that

00:23:33,740 --> 00:23:39,440
later and then the most important part

00:23:36,110 --> 00:23:42,230
is the of the up crash statistics so

00:23:39,440 --> 00:23:44,179
here you can see that we have only one

00:23:42,230 --> 00:23:46,009
script because we're executing it from

00:23:44,179 --> 00:23:48,430
the command line we only have one script

00:23:46,009 --> 00:23:51,620
that being cached

00:23:48,430 --> 00:23:53,540
we have a number of we have no hits

00:23:51,620 --> 00:23:55,600
because this is the first time that we

00:23:53,540 --> 00:23:59,000
execute this and then we have some

00:23:55,600 --> 00:24:00,020
restarts so also again more on that

00:23:59,000 --> 00:24:03,500
later

00:24:00,020 --> 00:24:05,060
and we have no hits and one miss because

00:24:03,500 --> 00:24:07,070
this is the first time that we execute

00:24:05,060 --> 00:24:09,080
it and if we do it on a command line if

00:24:07,070 --> 00:24:11,120
we execute it again we again will not

00:24:09,080 --> 00:24:15,440
have a hit because there's no shared

00:24:11,120 --> 00:24:18,560
memory and a very important one if you

00:24:15,440 --> 00:24:21,370
execute this on your on your web server

00:24:18,560 --> 00:24:24,860
you will see here the OP cache hit rate

00:24:21,370 --> 00:24:26,900
and now it's zero but if you are running

00:24:24,860 --> 00:24:31,430
in production you really want a up cache

00:24:26,900 --> 00:24:34,340
hit rate of 99.99 because the moment it

00:24:31,430 --> 00:24:37,300
drops this means you have changing files

00:24:34,340 --> 00:24:40,430
that means you don't you know you're not

00:24:37,300 --> 00:24:48,770
having a very optimized way of running

00:24:40,430 --> 00:24:50,150
off cache and then if you if you ask to

00:24:48,770 --> 00:24:52,070
include all the scripts that are being

00:24:50,150 --> 00:24:54,530
in the up cache you get a list of all

00:24:52,070 --> 00:24:56,960
the of all the end of all the keys and

00:24:54,530 --> 00:25:06,080
then some statistics about the specific

00:24:56,960 --> 00:25:07,640
files so I talked about the entered

00:25:06,080 --> 00:25:09,950
strings and this is something that's

00:25:07,640 --> 00:25:13,310
being used in a lot of languages it's

00:25:09,950 --> 00:25:15,530
available in PHP since 5.4 and it's some

00:25:13,310 --> 00:25:20,330
kind of compression for source code so

00:25:15,530 --> 00:25:24,170
if if you have a lot of the same the

00:25:20,330 --> 00:25:27,440
same up cache combinations that are

00:25:24,170 --> 00:25:29,240
coming and that are occurring a lot you

00:25:27,440 --> 00:25:31,100
can just compress that so that you have

00:25:29,240 --> 00:25:34,580
an even smaller footprints and in the

00:25:31,100 --> 00:25:40,610
memory of all the opcodes and the intern

00:25:34,580 --> 00:25:42,860
strings block it's a part of the

00:25:40,610 --> 00:25:46,340
complete memory block that is reserved

00:25:42,860 --> 00:25:50,300
for the for the up cache so if this

00:25:46,340 --> 00:25:54,350
block is full you will just use more

00:25:50,300 --> 00:25:56,960
memory than then it's needed but again

00:25:54,350 --> 00:25:59,180
that's also stored in the initial form

00:25:56,960 --> 00:26:01,780
memory and the shared memory of the

00:25:59,180 --> 00:26:01,780
master

00:26:02,020 --> 00:26:10,400
you see a lot you see the geese thinking

00:26:06,920 --> 00:26:12,980
a lot and the MBE and the statistics and

00:26:10,400 --> 00:26:14,480
this is just the full pot and all the

00:26:12,980 --> 00:26:17,090
different relative spots again do it

00:26:14,480 --> 00:26:19,970
specific file so if you if you if we go

00:26:17,090 --> 00:26:22,220
back here these are just all the keys

00:26:19,970 --> 00:26:24,500
this specific file has been compiled and

00:26:22,220 --> 00:26:31,070
to obtain to up cash and is accessible

00:26:24,500 --> 00:26:33,559
through that key the next thing that we

00:26:31,070 --> 00:26:36,080
saw in the any statistics output was the

00:26:33,559 --> 00:26:39,980
wasted memory so by default up cache it

00:26:36,080 --> 00:26:42,950
doesn't do any defragmentation so up

00:26:39,980 --> 00:26:46,400
cache was built for performance so we

00:26:42,950 --> 00:26:49,280
have so let's say we don't have anything

00:26:46,400 --> 00:26:51,559
and up cache and we start PHP we have 2

00:26:49,280 --> 00:26:54,169
files and we put it in up cache and then

00:26:51,559 --> 00:26:56,570
be a species that the file has has been

00:26:54,169 --> 00:26:59,929
has been has been modified so instead of

00:26:56,570 --> 00:27:02,480
we are replacing the opcodes and memory

00:26:59,929 --> 00:27:04,940
for that previous entry it just marks

00:27:02,480 --> 00:27:07,700
that previous entry as wasted and then

00:27:04,940 --> 00:27:09,740
add the new compiled file at the end of

00:27:07,700 --> 00:27:16,040
the of the memory and that's just dumb

00:27:09,740 --> 00:27:19,220
so that it doesn't lose computation over

00:27:16,040 --> 00:27:21,290
for for cleaning on that memory but if

00:27:19,220 --> 00:27:22,910
you have a lot of changing files you

00:27:21,290 --> 00:27:27,830
have a lot of memory that's being marked

00:27:22,910 --> 00:27:30,260
as wasted and sometimes you have a lot

00:27:27,830 --> 00:27:32,000
of you have a lot of files that are

00:27:30,260 --> 00:27:36,169
being invalidated and if you have a lot

00:27:32,000 --> 00:27:37,929
of which that memory instead of instead

00:27:36,169 --> 00:27:41,419
of cleaning up that memory up cache just

00:27:37,929 --> 00:27:42,980
resets itself so it doesn't restart so

00:27:41,419 --> 00:27:47,799
again you start from a clean slate and

00:27:42,980 --> 00:27:50,900
everything is and it's filling up again

00:27:47,799 --> 00:27:56,570
so yeah as far as change they caused

00:27:50,900 --> 00:27:58,910
recompilation and we have a couple of a

00:27:56,570 --> 00:28:01,910
couple of scenarios where the app cache

00:27:58,910 --> 00:28:07,190
is restarting so if we have a lot of

00:28:01,910 --> 00:28:09,800
waster memory first of all if the up

00:28:07,190 --> 00:28:11,660
guys is full and we don't have any

00:28:09,800 --> 00:28:13,549
wasted memory than the up crash we'll

00:28:11,660 --> 00:28:17,659
just be full won't do

00:28:13,549 --> 00:28:20,600
we'll just try to add some more of a

00:28:17,659 --> 00:28:22,639
file studi to the up cash where they

00:28:20,600 --> 00:28:24,649
will see it is full and it will just not

00:28:22,639 --> 00:28:28,369
add it to the to the to the to the up

00:28:24,649 --> 00:28:32,989
cash if we have a lot of changing files

00:28:28,369 --> 00:28:35,570
and we reach a specific percentage of

00:28:32,989 --> 00:28:38,320
wasted wasted files that we'll do in out

00:28:35,570 --> 00:28:40,970
of memory we start and so if you are

00:28:38,320 --> 00:28:43,639
monitoring your sites and you see a lot

00:28:40,970 --> 00:28:45,019
of om restarts it's just because you

00:28:43,639 --> 00:28:47,929
have a lot of changing files and you

00:28:45,019 --> 00:28:50,659
want to do something about that the

00:28:47,929 --> 00:28:53,809
hatch restarts are just if you have too

00:28:50,659 --> 00:28:55,519
many files and you have a limit on a

00:28:53,809 --> 00:28:57,019
number of keys that you can store if you

00:28:55,519 --> 00:29:00,409
have too many files that you want to

00:28:57,019 --> 00:29:02,809
store and the up cache sees that is

00:29:00,409 --> 00:29:05,419
that's there's no place anymore

00:29:02,809 --> 00:29:07,879
it will also trigger a hash we start so

00:29:05,419 --> 00:29:11,029
that it can start again with new adding

00:29:07,879 --> 00:29:13,279
new files again you don't want hash

00:29:11,029 --> 00:29:15,379
research and then the last one is just

00:29:13,279 --> 00:29:18,679
the method I the function I told you I

00:29:15,379 --> 00:29:22,159
showed you before the OP cache resets

00:29:18,679 --> 00:29:27,559
and that all add that are the manual

00:29:22,159 --> 00:29:29,649
restarts so again we as a host or we're

00:29:27,559 --> 00:29:33,379
monitoring all these all these settings

00:29:29,649 --> 00:29:35,950
and there's an example of a wordpress

00:29:33,379 --> 00:29:38,809
plugin trying to do an upgrade and then

00:29:35,950 --> 00:29:40,539
doing an OP cache reset because there

00:29:38,809 --> 00:29:44,629
are new files so they didn't any reset

00:29:40,539 --> 00:29:45,739
but we saw a upgrade loop we saw an

00:29:44,629 --> 00:29:47,570
upgrade that's that was failing

00:29:45,739 --> 00:29:50,389
constantly so we saw the loop and we saw

00:29:47,570 --> 00:29:52,460
in our statistics that there were a lot

00:29:50,389 --> 00:29:55,759
of manual restarts and that's something

00:29:52,460 --> 00:29:57,950
you can have a manual website once a day

00:29:55,759 --> 00:30:00,440
if you deploy new code or if you deploy

00:29:57,950 --> 00:30:02,840
more every but you can't if you have if

00:30:00,440 --> 00:30:04,519
you have 300 restarts and in five

00:30:02,840 --> 00:30:09,350
minutes there's something there's

00:30:04,519 --> 00:30:15,320
something going on so I told you the

00:30:09,350 --> 00:30:16,940
restarts don't ever have a full cache so

00:30:15,320 --> 00:30:20,239
if you have an if you don't have any

00:30:16,940 --> 00:30:22,100
memory left and up cache is trying to

00:30:20,239 --> 00:30:24,289
compile your code and store all those up

00:30:22,100 --> 00:30:26,610
coach add to the cache we will actually

00:30:24,289 --> 00:30:31,320
have done more work

00:30:26,610 --> 00:30:32,850
then then you will done before because

00:30:31,320 --> 00:30:35,010
you will have done all the extra work

00:30:32,850 --> 00:30:36,780
then you want to check if you want to

00:30:35,010 --> 00:30:38,520
put it and to enter the cash and then

00:30:36,780 --> 00:30:41,670
you have to discard that information so

00:30:38,520 --> 00:30:45,390
you actually added a new step at it and

00:30:41,670 --> 00:30:48,980
you step in a way which makes it even

00:30:45,390 --> 00:30:51,299
slower so never never have a full cash

00:30:48,980 --> 00:30:52,890
whenever we see sites that are having

00:30:51,299 --> 00:30:55,380
problems the first thing I do is I check

00:30:52,890 --> 00:30:57,960
the of course I check these statistics

00:30:55,380 --> 00:31:02,520
and nine out of ten is just a full cash

00:30:57,960 --> 00:31:04,200
and it's much better if we just double

00:31:02,520 --> 00:31:10,080
the amount of memory that US that's

00:31:04,200 --> 00:31:15,030
allocated to it so this was a it's just

00:31:10,080 --> 00:31:17,190
a part of the up cash itself and we have

00:31:15,030 --> 00:31:21,120
another concept because now we're

00:31:17,190 --> 00:31:23,250
storing everything into memory but

00:31:21,120 --> 00:31:26,520
there's also some taunting which called

00:31:23,250 --> 00:31:29,130
up cache file cache and instead of when

00:31:26,520 --> 00:31:30,780
the process starts reading the PHP files

00:31:29,130 --> 00:31:33,600
from memory compiling them and then

00:31:30,780 --> 00:31:35,580
storing them into the app cache we can

00:31:33,600 --> 00:31:38,250
store the up cash at the opcodes

00:31:35,580 --> 00:31:41,150
into a file and then the moment PHP

00:31:38,250 --> 00:31:43,440
starts it will just take those that

00:31:41,150 --> 00:31:46,950
those up codes and then put them

00:31:43,440 --> 00:31:49,830
directly into or into up cache so this

00:31:46,950 --> 00:31:53,580
this can help busy size for instance if

00:31:49,830 --> 00:31:55,980
you do a reload and you have a lot of

00:31:53,580 --> 00:31:58,950
visitors and instead of doing everything

00:31:55,980 --> 00:32:01,110
compiling on-the-fly when they arrive

00:31:58,950 --> 00:32:02,669
you can just copy it over from the from

00:32:01,110 --> 00:32:07,620
the from the files directory and to the

00:32:02,669 --> 00:32:11,130
your cache memory and it also helps with

00:32:07,620 --> 00:32:14,549
the CLI so in the example and the demo

00:32:11,130 --> 00:32:17,940
example before it just starts every time

00:32:14,549 --> 00:32:20,640
it starts the the process it has to read

00:32:17,940 --> 00:32:22,650
the PHP file from disk compile it so it

00:32:20,640 --> 00:32:25,530
and store it into up cache if we want to

00:32:22,650 --> 00:32:29,010
and then throw it away and if we store

00:32:25,530 --> 00:32:32,790
it in two files the PHP the console I

00:32:29,010 --> 00:32:38,090
can just start it based from those from

00:32:32,790 --> 00:32:38,090
those five founders up cache files

00:32:38,419 --> 00:32:46,159
and we only need we only need to add one

00:32:43,179 --> 00:32:48,619
setting and that's just a user directory

00:32:46,159 --> 00:32:50,829
so here we have the file cache we want

00:32:48,619 --> 00:32:55,219
to store it in the in that folder and

00:32:50,829 --> 00:32:58,639
then some extra checks but the important

00:32:55,219 --> 00:33:01,849
one is the first one so if we run that

00:32:58,639 --> 00:33:05,179
on a command line we first have to say

00:33:01,849 --> 00:33:08,659
enable CLI because by default up cache

00:33:05,179 --> 00:33:12,829
is not it's not supported on the on the

00:33:08,659 --> 00:33:14,839
on the command line and then at the file

00:33:12,829 --> 00:33:17,839
cache that we want to and I want to

00:33:14,839 --> 00:33:22,249
store and run everything again it's the

00:33:17,839 --> 00:33:25,669
same file as before and if we then have

00:33:22,249 --> 00:33:27,079
a look at the add the cache we have a we

00:33:25,669 --> 00:33:30,289
have a hash and then the complete three

00:33:27,079 --> 00:33:35,809
three where we store the OP cash and a

00:33:30,289 --> 00:33:37,609
binary file so yeah that's that's

00:33:35,809 --> 00:33:41,209
another thing you can do with with op

00:33:37,609 --> 00:33:46,579
cash there's a cool example in a PHP

00:33:41,209 --> 00:33:48,709
Architect article where they also deep

00:33:46,579 --> 00:33:56,389
dive into the OP code to the up cache

00:33:48,709 --> 00:33:59,659
and trying to use the compiled files as

00:33:56,389 --> 00:34:01,779
a way of distributing packages of

00:33:59,659 --> 00:34:07,119
distributing PHP so that you have like

00:34:01,779 --> 00:34:10,519
recompiled PHP it's a nice way of

00:34:07,119 --> 00:34:13,700
investigating up cache don't use it and

00:34:10,519 --> 00:34:18,309
production or don't use it - yeah -

00:34:13,700 --> 00:34:18,309
distribute this to build your PHP code

00:34:19,720 --> 00:34:24,919
so now that we know what up cache is and

00:34:22,669 --> 00:34:28,789
what all the possibilities are what can

00:34:24,919 --> 00:34:30,829
we team so we have like I said before we

00:34:28,789 --> 00:34:33,500
have some disaster recovery scenarios as

00:34:30,829 --> 00:34:36,259
your memory fool as your as the intern

00:34:33,500 --> 00:34:39,519
strings part full and as the keystore

00:34:36,259 --> 00:34:43,460
fool you just have to check all those

00:34:39,519 --> 00:34:45,529
all those scenarios by just getting all

00:34:43,460 --> 00:34:48,139
the Kadima status from the from the real

00:34:45,529 --> 00:34:50,210
p.m. processes and then fine-tune

00:34:48,139 --> 00:34:51,110
everything that you see you want to

00:34:50,210 --> 00:34:52,940
double the memory

00:34:51,110 --> 00:34:58,100
want to give them more you want to give

00:34:52,940 --> 00:35:02,210
some more in turn strings space but also

00:34:58,100 --> 00:35:04,580
if you see a lot of restarts dive into

00:35:02,210 --> 00:35:07,580
the codes see why why why those things

00:35:04,580 --> 00:35:09,950
happen maybe they are generating new PHP

00:35:07,580 --> 00:35:11,360
files and that they on the fly for

00:35:09,950 --> 00:35:16,310
instance and that they have to load up

00:35:11,360 --> 00:35:19,420
cache will also do a lot of give a lot

00:35:16,310 --> 00:35:21,710
of warnings if this if this happens

00:35:19,420 --> 00:35:28,160
because you will see that you won't have

00:35:21,710 --> 00:35:30,560
the rate that that we want so we have

00:35:28,160 --> 00:35:32,540
some we have some configuration settings

00:35:30,560 --> 00:35:34,370
that we can that we can find you so

00:35:32,540 --> 00:35:36,020
first of all in the memory we have the

00:35:34,370 --> 00:35:38,720
memory consumption and this is the block

00:35:36,020 --> 00:35:43,040
that up cache will be will be dedicating

00:35:38,720 --> 00:35:46,760
for the for the process for the FBM to

00:35:43,040 --> 00:35:48,890
be using so I think by default it's 46

00:35:46,760 --> 00:35:51,610
megabyte it depends on the application

00:35:48,890 --> 00:35:56,470
if you need more if you if you need less

00:35:51,610 --> 00:35:59,570
then part of those of that for the 46

00:35:56,470 --> 00:36:01,910
megabyte will be the buffer to store the

00:35:59,570 --> 00:36:06,920
entire strings so that you can find you

00:36:01,910 --> 00:36:10,610
into and then the how many files that

00:36:06,920 --> 00:36:13,310
are actually being allowed to be to be

00:36:10,610 --> 00:36:16,250
to be saved so this depends also on the

00:36:13,310 --> 00:36:19,730
limits of your Linux systems of your

00:36:16,250 --> 00:36:21,410
living system but yeah just make sure

00:36:19,730 --> 00:36:25,580
all the files that you have fit into

00:36:21,410 --> 00:36:29,750
that fit into that max and then for

00:36:25,580 --> 00:36:31,340
invalidation we have a flag where we can

00:36:29,750 --> 00:36:34,070
say that we want to have up cache

00:36:31,340 --> 00:36:36,740
validates the timestamps of the files

00:36:34,070 --> 00:36:43,130
that is the and that's that existing

00:36:36,740 --> 00:36:45,610
cash so for instance we have a file we

00:36:43,130 --> 00:36:49,520
are we are we are changing the file and

00:36:45,610 --> 00:36:52,070
on if we say validate timestamps on then

00:36:49,520 --> 00:36:55,610
every time before fetching the opcodes

00:36:52,070 --> 00:36:59,480
from the from the cache will do a stat

00:36:55,610 --> 00:37:02,230
to the file system and cfd FD a modified

00:36:59,480 --> 00:37:07,690
time is newer than Watson and Watson

00:37:02,230 --> 00:37:09,940
at in development this is great you can

00:37:07,690 --> 00:37:12,460
even say the revalidate frequency so

00:37:09,940 --> 00:37:17,530
like every two seconds have a look if

00:37:12,460 --> 00:37:19,330
it's if at f/8 range and production you

00:37:17,530 --> 00:37:22,600
could say that you only want to

00:37:19,330 --> 00:37:24,250
revalidate every 60 seconds but that's

00:37:22,600 --> 00:37:26,290
also a bit strange because you know

00:37:24,250 --> 00:37:30,310
exactly when you're deploying

00:37:26,290 --> 00:37:33,190
we mostly recommend to just say validate

00:37:30,310 --> 00:37:36,250
time stamps off because if you do is

00:37:33,190 --> 00:37:40,600
that if you use the NFS you have to

00:37:36,250 --> 00:37:41,859
offer still do the complete network go

00:37:40,600 --> 00:37:44,050
through the complete network layers just

00:37:41,859 --> 00:37:48,010
to see if the file was modified on the

00:37:44,050 --> 00:37:50,830
NFS server and so we recommend just

00:37:48,010 --> 00:37:52,660
turning validate time stamps off and

00:37:50,830 --> 00:37:55,030
then just restart the up cache the

00:37:52,660 --> 00:37:59,170
moment you know you deployed a new new

00:37:55,030 --> 00:38:01,540
version of your site and you can also

00:37:59,170 --> 00:38:04,780
configure the threshold of the max

00:38:01,540 --> 00:38:08,410
wasted memory so I think by default it's

00:38:04,780 --> 00:38:11,800
5% so the moment that's the up cache

00:38:08,410 --> 00:38:15,490
sees that 5% of the memory has been

00:38:11,800 --> 00:38:19,030
wasted it will just do what we start so

00:38:15,490 --> 00:38:21,280
yeah to avoid having a lot of we start

00:38:19,030 --> 00:38:22,810
just put it smaller but on the other

00:38:21,280 --> 00:38:24,520
hand just to make sure you don't have

00:38:22,810 --> 00:38:26,320
any voice the memory try to figure out

00:38:24,520 --> 00:38:32,980
why the worst memory it was there in the

00:38:26,320 --> 00:38:37,020
first place so we get stats by using get

00:38:32,980 --> 00:38:40,800
status and you get status is good for

00:38:37,020 --> 00:38:43,840
parsing it into something else and then

00:38:40,800 --> 00:38:46,060
yeah have some visualizations so this is

00:38:43,840 --> 00:38:49,690
there are a few projects where we have a

00:38:46,060 --> 00:38:52,359
single PHP file so we can just take that

00:38:49,690 --> 00:38:57,730
PHP file and put it in our directory in

00:38:52,359 --> 00:39:00,580
our webserver directory and we'll use

00:38:57,730 --> 00:39:03,310
all the information from the get status

00:39:00,580 --> 00:39:05,940
to show you how many memory you have how

00:39:03,310 --> 00:39:08,200
many hits you have versus versus messes

00:39:05,940 --> 00:39:10,470
so you have some you have some more

00:39:08,200 --> 00:39:13,580
information it's very important that

00:39:10,470 --> 00:39:16,880
this page is being served

00:39:13,580 --> 00:39:20,150
from the same fpm pool that you want to

00:39:16,880 --> 00:39:22,370
investigate because if you get status on

00:39:20,150 --> 00:39:23,690
a command line that's just the status

00:39:22,370 --> 00:39:26,570
from the command line and nothing to do

00:39:23,690 --> 00:39:29,450
with the with the FBM so just make sure

00:39:26,570 --> 00:39:34,340
if you are monitoring that you monitor

00:39:29,450 --> 00:39:35,900
the correct the correct process so this

00:39:34,340 --> 00:39:38,540
is an example you have another example

00:39:35,900 --> 00:39:40,670
or you can see the different restart we

00:39:38,540 --> 00:39:42,020
can see yeah starts at the memory so

00:39:40,670 --> 00:39:48,230
it's all based on the same information

00:39:42,020 --> 00:39:53,300
it's just different different views so I

00:39:48,230 --> 00:39:58,760
mentioned the revalidation stuff and

00:39:53,300 --> 00:40:01,040
what you can do so we if we want to

00:39:58,760 --> 00:40:03,260
deploy a new version we want to avoid

00:40:01,040 --> 00:40:06,740
that all the new customers all the new

00:40:03,260 --> 00:40:09,020
visitors are trying to compile all that

00:40:06,740 --> 00:40:11,570
all those up codes and then putting them

00:40:09,020 --> 00:40:13,880
out all MV and the up cache so we can do

00:40:11,570 --> 00:40:17,210
some kind of priming and we can do that

00:40:13,880 --> 00:40:22,420
by for instance we deploy a new version

00:40:17,210 --> 00:40:25,100
and then because we want to restart a

00:40:22,420 --> 00:40:29,620
specific or we want to invalidate a

00:40:25,100 --> 00:40:32,630
specific up cash from an fbm we have to

00:40:29,620 --> 00:40:34,280
for instance do a web call to a hidden

00:40:32,630 --> 00:40:38,210
script or a password-protected script

00:40:34,280 --> 00:40:42,110
which on history and its turn tries to

00:40:38,210 --> 00:40:43,670
modify the the current up cache so we

00:40:42,110 --> 00:40:45,470
have for instance we do a push we know

00:40:43,670 --> 00:40:48,470
what files have been changed and have

00:40:45,470 --> 00:40:50,330
been deployed and then we can for

00:40:48,470 --> 00:40:54,500
instance get a list of all the changed

00:40:50,330 --> 00:40:59,090
files push that to a to a hidden file

00:40:54,500 --> 00:41:03,410
and then ask the the file to to compile

00:40:59,090 --> 00:41:05,600
all the new all the changed files most

00:41:03,410 --> 00:41:07,670
of the time they just do call back to a

00:41:05,600 --> 00:41:10,010
PHP file that's on the server which on

00:41:07,670 --> 00:41:13,880
this term just say F p.m. reset and

00:41:10,010 --> 00:41:16,550
everything is emptied but if you have a

00:41:13,880 --> 00:41:19,370
busy site you can use different fpm

00:41:16,550 --> 00:41:21,230
pools so we have a I can show before we

00:41:19,370 --> 00:41:25,090
have AF p.m. master with different with

00:41:21,230 --> 00:41:27,470
different clients with different Charles

00:41:25,090 --> 00:41:32,060
and if we deploy a new version

00:41:27,470 --> 00:41:36,470
we can create a new fpm pool which we

00:41:32,060 --> 00:41:38,570
then yeah prime a bit by going to some

00:41:36,470 --> 00:41:41,780
sites on that specific pool and the

00:41:38,570 --> 00:41:45,320
moment the the the new fpm pool has been

00:41:41,780 --> 00:41:48,770
primed we can then point the nginx or

00:41:45,320 --> 00:41:51,380
Apache which is in front to the new to

00:41:48,770 --> 00:41:55,040
the new port we have a fully primed of

00:41:51,380 --> 00:41:57,500
cash so we don't have any downtime we

00:41:55,040 --> 00:42:00,020
don't have any spikes and visitors

00:41:57,500 --> 00:42:10,099
trying to open try to catch all the

00:42:00,020 --> 00:42:15,080
upcoming loading so we're loading as

00:42:10,099 --> 00:42:17,390
something something new and PHP 74 so

00:42:15,080 --> 00:42:19,580
free loading preloads PHP functions and

00:42:17,390 --> 00:42:21,530
classes once and uses them and the

00:42:19,580 --> 00:42:26,960
context of any future requests without

00:42:21,530 --> 00:42:31,970
overhead so might take everything so it

00:42:26,960 --> 00:42:36,680
is basically up cash on steroids so if

00:42:31,970 --> 00:42:39,859
we look at pre loading it is part of the

00:42:36,680 --> 00:42:44,750
OP cash because it is just an optimized

00:42:39,859 --> 00:42:47,270
way of storing those up cash and what it

00:42:44,750 --> 00:42:49,750
basically does if you start an fbm

00:42:47,270 --> 00:42:53,359
server and you have pre loading

00:42:49,750 --> 00:42:57,500
configured before accepting any requests

00:42:53,359 --> 00:43:00,470
will so it will preload your application

00:42:57,500 --> 00:43:03,770
in a way that you that you want it to be

00:43:00,470 --> 00:43:06,920
you load it so this loads the code and

00:43:03,770 --> 00:43:08,780
to memory permanently so we don't have

00:43:06,920 --> 00:43:11,030
any we don't have any overhead of

00:43:08,780 --> 00:43:12,710
copying it from the shared memory to the

00:43:11,030 --> 00:43:16,730
process memory and then doing stuff with

00:43:12,710 --> 00:43:19,460
it so if we compare it to up cache we an

00:43:16,730 --> 00:43:23,660
OP cache we have up codes stored on a

00:43:19,460 --> 00:43:30,040
file based and a file based way so we

00:43:23,660 --> 00:43:34,280
have file X so we have the the class

00:43:30,040 --> 00:43:36,109
animal and we store all those up codes

00:43:34,280 --> 00:43:36,480
and to enter the shared memory and then

00:43:36,109 --> 00:43:39,390
we

00:43:36,480 --> 00:43:41,790
the subclass cats and then we store all

00:43:39,390 --> 00:43:45,780
those of coats into memory but every

00:43:41,790 --> 00:43:49,560
time that we want to use the cat class

00:43:45,780 --> 00:43:54,090
we have to fetch those up codes from the

00:43:49,560 --> 00:43:57,510
memory and then construct the complete

00:43:54,090 --> 00:43:59,420
object and glue every every all the

00:43:57,510 --> 00:44:03,660
classes together

00:43:59,420 --> 00:44:05,940
so what pre-loading does it is it helps

00:44:03,660 --> 00:44:08,609
with all those with all those class

00:44:05,940 --> 00:44:11,250
class libraries so it helps with them

00:44:08,609 --> 00:44:13,770
but all the op caches up codes are

00:44:11,250 --> 00:44:15,900
already being generated and then storage

00:44:13,770 --> 00:44:19,980
them in a specific in a specific way

00:44:15,900 --> 00:44:25,170
that we don't have any overhead and what

00:44:19,980 --> 00:44:29,160
this basically does is it will your own

00:44:25,170 --> 00:44:31,560
code will be as performance as the

00:44:29,160 --> 00:44:33,810
native PHP and that the native PHP

00:44:31,560 --> 00:44:35,760
functions because it's just what's been

00:44:33,810 --> 00:44:40,470
stored and to memory before accepting

00:44:35,760 --> 00:44:44,400
any any any requests and it does that by

00:44:40,470 --> 00:44:49,170
a simple a simple file with some loading

00:44:44,400 --> 00:44:51,210
magic so the configuration here we only

00:44:49,170 --> 00:44:55,650
have one configuration option and that's

00:44:51,210 --> 00:44:57,920
up cache dot field where we just specify

00:44:55,650 --> 00:45:01,109
the path to specific to a specific file

00:44:57,920 --> 00:45:03,510
and that file will be executed so that's

00:45:01,109 --> 00:45:06,150
the only thing it will do it will start

00:45:03,510 --> 00:45:09,060
fpm I will see the opcode the up cache

00:45:06,150 --> 00:45:10,980
payload will execute that file once that

00:45:09,060 --> 00:45:12,770
file has been completely executed it

00:45:10,980 --> 00:45:19,380
will be it will start accepting

00:45:12,770 --> 00:45:22,740
accepting requests so what you want to

00:45:19,380 --> 00:45:24,630
do in that field only file is just get a

00:45:22,740 --> 00:45:29,130
list of all the files that you want to

00:45:24,630 --> 00:45:30,630
preload and then run them through coop

00:45:29,130 --> 00:45:34,320
cache compiled file so that they are

00:45:30,630 --> 00:45:36,330
stored in the and your cache and then

00:45:34,320 --> 00:45:38,160
just that script exits and from that

00:45:36,330 --> 00:45:40,680
moment all the things that you have been

00:45:38,160 --> 00:45:43,500
that you loaded into the preload to the

00:45:40,680 --> 00:45:44,880
PHP file will be will be available for

00:45:43,500 --> 00:45:48,300
all the for all the feet of future

00:45:44,880 --> 00:45:49,750
requests so as I mentioned we have the

00:45:48,300 --> 00:45:52,090
cat and the

00:45:49,750 --> 00:45:53,110
and the animal file you have to make

00:45:52,090 --> 00:45:55,810
sure that you do that and they're

00:45:53,110 --> 00:45:58,750
correct and the correct order because if

00:45:55,810 --> 00:46:00,160
some clauses come be constructed they

00:45:58,750 --> 00:46:03,760
will just be discarded from the

00:46:00,160 --> 00:46:05,440
pre-loading and it won't be in memory so

00:46:03,760 --> 00:46:11,350
we will still have to load them every

00:46:05,440 --> 00:46:13,090
time so pre loading in the world we have

00:46:11,350 --> 00:46:16,450
two examples we have a lot of real

00:46:13,090 --> 00:46:19,930
example which they they try to tackle

00:46:16,450 --> 00:46:20,770
the freeloading problem and in PHP and

00:46:19,930 --> 00:46:23,230
symphony

00:46:20,770 --> 00:46:26,380
since 404 so there's a blog post about

00:46:23,230 --> 00:46:30,810
it since 404 they're already using the

00:46:26,380 --> 00:46:34,840
knowledge that they have ND and the

00:46:30,810 --> 00:46:36,790
dependency container to generate a file

00:46:34,840 --> 00:46:39,550
with classes that you probably want to

00:46:36,790 --> 00:46:40,510
preload because they know and they know

00:46:39,550 --> 00:46:43,270
all the force that you want that you

00:46:40,510 --> 00:46:45,700
want to that you want to use so they use

00:46:43,270 --> 00:46:48,580
you can't see so they have the for cash

00:46:45,700 --> 00:46:50,950
death and they have a dot preload dot

00:46:48,580 --> 00:46:53,200
PHP file and every time you compile the

00:46:50,950 --> 00:46:55,630
complete container that file will be

00:46:53,200 --> 00:46:58,480
present since 404 so if you want to

00:46:55,630 --> 00:47:06,640
start using it you just add that file to

00:46:58,480 --> 00:47:08,530
your your P loading any setting so there

00:47:06,640 --> 00:47:11,260
are some things that you have to keep in

00:47:08,530 --> 00:47:14,500
mind we have a we have a dot ini'

00:47:11,260 --> 00:47:17,950
setting so it's a complete server so if

00:47:14,500 --> 00:47:22,870
you are doing multiple applications in a

00:47:17,950 --> 00:47:25,420
single server this won't work because

00:47:22,870 --> 00:47:29,470
the pre-loading is for were complete as

00:47:25,420 --> 00:47:32,620
for complete installation and you don't

00:47:29,470 --> 00:47:37,360
have any functions to reset the

00:47:32,620 --> 00:47:42,180
pre-loading to reset the pre-loading

00:47:37,360 --> 00:47:44,740
memory so because it is a file which is

00:47:42,180 --> 00:47:46,720
executed before we start accepting

00:47:44,740 --> 00:47:50,260
requests you have to do a full we start

00:47:46,720 --> 00:47:54,060
to empty the memory of the server so you

00:47:50,260 --> 00:47:56,650
really have to keep have to get in mind

00:47:54,060 --> 00:48:00,640
so when we talk about all the files that

00:47:56,650 --> 00:48:02,960
we use composer knows what for us you

00:48:00,640 --> 00:48:04,790
are using right

00:48:02,960 --> 00:48:07,809
so at the moment that the pre-loading

00:48:04,790 --> 00:48:10,160
RFC and PHP was available there was a

00:48:07,809 --> 00:48:13,700
reloading support RFC and composure

00:48:10,160 --> 00:48:15,800
where a lot of excitement a lot of

00:48:13,700 --> 00:48:17,630
exciting people were we know what files

00:48:15,800 --> 00:48:24,260
that we want to load because we are

00:48:17,630 --> 00:48:26,210
doing all the dependencies but it's yeah

00:48:24,260 --> 00:48:28,369
it's a bit tricky composure doesn't

00:48:26,210 --> 00:48:30,079
really compose the notes all the

00:48:28,369 --> 00:48:33,530
dependencies you want but it doesn't

00:48:30,079 --> 00:48:37,550
really know what files you actually are

00:48:33,530 --> 00:48:40,339
using so there are some there were some

00:48:37,550 --> 00:48:44,750
benchmarks on this on this link and

00:48:40,339 --> 00:48:47,300
there were a benchmarks doing executed

00:48:44,750 --> 00:48:49,190
without reloading then we're learning of

00:48:47,300 --> 00:48:53,329
the hot classes and the hot classes are

00:48:49,190 --> 00:48:55,280
just a trick or we get the status of all

00:48:53,329 --> 00:48:58,550
the of all the files that are being in

00:48:55,280 --> 00:49:01,910
the up cache and only use those files

00:48:58,550 --> 00:49:04,220
because composure has a lot of files

00:49:01,910 --> 00:49:07,069
everywhere but you're not using all

00:49:04,220 --> 00:49:10,460
those PHP files so by doing this trick

00:49:07,069 --> 00:49:11,930
you only take the take the files that

00:49:10,460 --> 00:49:14,540
are actually being used in the up cache

00:49:11,930 --> 00:49:16,250
and then they also had a benchmark where

00:49:14,540 --> 00:49:17,960
they just took all the to call the files

00:49:16,250 --> 00:49:21,380
and they did that by requiring a

00:49:17,960 --> 00:49:25,460
complete class map so if you have a look

00:49:21,380 --> 00:49:28,790
at the the results so only the hot files

00:49:25,460 --> 00:49:29,990
we have like 900 H and if you do all the

00:49:28,790 --> 00:49:36,349
files that are available in composure

00:49:29,990 --> 00:49:38,660
you have almost 15,000 files so because

00:49:36,349 --> 00:49:41,569
the pre-loading dot PHP happens before

00:49:38,660 --> 00:49:43,460
the server start accepting requests you

00:49:41,569 --> 00:49:45,230
see that the more files you put in there

00:49:43,460 --> 00:49:49,130
the longer it takes for a server to

00:49:45,230 --> 00:49:51,680
actually boot and if you do only the hop

00:49:49,130 --> 00:49:53,690
classes the overhead isn't isn't that

00:49:51,680 --> 00:49:55,790
much the same for the memory you see

00:49:53,690 --> 00:49:58,460
that we only are almost using 105

00:49:55,790 --> 00:50:00,260
megabytes of memory to load all the

00:49:58,460 --> 00:50:02,119
classes that we don't even that we not

00:50:00,260 --> 00:50:04,760
even using and then if you have a look

00:50:02,119 --> 00:50:08,240
at they repress per seconds you can see

00:50:04,760 --> 00:50:13,430
that the hot class reloading as as a way

00:50:08,240 --> 00:50:15,710
to go beside the fact that this is a

00:50:13,430 --> 00:50:18,040
very active topic and there's a lot of

00:50:15,710 --> 00:50:18,040
contributions

00:50:18,349 --> 00:50:25,319
they're not really eager to start doing

00:50:23,760 --> 00:50:27,660
it so you're welcome to keep the

00:50:25,319 --> 00:50:30,119
discussion here as a central point but

00:50:27,660 --> 00:50:31,920
to be clear I'm fairly confident that in

00:50:30,119 --> 00:50:34,589
the future we are not going to add

00:50:31,920 --> 00:50:36,569
anything to composure and if any error

00:50:34,589 --> 00:50:38,400
so it turns out that there's something

00:50:36,569 --> 00:50:40,920
composure is uniquely positioned to

00:50:38,400 --> 00:50:43,309
really help with this Autodesk reloading

00:50:40,920 --> 00:50:46,079
then we can have another look but for

00:50:43,309 --> 00:50:47,190
now we see that it depends on your

00:50:46,079 --> 00:50:49,650
deployment it depends on your

00:50:47,190 --> 00:50:53,069
application a lot of a lot of more

00:50:49,650 --> 00:50:59,010
research about the actual performance

00:50:53,069 --> 00:51:01,619
improvements have to be done so there

00:50:59,010 --> 00:51:05,040
were some there were some issues in the

00:51:01,619 --> 00:51:06,900
beginning so the RSC talked about up

00:51:05,040 --> 00:51:10,530
cache compiled file and then you have to

00:51:06,900 --> 00:51:12,300
figure out the the object graph or the

00:51:10,530 --> 00:51:14,849
inheritance yourself

00:51:12,300 --> 00:51:17,609
so the laravel and the symphony just

00:51:14,849 --> 00:51:20,730
took a file and they did they used auto

00:51:17,609 --> 00:51:22,950
loading so they did require so the Auto

00:51:20,730 --> 00:51:27,540
loading automatically knew what files

00:51:22,950 --> 00:51:29,460
and had to have to include but the they

00:51:27,540 --> 00:51:31,799
more focused on the up cache compiled

00:51:29,460 --> 00:51:33,329
file way than the requires so in the

00:51:31,799 --> 00:51:37,319
beginning of a lot of sec faults but

00:51:33,329 --> 00:51:39,569
most of that has been has been fixed and

00:51:37,319 --> 00:51:40,859
there are some issues on the bug tracker

00:51:39,569 --> 00:51:44,130
but it's not that bad

00:51:40,859 --> 00:51:48,270
I think the previous version the peach

00:51:44,130 --> 00:51:50,130
is minor version disabled pre loading by

00:51:48,270 --> 00:51:55,160
default for Windows because Windows and

00:51:50,130 --> 00:51:58,319
memory does some crazy Thanks so yeah

00:51:55,160 --> 00:52:02,220
but performance is it worth the effort

00:51:58,319 --> 00:52:04,079
of using reloading well it depends on

00:52:02,220 --> 00:52:08,280
the situation so you have to you have to

00:52:04,079 --> 00:52:12,000
figure it out also you have to make you

00:52:08,280 --> 00:52:13,500
know your application the best you know

00:52:12,000 --> 00:52:15,240
your application the best to know what

00:52:13,500 --> 00:52:17,220
files are really important for your

00:52:15,240 --> 00:52:19,730
application what files that you want to

00:52:17,220 --> 00:52:23,130
have there immediately

00:52:19,730 --> 00:52:28,849
so yeah stick with the hot classes don't

00:52:23,130 --> 00:52:30,319
put everything into into memory and from

00:52:28,849 --> 00:52:32,630
from hosting perspective we're now

00:52:30,319 --> 00:52:35,479
looking how we can do that how we can

00:52:32,630 --> 00:52:37,640
use all the information and start

00:52:35,479 --> 00:52:41,690
suggesting we're loading files for

00:52:37,640 --> 00:52:44,569
customers even try to figure out the

00:52:41,690 --> 00:52:47,450
health classes and then automatically

00:52:44,569 --> 00:52:51,440
adding a pillow file for them and then

00:52:47,450 --> 00:52:53,479
see if we see improvements so yeah even

00:52:51,440 --> 00:52:55,970
if it's a small improvement if you have

00:52:53,479 --> 00:52:57,739
a lot of accounts like we do we see we

00:52:55,970 --> 00:53:00,920
see a lot of improvements on the cluster

00:52:57,739 --> 00:53:03,619
overall so if you want to see some more

00:53:00,920 --> 00:53:07,670
reports a lot of people are actually

00:53:03,619 --> 00:53:10,369
using pre loading the results are mixed

00:53:07,670 --> 00:53:13,039
so if you saw the results from the

00:53:10,369 --> 00:53:15,380
composer outputs that's from like a half

00:53:13,039 --> 00:53:22,160
year ago that was very promising the

00:53:15,380 --> 00:53:26,779
real life improvements are yeah they

00:53:22,160 --> 00:53:30,739
vary so some pre loading resources we

00:53:26,779 --> 00:53:32,180
have the internals email we have the pre

00:53:30,739 --> 00:53:34,519
loading IRC where you can still find

00:53:32,180 --> 00:53:35,960
most of the information about about free

00:53:34,519 --> 00:53:38,029
loading and that we have the pull

00:53:35,960 --> 00:53:39,950
request if you really want to see how

00:53:38,029 --> 00:53:42,009
they did it and see have a look at the

00:53:39,950 --> 00:53:51,999
pull request

00:53:42,009 --> 00:53:55,039
so in conclusion about PHP performance

00:53:51,999 --> 00:53:56,749
know enough about your about the PHP and

00:53:55,039 --> 00:53:58,519
Thor knows how this up guys work how

00:53:56,749 --> 00:54:02,989
this how this all the all the loading

00:53:58,519 --> 00:54:04,969
works know how your application work how

00:54:02,989 --> 00:54:07,099
your application works and that depends

00:54:04,969 --> 00:54:10,039
a lot so use the up cascade status to

00:54:07,099 --> 00:54:12,319
get real-time information about your

00:54:10,039 --> 00:54:14,390
application if you have restarts if you

00:54:12,319 --> 00:54:17,089
do use a lot of memory and stuff if you

00:54:14,390 --> 00:54:19,160
then take that information fine-tune

00:54:17,089 --> 00:54:22,219
your settings and then most important

00:54:19,160 --> 00:54:24,229
importantly repeat because if you double

00:54:22,219 --> 00:54:27,950
the memory because you're up cache is

00:54:24,229 --> 00:54:30,319
full and you have a huge application you

00:54:27,950 --> 00:54:33,019
could have another full memory and you'd

00:54:30,319 --> 00:54:34,849
have to reiterate so make sure that you

00:54:33,019 --> 00:54:38,539
let you keep that you keep inspecting

00:54:34,849 --> 00:54:40,249
your and your performance so one last

00:54:38,539 --> 00:54:41,779
point what we do at combo we have an

00:54:40,249 --> 00:54:44,569
elastic stack and we

00:54:41,779 --> 00:54:46,399
gather for all our customers we gather

00:54:44,569 --> 00:54:49,099
all the data so we have all the real

00:54:46,399 --> 00:54:51,649
part of coach up code statistics and we

00:54:49,099 --> 00:54:54,349
shove it all into a new elastic and so

00:54:51,649 --> 00:54:58,309
that we can see we can see what we can

00:54:54,349 --> 00:54:59,839
what we can do about it like I said it's

00:54:58,309 --> 00:55:02,389
changing constantly so you have to

00:54:59,839 --> 00:55:06,139
repeat it a lot so we keep monitoring

00:55:02,389 --> 00:55:08,569
and if we see that sorrowful we try to

00:55:06,139 --> 00:55:10,880
implement Auto tuning so that we can

00:55:08,569 --> 00:55:16,009
increase memory decrease memory so that

00:55:10,880 --> 00:55:19,369
we we can even we can drop the load on

00:55:16,009 --> 00:55:20,929
our on our systems and then we're trying

00:55:19,369 --> 00:55:23,869
to figure out if we can do stuff with

00:55:20,929 --> 00:55:28,130
free loading and auto configure if we're

00:55:23,869 --> 00:55:31,599
loading and that concludes my

00:55:28,130 --> 00:55:31,599

YouTube URL: https://www.youtube.com/watch?v=R5Okt1EX3_4


