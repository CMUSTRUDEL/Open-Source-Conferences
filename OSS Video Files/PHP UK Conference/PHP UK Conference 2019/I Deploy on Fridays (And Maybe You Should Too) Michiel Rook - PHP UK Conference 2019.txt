Title: I Deploy on Fridays (And Maybe You Should Too) Michiel Rook - PHP UK Conference 2019
Publication date: 2019-03-22
Playlist: PHP UK Conference 2019
Description: 
	Have you ever heard yourself or someone else say “Don’t deploy on Friday”? Perhaps it’s your company’s policy?
Captions: 
	00:00:02,300 --> 00:00:09,990
as you can see this is my dog by the way

00:00:06,950 --> 00:00:11,429
he says hello I deploy on Fridays maybe

00:00:09,990 --> 00:00:13,769
you should too well we'll get down to

00:00:11,429 --> 00:00:15,960
that if you want to reach out to me at

00:00:13,769 --> 00:00:18,779
any point in time that bear is my

00:00:15,960 --> 00:00:21,180
twitter handle feel free to post any

00:00:18,779 --> 00:00:23,609
criticism any suggestions any things you

00:00:21,180 --> 00:00:27,300
like or dislike I will not respond

00:00:23,609 --> 00:00:30,019
during to talk but after ok let's get

00:00:27,300 --> 00:00:33,050
going as that was running through

00:00:30,019 --> 00:00:36,540
slightly foggy London this morning

00:00:33,050 --> 00:00:41,309
around alongside the canal which is

00:00:36,540 --> 00:00:44,879
beautiful by the way I I was thinking as

00:00:41,309 --> 00:00:46,920
I do often people that know me know that

00:00:44,879 --> 00:00:50,010
I like to talk about this I was talking

00:00:46,920 --> 00:00:52,530
or thinking about deploying and I was

00:00:50,010 --> 00:00:53,730
not just thinking about deploying I was

00:00:52,530 --> 00:00:58,500
thinking about deploying

00:00:53,730 --> 00:01:01,800
on a Friday and funny thing it's Friday

00:00:58,500 --> 00:01:03,539
today so it got a little meta I was

00:01:01,800 --> 00:01:05,700
thinking on a Friday about deploying on

00:01:03,539 --> 00:01:08,640
Friday when I say deploying on a Friday

00:01:05,700 --> 00:01:10,710
what's your reaction can we do that yeah

00:01:08,640 --> 00:01:15,150
okay can the people that say no please

00:01:10,710 --> 00:01:17,670
raise their hand awesome I hope that

00:01:15,150 --> 00:01:19,770
that would be the case of the people

00:01:17,670 --> 00:01:22,170
that raised their hands who is forbidden

00:01:19,770 --> 00:01:28,020
to deploy on the Friday by company

00:01:22,170 --> 00:01:31,909
policy or team policy okay and the rest

00:01:28,020 --> 00:01:38,189
are you doing it of your own volition or

00:01:31,909 --> 00:01:40,619
yes okay so you're not alone because

00:01:38,189 --> 00:01:41,220
whenever I talk about deploying on a

00:01:40,619 --> 00:01:44,399
Friday

00:01:41,220 --> 00:01:44,970
typically the reaction is this are you

00:01:44,399 --> 00:01:47,909
crazy

00:01:44,970 --> 00:01:49,950
and once again you're not alone you just

00:01:47,909 --> 00:01:52,530
have to Google for deploying on a Friday

00:01:49,950 --> 00:01:56,060
and you get this well the Internet is

00:01:52,530 --> 00:01:56,060
awash with memes about it

00:01:57,040 --> 00:02:08,410
I don't know who you are but I will find

00:02:02,710 --> 00:02:09,670
you and yeah death is only going to go

00:02:08,410 --> 00:02:14,020
one way right right

00:02:09,670 --> 00:02:15,760
5:00 p.m. deployment on a Friday so this

00:02:14,020 --> 00:02:18,070
is an actual t-shirt you can buy and

00:02:15,760 --> 00:02:20,080
there are mugs you can buy as well I may

00:02:18,070 --> 00:02:21,850
just get one just for kicks

00:02:20,080 --> 00:02:24,220
should I deploy in a Friday at 5:00 p.m.

00:02:21,850 --> 00:02:27,760
no what if I just need to know

00:02:24,220 --> 00:02:33,360
so basically stop don't don't deploy on

00:02:27,760 --> 00:02:35,800
a Friday and okay let's not then well

00:02:33,360 --> 00:02:39,780
that would make my keynote very short

00:02:35,800 --> 00:02:42,970
and that's not why I'm here right so I

00:02:39,780 --> 00:02:46,570
want to get down into why people say

00:02:42,970 --> 00:02:47,680
this there are a couple of reasons there

00:02:46,570 --> 00:02:50,230
are a couple of reasons that I've

00:02:47,680 --> 00:02:53,380
identified over the years and one of

00:02:50,230 --> 00:02:55,060
them is it's simply tradition we've

00:02:53,380 --> 00:02:58,450
never deployed on a Friday at this

00:02:55,060 --> 00:03:02,020
company so please don't start now and if

00:02:58,450 --> 00:03:05,590
you then ask why well because the

00:03:02,020 --> 00:03:07,120
previous person didn't do it and they

00:03:05,590 --> 00:03:10,239
told me not to when I got into the

00:03:07,120 --> 00:03:12,190
company and so I don't do it either it's

00:03:10,239 --> 00:03:14,050
tradition it's written in the company

00:03:12,190 --> 00:03:17,260
culture it may be unwritten but it's

00:03:14,050 --> 00:03:20,230
tradition nonetheless risk is a thing

00:03:17,260 --> 00:03:23,350
that is always associated negatively or

00:03:20,230 --> 00:03:24,940
not always but it's regularly negatively

00:03:23,350 --> 00:03:28,959
associated with deployments Wood

00:03:24,940 --> 00:03:32,530
releases why because they fail and then

00:03:28,959 --> 00:03:34,630
the irrevocable but and also

00:03:32,530 --> 00:03:37,230
understandable reaction is to reduce

00:03:34,630 --> 00:03:40,540
your deployment frequency things go bad

00:03:37,230 --> 00:03:44,280
things fail so what we do as humans is

00:03:40,540 --> 00:03:44,280
do less of it because it hurts and

00:03:44,640 --> 00:03:50,860
ironically the less you do it the more

00:03:48,010 --> 00:03:53,320
riskier it becomes and we'll get back to

00:03:50,860 --> 00:03:55,180
that in a little bit so risk and it's

00:03:53,320 --> 00:03:57,910
interesting that you see this happen at

00:03:55,180 --> 00:04:00,489
large companies for example financials

00:03:57,910 --> 00:04:03,250
are notorious that they deploy once or

00:04:00,489 --> 00:04:06,489
twice a year because they associated all

00:04:03,250 --> 00:04:09,549
this risk with that release and the only

00:04:06,489 --> 00:04:11,410
thing is it keeps confirming their bias

00:04:09,549 --> 00:04:15,420
because every

00:04:11,410 --> 00:04:24,580
half yearly release basically goes wrong

00:04:15,420 --> 00:04:26,650
control if I ask you as a as a developer

00:04:24,580 --> 00:04:29,350
as a tester as a team member as an ops

00:04:26,650 --> 00:04:32,590
person maybe are you allowed to decide

00:04:29,350 --> 00:04:36,900
when you deploy to production who says

00:04:32,590 --> 00:04:39,760
no okay I see a fair number of hands

00:04:36,900 --> 00:04:42,280
there are companies that actually do not

00:04:39,760 --> 00:04:43,000
allow technical team members to make

00:04:42,280 --> 00:04:47,020
that call

00:04:43,000 --> 00:04:50,290
they want certain features to go live

00:04:47,020 --> 00:04:53,020
only when some other people in some

00:04:50,290 --> 00:04:54,720
cases even the CEO says it's okay to do

00:04:53,020 --> 00:04:55,900
that and that's a control mechanism

00:04:54,720 --> 00:04:58,780
right

00:04:55,900 --> 00:05:01,000
it's basically somebody without any of

00:04:58,780 --> 00:05:04,090
the technical knowledge or background

00:05:01,000 --> 00:05:07,680
saying you cannot do that on Friday at

00:05:04,090 --> 00:05:10,120
5:00 p.m. because I have this this idea

00:05:07,680 --> 00:05:12,280
associated with that thing that it's

00:05:10,120 --> 00:05:14,050
dangerous so please don't do that I've

00:05:12,280 --> 00:05:16,860
seen somewhere in the newspaper that it

00:05:14,050 --> 00:05:21,130
breaks on Friday so don't control

00:05:16,860 --> 00:05:24,100
confidence and Trust the legacy

00:05:21,130 --> 00:05:26,229
application that you really don't really

00:05:24,100 --> 00:05:27,880
don't know what is happening or what

00:05:26,229 --> 00:05:29,110
will happen when you touch it here and

00:05:27,880 --> 00:05:31,930
then all of a sudden over there

00:05:29,110 --> 00:05:33,940
something falls apart right we don't

00:05:31,930 --> 00:05:35,800
have confidence in the changes that we

00:05:33,940 --> 00:05:38,530
make to our system that when we deploy

00:05:35,800 --> 00:05:41,169
them to production that they generally

00:05:38,530 --> 00:05:45,010
will work maybe we don't trust ourselves

00:05:41,169 --> 00:05:46,720
with our code right I'm changing

00:05:45,010 --> 00:05:48,729
something here and I don't really know

00:05:46,720 --> 00:05:50,650
what I'm doing because the system is not

00:05:48,729 --> 00:05:52,870
architected and designed in such a way

00:05:50,650 --> 00:05:55,150
that it helps me to understand me what

00:05:52,870 --> 00:05:57,280
I'm doing so I really don't trust what

00:05:55,150 --> 00:06:03,070
I'm doing so I try to limit my exposure

00:05:57,280 --> 00:06:05,650
to well at least not on a Friday time to

00:06:03,070 --> 00:06:08,560
repair and recover a lot of companies

00:06:05,650 --> 00:06:11,530
optimize for the time between failures

00:06:08,560 --> 00:06:14,080
they want to have that as as large as

00:06:11,530 --> 00:06:17,770
possible which is insane because things

00:06:14,080 --> 00:06:20,890
fail but the the reason they do that is

00:06:17,770 --> 00:06:22,810
because their systems are so difficult

00:06:20,890 --> 00:06:24,580
and so complicated that when they break

00:06:22,810 --> 00:06:27,720
it takes a long time

00:06:24,580 --> 00:06:32,290
to fit to fix it to restore that system

00:06:27,720 --> 00:06:35,560
so if your time to repair is 24 hours or

00:06:32,290 --> 00:06:38,470
more then yes I can understand why you

00:06:35,560 --> 00:06:41,890
would not want to deploy a change on

00:06:38,470 --> 00:06:44,590
Friday because it will possibly if it

00:06:41,890 --> 00:06:47,170
breaks push you into the weekend right

00:06:44,590 --> 00:06:49,420
it will actually force you to deal with

00:06:47,170 --> 00:06:51,910
that system going into the weekend and

00:06:49,420 --> 00:06:54,610
worse if it's more than 24 hours it will

00:06:51,910 --> 00:06:57,280
actually blank your entire weekend so

00:06:54,610 --> 00:06:59,350
timing the time it requires you to

00:06:57,280 --> 00:07:01,720
repair a system or recovery system

00:06:59,350 --> 00:07:08,830
definitely plays into the don't deploy

00:07:01,720 --> 00:07:13,900
on Friday and that also goes directly

00:07:08,830 --> 00:07:18,220
into on-call stress the person that goes

00:07:13,900 --> 00:07:20,830
into on-call Friday afternoon well if

00:07:18,220 --> 00:07:22,540
it's not you doing the deployment I'm

00:07:20,830 --> 00:07:25,540
doing the deployment and somebody else

00:07:22,540 --> 00:07:29,310
is on call and if I know that my system

00:07:25,540 --> 00:07:32,170
tends to break after deployment then I'm

00:07:29,310 --> 00:07:34,870
well maybe if I don't like that person

00:07:32,170 --> 00:07:36,820
that is on call then I may actually want

00:07:34,870 --> 00:07:40,000
to do it you know it screw screw their

00:07:36,820 --> 00:07:42,430
weekend but let's let's assume we're all

00:07:40,000 --> 00:07:45,280
reasonable individuals and we're all

00:07:42,430 --> 00:07:47,320
team players so we don't because we know

00:07:45,280 --> 00:07:49,120
we've seen it before right we've we've

00:07:47,320 --> 00:07:52,180
hit our we've hit our nose we've

00:07:49,120 --> 00:07:53,530
bloodied our nose on that wall and so

00:07:52,180 --> 00:07:55,510
let's not do that because the person

00:07:53,530 --> 00:07:57,340
that is on call is going to they're

00:07:55,510 --> 00:08:00,370
going to be hurt by this their weekend

00:07:57,340 --> 00:08:01,840
is going to go into into the toilet so

00:08:00,370 --> 00:08:06,400
that's not something we want to do

00:08:01,840 --> 00:08:08,770
either so all these things combined it's

00:08:06,400 --> 00:08:11,950
pretty reasonable to say don't deploy on

00:08:08,770 --> 00:08:16,900
the Friday right and the funny thing is

00:08:11,950 --> 00:08:19,120
I used to say the exact same thing not

00:08:16,900 --> 00:08:21,460
that long ago at least not when you

00:08:19,120 --> 00:08:23,680
compare it to cosmic timescale so you

00:08:21,460 --> 00:08:26,560
know 6 7 years ago I used to say

00:08:23,680 --> 00:08:29,470
something like that as well probably

00:08:26,560 --> 00:08:31,270
without context maybe because it was

00:08:29,470 --> 00:08:33,760
tradition maybe because I heard people

00:08:31,270 --> 00:08:35,740
in the industry saying it as well maybe

00:08:33,760 --> 00:08:37,219
because I saw the shirt online I don't

00:08:35,740 --> 00:08:41,120
know I can't remember but you

00:08:37,219 --> 00:08:44,589
to say and I just as much as everybody

00:08:41,120 --> 00:08:49,639
else like my weekends I like my evenings

00:08:44,589 --> 00:08:51,949
try as I might but what about bugs that

00:08:49,639 --> 00:08:54,560
you find in your system a critical issue

00:08:51,949 --> 00:08:57,949
that you find on a Thursday night or

00:08:54,560 --> 00:09:00,860
Friday morning I've seen companies that

00:08:57,949 --> 00:09:02,930
actually have two streams of flowing

00:09:00,860 --> 00:09:04,759
software to production the one is the

00:09:02,930 --> 00:09:07,459
the stream that they advertise that is

00:09:04,759 --> 00:09:11,029
the feature stream and the other is the

00:09:07,459 --> 00:09:13,730
huh it broke let's fix it and they

00:09:11,029 --> 00:09:16,250
actually bypass everything that is in

00:09:13,730 --> 00:09:20,240
the future stream just to get something

00:09:16,250 --> 00:09:22,730
to production really quick there is a an

00:09:20,240 --> 00:09:24,680
organization which I shall not name in

00:09:22,730 --> 00:09:27,410
the Netherlands that used to advertise

00:09:24,680 --> 00:09:30,620
that they did two releases a year and

00:09:27,410 --> 00:09:32,540
they actually did four so two that they

00:09:30,620 --> 00:09:35,360
advertised and then a week after the

00:09:32,540 --> 00:09:36,170
release they did the real release that

00:09:35,360 --> 00:09:40,639
fixed everything

00:09:36,170 --> 00:09:44,149
that the release broke so what about

00:09:40,639 --> 00:09:47,300
bugs what about 3 p.m. is that okay or

00:09:44,149 --> 00:09:49,879
are we freezing the entire day what

00:09:47,300 --> 00:09:52,910
about Thursday though if your system

00:09:49,879 --> 00:09:56,660
takes 24 hour plus to fix after a broken

00:09:52,910 --> 00:09:59,839
deploy or after a change if you do it on

00:09:56,660 --> 00:10:02,750
Thursday night maybe or Thursday in the

00:09:59,839 --> 00:10:04,579
afternoon then maybe the system is still

00:10:02,750 --> 00:10:07,550
broken on Saturday so maybe we should

00:10:04,579 --> 00:10:09,439
not deploy on Thursday either and we

00:10:07,550 --> 00:10:12,399
should say ok maybe let's just only

00:10:09,439 --> 00:10:17,839
deploy on Monday Tuesday and Wednesday

00:10:12,399 --> 00:10:20,540
Friday is 20% of the working week and if

00:10:17,839 --> 00:10:23,480
you block pushing value to production

00:10:20,540 --> 00:10:28,220
value to your user for 20% of the week

00:10:23,480 --> 00:10:30,589
and your competitor isn't then you're

00:10:28,220 --> 00:10:32,149
going to lose that battle Friday is 20%

00:10:30,589 --> 00:10:37,430
of the week and that is an important

00:10:32,149 --> 00:10:42,459
thing so I'd say let's improve maybe we

00:10:37,430 --> 00:10:44,629
must improve even let's do it more often

00:10:42,459 --> 00:10:48,470
this is not what your doctor would

00:10:44,629 --> 00:10:50,360
recommend doctor I broke my knee ok do

00:10:48,470 --> 00:10:51,150
it again it will hurt less the second

00:10:50,360 --> 00:10:55,950
time I promise

00:10:51,150 --> 00:11:00,240
shoo but in this contact it's definitely

00:10:55,950 --> 00:11:02,490
a thing that is the case because some

00:11:00,240 --> 00:11:05,610
people associate negativity with failure

00:11:02,490 --> 00:11:08,040
and that's not really the case failure

00:11:05,610 --> 00:11:11,760
is not the opposite of success failure

00:11:08,040 --> 00:11:14,010
isn't his encouragement to learn it's an

00:11:11,760 --> 00:11:17,360
opportunity failure is an opportunity

00:11:14,010 --> 00:11:20,430
and as Winston Churchill once said and

00:11:17,360 --> 00:11:22,740
he was wise men success consists of

00:11:20,430 --> 00:11:26,340
going from failure to failure without

00:11:22,740 --> 00:11:28,710
losing your enthusiasm so we we we

00:11:26,340 --> 00:11:30,810
basically we keep tripping and get we're

00:11:28,710 --> 00:11:34,170
still smiling and we're continuing

00:11:30,810 --> 00:11:36,600
happily along and this is what improves

00:11:34,170 --> 00:11:39,690
us if we take those failures not as

00:11:36,600 --> 00:11:43,590
negative data points but as

00:11:39,690 --> 00:11:47,550
opportunities to improve and the thing

00:11:43,590 --> 00:11:51,210
is if you do things in big steps then

00:11:47,550 --> 00:11:53,880
they will fail big so if we do run one

00:11:51,210 --> 00:11:55,860
release a year then what will what can

00:11:53,880 --> 00:11:57,810
go wrong will go wrong and it will go

00:11:55,860 --> 00:12:01,890
spectacularly wrong because there's a

00:11:57,810 --> 00:12:05,880
lot of changes in that release right so

00:12:01,890 --> 00:12:08,130
conversely small steps if they fail they

00:12:05,880 --> 00:12:10,530
will fail small and fail they will or

00:12:08,130 --> 00:12:12,570
some of them at least but that's fine

00:12:10,530 --> 00:12:16,380
because they fail small so we can

00:12:12,570 --> 00:12:18,120
recover quickly and it's cheaper and the

00:12:16,380 --> 00:12:21,630
object of this whole thing is making

00:12:18,120 --> 00:12:23,780
things effortless so instead of worrying

00:12:21,630 --> 00:12:27,240
about the next deployment will it work

00:12:23,780 --> 00:12:29,610
will it screw up my weekend my evening

00:12:27,240 --> 00:12:33,090
will I have to fix it and fix things

00:12:29,610 --> 00:12:34,710
again no we're going towards a situation

00:12:33,090 --> 00:12:37,500
where we actually don't think about that

00:12:34,710 --> 00:12:41,180
anymore we just make our change we test

00:12:37,500 --> 00:12:44,010
it and we have a sufficient confidence

00:12:41,180 --> 00:12:46,290
sufficient trust in our system and

00:12:44,010 --> 00:12:47,970
ourselves and our teams that we can

00:12:46,290 --> 00:12:53,130
deploy that to production and that will

00:12:47,970 --> 00:12:56,910
that it won't break effortless so all

00:12:53,130 --> 00:12:59,010
this is to reduce risk not eliminate it

00:12:56,910 --> 00:12:59,580
because that would that that's not

00:12:59,010 --> 00:13:01,980
possible

00:12:59,580 --> 00:13:04,650
but reduce it and reduce it to such a

00:13:01,980 --> 00:13:05,100
level that it is manageable and I came

00:13:04,650 --> 00:13:09,120
across

00:13:05,100 --> 00:13:11,690
an interesting tweet the other day on

00:13:09,120 --> 00:13:16,080
the left side of this picture is the

00:13:11,690 --> 00:13:19,160
risk and cost diagram with infrequent

00:13:16,080 --> 00:13:22,530
releases so what you see is basically

00:13:19,160 --> 00:13:24,420
this is inventory if you don't release

00:13:22,530 --> 00:13:26,430
things to production and you keep

00:13:24,420 --> 00:13:29,640
building things then you build up

00:13:26,430 --> 00:13:33,300
inventory right and once you release

00:13:29,640 --> 00:13:35,340
that then you actually realize value

00:13:33,300 --> 00:13:39,420
towards the customer or that's what we

00:13:35,340 --> 00:13:41,970
hope while you are building up inventory

00:13:39,420 --> 00:13:43,770
you are also building up risk because

00:13:41,970 --> 00:13:45,450
you actually don't know whether the

00:13:43,770 --> 00:13:47,670
thing you're building is the thing that

00:13:45,450 --> 00:13:51,180
people need because you haven't tested

00:13:47,670 --> 00:13:51,780
it it's still lying in your in your

00:13:51,180 --> 00:13:54,060
company

00:13:51,780 --> 00:13:56,760
nobody's actually used it yet so it's

00:13:54,060 --> 00:13:59,670
risk whereas on the right side of the

00:13:56,760 --> 00:14:02,310
picture you see a deployment frequency

00:13:59,670 --> 00:14:03,990
that is far greater and so what you see

00:14:02,310 --> 00:14:06,920
is that the amount of inventory and

00:14:03,990 --> 00:14:09,570
therefore risk that you build up is

00:14:06,920 --> 00:14:13,080
significantly smaller because we release

00:14:09,570 --> 00:14:15,180
in small batches and we can fast that we

00:14:13,080 --> 00:14:18,300
can learn quickly from those small

00:14:15,180 --> 00:14:21,180
batches and if there is risk involved if

00:14:18,300 --> 00:14:23,250
there's an a failure whether that's a

00:14:21,180 --> 00:14:31,470
technical failure or a business failure

00:14:23,250 --> 00:14:34,170
we can easily compensate for it this

00:14:31,470 --> 00:14:36,990
rolls right into D continues everything

00:14:34,170 --> 00:14:39,480
mantra rather than thinking about start

00:14:36,990 --> 00:14:41,640
dates and end dates and projects we're

00:14:39,480 --> 00:14:43,740
thinking about products products that

00:14:41,640 --> 00:14:46,350
have a lifecycle that we improve day by

00:14:43,740 --> 00:14:49,640
day by day and we improve them through a

00:14:46,350 --> 00:14:54,390
feedback loop that goes on and on and on

00:14:49,640 --> 00:14:56,970
we we plan we code we build we test we

00:14:54,390 --> 00:15:00,180
release we deploy we operate we monitor

00:14:56,970 --> 00:15:02,870
and along goes a cycle and we never stop

00:15:00,180 --> 00:15:06,980
and we do this in very small steps

00:15:02,870 --> 00:15:10,380
continues everything that's the basis of

00:15:06,980 --> 00:15:14,070
realizing value quickly to our customers

00:15:10,380 --> 00:15:17,370
and one thing if you haven't read this

00:15:14,070 --> 00:15:18,760
book yet then I absolutely suggested to

00:15:17,370 --> 00:15:21,730
you to continues the live

00:15:18,760 --> 00:15:25,480
we Bible if you will by jazz humble and

00:15:21,730 --> 00:15:28,540
Dave Farley continuous delivery is all

00:15:25,480 --> 00:15:31,330
about delivering value to users safely

00:15:28,540 --> 00:15:35,710
and quickly in a sustainable way and

00:15:31,330 --> 00:15:37,510
this is a key point it's about a tempo

00:15:35,710 --> 00:15:40,540
that you can achieve and that you can

00:15:37,510 --> 00:15:42,820
sustain indefinitely so it's not about

00:15:40,540 --> 00:15:45,250
you know crunch time this needs to go

00:15:42,820 --> 00:15:46,770
into production right now no it's about

00:15:45,250 --> 00:15:47,890
a tempo that you can maintain

00:15:46,770 --> 00:15:52,900
indefinitely

00:15:47,890 --> 00:15:55,540
as a team continuous delivery basically

00:15:52,900 --> 00:15:58,570
looks at things in in sort of a

00:15:55,540 --> 00:16:00,880
sequential way and deploying or

00:15:58,570 --> 00:16:04,570
delivering value to production through a

00:16:00,880 --> 00:16:07,030
number of stages stages that do testing

00:16:04,570 --> 00:16:10,060
or building or a variance of those

00:16:07,030 --> 00:16:12,370
things and in an abstract simplified way

00:16:10,060 --> 00:16:13,960
continuous delivery starts on the left

00:16:12,370 --> 00:16:17,710
side of the picture with a developer

00:16:13,960 --> 00:16:20,820
checking in code to get up.get lab then

00:16:17,710 --> 00:16:23,320
a built and test system starts running

00:16:20,820 --> 00:16:25,240
it compiles the code if you have a

00:16:23,320 --> 00:16:27,720
compiled language where it builds assets

00:16:25,240 --> 00:16:31,000
or whatever and then you run the tests

00:16:27,720 --> 00:16:34,540
when all is okay all the tests are green

00:16:31,000 --> 00:16:36,310
we deploy automatically to a staging a

00:16:34,540 --> 00:16:38,320
testing and accepting acceptance

00:16:36,310 --> 00:16:38,710
environment the name doesn't really

00:16:38,320 --> 00:16:44,470
matter

00:16:38,710 --> 00:16:48,520
and then at some point after testing on

00:16:44,470 --> 00:16:50,080
acceptance we decide as as a team this

00:16:48,520 --> 00:16:52,270
is okay this is good enough to go to

00:16:50,080 --> 00:16:55,480
production and then it's deployed into

00:16:52,270 --> 00:16:58,000
production the red arrow then this or

00:16:55,480 --> 00:17:00,310
indicates that there is human

00:16:58,000 --> 00:17:04,329
involvement there is a human decision

00:17:00,310 --> 00:17:04,690
that actually says ok now we are good to

00:17:04,329 --> 00:17:07,240
go

00:17:04,690 --> 00:17:11,970
we can promote this change this bill to

00:17:07,240 --> 00:17:14,620
production continuous delivery says

00:17:11,970 --> 00:17:17,949
specifies that your code should always

00:17:14,620 --> 00:17:21,100
be in a releasable state regardless of

00:17:17,949 --> 00:17:23,140
the moment of time you should always be

00:17:21,100 --> 00:17:27,189
able to deploy the thing that you are

00:17:23,140 --> 00:17:30,160
working on to production and if that is

00:17:27,189 --> 00:17:32,110
true and we've done the thing with the

00:17:30,160 --> 00:17:32,470
manual intervention often enough and we

00:17:32,110 --> 00:17:34,240
learn

00:17:32,470 --> 00:17:37,299
about that then we can go to this

00:17:34,240 --> 00:17:40,120
situation continuous deployment where we

00:17:37,299 --> 00:17:42,400
actually after we deploy into acceptance

00:17:40,120 --> 00:17:45,460
we don't have any manual checks all our

00:17:42,400 --> 00:17:46,870
checks are automated and we verify on an

00:17:45,460 --> 00:17:49,390
acceptance environment whether the

00:17:46,870 --> 00:17:52,030
deployment there is ok is successful and

00:17:49,390 --> 00:17:55,299
then we immediately and automatically

00:17:52,030 --> 00:17:56,919
progress into production so there's no

00:17:55,299 --> 00:17:59,140
human involvement in this pipeline

00:17:56,919 --> 00:18:01,000
anymore everything flows from the left

00:17:59,140 --> 00:18:03,730
to the right of the picture in an

00:18:01,000 --> 00:18:08,980
automated fashion all the checks that we

00:18:03,730 --> 00:18:12,909
do are automated checks why would we do

00:18:08,980 --> 00:18:14,679
this you might ask well research for

00:18:12,909 --> 00:18:17,770
example the research presented in

00:18:14,679 --> 00:18:19,900
accelerate another very interesting book

00:18:17,770 --> 00:18:23,830
that you definitely should read if you

00:18:19,900 --> 00:18:25,780
haven't yet there research says for

00:18:23,830 --> 00:18:27,340
high-performing teams compared to low

00:18:25,780 --> 00:18:30,429
performing teams their deployment

00:18:27,340 --> 00:18:32,830
frequency is 46 times higher than the

00:18:30,429 --> 00:18:34,929
low performing teams their mean time to

00:18:32,830 --> 00:18:37,000
recover they recover about a hundred

00:18:34,929 --> 00:18:39,820
times faster so that's the difference

00:18:37,000 --> 00:18:41,669
between days and minutes their change

00:18:39,820 --> 00:18:45,039
failure rate is one-fifth as likely

00:18:41,669 --> 00:18:47,710
which means that the low performing

00:18:45,039 --> 00:18:50,440
teams will have this and they will have

00:18:47,710 --> 00:18:53,830
1/5 of that in terms of change failures

00:18:50,440 --> 00:18:55,750
and what's especially interesting the

00:18:53,830 --> 00:18:58,510
lead time for changes which is basically

00:18:55,750 --> 00:19:00,220
how long does it take for change to be

00:18:58,510 --> 00:19:02,289
developed by you a developer and

00:19:00,220 --> 00:19:05,230
actually be delivered into production

00:19:02,289 --> 00:19:08,409
and be usable by user high-performing

00:19:05,230 --> 00:19:11,350
teams do that 440 times faster than

00:19:08,409 --> 00:19:16,990
low-performing teams and they all do

00:19:11,350 --> 00:19:19,240
that by incorporating all the well some

00:19:16,990 --> 00:19:24,039
of the suggestions that I'm about to

00:19:19,240 --> 00:19:26,620
give you so the effort them or the idea

00:19:24,039 --> 00:19:31,500
then is that if you can deploy on a

00:19:26,620 --> 00:19:34,990
Friday at 5:00 p.m. you can do it always

00:19:31,500 --> 00:19:37,299
the idea is the goal should be if you

00:19:34,990 --> 00:19:39,460
ask me to go for the most difficult

00:19:37,299 --> 00:19:41,470
period that you can imagine which in

00:19:39,460 --> 00:19:45,820
this case would then be Friday 5:00 p.m.

00:19:41,470 --> 00:19:48,100
and go for that and if you can do that

00:19:45,820 --> 00:19:50,619
then you can do it any day of the week

00:19:48,100 --> 00:19:53,049
you can do an emergency fix on a Sunday

00:19:50,619 --> 00:19:55,299
and it will be the exact same effortless

00:19:53,049 --> 00:19:59,499
thing as it is on a Tuesday morning

00:19:55,299 --> 00:20:01,600
right just look at Netflix they cannot

00:19:59,499 --> 00:20:04,029
they don't have Windows that they did

00:20:01,600 --> 00:20:07,299
can't deploy in because everybody's

00:20:04,029 --> 00:20:11,409
looking at videos all the time worldwide

00:20:07,299 --> 00:20:13,720
they don't have off hours so if they

00:20:11,409 --> 00:20:16,600
cannot deploy during the release of

00:20:13,720 --> 00:20:19,629
their most incredible series their most

00:20:16,600 --> 00:20:22,720
popular series a few years ago was house

00:20:19,629 --> 00:20:27,220
of cards now I'm not sure sure but if

00:20:22,720 --> 00:20:31,539
they cannot do it then when can they so

00:20:27,220 --> 00:20:34,359
that must be our main effort I think so

00:20:31,539 --> 00:20:36,129
people say ok but our code is old we we

00:20:34,359 --> 00:20:39,700
cannot do all the things that you're

00:20:36,129 --> 00:20:42,639
saying it's impossible please go away

00:20:39,700 --> 00:20:45,340
our code is not on the test so we cannot

00:20:42,639 --> 00:20:46,899
have any confidence in our system we can

00:20:45,340 --> 00:20:48,899
never say whether the thing we are

00:20:46,899 --> 00:20:51,820
changing is actually going to work and

00:20:48,899 --> 00:20:56,229
we have an impossible to change system

00:20:51,820 --> 00:20:56,590
and I don't like my job and please go

00:20:56,229 --> 00:20:59,559
away

00:20:56,590 --> 00:21:03,700
so dealing with legacy now legacy is

00:20:59,559 --> 00:21:07,299
quoted because legacy is also associated

00:21:03,700 --> 00:21:08,979
with negativity and that is

00:21:07,299 --> 00:21:11,259
understandable and in some cases even

00:21:08,979 --> 00:21:15,279
just a fight but please do remember that

00:21:11,259 --> 00:21:17,349
legacy systems earn money I've consulted

00:21:15,279 --> 00:21:23,519
on many legacy systems that actually

00:21:17,349 --> 00:21:23,519
were reaping in money and yet people are

00:21:23,669 --> 00:21:29,169
so yes there are problems with legacy

00:21:26,950 --> 00:21:31,179
and I'll give you a few patterns to deal

00:21:29,169 --> 00:21:35,950
with that the first one is to Strangler

00:21:31,179 --> 00:21:38,590
pattern much like this type of vine

00:21:35,950 --> 00:21:40,119
which is a strangler vine and forgive me

00:21:38,590 --> 00:21:42,159
that I don't know the exact Latin name

00:21:40,119 --> 00:21:44,289
of the thing but you can look it up on

00:21:42,159 --> 00:21:49,059
Google it grows on trees

00:21:44,289 --> 00:21:51,759
and it basically grows on the outside of

00:21:49,059 --> 00:21:54,039
the tree until it has enveloped the

00:21:51,759 --> 00:21:56,710
entire tree and the host tree can no

00:21:54,039 --> 00:21:58,869
longer survive and dies which is

00:21:56,710 --> 00:21:59,230
something we want to do potentially with

00:21:58,869 --> 00:22:02,920
a

00:21:59,230 --> 00:22:06,730
legacy system as well imagine we have a

00:22:02,920 --> 00:22:09,400
monolithic application that is very

00:22:06,730 --> 00:22:11,620
difficult very much not under test and

00:22:09,400 --> 00:22:13,870
it's connected to the Internet and it's

00:22:11,620 --> 00:22:16,450
connected to a database so far so good

00:22:13,870 --> 00:22:18,250
what we do is we insert a proxy between

00:22:16,450 --> 00:22:20,140
the monolith and the Internet and

00:22:18,250 --> 00:22:23,170
initially it doesn't do anything it just

00:22:20,140 --> 00:22:25,660
forwards the traffic from the Internet

00:22:23,170 --> 00:22:29,740
to the application or vice versa but

00:22:25,660 --> 00:22:32,380
then we start adding a service and this

00:22:29,740 --> 00:22:35,500
is not a micro service or micro service

00:22:32,380 --> 00:22:37,780
or a mono service it's a service or it

00:22:35,500 --> 00:22:39,610
may be a module if you have a system

00:22:37,780 --> 00:22:42,070
like that and it may have its own

00:22:39,610 --> 00:22:43,720
database may not but it's going to

00:22:42,070 --> 00:22:46,480
implement a small piece of functionality

00:22:43,720 --> 00:22:48,400
and when that is done we add a ruling

00:22:46,480 --> 00:22:50,230
the proxy that actually forwards the

00:22:48,400 --> 00:22:52,480
traffic for that particular piece of

00:22:50,230 --> 00:22:55,270
functionality not to the monolith but to

00:22:52,480 --> 00:22:58,120
the surface right and then we add more

00:22:55,270 --> 00:23:00,280
services and more services and we carve

00:22:58,120 --> 00:23:02,080
out pieces of the monolith and we make

00:23:00,280 --> 00:23:04,120
everything nice and loosely coupled and

00:23:02,080 --> 00:23:06,520
the proxy gets more rules and at some

00:23:04,120 --> 00:23:08,830
point our monolithic application is

00:23:06,520 --> 00:23:11,170
either not doing anything anymore or

00:23:08,830 --> 00:23:13,420
it's reduced to the size of all the

00:23:11,170 --> 00:23:16,420
other services and it's become a service

00:23:13,420 --> 00:23:20,170
on it of its own that's the ideal end

00:23:16,420 --> 00:23:23,170
state the strangler pattern which is

00:23:20,170 --> 00:23:25,660
uniquely well not uniquely but very much

00:23:23,170 --> 00:23:28,930
applicable to web systems for example

00:23:25,660 --> 00:23:33,430
because you can insert a proxy into the

00:23:28,930 --> 00:23:36,490
web traffic and then forward that but

00:23:33,430 --> 00:23:38,380
it's also if you do messaging for

00:23:36,490 --> 00:23:40,930
example you have a message bus that gets

00:23:38,380 --> 00:23:42,790
messages based on the message contents

00:23:40,930 --> 00:23:46,240
or key in the message you can distribute

00:23:42,790 --> 00:23:49,360
it to module X or the monolith very

00:23:46,240 --> 00:23:51,400
applicable in both cases another pattern

00:23:49,360 --> 00:23:52,690
is branching by abstraction now this

00:23:51,400 --> 00:23:54,870
doesn't have anything to do with

00:23:52,690 --> 00:23:58,780
branches in your git and your subversion

00:23:54,870 --> 00:24:03,850
but rather a functional branch a logical

00:23:58,780 --> 00:24:05,800
branch and let's assume we have a module

00:24:03,850 --> 00:24:08,170
of some sort in our in our legacy system

00:24:05,800 --> 00:24:11,800
and there's a bunch of client code

00:24:08,170 --> 00:24:13,179
connected to it and they all rely on the

00:24:11,800 --> 00:24:16,090
old module and it's best

00:24:13,179 --> 00:24:17,830
and it's not well tested and we don't

00:24:16,090 --> 00:24:20,950
really know its specification and there

00:24:17,830 --> 00:24:22,899
are bugs but all the clients all those

00:24:20,950 --> 00:24:25,570
clients are completely linked to it so

00:24:22,899 --> 00:24:26,980
if we change the old module then those

00:24:25,570 --> 00:24:29,409
clients start falling apart and that's

00:24:26,980 --> 00:24:31,090
not something we want and we don't want

00:24:29,409 --> 00:24:33,070
to do it in a Big Bang we don't want to

00:24:31,090 --> 00:24:36,190
change all the clients and the module

00:24:33,070 --> 00:24:38,440
together because that's risky so what we

00:24:36,190 --> 00:24:41,440
do instead is this we add an abstraction

00:24:38,440 --> 00:24:43,450
layer next to the old module and the

00:24:41,440 --> 00:24:46,779
abstraction layers think of it as an

00:24:43,450 --> 00:24:49,360
interface that is well defined or if you

00:24:46,779 --> 00:24:51,129
have an ugly building think of it as a

00:24:49,360 --> 00:24:52,570
facade that you add in front of the

00:24:51,129 --> 00:24:54,249
building right all of a sudden you don't

00:24:52,570 --> 00:24:57,749
see the original building anymore you

00:24:54,249 --> 00:25:01,059
only see this beautiful shiny facade and

00:24:57,749 --> 00:25:02,679
what we then do is start transporting

00:25:01,059 --> 00:25:05,049
those clients to the abstraction layer

00:25:02,679 --> 00:25:07,090
the abstraction layer is going to call

00:25:05,049 --> 00:25:09,460
the old module so it's going to abstract

00:25:07,090 --> 00:25:12,700
that away and the clients are going to

00:25:09,460 --> 00:25:14,470
talk to the facade one by one by one

00:25:12,700 --> 00:25:16,210
until they are all talking to the

00:25:14,470 --> 00:25:18,850
abstraction layer and now you have a

00:25:16,210 --> 00:25:21,220
stable interface which can be tested can

00:25:18,850 --> 00:25:23,740
be specified all the organizing

00:25:21,220 --> 00:25:26,169
associated with modern code and the old

00:25:23,740 --> 00:25:29,769
module is hidden away and what we can

00:25:26,169 --> 00:25:31,299
then do is hey add a new module with the

00:25:29,769 --> 00:25:33,340
same abstraction layer or which

00:25:31,299 --> 00:25:37,240
implements the abstraction layer and

00:25:33,340 --> 00:25:39,039
then we can preferably by configuration

00:25:37,240 --> 00:25:41,049
change switch those clients to the new

00:25:39,039 --> 00:25:42,399
module without declines knowing that

00:25:41,049 --> 00:25:45,399
they're actually talking to something

00:25:42,399 --> 00:25:47,379
different right and that new module is

00:25:45,399 --> 00:25:50,350
of course your TDD and everything it's

00:25:47,379 --> 00:25:52,059
it's beautiful its well-designed and all

00:25:50,350 --> 00:25:54,519
of the sudden you cut you've carved out

00:25:52,059 --> 00:25:56,830
a piece of the code that was impossible

00:25:54,519 --> 00:26:01,570
to maintain and it's now replaced by

00:25:56,830 --> 00:26:03,789
something that is well maintained and we

00:26:01,570 --> 00:26:07,059
do that and then we can get rid of the

00:26:03,789 --> 00:26:09,700
old module great this is a very powerful

00:26:07,059 --> 00:26:12,850
pattern that unfortunately is not used

00:26:09,700 --> 00:26:15,730
enough and this allows us to do things

00:26:12,850 --> 00:26:18,460
in small steps which is great which we

00:26:15,730 --> 00:26:20,289
can test and deploy to our hearts

00:26:18,460 --> 00:26:24,789
content instead of going to a Big Bang

00:26:20,289 --> 00:26:26,410
change so on branches while we're

00:26:24,789 --> 00:26:29,170
talking about branches

00:26:26,410 --> 00:26:33,550
and now I'm talking about the gift

00:26:29,170 --> 00:26:35,220
branches or version-control branches who

00:26:33,550 --> 00:26:38,890
here has ever had a merge conflict

00:26:35,220 --> 00:26:40,870
please don't lie okay

00:26:38,890 --> 00:26:44,560
who's here had ever had a merge conflict

00:26:40,870 --> 00:26:47,170
that took more than a day to fix thank

00:26:44,560 --> 00:26:51,730
you for your honesty this is something I

00:26:47,170 --> 00:26:53,800
caught at a client last year and this

00:26:51,730 --> 00:26:55,800
was relatively benign this occurred more

00:26:53,800 --> 00:27:07,420
than I want it

00:26:55,800 --> 00:27:14,050
this can happen yeah but what is really

00:27:07,420 --> 00:27:17,530
at play here continuous integration that

00:27:14,050 --> 00:27:21,240
is a term coined by among others Martin

00:27:17,530 --> 00:27:24,450
Fowler way back in the day and

00:27:21,240 --> 00:27:27,850
continuous integration there's one

00:27:24,450 --> 00:27:30,060
incredibly important line in in the idea

00:27:27,850 --> 00:27:34,660
behind continuous integration that is

00:27:30,060 --> 00:27:38,890
integrate to master or to mainline or to

00:27:34,660 --> 00:27:41,140
baseline at least daily not from there's

00:27:38,890 --> 00:27:43,840
an important distinction the idea of

00:27:41,140 --> 00:27:47,800
continuous integration as it's stated is

00:27:43,840 --> 00:27:50,170
as a team member it is important that

00:27:47,800 --> 00:27:52,530
you integrate your work with others so

00:27:50,170 --> 00:27:55,420
that it can be tested and verified and

00:27:52,530 --> 00:27:58,510
also that any potential merge conflicts

00:27:55,420 --> 00:28:00,850
are as rare and as small as possible

00:27:58,510 --> 00:28:03,400
which requires you to integrate your

00:28:00,850 --> 00:28:05,620
work with others at least daily to Main

00:28:03,400 --> 00:28:08,080
Line not from so pulling from or

00:28:05,620 --> 00:28:12,160
rebasing from master is not the same as

00:28:08,080 --> 00:28:15,040
integrating your work to so what you

00:28:12,160 --> 00:28:16,900
essentially do or essentially saw in the

00:28:15,040 --> 00:28:19,120
picture is delaying integration delaying

00:28:16,900 --> 00:28:22,780
integration of code to others to other

00:28:19,120 --> 00:28:25,420
code and okay I know that there are

00:28:22,780 --> 00:28:28,090
people that say let's use branches to

00:28:25,420 --> 00:28:30,390
decide when we want to merge a feature

00:28:28,090 --> 00:28:35,140
and when we want to put a feature live

00:28:30,390 --> 00:28:37,300
like like a timer like a schedule but

00:28:35,140 --> 00:28:39,670
there are better ways to do that because

00:28:37,300 --> 00:28:42,640
if we endeavour to decouple the

00:28:39,670 --> 00:28:44,260
deployment from the release then the

00:28:42,640 --> 00:28:46,840
deployment becomes a purely technical

00:28:44,260 --> 00:28:49,450
exercise right we deploy to production

00:28:46,840 --> 00:28:54,460
and that is a technical thing and the

00:28:49,450 --> 00:28:57,730
release where which is actually allowing

00:28:54,460 --> 00:28:59,530
customers to use a feature that could

00:28:57,730 --> 00:29:02,170
become a business decision or rather a

00:28:59,530 --> 00:29:04,750
joint decision with within the team and

00:29:02,170 --> 00:29:06,900
and other stakeholders how can you do

00:29:04,750 --> 00:29:09,850
that well a thing called feature toggles

00:29:06,900 --> 00:29:11,770
or feature switches feature Flags all

00:29:09,850 --> 00:29:15,520
different names for the same thing and

00:29:11,770 --> 00:29:17,590
what they basically mean is we put sort

00:29:15,520 --> 00:29:19,180
of like an if statement around a piece

00:29:17,590 --> 00:29:22,930
of functionality and depending on a

00:29:19,180 --> 00:29:28,480
condition functionalities either dormant

00:29:22,930 --> 00:29:30,550
or active and we can add a dashboard for

00:29:28,480 --> 00:29:33,400
that for example and basically you would

00:29:30,550 --> 00:29:35,700
have a feature that is based on a flag

00:29:33,400 --> 00:29:37,990
or a toggle switched on or off and

00:29:35,700 --> 00:29:40,240
available or not available to groups of

00:29:37,990 --> 00:29:43,960
consumers and this can go this can get

00:29:40,240 --> 00:29:47,040
very complicated you can activate

00:29:43,960 --> 00:29:51,820
feature flag based on region based on

00:29:47,040 --> 00:29:53,980
preferences based on other things but

00:29:51,820 --> 00:29:55,990
what it boils down to is basically this

00:29:53,980 --> 00:29:59,110
this is one of my client projects a few

00:29:55,990 --> 00:30:01,120
years ago an old version of a search

00:29:59,110 --> 00:30:03,640
page on the left and a new version on

00:30:01,120 --> 00:30:07,030
the right what you see happening there

00:30:03,640 --> 00:30:09,250
is a complete RER katakan of the entire

00:30:07,030 --> 00:30:11,830
search functionality so going from solar

00:30:09,250 --> 00:30:13,360
to elasticsearch a new design and a

00:30:11,830 --> 00:30:15,580
whole bunch of other things which is not

00:30:13,360 --> 00:30:19,300
you know does this is not done in a day

00:30:15,580 --> 00:30:21,670
so this took about a month and a half

00:30:19,300 --> 00:30:23,770
and if we didn't do that with a feature

00:30:21,670 --> 00:30:25,540
toggle it would have meant building that

00:30:23,770 --> 00:30:28,300
on a feature branch for a month and a

00:30:25,540 --> 00:30:31,450
half with all the associated merge

00:30:28,300 --> 00:30:34,000
conflicts and issues with that or we

00:30:31,450 --> 00:30:36,970
would have blocked the deployment for a

00:30:34,000 --> 00:30:40,120
month and a half both very suboptimal so

00:30:36,970 --> 00:30:42,040
what we did instead was in a number of

00:30:40,120 --> 00:30:44,200
small commits behind a feature flag

00:30:42,040 --> 00:30:46,300
developed a new site developed a new

00:30:44,200 --> 00:30:48,550
page and then once we thought it was

00:30:46,300 --> 00:30:50,500
okay enough to release to the company we

00:30:48,550 --> 00:30:52,270
enabled to feature flag for people

00:30:50,500 --> 00:30:53,350
inside the company Network so based on

00:30:52,270 --> 00:30:55,509
IP address

00:30:53,350 --> 00:30:57,549
then we got some feedback and then we

00:30:55,509 --> 00:31:00,340
enabled to feature flag for 10% of life

00:30:57,549 --> 00:31:03,009
traffic and we saw that the metrics were

00:31:00,340 --> 00:31:05,250
actually getting better so we increased

00:31:03,009 --> 00:31:07,720
it to 50% and then to a hundred percent

00:31:05,250 --> 00:31:12,279
that's what feature toggles allow you to

00:31:07,720 --> 00:31:14,919
do there is a real thing now feature

00:31:12,279 --> 00:31:16,419
toggle debt is that if you have too many

00:31:14,919 --> 00:31:18,820
feature toggles long lift feature

00:31:16,419 --> 00:31:21,250
toggles in your system they could lead

00:31:18,820 --> 00:31:24,340
to a combinatorial explosion of possible

00:31:21,250 --> 00:31:27,309
paths through your code so if something

00:31:24,340 --> 00:31:28,840
reaches 100% and doesn't require you to

00:31:27,309 --> 00:31:30,700
have the feature toggle anymore then

00:31:28,840 --> 00:31:35,340
please go ahead and remove the future

00:31:30,700 --> 00:31:39,580
toggle so let's get back to branching

00:31:35,340 --> 00:31:42,820
and I've stole the stole in the next few

00:31:39,580 --> 00:31:44,340
slides from from somebody who's talking

00:31:42,820 --> 00:31:46,899
about this more often as well

00:31:44,340 --> 00:31:50,679
Brett successful branching strategies

00:31:46,899 --> 00:31:54,639
don't and the second is please also

00:31:50,679 --> 00:31:56,289
don't and third don't branch when I say

00:31:54,639 --> 00:32:00,070
this you're laughing a little bit but

00:31:56,289 --> 00:32:03,490
I've also seen this happen the the

00:32:00,070 --> 00:32:07,509
pitchfork reaction so what I mean with

00:32:03,490 --> 00:32:10,600
this is trunk based development or

00:32:07,509 --> 00:32:12,370
master or mainline or whatever it's

00:32:10,600 --> 00:32:15,700
called in your version control system of

00:32:12,370 --> 00:32:19,419
choice this is not new for those that

00:32:15,700 --> 00:32:21,730
are old enough to remember extreme

00:32:19,419 --> 00:32:25,570
programming which by now is 18 or 19

00:32:21,730 --> 00:32:29,289
years old I think this was introduced as

00:32:25,570 --> 00:32:31,059
part of XP drunk based development so

00:32:29,289 --> 00:32:33,509
what it basically means is you have a

00:32:31,059 --> 00:32:37,240
main line of development you have master

00:32:33,509 --> 00:32:41,320
or trunk if you're still on subversion

00:32:37,240 --> 00:32:43,539
and that is where everything goes

00:32:41,320 --> 00:32:47,320
we don't use feature branches we may

00:32:43,539 --> 00:32:49,840
depending on the context we may use a

00:32:47,320 --> 00:32:52,960
release branch but we don't use feature

00:32:49,840 --> 00:32:55,330
branches to get into the continuous

00:32:52,960 --> 00:33:00,070
integration mantra of integrating with

00:32:55,330 --> 00:33:02,080
each other at least daily the question

00:33:00,070 --> 00:33:06,010
then becomes okay what about short-lived

00:33:02,080 --> 00:33:07,150
feature branches my question then would

00:33:06,010 --> 00:33:09,280
be what is

00:33:07,150 --> 00:33:12,280
lived what is short-lived to you who

00:33:09,280 --> 00:33:20,020
think short-lived is three hours four

00:33:12,280 --> 00:33:21,430
hours okay a date more than a day okay

00:33:20,020 --> 00:33:25,240
you're violating continuous integration

00:33:21,430 --> 00:33:28,030
sorry and a friend of mine this is not

00:33:25,240 --> 00:33:29,470
something I thought of myself of wish'

00:33:28,030 --> 00:33:32,700
what he called it discontinuous

00:33:29,470 --> 00:33:36,610
integration or continuous disintegration

00:33:32,700 --> 00:33:38,170
so shortly feature branches if you don't

00:33:36,610 --> 00:33:40,600
want to violate continuous integration

00:33:38,170 --> 00:33:42,580
means future branch can only be alive

00:33:40,600 --> 00:33:44,380
for less than a day and probably a lot

00:33:42,580 --> 00:33:46,870
less than a day because you also need to

00:33:44,380 --> 00:33:51,550
factor in time for the merge and etc etc

00:33:46,870 --> 00:33:53,620
so 3-4 hours maybe I don't know but if

00:33:51,550 --> 00:33:56,620
you are at 3 or 4 hours why would you

00:33:53,620 --> 00:33:59,500
use a feature branch anyway because it's

00:33:56,620 --> 00:34:04,090
probably not that it doesn't exist for

00:33:59,500 --> 00:34:08,350
that long even so short leaf feature

00:34:04,090 --> 00:34:12,040
branches then however pull requests are

00:34:08,350 --> 00:34:14,290
in essence branches who here uses pull

00:34:12,040 --> 00:34:18,790
requests ok

00:34:14,290 --> 00:34:22,690
that's almost the entire audience using

00:34:18,790 --> 00:34:26,290
it for code reviews I assume write code

00:34:22,690 --> 00:34:28,060
reviews are not unuseful they are they

00:34:26,290 --> 00:34:29,679
are very useful if you don't have a code

00:34:28,060 --> 00:34:31,480
review system in place and you go to

00:34:29,679 --> 00:34:33,280
pull request to do code reviews that is

00:34:31,480 --> 00:34:35,379
way better than not having code reviews

00:34:33,280 --> 00:34:39,310
but there is an even better way of doing

00:34:35,379 --> 00:34:41,440
code reviews because code reviews in the

00:34:39,310 --> 00:34:44,860
pull requests fashion introduce flow

00:34:41,440 --> 00:34:47,139
delay and what I mean with that is it's

00:34:44,860 --> 00:34:49,720
asynchronous in its nature right i I

00:34:47,139 --> 00:34:53,350
develop some code I create a pull

00:34:49,720 --> 00:34:54,970
request and then another person another

00:34:53,350 --> 00:34:57,940
developer has to look at that and they

00:34:54,970 --> 00:35:00,820
have to verify may change and they may

00:34:57,940 --> 00:35:03,190
see some issues with that they need to

00:35:00,820 --> 00:35:05,110
get back to me and all the while this is

00:35:03,190 --> 00:35:07,420
happening I have a bunch of context

00:35:05,110 --> 00:35:09,070
which is going on I'm working on a thing

00:35:07,420 --> 00:35:11,410
I'm finishing the thing submitting their

00:35:09,070 --> 00:35:12,810
pull request I pull somebody else out of

00:35:11,410 --> 00:35:16,000
their context to look at my pull request

00:35:12,810 --> 00:35:18,670
then my to their intended changes come

00:35:16,000 --> 00:35:20,980
back to me I need to go to another

00:35:18,670 --> 00:35:23,470
context so there's a lot of the

00:35:20,980 --> 00:35:25,420
involved and the only the only time this

00:35:23,470 --> 00:35:28,630
really really works is if you have a

00:35:25,420 --> 00:35:30,700
sort of SLA agreed on between your team

00:35:28,630 --> 00:35:32,650
like if a pool request comes in it needs

00:35:30,700 --> 00:35:34,770
to be looked at by somebody in 15

00:35:32,650 --> 00:35:37,869
minutes I don't know something like that

00:35:34,770 --> 00:35:40,359
also it's been looked at that full

00:35:37,869 --> 00:35:42,820
requests that are large and large

00:35:40,359 --> 00:35:44,619
depends on the language but typically

00:35:42,820 --> 00:35:47,430
fifty to a hundred lines sort of seems

00:35:44,619 --> 00:35:51,090
the switchover point people start

00:35:47,430 --> 00:35:55,530
scanning and stop actually reading so

00:35:51,090 --> 00:35:57,760
yeah it looks good merge it do it

00:35:55,530 --> 00:35:59,380
whereas if it's ten lines people

00:35:57,760 --> 00:36:02,170
actually start looking line by line and

00:35:59,380 --> 00:36:04,390
will actually find things so there's a

00:36:02,170 --> 00:36:10,750
better way I think and that is fair

00:36:04,390 --> 00:36:14,320
programming okay maybe not like this but

00:36:10,750 --> 00:36:18,190
pair programming is a very very useful

00:36:14,320 --> 00:36:19,780
way of collaborating on code on well not

00:36:18,190 --> 00:36:22,840
just on code but on on software

00:36:19,780 --> 00:36:25,390
development because it leads you it

00:36:22,840 --> 00:36:27,640
allows you to do a continuous and inline

00:36:25,390 --> 00:36:30,100
code review you're working together

00:36:27,640 --> 00:36:31,420
you're talking about code you're talking

00:36:30,100 --> 00:36:33,190
about your system you're talking about

00:36:31,420 --> 00:36:35,770
everything and you're doing it

00:36:33,190 --> 00:36:37,750
continuously and in line there's no a

00:36:35,770 --> 00:36:38,920
synchronicity there's no context

00:36:37,750 --> 00:36:40,510
switching because you're both in the

00:36:38,920 --> 00:36:43,810
same context there's knowledge sharing

00:36:40,510 --> 00:36:46,300
all those beautiful things it does tire

00:36:43,810 --> 00:36:48,040
out people not everybody is comfortable

00:36:46,300 --> 00:36:49,720
with pair programming but it can be

00:36:48,040 --> 00:36:54,550
taught maybe not for eight hours

00:36:49,720 --> 00:36:57,340
straight but it is a very useful tool in

00:36:54,550 --> 00:36:59,740
the box mob programming is another thing

00:36:57,340 --> 00:37:03,010
that's starting to gain popularity where

00:36:59,740 --> 00:37:06,160
basically we have a whole team and one

00:37:03,010 --> 00:37:07,720
system one computer and somebody's doing

00:37:06,160 --> 00:37:11,440
the typing and the rest of the team is

00:37:07,720 --> 00:37:12,910
yelling at them now that's not what

00:37:11,440 --> 00:37:15,340
happens or that's not what you want

00:37:12,910 --> 00:37:17,320
happen I would say but the entire team

00:37:15,340 --> 00:37:20,590
collaborates on a feature on a thing on

00:37:17,320 --> 00:37:23,170
a fix and there's you know sometimes

00:37:20,590 --> 00:37:25,180
they break away to whiteboard and and

00:37:23,170 --> 00:37:28,150
collaborate on that and there's all this

00:37:25,180 --> 00:37:29,800
energy and people rotate in and out

00:37:28,150 --> 00:37:31,390
because they have a meeting or they need

00:37:29,800 --> 00:37:34,490
to bring their kids school or something

00:37:31,390 --> 00:37:37,040
but it's the entire team is focused and

00:37:34,490 --> 00:37:39,260
involved and the quality is markedly

00:37:37,040 --> 00:37:44,000
better than doing things on your own for

00:37:39,260 --> 00:37:46,100
fire programming and ma programming now

00:37:44,000 --> 00:37:47,750
let's take a little bit of a look at

00:37:46,100 --> 00:37:49,760
pipelines this is what continuous

00:37:47,750 --> 00:37:52,910
delivery is all about a pipeline to

00:37:49,760 --> 00:37:55,340
deliver value from the left to the right

00:37:52,910 --> 00:37:58,340
and the right meaning the user and the

00:37:55,340 --> 00:38:01,970
left meaning us pipelines should be

00:37:58,340 --> 00:38:03,740
automated as much as possible if it's

00:38:01,970 --> 00:38:05,869
dirty dull or dangerous you need to

00:38:03,740 --> 00:38:07,760
automate it luckily we're typically not

00:38:05,869 --> 00:38:09,650
into dirty or dangerous business but the

00:38:07,760 --> 00:38:11,540
dull business well I've been there I

00:38:09,650 --> 00:38:14,690
don't know about you but I've been so I

00:38:11,540 --> 00:38:17,540
tend to automate whatever I can to allow

00:38:14,690 --> 00:38:19,730
time for things that actually matter for

00:38:17,540 --> 00:38:23,330
things that really require human insight

00:38:19,730 --> 00:38:25,610
and decisions taking a look at a sample

00:38:23,330 --> 00:38:27,580
pipeline which starts from the left by

00:38:25,610 --> 00:38:30,770
checking out code compiling the code

00:38:27,580 --> 00:38:33,460
testing making a package of it you know

00:38:30,770 --> 00:38:36,350
something of an artifact and then

00:38:33,460 --> 00:38:39,109
deploying that to acceptance verifying

00:38:36,350 --> 00:38:40,910
it automatically deploying it to

00:38:39,109 --> 00:38:44,600
production and again automatically

00:38:40,910 --> 00:38:46,760
verifying it over there an important

00:38:44,600 --> 00:38:50,090
part of a pipeline any pipeline is

00:38:46,760 --> 00:38:52,490
testing and like everything in the

00:38:50,090 --> 00:38:54,770
continuous delivery sweer we do it

00:38:52,490 --> 00:38:57,800
continuously we continuously test our

00:38:54,770 --> 00:39:00,800
things and we can do that for example in

00:38:57,800 --> 00:39:05,359
this way if you look at the testing

00:39:00,800 --> 00:39:07,160
pyramid we have a number of potential

00:39:05,359 --> 00:39:09,050
testing layers here depending on your

00:39:07,160 --> 00:39:11,450
product you may not use all of them but

00:39:09,050 --> 00:39:15,880
I sincerely hope you have you have unit

00:39:11,450 --> 00:39:18,020
tests unit tests are cheap and fast

00:39:15,880 --> 00:39:20,690
that's why they're at the bottom of the

00:39:18,020 --> 00:39:22,640
pyramid integration tests which actually

00:39:20,690 --> 00:39:25,790
link to get a components and test

00:39:22,640 --> 00:39:27,619
components they are slower and more

00:39:25,790 --> 00:39:30,080
costly to maintain so they're less of

00:39:27,619 --> 00:39:34,010
them then we have acceptance tests your

00:39:30,080 --> 00:39:36,500
ABI hat or PHP spec for example which

00:39:34,010 --> 00:39:39,230
again are slower and more costly to

00:39:36,500 --> 00:39:41,330
maintain and at the top of the pyramid

00:39:39,230 --> 00:39:45,440
our end-to-end tests you know selenium

00:39:41,330 --> 00:39:48,410
click things stuff like that which are

00:39:45,440 --> 00:39:51,110
often brittle expensive

00:39:48,410 --> 00:39:53,990
to run because you require a browser and

00:39:51,110 --> 00:39:56,620
the whole stack to be deployed so we

00:39:53,990 --> 00:39:59,030
have only a few of them not too much

00:39:56,620 --> 00:40:01,700
some companies have the pyramid turned

00:39:59,030 --> 00:40:03,320
upside down so we have a whole bunch of

00:40:01,700 --> 00:40:06,500
end-to-end tests and maybe one or two

00:40:03,320 --> 00:40:09,080
unit tests but the unit tests are the

00:40:06,500 --> 00:40:11,480
cheapest and the fastest to run so it's

00:40:09,080 --> 00:40:13,820
important if you can get away with it to

00:40:11,480 --> 00:40:16,070
push as much of your testing down in the

00:40:13,820 --> 00:40:19,750
pyramid where it is cheaper to maintain

00:40:16,070 --> 00:40:22,480
and faster to run but also don't forget

00:40:19,750 --> 00:40:26,350
exploratory testing and user feedback

00:40:22,480 --> 00:40:28,730
essential parts of any system those can

00:40:26,350 --> 00:40:31,190
function as your early warning your

00:40:28,730 --> 00:40:32,950
tripwire there's depending on the

00:40:31,190 --> 00:40:35,660
project or product you're working on

00:40:32,950 --> 00:40:37,760
there may be a group of people that are

00:40:35,660 --> 00:40:40,250
very interested in the beta program for

00:40:37,760 --> 00:40:42,080
example you know getting to see features

00:40:40,250 --> 00:40:44,240
that are half-finished and in getting

00:40:42,080 --> 00:40:46,850
some feedback on that those people are

00:40:44,240 --> 00:40:48,110
your champions and do involve them in

00:40:46,850 --> 00:40:49,670
your system because they will actively

00:40:48,110 --> 00:40:53,030
let you know when you've missed

00:40:49,670 --> 00:40:56,450
something and on the right is monitoring

00:40:53,030 --> 00:40:58,820
and alerting no testing system is any is

00:40:56,450 --> 00:41:03,770
complete you cannot test for everything

00:40:58,820 --> 00:41:05,690
ever so use your monitoring and alerting

00:41:03,770 --> 00:41:09,680
to alert you to conditions that are

00:41:05,690 --> 00:41:13,190
abnormal so if your error rate starts to

00:41:09,680 --> 00:41:15,290
go up an hour after your deployment then

00:41:13,190 --> 00:41:20,060
you should alert on that and that is

00:41:15,290 --> 00:41:22,610
part of your testing pyramid as well but

00:41:20,060 --> 00:41:25,340
if tests are good enough then they are

00:41:22,610 --> 00:41:27,320
good enough because again we cannot test

00:41:25,340 --> 00:41:30,590
everything nothing is ever watertight

00:41:27,320 --> 00:41:33,070
and no test issue detects or no test

00:41:30,590 --> 00:41:38,510
suite I should say detects every issue

00:41:33,070 --> 00:41:40,880
so this is why pipeline speed is key

00:41:38,510 --> 00:41:42,860
essentially right we're looking at

00:41:40,880 --> 00:41:45,200
something that delivers our value into

00:41:42,860 --> 00:41:47,570
production fast enough and that we get

00:41:45,200 --> 00:41:49,550
feedback from it fast enough so if we

00:41:47,570 --> 00:41:52,790
have a testing suite that takes three

00:41:49,550 --> 00:41:55,640
hours to run and we made a commit and

00:41:52,790 --> 00:41:57,890
after three hours that it breaks then

00:41:55,640 --> 00:41:59,300
the only human response to that is we're

00:41:57,890 --> 00:42:02,270
going to bypass the testing suite

00:41:59,300 --> 00:42:05,360
because it doesn't work it's too slow

00:42:02,270 --> 00:42:07,310
and I now have five commits lined up

00:42:05,360 --> 00:42:11,500
that may or may not have fixed the test

00:42:07,310 --> 00:42:14,810
that I just saw a break so and maybe

00:42:11,500 --> 00:42:17,530
another test may fail so keep it as fast

00:42:14,810 --> 00:42:20,150
as possible preferably within minutes

00:42:17,530 --> 00:42:22,550
my personal goal is to have a pipeline

00:42:20,150 --> 00:42:25,310
that deploys into production from the

00:42:22,550 --> 00:42:28,400
check-in to github to the last deploy to

00:42:25,310 --> 00:42:31,190
production not more than 15 minutes that

00:42:28,400 --> 00:42:35,900
gives you enough of a window and enough

00:42:31,190 --> 00:42:37,490
of feedback to react let's take a little

00:42:35,900 --> 00:42:42,110
bit of a look at deployments before I

00:42:37,490 --> 00:42:43,970
send you all away the deployment

00:42:42,110 --> 00:42:47,240
strategy I use a lot is the rolling

00:42:43,970 --> 00:42:49,100
update I was looking at interesting

00:42:47,240 --> 00:42:50,630
pictures to associate with rolling

00:42:49,100 --> 00:42:53,480
update I think this is the Gloucester

00:42:50,630 --> 00:42:56,360
cheese roll or something like that where

00:42:53,480 --> 00:42:58,580
people actually start running after a

00:42:56,360 --> 00:43:01,490
rolling block of cheese which is thrown

00:42:58,580 --> 00:43:07,119
down a hill and yes there are injuries I

00:43:01,490 --> 00:43:09,650
read you Brits are crazy

00:43:07,119 --> 00:43:11,690
anyway the rolling update so let's

00:43:09,650 --> 00:43:13,369
assume we have the internet and there's

00:43:11,690 --> 00:43:16,730
a load balancer between the internet and

00:43:13,369 --> 00:43:19,310
and in our system and connected to the

00:43:16,730 --> 00:43:22,520
load balancer our is our application or

00:43:19,310 --> 00:43:25,430
one of our services and we have multiple

00:43:22,520 --> 00:43:27,770
instance of instances of them because we

00:43:25,430 --> 00:43:30,560
want to be highly available let's assume

00:43:27,770 --> 00:43:32,240
that we do so we have three of those now

00:43:30,560 --> 00:43:34,880
what we do with a rolling update is we

00:43:32,240 --> 00:43:37,460
spin up version 1.1 of our service and

00:43:34,880 --> 00:43:39,800
it's not added into the load balancer

00:43:37,460 --> 00:43:41,570
yet but we spin it up and we wait for it

00:43:39,800 --> 00:43:44,060
to check out and do some automated

00:43:41,570 --> 00:43:46,730
checks on it etc and once that is all

00:43:44,060 --> 00:43:48,740
okay we add it into the load balancer by

00:43:46,730 --> 00:43:52,220
swapping it out with one of the existing

00:43:48,740 --> 00:43:54,050
services so it's now in a position to

00:43:52,220 --> 00:43:56,510
actually take traffic and it starts

00:43:54,050 --> 00:43:58,550
working now none of the users connected

00:43:56,510 --> 00:44:00,770
to your load balancer are if this all

00:43:58,550 --> 00:44:03,770
goes well aware that this is happening

00:44:00,770 --> 00:44:06,560
they only see the system which is still

00:44:03,770 --> 00:44:09,920
alive which is still processing requests

00:44:06,560 --> 00:44:13,400
and still available and we start doing

00:44:09,920 --> 00:44:16,279
that for the next instance of the 1.0

00:44:13,400 --> 00:44:18,559
service and then we do it for the

00:44:16,279 --> 00:44:20,779
at which point we've replaced all our

00:44:18,559 --> 00:44:22,849
instances of the existing service with

00:44:20,779 --> 00:44:25,039
the new version and we can throw the

00:44:22,849 --> 00:44:27,469
last one away nobody ever noticed this

00:44:25,039 --> 00:44:30,769
was happening maybe some feature got

00:44:27,469 --> 00:44:33,289
added but everything worked as expected

00:44:30,769 --> 00:44:35,779
so zero downtime deployment which is a

00:44:33,289 --> 00:44:37,430
key thing if you do a number of

00:44:35,779 --> 00:44:39,079
deployments per day for example you

00:44:37,430 --> 00:44:43,449
cannot go down for every every

00:44:39,079 --> 00:44:46,759
deployment that would be a waste so

00:44:43,449 --> 00:44:49,880
taking all those things together we come

00:44:46,759 --> 00:44:51,949
into the pipeline and then ideally we

00:44:49,880 --> 00:44:54,079
write that down as code as well just as

00:44:51,949 --> 00:44:55,759
much as the testing code and the

00:44:54,079 --> 00:44:59,299
production code that we have we write

00:44:55,759 --> 00:45:01,640
that as code as well and you have your

00:44:59,299 --> 00:45:05,599
Jenkins you have your git lab which was

00:45:01,640 --> 00:45:07,549
presented earlier today both do roughly

00:45:05,599 --> 00:45:10,160
the same thing even though there are

00:45:07,549 --> 00:45:12,769
nuances and and people like that one

00:45:10,160 --> 00:45:14,989
more than the other maybe but our

00:45:12,769 --> 00:45:18,529
pipeline is written this code written as

00:45:14,989 --> 00:45:20,719
stages that do something and that if the

00:45:18,529 --> 00:45:22,910
stage passes we proceed in the next

00:45:20,719 --> 00:45:27,469
stage and if the stage fails we get

00:45:22,910 --> 00:45:29,390
feedback a simple pipeline this is in

00:45:27,469 --> 00:45:31,699
Jenkins this is off of a client project

00:45:29,390 --> 00:45:33,729
last year it could look like this where

00:45:31,699 --> 00:45:36,410
we have a flow flow from left to right

00:45:33,729 --> 00:45:40,009
actually delivering things into

00:45:36,410 --> 00:45:42,559
production and this pipeline took 20

00:45:40,009 --> 00:45:46,119
minutes and by I think by now they've

00:45:42,559 --> 00:45:48,619
improved that to 1012 minutes from

00:45:46,119 --> 00:45:51,109
check-in or the start of the pipeline to

00:45:48,619 --> 00:45:54,109
deploy into production now if the

00:45:51,109 --> 00:45:56,660
pipeline breaks if something fails then

00:45:54,109 --> 00:45:58,190
you want immediate feedback and there's

00:45:56,660 --> 00:46:01,190
a whole bunch of systems to do that

00:45:58,190 --> 00:46:04,279
feedback i've tried the USB powered

00:46:01,190 --> 00:46:07,969
rocket launcher once which is cool that

00:46:04,279 --> 00:46:11,209
shoots Nerf darts we've also tried the

00:46:07,969 --> 00:46:12,890
LED siren once which basically honks at

00:46:11,209 --> 00:46:15,199
you and starts flashing lights whenever

00:46:12,890 --> 00:46:17,119
the build breaks whatever works for your

00:46:15,199 --> 00:46:20,449
team whether it's a slack update or a

00:46:17,119 --> 00:46:23,479
lava lamp that starts or a big monitor

00:46:20,449 --> 00:46:26,839
that shows you as long as you are aware

00:46:23,479 --> 00:46:28,549
or alerted as a team to deal with the

00:46:26,839 --> 00:46:29,839
situation because the pipeline is what

00:46:28,549 --> 00:46:32,049
deploys your production your

00:46:29,839 --> 00:46:34,910
software to production so if it fails

00:46:32,049 --> 00:46:38,420
well then you obviously need to deal

00:46:34,910 --> 00:46:41,349
with that and fix that so this was talk

00:46:38,420 --> 00:46:45,339
about deploying on a Friday on a Friday

00:46:41,349 --> 00:46:48,789
and by now I think you can do it too

00:46:45,339 --> 00:46:48,789

YouTube URL: https://www.youtube.com/watch?v=clbnkvJb_mM


