Title: Does Your Code Measure Up? - Adam Culp - PHP UK Conference 2019
Publication date: 2019-03-22
Playlist: PHP UK Conference 2019
Description: 
	After days, weeks, or months of coding many developers don’t know how to gauge the quality of their code. I’ll introduce tools to grade, benchmark, and analyze PHP code in an automated fashion allowing developers to write better quality software. Then I’ll explain key metrics to help understand what may need to be refactored, and use code smells to point out bugs before end-users discover them. Attendees will see how to use these tools, know where to find them, and be able to implement them in their own workflows.
Captions: 
	00:00:03,589 --> 00:00:08,250
thanks for coming this talk is does your

00:00:06,450 --> 00:00:10,320
code measure up my name is Adam Koch you

00:00:08,250 --> 00:00:12,570
can find me on Twitter at Adam Culp my

00:00:10,320 --> 00:00:14,160
name is my is my handle on Twitter so

00:00:12,570 --> 00:00:16,859
please feel free if you have any

00:00:14,160 --> 00:00:18,840
questions or any comments please feel

00:00:16,859 --> 00:00:20,130
free to put them out there I don't know

00:00:18,840 --> 00:00:22,199
that we'll have question time for

00:00:20,130 --> 00:00:24,570
questions at the end we'll see how this

00:00:22,199 --> 00:00:27,330
goes depends on how many stories I get

00:00:24,570 --> 00:00:29,250
caught up talking about because as many

00:00:27,330 --> 00:00:30,750
people know getting me to talk is not

00:00:29,250 --> 00:00:33,210
the problem getting me to shut up is

00:00:30,750 --> 00:00:36,210
usually a problem so so that being said

00:00:33,210 --> 00:00:37,649
let's go ahead and get started a little

00:00:36,210 --> 00:00:41,160
bit about me for those of you who don't

00:00:37,649 --> 00:00:43,829
know me I thought that would click no

00:00:41,160 --> 00:00:46,500
that's okay a little bit about me I'm an

00:00:43,829 --> 00:00:48,780
open source contributor and I'm also a

00:00:46,500 --> 00:00:50,879
sort of a PHP certified engineer and a

00:00:48,780 --> 00:00:52,440
voting member on the PHP fig I'm the

00:00:50,879 --> 00:00:54,059
host of Beach casts if you haven't

00:00:52,440 --> 00:00:56,969
checked out Beach cast please check it

00:00:54,059 --> 00:00:59,579
out on YouTube I do a lot of videos out

00:00:56,969 --> 00:01:01,710
there on PHP and it's live coding so I'm

00:00:59,579 --> 00:01:03,210
actually live coding on the screen I try

00:01:01,710 --> 00:01:05,400
to keep it short instead of getting too

00:01:03,210 --> 00:01:07,590
long and long-winded with it but please

00:01:05,400 --> 00:01:10,140
check that out I organized the user

00:01:07,590 --> 00:01:12,720
group in South Florida and in the States

00:01:10,140 --> 00:01:13,950
so if you're ever in South Florida come

00:01:12,720 --> 00:01:15,960
out and check us out and I also

00:01:13,950 --> 00:01:18,320
organized sunshine PHP which is where

00:01:15,960 --> 00:01:20,850
this shirt came from just two weeks ago

00:01:18,320 --> 00:01:22,650
so so come on down and see us there are

00:01:20,850 --> 00:01:25,470
a lot of worse places you can be in

00:01:22,650 --> 00:01:27,360
February than Miami so so come down to

00:01:25,470 --> 00:01:29,729
Miami and check us out I'm also a

00:01:27,360 --> 00:01:32,460
long-distance or ultra runner and photo

00:01:29,729 --> 00:01:35,490
enthusiast and a judo a black belt in

00:01:32,460 --> 00:01:37,200
judo so you know if you see those help

00:01:35,490 --> 00:01:42,150
want to ads where they're advertising

00:01:37,200 --> 00:01:44,220
for the PHP ninja that's me now I bring

00:01:42,150 --> 00:01:45,720
up a lot of these things because you

00:01:44,220 --> 00:01:48,210
know most of my hobbies most of the

00:01:45,720 --> 00:01:51,509
things I do are iterative and I'm a huge

00:01:48,210 --> 00:01:54,149
fan of iteration whether it's long

00:01:51,509 --> 00:01:55,829
distance running judo development you

00:01:54,149 --> 00:01:58,110
know everybody knows that judo is

00:01:55,829 --> 00:01:59,369
martial arts or a lifelong study it's

00:01:58,110 --> 00:02:00,840
something that you practice that

00:01:59,369 --> 00:02:02,240
throughout your lifetime and you get

00:02:00,840 --> 00:02:04,590
better at it

00:02:02,240 --> 00:02:05,159
long-distance running is much the same

00:02:04,590 --> 00:02:06,630
thing

00:02:05,159 --> 00:02:08,670
how many long-distance runners we have

00:02:06,630 --> 00:02:11,819
in here any long distance runners we've

00:02:08,670 --> 00:02:12,810
got a few all right cool so I'm an

00:02:11,819 --> 00:02:14,310
ultra-marathoner

00:02:12,810 --> 00:02:18,030
and what that means is a

00:02:14,310 --> 00:02:21,510
Don is 26.2 miles ultra means more than

00:02:18,030 --> 00:02:24,330
so I run marathons longer than 26.2

00:02:21,510 --> 00:02:27,150
miles I've gotten up to 76 miles so far

00:02:24,330 --> 00:02:29,160
my time on that was about 14 hours I

00:02:27,150 --> 00:02:30,750
haven't quite got to a hundred miles yet

00:02:29,160 --> 00:02:33,720
I would like to reach a hundred miles I

00:02:30,750 --> 00:02:37,080
just haven't got there 76 is as far as I

00:02:33,720 --> 00:02:38,670
was able to get evading project managers

00:02:37,080 --> 00:02:41,730
that's iterative we get better at that

00:02:38,670 --> 00:02:43,380
as we practice it and of course code

00:02:41,730 --> 00:02:45,600
quality which is what this talk is about

00:02:43,380 --> 00:02:47,760
is also iterative it's something you

00:02:45,600 --> 00:02:49,920
should do on an ongoing basis you should

00:02:47,760 --> 00:02:51,630
constantly be measuring your code and

00:02:49,920 --> 00:02:53,459
measuring your code comes in many

00:02:51,630 --> 00:02:56,280
different shapes and sizes it could be

00:02:53,459 --> 00:02:58,200
tests it could be code quality as far as

00:02:56,280 --> 00:03:01,080
static analysis things like that it

00:02:58,200 --> 00:03:03,930
could be you know as far as performance

00:03:01,080 --> 00:03:06,540
it could be lots of things now if your

00:03:03,930 --> 00:03:07,860
code if you find that your code quality

00:03:06,540 --> 00:03:09,150
measurements or something along this

00:03:07,860 --> 00:03:12,000
line you're probably doing it a little

00:03:09,150 --> 00:03:13,110
bit wrong you you want to measure things

00:03:12,000 --> 00:03:15,150
and make it a little bit more

00:03:13,110 --> 00:03:17,430
quantifiable you really want to have

00:03:15,150 --> 00:03:19,860
some good data behind it and be able to

00:03:17,430 --> 00:03:23,700
quantify the quality of your code and

00:03:19,860 --> 00:03:25,530
how you can improve that over time so so

00:03:23,700 --> 00:03:27,870
why measure the code there are lots of

00:03:25,530 --> 00:03:29,850
reasons why we want to measure code one

00:03:27,870 --> 00:03:32,190
of those is to be able to highlight bugs

00:03:29,850 --> 00:03:34,170
so as you're doing code quality

00:03:32,190 --> 00:03:36,120
measurements you can highlight the bugs

00:03:34,170 --> 00:03:38,010
in your code or highlight potential

00:03:36,120 --> 00:03:41,010
things that would indicate there might

00:03:38,010 --> 00:03:42,870
be a bug right hopefully you're able to

00:03:41,010 --> 00:03:45,329
highlight the bugs before they actually

00:03:42,870 --> 00:03:48,150
surface and that's where code quality

00:03:45,329 --> 00:03:50,640
measure measurements come in is enabling

00:03:48,150 --> 00:03:53,459
us to do that you can also improve the

00:03:50,640 --> 00:03:55,769
quality of your code which which has a

00:03:53,459 --> 00:03:58,230
lot of different side effects right so

00:03:55,769 --> 00:04:00,480
one thing is we as developers spend a

00:03:58,230 --> 00:04:03,720
lot more time reading code than we do

00:04:00,480 --> 00:04:06,269
creating new code on average I would say

00:04:03,720 --> 00:04:09,510
most developers probably read code about

00:04:06,269 --> 00:04:11,370
60 percent of their time the other 40

00:04:09,510 --> 00:04:14,220
maybe even 30 % of the time is actually

00:04:11,370 --> 00:04:16,320
spent creating new code so we spend a

00:04:14,220 --> 00:04:18,090
lot of time reading it it just makes

00:04:16,320 --> 00:04:19,979
sense to make it cleaner doesn't it if

00:04:18,090 --> 00:04:21,570
you're if it's cleaner if it's more

00:04:19,979 --> 00:04:23,490
structured if you know what you're

00:04:21,570 --> 00:04:25,229
looking at and you're able to to

00:04:23,490 --> 00:04:27,479
structurally look at it and figure

00:04:25,229 --> 00:04:28,220
things out more quickly then hopefully

00:04:27,479 --> 00:04:31,100
we can read

00:04:28,220 --> 00:04:33,800
our code a little bit less so that's why

00:04:31,100 --> 00:04:36,050
that's why measuring comes it was so

00:04:33,800 --> 00:04:37,520
important to be able to measure the

00:04:36,050 --> 00:04:40,970
quality of the code and make sure that

00:04:37,520 --> 00:04:43,580
it's clean it also adds up to easier

00:04:40,970 --> 00:04:45,260
onboarding if you have if you have code

00:04:43,580 --> 00:04:47,570
that is cleaner it's easier for people

00:04:45,260 --> 00:04:50,500
to read it and they're able to read it

00:04:47,570 --> 00:04:53,120
faster on boarding becomes much less

00:04:50,500 --> 00:04:55,460
we've all started with the company where

00:04:53,120 --> 00:04:56,960
we got it put into a new codebase and we

00:04:55,460 --> 00:04:58,100
spend the first two weeks just getting

00:04:56,960 --> 00:05:00,230
our development environment up and

00:04:58,100 --> 00:05:01,910
running right that is not the way it

00:05:00,230 --> 00:05:05,150
should happen but yet it does seem to be

00:05:01,910 --> 00:05:06,620
quite normal you know if you have a good

00:05:05,150 --> 00:05:08,780
clean codebase and if the quality

00:05:06,620 --> 00:05:11,740
measurement has been put in place and

00:05:08,780 --> 00:05:14,030
things conventions are being used you

00:05:11,740 --> 00:05:15,920
can get to a point where maybe you only

00:05:14,030 --> 00:05:17,060
have one or two days of onboarding you

00:05:15,920 --> 00:05:18,580
know setting up the development

00:05:17,060 --> 00:05:22,070
environment and getting up and running

00:05:18,580 --> 00:05:24,350
oftentimes I I consult that's my day job

00:05:22,070 --> 00:05:26,090
I consult with companies so I spend a

00:05:24,350 --> 00:05:28,430
lot of time with new companies pretty

00:05:26,090 --> 00:05:31,700
much every one to two weeks I am working

00:05:28,430 --> 00:05:34,220
on a different code base so doing that

00:05:31,700 --> 00:05:35,720
it really is much even much more

00:05:34,220 --> 00:05:37,310
important right because I don't have a

00:05:35,720 --> 00:05:39,200
week or two to get up and running I have

00:05:37,310 --> 00:05:40,700
to get up and running in hours when I

00:05:39,200 --> 00:05:42,650
hit that when I hit the ground at a

00:05:40,700 --> 00:05:44,060
company and I'm consulting with them I

00:05:42,650 --> 00:05:45,770
have to be able to in matter hours I

00:05:44,060 --> 00:05:48,140
need to get up and running otherwise

00:05:45,770 --> 00:05:50,419
they're wasting money by me being on

00:05:48,140 --> 00:05:53,180
boarded right so if you have good code

00:05:50,419 --> 00:05:54,890
quality it makes onboarding much easier

00:05:53,180 --> 00:05:57,620
then I'm able to hit the ground running

00:05:54,890 --> 00:05:59,750
as a consultant now more often than not

00:05:57,620 --> 00:06:02,210
my job as a consultant is to to

00:05:59,750 --> 00:06:03,229
highlight that issue for them and help

00:06:02,210 --> 00:06:05,300
them make it better

00:06:03,229 --> 00:06:07,430
but but that being said if the code is

00:06:05,300 --> 00:06:10,280
cleaner I'm able to get on board it much

00:06:07,430 --> 00:06:12,010
faster and it makes it easier for that

00:06:10,280 --> 00:06:14,479
also it makes the code more testable

00:06:12,010 --> 00:06:17,479
this is another reason why we want to

00:06:14,479 --> 00:06:21,260
measure is because if the code is if if

00:06:17,479 --> 00:06:23,120
we're measuring excuse me

00:06:21,260 --> 00:06:24,860
if we're measuring in the code is is

00:06:23,120 --> 00:06:27,650
cleaner than chances are it's more

00:06:24,860 --> 00:06:30,169
testable as well how many people don't

00:06:27,650 --> 00:06:31,729
have unit tests I asked that in Reverse

00:06:30,169 --> 00:06:33,380
because more people probably don't have

00:06:31,729 --> 00:06:35,720
unit tests endued nobody's willing to

00:06:33,380 --> 00:06:38,000
raise their hand so all right but I know

00:06:35,720 --> 00:06:39,420
there's a lot of you out there and the

00:06:38,000 --> 00:06:41,610
reason we don't have unit tests

00:06:39,420 --> 00:06:43,410
because it's not easy right it's not

00:06:41,610 --> 00:06:45,540
easy to have unit testing chances are

00:06:43,410 --> 00:06:48,000
because the code is not not real clean

00:06:45,540 --> 00:06:50,430
the the code measurement probably hasn't

00:06:48,000 --> 00:06:52,860
been put in place so so it makes it

00:06:50,430 --> 00:06:55,170
really difficult to write unit tests if

00:06:52,860 --> 00:06:56,910
if we're if we're measuring and we're

00:06:55,170 --> 00:06:58,500
checking out the code on a regular basis

00:06:56,910 --> 00:07:01,440
it makes the the code more testable

00:06:58,500 --> 00:07:04,230
easier to put the tests out there also

00:07:01,440 --> 00:07:05,700
adds up to satisfied customers if we're

00:07:04,230 --> 00:07:08,100
measuring the code quality we're

00:07:05,700 --> 00:07:10,320
improving the code we can have much

00:07:08,100 --> 00:07:12,450
happier customers because we're able to

00:07:10,320 --> 00:07:14,310
put out new features faster we're

00:07:12,450 --> 00:07:16,770
spending a lot less time with broken

00:07:14,310 --> 00:07:19,680
code a lot less time you know trying to

00:07:16,770 --> 00:07:22,470
fix things and more time producing new

00:07:19,680 --> 00:07:24,630
things also it's a matter of personal

00:07:22,470 --> 00:07:26,880
pride we can be a little bit happier

00:07:24,630 --> 00:07:28,650
about our code you know if if you're

00:07:26,880 --> 00:07:30,270
working on the same codebase and it's an

00:07:28,650 --> 00:07:31,590
ugly codebase and you're working on it

00:07:30,270 --> 00:07:32,880
day after a day you just don't really

00:07:31,590 --> 00:07:34,650
have a lot of pride with it

00:07:32,880 --> 00:07:38,130
companies tend to have higher turnover

00:07:34,650 --> 00:07:39,510
if the code is ugly versus companies

00:07:38,130 --> 00:07:42,450
that have a nice clean codebase and

00:07:39,510 --> 00:07:44,640
developers like working on it right and

00:07:42,450 --> 00:07:46,890
ultimately it can also translate into

00:07:44,640 --> 00:07:49,770
higher income if you're doing a better

00:07:46,890 --> 00:07:52,140
job coding you're able to create cleaner

00:07:49,770 --> 00:07:54,570
code chances are you can demand a little

00:07:52,140 --> 00:07:56,580
bit higher salary now that might not be

00:07:54,570 --> 00:07:56,940
it might be different from one place to

00:07:56,580 --> 00:08:00,090
another

00:07:56,940 --> 00:08:03,270
but generally speaking if you have a you

00:08:00,090 --> 00:08:05,280
know James titcombe in a talk yesterday

00:08:03,270 --> 00:08:07,410
he used the example where there was a

00:08:05,280 --> 00:08:09,950
tweet from Brandon Savage where you know

00:08:07,410 --> 00:08:12,480
if I have a if I have a developer for

00:08:09,950 --> 00:08:15,090
$25 an hour and I'm paying him to do

00:08:12,480 --> 00:08:16,710
something for for many months versus

00:08:15,090 --> 00:08:19,350
somebody who's really good at it and

00:08:16,710 --> 00:08:20,850
able to do it much faster that person's

00:08:19,350 --> 00:08:22,470
able to make more money overall the

00:08:20,850 --> 00:08:24,750
company is actually spending less money

00:08:22,470 --> 00:08:26,790
with a higher paid person because

00:08:24,750 --> 00:08:28,860
they're getting it done faster so

00:08:26,790 --> 00:08:31,620
anyways it all plays into it now along

00:08:28,860 --> 00:08:34,350
those lines though not all of us know

00:08:31,620 --> 00:08:37,470
how to create clean code not all of us

00:08:34,350 --> 00:08:41,040
know how to create you know great

00:08:37,470 --> 00:08:43,260
software usually much like much like

00:08:41,040 --> 00:08:45,480
much like listening to music right if we

00:08:43,260 --> 00:08:47,100
listen to music on the radio or or

00:08:45,480 --> 00:08:49,320
through some streaming service

00:08:47,100 --> 00:08:51,420
what-have-you and we hear a bad song we

00:08:49,320 --> 00:08:52,740
know a bad song right you listen to it

00:08:51,420 --> 00:08:54,780
you're like oh that's not good

00:08:52,740 --> 00:08:57,240
I don't want to listen to it again but

00:08:54,780 --> 00:09:00,120
we don't necessarily know how to write a

00:08:57,240 --> 00:09:01,800
good song right so that's where that's

00:09:00,120 --> 00:09:04,200
where we need to continue to measure

00:09:01,800 --> 00:09:06,690
continue to look at the code and through

00:09:04,200 --> 00:09:08,220
that you know we can we can you know

00:09:06,690 --> 00:09:10,440
write better software because not

00:09:08,220 --> 00:09:12,030
everybody knows how to create good clean

00:09:10,440 --> 00:09:14,640
software from the beginning but through

00:09:12,030 --> 00:09:18,390
proper measurement through getting this

00:09:14,640 --> 00:09:20,400
analysis done then we're able to to you

00:09:18,390 --> 00:09:23,160
know teach ourselves how to create

00:09:20,400 --> 00:09:26,100
something better and we do that through

00:09:23,160 --> 00:09:27,810
code smells everybody familiar with code

00:09:26,100 --> 00:09:30,120
smells does anybody not know what code

00:09:27,810 --> 00:09:31,860
smells are you can be honest raise your

00:09:30,120 --> 00:09:33,990
hand nobody's raising their hand you

00:09:31,860 --> 00:09:35,310
guys have way too much fear here alright

00:09:33,990 --> 00:09:38,610
because I know there's a lot of you that

00:09:35,310 --> 00:09:40,320
don't so the thing is code smells what

00:09:38,610 --> 00:09:42,660
we say about Co smells is it's where

00:09:40,320 --> 00:09:43,290
it's indicates there might be something

00:09:42,660 --> 00:09:45,900
wrong

00:09:43,290 --> 00:09:47,370
right it's not spoilage if it spoils

00:09:45,900 --> 00:09:49,620
then it's not just smell right it's

00:09:47,370 --> 00:09:51,930
actually spoiled but if it smells that

00:09:49,620 --> 00:09:54,480
means there may be something now I

00:09:51,930 --> 00:09:56,100
highlight a lot of things as far as code

00:09:54,480 --> 00:09:58,740
smells and it doesn't mean that these

00:09:56,100 --> 00:10:01,410
are bad practices it just means that

00:09:58,740 --> 00:10:04,440
they indicate there might be other

00:10:01,410 --> 00:10:05,970
issues underneath and that's what code

00:10:04,440 --> 00:10:08,370
smells are so code smells are not

00:10:05,970 --> 00:10:11,430
necessarily bad they just highlight that

00:10:08,370 --> 00:10:12,930
there might be things so some of the

00:10:11,430 --> 00:10:15,480
things we want to take a look at are

00:10:12,930 --> 00:10:17,910
like cyclomatic complexity cyclomatic

00:10:15,480 --> 00:10:19,290
complexity that's a that's a long word a

00:10:17,910 --> 00:10:21,090
lot of you probably know cyclomatic

00:10:19,290 --> 00:10:22,680
complexity from now I find that more and

00:10:21,090 --> 00:10:24,870
more people are learning it so

00:10:22,680 --> 00:10:27,090
cyclomatic complexity according to

00:10:24,870 --> 00:10:29,130
Wikipedia is the count of number of

00:10:27,090 --> 00:10:32,220
linearly independent paths through a

00:10:29,130 --> 00:10:34,170
source code it basically what it breaks

00:10:32,220 --> 00:10:37,260
down to is it's the decision points

00:10:34,170 --> 00:10:39,240
inside the code now typically we like to

00:10:37,260 --> 00:10:42,600
see within a function or a method we

00:10:39,240 --> 00:10:44,040
like to see 10 or less as far as the

00:10:42,600 --> 00:10:45,540
cyclomatic complexity and how that

00:10:44,040 --> 00:10:47,790
breaks down is something along this line

00:10:45,540 --> 00:10:50,040
where you have a function and then you

00:10:47,790 --> 00:10:52,260
have a couple if statements well each of

00:10:50,040 --> 00:10:54,990
those if statements that's a decision so

00:10:52,260 --> 00:10:56,790
your function of course is whenever you

00:10:54,990 --> 00:10:59,400
call a function that itself is a

00:10:56,790 --> 00:11:01,320
decision so you have a cyclomatic

00:10:59,400 --> 00:11:03,210
complexity of one just for the function

00:11:01,320 --> 00:11:05,390
and then you have two other if

00:11:03,210 --> 00:11:07,490
statements that's a cyclin

00:11:05,390 --> 00:11:09,530
complexity of three right so this

00:11:07,490 --> 00:11:11,180
function right here was just two if

00:11:09,530 --> 00:11:13,280
statements is the cyclomatic complexity

00:11:11,180 --> 00:11:14,240
of three the goal is you want to stay

00:11:13,280 --> 00:11:17,330
less than ten

00:11:14,240 --> 00:11:20,120
I personally set my goal much lower than

00:11:17,330 --> 00:11:21,830
that I like to be right around six I try

00:11:20,120 --> 00:11:25,010
to keep my cyclomatic complexity less

00:11:21,830 --> 00:11:26,570
than six but that being said you know

00:11:25,010 --> 00:11:29,330
cyclomatic complexity is a very

00:11:26,570 --> 00:11:31,880
important metric if you're cyclomatic

00:11:29,330 --> 00:11:34,250
complexity is high chances are your code

00:11:31,880 --> 00:11:37,280
is doing too much because a function

00:11:34,250 --> 00:11:39,290
after all should do one thing if your

00:11:37,280 --> 00:11:41,120
function is doing one thing how many

00:11:39,290 --> 00:11:43,310
lines of code do you truly need to do

00:11:41,120 --> 00:11:44,780
one thing and that's where that's where

00:11:43,310 --> 00:11:47,270
a method comes in I'll talk a little bit

00:11:44,780 --> 00:11:48,800
more about that in just a moment and

00:11:47,270 --> 00:11:51,880
then of course we have code duplication

00:11:48,800 --> 00:11:56,120
right duplicate code is also a smell

00:11:51,880 --> 00:11:58,160
there's so and by duplication I mean

00:11:56,120 --> 00:12:00,200
actually copying code from one place and

00:11:58,160 --> 00:12:02,090
pasting it in another place you might

00:12:00,200 --> 00:12:03,620
change a name a variable name or

00:12:02,090 --> 00:12:06,080
something like that but for the most

00:12:03,620 --> 00:12:08,630
part it is copying and pasting now with

00:12:06,080 --> 00:12:10,970
duplicate code we have what we call the

00:12:08,630 --> 00:12:13,070
rule of three is is generally a good

00:12:10,970 --> 00:12:14,690
rule of thumb and by the rule of three

00:12:13,070 --> 00:12:17,030
that means that if you copy and paste

00:12:14,690 --> 00:12:19,370
something one time it's probably okay

00:12:17,030 --> 00:12:20,990
now you have it in two places in a

00:12:19,370 --> 00:12:23,840
perfect world that's not a good thing

00:12:20,990 --> 00:12:25,820
but in most cases for everyday coding

00:12:23,840 --> 00:12:29,120
you're going to have duplication of some

00:12:25,820 --> 00:12:31,160
sort right so then in the second time if

00:12:29,120 --> 00:12:32,540
you copy and paste it a second time you

00:12:31,160 --> 00:12:34,100
kind of wince a little bit because now

00:12:32,540 --> 00:12:37,520
you've actually copied and pasted it

00:12:34,100 --> 00:12:39,140
twice but maybe that's okay maybe you

00:12:37,520 --> 00:12:42,320
don't have time to refactor it right now

00:12:39,140 --> 00:12:44,420
but the third time that you're copying

00:12:42,320 --> 00:12:46,460
and pasting code at that point you need

00:12:44,420 --> 00:12:49,220
to clean it up right this so the third

00:12:46,460 --> 00:12:51,500
time is kind of the threshold you know

00:12:49,220 --> 00:12:53,600
you're no longer wincing at that point

00:12:51,500 --> 00:12:56,210
it is it is pretty ugly it is pretty bad

00:12:53,600 --> 00:12:58,250
so the rule of three is a good rule of

00:12:56,210 --> 00:13:00,800
thumb when it comes to two code

00:12:58,250 --> 00:13:02,960
duplication if when is it time to break

00:13:00,800 --> 00:13:06,680
it out into its own function or service

00:13:02,960 --> 00:13:10,280
or something like that long classes is

00:13:06,680 --> 00:13:12,140
also a code smell we as a threshold we

00:13:10,280 --> 00:13:14,630
like to see classes that are less than a

00:13:12,140 --> 00:13:16,970
thousand lines of code now much like a

00:13:14,630 --> 00:13:18,770
function like I said earlier a function

00:13:16,970 --> 00:13:22,459
should only do one thing

00:13:18,770 --> 00:13:25,310
a class is similar but it should do it

00:13:22,459 --> 00:13:27,890
should solve one problem it's not doing

00:13:25,310 --> 00:13:31,550
one thing it's solving one problem right

00:13:27,890 --> 00:13:34,010
so so again the class inside of a class

00:13:31,550 --> 00:13:35,810
is solving a problem in the methods each

00:13:34,010 --> 00:13:38,089
method in that class is doing one thing

00:13:35,810 --> 00:13:41,270
towards solving that problem right so

00:13:38,089 --> 00:13:43,459
see how that breaks down like that so

00:13:41,270 --> 00:13:45,260
anyway a class if you're solving one

00:13:43,459 --> 00:13:47,959
problem chances are your class can be

00:13:45,260 --> 00:13:50,060
quite small and if your methods are each

00:13:47,959 --> 00:13:54,350
doing one thing it really really helps

00:13:50,060 --> 00:13:56,690
reduce the amount of code and in class

00:13:54,350 --> 00:13:58,430
complexity is kind of I mean it is

00:13:56,690 --> 00:13:59,959
cyclomatic complexity but now we're

00:13:58,430 --> 00:14:02,570
looking at the complexity of all the

00:13:59,959 --> 00:14:05,870
methods within the class having a high

00:14:02,570 --> 00:14:07,190
class complexity you know we we use 50

00:14:05,870 --> 00:14:09,830
as a threshold for the cyclomatic

00:14:07,190 --> 00:14:12,440
complexity there meaning essentially you

00:14:09,830 --> 00:14:14,930
really on average you should have about

00:14:12,440 --> 00:14:16,310
five methods per class sometimes you

00:14:14,930 --> 00:14:18,020
might need more than that again these

00:14:16,310 --> 00:14:20,149
are just smells these are not saying

00:14:18,020 --> 00:14:21,890
it's bad it's just an indicator that

00:14:20,149 --> 00:14:24,290
maybe we need to pay attention to it

00:14:21,890 --> 00:14:26,209
long methods same thing as I said

00:14:24,290 --> 00:14:28,520
earlier a method should really do one

00:14:26,209 --> 00:14:30,200
thing so we try to keep the method nice

00:14:28,520 --> 00:14:32,959
and small because it's only doing one

00:14:30,200 --> 00:14:35,329
thing unused variables where we've

00:14:32,959 --> 00:14:36,920
created variables and then through some

00:14:35,329 --> 00:14:39,440
refactoring now that variable is no

00:14:36,920 --> 00:14:41,180
longer being used now with IDs this

00:14:39,440 --> 00:14:43,459
helps because it highlights those for

00:14:41,180 --> 00:14:45,110
you you know in most IDs they're grayed

00:14:43,459 --> 00:14:47,209
out so you know they're not being used

00:14:45,110 --> 00:14:49,790
anymore it makes it easier to clean them

00:14:47,209 --> 00:14:53,810
up but there's still often times we see

00:14:49,790 --> 00:14:57,020
variables left behind lack or overuse of

00:14:53,810 --> 00:15:00,320
comments so comments are a code smell

00:14:57,020 --> 00:15:02,360
now don't take this as adam saying don't

00:15:00,320 --> 00:15:05,360
come at your code I'm not saying that at

00:15:02,360 --> 00:15:08,630
all please comment your code what I am

00:15:05,360 --> 00:15:10,880
saying is that the improper usage of

00:15:08,630 --> 00:15:12,709
comments or having too many comments is

00:15:10,880 --> 00:15:14,870
a code smell it indicates that there

00:15:12,709 --> 00:15:16,910
might be a problem and why is that the

00:15:14,870 --> 00:15:19,700
reason is is because if you're leaving

00:15:16,910 --> 00:15:21,980
if somebody is commenting a lot in their

00:15:19,700 --> 00:15:23,329
code chances are they're trying to

00:15:21,980 --> 00:15:25,670
explain the code

00:15:23,329 --> 00:15:27,320
you shouldn't have to explain code if

00:15:25,670 --> 00:15:29,750
you have to explain code than you did it

00:15:27,320 --> 00:15:31,400
wrong because the code should be more

00:15:29,750 --> 00:15:33,710
simple than that

00:15:31,400 --> 00:15:35,480
so generally in our code we don't have

00:15:33,710 --> 00:15:36,620
business people following behind us and

00:15:35,480 --> 00:15:38,210
reading our code there are not

00:15:36,620 --> 00:15:40,850
developers they don't know how to read

00:15:38,210 --> 00:15:43,250
the code so so your comments don't need

00:15:40,850 --> 00:15:44,720
to explain the code developers are

00:15:43,250 --> 00:15:46,190
reading your code they know how to

00:15:44,720 --> 00:15:48,860
program you shouldn't have to explain

00:15:46,190 --> 00:15:53,240
them typically what I do with comments

00:15:48,860 --> 00:15:55,070
is I explain the intent of the code so

00:15:53,240 --> 00:15:56,660
don't explain the code it's like I don't

00:15:55,070 --> 00:15:58,670
need to know what the damn loop is doing

00:15:56,660 --> 00:16:01,400
I just need to know what the intent of

00:15:58,670 --> 00:16:03,740
that thing looping is supposed to output

00:16:01,400 --> 00:16:07,130
and so that's generally when I use

00:16:03,740 --> 00:16:10,280
comments as a general rule I like to see

00:16:07,130 --> 00:16:12,590
about 25 percent of my lines of code

00:16:10,280 --> 00:16:16,340
being comments and that includes duck

00:16:12,590 --> 00:16:17,960
blocks right so about 25 percent is a

00:16:16,340 --> 00:16:20,420
good threshold and that's what I look

00:16:17,960 --> 00:16:21,710
for I use another tool which I'm going

00:16:20,420 --> 00:16:25,760
to talk about in just a minute which is

00:16:21,710 --> 00:16:27,290
a PHP lock PHP lines of code LOC and in

00:16:25,760 --> 00:16:28,700
there it tells you the number of lines

00:16:27,290 --> 00:16:30,680
of code and it tells you the number of

00:16:28,700 --> 00:16:33,980
lines they're comments and I try to aim

00:16:30,680 --> 00:16:35,780
for 25 percent if I see more than 25

00:16:33,980 --> 00:16:37,820
percent I know somebody's over

00:16:35,780 --> 00:16:38,960
explaining the code or maybe they maybe

00:16:37,820 --> 00:16:40,310
they're trying to explain it for a

00:16:38,960 --> 00:16:42,560
business person who's not reading the

00:16:40,310 --> 00:16:44,630
code in any way or maybe they're

00:16:42,560 --> 00:16:46,490
explaining bad code and we need to help

00:16:44,630 --> 00:16:49,040
clean that up right then we need to help

00:16:46,490 --> 00:16:51,860
clean up their code as an example let's

00:16:49,040 --> 00:16:53,810
take this code code sample here I

00:16:51,860 --> 00:16:55,130
apologize if you can't read the comments

00:16:53,810 --> 00:16:57,980
but that's okay you don't need to read

00:16:55,130 --> 00:16:59,720
the comments but but the code itself

00:16:57,980 --> 00:17:01,400
that we have an if statement here in any

00:16:59,720 --> 00:17:05,510
if statement it's saying if employee

00:17:01,400 --> 00:17:07,880
flag and hourly flag and employees age

00:17:05,510 --> 00:17:10,130
is larger than 65 right so obviously

00:17:07,880 --> 00:17:12,110
we're checking to see if the employee is

00:17:10,130 --> 00:17:14,930
eligible for some benefits based on

00:17:12,110 --> 00:17:17,480
their age or something like that now as

00:17:14,930 --> 00:17:19,190
a way to clean that up maybe we could do

00:17:17,480 --> 00:17:21,320
something like if and in the if

00:17:19,190 --> 00:17:22,880
statement we call the employee and we

00:17:21,320 --> 00:17:24,800
call a method in the employee called it

00:17:22,880 --> 00:17:27,050
is eligible for full-time benefits and

00:17:24,800 --> 00:17:29,270
we pass the ID and then we can move the

00:17:27,050 --> 00:17:32,480
logic into that other function do I

00:17:29,270 --> 00:17:34,970
really need to comment this now it's

00:17:32,480 --> 00:17:37,490
somewhat self documenting now code it

00:17:34,970 --> 00:17:39,200
will never be self documenting don't get

00:17:37,490 --> 00:17:40,910
into the don't get into the trap of

00:17:39,200 --> 00:17:43,580
saying oh I want to make all my code

00:17:40,910 --> 00:17:44,990
self documenting that is that's not good

00:17:43,580 --> 00:17:47,690
it's not going to work

00:17:44,990 --> 00:17:49,640
code is not self-documenting but by

00:17:47,690 --> 00:17:51,380
making it named like that I probably

00:17:49,640 --> 00:17:54,049
don't have to put a lot of comment

00:17:51,380 --> 00:17:56,049
before I call this if statement now I

00:17:54,049 --> 00:17:58,760
might put a duck block on the method

00:17:56,049 --> 00:18:01,029
explaining what the method is doing but

00:17:58,760 --> 00:18:04,730
I don't need to comment it right here

00:18:01,029 --> 00:18:08,000
again so the the idea is just to make it

00:18:04,730 --> 00:18:09,320
make it somewhat self-documenting but at

00:18:08,000 --> 00:18:12,429
the same time I don't need to explain

00:18:09,320 --> 00:18:12,429
the code here anymore

00:18:12,740 --> 00:18:19,789
another thing that we like to measure is

00:18:14,960 --> 00:18:22,370
a global usage and global usage is quite

00:18:19,789 --> 00:18:23,870
broad first off if you're doing the

00:18:22,370 --> 00:18:26,120
first example out there where you're

00:18:23,870 --> 00:18:28,450
defining some data as global don't do

00:18:26,120 --> 00:18:31,580
that you shouldn't be doing that just

00:18:28,450 --> 00:18:33,980
forget the word global even exist in the

00:18:31,580 --> 00:18:37,690
PHP language just do not use it it's

00:18:33,980 --> 00:18:40,640
evil it will catch you every single time

00:18:37,690 --> 00:18:43,039
on the other hand if you're doing if

00:18:40,640 --> 00:18:45,950
you're using some superglobals those are

00:18:43,039 --> 00:18:48,559
okay but try to try to abstract those

00:18:45,950 --> 00:18:50,419
try to use and your superglobals try to

00:18:48,559 --> 00:18:53,240
extract them or abstract them out to

00:18:50,419 --> 00:18:55,039
some library or something else and then

00:18:53,240 --> 00:18:56,779
you're using them as data throughout

00:18:55,039 --> 00:18:59,419
your code versus using them as

00:18:56,779 --> 00:19:02,960
superglobals directly but just try to

00:18:59,419 --> 00:19:04,429
show you stay away from global usage and

00:19:02,960 --> 00:19:06,590
the reason we try to stay away from

00:19:04,429 --> 00:19:08,990
global usage is because of course and it

00:19:06,590 --> 00:19:10,610
is a smell is because in your code if

00:19:08,990 --> 00:19:12,640
you're defining something is global

00:19:10,610 --> 00:19:14,870
someplace then you ever run into

00:19:12,640 --> 00:19:19,039
difficulties how do you find where it

00:19:14,870 --> 00:19:21,500
was defined its global how can you find

00:19:19,039 --> 00:19:23,990
it do you have to do a find in your code

00:19:21,500 --> 00:19:25,549
base and maybe you have thousands of

00:19:23,990 --> 00:19:27,830
references to it because you made it

00:19:25,549 --> 00:19:30,320
global so you're gonna use it everywhere

00:19:27,830 --> 00:19:33,230
right and now how do you find where you

00:19:30,320 --> 00:19:34,850
set it and not only do you find where

00:19:33,230 --> 00:19:36,620
how do you find where you said it but

00:19:34,850 --> 00:19:38,419
how do you find where it was changed

00:19:36,620 --> 00:19:40,850
because it's global you can change it

00:19:38,419 --> 00:19:42,679
anywhere right so that's why we try to

00:19:40,850 --> 00:19:44,179
stay away from it because it's just it's

00:19:42,679 --> 00:19:47,179
just a pitfall you don't want to get

00:19:44,179 --> 00:19:48,860
caught up into another thing we want to

00:19:47,179 --> 00:19:51,110
measure is the unpassed complexity

00:19:48,860 --> 00:19:52,850
similar to cyclomatic complexity the

00:19:51,110 --> 00:19:55,500
unpassed complexity is the number of

00:19:52,850 --> 00:19:57,150
paths through the code the number rather

00:19:55,500 --> 00:19:59,010
the number of decision points it's the

00:19:57,150 --> 00:20:01,350
number of paths through the code and we

00:19:59,010 --> 00:20:03,750
try to keep the end past complexity less

00:20:01,350 --> 00:20:05,970
than 200 you'll see a little bit more of

00:20:03,750 --> 00:20:08,310
that come through as we're doing

00:20:05,970 --> 00:20:09,780
measurements but I mean in past

00:20:08,310 --> 00:20:13,680
complexity is something that really

00:20:09,780 --> 00:20:16,380
catches people by surprise I've seen

00:20:13,680 --> 00:20:18,420
code bases where there are methods that

00:20:16,380 --> 00:20:21,390
are the impact complexity is in the

00:20:18,420 --> 00:20:24,360
millions and trillions I mean it can get

00:20:21,390 --> 00:20:26,070
bad really fast generally what it

00:20:24,360 --> 00:20:28,140
translates to is really slow code

00:20:26,070 --> 00:20:30,030
because if you have if you have an

00:20:28,140 --> 00:20:32,550
endcap path complexity it's really high

00:20:30,030 --> 00:20:35,220
first off if you have a code base that

00:20:32,550 --> 00:20:37,710
is very slow the first thing I do is I

00:20:35,220 --> 00:20:39,330
run my static analysis or analysis on it

00:20:37,710 --> 00:20:41,520
to see my cyclomatic complexity and my

00:20:39,330 --> 00:20:43,650
end pass complexity and the end pass

00:20:41,520 --> 00:20:46,920
complexity will really quickly tell me

00:20:43,650 --> 00:20:48,570
ok it's it's code this is why it slow is

00:20:46,920 --> 00:20:50,610
slow because of the code it's not slow

00:20:48,570 --> 00:20:51,720
because of something else now if it's

00:20:50,610 --> 00:20:53,490
not in the code if the end path

00:20:51,720 --> 00:20:55,650
complexity the cyclomatic complexity are

00:20:53,490 --> 00:20:57,090
reasonable then I know it might not be

00:20:55,650 --> 00:20:58,440
the code there might be something else

00:20:57,090 --> 00:21:00,360
right it might be some connectivity

00:20:58,440 --> 00:21:01,800
maybe it's a database issue maybe I just

00:21:00,360 --> 00:21:04,140
need to add an index in my database

00:21:01,800 --> 00:21:06,930
something like that but if the unpacked

00:21:04,140 --> 00:21:08,400
complexity is high you know it means I

00:21:06,930 --> 00:21:11,400
need to look at the code maybe I need to

00:21:08,400 --> 00:21:14,580
break out some functions you know bring

00:21:11,400 --> 00:21:17,100
down my methods often my methods are

00:21:14,580 --> 00:21:20,460
doing more than one thing and that adds

00:21:17,100 --> 00:21:22,230
that adds to the unpassed complexity and

00:21:20,460 --> 00:21:25,050
of course there's a lot of different

00:21:22,230 --> 00:21:26,370
things that we can also bring in as code

00:21:25,050 --> 00:21:28,860
smells these are just the low-hanging

00:21:26,370 --> 00:21:32,580
fruit these are the common ones that we

00:21:28,860 --> 00:21:36,270
measure and and looking for our code

00:21:32,580 --> 00:21:38,240
smells now there's a there's a site out

00:21:36,270 --> 00:21:43,770
there not a site actually it's on github

00:21:38,240 --> 00:21:45,120
exa cat is Damien Sugoi and I'm probably

00:21:43,770 --> 00:21:47,730
probably mispronouncing his laymen a

00:21:45,120 --> 00:21:50,280
little bit I love Damien but but I can

00:21:47,730 --> 00:21:53,310
never quite get his name right but he's

00:21:50,280 --> 00:21:55,770
with EXA cat and he has a repo out there

00:21:53,310 --> 00:21:58,890
of public static analysis tools it is a

00:21:55,770 --> 00:22:01,230
great repo because it highlights it's

00:21:58,890 --> 00:22:03,600
just a huge list of different tools that

00:22:01,230 --> 00:22:06,210
are available for you for measuring your

00:22:03,600 --> 00:22:08,280
code quality and some of them are some

00:22:06,210 --> 00:22:10,730
of them are hosted somewhere else

00:22:08,280 --> 00:22:13,590
some of them are ones that you actually

00:22:10,730 --> 00:22:15,300
install on your system some you know

00:22:13,590 --> 00:22:18,090
some of them are just PHP code that you

00:22:15,300 --> 00:22:21,240
execute to analyze your PHP code but

00:22:18,090 --> 00:22:24,540
anyways it's a great repo for doing that

00:22:21,240 --> 00:22:26,370
so I like using some of the tools that

00:22:24,540 --> 00:22:28,200
were there there used to be a there used

00:22:26,370 --> 00:22:31,590
to be another page out there that was

00:22:28,200 --> 00:22:34,440
PHP QA tools org that listed some of the

00:22:31,590 --> 00:22:37,200
common ones but that has been deprecated

00:22:34,440 --> 00:22:41,010
and now this is pretty much the one that

00:22:37,200 --> 00:22:42,780
most people look to but I used a lot of

00:22:41,010 --> 00:22:44,550
these tools on an ongoing basis as I

00:22:42,780 --> 00:22:46,860
consult I would go out the customers

00:22:44,550 --> 00:22:49,020
location in design and I really needed a

00:22:46,860 --> 00:22:51,120
lot of these tools and what I found was

00:22:49,020 --> 00:22:53,340
they didn't always have the availability

00:22:51,120 --> 00:22:56,550
of the correct version to PHP to run

00:22:53,340 --> 00:22:59,100
them or they didn't allow to install

00:22:56,550 --> 00:23:01,350
something so what I did is the next

00:22:59,100 --> 00:23:03,600
logical step I created a docker image to

00:23:01,350 --> 00:23:05,970
allow me to do it so I created a docker

00:23:03,600 --> 00:23:08,940
image so you can go out on hub docker

00:23:05,970 --> 00:23:11,160
com look at my profile item call I have

00:23:08,940 --> 00:23:13,470
a cat I have an image out there PHP code

00:23:11,160 --> 00:23:16,380
quality you can also see it on github

00:23:13,470 --> 00:23:19,230
it's a very simple docker image it's not

00:23:16,380 --> 00:23:21,960
very not very complex at all but it

00:23:19,230 --> 00:23:24,330
houses a bunch of QA tools that I use

00:23:21,960 --> 00:23:27,240
anon on an ongoing basis so in about

00:23:24,330 --> 00:23:30,240
five minutes I can get a docker instance

00:23:27,240 --> 00:23:32,880
up and running using that image and I

00:23:30,240 --> 00:23:35,370
can start testing code right away and I

00:23:32,880 --> 00:23:37,920
do that it's just one simple command

00:23:35,370 --> 00:23:39,690
docker run and then pass it the command

00:23:37,920 --> 00:23:41,910
tell it where to output the file and

00:23:39,690 --> 00:23:44,970
it's done I can I can be on site

00:23:41,910 --> 00:23:46,500
somewhere and and within within the

00:23:44,970 --> 00:23:49,140
first half an hour I can start

00:23:46,500 --> 00:23:50,160
generating data of you know why they

00:23:49,140 --> 00:23:52,110
might be in trouble

00:23:50,160 --> 00:23:53,730
and that's why they call me they come

00:23:52,110 --> 00:23:56,010
because they're in trouble I don't have

00:23:53,730 --> 00:23:57,660
a job because people don't get in to get

00:23:56,010 --> 00:24:00,540
in the gems I have a job because people

00:23:57,660 --> 00:24:02,490
get into gems but but that being said so

00:24:00,540 --> 00:24:03,570
these are some of the common ones and

00:24:02,490 --> 00:24:05,730
I'm going to talk about these I'm going

00:24:03,570 --> 00:24:08,790
to show you how to run these so again on

00:24:05,730 --> 00:24:09,870
docker hub I have the I have the docker

00:24:08,790 --> 00:24:11,430
image out there

00:24:09,870 --> 00:24:13,170
I have other docker images as well

00:24:11,430 --> 00:24:14,790
there's another docker image on on

00:24:13,170 --> 00:24:17,610
docker hub I actually only have like

00:24:14,790 --> 00:24:19,350
three three images or four images so

00:24:17,610 --> 00:24:20,730
there's PHP code quality is another one

00:24:19,350 --> 00:24:23,880
for PHP

00:24:20,730 --> 00:24:26,669
security and then and then another one

00:24:23,880 --> 00:24:29,360
that is for PHP compatibility so you can

00:24:26,669 --> 00:24:31,860
test your code to say okay I have a PHP

00:24:29,360 --> 00:24:33,540
5.6 application I want to get to PHP

00:24:31,860 --> 00:24:34,230
seven which you should have already done

00:24:33,540 --> 00:24:36,809
by now

00:24:34,230 --> 00:24:40,049
but if you haven't it's out there so you

00:24:36,809 --> 00:24:43,410
can use that now in the PHP code quality

00:24:40,049 --> 00:24:45,059
image I also have PHP compatibility but

00:24:43,410 --> 00:24:47,429
let's look at some of these tools

00:24:45,059 --> 00:24:50,010
the first one is PHP lock as a

00:24:47,429 --> 00:24:52,470
consultant this is the very first thing

00:24:50,010 --> 00:24:54,179
I run before I even tell a customer how

00:24:52,470 --> 00:24:57,570
many hours it's going to take me to help

00:24:54,179 --> 00:24:59,580
them I run this tool now the output for

00:24:57,570 --> 00:25:02,940
this well it's easy to run you just call

00:24:59,580 --> 00:25:06,390
PHP I'm calling PHP lock far I'm telling

00:25:02,940 --> 00:25:08,130
it I want a single V for verbosity I

00:25:06,390 --> 00:25:11,790
want to make sure that all the files

00:25:08,130 --> 00:25:12,929
that it's analyzing are dot PHP files I

00:25:11,790 --> 00:25:14,880
don't want to do anything else I'm

00:25:12,929 --> 00:25:16,590
excluding the vendor directory because

00:25:14,880 --> 00:25:18,600
of course if I'm including a library

00:25:16,590 --> 00:25:20,429
through composer I don't need to check

00:25:18,600 --> 00:25:22,559
the code quality of that now

00:25:20,429 --> 00:25:25,260
occasionally I do check that in anyway

00:25:22,559 --> 00:25:27,299
but not on an ongoing basis right

00:25:25,260 --> 00:25:28,980
you only need to check your vendors once

00:25:27,299 --> 00:25:30,840
in a while to figure out if you're using

00:25:28,980 --> 00:25:32,970
code from somebody else that's bad and

00:25:30,840 --> 00:25:35,190
you can use something else and then I

00:25:32,970 --> 00:25:37,620
tell it to pass to my project and tell

00:25:35,190 --> 00:25:40,110
it they path for the output file so this

00:25:37,620 --> 00:25:42,660
command just gives me one single text

00:25:40,110 --> 00:25:44,370
file and in that text file it looks like

00:25:42,660 --> 00:25:46,200
this now I know you're not going to be

00:25:44,370 --> 00:25:48,030
able to read the details of it but this

00:25:46,200 --> 00:25:50,490
is the entirety of the report it's a

00:25:48,030 --> 00:25:52,220
very small report it tells me the lines

00:25:50,490 --> 00:25:55,320
of code it tells me the number of the

00:25:52,220 --> 00:25:57,840
amounts of comments you know it tells me

00:25:55,320 --> 00:26:00,330
my how many classes I have how many

00:25:57,840 --> 00:26:02,940
namespaces I have how many Global's are

00:26:00,330 --> 00:26:06,210
being used it tells me all that right

00:26:02,940 --> 00:26:08,070
here in this small little subset off of

00:26:06,210 --> 00:26:09,540
this I can tell the customer how bad

00:26:08,070 --> 00:26:11,250
their code is because I know how to read

00:26:09,540 --> 00:26:12,929
this report and with a little bit of

00:26:11,250 --> 00:26:14,429
practice you can learn how to read it as

00:26:12,929 --> 00:26:16,410
well because some of these numbers

00:26:14,429 --> 00:26:18,660
indicate more than what they actually

00:26:16,410 --> 00:26:20,490
say they're indicating right you can

00:26:18,660 --> 00:26:21,840
kind of read between the lines and say

00:26:20,490 --> 00:26:23,940
oh you know what your cyclomatic

00:26:21,840 --> 00:26:27,059
complexity it tells the the average

00:26:23,940 --> 00:26:29,280
complexity per lines of code and so you

00:26:27,059 --> 00:26:30,780
can look at a code base and say wow your

00:26:29,280 --> 00:26:32,909
your messages are really long

00:26:30,780 --> 00:26:34,050
right you can see the you can see

00:26:32,909 --> 00:26:38,640
problems

00:26:34,050 --> 00:26:41,100
at a very high level really quickly not

00:26:38,640 --> 00:26:45,030
another one another item that I use

00:26:41,100 --> 00:26:47,190
quite often is PHP depend now PHP depend

00:26:45,030 --> 00:26:49,650
is more of an object oriented related

00:26:47,190 --> 00:26:53,430
toy it's not so much code quality as far

00:26:49,650 --> 00:26:55,200
as your as far as your coding standards

00:26:53,430 --> 00:26:57,720
and conventions and things like that it

00:26:55,200 --> 00:26:59,640
is really more about the dependencies

00:26:57,720 --> 00:27:01,710
and how you're using your objects and

00:26:59,640 --> 00:27:04,500
how you're building object-oriented so

00:27:01,710 --> 00:27:06,780
again the command is it's a PHP file as

00:27:04,500 --> 00:27:09,030
well so we're calling through PHP we're

00:27:06,780 --> 00:27:11,010
calling the far file we're telling it to

00:27:09,030 --> 00:27:13,490
ignore the vendor directory we're

00:27:11,010 --> 00:27:15,900
telling it first off give me an XML

00:27:13,490 --> 00:27:17,820
output file which gives you the details

00:27:15,900 --> 00:27:21,240
of the report and then we're also I'm

00:27:17,820 --> 00:27:22,980
using outputting some charts outputting

00:27:21,240 --> 00:27:24,990
some charts and some pyramids and then

00:27:22,980 --> 00:27:28,410
I'm telling it where the path to my to

00:27:24,990 --> 00:27:30,300
my application is and the nice thing is

00:27:28,410 --> 00:27:32,010
is you end up with some nice charts that

00:27:30,300 --> 00:27:34,620
tell you the size of your objects and

00:27:32,010 --> 00:27:37,650
how they relate to each other it's some

00:27:34,620 --> 00:27:39,690
pretty decent output as well as the XML

00:27:37,650 --> 00:27:41,370
file that gives you more detailed output

00:27:39,690 --> 00:27:43,920
of the complexity of your

00:27:41,370 --> 00:27:45,960
object-oriented objects and and how they

00:27:43,920 --> 00:27:49,530
interrelate and everything else it's a

00:27:45,960 --> 00:27:51,750
very good report so you can see the the

00:27:49,530 --> 00:27:53,850
stability of your application of course

00:27:51,750 --> 00:27:54,990
you want you use stability of your

00:27:53,850 --> 00:27:56,340
application you want it to be very

00:27:54,990 --> 00:28:01,040
stable you don't want it to have too

00:27:56,340 --> 00:28:03,210
much extension a lot more a lot more

00:28:01,040 --> 00:28:05,340
yeah we're skipping in my mind I'll

00:28:03,210 --> 00:28:08,010
think of it later another tool that we

00:28:05,340 --> 00:28:09,930
want to use is copy/paste detector and

00:28:08,010 --> 00:28:11,700
this is again where that rule of three

00:28:09,930 --> 00:28:13,770
comes in we can use the copy/paste

00:28:11,700 --> 00:28:16,200
detector so very simple we call through

00:28:13,770 --> 00:28:18,090
PHP we call the far file we tell it to

00:28:16,200 --> 00:28:19,680
path to our project tell it to ignore

00:28:18,090 --> 00:28:20,910
any vendor files because I don't need to

00:28:19,680 --> 00:28:22,590
do that I don't need to do the

00:28:20,910 --> 00:28:23,880
copy/paste for somebody else's library I

00:28:22,590 --> 00:28:26,040
only want to do it for code that I'm

00:28:23,880 --> 00:28:28,680
writing and then I tell it where to

00:28:26,040 --> 00:28:31,080
output the text file and it is it's very

00:28:28,680 --> 00:28:34,470
simple it really it just tells you the

00:28:31,080 --> 00:28:37,260
file where it found so here are here are

00:28:34,470 --> 00:28:39,510
like four different results so it gives

00:28:37,260 --> 00:28:41,400
you the path of the originating and in

00:28:39,510 --> 00:28:43,320
the path where I found the copy/paste

00:28:41,400 --> 00:28:45,390
and again you can't see that whole line

00:28:43,320 --> 00:28:47,640
but it does tell you the exact lines

00:28:45,390 --> 00:28:49,170
that were copied and pay

00:28:47,640 --> 00:28:51,870
did from one place to another it's

00:28:49,170 --> 00:28:53,700
looking for exact clones so if there's

00:28:51,870 --> 00:28:55,530
if there's some differences there it

00:28:53,700 --> 00:28:57,750
might not find all of them but it's

00:28:55,530 --> 00:29:00,799
looking for exact clones and in if for

00:28:57,750 --> 00:29:03,809
this one for instance there was a 36%

00:29:00,799 --> 00:29:05,700
duplicate lines almost 37% duplicate

00:29:03,809 --> 00:29:09,320
lines and it tells you the the the

00:29:05,700 --> 00:29:12,179
amount per the per the application and

00:29:09,320 --> 00:29:13,590
so it comes in handy because then this

00:29:12,179 --> 00:29:15,450
can highlight where you might have had

00:29:13,590 --> 00:29:17,370
somebody who's doing a lot of extensive

00:29:15,450 --> 00:29:19,679
copy and paste maybe you had to get out

00:29:17,370 --> 00:29:21,210
of feature really quickly so you did

00:29:19,679 --> 00:29:22,799
some copy and paste just to get over

00:29:21,210 --> 00:29:27,210
that hump but now you need to go back

00:29:22,799 --> 00:29:29,549
and clean it up right and writing

00:29:27,210 --> 00:29:33,330
writing bad code is something that we

00:29:29,549 --> 00:29:36,990
all do we all write bad code even the

00:29:33,330 --> 00:29:38,850
best developers write bad code but what

00:29:36,990 --> 00:29:40,890
separates a bad developer from a good

00:29:38,850 --> 00:29:43,830
developer the good developer goes and

00:29:40,890 --> 00:29:45,660
cleans it up later and they schedule

00:29:43,830 --> 00:29:47,880
time for that so that they can go back

00:29:45,660 --> 00:29:51,120
and clean it up nobody writes clean code

00:29:47,880 --> 00:29:55,559
the first time it's impossible if you do

00:29:51,120 --> 00:29:57,299
see me after this talk i but chances are

00:29:55,559 --> 00:29:58,950
nobody will come see me for that because

00:29:57,299 --> 00:30:01,200
we just don't write clean code the first

00:29:58,950 --> 00:30:05,429
time we clean it up over time

00:30:01,200 --> 00:30:07,320
iteratively through refactoring now PHP

00:30:05,429 --> 00:30:10,320
mess detector is another told this one I

00:30:07,320 --> 00:30:13,340
use all the time I love this tool PHP

00:30:10,320 --> 00:30:16,049
mess detector it's also known as PHP MD

00:30:13,340 --> 00:30:18,360
and so we call the mess detector right

00:30:16,049 --> 00:30:20,970
there are many filters that you can use

00:30:18,360 --> 00:30:23,100
with PHP mess detector the one that I

00:30:20,970 --> 00:30:26,820
use most often is the code size filter

00:30:23,100 --> 00:30:30,059
and we call it by call it can't be hid

00:30:26,820 --> 00:30:32,820
PHP PHP MD dot far we're telling it the

00:30:30,059 --> 00:30:35,160
path to the project in this case I'm

00:30:32,820 --> 00:30:37,890
telling it I want to output an XML file

00:30:35,160 --> 00:30:40,080
and I want to use the code size filter

00:30:37,890 --> 00:30:41,549
we tell it what to exclude of course

00:30:40,080 --> 00:30:42,929
we're excluding the vendor directory I

00:30:41,549 --> 00:30:45,210
don't need to run mess detector on

00:30:42,929 --> 00:30:46,950
somebody else's code just mine and then

00:30:45,210 --> 00:30:48,840
I'm telling it where to output the the

00:30:46,950 --> 00:30:50,490
report to and in this case it's

00:30:48,840 --> 00:30:53,220
outputting an XML file because I told it

00:30:50,490 --> 00:30:55,230
I wanted an XML file now the nice thing

00:30:53,220 --> 00:30:57,510
about it is it gives you some nice clean

00:30:55,230 --> 00:30:59,820
output where it tells you the file

00:30:57,510 --> 00:31:01,410
that's the file that it found something

00:30:59,820 --> 00:31:03,660
in and it tells you

00:31:01,410 --> 00:31:06,090
result like cyclomatic complexity right

00:31:03,660 --> 00:31:08,940
we might have you know this one the

00:31:06,090 --> 00:31:11,490
class dashboard has 1030 lines our

00:31:08,940 --> 00:31:13,020
threshold was 1000 lines for a class so

00:31:11,490 --> 00:31:15,480
it's Flags this for me

00:31:13,020 --> 00:31:17,010
so in cyclomatic complexity much the

00:31:15,480 --> 00:31:18,690
same thing right

00:31:17,010 --> 00:31:20,640
do I have ones for a cyclomatic

00:31:18,690 --> 00:31:21,810
complexity up there there's too many

00:31:20,640 --> 00:31:23,580
methods here

00:31:21,810 --> 00:31:25,230
excessive class complexity here

00:31:23,580 --> 00:31:27,180
cyclomatic complexity the very bottom

00:31:25,230 --> 00:31:30,740
one where the dashboard is cyclomatic

00:31:27,180 --> 00:31:34,260
complexity is 24-hour threshold is 10 so

00:31:30,740 --> 00:31:35,940
we have a 1414 cyclomatic complexity too

00:31:34,260 --> 00:31:37,800
high and the nice thing is you can go

00:31:35,940 --> 00:31:39,510
through this and really quickly be able

00:31:37,800 --> 00:31:41,700
to clean up your code because it tells

00:31:39,510 --> 00:31:44,400
you where some of these things are now

00:31:41,700 --> 00:31:47,130
the code size filter highlights things

00:31:44,400 --> 00:31:49,350
like your class being too long your

00:31:47,130 --> 00:31:51,660
methods being too long your cyclomatic

00:31:49,350 --> 00:31:53,760
complexity your end path complexity it's

00:31:51,660 --> 00:31:57,120
all about the size of things that's why

00:31:53,760 --> 00:31:59,400
it's called code size another another

00:31:57,120 --> 00:32:02,010
filter I use on PHP mess detector is

00:31:59,400 --> 00:32:04,380
unused and that basically just looks for

00:32:02,010 --> 00:32:07,200
code that's not used right it's things

00:32:04,380 --> 00:32:09,600
that are no longer used another another

00:32:07,200 --> 00:32:12,240
tool that I use is PHP dead code

00:32:09,600 --> 00:32:14,220
detector which is much the same thing so

00:32:12,240 --> 00:32:16,440
if you're using the unused filter in the

00:32:14,220 --> 00:32:18,450
in PHP mess detector you're pretty much

00:32:16,440 --> 00:32:21,840
gonna get the same result as the PHP

00:32:18,450 --> 00:32:23,820
dead code detector but depending on on

00:32:21,840 --> 00:32:25,440
your usage maybe you only want one or

00:32:23,820 --> 00:32:31,200
want the other one they give the same

00:32:25,440 --> 00:32:33,510
sort of output another tool that I use

00:32:31,200 --> 00:32:35,340
not quite so often I mean a PHP mess

00:32:33,510 --> 00:32:38,760
detector in PHP lines of code or my to

00:32:35,340 --> 00:32:42,990
go to tools but but there's also PHP

00:32:38,760 --> 00:32:47,010
metrics at PHP metrics org a really nice

00:32:42,990 --> 00:32:49,680
tool it has some good clean output it is

00:32:47,010 --> 00:32:52,830
basically a PHP application so you're

00:32:49,680 --> 00:32:56,850
calling it you're calling it through a

00:32:52,830 --> 00:32:59,130
regular get request and and then it

00:32:56,850 --> 00:33:01,530
gives you some nice clean output as far

00:32:59,130 --> 00:33:03,540
as showing you your your objects and how

00:33:01,530 --> 00:33:09,060
they relate to each other and how

00:33:03,540 --> 00:33:11,730
they're lined up PHP code sniffer is

00:33:09,060 --> 00:33:14,440
another very popular told this comes in

00:33:11,730 --> 00:33:17,440
really handy when you're doing

00:33:14,440 --> 00:33:22,780
code coding standards everybody has a

00:33:17,440 --> 00:33:25,990
coding standard right that got pretty

00:33:22,780 --> 00:33:27,250
quiet that's dangerous

00:33:25,990 --> 00:33:29,530
so yeah you should have a coding

00:33:27,250 --> 00:33:31,510
standard in your code now there are many

00:33:29,530 --> 00:33:34,120
different coding standards out there I'm

00:33:31,510 --> 00:33:35,980
a voting member on the PHP fig so I like

00:33:34,120 --> 00:33:37,630
using the PHP fig I'm not saying you

00:33:35,980 --> 00:33:40,030
have to use that one but it's a good

00:33:37,630 --> 00:33:41,350
starting points at the very at the very

00:33:40,030 --> 00:33:44,860
least at least it's a good starting

00:33:41,350 --> 00:33:47,110
point now when I ask is for everybody is

00:33:44,860 --> 00:33:49,870
using a coding standard of course I

00:33:47,110 --> 00:33:51,760
don't mean as every each developer using

00:33:49,870 --> 00:33:54,130
a coding standard I mean as each team

00:33:51,760 --> 00:33:56,170
using a coding standard because

00:33:54,130 --> 00:33:57,670
everybody having a coding standard but

00:33:56,170 --> 00:34:00,880
the whole team not following the same

00:33:57,670 --> 00:34:02,950
one is also a bad thing everybody on

00:34:00,880 --> 00:34:05,770
each team should follow the same coding

00:34:02,950 --> 00:34:07,870
standard and that should be that should

00:34:05,770 --> 00:34:09,820
be discussed among the team to come to

00:34:07,870 --> 00:34:12,730
terms on a coding standard that is used

00:34:09,820 --> 00:34:14,740
in each code base so code sniffer

00:34:12,730 --> 00:34:16,690
highlights this really quick because it

00:34:14,740 --> 00:34:19,210
was coach sniffer it can sniff your code

00:34:16,690 --> 00:34:20,530
and and look for the code smells we were

00:34:19,210 --> 00:34:23,290
talking about earlier but I can also

00:34:20,530 --> 00:34:26,140
highlight coding standard issues and you

00:34:23,290 --> 00:34:30,730
can create rules to to tell it what to

00:34:26,140 --> 00:34:33,520
look for in most most a lot of people

00:34:30,730 --> 00:34:35,800
use it via command line but a lot of IDE

00:34:33,520 --> 00:34:37,690
s also have code sniffer kind of built

00:34:35,800 --> 00:34:40,720
in where you can have that watch your

00:34:37,690 --> 00:34:42,610
code interactively I generally don't

00:34:40,720 --> 00:34:45,100
have it run interactively I like telling

00:34:42,610 --> 00:34:48,220
it to run because I don't want it to nag

00:34:45,100 --> 00:34:49,110
me as I'm typing so I generally do it

00:34:48,220 --> 00:34:53,050
that way

00:34:49,110 --> 00:34:55,420
now along with code sniffer probably my

00:34:53,050 --> 00:34:58,750
third most popular tool is PHP

00:34:55,420 --> 00:35:02,050
compatibility so PHP compatibility is a

00:34:58,750 --> 00:35:05,530
set of sniffs that you can use with code

00:35:02,050 --> 00:35:08,770
sniffer and what the reason I like PHP

00:35:05,530 --> 00:35:12,070
compatibility is because it tells you if

00:35:08,770 --> 00:35:15,310
your code is compatible across versions

00:35:12,070 --> 00:35:17,890
of PHP so probably one of the most

00:35:15,310 --> 00:35:20,320
common questions I get especially over

00:35:17,890 --> 00:35:22,960
the last four or five years is how can I

00:35:20,320 --> 00:35:24,730
tell if my code will work on PHP seven I

00:35:22,960 --> 00:35:27,220
installed it on the server that as PHP

00:35:24,730 --> 00:35:27,940
seven it seems to be working right but

00:35:27,220 --> 00:35:29,950
how do I

00:35:27,940 --> 00:35:32,230
that all the lines of code will work in

00:35:29,950 --> 00:35:34,569
PHP seven or seven one seven two seven

00:35:32,230 --> 00:35:36,670
three hopefully you're all one seven

00:35:34,569 --> 00:35:39,160
three I know you're not that's why I say

00:35:36,670 --> 00:35:41,230
that you should be on seven three but

00:35:39,160 --> 00:35:43,660
BHP compatibility is a great set of

00:35:41,230 --> 00:35:45,910
sniffs that tells you what you need to

00:35:43,660 --> 00:35:48,819
update in your codebase to get there

00:35:45,910 --> 00:35:51,069
right and the the the command is quite

00:35:48,819 --> 00:35:53,589
long it's actually two separate commands

00:35:51,069 --> 00:35:57,280
but I chained them together with the

00:35:53,589 --> 00:36:00,640
double ampersand so the first one is

00:35:57,280 --> 00:36:02,530
where we're building the container no

00:36:00,640 --> 00:36:04,660
actually not in this case and the in my

00:36:02,530 --> 00:36:07,390
in my image is building the container

00:36:04,660 --> 00:36:09,940
but but here it's actually defining the

00:36:07,390 --> 00:36:12,069
configuration right so it's defining the

00:36:09,940 --> 00:36:13,750
configuration set and then the second

00:36:12,069 --> 00:36:15,700
command is saying okay code sniffer now

00:36:13,750 --> 00:36:17,920
run using that configuration set I just

00:36:15,700 --> 00:36:19,900
told you about right so that's the two

00:36:17,920 --> 00:36:21,700
different commands and how they chained

00:36:19,900 --> 00:36:24,839
together and then you tell it where to

00:36:21,700 --> 00:36:27,010
output your result file at the end and

00:36:24,839 --> 00:36:29,589
the the result file is quite

00:36:27,010 --> 00:36:31,480
straightforward you know it basically

00:36:29,589 --> 00:36:33,789
tells you here's the file that we

00:36:31,480 --> 00:36:35,890
analyzed we found two errors in this

00:36:33,789 --> 00:36:37,809
file and here are the errors right and

00:36:35,890 --> 00:36:39,849
it lists those it tells you the line of

00:36:37,809 --> 00:36:42,160
code that the error was on and it tells

00:36:39,849 --> 00:36:45,010
you the details about the error it tells

00:36:42,160 --> 00:36:47,380
you exactly what you need to change it

00:36:45,010 --> 00:36:50,650
does everything but do it for you all

00:36:47,380 --> 00:36:53,289
right so that being said please use PHP

00:36:50,650 --> 00:36:54,819
compatibility or if you don't feel

00:36:53,289 --> 00:36:56,619
comfortable doing it you can always hire

00:36:54,819 --> 00:36:58,299
me and I can come and run it for you and

00:36:56,619 --> 00:37:02,140
tell you what you need to update your

00:36:58,299 --> 00:37:04,089
code but we and many customers do that

00:37:02,140 --> 00:37:05,950
because we also do upgrade the code base

00:37:04,089 --> 00:37:09,059
for them but I'm basically just doing

00:37:05,950 --> 00:37:12,160
what the what this report tells me to do

00:37:09,059 --> 00:37:13,930
so there are some other tools out there

00:37:12,160 --> 00:37:16,000
so commercial products what like

00:37:13,930 --> 00:37:17,289
scrutinise err and some others some of

00:37:16,000 --> 00:37:20,650
you might be using scrutinise err

00:37:17,289 --> 00:37:22,930
there's also a tool from from my company

00:37:20,650 --> 00:37:24,910
I'm a consultant at rogue wave who

00:37:22,930 --> 00:37:29,200
acquired Xen technologies a couple years

00:37:24,910 --> 00:37:31,779
ago we have a server and z-ray z-ray

00:37:29,200 --> 00:37:33,819
allows you it's like a browser toolbar

00:37:31,779 --> 00:37:36,250
that as you're rendering your

00:37:33,819 --> 00:37:39,369
application in the toolbar it gives you

00:37:36,250 --> 00:37:40,930
statics aesthetic data on your

00:37:39,369 --> 00:37:41,770
application as it's running tells you

00:37:40,930 --> 00:37:44,140
the time

00:37:41,770 --> 00:37:45,940
it took each function to be ran each

00:37:44,140 --> 00:37:48,250
class to be run tells you all your

00:37:45,940 --> 00:37:51,100
objects your your variables everything

00:37:48,250 --> 00:37:53,350
as you're going now is something that

00:37:51,100 --> 00:37:55,300
this talk really isn't so much about the

00:37:53,350 --> 00:37:58,450
performance this talk is more about

00:37:55,300 --> 00:38:01,120
getting analysis of your code but if you

00:37:58,450 --> 00:38:03,780
wanted a tech test performance you could

00:38:01,120 --> 00:38:06,130
also use something like Apache bench or

00:38:03,780 --> 00:38:08,170
or there's some other tools out there

00:38:06,130 --> 00:38:10,570
too that are quite popular but I like

00:38:08,170 --> 00:38:12,670
Apache bench because in a nutshell it

00:38:10,570 --> 00:38:14,830
does kind of relate to code quality

00:38:12,670 --> 00:38:16,420
because if your code is is not written

00:38:14,830 --> 00:38:17,620
optimally then of course your

00:38:16,420 --> 00:38:19,540
application is not going to run really

00:38:17,620 --> 00:38:21,460
fast so Apache bench gives me a good

00:38:19,540 --> 00:38:23,980
snapshot of that I can really quickly

00:38:21,460 --> 00:38:26,800
throw you know for a for instance like

00:38:23,980 --> 00:38:28,840
here I can throw you know 10 connections

00:38:26,800 --> 00:38:32,320
that my application at one time and say

00:38:28,840 --> 00:38:34,570
ok what how fast does it run and it

00:38:32,320 --> 00:38:36,700
tells you the average time taken like 10

00:38:34,570 --> 00:38:39,760
seconds here the completed requests were

00:38:36,700 --> 00:38:41,200
96 that's only 96 requests over 10

00:38:39,760 --> 00:38:42,670
seconds that's not very good I might

00:38:41,200 --> 00:38:45,610
need to pay attention to my code right

00:38:42,670 --> 00:38:49,570
but anyway it gives you a good nuts and

00:38:45,610 --> 00:38:52,180
bolts idea of where to go now I've given

00:38:49,570 --> 00:38:54,160
you a lot of tools to run and I've

00:38:52,180 --> 00:38:56,140
showed you the commands for them but

00:38:54,160 --> 00:38:58,210
what you should be running these things

00:38:56,140 --> 00:38:59,980
automated you shouldn't have to run them

00:38:58,210 --> 00:39:02,220
all by yourself you should run them

00:38:59,980 --> 00:39:04,240
through an automated phantom ated way

00:39:02,220 --> 00:39:06,460
especially if with continuous delivery

00:39:04,240 --> 00:39:09,160
things like that it should just be one

00:39:06,460 --> 00:39:11,080
item in your in your push whether you're

00:39:09,160 --> 00:39:13,210
using Jenkins whether you're using you

00:39:11,080 --> 00:39:16,000
know bamboo or any other continuous

00:39:13,210 --> 00:39:19,240
delivery method you know please automate

00:39:16,000 --> 00:39:22,990
it have these tools work for you now

00:39:19,240 --> 00:39:25,900
generally I don't fail a build on static

00:39:22,990 --> 00:39:28,330
analysis but I do have static analysis

00:39:25,900 --> 00:39:32,830
generate reports as it's doing the

00:39:28,330 --> 00:39:36,010
pushes excuse me and then I can analyze

00:39:32,830 --> 00:39:38,730
analyze those reports afterwards now I

00:39:36,010 --> 00:39:42,760
do usually build into my version control

00:39:38,730 --> 00:39:44,860
some code analysis for instance if it's

00:39:42,760 --> 00:39:46,990
if somebody is trying to commit code

00:39:44,860 --> 00:39:49,390
that doesn't meet my coding standard I

00:39:46,990 --> 00:39:51,250
will fail that I'm not gonna let you

00:39:49,390 --> 00:39:54,310
push code into the repo if it doesn't

00:39:51,250 --> 00:39:55,710
meet the coding standard however if it's

00:39:54,310 --> 00:39:58,349
if cyclomatic complexity

00:39:55,710 --> 00:39:59,790
hi I might I'll let you do that right

00:39:58,349 --> 00:40:01,890
I'll let you commit that because we can

00:39:59,790 --> 00:40:02,970
refactor that later but coding standard

00:40:01,890 --> 00:40:05,070
is something that shouldn't be a

00:40:02,970 --> 00:40:06,930
refactoring item it should be something

00:40:05,070 --> 00:40:09,359
you just do you should do coding

00:40:06,930 --> 00:40:13,349
standard to a set standard all the time

00:40:09,359 --> 00:40:14,970
before you even commit the code maybe

00:40:13,349 --> 00:40:19,650
the codes not the cleanest but at least

00:40:14,970 --> 00:40:21,900
the coding standard is in place so in

00:40:19,650 --> 00:40:23,520
conclusion some of the things we covered

00:40:21,900 --> 00:40:25,410
here make sure you're measuring

00:40:23,520 --> 00:40:27,150
everything make sure you have some sort

00:40:25,410 --> 00:40:29,910
of tools some sort of things out there

00:40:27,150 --> 00:40:32,070
to measure all of your code don't fear

00:40:29,910 --> 00:40:33,839
the results share them whenever I get

00:40:32,070 --> 00:40:36,839
the results from the continuous delivery

00:40:33,839 --> 00:40:38,790
and it's outputting the results of PHP

00:40:36,839 --> 00:40:41,040
mess detector everything share it across

00:40:38,790 --> 00:40:43,109
your team let everybody view it let the

00:40:41,040 --> 00:40:46,200
business view it let them see the

00:40:43,109 --> 00:40:48,030
results a Laughton developers will ask

00:40:46,200 --> 00:40:49,920
me well how do I get the business to

00:40:48,030 --> 00:40:52,800
allow me to do these things how do I get

00:40:49,920 --> 00:40:55,020
the business to allow me to do PHP units

00:40:52,800 --> 00:40:56,910
and and unit testing and all these other

00:40:55,020 --> 00:40:59,460
things because they're in a hurry they

00:40:56,910 --> 00:41:01,170
don't want to give me time for that you

00:40:59,460 --> 00:41:04,170
want to share these reports with them

00:41:01,170 --> 00:41:06,960
and you want them to see the trash that

00:41:04,170 --> 00:41:08,369
they're making you create right and and

00:41:06,960 --> 00:41:09,930
then when they come back to you and they

00:41:08,369 --> 00:41:12,359
say well hey our customers found this

00:41:09,930 --> 00:41:13,950
bug how can you write this bad code you

00:41:12,359 --> 00:41:16,440
can say well here's the report I've been

00:41:13,950 --> 00:41:17,369
showing you that I you know I have to

00:41:16,440 --> 00:41:19,560
create it this way because you're

00:41:17,369 --> 00:41:21,510
pushing me into it right put put the

00:41:19,560 --> 00:41:24,000
ownership on them because they are the

00:41:21,510 --> 00:41:26,310
owners you are just the developers right

00:41:24,000 --> 00:41:28,380
when when you call somebody out to build

00:41:26,310 --> 00:41:31,680
a cabinet for you you call somebody out

00:41:28,380 --> 00:41:33,180
to fix some plumbing in your house you

00:41:31,680 --> 00:41:34,859
know you don't go back and blame them

00:41:33,180 --> 00:41:36,300
later if something broke because you

00:41:34,859 --> 00:41:40,890
told them to use substandard equipment

00:41:36,300 --> 00:41:41,960
and substandard you know sort of piping

00:41:40,890 --> 00:41:44,760
or what have you

00:41:41,960 --> 00:41:46,770
you're to blame right because because

00:41:44,760 --> 00:41:49,410
you asked them to go cheap

00:41:46,770 --> 00:41:51,030
instead of going good well if your boss

00:41:49,410 --> 00:41:51,630
is telling you to go cheap instead of

00:41:51,030 --> 00:41:54,060
going good

00:41:51,630 --> 00:41:56,030
let them own that let them own it and

00:41:54,060 --> 00:41:58,619
you can do that by sharing the reports

00:41:56,030 --> 00:42:00,300
reduce the complexity always reduce the

00:41:58,619 --> 00:42:02,940
complexity of your application always

00:42:00,300 --> 00:42:04,800
strive to get your cyclomatic complexity

00:42:02,940 --> 00:42:05,910
to really low your end path complexity

00:42:04,800 --> 00:42:08,609
keep it nice and low

00:42:05,910 --> 00:42:12,210
leave the code cleaner than you found it

00:42:08,609 --> 00:42:14,040
learn to smell problems in your code use

00:42:12,210 --> 00:42:15,839
you can use code sniffer Anette but a

00:42:14,040 --> 00:42:17,490
lot of times you can look at code and

00:42:15,839 --> 00:42:18,869
know that it's bad right you just look

00:42:17,490 --> 00:42:21,180
at it you're like oh that just looks

00:42:18,869 --> 00:42:22,920
confusing to me if it looks confusing

00:42:21,180 --> 00:42:24,180
because you're spending seventy five or

00:42:22,920 --> 00:42:26,580
seventy percent of your time reading

00:42:24,180 --> 00:42:29,849
code if it looks confusing to you it is

00:42:26,580 --> 00:42:33,089
confusing so clean that up that is that

00:42:29,849 --> 00:42:34,800
is a code smell now through refactoring

00:42:33,089 --> 00:42:38,010
you want to do refactoring in small

00:42:34,800 --> 00:42:40,500
little steps you want to do small things

00:42:38,010 --> 00:42:42,660
make sure you have tests in place if you

00:42:40,500 --> 00:42:44,430
don't have tests in place now I'm not

00:42:42,660 --> 00:42:47,130
saying unit tests because I realize all

00:42:44,430 --> 00:42:49,680
code bases are not unit tests ready they

00:42:47,130 --> 00:42:52,230
should be but they're not all unit tests

00:42:49,680 --> 00:42:54,230
ready you should at least have some form

00:42:52,230 --> 00:42:57,060
of tests even if it's just an Excel

00:42:54,230 --> 00:42:59,190
workbook with a you know test this test

00:42:57,060 --> 00:43:02,310
this test is you know a line-by-line

00:42:59,190 --> 00:43:04,830
even if it's that sort of test you got

00:43:02,310 --> 00:43:07,349
to have some sort of tests right even if

00:43:04,830 --> 00:43:09,750
it's just that learn to love iteration

00:43:07,349 --> 00:43:12,390
development is iterative everything we

00:43:09,750 --> 00:43:14,609
do is iterative again we don't write

00:43:12,390 --> 00:43:17,730
clean code the first time we write clean

00:43:14,609 --> 00:43:21,450
code through iteration iteration is the

00:43:17,730 --> 00:43:23,430
easiest way to fix bad things and you do

00:43:21,450 --> 00:43:26,700
it iteratively little little steps

00:43:23,430 --> 00:43:29,910
don't don't refactor a great big thing

00:43:26,700 --> 00:43:32,520
refactor lots of small things and do

00:43:29,910 --> 00:43:36,599
them iteratively some resources that I

00:43:32,520 --> 00:43:38,609
have of course on github exa ket they

00:43:36,599 --> 00:43:40,950
have the the static analysis tools

00:43:38,609 --> 00:43:43,560
listing it's a great exhaustive list

00:43:40,950 --> 00:43:48,270
PHP metrics org is one of the tools that

00:43:43,560 --> 00:43:50,520
I showed you great tool on github you

00:43:48,270 --> 00:43:54,000
can find the the docker image that I

00:43:50,520 --> 00:43:55,530
have there at PHP - code - quality is

00:43:54,000 --> 00:43:58,410
end of course if you wanted to use end

00:43:55,530 --> 00:44:00,570
server and z ray please rate this talk

00:43:58,410 --> 00:44:03,390
you can also find some other information

00:44:00,570 --> 00:44:04,140
from me I have a tech blog at geeky boy

00:44:03,390 --> 00:44:06,119
com

00:44:04,140 --> 00:44:07,880
I get a lot of traffic out there because

00:44:06,119 --> 00:44:11,730
I have a lot of good blog posts about

00:44:07,880 --> 00:44:14,160
code coding things along that line run

00:44:11,730 --> 00:44:16,950
geek radio if you like podcasts it's a

00:44:14,160 --> 00:44:18,869
podcast that I do I get at least one

00:44:16,950 --> 00:44:20,280
episode a month out there where I talk a

00:44:18,869 --> 00:44:21,380
few minutes about running because I like

00:44:20,280 --> 00:44:24,680
to run a little bit

00:44:21,380 --> 00:44:27,170
and I talk a lot about a lot about

00:44:24,680 --> 00:44:29,359
technology but run geek radio isn't

00:44:27,170 --> 00:44:30,920
really too technical it's mostly soft

00:44:29,359 --> 00:44:33,380
skills it's about how do you work better

00:44:30,920 --> 00:44:35,809
with the team how do you at advance your

00:44:33,380 --> 00:44:38,450
career things like that that that's the

00:44:35,809 --> 00:44:41,900
podcast I mean while Beach casts that is

00:44:38,450 --> 00:44:45,349
technical that is hands-on coding on on

00:44:41,900 --> 00:44:47,239
YouTube I do it live on Twitch and then

00:44:45,349 --> 00:44:49,130
after I finished doing it at twitch then

00:44:47,239 --> 00:44:51,440
I export it out to YouTube so people can

00:44:49,130 --> 00:44:53,809
find it more broadly and of course you

00:44:51,440 --> 00:44:56,450
can find me on Twitter and Adam Culp I

00:44:53,809 --> 00:45:00,739
think how many we have some time for

00:44:56,450 --> 00:45:02,390
questions yes okay so I have some time

00:45:00,739 --> 00:45:12,739
for questions but that's it for the talk

00:45:02,390 --> 00:45:14,720
thank you for coming yes that's why we

00:45:12,739 --> 00:45:16,970
get hold of that PowerPoint presentation

00:45:14,720 --> 00:45:19,190
can we yeah so I'm going to link the

00:45:16,970 --> 00:45:21,979
presentation to joined in so why as

00:45:19,190 --> 00:45:24,170
you're joined in rating this talk and

00:45:21,979 --> 00:45:25,579
leaving me feedback please download the

00:45:24,170 --> 00:45:27,380
slides I haven't linked them yet but I

00:45:25,579 --> 00:45:28,700
will do that immediately yet following

00:45:27,380 --> 00:45:31,789
this I made a couple little changes

00:45:28,700 --> 00:45:34,190
prior to actually I given this talk

00:45:31,789 --> 00:45:35,839
probably fifty times but I changed it

00:45:34,190 --> 00:45:37,880
slides a little bit and modernize them

00:45:35,839 --> 00:45:39,950
each talk so I need to get a new version

00:45:37,880 --> 00:45:41,809
out there on SlideShare if you want to

00:45:39,950 --> 00:45:43,789
search for the slides before there I

00:45:41,809 --> 00:45:45,739
linked them on joint then though just go

00:45:43,789 --> 00:45:47,859
to SlideShare and do a search for Adam

00:45:45,739 --> 00:45:52,329
called all my talks are out there

00:45:47,859 --> 00:45:55,729
anybody else any questions hello back

00:45:52,329 --> 00:45:59,180
Adam that was great talk digging really

00:45:55,729 --> 00:46:02,420
enjoyed it you taught me some tools

00:45:59,180 --> 00:46:05,359
listen feedback here but that I haven't

00:46:02,420 --> 00:46:11,839
used so that's great that the question I

00:46:05,359 --> 00:46:15,229
have is which metrics you find have the

00:46:11,839 --> 00:46:21,279
most impact with your clients for

00:46:15,229 --> 00:46:25,640
instance I find that impart complexity

00:46:21,279 --> 00:46:28,249
represents complexity better than

00:46:25,640 --> 00:46:30,410
cyclomatic complexity in a sort of

00:46:28,249 --> 00:46:32,950
visual way does that make sense yes it

00:46:30,410 --> 00:46:36,230
does so

00:46:32,950 --> 00:46:38,090
so I think I find differently I find

00:46:36,230 --> 00:46:41,000
cyclomatic complexity is a much more

00:46:38,090 --> 00:46:43,700
important metric if your cyclomatic

00:46:41,000 --> 00:46:45,230
complexity is kept low chances are your

00:46:43,700 --> 00:46:47,780
end passed complexity is going to follow

00:46:45,230 --> 00:46:50,060
right but the other way is not always

00:46:47,780 --> 00:46:52,100
true you can get your in path complexity

00:46:50,060 --> 00:46:54,530
to be very low but yet your cyclomatic

00:46:52,100 --> 00:46:56,690
complexity can be pretty ugly right so

00:46:54,530 --> 00:47:01,730
that's why I try to focus mostly on

00:46:56,690 --> 00:47:03,830
cyclomatic complexity so it at times and

00:47:01,730 --> 00:47:06,620
path complexity is okay to be high if

00:47:03,830 --> 00:47:08,390
you're using reflection yours like your

00:47:06,620 --> 00:47:09,740
end path complexity is going to be very

00:47:08,390 --> 00:47:11,990
high but you might have a cyclonite

00:47:09,740 --> 00:47:13,180
complexity of one right or two or

00:47:11,990 --> 00:47:18,110
whatever the case might be

00:47:13,180 --> 00:47:20,180
so because reflection is is is that has

00:47:18,110 --> 00:47:23,810
an high end path complexity out of the

00:47:20,180 --> 00:47:25,010
gate at a very little cost so that being

00:47:23,810 --> 00:47:27,890
said that I mean that's that probably

00:47:25,010 --> 00:47:31,070
the most important is that understanding

00:47:27,890 --> 00:47:33,080
the lines of code and the number of

00:47:31,070 --> 00:47:34,610
comments of lines of code is very

00:47:33,080 --> 00:47:37,220
important I would say that's my number

00:47:34,610 --> 00:47:41,630
two and then end path complexity would

00:47:37,220 --> 00:47:46,760
probably be my number three we have one

00:47:41,630 --> 00:47:48,080
up here yep if there's any other

00:47:46,760 --> 00:47:51,230
questions raise your hand so they can

00:47:48,080 --> 00:47:55,520
get ready to bring a mic to you have you

00:47:51,230 --> 00:47:58,130
used any AI power tools like coda C and

00:47:55,520 --> 00:48:02,540
how do you compare all of these tools to

00:47:58,130 --> 00:48:06,790
it with chorus for example so I have

00:48:02,540 --> 00:48:09,230
used courtesy but very limited.i I

00:48:06,790 --> 00:48:12,080
generally like to have keep things close

00:48:09,230 --> 00:48:14,180
so that's why I like using these tools

00:48:12,080 --> 00:48:16,730
because I can use them via command-line

00:48:14,180 --> 00:48:20,360
really closely and I can include them in

00:48:16,730 --> 00:48:21,860
my in my deployment much easier I don't

00:48:20,360 --> 00:48:24,470
like having a point of failure with

00:48:21,860 --> 00:48:26,450
something remote but but that being said

00:48:24,470 --> 00:48:28,460
I don't mean it to be a bad thing I just

00:48:26,450 --> 00:48:34,250
don't use it personally so I don't I

00:48:28,460 --> 00:48:38,540
can't speak much to it sorry anybody

00:48:34,250 --> 00:48:41,750
else any other questions hi you

00:48:38,540 --> 00:48:43,350
mentioned failing commits would you use

00:48:41,750 --> 00:48:46,320
that for work

00:48:43,350 --> 00:48:48,150
or what I will how would you check that

00:48:46,320 --> 00:48:49,470
make sure the developer checked out that

00:48:48,150 --> 00:48:52,350
pre-commit hook because obviously do you

00:48:49,470 --> 00:48:55,770
don't get up on the repo right so so as

00:48:52,350 --> 00:48:57,780
their so in in your commit hooks I mean

00:48:55,770 --> 00:48:59,070
as your as you're doing your polls you

00:48:57,780 --> 00:49:00,360
know if you're using get for instance

00:48:59,070 --> 00:49:03,270
you're doing a poll your committee hooks

00:49:00,360 --> 00:49:04,830
gonna come with it right so so yeah you

00:49:03,270 --> 00:49:06,660
want to make sure that you have you have

00:49:04,830 --> 00:49:09,150
your your hooks in there to run these

00:49:06,660 --> 00:49:12,600
tools especially on commit now I'm not

00:49:09,150 --> 00:49:13,920
doing I'm not doing like a PHP mess

00:49:12,600 --> 00:49:16,530
detector a Zagat hook

00:49:13,920 --> 00:49:18,720
I'm only doing code sniffer and running

00:49:16,530 --> 00:49:20,340
that versus the coding standard I mean

00:49:18,720 --> 00:49:21,990
that's the only thing that I really run

00:49:20,340 --> 00:49:23,310
is a commit hook there are other things

00:49:21,990 --> 00:49:24,870
you might want to run as a commit but

00:49:23,310 --> 00:49:26,880
that's just I mean that's the number one

00:49:24,870 --> 00:49:28,590
as far as code measure as far as code

00:49:26,880 --> 00:49:30,240
quality measurement that's really the

00:49:28,590 --> 00:49:32,250
only one that I run for code quality is

00:49:30,240 --> 00:49:35,700
code sniffer it's it's lightweight it

00:49:32,250 --> 00:49:38,550
runs really quick and it will fail and

00:49:35,700 --> 00:49:41,250
say sorry you can't commit that or you

00:49:38,550 --> 00:49:43,350
can't push it so so that's very

00:49:41,250 --> 00:49:45,480
important the other the other quality

00:49:43,350 --> 00:49:48,390
measurements that I use are within the

00:49:45,480 --> 00:49:50,610
pipeline as I'm doing deployments and

00:49:48,390 --> 00:49:52,500
and they don't necessarily fail a build

00:49:50,610 --> 00:49:55,050
right I don't necessarily fail a build

00:49:52,500 --> 00:49:57,720
but I do want the artifacts so I can go

00:49:55,050 --> 00:50:00,000
back and look at those later I do spend

00:49:57,720 --> 00:50:02,160
I do spend a lot of time reading the

00:50:00,000 --> 00:50:04,020
reports that are generated through the

00:50:02,160 --> 00:50:06,540
deployments and that's ultimately

00:50:04,020 --> 00:50:09,210
important because then you know you can

00:50:06,540 --> 00:50:11,360
you can't properly manage a team if you

00:50:09,210 --> 00:50:14,910
don't have the metrics to manage a team

00:50:11,360 --> 00:50:17,820
you can't it's easy it's easy for a

00:50:14,910 --> 00:50:20,190
developer to get caught heads down and

00:50:17,820 --> 00:50:22,260
constantly jumping down rabbit holes and

00:50:20,190 --> 00:50:23,400
look very busy and they look like

00:50:22,260 --> 00:50:24,930
they're working really hard

00:50:23,400 --> 00:50:26,730
you need to quantify that though you

00:50:24,930 --> 00:50:29,760
need to know is that person working

00:50:26,730 --> 00:50:31,230
smart not just hard then the only way to

00:50:29,760 --> 00:50:33,660
know if they're working smart is to

00:50:31,230 --> 00:50:36,290
properly measure the code so so it's

00:50:33,660 --> 00:50:36,290

YouTube URL: https://www.youtube.com/watch?v=dVu1AShtuQo


