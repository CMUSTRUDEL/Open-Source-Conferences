Title: Building first-class REST APIs with Symfony - Michael Cullum - PHP UK Conference 2019
Publication date: 2019-04-02
Playlist: PHP UK Conference 2019
Description: 
	Building REST APIs is becoming an ever more common task for PHP developers to do and whilst the task may often sound simple in that it involves reading some input, and getting (or persisting) to a data source and returning some JSON, there are a lot of common pitfalls and complications that you might encounter along the way. In this talk we'll look at how we can build a simple maintainable REST API using the Symfony components that can perform some simple operations in ways that are clean and simple.
Captions: 
	00:00:03,589 --> 00:00:07,919
we're here to talk about building first

00:00:05,879 --> 00:00:10,019
class versus api's Symphony my name is

00:00:07,919 --> 00:00:12,360
Michael Calum that's my twitter handle

00:00:10,019 --> 00:00:14,519
I'm up here for the next sort of 15

00:00:12,360 --> 00:00:17,640
minutes or whatever so feel free to

00:00:14,519 --> 00:00:20,130
tweet abuse at me or feedback or just

00:00:17,640 --> 00:00:21,600
photos or slides that kind of thing my

00:00:20,130 --> 00:00:24,449
twitter handle will be in the corner of

00:00:21,600 --> 00:00:25,619
all my slides anyway i work for a

00:00:24,449 --> 00:00:28,769
company called bud

00:00:25,619 --> 00:00:32,309
i actually started working for them two

00:00:28,769 --> 00:00:34,530
weeks ago now but we're hiring we do

00:00:32,309 --> 00:00:36,120
cool stuff with smart money management

00:00:34,530 --> 00:00:37,739
and marketplace and all that kind of

00:00:36,120 --> 00:00:39,660
jazz so if you're interested in api is

00:00:37,739 --> 00:00:40,770
and data and security and that kind of

00:00:39,660 --> 00:00:42,090
stuff

00:00:40,770 --> 00:00:44,850
we've actually got a booth downstairs to

00:00:42,090 --> 00:00:46,829
come chat to us I'm part of the symphony

00:00:44,850 --> 00:00:49,469
core team and the security leap symphony

00:00:46,829 --> 00:00:51,510
so if any of you guys want to chat about

00:00:49,469 --> 00:00:54,149
security or symphony again come chat to

00:00:51,510 --> 00:00:55,770
me and then finally the PHP fake I'm

00:00:54,149 --> 00:00:57,750
part of the call committee so they're

00:00:55,770 --> 00:01:00,270
kind of the technical steering group for

00:00:57,750 --> 00:01:02,070
the sort of Figg generally but I also

00:01:00,270 --> 00:01:06,090
need the security working group as a

00:01:02,070 --> 00:01:10,140
security theme there yeah so we're here

00:01:06,090 --> 00:01:11,580
to talk about api's and very

00:01:10,140 --> 00:01:16,670
specifically we're kind of here to talk

00:01:11,580 --> 00:01:20,040
about rest who's used a REST API before

00:01:16,670 --> 00:01:23,729
almost everyone who thinks they know

00:01:20,040 --> 00:01:25,049
what a REST API is okay interesting

00:01:23,729 --> 00:01:27,210
because there are a bunch of people that

00:01:25,049 --> 00:01:29,520
said they've used the REST API but don't

00:01:27,210 --> 00:01:33,570
think they know what a REST API is so

00:01:29,520 --> 00:01:35,479
what actually is a REST API and REST API

00:01:33,570 --> 00:01:38,790
is have been around a really long time

00:01:35,479 --> 00:01:41,189
it actually originates in 2000 when

00:01:38,790 --> 00:01:44,040
there was a paper by a guy called a guy

00:01:41,189 --> 00:01:46,649
called Roy fielding it was an academic

00:01:44,040 --> 00:01:50,340
paper it was incredibly dry it's very

00:01:46,649 --> 00:01:52,829
boring I would recommend reading it but

00:01:50,340 --> 00:01:56,329
like you might want to like read it in

00:01:52,829 --> 00:01:58,320
bite-sized chunks it's a bit boring and

00:01:56,329 --> 00:02:02,460
rest what it actually is this

00:01:58,320 --> 00:02:05,100
representational state transfer so what

00:02:02,460 --> 00:02:09,149
does that mean and obviously that's

00:02:05,100 --> 00:02:10,069
where you get the re s T but we're

00:02:09,149 --> 00:02:12,209
looking at representing a

00:02:10,069 --> 00:02:13,040
representational straight state

00:02:12,209 --> 00:02:14,840
transverse

00:02:13,040 --> 00:02:16,670
it's all about how we can communicate

00:02:14,840 --> 00:02:19,970
one thing from another how we can

00:02:16,670 --> 00:02:21,680
communicate state state is all about

00:02:19,970 --> 00:02:23,360
like what what does a system that like

00:02:21,680 --> 00:02:25,640
the state of me right now is I'm on

00:02:23,360 --> 00:02:27,200
stage I may or my name is Michael some

00:02:25,640 --> 00:02:29,390
of these things are relatively immutable

00:02:27,200 --> 00:02:31,040
some of these things might change the

00:02:29,390 --> 00:02:32,599
fact like later on I will not be on

00:02:31,040 --> 00:02:38,209
stage so part of my state will have

00:02:32,599 --> 00:02:39,379
changed in order for this in this paper

00:02:38,209 --> 00:02:43,010
that there are a series of different

00:02:39,379 --> 00:02:44,150
principles that Roy the Roy suggests and

00:02:43,010 --> 00:02:47,739
these are the things that you actually

00:02:44,150 --> 00:02:50,269
need in order to comply with rest

00:02:47,739 --> 00:02:52,280
because actually the the spec doesn't

00:02:50,269 --> 00:02:54,019
mention anything about HTTP verbs we'll

00:02:52,280 --> 00:02:55,129
come on to that later but and that's

00:02:54,019 --> 00:02:57,139
what people think of when they think of

00:02:55,129 --> 00:02:59,120
recio's HTTP verb status codes all that

00:02:57,139 --> 00:03:01,879
kind of stuff and for 100% you should

00:02:59,120 --> 00:03:04,459
use them but that's not what the the

00:03:01,879 --> 00:03:08,180
spec is really about so the first one is

00:03:04,459 --> 00:03:10,430
uniform interface a uniform interface is

00:03:08,180 --> 00:03:11,930
can actually be divided into a bunch of

00:03:10,430 --> 00:03:14,000
sort of smaller categories which I think

00:03:11,930 --> 00:03:17,629
kind of been much better way of

00:03:14,000 --> 00:03:19,489
explaining it so the thing about a

00:03:17,629 --> 00:03:21,440
uniform interface is it means that every

00:03:19,489 --> 00:03:23,510
single REST API kind of should look the

00:03:21,440 --> 00:03:25,430
same once you know how to interact with

00:03:23,510 --> 00:03:27,260
one REST API you should know how to look

00:03:25,430 --> 00:03:29,209
with and how to look at every REST API

00:03:27,260 --> 00:03:30,470
it should be really simple to use you

00:03:29,209 --> 00:03:33,349
shouldn't have to have a guide on how

00:03:30,470 --> 00:03:36,769
you can request data or what that data

00:03:33,349 --> 00:03:37,790
looks like or anything like that and

00:03:36,769 --> 00:03:39,859
there are series of different sort of

00:03:37,790 --> 00:03:41,959
things that you can do to achieve one of

00:03:39,859 --> 00:03:45,639
them is your URL should be resource

00:03:41,959 --> 00:03:52,669
based so for example you might have

00:03:45,639 --> 00:03:54,260
slash users slash one slash comments so

00:03:52,669 --> 00:03:55,790
you're all of it and but that shouldn't

00:03:54,260 --> 00:03:57,829
necessarily correspond to what is in

00:03:55,790 --> 00:04:01,329
your database in your database it should

00:03:57,829 --> 00:04:01,329
be different it should be resource based

00:04:01,419 --> 00:04:07,879
anything another part of the Uniform

00:04:04,340 --> 00:04:10,609
interface is the ability to manipulate

00:04:07,879 --> 00:04:12,530
your your state through representations

00:04:10,609 --> 00:04:14,120
and what that means is if you've done a

00:04:12,530 --> 00:04:16,849
get on something if you have a

00:04:14,120 --> 00:04:18,680
representation of an object then you

00:04:16,849 --> 00:04:21,139
should have everything you need in order

00:04:18,680 --> 00:04:23,450
to modify that I should be able to do a

00:04:21,139 --> 00:04:24,860
put for example and I should have all

00:04:23,450 --> 00:04:26,840
the different fields that I need for

00:04:24,860 --> 00:04:28,550
that it should be able to give you F

00:04:26,840 --> 00:04:31,850
thing that you are able to then modify

00:04:28,550 --> 00:04:34,510
back it should be self to self

00:04:31,850 --> 00:04:37,220
descriptive so use meme my a me types

00:04:34,510 --> 00:04:38,900
say if you're sending Jason if you're

00:04:37,220 --> 00:04:40,280
expecting Jason if you're expecting yeah

00:04:38,900 --> 00:04:41,930
mold and say you're expecting yeah more

00:04:40,280 --> 00:04:44,720
if you say you're expecting or receive

00:04:41,930 --> 00:04:48,320
it or sending XML and say it although

00:04:44,720 --> 00:04:50,870
who wants to send XML when really anyway

00:04:48,320 --> 00:04:54,500
and then finally saying that a lot of

00:04:50,870 --> 00:04:57,470
people talk about is hate hate oh oh oh

00:04:54,500 --> 00:04:59,660
a s which means hypermedia as an engine

00:04:57,470 --> 00:05:02,690
of application state and what that

00:04:59,660 --> 00:05:03,560
basically means is you're you're

00:05:02,690 --> 00:05:06,139
transmitting stuff

00:05:03,560 --> 00:05:08,510
/ - media which means use it so that

00:05:06,139 --> 00:05:15,710
means link - if you're doing pagination

00:05:08,510 --> 00:05:17,570
then link to that if you're represent

00:05:15,710 --> 00:05:19,940
for a blog post and you mention an

00:05:17,570 --> 00:05:22,280
author then have a link to more details

00:05:19,940 --> 00:05:24,020
about that author and that's a really

00:05:22,280 --> 00:05:25,490
important part of rests that nobody

00:05:24,020 --> 00:05:27,740
really does because they don't think it

00:05:25,490 --> 00:05:30,080
matters but the whole point of the

00:05:27,740 --> 00:05:32,270
uniform interface is that you shouldn't

00:05:30,080 --> 00:05:33,800
every single arrest API should be the

00:05:32,270 --> 00:05:37,700
same it should be really easy to get

00:05:33,800 --> 00:05:38,840
started with a brand new REST API so the

00:05:37,700 --> 00:05:41,320
next principle is that it should be

00:05:38,840 --> 00:05:44,240
stateless and what this means is that

00:05:41,320 --> 00:05:46,849
you shouldn't have any sessions sessions

00:05:44,240 --> 00:05:48,770
just shouldn't exist in AP is everything

00:05:46,849 --> 00:05:50,389
that you need in order to be able to

00:05:48,770 --> 00:05:52,220
complete that request should be

00:05:50,389 --> 00:05:54,979
self-contained in that one request I

00:05:52,220 --> 00:05:58,370
should be able to you should be able to

00:05:54,979 --> 00:05:59,930
give me a curl command that you've run

00:05:58,370 --> 00:06:01,760
and I should be able to go and run that

00:05:59,930 --> 00:06:04,550
on my machine on and that should just

00:06:01,760 --> 00:06:07,130
work fine so your authentication tokens

00:06:04,550 --> 00:06:08,960
or and all that kind of stuff it needs

00:06:07,130 --> 00:06:10,580
to be actually in the body and headers

00:06:08,960 --> 00:06:14,570
in the query string in the resource your

00:06:10,580 --> 00:06:17,630
I or in the content of your request it

00:06:14,570 --> 00:06:18,889
needs to be cashable who sets cache

00:06:17,630 --> 00:06:24,169
control headers on every single one of

00:06:18,889 --> 00:06:26,300
their API so okay one person in which

00:06:24,169 --> 00:06:29,200
case none of the rest of you have all of

00:06:26,300 --> 00:06:32,330
the all of those API is truly restful

00:06:29,200 --> 00:06:37,450
even if it's not cashable you need to

00:06:32,330 --> 00:06:40,040
say explicitly that it's not cashable so

00:06:37,450 --> 00:06:41,900
this basically means that clients can

00:06:40,040 --> 00:06:43,550
say and know whether or not they can

00:06:41,900 --> 00:06:46,490
cash yet and the thing is a client

00:06:43,550 --> 00:06:49,700
doesn't necessarily mean like a browser

00:06:46,490 --> 00:06:51,740
or someone using poor or postman to

00:06:49,700 --> 00:06:53,660
interact with your API sometimes it's

00:06:51,740 --> 00:06:55,669
actually just the fact that they want to

00:06:53,660 --> 00:06:57,200
be able to it might be varnished for

00:06:55,669 --> 00:06:59,270
example you want to have all of those

00:06:57,200 --> 00:07:01,010
clients or whoever your client is being

00:06:59,270 --> 00:07:03,889
able to understand can they cash that

00:07:01,010 --> 00:07:07,970
data is that safe and not just trying to

00:07:03,889 --> 00:07:09,350
make assumptions client-server so

00:07:07,970 --> 00:07:11,030
another really important part of this is

00:07:09,350 --> 00:07:14,330
that your client and your server need to

00:07:11,030 --> 00:07:17,930
be distinguishable it needs to be you

00:07:14,330 --> 00:07:19,250
shouldn't have necessarily the your your

00:07:17,930 --> 00:07:20,510
your client shouldn't care about your

00:07:19,250 --> 00:07:22,130
database it shouldn't care about your

00:07:20,510 --> 00:07:24,890
data stores that's not its

00:07:22,130 --> 00:07:27,050
responsibility that sort sponsibility of

00:07:24,890 --> 00:07:29,690
your server so you should if you theory

00:07:27,050 --> 00:07:31,610
if you have an API spec like open API

00:07:29,690 --> 00:07:34,130
three highly recommend building your

00:07:31,610 --> 00:07:35,419
specs in that format then you should be

00:07:34,130 --> 00:07:37,340
able to build a server and you should be

00:07:35,419 --> 00:07:38,870
able to build a client completely

00:07:37,340 --> 00:07:40,790
independently just based on that

00:07:38,870 --> 00:07:43,100
specification they shouldn't have to

00:07:40,790 --> 00:07:46,780
know about anything else or any side

00:07:43,100 --> 00:07:49,880
effects or anything underlying because

00:07:46,780 --> 00:07:51,650
the actual having your servers like not

00:07:49,880 --> 00:07:57,530
being interacting differently from your

00:07:51,650 --> 00:08:00,830
clients means it's a lot more scalable a

00:07:57,530 --> 00:08:01,940
layered system so a layered system kind

00:08:00,830 --> 00:08:03,530
of goes back to what I was talking about

00:08:01,940 --> 00:08:06,590
earlier and that you shouldn't ever know

00:08:03,530 --> 00:08:08,479
if you're talking to the end user you

00:08:06,590 --> 00:08:11,810
might be talking to an intermediary and

00:08:08,479 --> 00:08:13,910
the intermediary it might be a proxy it

00:08:11,810 --> 00:08:15,890
might be that you're talking to a

00:08:13,910 --> 00:08:17,210
JavaScript application and then that

00:08:15,890 --> 00:08:19,090
JavaScript application is doing

00:08:17,210 --> 00:08:21,350
something else and talking someone else

00:08:19,090 --> 00:08:22,940
it could be the fact that you're talking

00:08:21,350 --> 00:08:26,990
to another API which is then talking to

00:08:22,940 --> 00:08:30,380
another API if any of you saw Antony's

00:08:26,990 --> 00:08:31,640
talk earlier this morning on micro

00:08:30,380 --> 00:08:33,289
services sometimes you might have one

00:08:31,640 --> 00:08:34,849
API talking to another API talk to

00:08:33,289 --> 00:08:36,919
another API and they might add security

00:08:34,849 --> 00:08:39,380
or do various different things one might

00:08:36,919 --> 00:08:42,380
be internal and one might be for your

00:08:39,380 --> 00:08:43,909
developers external developers through a

00:08:42,380 --> 00:08:45,980
marketplace to interact with your with

00:08:43,909 --> 00:08:47,630
your product so having a layered system

00:08:45,980 --> 00:08:49,280
allows you to introduce security

00:08:47,630 --> 00:08:50,110
policies for example at a different step

00:08:49,280 --> 00:08:52,240
or having DIF

00:08:50,110 --> 00:08:55,180
kinds of authentication on different

00:08:52,240 --> 00:08:57,460
api's but you shouldn't care if you are

00:08:55,180 --> 00:08:58,720
actually talking to the end user

00:08:57,460 --> 00:09:03,130
you should just care about the person

00:08:58,720 --> 00:09:05,890
you're talking to next and finally code

00:09:03,130 --> 00:09:07,470
on demand this one's really weird does

00:09:05,890 --> 00:09:09,610
anyone know what this is out of interest

00:09:07,470 --> 00:09:11,430
okay cool

00:09:09,610 --> 00:09:13,690
it's like signing you for everyone

00:09:11,430 --> 00:09:14,980
there's this weird part of refs that

00:09:13,690 --> 00:09:18,340
basically says that you should be able

00:09:14,980 --> 00:09:20,830
to give it code to execute like Java or

00:09:18,340 --> 00:09:24,340
Java and a Java or JavaScript or

00:09:20,830 --> 00:09:27,040
JavaScript or Java applets and the code

00:09:24,340 --> 00:09:29,800
that couldn't be run on the server it's

00:09:27,040 --> 00:09:32,020
a little bit weird I don't think I've

00:09:29,800 --> 00:09:33,910
ever actually seen people use rest in

00:09:32,020 --> 00:09:35,380
this way it's therefore generally

00:09:33,910 --> 00:09:37,780
considered to be an optional kind of

00:09:35,380 --> 00:09:39,700
principle in order to be restful and

00:09:37,780 --> 00:09:43,540
it's kind of a bit legacy I said it's

00:09:39,700 --> 00:09:45,190
from 2000 so what that was really dry

00:09:43,540 --> 00:09:48,460
that was really boring you've just

00:09:45,190 --> 00:09:51,330
explained this paper to me what does

00:09:48,460 --> 00:09:54,040
this actually mean for my application

00:09:51,330 --> 00:09:55,360
those are all principles to kind of bear

00:09:54,040 --> 00:09:57,130
in mind when you're building your API

00:09:55,360 --> 00:09:59,380
but actually how do we how do we do that

00:09:57,130 --> 00:10:03,340
in practice and I mentioned HTTP

00:09:59,380 --> 00:10:05,050
response codes earlier and you should

00:10:03,340 --> 00:10:09,100
ultimately what you're always trying to

00:10:05,050 --> 00:10:10,450
do is use HTTP well yeah that previous

00:10:09,100 --> 00:10:10,900
slide shouldn't have been there sorry

00:10:10,450 --> 00:10:16,780
about that

00:10:10,900 --> 00:10:18,940
okay free would use HTTP well HTTP is

00:10:16,780 --> 00:10:22,690
your friend and ultimately the respect

00:10:18,940 --> 00:10:25,350
doesn't talk about HTTP at all it relies

00:10:22,690 --> 00:10:27,910
on the fact that you use whatever

00:10:25,350 --> 00:10:30,100
technology you're using to its full it's

00:10:27,910 --> 00:10:32,530
in that uniform interface way I should

00:10:30,100 --> 00:10:36,100
know how every single HTTP REST API

00:10:32,530 --> 00:10:38,440
works so one of the ways to do this is

00:10:36,100 --> 00:10:43,090
with HTTP verbs so that's get put post

00:10:38,440 --> 00:10:46,660
patch delete who uses all of those who

00:10:43,090 --> 00:10:48,880
uses just one of them okay a few of you

00:10:46,660 --> 00:10:50,800
and the problem with using just one of

00:10:48,880 --> 00:10:55,060
them and I'm going to assume that that

00:10:50,800 --> 00:10:56,950
that one is get is that everyone expects

00:10:55,060 --> 00:10:58,120
you to have a uniform interface which

00:10:56,950 --> 00:11:00,580
means you end up with situations like

00:10:58,120 --> 00:11:03,190
this which I've actually stolen from a

00:11:00,580 --> 00:11:03,910
talk of Phil sturgeons the screenshot

00:11:03,190 --> 00:11:05,590
the

00:11:03,910 --> 00:11:08,680
it's probably one of the funniest things

00:11:05,590 --> 00:11:11,290
I've ever seen him talk Phil surgeon my

00:11:08,680 --> 00:11:12,760
favorite WTF story is using a get verb

00:11:11,290 --> 00:11:14,860
to delete resources which was

00:11:12,760 --> 00:11:20,860
interesting when Google crawled the API

00:11:14,860 --> 00:11:23,410
basically Jamie here his entire data

00:11:20,860 --> 00:11:25,690
source with data thing was deleted

00:11:23,410 --> 00:11:27,400
because he made a mistake with HTTP

00:11:25,690 --> 00:11:29,260
verbs now sure he probably should have

00:11:27,400 --> 00:11:32,200
had authentication as well but let's not

00:11:29,260 --> 00:11:33,820
go there this is a problem and this is

00:11:32,200 --> 00:11:34,810
why you should just not my you should

00:11:33,820 --> 00:11:37,120
make sure you're using the right verbs

00:11:34,810 --> 00:11:39,910
Google will not ever do a request to you

00:11:37,120 --> 00:11:43,450
with delete because they know that's a

00:11:39,910 --> 00:11:47,440
bad idea they they expect that uniform

00:11:43,450 --> 00:11:49,870
interface HTTP response codes who uses

00:11:47,440 --> 00:11:53,280
who uses these these response codes here

00:11:49,870 --> 00:11:56,290
200 if things alright 301 302 redirects

00:11:53,280 --> 00:12:00,820
400 that you made a mistake 500 is I

00:11:56,290 --> 00:12:03,610
made the mistake 400 401 or 403 is like

00:12:00,820 --> 00:12:04,630
you can't access this 404 I don't know

00:12:03,610 --> 00:12:08,200
where that is

00:12:04,630 --> 00:12:10,540
405 fix your HTTP verbs this 405 one if

00:12:08,200 --> 00:12:11,440
you're using Symphony and and that kind

00:12:10,540 --> 00:12:16,240
of thing it'll probably do it

00:12:11,440 --> 00:12:19,300
automatically for you for routing who

00:12:16,240 --> 00:12:20,980
actually splits out 401 and 403 who uses

00:12:19,300 --> 00:12:22,630
them the way that they're supposed to be

00:12:20,980 --> 00:12:25,200
used because they're actually completely

00:12:22,630 --> 00:12:27,700
different these are a bunch of different

00:12:25,200 --> 00:12:31,690
HTTP codes that are also quite basic and

00:12:27,700 --> 00:12:34,750
apply to most people's situations but

00:12:31,690 --> 00:12:36,010
they're probably less well used for two

00:12:34,750 --> 00:12:39,670
to four validation errors who has

00:12:36,010 --> 00:12:45,100
validation in their api's put your hand

00:12:39,670 --> 00:12:46,900
down if you use 42 okay so a few quite a

00:12:45,100 --> 00:12:48,100
few of you do but there's still there's

00:12:46,900 --> 00:12:50,020
still there's still bandwidth there and

00:12:48,100 --> 00:12:52,030
that's to say explicitly this is a

00:12:50,020 --> 00:12:53,080
validation error a 400 doesn't tell me

00:12:52,030 --> 00:12:54,790
what I've done wrong it might be

00:12:53,080 --> 00:12:57,280
authentication it might be authorization

00:12:54,790 --> 00:13:00,280
it might be that I had too many

00:12:57,280 --> 00:13:04,210
characters in in my name field but this

00:13:00,280 --> 00:13:06,010
helps people understand your API is also

00:13:04,210 --> 00:13:10,870
rate limiting who does rate limiting in

00:13:06,010 --> 00:13:12,820
their API okay quite a few of you when

00:13:10,870 --> 00:13:14,230
you have when you hit a rate limit don't

00:13:12,820 --> 00:13:16,060
just throw back a foot game don't throw

00:13:14,230 --> 00:13:17,230
back a 400 say that you've hit a rate

00:13:16,060 --> 00:13:17,740
limit because that allows people to

00:13:17,230 --> 00:13:22,330
build too

00:13:17,740 --> 00:13:24,220
around them then finally 500 503 it's

00:13:22,330 --> 00:13:26,520
basically saying the API is unavailable

00:13:24,220 --> 00:13:29,560
which might mean your database is down

00:13:26,520 --> 00:13:31,180
or you have some kind of service that

00:13:29,560 --> 00:13:32,710
means your API doesn't work he doesn't

00:13:31,180 --> 00:13:35,470
mean that there was an actual error that

00:13:32,710 --> 00:13:39,760
was unknown it just means that there was

00:13:35,470 --> 00:13:41,650
an error so be specific in symfony this

00:13:39,760 --> 00:13:45,760
is super simple you can just do this in

00:13:41,650 --> 00:13:47,590
your in your controllers what's wrong

00:13:45,760 --> 00:13:53,610
with this so there's something wrong

00:13:47,590 --> 00:13:57,190
with this yeah so 42 is a magic number

00:13:53,610 --> 00:13:58,570
it's just saying hey like set this to

00:13:57,190 --> 00:14:00,700
this random response code and the thing

00:13:58,570 --> 00:14:02,800
is is that I I don't know every single

00:14:00,700 --> 00:14:04,990
HTTP response code I know a few of them

00:14:02,800 --> 00:14:07,150
I know the ones on the two slides but if

00:14:04,990 --> 00:14:11,140
you if you ask me what five one seven

00:14:07,150 --> 00:14:14,920
was for out have absolutely no idea so

00:14:11,140 --> 00:14:16,900
you can use constants in Symphony has

00:14:14,920 --> 00:14:19,450
this and as to another a bunch of

00:14:16,900 --> 00:14:21,730
different HTTP response requests for

00:14:19,450 --> 00:14:23,200
libraries just say unprocessed pool

00:14:21,730 --> 00:14:24,490
entity that suddenly make sense to me

00:14:23,200 --> 00:14:26,620
it's non processable entity it's a

00:14:24,490 --> 00:14:30,550
validation error it didn't know how to

00:14:26,620 --> 00:14:32,770
process the the object that has state

00:14:30,550 --> 00:14:33,790
the usual were trying to give to me and

00:14:32,770 --> 00:14:36,250
there are a whole load of these in

00:14:33,790 --> 00:14:37,540
symphony I hope you can't read this I

00:14:36,250 --> 00:14:40,750
had to actually chop off a whole bunch

00:14:37,540 --> 00:14:46,660
when I was doing this slide just to kind

00:14:40,750 --> 00:14:49,420
of try and fit them on errors so errors

00:14:46,660 --> 00:14:50,860
in your API errors are really a bit of a

00:14:49,420 --> 00:14:52,480
pain and a lot of the examples actually

00:14:50,860 --> 00:14:54,610
particularly from here on in the talk

00:14:52,480 --> 00:14:58,600
are from stuff that I actually did at my

00:14:54,610 --> 00:15:00,250
my last company Sam knows and a lot of a

00:14:58,600 --> 00:15:01,960
lot of the stuff was actually built in a

00:15:00,250 --> 00:15:05,980
really nice way in order to make it

00:15:01,960 --> 00:15:06,970
really easy to build REST API and a huge

00:15:05,980 --> 00:15:09,040
amount of that work was actually done by

00:15:06,970 --> 00:15:11,170
Stuart who's actually in the audience so

00:15:09,040 --> 00:15:13,330
I just kind of wanted to give everyone

00:15:11,170 --> 00:15:18,100
away yeah that guy there and seeing on

00:15:13,330 --> 00:15:19,390
his phone we've had he knows it so I

00:15:18,100 --> 00:15:24,060
just kind of want it want to want to

00:15:19,390 --> 00:15:27,610
give a bit of credit there so errors a

00:15:24,060 --> 00:15:29,860
nice way to do this in Symphony is if

00:15:27,610 --> 00:15:31,470
you say you have a validation error you

00:15:29,860 --> 00:15:33,230
don't want to be putting that logic into

00:15:31,470 --> 00:15:36,450
every single one of your controllers

00:15:33,230 --> 00:15:38,670
that's a huge amount of duplication and

00:15:36,450 --> 00:15:39,840
it's quite a lot of code it's maybe 15

00:15:38,670 --> 00:15:41,490
lines of code in every single one of

00:15:39,840 --> 00:15:43,380
your controllers and if you're trying to

00:15:41,490 --> 00:15:46,620
have five line methods then that's not

00:15:43,380 --> 00:15:50,160
great so a common way of dealing with

00:15:46,620 --> 00:15:51,840
this is doing a non kernel exception

00:15:50,160 --> 00:15:55,230
event which basically says if there's an

00:15:51,840 --> 00:15:57,660
exception then run this code and then it

00:15:55,230 --> 00:16:02,340
sets a response and it builds a response

00:15:57,660 --> 00:16:03,510
with it with an error but that's

00:16:02,340 --> 00:16:06,030
actually probably not the best way of

00:16:03,510 --> 00:16:07,950
doing this it is a way of doing this and

00:16:06,030 --> 00:16:09,900
that you can always run code here and

00:16:07,950 --> 00:16:12,810
throw out a response when an exception

00:16:09,900 --> 00:16:15,600
happens but if you're using symfony

00:16:12,810 --> 00:16:17,370
specifically then there's actually a way

00:16:15,600 --> 00:16:19,740
that you can just simply override the

00:16:17,370 --> 00:16:21,690
exception controller used by symphony

00:16:19,740 --> 00:16:23,010
because symphony will always handle your

00:16:21,690 --> 00:16:24,660
exceptions for a controller anyway

00:16:23,010 --> 00:16:27,840
that's why you get the really nice

00:16:24,660 --> 00:16:31,800
pretty page with the with the output if

00:16:27,840 --> 00:16:33,150
you're in development mode so if you and

00:16:31,800 --> 00:16:35,040
it can just look like this so you'd have

00:16:33,150 --> 00:16:36,840
show action you'd have your quest a

00:16:35,040 --> 00:16:39,270
flattened exception and a debug log or

00:16:36,840 --> 00:16:42,600
interface logger is just your standard

00:16:39,270 --> 00:16:43,740
logger and you've got your request there

00:16:42,600 --> 00:16:47,030
so you can see exactly what was coming

00:16:43,740 --> 00:16:49,200
in and the exception is just like a

00:16:47,030 --> 00:16:52,950
friendly exception to use instead of the

00:16:49,200 --> 00:16:55,530
actual original exception a building

00:16:52,950 --> 00:16:57,150
this is really simple so you want to say

00:16:55,530 --> 00:16:59,820
get the status code for that particular

00:16:57,150 --> 00:17:04,950
exception which theoretically should be

00:16:59,820 --> 00:17:06,570
one of your HTTP ones hopefully I've

00:17:04,950 --> 00:17:09,420
then got this get error method which

00:17:06,570 --> 00:17:11,880
I'll talk about in a moment generate a

00:17:09,420 --> 00:17:13,140
JSON response set some set some of our

00:17:11,880 --> 00:17:14,760
headers because remember we need our

00:17:13,140 --> 00:17:18,350
meme types an order for it to be restful

00:17:14,760 --> 00:17:20,910
return that response looks a lot cleaner

00:17:18,350 --> 00:17:23,400
then on the next level down we actually

00:17:20,910 --> 00:17:25,170
need to be able to handle what that

00:17:23,400 --> 00:17:28,710
actual body of that message should look

00:17:25,170 --> 00:17:29,970
like in this case what we're doing is

00:17:28,710 --> 00:17:31,800
we're having a look at an error map

00:17:29,970 --> 00:17:33,420
which you can see really small defined

00:17:31,800 --> 00:17:35,670
in the corner it's got just a couple of

00:17:33,420 --> 00:17:37,260
things on there because you don't have a

00:17:35,670 --> 00:17:40,530
big if statement if it's a validation

00:17:37,260 --> 00:17:44,190
exception and do this if it's a 403 then

00:17:40,530 --> 00:17:45,180
do this if it's 404 then do this in this

00:17:44,190 --> 00:17:47,370
instance there's actually so

00:17:45,180 --> 00:17:49,170
no stuff here to sort of say if it's if

00:17:47,370 --> 00:17:51,480
it's in debug mode then give give some

00:17:49,170 --> 00:17:52,740
extra output but essentially what we're

00:17:51,480 --> 00:17:54,710
doing here is we're just grabbing the

00:17:52,740 --> 00:17:57,090
code we're grabbing a message and then

00:17:54,710 --> 00:17:59,040
if it's a validation exception adding

00:17:57,090 --> 00:18:01,650
any of that it's really nice it's really

00:17:59,040 --> 00:18:03,450
simple to read and you can just follow

00:18:01,650 --> 00:18:04,710
it line by line it makes it makes your

00:18:03,450 --> 00:18:06,030
code a lot cleaner than having to do

00:18:04,710 --> 00:18:08,160
this in every single one of your

00:18:06,030 --> 00:18:10,980
controllers and handle all you of your

00:18:08,160 --> 00:18:13,140
cases there because the other thing that

00:18:10,980 --> 00:18:16,560
to bear in mind is earlier when we were

00:18:13,140 --> 00:18:17,850
talking about uniform interface and meme

00:18:16,560 --> 00:18:19,710
types if you're requesting Jason you

00:18:17,850 --> 00:18:21,750
should get Jason back the worst thing to

00:18:19,710 --> 00:18:24,540
have in an API is that you do a call and

00:18:21,750 --> 00:18:26,580
then suddenly you get back a 403 but

00:18:24,540 --> 00:18:28,710
it's not in Jason and it's not it's an

00:18:26,580 --> 00:18:30,330
it's in HTML or something and you can't

00:18:28,710 --> 00:18:32,010
be expected to pass that I don't want to

00:18:30,330 --> 00:18:33,960
be writing an API client and then

00:18:32,010 --> 00:18:38,310
suddenly have to learn to handle HTML

00:18:33,960 --> 00:18:40,920
for your errors next thing I want to

00:18:38,310 --> 00:18:45,120
talk to is talk about is DTO so anyone

00:18:40,920 --> 00:18:49,340
know what dto is okay good about 3/4 of

00:18:45,120 --> 00:18:54,360
you Saudi tos are data transfer objects

00:18:49,340 --> 00:18:55,740
every single object in PHP is designed

00:18:54,360 --> 00:18:58,380
to have two things it's made up of

00:18:55,740 --> 00:19:00,780
methods and properties properties are

00:18:58,380 --> 00:19:02,670
how it stores its state and methods are

00:19:00,780 --> 00:19:05,270
how you modify its state methods are

00:19:02,670 --> 00:19:07,380
doing things properties are described

00:19:05,270 --> 00:19:11,700
operty Zittel describe what that or

00:19:07,380 --> 00:19:13,730
object currently looks like the thing is

00:19:11,700 --> 00:19:17,220
is that in PHP we also have a tendency

00:19:13,730 --> 00:19:19,980
instead of to use objects but to just

00:19:17,220 --> 00:19:21,510
use a raise for things so we might have

00:19:19,980 --> 00:19:24,480
an array of all the different pieces of

00:19:21,510 --> 00:19:28,260
request data and we would pass that

00:19:24,480 --> 00:19:32,340
around maybe as a series of options or

00:19:28,260 --> 00:19:33,840
if we decode some Jason from a request

00:19:32,340 --> 00:19:36,240
what we might do is we might put that

00:19:33,840 --> 00:19:39,960
into just an array of okay well the name

00:19:36,240 --> 00:19:42,750
is this and their address is this but

00:19:39,960 --> 00:19:44,850
you've got no typing on that one of the

00:19:42,750 --> 00:19:48,870
one of the things that we now have in

00:19:44,850 --> 00:19:52,980
PHP is we have this ability to to in

00:19:48,870 --> 00:19:56,940
term to move the complete complexity in

00:19:52,980 --> 00:19:58,930
our applications using types so we can

00:19:56,940 --> 00:20:00,640
actually get PHP itself

00:19:58,930 --> 00:20:03,970
to make sure that we're enforcing those

00:20:00,640 --> 00:20:06,940
types for us and D TOS allow us to do

00:20:03,970 --> 00:20:08,500
that we can pass around this object that

00:20:06,940 --> 00:20:11,430
we can then type in again so we can say

00:20:08,500 --> 00:20:14,920
I'm expecting a user creation DTO

00:20:11,430 --> 00:20:16,540
I'm create I'm expecting ADT oh that

00:20:14,920 --> 00:20:21,550
describes what my filters should look

00:20:16,540 --> 00:20:23,650
like all my sorts and this allows us to

00:20:21,550 --> 00:20:25,360
basically never have to deal with these

00:20:23,650 --> 00:20:27,640
arrays with these miscellaneous fields

00:20:25,360 --> 00:20:29,920
and how many people have made a typo

00:20:27,640 --> 00:20:31,510
with like name and or something like

00:20:29,920 --> 00:20:33,460
that when they're passing arrays around

00:20:31,510 --> 00:20:35,110
and then they're trying to hydrate stuff

00:20:33,460 --> 00:20:38,920
and they have 20 lines and it's like

00:20:35,110 --> 00:20:40,930
dollar sign data name equals like

00:20:38,920 --> 00:20:42,850
controller data name or whatever and

00:20:40,930 --> 00:20:44,380
they make a typo so this can help reduce

00:20:42,850 --> 00:20:45,670
bugs as well because everything will

00:20:44,380 --> 00:20:50,170
hopefully ought to complete with your

00:20:45,670 --> 00:20:52,630
IDE in symphony you can use the

00:20:50,170 --> 00:20:56,920
parameter to basically hydrate your dt

00:20:52,630 --> 00:20:59,230
o--'s for you so if you use the

00:20:56,920 --> 00:21:02,050
parameter and you combine it with d tos

00:20:59,230 --> 00:21:04,570
you can make your controllers look like

00:21:02,050 --> 00:21:06,760
this so what we've got is we've got a

00:21:04,570 --> 00:21:09,120
post address action so we're creating an

00:21:06,760 --> 00:21:12,550
address because it's the the post verb

00:21:09,120 --> 00:21:14,650
we're just type hinting an address

00:21:12,550 --> 00:21:16,360
create DT oh and we've got that as an

00:21:14,650 --> 00:21:18,970
argument pass in there we're expecting

00:21:16,360 --> 00:21:20,560
your response and I'm actually just

00:21:18,970 --> 00:21:27,670
calling this one method which says map

00:21:20,560 --> 00:21:29,440
and persist it's DTO into an address but

00:21:27,670 --> 00:21:31,180
what's creating this address create DT

00:21:29,440 --> 00:21:34,600
oh why doesn't why can I make my

00:21:31,180 --> 00:21:36,730
controller look like this the answer is

00:21:34,600 --> 00:21:37,720
and this is one of the things sure it

00:21:36,730 --> 00:21:41,260
built

00:21:37,720 --> 00:21:43,810
data transfer object converter so you

00:21:41,260 --> 00:21:45,340
can essentially extend the parameter

00:21:43,810 --> 00:21:48,400
which normally gives you things like

00:21:45,340 --> 00:21:49,510
request and and it also allows you to

00:21:48,400 --> 00:21:51,820
sort of inject things into your

00:21:49,510 --> 00:21:54,670
controllers as arguments you can

00:21:51,820 --> 00:21:58,300
actually say okay well if I'm if I'm

00:21:54,670 --> 00:22:02,050
type hinting a Aditi oh how should I

00:21:58,300 --> 00:22:04,630
translate my request body into heighted

00:22:02,050 --> 00:22:06,490
to hydrate that object so what we're

00:22:04,630 --> 00:22:07,810
doing here is we're grabbing the content

00:22:06,490 --> 00:22:10,720
of our response we're saying what's our

00:22:07,810 --> 00:22:12,700
response look like we're then getting

00:22:10,720 --> 00:22:14,620
the class we're denormalizing it use

00:22:12,700 --> 00:22:19,150
serializer so we're taking field for

00:22:14,620 --> 00:22:20,920
fields and mapping it populating our

00:22:19,150 --> 00:22:23,410
object and then basically just setting

00:22:20,920 --> 00:22:24,550
that on me on the controller as our

00:22:23,410 --> 00:22:26,950
actual object that we've just

00:22:24,550 --> 00:22:30,940
essentially built because it's DTO here

00:22:26,950 --> 00:22:32,620
would be a copy of that object so just

00:22:30,940 --> 00:22:34,960
in this light in this line of code and

00:22:32,620 --> 00:22:36,970
what we've got here we're now taking

00:22:34,960 --> 00:22:39,370
whatever our responses look like we're

00:22:36,970 --> 00:22:41,560
defining them as objects and we're

00:22:39,370 --> 00:22:42,790
hydrating those objects and then we're

00:22:41,560 --> 00:22:44,650
just passing it off to this entity

00:22:42,790 --> 00:22:48,490
persister which there's map and persist

00:22:44,650 --> 00:22:49,810
address create DTO to address and this

00:22:48,490 --> 00:22:52,450
would then return to me an address

00:22:49,810 --> 00:22:54,970
entity that has been persisted to the

00:22:52,450 --> 00:22:57,580
database I've made my controller so much

00:22:54,970 --> 00:22:59,290
simpler just by having to add a few

00:22:57,580 --> 00:23:01,090
lines of logic and it says this works my

00:22:59,290 --> 00:23:03,730
entire application I don't have to write

00:23:01,090 --> 00:23:05,170
this for every single DTO I'd obviously

00:23:03,730 --> 00:23:08,560
have to actually write my DTO with the

00:23:05,170 --> 00:23:10,450
fields but we've just simplified so much

00:23:08,560 --> 00:23:12,180
logic out of our API it makes my life so

00:23:10,450 --> 00:23:17,040
much easier

00:23:12,180 --> 00:23:20,670
validation how do we handle validation

00:23:17,040 --> 00:23:23,650
the simple answer to this is exceptions

00:23:20,670 --> 00:23:26,050
the idea of an exception is that it

00:23:23,650 --> 00:23:28,840
should be an exceptional case the thing

00:23:26,050 --> 00:23:31,180
is is that we that that assumes that

00:23:28,840 --> 00:23:33,610
you're building towards the the success

00:23:31,180 --> 00:23:36,220
case and anything that doesn't match the

00:23:33,610 --> 00:23:38,410
success case is an exception that's not

00:23:36,220 --> 00:23:39,670
really true because when you're building

00:23:38,410 --> 00:23:42,460
your applications you should be

00:23:39,670 --> 00:23:45,640
expecting edge cases and exceptional

00:23:42,460 --> 00:23:47,170
cases and failure cases the wonderful

00:23:45,640 --> 00:23:48,910
things about exceptions you can throw

00:23:47,170 --> 00:23:54,100
them anywhere and they just get bubbled

00:23:48,910 --> 00:23:57,280
up if my controller is looking looking

00:23:54,100 --> 00:23:59,410
like this what you don't see here is

00:23:57,280 --> 00:24:00,730
that this is doing validation on two or

00:23:59,410 --> 00:24:04,210
two different objects actually it would

00:24:00,730 --> 00:24:06,670
be validating on my address entity and

00:24:04,210 --> 00:24:09,820
it will also be doing validation on my

00:24:06,670 --> 00:24:11,740
DTI when it creates my DTI but you don't

00:24:09,820 --> 00:24:12,820
have to see that every single time you

00:24:11,740 --> 00:24:15,220
don't see the fact that it's running

00:24:12,820 --> 00:24:17,410
it's running that check you also don't

00:24:15,220 --> 00:24:18,790
see the fact that it's handling what

00:24:17,410 --> 00:24:20,950
that response should look like because

00:24:18,790 --> 00:24:22,750
when we were looking at our handling of

00:24:20,950 --> 00:24:24,760
exceptions earlier that's all handled in

00:24:22,750 --> 00:24:26,540
one place which is nowhere near your

00:24:24,760 --> 00:24:30,080
business logic for each individual

00:24:26,540 --> 00:24:34,130
either you have remove control from your

00:24:30,080 --> 00:24:37,280
controllers the don't do is valid in

00:24:34,130 --> 00:24:40,880
your controller it's valid in your

00:24:37,280 --> 00:24:41,930
controller is is really deep in terms of

00:24:40,880 --> 00:24:44,870
what it's actually expecting you to

00:24:41,930 --> 00:24:46,520
understand it does like is in is valid

00:24:44,870 --> 00:24:48,020
you're running an individual check on

00:24:46,520 --> 00:24:50,090
that DTO you have to then something

00:24:48,020 --> 00:24:51,920
introduced logic all you want to do is

00:24:50,090 --> 00:24:53,120
you want to be like persist this and

00:24:51,920 --> 00:24:56,900
then if it doesn't you want to have the

00:24:53,120 --> 00:25:00,020
exceptions coming back up in this case

00:24:56,900 --> 00:25:01,730
what we're actually doing is we're

00:25:00,020 --> 00:25:04,430
trying to persist it and if we're not

00:25:01,730 --> 00:25:06,050
within throwing a brand new kind of kind

00:25:04,430 --> 00:25:07,940
of exception we see a validation

00:25:06,050 --> 00:25:09,650
exception we handle that we then throw

00:25:07,940 --> 00:25:10,700
an error response because you might want

00:25:09,650 --> 00:25:13,130
to actually use that validation

00:25:10,700 --> 00:25:15,110
exception somewhere else and then

00:25:13,130 --> 00:25:17,990
finally we're just returning a created

00:25:15,110 --> 00:25:21,680
item this is sort of standard Symphony

00:25:17,990 --> 00:25:23,720
function but with that with a helper on

00:25:21,680 --> 00:25:26,750
top so this would automatically make

00:25:23,720 --> 00:25:28,520
sure that we're throwing a 201 and

00:25:26,750 --> 00:25:31,190
adding that route in there so this is

00:25:28,520 --> 00:25:33,740
the entire controller for creating an

00:25:31,190 --> 00:25:35,060
address it's really simple right makes

00:25:33,740 --> 00:25:37,910
life a lot easier it looks really clean

00:25:35,060 --> 00:25:40,070
we know exactly what it's doing and

00:25:37,910 --> 00:25:45,140
we've abstracted our logic our business

00:25:40,070 --> 00:25:47,900
logic basically into a DTI so we've

00:25:45,140 --> 00:25:51,710
talked a lot about input let's talk a

00:25:47,900 --> 00:25:55,730
little bit the symphony serializer

00:25:51,710 --> 00:25:57,950
component it allows you to essentially

00:25:55,730 --> 00:25:59,330
put your and it can also do hydration of

00:25:57,950 --> 00:26:01,760
objects one of the other things it can

00:25:59,330 --> 00:26:04,070
do is it can manage the you're exporting

00:26:01,760 --> 00:26:06,010
into a certain format so say that you

00:26:04,070 --> 00:26:08,120
want to be able to support xml and json

00:26:06,010 --> 00:26:09,590
again you shouldn't really be having to

00:26:08,120 --> 00:26:10,850
care about this on a day-to-day fashion

00:26:09,590 --> 00:26:13,730
you shouldn't be having to do JSON

00:26:10,850 --> 00:26:16,150
encode this server sorry this array of

00:26:13,730 --> 00:26:18,530
data and then just spit out some string

00:26:16,150 --> 00:26:20,590
you should be able to say hey I want a

00:26:18,530 --> 00:26:23,780
JSON response or I want an XML response

00:26:20,590 --> 00:26:27,920
and then simply serialize I can do that

00:26:23,780 --> 00:26:30,290
for you and the next one if step of this

00:26:27,920 --> 00:26:32,170
is okay well I still need to know what

00:26:30,290 --> 00:26:34,640
those various different fields look like

00:26:32,170 --> 00:26:38,360
and that's what transformers come in

00:26:34,640 --> 00:26:39,920
transformers essentially migrate they

00:26:38,360 --> 00:26:43,490
take the data for this inside your

00:26:39,920 --> 00:26:46,100
so if I'm doing a get on an address it

00:26:43,490 --> 00:26:49,370
has a series of different fields and

00:26:46,100 --> 00:26:52,010
each of those individual fields I might

00:26:49,370 --> 00:26:53,420
want to rename in my response if we go

00:26:52,010 --> 00:26:56,180
back to our principles that we mentioned

00:26:53,420 --> 00:26:57,710
earlier you're you shouldn't have to

00:26:56,180 --> 00:26:59,090
care about what's in your data storage

00:26:57,710 --> 00:27:01,130
of what's in your database you should

00:26:59,090 --> 00:27:03,440
only be caring about resources for the

00:27:01,130 --> 00:27:06,650
user which might not even correspond to

00:27:03,440 --> 00:27:09,050
your entities so build transformers

00:27:06,650 --> 00:27:10,310
which essentially allow you to define

00:27:09,050 --> 00:27:12,020
what your responses should look like

00:27:10,310 --> 00:27:13,640
when someone requests an individual

00:27:12,020 --> 00:27:16,700
resource and they're responsible for

00:27:13,640 --> 00:27:18,260
building all of the content for that so

00:27:16,700 --> 00:27:19,670
you would have a transformer for your

00:27:18,260 --> 00:27:22,820
user you'd have a transformer for your

00:27:19,670 --> 00:27:24,680
address and you also have the option for

00:27:22,820 --> 00:27:27,050
includes and stuff like that so we'll

00:27:24,680 --> 00:27:29,120
have a look at what that looks like I'm

00:27:27,050 --> 00:27:32,390
gonna I've used a library called fractal

00:27:29,120 --> 00:27:34,640
quite a lot by the PHP League it's nice

00:27:32,390 --> 00:27:35,600
really nice quality library it's well

00:27:34,640 --> 00:27:37,730
maintained

00:27:35,600 --> 00:27:39,860
it follows good standards I'd really

00:27:37,730 --> 00:27:40,700
highly recommend it but I'm sure there

00:27:39,860 --> 00:27:42,170
are probably some others for

00:27:40,700 --> 00:27:44,510
transformers if you have a look that do

00:27:42,170 --> 00:27:48,830
similar things this is what it looks

00:27:44,510 --> 00:27:51,710
like following on from our our address

00:27:48,830 --> 00:27:53,330
we're saying we've got this big

00:27:51,710 --> 00:27:54,620
transform method we passed in our

00:27:53,330 --> 00:27:57,920
address so that would be our entity

00:27:54,620 --> 00:27:59,840
which we've which we fetched and I'm now

00:27:57,920 --> 00:28:01,820
defining the individual fields I want so

00:27:59,840 --> 00:28:05,050
I'm saying okay the IDE address line

00:28:01,820 --> 00:28:06,980
county city postcode country created out

00:28:05,050 --> 00:28:09,380
and you can see I'm doing a little bit

00:28:06,980 --> 00:28:12,230
of logic here as well I'm saying I want

00:28:09,380 --> 00:28:14,270
to get the timestamp if it doesn't exist

00:28:12,230 --> 00:28:17,270
then just return null so that I'm not

00:28:14,270 --> 00:28:20,110
sort of doing a get updated out and

00:28:17,270 --> 00:28:22,610
potentially receiving an object back or

00:28:20,110 --> 00:28:24,410
awesome ugliness there on the get time

00:28:22,610 --> 00:28:28,660
not running the get time step method

00:28:24,410 --> 00:28:30,620
sorry on the on a potentially no object

00:28:28,660 --> 00:28:31,940
the other advantage of this is that

00:28:30,620 --> 00:28:33,350
there might be stuff in your database

00:28:31,940 --> 00:28:37,460
that you don't want to be exposing to

00:28:33,350 --> 00:28:39,230
users and sure even if you what you like

00:28:37,460 --> 00:28:40,970
okay I've created this address object

00:28:39,230 --> 00:28:43,370
everything in this entity I want to

00:28:40,970 --> 00:28:45,380
leave my users to see what you don't

00:28:43,370 --> 00:28:47,270
want a situation for is for a junior

00:28:45,380 --> 00:28:49,160
developer to come in six months later

00:28:47,270 --> 00:28:50,690
and be like hey I want to add anything

00:28:49,160 --> 00:28:52,310
to this address entity I want to say

00:28:50,690 --> 00:28:52,740
whether or not its archived or not

00:28:52,310 --> 00:28:56,250
because I'm

00:28:52,740 --> 00:28:57,720
implementing softly so they add an extra

00:28:56,250 --> 00:29:01,140
field which is designed very much for

00:28:57,720 --> 00:29:02,670
the database and if they don't have this

00:29:01,140 --> 00:29:04,200
here then they don't ever have to

00:29:02,670 --> 00:29:05,370
consciously think about the fact that oh

00:29:04,200 --> 00:29:07,170
that's suddenly going to appear on

00:29:05,370 --> 00:29:08,940
responses and actually change our API

00:29:07,170 --> 00:29:10,620
output because it will just

00:29:08,940 --> 00:29:13,050
automatically appear if you've got

00:29:10,620 --> 00:29:14,070
transformers like this then it means

00:29:13,050 --> 00:29:16,320
that it won't ever appear in the

00:29:14,070 --> 00:29:17,940
response until you're explicitly telling

00:29:16,320 --> 00:29:20,910
your application I want it to appear in

00:29:17,940 --> 00:29:24,660
my response you've also got stuff like

00:29:20,910 --> 00:29:26,190
the available includes so the idea of

00:29:24,660 --> 00:29:29,340
that is you would then have extra

00:29:26,190 --> 00:29:31,200
methods for each include to say hey I've

00:29:29,340 --> 00:29:32,760
also got an address object that I care

00:29:31,200 --> 00:29:35,190
about and I want to include that in the

00:29:32,760 --> 00:29:39,590
body of of this for slide loading

00:29:35,190 --> 00:29:42,570
essentially it's great for relationships

00:29:39,590 --> 00:29:43,800
in order to use it these are just

00:29:42,570 --> 00:29:47,370
examples that are straight off the

00:29:43,800 --> 00:29:51,990
fractal website it's really simple in

00:29:47,370 --> 00:29:53,790
order to be able to get the response for

00:29:51,990 --> 00:29:55,350
that if you're looking at an individual

00:29:53,790 --> 00:29:57,570
one or if you're looking at collection

00:29:55,350 --> 00:29:59,490
which is book or books and it will

00:29:57,570 --> 00:30:01,230
automatically do a series of formatting

00:29:59,490 --> 00:30:02,910
on that so if you're on that in XML or

00:30:01,230 --> 00:30:05,000
if you want it in Yama

00:30:02,910 --> 00:30:07,950
then essentially you're just saying

00:30:05,000 --> 00:30:09,420
create the data and put it to Jason or

00:30:07,950 --> 00:30:11,700
put it to an array or put it into

00:30:09,420 --> 00:30:14,870
something else you could then use a

00:30:11,700 --> 00:30:17,280
symphony serializer in order to do that

00:30:14,870 --> 00:30:19,590
the other thing that it will give you is

00:30:17,280 --> 00:30:21,840
that these create data methods you can

00:30:19,590 --> 00:30:24,780
tap into these and you can say hey I

00:30:21,840 --> 00:30:27,450
also want you to do hate OAS for me or I

00:30:24,780 --> 00:30:28,980
want you to do pagination this

00:30:27,450 --> 00:30:30,750
collection object that's what this will

00:30:28,980 --> 00:30:33,179
do here is this will automatically do

00:30:30,750 --> 00:30:34,740
pagination if you're passing it the

00:30:33,179 --> 00:30:38,250
right arguments of which page you want

00:30:34,740 --> 00:30:44,030
etc so I'm just saying I want books but

00:30:38,250 --> 00:30:48,870
books is a pagination object pagination

00:30:44,030 --> 00:30:50,730
who likes pagination great nobody likes

00:30:48,870 --> 00:30:52,820
pagination and don't you put your hand

00:30:50,730 --> 00:30:55,230
up too late so it's fine

00:30:52,820 --> 00:30:56,640
nobody likes pagination if we really all

00:30:55,230 --> 00:30:58,640
could have people had actually everyone

00:30:56,640 --> 00:31:01,080
put their hand up

00:30:58,640 --> 00:31:02,460
the thing about pagination is that it

00:31:01,080 --> 00:31:03,730
just it's a bit of a pain in the ass

00:31:02,460 --> 00:31:05,679
right

00:31:03,730 --> 00:31:07,870
if you're if you're ingesting it from

00:31:05,679 --> 00:31:09,640
the client side then it's a case of I've

00:31:07,870 --> 00:31:11,380
got to now write logic in order to be

00:31:09,640 --> 00:31:12,820
able to work out what the next pages and

00:31:11,380 --> 00:31:14,440
then keep iterating through these pages

00:31:12,820 --> 00:31:17,350
and great I can no longer write my

00:31:14,440 --> 00:31:18,429
applications in bash yes because you

00:31:17,350 --> 00:31:24,270
shouldn't be writing applications in

00:31:18,429 --> 00:31:26,799
bash writing it in PHP right yeah okay

00:31:24,270 --> 00:31:28,029
but also from the klom from the server

00:31:26,799 --> 00:31:29,710
side it means that you've got to had a

00:31:28,029 --> 00:31:31,179
whole load of extra logic you've got a

00:31:29,710 --> 00:31:32,500
handle limit so you've got a handle

00:31:31,179 --> 00:31:35,049
passing that through your application

00:31:32,500 --> 00:31:36,700
from the controllers and you've got to

00:31:35,049 --> 00:31:41,230
do this on any time when you're getting

00:31:36,700 --> 00:31:42,429
a collection so how do you do pagination

00:31:41,230 --> 00:31:45,700
let's have a look at to do this one you

00:31:42,429 --> 00:31:48,850
could do it you can't just rely on the

00:31:45,700 --> 00:31:50,320
fact that any client consuming whatever

00:31:48,850 --> 00:31:53,700
whatever you're sending will just be

00:31:50,320 --> 00:31:56,620
able to take this huge stream of data

00:31:53,700 --> 00:31:57,940
you've got particularly if you sort of

00:31:56,620 --> 00:32:00,490
sort of start to scale up that can

00:31:57,940 --> 00:32:02,760
become a problem for people what your

00:32:00,490 --> 00:32:04,990
defaults are is obviously up to you

00:32:02,760 --> 00:32:06,460
having a way to disable pagination can

00:32:04,990 --> 00:32:08,950
be useful but again if you're looking at

00:32:06,460 --> 00:32:10,559
like 15,000 different items in the

00:32:08,950 --> 00:32:12,760
collection that's a huge amount of data

00:32:10,559 --> 00:32:14,470
you probably don't want anyone just like

00:32:12,760 --> 00:32:16,960
going hitting one URL and grabbing all

00:32:14,470 --> 00:32:18,460
of that if you've got very limiting in

00:32:16,960 --> 00:32:21,630
place then that's another thing to bear

00:32:18,460 --> 00:32:21,630
in mind when you're doing pagination

00:32:21,840 --> 00:32:27,929
going back to our principles and hey and

00:32:24,490 --> 00:32:31,840
an uniform interface again and hate OAS

00:32:27,929 --> 00:32:36,190
link to the next and previous pages HTTP

00:32:31,840 --> 00:32:38,679
has you you can use hypermedia in it you

00:32:36,190 --> 00:32:40,179
can do links so do them it just makes

00:32:38,679 --> 00:32:42,010
life easier instead of having to code

00:32:40,179 --> 00:32:43,750
logic to be like okay well this is the

00:32:42,010 --> 00:32:45,250
number that I need and this is the URL

00:32:43,750 --> 00:32:47,289
I've got to build these and then I've

00:32:45,250 --> 00:32:48,460
got to create that request just have it

00:32:47,289 --> 00:32:51,490
so that it can just follow it can

00:32:48,460 --> 00:32:54,850
basically click through because clients

00:32:51,490 --> 00:32:57,690
can do that say the current page number

00:32:54,850 --> 00:33:02,529
you're on it's useful for debugging

00:32:57,690 --> 00:33:05,490
more than anything and detail the total

00:33:02,529 --> 00:33:07,809
number of pages I say this with a caveat

00:33:05,490 --> 00:33:09,250
detailing total number of pages assumes

00:33:07,809 --> 00:33:11,020
that you've actually done a count on the

00:33:09,250 --> 00:33:14,740
entire date set and therefore you know

00:33:11,020 --> 00:33:16,669
how many rows there are but actually

00:33:14,740 --> 00:33:20,359
disabling a total can make things

00:33:16,669 --> 00:33:22,129
much quicker going when we were at sound

00:33:20,359 --> 00:33:24,080
knows we spent a huge amount of time on

00:33:22,129 --> 00:33:25,369
this and basically all of these end

00:33:24,080 --> 00:33:27,799
points are really really really really

00:33:25,369 --> 00:33:28,850
slow and we couldn't work out why we're

00:33:27,799 --> 00:33:30,889
like it's only returning ten results

00:33:28,850 --> 00:33:32,720
right it's it should be it's just doing

00:33:30,889 --> 00:33:35,989
it's doing a limit ten it's doing an

00:33:32,720 --> 00:33:38,029
offset why is it taking 30 seconds to

00:33:35,989 --> 00:33:39,639
return five results when we're when

00:33:38,029 --> 00:33:42,049
we're just just grabbing around and five

00:33:39,639 --> 00:33:44,869
and the answer is is that particularly

00:33:42,049 --> 00:33:46,340
if you're using projects like doctrines

00:33:44,869 --> 00:33:47,600
paginate er sometimes they're

00:33:46,340 --> 00:33:50,090
automatically doing a whole load of

00:33:47,600 --> 00:33:51,859
counting for you sometimes is like

00:33:50,090 --> 00:33:54,350
select all and then running a count on

00:33:51,859 --> 00:33:55,759
that result so that's why it was taking

00:33:54,350 --> 00:33:58,789
30 seconds it's because we were actually

00:33:55,759 --> 00:34:04,009
doing a select a select every single row

00:33:58,789 --> 00:34:05,659
and then doing a count on that so if you

00:34:04,009 --> 00:34:07,399
have find a way if you can save all your

00:34:05,659 --> 00:34:09,740
totals then it can be a really

00:34:07,399 --> 00:34:12,440
convenient way to speed up your

00:34:09,740 --> 00:34:17,240
application maybe offer that as like a

00:34:12,440 --> 00:34:18,889
client-side option there are a couple of

00:34:17,240 --> 00:34:20,210
libraries to do this for em dues for you

00:34:18,889 --> 00:34:22,849
I would not recommend doing your own

00:34:20,210 --> 00:34:26,299
imagination there's dr. imaginator and

00:34:22,849 --> 00:34:29,210
his pager fanta they're both quite

00:34:26,299 --> 00:34:30,559
reasonable but bear in mind you may have

00:34:29,210 --> 00:34:33,020
to do some customization and some

00:34:30,559 --> 00:34:34,819
tweaking particularly for performance as

00:34:33,020 --> 00:34:37,819
I mentioned like if sometimes with

00:34:34,819 --> 00:34:39,260
totals it can just go a bit wild and the

00:34:37,819 --> 00:34:42,319
advantage of both of those is they both

00:34:39,260 --> 00:34:43,929
have fractal integration integration so

00:34:42,319 --> 00:34:47,990
as I was saying earlier you can just do

00:34:43,929 --> 00:34:50,210
on a repository you can do find all and

00:34:47,990 --> 00:34:52,040
then you can just return the success and

00:34:50,210 --> 00:34:55,299
just pass in your paginate ax and then

00:34:52,040 --> 00:34:57,079
and then later on you're passing that

00:34:55,299 --> 00:34:59,270
you're passing that straight into

00:34:57,079 --> 00:35:01,160
fractal and it's returning route your

00:34:59,270 --> 00:35:04,130
response we want to have really simple

00:35:01,160 --> 00:35:06,740
controllers creating new resources and

00:35:04,130 --> 00:35:08,119
adding them to be able to create them

00:35:06,740 --> 00:35:12,920
and list them and get them should be

00:35:08,119 --> 00:35:14,990
really really really simple what we're

00:35:12,920 --> 00:35:18,230
looking at here though is you'll notice

00:35:14,990 --> 00:35:21,650
I've added an extra parameter onto my

00:35:18,230 --> 00:35:24,230
controllers called grant filters because

00:35:21,650 --> 00:35:26,839
ultimately I need a way to get it to my

00:35:24,230 --> 00:35:29,720
repository I need to be able to I've got

00:35:26,839 --> 00:35:33,200
my different page numbers I've got

00:35:29,720 --> 00:35:36,070
know that I am starting on page I'm on

00:35:33,200 --> 00:35:38,090
page five and that I want 20 per page

00:35:36,070 --> 00:35:39,770
and I need to get that down to my

00:35:38,090 --> 00:35:41,900
repository so that it can handle that in

00:35:39,770 --> 00:35:43,580
terms of limits and offsets how can we

00:35:41,900 --> 00:35:45,170
do that you can do that through its use

00:35:43,580 --> 00:35:47,930
the filters object how are we creating

00:35:45,170 --> 00:35:50,240
that user filters object similar stuff

00:35:47,930 --> 00:35:52,730
with the pram convertor it's also doing

00:35:50,240 --> 00:35:55,880
a lot more so leaves me very nicely into

00:35:52,730 --> 00:35:57,140
the sorts of filters who is implemented

00:35:55,880 --> 00:36:00,560
their own way of doing sorts and filters

00:35:57,140 --> 00:36:02,480
in the API almost every one that's

00:36:00,560 --> 00:36:06,349
because a really nice solution for this

00:36:02,480 --> 00:36:08,590
doesn't exist generally speaking it's

00:36:06,349 --> 00:36:11,869
actually really simple to do though

00:36:08,590 --> 00:36:14,390
because there's an object for that the

00:36:11,869 --> 00:36:15,980
if you're looking at your request body

00:36:14,390 --> 00:36:17,720
here we've got page one we've got per

00:36:15,980 --> 00:36:19,820
page 20 so we've got our pagination

00:36:17,720 --> 00:36:23,240
arguments we've got sorts I'm sorting

00:36:19,820 --> 00:36:24,770
reverse by ID here I'm including groups

00:36:23,240 --> 00:36:26,270
and addresses that links back to the

00:36:24,770 --> 00:36:30,770
Transformers I was saying earlier in

00:36:26,270 --> 00:36:32,390
side loading other other objects and

00:36:30,770 --> 00:36:33,980
then finally I've got this filter I'm

00:36:32,390 --> 00:36:40,160
looking for the name Michael on my users

00:36:33,980 --> 00:36:41,930
endpoint and my controller just looks

00:36:40,160 --> 00:36:45,440
like this I've got address filters of

00:36:41,930 --> 00:36:47,630
getting my dress very simple what does

00:36:45,440 --> 00:36:55,940
that filter object actually look like

00:36:47,630 --> 00:36:58,520
looks like this get user set user that's

00:36:55,940 --> 00:37:00,680
super simple right that's all I needed

00:36:58,520 --> 00:37:03,619
to do in order to build some filters for

00:37:00,680 --> 00:37:05,300
this one endpoint from a controller

00:37:03,619 --> 00:37:08,060
point of view I'm using a couple of

00:37:05,300 --> 00:37:10,430
traits pagination and sorting sorting is

00:37:08,060 --> 00:37:13,339
basically it just builds an array and

00:37:10,430 --> 00:37:15,320
pagination again it just builds the page

00:37:13,339 --> 00:37:17,119
and per page number I can populate them

00:37:15,320 --> 00:37:21,470
from fields using the parameter in the

00:37:17,119 --> 00:37:22,820
way we saw earlier in the repository we

00:37:21,470 --> 00:37:24,080
have to do a little bit more logic so

00:37:22,820 --> 00:37:25,430
we've got this into the repository now

00:37:24,080 --> 00:37:27,950
we've got output we've got our filters

00:37:25,430 --> 00:37:31,359
we've got our sorts we've got our

00:37:27,950 --> 00:37:34,070
pagination the creating a query builder

00:37:31,359 --> 00:37:35,630
and then we've just implemented a couple

00:37:34,070 --> 00:37:38,330
of helper methods here so we've got add

00:37:35,630 --> 00:37:40,400
filter we've got add sorts

00:37:38,330 --> 00:37:43,820
and because we're passing in arrow dress

00:37:40,400 --> 00:37:47,630
filters DTO we just call get sorts and

00:37:43,820 --> 00:37:50,720
we want and get our user on on our

00:37:47,630 --> 00:37:53,960
filters we then implement those two

00:37:50,720 --> 00:37:55,880
methods so add sorts this is generic

00:37:53,960 --> 00:37:57,680
this works your entire application so

00:37:55,880 --> 00:37:59,480
this is one base repository that you

00:37:57,680 --> 00:38:01,160
might extend or a trait that you might

00:37:59,480 --> 00:38:04,550
use and throughout all of your

00:38:01,160 --> 00:38:06,470
repositories so you simply look at the

00:38:04,550 --> 00:38:08,690
source you do if there are more than one

00:38:06,470 --> 00:38:11,180
source and you add or device very simple

00:38:08,690 --> 00:38:13,130
if there are filters then you will need

00:38:11,180 --> 00:38:16,130
to do some do some funkiness with

00:38:13,130 --> 00:38:20,570
grabbing the name and the value there's

00:38:16,130 --> 00:38:22,010
a map of names of the filters to what

00:38:20,570 --> 00:38:24,650
they could correspond to it's useful for

00:38:22,010 --> 00:38:27,110
joins and then you just add where's in

00:38:24,650 --> 00:38:29,210
set parameters a game we're just making

00:38:27,110 --> 00:38:30,560
this really simple in order to try and

00:38:29,210 --> 00:38:32,270
make sure that we're not having to do

00:38:30,560 --> 00:38:34,130
all of this logic in every single one of

00:38:32,270 --> 00:38:35,840
our repositories this repository is

00:38:34,130 --> 00:38:37,430
simple it's easy to read I can see the

00:38:35,840 --> 00:38:39,050
business logic that's going on here I

00:38:37,430 --> 00:38:40,640
can see I'm creating a query builder you

00:38:39,050 --> 00:38:43,010
can see I'm adding a user filter and I

00:38:40,640 --> 00:38:46,010
can see I'm adding the sorts that I have

00:38:43,010 --> 00:38:48,050
been passed and then I just create my

00:38:46,010 --> 00:38:51,980
pagination object and I again have my

00:38:48,050 --> 00:38:53,530
per page and my page that I don't want

00:38:51,980 --> 00:38:55,880
to be having to deal with all that logic

00:38:53,530 --> 00:39:02,260
and this is just a really simple way to

00:38:55,880 --> 00:39:05,420
abstract it away so tools to do this

00:39:02,260 --> 00:39:07,670
some of this stuff sure you'd have to

00:39:05,420 --> 00:39:09,320
build yourself in terms of there but I

00:39:07,670 --> 00:39:11,150
mean it's ten lines of code ten lines of

00:39:09,320 --> 00:39:13,180
code for some of these things snippets

00:39:11,150 --> 00:39:15,530
my slides will be available afterwards

00:39:13,180 --> 00:39:17,360
but there are some nice tools that can

00:39:15,530 --> 00:39:19,280
kind of give you a shortcut into

00:39:17,360 --> 00:39:22,460
building a lot of this stuff

00:39:19,280 --> 00:39:25,340
the first one is API platform I'm going

00:39:22,460 --> 00:39:28,160
to talk about very briefly API platform

00:39:25,340 --> 00:39:30,290
is great it allows you to really really

00:39:28,160 --> 00:39:32,600
quickly build api's if you have a

00:39:30,290 --> 00:39:34,280
symphony application then using it is as

00:39:32,600 --> 00:39:38,440
simple as that I think composer require

00:39:34,280 --> 00:39:41,450
API and it's kind of there for you and

00:39:38,440 --> 00:39:43,040
in order to kind of I'm just gonna do

00:39:41,450 --> 00:39:44,000
basically a quick demo in order to kind

00:39:43,040 --> 00:39:47,080
of show you the different kind of

00:39:44,000 --> 00:39:47,080
functionality that's there so

00:39:48,030 --> 00:39:57,640
[Music]

00:39:50,710 --> 00:40:00,640
so this is this is an example of the UI

00:39:57,640 --> 00:40:02,020
the API platform already spits out so we

00:40:00,640 --> 00:40:03,910
can see a whole load of endpoints for

00:40:02,020 --> 00:40:07,390
this books object we can see is

00:40:03,910 --> 00:40:08,740
correctly using verbs in terms of it's

00:40:07,390 --> 00:40:11,500
got to get we've got a post

00:40:08,740 --> 00:40:13,930
we've got deletes we've got puts I can

00:40:11,500 --> 00:40:17,290
have a look at one of these it shows me

00:40:13,930 --> 00:40:18,970
sort of an example values it lets me

00:40:17,290 --> 00:40:20,859
change a different format here so I can

00:40:18,970 --> 00:40:25,060
have a look at XML I can have a look at

00:40:20,859 --> 00:40:26,500
Jason so it automatically builds all of

00:40:25,060 --> 00:40:29,020
these different formats into your s API

00:40:26,500 --> 00:40:31,150
for you you don't have to manually sort

00:40:29,020 --> 00:40:32,109
of write all the logic for okay I want

00:40:31,150 --> 00:40:33,369
to support all of these different

00:40:32,109 --> 00:40:34,660
formats because let's be honest you'll

00:40:33,369 --> 00:40:37,810
probably just end up writing saying in

00:40:34,660 --> 00:40:39,250
Jake saying for Jason not everyone wants

00:40:37,810 --> 00:40:41,140
to write and wants to read them right

00:40:39,250 --> 00:40:44,830
from jason it's quite simple to add

00:40:41,140 --> 00:40:47,980
others you've got your different fields

00:40:44,830 --> 00:40:50,440
here and as you'd expect again it does

00:40:47,980 --> 00:40:53,260
all of your response codes for you so

00:40:50,440 --> 00:40:54,700
looking at 404s can't find them as I

00:40:53,260 --> 00:40:57,790
can't find the resource can't find the

00:40:54,700 --> 00:40:59,380
book you're looking for 400 you made

00:40:57,790 --> 00:41:03,760
some mistakes with your with your input

00:40:59,380 --> 00:41:06,700
200 etcetera and what this is all

00:41:03,760 --> 00:41:08,380
actually built from is essentially

00:41:06,700 --> 00:41:11,859
objects that look like this

00:41:08,380 --> 00:41:13,570
so I've got my this is this is actually

00:41:11,859 --> 00:41:15,250
the same code that was preparing what

00:41:13,570 --> 00:41:18,070
you were just looking at by way

00:41:15,250 --> 00:41:20,380
so here I've just got an entity called

00:41:18,070 --> 00:41:24,339
book I'm doing a little bit of jazz here

00:41:20,380 --> 00:41:27,670
in terms of I'm saying the schema don't

00:41:24,339 --> 00:41:29,560
worry too much about that I'm adding my

00:41:27,670 --> 00:41:31,300
ID and I'm just basically defining my

00:41:29,560 --> 00:41:33,790
fields I'm saying okay this is an ISBN

00:41:31,300 --> 00:41:35,830
I'm saying that this is a book it's only

00:41:33,790 --> 00:41:38,339
a readable fit read-only field I don't

00:41:35,830 --> 00:41:40,930
want to be able to let people modify it

00:41:38,339 --> 00:41:42,250
and so on and so forth it's really

00:41:40,930 --> 00:41:43,570
simple this is basically the only thing

00:41:42,250 --> 00:41:45,730
that powers the API and the thing I

00:41:43,570 --> 00:41:47,290
really want to draw attention to which

00:41:45,730 --> 00:41:50,260
actually can't really see at the bat

00:41:47,290 --> 00:41:51,670
there are no controllers there are no DT

00:41:50,260 --> 00:41:53,859
o--'s here

00:41:51,670 --> 00:41:56,740
there's no repositories there's

00:41:53,859 --> 00:41:58,540
literally just entities and everything

00:41:56,740 --> 00:42:00,640
was just generated for me it's the

00:41:58,540 --> 00:42:02,589
easiest possible way to build and build

00:42:00,640 --> 00:42:04,730
a crowd API where you just want to do

00:42:02,589 --> 00:42:08,430
updates read

00:42:04,730 --> 00:42:10,230
and then sort of going on the other

00:42:08,430 --> 00:42:11,460
really nice way if you want it if we

00:42:10,230 --> 00:42:12,780
gonna have a bit more control you don't

00:42:11,460 --> 00:42:14,250
want to sort of give everything over to

00:42:12,780 --> 00:42:16,850
API platform where you're just building

00:42:14,250 --> 00:42:18,870
entity isn't doing everything for you

00:42:16,850 --> 00:42:21,000
earlier we were talking about exceptions

00:42:18,870 --> 00:42:23,610
one problem with that is that we had

00:42:21,000 --> 00:42:25,370
this map which was in PHP and we had to

00:42:23,610 --> 00:42:27,420
do a bit of the implementation ourselves

00:42:25,370 --> 00:42:30,060
with foster respond or you're just

00:42:27,420 --> 00:42:32,190
configuring that in llamo lor jason and

00:42:30,060 --> 00:42:33,810
you can just say okay well if you see

00:42:32,190 --> 00:42:37,650
this particular exception class it

00:42:33,810 --> 00:42:40,470
should be this code it should be and you

00:42:37,650 --> 00:42:42,720
can use your constants there as well and

00:42:40,470 --> 00:42:46,860
you can also specify specific messages

00:42:42,720 --> 00:42:49,800
as well in order to handle things like

00:42:46,860 --> 00:42:53,790
the handling response format so yeah mol

00:42:49,800 --> 00:42:55,340
or is it Jason is it is it maybe it may

00:42:53,790 --> 00:42:57,960
be it's an HTML response I don't know

00:42:55,340 --> 00:43:01,610
and also being able to handle

00:42:57,960 --> 00:43:04,290
transformations they have really simple

00:43:01,610 --> 00:43:08,700
helper methods for that so set template

00:43:04,290 --> 00:43:10,260
September Lake very ballsy cetera it can

00:43:08,700 --> 00:43:13,410
also automatically build all of your

00:43:10,260 --> 00:43:16,650
routes for you so if you just say hey I

00:43:13,410 --> 00:43:20,790
want to have users controller

00:43:16,650 --> 00:43:23,190
essentially as a as a source of routes

00:43:20,790 --> 00:43:24,990
it will and you have get users action

00:43:23,190 --> 00:43:26,820
post users action these these methods

00:43:24,990 --> 00:43:28,200
exist it will then automatically just

00:43:26,820 --> 00:43:31,500
create those routes for use in the

00:43:28,200 --> 00:43:33,240
correct HTTP verbs and directing them in

00:43:31,500 --> 00:43:38,820
the right way with slugs etc when

00:43:33,240 --> 00:43:41,610
necessary so just to kind of recap and

00:43:38,820 --> 00:43:44,280
what we've talked about first of all we

00:43:41,610 --> 00:43:45,420
talked about the principles of rest we

00:43:44,280 --> 00:43:48,810
talked about making sure that we're

00:43:45,420 --> 00:43:50,910
using HTTP well making sure that we're

00:43:48,810 --> 00:43:54,720
using our HTTP verbs making sure that

00:43:50,910 --> 00:43:56,070
we're using our HTTP response codes we

00:43:54,720 --> 00:43:57,810
talked about error handling and how to

00:43:56,070 --> 00:43:59,790
make sure that we're not handling things

00:43:57,810 --> 00:44:01,410
like validation exceptions inside of our

00:43:59,790 --> 00:44:05,190
controllers but just abstract another

00:44:01,410 --> 00:44:06,960
way making sure that our our errors are

00:44:05,190 --> 00:44:09,060
using exceptions and then that we're

00:44:06,960 --> 00:44:10,470
handling any kind of exception to make

00:44:09,060 --> 00:44:13,530
sure it's in the right kind of response

00:44:10,470 --> 00:44:16,080
format we talked about details in the

00:44:13,530 --> 00:44:17,130
pram convertor in order to be able to

00:44:16,080 --> 00:44:18,900
basically abstract that

00:44:17,130 --> 00:44:21,289
logic and sort of have these weird maps

00:44:18,900 --> 00:44:23,880
of this this this string is this string

00:44:21,289 --> 00:44:25,559
or trying to have mistakes in our arrays

00:44:23,880 --> 00:44:27,240
we can do that with DT O's and

00:44:25,559 --> 00:44:30,599
parameters where it's all gets done

00:44:27,240 --> 00:44:32,940
before it even hits the controller we

00:44:30,599 --> 00:44:34,619
talked about validation and how we can

00:44:32,940 --> 00:44:36,119
make that really simple and strap that

00:44:34,619 --> 00:44:38,670
away making sure we bubbling up those

00:44:36,119 --> 00:44:41,519
exceptions which we can then just catch

00:44:38,670 --> 00:44:45,109
and re throw we talked about formatting

00:44:41,519 --> 00:44:48,779
output using fractal and looking at the

00:44:45,109 --> 00:44:50,930
and looking at transformers we talked

00:44:48,779 --> 00:44:54,480
about those two at once that's exciting

00:44:50,930 --> 00:44:56,150
we talked about pagination and how one

00:44:54,480 --> 00:44:58,289
unfortunately we kind of have to do it

00:44:56,150 --> 00:45:00,119
but secondly it can actually be quite

00:44:58,289 --> 00:45:03,450
easy to do and to pass that all the way

00:45:00,119 --> 00:45:04,980
down into our repositories in the same

00:45:03,450 --> 00:45:07,529
way that we pass our sorts and filters

00:45:04,980 --> 00:45:09,240
straight down into our repositories and

00:45:07,529 --> 00:45:11,880
we make our repositories look nice we

00:45:09,240 --> 00:45:13,349
make our our controllers at nice and

00:45:11,880 --> 00:45:16,170
everything everything just kind of works

00:45:13,349 --> 00:45:18,119
right that's the idea and then finally

00:45:16,170 --> 00:45:20,630
we just have a look at a couple of tools

00:45:18,119 --> 00:45:24,049
that can kind of help us along the way

00:45:20,630 --> 00:45:24,049
thank you very much

00:45:30,310 --> 00:45:36,490
we've got a couple of mics or questions

00:45:32,940 --> 00:45:38,590
I'm also quite happy to take questions

00:45:36,490 --> 00:45:39,670
on anything else relating to api's hundo

00:45:38,590 --> 00:45:43,690
maybe you want to ask questions about

00:45:39,670 --> 00:45:47,070
versioning or whatever floor is open

00:45:43,690 --> 00:45:47,070
let's have a chat about a key ice

00:45:56,300 --> 00:45:59,300
yeah

00:46:04,270 --> 00:46:10,370
maybe just a quick one coach mentioned

00:46:07,850 --> 00:46:13,160
about HTTP codes that you are using for

00:46:10,370 --> 00:46:15,860
the response codes and you mentioned 301

00:46:13,160 --> 00:46:19,190
and 302 and as far as I know they have

00:46:15,860 --> 00:46:20,900
been superseded by 307 and 308 obviously

00:46:19,190 --> 00:46:23,420
what's your opinion is it should we

00:46:20,900 --> 00:46:29,080
usually show it should we really use 307

00:46:23,420 --> 00:46:34,130
entry wait I'm so using fair one fair -

00:46:29,080 --> 00:46:38,750
I haven't looked into 307 308 that much

00:46:34,130 --> 00:46:40,310
from honest maybe I should I will have a

00:46:38,750 --> 00:46:42,470
look after this talk and I will get back

00:46:40,310 --> 00:46:43,310
to you if you drop me a tweet then we

00:46:42,470 --> 00:46:54,620
have we can have a conversation about

00:46:43,310 --> 00:46:56,720
that after recording this API right

00:46:54,620 --> 00:46:59,030
whenever we are like facing the huge

00:46:56,720 --> 00:47:01,250
data alright let's see whose data you

00:46:59,030 --> 00:47:03,620
are always trying to hydrate things and

00:47:01,250 --> 00:47:05,630
then do the process the thing can't we

00:47:03,620 --> 00:47:07,310
use the raw kind of things Roy's skill

00:47:05,630 --> 00:47:09,860
provided by the doctor and Roy and

00:47:07,310 --> 00:47:11,570
process the thing and just by passing

00:47:09,860 --> 00:47:14,030
the other thing because normally like

00:47:11,570 --> 00:47:16,910
when you got like huge table like if you

00:47:14,030 --> 00:47:20,210
need to export it on any format doctrine

00:47:16,910 --> 00:47:23,240
just preloaded on the in its memory and

00:47:20,210 --> 00:47:25,520
try to hydrated and then export it right

00:47:23,240 --> 00:47:28,250
which is virtually impossible right to

00:47:25,520 --> 00:47:30,710
export the data in any form can't we do

00:47:28,250 --> 00:47:34,040
that that way in order to increase the

00:47:30,710 --> 00:47:37,310
performance of our application yeah so

00:47:34,040 --> 00:47:40,370
when it when it comes to performance and

00:47:37,310 --> 00:47:43,040
doctrine it can get a bit complicated

00:47:40,370 --> 00:47:44,480
and sometimes sometimes yes you get to a

00:47:43,040 --> 00:47:46,370
point where you're basically writing the

00:47:44,480 --> 00:47:50,330
queries instead of using stuff that they

00:47:46,370 --> 00:47:53,230
are I might do for you using the RM is a

00:47:50,330 --> 00:47:57,530
really nice simple way of managing stuff

00:47:53,230 --> 00:47:58,580
the you can do doctrine allows you to do

00:47:57,530 --> 00:48:01,250
a lot with it though in order to

00:47:58,580 --> 00:48:03,470
fine-tune performance so say that you

00:48:01,250 --> 00:48:04,550
have in your transformer and you know

00:48:03,470 --> 00:48:07,160
full well that you're going to be

00:48:04,550 --> 00:48:08,240
including if you're looking at a user

00:48:07,160 --> 00:48:11,990
and you're going to be including an

00:48:08,240 --> 00:48:13,340
address and maybe that and maybe

00:48:11,990 --> 00:48:15,650
like their comments on a blog or

00:48:13,340 --> 00:48:17,360
something then you can automatically

00:48:15,650 --> 00:48:18,710
preload them but you can also say that

00:48:17,360 --> 00:48:20,300
actually you don't want those to be

00:48:18,710 --> 00:48:22,070
selected by default you want them to

00:48:20,300 --> 00:48:24,980
only be loaded when you're when it's

00:48:22,070 --> 00:48:26,600
actually requesting them so there's a

00:48:24,980 --> 00:48:29,480
lot of stuff that you can do there

00:48:26,600 --> 00:48:31,280
as I mentioned the doctrine paginate err

00:48:29,480 --> 00:48:32,630
you can there's a whole load of stuff

00:48:31,280 --> 00:48:34,010
for in terms of the queries it will run

00:48:32,630 --> 00:48:36,020
where it might do a whole load of joins

00:48:34,010 --> 00:48:38,330
and then it's doing a select and it's

00:48:36,020 --> 00:48:41,900
essentially doing a select like a select

00:48:38,330 --> 00:48:43,640
star on one table which is joined to

00:48:41,900 --> 00:48:46,190
like every other possible table it could

00:48:43,640 --> 00:48:47,600
be joined to which is sometimes really

00:48:46,190 --> 00:48:48,680
really unhelpful particularly for you

00:48:47,600 --> 00:48:51,470
notes of one to one because it's just

00:48:48,680 --> 00:48:52,940
selecting data for no reason so yeah

00:48:51,470 --> 00:48:54,680
there's a lot of stuff you can do

00:48:52,940 --> 00:48:58,880
doctoring optimizations you could spend

00:48:54,680 --> 00:49:01,850
months on it I know that people do spend

00:48:58,880 --> 00:49:03,670
months on it I we had Sam those spent a

00:49:01,850 --> 00:49:06,110
huge amount of time trying to optimize

00:49:03,670 --> 00:49:09,230
all kinds of different end points of

00:49:06,110 --> 00:49:20,170
doctrines so yeah it's there's a lot of

00:49:09,230 --> 00:49:20,170
stuff there yeah that's how to get there

00:49:24,690 --> 00:49:31,530
hey great talk just wondering how would

00:49:28,920 --> 00:49:33,539
you differentiate between a four or four

00:49:31,530 --> 00:49:35,549
because the route doesn't exist or four

00:49:33,539 --> 00:49:37,650
or four because the object the person is

00:49:35,549 --> 00:49:39,569
trying to get doesn't exist how would

00:49:37,650 --> 00:49:44,039
you recommend handling those sort of

00:49:39,569 --> 00:49:46,380
differences or say maybe these doesn't

00:49:44,039 --> 00:49:47,670
have permission to hit that route and or

00:49:46,380 --> 00:49:50,670
they don't have permission to get that

00:49:47,670 --> 00:49:54,270
object like a 401 or 403 whatever the

00:49:50,670 --> 00:49:55,500
correct one is yeah so I mean you've

00:49:54,270 --> 00:49:57,720
already answered half of your own

00:49:55,500 --> 00:50:00,150
question in the if they don't have

00:49:57,720 --> 00:50:01,970
access to if they don't have access that

00:50:00,150 --> 00:50:05,579
you should be returning 401 or 403

00:50:01,970 --> 00:50:06,780
depending on if they're logged in or if

00:50:05,579 --> 00:50:10,230
they're logged in but don't have access

00:50:06,780 --> 00:50:13,349
or not logged in the other side of that

00:50:10,230 --> 00:50:14,609
is that the if your if you if the URL

00:50:13,349 --> 00:50:17,430
that you're requesting if the resource

00:50:14,609 --> 00:50:18,869
you're requesting is user number 32 that

00:50:17,430 --> 00:50:20,670
user doesn't exist which means that

00:50:18,869 --> 00:50:24,450
route doesn't exist either it's the same

00:50:20,670 --> 00:50:25,680
thing because the user ID is in is part

00:50:24,450 --> 00:50:26,970
of the result is the resource that

00:50:25,680 --> 00:50:30,029
you're requesting it's part of the URL

00:50:26,970 --> 00:50:32,250
you're alright so you're requesting

00:50:30,029 --> 00:50:33,839
slash user slash one that user doesn't

00:50:32,250 --> 00:50:35,490
exist which means that route doesn't

00:50:33,839 --> 00:50:42,059
exist the route exists when the when the

00:50:35,490 --> 00:50:44,299
resource does so it's a it's a bit of a

00:50:42,059 --> 00:50:46,349
mindset thing I guess in that like

00:50:44,299 --> 00:50:47,400
whether or not you I guess what you

00:50:46,349 --> 00:50:52,200
would the question you're really asking

00:50:47,400 --> 00:50:56,900
is is perhaps are you saying about maybe

00:50:52,200 --> 00:51:01,980
slash users doesn't exist or is that the

00:50:56,900 --> 00:51:05,329
I guess that's I guess that's a problem

00:51:01,980 --> 00:51:07,980
with we haven't solved with HTTP yet in

00:51:05,329 --> 00:51:09,480
we just say that whatever you're trying

00:51:07,980 --> 00:51:11,910
to request the resource do you're

00:51:09,480 --> 00:51:13,559
requesting doesn't exist we don't say at

00:51:11,910 --> 00:51:15,809
what level that doesn't exist we don't

00:51:13,559 --> 00:51:18,119
say that oh well the the the three

00:51:15,809 --> 00:51:19,619
folders that are higher than it the

00:51:18,119 --> 00:51:23,180
three parts in the past are higher than

00:51:19,619 --> 00:51:23,180
that in the hierarchy don't exist either

00:51:23,660 --> 00:51:30,660
yeah I think that's an HTTP problem that

00:51:26,819 --> 00:51:32,700
we haven't yet solved but for now we

00:51:30,660 --> 00:51:33,809
could just like delete the characters at

00:51:32,700 --> 00:51:36,289
the end of the URL and see when it

00:51:33,809 --> 00:51:36,289
starts to work

00:51:36,720 --> 00:51:48,340
sorry hello oh I'll hold it a bit and

00:51:45,030 --> 00:51:50,260
I've not actually used symphony myself

00:51:48,340 --> 00:51:53,350
so I was just wondering what the

00:51:50,260 --> 00:51:55,480
decision behind using symphony for rest

00:51:53,350 --> 00:51:59,920
api a building the rest api was and

00:51:55,480 --> 00:52:01,480
whether it has anything specific for

00:51:59,920 --> 00:52:10,060
building rest api so that something else

00:52:01,480 --> 00:52:12,430
doesn't sure so yeah so symphony PHP is

00:52:10,060 --> 00:52:16,960
a great language for web stuff right and

00:52:12,430 --> 00:52:18,790
a subset of that is api's so therefore

00:52:16,960 --> 00:52:22,270
in my opinion PHP is also quite good at

00:52:18,790 --> 00:52:24,640
generally producing api's you then have

00:52:22,270 --> 00:52:26,590
a series of different frameworks in the

00:52:24,640 --> 00:52:32,730
PHP community you've got laravel you've

00:52:26,590 --> 00:52:35,950
got Symphony cake CodeIgniter

00:52:32,730 --> 00:52:39,190
the thing the thing about them is and a

00:52:35,950 --> 00:52:42,040
lot of a lot of framework choices end up

00:52:39,190 --> 00:52:44,490
coming down to some of it comes down to

00:52:42,040 --> 00:52:46,900
like what experience you having a team

00:52:44,490 --> 00:52:49,060
some of it comes down to sort of how

00:52:46,900 --> 00:52:50,530
well maintained it is obviously there

00:52:49,060 --> 00:52:53,680
are frameworks out there that haven't

00:52:50,530 --> 00:52:56,800
really been maintained in a long time in

00:52:53,680 --> 00:52:58,720
terms of Symphony and what what it has

00:52:56,800 --> 00:53:04,360
specifically I would say things like the

00:52:58,720 --> 00:53:06,430
parameter but like can really me as a

00:53:04,360 --> 00:53:09,340
sort of showing earlier way or where

00:53:06,430 --> 00:53:11,620
you're basically building those objects

00:53:09,340 --> 00:53:13,210
and it's doing it all for you but that

00:53:11,620 --> 00:53:15,270
said symphony is just a set of

00:53:13,210 --> 00:53:17,260
components it's just a set of libraries

00:53:15,270 --> 00:53:18,790
there's no reason that when you're

00:53:17,260 --> 00:53:21,070
building in laravel application you can

00:53:18,790 --> 00:53:21,880
use those components in the same way

00:53:21,070 --> 00:53:23,140
when you're building a symphony

00:53:21,880 --> 00:53:25,000
application if there's a really nice

00:53:23,140 --> 00:53:32,920
design framework component then you

00:53:25,000 --> 00:53:34,570
could go and use that so I kind of I you

00:53:32,920 --> 00:53:36,400
don't have to build it on symphony in

00:53:34,570 --> 00:53:39,600
order to in order to use Symphony

00:53:36,400 --> 00:53:42,280
components so the answer is kind of no

00:53:39,600 --> 00:53:44,050
in terms of API is very specifically

00:53:42,280 --> 00:53:47,770
there isn't a reason why you should 100%

00:53:44,050 --> 00:53:50,170
new symphony over laravel for api's

00:53:47,770 --> 00:53:52,660
I would the reasons that I would suggest

00:53:50,170 --> 00:53:54,850
you Symphony would probably be different

00:53:52,660 --> 00:54:00,100
than that and that's a very different

00:53:54,850 --> 00:54:02,980
conversation but yeah does that kind of

00:54:00,100 --> 00:54:07,720
answer your question sorry it's a bit of

00:54:02,980 --> 00:54:09,930
it it's bit of a non-answer but what was

00:54:07,720 --> 00:54:09,930
that sorry

00:54:12,220 --> 00:54:16,510
so you're saying about the microkernel

00:54:14,230 --> 00:54:20,680
in the phosphorus bundle of save you

00:54:16,510 --> 00:54:22,060
running sir so yeah so there is stuff in

00:54:20,680 --> 00:54:26,860
symphony that basically allows you to

00:54:22,060 --> 00:54:28,780
build solar Symphony flex you can you

00:54:26,860 --> 00:54:29,980
basically only grab in the components

00:54:28,780 --> 00:54:31,300
that you need you don't have to pull in

00:54:29,980 --> 00:54:33,910
the entire framework the full stack

00:54:31,300 --> 00:54:36,160
framework Symphony doesn't exist anymore

00:54:33,910 --> 00:54:37,780
you you just request the components that

00:54:36,160 --> 00:54:39,850
you need so you can have something that

00:54:37,780 --> 00:54:41,740
only has the components you need for the

00:54:39,850 --> 00:54:44,380
API if you use laravel you have to pull

00:54:41,740 --> 00:54:46,240
in basically all of laravel at the same

00:54:44,380 --> 00:54:51,460
time so yeah it's a good chance a good

00:54:46,240 --> 00:54:53,680
job in terms of the authorization and

00:54:51,460 --> 00:54:55,840
authentication right response code do

00:54:53,680 --> 00:55:00,160
you recommend to send the right response

00:54:55,840 --> 00:55:01,770
code or 400 will be fine send the

00:55:00,160 --> 00:55:03,730
correct response code in which case our

00:55:01,770 --> 00:55:06,040
authorization and authentication

00:55:03,730 --> 00:55:08,500
response code right yeah do you

00:55:06,040 --> 00:55:11,080
recommend to send the right response

00:55:08,500 --> 00:55:14,230
code or 400 will be fine yeah oh it's

00:55:11,080 --> 00:55:17,230
not the right response code what 401 403

00:55:14,230 --> 00:55:19,330
yeah cause like don't you think it will

00:55:17,230 --> 00:55:22,510
be the security risk if you send it

00:55:19,330 --> 00:55:25,450
right error code for the hacker I mean

00:55:22,510 --> 00:55:27,100
if your security is based on the fact

00:55:25,450 --> 00:55:31,109
that someone can't guess or auto

00:55:27,100 --> 00:55:33,460
incrementing IDs or you you IDs then

00:55:31,109 --> 00:55:36,430
that's like that shouldn't be where your

00:55:33,460 --> 00:55:38,560
security is it's it shouldn't it should

00:55:36,430 --> 00:55:39,790
never be insecure to say well to be fair

00:55:38,560 --> 00:55:43,000
you shouldn't use also in committing IDs

00:55:39,790 --> 00:55:45,160
just generally speaking otherwise

00:55:43,000 --> 00:55:48,130
someone can go hey I want to go to a

00:55:45,160 --> 00:55:51,630
user ID slash 5001 and see if that that

00:55:48,130 --> 00:55:54,400
exists if any of you ever submit CFPs

00:55:51,630 --> 00:55:56,830
are using open CFE you can always see

00:55:54,400 --> 00:55:58,869
how many talks have been submitted to a

00:55:56,830 --> 00:56:01,140
conference by basically submitting a

00:55:58,869 --> 00:56:05,010
talk and seeing what you're talk ideas

00:56:01,140 --> 00:56:06,860
- CFP I love open see if we should

00:56:05,010 --> 00:56:11,370
clarify it's just like a little a little

00:56:06,860 --> 00:56:12,570
tip there but yeah so you you IDs are

00:56:11,370 --> 00:56:15,150
basically you're just guessing random

00:56:12,570 --> 00:56:17,430
IDs if you happen to find one it says it

00:56:15,150 --> 00:56:19,170
exists like if that's if that's your

00:56:17,430 --> 00:56:20,430
security avec to the fact that that the

00:56:19,170 --> 00:56:22,170
if you can find out that something

00:56:20,430 --> 00:56:25,470
exists but you don't have access to it I

00:56:22,170 --> 00:56:26,550
yeah that security through obscurity if

00:56:25,470 --> 00:56:29,580
security should be the actual

00:56:26,550 --> 00:56:31,140
authentication itself and just don't use

00:56:29,580 --> 00:56:33,680
also incrementing IDs then you're not

00:56:31,140 --> 00:56:33,680

YouTube URL: https://www.youtube.com/watch?v=zvl5__Wov9o


