Title: Test to Break Principles  - Rob Waller - PHP UK Conference 2019
Publication date: 2019-03-22
Playlist: PHP UK Conference 2019
Description: 
	The talk aims to highlight the importance of testing, why developers must spend more of their time testing, how testing generates more robust applications and why testing makes developers' lives easier.

The talk is based around a live coding demo. 

The talk will:

- Explain the difference between tests that prove an application works and tests which aim to break the application logic. 
- Highlight how test to break principles force developers to introduce logic to handle unexpected behaviour.
- Show how test to break principles result in more robust applications as developers write code that can only be used in one way. 
- Encourage developers to apply test to break principles to all types of tests, including manual tests.
Captions: 
	00:00:03,440 --> 00:00:09,090
so today we're going to talk about

00:00:06,020 --> 00:00:13,380
basically TDD but of a specific part of

00:00:09,090 --> 00:00:15,030
TDD related to tester break you may have

00:00:13,380 --> 00:00:16,710
heard this concept in another form

00:00:15,030 --> 00:00:20,430
people have called it negative testing

00:00:16,710 --> 00:00:24,150
but I prefer the term tester break so a

00:00:20,430 --> 00:00:24,689
little bit about me before we dive in so

00:00:24,150 --> 00:00:27,269
I'm Rob

00:00:24,689 --> 00:00:29,250
I'm a developer I've been coding for

00:00:27,269 --> 00:00:34,260
about 14 years

00:00:29,250 --> 00:00:37,670
as the slide suggests I once appeared on

00:00:34,260 --> 00:00:40,350
CNN not because I committed any crimes I

00:00:37,670 --> 00:00:43,530
wrote an algorithm to analyze Twitter

00:00:40,350 --> 00:00:46,860
and in 2012 a little bit crazy

00:00:43,530 --> 00:00:48,270
it's a weird fun experience I've been

00:00:46,860 --> 00:00:51,239
ahead of technology for two and a half

00:00:48,270 --> 00:00:53,640
years I recently stopped that very

00:00:51,239 --> 00:00:57,570
stressful job I went back to contracting

00:00:53,640 --> 00:01:00,420
and having a nice relaxing time and one

00:00:57,570 --> 00:01:04,680
of my interests is testing and I also

00:01:00,420 --> 00:01:07,590
have a degree in history so a bit of a

00:01:04,680 --> 00:01:09,810
mixed bag there so we're gonna talk

00:01:07,590 --> 00:01:13,830
about test to break and basically how

00:01:09,810 --> 00:01:20,640
test to break helps you build more

00:01:13,830 --> 00:01:25,640
robust better software so essentially if

00:01:20,640 --> 00:01:28,740
I said to you drive your car into a tree

00:01:25,640 --> 00:01:32,159
you would look at me and think I was

00:01:28,740 --> 00:01:35,310
slightly mad you think who is this crazy

00:01:32,159 --> 00:01:38,220
guy asking me to drive my car into a

00:01:35,310 --> 00:01:40,439
tree I will hurt myself but the thing

00:01:38,220 --> 00:01:42,600
about madness sometimes is it can be a

00:01:40,439 --> 00:01:45,240
matter of perspective and if you work

00:01:42,600 --> 00:01:48,229
for encap which is the new car

00:01:45,240 --> 00:01:52,250
assessment program your job is to

00:01:48,229 --> 00:01:55,340
essentially crash cars into trees

00:01:52,250 --> 00:01:58,380
obviously they don't use trees but they

00:01:55,340 --> 00:02:01,950
crash cars into walls and they crash

00:01:58,380 --> 00:02:06,000
things into cars and the reason they're

00:02:01,950 --> 00:02:08,869
doing this is to see how safe cars are

00:02:06,000 --> 00:02:11,400
they're essentially testing them in

00:02:08,869 --> 00:02:13,560
unusual circumstances to see what

00:02:11,400 --> 00:02:14,200
happens because essentially they want to

00:02:13,560 --> 00:02:16,900
be

00:02:14,200 --> 00:02:21,250
or they want to make cars better safer

00:02:16,900 --> 00:02:24,970
and more reliable and when we write code

00:02:21,250 --> 00:02:26,860
we need to do something similar we need

00:02:24,970 --> 00:02:31,629
to ask difficult questions of our code

00:02:26,860 --> 00:02:33,310
to see what happens to find bugs so this

00:02:31,629 --> 00:02:36,549
talk is mainly going to be around the

00:02:33,310 --> 00:02:38,769
concept of unit testing and just to

00:02:36,549 --> 00:02:42,430
cover off very quickly what a unit test

00:02:38,769 --> 00:02:43,840
is if you're not fully aware a unit test

00:02:42,430 --> 00:02:47,109
and I think this is important actually

00:02:43,840 --> 00:02:49,329
because sometimes the term unit test can

00:02:47,109 --> 00:02:52,359
often be sort of just thrown around to

00:02:49,329 --> 00:02:55,299
cover any form of code test and it's not

00:02:52,359 --> 00:02:59,590
really necessarily accurate so a unit

00:02:55,299 --> 00:03:02,170
test is a test for a unit of code and a

00:02:59,590 --> 00:03:04,420
unit of code is basically the smallest

00:03:02,170 --> 00:03:07,959
amount of code you can write to achieve

00:03:04,420 --> 00:03:09,629
a certain piece of functionality so what

00:03:07,959 --> 00:03:11,620
we can see here on the slide is

00:03:09,629 --> 00:03:14,500
something that I wrote for an open

00:03:11,620 --> 00:03:17,440
source library it's just a simple gets

00:03:14,500 --> 00:03:21,250
method that merges two arrays together

00:03:17,440 --> 00:03:23,230
and passes it back you would write a

00:03:21,250 --> 00:03:26,950
couple of tests for this just to make

00:03:23,230 --> 00:03:28,359
sure that the or cover unit test just to

00:03:26,950 --> 00:03:30,220
make sure you're getting back the

00:03:28,359 --> 00:03:32,319
correct array with the correct data in

00:03:30,220 --> 00:03:33,819
it and that's essentially what we're

00:03:32,319 --> 00:03:35,680
doing here we're not doing anything more

00:03:33,819 --> 00:03:37,870
complicated than that and that's what

00:03:35,680 --> 00:03:40,180
unit tests really focus on things that

00:03:37,870 --> 00:03:41,560
get more complicated they're more

00:03:40,180 --> 00:03:45,209
they're sort of more code tests

00:03:41,560 --> 00:03:48,459
integration tests things like that so

00:03:45,209 --> 00:03:53,169
there are three types of tests that you

00:03:48,459 --> 00:03:58,049
can do and this is the first one anyone

00:03:53,169 --> 00:03:58,049
have any idea what type of test this is

00:03:58,230 --> 00:04:03,250
pardon No

00:04:01,329 --> 00:04:06,699
it might be I mean I've not heard monkey

00:04:03,250 --> 00:04:08,919
test before yes exactly

00:04:06,699 --> 00:04:12,250
the developers favorite kind of tests no

00:04:08,919 --> 00:04:14,859
tests I say this is or facetiously but I

00:04:12,250 --> 00:04:17,199
you know in my career and I'm sure some

00:04:14,859 --> 00:04:19,630
of you will feel the same there are lots

00:04:17,199 --> 00:04:21,609
of places that basically don't write any

00:04:19,630 --> 00:04:24,580
tests and I've been the person who's

00:04:21,609 --> 00:04:27,700
gone into companies and said yes you

00:04:24,580 --> 00:04:30,220
need to start doing some QA at least so

00:04:27,700 --> 00:04:31,570
happens so yet no test and I think

00:04:30,220 --> 00:04:32,710
there's a reason for this I think

00:04:31,570 --> 00:04:35,140
there's a reason why this occurs

00:04:32,710 --> 00:04:37,930
sometimes and that's because you know

00:04:35,140 --> 00:04:41,050
TDD and unit testing can be a scary

00:04:37,930 --> 00:04:43,750
topic to get started with you know

00:04:41,050 --> 00:04:46,780
because and often developers are

00:04:43,750 --> 00:04:49,150
introduced to it in not in the best way

00:04:46,780 --> 00:04:51,450
always often it can be oh we've got some

00:04:49,150 --> 00:04:55,840
legacy code we wanted to introduce

00:04:51,450 --> 00:04:57,400
testing test the legacy code and and

00:04:55,840 --> 00:04:59,440
that doesn't really work so there's a

00:04:57,400 --> 00:05:01,180
couple of tips that I would give to

00:04:59,440 --> 00:05:03,730
anyone who sort of starting their

00:05:01,180 --> 00:05:07,210
journey on unit testing or test-driven

00:05:03,730 --> 00:05:09,690
development is first of all do test

00:05:07,210 --> 00:05:11,590
business logic but don't test

00:05:09,690 --> 00:05:14,530
input-output okay

00:05:11,590 --> 00:05:16,810
and what that means is you're just

00:05:14,530 --> 00:05:20,380
testing logic you're not testing things

00:05:16,810 --> 00:05:22,750
like databases or file systems okay you

00:05:20,380 --> 00:05:24,930
ideally you mock them and but even so

00:05:22,750 --> 00:05:28,300
you should still minimize your mocks if

00:05:24,930 --> 00:05:30,160
possible basically business logic your

00:05:28,300 --> 00:05:33,760
code should be written so it doesn't

00:05:30,160 --> 00:05:36,040
care where data comes from or where it's

00:05:33,760 --> 00:05:38,650
going so if you got some data from the

00:05:36,040 --> 00:05:40,870
database and you process it using your

00:05:38,650 --> 00:05:43,750
business logic and you send it to the

00:05:40,870 --> 00:05:45,700
file system like your code shouldn't

00:05:43,750 --> 00:05:47,710
care about that that it's come from the

00:05:45,700 --> 00:05:50,350
database and it's going to the file

00:05:47,710 --> 00:05:53,050
system or vice versa or whatever you're

00:05:50,350 --> 00:05:55,240
testing with unit tests specifically

00:05:53,050 --> 00:05:57,940
business logic okay and that will help

00:05:55,240 --> 00:06:02,140
you if you get lost in input-output

00:05:57,940 --> 00:06:05,500
you'll struggle the other thing is do

00:06:02,140 --> 00:06:07,090
test private methods and don't test big

00:06:05,500 --> 00:06:09,610
methods okay and this is the legacy

00:06:07,090 --> 00:06:12,900
problem often you'll get a legacy

00:06:09,610 --> 00:06:15,610
project with you know your 20 30 40 line

00:06:12,900 --> 00:06:18,850
methods and then someone will say test

00:06:15,610 --> 00:06:20,830
that now those methods are enormous and

00:06:18,850 --> 00:06:22,450
they have huge amounts of logic in it

00:06:20,830 --> 00:06:24,670
there's no way you can write the test to

00:06:22,450 --> 00:06:27,730
cover all the paths through that logic

00:06:24,670 --> 00:06:30,190
so a better approach is to break that

00:06:27,730 --> 00:06:32,260
legacy code down into smaller private

00:06:30,190 --> 00:06:34,630
methods now some people don't like using

00:06:32,260 --> 00:06:36,130
private methods in classes but I think

00:06:34,630 --> 00:06:37,540
if you're dealing with legacy code and

00:06:36,130 --> 00:06:39,550
you want to get going with testing and

00:06:37,540 --> 00:06:41,260
you want to make your life easier break

00:06:39,550 --> 00:06:43,180
large methods down in

00:06:41,260 --> 00:06:45,070
to smaller chunks smaller private

00:06:43,180 --> 00:06:47,020
methods and you can use reflection to

00:06:45,070 --> 00:06:50,650
achieve that so that helps so if you're

00:06:47,020 --> 00:06:54,010
struggling with testing doing these

00:06:50,650 --> 00:06:56,170
things will help you so the second type

00:06:54,010 --> 00:06:58,630
of testing we can do is a thing called

00:06:56,170 --> 00:07:02,230
test to work also known as positive

00:06:58,630 --> 00:07:04,780
testing okay and test to work is

00:07:02,230 --> 00:07:07,000
basically asking questions along the

00:07:04,780 --> 00:07:10,750
lines of does the system work as

00:07:07,000 --> 00:07:14,080
expected with standard inputs okay so

00:07:10,750 --> 00:07:16,540
you're saying in normal circumstances my

00:07:14,080 --> 00:07:18,900
code should do X and it should do Y so

00:07:16,540 --> 00:07:22,360
an example of this from cars would be

00:07:18,900 --> 00:07:25,150
you know a driver taking a valid key

00:07:22,360 --> 00:07:28,950
sticking in the ignition turning it and

00:07:25,150 --> 00:07:31,630
the engine comes on okay that would be a

00:07:28,950 --> 00:07:34,630
test of work test and then a second one

00:07:31,630 --> 00:07:36,610
to that would be you know given I have

00:07:34,630 --> 00:07:38,980
an invalid key and I put it in the

00:07:36,610 --> 00:07:41,920
ignition the engine shouldn't start okay

00:07:38,980 --> 00:07:43,030
so this is a standard scenario with

00:07:41,920 --> 00:07:45,610
standard inputs

00:07:43,030 --> 00:07:46,990
okay that's test to work and you will do

00:07:45,610 --> 00:07:49,000
a lot of test to work and test the work

00:07:46,990 --> 00:07:53,280
has its place and it's use it's

00:07:49,000 --> 00:07:55,900
particularly good for regression testing

00:07:53,280 --> 00:07:56,950
the final type of testing which is the

00:07:55,900 --> 00:08:01,330
one we're going to talk today about

00:07:56,950 --> 00:08:02,080
today is test a brake and this has two

00:08:01,330 --> 00:08:04,510
purposes

00:08:02,080 --> 00:08:07,570
the first is can the system be broken

00:08:04,510 --> 00:08:09,520
can we break the system in some way if I

00:08:07,570 --> 00:08:12,070
write a test that fires something odds

00:08:09,520 --> 00:08:14,020
at the methods or something strange

00:08:12,070 --> 00:08:16,600
happened or something unexpected happen

00:08:14,020 --> 00:08:18,640
and then the second part is you know

00:08:16,600 --> 00:08:20,950
what happens to the system in unusual

00:08:18,640 --> 00:08:23,850
circumstances can I create scenarios

00:08:20,950 --> 00:08:26,110
that the system wasn't expecting and

00:08:23,850 --> 00:08:27,970
essentially you're trying to do this

00:08:26,110 --> 00:08:31,110
because you want to find the odd bugs

00:08:27,970 --> 00:08:33,550
that you don't know about okay and

00:08:31,110 --> 00:08:36,010
examples of this would be you know

00:08:33,550 --> 00:08:37,060
instead of taking a valid key I get a

00:08:36,010 --> 00:08:39,280
screwdriver

00:08:37,060 --> 00:08:41,410
I stick the screwdriver in ignition I

00:08:39,280 --> 00:08:44,250
wiggle it around a bit and see if the

00:08:41,410 --> 00:08:46,510
engine starts if the engine starts

00:08:44,250 --> 00:08:49,630
there's a serious problem with my

00:08:46,510 --> 00:08:51,070
ignition system okay you know I built it

00:08:49,630 --> 00:08:55,150
to work with keys I hadn't thought about

00:08:51,070 --> 00:08:57,100
maybe screwdrivers or something else and

00:08:55,150 --> 00:08:59,590
the next part and I think this is the

00:08:57,100 --> 00:09:02,170
really important one would be the

00:08:59,590 --> 00:09:06,880
unusual circumstance so as mentioned

00:09:02,170 --> 00:09:10,450
earlier no one plans or aims to drive

00:09:06,880 --> 00:09:13,750
their car into a wall but maybe we

00:09:10,450 --> 00:09:16,210
should check what happens if we do so if

00:09:13,750 --> 00:09:19,390
we drove a car into a tree or a wall at

00:09:16,210 --> 00:09:22,000
30 miles an hour the outcome we'd one

00:09:19,390 --> 00:09:24,250
would be the seatbelts tighten and the

00:09:22,000 --> 00:09:27,490
airbags deploy and hopefully we'd

00:09:24,250 --> 00:09:29,830
survive the crash and this is like you

00:09:27,490 --> 00:09:33,010
should see this a bit like like failing

00:09:29,830 --> 00:09:34,420
gracefully the cars failing it's in a

00:09:33,010 --> 00:09:37,450
failure situation it can't get out

00:09:34,420 --> 00:09:40,300
itself out of but we're attempting to

00:09:37,450 --> 00:09:43,420
catch the exception which is the wall

00:09:40,300 --> 00:09:46,360
and handle that you know so that the

00:09:43,420 --> 00:09:48,400
driver and the passengers don't die yeah

00:09:46,360 --> 00:09:51,280
airbags deployed seatbelts tight and

00:09:48,400 --> 00:09:53,320
hopefully everyone survives and this is

00:09:51,280 --> 00:09:56,830
the sort of test end cap do to make sure

00:09:53,320 --> 00:09:58,870
that cars fail gracefully and they can

00:09:56,830 --> 00:10:01,780
survive certain odd scenarios because

00:09:58,870 --> 00:10:03,460
the likelihood of you you know I've been

00:10:01,780 --> 00:10:05,440
driving for a few years now and I've

00:10:03,460 --> 00:10:07,840
mentioned not crash into any wolves and

00:10:05,440 --> 00:10:11,200
my my fiance would say I am a terrible

00:10:07,840 --> 00:10:14,080
driver but you know so it's unusual to

00:10:11,200 --> 00:10:16,690
happen even for bad drivers like me so

00:10:14,080 --> 00:10:19,120
we're gonna have a look at this in a

00:10:16,690 --> 00:10:21,730
code example and you should be able to

00:10:19,120 --> 00:10:23,590
see it all on the screens I hope but the

00:10:21,730 --> 00:10:27,220
first example we're going to look at is

00:10:23,590 --> 00:10:30,130
basically email validation and this is a

00:10:27,220 --> 00:10:33,940
slightly silly example but I hope it

00:10:30,130 --> 00:10:36,340
will illustrate some of the issues so if

00:10:33,940 --> 00:10:38,970
we look at our code and you know I'm not

00:10:36,340 --> 00:10:40,900
typing this this is actually telekinesis

00:10:38,970 --> 00:10:46,690
that's how smart I am

00:10:40,900 --> 00:10:55,090
but basically if we get going oh sadly

00:10:46,690 --> 00:10:57,670
not and this is this started okay yeah

00:10:55,090 --> 00:11:01,600
it started sorry so essentially we have

00:10:57,670 --> 00:11:04,330
a very simple email class we've declared

00:11:01,600 --> 00:11:07,930
strict types at the top of it everyone

00:11:04,330 --> 00:11:10,270
uses strict types now don't they yeah

00:11:07,930 --> 00:11:11,980
if you don't and you're using type-ins

00:11:10,270 --> 00:11:13,900
you're gonna get type coercion problems

00:11:11,980 --> 00:11:14,410
which is another bug that will drive you

00:11:13,900 --> 00:11:16,780
mad

00:11:14,410 --> 00:11:18,700
and then we've written a simple test

00:11:16,780 --> 00:11:20,710
we've written a simple test class and

00:11:18,700 --> 00:11:22,300
all we're doing is we're instantiating

00:11:20,710 --> 00:11:24,400
our class and seeing if we can

00:11:22,300 --> 00:11:26,680
instantiate it and this follows the

00:11:24,400 --> 00:11:29,410
second law of TDD which is you write

00:11:26,680 --> 00:11:31,480
enough of a test to cause a breakage in

00:11:29,410 --> 00:11:35,200
the code and the first breakage you can

00:11:31,480 --> 00:11:39,910
cause is class instantiation Bob Martin

00:11:35,200 --> 00:11:41,680
has a great video on this okay and what

00:11:39,910 --> 00:11:45,220
we're going to do is we're gonna run

00:11:41,680 --> 00:11:51,850
this test quickly friend a PHP unit and

00:11:45,220 --> 00:11:53,680
everything should go green yay so

00:11:51,850 --> 00:11:55,810
everything's gone green we're okay our

00:11:53,680 --> 00:11:59,170
first test runs so we're now going to

00:11:55,810 --> 00:12:00,580
write a test to build a validate method

00:11:59,170 --> 00:12:02,470
because we want to validate an email

00:12:00,580 --> 00:12:04,180
address and we're going to look at how

00:12:02,470 --> 00:12:05,920
we write some tests to validate emails

00:12:04,180 --> 00:12:09,550
so our first test it's just going to be

00:12:05,920 --> 00:12:12,130
a test that validates a true email

00:12:09,550 --> 00:12:14,200
address so a correct email address so we

00:12:12,130 --> 00:12:16,240
can pass a correct email address in

00:12:14,200 --> 00:12:19,300
we're gonna instantiate our object and

00:12:16,240 --> 00:12:21,370
then we're going to call a validate

00:12:19,300 --> 00:12:25,060
method and we're going to do this assert

00:12:21,370 --> 00:12:28,300
true one tip at this point with PHP unit

00:12:25,060 --> 00:12:33,460
is I know a lot of developers use assert

00:12:28,300 --> 00:12:36,610
equals okay use assert same instead

00:12:33,460 --> 00:12:40,450
assert same checks value and type assert

00:12:36,610 --> 00:12:41,920
equals only checks value okay so you all

00:12:40,450 --> 00:12:44,740
get problems if you don't use assert

00:12:41,920 --> 00:12:46,780
same but we're using assert true and we

00:12:44,740 --> 00:12:48,370
can run this test and it's going to fail

00:12:46,780 --> 00:12:51,760
and it's gonna fail because we don't

00:12:48,370 --> 00:12:54,040
have a validate method okay and this is

00:12:51,760 --> 00:12:55,480
again back to TDD we're writing a test

00:12:54,040 --> 00:12:59,710
to cause a failure and then we're going

00:12:55,480 --> 00:13:03,550
to fix our code to work with the test so

00:12:59,710 --> 00:13:08,070
we go back to our email code and we're

00:13:03,550 --> 00:13:08,070
going to write a simple validate method

00:13:09,180 --> 00:13:17,020
it's going to accept a string

00:13:12,760 --> 00:13:19,150
and it's going to return a boolean okay

00:13:17,020 --> 00:13:21,850
now this stage we could write some logic

00:13:19,150 --> 00:13:26,050
but we're not going to we're just going

00:13:21,850 --> 00:13:28,030
to return true okay because that's going

00:13:26,050 --> 00:13:30,850
to fulfill the test and this is the

00:13:28,030 --> 00:13:33,250
third law TDD which is that you only

00:13:30,850 --> 00:13:36,730
write enough production code to fulfill

00:13:33,250 --> 00:13:39,490
the test okay now I know that this might

00:13:36,730 --> 00:13:41,410
seem mad but it does help to slow your

00:13:39,490 --> 00:13:43,960
coding write down and think to every

00:13:41,410 --> 00:13:47,200
logical piece so we've run the test

00:13:43,960 --> 00:13:49,840
again and it works now we need to write

00:13:47,200 --> 00:13:51,280
a test to fulfill the test to work set

00:13:49,840 --> 00:13:54,850
so we're going to write a test that

00:13:51,280 --> 00:13:59,820
passes in a email address that is

00:13:54,850 --> 00:14:03,310
invalid we'll then write some more logic

00:13:59,820 --> 00:14:07,330
to make sure that true test and our

00:14:03,310 --> 00:14:11,680
false test both pass okay and we're

00:14:07,330 --> 00:14:16,210
following a nice TDD flow here so assert

00:14:11,680 --> 00:14:21,010
false and we're going to pass in email

00:14:16,210 --> 00:14:24,910
validates and Rob dot test I think we

00:14:21,010 --> 00:14:27,970
pass in it's amazing when you already

00:14:24,910 --> 00:14:29,320
know what you've written and we're then

00:14:27,970 --> 00:14:36,070
going to run this and we should get a

00:14:29,320 --> 00:14:38,140
failure because and methods going to

00:14:36,070 --> 00:14:40,860
return true and it's expecting false

00:14:38,140 --> 00:14:43,360
okay and now we go and update our code

00:14:40,860 --> 00:14:46,510
so we're just going to do a little bit

00:14:43,360 --> 00:14:50,020
of reg X here put up your hand if you

00:14:46,510 --> 00:14:52,360
love reg X oh you are awake right yeah

00:14:50,020 --> 00:14:55,240
yeah I do like reg X after about 14

00:14:52,360 --> 00:14:57,760
years of coding I remember breaking a

00:14:55,240 --> 00:15:01,240
dotnet system with my terrible reg X it

00:14:57,760 --> 00:15:02,980
just lot ran out of memory so any way we

00:15:01,240 --> 00:15:06,300
can arise simple reg X and all it does

00:15:02,980 --> 00:15:10,000
is check whether the string has an @

00:15:06,300 --> 00:15:13,060
symbol in it okay that's all it's going

00:15:10,000 --> 00:15:14,950
to do and obviously because we're using

00:15:13,060 --> 00:15:19,330
our declare strict types and preg match

00:15:14,950 --> 00:15:21,190
returns 1 or 0 I think we're going to

00:15:19,330 --> 00:15:26,190
cast it to a boolean just to make sure

00:15:21,190 --> 00:15:32,050
it all works and then when we run this

00:15:26,190 --> 00:15:34,600
it should work yay it all works and

00:15:32,050 --> 00:15:38,170
we've achieved test to work right we've

00:15:34,600 --> 00:15:42,220
written some tests and it works now at

00:15:38,170 --> 00:15:45,280
this point we could say that I am an

00:15:42,220 --> 00:15:47,710
amazing developer because I've done

00:15:45,280 --> 00:15:48,610
everything I need to do i've written

00:15:47,710 --> 00:15:51,250
some tests

00:15:48,610 --> 00:15:52,180
i've been written some code that passes

00:15:51,250 --> 00:15:55,810
those tests

00:15:52,180 --> 00:15:57,670
i've got 100% code coverage like it's

00:15:55,810 --> 00:15:59,140
time to go home like this unicorn

00:15:57,670 --> 00:16:02,170
developer can go home and have a glass

00:15:59,140 --> 00:16:05,500
of wine you know I can I've done it all

00:16:02,170 --> 00:16:07,720
it's all perfect you know and this is

00:16:05,500 --> 00:16:09,640
the thing this is a line in testing that

00:16:07,720 --> 00:16:11,170
you get to so a test to work we've got

00:16:09,640 --> 00:16:13,210
to a line where we've kind of written

00:16:11,170 --> 00:16:15,280
some logic and we've written some tests

00:16:13,210 --> 00:16:16,840
to sort of show yeah it works it'll take

00:16:15,280 --> 00:16:18,310
a valid email address and it'll take a

00:16:16,840 --> 00:16:20,140
bad email address it will do some sort

00:16:18,310 --> 00:16:22,870
of assessment and it will say ones good

00:16:20,140 --> 00:16:24,490
ones bad but in this argument

00:16:22,870 --> 00:16:26,200
you know this example this is silly

00:16:24,490 --> 00:16:27,970
right we know that this isn't gonna work

00:16:26,200 --> 00:16:29,220
on emoji so we'd have to write some more

00:16:27,970 --> 00:16:32,290
code

00:16:29,220 --> 00:16:34,870
so basically we're now going to write a

00:16:32,290 --> 00:16:37,330
few more tests and we're going to write

00:16:34,870 --> 00:16:38,920
some tests to break we're gonna go oK

00:16:37,330 --> 00:16:40,600
we've got this logic let's write some

00:16:38,920 --> 00:16:47,800
more tests and see if we can break this

00:16:40,600 --> 00:16:50,020
thing so our first test and I'd nice

00:16:47,800 --> 00:16:53,130
misspelling there of public poll Beck

00:16:50,020 --> 00:16:55,630
it's not as bad as pubic at least and

00:16:53,130 --> 00:16:58,540
we're gonna do test validate folks

00:16:55,630 --> 00:17:00,550
obviously always oh no no TLD so this

00:16:58,540 --> 00:17:03,460
one what we're going to do is we're

00:17:00,550 --> 00:17:05,080
going to stick an @ sign in the email

00:17:03,460 --> 00:17:06,070
address but we're not going to give it a

00:17:05,080 --> 00:17:08,860
top-level domain

00:17:06,070 --> 00:17:11,350
yeah which will make its invalid but it

00:17:08,860 --> 00:17:13,720
will actually pass our current that

00:17:11,350 --> 00:17:16,630
current logic I can't test so this

00:17:13,720 --> 00:17:19,690
should this should fail so if cert false

00:17:16,630 --> 00:17:21,870
on Rob at test okay not a valid email

00:17:19,690 --> 00:17:25,140
address okay

00:17:21,870 --> 00:17:31,210
we're then going to write another test

00:17:25,140 --> 00:17:32,800
and it's going to be two acts okay so

00:17:31,210 --> 00:17:35,260
we're going to put two acts together in

00:17:32,800 --> 00:17:39,010
a otherwise valid email address and

00:17:35,260 --> 00:17:39,880
we're going to say this assert after

00:17:39,010 --> 00:17:42,040
we've instantiated

00:17:39,880 --> 00:17:45,640
we're gonna do this assert false again

00:17:42,040 --> 00:17:57,100
and we're gonna pass in a dodgy email

00:17:45,640 --> 00:17:58,930
address so again this will return true

00:17:57,100 --> 00:18:00,250
currently and in our final test is

00:17:58,930 --> 00:18:00,490
actually going to be as bit of a strange

00:18:00,250 --> 00:18:02,680
one

00:18:00,490 --> 00:18:05,650
we know that valid email addresses

00:18:02,680 --> 00:18:07,330
should have numbers in it okay so we're

00:18:05,650 --> 00:18:10,540
gonna put a test there that's going to

00:18:07,330 --> 00:18:15,130
assert true to make sure the next layer

00:18:10,540 --> 00:18:17,950
of business logic we write will cope

00:18:15,130 --> 00:18:19,930
with numbers and we'll return true even

00:18:17,950 --> 00:18:21,430
if the email address has numbers in so

00:18:19,930 --> 00:18:23,470
this time we're doing this assert true

00:18:21,430 --> 00:18:25,030
and we're gonna pass a number in now

00:18:23,470 --> 00:18:28,930
this what we're doing here isn't pure

00:18:25,030 --> 00:18:31,090
TDD right now but you know this is just

00:18:28,930 --> 00:18:33,250
a tutorial this is just an example but

00:18:31,090 --> 00:18:36,340
you know you get a picture so anyway we

00:18:33,250 --> 00:18:39,700
get two failures because a top-level

00:18:36,340 --> 00:18:41,230
domain and our double act emails don't

00:18:39,700 --> 00:18:46,090
work so we're gonna have to improve the

00:18:41,230 --> 00:18:50,140
logic slightly here and we're going to

00:18:46,090 --> 00:18:53,140
write some more complex reg X magic copy

00:18:50,140 --> 00:18:54,820
and paste is brilliant so this has like

00:18:53,140 --> 00:18:57,610
some checks in it so we can cope with

00:18:54,820 --> 00:19:00,580
numbers letters dots we're only going to

00:18:57,610 --> 00:19:02,260
allow one at symbol and then we're going

00:19:00,580 --> 00:19:05,040
to have some more letters and dots etc

00:19:02,260 --> 00:19:09,220
and it'll pass okay

00:19:05,040 --> 00:19:12,220
now the point here is that what we did

00:19:09,220 --> 00:19:13,960
and I know we'd have to write loads more

00:19:12,220 --> 00:19:16,330
tests to validate an email because

00:19:13,960 --> 00:19:18,700
emails are monstrously complicated and

00:19:16,330 --> 00:19:20,110
we all hoped that you know people like

00:19:18,700 --> 00:19:22,660
Taylor OTT well when they're building

00:19:20,110 --> 00:19:25,660
laravel they've covered this they've

00:19:22,660 --> 00:19:28,750
tested out of their validate email

00:19:25,660 --> 00:19:32,590
method possibly maybe not I don't know

00:19:28,750 --> 00:19:36,190
but the point is as we write more tests

00:19:32,590 --> 00:19:38,410
a code becomes more robust as we start

00:19:36,190 --> 00:19:41,440
going asking difficult questions of our

00:19:38,410 --> 00:19:44,440
code it becomes more robust it can cope

00:19:41,440 --> 00:19:47,620
with more scenarios that users who will

00:19:44,440 --> 00:19:49,630
do any random nonsense will throw our

00:19:47,620 --> 00:19:50,890
system okay and that's what we're trying

00:19:49,630 --> 00:19:53,320
to think of how do we break this thing

00:19:50,890 --> 00:19:53,600
because we know that users are going to

00:19:53,320 --> 00:19:56,510
break

00:19:53,600 --> 00:19:59,990
and this brings us on to another concept

00:19:56,510 --> 00:20:02,810
okay which is what is known as the

00:19:59,990 --> 00:20:04,580
working software myth you know as

00:20:02,810 --> 00:20:06,650
developers you'll have all worked at

00:20:04,580 --> 00:20:08,990
places and maybe well I certainly have

00:20:06,650 --> 00:20:11,600
where you know people are pressurizing

00:20:08,990 --> 00:20:14,060
you to get the thing working just get it

00:20:11,600 --> 00:20:16,460
working but we also talked about this

00:20:14,060 --> 00:20:18,380
concept of working software together

00:20:16,460 --> 00:20:20,930
like it's part of the agile manifesto

00:20:18,380 --> 00:20:23,450
you know we're meant to and this isn't a

00:20:20,930 --> 00:20:25,490
critique of the agile approach or agile

00:20:23,450 --> 00:20:28,430
manifesto but it's baked into our logic

00:20:25,490 --> 00:20:30,850
and our thinking as an industry and we

00:20:28,430 --> 00:20:33,440
say we value working software over

00:20:30,850 --> 00:20:35,150
comprehensive documentation in a July

00:20:33,440 --> 00:20:37,550
manifesto so it's there it's baked in we

00:20:35,150 --> 00:20:40,010
think about working software but there's

00:20:37,550 --> 00:20:41,990
something not quite right with working

00:20:40,010 --> 00:20:44,200
software it doesn't provide a complete

00:20:41,990 --> 00:20:46,640
answer of what we're trying to achieve

00:20:44,200 --> 00:20:49,910
we want to achieve actually something

00:20:46,640 --> 00:20:51,230
more of them working software so to

00:20:49,910 --> 00:20:53,540
highlight this I'm going to look at the

00:20:51,230 --> 00:20:57,920
car industry and talk about some of

00:20:53,540 --> 00:21:01,370
their working examples so in 1957 we

00:20:57,920 --> 00:21:03,800
have the Trabant okay and this was

00:21:01,370 --> 00:21:06,140
produced in East Germany and it was made

00:21:03,800 --> 00:21:07,820
from a thing called dura blast right and

00:21:06,140 --> 00:21:09,620
they're now having problems with

00:21:07,820 --> 00:21:12,020
euroblast because it basically doesn't

00:21:09,620 --> 00:21:14,150
degrade so they've come up with all

00:21:12,020 --> 00:21:16,220
sorts of ways to recycle it but they're

00:21:14,150 --> 00:21:19,310
struggling they're basically waiting

00:21:16,220 --> 00:21:21,440
until the Sun consumes the earth to

00:21:19,310 --> 00:21:22,820
solve the jura blast problem and the

00:21:21,440 --> 00:21:25,780
other great thing about the Trabant

00:21:22,820 --> 00:21:28,850
was you had to wait 13 years to get one

00:21:25,780 --> 00:21:30,770
imagine waiting 13 years for a car and a

00:21:28,850 --> 00:21:32,900
Trabant turns up I mean it's like if

00:21:30,770 --> 00:21:34,880
okay say it was a Tesla like people been

00:21:32,900 --> 00:21:37,490
complaining of light on waiting three

00:21:34,880 --> 00:21:39,040
months for my Tesla imagine waiting 13

00:21:37,490 --> 00:21:43,280
years for your Trabant

00:21:39,040 --> 00:21:47,480
we then have in 1970 we have the Lada

00:21:43,280 --> 00:21:49,490
from Russia right and this was built in

00:21:47,480 --> 00:21:53,360
association with fear but they basically

00:21:49,490 --> 00:21:55,250
took a fear and turned it into a tank to

00:21:53,360 --> 00:21:57,770
cope with Russian roads and the fact

00:21:55,250 --> 00:22:00,110
that Russia had no infrastructure of us

00:21:57,770 --> 00:22:02,600
under the Soviet Union to do they didn't

00:22:00,110 --> 00:22:05,120
have an AAA or the RAC no one was going

00:22:02,600 --> 00:22:06,320
to turn up and fix your ladder you had

00:22:05,120 --> 00:22:07,430
to be simple enough that you could just

00:22:06,320 --> 00:22:10,310
fix it yourself

00:22:07,430 --> 00:22:13,540
and then finally my favorite which is

00:22:10,310 --> 00:22:18,050
the height of British engineering is

00:22:13,540 --> 00:22:19,700
1973 the Reliant Robin this loops this

00:22:18,050 --> 00:22:21,140
is great yeah I think if you ever seen

00:22:19,700 --> 00:22:24,620
the episode Top Gear where this is on

00:22:21,140 --> 00:22:27,080
but the point here is what's important

00:22:24,620 --> 00:22:31,010
to think about here is these are all

00:22:27,080 --> 00:22:34,700
working cars like these cars will get

00:22:31,010 --> 00:22:38,300
you from A to B they all work yeah but

00:22:34,700 --> 00:22:40,220
would any of you buy them I hope not

00:22:38,300 --> 00:22:43,040
maybe but maybe as a sort of nostalgia

00:22:40,220 --> 00:22:47,060
thing but also like would any of them

00:22:43,040 --> 00:22:49,940
pass endcap tests so n cap was funnily

00:22:47,060 --> 00:22:52,970
enough introduced in the states in 1979

00:22:49,940 --> 00:22:54,410
before just after all these cars when

00:22:52,970 --> 00:22:58,580
all these crack cars stopped getting

00:22:54,410 --> 00:23:00,920
produced it we got we got n cap in

00:22:58,580 --> 00:23:04,460
Europe in 1997 thanks to the British

00:23:00,920 --> 00:23:06,860
transfer Department of Transport and you

00:23:04,460 --> 00:23:08,630
know you see that the ratings now every

00:23:06,860 --> 00:23:10,280
year on cars and it's part of the

00:23:08,630 --> 00:23:11,900
marketing gump that the car industry

00:23:10,280 --> 00:23:14,720
pumps out you know we've got a four star

00:23:11,900 --> 00:23:16,490
in cap rating or a five star and it had

00:23:14,720 --> 00:23:18,890
it's worked in the other way n cap ran

00:23:16,490 --> 00:23:22,070
tests on the Land Rover once and it only

00:23:18,890 --> 00:23:23,810
got one star and Land Rover was so

00:23:22,070 --> 00:23:25,490
mortified this but they just pulled the

00:23:23,810 --> 00:23:27,650
car they stopped producing it they'd

00:23:25,490 --> 00:23:29,630
spent years building this car got a one

00:23:27,650 --> 00:23:31,130
star on n cap and they just scrapped it

00:23:29,630 --> 00:23:33,200
because it wasn't gonna sell they knew

00:23:31,130 --> 00:23:35,810
it wasn't gonna sell and the point is

00:23:33,200 --> 00:23:38,480
yes technology has improved so that you

00:23:35,810 --> 00:23:41,330
know a cars had got better but testing

00:23:38,480 --> 00:23:44,390
the car industry has improved the

00:23:41,330 --> 00:23:48,500
quality of cars dramatically and it's

00:23:44,390 --> 00:23:50,780
the same principle with coding so

00:23:48,500 --> 00:23:52,730
working software isn't really what we're

00:23:50,780 --> 00:23:56,630
aiming for what I feel that we're aiming

00:23:52,730 --> 00:24:00,170
for really is good software that

00:23:56,630 --> 00:24:02,450
functions well and is bug free now

00:24:00,170 --> 00:24:04,640
there's a slight caveat to bug free when

00:24:02,450 --> 00:24:08,240
you're never gonna remove all bugs from

00:24:04,640 --> 00:24:10,880
code ok that's basically impossible but

00:24:08,240 --> 00:24:13,340
you should be minimising bugs as much as

00:24:10,880 --> 00:24:17,030
possible I have a little game I like to

00:24:13,340 --> 00:24:18,290
play which I call the two-minute rule so

00:24:17,030 --> 00:24:21,440
if you sit me down in front of your

00:24:18,290 --> 00:24:25,549
website and I can't find a bug

00:24:21,440 --> 00:24:28,159
two minutes your sites probably okay but

00:24:25,549 --> 00:24:30,860
if I go onto your website open the

00:24:28,159 --> 00:24:34,100
console and find your logging like hello

00:24:30,860 --> 00:24:36,409
world and this is debug code you know I

00:24:34,100 --> 00:24:39,710
know that most likely that's just the

00:24:36,409 --> 00:24:41,269
tip of the iceberg right and you should

00:24:39,710 --> 00:24:42,799
think about this with your own code and

00:24:41,269 --> 00:24:45,259
your own software and your own projects

00:24:42,799 --> 00:24:47,570
like if I just sat down in front of this

00:24:45,259 --> 00:24:49,159
or I got a friend the colleague to sit

00:24:47,570 --> 00:24:51,889
down in front of this how long would it

00:24:49,159 --> 00:24:54,830
take them to find a bug okay and if it's

00:24:51,889 --> 00:24:57,590
within two minutes there's probably some

00:24:54,830 --> 00:24:59,750
issues with your code and also the the

00:24:57,590 --> 00:25:02,960
functions well is important right if

00:24:59,750 --> 00:25:05,059
software doesn't function well and your

00:25:02,960 --> 00:25:07,070
users are going to have problems okay

00:25:05,059 --> 00:25:08,330
and maybe you're in a b2b situation

00:25:07,070 --> 00:25:11,840
where you're providing software to

00:25:08,330 --> 00:25:14,059
businesses poorly functioning software

00:25:11,840 --> 00:25:16,700
is going to drive inefficiencies in

00:25:14,059 --> 00:25:18,980
those businesses okay and that's going

00:25:16,700 --> 00:25:20,750
to cost real money yeah not like

00:25:18,980 --> 00:25:23,360
developer money I know we get paid well

00:25:20,750 --> 00:25:25,009
but like there's very few of us but we

00:25:23,360 --> 00:25:28,700
can cause a lot of damage with badly

00:25:25,009 --> 00:25:31,250
functioning code now this is difficult

00:25:28,700 --> 00:25:33,559
to achieve it's difficult to write good

00:25:31,250 --> 00:25:35,750
software and the reason it's difficult

00:25:33,559 --> 00:25:40,120
is because we have a thing called the

00:25:35,750 --> 00:25:43,490
ignorance complexity problem okay so

00:25:40,120 --> 00:25:47,889
this is basically the reality that we as

00:25:43,490 --> 00:25:51,679
developers and just human beings live in

00:25:47,889 --> 00:25:54,379
so we are ignorant and we have to work

00:25:51,679 --> 00:25:56,809
with complex things so the chap on the

00:25:54,379 --> 00:25:58,610
Left we haven't gotten up to date

00:25:56,809 --> 00:26:01,250
picture of him or a proper picture of

00:25:58,610 --> 00:26:03,620
him chap on the left is Socrates okay

00:26:01,250 --> 00:26:06,549
and Socrates lived in Greece about two

00:26:03,620 --> 00:26:09,409
and a half thousand years ago and

00:26:06,549 --> 00:26:12,470
Socrates came up with what's called the

00:26:09,409 --> 00:26:15,649
Socratic method and you can see Socrates

00:26:12,470 --> 00:26:17,480
as the sort of first what I would call

00:26:15,649 --> 00:26:21,379
or what you would describe is the first

00:26:17,480 --> 00:26:24,200
test driven philosopher okay he came up

00:26:21,379 --> 00:26:27,110
with dialectic questioning which is so

00:26:24,200 --> 00:26:28,580
baked into Western philosophy now that

00:26:27,110 --> 00:26:32,059
we don't even think about it but it's a

00:26:28,580 --> 00:26:34,039
very simple concept all Socrates would

00:26:32,059 --> 00:26:35,360
do to get to the truth because that was

00:26:34,039 --> 00:26:37,549
his aim that's what dialectics

00:26:35,360 --> 00:26:40,640
about search for the truth is ask

00:26:37,549 --> 00:26:42,440
questions like you know and we see this

00:26:40,640 --> 00:26:45,020
elsewhere with the five wise and things

00:26:42,440 --> 00:26:47,660
like that it's just asking questions of

00:26:45,020 --> 00:26:49,670
people until you get to the truth of an

00:26:47,660 --> 00:26:52,220
issue okay and that's what you're doing

00:26:49,670 --> 00:26:54,260
with test-driven development and test to

00:26:52,220 --> 00:26:55,850
break they're asking questions so

00:26:54,260 --> 00:27:00,920
there's a famous story about Socrates

00:26:55,850 --> 00:27:03,410
and basically his friend Kyra phone went

00:27:00,920 --> 00:27:05,150
to the Oracle at Delphi

00:27:03,410 --> 00:27:06,950
they had Oracles back then we don't have

00:27:05,150 --> 00:27:08,870
Oracle and may only in the Matrix film

00:27:06,950 --> 00:27:09,470
but we don't have them as a standard

00:27:08,870 --> 00:27:13,280
thing anymore

00:27:09,470 --> 00:27:16,640
and Kyra form went to this Oracle and

00:27:13,280 --> 00:27:19,250
asked who who is the wisest man in the

00:27:16,640 --> 00:27:23,030
world and the Oracle responded its

00:27:19,250 --> 00:27:25,549
Socrates and Kyra Fong was perplexed by

00:27:23,030 --> 00:27:27,020
this and was i okay Socrates fine so he

00:27:25,549 --> 00:27:29,929
went back to Athens and spoke to

00:27:27,020 --> 00:27:32,929
Socrates and said the Oracle Delfy

00:27:29,929 --> 00:27:35,980
thinks you're the wisest man in all the

00:27:32,929 --> 00:27:39,260
world basically in ancient Greece and

00:27:35,980 --> 00:27:42,500
Socrates was again really he wasn't sure

00:27:39,260 --> 00:27:44,900
about this he was like maybe am I so

00:27:42,500 --> 00:27:48,380
Socrates went and spoke to a lot of very

00:27:44,900 --> 00:27:51,110
very clever capable wealthy people in

00:27:48,380 --> 00:27:53,990
Greece and asked him questions to work

00:27:51,110 --> 00:27:55,880
out whether he was the wisest and he

00:27:53,990 --> 00:27:59,720
came back and they had a conversation

00:27:55,880 --> 00:28:02,750
with Kyra form and Carolyn said so do

00:27:59,720 --> 00:28:06,040
you think you're the wisest man in the

00:28:02,750 --> 00:28:08,750
world and Socrates said yes I think I am

00:28:06,040 --> 00:28:11,059
now that's arrogance I mean you think

00:28:08,750 --> 00:28:12,890
God this guy yeah okay but his response

00:28:11,059 --> 00:28:16,100
is the is the important bit of what he

00:28:12,890 --> 00:28:18,620
came after that he said I'm probably the

00:28:16,100 --> 00:28:21,919
wisest because I understand how ignorant

00:28:18,620 --> 00:28:23,630
I am everyone else I spoke to claimed

00:28:21,919 --> 00:28:25,820
how great and wonderful and clever they

00:28:23,630 --> 00:28:27,799
were whereas I always asked questions

00:28:25,820 --> 00:28:31,669
because I don't know what the answer is

00:28:27,799 --> 00:28:34,340
and what Socrates was getting at was a

00:28:31,669 --> 00:28:38,299
thing that's innate to human beings and

00:28:34,340 --> 00:28:41,510
again software developers is that we are

00:28:38,299 --> 00:28:44,059
all ignorant okay and sadly in this day

00:28:41,510 --> 00:28:47,270
of or age of Twitter and social media

00:28:44,059 --> 00:28:49,040
people love to throw ignorant you know

00:28:47,270 --> 00:28:49,490
you are ignorant out as an insult of

00:28:49,040 --> 00:28:52,640
people

00:28:49,490 --> 00:28:55,909
but it's it's not really because we all

00:28:52,640 --> 00:28:58,010
are ignorant you know I went to the talk

00:28:55,909 --> 00:29:02,330
yesterday on my sequel and I've been

00:28:58,010 --> 00:29:03,710
doing sequel for at least a decade but

00:29:02,330 --> 00:29:05,929
during that talk I was just like I

00:29:03,710 --> 00:29:07,279
didn't I know nothing about sequel

00:29:05,929 --> 00:29:08,690
there's loads of stuff I don't know

00:29:07,279 --> 00:29:10,520
about secret I may as well give up now

00:29:08,690 --> 00:29:12,110
you know stop doing secret I don't know

00:29:10,520 --> 00:29:13,850
I'll just pay someone to do sequel in

00:29:12,110 --> 00:29:15,649
the future but the point is we're all

00:29:13,850 --> 00:29:18,289
ignorant and we can't all know

00:29:15,649 --> 00:29:21,370
everything okay and that's one side of

00:29:18,289 --> 00:29:25,279
the problem the the other side is

00:29:21,370 --> 00:29:29,870
complexity okay and and the chap on the

00:29:25,279 --> 00:29:31,460
right is Friedrich Hayek okay and he's

00:29:29,870 --> 00:29:33,260
an economist he's very famous in the

00:29:31,460 --> 00:29:35,179
twentieth century along with Keynes and

00:29:33,260 --> 00:29:38,659
freedmen he's one of the most famous

00:29:35,179 --> 00:29:41,029
sort of capitalist economists of that

00:29:38,659 --> 00:29:44,899
century won the Nobel Prize in Economics

00:29:41,029 --> 00:29:48,919
or something as well and you know often

00:29:44,899 --> 00:29:51,740
Hayek is placed against Keynes as if

00:29:48,919 --> 00:29:53,029
they were somehow in a form of

00:29:51,740 --> 00:29:57,020
competition but they're actually very

00:29:53,029 --> 00:29:59,240
similar economists they were both trying

00:29:57,020 --> 00:30:01,159
to achieve the same end in the same

00:29:59,240 --> 00:30:03,500
period they were both trying to defend

00:30:01,159 --> 00:30:05,830
capitalism in a period when you saw the

00:30:03,500 --> 00:30:08,899
rise of fascism and communism and

00:30:05,830 --> 00:30:11,299
alternate economic models they were both

00:30:08,899 --> 00:30:15,429
arguing in different ways about how

00:30:11,299 --> 00:30:18,740
capitalism can work or be better and

00:30:15,429 --> 00:30:20,539
Hayek's great insight relates to what's

00:30:18,740 --> 00:30:23,659
known as the ikan of economic

00:30:20,539 --> 00:30:27,350
calculation problem and basically he

00:30:23,659 --> 00:30:30,770
argued that central planning would

00:30:27,350 --> 00:30:34,130
always fail because economies generate

00:30:30,770 --> 00:30:36,799
too much information to process easily

00:30:34,130 --> 00:30:39,200
like central planners will never ever be

00:30:36,799 --> 00:30:41,360
able to process the amount of

00:30:39,200 --> 00:30:43,549
information an economy can supply at any

00:30:41,360 --> 00:30:47,750
one time so they will never be able to

00:30:43,549 --> 00:30:49,580
make well-informed decisions so we need

00:30:47,750 --> 00:30:52,309
a more nolo system where people work

00:30:49,580 --> 00:30:55,399
closer to the information which is what

00:30:52,309 --> 00:30:58,370
he described as the free market now what

00:30:55,399 --> 00:30:59,899
he was really getting at was basically

00:30:58,370 --> 00:31:02,149
because when you talk about an economy

00:30:59,899 --> 00:31:03,049
you're talking about people individuals

00:31:02,149 --> 00:31:05,119
he

00:31:03,049 --> 00:31:08,090
was basically making the simple point

00:31:05,119 --> 00:31:11,600
that everything in life is more

00:31:08,090 --> 00:31:14,869
complicated than we imagined and it's

00:31:11,600 --> 00:31:18,289
the same in software development we are

00:31:14,869 --> 00:31:21,529
dealing with every single day very

00:31:18,289 --> 00:31:23,090
complicated problems so I mean we're at

00:31:21,529 --> 00:31:25,159
a point where a difficult point of

00:31:23,090 --> 00:31:27,320
software developers where we're both

00:31:25,159 --> 00:31:29,200
ignorant and the things we're trying to

00:31:27,320 --> 00:31:32,570
solve are really complicated

00:31:29,200 --> 00:31:34,039
maybe we should all stop okay maybe we

00:31:32,570 --> 00:31:35,539
should give up what's the point you know

00:31:34,039 --> 00:31:37,609
we're never gonna get we're never going

00:31:35,539 --> 00:31:39,019
to write good software but that's not

00:31:37,609 --> 00:31:41,029
true there are ways of getting around

00:31:39,019 --> 00:31:43,789
this and and you know this is what

00:31:41,029 --> 00:31:46,179
Socrates I think got at which is it

00:31:43,789 --> 00:31:48,619
basically you know ignorant sees natural

00:31:46,179 --> 00:31:50,210
complexity is a standard we just have to

00:31:48,619 --> 00:31:52,159
accept that that's just the way is

00:31:50,210 --> 00:31:55,009
that's the world in the universe we live

00:31:52,159 --> 00:31:57,919
in but things like test to break help

00:31:55,009 --> 00:31:59,749
okay because what we're doing with tests

00:31:57,919 --> 00:32:03,559
to break is we're asking difficult

00:31:59,749 --> 00:32:05,929
questions of our code to uncover the

00:32:03,559 --> 00:32:11,090
unknown unknowns to borrow a phrase and

00:32:05,929 --> 00:32:13,159
on a Rumsfeld great guy so we we ask

00:32:11,090 --> 00:32:15,980
difficult questions because we're not

00:32:13,159 --> 00:32:18,710
sure what answer might come out but

00:32:15,980 --> 00:32:21,859
we've got to be looking for those odd

00:32:18,710 --> 00:32:24,889
answers and if we do we can capture the

00:32:21,859 --> 00:32:26,749
bugs before they hit production which is

00:32:24,889 --> 00:32:28,999
the point where everyone scratches their

00:32:26,749 --> 00:32:30,889
heads and the developers get shouted at

00:32:28,999 --> 00:32:32,989
if you follow test to break you can

00:32:30,889 --> 00:32:34,869
solve some of these complexity problems

00:32:32,989 --> 00:32:37,730
okay so we're going to look at another

00:32:34,869 --> 00:32:40,369
example now code example to sort of

00:32:37,730 --> 00:32:43,100
highlight at this point so we're going

00:32:40,369 --> 00:32:46,119
to imagine we're in some sort of weird

00:32:43,100 --> 00:32:49,009
sort of steampunks type world where

00:32:46,119 --> 00:32:50,659
Henry Ford's still all-powerful and he's

00:32:49,009 --> 00:32:52,609
still making the Model T we're all

00:32:50,659 --> 00:32:53,659
driving around the Model T's okay but

00:32:52,609 --> 00:32:56,899
he's got a website

00:32:53,659 --> 00:32:59,539
so we're basically gonna build this

00:32:56,899 --> 00:33:02,359
website for Henry Ford and his Model T

00:32:59,539 --> 00:33:03,859
okay and it's gonna be very simple it's

00:33:02,359 --> 00:33:06,619
just going to be one website and one

00:33:03,859 --> 00:33:08,179
factory and some information is going to

00:33:06,619 --> 00:33:09,679
go in and a car's going to come out the

00:33:08,179 --> 00:33:12,409
other end and there's going to be some

00:33:09,679 --> 00:33:15,259
rules around this production line so

00:33:12,409 --> 00:33:16,700
cars can only be black this is the great

00:33:15,259 --> 00:33:19,400
myth of the Model T it's not

00:33:16,700 --> 00:33:21,830
chillie true but Henry Ford once

00:33:19,400 --> 00:33:23,210
commented on it and it's stuck everyone

00:33:21,830 --> 00:33:25,730
thinks you could only have a Model T in

00:33:23,210 --> 00:33:27,950
black the cars can have two or four

00:33:25,730 --> 00:33:29,930
doors and the cars must have four wheels

00:33:27,950 --> 00:33:32,930
unlike a Reliant Robin we're not gonna

00:33:29,930 --> 00:33:34,850
you know you still see people trying to

00:33:32,930 --> 00:33:41,690
design three-wheeled cars it's madness

00:33:34,850 --> 00:33:44,990
but anyway four wheels so we've got a

00:33:41,690 --> 00:33:47,360
very simple set of code we've got a car

00:33:44,990 --> 00:33:50,690
object and this car object is going to

00:33:47,360 --> 00:33:52,100
accept their three parameters doors are

00:33:50,690 --> 00:33:53,960
wheels add color and it's got some

00:33:52,100 --> 00:33:55,550
getters on it just to get the data back

00:33:53,960 --> 00:33:58,340
out so we're going to instantiate a car

00:33:55,550 --> 00:34:01,820
and then we can get some data we've then

00:33:58,340 --> 00:34:04,370
got a order object and this is going to

00:34:01,820 --> 00:34:06,920
accept an instance of the car and based

00:34:04,370 --> 00:34:09,650
on that instance it's going to run a

00:34:06,920 --> 00:34:14,360
order create method and just print out a

00:34:09,650 --> 00:34:17,590
simple message okay order created for a

00:34:14,360 --> 00:34:22,100
car of color with doors and wheels etc

00:34:17,590 --> 00:34:23,750
yeah and then we've got some tests so

00:34:22,100 --> 00:34:25,820
who created some initial tests just to

00:34:23,750 --> 00:34:28,010
test that car object get it up and going

00:34:25,820 --> 00:34:29,690
you know passing the right variables

00:34:28,010 --> 00:34:32,770
make sure the getters work covered off

00:34:29,690 --> 00:34:36,770
the basics it's all working okay and

00:34:32,770 --> 00:34:38,930
then we're gonna do some tests for our

00:34:36,770 --> 00:34:41,300
order so we passed the car in how we

00:34:38,930 --> 00:34:43,940
make sure we get the right message back

00:34:41,300 --> 00:34:46,220
yeah order created for a black car with

00:34:43,940 --> 00:34:48,230
four doors and four wheels and then

00:34:46,220 --> 00:34:53,660
there's one below for the two-door

00:34:48,230 --> 00:34:57,260
example okay so again we've got to the

00:34:53,660 --> 00:34:59,330
point where we've written some tests and

00:34:57,260 --> 00:35:02,060
we've worked with code that is now

00:34:59,330 --> 00:35:04,340
working and in our scenario this should

00:35:02,060 --> 00:35:06,410
be fine this is absolutely fine you know

00:35:04,340 --> 00:35:07,310
we've got one website with developers

00:35:06,410 --> 00:35:09,710
who know what they're doing because

00:35:07,310 --> 00:35:12,020
they're just their thing and we've got

00:35:09,710 --> 00:35:14,810
one factory and everything in our

00:35:12,020 --> 00:35:16,520
universe is fine this will work yeah we

00:35:14,810 --> 00:35:19,760
have complete control over the universe

00:35:16,520 --> 00:35:21,980
nothing's going to go wrong but the

00:35:19,760 --> 00:35:26,650
Model T was the second most successful

00:35:21,980 --> 00:35:26,650
car in history and

00:35:27,530 --> 00:35:33,170
so Henry Ford realizes how successful

00:35:30,980 --> 00:35:34,490
his car is and he starts going okay well

00:35:33,170 --> 00:35:36,740
we're going to start producing this car

00:35:34,490 --> 00:35:39,170
in other parts of the world so we're

00:35:36,740 --> 00:35:41,030
gonna build more factories and we're

00:35:39,170 --> 00:35:43,160
gonna start letting other people sell a

00:35:41,030 --> 00:35:46,130
car and they're going to integrate with

00:35:43,160 --> 00:35:47,540
our system and send us orders and then

00:35:46,130 --> 00:35:49,190
we'll make the car and then we'll ship

00:35:47,540 --> 00:35:51,350
it out to them yeah and then they'll

00:35:49,190 --> 00:35:54,110
pass them on to the consumer so we're

00:35:51,350 --> 00:35:56,930
gonna you know expand our manufacturing

00:35:54,110 --> 00:35:58,880
base enormous Lee and then suddenly you

00:35:56,930 --> 00:36:00,050
have a whole load more complexity

00:35:58,880 --> 00:36:02,390
involved in your system because you have

00:36:00,050 --> 00:36:04,040
more people using it and we all know

00:36:02,390 --> 00:36:07,300
what happens when we allow more

00:36:04,040 --> 00:36:10,130
developers to start playing with code

00:36:07,300 --> 00:36:11,780
you know people are going to

00:36:10,130 --> 00:36:14,450
accidentally or developers are going to

00:36:11,780 --> 00:36:17,720
accidentally send an order for a blue

00:36:14,450 --> 00:36:20,810
car with seven doors and nine wheels

00:36:17,720 --> 00:36:25,580
that will happen now the problem comes

00:36:20,810 --> 00:36:27,650
is if with our code is at this point our

00:36:25,580 --> 00:36:30,140
code will go okay yeah I'll take an

00:36:27,650 --> 00:36:33,350
order for a blue car with seven doors

00:36:30,140 --> 00:36:35,510
and nine wheels and then that order will

00:36:33,350 --> 00:36:37,250
hit the manufacturing floor and the

00:36:35,510 --> 00:36:39,650
people building the car will scratch

00:36:37,250 --> 00:36:42,710
their heads and go you know they'll look

00:36:39,650 --> 00:36:45,650
at the enormous pain track of paint all

00:36:42,710 --> 00:36:47,120
those cans marked black and they'll walk

00:36:45,650 --> 00:36:50,740
up and down it for about half an hour

00:36:47,120 --> 00:36:53,750
going has anyone seen the blue pane and

00:36:50,740 --> 00:36:56,240
you know it will lead to huge

00:36:53,750 --> 00:36:57,290
inefficiencies and slow down and then it

00:36:56,240 --> 00:36:58,580
will get to the end of the line where

00:36:57,290 --> 00:37:01,340
they start fitting the wheels and

00:36:58,580 --> 00:37:03,440
they've lined up seven and oh there's

00:37:01,340 --> 00:37:06,500
only four spaces for the wheels what do

00:37:03,440 --> 00:37:08,360
we do okay and you've let huge amounts

00:37:06,500 --> 00:37:10,880
of inefficiency into your system now

00:37:08,360 --> 00:37:13,640
this could be easily solved if we'd

00:37:10,880 --> 00:37:15,530
applied a bit of test to brake to this

00:37:13,640 --> 00:37:19,820
scenario in the first place at no real

00:37:15,530 --> 00:37:22,340
extra cost so how do we improve this

00:37:19,820 --> 00:37:24,350
code to make sure it's better well aim

00:37:22,340 --> 00:37:27,560
is to make sure this code can only be

00:37:24,350 --> 00:37:30,080
used in one way if it can only be used

00:37:27,560 --> 00:37:34,460
in one way it can't break so we're going

00:37:30,080 --> 00:37:36,740
to write some more tests and we're going

00:37:34,460 --> 00:37:40,520
to use in PHP unit a thing called

00:37:36,740 --> 00:37:41,390
annotations if you haven't seen

00:37:40,520 --> 00:37:44,150
annotations before

00:37:41,390 --> 00:37:47,660
they allow you to do things like check

00:37:44,150 --> 00:37:49,010
for exception messages or checks for the

00:37:47,660 --> 00:37:50,360
actual message in the exception and

00:37:49,010 --> 00:37:52,180
various other things but we're going to

00:37:50,360 --> 00:37:55,790
write tests based around purely

00:37:52,180 --> 00:37:58,490
expecting our methods given the scenario

00:37:55,790 --> 00:38:01,520
to throw an exception okay it's gonna

00:37:58,490 --> 00:38:05,770
say no you cannot do this so our first

00:38:01,520 --> 00:38:08,060
test says it expects an exception and

00:38:05,770 --> 00:38:10,130
that it's going to get a message of

00:38:08,060 --> 00:38:12,650
invalid car could not create order and

00:38:10,130 --> 00:38:14,390
we're going to write a test for test

00:38:12,650 --> 00:38:19,400
create three doors so we're going to try

00:38:14,390 --> 00:38:21,110
and create a three door car okay so we

00:38:19,400 --> 00:38:23,510
can see that in the code we pass in

00:38:21,110 --> 00:38:25,610
three doors rather than four or two and

00:38:23,510 --> 00:38:26,810
all we have to do is call or the create

00:38:25,610 --> 00:38:28,400
we don't have to do any assertions

00:38:26,810 --> 00:38:30,800
because the assertions are in the

00:38:28,400 --> 00:38:34,960
exception annotation and when we run

00:38:30,800 --> 00:38:38,570
this it will fail because there is no

00:38:34,960 --> 00:38:40,280
exception thrown yeah so currently we

00:38:38,570 --> 00:38:42,290
know that this code will is just going

00:38:40,280 --> 00:38:44,620
to work it's going to be fine it's going

00:38:42,290 --> 00:38:46,460
to place an order for a three door car

00:38:44,620 --> 00:38:47,750
so we're going to write a couple more

00:38:46,460 --> 00:38:51,380
tests as well to solve the other

00:38:47,750 --> 00:38:53,060
problems around wheels and color yeah so

00:38:51,380 --> 00:38:59,570
we're going to create two more exception

00:38:53,060 --> 00:39:03,800
situations one for five wheels because

00:38:59,570 --> 00:39:06,170
we only want four and one for the color

00:39:03,800 --> 00:39:09,770
blue okay and we're going to make a

00:39:06,170 --> 00:39:11,930
little amendment to echo just yep two

00:39:09,770 --> 00:39:13,610
doors two doors and we're going to pass

00:39:11,930 --> 00:39:15,110
in code blue and then when we run this

00:39:13,610 --> 00:39:16,580
we're gonna get three failures because

00:39:15,110 --> 00:39:21,560
none of them throw exceptions they all

00:39:16,580 --> 00:39:26,210
accept the input okay so now we're going

00:39:21,560 --> 00:39:29,210
to improve our code and all we're going

00:39:26,210 --> 00:39:31,040
to do is we're going to wrap our simple

00:39:29,210 --> 00:39:33,110
order statement which just runs every

00:39:31,040 --> 00:39:35,450
time in a little if statement

00:39:33,110 --> 00:39:37,430
now obviously you might abstract this

00:39:35,450 --> 00:39:40,390
code this is very hacky code just to

00:39:37,430 --> 00:39:43,610
show you what you do okay

00:39:40,390 --> 00:39:44,930
don't just like concatenate and Ord all

00:39:43,610 --> 00:39:46,910
the time in if statements it just makes

00:39:44,930 --> 00:39:49,730
them look messy and complicated but

00:39:46,910 --> 00:39:53,430
we're going to throw our exception if we

00:39:49,730 --> 00:39:55,559
can't return so throw new exception

00:39:53,430 --> 00:40:03,869
and we got passed in our message which

00:39:55,559 --> 00:40:13,910
comes from our test parser in and then

00:40:03,869 --> 00:40:16,710
we're going to create the if logic and

00:40:13,910 --> 00:40:24,359
in a moment you'll see that I realized

00:40:16,710 --> 00:40:26,579
that I'm not checking the color so this

00:40:24,359 --> 00:40:30,119
is another little tip with an array in

00:40:26,579 --> 00:40:30,869
PHP in array takes a third parameter of

00:40:30,119 --> 00:40:34,500
true or false

00:40:30,869 --> 00:40:36,780
in PHP lovely way of like not checking

00:40:34,500 --> 00:40:41,099
types if you pass in true is the third

00:40:36,780 --> 00:40:44,400
parameter it will check not only the

00:40:41,099 --> 00:40:47,099
value but the that it's an integer so if

00:40:44,400 --> 00:40:51,030
my if my array had strings of three and

00:40:47,099 --> 00:40:55,710
four it would fail yeah so little tip on

00:40:51,030 --> 00:40:57,270
in array pass in the true parameter I've

00:40:55,710 --> 00:41:00,329
just fixed the code so it's get doors

00:40:57,270 --> 00:41:02,099
and now we're creating get wheels and

00:41:00,329 --> 00:41:08,940
get color and then we'll put the checks

00:41:02,099 --> 00:41:13,319
in place using our three equal signs to

00:41:08,940 --> 00:41:16,079
make sure we get it just right okay and

00:41:13,319 --> 00:41:21,150
then we save that and then we're gonna

00:41:16,079 --> 00:41:26,220
run the test again and when we run the

00:41:21,150 --> 00:41:29,190
tests again it all goes green now at

00:41:26,220 --> 00:41:32,849
this stage we've just made our code much

00:41:29,190 --> 00:41:36,089
more robust it will only work in one way

00:41:32,849 --> 00:41:39,210
if it tries to do anything else it will

00:41:36,089 --> 00:41:42,569
fail now this might seem a waste of time

00:41:39,210 --> 00:41:45,599
but if you think about it it's much

00:41:42,569 --> 00:41:47,309
cheaper to go in later and fix the logic

00:41:45,599 --> 00:41:49,280
on this code and go okay now we'll

00:41:47,309 --> 00:41:52,680
accept blue colored cars and

00:41:49,280 --> 00:41:55,559
three-wheeled cars then it is to allow

00:41:52,680 --> 00:41:57,270
this code to fail and pass something on

00:41:55,559 --> 00:41:59,190
somewhere else which is actually

00:41:57,270 --> 00:42:02,670
important and has costly side-effects

00:41:59,190 --> 00:42:04,319
okay if you allow inefficiencies to

00:42:02,670 --> 00:42:06,890
occur in your business because of sloppy

00:42:04,319 --> 00:42:08,779
written code that's gonna cost you

00:42:06,890 --> 00:42:11,089
a lot of money and it's gonna be a lot

00:42:08,779 --> 00:42:15,019
more money than it takes a developer the

00:42:11,089 --> 00:42:16,760
20 minutes or half a day to go in and

00:42:15,019 --> 00:42:20,180
change the logic of this code and for

00:42:16,760 --> 00:42:24,740
you to do a deployment okay so test a

00:42:20,180 --> 00:42:27,559
break again helps us make software more

00:42:24,740 --> 00:42:30,500
robust she written some tests you think

00:42:27,559 --> 00:42:33,680
okay what could I do to break this

00:42:30,500 --> 00:42:35,269
system or challenge this system and you

00:42:33,680 --> 00:42:37,609
write some tests and you all make your

00:42:35,269 --> 00:42:40,119
code more robust so that when it hits

00:42:37,609 --> 00:42:45,130
production you have less headaches

00:42:40,119 --> 00:42:48,109
so to summarize basically as we stated

00:42:45,130 --> 00:42:50,510
working software is not necessarily good

00:42:48,109 --> 00:42:53,809
enough we can do better but writing

00:42:50,510 --> 00:42:55,369
software is hard we are ignorant sadly

00:42:53,809 --> 00:42:58,480
and we're dealing with complicated

00:42:55,369 --> 00:43:01,369
problems so always write some tests

00:42:58,480 --> 00:43:03,829
stress your business logic see if you

00:43:01,369 --> 00:43:05,779
can break it and if you do that you will

00:43:03,829 --> 00:43:10,269
write code that will only work in one

00:43:05,779 --> 00:43:13,009
way but it will always work essentially

00:43:10,269 --> 00:43:15,799
you will have crashed your car into the

00:43:13,009 --> 00:43:19,190
tree your everything will be good and

00:43:15,799 --> 00:43:20,280
you will be happy smiley face that's me

00:43:19,190 --> 00:43:29,700
thank you

00:43:20,280 --> 00:43:34,630
[Applause]

00:43:29,700 --> 00:43:41,140
I just would like to open up the floor

00:43:34,630 --> 00:43:42,760
to questions now have you thought of

00:43:41,140 --> 00:43:44,260
using that scene from sideways where he

00:43:42,760 --> 00:43:47,800
tries to run the car into the tree and

00:43:44,260 --> 00:43:50,230
he misses I mean that might bring us

00:43:47,800 --> 00:43:53,500
onto the topic of like mutation testing

00:43:50,230 --> 00:43:55,810
right so to test the test our tests work

00:43:53,500 --> 00:43:58,360
so if we write a test where we miss the

00:43:55,810 --> 00:44:00,940
tree then yeah absolutely so there's a

00:43:58,360 --> 00:44:02,320
tool called PHP infection I've not

00:44:00,940 --> 00:44:05,170
actually seen that film by the way but

00:44:02,320 --> 00:44:08,200
there is a tool called PHP infection

00:44:05,170 --> 00:44:10,480
that does mutation testing in PHP now

00:44:08,200 --> 00:44:12,520
quite a complicated topic there's you

00:44:10,480 --> 00:44:19,720
could do a talk on that but that might

00:44:12,520 --> 00:44:21,190
be useful as well that helps and the pet

00:44:19,720 --> 00:44:31,140
test fails that's when he misses the

00:44:21,190 --> 00:44:31,140
tree yeah any other questions

00:44:36,260 --> 00:44:41,520
you said like don't worry about the

00:44:39,720 --> 00:44:43,590
input and output about the datasets

00:44:41,520 --> 00:44:47,010
right does that gain the confidence for

00:44:43,590 --> 00:44:48,480
the developer so again while testing

00:44:47,010 --> 00:44:50,790
don't worry about the input and output

00:44:48,480 --> 00:44:53,369
of the datasets try because like we

00:44:50,790 --> 00:44:56,160
might be interacting with the database

00:44:53,369 --> 00:44:59,580
and all right so does that gain the

00:44:56,160 --> 00:45:01,740
confident for the developer so the point

00:44:59,580 --> 00:45:04,920
there was that was very specific to unit

00:45:01,740 --> 00:45:07,109
testing okay so if you're doing unit

00:45:04,920 --> 00:45:09,230
testing you're testing your business

00:45:07,109 --> 00:45:11,490
logic you're not worrying about

00:45:09,230 --> 00:45:14,310
databases all right when I first started

00:45:11,490 --> 00:45:17,010
testing I made the mistake of testing

00:45:14,310 --> 00:45:18,780
databases with unit tests and all that

00:45:17,010 --> 00:45:21,060
happened even though I was using sequel

00:45:18,780 --> 00:45:23,609
Lite all that happened over time is the

00:45:21,060 --> 00:45:25,890
test just became slower and slower and

00:45:23,609 --> 00:45:29,220
slower and that makes things way less

00:45:25,890 --> 00:45:31,440
efficient you can test databases and

00:45:29,220 --> 00:45:33,750
what have you and how the code interacts

00:45:31,440 --> 00:45:36,230
with databases using other types of

00:45:33,750 --> 00:45:39,450
tests so you're sort of end-to-end

00:45:36,230 --> 00:45:41,580
acceptance tests maybe doing cucumber or

00:45:39,450 --> 00:45:44,850
something like that with selenium and

00:45:41,580 --> 00:45:48,330
your browser testing and it's about like

00:45:44,850 --> 00:45:49,650
when you do that as well so you run your

00:45:48,330 --> 00:45:51,450
you should be running your unit test

00:45:49,650 --> 00:45:53,400
like all the time like checking unit

00:45:51,450 --> 00:45:55,350
tests all the time and but to do that

00:45:53,400 --> 00:45:57,990
they need to run in seconds like half a

00:45:55,350 --> 00:46:00,540
second couple of seconds okay not like

00:45:57,990 --> 00:46:02,220
minutes so that's really why I said keep

00:46:00,540 --> 00:46:05,369
away from one of the reasons I said keep

00:46:02,220 --> 00:46:07,250
away from input output is that your unit

00:46:05,369 --> 00:46:09,510
tests are just for your business logic

00:46:07,250 --> 00:46:12,270
just to the things the decision-making

00:46:09,510 --> 00:46:13,650
parts of your code that can be difficult

00:46:12,270 --> 00:46:16,830
like I've been recently testing

00:46:13,650 --> 00:46:18,960
WordPress with unit tests and WordPress

00:46:16,830 --> 00:46:21,030
is so linked into the whole M plus one

00:46:18,960 --> 00:46:23,160
philosophy that it's almost impossible

00:46:21,030 --> 00:46:24,420
but it can be done but that's all I was

00:46:23,160 --> 00:46:27,540
really talking about I wasn't saying

00:46:24,420 --> 00:46:29,130
don't test like your your integration

00:46:27,540 --> 00:46:31,050
with other systems I was just saying

00:46:29,130 --> 00:46:34,340
that for unit tests it's just

00:46:31,050 --> 00:46:34,340
specifically for business logic

00:46:37,650 --> 00:46:50,190
anybody else any other questions how

00:46:48,450 --> 00:46:51,839
would you explain to someone who's not

00:46:50,190 --> 00:46:54,599
technical but who's got a lot of

00:46:51,839 --> 00:46:57,359
influence in controlling a budget for a

00:46:54,599 --> 00:46:59,160
specific project that we should write

00:46:57,359 --> 00:47:01,559
unit tests and you know even test very

00:46:59,160 --> 00:47:03,539
important for a good software well I

00:47:01,559 --> 00:47:05,430
mean obviously I'm a big fan of getting

00:47:03,539 --> 00:47:06,990
a stick and beating people with it but

00:47:05,430 --> 00:47:07,710
that doesn't tend to go down well with

00:47:06,990 --> 00:47:11,160
management

00:47:07,710 --> 00:47:13,890
I'm joking by the way but the I think

00:47:11,160 --> 00:47:16,440
with all of this stuff and you know I've

00:47:13,890 --> 00:47:19,589
been a manager I was manager for two and

00:47:16,440 --> 00:47:21,839
a half years the the approach you have

00:47:19,589 --> 00:47:23,880
to take is you have to take something

00:47:21,839 --> 00:47:25,710
that's very technical and important and

00:47:23,880 --> 00:47:27,930
put it in the language that

00:47:25,710 --> 00:47:31,170
non-technical people will understand

00:47:27,930 --> 00:47:34,289
particularly commercial people and the

00:47:31,170 --> 00:47:36,960
the whole point is the theory of the

00:47:34,289 --> 00:47:40,049
full cost right so the full cost theory

00:47:36,960 --> 00:47:41,789
is very important okay to do some

00:47:40,049 --> 00:47:43,739
development and get that development

00:47:41,789 --> 00:47:46,529
working and bug-free will have an

00:47:43,739 --> 00:47:48,690
Associated forecast and what happens

00:47:46,529 --> 00:47:52,289
often is the choice of whether that cost

00:47:48,690 --> 00:47:54,599
is taken in pre-release or post release

00:47:52,289 --> 00:47:56,670
yeah and loads of companies you see this

00:47:54,599 --> 00:47:59,849
they do a bit of work and then they

00:47:56,670 --> 00:48:02,460
spend years afterwards fixing the

00:47:59,849 --> 00:48:04,170
rubbish code they built okay and they

00:48:02,460 --> 00:48:06,329
may never actually hit the point of

00:48:04,170 --> 00:48:08,759
achieving full cost so your main

00:48:06,329 --> 00:48:11,849
argument for testing is and this is

00:48:08,759 --> 00:48:14,489
where it's key is that costs if bugs get

00:48:11,849 --> 00:48:17,069
into production costs begin to spiral

00:48:14,489 --> 00:48:18,960
they and they will also be untracked

00:48:17,069 --> 00:48:21,119
okay they will lead to inefficiencies in

00:48:18,960 --> 00:48:23,130
other teams so you have to explain the

00:48:21,119 --> 00:48:24,450
importance the reason you test and the

00:48:23,130 --> 00:48:28,319
reason you take a little bit more time

00:48:24,450 --> 00:48:31,470
with your code is to get as much of the

00:48:28,319 --> 00:48:33,930
cost in and done before you release

00:48:31,470 --> 00:48:36,569
because if you don't cost afterwards

00:48:33,930 --> 00:48:37,680
will just skyrocket and you see it in

00:48:36,569 --> 00:48:39,690
companies all the time

00:48:37,680 --> 00:48:42,299
developers become really inefficient and

00:48:39,690 --> 00:48:47,009
all they're doing is fixing bugs they're

00:48:42,299 --> 00:48:48,450
not actually doing useful stuff so

00:48:47,009 --> 00:48:50,609
that's the way you explain it you take

00:48:48,450 --> 00:48:51,360
it into financial terms and you say this

00:48:50,609 --> 00:48:54,420
will cost you

00:48:51,360 --> 00:48:56,160
you more money if you don't do it then

00:48:54,420 --> 00:48:59,820
it will - just do it if that makes sense

00:48:56,160 --> 00:49:02,270
I think there was a question of the

00:48:59,820 --> 00:49:02,270
banks here

00:49:12,780 --> 00:49:19,060
I was wondering where you came on

00:49:16,060 --> 00:49:20,650
tailored exceptions so in your example

00:49:19,060 --> 00:49:24,100
you had one exception that covered

00:49:20,650 --> 00:49:25,780
different use cases of failure I think

00:49:24,100 --> 00:49:28,180
I've heard go back and forth alot is

00:49:25,780 --> 00:49:30,340
whether or not you should have exception

00:49:28,180 --> 00:49:33,370
bad color exception to many wheels

00:49:30,340 --> 00:49:34,960
exception not enough wheels this

00:49:33,370 --> 00:49:39,130
interested way you find the balance

00:49:34,960 --> 00:49:41,140
works for you yeah I think it all

00:49:39,130 --> 00:49:42,790
depends on what you're building and that

00:49:41,140 --> 00:49:46,120
gets more complicated whether you should

00:49:42,790 --> 00:49:50,020
have a neck specific exception objects

00:49:46,120 --> 00:49:51,490
for certain failure scenarios so I think

00:49:50,020 --> 00:49:53,770
it's useful particularly with the

00:49:51,490 --> 00:49:56,830
annotations is you can check message and

00:49:53,770 --> 00:50:00,520
you can check code that can be useful

00:49:56,830 --> 00:50:01,870
for differentiating exceptions obviously

00:50:00,520 --> 00:50:03,430
in my example it's just trying to get

00:50:01,870 --> 00:50:07,750
through the code as quickly as possible

00:50:03,430 --> 00:50:09,490
get it working but the the aim I think

00:50:07,750 --> 00:50:11,410
yeah I think tailored exceptions are

00:50:09,490 --> 00:50:13,780
useful as much information you can pass

00:50:11,410 --> 00:50:15,520
back up the chain to say this is what

00:50:13,780 --> 00:50:19,450
went wrong is always going to be useful

00:50:15,520 --> 00:50:22,630
whether you need to have a sort of a

00:50:19,450 --> 00:50:25,630
specific exception object type for that

00:50:22,630 --> 00:50:26,980
or whether you just go with a global one

00:50:25,630 --> 00:50:30,100
I think depends on the size of your

00:50:26,980 --> 00:50:32,800
application so I've written a small open

00:50:30,100 --> 00:50:34,300
source library and I use just I just

00:50:32,800 --> 00:50:36,610
changed the message in a global

00:50:34,300 --> 00:50:39,430
exception object and changed the code

00:50:36,610 --> 00:50:46,560
that's all I do but just depends cool

00:50:39,430 --> 00:50:46,560
thank you any other questions

00:50:54,000 --> 00:50:59,820
they started testing cars when they

00:50:56,700 --> 00:51:05,730
found out when some drivers crash into

00:50:59,820 --> 00:51:08,910
trees and end up dead so do you have any

00:51:05,730 --> 00:51:11,460
tips because we don't want to wait for

00:51:08,910 --> 00:51:16,910
that to happen before writing the tests

00:51:11,460 --> 00:51:19,920
so to prevent failing production

00:51:16,910 --> 00:51:22,050
applications alright so you mean like

00:51:19,920 --> 00:51:26,910
even before you write tests how do you

00:51:22,050 --> 00:51:30,210
know how do you decide what what you

00:51:26,910 --> 00:51:33,530
gonna be testing right okay how far do

00:51:30,210 --> 00:51:37,440
you go yeah so there are useful

00:51:33,530 --> 00:51:39,690
approaches to this I mean ideally one

00:51:37,440 --> 00:51:42,030
approach might be that you do some

00:51:39,690 --> 00:51:43,560
initial testing so TDD works up to a

00:51:42,030 --> 00:51:45,030
point right so the idea that you write

00:51:43,560 --> 00:51:47,760
your test and then write your code works

00:51:45,030 --> 00:51:49,440
up to a point but I see it as like yes

00:51:47,760 --> 00:51:51,360
you'd use that model to begin with

00:51:49,440 --> 00:51:53,700
mainly to achieve the test to work thing

00:51:51,360 --> 00:51:55,680
I talked about test a brake is usually

00:51:53,700 --> 00:51:58,110
something that comes afterwards so

00:51:55,680 --> 00:52:00,690
you've basically used tests to work to

00:51:58,110 --> 00:52:02,610
make some logic work and get a rough

00:52:00,690 --> 00:52:04,230
sort of sketch and then you come in with

00:52:02,610 --> 00:52:06,600
test to brake to make it much more

00:52:04,230 --> 00:52:08,330
robust so that could be done in a number

00:52:06,600 --> 00:52:10,800
of ways you can do that yourself you

00:52:08,330 --> 00:52:12,630
could work with a test or a key way to

00:52:10,800 --> 00:52:15,390
come up with some failures and like

00:52:12,630 --> 00:52:17,220
scenarios or you could just hand the

00:52:15,390 --> 00:52:20,760
code over to another developer to write

00:52:17,220 --> 00:52:23,280
some tests to see if like they can break

00:52:20,760 --> 00:52:25,110
it if that makes sense I think there's a

00:52:23,280 --> 00:52:27,750
number of approaches that you can use

00:52:25,110 --> 00:52:29,100
and you're not obviously you know you're

00:52:27,750 --> 00:52:31,950
not going to get to a hundred percent

00:52:29,100 --> 00:52:34,410
perfection but your aim should be to

00:52:31,950 --> 00:52:38,010
like Oh get your code to a point where

00:52:34,410 --> 00:52:40,980
it's just edge cases and other tools or

00:52:38,010 --> 00:52:43,830
something the community because we are

00:52:40,980 --> 00:52:47,910
with a couple of developers here who all

00:52:43,830 --> 00:52:52,290
have been in certain situations I might

00:52:47,910 --> 00:52:55,410
have not been in so okay I mean there so

00:52:52,290 --> 00:52:57,600
I would say it's part of a whole array

00:52:55,410 --> 00:53:00,060
of tools that you deploy to build robust

00:52:57,600 --> 00:53:02,750
software so testing is one approach so

00:53:00,060 --> 00:53:05,820
obviously your PHP unit you can use that

00:53:02,750 --> 00:53:06,650
there's B hat but arthur useful tools to

00:53:05,820 --> 00:53:09,630
catch

00:53:06,650 --> 00:53:13,440
well I was not talking about testing

00:53:09,630 --> 00:53:15,900
tools but more about how do you decide

00:53:13,440 --> 00:53:18,720
what you have to test you talked about

00:53:15,900 --> 00:53:22,830
testing an email address and we now all

00:53:18,720 --> 00:53:25,170
rely on the framework developers to test

00:53:22,830 --> 00:53:27,240
that ok see ok so a basic rule in that

00:53:25,170 --> 00:53:28,980
scenario is you don't test the framework

00:53:27,240 --> 00:53:30,450
you test your business logic you test

00:53:28,980 --> 00:53:33,090
your bit and then you might do

00:53:30,450 --> 00:53:35,970
integration testing to see how like the

00:53:33,090 --> 00:53:37,380
whole thing works as a whole doing

00:53:35,970 --> 00:53:40,770
automated testing with tools like

00:53:37,380 --> 00:53:43,830
selenium but for your actual for unit

00:53:40,770 --> 00:53:47,880
testing it's again it's just the

00:53:43,830 --> 00:53:49,560
business logic that you write so if you

00:53:47,880 --> 00:53:52,710
have to assume if you're using something

00:53:49,560 --> 00:53:55,140
like laravel that Taylor Rockwell has

00:53:52,710 --> 00:53:56,820
got it right yeah he probably has but

00:53:55,140 --> 00:54:00,540
you have to assume and all the guys at

00:53:56,820 --> 00:54:02,130
WordPress have got it right you know you

00:54:00,540 --> 00:54:03,720
can't go into WordPress and start

00:54:02,130 --> 00:54:06,210
testing that you just have to sort of

00:54:03,720 --> 00:54:07,920
work with it that's not to say you can't

00:54:06,210 --> 00:54:10,110
write some scenarios to sort of test the

00:54:07,920 --> 00:54:13,350
integration slightly but yeah it's

00:54:10,110 --> 00:54:22,650
focusing on what you're writing as best

00:54:13,350 --> 00:54:25,560
as you can so I think as question is in

00:54:22,650 --> 00:54:27,930
the car example you knew that maybe

00:54:25,560 --> 00:54:29,940
somebody once would come along and say a

00:54:27,930 --> 00:54:31,830
blue car or five wheels I think the

00:54:29,940 --> 00:54:34,940
question is how do you come up with the

00:54:31,830 --> 00:54:37,740
imagination to decide what might break

00:54:34,940 --> 00:54:40,260
okay so I think that I think that's you

00:54:37,740 --> 00:54:42,390
know that's gonna be a bit play it by

00:54:40,260 --> 00:54:45,360
ear you're gonna have to come up with

00:54:42,390 --> 00:54:48,000
that like so one way is what you do pre

00:54:45,360 --> 00:54:51,150
any writing of code so like this comes

00:54:48,000 --> 00:54:52,680
this can be in the planning stage so you

00:54:51,150 --> 00:54:54,180
know sitting down with a tester and

00:54:52,680 --> 00:54:55,980
sitting down with the tester and tester

00:54:54,180 --> 00:54:58,860
going okay so these are scenarios I

00:54:55,980 --> 00:55:00,900
would think about maybe doing you know

00:54:58,860 --> 00:55:02,700
an example mapping session where you go

00:55:00,900 --> 00:55:04,350
through the rules and requirements for

00:55:02,700 --> 00:55:07,680
the system and you come up with actual

00:55:04,350 --> 00:55:08,120
concrete examples there approaches you

00:55:07,680 --> 00:55:10,740
can take

00:55:08,120 --> 00:55:13,590
you're not going to get this perfectly

00:55:10,740 --> 00:55:15,360
right but I think and you know there's

00:55:13,590 --> 00:55:16,860
the hallway testing which is wise trying

00:55:15,360 --> 00:55:18,510
to touch on with the idea of letting

00:55:16,860 --> 00:55:20,490
another developer write tests for your

00:55:18,510 --> 00:55:22,290
code is the idea of if you

00:55:20,490 --> 00:55:24,930
someone who's not seen this thing before

00:55:22,290 --> 00:55:27,740
have a go at it they might see the

00:55:24,930 --> 00:55:27,740

YouTube URL: https://www.youtube.com/watch?v=JDwFyRXbVHQ


