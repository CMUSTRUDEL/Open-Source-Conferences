Title: Your App Lives on a Network: Networking for Web Developers - Wim Godden - PHP UK Conference 2019
Publication date: 2019-03-22
Playlist: PHP UK Conference 2019
Description: 
	Our job might be to build web applications, but we can't build apps that rely on networking if we don't know how these networks and the big network that connects them all (this thing called the Internet) actually work. I'll walk through the basics of networking, then dive a lot deeper (from TCP/UDP to IPv4/6, source/destination ports, sockets, DNS, switching, firewalling and even OSPF, VRRP and BGP). Prepare for an eye-opener when you realize how much a typical app relies on all of these (and many more) working flawlessly... and how you can prepare your app for failure in the chain.
Captions: 
	00:00:04,710 --> 00:00:10,830
let me quickly tell you who I am my name

00:00:07,680 --> 00:00:13,200
is wen garden I'm from Belgium I think

00:00:10,830 --> 00:00:15,870
most of you know that well probably

00:00:13,200 --> 00:00:19,050
because of beer and chocolate and other

00:00:15,870 --> 00:00:21,570
tasty yummy things and out looking

00:00:19,050 --> 00:00:24,510
buildings maybe I started the company

00:00:21,570 --> 00:00:26,760
about 18 years ago now called cube

00:00:24,510 --> 00:00:28,949
solutions we do mostly PHP development

00:00:26,760 --> 00:00:30,480
we also do quite a bit of infrastructure

00:00:28,949 --> 00:00:33,300
which explains why I'm doing a talk

00:00:30,480 --> 00:00:36,210
about networking of course and we just

00:00:33,300 --> 00:00:38,100
also started a training service called

00:00:36,210 --> 00:00:41,430
tech path and I've been doing open

00:00:38,100 --> 00:00:43,789
source for the last 20 or so years and I

00:00:41,430 --> 00:00:46,500
wrote things like PHP compatibility

00:00:43,789 --> 00:00:48,059
which is a tool you might want to check

00:00:46,500 --> 00:00:51,329
out if you need to migrate your code to

00:00:48,059 --> 00:00:53,969
PHP 7 dot X and I've been doing talks

00:00:51,329 --> 00:00:56,270
like these for quite a while ok let's

00:00:53,969 --> 00:01:00,350
see who you are who here is a developer

00:00:56,270 --> 00:01:04,019
yeah most people any system engineers

00:01:00,350 --> 00:01:08,490
anyone doing Network yeah anyone network

00:01:04,019 --> 00:01:11,390
engineer oh you know one ok that's good

00:01:08,490 --> 00:01:15,210
but who knows how the internet works

00:01:11,390 --> 00:01:18,979
completely few hands and then they went

00:01:15,210 --> 00:01:21,600
down again ok so yeah obviously we're

00:01:18,979 --> 00:01:24,000
we're web developers we might be you

00:01:21,600 --> 00:01:26,189
know DevOps maybe or scissors we're not

00:01:24,000 --> 00:01:29,100
network engineers in general except the

00:01:26,189 --> 00:01:32,159
few people here but we know enough to

00:01:29,100 --> 00:01:34,470
build stuff obviously we know enough to

00:01:32,159 --> 00:01:37,110
maintain existing configurations

00:01:34,470 --> 00:01:40,049
existing servers and so on but let's

00:01:37,110 --> 00:01:42,869
imagine the customer calls your boss and

00:01:40,049 --> 00:01:47,000
says order the support desk and says the

00:01:42,869 --> 00:01:49,619
website is slow please fix it well

00:01:47,000 --> 00:01:51,659
that's all good and well and they might

00:01:49,619 --> 00:01:53,520
call you and say the website is slow fix

00:01:51,659 --> 00:01:55,920
it please and you go on the website and

00:01:53,520 --> 00:01:57,390
you have no problem because maybe the

00:01:55,920 --> 00:01:59,670
problem is not your code maybe the

00:01:57,390 --> 00:02:01,740
problem is not database related maybe

00:01:59,670 --> 00:02:03,329
the problem is network related so what

00:02:01,740 --> 00:02:06,930
do you do how are you gonna fix it as a

00:02:03,329 --> 00:02:09,420
developer and so that involves knowing

00:02:06,930 --> 00:02:12,330
things like DNS yes

00:02:09,420 --> 00:02:13,470
TCP BGP whatever else you know a lot of

00:02:12,330 --> 00:02:16,080
different

00:02:13,470 --> 00:02:18,540
terminology that most developers have

00:02:16,080 --> 00:02:20,550
never encountered or yeah they know sort

00:02:18,540 --> 00:02:22,260
of what it means but don't know the

00:02:20,550 --> 00:02:25,590
basics of it so that's what this session

00:02:22,260 --> 00:02:27,810
is kind of about getting you getting

00:02:25,590 --> 00:02:29,580
those of you who don't know a lot about

00:02:27,810 --> 00:02:31,710
networking up to speed to a little bit

00:02:29,580 --> 00:02:33,060
more of the basic understanding of how a

00:02:31,710 --> 00:02:35,010
network works and how the bigger

00:02:33,060 --> 00:02:39,750
Internet the bigger network called the

00:02:35,010 --> 00:02:42,320
internet works okay so networking

00:02:39,750 --> 00:02:44,820
there's a model that describes different

00:02:42,320 --> 00:02:47,040
layers that we have on the network and

00:02:44,820 --> 00:02:48,660
basically it starts with layer 1 which

00:02:47,040 --> 00:02:50,730
is a physical network which is basically

00:02:48,660 --> 00:02:53,220
your wires your network cards your

00:02:50,730 --> 00:02:56,190
wireless interface and so on and we have

00:02:53,220 --> 00:02:59,130
layer 2 on top of that which is the data

00:02:56,190 --> 00:03:01,440
link layer which is the data protocol

00:02:59,130 --> 00:03:03,330
usually it's Ethernet we use Ethernet

00:03:01,440 --> 00:03:05,040
the most there's a few others but we're

00:03:03,330 --> 00:03:07,080
not going to discuss that then there's

00:03:05,040 --> 00:03:09,030
layer 3 the network layer which we all

00:03:07,080 --> 00:03:12,300
know I think which is about IP

00:03:09,030 --> 00:03:14,190
addressing and yeah that's basically

00:03:12,300 --> 00:03:15,930
what we do all the time and then there's

00:03:14,190 --> 00:03:18,450
the transport layer on top of it which

00:03:15,930 --> 00:03:21,150
is TCP which we all use every day

00:03:18,450 --> 00:03:24,840
UDP things with ports everything lives

00:03:21,150 --> 00:03:26,910
in that layer then it gets a bit blurry

00:03:24,840 --> 00:03:30,300
because the session layer is well

00:03:26,910 --> 00:03:32,910
there's TLS and there there's l2tp Sox

00:03:30,300 --> 00:03:35,640
and a few other things but some people

00:03:32,910 --> 00:03:37,769
say that that lives in layer 6 and other

00:03:35,640 --> 00:03:40,500
people say now that belongs to layer 5

00:03:37,769 --> 00:03:42,630
and it gets even more blurry when we go

00:03:40,500 --> 00:03:45,390
to layer 6 which is about serialization

00:03:42,630 --> 00:03:47,130
and data translation and then finally we

00:03:45,390 --> 00:03:51,450
end up with layer 7 which is where we

00:03:47,130 --> 00:03:53,700
build our stuff which is it's about HTTP

00:03:51,450 --> 00:03:55,920
DNS and stuff like that so we build on

00:03:53,700 --> 00:03:58,560
top of that I can go on these are the

00:03:55,920 --> 00:04:00,630
seven official original layers

00:03:58,560 --> 00:04:03,140
some people describe layers up to layer

00:04:00,630 --> 00:04:08,030
12 and it gets even blurry or so yeah

00:04:03,140 --> 00:04:11,010
but networking basically revolves around

00:04:08,030 --> 00:04:14,160
bits of data that are being sent over a

00:04:11,010 --> 00:04:16,620
physical cable or Wireless and are being

00:04:14,160 --> 00:04:18,630
translated on the other end into bits of

00:04:16,620 --> 00:04:21,900
data and these bits of data are usually

00:04:18,630 --> 00:04:25,140
grouped together in packets and a

00:04:21,900 --> 00:04:26,900
packets always consists of a header and

00:04:25,140 --> 00:04:29,730
actual content

00:04:26,900 --> 00:04:32,430
now packet can packets can contain and

00:04:29,730 --> 00:04:34,740
usually do contain other packets so you

00:04:32,430 --> 00:04:36,480
have a packet which has contents and

00:04:34,740 --> 00:04:38,760
then that contents has another packet

00:04:36,480 --> 00:04:40,350
which has header and as contents and so

00:04:38,760 --> 00:04:42,750
on so it basically looks a bit like this

00:04:40,350 --> 00:04:44,700
this is in Ethernet packets which has a

00:04:42,750 --> 00:04:46,650
destination MAC address which I'll get

00:04:44,700 --> 00:04:49,920
to in a minute and a source address and

00:04:46,650 --> 00:04:52,920
a type which in our case is usually IP

00:04:49,920 --> 00:04:55,200
the type and then it has a payload and

00:04:52,920 --> 00:04:57,930
that payload is basically another packet

00:04:55,200 --> 00:05:00,030
in this case an IP packets which has a

00:04:57,930 --> 00:05:01,680
lot of headers as you can see and then

00:05:00,030 --> 00:05:03,900
at the bottom of it it says contents of

00:05:01,680 --> 00:05:06,600
the packets which means there's another

00:05:03,900 --> 00:05:08,910
packet in it in this case a TCP packet

00:05:06,600 --> 00:05:11,310
and so you can have multiple layers deep

00:05:08,910 --> 00:05:13,980
and so on so if you send a packet from

00:05:11,310 --> 00:05:16,830
one machine to the next then it's going

00:05:13,980 --> 00:05:19,710
to have to get each packet out of the

00:05:16,830 --> 00:05:23,640
previous packet and basically sort of

00:05:19,710 --> 00:05:26,310
sort of yeah I would say unpackage yeah

00:05:23,640 --> 00:05:27,960
and then if it needs to transmit that to

00:05:26,310 --> 00:05:29,280
the next host it's going to take all

00:05:27,960 --> 00:05:30,780
those bits and pieces and group them

00:05:29,280 --> 00:05:33,890
back together in the right order and

00:05:30,780 --> 00:05:39,870
send it along again so that's how

00:05:33,890 --> 00:05:44,880
networking actually uses packets so if

00:05:39,870 --> 00:05:46,560
we look at an example a typical example

00:05:44,880 --> 00:05:48,900
is an Internet packet because we use

00:05:46,560 --> 00:05:52,680
Ethernet all the time and that contains

00:05:48,900 --> 00:06:01,050
an ipv4 packets and that then contains a

00:05:52,680 --> 00:06:03,030
TCP packet and so on now okay so we have

00:06:01,050 --> 00:06:06,270
here a destination MAC address and the

00:06:03,030 --> 00:06:09,380
source MAC address now these are sort of

00:06:06,270 --> 00:06:12,230
the basic concepts without those

00:06:09,380 --> 00:06:14,880
networking on Ethernet would not work

00:06:12,230 --> 00:06:17,580
what is a MAC address a MAC address is

00:06:14,880 --> 00:06:20,670
basically a unique identifier for every

00:06:17,580 --> 00:06:24,300
single device on a network it's supposed

00:06:20,670 --> 00:06:26,570
to be unique worldwide but as you can

00:06:24,300 --> 00:06:28,740
tell six bytes is not a whole lot so

00:06:26,570 --> 00:06:32,880
theoretically there could be conflicts

00:06:28,740 --> 00:06:35,100
in reality there shouldn't be yet but if

00:06:32,880 --> 00:06:36,720
we keep adding more and more devices we

00:06:35,100 --> 00:06:39,990
will run into trouble of course at some

00:06:36,720 --> 00:06:42,750
point now let's first talk about

00:06:39,990 --> 00:06:45,510
we send data across a local network so

00:06:42,750 --> 00:06:47,520
imagine that we have a device a couple

00:06:45,510 --> 00:06:50,310
of devices here all wired up on a local

00:06:47,520 --> 00:06:51,900
network how do we send that well the in

00:06:50,310 --> 00:06:54,360
the old days we used to use a device

00:06:51,900 --> 00:06:56,160
called a hub now a hub looked a little

00:06:54,360 --> 00:07:01,140
bit like this

00:06:56,160 --> 00:07:03,480
you will recognize standards rj45 ports

00:07:01,140 --> 00:07:05,670
but you'll also recognize a coax port

00:07:03,480 --> 00:07:08,340
there which is not really in use a lot

00:07:05,670 --> 00:07:11,940
anymore today the problem with the hub

00:07:08,340 --> 00:07:15,300
was all devices could be sending at the

00:07:11,940 --> 00:07:17,100
same time so you would get one device

00:07:15,300 --> 00:07:18,540
sending a packet and another device

00:07:17,100 --> 00:07:20,640
sending at the same time and it would

00:07:18,540 --> 00:07:22,170
collide it would be a collision as they

00:07:20,640 --> 00:07:25,920
called it and then they would have to

00:07:22,170 --> 00:07:27,930
retransmitted a hub worked on layer 1 so

00:07:25,920 --> 00:07:31,310
purely on on the data on the physical

00:07:27,930 --> 00:07:35,040
layer not very efficient not very fast

00:07:31,310 --> 00:07:38,700
speeds usually limited to well 10

00:07:35,040 --> 00:07:41,730
megabits per second so not very

00:07:38,700 --> 00:07:43,830
efficient luckily we got in the next

00:07:41,730 --> 00:07:46,290
phase somewhere in mid 90s we got a

00:07:43,830 --> 00:07:50,190
better device for that and we used a

00:07:46,290 --> 00:07:51,660
switch which oops okay which looks a

00:07:50,190 --> 00:07:54,690
little bit like this which we all

00:07:51,660 --> 00:07:57,000
recognize I think and what happens here

00:07:54,690 --> 00:07:59,580
is as I said every device on the network

00:07:57,000 --> 00:08:01,140
has a MAC address which is supposed to

00:07:59,580 --> 00:08:03,750
be unique it's assigned by the

00:08:01,140 --> 00:08:05,400
manufacturer now you can override it if

00:08:03,750 --> 00:08:07,410
for example you're setting up VMware

00:08:05,400 --> 00:08:10,380
then you're actually creating virtual

00:08:07,410 --> 00:08:12,090
MAC addresses you can define them

00:08:10,380 --> 00:08:14,280
yourself you can modify them if you want

00:08:12,090 --> 00:08:18,240
which means you can mess with things as

00:08:14,280 --> 00:08:20,130
well now if you are located on the same

00:08:18,240 --> 00:08:22,380
physical network like if you plug into

00:08:20,130 --> 00:08:24,960
this switch with two devices you are on

00:08:22,380 --> 00:08:26,700
the same physical network then the way

00:08:24,960 --> 00:08:29,340
you communicate is by sending in

00:08:26,700 --> 00:08:32,130
Ethernet packets with the destination

00:08:29,340 --> 00:08:35,070
MAC address and the switch actually

00:08:32,130 --> 00:08:37,110
knows which device has which MAC address

00:08:35,070 --> 00:08:39,270
so which port on the switch has which

00:08:37,110 --> 00:08:41,450
MAC address so it knows where to send

00:08:39,270 --> 00:08:46,380
that traffic

00:08:41,450 --> 00:08:48,120
so that's layer 2 if you want to send IP

00:08:46,380 --> 00:08:51,150
traffic well

00:08:48,120 --> 00:08:54,060
IP as part of an IP packet is part of an

00:08:51,150 --> 00:08:56,650
Ethernet packets so

00:08:54,060 --> 00:08:58,750
you're still sending the same kind of

00:08:56,650 --> 00:09:00,940
packets it's just you're adding a

00:08:58,750 --> 00:09:03,160
package within the packets and then you

00:09:00,940 --> 00:09:05,770
require IP addresses now where do you

00:09:03,160 --> 00:09:08,440
send them well on a local network all we

00:09:05,770 --> 00:09:11,530
can do is send things to a MAC address

00:09:08,440 --> 00:09:14,260
because that's eater net so we use a

00:09:11,530 --> 00:09:16,120
thing called ARP to find out the MAC

00:09:14,260 --> 00:09:18,220
address of the device we want to

00:09:16,120 --> 00:09:20,260
communicate you how does that work well

00:09:18,220 --> 00:09:23,650
this is actually what such a packets

00:09:20,260 --> 00:09:27,870
translated in human readable form looks

00:09:23,650 --> 00:09:33,040
like this is an ARP request basically

00:09:27,870 --> 00:09:38,260
192 168 0 12 is requesting the MAC

00:09:33,040 --> 00:09:40,240
address of 192 168 0 15 and so that

00:09:38,260 --> 00:09:42,870
device is saying hey I'm looking for the

00:09:40,240 --> 00:09:45,550
MAC address can someone tell me and then

00:09:42,870 --> 00:09:49,540
the one with dot 15 at the end is gonna

00:09:45,550 --> 00:09:52,840
reply and say about 15 is at this MAC

00:09:49,540 --> 00:09:54,910
address and now the two devices can

00:09:52,840 --> 00:09:58,810
actually communicate because they know

00:09:54,910 --> 00:10:01,900
each other's MAC address this is cached

00:09:58,810 --> 00:10:03,550
this is stored in a so called ARP table

00:10:01,900 --> 00:10:05,020
so that you don't have to do this lookup

00:10:03,550 --> 00:10:10,839
for every single packet that you want to

00:10:05,020 --> 00:10:13,900
send now what is local traffic basically

00:10:10,839 --> 00:10:16,300
local for IP means you're on the same IP

00:10:13,900 --> 00:10:20,200
subnet I'm sure most of you have heard

00:10:16,300 --> 00:10:20,830
of what a subnet is but what is it

00:10:20,200 --> 00:10:23,710
really

00:10:20,830 --> 00:10:28,810
what is it defined so if we look at IP

00:10:23,710 --> 00:10:30,280
version 4 which is what most servers are

00:10:28,810 --> 00:10:36,970
still running on we'll get to IP version

00:10:30,280 --> 00:10:38,620
6 later it uses CIDR notation classless

00:10:36,970 --> 00:10:41,530
inter-domain routing notation not

00:10:38,620 --> 00:10:44,800
important it looks like this we all

00:10:41,530 --> 00:10:46,810
notice so four numbers separated by a

00:10:44,800 --> 00:10:52,300
dot where each number is between and

00:10:46,810 --> 00:10:54,010
including 0 and 255 so goes from 0 0 0

00:10:52,300 --> 00:10:57,580
and so on to 255

00:10:54,010 --> 00:11:01,570
in reality what that means is it's four

00:10:57,580 --> 00:11:03,660
times eight bits so the address could

00:11:01,570 --> 00:11:06,690
look a little bit like this for example

00:11:03,660 --> 00:11:09,210
192 4 32 1 in Riyadh

00:11:06,690 --> 00:11:12,780
he is sent across the wire as a number

00:11:09,210 --> 00:11:14,550
of bits now this means if you have four

00:11:12,780 --> 00:11:20,100
times eight bits

00:11:14,550 --> 00:11:22,590
it means 256 but times 256 x 256 x 256

00:11:20,100 --> 00:11:27,750
addresses or two to the power of 32 or

00:11:22,590 --> 00:11:29,340
4.3 billion sort of that's the total

00:11:27,750 --> 00:11:34,560
number of IP addresses that are

00:11:29,340 --> 00:11:36,720
available to the world we'll get to why

00:11:34,560 --> 00:11:38,730
that's a problem and I mean you can

00:11:36,720 --> 00:11:40,470
already tell if there's eight billion of

00:11:38,730 --> 00:11:41,970
us and we have only 4.3 billion

00:11:40,470 --> 00:11:44,670
addresses that's kind of a problem but

00:11:41,970 --> 00:11:47,850
I'll get back to that now IP networking

00:11:44,670 --> 00:11:50,370
requires an IP address and as I

00:11:47,850 --> 00:11:52,980
previously said a subnet mask now what

00:11:50,370 --> 00:11:55,670
is that subnet mask all it defines

00:11:52,980 --> 00:11:59,880
basically is okay you have an IP address

00:11:55,670 --> 00:12:03,330
but to which range of IP addresses does

00:11:59,880 --> 00:12:05,850
this IP belong so it kind of puts sort

00:12:03,330 --> 00:12:06,360
of a limiter on the range to which it

00:12:05,850 --> 00:12:09,120
belongs

00:12:06,360 --> 00:12:12,060
it basically says yes I know this IP

00:12:09,120 --> 00:12:15,080
address is part of the 4.3 billion but

00:12:12,060 --> 00:12:17,880
it's also part of a limited network and

00:12:15,080 --> 00:12:19,890
the reason to do that is that any

00:12:17,880 --> 00:12:22,680
address that's part of the same range

00:12:19,890 --> 00:12:24,480
can talk to each other locally without

00:12:22,680 --> 00:12:25,860
having to go through some kind of router

00:12:24,480 --> 00:12:29,580
without having to go through other

00:12:25,860 --> 00:12:32,010
devices so any IP within that range can

00:12:29,580 --> 00:12:37,320
talk to each other for example this

00:12:32,010 --> 00:12:42,540
range 194 50 97 0 to 255 has a certain

00:12:37,320 --> 00:12:44,910
subnet mask and nei nei P addresses in

00:12:42,540 --> 00:12:47,100
that same range are considered to be

00:12:44,910 --> 00:12:49,970
locally on the same network so they can

00:12:47,100 --> 00:12:49,970
talk to each other directly

00:12:50,570 --> 00:12:57,540
now there's two notations for that well

00:12:54,960 --> 00:13:00,780
I'm gonna go back so a subnet mask can

00:12:57,540 --> 00:13:03,210
be defined in the first notation the 255

00:13:00,780 --> 00:13:08,760
dot and so on or it can be defined as

00:13:03,210 --> 00:13:11,700
slash 24 you often see that when you go

00:13:08,760 --> 00:13:14,940
on linux command line and you type IP

00:13:11,700 --> 00:13:16,820
address or ifconfig or so on then you

00:13:14,940 --> 00:13:20,510
often see a notation like that slash

00:13:16,820 --> 00:13:22,490
24/25 and so on the reason

00:13:20,510 --> 00:13:24,620
it is expressed that way is basically

00:13:22,490 --> 00:13:29,240
ipv4 gives you two to the power of 32

00:13:24,620 --> 00:13:31,970
and then a slash 24 will give you two to

00:13:29,240 --> 00:13:34,070
the power of 32 minus 24 so two to the

00:13:31,970 --> 00:13:38,180
power of eight so it's gonna give you

00:13:34,070 --> 00:13:39,949
256 addresses quickly want to mention

00:13:38,180 --> 00:13:41,839
there's three exceptions I'm pretty sure

00:13:39,949 --> 00:13:43,610
you recognize the last one one ninety

00:13:41,839 --> 00:13:46,279
two dot one sixty eight dot zero dot

00:13:43,610 --> 00:13:50,149
zero that's usually the IP you get from

00:13:46,279 --> 00:13:52,610
your local router at home from your ISP

00:13:50,149 --> 00:13:55,240
those are ranges that do not work on the

00:13:52,610 --> 00:13:58,519
internet the only work on local networks

00:13:55,240 --> 00:14:01,760
that IP is not routable anywhere in the

00:13:58,519 --> 00:14:04,329
internet now let's look at a quick

00:14:01,760 --> 00:14:10,190
example let's say we have a range

00:14:04,329 --> 00:14:14,630
194 7 1 0 / 24 that means it's a range

00:14:10,190 --> 00:14:18,470
from 1 dot 0 to 1 dot 255 it contains

00:14:14,630 --> 00:14:21,220
256 addresses and let's imagine you want

00:14:18,470 --> 00:14:24,199
8 addresses to install your server zone

00:14:21,220 --> 00:14:26,750
then you could just use this range or

00:14:24,199 --> 00:14:28,899
you could say well I only need 8 so I'm

00:14:26,750 --> 00:14:31,940
gonna make a smaller range instead of

00:14:28,899 --> 00:14:34,399
256 addresses and I'm going to reserve

00:14:31,940 --> 00:14:36,350
that range specifically for my servers

00:14:34,399 --> 00:14:39,470
and they're gonna be on this specific

00:14:36,350 --> 00:14:41,870
switch or router and so on so you could

00:14:39,470 --> 00:14:43,880
say I want a slash 28 now what is a

00:14:41,870 --> 00:14:46,430
slash 28 well it's choose to the power

00:14:43,880 --> 00:14:49,250
of 32 minus 28 so it's gonna give you 16

00:14:46,430 --> 00:14:52,339
addresses now you might think wait a

00:14:49,250 --> 00:14:54,649
slash 29 will give me 8 addresses and I

00:14:52,339 --> 00:14:57,470
need 8 addresses that's perfect the

00:14:54,649 --> 00:15:01,069
problem is every single subnet that you

00:14:57,470 --> 00:15:03,319
make the first address is called the

00:15:01,069 --> 00:15:04,819
network address and the highest address

00:15:03,319 --> 00:15:09,410
is called the broadcast address and you

00:15:04,819 --> 00:15:11,959
cannot use those on top of that each

00:15:09,410 --> 00:15:16,220
subnets usually needs a default gateway

00:15:11,959 --> 00:15:19,730
so you're losing three addresses so out

00:15:16,220 --> 00:15:21,529
of 16 you have 13 usable this also means

00:15:19,730 --> 00:15:23,290
the more subnets you make the more

00:15:21,529 --> 00:15:27,279
addresses you will lose

00:15:23,290 --> 00:15:29,959
so the 4.3 billion given how many

00:15:27,279 --> 00:15:31,880
networks there are on the world networks

00:15:29,959 --> 00:15:35,110
subnets there are in the world we lose a

00:15:31,880 --> 00:15:40,070
lot of those 4.3 billion anyway

00:15:35,110 --> 00:15:42,680
so the subnet in this case 1 94 7 1 0 /

00:15:40,070 --> 00:15:48,020
28 also written in a different way which

00:15:42,680 --> 00:15:49,700
I'm not gonna get into right now now to

00:15:48,020 --> 00:15:53,300
be cleared the subnet doesn't have to

00:15:49,700 --> 00:15:57,980
start at the dot 0 it can also start at

00:15:53,300 --> 00:16:01,280
dot 16 or dot 32 or dot 48 it all it can

00:15:57,980 --> 00:16:04,460
only start though at a multiplication of

00:16:01,280 --> 00:16:06,800
the number of addresses so a slash 28

00:16:04,460 --> 00:16:10,430
which has 16 addresses can only start on

00:16:06,800 --> 00:16:12,770
dot 1.16 dot 32 and so on but you can

00:16:10,430 --> 00:16:16,130
make combinations so if you have a big

00:16:12,770 --> 00:16:20,210
range of 256 addresses you can make it

00:16:16,130 --> 00:16:23,330
start at dot 0 and go to 127 with a

00:16:20,210 --> 00:16:27,950
slash 25 and then the next one can start

00:16:23,330 --> 00:16:30,920
at 128 and go to 159 and so on so any

00:16:27,950 --> 00:16:32,860
combination makes sense you can just not

00:16:30,920 --> 00:16:37,660
overlap of course that wouldn't work

00:16:32,860 --> 00:16:39,830
devices that overlap on the same range

00:16:37,660 --> 00:16:45,710
they would not be able to talk to each

00:16:39,830 --> 00:16:48,350
other in a in a decent way just

00:16:45,710 --> 00:16:50,210
something I want to throw in between if

00:16:48,350 --> 00:16:52,790
you ever want to check if an IP is

00:16:50,210 --> 00:16:55,030
inside a range we're at a PHP conference

00:16:52,790 --> 00:16:58,940
so I have to show something of PHP right

00:16:55,030 --> 00:17:01,970
so this is a very convenient piece of

00:16:58,940 --> 00:17:03,680
code which basically avoids that you

00:17:01,970 --> 00:17:06,350
have to do all sorts of parsing and

00:17:03,680 --> 00:17:07,820
checking with dots and splitting and

00:17:06,350 --> 00:17:09,830
then doing all sorts of weird

00:17:07,820 --> 00:17:13,010
calculations basically what it's doing

00:17:09,830 --> 00:17:15,080
it's using IP to long to turn an IP

00:17:13,010 --> 00:17:18,830
address into a long and then printing

00:17:15,080 --> 00:17:20,540
it's printing the bits 32 bits and then

00:17:18,830 --> 00:17:23,360
running substring compared just the

00:17:20,540 --> 00:17:28,210
check is this IP within this range in

00:17:23,360 --> 00:17:28,210
what six lines of code very convenient

00:17:28,450 --> 00:17:33,500
anyone ever heard this phrase I think

00:17:31,910 --> 00:17:36,890
there's a world market for maybe five

00:17:33,500 --> 00:17:39,620
computers someone said it in somewhere

00:17:36,890 --> 00:17:43,910
in the 50s I think it was a someone

00:17:39,620 --> 00:17:45,560
working for IBM or 640k is more memory

00:17:43,910 --> 00:17:48,560
than anyone will ever need something

00:17:45,560 --> 00:17:50,720
that Bill Gates said at some

00:17:48,560 --> 00:17:52,370
and that's another one 4.3 billion IP

00:17:50,720 --> 00:17:53,870
addresses is more than enough that's

00:17:52,370 --> 00:17:57,140
what they thought in the 70s when they

00:17:53,870 --> 00:17:59,720
built ipv4 it is not enough we are

00:17:57,140 --> 00:18:01,430
running out and we have been running out

00:17:59,720 --> 00:18:04,820
for a while

00:18:01,430 --> 00:18:07,820
4.3 billion doesn't cover it anymore

00:18:04,820 --> 00:18:12,020
especially with mobile devices so ipv6

00:18:07,820 --> 00:18:14,870
was created published in 1998 but it's

00:18:12,020 --> 00:18:16,280
still not being deployed everywhere it's

00:18:14,870 --> 00:18:20,570
we're slowly getting there

00:18:16,280 --> 00:18:24,020
most major sites have it more and more

00:18:20,570 --> 00:18:26,300
ISPs at home have it but a lot of small

00:18:24,020 --> 00:18:29,120
sites are still behind and now an ipv4

00:18:26,300 --> 00:18:31,550
address well you already saw that and

00:18:29,120 --> 00:18:34,370
ipv6 address looks a little different a

00:18:31,550 --> 00:18:37,520
little bit longer now luckily anywhere

00:18:34,370 --> 00:18:40,430
where you see four zeros you can

00:18:37,520 --> 00:18:42,530
actually remove that and say double

00:18:40,430 --> 00:18:45,710
colon double colon but you can only do

00:18:42,530 --> 00:18:47,330
that once so you cannot have four zeros

00:18:45,710 --> 00:18:49,730
and then something else and then four

00:18:47,330 --> 00:18:52,940
zeros and remove both of those the

00:18:49,730 --> 00:18:55,820
problem is ipv4 and ipv6 cannot talk to

00:18:52,940 --> 00:18:57,830
each other they live side-by-side they

00:18:55,820 --> 00:19:00,080
can run on the same devices but they

00:18:57,830 --> 00:19:02,450
cannot communicate with each other so

00:19:00,080 --> 00:19:04,580
basically if you want to use ipv6 and

00:19:02,450 --> 00:19:08,030
you want to fetch something from a

00:19:04,580 --> 00:19:10,310
website you can only communicate with

00:19:08,030 --> 00:19:14,960
that website if they are also running

00:19:10,310 --> 00:19:17,960
ipv6 now to give you an idea the address

00:19:14,960 --> 00:19:20,780
space of ipv6 is two to the power of 128

00:19:17,960 --> 00:19:23,690
which is that many addresses we are not

00:19:20,780 --> 00:19:28,370
going to run out anytime soon please

00:19:23,690 --> 00:19:30,320
don't quote me on that and to give you

00:19:28,370 --> 00:19:34,210
an idea of the deployment rates globally

00:19:30,320 --> 00:19:37,700
22 percent of people at home have ipv6

00:19:34,210 --> 00:19:41,240
in the US it's a little more Belgium is

00:19:37,700 --> 00:19:44,690
number one here we cross the 50% barrier

00:19:41,240 --> 00:19:48,170
last year which is good but still a long

00:19:44,690 --> 00:19:51,110
way to go of course should you use it

00:19:48,170 --> 00:19:55,370
yes should you just tell your network

00:19:51,110 --> 00:19:59,630
engineer or your sis ops guy enable ipv6

00:19:55,370 --> 00:20:00,260
no be careful on any Linux environment

00:19:59,630 --> 00:20:03,049
and on

00:20:00,260 --> 00:20:05,600
I think on Windows it's the same thing

00:20:03,049 --> 00:20:08,120
firewall ruling rules are set per

00:20:05,600 --> 00:20:11,570
protocol so if you have a firewall rule

00:20:08,120 --> 00:20:14,630
set for ipv4 it's not activated for ipv6

00:20:11,570 --> 00:20:15,890
so if you just enable ipv6 you're gonna

00:20:14,630 --> 00:20:17,840
run into trouble because you're

00:20:15,890 --> 00:20:18,860
basically you have no firewall rules

00:20:17,840 --> 00:20:20,809
enabled at all

00:20:18,860 --> 00:20:24,559
so yes you should use it but you should

00:20:20,809 --> 00:20:27,260
look at your firewall in first okay so

00:20:24,559 --> 00:20:29,600
we talked a lot about IP addresses now

00:20:27,260 --> 00:20:31,490
let's see if we can send some IP traffic

00:20:29,600 --> 00:20:33,350
on a local network so we have a client

00:20:31,490 --> 00:20:35,840
here we have a server and they're on the

00:20:33,350 --> 00:20:37,970
same IP range and the client wants to

00:20:35,840 --> 00:20:40,700
make a connection and fetch information

00:20:37,970 --> 00:20:42,169
and so on first thing he has to do is

00:20:40,700 --> 00:20:43,400
well they're on the local network the

00:20:42,169 --> 00:20:46,070
only way they can exchange information

00:20:43,400 --> 00:20:49,760
is over Ethernet so they need an

00:20:46,070 --> 00:20:52,070
Ethernet packets and in that Ethernet

00:20:49,760 --> 00:20:55,040
packet they need a MAC address so he's

00:20:52,070 --> 00:20:57,410
gonna send an ARP request and say does

00:20:55,040 --> 00:21:00,559
anyone know the MAC address for that IP

00:20:57,410 --> 00:21:03,530
and that servers going to reply and say

00:21:00,559 --> 00:21:05,030
yep this is my MAC address and now they

00:21:03,530 --> 00:21:08,600
can talk because now they can exchange

00:21:05,030 --> 00:21:10,429
Ethernet packets and within those

00:21:08,600 --> 00:21:14,240
Ethernet packets there are IP packets

00:21:10,429 --> 00:21:16,669
and so on now how do I pee packets find

00:21:14,240 --> 00:21:18,140
their way when they want to go beyond

00:21:16,669 --> 00:21:20,570
that when they want to go anywhere

00:21:18,140 --> 00:21:22,880
really how do they know whether they're

00:21:20,570 --> 00:21:27,440
on the local network or not well they

00:21:22,880 --> 00:21:29,990
use routing for that each layer 3

00:21:27,440 --> 00:21:31,910
network which so each IP network has a

00:21:29,990 --> 00:21:34,520
routing table and you can easily find

00:21:31,910 --> 00:21:36,350
that on Linux you just type route on

00:21:34,520 --> 00:21:38,360
Windows you type a route to print and

00:21:36,350 --> 00:21:41,270
then it gives you output that looks a

00:21:38,360 --> 00:21:46,640
little like this and what you can see

00:21:41,270 --> 00:21:49,100
here is that yeah ok so you can see at

00:21:46,640 --> 00:21:51,320
the back there's I face interface which

00:21:49,100 --> 00:21:52,669
is basically the network interface that

00:21:51,320 --> 00:21:56,900
you're plugged into so we have two of

00:21:52,669 --> 00:22:00,080
them here eth1 eth0 and you can see here

00:21:56,900 --> 00:22:03,260
there's a difference between this route

00:22:00,080 --> 00:22:06,080
and that route just with a flag so the

00:22:03,260 --> 00:22:08,270
one that has no G in there is basically

00:22:06,080 --> 00:22:11,510
one that's defined by your network

00:22:08,270 --> 00:22:13,550
interface the one that does have a G has

00:22:11,510 --> 00:22:16,490
a gateway address

00:22:13,550 --> 00:22:20,770
this one all the IP addresses on this

00:22:16,490 --> 00:22:23,780
interface are directly available on eth0

00:22:20,770 --> 00:22:27,560
this one is available on eth0 as well

00:22:23,780 --> 00:22:30,620
but only through a gateway that means

00:22:27,560 --> 00:22:33,980
any packets that is being sent to this

00:22:30,620 --> 00:22:36,500
range is actually being transmitted to

00:22:33,980 --> 00:22:38,780
that gateway so using the MAC address of

00:22:36,500 --> 00:22:41,240
that gateway now the top one is a

00:22:38,780 --> 00:22:43,090
special case it has destination zero

00:22:41,240 --> 00:22:46,310
zero zero zero which basically means

00:22:43,090 --> 00:22:50,600
anything else in most cases this means

00:22:46,310 --> 00:22:53,270
the Internet so anything else is being

00:22:50,600 --> 00:22:56,510
sent to ten zero zero zero one

00:22:53,270 --> 00:22:59,180
now where does 1000 one live oh it lives

00:22:56,510 --> 00:23:02,840
on on the second range so it lives on a

00:22:59,180 --> 00:23:07,100
th one so this is a way to see actually

00:23:02,840 --> 00:23:09,200
where is my traffic going to go so if

00:23:07,100 --> 00:23:11,810
you want to send IP traffic to a remote

00:23:09,200 --> 00:23:13,550
device where do you send it well if that

00:23:11,810 --> 00:23:16,400
remote device is not on your local

00:23:13,550 --> 00:23:18,440
network then you cannot send it because

00:23:16,400 --> 00:23:21,470
you need a MAC address of the device

00:23:18,440 --> 00:23:24,230
and MAC addresses are not shared beyond

00:23:21,470 --> 00:23:26,630
the local network so then you use that

00:23:24,230 --> 00:23:29,960
routing table and you send it to the

00:23:26,630 --> 00:23:31,720
default gateway the default gateway is

00:23:29,960 --> 00:23:34,460
something that's provided usually

00:23:31,720 --> 00:23:36,170
statically on a server so you just set

00:23:34,460 --> 00:23:39,050
it up your network engineer will say

00:23:36,170 --> 00:23:41,270
this is the default gateway or if you

00:23:39,050 --> 00:23:45,440
have a router at home for example it's

00:23:41,270 --> 00:23:47,600
provided by that router using DHCP and

00:23:45,440 --> 00:23:49,340
so what happens then is if we want to

00:23:47,600 --> 00:23:51,940
communicate from our client to our

00:23:49,340 --> 00:23:54,110
server somewhere on the internet then

00:23:51,940 --> 00:23:55,790
we're going to say okay I want to

00:23:54,110 --> 00:23:57,920
communicate to the Internet which means

00:23:55,790 --> 00:23:59,570
I have to use my default gateway which

00:23:57,920 --> 00:24:02,090
is that router over there

00:23:59,570 --> 00:24:04,310
I'm gonna ask for the MAC address

00:24:02,090 --> 00:24:07,580
because that router is on my local

00:24:04,310 --> 00:24:10,130
network within the same IP range I'm

00:24:07,580 --> 00:24:12,650
gonna get that MAC address back and now

00:24:10,130 --> 00:24:15,980
I'm gonna send a packets in Ethernet

00:24:12,650 --> 00:24:18,860
packets to my router not to my server to

00:24:15,980 --> 00:24:22,220
my router and within there is a TCP

00:24:18,860 --> 00:24:24,590
packets for one ninety four seven one

00:24:22,220 --> 00:24:25,340
for the server the router is going to

00:24:24,590 --> 00:24:27,320
get that

00:24:25,340 --> 00:24:29,090
packets say oh I got an ethernet packet

00:24:27,320 --> 00:24:31,820
what's inside is Ethernet packet oh

00:24:29,090 --> 00:24:33,560
there's an IP packets I have to send it

00:24:31,820 --> 00:24:36,020
to the server okay I'm gonna make a new

00:24:33,560 --> 00:24:37,970
Ethernet new Ethernet packets for the

00:24:36,020 --> 00:24:39,590
next router I'm going to put that IP

00:24:37,970 --> 00:24:40,850
packet in there I'm gonna send it along

00:24:39,590 --> 00:24:43,130
and the next router is gonna do exactly

00:24:40,850 --> 00:24:44,390
the same thing until in the end it's

00:24:43,130 --> 00:24:47,870
going to end up on the server on the

00:24:44,390 --> 00:24:49,430
other side so you can imagine if you're

00:24:47,870 --> 00:24:52,610
sending a packet to the other side of

00:24:49,430 --> 00:24:55,700
the world and it's crossing 20 routers

00:24:52,610 --> 00:25:02,360
this happens every single time and then

00:24:55,700 --> 00:25:04,730
the return packets same thing yeah you

00:25:02,360 --> 00:25:06,800
can see the full ARP table on any

00:25:04,730 --> 00:25:10,450
operating system with ARP dash a and I

00:25:06,800 --> 00:25:13,490
already said route - n or rad print so

00:25:10,450 --> 00:25:15,770
let's have a look at TCP packets because

00:25:13,490 --> 00:25:21,410
we use those all the time

00:25:15,770 --> 00:25:23,840
HTTP is sent across TCP so this is what

00:25:21,410 --> 00:25:27,110
a TCP packet looks like the content is

00:25:23,840 --> 00:25:29,210
here above that is a lot of headers and

00:25:27,110 --> 00:25:31,160
there's they're all important but I want

00:25:29,210 --> 00:25:33,790
to focus on three now which is sequence

00:25:31,160 --> 00:25:36,620
number acknowledgement number and flag

00:25:33,790 --> 00:25:38,600
so what happens when you try to connect

00:25:36,620 --> 00:25:40,730
establish a TCP connection between a

00:25:38,600 --> 00:25:43,130
client and the server the first thing

00:25:40,730 --> 00:25:46,720
that happens is clients sends a packet

00:25:43,130 --> 00:25:49,820
and in that packet is a flag syn the

00:25:46,720 --> 00:25:52,310
flag sin is set and it sends a sequence

00:25:49,820 --> 00:25:55,220
number which is generated in a certain

00:25:52,310 --> 00:25:57,050
way it's sort of random let's imagine

00:25:55,220 --> 00:26:00,020
right now that it's a thousand and it

00:25:57,050 --> 00:26:03,110
always increments so it sends it and if

00:26:00,020 --> 00:26:04,820
the server receives it the server's

00:26:03,110 --> 00:26:06,620
gonna reply and if you wants to accept

00:26:04,820 --> 00:26:08,990
that connection it's going to reply with

00:26:06,620 --> 00:26:11,900
the packets with two flag set sin and

00:26:08,990 --> 00:26:13,220
ack and the sequence number is now one

00:26:11,900 --> 00:26:15,920
higher and there's an acknowledgement

00:26:13,220 --> 00:26:19,130
number saying yes I agree I acknowledge

00:26:15,920 --> 00:26:21,140
your message also with a number and then

00:26:19,130 --> 00:26:23,360
the client is going to reply again with

00:26:21,140 --> 00:26:26,810
a flag a key I acknowledge that you

00:26:23,360 --> 00:26:27,710
acknowledged with the sequence number

00:26:26,810 --> 00:26:30,590
one higher and the acknowledgement

00:26:27,710 --> 00:26:33,260
number one higher and now we can

00:26:30,590 --> 00:26:37,640
communicate now the client can also say

00:26:33,260 --> 00:26:40,270
I'm sending a get request so

00:26:37,640 --> 00:26:43,820
this is called a three-way handshake

00:26:40,270 --> 00:26:45,590
going back and forth now let's imagine

00:26:43,820 --> 00:26:49,280
we want to communicate between Brussels

00:26:45,590 --> 00:26:52,330
and Montreal and let's imagine that the

00:26:49,280 --> 00:26:57,290
minimum time for that is 45 milliseconds

00:26:52,330 --> 00:27:00,049
that means after 45 milliseconds my sin

00:26:57,290 --> 00:27:03,940
packet has arrived 90 milliseconds here

00:27:00,049 --> 00:27:05,150
I send a get with request after 135

00:27:03,940 --> 00:27:07,490
milliseconds

00:27:05,150 --> 00:27:10,610
the server's finally received what I

00:27:07,490 --> 00:27:13,340
want to what I want the server to

00:27:10,610 --> 00:27:16,520
execute a get request I want to retrieve

00:27:13,340 --> 00:27:20,270
some piece of information that takes a

00:27:16,520 --> 00:27:21,860
long time imagine we do it between

00:27:20,270 --> 00:27:24,890
Brussels and London and it's 10

00:27:21,860 --> 00:27:27,290
milliseconds then obviously that only

00:27:24,890 --> 00:27:28,940
takes 30 milliseconds in total so you

00:27:27,290 --> 00:27:31,580
can see why sometimes it's a good idea

00:27:28,940 --> 00:27:34,549
to have more in one location for your

00:27:31,580 --> 00:27:36,380
data so that clients from the other side

00:27:34,549 --> 00:27:40,010
of the world can actually access it a

00:27:36,380 --> 00:27:43,280
lot faster so that's one way of

00:27:40,010 --> 00:27:47,419
improving speed there's another way

00:27:43,280 --> 00:27:49,669
it's called TCP window size for anyone

00:27:47,419 --> 00:27:52,580
running on older version of Linux and

00:27:49,669 --> 00:27:54,679
older Linux kernel this is the reason

00:27:52,580 --> 00:27:57,350
why you should upgrade so you have a sin

00:27:54,679 --> 00:28:01,400
we have a syn ack and the server can

00:27:57,350 --> 00:28:03,710
actually mention a size of packets the

00:28:01,400 --> 00:28:06,650
maximum amount of data that it can

00:28:03,710 --> 00:28:08,840
receive so it can say 8 kilobytes and

00:28:06,650 --> 00:28:11,750
then the client can say yeah I agree

00:28:08,840 --> 00:28:13,040
I can also receive 8 kilobytes and then

00:28:11,750 --> 00:28:15,350
the server is going to reply back and

00:28:13,040 --> 00:28:17,000
say I can also receive 16 kilobytes if

00:28:15,350 --> 00:28:18,890
that's fine and the client is going to

00:28:17,000 --> 00:28:21,980
reply back with 16 kilobytes and so on

00:28:18,890 --> 00:28:25,280
and it can go with ipv4 it can go up to

00:28:21,980 --> 00:28:27,200
it up to 64 kilobytes but the bigger

00:28:25,280 --> 00:28:29,360
that size the larger the packets are

00:28:27,200 --> 00:28:30,950
going to be so if you have a lot of data

00:28:29,360 --> 00:28:34,549
to send you're going to be able to send

00:28:30,950 --> 00:28:36,530
it in less round trips because every

00:28:34,549 --> 00:28:40,880
single time let's imagine the server has

00:28:36,530 --> 00:28:42,380
to reply with 500 megabytes of data it's

00:28:40,880 --> 00:28:45,200
going to be one packet at a time in this

00:28:42,380 --> 00:28:47,809
case so it's gonna be 8 kilobytes 8

00:28:45,200 --> 00:28:50,590
kilobytes 8 kilobytes 8 kilobytes if you

00:28:47,809 --> 00:28:52,900
have 45 millisecond delay which

00:28:50,590 --> 00:28:55,870
- it's going to take a long time so if

00:28:52,900 --> 00:28:57,730
you can increase the packet size the

00:28:55,870 --> 00:28:59,320
number of tie it's going to reduce the

00:28:57,730 --> 00:29:06,159
number of times it has to go back and

00:28:59,320 --> 00:29:09,570
forth recent Linux kernels have a higher

00:29:06,159 --> 00:29:13,779
standard value for that there's also

00:29:09,570 --> 00:29:16,659
something called tcp slow-start so what

00:29:13,779 --> 00:29:19,240
that does is it allows the server to say

00:29:16,659 --> 00:29:22,090
oh I'm sending two pack two packets back

00:29:19,240 --> 00:29:24,760
already and I'm waiting for you to

00:29:22,090 --> 00:29:27,220
acknowledge both and if you do that I'm

00:29:24,760 --> 00:29:28,720
gonna send you four packets and if you

00:29:27,220 --> 00:29:31,090
acknowledge all four I'm gonna send you

00:29:28,720 --> 00:29:33,340
eight and so it keeps increasing keeps

00:29:31,090 --> 00:29:35,470
multiplying by two until at some point

00:29:33,340 --> 00:29:37,539
the client doesn't reply anymore or

00:29:35,470 --> 00:29:39,610
doesn't reply to all of them and then

00:29:37,539 --> 00:29:42,429
it's gonna go back and go to the

00:29:39,610 --> 00:29:44,529
previous value so in this case it's not

00:29:42,429 --> 00:29:46,570
a matter of sending one package one

00:29:44,529 --> 00:29:50,370
reply one packet or one reply it can

00:29:46,570 --> 00:29:54,100
actually do four or eight or 16 or more

00:29:50,370 --> 00:29:57,279
this is also by default on newer Linux

00:29:54,100 --> 00:30:01,090
versions so a good reason to upgrade to

00:29:57,279 --> 00:30:03,309
the latest versions so there's a big

00:30:01,090 --> 00:30:04,779
difference between and this is very

00:30:03,309 --> 00:30:07,240
important this is something web

00:30:04,779 --> 00:30:09,250
developers can change on on the server

00:30:07,240 --> 00:30:11,289
actually there's a big difference

00:30:09,250 --> 00:30:13,899
between establishing a new connection or

00:30:11,289 --> 00:30:15,750
reusing an existing one so if you have a

00:30:13,899 --> 00:30:19,029
new connection well it's obvious it's

00:30:15,750 --> 00:30:21,010
since an ack-ack and then at the same

00:30:19,029 --> 00:30:22,450
time we send our get request and then

00:30:21,010 --> 00:30:24,640
the server after one hundred and thirty

00:30:22,450 --> 00:30:26,710
five milliseconds the server says ok now

00:30:24,640 --> 00:30:29,289
I can start processing let's imagine

00:30:26,710 --> 00:30:30,850
that takes a hundred milliseconds means

00:30:29,289 --> 00:30:33,279
after two hundred and thirty five

00:30:30,850 --> 00:30:35,529
milliseconds the server can reply let's

00:30:33,279 --> 00:30:37,899
imagine that we have tcp slow-start

00:30:35,529 --> 00:30:40,690
enable and we can immediately send for

00:30:37,899 --> 00:30:42,580
and we acknowledge with four packets and

00:30:40,690 --> 00:30:44,950
then the server sends eight packets and

00:30:42,580 --> 00:30:48,010
we acknowledge four with eight and let's

00:30:44,950 --> 00:30:50,830
imagine the whole bit of data was twelve

00:30:48,010 --> 00:30:52,750
packets so we're done still it took four

00:30:50,830 --> 00:30:55,799
hundred and fifteen milliseconds almost

00:30:52,750 --> 00:30:57,909
half a second for a single request and

00:30:55,799 --> 00:31:00,309
normally you would cut the connection

00:30:57,909 --> 00:31:02,919
here you would cut TCP connection and

00:31:00,309 --> 00:31:04,509
that would be it but let's imagine that

00:31:02,919 --> 00:31:06,459
you still want to reach

00:31:04,509 --> 00:31:09,159
if CSS and JavaScript and all those

00:31:06,459 --> 00:31:10,959
things if you cut the connection you

00:31:09,159 --> 00:31:13,289
need to establish a new one you need to

00:31:10,959 --> 00:31:15,399
have an you through you a handshake

00:31:13,289 --> 00:31:17,679
however if you don't cut the connection

00:31:15,399 --> 00:31:21,159
and you can do that in Apache and nginx

00:31:17,679 --> 00:31:23,649
and any other web server nowadays if you

00:31:21,159 --> 00:31:24,940
don't cut the connection it means the

00:31:23,649 --> 00:31:27,489
client doesn't have to do it through you

00:31:24,940 --> 00:31:29,829
a handshake you can just say give me the

00:31:27,489 --> 00:31:31,929
data it still requires a hundred

00:31:29,829 --> 00:31:37,269
milliseconds of processing that's your

00:31:31,929 --> 00:31:39,909
PHP doing its work but now the server

00:31:37,269 --> 00:31:41,589
can reply immediately with 12 packets

00:31:39,909 --> 00:31:43,659
because he knew from the previous

00:31:41,589 --> 00:31:46,779
requests 8 was not a problem

00:31:43,659 --> 00:31:48,940
Sakana tried to send 16 now but we had

00:31:46,779 --> 00:31:51,940
only 12 packets of data so it's gonna

00:31:48,940 --> 00:31:55,329
send 12 packets and the client will

00:31:51,940 --> 00:31:59,529
acknowledge so we just saved almost 50%

00:31:55,329 --> 00:32:02,889
in time so don't close your connections

00:31:59,529 --> 00:32:05,829
obviously so there's a couple of ways to

00:32:02,889 --> 00:32:08,319
upgrade your performance upgrade to the

00:32:05,829 --> 00:32:10,779
latest version check your windows size

00:32:08,319 --> 00:32:13,299
whether it's properly set would use

00:32:10,779 --> 00:32:16,299
latency well move your servers closer to

00:32:13,299 --> 00:32:17,589
your client well if you have if you know

00:32:16,299 --> 00:32:19,899
for example you're building a website

00:32:17,589 --> 00:32:23,889
and it's gonna be used in the UK don't

00:32:19,899 --> 00:32:26,199
put your servers on AWS in California it

00:32:23,889 --> 00:32:29,559
makes no sense but the mam the European

00:32:26,199 --> 00:32:33,129
instance of AWS if you have clients both

00:32:29,559 --> 00:32:36,069
in the UK in Japan it might make sense a

00:32:33,129 --> 00:32:40,539
lot of sense to have two instances one

00:32:36,069 --> 00:32:43,329
here and one in Asia somewhere and reuse

00:32:40,539 --> 00:32:45,909
established connections already that's

00:32:43,329 --> 00:32:48,369
an easy fix that's going into your web

00:32:45,909 --> 00:32:52,779
server configuration and just changing

00:32:48,369 --> 00:32:58,149
that and restarting it so this is for

00:32:52,779 --> 00:32:59,919
standard TCP connections it also is the

00:32:58,149 --> 00:33:03,249
same thing for anything that has to do

00:32:59,919 --> 00:33:05,559
with HTTP connection because you have

00:33:03,249 --> 00:33:09,729
another three-way handshake for anything

00:33:05,559 --> 00:33:12,009
else SSL or TLS now again if you close

00:33:09,729 --> 00:33:14,109
the connection at the end the next time

00:33:12,009 --> 00:33:17,520
you do a request you will have to do a

00:33:14,109 --> 00:33:19,920
three-way handshake for TCP and for

00:33:17,520 --> 00:33:22,020
the ssl encryption however if you keep

00:33:19,920 --> 00:33:23,340
the connection open you can use

00:33:22,020 --> 00:33:26,700
something called session resumption

00:33:23,340 --> 00:33:29,550
which means you can actually resume in

00:33:26,700 --> 00:33:32,730
one less back-and-forth

00:33:29,550 --> 00:33:43,260
so you would gain here 90 milliseconds

00:33:32,730 --> 00:33:45,900
per requests and I'm guessing most of us

00:33:43,260 --> 00:33:48,720
are now using HTTPS and most of the

00:33:45,900 --> 00:33:51,180
websites I'm hoping at least given the

00:33:48,720 --> 00:33:56,160
fact that certificates are now free

00:33:51,180 --> 00:33:58,410
basically there is actually a good way

00:33:56,160 --> 00:34:01,530
of making sure that your clients are

00:33:58,410 --> 00:34:03,390
always going on HTTPS and it's a good

00:34:01,530 --> 00:34:05,040
way to make sure that they are always

00:34:03,390 --> 00:34:08,070
secure and they're not leaking any

00:34:05,040 --> 00:34:10,610
information there's a thing called HSTs

00:34:08,070 --> 00:34:12,810
HTTP strict Transfer Transport Security

00:34:10,610 --> 00:34:16,429
it's basically all you have to do is

00:34:12,810 --> 00:34:19,950
send a header on the first request and

00:34:16,429 --> 00:34:22,470
what happens is it tells your browser it

00:34:19,950 --> 00:34:25,250
tells the clients browser hey this

00:34:22,470 --> 00:34:29,399
website is HTTPS only switch now and

00:34:25,250 --> 00:34:33,120
remember it and even then if you try to

00:34:29,399 --> 00:34:35,970
type HTTP I don't know do HTTP Google

00:34:33,120 --> 00:34:38,220
com the browser will actually add an s

00:34:35,970 --> 00:34:40,710
automatically it will not allow you to

00:34:38,220 --> 00:34:44,010
go it should a to HTTP anymore for those

00:34:40,710 --> 00:34:46,340
web sites so it for example it prevents

00:34:44,010 --> 00:34:48,870
that you leak session cookies over

00:34:46,340 --> 00:34:52,350
unsecured Wi-Fi because you forgot to

00:34:48,870 --> 00:34:55,290
type yes and it's just one header that

00:34:52,350 --> 00:34:58,050
you need to add okay so we talked about

00:34:55,290 --> 00:35:02,010
TCP a lots because well that's what we

00:34:58,050 --> 00:35:04,560
usually use HTTP but there's also

00:35:02,010 --> 00:35:06,660
another thing called UDP officially it's

00:35:04,560 --> 00:35:08,880
called user Datagram protocol it's also

00:35:06,660 --> 00:35:11,790
called unreliable Datagram protocol and

00:35:08,880 --> 00:35:13,110
the reason it's called unreliable is it

00:35:11,790 --> 00:35:15,750
because it's because it is

00:35:13,110 --> 00:35:18,600
connectionless it doesn't establish a

00:35:15,750 --> 00:35:21,480
connection it doesn't do three wear

00:35:18,600 --> 00:35:24,540
handshakes it doesn't care about that it

00:35:21,480 --> 00:35:26,910
just sends packets so it has a very

00:35:24,540 --> 00:35:28,620
simple package structure it has a source

00:35:26,910 --> 00:35:30,780
port destination port which we'll get to

00:35:28,620 --> 00:35:33,540
in a minute it has a length

00:35:30,780 --> 00:35:35,430
a check so it still has that and that

00:35:33,540 --> 00:35:35,820
has contents there's nothing else in

00:35:35,430 --> 00:35:38,730
here

00:35:35,820 --> 00:35:40,290
there's no Flags there's no sequence

00:35:38,730 --> 00:35:44,250
numbers or anything like that it just

00:35:40,290 --> 00:35:46,530
sends data this means that the packet

00:35:44,250 --> 00:35:49,260
might not arrive we don't know because

00:35:46,530 --> 00:35:51,450
we don't wait for acknowledgement it

00:35:49,260 --> 00:35:54,420
also means that the second packet might

00:35:51,450 --> 00:35:56,910
arrive before the first packet so how do

00:35:54,420 --> 00:35:59,190
you deal with data that you get then

00:35:56,910 --> 00:36:01,530
well that's up to you that's basically

00:35:59,190 --> 00:36:04,740
the protocol you implement within UDP

00:36:01,530 --> 00:36:06,990
you handle some kind of sequence number

00:36:04,740 --> 00:36:09,090
in there or you decide that if it

00:36:06,990 --> 00:36:11,460
doesn't arrive within five seconds you

00:36:09,090 --> 00:36:13,530
drop it so that's the reason it's used a

00:36:11,460 --> 00:36:18,510
lot for streaming or gaming things like

00:36:13,530 --> 00:36:20,820
that now both TCP and UDP have source

00:36:18,510 --> 00:36:26,700
port and destination port now we all

00:36:20,820 --> 00:36:31,380
know destination port I think that's TCP

00:36:26,700 --> 00:36:35,160
port 80 TCP port 443 or UDP port 453 for

00:36:31,380 --> 00:36:37,950
DNS the source port however is equally

00:36:35,160 --> 00:36:40,170
important because if you connect from a

00:36:37,950 --> 00:36:44,400
client to a server three times

00:36:40,170 --> 00:36:47,700
simultaneously to port 80 and the server

00:36:44,400 --> 00:36:52,320
wants to reply well if you just sends

00:36:47,700 --> 00:36:54,840
data back then for which request was

00:36:52,320 --> 00:36:57,330
that data so what's going to happen is

00:36:54,840 --> 00:36:59,250
the client is actually when requesting

00:36:57,330 --> 00:37:01,440
when opening a TCP connection is going

00:36:59,250 --> 00:37:03,750
to use a source port it's going to say

00:37:01,440 --> 00:37:06,960
I'm sending this request to port 80

00:37:03,750 --> 00:37:09,390
I want this URL and I'm sending it from

00:37:06,960 --> 00:37:12,660
port 5,000 so if you send an answer back

00:37:09,390 --> 00:37:15,060
please send it to port 5,000 so that I

00:37:12,660 --> 00:37:19,260
know that it's the answer for this

00:37:15,060 --> 00:37:22,140
specific request if you want to see the

00:37:19,260 --> 00:37:25,200
active connections so if you want to see

00:37:22,140 --> 00:37:28,020
which ports are being used for that you

00:37:25,200 --> 00:37:29,910
can do netstat dash n and it will give

00:37:28,020 --> 00:37:32,370
you a huge list don't do it on a super

00:37:29,910 --> 00:37:34,560
busy server because you will get a

00:37:32,370 --> 00:37:39,510
massive list that's why the dash n is

00:37:34,560 --> 00:37:40,980
there so it doesn't do dns lookups all

00:37:39,510 --> 00:37:42,720
right let's say we want to fetch a

00:37:40,980 --> 00:37:44,310
website because we're all web developers

00:37:42,720 --> 00:37:47,070
so we need to fetch

00:37:44,310 --> 00:37:50,580
our website for example now TCP of

00:37:47,070 --> 00:37:52,530
course doesn't know what Cu dot B is it

00:37:50,580 --> 00:37:55,170
doesn't deal with letters it only deals

00:37:52,530 --> 00:37:58,680
with IP addresses so we need an IP

00:37:55,170 --> 00:38:00,210
address we need to look it up now we

00:37:58,680 --> 00:38:02,900
need to open a socket which we haven't

00:38:00,210 --> 00:38:06,000
discussed yet which we'll do in a minute

00:38:02,900 --> 00:38:09,120
so we'll connect tonight to this IP

00:38:06,000 --> 00:38:11,520
address on port 403 we'll send an HTTP

00:38:09,120 --> 00:38:13,920
request we'll get our data back we'll

00:38:11,520 --> 00:38:15,750
get images CSS JavaScript preferably

00:38:13,920 --> 00:38:17,280
over the same connection we'll close the

00:38:15,750 --> 00:38:18,450
connection and we'll show the web page

00:38:17,280 --> 00:38:22,350
now some of these can happen

00:38:18,450 --> 00:38:24,930
simultaneously but I want to talk

00:38:22,350 --> 00:38:27,680
quickly about DNS and I want to quickly

00:38:24,930 --> 00:38:32,280
talk quickly about opening a socket

00:38:27,680 --> 00:38:35,220
because I'm sure most of you know how

00:38:32,280 --> 00:38:37,320
DNS works but want to mention it anyway

00:38:35,220 --> 00:38:40,110
a few minor things in there so there's

00:38:37,320 --> 00:38:42,060
two types of DNS servers there is the

00:38:40,110 --> 00:38:44,310
authoritative server which is basically

00:38:42,060 --> 00:38:47,280
the server that's responsible for the

00:38:44,310 --> 00:38:49,830
domain name and then there's a recursive

00:38:47,280 --> 00:38:50,400
server the recursive server doesn't know

00:38:49,830 --> 00:38:53,100
anything

00:38:50,400 --> 00:38:55,920
it always needs to ask an authoritative

00:38:53,100 --> 00:38:58,200
server and then it keeps the answer of

00:38:55,920 --> 00:39:02,340
that server for a while it caches it

00:38:58,200 --> 00:39:04,650
defined by the time to live usually you

00:39:02,340 --> 00:39:08,940
will use a recursive server provided by

00:39:04,650 --> 00:39:12,510
your ISP so what happens is our client

00:39:08,940 --> 00:39:14,760
wants to go to our website it's gonna do

00:39:12,510 --> 00:39:17,840
a DNS lookup ask the recursive DNS

00:39:14,760 --> 00:39:20,130
server for the IP for see you bb and

00:39:17,840 --> 00:39:25,860
recursive DNS server says I haven't got

00:39:20,130 --> 00:39:28,230
a clue it even thinks Dobby e I have no

00:39:25,860 --> 00:39:30,780
idea what that is if it doesn't even

00:39:28,230 --> 00:39:32,370
know Dobby e it's gonna ask it's gonna

00:39:30,780 --> 00:39:35,700
say ok I'm going to ask

00:39:32,370 --> 00:39:37,890
Dobby e where that is I'm gonna ask it

00:39:35,700 --> 00:39:41,130
to the root DNS server now there's 13 of

00:39:37,890 --> 00:39:42,990
them worldwide there's I mean there's 13

00:39:41,130 --> 00:39:45,990
IP addresses for them there's a few more

00:39:42,990 --> 00:39:48,390
servers for them of course and so

00:39:45,990 --> 00:39:50,760
whenever you have no clue what even

00:39:48,390 --> 00:39:53,040
Dobby e means or dot code at UK means

00:39:50,760 --> 00:39:55,560
it's gonna go to root DNS server and

00:39:53,040 --> 00:39:57,900
it's gonna ask can you give me the IP 4

00:39:55,560 --> 00:40:01,530
Cu Dalby and they're gonna reply

00:39:57,900 --> 00:40:04,920
nope I don't know but I can tell you the

00:40:01,530 --> 00:40:07,830
IP for the dot de DNS server you maybe

00:40:04,920 --> 00:40:10,050
maybe you can ask them and so okay

00:40:07,830 --> 00:40:11,820
we go and ask them we ask did all be e

00:40:10,050 --> 00:40:14,100
DNS server can you give me the IP for

00:40:11,820 --> 00:40:16,020
see you it'll be and they reply nope we

00:40:14,100 --> 00:40:18,360
don't know but I can tell you the DNS

00:40:16,020 --> 00:40:20,940
server for see you Dobie you can ask

00:40:18,360 --> 00:40:23,730
them and so then we ask them and then

00:40:20,940 --> 00:40:27,450
finally we get the answer so there's a

00:40:23,730 --> 00:40:30,300
lot going on here just for one single

00:40:27,450 --> 00:40:36,810
DNS request which explains why sometimes

00:40:30,300 --> 00:40:39,510
the DNS request takes a little time so

00:40:36,810 --> 00:40:43,290
there's a couple of different ones also

00:40:39,510 --> 00:40:45,240
it's quite important there's an e record

00:40:43,290 --> 00:40:47,460
which is what we usually have which

00:40:45,240 --> 00:40:49,950
basically points to an IP there's a quad

00:40:47,460 --> 00:40:52,050
a record which points to an ipv6 address

00:40:49,950 --> 00:40:54,360
so nowadays if you're in your browser

00:40:52,050 --> 00:40:57,030
and you have an ipv6 connection you type

00:40:54,360 --> 00:40:59,130
google.com its first gonna look up ipv6

00:40:57,030 --> 00:41:00,900
address and if it doesn't get one back

00:40:59,130 --> 00:41:02,610
then its gonna look up an ipv4 address

00:41:00,900 --> 00:41:03,270
so another reason why sometimes it takes

00:41:02,610 --> 00:41:05,400
a bit longer

00:41:03,270 --> 00:41:07,950
there's a cname record which is just an

00:41:05,400 --> 00:41:10,500
alias there's MX records which define

00:41:07,950 --> 00:41:12,810
mails records mail servers

00:41:10,500 --> 00:41:15,150
there's the DNS server records and then

00:41:12,810 --> 00:41:17,370
then there's the txt records which are

00:41:15,150 --> 00:41:18,750
usually used for anti-spam and there's a

00:41:17,370 --> 00:41:23,070
whole lot more I'm not gonna get into

00:41:18,750 --> 00:41:25,620
those now two useful tools there are dig

00:41:23,070 --> 00:41:27,930
and nslookup where you can that you can

00:41:25,620 --> 00:41:30,470
use to get like completely listings of

00:41:27,930 --> 00:41:33,960
what is present on a DNS

00:41:30,470 --> 00:41:37,290
now each DNS each domain should have at

00:41:33,960 --> 00:41:39,020
least two DNS servers the order is not

00:41:37,290 --> 00:41:44,040
important it's gonna pick one randomly

00:41:39,020 --> 00:41:45,960
and DNS is udp-based now that's kind of

00:41:44,040 --> 00:41:47,850
a good thing because it means we don't

00:41:45,960 --> 00:41:51,870
need to establish a three-way handshake

00:41:47,850 --> 00:41:53,580
so that's faster but it also means we

00:41:51,870 --> 00:41:56,430
don't know if the packet arrived so we

00:41:53,580 --> 00:41:58,500
get no acknowledgement so the only way

00:41:56,430 --> 00:42:00,900
to fix that is by having a timeout after

00:41:58,500 --> 00:42:03,480
X number of seconds usually two seconds

00:42:00,900 --> 00:42:06,240
and then we try another DNS server it

00:42:03,480 --> 00:42:06,840
can work over TCP but it's not used a

00:42:06,240 --> 00:42:10,710
lot anymore

00:42:06,840 --> 00:42:11,660
most people use UDP nowadays okay so

00:42:10,710 --> 00:42:14,570
that's a bit more about

00:42:11,660 --> 00:42:17,540
DNS and then I said I want to talk about

00:42:14,570 --> 00:42:21,020
sockets quickly I'm sure everyone's seen

00:42:17,540 --> 00:42:23,930
sockets in the sense of an error on the

00:42:21,020 --> 00:42:26,840
MySQL socket or something like that this

00:42:23,930 --> 00:42:28,220
is basically the same thing with MySQL

00:42:26,840 --> 00:42:29,960
it's usually a file socket if you're

00:42:28,220 --> 00:42:32,090
connecting locally this is a network

00:42:29,960 --> 00:42:34,520
socket basically it's a layer between

00:42:32,090 --> 00:42:36,710
your application and a protocol so that

00:42:34,520 --> 00:42:38,810
you don't have to write the protocol

00:42:36,710 --> 00:42:41,330
yourself anymore so it abstracts the

00:42:38,810 --> 00:42:44,510
syntax you can switch from UDP to TCP

00:42:41,330 --> 00:42:47,480
more easily and so on and it basically

00:42:44,510 --> 00:42:50,510
converts the data you want to send to

00:42:47,480 --> 00:42:55,400
packets and vice versa that's all it

00:42:50,510 --> 00:42:58,310
does again if you want to see what is

00:42:55,400 --> 00:43:00,140
open Nets that - and we'll show you all

00:42:58,310 --> 00:43:05,180
open connections but also all open

00:43:00,140 --> 00:43:07,970
socket connections also locally so let's

00:43:05,180 --> 00:43:09,610
imagine I showed this diagram before so

00:43:07,970 --> 00:43:13,490
we're sending information to the

00:43:09,610 --> 00:43:15,140
internet we know now how we can go from

00:43:13,490 --> 00:43:18,320
our client to our router and then our

00:43:15,140 --> 00:43:22,010
router will do something it will forward

00:43:18,320 --> 00:43:23,750
it somehow but what happens on the

00:43:22,010 --> 00:43:24,490
internet I mean we all work with it

00:43:23,750 --> 00:43:27,530
every day

00:43:24,490 --> 00:43:30,680
what actually happens how is that data

00:43:27,530 --> 00:43:32,780
being transmitted so there's a protocol

00:43:30,680 --> 00:43:35,990
door they're called BGP border gateway

00:43:32,780 --> 00:43:38,230
protocol and it decides how packets are

00:43:35,990 --> 00:43:42,290
being sent from one place to the other

00:43:38,230 --> 00:43:46,460
and it uses a system called autonomous

00:43:42,290 --> 00:43:49,670
systems each network on the Internet has

00:43:46,460 --> 00:43:52,420
an autonomous system number it's just a

00:43:49,670 --> 00:43:54,920
number from one to well it used to be

00:43:52,420 --> 00:43:56,720
64,000 now it's a bit higher even

00:43:54,920 --> 00:44:01,460
because there are too many networks on

00:43:56,720 --> 00:44:03,470
the internet and BGP will actually use

00:44:01,460 --> 00:44:05,600
so-called announcements so each

00:44:03,470 --> 00:44:08,210
autonomous system will basically tell

00:44:05,600 --> 00:44:12,620
other autonomous systems hey you can

00:44:08,210 --> 00:44:15,470
reach this IP subnet through me and they

00:44:12,620 --> 00:44:17,660
will receive that and they will

00:44:15,470 --> 00:44:20,150
communicate that forward further upwards

00:44:17,660 --> 00:44:22,310
so we are announcing to those two

00:44:20,150 --> 00:44:24,650
networks and they will continue our

00:44:22,310 --> 00:44:27,770
announcement to the next one to the next

00:44:24,650 --> 00:44:30,170
to the next one so at some point every

00:44:27,770 --> 00:44:34,130
router on the internet knows where every

00:44:30,170 --> 00:44:39,410
single IP range can be found that means

00:44:34,130 --> 00:44:41,810
there's over 200,000 IP ranges in a big

00:44:39,410 --> 00:44:44,150
table in every single router on the

00:44:41,810 --> 00:44:47,930
internet just to be able to find out

00:44:44,150 --> 00:44:50,030
where to send packets to so what that

00:44:47,930 --> 00:44:52,550
means is if our client wants to go to

00:44:50,030 --> 00:44:55,730
our server our client is connected to a

00:44:52,550 --> 00:44:57,710
s number one for example that router is

00:44:55,730 --> 00:45:00,140
going to say oh you want to go to this

00:44:57,710 --> 00:45:02,120
specific IP oh I know where that is I

00:45:00,140 --> 00:45:03,770
need to send you there and then that one

00:45:02,120 --> 00:45:05,450
is going to do the same thing and gonna

00:45:03,770 --> 00:45:06,950
send you there and then finally that

00:45:05,450 --> 00:45:09,290
one's gonna say oh I know where it is

00:45:06,950 --> 00:45:11,330
it's on my local network so I'm gonna

00:45:09,290 --> 00:45:13,280
send you there and then the reply comes

00:45:11,330 --> 00:45:15,800
back and now it's perfectly possible

00:45:13,280 --> 00:45:18,950
that that router is gonna say yeah I can

00:45:15,800 --> 00:45:21,710
send you to a s five but that that link

00:45:18,950 --> 00:45:25,700
is too expensive we pay too much money

00:45:21,710 --> 00:45:27,650
for it so I'm gonna send you there so

00:45:25,700 --> 00:45:29,510
the returning packet follows a

00:45:27,650 --> 00:45:32,030
completely different path perfectly

00:45:29,510 --> 00:45:34,640
possible and actually these two routers

00:45:32,030 --> 00:45:37,460
can be in one network and so you can

00:45:34,640 --> 00:45:38,780
have multiple connections with the same

00:45:37,460 --> 00:45:43,220
network that's fine

00:45:38,780 --> 00:45:45,410
works just fine so BGP basically looks

00:45:43,220 --> 00:45:47,810
up based on the IP address it looks up

00:45:45,410 --> 00:45:50,780
the autonomous system number then picks

00:45:47,810 --> 00:45:52,430
the shortest path if there are two

00:45:50,780 --> 00:45:54,800
shortest paths then it's going to

00:45:52,430 --> 00:45:57,920
calculate it based on preference meaning

00:45:54,800 --> 00:46:05,020
usually money and then it's gonna send

00:45:57,920 --> 00:46:05,020
the packet along to the Gateway okay

00:46:06,400 --> 00:46:11,530
quickly want to talk about something

00:46:08,420 --> 00:46:14,960
about mobile devices so mobile devices

00:46:11,530 --> 00:46:17,540
switch between networks switch between

00:46:14,960 --> 00:46:19,610
towers if you have a good mobile network

00:46:17,540 --> 00:46:22,160
it's not really a problem if you have a

00:46:19,610 --> 00:46:24,470
poor mobile network it can be a problem

00:46:22,160 --> 00:46:26,510
you your IP address might change your

00:46:24,470 --> 00:46:27,860
you might have connections that drop and

00:46:26,510 --> 00:46:30,170
so on

00:46:27,860 --> 00:46:33,890
this means that three-way handshakes

00:46:30,170 --> 00:46:37,370
also on slower connections they're an

00:46:33,890 --> 00:46:38,520
issue so with people using more and more

00:46:37,370 --> 00:46:40,350
mobile devices you

00:46:38,520 --> 00:46:44,070
avoid having those three-way handshake

00:46:40,350 --> 00:46:48,240
as much as possible the best way right

00:46:44,070 --> 00:46:51,540
now is to use HTTP 2 for a number of

00:46:48,240 --> 00:46:53,850
reasons which I'll get to on the next

00:46:51,540 --> 00:46:55,830
slide the other way of course is keep

00:46:53,850 --> 00:46:58,110
your connections active as I mentioned

00:46:55,830 --> 00:47:01,320
before so make sure you you say keep a

00:46:58,110 --> 00:47:03,930
live on on Apache and nginx and put that

00:47:01,320 --> 00:47:05,970
timeout in like 15 or 60 seconds or

00:47:03,930 --> 00:47:10,140
whatever so that you don't drop

00:47:05,970 --> 00:47:12,780
connections right away another problem

00:47:10,140 --> 00:47:14,990
of course is latency connections being

00:47:12,780 --> 00:47:18,120
slow is an issue with mobile devices now

00:47:14,990 --> 00:47:20,730
HTTP to HTTPS what we use every day

00:47:18,120 --> 00:47:22,830
there's a relatively new version it's

00:47:20,730 --> 00:47:25,740
been around for a few years now but most

00:47:22,830 --> 00:47:28,050
web servers are not ready for I mean

00:47:25,740 --> 00:47:31,500
haven't been upgraded yet or have not

00:47:28,050 --> 00:47:34,380
don't have it enabled yet originally

00:47:31,500 --> 00:47:36,690
this was done made by Google what it

00:47:34,380 --> 00:47:40,140
allows you to do is it allows you to

00:47:36,690 --> 00:47:43,350
make simultaneous requests HTTP requests

00:47:40,140 --> 00:47:47,370
over one connection and get simultaneous

00:47:43,350 --> 00:47:49,200
responses as well so you can do five

00:47:47,370 --> 00:47:50,040
person requests and to get requests

00:47:49,200 --> 00:47:54,120
simultaneously

00:47:50,040 --> 00:47:56,820
it's not an issue it's binary which

00:47:54,120 --> 00:47:58,740
means it's a lot more efficient it also

00:47:56,820 --> 00:48:00,300
means that you cannot just debug it as

00:47:58,740 --> 00:48:03,330
easily because it's all in binary and

00:48:00,300 --> 00:48:06,090
it's not very visible it's not easy to

00:48:03,330 --> 00:48:08,160
read and encryption is kind of standard

00:48:06,090 --> 00:48:10,620
you can disable it but nobody does and

00:48:08,160 --> 00:48:13,410
why would you you can also even

00:48:10,620 --> 00:48:15,300
prioritize you can say okay do this post

00:48:13,410 --> 00:48:18,030
request but first to this get request

00:48:15,300 --> 00:48:19,950
because that's more important and it

00:48:18,030 --> 00:48:21,840
supports server push which is useful for

00:48:19,950 --> 00:48:24,200
notifications and stuff like that so

00:48:21,840 --> 00:48:29,580
it's a good alternative in that way for

00:48:24,200 --> 00:48:33,420
WebSocket type applications try it out

00:48:29,580 --> 00:48:37,380
deploy it getting it running very easy

00:48:33,420 --> 00:48:40,020
you add a module which you probably

00:48:37,380 --> 00:48:42,060
already have you add one line of code

00:48:40,020 --> 00:48:45,080
one line of configuration and you're

00:48:42,060 --> 00:48:47,730
done with nginx you just add HTTP to and

00:48:45,080 --> 00:48:48,720
then yeah you have to of course add an

00:48:47,730 --> 00:48:50,430
SSL

00:48:48,720 --> 00:48:52,680
certificate as well and make sure it's

00:48:50,430 --> 00:48:55,050
set up properly but that's all you have

00:48:52,680 --> 00:48:57,330
to do and all of a sudden you can have

00:48:55,050 --> 00:48:59,100
multiple connection and multiple

00:48:57,330 --> 00:49:10,740
requests over a single connection and

00:48:59,100 --> 00:49:13,260
they are a lot faster yeah some tools

00:49:10,740 --> 00:49:15,750
you might want to know on Linux

00:49:13,260 --> 00:49:17,190
these just I'm gonna put the slides

00:49:15,750 --> 00:49:19,530
online afterwards on I'm joined

00:49:17,190 --> 00:49:22,020
indefinitely so these are some of the

00:49:19,530 --> 00:49:23,940
tools you might want to get to know if

00:49:22,020 --> 00:49:26,250
you don't know them already so on Linux

00:49:23,940 --> 00:49:28,290
IP address is one of them

00:49:26,250 --> 00:49:30,900
shows you a whole lot of information I

00:49:28,290 --> 00:49:33,690
ifconfig shows you pretty much the same

00:49:30,900 --> 00:49:35,369
thing a little bit less details but then

00:49:33,690 --> 00:49:36,810
again it also shows you how many packets

00:49:35,369 --> 00:49:38,490
how many bytes have crossed the

00:49:36,810 --> 00:49:41,160
interface how many errors you have on

00:49:38,490 --> 00:49:44,070
the interface route - and shows you the

00:49:41,160 --> 00:49:46,170
routing table netstat is really useful

00:49:44,070 --> 00:49:48,450
for debugging not just what active

00:49:46,170 --> 00:49:53,520
connections you have but also if you do

00:49:48,450 --> 00:49:55,740
- P - sorry - L - P it shows you which

00:49:53,520 --> 00:49:58,230
process is listening on which port which

00:49:55,740 --> 00:50:00,330
can also help sometimes to see what is

00:49:58,230 --> 00:50:01,859
going on why am I getting errors why is

00:50:00,330 --> 00:50:07,020
it saying that the port is already in

00:50:01,859 --> 00:50:09,300
use and so on TCP dump is allows you to

00:50:07,020 --> 00:50:11,550
inspect packets and there's a very nice

00:50:09,300 --> 00:50:13,590
tool called Wireshark which allows you

00:50:11,550 --> 00:50:15,810
to actually look at every Ethernet

00:50:13,590 --> 00:50:17,640
packets see what is inside that packets

00:50:15,810 --> 00:50:21,630
and then you see an IP packet and TCP

00:50:17,640 --> 00:50:24,180
packets and even it can even decode HTTP

00:50:21,630 --> 00:50:27,540
packets and tell you okay I got this get

00:50:24,180 --> 00:50:29,670
request in this response and so on so it

00:50:27,540 --> 00:50:34,500
really helps to see what's going on on

00:50:29,670 --> 00:50:38,220
the network okay I want to illustrate

00:50:34,500 --> 00:50:41,790
why why I'm doing this talk is basically

00:50:38,220 --> 00:50:44,670
to help developers in realize what is

00:50:41,790 --> 00:50:46,440
going on on the network and I want to

00:50:44,670 --> 00:50:48,510
illustrate that with a little example

00:50:46,440 --> 00:50:51,600
that we had with a customer of ours I'm

00:50:48,510 --> 00:50:53,820
not going to name the customer they had

00:50:51,600 --> 00:50:56,220
a pretty big website at the time it was

00:50:53,820 --> 00:51:00,740
150,000 visits at the time there was a

00:50:56,220 --> 00:51:02,810
lot and they had like a ticker on there

00:51:00,740 --> 00:51:04,820
that ticker was actually an XML fee that

00:51:02,810 --> 00:51:07,300
came from a website that they also owned

00:51:04,820 --> 00:51:09,320
and it was cached for 50 minutes locally

00:51:07,300 --> 00:51:12,830
so that they wouldn't hear it all the

00:51:09,320 --> 00:51:16,089
time now there's a piece of code here so

00:51:12,830 --> 00:51:19,520
we create a cache file we check if it's

00:51:16,089 --> 00:51:21,680
older than 15 minutes then they deleted

00:51:19,520 --> 00:51:23,990
it and then they did a file get contents

00:51:21,680 --> 00:51:27,710
of the original feet put it back in the

00:51:23,990 --> 00:51:29,330
cache file parsed DeFede and so on

00:51:27,710 --> 00:51:35,000
anyone tell me what's wrong with the

00:51:29,330 --> 00:51:37,400
code what happens if you get two

00:51:35,000 --> 00:51:41,089
requests at the same time yeah it's

00:51:37,400 --> 00:51:43,310
gonna go in there twice and you might

00:51:41,089 --> 00:51:50,150
get some weird behavior very good point

00:51:43,310 --> 00:51:51,980
yeah what else is wrong exactly you

00:51:50,150 --> 00:51:53,990
delete it before you're gonna get the

00:51:51,980 --> 00:51:55,940
file so you don't know yet if that gate

00:51:53,990 --> 00:51:57,680
is gonna is gonna be successful or not

00:51:55,940 --> 00:51:59,570
there's a lot of things that are wrong

00:51:57,680 --> 00:52:02,540
with the code and I'll walk through all

00:51:59,570 --> 00:52:05,960
of them but you were getting to a good

00:52:02,540 --> 00:52:07,700
point there so the the feed was located

00:52:05,960 --> 00:52:09,410
on that machine and then the actual

00:52:07,700 --> 00:52:11,869
website was located here and was

00:52:09,410 --> 00:52:15,800
retrieving it every 15 minutes and then

00:52:11,869 --> 00:52:18,680
that datacenter lost power power failure

00:52:15,800 --> 00:52:20,900
and first couple of minutes everything

00:52:18,680 --> 00:52:23,089
was fine because the feed was still

00:52:20,900 --> 00:52:25,400
cached and then the feed expired the

00:52:23,089 --> 00:52:27,760
cache expires and now it's trying to

00:52:25,400 --> 00:52:30,020
fetch that URL

00:52:27,760 --> 00:52:35,450
everybody's going into that if structure

00:52:30,020 --> 00:52:37,010
and well you time out after 60 seconds

00:52:35,450 --> 00:52:40,670
because of course that's the default in

00:52:37,010 --> 00:52:42,970
PHP really every every visitor on that

00:52:40,670 --> 00:52:47,270
busy web site waiting 60 seconds no

00:52:42,970 --> 00:52:49,250
refresh refresh my chrome is stuck I'm

00:52:47,270 --> 00:52:51,170
opening a new tab I'm opening a new

00:52:49,250 --> 00:52:53,150
browser so more load more load motor

00:52:51,170 --> 00:52:55,310
load until at some point they were using

00:52:53,150 --> 00:52:57,770
Apache they hit the maximum connection

00:52:55,310 --> 00:52:59,060
limit and now it's not just that single

00:52:57,770 --> 00:53:01,550
page that's down it's their entire

00:52:59,060 --> 00:53:04,040
website that was them and so we get

00:53:01,550 --> 00:53:07,310
called in like we look at the website

00:53:04,040 --> 00:53:09,530
and there's 400 Apache processes zero

00:53:07,310 --> 00:53:12,260
load because they're all just sitting

00:53:09,530 --> 00:53:13,230
there waiting for some file to be

00:53:12,260 --> 00:53:17,820
returned

00:53:13,230 --> 00:53:21,140
so what's the issue well oops yeah this

00:53:17,820 --> 00:53:24,090
is the fix they came up with by the way

00:53:21,140 --> 00:53:26,670
they made a time out of five seconds and

00:53:24,090 --> 00:53:28,380
then yeah that doesn't really fix the

00:53:26,670 --> 00:53:30,780
problem does it matter

00:53:28,380 --> 00:53:32,310
in the mean time hmm what is what else

00:53:30,780 --> 00:53:34,440
is wrong here well of course we

00:53:32,310 --> 00:53:35,940
shouldn't unlink because it's possible

00:53:34,440 --> 00:53:38,790
that fifteen people going to the knife

00:53:35,940 --> 00:53:40,350
structure and then if you unlink what

00:53:38,790 --> 00:53:42,990
someone else just did a file put

00:53:40,350 --> 00:53:45,360
contents everyone else is going back

00:53:42,990 --> 00:53:45,690
into the earth structure so that's a bad

00:53:45,360 --> 00:53:48,300
idea

00:53:45,690 --> 00:53:49,950
now the other thing is if we have a

00:53:48,300 --> 00:53:58,380
timeout what this file get contents

00:53:49,950 --> 00:54:02,130
returned any ideas it returns false so

00:53:58,380 --> 00:54:04,080
we we would actually take false and put

00:54:02,130 --> 00:54:06,750
that in the cache file that's not going

00:54:04,080 --> 00:54:09,420
to parse very well of course so we want

00:54:06,750 --> 00:54:12,090
to somehow assign that to a variable in

00:54:09,420 --> 00:54:15,480
check for it and so on then another

00:54:12,090 --> 00:54:17,730
thing is we're doing parse XML every

00:54:15,480 --> 00:54:21,600
single time now you might want to do

00:54:17,730 --> 00:54:23,670
that once and then put that content into

00:54:21,600 --> 00:54:27,930
the cash-flow different thing of course

00:54:23,670 --> 00:54:30,330
there's one more thing here file get

00:54:27,930 --> 00:54:32,670
contents and file put contents in PHP

00:54:30,330 --> 00:54:34,740
are not atomic operations so you can

00:54:32,670 --> 00:54:36,570
actually do file put contents with two

00:54:34,740 --> 00:54:39,390
people at the same time and that's gonna

00:54:36,570 --> 00:54:41,460
cause the file to be corrupted unless

00:54:39,390 --> 00:54:43,440
it's a very small file but if the file

00:54:41,460 --> 00:54:45,390
is huge and it cannot do it in one right

00:54:43,440 --> 00:54:47,370
it's actually going to corrupt the file

00:54:45,390 --> 00:54:48,630
plus somebody could be doing file put

00:54:47,370 --> 00:54:50,400
contents someone else could be reading

00:54:48,630 --> 00:54:53,340
the file it's also going to be a

00:54:50,400 --> 00:54:56,700
corrupted file so that's kind of an

00:54:53,340 --> 00:54:59,460
issue as well basically here you're

00:54:56,700 --> 00:55:01,140
relying on the user it's the user that's

00:54:59,460 --> 00:55:02,760
going to initiate this piece of code and

00:55:01,140 --> 00:55:07,350
that's a bad idea especially with

00:55:02,760 --> 00:55:09,270
concurrent requests so it would be

00:55:07,350 --> 00:55:12,360
better in this case to run that cron job

00:55:09,270 --> 00:55:14,550
every 15 minutes or so now if we're

00:55:12,360 --> 00:55:18,360
talking about network resources in your

00:55:14,550 --> 00:55:21,660
code use timeouts for everything whether

00:55:18,360 --> 00:55:26,010
that's an F open or a curl request or a

00:55:21,660 --> 00:55:27,690
soap request or whatever it is use it

00:55:26,010 --> 00:55:30,990
timeout don't rely on the standard

00:55:27,690 --> 00:55:34,050
timeout of 60 seconds in this case if

00:55:30,990 --> 00:55:37,920
you own that other data source just

00:55:34,050 --> 00:55:40,290
through the opposite direction so get

00:55:37,920 --> 00:55:53,190
the get the feed instead of pushing it

00:55:40,290 --> 00:55:55,260
the other way okay now if you want to

00:55:53,190 --> 00:55:58,680
ever simulate that like how does my

00:55:55,260 --> 00:56:00,720
website behave when we have a network

00:55:58,680 --> 00:56:03,240
issue there's a couple of tools that

00:56:00,720 --> 00:56:06,090
might help there's one tool that's

00:56:03,240 --> 00:56:09,810
called wonnum it's written by an Indian

00:56:06,090 --> 00:56:12,150
company it's basically a visual tool and

00:56:09,810 --> 00:56:14,910
you can just say oh I want to introduce

00:56:12,150 --> 00:56:16,380
five percent packet loss on the link and

00:56:14,910 --> 00:56:19,290
I want to see what happens or I want to

00:56:16,380 --> 00:56:21,410
introduce a two sec two second delay

00:56:19,290 --> 00:56:25,920
everywhere or two second delay

00:56:21,410 --> 00:56:30,060
specifically on that XML feed this is a

00:56:25,920 --> 00:56:31,920
very interesting tool to use and it it

00:56:30,060 --> 00:56:33,420
makes you actually prepare for what

00:56:31,920 --> 00:56:36,120
could possibly go wrong

00:56:33,420 --> 00:56:37,980
on linux there's a couple of tools for

00:56:36,120 --> 00:56:42,870
it you can just use standard IP tables

00:56:37,980 --> 00:56:45,960
and just say for example drop point one

00:56:42,870 --> 00:56:49,050
and that basically means 10% of all

00:56:45,960 --> 00:56:51,960
packets are now being dropped or you can

00:56:49,050 --> 00:56:54,000
use TC which is traffic control and say

00:56:51,960 --> 00:56:56,550
okay I want a delay of 50 milliseconds

00:56:54,000 --> 00:56:59,670
with a variance of 20 milliseconds and

00:56:56,550 --> 00:57:01,980
so then you can see how it behaves if

00:56:59,670 --> 00:57:06,210
your network connection is erratic or

00:57:01,980 --> 00:57:08,310
slow and so on there's a very nice tool

00:57:06,210 --> 00:57:10,560
actually called Comcast which is

00:57:08,310 --> 00:57:12,420
described as simulating shitty network

00:57:10,560 --> 00:57:15,630
connections so you can build better

00:57:12,420 --> 00:57:17,940
systems a really nice tool that allows

00:57:15,630 --> 00:57:21,000
you to actually simulate what could go

00:57:17,940 --> 00:57:23,070
wrong if any thing that you connect to

00:57:21,000 --> 00:57:30,960
or that your users need to connect to

00:57:23,070 --> 00:57:32,760
doesn't behave as expected yeah I just

00:57:30,960 --> 00:57:34,920
want to show a few more funny pictures

00:57:32,760 --> 00:57:39,000
of course so if it looks like that your

00:57:34,920 --> 00:57:39,780
data room doesn't show very well right

00:57:39,000 --> 00:57:41,670
but

00:57:39,780 --> 00:57:45,270
before and after it looks a little bit

00:57:41,670 --> 00:57:46,290
better now finally last slide just in

00:57:45,270 --> 00:57:49,080
time

00:57:46,290 --> 00:57:52,590
failover or disaster recovery are great

00:57:49,080 --> 00:57:55,020
if they work but when was the last time

00:57:52,590 --> 00:57:57,510
you tested it of course

00:57:55,020 --> 00:57:59,250
yeah if it doesn't work it's it should

00:57:57,510 --> 00:58:01,080
be top priority like if you have a

00:57:59,250 --> 00:58:02,910
master slave setup and you wanted to on

00:58:01,080 --> 00:58:04,170
my scale you wanted to failover

00:58:02,910 --> 00:58:05,640
automatically or you have a network

00:58:04,170 --> 00:58:08,430
setup that needs to failover

00:58:05,640 --> 00:58:10,920
automatically fix it right away I mean

00:58:08,430 --> 00:58:12,990
that includes Network failover anything

00:58:10,920 --> 00:58:15,330
really like even a system restore from

00:58:12,990 --> 00:58:19,160
backup it should be fixed it should be

00:58:15,330 --> 00:58:19,160

YouTube URL: https://www.youtube.com/watch?v=t0JdGOYuQzc


