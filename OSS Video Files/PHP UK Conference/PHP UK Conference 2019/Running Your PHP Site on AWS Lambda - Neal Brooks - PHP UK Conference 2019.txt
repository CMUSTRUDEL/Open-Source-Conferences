Title: Running Your PHP Site on AWS Lambda - Neal Brooks - PHP UK Conference 2019
Publication date: 2019-03-22
Playlist: PHP UK Conference 2019
Description: 
	APIs and microservices are how we build modern web applications and serverless technologies make this easy. This session will show you how serverless applications are built and how you can leverage your PHP skills to build APIs of all shapes and sizes. We will cover how to use your current knowledge to build applications in PHP within Apache OpenWhisk, leveraging the API Gateway to build robust APIs quickly and easily. By the end of the session, youâ€™ll be well placed to design and build your own applications that take full advantage of the power of serverless technologies.
Captions: 
	00:00:00,240 --> 00:00:08,220
I know what you're thinking who is this

00:00:06,390 --> 00:00:11,250
overweight beardy man who's replaced Rob

00:00:08,220 --> 00:00:13,860
so let me tell you I work for a company

00:00:11,250 --> 00:00:16,980
called my builder and we are passionate

00:00:13,860 --> 00:00:19,980
about connecting homeowners with great

00:00:16,980 --> 00:00:22,859
builders and we help great builders

00:00:19,980 --> 00:00:26,099
succeed with their businesses and we are

00:00:22,859 --> 00:00:27,599
hiring so if you like what I'm doing

00:00:26,099 --> 00:00:29,220
today if you like the look of me and you

00:00:27,599 --> 00:00:31,199
want to join a team that's this

00:00:29,220 --> 00:00:33,059
close-knit and supportive and passionate

00:00:31,199 --> 00:00:34,530
about what they do come and talk to me

00:00:33,059 --> 00:00:38,219
or tweet me or whatever afterwards and

00:00:34,530 --> 00:00:39,960
we will get talking so a note about the

00:00:38,219 --> 00:00:42,780
code there is gonna be some code in this

00:00:39,960 --> 00:00:44,760
presentation but we're thinking more

00:00:42,780 --> 00:00:46,559
about the theory of things so you don't

00:00:44,760 --> 00:00:48,930
need to follow along you don't need to

00:00:46,559 --> 00:00:51,300
understand things the code examples are

00:00:48,930 --> 00:00:54,600
gonna be symphony I know some of you

00:00:51,300 --> 00:00:58,559
might not be your bag so much but that's

00:00:54,600 --> 00:01:02,039
the way I roll so back on track running

00:00:58,559 --> 00:01:04,320
your PHP project on a torus Lamba or as

00:01:02,039 --> 00:01:09,630
I like to call it coupling yourself to a

00:01:04,320 --> 00:01:11,729
ver ws for fun and profit so why would

00:01:09,630 --> 00:01:14,189
we want to do this let's think about the

00:01:11,729 --> 00:01:16,409
evolution of a typical kind of small to

00:01:14,189 --> 00:01:19,229
medium sized web app you might start

00:01:16,409 --> 00:01:20,850
with an ec2 box which is running

00:01:19,229 --> 00:01:24,150
everything and later on your finger

00:01:20,850 --> 00:01:26,610
let's put on an RDS database and then

00:01:24,150 --> 00:01:28,200
you find out that you can get free SSL

00:01:26,610 --> 00:01:31,049
certificates with AWS

00:01:28,200 --> 00:01:32,549
so you think fantastic let's do that but

00:01:31,049 --> 00:01:33,990
then that comes with a caveat that it

00:01:32,549 --> 00:01:36,750
has to be attached to a load balancer

00:01:33,990 --> 00:01:38,640
which cost you $20 a month so then

00:01:36,750 --> 00:01:40,110
you're paying 240 dollars a year you

00:01:38,640 --> 00:01:43,070
might as well have just bought the SSL

00:01:40,110 --> 00:01:46,500
certificate in the first place Wow

00:01:43,070 --> 00:01:48,750
so bit later on as your site starts

00:01:46,500 --> 00:01:50,479
getting traffic you think well I need to

00:01:48,750 --> 00:01:53,579
scale so you end up adding more and more

00:01:50,479 --> 00:01:56,070
ec2 boxes behind your behind your load

00:01:53,579 --> 00:01:59,070
balancer this is all costing you a lot

00:01:56,070 --> 00:02:00,780
of money wouldn't be great if we just

00:01:59,070 --> 00:02:01,680
get rid of a load of that we still need

00:02:00,780 --> 00:02:03,540
to pay for the datastore

00:02:01,680 --> 00:02:04,950
at the moment but if we could get rid of

00:02:03,540 --> 00:02:06,259
most of that cost that would be

00:02:04,950 --> 00:02:09,660
fantastic

00:02:06,259 --> 00:02:12,260
well let's introduce functions as a

00:02:09,660 --> 00:02:16,280
service also known

00:02:12,260 --> 00:02:20,299
service and AWS cease offering of that

00:02:16,280 --> 00:02:23,930
is lambda so the way to think of it is

00:02:20,299 --> 00:02:25,640
as a server that doesn't exist until you

00:02:23,930 --> 00:02:27,620
need it until you make a request to it

00:02:25,640 --> 00:02:31,370
and then it goes away again it doesn't

00:02:27,620 --> 00:02:32,959
exist until it's needed again so let's

00:02:31,370 --> 00:02:35,239
think about the anatomy of how that

00:02:32,959 --> 00:02:38,629
might look you start off with a

00:02:35,239 --> 00:02:40,099
container and inside that is some

00:02:38,629 --> 00:02:42,769
bootstrap code and that sits there

00:02:40,099 --> 00:02:44,359
waiting for the request to come in when

00:02:42,769 --> 00:02:47,090
a request comes in that brick spec code

00:02:44,359 --> 00:02:48,440
calls your application code this is when

00:02:47,090 --> 00:02:50,720
you start getting charged when your

00:02:48,440 --> 00:02:53,030
application code is running and then

00:02:50,720 --> 00:02:54,560
when that request goes back you stop

00:02:53,030 --> 00:02:55,940
getting charged you've stops paying for

00:02:54,560 --> 00:02:57,379
that but that bootstrap still that

00:02:55,940 --> 00:03:00,139
container is still bootstraps and still

00:02:57,379 --> 00:03:02,840
waiting for the next request the trouble

00:03:00,139 --> 00:03:05,599
is running PHP on lambda was a complete

00:03:02,840 --> 00:03:07,310
pain in the ass until quite recently so

00:03:05,599 --> 00:03:09,139
a lot of articles on the Internet all

00:03:07,310 --> 00:03:11,720
revolved around the same thing it said

00:03:09,139 --> 00:03:14,120
right start a lambda function create a

00:03:11,720 --> 00:03:16,419
lambda function in one of the supported

00:03:14,120 --> 00:03:20,859
languages at the time which was go or

00:03:16,419 --> 00:03:23,980
JavaScript or Java or C sharp or Python

00:03:20,859 --> 00:03:26,269
see it create maybe a jeaious Handler

00:03:23,980 --> 00:03:28,970
and when the request came in it would

00:03:26,269 --> 00:03:31,940
call a PHP binary which you have to

00:03:28,970 --> 00:03:35,329
supply which then calls your application

00:03:31,940 --> 00:03:38,900
code and then returns back to the back

00:03:35,329 --> 00:03:40,819
to the client at the end of last year

00:03:38,900 --> 00:03:48,709
AWS introduced something called layers

00:03:40,819 --> 00:03:50,629
and a bunch of documentation about it it

00:03:48,709 --> 00:03:53,329
kind of opened up for the possibility to

00:03:50,629 --> 00:03:55,370
have different programming languages any

00:03:53,329 --> 00:03:59,180
programming programming language you

00:03:55,370 --> 00:04:00,590
want running on AWS lambda there are

00:03:59,180 --> 00:04:02,530
some things to note here

00:04:00,590 --> 00:04:05,389
you can have up to five different layers

00:04:02,530 --> 00:04:07,639
running in a lambda function the total

00:04:05,389 --> 00:04:10,579
unzipped code of everything has to be

00:04:07,639 --> 00:04:12,349
less than 250 megabytes and by default

00:04:10,579 --> 00:04:14,720
you get a thousand concurrent

00:04:12,349 --> 00:04:17,539
invocations of lambda per region less

00:04:14,720 --> 00:04:19,780
across all of your functions you can

00:04:17,539 --> 00:04:23,330
increase that if your ax if your traffic

00:04:19,780 --> 00:04:25,550
warrants it but it's kind of a procedure

00:04:23,330 --> 00:04:26,270
in place to stop you exponentially

00:04:25,550 --> 00:04:29,810
running up

00:04:26,270 --> 00:04:31,340
your AWS bill let's think about how that

00:04:29,810 --> 00:04:35,120
might look now so this is what we had

00:04:31,340 --> 00:04:38,990
previously and we've now got this this

00:04:35,120 --> 00:04:40,849
their bootstrapping is now including the

00:04:38,990 --> 00:04:42,110
PHP layer and we've got a little handler

00:04:40,849 --> 00:04:44,539
that we can shim in there as well and

00:04:42,110 --> 00:04:47,030
this is sitting waiting for the request

00:04:44,539 --> 00:04:50,270
to come in so our request comes in now

00:04:47,030 --> 00:04:54,620
we only paid for our framework code or

00:04:50,270 --> 00:04:56,180
our application code and everything gets

00:04:54,620 --> 00:04:58,699
sent back to the client and we stop

00:04:56,180 --> 00:05:00,050
paying for that at that point trouble

00:04:58,699 --> 00:05:03,199
ease it's still a pain in the ass you

00:05:00,050 --> 00:05:07,060
have to supply the layer and you have to

00:05:03,199 --> 00:05:11,960
supply the bootstrap well what we have

00:05:07,060 --> 00:05:14,240
conflict from over there right there is

00:05:11,960 --> 00:05:17,560
a website breath that our sakes now

00:05:14,240 --> 00:05:20,150
breath is French for brief it kind of

00:05:17,560 --> 00:05:22,009
references the the the brief nature of

00:05:20,150 --> 00:05:26,349
lambdas that exists only when you need

00:05:22,009 --> 00:05:31,360
it very very very kind of ephemeral and

00:05:26,349 --> 00:05:35,259
very time constrained now breaths goal

00:05:31,360 --> 00:05:38,599
is to make running PHP apps on lambda

00:05:35,259 --> 00:05:40,909
simple how do they achieve that well it

00:05:38,599 --> 00:05:43,430
simplifies problems by removing choices

00:05:40,909 --> 00:05:46,490
you don't get the kitchen sink thrown in

00:05:43,430 --> 00:05:49,400
what we do is we give you simple and

00:05:46,490 --> 00:05:52,009
familiar solutions so that you can

00:05:49,400 --> 00:05:53,509
extend them if you want but things will

00:05:52,009 --> 00:05:55,750
always run the same and they should be

00:05:53,509 --> 00:05:58,789
stable and they should be predictable

00:05:55,750 --> 00:06:02,110
and also empowered by sharing knowledge

00:05:58,789 --> 00:06:05,169
BAM which is a way basically of saying

00:06:02,110 --> 00:06:06,919
we don't want to hide complexity between

00:06:05,169 --> 00:06:09,259
abstractions we'll give you what you

00:06:06,919 --> 00:06:12,409
need and it's well documented and that's

00:06:09,259 --> 00:06:13,639
and that's what you get so what does

00:06:12,409 --> 00:06:16,909
bref actually do well that's a very good

00:06:13,639 --> 00:06:20,440
question I'm so glad you asked it bref

00:06:16,909 --> 00:06:24,729
provides simple and clear documentation

00:06:20,440 --> 00:06:29,479
it supplies cake layers even not cake

00:06:24,729 --> 00:06:33,849
and it aims to support the frameworks

00:06:29,479 --> 00:06:36,320
now PHP plain old PHP runs on breadth

00:06:33,849 --> 00:06:37,729
laravel runs on breadth symfony runs on

00:06:36,320 --> 00:06:38,980
breadth I know these for a fact because

00:06:37,729 --> 00:06:41,650
I've done them

00:06:38,980 --> 00:06:44,110
I believe we've got slim working with it

00:06:41,650 --> 00:06:47,440
and there's no reason why I like Magento

00:06:44,110 --> 00:06:48,310
and PHP BB or anything else wouldn't be

00:06:47,440 --> 00:06:50,830
able to work with it now

00:06:48,310 --> 00:06:52,390
previously on before the layers was

00:06:50,830 --> 00:06:54,880
announced it would have been a nightmare

00:06:52,390 --> 00:06:56,350
trying to do that but now we can do that

00:06:54,880 --> 00:06:58,840
we can there's no reason why we wouldn't

00:06:56,350 --> 00:07:01,990
be able to support any framework to be

00:06:58,840 --> 00:07:03,820
honest and we have something called Sam

00:07:01,990 --> 00:07:06,310
which is an AWS package which deals with

00:07:03,820 --> 00:07:07,720
the actual deployment and I like to

00:07:06,310 --> 00:07:11,740
think of this as a guy called Sam who's

00:07:07,720 --> 00:07:13,840
deploying some lunch somewhere so what

00:07:11,740 --> 00:07:17,070
Sam does is takes what we have here this

00:07:13,840 --> 00:07:21,400
this architecture and it pushes it up to

00:07:17,070 --> 00:07:24,460
AWS and put some API gateway front in on

00:07:21,400 --> 00:07:27,130
it as well now what you can do is a

00:07:24,460 --> 00:07:29,590
texture SSL certificate to API gateway

00:07:27,130 --> 00:07:30,970
and you've actually got your free SSL

00:07:29,590 --> 00:07:33,750
that we've all been at you know the holy

00:07:30,970 --> 00:07:38,800
grail that we were we were looking for

00:07:33,750 --> 00:07:40,630
so let's dive in I've got here just a

00:07:38,800 --> 00:07:42,790
very simple hello world up PHP which is

00:07:40,630 --> 00:07:45,910
going to echo out hello world and give

00:07:42,790 --> 00:07:48,550
me some PHP info so I'm going to require

00:07:45,910 --> 00:07:50,770
the breath project and go back well

00:07:48,550 --> 00:07:52,630
nothing's actually changed so I need to

00:07:50,770 --> 00:07:56,710
run the init scripts this vendor Biff

00:07:52,630 --> 00:07:58,120
end up being the breath in it if we have

00:07:56,710 --> 00:08:00,310
a look at the output here it's saying to

00:07:58,120 --> 00:08:02,440
me what kind of lambda function do I

00:08:00,310 --> 00:08:04,810
want to create well I want to be able to

00:08:02,440 --> 00:08:07,690
look at this in my browser I want to go

00:08:04,810 --> 00:08:09,610
to the PHP info and see what's happening

00:08:07,690 --> 00:08:13,030
and see that hello world so I'm going to

00:08:09,610 --> 00:08:15,130
select number one and you can see that

00:08:13,030 --> 00:08:19,210
it's created for me and index dot PHP

00:08:15,130 --> 00:08:20,800
and a template dot yeah Mel file and it

00:08:19,210 --> 00:08:22,600
delete the UH nextdoor PHP I don't on it

00:08:20,800 --> 00:08:24,760
and let's look at the the template DM

00:08:22,600 --> 00:08:26,620
it's big and it's scary so the thing to

00:08:24,760 --> 00:08:29,290
do is go straight into it and see what's

00:08:26,620 --> 00:08:31,030
going on let me see here we've got a

00:08:29,290 --> 00:08:33,190
resources section which has got my

00:08:31,030 --> 00:08:35,919
function here and I've got a function

00:08:33,190 --> 00:08:38,320
name and I've got a pointer to an index

00:08:35,919 --> 00:08:40,120
dot PHP file obviously I've deleted that

00:08:38,320 --> 00:08:41,740
index dot PHP so I need to point that to

00:08:40,120 --> 00:08:44,770
my hello world and we're just gonna

00:08:41,740 --> 00:08:46,420
change the name of the lambda function

00:08:44,770 --> 00:08:50,190
that it's this that it's going to create

00:08:46,420 --> 00:08:50,190
as well so breath hello world

00:08:50,450 --> 00:08:53,990
if we look here as well we've got the

00:08:52,550 --> 00:08:56,480
layer configuration your breath has

00:08:53,990 --> 00:08:59,450
automatically created this for me but

00:08:56,480 --> 00:09:01,130
it's put the layer in this reference in

00:08:59,450 --> 00:09:05,180
u.s. East one so I'm going to change

00:09:01,130 --> 00:09:06,769
that to you West one regions will come

00:09:05,180 --> 00:09:09,110
back and haunt you at some point they do

00:09:06,769 --> 00:09:10,579
with me all the time so just always be

00:09:09,110 --> 00:09:12,139
aware that if anything goes wrong it's

00:09:10,579 --> 00:09:14,839
probably because you've nekkid up your

00:09:12,139 --> 00:09:18,050
your regions and if we look here we've

00:09:14,839 --> 00:09:20,870
got a couple of routing definitions here

00:09:18,050 --> 00:09:22,730
so we've got the the route path it's

00:09:20,870 --> 00:09:24,199
just that de system API gateway anything

00:09:22,730 --> 00:09:26,269
that matches the route path is going to

00:09:24,199 --> 00:09:28,279
be handled by this function and again

00:09:26,269 --> 00:09:31,040
HTTP subpaths it's not really relevant

00:09:28,279 --> 00:09:34,910
here but for applications with routing

00:09:31,040 --> 00:09:36,529
and multiple URLs it's all--it's what it

00:09:34,910 --> 00:09:39,740
will do is match that and send that all

00:09:36,529 --> 00:09:43,850
to your application as well so how do we

00:09:39,740 --> 00:09:48,440
test locally I'm going to install the

00:09:43,850 --> 00:09:50,449
AWS Sam CLI using homebrew by the way

00:09:48,440 --> 00:09:52,760
Linux use us if you haven't used Linux

00:09:50,449 --> 00:09:54,890
brew yet I suggest you do that it's a

00:09:52,760 --> 00:09:58,880
really really good method of using

00:09:54,890 --> 00:10:00,380
homebrew stuff on Linux so I'm just

00:09:58,880 --> 00:10:04,250
going to tap the a double yes tap and

00:10:00,380 --> 00:10:07,490
then install the Sam CLI once that's

00:10:04,250 --> 00:10:12,260
done I can start the CLI start the same

00:10:07,490 --> 00:10:14,240
local API in my in my project folder and

00:10:12,260 --> 00:10:17,540
it tells me that I need docker ok so I

00:10:14,240 --> 00:10:20,990
need to start docker now if I start Sam

00:10:17,540 --> 00:10:23,570
local again it tells me it's running

00:10:20,990 --> 00:10:27,380
locally on port 3000 fantastic I can go

00:10:23,570 --> 00:10:28,000
now so there in my browser and see what

00:10:27,380 --> 00:10:30,260
I get

00:10:28,000 --> 00:10:34,459
I've got an error okay there's something

00:10:30,260 --> 00:10:35,870
that I need to do here clearly and if I

00:10:34,459 --> 00:10:37,670
look at a con so it's told me like I've

00:10:35,870 --> 00:10:38,959
got an invalid LAN name but I know that

00:10:37,670 --> 00:10:41,209
that layers valid that's what breadth

00:10:38,959 --> 00:10:45,050
provided me and I know that that layer

00:10:41,209 --> 00:10:49,430
is a valid layer so what's happened it's

00:10:45,050 --> 00:10:51,980
regions my AWS profile is set to u.s.

00:10:49,430 --> 00:10:55,579
East one by default and I forgot to set

00:10:51,980 --> 00:10:58,550
it as West one so I got two things I can

00:10:55,579 --> 00:11:00,410
do I can either set my profile default

00:10:58,550 --> 00:11:01,550
or I can just tag on the region at the

00:11:00,410 --> 00:11:03,270
end here this is the simplest thing to

00:11:01,550 --> 00:11:06,390
do just to get things running

00:11:03,270 --> 00:11:09,029
this time when I go to that URL in my

00:11:06,390 --> 00:11:10,500
browser the console output tells me it's

00:11:09,029 --> 00:11:11,640
going to download the layer and it's

00:11:10,500 --> 00:11:13,800
going to build the image so the first

00:11:11,640 --> 00:11:15,959
time you access it it takes maybe a

00:11:13,800 --> 00:11:19,260
minute or so to get going to download

00:11:15,959 --> 00:11:20,880
and build the image and we can see here

00:11:19,260 --> 00:11:23,970
I've got a lambda esque environment

00:11:20,880 --> 00:11:27,300
running locally with my hello world and

00:11:23,970 --> 00:11:30,480
my my PHP in photo it's not that

00:11:27,300 --> 00:11:32,250
impressive is it to be honest so let's

00:11:30,480 --> 00:11:35,700
think now about how we can deploy and

00:11:32,250 --> 00:11:36,149
actually make that run somewhere in the

00:11:35,700 --> 00:11:40,410
cloud

00:11:36,149 --> 00:11:43,380
on top of AWS is stack first thing I

00:11:40,410 --> 00:11:45,450
need to do is create a deployment bucket

00:11:43,380 --> 00:11:47,600
this is where the artifacts are going to

00:11:45,450 --> 00:11:50,220
go I only need to do this once per

00:11:47,600 --> 00:11:54,029
lambda function I'm creating or per

00:11:50,220 --> 00:11:55,470
project I'm creating so once of run

00:11:54,029 --> 00:11:57,480
there it comes back this oh hey look

00:11:55,470 --> 00:11:59,630
I've made the bucket for you your breath

00:11:57,480 --> 00:12:02,640
hello world is is right there

00:11:59,630 --> 00:12:04,709
now I can copy and paste the deployment

00:12:02,640 --> 00:12:07,560
commands from the breath documentation

00:12:04,709 --> 00:12:11,850
on the website so the first one is to

00:12:07,560 --> 00:12:14,970
create the package which is going to be

00:12:11,850 --> 00:12:16,649
so via template file think of the output

00:12:14,970 --> 00:12:19,620
template file has kind of being a bit

00:12:16,649 --> 00:12:21,240
like composer clock it's gonna lock

00:12:19,620 --> 00:12:23,700
things down it's gonna say this is a

00:12:21,240 --> 00:12:26,490
deployment configuration that we're

00:12:23,700 --> 00:12:31,950
going to use an s3 bucket of course is

00:12:26,490 --> 00:12:36,390
the s3 bucket I've just created when I

00:12:31,950 --> 00:12:37,770
run it what happens is Sam CLI gives me

00:12:36,390 --> 00:12:40,589
a bunch of information it says yeah I've

00:12:37,770 --> 00:12:44,700
done that and I've created the the stack

00:12:40,589 --> 00:12:46,529
yeah more file and if I go into my s3

00:12:44,700 --> 00:12:48,810
console I can see that I've got the

00:12:46,529 --> 00:12:50,339
bucket created and I've got that

00:12:48,810 --> 00:12:55,470
artifact that it was just telling me

00:12:50,339 --> 00:12:58,160
about there quite helpfully Sam also

00:12:55,470 --> 00:13:00,270
says hailer run this cloud formation

00:12:58,160 --> 00:13:03,480
command and then we'll actually deploy

00:13:00,270 --> 00:13:05,250
the thing so I'm going to take that put

00:13:03,480 --> 00:13:07,079
in the name of the stack that I want to

00:13:05,250 --> 00:13:10,950
create which is breath HelloWorld and

00:13:07,079 --> 00:13:13,199
I'm gonna run that and Sam tells me it's

00:13:10,950 --> 00:13:15,590
got an error something to do with

00:13:13,199 --> 00:13:17,600
capabilities I am I don't care

00:13:15,590 --> 00:13:20,270
I'm gonna go back to the breath website

00:13:17,600 --> 00:13:23,590
and see what paper what come on I

00:13:20,270 --> 00:13:26,090
actually should have run so brief

00:13:23,590 --> 00:13:27,680
documentation so slow that other command

00:13:26,090 --> 00:13:30,770
that Sam gives you isn't going to work

00:13:27,680 --> 00:13:33,650
this is the one that you need to do so

00:13:30,770 --> 00:13:37,550
Sam deploy blah blah blah again stack

00:13:33,650 --> 00:13:40,310
name ref hello world this time and we

00:13:37,550 --> 00:13:41,870
create it I've got another error errors

00:13:40,310 --> 00:13:43,310
you're gonna run into errors the first

00:13:41,870 --> 00:13:45,529
time you do this thing and these are all

00:13:43,310 --> 00:13:46,910
errors that I genuinely made yesterday

00:13:45,529 --> 00:13:50,420
when I was put in putting things

00:13:46,910 --> 00:13:52,220
together you're gonna run into errors at

00:13:50,420 --> 00:13:53,900
this time at this point I'm bored of

00:13:52,220 --> 00:13:56,570
doing things in the console I want

00:13:53,900 --> 00:13:58,850
something visual so I can go into cloud

00:13:56,570 --> 00:14:01,279
formation I can see that something's

00:13:58,850 --> 00:14:03,470
gone wrong and I can drill down into the

00:14:01,279 --> 00:14:05,630
details and it says the bucket is in the

00:14:03,470 --> 00:14:08,779
wrong region I've made that same mistake

00:14:05,630 --> 00:14:11,480
again ok so what I decided to do at this

00:14:08,779 --> 00:14:13,520
point was delete the stack delete the

00:14:11,480 --> 00:14:15,260
bucket and start again this time

00:14:13,520 --> 00:14:16,790
creating the bucket in the correct

00:14:15,260 --> 00:14:18,589
region and it was at this point I

00:14:16,790 --> 00:14:22,430
decided to put the region in my AWS

00:14:18,589 --> 00:14:25,760
profile in my credentials file so now I

00:14:22,430 --> 00:14:29,300
can create the the bucket and I can do

00:14:25,760 --> 00:14:31,490
package and I can do the deploy again

00:14:29,300 --> 00:14:33,290
using the the command that's actually on

00:14:31,490 --> 00:14:35,600
the breath website rather than what Sam

00:14:33,290 --> 00:14:39,020
tells me to do and this time I've got a

00:14:35,600 --> 00:14:41,180
stack created how cool is that all right

00:14:39,020 --> 00:14:42,830
you know impressed ok so this time in

00:14:41,180 --> 00:14:45,070
cloud formation let's have a look what

00:14:42,830 --> 00:14:48,640
we've got let's explore what's happened

00:14:45,070 --> 00:14:51,830
so I've got the stack is created if I go

00:14:48,640 --> 00:14:53,600
to API gateway you can see I've got this

00:14:51,830 --> 00:14:55,760
whole thing that's been created here for

00:14:53,600 --> 00:14:57,470
me and we've got all the way here so

00:14:55,760 --> 00:14:58,940
we've got the API gateway stuff and then

00:14:57,470 --> 00:15:01,220
right at the end right on the right-hand

00:14:58,940 --> 00:15:03,560
side here we've got this is where it's

00:15:01,220 --> 00:15:06,500
going to proxy through to your lambda

00:15:03,560 --> 00:15:08,380
function we've created which is kind of

00:15:06,500 --> 00:15:10,880
similar to what we had in this diagram

00:15:08,380 --> 00:15:12,589
alright so we've got we don't have as

00:15:10,880 --> 00:15:13,700
much information on the API gateway side

00:15:12,589 --> 00:15:15,320
and we've got more information on the

00:15:13,700 --> 00:15:18,740
land of stuff on this diagram but it's

00:15:15,320 --> 00:15:21,830
the same sort of thing now if I go to my

00:15:18,740 --> 00:15:25,160
lambda console I can see that I've got

00:15:21,830 --> 00:15:29,710
this this functions being created I've

00:15:25,160 --> 00:15:32,500
got an inline code editor with my PHP nn

00:15:29,710 --> 00:15:35,300
and if I look at the layers

00:15:32,500 --> 00:15:38,450
configuration here I can see that I've

00:15:35,300 --> 00:15:42,950
got that layer in the EU West one region

00:15:38,450 --> 00:15:47,240
that I the irn the URL for that was

00:15:42,950 --> 00:15:49,580
copied from the brief website and if I

00:15:47,240 --> 00:15:51,650
go to API gateway configuration here

00:15:49,580 --> 00:15:54,590
I've got a couple of down the bottom

00:15:51,650 --> 00:15:57,590
here I've got a couple of endpoints that

00:15:54,590 --> 00:16:00,170
I can go to in my browser so if I open

00:15:57,590 --> 00:16:02,390
up look at this I've got that hello

00:16:00,170 --> 00:16:05,390
world application with PHP info running

00:16:02,390 --> 00:16:08,330
remotely on a server that existed just

00:16:05,390 --> 00:16:10,240
to return that PHP info and doesn't

00:16:08,330 --> 00:16:12,530
exist anymore until i refresh the page

00:16:10,240 --> 00:16:14,270
and if I keep refreshing the page it

00:16:12,530 --> 00:16:15,830
brings that that server back up sends

00:16:14,270 --> 00:16:20,690
the response back and then goes away

00:16:15,830 --> 00:16:23,810
again the logs from that go to cloud

00:16:20,690 --> 00:16:25,400
watch so I can open up cloud watch an

00:16:23,810 --> 00:16:27,710
off road refreshed a few times I kind of

00:16:25,400 --> 00:16:29,030
had a look at what was going on so I've

00:16:27,710 --> 00:16:31,760
got all of these requests and they're

00:16:29,030 --> 00:16:34,220
kind of there they're running for like

00:16:31,760 --> 00:16:38,570
the duration for these flitters between

00:16:34,220 --> 00:16:40,030
what six milliseconds and 100 and 280 I

00:16:38,570 --> 00:16:43,400
think milliseconds is the longest say

00:16:40,030 --> 00:16:45,800
the first one the longest one that's 218

00:16:43,400 --> 00:16:48,800
milliseconds was the first request where

00:16:45,800 --> 00:16:51,530
it had to build the the container and do

00:16:48,800 --> 00:16:54,020
the bootstrapping and then get PHP fpm

00:16:51,530 --> 00:16:55,580
up and running so that's why it takes a

00:16:54,020 --> 00:16:56,690
little bit longer but the rest of them

00:16:55,580 --> 00:16:59,030
they're they they're kind of quick

00:16:56,690 --> 00:17:01,730
they're not they're not ridiculously

00:16:59,030 --> 00:17:03,160
fast just yet but they're you know

00:17:01,730 --> 00:17:06,290
they're they're quite reasonable I think

00:17:03,160 --> 00:17:07,730
and if we look here so I just want to

00:17:06,290 --> 00:17:09,530
draw your attention to this we've got

00:17:07,730 --> 00:17:12,050
this right at the beginning of the log

00:17:09,530 --> 00:17:14,510
we've got this entry about PHP fpm

00:17:12,050 --> 00:17:16,220
coming up and being ready to handle

00:17:14,510 --> 00:17:19,220
connections that's the only time that

00:17:16,220 --> 00:17:20,630
appears in that log that means that kind

00:17:19,220 --> 00:17:22,850
of confirms that what we were saying

00:17:20,630 --> 00:17:25,339
about once it's bootstrap

00:17:22,850 --> 00:17:27,740
it's their your bootstrap is working and

00:17:25,339 --> 00:17:29,720
that's still running and waiting for the

00:17:27,740 --> 00:17:34,330
requests so they it doesn't need to

00:17:29,720 --> 00:17:34,330
reboot strap PHP fpm with each request

00:17:34,390 --> 00:17:40,100
now what about if you've got your own

00:17:36,920 --> 00:17:42,080
domain name that you want to use on that

00:17:40,100 --> 00:17:43,250
because let's be honest that's that's an

00:17:42,080 --> 00:17:46,250
ugly

00:17:43,250 --> 00:17:47,570
URL right and we've got this weird prop

00:17:46,250 --> 00:17:47,870
thing at the end of it what's that all

00:17:47,570 --> 00:17:49,610
about

00:17:47,870 --> 00:17:53,210
well that's something that API gateway

00:17:49,610 --> 00:17:54,409
uses it's called the stage name but I

00:17:53,210 --> 00:17:58,940
don't like that I don't want to I don't

00:17:54,409 --> 00:18:01,190
want to have that in my URLs now let's

00:17:58,940 --> 00:18:03,049
assume for example that you really like

00:18:01,190 --> 00:18:05,659
cats and each time you do a presentation

00:18:03,049 --> 00:18:07,640
if you're obsessed with cats and each

00:18:05,659 --> 00:18:10,309
time you do a presentation you set up a

00:18:07,640 --> 00:18:12,230
new domain name that's something to do

00:18:10,309 --> 00:18:14,120
with cats and for the sake of this one

00:18:12,230 --> 00:18:16,940
you've set up a website called kitty

00:18:14,120 --> 00:18:21,549
quotes net which which combines your

00:18:16,940 --> 00:18:23,720
your passion for puns and kittens and

00:18:21,549 --> 00:18:25,250
what we want to do is just kind of as a

00:18:23,720 --> 00:18:28,730
proof of concept we want to use that

00:18:25,250 --> 00:18:30,110
domain name for hello world and it's

00:18:28,730 --> 00:18:32,450
hatched out to our hello world landed

00:18:30,110 --> 00:18:35,059
we've just created what I'm going to do

00:18:32,450 --> 00:18:37,460
is in API gateway I'm going to click

00:18:35,059 --> 00:18:39,289
custom domain names it's kind of a kind

00:18:37,460 --> 00:18:41,120
of simple when when you realize it so

00:18:39,289 --> 00:18:43,610
you couldn't custom domain names and you

00:18:41,120 --> 00:18:46,730
put in there hello world doc kitty

00:18:43,610 --> 00:18:49,340
quotes dotnet as the domain name and I

00:18:46,730 --> 00:18:52,429
can select what SSL certificate I want

00:18:49,340 --> 00:18:55,730
to use but it has to be in the US East

00:18:52,429 --> 00:18:57,679
one region if you have certificates in

00:18:55,730 --> 00:18:59,960
any other region it won't work you have

00:18:57,679 --> 00:19:04,070
to transfer them to US East one to make

00:18:59,960 --> 00:19:05,330
this work so quick save all right okay

00:19:04,070 --> 00:19:08,030
so it takes a little while to get that

00:19:05,330 --> 00:19:10,429
all running in the meantime we can make

00:19:08,030 --> 00:19:14,210
a cup of tea and we can then add some

00:19:10,429 --> 00:19:16,549
base path mappings now what that does is

00:19:14,210 --> 00:19:19,330
says look when something comes into QT

00:19:16,549 --> 00:19:22,159
quotes net so that that route path I

00:19:19,330 --> 00:19:24,919
want the destination to be that that

00:19:22,159 --> 00:19:30,650
stack that I've created and we're going

00:19:24,919 --> 00:19:34,309
to send it to that prod stage then I've

00:19:30,650 --> 00:19:37,309
got my cloud from URL that it's created

00:19:34,309 --> 00:19:39,590
and I can take that I can copy that and

00:19:37,309 --> 00:19:43,309
I can go to my route 53 configuration

00:19:39,590 --> 00:19:47,270
and I can create an alias I'm going to

00:19:43,309 --> 00:19:50,240
create an a record there as an alias and

00:19:47,270 --> 00:19:51,289
just paste that in you can do a cname if

00:19:50,240 --> 00:19:54,190
you want to do a cname but the

00:19:51,289 --> 00:19:57,370
difference as far as I'm aware between

00:19:54,190 --> 00:19:59,409
in an a record alias and a cname is that

00:19:57,370 --> 00:20:01,750
with a cname you get charged per lookup

00:19:59,409 --> 00:20:03,580
whereas with aliases you don't so you

00:20:01,750 --> 00:20:07,360
can save a little bit more a little bit

00:20:03,580 --> 00:20:09,370
more money in that respect this time if

00:20:07,360 --> 00:20:13,240
I go to hello world Kitty quotes there I

00:20:09,370 --> 00:20:15,129
have got a fancy green padlock in my in

00:20:13,240 --> 00:20:17,200
my address bar and I've got my hello

00:20:15,129 --> 00:20:20,200
world and I've got my PHP info running

00:20:17,200 --> 00:20:24,070
again this is this is totally ephemeral

00:20:20,200 --> 00:20:26,889
so so that server only exists when the

00:20:24,070 --> 00:20:30,850
request is being made and it goes away

00:20:26,889 --> 00:20:35,769
again which is I think that's kind of

00:20:30,850 --> 00:20:38,289
cool so we've just gone through quite a

00:20:35,769 --> 00:20:41,559
bit there so let's let's recap what

00:20:38,289 --> 00:20:44,169
we've done we've looked at how functions

00:20:41,559 --> 00:20:46,029
as a service can simplify our

00:20:44,169 --> 00:20:48,340
architecture and save us a bit of money

00:20:46,029 --> 00:20:51,399
we're not paying for a server to run

00:20:48,340 --> 00:20:54,759
24/7 we don't have to pay for a load

00:20:51,399 --> 00:20:56,200
balancer you know we're only paying for

00:20:54,759 --> 00:20:59,440
stuff that we're actually using when

00:20:56,200 --> 00:21:03,820
we're using it we've installed the AWS

00:20:59,440 --> 00:21:06,159
Sam CLI we've added breadth into our

00:21:03,820 --> 00:21:09,610
project we've had a quick look at the

00:21:06,159 --> 00:21:12,789
template UML file we've tested with the

00:21:09,610 --> 00:21:14,620
same local we've created our deployment

00:21:12,789 --> 00:21:16,179
bucket we have packaged and deployed our

00:21:14,620 --> 00:21:18,639
application we've had a look at the

00:21:16,179 --> 00:21:20,919
stack that it's created we've tested the

00:21:18,639 --> 00:21:22,480
application we've had a look at the logs

00:21:20,919 --> 00:21:23,649
and we've added a custom domain and now

00:21:22,480 --> 00:21:25,769
I didn't take long until we've done a

00:21:23,649 --> 00:21:28,029
lot there but it didn't take long at all

00:21:25,769 --> 00:21:32,169
we've also run into a few errors on the

00:21:28,029 --> 00:21:34,809
way but what about fully featured

00:21:32,169 --> 00:21:37,419
websites is it possible to take them you

00:21:34,809 --> 00:21:38,590
know normal website you kind of web

00:21:37,419 --> 00:21:41,039
applications that you're running your

00:21:38,590 --> 00:21:47,080
blogs and you know your business

00:21:41,039 --> 00:21:50,950
storefront and run that on lambda let's

00:21:47,080 --> 00:21:52,809
find out I now imagine that a website

00:21:50,950 --> 00:21:55,679
called kitty quote starting that exists

00:21:52,809 --> 00:22:00,190
and this is the local version of it

00:21:55,679 --> 00:22:02,169
running on the local web server so we've

00:22:00,190 --> 00:22:04,629
what we've got here is some content

00:22:02,169 --> 00:22:06,369
returned from a database and we've got

00:22:04,629 --> 00:22:07,660
some CSS we've got some Java scripts

00:22:06,369 --> 00:22:12,400
we've got some

00:22:07,660 --> 00:22:16,930
uploaded images of kittens we've got a

00:22:12,400 --> 00:22:21,040
back-end system with which is secured

00:22:16,930 --> 00:22:24,450
with it's actually with Symphony's user

00:22:21,040 --> 00:22:27,580
management and we've got an admin panel

00:22:24,450 --> 00:22:31,980
which is from a which from a community

00:22:27,580 --> 00:22:35,500
bundle and we've got an uploading

00:22:31,980 --> 00:22:40,240
mechanism from a plugin for the admin

00:22:35,500 --> 00:22:42,460
panel so let's let's have a look at what

00:22:40,240 --> 00:22:47,140
we can do to convert this we've got some

00:22:42,460 --> 00:22:50,320
things to remember though only the temp

00:22:47,140 --> 00:22:52,540
directory on lamda is writable

00:22:50,320 --> 00:22:54,430
so I can't put things where I'm used to

00:22:52,540 --> 00:22:57,610
putting them I'm gonna run into problems

00:22:54,430 --> 00:23:00,520
and we also have to remember that the

00:22:57,610 --> 00:23:03,340
total unzip size of the code and the

00:23:00,520 --> 00:23:08,070
layers has to be less than 250 megabytes

00:23:03,340 --> 00:23:12,280
so with those two red lines in place

00:23:08,070 --> 00:23:15,850
let's see what we can do I'm going to

00:23:12,280 --> 00:23:18,940
require breath and I'm gonna initialize

00:23:15,850 --> 00:23:21,220
it and again this is going to be an HTTP

00:23:18,940 --> 00:23:24,910
application that I'm gonna go to in my

00:23:21,220 --> 00:23:28,540
browser so I'm going to choose option

00:23:24,910 --> 00:23:30,400
number one there if we look at the

00:23:28,540 --> 00:23:31,680
template yeah Mille what I've done here

00:23:30,400 --> 00:23:36,040
I've made a couple of adjustments

00:23:31,680 --> 00:23:37,840
already so I'm changing the function

00:23:36,040 --> 00:23:41,380
name to breath Kitty quotes in the

00:23:37,840 --> 00:23:42,850
lambda console on the website I want to

00:23:41,380 --> 00:23:46,810
be able to identify this so I'm collect

00:23:42,850 --> 00:23:50,200
ref kitty cows I am pointing to the

00:23:46,810 --> 00:23:53,020
public index dot PHP which is the

00:23:50,200 --> 00:23:56,290
symphonie default entry point to the

00:23:53,020 --> 00:23:58,510
application and I've increased the

00:23:56,290 --> 00:24:02,860
memory size that's allowed for my for my

00:23:58,510 --> 00:24:04,900
lambda function to run by default I

00:24:02,860 --> 00:24:07,090
think lambda sets it to 128 megabytes

00:24:04,900 --> 00:24:08,740
which then means it takes forever to

00:24:07,090 --> 00:24:12,400
return a request and you're paying for

00:24:08,740 --> 00:24:14,200
more time on the lambda it seems kind of

00:24:12,400 --> 00:24:15,880
counterintuitive but you if you increase

00:24:14,200 --> 00:24:17,860
the memory size you pay for more memory

00:24:15,880 --> 00:24:20,410
but you pay for less time to run that

00:24:17,860 --> 00:24:21,840
and so you end up saving a bit of money

00:24:20,410 --> 00:24:24,669
in that respect

00:24:21,840 --> 00:24:27,640
and I've changed the name of the

00:24:24,669 --> 00:24:29,200
resource to web application the reason

00:24:27,640 --> 00:24:33,130
for that will become clear a bit later

00:24:29,200 --> 00:24:35,860
on but let's move on from there so I'm

00:24:33,130 --> 00:24:38,710
gonna start the API again so I can just

00:24:35,860 --> 00:24:42,460
test this locally and straightaway I've

00:24:38,710 --> 00:24:44,080
got an exception and the reason being is

00:24:42,460 --> 00:24:45,820
because I forgot the very thing that I

00:24:44,080 --> 00:24:49,179
told you to remember which is that only

00:24:45,820 --> 00:24:51,070
the temp file system is writable so the

00:24:49,179 --> 00:24:55,000
thing to do is go into my kernel dot PHP

00:24:51,070 --> 00:24:56,770
and configure the framework to write to

00:24:55,000 --> 00:24:58,480
temp instead we've got access to this

00:24:56,770 --> 00:25:01,690
environment variable which is am i

00:24:58,480 --> 00:25:04,620
running on lambda so I can just override

00:25:01,690 --> 00:25:09,250
they get cache direction directory

00:25:04,620 --> 00:25:11,980
method in the kernel and say if I'm on

00:25:09,250 --> 00:25:14,020
lambda then we put the cache into into

00:25:11,980 --> 00:25:16,480
temp and we can do the same thing with

00:25:14,020 --> 00:25:19,270
the logs as well but maybe it's better

00:25:16,480 --> 00:25:23,429
to use monologue or something to push

00:25:19,270 --> 00:25:23,429
your logs somewhere else for this

00:25:25,440 --> 00:25:34,380
trouble ease now I'm getting a PDO

00:25:29,320 --> 00:25:34,380
exception it can't find the PDO driver

00:25:34,679 --> 00:25:39,970
which is obviously kind of a problem

00:25:36,940 --> 00:25:42,070
if you've got a database backed so I you

00:25:39,970 --> 00:25:45,549
need to be able to access stuff from the

00:25:42,070 --> 00:25:48,220
database right now the reason for that I

00:25:45,549 --> 00:25:50,110
need to go over there again the reason

00:25:48,220 --> 00:25:51,940
for that is because breadth tries to

00:25:50,110 --> 00:25:54,940
keep everything very very small and very

00:25:51,940 --> 00:25:57,190
very optimized and very very fast it

00:25:54,940 --> 00:25:59,320
doesn't want to make choices for you it

00:25:57,190 --> 00:26:01,750
wants you to make these decisions so

00:25:59,320 --> 00:26:03,400
we've got some extensions are enabled by

00:26:01,750 --> 00:26:05,440
default they're installed and enabled

00:26:03,400 --> 00:26:08,200
and we've got PDO dam we've got PDO

00:26:05,440 --> 00:26:10,409
SQLite and one or two other bits and

00:26:08,200 --> 00:26:13,120
pieces that are going to be kind of a

00:26:10,409 --> 00:26:16,150
kind of requisite for a lot of

00:26:13,120 --> 00:26:17,799
applications and we've got some

00:26:16,150 --> 00:26:21,039
extensions which are installed but

00:26:17,799 --> 00:26:26,080
disabled and one of those is the my SQL

00:26:21,039 --> 00:26:28,750
PDO driver so how do i how do I make

00:26:26,080 --> 00:26:31,570
that work what it's documented on the

00:26:28,750 --> 00:26:33,610
breath website all you need to do is

00:26:31,570 --> 00:26:38,380
create a PHP

00:26:33,610 --> 00:26:42,310
/ Kampf D directory and inside there put

00:26:38,380 --> 00:26:47,860
PHP Deranian and in say extension equals

00:26:42,310 --> 00:26:49,720
PDO mysql simple and what happens is

00:26:47,860 --> 00:26:54,610
things start working then but now we

00:26:49,720 --> 00:26:56,640
need to set up a database connection if

00:26:54,610 --> 00:27:01,540
you remember like currently our our

00:26:56,640 --> 00:27:07,200
architecture looks like this what we

00:27:01,540 --> 00:27:09,490
want to do is connect to our datastore

00:27:07,200 --> 00:27:13,270
optionally we can pull it inside of EBC

00:27:09,490 --> 00:27:17,110
and we'll talk about VP C's in a bit VPC

00:27:13,270 --> 00:27:19,060
would obviously increase security by

00:27:17,110 --> 00:27:21,790
making sure that only the lambda can

00:27:19,060 --> 00:27:23,110
ever connect that database at the moment

00:27:21,790 --> 00:27:24,370
there are performance implications with

00:27:23,110 --> 00:27:27,490
that and we'll talk about that a bit

00:27:24,370 --> 00:27:30,640
later on now what we can do in the

00:27:27,490 --> 00:27:33,400
template demo we can define environment

00:27:30,640 --> 00:27:36,250
variables so I can't just put the

00:27:33,400 --> 00:27:38,710
database URL in there but that's not

00:27:36,250 --> 00:27:41,410
necessarily a good idea before you do

00:27:38,710 --> 00:27:42,730
that let's think about where this file

00:27:41,410 --> 00:27:44,290
is going to end up are we going to

00:27:42,730 --> 00:27:45,820
commit this file are we going to end up

00:27:44,290 --> 00:27:48,610
putting our database username and

00:27:45,820 --> 00:27:50,140
password in a file that we're going to

00:27:48,610 --> 00:27:52,180
push on github and then maybe make the

00:27:50,140 --> 00:27:55,900
public at some point we don't want to do

00:27:52,180 --> 00:27:59,920
that so it might be a better option to

00:27:55,900 --> 00:28:03,130
put some kind of placeholder into the

00:27:59,920 --> 00:28:06,280
template UML file and then just define

00:28:03,130 --> 00:28:10,360
their actual variable later on in the in

00:28:06,280 --> 00:28:15,820
the lambda application console so now on

00:28:10,360 --> 00:28:21,340
Sam local I have got my database backed

00:28:15,820 --> 00:28:23,440
content coming out and I've also got the

00:28:21,340 --> 00:28:27,130
CSS and the and the J s and the images

00:28:23,440 --> 00:28:29,920
all working fine so let's let's think

00:28:27,130 --> 00:28:33,760
about deploying this so I'm going to

00:28:29,920 --> 00:28:35,860
create my bucket and I'm going to

00:28:33,760 --> 00:28:37,390
package it and this time I'm making sure

00:28:35,860 --> 00:28:41,950
that the bucket and everything is all in

00:28:37,390 --> 00:28:44,470
the region I want it to be and then I'm

00:28:41,950 --> 00:28:47,110
going to deploy it using that deploy

00:28:44,470 --> 00:28:49,470
deploy command that was on the

00:28:47,110 --> 00:28:54,070
website I'm completely ignoring Sam's

00:28:49,470 --> 00:28:57,580
suggestion for this now but I've got an

00:28:54,070 --> 00:29:00,760
error okay let's see what the error is

00:28:57,580 --> 00:29:02,230
when I drill into it in the in the cloud

00:29:00,760 --> 00:29:05,260
formation events

00:29:02,230 --> 00:29:09,700
it says the unzip size must be smaller

00:29:05,260 --> 00:29:12,220
than 150 megabytes great okay so let's

00:29:09,700 --> 00:29:14,470
think about what we're trying to do what

00:29:12,220 --> 00:29:17,500
can we do we can remove maybe the dev

00:29:14,470 --> 00:29:20,620
dependencies and symfony the full set

00:29:17,500 --> 00:29:22,350
framework comes with a bunch of stuff

00:29:20,620 --> 00:29:24,580
that you can install with yarn for

00:29:22,350 --> 00:29:27,580
running your own core stuff and

00:29:24,580 --> 00:29:29,020
generating your assets I don't need the

00:29:27,580 --> 00:29:32,260
node modules when I'm on production so I

00:29:29,020 --> 00:29:34,750
can delete that but the problem is that

00:29:32,260 --> 00:29:37,179
doesn't go far enough the the deployment

00:29:34,750 --> 00:29:39,100
package is still too big so we think

00:29:37,179 --> 00:29:41,169
okay let's remove the cache before they

00:29:39,100 --> 00:29:43,120
apply and let's think about removing my

00:29:41,169 --> 00:29:45,820
phpstorm configuration let's think about

00:29:43,120 --> 00:29:47,710
removing the trouble is these are all

00:29:45,820 --> 00:29:50,470
necessary you need all of these on your

00:29:47,710 --> 00:29:52,630
local development so this this isn't the

00:29:50,470 --> 00:29:55,980
right solution for that and currently

00:29:52,630 --> 00:30:00,160
we're kind of discussing the best way of

00:29:55,980 --> 00:30:02,169
trying to attack this I'll say actually

00:30:00,160 --> 00:30:03,490
if you're deploying from continuous

00:30:02,169 --> 00:30:04,960
integration or something you don't have

00:30:03,490 --> 00:30:08,580
this problem because things like your

00:30:04,960 --> 00:30:11,500
phpstorm configuration isn't in your CI

00:30:08,580 --> 00:30:14,710
and even neither is your your get

00:30:11,500 --> 00:30:16,390
working configuration so you don't you

00:30:14,710 --> 00:30:18,070
don't need that you can just pull and do

00:30:16,390 --> 00:30:19,210
a composer install with the optimizer

00:30:18,070 --> 00:30:21,640
autoloader and

00:30:19,210 --> 00:30:23,380
and everything and that and you'll never

00:30:21,640 --> 00:30:28,030
get the node modules and that will all

00:30:23,380 --> 00:30:29,500
be fine it'll be much much smaller at

00:30:28,030 --> 00:30:33,040
the moment if you're going to deploy a

00:30:29,500 --> 00:30:35,640
locally from a laptop what you can do

00:30:33,040 --> 00:30:39,700
and currently the way we document it is

00:30:35,640 --> 00:30:42,150
to make a copy of your project get rid

00:30:39,700 --> 00:30:44,890
of what you don't need and upload the

00:30:42,150 --> 00:30:47,020
optimized version so with that why I've

00:30:44,890 --> 00:30:49,240
created just a very simple bash class a

00:30:47,020 --> 00:30:50,679
simple it looks scary but it's a bash

00:30:49,240 --> 00:30:54,669
script that I run from the different

00:30:50,679 --> 00:30:57,340
directories copy everything apart from

00:30:54,669 --> 00:30:59,230
the the hidden files as it cops

00:30:57,340 --> 00:31:00,400
everything and then remove the stuff

00:30:59,230 --> 00:31:05,169
that's in the cache

00:31:00,400 --> 00:31:06,940
remove the node modules install only the

00:31:05,169 --> 00:31:09,580
basic stuff and optimize it at the same

00:31:06,940 --> 00:31:10,720
time warm up the cache now that so

00:31:09,580 --> 00:31:12,429
that's a very small performance

00:31:10,720 --> 00:31:13,870
optimization that we can make by warming

00:31:12,429 --> 00:31:18,100
the cache but it means that we don't

00:31:13,870 --> 00:31:20,380
have to warm cold cash on that first

00:31:18,100 --> 00:31:23,340
request on lander it's pre-warmed and

00:31:20,380 --> 00:31:26,169
then we package and then we deploy and

00:31:23,340 --> 00:31:29,529
things start working now because I'm

00:31:26,169 --> 00:31:33,610
making code edits in my editor in one

00:31:29,529 --> 00:31:35,679
directory and that deploy scripts once

00:31:33,610 --> 00:31:37,539
I've created it I can just keep hitting

00:31:35,679 --> 00:31:42,279
deploy and it will do everything for me

00:31:37,539 --> 00:31:45,730
it's just created my stack and I can go

00:31:42,279 --> 00:31:47,710
to in my browser and I've got my

00:31:45,730 --> 00:31:50,110
database back to content but what I

00:31:47,710 --> 00:31:52,419
don't have which is what we had with Sam

00:31:50,110 --> 00:31:56,590
local was all of the assets the the

00:31:52,419 --> 00:31:58,929
images and the the CSS and the jas and

00:31:56,590 --> 00:32:00,460
that's that's kind of I stopped using

00:31:58,929 --> 00:32:03,130
Sam local at that point because it's

00:32:00,460 --> 00:32:06,940
it's similar to lambda but it's not

00:32:03,130 --> 00:32:11,409
quite similar enough so we need to fix

00:32:06,940 --> 00:32:14,890
this the first thing we're going to do

00:32:11,409 --> 00:32:17,260
is we're going to put our CSS and

00:32:14,890 --> 00:32:19,510
JavaScript on a CDN which if you're

00:32:17,260 --> 00:32:20,830
going down the service route you

00:32:19,510 --> 00:32:23,140
probably should be doing anyway and I'm

00:32:20,830 --> 00:32:26,049
sure many of you are probably already

00:32:23,140 --> 00:32:28,480
using CD ends right now it's well

00:32:26,049 --> 00:32:30,279
documented in symphony it's well

00:32:28,480 --> 00:32:32,500
documented in laravel and probably any

00:32:30,279 --> 00:32:34,210
other framework that you want to use how

00:32:32,500 --> 00:32:35,950
to achieve this so let's get a copy and

00:32:34,210 --> 00:32:37,480
paste some code and I'm gonna say like

00:32:35,950 --> 00:32:39,880
I've got this bucket set up and I've

00:32:37,480 --> 00:32:42,580
uploaded those assets to that bucket so

00:32:39,880 --> 00:32:44,440
this is where you need to go and then

00:32:42,580 --> 00:32:51,279
when I recompile the front-end assets

00:32:44,440 --> 00:32:54,520
and deploy I've got my CSS back and I

00:32:51,279 --> 00:32:57,610
can log in the trouble is my back end is

00:32:54,520 --> 00:33:00,370
looking a little bit weary I don't have

00:32:57,610 --> 00:33:06,460
those back-end US assets that I thought

00:33:00,370 --> 00:33:09,549
I'd have so what do I need to do I need

00:33:06,460 --> 00:33:12,640
to tell my PHP templates where to look

00:33:09,549 --> 00:33:14,230
for those assets as well once I've done

00:33:12,640 --> 00:33:17,590
that and deployed I've got the

00:33:14,230 --> 00:33:19,450
easyadmin back there's something quite

00:33:17,590 --> 00:33:23,860
obvious missing though which is these

00:33:19,450 --> 00:33:25,750
images and we'll get to that in just a

00:33:23,860 --> 00:33:29,110
bit but first of all as I'm clicking

00:33:25,750 --> 00:33:30,580
around I get kicked out and it happens

00:33:29,110 --> 00:33:33,130
it happens as I'm trying to do stuff I

00:33:30,580 --> 00:33:35,260
get kicked the reason for that is

00:33:33,130 --> 00:33:37,809
because I've got my lambda function here

00:33:35,260 --> 00:33:43,030
and my sessions exist on that lambda

00:33:37,809 --> 00:33:44,559
function now there's no guarantee when I

00:33:43,030 --> 00:33:46,870
make another request I'm going to hit

00:33:44,559 --> 00:33:48,520
that same lambda container and my I

00:33:46,870 --> 00:33:51,309
might have a session on a different

00:33:48,520 --> 00:33:53,679
container and I need some way of being

00:33:51,309 --> 00:33:55,600
able to combine the two and of course

00:33:53,679 --> 00:33:59,980
the one of the options is to put the

00:33:55,600 --> 00:34:01,600
sessions into the data store again it's

00:33:59,980 --> 00:34:05,700
well documented for laravel it's well

00:34:01,600 --> 00:34:10,389
documented for symphony and it's the

00:34:05,700 --> 00:34:13,690
theory and the the kind of methods of

00:34:10,389 --> 00:34:16,240
doing so don't really change so I am

00:34:13,690 --> 00:34:19,109
just going to copy and paste the

00:34:16,240 --> 00:34:22,629
symphony configuration for it

00:34:19,109 --> 00:34:28,750
and of course I need to make the change

00:34:22,629 --> 00:34:33,429
on the on the database itself so I've

00:34:28,750 --> 00:34:36,220
created migration but now I'm I've got

00:34:33,429 --> 00:34:40,300
this problem I need to run that on my

00:34:36,220 --> 00:34:42,040
remote database so at the sessions table

00:34:40,300 --> 00:34:44,619
so I can store sessions in there how do

00:34:42,040 --> 00:34:46,359
I do that how do I need to configure

00:34:44,619 --> 00:34:49,139
that connection locally so I can run

00:34:46,359 --> 00:34:54,159
this locally or can I run that on the

00:34:49,139 --> 00:34:58,030
lander environment well we need to be

00:34:54,159 --> 00:35:00,130
able to run console commands in template

00:34:58,030 --> 00:35:02,109
yeah Mille and now it should become

00:35:00,130 --> 00:35:03,700
clear why I renamed that resource to web

00:35:02,109 --> 00:35:06,430
application before because now I've

00:35:03,700 --> 00:35:10,060
added another resource called console

00:35:06,430 --> 00:35:13,390
and I'm including that first layer the

00:35:10,060 --> 00:35:15,730
speech piece in point 3 layer and I'm

00:35:13,390 --> 00:35:20,770
also adding a second layer here which

00:35:15,730 --> 00:35:24,060
gives me access to the console and what

00:35:20,770 --> 00:35:26,740
I've also done is put that database

00:35:24,060 --> 00:35:27,850
environment variable into a global

00:35:26,740 --> 00:35:31,180
variable that makes

00:35:27,850 --> 00:35:33,910
variable accessible to both the web app

00:35:31,180 --> 00:35:35,980
and to the console app so I can move

00:35:33,910 --> 00:35:41,230
that out and only to find that in one

00:35:35,980 --> 00:35:45,130
place now I need to run the command so

00:35:41,230 --> 00:35:48,790
locally I can do vendor bean breath CLI

00:35:45,130 --> 00:35:52,830
and then the name of the function I want

00:35:48,790 --> 00:35:56,470
to invoke and I put a Double Dash and

00:35:52,830 --> 00:35:58,560
then the name of the command I want to

00:35:56,470 --> 00:36:02,050
run which is migrations migrate force

00:35:58,560 --> 00:36:03,850
and what happens is it comes back and it

00:36:02,050 --> 00:36:07,810
tells me I've done this change to your

00:36:03,850 --> 00:36:09,340
database we are all good which is great

00:36:07,810 --> 00:36:12,310
I can click around and I can do stuff

00:36:09,340 --> 00:36:14,410
and I'm not going to get kicked anymore

00:36:12,310 --> 00:36:16,000
and it also means that when I redeploy

00:36:14,410 --> 00:36:17,410
and my users aren't gonna get kicked

00:36:16,000 --> 00:36:19,360
because their sessions are just going to

00:36:17,410 --> 00:36:22,630
be retrieved back from that that

00:36:19,360 --> 00:36:27,940
database table again so now let's think

00:36:22,630 --> 00:36:32,130
about the images that we're missing what

00:36:27,940 --> 00:36:35,110
I have done now is we've got this this

00:36:32,130 --> 00:36:38,770
architecture and what I have done is

00:36:35,110 --> 00:36:40,150
added a file store just an s3 bucket and

00:36:38,770 --> 00:36:42,280
I've already moved all of the images

00:36:40,150 --> 00:36:46,240
across to there but I need to reference

00:36:42,280 --> 00:36:47,290
that within the application so I can

00:36:46,240 --> 00:36:51,070
just use again

00:36:47,290 --> 00:36:52,810
environment variables and say this is

00:36:51,070 --> 00:36:56,740
where you need to look for the for the

00:36:52,810 --> 00:37:01,360
uploads for those for those cats and in

00:36:56,740 --> 00:37:03,070
the in the backend it works and my

00:37:01,360 --> 00:37:06,100
front-end templates I'm going to point

00:37:03,070 --> 00:37:07,840
to the same environment variable and

00:37:06,100 --> 00:37:13,450
I've got those cats on the front end

00:37:07,840 --> 00:37:15,100
again as well how do we upload new cats

00:37:13,450 --> 00:37:18,970
I've already moved all the old ones over

00:37:15,100 --> 00:37:22,120
how do I upload new cats there's a very

00:37:18,970 --> 00:37:24,730
valid question there are different ways

00:37:22,120 --> 00:37:27,850
of doing it but one way is to use

00:37:24,730 --> 00:37:30,150
priests on URLs several show hands how

00:37:27,850 --> 00:37:32,860
many people have used priests on URLs

00:37:30,150 --> 00:37:35,770
who hasn't used one but knows what one

00:37:32,860 --> 00:37:40,210
is good I get say some yeah ma now

00:37:35,770 --> 00:37:42,819
that's some UML now okay so we start off

00:37:40,210 --> 00:37:44,770
with a client our client will be our web

00:37:42,819 --> 00:37:46,059
browser and the web browser says to the

00:37:44,770 --> 00:37:48,880
server hey look I want to upload

00:37:46,059 --> 00:37:50,650
something can you get me a URL that I

00:37:48,880 --> 00:37:54,280
can use and that URL will have a token

00:37:50,650 --> 00:37:55,960
in it and the services to Amazon s3

00:37:54,280 --> 00:37:58,510
hey listen somebody wants to upload

00:37:55,960 --> 00:38:02,140
something give me a URL that they can

00:37:58,510 --> 00:38:04,119
use to access to upload to now Amazon

00:38:02,140 --> 00:38:06,490
says the server yeah sure here is here's

00:38:04,119 --> 00:38:08,470
the URL here's everything you need and

00:38:06,490 --> 00:38:13,170
the service says back to the browser

00:38:08,470 --> 00:38:15,520
here you go and then the browser says

00:38:13,170 --> 00:38:17,050
directly to Amazon hey look here's that

00:38:15,520 --> 00:38:18,280
thing that you're expecting that the

00:38:17,050 --> 00:38:20,980
server told you that I was going to

00:38:18,280 --> 00:38:24,609
upload an Emerson so it's great

00:38:20,980 --> 00:38:26,710
fantastic brilliant and then the client

00:38:24,609 --> 00:38:27,970
says back to the server look I've done

00:38:26,710 --> 00:38:30,220
that I've pushed it up you can update

00:38:27,970 --> 00:38:33,520
your record and then optionally the

00:38:30,220 --> 00:38:34,780
server can say to s3 hey look alright

00:38:33,520 --> 00:38:36,940
that's done we've got the new file we

00:38:34,780 --> 00:38:41,710
can delete the old one that is pre

00:38:36,940 --> 00:38:45,790
signed URLs in a nutshell the idea is

00:38:41,710 --> 00:38:48,339
that the server pre authenticates for

00:38:45,790 --> 00:38:50,559
the client and then the client goes

00:38:48,339 --> 00:38:55,799
ahead and completes what was completes

00:38:50,559 --> 00:38:58,480
the upload so what I've done is added a

00:38:55,799 --> 00:39:02,680
controller here we have two routes in it

00:38:58,480 --> 00:39:05,190
one is to upload a kitty image and the

00:39:02,680 --> 00:39:08,079
other one is to get the pre signed URL

00:39:05,190 --> 00:39:09,970
the content of those those methods isn't

00:39:08,079 --> 00:39:13,359
important right now but that's theirs

00:39:09,970 --> 00:39:16,750
what we have and I've added some

00:39:13,359 --> 00:39:18,940
JavaScript too which is where the client

00:39:16,750 --> 00:39:25,500
does the interaction between the server

00:39:18,940 --> 00:39:25,500
and to s3 yes it's jQuery don't hate me

00:39:25,859 --> 00:39:30,819
and what I can do now is actually remove

00:39:28,450 --> 00:39:34,630
that third-party uploading bundle that I

00:39:30,819 --> 00:39:37,079
had and from my entities I can remove

00:39:34,630 --> 00:39:39,790
all of the code that was related to that

00:39:37,079 --> 00:39:41,619
as well so I'm kind of cleaning up my

00:39:39,790 --> 00:39:43,510
entities a little bit by removing stuff

00:39:41,619 --> 00:39:45,790
that I didn't necessarily want in there

00:39:43,510 --> 00:39:48,400
felt a bit dirty putting it in there so

00:39:45,790 --> 00:39:49,900
I can remove all that anyway and the

00:39:48,400 --> 00:39:52,390
great thing is now I can select any

00:39:49,900 --> 00:39:53,750
kitty in the list and I can click this

00:39:52,390 --> 00:39:57,980
upload Kitty in

00:39:53,750 --> 00:40:00,380
button I can select a cat and you can

00:39:57,980 --> 00:40:03,230
see that it's changed so there's no

00:40:00,380 --> 00:40:07,100
actual uploading happening to lambda or

00:40:03,230 --> 00:40:11,810
to my much server itself what we've got

00:40:07,100 --> 00:40:13,820
is the client saying hey let's stick

00:40:11,810 --> 00:40:19,430
this straight on Amazon but let the

00:40:13,820 --> 00:40:23,350
server know when we've done it so let's

00:40:19,430 --> 00:40:26,650
have a recap now what we've just done

00:40:23,350 --> 00:40:29,060
we've added breath to an existing site

00:40:26,650 --> 00:40:32,240
we've fixed the assets that were broken

00:40:29,060 --> 00:40:35,210
by moving them over to a CDN we've moved

00:40:32,240 --> 00:40:37,250
the session storage to a database we've

00:40:35,210 --> 00:40:40,730
run console commands to migrate the

00:40:37,250 --> 00:40:42,920
database and we've we've pre-sign urls

00:40:40,730 --> 00:40:50,810
in to handle image uploading we've now

00:40:42,920 --> 00:40:56,720
got a completely serverless website and

00:40:50,810 --> 00:41:02,870
it didn't take long to do yay so let's

00:40:56,720 --> 00:41:05,810
think about performance cold boots for a

00:41:02,870 --> 00:41:08,950
start remember I told you about V pcs

00:41:05,810 --> 00:41:08,950
and there are performance implications

00:41:09,070 --> 00:41:13,970
Amazon have promised or they've told us

00:41:11,750 --> 00:41:15,860
that they're going to fix this early

00:41:13,970 --> 00:41:19,190
this year so if we're almost kind of

00:41:15,860 --> 00:41:21,290
getting to mid 2019 so hopefully this

00:41:19,190 --> 00:41:25,250
will be coming soon but the trouble with

00:41:21,290 --> 00:41:26,870
cold boots is if we remember so we go

00:41:25,250 --> 00:41:28,520
from nothing and it creates the

00:41:26,870 --> 00:41:32,240
container and it bootstraps your runtime

00:41:28,520 --> 00:41:34,070
and then starts waiting for waiting for

00:41:32,240 --> 00:41:36,440
requests right at the end here where it

00:41:34,070 --> 00:41:38,000
says warm start so the cold start is

00:41:36,440 --> 00:41:42,380
everything that comes before that where

00:41:38,000 --> 00:41:47,180
it sets up F p.m. and all the rest when

00:41:42,380 --> 00:41:51,680
your code is in a V PC it adds load adds

00:41:47,180 --> 00:41:53,660
work so that cold start which means that

00:41:51,680 --> 00:41:56,420
you get extra security but your cold

00:41:53,660 --> 00:42:00,290
boots are very very long how long you

00:41:56,420 --> 00:42:02,470
might ask depends on the memory you

00:42:00,290 --> 00:42:05,510
assign that's your lambda function if

00:42:02,470 --> 00:42:06,810
you only have 120 megabytes and your

00:42:05,510 --> 00:42:09,890
lambda function it

00:42:06,810 --> 00:42:12,150
takes 11 seconds to start that container

00:42:09,890 --> 00:42:14,730
if you add more memory it brings it down

00:42:12,150 --> 00:42:16,200
it brings it down it brings it down so

00:42:14,730 --> 00:42:18,210
hopefully this is going to be fixed very

00:42:16,200 --> 00:42:21,960
very very soon so that we can all have

00:42:18,210 --> 00:42:26,700
really fast really secure websites yeah

00:42:21,960 --> 00:42:29,160
until then you got to choose another

00:42:26,700 --> 00:42:31,860
option is to keep the fee pcs warm and

00:42:29,160 --> 00:42:33,510
you can use services like Pingdom to do

00:42:31,860 --> 00:42:34,860
that if you're using Pingdom anyway to

00:42:33,510 --> 00:42:36,960
monitor your uptime

00:42:34,860 --> 00:42:39,060
then you've kind of got that for free

00:42:36,960 --> 00:42:42,900
and you reduce the chance of your users

00:42:39,060 --> 00:42:44,010
getting that 10 or 11 second wait but it

00:42:42,900 --> 00:42:51,150
feels kind of hacky and I'd much rather

00:42:44,010 --> 00:42:56,640
Amazon just fixed it now all I want for

00:42:51,150 --> 00:42:59,660
Christmas is fast PHP lamda which which

00:42:56,640 --> 00:43:03,860
Kieran said in in in the Select channel

00:42:59,660 --> 00:43:08,310
some time ago now well the layers thing

00:43:03,860 --> 00:43:09,840
gives us options to explore performance

00:43:08,310 --> 00:43:11,820
we couldn't do that before when we had

00:43:09,840 --> 00:43:14,160
the Schumann we were pushing that the

00:43:11,820 --> 00:43:15,810
J's Shimon we were pushing the binary

00:43:14,160 --> 00:43:18,030
app with that and trying to call that we

00:43:15,810 --> 00:43:19,830
just didn't have that option with layers

00:43:18,030 --> 00:43:21,690
we can we can experiment because we

00:43:19,830 --> 00:43:25,230
completely control the type of server

00:43:21,690 --> 00:43:26,610
that runs now we've got some performance

00:43:25,230 --> 00:43:29,940
benchmarks some early performance

00:43:26,610 --> 00:43:32,510
benchmarks which which were created by

00:43:29,940 --> 00:43:35,580
the guy who initially wrote breath and

00:43:32,510 --> 00:43:38,580
the two that we've got here so the lower

00:43:35,580 --> 00:43:41,580
one here which is option E which is

00:43:38,580 --> 00:43:43,830
running PHP F p.m. the fastest we've got

00:43:41,580 --> 00:43:48,420
PHP down to is about one millisecond

00:43:43,830 --> 00:43:52,310
response and we've got an average of 18

00:43:48,420 --> 00:43:55,020
milliseconds for a symphony response

00:43:52,310 --> 00:43:56,760
option ie which is which has got the

00:43:55,020 --> 00:44:00,920
little warning sign next to it and is

00:43:56,760 --> 00:44:04,680
experimental using PHP react kind of

00:44:00,920 --> 00:44:07,110
ideas with shared memory and those kind

00:44:04,680 --> 00:44:08,640
of things here be dragons we've got a

00:44:07,110 --> 00:44:10,560
symphony response down to six

00:44:08,640 --> 00:44:14,010
milliseconds that's three times faster

00:44:10,560 --> 00:44:15,960
on average for using that and let's say

00:44:14,010 --> 00:44:18,480
we have these options and there are many

00:44:15,960 --> 00:44:21,230
many more things that we can do to try

00:44:18,480 --> 00:44:21,230
to improve this

00:44:21,289 --> 00:44:26,730
but how much further can we go

00:44:24,289 --> 00:44:32,220
what about microservices what about if

00:44:26,730 --> 00:44:34,680
you're using messaging and SMS and

00:44:32,220 --> 00:44:38,970
reacting to that with lambda but you

00:44:34,680 --> 00:44:41,160
don't need an HTTP application or a

00:44:38,970 --> 00:44:43,220
console app what you need is just a

00:44:41,160 --> 00:44:47,250
function it's going to receive the

00:44:43,220 --> 00:44:48,960
receive the event and act upon it well

00:44:47,250 --> 00:44:51,599
you can do we give you that option you

00:44:48,960 --> 00:44:54,599
can say I want to create a PHP function

00:44:51,599 --> 00:44:56,400
choose option 0 and you're away you get

00:44:54,599 --> 00:44:59,779
that event and the great thing about

00:44:56,400 --> 00:45:02,190
that is then you can use the same code

00:44:59,779 --> 00:45:03,710
to send your message as you do to

00:45:02,190 --> 00:45:06,269
receive it you can if you've got

00:45:03,710 --> 00:45:09,690
validation you can you can serialize in

00:45:06,269 --> 00:45:11,730
PHP send it through SMS and then uncie

00:45:09,690 --> 00:45:16,980
realize it through PHP and you get back

00:45:11,730 --> 00:45:19,190
the exact same object now I know you're

00:45:16,980 --> 00:45:21,599
all wondering now how do I roll my own

00:45:19,190 --> 00:45:25,670
because we don't give you a lot in those

00:45:21,599 --> 00:45:28,519
layers you want to be able to do things

00:45:25,670 --> 00:45:32,789
there are a couple of options here

00:45:28,519 --> 00:45:36,660
it's all kind of new ground for us there

00:45:32,789 --> 00:45:38,130
is a company who are getting fully

00:45:36,660 --> 00:45:40,500
involved in the project and they've

00:45:38,130 --> 00:45:43,799
created a bunch of extensions to help

00:45:40,500 --> 00:45:46,769
you create layers if you want and the

00:45:43,799 --> 00:45:50,190
other option right now is to clone the

00:45:46,769 --> 00:45:52,559
breast project and then you can open up

00:45:50,190 --> 00:45:56,480
the docker file which we compiled PHP

00:45:52,559 --> 00:46:00,029
from add in anything that you want and

00:45:56,480 --> 00:46:01,740
then just run make a publish and then

00:46:00,029 --> 00:46:04,079
what happens is your laptop fans go

00:46:01,740 --> 00:46:07,769
crazy for about ten minutes and it

00:46:04,079 --> 00:46:09,210
uploads the layers for you and that's

00:46:07,769 --> 00:46:11,730
exactly what I did when I was playing

00:46:09,210 --> 00:46:14,190
with getting WordPress running I needed

00:46:11,730 --> 00:46:17,730
MySQL I extension which we don't provide

00:46:14,190 --> 00:46:19,049
in breath so I thought well let's go in

00:46:17,730 --> 00:46:21,329
and let's do that and let's add my

00:46:19,049 --> 00:46:22,950
scroll Y which is which is interesting

00:46:21,329 --> 00:46:26,309
like I said we can probably start

00:46:22,950 --> 00:46:29,160
supporting anything in PHP with enough

00:46:26,309 --> 00:46:32,780
time we've enough resources to kind of

00:46:29,160 --> 00:46:37,270
play with it and do it so does

00:46:32,780 --> 00:46:39,860
WordPress work with breath or sort of

00:46:37,270 --> 00:46:41,300
this is as far as I got after nearly

00:46:39,860 --> 00:46:42,860
breaking my laptop with those fans

00:46:41,300 --> 00:46:44,780
running for forever

00:46:42,860 --> 00:46:48,290
it's an old laptop it doesn't really

00:46:44,780 --> 00:46:51,410
like doing much these days we got it

00:46:48,290 --> 00:46:54,830
component we got it running but I don't

00:46:51,410 --> 00:46:58,910
have enough experience with WordPress to

00:46:54,830 --> 00:47:00,530
be with with with developing wordpress

00:46:58,910 --> 00:47:02,990
locally with the remote database and all

00:47:00,530 --> 00:47:04,220
the rest and each time I don't I just

00:47:02,990 --> 00:47:05,480
don't know enough about WordPress to

00:47:04,220 --> 00:47:07,670
really pursue it any further so if

00:47:05,480 --> 00:47:09,320
anybody that knows WordPress can get

00:47:07,670 --> 00:47:11,240
involved in and kind of go hey look

00:47:09,320 --> 00:47:13,340
here's how we do it with a remote

00:47:11,240 --> 00:47:14,720
database and all the rest then they'll

00:47:13,340 --> 00:47:19,370
be there pretty pretty cool I think we

00:47:14,720 --> 00:47:21,020
can support WordPress quite easily would

00:47:19,370 --> 00:47:25,100
it be great if we could put in layers

00:47:21,020 --> 00:47:28,910
for like Blackfyre and do deep profiling

00:47:25,100 --> 00:47:29,570
on things that happening within within

00:47:28,910 --> 00:47:31,580
Lander

00:47:29,570 --> 00:47:32,840
that's something before layers we

00:47:31,580 --> 00:47:36,140
wouldn't have been able to do that we'd

00:47:32,840 --> 00:47:37,930
have been reliant upon the and the logs

00:47:36,140 --> 00:47:40,880
that you get within

00:47:37,930 --> 00:47:42,650
AWS with it for cloud watch metrics and

00:47:40,880 --> 00:47:44,630
things like that but now we can think

00:47:42,650 --> 00:47:51,230
about yeah we could add a layer for this

00:47:44,630 --> 00:47:55,130
I would love for that to happen this is

00:47:51,230 --> 00:47:57,470
my own AWS billing console I started

00:47:55,130 --> 00:48:04,160
playing with breadth around August last

00:47:57,470 --> 00:48:07,660
year and like here I have completely

00:48:04,160 --> 00:48:11,090
eliminated my load balancing cost

00:48:07,660 --> 00:48:13,750
completely and my other ec2 costs are

00:48:11,090 --> 00:48:17,270
coming down I've got one ec2 server left

00:48:13,750 --> 00:48:19,340
and that's because I haven't yet emailed

00:48:17,270 --> 00:48:21,080
the guy that's got the only site left on

00:48:19,340 --> 00:48:22,940
it to say that I'm shutting the server

00:48:21,080 --> 00:48:27,710
down and when I do that then I will have

00:48:22,940 --> 00:48:28,000
zero ec2 costs I think that's pretty

00:48:27,710 --> 00:48:29,990
good

00:48:28,000 --> 00:48:33,590
I've still got costs for other things

00:48:29,990 --> 00:48:35,390
like a like a OB and it's not al B RDS

00:48:33,590 --> 00:48:40,250
and stuff but I'm looking at eliminating

00:48:35,390 --> 00:48:42,950
those as well so what are we working on

00:48:40,250 --> 00:48:45,740
at the moment we're trying to get better

00:48:42,950 --> 00:48:46,870
documentation we're improving speed and

00:48:45,740 --> 00:48:50,150
stability

00:48:46,870 --> 00:48:51,590
we're trying to think of a recommended

00:48:50,150 --> 00:48:54,080
method of creating your own run times

00:48:51,590 --> 00:48:57,260
like I said you've got two options right

00:48:54,080 --> 00:49:00,830
now one is to use that third-party

00:48:57,260 --> 00:49:03,260
companies bref extensions library or you

00:49:00,830 --> 00:49:05,420
can clone breath and do it yourself and

00:49:03,260 --> 00:49:09,260
we want to have better framework

00:49:05,420 --> 00:49:13,100
integrations and of course a better

00:49:09,260 --> 00:49:15,140
deployment method from local so the

00:49:13,100 --> 00:49:17,330
things join us I don't even know what

00:49:15,140 --> 00:49:19,490
this photo is about I found it on

00:49:17,330 --> 00:49:24,410
unsplash and I thought well I've got to

00:49:19,490 --> 00:49:26,240
use that so so join us I'm Eve Rhett my

00:49:24,410 --> 00:49:28,460
builder come and join me come and work

00:49:26,240 --> 00:49:31,070
with me come and talk to me get on board

00:49:28,460 --> 00:49:37,820
with what we do or get involved with the

00:49:31,070 --> 00:49:39,500
project and tweet me and let me know

00:49:37,820 --> 00:49:41,990
what your thoughts or if there any

00:49:39,500 --> 00:49:44,900
problems but please don't get involved

00:49:41,990 --> 00:49:46,910
in the project even if it is just to try

00:49:44,900 --> 00:49:48,950
it out and say I think your

00:49:46,910 --> 00:49:50,810
documentation isn't clear here or I

00:49:48,950 --> 00:49:53,150
tried this and it didn't quite work in

00:49:50,810 --> 00:49:54,470
my use case what can we do about it and

00:49:53,150 --> 00:49:56,630
we'll try and take these things on board

00:49:54,470 --> 00:49:58,160
but if you got any questions now

00:49:56,630 --> 00:50:02,240
do we have time yeah we've just about

00:49:58,160 --> 00:50:04,250
got time before lunch and we're will do

00:50:02,240 --> 00:50:07,040
my best

00:50:04,250 --> 00:50:10,790
I'm sorry if I'm not saying lambda had a

00:50:07,040 --> 00:50:13,190
limit for request size pre-signed URL

00:50:10,790 --> 00:50:15,110
fixes that for file upload but is it

00:50:13,190 --> 00:50:20,960
still applicable that there was five

00:50:15,110 --> 00:50:22,790
megabytes or something like that you

00:50:20,960 --> 00:50:23,990
know I haven't looked into that I knew

00:50:22,790 --> 00:50:25,820
there'd be something that I'd looked

00:50:23,990 --> 00:50:27,290
into that somebody would ask me you know

00:50:25,820 --> 00:50:30,320
I will look into it and I'll tweet it

00:50:27,290 --> 00:50:34,220
out and and get back to you on that

00:50:30,320 --> 00:50:40,820
because I simply don't have the top of

00:50:34,220 --> 00:50:43,130
my head so without without forking

00:50:40,820 --> 00:50:45,500
breath it's impossible to custom to

00:50:43,130 --> 00:50:47,150
install custom PHP extensions right it's

00:50:45,500 --> 00:50:50,450
not impossible but you have to you have

00:50:47,150 --> 00:50:54,020
to throw yourself so I need to FERC for

00:50:50,450 --> 00:50:57,290
car breath and you don't need to fork

00:50:54,020 --> 00:50:58,830
breath you can just clone it and then

00:50:57,290 --> 00:51:00,990
run it yourself and then what happen is

00:50:58,830 --> 00:51:03,230
or upload the layers to your own account

00:51:00,990 --> 00:51:05,790
right see so you won't be using breaths

00:51:03,230 --> 00:51:07,110
extensions that their official extension

00:51:05,790 --> 00:51:08,460
and posit Ori but you'll have them

00:51:07,110 --> 00:51:24,570
upload it's your own accounting you'll

00:51:08,460 --> 00:51:27,690
be able to use those we've got somebody

00:51:24,570 --> 00:51:29,880
down the front number only me the

00:51:27,690 --> 00:51:33,240
request impaired Lord for lambdas six

00:51:29,880 --> 00:51:34,260
Meg just so you want tonight on ok thank

00:51:33,240 --> 00:51:35,940
you

00:51:34,260 --> 00:51:38,670
what's the difference between breath

00:51:35,940 --> 00:51:42,420
versus using stacker ease images or

00:51:38,670 --> 00:51:49,230
serverless calm sure ok so the previous

00:51:42,420 --> 00:51:51,510
version of refused service and it wasn't

00:51:49,230 --> 00:51:53,250
it wasn't a decision that that I made

00:51:51,510 --> 00:51:55,290
that the guy who's running the who's

00:51:53,250 --> 00:51:58,710
leading the project when the when the

00:51:55,290 --> 00:52:01,080
layers came out he said look lambda is

00:51:58,710 --> 00:52:03,330
is kind of the most ubiquitous thing

00:52:01,080 --> 00:52:05,520
that everyone's using we should support

00:52:03,330 --> 00:52:07,140
that rather than trying to support

00:52:05,520 --> 00:52:08,430
everything it's the idea of getting rid

00:52:07,140 --> 00:52:10,470
of the kitchen sink and being

00:52:08,430 --> 00:52:13,970
opinionated so that we can do one thing

00:52:10,470 --> 00:52:15,990
and do it well so that's why we don't do

00:52:13,970 --> 00:52:20,760
you serve lists for the deployment

00:52:15,990 --> 00:52:26,160
anymore there with with regard to other

00:52:20,760 --> 00:52:27,900
options I know that Rob Allen who would

00:52:26,160 --> 00:52:29,340
have been here today is working on

00:52:27,900 --> 00:52:31,230
something called image tool and I don't

00:52:29,340 --> 00:52:33,300
know a lot about that but I think that

00:52:31,230 --> 00:52:35,700
that is something to do with taking your

00:52:33,300 --> 00:52:37,200
docker containers and pushing that to

00:52:35,700 --> 00:52:40,500
lambda and doing pretty much the same

00:52:37,200 --> 00:52:41,670
thing so that's another option I haven't

00:52:40,500 --> 00:52:43,800
I haven't really looked into it so I

00:52:41,670 --> 00:52:45,840
don't I don't really know but the point

00:52:43,800 --> 00:52:48,870
with breath is that we do one thing and

00:52:45,840 --> 00:52:50,790
we optimize it for that and we do it

00:52:48,870 --> 00:52:52,650
well and if you want to extend it and

00:52:50,790 --> 00:52:54,390
take it and run with it and and do

00:52:52,650 --> 00:52:56,520
things like that then you can do and you

00:52:54,390 --> 00:52:58,940
know that you've got a basic thing

00:52:56,520 --> 00:53:01,830
that's predictable that you can run with

00:52:58,940 --> 00:53:04,400
I hope that kind of kind of addresses

00:53:01,830 --> 00:53:04,400
your question

00:53:06,940 --> 00:53:14,680
I just have one question where I can get

00:53:12,580 --> 00:53:17,950
more technical information about our

00:53:14,680 --> 00:53:19,510
breath visas docker I'm very interested

00:53:17,950 --> 00:53:22,150
in both subject sir

00:53:19,510 --> 00:53:24,460
sure okay sir sir-sir breath only uses

00:53:22,150 --> 00:53:27,760
docker in fact it doesn't directly use

00:53:24,460 --> 00:53:32,410
docker it's Sam local which uses docker

00:53:27,760 --> 00:53:34,450
which is the AWS package that that is

00:53:32,410 --> 00:53:36,940
provided by AWS for the deployment so we

00:53:34,450 --> 00:53:40,480
don't actually do anything with docker

00:53:36,940 --> 00:53:41,980
within breath apart from the compilation

00:53:40,480 --> 00:53:45,010
which I just lied to you about there so

00:53:41,980 --> 00:53:47,619
yeah so we do compile PHP for the layers

00:53:45,010 --> 00:53:50,010
with docker but we're not actually using

00:53:47,619 --> 00:53:53,890
docker as as part of the normal workflow

00:53:50,010 --> 00:53:55,900
we use in AWS Sam local for that which

00:53:53,890 --> 00:53:59,200
is completely separate it's just that

00:53:55,900 --> 00:54:01,390
it's easier to use AWS is own tool for

00:53:59,200 --> 00:54:03,000
the during the deployment then it is to

00:54:01,390 --> 00:54:06,520
do that ourselves

00:54:03,000 --> 00:54:09,220
and what we do is we kind of we kind of

00:54:06,520 --> 00:54:11,619
setup the template for your AWS Sam

00:54:09,220 --> 00:54:15,390
deployment structure that's that's about

00:54:11,619 --> 00:54:15,390
as far as we go with with that

00:54:19,599 --> 00:54:28,269
there's everybody else good

00:54:25,170 --> 00:54:31,660
hi I'm mostly being a bit naive but

00:54:28,269 --> 00:54:34,449
what's the pricing for lambda and and is

00:54:31,660 --> 00:54:37,630
there a crossover where it's must be

00:54:34,449 --> 00:54:40,809
just easy just to keep with a V PC no

00:54:37,630 --> 00:54:42,579
sure okay um well I showed you my own

00:54:40,809 --> 00:54:45,430
results there my my results there their

00:54:42,579 --> 00:54:47,380
variant frequently used websites so I've

00:54:45,430 --> 00:54:48,910
basically knocked my costs down to

00:54:47,380 --> 00:54:50,619
nothing so I was spending about hundred

00:54:48,910 --> 00:54:55,539
fifty-pound a month just on load

00:54:50,619 --> 00:55:01,150
balances and ec2 instances and now it's

00:54:55,539 --> 00:55:03,699
negligible up to a certain point it's

00:55:01,150 --> 00:55:05,140
gonna be cheaper to use lambda but I

00:55:03,699 --> 00:55:07,869
think you're probably gonna have to look

00:55:05,140 --> 00:55:10,150
at your use case and and and figure it

00:55:07,869 --> 00:55:14,380
out so the costings are all provided on

00:55:10,150 --> 00:55:15,910
the AWS website as I'm sure you can get

00:55:14,380 --> 00:55:18,519
a costing 3c2 and you can get across

00:55:15,910 --> 00:55:20,339
things for lambda etc it just takes a

00:55:18,519 --> 00:55:23,170
bit of rudimentary maths I think to say

00:55:20,339 --> 00:55:26,499
this is the amount of requests we get

00:55:23,170 --> 00:55:28,539
and this is how much it's we project

00:55:26,499 --> 00:55:32,140
that it's going to cost the thing about

00:55:28,539 --> 00:55:34,209
this as well being behind API gateway is

00:55:32,140 --> 00:55:36,309
that you can configure API gateway to

00:55:34,209 --> 00:55:38,440
block a bunch of requests that otherwise

00:55:36,309 --> 00:55:43,900
would get through it's a breath if you

00:55:38,440 --> 00:55:46,599
if you've got maybe a set a number of or

00:55:43,900 --> 00:55:48,309
a set of routes which are allowed into

00:55:46,599 --> 00:55:51,699
your application you can say anything

00:55:48,309 --> 00:55:54,279
outside of that which was in there those

00:55:51,699 --> 00:55:56,529
those proxy URLs in the template demo

00:55:54,279 --> 00:55:59,019
you can say you can get rid of the

00:55:56,529 --> 00:56:00,880
catch-all and say only allow these ones

00:55:59,019 --> 00:56:02,829
through that match and then what happens

00:56:00,880 --> 00:56:05,410
is API gateway blocks that at the edge

00:56:02,829 --> 00:56:07,150
and you never even get charged for those

00:56:05,410 --> 00:56:08,859
to come through to lambda so you can

00:56:07,150 --> 00:56:11,019
probably optimize your costs in that

00:56:08,859 --> 00:56:12,789
respect but I think you probably need to

00:56:11,019 --> 00:56:15,130
look at your own use case to figure out

00:56:12,789 --> 00:56:18,029
how much it's going to cost you or maybe

00:56:15,130 --> 00:56:18,029

YouTube URL: https://www.youtube.com/watch?v=TTyIBOnpI9s


