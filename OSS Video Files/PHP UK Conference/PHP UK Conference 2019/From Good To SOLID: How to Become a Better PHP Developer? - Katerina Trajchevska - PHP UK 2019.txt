Title: From Good To SOLID: How to Become a Better PHP Developer? - Katerina Trajchevska - PHP UK 2019
Publication date: 2019-03-22
Playlist: PHP UK Conference 2019
Description: 
	PHP's flexibility makes it easy for beginners to start programming, but it also allows for projects to easily evolve into a coupled spaghetti architecture that makes them hard to maintain. SOLID design principles can help us write code that's easier to understand, extend and maintain.
Captions: 
	00:00:03,500 --> 00:00:07,799
so I will be talking about the solid

00:00:06,089 --> 00:00:09,870
design principles and how we can use

00:00:07,799 --> 00:00:14,969
them to write better code in PHP and

00:00:09,870 --> 00:00:17,039
essentially become better developers so

00:00:14,969 --> 00:00:19,710
a little bit of background my name is

00:00:17,039 --> 00:00:22,050
Katrina I am software engineer and

00:00:19,710 --> 00:00:25,199
co-founder of ativan I devised a

00:00:22,050 --> 00:00:26,939
marketplace for remote working and we're

00:00:25,199 --> 00:00:30,390
focused on helping companies scale their

00:00:26,939 --> 00:00:32,040
teams with remote developers so working

00:00:30,390 --> 00:00:34,110
in an environment like this I've had a

00:00:32,040 --> 00:00:38,489
chance to work with a variety of

00:00:34,110 --> 00:00:40,200
companies and projects and be part from

00:00:38,489 --> 00:00:42,090
both the startup environment and also

00:00:40,200 --> 00:00:43,920
the enterprise and they're both very

00:00:42,090 --> 00:00:46,260
different but they are similar in the

00:00:43,920 --> 00:00:49,079
way of you know working with spaghetti

00:00:46,260 --> 00:00:53,370
code and trying to find your way through

00:00:49,079 --> 00:00:55,260
messy lines in in the codebase apart

00:00:53,370 --> 00:00:57,750
from that I advocate for remote work

00:00:55,260 --> 00:01:00,660
because I've been doing it since the

00:00:57,750 --> 00:01:02,010
beginning so it's really great and I

00:01:00,660 --> 00:01:05,189
recommend it to everyone

00:01:02,010 --> 00:01:07,650
and I'm volunteering for the local tech

00:01:05,189 --> 00:01:11,250
communities also joining initiatives for

00:01:07,650 --> 00:01:13,020
inclusion equality so you can you can

00:01:11,250 --> 00:01:16,200
talk to me about it later if you're

00:01:13,020 --> 00:01:19,830
interested in that too now I'd like to

00:01:16,200 --> 00:01:22,380
start with that for PHP humor I'm not

00:01:19,830 --> 00:01:25,259
sure about you but I hate this so this

00:01:22,380 --> 00:01:27,500
is part of a larger comic it was

00:01:25,259 --> 00:01:30,750
published by by toga a while back and

00:01:27,500 --> 00:01:32,640
it's what it does it explains how you

00:01:30,750 --> 00:01:34,770
can rescue the princess by using a

00:01:32,640 --> 00:01:36,390
different programming language so every

00:01:34,770 --> 00:01:41,460
programming language has its traits it's

00:01:36,390 --> 00:01:44,250
you know downsides and all of those were

00:01:41,460 --> 00:01:47,460
incorporated in this comic but when it

00:01:44,250 --> 00:01:50,280
got to PHP it was like okay this night

00:01:47,460 --> 00:01:53,310
is giving up he is unable to save the

00:01:50,280 --> 00:01:56,719
princess and he would rather not try so

00:01:53,310 --> 00:01:59,460
instead he he gives up and he dies and

00:01:56,719 --> 00:02:01,259
this is something that you know it was

00:01:59,460 --> 00:02:03,090
an irritating ending for me because I've

00:02:01,259 --> 00:02:05,100
been working with PHP for 6 years I've

00:02:03,090 --> 00:02:07,350
been working on software that's really

00:02:05,100 --> 00:02:09,599
high scale with teams from all around

00:02:07,350 --> 00:02:11,430
the world and you can really scale PHP

00:02:09,599 --> 00:02:13,650
and Demyan also demonstrated how you can

00:02:11,430 --> 00:02:16,140
do it yesterday so it's it's not

00:02:13,650 --> 00:02:18,750
it's impossible to save a princess so

00:02:16,140 --> 00:02:20,819
when you think about this it's more of

00:02:18,750 --> 00:02:24,090
the approach we have towards programming

00:02:20,819 --> 00:02:25,920
and not so much the language itself so

00:02:24,090 --> 00:02:28,409
while I was preparing for this

00:02:25,920 --> 00:02:31,049
presentation and ran onto this research

00:02:28,409 --> 00:02:32,879
made by hacker ranked and these survey

00:02:31,049 --> 00:02:35,450
developers on various topics one of

00:02:32,879 --> 00:02:38,040
those was what they hate most when

00:02:35,450 --> 00:02:40,620
programming or what they hate most in

00:02:38,040 --> 00:02:44,430
their daily work and what they answered

00:02:40,620 --> 00:02:46,769
was spaghetti code so I'm sure we can

00:02:44,430 --> 00:02:48,690
all relate to this right it's it's

00:02:46,769 --> 00:02:50,730
something that we dread and whenever we

00:02:48,690 --> 00:02:54,480
join a legacy system or whenever we join

00:02:50,730 --> 00:02:56,129
a team we're you know we're new and we

00:02:54,480 --> 00:02:58,049
need to get up and running with

00:02:56,129 --> 00:02:59,700
everything it's getting hard because we

00:02:58,049 --> 00:03:01,349
don't understand what the code does and

00:02:59,700 --> 00:03:03,209
we spend much more time reading it and

00:03:01,349 --> 00:03:04,829
trying to understand it then we do

00:03:03,209 --> 00:03:10,739
actually developing new features or

00:03:04,829 --> 00:03:12,989
fixing bugs so that's what I will try to

00:03:10,739 --> 00:03:15,870
cover with this talk I wanted to go

00:03:12,989 --> 00:03:18,660
through a specific example of something

00:03:15,870 --> 00:03:20,370
I currently work on and there will be

00:03:18,660 --> 00:03:22,200
some code even though it's early in the

00:03:20,370 --> 00:03:26,220
morning so I hope you've had your

00:03:22,200 --> 00:03:30,239
coffees this is a screenshot of the

00:03:26,220 --> 00:03:32,700
platform for for a diva so basically

00:03:30,239 --> 00:03:35,819
it's the login page after the the

00:03:32,700 --> 00:03:37,440
developer signs up they're accepted to

00:03:35,819 --> 00:03:39,329
our community so this is where they can

00:03:37,440 --> 00:03:42,870
access all of the opportunities that

00:03:39,329 --> 00:03:45,480
they have and update their profiles so

00:03:42,870 --> 00:03:48,419
basically what it does it's a couple of

00:03:45,480 --> 00:03:50,549
links on the side and then a forum where

00:03:48,419 --> 00:03:52,849
they can edit their profile details at

00:03:50,549 --> 00:03:55,500
their experience and at their education

00:03:52,849 --> 00:03:58,410
so when we first started working on this

00:03:55,500 --> 00:04:01,019
we were still pretty small and we could

00:03:58,410 --> 00:04:03,150
manage everything on on slack so all of

00:04:01,019 --> 00:04:05,489
the developer communication and all the

00:04:03,150 --> 00:04:07,680
opportunities were managed directly but

00:04:05,489 --> 00:04:09,419
after a while since we started growing

00:04:07,680 --> 00:04:11,280
we decided we needed to place where

00:04:09,419 --> 00:04:14,099
everyone could log in and manage

00:04:11,280 --> 00:04:16,079
everything on their own so but we didn't

00:04:14,099 --> 00:04:17,519
want to spend a lot of time and invest a

00:04:16,079 --> 00:04:19,919
lot of resources at the beginning in

00:04:17,519 --> 00:04:23,550
building a large platform we wanted to

00:04:19,919 --> 00:04:25,650
do it step by self and that's how we how

00:04:23,550 --> 00:04:26,230
we decided to start so we were using

00:04:25,650 --> 00:04:28,360
After

00:04:26,230 --> 00:04:31,810
party system for managing all of our

00:04:28,360 --> 00:04:34,900
applicants it's called zoko recruits and

00:04:31,810 --> 00:04:36,940
it's kind of like a crm for candidates

00:04:34,900 --> 00:04:41,800
so you can manage all of their details

00:04:36,940 --> 00:04:44,880
attach CDs and edit their experience

00:04:41,800 --> 00:04:47,470
their education history and all of that

00:04:44,880 --> 00:04:49,600
and it was fine our administrators would

00:04:47,470 --> 00:04:52,300
log in there and manage everything and

00:04:49,600 --> 00:04:55,450
here we wanted to just create a simple

00:04:52,300 --> 00:04:57,790
form and connect it through the third

00:04:55,450 --> 00:05:01,570
party API so that we can save all of the

00:04:57,790 --> 00:05:05,140
details there so how this looks in the

00:05:01,570 --> 00:05:06,700
back we started this was the only page

00:05:05,140 --> 00:05:08,110
that we needed so we decided okay we'll

00:05:06,700 --> 00:05:11,050
just create one class and put everything

00:05:08,110 --> 00:05:13,240
inside that this is a candidate class

00:05:11,050 --> 00:05:16,060
that handles it's like an adapter on our

00:05:13,240 --> 00:05:18,940
end that handles all of the API calls so

00:05:16,060 --> 00:05:21,010
basically it has the the methods for

00:05:18,940 --> 00:05:22,780
updating candidate details their

00:05:21,010 --> 00:05:24,580
education their experience and also

00:05:22,780 --> 00:05:27,760
several more that are not listed here

00:05:24,580 --> 00:05:30,130
but we added them afterwards like adding

00:05:27,760 --> 00:05:32,290
notes for the candidate and sending

00:05:30,130 --> 00:05:34,030
email scheduling interviews so stuff

00:05:32,290 --> 00:05:38,500
that were more important on on the admin

00:05:34,030 --> 00:05:40,660
side then this is the part where we

00:05:38,500 --> 00:05:42,730
actually display this form it's pretty

00:05:40,660 --> 00:05:46,000
simple just makes a connection to that

00:05:42,730 --> 00:05:49,690
API and then calls of all of the the

00:05:46,000 --> 00:05:55,630
needed functions to return the data we

00:05:49,690 --> 00:05:58,360
need and this is how it's displayed in

00:05:55,630 --> 00:06:00,520
the view so why this is important is to

00:05:58,360 --> 00:06:03,160
notice that we are actually manipulating

00:06:00,520 --> 00:06:08,620
arrays so everything we get is used as

00:06:03,160 --> 00:06:10,570
an array afterwards now this is a bit

00:06:08,620 --> 00:06:13,570
more complex and it's the actual update

00:06:10,570 --> 00:06:16,600
function so it's how things work once we

00:06:13,570 --> 00:06:21,820
click the the Update button and over

00:06:16,600 --> 00:06:23,170
here we have a bit more messy code so it

00:06:21,820 --> 00:06:25,630
has this part which handles the

00:06:23,170 --> 00:06:27,610
candidate details update basically gets

00:06:25,630 --> 00:06:31,870
all of the basic details like name email

00:06:27,610 --> 00:06:34,600
and sends them to to the system to the

00:06:31,870 --> 00:06:36,550
third-party system after that we have

00:06:34,600 --> 00:06:37,560
some logic for going through all of the

00:06:36,550 --> 00:06:39,060
experiences so

00:06:37,560 --> 00:06:41,040
we probably noticed that there was a

00:06:39,060 --> 00:06:43,610
button to add multiple experiences and

00:06:41,040 --> 00:06:45,960
it's also an option to delete ones that

00:06:43,610 --> 00:06:48,750
you're not interested in having in your

00:06:45,960 --> 00:06:50,630
in your profile anymore so what this

00:06:48,750 --> 00:06:53,160
does is it goes through all of the

00:06:50,630 --> 00:06:55,830
experiences that reddit checks if they

00:06:53,160 --> 00:06:57,960
exists in the system already and then if

00:06:55,830 --> 00:07:00,690
they do it updates them otherwise it

00:06:57,960 --> 00:07:02,160
adds a new record and at the end is the

00:07:00,690 --> 00:07:05,250
solid part where it deletes everything

00:07:02,160 --> 00:07:07,380
that's not used anymore and we have a

00:07:05,250 --> 00:07:10,200
similar logic for the education as well

00:07:07,380 --> 00:07:12,120
it's just we changed the calls and we

00:07:10,200 --> 00:07:19,020
changed the variable names but it's

00:07:12,120 --> 00:07:21,419
basically the same so after completing

00:07:19,020 --> 00:07:23,639
this we realized it was a good approach

00:07:21,419 --> 00:07:25,770
it worked for us we had the system on

00:07:23,639 --> 00:07:27,570
the back end in the background that we

00:07:25,770 --> 00:07:29,580
were using for storing everything

00:07:27,570 --> 00:07:31,380
related to the developers and we had a

00:07:29,580 --> 00:07:34,800
nice interface for them to log in and

00:07:31,380 --> 00:07:37,620
edit all of the details and once we

00:07:34,800 --> 00:07:39,510
started moving forward we decided okay

00:07:37,620 --> 00:07:41,820
we'll add one feature at a time for the

00:07:39,510 --> 00:07:45,180
admin side as well so we started with

00:07:41,820 --> 00:07:48,979
manipulating managing candidates adding

00:07:45,180 --> 00:07:51,120
new candidates deleting existing ones

00:07:48,979 --> 00:07:52,590
qualifying and qualifying them and

00:07:51,120 --> 00:07:55,910
everything that's needed that needed to

00:07:52,590 --> 00:07:58,680
be done on the at my side finishing with

00:07:55,910 --> 00:08:00,450
generating their profiles sending client

00:07:58,680 --> 00:08:03,479
proposals so everything that was related

00:08:00,450 --> 00:08:06,389
to the developer side to the developers

00:08:03,479 --> 00:08:08,970
data and we needed for the admin side

00:08:06,389 --> 00:08:12,990
was slowly getting developed and over

00:08:08,970 --> 00:08:15,360
time it became became massive not that

00:08:12,990 --> 00:08:19,020
massive but for this use case it was it

00:08:15,360 --> 00:08:21,750
was really large code base and very

00:08:19,020 --> 00:08:26,960
messy code because we kept on adding and

00:08:21,750 --> 00:08:30,810
adding new and not well structure code

00:08:26,960 --> 00:08:32,339
so after completing all of this this

00:08:30,810 --> 00:08:34,020
third party system wasn't flexible

00:08:32,339 --> 00:08:36,839
enough for us anymore so we decided that

00:08:34,020 --> 00:08:38,580
we needed to switch to a local database

00:08:36,839 --> 00:08:41,849
we wanted to have the flexibility of

00:08:38,580 --> 00:08:46,500
working with everything on our end and

00:08:41,849 --> 00:08:48,839
then adding new features as we needed so

00:08:46,500 --> 00:08:50,320
let's see what it took for us to move to

00:08:48,839 --> 00:08:53,980
a local database with this

00:08:50,320 --> 00:08:58,209
code structure now looking again at this

00:08:53,980 --> 00:09:02,430
larger updates method the first thing is

00:08:58,209 --> 00:09:05,259
to switch from using the Zoho api for

00:09:02,430 --> 00:09:07,449
updating the candidate details to using

00:09:05,259 --> 00:09:10,300
our Nelkin model so this is a largely

00:09:07,449 --> 00:09:13,720
rural card code but it's pretty similar

00:09:10,300 --> 00:09:15,550
no matter what you use so basically we

00:09:13,720 --> 00:09:18,459
changed the approach and instead of

00:09:15,550 --> 00:09:21,370
using this class for calling all of the

00:09:18,459 --> 00:09:23,440
API methods we're now using eloquent

00:09:21,370 --> 00:09:27,000
models and just using the methods they

00:09:23,440 --> 00:09:29,980
have for updating things in the database

00:09:27,000 --> 00:09:33,550
the second part was to update the

00:09:29,980 --> 00:09:36,670
experiences and over here again we use

00:09:33,550 --> 00:09:38,470
the same approach but instead of using

00:09:36,670 --> 00:09:40,389
separate model for the experience we

00:09:38,470 --> 00:09:43,660
decided to rely on the relation between

00:09:40,389 --> 00:09:48,279
the candidate and the experience so that

00:09:43,660 --> 00:09:50,199
that part of the eloquent models and the

00:09:48,279 --> 00:09:52,149
education is pretty much the same so it

00:09:50,199 --> 00:09:56,170
replaces with a similar code like this

00:09:52,149 --> 00:09:57,819
one now if you look at this a little bit

00:09:56,170 --> 00:10:00,240
closer we can see all of the changes

00:09:57,819 --> 00:10:05,339
that we had to make make so this is

00:10:00,240 --> 00:10:07,480
pretty simple piece of code but it has

00:10:05,339 --> 00:10:12,399
several changes that needed to be made

00:10:07,480 --> 00:10:13,959
the first one is here where we use a

00:10:12,399 --> 00:10:16,149
different approach to check if the

00:10:13,959 --> 00:10:18,519
experience exists so that's the one

00:10:16,149 --> 00:10:20,529
change that we need to make here we need

00:10:18,519 --> 00:10:24,130
to use a different approach to update it

00:10:20,529 --> 00:10:25,860
and then we need to use again a

00:10:24,130 --> 00:10:29,440
different approach to create one and

00:10:25,860 --> 00:10:31,540
delete the existing experiences so it's

00:10:29,440 --> 00:10:33,760
three different changes and changes of

00:10:31,540 --> 00:10:36,100
logic not on which changes of certain

00:10:33,760 --> 00:10:40,089
references in a simple code snippet

00:10:36,100 --> 00:10:42,310
which is several lines long and if we

00:10:40,089 --> 00:10:44,230
scale this to the whole system even if

00:10:42,310 --> 00:10:45,760
you scale this to the to the method we

00:10:44,230 --> 00:10:47,829
have three more changes like this for

00:10:45,760 --> 00:10:49,630
the education part we have two more

00:10:47,829 --> 00:10:51,970
changes for the candidate details that

00:10:49,630 --> 00:10:54,430
we saw on the previous slide and it

00:10:51,970 --> 00:10:56,500
makes eight changes of code in a single

00:10:54,430 --> 00:10:58,360
method so scaling this to the whole

00:10:56,500 --> 00:11:00,519
system scaling this to the admin side

00:10:58,360 --> 00:11:03,520
would really take a lot of changes to

00:11:00,519 --> 00:11:05,589
get from the third-party systems

00:11:03,520 --> 00:11:07,450
using a local database and use the

00:11:05,589 --> 00:11:12,459
flexibility that this local database

00:11:07,450 --> 00:11:16,510
would offer so this is where the solid

00:11:12,459 --> 00:11:18,700
design principle principles come so I'd

00:11:16,510 --> 00:11:21,130
like to go through this example again

00:11:18,700 --> 00:11:23,380
but by using the solid design principles

00:11:21,130 --> 00:11:25,050
and seeing how they can help us simplify

00:11:23,380 --> 00:11:29,080
this code and make it much easier to

00:11:25,050 --> 00:11:32,589
change at a later point but first just

00:11:29,080 --> 00:11:35,260
as a little overview again of what the

00:11:32,589 --> 00:11:36,490
solid design principles are so the first

00:11:35,260 --> 00:11:38,709
one is the single responsibility

00:11:36,490 --> 00:11:40,779
principle which basically states that

00:11:38,709 --> 00:11:43,360
every class should have only one

00:11:40,779 --> 00:11:45,279
responsibility you shouldn't mix

00:11:43,360 --> 00:11:48,399
everything in one class like we did with

00:11:45,279 --> 00:11:50,260
our candidates API you should separate

00:11:48,399 --> 00:11:52,570
all of the specific responsibilities and

00:11:50,260 --> 00:11:57,010
specific smaller classes that are

00:11:52,570 --> 00:11:58,420
responsible for for each thing so you

00:11:57,010 --> 00:12:00,220
might think about it's like instead of

00:11:58,420 --> 00:12:02,860
having on one large class with one

00:12:00,220 --> 00:12:04,779
generic name you would have several

00:12:02,860 --> 00:12:07,000
smaller classes with more specific names

00:12:04,779 --> 00:12:12,070
and have those names really define what

00:12:07,000 --> 00:12:15,390
that class is responsible about the

00:12:12,070 --> 00:12:17,860
second one is the open closed principle

00:12:15,390 --> 00:12:20,829
this one can be confusing but it's

00:12:17,860 --> 00:12:24,640
really very important and can help a lot

00:12:20,829 --> 00:12:27,070
in extending systems so what it stands

00:12:24,640 --> 00:12:28,899
for is having a system that's open for

00:12:27,070 --> 00:12:31,410
extension but closed for modification

00:12:28,899 --> 00:12:33,910
and this means that you should be

00:12:31,410 --> 00:12:36,370
designing your code in a way that allows

00:12:33,910 --> 00:12:38,829
you to add new features and extend or

00:12:36,370 --> 00:12:41,350
change existing functionality by adding

00:12:38,829 --> 00:12:43,990
new code to it instead of modifying what

00:12:41,350 --> 00:12:46,000
you've already wrote because if we keep

00:12:43,990 --> 00:12:48,130
on modifying what we have we would never

00:12:46,000 --> 00:12:50,920
get to a point where our system is

00:12:48,130 --> 00:12:53,260
tested enough so that it can become

00:12:50,920 --> 00:12:55,329
stable we constantly change something

00:12:53,260 --> 00:12:57,850
and we constantly need to retest it

00:12:55,329 --> 00:13:00,610
right so it's it's never at a point

00:12:57,850 --> 00:13:02,380
where it's resistant to bugs a good

00:13:00,610 --> 00:13:05,740
example about using the open closed

00:13:02,380 --> 00:13:09,339
principle is with open source libraries

00:13:05,740 --> 00:13:12,910
so whenever you use you install a

00:13:09,339 --> 00:13:15,070
package with with Composer you hopefully

00:13:12,910 --> 00:13:17,110
don't go in the vendor folder and edit

00:13:15,070 --> 00:13:17,529
everything there and then use it like

00:13:17,110 --> 00:13:19,870
that

00:13:17,529 --> 00:13:22,149
you just add another piece of code on

00:13:19,870 --> 00:13:24,129
top of it that modifies what you used

00:13:22,149 --> 00:13:29,379
what you get from from that package and

00:13:24,129 --> 00:13:31,990
it adapts it to your specific needs and

00:13:29,379 --> 00:13:35,019
specific use case and that's why the

00:13:31,990 --> 00:13:37,660
open-source libraries are so stable

00:13:35,019 --> 00:13:41,589
because they get tested all the time and

00:13:37,660 --> 00:13:43,389
that they rarely get modified so this

00:13:41,589 --> 00:13:46,000
this is in particularly important for

00:13:43,389 --> 00:13:48,040
the core of your system not not for

00:13:46,000 --> 00:13:51,879
every part of it of course but the core

00:13:48,040 --> 00:13:54,100
of your system has to be resistant to

00:13:51,879 --> 00:13:56,410
bugs and you should change it less so

00:13:54,100 --> 00:14:01,060
that you can get to a point where it's

00:13:56,410 --> 00:14:04,240
more stable and the third one is the

00:14:01,060 --> 00:14:06,069
Liskov substitution principle and this

00:14:04,240 --> 00:14:08,439
states that you should always be careful

00:14:06,069 --> 00:14:10,750
about what a class does before you

00:14:08,439 --> 00:14:13,509
replace it with another one and this is

00:14:10,750 --> 00:14:15,850
not only about the interface that it

00:14:13,509 --> 00:14:17,980
implements or what methods it has it's

00:14:15,850 --> 00:14:20,290
also about what those methods do and

00:14:17,980 --> 00:14:22,060
what they return or whether they throw

00:14:20,290 --> 00:14:23,920
an exception or not when you have a

00:14:22,060 --> 00:14:25,209
class that returns something and then

00:14:23,920 --> 00:14:27,939
replace it with another class that

00:14:25,209 --> 00:14:30,880
returns something else even though it

00:14:27,939 --> 00:14:37,060
uses the same method then your code will

00:14:30,880 --> 00:14:39,310
eventually break the fourth one is the

00:14:37,060 --> 00:14:41,470
interface segregation principle and this

00:14:39,310 --> 00:14:44,319
goes closely with the single

00:14:41,470 --> 00:14:46,649
responsibility one it's essentially for

00:14:44,319 --> 00:14:50,170
separating your code in smaller pieces

00:14:46,649 --> 00:14:52,600
smaller interfaces that you will depend

00:14:50,170 --> 00:14:58,689
on instead of depending on a large class

00:14:52,600 --> 00:15:01,389
and why this is helpful about is you

00:14:58,689 --> 00:15:03,790
would use smaller classes or smaller

00:15:01,389 --> 00:15:06,040
interfaces to handle something in your

00:15:03,790 --> 00:15:08,259
code if you depend on a large class if

00:15:06,040 --> 00:15:10,389
we always depend on this candidate class

00:15:08,259 --> 00:15:13,569
we would depend on the ability to create

00:15:10,389 --> 00:15:16,750
notes or send emails when we actually

00:15:13,569 --> 00:15:19,329
just need two unqualified a candidate so

00:15:16,750 --> 00:15:21,370
your code is very coupled together and

00:15:19,329 --> 00:15:23,800
one change in one area can cause a lot

00:15:21,370 --> 00:15:26,680
of problems in another area and that's

00:15:23,800 --> 00:15:28,389
why you it's very important to set to

00:15:26,680 --> 00:15:30,730
separate those interfaces and depend on

00:15:28,389 --> 00:15:31,059
only things that you need and things

00:15:30,730 --> 00:15:35,499
that

00:15:31,059 --> 00:15:38,469
want to use and finally the last one is

00:15:35,499 --> 00:15:40,689
the dependency inversion principle this

00:15:38,469 --> 00:15:42,999
one states that it should always depend

00:15:40,689 --> 00:15:46,209
on abstractions instead of depending on

00:15:42,999 --> 00:15:48,939
concrete implementations and one good

00:15:46,209 --> 00:15:52,509
example over here is comes from the real

00:15:48,939 --> 00:15:54,819
world so when you want to charge your

00:15:52,509 --> 00:15:58,329
computer at your office or your home

00:15:54,819 --> 00:16:00,639
you usually plug it and use a socket to

00:15:58,329 --> 00:16:02,289
do that you don't go behind the wall and

00:16:00,639 --> 00:16:04,239
wire things up so that you can get

00:16:02,289 --> 00:16:06,129
electricity you don't care how things

00:16:04,239 --> 00:16:08,469
are done behind that socket that's

00:16:06,129 --> 00:16:10,209
that's done for you it happens in the

00:16:08,469 --> 00:16:12,189
background and you just want to use it

00:16:10,209 --> 00:16:14,769
and you use this socket as an interface

00:16:12,189 --> 00:16:17,229
to get electricity and this is how your

00:16:14,769 --> 00:16:19,389
code should behave it should it should

00:16:17,229 --> 00:16:21,969
use what you have in the background and

00:16:19,389 --> 00:16:24,279
know that it's somewhere but it doesn't

00:16:21,969 --> 00:16:25,509
have to know what happens in the

00:16:24,279 --> 00:16:26,979
background it doesn't have to wire

00:16:25,509 --> 00:16:29,549
things up in the background it just

00:16:26,979 --> 00:16:32,369
needs to rely on an interface that

00:16:29,549 --> 00:16:38,169
essentially enables them enables it to

00:16:32,369 --> 00:16:41,889
to complete a functionality so if we go

00:16:38,169 --> 00:16:45,039
back to our code now let's see how many

00:16:41,889 --> 00:16:48,819
places we violate this principle these

00:16:45,039 --> 00:16:49,599
principles the five of them first we

00:16:48,819 --> 00:16:52,439
always still have too many

00:16:49,599 --> 00:16:57,609
responsibilities here the first one is

00:16:52,439 --> 00:16:59,139
the candidate update part so this thing

00:16:57,609 --> 00:17:02,409
again updates all of the candidate

00:16:59,139 --> 00:17:05,139
details sends them to to the third party

00:17:02,409 --> 00:17:06,459
API and it's a separate responsibility

00:17:05,139 --> 00:17:10,809
that should be moved away from this

00:17:06,459 --> 00:17:14,049
controller the second one is updating

00:17:10,809 --> 00:17:16,509
the experience so this is this part is

00:17:14,049 --> 00:17:18,999
again responsible for the experiences of

00:17:16,509 --> 00:17:20,589
the developer so it should be probably

00:17:18,999 --> 00:17:24,369
somewhere else where it would be

00:17:20,589 --> 00:17:28,740
specific specifically handling the

00:17:24,369 --> 00:17:31,869
experiences the third part is

00:17:28,740 --> 00:17:34,149
manipulating the education similar to

00:17:31,869 --> 00:17:36,879
the experience part it has a separate

00:17:34,149 --> 00:17:40,629
logic and it's probably better off in

00:17:36,879 --> 00:17:42,190
another place and finally the fourth

00:17:40,629 --> 00:17:43,390
responsibility

00:17:42,190 --> 00:17:46,210
which is what our controller should

00:17:43,390 --> 00:17:48,220
actually be responsible for is returning

00:17:46,210 --> 00:17:50,380
what we have to the client so

00:17:48,220 --> 00:17:52,450
controllers are responsible for handling

00:17:50,380 --> 00:17:54,700
the flow of the application they they

00:17:52,450 --> 00:17:57,040
should get the details from from the

00:17:54,700 --> 00:18:00,460
client they should pass everything to

00:17:57,040 --> 00:18:03,700
separate entities who who handle things

00:18:00,460 --> 00:18:05,740
for it and then they should return the

00:18:03,700 --> 00:18:07,300
proper response to the client that you

00:18:05,740 --> 00:18:10,570
don't care about how everything is

00:18:07,300 --> 00:18:13,510
handled in the background so all of this

00:18:10,570 --> 00:18:16,870
responsibility is apart from the part

00:18:13,510 --> 00:18:22,300
where we get the request and that's that

00:18:16,870 --> 00:18:23,920
so pests as a as a parameter to the to

00:18:22,300 --> 00:18:25,750
dysfunction so the request is handled

00:18:23,920 --> 00:18:27,100
separately and it's validated separately

00:18:25,750 --> 00:18:29,410
so it doesn't mess up this code

00:18:27,100 --> 00:18:31,000
additionally but still we have three

00:18:29,410 --> 00:18:33,340
responsibilities that needs to be moved

00:18:31,000 --> 00:18:37,560
away from here and then we can only

00:18:33,340 --> 00:18:40,360
handle the the flow of the application

00:18:37,560 --> 00:18:42,780
so it's an obvious valuation of single

00:18:40,360 --> 00:18:46,780
responsibility principle

00:18:42,780 --> 00:18:48,430
now what about extending this code with

00:18:46,780 --> 00:18:52,060
additional functionality so right now we

00:18:48,430 --> 00:18:54,940
have education we have experience but at

00:18:52,060 --> 00:18:58,210
one point we needed to add projects as

00:18:54,940 --> 00:19:00,310
well and further developers the project

00:18:58,210 --> 00:19:02,080
snippet would be similar it would need

00:19:00,310 --> 00:19:05,850
to go through all of the projects update

00:19:02,080 --> 00:19:08,620
them or delete or add creates new ones

00:19:05,850 --> 00:19:11,530
so it's essentially a similar code

00:19:08,620 --> 00:19:14,710
snippet that said it right before we

00:19:11,530 --> 00:19:19,030
returned the details to our view and

00:19:14,710 --> 00:19:21,670
this is modifying this function it makes

00:19:19,030 --> 00:19:24,640
it much Messier it makes it much larger

00:19:21,670 --> 00:19:26,620
and it also has to modify the class a

00:19:24,640 --> 00:19:30,340
candidate class that we were relying on

00:19:26,620 --> 00:19:31,530
because we had everything handled back

00:19:30,340 --> 00:19:33,550
there

00:19:31,530 --> 00:19:37,480
this violates the open closed principle

00:19:33,550 --> 00:19:39,040
because if we keep on changing this this

00:19:37,480 --> 00:19:41,980
method whenever we need to add something

00:19:39,040 --> 00:19:44,200
new to to this profile we would really

00:19:41,980 --> 00:19:45,760
get to a point where we would never get

00:19:44,200 --> 00:19:47,980
to a point where everything is stable we

00:19:45,760 --> 00:19:50,530
constantly need to retest everything and

00:19:47,980 --> 00:19:52,740
six bucks when we're we don't expect

00:19:50,530 --> 00:19:52,740
them

00:19:54,520 --> 00:20:03,650
in this part over here so we depend on

00:20:00,040 --> 00:20:05,510
the candidate class directly so we

00:20:03,650 --> 00:20:07,880
depend on a full class that has all of

00:20:05,510 --> 00:20:10,040
the methods which violates the interface

00:20:07,880 --> 00:20:12,830
segregation principle because again we

00:20:10,040 --> 00:20:15,740
shouldn't rely we shouldn't depend on

00:20:12,830 --> 00:20:17,480
something that we don't want to use but

00:20:15,740 --> 00:20:19,610
it also violates the dependency

00:20:17,480 --> 00:20:21,530
inversion principle because we are

00:20:19,610 --> 00:20:23,450
depending on something concrete we're

00:20:21,530 --> 00:20:26,960
trying our controller is trying to wire

00:20:23,450 --> 00:20:29,720
things up so it can update the candidate

00:20:26,960 --> 00:20:31,100
details it doesn't rely on on the

00:20:29,720 --> 00:20:32,900
implementation that we have in the

00:20:31,100 --> 00:20:35,330
background and this makes it much more

00:20:32,900 --> 00:20:38,570
difficult to change in the future and to

00:20:35,330 --> 00:20:44,570
replace it with the local database and

00:20:38,570 --> 00:20:47,390
how we would handle it now this edit

00:20:44,570 --> 00:20:50,860
part it was pretty simple and short but

00:20:47,390 --> 00:20:55,070
it still has some slight issues with it

00:20:50,860 --> 00:20:57,020
so again we depend on this concrete

00:20:55,070 --> 00:21:01,070
class for the candidate that has

00:20:57,020 --> 00:21:02,840
everything coupled together but if we

00:21:01,070 --> 00:21:05,030
need to change it it's it's just a short

00:21:02,840 --> 00:21:06,560
change instead of depending on the third

00:21:05,030 --> 00:21:08,300
party API we are again using our

00:21:06,560 --> 00:21:13,060
eloquent model and we can do everything

00:21:08,300 --> 00:21:16,510
in two lines after that we also need to

00:21:13,060 --> 00:21:19,670
change our view so instead of using

00:21:16,510 --> 00:21:22,250
separate variable we are now relying on

00:21:19,670 --> 00:21:25,040
the relation provided to us by the by

00:21:22,250 --> 00:21:27,470
the model and this should work right

00:21:25,040 --> 00:21:32,240
it's fairly simple three lines of code

00:21:27,470 --> 00:21:35,510
it shouldn't break anywhere but it does

00:21:32,240 --> 00:21:37,910
and it breaks at a point where we forgot

00:21:35,510 --> 00:21:40,220
that we were using a race and we're now

00:21:37,910 --> 00:21:43,730
trying to pass it an object of candidate

00:21:40,220 --> 00:21:45,260
experience so it violates the risk of

00:21:43,730 --> 00:21:47,510
substitution principle because we

00:21:45,260 --> 00:21:50,450
weren't really aware of what we're using

00:21:47,510 --> 00:21:52,670
and how we need to access the data that

00:21:50,450 --> 00:21:54,410
we have we just replaced one class with

00:21:52,670 --> 00:21:56,710
another and we hoped it would work

00:21:54,410 --> 00:21:56,710
properly

00:21:58,380 --> 00:22:06,210
so what did it took to move to a local

00:22:02,580 --> 00:22:08,490
database first we needed to create the

00:22:06,210 --> 00:22:11,520
models for all of our database tables

00:22:08,490 --> 00:22:15,210
which is fine we would obviously have to

00:22:11,520 --> 00:22:16,950
do it at some point then we need we

00:22:15,210 --> 00:22:19,440
needed to change all the controller

00:22:16,950 --> 00:22:21,360
dependencies so instead of depending on

00:22:19,440 --> 00:22:24,090
the third party API we're now depending

00:22:21,360 --> 00:22:26,309
on these eloquent models and we have to

00:22:24,090 --> 00:22:30,630
go everywhere in the code and replace

00:22:26,309 --> 00:22:32,700
them manually apart from that we also

00:22:30,630 --> 00:22:36,299
need to change the control controller

00:22:32,700 --> 00:22:37,860
logic because it needs to rely on the

00:22:36,299 --> 00:22:40,440
functionality provided by these new

00:22:37,860 --> 00:22:43,530
models instead of relying on the third

00:22:40,440 --> 00:22:45,659
party API and this includes all parts of

00:22:43,530 --> 00:22:47,280
the system it includes the developer

00:22:45,659 --> 00:22:50,070
side where developers can log in and

00:22:47,280 --> 00:22:52,460
edit their profiles or register it also

00:22:50,070 --> 00:22:54,360
involves the admin side where we have

00:22:52,460 --> 00:22:57,870
management's of all of the candidates

00:22:54,360 --> 00:23:00,179
and then sending proposals adding

00:22:57,870 --> 00:23:05,340
profiles or everything else that was

00:23:00,179 --> 00:23:06,990
coming afterwards we had to change all

00:23:05,340 --> 00:23:08,539
the views because we were using an array

00:23:06,990 --> 00:23:13,650
previously and now we want to use

00:23:08,539 --> 00:23:15,539
objects and collections of course we

00:23:13,650 --> 00:23:17,190
need to adapt our unit test because we

00:23:15,539 --> 00:23:19,860
changed everything we obviously need to

00:23:17,190 --> 00:23:22,380
change them too and we need to retest

00:23:19,860 --> 00:23:24,120
all of it as a whole because we

00:23:22,380 --> 00:23:26,539
introduced so many changes in the system

00:23:24,120 --> 00:23:31,159
that it will probably break somewhere

00:23:26,539 --> 00:23:36,240
and what we estimated for this was

00:23:31,159 --> 00:23:38,370
actually 30 days less it's probably an

00:23:36,240 --> 00:23:40,860
older version of the presentation with

00:23:38,370 --> 00:23:44,039
the wrong estimation but still it's

00:23:40,860 --> 00:23:47,730
something too long to to take to move

00:23:44,039 --> 00:23:49,200
from one one version to another so it's

00:23:47,730 --> 00:23:51,630
not something that we wanted to do

00:23:49,200 --> 00:23:54,570
because still we wanted to go lean and

00:23:51,630 --> 00:24:00,179
then add things as we as we moved

00:23:54,570 --> 00:24:02,520
forward so we can do better than this

00:24:00,179 --> 00:24:05,039
how can we incorporate all of these

00:24:02,520 --> 00:24:07,500
principles into our code and make it

00:24:05,039 --> 00:24:09,559
work better and make it easier to extend

00:24:07,500 --> 00:24:11,320
and change in the future

00:24:09,559 --> 00:24:12,970
first when

00:24:11,320 --> 00:24:15,010
to separate the responsibilities in

00:24:12,970 --> 00:24:17,560
specific classes so instead of relying

00:24:15,010 --> 00:24:20,200
on one large candidate class we would

00:24:17,560 --> 00:24:22,780
now separate everything into candidate

00:24:20,200 --> 00:24:25,660
experience candidate education candid

00:24:22,780 --> 00:24:29,320
project candidate basic details so

00:24:25,660 --> 00:24:33,130
separate all of them in smaller smaller

00:24:29,320 --> 00:24:35,230
specific classes that have names which

00:24:33,130 --> 00:24:38,890
define what the class is responsible

00:24:35,230 --> 00:24:40,360
about the second step would be to design

00:24:38,890 --> 00:24:42,430
the code in a way that allows us to

00:24:40,360 --> 00:24:47,740
extend it by adding new code instead of

00:24:42,430 --> 00:24:50,200
changing the existing one third to be

00:24:47,740 --> 00:24:52,990
aware of the return type so when we

00:24:50,200 --> 00:24:55,150
expect an array we should never send an

00:24:52,990 --> 00:24:57,880
object so we should think about this

00:24:55,150 --> 00:25:02,170
upfront and use object since the

00:24:57,880 --> 00:25:05,530
beginning we shouldn't depend on

00:25:02,170 --> 00:25:08,500
concrete implementations this would make

00:25:05,530 --> 00:25:11,800
it much easier for us to change to the

00:25:08,500 --> 00:25:14,200
new implementation afterwards and we

00:25:11,800 --> 00:25:16,300
shouldn't depend on unnecessary methods

00:25:14,200 --> 00:25:18,550
so we shouldn't depend on things we

00:25:16,300 --> 00:25:20,590
don't use because those things it can

00:25:18,550 --> 00:25:25,780
break code where it's not expected to

00:25:20,590 --> 00:25:27,580
break now this is a first step what we

00:25:25,780 --> 00:25:31,500
do here is actually creating an

00:25:27,580 --> 00:25:34,270
interface interfaces for all of the the

00:25:31,500 --> 00:25:36,070
separate features that we have we have

00:25:34,270 --> 00:25:38,620
candidate experience interface which

00:25:36,070 --> 00:25:41,350
handle which has all of the methods we

00:25:38,620 --> 00:25:43,810
need to to execute the update process

00:25:41,350 --> 00:25:45,810
all of the process is related to the

00:25:43,810 --> 00:25:47,920
experience and then we also have

00:25:45,810 --> 00:25:49,810
candidate education and candidate

00:25:47,920 --> 00:25:52,450
interfaces which are collapsed just for

00:25:49,810 --> 00:25:57,790
the simplicity but they basically do the

00:25:52,450 --> 00:25:59,290
the same thing and this is where we

00:25:57,790 --> 00:26:01,090
segregate the interfaces so this is

00:25:59,290 --> 00:26:02,770
where we comply to the interface

00:26:01,090 --> 00:26:04,600
segregation principle because instead of

00:26:02,770 --> 00:26:10,390
depending on one huge class we are now

00:26:04,600 --> 00:26:13,030
depending on separate interfaces the

00:26:10,390 --> 00:26:14,860
second step is to create repositories so

00:26:13,030 --> 00:26:16,210
each of these repositories would be the

00:26:14,860 --> 00:26:18,460
concrete implementation of our

00:26:16,210 --> 00:26:21,000
interfaces this is how things will work

00:26:18,460 --> 00:26:23,980
in the background this would be the

00:26:21,000 --> 00:26:26,740
wiring and our interfaces will be

00:26:23,980 --> 00:26:28,720
sockets so this class is implement the

00:26:26,740 --> 00:26:31,179
interface that we interfaces that we

00:26:28,720 --> 00:26:32,740
defined and they comply with the single

00:26:31,179 --> 00:26:39,040
responsibility principle because they

00:26:32,740 --> 00:26:40,990
are small and your specific third step

00:26:39,040 --> 00:26:45,220
would be to create several separate

00:26:40,990 --> 00:26:47,500
classes that would mimic model classes

00:26:45,220 --> 00:26:50,110
which we would be using later so over

00:26:47,500 --> 00:26:52,410
here we would just have a simple class

00:26:50,110 --> 00:26:54,429
that has methods for returning

00:26:52,410 --> 00:26:57,220
relationships like education and

00:26:54,429 --> 00:26:59,830
experience in order to not have to

00:26:57,220 --> 00:27:02,710
create use separate variables and then

00:26:59,830 --> 00:27:04,570
change them with their relationships so

00:27:02,710 --> 00:27:06,250
this is where we think about the

00:27:04,570 --> 00:27:09,460
substitutions and we think about what

00:27:06,250 --> 00:27:11,679
our classes do and what their methods

00:27:09,460 --> 00:27:15,150
actually return so that we can know how

00:27:11,679 --> 00:27:17,500
to replace them at a later point and

00:27:15,150 --> 00:27:22,000
this is how our update function looks

00:27:17,500 --> 00:27:24,429
like so we got from over 50 lines of

00:27:22,000 --> 00:27:26,340
code to a code of four lines where

00:27:24,429 --> 00:27:28,900
everything is delegated to separate

00:27:26,340 --> 00:27:31,270
separate methods to separate classes and

00:27:28,900 --> 00:27:32,710
you will notice that this code is much

00:27:31,270 --> 00:27:34,419
more readable it's much easier to

00:27:32,710 --> 00:27:36,309
understand if you need to see how you

00:27:34,419 --> 00:27:38,710
manage the experiences you would

00:27:36,309 --> 00:27:40,419
probably find the implementation of the

00:27:38,710 --> 00:27:42,160
candidate experience and see what's done

00:27:40,419 --> 00:27:44,470
over there if you don't need it then you

00:27:42,160 --> 00:27:46,570
don't need to read through unnecessary

00:27:44,470 --> 00:27:50,620
code in order to get to the point where

00:27:46,570 --> 00:27:52,660
you need to change something so you will

00:27:50,620 --> 00:27:54,700
notice here that we depend on the

00:27:52,660 --> 00:27:59,460
interface instead of the actual

00:27:54,700 --> 00:28:01,840
repositories and this is where we did

00:27:59,460 --> 00:28:04,330
dependency inversion so we depend on

00:28:01,840 --> 00:28:06,100
abstractions and with this we would be

00:28:04,330 --> 00:28:07,600
able to just change the implementation

00:28:06,100 --> 00:28:09,580
in the background by adding new

00:28:07,600 --> 00:28:11,530
repositories and everything would work

00:28:09,580 --> 00:28:13,419
we would not need to go through all of

00:28:11,530 --> 00:28:16,419
our code and all of our controllers to

00:28:13,419 --> 00:28:20,410
to replace the dependencies we would

00:28:16,419 --> 00:28:22,950
just need to add new add new files new

00:28:20,410 --> 00:28:26,110
classes and everything would work and

00:28:22,950 --> 00:28:27,910
that's the open closed principle we

00:28:26,110 --> 00:28:31,330
extend by adding new code instead of

00:28:27,910 --> 00:28:34,090
modifying the existing one at that point

00:28:31,330 --> 00:28:34,950
our code would get tested well enough

00:28:34,090 --> 00:28:36,540
and

00:28:34,950 --> 00:28:39,150
it would get much more stable than it

00:28:36,540 --> 00:28:43,200
would if we were just going back and

00:28:39,150 --> 00:28:45,410
changing everything all the time there's

00:28:43,200 --> 00:28:49,710
one change that we need to do and that's

00:28:45,410 --> 00:28:53,580
where we bind the actual implementations

00:28:49,710 --> 00:28:56,070
to the to the interfaces and it's just a

00:28:53,580 --> 00:28:58,830
three lines change so instead of

00:28:56,070 --> 00:29:01,470
depending on our third party API we're

00:28:58,830 --> 00:29:03,180
now depending on the new repositories

00:29:01,470 --> 00:29:04,830
and that's it that's all we need to

00:29:03,180 --> 00:29:10,710
change in our code to make it work with

00:29:04,830 --> 00:29:14,010
the local database so let's see how this

00:29:10,710 --> 00:29:15,570
worked out again we may have to create a

00:29:14,010 --> 00:29:19,650
local model store the new database

00:29:15,570 --> 00:29:22,530
tables we had to create repositories now

00:29:19,650 --> 00:29:24,210
that work with the local database

00:29:22,530 --> 00:29:28,320
because our new structure requires

00:29:24,210 --> 00:29:31,020
repositories to handle everything we had

00:29:28,320 --> 00:29:32,310
to write unit tests for the new classes

00:29:31,020 --> 00:29:37,860
but only for them because everything

00:29:32,310 --> 00:29:40,050
else works out of the box and we need to

00:29:37,860 --> 00:29:43,020
bind the repository so that change that

00:29:40,050 --> 00:29:45,120
we need to make just make sure that when

00:29:43,020 --> 00:29:47,960
we rely on the interface it uses the

00:29:45,120 --> 00:29:49,950
repositories the repository that we need

00:29:47,960 --> 00:29:53,550
and that's it

00:29:49,950 --> 00:29:56,730
and with this we estimated five days and

00:29:53,550 --> 00:29:59,160
you might think it's too big of a

00:29:56,730 --> 00:30:02,100
difference and it's too unrealistic but

00:29:59,160 --> 00:30:04,830
essentially we are relying on ten

00:30:02,100 --> 00:30:07,500
methods or twelve methods from the third

00:30:04,830 --> 00:30:10,170
party API we don't have too many methods

00:30:07,500 --> 00:30:11,880
that we rely on the problem is that we

00:30:10,170 --> 00:30:13,920
are using those same methods over and

00:30:11,880 --> 00:30:15,390
over again in our code and then what we

00:30:13,920 --> 00:30:18,210
need to change something we need to go

00:30:15,390 --> 00:30:21,060
inside our code and change change it

00:30:18,210 --> 00:30:24,000
everywhere if we if we were using this

00:30:21,060 --> 00:30:25,950
approach where we rely on the solid

00:30:24,000 --> 00:30:29,310
design principles we would just need to

00:30:25,950 --> 00:30:31,470
go in our repository write 12 new

00:30:29,310 --> 00:30:37,590
methods in all of our specific classes

00:30:31,470 --> 00:30:41,200
and that would be it so it's

00:30:37,590 --> 00:30:43,840
been a long overview but to sum it all

00:30:41,200 --> 00:30:47,950
up what does it take to become better

00:30:43,840 --> 00:30:50,049
developers the first thing to do is to

00:30:47,950 --> 00:30:52,330
incorporate thoughtful programming so

00:30:50,049 --> 00:30:54,279
you should always care about what you're

00:30:52,330 --> 00:30:55,779
working on you should always think about

00:30:54,279 --> 00:30:58,059
what's the best solution for your

00:30:55,779 --> 00:30:59,320
problem instead of what's the easiest

00:30:58,059 --> 00:31:00,760
solution to it

00:30:59,320 --> 00:31:02,799
you need to think about the bigger

00:31:00,760 --> 00:31:05,919
picture talk to other people try to

00:31:02,799 --> 00:31:08,470
understand what your task requires it's

00:31:05,919 --> 00:31:10,330
not just a story that's on JIRA or

00:31:08,470 --> 00:31:12,820
whatever you're using for managing the

00:31:10,330 --> 00:31:14,200
project it's something more and it's

00:31:12,820 --> 00:31:16,149
something that's related to the business

00:31:14,200 --> 00:31:17,830
logic code of the application that

00:31:16,149 --> 00:31:19,809
you're building and if you understand

00:31:17,830 --> 00:31:22,240
what you're working on you would be able

00:31:19,809 --> 00:31:24,370
to understand how to implement it better

00:31:22,240 --> 00:31:26,860
you would be able to write code it would

00:31:24,370 --> 00:31:32,019
be extendable and easy to maintain on

00:31:26,860 --> 00:31:34,769
the long run the second one is to think

00:31:32,019 --> 00:31:37,570
about the UX of your code and this is

00:31:34,769 --> 00:31:39,960
developer experience in our case so the

00:31:37,570 --> 00:31:43,360
users of our code or other developers or

00:31:39,960 --> 00:31:44,830
we are the users of our code and you

00:31:43,360 --> 00:31:48,549
should be thinking about writing code

00:31:44,830 --> 00:31:50,049
that another developer would like to

00:31:48,549 --> 00:31:52,240
continue working on

00:31:50,049 --> 00:31:55,200
you should write code that other team

00:31:52,240 --> 00:31:58,360
members would like to hop on and

00:31:55,200 --> 00:32:00,519
continue working on it with you or you

00:31:58,360 --> 00:32:02,740
would be able to go back to something

00:32:00,519 --> 00:32:05,799
that you've been working on a year ago

00:32:02,740 --> 00:32:08,649
and know what you actually did there

00:32:05,799 --> 00:32:11,139
because your code is well structured and

00:32:08,649 --> 00:32:12,730
it's readable and understandable so

00:32:11,139 --> 00:32:14,260
always think about even if you're not

00:32:12,730 --> 00:32:17,440
using the solid design principle

00:32:14,260 --> 00:32:19,690
principles always think about writing

00:32:17,440 --> 00:32:22,260
code that's easy to read and easy to

00:32:19,690 --> 00:32:22,260
understand

00:32:24,010 --> 00:32:30,010
we talked about this a while so using

00:32:28,570 --> 00:32:32,500
the solid design principles you can

00:32:30,010 --> 00:32:35,860
write code that's easy to maintain easy

00:32:32,500 --> 00:32:40,210
to extend and easy to change on the long

00:32:35,860 --> 00:32:42,370
run but it's not the rule so it always

00:32:40,210 --> 00:32:44,860
depends on your use case and it always

00:32:42,370 --> 00:32:47,080
depends on what you need to do how

00:32:44,860 --> 00:32:49,179
complex your code is and whether or not

00:32:47,080 --> 00:32:52,750
it should be extended or changed in the

00:32:49,179 --> 00:32:53,200
future so think about it use common

00:32:52,750 --> 00:32:54,970
sense

00:32:53,200 --> 00:32:57,549
think about your trade-offs whether you

00:32:54,970 --> 00:32:59,590
should spend more time structuring your

00:32:57,549 --> 00:33:03,480
code and writing better architecture

00:32:59,590 --> 00:33:06,130
upfront or that's unnecessary because

00:33:03,480 --> 00:33:09,870
solid takes a bit more time writing code

00:33:06,130 --> 00:33:12,850
at the beginning so it can get easier in

00:33:09,870 --> 00:33:17,830
on the long run to change it and to to

00:33:12,850 --> 00:33:19,240
extend it so it's your tool it's not

00:33:17,830 --> 00:33:22,149
your goal so you should never try to

00:33:19,240 --> 00:33:24,820
achieve solve it as a goal you should

00:33:22,149 --> 00:33:27,669
use it as other principles to achieve

00:33:24,820 --> 00:33:31,330
code that's easier to work with and that

00:33:27,669 --> 00:33:33,700
would make your lives easier and finally

00:33:31,330 --> 00:33:35,500
please don't laugh on PHP jokes let's

00:33:33,700 --> 00:33:38,350
show everyone that we're a really nice

00:33:35,500 --> 00:33:42,840
community and we can be built a lot of

00:33:38,350 --> 00:33:42,840

YouTube URL: https://www.youtube.com/watch?v=ILFcofVJUF4


