Title: Get GOing with a New Language - Kat Zien - PHP UK Conference 2019
Publication date: 2019-03-22
Playlist: PHP UK Conference 2019
Description: 
	Learning more than one programming language is key to becoming a better developer. It is like adding a new tool to your toolbox. The more tools you have, the easier and quicker you’ll be able to tackle whatever job you need to do. You’ll also be able to use the right tool for the job, and who doesn’t like that?! I picked up Go (golang) a few years ago as it was becoming more popular among developers. Coming from a PHP background, I had no idea what channels or goroutines were or how is concurrency different from parallelism. I’ve got to say, it was a whole new world. Very different, but very cool. I was hooked! By happy coincidence, my company was looking to rewrite a legacy PHP app in Go. It was over 2000 lines of procedural and messy PHP4 with more downtime than I’m willing to admit to. I took on this project, and soon enough we had a much faster, more maintainable and much more reliable app for our customers. Go gave us options we would not have in PHP. The goal of this talk is to give you a good idea of what Go is and how it compares with PHP. We’ll look at the language itself as well as the tooling and communities around it. Even if you’re not sold on Go by the end of it, I hope you’ll leave inspired to go out there and learn whatever language you wanted to look into next.
Captions: 
	00:00:03,440 --> 00:00:09,059
hi everyone I'm Kat I'm a software

00:00:07,379 --> 00:00:10,559
engineer and I've dabbled in a few

00:00:09,059 --> 00:00:12,690
languages over the years probably as

00:00:10,559 --> 00:00:15,299
most of the people I did a fair amount

00:00:12,690 --> 00:00:17,570
of Java I did a bit of bash little bit

00:00:15,299 --> 00:00:20,340
of Ruby but I've been a PHP developer

00:00:17,570 --> 00:00:22,320
predominantly for the last seven or so

00:00:20,340 --> 00:00:24,390
years so this needs to be my first

00:00:22,320 --> 00:00:27,090
language and I still very much enjoy

00:00:24,390 --> 00:00:28,920
writing PHP but I picked up go two or

00:00:27,090 --> 00:00:33,090
three years ago as my second main

00:00:28,920 --> 00:00:35,309
language and I kind of got hooked these

00:00:33,090 --> 00:00:37,710
days it's actually my main language at

00:00:35,309 --> 00:00:39,000
work I no longer do PHP full-time I work

00:00:37,710 --> 00:00:42,480
at monza and we're building a modern

00:00:39,000 --> 00:00:45,120
Bank fully in go but I'm not here just

00:00:42,480 --> 00:00:46,500
to tell you how awesome go is this is

00:00:45,120 --> 00:00:48,989
after all the PHP conference so it

00:00:46,500 --> 00:00:50,670
wouldn't be fair but hopefully you'll

00:00:48,989 --> 00:00:53,789
get a good idea of what is what go is

00:00:50,670 --> 00:00:55,350
like and what I'm hoping to do is

00:00:53,789 --> 00:00:55,920
convince you to learn more than one

00:00:55,350 --> 00:00:58,020
language

00:00:55,920 --> 00:01:00,059
and I want to show you how this can

00:00:58,020 --> 00:01:01,739
change you as a programmer and make you

00:01:00,059 --> 00:01:03,449
a better programmer

00:01:01,739 --> 00:01:05,729
based on my experience we're switching

00:01:03,449 --> 00:01:09,840
from PHP to go and then for a bit back

00:01:05,729 --> 00:01:11,100
to PHP so you might be thinking what the

00:01:09,840 --> 00:01:15,229
hell cat for you to be cells all my

00:01:11,100 --> 00:01:17,400
problems but does it really sometimes

00:01:15,229 --> 00:01:19,530
developers who only know one language

00:01:17,400 --> 00:01:21,930
will try to do everything in that one

00:01:19,530 --> 00:01:24,030
language and sometimes that can cause

00:01:21,930 --> 00:01:25,680
you unnecessary grief there might be a

00:01:24,030 --> 00:01:27,600
better tool out there but how would you

00:01:25,680 --> 00:01:31,200
know about it if you don't know about it

00:01:27,600 --> 00:01:33,180
simply so just like you wouldn't use a

00:01:31,200 --> 00:01:35,850
screwdriver to hammer a nail into a wall

00:01:33,180 --> 00:01:38,189
maybe you shouldn't try to use PHP for

00:01:35,850 --> 00:01:39,960
everything under the Sun like it's not a

00:01:38,189 --> 00:01:41,700
multi-tool sometimes it is in fact

00:01:39,960 --> 00:01:44,119
called the double quote hammer where it

00:01:41,700 --> 00:01:45,990
sort of does a lot of things okay but

00:01:44,119 --> 00:01:48,149
you know sometimes there might be a

00:01:45,990 --> 00:01:50,790
better thing out there that's okay

00:01:48,149 --> 00:01:52,259
no language is perfect but that doesn't

00:01:50,790 --> 00:01:54,659
mean that you should just stick to the

00:01:52,259 --> 00:01:56,040
good old hammer for everything sometimes

00:01:54,659 --> 00:01:58,070
you'll do just fine but sometimes you

00:01:56,040 --> 00:02:00,149
just really limit what you can do so

00:01:58,070 --> 00:02:01,979
learning in other language is just like

00:02:00,149 --> 00:02:03,540
adding a new tool to your toolbox the

00:02:01,979 --> 00:02:06,329
more tools you have the more things you

00:02:03,540 --> 00:02:09,030
can do and you can do things the right

00:02:06,329 --> 00:02:11,000
way and it's a really great way to learn

00:02:09,030 --> 00:02:13,100
new concepts and new ideas

00:02:11,000 --> 00:02:14,690
and for how to solve things and we see

00:02:13,100 --> 00:02:16,190
this in languages themselves languages

00:02:14,690 --> 00:02:20,990
borrow ideas from each other all the

00:02:16,190 --> 00:02:22,850
time and like most of the thing most of

00:02:20,990 --> 00:02:25,940
it most most of the tools in PHP opinion

00:02:22,850 --> 00:02:27,890
inspired by things in Ruby for example a

00:02:25,940 --> 00:02:29,660
composer and peach who used to be

00:02:27,890 --> 00:02:31,400
procedural and then Java popularized

00:02:29,660 --> 00:02:33,560
object-oriented programming and then PHP

00:02:31,400 --> 00:02:35,270
became object-oriented so it's really

00:02:33,560 --> 00:02:37,340
worth keeping an eye out on other

00:02:35,270 --> 00:02:40,490
languages just to keep up to date with

00:02:37,340 --> 00:02:42,290
the latest trends it's not something

00:02:40,490 --> 00:02:44,390
look at go it's sometimes called golang

00:02:42,290 --> 00:02:46,370
the actual name is go colon is just kind

00:02:44,390 --> 00:02:49,030
of a way to help you googling for stuff

00:02:46,370 --> 00:02:51,530
because if you go for go don't try that

00:02:49,030 --> 00:02:54,709
it's gaining in popularity now but it's

00:02:51,530 --> 00:02:57,770
actually six seven years old go one was

00:02:54,709 --> 00:02:59,900
released in 2012 we now at go one point

00:02:57,770 --> 00:03:01,820
eleven and go to is in the works

00:02:59,900 --> 00:03:05,660
generics being one of the main features

00:03:01,820 --> 00:03:06,890
that are remote to be shipped with it it

00:03:05,660 --> 00:03:09,950
was written that Google by the three

00:03:06,890 --> 00:03:12,320
gentleman here Robert Griesemer Rob Pike

00:03:09,950 --> 00:03:15,290
and Ken Thompson so pretty big things in

00:03:12,320 --> 00:03:17,570
computer science go is compares I

00:03:15,290 --> 00:03:19,880
compiled a statically typed language

00:03:17,570 --> 00:03:21,920
it's a little bit like C but with the

00:03:19,880 --> 00:03:24,290
nice things like memory management and

00:03:21,920 --> 00:03:26,239
garbage collection so you don't have to

00:03:24,290 --> 00:03:28,550
allocate memory yourself it's great and

00:03:26,239 --> 00:03:29,959
one of the main selling points of go is

00:03:28,550 --> 00:03:33,680
the built-in concurrency which will of

00:03:29,959 --> 00:03:35,300
course look at in a minute the biggest

00:03:33,680 --> 00:03:37,790
difference between PHP and go are of

00:03:35,300 --> 00:03:40,010
course the mascots the logos and the

00:03:37,790 --> 00:03:42,739
derived mascots let's go for is versus

00:03:40,010 --> 00:03:45,410
elephants they come in lots of different

00:03:42,739 --> 00:03:47,030
shapes and sizes I have a small sample

00:03:45,410 --> 00:03:51,110
here I actually managed to get a

00:03:47,030 --> 00:03:53,900
matching set now the width of the gopher

00:03:51,110 --> 00:03:55,850
and the elephant is about the same but

00:03:53,900 --> 00:03:58,220
Gophers are about 20 to 25 percent

00:03:55,850 --> 00:04:00,620
dollars and the eye size is obviously

00:03:58,220 --> 00:04:02,660
the biggest differentiator I'm only

00:04:00,620 --> 00:04:05,450
kidding one of the biggest differences

00:04:02,660 --> 00:04:07,760
is how you run go apps versus how you

00:04:05,450 --> 00:04:09,860
run peach free apps peach fees and

00:04:07,760 --> 00:04:11,330
interpreted language so you need

00:04:09,860 --> 00:04:13,340
something like a server with a PHP

00:04:11,330 --> 00:04:15,860
interpreter on it to run your your

00:04:13,340 --> 00:04:17,390
program because that interpreter needs

00:04:15,860 --> 00:04:20,690
to take the code interpreted translate

00:04:17,390 --> 00:04:22,849
it into byte code and run it for you so

00:04:20,690 --> 00:04:23,669
that translation into machine code will

00:04:22,849 --> 00:04:26,490
happen on the fly

00:04:23,669 --> 00:04:27,810
as you're executing your program go on

00:04:26,490 --> 00:04:29,849
the other hand is a compiled language

00:04:27,810 --> 00:04:31,590
which means that you first compile the

00:04:29,849 --> 00:04:33,360
program for your for the right

00:04:31,590 --> 00:04:34,919
architecture and then you just run it

00:04:33,360 --> 00:04:36,810
like any other binary on your system

00:04:34,919 --> 00:04:40,169
there is nothing else that you need to

00:04:36,810 --> 00:04:42,719
run a go program why is this important

00:04:40,169 --> 00:04:44,159
because it affects the speed compiled

00:04:42,719 --> 00:04:45,659
languages are generally faster than

00:04:44,159 --> 00:04:47,099
interpreted languages for the obvious

00:04:45,659 --> 00:04:49,770
reasons that you do the work of

00:04:47,099 --> 00:04:51,930
translating it upfront translating it

00:04:49,770 --> 00:04:54,569
into machine code code up front so you

00:04:51,930 --> 00:04:56,750
don't do it at one time so here I have

00:04:54,569 --> 00:04:59,550
some benchmarks for a simple hello world

00:04:56,750 --> 00:05:01,229
application written in go node and PHP

00:04:59,550 --> 00:05:05,400
these are fairly old

00:05:01,229 --> 00:05:07,439
I think it's PGP 5.6 and go 1.4 but sort

00:05:05,400 --> 00:05:08,819
of the trend these days is about the

00:05:07,439 --> 00:05:13,080
same so that's why I didn't necessarily

00:05:08,819 --> 00:05:15,839
bother updating this so on the Left it's

00:05:13,080 --> 00:05:17,370
nginx serving a static file and your

00:05:15,839 --> 00:05:20,159
next is written in C so obviously it's

00:05:17,370 --> 00:05:21,870
the fastest and you can see that the

00:05:20,159 --> 00:05:24,360
first two columns on the left are

00:05:21,870 --> 00:05:28,919
compiled languages its nginx and C and

00:05:24,360 --> 00:05:31,289
go no js' is impressively close to go

00:05:28,919 --> 00:05:34,889
though and then we have h h vm and

00:05:31,289 --> 00:05:36,360
vanilla PHP vanilla PHP on this graph is

00:05:34,889 --> 00:05:40,560
about two and a half times slower than

00:05:36,360 --> 00:05:43,710
go at just under two 2k requests for a

00:05:40,560 --> 00:05:45,240
second these are just some bridge

00:05:43,710 --> 00:05:46,860
products that I found on the Internet I

00:05:45,240 --> 00:05:48,599
haven't reproduced them myself but that

00:05:46,860 --> 00:05:50,729
was exactly the feeling that I had when

00:05:48,599 --> 00:05:55,889
I started using go that I just felt so

00:05:50,729 --> 00:05:58,319
much faster and PHP is sort of

00:05:55,889 --> 00:06:00,719
interpreted and it's built for the speed

00:05:58,319 --> 00:06:02,399
of development go is compiled and it's

00:06:00,719 --> 00:06:05,759
built for runtime speed that was the

00:06:02,399 --> 00:06:08,219
primary driver behind everything go

00:06:05,759 --> 00:06:10,469
compiled in compiles this in sometimes

00:06:08,219 --> 00:06:13,289
just a few milliseconds or seconds it's

00:06:10,469 --> 00:06:17,129
rarely a minute so it doesn't really

00:06:13,289 --> 00:06:19,169
slow down development either so let's

00:06:17,129 --> 00:06:21,080
have a look at some code code this is a

00:06:19,169 --> 00:06:23,909
twist on the classic hello world program

00:06:21,080 --> 00:06:26,039
so we have a string hello something

00:06:23,909 --> 00:06:28,319
hello is it something you're looking for

00:06:26,039 --> 00:06:31,080
and let's say you want to print out T or

00:06:28,319 --> 00:06:31,860
me at random so you can see where this

00:06:31,080 --> 00:06:34,610
is going

00:06:31,860 --> 00:06:37,169
the syntax is obviously different to PHP

00:06:34,610 --> 00:06:39,330
the format of go abs

00:06:37,169 --> 00:06:41,490
is standard across all go applications

00:06:39,330 --> 00:06:42,810
there's just one right way to structure

00:06:41,490 --> 00:06:44,819
your go apps and that's it whether you

00:06:42,810 --> 00:06:46,830
like it or you hate it you just have to

00:06:44,819 --> 00:06:48,779
stick with it and there is a tool gold

00:06:46,830 --> 00:06:51,419
called the go formatter that does this

00:06:48,779 --> 00:06:53,129
for you on every save so literally any

00:06:51,419 --> 00:06:54,960
go program that you take from github is

00:06:53,129 --> 00:06:57,029
gonna have the exact same structure with

00:06:54,960 --> 00:06:59,009
curly brackets on the same line so you

00:06:57,029 --> 00:07:01,259
just save all that time arguing about

00:06:59,009 --> 00:07:04,020
tabs versus faces go use this tabs but

00:07:01,259 --> 00:07:06,539
you can do subspaces or which line does

00:07:04,020 --> 00:07:10,560
the racket go on which is really cool

00:07:06,539 --> 00:07:12,120
yes the very famous saying is that go

00:07:10,560 --> 00:07:14,759
for matera is the tool that everybody

00:07:12,120 --> 00:07:15,569
hates but nobody wants go without the

00:07:14,759 --> 00:07:17,219
gold formatter

00:07:15,569 --> 00:07:18,539
so that I can love in a hate

00:07:17,219 --> 00:07:20,339
relationship but you get used to it

00:07:18,539 --> 00:07:22,620
pretty quickly for me it took me about

00:07:20,339 --> 00:07:26,550
three weeks to get my eyes used to the

00:07:22,620 --> 00:07:28,169
go format so and go you need to declare

00:07:26,550 --> 00:07:30,330
the package at the top it's a little bit

00:07:28,169 --> 00:07:33,870
like namespaces in PHP or like modules

00:07:30,330 --> 00:07:35,729
in Ruby and then we need to declare the

00:07:33,870 --> 00:07:37,199
libraries from the standard packages or

00:07:35,729 --> 00:07:39,479
from any other like libraries that your

00:07:37,199 --> 00:07:41,550
code will use luckily there is a tool

00:07:39,479 --> 00:07:42,990
called go imports that will do this for

00:07:41,550 --> 00:07:46,169
you on the fly so you don't have to type

00:07:42,990 --> 00:07:49,649
this out by hand and then you have our

00:07:46,169 --> 00:07:51,539
main function every go program has to

00:07:49,649 --> 00:07:52,770
have a main function you might have

00:07:51,539 --> 00:07:55,139
noticed that there is no public or

00:07:52,770 --> 00:07:57,870
private in front of it go has a simple

00:07:55,139 --> 00:07:59,819
convention that functions except from

00:07:57,870 --> 00:08:01,649
except for Maine but functions that

00:07:59,819 --> 00:08:03,539
start with Loic lowercase letters are

00:08:01,649 --> 00:08:05,669
sort of like private functions visible

00:08:03,539 --> 00:08:07,589
just inside the package and then

00:08:05,669 --> 00:08:09,240
functions starting with the capital

00:08:07,589 --> 00:08:10,770
letter are visible outside of the

00:08:09,240 --> 00:08:14,599
package as well except for Maine Maine

00:08:10,770 --> 00:08:16,710
is always global and this is true for

00:08:14,599 --> 00:08:19,939
function names and also variable names

00:08:16,710 --> 00:08:22,979
and this is how we declare a variable

00:08:19,939 --> 00:08:24,719
each variable has a type and go and you

00:08:22,979 --> 00:08:26,819
can't type juggle it's strongly typed

00:08:24,719 --> 00:08:29,129
language this is actually the long way

00:08:26,819 --> 00:08:33,000
of declaring a variable var name and

00:08:29,129 --> 00:08:34,620
type there's also a shorter way and go

00:08:33,000 --> 00:08:36,060
will automatically work out the type of

00:08:34,620 --> 00:08:38,699
that variable based on the value that

00:08:36,060 --> 00:08:41,399
you're giving it so here we we were

00:08:38,699 --> 00:08:43,740
creating an array of two strings me and

00:08:41,399 --> 00:08:46,350
T and go automatically work out that

00:08:43,740 --> 00:08:48,329
this is an array of two strings and

00:08:46,350 --> 00:08:50,380
that's the actual type and you cannot

00:08:48,329 --> 00:08:53,950
end up doing this most of the time

00:08:50,380 --> 00:08:55,780
when you cone code and go so say we 105

00:08:53,950 --> 00:08:58,690
print up five of those sentences in a

00:08:55,780 --> 00:09:01,230
row so we have our four lip and notice

00:08:58,690 --> 00:09:03,790
that there is no brackets around it

00:09:01,230 --> 00:09:05,590
unlike in PHP there is also no

00:09:03,790 --> 00:09:07,600
semicolons at the end of the lines so

00:09:05,590 --> 00:09:09,160
there is a little bit less visual debt

00:09:07,600 --> 00:09:11,980
which some people are really passionate

00:09:09,160 --> 00:09:13,060
about but yet it some people could argue

00:09:11,980 --> 00:09:14,380
that like this is a little bit cleaner

00:09:13,060 --> 00:09:17,590
because it doesn't have the braces in

00:09:14,380 --> 00:09:20,230
the semicolons so let's run our program

00:09:17,590 --> 00:09:23,590
we get five sentences as expected with

00:09:20,230 --> 00:09:25,660
the random me or T so to do the cold go

00:09:23,590 --> 00:09:28,780
run which is again a tool that you get

00:09:25,660 --> 00:09:30,010
when you install go and that will run

00:09:28,780 --> 00:09:33,280
our program but it will not actually

00:09:30,010 --> 00:09:35,140
output the binary for us so if we want

00:09:33,280 --> 00:09:37,480
to create a binary then we have to call

00:09:35,140 --> 00:09:40,060
something called go build or go install

00:09:37,480 --> 00:09:42,250
and this will output a binary file as

00:09:40,060 --> 00:09:44,650
shown here in red so this was compiled

00:09:42,250 --> 00:09:46,810
on Linux so it's just a standard Linux

00:09:44,650 --> 00:09:48,730
binary and then you just run it like any

00:09:46,810 --> 00:09:53,140
other binary dot slash the advisor and

00:09:48,730 --> 00:09:55,090
you get the same result so I mentioned

00:09:53,140 --> 00:09:58,540
already using go run and go build and go

00:09:55,090 --> 00:10:00,160
installed and go fmt formatter and these

00:09:58,540 --> 00:10:02,050
are just some of the very very many

00:10:00,160 --> 00:10:04,030
tools that you get with go out of the

00:10:02,050 --> 00:10:06,880
box and I think this is where God wins

00:10:04,030 --> 00:10:08,680
over a lot of the languages because it's

00:10:06,880 --> 00:10:10,000
such an easy set up it's the set up

00:10:08,680 --> 00:10:12,010
where you get everything you might need

00:10:10,000 --> 00:10:13,540
out of the box when you install go and

00:10:12,010 --> 00:10:16,270
if you're on a Mac you just do brew

00:10:13,540 --> 00:10:18,610
install go and that's it

00:10:16,270 --> 00:10:20,590
in PHP if you want to install PHP unit

00:10:18,610 --> 00:10:22,060
you have to get the extension somehow in

00:10:20,590 --> 00:10:23,710
your system you have to tweak the any

00:10:22,060 --> 00:10:26,650
file you have to set it up and then the

00:10:23,710 --> 00:10:28,120
PHP unit XML file so there's a bit of a

00:10:26,650 --> 00:10:30,400
bit more work and you kind of have to do

00:10:28,120 --> 00:10:32,350
this for every single project and so it

00:10:30,400 --> 00:10:34,000
gets a bit tedious a bit boring whereas

00:10:32,350 --> 00:10:35,740
we've go once you've got go installed on

00:10:34,000 --> 00:10:37,420
your systems those tools work globally

00:10:35,740 --> 00:10:40,420
for all your projects so it's just

00:10:37,420 --> 00:10:43,180
instil once use all the time for

00:10:40,420 --> 00:10:45,280
everything you get a for material you

00:10:43,180 --> 00:10:47,500
get a linter you get tools for testing

00:10:45,280 --> 00:10:49,570
you get go doc which is a documentation

00:10:47,500 --> 00:10:51,760
tool you get all the tools for running a

00:10:49,570 --> 00:10:54,850
program and you also even get tools for

00:10:51,760 --> 00:10:56,710
profiling or a program out of the box so

00:10:54,850 --> 00:10:59,610
when I first started using go I was like

00:10:56,710 --> 00:11:01,580
oh my god this is amazing

00:10:59,610 --> 00:11:04,320
so

00:11:01,580 --> 00:11:06,180
one of the things that used to trip

00:11:04,320 --> 00:11:08,190
people up and this is about to change

00:11:06,180 --> 00:11:10,650
and go so I still left this slide in but

00:11:08,190 --> 00:11:12,030
this is kind of how it is until now but

00:11:10,650 --> 00:11:14,130
it's we're actively moving away from

00:11:12,030 --> 00:11:15,330
this and it's this notion of the go path

00:11:14,130 --> 00:11:17,160
and you might have heard some rumors

00:11:15,330 --> 00:11:19,980
about how people are confused about it

00:11:17,160 --> 00:11:21,870
so that was the idea initially the NGO

00:11:19,980 --> 00:11:24,210
had an idea that all your code all your

00:11:21,870 --> 00:11:26,790
goal code will live on the same space on

00:11:24,210 --> 00:11:28,800
a disk and the whole dependency

00:11:26,790 --> 00:11:31,260
management where the go-go get to

00:11:28,800 --> 00:11:32,550
pulling down your dependencies that was

00:11:31,260 --> 00:11:34,110
based on the fact that that tool knows

00:11:32,550 --> 00:11:36,240
exactly where to pull those dependencies

00:11:34,110 --> 00:11:37,770
because it can kind of has has knowledge

00:11:36,240 --> 00:11:40,020
of the structure on your disk

00:11:37,770 --> 00:11:41,970
so that was the official way of

00:11:40,020 --> 00:11:43,410
developing and go with PHP obviously you

00:11:41,970 --> 00:11:45,510
can put your files anywhere as long as

00:11:43,410 --> 00:11:48,360
the server knows where the document root

00:11:45,510 --> 00:11:50,520
is so there was the special environment

00:11:48,360 --> 00:11:52,470
variable there is still called go path

00:11:50,520 --> 00:11:54,900
which you basically just pointed a

00:11:52,470 --> 00:11:57,690
directory where all your projects would

00:11:54,900 --> 00:11:58,680
live and then inside this directory

00:11:57,690 --> 00:12:00,960
there would be three other sub

00:11:58,680 --> 00:12:03,830
directories source bin and package and

00:12:00,960 --> 00:12:07,350
source is where all your code would go

00:12:03,830 --> 00:12:09,810
so then obviously then to avoid name

00:12:07,350 --> 00:12:12,240
clashes you had to vendor somehow the

00:12:09,810 --> 00:12:13,500
paths so the very standard convention

00:12:12,240 --> 00:12:16,920
and goal was to just use something like

00:12:13,500 --> 00:12:18,420
your github or gitlab project prefix to

00:12:16,920 --> 00:12:20,430
make sure that all those paths for all

00:12:18,420 --> 00:12:23,610
your go apps are unique so here I've got

00:12:20,430 --> 00:12:26,010
two examples I could have two programs

00:12:23,610 --> 00:12:27,510
named the same name but because they

00:12:26,010 --> 00:12:29,790
would have different the purple the

00:12:27,510 --> 00:12:32,430
purple bit which is the github or gitlab

00:12:29,790 --> 00:12:35,010
path go would see them as two different

00:12:32,430 --> 00:12:36,990
projects so that's how it used to be and

00:12:35,010 --> 00:12:38,730
you cannot had there was a hacky way

00:12:36,990 --> 00:12:41,040
around it to mate to be able to move

00:12:38,730 --> 00:12:43,860
files around but that was the designed

00:12:41,040 --> 00:12:45,240
way I personally didn't mind a lot of

00:12:43,860 --> 00:12:46,860
people hated this because it was such a

00:12:45,240 --> 00:12:49,380
change from all the other languages for

00:12:46,860 --> 00:12:51,360
me actually for the first time ever all

00:12:49,380 --> 00:12:54,870
my projects were organized on disk so I

00:12:51,360 --> 00:13:00,000
kind of liked it but go path is going

00:12:54,870 --> 00:13:02,550
away and in go 1.11 and pretty

00:13:00,000 --> 00:13:03,840
I think it's scheduled to go into go 113

00:13:02,550 --> 00:13:05,700
which is going to be released around

00:13:03,840 --> 00:13:07,620
August this year there's gonna be this

00:13:05,700 --> 00:13:09,930
thing called modules which is a proper

00:13:07,620 --> 00:13:11,940
way of managing your dependencies and

00:13:09,930 --> 00:13:13,890
this was long-awaited go for a long time

00:13:11,940 --> 00:13:14,820
didn't really have a solution for

00:13:13,890 --> 00:13:17,130
dependency manager

00:13:14,820 --> 00:13:18,630
other than the very basic go get so

00:13:17,130 --> 00:13:21,060
people started writing open source tools

00:13:18,630 --> 00:13:23,810
which were kind of like composer but in

00:13:21,060 --> 00:13:25,680
modules is like composer taking a step

00:13:23,810 --> 00:13:28,350
ahead as well

00:13:25,680 --> 00:13:29,790
if you imagine if you imagine for a

00:13:28,350 --> 00:13:31,560
second that you could run your PHP apps

00:13:29,790 --> 00:13:33,720
just by it with a simple command called

00:13:31,560 --> 00:13:35,460
PHP so if you did PHP your file and

00:13:33,720 --> 00:13:38,550
something would happen which you

00:13:35,460 --> 00:13:41,100
obviously can run scripts like this then

00:13:38,550 --> 00:13:43,110
the PHP tool would automatically run

00:13:41,100 --> 00:13:45,120
composer install install for you if it

00:13:43,110 --> 00:13:46,620
detected that it has a composer jason

00:13:45,120 --> 00:13:50,520
file and that's essentially what modules

00:13:46,620 --> 00:13:53,760
do if modules have a module for the list

00:13:50,520 --> 00:13:56,190
of modules the file then the go go run

00:13:53,760 --> 00:13:57,420
or go build tool will automatically pull

00:13:56,190 --> 00:13:58,980
your dependencies make sure they are

00:13:57,420 --> 00:14:01,170
up-to-date make sure they match the

00:13:58,980 --> 00:14:03,540
checksum file which is the equivalent of

00:14:01,170 --> 00:14:05,550
the log file in PHP and do all of that

00:14:03,540 --> 00:14:06,750
for you so you don't even have to how

00:14:05,550 --> 00:14:08,790
many times have you forgotten to run

00:14:06,750 --> 00:14:12,480
composer install basically that problem

00:14:08,790 --> 00:14:15,540
goes away so there are a lot of queries

00:14:12,480 --> 00:14:17,100
under the hood modules are pure entirely

00:14:15,540 --> 00:14:19,410
based on semver so they rely on

00:14:17,100 --> 00:14:23,220
everybody using semver properly which

00:14:19,410 --> 00:14:24,600
we'll see how it goes so there's a lot

00:14:23,220 --> 00:14:27,000
of quirks under the hood but that's

00:14:24,600 --> 00:14:28,560
basically the idea you will be able to

00:14:27,000 --> 00:14:31,050
download the dependencies from mirrors

00:14:28,560 --> 00:14:33,330
they will be authenticated and so on and

00:14:31,050 --> 00:14:36,030
so forth there's also a really cool

00:14:33,330 --> 00:14:38,100
thing that they made so I mentioned in

00:14:36,030 --> 00:14:39,420
the meantime before this happened there

00:14:38,100 --> 00:14:41,610
were a lot of open source dependency

00:14:39,420 --> 00:14:43,590
managers built for example go DEP and

00:14:41,610 --> 00:14:45,420
modules will be able to automatically

00:14:43,590 --> 00:14:47,790
imports all your dependencies from your

00:14:45,420 --> 00:14:49,830
DEP file into and translated into

00:14:47,790 --> 00:14:52,260
modules and I think they supports nine

00:14:49,830 --> 00:14:53,490
other common dependence managers so

00:14:52,260 --> 00:14:57,570
that's pretty cool so the migration

00:14:53,490 --> 00:14:59,300
shouldn't be painful in theory so what

00:14:57,570 --> 00:15:02,040
kind of apps can you build with go I

00:14:59,300 --> 00:15:03,690
tend to think of go as a box of Legos

00:15:02,040 --> 00:15:05,220
that you're given so you can kind of

00:15:03,690 --> 00:15:07,230
build anything you want but you got to

00:15:05,220 --> 00:15:09,630
figure it out yourself or figure out a

00:15:07,230 --> 00:15:11,070
lot of that yourself yourself I see PHP

00:15:09,630 --> 00:15:12,540
more like the ready-made sets that

00:15:11,070 --> 00:15:13,680
you're given so they're a little bit

00:15:12,540 --> 00:15:17,700
more limited but you get a nice

00:15:13,680 --> 00:15:19,350
instruction manual and off you go both

00:15:17,700 --> 00:15:22,740
languages are great for web apps they're

00:15:19,350 --> 00:15:24,960
great for api's you can use PHP or go to

00:15:22,740 --> 00:15:27,600
write command line apps or even like

00:15:24,960 --> 00:15:30,420
bash scripts

00:15:27,600 --> 00:15:31,889
peach pee for me excels at the web level

00:15:30,420 --> 00:15:34,500
like if you just need to quickly write a

00:15:31,889 --> 00:15:37,319
website I would probably use PHP whereas

00:15:34,500 --> 00:15:39,089
with Go Go is great for anything

00:15:37,319 --> 00:15:41,579
slightly lower level that doesn't need a

00:15:39,089 --> 00:15:43,470
UI in my opinion so things like

00:15:41,579 --> 00:15:45,839
infrastructure components servers load

00:15:43,470 --> 00:15:48,149
balancers proxies you can even write as

00:15:45,839 --> 00:15:50,490
server and go to run your PHP scripts

00:15:48,149 --> 00:15:55,259
all sorts of things that don't have a UI

00:15:50,490 --> 00:15:57,120
and they need to be fast so let's move

00:15:55,259 --> 00:15:58,740
on to the reason why so many people

00:15:57,120 --> 00:16:01,050
start looking at go and that is

00:15:58,740 --> 00:16:03,959
concurrency but before we dive into

00:16:01,050 --> 00:16:06,000
concurrency and go let's quickly remind

00:16:03,959 --> 00:16:07,410
ourselves what the difference is or is

00:16:06,000 --> 00:16:08,819
there a difference between concurrency

00:16:07,410 --> 00:16:11,550
and parallelism and what does it

00:16:08,819 --> 00:16:13,529
actually mean so as a PHP dev you rarely

00:16:11,550 --> 00:16:16,860
or in my case never come across

00:16:13,529 --> 00:16:20,069
concurrency in your apps really wasn't a

00:16:16,860 --> 00:16:21,630
thing back in the day so you can use a

00:16:20,069 --> 00:16:23,550
PHP extension called pthreads which

00:16:21,630 --> 00:16:25,680
probably most people heard of I've met

00:16:23,550 --> 00:16:27,380
one person in seven years who actually

00:16:25,680 --> 00:16:29,069
successfully used it in production

00:16:27,380 --> 00:16:31,230
nobody really does

00:16:29,069 --> 00:16:33,089
they're also frameworks like react PHP

00:16:31,230 --> 00:16:36,600
or amp I've never really played around

00:16:33,089 --> 00:16:37,860
or had to use them for for work so I

00:16:36,600 --> 00:16:39,269
don't really know how good they are but

00:16:37,860 --> 00:16:40,500
because they are frameworks they're not

00:16:39,269 --> 00:16:41,519
really built into the language it's not

00:16:40,500 --> 00:16:45,600
something that you're gonna you're

00:16:41,519 --> 00:16:47,790
likely to come across PHP traditionally

00:16:45,600 --> 00:16:51,269
is written with single like sort of

00:16:47,790 --> 00:16:52,290
single threaded nests in mind so it's

00:16:51,269 --> 00:16:54,930
just less common to come across

00:16:52,290 --> 00:16:57,060
concurrency then and go go has been

00:16:54,930 --> 00:16:58,889
designed with concurrency in mind and

00:16:57,060 --> 00:17:03,240
its outright promoted to you as a

00:16:58,889 --> 00:17:04,530
developer so like I said with PHP

00:17:03,240 --> 00:17:06,360
because we're using extensions of

00:17:04,530 --> 00:17:08,720
frameworks it might be even a little bit

00:17:06,360 --> 00:17:11,100
slower than go which just has a built in

00:17:08,720 --> 00:17:13,439
so it wasn't until I started doing gold

00:17:11,100 --> 00:17:14,039
I actually realized you know concurrency

00:17:13,439 --> 00:17:15,750
parallelism

00:17:14,039 --> 00:17:18,919
what is the difference and is it the

00:17:15,750 --> 00:17:21,480
same thing turns out it's not quite so

00:17:18,919 --> 00:17:24,449
concurrency as a concept basically means

00:17:21,480 --> 00:17:27,959
that two threads can run in parallel and

00:17:24,449 --> 00:17:30,450
parallelism is the actual act of running

00:17:27,959 --> 00:17:33,270
two threads in parallel so basically

00:17:30,450 --> 00:17:35,130
means that in theory if two threads are

00:17:33,270 --> 00:17:37,049
make can make progress your design is

00:17:35,130 --> 00:17:38,730
concurrent but unless they are actually

00:17:37,049 --> 00:17:40,690
running at the same time it's only

00:17:38,730 --> 00:17:45,759
concurrent it's not parallel

00:17:40,690 --> 00:17:48,970
so depends on them the difference kind

00:17:45,759 --> 00:17:50,590
of comes out depending on how many cores

00:17:48,970 --> 00:17:52,809
your machine has for example if you were

00:17:50,590 --> 00:17:54,639
to take a concurrent program and run it

00:17:52,809 --> 00:17:56,109
on a single core then it would be a

00:17:54,639 --> 00:17:57,759
concurrent design but it would be not

00:17:56,109 --> 00:17:59,379
parallel but if you take a four core

00:17:57,759 --> 00:18:01,239
machine and run the same program there

00:17:59,379 --> 00:18:02,799
and it's designed with concurrency in

00:18:01,239 --> 00:18:04,570
mind then in theory you can run it on

00:18:02,799 --> 00:18:05,919
all four cores simul tenuously so can

00:18:04,570 --> 00:18:07,599
have four threads running at the same

00:18:05,919 --> 00:18:10,539
time and that's both concurrent and

00:18:07,599 --> 00:18:12,070
parallel so just to show you a silly

00:18:10,539 --> 00:18:15,729
example and I've stolen that example

00:18:12,070 --> 00:18:17,229
from one of Rob Pike stocks this is

00:18:15,729 --> 00:18:22,299
basically a bunch of Gophers running

00:18:17,229 --> 00:18:23,769
around burning books as they do so this

00:18:22,299 --> 00:18:25,149
is a concurrent design we have one go

00:18:23,769 --> 00:18:26,649
for loading the books wanna go for

00:18:25,149 --> 00:18:28,239
taking them to the incinerator one of

00:18:26,649 --> 00:18:29,830
them loading them and burning them and

00:18:28,239 --> 00:18:32,080
then one taking the empty trolley back

00:18:29,830 --> 00:18:34,330
so in theory this is a concurrent design

00:18:32,080 --> 00:18:36,190
because all four Gophers can do their

00:18:34,330 --> 00:18:38,049
work at the same time like in the ideal

00:18:36,190 --> 00:18:40,749
world all four of them will be busy at

00:18:38,049 --> 00:18:43,359
the same time but you could also have

00:18:40,749 --> 00:18:44,769
just one gopher doing their job like if

00:18:43,359 --> 00:18:46,899
they sort of get backed up for example

00:18:44,769 --> 00:18:48,820
the the one loading the books isn't

00:18:46,899 --> 00:18:50,080
doing the job fast enough then the rest

00:18:48,820 --> 00:18:51,970
of them might start being idle because

00:18:50,080 --> 00:18:53,799
they're waiting so at this point you're

00:18:51,970 --> 00:18:55,539
kind of losing that parallelism the

00:18:53,799 --> 00:18:56,859
design is still concurrent but if you

00:18:55,539 --> 00:18:58,749
only have one go for running at the same

00:18:56,859 --> 00:19:00,669
time then we don't have parallelism

00:18:58,749 --> 00:19:02,379
anymore and then you could also take

00:19:00,669 --> 00:19:04,950
that set of four Gophers and multiply it

00:19:02,379 --> 00:19:07,119
and you could have sort of meta / meta

00:19:04,950 --> 00:19:09,149
concurrency where you just multiply a

00:19:07,119 --> 00:19:10,450
concurrent design and you get even more

00:19:09,149 --> 00:19:12,999
things

00:19:10,450 --> 00:19:15,239
so in general we talk about concurrency

00:19:12,999 --> 00:19:18,549
and go because it's just the general

00:19:15,239 --> 00:19:20,080
general form of parallelism and is its

00:19:18,549 --> 00:19:22,389
focus focus is more on the theory in the

00:19:20,080 --> 00:19:25,239
design rather than the actual under the

00:19:22,389 --> 00:19:26,919
hood things so it's a subtle difference

00:19:25,239 --> 00:19:31,419
but iphoto is interesting and I thought

00:19:26,919 --> 00:19:33,099
if we were quiet clarifying so one of

00:19:31,419 --> 00:19:35,289
the most appealing things about go is

00:19:33,099 --> 00:19:37,840
how easy it is to make to write

00:19:35,289 --> 00:19:39,849
concurrent programs and go basically it

00:19:37,840 --> 00:19:42,070
boils down to three key words they're

00:19:39,849 --> 00:19:45,999
built in go key word goroutines and

00:19:42,070 --> 00:19:47,919
channels so a go routine is not exactly

00:19:45,999 --> 00:19:50,649
a separate process it's not a separate

00:19:47,919 --> 00:19:53,250
unit UNIX Fred it they call it the

00:19:50,649 --> 00:19:55,919
lightweight thread of execution and it's

00:19:53,250 --> 00:19:57,510
I've mapped to OS threads it's all

00:19:55,919 --> 00:19:58,530
managed by the go runtime so you don't

00:19:57,510 --> 00:20:01,169
have to do any of the management

00:19:58,530 --> 00:20:02,909
yourself go routines use the same

00:20:01,169 --> 00:20:05,580
address space so they share the same

00:20:02,909 --> 00:20:07,770
memory so you need to be careful about

00:20:05,580 --> 00:20:09,809
synchronizing the memory between go

00:20:07,770 --> 00:20:11,580
synchronizing access to memory from

00:20:09,809 --> 00:20:13,409
different go routines so it's kind of

00:20:11,580 --> 00:20:17,130
like just with any concurrent design or

00:20:13,409 --> 00:20:19,169
concurrent problem program here is how

00:20:17,130 --> 00:20:21,360
you create a go routine you just put the

00:20:19,169 --> 00:20:21,960
go keyword in front of it and it's that

00:20:21,360 --> 00:20:25,169
simple

00:20:21,960 --> 00:20:26,610
so this function will now go off and get

00:20:25,169 --> 00:20:30,150
executed in a separate lightweight

00:20:26,610 --> 00:20:32,760
thread of execution here's a simple

00:20:30,150 --> 00:20:35,400
example of using go routines say we want

00:20:32,760 --> 00:20:38,010
to hey print out hello world but we want

00:20:35,400 --> 00:20:40,230
to print out hello five times by the

00:20:38,010 --> 00:20:44,280
main thread and world five times by

00:20:40,230 --> 00:20:45,840
goroutine that separate go routine so

00:20:44,280 --> 00:20:48,360
you define a function called say which

00:20:45,840 --> 00:20:50,460
just takes a word and loops through it

00:20:48,360 --> 00:20:53,490
five times prints it out pretty simple

00:20:50,460 --> 00:20:55,740
and then in the main function we call it

00:20:53,490 --> 00:20:58,260
twice so once for hello once for world

00:20:55,740 --> 00:21:01,289
but on the first line we put the go

00:20:58,260 --> 00:21:03,179
keyword in front of it and that will

00:21:01,289 --> 00:21:05,490
make go execute this function in the

00:21:03,179 --> 00:21:08,250
separate thread and this is non-blocking

00:21:05,490 --> 00:21:11,039
which means that as soon as we we go

00:21:08,250 --> 00:21:12,960
past the go the go line this line that

00:21:11,039 --> 00:21:14,400
says go say it would just move on to the

00:21:12,960 --> 00:21:15,630
next one it doesn't wait for the goal

00:21:14,400 --> 00:21:16,549
line to finish so it's completely

00:21:15,630 --> 00:21:19,020
non-blocking

00:21:16,549 --> 00:21:21,900
so the two calls will in theory be

00:21:19,020 --> 00:21:25,049
executed at the same time and you get an

00:21:21,900 --> 00:21:27,299
output like this looks legit so you get

00:21:25,049 --> 00:21:29,549
two words printed in random order by

00:21:27,299 --> 00:21:31,049
each of the go routines and then if you

00:21:29,549 --> 00:21:33,179
run it multiple times to get a slightly

00:21:31,049 --> 00:21:35,159
different output every time as expected

00:21:33,179 --> 00:21:36,960
so that's because the two threads are

00:21:35,159 --> 00:21:39,210
actually running concurrently and so

00:21:36,960 --> 00:21:40,710
without any deliberate synchronization

00:21:39,210 --> 00:21:43,980
between them they would they order just

00:21:40,710 --> 00:21:45,840
will be completely random so here you

00:21:43,980 --> 00:21:49,980
can see that sort of the example

00:21:45,840 --> 00:21:52,740
difference and where hello is printed

00:21:49,980 --> 00:21:54,090
last hello is getting printed by the go

00:21:52,740 --> 00:21:56,940
routine that is running along saying the

00:21:54,090 --> 00:21:58,770
main routine so that means that the main

00:21:56,940 --> 00:22:01,020
go routine and the second column has

00:21:58,770 --> 00:22:03,539
terminated already while the go routine

00:22:01,020 --> 00:22:04,919
are still running and it doesn't wait

00:22:03,539 --> 00:22:06,809
for the go routine to finish it just

00:22:04,919 --> 00:22:08,730
finishes itself

00:22:06,809 --> 00:22:11,600
that's no idea because you can end up

00:22:08,730 --> 00:22:13,799
with zombie goroutines for example and

00:22:11,600 --> 00:22:17,039
then you have no control over them

00:22:13,799 --> 00:22:19,200
it's literally kill -9 at this point so

00:22:17,039 --> 00:22:21,450
to make sure that you don't exit until

00:22:19,200 --> 00:22:23,460
all the gory teens are done you can use

00:22:21,450 --> 00:22:26,309
something called a sync group so you

00:22:23,460 --> 00:22:28,320
declare it and then you add one for each

00:22:26,309 --> 00:22:29,610
one of the girls that you're creating so

00:22:28,320 --> 00:22:32,970
it's basically just a pool of like

00:22:29,610 --> 00:22:34,889
tokens that you're handing out and then

00:22:32,970 --> 00:22:36,269
you kick off a function and then go

00:22:34,889 --> 00:22:37,950
supports and on the moon anonymous

00:22:36,269 --> 00:22:40,919
functions and closures so it's just a

00:22:37,950 --> 00:22:42,749
simple example and then in derry we use

00:22:40,919 --> 00:22:44,669
a special deferred keyword so we say

00:22:42,749 --> 00:22:46,740
defer weight group done and now

00:22:44,669 --> 00:22:48,090
basically it's a bit like finally in PHP

00:22:46,740 --> 00:22:50,850
it basically just make sure that the

00:22:48,090 --> 00:22:53,159
weight group done is will be executed no

00:22:50,850 --> 00:22:55,440
matter what before we exit the main

00:22:53,159 --> 00:22:56,909
function so it's really handy for things

00:22:55,440 --> 00:23:00,090
like making sure that you always close

00:22:56,909 --> 00:23:01,710
the file handles or you that you release

00:23:00,090 --> 00:23:03,480
the mutex or tell the weight weight

00:23:01,710 --> 00:23:08,789
group that you're done after your

00:23:03,480 --> 00:23:11,970
function so then we call say from the go

00:23:08,789 --> 00:23:14,279
function and from the main main function

00:23:11,970 --> 00:23:16,470
itself and then we call white group

00:23:14,279 --> 00:23:19,019
weight and I will basically make the

00:23:16,470 --> 00:23:23,730
main thread wait until that girl routine

00:23:19,019 --> 00:23:26,249
says it's done so it shows you that

00:23:23,730 --> 00:23:28,200
analyzing this this little example shows

00:23:26,249 --> 00:23:30,600
you that analyzing concurrent programs

00:23:28,200 --> 00:23:32,909
can be a little bit tricky because

00:23:30,600 --> 00:23:33,509
things may deliberately sometimes happen

00:23:32,909 --> 00:23:34,860
at random

00:23:33,509 --> 00:23:36,990
sometimes you genuinely don't care and

00:23:34,860 --> 00:23:39,330
sometimes you expect things to be

00:23:36,990 --> 00:23:41,279
executed in sync sequentially or in some

00:23:39,330 --> 00:23:44,100
kind of order there are also other

00:23:41,279 --> 00:23:46,830
constructs constructs like mutexes for

00:23:44,100 --> 00:23:48,059
synchronizing access to memory and but

00:23:46,830 --> 00:23:50,039
luckily a lot of the native go

00:23:48,059 --> 00:23:52,080
functionality is safe for concurrent use

00:23:50,039 --> 00:23:54,960
out of the box so you don't really need

00:23:52,080 --> 00:23:56,340
to spend too much time on that and if

00:23:54,960 --> 00:23:57,960
you use the standard concurrency

00:23:56,340 --> 00:24:00,600
patterns that kind of becomes second

00:23:57,960 --> 00:24:03,629
nature so it's not as scary as it sounds

00:24:00,600 --> 00:24:05,700
go also has a race condition detector

00:24:03,629 --> 00:24:10,649
built in into its tool chain so you can

00:24:05,700 --> 00:24:12,299
even use that an even better way to

00:24:10,649 --> 00:24:14,610
provide synchronization in your go

00:24:12,299 --> 00:24:16,860
programs is to use channels you can

00:24:14,610 --> 00:24:19,679
think channels as pipes or queues it's

00:24:16,860 --> 00:24:20,100
kind of the same idea so if you share a

00:24:19,679 --> 00:24:22,440
queue

00:24:20,100 --> 00:24:23,820
a pipe or a queue or a channel between

00:24:22,440 --> 00:24:26,760
the two goroutines you can just send

00:24:23,820 --> 00:24:29,039
messages and receive messages so that's

00:24:26,760 --> 00:24:31,200
how you can make them talk so channels

00:24:29,039 --> 00:24:33,440
and NGO are first-class citizens it's a

00:24:31,200 --> 00:24:36,179
type just like a string or an integer

00:24:33,440 --> 00:24:39,240
channels are also typed so each channel

00:24:36,179 --> 00:24:41,130
has a type assigned to it so that the

00:24:39,240 --> 00:24:41,880
values that you can put in have to be of

00:24:41,130 --> 00:24:43,799
that type only

00:24:41,880 --> 00:24:45,240
so you can have a channel of integers or

00:24:43,799 --> 00:24:46,710
channel of strings and you wouldn't be

00:24:45,240 --> 00:24:49,679
able to put a string on the channel of

00:24:46,710 --> 00:24:51,630
engineer integers so channels can also

00:24:49,679 --> 00:24:53,610
be bi-directional so they can both send

00:24:51,630 --> 00:24:57,419
and receive or can be seen only on or

00:24:53,610 --> 00:24:58,890
receive only by default sending or

00:24:57,419 --> 00:25:01,620
receiving it on the channel is a

00:24:58,890 --> 00:25:03,480
blocking operation so the program will

00:25:01,620 --> 00:25:05,190
wait until something comes out of the

00:25:03,480 --> 00:25:07,380
channel or get or get sent to a channel

00:25:05,190 --> 00:25:09,090
so that means that if a go routine is

00:25:07,380 --> 00:25:12,110
waiting to receive something from a

00:25:09,090 --> 00:25:14,490
channel it will just pause and wait

00:25:12,110 --> 00:25:16,650
until something appears on that channel

00:25:14,490 --> 00:25:19,380
and is ready to be received so this

00:25:16,650 --> 00:25:21,360
allows this allows us to synchronize go

00:25:19,380 --> 00:25:24,630
routines without using explicit things

00:25:21,360 --> 00:25:26,429
like mute mute X's or wait groups or any

00:25:24,630 --> 00:25:29,940
complicated conditionals and it kind of

00:25:26,429 --> 00:25:34,230
makes your programs look and be a lot

00:25:29,940 --> 00:25:35,880
more clean so we can declare channels

00:25:34,230 --> 00:25:37,590
just like we declare our variables and

00:25:35,880 --> 00:25:40,370
go so here I have a variable called

00:25:37,590 --> 00:25:43,260
messengers and it's a channel of strings

00:25:40,370 --> 00:25:45,450
before I can use this channel to send

00:25:43,260 --> 00:25:47,250
messages I need to actually create it

00:25:45,450 --> 00:25:48,360
not just declare it so we actually have

00:25:47,250 --> 00:25:50,220
to make it and there is a special

00:25:48,360 --> 00:25:55,169
keyword called make that will actually

00:25:50,220 --> 00:25:56,820
initialize it so the channel channels

00:25:55,169 --> 00:25:59,039
can be buffered or unbuffered as well so

00:25:56,820 --> 00:26:01,020
you can sort of put a limit a size limit

00:25:59,039 --> 00:26:03,179
for how many values you can put in a

00:26:01,020 --> 00:26:04,830
channel before it starts airing or they

00:26:03,179 --> 00:26:09,179
can be unbuffered which means unlimited

00:26:04,830 --> 00:26:10,530
in and out so then if we want to if we

00:26:09,179 --> 00:26:12,659
want it to send some data on the channel

00:26:10,530 --> 00:26:14,610
there is a special keyword in go which

00:26:12,659 --> 00:26:15,870
is the sort of rocket sort not the

00:26:14,610 --> 00:26:18,360
rocket but it's kind of like the rocket

00:26:15,870 --> 00:26:21,030
operator it's just an arrow so you point

00:26:18,360 --> 00:26:23,280
the arrow the general rule is that the

00:26:21,030 --> 00:26:24,900
arrow points in the direction of data

00:26:23,280 --> 00:26:26,340
flow so if you want to put something on

00:26:24,900 --> 00:26:28,669
the channel you just point the arrow at

00:26:26,340 --> 00:26:31,230
the channel and you give it a value and

00:26:28,669 --> 00:26:32,800
then if you want to receive a value you

00:26:31,230 --> 00:26:34,150
kind of do it the other way

00:26:32,800 --> 00:26:36,010
the other way around so you point the

00:26:34,150 --> 00:26:37,450
arrow away from the channel and then

00:26:36,010 --> 00:26:39,190
here we can just assign it straight to

00:26:37,450 --> 00:26:40,720
the variable called message and then go

00:26:39,190 --> 00:26:46,660
we'll work out that the message is of

00:26:40,720 --> 00:26:48,880
type string so how can we implement

00:26:46,660 --> 00:26:50,620
something more typical and go like a

00:26:48,880 --> 00:26:52,810
worker pole pattern which is pretty

00:26:50,620 --> 00:26:54,790
standard and go it's really standard in

00:26:52,810 --> 00:26:57,160
concurrent programming in general so

00:26:54,790 --> 00:26:58,540
basically what a worker pool pattern is

00:26:57,160 --> 00:27:01,780
it means that instead of having one

00:26:58,540 --> 00:27:04,060
thread just turn through tasks or input

00:27:01,780 --> 00:27:05,920
variables and do something with them you

00:27:04,060 --> 00:27:07,840
can have more than one so say five or

00:27:05,920 --> 00:27:09,550
six or however many you want do the same

00:27:07,840 --> 00:27:11,710
thing at the same time so they were all

00:27:09,550 --> 00:27:15,640
just executed the same function at the

00:27:11,710 --> 00:27:17,650
same time time so that means we can

00:27:15,640 --> 00:27:19,150
speed things up and process things a lot

00:27:17,650 --> 00:27:21,730
faster because rather than just doing it

00:27:19,150 --> 00:27:24,420
in sequentially you can have a four five

00:27:21,730 --> 00:27:28,420
six times speed-up

00:27:24,420 --> 00:27:30,970
so to create the channel whips we

00:27:28,420 --> 00:27:32,710
declare it at the top so we create a

00:27:30,970 --> 00:27:34,720
channel of tasks and then just assume

00:27:32,710 --> 00:27:36,970
task is some random type doesn't really

00:27:34,720 --> 00:27:41,110
matter here so we have a jobs channel

00:27:36,970 --> 00:27:44,680
now and then at the bottom here it's a

00:27:41,110 --> 00:27:49,630
special construct the four range in go

00:27:44,680 --> 00:27:53,620
and that means that it will iterate over

00:27:49,630 --> 00:27:56,410
the values in a channel and either take

00:27:53,620 --> 00:27:59,820
them out or put print them in put them

00:27:56,410 --> 00:28:03,430
into a channel so if I go back in here

00:27:59,820 --> 00:28:05,140
the middle bit is basically say we've

00:28:03,430 --> 00:28:06,820
defined some kind of limit for how many

00:28:05,140 --> 00:28:09,130
workers we want to say so here I've just

00:28:06,820 --> 00:28:10,780
used the limits variable but it could be

00:28:09,130 --> 00:28:13,270
five could be any number for the number

00:28:10,780 --> 00:28:15,130
of the amount for that number of workers

00:28:13,270 --> 00:28:17,890
that we want to have we basically kick

00:28:15,130 --> 00:28:21,550
off a go routine so the go keyword and

00:28:17,890 --> 00:28:23,800
we just say that iterate over the jobs

00:28:21,550 --> 00:28:25,330
channel pick up a task and then do

00:28:23,800 --> 00:28:27,010
something with that tasks so every

00:28:25,330 --> 00:28:28,930
single one of those functions would call

00:28:27,010 --> 00:28:31,210
the do function in its own go routine

00:28:28,930 --> 00:28:34,420
but you have a different task so then

00:28:31,210 --> 00:28:36,250
the last square here is we need to

00:28:34,420 --> 00:28:37,840
actually remember to put the tasks on

00:28:36,250 --> 00:28:39,820
the channel because the first three is

00:28:37,840 --> 00:28:41,410
just create a channel and then pass it

00:28:39,820 --> 00:28:43,330
into the go routines to start to be

00:28:41,410 --> 00:28:45,990
ready to start picking up tasks so the

00:28:43,330 --> 00:28:48,700
last box is actually

00:28:45,990 --> 00:28:51,550
assuming we have some kind of array or

00:28:48,700 --> 00:28:53,290
slice of tasks to be done we iterate

00:28:51,550 --> 00:28:55,330
over that and we just load each task on

00:28:53,290 --> 00:28:57,370
the jobs Channel and then as soon as we

00:28:55,330 --> 00:28:59,050
load those tasks on the channel the girl

00:28:57,370 --> 00:29:00,760
routines will start kicking in and start

00:28:59,050 --> 00:29:02,890
processing them so it doesn't wait until

00:29:00,760 --> 00:29:04,720
we're done putting the tasks in it will

00:29:02,890 --> 00:29:07,090
just happen as soon as the first task is

00:29:04,720 --> 00:29:08,290
available on the channel which also

00:29:07,090 --> 00:29:09,790
means you don't know which one of the

00:29:08,290 --> 00:29:11,320
workers is gonna pick it up so if you

00:29:09,790 --> 00:29:13,300
had five in here it could be any one of

00:29:11,320 --> 00:29:14,950
those fives that we'll get to the first

00:29:13,300 --> 00:29:16,630
task first and then you don't actually

00:29:14,950 --> 00:29:21,070
know what what order they will be picked

00:29:16,630 --> 00:29:23,080
up in so hopefully you can see that

00:29:21,070 --> 00:29:26,320
concurrent designs that you really speed

00:29:23,080 --> 00:29:27,640
things up and process things faster so

00:29:26,320 --> 00:29:29,860
for me it was the just the ease of

00:29:27,640 --> 00:29:32,440
picking it up and go and looking into

00:29:29,860 --> 00:29:34,150
concurrent and event-driven designs that

00:29:32,440 --> 00:29:35,820
it was one of the reasons why I really

00:29:34,150 --> 00:29:37,870
learned enjoyed learning goes so much

00:29:35,820 --> 00:29:40,270
you can obviously try the frameworks in

00:29:37,870 --> 00:29:41,890
PHP but I think a language that just

00:29:40,270 --> 00:29:43,840
outright promotes this to you and makes

00:29:41,890 --> 00:29:45,460
it so easy to use and it's just a much

00:29:43,840 --> 00:29:50,050
nicer way of learning concurrent

00:29:45,460 --> 00:29:52,630
programming so my intention wasn't ready

00:29:50,050 --> 00:29:54,040
to tell you that go is better than HP or

00:29:52,630 --> 00:29:57,130
a peach he's better than go they're just

00:29:54,040 --> 00:29:59,440
different and you should think about

00:29:57,130 --> 00:30:01,150
what you want to build first and which

00:29:59,440 --> 00:30:02,590
language will help you solve the problem

00:30:01,150 --> 00:30:05,800
in the most elegant way or the most

00:30:02,590 --> 00:30:08,290
efficient way or a way that makes the

00:30:05,800 --> 00:30:10,240
most sense for your business I think

00:30:08,290 --> 00:30:12,730
generally in this day and age we need to

00:30:10,240 --> 00:30:14,350
be getting smarter as programmers and we

00:30:12,730 --> 00:30:16,540
need to find ways to optimize our

00:30:14,350 --> 00:30:18,820
processing with the ever increasing

00:30:16,540 --> 00:30:20,890
loads and on our systems like these days

00:30:18,820 --> 00:30:22,870
it's not uncommon to be processing tens

00:30:20,890 --> 00:30:25,900
of thousands of requests per second and

00:30:22,870 --> 00:30:28,630
we just need to come come up with ways

00:30:25,900 --> 00:30:29,950
to handle that that load so exploring

00:30:28,630 --> 00:30:31,480
other language just gives you the

00:30:29,950 --> 00:30:33,010
benefit of just discovering all the

00:30:31,480 --> 00:30:35,080
different other patterns that other

00:30:33,010 --> 00:30:39,550
languages might use to deal with similar

00:30:35,080 --> 00:30:41,200
problems and I genuinely think that as

00:30:39,550 --> 00:30:44,770
we're reaching the limits of hardware

00:30:41,200 --> 00:30:47,710
improvements Moore's law is kind of now

00:30:44,770 --> 00:30:49,450
not really long no longer applying and

00:30:47,710 --> 00:30:51,220
language of demonstrations itself like

00:30:49,450 --> 00:30:54,670
we've kind of reached reached the limit

00:30:51,220 --> 00:30:56,470
of how much we can optimize PHP seven so

00:30:54,670 --> 00:30:57,850
I think the focus will really be on

00:30:56,470 --> 00:30:59,740
making the programs concurrent

00:30:57,850 --> 00:31:02,590
because that's the one thing that we

00:30:59,740 --> 00:31:04,419
didn't really do much with yet in PHP so

00:31:02,590 --> 00:31:07,270
you see things like that popping on

00:31:04,419 --> 00:31:08,919
Twitter popping up on Twitter and then

00:31:07,270 --> 00:31:11,110
you hear about things like school which

00:31:08,919 --> 00:31:13,419
is a production grade a synchronous

00:31:11,110 --> 00:31:16,270
programming framework for PHP which

00:31:13,419 --> 00:31:19,330
looks looks and feels and is scarily

00:31:16,270 --> 00:31:21,309
just like writing going PHP so it's

00:31:19,330 --> 00:31:23,830
really impressive so if you're curious

00:31:21,309 --> 00:31:26,890
check it out I think those types of

00:31:23,830 --> 00:31:27,429
things will become mainstream very very

00:31:26,890 --> 00:31:29,500
shortly

00:31:27,429 --> 00:31:32,200
even in PHP eight we're thinking about

00:31:29,500 --> 00:31:34,210
doing jet so just-in-time compilation to

00:31:32,200 --> 00:31:36,520
kind of have a little bit of PHP

00:31:34,210 --> 00:31:38,110
compiled not just everything interpreted

00:31:36,520 --> 00:31:39,880
we already do some of it obviously it's

00:31:38,110 --> 00:31:42,520
not as simple but we're looking to now

00:31:39,880 --> 00:31:47,230
make PHP even more compiles than

00:31:42,520 --> 00:31:48,700
interpreted so obviously I ended up

00:31:47,230 --> 00:31:50,890
comparing the two languages quite a lot

00:31:48,700 --> 00:31:53,289
as I was going along so here are just

00:31:50,890 --> 00:31:55,600
some of my favorite things about each I

00:31:53,289 --> 00:31:57,850
still think that PHP is at least for me

00:31:55,600 --> 00:32:00,220
just super quick and easy to just bash

00:31:57,850 --> 00:32:01,570
something out especially if it's not a

00:32:00,220 --> 00:32:03,880
concurrent thing or if you don't care

00:32:01,570 --> 00:32:06,340
about concurrency in that case it's just

00:32:03,880 --> 00:32:07,840
simple I think if I can just write it

00:32:06,340 --> 00:32:11,140
write a simple sequential program I'll

00:32:07,840 --> 00:32:13,090
probably just do it in PHP I like that

00:32:11,140 --> 00:32:14,500
PHP has a lot of mature frameworks and

00:32:13,090 --> 00:32:16,900
they're all well-established like we

00:32:14,500 --> 00:32:19,179
kind of as a community have a logging

00:32:16,900 --> 00:32:21,010
framework to go to so monologue or

00:32:19,179 --> 00:32:23,409
composer which is the dependency manager

00:32:21,010 --> 00:32:25,419
and all the well-established frameworks

00:32:23,409 --> 00:32:27,850
and there was a lot of really mature

00:32:25,419 --> 00:32:28,799
projects out in the ecosystem fishface

00:32:27,850 --> 00:32:31,240
pretty widespread

00:32:28,799 --> 00:32:33,539
there's tons of dogs tons of tutorials

00:32:31,240 --> 00:32:36,340
online so it's really easy to get help

00:32:33,539 --> 00:32:38,080
it's not surprising a peach he's been

00:32:36,340 --> 00:32:41,049
around for 20 years so we have a lot of

00:32:38,080 --> 00:32:44,230
materials and a lot of good practices in

00:32:41,049 --> 00:32:46,870
place and PHP 7 was really a huge leap

00:32:44,230 --> 00:32:48,400
forward in terms of how mature the

00:32:46,870 --> 00:32:49,780
language feels sort of getting rid of

00:32:48,400 --> 00:32:51,820
some of the nonsense that we had

00:32:49,780 --> 00:32:53,830
previously and obviously the big speed

00:32:51,820 --> 00:32:56,710
improvements like 30% out of the box is

00:32:53,830 --> 00:32:58,809
pretty significant and I also love the

00:32:56,710 --> 00:33:00,730
ability to enforce in types in PHP I've

00:32:58,809 --> 00:33:02,470
never been a fan of type juggling so I

00:33:00,730 --> 00:33:05,169
really like that you can do that now in

00:33:02,470 --> 00:33:07,360
PHP but there are also quite a few

00:33:05,169 --> 00:33:09,309
things that I liked about go

00:33:07,360 --> 00:33:10,620
I love the strong types from the start

00:33:09,309 --> 00:33:12,240
like I said

00:33:10,620 --> 00:33:14,360
it just to me it feels less prone to

00:33:12,240 --> 00:33:18,090
errors and a good habit to use types

00:33:14,360 --> 00:33:20,039
just less surprises along the way what's

00:33:18,090 --> 00:33:22,980
known as the idiomatic go which is kind

00:33:20,039 --> 00:33:24,630
of the way to write go programs it

00:33:22,980 --> 00:33:28,200
really encourages you to keep things

00:33:24,630 --> 00:33:30,480
simple like simple and stupid and there

00:33:28,200 --> 00:33:32,130
is a lot of object calisthenics sort of

00:33:30,480 --> 00:33:33,059
a lot of inspiration from there in the

00:33:32,130 --> 00:33:36,299
idiomatic go

00:33:33,059 --> 00:33:38,309
I love the error checking policy and

00:33:36,299 --> 00:33:40,679
I'll come back to that in a second

00:33:38,309 --> 00:33:42,210
I like that go has multiple return

00:33:40,679 --> 00:33:44,130
values because I no longer have to

00:33:42,210 --> 00:33:46,110
figure out if I should return an array

00:33:44,130 --> 00:33:48,330
with different fields or pass a million

00:33:46,110 --> 00:33:50,100
details everywhere you can just return

00:33:48,330 --> 00:33:51,450
multiple values and go functions which

00:33:50,100 --> 00:33:53,429
is pretty handy because you can return a

00:33:51,450 --> 00:33:55,230
value and an error and if the error is

00:33:53,429 --> 00:33:57,690
not nil then you know something's gone

00:33:55,230 --> 00:34:01,049
wrong it just simplifies that sort of

00:33:57,690 --> 00:34:03,059
detection and that flow like I said love

00:34:01,049 --> 00:34:05,419
the built in concurrency it's really fun

00:34:03,059 --> 00:34:08,280
to play around with it love the tooling

00:34:05,419 --> 00:34:09,899
I'm excited about modules because that

00:34:08,280 --> 00:34:13,320
would be the one missing puzzle that go

00:34:09,899 --> 00:34:15,270
didn't have for a very long time go is

00:34:13,320 --> 00:34:16,919
super easy to set up and run like I said

00:34:15,270 --> 00:34:20,369
just brew install or whatever you're a

00:34:16,919 --> 00:34:21,960
package you're distribution is I'd like

00:34:20,369 --> 00:34:24,270
the wider range of applications and go I

00:34:21,960 --> 00:34:26,520
feel like you can build anything and go

00:34:24,270 --> 00:34:28,139
from a web server to a website there is

00:34:26,520 --> 00:34:30,419
a templating language that you can use

00:34:28,139 --> 00:34:32,010
as HTML templates but you can also do

00:34:30,419 --> 00:34:33,960
all this stuff under the hood that PHP

00:34:32,010 --> 00:34:36,960
maybe wouldn't feel like the right thing

00:34:33,960 --> 00:34:39,839
to use and I'm really impressed with the

00:34:36,960 --> 00:34:41,879
speed and how much faster it is than PHP

00:34:39,839 --> 00:34:43,200
and that's probably always going to be

00:34:41,879 --> 00:34:45,629
the case because it's a compiled

00:34:43,200 --> 00:34:49,020
language so naturally probably always

00:34:45,629 --> 00:34:51,450
going to be like that some of my not so

00:34:49,020 --> 00:34:52,830
favorite things or what I can what I

00:34:51,450 --> 00:34:55,859
think could be a little bit better about

00:34:52,830 --> 00:34:58,140
each peach fee is supposed to go feels a

00:34:55,859 --> 00:35:01,950
little bit more inconsistent obviously a

00:34:58,140 --> 00:35:03,480
20 year old language versus six seven

00:35:01,950 --> 00:35:06,420
year old language that's very enough I

00:35:03,480 --> 00:35:08,400
think you know we've all heard of the

00:35:06,420 --> 00:35:09,780
fractal of bad design article which

00:35:08,400 --> 00:35:12,750
lists the million things that are wrong

00:35:09,780 --> 00:35:14,130
with PHP I'm pretty sure in ten years

00:35:12,750 --> 00:35:18,869
time there will be articles like that

00:35:14,130 --> 00:35:20,490
about go PHP kind of allows you to do

00:35:18,869 --> 00:35:21,690
stupid things sometimes and get away

00:35:20,490 --> 00:35:23,760
with it

00:35:21,690 --> 00:35:25,860
let's see leave dead code around because

00:35:23,760 --> 00:35:27,900
it's an interpreted language the PHP

00:35:25,860 --> 00:35:31,320
interpreter doesn't have the ability to

00:35:27,900 --> 00:35:33,030
check ahead if a variable that you're

00:35:31,320 --> 00:35:35,250
trying to reference is defined or not

00:35:33,030 --> 00:35:36,600
if something's used or not go because

00:35:35,250 --> 00:35:38,550
it's compiled you've got the analyzer

00:35:36,600 --> 00:35:39,870
and it can work out if you've declared a

00:35:38,550 --> 00:35:42,570
variable that is not never referenced

00:35:39,870 --> 00:35:44,310
and go will actually not compile if you

00:35:42,570 --> 00:35:46,110
have dead code around which is really

00:35:44,310 --> 00:35:48,450
annoying to start with if you if you

00:35:46,110 --> 00:35:50,310
used to just prototyping in PHP and sort

00:35:48,450 --> 00:35:51,900
of half finishing something and you know

00:35:50,310 --> 00:35:53,220
PHP is gonna complain about it and throw

00:35:51,900 --> 00:35:56,340
a million warnings but you carry on

00:35:53,220 --> 00:35:58,440
regardless can't do it and go it would

00:35:56,340 --> 00:36:00,860
just not compile it will refuse point

00:35:58,440 --> 00:36:02,580
blank you cannot get used to it and then

00:36:00,860 --> 00:36:05,430
surprisingly you then start writing

00:36:02,580 --> 00:36:08,220
correct programs to start with but

00:36:05,430 --> 00:36:11,580
that's a big difference

00:36:08,220 --> 00:36:13,200
PHP again some people say it's a it

00:36:11,580 --> 00:36:15,810
feels a little bit more verbose because

00:36:13,200 --> 00:36:17,460
of the brackets and everything and I

00:36:15,810 --> 00:36:19,290
cannot really wish PHP had multiple

00:36:17,460 --> 00:36:22,530
return values it really makes life

00:36:19,290 --> 00:36:24,810
simpler in many cases go on the other

00:36:22,530 --> 00:36:27,840
hand like I said before less mature I

00:36:24,810 --> 00:36:29,910
guess ecosystem it has a few good

00:36:27,840 --> 00:36:32,160
frameworks around by it lacks those well

00:36:29,910 --> 00:36:35,010
established mature tried and trusted

00:36:32,160 --> 00:36:39,470
battle tested frameworks there are a few

00:36:35,010 --> 00:36:41,670
go twos but not as many as in PHP and

00:36:39,470 --> 00:36:43,710
dependency managers like I said we had

00:36:41,670 --> 00:36:46,980
to wait till now it was a bit of a bumpy

00:36:43,710 --> 00:36:49,860
ride and the final thing is kind of as

00:36:46,980 --> 00:36:51,390
you do go you'll see that in PHP you

00:36:49,860 --> 00:36:53,250
have a lot of helper functions a lot of

00:36:51,390 --> 00:36:55,740
wrapper functions there's like a billion

00:36:53,250 --> 00:36:57,270
functions to manipulate strings go

00:36:55,740 --> 00:37:00,060
doesn't have as many and that was a

00:36:57,270 --> 00:37:02,820
deliberate design choice by the go

00:37:00,060 --> 00:37:04,740
creators because sometimes doing a for

00:37:02,820 --> 00:37:06,660
loop is way more efficient and faster

00:37:04,740 --> 00:37:08,580
than calling a designated function that

00:37:06,660 --> 00:37:10,140
under the hood does the same thing so

00:37:08,580 --> 00:37:11,880
the go creators kind of went for speed

00:37:10,140 --> 00:37:13,410
and that sometimes means that you have

00:37:11,880 --> 00:37:15,090
to be a little bit more verbose in your

00:37:13,410 --> 00:37:17,610
programs or you have to write the sugar

00:37:15,090 --> 00:37:18,930
yourself so sometimes I was thinking

00:37:17,610 --> 00:37:21,300
like oh god like do I really have to

00:37:18,930 --> 00:37:25,160
write this myself I would just use this

00:37:21,300 --> 00:37:28,260
and not in PHP but that's the trade-off

00:37:25,160 --> 00:37:30,300
so and even more interesting observation

00:37:28,260 --> 00:37:32,160
for me was noticing some things that I

00:37:30,300 --> 00:37:34,330
started doing in PHP once I've spent

00:37:32,160 --> 00:37:36,280
some time and goal and

00:37:34,330 --> 00:37:38,050
so as the results I'm definitely more

00:37:36,280 --> 00:37:40,330
mindful of keeping things simple and

00:37:38,050 --> 00:37:43,240
clean even if the language isn't forcing

00:37:40,330 --> 00:37:46,000
me to I also became way more strict with

00:37:43,240 --> 00:37:47,770
types even before we had types

00:37:46,000 --> 00:37:50,920
introduced in PHP it's just second

00:37:47,770 --> 00:37:53,950
nature now I never like type juggling so

00:37:50,920 --> 00:37:56,290
I make this explicit in all my PHP 7

00:37:53,950 --> 00:38:00,400
programs looking forward to tight

00:37:56,290 --> 00:38:02,760
properties class properties in 7.4 so

00:38:00,400 --> 00:38:06,040
that will kind of complete the circle I

00:38:02,760 --> 00:38:09,520
tend to use shorter and more sensible

00:38:06,040 --> 00:38:11,890
names if I have a class that sits in the

00:38:09,520 --> 00:38:14,980
controllers namespace do I really need

00:38:11,890 --> 00:38:17,200
to call it controller as well like we do

00:38:14,980 --> 00:38:20,200
this a lot for IDE like sort of easier

00:38:17,200 --> 00:38:21,790
searching through IDE but in theory if

00:38:20,200 --> 00:38:23,350
you already know it's in that name state

00:38:21,790 --> 00:38:29,530
namespace maybe maybe you don't need

00:38:23,350 --> 00:38:32,050
that certainly go is a big big know for

00:38:29,530 --> 00:38:34,300
enterprise style naming so here's an

00:38:32,050 --> 00:38:35,740
example from Rob Pike's talk where he

00:38:34,300 --> 00:38:37,270
sort of gives the Java example Java

00:38:35,740 --> 00:38:40,800
Enterprise and it just finishes with

00:38:37,270 --> 00:38:45,609
dear God make it stop and just love that

00:38:40,800 --> 00:38:48,790
yeah it's a yeah I can't even read this

00:38:45,609 --> 00:38:52,119
it extends things three times public

00:38:48,790 --> 00:38:54,810
static listenable future chain function

00:38:52,119 --> 00:38:57,880
something-something extends extends yeah

00:38:54,810 --> 00:39:01,359
certainly none of that ingo error

00:38:57,880 --> 00:39:03,430
handling basically the main message from

00:39:01,359 --> 00:39:06,369
go is handle your errors first and

00:39:03,430 --> 00:39:08,560
that's like rule number one so the

00:39:06,369 --> 00:39:10,359
things on the left is what I used to do

00:39:08,560 --> 00:39:13,270
before I switch to PHP quite often and

00:39:10,359 --> 00:39:14,650
if I was to explain this I couldn't even

00:39:13,270 --> 00:39:16,510
tell you what it's going on because it's

00:39:14,650 --> 00:39:18,520
like an if and else and then if inside

00:39:16,510 --> 00:39:20,260
and you kind of see that in PHP that it

00:39:18,520 --> 00:39:21,910
just becomes those those nested if and

00:39:20,260 --> 00:39:24,310
else ladders are just becoming a

00:39:21,910 --> 00:39:26,800
nightmare the code on the right does

00:39:24,310 --> 00:39:29,530
exactly the same thing but it's so much

00:39:26,800 --> 00:39:31,750
easier basically if the name is empty

00:39:29,530 --> 00:39:33,520
you return false if the name is not a

00:39:31,750 --> 00:39:35,050
string you return false otherwise you

00:39:33,520 --> 00:39:36,850
return true so it's probably a name

00:39:35,050 --> 00:39:40,390
validator or something like that but

00:39:36,850 --> 00:39:42,550
it's just so much easier to explain and

00:39:40,390 --> 00:39:45,160
the difference is essentially you focus

00:39:42,550 --> 00:39:47,020
on the error cases and you handle them

00:39:45,160 --> 00:39:47,360
first as soon as they happen so soon as

00:39:47,020 --> 00:39:49,010
something

00:39:47,360 --> 00:39:50,810
right you were just returned you don't

00:39:49,010 --> 00:39:52,580
carry on you don't like go through your

00:39:50,810 --> 00:39:55,610
code and collect a list of errors and

00:39:52,580 --> 00:39:57,380
then eventually spit it all up so you

00:39:55,610 --> 00:39:59,450
basically just the main benefit is that

00:39:57,380 --> 00:40:01,130
you don't run into the risk of doing

00:39:59,450 --> 00:40:02,720
something you wouldn't accidentally want

00:40:01,130 --> 00:40:05,780
to do if there are errors or errors

00:40:02,720 --> 00:40:07,460
already so I really like this fail-fast

00:40:05,780 --> 00:40:11,420
approach which is kind of the standard

00:40:07,460 --> 00:40:13,280
way of writing go apps also gives you

00:40:11,420 --> 00:40:17,630
the benefit of just having two lines of

00:40:13,280 --> 00:40:20,180
sight as a positive three so another

00:40:17,630 --> 00:40:21,470
programmer including your future self in

00:40:20,180 --> 00:40:23,390
six months time when you're glancing

00:40:21,470 --> 00:40:24,800
through your program it's just easier to

00:40:23,390 --> 00:40:27,620
understand and that's part of the object

00:40:24,800 --> 00:40:29,120
calisthenics as well so if you've never

00:40:27,620 --> 00:40:30,380
heard of that I highly recommend looking

00:40:29,120 --> 00:40:31,910
into that because a lot of the

00:40:30,380 --> 00:40:36,410
calisthenics are just incorporated and

00:40:31,910 --> 00:40:38,060
go from the start so obviously go didn't

00:40:36,410 --> 00:40:40,130
invent this but it was good that made me

00:40:38,060 --> 00:40:44,810
apply it a lot more and then I now do

00:40:40,130 --> 00:40:48,050
the same thing in PHP using interfaces

00:40:44,810 --> 00:40:50,270
and go if you design your domain well

00:40:48,050 --> 00:40:51,830
and go and then you leverage you can

00:40:50,270 --> 00:40:54,020
leverage the power of interfaces to do

00:40:51,830 --> 00:40:55,580
things like DDD and hack hex

00:40:54,020 --> 00:40:58,760
architecture really really well and go

00:40:55,580 --> 00:41:00,860
and then that in turn makes your code

00:40:58,760 --> 00:41:02,540
safer to change easier to change more

00:41:00,860 --> 00:41:04,700
extensible and all the goodness that

00:41:02,540 --> 00:41:08,660
comes with DDT and hex architecture and

00:41:04,700 --> 00:41:13,970
all of that so the difference is that

00:41:08,660 --> 00:41:16,640
goes interfaces are implicit so and go

00:41:13,970 --> 00:41:20,570
you think of something if something has

00:41:16,640 --> 00:41:25,040
a rather than something is a then a has

00:41:20,570 --> 00:41:26,660
an interface X so if a struct in goes

00:41:25,040 --> 00:41:29,330
structures a little bit like object has

00:41:26,660 --> 00:41:32,570
methods ABC then it implements interface

00:41:29,330 --> 00:41:34,400
X but if an object in PHP with more you

00:41:32,570 --> 00:41:36,980
would think more like if the object is

00:41:34,400 --> 00:41:40,430
of type X then it should have methods

00:41:36,980 --> 00:41:44,600
ABC so go kind of reverse this and does

00:41:40,430 --> 00:41:47,510
it sort of back to front or the other

00:41:44,600 --> 00:41:48,770
way around and the the sort of most

00:41:47,510 --> 00:41:50,330
curious things is that you don't

00:41:48,770 --> 00:41:52,400
actually declared interfaces and go

00:41:50,330 --> 00:41:54,920
explicitly it just works that out under

00:41:52,400 --> 00:41:56,450
the hood like if a Caesar is struct and

00:41:54,920 --> 00:41:57,980
it sees that that struct implements

00:41:56,450 --> 00:41:59,720
types then they would just know that

00:41:57,980 --> 00:42:00,920
that implements that interface and then

00:41:59,720 --> 00:42:03,050
everywhere you want to inject and

00:42:00,920 --> 00:42:04,190
interface it would just work like go

00:42:03,050 --> 00:42:06,140
we'll just work all of that under the

00:42:04,190 --> 00:42:09,740
hood so there's no explicit explicit

00:42:06,140 --> 00:42:11,420
declaration so here's a simple example a

00:42:09,740 --> 00:42:14,600
shape interface which has an area

00:42:11,420 --> 00:42:17,300
function and then we also declare a type

00:42:14,600 --> 00:42:20,330
called circle which is a struct so kind

00:42:17,300 --> 00:42:23,390
of like an object and then we define an

00:42:20,330 --> 00:42:25,660
area function which is which this circle

00:42:23,390 --> 00:42:28,010
struct implements so that's the receiver

00:42:25,660 --> 00:42:29,900
so in go you kind of you can declare the

00:42:28,010 --> 00:42:32,240
receiver of a function and that's like

00:42:29,900 --> 00:42:37,010
putting that function in the class of

00:42:32,240 --> 00:42:38,900
the circle and so go at this point knows

00:42:37,010 --> 00:42:40,520
that circle implements the shape

00:42:38,900 --> 00:42:42,230
interface because it has the same

00:42:40,520 --> 00:42:44,030
function if you just renamed the

00:42:42,230 --> 00:42:45,860
functions or if you suddenly renamed the

00:42:44,030 --> 00:42:48,500
function in the interface that link

00:42:45,860 --> 00:42:50,060
would be broken so in PHP obviously have

00:42:48,500 --> 00:42:54,640
to be explicit you have to say that

00:42:50,060 --> 00:42:54,640
class circle implements interface shape

00:42:55,930 --> 00:43:00,770
so another side benefit of that is it

00:42:59,330 --> 00:43:03,200
makes refactoring easier because

00:43:00,770 --> 00:43:05,690
obviously there's less things to rename

00:43:03,200 --> 00:43:07,220
or read Eclair like if you get your

00:43:05,690 --> 00:43:08,270
design right and go up so you can just

00:43:07,220 --> 00:43:10,040
shuffle things around you can rename

00:43:08,270 --> 00:43:12,890
things but it will just work without

00:43:10,040 --> 00:43:17,810
having to then pair up the interfaces

00:43:12,890 --> 00:43:19,910
again with the implementations so I

00:43:17,810 --> 00:43:22,640
think that learning go has made me a

00:43:19,910 --> 00:43:23,990
better programmer for sure I think

00:43:22,640 --> 00:43:25,610
knowing more than one programming

00:43:23,990 --> 00:43:27,740
language really gives you more than one

00:43:25,610 --> 00:43:30,440
world view on some problems and you can

00:43:27,740 --> 00:43:31,520
share ideas across languages it goes

00:43:30,440 --> 00:43:33,670
without saying that it makes you more

00:43:31,520 --> 00:43:36,080
employable these days these days really

00:43:33,670 --> 00:43:37,400
anyone is just a PHP developer you're

00:43:36,080 --> 00:43:39,620
probably expected to at least know some

00:43:37,400 --> 00:43:42,470
JavaScript but it makes you more

00:43:39,620 --> 00:43:45,230
employable if you can do go or Java or

00:43:42,470 --> 00:43:46,820
whatever else as well and it just feels

00:43:45,230 --> 00:43:48,320
great to have another tool under your

00:43:46,820 --> 00:43:50,690
belt belt like it really expands your

00:43:48,320 --> 00:43:52,880
horizons you get into new communities

00:43:50,690 --> 00:43:55,010
you make new friends so I really

00:43:52,880 --> 00:43:56,270
encourage you to go out today and learn

00:43:55,010 --> 00:43:58,580
whatever like programming language you

00:43:56,270 --> 00:44:01,490
wanted to look into next doesn't have to

00:43:58,580 --> 00:44:03,230
be go and this talk obviously wouldn't

00:44:01,490 --> 00:44:05,750
be complete without briefly mentioning

00:44:03,230 --> 00:44:08,360
the two communities so I think both of

00:44:05,750 --> 00:44:09,830
them are great I think this talk is

00:44:08,360 --> 00:44:11,240
proof that there is no reason that you

00:44:09,830 --> 00:44:14,099
should limit yourself to just one

00:44:11,240 --> 00:44:17,910
community community and there is no

00:44:14,099 --> 00:44:19,710
reason that you can't exist in both soap

00:44:17,910 --> 00:44:22,259
each week the key HP community rocks and

00:44:19,710 --> 00:44:24,089
we have many many conferences I think

00:44:22,259 --> 00:44:25,920
this is James and Jeremy at Peach people

00:44:24,089 --> 00:44:28,559
called Bulgaria a few years ago

00:44:25,920 --> 00:44:30,749
which was really fun but go is kind of

00:44:28,559 --> 00:44:32,220
quickly catching up though the main go

00:44:30,749 --> 00:44:34,200
conference which has been running for

00:44:32,220 --> 00:44:36,059
five years now is called go freak on and

00:44:34,200 --> 00:44:37,650
that used to be in Denver this year it's

00:44:36,059 --> 00:44:39,630
in San Diego for the first time so they

00:44:37,650 --> 00:44:42,119
are moving it around so go conferences

00:44:39,630 --> 00:44:44,609
have been happening for about five years

00:44:42,119 --> 00:44:46,430
and since then they've exploded and they

00:44:44,609 --> 00:44:49,079
are now popping up all over the world

00:44:46,430 --> 00:44:50,369
actually John and Sam the people who are

00:44:49,079 --> 00:44:52,410
behind this conference they also

00:44:50,369 --> 00:44:54,479
organize go freak on UK used to be

00:44:52,410 --> 00:44:55,589
called Galang UK so it's happening

00:44:54,479 --> 00:44:57,210
usually in August

00:44:55,589 --> 00:44:58,829
so again if you're interested check it

00:44:57,210 --> 00:45:01,859
out I think the tickets are already on

00:44:58,829 --> 00:45:03,630
sale and there is also got free con EU

00:45:01,859 --> 00:45:04,739
which this year is in Tenerife last year

00:45:03,630 --> 00:45:06,920
it was in Iceland and it was really

00:45:04,739 --> 00:45:10,380
really cool there is dough in France

00:45:06,920 --> 00:45:11,970
there is a gopher con in Brazil in India

00:45:10,380 --> 00:45:14,430
and Canada is just all over the place

00:45:11,970 --> 00:45:16,619
now there is one in New York City as

00:45:14,430 --> 00:45:19,109
well there is something called called

00:45:16,619 --> 00:45:21,569
gopher Palooza in San Francisco there's

00:45:19,109 --> 00:45:21,989
also all sorts of things in London as

00:45:21,569 --> 00:45:24,569
well

00:45:21,989 --> 00:45:25,049
if you loco check out the London Gophers

00:45:24,569 --> 00:45:27,299
Meetup

00:45:25,049 --> 00:45:30,630
it's a monthly meetup on go like PHP

00:45:27,299 --> 00:45:33,210
London and I think there is quite a few

00:45:30,630 --> 00:45:34,769
there's definitely go in Bristol I think

00:45:33,210 --> 00:45:38,400
I was going Cardiff pretty sure there

00:45:34,769 --> 00:45:39,869
will be popping up more and more so a

00:45:38,400 --> 00:45:41,640
lot of people sort of say okay what

00:45:39,869 --> 00:45:42,960
would you recommend if I wanted to get

00:45:41,640 --> 00:45:46,200
started with ghost I've just put a bunch

00:45:42,960 --> 00:45:47,640
of links and talks golang.org which is

00:45:46,200 --> 00:45:50,400
the main website for go really kind of

00:45:47,640 --> 00:45:51,059
has it all it has a blog it has a tour

00:45:50,400 --> 00:45:52,200
of go

00:45:51,059 --> 00:45:54,269
it even has something called a

00:45:52,200 --> 00:45:56,039
playground and the playground is really

00:45:54,269 --> 00:45:58,019
cool because it lets you just try a go

00:45:56,039 --> 00:45:59,579
code in your browser without even

00:45:58,019 --> 00:46:02,819
installing it which is really cool and

00:45:59,579 --> 00:46:04,289
then later on imagine PHP Docs where you

00:46:02,819 --> 00:46:05,910
could just run a function right there

00:46:04,289 --> 00:46:08,130
and then by look after looking at the

00:46:05,910 --> 00:46:09,630
docs and tweak the parametrized

00:46:08,130 --> 00:46:11,460
that's essentially go playing around so

00:46:09,630 --> 00:46:13,529
it's really really cool when you're

00:46:11,460 --> 00:46:14,819
starting out and even like even as

00:46:13,529 --> 00:46:19,559
you're doing go for years and years and

00:46:14,819 --> 00:46:20,819
years so go by example is another

00:46:19,559 --> 00:46:22,200
website which is kind of like a tour of

00:46:20,819 --> 00:46:24,779
go it just takes you through some

00:46:22,200 --> 00:46:26,039
examples talks on the right concurrency

00:46:24,779 --> 00:46:27,420
is not parallelism I've already

00:46:26,039 --> 00:46:27,820
mentioned that that's the talk by Rob

00:46:27,420 --> 00:46:29,290
pike

00:46:27,820 --> 00:46:30,490
it's really really good I think it's

00:46:29,290 --> 00:46:32,980
only 20 minutes long so it's well worth

00:46:30,490 --> 00:46:35,710
for watch simplicity is complicated is

00:46:32,980 --> 00:46:38,650
another talk by Rob and it just talks a

00:46:35,710 --> 00:46:40,450
lot about how writing simple go apps is

00:46:38,650 --> 00:46:42,400
actually really really hard and kind of

00:46:40,450 --> 00:46:46,030
gives you some ideas for how to achieve

00:46:42,400 --> 00:46:47,740
that if you're into containers and if

00:46:46,030 --> 00:46:49,840
you want to see a doctor like container

00:46:47,740 --> 00:46:51,640
built onstage in 20 minutes then this

00:46:49,840 --> 00:46:54,370
rice has a really really good talk on

00:46:51,640 --> 00:46:56,320
that she built a container and go from

00:46:54,370 --> 00:46:58,420
scratch in 20 minutes which really

00:46:56,320 --> 00:47:00,160
explains the basics of how containers

00:46:58,420 --> 00:47:01,600
work under the hood and how they

00:47:00,160 --> 00:47:03,850
interact with the operating system and

00:47:01,600 --> 00:47:05,680
then she didn't matter talk which is

00:47:03,850 --> 00:47:07,060
building a debugger from scratch and go

00:47:05,680 --> 00:47:08,740
again in 20 minutes

00:47:07,060 --> 00:47:11,350
both really good talks so I've put links

00:47:08,740 --> 00:47:13,740
to to those I will tweet out the link to

00:47:11,350 --> 00:47:16,150
the slides so don't worry about pictures

00:47:13,740 --> 00:47:17,770
and with that I hope you enjoyed the

00:47:16,150 --> 00:47:19,810
rest of the conference thanks so much

00:47:17,770 --> 00:47:21,820
for listening the slides will be out

00:47:19,810 --> 00:47:24,010
there already online please give me

00:47:21,820 --> 00:47:25,720
feedback on joined in and if you have

00:47:24,010 --> 00:47:28,030
any questions I've left lots of time for

00:47:25,720 --> 00:47:29,980
comments but feel free to just grab me

00:47:28,030 --> 00:47:33,270
I'll be here for the rest of the day and

00:47:29,980 --> 00:47:41,720
at the social so thank you very much

00:47:33,270 --> 00:47:43,320
[Applause]

00:47:41,720 --> 00:47:54,270
yes ma'am

00:47:43,320 --> 00:47:58,920
right so if anybody wants to I gather

00:47:54,270 --> 00:48:02,280
actually two questions one is ago as a

00:47:58,920 --> 00:48:04,230
lot of packaged out-of-the-box right is

00:48:02,280 --> 00:48:06,270
possible to put it the only one or you

00:48:04,230 --> 00:48:10,170
have to put eight the world language and

00:48:06,270 --> 00:48:13,950
another question is and we can we can

00:48:10,170 --> 00:48:22,109
think about replacing rabbitmq messages

00:48:13,950 --> 00:48:24,450
system with a goroutine thank you for

00:48:22,109 --> 00:48:26,099
different so I'll start this ago so

00:48:24,450 --> 00:48:27,780
actually the first one so the question

00:48:26,099 --> 00:48:31,200
was you have a lot of packages and go

00:48:27,780 --> 00:48:33,660
and can you just import one not all of

00:48:31,200 --> 00:48:35,940
them all right I want to update to just

00:48:33,660 --> 00:48:38,099
one package for example the sync package

00:48:35,940 --> 00:48:41,579
you have to upgrade all the language or

00:48:38,099 --> 00:48:43,050
I can upgrade the sync package

00:48:41,579 --> 00:48:46,260
you can upgrade the sync package it's

00:48:43,050 --> 00:48:48,240
actually the sort of go on your system

00:48:46,260 --> 00:48:49,950
is going to be all the tooling that will

00:48:48,240 --> 00:48:52,980
let you run go apps but actually the

00:48:49,950 --> 00:48:57,089
source code forego itself will be so the

00:48:52,980 --> 00:48:58,710
native go packages like the HTTP and log

00:48:57,089 --> 00:49:00,569
and like everything that is built in to

00:48:58,710 --> 00:49:02,640
go that would be tied to the version of

00:49:00,569 --> 00:49:03,810
go in your system so if you have go 111

00:49:02,640 --> 00:49:06,089
then you'll have that version of the

00:49:03,810 --> 00:49:08,579
sync package if you have go 1.8 you'll

00:49:06,089 --> 00:49:10,710
have that version and then if you're

00:49:08,579 --> 00:49:13,710
using third-party packages or like the

00:49:10,710 --> 00:49:16,470
Golan X packages which are not in the go

00:49:13,710 --> 00:49:18,930
core but sort of endorsed by the go

00:49:16,470 --> 00:49:21,089
creators then you can choose the version

00:49:18,930 --> 00:49:23,400
and again depending on whether using go

00:49:21,089 --> 00:49:25,680
get or one of the open source dependency

00:49:23,400 --> 00:49:27,210
managers or modules these days there's

00:49:25,680 --> 00:49:29,849
different ways to lock them but in

00:49:27,210 --> 00:49:32,550
theory from the kholghoor it's just like

00:49:29,849 --> 00:49:35,160
PHP so like if you have PHP 7 you will

00:49:32,550 --> 00:49:40,560
just have PHP 7 version of the strings

00:49:35,160 --> 00:49:41,010
functions so second question was remind

00:49:40,560 --> 00:49:44,040
me

00:49:41,010 --> 00:49:45,720
Oh rabbit and Q I probably wouldn't

00:49:44,040 --> 00:49:46,859
replace the entire queueing system with

00:49:45,720 --> 00:49:48,780
your go route because like if you

00:49:46,859 --> 00:49:50,550
remember the go routines are mapped to

00:49:48,780 --> 00:49:51,940
OS threads so you can actually run out

00:49:50,550 --> 00:49:54,130
of memory and like your

00:49:51,940 --> 00:49:55,540
program we'll just might not have have

00:49:54,130 --> 00:49:57,070
enough memory to just hold all the data

00:49:55,540 --> 00:49:58,810
in in memory

00:49:57,070 --> 00:50:00,820
I think rewriting something like

00:49:58,810 --> 00:50:02,620
RabbitMQ I think rabbinic use Erlang

00:50:00,820 --> 00:50:05,920
isn't it so it's already a concurrent

00:50:02,620 --> 00:50:08,020
very solid language I think rewriting

00:50:05,920 --> 00:50:10,060
something a queueing system and go makes

00:50:08,020 --> 00:50:11,530
sense I don't think it's a replacement

00:50:10,060 --> 00:50:13,270
for a queueing system because also

00:50:11,530 --> 00:50:15,130
queueing systems have all the retries

00:50:13,270 --> 00:50:19,870
and everything all of that is built into

00:50:15,130 --> 00:50:22,120
rabbit or whatever using et else all of

00:50:19,870 --> 00:50:24,330
that stuff that you wouldn't get with

00:50:22,120 --> 00:50:27,810
the go routine I mean you could try I

00:50:24,330 --> 00:50:31,800
don't think you would work on production

00:50:27,810 --> 00:50:31,800
yeah there worries

00:50:32,220 --> 00:50:35,910
any other questions

00:50:44,199 --> 00:50:51,439
is there an edit order for Windows for

00:50:48,259 --> 00:50:53,689
the goal language yes jetbrains have a

00:50:51,439 --> 00:50:55,640
goal and thinking it was called goal

00:50:53,689 --> 00:50:59,269
clang now is goal and so if you're into

00:50:55,640 --> 00:51:01,009
phpstorm there is a go equivalent Visual

00:50:59,269 --> 00:51:03,109
Studio code has a go plug-in which is

00:51:01,009 --> 00:51:04,999
really really good Atem has a go plug in

00:51:03,109 --> 00:51:12,319
sublime has a go plug-in everything has

00:51:04,999 --> 00:51:13,939
a go plug-in so yeah thank you you

00:51:12,319 --> 00:51:16,519
discussed about parallelism

00:51:13,939 --> 00:51:19,069
I was curious about if you would want to

00:51:16,519 --> 00:51:20,959
scale more than one machine I have more

00:51:19,069 --> 00:51:24,109
connected as goals have any frameworks

00:51:20,959 --> 00:51:27,829
that help moving things outside of just

00:51:24,109 --> 00:51:30,140
one application and having more I mean

00:51:27,829 --> 00:51:32,150
I'm pretty sure there is there are load

00:51:30,140 --> 00:51:34,209
balancers and such written and go like

00:51:32,150 --> 00:51:37,160
track traffic I can never pronounce this

00:51:34,209 --> 00:51:38,689
but there are things written and go that

00:51:37,160 --> 00:51:40,009
kind of like like act like load

00:51:38,689 --> 00:51:41,449
balancers and they will route traffic

00:51:40,009 --> 00:51:43,549
because at this point if you're scaling

00:51:41,449 --> 00:51:45,979
horizontally you're kind of looking more

00:51:43,549 --> 00:51:48,890
at infrastructure in the request routing

00:51:45,979 --> 00:51:51,170
things like envoy's or linker D that

00:51:48,890 --> 00:51:54,009
kind of thing and then your ghost

00:51:51,170 --> 00:51:56,929
service will just have to be completely

00:51:54,009 --> 00:51:59,209
stateless and kind of generic that any

00:51:56,929 --> 00:52:01,459
requests can hit any service so you can

00:51:59,209 --> 00:52:03,199
have multiple ghost services running if

00:52:01,459 --> 00:52:05,989
you're using kubernetes you can have as

00:52:03,199 --> 00:52:07,759
many go apps as containers running or

00:52:05,989 --> 00:52:08,959
you can just spin up as many but like

00:52:07,759 --> 00:52:11,119
you can basically just kick off it as

00:52:08,959 --> 00:52:13,489
many binaries as you wanted to and they

00:52:11,119 --> 00:52:15,619
can all be up at the same time and they

00:52:13,489 --> 00:52:17,029
can all listen for a quest and then it's

00:52:15,619 --> 00:52:19,009
just a matter of what you're using to

00:52:17,029 --> 00:52:21,619
actually spread the load but you're

00:52:19,009 --> 00:52:25,239
entirely possible ok no different to PHP

00:52:21,619 --> 00:52:25,239
though like the same principles yeah

00:52:26,499 --> 00:52:32,839
thanks for a really good talk I've been

00:52:29,989 --> 00:52:35,269
bit nervous about using go I've heard a

00:52:32,839 --> 00:52:37,609
rumor that if you have too much exposure

00:52:35,269 --> 00:52:39,559
to it you end up looking and acting like

00:52:37,609 --> 00:52:44,119
a gopher is there any truth in that

00:52:39,559 --> 00:52:48,199
statement I was gonna say do I look like

00:52:44,119 --> 00:52:50,599
a gopher yet sort of like you definitely

00:52:48,199 --> 00:52:53,329
start applying more of go and teach be

00:52:50,599 --> 00:52:54,979
like you're kind of trying to or start

00:52:53,329 --> 00:52:56,509
like just even without thinking bringing

00:52:54,979 --> 00:52:57,770
all those like the way that you would

00:52:56,509 --> 00:52:59,810
write a go program it gonna

00:52:57,770 --> 00:53:01,580
start doing this in PHP I don't know

00:52:59,810 --> 00:53:03,640
personally I think I'm just a lot more

00:53:01,580 --> 00:53:05,510
open to like different communities I'm

00:53:03,640 --> 00:53:07,520
certainly don't plan it would plan to

00:53:05,510 --> 00:53:09,320
move away from PHP and I'm not just sort

00:53:07,520 --> 00:53:11,630
of saying oh now I'm all going no PHP I

00:53:09,320 --> 00:53:14,030
think both of them are still perfectly

00:53:11,630 --> 00:53:16,520
valid like 80% of the web is powered by

00:53:14,030 --> 00:53:18,860
PHP so you know if he's not going away

00:53:16,520 --> 00:53:21,230
anywhere but I think it's actually

00:53:18,860 --> 00:53:22,610
interesting because I gave this talk for

00:53:21,230 --> 00:53:25,370
the first time two years ago and go in

00:53:22,610 --> 00:53:26,870
PHP were really different and now like

00:53:25,370 --> 00:53:28,580
this year in the end of last year has

00:53:26,870 --> 00:53:30,310
shown that they're actually quite sort

00:53:28,580 --> 00:53:32,900
of peach peas quite merging towards go

00:53:30,310 --> 00:53:35,360
and that's kind of hardware language

00:53:32,900 --> 00:53:36,950
limitations that we've had so I think it

00:53:35,360 --> 00:53:39,140
might actually I think learning go now

00:53:36,950 --> 00:53:41,180
will allow you to learn concurrency

00:53:39,140 --> 00:53:42,830
patterns that you will then in a year or

00:53:41,180 --> 00:53:45,620
two years time you'll see them in PHP

00:53:42,830 --> 00:53:46,160
and then you won't be surprised so get a

00:53:45,620 --> 00:53:52,130
head start

00:53:46,160 --> 00:53:54,700
Thanks those go hunter okay any more

00:53:52,130 --> 00:53:54,700
questions

00:54:03,960 --> 00:54:09,960
hi um you didn't mention about any

00:54:07,140 --> 00:54:12,030
testing further so do you have any

00:54:09,960 --> 00:54:15,450
pointers or how difficult or easy it is

00:54:12,030 --> 00:54:17,400
to do any testing yes so ego has kind of

00:54:15,450 --> 00:54:20,220
two main types of tests it would be unit

00:54:17,400 --> 00:54:21,750
tests and benchmarks which is really

00:54:20,220 --> 00:54:24,690
cool that benchmarks are built-in to go

00:54:21,750 --> 00:54:27,150
so unit tests are just like in PHP like

00:54:24,690 --> 00:54:30,050
same principles they are built into the

00:54:27,150 --> 00:54:32,100
go toolbox so you just go go test

00:54:30,050 --> 00:54:34,170
package name or whatever and they would

00:54:32,100 --> 00:54:35,700
just run the tests every time you

00:54:34,170 --> 00:54:37,110
compile your program it will run through

00:54:35,700 --> 00:54:39,930
any tests that it finds

00:54:37,110 --> 00:54:42,240
so tests are underscore test go files

00:54:39,930 --> 00:54:44,400
and they usually sit next to your actual

00:54:42,240 --> 00:54:45,960
go files so the older tools will kind of

00:54:44,400 --> 00:54:48,540
know that this is a test file they will

00:54:45,960 --> 00:54:50,580
run it as part of the compilation and

00:54:48,540 --> 00:54:53,400
then you can just run them on your own

00:54:50,580 --> 00:54:54,840
with Co test and then benchmarks is just

00:54:53,400 --> 00:54:58,740
a different kind of tests where you can

00:54:54,840 --> 00:55:00,600
execute the same test until you converge

00:54:58,740 --> 00:55:02,340
on the result and if we're talking about

00:55:00,600 --> 00:55:04,650
like a million iterations 5 million

00:55:02,340 --> 00:55:06,690
iterations so in PHP you just write a

00:55:04,650 --> 00:55:09,750
loop around your PHP test and you'll be

00:55:06,690 --> 00:55:11,910
like executed a million times and then

00:55:09,750 --> 00:55:13,170
get the average run time whereas with

00:55:11,910 --> 00:55:14,790
god that's built into the testing

00:55:13,170 --> 00:55:16,620
framework so actually it spits you out

00:55:14,790 --> 00:55:18,210
all the stats for like this was the

00:55:16,620 --> 00:55:20,160
average this was the longest this is the

00:55:18,210 --> 00:55:21,660
variability all sorts of things so you

00:55:20,160 --> 00:55:23,730
can actually analyze programs for

00:55:21,660 --> 00:55:26,100
efficiency a lot better and go like a

00:55:23,730 --> 00:55:28,260
lot easier and go so yeah you can kind

00:55:26,100 --> 00:55:33,620
of just get benchmarking stats as well

00:55:28,260 --> 00:55:33,620
and it's out of the box so thank you

00:55:38,859 --> 00:55:45,220
do you have anything like b-hat or

00:55:43,069 --> 00:55:48,710
cucumber Africa

00:55:45,220 --> 00:55:51,710
hmm so BDD framers not that I'm aware of

00:55:48,710 --> 00:55:54,079
in general I think the reason why I'm

00:55:51,710 --> 00:55:56,539
not aware of that much is because you

00:55:54,079 --> 00:55:57,920
don't really use them that much or at

00:55:56,539 --> 00:55:59,680
least I don't use them in anything that

00:55:57,920 --> 00:56:02,180
I build so far we've go because usually

00:55:59,680 --> 00:56:04,309
you do micro services and go and they

00:56:02,180 --> 00:56:06,890
are actual micro-services they're very

00:56:04,309 --> 00:56:09,259
simple so I never had a need to use them

00:56:06,890 --> 00:56:11,809
as much I don't know if cucumber or

00:56:09,259 --> 00:56:15,349
gherkin as a language supports go I

00:56:11,809 --> 00:56:18,619
haven't checked but in general I think

00:56:15,349 --> 00:56:20,089
you rarely write sort of full-blown

00:56:18,619 --> 00:56:22,249
co-ops that would require something like

00:56:20,089 --> 00:56:23,960
this or if you I don't know like you can

00:56:22,249 --> 00:56:25,490
tell it's definitely possible but I

00:56:23,960 --> 00:56:27,259
think if I was writing something like a

00:56:25,490 --> 00:56:28,849
load balancer I'm not sure if I'd even

00:56:27,259 --> 00:56:30,650
use that or if I would just paste it on

00:56:28,849 --> 00:56:32,569
the tests because the tests the unit

00:56:30,650 --> 00:56:34,279
tests and you can kind of build

00:56:32,569 --> 00:56:37,670
integration tests with the unit testing

00:56:34,279 --> 00:56:41,019
framework so yeah but I haven't checked

00:56:37,670 --> 00:56:41,019
if Gary can actually supports go

00:56:50,410 --> 00:56:56,120
you didn't mention anything about

00:56:53,470 --> 00:56:59,330
object-oriented programming so classes

00:56:56,120 --> 00:57:03,140
and so on is it a limitation of the

00:56:59,330 --> 00:57:06,080
language how to deal with that so go is

00:57:03,140 --> 00:57:08,240
technically object-oriented because you

00:57:06,080 --> 00:57:11,030
can have sort of receiver like receivers

00:57:08,240 --> 00:57:12,350
on the functions it's just not as

00:57:11,030 --> 00:57:14,630
obvious as in PHP it doesn't have

00:57:12,350 --> 00:57:18,140
classes and objects but structs are kind

00:57:14,630 --> 00:57:20,600
of like objects packages are kind of

00:57:18,140 --> 00:57:22,490
like classes or basically classes are

00:57:20,600 --> 00:57:25,640
like a meta concepts that just exists

00:57:22,490 --> 00:57:27,140
when you sort of assign receivers to

00:57:25,640 --> 00:57:28,400
functions and then you know like you

00:57:27,140 --> 00:57:30,380
know that out of the ten functions

00:57:28,400 --> 00:57:32,960
declare it in a file five of them can

00:57:30,380 --> 00:57:36,380
only be executed on a struct so it kind

00:57:32,960 --> 00:57:38,960
of exists as a concept but not quite um

00:57:36,380 --> 00:57:40,910
I haven't found it that limiting because

00:57:38,960 --> 00:57:43,160
again it forces you to just keep your

00:57:40,910 --> 00:57:45,170
programs simple like in PHP if you

00:57:43,160 --> 00:57:47,510
really stick to the you know class

00:57:45,170 --> 00:57:49,670
shouldn't have more than 200 lines you

00:57:47,510 --> 00:57:51,050
end up with a lot of very simple classes

00:57:49,670 --> 00:57:54,440
and that sometimes to me felt like

00:57:51,050 --> 00:57:57,950
almost an overkill so go kind of if you

00:57:54,440 --> 00:58:01,430
go encourages you to keep your files and

00:57:57,950 --> 00:58:03,440
your packages fairly small and then at

00:58:01,430 --> 00:58:05,900
that point sometimes if you have a class

00:58:03,440 --> 00:58:07,160
that does one thing only then that kind

00:58:05,900 --> 00:58:10,370
of just becomes your package or your

00:58:07,160 --> 00:58:13,090
file so it's different but I didn't feel

00:58:10,370 --> 00:58:16,370
it's I didn't like Miss oo and go

00:58:13,090 --> 00:58:18,380
initially yes because initially like go

00:58:16,370 --> 00:58:20,060
also has pointers so you kind of get

00:58:18,380 --> 00:58:22,160
slightly confused between structs and

00:58:20,060 --> 00:58:24,200
pointers and when do you use what

00:58:22,160 --> 00:58:26,380
but over time I think it just starts to

00:58:24,200 --> 00:58:26,380

YouTube URL: https://www.youtube.com/watch?v=grHWdBzQKG4


