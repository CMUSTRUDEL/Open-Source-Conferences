Title: From Dev to Prod with GitLab CI - Stephan Hochdorfer - PHP UK Conference 2019
Publication date: 2019-03-22
Playlist: PHP UK Conference 2019
Description: 
	Continuous Delivery Pipeline as code is key helping you to ensure long term maintainability. Treating your pipeline as code helps you to version it in your SCM of choice, makes changes easily traceable and lets anyone on your team make required changes. In this session I will show you how we build and maintain our Continuous Delivery pipeline using tools like GitLab CI, Docker, Nexus and Traefik. Together we will take a deep dive into the GitLab CI Build Pipelines to build and deploy docker containers to dev, stage and production environments.
Captions: 
	00:00:03,529 --> 00:00:08,250
so welcome to this session from the EFT

00:00:05,730 --> 00:00:10,230
abroad with catalepsy I I know this is

00:00:08,250 --> 00:00:11,639
the post-lunch session which means that

00:00:10,230 --> 00:00:13,980
some of you might want to fall asleep

00:00:11,639 --> 00:00:16,830
I'm totally fine with that

00:00:13,980 --> 00:00:19,859
if you do so try to avoid snoring so

00:00:16,830 --> 00:00:24,420
that your your attendees next to you are

00:00:19,859 --> 00:00:26,670
not affected few words about me as I

00:00:24,420 --> 00:00:28,349
said hi my name is Stephan when I'm not

00:00:26,670 --> 00:00:30,980
speaking at conferences I do run my own

00:00:28,349 --> 00:00:34,200
company the company's called bid expert

00:00:30,980 --> 00:00:36,239
we are a technology company doing custom

00:00:34,200 --> 00:00:38,790
applications for our clients of all

00:00:36,239 --> 00:00:40,350
sorts my current role Apotex pert is

00:00:38,790 --> 00:00:41,670
called head of technology that means I'm

00:00:40,350 --> 00:00:44,899
responsible for getting technology

00:00:41,670 --> 00:00:47,239
knowledge into the company as well as

00:00:44,899 --> 00:00:50,010
organizing the whole educational

00:00:47,239 --> 00:00:52,289
programs that that we provide for our

00:00:50,010 --> 00:00:56,010
employees developers as well as project

00:00:52,289 --> 00:00:57,750
managers and since I've still got some

00:00:56,010 --> 00:01:00,149
spare time left and I'm not exactly sure

00:00:57,750 --> 00:01:03,000
how that happens I'm not organizing one

00:01:00,149 --> 00:01:04,860
but two PHP user groups so one is the

00:01:03,000 --> 00:01:06,270
PHP user group in Frankfurt and the

00:01:04,860 --> 00:01:08,369
other one is called the PHP user group

00:01:06,270 --> 00:01:13,140
metal-poor the guy in the car oh that's

00:01:08,369 --> 00:01:14,520
a very German name but basically what

00:01:13,140 --> 00:01:15,960
I'm saying if you're close to Frankfurt

00:01:14,520 --> 00:01:17,580
or if you're close to Manheim feel free

00:01:15,960 --> 00:01:20,189
to swing by we're always looking for

00:01:17,580 --> 00:01:21,869
speakers and attendees as well but I

00:01:20,189 --> 00:01:24,630
guess that's not what you're here for

00:01:21,869 --> 00:01:27,509
you're here for for this get lab who of

00:01:24,630 --> 00:01:30,720
you has heard of get lab before great

00:01:27,509 --> 00:01:34,950
who of you is using it lab ok

00:01:30,720 --> 00:01:38,520
who of you likes good lab ok same amount

00:01:34,950 --> 00:01:41,610
of hands that's good quick check of

00:01:38,520 --> 00:01:43,439
everything is up great but the question

00:01:41,610 --> 00:01:45,630
is that why are you here view if all of

00:01:43,439 --> 00:01:47,610
you are using at lab but I'm sure I have

00:01:45,630 --> 00:01:51,780
a few games with me that you will find

00:01:47,610 --> 00:01:54,149
interesting so for those of you who

00:01:51,780 --> 00:01:55,860
don't know what get lab is this is what

00:01:54,149 --> 00:01:58,770
wikipedia says good lab is a web-based

00:01:55,860 --> 00:02:01,259
git repository manager with Vicki and

00:01:58,770 --> 00:02:06,360
issue tracking features and to be fair

00:02:01,259 --> 00:02:09,720
this is still true today but gitlab is

00:02:06,360 --> 00:02:12,030
way more than that these days roughly I

00:02:09,720 --> 00:02:12,940
think two years ago the gate lab guys

00:02:12,030 --> 00:02:16,450
and now

00:02:12,940 --> 00:02:18,490
they're beyond CIA CD strategy meaning

00:02:16,450 --> 00:02:20,260
that they do not only want to cover the

00:02:18,490 --> 00:02:22,150
DEF parts and not only cover the ops

00:02:20,260 --> 00:02:25,210
part but making sure that like

00:02:22,150 --> 00:02:25,750
everything is working seamlessly out of

00:02:25,210 --> 00:02:28,210
the box

00:02:25,750 --> 00:02:30,340
meaning you as a developer you can plan

00:02:28,210 --> 00:02:33,310
new features by creating milestones and

00:02:30,340 --> 00:02:35,590
issues you can create them by obviously

00:02:33,310 --> 00:02:38,470
committing code and then pushing it to

00:02:35,590 --> 00:02:40,600
to get lab you can verify them by

00:02:38,470 --> 00:02:43,810
hopefully writing tests

00:02:40,600 --> 00:02:46,320
that's what hopefully all of you do then

00:02:43,810 --> 00:02:49,930
package it stuff releasing it

00:02:46,320 --> 00:02:51,760
configuring build pipelines monitoring

00:02:49,930 --> 00:02:53,710
your applications on staging and

00:02:51,760 --> 00:02:55,690
production and then again transitioning

00:02:53,710 --> 00:02:57,460
to the planning phase on improving

00:02:55,690 --> 00:02:59,950
existing features or planning new

00:02:57,460 --> 00:03:01,840
features and making sure that as I said

00:02:59,950 --> 00:03:05,410
everything works seamlessly together out

00:03:01,840 --> 00:03:08,190
of the box but let's get started first

00:03:05,410 --> 00:03:11,410
things first how do you install get lab

00:03:08,190 --> 00:03:13,360
well a couple of options you could use

00:03:11,410 --> 00:03:15,610
the get Lab omnibus installer which is

00:03:13,360 --> 00:03:17,560
like the de-facto standard there are

00:03:15,610 --> 00:03:21,100
packages for Debian and their packages

00:03:17,560 --> 00:03:23,560
for rpm or as all the cool kids these

00:03:21,100 --> 00:03:26,050
days do run it in in docker so there's a

00:03:23,560 --> 00:03:28,630
docker image on docker hub called gate

00:03:26,050 --> 00:03:30,790
lab - EE so C stands for Community

00:03:28,630 --> 00:03:33,010
Edition that you can use and this is

00:03:30,790 --> 00:03:35,260
basically more or less what we are doing

00:03:33,010 --> 00:03:40,500
we are not using the default image we've

00:03:35,260 --> 00:03:43,690
built it our own because because reasons

00:03:40,500 --> 00:03:46,239
just kidding but for the sake of this

00:03:43,690 --> 00:03:48,430
talk it's just like just like use the

00:03:46,239 --> 00:03:51,700
default image publish a couple of ports

00:03:48,430 --> 00:03:53,709
port 8422 and and that's basically it so

00:03:51,700 --> 00:03:57,370
you wait like two or three minutes get

00:03:53,709 --> 00:03:59,050
lab is is then spun up the database is

00:03:57,370 --> 00:04:00,420
up and running it will install itself to

00:03:59,050 --> 00:04:03,670
the database migration all this stuff

00:04:00,420 --> 00:04:06,519
cool so that that's one piece of the

00:04:03,670 --> 00:04:08,620
puzzle since during this talk we are

00:04:06,519 --> 00:04:11,170
building a docker image and we deploy

00:04:08,620 --> 00:04:14,739
docker images we do need a place to

00:04:11,170 --> 00:04:16,780
store them a docker registry now these

00:04:14,739 --> 00:04:19,419
days gait lab comes with the docker

00:04:16,780 --> 00:04:20,799
registry built in back in the days when

00:04:19,419 --> 00:04:22,990
we started this whole journey this

00:04:20,799 --> 00:04:25,360
wasn't the case so we had to look for an

00:04:22,990 --> 00:04:26,200
alternative which luckily already in

00:04:25,360 --> 00:04:28,120
place

00:04:26,200 --> 00:04:31,930
and this alternative is called Sona type

00:04:28,120 --> 00:04:33,670
Nexus so it originates from the Java

00:04:31,930 --> 00:04:35,980
world was used for hosting maven

00:04:33,670 --> 00:04:40,650
packages but these days they host a lot

00:04:35,980 --> 00:04:43,780
of more NPM power docker and and whatnot

00:04:40,650 --> 00:04:47,560
so this is this is basically what we are

00:04:43,780 --> 00:04:49,900
using for similar to get lab we run this

00:04:47,560 --> 00:04:51,550
in a docker container which is quite fun

00:04:49,900 --> 00:04:53,680
running a docker registry in a docker

00:04:51,550 --> 00:04:56,770
container that host talker images but

00:04:53,680 --> 00:04:58,750
that's a different story again these

00:04:56,770 --> 00:05:00,070
days there exists no official Sona type

00:04:58,750 --> 00:05:01,660
Nexus image back in the days when we

00:05:00,070 --> 00:05:05,170
started this wasn't the case so we build

00:05:01,660 --> 00:05:07,060
at our own and if you don't know how

00:05:05,170 --> 00:05:12,250
that looks like this is basically the

00:05:07,060 --> 00:05:13,630
nice fancy UI it comes with perfect for

00:05:12,250 --> 00:05:17,380
a java application that's probably the

00:05:13,630 --> 00:05:20,410
best i I can say what's really important

00:05:17,380 --> 00:05:23,110
in the whole process is that gitlab

00:05:20,410 --> 00:05:25,210
needs to authenticate against the nexus

00:05:23,110 --> 00:05:27,090
and this is also the case if you if you

00:05:25,210 --> 00:05:29,710
would run or if you would use the

00:05:27,090 --> 00:05:31,420
registry that get that provides so at

00:05:29,710 --> 00:05:33,310
some point you need to login this

00:05:31,420 --> 00:05:35,500
registry provide an username and

00:05:33,310 --> 00:05:38,800
password and then you're able to pull

00:05:35,500 --> 00:05:41,620
and push those images depending on how

00:05:38,800 --> 00:05:44,740
you're set set things up you could do

00:05:41,620 --> 00:05:46,300
this once on the host or during each and

00:05:44,740 --> 00:05:49,660
every bill that you're running so this

00:05:46,300 --> 00:05:51,400
this is a bit of like going going either

00:05:49,660 --> 00:05:54,880
way or the other depending on on your

00:05:51,400 --> 00:05:57,370
situation and the third piece of the

00:05:54,880 --> 00:05:59,320
puzzle that we need is an HTTP reverse

00:05:57,370 --> 00:06:01,900
proxy as we do want to run multiple

00:05:59,320 --> 00:06:04,690
darker instances on one host or multiple

00:06:01,900 --> 00:06:06,220
applications on one host we need to make

00:06:04,690 --> 00:06:08,190
sure that we have something up in front

00:06:06,220 --> 00:06:10,510
that does like the routing and stuff

00:06:08,190 --> 00:06:15,160
again there are hundreds of solutions

00:06:10,510 --> 00:06:18,100
you could use nginx age a proxy or we

00:06:15,160 --> 00:06:20,850
use traffic who have us has heard of

00:06:18,100 --> 00:06:24,460
traffic before okay who likes traffic

00:06:20,850 --> 00:06:26,950
okay if you few fewer hands okay no

00:06:24,460 --> 00:06:29,290
worries I like it because it's like

00:06:26,950 --> 00:06:30,700
super simple to configure it's like 15

00:06:29,290 --> 00:06:33,580
lines of code and and you've got the

00:06:30,700 --> 00:06:35,680
whole thing up and running what you need

00:06:33,580 --> 00:06:39,810
to define first is you need to instruct

00:06:35,680 --> 00:06:43,200
traffic to expose HTTP and it should be

00:06:39,810 --> 00:06:45,419
traffic and then you configure those

00:06:43,200 --> 00:06:48,270
those entry points saying HTTP traffic

00:06:45,419 --> 00:06:51,600
should be served on port 80 and we also

00:06:48,270 --> 00:06:53,340
do an HTTP upgrade so any HTTP

00:06:51,600 --> 00:06:55,950
connection get instantly upgraded to

00:06:53,340 --> 00:06:59,130
HTTPS so that our applications itself

00:06:55,950 --> 00:07:01,110
don't need to care about it and for HTTP

00:06:59,130 --> 00:07:03,360
connections we say they should listen on

00:07:01,110 --> 00:07:06,630
they should be served from from port 443

00:07:03,360 --> 00:07:09,240
and this is the certificate that that we

00:07:06,630 --> 00:07:11,400
are using for for this now since we use

00:07:09,240 --> 00:07:13,080
my upload lock as a custom domain we

00:07:11,400 --> 00:07:16,080
can't use a service like let's encrypt

00:07:13,080 --> 00:07:17,850
to generate those those certificates but

00:07:16,080 --> 00:07:19,380
this is something that traffic can do

00:07:17,850 --> 00:07:20,940
automatically so if you use a public

00:07:19,380 --> 00:07:23,220
available domain and traffic is

00:07:20,940 --> 00:07:26,100
available publicly or accessible

00:07:23,220 --> 00:07:28,020
publicly you could easily say okay just

00:07:26,100 --> 00:07:29,610
do the magic with let's encrypt generate

00:07:28,020 --> 00:07:32,430
those certificates on the fly and and

00:07:29,610 --> 00:07:34,260
everything is good now where does

00:07:32,430 --> 00:07:36,090
traffic get its configuration from and

00:07:34,260 --> 00:07:37,770
this is a pretty cool part there are

00:07:36,090 --> 00:07:40,710
multiple configuration back and support

00:07:37,770 --> 00:07:42,750
the easiest one is probably saying okay

00:07:40,710 --> 00:07:45,419
traffic like here's a doctor soccer just

00:07:42,750 --> 00:07:47,039
listen to it and watch the events that

00:07:45,419 --> 00:07:50,820
happen there and then just magically

00:07:47,039 --> 00:07:53,490
generate your configuration as you see

00:07:50,820 --> 00:07:55,440
it you can also hook it up into Rancher

00:07:53,490 --> 00:07:58,590
that's another solution you could use

00:07:55,440 --> 00:08:01,789
etcd and and all sorts of key value

00:07:58,590 --> 00:08:05,120
stores so you're pretty open in in

00:08:01,789 --> 00:08:08,070
picking your your configuration endpoint

00:08:05,120 --> 00:08:09,570
as with the other stuff we are running

00:08:08,070 --> 00:08:11,639
it as a docker container we're

00:08:09,570 --> 00:08:13,919
publishing three ports port 8080 that's

00:08:11,639 --> 00:08:15,870
like the management console should

00:08:13,919 --> 00:08:18,510
probably not publish that publicly

00:08:15,870 --> 00:08:20,010
should make sure that only you can can

00:08:18,510 --> 00:08:22,770
have access to it and then just

00:08:20,010 --> 00:08:25,050
published ports 80 and 443 and I mount

00:08:22,770 --> 00:08:26,789
the doctor socket into the into the

00:08:25,050 --> 00:08:28,620
container as well as the configuration

00:08:26,789 --> 00:08:32,130
file that we've just created and that's

00:08:28,620 --> 00:08:36,000
that's basically it now let's get

00:08:32,130 --> 00:08:37,919
started so for those of you who don't

00:08:36,000 --> 00:08:41,190
know get lab this is basically how it

00:08:37,919 --> 00:08:43,080
looks when you create a new project all

00:08:41,190 --> 00:08:45,240
you need to do is provide a project name

00:08:43,080 --> 00:08:47,370
we just ignore the description for now

00:08:45,240 --> 00:08:49,709
and the visibility level that's that's

00:08:47,370 --> 00:08:52,110
basically it created click the create

00:08:49,709 --> 00:08:54,399
project button and the git repository is

00:08:52,110 --> 00:08:56,559
created as now

00:08:54,399 --> 00:08:58,449
you could also use the create from

00:08:56,559 --> 00:09:00,939
template functionality which then would

00:08:58,449 --> 00:09:04,029
also generate a default file structure

00:09:00,939 --> 00:09:06,549
within your your newly created git

00:09:04,029 --> 00:09:09,339
repository but unfortunately the gate

00:09:06,549 --> 00:09:11,109
lab people just don't like us PHP people

00:09:09,339 --> 00:09:13,509
and they just have Ruby spring and and

00:09:11,109 --> 00:09:17,410
node as a current offering so that's

00:09:13,509 --> 00:09:18,939
probably not the way you want to go so

00:09:17,410 --> 00:09:24,759
we need to build the application in the

00:09:18,939 --> 00:09:26,379
structure ourselves now when I arrived

00:09:24,759 --> 00:09:29,049
at this point of the presentation I was

00:09:26,379 --> 00:09:31,720
wondering like what kind of application

00:09:29,049 --> 00:09:33,429
should I use or could I use to to show

00:09:31,720 --> 00:09:35,999
you how how awesome this the skit lab

00:09:33,429 --> 00:09:39,040
stuff is I could have built one myself

00:09:35,999 --> 00:09:41,470
but that would contain the risk that I

00:09:39,040 --> 00:09:43,540
build it in a way that it runs perfectly

00:09:41,470 --> 00:09:45,100
with like this whole whole gate lab

00:09:43,540 --> 00:09:49,239
infrastructure so that was a way I

00:09:45,100 --> 00:09:52,179
really wanted to avoid so I went back

00:09:49,239 --> 00:09:55,929
and forth and was looking for an

00:09:52,179 --> 00:09:58,419
application that was like not so easy to

00:09:55,929 --> 00:10:04,989
install comes with a bit of complexity

00:09:58,419 --> 00:10:06,579
and I ended up using Magento I thought

00:10:04,989 --> 00:10:08,189
that that's probably a good good way of

00:10:06,579 --> 00:10:13,329
doing so so we got a fan over here right

00:10:08,189 --> 00:10:15,489
kind of not you Derrick yeah luckily

00:10:13,329 --> 00:10:17,559
Magento can be installed using composer

00:10:15,489 --> 00:10:19,809
these days so I just say composer create

00:10:17,559 --> 00:10:22,059
project and I'm pointed to repo Magento

00:10:19,809 --> 00:10:24,730
com that's like the packages of of

00:10:22,059 --> 00:10:27,850
Magento and we're using the project

00:10:24,730 --> 00:10:29,559
Community Edition installer and like

00:10:27,850 --> 00:10:31,629
after a couple of minutes after composer

00:10:29,559 --> 00:10:34,269
downloaded like half of the Internet we

00:10:31,629 --> 00:10:37,869
got all the dependencies up there and we

00:10:34,269 --> 00:10:40,149
can add commit and push those into our

00:10:37,869 --> 00:10:41,529
CAD lab instance and this is basically

00:10:40,149 --> 00:10:43,299
how it looks so we've got the first

00:10:41,529 --> 00:10:45,189
commit over here and we're good to go

00:10:43,299 --> 00:10:47,649
now to this point you know nothing

00:10:45,189 --> 00:10:49,089
happens regarding builds alright so the

00:10:47,649 --> 00:10:52,689
code is landed in get lab but but

00:10:49,089 --> 00:10:55,600
nothing happens to be able to build that

00:10:52,689 --> 00:10:57,609
code or to do anything with it we need

00:10:55,600 --> 00:11:01,329
to install a fourth piece of the puzzle

00:10:57,609 --> 00:11:03,610
that's the last one and promise me and

00:11:01,329 --> 00:11:07,600
that puzzle piece is called a git lab

00:11:03,610 --> 00:11:11,079
runner so also from the github folks the

00:11:07,600 --> 00:11:13,870
this we have get lab and the get lab CI

00:11:11,079 --> 00:11:16,139
module which acts as kind of like a

00:11:13,870 --> 00:11:18,579
master instance that would coordinate

00:11:16,139 --> 00:11:21,430
which runners are available and which

00:11:18,579 --> 00:11:24,579
jobs can be run where and the code that

00:11:21,430 --> 00:11:27,459
you want to execute are executed in the

00:11:24,579 --> 00:11:29,620
context of such a runner instance now

00:11:27,459 --> 00:11:32,170
the cool thing about this is that you

00:11:29,620 --> 00:11:35,079
could for example use the gate labs as

00:11:32,170 --> 00:11:37,389
offering but host those runners on your

00:11:35,079 --> 00:11:39,430
own either like locally and on your own

00:11:37,389 --> 00:11:41,199
machines locally in your data center or

00:11:39,430 --> 00:11:42,370
locally in the cloud will not really

00:11:41,199 --> 00:11:43,149
locally in the cloud but you get the

00:11:42,370 --> 00:11:45,850
point

00:11:43,149 --> 00:11:47,769
and then just connect that to the gate

00:11:45,850 --> 00:11:49,750
lab set offering and then all the code

00:11:47,769 --> 00:11:51,190
is built and on your machines so to

00:11:49,750 --> 00:11:52,660
speak so that's that's pretty cool if

00:11:51,190 --> 00:11:55,420
you want to get started this is probably

00:11:52,660 --> 00:11:58,089
a good good way of doing that

00:11:55,420 --> 00:12:00,130
you can install that such a runner

00:11:58,089 --> 00:12:02,290
multiple ways again there are Debian

00:12:00,130 --> 00:12:04,269
packages there RPM packages there is

00:12:02,290 --> 00:12:06,610
docker container just pick what makes

00:12:04,269 --> 00:12:09,160
the most sense for you

00:12:06,610 --> 00:12:11,139
we just need to mount the configuration

00:12:09,160 --> 00:12:15,850
file and in docker socket and and you're

00:12:11,139 --> 00:12:18,220
good to go now situation is this we got

00:12:15,850 --> 00:12:20,500
two docker containers well got four

00:12:18,220 --> 00:12:21,970
actually but shells don't matter so one

00:12:20,500 --> 00:12:24,430
is good lab what is the gait lab

00:12:21,970 --> 00:12:26,560
instance and one is the runner they run

00:12:24,430 --> 00:12:28,540
side by side but they don't know each

00:12:26,560 --> 00:12:33,399
other up to now so we need to connect

00:12:28,540 --> 00:12:36,810
them right to do that we first have to

00:12:33,399 --> 00:12:40,329
open the admin section of of get lab and

00:12:36,810 --> 00:12:41,889
access the runner overview page and over

00:12:40,329 --> 00:12:44,889
here there are two important

00:12:41,889 --> 00:12:46,389
informations one is the URL to get lab

00:12:44,889 --> 00:12:48,160
technically you would know that

00:12:46,389 --> 00:12:50,560
otherwise you couldn't see this page and

00:12:48,160 --> 00:12:53,740
the other one is called the registration

00:12:50,560 --> 00:12:57,639
token and the idea behind this is that

00:12:53,740 --> 00:12:59,139
you don't want any third party runner to

00:12:57,639 --> 00:13:01,449
connect to your own good lab instance

00:12:59,139 --> 00:13:03,370
because otherwise that code could be

00:13:01,449 --> 00:13:05,500
built and checked out like anywhere in

00:13:03,370 --> 00:13:08,019
the world by anyone right so this

00:13:05,500 --> 00:13:10,810
authentication token just make sure you

00:13:08,019 --> 00:13:12,130
know this or you can setup is to run or

00:13:10,810 --> 00:13:14,680
configure that one or to talk to your

00:13:12,130 --> 00:13:18,730
instance so having these two information

00:13:14,680 --> 00:13:20,620
we can create a runner instance this is

00:13:18,730 --> 00:13:24,970
done by calling get lab runner

00:13:20,620 --> 00:13:26,800
register first thing it asks you is

00:13:24,970 --> 00:13:29,200
what's the URL of your github instance

00:13:26,800 --> 00:13:30,970
we know that second thing is asked

00:13:29,200 --> 00:13:34,680
give me the otic entity authentication

00:13:30,970 --> 00:13:37,510
token we know that we enter that cool

00:13:34,680 --> 00:13:39,100
you can has a description for this

00:13:37,510 --> 00:13:43,990
runner so if you have multiple ones you

00:13:39,100 --> 00:13:46,390
know what the what the runner is for you

00:13:43,990 --> 00:13:47,770
could provide tags for this runner and

00:13:46,390 --> 00:13:49,060
this is something I'll show you

00:13:47,770 --> 00:13:50,310
throughout the talk why this is

00:13:49,060 --> 00:13:54,810
important or what you can do with it

00:13:50,310 --> 00:13:58,090
I'll just leave it for now as is you can

00:13:54,810 --> 00:14:00,730
tell the runner to only run bills that

00:13:58,090 --> 00:14:02,800
are tacked with a specific tag or you

00:14:00,730 --> 00:14:07,030
can instruct the runner to build like

00:14:02,800 --> 00:14:09,190
potentially like anything you could lock

00:14:07,030 --> 00:14:11,800
the runner to just one gitlab project

00:14:09,190 --> 00:14:13,840
which may be interesting if you have a

00:14:11,800 --> 00:14:18,250
runner in the data center of a client

00:14:13,840 --> 00:14:21,580
and you just want to run certain jobs in

00:14:18,250 --> 00:14:24,130
that instance but that really depends on

00:14:21,580 --> 00:14:26,860
on your setup and now the the most

00:14:24,130 --> 00:14:28,750
important question what is the executor

00:14:26,860 --> 00:14:31,390
that all the commands that that you will

00:14:28,750 --> 00:14:35,560
define later on in the configuration

00:14:31,390 --> 00:14:37,750
file how do get those executed you could

00:14:35,560 --> 00:14:41,590
use shell which basically means all the

00:14:37,750 --> 00:14:43,540
commands you execute are run by a gate

00:14:41,590 --> 00:14:46,660
lab run or user within our container we

00:14:43,540 --> 00:14:49,480
just created now that's that that's

00:14:46,660 --> 00:14:51,430
maybe okay for a few commands but if you

00:14:49,480 --> 00:14:53,020
want to install third-party packages of

00:14:51,430 --> 00:14:55,420
stuff you can't do that because you're

00:14:53,020 --> 00:14:57,490
not route so that that's potentially a

00:14:55,420 --> 00:14:58,780
problem or you could say hey spin up a

00:14:57,490 --> 00:15:00,430
new docker instance and you drop your

00:14:58,780 --> 00:15:03,070
container run all that stuff within that

00:15:00,430 --> 00:15:04,780
container which probably is a bit better

00:15:03,070 --> 00:15:07,720
and they have dozens of options like

00:15:04,780 --> 00:15:10,630
doctor SSH doctor machine machinist

00:15:07,720 --> 00:15:12,910
essayed whatever so we can can make sure

00:15:10,630 --> 00:15:15,610
you pick like the best the best runner

00:15:12,910 --> 00:15:20,110
or the best executor for for your

00:15:15,610 --> 00:15:22,330
environment and that's not least you can

00:15:20,110 --> 00:15:24,190
define a default docker image so if you

00:15:22,330 --> 00:15:26,620
don't define an image in your project or

00:15:24,190 --> 00:15:29,290
in your job this will be the one that

00:15:26,620 --> 00:15:31,510
that would be taken instead so pick a

00:15:29,290 --> 00:15:33,190
sensitive choice just don't use the Ruby

00:15:31,510 --> 00:15:34,339
one if you build a PHP project that

00:15:33,190 --> 00:15:38,389
probably doesn't

00:15:34,339 --> 00:15:40,490
right now what you can do is you can

00:15:38,389 --> 00:15:43,370
reduce the multiple of these instances

00:15:40,490 --> 00:15:44,930
for one runner demon and they can be

00:15:43,370 --> 00:15:48,260
configured completely differently

00:15:44,930 --> 00:15:50,600
doesn't really matter so that that's

00:15:48,260 --> 00:15:53,060
important to know the outcome of all of

00:15:50,600 --> 00:15:56,209
this is a configuration file that looks

00:15:53,060 --> 00:15:57,680
like this you can also edit it by hand

00:15:56,209 --> 00:16:00,139
and then just restart the runner and

00:15:57,680 --> 00:16:01,639
everything will be fine for example

00:16:00,139 --> 00:16:03,980
changing the number of concurrent bills

00:16:01,639 --> 00:16:06,350
that should be run globally or then

00:16:03,980 --> 00:16:11,089
locally for each of those runners or as

00:16:06,350 --> 00:16:13,250
we do we mount a volume containing like

00:16:11,089 --> 00:16:16,790
all the composer files from the hose

00:16:13,250 --> 00:16:18,740
into the container so that we don't need

00:16:16,790 --> 00:16:21,680
to redownload all the packages over and

00:16:18,740 --> 00:16:23,839
over again just to save a bit of time so

00:16:21,680 --> 00:16:26,360
this is an idea that that we were using

00:16:23,839 --> 00:16:27,620
back in the days of vagrant when all the

00:16:26,360 --> 00:16:29,240
desks were running that stuff locally

00:16:27,620 --> 00:16:31,220
just to avoid like this massive

00:16:29,240 --> 00:16:31,670
downloads of packages all over them all

00:16:31,220 --> 00:16:34,089
over again

00:16:31,670 --> 00:16:37,519
so this can speed up the builds a bit

00:16:34,089 --> 00:16:40,010
great and then after like a minute or so

00:16:37,519 --> 00:16:41,930
this new runner appears on this runner

00:16:40,010 --> 00:16:51,529
overview page over here and we can use

00:16:41,930 --> 00:16:54,260
it so that that's pretty simple to be

00:16:51,529 --> 00:16:57,050
fair when I showed you how to use the

00:16:54,260 --> 00:16:59,959
composer install command I just missed

00:16:57,050 --> 00:17:02,360
one important information you need to be

00:16:59,959 --> 00:17:04,429
authenticated against this this Magento

00:17:02,360 --> 00:17:06,620
registry otherwise you can't pull those

00:17:04,429 --> 00:17:09,559
files so we need a way of somehow

00:17:06,620 --> 00:17:12,620
managing secrets obviously we can do

00:17:09,559 --> 00:17:14,630
that in this gitlab configuration file

00:17:12,620 --> 00:17:16,730
it's checked in in the repository but

00:17:14,630 --> 00:17:19,339
that feels like me yeah that's that's

00:17:16,730 --> 00:17:21,799
not really cool we are looking for

00:17:19,339 --> 00:17:23,929
something else and luckily gitlab has

00:17:21,799 --> 00:17:25,370
has got us covered they have a

00:17:23,929 --> 00:17:27,110
functionality that they call managing

00:17:25,370 --> 00:17:30,980
secrets where you can define secrets

00:17:27,110 --> 00:17:33,559
either on a project level or on a group

00:17:30,980 --> 00:17:35,540
level that means I could create a group

00:17:33,559 --> 00:17:39,590
within get lab saying okay these are all

00:17:35,540 --> 00:17:41,179
my Magento projects and create my my

00:17:39,590 --> 00:17:44,150
Magento projects beneath the group and

00:17:41,179 --> 00:17:45,440
then expose that these two to two

00:17:44,150 --> 00:17:47,440
variables like the username and the

00:17:45,440 --> 00:17:49,450
password on the group level

00:17:47,440 --> 00:17:52,000
get and inherited to the to the

00:17:49,450 --> 00:17:54,040
different projects so again that may or

00:17:52,000 --> 00:17:56,200
may not make sense in your in your

00:17:54,040 --> 00:17:58,840
situation and this is basically how it

00:17:56,200 --> 00:18:00,460
looks so you open the settings page and

00:17:58,840 --> 00:18:02,620
then you got a section called secret

00:18:00,460 --> 00:18:06,970
variables just give it a name give it a

00:18:02,620 --> 00:18:11,530
value and and off you go you can say for

00:18:06,970 --> 00:18:13,270
sake of security that those variables

00:18:11,530 --> 00:18:15,550
should only be available for protected

00:18:13,270 --> 00:18:17,260
branches that means that only a certain

00:18:15,550 --> 00:18:18,970
amount of people with a certain road

00:18:17,260 --> 00:18:22,200
within get lab are able to push to those

00:18:18,970 --> 00:18:24,760
branches and you avoid the risk of like

00:18:22,200 --> 00:18:28,750
yeah someone echoing username and

00:18:24,760 --> 00:18:30,490
password and you would see the result so

00:18:28,750 --> 00:18:36,940
again depending on your setup this may

00:18:30,490 --> 00:18:38,530
or may not make sense but the question

00:18:36,940 --> 00:18:40,480
is still like how do we set everything

00:18:38,530 --> 00:18:43,060
up and how do we get get things up and

00:18:40,480 --> 00:18:44,980
running and basically it's like super

00:18:43,060 --> 00:18:48,460
simple all you need to do is your add a

00:18:44,980 --> 00:18:50,800
file dot get lab - the IMO in the root

00:18:48,460 --> 00:18:51,150
of your repository and that's basically

00:18:50,800 --> 00:18:54,250
it

00:18:51,150 --> 00:18:57,220
if you are familiar with Travis this

00:18:54,250 --> 00:19:00,370
looks kind of similar but it's different

00:18:57,220 --> 00:19:01,960
in detail but I guess if you can't

00:19:00,370 --> 00:19:05,350
follow along or if you know the traffic

00:19:01,960 --> 00:19:08,680
stuff you can not it traffic Travis

00:19:05,350 --> 00:19:10,660
stuff you can can follow along easily so

00:19:08,680 --> 00:19:13,210
on the first top line we define the

00:19:10,660 --> 00:19:16,890
default image that we are using PHP 7.1

00:19:13,210 --> 00:19:18,910
CLI I know this will hurt some of you

00:19:16,890 --> 00:19:21,820
unfortunate but Gento isn't able to run

00:19:18,910 --> 00:19:23,530
with 7.3 right now and back in the days

00:19:21,820 --> 00:19:24,850
this was like when I compiled two slides

00:19:23,530 --> 00:19:27,130
last year this was like the latest

00:19:24,850 --> 00:19:30,940
version that Magento could support and

00:19:27,130 --> 00:19:33,520
then we define a test job this test job

00:19:30,940 --> 00:19:35,800
runs in a test stage we'll see later

00:19:33,520 --> 00:19:36,520
what that means it is tacked with a

00:19:35,800 --> 00:19:37,840
check docker

00:19:36,520 --> 00:19:40,060
we'll see later what that means and

00:19:37,840 --> 00:19:41,680
these are the scripts that should be

00:19:40,060 --> 00:19:43,960
executed these are the different steps

00:19:41,680 --> 00:19:46,420
that should be executed when this job is

00:19:43,960 --> 00:19:48,370
run the first one is simply like

00:19:46,420 --> 00:19:51,760
installing a couple of Debian packages

00:19:48,370 --> 00:19:54,340
that we need to be able to compile a

00:19:51,760 --> 00:19:57,580
couple of PHP extensions that Magento

00:19:54,340 --> 00:20:00,999
needs to run I think these two lines

00:19:57,580 --> 00:20:02,709
took me like like almost half

00:20:00,999 --> 00:20:04,569
to figure out and like constantly like

00:20:02,709 --> 00:20:05,799
redeploying and testing and it was like

00:20:04,569 --> 00:20:10,569
the most annoying part of this

00:20:05,799 --> 00:20:12,779
presentation but anyway we then also

00:20:10,569 --> 00:20:15,219
need compose because we want to install

00:20:12,779 --> 00:20:16,509
the composer dependencies and these are

00:20:15,219 --> 00:20:19,209
like the four lines that you would

00:20:16,509 --> 00:20:22,749
usually copy without looking out of the

00:20:19,209 --> 00:20:25,029
composer manual and afterwards you got

00:20:22,749 --> 00:20:29,079
composer installed and it's usable we

00:20:25,029 --> 00:20:31,149
then need to instruct composer to use

00:20:29,079 --> 00:20:32,649
the Magento user and Magento password

00:20:31,149 --> 00:20:36,459
environment variable that's the ones we

00:20:32,649 --> 00:20:39,399
defined before whenever repo Magento com

00:20:36,459 --> 00:20:42,939
is accessed why are a basic

00:20:39,399 --> 00:20:44,409
authentication and kind of side note

00:20:42,939 --> 00:20:46,869
because this is important if you like

00:20:44,409 --> 00:20:48,849
this feature this is my contribution to

00:20:46,869 --> 00:20:51,809
composer yeah awesome

00:20:48,849 --> 00:20:53,889
I know Jori completely rewrote my PR and

00:20:51,809 --> 00:20:58,209
improved it like 10 times but I can

00:20:53,889 --> 00:21:00,339
still claim this is like my ID right so

00:20:58,209 --> 00:21:01,689
we got the configuration right and then

00:21:00,339 --> 00:21:04,919
we run the composer install and

00:21:01,689 --> 00:21:08,739
hopefully all the packages are installed

00:21:04,919 --> 00:21:12,639
so we we add commit and push the file it

00:21:08,739 --> 00:21:14,559
ends up in ingot lab and you can see

00:21:12,639 --> 00:21:16,419
there is a blue icon on the very left of

00:21:14,559 --> 00:21:18,489
the git commit jar and this basically

00:21:16,419 --> 00:21:22,119
means we have a build job up and running

00:21:18,489 --> 00:21:24,249
cool so we can click on that icon can

00:21:22,119 --> 00:21:27,309
see a list of the pipeline's that are

00:21:24,249 --> 00:21:28,749
configured again the blue icon which

00:21:27,309 --> 00:21:31,389
indicates that there is a job running

00:21:28,749 --> 00:21:33,269
you can click on that and we get an

00:21:31,389 --> 00:21:36,999
overview of the pipeline

00:21:33,269 --> 00:21:38,829
pretty simple pipeline I have to say so

00:21:36,999 --> 00:21:42,159
we got a test stage this is test with an

00:21:38,829 --> 00:21:44,949
uppercase T running a job called test

00:21:42,159 --> 00:21:46,689
with a lowercase T now again if you're

00:21:44,949 --> 00:21:49,329
familiar with Travis and and similar

00:21:46,689 --> 00:21:51,249
solutions just click on the test job and

00:21:49,329 --> 00:21:55,029
it will give you like the output of

00:21:51,249 --> 00:21:56,979
what's happening during the build and if

00:21:55,029 --> 00:21:59,679
you wait a couple of minutes

00:21:56,979 --> 00:22:08,529
swear to God in the end it will say job

00:21:59,679 --> 00:22:11,679
succeeded awesome now to be fair I named

00:22:08,529 --> 00:22:12,940
this job test and I'm I'm really lucky

00:22:11,679 --> 00:22:14,199
that Sebastian Bergman is not in the

00:22:12,940 --> 00:22:14,980
audience because it probably will keep

00:22:14,199 --> 00:22:16,750
my butt's name

00:22:14,980 --> 00:22:18,820
this thing a test because it doesn't

00:22:16,750 --> 00:22:22,929
really test stuff right we're just

00:22:18,820 --> 00:22:24,790
installing composure dependencies so we

00:22:22,929 --> 00:22:29,440
need something more to be able to run

00:22:24,790 --> 00:22:30,940
tests of any sort we need a database so

00:22:29,440 --> 00:22:34,059
that we can install Magento and make

00:22:30,940 --> 00:22:37,059
sure that everything is working now I

00:22:34,059 --> 00:22:39,010
could spin up the docker instances that

00:22:37,059 --> 00:22:42,160
are need for this like my sequel

00:22:39,010 --> 00:22:44,530
instance or stuff like that in my build

00:22:42,160 --> 00:22:47,799
script but then I had to like wait till

00:22:44,530 --> 00:22:50,559
the till the Quixote containers up and

00:22:47,799 --> 00:22:52,780
running and then continue doing stuff so

00:22:50,559 --> 00:22:55,840
that that also feels like yeah that's

00:22:52,780 --> 00:22:59,260
that's not really cool luckily again the

00:22:55,840 --> 00:23:01,390
kid lab guys hazards covered with a

00:22:59,260 --> 00:23:04,500
feature that they call get lab services

00:23:01,390 --> 00:23:10,350
and the idea is that you can define

00:23:04,500 --> 00:23:12,610
multiple images that should be spun up

00:23:10,350 --> 00:23:14,980
before the job that you've defined

00:23:12,610 --> 00:23:17,500
actually it started and then you can be

00:23:14,980 --> 00:23:19,600
relatively sure that the services up are

00:23:17,500 --> 00:23:22,870
up and running and you can interact with

00:23:19,600 --> 00:23:25,030
those and just by a couple of lines of

00:23:22,870 --> 00:23:28,570
configuration and the pretty cool part

00:23:25,030 --> 00:23:32,770
is that get lab has a bunch of logic

00:23:28,570 --> 00:23:35,020
implemented to check which ports are

00:23:32,770 --> 00:23:38,110
exposed by these containers that you

00:23:35,020 --> 00:23:41,710
want to to run so the default ones that

00:23:38,110 --> 00:23:44,260
are exposed by the image and what github

00:23:41,710 --> 00:23:46,660
will do is spin up a second container

00:23:44,260 --> 00:23:48,490
that will just wait until all those

00:23:46,660 --> 00:23:50,470
services on all those pores just going

00:23:48,490 --> 00:23:52,690
to respond and if that happens that

00:23:50,470 --> 00:23:54,700
container will be will be shut down and

00:23:52,690 --> 00:23:57,419
your your container running your job

00:23:54,700 --> 00:23:57,419
will run

00:23:59,750 --> 00:24:02,930
[Music]

00:24:07,510 --> 00:24:14,330
can you hear me okay cool

00:24:09,679 --> 00:24:16,940
sorry right so it's it's it starts your

00:24:14,330 --> 00:24:18,500
container and you can be like 99.9% sure

00:24:16,940 --> 00:24:21,320
that that everything is working out of

00:24:18,500 --> 00:24:22,970
the box even though the gate lab guys

00:24:21,320 --> 00:24:25,610
say well you can't really rely on that

00:24:22,970 --> 00:24:29,210
that everything is working but we

00:24:25,610 --> 00:24:32,059
pretend that we were safe and this is

00:24:29,210 --> 00:24:34,580
how I need to do things again we first

00:24:32,059 --> 00:24:36,679
define our image we can define a couple

00:24:34,580 --> 00:24:39,320
of variables now these are available to

00:24:36,679 --> 00:24:42,020
our own jobs as well as to the other

00:24:39,320 --> 00:24:44,570
services that we include like my secret

00:24:42,020 --> 00:24:46,730
password is passed to our jobs as well

00:24:44,570 --> 00:24:50,299
as the my secret container that that we

00:24:46,730 --> 00:24:54,740
would spin up we define our test stage

00:24:50,299 --> 00:24:57,500
this is what we've seen before we simply

00:24:54,740 --> 00:24:59,210
add a section called services and it's

00:24:57,500 --> 00:25:01,630
going to list all the services that that

00:24:59,210 --> 00:25:04,940
we need and this is all you need to do

00:25:01,630 --> 00:25:08,419
you can define services locally within a

00:25:04,940 --> 00:25:10,400
job or you could define them globally

00:25:08,419 --> 00:25:12,830
like for all of your jobs we do it

00:25:10,400 --> 00:25:14,990
locally because on staging and

00:25:12,830 --> 00:25:16,400
production we already spun up my sequel

00:25:14,990 --> 00:25:18,590
and some other sort and we don't want to

00:25:16,400 --> 00:25:20,950
add another my sequel container just to

00:25:18,590 --> 00:25:25,610
be there so that doesn't make any sense

00:25:20,950 --> 00:25:28,760
now if we run the job get loud we'll say

00:25:25,610 --> 00:25:31,100
hey I'm starting a my sleep of 5.6

00:25:28,760 --> 00:25:33,320
service I'm pulling the the docker image

00:25:31,100 --> 00:25:34,940
my sequel five point six I'm waiting for

00:25:33,320 --> 00:25:37,580
the services to be up and running and

00:25:34,940 --> 00:25:39,080
then I'm pulling the PHP 7.1 CLI image

00:25:37,580 --> 00:25:40,880
and then just gonna execute all the

00:25:39,080 --> 00:25:42,289
logic so I can see what's what's

00:25:40,880 --> 00:25:47,780
happening and in the end hopefully

00:25:42,289 --> 00:25:48,580
hopefully everything is green isn't that

00:25:47,780 --> 00:25:52,070
amazing

00:25:48,580 --> 00:25:55,070
yeah kind of okay I see tough audience I

00:25:52,070 --> 00:25:57,440
could cope with that but still that's

00:25:55,070 --> 00:25:59,150
not really something that you could

00:25:57,440 --> 00:26:00,530
consider being a build pipeline right so

00:25:59,150 --> 00:26:02,299
we need multiple jobs they should

00:26:00,530 --> 00:26:03,919
interact with each other and and do

00:26:02,299 --> 00:26:08,750
awesome stuff and this is exactly what

00:26:03,919 --> 00:26:10,309
we're doing right now so again this is

00:26:08,750 --> 00:26:11,720
the shared configuration we have our

00:26:10,309 --> 00:26:14,210
image defined we have the variables

00:26:11,720 --> 00:26:16,039
defined and next up we define different

00:26:14,210 --> 00:26:18,140
stages we call them test build and

00:26:16,039 --> 00:26:20,810
deploy that's probably like the the

00:26:18,140 --> 00:26:23,660
simple setup these days

00:26:20,810 --> 00:26:25,850
you can define a section that is called

00:26:23,660 --> 00:26:27,800
before script and these commands would

00:26:25,850 --> 00:26:29,980
then be executed before each and every

00:26:27,800 --> 00:26:34,940
job that you have defined now

00:26:29,980 --> 00:26:37,460
technically this is because we

00:26:34,940 --> 00:26:39,500
don't want to install all the the apt

00:26:37,460 --> 00:26:42,290
packages for staging and production and

00:26:39,500 --> 00:26:44,240
stuff but you could in this section do

00:26:42,290 --> 00:26:46,430
something like the dogger login command

00:26:44,240 --> 00:26:48,230
right so you don't have to retype it

00:26:46,430 --> 00:26:52,880
every time and making sure that that is

00:26:48,230 --> 00:26:56,050
it's in Sinkin in all places so that's

00:26:52,880 --> 00:26:58,820
that's what you can do in this place and

00:26:56,050 --> 00:27:01,550
then we have our test stage we have seen

00:26:58,820 --> 00:27:03,820
that before we do have our build stage

00:27:01,550 --> 00:27:10,190
I'll cover that in a second what it does

00:27:03,820 --> 00:27:11,690
and we have our deploy staging job which

00:27:10,190 --> 00:27:14,630
and this is slightly different to the

00:27:11,690 --> 00:27:17,180
other to the other jobs has a tag called

00:27:14,630 --> 00:27:19,400
docker - stage and the idea is this

00:27:17,180 --> 00:27:21,380
you've got multiple runners running in

00:27:19,400 --> 00:27:23,810
our data center we got the ones tagged

00:27:21,380 --> 00:27:25,850
with docker running over here they are

00:27:23,810 --> 00:27:28,160
responsible for building and and and

00:27:25,850 --> 00:27:30,470
testing stuff we got the ones with the

00:27:28,160 --> 00:27:32,660
tag darker - staged running over here

00:27:30,470 --> 00:27:34,610
and all the staging domains pointing to

00:27:32,660 --> 00:27:37,670
this part of the data center right if I

00:27:34,610 --> 00:27:40,730
would deploy such the staging staging

00:27:37,670 --> 00:27:42,320
container over here the domains couldn't

00:27:40,730 --> 00:27:45,860
reach it right because they are pointing

00:27:42,320 --> 00:27:48,020
over here so we can use these tags to

00:27:45,860 --> 00:27:52,520
steer a bit like where is stuff deployed

00:27:48,020 --> 00:27:54,380
in our infrastructure for staging

00:27:52,520 --> 00:27:56,090
deployments we say we do not want any

00:27:54,380 --> 00:27:58,130
key check out because we already have

00:27:56,090 --> 00:28:00,080
the container build so there is no need

00:27:58,130 --> 00:28:03,260
for for checking out the whole gate

00:28:00,080 --> 00:28:05,300
repository we do define an environment

00:28:03,260 --> 00:28:07,490
that we call staging and say ok this is

00:28:05,300 --> 00:28:09,350
the URL to our staging environment and

00:28:07,490 --> 00:28:11,150
that's also pretty cool because like you

00:28:09,350 --> 00:28:13,160
don't need a list in the wiki or or

00:28:11,150 --> 00:28:14,810
anywhere else saying okay these are URLs

00:28:13,160 --> 00:28:16,730
for staging these are yours production

00:28:14,810 --> 00:28:19,430
make sure you use the right credentials

00:28:16,730 --> 00:28:21,650
and stuff get lab will render a couple

00:28:19,430 --> 00:28:23,420
of buttons in its GUI you just click on

00:28:21,650 --> 00:28:25,910
them and it will bring automatically to

00:28:23,420 --> 00:28:29,230
this URL so you got it versioned and

00:28:25,910 --> 00:28:33,110
stored in like one central location and

00:28:29,230 --> 00:28:33,680
then we say run those builds only for

00:28:33,110 --> 00:28:37,640
changes

00:28:33,680 --> 00:28:41,180
occur on the master branch again we

00:28:37,640 --> 00:28:42,680
commit the file the job is running the

00:28:41,180 --> 00:28:45,830
pipeline is looking a bit more complex

00:28:42,680 --> 00:28:47,990
now so we got the test build and deploy

00:28:45,830 --> 00:28:52,220
stages and the test build and deploy

00:28:47,990 --> 00:28:56,240
staging jobs so test is running all

00:28:52,220 --> 00:28:59,420
green build is running and now this is

00:28:56,240 --> 00:29:01,510
what we are doing imagine up to this

00:28:59,420 --> 00:29:05,900
point we have installed all that all the

00:29:01,510 --> 00:29:08,750
dependencies that that are needed we tar

00:29:05,900 --> 00:29:11,510
that stuff we move that tar file back in

00:29:08,750 --> 00:29:14,120
the project directory and then we use

00:29:11,510 --> 00:29:16,610
the the feature it's called the build

00:29:14,120 --> 00:29:20,540
arguments of talker to pass the start

00:29:16,610 --> 00:29:25,490
file to the the docker build command

00:29:20,540 --> 00:29:28,070
this helps you a bit in not needing to

00:29:25,490 --> 00:29:29,720
maintain multiple docker files like one

00:29:28,070 --> 00:29:32,330
for production one for development where

00:29:29,720 --> 00:29:34,820
like once add those files and one wants

00:29:32,330 --> 00:29:37,010
to do not add those files so I can play

00:29:34,820 --> 00:29:38,960
around with that a bit and not really

00:29:37,010 --> 00:29:41,720
like this kind of approach but it's like

00:29:38,960 --> 00:29:43,250
the best thing I could come up right now

00:29:41,720 --> 00:29:45,950
without the need of having like to

00:29:43,250 --> 00:29:50,210
maintain multiple files great so it's

00:29:45,950 --> 00:29:52,610
built we tagged it and then we push this

00:29:50,210 --> 00:29:55,310
image to to our to our registry that's

00:29:52,610 --> 00:29:57,920
that's all we need and this is done

00:29:55,310 --> 00:30:00,470
basically how it looks it just appears

00:29:57,920 --> 00:30:05,570
as a master version within our our

00:30:00,470 --> 00:30:08,780
registry now so build is also green

00:30:05,570 --> 00:30:12,500
awesome we can start deploying this on

00:30:08,780 --> 00:30:14,600
staging and this is what happens first

00:30:12,500 --> 00:30:17,420
we pull the latest version of this image

00:30:14,600 --> 00:30:19,580
now you can see there is a variable used

00:30:17,420 --> 00:30:22,970
CI commit ref slug and I also used it

00:30:19,580 --> 00:30:26,390
back in the build stage throughout this

00:30:22,970 --> 00:30:28,160
whole build pipeline this variable holds

00:30:26,390 --> 00:30:32,480
the exact same value so I'm always

00:30:28,160 --> 00:30:33,830
referring to the exact same image which

00:30:32,480 --> 00:30:37,490
is important if you want to deploy a

00:30:33,830 --> 00:30:39,830
certain version on your machines so we

00:30:37,490 --> 00:30:41,630
pull the image first we stop the

00:30:39,830 --> 00:30:45,170
existing my sequel and the application

00:30:41,630 --> 00:30:47,090
containers we remove those images then

00:30:45,170 --> 00:30:49,009
we start my sequel again

00:30:47,090 --> 00:30:51,289
and we start the application and then

00:30:49,009 --> 00:30:54,529
link the application to the my super one

00:30:51,289 --> 00:30:56,960
and pass a couple of traffic labels so

00:30:54,529 --> 00:30:59,330
that traffic then later knows like stage

00:30:56,960 --> 00:31:02,779
my upload log just gonna points to this

00:30:59,330 --> 00:31:05,740
exact docker container and then we wait

00:31:02,779 --> 00:31:10,850
like a minute or so and open the URL and

00:31:05,740 --> 00:31:14,509
finally we got to deploy awesome okay

00:31:10,850 --> 00:31:17,840
tough audience no worries so this is

00:31:14,509 --> 00:31:21,049
staging for production it looks pretty

00:31:17,840 --> 00:31:24,049
similar so we have a job deploy

00:31:21,049 --> 00:31:26,029
underscore prod again using a different

00:31:24,049 --> 00:31:29,210
tag doctor - prod so we know where the

00:31:26,029 --> 00:31:30,710
stuff is deployed you know the story we

00:31:29,210 --> 00:31:32,119
don't need to get check out because we

00:31:30,710 --> 00:31:34,639
already have built the docker container

00:31:32,119 --> 00:31:36,320
we name the environment production

00:31:34,639 --> 00:31:40,549
because it makes sense point it to the

00:31:36,320 --> 00:31:43,840
right domain say hey this should only

00:31:40,549 --> 00:31:46,369
run for master of work commit own master

00:31:43,840 --> 00:31:49,549
now if we would use this configuration

00:31:46,369 --> 00:31:53,509
what would happen whenever we make a

00:31:49,549 --> 00:31:55,070
change on master branch so the test job

00:31:53,509 --> 00:31:59,119
would run the build job would run and

00:31:55,070 --> 00:32:01,249
then it would synchronously push or run

00:31:59,119 --> 00:32:03,049
this this this comment on staging and on

00:32:01,249 --> 00:32:04,759
production this is not what we know what

00:32:03,049 --> 00:32:07,429
we want right so we want to test it

00:32:04,759 --> 00:32:09,799
first and staging and then roll it out

00:32:07,429 --> 00:32:13,879
to production later and that's what we

00:32:09,799 --> 00:32:16,549
do with the when manual trigger which

00:32:13,879 --> 00:32:18,499
basically means that this job is

00:32:16,549 --> 00:32:22,850
triggered manually through the gate lab

00:32:18,499 --> 00:32:25,519
you are this is how it looks so test is

00:32:22,850 --> 00:32:27,769
running all green you're just running

00:32:25,519 --> 00:32:30,759
all green deploy staging is running all

00:32:27,769 --> 00:32:34,220
green and then the build pipeline stops

00:32:30,759 --> 00:32:35,929
now those of you in the first first

00:32:34,220 --> 00:32:39,710
drawer can see there is a play button

00:32:35,929 --> 00:32:41,210
next to the deploy prod job well if it

00:32:39,710 --> 00:32:42,830
looks like a play button it pretty much

00:32:41,210 --> 00:32:44,720
is a play button which means you can

00:32:42,830 --> 00:32:46,580
press it and this is exactly what what

00:32:44,720 --> 00:32:48,169
you need to do so someone in your in

00:32:46,580 --> 00:32:51,980
your company needs to press that button

00:32:48,169 --> 00:32:55,700
and this will then kick off the rebuild

00:32:51,980 --> 00:32:57,259
or the deployment to production so your

00:32:55,700 --> 00:32:59,779
project manager or your customer can

00:32:57,259 --> 00:33:00,770
kind of prove the stages the changes on

00:32:59,779 --> 00:33:02,390
staging

00:33:00,770 --> 00:33:04,490
and someone just just presses that

00:33:02,390 --> 00:33:08,360
button and then kicks off that build

00:33:04,490 --> 00:33:10,460
that will run on production and the

00:33:08,360 --> 00:33:13,040
pretty cool thing within get lab is is

00:33:10,460 --> 00:33:14,990
this so you see if you if you check the

00:33:13,040 --> 00:33:16,970
logs you can see all the output and

00:33:14,990 --> 00:33:18,800
kidnap also warns you hey watch out this

00:33:16,970 --> 00:33:20,450
is job created if deployment to

00:33:18,800 --> 00:33:21,950
production so this is like the right

00:33:20,450 --> 00:33:23,300
moment where you can press cancel if you

00:33:21,950 --> 00:33:28,430
figure out you pressed like the wrong

00:33:23,300 --> 00:33:30,380
button which rarely happens I know so

00:33:28,430 --> 00:33:35,300
this is gives you just another warning

00:33:30,380 --> 00:33:38,150
sign right and then we just wait again

00:33:35,300 --> 00:33:39,560
like a minute or two hopefully and this

00:33:38,150 --> 00:33:44,390
thing is up and running in production

00:33:39,560 --> 00:33:51,040
and that is basically it how awesome is

00:33:44,390 --> 00:33:54,950
that thank you thank you finally finally

00:33:51,040 --> 00:33:58,220
but I see we got some time left so I got

00:33:54,950 --> 00:34:01,640
some special for you because we have a

00:33:58,220 --> 00:34:04,580
problem with this setup let's take the

00:34:01,640 --> 00:34:08,030
staging bill for example if you have one

00:34:04,580 --> 00:34:09,530
developer you probably know which state

00:34:08,030 --> 00:34:11,149
staging is in if you've got multiple

00:34:09,530 --> 00:34:14,210
developers that keep committing and

00:34:11,149 --> 00:34:15,919
pushing code it's pretty hard to say or

00:34:14,210 --> 00:34:17,899
to tell like which version is actually

00:34:15,919 --> 00:34:19,700
running on staging right so your project

00:34:17,899 --> 00:34:21,710
manager probably goes crazy figuring out

00:34:19,700 --> 00:34:23,480
like changes work not work changes work

00:34:21,710 --> 00:34:29,330
not work like all the containers are

00:34:23,480 --> 00:34:31,130
spun up over and over again so I guess

00:34:29,330 --> 00:34:32,780
it would be really cool to have have

00:34:31,130 --> 00:34:35,390
such an environment Pro developer right

00:34:32,780 --> 00:34:38,270
that would be cool yeah that would be

00:34:35,390 --> 00:34:41,090
cool but why not go a step further and

00:34:38,270 --> 00:34:46,070
say we want such an environment for

00:34:41,090 --> 00:34:50,000
feature branch my blow and this is what

00:34:46,070 --> 00:34:51,740
your lab calls a review app now to be

00:34:50,000 --> 00:34:54,380
fair the documentation of the review app

00:34:51,740 --> 00:34:55,940
is a bit weird and I have to read it

00:34:54,380 --> 00:34:58,070
like a couple of times to really figure

00:34:55,940 --> 00:34:59,660
out what it is and how it's doing

00:34:58,070 --> 00:35:01,910
so I'll guide you through the process

00:34:59,660 --> 00:35:04,580
and you'll figure that out way quicker

00:35:01,910 --> 00:35:07,190
than I did the idea behind such a review

00:35:04,580 --> 00:35:08,960
app is basically that those environments

00:35:07,190 --> 00:35:11,630
that we just created statically naming

00:35:08,960 --> 00:35:13,700
it staging and production can be created

00:35:11,630 --> 00:35:14,150
dynamically with a dynamic name and a

00:35:13,700 --> 00:35:16,490
dynamic

00:35:14,150 --> 00:35:20,119
and this is what what we take advantage

00:35:16,490 --> 00:35:22,430
of so again we create a deploy

00:35:20,119 --> 00:35:24,619
underscore review job again it has a

00:35:22,430 --> 00:35:25,999
custom tag called docker - review so

00:35:24,619 --> 00:35:29,480
that we know where the surface is

00:35:25,999 --> 00:35:32,329
deployed you know the story we don't get

00:35:29,480 --> 00:35:34,400
checkout similar to staging a production

00:35:32,329 --> 00:35:37,480
and then in the environment section we

00:35:34,400 --> 00:35:40,730
say hey name this environment review -

00:35:37,480 --> 00:35:42,499
review / CI commit ref name and this is

00:35:40,730 --> 00:35:45,380
kind of like the branch name you're

00:35:42,499 --> 00:35:46,970
working on and this is the URL for this

00:35:45,380 --> 00:35:49,880
environment it's called CI environment

00:35:46,970 --> 00:35:51,410
slug - stage my upload lock now CI

00:35:49,880 --> 00:35:54,259
environments lock is also like the

00:35:51,410 --> 00:35:56,450
branch name but encoded in a URL

00:35:54,259 --> 00:36:00,410
friendly fashion and then a bit of

00:35:56,450 --> 00:36:03,440
obfuscated so if a custom domain for

00:36:00,410 --> 00:36:06,019
this all your all your admin needs to do

00:36:03,440 --> 00:36:08,509
is to expose like all the subdomains of

00:36:06,019 --> 00:36:10,640
stage my update lock and put it on on

00:36:08,509 --> 00:36:13,249
this network where all your review apps

00:36:10,640 --> 00:36:14,539
are running and then we also say

00:36:13,249 --> 00:36:17,569
whenever this environment should be

00:36:14,539 --> 00:36:19,190
stopped call the stop review job if you

00:36:17,569 --> 00:36:20,900
don't do that like all the doctor

00:36:19,190 --> 00:36:22,789
instances will pile up on the server and

00:36:20,900 --> 00:36:24,559
somehow and somehow it will it will

00:36:22,789 --> 00:36:27,799
crash or your your Amazon build would

00:36:24,559 --> 00:36:32,410
get like really expensive so we don't

00:36:27,799 --> 00:36:36,619
don't want to do that and then we say

00:36:32,410 --> 00:36:38,329
run this run this job only if a merge

00:36:36,619 --> 00:36:40,519
request is open now this is a relatively

00:36:38,329 --> 00:36:42,589
new feature back in the days you would

00:36:40,519 --> 00:36:46,039
need to say ok run this for all the

00:36:42,589 --> 00:36:48,559
branches but not master which isn't kind

00:36:46,039 --> 00:36:50,480
the same it's a bit different but since

00:36:48,559 --> 00:36:52,759
like I don't know two or three releases

00:36:50,480 --> 00:36:54,259
back they added this feature so this

00:36:52,759 --> 00:36:58,640
will only run when you open a merge

00:36:54,259 --> 00:37:01,009
request which you should do and then we

00:36:58,640 --> 00:37:02,059
define our stop review job which is

00:37:01,009 --> 00:37:04,849
called money and why I might have

00:37:02,059 --> 00:37:07,569
stopped and we would just then kill the

00:37:04,849 --> 00:37:10,099
containers as we don't need them anymore

00:37:07,569 --> 00:37:12,410
again good strategy is set to none

00:37:10,099 --> 00:37:14,599
because we don't need it and we add a

00:37:12,410 --> 00:37:16,670
when manual trigger which is kind of

00:37:14,599 --> 00:37:18,289
weird because you never execute this

00:37:16,670 --> 00:37:21,160
manually but it's called it's triggered

00:37:18,289 --> 00:37:23,900
by a different job so I need to set this

00:37:21,160 --> 00:37:26,029
and then we use the same environment

00:37:23,900 --> 00:37:27,800
name so that kid lab can figure out like

00:37:26,029 --> 00:37:29,750
what environment to stop and

00:37:27,800 --> 00:37:31,610
that the action to stop so this then

00:37:29,750 --> 00:37:35,000
calls the skit lab to kill this

00:37:31,610 --> 00:37:37,010
environment in its own database so let's

00:37:35,000 --> 00:37:40,280
test it well let's assume the customer

00:37:37,010 --> 00:37:42,650
wants us to build a feature - yeah

00:37:40,280 --> 00:37:44,630
protect your website so no one would

00:37:42,650 --> 00:37:46,160
ever see like pricing and the catalog

00:37:44,630 --> 00:37:48,260
and stuff without being logged in

00:37:46,160 --> 00:37:49,970
luckily we've built such a Magento

00:37:48,260 --> 00:37:53,150
module ourselves so it just create a

00:37:49,970 --> 00:37:58,010
feature branch add the module that that

00:37:53,150 --> 00:38:00,320
we need added committed push it and when

00:37:58,010 --> 00:38:02,480
you now open get lab kit that will

00:38:00,320 --> 00:38:03,890
scream to you merge requests merge

00:38:02,480 --> 00:38:05,060
request while showing you all it all

00:38:03,890 --> 00:38:07,790
over the places so you just need to

00:38:05,060 --> 00:38:10,250
press that button and this will lead to

00:38:07,790 --> 00:38:12,350
a to a view that looks like this so you

00:38:10,250 --> 00:38:15,140
need to define a good code title you

00:38:12,350 --> 00:38:18,110
need to define a good description like

00:38:15,140 --> 00:38:19,910
not just don't don't do that just

00:38:18,110 --> 00:38:22,400
provide a proper description if you open

00:38:19,910 --> 00:38:24,920
a merge request and now what you see is

00:38:22,400 --> 00:38:28,370
that it automatically started a new

00:38:24,920 --> 00:38:30,670
build pipeline for this commit shows you

00:38:28,370 --> 00:38:33,680
the three dots that the three stages

00:38:30,670 --> 00:38:36,980
going through each and hopefully and

00:38:33,680 --> 00:38:38,330
finally deploy it on staging now the

00:38:36,980 --> 00:38:41,120
question is like where is this stuff

00:38:38,330 --> 00:38:44,390
deployed right I don't know it but get

00:38:41,120 --> 00:38:48,020
lab will tell you says hey I'll deployed

00:38:44,390 --> 00:38:50,030
this branch on this URL so all I need to

00:38:48,020 --> 00:38:52,190
do is click this link will open a new

00:38:50,030 --> 00:38:54,380
browser page and I can test everything

00:38:52,190 --> 00:38:56,780
in isolation and this is then and

00:38:54,380 --> 00:38:58,310
basically how it looks like awesome so

00:38:56,780 --> 00:39:00,860
it's completely separated from all the

00:38:58,310 --> 00:39:02,750
other instant instances are completely

00:39:00,860 --> 00:39:08,600
custom I can completely test it on our

00:39:02,750 --> 00:39:10,760
own and and you're good to go now what

00:39:08,600 --> 00:39:12,560
do we do with that of course somehow we

00:39:10,760 --> 00:39:15,050
need to put it on staging and then put

00:39:12,560 --> 00:39:18,980
it on productions how we how do we do

00:39:15,050 --> 00:39:20,630
that does anyone you have an idea why

00:39:18,980 --> 00:39:23,420
it's super easy just press the merge

00:39:20,630 --> 00:39:25,010
button that creates a merge commit and

00:39:23,420 --> 00:39:28,730
master which will then kick off the

00:39:25,010 --> 00:39:32,150
build pipeline again so we do that so

00:39:28,730 --> 00:39:34,160
test runs build runs deploy staging runs

00:39:32,150 --> 00:39:38,930
you menu click the deploy to production

00:39:34,160 --> 00:39:41,300
button and boom we're we're life that is

00:39:38,930 --> 00:39:47,700
pretty cool

00:39:41,300 --> 00:39:50,160
yeah exactly thank you I was waiting for

00:39:47,700 --> 00:39:56,820
this reaction for like the last 50

00:39:50,160 --> 00:39:58,800
minutes but I got one more I'm like the

00:39:56,820 --> 00:40:03,570
Steve Jobs of kidnap but I'm not

00:39:58,800 --> 00:40:06,150
affiliated the pretty cool thing about

00:40:03,570 --> 00:40:07,890
marketlab is it keeps track of like all

00:40:06,150 --> 00:40:10,619
the environments that are currently

00:40:07,890 --> 00:40:12,330
running giving you an overview like this

00:40:10,619 --> 00:40:13,530
saying okay we got the production

00:40:12,330 --> 00:40:14,580
environment and the staging environment

00:40:13,530 --> 00:40:17,100
up and running

00:40:14,580 --> 00:40:20,100
there's deployment three and two the job

00:40:17,100 --> 00:40:22,230
the last commit and when the last after

00:40:20,100 --> 00:40:24,720
it happened so we get really good

00:40:22,230 --> 00:40:26,730
overview of what happened when you could

00:40:24,720 --> 00:40:30,000
also dive in such an environment and

00:40:26,730 --> 00:40:31,770
then see like which commits made it to

00:40:30,000 --> 00:40:33,600
to that specific environment seen

00:40:31,770 --> 00:40:36,360
exactly what was going on and I could

00:40:33,600 --> 00:40:37,800
also just do a rollback so if I figure

00:40:36,360 --> 00:40:39,540
out like hey there's something wrong I

00:40:37,800 --> 00:40:44,190
just clicked the rollback button and the

00:40:39,540 --> 00:40:48,090
old status is is its deployed again now

00:40:44,190 --> 00:40:49,740
to be fair your application does need

00:40:48,090 --> 00:40:52,080
support roll backs right especially

00:40:49,740 --> 00:40:53,640
regarding database and stuff so you need

00:40:52,080 --> 00:40:56,310
to handle that that on your own

00:40:53,640 --> 00:40:57,869
this is not something that that gitlab

00:40:56,310 --> 00:41:00,030
can do for you so you need to do that

00:40:57,869 --> 00:41:03,090
yourselves when the container is is

00:41:00,030 --> 00:41:07,770
launched for some expectations like

00:41:03,090 --> 00:41:09,660
Magento it's not that easy but yeah you

00:41:07,770 --> 00:41:14,160
need to figure out then ways of doing

00:41:09,660 --> 00:41:16,380
that and that's actually it so so we are

00:41:14,160 --> 00:41:19,740
finally we are done with this with this

00:41:16,380 --> 00:41:21,300
presentation as we've heard throughout

00:41:19,740 --> 00:41:23,100
the day and probably yesterday as well

00:41:21,300 --> 00:41:25,430
please do rate this talk I've done it a

00:41:23,100 --> 00:41:27,570
couple of times but I want to improve it

00:41:25,430 --> 00:41:29,490
if you're interested in new features

00:41:27,570 --> 00:41:32,280
that might be missing just just let me

00:41:29,490 --> 00:41:33,870
know and that's basically it for me

00:41:32,280 --> 00:41:37,159
thank you very much

00:41:33,870 --> 00:41:37,159
[Applause]

00:41:38,700 --> 00:41:50,800
are there questions hi on that first

00:41:47,680 --> 00:41:53,140
eiements you hadn't contain it and and

00:41:50,800 --> 00:41:55,530
then you went on to run the composure

00:41:53,140 --> 00:41:57,940
commands or setting up composure hey

00:41:55,530 --> 00:42:01,000
wouldn't it be easier to just have

00:41:57,940 --> 00:42:04,600
darker image sorry

00:42:01,000 --> 00:42:07,210
proposal in the document you mean like

00:42:04,600 --> 00:42:08,800
not running the the composer in the

00:42:07,210 --> 00:42:11,080
container but like before when you build

00:42:08,800 --> 00:42:12,910
it yeah yeah that might be easier yes

00:42:11,080 --> 00:42:14,590
yes so this is just demonstration

00:42:12,910 --> 00:42:16,240
purpose I was just wondering about best

00:42:14,590 --> 00:42:19,300
practice actually that would you

00:42:16,240 --> 00:42:22,510
recommend to have it in the image or run

00:42:19,300 --> 00:42:26,710
it as part of the build I would rather

00:42:22,510 --> 00:42:28,030
run it as part of the build as well when

00:42:26,710 --> 00:42:30,880
I was when I showed in the beginning how

00:42:28,030 --> 00:42:33,369
the container is built we install these

00:42:30,880 --> 00:42:35,350
libraries and and recompile the PHP

00:42:33,369 --> 00:42:36,850
extensions over and over again I

00:42:35,350 --> 00:42:38,830
wouldn't do that either this is just

00:42:36,850 --> 00:42:40,480
like for you to take something and just

00:42:38,830 --> 00:42:44,440
just play around with it I just would

00:42:40,480 --> 00:42:48,100
create a a default build for the

00:42:44,440 --> 00:42:50,590
application on always use that very good

00:42:48,100 --> 00:42:52,960
question okay first slide you showed

00:42:50,590 --> 00:42:55,240
creating a project yeah there was a

00:42:52,960 --> 00:42:57,730
third tab which is import from an

00:42:55,240 --> 00:43:01,540
existing project does that mean that it

00:42:57,730 --> 00:43:03,400
would reinforce repulser repository in

00:43:01,540 --> 00:43:04,810
turkette lab or would you be able to run

00:43:03,400 --> 00:43:08,440
it on something that you already have

00:43:04,810 --> 00:43:10,930
locally in a git repository you can run

00:43:08,440 --> 00:43:13,510
it against a custom git repository that

00:43:10,930 --> 00:43:16,200
is run anywhere you could import it from

00:43:13,510 --> 00:43:19,450
gitlab you could import it from github

00:43:16,200 --> 00:43:21,310
maybe also bitbucket and in those cases

00:43:19,450 --> 00:43:24,280
I think it would also import like open

00:43:21,310 --> 00:43:26,380
issues and all that stuff so it really

00:43:24,280 --> 00:43:30,850
grabs the whole thing and and and gets

00:43:26,380 --> 00:43:33,400
you in there hi regarding the credential

00:43:30,850 --> 00:43:35,950
like you store it on the plain text

00:43:33,400 --> 00:43:38,350
right sorry I just couldn't follow you

00:43:35,950 --> 00:43:40,270
yeah regarding the credential you store

00:43:38,350 --> 00:43:43,859
on the plain text is there any way where

00:43:40,270 --> 00:43:46,690
we can like encrypt and decrypt things

00:43:43,859 --> 00:43:47,269
so that we can store our things on the

00:43:46,690 --> 00:43:51,169
gate or

00:43:47,269 --> 00:43:54,829
anything I don't think so

00:43:51,169 --> 00:43:59,319
at least another where I think you need

00:43:54,829 --> 00:43:59,319
to provide them them as is in plain text

00:43:59,529 --> 00:44:13,369
sorry

00:44:00,799 --> 00:44:16,669
open a feature request I got my voice is

00:44:13,369 --> 00:44:20,509
deeper than I thought if you got any

00:44:16,669 --> 00:44:22,309
because any thoughts on so what you'd be

00:44:20,509 --> 00:44:24,529
doing is setting are these custom custom

00:44:22,309 --> 00:44:26,119
pipelines but one of the things I'm

00:44:24,529 --> 00:44:28,099
finding quite confusing in get lap cloud

00:44:26,119 --> 00:44:30,079
at the moment is there they've just

00:44:28,099 --> 00:44:33,079
started rating their automated see I

00:44:30,079 --> 00:44:35,029
build pipelines which is turned on

00:44:33,079 --> 00:44:36,229
turned on by default now when you when

00:44:35,029 --> 00:44:40,899
you create a new project in the cloud

00:44:36,229 --> 00:44:43,219
you mean there's Auto DevOps yeah I

00:44:40,899 --> 00:44:47,689
haven't tried it yet I don't know how

00:44:43,219 --> 00:44:51,009
good or how or how bad it is yeah since

00:44:47,689 --> 00:44:51,009
we run all that stuff locally and

00:44:51,130 --> 00:44:55,789
out-of-the-box using our orchid lab see

00:44:53,659 --> 00:44:57,799
IMO files this just works on me but I

00:44:55,789 --> 00:45:04,089
don't know how how good or bad is this

00:44:57,799 --> 00:45:07,399
Auto DevOps thing thing works hello yeah

00:45:04,089 --> 00:45:10,939
the the script is aware that you

00:45:07,399 --> 00:45:12,829
actually deploy is in the get lapto CRM

00:45:10,939 --> 00:45:14,329
Oh in the repo is there any way of

00:45:12,829 --> 00:45:17,749
locking that down so they're only your

00:45:14,329 --> 00:45:22,069
DevOps people can change the the way the

00:45:17,749 --> 00:45:23,599
thing gets deployed I don't think so so

00:45:22,069 --> 00:45:28,729
this is really one of the downsides of

00:45:23,599 --> 00:45:31,009
kit labs there their role based

00:45:28,729 --> 00:45:32,630
authentication mechanism is really bad

00:45:31,009 --> 00:45:34,999
so they've got like four or five roles

00:45:32,630 --> 00:45:36,859
and it's like this is it so and all the

00:45:34,999 --> 00:45:38,539
cool stuff can be just done by like the

00:45:36,859 --> 00:45:41,089
master role or I think it's it's

00:45:38,539 --> 00:45:42,289
maintained a role these days so most of

00:45:41,089 --> 00:45:44,839
your team needs to have the maintainer

00:45:42,289 --> 00:45:47,179
and that just makes things even worse

00:45:44,839 --> 00:45:49,929
but that's a different story

00:45:47,179 --> 00:45:49,929

YouTube URL: https://www.youtube.com/watch?v=Fx0yYvK-aRE


