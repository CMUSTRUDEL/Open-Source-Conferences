Title: Dan Miller - HHVM at Etsy: Harder, Better, Faster, Stronger
Publication date: 2015-04-02
Playlist: PHP UK Conference 2015
Description: 
	In 2014 Etsy’s infrastructure group was handed a challenge: scale Etsy’s API cluster 20x. Many efforts were simultaneously undertaken to meet this challenge, including a migration to HHVM after it showed a promising 5x increase in throughput. While getting our code to run on HHVM was easy, working through the deployment and operationalization proved to be a more difficult challenge.

https://speakerdeck.com/jazzdan/hhvm-at-etsy
Captions: 
	00:00:00,000 --> 00:00:02,060
you

00:00:05,890 --> 00:00:11,379
I talk about a lot of things in this

00:00:09,070 --> 00:00:13,230
presentation and I have links to some

00:00:11,379 --> 00:00:16,029
things I've stolen from other presenters

00:00:13,230 --> 00:00:17,800
reference notes here at this link just

00:00:16,029 --> 00:00:20,439
goes to my website it's a list of links

00:00:17,800 --> 00:00:24,749
feel free to go there I tweeted it in

00:00:20,439 --> 00:00:24,749
PHP UK so you can go find that stuff I

00:00:25,109 --> 00:00:30,339
work at a company called etsy it's the

00:00:28,539 --> 00:00:31,989
world's handmade marketplace how many

00:00:30,339 --> 00:00:36,190
people here have bought something on

00:00:31,989 --> 00:00:38,520
etsy before awesome has anyone sold

00:00:36,190 --> 00:00:40,719
anything on it see before in here oh

00:00:38,520 --> 00:00:41,890
that's this is the first time I've given

00:00:40,719 --> 00:00:45,480
a talk and someone's raised their hand

00:00:41,890 --> 00:00:48,789
for that that's so awesome thank you

00:00:45,480 --> 00:00:50,980
etsy has about 44 million members of

00:00:48,789 --> 00:00:52,899
which about a million are active sellers

00:00:50,980 --> 00:00:55,690
including this man in the front row with

00:00:52,899 --> 00:00:58,329
26 million items listed for sale as of

00:00:55,690 --> 00:01:00,339
June of last year we have people buying

00:00:58,329 --> 00:01:02,199
and selling from nearly every country in

00:01:00,339 --> 00:01:03,969
the world twenty-five percent of

00:01:02,199 --> 00:01:05,680
transactions cross a border which is

00:01:03,969 --> 00:01:07,570
really exciting and we're closing in on

00:01:05,680 --> 00:01:11,920
about 600 employees across eight

00:01:07,570 --> 00:01:15,220
different countries one unusual thing

00:01:11,920 --> 00:01:18,009
about etsy is how often we deploy and

00:01:15,220 --> 00:01:21,250
that figures into how we had to use HH

00:01:18,009 --> 00:01:23,590
p.m. at Etsy it's not unusual for us to

00:01:21,250 --> 00:01:26,409
deploy over 60 times a day and if you

00:01:23,590 --> 00:01:29,259
saw the continuous delivery talk earlier

00:01:26,409 --> 00:01:32,530
you understand the benefits of that that

00:01:29,259 --> 00:01:34,390
brings you so that's enough about etsy a

00:01:32,530 --> 00:01:36,189
quick overview of what I plan to cover

00:01:34,390 --> 00:01:40,210
in this talk I'll talk briefly about

00:01:36,189 --> 00:01:42,610
what HH vm is why etsy was interested in

00:01:40,210 --> 00:01:45,340
it how we migrated what problems we

00:01:42,610 --> 00:01:47,560
encountered what else can it do and a

00:01:45,340 --> 00:01:55,509
bit about the future of PHP where we see

00:01:47,560 --> 00:01:58,329
it so first a brief history of HH vm so

00:01:55,509 --> 00:02:02,770
HH p.m. was written by Facebook and its

00:01:58,329 --> 00:02:04,960
history goes back to 2009 2009 at

00:02:02,770 --> 00:02:07,869
Facebook they're running pretty simple

00:02:04,960 --> 00:02:10,539
stack linux apache my sequel PHP of

00:02:07,869 --> 00:02:12,250
course but they couldn't keep up with

00:02:10,539 --> 00:02:15,790
their traffic growth the story I've

00:02:12,250 --> 00:02:18,160
heard is they could not buy servers fast

00:02:15,790 --> 00:02:18,790
enough and get them racked to meet the

00:02:18,160 --> 00:02:20,950
demand

00:02:18,790 --> 00:02:24,189
their users are bringing so that was a

00:02:20,950 --> 00:02:26,530
big problem so a group of engineers got

00:02:24,189 --> 00:02:29,680
together in this sort of daring effort

00:02:26,530 --> 00:02:31,060
to make PHP more efficient if they could

00:02:29,680 --> 00:02:33,609
do that they could cut down the number

00:02:31,060 --> 00:02:36,250
of servers they need and they would need

00:02:33,609 --> 00:02:38,200
fewer servers to serve the site and fuss

00:02:36,250 --> 00:02:39,579
was born this thing called hip hop which

00:02:38,200 --> 00:02:43,000
you might have heard of a couple years

00:02:39,579 --> 00:02:47,829
ago what hip hop did was compile PHP to

00:02:43,000 --> 00:02:49,780
C++ Facebook would then deploy that c++

00:02:47,829 --> 00:02:52,780
binary to all their machines instead of

00:02:49,780 --> 00:02:54,569
PHP source code it came with a couple

00:02:52,780 --> 00:02:57,700
downsides though the biggest one being

00:02:54,569 --> 00:03:00,370
it was tough to ask developers to on

00:02:57,700 --> 00:03:02,290
their machine say you know what instead

00:03:00,370 --> 00:03:04,269
of doing that great PHP workflow you've

00:03:02,290 --> 00:03:05,980
had all these years where you edit files

00:03:04,269 --> 00:03:08,139
and you reload the page and the change

00:03:05,980 --> 00:03:09,819
take effect immediately why don't you

00:03:08,139 --> 00:03:13,299
compile that for a couple of minutes

00:03:09,819 --> 00:03:15,819
beforehand didn't go over so well so

00:03:13,299 --> 00:03:17,439
after they sort of put the fire out they

00:03:15,819 --> 00:03:22,180
said what could we do to make this

00:03:17,439 --> 00:03:24,970
better and out of that work came hip hop

00:03:22,180 --> 00:03:28,449
virtual machine which is what hhv M

00:03:24,970 --> 00:03:30,729
stands for HH vm is not a source

00:03:28,449 --> 00:03:34,120
transformer that's now what they call HP

00:03:30,729 --> 00:03:37,180
HP see the hip hop compiler what HHMM

00:03:34,120 --> 00:03:39,489
aims to be is a drop-in replacement for

00:03:37,180 --> 00:03:41,680
PHP so if you're running PHP in a setup

00:03:39,489 --> 00:03:44,019
like this you have a web server it's

00:03:41,680 --> 00:03:48,790
talking to a PHP back-end over fast CGI

00:03:44,019 --> 00:03:51,729
something like php-fpm perhaps the idea

00:03:48,790 --> 00:03:54,459
is you can just replace PHP with HH vm

00:03:51,729 --> 00:03:57,609
it talks over fast cgi just like fpm

00:03:54,459 --> 00:04:01,019
does HH vm runs anywhere where anywhere

00:03:57,609 --> 00:04:06,970
is 64-bit linux or arm strangely enough

00:04:01,019 --> 00:04:09,760
and it also works so as of 2013 Facebook

00:04:06,970 --> 00:04:11,859
was using HH vm for everything and it's

00:04:09,760 --> 00:04:14,829
at this point that they made a big push

00:04:11,859 --> 00:04:17,289
for open sourcing their code so HH p.m.

00:04:14,829 --> 00:04:19,630
is open source internal diffs are

00:04:17,289 --> 00:04:21,190
developed in the open so when Facebook

00:04:19,630 --> 00:04:23,889
is considering making a change in

00:04:21,190 --> 00:04:28,090
optimization oftentimes it's a pull

00:04:23,889 --> 00:04:30,190
request in in the public but it's always

00:04:28,090 --> 00:04:32,380
a diff that's committed as soon as it's

00:04:30,190 --> 00:04:32,889
done it's not as though they hoard up

00:04:32,380 --> 00:04:35,139
diff

00:04:32,889 --> 00:04:37,870
and release them every six months like

00:04:35,139 --> 00:04:40,659
Android does for instance it's included

00:04:37,870 --> 00:04:42,610
in a lot of modern Linux distros over

00:04:40,659 --> 00:04:44,259
2000 bugs been opened and closed since

00:04:42,610 --> 00:04:47,169
the project started and over a thousand

00:04:44,259 --> 00:04:49,659
pull requests have been accepted not

00:04:47,169 --> 00:04:51,759
only is it open source it's also used by

00:04:49,659 --> 00:04:54,580
a lot of big companies already besides

00:04:51,759 --> 00:04:56,919
Facebook baidu one of the big if not the

00:04:54,580 --> 00:05:00,210
biggest search engine in China all of

00:04:56,919 --> 00:05:02,590
its products are now in HH vm box

00:05:00,210 --> 00:05:04,960
enterprise file sharing and cloud

00:05:02,590 --> 00:05:06,699
content management service is in the

00:05:04,960 --> 00:05:08,349
process of moving all of their products

00:05:06,699 --> 00:05:11,620
over to HH vm they wrote a blog post

00:05:08,349 --> 00:05:14,409
about that and most recently and most

00:05:11,620 --> 00:05:17,199
exciting wikipedia recently moved all of

00:05:14,409 --> 00:05:19,029
their web servers over to HH vm they

00:05:17,199 --> 00:05:23,099
wrote a blog post about that called how

00:05:19,029 --> 00:05:23,099
we made editing Wikipedia twice as fast

00:05:23,339 --> 00:05:30,669
in putting this list together I looked

00:05:26,020 --> 00:05:33,069
at the Alexa Alexis Alexia top search

00:05:30,669 --> 00:05:35,669
results that weird like spyware toolbar

00:05:33,069 --> 00:05:38,199
that gets installed on people's browsers

00:05:35,669 --> 00:05:40,990
and these are the top 10 at least as of

00:05:38,199 --> 00:05:42,879
a couple weeks ago of the top 10 three

00:05:40,990 --> 00:05:48,250
of those websites are now running HH vm

00:05:42,879 --> 00:05:51,460
which is pretty exciting HH vm is

00:05:48,250 --> 00:05:53,050
compatible asterisk with PHP doesn't

00:05:51,460 --> 00:05:56,259
look like it is at first if you run the

00:05:53,050 --> 00:05:58,719
PHP unit tests in HH vm over half of

00:05:56,259 --> 00:06:02,349
them fail but those failures they're

00:05:58,719 --> 00:06:04,389
missing extensions some rare extensions

00:06:02,349 --> 00:06:06,399
oftentimes the error message output is

00:06:04,389 --> 00:06:08,800
different the important thing to realize

00:06:06,399 --> 00:06:11,319
is that 20 of the top PHP projects on

00:06:08,800 --> 00:06:13,899
github do pass and ninety-seven percent

00:06:11,319 --> 00:06:16,060
of unit tests among the top 50 PHP

00:06:13,899 --> 00:06:20,050
projects on github pass so don't sweat

00:06:16,060 --> 00:06:22,629
the small stuff with an Etsy we saw 99

00:06:20,050 --> 00:06:24,819
percent of our unit tests pass of all

00:06:22,629 --> 00:06:30,099
the test Suites we have about 1800 only

00:06:24,819 --> 00:06:34,120
20 failed initially but what's really

00:06:30,099 --> 00:06:36,550
cool about HH vm is it's faster much

00:06:34,120 --> 00:06:39,550
faster Facebook claims you should expect

00:06:36,550 --> 00:06:43,419
to see speed improvements between 3x + 6

00:06:39,550 --> 00:06:44,889
x faster than PHP but this is for

00:06:43,419 --> 00:06:45,940
facebook and there are a lot of caveats

00:06:44,889 --> 00:06:48,670
on that number

00:06:45,940 --> 00:06:51,700
for example when they wrote this paper

00:06:48,670 --> 00:06:54,100
explaining this they were comparing HH

00:06:51,700 --> 00:06:55,900
vm against the version of PHP they last

00:06:54,100 --> 00:06:59,770
use in production which i believe was

00:06:55,900 --> 00:07:03,040
either 52 or 53 and at that point it was

00:06:59,770 --> 00:07:04,990
impossible for them to run on a regular

00:07:03,040 --> 00:07:07,600
PHP because they're using some special

00:07:04,990 --> 00:07:08,920
features of HH vm that they had built so

00:07:07,600 --> 00:07:10,480
they couldn't do a modern direct

00:07:08,920 --> 00:07:11,950
comparison so that number is a little

00:07:10,480 --> 00:07:13,540
inflated and there are some other

00:07:11,950 --> 00:07:18,400
gotchas which i'll talk about as we go

00:07:13,540 --> 00:07:21,010
through if you all learn way more about

00:07:18,400 --> 00:07:22,900
HH vm and the hack language they

00:07:21,010 --> 00:07:25,270
developed on top of the HH p.m. you

00:07:22,900 --> 00:07:27,910
should check out this presentation from

00:07:25,270 --> 00:07:30,580
oz con last year the Paul target and

00:07:27,910 --> 00:07:33,310
Sarah Bulman gave talks a lot about the

00:07:30,580 --> 00:07:35,260
internals of HH vm the hack language way

00:07:33,310 --> 00:07:39,600
more than I could cover that's also in

00:07:35,260 --> 00:07:42,070
the notes so why was that see interested

00:07:39,600 --> 00:07:45,910
performance is great but many companies

00:07:42,070 --> 00:07:48,910
don't need this performance about a year

00:07:45,910 --> 00:07:52,480
ago I gave a presentation talking about

00:07:48,910 --> 00:07:54,820
API first development at Etsy so what

00:07:52,480 --> 00:07:57,220
does this mean we had this problem where

00:07:54,820 --> 00:07:59,050
we are developing more and more mobile

00:07:57,220 --> 00:08:02,110
applications like a lot of companies are

00:07:59,050 --> 00:08:05,020
we also still had this website and it

00:08:02,110 --> 00:08:07,690
was all written in PHP we love PHP but

00:08:05,020 --> 00:08:09,880
the API code and the website code were

00:08:07,690 --> 00:08:12,550
sort of separate they shared many of the

00:08:09,880 --> 00:08:14,410
same models but sometimes if someone was

00:08:12,550 --> 00:08:16,330
coming along to pour a feature to the

00:08:14,410 --> 00:08:18,820
mobile apps they would find out that

00:08:16,330 --> 00:08:21,280
this code is just too tightly integrated

00:08:18,820 --> 00:08:23,410
into like a webview I'm just going to

00:08:21,280 --> 00:08:26,200
copy it a little bit change some things

00:08:23,410 --> 00:08:28,720
return JSON and that'll be fine let's

00:08:26,200 --> 00:08:30,010
led to a lot of problems it made moving

00:08:28,720 --> 00:08:33,000
features to the mobile apps very

00:08:30,010 --> 00:08:35,800
difficult there's a feature drift where

00:08:33,000 --> 00:08:37,300
sometimes a new feature would come out

00:08:35,800 --> 00:08:42,300
on a product that wouldn't ever get

00:08:37,300 --> 00:08:44,950
moved to the other so to solve this we

00:08:42,300 --> 00:08:47,440
integrated all of our data fetch two

00:08:44,950 --> 00:08:50,080
into an API so whether you're using a

00:08:47,440 --> 00:08:54,160
mobile app or the website data fetch is

00:08:50,080 --> 00:08:56,680
being done using an API so on the PHP

00:08:54,160 --> 00:08:59,649
web servers your curling localhost for

00:08:56,680 --> 00:09:01,360
the data great we thought we were super

00:08:59,649 --> 00:09:03,189
this is going to solve all these

00:09:01,360 --> 00:09:06,160
problems we won't have this feature

00:09:03,189 --> 00:09:08,800
drift anymore another thing that came

00:09:06,160 --> 00:09:11,009
out of this that was very similar to the

00:09:08,800 --> 00:09:13,899
react talk that was given yesterday we

00:09:11,009 --> 00:09:17,350
have this concept of bespoke endpoints

00:09:13,899 --> 00:09:20,470
so bespoke endpoint aggregates multiple

00:09:17,350 --> 00:09:22,569
rest endpoints concurrently then does

00:09:20,470 --> 00:09:25,389
some munching on the data and returns a

00:09:22,569 --> 00:09:27,369
view of the data specific for a view so

00:09:25,389 --> 00:09:29,259
there would be one bespoke endpoint for

00:09:27,369 --> 00:09:31,149
the listing page on the mobile apps and

00:09:29,259 --> 00:09:34,059
a separate one for the listing page on

00:09:31,149 --> 00:09:36,699
the website and what this looks like is

00:09:34,059 --> 00:09:38,829
so taking the list etsy listing page as

00:09:36,699 --> 00:09:41,230
an example we have all these different

00:09:38,829 --> 00:09:43,209
domain objects we need we need a listing

00:09:41,230 --> 00:09:45,309
we need the seller who sells that

00:09:43,209 --> 00:09:47,769
listing we need some related listings to

00:09:45,309 --> 00:09:49,540
that listing overview some recent

00:09:47,769 --> 00:09:51,879
listings and the shop that's selling the

00:09:49,540 --> 00:09:54,429
listing so what a bespoke endpoint can

00:09:51,879 --> 00:09:57,309
do is do some really clever dependency

00:09:54,429 --> 00:10:00,069
resolution and concurrently fetch all of

00:09:57,309 --> 00:10:02,319
the objects that it can and then in a

00:10:00,069 --> 00:10:06,279
second round of resolution fetch the

00:10:02,319 --> 00:10:09,779
other ones this is all done using curl

00:10:06,279 --> 00:10:12,160
multi if you haven't used curl multi I

00:10:09,779 --> 00:10:15,459
respect you because it's pretty terrible

00:10:12,160 --> 00:10:17,259
ah it's a lot of work but it allows you

00:10:15,459 --> 00:10:19,240
to do some powerful concurrent things in

00:10:17,259 --> 00:10:22,420
PHP that are otherwise impossible and

00:10:19,240 --> 00:10:24,720
the pseudocode for this is basically put

00:10:22,420 --> 00:10:27,189
some curl handles into curl and then

00:10:24,720 --> 00:10:29,499
execute them and to have a busy loop

00:10:27,189 --> 00:10:30,759
select out of the curl handles wait for

00:10:29,499 --> 00:10:32,379
them to resolve and then once they're

00:10:30,759 --> 00:10:35,439
all resolved you can return the result

00:10:32,379 --> 00:10:36,639
to the user so it's only ever as fast as

00:10:35,439 --> 00:10:38,889
your slowest endpoint you're fetching

00:10:36,639 --> 00:10:43,059
concurrently but it can speed up data

00:10:38,889 --> 00:10:45,309
fetch a lot also in the show notes show

00:10:43,059 --> 00:10:47,649
notes slide notes one of my colleagues

00:10:45,309 --> 00:10:49,689
gave a presentation on this at PHP day

00:10:47,649 --> 00:10:50,980
in Verona Italy last year so you can

00:10:49,689 --> 00:10:53,019
check out that video if you're curious

00:10:50,980 --> 00:10:57,249
about curl multi and all the cool things

00:10:53,019 --> 00:10:59,139
you can do with that so we thought we

00:10:57,249 --> 00:11:00,879
are really clever we have this great way

00:10:59,139 --> 00:11:03,429
to fetch more data we're solving a

00:11:00,879 --> 00:11:07,870
business problem for bringing a products

00:11:03,429 --> 00:11:09,730
to mobile more efficiently faster we

00:11:07,870 --> 00:11:12,220
sort of ignored this problem so this is

00:11:09,730 --> 00:11:15,580
a view of our homepage and it shows

00:11:12,220 --> 00:11:17,440
is all those bars are separate HTTP

00:11:15,580 --> 00:11:22,050
requests that go into producing the home

00:11:17,440 --> 00:11:24,730
page and because PHP has shared nothing

00:11:22,050 --> 00:11:26,680
every time you make an HTTP request you

00:11:24,730 --> 00:11:29,860
have to build the world you have to load

00:11:26,680 --> 00:11:32,380
your user instantiate the locale do a

00:11:29,860 --> 00:11:35,050
bunch of other work sanitize input from

00:11:32,380 --> 00:11:37,630
the user and at every point you have to

00:11:35,050 --> 00:11:40,390
do that so for us this bootstrapping

00:11:37,630 --> 00:11:41,860
process takes about 25 milliseconds but

00:11:40,390 --> 00:11:44,710
aggregated across all these endpoints

00:11:41,860 --> 00:11:46,210
that's 350 milliseconds worth of work on

00:11:44,710 --> 00:11:49,780
the cluster that's just totally

00:11:46,210 --> 00:11:52,660
duplicate the wall time for the user is

00:11:49,780 --> 00:11:56,170
great for the cluster of web servers

00:11:52,660 --> 00:11:57,790
it's very inefficient and again this is

00:11:56,170 --> 00:12:01,530
because these bespoke endpoints are

00:11:57,790 --> 00:12:06,280
making multiple concurrent HTTP requests

00:12:01,530 --> 00:12:08,920
as a result of this we saw the traffic

00:12:06,280 --> 00:12:11,530
on our API cluster grow exponentially

00:12:08,920 --> 00:12:13,990
compared to our web cluster this was

00:12:11,530 --> 00:12:15,640
because developers internally thought

00:12:13,990 --> 00:12:17,230
this was really cool they started to use

00:12:15,640 --> 00:12:18,970
it a lot they were building all of their

00:12:17,230 --> 00:12:23,910
new products using bespoke endpoints

00:12:18,970 --> 00:12:23,910
which was great but now we had a problem

00:12:24,450 --> 00:12:30,670
etsy doesn't use any virtualization or

00:12:27,820 --> 00:12:33,490
cloud providers we have our own release

00:12:30,670 --> 00:12:35,830
space in our own data centers this is

00:12:33,490 --> 00:12:37,600
because web serving at etsy is CPU bound

00:12:35,830 --> 00:12:39,820
at a certain scale it's just more

00:12:37,600 --> 00:12:41,410
efficient to have a non virtualized bare

00:12:39,820 --> 00:12:44,440
metal machine and you can do cool things

00:12:41,410 --> 00:12:47,940
like put 22 SSDs in a 1u unit like we

00:12:44,440 --> 00:12:50,290
see here in our case unlike Facebook

00:12:47,940 --> 00:12:52,690
when we saw that exponential growth we

00:12:50,290 --> 00:12:55,570
weren't limited by buying hardware we

00:12:52,690 --> 00:12:57,280
were limited by space for it so we are

00:12:55,570 --> 00:12:59,110
looking at the possibility of having to

00:12:57,280 --> 00:13:01,720
lease more space in the data center

00:12:59,110 --> 00:13:04,630
which would involve new power supply

00:13:01,720 --> 00:13:07,750
units new switches new routers moving

00:13:04,630 --> 00:13:09,970
things and lots of human time we have to

00:13:07,750 --> 00:13:11,770
have humans do this this is two of our

00:13:09,970 --> 00:13:13,600
operations people putting in a server

00:13:11,770 --> 00:13:16,420
upside down and having to take it out

00:13:13,600 --> 00:13:20,920
put it back in again so it can take some

00:13:16,420 --> 00:13:25,300
time so we're looking at this and we say

00:13:20,920 --> 00:13:26,050
okay if we can lower the latency average

00:13:25,300 --> 00:13:28,330
across all our

00:13:26,050 --> 00:13:31,620
PHP requests then we can do more

00:13:28,330 --> 00:13:34,149
requests requests per second per box

00:13:31,620 --> 00:13:36,640
more requests per second per box means

00:13:34,149 --> 00:13:40,630
we need fewer boxes to serve all the

00:13:36,640 --> 00:13:42,610
traffic but not only that we're looking

00:13:40,630 --> 00:13:44,470
at the possibility of having multiple

00:13:42,610 --> 00:13:46,480
data centers around the world currently

00:13:44,470 --> 00:13:49,089
r only in New Jersey in the United

00:13:46,480 --> 00:13:51,010
States we were creating one on the west

00:13:49,089 --> 00:13:55,630
coast and there's the possibility that

00:13:51,010 --> 00:13:58,690
we would have more around the world so

00:13:55,630 --> 00:14:01,810
fewer boxes also translates to less

00:13:58,690 --> 00:14:05,050
money per data center we need to spend

00:14:01,810 --> 00:14:07,149
to spin one of these up and perhaps most

00:14:05,050 --> 00:14:11,110
importantly fewer boxes is better for

00:14:07,149 --> 00:14:13,029
the environment so those were all the

00:14:11,110 --> 00:14:15,970
technical motivations for why we started

00:14:13,029 --> 00:14:18,490
to look at HH vm at etsy there's one

00:14:15,970 --> 00:14:21,490
non-technical one i found myself in

00:14:18,490 --> 00:14:23,529
beautiful Dublin Ireland separated from

00:14:21,490 --> 00:14:27,220
my team in New York five hour time

00:14:23,529 --> 00:14:29,500
difference and my manager said go do

00:14:27,220 --> 00:14:31,300
something crazy you've got two weeks so

00:14:29,500 --> 00:14:33,430
we can come up with just try something

00:14:31,300 --> 00:14:34,810
also Dublin doesn't usually look this

00:14:33,430 --> 00:14:36,220
beautiful it usually looks a little bit

00:14:34,810 --> 00:14:43,089
more miserable so I spent a lot of time

00:14:36,220 --> 00:14:44,800
indoors as it rained so how I'm lucky

00:14:43,089 --> 00:14:48,220
enough to work with a lot of really

00:14:44,800 --> 00:14:51,640
smart developers at Etsy including this

00:14:48,220 --> 00:14:54,040
guy you might recognize rasmus rasmus

00:14:51,640 --> 00:14:56,140
had already played around with HH p.m.

00:14:54,040 --> 00:14:59,020
we had already been using it to do

00:14:56,140 --> 00:15:01,390
static analysis and our tests so calling

00:14:59,020 --> 00:15:02,860
a function that doesn't exist creating a

00:15:01,390 --> 00:15:05,620
variable that's never used things like

00:15:02,860 --> 00:15:08,290
that so I said to Rasmus hey do you have

00:15:05,620 --> 00:15:10,149
a build of HH vm i can use like yeah

00:15:08,290 --> 00:15:13,089
just copy it down he had already

00:15:10,149 --> 00:15:15,430
compiled it so I just grabbed it and I

00:15:13,089 --> 00:15:19,540
got to work on my virtual machine trying

00:15:15,430 --> 00:15:24,459
to run etsy com on HH vm load it up the

00:15:19,540 --> 00:15:27,250
page totally blank look at the error log

00:15:24,459 --> 00:15:29,079
okay got some missing memcache constants

00:15:27,250 --> 00:15:32,769
so we're using memcache constants that

00:15:29,079 --> 00:15:35,949
HH vm didn't define doesn't matter i'll

00:15:32,769 --> 00:15:39,880
comment those out for now so no memcache

00:15:35,949 --> 00:15:42,010
for this prototype fine missing the Geo

00:15:39,880 --> 00:15:44,230
p extension geoip is something you can

00:15:42,010 --> 00:15:46,690
use to look up where user is based on

00:15:44,230 --> 00:15:49,330
their IP address that extension wasn't

00:15:46,690 --> 00:15:51,490
built into HH vm comment that out too we

00:15:49,330 --> 00:15:55,300
don't have any user analytics that's

00:15:51,490 --> 00:15:57,460
fine message back extension is missing

00:15:55,300 --> 00:16:00,010
the message back is like an efficient

00:15:57,460 --> 00:16:02,230
binary serialization format well login

00:16:00,010 --> 00:16:06,190
doesn't need to work for now slide out

00:16:02,230 --> 00:16:08,200
only etc and so on although I went back

00:16:06,190 --> 00:16:10,870
and checked the diff I had to make to

00:16:08,200 --> 00:16:12,880
have HH vm run it was four lines had to

00:16:10,870 --> 00:16:15,490
be commented out to get etsy com to run

00:16:12,880 --> 00:16:19,150
on it so that's pretty good well to get

00:16:15,490 --> 00:16:20,740
the home page to render rather so at

00:16:19,150 --> 00:16:23,380
this point I had it running on my

00:16:20,740 --> 00:16:25,540
developer virtual machine and I ran some

00:16:23,380 --> 00:16:27,930
benchmarks it's not a virtual machine so

00:16:25,540 --> 00:16:33,390
the benchmarks are you know how it is

00:16:27,930 --> 00:16:36,880
but it was faster way faster

00:16:33,390 --> 00:16:38,770
non-scientific but way faster so I sent

00:16:36,880 --> 00:16:41,940
an email to my manager here's like a

00:16:38,770 --> 00:16:45,340
gist of some numbers it's like whoa wow

00:16:41,940 --> 00:16:48,340
really what would the next steps be

00:16:45,340 --> 00:16:49,750
let's let's do this let's try it out so

00:16:48,340 --> 00:16:51,400
the next step would be to go back and

00:16:49,750 --> 00:16:55,360
fix all the things I had commented out

00:16:51,400 --> 00:16:59,350
and that involved making changes to HH

00:16:55,360 --> 00:17:03,340
vm itself which i did see him see in

00:16:59,350 --> 00:17:05,500
college once but adding some constants

00:17:03,340 --> 00:17:07,150
that wasn't too bad submitted that pull

00:17:05,500 --> 00:17:10,000
request that got accepted they're very

00:17:07,150 --> 00:17:12,069
responsive it's at this point I'd like

00:17:10,000 --> 00:17:14,890
to call your attention to this graph

00:17:12,069 --> 00:17:17,709
that I realized I had this is my

00:17:14,890 --> 00:17:20,530
happiness as a developer in orange

00:17:17,709 --> 00:17:22,420
graphic or sorry yeah my happiness has a

00:17:20,530 --> 00:17:25,750
developer in orange graph against the

00:17:22,420 --> 00:17:27,360
performance of HH vm over time so

00:17:25,750 --> 00:17:29,890
something terrible is about to happen

00:17:27,360 --> 00:17:31,120
currently we're at this high you're in

00:17:29,890 --> 00:17:33,520
that point when you're making something

00:17:31,120 --> 00:17:35,170
and it you wrote it and it worked it

00:17:33,520 --> 00:17:37,570
does what you thought you're like I'm

00:17:35,170 --> 00:17:39,310
unstoppable nothing will stop this

00:17:37,570 --> 00:17:41,170
project I'm going to be done in two

00:17:39,310 --> 00:17:46,570
weeks we'll have everything running on

00:17:41,170 --> 00:17:48,160
HH vm it wasn't that simple so made the

00:17:46,570 --> 00:17:50,860
change I did it in Ubuntu virtual

00:17:48,160 --> 00:17:53,740
machine but we run a different linux

00:17:50,860 --> 00:17:58,960
distribution so i had to compile it for

00:17:53,740 --> 00:18:03,460
our setup how hard can it be Rasmus did

00:17:58,960 --> 00:18:06,040
it what follows I looked through my

00:18:03,460 --> 00:18:08,559
emails and at least have a daily email

00:18:06,040 --> 00:18:10,420
stand up where we say what we did what

00:18:08,559 --> 00:18:12,809
we got stuck on so I looked through and

00:18:10,420 --> 00:18:16,030
I pulled some quotes from this time on

00:18:12,809 --> 00:18:17,650
sep tember second I told everyone you

00:18:16,030 --> 00:18:19,360
know I've started to compile HH vm

00:18:17,650 --> 00:18:24,070
because we need to do that to fix these

00:18:19,360 --> 00:18:25,300
things fast forward two weeks and now

00:18:24,070 --> 00:18:28,000
I'm down to the point where I'm s

00:18:25,300 --> 00:18:31,809
tracing see make to figure out why HH

00:18:28,000 --> 00:18:35,110
p.m. won't build this is the doldrums

00:18:31,809 --> 00:18:36,340
this is where I am I was I thought there

00:18:35,110 --> 00:18:39,640
is no way I'm going to get this to work

00:18:36,340 --> 00:18:44,020
i'm so over my over my dove my depth

00:18:39,640 --> 00:18:47,370
can't figure this out turns out that

00:18:44,020 --> 00:18:50,740
make clean is written by a human and

00:18:47,370 --> 00:18:52,840
humans can make mistakes if you really

00:18:50,740 --> 00:18:55,059
really want to remove all build

00:18:52,840 --> 00:18:57,670
artifacts this command is great it

00:18:55,059 --> 00:18:59,470
removes everything that wasn't cloned

00:18:57,670 --> 00:19:01,300
basically including things that are get

00:18:59,470 --> 00:19:04,929
ignored so the problem i had at this

00:19:01,300 --> 00:19:07,179
time was make was generating objects and

00:19:04,929 --> 00:19:08,890
was not deleting them so when I was

00:19:07,179 --> 00:19:13,750
making changes to fix things it was

00:19:08,890 --> 00:19:15,910
ignoring them sep tember 24th this was

00:19:13,750 --> 00:19:18,910
in all caps in the email got it to

00:19:15,910 --> 00:19:21,340
compile ah i was so happy now we're back

00:19:18,910 --> 00:19:23,500
at the top now it's going to be just two

00:19:21,340 --> 00:19:25,870
more weeks so we'll get it this time the

00:19:23,500 --> 00:19:29,110
next day i had already built an RPM I'd

00:19:25,870 --> 00:19:32,559
never built an RPM before in my life and

00:19:29,110 --> 00:19:36,070
I thought I was really clever so yeah at

00:19:32,559 --> 00:19:37,809
this point we're feeling really good the

00:19:36,070 --> 00:19:40,030
reason i thought i was being really

00:19:37,809 --> 00:19:45,100
clever with the RPM is because rpms have

00:19:40,030 --> 00:19:47,470
this idea of dependencies so if you have

00:19:45,100 --> 00:19:49,720
a package and it needs other things you

00:19:47,470 --> 00:19:51,850
should have other packages that provide

00:19:49,720 --> 00:19:53,260
that thing so when you install that

00:19:51,850 --> 00:19:55,690
thing it installs all the dependencies

00:19:53,260 --> 00:19:58,030
dependency management very easy computer

00:19:55,690 --> 00:19:59,350
science problem but I thought I don't

00:19:58,030 --> 00:20:01,660
have time to deal with that I'm just

00:19:59,350 --> 00:20:04,690
going to copy all the dependencies into

00:20:01,660 --> 00:20:08,429
the RPM and ship that it'll be really

00:20:04,690 --> 00:20:11,769
big but you know who cares

00:20:08,429 --> 00:20:14,139
a week later I sent out an email

00:20:11,769 --> 00:20:16,200
explaining how I broken every machine in

00:20:14,139 --> 00:20:18,970
production by installing this rpm

00:20:16,200 --> 00:20:25,750
because it provided everything to

00:20:18,970 --> 00:20:28,330
everything else so don't do that and so

00:20:25,750 --> 00:20:30,940
the real problem here so all this two

00:20:28,330 --> 00:20:32,889
months worth of work we were running

00:20:30,940 --> 00:20:34,840
sent OS just fine sent to us is a

00:20:32,889 --> 00:20:37,720
perfectly respectable linux distribution

00:20:34,840 --> 00:20:39,779
but we were running sent OS 6 which is

00:20:37,720 --> 00:20:43,480
fine that's a perfectly respectable

00:20:39,779 --> 00:20:45,580
stable enterprise linux distribution but

00:20:43,480 --> 00:20:47,470
Facebook they like to use the newest

00:20:45,580 --> 00:20:49,120
versions of everything because in their

00:20:47,470 --> 00:20:51,070
perspective why should we limit

00:20:49,120 --> 00:20:55,029
ourselves to using old tools when we

00:20:51,070 --> 00:20:57,250
could use new things like C++ 11 so in

00:20:55,029 --> 00:20:59,740
order to install HH p.m. and sent six I

00:20:57,250 --> 00:21:01,630
had to upgrade all of these packages and

00:20:59,740 --> 00:21:08,500
more and if you've ever tried to upgrade

00:21:01,630 --> 00:21:11,320
Lib C don't try I gave up the answer

00:21:08,500 --> 00:21:13,389
upgrade to sent seven then you only have

00:21:11,320 --> 00:21:18,580
to upgrade three or four of these things

00:21:13,389 --> 00:21:21,460
much easier ok so now we have finally

00:21:18,580 --> 00:21:24,159
version of HH vm with my fixes applied

00:21:21,460 --> 00:21:25,750
we have it in production or we have it

00:21:24,159 --> 00:21:28,210
able to be installed in production now

00:21:25,750 --> 00:21:30,460
we can run a more rigorous test with

00:21:28,210 --> 00:21:32,769
this prototype I'm going to quickly talk

00:21:30,460 --> 00:21:34,570
about how at sea as a product

00:21:32,769 --> 00:21:37,840
engineering organization thinks about

00:21:34,570 --> 00:21:39,549
running experiments this is dan mckinley

00:21:37,840 --> 00:21:42,070
and he gave a talk at the lean startup

00:21:39,549 --> 00:21:44,260
conference last year about how

00:21:42,070 --> 00:21:46,360
experimentation works at etsy and he

00:21:44,260 --> 00:21:49,870
walked a little bit through the history

00:21:46,360 --> 00:21:51,970
of doing experiments at etsy so at first

00:21:49,870 --> 00:21:56,559
this was how it worked we had this idea

00:21:51,970 --> 00:21:58,600
for a product and you thought it was

00:21:56,559 --> 00:22:00,850
great so you built it you wouldn't have

00:21:58,600 --> 00:22:02,350
built it if it wasn't good idea and then

00:22:00,850 --> 00:22:04,840
you release it because it was a good

00:22:02,350 --> 00:22:07,330
idea of course everyone should have this

00:22:04,840 --> 00:22:09,279
thing but eventually after you do this

00:22:07,330 --> 00:22:11,230
you realize that maybe your idea wasn't

00:22:09,279 --> 00:22:12,820
perfect and you look at some of the

00:22:11,230 --> 00:22:16,000
numbers and realize that no one's using

00:22:12,820 --> 00:22:18,399
your awesome project so out of this

00:22:16,000 --> 00:22:21,100
comes a be testing a be testing this

00:22:18,399 --> 00:22:22,630
idea that you have one version of a page

00:22:21,100 --> 00:22:24,580
and another version of the page and you

00:22:22,630 --> 00:22:26,650
can compare metrics between them as

00:22:24,580 --> 00:22:30,250
users use those products to figure out

00:22:26,650 --> 00:22:31,750
which one's performing better but even

00:22:30,250 --> 00:22:34,380
here a be testing didn't solve the

00:22:31,750 --> 00:22:37,360
problem what this often turned into is

00:22:34,380 --> 00:22:40,000
you have the idea you write the code and

00:22:37,360 --> 00:22:41,559
then UAB test forever because it turns

00:22:40,000 --> 00:22:43,059
out the assumptions you made about the

00:22:41,559 --> 00:22:46,780
project we're totally wrong and it's

00:22:43,059 --> 00:22:49,750
never going to perform well anyways so

00:22:46,780 --> 00:22:52,000
enter this new idea of doing experiments

00:22:49,750 --> 00:22:53,320
you have the idea you validate the idea

00:22:52,000 --> 00:22:54,750
you do the cheapest thing you can

00:22:53,320 --> 00:22:57,669
possibly do to make sure it will work

00:22:54,750 --> 00:22:59,650
then you make a quick prototype run some

00:22:57,669 --> 00:23:01,929
a B test with that validate some more

00:22:59,650 --> 00:23:03,340
ideas continue to refine and run a/b

00:23:01,929 --> 00:23:05,140
tests until you end up with a more

00:23:03,340 --> 00:23:07,390
full-featured product that your users

00:23:05,140 --> 00:23:09,340
will actually enjoy the important thing

00:23:07,390 --> 00:23:12,000
to point out here is that the prototype

00:23:09,340 --> 00:23:16,690
is possibly quite crappy and that's okay

00:23:12,000 --> 00:23:19,210
so for us this thing on my VM with all

00:23:16,690 --> 00:23:22,030
these things commented out that was the

00:23:19,210 --> 00:23:25,179
validation validated that it was pretty

00:23:22,030 --> 00:23:28,240
possible to run eight etsy com on HH vm

00:23:25,179 --> 00:23:30,010
and it wouldn't be too crazy so the

00:23:28,240 --> 00:23:31,929
prototype phase is now where we're at

00:23:30,010 --> 00:23:34,960
we've solved some of the basic problems

00:23:31,929 --> 00:23:37,240
let's run an ib tests later on we can

00:23:34,960 --> 00:23:40,539
refine it and make it less crappy as we

00:23:37,240 --> 00:23:43,890
encounter problems so again validate

00:23:40,539 --> 00:23:46,840
khatm run etsy com yes we think it can

00:23:43,890 --> 00:23:48,460
so the prototype our goal was is it

00:23:46,840 --> 00:23:50,890
faster we're pretty sure it was faster

00:23:48,460 --> 00:23:52,659
but we ran the benchmark on a vm all

00:23:50,890 --> 00:23:56,110
sorts of crazy things can happen on VMS

00:23:52,659 --> 00:23:58,750
to affect numbers so we wanted to test

00:23:56,110 --> 00:24:00,250
it more rigorously and throughout from

00:23:58,750 --> 00:24:02,590
this point on I'm going to discuss some

00:24:00,250 --> 00:24:05,260
of the problems we encountered that we

00:24:02,590 --> 00:24:08,919
didn't filter out in the prototype phase

00:24:05,260 --> 00:24:11,260
or in the validation phase and real

00:24:08,919 --> 00:24:13,840
quick scoping going back to this graph

00:24:11,260 --> 00:24:16,000
we decided that it was more important to

00:24:13,840 --> 00:24:17,409
get the API cluster running on HH vm

00:24:16,000 --> 00:24:20,380
than the web cluster because of this

00:24:17,409 --> 00:24:22,990
graph so we scoped ourselves let's just

00:24:20,380 --> 00:24:26,799
move the api code over to HH vm not

00:24:22,990 --> 00:24:30,580
worry about anything else so i installed

00:24:26,799 --> 00:24:34,570
HH vm and PHP on a production level box

00:24:30,580 --> 00:24:37,600
this is a pretty beefy computer three

00:24:34,570 --> 00:24:40,000
32 cores lots of memory and ran some

00:24:37,600 --> 00:24:42,460
synthetic benchmarks and it looked

00:24:40,000 --> 00:24:44,320
really good so I had about a dozen API

00:24:42,460 --> 00:24:47,110
endpoints I verified by hand you can

00:24:44,320 --> 00:24:49,630
probably even barely see HH vm and green

00:24:47,110 --> 00:24:53,919
down here so this is response time as

00:24:49,630 --> 00:24:55,899
load increases so i ran a apache bench

00:24:53,919 --> 00:24:59,049
with 10 requests per second 30 request

00:24:55,899 --> 00:25:01,690
50s 50 requests and so on because what

00:24:59,049 --> 00:25:03,100
we were looking for here wasn't just

00:25:01,690 --> 00:25:05,230
performance we were looking for

00:25:03,100 --> 00:25:08,080
throughput throughput was what was going

00:25:05,230 --> 00:25:11,620
to help us use fewer boxes and we can

00:25:08,080 --> 00:25:15,279
see around 180 190 request for a second

00:25:11,620 --> 00:25:17,950
our apache and PHP 54 set up just

00:25:15,279 --> 00:25:21,700
totally the performance at that rate was

00:25:17,950 --> 00:25:25,480
unacceptable HH vm was totally fine caps

00:25:21,700 --> 00:25:27,970
cruising great so we verified that yes

00:25:25,480 --> 00:25:30,789
it is faster this will be a thing that

00:25:27,970 --> 00:25:33,700
will help us and now I'm feeling really

00:25:30,789 --> 00:25:37,480
good we have this thing installed it

00:25:33,700 --> 00:25:41,110
works I verified my assumptions what can

00:25:37,480 --> 00:25:45,100
possibly go wrong so now let's run an

00:25:41,110 --> 00:25:48,309
experiment time to fix the problems we

00:25:45,100 --> 00:25:52,240
skipped so how do we gain more

00:25:48,309 --> 00:25:54,850
confidence from this point and also

00:25:52,240 --> 00:25:59,259
validate hypothesis that this would help

00:25:54,850 --> 00:26:01,980
our throughput on etsy com and we came

00:25:59,259 --> 00:26:04,539
up with a really interesting solution

00:26:01,980 --> 00:26:06,730
teeing traffic so you can think of tea

00:26:04,539 --> 00:26:09,220
in this case like the tea on the command

00:26:06,730 --> 00:26:11,259
line and the way this works is we have a

00:26:09,220 --> 00:26:14,740
load balancer that's distributing load

00:26:11,259 --> 00:26:17,110
between our web servers from that load

00:26:14,740 --> 00:26:19,779
balancer we wrote a rule that said if an

00:26:17,110 --> 00:26:22,450
API request comes in send that request

00:26:19,779 --> 00:26:24,789
to the API cluster and to these other

00:26:22,450 --> 00:26:27,639
two clusters so copy it duplicate it

00:26:24,789 --> 00:26:30,190
send it to the API tests in the API HH

00:26:27,639 --> 00:26:31,539
p.m. cluster take the response from the

00:26:30,190 --> 00:26:35,139
normal cluster and throw away the other

00:26:31,539 --> 00:26:37,929
ones this allowed us to see real world

00:26:35,139 --> 00:26:39,610
production traffic against our boxes not

00:26:37,929 --> 00:26:42,039
a synthetic test where you're just sort

00:26:39,610 --> 00:26:44,919
of hammering it with apache bench what

00:26:42,039 --> 00:26:46,090
happens when real users use it and a

00:26:44,919 --> 00:26:48,370
couple things we learned at this point

00:26:46,090 --> 00:26:51,520
first infrastructure experiments

00:26:48,370 --> 00:26:53,440
are hard on the product side you can

00:26:51,520 --> 00:26:56,320
make a change to your website set up an

00:26:53,440 --> 00:26:57,970
experiment and run it for us in

00:26:56,320 --> 00:26:59,980
infrastructure it's a little bit harder

00:26:57,970 --> 00:27:01,900
we need to make sure that we had the

00:26:59,980 --> 00:27:03,580
same hardware everywhere because if we

00:27:01,900 --> 00:27:06,220
didn't it would invalidate all the

00:27:03,580 --> 00:27:08,470
performance results we need to make sure

00:27:06,220 --> 00:27:11,080
we had the same traffic profile if one

00:27:08,470 --> 00:27:13,300
box was receiving traffic that just was

00:27:11,080 --> 00:27:15,580
doing more work was causing more things

00:27:13,300 --> 00:27:17,260
that happen we also couldn't compare the

00:27:15,580 --> 00:27:20,740
traffic that box was getting against

00:27:17,260 --> 00:27:22,420
another one and we needed the same hacks

00:27:20,740 --> 00:27:24,250
present on both so at this point we

00:27:22,420 --> 00:27:26,260
still had some HH vm issues we were

00:27:24,250 --> 00:27:27,820
working out things we had sort of

00:27:26,260 --> 00:27:31,120
commented out we need to comment those

00:27:27,820 --> 00:27:33,309
out in PHP as well so what this meant

00:27:31,120 --> 00:27:35,160
was both machines had to read only my

00:27:33,309 --> 00:27:38,200
sequel interface so that if a user

00:27:35,160 --> 00:27:39,610
submitted a post and we duplicated it

00:27:38,200 --> 00:27:42,340
three times it didn't happen three times

00:27:39,610 --> 00:27:44,980
only happens once same with memcache in

00:27:42,340 --> 00:27:46,900
Redis we had I p tables blocking almost

00:27:44,980 --> 00:27:51,520
all the things and we weren't forwarding

00:27:46,900 --> 00:27:53,380
any logs to syslog or log stash so back

00:27:51,520 --> 00:27:55,330
to this graph real quick this was a bit

00:27:53,380 --> 00:27:56,980
of a slog it was a lot of work to set up

00:27:55,330 --> 00:27:59,410
to convince everyone on my team that

00:27:56,980 --> 00:28:02,770
this was a fair experiment there's a lot

00:27:59,410 --> 00:28:04,929
of momentum behind PHP and mod PHP at

00:28:02,770 --> 00:28:08,350
Etsy but eventually we got through it

00:28:04,929 --> 00:28:11,320
and it looks pretty good so this is

00:28:08,350 --> 00:28:14,260
comparing hhv mcp you serving production

00:28:11,320 --> 00:28:17,830
profile traffic and Zen CPU or PHP 55

00:28:14,260 --> 00:28:19,720
now for 14 hours peak was about 140

00:28:17,830 --> 00:28:21,790
requests per second and note that this

00:28:19,720 --> 00:28:24,730
is unfairly powerful hardware like I

00:28:21,790 --> 00:28:27,910
said but here we are seeing HH p.m.

00:28:24,730 --> 00:28:30,460
performing about twice as well as PHP 55

00:28:27,910 --> 00:28:33,640
but remember facebook said between three

00:28:30,460 --> 00:28:35,429
and six what's going on here there's a

00:28:33,640 --> 00:28:39,580
couple things that could be happening

00:28:35,429 --> 00:28:42,160
first is we try to make our API as light

00:28:39,580 --> 00:28:45,280
a wrapper around my sequel as we

00:28:42,160 --> 00:28:47,410
possibly can this leads to you know we

00:28:45,280 --> 00:28:48,850
don't want it as much overhead it we

00:28:47,410 --> 00:28:53,170
want to eliminate as much overhead as we

00:28:48,850 --> 00:28:55,480
can but neither HH vm or any other PHP

00:28:53,170 --> 00:28:57,880
language technology will speed up your

00:28:55,480 --> 00:28:59,380
my sequel queries so that could be a

00:28:57,880 --> 00:29:01,290
reason why it just wasn't doing that

00:28:59,380 --> 00:29:03,640
much computation in pH

00:29:01,290 --> 00:29:05,530
also we weren't doing all the

00:29:03,640 --> 00:29:06,970
optimizations that the HH vm team

00:29:05,530 --> 00:29:08,890
recommended there's this other feature

00:29:06,970 --> 00:29:10,840
they have called a repo authoritative

00:29:08,890 --> 00:29:13,270
mode which they claim will give you an

00:29:10,840 --> 00:29:14,860
extra twenty percent speed improvement

00:29:13,270 --> 00:29:17,500
on top and basically what this does is

00:29:14,860 --> 00:29:20,710
generate a bytecode sequel light

00:29:17,500 --> 00:29:22,750
database so sort of like op cash but in

00:29:20,710 --> 00:29:24,940
sequel light in advance so you have a

00:29:22,750 --> 00:29:27,340
compile step now it builds out an

00:29:24,940 --> 00:29:29,740
include map between all your classes

00:29:27,340 --> 00:29:32,830
statically resolves file paths and does

00:29:29,740 --> 00:29:34,630
a lot of other optimizations but we

00:29:32,830 --> 00:29:36,490
couldn't really use this to introduce a

00:29:34,630 --> 00:29:38,500
compile step when we're deploying 60

00:29:36,490 --> 00:29:41,950
times a day would have been too

00:29:38,500 --> 00:29:44,290
complicated and twenty percent we were

00:29:41,950 --> 00:29:47,590
already seeing two x's perfectly fine

00:29:44,290 --> 00:29:50,110
yeah we'll take it but I mentioned

00:29:47,590 --> 00:29:53,320
before that we had these these hacks in

00:29:50,110 --> 00:29:55,060
place not to do data access so how do we

00:29:53,320 --> 00:29:57,250
verify writing data and this was a big

00:29:55,060 --> 00:30:00,790
concern because if H hbm has some weird

00:29:57,250 --> 00:30:02,440
bug where it writes the wrong data and

00:30:00,790 --> 00:30:07,150
now we have data corruption in our

00:30:02,440 --> 00:30:12,870
database and no one wants that so we saw

00:30:07,150 --> 00:30:15,400
this by doing employee only traffic and

00:30:12,870 --> 00:30:18,780
here is where we encountered some really

00:30:15,400 --> 00:30:22,240
fun problems so employee only traffic

00:30:18,780 --> 00:30:24,160
the clusters are have minut load it's

00:30:22,240 --> 00:30:25,210
like not even showing up on the CPU

00:30:24,160 --> 00:30:28,990
graph but there's only a couple hundred

00:30:25,210 --> 00:30:31,980
people using them so it wasn't testing

00:30:28,990 --> 00:30:35,920
performance we were testing correctness

00:30:31,980 --> 00:30:38,590
so memcache we noticed some problems of

00:30:35,920 --> 00:30:41,020
memcache we have a rate limiter in our

00:30:38,590 --> 00:30:44,020
API and we noticed that it couldn't

00:30:41,020 --> 00:30:46,840
decrement any of the keys it was always

00:30:44,020 --> 00:30:49,390
saying that the key couldn't be found so

00:30:46,840 --> 00:30:51,910
we try to reproduce it we install HH vm

00:30:49,390 --> 00:30:57,730
we set up a local memcache called

00:30:51,910 --> 00:30:59,770
decrement works fine hmm this was a slog

00:30:57,730 --> 00:31:03,940
I'm getting a little bit a little bit

00:30:59,770 --> 00:31:06,070
depressed here turns out there's a bug

00:31:03,940 --> 00:31:09,400
in HH VMs memcache extension with

00:31:06,070 --> 00:31:11,290
decrement it wasn't referring to the

00:31:09,400 --> 00:31:13,430
right function so we submitted a patch

00:31:11,290 --> 00:31:16,100
have it defer the right function

00:31:13,430 --> 00:31:19,340
everything is great while we were

00:31:16,100 --> 00:31:22,040
debugging this we happen to TCP dump the

00:31:19,340 --> 00:31:23,620
connection between HH vm and memcache we

00:31:22,040 --> 00:31:26,480
noticed something else really strange

00:31:23,620 --> 00:31:28,970
actually everything was returning false

00:31:26,480 --> 00:31:35,420
even after we made that change every get

00:31:28,970 --> 00:31:38,630
was returning false ok what could this

00:31:35,420 --> 00:31:40,970
possibly be turns out another bug in the

00:31:38,630 --> 00:31:42,590
HH vm memcache extension just to be

00:31:40,970 --> 00:31:44,930
clear HH frame requires different

00:31:42,590 --> 00:31:47,270
extensions than PHP has a different

00:31:44,930 --> 00:31:49,520
extensions API so if you're want to use

00:31:47,270 --> 00:31:51,290
an extension you have to port it over to

00:31:49,520 --> 00:31:53,660
this new API so the extensions are

00:31:51,290 --> 00:31:56,240
different between the two run times what

00:31:53,660 --> 00:31:58,910
was happening here was in memcache you

00:31:56,240 --> 00:32:02,450
can set a hashing option like when I

00:31:58,910 --> 00:32:05,570
send you a key hash it this way and it

00:32:02,450 --> 00:32:07,670
was resetting that on every time a

00:32:05,570 --> 00:32:09,260
request happen so we would set it it

00:32:07,670 --> 00:32:10,940
would say great this is the new hashing

00:32:09,260 --> 00:32:14,450
way it would do it once and then it

00:32:10,940 --> 00:32:18,020
would throw it out so fix that now our

00:32:14,450 --> 00:32:22,700
memcache is working so the takeaway here

00:32:18,020 --> 00:32:26,390
is HH vm is rock solid throughout this

00:32:22,700 --> 00:32:30,500
whole migration we've found exactly one

00:32:26,390 --> 00:32:33,530
language bug a weird thing with get last

00:32:30,500 --> 00:32:37,400
error or error get last turns out that

00:32:33,530 --> 00:32:39,740
in PHP error get last pops or pulls the

00:32:37,400 --> 00:32:41,060
last error off of the stack and so if

00:32:39,740 --> 00:32:43,730
you call it a second time that's not

00:32:41,060 --> 00:32:45,140
there anymore HH p.m. kept it around so

00:32:43,730 --> 00:32:47,300
that was a little strange but other than

00:32:45,140 --> 00:32:49,400
that we expected to find all of these

00:32:47,300 --> 00:32:51,980
incompatibilities we thought etsy has

00:32:49,400 --> 00:32:53,630
some weird edge cases in our PHP code

00:32:51,980 --> 00:32:54,890
and it's going to trip hhv em up we're

00:32:53,630 --> 00:32:59,380
going to spend a lot of time trying to

00:32:54,890 --> 00:33:03,070
figure it out wasn't the case however

00:32:59,380 --> 00:33:06,380
extensions sometimes have bugs in HH vm

00:33:03,070 --> 00:33:09,050
many extensions in HH p.m. facebook

00:33:06,380 --> 00:33:12,200
doesn't use they wrote them specifically

00:33:09,050 --> 00:33:14,390
so they could open source HH vm this is

00:33:12,200 --> 00:33:17,960
because in a lot of these cases Facebook

00:33:14,390 --> 00:33:20,030
has their own custom clients so they

00:33:17,960 --> 00:33:21,950
have their own custom memcache client

00:33:20,030 --> 00:33:24,110
they have their own custom my sequel

00:33:21,950 --> 00:33:26,000
clients so they don't use the extension

00:33:24,110 --> 00:33:26,740
that talks to live my sequel or lib

00:33:26,000 --> 00:33:29,590
memcache

00:33:26,740 --> 00:33:32,530
however just last week they did open

00:33:29,590 --> 00:33:34,809
source the both of those things and the

00:33:32,530 --> 00:33:36,520
extensions for those libraries so now in

00:33:34,809 --> 00:33:38,380
HH vm so if you wanted to use those new

00:33:36,520 --> 00:33:42,309
clients then i believe you would be

00:33:38,380 --> 00:33:44,020
using the same extensions as facebook so

00:33:42,309 --> 00:33:46,510
don't expect the my sequel and memcache

00:33:44,020 --> 00:33:48,130
extensions or frankly any of the

00:33:46,510 --> 00:33:50,290
extensions to be thoroughly

00:33:48,130 --> 00:33:51,760
battle-tested if they're not used by

00:33:50,290 --> 00:33:56,740
another company that's already using

00:33:51,760 --> 00:33:58,809
them so we did this employee only

00:33:56,740 --> 00:34:01,120
traffic we're feeling really confident

00:33:58,809 --> 00:34:03,580
no one has reported any bugs internally

00:34:01,120 --> 00:34:05,559
requests are looking very consistent we

00:34:03,580 --> 00:34:08,830
were able to diff the request between

00:34:05,559 --> 00:34:10,480
both environments so now we start the

00:34:08,830 --> 00:34:12,010
slow ramp-up this is the traditional

00:34:10,480 --> 00:34:14,139
part of an infrastructure experiment

00:34:12,010 --> 00:34:15,909
where you say I'm going to have one

00:34:14,139 --> 00:34:18,639
percent of traffic served out of this

00:34:15,909 --> 00:34:21,220
new thing and then two percent and then

00:34:18,639 --> 00:34:23,409
five percent so we got pretty far I

00:34:21,220 --> 00:34:25,629
think we were up to twenty twenty-five

00:34:23,409 --> 00:34:29,260
percent and then one of the operations

00:34:25,629 --> 00:34:32,859
people pm to be and he said hidden do

00:34:29,260 --> 00:34:34,899
you know why uh HH vm sometimes it's

00:34:32,859 --> 00:34:38,710
generally slogs that are failing to be

00:34:34,899 --> 00:34:40,330
parsed and we send them to log stash wow

00:34:38,710 --> 00:34:41,919
that's weird and being an ignorant

00:34:40,330 --> 00:34:46,440
American I was like why is there a V

00:34:41,919 --> 00:34:49,300
after that Jan and why is it lowercase I

00:34:46,440 --> 00:34:52,179
know something even weirder it's like oh

00:34:49,300 --> 00:34:57,970
okay why is there non-ascii characters

00:34:52,179 --> 00:35:00,369
and our log lines so we talked with some

00:34:57,970 --> 00:35:04,350
of the people there's actually Rasmus

00:35:00,369 --> 00:35:08,790
who keyed us into what's happening here

00:35:04,350 --> 00:35:11,350
HH p.m. is threaded and we do

00:35:08,790 --> 00:35:14,170
localization at Etsy by calling

00:35:11,350 --> 00:35:16,330
setlocale set locales of PHP function it

00:35:14,170 --> 00:35:18,369
sets the locale and then when you call

00:35:16,330 --> 00:35:20,290
string.format time or any of those other

00:35:18,369 --> 00:35:22,060
formatting functions it will use the

00:35:20,290 --> 00:35:24,970
internal local libraries to print out

00:35:22,060 --> 00:35:27,340
the dates and things like that so what

00:35:24,970 --> 00:35:30,550
was happening was a request would come

00:35:27,340 --> 00:35:32,890
in it would set locale to something say

00:35:30,550 --> 00:35:34,660
Dutch it would go through and it would

00:35:32,890 --> 00:35:37,210
do some work it's loading things from a

00:35:34,660 --> 00:35:40,240
database calculating some stuff another

00:35:37,210 --> 00:35:43,540
request comes in it sets locale

00:35:40,240 --> 00:35:45,250
Russian now the first request is done

00:35:43,540 --> 00:35:46,930
it's ready to print stuff out to the

00:35:45,250 --> 00:35:51,700
user and the logs so it calls

00:35:46,930 --> 00:35:56,680
string.format time with Russian not with

00:35:51,700 --> 00:36:01,180
Dutch anymore how is that possible turns

00:35:56,680 --> 00:36:03,280
out HH vm is a threaded s api and if you

00:36:01,180 --> 00:36:04,960
look at the php.net documentation for

00:36:03,280 --> 00:36:08,290
setlocale there is a warning there if

00:36:04,960 --> 00:36:11,680
you use i is be aware that setlocale

00:36:08,290 --> 00:36:13,990
will affect all requests turns out the

00:36:11,680 --> 00:36:17,470
HHB minute I is have the same way they

00:36:13,990 --> 00:36:20,320
handle requests a request isn't handled

00:36:17,470 --> 00:36:23,590
by one process at a time it's handled by

00:36:20,320 --> 00:36:25,780
one thread at a time so if you call a

00:36:23,590 --> 00:36:28,150
function like setlocale which it turns

00:36:25,780 --> 00:36:30,940
out just proxies to the system call

00:36:28,150 --> 00:36:33,550
setlocale it affects the locale for the

00:36:30,940 --> 00:36:36,040
entire process and all of your requests

00:36:33,550 --> 00:36:40,930
that are happening at that time pretty

00:36:36,040 --> 00:36:43,840
surprising so there's a solution there

00:36:40,930 --> 00:36:46,180
are thread local versions or equivalents

00:36:43,840 --> 00:36:47,920
of setlocale new locale and used locale

00:36:46,180 --> 00:36:49,660
or some of them and there is a pull

00:36:47,920 --> 00:36:51,430
request we've submitted to HH vm to use

00:36:49,660 --> 00:36:58,210
that so we didn't have that problem

00:36:51,430 --> 00:37:02,200
anymore so the takeaway hht vm is

00:36:58,210 --> 00:37:04,450
threaded and threads are hard this can

00:37:02,200 --> 00:37:07,300
cause surprises with certain functions

00:37:04,450 --> 00:37:12,100
so any function you have the use in PHP

00:37:07,300 --> 00:37:13,690
that closely resembles a system call be

00:37:12,100 --> 00:37:18,160
very careful when you're using that in

00:37:13,690 --> 00:37:20,530
HH vm it might have side effects PHP was

00:37:18,160 --> 00:37:23,830
written by a sea programmer it has a lot

00:37:20,530 --> 00:37:26,590
of sea semantics in it including if you

00:37:23,830 --> 00:37:30,490
call setlocale obviously you're calling

00:37:26,590 --> 00:37:32,590
setlocale the c function also though be

00:37:30,490 --> 00:37:35,260
careful about what libraries you use

00:37:32,590 --> 00:37:38,020
with HH vm because if any of them call

00:37:35,260 --> 00:37:39,520
setlocale then they are also affecting

00:37:38,020 --> 00:37:45,910
all the threads because it's all

00:37:39,520 --> 00:37:47,340
included in the same process so we

00:37:45,910 --> 00:37:50,490
figured that out

00:37:47,340 --> 00:37:52,500
that took a couple weeks and now it's

00:37:50,490 --> 00:37:54,570
time to release so let's continue on the

00:37:52,500 --> 00:37:58,860
slow ramp-up this is my favorite graph

00:37:54,570 --> 00:38:00,930
it shows a to HH vm box is slowly eating

00:37:58,860 --> 00:38:03,210
all the requests per second from all of

00:38:00,930 --> 00:38:04,970
the other boxes they're just like give

00:38:03,210 --> 00:38:08,670
me more and more and more I can take it

00:38:04,970 --> 00:38:10,670
so over this time these graphs are a

00:38:08,670 --> 00:38:13,260
little wonky I apologize because the

00:38:10,670 --> 00:38:17,790
y-axis is not consistent thank you very

00:38:13,260 --> 00:38:19,560
much ganglion rrd tool but things are

00:38:17,790 --> 00:38:22,710
looking way better perk 95 is looking

00:38:19,560 --> 00:38:24,780
especially good and this is only on our

00:38:22,710 --> 00:38:27,060
internal API which is what the bespoke

00:38:24,780 --> 00:38:32,160
endpoints fan out to in our earlier

00:38:27,060 --> 00:38:35,130
example so this is a nicer graph HH p.m.

00:38:32,160 --> 00:38:36,600
is faster now after we have memcache

00:38:35,130 --> 00:38:38,970
working that was probably one of the

00:38:36,600 --> 00:38:41,340
reasons why we didn't get a 3x and a

00:38:38,970 --> 00:38:44,850
couple other things looking closer to

00:38:41,340 --> 00:38:46,410
three accident was before but

00:38:44,850 --> 00:38:49,140
performance isn't the only great thing

00:38:46,410 --> 00:38:50,430
about HH vm it it is a definite benefit

00:38:49,140 --> 00:38:52,530
it is a thing that gets you in the door

00:38:50,430 --> 00:38:54,450
but i think it has a couple other

00:38:52,530 --> 00:39:01,830
features that will cause you to stick

00:38:54,450 --> 00:39:04,490
around so what else can HH vm do one

00:39:01,830 --> 00:39:06,210
great thing it can make is flame graphs

00:39:04,490 --> 00:39:08,400
flame graphs are something that are

00:39:06,210 --> 00:39:12,720
typically used when you're profiling on

00:39:08,400 --> 00:39:15,570
a cpu so a flame graph shows you what

00:39:12,720 --> 00:39:18,990
instructions happen on the cpu what

00:39:15,570 --> 00:39:22,110
percentage of the time in HH VMS case it

00:39:18,990 --> 00:39:24,360
shows you what PHP functions occur in

00:39:22,110 --> 00:39:28,860
stack traces what percentage of the time

00:39:24,360 --> 00:39:31,050
so this isn't necessarily a a graph of

00:39:28,860 --> 00:39:33,060
what functions are taking the most time

00:39:31,050 --> 00:39:34,680
but they are sort of the most called

00:39:33,060 --> 00:39:37,080
ones and this is very valuable for

00:39:34,680 --> 00:39:38,990
looking at where you can focus your

00:39:37,080 --> 00:39:41,430
efforts to make performance improvements

00:39:38,990 --> 00:39:43,500
this is enabled by a project that

00:39:41,430 --> 00:39:46,040
Wikipedia put out called arc lamp they

00:39:43,500 --> 00:39:49,740
wrote this great tool chain to take

00:39:46,040 --> 00:39:51,630
information from an extension p facebook

00:39:49,740 --> 00:39:54,030
wrote for HH p.m. called xenon and to

00:39:51,630 --> 00:39:56,160
produce these graphs so if you check

00:39:54,030 --> 00:39:58,460
that out it's also in the notes very

00:39:56,160 --> 00:39:58,460
cool

00:39:58,490 --> 00:40:05,510
HH p.m. also comes with its own debugger

00:40:01,460 --> 00:40:07,010
how many people have used XD bug how

00:40:05,510 --> 00:40:09,940
many people have tried to get it set up

00:40:07,010 --> 00:40:14,270
and it failed and then sort of given up

00:40:09,940 --> 00:40:16,910
yeah I love XD bug I love debuggers

00:40:14,270 --> 00:40:19,460
they're so great but I don't know about

00:40:16,910 --> 00:40:23,540
the rest of you but oftentimes I destroy

00:40:19,460 --> 00:40:25,550
laptops or accidentally nucca vm and I

00:40:23,540 --> 00:40:28,010
didn't back up my ex debug config so I'm

00:40:25,550 --> 00:40:30,550
going back an IDE keys and these

00:40:28,010 --> 00:40:33,410
extensions and vim plugins and voila

00:40:30,550 --> 00:40:37,760
such a hassle HH p.m. comes with a

00:40:33,410 --> 00:40:41,210
debugger built in if you like gdb you're

00:40:37,760 --> 00:40:43,190
going to love this this might be a

00:40:41,210 --> 00:40:45,080
little small but I'll try to walk

00:40:43,190 --> 00:40:49,330
through what's happening I did not do a

00:40:45,080 --> 00:40:58,250
live demo but this should play a video

00:40:49,330 --> 00:41:05,420
maybe you can do it man even video live

00:40:58,250 --> 00:41:08,150
demos don't work wow that is a present I

00:41:05,420 --> 00:41:13,609
can't even change the next slide now x

00:41:08,150 --> 00:41:20,359
if i click here to do fundamentally

00:41:13,609 --> 00:41:24,230
surprising ok if i close this and then

00:41:20,359 --> 00:41:27,590
manually go to the next slide and press

00:41:24,230 --> 00:41:33,590
play ok want to try it one more time

00:41:27,590 --> 00:41:38,119
let's see up I saw the square change yes

00:41:33,590 --> 00:41:40,160
ok so you connect to the the virtual

00:41:38,119 --> 00:41:42,410
machine and it lists a couple different

00:41:40,160 --> 00:41:44,420
virtual hosts you have running you

00:41:42,410 --> 00:41:46,280
attached to one of those and this is

00:41:44,420 --> 00:41:48,740
very similar to gdb if you've ever used

00:41:46,280 --> 00:41:50,300
this it's all command line based you get

00:41:48,740 --> 00:41:53,359
this great help menu it has lots of

00:41:50,300 --> 00:41:55,190
features you can step through stacks you

00:41:53,359 --> 00:41:57,170
can step over things you can continue

00:41:55,190 --> 00:42:00,740
things you can look at frames you can

00:41:57,170 --> 00:42:01,730
look at Global's so this is Mew

00:42:00,740 --> 00:42:04,100
scrolling through trying to figure out

00:42:01,730 --> 00:42:06,250
what I should do so i'm going to set a

00:42:04,100 --> 00:42:08,930
breakpoint in our code right in the

00:42:06,250 --> 00:42:10,050
opening function of our API the API

00:42:08,930 --> 00:42:12,330
handler

00:42:10,050 --> 00:42:14,700
going to set it online 163 so all you do

00:42:12,330 --> 00:42:17,640
is type the name of your class colon the

00:42:14,700 --> 00:42:20,100
line and it sets the breakpoint really

00:42:17,640 --> 00:42:21,750
great type continue I'm going to flip

00:42:20,100 --> 00:42:23,250
over to my terminal make a curl request

00:42:21,750 --> 00:42:24,990
which I forgot to enlarge the font on

00:42:23,250 --> 00:42:27,510
but it's okay trust me i made a curl

00:42:24,990 --> 00:42:29,130
request now we go back and it is hit the

00:42:27,510 --> 00:42:31,410
breakpoint it prints out our source code

00:42:29,130 --> 00:42:33,780
right on the bottom there we can look at

00:42:31,410 --> 00:42:35,460
the local variables in that frame we can

00:42:33,780 --> 00:42:37,260
print out the global variables as well

00:42:35,460 --> 00:42:38,820
which i think i forgot how to do so i

00:42:37,260 --> 00:42:42,630
press help and i scroll back up to see

00:42:38,820 --> 00:42:45,600
how to do it so the app there's local

00:42:42,630 --> 00:42:47,730
frames there's the global ones we can

00:42:45,600 --> 00:42:50,250
step over things we can continue and

00:42:47,730 --> 00:42:54,270
it's all built in and one of the cool

00:42:50,250 --> 00:42:56,820
features of this is who here has ever

00:42:54,270 --> 00:42:58,860
had a problem that only happened in

00:42:56,820 --> 00:43:02,040
production could not reproduce and Dev

00:42:58,860 --> 00:43:04,470
oh wow that might be the highest number

00:43:02,040 --> 00:43:07,380
of hands raised throughout the day right

00:43:04,470 --> 00:43:08,730
we've all had this problem with this

00:43:07,380 --> 00:43:10,980
type of debugger you can set a

00:43:08,730 --> 00:43:13,080
conditional breakpoint so if you have a

00:43:10,980 --> 00:43:14,790
problem that only happens in dev but you

00:43:13,080 --> 00:43:16,620
can reproduce it when you're in

00:43:14,790 --> 00:43:18,600
production or you can reproduce it when

00:43:16,620 --> 00:43:20,880
you're using the website you can

00:43:18,600 --> 00:43:22,980
consetta conditional breakpoint on your

00:43:20,880 --> 00:43:25,940
user so the breakpoint will only trigger

00:43:22,980 --> 00:43:28,400
if you know user ID equals your user and

00:43:25,940 --> 00:43:31,170
then you can step through on a

00:43:28,400 --> 00:43:33,990
production server all the other threads

00:43:31,170 --> 00:43:37,830
will continue to serve requests so

00:43:33,990 --> 00:43:40,170
that's a really powerful tool this isn't

00:43:37,830 --> 00:43:42,810
part of HH vm it's a separate project

00:43:40,170 --> 00:43:45,450
but it uses the HH p.m. parser and its

00:43:42,810 --> 00:43:48,000
ability to produce an AST and abstract

00:43:45,450 --> 00:43:51,060
syntax the syntax tree that's tough to

00:43:48,000 --> 00:43:54,960
say I have no idea how to say it could

00:43:51,060 --> 00:43:57,960
be p triple f it could be don't know but

00:43:54,960 --> 00:44:00,120
it's really cool so it's a suite of

00:43:57,960 --> 00:44:03,000
tools and one of these tools something

00:44:00,120 --> 00:44:06,390
called it s grip and this is syntactic

00:44:03,000 --> 00:44:08,070
grip so s crap doesn't work on the token

00:44:06,390 --> 00:44:10,290
level of source code like regular grip

00:44:08,070 --> 00:44:12,390
does it works on the abstract syntax

00:44:10,290 --> 00:44:15,080
tree so it doesn't care about

00:44:12,390 --> 00:44:17,820
distinctions between does this function

00:44:15,080 --> 00:44:20,130
name have a space between the function

00:44:17,820 --> 00:44:22,230
name and the open paren is the argument

00:44:20,130 --> 00:44:23,820
list separated across multiple lines all

00:44:22,230 --> 00:44:26,970
of that gets put into the a

00:44:23,820 --> 00:44:28,650
t and it's all the same to s crap so for

00:44:26,970 --> 00:44:30,270
example if you want to find all

00:44:28,650 --> 00:44:32,070
indications of foo where the second

00:44:30,270 --> 00:44:34,860
argument is one with any number of

00:44:32,070 --> 00:44:35,790
arguments after it and think about the

00:44:34,860 --> 00:44:39,210
regular expression that would be

00:44:35,790 --> 00:44:41,340
required for this yeah and then think

00:44:39,210 --> 00:44:43,680
about spaces between function names what

00:44:41,340 --> 00:44:47,250
happens if a developer's split the

00:44:43,680 --> 00:44:49,470
argument list across multiple lines it

00:44:47,250 --> 00:44:51,570
can get crazy with s crap this is really

00:44:49,470 --> 00:44:55,440
easy are you passing this expression

00:44:51,570 --> 00:44:57,000
find me all calls to foo the first

00:44:55,440 --> 00:44:58,680
argument can be anything the second

00:44:57,000 --> 00:45:00,960
argument has to be one and there can be

00:44:58,680 --> 00:45:06,420
any number of arguments 0 or more after

00:45:00,960 --> 00:45:08,190
that really powerful find all ampersand

00:45:06,420 --> 00:45:11,580
operators where the left and the right

00:45:08,190 --> 00:45:13,980
hand side of the same the red X for that

00:45:11,580 --> 00:45:15,630
I think it involves that like back calls

00:45:13,980 --> 00:45:20,970
or whatever that thing is reverse

00:45:15,630 --> 00:45:25,050
lookups yeah f script this is really

00:45:20,970 --> 00:45:27,450
easy find me anything where the first

00:45:25,050 --> 00:45:32,160
thing is something at an end and then

00:45:27,450 --> 00:45:33,870
the next thing is the same thing you can

00:45:32,160 --> 00:45:36,090
even use the peeve our option to print

00:45:33,870 --> 00:45:37,650
out all those values not that anyone

00:45:36,090 --> 00:45:39,480
would hopefully ever actually write code

00:45:37,650 --> 00:45:42,960
like this but you could see where

00:45:39,480 --> 00:45:44,610
something like this would be powerful so

00:45:42,960 --> 00:45:47,150
again find all coupe calls the foo of

00:45:44,610 --> 00:45:49,980
the first argument is one very simple

00:45:47,150 --> 00:45:52,440
find all method calls add prepare bowl

00:45:49,980 --> 00:45:53,730
with any number of arguments so a method

00:45:52,440 --> 00:45:56,370
call is different from a function call a

00:45:53,730 --> 00:45:59,250
method call happens on an object so here

00:45:56,370 --> 00:46:01,710
you just say grab me an object and if it

00:45:59,250 --> 00:46:03,450
has ADD prepare a bowl called on it with

00:46:01,710 --> 00:46:05,940
any number of arguments show me where

00:46:03,450 --> 00:46:08,190
that is and the the arrow can be on the

00:46:05,940 --> 00:46:10,530
next line it could be a chain it's

00:46:08,190 --> 00:46:13,860
really great but wouldn't it be even

00:46:10,530 --> 00:46:15,870
better if we could like finding source

00:46:13,860 --> 00:46:17,670
code with the HH p.m. AST is really

00:46:15,870 --> 00:46:20,520
powerful but what if we could change

00:46:17,670 --> 00:46:23,280
source code with the HH tmht what if we

00:46:20,520 --> 00:46:25,020
could write a refactoring using the AST

00:46:23,280 --> 00:46:27,240
and it would take place across our

00:46:25,020 --> 00:46:31,080
entire code base doesn't matter how the

00:46:27,240 --> 00:46:34,740
source code is written enter s patch so

00:46:31,080 --> 00:46:38,880
s patches syntactic patch and this is

00:46:34,740 --> 00:46:40,830
dark magic so say we wanted to remove

00:46:38,880 --> 00:46:44,550
the second argument from all indications

00:46:40,830 --> 00:46:46,170
of function foo this would be terribly

00:46:44,550 --> 00:46:47,790
there's probably some said command that

00:46:46,170 --> 00:46:49,260
would get most of them but you wouldn't

00:46:47,790 --> 00:46:50,790
really in your heart of hearts you

00:46:49,260 --> 00:46:51,960
wouldn't really trust that you did it

00:46:50,790 --> 00:46:54,420
right so you would still have to

00:46:51,960 --> 00:46:59,790
manually test everything that's patch

00:46:54,420 --> 00:47:01,950
this is really easy so just like a

00:46:59,790 --> 00:47:04,680
regular patch find foo get the second

00:47:01,950 --> 00:47:06,630
argument take the get the first argument

00:47:04,680 --> 00:47:08,460
take the second one delete it and close

00:47:06,630 --> 00:47:13,830
it off and this will make that change

00:47:08,460 --> 00:47:16,500
across your entire code base so s patch

00:47:13,830 --> 00:47:18,210
you just run that with a patch and you

00:47:16,500 --> 00:47:20,540
can even do things like rename a

00:47:18,210 --> 00:47:23,400
function with any number of arguments

00:47:20,540 --> 00:47:29,030
it's just this minus foo replace it with

00:47:23,400 --> 00:47:32,070
bar really cool so that's the p triple F

00:47:29,030 --> 00:47:34,470
tools this is a separate repo you don't

00:47:32,070 --> 00:47:35,880
need to use HH vm to use these tools you

00:47:34,470 --> 00:47:39,690
just need to install it and it will use

00:47:35,880 --> 00:47:41,310
the parser internally this is hot off

00:47:39,690 --> 00:47:45,300
the press I figure out how to do this

00:47:41,310 --> 00:47:51,330
yesterday anyone use the Linux tool perf

00:47:45,300 --> 00:47:53,910
before try to yeah me too so perf is

00:47:51,330 --> 00:47:55,560
something that shows you at least the

00:47:53,910 --> 00:47:59,400
way I was using it I've only started

00:47:55,560 --> 00:48:03,119
using it this week what percent for each

00:47:59,400 --> 00:48:05,600
function usually C or C++ functions what

00:48:03,119 --> 00:48:11,340
percentage of CPU instructions are

00:48:05,600 --> 00:48:13,890
caused by that instruction of command HH

00:48:11,340 --> 00:48:16,470
vm it turns out rights PHP functions

00:48:13,890 --> 00:48:18,960
into memory just like C and C++

00:48:16,470 --> 00:48:22,260
functions which means that you can use

00:48:18,960 --> 00:48:25,109
perf to see what function calls are

00:48:22,260 --> 00:48:26,940
taking the most time the most cpu time

00:48:25,109 --> 00:48:29,640
in your application this is really

00:48:26,940 --> 00:48:32,100
powerful I couldn't login to our web

00:48:29,640 --> 00:48:33,180
servers to get a bigger view of this so

00:48:32,100 --> 00:48:37,950
this is what it looks like I'm going to

00:48:33,180 --> 00:48:42,359
try to zoom in here so here we see this

00:48:37,950 --> 00:48:44,700
this thing HP HP f sort this is the HH

00:48:42,359 --> 00:48:47,100
vm implementation of sort and we can see

00:48:44,700 --> 00:48:48,010
it's taking twelve percent of the cpu

00:48:47,100 --> 00:48:50,380
time on the left

00:48:48,010 --> 00:48:54,520
and if you drill into that you can see

00:48:50,380 --> 00:48:56,680
what PHP function is calling hom sort so

00:48:54,520 --> 00:48:59,770
in our case it's part of our DB

00:48:56,680 --> 00:49:02,470
connection class and so here is a much

00:48:59,770 --> 00:49:05,410
bigger simplified version of that twelve

00:49:02,470 --> 00:49:08,800
percent of CPU time is spent calling HH

00:49:05,410 --> 00:49:10,840
pm's implementation of sort and that is

00:49:08,800 --> 00:49:12,910
triggered most of the time it shows

00:49:10,840 --> 00:49:14,860
percentages so in our case ninety-nine

00:49:12,910 --> 00:49:17,380
percent of the time by that function

00:49:14,860 --> 00:49:19,170
name twelve percent of CPU time if we

00:49:17,380 --> 00:49:24,100
can cut that down by half that's a

00:49:19,170 --> 00:49:26,920
measurable win on our throughput so

00:49:24,100 --> 00:49:28,690
lessons learned just to recap if you're

00:49:26,920 --> 00:49:31,060
running an old operating system and you

00:49:28,690 --> 00:49:34,840
want to use HH vm you're going to have a

00:49:31,060 --> 00:49:37,960
bad time keying traffic is a super power

00:49:34,840 --> 00:49:39,970
it was very powerful to just spin up HH

00:49:37,960 --> 00:49:42,340
vm throw some traffic at it see what

00:49:39,970 --> 00:49:46,570
breaks and not worry about breaking our

00:49:42,340 --> 00:49:50,830
experience for our users HH vm is rock

00:49:46,570 --> 00:49:52,870
solid extensions sometimes aren't this

00:49:50,830 --> 00:49:54,040
is rapidly changing like I said Facebook

00:49:52,870 --> 00:49:56,850
just open source some of their

00:49:54,040 --> 00:50:00,160
implementations of internal extensions

00:49:56,850 --> 00:50:02,200
wikipedia and box and x 2 are all using

00:50:00,160 --> 00:50:05,920
HH vm so this will change but just be

00:50:02,200 --> 00:50:07,690
aware for now threads are hard be

00:50:05,920 --> 00:50:09,730
careful HH p.m. is threaded not

00:50:07,690 --> 00:50:11,440
processed based watch out what functions

00:50:09,730 --> 00:50:13,600
you call what extensions you include

00:50:11,440 --> 00:50:18,970
what libraries those extensions include

00:50:13,600 --> 00:50:20,770
and tooling is very powerful tooling we

00:50:18,970 --> 00:50:21,970
saw in a couple of presentations so far

00:50:20,770 --> 00:50:23,740
tooling can be the difference between

00:50:21,970 --> 00:50:26,920
something that your brain can't

00:50:23,740 --> 00:50:29,050
understand is something that it can so

00:50:26,920 --> 00:50:31,570
do run a newer linux distribution do

00:50:29,050 --> 00:50:33,700
ramp up your HH vm migration slowly

00:50:31,570 --> 00:50:35,830
don't trust that extensions are a

00:50:33,700 --> 00:50:37,780
hundred percent good and don't assume

00:50:35,830 --> 00:50:40,960
that processors are like threads like i

00:50:37,780 --> 00:50:42,970
did a real quick aside on the future who

00:50:40,960 --> 00:50:47,200
here was at sunshine PHP a couple weeks

00:50:42,970 --> 00:50:49,480
ago anyone Rasmus gave a great talk on

00:50:47,200 --> 00:50:51,940
the future of PHP he's showed this is a

00:50:49,480 --> 00:50:54,400
graph of PHP seven performance over the

00:50:51,940 --> 00:50:55,900
past year it's been getting better and

00:50:54,400 --> 00:50:58,990
better and better it will continue to

00:50:55,900 --> 00:51:01,660
get better he bench mark PHP seven

00:50:58,990 --> 00:51:04,530
against past versions of PHP and HH vm

00:51:01,660 --> 00:51:09,039
page b7 is super competitive sometimes

00:51:04,530 --> 00:51:12,569
even better PHP be it's better mediawiki

00:51:09,039 --> 00:51:14,890
HH vm comes out ahead probably because

00:51:12,569 --> 00:51:18,670
the HH p.m. team spent a lot of time

00:51:14,890 --> 00:51:20,109
optimizing for media wicking so opencart

00:51:18,670 --> 00:51:22,660
again it's sort of neck and neck between

00:51:20,109 --> 00:51:29,470
these two environments so what does the

00:51:22,660 --> 00:51:32,049
future hold no one knows but we are able

00:51:29,470 --> 00:51:35,230
to react more quickly now we have a foot

00:51:32,049 --> 00:51:38,710
in each of these and we are better

00:51:35,230 --> 00:51:41,109
prepared to react so this sort of PHP

00:51:38,710 --> 00:51:42,609
performance arms race is going to be

00:51:41,109 --> 00:51:44,260
great for everyone it's going to be

00:51:42,609 --> 00:51:47,559
great for PHP user is going to be great

00:51:44,260 --> 00:51:48,880
for HH vm users i'm really excited to

00:51:47,559 --> 00:51:52,960
see what's going to happen the next year

00:51:48,880 --> 00:51:54,280
Facebook has already announced changes

00:51:52,960 --> 00:51:56,680
they're making to there just-in-time

00:51:54,280 --> 00:51:59,170
compiler next year including using llvm

00:51:56,680 --> 00:52:00,700
and some memory optimizations so I'm

00:51:59,170 --> 00:52:04,390
really excited to see what happens here

00:52:00,700 --> 00:52:07,630
this was not just me after I got back

00:52:04,390 --> 00:52:10,299
from Dublin and dried off a lot of these

00:52:07,630 --> 00:52:12,369
people helped me at Etsy and I special

00:52:10,299 --> 00:52:14,589
thanks to the Facebook folks who took a

00:52:12,369 --> 00:52:17,829
lot of time out of their day on IRC an

00:52:14,589 --> 00:52:20,349
email in person especially Sarah Goldman

00:52:17,829 --> 00:52:22,359
Paul Tarjan Josh watzmann they're great

00:52:20,349 --> 00:52:24,700
the HH p.m. IRC Channel and free note is

00:52:22,359 --> 00:52:26,980
super responsive I've learned a lot by

00:52:24,700 --> 00:52:29,049
hanging out there so thanks to all these

00:52:26,980 --> 00:52:31,170
folks and I'd be happy to take any

00:52:29,049 --> 00:52:34,170
questions and please I love feedback

00:52:31,170 --> 00:52:34,170
thank

00:52:53,019 --> 00:53:01,299
hi I'm you said you're using both now

00:52:57,099 --> 00:53:03,849
yep if you switch mostly to h 8 p.m. or

00:53:01,299 --> 00:53:07,329
you still running more service in PHP

00:53:03,849 --> 00:53:09,309
our internal API cluster which is the

00:53:07,329 --> 00:53:11,109
cluster that those bespoke endpoints fan

00:53:09,309 --> 00:53:13,059
out to which is where we are seeing the

00:53:11,109 --> 00:53:15,519
most growth in our requests per second

00:53:13,059 --> 00:53:17,429
is HH p.m. and we have not begun to

00:53:15,519 --> 00:53:19,390
transition and the other services yet

00:53:17,429 --> 00:53:21,969
but it's something we're looking at

00:53:19,390 --> 00:53:23,919
we're also sort of hedging our bets with

00:53:21,969 --> 00:53:25,769
a PHP 7 thing because that might prove

00:53:23,919 --> 00:53:28,689
to be an easier transition especially as

00:53:25,769 --> 00:53:30,219
it turns out that our web servers that

00:53:28,689 --> 00:53:32,229
create the website they use some other

00:53:30,219 --> 00:53:35,199
extensions that might be a little

00:53:32,229 --> 00:53:36,609
trickier to you know compile for us so

00:53:35,199 --> 00:53:38,589
we're a little bit hedging our bets but

00:53:36,609 --> 00:53:40,479
i would say in the next year we'll

00:53:38,589 --> 00:53:42,369
definitely have made a decision and gone

00:53:40,479 --> 00:53:43,779
one way or the other because we don't

00:53:42,369 --> 00:53:52,239
want to have to lease more space in the

00:53:43,779 --> 00:53:54,789
data center i would like to ask if

00:53:52,239 --> 00:53:58,630
there's feature partly like language

00:53:54,789 --> 00:54:01,809
feature parity between the atrium normal

00:53:58,630 --> 00:54:05,349
PHP because although he did not support

00:54:01,809 --> 00:54:07,779
nine spaces for example right I i

00:54:05,349 --> 00:54:10,419
believe we don't use namespaces at Etsy

00:54:07,779 --> 00:54:13,719
but I believe that HH vm does support

00:54:10,419 --> 00:54:17,469
namespaces HP HP does not the old HP HP

00:54:13,719 --> 00:54:19,959
compiler didn't and aside from that era

00:54:17,469 --> 00:54:22,209
gate last we haven't found any language

00:54:19,959 --> 00:54:26,019
level incompatibilities between our code

00:54:22,209 --> 00:54:28,209
base and what HH p.m. can run and as as

00:54:26,019 --> 00:54:30,519
they showed up there a lot of the top

00:54:28,209 --> 00:54:32,169
projects on github run HHMM just fine

00:54:30,519 --> 00:54:35,889
even those failing unit tests are

00:54:32,169 --> 00:54:39,399
usually minor things so yeah I in our

00:54:35,889 --> 00:54:46,019
experience it's a very compatible with a

00:54:39,399 --> 00:54:46,019
PHP code base yeah

00:54:46,480 --> 00:54:51,100
that's a pee it's our etsy seller hello

00:54:49,000 --> 00:54:52,570
did you do any other experiments with

00:54:51,100 --> 00:54:55,090
other language types before you did

00:54:52,570 --> 00:55:00,580
proof of concept in HH vm other

00:54:55,090 --> 00:55:03,100
languages besides PHP no so etsy is very

00:55:00,580 --> 00:55:06,850
boring technology-wise we've used PHP

00:55:03,100 --> 00:55:08,380
and apache my sequel forever and not

00:55:06,850 --> 00:55:10,990
only that we don't use any services

00:55:08,380 --> 00:55:12,460
everything is on one repository this

00:55:10,990 --> 00:55:14,200
gets us a lot of benefits as well as

00:55:12,460 --> 00:55:16,810
some downsides but the benefits we want

00:55:14,200 --> 00:55:19,000
to keep our it's easy for a developer on

00:55:16,810 --> 00:55:21,340
any product team to move between any

00:55:19,000 --> 00:55:23,920
other whether it's a back-end sort of

00:55:21,340 --> 00:55:26,109
data analysis and collection thing or a

00:55:23,920 --> 00:55:28,420
front end product like the home page

00:55:26,109 --> 00:55:30,520
they can jump between this is great for

00:55:28,420 --> 00:55:31,840
happiness people can get a lot of

00:55:30,520 --> 00:55:34,240
variety in the work it's great for

00:55:31,840 --> 00:55:36,460
debugging if you're on call and you're

00:55:34,240 --> 00:55:37,869
on the back end data analysis team and

00:55:36,460 --> 00:55:41,380
you there's a home page bug you're not

00:55:37,869 --> 00:55:43,359
totally sunk so we do not want to move

00:55:41,380 --> 00:55:45,460
off of PHP we love it it has a lot of

00:55:43,359 --> 00:55:49,570
great scalability benefits that it

00:55:45,460 --> 00:55:51,940
enforces on you we use a lot of scale ax

00:55:49,570 --> 00:55:54,010
and increasingly a little amount of go

00:55:51,940 --> 00:55:57,420
to do a lot of piping between things a

00:55:54,010 --> 00:56:00,130
lot of logging stuff is in go we use

00:55:57,420 --> 00:56:01,720
cascading and scalding for a data

00:56:00,130 --> 00:56:06,010
analysis but all of the product

00:56:01,720 --> 00:56:11,230
development is done in PHP any other

00:56:06,010 --> 00:56:13,410
questions thanks so much thank you very

00:56:11,230 --> 00:56:13,410
much

00:56:16,970 --> 00:56:19,030
you

00:56:25,980 --> 00:56:28,040

YouTube URL: https://www.youtube.com/watch?v=75j1RRxxARI


