Title: Ciaran McNulty - Why Your Test Suite Sucks
Publication date: 2015-04-02
Playlist: PHP UK Conference 2015
Description: 
	Many teams adopt TDD attracted by the promise of a more productive workflow, fewer regressions and higher code quality. Sometimes this goes wrong and these benefits do not materialise, despite a healthy-seeming test suite. In this talk we will look at what the common pitfalls of testing are, why teams fall into these traps, and they can dig themselves out.

http://www.slideshare.net/CiaranMcNulty/why-your-test-suite-sucks
Captions: 
	00:00:00,000 --> 00:00:02,060
you

00:00:05,580 --> 00:00:09,670
before we start I just need to apologize

00:00:07,779 --> 00:00:11,410
I've got a bit of a sore throat so I

00:00:09,670 --> 00:00:13,420
spent this morning planning if it all

00:00:11,410 --> 00:00:15,039
goes wrong with my voice fails I've got

00:00:13,420 --> 00:00:18,939
a kind of mine version of this talk that

00:00:15,039 --> 00:00:21,070
I can do but assuming that's not going

00:00:18,939 --> 00:00:24,610
to happen what I'm going to talk about

00:00:21,070 --> 00:00:26,110
is why your test suite sucks and I when

00:00:24,610 --> 00:00:29,199
I was coming up this title I chose this

00:00:26,110 --> 00:00:32,680
word sucks because it's really childish

00:00:29,199 --> 00:00:34,660
and like unexpressed it's about a kind

00:00:32,680 --> 00:00:36,929
of frustration people can feel when they

00:00:34,660 --> 00:00:39,249
start doing test-driven development

00:00:36,929 --> 00:00:41,829
everything's you know going well it's

00:00:39,249 --> 00:00:43,870
all rainbows and unicorns it's just like

00:00:41,829 --> 00:00:48,280
Kent Beck promised and I'm getting all

00:00:43,870 --> 00:00:50,260
this productivity and as a trainer and a

00:00:48,280 --> 00:00:53,229
coach I come into contact with lots of

00:00:50,260 --> 00:00:55,719
organizations who are doing test-driven

00:00:53,229 --> 00:00:57,749
development and when you're a trainer

00:00:55,719 --> 00:00:59,979
you just see problems a lot of the time

00:00:57,749 --> 00:01:01,510
people have a really good TDD

00:00:59,979 --> 00:01:02,769
implementation tend to not ring you up

00:01:01,510 --> 00:01:07,600
and say we desperately need some

00:01:02,769 --> 00:01:08,920
training so what I see quite a lot its

00:01:07,600 --> 00:01:10,510
team to get into these frustrating

00:01:08,920 --> 00:01:13,840
situations they have some problem with

00:01:10,510 --> 00:01:16,170
TDD they make mistakes everyone makes

00:01:13,840 --> 00:01:17,980
mistakes it's hard to do things right

00:01:16,170 --> 00:01:21,630
and I get to see all these different

00:01:17,980 --> 00:01:21,630
problems across different organizations

00:01:21,960 --> 00:01:30,790
so what talks about really is that don't

00:01:28,120 --> 00:01:32,650
do this people get to these frustrating

00:01:30,790 --> 00:01:34,260
points they have problems they start to

00:01:32,650 --> 00:01:37,330
think maybe TD DS not the right approach

00:01:34,260 --> 00:01:40,210
and then they write a blog post about

00:01:37,330 --> 00:01:41,530
TDD being dead testings rubbish they

00:01:40,210 --> 00:01:45,130
tell all their friends I tried that once

00:01:41,530 --> 00:01:46,390
it didn't work it didn't work for me and

00:01:45,130 --> 00:01:47,710
there's two things I want out of this

00:01:46,390 --> 00:01:49,110
tool one is to kind of encourage

00:01:47,710 --> 00:01:51,820
everyone to try test-driven development

00:01:49,110 --> 00:01:53,170
it really does pay off when you start

00:01:51,820 --> 00:01:56,590
doing it right it gives you all these

00:01:53,170 --> 00:01:58,930
benefits it makes you more productive it

00:01:56,590 --> 00:02:03,070
increases the quality of your code it

00:01:58,930 --> 00:02:04,360
stops bugs and generally when you have

00:02:03,070 --> 00:02:07,840
problems and you feel frustrated the

00:02:04,360 --> 00:02:11,830
problem isn't ddd it's that your test

00:02:07,840 --> 00:02:13,000
suites probably not doing it right just

00:02:11,830 --> 00:02:14,230
to get the temperature of the room can

00:02:13,000 --> 00:02:17,610
put your hands up if using automated

00:02:14,230 --> 00:02:20,050
testing wow

00:02:17,610 --> 00:02:28,180
and now put your hands up if you write

00:02:20,050 --> 00:02:29,769
the test first okay so during this talk

00:02:28,180 --> 00:02:31,690
we're going to go through different

00:02:29,769 --> 00:02:33,700
examples different reasons why your test

00:02:31,690 --> 00:02:35,019
suite might be a problem I'm going to

00:02:33,700 --> 00:02:38,709
talk about how you can get out of that

00:02:35,019 --> 00:02:40,269
situation if you if you've fallen down

00:02:38,709 --> 00:02:43,629
this hole how do you dig your way back

00:02:40,269 --> 00:02:45,670
out again so the secondary purpose apart

00:02:43,629 --> 00:02:49,090
from convincing all that TD DS the right

00:02:45,670 --> 00:02:51,099
thing to do the right way to develop its

00:02:49,090 --> 00:02:52,390
that I hope some of these examples will

00:02:51,099 --> 00:02:53,349
chime with people they'll nudge each

00:02:52,390 --> 00:02:55,630
other and say this is what we were

00:02:53,349 --> 00:02:57,099
talking about yesterday this is that

00:02:55,630 --> 00:02:58,120
thing I was shouting about in the office

00:02:57,099 --> 00:03:02,349
when I said we should stop doing

00:02:58,120 --> 00:03:04,420
test-driven development and the reason

00:03:02,349 --> 00:03:08,739
people feel there's a problem often is

00:03:04,420 --> 00:03:10,060
that it takes time to write tests takes

00:03:08,739 --> 00:03:13,900
time and effort you have to learn how to

00:03:10,060 --> 00:03:16,420
do it it takes you time to do it so as I

00:03:13,900 --> 00:03:18,760
shoot there's a cost involved the value

00:03:16,420 --> 00:03:21,010
you get out of your suite is measured by

00:03:18,760 --> 00:03:23,680
is that costs leading to lots of

00:03:21,010 --> 00:03:25,569
benefits is the time you're investing in

00:03:23,680 --> 00:03:28,780
writing tests leading to better

00:03:25,569 --> 00:03:30,730
productivity is the time you're spending

00:03:28,780 --> 00:03:33,910
writing tests leading to lot's less

00:03:30,730 --> 00:03:36,130
rework is the time you're right spending

00:03:33,910 --> 00:03:40,000
writing tests helping you design much

00:03:36,130 --> 00:03:43,209
much better code if it's not you're not

00:03:40,000 --> 00:03:44,500
getting value out of it they're sweet

00:03:43,209 --> 00:03:46,380
suck when you're not getting these

00:03:44,500 --> 00:03:48,609
benefits you're doing the thing because

00:03:46,380 --> 00:03:50,639
the community has said test-driven

00:03:48,609 --> 00:03:52,359
development is the right way to develop

00:03:50,639 --> 00:03:53,169
but you're not actually getting the

00:03:52,359 --> 00:03:58,329
benefits because you're doing it

00:03:53,169 --> 00:04:00,220
slightly wrong somehow and it sucks when

00:03:58,329 --> 00:04:02,410
you you just feel like you're spending a

00:04:00,220 --> 00:04:03,910
lot of time writing tests like you're

00:04:02,410 --> 00:04:06,669
writing a bit of code you spending a

00:04:03,910 --> 00:04:10,299
really long time writing tests how can

00:04:06,669 --> 00:04:14,519
you make your test easier to maintain so

00:04:10,299 --> 00:04:17,810
first reason your test suite sucks is

00:04:14,519 --> 00:04:19,370
you don't have a test suite

00:04:17,810 --> 00:04:21,820
that's the worst kind of test three is

00:04:19,370 --> 00:04:24,350
the best it's the easiest to maintain

00:04:21,820 --> 00:04:26,270
you don't have any problems on that

00:04:24,350 --> 00:04:31,340
score you're not getting any of the

00:04:26,270 --> 00:04:34,490
value and I think there's a kind of

00:04:31,340 --> 00:04:37,010
growth you go through as a team and it

00:04:34,490 --> 00:04:39,200
is as a team it's more important for

00:04:37,010 --> 00:04:43,580
teams to grow into TD I think that

00:04:39,200 --> 00:04:47,000
individuals and goes through a few

00:04:43,580 --> 00:04:48,139
different phases everyone starts off in

00:04:47,000 --> 00:04:49,880
manual testing this is when you're not

00:04:48,139 --> 00:04:52,130
doing any automated testing at all

00:04:49,880 --> 00:04:54,380
hopefully everyone does manual testing

00:04:52,130 --> 00:04:58,310
at least before they deploy to

00:04:54,380 --> 00:05:00,470
production and then a very natural next

00:04:58,310 --> 00:05:04,639
step is for people to start doing

00:05:00,470 --> 00:05:07,690
automated testing which isn't TDD but i

00:05:04,639 --> 00:05:09,740
think it's often part of the progression

00:05:07,690 --> 00:05:12,260
they then start doing this thing i call

00:05:09,740 --> 00:05:13,280
test first development and then

00:05:12,260 --> 00:05:16,160
eventually they get to this thing called

00:05:13,280 --> 00:05:19,630
test-driven development I'll explain the

00:05:16,160 --> 00:05:19,630
difference between those two in a minute

00:05:20,560 --> 00:05:27,770
stop my alarm so let's look at what

00:05:25,160 --> 00:05:30,620
people start off doing they do my first

00:05:27,770 --> 00:05:32,740
hello world program they enroll in a

00:05:30,620 --> 00:05:36,050
course to learn how to do development I

00:05:32,740 --> 00:05:39,229
don't know where really teaches you to

00:05:36,050 --> 00:05:41,180
do test-driven as your first entry into

00:05:39,229 --> 00:05:43,160
the world of computing very few

00:05:41,180 --> 00:05:46,460
university courses day one say what we

00:05:43,160 --> 00:05:48,979
start with is writing a test so most of

00:05:46,460 --> 00:05:51,830
the time you design it somehow you think

00:05:48,979 --> 00:05:53,810
about what should this code do and often

00:05:51,830 --> 00:05:55,669
you think about what should it how

00:05:53,810 --> 00:05:59,600
should it implement that how should it

00:05:55,669 --> 00:06:03,289
do this thing you then write the code

00:05:59,600 --> 00:06:06,100
that's the easy bit and then you

00:06:03,289 --> 00:06:08,360
manually test it and that testing might

00:06:06,100 --> 00:06:09,770
it might not be a big block at the end

00:06:08,360 --> 00:06:11,870
as you're writing code you're constantly

00:06:09,770 --> 00:06:13,669
having to test it that might be loading

00:06:11,870 --> 00:06:15,560
something into a browser might be

00:06:13,669 --> 00:06:18,320
running a command-line tool finding an

00:06:15,560 --> 00:06:20,240
error not understanding where the era

00:06:18,320 --> 00:06:22,820
came from putting in some VAR dumps and

00:06:20,240 --> 00:06:26,590
exits and all that stuff a lot of time

00:06:22,820 --> 00:06:26,590
is taken up testing

00:06:26,610 --> 00:06:31,430
big organizations are not having people

00:06:28,680 --> 00:06:36,689
whose entire job it is to test stuff

00:06:31,430 --> 00:06:39,090
they're very valuable people so

00:06:36,689 --> 00:06:42,240
typically teams in this situation they

00:06:39,090 --> 00:06:43,409
want to move to automated testing and

00:06:42,240 --> 00:06:48,469
the reasons they want to move to

00:06:43,409 --> 00:06:51,659
automated testing on about any kind of

00:06:48,469 --> 00:06:53,580
advanced ideas about tdg is going to

00:06:51,659 --> 00:06:56,520
make my design or decoupled know it's

00:06:53,580 --> 00:06:58,439
very pragmatic decision they say we keep

00:06:56,520 --> 00:07:00,090
making changes here in this part the

00:06:58,439 --> 00:07:03,900
application miss other part of the

00:07:00,090 --> 00:07:07,860
application breaks it's got a regression

00:07:03,900 --> 00:07:11,370
right it's that familiar to anyone yeah

00:07:07,860 --> 00:07:12,719
nods head that okay or maybe they're

00:07:11,370 --> 00:07:14,219
they're not having these problems but

00:07:12,719 --> 00:07:15,900
they're spending a huge amount of time

00:07:14,219 --> 00:07:18,569
on manual testing either developers

00:07:15,900 --> 00:07:20,460
themselves or their 10 man QA team I

00:07:18,569 --> 00:07:23,360
just spending their time touring through

00:07:20,460 --> 00:07:26,340
checking everything hasn't broken and

00:07:23,360 --> 00:07:28,349
the worst case is that they're doing

00:07:26,340 --> 00:07:30,479
both those things but still bugs end up

00:07:28,349 --> 00:07:33,750
on the production server so you've got

00:07:30,479 --> 00:07:35,699
an issue tracking system there's a nice

00:07:33,750 --> 00:07:39,089
tweet from robert c mart and uncle bob

00:07:35,699 --> 00:07:40,589
recently you said just think about it

00:07:39,089 --> 00:07:42,599
for a second you've got an entire system

00:07:40,589 --> 00:07:44,909
that's built to track all of the defects

00:07:42,599 --> 00:07:46,830
in your application you know what are

00:07:44,909 --> 00:07:49,110
the implications of that you've got so

00:07:46,830 --> 00:07:53,370
many you've had to categorize them and

00:07:49,110 --> 00:07:55,110
prioritize them so this gross growth

00:07:53,370 --> 00:07:57,210
from manual to automated it's normally

00:07:55,110 --> 00:07:59,279
about quality it's normally about we

00:07:57,210 --> 00:08:00,779
want to stop having these bugs or you

00:07:59,279 --> 00:08:03,509
want to spend less time and money

00:08:00,779 --> 00:08:08,339
finding these bugs it's about quality

00:08:03,509 --> 00:08:09,750
external quality of your app and the way

00:08:08,339 --> 00:08:11,009
the team are thinking about is this

00:08:09,750 --> 00:08:13,500
manual testing that we do we should

00:08:11,009 --> 00:08:16,919
automate that it takes time so we should

00:08:13,500 --> 00:08:19,289
make it automatic so during this kind of

00:08:16,919 --> 00:08:20,849
growth phase the way you gain these

00:08:19,289 --> 00:08:22,169
skills it's just about learning tools

00:08:20,849 --> 00:08:25,050
it's about you know here's how you

00:08:22,169 --> 00:08:29,879
configure phpunit here's the different

00:08:25,050 --> 00:08:31,589
ways it can let you test the code so for

00:08:29,879 --> 00:08:33,209
that you need to read tutorials you need

00:08:31,589 --> 00:08:36,089
to get some training you by training for

00:08:33,209 --> 00:08:37,620
me if you like or you read some

00:08:36,089 --> 00:08:39,940
influential blogs that sort of show you

00:08:37,620 --> 00:08:41,860
how to do things watch some videos

00:08:39,940 --> 00:08:45,640
and the way it sticks in an organization

00:08:41,860 --> 00:08:48,010
the way to make this actually work is to

00:08:45,640 --> 00:08:49,270
have team policies in place the team

00:08:48,010 --> 00:08:51,400
decides we're going to cover all our

00:08:49,270 --> 00:08:54,040
code with tests from now on or maybe

00:08:51,400 --> 00:08:56,200
just on this one project everything we

00:08:54,040 --> 00:08:58,480
produce is going to have tests I will

00:08:56,200 --> 00:09:02,190
have some tools that make sure we do

00:08:58,480 --> 00:09:04,780
that will be part of our code review

00:09:02,190 --> 00:09:06,070
will have a code coverage graph thing

00:09:04,780 --> 00:09:07,720
that tells us whether we're doing it

00:09:06,070 --> 00:09:08,860
those kind of things are very useful

00:09:07,720 --> 00:09:12,780
during this phase everyone's just

00:09:08,860 --> 00:09:15,610
learning to use the tools it makes sense

00:09:12,780 --> 00:09:17,680
this is kind of where everyone who only

00:09:15,610 --> 00:09:19,480
answered yes the first question are the

00:09:17,680 --> 00:09:21,100
writing tests because they want to

00:09:19,480 --> 00:09:24,180
automatically verify that their

00:09:21,100 --> 00:09:26,650
application does what they think it does

00:09:24,180 --> 00:09:29,170
so automated testing is very similar to

00:09:26,650 --> 00:09:30,700
the first phase it's the same sequence

00:09:29,170 --> 00:09:32,290
the first two steps the same you think

00:09:30,700 --> 00:09:35,470
about what it's going to do and then you

00:09:32,290 --> 00:09:38,380
write the code that does it instead of

00:09:35,470 --> 00:09:39,820
spending time manually testing it you

00:09:38,380 --> 00:09:41,860
write some tests that automatically test

00:09:39,820 --> 00:09:44,500
it for you and there's big benefits

00:09:41,860 --> 00:09:46,060
already those tests are going to live on

00:09:44,500 --> 00:09:48,130
in the future so you can just rerun them

00:09:46,060 --> 00:09:50,170
again in six months time and it takes

00:09:48,130 --> 00:09:52,390
five seconds to check that everything's

00:09:50,170 --> 00:09:56,860
the same as it was before that's a big

00:09:52,390 --> 00:09:58,690
motivation for most teams the next step

00:09:56,860 --> 00:10:04,000
is to kind of start writing the test

00:09:58,690 --> 00:10:07,330
first the reason people the reason teams

00:10:04,000 --> 00:10:09,040
move towards doing it tests first one is

00:10:07,330 --> 00:10:11,350
that they're influenced by people who do

00:10:09,040 --> 00:10:14,500
talks or write blogs and say this is

00:10:11,350 --> 00:10:17,350
what cool people do the other if they

00:10:14,500 --> 00:10:20,830
start having problems that the test

00:10:17,350 --> 00:10:22,120
reads brittle and hard to maintain and

00:10:20,830 --> 00:10:23,920
often that's we'll talk about it a

00:10:22,120 --> 00:10:25,420
little bit later often that's because

00:10:23,920 --> 00:10:26,710
the test suite is very tied to the

00:10:25,420 --> 00:10:28,780
implementation they've written the code

00:10:26,710 --> 00:10:32,410
first and then they're just testing what

00:10:28,780 --> 00:10:33,400
the code actually does already and you

00:10:32,410 --> 00:10:35,710
hear them say things like maintaining

00:10:33,400 --> 00:10:37,480
the suite is really hard I don't like

00:10:35,710 --> 00:10:38,980
writing the tests afterwards because I

00:10:37,480 --> 00:10:42,700
feel like I'm finished I've written the

00:10:38,980 --> 00:10:44,050
code it works and now my team lead is

00:10:42,700 --> 00:10:45,400
bugging me that I have to write some

00:10:44,050 --> 00:10:47,500
unit tests to cover it so I'm just gonna

00:10:45,400 --> 00:10:51,700
write really crappy tests keep that guy

00:10:47,500 --> 00:10:54,030
happy and this is one of the places

00:10:51,700 --> 00:10:55,620
people can bail out the whole process

00:10:54,030 --> 00:11:02,970
say TDD just doesn't work we tried it

00:10:55,620 --> 00:11:05,250
didn't work so it's get to test test

00:11:02,970 --> 00:11:06,900
first that's more of a case of coaching

00:11:05,250 --> 00:11:08,610
having influential people in the team

00:11:06,900 --> 00:11:11,160
who are going to encourage you to try

00:11:08,610 --> 00:11:12,860
doing the test first or pair with you

00:11:11,160 --> 00:11:16,170
and show you that it does work better

00:11:12,860 --> 00:11:18,210
right and it requires a bit of

00:11:16,170 --> 00:11:19,620
leadership someone to look up to

00:11:18,210 --> 00:11:21,960
mentoring if you were at the keynote

00:11:19,620 --> 00:11:26,310
yesterday you lament all we can show you

00:11:21,960 --> 00:11:27,810
this is the right way to do code but

00:11:26,310 --> 00:11:30,270
just writing the test first isn't the

00:11:27,810 --> 00:11:31,560
end when you're writing test first

00:11:30,270 --> 00:11:35,430
there's this phase where you still

00:11:31,560 --> 00:11:38,220
design and implementation first so

00:11:35,430 --> 00:11:40,170
you're thinking hard about what the code

00:11:38,220 --> 00:11:41,700
should do or you're talking to a

00:11:40,170 --> 00:11:44,160
colleague about it or you're drawing

00:11:41,700 --> 00:11:45,870
something on a whiteboard depending

00:11:44,160 --> 00:11:48,030
whether you're like visual verbal type

00:11:45,870 --> 00:11:49,170
person but you're still sort of thinking

00:11:48,030 --> 00:11:50,400
this is what the code is going to do is

00:11:49,170 --> 00:11:53,700
going to store the stuff internally in

00:11:50,400 --> 00:11:56,730
an array it all this implementation and

00:11:53,700 --> 00:11:57,900
then you write tests that are going to

00:11:56,730 --> 00:12:00,420
test the implementation you've got in

00:11:57,900 --> 00:12:01,980
your head and then after you've written

00:12:00,420 --> 00:12:03,120
the tests then you let yourself write

00:12:01,980 --> 00:12:04,560
the code so you're doing it because

00:12:03,120 --> 00:12:06,780
you've been told test first is the way

00:12:04,560 --> 00:12:08,760
to do it but internally your kind of

00:12:06,780 --> 00:12:13,170
cheating you're designing it first in

00:12:08,760 --> 00:12:16,320
your head and people get surprised I say

00:12:13,170 --> 00:12:19,290
the test Suites still brittle it's still

00:12:16,320 --> 00:12:24,300
hard to maintain the tests ddd doesn't

00:12:19,290 --> 00:12:26,840
work so to get to real true test driven

00:12:24,300 --> 00:12:29,430
from their difficult it just takes time

00:12:26,840 --> 00:12:32,580
the more familiar are the tools the more

00:12:29,430 --> 00:12:34,920
kind of writing the test first is built

00:12:32,580 --> 00:12:36,270
into your own workflow just naturally

00:12:34,920 --> 00:12:39,050
you spend less time thinking about it

00:12:36,270 --> 00:12:40,980
before you get to the test writing phase

00:12:39,050 --> 00:12:42,350
you start off by designing the whole

00:12:40,980 --> 00:12:45,210
thing in writing tests and by the end

00:12:42,350 --> 00:12:46,650
you just write the tests and you write

00:12:45,210 --> 00:12:49,470
tests that don't have an implementation

00:12:46,650 --> 00:12:53,160
and they magically better tests I don't

00:12:49,470 --> 00:12:54,390
quite know how this works but by not

00:12:53,160 --> 00:12:56,370
having thought about how it's going to

00:12:54,390 --> 00:12:58,860
work going straight into writing the

00:12:56,370 --> 00:13:00,830
tests the tests really just express this

00:12:58,860 --> 00:13:04,470
is what the system is supposed to do

00:13:00,830 --> 00:13:07,070
then you implement it and then you don't

00:13:04,470 --> 00:13:09,690
have any problems anymore

00:13:07,070 --> 00:13:12,270
being realistic you have different

00:13:09,690 --> 00:13:14,550
problems problems become more things

00:13:12,270 --> 00:13:15,720
like is my understanding of what the

00:13:14,550 --> 00:13:16,860
system should do the same as the

00:13:15,720 --> 00:13:22,830
customers understanding of what the

00:13:16,860 --> 00:13:24,000
system should do why are estimates

00:13:22,830 --> 00:13:32,820
always wrong that kind of normal

00:13:24,000 --> 00:13:34,920
developer stuff everyone happy so

00:13:32,820 --> 00:13:36,990
growing through those four phases it

00:13:34,920 --> 00:13:39,660
does take time it took me about ten

00:13:36,990 --> 00:13:43,680
years being honest I'm probably a bit

00:13:39,660 --> 00:13:46,920
slow I'll see graduates joining our

00:13:43,680 --> 00:13:48,690
organization now or actually people

00:13:46,920 --> 00:13:50,490
still on the university course doing

00:13:48,690 --> 00:13:52,050
sandwich courses get dropped straight

00:13:50,490 --> 00:13:55,020
into TDD teams and they go through this

00:13:52,050 --> 00:13:59,490
process in about three months it makes

00:13:55,020 --> 00:14:00,690
me really jealous the main thing to take

00:13:59,490 --> 00:14:04,740
from this is the test driven development

00:14:00,690 --> 00:14:06,740
is something that you can get to and its

00:14:04,740 --> 00:14:09,960
really easy it's kind of shocking

00:14:06,740 --> 00:14:11,430
shocking how much easier it is then this

00:14:09,960 --> 00:14:13,710
our overhead of having to like think

00:14:11,430 --> 00:14:15,270
about how things should work first you

00:14:13,710 --> 00:14:22,230
just explain how it should work and then

00:14:15,270 --> 00:14:23,730
everything falls into place so so you

00:14:22,230 --> 00:14:28,050
have alluded to a lot there is another

00:14:23,730 --> 00:14:30,480
reason you're sweet might suck is that

00:14:28,050 --> 00:14:31,650
your testing implementation you can't

00:14:30,480 --> 00:14:33,600
test implementation if you're doing

00:14:31,650 --> 00:14:35,940
test-driven development you haven't

00:14:33,600 --> 00:14:37,740
haven't made it yet but a lot of the

00:14:35,940 --> 00:14:39,150
time in real life people writing tests

00:14:37,740 --> 00:14:40,590
and they've either written the code

00:14:39,150 --> 00:14:42,540
first all they've really thought hard

00:14:40,590 --> 00:14:47,880
about how it's supposed to work and that

00:14:42,540 --> 00:14:51,480
will make your tests worse so an example

00:14:47,880 --> 00:14:53,070
is mocking queries just to explain some

00:14:51,480 --> 00:14:55,350
of the terms their query is a method

00:14:53,070 --> 00:14:57,470
that returns data you can think of

00:14:55,350 --> 00:14:59,580
methods are splitting into two camps

00:14:57,470 --> 00:15:01,530
there either telling someone to do

00:14:59,580 --> 00:15:07,170
something or they're asking for some

00:15:01,530 --> 00:15:08,430
data right like posting get in HTTP so a

00:15:07,170 --> 00:15:11,330
query is it something where you're just

00:15:08,430 --> 00:15:11,330
asking for some value

00:15:12,649 --> 00:15:16,860
mocking is when you really care did this

00:15:15,330 --> 00:15:18,870
method get called how many times did it

00:15:16,860 --> 00:15:20,450
get called tell me all the details of

00:15:18,870 --> 00:15:25,020
did did that method definitely get

00:15:20,450 --> 00:15:27,750
invoked and specifying that detail with

00:15:25,020 --> 00:15:31,820
a query makes change harder show an

00:15:27,750 --> 00:15:33,899
example this is a PHP unit test case

00:15:31,820 --> 00:15:37,110
it's testing something that kind of

00:15:33,899 --> 00:15:39,029
greets people says hello to them so

00:15:37,110 --> 00:15:43,320
we're getting a user object which is a

00:15:39,029 --> 00:15:46,020
double we're saying the user objects

00:15:43,320 --> 00:15:47,430
going to get called once the method get

00:15:46,020 --> 00:15:50,790
name is going to get called once and

00:15:47,430 --> 00:15:52,620
it's going to turn the value Kieran then

00:15:50,790 --> 00:15:54,660
I invoke the greeter which is the object

00:15:52,620 --> 00:15:57,029
we're testing then I check that the

00:15:54,660 --> 00:15:59,490
thing I got back was hello Kieran this

00:15:57,029 --> 00:16:00,600
is a very natural test to write if

00:15:59,490 --> 00:16:02,130
you've already written the greeter

00:16:00,600 --> 00:16:04,290
object you're literally looking at what

00:16:02,130 --> 00:16:07,950
happens inside the object you're saying

00:16:04,290 --> 00:16:10,740
ok it calls get name once it returns ok

00:16:07,950 --> 00:16:15,360
fine but what's going to change in

00:16:10,740 --> 00:16:20,399
future the main problem of this is the

00:16:15,360 --> 00:16:23,550
mocking which is this expect slime wife

00:16:20,399 --> 00:16:26,730
I put that in my test is that a

00:16:23,550 --> 00:16:29,480
requirement the test says that it's

00:16:26,730 --> 00:16:32,430
testing that it greets people by name

00:16:29,480 --> 00:16:34,110
the title of the test when I look at the

00:16:32,430 --> 00:16:35,970
code of the test it's checking that it

00:16:34,110 --> 00:16:38,760
greets people by name and it only asks

00:16:35,970 --> 00:16:42,420
them their name once that's far too

00:16:38,760 --> 00:16:45,120
restrictive most of the time with a

00:16:42,420 --> 00:16:47,040
query like get name here is a query you

00:16:45,120 --> 00:16:49,589
don't care if someone rewrites the code

00:16:47,040 --> 00:16:53,339
later so it calls get name twice it

00:16:49,589 --> 00:16:57,180
shouldn't break the test right an

00:16:53,339 --> 00:16:58,680
example might be if an user's name could

00:16:57,180 --> 00:17:01,260
be empty they might have an if statement

00:16:58,680 --> 00:17:04,860
those if user get name is empty do this

00:17:01,260 --> 00:17:06,209
otherwise say hello user get name so now

00:17:04,860 --> 00:17:09,929
it's called twice this test shouldn't

00:17:06,209 --> 00:17:11,850
fail you can just take that line out as

00:17:09,929 --> 00:17:15,449
of phpunit for you can just take that

00:17:11,850 --> 00:17:19,650
line out before that you had to do user

00:17:15,449 --> 00:17:20,939
expect any this is a much better test

00:17:19,650 --> 00:17:23,669
it's actually testing the thing that I

00:17:20,939 --> 00:17:26,010
care about if there's a user whose name

00:17:23,669 --> 00:17:28,440
is Kiran and you greet them

00:17:26,010 --> 00:17:30,420
it says hello Kieran it's a very small

00:17:28,440 --> 00:17:35,760
change but it makes the whole suite much

00:17:30,420 --> 00:17:37,110
more impervious to future problems this

00:17:35,760 --> 00:17:40,200
is really a symptom of looking at the

00:17:37,110 --> 00:17:41,730
code writing the code first so yes it

00:17:40,200 --> 00:17:47,250
only gets called once I'll capture that

00:17:41,730 --> 00:17:48,810
in my test so don't mock queries when

00:17:47,250 --> 00:17:50,580
you're adding an expectation like this

00:17:48,810 --> 00:17:53,640
is going to get called once evaluate do

00:17:50,580 --> 00:17:58,170
I care that it's called once it was

00:17:53,640 --> 00:17:59,970
called twice should this test fail you

00:17:58,170 --> 00:18:02,030
probably don't really quit really care

00:17:59,970 --> 00:18:04,830
you're anybody care of this like some

00:18:02,030 --> 00:18:08,580
performance thing going on that's not

00:18:04,830 --> 00:18:11,280
really what testing is about another

00:18:08,580 --> 00:18:13,410
example is testing call sequence this is

00:18:11,280 --> 00:18:16,020
common in tools that allow this kind of

00:18:13,410 --> 00:18:18,330
thing or provide nice tools for doing it

00:18:16,020 --> 00:18:22,020
but most of time you don't care what

00:18:18,330 --> 00:18:23,730
order method calls happen in but people

00:18:22,020 --> 00:18:25,260
get tempted to capture what order method

00:18:23,730 --> 00:18:26,760
calls are happening because they've

00:18:25,260 --> 00:18:30,150
looked at what order they happen in in

00:18:26,760 --> 00:18:33,090
the real code so here we're sort of

00:18:30,150 --> 00:18:35,480
mocking sorry we're stubbing a thing

00:18:33,090 --> 00:18:38,820
called a price list and we're telling it

00:18:35,480 --> 00:18:41,070
first time you asked for a price return

00:18:38,820 --> 00:18:44,340
hundred twenty second time you asked for

00:18:41,070 --> 00:18:47,810
a price we turn 200 add these two

00:18:44,340 --> 00:18:47,810
products and get their basket total

00:18:49,160 --> 00:18:53,220
again this is a form of brittleness if

00:18:51,540 --> 00:18:55,370
the met if the price is accrued in the

00:18:53,220 --> 00:18:57,660
different order things might break

00:18:55,370 --> 00:19:00,390
phpunit product provides a better way of

00:18:57,660 --> 00:19:01,770
doing this so we're saying return this

00:19:00,390 --> 00:19:04,050
value map when you're asked for the

00:19:01,770 --> 00:19:05,700
price of milk return this value when you

00:19:04,050 --> 00:19:10,890
ask for the price of bread return this

00:19:05,700 --> 00:19:12,960
other value people only really know like

00:19:10,890 --> 00:19:15,330
arvit is the sequence of method calls

00:19:12,960 --> 00:19:16,530
mission-critical probably not there's

00:19:15,330 --> 00:19:17,790
two things I want this method to do

00:19:16,530 --> 00:19:20,450
there's two things I want to do this

00:19:17,790 --> 00:19:22,440
object to do when I invoke this method

00:19:20,450 --> 00:19:28,260
this thing in this thing I don't really

00:19:22,440 --> 00:19:30,000
care what order they're in so specifying

00:19:28,260 --> 00:19:31,350
the order of execution of method calls

00:19:30,000 --> 00:19:34,200
is something you should be very very

00:19:31,350 --> 00:19:36,360
wary of if you ever put that in you need

00:19:34,200 --> 00:19:38,040
to evaluate yes for this situation we do

00:19:36,360 --> 00:19:39,370
really care that these are called in

00:19:38,040 --> 00:19:41,930
this sequence

00:19:39,370 --> 00:19:49,190
it has to be initialized before we start

00:19:41,930 --> 00:19:51,850
doing stuff for instance in summary just

00:19:49,190 --> 00:19:56,360
test the behavior you really care about

00:19:51,850 --> 00:19:58,280
don't test the implementation if you're

00:19:56,360 --> 00:20:01,400
in that kind of tests afterwards phase

00:19:58,280 --> 00:20:04,010
at the moment the best way to do it is

00:20:01,400 --> 00:20:07,070
to write the test and then close their

00:20:04,010 --> 00:20:09,500
code and then look at the test focus on

00:20:07,070 --> 00:20:14,450
sa is everything in this test needed a

00:20:09,500 --> 00:20:16,490
my over testing over testing these two

00:20:14,450 --> 00:20:18,830
brittleness when you make changes and it

00:20:16,490 --> 00:20:22,310
makes you more time you have to type

00:20:18,830 --> 00:20:25,630
more stuff in tests will get much more

00:20:22,310 --> 00:20:29,420
readable the more you take out of them

00:20:25,630 --> 00:20:30,830
but the end game really is there if you

00:20:29,420 --> 00:20:33,560
haven't written the code yet it's a lot

00:20:30,830 --> 00:20:34,700
harder to fall into these traps because

00:20:33,560 --> 00:20:37,430
you don't know what other things are

00:20:34,700 --> 00:20:43,550
called in you don't know how many times

00:20:37,430 --> 00:20:46,730
method is going to be cool right third

00:20:43,550 --> 00:20:50,890
reason your test suite sucks it's

00:20:46,730 --> 00:20:53,120
because your design sucks very commonly

00:20:50,890 --> 00:20:54,830
when I look at teams who are having

00:20:53,120 --> 00:20:56,930
problems with a test suite and

00:20:54,830 --> 00:20:59,830
attributing lots of problems of the test

00:20:56,930 --> 00:21:01,550
three is so hard to test this stuff

00:20:59,830 --> 00:21:05,440
really it's because they've got a really

00:21:01,550 --> 00:21:05,440
crappy design to be honest

00:21:07,440 --> 00:21:12,450
I'm not really sure why this is but if

00:21:10,710 --> 00:21:16,799
you list out the attributes that make

00:21:12,450 --> 00:21:18,629
code testable and you list out the code

00:21:16,799 --> 00:21:22,830
their tributes that make code a good

00:21:18,629 --> 00:21:25,230
design they're the same things I haven't

00:21:22,830 --> 00:21:29,419
really got a theory about why but it

00:21:25,230 --> 00:21:33,120
means the objects are easily isolated

00:21:29,419 --> 00:21:34,350
objects do one thing well very clear API

00:21:33,120 --> 00:21:35,970
there's fewer dependencies between

00:21:34,350 --> 00:21:37,889
objects these are all things that you

00:21:35,970 --> 00:21:39,330
talk to someone who's big on arrow

00:21:37,889 --> 00:21:40,710
design they'll be nodding away saying

00:21:39,330 --> 00:21:44,759
yep that's what your code base should

00:21:40,710 --> 00:21:48,000
look like so one example of a problem

00:21:44,759 --> 00:21:50,730
people complain about it's painful to

00:21:48,000 --> 00:21:51,960
have to double all these objects to test

00:21:50,730 --> 00:21:53,429
stuff in isolation I have to make

00:21:51,960 --> 00:21:56,490
doubles of all the other objects it

00:21:53,429 --> 00:21:58,080
might talk to the problem in that

00:21:56,490 --> 00:22:01,110
sentence is all the other objects that

00:21:58,080 --> 00:22:03,000
it talks to when you're feeling that

00:22:01,110 --> 00:22:05,370
pain of having to get too many objects

00:22:03,000 --> 00:22:06,720
ready to just to test something it means

00:22:05,370 --> 00:22:12,269
your object talks to too many other

00:22:06,720 --> 00:22:15,929
people people God and being programming

00:22:12,269 --> 00:22:18,750
for too long this is an example from a

00:22:15,929 --> 00:22:19,919
PHP in its setup method for instance I'm

00:22:18,750 --> 00:22:23,070
trying to test something called an

00:22:19,919 --> 00:22:25,320
invoice processor but to do that I'm

00:22:23,070 --> 00:22:27,659
having to create a double of the charge

00:22:25,320 --> 00:22:31,740
rules object the charge types object and

00:22:27,659 --> 00:22:34,830
the notifier object and this is just the

00:22:31,740 --> 00:22:36,299
set up inside each of my test cases I'm

00:22:34,830 --> 00:22:37,919
probably gonna have to stub different

00:22:36,299 --> 00:22:39,659
return values from those three objects

00:22:37,919 --> 00:22:42,269
for each one of the scenarios I'm going

00:22:39,659 --> 00:22:43,830
to test and this is where people feel

00:22:42,269 --> 00:22:48,059
like our this is painful i'm having to

00:22:43,830 --> 00:22:49,529
learn this api it's not the fault of PHP

00:22:48,059 --> 00:22:53,159
units mot library it's not great but

00:22:49,529 --> 00:22:55,080
it's good enough the problem is that

00:22:53,159 --> 00:22:57,450
your object actually does depend on

00:22:55,080 --> 00:23:00,120
three other objects and a lot of the

00:22:57,450 --> 00:23:02,009
scenarios you're testing do involve it

00:23:00,120 --> 00:23:05,009
talking to these three other guys free

00:23:02,009 --> 00:23:08,009
might seem like a low number freeze

00:23:05,009 --> 00:23:09,899
probably the maximum right feel happy

00:23:08,009 --> 00:23:13,259
that an object's talking to those other

00:23:09,899 --> 00:23:14,759
objects so at the point you start

00:23:13,259 --> 00:23:17,190
feeling this problem you start feeling

00:23:14,759 --> 00:23:20,190
like I'm mocking too much of doubling

00:23:17,190 --> 00:23:21,360
too many things just look at the object

00:23:20,190 --> 00:23:23,250
take a minute to stop

00:23:21,360 --> 00:23:27,200
a does it need to talk to all of these

00:23:23,250 --> 00:23:29,730
things looking here an invoice processor

00:23:27,200 --> 00:23:32,760
charge rules and charge types it sounds

00:23:29,730 --> 00:23:35,760
like invoice processing the notifier I'm

00:23:32,760 --> 00:23:38,970
not sure about maybe the way I can

00:23:35,760 --> 00:23:41,100
remove that dependency maybe there's a

00:23:38,970 --> 00:23:43,290
way I can change it into an event or

00:23:41,100 --> 00:23:48,570
change it into an observer or do it via

00:23:43,290 --> 00:23:51,150
decoration there's a design solution so

00:23:48,570 --> 00:23:52,890
too many doubles in your test very

00:23:51,150 --> 00:23:54,870
simply means your class talks to too

00:23:52,890 --> 00:23:56,820
many other objects if you only have

00:23:54,870 --> 00:23:59,190
objects that talk to two other one or

00:23:56,820 --> 00:24:07,500
two other objects there's a lot less

00:23:59,190 --> 00:24:09,570
doubling this is what I've seen quite a

00:24:07,500 --> 00:24:12,630
lot recently stubs returning stubs so

00:24:09,570 --> 00:24:15,419
stub is a double that returns a canned

00:24:12,630 --> 00:24:20,700
value like when we told the user when

00:24:15,419 --> 00:24:23,040
get name is called return Kieran I seen

00:24:20,700 --> 00:24:25,890
test Suites the problematic stubs

00:24:23,040 --> 00:24:29,490
returning other stubs it's normally some

00:24:25,890 --> 00:24:31,020
problem with dependencies too many

00:24:29,490 --> 00:24:33,570
doubles is means you've got too many

00:24:31,020 --> 00:24:34,919
dependencies stubs returning stubs

00:24:33,570 --> 00:24:40,640
normally means you've got the wrong

00:24:34,919 --> 00:24:45,750
dependencies here's an example of

00:24:40,640 --> 00:24:48,390
something that notifies users it's going

00:24:45,750 --> 00:24:49,740
to take a user and a contact on an email

00:24:48,390 --> 00:24:53,419
and an emailer so that's already a

00:24:49,740 --> 00:24:53,419
warning sign there's too much stuff oh

00:24:54,500 --> 00:25:01,230
sorry I've switched over to PHP spec so

00:24:58,830 --> 00:25:03,600
this is how you get doubles in PHP spec

00:25:01,230 --> 00:25:05,700
you just ask for them in their type int

00:25:03,600 --> 00:25:07,950
which is a problem because it encourages

00:25:05,700 --> 00:25:11,760
people to ask for too many doubles it's

00:25:07,950 --> 00:25:14,669
too easy considering making it harder

00:25:11,760 --> 00:25:15,929
somehow and we say the object we're

00:25:14,669 --> 00:25:21,059
testing is going to be constructed with

00:25:15,929 --> 00:25:22,770
the email and when we notify the user so

00:25:21,059 --> 00:25:23,669
you call methods on this as if you're

00:25:22,770 --> 00:25:26,160
calling them on the object you're

00:25:23,669 --> 00:25:29,700
testing so what I call nodes for this

00:25:26,160 --> 00:25:31,050
user the email is sent to method should

00:25:29,700 --> 00:25:33,059
have been called with this parameter

00:25:31,050 --> 00:25:35,070
that's a very simple test then this is

00:25:33,059 --> 00:25:39,480
block in the middle and it looks messy

00:25:35,070 --> 00:25:41,399
it looks confusing what we're doing here

00:25:39,480 --> 00:25:43,559
is we're stub stubbing stubs to return

00:25:41,399 --> 00:25:45,600
stubs so saying when you ask the user

00:25:43,559 --> 00:25:48,480
get contact return the contact object

00:25:45,600 --> 00:25:53,070
when you ask contact forget email return

00:25:48,480 --> 00:25:54,659
the email object the reason we've had to

00:25:53,070 --> 00:25:58,500
do this messy thing is because our code

00:25:54,659 --> 00:26:02,279
looks like this then at marcello's talk

00:25:58,500 --> 00:26:03,509
yesterday talked about design mention

00:26:02,279 --> 00:26:08,789
this kind of thing this is sometimes

00:26:03,509 --> 00:26:10,620
brought a train wreck we're asking to

00:26:08,789 --> 00:26:13,980
notify user and then we're saying hey

00:26:10,620 --> 00:26:16,110
user give me your contact and then we're

00:26:13,980 --> 00:26:17,850
saying to the contact a contact give me

00:26:16,110 --> 00:26:21,600
your email and then we're doing the

00:26:17,850 --> 00:26:25,230
thing we really wanted to do the result

00:26:21,600 --> 00:26:27,000
is that this this method really has four

00:26:25,230 --> 00:26:29,009
dependencies it depends on user an

00:26:27,000 --> 00:26:31,259
emailer which are obvious from looking

00:26:29,009 --> 00:26:32,940
at it but there's also some hidden

00:26:31,259 --> 00:26:35,820
dependencies it depends on the contact

00:26:32,940 --> 00:26:39,480
object it has to know that contact has a

00:26:35,820 --> 00:26:44,039
get email or method if that changes in

00:26:39,480 --> 00:26:46,980
contact this breaks so this messy

00:26:44,039 --> 00:26:47,909
stubbing here those two lines what

00:26:46,980 --> 00:26:51,450
they're telling us is that the

00:26:47,909 --> 00:26:57,750
dependencies wrong notified doesn't want

00:26:51,450 --> 00:27:00,269
a user object possibly you can change it

00:26:57,750 --> 00:27:02,190
by taking a user object and modifying

00:27:00,269 --> 00:27:03,960
the emailer so you can shift the

00:27:02,190 --> 00:27:06,960
dependency on the emailer make things

00:27:03,960 --> 00:27:10,139
cleaner or you can say the notified just

00:27:06,960 --> 00:27:12,960
gets an email instead of giving it a

00:27:10,139 --> 00:27:15,870
user it wants an email address we were

00:27:12,960 --> 00:27:17,220
giving it a user and it's asking the

00:27:15,870 --> 00:27:19,139
user for the contact for the email

00:27:17,220 --> 00:27:22,110
address instead why don't you just give

00:27:19,139 --> 00:27:26,370
it the email directly and the test gets

00:27:22,110 --> 00:27:27,419
a lot simpler and easier to write going

00:27:26,370 --> 00:27:29,909
back to the implementation thing is

00:27:27,419 --> 00:27:32,580
easier to write this first you're not

00:27:29,909 --> 00:27:35,279
going to write the other one first you'd

00:27:32,580 --> 00:27:36,809
have to be crazy or you'd have to have a

00:27:35,279 --> 00:27:41,340
like a really clear picture of how it's

00:27:36,809 --> 00:27:43,860
going to work inside your head so stubs

00:27:41,340 --> 00:27:44,909
your Sterling's returning stubs it means

00:27:43,860 --> 00:27:46,470
as a dependency problem and the problem

00:27:44,909 --> 00:27:48,809
is they're not correctly defined the

00:27:46,470 --> 00:27:50,700
wrong objects are talking to each other

00:27:48,809 --> 00:28:00,179
the wrong objects have references to

00:27:50,700 --> 00:28:02,370
each other to very related issues the

00:28:00,179 --> 00:28:03,960
next example this is kind of a

00:28:02,370 --> 00:28:07,649
frequently asked question on PHP spec

00:28:03,960 --> 00:28:11,850
how do I double or stub just one method

00:28:07,649 --> 00:28:13,769
on the object on testing that's very

00:28:11,850 --> 00:28:17,220
common question it's never going to

00:28:13,769 --> 00:28:19,499
happen it means your objects got too

00:28:17,220 --> 00:28:22,590
many responsibilities or possibly there

00:28:19,499 --> 00:28:23,820
should be two objects the example

00:28:22,590 --> 00:28:26,879
something like this this is it like a

00:28:23,820 --> 00:28:29,100
form object and it's going to handle

00:28:26,879 --> 00:28:32,129
some data and if the data is valid it

00:28:29,100 --> 00:28:35,220
says valid the data's invalid it returns

00:28:32,129 --> 00:28:39,139
invalid very simple and then some crazy

00:28:35,220 --> 00:28:39,139
stuff happens here inside validate

00:28:39,470 --> 00:28:44,580
possibly got validate from the parent

00:28:41,700 --> 00:28:48,659
object by extending some parent form

00:28:44,580 --> 00:28:50,549
thing so the common question is how do i

00:28:48,659 --> 00:28:52,980
I just want to test two cases when

00:28:50,549 --> 00:28:56,869
validate returns false handle should

00:28:52,980 --> 00:28:59,340
return valid when validate returns true

00:28:56,869 --> 00:29:04,679
I've way around handle should return

00:28:59,340 --> 00:29:06,389
valid right so the moat the instinct of

00:29:04,679 --> 00:29:09,830
the developer right in the test is I

00:29:06,389 --> 00:29:12,389
want to control what validate returns

00:29:09,830 --> 00:29:16,799
and you can do that in PHP in it because

00:29:12,389 --> 00:29:19,169
it's got a very big set of tools you can

00:29:16,799 --> 00:29:20,279
say instead of testing a real form I'm

00:29:19,169 --> 00:29:22,049
going to test something that's like a

00:29:20,279 --> 00:29:25,230
form but we've kind of taken out the

00:29:22,049 --> 00:29:28,830
validate method we've told it validates

00:29:25,230 --> 00:29:31,019
always going to return true and then I

00:29:28,830 --> 00:29:34,230
call handle some arbitrary data and

00:29:31,019 --> 00:29:36,809
check that valid comes back you can do

00:29:34,230 --> 00:29:41,820
this too sometimes a useful technique

00:29:36,809 --> 00:29:43,289
when dealing with legacy code but

00:29:41,820 --> 00:29:44,490
there's kind of an underlying problem

00:29:43,289 --> 00:29:47,399
there this bit looks messy because

00:29:44,490 --> 00:29:49,230
there's an underlying problem the

00:29:47,399 --> 00:29:52,710
problem is I'm saying this part of the

00:29:49,230 --> 00:29:55,879
object should talk to this part of the

00:29:52,710 --> 00:29:59,990
object as if it's a complete stranger

00:29:55,879 --> 00:29:59,990
it's very implementation-specific

00:30:00,269 --> 00:30:05,159
this test is screaming to you when you

00:30:03,330 --> 00:30:08,309
call handle internally it's going to

00:30:05,159 --> 00:30:12,119
call validate which is very much an

00:30:08,309 --> 00:30:14,009
implementation detail if you're writing

00:30:12,119 --> 00:30:16,289
the thing first you don't know that

00:30:14,009 --> 00:30:19,619
handles going to redirector got a

00:30:16,289 --> 00:30:22,739
delegate to validate so how do you solve

00:30:19,619 --> 00:30:23,999
this if you want this object to have two

00:30:22,739 --> 00:30:26,249
halves that are talking to each other

00:30:23,999 --> 00:30:32,249
like there's strangers make it two

00:30:26,249 --> 00:30:35,690
objects instead of having a validate

00:30:32,249 --> 00:30:40,229
method on your form have a validator

00:30:35,690 --> 00:30:42,570
handles pretty much the same and the

00:30:40,229 --> 00:30:44,399
test looks cleaner will you're doubling

00:30:42,570 --> 00:30:45,719
validator you're saying there's a thing

00:30:44,399 --> 00:30:47,399
called a validator that's always going

00:30:45,719 --> 00:30:51,119
to say stuff valid it's very naive

00:30:47,399 --> 00:30:54,599
validator for this particular scenario

00:30:51,119 --> 00:30:56,459
right when I make a forum with that

00:30:54,599 --> 00:30:57,899
validator and I ask it to handle some

00:30:56,459 --> 00:31:01,019
data it's going to save the data is

00:30:57,899 --> 00:31:02,339
valid you've taken the fact that there's

00:31:01,019 --> 00:31:07,109
these two different responsibilities and

00:31:02,339 --> 00:31:08,279
you split them into two objects so if

00:31:07,109 --> 00:31:10,889
you want if you feel like you want to

00:31:08,279 --> 00:31:14,190
double part of the sut that's the system

00:31:10,889 --> 00:31:15,869
under test the thing you're testing it

00:31:14,190 --> 00:31:17,489
really means you probably want these two

00:31:15,869 --> 00:31:20,190
responsibilities to be separated out

00:31:17,489 --> 00:31:23,489
somehow validation and handing the form

00:31:20,190 --> 00:31:31,979
data if it's telling you these are

00:31:23,489 --> 00:31:36,269
separate concerns so design is super

00:31:31,979 --> 00:31:37,919
important like you're not going to be

00:31:36,269 --> 00:31:42,349
able to test really badly designed code

00:31:37,919 --> 00:31:45,089
efficiently but this magic thing happens

00:31:42,349 --> 00:31:49,950
doing testing make sure design better no

00:31:45,089 --> 00:31:51,299
one knows why it's a mystery like it's a

00:31:49,950 --> 00:31:52,589
good start to just start thinking about

00:31:51,299 --> 00:31:56,700
your code before you write it down

00:31:52,589 --> 00:31:59,009
that's always good start thinking about

00:31:56,700 --> 00:32:02,909
it maybe you note down those thoughts

00:31:59,009 --> 00:32:04,739
maybe draw a diagram but the best way to

00:32:02,909 --> 00:32:07,829
design code is to write down those

00:32:04,739 --> 00:32:11,520
thoughts in code in a test the design

00:32:07,829 --> 00:32:15,660
process is your test writing process

00:32:11,520 --> 00:32:17,160
I mentioned earlier this takes practice

00:32:15,660 --> 00:32:19,050
this isn't something that just happens

00:32:17,160 --> 00:32:20,820
but the more you get used to writing

00:32:19,050 --> 00:32:25,200
test the more you can use them as a

00:32:20,820 --> 00:32:32,010
design tool and they'll help you grow as

00:32:25,200 --> 00:32:33,900
a designer sort of side note but people

00:32:32,010 --> 00:32:35,100
worry about writing tests because they

00:32:33,900 --> 00:32:37,740
think it's going to take loads of time

00:32:35,100 --> 00:32:39,860
it's like some chore it's very much part

00:32:37,740 --> 00:32:42,420
of the automated testing phase i

00:32:39,860 --> 00:32:44,700
finished the code and i have to write

00:32:42,420 --> 00:32:49,800
these boring tests to keep my manager

00:32:44,700 --> 00:32:51,930
and happy and off my back so typically

00:32:49,800 --> 00:32:55,050
with a feature without TDD you sort of

00:32:51,930 --> 00:32:56,490
spend an hour in total split out you

00:32:55,050 --> 00:32:59,850
spend about an hour staring into space

00:32:56,490 --> 00:33:01,890
or going to meet yourself cup of tea to

00:32:59,850 --> 00:33:03,390
get things going or drawing things on a

00:33:01,890 --> 00:33:05,520
whiteboard you spend maybe 30 minutes

00:33:03,390 --> 00:33:09,810
implementing it then you spend 30

00:33:05,520 --> 00:33:11,880
minutes checking it works manually what

00:33:09,810 --> 00:33:13,830
happens with TDD is you're designing is

00:33:11,880 --> 00:33:17,700
your test so it's not an extra thing you

00:33:13,830 --> 00:33:19,050
do at the end it takes the place of that

00:33:17,700 --> 00:33:22,050
first phase and it takes about the same

00:33:19,050 --> 00:33:24,420
time to be honest for me I feel like it

00:33:22,050 --> 00:33:26,490
takes less time but I'm gonna accurate

00:33:24,420 --> 00:33:28,920
measurements about this it's the best

00:33:26,490 --> 00:33:32,010
way I know to design code for me now is

00:33:28,920 --> 00:33:33,720
to write a test to think about what it's

00:33:32,010 --> 00:33:35,730
supposed to do in the form of my hands

00:33:33,720 --> 00:33:38,610
typing stuff into an IDE so I'm a

00:33:35,730 --> 00:33:41,820
developer like typing donis drawing

00:33:38,610 --> 00:33:43,350
stuff right and then you spend about the

00:33:41,820 --> 00:33:44,310
same time implementing it maybe that's a

00:33:43,350 --> 00:33:46,500
bit quicker could you get the test

00:33:44,310 --> 00:33:49,470
guiding you and then when you need to

00:33:46,500 --> 00:33:51,210
test it you just run the test that you

00:33:49,470 --> 00:33:56,700
wrote earlier as part of your design

00:33:51,210 --> 00:33:59,630
process that's the magical bit the test

00:33:56,700 --> 00:34:01,800
three is a way to think about your code

00:33:59,630 --> 00:34:03,480
so the test Suites often telling you

00:34:01,800 --> 00:34:05,720
there's a design problem as this design

00:34:03,480 --> 00:34:05,720
issue

00:34:08,940 --> 00:34:13,849
I do you a lot of TDD training and this

00:34:11,669 --> 00:34:17,310
weird thing happens we do a whole day of

00:34:13,849 --> 00:34:19,649
you know doing exercises writing tests

00:34:17,310 --> 00:34:23,159
first degenerating objects on the basis

00:34:19,649 --> 00:34:24,089
of it will build up a whole system and

00:34:23,159 --> 00:34:26,460
somewhere near the end of the day

00:34:24,089 --> 00:34:28,440
someone puts the hand up and says I've

00:34:26,460 --> 00:34:32,970
got a question how do you do this like

00:34:28,440 --> 00:34:35,730
in the real world and I sort of say what

00:34:32,970 --> 00:34:37,619
you're talking about they say well all

00:34:35,730 --> 00:34:40,950
the examples we've done we've generated

00:34:37,619 --> 00:34:42,780
small small objects that do one thing

00:34:40,950 --> 00:34:44,760
you have a few methods each method just

00:34:42,780 --> 00:34:47,280
as one simple thing they don't really

00:34:44,760 --> 00:34:50,280
talk to many other objects I'm sort of

00:34:47,280 --> 00:34:52,980
nodding and they say so how'd you do in

00:34:50,280 --> 00:34:55,470
the real world I say what you mean well

00:34:52,980 --> 00:34:57,869
in the real world objects are thousands

00:34:55,470 --> 00:35:00,780
of lines long and they all have 20

00:34:57,869 --> 00:35:02,760
methods in each method has 50 indented

00:35:00,780 --> 00:35:07,800
if statements how do i use TDD to do

00:35:02,760 --> 00:35:09,630
that the answer is you don't that's the

00:35:07,800 --> 00:35:12,000
magic the TDD is going to save you from

00:35:09,630 --> 00:35:14,670
that stuff you don't want to be writing

00:35:12,000 --> 00:35:17,400
that code that's what bad code looks

00:35:14,670 --> 00:35:18,510
like the test suite is what's going to

00:35:17,400 --> 00:35:23,400
take you by the hand and sort of lead

00:35:18,510 --> 00:35:25,109
you towards better design sweets there's

00:35:23,400 --> 00:35:27,240
often a perception for management the

00:35:25,109 --> 00:35:29,880
testing is because they're stuck in that

00:35:27,240 --> 00:35:33,329
phase one transitions are automated

00:35:29,880 --> 00:35:35,970
testing your project manager might think

00:35:33,329 --> 00:35:39,510
that writing tests is what you're doing

00:35:35,970 --> 00:35:41,040
instead of paying qas it's that quality

00:35:39,510 --> 00:35:43,589
process you're doing at the end of the

00:35:41,040 --> 00:35:45,569
code they haven't realized you've moved

00:35:43,589 --> 00:35:48,240
on to TDD they don't know it's giving

00:35:45,569 --> 00:35:49,560
you all these design benefits so you

00:35:48,240 --> 00:35:51,750
often get a bit of pressure for managers

00:35:49,560 --> 00:35:56,640
can you just not write the tests this

00:35:51,750 --> 00:35:58,200
time I need it really quickly it needs

00:35:56,640 --> 00:35:59,280
to be done now can you just skip writing

00:35:58,200 --> 00:36:01,829
the test what they're saying to you is

00:35:59,280 --> 00:36:03,900
can you not think about it can you I

00:36:01,829 --> 00:36:06,540
need it now please don't design it well

00:36:03,900 --> 00:36:07,770
I need it now don't spend any time

00:36:06,540 --> 00:36:10,890
thinking about whether it's sensible

00:36:07,770 --> 00:36:13,560
solution customers shouldn't really

00:36:10,890 --> 00:36:15,810
dictate your design process I don't

00:36:13,560 --> 00:36:16,980
think anyone would when two developers

00:36:15,810 --> 00:36:19,109
are sitting drawing a diagram on a

00:36:16,980 --> 00:36:20,849
whiteboard the customers not going to

00:36:19,109 --> 00:36:22,200
come along and smack the pen out of your

00:36:20,849 --> 00:36:23,850
hand and say why are you doing this why

00:36:22,200 --> 00:36:26,350
are you writing code

00:36:23,850 --> 00:36:30,700
that's the same with tests the tests are

00:36:26,350 --> 00:36:35,460
how you design your code so that the

00:36:30,700 --> 00:36:35,460
time spent in test is very much returned

00:36:37,710 --> 00:36:47,770
so the last reason why your test suite

00:36:41,320 --> 00:36:49,060
sucks is a complicated one and it's

00:36:47,770 --> 00:36:52,000
something I've been learning more and

00:36:49,060 --> 00:36:54,940
more the last few years from looking at

00:36:52,000 --> 00:36:56,290
where problems arise it's probably

00:36:54,940 --> 00:37:02,920
because you're testing across domain

00:36:56,290 --> 00:37:05,470
boundaries what there's very much a

00:37:02,920 --> 00:37:08,650
concept of what code is yours and what

00:37:05,470 --> 00:37:10,810
code is someone else's and the clearer

00:37:08,650 --> 00:37:14,920
you have that concept the easier it is

00:37:10,810 --> 00:37:16,510
to answer these questions like how what

00:37:14,920 --> 00:37:19,750
things should I be testing other things

00:37:16,510 --> 00:37:22,090
I shouldn't be testing when I'm writing

00:37:19,750 --> 00:37:23,290
code that's built into a framework how

00:37:22,090 --> 00:37:27,730
do i test that when there's all this

00:37:23,290 --> 00:37:29,920
framework stuff happening so one example

00:37:27,730 --> 00:37:31,180
is testing third-party code I don't

00:37:29,920 --> 00:37:33,760
think anyone's crazy enough to write

00:37:31,180 --> 00:37:38,020
unit tests for the third party code

00:37:33,760 --> 00:37:41,740
they're using if you do please commit it

00:37:38,020 --> 00:37:44,020
back to the projects but you can't

00:37:41,740 --> 00:37:47,950
softly test other people's code without

00:37:44,020 --> 00:37:49,750
really realizing you're doing it when

00:37:47,950 --> 00:37:51,970
you're using frameworks you're using

00:37:49,750 --> 00:37:55,660
third-party components it's easy for you

00:37:51,970 --> 00:37:59,170
to test their code by accident and

00:37:55,660 --> 00:38:01,840
generally it's a waste of time generally

00:37:59,170 --> 00:38:03,580
other people's code probably works or

00:38:01,840 --> 00:38:08,050
you can find out if that frameworks

00:38:03,580 --> 00:38:09,670
terrible and full of bugs you want to

00:38:08,050 --> 00:38:11,170
spend your time where its most valuable

00:38:09,670 --> 00:38:16,000
testing your stuff the stuff that adds

00:38:11,170 --> 00:38:19,450
business value to your product this is a

00:38:16,000 --> 00:38:21,850
really innocent example hopefully

00:38:19,450 --> 00:38:24,940
familiar it's actually talking to

00:38:21,850 --> 00:38:26,230
someone an hour ago about a similar

00:38:24,940 --> 00:38:27,910
situation where you're trying to test

00:38:26,230 --> 00:38:30,420
objects the implement active record

00:38:27,910 --> 00:38:30,420
pattern

00:38:30,550 --> 00:38:35,260
this is a user repository it's extending

00:38:33,040 --> 00:38:38,820
some framework repository maybe doctrine

00:38:35,260 --> 00:38:41,410
something like that propel whatever and

00:38:38,820 --> 00:38:42,430
it's really easy it's really easy for

00:38:41,410 --> 00:38:43,600
the developer because all they have to

00:38:42,430 --> 00:38:46,570
do is extend this other thing and then

00:38:43,600 --> 00:38:52,120
define fine by email fine by email is

00:38:46,570 --> 00:38:55,750
going to call find right very simple

00:38:52,120 --> 00:38:57,370
test so how am I going to test it one

00:38:55,750 --> 00:38:59,620
option would be that thing we mentioned

00:38:57,370 --> 00:39:02,730
earlier stubbing out what find does but

00:38:59,620 --> 00:39:02,730
i think we agreed that isn't a good idea

00:39:02,790 --> 00:39:07,120
so it's test this really simple method

00:39:05,230 --> 00:39:11,410
this method is going to take me 10

00:39:07,120 --> 00:39:14,550
minutes to write tops it's write a test

00:39:11,410 --> 00:39:14,550
for it it's going to be a nightmare

00:39:14,760 --> 00:39:18,400
because I've extended someone else's

00:39:16,960 --> 00:39:22,830
code I have to understand what that code

00:39:18,400 --> 00:39:26,070
does so what I want this test to do is

00:39:22,830 --> 00:39:30,310
my objects going to get a validator and

00:39:26,070 --> 00:39:31,690
a repository and if the data is valid

00:39:30,310 --> 00:39:35,710
according to the validator it's going to

00:39:31,690 --> 00:39:38,890
save it in the repository no that's not

00:39:35,710 --> 00:39:42,490
what it does we're just testing phone by

00:39:38,890 --> 00:39:47,970
email sorry but remember that for when

00:39:42,490 --> 00:39:50,320
we get to the example so this objects

00:39:47,970 --> 00:39:53,950
basically testing that when i call fine

00:39:50,320 --> 00:39:58,000
by email i get a user back very simple

00:39:53,950 --> 00:40:01,000
concept right except because i'm

00:39:58,000 --> 00:40:02,050
extending framework repository i have to

00:40:01,000 --> 00:40:03,730
look at the constructor of the framework

00:40:02,050 --> 00:40:05,200
repository it requires these things it

00:40:03,730 --> 00:40:08,590
requires a database connection it

00:40:05,200 --> 00:40:11,410
requires a schemer creator so i spend an

00:40:08,590 --> 00:40:13,390
hour paging through the source code of

00:40:11,410 --> 00:40:17,130
the base repository class and figuring

00:40:13,390 --> 00:40:17,130
out exactly what its dependencies are

00:40:17,610 --> 00:40:22,150
and even worse even though i've given it

00:40:19,690 --> 00:40:23,800
these objects turns out it call it calls

00:40:22,150 --> 00:40:25,390
some methods on those objects so I've

00:40:23,800 --> 00:40:27,190
had to figure out exactly internally

00:40:25,390 --> 00:40:30,370
what the repository clusters in the

00:40:27,190 --> 00:40:32,020
abstract class and stub out the schema

00:40:30,370 --> 00:40:34,960
Creator to return a schemer I don't

00:40:32,020 --> 00:40:37,780
always I just read the source code had

00:40:34,960 --> 00:40:39,340
to figure out what it does and then it

00:40:37,780 --> 00:40:40,690
seems to call something called get

00:40:39,340 --> 00:40:42,880
mappings that needs an array to come

00:40:40,690 --> 00:40:44,080
back so i had to stub that as well after

00:40:42,880 --> 00:40:46,300
i did all that work

00:40:44,080 --> 00:40:49,810
I had a test that was green and I felt

00:40:46,300 --> 00:40:51,070
good about myself but right in the code

00:40:49,810 --> 00:40:53,110
took five minutes and writing the test

00:40:51,070 --> 00:40:54,910
took me all morning because I had to

00:40:53,110 --> 00:40:56,530
load all this stuff about what is this

00:40:54,910 --> 00:41:03,130
framework repository what's it doing in

00:40:56,530 --> 00:41:06,400
its constructor what's it what does it

00:41:03,130 --> 00:41:09,600
need what dependencies does it have what

00:41:06,400 --> 00:41:09,600
does it need to be able to operate a

00:41:10,620 --> 00:41:15,760
better solution is to just not touch or

00:41:13,990 --> 00:41:18,760
lack framework repository stuff don't

00:41:15,760 --> 00:41:22,330
get involved you can treat it as a

00:41:18,760 --> 00:41:23,710
stranger this is the same user

00:41:22,330 --> 00:41:25,990
repository and instead of extending

00:41:23,710 --> 00:41:29,230
framework repository we're injecting an

00:41:25,990 --> 00:41:30,730
instance and I'll find by email instead

00:41:29,230 --> 00:41:33,940
of doing this find it's doing this

00:41:30,730 --> 00:41:38,530
repository find it's a very simple

00:41:33,940 --> 00:41:40,720
design but the test is a lot simpler

00:41:38,530 --> 00:41:42,340
because i haven't had to get involved in

00:41:40,720 --> 00:41:44,020
the repository I haven't got to

00:41:42,340 --> 00:41:46,720
understand the internals the repository

00:41:44,020 --> 00:41:50,830
I'm just interacting with the

00:41:46,720 --> 00:41:52,300
repositories external API so here I just

00:41:50,830 --> 00:41:57,250
construct my thing with the repository

00:41:52,300 --> 00:41:59,230
when I call find this user Bob I should

00:41:57,250 --> 00:42:00,910
get a user back to make it work I have

00:41:59,230 --> 00:42:04,480
to stub what the repositories public

00:42:00,910 --> 00:42:06,130
interface is going to do it takes me a

00:42:04,480 --> 00:42:08,200
lot less time I don't have to understand

00:42:06,130 --> 00:42:14,710
the guy who wrote the repository how did

00:42:08,200 --> 00:42:17,530
he do it the gist of is that when you

00:42:14,710 --> 00:42:18,910
extend third-party code you're taking

00:42:17,530 --> 00:42:20,350
responsibility for all the design

00:42:18,910 --> 00:42:24,070
decisions inside that object you're

00:42:20,350 --> 00:42:29,620
extending that might be fine if your use

00:42:24,070 --> 00:42:30,940
case it might be far more convenient the

00:42:29,620 --> 00:42:31,870
other guy might have done amazing stuff

00:42:30,940 --> 00:42:33,400
in there that you're just going to

00:42:31,870 --> 00:42:35,370
inherit it's going to sound fantastic

00:42:33,400 --> 00:42:37,540
but bear in mind that your object is

00:42:35,370 --> 00:42:39,970
you're saying I want everything in this

00:42:37,540 --> 00:42:42,070
parent class and I'm an this extra stuff

00:42:39,970 --> 00:42:45,670
I'm writing so when you come to a

00:42:42,070 --> 00:42:48,510
testing strategy you can have to test

00:42:45,670 --> 00:42:48,510
all that other stuff as well

00:42:49,119 --> 00:42:54,249
generally this boils down to favoring

00:42:51,910 --> 00:42:56,710
composition over inheritance generally

00:42:54,249 --> 00:42:58,779
that's a very good design principle

00:42:56,710 --> 00:43:00,970
anyway instead of extending some

00:42:58,779 --> 00:43:03,819
convenient library think about can I

00:43:00,970 --> 00:43:08,019
just use it from the outside can I

00:43:03,819 --> 00:43:11,970
achieve similar clean results by

00:43:08,019 --> 00:43:11,970
thinking about it from the externals

00:43:13,829 --> 00:43:23,259
however looking back at this example

00:43:17,950 --> 00:43:24,789
here this test were actually committed

00:43:23,259 --> 00:43:29,940
what some people now think is a major

00:43:24,789 --> 00:43:34,509
sin which is I'm doubling the repository

00:43:29,940 --> 00:43:38,589
so although everyone agrees you

00:43:34,509 --> 00:43:40,180
shouldn't test someone else's code you

00:43:38,589 --> 00:43:45,130
also shouldn't double other people's

00:43:40,180 --> 00:43:47,950
code so if you want a really clean

00:43:45,130 --> 00:43:50,349
design a way to ensure that is just

00:43:47,950 --> 00:43:54,910
don't double any objects owned by other

00:43:50,349 --> 00:43:56,499
people sounds very strict the main

00:43:54,910 --> 00:43:58,119
reason is that testing a double of

00:43:56,499 --> 00:44:05,559
another object gives you no confidence

00:43:58,119 --> 00:44:07,359
that it's going to work I'll give an

00:44:05,559 --> 00:44:10,390
example of a test with a double in it

00:44:07,359 --> 00:44:12,480
this is drawn from my life experience of

00:44:10,390 --> 00:44:16,079
how I learn not to do this kind of thing

00:44:12,480 --> 00:44:21,279
when trying to upload assets to Amazon

00:44:16,079 --> 00:44:22,869
you remember so here's an example we're

00:44:21,279 --> 00:44:28,690
specking something called a file handler

00:44:22,869 --> 00:44:30,670
this is PHP spec again and this is the

00:44:28,690 --> 00:44:32,140
file handle is constructed with an API

00:44:30,670 --> 00:44:33,999
that lets it talk to the cloud so that's

00:44:32,140 --> 00:44:36,460
an API that's provided by that cloud

00:44:33,999 --> 00:44:40,150
provider think something like the Amazon

00:44:36,460 --> 00:44:45,819
SDK it's got an object we own called the

00:44:40,150 --> 00:44:47,769
file validator and it's got a file it

00:44:45,819 --> 00:44:50,739
gets constructed with the API client and

00:44:47,769 --> 00:44:52,359
validator and it says the validator is

00:44:50,739 --> 00:44:56,289
going to say everything is valid for

00:44:52,359 --> 00:44:58,269
this test and we're going to process a

00:44:56,289 --> 00:45:01,230
file and we're expecting that on the API

00:44:58,269 --> 00:45:03,040
client startup loads going to be called

00:45:01,230 --> 00:45:06,520
upload data is going to be

00:45:03,040 --> 00:45:09,430
called and upload successful is going to

00:45:06,520 --> 00:45:12,130
return a success so this bit here we're

00:45:09,430 --> 00:45:20,740
describing this is our interaction with

00:45:12,130 --> 00:45:22,180
this third-party code right why do I

00:45:20,740 --> 00:45:27,190
want to describe my interaction with

00:45:22,180 --> 00:45:30,360
third-party code you when you're

00:45:27,190 --> 00:45:30,360
thinking about test two specifications

00:45:30,690 --> 00:45:35,110
you start thinking about this kind of

00:45:32,860 --> 00:45:37,240
thing as this is a description of what I

00:45:35,110 --> 00:45:42,790
need to do to successfully upload files

00:45:37,240 --> 00:45:44,380
to this cloud API right the problem is I

00:45:42,790 --> 00:45:46,270
didn't write the cloud API so this is

00:45:44,380 --> 00:45:47,830
more like this is Karen's opinion of

00:45:46,270 --> 00:45:54,400
what you probably have to do to upload

00:45:47,830 --> 00:45:56,400
files to this cloud API it's like my

00:45:54,400 --> 00:45:59,290
boss Marcello's here so it's like if

00:45:56,400 --> 00:46:02,380
from preparing for my annual appraisal

00:45:59,290 --> 00:46:04,510
thing and like I'm telling myself a

00:46:02,380 --> 00:46:06,250
little practice story about it I'm going

00:46:04,510 --> 00:46:08,440
to go into the room and my cell is going

00:46:06,250 --> 00:46:10,600
to say hello Kieran and i'm going to say

00:46:08,440 --> 00:46:13,540
hello marcelo and he's going to say

00:46:10,600 --> 00:46:15,310
you've done really well this year I'm

00:46:13,540 --> 00:46:16,600
gonna say great can I have a raise and

00:46:15,310 --> 00:46:18,760
he's going to say yes you can have

00:46:16,600 --> 00:46:19,930
double your salary and then we'll

00:46:18,760 --> 00:46:23,200
conclude the meeting that I'll leave

00:46:19,930 --> 00:46:25,840
right that's obviously a kind of

00:46:23,200 --> 00:46:28,780
make-believe story that's kind of what

00:46:25,840 --> 00:46:30,010
this is i'm going to write that test and

00:46:28,780 --> 00:46:31,330
it will run successfully and when i go

00:46:30,010 --> 00:46:33,180
and have the real meeting with marcello

00:46:31,330 --> 00:46:35,800
you might behave completely differently

00:46:33,180 --> 00:46:38,140
when i run when i run my code against

00:46:35,800 --> 00:46:40,660
the real cloud api it might behave

00:46:38,140 --> 00:46:43,030
completely differently in the real life

00:46:40,660 --> 00:46:45,130
example of this there was a third method

00:46:43,030 --> 00:46:48,310
called finalize upload or something like

00:46:45,130 --> 00:46:49,750
that that I had to call but because I

00:46:48,310 --> 00:46:52,180
didn't know that I didn't put that into

00:46:49,750 --> 00:46:55,660
any of my unit tests unit tests are all

00:46:52,180 --> 00:47:01,150
green they all say yeah we all work then

00:46:55,660 --> 00:47:03,510
in real life nothing works so how'd you

00:47:01,150 --> 00:47:03,510
get out of that

00:47:03,550 --> 00:47:07,480
the problem is to test something like

00:47:06,010 --> 00:47:10,840
this this is like an infrastructure

00:47:07,480 --> 00:47:13,720
layer a cloud API you have to run it

00:47:10,840 --> 00:47:15,160
against the real cloudy API I think

00:47:13,720 --> 00:47:17,470
every developer is writing stuff that I

00:47:15,160 --> 00:47:19,390
blows to a public services at some point

00:47:17,470 --> 00:47:24,610
going to like actually try uploading

00:47:19,390 --> 00:47:27,700
stuff to the real place the architecture

00:47:24,610 --> 00:47:29,560
you have this slimming like this I've

00:47:27,700 --> 00:47:31,300
got my validator thing we didn't really

00:47:29,560 --> 00:47:34,270
talk about how that works we just assume

00:47:31,300 --> 00:47:35,140
it works we've got this cloud API this

00:47:34,270 --> 00:47:38,320
is something I downloaded off the

00:47:35,140 --> 00:47:41,170
internet or God compose a package

00:47:38,320 --> 00:47:45,600
something like that and the object i'm

00:47:41,170 --> 00:47:47,920
testing is this file handler up here now

00:47:45,600 --> 00:47:50,890
the question to ask is where are the

00:47:47,920 --> 00:47:56,110
boundaries which bits of mine on which

00:47:50,890 --> 00:47:58,780
bits are there's the blue box is the

00:47:56,110 --> 00:48:00,310
kind of core domain so the stuff I'm

00:47:58,780 --> 00:48:04,300
writing it's the validator in the file

00:48:00,310 --> 00:48:06,280
handler however the file handler kind of

00:48:04,300 --> 00:48:07,750
has one foot in another world the file

00:48:06,280 --> 00:48:09,970
handler understands exactly how to

00:48:07,750 --> 00:48:15,070
upload stuff to this specific cloud

00:48:09,970 --> 00:48:17,170
providers storage platform and the fact

00:48:15,070 --> 00:48:18,460
that file handler is in both worlds is

00:48:17,170 --> 00:48:22,450
what's making it difficult for me to

00:48:18,460 --> 00:48:24,190
test it effectively I'm not saying you

00:48:22,450 --> 00:48:25,660
can't write this test I'm saying you can

00:48:24,190 --> 00:48:27,760
write this test and run it and it's

00:48:25,660 --> 00:48:30,460
still wearing work it doesn't give you

00:48:27,760 --> 00:48:31,660
that confidence level you're gonna have

00:48:30,460 --> 00:48:35,580
to try it for real and then you'll think

00:48:31,660 --> 00:48:35,580
why did I bother writing that unit test

00:48:38,580 --> 00:48:42,810
the way to get out of this is 2d couple

00:48:40,830 --> 00:48:44,850
things quite a lot so somewhere around

00:48:42,810 --> 00:48:51,470
this file handler area we want to add

00:48:44,850 --> 00:48:53,610
some abstraction so now I've done is

00:48:51,470 --> 00:48:55,200
instead of the file handler dealing

00:48:53,610 --> 00:48:58,170
directly with the cloud API I've

00:48:55,200 --> 00:48:59,880
introduced an interface because I write

00:48:58,170 --> 00:49:02,310
the interface i define the interface

00:48:59,880 --> 00:49:05,810
that lives completely inside my domain

00:49:02,310 --> 00:49:08,490
the domain of my system my object model

00:49:05,810 --> 00:49:09,750
and because I because I'm just thinking

00:49:08,490 --> 00:49:11,430
about it's part of my object model I've

00:49:09,750 --> 00:49:13,560
stopped thinking about the cloud API I

00:49:11,430 --> 00:49:17,010
realized I just want a place where I can

00:49:13,560 --> 00:49:21,000
store files a file stored I can store

00:49:17,010 --> 00:49:22,770
files in the cloud a the third party

00:49:21,000 --> 00:49:24,960
domain hasn't changed I don't control

00:49:22,770 --> 00:49:27,810
that all and I've had to write a little

00:49:24,960 --> 00:49:29,310
adapter called the cloud file store the

00:49:27,810 --> 00:49:32,610
implements the interface I've defined in

00:49:29,310 --> 00:49:35,460
the pool and then knows how to talk to

00:49:32,610 --> 00:49:38,220
the cloud API if you're in Gordon's

00:49:35,460 --> 00:49:40,530
hexagonal architecture talk this is like

00:49:38,220 --> 00:49:43,650
one of the faces of the hexagon that's

00:49:40,530 --> 00:49:48,150
the core domain and this is the sides

00:49:43,650 --> 00:49:51,030
the ports and adapters hanging off it so

00:49:48,150 --> 00:49:53,970
how do i test it all becomes a lot

00:49:51,030 --> 00:49:56,360
simpler to be honest the core domain can

00:49:53,970 --> 00:49:59,490
be completely tested with unit tests

00:49:56,360 --> 00:50:01,410
isolated unit tests what I'm checking is

00:49:59,490 --> 00:50:07,830
the communication between all the

00:50:01,410 --> 00:50:10,620
objects that I control I'm going to test

00:50:07,830 --> 00:50:12,660
the file handler by making a double of

00:50:10,620 --> 00:50:14,460
the file store interface it's fine for

00:50:12,660 --> 00:50:15,750
me to do that I can make assertions

00:50:14,460 --> 00:50:18,230
about how people should talk to the

00:50:15,750 --> 00:50:21,930
interface because the interface is mine

00:50:18,230 --> 00:50:24,750
look something like this so I double the

00:50:21,930 --> 00:50:26,490
file store and I say the file store

00:50:24,750 --> 00:50:27,990
store method should have been called at

00:50:26,490 --> 00:50:30,570
the end of the test very simple very

00:50:27,990 --> 00:50:33,510
clean and actually it's very

00:50:30,570 --> 00:50:34,860
infrastructure independent adding that

00:50:33,510 --> 00:50:36,090
interface will make it easier for me to

00:50:34,860 --> 00:50:41,250
switch to different cloud providers

00:50:36,090 --> 00:50:45,360
later so how do I test the rest I can't

00:50:41,250 --> 00:50:47,640
unit test this I definitely can't unit

00:50:45,360 --> 00:50:51,130
test this this is someone else's and I

00:50:47,640 --> 00:50:53,050
can't really unit test this adapter

00:50:51,130 --> 00:50:54,670
I'd have to double that cloud API I

00:50:53,050 --> 00:50:56,790
could write the unit test but it's not

00:50:54,670 --> 00:50:59,110
going to tell me whether it works at all

00:50:56,790 --> 00:51:03,820
so I cover this part of the system with

00:50:59,110 --> 00:51:05,950
integration tests integration tests of a

00:51:03,820 --> 00:51:08,710
particular type collaborator integration

00:51:05,950 --> 00:51:10,870
tests so what we're checking is does

00:51:08,710 --> 00:51:13,210
this whole system fill this contract

00:51:10,870 --> 00:51:15,520
it's fast or contract it says you can

00:51:13,210 --> 00:51:18,610
store files does this whole set of

00:51:15,520 --> 00:51:21,490
objects successfully store files they

00:51:18,610 --> 00:51:22,660
would look something like this you need

00:51:21,490 --> 00:51:25,720
some kind of test credentials for the

00:51:22,660 --> 00:51:28,510
service you'd get file ready and you'd

00:51:25,720 --> 00:51:31,030
make two objects to concrete objects

00:51:28,510 --> 00:51:33,370
plug them together and say please store

00:51:31,030 --> 00:51:36,160
this file now you'd have to have some

00:51:33,370 --> 00:51:40,780
way of checking is the file really in

00:51:36,160 --> 00:51:42,310
this cloud provider now okay so this is

00:51:40,780 --> 00:51:46,090
going to be much much slower than unit

00:51:42,310 --> 00:51:49,000
test but there aren't many scenarios are

00:51:46,090 --> 00:51:50,380
need to test it's only got one method

00:51:49,000 --> 00:51:53,140
store later on it'll probably get

00:51:50,380 --> 00:51:54,490
retrieve but this is enough of a test

00:51:53,140 --> 00:51:58,900
for the store method when I asked to get

00:51:54,490 --> 00:52:01,930
to store a file it gets uploaded maybe

00:51:58,900 --> 00:52:04,150
when I asked it to store a zero byte

00:52:01,930 --> 00:52:06,670
file it throws an exception very few

00:52:04,150 --> 00:52:07,990
paths through the integration test lots

00:52:06,670 --> 00:52:13,180
of lots of different scenarios are

00:52:07,990 --> 00:52:15,280
tested in the unit test level and at the

00:52:13,180 --> 00:52:19,420
end maybe you test your whole system

00:52:15,280 --> 00:52:21,610
into end after acceptance tests here is

00:52:19,420 --> 00:52:23,110
more like a smoke test when I plug these

00:52:21,610 --> 00:52:28,000
things together does everything still

00:52:23,110 --> 00:52:29,560
work and incidentally once you've got

00:52:28,000 --> 00:52:30,580
look if you've got a lot of acceptance

00:52:29,560 --> 00:52:32,020
tests you might not need this

00:52:30,580 --> 00:52:33,460
integration test you might be really

00:52:32,020 --> 00:52:35,290
confident that storing stuff in the

00:52:33,460 --> 00:52:39,220
cloud works if you're testing it end to

00:52:35,290 --> 00:52:41,350
end anyway so briefly don't test other

00:52:39,220 --> 00:52:43,090
people's code main reasons you don't

00:52:41,350 --> 00:52:45,190
know what it's supposed to do you don't

00:52:43,090 --> 00:52:48,790
understand that you haven't really taken

00:52:45,190 --> 00:52:51,670
responsibility for it and the second

00:52:48,790 --> 00:52:54,130
point don't test how you talk to other

00:52:51,670 --> 00:52:57,520
people's code you don't know how it's

00:52:54,130 --> 00:52:58,570
going to respond you don't you know how

00:52:57,520 --> 00:52:59,740
it's going to spawn now you don't know

00:52:58,570 --> 00:53:02,850
how it's going to respond in the future

00:52:59,740 --> 00:53:02,850
you don't know what's going to change

00:53:04,920 --> 00:53:13,200
so in summary use TDD to drive your

00:53:10,089 --> 00:53:15,280
development ultimately that's the goal

00:53:13,200 --> 00:53:16,900
going through automated testing is good

00:53:15,280 --> 00:53:20,530
but keep in mind i want to start doing

00:53:16,900 --> 00:53:22,510
TDD and use TDD to replace some existing

00:53:20,530 --> 00:53:24,430
practices like the time you spend

00:53:22,510 --> 00:53:26,559
staring off into the distance thinking

00:53:24,430 --> 00:53:31,210
about what the object should do plug the

00:53:26,559 --> 00:53:33,490
TDD into that phase when you've got

00:53:31,210 --> 00:53:34,510
problems in your test suite think

00:53:33,490 --> 00:53:36,940
through the three things we've talked

00:53:34,510 --> 00:53:38,770
about is it because it's too tied to the

00:53:36,940 --> 00:53:41,500
implementation is it because the tests

00:53:38,770 --> 00:53:42,549
were writing the reason they fail every

00:53:41,500 --> 00:53:43,569
time I make changes because we're

00:53:42,549 --> 00:53:47,140
getting really hung up on how we

00:53:43,569 --> 00:53:50,200
implement stuff is it because I designs

00:53:47,140 --> 00:53:51,760
bad rather than blaming the test maybe

00:53:50,200 --> 00:53:55,690
we should refactor our code and make it

00:53:51,760 --> 00:53:57,339
much cleaner and are we testing across

00:53:55,690 --> 00:54:03,369
these domain boundaries are we trying to

00:53:57,339 --> 00:54:06,030
unit test third-party objects that's it

00:54:03,369 --> 00:54:06,030
thank you very much

00:54:13,180 --> 00:54:17,689
five questions if we have five minutes

00:54:16,009 --> 00:54:32,089
for questions if anyone has any

00:54:17,689 --> 00:54:35,539
questions thanks testers design wouldn't

00:54:32,089 --> 00:54:37,759
naturally lead to doing more acceptance

00:54:35,539 --> 00:54:40,459
and interface testing efforts and fall

00:54:37,759 --> 00:54:41,749
down to less unit testing in the end

00:54:40,459 --> 00:54:44,630
because that's how I would envision

00:54:41,749 --> 00:54:47,619
doing the design of the whole thing yeah

00:54:44,630 --> 00:54:49,910
that's your natural workflow then yeah

00:54:47,619 --> 00:54:52,430
it's a very good place to start is what

00:54:49,910 --> 00:54:55,279
does the overall feature have to be and

00:54:52,430 --> 00:54:57,499
then add write tests for that right

00:54:55,279 --> 00:54:58,999
acceptance test certainly in a BDD

00:54:57,499 --> 00:55:01,640
workflow that's definitely what you'd be

00:54:58,999 --> 00:55:02,900
doing I didn't we talk about BDD bits

00:55:01,640 --> 00:55:05,299
the same thing that's what I've been

00:55:02,900 --> 00:55:06,709
talking about so it's a good way to

00:55:05,299 --> 00:55:08,479
drive your design if you understand what

00:55:06,709 --> 00:55:10,609
the overall system has to do what the

00:55:08,479 --> 00:55:12,589
overall feature has to do you can then

00:55:10,609 --> 00:55:14,029
start with that and then break it down

00:55:12,589 --> 00:55:16,609
to what the individual components have

00:55:14,029 --> 00:55:18,529
to do and then you know when you've done

00:55:16,609 --> 00:55:20,959
enough because the features test starts

00:55:18,529 --> 00:55:22,039
passing so yeah that kind of integrated

00:55:20,959 --> 00:55:27,890
workflow is definitely something to aim

00:55:22,039 --> 00:55:30,349
for um the thing with the once expedite

00:55:27,890 --> 00:55:33,410
the expectation to delete like the once

00:55:30,349 --> 00:55:35,539
or twice yeah making my tests less

00:55:33,410 --> 00:55:37,609
brittle I didn't quite understand why

00:55:35,539 --> 00:55:41,179
they would make my test brittle because

00:55:37,609 --> 00:55:43,939
um I would never like at a second call

00:55:41,179 --> 00:55:46,069
um to get name if there wouldn't be a

00:55:43,939 --> 00:55:48,819
lucky requirement and the environment

00:55:46,069 --> 00:55:52,249
would make me change my test first so

00:55:48,819 --> 00:55:54,349
like my office is green it would never

00:55:52,249 --> 00:55:56,329
go red again unless I change something

00:55:54,349 --> 00:55:58,309
in a code we should be test driven sure

00:55:56,329 --> 00:56:00,829
so there's a couple of reasons that

00:55:58,309 --> 00:56:02,150
might change often people will incite

00:56:00,829 --> 00:56:04,459
will assign the result of a call to a

00:56:02,150 --> 00:56:06,109
variable and then use the variable and

00:56:04,459 --> 00:56:08,779
then later decide actually it's more

00:56:06,109 --> 00:56:09,739
readable if I in line that call I don't

00:56:08,779 --> 00:56:12,769
consider that should be something that

00:56:09,739 --> 00:56:15,349
should break the test at all the other

00:56:12,769 --> 00:56:16,939
is like a later scenario might impact on

00:56:15,349 --> 00:56:21,829
this behavior so there might be another

00:56:16,939 --> 00:56:23,810
scenario may be in the same test case it

00:56:21,829 --> 00:56:25,550
causes it to be called twice

00:56:23,810 --> 00:56:27,410
it's just an overhead to have to find

00:56:25,550 --> 00:56:29,450
the braking test even within one test

00:56:27,410 --> 00:56:32,360
case for the same object so it makes

00:56:29,450 --> 00:56:34,940
sense yeah okay and then like often you

00:56:32,360 --> 00:56:37,040
would like use expectations like ones

00:56:34,940 --> 00:56:38,900
because it's like importance to jump

00:56:37,040 --> 00:56:41,270
that the return value is the one which

00:56:38,900 --> 00:56:43,160
will pass into the next construct so if

00:56:41,270 --> 00:56:46,190
I have like multiple calls to get name

00:56:43,160 --> 00:56:47,780
and then I have a test which checks that

00:56:46,190 --> 00:56:49,850
the return value of cat named gets

00:56:47,780 --> 00:56:51,410
passed into another method I would know

00:56:49,850 --> 00:56:55,060
if there was from the right cool because

00:56:51,410 --> 00:56:55,060

YouTube URL: https://www.youtube.com/watch?v=DlgadZLOK-M


