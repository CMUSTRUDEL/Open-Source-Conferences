Title: Billie Thompson - MVVM and Silex - It's the future
Publication date: 2015-04-02
Playlist: PHP UK Conference 2015
Description: 
	There's two things that every cool new start-up wants to provide. A rich application like website, and an API. I'll be talking about how to use Silex and an AngularJS to create one. With lots of demos to go wrong, this talk is aimed at PHP developers that work closely with the frontend, some some knowledge of JavaScript is assumed. We'll touch on the cool things happening in the frontend space like Bower, Grunt, MVVM Frameworks, and how that might change how you write PHP.

https://www.dropbox.com/s/tr4721imn8s2hga/MVVM%20%26%20Silex.pdf?dl=0
Captions: 
	00:00:00,000 --> 00:00:02,060
you

00:00:05,360 --> 00:00:12,440
then when having a nice time at PHP UK

00:00:07,580 --> 00:00:20,390
so far cool so today I'm going to talk

00:00:12,440 --> 00:00:21,950
to you about mvvm and cylex so I'm Billy

00:00:20,390 --> 00:00:23,900
Thompson you might recognize me from the

00:00:21,950 --> 00:00:25,850
pitch pitcher I cunningly wore the same

00:00:23,900 --> 00:00:29,690
t-shirt so that ever know be able to

00:00:25,850 --> 00:00:31,400
tell i'm a contracting software

00:00:29,690 --> 00:00:32,750
developer i'm currently working with

00:00:31,400 --> 00:00:39,890
Sainsbury's the lovely people who are

00:00:32,750 --> 00:00:41,750
sponsoring some of this event and yeah

00:00:39,890 --> 00:00:43,430
so and I've previously worked for Los

00:00:41,750 --> 00:00:45,079
different companies and throughout that

00:00:43,430 --> 00:00:46,700
time I've noticed several trends which

00:00:45,079 --> 00:00:48,620
you are emerging in the software

00:00:46,700 --> 00:00:50,840
development industry particularly to do

00:00:48,620 --> 00:00:52,130
with front-end development and I'm going

00:00:50,840 --> 00:00:53,540
to talk about a few different things

00:00:52,130 --> 00:00:56,149
which are probably going to influence

00:00:53,540 --> 00:01:00,320
how you are going to write PHP in the

00:00:56,149 --> 00:01:04,070
future ok so this is going to be a sort

00:01:00,320 --> 00:01:05,899
of demo based talk so I thought I'd

00:01:04,070 --> 00:01:08,090
better lay down the sort of general area

00:01:05,899 --> 00:01:11,780
where the dam is going to be from so the

00:01:08,090 --> 00:01:13,520
domain is a bookshop the sub domain is

00:01:11,780 --> 00:01:14,630
the bookshops website because it's

00:01:13,520 --> 00:01:17,210
pretty hard to write software for things

00:01:14,630 --> 00:01:18,950
which on digital and the bounded context

00:01:17,210 --> 00:01:21,619
are going to be working within is a book

00:01:18,950 --> 00:01:23,299
information service and the book

00:01:21,619 --> 00:01:25,190
information service is just going to be

00:01:23,299 --> 00:01:29,900
a little website which lists as some

00:01:25,190 --> 00:01:32,030
details about books from which is well

00:01:29,900 --> 00:01:34,970
explained and if you're not familiar

00:01:32,030 --> 00:01:36,799
with these terms these are ddd terms the

00:01:34,970 --> 00:01:38,689
domain is the overall area that your

00:01:36,799 --> 00:01:41,299
problem is happening in the sub domain

00:01:38,689 --> 00:01:43,450
is focused in part of that and the

00:01:41,299 --> 00:01:46,460
bounded context is an area which used

00:01:43,450 --> 00:01:50,240
ubiquitous language within just so you

00:01:46,460 --> 00:01:51,439
know where I'm coming from there so this

00:01:50,240 --> 00:01:52,610
is what we're going to be building you

00:01:51,439 --> 00:01:54,439
might of seen the slider but the start

00:01:52,610 --> 00:01:58,070
so you can open up code and stuff on

00:01:54,439 --> 00:02:00,320
your devices and the book jacket API is

00:01:58,070 --> 00:02:01,490
going to be a really small API which is

00:02:00,320 --> 00:02:03,860
going to return you the sort of

00:02:01,490 --> 00:02:07,220
information that you have on the front

00:02:03,860 --> 00:02:10,069
of a book so like author maybe a picture

00:02:07,220 --> 00:02:13,030
of the cover of the book an ISBN number

00:02:10,069 --> 00:02:15,459
probably a bit of a description and the

00:02:13,030 --> 00:02:19,340
rating API is going to return as

00:02:15,459 --> 00:02:19,640
customer data so users ratings of the

00:02:19,340 --> 00:02:22,400
book

00:02:19,640 --> 00:02:24,560
what the end well the amount that what

00:02:22,400 --> 00:02:28,580
sort of thing they give it a 5 out of 10

00:02:24,560 --> 00:02:30,290
10 10 to i-10 and then we're going to

00:02:28,580 --> 00:02:32,450
pull this information together and we're

00:02:30,290 --> 00:02:34,760
going to have a sort of integration

00:02:32,450 --> 00:02:38,330
layer which is going to merge to API

00:02:34,760 --> 00:02:41,330
services and presenters a custom API for

00:02:38,330 --> 00:02:45,170
a web browser which is going to be

00:02:41,330 --> 00:02:46,370
running a full stack framework and the

00:02:45,170 --> 00:02:48,410
integration layer is we're going to do a

00:02:46,370 --> 00:02:50,450
little bit customization of code and

00:02:48,410 --> 00:02:52,459
making sure that the response that we

00:02:50,450 --> 00:02:54,110
send to the browser is specialized for

00:02:52,459 --> 00:02:59,570
the type of device that we're sending it

00:02:54,110 --> 00:03:01,880
to ok so rather than rushing into this

00:02:59,570 --> 00:03:05,239
and declaring that we're going to be

00:03:01,880 --> 00:03:08,150
using Silex straight out I thought I'd

00:03:05,239 --> 00:03:10,130
be better to lay down what the sort

00:03:08,150 --> 00:03:11,480
requirements for each service are so our

00:03:10,130 --> 00:03:14,000
back-end servers we need to choose

00:03:11,480 --> 00:03:16,160
frameworks and languages which are good

00:03:14,000 --> 00:03:18,709
solid choices for back-end servers so

00:03:16,160 --> 00:03:20,900
solid for database interactions solid

00:03:18,709 --> 00:03:22,700
for cues and solid for business logic

00:03:20,900 --> 00:03:24,079
generally so something that we're pretty

00:03:22,700 --> 00:03:25,340
familiar with pretty comfortable with

00:03:24,079 --> 00:03:27,829
and know that we can implement the

00:03:25,340 --> 00:03:29,150
business requirements in for our

00:03:27,829 --> 00:03:30,530
middleware layer we need to choose

00:03:29,150 --> 00:03:32,810
something which is capable of making

00:03:30,530 --> 00:03:34,340
lots of connections in parallel and is

00:03:32,810 --> 00:03:36,799
what makes it easy to pull those

00:03:34,340 --> 00:03:39,170
together into a single response rather

00:03:36,799 --> 00:03:41,269
than having to do things in a

00:03:39,170 --> 00:03:42,769
non-blocking manner and because it's

00:03:41,269 --> 00:03:46,280
where our front-end web sites going to

00:03:42,769 --> 00:03:48,530
be served from we want to make sure that

00:03:46,280 --> 00:03:49,940
the front-end developers we're going to

00:03:48,530 --> 00:03:52,459
be working on the front-end code can

00:03:49,940 --> 00:03:54,380
easily work within it so that we don't

00:03:52,459 --> 00:03:57,260
have lots of problems with context

00:03:54,380 --> 00:03:58,400
switching and all those problems that

00:03:57,260 --> 00:04:00,230
you get when you try and switch between

00:03:58,400 --> 00:04:03,709
two code bases which work in two

00:04:00,230 --> 00:04:05,690
slightly different ways so the front end

00:04:03,709 --> 00:04:07,880
we obviously we're not just going to

00:04:05,690 --> 00:04:09,440
dump a load of JavaScript all over our

00:04:07,880 --> 00:04:11,120
website so we want to use a framework

00:04:09,440 --> 00:04:12,739
which is going to make it easy for us to

00:04:11,120 --> 00:04:15,890
build a responsive website so it's

00:04:12,739 --> 00:04:19,310
responsive to user interactions and also

00:04:15,890 --> 00:04:22,250
extensible and clean which is pretty

00:04:19,310 --> 00:04:23,870
basic requirements now the frameworks

00:04:22,250 --> 00:04:25,430
which I think fit really well into this

00:04:23,870 --> 00:04:27,229
so for the back end they're going to

00:04:25,430 --> 00:04:28,789
choose something that were i popoli lots

00:04:27,229 --> 00:04:33,020
of those are very familiar with and that

00:04:28,789 --> 00:04:34,550
is cylex it's a really nice micro

00:04:33,020 --> 00:04:36,900
framework

00:04:34,550 --> 00:04:39,690
toolkit and I'll talk a little bit more

00:04:36,900 --> 00:04:40,680
about that in a minute for the back end

00:04:39,690 --> 00:04:42,590
I'm going to eat for the integration

00:04:40,680 --> 00:04:44,370
layer I'm going to use a server-side

00:04:42,590 --> 00:04:46,290
JavaScript framework and because

00:04:44,370 --> 00:04:47,820
javascripts non-blocking that makes it

00:04:46,290 --> 00:04:49,440
really good for making lots of requests

00:04:47,820 --> 00:04:51,030
in parallel and because it's in

00:04:49,440 --> 00:04:52,200
JavaScript a front-end developers are

00:04:51,030 --> 00:04:54,720
probably going to be pretty comfortable

00:04:52,200 --> 00:04:57,210
working with that so I'll run through a

00:04:54,720 --> 00:04:59,490
crash course in that and for a front-end

00:04:57,210 --> 00:05:01,860
stack are going to use angularjs because

00:04:59,490 --> 00:05:05,850
it's probably the most popular front-end

00:05:01,860 --> 00:05:07,260
framework which is out there okay he's

00:05:05,850 --> 00:05:09,960
probably seen this but in case you

00:05:07,260 --> 00:05:13,830
haven't filed feel free to open this up

00:05:09,960 --> 00:05:16,140
on your slides okay so why am I talking

00:05:13,830 --> 00:05:18,270
about this now the reason that i'm

00:05:16,140 --> 00:05:22,260
talking about javascript PHP conference

00:05:18,270 --> 00:05:25,260
is because of cross-functional teams now

00:05:22,260 --> 00:05:27,300
previously maybe three or four years ago

00:05:25,260 --> 00:05:29,850
lots of us used to work in these heavily

00:05:27,300 --> 00:05:31,680
siloed environments where you had a ops

00:05:29,850 --> 00:05:34,140
team who didn't really integrate with

00:05:31,680 --> 00:05:36,030
the development team the backend team

00:05:34,140 --> 00:05:38,670
and the front-end team maybe had their

00:05:36,030 --> 00:05:40,410
own little special unit as well and the

00:05:38,670 --> 00:05:41,910
testers you know they had their own

00:05:40,410 --> 00:05:44,460
little block and we never never the

00:05:41,910 --> 00:05:46,290
twain shall meet and then occasionally

00:05:44,460 --> 00:05:47,760
you might sometimes if you look you get

00:05:46,290 --> 00:05:53,070
some input from products about what you

00:05:47,760 --> 00:05:55,500
should be making so so we decided that

00:05:53,070 --> 00:05:57,330
was probably a bad idea and we switched

00:05:55,500 --> 00:05:59,730
to using cross-functional teams now

00:05:57,330 --> 00:06:01,380
cross-functional teams have one of every

00:05:59,730 --> 00:06:02,700
single type in one of every single

00:06:01,380 --> 00:06:05,940
flavor we have a representative from

00:06:02,700 --> 00:06:08,280
product hopefully and we have some

00:06:05,940 --> 00:06:09,930
testers we have some ops people we have

00:06:08,280 --> 00:06:11,670
some developers and we have some

00:06:09,930 --> 00:06:13,670
front-end people and we all work really

00:06:11,670 --> 00:06:16,050
closely and we spend a lot of time

00:06:13,670 --> 00:06:18,180
helping each other out with problems and

00:06:16,050 --> 00:06:20,250
we are dedicated to fixing the app to

00:06:18,180 --> 00:06:21,990
develop developing the feature we're

00:06:20,250 --> 00:06:23,910
supposed to be developing rather than

00:06:21,990 --> 00:06:27,180
developing our tiny portion of the code

00:06:23,910 --> 00:06:29,010
so we're really feature focused but this

00:06:27,180 --> 00:06:31,020
does have some downsides it means that

00:06:29,010 --> 00:06:34,200
at some point you might get to the

00:06:31,020 --> 00:06:36,810
situation where you as a PHP developer

00:06:34,200 --> 00:06:39,750
have to do some JavaScript maybe your

00:06:36,810 --> 00:06:40,920
front-end developer is off maybe they

00:06:39,750 --> 00:06:43,260
have a bit of a problem and it's

00:06:40,920 --> 00:06:44,760
something in between the two AP is so

00:06:43,260 --> 00:06:46,800
it's useful to have a bit of a grounding

00:06:44,760 --> 00:06:47,460
in JavaScript frameworks and also I

00:06:46,800 --> 00:06:51,060
think that

00:06:47,460 --> 00:06:54,000
darn cool so that's why I'm going to be

00:06:51,060 --> 00:06:55,949
talking about these things today so I've

00:06:54,000 --> 00:06:59,550
also structured my API around

00:06:55,949 --> 00:07:02,940
microservices and this is because teams

00:06:59,550 --> 00:07:05,250
are cross-functional teams are small and

00:07:02,940 --> 00:07:06,660
focused on the task at hand they don't

00:07:05,250 --> 00:07:09,240
have 50 people in them because you can't

00:07:06,660 --> 00:07:13,069
easily focus 50 people on a single

00:07:09,240 --> 00:07:15,599
feature we have maybe nine people

00:07:13,069 --> 00:07:17,400
focusing on a single product which means

00:07:15,599 --> 00:07:18,930
that we can only prove small things but

00:07:17,400 --> 00:07:21,000
if we produce lots of small things and

00:07:18,930 --> 00:07:23,430
make them work together well we get lots

00:07:21,000 --> 00:07:26,520
of opportunities for doing additional

00:07:23,430 --> 00:07:29,789
metrics and gaining additional utility

00:07:26,520 --> 00:07:31,889
out of our system from the get-go which

00:07:29,789 --> 00:07:37,979
is fantastic so dare I use the

00:07:31,889 --> 00:07:40,860
management term synergy ok so

00:07:37,979 --> 00:07:42,300
why javascript so more specifically why

00:07:40,860 --> 00:07:46,470
javascript now so Java scripts been

00:07:42,300 --> 00:07:49,289
around for a long time and it's been

00:07:46,470 --> 00:07:51,030
solved it used to be a kind of a sort

00:07:49,289 --> 00:07:52,710
place where you do lots of code and then

00:07:51,030 --> 00:07:54,780
you'd go and then you tack a bit of

00:07:52,710 --> 00:07:56,669
JavaScript on top of something else and

00:07:54,780 --> 00:07:59,130
it never solved like developed more than

00:07:56,669 --> 00:08:01,800
that but then a few years ago someone

00:07:59,130 --> 00:08:03,659
took the v8 engine out of chrome and

00:08:01,800 --> 00:08:07,650
wrapped it up with some really useful

00:08:03,659 --> 00:08:10,229
server-side libraries and made no Jess

00:08:07,650 --> 00:08:11,310
and from this really powerful tool we

00:08:10,229 --> 00:08:14,070
started getting some really interesting

00:08:11,310 --> 00:08:16,440
tooling surrounding JavaScript we

00:08:14,070 --> 00:08:18,810
started getting proper frameworks which

00:08:16,440 --> 00:08:21,659
allow us to do testing one of the first

00:08:18,810 --> 00:08:23,099
was out there was backbone and start to

00:08:21,659 --> 00:08:24,509
structure a really nice project and

00:08:23,099 --> 00:08:26,570
along with these came things like

00:08:24,509 --> 00:08:29,430
package managers so we've got em p.m.

00:08:26,570 --> 00:08:31,530
which allows us to package things up and

00:08:29,430 --> 00:08:33,060
share them which means people start

00:08:31,530 --> 00:08:35,120
caring about how their code looks a lot

00:08:33,060 --> 00:08:37,529
more because people are going to use it

00:08:35,120 --> 00:08:39,690
and with this obviously came mature

00:08:37,529 --> 00:08:41,219
support tools like grunt which is a task

00:08:39,690 --> 00:08:43,020
runner and allows us to do loads of

00:08:41,219 --> 00:08:45,000
really cool things in JavaScript so

00:08:43,020 --> 00:08:45,839
JavaScript is a really mature platform

00:08:45,000 --> 00:08:49,320
and there's some really interesting

00:08:45,839 --> 00:08:51,630
things going on there ok so by the end

00:08:49,320 --> 00:08:53,940
of this talk I hope you have a working

00:08:51,630 --> 00:08:55,380
knowledge in service on JavaScript on

00:08:53,940 --> 00:08:57,990
the server side I hope you have a

00:08:55,380 --> 00:08:59,339
working knowledge of JavaScript on the

00:08:57,990 --> 00:09:00,410
client-side how to use a full stack

00:08:59,339 --> 00:09:02,209
frame work

00:09:00,410 --> 00:09:04,459
I hope you have an appreciation of how

00:09:02,209 --> 00:09:05,810
you might integrate those with PHP I'm

00:09:04,459 --> 00:09:07,879
going to give you a few options or if

00:09:05,810 --> 00:09:09,350
you don't quite like my idea and I hope

00:09:07,879 --> 00:09:10,670
by the end of this you can walk out and

00:09:09,350 --> 00:09:12,290
you can call yourself a cross stack

00:09:10,670 --> 00:09:15,529
developer if you don't already course it

00:09:12,290 --> 00:09:18,290
call yourself are ok so I'm going to

00:09:15,529 --> 00:09:24,620
start with silex because it's PHP we all

00:09:18,290 --> 00:09:27,470
love PHP do you love PHP ok so if you're

00:09:24,620 --> 00:09:30,410
not familiar with silex here's a bit of

00:09:27,470 --> 00:09:31,879
a recap it's a micro framework it's

00:09:30,410 --> 00:09:33,529
feeling symphony components so you know

00:09:31,879 --> 00:09:35,689
it's going to be rock solid and really

00:09:33,529 --> 00:09:37,040
good and I'm hoping that lots of you

00:09:35,689 --> 00:09:40,220
have used it so I went to spend loads of

00:09:37,040 --> 00:09:43,730
time right has it put your hand up if

00:09:40,220 --> 00:09:47,329
you've used silex there's loads of you

00:09:43,730 --> 00:09:50,050
brilliant okay so getting started with

00:09:47,329 --> 00:09:52,670
silex is dead easy super easy peasy

00:09:50,050 --> 00:09:54,620
basically all you need is composer you

00:09:52,670 --> 00:09:56,180
included in your composure file did

00:09:54,620 --> 00:09:59,120
everyone go to the hope everyone went to

00:09:56,180 --> 00:10:00,889
the composer talk yesterday that would

00:09:59,120 --> 00:10:05,029
tell you how to do that and then you

00:10:00,889 --> 00:10:07,399
include autoloader from composer into a

00:10:05,029 --> 00:10:09,139
single PHP file and then instance it a

00:10:07,399 --> 00:10:12,019
single object and that's basically how

00:10:09,139 --> 00:10:13,819
you get Silas application for running so

00:10:12,019 --> 00:10:16,279
i'm going to show you this in a bit of a

00:10:13,819 --> 00:10:19,819
bit of a exciting demo hopefully it

00:10:16,279 --> 00:10:21,980
won't break and i'm going to demo to you

00:10:19,819 --> 00:10:23,720
the book jacket api so it's going to

00:10:21,980 --> 00:10:25,930
show return you some information about a

00:10:23,720 --> 00:10:25,930
book

00:10:33,000 --> 00:10:38,439
okay so if you want you can actually hit

00:10:36,730 --> 00:10:39,639
this URL on your phone as well and you

00:10:38,439 --> 00:10:42,579
should actually get the same thing back

00:10:39,639 --> 00:10:47,410
if you can't quite see it and so you can

00:10:42,579 --> 00:10:49,509
see it's just your son for the book

00:10:47,410 --> 00:10:51,129
crossover by Joel Shepherd really liked

00:10:49,509 --> 00:10:53,850
that book by the way so all the books on

00:10:51,129 --> 00:10:56,199
here from my like top 10 list of books

00:10:53,850 --> 00:10:57,699
and you can see there's a few things in

00:10:56,199 --> 00:10:59,829
there there's an ISBN there's a

00:10:57,699 --> 00:11:00,939
description there's an author it's

00:10:59,829 --> 00:11:05,800
pretty much everything that you need for

00:11:00,939 --> 00:11:10,540
a little application and this is a run

00:11:05,800 --> 00:11:12,370
by like I said basically two files so

00:11:10,540 --> 00:11:13,839
here's the book jacket API don't worry

00:11:12,370 --> 00:11:15,459
if you can't see it i'm going to show

00:11:13,839 --> 00:11:18,550
the code on the slide in a minute so

00:11:15,459 --> 00:11:20,860
everyone will be able to read it so we

00:11:18,550 --> 00:11:22,990
have a public index and in there is some

00:11:20,860 --> 00:11:25,720
basic like rooting stuff and we also

00:11:22,990 --> 00:11:32,439
have a controller which i'll show you by

00:11:25,720 --> 00:11:34,230
a minute okay so i said that you needed

00:11:32,439 --> 00:11:37,000
like two lines of code to start off a

00:11:34,230 --> 00:11:39,189
silex application that's all you need to

00:11:37,000 --> 00:11:40,980
start the application just New York the

00:11:39,189 --> 00:11:43,120
silex application and you're ready to go

00:11:40,980 --> 00:11:44,500
by the way if you look at the top of the

00:11:43,120 --> 00:11:46,389
thing if you ever feel a little bit lost

00:11:44,500 --> 00:11:48,819
in the comments and all the code of the

00:11:46,389 --> 00:11:50,819
slider put which file its running in and

00:11:48,819 --> 00:11:54,490
i'll put the slides up online later on

00:11:50,819 --> 00:11:55,930
so obviously running cylex isn't very

00:11:54,490 --> 00:11:57,819
useful if you don't have any roots if

00:11:55,930 --> 00:12:00,759
you don't return anything so here's how

00:11:57,819 --> 00:12:03,220
to do a really basic root in silex this

00:12:00,759 --> 00:12:05,980
is your typical hello whatever example

00:12:03,220 --> 00:12:07,600
and so we've got get hello and then

00:12:05,980 --> 00:12:10,930
little curly brackets which mean

00:12:07,600 --> 00:12:12,610
parameter and then we've got a little

00:12:10,930 --> 00:12:14,709
lambda function that will passing to it

00:12:12,610 --> 00:12:16,059
and we're returning hello and all this

00:12:14,709 --> 00:12:18,790
will do is return a string which is

00:12:16,059 --> 00:12:20,110
hello which is okay and it kind of works

00:12:18,790 --> 00:12:22,180
this one little example because it's

00:12:20,110 --> 00:12:24,819
only a really tiny example but imagine

00:12:22,180 --> 00:12:26,589
if you had like 10 20 lines of code in

00:12:24,819 --> 00:12:31,870
there I know controller should only be

00:12:26,589 --> 00:12:33,309
one line but uh but it starts getting a

00:12:31,870 --> 00:12:34,990
it's going to start getting a bit messy

00:12:33,309 --> 00:12:36,430
so it'd be much better and the much

00:12:34,990 --> 00:12:38,949
preferred way is to put these into

00:12:36,430 --> 00:12:42,220
controller objects now this is really

00:12:38,949 --> 00:12:44,139
easy with silex now silex is based off

00:12:42,220 --> 00:12:45,520
the dependency injection contain a

00:12:44,139 --> 00:12:49,210
pimple among other things

00:12:45,520 --> 00:12:50,980
and this means that you can describe

00:12:49,210 --> 00:12:53,560
services that you're going to inject

00:12:50,980 --> 00:12:56,980
really really easily so you can see here

00:12:53,560 --> 00:13:00,520
we've got appt share and we're newing up

00:12:56,980 --> 00:13:01,840
the books controller and you can see

00:13:00,520 --> 00:13:03,460
that books controller so we've now

00:13:01,840 --> 00:13:06,180
defined that as a service which is

00:13:03,460 --> 00:13:08,980
really cool and then we've registered

00:13:06,180 --> 00:13:11,830
the service controller service provider

00:13:08,980 --> 00:13:14,770
definitely not a mouthful and we're

00:13:11,830 --> 00:13:17,620
going to we can now define routes which

00:13:14,770 --> 00:13:19,180
call methods on that controller so we've

00:13:17,620 --> 00:13:20,770
got two down here at the moment got /

00:13:19,180 --> 00:13:22,480
which is going to be index action which

00:13:20,770 --> 00:13:26,290
is going to return as a list of book

00:13:22,480 --> 00:13:31,500
jacket and we've got the ISBN which is

00:13:26,290 --> 00:13:34,030
going to get as a specific book okay so

00:13:31,500 --> 00:13:35,020
unlike other frameworks you don't have

00:13:34,030 --> 00:13:38,470
to worry about looking up your

00:13:35,020 --> 00:13:41,080
inheritance tree by extending a specific

00:13:38,470 --> 00:13:43,240
class to make a controller you can just

00:13:41,080 --> 00:13:47,020
have a plain old object and so long as

00:13:43,240 --> 00:13:49,630
it returns a symphony response type your

00:13:47,020 --> 00:13:51,820
golden basically in this case I've

00:13:49,630 --> 00:13:53,890
chosen to return just honest response

00:13:51,820 --> 00:13:55,750
there's a few of the response types

00:13:53,890 --> 00:13:58,330
which are predefined by symphony which

00:13:55,750 --> 00:13:59,500
you could also return here but your son

00:13:58,330 --> 00:14:03,640
response is obviously brilliant if you

00:13:59,500 --> 00:14:05,320
want to make a really quick API okay so

00:14:03,640 --> 00:14:07,600
silex is really cool for the for like

00:14:05,320 --> 00:14:10,270
business logic it's great for doing sort

00:14:07,600 --> 00:14:11,470
of rapid microservice development and it

00:14:10,270 --> 00:14:15,460
works really well with familiar

00:14:11,470 --> 00:14:18,040
libraries like doctrine or again with

00:14:15,460 --> 00:14:20,680
just any pretty much any symphony paste

00:14:18,040 --> 00:14:22,960
project it's the only perfect for small

00:14:20,680 --> 00:14:24,940
services though and as soon as we start

00:14:22,960 --> 00:14:26,770
doing more complicated things we're

00:14:24,940 --> 00:14:29,200
going to find that developing glue

00:14:26,770 --> 00:14:31,510
application to do things like you know

00:14:29,200 --> 00:14:33,040
right to elasticsearch or right accuse

00:14:31,510 --> 00:14:34,810
and things soon get starts getting quite

00:14:33,040 --> 00:14:37,420
tedious so you might want to choose a

00:14:34,810 --> 00:14:39,550
one of a different sort of approach to

00:14:37,420 --> 00:14:41,620
this and so one which was mentioned

00:14:39,550 --> 00:14:44,170
earlier on I think in the previous slot

00:14:41,620 --> 00:14:47,170
is API agility which is fantastic for

00:14:44,170 --> 00:14:48,400
making restful api so it's like get some

00:14:47,170 --> 00:14:49,960
nice wizard and can get you everything

00:14:48,400 --> 00:14:51,970
set up really really quickly for crude

00:14:49,960 --> 00:14:54,370
operations there's obviously Zen

00:14:51,970 --> 00:14:56,560
framework to as well and I think in the

00:14:54,370 --> 00:14:58,960
next session you could use this sort

00:14:56,560 --> 00:14:59,260
someone's talking about Sarah's talking

00:14:58,960 --> 00:15:01,480
about

00:14:59,260 --> 00:15:03,460
restful webservices built easily with

00:15:01,480 --> 00:15:07,230
symphony so there's loads of stuff there

00:15:03,460 --> 00:15:10,150
if you're interested in that okay so

00:15:07,230 --> 00:15:12,220
mvvm what is mvvm since i titled the

00:15:10,150 --> 00:15:17,800
talks i like stone mvvm talked about

00:15:12,220 --> 00:15:19,030
cylex so mvvm is a basically a front-end

00:15:17,800 --> 00:15:20,410
framework is a sort of catch-all term

00:15:19,030 --> 00:15:22,300
the all implement this slightly

00:15:20,410 --> 00:15:24,640
differently in the same way that most

00:15:22,300 --> 00:15:27,040
MVC frameworks implement MVC slightly

00:15:24,640 --> 00:15:32,710
differently the three main ones are

00:15:27,040 --> 00:15:36,700
angularjs ember and backbone sort of so

00:15:32,710 --> 00:15:38,950
what is an mvvm framework so an mvvm

00:15:36,700 --> 00:15:41,020
framework looks like this it has a view

00:15:38,950 --> 00:15:43,180
so you can think of the view as your

00:15:41,020 --> 00:15:45,550
HTML template on the page and it has

00:15:43,180 --> 00:15:47,230
things like on it like a button that you

00:15:45,550 --> 00:15:49,840
can click for example as part of a long

00:15:47,230 --> 00:15:52,810
form and when you click this button

00:15:49,840 --> 00:15:56,140
because it's JavaScript and event fires

00:15:52,810 --> 00:15:59,110
and goes up this up to the view model

00:15:56,140 --> 00:16:01,000
and the view model turns this button

00:15:59,110 --> 00:16:03,700
clicked event into something a bit more

00:16:01,000 --> 00:16:06,190
complicated it turns into a user is

00:16:03,700 --> 00:16:08,110
create a new user created event which is

00:16:06,190 --> 00:16:11,020
then passed to the model and the model

00:16:08,110 --> 00:16:13,000
then persists that somehow either in

00:16:11,020 --> 00:16:15,040
local storage or passes up to an API

00:16:13,000 --> 00:16:17,680
depending on depending on what you need

00:16:15,040 --> 00:16:20,200
which is not that dissimilar to sort of

00:16:17,680 --> 00:16:22,330
let in a standard MVC framework however

00:16:20,200 --> 00:16:24,340
there is one major difference because

00:16:22,330 --> 00:16:26,470
it's entirely event-based we can

00:16:24,340 --> 00:16:29,110
actually push events the other way so

00:16:26,470 --> 00:16:31,960
remote API can make a change to the

00:16:29,110 --> 00:16:33,970
model the model can then notify the view

00:16:31,960 --> 00:16:36,280
model and then the view can push those

00:16:33,970 --> 00:16:37,840
changes out onto the page without the

00:16:36,280 --> 00:16:40,270
user having to make any initial

00:16:37,840 --> 00:16:43,780
interaction to start the request which i

00:16:40,270 --> 00:16:46,390
think is really cool okay so why am I

00:16:43,780 --> 00:16:49,630
talking about angularjs well this is why

00:16:46,390 --> 00:16:51,130
I'm talking about angularjs it's the red

00:16:49,630 --> 00:16:53,220
lines angularjs in case you can't guess

00:16:51,130 --> 00:16:55,900
and it's really really popular

00:16:53,220 --> 00:17:02,200
everyone's using it so you should as

00:16:55,900 --> 00:17:03,970
well and I will okay so getting started

00:17:02,200 --> 00:17:05,980
with angular jess is really easy I won't

00:17:03,970 --> 00:17:07,839
show you this because initially when I

00:17:05,980 --> 00:17:09,490
wrote the stock had like ten slides of

00:17:07,839 --> 00:17:12,520
me installing stuff into different

00:17:09,490 --> 00:17:13,130
environments but a wasn't terribly

00:17:12,520 --> 00:17:14,480
exciting

00:17:13,130 --> 00:17:17,660
so basically all you have to do is

00:17:14,480 --> 00:17:20,690
include some JavaScript files into your

00:17:17,660 --> 00:17:22,940
HTML template i choose to pull these in

00:17:20,690 --> 00:17:27,140
using bower bower is really similar to

00:17:22,940 --> 00:17:28,970
composer but for for other herb for like

00:17:27,140 --> 00:17:32,450
front end components such as HTML

00:17:28,970 --> 00:17:34,820
boilerplate and things like that it's

00:17:32,450 --> 00:17:39,650
got a real focus on UI components you

00:17:34,820 --> 00:17:41,420
can also use NPM if you prefer okay so

00:17:39,650 --> 00:17:43,460
now i'm going to show you the front end

00:17:41,420 --> 00:17:52,880
in angularjs and then i'll run through

00:17:43,460 --> 00:17:54,980
how that works code wise okay so this is

00:17:52,880 --> 00:17:58,250
it this is the dream this is the

00:17:54,980 --> 00:18:01,520
angularjs application running in a

00:17:58,250 --> 00:18:04,640
little web browser it's highly complex

00:18:01,520 --> 00:18:06,350
it's got a total of two pages so you can

00:18:04,640 --> 00:18:08,990
click on seal the page and you can see

00:18:06,350 --> 00:18:10,550
like a little bit of a rating here and

00:18:08,990 --> 00:18:13,340
you can see that the rating changes

00:18:10,550 --> 00:18:18,050
automatically depending on as users vote

00:18:13,340 --> 00:18:19,550
just pretty wild ok so again I'll just

00:18:18,050 --> 00:18:21,500
give you a quick tour of the code base

00:18:19,550 --> 00:18:24,800
in the IDE and then I'll talk you

00:18:21,500 --> 00:18:25,910
through the code properly so because

00:18:24,800 --> 00:18:27,680
this is all front end they pretty much

00:18:25,910 --> 00:18:29,600
all lives in the public we have some

00:18:27,680 --> 00:18:31,670
JavaScript files in our JavaScript

00:18:29,600 --> 00:18:34,820
angular directory three appcontroller

00:18:31,670 --> 00:18:36,260
services and we have some views and only

00:18:34,820 --> 00:18:39,200
one of these is really relevant to our

00:18:36,260 --> 00:18:40,370
application and that's index Jade now I

00:18:39,200 --> 00:18:41,690
realize that you can't see that at all

00:18:40,370 --> 00:18:48,230
so I'll flick back to the presentation

00:18:41,690 --> 00:18:50,450
which you can see okay so in case you're

00:18:48,230 --> 00:18:52,250
wondering jade is yet another templating

00:18:50,450 --> 00:18:56,180
language but it's the default templating

00:18:52,250 --> 00:18:58,400
language of Express and it's pretty easy

00:18:56,180 --> 00:19:00,620
to understand so curly brackets means

00:18:58,400 --> 00:19:04,690
attributes space means put stuff in the

00:19:00,620 --> 00:19:06,710
tag and this is what it comes out with

00:19:04,690 --> 00:19:08,450
I'm going to be mostly showing you stuff

00:19:06,710 --> 00:19:12,250
in Jade because a little bit shorter and

00:19:08,450 --> 00:19:15,110
fits on the slides a bit nicer okay so

00:19:12,250 --> 00:19:17,660
there's three key files here that we're

00:19:15,110 --> 00:19:20,300
including from angularjs the first of

00:19:17,660 --> 00:19:21,590
those files is angularjs itself and then

00:19:20,300 --> 00:19:23,900
we're going to load in two additional

00:19:21,590 --> 00:19:25,850
modules anglia angularjs is highly

00:19:23,900 --> 00:19:26,809
modular and based around dependency

00:19:25,850 --> 00:19:28,820
injection

00:19:26,809 --> 00:19:30,559
so the two additional modules I'm going

00:19:28,820 --> 00:19:32,450
to include is angular resource which is

00:19:30,559 --> 00:19:36,230
a great little library for making

00:19:32,450 --> 00:19:39,529
restful restful api api client spangler

00:19:36,230 --> 00:19:42,980
jess and there's angular root which is

00:19:39,529 --> 00:19:46,999
really good for making doing that multi

00:19:42,980 --> 00:19:49,399
page setup they showed you okay and then

00:19:46,999 --> 00:19:51,529
there's the three files which I wrote in

00:19:49,399 --> 00:19:53,659
order to do to write make that slight

00:19:51,529 --> 00:19:56,529
work and that's app services and

00:19:53,659 --> 00:19:59,840
controllers and these roughly map to

00:19:56,529 --> 00:20:01,999
model view model which is controllers

00:19:59,840 --> 00:20:07,700
and app which sort of controls of you

00:20:01,999 --> 00:20:08,720
it's not quite perfect okay so one thing

00:20:07,700 --> 00:20:11,119
that you might have noticed from the

00:20:08,720 --> 00:20:12,740
template is there is a little thing in

00:20:11,119 --> 00:20:16,580
the HTML tag which maybe shouldn't be

00:20:12,740 --> 00:20:18,289
there and they is the ng apt tag and you

00:20:16,580 --> 00:20:21,200
can see just below so this is from the

00:20:18,289 --> 00:20:24,350
apt ojs a similar sort of string here

00:20:21,200 --> 00:20:26,779
which is books app now angularjs works

00:20:24,350 --> 00:20:28,190
on the basis of scopes so you have an

00:20:26,779 --> 00:20:30,710
outer scope and then within that you

00:20:28,190 --> 00:20:32,090
have narrower and narrower scopes the

00:20:30,710 --> 00:20:33,499
first scope that we can define is the

00:20:32,090 --> 00:20:34,700
one for the entire application and

00:20:33,499 --> 00:20:37,940
because I wanted to manage the entire

00:20:34,700 --> 00:20:39,259
page I just stick it on the HTML tag the

00:20:37,940 --> 00:20:41,210
other things that you can see here in

00:20:39,259 --> 00:20:44,240
the initial initialization of my

00:20:41,210 --> 00:20:47,149
angularjs application is ng resource and

00:20:44,240 --> 00:20:48,619
NGO route which are the two additional

00:20:47,149 --> 00:20:50,600
modules that i mentioned that i wanted

00:20:48,619 --> 00:20:52,399
inject it into the system and the book

00:20:50,600 --> 00:20:54,830
service and the books controller which

00:20:52,399 --> 00:20:56,659
are the other two modules that defined

00:20:54,830 --> 00:21:00,440
for the system that are roughly

00:20:56,659 --> 00:21:02,149
analogous to model and view model okay

00:21:00,440 --> 00:21:04,610
so a little bit further down this file

00:21:02,149 --> 00:21:05,869
we've got another we've got the

00:21:04,610 --> 00:21:08,119
configuration for how we're going to

00:21:05,869 --> 00:21:09,619
route things within this application so

00:21:08,119 --> 00:21:11,960
we've got a routes provider at the top

00:21:09,619 --> 00:21:13,279
inside a string and then inside of just

00:21:11,960 --> 00:21:15,710
below that we've got a little function

00:21:13,279 --> 00:21:17,480
which says dollar route provider and

00:21:15,710 --> 00:21:20,350
what this does to angular jess is it

00:21:17,480 --> 00:21:23,269
says please inject me the route provider

00:21:20,350 --> 00:21:26,360
service into my function and with this

00:21:23,269 --> 00:21:29,029
we're going to define some routes so you

00:21:26,360 --> 00:21:31,879
can see that each route has a couple of

00:21:29,029 --> 00:21:33,259
things so we have well firstly we have

00:21:31,879 --> 00:21:36,110
the route itself which is slash and then

00:21:33,259 --> 00:21:39,019
we have a template URL so angular jess

00:21:36,110 --> 00:21:40,070
like pretty much every other templating

00:21:39,019 --> 00:21:42,170
language users

00:21:40,070 --> 00:21:43,610
individual templates for each component

00:21:42,170 --> 00:21:45,320
so you're not generating massive files

00:21:43,610 --> 00:21:47,930
you only pull in the bits you need and

00:21:45,320 --> 00:21:49,970
then just below that we specify what the

00:21:47,930 --> 00:21:52,160
controller is that's going to manage

00:21:49,970 --> 00:21:55,970
this and this is what's going to define

00:21:52,160 --> 00:21:58,070
where the data comes from and then again

00:21:55,970 --> 00:22:01,040
we have the same thing for ISBN and at

00:21:58,070 --> 00:22:02,600
the bottom we have a redirects to the

00:22:01,040 --> 00:22:04,310
reason by the way that we inject roots

00:22:02,600 --> 00:22:06,470
provider is a string and then have

00:22:04,310 --> 00:22:08,420
dollar roots provided just below is in

00:22:06,470 --> 00:22:10,370
case we decide to minify the JavaScript

00:22:08,420 --> 00:22:13,310
obviously the variable names will change

00:22:10,370 --> 00:22:15,170
and it's so we can maintain a consistent

00:22:13,310 --> 00:22:18,440
way of tracking what should be injected

00:22:15,170 --> 00:22:20,900
into each function now right at the bomb

00:22:18,440 --> 00:22:23,300
you can see that from the index view

00:22:20,900 --> 00:22:25,790
again the last thing in that file was a

00:22:23,300 --> 00:22:27,980
div with an ng view on now this is where

00:22:25,790 --> 00:22:31,040
the content from these templates when

00:22:27,980 --> 00:22:34,700
it's pulled in by angularjs is is going

00:22:31,040 --> 00:22:36,110
to be put okay so this is what one of

00:22:34,700 --> 00:22:37,250
those templates look like this is what

00:22:36,110 --> 00:22:39,530
the index one you know that list of

00:22:37,250 --> 00:22:42,530
books so we've got an index controller

00:22:39,530 --> 00:22:45,350
he's got title book list and it's got

00:22:42,530 --> 00:22:47,090
this thing ng repeat so ng repeat is

00:22:45,350 --> 00:22:50,390
sort of like a for each loop for

00:22:47,090 --> 00:22:54,110
angularjs and we have books in book

00:22:50,390 --> 00:22:55,430
books means like a set of books and it's

00:22:54,110 --> 00:22:57,140
something that we pass into the scope

00:22:55,430 --> 00:23:00,170
which is where we put our view

00:22:57,140 --> 00:23:01,700
parameters and then we have book which

00:23:00,170 --> 00:23:03,410
is obviously the single instance of it

00:23:01,700 --> 00:23:05,090
around the loop and then we output it

00:23:03,410 --> 00:23:06,770
and the thing which has ng repeating

00:23:05,090 --> 00:23:11,600
it's an li and it's going to be repeated

00:23:06,770 --> 00:23:13,010
every time we have a book okay so this

00:23:11,600 --> 00:23:14,270
is what a controller looks like this is

00:23:13,010 --> 00:23:17,000
where it's going to get the data so

00:23:14,270 --> 00:23:19,370
we've got a module books control at the

00:23:17,000 --> 00:23:21,440
top there which the which is defined

00:23:19,370 --> 00:23:23,440
what this player this is the class which

00:23:21,440 --> 00:23:25,280
is going to be injected into our

00:23:23,440 --> 00:23:27,740
application when we define it in the

00:23:25,280 --> 00:23:29,660
first app yes we've got an index

00:23:27,740 --> 00:23:32,240
controller which requires a couple of

00:23:29,660 --> 00:23:34,460
things and it requires a scope and a

00:23:32,240 --> 00:23:36,950
book so the scope is where we put things

00:23:34,460 --> 00:23:38,750
from the view and that gets pushed out

00:23:36,950 --> 00:23:41,720
to the template and every time we

00:23:38,750 --> 00:23:44,630
rebuild the scope then we regenerate the

00:23:41,720 --> 00:23:46,820
view and doing this sort of book query

00:23:44,630 --> 00:23:50,600
thing because I've used a pre-built

00:23:46,820 --> 00:23:53,090
angularjs application approval angularjs

00:23:50,600 --> 00:23:53,950
module is going to rebuild the scope for

00:23:53,090 --> 00:23:57,919
me automatically

00:23:53,950 --> 00:23:59,150
okay so this is how we define a web

00:23:57,919 --> 00:24:01,279
service really really simply in

00:23:59,150 --> 00:24:02,900
angularjs it's what like five lines

00:24:01,279 --> 00:24:06,799
which I think it's pretty good for an

00:24:02,900 --> 00:24:10,039
API client really and so we specify book

00:24:06,799 --> 00:24:12,350
service and we have factory for book and

00:24:10,039 --> 00:24:13,400
then we request resource don't worry

00:24:12,350 --> 00:24:17,059
about timeout or comments that in a

00:24:13,400 --> 00:24:18,529
little bit and we have API resource and

00:24:17,059 --> 00:24:20,750
we're going to request a resource and

00:24:18,529 --> 00:24:22,309
say that is Ben is the ID and this will

00:24:20,750 --> 00:24:25,510
provide us with an object which has a

00:24:22,309 --> 00:24:27,919
whole bunch of functions like query get

00:24:25,510 --> 00:24:32,690
that's about it really and if you're in

00:24:27,919 --> 00:24:34,220
a couple of other things okay so if that

00:24:32,690 --> 00:24:36,020
basically gives us everything in order

00:24:34,220 --> 00:24:39,830
to do basically what on MVC application

00:24:36,020 --> 00:24:41,419
does and pass objects one way through a

00:24:39,830 --> 00:24:43,429
system but what if we have additional

00:24:41,419 --> 00:24:46,100
data coming from the other side system

00:24:43,429 --> 00:24:48,620
or if you want to push events in so I've

00:24:46,100 --> 00:24:50,809
asked you really easy so you can do

00:24:48,620 --> 00:24:53,960
things like this so I've defined an

00:24:50,809 --> 00:24:57,440
additional method on my book system and

00:24:53,960 --> 00:25:04,190
it's going to push in changes to the

00:24:57,440 --> 00:25:06,590
scope via the call back here and all we

00:25:04,190 --> 00:25:10,039
all is a simple method and then on scope

00:25:06,590 --> 00:25:11,330
on destroy will stop requesting the page

00:25:10,039 --> 00:25:16,039
over and over again when we're finished

00:25:11,330 --> 00:25:17,510
with it so I don't really have a long

00:25:16,039 --> 00:25:18,950
time connection here so it's just

00:25:17,510 --> 00:25:21,950
polling rather than doing a proper

00:25:18,950 --> 00:25:24,679
injection thing but there we go so

00:25:21,950 --> 00:25:27,020
pushing data to the API is actually

00:25:24,679 --> 00:25:29,270
really easy so inside our model we can

00:25:27,020 --> 00:25:31,460
extend with a couple of additional

00:25:29,270 --> 00:25:33,260
functionalities a couple of additional

00:25:31,460 --> 00:25:34,760
methods here I've just done it so your

00:25:33,260 --> 00:25:38,149
polls but obviously you can use long

00:25:34,760 --> 00:25:41,110
polling HTTP sessions flash causing or

00:25:38,149 --> 00:25:44,029
whatever fancy stuff you want to use and

00:25:41,110 --> 00:25:46,460
just pull out the data you'll notice

00:25:44,029 --> 00:25:50,210
that I'm calling API get api get is a

00:25:46,460 --> 00:25:53,690
method which is part of ng resource and

00:25:50,210 --> 00:25:55,640
is and it what it's going to do is get

00:25:53,690 --> 00:25:58,279
it's going to call a global scope

00:25:55,640 --> 00:26:00,049
rebuild when we call this when we call

00:25:58,279 --> 00:26:02,419
the callback on this method so we don't

00:26:00,049 --> 00:26:04,250
have to worry about the scope changing

00:26:02,419 --> 00:26:05,809
if you're writing a function like this

00:26:04,250 --> 00:26:07,520
entirely from scratch you'd have to

00:26:05,809 --> 00:26:12,200
rebuild a trigger the scope to be

00:26:07,520 --> 00:26:15,590
rebuilt in this method okay and that's

00:26:12,200 --> 00:26:17,360
just me canceling the property okay so

00:26:15,590 --> 00:26:21,650
that's roughly angularjs in about

00:26:17,360 --> 00:26:25,160
hopefully 15 minutes so there's a few

00:26:21,650 --> 00:26:26,660
other alternatives to angular Jess if

00:26:25,160 --> 00:26:28,220
you don't want to use that yesterday

00:26:26,660 --> 00:26:31,370
there was a really good talk on react

00:26:28,220 --> 00:26:33,230
Jess now react jess is a similar

00:26:31,370 --> 00:26:36,080
JavaScript framework accept it focuses

00:26:33,230 --> 00:26:38,060
on UI components in a tree like

00:26:36,080 --> 00:26:41,090
structure rather than offering you a

00:26:38,060 --> 00:26:43,040
full mvvm environment but that might be

00:26:41,090 --> 00:26:44,930
an option for you if you don't terribly

00:26:43,040 --> 00:26:46,930
like the don't want to have to do the

00:26:44,930 --> 00:26:49,160
model way that angular JS prescribes

00:26:46,930 --> 00:26:51,860
there's also backbone which is sort of

00:26:49,160 --> 00:26:53,690
like a framework for making these things

00:26:51,860 --> 00:26:55,460
rather than a full fully featured

00:26:53,690 --> 00:26:59,290
framework and then there's ember which

00:26:55,460 --> 00:27:04,040
is angularjs or less popular SAT cousin

00:26:59,290 --> 00:27:06,020
okay so that's basically how we're going

00:27:04,040 --> 00:27:08,180
to start doing a JavaScript development

00:27:06,020 --> 00:27:09,620
front-end development in the future it's

00:27:08,180 --> 00:27:11,600
definitely been a trend in the contracts

00:27:09,620 --> 00:27:15,470
that I've seen more and more places are

00:27:11,600 --> 00:27:17,360
using these tools and over time I expect

00:27:15,470 --> 00:27:19,250
everyone will be of in some form or

00:27:17,360 --> 00:27:21,260
another so you're definitely going to

00:27:19,250 --> 00:27:22,730
come across this but the good thing is

00:27:21,260 --> 00:27:25,580
that it's actually pretty simple it's

00:27:22,730 --> 00:27:27,110
pretty analogous to how service I'll

00:27:25,580 --> 00:27:28,880
server-side programming works it's

00:27:27,110 --> 00:27:30,680
pretty easy to understand so if you do

00:27:28,880 --> 00:27:32,390
need to write some of this yourself or

00:27:30,680 --> 00:27:33,940
help out a front-end developer then

00:27:32,390 --> 00:27:36,560
you're not going to have many problems

00:27:33,940 --> 00:27:38,770
the key thing to note though is it does

00:27:36,560 --> 00:27:41,750
depend quite heavily on data from api's

00:27:38,770 --> 00:27:44,090
and with their from AP is we don't

00:27:41,750 --> 00:27:48,080
really want to be exposing our entire

00:27:44,090 --> 00:27:49,370
API structure to the customer we want to

00:27:48,080 --> 00:27:50,510
be able to shield ourselves from some

00:27:49,370 --> 00:27:53,230
that request maybe put some

00:27:50,510 --> 00:27:55,550
authentication or klein rate-limiting

00:27:53,230 --> 00:27:57,620
and we can do this with a middleware

00:27:55,550 --> 00:27:59,090
layer and for this middle by layer i'm

00:27:57,620 --> 00:28:01,070
going to use Express which has a

00:27:59,090 --> 00:28:02,300
freaking boring logo I like it just not

00:28:01,070 --> 00:28:03,590
even supposed to be upside down like

00:28:02,300 --> 00:28:08,960
that is supposed to go flat but I

00:28:03,590 --> 00:28:10,430
thought you look goofy okay so this is

00:28:08,960 --> 00:28:13,070
the bit I'm talking about now the book

00:28:10,430 --> 00:28:15,140
info website and unless the bits which

00:28:13,070 --> 00:28:18,980
is serving angularjs more the API is

00:28:15,140 --> 00:28:21,350
angular jessica is calling so the reason

00:28:18,980 --> 00:28:23,690
I didn't go for PHP in this instance is

00:28:21,350 --> 00:28:27,559
I want to teach you about JavaScript but

00:28:23,690 --> 00:28:29,240
secondly PHP is a blocking language so

00:28:27,559 --> 00:28:30,590
it's not really a terribly good fit for

00:28:29,240 --> 00:28:33,500
this especially with this request

00:28:30,590 --> 00:28:35,150
lifecycle being its life cycle being the

00:28:33,500 --> 00:28:36,830
length of a request rather than longer

00:28:35,150 --> 00:28:39,140
so it doesn't have any support really

00:28:36,830 --> 00:28:41,059
for asynchronous honest so you have to

00:28:39,140 --> 00:28:43,429
do methods in this pattern so you have

00:28:41,059 --> 00:28:45,950
to get booking a gay book info website

00:28:43,429 --> 00:28:48,230
you have to get a book jacket from the

00:28:45,950 --> 00:28:50,120
API and then you have to go to the

00:28:48,230 --> 00:28:52,370
ratings API and pulling the data from

00:28:50,120 --> 00:28:56,330
there and then combine that somehow to

00:28:52,370 --> 00:28:58,010
present the rating to the user which is

00:28:56,330 --> 00:28:59,750
like a lot of waiting around when we

00:28:58,010 --> 00:29:02,450
could be making the rating API call at

00:28:59,750 --> 00:29:06,650
the same time as the book jacket now

00:29:02,450 --> 00:29:09,770
because no GS is based around JavaScript

00:29:06,650 --> 00:29:10,909
and non blocking callbacks it makes it a

00:29:09,770 --> 00:29:12,799
really good choice for this sort of

00:29:10,909 --> 00:29:14,120
integration layer because we can make

00:29:12,799 --> 00:29:15,980
these requests at the same time we can

00:29:14,120 --> 00:29:18,409
pass the response to at the same time we

00:29:15,980 --> 00:29:21,620
can handle errors and do retries without

00:29:18,409 --> 00:29:23,450
any issue and also a really big

00:29:21,620 --> 00:29:24,919
consideration whenever choosing whenever

00:29:23,450 --> 00:29:26,150
you're choosing a software for a

00:29:24,919 --> 00:29:28,220
particular component in your

00:29:26,150 --> 00:29:30,650
architecture is who's going to actually

00:29:28,220 --> 00:29:32,240
be doing the development work so if PHP

00:29:30,650 --> 00:29:34,309
developers are going to be working on

00:29:32,240 --> 00:29:35,960
the front end and it's going to be

00:29:34,309 --> 00:29:38,480
pitched before out so that PHP might be

00:29:35,960 --> 00:29:40,730
a good idea then but normally its front

00:29:38,480 --> 00:29:43,400
end developers doing front end work on

00:29:40,730 --> 00:29:45,140
angularjs so it's a lot less context

00:29:43,400 --> 00:29:47,659
switching for them if they need to

00:29:45,140 --> 00:29:49,070
fine-tune this API that they can just go

00:29:47,659 --> 00:29:51,049
in there and do it because in a language

00:29:49,070 --> 00:29:52,940
they're familiar with and it's really

00:29:51,049 --> 00:29:55,640
because we do it less often we should

00:29:52,940 --> 00:29:59,960
take the cognitive overhead on switching

00:29:55,640 --> 00:30:04,549
between PHP and JavaScript okay so

00:29:59,960 --> 00:30:10,909
that's enough talking so well clearly

00:30:04,549 --> 00:30:15,500
not but so here is a how you get started

00:30:10,909 --> 00:30:17,480
with express so NPM install NPM is yet

00:30:15,500 --> 00:30:20,900
another package manager and then you

00:30:17,480 --> 00:30:22,100
just output do Express to a directory

00:30:20,900 --> 00:30:24,500
and it'll generate you a really nice

00:30:22,100 --> 00:30:26,480
simple template in case you're wondering

00:30:24,500 --> 00:30:28,610
mpm is more or less exactly the same as

00:30:26,480 --> 00:30:30,679
composer even they all have little juice

00:30:28,610 --> 00:30:33,320
on files that you edit and you uses

00:30:30,679 --> 00:30:36,520
semantic versioning everything the only

00:30:33,320 --> 00:30:36,520
difference is its name Zen p.m.

00:30:36,599 --> 00:30:42,460
so one of the really soo just a little

00:30:40,839 --> 00:30:45,129
less or sidebar before I come on to

00:30:42,460 --> 00:30:47,440
talking about Express Express is an

00:30:45,129 --> 00:30:49,809
application server and application

00:30:47,440 --> 00:30:51,580
servers need restarting every time you

00:30:49,809 --> 00:30:52,899
make a change to the code because in a

00:30:51,580 --> 00:30:54,309
von Neumann machine we load the

00:30:52,899 --> 00:30:58,659
application into memory and then run it

00:30:54,309 --> 00:31:00,309
from memory so you need to stop and

00:30:58,659 --> 00:31:02,019
start the machine every time that you

00:31:00,309 --> 00:31:03,759
make a change to the JavaScript and a

00:31:02,019 --> 00:31:06,129
really cool way of doing this is we've

00:31:03,759 --> 00:31:08,139
grunt it has a really cool nice brief

00:31:06,129 --> 00:31:09,999
pre-written task called watch which will

00:31:08,139 --> 00:31:12,909
allow you to do things when files change

00:31:09,999 --> 00:31:16,359
and you can use it for preprocessing

00:31:12,909 --> 00:31:18,849
your JavaScript and CSS and you can also

00:31:16,359 --> 00:31:20,940
use it for like sending images to web

00:31:18,849 --> 00:31:23,440
servers and things it's really nice and

00:31:20,940 --> 00:31:25,719
the reason I say if achieved things

00:31:23,440 --> 00:31:27,279
dream is I always struck me that thing

00:31:25,719 --> 00:31:28,960
always really wanted to be the central

00:31:27,279 --> 00:31:29,919
tool which people wrote tasks for and

00:31:28,960 --> 00:31:31,629
then you never really had to write the

00:31:29,919 --> 00:31:34,269
touched yourself but no one really did

00:31:31,629 --> 00:31:35,529
that bit ahead of its time perhaps but

00:31:34,269 --> 00:31:37,570
grunts really managed to do this there's

00:31:35,529 --> 00:31:40,570
hundreds and thousands of pre-made tasks

00:31:37,570 --> 00:31:43,359
on NPM that you can install for this now

00:31:40,570 --> 00:31:44,799
again grunt up and running is super easy

00:31:43,359 --> 00:31:46,989
you just create a grunt file that you so

00:31:44,799 --> 00:31:49,029
on now there's lots of text here but

00:31:46,989 --> 00:31:51,549
don't worry about that because the fits

00:31:49,029 --> 00:31:55,359
the top are mostly just where is the bin

00:31:51,549 --> 00:31:58,839
file for express now the two bits that I

00:31:55,359 --> 00:32:01,960
tell them that we want to load a file

00:31:58,839 --> 00:32:04,029
load a task into grunt is grunt NPM load

00:32:01,960 --> 00:32:07,450
task and then we've just got to then

00:32:04,029 --> 00:32:09,489
this'll tell grunt to load in this case

00:32:07,450 --> 00:32:10,629
contrib watch which is something which

00:32:09,489 --> 00:32:13,419
will watch for changes in the file

00:32:10,629 --> 00:32:15,629
system and joint Express server which

00:32:13,419 --> 00:32:19,659
will start and stop our Express server

00:32:15,629 --> 00:32:22,539
and we can combine these tasks the task

00:32:19,659 --> 00:32:25,960
that these these features that were

00:32:22,539 --> 00:32:28,899
including provide into a single task so

00:32:25,960 --> 00:32:31,089
here I'm combining creating a task

00:32:28,899 --> 00:32:32,589
called server which will start Express

00:32:31,089 --> 00:32:34,450
and then start watching change for

00:32:32,589 --> 00:32:36,159
changes in the file system and then when

00:32:34,450 --> 00:32:38,349
watch picks up more changes in the file

00:32:36,159 --> 00:32:40,419
system it will restart the server and

00:32:38,349 --> 00:32:44,169
I've defined as default so I can start

00:32:40,419 --> 00:32:47,789
the server as grunt okay so here's a

00:32:44,169 --> 00:32:47,789
little demo of the api's

00:32:48,420 --> 00:32:57,840
so we've got this details page here and

00:32:52,470 --> 00:32:57,840
this is powered off the API endpoint and

00:33:00,150 --> 00:33:04,270
it's got a few things it's got like a

00:33:02,140 --> 00:33:05,980
title there's an author in there there's

00:33:04,270 --> 00:33:07,870
a bit of description it's got a rating

00:33:05,980 --> 00:33:10,090
so it's pulling in data from two

00:33:07,870 --> 00:33:11,710
different web services I can also show

00:33:10,090 --> 00:33:15,910
you the index page which is largely the

00:33:11,710 --> 00:33:17,110
same but without the ratings cool so

00:33:15,910 --> 00:33:20,620
that's basically what we're outputting

00:33:17,110 --> 00:33:22,660
from express so there's more or less

00:33:20,620 --> 00:33:23,920
there's just one file really that you

00:33:22,660 --> 00:33:28,720
need to worry about with Express and

00:33:23,920 --> 00:33:31,090
that is a pious and that has pretty much

00:33:28,720 --> 00:33:35,110
everything in there is also a couple of

00:33:31,090 --> 00:33:38,170
routes which have where to find things

00:33:35,110 --> 00:33:43,030
like controllers basically and I'll show

00:33:38,170 --> 00:33:45,040
you this properly in here okay so inside

00:33:43,030 --> 00:33:46,840
Arab guess we are going to include these

00:33:45,040 --> 00:33:50,080
routes files so we have roots index

00:33:46,840 --> 00:33:52,810
which is the bits for our node jet for

00:33:50,080 --> 00:33:55,630
angularjs application and then we're

00:33:52,810 --> 00:33:58,480
including book API v1 and book API v2

00:33:55,630 --> 00:34:00,220
and we're going to use them as roots a

00:33:58,480 --> 00:34:05,290
little bit further down so what this

00:34:00,220 --> 00:34:08,169
does it tells Express to mount a PIV one

00:34:05,290 --> 00:34:09,970
in front of all of the URLs which were

00:34:08,169 --> 00:34:12,280
inside that routes file so you can

00:34:09,970 --> 00:34:13,929
easily define a whole bunch of stuff in

00:34:12,280 --> 00:34:17,560
one go which is what you can do with

00:34:13,929 --> 00:34:18,879
composer cylex as well and you can see

00:34:17,560 --> 00:34:21,280
this other line here where I'm doing

00:34:18,879 --> 00:34:24,129
loading assets modules as the bower

00:34:21,280 --> 00:34:26,379
components directory so everything in

00:34:24,129 --> 00:34:27,790
that file will basically be public which

00:34:26,379 --> 00:34:29,980
might not be a good idea you might want

00:34:27,790 --> 00:34:34,290
to provision out your components depends

00:34:29,980 --> 00:34:37,330
what you're pulling with Balan okay so

00:34:34,290 --> 00:34:39,070
roots so inside our roots file the roots

00:34:37,330 --> 00:34:42,100
index file we do this thing where we do

00:34:39,070 --> 00:34:45,399
Rooter get / and then we do res render

00:34:42,100 --> 00:34:48,490
index and what this does is it goes and

00:34:45,399 --> 00:34:51,520
loads the index Jade file and returns to

00:34:48,490 --> 00:34:53,770
the user as HTML nice and simple right

00:34:51,520 --> 00:34:57,970
and then we've got a nice angularjs

00:34:53,770 --> 00:34:59,730
application but our API it does

00:34:57,970 --> 00:35:01,330
something a little bit different so

00:34:59,730 --> 00:35:02,770
firstly

00:35:01,330 --> 00:35:07,090
we have a route to remember this is

00:35:02,770 --> 00:35:09,940
mounted off / AP I v1 or v2 and we do

00:35:07,090 --> 00:35:14,370
res do some and we return some books as

00:35:09,940 --> 00:35:17,110
a JSON climb those are just on array and

00:35:14,370 --> 00:35:19,540
the API client is actually really simple

00:35:17,110 --> 00:35:22,750
so all it does is it makes a little HTTP

00:35:19,540 --> 00:35:27,240
request to the book jacket API after

00:35:22,750 --> 00:35:32,530
concatenating the ISBN on the end oh so

00:35:27,240 --> 00:35:35,770
okay so you can see here that angler

00:35:32,530 --> 00:35:39,820
jess is no jess is a really event-driven

00:35:35,770 --> 00:35:42,670
language so we have raised on data so

00:35:39,820 --> 00:35:44,680
this is the HTTP library of know jess

00:35:42,670 --> 00:35:46,180
and what we're doing here is we're

00:35:44,680 --> 00:35:49,420
waiting for some data to come in after

00:35:46,180 --> 00:35:51,670
we made a HTTP core and which we're

00:35:49,420 --> 00:35:53,410
doing at the top with a HTTP GET URL and

00:35:51,670 --> 00:35:56,140
we're going to add it onto the string

00:35:53,410 --> 00:35:57,700
every single time that it comes in but

00:35:56,140 --> 00:35:59,800
what this means is every time that we're

00:35:57,700 --> 00:36:02,020
not blocking on Io every time that we're

00:35:59,800 --> 00:36:03,730
not every time that we're blocking on Io

00:36:02,020 --> 00:36:06,160
we can do other things we can run other

00:36:03,730 --> 00:36:07,660
processes we can make better utilization

00:36:06,160 --> 00:36:10,780
of the hardware which is inside our

00:36:07,660 --> 00:36:12,610
machine and then you can see raised on

00:36:10,780 --> 00:36:16,510
end when we've finished receiving all

00:36:12,610 --> 00:36:18,670
the data we then pass it to a from duson

00:36:16,510 --> 00:36:20,740
into an API response and we call the

00:36:18,670 --> 00:36:23,290
callback back that we passed in

00:36:20,740 --> 00:36:30,010
originally which sets which calls the

00:36:23,290 --> 00:36:31,930
rare the to JSON part of Express and you

00:36:30,010 --> 00:36:35,710
can see the first parameter is null the

00:36:31,930 --> 00:36:38,110
user there is a pattern in no Jess where

00:36:35,710 --> 00:36:39,730
you have a parameter we have a callback

00:36:38,110 --> 00:36:41,980
and the first parameter is always the

00:36:39,730 --> 00:36:44,530
error regardless of what's going to come

00:36:41,980 --> 00:36:45,730
in afterwards so you can't just say no

00:36:44,530 --> 00:36:49,480
but it just makes it really easy to

00:36:45,730 --> 00:36:50,620
check Vanaras occurred okay so that's

00:36:49,480 --> 00:36:52,630
all well and good but that doesn't

00:36:50,620 --> 00:36:55,510
really tell you how to tie to a api's

00:36:52,630 --> 00:36:57,610
together with no jet which is why I said

00:36:55,510 --> 00:36:58,960
that we should use Express to type to do

00:36:57,610 --> 00:37:00,250
two things at once so it's really easy

00:36:58,960 --> 00:37:06,730
to call multiple service at the same

00:37:00,250 --> 00:37:09,610
time I'll skip over okay so we've got a

00:37:06,730 --> 00:37:11,800
Rooter here so we're going to get the is

00:37:09,610 --> 00:37:15,099
beer so this is what the Rooter looks

00:37:11,800 --> 00:37:17,619
like for the IP I the book API v2

00:37:15,099 --> 00:37:18,999
we're going to get the ISBN number so

00:37:17,619 --> 00:37:24,160
we're going to visit if someone visits

00:37:18,999 --> 00:37:25,450
the angular Jer the API v2 and then

00:37:24,160 --> 00:37:27,519
passes a number afterwards we're going

00:37:25,450 --> 00:37:30,489
to make two calls in parallel and we're

00:37:27,519 --> 00:37:32,499
going to do this using no jess is a sink

00:37:30,489 --> 00:37:34,089
library it's a really common library

00:37:32,499 --> 00:37:38,319
it's not parkour but it probably should

00:37:34,089 --> 00:37:40,509
be and it allows you to really simply do

00:37:38,319 --> 00:37:44,049
things like block and wait for multiple

00:37:40,509 --> 00:37:45,579
callbacks to finish until I so you can

00:37:44,049 --> 00:37:47,499
do things like make do multiple API

00:37:45,579 --> 00:37:49,210
calls and ones now I'm using it like the

00:37:47,499 --> 00:37:51,160
most simple way there's loads of other

00:37:49,210 --> 00:37:52,839
cool stuff in there like you can limit

00:37:51,160 --> 00:37:54,160
the number of connections the number of

00:37:52,839 --> 00:37:55,960
things you're doing in parallel to ten

00:37:54,160 --> 00:37:57,970
and have it as like a queue system so

00:37:55,960 --> 00:37:59,349
you have like ten workers and then just

00:37:57,970 --> 00:38:02,859
keep processing until they're all done

00:37:59,349 --> 00:38:04,269
and at the bottom once these api's have

00:38:02,859 --> 00:38:07,509
called back and called the callback

00:38:04,269 --> 00:38:09,430
which is provided then we're going to

00:38:07,509 --> 00:38:11,799
get another callback executed at the

00:38:09,430 --> 00:38:13,869
bottom so we're going to take it make

00:38:11,799 --> 00:38:15,670
advantage of another common JavaScript

00:38:13,869 --> 00:38:17,049
library and that's underscore has

00:38:15,670 --> 00:38:20,829
everyone used on has anyone used on to

00:38:17,049 --> 00:38:23,289
score here cool so we just can use

00:38:20,829 --> 00:38:26,200
underscore extend so if you're not

00:38:23,289 --> 00:38:27,609
familiar with extend it's just like a

00:38:26,200 --> 00:38:29,499
ray merge but for objects in JavaScript

00:38:27,609 --> 00:38:32,549
which is really cool save you from

00:38:29,499 --> 00:38:36,009
writing it if you have to do that okay

00:38:32,549 --> 00:38:40,569
so there are a few alternatives taught

00:38:36,009 --> 00:38:43,359
to using angularjs to using no Express

00:38:40,569 --> 00:38:45,519
and one of these is to use guzzle with

00:38:43,359 --> 00:38:49,059
express futures obviously you can't pass

00:38:45,519 --> 00:38:52,599
the responses at the same time as you

00:38:49,059 --> 00:38:54,910
can with as you can with JavaScript

00:38:52,599 --> 00:38:56,589
however is like better than nothing so

00:38:54,910 --> 00:38:58,119
if you've got a heavily PHP focused

00:38:56,589 --> 00:39:00,940
development team that might be a good

00:38:58,119 --> 00:39:03,789
choice the other option which had a

00:39:00,940 --> 00:39:05,950
really good talk about it is using PHP

00:39:03,789 --> 00:39:08,619
with cues and making a sort of reactive

00:39:05,950 --> 00:39:10,509
environment rather than using rest which

00:39:08,619 --> 00:39:11,920
is a really good option if you've got

00:39:10,509 --> 00:39:14,049
people who are comfortable using cues

00:39:11,920 --> 00:39:17,859
and you're ready to deal with things

00:39:14,049 --> 00:39:20,229
like cascading failures and obviously

00:39:17,859 --> 00:39:23,829
okay go is an ok and go a really good

00:39:20,229 --> 00:39:25,210
choices for any of the language built-in

00:39:23,829 --> 00:39:29,060
paralyzation and really good choices for

00:39:25,210 --> 00:39:31,100
these ok so that's Express

00:39:29,060 --> 00:39:32,360
it's non blocking its front end

00:39:31,100 --> 00:39:35,270
developer friendly because it's llaves

00:39:32,360 --> 00:39:36,770
script and it's lightweight you can get

00:39:35,270 --> 00:39:38,420
it off and running in no time and it's

00:39:36,770 --> 00:39:43,270
super easy to get sort of complicated

00:39:38,420 --> 00:39:46,550
things done in it so in conclusion

00:39:43,270 --> 00:39:47,690
cross-functional teams require knowledge

00:39:46,550 --> 00:39:49,070
of other disciplines you're going to be

00:39:47,690 --> 00:39:50,870
working closely with JavaScript

00:39:49,070 --> 00:39:52,400
developers so it's important to know a

00:39:50,870 --> 00:39:54,020
little bit about what they're doing and

00:39:52,400 --> 00:39:56,900
maybe get excited about the same things

00:39:54,020 --> 00:39:58,670
that they get excited about mvvm

00:39:56,900 --> 00:40:01,220
frameworks are going to be getting more

00:39:58,670 --> 00:40:02,960
and more popular there's been at least

00:40:01,220 --> 00:40:06,560
one of the javascript talk here which i

00:40:02,960 --> 00:40:08,360
think is probably a record and you're

00:40:06,560 --> 00:40:09,800
going to be finding more and more you

00:40:08,360 --> 00:40:11,600
can see them in your day-to-day life and

00:40:09,800 --> 00:40:15,200
so you're going to need to know how they

00:40:11,600 --> 00:40:18,200
work nvm for applications use api's and

00:40:15,200 --> 00:40:20,930
use the middleware layer to hide and

00:40:18,200 --> 00:40:24,470
customize your response on a per-device

00:40:20,930 --> 00:40:27,890
basis to get the most out of them okay

00:40:24,470 --> 00:40:31,220
so I've got a joint in link up there if

00:40:27,890 --> 00:40:36,130
you loved it hated it leave me some

00:40:31,220 --> 00:40:36,130
leave me some feedback has any questions

00:40:38,260 --> 00:40:43,990
yeah oh hang on I think we need a

00:40:41,660 --> 00:40:43,990
microphone

00:40:48,810 --> 00:40:56,500
you seem to be using Express and node

00:40:53,670 --> 00:40:58,570
you switched as you were explaining the

00:40:56,500 --> 00:41:01,060
last set of code between saying express

00:40:58,570 --> 00:41:04,360
and saying node it is expressed just a

00:41:01,060 --> 00:41:06,100
subset of node or no so sorry that was

00:41:04,360 --> 00:41:09,490
probably a little bit confusing Express

00:41:06,100 --> 00:41:12,460
is a MVC style framework written on top

00:41:09,490 --> 00:41:20,160
of no Jess it's a JavaScript framework

00:41:12,460 --> 00:41:20,160
for the server side any other questions

00:41:22,440 --> 00:41:26,340

YouTube URL: https://www.youtube.com/watch?v=jL9nfIiX6G0


