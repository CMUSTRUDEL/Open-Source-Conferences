Title: Christopher Hoult - Your API is a UI
Publication date: 2015-04-02
Playlist: PHP UK Conference 2015
Description: 
	Whether you're creating a complex web application or a simple library, everything you create has a user. Why, then, do we concentrate on our users when developing a user interface, but so often forget them when developing APIs? In this talk, Christopher presents a whirlwind overview of a variety of different User Experience considerations when designing your APIs.

http://www.slideshare.net/choult/your-api-is-a-ui
Captions: 
	00:00:00,000 --> 00:00:02,060
you

00:00:05,310 --> 00:00:13,679
right well hi guys welcome to the final

00:00:10,059 --> 00:00:15,759
talk of this room at the conference

00:00:13,679 --> 00:00:17,860
thanks just taking with it thanks for

00:00:15,759 --> 00:00:20,009
sticking around it's the prizes at the

00:00:17,860 --> 00:00:24,130
end right that's why you're still here

00:00:20,009 --> 00:00:26,590
so hopefully I don't waste too much of

00:00:24,130 --> 00:00:31,660
your precious brain cells in what I'm

00:00:26,590 --> 00:00:33,760
saying but first off who am i I'm a

00:00:31,660 --> 00:00:35,890
senior software engineer at DataSift a

00:00:33,760 --> 00:00:38,650
independent supplier of the Twitter

00:00:35,890 --> 00:00:43,300
firehose amongst many other what we'd

00:00:38,650 --> 00:00:45,160
call big data data providers we do have

00:00:43,300 --> 00:00:46,740
a very interesting strap line there I'll

00:00:45,160 --> 00:00:49,900
just throw that one into the room

00:00:46,740 --> 00:00:52,120
previously I was the senior software

00:00:49,900 --> 00:00:54,820
engineer on the London website website

00:00:52,120 --> 00:00:56,650
for timeout and also helped architects a

00:00:54,820 --> 00:00:58,900
new global platform for those kind of

00:00:56,650 --> 00:01:01,989
things all service oriented architecture

00:00:58,900 --> 00:01:04,149
underneath and before that crm systems

00:01:01,989 --> 00:01:05,619
for secured loans companies so I've done

00:01:04,149 --> 00:01:08,619
a lot of integration work I've done a

00:01:05,619 --> 00:01:10,900
lot of API stuff at DataSift I didn't

00:01:08,619 --> 00:01:15,729
say I'm also in charge of the web

00:01:10,900 --> 00:01:20,979
application and the public API I also

00:01:15,729 --> 00:01:26,290
act I also shave the these two things

00:01:20,979 --> 00:01:28,210
are related so first off a couple of

00:01:26,290 --> 00:01:31,659
words about the talk your mileage may

00:01:28,210 --> 00:01:33,370
vary I'm not here to give you specific

00:01:31,659 --> 00:01:36,640
technologies and recommendations about

00:01:33,370 --> 00:01:39,640
how to create api's I'm not here to be

00:01:36,640 --> 00:01:41,770
opinionated on one form of an API over

00:01:39,640 --> 00:01:46,240
another and certainly take everything i

00:01:41,770 --> 00:01:49,030
say with a pinch of salt so having said

00:01:46,240 --> 00:01:53,200
all that how many here create user

00:01:49,030 --> 00:01:58,299
interfaces how many build them cool how

00:01:53,200 --> 00:02:00,490
many people build api's that's quite a

00:01:58,299 --> 00:02:05,130
few hands how many people rights

00:02:00,490 --> 00:02:07,630
libraries for people to use yeah okay

00:02:05,130 --> 00:02:10,229
how many people don't like audience

00:02:07,630 --> 00:02:10,229
participation

00:02:10,240 --> 00:02:20,360
damn you for ruining my joke so um well

00:02:17,030 --> 00:02:21,740
skip ahead there what is a UI hopefully

00:02:20,360 --> 00:02:23,630
as most of the hands in this room went

00:02:21,740 --> 00:02:27,140
up you know that is the way in which we

00:02:23,630 --> 00:02:29,960
as humans can talk to software can

00:02:27,140 --> 00:02:32,030
interface with software that other

00:02:29,960 --> 00:02:33,680
people created so they're gooeys the

00:02:32,030 --> 00:02:36,740
command line tools that kind of thing us

00:02:33,680 --> 00:02:39,590
humans talking to computers there's a

00:02:36,740 --> 00:02:41,180
nice definition about what an API is now

00:02:39,590 --> 00:02:43,310
I'm not going to read that out for you

00:02:41,180 --> 00:02:45,820
but effectively it's a similar thing

00:02:43,310 --> 00:02:48,200
you're still having one party

00:02:45,820 --> 00:02:50,690
interfacing with another but in this

00:02:48,200 --> 00:02:55,190
instance it's a computer talking to a

00:02:50,690 --> 00:02:57,320
computer now my background tends to be

00:02:55,190 --> 00:02:58,970
all web service based and I work with

00:02:57,320 --> 00:03:00,950
them day in day out throughout the talk

00:02:58,970 --> 00:03:03,590
I might talk about api's as if I mean

00:03:00,950 --> 00:03:05,900
web services and that's more of my head

00:03:03,590 --> 00:03:08,780
spinning but generally i'll talk about

00:03:05,900 --> 00:03:11,000
code and api at the same time and I mean

00:03:08,780 --> 00:03:13,570
sorry web services there you go slip of

00:03:11,000 --> 00:03:16,790
the tongue at the same time uh-huh and

00:03:13,570 --> 00:03:22,100
and for the most part the ideas can be

00:03:16,790 --> 00:03:24,650
interchanged between them so first off

00:03:22,100 --> 00:03:27,980
the thing that I've just identified we

00:03:24,650 --> 00:03:30,740
share across a UI and an API is the you

00:03:27,980 --> 00:03:32,900
part of the first one the user in the

00:03:30,740 --> 00:03:35,480
case of a UI it's humans it's people who

00:03:32,900 --> 00:03:37,040
can understand what's going on they have

00:03:35,480 --> 00:03:38,630
to do a bit of interpretation but they

00:03:37,040 --> 00:03:41,480
get there in the end they figure out how

00:03:38,630 --> 00:03:46,060
to use your software in the api's case

00:03:41,480 --> 00:03:49,280
it's the computer that's using it now

00:03:46,060 --> 00:03:52,760
that computer using it the application

00:03:49,280 --> 00:03:55,670
using that API that's one part of that

00:03:52,760 --> 00:03:58,970
puzzle that's the user in the most

00:03:55,670 --> 00:04:01,820
direct sense in the indirect sense it's

00:03:58,970 --> 00:04:04,370
also the developers who use your API

00:04:01,820 --> 00:04:05,870
your colleagues people who interface

00:04:04,370 --> 00:04:08,420
with your code interface with your web

00:04:05,870 --> 00:04:10,820
service your customers the people who

00:04:08,420 --> 00:04:12,470
pay you to do the thing that you do the

00:04:10,820 --> 00:04:14,090
people who subscribe to you at five

00:04:12,470 --> 00:04:16,220
dollars a month one hundred dollars a

00:04:14,090 --> 00:04:18,710
month and expect to have a certain level

00:04:16,220 --> 00:04:20,780
of service from you they expect to have

00:04:18,710 --> 00:04:22,920
that interoperability and you have to

00:04:20,780 --> 00:04:25,500
look after them and by extension by

00:04:22,920 --> 00:04:27,810
same in direction you also have their

00:04:25,500 --> 00:04:29,700
customers if you're building platform as

00:04:27,810 --> 00:04:32,640
a service or some software as a service

00:04:29,700 --> 00:04:34,200
so a data set for example a number of

00:04:32,640 --> 00:04:36,840
our customers are just kind of a

00:04:34,200 --> 00:04:39,750
middleman they they consume raw data

00:04:36,840 --> 00:04:41,550
from us they use our API and then they

00:04:39,750 --> 00:04:44,130
have their own customers to service with

00:04:41,550 --> 00:04:47,010
all that data so when we think about our

00:04:44,130 --> 00:04:49,500
API and the users of that it's not just

00:04:47,010 --> 00:04:51,180
the person who's writing is not just the

00:04:49,500 --> 00:04:52,770
application that's talking to it

00:04:51,180 --> 00:04:54,990
directly it's also the people who have

00:04:52,770 --> 00:04:56,760
created that it's also the people who

00:04:54,990 --> 00:04:58,920
have created software based upon that

00:04:56,760 --> 00:05:00,450
and it's also the people he'd use that

00:04:58,920 --> 00:05:05,670
software that's been based upon that and

00:05:00,450 --> 00:05:08,100
it's kind of users all the way down so

00:05:05,670 --> 00:05:11,190
you need to think about up front what

00:05:08,100 --> 00:05:14,040
does your API do you've got to think why

00:05:11,190 --> 00:05:17,430
am i creating this what are the use

00:05:14,040 --> 00:05:19,650
cases for my service why does someone I

00:05:17,430 --> 00:05:21,800
want this library that when you send a

00:05:19,650 --> 00:05:25,860
message here a cat bounces up over there

00:05:21,800 --> 00:05:27,930
why does someone want to consume my

00:05:25,860 --> 00:05:30,360
offering this way and in what way are

00:05:27,930 --> 00:05:32,730
they going to make use of that in what

00:05:30,360 --> 00:05:35,640
way are they going to apply what I

00:05:32,730 --> 00:05:38,130
provide them to their problems to their

00:05:35,640 --> 00:05:41,100
use cases so starting off with an idea

00:05:38,130 --> 00:05:43,620
of who wants use your service and how

00:05:41,100 --> 00:05:47,790
they want to use their service is a very

00:05:43,620 --> 00:05:49,770
very important way and off the result of

00:05:47,790 --> 00:05:52,440
that from your use cases from the

00:05:49,770 --> 00:05:55,080
stories that come from those you should

00:05:52,440 --> 00:05:59,940
start to document that usage the flow

00:05:55,080 --> 00:06:01,470
through there the general cases and by

00:05:59,940 --> 00:06:04,050
that you're building up a nice way of

00:06:01,470 --> 00:06:05,460
actually using and describing the use of

00:06:04,050 --> 00:06:08,550
that I'll come on to that a bit further

00:06:05,460 --> 00:06:10,380
down the line and the other thing you

00:06:08,550 --> 00:06:12,090
want to do is you want to sell your API

00:06:10,380 --> 00:06:13,620
you want to make sure that people want

00:06:12,090 --> 00:06:16,590
to use it you've got to give them a

00:06:13,620 --> 00:06:18,270
sales pitch and part of that is to

00:06:16,590 --> 00:06:22,740
explain how it's applicable to their

00:06:18,270 --> 00:06:26,160
problems you've got to decide what they

00:06:22,740 --> 00:06:29,040
can do with your software whether it's

00:06:26,160 --> 00:06:30,570
consuming your web service can they

00:06:29,040 --> 00:06:32,940
login can they view their account

00:06:30,570 --> 00:06:34,980
balance and so on or whether you want

00:06:32,940 --> 00:06:36,540
them to access some of the deepest parts

00:06:34,980 --> 00:06:39,810
of the library that you

00:06:36,540 --> 00:06:42,000
created you need to really consider what

00:06:39,810 --> 00:06:43,500
you're exposing to them and you know as

00:06:42,000 --> 00:06:46,020
I say it's very rare to expose

00:06:43,500 --> 00:06:47,730
everything a number of people will point

00:06:46,020 --> 00:06:50,580
out that that's not exactly best

00:06:47,730 --> 00:06:52,530
practice to put your guts on display to

00:06:50,580 --> 00:06:56,490
show the inner workings of what you have

00:06:52,530 --> 00:06:59,340
built for the most part too much

00:06:56,490 --> 00:07:02,760
complexity can lead to confusion from

00:06:59,340 --> 00:07:04,050
your users so your programmer who the

00:07:02,760 --> 00:07:06,090
programmer is trying to write something

00:07:04,050 --> 00:07:08,450
against the interface you built if you

00:07:06,090 --> 00:07:10,560
give them this wide variety of options

00:07:08,450 --> 00:07:12,090
they're going to sit there for a while

00:07:10,560 --> 00:07:14,160
and trying to figure out what's that

00:07:12,090 --> 00:07:15,810
what they can use and they're not

00:07:14,160 --> 00:07:17,550
necessarily going to have anything there

00:07:15,810 --> 00:07:19,050
that they know that if i plug that in

00:07:17,550 --> 00:07:21,300
there i plug that in there i'm going to

00:07:19,050 --> 00:07:23,190
create this great thing you can mitigate

00:07:21,300 --> 00:07:25,890
that with documentation and tell them

00:07:23,190 --> 00:07:27,960
how they can use that but providing huge

00:07:25,890 --> 00:07:31,110
range of options when they only really

00:07:27,960 --> 00:07:33,090
need five or six that will reduce their

00:07:31,110 --> 00:07:35,010
confusion and their overload when their

00:07:33,090 --> 00:07:38,070
overhead when they're looking to

00:07:35,010 --> 00:07:39,810
integrate with you it's a bit like as a

00:07:38,070 --> 00:07:42,900
kid you go into the candy store you got

00:07:39,810 --> 00:07:44,190
your pounds you're five pounds in your

00:07:42,900 --> 00:07:45,810
pocket you're thinking what am I going

00:07:44,190 --> 00:07:48,090
to spend this on and you spend ten

00:07:45,810 --> 00:07:50,450
minutes looking at everything and full

00:07:48,090 --> 00:07:53,790
of indecision if you just had one

00:07:50,450 --> 00:07:55,230
chocolate bar oh they're easy isn't it

00:07:53,790 --> 00:07:57,650
unless you don't like the chocolate bar

00:07:55,230 --> 00:08:00,620
then I suppose that falls down that one

00:07:57,650 --> 00:08:02,430
define the restrictions of use define

00:08:00,620 --> 00:08:04,560
where you want to protect not only

00:08:02,430 --> 00:08:07,020
yourself but also the customer and

00:08:04,560 --> 00:08:09,270
protect them from their own spaghetti

00:08:07,020 --> 00:08:11,340
code perhaps that they might create

00:08:09,270 --> 00:08:13,800
based on just trying to understand what

00:08:11,340 --> 00:08:15,720
you have provided them with and at the

00:08:13,800 --> 00:08:17,550
end of all that take your user stories

00:08:15,720 --> 00:08:20,190
from the previous slide take your user

00:08:17,550 --> 00:08:22,560
stories and make sure that what you are

00:08:20,190 --> 00:08:24,660
aiming for matches up with what your

00:08:22,560 --> 00:08:29,250
customers are aiming for matches up with

00:08:24,660 --> 00:08:31,080
what the users are aiming for so I

00:08:29,250 --> 00:08:34,200
mentioned that I was going to do this

00:08:31,080 --> 00:08:38,070
talk I did this in PHP London if you're

00:08:34,200 --> 00:08:40,620
here again well Don you I obviously did

00:08:38,070 --> 00:08:42,090
an alright job there when I mentioned

00:08:40,620 --> 00:08:45,980
that I thought right I've got this great

00:08:42,090 --> 00:08:49,010
idea I've got I've got this idea that

00:08:45,980 --> 00:08:51,450
everything's a user interface excellent

00:08:49,010 --> 00:08:53,070
and I mentioned this on Twitter and Phil

00:08:51,450 --> 00:08:55,140
legate's are from pushers mentions are

00:08:53,070 --> 00:08:57,510
great the old API UX thing that's a

00:08:55,140 --> 00:08:59,370
great topic and he named the thing and I

00:08:57,510 --> 00:09:02,220
go and look around and of course there's

00:08:59,370 --> 00:09:03,960
an API ux com of course someone else has

00:09:02,220 --> 00:09:06,810
had these ideas so I go on there and

00:09:03,960 --> 00:09:11,280
this is a an almost perfect description

00:09:06,810 --> 00:09:14,640
of how you can approach designing your

00:09:11,280 --> 00:09:17,490
AP is in such a way that they are usable

00:09:14,640 --> 00:09:19,830
and that they are taking your users into

00:09:17,490 --> 00:09:22,560
account so it's a kind of like Maslow's

00:09:19,830 --> 00:09:25,590
hierarchy of needs but for AP is see

00:09:22,560 --> 00:09:28,170
you've got usability is it easy to use

00:09:25,590 --> 00:09:29,940
basically you got functionality does it

00:09:28,170 --> 00:09:32,160
work as expected you got reliability

00:09:29,940 --> 00:09:36,090
does it work all the time you've got

00:09:32,160 --> 00:09:38,970
proficiency can I use this easily does

00:09:36,090 --> 00:09:41,280
it improve me and you've got creativity

00:09:38,970 --> 00:09:44,900
does it allow for serendipity does it

00:09:41,280 --> 00:09:47,580
allow for your users to create their own

00:09:44,900 --> 00:09:51,530
wildest dreams out the back of that

00:09:47,580 --> 00:09:54,990
that's a really hard one to do so

00:09:51,530 --> 00:09:56,370
usability the first one now you'll be

00:09:54,990 --> 00:09:58,470
happy to know that the number of slides

00:09:56,370 --> 00:10:00,060
in each of these sections are just like

00:09:58,470 --> 00:10:02,580
the pyramids so I have another one here

00:10:00,060 --> 00:10:04,890
and then fewer left all the way so

00:10:02,580 --> 00:10:08,460
usability obviously very important we're

00:10:04,890 --> 00:10:12,930
used to having humans arrived at our

00:10:08,460 --> 00:10:15,150
website where or at our UI and figure

00:10:12,930 --> 00:10:17,340
things out because you know as much as

00:10:15,150 --> 00:10:19,350
we hate to like to put them down humans

00:10:17,340 --> 00:10:20,340
are actually quite clever they can look

00:10:19,350 --> 00:10:23,030
at something they've never encountered

00:10:20,340 --> 00:10:26,990
before figure it out the problem with

00:10:23,030 --> 00:10:29,190
computers and AP is for the most part

00:10:26,990 --> 00:10:30,930
they can't just look at that and figure

00:10:29,190 --> 00:10:33,180
it out someone has to tell them how that

00:10:30,930 --> 00:10:37,200
works and then every time they come back

00:10:33,180 --> 00:10:38,580
to it they need that so usability for

00:10:37,200 --> 00:10:41,840
the people telling you how it works

00:10:38,580 --> 00:10:46,910
that's incredibly important so first off

00:10:41,840 --> 00:10:49,440
consistency it's very useful to provide

00:10:46,910 --> 00:10:52,410
shorthand for your customers for your

00:10:49,440 --> 00:10:56,540
users it's very useful for them to

00:10:52,410 --> 00:10:59,010
understand that I did it this way here

00:10:56,540 --> 00:11:01,170
shouldn't I do it the same way there if

00:10:59,010 --> 00:11:02,420
you've got very similar concept if you

00:11:01,170 --> 00:11:05,510
have that repetition

00:11:02,420 --> 00:11:09,019
of the ways in which you interact and if

00:11:05,510 --> 00:11:11,450
you maintain that consistency then that

00:11:09,019 --> 00:11:13,399
allows that gives them comfort they know

00:11:11,450 --> 00:11:15,589
that if I look for it there I can do

00:11:13,399 --> 00:11:18,800
that there and it its ease of use for

00:11:15,589 --> 00:11:21,050
them and so to help aids that kind of

00:11:18,800 --> 00:11:23,089
thing style guides hopefully an obvious

00:11:21,050 --> 00:11:24,380
one for you guys so I mentioned a couple

00:11:23,089 --> 00:11:26,959
of things here they're not the be-all

00:11:24,380 --> 00:11:29,600
and end-all but your PS are 0 is 1 and 2

00:11:26,959 --> 00:11:31,790
telling you about the great ways to code

00:11:29,600 --> 00:11:35,449
but it's a document you've agreed to go

00:11:31,790 --> 00:11:38,060
with that the use of best practices in

00:11:35,449 --> 00:11:41,180
rest that kind of thing and if you've

00:11:38,060 --> 00:11:43,820
got attributes and functions and methods

00:11:41,180 --> 00:11:46,940
and whatnot that do similar things name

00:11:43,820 --> 00:11:49,160
them the same way you might find ways in

00:11:46,940 --> 00:11:52,839
which they differ but it's really useful

00:11:49,160 --> 00:11:55,339
if you have two kinds of value object or

00:11:52,839 --> 00:11:57,730
yeah two kinds of value objects and two

00:11:55,339 --> 00:11:59,899
factories if you want to get the same

00:11:57,730 --> 00:12:02,690
object out from each of those factories

00:11:59,899 --> 00:12:06,019
they've got the same name right and

00:12:02,690 --> 00:12:08,390
that's where Anna just delivered a great

00:12:06,019 --> 00:12:09,620
talk on naming downstairs so if you have

00:12:08,390 --> 00:12:11,480
a look on the videos when they're

00:12:09,620 --> 00:12:13,880
published look out for the slides go and

00:12:11,480 --> 00:12:16,010
joined in and find those things out then

00:12:13,880 --> 00:12:18,440
you can you can read a lot more about

00:12:16,010 --> 00:12:24,079
what is just one bullet points in this

00:12:18,440 --> 00:12:26,029
talk also error codes if you are using

00:12:24,079 --> 00:12:29,660
errors if you're replying with errors to

00:12:26,029 --> 00:12:31,459
your customers to your users make sure

00:12:29,660 --> 00:12:33,920
that your encapsulating the same

00:12:31,459 --> 00:12:36,350
concepts in the same codes so if

00:12:33,920 --> 00:12:39,260
something is not found give them a 404

00:12:36,350 --> 00:12:41,510
if something has failed to work return

00:12:39,260 --> 00:12:44,660
of false just keep that kind of ideas

00:12:41,510 --> 00:12:46,250
consistent and then your code that is

00:12:44,660 --> 00:12:48,560
being called by someone else's code

00:12:46,250 --> 00:12:50,720
isn't surprising them and it isn't

00:12:48,560 --> 00:12:51,829
surprising the very fickle and brittle

00:12:50,720 --> 00:12:53,600
nature of the computer that's

00:12:51,829 --> 00:12:58,220
interpreting their commands to do these

00:12:53,600 --> 00:13:00,829
things from that I come to patterns now

00:12:58,220 --> 00:13:03,170
I don't mean patterns well sometimes I

00:13:00,829 --> 00:13:05,089
mean patterns in a software kind of gang

00:13:03,170 --> 00:13:06,920
a four-way and I do reference out at the

00:13:05,089 --> 00:13:09,949
bottom but basically it's it's more

00:13:06,920 --> 00:13:12,079
about establishing a convention it's

00:13:09,949 --> 00:13:14,030
establishing a way of doing things and

00:13:12,079 --> 00:13:17,270
of promoting that consistency

00:13:14,030 --> 00:13:19,370
using patterns you're using a common

00:13:17,270 --> 00:13:21,350
language with which you can communicate

00:13:19,370 --> 00:13:24,080
the use of your software with those

00:13:21,350 --> 00:13:26,570
users so they aid the understanding of

00:13:24,080 --> 00:13:29,060
how to interact with this library you

00:13:26,570 --> 00:13:31,460
just put out and as a result we have

00:13:29,060 --> 00:13:34,640
several different concepts in web

00:13:31,460 --> 00:13:36,530
services and encode say your RPC versus

00:13:34,640 --> 00:13:39,170
your rest and that kind of approach

00:13:36,530 --> 00:13:40,700
people understand what rest means for

00:13:39,170 --> 00:13:43,160
the most part people understand what our

00:13:40,700 --> 00:13:45,320
PC means for the most part and if you

00:13:43,160 --> 00:13:48,410
start off and try and stick to those

00:13:45,320 --> 00:13:51,710
patterns those way of ways of

00:13:48,410 --> 00:13:55,880
functioning then the users will follow

00:13:51,710 --> 00:13:59,810
suit I come up with your information

00:13:55,880 --> 00:14:03,740
hierarchy organize yourself if something

00:13:59,810 --> 00:14:05,420
humans are really bad at intangible

00:14:03,740 --> 00:14:08,690
things they happen up here all the time

00:14:05,420 --> 00:14:10,310
but to grasp onto that thing easily it's

00:14:08,690 --> 00:14:13,160
quite difficult one so he always relate

00:14:10,310 --> 00:14:16,640
it to where things are locationally so

00:14:13,160 --> 00:14:19,280
if something if something is here on

00:14:16,640 --> 00:14:21,410
your shelf if something with a similar

00:14:19,280 --> 00:14:23,150
concept if you're looking for that it's

00:14:21,410 --> 00:14:26,270
much easier if you're looking for it in

00:14:23,150 --> 00:14:28,780
a consistent place for where it is if

00:14:26,270 --> 00:14:31,630
you're organizing yourself in terms of

00:14:28,780 --> 00:14:34,310
entities if they understand those

00:14:31,630 --> 00:14:36,980
relationships between the entities then

00:14:34,310 --> 00:14:39,410
if you keep that consistency if you keep

00:14:36,980 --> 00:14:41,930
that hierarchy as you define that then

00:14:39,410 --> 00:14:46,040
when it comes to using a new concept

00:14:41,930 --> 00:14:47,240
with your existing API your users will

00:14:46,040 --> 00:14:50,930
be able to find it a bit more

00:14:47,240 --> 00:14:53,930
intuitively nesting entities under each

00:14:50,930 --> 00:14:55,730
other entities all the way down can be a

00:14:53,930 --> 00:14:58,520
bit problematic so if there's some way

00:14:55,730 --> 00:15:00,350
that you can find a wonderful balance of

00:14:58,520 --> 00:15:02,690
first class second class and so on

00:15:00,350 --> 00:15:06,350
that's great but I didn't quite know how

00:15:02,690 --> 00:15:09,080
to do that and if you get it right your

00:15:06,350 --> 00:15:10,850
classes your objects your new parts of

00:15:09,080 --> 00:15:12,770
your API that you're introducing they

00:15:10,850 --> 00:15:14,960
can be quite intuitive you just need to

00:15:12,770 --> 00:15:18,260
tell someone it's in that rough area and

00:15:14,960 --> 00:15:20,450
people can find it for themselves in a

00:15:18,260 --> 00:15:22,190
way that doesn't rely too heavily on the

00:15:20,450 --> 00:15:23,930
very explicit language that you're using

00:15:22,190 --> 00:15:26,610
in your documentation which I hope

00:15:23,930 --> 00:15:29,890
you're all writing

00:15:26,610 --> 00:15:33,430
using abstraction at the level in which

00:15:29,890 --> 00:15:35,260
people are interacting with you so again

00:15:33,430 --> 00:15:37,570
we were going to the the tyranny of

00:15:35,260 --> 00:15:39,190
choice the all the options that you

00:15:37,570 --> 00:15:40,480
could use the other thing is if you're

00:15:39,190 --> 00:15:43,440
displaying your guts if you're showing

00:15:40,480 --> 00:15:45,730
off your business logic to your users

00:15:43,440 --> 00:15:48,850
they could be stitching together all

00:15:45,730 --> 00:15:51,070
sorts of things in all sorts of ways

00:15:48,850 --> 00:15:54,580
that you have no control over other than

00:15:51,070 --> 00:15:57,660
to deny them that in the future also if

00:15:54,580 --> 00:16:00,850
you can encapsulate best practice in the

00:15:57,660 --> 00:16:02,920
abstractions of your API if instead of

00:16:00,850 --> 00:16:04,570
saying first you create this object and

00:16:02,920 --> 00:16:06,430
then you pass it to this and then you

00:16:04,570 --> 00:16:08,080
get it saved to the database if you

00:16:06,430 --> 00:16:11,020
could have one call that did that and

00:16:08,080 --> 00:16:13,870
name it appropriately then that customer

00:16:11,020 --> 00:16:15,760
can just work on that the user can know

00:16:13,870 --> 00:16:17,800
that that's one call they don't need to

00:16:15,760 --> 00:16:19,870
have the overhead of how do I stitch all

00:16:17,800 --> 00:16:22,930
the pieces together the flip of that

00:16:19,870 --> 00:16:26,920
things like the graph database the graph

00:16:22,930 --> 00:16:30,610
API is quite a useful discovery tool but

00:16:26,920 --> 00:16:33,070
it kind of shows everything off if you

00:16:30,610 --> 00:16:34,870
would stick to the underlying model the

00:16:33,070 --> 00:16:37,180
other problem is that when you come to

00:16:34,870 --> 00:16:39,250
change that when you come to change the

00:16:37,180 --> 00:16:43,060
way you know either through refactoring

00:16:39,250 --> 00:16:44,890
or maintenance or you just don't need

00:16:43,060 --> 00:16:46,750
that bit anymore but the overlying

00:16:44,890 --> 00:16:49,750
concept I still need to save this thing

00:16:46,750 --> 00:16:51,960
this place if you change that then those

00:16:49,750 --> 00:16:54,640
customers will be affected the users

00:16:51,960 --> 00:16:56,680
will be affected by you wiping out whole

00:16:54,640 --> 00:17:00,250
pieces there so abstraction also helps

00:16:56,680 --> 00:17:02,470
you and doing the hard work so users

00:17:00,250 --> 00:17:04,150
don't have to people try to take the

00:17:02,470 --> 00:17:05,829
easiest route if you give them the

00:17:04,150 --> 00:17:10,949
easiest route they'll take it and

00:17:05,829 --> 00:17:15,070
they'll use it a lot more simplicity

00:17:10,949 --> 00:17:18,040
it's kind of the the end goal of

00:17:15,070 --> 00:17:23,020
abstraction the fewer interface points

00:17:18,040 --> 00:17:24,520
you have the easier it is to use the

00:17:23,020 --> 00:17:26,170
smaller footprint you have and the

00:17:24,520 --> 00:17:30,580
smaller contract you have between two

00:17:26,170 --> 00:17:32,530
components or or two applications the

00:17:30,580 --> 00:17:34,570
fewer of failure paths you'll have in

00:17:32,530 --> 00:17:37,990
diagnosing any problems that hope that

00:17:34,570 --> 00:17:39,710
go over that interface so it promotes

00:17:37,990 --> 00:17:41,929
easy fault detection

00:17:39,710 --> 00:17:44,720
on your side and it promotes ease of

00:17:41,929 --> 00:17:51,529
understanding on the on the customer on

00:17:44,720 --> 00:17:53,960
the user's side an extensibility it is

00:17:51,529 --> 00:17:57,260
the flip side to abstraction it's hard

00:17:53,960 --> 00:17:59,360
to provide something that's extensible

00:17:57,260 --> 00:18:03,470
in a meaningful fashion where you only

00:17:59,360 --> 00:18:04,760
got one or two piece of of interface so

00:18:03,470 --> 00:18:07,880
if you're going to expose everything

00:18:04,760 --> 00:18:10,690
there make it as easy as you can for

00:18:07,880 --> 00:18:13,880
them to go forward with that I'm

00:18:10,690 --> 00:18:17,000
opinionated I don't like final I never

00:18:13,880 --> 00:18:19,159
have other people at this conference

00:18:17,000 --> 00:18:21,049
will say they love it and that's fine by

00:18:19,159 --> 00:18:24,110
them but I like the idea that if I've

00:18:21,049 --> 00:18:27,320
got code that I have access to if I'm

00:18:24,110 --> 00:18:29,960
extending it then I want the ability to

00:18:27,320 --> 00:18:32,000
add functionality I probably have to i

00:18:29,960 --> 00:18:33,620
dint in dem nuh Phi the people who wrote

00:18:32,000 --> 00:18:36,799
it in the first place if I break it's my

00:18:33,620 --> 00:18:39,500
fault but leaving it open to extension

00:18:36,799 --> 00:18:43,039
means that I'm more likely to use it as

00:18:39,500 --> 00:18:46,549
a user restrictors required I was

00:18:43,039 --> 00:18:48,799
talking about open closed ways of

00:18:46,549 --> 00:18:52,700
accessing your business objects the

00:18:48,799 --> 00:18:54,590
public protected private concepts that

00:18:52,700 --> 00:18:57,370
is the downside of making everything

00:18:54,590 --> 00:19:00,200
public is that you can't take that back

00:18:57,370 --> 00:19:02,330
if you've made something public you

00:19:00,200 --> 00:19:07,610
can't then retract that that proof that

00:19:02,330 --> 00:19:11,570
becomes your contract imagine if that's

00:19:07,610 --> 00:19:13,730
about example say you go to come a

00:19:11,570 --> 00:19:16,610
social media company a and you're

00:19:13,730 --> 00:19:19,039
consuming their data and you're using

00:19:16,610 --> 00:19:22,070
all their API endpoints and suddenly

00:19:19,039 --> 00:19:25,549
they think well actually why would we

00:19:22,070 --> 00:19:27,950
want to expose this really niche bit of

00:19:25,549 --> 00:19:30,559
our API why would we want you to see

00:19:27,950 --> 00:19:33,529
exactly who wrote this comment it's just

00:19:30,559 --> 00:19:36,200
in that bit they retract that without

00:19:33,529 --> 00:19:38,210
thinking and suddenly your product which

00:19:36,200 --> 00:19:42,370
really relied on that niche aspect

00:19:38,210 --> 00:19:44,809
suddenly that doesn't work anymore so

00:19:42,370 --> 00:19:47,419
retracting things Republic and turning

00:19:44,809 --> 00:19:49,370
them back into protecting private in the

00:19:47,419 --> 00:19:53,360
code base is very similar to a web

00:19:49,370 --> 00:19:55,820
service API in that respect and again

00:19:53,360 --> 00:19:58,280
patterns again help when you're

00:19:55,820 --> 00:19:59,870
extending other people's code when

00:19:58,280 --> 00:20:02,510
you're trying to understand how it works

00:19:59,870 --> 00:20:03,770
using those patterns mean that you have

00:20:02,510 --> 00:20:07,429
a common language a common understanding

00:20:03,770 --> 00:20:09,860
of what that code does so that you can

00:20:07,429 --> 00:20:18,679
add to that it's very easy to slot it

00:20:09,860 --> 00:20:21,770
into your head oh hello Siri so

00:20:18,679 --> 00:20:24,710
functionality and reliability they kind

00:20:21,770 --> 00:20:27,080
of go together they are two different

00:20:24,710 --> 00:20:31,929
bits on the pyramid but I'd like to

00:20:27,080 --> 00:20:31,929
think of them very close closely related

00:20:32,140 --> 00:20:36,590
hopefully by now after all the talks

00:20:34,640 --> 00:20:38,890
we've had this year last year the year

00:20:36,590 --> 00:20:43,190
before the whole testing concept is

00:20:38,890 --> 00:20:45,590
getting out there it's very new but it

00:20:43,190 --> 00:20:48,650
would be it'd be remiss to not mention

00:20:45,590 --> 00:20:51,440
that as you go through so when you're

00:20:48,650 --> 00:20:55,070
testing your your api's use the

00:20:51,440 --> 00:20:57,130
appropriate testing methodology when

00:20:55,070 --> 00:21:00,049
you're using a web service when you're

00:20:57,130 --> 00:21:02,150
supplying a web service use functional

00:21:00,049 --> 00:21:04,280
testing from the outside to make sure

00:21:02,150 --> 00:21:07,010
it's working as well as unit testing on

00:21:04,280 --> 00:21:09,440
the very atomic level when you're doing

00:21:07,010 --> 00:21:12,919
your libraries it makes a bit less sense

00:21:09,440 --> 00:21:15,140
to me anyway to use functional testing

00:21:12,919 --> 00:21:16,580
their stick to the unit testing but

00:21:15,140 --> 00:21:19,220
above all the most important thing is

00:21:16,580 --> 00:21:22,580
that you are testing that you are

00:21:19,220 --> 00:21:25,070
putting those in place make it part of

00:21:22,580 --> 00:21:28,120
your build and release process in a way

00:21:25,070 --> 00:21:30,530
that again expressing my opinion

00:21:28,120 --> 00:21:33,110
functional tests don't necessarily have

00:21:30,530 --> 00:21:35,210
to block a build from passing and go

00:21:33,110 --> 00:21:39,460
into production because they are a

00:21:35,210 --> 00:21:43,490
subjective at the end of it unit tests

00:21:39,460 --> 00:21:46,040
must stop a build from going through and

00:21:43,490 --> 00:21:47,419
if you're providing a web service or any

00:21:46,040 --> 00:21:49,160
kind of service like that that needs

00:21:47,419 --> 00:21:51,020
that functional testing that's the point

00:21:49,160 --> 00:21:53,720
at which you have to be absolutely sure

00:21:51,020 --> 00:21:55,340
when you put out there it works if

00:21:53,720 --> 00:21:56,600
anything you'll be very confident when

00:21:55,340 --> 00:21:57,890
it goes out there because you're not

00:21:56,600 --> 00:22:01,010
going to break anything in production

00:21:57,890 --> 00:22:02,450
and now and I'll shout at you find ways

00:22:01,010 --> 00:22:05,240
in which you can apply those same

00:22:02,450 --> 00:22:06,310
functional tests in your live production

00:22:05,240 --> 00:22:08,650
environment

00:22:06,310 --> 00:22:10,810
so that as soon as the problem rears its

00:22:08,650 --> 00:22:13,240
ugly head you're there you know you've

00:22:10,810 --> 00:22:17,020
had your tests fail and you can jump

00:22:13,240 --> 00:22:21,520
right on it and in that respect consider

00:22:17,020 --> 00:22:24,760
recording the interactions between users

00:22:21,520 --> 00:22:26,560
and your API consider recording that in

00:22:24,760 --> 00:22:28,930
such a fashion that you can replay that

00:22:26,560 --> 00:22:30,130
in the future so if there is a fault

00:22:28,930 --> 00:22:32,380
through there and you're trying to

00:22:30,130 --> 00:22:34,450
figure out exactly what's gone on you

00:22:32,380 --> 00:22:36,220
can replay that back again you can see

00:22:34,450 --> 00:22:38,380
what the traffic's gone in and logging

00:22:36,220 --> 00:22:42,190
as I mentioned in a bit that helps you

00:22:38,380 --> 00:22:44,620
enormously there and if anything the

00:22:42,190 --> 00:22:46,420
regression the prevention of regression

00:22:44,620 --> 00:22:51,010
and the detection of regression is

00:22:46,420 --> 00:22:53,380
really quite useful metrics we use a lot

00:22:51,010 --> 00:22:56,350
of them they tell you what is happening

00:22:53,380 --> 00:22:58,120
and they tell you what just happened

00:22:56,350 --> 00:23:00,820
after that they start becoming less

00:22:58,120 --> 00:23:02,980
useful but they're there in the moment

00:23:00,820 --> 00:23:04,810
they're raw numbers you can use them in

00:23:02,980 --> 00:23:08,380
a quantifiable fashion and compare them

00:23:04,810 --> 00:23:12,310
to what was happening an idea for web

00:23:08,380 --> 00:23:15,490
services and for some internal code ap

00:23:12,310 --> 00:23:17,500
is record the status codes in your

00:23:15,490 --> 00:23:20,350
metrics if you've got high volumes of

00:23:17,500 --> 00:23:22,990
use going through record that this error

00:23:20,350 --> 00:23:26,230
occurred record that this 404 happened

00:23:22,990 --> 00:23:28,630
record all your 200 oks and make sure

00:23:26,230 --> 00:23:30,490
that you have a general understanding of

00:23:28,630 --> 00:23:33,550
how many on a good day you're going to

00:23:30,490 --> 00:23:35,800
get as of the back of that comparing

00:23:33,550 --> 00:23:38,410
against normal running you can create

00:23:35,800 --> 00:23:42,160
alerts and products such as nagios and

00:23:38,410 --> 00:23:43,720
so on that I'll allow you to detect when

00:23:42,160 --> 00:23:46,150
may be a throughput is dropped off and

00:23:43,720 --> 00:23:48,970
detect those those issues that are

00:23:46,150 --> 00:23:51,850
happening there and then it gives you

00:23:48,970 --> 00:23:54,100
that insight into running code and we

00:23:51,850 --> 00:23:57,340
use a great couple of great tools stats

00:23:54,100 --> 00:24:00,160
d to get our stuff into graphites to

00:23:57,340 --> 00:24:02,590
show us the graphs that adorn our pretty

00:24:00,160 --> 00:24:05,940
ops wall we've even got a blue light

00:24:02,590 --> 00:24:08,140
that flashes when there's a server alert

00:24:05,940 --> 00:24:11,500
and now we've got lights that go from

00:24:08,140 --> 00:24:15,419
orange to red so we have the ops kind of

00:24:11,500 --> 00:24:17,740
jump up and then shout at us

00:24:15,419 --> 00:24:20,710
logging I mentioned it tells you what

00:24:17,740 --> 00:24:22,600
happened it helps you find the

00:24:20,710 --> 00:24:24,970
production faults so if you're putting

00:24:22,600 --> 00:24:27,159
that in your web service you can go back

00:24:24,970 --> 00:24:29,260
through your logs and again I think been

00:24:27,159 --> 00:24:32,169
Wayne earlier did a talk on logs fashion

00:24:29,260 --> 00:24:33,460
and so on in your back through your logs

00:24:32,169 --> 00:24:35,799
and at the time at which someone has

00:24:33,460 --> 00:24:39,039
raised a complaint perhaps or when you

00:24:35,799 --> 00:24:40,779
have seen in your metrics the the object

00:24:39,039 --> 00:24:42,850
of stuff that's gone on you can have a

00:24:40,779 --> 00:24:45,760
look in your logs and see the subjective

00:24:42,850 --> 00:24:48,909
so littering your code with entries into

00:24:45,760 --> 00:24:51,940
your log files saying this happens that

00:24:48,909 --> 00:24:53,860
happens Oh something bad happens means

00:24:51,940 --> 00:24:55,929
that you can easily find out those

00:24:53,860 --> 00:24:58,600
faults and production just by going back

00:24:55,929 --> 00:25:02,049
to the in times when you know something

00:24:58,600 --> 00:25:04,690
happens a good idea that I picked up is

00:25:02,049 --> 00:25:08,440
if you do have an error that you can't

00:25:04,690 --> 00:25:10,480
explain to your user and generally you

00:25:08,440 --> 00:25:12,640
know when an errors happens but you

00:25:10,480 --> 00:25:15,250
don't want to shout it's because Dave

00:25:12,640 --> 00:25:19,750
dropped the production database you say

00:25:15,250 --> 00:25:22,419
an internal server error occurred please

00:25:19,750 --> 00:25:24,730
try again here's an error reference so

00:25:22,419 --> 00:25:27,220
if they continue getting that back you

00:25:24,730 --> 00:25:29,710
can cross-reference that error message

00:25:27,220 --> 00:25:31,270
that reference that comes in against the

00:25:29,710 --> 00:25:35,500
logs that you've been storing hopefully

00:25:31,270 --> 00:25:36,610
studiously in your in your log store it

00:25:35,500 --> 00:25:39,399
does give you insight into running

00:25:36,610 --> 00:25:43,659
applications and if you're embedding

00:25:39,399 --> 00:25:46,029
logging in your AP is in the code api's

00:25:43,659 --> 00:25:50,049
it also gives another understanding to

00:25:46,029 --> 00:25:51,549
your users using your library what

00:25:50,049 --> 00:25:55,210
should be happening there in a way

00:25:51,549 --> 00:25:58,029
that's highly highly real time and

00:25:55,210 --> 00:25:59,529
doesn't rely on the comments to dig into

00:25:58,029 --> 00:26:02,169
the code if they can just plug a logger

00:25:59,529 --> 00:26:03,940
in there see what's going on it's a lot

00:26:02,169 --> 00:26:08,559
more helpful than just having to grep

00:26:03,940 --> 00:26:10,230
through versioning so I was mentioning

00:26:08,559 --> 00:26:13,570
earlier about how you can't retract

00:26:10,230 --> 00:26:17,110
public-private protected how dropping

00:26:13,570 --> 00:26:20,020
bits of your API hurts the people who

00:26:17,110 --> 00:26:22,990
are integrating with that so it really

00:26:20,020 --> 00:26:24,460
is a good idea to decide on versioning

00:26:22,990 --> 00:26:26,529
of your API and how you're going to do

00:26:24,460 --> 00:26:27,779
that upfront lots of people put in their

00:26:26,529 --> 00:26:29,789
URLs some people

00:26:27,779 --> 00:26:31,979
like to put in headers and so on but if

00:26:29,789 --> 00:26:34,440
you start off with this is how this is

00:26:31,979 --> 00:26:36,269
versions then when you change the

00:26:34,440 --> 00:26:37,830
version your customers your users the

00:26:36,269 --> 00:26:41,879
people who rely on that are ready for

00:26:37,830 --> 00:26:44,580
that tell them how you upgrade it tell

00:26:41,879 --> 00:26:47,219
them how you are going to improve it and

00:26:44,580 --> 00:26:50,549
how when you deprecated things what the

00:26:47,219 --> 00:26:55,460
process is for that decide what a

00:26:50,549 --> 00:26:58,080
breaking changes sometimes your users

00:26:55,460 --> 00:27:00,559
they might not have the best of ideas

00:26:58,080 --> 00:27:04,109
and how they use what you're giving them

00:27:00,559 --> 00:27:06,539
so an example a customer at a previous

00:27:04,109 --> 00:27:08,969
company would take the response from a

00:27:06,539 --> 00:27:11,759
web service API they take each

00:27:08,969 --> 00:27:14,190
individual field that was coming back in

00:27:11,759 --> 00:27:19,349
a JSON object they turn that into a

00:27:14,190 --> 00:27:23,549
MySQL column name and set the value in

00:27:19,349 --> 00:27:27,779
in an insert so if I go about and add

00:27:23,549 --> 00:27:29,129
another field I don't know what that's

00:27:27,779 --> 00:27:31,169
going to do to our customers but it

00:27:29,129 --> 00:27:33,509
seems a really reasonable thing for me

00:27:31,169 --> 00:27:34,739
to do to add extra information because

00:27:33,509 --> 00:27:38,820
you know you look at the parsing of

00:27:34,739 --> 00:27:41,099
Jason by PHP and its really kind and

00:27:38,820 --> 00:27:42,570
happy and it if there's more stuff in

00:27:41,099 --> 00:27:44,580
there it doesn't matter because you can

00:27:42,570 --> 00:27:47,339
just ignore it whereas a customer who's

00:27:44,580 --> 00:27:49,379
heavily reliant on the exact format of

00:27:47,339 --> 00:27:52,200
that message coming in they might be

00:27:49,379 --> 00:27:54,029
utterly affected so if you explain to

00:27:52,200 --> 00:27:56,999
them and communicate to them what a

00:27:54,029 --> 00:27:59,489
breaking change is and the points of

00:27:56,999 --> 00:28:02,279
which you introduce a new version as

00:27:59,489 --> 00:28:04,289
opposed to introducing a new field then

00:28:02,279 --> 00:28:06,139
there are a lot more likely to code

00:28:04,289 --> 00:28:09,529
defensively around that kind of thing

00:28:06,139 --> 00:28:12,029
also when you build web services for

00:28:09,529 --> 00:28:15,029
enterprises even when you build software

00:28:12,029 --> 00:28:17,639
for enterprises they're highly sensitive

00:28:15,029 --> 00:28:19,679
to change their highly sensitive to the

00:28:17,639 --> 00:28:21,299
cost of change so if you can tell them

00:28:19,679 --> 00:28:23,759
how long you're going to support that in

00:28:21,299 --> 00:28:26,039
the way that we now have for PHP and for

00:28:23,759 --> 00:28:28,919
Ubuntu has been doing that for a while

00:28:26,039 --> 00:28:31,409
now and symphony and so on then they can

00:28:28,919 --> 00:28:33,960
expect change in X but they can expect

00:28:31,409 --> 00:28:35,970
not to have change in that whole time so

00:28:33,960 --> 00:28:37,950
explaining that upfront will allow them

00:28:35,970 --> 00:28:40,159
to deal with that change in a much more

00:28:37,950 --> 00:28:43,289
graceful fashion

00:28:40,159 --> 00:28:46,470
provide feedback it should be a simple

00:28:43,289 --> 00:28:48,539
one but when something goes wrong or

00:28:46,470 --> 00:28:50,970
when something goes right make sure that

00:28:48,539 --> 00:28:53,729
your feedback to the user is clear make

00:28:50,970 --> 00:28:55,169
sure that the message is actionable make

00:28:53,729 --> 00:28:57,690
sure that you use appropriate language

00:28:55,169 --> 00:29:00,960
again going back to Anna's talk just now

00:28:57,690 --> 00:29:04,440
don't swear give them the reason for

00:29:00,960 --> 00:29:08,190
failure as reasonably as you can tell

00:29:04,440 --> 00:29:10,649
them this happened because this went

00:29:08,190 --> 00:29:13,859
wrong if it's their fault don't be rude

00:29:10,649 --> 00:29:15,029
about it don't swear again don't swear

00:29:13,859 --> 00:29:18,239
but don't point the finger of blame

00:29:15,029 --> 00:29:21,200
saying oh you just that just be clear

00:29:18,239 --> 00:29:24,059
and tell them how to resolve the issue

00:29:21,200 --> 00:29:27,119
another idea that I'd like to put four

00:29:24,059 --> 00:29:30,149
it is instead of using numbers which are

00:29:27,119 --> 00:29:31,679
not necessarily human readable instead

00:29:30,149 --> 00:29:33,479
of putting those out in error codes as

00:29:31,679 --> 00:29:36,059
we use them within reason outside of the

00:29:33,479 --> 00:29:38,700
standards supply not only the English

00:29:36,059 --> 00:29:41,190
plain text this is the arrow text but

00:29:38,700 --> 00:29:44,970
think about providing a kind of a

00:29:41,190 --> 00:29:47,519
normalized dot notation type string that

00:29:44,970 --> 00:29:50,369
is vaguely readable in English that

00:29:47,519 --> 00:29:52,379
isn't a number that allows your customer

00:29:50,369 --> 00:29:55,320
with an appropriate glossary that you

00:29:52,379 --> 00:29:56,909
have provided to translate that into the

00:29:55,320 --> 00:30:00,239
language of their choice for their

00:29:56,909 --> 00:30:03,330
customers for their users or into the

00:30:00,239 --> 00:30:06,450
language of choice for them because you

00:30:03,330 --> 00:30:08,789
know in encode we have a great practice

00:30:06,450 --> 00:30:10,830
of using constants to refer to numbers

00:30:08,789 --> 00:30:12,720
we give them descriptive names we use

00:30:10,830 --> 00:30:14,129
them all over the place just because we

00:30:12,720 --> 00:30:16,379
don't know what the number four is in

00:30:14,129 --> 00:30:18,509
this context without that the number

00:30:16,379 --> 00:30:21,570
four is an error message in someone who

00:30:18,509 --> 00:30:23,789
is looking at a full-on response means

00:30:21,570 --> 00:30:27,289
nothing to the person who's implementing

00:30:23,789 --> 00:30:27,289
the API that has to deal with that

00:30:28,009 --> 00:30:34,200
proficiency how can you do things that

00:30:31,229 --> 00:30:37,590
aids the use of your API that aid the

00:30:34,200 --> 00:30:40,229
use of your project and also that builds

00:30:37,590 --> 00:30:44,309
the experience and the confidence of the

00:30:40,229 --> 00:30:45,989
users of that documentation of lame de a

00:30:44,309 --> 00:30:48,840
couple of times but you must document

00:30:45,989 --> 00:30:51,239
things there is no such thing as self

00:30:48,840 --> 00:30:53,060
documenting code when you can't see the

00:30:51,239 --> 00:30:56,040
code

00:30:53,060 --> 00:30:57,510
so an interface you can't see in you've

00:30:56,040 --> 00:30:59,610
just you know that that's what it does

00:30:57,510 --> 00:31:01,010
you know what's going in but you don't

00:30:59,610 --> 00:31:03,930
know what it's doing underneath

00:31:01,010 --> 00:31:07,260
providing documentation as to how to use

00:31:03,930 --> 00:31:09,150
your stuff well could clearly will Clues

00:31:07,260 --> 00:31:12,180
you clue your users in into how to use

00:31:09,150 --> 00:31:13,980
it make sure that you expand on concepts

00:31:12,180 --> 00:31:16,050
may that make sure that your rightful

00:31:13,980 --> 00:31:17,940
some documentation and that you are

00:31:16,050 --> 00:31:21,210
being as informative about things as you

00:31:17,940 --> 00:31:24,330
can so that it will reduce inbound

00:31:21,210 --> 00:31:26,790
requests for your help if you write

00:31:24,330 --> 00:31:29,370
something that's very popular but has

00:31:26,790 --> 00:31:30,600
the mysteries of no documentation you're

00:31:29,370 --> 00:31:33,360
just going to get bombarded with

00:31:30,600 --> 00:31:35,250
questions from people all the time so

00:31:33,360 --> 00:31:38,130
fill out that documentation supplied

00:31:35,250 --> 00:31:40,710
that include your working examples if

00:31:38,130 --> 00:31:44,390
you're providing an API in the code form

00:31:40,710 --> 00:31:46,440
in a library forum link to the

00:31:44,390 --> 00:31:48,840
documentation from the code that it

00:31:46,440 --> 00:31:50,280
refers to provide your manuals and quick

00:31:48,840 --> 00:31:52,320
start guides and cookbooks and a fake

00:31:50,280 --> 00:31:57,110
use and have I gotten on that point

00:31:52,320 --> 00:32:00,870
enough think about living documentation

00:31:57,110 --> 00:32:04,830
so I like to describe some engineers as

00:32:00,870 --> 00:32:07,170
proactively lazy you have something to

00:32:04,830 --> 00:32:09,990
do a lot of the time and it gets boring

00:32:07,170 --> 00:32:11,630
and it's wasting your time so you make

00:32:09,990 --> 00:32:14,730
that effort to write a tool that

00:32:11,630 --> 00:32:17,520
automates that for you if you can find a

00:32:14,730 --> 00:32:20,310
way to use your code documentation to

00:32:17,520 --> 00:32:22,290
drive real human documentation you've

00:32:20,310 --> 00:32:24,240
killed two birds with one stone you've

00:32:22,290 --> 00:32:26,130
explained what the stuff does at the

00:32:24,240 --> 00:32:29,580
very basic level and you've also proved

00:32:26,130 --> 00:32:34,410
eight created a way in which your users

00:32:29,580 --> 00:32:36,150
can can see what that does by only

00:32:34,410 --> 00:32:38,700
writing at all in the one place where it

00:32:36,150 --> 00:32:41,640
is the source of truth so use your dark

00:32:38,700 --> 00:32:43,890
blocks explained at the top of method

00:32:41,640 --> 00:32:47,280
another class exactly what it does write

00:32:43,890 --> 00:32:50,010
it in a format that's possible by great

00:32:47,280 --> 00:32:51,450
projects like PHP documenter there's the

00:32:50,010 --> 00:32:53,610
cross language one that someone brought

00:32:51,450 --> 00:32:55,680
up at a previous talk about and called

00:32:53,610 --> 00:32:58,650
doxygen which means that you can have

00:32:55,680 --> 00:33:00,720
cross-language stuff in one document

00:32:58,650 --> 00:33:03,090
form generated automatically from your

00:33:00,720 --> 00:33:04,710
code and when you're doing that like I

00:33:03,090 --> 00:33:05,880
saying use your standards so that

00:33:04,710 --> 00:33:09,480
they're easily possible

00:33:05,880 --> 00:33:11,310
by these tools one of the things I'm

00:33:09,480 --> 00:33:14,250
talking about proactively lazy engineers

00:33:11,310 --> 00:33:17,190
we use a system called mashery i/o docks

00:33:14,250 --> 00:33:20,220
which allows you an interactive way to

00:33:17,190 --> 00:33:22,350
explore an API in the form of web forms

00:33:20,220 --> 00:33:24,240
so you see this endpoint you expand it

00:33:22,350 --> 00:33:27,630
and you can see a form that you fill in

00:33:24,240 --> 00:33:29,010
the the parameters hit go and it gives

00:33:27,630 --> 00:33:31,140
you the response and all the information

00:33:29,010 --> 00:33:32,640
around there and it's a really nice way

00:33:31,140 --> 00:33:34,470
of just dipping into that in an

00:33:32,640 --> 00:33:36,090
interactive fashion without having to

00:33:34,470 --> 00:33:38,910
wade through all the documentation to

00:33:36,090 --> 00:33:40,470
find exactly what it does then I've

00:33:38,910 --> 00:33:44,250
taken that one step further at DataSift

00:33:40,470 --> 00:33:46,860
I've added annotations to the

00:33:44,250 --> 00:33:49,590
documentation that resides at the same

00:33:46,860 --> 00:33:52,320
place as the code that defines the API

00:33:49,590 --> 00:33:54,780
for the public added more annotations

00:33:52,320 --> 00:33:57,030
there that when poorest by a tool will

00:33:54,780 --> 00:33:58,650
generate the configuration for IO dogs

00:33:57,030 --> 00:34:00,990
so you make that part of the build

00:33:58,650 --> 00:34:02,610
process and then you've got this system

00:34:00,990 --> 00:34:04,350
that reflects reduction that's highly

00:34:02,610 --> 00:34:06,180
useful and you don't have to touch ever

00:34:04,350 --> 00:34:07,710
again because all you do is change it

00:34:06,180 --> 00:34:10,679
one place and it's available for your

00:34:07,710 --> 00:34:13,350
your users so think of ways in which you

00:34:10,679 --> 00:34:15,450
can reduce the pain of writing

00:34:13,350 --> 00:34:18,330
documentation the pain of writing

00:34:15,450 --> 00:34:21,690
automatable documentation just to make

00:34:18,330 --> 00:34:23,460
your life easier provide support and

00:34:21,690 --> 00:34:26,460
community there are some people in the

00:34:23,460 --> 00:34:28,800
room who have done this and who do this

00:34:26,460 --> 00:34:32,370
regularly but it bears saying tell

00:34:28,800 --> 00:34:34,620
people how they can contact you it's no

00:34:32,370 --> 00:34:38,399
good if I have a problem and I can't get

00:34:34,620 --> 00:34:40,350
in touch with you show people the exact

00:34:38,399 --> 00:34:43,470
place where they can get help tell them

00:34:40,350 --> 00:34:45,240
where the PHP IRC channel is tell them

00:34:43,470 --> 00:34:48,720
where the forums are for this tell them

00:34:45,240 --> 00:34:51,899
where all the documentation lives an

00:34:48,720 --> 00:34:54,060
invite feedback be graceful and

00:34:51,899 --> 00:34:55,610
attentive when people get in touch with

00:34:54,060 --> 00:34:58,800
you and say there's a problem with your

00:34:55,610 --> 00:35:02,220
interface maybe nine times out of ten it

00:34:58,800 --> 00:35:04,710
is their problem but that one time that

00:35:02,220 --> 00:35:06,300
one time if you're a jerk to them they

00:35:04,710 --> 00:35:08,610
will remember that that you were a jerk

00:35:06,300 --> 00:35:11,510
for no reason and those other nine times

00:35:08,610 --> 00:35:15,060
they'll just remember that you're a jerk

00:35:11,510 --> 00:35:17,940
invite those contributions define how

00:35:15,060 --> 00:35:19,320
people can contribute because it it

00:35:17,940 --> 00:35:21,390
allows

00:35:19,320 --> 00:35:22,950
people to do the work for you in a way

00:35:21,390 --> 00:35:24,840
that you will say yeah that looks great

00:35:22,950 --> 00:35:27,510
straight in it'll stop you having to

00:35:24,840 --> 00:35:30,600
rewrite the stuff to rules that they're

00:35:27,510 --> 00:35:32,760
not aware of uh and from all that learn

00:35:30,600 --> 00:35:35,040
from your users learn from the people

00:35:32,760 --> 00:35:37,290
who are using your stuff day in and day

00:35:35,040 --> 00:35:39,180
out you might have written it once and

00:35:37,290 --> 00:35:41,190
forgotten about it but they're living

00:35:39,180 --> 00:35:43,890
with it day to day they're living with

00:35:41,190 --> 00:35:45,840
with the choices that you've made and if

00:35:43,890 --> 00:35:47,310
they feel the pain you need to take that

00:35:45,840 --> 00:35:49,500
on board so that you can make the

00:35:47,310 --> 00:35:51,000
changes that they require and you might

00:35:49,500 --> 00:35:52,800
actually find that they're using stuff

00:35:51,000 --> 00:35:54,990
in a way that you had no idea they would

00:35:52,800 --> 00:35:58,560
ever do it that way why should they and

00:35:54,990 --> 00:35:59,850
why should you know that what someone's

00:35:58,560 --> 00:36:02,670
going to do with this really highly

00:35:59,850 --> 00:36:04,950
extensible and accessible API that

00:36:02,670 --> 00:36:06,570
you've created and then you can roll

00:36:04,950 --> 00:36:11,600
that kind of stuff back in or get them

00:36:06,570 --> 00:36:16,320
to do it and contribute back creativity

00:36:11,600 --> 00:36:17,880
so I got to the top of the pyramid I got

00:36:16,320 --> 00:36:22,310
a bit stumped as to what creativity

00:36:17,880 --> 00:36:25,050
might mean here but in the general sense

00:36:22,310 --> 00:36:28,020
providing the flexibility providing the

00:36:25,050 --> 00:36:33,060
extensibility allows for serendipity and

00:36:28,020 --> 00:36:34,980
all the other it ease it's it if you if

00:36:33,060 --> 00:36:37,410
you provide those clear pizza feedback

00:36:34,980 --> 00:36:40,470
if you provide that highly usable and

00:36:37,410 --> 00:36:43,620
highly functional and highly reliable

00:36:40,470 --> 00:36:46,290
API people will do fun things with your

00:36:43,620 --> 00:36:48,420
stuff that you never imagined I can't

00:36:46,290 --> 00:36:50,550
guarantee that they definitely will but

00:36:48,420 --> 00:36:53,130
hopefully they do and that's a glorious

00:36:50,550 --> 00:36:55,050
to see I love it when people use the

00:36:53,130 --> 00:36:58,380
stuff that I've done in a way that I had

00:36:55,050 --> 00:37:00,750
no idea you'd be able to do that as part

00:36:58,380 --> 00:37:04,260
of that reach out to them and find out

00:37:00,750 --> 00:37:06,270
what they are doing with your kit as a

00:37:04,260 --> 00:37:08,820
result of that encourage them and be

00:37:06,270 --> 00:37:11,370
positive about what they've done that

00:37:08,820 --> 00:37:13,740
will not only help them see you is a

00:37:11,370 --> 00:37:16,500
really great person but it will also

00:37:13,740 --> 00:37:18,090
help them feedback to you when even

00:37:16,500 --> 00:37:19,680
small things are wrong that they feel a

00:37:18,090 --> 00:37:21,690
bit embarrassed about mentioning and

00:37:19,680 --> 00:37:23,640
they'll do it in a happy fashion they'll

00:37:21,690 --> 00:37:25,740
be happily feeding you these bugs and

00:37:23,640 --> 00:37:29,160
not expecting you to fix them in five

00:37:25,740 --> 00:37:31,530
seconds maybe 10 but they'll be happily

00:37:29,160 --> 00:37:33,589
getting involved and above all they'll

00:37:31,530 --> 00:37:38,189
use your API is more

00:37:33,589 --> 00:37:40,979
and I've gone on about lots of different

00:37:38,189 --> 00:37:44,039
ideas I've mentioned a lot of things at

00:37:40,979 --> 00:37:47,009
a very high pace and I just wanted to

00:37:44,039 --> 00:37:48,900
say a few things about pragmatism I

00:37:47,009 --> 00:37:51,119
talked about usability I talked about

00:37:48,900 --> 00:37:53,809
reliability and all these ways in which

00:37:51,119 --> 00:37:58,679
that you can apply them and protect them

00:37:53,809 --> 00:38:00,869
but pragmatism cutting a corner here and

00:37:58,679 --> 00:38:04,799
there it does promote technical debt in

00:38:00,869 --> 00:38:07,309
a way but also if you're trying to build

00:38:04,799 --> 00:38:10,469
perfect you're never going to get there

00:38:07,309 --> 00:38:12,299
so look at what perfect is aim it

00:38:10,469 --> 00:38:15,299
perfect and deliver when it's good

00:38:12,299 --> 00:38:17,849
enough and then iterate from that point

00:38:15,299 --> 00:38:20,669
it's the whole kind of agile concept of

00:38:17,849 --> 00:38:22,229
get something done get out there and

00:38:20,669 --> 00:38:23,549
start improving and improving improving

00:38:22,229 --> 00:38:26,339
but if you're constantly trying to

00:38:23,549 --> 00:38:28,679
design your api's you're constantly

00:38:26,339 --> 00:38:30,630
trying to design your software in such a

00:38:28,679 --> 00:38:33,959
way that meets all the ideals you'll

00:38:30,630 --> 00:38:38,759
spend twice as long on it for less for

00:38:33,959 --> 00:38:43,219
less response for less use find that

00:38:38,759 --> 00:38:47,699
balance don't go restful go rest like

00:38:43,219 --> 00:38:50,249
avoid rest ish but rest like it's really

00:38:47,699 --> 00:38:52,679
hard to fit the concepts of our PC for

00:38:50,249 --> 00:38:56,339
example of performing an action into

00:38:52,679 --> 00:38:58,529
rest to get your head to do those flips

00:38:56,339 --> 00:39:00,329
that say well I suppose if on

00:38:58,529 --> 00:39:02,939
transferring state if I tell it that

00:39:00,329 --> 00:39:05,130
it's running then it will start running

00:39:02,939 --> 00:39:07,169
and if I tell it that it stopped it'll

00:39:05,130 --> 00:39:09,989
stop and that's the way you fit it into

00:39:07,169 --> 00:39:13,439
rest but come on that's really useless

00:39:09,989 --> 00:39:16,469
for a user allow them to do RPC type

00:39:13,439 --> 00:39:18,449
stuff in the rest environment cross

00:39:16,469 --> 00:39:21,059
those boundaries if you know what the

00:39:18,449 --> 00:39:23,009
ideal is then like in jazz you can

00:39:21,059 --> 00:39:24,059
syncopate about the rhythms and produce

00:39:23,009 --> 00:39:26,039
something that's a hell of a lot more

00:39:24,059 --> 00:39:28,219
useful a hell of a lot more beautiful

00:39:26,039 --> 00:39:31,890
and a hell of a lot easier on the brain

00:39:28,219 --> 00:39:34,349
and being realistic just be realistic

00:39:31,890 --> 00:39:38,719
about what your stuff does and the time

00:39:34,349 --> 00:39:42,509
in which you can deliver it above all

00:39:38,719 --> 00:39:46,619
take pride if you're happy in the work

00:39:42,509 --> 00:39:49,079
that you have done that will reflect in

00:39:46,619 --> 00:39:52,259
the quality of your work and if the

00:39:49,079 --> 00:39:55,319
quality of your work is good and visible

00:39:52,259 --> 00:39:58,019
from the outside people will see that it

00:39:55,319 --> 00:39:59,789
represents you much like your website

00:39:58,019 --> 00:40:02,880
your corporate website reflects the

00:39:59,789 --> 00:40:06,179
company for better or worse your api's

00:40:02,880 --> 00:40:10,919
reflect you as a developer as a thinker

00:40:06,179 --> 00:40:13,409
as an engineer they flex you so treat it

00:40:10,919 --> 00:40:16,380
like your avatar take pride in that and

00:40:13,409 --> 00:40:29,729
above all impress your users with its

00:40:16,380 --> 00:40:36,569
awesomeness Thanks any questions or are

00:40:29,729 --> 00:40:38,579
we straight onto the prize-giving you

00:40:36,569 --> 00:40:40,739
mentioned versioning what's your

00:40:38,579 --> 00:40:45,809
favorite way to do versioning in a

00:40:40,739 --> 00:40:49,019
usable way so I did start off by saying

00:40:45,809 --> 00:40:50,699
I wasn't trying not to stress different

00:40:49,019 --> 00:40:53,239
things but my personal opinion and one

00:40:50,699 --> 00:40:56,669
that everyone's free to object to is

00:40:53,239 --> 00:40:59,279
versioning in the in the web service

00:40:56,669 --> 00:41:01,890
sense part of the URL right the

00:40:59,279 --> 00:41:04,109
beginning make it a first class citizen

00:41:01,890 --> 00:41:05,969
of the whole thing and that way it's

00:41:04,109 --> 00:41:09,329
easy for proxying and so on to

00:41:05,969 --> 00:41:11,509
redirected underlying different

00:41:09,329 --> 00:41:14,939
implementations if that's what you need

00:41:11,509 --> 00:41:16,229
and also it's very explicit there if you

00:41:14,939 --> 00:41:18,569
start putting in headers or anything

00:41:16,229 --> 00:41:20,189
like that then yeah it might be prettier

00:41:18,569 --> 00:41:22,529
and yeah might be underneath and though

00:41:20,189 --> 00:41:24,359
I put it in content negotiation but at

00:41:22,529 --> 00:41:25,739
the end of it you're just increasing the

00:41:24,359 --> 00:41:28,799
complexity for the person who's

00:41:25,739 --> 00:41:31,259
implementing it and if you start using

00:41:28,799 --> 00:41:32,549
anything such as custom headers then

00:41:31,259 --> 00:41:33,779
you've got to be aware for your

00:41:32,549 --> 00:41:35,789
versioning anyway and for anything

00:41:33,779 --> 00:41:37,349
you've got to be aware that proxies will

00:41:35,789 --> 00:41:40,199
strip that out of the corporate level if

00:41:37,349 --> 00:41:43,140
you're not careful so straighten the URL

00:41:40,199 --> 00:41:50,549
it's very useful there at the code level

00:41:43,140 --> 00:41:53,569
use composer or any other thing like

00:41:50,549 --> 00:41:53,569
composer but

00:41:57,810 --> 00:42:03,580
hey Chris great talk just because I

00:42:01,180 --> 00:42:05,820
referenced you yeah definitely so there

00:42:03,580 --> 00:42:08,350
was a loads of good information in there

00:42:05,820 --> 00:42:11,050
you obviously build lots of AP is an

00:42:08,350 --> 00:42:13,630
invasive da viously exposes AP is a core

00:42:11,050 --> 00:42:15,820
part of this product do you how

00:42:13,630 --> 00:42:19,510
important do you think it is to use your

00:42:15,820 --> 00:42:21,340
own own api's and do you yeah that's

00:42:19,510 --> 00:42:23,590
really it so do you use your own API is

00:42:21,340 --> 00:42:26,050
because obviously when you're building

00:42:23,590 --> 00:42:28,119
api's if you're not using them you can

00:42:26,050 --> 00:42:30,369
kind of not do a lot of the stuff so how

00:42:28,119 --> 00:42:32,590
important is it to do actively use your

00:42:30,369 --> 00:42:35,680
own AP is as well as offer it as a part

00:42:32,590 --> 00:42:37,570
of your service to your users so the

00:42:35,680 --> 00:42:39,550
advantage of dogfooding is that you're

00:42:37,570 --> 00:42:45,100
not necessarily denying your customers

00:42:39,550 --> 00:42:47,350
your users any available functionality

00:42:45,100 --> 00:42:49,000
that you have access to the downside is

00:42:47,350 --> 00:42:52,210
that you might provide them by accident

00:42:49,000 --> 00:42:55,810
with access to the functionality that

00:42:52,210 --> 00:42:57,369
you have it provides it puts extra

00:42:55,810 --> 00:42:59,530
complexity and the things that you build

00:42:57,369 --> 00:43:02,859
if you build upon extra layers that

00:42:59,530 --> 00:43:04,570
aren't necessarily required and it might

00:43:02,859 --> 00:43:06,400
be that what you've done underneath for

00:43:04,570 --> 00:43:08,170
your business logic doesn't really

00:43:06,400 --> 00:43:10,510
reflect the use cases of what the people

00:43:08,170 --> 00:43:13,660
are actually using so well it's a really

00:43:10,510 --> 00:43:18,340
good idea that you experience the pain

00:43:13,660 --> 00:43:22,450
of using your own API or the joy of

00:43:18,340 --> 00:43:24,520
using your own API you've got a you've

00:43:22,450 --> 00:43:26,200
got to comment it in on a couple of

00:43:24,520 --> 00:43:29,680
levels I think you've got to consider

00:43:26,200 --> 00:43:33,820
what's best for the user I use our api's

00:43:29,680 --> 00:43:36,640
personally to do projects that because

00:43:33,820 --> 00:43:39,160
I'm a an employee I'm allowed to use the

00:43:36,640 --> 00:43:42,250
product a bit more freely than than

00:43:39,160 --> 00:43:44,890
those who don't pay us and so in that

00:43:42,250 --> 00:43:46,119
respect yes I use them recreationally

00:43:44,890 --> 00:43:51,940
that makes the sound a bit dodgy but

00:43:46,119 --> 00:43:52,900
yeah I use our API recreationally if in

00:43:51,940 --> 00:43:57,820
case you want to take that out of

00:43:52,900 --> 00:43:59,890
context YouTube uh-huh so yeah it's a

00:43:57,820 --> 00:44:02,800
good idea but with functional testing

00:43:59,890 --> 00:44:04,090
then you can mitigate against some of

00:44:02,800 --> 00:44:11,530
the benefits the dog for

00:44:04,090 --> 00:44:14,200
does help you with in all your

00:44:11,530 --> 00:44:16,390
experience of building api's in in the

00:44:14,200 --> 00:44:17,980
past what's been your worst nightmare

00:44:16,390 --> 00:44:22,620
what would be the the single key thing

00:44:17,980 --> 00:44:24,850
to watch out for and designing the API I

00:44:22,620 --> 00:44:27,040
think if you put out an API that you're

00:44:24,850 --> 00:44:28,210
ashamed of when you put it out it's very

00:44:27,040 --> 00:44:29,710
different if you look at it five days

00:44:28,210 --> 00:44:31,600
later in you you're ashamed of it then

00:44:29,710 --> 00:44:36,370
because we do that with all our code but

00:44:31,600 --> 00:44:38,200
I'm I think anything that is that a

00:44:36,370 --> 00:44:41,250
customer complains about anything a user

00:44:38,200 --> 00:44:43,690
would complain about that's pretty bad

00:44:41,250 --> 00:44:45,160
it's fine if it's well it's not fine if

00:44:43,690 --> 00:44:46,450
it's unreliable but if there's nothing

00:44:45,160 --> 00:44:48,730
you can do on the underlying systems

00:44:46,450 --> 00:44:50,350
that it represents then yeah right then

00:44:48,730 --> 00:44:51,880
it's the company getting the flag that's

00:44:50,350 --> 00:44:53,230
a very personal thing if you've done

00:44:51,880 --> 00:44:55,570
that design and you put that out there

00:44:53,230 --> 00:44:58,390
and customers just can't use it and they

00:44:55,570 --> 00:45:01,510
can't figure it out that's a failing on

00:44:58,390 --> 00:45:03,220
my part if that happens the other thing

00:45:01,510 --> 00:45:06,100
is I don't like the idea if I leave a

00:45:03,220 --> 00:45:08,140
company and someone else takes the code

00:45:06,100 --> 00:45:10,360
that I therefore can't maintain anymore

00:45:08,140 --> 00:45:12,910
if they're swearing about me while I've

00:45:10,360 --> 00:45:14,560
left if they're using my name is a swear

00:45:12,910 --> 00:45:17,350
word and taking my name in vain that's

00:45:14,560 --> 00:45:20,640
probably a really nasty thing to think

00:45:17,350 --> 00:45:20,640
about so sorry time out

00:45:25,770 --> 00:45:30,240
hey again you mentioned libraries at the

00:45:29,020 --> 00:45:32,830
start but you didn't really cover

00:45:30,240 --> 00:45:35,200
libraries so and you were focusing very

00:45:32,830 --> 00:45:38,890
much on kind of exposing web service

00:45:35,200 --> 00:45:40,840
style api's just do you have any

00:45:38,890 --> 00:45:42,880
thoughts on when libraries are required

00:45:40,840 --> 00:45:47,500
and what value they offer and when

00:45:42,880 --> 00:45:49,030
they're needed um libraries are useful

00:45:47,500 --> 00:45:50,470
when you've got more generic

00:45:49,030 --> 00:45:52,960
functionality that you want to share

00:45:50,470 --> 00:45:54,400
with other people if you're open

00:45:52,960 --> 00:45:55,750
sourcing and sharing that kind of stuff

00:45:54,400 --> 00:45:58,210
with people you've got to be very sure

00:45:55,750 --> 00:45:59,590
that you're going to want to use it and

00:45:58,210 --> 00:46:01,960
that it's useful in a more generic

00:45:59,590 --> 00:46:08,650
context if we're talking about API

00:46:01,960 --> 00:46:10,000
client type libraries you you just got

00:46:08,650 --> 00:46:11,800
to be careful you're putting yourself

00:46:10,000 --> 00:46:15,570
out there and you're saying this is that

00:46:11,800 --> 00:46:19,030
has to work and you're just pumping that

00:46:15,570 --> 00:46:20,830
you're just exposing your api's

00:46:19,030 --> 00:46:23,200
frailties a bit more of that way perhaps

00:46:20,830 --> 00:46:26,110
because you're extending yourself into

00:46:23,200 --> 00:46:27,940
the customers into the users ecosystem

00:46:26,110 --> 00:46:33,250
at that point and then it gets a lot

00:46:27,940 --> 00:46:35,470
more sensitive to change so I know I

00:46:33,250 --> 00:46:38,530
talked about Web Services a lot and

00:46:35,470 --> 00:46:41,200
that's because I live that a bit more in

00:46:38,530 --> 00:46:43,000
reality my head translates API to web

00:46:41,200 --> 00:46:47,470
service without me really realizing it

00:46:43,000 --> 00:46:51,130
but that's the way it is libraries are

00:46:47,470 --> 00:46:52,810
very similar in that respect and I'm not

00:46:51,130 --> 00:46:55,900
convinced I just answered your question

00:46:52,810 --> 00:46:58,180
I can give some more context so yes

00:46:55,900 --> 00:47:02,050
you're out like a pusher we have a web

00:46:58,180 --> 00:47:03,700
socket API yeah and the interaction

00:47:02,050 --> 00:47:06,310
between the client and the server is

00:47:03,700 --> 00:47:08,590
quite complex so we built a library to

00:47:06,310 --> 00:47:11,080
abstract away from things I mean are

00:47:08,590 --> 00:47:12,160
there situations where though I mean

00:47:11,080 --> 00:47:13,660
I've obviously got an opinion on this

00:47:12,160 --> 00:47:14,859
bar was interested on yours like when do

00:47:13,660 --> 00:47:17,020
you think those libraries are required

00:47:14,859 --> 00:47:19,090
so is it because the interactions become

00:47:17,020 --> 00:47:20,770
highly complex or is it just that it

00:47:19,090 --> 00:47:23,290
should help make interaction with the

00:47:20,770 --> 00:47:25,240
service more enjoyable well if you if

00:47:23,290 --> 00:47:26,530
you if you got a web service like that

00:47:25,240 --> 00:47:28,390
someone's going to have to figure out

00:47:26,530 --> 00:47:30,010
how to talk to it so if you can provide

00:47:28,390 --> 00:47:32,200
them the tools in which they don't have

00:47:30,010 --> 00:47:33,940
to worry about that if they don't have

00:47:32,200 --> 00:47:35,890
to worry about how to talk over that

00:47:33,940 --> 00:47:37,180
communication link for example that's

00:47:35,890 --> 00:47:37,600
when it's useful to push that kind of

00:47:37,180 --> 00:47:40,390
library

00:47:37,600 --> 00:47:43,300
out and get that out there but again it

00:47:40,390 --> 00:47:46,330
comes with the the provider that you're

00:47:43,300 --> 00:47:48,400
exposing yourself to even more pain if

00:47:46,330 --> 00:47:49,660
things change you keep you have to keep

00:47:48,400 --> 00:47:52,450
those up to date you have to keep your

00:47:49,660 --> 00:47:55,540
API up to date you've got to support

00:47:52,450 --> 00:47:57,820
older versions of software longer and

00:47:55,540 --> 00:47:58,960
that has its own separate problems in

00:47:57,820 --> 00:48:01,000
the background when you've got different

00:47:58,960 --> 00:48:08,350
code bases to worry about testing and so

00:48:01,000 --> 00:48:09,970
on cool well if there's no one else and

00:48:08,350 --> 00:48:12,670
everyone wants their prizes I can't

00:48:09,970 --> 00:48:14,410
guarantee prices I'd be really happy if

00:48:12,670 --> 00:48:16,870
you could leave me a bit of feedback on

00:48:14,410 --> 00:48:19,720
joined in I do do a bit of work on there

00:48:16,870 --> 00:48:21,550
so if the API isn't nicer there than

00:48:19,720 --> 00:48:25,690
that's now something that I seem to have

00:48:21,550 --> 00:48:28,960
taken off so um at least bits of it

00:48:25,690 --> 00:48:30,610
anyway so uh so give me some feedback on

00:48:28,960 --> 00:48:32,530
there and get involved and joined in

00:48:30,610 --> 00:48:34,680
because it's a great community thanks

00:48:32,530 --> 00:48:34,680

YouTube URL: https://www.youtube.com/watch?v=OhVZBTm-vEk


