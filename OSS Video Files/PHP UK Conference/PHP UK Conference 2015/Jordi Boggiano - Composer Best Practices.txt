Title: Jordi Boggiano - Composer Best Practices
Publication date: 2015-04-02
Playlist: PHP UK Conference 2015
Description: 
	Composer has grown into the de-facto standard PHP dependency manager. While we struggle to make it easy to use, mastering dependency management and packaging in general remains tricky. In this session you will learn how to leverage Composer version constraints, grasp stabilities and semantic versioning along with a few more tips on being a good OSS citizen. You should already be comfortable with Composer basics and eager to learn about it some more.

http://slides.seld.be/?file=2015-02-19+Composer+Best+Practices.html
Captions: 
	00:00:06,110 --> 00:00:11,870
welcome good morning so first of all few

00:00:10,610 --> 00:00:15,050
words about myself

00:00:11,870 --> 00:00:17,900
I've been doing internet T things like

00:00:15,050 --> 00:00:19,700
PHP JavaScript mostly for I guess over

00:00:17,900 --> 00:00:23,270
ten years at this point I stopped being

00:00:19,700 --> 00:00:27,439
able to count which makes me feel old

00:00:23,270 --> 00:00:29,960
sometimes but then I did a bunch of open

00:00:27,439 --> 00:00:32,810
source in the last five six years I

00:00:29,960 --> 00:00:37,090
guess being like Symphony Co team and

00:00:32,810 --> 00:00:40,519
the last three four years actually I

00:00:37,090 --> 00:00:43,370
think the composer four years

00:00:40,519 --> 00:00:49,269
anniversary was a few days ago probably

00:00:43,370 --> 00:00:53,300
for that well anyway so yay for years

00:00:49,269 --> 00:00:56,960
and I've been speaking also for a while

00:00:53,300 --> 00:01:00,620
I think this also my first talk was five

00:00:56,960 --> 00:01:05,630
years like two or three days ago so it's

00:01:00,620 --> 00:01:08,510
also non-evil say there somehow and I do

00:01:05,630 --> 00:01:11,600
four walk into a sort of like consulting

00:01:08,510 --> 00:01:16,000
I cannot contracting as well and the

00:01:11,600 --> 00:01:16,000
whole web field and mostly Symphony

00:01:20,020 --> 00:01:27,950
there's a joint Lynn joined in link down

00:01:22,880 --> 00:01:31,940
there I'm not sure why but interested to

00:01:27,950 --> 00:01:33,740
this comb bugging anyway so I'll tell

00:01:31,940 --> 00:01:35,870
you about composer today I guess you

00:01:33,740 --> 00:01:42,770
heard of it most of you didn't even

00:01:35,870 --> 00:01:45,440
anyone not use it yet at all good that's

00:01:42,770 --> 00:01:49,280
that's good otherwise I feel bad because

00:01:45,440 --> 00:01:50,600
it I don't really cover the basics um so

00:01:49,280 --> 00:01:55,040
first thing I want to talk about is

00:01:50,600 --> 00:02:00,850
semantic versioning so now who read the

00:01:55,040 --> 00:02:05,030
entire document on Sanford at all really

00:02:00,850 --> 00:02:07,679
said it come on

00:02:05,030 --> 00:02:14,550
okay who is familiar vaguely familiar

00:02:07,679 --> 00:02:18,450
with it let's say that's better okay not

00:02:14,550 --> 00:02:22,110
good enough I would say but so I'll

00:02:18,450 --> 00:02:24,569
cover it quickly and then I want you to

00:02:22,110 --> 00:02:27,629
go and read it please like if it's it's

00:02:24,569 --> 00:02:30,000
a fairly short document and I think I

00:02:27,629 --> 00:02:32,220
hope I can convince you that's a good

00:02:30,000 --> 00:02:33,720
idea and that you should read it I don't

00:02:32,220 --> 00:02:37,680
want to explain in all the nitty-gritty

00:02:33,720 --> 00:02:41,040
details but it's it's a good standard

00:02:37,680 --> 00:02:43,440
for versioning basically so it's a

00:02:41,040 --> 00:02:45,299
contract that defines how versioning

00:02:43,440 --> 00:02:46,829
works and what you can expect from

00:02:45,299 --> 00:02:50,400
libraries when they give you a version

00:02:46,829 --> 00:02:52,590
number and you know that leads to a good

00:02:50,400 --> 00:02:54,840
relationship between users and like

00:02:52,590 --> 00:02:58,739
producers and consumers of open source I

00:02:54,840 --> 00:03:01,799
would say no all software really so it's

00:02:58,739 --> 00:03:03,420
it's like the basic concept is that

00:03:01,799 --> 00:03:06,810
there is this major of minor and patch

00:03:03,420 --> 00:03:10,709
versions like with dots in between as it

00:03:06,810 --> 00:03:13,500
happens and they they all represent

00:03:10,709 --> 00:03:15,989
something so this like the backwards

00:03:13,500 --> 00:03:18,540
compatibility break represented by the

00:03:15,989 --> 00:03:21,569
major version the features by the minor

00:03:18,540 --> 00:03:25,650
and the like bug fixes and security

00:03:21,569 --> 00:03:28,920
fixes by patches so whenever you add a

00:03:25,650 --> 00:03:30,840
new feature you should increase the the

00:03:28,920 --> 00:03:32,819
middle version the my know whenever you

00:03:30,840 --> 00:03:35,400
play backwards compatibility you should

00:03:32,819 --> 00:03:38,579
increase the major version whenever

00:03:35,400 --> 00:03:41,099
anything else the patch is fine so it

00:03:38,579 --> 00:03:42,810
goes like this first of all in the like

00:03:41,099 --> 00:03:45,630
technically the spec does not say

00:03:42,810 --> 00:03:48,359
anything about the zero point releases

00:03:45,630 --> 00:03:51,690
so it starts at 1.0 and that's all it

00:03:48,359 --> 00:03:56,880
covers but it's I would say it's a

00:03:51,690 --> 00:04:01,230
common assumption that while you're at

00:03:56,880 --> 00:04:03,299
zero point X the first nonzero number is

00:04:01,230 --> 00:04:05,750
actually the meaningful one like as in

00:04:03,299 --> 00:04:09,450
the the major so in this case if we do

00:04:05,750 --> 00:04:12,719
fixes all new features we might just

00:04:09,450 --> 00:04:16,469
release it or one one if we break

00:04:12,719 --> 00:04:17,669
anything we just go to 0.2 then we have

00:04:16,469 --> 00:04:19,289
a first table which

00:04:17,669 --> 00:04:21,930
ideally should come as soon as possible

00:04:19,289 --> 00:04:25,129
if you can because this whole zero point

00:04:21,930 --> 00:04:27,629
X is not actually specified by Sandra so

00:04:25,129 --> 00:04:30,379
it's it's arguable whether you should

00:04:27,629 --> 00:04:33,090
use all points releases or not at all

00:04:30,379 --> 00:04:37,860
then we are fully in sample mode so if

00:04:33,090 --> 00:04:40,740
we get fixes or 101 fix is 1 or 2 then

00:04:37,860 --> 00:04:43,469
you get new features we go to one point

00:04:40,740 --> 00:04:46,889
1 and if we break anything at all in

00:04:43,469 --> 00:04:49,979
theory we should go to 2.0 and people

00:04:46,889 --> 00:04:52,740
get scared because it's like 2.0 that

00:04:49,979 --> 00:04:55,349
that's a big deal it's no it's just a

00:04:52,740 --> 00:04:59,550
number like if you got plenty of numbers

00:04:55,349 --> 00:05:04,770
left after 2 it can go beyond 9 as well

00:04:59,550 --> 00:05:08,310
as we have seen so it's there's no

00:05:04,770 --> 00:05:10,069
reason to be afraid and it didn't cost

00:05:08,310 --> 00:05:16,199
anything

00:05:10,069 --> 00:05:18,360
so who view first of all who view will

00:05:16,199 --> 00:05:20,849
read the spec now on the next toilet

00:05:18,360 --> 00:05:26,490
break or anything like it's fairly short

00:05:20,849 --> 00:05:29,430
you can do it in one go I think like I'd

00:05:26,490 --> 00:05:31,650
like to see more hands please go inspect

00:05:29,430 --> 00:05:33,199
like don't raise your hand if you don't

00:05:31,650 --> 00:05:37,129
want to but please go and read it

00:05:33,199 --> 00:05:37,129
because there's a bit more than that

00:05:38,210 --> 00:05:45,259
secondly I would like to this releasing

00:05:41,759 --> 00:05:47,969
packages so I know how many of you have

00:05:45,259 --> 00:05:51,839
open source packages that you all know

00:05:47,969 --> 00:05:54,509
like that you maintain that all right

00:05:51,839 --> 00:05:57,560
not so like not all of you but still

00:05:54,509 --> 00:05:59,789
quite a bit so I go through this quickly

00:05:57,560 --> 00:06:02,900
because I think that's important and

00:05:59,789 --> 00:06:06,330
actually some of it I think is also

00:06:02,900 --> 00:06:09,029
things you can help with even if you're

00:06:06,330 --> 00:06:13,229
not the maintainer of a library it's a

00:06:09,029 --> 00:06:17,339
way to contribute so the readme is one

00:06:13,229 --> 00:06:20,310
big thing I think so many packages don't

00:06:17,339 --> 00:06:23,400
have a basic description of what the

00:06:20,310 --> 00:06:25,800
hell they are doing like you get the the

00:06:23,400 --> 00:06:29,009
Whitney is either empty or it just says

00:06:25,800 --> 00:06:30,410
here is how to install it I'm like yeah

00:06:29,009 --> 00:06:32,960
ok I guess I

00:06:30,410 --> 00:06:36,080
can't figure out how to install it these

00:06:32,960 --> 00:06:38,360
days composer helped a bit I guess and

00:06:36,080 --> 00:06:41,510
is you know the install is not so

00:06:38,360 --> 00:06:44,480
important anymore but I think a

00:06:41,510 --> 00:06:46,520
one-liner saying hey this fixes this use

00:06:44,480 --> 00:06:52,430
case and it's good in this in that case

00:06:46,520 --> 00:06:55,220
and you don't need it because X - did

00:06:52,430 --> 00:06:56,720
not get that and that just killed the

00:06:55,220 --> 00:06:58,430
entire purpose of the package to me

00:06:56,720 --> 00:07:01,490
because the name might be appealing but

00:06:58,430 --> 00:07:03,350
if there is one with an appealing name

00:07:01,490 --> 00:07:06,170
and another one with an appealing name

00:07:03,350 --> 00:07:09,050
and a description the second one wins

00:07:06,170 --> 00:07:12,250
that's it so if you want anyone to use

00:07:09,050 --> 00:07:16,090
your stuff I think that's good stuff

00:07:12,250 --> 00:07:17,330
then you have like using contributing

00:07:16,090 --> 00:07:20,090
instructions

00:07:17,330 --> 00:07:23,440
I guess github makes that a lot more

00:07:20,090 --> 00:07:26,840
fluent but still it's good to specify

00:07:23,440 --> 00:07:28,580
mostly also specify the license it's

00:07:26,840 --> 00:07:33,050
technically a package without license

00:07:28,580 --> 00:07:35,930
you shouldn't really use it if you want

00:07:33,050 --> 00:07:38,450
some more resources it is a very nice

00:07:35,930 --> 00:07:41,840
blog post it contains a whole lot more

00:07:38,450 --> 00:07:45,680
stuff about Widnes and there's this PHP

00:07:41,840 --> 00:07:50,600
package checklist calm long domain name

00:07:45,680 --> 00:07:53,930
but it's actually quite variable and the

00:07:50,600 --> 00:07:57,380
second big thing is tagging releases so

00:07:53,930 --> 00:08:00,740
tagging as often as you can I think and

00:07:57,380 --> 00:08:05,270
I know I'm bad at that myself but I say

00:08:00,740 --> 00:08:12,380
it anyway it's you know what I aim for

00:08:05,270 --> 00:08:15,530
in life especially tagging before

00:08:12,380 --> 00:08:17,660
breaking anything because like if people

00:08:15,530 --> 00:08:19,100
that have the dev master release and

00:08:17,660 --> 00:08:21,950
that's not a release actually it's just

00:08:19,100 --> 00:08:25,100
a bunch and then suddenly they break

00:08:21,950 --> 00:08:27,080
everything and there was no tag and he

00:08:25,100 --> 00:08:30,320
used it before there's no way you get

00:08:27,080 --> 00:08:32,840
back to the state you were in like it's

00:08:30,320 --> 00:08:36,680
hell so please if you break anything

00:08:32,840 --> 00:08:39,320
just tag its you know you have this key

00:08:36,680 --> 00:08:42,740
thing it allows you to tag it's very

00:08:39,320 --> 00:08:44,180
easy and I would say like actually the

00:08:42,740 --> 00:08:46,339
composing package is made

00:08:44,180 --> 00:08:48,589
this also very easy because you don't

00:08:46,339 --> 00:08:51,050
need to compose or publish push this

00:08:48,589 --> 00:08:52,880
package whatever it just get tagged push

00:08:51,050 --> 00:08:56,000
the tagged on packages does everything

00:08:52,880 --> 00:09:00,140
else magically for you so there's no

00:08:56,000 --> 00:09:02,899
excuse really except maybe for the

00:09:00,140 --> 00:09:05,029
changelog that's my excuse at least the

00:09:02,899 --> 00:09:07,550
main reason I don't release things is

00:09:05,029 --> 00:09:11,050
that I'm very anal about the changelog

00:09:07,550 --> 00:09:13,580
and I think it should be amazing and

00:09:11,050 --> 00:09:16,850
then I don't tag because I'm scared

00:09:13,580 --> 00:09:20,240
because I have to do a change but I

00:09:16,850 --> 00:09:22,399
think you should still do it the way I

00:09:20,240 --> 00:09:24,500
do it usually is I do a git key with

00:09:22,399 --> 00:09:27,260
like this this range of commits we have

00:09:24,500 --> 00:09:29,060
the last tag until master with the two

00:09:27,260 --> 00:09:31,850
dots it will list all the commits that

00:09:29,060 --> 00:09:35,390
are between those two commits all those

00:09:31,850 --> 00:09:37,160
tags and branch names and then I go to

00:09:35,390 --> 00:09:41,600
all the commits and this takes a while

00:09:37,160 --> 00:09:43,580
sometimes but I think it's very

00:09:41,600 --> 00:09:45,800
important that you review everything

00:09:43,580 --> 00:09:47,690
that was done and anything important

00:09:45,800 --> 00:09:49,459
like meaningful stuff especially

00:09:47,690 --> 00:09:54,620
backward compatibility breaks of course

00:09:49,459 --> 00:09:58,400
but like any important fix that might

00:09:54,620 --> 00:10:00,470
you know entice people to upgrade any

00:09:58,400 --> 00:10:03,260
new features that is relevant because

00:10:00,470 --> 00:10:05,180
otherwise it cannot I get a new version

00:10:03,260 --> 00:10:06,890
II don't really know sometimes you don't

00:10:05,180 --> 00:10:08,839
know if you don't follow the project

00:10:06,890 --> 00:10:13,310
very closely what what changed what is

00:10:08,839 --> 00:10:15,110
new and that's kind of sad because you

00:10:13,310 --> 00:10:16,940
miss out on a lot of new features and

00:10:15,110 --> 00:10:19,250
sometimes you're still doing it like the

00:10:16,940 --> 00:10:20,089
old way like two years ago I did it this

00:10:19,250 --> 00:10:22,400
way and it worked

00:10:20,089 --> 00:10:24,560
it still works now but now there might

00:10:22,400 --> 00:10:31,790
be a helper function that does it a lot

00:10:24,560 --> 00:10:34,070
more easier so and as I said like doing

00:10:31,790 --> 00:10:37,579
these if you don't have a package feel

00:10:34,070 --> 00:10:40,730
just using open source it's fine you can

00:10:37,579 --> 00:10:42,230
help like help is the changelog anyone

00:10:40,730 --> 00:10:44,209
can do these commands and send a pull

00:10:42,230 --> 00:10:46,850
request to the changelog even for past

00:10:44,209 --> 00:10:50,060
releases it's still a good thing it can

00:10:46,850 --> 00:10:55,209
help delete me he can nag people so that

00:10:50,060 --> 00:10:55,209
the tag MA that works with me I guess

00:10:55,250 --> 00:11:00,870
okay then we'll hit a bit more like

00:10:58,440 --> 00:11:07,050
general-purpose things now not just for

00:11:00,870 --> 00:11:09,480
maintenance solution constraints the

00:11:07,050 --> 00:11:14,550
bunch that I guess most of you know like

00:11:09,480 --> 00:11:16,710
simple ones like this which I really

00:11:14,550 --> 00:11:19,230
like constraints it's like saying I want

00:11:16,710 --> 00:11:22,050
this exact exact version it's fairly

00:11:19,230 --> 00:11:25,670
simple to understand you have wildcard

00:11:22,050 --> 00:11:28,590
ranges which are also like simple it's

00:11:25,670 --> 00:11:32,940
anyone even non programmer gets what

00:11:28,590 --> 00:11:36,210
this means like it's it's just a widely

00:11:32,940 --> 00:11:41,760
accepted thing what was added in

00:11:36,210 --> 00:11:43,890
December I believe is full I would say

00:11:41,760 --> 00:11:46,110
semver compatibility but it's not

00:11:43,890 --> 00:11:49,650
actually sample per se because sample

00:11:46,110 --> 00:11:51,480
does not define like the version

00:11:49,650 --> 00:11:55,620
constraints it only defines the

00:11:51,480 --> 00:11:59,010
versioning but what I did was follow the

00:11:55,620 --> 00:12:02,240
the node package so there the NPM sample

00:11:59,010 --> 00:12:07,860
package and this one has a lot of

00:12:02,240 --> 00:12:09,510
constraints and we were mostly on on the

00:12:07,860 --> 00:12:13,680
same level but we had some features we

00:12:09,510 --> 00:12:14,970
didn't have so I thought okay I'm just

00:12:13,680 --> 00:12:17,670
going through everything implement

00:12:14,970 --> 00:12:20,160
exactly the same so that it's easy like

00:12:17,670 --> 00:12:22,140
brain until up when you walk with NPM or

00:12:20,160 --> 00:12:24,090
composer which I guess are the two

00:12:22,140 --> 00:12:25,950
closest you're gonna use if you do PHP

00:12:24,090 --> 00:12:30,480
you're most likely to use JavaScript

00:12:25,950 --> 00:12:33,990
then you know something else so to me

00:12:30,480 --> 00:12:35,730
that makes the most sense also it's it's

00:12:33,990 --> 00:12:42,390
fairly new so it's not riddled with a

00:12:35,730 --> 00:12:44,640
lot of like historical issues so one of

00:12:42,390 --> 00:12:47,820
the new things we have is this - orange

00:12:44,640 --> 00:12:51,060
which allows you as you see to just do a

00:12:47,820 --> 00:12:53,850
advantage of the oceans it's sometimes

00:12:51,060 --> 00:12:59,340
easier than doing an end-all thing and

00:12:53,850 --> 00:13:01,920
like see ten states - what's on the

00:12:59,340 --> 00:13:04,160
right which would be the end version

00:13:01,920 --> 00:13:07,140
which as you see is quite more verbose

00:13:04,160 --> 00:13:07,680
in this case if we only specify 2.0 it

00:13:07,140 --> 00:13:11,310
as Hume

00:13:07,680 --> 00:13:13,710
2.0 point anything behind so that gives

00:13:11,310 --> 00:13:16,560
us anything up to 2.1 but not including

00:13:13,710 --> 00:13:20,850
2.1 on the other hand if we specify the

00:13:16,560 --> 00:13:25,140
last like the third digit so we have 100

00:13:20,850 --> 00:13:31,980
to 100 then it until 2 1 all inclusive

00:13:25,140 --> 00:13:34,020
but there is no dot anything after then

00:13:31,980 --> 00:13:36,480
we have two unbounded ranges which are

00:13:34,020 --> 00:13:38,940
really quite terrible because that means

00:13:36,480 --> 00:13:41,370
any backwards compatibility breaking

00:13:38,940 --> 00:13:43,560
that comes in 2.2 3.0 whatever you'll

00:13:41,370 --> 00:13:47,370
get it in you don't want to do that I

00:13:43,560 --> 00:13:53,250
think ever except maybe for the PHP like

00:13:47,370 --> 00:13:58,410
requiring PHP because yeah they don't

00:13:53,250 --> 00:14:00,630
break stuff so often no I like this do

00:13:58,410 --> 00:14:02,790
it one way I would say okay it's so key

00:14:00,630 --> 00:14:04,680
to compromise there may be but for the

00:14:02,790 --> 00:14:08,640
for the libraries themselves I think

00:14:04,680 --> 00:14:11,070
it's a really bad idea we have two

00:14:08,640 --> 00:14:12,930
operators this is one that used to be a

00:14:11,070 --> 00:14:14,790
comma which still works obviously for

00:14:12,930 --> 00:14:20,180
backwards compatibility but now it's

00:14:14,790 --> 00:14:23,550
space so you don't see it it means end

00:14:20,180 --> 00:14:26,279
the other one we had support for a

00:14:23,550 --> 00:14:28,860
single pipe for Oh and now we do like

00:14:26,279 --> 00:14:32,790
double pipe as well for node

00:14:28,860 --> 00:14:34,110
compatibility but like both work but I

00:14:32,790 --> 00:14:36,990
would say those are the preferred

00:14:34,110 --> 00:14:39,360
versions because they bring like

00:14:36,990 --> 00:14:43,200
interoperability with other communities

00:14:39,360 --> 00:14:44,970
which i think is quite important then we

00:14:43,200 --> 00:14:49,820
hit this one for a while as well that's

00:14:44,970 --> 00:14:52,589
not a new one so what it means is

00:14:49,820 --> 00:14:57,750
essentially the last digit you define

00:14:52,589 --> 00:15:01,800
after the tilled can go upwards not

00:14:57,750 --> 00:15:04,050
downwards and that's about it so in this

00:15:01,800 --> 00:15:07,170
case we see okay the one like we define

00:15:04,050 --> 00:15:09,480
1.2 the two can go up to nine nine nine

00:15:07,170 --> 00:15:14,520
nine nine because you're not limited to

00:15:09,480 --> 00:15:17,760
nine numbers so that would be like 1.9 a

00:15:14,520 --> 00:15:19,980
nine but never to 2.0 so you you prevent

00:15:17,760 --> 00:15:21,360
yourself from having backwards

00:15:19,980 --> 00:15:23,910
compatibility plate

00:15:21,360 --> 00:15:25,829
but you get all the new features all the

00:15:23,910 --> 00:15:28,410
bug fixes etcetera so you allow the

00:15:25,829 --> 00:15:30,839
whole range is like the whole range of

00:15:28,410 --> 00:15:34,370
versions up to something they will break

00:15:30,839 --> 00:15:37,769
and that's why Center comes in really

00:15:34,370 --> 00:15:41,579
like handy and very important to me is

00:15:37,769 --> 00:15:43,529
that it allows us to have this smart

00:15:41,579 --> 00:15:46,649
operator which says ok like give me

00:15:43,529 --> 00:15:48,600
stuff that works and not like once it

00:15:46,649 --> 00:15:50,760
breaks I don't want it because like this

00:15:48,600 --> 00:15:54,000
should be a conscious choice to say okay

00:15:50,760 --> 00:15:55,110
I agreed to the 2.0 version and then

00:15:54,000 --> 00:15:57,600
I'll check if my code still works

00:15:55,110 --> 00:15:59,670
etcetera but if you use that in theory

00:15:57,600 --> 00:16:02,160
you can do update anytime interested

00:15:59,670 --> 00:16:04,290
walk like you know obviously sometimes

00:16:02,160 --> 00:16:08,940
people mess up the regressions etcetera

00:16:04,290 --> 00:16:13,110
but mostly this should work if everyone

00:16:08,940 --> 00:16:15,360
follows Sanga not everyone does it yet

00:16:13,110 --> 00:16:18,990
so I think that's something we should

00:16:15,360 --> 00:16:21,209
really push for as well as users if

00:16:18,990 --> 00:16:23,730
something use you see them doing stupid

00:16:21,209 --> 00:16:25,769
things with devotion I tell them like

00:16:23,730 --> 00:16:29,100
tell them please look at sample it makes

00:16:25,769 --> 00:16:31,199
sense everyone else uses it just you

00:16:29,100 --> 00:16:35,760
know then we can all be on the same page

00:16:31,199 --> 00:16:37,410
and a lot of times people go is saying

00:16:35,760 --> 00:16:39,410
yeah but we have these like marketing

00:16:37,410 --> 00:16:43,260
releases mostly that's gonna be like

00:16:39,410 --> 00:16:45,690
CMS's or more like product wise like

00:16:43,260 --> 00:16:47,940
product thing is not really libraries

00:16:45,690 --> 00:16:50,399
and they want to have this big launch of

00:16:47,940 --> 00:16:52,980
their 2.0 because that's what they can

00:16:50,399 --> 00:16:54,570
sell to managers and stuff managers

00:16:52,980 --> 00:16:56,699
don't need to see the version numbers

00:16:54,570 --> 00:17:00,480
like sell them the the happy panda

00:16:56,699 --> 00:17:02,370
version but not not the 2.0 then you can

00:17:00,480 --> 00:17:04,140
release 2.0 3.0 whenever you break

00:17:02,370 --> 00:17:05,850
something and then the happy panda comes

00:17:04,140 --> 00:17:08,939
and that's the big sales pitch that's

00:17:05,850 --> 00:17:11,610
fine it's just an alias that's what you

00:17:08,939 --> 00:17:18,270
know like Ubuntu does as well although

00:17:11,610 --> 00:17:22,339
they don't follow sample at all but so

00:17:18,270 --> 00:17:25,410
you see in this case if we define the

00:17:22,339 --> 00:17:28,530
1.2.3 only the last one again can go

00:17:25,410 --> 00:17:30,120
upwards so this restricts us to between

00:17:28,530 --> 00:17:33,440
one point two point three and one point

00:17:30,120 --> 00:17:33,440
three not included

00:17:34,419 --> 00:17:39,789
that was a bit of a problem like it's

00:17:36,850 --> 00:17:43,389
it's nice but somehow it confuses the

00:17:39,789 --> 00:17:45,700
hell out of people and node had the same

00:17:43,389 --> 00:17:50,409
problem and they introduced this carrot

00:17:45,700 --> 00:17:53,049
operator and the carrot it does exactly

00:17:50,409 --> 00:17:57,639
the same except it follows some more

00:17:53,049 --> 00:18:00,129
like most Wiggly so in this case you see

00:17:57,639 --> 00:18:03,609
the difference it lets you go up to 2.0

00:18:00,129 --> 00:18:06,549
anyway so with the teal if you want it

00:18:03,609 --> 00:18:08,919
to do like I I need at least one point

00:18:06,549 --> 00:18:11,470
two point three but up to 2.0 you needed

00:18:08,919 --> 00:18:12,220
to expand it to the full length like

00:18:11,470 --> 00:18:14,019
yourself

00:18:12,220 --> 00:18:18,340
who's the carrot you can you can easily

00:18:14,019 --> 00:18:21,220
do it like that and it also follows this

00:18:18,340 --> 00:18:25,590
kind of common convention of the zero

00:18:21,220 --> 00:18:29,440
point releases which is to say that like

00:18:25,590 --> 00:18:32,409
it won't let you go to 1.0 like or two

00:18:29,440 --> 00:18:35,980
to 0.4 in this case because 0.4 is

00:18:32,409 --> 00:18:45,820
likely to introduce BC breaks so it kind

00:18:35,980 --> 00:18:48,489
of just lets you update to the like it

00:18:45,820 --> 00:18:50,409
doesn't let the first non-zero digit

00:18:48,489 --> 00:18:53,679
change which is the way they put it

00:18:50,409 --> 00:18:58,450
which i think is quite clear if you

00:18:53,679 --> 00:19:01,840
think about it for me but yeah you just

00:18:58,450 --> 00:19:07,419
sweep the videos and you used what's

00:19:01,840 --> 00:19:11,230
left is the the end of the range so Lima

00:19:07,419 --> 00:19:15,929
is absolutely should use this carrot all

00:19:11,230 --> 00:19:19,109
the tilled same same I guess but I

00:19:15,929 --> 00:19:21,489
probably in the future more the carrot

00:19:19,109 --> 00:19:23,830
libel is most importantly because

00:19:21,489 --> 00:19:25,929
otherwise you get conflicts I'll get

00:19:23,830 --> 00:19:29,139
back to that in a moment but it's very

00:19:25,929 --> 00:19:30,909
important I think for libraries for your

00:19:29,139 --> 00:19:32,980
own applications it's a bit more up to

00:19:30,909 --> 00:19:35,859
you if you want more safety you can go

00:19:32,980 --> 00:19:38,590
with like wild cat energies or just

00:19:35,859 --> 00:19:40,809
exact versions even but I think for

00:19:38,590 --> 00:19:42,249
applications it's also fine it gives you

00:19:40,809 --> 00:19:48,509
safety as long as everyone follows

00:19:42,249 --> 00:19:48,509
center so use it really it's awesome

00:19:50,450 --> 00:19:56,730
all right I think we introduced a few

00:19:54,150 --> 00:19:59,580
months back and I'm still talking about

00:19:56,730 --> 00:20:03,330
it I'm not sure if it's necessary or not

00:19:59,580 --> 00:20:07,040
like who uses that exclusively to

00:20:03,330 --> 00:20:10,220
install new packages the require command

00:20:07,040 --> 00:20:12,930
not a lot of you so mostly people just

00:20:10,220 --> 00:20:17,370
edit the JSON file and run an update

00:20:12,930 --> 00:20:21,510
etcetera so doing that is it's really

00:20:17,370 --> 00:20:24,960
the easiest first of all because you

00:20:21,510 --> 00:20:27,060
can't mess up the JSON syntax because

00:20:24,960 --> 00:20:28,650
you don't have to look up the the

00:20:27,060 --> 00:20:31,740
current version because what this does

00:20:28,650 --> 00:20:36,570
is it will look up the last version of

00:20:31,740 --> 00:20:39,470
the library you want say ok it's one

00:20:36,570 --> 00:20:43,110
point 11 points whatever so I do

00:20:39,470 --> 00:20:45,720
constraint is like tilde will move it to

00:20:43,110 --> 00:20:47,490
carrot at some point but we're waiting

00:20:45,720 --> 00:20:51,060
until everyone has a version that

00:20:47,490 --> 00:20:55,830
supports carrot otherwise yeah people

00:20:51,060 --> 00:20:58,140
are gonna freak out and then it is like

00:20:55,830 --> 00:21:02,790
the best constraint in a way for you at

00:20:58,140 --> 00:21:05,460
at that time so it's it's win-win and it

00:21:02,790 --> 00:21:07,350
runs an update for only that package so

00:21:05,460 --> 00:21:15,440
it won't update all your dependencies it

00:21:07,350 --> 00:21:19,920
just really install the new stuff ok

00:21:15,440 --> 00:21:22,920
quick word about stabilities I think

00:21:19,920 --> 00:21:23,580
it's not so complex the you know it's a

00:21:22,920 --> 00:21:26,880
linear thing

00:21:23,580 --> 00:21:30,000
it starts with def you have alphabet our

00:21:26,880 --> 00:21:31,740
C and then stuff gets table I think this

00:21:30,000 --> 00:21:35,960
is easy to understand everyone kind of

00:21:31,740 --> 00:21:40,050
knows about these different stabilities

00:21:35,960 --> 00:21:44,220
well well it's a bit hairier is that

00:21:40,050 --> 00:21:47,400
sometimes people want like a branch to

00:21:44,220 --> 00:21:50,190
be stable and they come they ask like

00:21:47,400 --> 00:21:53,730
how can I make this branch a stable tag

00:21:50,190 --> 00:21:57,090
or a better branch or on what and there

00:21:53,730 --> 00:21:59,380
I like we have to say stop because it's

00:21:57,090 --> 00:22:01,780
about it yeah

00:21:59,380 --> 00:22:04,090
and so I want to clarify a real quick

00:22:01,780 --> 00:22:05,830
that tags by default are stable unless

00:22:04,090 --> 00:22:08,950
you specify otherwise if you specify

00:22:05,830 --> 00:22:12,280
it's a beta on our C you'll get that but

00:22:08,950 --> 00:22:14,980
otherwise tags are stable branch is out

00:22:12,280 --> 00:22:18,900
there and that is it like you cannot if

00:22:14,980 --> 00:22:22,210
you call your branch blah blah blah beta

00:22:18,900 --> 00:22:24,400
u it will still rename it to death blah

00:22:22,210 --> 00:22:27,630
blah blah better and it will still treat

00:22:24,400 --> 00:22:30,880
it as a dev thing because a branch just

00:22:27,630 --> 00:22:33,280
it's it's not stable in time like it's

00:22:30,880 --> 00:22:35,020
something that changes it can post

00:22:33,280 --> 00:22:37,720
potentially change at any time because

00:22:35,020 --> 00:22:41,350
you can still commit to it a tag is like

00:22:37,720 --> 00:22:45,310
a snapshot you say now this I say it's

00:22:41,350 --> 00:22:46,540
better and tomorrow it's still better

00:22:45,310 --> 00:22:48,820
it's still the same tag it didn't change

00:22:46,540 --> 00:22:51,250
on the balance if you add a new commit

00:22:48,820 --> 00:22:54,990
the state might have changed so we

00:22:51,250 --> 00:23:01,870
cannot know so we treated as death and

00:22:54,990 --> 00:23:08,320
that's yeah that's the simple rule then

00:23:01,870 --> 00:23:10,600
to get back to those conflicts so we

00:23:08,320 --> 00:23:14,770
have a problem when libraries do stupid

00:23:10,600 --> 00:23:16,330
things I would argue so in this case I

00:23:14,770 --> 00:23:17,950
don't know if you can read at the back

00:23:16,330 --> 00:23:22,780
I'm sorry I didn't know the room was

00:23:17,950 --> 00:23:24,700
that huge but I hope you can you can

00:23:22,780 --> 00:23:30,880
Molesley though I actually have to

00:23:24,700 --> 00:23:34,210
feedback things I forgot so all good so

00:23:30,880 --> 00:23:37,540
if you require two packages and one has

00:23:34,210 --> 00:23:40,840
a smart like smart constraint it used

00:23:37,540 --> 00:23:45,520
this Steudle though a carrot you're good

00:23:40,840 --> 00:23:47,410
like that's fine all happy then you

00:23:45,520 --> 00:23:49,240
require the other package and this one

00:23:47,410 --> 00:23:52,120
requires the same library monologue

00:23:49,240 --> 00:23:56,380
again but it has this Wolcott constraint

00:23:52,120 --> 00:23:59,500
which is limiting to 1.3 releases what's

00:23:56,380 --> 00:24:03,280
gonna happen there is this sometimes

00:23:59,500 --> 00:24:06,970
seeing output of death have composer

00:24:03,280 --> 00:24:08,770
which which most people can of bail on

00:24:06,970 --> 00:24:10,800
completely like they see that and they

00:24:08,770 --> 00:24:14,580
just yeah

00:24:10,800 --> 00:24:16,170
maybe shut down they start crying I

00:24:14,580 --> 00:24:20,430
don't know they come to IRC they

00:24:16,170 --> 00:24:22,380
complain they open issues on github like

00:24:20,430 --> 00:24:28,470
this is a lot of unhappiness about this

00:24:22,380 --> 00:24:30,300
I'm very sorry but technically if you

00:24:28,470 --> 00:24:36,330
actually spend a bit of time to read it

00:24:30,300 --> 00:24:37,860
it I think it makes some sense so it's

00:24:36,330 --> 00:24:40,410
telling you like you required like

00:24:37,860 --> 00:24:44,130
installation request for lazy Bob means

00:24:40,410 --> 00:24:47,940
you recoiled in your package lazy Bob

00:24:44,130 --> 00:24:51,030
the package in version 1.2 still no no

00:24:47,940 --> 00:24:54,020
it's satisfiable buy this package then

00:24:51,030 --> 00:24:56,340
you required this other cool Alice also

00:24:54,020 --> 00:24:58,260
satisfiable buy this so so far so good

00:24:56,340 --> 00:25:00,450
then it tells you ok

00:24:58,260 --> 00:25:02,760
lazy bob requires monologue in this

00:25:00,450 --> 00:25:03,590
version which is satisfiable so so far

00:25:02,760 --> 00:25:07,350
so good

00:25:03,590 --> 00:25:09,770
the other Alice package requires also

00:25:07,350 --> 00:25:12,750
monologue in other versions it's also

00:25:09,770 --> 00:25:14,430
satisfiable it's all fine but at the end

00:25:12,750 --> 00:25:18,000
we have a problem because we see that

00:25:14,430 --> 00:25:21,750
the like satisfiable lists of monologue

00:25:18,000 --> 00:25:25,140
packages do not intersect so what do you

00:25:21,750 --> 00:25:27,600
do then it's PHP you can't install two

00:25:25,140 --> 00:25:30,090
versions because once one is loaded

00:25:27,600 --> 00:25:33,600
you're screwed like you can't load the

00:25:30,090 --> 00:25:36,600
other one so what we have to do is Bale

00:25:33,600 --> 00:25:39,240
and say look you got a conflict we

00:25:36,600 --> 00:25:43,530
cannot install those in 1.6 in 1.3 at

00:25:39,240 --> 00:25:48,000
the same time it just doesn't work so

00:25:43,530 --> 00:25:54,030
yeah we output this and I hope you can

00:25:48,000 --> 00:25:56,970
see it makes some sense and like Johnny

00:25:54,030 --> 00:26:01,020
way in this case is that to fix the

00:25:56,970 --> 00:26:03,390
requirements in the like in the lazy Bob

00:26:01,020 --> 00:26:06,360
package to send them a película saying

00:26:03,390 --> 00:26:09,990
hey look like this this wildcard thing

00:26:06,360 --> 00:26:12,180
it's not cool it's not exactly enabling

00:26:09,990 --> 00:26:14,720
interoperability with other libraries so

00:26:12,180 --> 00:26:17,730
just you know please change it to

00:26:14,720 --> 00:26:19,980
something that will work and most likely

00:26:17,730 --> 00:26:22,110
they didn't intend it to be that way

00:26:19,980 --> 00:26:22,800
like it's very rare that you require a

00:26:22,110 --> 00:26:25,650
space

00:26:22,800 --> 00:26:30,000
version of something to walk like you

00:26:25,650 --> 00:26:32,220
might require 1.2 minimum sure because

00:26:30,000 --> 00:26:34,260
there is a feature you need there been

00:26:32,220 --> 00:26:36,360
theory you don't care if you get one

00:26:34,260 --> 00:26:39,620
point three four five six and onwards

00:26:36,360 --> 00:26:42,740
until the two point oh it's fine

00:26:39,620 --> 00:26:42,740
all right

00:26:47,409 --> 00:27:00,409
so that's another use case that can be a

00:26:54,019 --> 00:27:04,850
bit tricky to resolve is so the thing is

00:27:00,409 --> 00:27:06,320
you require a monologue again everyone

00:27:04,850 --> 00:27:10,369
should require a monologue it's very

00:27:06,320 --> 00:27:12,080
good you require it in version one point

00:27:10,369 --> 00:27:14,289
anything because you're happy with

00:27:12,080 --> 00:27:15,470
anything you know any of the features

00:27:14,289 --> 00:27:18,110
awesome

00:27:15,470 --> 00:27:20,059
that's all you got so far you you want

00:27:18,110 --> 00:27:22,460
to want one point something this that's

00:27:20,059 --> 00:27:26,629
fine but then you require this bad

00:27:22,460 --> 00:27:29,269
package and this guy just said okay like

00:27:26,629 --> 00:27:31,190
I want monologue in death master I want

00:27:29,269 --> 00:27:36,649
the latest and greatest of the dev

00:27:31,190 --> 00:27:41,960
branch like the master branch and you'll

00:27:36,649 --> 00:27:45,350
get to know because well because

00:27:41,960 --> 00:27:50,690
actually up there you say I want minimum

00:27:45,350 --> 00:27:52,700
stability of beta so composer just like

00:27:50,690 --> 00:27:55,549
he looks at all the packages passing by

00:27:52,700 --> 00:27:59,119
and when it's not better above if it's

00:27:55,549 --> 00:28:02,749
dev or alpha I just like just doesn't

00:27:59,119 --> 00:28:05,779
wanna know about it so so there you get

00:28:02,749 --> 00:28:08,899
an arrow which way it's a bad package

00:28:05,779 --> 00:28:11,149
requires monologue in the ocean dev

00:28:08,899 --> 00:28:14,419
master and it says no package found and

00:28:11,149 --> 00:28:16,730
that's kind of weird because you know

00:28:14,419 --> 00:28:19,369
that there is a branch master and you go

00:28:16,730 --> 00:28:22,820
check on packages and it's there and you

00:28:19,369 --> 00:28:27,440
go what the hell like it doesn't make

00:28:22,820 --> 00:28:29,509
sense and while it does in a way because

00:28:27,440 --> 00:28:31,759
again we have this minimum stability

00:28:29,509 --> 00:28:36,470
which says I don't want anything that's

00:28:31,759 --> 00:28:39,499
under better so there are few ways to

00:28:36,470 --> 00:28:42,230
fix this you can change the minimum

00:28:39,499 --> 00:28:44,179
stability to be to be dead but then you

00:28:42,230 --> 00:28:53,539
are gonna get all of your dependencies

00:28:44,179 --> 00:28:56,539
in death muster equal or you can also

00:28:53,539 --> 00:28:58,970
use this at dev on the under monologue

00:28:56,539 --> 00:29:00,380
require which just says okay for this

00:28:58,970 --> 00:29:05,320
one it's okay to get it

00:29:00,380 --> 00:29:10,549
in dev version so that works for a while

00:29:05,320 --> 00:29:14,120
you know both happy because monologue

00:29:10,549 --> 00:29:16,490
defines this that the dev master branch

00:29:14,120 --> 00:29:21,049
is equal to one point 12 at the moment

00:29:16,490 --> 00:29:23,150
so it's saying okay I get kind of

00:29:21,049 --> 00:29:25,610
enforces alike that the best practices

00:29:23,150 --> 00:29:28,100
enforce that there is a master branch

00:29:25,610 --> 00:29:29,480
which is called master and changing that

00:29:28,100 --> 00:29:31,910
all the time like changing your default

00:29:29,480 --> 00:29:34,850
branch would be a bit of a pain so what

00:29:31,910 --> 00:29:37,130
we did to facilitate this is saying okay

00:29:34,850 --> 00:29:39,710
you can you can describe what at this

00:29:37,130 --> 00:29:44,330
moment the master branch is equal to in

00:29:39,710 --> 00:29:50,299
terms of numbers version so composer

00:29:44,330 --> 00:29:53,090
knows now that it's a 1.12 equivalent so

00:29:50,299 --> 00:29:57,640
it matches with you one point anything

00:29:53,090 --> 00:30:01,539
requirement so it's fine it installs you

00:29:57,640 --> 00:30:04,159
might be happy for a while but then

00:30:01,539 --> 00:30:07,100
there is a monarch 2.0 coming coming

00:30:04,159 --> 00:30:09,200
about and so the branch the branch

00:30:07,100 --> 00:30:13,280
aalia's therefore the the master branch

00:30:09,200 --> 00:30:17,870
will become 2.0 so it doesn't resolve

00:30:13,280 --> 00:30:20,450
any more because you get this thing

00:30:17,870 --> 00:30:23,330
saying okay like now the master yes you

00:30:20,450 --> 00:30:25,820
allowed every disease but death master

00:30:23,330 --> 00:30:31,429
is not equivalent like it does not match

00:30:25,820 --> 00:30:36,980
the one point x constraint so yeah that

00:30:31,429 --> 00:30:39,080
sucks and in this case there's actually

00:30:36,980 --> 00:30:42,380
no good solution like you can change

00:30:39,080 --> 00:30:44,450
your requirement and then you most

00:30:42,380 --> 00:30:47,990
likely get breakage because you update

00:30:44,450 --> 00:30:52,130
it to the 2.00 you can again go talk to

00:30:47,990 --> 00:30:56,960
the bad package maintainer and i connect

00:30:52,130 --> 00:30:59,030
them and fix the things but ideally you

00:30:56,960 --> 00:31:00,620
would you know like them like identify

00:30:59,030 --> 00:31:04,010
this and go nag them as soon as possible

00:31:00,620 --> 00:31:09,700
not wait until the 2.0 km comes and all

00:31:04,010 --> 00:31:09,700
hell breaks loose okay

00:31:09,900 --> 00:31:17,700
look file I don't know if this is still

00:31:13,980 --> 00:31:21,559
necessary or not but who ignores the log

00:31:17,700 --> 00:31:27,900
file I can get it now

00:31:21,559 --> 00:31:30,659
yeah you get one two three phew oh okay

00:31:27,900 --> 00:31:34,520
it's good so you shouldn't really

00:31:30,659 --> 00:31:38,070
absolutely not all those that do it

00:31:34,520 --> 00:31:41,640
please don't unless you have a very very

00:31:38,070 --> 00:31:43,590
good reason but I can't think of any so

00:31:41,640 --> 00:31:47,399
we can discuss it later if you want but

00:31:43,590 --> 00:31:52,289
now most likely it's just you two you

00:31:47,399 --> 00:31:55,279
didn't know and that's fine but just

00:31:52,289 --> 00:31:59,880
shortly what why you should commit it is

00:31:55,279 --> 00:32:02,010
that you get faster installs if you do

00:31:59,880 --> 00:32:04,559
like composer install and you have a log

00:32:02,010 --> 00:32:06,240
file present it will like install

00:32:04,559 --> 00:32:07,710
immediately there is no dependency

00:32:06,240 --> 00:32:09,929
resolution or anything going on it's

00:32:07,710 --> 00:32:14,100
just it reads the log file it applies

00:32:09,929 --> 00:32:17,640
that so if you deploy to like low memory

00:32:14,100 --> 00:32:19,980
servers VMs etc this can help because

00:32:17,640 --> 00:32:24,690
you can run a composer install with very

00:32:19,980 --> 00:32:26,970
low memory usage but the most most most

00:32:24,690 --> 00:32:30,450
important is that you get reproducible

00:32:26,970 --> 00:32:33,600
installs like this log file describes

00:32:30,450 --> 00:32:37,860
the exact state of your dependencies the

00:32:33,600 --> 00:32:43,649
last time you run update so if you run

00:32:37,860 --> 00:32:46,980
an install on that log file anywhere you

00:32:43,649 --> 00:32:49,110
get the same and that's quite amazing

00:32:46,980 --> 00:32:51,120
because you don't get like a CI server

00:32:49,110 --> 00:32:53,460
that bored because it got suddenly a new

00:32:51,120 --> 00:32:55,350
version or something you don't get the

00:32:53,460 --> 00:32:57,899
production server that bored because you

00:32:55,350 --> 00:33:00,899
get the new version which would be like

00:32:57,899 --> 00:33:03,090
more poly Matic you don't do an

00:33:00,899 --> 00:33:05,130
afternoon trying to debug why the hell

00:33:03,090 --> 00:33:07,620
something is working on this developer's

00:33:05,130 --> 00:33:10,049
machine and not on this one because yeah

00:33:07,620 --> 00:33:12,480
they run an updated like you know

00:33:10,049 --> 00:33:17,039
without the log file essentially they

00:33:12,480 --> 00:33:20,940
would have run an update accidentally so

00:33:17,039 --> 00:33:22,610
yeah you really should commit it just do

00:33:20,940 --> 00:33:26,610
it

00:33:22,610 --> 00:33:30,200
okay but on the other hand something has

00:33:26,610 --> 00:33:33,770
come to my attention a while back

00:33:30,200 --> 00:33:35,970
someone tweeted this Google search and

00:33:33,770 --> 00:33:39,840
it's kinda interesting because you see

00:33:35,970 --> 00:33:41,850
two things the first is that Google

00:33:39,840 --> 00:33:44,100
Webmaster Tools advertisements are

00:33:41,850 --> 00:33:48,630
really quite at detecting domain

00:33:44,100 --> 00:33:51,060
names I don't know what that is but the

00:33:48,630 --> 00:33:53,760
most important and relevant here is that

00:33:51,060 --> 00:33:56,180
a lot of people actually have the

00:33:53,760 --> 00:34:00,570
composer log accessible through the web

00:33:56,180 --> 00:34:03,960
publicly which you may not think is a

00:34:00,570 --> 00:34:06,140
big issue but actually lists all this

00:34:03,960 --> 00:34:09,060
the dependencies you're using in this

00:34:06,140 --> 00:34:11,690
devotion of whatever framework CMS

00:34:09,060 --> 00:34:15,210
library that could have you know

00:34:11,690 --> 00:34:17,389
vulnerabilities and that's like that's

00:34:15,210 --> 00:34:21,840
just opening the doors to anything so

00:34:17,389 --> 00:34:24,480
please watch out like either delete it

00:34:21,840 --> 00:34:26,429
after deploying or just make sure you

00:34:24,480 --> 00:34:29,129
have a web load that is not the same as

00:34:26,429 --> 00:34:31,440
the whatever do what you need to do but

00:34:29,129 --> 00:34:34,139
just don't let this happen this is bad

00:34:31,440 --> 00:34:41,940
like security wise it's really quite

00:34:34,139 --> 00:34:44,940
awful okay we have those custom commands

00:34:41,940 --> 00:34:46,980
as well for a few months which using

00:34:44,940 --> 00:34:50,129
scripts like in this case you see

00:34:46,980 --> 00:34:52,250
there's a script define which is test so

00:34:50,129 --> 00:34:54,990
traditionally the scripts were used like

00:34:52,250 --> 00:34:56,370
Nepali so then if you use like symphony

00:34:54,990 --> 00:35:00,450
or a bunch of other frameworks these

00:34:56,370 --> 00:35:04,860
days use them to do like post install

00:35:00,450 --> 00:35:07,110
command does some tasks so those are

00:35:04,860 --> 00:35:10,260
like kind of event listeners within

00:35:07,110 --> 00:35:13,050
within composer but now you can also

00:35:10,260 --> 00:35:15,990
define your own commands and so when you

00:35:13,050 --> 00:35:18,390
say test is PHP unit of whatever command

00:35:15,990 --> 00:35:20,610
you have there you can just hand compose

00:35:18,390 --> 00:35:22,110
a test and composer and see okay I don't

00:35:20,610 --> 00:35:24,480
have a test command I don't know what to

00:35:22,110 --> 00:35:27,780
do is that it checks the scripts okay

00:35:24,480 --> 00:35:31,020
this is a test script so I'll run that

00:35:27,780 --> 00:35:33,420
instead so that's a nice way I think to

00:35:31,020 --> 00:35:34,560
standardize like if you have different

00:35:33,420 --> 00:35:37,290
testing

00:35:34,560 --> 00:35:38,970
you know some sometimes is more than

00:35:37,290 --> 00:35:42,150
just PHP you need to learn you might

00:35:38,970 --> 00:35:44,550
have B hat or I don't know some other

00:35:42,150 --> 00:35:46,200
stuff fits I think it would be a nice

00:35:44,550 --> 00:35:47,820
way if everyone adds that to their

00:35:46,200 --> 00:35:49,980
project and you can just say that

00:35:47,820 --> 00:35:52,460
compose a test and you know it will do

00:35:49,980 --> 00:35:52,460
the right thing

00:35:53,460 --> 00:35:59,760
oh yeah something I forgot to mention is

00:35:55,770 --> 00:36:02,760
that PHP unit there you see that it's

00:35:59,760 --> 00:36:05,760
like technically as you require it and

00:36:02,760 --> 00:36:08,310
the bindis vendor bin which is a default

00:36:05,760 --> 00:36:10,920
like by default you will get the PHP

00:36:08,310 --> 00:36:13,260
unit installed in the vendor deal and

00:36:10,920 --> 00:36:17,340
then you have vendor slash bin slash PHP

00:36:13,260 --> 00:36:19,380
unit to run it and we add this this Bend

00:36:17,340 --> 00:36:21,090
here to the path before running the

00:36:19,380 --> 00:36:30,200
script so you can just type in for unity

00:36:21,090 --> 00:36:30,200
like magically knows what find it okay

00:36:30,740 --> 00:36:41,430
okay final tip I guess so if you want to

00:36:37,770 --> 00:36:44,460
use Forks of a liability say you fix the

00:36:41,430 --> 00:36:47,790
bug in some you know Symphony for

00:36:44,460 --> 00:36:49,220
example I hear it's full of bugs no I

00:36:47,790 --> 00:36:52,560
didn't say that

00:36:49,220 --> 00:36:54,870
but if you yeah if you fix something in

00:36:52,560 --> 00:36:56,190
the library you're using most likely

00:36:54,870 --> 00:36:59,040
it's gonna take a while before it gets

00:36:56,190 --> 00:37:00,870
mobbed so you probably want to use your

00:36:59,040 --> 00:37:03,450
fix especially if it's critical you

00:37:00,870 --> 00:37:10,200
usually want to use it before the next

00:37:03,450 --> 00:37:11,700
release or even before it's not so what

00:37:10,200 --> 00:37:13,830
you can do I guess you know about this

00:37:11,700 --> 00:37:20,520
is to define the repository with VCS

00:37:13,830 --> 00:37:23,670
data and then you say okay I want to

00:37:20,520 --> 00:37:27,690
require my branch of symphony which

00:37:23,670 --> 00:37:29,550
might be deaf master it might be deaf my

00:37:27,690 --> 00:37:31,710
patch if your branch is called my patch

00:37:29,550 --> 00:37:33,390
to usually do feature branch or

00:37:31,710 --> 00:37:38,430
something like that so you're gonna

00:37:33,390 --> 00:37:40,680
require that but then yeah you might

00:37:38,430 --> 00:37:42,540
have a problem which is that other

00:37:40,680 --> 00:37:45,270
things you have in your project required

00:37:42,540 --> 00:37:47,579
Symphony in version like in specific

00:37:45,270 --> 00:37:49,859
versions like 2.5

00:37:47,579 --> 00:37:53,160
and death my patch has no equivalency

00:37:49,859 --> 00:37:57,959
like it does not have an alia saying my

00:37:53,160 --> 00:38:00,150
patch equals 2.5 so so it won't like you

00:37:57,959 --> 00:38:02,430
you'll get a conflict there and so one

00:38:00,150 --> 00:38:05,400
easy way to fix this is to use this

00:38:02,430 --> 00:38:09,089
alias thing just like require a specific

00:38:05,400 --> 00:38:11,700
version as another one and I will

00:38:09,089 --> 00:38:15,479
install they have my patch and it will

00:38:11,700 --> 00:38:19,950
like purity now in alias whopper that

00:38:15,479 --> 00:38:22,829
says it also has this 2.5 point oh no

00:38:19,950 --> 00:38:25,680
like number on it she have this like

00:38:22,829 --> 00:38:28,940
mutant package with two two versions to

00:38:25,680 --> 00:38:31,319
rate it satisfies more than just

00:38:28,940 --> 00:38:34,799
explicit requires for their my patch it

00:38:31,319 --> 00:38:38,670
will also satisfy other dependencies all

00:38:34,799 --> 00:38:42,059
right maybe I'm going too fast

00:38:38,670 --> 00:38:46,950
I think it's okay

00:38:42,059 --> 00:38:51,509
turn proxy who heard of it not enough

00:38:46,950 --> 00:38:55,650
I suck at marketing good that's a chance

00:38:51,509 --> 00:38:57,509
then to enlighten some more people just

00:38:55,650 --> 00:39:01,430
quick sales pitch I don't wanna use it

00:38:57,509 --> 00:39:05,699
but basically what it is it's it's a

00:39:01,430 --> 00:39:07,199
proxy like thing a bit like packages to

00:39:05,699 --> 00:39:12,150
like studies that you can install on

00:39:07,199 --> 00:39:16,949
your servers it's paid to the catch

00:39:12,150 --> 00:39:19,259
that's why it's a sales pitch and it

00:39:16,949 --> 00:39:22,140
does like it provides you fast and

00:39:19,259 --> 00:39:24,299
reliable in the sense that it it mirrors

00:39:22,140 --> 00:39:26,940
everything from github from packages

00:39:24,299 --> 00:39:28,140
etcetera so if github is down or slow as

00:39:26,940 --> 00:39:30,539
hell

00:39:28,140 --> 00:39:33,839
you get like fast installs from your own

00:39:30,539 --> 00:39:37,859
server so hopefully your server still

00:39:33,839 --> 00:39:41,489
ends when github goes down maybe change

00:39:37,859 --> 00:39:43,049
links there but normally it does and the

00:39:41,489 --> 00:39:45,509
other main features that gives you a

00:39:43,049 --> 00:39:48,799
private package hosting like so you can

00:39:45,509 --> 00:39:52,680
have your own your own packages there

00:39:48,799 --> 00:39:56,519
and the main reason is paid like sold

00:39:52,680 --> 00:39:58,420
and not just given away is that I need

00:39:56,519 --> 00:40:01,000
money

00:39:58,420 --> 00:40:03,220
so yeah now so I realized like that I

00:40:01,000 --> 00:40:05,140
was kind of getting slowly tired of the

00:40:03,220 --> 00:40:06,910
whole maintaining this project for free

00:40:05,140 --> 00:40:09,029
and it's like the issues are getting

00:40:06,910 --> 00:40:11,349
kind of more and more bowing as the

00:40:09,029 --> 00:40:14,140
lifespan of the project goes you know

00:40:11,349 --> 00:40:16,690
it's like the the hard stuff was fun and

00:40:14,140 --> 00:40:18,789
then you get like oh can you please fix

00:40:16,690 --> 00:40:22,180
this weird bug on this real platform

00:40:18,789 --> 00:40:24,250
that and it's like it effects to the

00:40:22,180 --> 00:40:26,410
point zero one percent of users and I

00:40:24,250 --> 00:40:29,140
get more know stuff like that which is

00:40:26,410 --> 00:40:31,569
not exactly exciting so my motivation

00:40:29,140 --> 00:40:34,839
was going quite a lot like to a low

00:40:31,569 --> 00:40:38,950
point and then I tried to figure out how

00:40:34,839 --> 00:40:41,650
to like combine let's say walk in

00:40:38,950 --> 00:40:46,260
financials and open source and and this

00:40:41,650 --> 00:40:48,970
came out so I hope you check it out like

00:40:46,260 --> 00:40:51,430
it's up to you but at least you know

00:40:48,970 --> 00:40:52,799
about it now go check it out that's all

00:40:51,430 --> 00:40:56,680
I ask

00:40:52,799 --> 00:40:58,599
finally a few community resources which

00:40:56,680 --> 00:41:01,839
I think are quite cool like is a bunch

00:40:58,599 --> 00:41:09,670
of stuff that appeared recently melody

00:41:01,839 --> 00:41:13,000
is know if you saw it but it's I don't

00:41:09,670 --> 00:41:16,059
know how to describe it in one line it

00:41:13,000 --> 00:41:19,180
lets you run scripts like it lets you

00:41:16,059 --> 00:41:20,950
embed a composer jason in a way in a PHP

00:41:19,180 --> 00:41:23,049
script so you can have like a very

00:41:20,950 --> 00:41:24,640
simple script where on top you define

00:41:23,049 --> 00:41:27,519
dependencies and then you have the

00:41:24,640 --> 00:41:30,839
script at once and then you can do like

00:41:27,519 --> 00:41:32,920
melody around this and it will

00:41:30,839 --> 00:41:34,740
automatically load those packages you

00:41:32,920 --> 00:41:37,390
defined and then run the scripts so it's

00:41:34,740 --> 00:41:45,660
kind of cool to have like very small

00:41:37,390 --> 00:41:49,900
self-contained utilities pack analyst is

00:41:45,660 --> 00:41:51,490
rather insane projects but it's pretty

00:41:49,900 --> 00:41:55,630
cool

00:41:51,490 --> 00:41:59,380
the guy basically scans all the source

00:41:55,630 --> 00:42:02,099
code of all the packages packages like

00:41:59,380 --> 00:42:06,220
goes on github download everything

00:42:02,099 --> 00:42:09,549
indexes it all and and then it lets you

00:42:06,220 --> 00:42:11,230
do searches on that so you can you can

00:42:09,549 --> 00:42:13,750
say okay like I want to see

00:42:11,230 --> 00:42:16,090
who uses this interface I have in my

00:42:13,750 --> 00:42:17,500
package and it will show you all the

00:42:16,090 --> 00:42:20,950
packages that have implemented that

00:42:17,500 --> 00:42:23,619
interface that's really awesome for like

00:42:20,950 --> 00:42:25,720
making decisions and you know what is

00:42:23,619 --> 00:42:28,180
actually using my stuff and how and

00:42:25,720 --> 00:42:30,820
obviously it can only access the public

00:42:28,180 --> 00:42:32,380
code right it's not it doesn't have

00:42:30,820 --> 00:42:35,650
access to all application code out there

00:42:32,380 --> 00:42:38,820
but it's still a nice way to to explore

00:42:35,650 --> 00:42:42,490
the the way people use your stuff

00:42:38,820 --> 00:42:45,160
version also has this way of if you go

00:42:42,490 --> 00:42:46,900
to like just monologue common monologue

00:42:45,160 --> 00:42:48,640
you can also put your package name there

00:42:46,900 --> 00:42:52,420
if you don't care about no no that's

00:42:48,640 --> 00:42:55,780
fine it with slash references it shows

00:42:52,420 --> 00:42:58,480
you all the packages that require and

00:42:55,780 --> 00:43:02,520
require use so you also an interesting

00:42:58,480 --> 00:43:06,790
way to see like where you used etcetera

00:43:02,520 --> 00:43:09,369
Composer cleaner is a thing that cleans

00:43:06,790 --> 00:43:13,119
the vendor directory of all the tests

00:43:09,369 --> 00:43:14,920
and documentation and stuff and possibly

00:43:13,119 --> 00:43:17,040
deletes too much I don't know why I

00:43:14,920 --> 00:43:20,410
didn't try it but some people are really

00:43:17,040 --> 00:43:23,560
passionate about this issue of cleaning

00:43:20,410 --> 00:43:27,070
up the vendor dear so this exists if if

00:43:23,560 --> 00:43:30,640
you wanna give it a fat and awesome PHP

00:43:27,070 --> 00:43:33,910
is a long long long long list of awesome

00:43:30,640 --> 00:43:35,680
PHP packages apparently I mean it's

00:43:33,910 --> 00:43:38,290
obviously biased it's just done by

00:43:35,680 --> 00:43:41,710
someone but I think it like from a quick

00:43:38,290 --> 00:43:46,810
glance at it I would say it has a good

00:43:41,710 --> 00:43:48,910
overview of pretty much like yeah all

00:43:46,810 --> 00:43:50,800
the useful stuff or like commonly useful

00:43:48,910 --> 00:43:52,840
packages I would say so if you're

00:43:50,800 --> 00:43:55,300
looking for something and you search on

00:43:52,840 --> 00:43:59,170
packages then you're like Alice 15 of

00:43:55,300 --> 00:44:01,660
them of 50 you can go check that maybe

00:43:59,170 --> 00:44:04,240
you find someone telling you okay use

00:44:01,660 --> 00:44:08,380
this one and then you can put the blame

00:44:04,240 --> 00:44:11,010
on someone else if it sucks alright this

00:44:08,380 --> 00:44:11,010
is it thank you

00:44:17,500 --> 00:44:23,840
if you do have questions I think we have

00:44:20,480 --> 00:44:27,230
15 minutes otherwise you can hit me up

00:44:23,840 --> 00:44:31,070
there the slides are available on the

00:44:27,230 --> 00:44:35,750
link there and you may leave good

00:44:31,070 --> 00:44:43,910
feedback oh now you all constructive

00:44:35,750 --> 00:44:45,380
that feedback is always joined in yes hi

00:44:43,910 --> 00:44:47,000
you said you should always commit to the

00:44:45,380 --> 00:44:48,500
lock file yeah I was wondering if that

00:44:47,000 --> 00:44:54,320
was also true if I'm publishing a

00:44:48,500 --> 00:44:56,330
library so I just heard library but no I

00:44:54,320 --> 00:44:58,790
know I heard the question but I guess

00:44:56,330 --> 00:45:00,530
maybe repeat it to everyone because so

00:44:58,790 --> 00:45:02,740
if I'm publishing a library should I

00:45:00,530 --> 00:45:05,870
also commit a lot fun ok so that's

00:45:02,740 --> 00:45:08,650
that's the potentially one use case or

00:45:05,870 --> 00:45:12,470
you could say like you can argue and

00:45:08,650 --> 00:45:14,660
some people say no because then you you

00:45:12,470 --> 00:45:18,220
always test with the latest dependencies

00:45:14,660 --> 00:45:21,440
like when you build runs for example

00:45:18,220 --> 00:45:23,270
some people say yes because that way you

00:45:21,440 --> 00:45:25,400
make sure that everyone test with the

00:45:23,270 --> 00:45:28,280
same notions and that when you actually

00:45:25,400 --> 00:45:31,040
bump it like you you run the test and

00:45:28,280 --> 00:45:33,410
then you check in I don't know like to

00:45:31,040 --> 00:45:35,870
be honest it mostly doesn't not matter

00:45:33,410 --> 00:45:37,850
for libraries I would say because you

00:45:35,870 --> 00:45:43,580
don't deploy a library somewhere or like

00:45:37,850 --> 00:45:46,280
you have way less not as many incentives

00:45:43,580 --> 00:45:48,920
but there's also no big issue with doing

00:45:46,280 --> 00:45:52,100
it I think so I would say for that it's

00:45:48,920 --> 00:45:54,380
up to you but in projects absolutely

00:45:52,100 --> 00:46:02,680
committed like I just don't see any

00:45:54,380 --> 00:46:02,680
reason not to anyone else

00:46:09,100 --> 00:46:17,830
I guess there's lunch so yeah don't want

00:46:14,620 --> 00:46:21,240
to hold you back all right okay can we

00:46:17,830 --> 00:46:21,240

YouTube URL: https://www.youtube.com/watch?v=mNFKZeYRdto


