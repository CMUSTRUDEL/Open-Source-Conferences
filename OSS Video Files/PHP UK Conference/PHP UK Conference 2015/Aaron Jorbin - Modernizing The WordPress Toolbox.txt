Title: Aaron Jorbin - Modernizing The WordPress Toolbox
Publication date: 2015-04-02
Playlist: PHP UK Conference 2015
Description: 
	WordPress powers over 20% of the web, yet until recently it’s toolbox and build process would be considered antique at best. A little over one year ago we began the process of reevaluating our choices. This lead us to updating our tooling and testing; making them first class citizens. Many of the pieces were taken off the shelf, a few where custom built, and some required large coordinated efforts to be successfully implemented. We’ve learned some valuable lessons along the way that may help other projects modernize their toolbox and discovered some excellent benefits that reinforce our decision to take on this challenge.

http://aaronjorbin.github.io/phpuk/
Captions: 
	00:00:00,000 --> 00:00:02,060
you

00:00:05,290 --> 00:00:11,559
all of us who have ever moved know that

00:00:09,190 --> 00:00:14,980
it calling it a frustrating process is a

00:00:11,559 --> 00:00:18,130
serious understatement besides packing

00:00:14,980 --> 00:00:21,040
up and taking stock of everything I own

00:00:18,130 --> 00:00:24,610
I also had to physically get my stuff

00:00:21,040 --> 00:00:26,739
from one place to another and once I was

00:00:24,610 --> 00:00:30,430
at my new place I actually had to get it

00:00:26,739 --> 00:00:33,070
inside now my new flat is amazing in

00:00:30,430 --> 00:00:35,920
many ways it's the entire ground floor

00:00:33,070 --> 00:00:38,140
of an old building with a private

00:00:35,920 --> 00:00:41,310
backyard which is great for the dog and

00:00:38,140 --> 00:00:44,740
I love once it will be warmer outside

00:00:41,310 --> 00:00:48,820
however it has a very narrow entrance

00:00:44,740 --> 00:00:50,290
and a curve right at the entrance this

00:00:48,820 --> 00:00:52,960
proved to be a challenge when trying to

00:00:50,290 --> 00:00:54,970
get furniture inside so what did I have

00:00:52,960 --> 00:00:58,350
to do I actually had to take out a

00:00:54,970 --> 00:01:02,530
window in order to get my furniture in

00:00:58,350 --> 00:01:05,199
how many of us are taking out windows on

00:01:02,530 --> 00:01:07,780
a daily basis just to accomplish the

00:01:05,199 --> 00:01:11,320
tasks that we need to write code for our

00:01:07,780 --> 00:01:14,080
projects by relying on outdated tools

00:01:11,320 --> 00:01:16,990
and processes we are often forcing our

00:01:14,080 --> 00:01:19,920
contributors to take out windows and

00:01:16,990 --> 00:01:24,940
sometimes even worse in order to

00:01:19,920 --> 00:01:29,440
contribute code to our projects build

00:01:24,940 --> 00:01:32,040
tools tests tools the toolbox developer

00:01:29,440 --> 00:01:35,560
tools it doesn't matter what you call it

00:01:32,040 --> 00:01:39,250
it's all about the experience of

00:01:35,560 --> 00:01:42,540
contributing this is the story of the

00:01:39,250 --> 00:01:46,330
evolution of the WordPress toolbox

00:01:42,540 --> 00:01:49,060
WordPress is a project that had 283

00:01:46,330 --> 00:01:51,490
individuals contribute code to its most

00:01:49,060 --> 00:01:55,299
recent release and this was over a short

00:01:51,490 --> 00:01:58,000
three-month period my flat was built

00:01:55,299 --> 00:02:01,299
over a hundred years ago so it's showing

00:01:58,000 --> 00:02:03,729
its age WordPress is a project is now

00:02:01,299 --> 00:02:07,060
almost 12 years old which is about a

00:02:03,729 --> 00:02:10,090
hundred in terms of buildings and it's

00:02:07,060 --> 00:02:12,430
showing its age but over the last year

00:02:10,090 --> 00:02:14,680
and a half we've actually made a big

00:02:12,430 --> 00:02:17,200
effort to modernize our toolbox and

00:02:14,680 --> 00:02:21,280
improve the experience of contribute

00:02:17,200 --> 00:02:23,050
code so in order to start looking at our

00:02:21,280 --> 00:02:25,180
build process we need to actually look

00:02:23,050 --> 00:02:29,200
back and look back to when WordPress

00:02:25,180 --> 00:02:32,440
started which was 2003 the building test

00:02:29,200 --> 00:02:36,069
tool landscape in 2003 was a lot

00:02:32,440 --> 00:02:38,200
different than it is today make was

00:02:36,069 --> 00:02:41,739
probably the best tool out there if you

00:02:38,200 --> 00:02:44,590
wanted to automate tasks and make is

00:02:41,739 --> 00:02:46,660
great it's powerful but it's not

00:02:44,590 --> 00:02:48,790
necessarily the simplest easiest to

00:02:46,660 --> 00:02:52,269
learn and it's not necessarily the

00:02:48,790 --> 00:02:54,220
easiest for reusability so you want

00:02:52,269 --> 00:02:56,920
reusability you have a project called

00:02:54,220 --> 00:02:59,620
aunt that you can use an aunt is great

00:02:56,920 --> 00:03:04,989
if you like writing XML and if you like

00:02:59,620 --> 00:03:09,360
writing XML Ida have never met you no

00:03:04,989 --> 00:03:11,470
one likes writing XML that I know and

00:03:09,360 --> 00:03:14,470
then if you wanted to test your

00:03:11,470 --> 00:03:17,049
JavaScript you had one person's idea of

00:03:14,470 --> 00:03:19,360
what proper JavaScript looked like so

00:03:17,049 --> 00:03:22,239
you had to use JSON and you had to use

00:03:19,360 --> 00:03:26,560
one person specific rules for what

00:03:22,239 --> 00:03:29,019
JavaScript looked like if you wanted to

00:03:26,560 --> 00:03:30,970
test your PHP code do any sort of unit

00:03:29,019 --> 00:03:34,359
testing you had one option which was

00:03:30,970 --> 00:03:36,069
simple test and this is the only unit

00:03:34,359 --> 00:03:39,819
testing framework that I could find that

00:03:36,069 --> 00:03:42,670
for PHP that was around in 2003 now I

00:03:39,819 --> 00:03:45,519
wasn't a developer in 2003 so there may

00:03:42,670 --> 00:03:46,870
have been others but if the earth or

00:03:45,519 --> 00:03:52,090
existence has been wiped from the

00:03:46,870 --> 00:03:58,239
internet so let's fast forward let's

00:03:52,090 --> 00:04:02,139
fast forward to 2013 now we have tools

00:03:58,239 --> 00:04:04,780
like grunt grunt is a JavaScript to ask

00:04:02,139 --> 00:04:06,639
runner it allows us to write JavaScript

00:04:04,780 --> 00:04:09,280
and if you have a web application odds

00:04:06,639 --> 00:04:13,630
are there is some JavaScript already in

00:04:09,280 --> 00:04:16,510
your application if it's a pure PHP

00:04:13,630 --> 00:04:19,000
application you can use thing now thing

00:04:16,510 --> 00:04:20,680
is a pure PHP task runner but it suffers

00:04:19,000 --> 00:04:23,789
from the same problem of ant and that

00:04:20,680 --> 00:04:23,789
you have to write xml

00:04:24,190 --> 00:04:28,990
if you want to test the syntax of your

00:04:27,190 --> 00:04:33,070
JavaScript you now can define your own

00:04:28,990 --> 00:04:34,450
rules using j/s hint if you just want to

00:04:33,070 --> 00:04:36,550
test it and make sure that you don't

00:04:34,450 --> 00:04:39,070
have syntax errors you can use j/s

00:04:36,550 --> 00:04:41,410
validate you can actually remove all the

00:04:39,070 --> 00:04:44,800
rules other than what the browser's are

00:04:41,410 --> 00:04:46,750
going to be using if you want to test

00:04:44,800 --> 00:04:50,020
your PHP code we actually have options

00:04:46,750 --> 00:04:53,770
now we have phpunit we've PHP spec we

00:04:50,020 --> 00:04:56,020
have bad we're not bound to one idea of

00:04:53,770 --> 00:04:58,060
what testing should be we actually can

00:04:56,020 --> 00:05:03,490
choose the one that fits our project

00:04:58,060 --> 00:05:05,560
that fits us as developers best if you

00:05:03,490 --> 00:05:08,260
want to write JavaScript unit tests you

00:05:05,560 --> 00:05:10,720
have options as well these options did

00:05:08,260 --> 00:05:12,700
not exist in 2003 there were no

00:05:10,720 --> 00:05:15,460
JavaScript unit testing frameworks that

00:05:12,700 --> 00:05:17,830
I could find then but now you have qunit

00:05:15,460 --> 00:05:20,530
you have mocha you have jasmine and you

00:05:17,830 --> 00:05:23,710
have many more we have options more

00:05:20,530 --> 00:05:26,020
options and more options today every day

00:05:23,710 --> 00:05:30,850
new and new build tools are coming out

00:05:26,020 --> 00:05:34,530
that we can use but for WordPress 2013

00:05:30,850 --> 00:05:36,880
still looked an awful lot like 2003 our

00:05:34,530 --> 00:05:41,500
build tools had not kept up with the

00:05:36,880 --> 00:05:45,430
times we had a separate repository just

00:05:41,500 --> 00:05:47,230
for unit tests so instead of our tests

00:05:45,430 --> 00:05:51,780
and our code living together side by

00:05:47,230 --> 00:05:51,780
side they lived off in separate worlds

00:05:51,870 --> 00:05:56,530
we had BOTS running behind the scenes

00:05:54,640 --> 00:05:59,380
doing things like automating

00:05:56,530 --> 00:06:03,820
translations are compiling and minifying

00:05:59,380 --> 00:06:05,710
our JavaScript no one knew what it

00:06:03,820 --> 00:06:07,870
besides a handful of people what these

00:06:05,710 --> 00:06:09,520
BOTS were doing they were hidden from

00:06:07,870 --> 00:06:12,820
public view were an open source project

00:06:09,520 --> 00:06:16,270
yet we were hiding things from our

00:06:12,820 --> 00:06:18,160
contributors and from our community we

00:06:16,270 --> 00:06:20,680
also had no JavaScript unit tests

00:06:18,160 --> 00:06:23,160
whatsoever our JavaScript could break

00:06:20,680 --> 00:06:25,900
and unless someone actually noticed

00:06:23,160 --> 00:06:30,810
physically tested and noticed we had no

00:06:25,900 --> 00:06:33,250
idea what was breaking we had no see I

00:06:30,810 --> 00:06:35,590
whatsoever so every time we wanted to

00:06:33,250 --> 00:06:37,090
run our unit tests we manually had to

00:06:35,590 --> 00:06:39,500
run our unit

00:06:37,090 --> 00:06:42,680
this led to lots and lots of problems

00:06:39,500 --> 00:06:45,020
for software project is big as WordPress

00:06:42,680 --> 00:06:48,889
that powers as many websites as

00:06:45,020 --> 00:06:50,930
WordPress into wonder that in 2013 we

00:06:48,889 --> 00:06:53,600
are as successful as at what we were and

00:06:50,930 --> 00:06:55,850
it was largely because we as people were

00:06:53,600 --> 00:07:00,560
investing way more time than we should

00:06:55,850 --> 00:07:02,930
have our tests were hidden and so many

00:07:00,560 --> 00:07:07,100
people didn't even know that we had unit

00:07:02,930 --> 00:07:08,570
tests our tests thus became harder for

00:07:07,100 --> 00:07:11,660
people to use because they weren't at

00:07:08,570 --> 00:07:14,720
the forefront many contributors were

00:07:11,660 --> 00:07:16,430
submitting new features without any sort

00:07:14,720 --> 00:07:18,530
of testing behind it they didn't have

00:07:16,430 --> 00:07:20,810
any idea that we even had tests or how

00:07:18,530 --> 00:07:23,900
to run our tests our tests were not easy

00:07:20,810 --> 00:07:28,310
to run you had to go through a lot more

00:07:23,900 --> 00:07:30,889
work just to run your tests our tools

00:07:28,310 --> 00:07:34,789
being hidden meant that people didn't

00:07:30,889 --> 00:07:36,500
know how we were doing things this led

00:07:34,789 --> 00:07:38,660
to lots of chances where we were missing

00:07:36,500 --> 00:07:41,690
the opportunity to optimize and improve

00:07:38,660 --> 00:07:44,090
our tooling because it was only a select

00:07:41,690 --> 00:07:47,720
few committers that had access to our

00:07:44,090 --> 00:07:52,789
build tools only a select few could

00:07:47,720 --> 00:07:55,430
actually work on that so we began a

00:07:52,789 --> 00:07:59,479
process of actually analyzing what

00:07:55,430 --> 00:08:02,570
should be our philosophy of Toulon what

00:07:59,479 --> 00:08:05,330
should tooling be and so to start the

00:08:02,570 --> 00:08:09,349
idea kind of became we wanted to make

00:08:05,330 --> 00:08:13,010
contributing code easy and this seems

00:08:09,349 --> 00:08:15,889
like a great idea at first glance except

00:08:13,010 --> 00:08:18,620
that the issue is rarely for an open

00:08:15,889 --> 00:08:21,949
source project that's large and has many

00:08:18,620 --> 00:08:25,120
contributors at getting code in like you

00:08:21,949 --> 00:08:28,669
can get 500 patches submitted in the day

00:08:25,120 --> 00:08:30,860
but it's not going to help you because

00:08:28,669 --> 00:08:35,390
bad patches at the end of the day make

00:08:30,860 --> 00:08:38,060
more work it makes it harder so instead

00:08:35,390 --> 00:08:40,490
of making contributing code easy what

00:08:38,060 --> 00:08:45,380
about making contributing quality code

00:08:40,490 --> 00:08:48,200
easy well thats tolls leading to lots

00:08:45,380 --> 00:08:49,380
and lots of patches and many of them

00:08:48,200 --> 00:08:52,800
aren't going to be

00:08:49,380 --> 00:08:55,830
see so instead we want to make

00:08:52,800 --> 00:09:00,180
contributing quality code as easy as it

00:08:55,830 --> 00:09:03,270
should be we want to have barriers but

00:09:00,180 --> 00:09:05,370
only have our barriers on purpose we

00:09:03,270 --> 00:09:07,740
never want to have a barrier to

00:09:05,370 --> 00:09:11,480
contributing code that we didn't agree

00:09:07,740 --> 00:09:13,860
on as a project of wanting to have

00:09:11,480 --> 00:09:16,110
nothing should be out of our control we

00:09:13,860 --> 00:09:20,430
should own the experience of

00:09:16,110 --> 00:09:25,710
contributing to our project so as a big

00:09:20,430 --> 00:09:28,020
project we needed to have big goals so

00:09:25,710 --> 00:09:31,380
our first goal of this entire project

00:09:28,020 --> 00:09:34,110
was that it had to be non breaking we

00:09:31,380 --> 00:09:37,350
didn't want to break any contributors

00:09:34,110 --> 00:09:39,840
individual flow with never possible we

00:09:37,350 --> 00:09:43,080
didn't want to break any sites that

00:09:39,840 --> 00:09:47,490
relied upon the existing workflow in the

00:09:43,080 --> 00:09:52,130
existing setup we wanted to have more

00:09:47,490 --> 00:09:54,900
tools we just simply didn't have enough

00:09:52,130 --> 00:09:59,850
there were many tasks that were still

00:09:54,900 --> 00:10:03,660
being done by hand on a regular basis we

00:09:59,850 --> 00:10:06,090
wanted to have more testing it's great

00:10:03,660 --> 00:10:07,680
to have unit tests but if you don't have

00:10:06,090 --> 00:10:09,690
enough and you don't have the right ones

00:10:07,680 --> 00:10:13,410
they're not necessarily actually helping

00:10:09,690 --> 00:10:15,990
your project we also really wanted to

00:10:13,410 --> 00:10:18,030
have more transparency they're just

00:10:15,990 --> 00:10:20,940
simply wasn't enough as an open source

00:10:18,030 --> 00:10:23,940
project in order for us to be solid

00:10:20,940 --> 00:10:26,910
open-source citizens we had to open up

00:10:23,940 --> 00:10:29,310
our process to the entire community both

00:10:26,910 --> 00:10:30,900
the internal WordPress community and the

00:10:29,310 --> 00:10:36,420
larger developer and open source

00:10:30,900 --> 00:10:38,160
community in the world we wanted to

00:10:36,420 --> 00:10:41,880
continue to make it easier to develop

00:10:38,160 --> 00:10:44,660
WordPress lots of people have called

00:10:41,880 --> 00:10:48,000
WordPress a gateway drug to open source

00:10:44,660 --> 00:10:50,940
we are we pride ourselves on having a

00:10:48,000 --> 00:10:53,970
low barrier to entry we don't want to

00:10:50,940 --> 00:10:55,920
have overly complicated rules we want a

00:10:53,970 --> 00:10:57,630
high number of contributors because the

00:10:55,920 --> 00:10:59,130
more people that are contributing the

00:10:57,630 --> 00:11:01,500
more people that are getting involved in

00:10:59,130 --> 00:11:02,710
open source and maybe they might not

00:11:01,500 --> 00:11:04,990
stick with WordPress

00:11:02,710 --> 00:11:07,300
and that's fine maybe for press isn't

00:11:04,990 --> 00:11:10,270
the project for them but getting them to

00:11:07,300 --> 00:11:12,700
bite into open source is going to help

00:11:10,270 --> 00:11:15,670
them as developers it shits focused on

00:11:12,700 --> 00:11:20,710
this morning open source is a great way

00:11:15,670 --> 00:11:22,660
for you to improve as a developer so

00:11:20,710 --> 00:11:26,380
this process of making it easier and

00:11:22,660 --> 00:11:28,720
easier to contribute really helps us as

00:11:26,380 --> 00:11:31,750
a project and so we wanted to keep that

00:11:28,720 --> 00:11:34,360
as a large goal but in addition to being

00:11:31,750 --> 00:11:37,480
easier to contribute we did want to make

00:11:34,360 --> 00:11:40,180
it so that we had better patches we

00:11:37,480 --> 00:11:43,060
didn't want to get fluff we didn't want

00:11:40,180 --> 00:11:44,950
to get you know code that wasn't going

00:11:43,060 --> 00:11:46,690
to be usable we wanted to help new

00:11:44,950 --> 00:11:49,570
contributors and experienced

00:11:46,690 --> 00:11:57,250
contributors have a good patch on day

00:11:49,570 --> 00:11:59,710
one so this is what we started first we

00:11:57,250 --> 00:12:05,500
have one repository at the time we had

00:11:59,710 --> 00:12:08,050
court svn wordpress org yes svn no it's

00:12:05,500 --> 00:12:15,280
not the popular these days but is what

00:12:08,050 --> 00:12:16,870
we had and so we started there and one

00:12:15,280 --> 00:12:19,590
of the first things we worked on was

00:12:16,870 --> 00:12:24,190
becoming more version control agnostic

00:12:19,590 --> 00:12:27,070
so if you use svn and you didn't want to

00:12:24,190 --> 00:12:30,040
use svn you wanted to use git we can

00:12:27,070 --> 00:12:31,780
make that work we also can make it work

00:12:30,040 --> 00:12:35,980
so that we have multiple different

00:12:31,780 --> 00:12:41,230
repositories that people can use so we

00:12:35,980 --> 00:12:43,180
kept the cord svn repository added git

00:12:41,230 --> 00:12:46,990
repositories and added another

00:12:43,180 --> 00:12:49,210
repository full called develop so in

00:12:46,990 --> 00:12:55,450
actuality while we kept one repository

00:12:49,210 --> 00:12:58,600
it became for so core dot svn the code

00:12:55,450 --> 00:13:02,590
now actually lives inside are developed

00:12:58,600 --> 00:13:05,500
at svn repository developed at svn

00:13:02,590 --> 00:13:08,230
includes our tests includes tooling and

00:13:05,500 --> 00:13:10,930
includes a source directory in this

00:13:08,230 --> 00:13:13,690
source directory then gets compiled on

00:13:10,930 --> 00:13:16,209
our build server using a build process

00:13:13,690 --> 00:13:20,519
that's public that's in our grunt file

00:13:16,209 --> 00:13:25,089
and becomes the Corvette svn repository

00:13:20,519 --> 00:13:27,610
so anyone that was using cord on svn can

00:13:25,089 --> 00:13:29,860
still use it exactly the same way and

00:13:27,610 --> 00:13:32,559
this is synced on a post commit hook

00:13:29,860 --> 00:13:35,319
every time someone commits code to

00:13:32,559 --> 00:13:40,119
develop it automatically is synced over

00:13:35,319 --> 00:13:43,600
to core so Korres Vienna still works

00:13:40,119 --> 00:13:47,019
exactly the same way many sites am more

00:13:43,600 --> 00:13:49,509
press run our trunk version my eyesight

00:13:47,019 --> 00:13:51,819
does many lee developers a handful of

00:13:49,509 --> 00:13:53,589
people that decide that you know it's

00:13:51,819 --> 00:13:55,839
much more important for us to eat our

00:13:53,589 --> 00:13:58,360
own dog food than to have a perfectly

00:13:55,839 --> 00:14:02,319
stable and perfectly wonderfully working

00:13:58,360 --> 00:14:06,850
site and so we often run it out of svm

00:14:02,319 --> 00:14:08,589
checkouts and you could our work made it

00:14:06,850 --> 00:14:13,959
so that this was still possible we

00:14:08,589 --> 00:14:16,360
didn't break any one site by doing it we

00:14:13,959 --> 00:14:18,579
also made the decision that we weren't

00:14:16,360 --> 00:14:23,100
going to stop people from contributing

00:14:18,579 --> 00:14:23,100
patches that came from korres fee n

00:14:23,490 --> 00:14:28,779
there's so much documentation that was

00:14:26,679 --> 00:14:31,899
built up over ten years of the wordpress

00:14:28,779 --> 00:14:33,629
project that by suddenly deciding that

00:14:31,899 --> 00:14:36,279
we no longer were using that repository

00:14:33,629 --> 00:14:39,790
we're actually going to hurt ourselves

00:14:36,279 --> 00:14:42,339
as a project why do we want to suddenly

00:14:39,790 --> 00:14:44,559
break all this documentation that's out

00:14:42,339 --> 00:14:48,009
there that many people have spent years

00:14:44,559 --> 00:14:51,879
working on when what we can do is fix it

00:14:48,009 --> 00:14:54,759
in our side in our tooling and develop

00:14:51,879 --> 00:14:59,829
svn it has everything now it has the new

00:14:54,759 --> 00:15:02,499
happy so if i mentioned being virgin

00:14:59,829 --> 00:15:05,679
control agnostic so we have all these

00:15:02,499 --> 00:15:08,259
svn repositories we also have the

00:15:05,679 --> 00:15:11,980
equivalent git repositories so we have

00:15:08,259 --> 00:15:14,410
get core that's a mirror of svn core we

00:15:11,980 --> 00:15:16,869
have get develop that's a mirror of svn

00:15:14,410 --> 00:15:19,689
Duvall and for anyone that wants to

00:15:16,869 --> 00:15:21,399
contribute so for the 283 people that

00:15:19,689 --> 00:15:23,829
wanted that contributed code to our most

00:15:21,399 --> 00:15:25,779
recent release thee can use whichever of

00:15:23,829 --> 00:15:28,749
these repositories the feel most

00:15:25,779 --> 00:15:29,710
comfortable using the no svn and don't

00:15:28,749 --> 00:15:32,620
know get

00:15:29,710 --> 00:15:36,190
they can use svn you know get and don't

00:15:32,620 --> 00:15:39,810
know svn use get it doesn't matter use

00:15:36,190 --> 00:15:44,170
what you feel most comfortable using it

00:15:39,810 --> 00:15:45,910
only matters to the 18 people that

00:15:44,170 --> 00:15:47,440
actually have committed code or

00:15:45,910 --> 00:15:51,970
committed code to the most recent

00:15:47,440 --> 00:15:55,300
release so it's about 15 to 1 ratio of

00:15:51,970 --> 00:15:57,820
people that it matters to we only commit

00:15:55,300 --> 00:16:04,060
our code to svn but we create patches

00:15:57,820 --> 00:16:06,790
off of both so after we did that work we

00:16:04,060 --> 00:16:10,690
started focusing on creating more and

00:16:06,790 --> 00:16:14,350
more tooling so first we had to choose a

00:16:10,690 --> 00:16:18,360
task runner and we chose grunt now grunt

00:16:14,350 --> 00:16:23,320
enabled us to easily do many many things

00:16:18,360 --> 00:16:25,240
it enabled us to easily decide that we

00:16:23,320 --> 00:16:28,390
are going to group our tasks based on

00:16:25,240 --> 00:16:30,670
specific activities we also had to

00:16:28,390 --> 00:16:33,490
decide you know why we wanted to use

00:16:30,670 --> 00:16:35,560
grunt and one of the biggest things for

00:16:33,490 --> 00:16:39,150
us is that grunt was already a stable

00:16:35,560 --> 00:16:42,070
and mature product word prices as a

00:16:39,150 --> 00:16:44,350
large project we tend to move slow at

00:16:42,070 --> 00:16:47,350
times we like things that are more

00:16:44,350 --> 00:16:50,230
stable we believe that when we adopt a

00:16:47,350 --> 00:16:53,680
project as a dependency we have to take

00:16:50,230 --> 00:16:56,920
ownership of that projects bugs that if

00:16:53,680 --> 00:16:58,660
someone finds an issue with grunt we

00:16:56,920 --> 00:17:01,810
need to be able to either submit a patch

00:16:58,660 --> 00:17:04,120
upstream or work with the team upstream

00:17:01,810 --> 00:17:06,339
to get the patch so get them to work on

00:17:04,120 --> 00:17:08,770
a patch because at the end of the day

00:17:06,339 --> 00:17:12,610
it's our developers that are experienced

00:17:08,770 --> 00:17:15,400
the pain point and so we liked that it

00:17:12,610 --> 00:17:18,430
was stable we also liked the grunt hit a

00:17:15,400 --> 00:17:20,800
very large community at the time and so

00:17:18,430 --> 00:17:23,709
that meant that there were lots and lots

00:17:20,800 --> 00:17:26,610
of modules pre-built for grunt that we

00:17:23,709 --> 00:17:28,990
could take advantage of from day one

00:17:26,610 --> 00:17:31,090
grunt also have enabled us to very

00:17:28,990 --> 00:17:34,570
easily group our tasks by specific

00:17:31,090 --> 00:17:37,330
actions so we wanted a task that would

00:17:34,570 --> 00:17:40,030
run right before as a pre-commit hook

00:17:37,330 --> 00:17:41,710
essentially and since our committers are

00:17:40,030 --> 00:17:43,610
using svn we don't actually get the

00:17:41,710 --> 00:17:46,490
benefit of client

00:17:43,610 --> 00:17:49,250
side pre-commit hooks but we can have a

00:17:46,490 --> 00:17:51,650
grunt task that grunt pre-commit that

00:17:49,250 --> 00:17:56,480
takes of those tasks and enables them to

00:17:51,650 --> 00:17:58,670
be easily replicated and easily rerun we

00:17:56,480 --> 00:18:01,700
also can create tasks that are specific

00:17:58,670 --> 00:18:03,020
to run on our CI environments and so

00:18:01,700 --> 00:18:08,720
that we can automate that process

00:18:03,020 --> 00:18:11,660
incredibly easy grunt also enabled us to

00:18:08,720 --> 00:18:14,450
very easily build our own tools and

00:18:11,660 --> 00:18:16,490
tools that we wanted to use and so the

00:18:14,450 --> 00:18:20,000
first one that we built is called grunt

00:18:16,490 --> 00:18:24,559
patch WordPress so I mentioned that we

00:18:20,000 --> 00:18:27,500
had four repositories to svn

00:18:24,559 --> 00:18:31,610
repositories to git repositories this

00:18:27,500 --> 00:18:34,490
can create a lot of work when it comes

00:18:31,610 --> 00:18:36,320
to actually applying patches locally so

00:18:34,490 --> 00:18:38,150
being version control agnostic meant

00:18:36,320 --> 00:18:43,280
that we also had to be patched creation

00:18:38,150 --> 00:18:47,059
agnostic and so we had to simplify the

00:18:43,280 --> 00:18:49,220
steps of actually apply a patch what it

00:18:47,059 --> 00:18:51,530
looked like before you had to use W get

00:18:49,220 --> 00:18:53,870
or curl to get your patch you have to

00:18:51,530 --> 00:18:57,710
actually physically inspect it to look

00:18:53,870 --> 00:18:59,600
and see how was this patch created you

00:18:57,710 --> 00:19:01,669
have to try applying the patch and odds

00:18:59,600 --> 00:19:04,850
are you screwed up step two so you had

00:19:01,669 --> 00:19:07,730
to go back and try it again let's

00:19:04,850 --> 00:19:10,370
automate that so now applying a patch is

00:19:07,730 --> 00:19:14,750
as easy as running grunt patch with a

00:19:10,370 --> 00:19:17,660
ticket number this will go on our track

00:19:14,750 --> 00:19:20,320
system get all the patches assigned to

00:19:17,660 --> 00:19:22,790
that ticket and enable you to easily

00:19:20,320 --> 00:19:25,580
choose which one you want to apply

00:19:22,790 --> 00:19:28,820
locally and have it happen for you right

00:19:25,580 --> 00:19:31,280
away so one command for all patch

00:19:28,820 --> 00:19:35,290
application no matter how the patch was

00:19:31,280 --> 00:19:38,150
created off of any of our repositories

00:19:35,290 --> 00:19:41,150
we also built it in such a way that our

00:19:38,150 --> 00:19:43,610
sibling projects could use it so

00:19:41,150 --> 00:19:45,770
WordPress has two main sibling projects

00:19:43,610 --> 00:19:51,110
buddypress a social networking software

00:19:45,770 --> 00:19:52,790
and BB pressed forum software both of

00:19:51,110 --> 00:19:57,140
these immediately were able to take

00:19:52,790 --> 00:20:00,060
advantage and use grunt patch WordPress

00:19:57,140 --> 00:20:02,280
it's also available for any other track

00:20:00,060 --> 00:20:04,560
based projects to use if you're using

00:20:02,280 --> 00:20:08,850
track and want to use it this is on my

00:20:04,560 --> 00:20:12,420
github please grab it use it let me know

00:20:08,850 --> 00:20:14,790
how I can help you use it better what I

00:20:12,420 --> 00:20:16,860
can make what I can change in it in

00:20:14,790 --> 00:20:19,380
order to make it work for your project

00:20:16,860 --> 00:20:21,690
because in the end we don't just want to

00:20:19,380 --> 00:20:25,950
help out our community we want to help

00:20:21,690 --> 00:20:27,810
out every community the next step for

00:20:25,950 --> 00:20:30,600
grunt patch WordPress is actually going

00:20:27,810 --> 00:20:33,300
to be uploading patches by the command

00:20:30,600 --> 00:20:35,730
line so that we can very easily automate

00:20:33,300 --> 00:20:39,600
that process and remove a couple of

00:20:35,730 --> 00:20:42,390
steps it's too having to go onto into

00:20:39,600 --> 00:20:45,840
your browser click upload choose a patch

00:20:42,390 --> 00:20:48,060
that can be way too time-consuming we

00:20:45,840 --> 00:20:49,710
can automate it and that's going to be

00:20:48,060 --> 00:20:54,060
the next step for grunt patch wordpress

00:20:49,710 --> 00:20:55,920
a second tool that we created for our

00:20:54,060 --> 00:21:00,030
use and for the larger web communities

00:20:55,920 --> 00:21:02,790
use is grunt CSS Janice the CSS Janice

00:21:00,030 --> 00:21:06,600
is a project that easily makes

00:21:02,790 --> 00:21:08,190
automating right to left CSS possible so

00:21:06,600 --> 00:21:10,020
if you work on a project that's

00:21:08,190 --> 00:21:11,670
internationalized that you support

00:21:10,020 --> 00:21:14,490
languages that are both left to right

00:21:11,670 --> 00:21:17,460
and right to left you know that it can

00:21:14,490 --> 00:21:19,620
be a hassle to create the CSS for right

00:21:17,460 --> 00:21:22,080
to left and it consists in an easy

00:21:19,620 --> 00:21:24,360
manner you have to adjust the padding's

00:21:22,080 --> 00:21:26,070
and switch them around you know the

00:21:24,360 --> 00:21:27,660
rights become the left the left to

00:21:26,070 --> 00:21:30,930
become the rights the online let's

00:21:27,660 --> 00:21:34,560
become the align rights it's a lot of

00:21:30,930 --> 00:21:37,860
work CSS Janice makes it easy and

00:21:34,560 --> 00:21:40,410
automates that process however it didn't

00:21:37,860 --> 00:21:43,710
have any sort of grunt version it wasn't

00:21:40,410 --> 00:21:45,990
automated in use in our task runner so a

00:21:43,710 --> 00:21:48,570
member of the WordPress core team worked

00:21:45,990 --> 00:21:50,910
on grunt oof eyeing it and contributed

00:21:48,570 --> 00:21:53,970
it back to the community and its imps

00:21:50,910 --> 00:21:59,280
actually been adopted by the CSS janice

00:21:53,970 --> 00:22:02,310
team since doing this we've actually had

00:21:59,280 --> 00:22:05,790
very very few right-to-left specific

00:22:02,310 --> 00:22:08,280
commits in fact we went over 10 months

00:22:05,790 --> 00:22:09,680
without having any commits to our

00:22:08,280 --> 00:22:12,490
repository the

00:22:09,680 --> 00:22:15,830
were fixing a specific right to left but

00:22:12,490 --> 00:22:19,010
CSS Janice took care of everything for

00:22:15,830 --> 00:22:22,580
us all we had to do was test and which

00:22:19,010 --> 00:22:24,380
we were not going to do anyways it

00:22:22,580 --> 00:22:26,930
really lowered the barrier to

00:22:24,380 --> 00:22:30,620
contributing to our project you no

00:22:26,930 --> 00:22:33,140
longer had to ask a developer to ought

00:22:30,620 --> 00:22:36,320
to do both of right to left to right

00:22:33,140 --> 00:22:37,880
version and a right to left version you

00:22:36,320 --> 00:22:40,790
could actually ask them to just do the

00:22:37,880 --> 00:22:45,920
one version and this process would

00:22:40,790 --> 00:22:48,230
automate and for them however CSS Janice

00:22:45,920 --> 00:22:52,640
over the last year is actually proven to

00:22:48,230 --> 00:22:55,400
not be perfect it has somewhat of a

00:22:52,640 --> 00:22:58,550
slower development cycle it's now

00:22:55,400 --> 00:23:00,800
missing some more css3 tools so we're

00:22:58,550 --> 00:23:03,650
actually going to be switching i'll

00:23:00,800 --> 00:23:09,590
likely commit this today to grunt RTL

00:23:03,650 --> 00:23:12,350
CSS it's very similar to land does

00:23:09,590 --> 00:23:14,480
almost the exact same thing except that

00:23:12,350 --> 00:23:17,420
it has a quicker release cycle right now

00:23:14,480 --> 00:23:26,570
and it also has better support for a lot

00:23:17,420 --> 00:23:31,460
of css3 properties we also started a

00:23:26,570 --> 00:23:33,890
process to start using JSN before all of

00:23:31,460 --> 00:23:38,110
our syntax checking for javascript was

00:23:33,890 --> 00:23:41,600
done manually it can be a slow process

00:23:38,110 --> 00:23:44,810
so we began using Jas end it really

00:23:41,600 --> 00:23:47,120
became a team effort in order to update

00:23:44,810 --> 00:23:49,850
all of our JavaScript files in order to

00:23:47,120 --> 00:23:55,370
be compliant with the JSF rules that we

00:23:49,850 --> 00:23:58,880
defined so we decided to tackle it one

00:23:55,370 --> 00:24:02,050
file at a time we created a grunt

00:23:58,880 --> 00:24:05,630
command so we could filter and just run

00:24:02,050 --> 00:24:07,810
j/s hint on that specific file and so

00:24:05,630 --> 00:24:10,610
over a period of about two weeks

00:24:07,810 --> 00:24:13,820
individuals signed up to work on a file

00:24:10,610 --> 00:24:16,520
had about two or three days to work on

00:24:13,820 --> 00:24:19,190
it and submit a patch that got tested

00:24:16,520 --> 00:24:21,710
and got committed and so it only took us

00:24:19,190 --> 00:24:22,700
about two weeks which is relatively fast

00:24:21,710 --> 00:24:26,750
forward press

00:24:22,700 --> 00:24:31,540
to update all of our JavaScript files to

00:24:26,750 --> 00:24:35,030
have the syntax that we want it to have

00:24:31,540 --> 00:24:38,080
so next what about PHP code sniffer to

00:24:35,030 --> 00:24:40,520
do the exact same thing for our PHP code

00:24:38,080 --> 00:24:43,640
well we actually found a problem with

00:24:40,520 --> 00:24:45,230
Jay ascent and it's not a problem with

00:24:43,640 --> 00:24:48,680
the actual project but a problem with

00:24:45,230 --> 00:24:51,920
our workflow and it's that stylistic

00:24:48,680 --> 00:24:56,180
changes pollute the history of the

00:24:51,920 --> 00:24:58,850
project and blame is one of a debuggers

00:24:56,180 --> 00:25:01,700
best friend a good commit message

00:24:58,850 --> 00:25:04,640
doesn't just say what is happening but

00:25:01,700 --> 00:25:08,750
why it's happening why a change is being

00:25:04,640 --> 00:25:10,910
made and having to go back through

00:25:08,750 --> 00:25:13,810
multiple rounds of blame just to find

00:25:10,910 --> 00:25:17,150
out the why code was originally changed

00:25:13,810 --> 00:25:20,870
added work on to our team so we try to

00:25:17,150 --> 00:25:23,750
avoid stylistic changes only and so we

00:25:20,870 --> 00:25:27,440
have a couple of people working on PHP

00:25:23,750 --> 00:25:29,810
code sniffer but only for change sets so

00:25:27,440 --> 00:25:32,000
that the only code that's limited and

00:25:29,810 --> 00:25:35,240
checked by the code sniffer is the code

00:25:32,000 --> 00:25:38,120
that's being changed so over time as we

00:25:35,240 --> 00:25:42,050
work on the various aspects of our code

00:25:38,120 --> 00:25:44,930
base we can fix each piece as it makes

00:25:42,050 --> 00:25:51,560
sense to fix it as a part of updating

00:25:44,930 --> 00:25:54,710
and not as a specific style change we've

00:25:51,560 --> 00:25:57,830
also started using JSP at eight so jaoo

00:25:54,710 --> 00:26:01,400
date is essentially a no-rules limiter

00:25:57,830 --> 00:26:04,310
all it does is make sure that the code

00:26:01,400 --> 00:26:07,040
has the right syntax that the browser's

00:26:04,310 --> 00:26:08,300
want so you don't have trailing commas

00:26:07,040 --> 00:26:12,350
that are going to mess with Internet

00:26:08,300 --> 00:26:15,260
Explorer things like that and we can

00:26:12,350 --> 00:26:18,980
actually run j/s validate on our code

00:26:15,260 --> 00:26:21,890
and cats tech catch any sort of

00:26:18,980 --> 00:26:24,400
minification bugs that crop up so we can

00:26:21,890 --> 00:26:32,150
run it on our compiled code as a

00:26:24,400 --> 00:26:34,250
verification step automatically we want

00:26:32,150 --> 00:26:35,220
it as one of our goals to have more

00:26:34,250 --> 00:26:38,220
testing

00:26:35,220 --> 00:26:41,760
we didn't we had some but we didn't have

00:26:38,220 --> 00:26:44,730
enough so we're already using phpunit

00:26:41,760 --> 00:26:46,200
for our unit tests and for us we decided

00:26:44,730 --> 00:26:49,860
to stick with it at least for the time

00:26:46,200 --> 00:26:55,320
being because it provides all the tools

00:26:49,860 --> 00:26:57,270
that we need by having this one

00:26:55,320 --> 00:27:00,030
repository we were actually able to

00:26:57,270 --> 00:27:02,580
start having our tests and code come in

00:27:00,030 --> 00:27:04,559
the same commit before it became a

00:27:02,580 --> 00:27:07,169
regular habit of tests would be written

00:27:04,559 --> 00:27:09,659
on an open ticket and they would get

00:27:07,169 --> 00:27:11,520
committed to our test repository but

00:27:09,659 --> 00:27:14,070
then it would be skipped our test runner

00:27:11,520 --> 00:27:16,919
would actually check to see if a ticket

00:27:14,070 --> 00:27:19,919
was open and not run the test if the

00:27:16,919 --> 00:27:22,770
ticket that a test was assigned to was

00:27:19,919 --> 00:27:24,990
still open this meant that we had lots

00:27:22,770 --> 00:27:27,990
and lots of tests that were not being

00:27:24,990 --> 00:27:29,730
run on a regular basis and tests that

00:27:27,990 --> 00:27:33,750
aren't being run aren't doing any good

00:27:29,730 --> 00:27:35,370
and so we've started removing those so

00:27:33,750 --> 00:27:38,789
that they can go back in when we have

00:27:35,370 --> 00:27:42,179
code to fix the bugs and can actually

00:27:38,789 --> 00:27:44,100
have look at our test code and have a

00:27:42,179 --> 00:27:46,169
much better sense of what we have

00:27:44,100 --> 00:27:52,890
coverage for and what we're really

00:27:46,169 --> 00:27:56,580
testing in the year before we combined

00:27:52,890 --> 00:28:00,659
our repositories we had 136 new

00:27:56,580 --> 00:28:05,370
assertions avid in the eight months

00:28:00,659 --> 00:28:08,309
after we had 382 so we've more than

00:28:05,370 --> 00:28:13,080
doubled the amount of tests that we are

00:28:08,309 --> 00:28:18,210
adding in a year we're actually getting

00:28:13,080 --> 00:28:22,169
more and more tests in addition to our

00:28:18,210 --> 00:28:24,480
PHP tests we now also have JavaScript

00:28:22,169 --> 00:28:27,840
tests and our first step was picking out

00:28:24,480 --> 00:28:29,789
a framework that we wanted to use and so

00:28:27,840 --> 00:28:32,750
we looked at a couple we looked at mocha

00:28:29,789 --> 00:28:35,610
we looked at qunit we looked at jasmine

00:28:32,750 --> 00:28:39,390
after analyzing them after looking at

00:28:35,610 --> 00:28:42,980
them as both a project and as code we

00:28:39,390 --> 00:28:42,980
decided upon qunit qunit

00:28:43,420 --> 00:28:50,050
is a project of the j-curve is a

00:28:47,260 --> 00:28:53,170
sub-project of jquery so if the jquery

00:28:50,050 --> 00:28:55,480
team uses to test jquery wordpress and

00:28:53,170 --> 00:28:57,400
jquery have a great relationship if you

00:28:55,480 --> 00:29:00,970
don't know all of the jquery websites

00:28:57,400 --> 00:29:02,680
actually run on wordpress and we work

00:29:00,970 --> 00:29:06,220
with their team they work with our team

00:29:02,680 --> 00:29:09,310
until combining and using qnet just made

00:29:06,220 --> 00:29:12,130
a lot of sense for us we also started

00:29:09,310 --> 00:29:17,260
using sign in for insertion dependency

00:29:12,130 --> 00:29:20,230
in javascript unit tests and to tie in

00:29:17,260 --> 00:29:24,760
all of our unit tests we started using

00:29:20,230 --> 00:29:26,410
Travis CI travis has proven incredibly

00:29:24,760 --> 00:29:31,390
beneficial we're catching our bugs

00:29:26,410 --> 00:29:34,600
earlier we still support PHP 52 because

00:29:31,390 --> 00:29:36,580
our users still use PHP 52 and we aren't

00:29:34,600 --> 00:29:41,620
going to abandon our users who have no

00:29:36,580 --> 00:29:45,580
idea what PHP is and so we need a way to

00:29:41,620 --> 00:29:50,320
easily test.php 52 and travis has really

00:29:45,580 --> 00:29:53,950
helped us in this regard it's helped us

00:29:50,320 --> 00:29:56,110
create better patches in addition to

00:29:53,950 --> 00:29:58,390
these tools for better patches we've

00:29:56,110 --> 00:30:01,270
also added a couple of other tools we

00:29:58,390 --> 00:30:04,810
started using editor config and so this

00:30:01,270 --> 00:30:06,850
enables any IDE or text editor that is

00:30:04,810 --> 00:30:10,150
configured to look for an editor config

00:30:06,850 --> 00:30:13,600
file to automatically pick up that we

00:30:10,150 --> 00:30:17,950
want tabs for these files spaces for

00:30:13,600 --> 00:30:22,780
this style file you know for spaces for

00:30:17,950 --> 00:30:27,010
JSON files two spaces for other files

00:30:22,780 --> 00:30:29,890
and we never have to have people

00:30:27,010 --> 00:30:31,750
remember what they want we haven't all

00:30:29,890 --> 00:30:36,220
written down and included in the

00:30:31,750 --> 00:30:38,850
repository we've also tried to really

00:30:36,220 --> 00:30:45,030
make it so that we have happier better

00:30:38,850 --> 00:30:49,150
CSS until about a year ago the core

00:30:45,030 --> 00:30:52,570
admin CSS WordPress file was over 30,000

00:30:49,150 --> 00:30:54,310
lines long contributing to it thus was

00:30:52,570 --> 00:30:56,770
almost impossible for the average

00:30:54,310 --> 00:30:57,309
developer it was not something that the

00:30:56,770 --> 00:30:59,980
kiddies

00:30:57,309 --> 00:31:05,919
the go into and rock no one should ever

00:30:59,980 --> 00:31:08,289
have to read a 30,000 line long file so

00:31:05,919 --> 00:31:10,539
we broke it up and we started using a

00:31:08,289 --> 00:31:12,789
tool called Auto prefix er so that we no

00:31:10,539 --> 00:31:15,610
longer had to manually add in our

00:31:12,789 --> 00:31:18,850
browser prefixes we didn't have to keep

00:31:15,610 --> 00:31:21,909
track of you know what version of Chrome

00:31:18,850 --> 00:31:27,610
did they stop using the dash WebKit

00:31:21,909 --> 00:31:31,600
prefix for the CSS variable we can

00:31:27,610 --> 00:31:33,759
automate that using auto prefix ER we've

00:31:31,600 --> 00:31:37,690
also started taking baby steps into

00:31:33,759 --> 00:31:40,720
using SAS we thought we've talked about

00:31:37,690 --> 00:31:43,659
and had spirited debates over wholesale

00:31:40,720 --> 00:31:48,129
switches to SAS or to another CSS

00:31:43,659 --> 00:31:51,340
preprocessor however just switching for

00:31:48,129 --> 00:31:53,590
us right now wouldn't be enough our CSS

00:31:51,340 --> 00:31:56,740
code is still in pretty bad shape

00:31:53,590 --> 00:31:58,799
despite splitting it up we still very

00:31:56,740 --> 00:32:01,210
long files that not many people

00:31:58,799 --> 00:32:03,490
understand that not many people make

00:32:01,210 --> 00:32:06,249
feel comfortable making changes to and

00:32:03,490 --> 00:32:09,789
so we're using SAS where it makes sense

00:32:06,249 --> 00:32:12,610
to a new features we introduced a new

00:32:09,789 --> 00:32:16,450
color picker for the admin and all of

00:32:12,610 --> 00:32:18,759
that is based on SAS as we work on more

00:32:16,450 --> 00:32:20,889
and more features we may add more more

00:32:18,759 --> 00:32:26,080
sass in the places that it makes the

00:32:20,889 --> 00:32:28,259
most sense our changes for the

00:32:26,080 --> 00:32:31,450
experience though weren't just about

00:32:28,259 --> 00:32:33,360
changes to our code it was really about

00:32:31,450 --> 00:32:36,399
changes to our experience of

00:32:33,360 --> 00:32:38,950
contributing and part of that involves

00:32:36,399 --> 00:32:41,379
our use of track we've started to really

00:32:38,950 --> 00:32:44,769
customize track in order to better fit

00:32:41,379 --> 00:32:47,590
our workflow it's all about us owning

00:32:44,769 --> 00:32:50,200
our experience about the barriers that

00:32:47,590 --> 00:32:52,809
exist to contributing code being the

00:32:50,200 --> 00:32:58,809
ones that we specifically want to exist

00:32:52,809 --> 00:33:01,509
not accidentally there and so now on

00:32:58,809 --> 00:33:03,429
track when a committer comments it's

00:33:01,509 --> 00:33:06,309
noted that there are committer so a new

00:33:03,429 --> 00:33:08,200
person isn't confused you know who's

00:33:06,309 --> 00:33:10,419
this Aaron jourbon guy telling me my

00:33:08,200 --> 00:33:11,049
syntax is wrong and that I'm supposed to

00:33:10,419 --> 00:33:13,450
use tab

00:33:11,049 --> 00:33:15,340
instead of spaces they know I'm a core

00:33:13,450 --> 00:33:19,179
committer and that i can now like on

00:33:15,340 --> 00:33:21,850
there to help them additionally we all

00:33:19,179 --> 00:33:25,480
of our bug gardeners and committers know

00:33:21,850 --> 00:33:27,429
when a person is a new contributor for

00:33:25,480 --> 00:33:30,879
the person's first four tickets that

00:33:27,429 --> 00:33:32,350
they open we have a small note now we

00:33:30,879 --> 00:33:35,169
try to be nice and respectful of

00:33:32,350 --> 00:33:38,529
everyone but allows us to know that you

00:33:35,169 --> 00:33:40,989
know this person is new to the WordPress

00:33:38,529 --> 00:33:43,600
project make sure to say howdy make sure

00:33:40,989 --> 00:33:45,399
to make them feel welcome because if we

00:33:43,600 --> 00:33:48,340
can make them feel welcome for their

00:33:45,399 --> 00:33:50,019
first couple of tickets we hopefully

00:33:48,340 --> 00:33:55,509
they'll come back and contribute more

00:33:50,019 --> 00:33:58,119
and more tickets we've also really have

00:33:55,509 --> 00:34:00,879
our community it drive a lot of this

00:33:58,119 --> 00:34:03,220
it's not just the internal core team

00:34:00,879 --> 00:34:04,779
making the decisions it's us working

00:34:03,220 --> 00:34:07,029
with the broader community and

00:34:04,779 --> 00:34:09,730
contributing back to them and pulling

00:34:07,029 --> 00:34:12,129
our changes up up from that so our

00:34:09,730 --> 00:34:15,579
sibling projects all drive each other as

00:34:12,129 --> 00:34:18,520
one of committee on a sibling project

00:34:15,579 --> 00:34:21,369
figures out an issue with a build tool

00:34:18,520 --> 00:34:23,319
the reported to the other projects and

00:34:21,369 --> 00:34:26,079
so we're all working together on a

00:34:23,319 --> 00:34:31,119
regular basis to improve our build tools

00:34:26,079 --> 00:34:35,290
to improve our test tools we also have

00:34:31,119 --> 00:34:38,049
sibling project called WP CLI which is a

00:34:35,290 --> 00:34:40,510
command line wordpress if you've ever

00:34:38,049 --> 00:34:45,609
used trush for drupal it's pretty much

00:34:40,510 --> 00:34:48,220
the same thing and we include some

00:34:45,609 --> 00:34:52,530
configuration in our core repository to

00:34:48,220 --> 00:34:55,809
make the use of WP CLI even easier our

00:34:52,530 --> 00:34:58,240
community has also built tools such as

00:34:55,809 --> 00:35:01,150
varying vagrant vagrants it's a vagrant

00:34:58,240 --> 00:35:03,130
setup for WordPress that's designed to

00:35:01,150 --> 00:35:07,809
make it simple and easy to develop

00:35:03,130 --> 00:35:09,940
WordPress sites and when we made the

00:35:07,809 --> 00:35:13,299
switch to the new develop repository

00:35:09,940 --> 00:35:15,730
that same day members of our core team

00:35:13,299 --> 00:35:18,010
were submitting pull requests to varying

00:35:15,730 --> 00:35:21,190
vagrant vagrants in order to make them

00:35:18,010 --> 00:35:23,360
available in that project and make all

00:35:21,190 --> 00:35:29,240
of the build and test tools right

00:35:23,360 --> 00:35:31,580
unusable by the community varying

00:35:29,240 --> 00:35:34,190
vagrant vagrants also has its own tools

00:35:31,580 --> 00:35:36,290
and community building tools for it

00:35:34,190 --> 00:35:38,120
we've built a tool called variable

00:35:36,290 --> 00:35:42,500
varying vagrant vagrants which is

00:35:38,120 --> 00:35:45,700
entirely too many V's and it makes it

00:35:42,500 --> 00:35:48,710
easy to set up new sites in vagrant

00:35:45,700 --> 00:35:50,840
other projects include salty WordPress

00:35:48,710 --> 00:35:55,940
which is very similar except it uses

00:35:50,840 --> 00:36:00,100
solved as its configuration and VCC w

00:35:55,940 --> 00:36:00,100
which uses chef for its configuration

00:36:01,420 --> 00:36:08,210
all this work unbilled and test2 lyst

00:36:05,780 --> 00:36:10,580
has taught us so incredibly important

00:36:08,210 --> 00:36:12,890
lessons that you can take back to your

00:36:10,580 --> 00:36:16,880
projects and that if we are doing this

00:36:12,890 --> 00:36:20,480
again we would have learned from the

00:36:16,880 --> 00:36:24,140
first is this incredibly important to

00:36:20,480 --> 00:36:27,680
have goals to set goals early when

00:36:24,140 --> 00:36:30,020
working on a project by us deciding on

00:36:27,680 --> 00:36:32,990
the fact that we wanted to make sure

00:36:30,020 --> 00:36:34,400
that we by adding our test tools we

00:36:32,990 --> 00:36:36,740
didn't raise the barrier to

00:36:34,400 --> 00:36:39,620
contributions that we in fact we're

00:36:36,740 --> 00:36:42,410
lowering it every decision that we make

00:36:39,620 --> 00:36:45,470
along the process can be focused on that

00:36:42,410 --> 00:36:50,630
goal and on what we can do to achieve

00:36:45,470 --> 00:36:55,310
that goal we didn't want to create any

00:36:50,630 --> 00:36:57,050
new headaches and any new projects we

00:36:55,310 --> 00:37:00,500
had one repository that people were

00:36:57,050 --> 00:37:03,530
creating patches out of now we have for

00:37:00,500 --> 00:37:05,720
this easily could have introduced a

00:37:03,530 --> 00:37:08,600
million headaches and for a little while

00:37:05,720 --> 00:37:12,370
it did until we created grunt patch

00:37:08,600 --> 00:37:16,700
WordPress to solve it instead of having

00:37:12,370 --> 00:37:19,340
problems become roadblocks we allowed a

00:37:16,700 --> 00:37:23,290
problem to become a challenge and

00:37:19,340 --> 00:37:27,170
allowed us to improve a process that

00:37:23,290 --> 00:37:29,180
even before had been multiple steps even

00:37:27,170 --> 00:37:31,760
when we had one repository you still had

00:37:29,180 --> 00:37:33,470
to get the patch and you still had to

00:37:31,760 --> 00:37:36,020
apply the patch and yes you didn't have

00:37:33,470 --> 00:37:39,320
to remember if it was

00:37:36,020 --> 00:37:41,930
level 1 or patch level 0 and you didn't

00:37:39,320 --> 00:37:46,190
have to know if it was a get based or

00:37:41,930 --> 00:37:48,980
svn base you still had to get it and

00:37:46,190 --> 00:37:56,930
apply it that's two steps now it's one

00:37:48,980 --> 00:38:02,300
and so it's simple simpler it's

00:37:56,930 --> 00:38:05,540
important to learn from yourself if you

00:38:02,300 --> 00:38:08,240
are so low developer on a project you

00:38:05,540 --> 00:38:11,060
might think well this experience works

00:38:08,240 --> 00:38:14,060
for me but you have to ask yourself does

00:38:11,060 --> 00:38:16,400
it really work for you take a look at

00:38:14,060 --> 00:38:18,950
your bash history how many times are you

00:38:16,400 --> 00:38:22,570
repeating the same command over and over

00:38:18,950 --> 00:38:26,210
again that you're doing three steps in

00:38:22,570 --> 00:38:29,420
sequence every day multiple times a day

00:38:26,210 --> 00:38:32,210
if you're doing that you should automate

00:38:29,420 --> 00:38:34,940
it you should not have to do three steps

00:38:32,210 --> 00:38:38,930
in a row to complete a task you should

00:38:34,940 --> 00:38:41,570
be able to do just one so learn from

00:38:38,930 --> 00:38:43,730
yourself if you're a larger project ask

00:38:41,570 --> 00:38:45,920
all of your contributors what are the

00:38:43,730 --> 00:38:49,850
steps that you're taking every day ask

00:38:45,920 --> 00:38:52,610
yourself how are we getting code from

00:38:49,850 --> 00:38:55,640
our repository onto our server is it one

00:38:52,610 --> 00:38:58,370
step if it's not one step how can we

00:38:55,640 --> 00:39:01,370
make it one step how can we simplify it

00:38:58,370 --> 00:39:03,590
are there roadblocks that we don't want

00:39:01,370 --> 00:39:07,280
that are there and we can eliminate

00:39:03,590 --> 00:39:10,430
those roadblocks I'm a big fan of on my

00:39:07,280 --> 00:39:13,700
personal projects of having theme days I

00:39:10,430 --> 00:39:15,530
have metrics Monday every Monday I try

00:39:13,700 --> 00:39:18,650
to focus on my personal projects of

00:39:15,530 --> 00:39:21,230
adding in new metrics or of figure out a

00:39:18,650 --> 00:39:24,440
new way to analyze my metrics I've

00:39:21,230 --> 00:39:28,280
tooling Tuesday every Tuesday I focus on

00:39:24,440 --> 00:39:30,530
my tools on ways not on writing new

00:39:28,280 --> 00:39:34,940
features but I'm making it easier to

00:39:30,530 --> 00:39:37,640
have new features having these themes

00:39:34,940 --> 00:39:42,260
make it easy to always focus on

00:39:37,640 --> 00:39:44,630
improving things in addition to learning

00:39:42,260 --> 00:39:47,420
from ourselves you have to support the

00:39:44,630 --> 00:39:49,190
community that your project has even if

00:39:47,420 --> 00:39:49,960
you are a company with three developers

00:39:49,190 --> 00:39:52,599
with

00:39:49,960 --> 00:39:55,089
I've developers on a project your team

00:39:52,599 --> 00:39:57,849
is your community and you need to

00:39:55,089 --> 00:40:00,940
support them you also need to support

00:39:57,849 --> 00:40:03,430
the larger community open source or

00:40:00,940 --> 00:40:06,820
tools as you create them write a blog

00:40:03,430 --> 00:40:09,190
post right give a speech about the tools

00:40:06,820 --> 00:40:11,740
that you use this can be a five-minute

00:40:09,190 --> 00:40:15,220
lightning talk to your local user group

00:40:11,740 --> 00:40:17,230
but by sharing your these ideas you're

00:40:15,220 --> 00:40:21,160
going to help every other developer

00:40:17,230 --> 00:40:23,619
learn about build tools and about ways

00:40:21,160 --> 00:40:28,330
to improve their experience as

00:40:23,619 --> 00:40:32,339
developers finally you have to remember

00:40:28,330 --> 00:40:35,500
that you own your dependencies bugs if

00:40:32,339 --> 00:40:38,619
there is a bug in a project that your

00:40:35,500 --> 00:40:41,080
project uses it's your projects bug

00:40:38,619 --> 00:40:43,869
until it's fixed whether you create a

00:40:41,080 --> 00:40:46,570
workaround whether you create a patch

00:40:43,869 --> 00:40:49,570
upstream whether you adopt it and fork

00:40:46,570 --> 00:40:53,440
it temporarily or permanently it's your

00:40:49,570 --> 00:40:57,760
bug until it's fixed a user doesn't care

00:40:53,440 --> 00:41:00,099
that oh this bug is in jQuery they don't

00:40:57,760 --> 00:41:03,310
know what jQuery is they just know that

00:41:00,099 --> 00:41:05,890
your site has a bug so you have to own

00:41:03,310 --> 00:41:09,280
those bugs and you have to not blame

00:41:05,890 --> 00:41:14,349
other projects for problems but fix them

00:41:09,280 --> 00:41:16,359
in your own my name is Aaron jourbon I'm

00:41:14,349 --> 00:41:19,180
technical architect at Conde Nast in a

00:41:16,359 --> 00:41:21,490
word press Corp committer I blog at

00:41:19,180 --> 00:41:24,810
Aaron jordan and i'm on twitter at aaron

00:41:21,490 --> 00:41:24,810
jourbon thank you

00:41:31,050 --> 00:41:45,940
can I answer any questions wait for the

00:41:36,100 --> 00:41:49,030
mic thumbs way hi I'm Paul sir can I

00:41:45,940 --> 00:41:52,150
actually submit okay pull request to

00:41:49,030 --> 00:41:56,050
court to fix a patch or I still have to

00:41:52,150 --> 00:41:59,470
convert it to svn patch you can submit a

00:41:56,050 --> 00:42:02,140
git diff so use the git diff command and

00:41:59,470 --> 00:42:04,630
pipe it to a file we're not taking pull

00:42:02,140 --> 00:42:08,230
requests on github quite yet we actually

00:42:04,630 --> 00:42:10,480
have a team working on that though we

00:42:08,230 --> 00:42:12,730
want to be able to in addition to being

00:42:10,480 --> 00:42:14,260
virgin control agnostic actually become

00:42:12,730 --> 00:42:16,780
even more agnostic about where our

00:42:14,260 --> 00:42:19,030
contributions are coming from but from

00:42:16,780 --> 00:42:23,230
now you can use git diff pipe that into

00:42:19,030 --> 00:42:25,560
a file and upload that to track ok

00:42:23,230 --> 00:42:25,560
thanks

00:42:31,430 --> 00:42:42,500
are there any other question yeah hi

00:42:39,740 --> 00:42:45,109
I've committed stuff in the past and had

00:42:42,500 --> 00:42:47,050
very rude responses a lot of people how

00:42:45,109 --> 00:42:49,700
do you deal with community like that I'm

00:42:47,050 --> 00:42:52,250
very sorry to hear that first off um

00:42:49,700 --> 00:42:54,770
it's really put me off doing it yeah i

00:42:52,250 --> 00:42:57,319
definitely understand and incredibly

00:42:54,770 --> 00:42:59,089
sorry that you had that experience we do

00:42:57,319 --> 00:43:01,339
try to talk to many of our community

00:42:59,089 --> 00:43:03,200
members and actually try to when we have

00:43:01,339 --> 00:43:08,059
poisonous people work with them to make

00:43:03,200 --> 00:43:10,220
them less poisonous we very rarely ask

00:43:08,059 --> 00:43:13,220
people to leave the community but it has

00:43:10,220 --> 00:43:15,800
happened in the past that especially

00:43:13,220 --> 00:43:18,260
rude people have been asked to you know

00:43:15,800 --> 00:43:22,280
stop contributing and to stop you know

00:43:18,260 --> 00:43:24,859
being on our bug tracker pressing people

00:43:22,280 --> 00:43:31,460
and this has included people of all

00:43:24,859 --> 00:43:33,650
levels of contributions we actually we

00:43:31,460 --> 00:43:36,410
as a project we do try to work very much

00:43:33,650 --> 00:43:38,510
internally on our issues we know that

00:43:36,410 --> 00:43:40,069
we're not a perfect project if WordPress

00:43:38,510 --> 00:43:42,140
was perfect i probably wouldn't want to

00:43:40,069 --> 00:43:43,880
work on it as much the fact that there

00:43:42,140 --> 00:43:47,540
are a lot of challenges makes it a

00:43:43,880 --> 00:43:51,049
little more exciting in october we

00:43:47,540 --> 00:43:53,569
actually had a community summit and one

00:43:51,049 --> 00:43:56,299
of the topics that we discussed was how

00:43:53,569 --> 00:43:58,880
do we deal with poisonous people and

00:43:56,299 --> 00:44:01,880
that led to a very spirited discussion

00:43:58,880 --> 00:44:05,059
about how do we make sure that that

00:44:01,880 --> 00:44:07,730
doesn't happen we also had a discussion

00:44:05,059 --> 00:44:10,910
about the overall contributor process

00:44:07,730 --> 00:44:12,890
and what we can do to both speed things

00:44:10,910 --> 00:44:14,780
up so that patches get reviewed and

00:44:12,890 --> 00:44:17,119
committed quicker but also so that

00:44:14,780 --> 00:44:20,000
people get better feedback quality

00:44:17,119 --> 00:44:22,730
feedback quicker earlier and that no one

00:44:20,000 --> 00:44:24,710
has a poor experience if you do have any

00:44:22,730 --> 00:44:26,780
patches at withstanding that you want

00:44:24,710 --> 00:44:28,690
someone take a look at it I'd love to

00:44:26,780 --> 00:44:32,480
take a look and you know try to help

00:44:28,690 --> 00:44:34,280
your changes get in ok ok apelin Switzer

00:44:32,480 --> 00:44:37,059
hit me up on Twitter or grab me after

00:44:34,280 --> 00:44:37,059
this cool

00:44:43,800 --> 00:44:48,190
WordPress is in a state where you're

00:44:46,630 --> 00:44:50,980
trying to transition between everything

00:44:48,190 --> 00:44:53,140
from SAS and it's kind of like you've

00:44:50,980 --> 00:44:55,930
half done it for everything why don't

00:44:53,140 --> 00:44:57,910
you just kind of and also php5 to you're

00:44:55,930 --> 00:45:00,160
still supporting right why don't you

00:44:57,910 --> 00:45:02,319
guys just say all right we're going to

00:45:00,160 --> 00:45:04,180
stop we're going to make a new version

00:45:02,319 --> 00:45:06,069
we're not going to sport backwards

00:45:04,180 --> 00:45:08,500
everything is going to transition to SAS

00:45:06,069 --> 00:45:09,910
and whatever why don't you do that like

00:45:08,500 --> 00:45:11,470
because it feels like I would like that

00:45:09,910 --> 00:45:17,260
because I can use all my new tools from

00:45:11,470 --> 00:45:18,670
PHP 56 57 is called out so first off you

00:45:17,260 --> 00:45:22,300
can use anything you want in your

00:45:18,670 --> 00:45:25,540
personal projects your WordPress theme

00:45:22,300 --> 00:45:28,990
or board pres plugins can use PHP 56

00:45:25,540 --> 00:45:34,089
WordPress runs perfectly well in PHP 56

00:45:28,990 --> 00:45:35,800
it runs well in HH vm i just because we

00:45:34,089 --> 00:45:38,470
support old versions doesn't mean we

00:45:35,800 --> 00:45:40,720
also don't support newer versions a lot

00:45:38,470 --> 00:45:42,579
of it comes down to one of the biggest

00:45:40,720 --> 00:45:44,890
reasons we've been as successful as we

00:45:42,579 --> 00:45:47,589
are is it we don't break backwards

00:45:44,890 --> 00:45:49,930
compatibility without very specific

00:45:47,589 --> 00:45:53,200
intent to break backwards compatibility

00:45:49,930 --> 00:45:55,420
we it's rare that we break backwards

00:45:53,200 --> 00:45:58,359
compatibility for anything that could be

00:45:55,420 --> 00:46:00,550
considered major or core to WordPress

00:45:58,359 --> 00:46:03,160
and a lot of times when we do we

00:46:00,550 --> 00:46:04,810
actually go through all of our themes

00:46:03,160 --> 00:46:07,740
and all of our plugins that are in the

00:46:04,810 --> 00:46:10,150
WordPress repositories and check them

00:46:07,740 --> 00:46:12,730
the biggest reason though why we don't

00:46:10,150 --> 00:46:14,200
just you know say all right at the end

00:46:12,730 --> 00:46:15,670
of this release we're going to start a

00:46:14,200 --> 00:46:18,400
new one is that it would stop the

00:46:15,670 --> 00:46:22,210
release cycle if you look at you know

00:46:18,400 --> 00:46:25,780
drupal 7 vs drupal 8 how many years is

00:46:22,210 --> 00:46:28,119
Drupal 8 been in development we like to

00:46:25,780 --> 00:46:31,000
release often we don't think that it's

00:46:28,119 --> 00:46:33,460
better to you know hold off a release

00:46:31,000 --> 00:46:39,000
just to do something new do something

00:46:33,460 --> 00:46:41,619
nice during the go php5 initiative

00:46:39,000 --> 00:46:44,349
drupal joined on the bandwagon very

00:46:41,619 --> 00:46:47,410
early and said that they were going to

00:46:44,349 --> 00:46:49,359
go to PHP 5 with their next major virgin

00:46:47,410 --> 00:46:51,940
WordPress we didn't jump on the

00:46:49,359 --> 00:46:52,210
bandwagon right away what we decided is

00:46:51,940 --> 00:46:55,030
that

00:46:52,210 --> 00:46:58,210
we weren't going to go to php5 until

00:46:55,030 --> 00:47:01,240
enough of our user base was on PHP 5 we

00:46:58,210 --> 00:47:04,000
didn't want to abandon our users most

00:47:01,240 --> 00:47:06,880
users of WordPress have no idea what PHP

00:47:04,000 --> 00:47:10,690
is let alone what version of PHP they

00:47:06,880 --> 00:47:12,880
are running and so we waited we worked

00:47:10,690 --> 00:47:16,570
with the hosts instead that actually had

00:47:12,880 --> 00:47:21,040
control of it and got them to upgrade or

00:47:16,570 --> 00:47:23,619
upgrade the PHP version and so at the

00:47:21,040 --> 00:47:25,089
end of the day the versions of word

00:47:23,619 --> 00:47:28,060
press in the versions of Drupal that

00:47:25,089 --> 00:47:31,300
supported the PHP 52 is a minimum

00:47:28,060 --> 00:47:33,730
version actually came out nearly within

00:47:31,300 --> 00:47:36,640
about three months of each other and so

00:47:33,730 --> 00:47:39,310
we would much rather release often and

00:47:36,640 --> 00:47:42,520
iterate and improve over time then do a

00:47:39,310 --> 00:47:51,750
whole scale rewrite that causes releases

00:47:42,520 --> 00:47:51,750
to stop anymore

00:47:53,400 --> 00:47:56,690

YouTube URL: https://www.youtube.com/watch?v=8CyeaQzwn-A


