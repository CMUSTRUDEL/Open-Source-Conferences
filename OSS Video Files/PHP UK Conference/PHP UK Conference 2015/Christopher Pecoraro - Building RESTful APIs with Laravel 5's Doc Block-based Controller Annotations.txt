Title: Christopher Pecoraro - Building RESTful APIs with Laravel 5's Doc Block-based Controller Annotations
Publication date: 2015-04-02
Playlist: PHP UK Conference 2015
Description: 
	Handling RESTful API requests with Laravel PHP Framework resource controllers is already a cinch. With the arrival of Laravel 5, handling request routing has been made even easier by using a configuration-as-annotation approach. Controller annotations may take advantage of doc block-style syntax and then be compiled using Laravel's artisan command-line tool. I'll present this approach by providing a few examples and discussing some of the pros and cons.

http://goo.gl/Hqjfhi
Captions: 
	00:00:05,380 --> 00:00:10,920
so today I'm going to concentrate on

00:00:07,560 --> 00:00:16,780
using the doclock controller annotation

00:00:10,920 --> 00:00:18,670
method in laravel 5 so a little bit

00:00:16,780 --> 00:00:21,340
about me I'm from Pittsburgh

00:00:18,670 --> 00:00:23,920
Pennsylvania in the United States and

00:00:21,340 --> 00:00:28,119
about six years ago I moved to Italy

00:00:23,920 --> 00:00:32,050
with my wife yes this is my house

00:00:28,119 --> 00:00:36,370
somewhere in this slide so be jealous

00:00:32,050 --> 00:00:41,920
and this is my life I do eat a lot of

00:00:36,370 --> 00:00:43,600
gelato and no actually for the last 30

00:00:41,920 --> 00:00:46,090
years of my life I've been basically in

00:00:43,600 --> 00:00:47,680
front of a computer and in the last few

00:00:46,090 --> 00:00:51,460
years I've been learning how to speak

00:00:47,680 --> 00:00:54,309
with my hands I work for a company

00:00:51,460 --> 00:00:59,500
called mosaic own and they are metal

00:00:54,309 --> 00:01:02,920
izing people's brands I've used PHP for

00:00:59,500 --> 00:01:05,500
almost 15 years now I founded the local

00:01:02,920 --> 00:01:06,850
PHP user group and I'm working on a book

00:01:05,500 --> 00:01:10,930
for pact called

00:01:06,850 --> 00:01:13,450
mastering laravel 5 ok so if we're going

00:01:10,930 --> 00:01:16,030
to talk about annotate doclock

00:01:13,450 --> 00:01:18,430
annotations I thought to myself let's

00:01:16,030 --> 00:01:21,850
break this problem down into atomic

00:01:18,430 --> 00:01:25,000
pieces and when I want to know something

00:01:21,850 --> 00:01:27,460
I go to Wikipedia and Wikipedia says in

00:01:25,000 --> 00:01:29,500
many many many more words but summarized

00:01:27,460 --> 00:01:34,290
here that an annotation is metadata

00:01:29,500 --> 00:01:38,799
attached to text an image or other data

00:01:34,290 --> 00:01:43,659
so it's metadata attached to data so

00:01:38,799 --> 00:01:45,009
what is metadata so metadata is a cool

00:01:43,659 --> 00:01:46,990
word because it's half Greek and half

00:01:45,009 --> 00:01:50,140
Latin and we see that meta means

00:01:46,990 --> 00:01:52,630
transcending or encompassing but I like

00:01:50,140 --> 00:01:55,240
to think of it as extending or enriching

00:01:52,630 --> 00:01:56,259
so it's something that adds value to

00:01:55,240 --> 00:01:58,420
something else

00:01:56,259 --> 00:02:01,680
and everybody who knows what data is I

00:01:58,420 --> 00:02:05,049
hope so

00:02:01,680 --> 00:02:07,810
annotations in the real world go back a

00:02:05,049 --> 00:02:12,360
long time so in 1200 we see the

00:02:07,810 --> 00:02:15,220
amanuensis wrote notes in the margin of

00:02:12,360 --> 00:02:19,090
the pages and I don't know why there's

00:02:15,220 --> 00:02:22,209
this face here but my college

00:02:19,090 --> 00:02:25,989
was run by Benedictine monks so I've run

00:02:22,209 --> 00:02:28,780
into a lot of these in my life okay

00:02:25,989 --> 00:02:31,870
let's talk about dock block annotations

00:02:28,780 --> 00:02:35,430
let's go to dark block well doc block is

00:02:31,870 --> 00:02:38,410
a convention where we write a comment

00:02:35,430 --> 00:02:40,750
but we do it in a very specific way and

00:02:38,410 --> 00:02:44,440
here we do front slash asterisk asterisk

00:02:40,750 --> 00:02:46,690
and this tells in this case Java that

00:02:44,440 --> 00:02:52,900
there's something interesting inside of

00:02:46,690 --> 00:02:55,630
there an annotation is something that

00:02:52,900 --> 00:02:59,560
affects in some way the execution of the

00:02:55,630 --> 00:03:03,970
program and annotations landed in Java

00:02:59,560 --> 00:03:08,170
in version 1.6 and we see here that we

00:03:03,970 --> 00:03:11,410
are telling Java that the speak method

00:03:08,170 --> 00:03:15,730
for cat which extends animal overrides

00:03:11,410 --> 00:03:16,690
the speak method of animal because the

00:03:15,730 --> 00:03:19,239
cat says meow

00:03:16,690 --> 00:03:21,040
simple enough let's look at doc block

00:03:19,239 --> 00:03:23,530
annotations so putting the two together

00:03:21,040 --> 00:03:25,420
we have our dark block and we have our

00:03:23,530 --> 00:03:28,569
annotation and this example from bhai

00:03:25,420 --> 00:03:32,859
tells us that this method preparer needs

00:03:28,569 --> 00:03:35,010
to be executed before everything else

00:03:32,859 --> 00:03:38,950
the sweet

00:03:35,010 --> 00:03:42,760
okay so annotations in PHP are all over

00:03:38,950 --> 00:03:48,220
the place in Zen and symphony and typo3

00:03:42,760 --> 00:03:52,180
in terms of frameworks and in TDD and

00:03:48,220 --> 00:03:55,139
BDD there in behat and PHP unit which is

00:03:52,180 --> 00:03:58,720
where I first discovered the concept and

00:03:55,139 --> 00:04:03,000
in an ORM such as doctrine it's used in

00:03:58,720 --> 00:04:07,389
helping with helping define relations ok

00:04:03,000 --> 00:04:09,700
so if you want a much more detailed talk

00:04:07,389 --> 00:04:12,970
about annotations I suggest a Raphael

00:04:09,700 --> 00:04:14,380
Dom's talk and he talks a very in a very

00:04:12,970 --> 00:04:18,160
detailed way about the history of

00:04:14,380 --> 00:04:20,829
annotations in PHP and how they work ok

00:04:18,160 --> 00:04:23,410
so we have the documentation concept

00:04:20,829 --> 00:04:25,300
let's go on to laravel so laravel in

00:04:23,410 --> 00:04:29,229
case you have been living in a cave for

00:04:25,300 --> 00:04:30,650
the last year or two was a new framework

00:04:29,229 --> 00:04:33,139
created by tail

00:04:30,650 --> 00:04:36,229
well and tailor art well came from the

00:04:33,139 --> 00:04:39,860
dotnet world and he was looking for a

00:04:36,229 --> 00:04:43,010
cheap way to write some web applications

00:04:39,860 --> 00:04:47,030
and he knew that PHP was Oba quittez and

00:04:43,010 --> 00:04:48,680
all over the web servers so he started

00:04:47,030 --> 00:04:50,600
using CodeIgniter

00:04:48,680 --> 00:04:53,330
but coming from the dotnet world and

00:04:50,600 --> 00:04:55,940
things like c-sharp he maybe was used to

00:04:53,330 --> 00:04:58,729
more complicated and more advanced

00:04:55,940 --> 00:05:01,250
patterns so he turned the

00:04:58,729 --> 00:05:04,550
codeigniter extension into laravel and

00:05:01,250 --> 00:05:10,160
versions 1 and 2 came out rather quickly

00:05:04,550 --> 00:05:12,830
and from version 3 on that's when we see

00:05:10,160 --> 00:05:15,470
the most well-known version of laravel

00:05:12,830 --> 00:05:19,340
that the community really adopted very

00:05:15,470 --> 00:05:23,360
well I started using laravel shortly

00:05:19,340 --> 00:05:25,639
before version 4 came out and the

00:05:23,360 --> 00:05:27,500
releases of laravel were aligned with

00:05:25,639 --> 00:05:31,070
the symphony releases since laravel

00:05:27,500 --> 00:05:33,590
users heavily many symphony packages so

00:05:31,070 --> 00:05:36,650
for example when the symphony release

00:05:33,590 --> 00:05:40,599
came out in April in October the laravel

00:05:36,650 --> 00:05:43,849
release came out in May in November so

00:05:40,599 --> 00:05:47,270
things were getting ready to release

00:05:43,849 --> 00:05:50,599
version 4.3 of laravel and there were

00:05:47,270 --> 00:05:54,880
many changes being made so the community

00:05:50,599 --> 00:05:58,820
decided that it should be called laravel

00:05:54,880 --> 00:06:01,250
5.0 and so laravel came out just a few

00:05:58,820 --> 00:06:08,680
weeks ago and introduced a lot of new

00:06:01,250 --> 00:06:11,599
ideas and of course now with this famous

00:06:08,680 --> 00:06:12,919
screenshot taken from Google Trends we

00:06:11,599 --> 00:06:15,440
see that there's no denying that the

00:06:12,919 --> 00:06:19,099
interest in laravel continues to be very

00:06:15,440 --> 00:06:25,810
high the adopt the adoption and use

00:06:19,099 --> 00:06:30,080
though we have to ask Taylor okay so in

00:06:25,810 --> 00:06:32,210
version 4 and 4 to 4 point 2 of laravel

00:06:30,080 --> 00:06:36,229
everything was inside the app directory

00:06:32,210 --> 00:06:38,810
and this reminds us of CodeIgniter or a

00:06:36,229 --> 00:06:40,880
similar framework where we have an MVC

00:06:38,810 --> 00:06:43,640
pattern where we have the models the

00:06:40,880 --> 00:06:44,270
controller and the models of controllers

00:06:43,640 --> 00:06:48,340
and the

00:06:44,270 --> 00:06:52,490
views all inside of the app directory so

00:06:48,340 --> 00:06:55,610
for laravel version 5 the app directory

00:06:52,490 --> 00:06:58,870
has gone on a diet and some things like

00:06:55,610 --> 00:07:02,600
storage for example all of the logs and

00:06:58,870 --> 00:07:05,960
tests which are not considered part of

00:07:02,600 --> 00:07:08,540
the app were pulled out to help to help

00:07:05,960 --> 00:07:10,730
thin down the app directory so that

00:07:08,540 --> 00:07:13,610
inside app could only be the essential

00:07:10,730 --> 00:07:17,480
parts of the application two notable

00:07:13,610 --> 00:07:23,030
additions are one the PHP spec yamo file

00:07:17,480 --> 00:07:25,160
and PHP spec is also a dependency so we

00:07:23,030 --> 00:07:30,820
can use it right out of the box and also

00:07:25,160 --> 00:07:32,990
the ability to use gulp the controller's

00:07:30,820 --> 00:07:36,320
directory has been moved inside of an

00:07:32,990 --> 00:07:41,410
HTTP directory along with routes PHP and

00:07:36,320 --> 00:07:44,870
this allows us to focus in terms of the

00:07:41,410 --> 00:07:47,210
restful aspect our attention to only

00:07:44,870 --> 00:07:52,370
that directory and keeps everything nice

00:07:47,210 --> 00:07:54,620
and cleaned and organized so why would

00:07:52,370 --> 00:07:58,070
we want to do why would we want to use

00:07:54,620 --> 00:08:00,680
annotations for routes well when I first

00:07:58,070 --> 00:08:02,630
started developing laravel every time I

00:08:00,680 --> 00:08:05,540
needed a route I just threw the route in

00:08:02,630 --> 00:08:09,140
my routes file so I had Rock controllers

00:08:05,540 --> 00:08:12,080
and get and post and some put and delete

00:08:09,140 --> 00:08:14,630
and that file as you can see gets to be

00:08:12,080 --> 00:08:15,620
very very very very very long and when

00:08:14,630 --> 00:08:18,080
you have three or four developers

00:08:15,620 --> 00:08:20,660
working together it can become

00:08:18,080 --> 00:08:23,390
unmanageable I think so

00:08:20,660 --> 00:08:26,240
I asked Taylor odd well I said so tell

00:08:23,390 --> 00:08:29,240
me the history of route annotations so I

00:08:26,240 --> 00:08:31,190
don't get it wrong and he said it was an

00:08:29,240 --> 00:08:35,750
experiment in framework agnostic

00:08:31,190 --> 00:08:37,340
controllers and so since laravel belongs

00:08:35,750 --> 00:08:39,350
to the to the fig to the framework

00:08:37,340 --> 00:08:42,080
interoperability group obviously they

00:08:39,350 --> 00:08:43,460
would like that you can use laravel but

00:08:42,080 --> 00:08:44,840
of course that you can also continue to

00:08:43,460 --> 00:08:49,220
use other frameworks and not have

00:08:44,840 --> 00:08:54,560
framework locking so this this makes the

00:08:49,220 --> 00:08:57,950
controller more portable but as many

00:08:54,560 --> 00:08:58,400
experiments go sometimes the results are

00:08:57,950 --> 00:09:01,250
not

00:08:58,400 --> 00:09:05,210
what we thought they should be so about

00:09:01,250 --> 00:09:08,780
six weeks ago after much discussion in

00:09:05,210 --> 00:09:14,650
the community this feature was taken out

00:09:08,780 --> 00:09:18,730
of laravel and so my heart broke but

00:09:14,650 --> 00:09:22,820
there's a good ending to the story so

00:09:18,730 --> 00:09:24,530
for developers among there is also a

00:09:22,820 --> 00:09:25,490
Kayla daniels who has been doing a lot

00:09:24,530 --> 00:09:28,610
of interesting things in the community

00:09:25,490 --> 00:09:31,040
they have decided to form a group called

00:09:28,610 --> 00:09:33,890
the laravel collective and basically

00:09:31,040 --> 00:09:37,700
adopt all of these packages which have

00:09:33,890 --> 00:09:41,000
been pulled out of laravel so whether we

00:09:37,700 --> 00:09:44,330
call them removed or deprecated one

00:09:41,000 --> 00:09:47,960
thing is for sure laravel wants to stay

00:09:44,330 --> 00:09:49,970
light and so as Rasmus Laird Dorf said

00:09:47,960 --> 00:09:51,590
the thing I don't like about a framework

00:09:49,970 --> 00:09:53,660
is that every time I boot the framework

00:09:51,590 --> 00:09:56,810
I need to ask am I connected to the Past

00:09:53,660 --> 00:09:58,430
grass or my sequel so anything we can

00:09:56,810 --> 00:10:02,510
take out of the framework to lighten it

00:09:58,430 --> 00:10:04,730
is a plus for example the HTML builder

00:10:02,510 --> 00:10:08,360
package will not be used if we're only

00:10:04,730 --> 00:10:10,490
building restful api because we might

00:10:08,360 --> 00:10:15,050
have something like angularjs on the

00:10:10,490 --> 00:10:18,470
front end okay so how do we install this

00:10:15,050 --> 00:10:21,620
well like many stories begin we do

00:10:18,470 --> 00:10:23,840
composer require do the Clairvaux

00:10:21,620 --> 00:10:29,780
Collective repository and the

00:10:23,840 --> 00:10:31,690
annotations package the next step is to

00:10:29,780 --> 00:10:36,410
create an annotations service provider

00:10:31,690 --> 00:10:39,860
and that's rather simple and then add

00:10:36,410 --> 00:10:42,140
the annotation service provider to the

00:10:39,860 --> 00:10:44,390
app dot PHP file and there's an array of

00:10:42,140 --> 00:10:47,660
providers this basically tells laravel

00:10:44,390 --> 00:10:50,840
when it boots that the annotation

00:10:47,660 --> 00:10:54,140
service provider is ready so now it's

00:10:50,840 --> 00:10:55,340
time to go to work so my boss came to me

00:10:54,140 --> 00:10:56,420
and he said as a conference speaker I

00:10:55,340 --> 00:10:58,580
want you to tell the joke so that

00:10:56,420 --> 00:11:00,050
everybody laughs and I wish that my job

00:10:58,580 --> 00:11:03,770
could be this easy

00:11:00,050 --> 00:11:05,990
okay now let's really go to work as a

00:11:03,770 --> 00:11:08,180
hotel website user I want to search for

00:11:05,990 --> 00:11:10,730
a hotel so that I can reserve a room so

00:11:08,180 --> 00:11:12,790
let's say we are building a Travelocity

00:11:10,730 --> 00:11:17,480
clone

00:11:12,790 --> 00:11:20,120
okay so before I get into the example

00:11:17,480 --> 00:11:22,639
there's one side note we are will be

00:11:20,120 --> 00:11:25,040
using the artisan command line tool and

00:11:22,639 --> 00:11:27,740
for those of you that don't know artisan

00:11:25,040 --> 00:11:30,139
helps us automate a lot of the boring

00:11:27,740 --> 00:11:32,839
tasks that are involved in building web

00:11:30,139 --> 00:11:35,420
applications such as performing

00:11:32,839 --> 00:11:39,350
migrations and creating controllers and

00:11:35,420 --> 00:11:42,259
many many other things okay that said

00:11:39,350 --> 00:11:45,620
let's go to work so we'll type PHP

00:11:42,259 --> 00:11:49,490
artisan make controller hotels

00:11:45,620 --> 00:11:52,370
controller and I like that the syntax is

00:11:49,490 --> 00:11:54,949
very expressive it reads very well so

00:11:52,370 --> 00:12:01,160
our hotels controller will interact with

00:11:54,949 --> 00:12:03,500
our hotel entity or a hotel model now

00:12:01,160 --> 00:12:06,410
since we will be scanning this

00:12:03,500 --> 00:12:10,579
controller for annotations we need to

00:12:06,410 --> 00:12:12,709
tell the annotations package to to

00:12:10,579 --> 00:12:16,279
include this file in its list of files

00:12:12,709 --> 00:12:19,279
to control or to to check so as you can

00:12:16,279 --> 00:12:21,410
see there's a simple directive simple

00:12:19,279 --> 00:12:24,050
array called scan routes and we'll just

00:12:21,410 --> 00:12:26,569
throw hotels controller in there and I'm

00:12:24,050 --> 00:12:29,269
using yellow so that you can see what is

00:12:26,569 --> 00:12:34,490
important in each slide because there's

00:12:29,269 --> 00:12:38,120
a lot of codes so okay now at this point

00:12:34,490 --> 00:12:41,720
we have a very simple step we add to the

00:12:38,120 --> 00:12:46,149
class the doc lock annotation resource

00:12:41,720 --> 00:12:49,040
hotels now we've turned our controller

00:12:46,149 --> 00:12:53,089
into a resource this will give us the

00:12:49,040 --> 00:12:57,529
basic crud operations and allow us to

00:12:53,089 --> 00:13:00,470
add in the methods that we need in the

00:12:57,529 --> 00:13:03,949
lower right hand corner I've included so

00:13:00,470 --> 00:13:07,670
that we can compare the standard laravel

00:13:03,949 --> 00:13:10,129
way of doing it so it's a little bit

00:13:07,670 --> 00:13:12,589
lighter in terms of code because we see

00:13:10,129 --> 00:13:15,079
we just do resources hotels and we're

00:13:12,589 --> 00:13:18,259
done otherwise we would have to open up

00:13:15,079 --> 00:13:21,529
the route start PHP file and add the

00:13:18,259 --> 00:13:25,070
hotel's controller and map that to the

00:13:21,529 --> 00:13:28,260
hotel's request

00:13:25,070 --> 00:13:31,530
one very important thing is that we must

00:13:28,260 --> 00:13:38,280
use double quotes otherwise it won't

00:13:31,530 --> 00:13:40,410
work okay so since my boss he asked me

00:13:38,280 --> 00:13:45,330
to search for a hotel I need to have a

00:13:40,410 --> 00:13:48,660
way to do that so in my hotels

00:13:45,330 --> 00:13:52,470
controller I will add in dock block

00:13:48,660 --> 00:13:54,600
annotation that maps to a get so I'll be

00:13:52,470 --> 00:13:59,220
sending in some parameters to my get

00:13:54,600 --> 00:14:02,520
request and that will respond on until

00:13:59,220 --> 00:14:06,650
the URL hotels searched and I've created

00:14:02,520 --> 00:14:06,650
a method search to handle that request

00:14:07,040 --> 00:14:17,160
now we haven't told laravel to use that

00:14:12,930 --> 00:14:22,560
annotation so we now need to use artisan

00:14:17,160 --> 00:14:25,560
to scan that route and so again the

00:14:22,560 --> 00:14:31,770
syntax reads very well PHP artisan route

00:14:25,560 --> 00:14:36,120
scan and we're done so in the storage

00:14:31,770 --> 00:14:39,150
framework directory we can see the

00:14:36,120 --> 00:14:43,400
result of this method and it produces a

00:14:39,150 --> 00:14:45,990
file called routes scanned dot PHP and

00:14:43,400 --> 00:14:48,330
for now we don't have any other options

00:14:45,990 --> 00:14:50,580
so for example we have a middleware and

00:14:48,330 --> 00:14:52,320
we're that our empty arrays and we're

00:14:50,580 --> 00:14:54,420
not limiting on a domain and we're not

00:14:52,320 --> 00:15:00,510
using any aliases so those values are

00:14:54,420 --> 00:15:03,930
null this file does not get put into

00:15:00,510 --> 00:15:09,140
source code control and that should be

00:15:03,930 --> 00:15:12,420
come in will understand why very shortly

00:15:09,140 --> 00:15:15,450
but if every time I add an annotation

00:15:12,420 --> 00:15:18,270
into my doc block that could become very

00:15:15,450 --> 00:15:21,500
tedious so there's a shortcut the

00:15:18,270 --> 00:15:25,350
service provider has a boolean variable

00:15:21,500 --> 00:15:28,550
scan when local and we can simply set

00:15:25,350 --> 00:15:30,750
that the true by setting that to true

00:15:28,550 --> 00:15:32,630
when we are working in our local

00:15:30,750 --> 00:15:36,450
environment

00:15:32,630 --> 00:15:38,790
every time we execute the the pro

00:15:36,450 --> 00:15:41,579
and boot the framework it will scan all

00:15:38,790 --> 00:15:45,450
of it will scan all of the files in that

00:15:41,579 --> 00:15:47,100
list for annotations now of course this

00:15:45,450 --> 00:15:49,139
makes things a little bit slower but

00:15:47,100 --> 00:15:50,790
it's I mean a fraction of a second I

00:15:49,139 --> 00:15:53,220
suppose but that's sure better than

00:15:50,790 --> 00:15:56,610
having to either type PHP artisan route

00:15:53,220 --> 00:16:00,089
scan or putting some sort of file

00:15:56,610 --> 00:16:06,329
watcher a filesystemwatcher that that

00:16:00,089 --> 00:16:08,310
runs the script so if anybody here would

00:16:06,329 --> 00:16:14,220
like a step-by-step walkthrough of

00:16:08,310 --> 00:16:16,620
creating a simple route in using laravel

00:16:14,220 --> 00:16:20,070
for i also did a presentation about a

00:16:16,620 --> 00:16:24,810
year ago that covers in more detail that

00:16:20,070 --> 00:16:28,320
method so let's compare the laravel

00:16:24,810 --> 00:16:30,209
doclock annotations with a symphony

00:16:28,320 --> 00:16:33,449
package that's called Senseo framework

00:16:30,209 --> 00:16:37,260
extra bundle and I don't work in

00:16:33,449 --> 00:16:39,839
symphony but it's pretty clear that the

00:16:37,260 --> 00:16:42,470
syntax both for the controller as well

00:16:39,839 --> 00:16:46,260
as the annotation are pretty similar so

00:16:42,470 --> 00:16:50,040
if we are used to symphony or Zend this

00:16:46,260 --> 00:16:52,050
shouldn't be that difficult in this

00:16:50,040 --> 00:16:54,990
example I've included Xen because then

00:16:52,050 --> 00:16:59,760
also in there Zen framework to annotated

00:16:54,990 --> 00:17:03,089
router gives us the possibility to add a

00:16:59,760 --> 00:17:06,179
get method on to its map a get request

00:17:03,089 --> 00:17:08,669
to the method and of course the Zen

00:17:06,179 --> 00:17:11,160
syntax in this package and there are

00:17:08,669 --> 00:17:19,439
several fours and again is rather

00:17:11,160 --> 00:17:23,130
similar okay so I search for the hotel

00:17:19,439 --> 00:17:28,020
and now I want to display the hotel that

00:17:23,130 --> 00:17:30,950
we're interested in so to do that the

00:17:28,020 --> 00:17:35,040
user will click on our web page and

00:17:30,950 --> 00:17:39,750
we'll fire a request to hotels slash and

00:17:35,040 --> 00:17:42,179
we'll pass the ID so to demonstrate

00:17:39,750 --> 00:17:45,059
another possibility with doclock

00:17:42,179 --> 00:17:49,860
annotations we can use a where clause

00:17:45,059 --> 00:17:52,890
and this will limit everything to

00:17:49,860 --> 00:17:56,090
one or more numero one or more numbers

00:17:52,890 --> 00:18:00,150
as you can see by the backslash d plus

00:17:56,090 --> 00:18:01,650
and again in the lower right is the lair

00:18:00,150 --> 00:18:05,640
of a standard way of doing it and

00:18:01,650 --> 00:18:09,870
basically we just chained the the where

00:18:05,640 --> 00:18:14,130
limitation on to the end of until at the

00:18:09,870 --> 00:18:17,400
end of the get so each framework has a

00:18:14,130 --> 00:18:20,790
different term in laravel it's called

00:18:17,400 --> 00:18:24,740
we're in symphony it's a requirement and

00:18:20,790 --> 00:18:28,679
ins and it's a constraint so

00:18:24,740 --> 00:18:30,390
conceptually it's the same thing because

00:18:28,679 --> 00:18:32,700
we're just basically saying that there

00:18:30,390 --> 00:18:35,549
should be an ID and it should have one

00:18:32,700 --> 00:18:43,919
or more digits and not be alphanumeric

00:18:35,549 --> 00:18:45,780
for example okay now since we've

00:18:43,919 --> 00:18:48,090
displayed the room that we want to

00:18:45,780 --> 00:18:51,620
reserve we need to create a reservations

00:18:48,090 --> 00:18:55,650
controller that will interact with our

00:18:51,620 --> 00:18:57,720
reservations backend so once again it

00:18:55,650 --> 00:19:00,840
can't be any more simple PHP artisan

00:18:57,720 --> 00:19:06,240
make controller and this will create our

00:19:00,840 --> 00:19:08,850
reservations controller now we need to

00:19:06,240 --> 00:19:13,280
book the room but we need to be logged

00:19:08,850 --> 00:19:16,650
in so laravel provides authentication

00:19:13,280 --> 00:19:21,179
right out-of-the-box basically by saying

00:19:16,650 --> 00:19:24,360
middleware off if the user is not logged

00:19:21,179 --> 00:19:27,510
in it will redirect the user to the

00:19:24,360 --> 00:19:30,870
login page and so as we see here we've

00:19:27,510 --> 00:19:33,390
stacked the middleware on top whip whip

00:19:30,870 --> 00:19:35,160
acting the middleware together with the

00:19:33,390 --> 00:19:39,330
post and we'll pass all of our

00:19:35,160 --> 00:19:41,340
information to a post room method and

00:19:39,330 --> 00:19:43,890
again at the bottom it's just a second

00:19:41,340 --> 00:19:48,840
it's a third parameter into the post

00:19:43,890 --> 00:19:51,080
routing if for example I decide that I

00:19:48,840 --> 00:19:53,850
want to limit all the requests to a

00:19:51,080 --> 00:19:55,860
particular domain for example in our

00:19:53,850 --> 00:19:59,929
case we have booking and then the name

00:19:55,860 --> 00:20:03,299
of our hotel website.com I can tell

00:19:59,929 --> 00:20:06,169
laravel that this controller is

00:20:03,299 --> 00:20:08,970
to this domain and again at the bottom

00:20:06,169 --> 00:20:10,799
there there's the third command which is

00:20:08,970 --> 00:20:15,210
an array passing in the middle we're off

00:20:10,799 --> 00:20:25,320
and the domain and that will act on the

00:20:15,210 --> 00:20:27,210
the post method to book room okay so one

00:20:25,320 --> 00:20:31,440
of the interesting new things about

00:20:27,210 --> 00:20:34,590
level 5 is that it has brought in the

00:20:31,440 --> 00:20:36,720
concept of a command that before was not

00:20:34,590 --> 00:20:40,919
present in larva for at least not in

00:20:36,720 --> 00:20:44,269
this particular way so again as we've

00:20:40,919 --> 00:20:49,639
said now several times it's very simple

00:20:44,269 --> 00:20:49,639
PHP artisan make command reserve room

00:20:49,700 --> 00:20:57,119
now let's look at the contents of this

00:20:52,859 --> 00:20:59,639
file in this particular situation I told

00:20:57,119 --> 00:21:02,759
the command that I would like to handle

00:20:59,639 --> 00:21:04,679
itself or that the handle method will be

00:21:02,759 --> 00:21:07,799
actually inside of the reserve room

00:21:04,679 --> 00:21:10,200
method so it creates the canoe so I have

00:21:07,799 --> 00:21:13,440
my constructor I'll do what I need to do

00:21:10,200 --> 00:21:16,109
and then it will handle itself we can

00:21:13,440 --> 00:21:17,820
optionally break this into two classes

00:21:16,109 --> 00:21:25,109
where we will have a separate handler

00:21:17,820 --> 00:21:27,330
class for that command now going back to

00:21:25,109 --> 00:21:29,609
the controller we have the post the post

00:21:27,330 --> 00:21:33,059
arrives into booking it into book room

00:21:29,609 --> 00:21:35,489
the user is authenticated and now we

00:21:33,059 --> 00:21:40,769
will dispatch that command down the

00:21:35,489 --> 00:21:42,509
command bus and passing for example to

00:21:40,769 --> 00:21:44,580
start in the end date of the hotel and

00:21:42,509 --> 00:21:46,679
how many rooms we want it's an array the

00:21:44,580 --> 00:21:50,359
users Arthur Kent authenticated so we

00:21:46,679 --> 00:21:56,549
need to maybe pass that into the command

00:21:50,359 --> 00:21:59,309
and now once the command is sent on the

00:21:56,549 --> 00:22:03,299
command bus we want to launch an event

00:21:59,309 --> 00:22:06,690
we want to fire an event this syntax is

00:22:03,299 --> 00:22:10,440
it is a tiny bit different so we would

00:22:06,690 --> 00:22:12,929
do PHP artisan make event room was

00:22:10,440 --> 00:22:15,049
reserved so here we have the name of the

00:22:12,929 --> 00:22:15,049
event

00:22:17,100 --> 00:22:27,580
okay so now inside the handler method of

00:22:23,410 --> 00:22:31,810
my command I will use this helper method

00:22:27,580 --> 00:22:37,420
which is just simply event it's so

00:22:31,810 --> 00:22:47,770
simple I pass in a new instantiation of

00:22:37,420 --> 00:22:49,660
my room was reserved event okay so I

00:22:47,770 --> 00:22:50,320
received the request I send it to my

00:22:49,660 --> 00:22:52,120
controller

00:22:50,320 --> 00:22:53,950
I created a command the command went

00:22:52,120 --> 00:22:55,630
down the command was launched the event

00:22:53,950 --> 00:22:59,500
and now I need to handle the event and

00:22:55,630 --> 00:23:02,170
so this syntax is again a little bit

00:22:59,500 --> 00:23:02,950
more different than the syntax we've

00:23:02,170 --> 00:23:07,200
seen before

00:23:02,950 --> 00:23:11,650
so we would do PHP artisan handler event

00:23:07,200 --> 00:23:13,980
room reserved email this will be this

00:23:11,650 --> 00:23:18,550
will be how we will handle the event and

00:23:13,980 --> 00:23:26,880
then as a final parameter the event that

00:23:18,550 --> 00:23:32,710
we care about room was reserved okay so

00:23:26,880 --> 00:23:36,370
this here's is another router annotation

00:23:32,710 --> 00:23:38,800
having to deal with events and so by

00:23:36,370 --> 00:23:41,770
saying here's we mean that we want to

00:23:38,800 --> 00:23:46,140
listen to the rumors of room was

00:23:41,770 --> 00:23:50,320
reserved event and do something with it

00:23:46,140 --> 00:23:55,150
so in the lower right hand corner we can

00:23:50,320 --> 00:23:58,690
see that we created using the event

00:23:55,150 --> 00:24:01,710
bliss and facade a way to a map as the

00:23:58,690 --> 00:24:05,950
first parameter the room was reserved

00:24:01,710 --> 00:24:07,840
event with its handler that sorry the

00:24:05,950 --> 00:24:16,080
handle method of the hand of the class

00:24:07,840 --> 00:24:21,570
resume room reserved email and as we did

00:24:16,080 --> 00:24:25,960
with our controller we need to add in

00:24:21,570 --> 00:24:29,200
this event into the scanned events array

00:24:25,960 --> 00:24:32,110
and this will allow this well

00:24:29,200 --> 00:24:36,270
allow us when we execute execute the

00:24:32,110 --> 00:24:38,680
command to look inside of this class for

00:24:36,270 --> 00:24:44,530
the information that we need inside of

00:24:38,680 --> 00:24:48,280
the doc block and now in a similar way

00:24:44,530 --> 00:24:52,420
that we have executed PHP artisan routes

00:24:48,280 --> 00:24:58,720
can now we execute PHP artisan events

00:24:52,420 --> 00:25:03,000
can and it scans all of the events so

00:24:58,720 --> 00:25:06,370
let's take a look at the output of this

00:25:03,000 --> 00:25:10,020
the output of this artisan command and

00:25:06,370 --> 00:25:13,560
we will see again as the previous

00:25:10,020 --> 00:25:16,270
several slides ago we saw that we have

00:25:13,560 --> 00:25:18,100
listened passing in an array of things

00:25:16,270 --> 00:25:20,500
we want to listen to in this case the

00:25:18,100 --> 00:25:23,170
room was reserved event and then the

00:25:20,500 --> 00:25:24,730
second parameter which is the handler

00:25:23,170 --> 00:25:31,420
how we will handle it we will send an

00:25:24,730 --> 00:25:35,950
email so when we're all done in storage

00:25:31,420 --> 00:25:43,080
framework we have two files events dot

00:25:35,950 --> 00:25:46,360
scanned the PHP and route scan PHP so um

00:25:43,080 --> 00:25:50,680
just as a quick recap in whereas in

00:25:46,360 --> 00:25:52,660
laravel for we did the HTTP request to

00:25:50,680 --> 00:25:56,410
the handled it with the router and then

00:25:52,660 --> 00:25:59,260
sent it to the controller now in there

00:25:56,410 --> 00:26:01,030
above five we're using the command

00:25:59,260 --> 00:26:04,600
busbice in creating a command inside of

00:26:01,030 --> 00:26:07,750
controller launching an event and you

00:26:04,600 --> 00:26:10,690
know using the pub/sub way of doing

00:26:07,750 --> 00:26:15,760
things we have a handler that listens to

00:26:10,690 --> 00:26:18,850
that event there's one caveat here

00:26:15,760 --> 00:26:21,850
though laravel has a caching mechanism

00:26:18,850 --> 00:26:26,620
where it caches its routes to make them

00:26:21,850 --> 00:26:33,160
faster and this method is executed like

00:26:26,620 --> 00:26:34,660
this PHP artisan route cash and laravel

00:26:33,160 --> 00:26:37,540
will tell you that it cleared the cache

00:26:34,660 --> 00:26:42,759
first of all and then secondly that it

00:26:37,540 --> 00:26:45,729
cache them so if i scan

00:26:42,759 --> 00:26:49,779
all of my controllers and all of my

00:26:45,729 --> 00:26:52,089
events and I produce my route scan file

00:26:49,779 --> 00:26:56,199
I need to do that before I cash my

00:26:52,089 --> 00:27:00,119
routes because otherwise once I create

00:26:56,199 --> 00:27:03,519
my cashed routes file that will be used

00:27:00,119 --> 00:27:05,349
instead of the regular instead of the

00:27:03,519 --> 00:27:07,389
routes file that we have in the base

00:27:05,349 --> 00:27:15,489
directory and so it can be a little bit

00:27:07,389 --> 00:27:19,899
tricky and the caching mechanism used by

00:27:15,489 --> 00:27:23,589
laravel is to base64 encode all of the

00:27:19,899 --> 00:27:26,139
routes and then serialize them so here

00:27:23,589 --> 00:27:29,529
we see the output and this is faster

00:27:26,139 --> 00:27:32,319
than reading in the routes file so this

00:27:29,529 --> 00:27:35,499
is a file called routes which lives in

00:27:32,319 --> 00:27:39,339
storage slash framework so it can be a

00:27:35,499 --> 00:27:41,859
little bit tricky so not to not to get

00:27:39,339 --> 00:27:43,509
them confused we see route scan dot php'

00:27:41,859 --> 00:27:45,489
which is the result of the scan which

00:27:43,509 --> 00:27:48,879
reads all of the annotations inside of

00:27:45,489 --> 00:27:51,969
the doc lock and then routes dot php'

00:27:48,879 --> 00:27:55,359
which is a result of the routes of the

00:27:51,969 --> 00:28:01,119
route caching and again only routes dot

00:27:55,359 --> 00:28:04,419
PHP will be used if it exists and here

00:28:01,119 --> 00:28:06,909
we see all three all three files

00:28:04,419 --> 00:28:09,339
together the events are not cached so

00:28:06,909 --> 00:28:11,409
the events that scanned a PHP file will

00:28:09,339 --> 00:28:13,329
be used and then rel stopped PHP will be

00:28:11,409 --> 00:28:19,329
used we're all stud routes that Skanda

00:28:13,329 --> 00:28:23,799
PHP will not be used so we have

00:28:19,329 --> 00:28:26,769
available all of the standard HTTP verbs

00:28:23,799 --> 00:28:30,369
that we would that were used to delete

00:28:26,769 --> 00:28:33,369
get options options returns a list of

00:28:30,369 --> 00:28:35,829
all of the available verbs on that

00:28:33,369 --> 00:28:40,269
controller or that resource patch post

00:28:35,829 --> 00:28:42,009
input we know very well and then on in

00:28:40,269 --> 00:28:44,529
the right hand column I'm showing you

00:28:42,009 --> 00:28:51,549
basically what the other options are

00:28:44,529 --> 00:28:54,849
available so since this package was

00:28:51,549 --> 00:28:56,110
pulled out of laravel there are many

00:28:54,849 --> 00:28:57,520
advantages in

00:28:56,110 --> 00:29:01,450
many disadvantages to using this

00:28:57,520 --> 00:29:04,090
technique and everybody here can

00:29:01,450 --> 00:29:07,179
probably think of one or two as I was

00:29:04,090 --> 00:29:10,720
giving my presentation but I would like

00:29:07,179 --> 00:29:14,200
to talk about several of them now so one

00:29:10,720 --> 00:29:19,090
advantage to doclock annotations is that

00:29:14,200 --> 00:29:21,340
each controller remains independent as I

00:29:19,090 --> 00:29:23,260
said when I began to collaborate with

00:29:21,340 --> 00:29:26,140
two or three other developers in my

00:29:23,260 --> 00:29:29,320
company every time we added in a route

00:29:26,140 --> 00:29:32,340
of course we had to commit that and

00:29:29,320 --> 00:29:34,780
worry about get push and get pull and

00:29:32,340 --> 00:29:37,419
everybody needed to always have the

00:29:34,780 --> 00:29:44,020
latest version of the routes that PHP

00:29:37,419 --> 00:29:46,540
file the result of the scan is not in

00:29:44,020 --> 00:29:49,299
source code control so I don't really

00:29:46,540 --> 00:29:51,910
care about what the other controllers

00:29:49,299 --> 00:29:54,880
are doing I only can just focus on my

00:29:51,910 --> 00:29:57,880
controller adding my annotations and

00:29:54,880 --> 00:29:59,679
build everything in local and then when

00:29:57,880 --> 00:30:02,140
everything moves into the continuous

00:29:59,679 --> 00:30:04,350
delivery environment there will be a

00:30:02,140 --> 00:30:07,030
script that that builds everybody's

00:30:04,350 --> 00:30:10,740
annotations independently so it's a lot

00:30:07,030 --> 00:30:13,240
of it's a load off of my shoulder

00:30:10,740 --> 00:30:16,059
another advantage is that the router

00:30:13,240 --> 00:30:19,570
annotation keeps the method together

00:30:16,059 --> 00:30:23,140
with its annotation so just as we

00:30:19,570 --> 00:30:25,570
document we have here basically a living

00:30:23,140 --> 00:30:28,450
living documentation and because the

00:30:25,570 --> 00:30:32,020
post book room is actually what is going

00:30:28,450 --> 00:30:34,809
on and the reserve is actually the

00:30:32,020 --> 00:30:38,740
method that would be executed because

00:30:34,809 --> 00:30:42,460
otherwise if I start into a new project

00:30:38,740 --> 00:30:45,010
and I find the controller and I want to

00:30:42,460 --> 00:30:47,950
figure out what it responds to I have to

00:30:45,010 --> 00:30:50,980
go and search in my route start PHP file

00:30:47,950 --> 00:30:52,750
and find the reference to that

00:30:50,980 --> 00:30:54,970
controller or find the reference to that

00:30:52,750 --> 00:31:01,000
method and doing that over and over

00:30:54,970 --> 00:31:04,179
again uses up a lot of time since the

00:31:01,000 --> 00:31:07,990
syntax is similar developers coming in

00:31:04,179 --> 00:31:09,610
from symphony and Zend or from the java

00:31:07,990 --> 00:31:12,010
world or even from the seashore

00:31:09,610 --> 00:31:14,170
because there are also annotations

00:31:12,010 --> 00:31:16,480
slightly different but in in those

00:31:14,170 --> 00:31:19,630
languages then we'll find annotations

00:31:16,480 --> 00:31:20,110
familiar so and it would be easy to work

00:31:19,630 --> 00:31:22,870
with

00:31:20,110 --> 00:31:27,520
for somebody who's very experienced with

00:31:22,870 --> 00:31:34,150
this and now let's talk about the

00:31:27,520 --> 00:31:37,660
disadvantages because there are so the

00:31:34,150 --> 00:31:40,900
most obvious disadvantage is that code

00:31:37,660 --> 00:31:45,700
and comments should not mix and this is

00:31:40,900 --> 00:31:47,410
a very hot topic right now because if

00:31:45,700 --> 00:31:50,200
I'm a new developer coming into a

00:31:47,410 --> 00:31:52,960
project and I've never seen a doclock

00:31:50,200 --> 00:31:57,100
annotation and if for some reason my

00:31:52,960 --> 00:31:59,830
editor is not set up to intelligently

00:31:57,100 --> 00:32:01,690
color the syntax green or highlighted in

00:31:59,830 --> 00:32:03,280
some way telling me that inside that

00:32:01,690 --> 00:32:05,860
annotation there's important information

00:32:03,280 --> 00:32:07,690
I just may simply think that that's a

00:32:05,860 --> 00:32:10,480
comment and when I first started using

00:32:07,690 --> 00:32:12,910
PHP unit and I saw the data provider

00:32:10,480 --> 00:32:16,110
I wasn't immediately aware that that was

00:32:12,910 --> 00:32:22,980
actually used so that could trip up many

00:32:16,110 --> 00:32:28,120
new developers another disadvantage is

00:32:22,980 --> 00:32:31,180
we are tightly linking the controller to

00:32:28,120 --> 00:32:33,160
the route and this can be a problem if

00:32:31,180 --> 00:32:37,480
we want to keep things nice and clean

00:32:33,160 --> 00:32:39,400
nice and separate because if we maybe

00:32:37,480 --> 00:32:42,190
want to take this controller and use it

00:32:39,400 --> 00:32:44,380
in to use it in a different context we

00:32:42,190 --> 00:32:46,660
would then have to you know pull out all

00:32:44,380 --> 00:32:48,910
of the annotations or or come up with

00:32:46,660 --> 00:32:54,430
another mechanism to intelligently

00:32:48,910 --> 00:32:58,740
handle that and the last disadvantage is

00:32:54,430 --> 00:33:00,640
that as I had mentioned previously when

00:32:58,740 --> 00:33:04,780
we have a project with several

00:33:00,640 --> 00:33:07,510
developers and we go to build this we

00:33:04,780 --> 00:33:11,620
need to have something in our continuous

00:33:07,510 --> 00:33:16,020
delivery delivery machine that actually

00:33:11,620 --> 00:33:20,290
executes PHP artisan scan or PHP artisan

00:33:16,020 --> 00:33:23,600
route scan if you're just a single

00:33:20,290 --> 00:33:27,650
developer and you're just used to

00:33:23,600 --> 00:33:29,480
deploying via you know git pull git

00:33:27,650 --> 00:33:32,630
checkout or something like that

00:33:29,480 --> 00:33:40,280
that could be something that might be

00:33:32,630 --> 00:33:43,100
rather cumbersome and despite the fact

00:33:40,280 --> 00:33:48,040
that PHP internally does not have

00:33:43,100 --> 00:33:50,950
support for annotations it appears that

00:33:48,040 --> 00:33:55,940
once again the community is beginning to

00:33:50,950 --> 00:33:59,660
maybe think about it so the future of

00:33:55,940 --> 00:34:01,790
annotations in PHP is still wide open

00:33:59,660 --> 00:34:05,420
and we don't know how it's going to end

00:34:01,790 --> 00:34:08,600
but I I like it

00:34:05,420 --> 00:34:12,230
I like doclock annotations I think

00:34:08,600 --> 00:34:13,580
they're useful I think that they're one

00:34:12,230 --> 00:34:19,010
of many tools that needs to be evaluated

00:34:13,580 --> 00:34:21,530
and I think if used properly it can save

00:34:19,010 --> 00:34:25,040
a lot of time in development and

00:34:21,530 --> 00:34:28,760
lightened the development load and I

00:34:25,040 --> 00:34:34,340
can't be Who I am today without thanking

00:34:28,760 --> 00:34:36,760
my eleven colleagues in Italy okay are

00:34:34,340 --> 00:34:36,760
there any questions

00:34:43,940 --> 00:34:51,450
there are much better graphic designers

00:34:45,990 --> 00:34:58,470
than I am okay I think he's bringing the

00:34:51,450 --> 00:35:01,100
microphone to you I I have a question

00:34:58,470 --> 00:35:07,500
one of the things I like from the route

00:35:01,100 --> 00:35:10,290
file is the dragon group routes in so I

00:35:07,500 --> 00:35:13,110
only have to type one if I have filters

00:35:10,290 --> 00:35:17,220
like authorization or any other thing

00:35:13,110 --> 00:35:21,540
how can we handle that and with

00:35:17,220 --> 00:35:23,670
annotations well at this time I don't

00:35:21,540 --> 00:35:25,830
think that that's possible since the

00:35:23,670 --> 00:35:28,200
since now that the project is in the

00:35:25,830 --> 00:35:31,890
hands of the laravel collective there

00:35:28,200 --> 00:35:37,770
are several pull requests open I would

00:35:31,890 --> 00:35:40,320
suggest that you know we can maybe come

00:35:37,770 --> 00:35:44,070
up with a way to implement that but if

00:35:40,320 --> 00:35:49,560
each if each controller is separate

00:35:44,070 --> 00:35:52,500
we're not grouping them together so I

00:35:49,560 --> 00:35:55,530
think that it again it helps each

00:35:52,500 --> 00:35:56,880
controller to be independent but when

00:35:55,530 --> 00:35:58,380
you don't have that routes file you

00:35:56,880 --> 00:36:01,740
don't have that ability to group them

00:35:58,380 --> 00:36:03,750
together again it Taylor said the Taylor

00:36:01,740 --> 00:36:06,690
odd well said that it's an experiment in

00:36:03,750 --> 00:36:07,770
a framework agnostic controllers so I

00:36:06,690 --> 00:36:10,860
should be able to pick up this

00:36:07,770 --> 00:36:13,920
controller and you know use it in a

00:36:10,860 --> 00:36:15,300
different context but yeah you're

00:36:13,920 --> 00:36:17,640
definitely right that's a that's a

00:36:15,300 --> 00:36:22,620
difficult issue that needs to be solved

00:36:17,640 --> 00:36:26,820
but usually I might forget that to apply

00:36:22,620 --> 00:36:29,010
one filter or so right now I like that

00:36:26,820 --> 00:36:31,140
just oh I have a new resource I put it

00:36:29,010 --> 00:36:33,390
in the file inside the group and I'm

00:36:31,140 --> 00:36:35,280
done with it I don't have to think too

00:36:33,390 --> 00:36:37,650
much about it right I also do the same

00:36:35,280 --> 00:36:39,930
thing I put about 20 resource

00:36:37,650 --> 00:36:42,390
controllers in inside of the group

00:36:39,930 --> 00:36:44,670
applying the authentication filter

00:36:42,390 --> 00:36:46,770
because if you leave the controller

00:36:44,670 --> 00:36:48,870
outside of the authentication right you

00:36:46,770 --> 00:36:51,570
expose that controller to anybody who

00:36:48,870 --> 00:36:53,190
can just either by chance or through

00:36:51,570 --> 00:36:55,650
some hacking

00:36:53,190 --> 00:37:04,289
start sending requests to that to that

00:36:55,650 --> 00:37:06,809
URL thank you yeah I was wondering if

00:37:04,289 --> 00:37:08,819
there's maybe a middle way between using

00:37:06,809 --> 00:37:13,529
the comments and having all in the

00:37:08,819 --> 00:37:15,480
routes file Kier's yeah you want to

00:37:13,529 --> 00:37:19,650
group the routes together with the

00:37:15,480 --> 00:37:21,059
actions that they're routing to but you

00:37:19,650 --> 00:37:23,160
could do that without having to go as

00:37:21,059 --> 00:37:24,299
far as encoding all this information in

00:37:23,160 --> 00:37:27,240
comments right couldn't you have a

00:37:24,299 --> 00:37:30,269
method on the controller itself that

00:37:27,240 --> 00:37:31,619
returns routes for all its actions or

00:37:30,269 --> 00:37:33,990
something like that

00:37:31,619 --> 00:37:36,119
that wouldn't require parsing comments

00:37:33,990 --> 00:37:39,000
it could be done by the application

00:37:36,119 --> 00:37:40,740
itself even per request and then cache

00:37:39,000 --> 00:37:41,940
that something like that has anyone done

00:37:40,740 --> 00:37:43,769
something like that what would be the

00:37:41,940 --> 00:37:46,470
problems about it not that I know of but

00:37:43,769 --> 00:37:48,359
that seems logical that there would be a

00:37:46,470 --> 00:37:51,089
way to annotate the the base controller

00:37:48,359 --> 00:37:53,039
class is that what you're saying yeah

00:37:51,089 --> 00:37:55,619
but not with annotations and comments

00:37:53,039 --> 00:37:59,970
just encode have a method like get

00:37:55,619 --> 00:38:02,900
routes that the the framework we know to

00:37:59,970 --> 00:38:07,529
call on each controller to figure out

00:38:02,900 --> 00:38:09,029
what how to map the URLs to to the

00:38:07,529 --> 00:38:10,920
actions that were within that controller

00:38:09,029 --> 00:38:13,319
that would at least avoid the problem of

00:38:10,920 --> 00:38:16,440
bearing information in in comments you

00:38:13,319 --> 00:38:18,990
might still need to run a command on the

00:38:16,440 --> 00:38:21,630
Shelf something to run those methods and

00:38:18,990 --> 00:38:23,009
build a read father yeah I was just

00:38:21,630 --> 00:38:25,470
wondering if there's if anyone's done

00:38:23,009 --> 00:38:28,079
something like that

00:38:25,470 --> 00:38:30,900
as I said I would suggest looking at the

00:38:28,079 --> 00:38:32,960
github repository you know as I speak

00:38:30,900 --> 00:38:36,720
even like several hours ago there were

00:38:32,960 --> 00:38:40,109
new there were new pull requests they

00:38:36,720 --> 00:38:42,539
have come in and the developers are you

00:38:40,109 --> 00:38:44,250
know moving this project along because

00:38:42,539 --> 00:38:47,400
there are many people who like this

00:38:44,250 --> 00:38:49,289
approach so I would suggest sending a

00:38:47,400 --> 00:38:51,630
pull request and you know or at least

00:38:49,289 --> 00:38:54,809
opening up an issue I think that the the

00:38:51,630 --> 00:38:57,119
for the for people who are maintaining

00:38:54,809 --> 00:38:59,670
the repository because they will

00:38:57,119 --> 00:39:02,609
actually you know guarantee support for

00:38:59,670 --> 00:39:04,529
the annotations package I think that

00:39:02,609 --> 00:39:05,500
they you know they're interested in all

00:39:04,529 --> 00:39:13,240
of the

00:39:05,500 --> 00:39:15,400
everybody's ideas I mean laravel five

00:39:13,240 --> 00:39:18,040
has been out just you know two weeks and

00:39:15,400 --> 00:39:20,470
so all of the packages now are being

00:39:18,040 --> 00:39:23,770
updated to to work with it so there's a

00:39:20,470 --> 00:39:28,230
little bit of you know we need a little

00:39:23,770 --> 00:39:31,960
bit of time I think yes I am actually

00:39:28,230 --> 00:39:34,270
interested in that event that you

00:39:31,960 --> 00:39:37,270
generated previously I noticed in the

00:39:34,270 --> 00:39:39,010
method that you were just calling event

00:39:37,270 --> 00:39:41,490
and I was just trying to figure out

00:39:39,010 --> 00:39:41,490
where it came from

00:39:41,520 --> 00:39:52,930
okay so let's go back here just before

00:39:49,390 --> 00:39:55,810
he is before the right it's hard to show

00:39:52,930 --> 00:40:00,700
a lot of code on a lot of slides and not

00:39:55,810 --> 00:40:02,859
confuse people yes right there okay one

00:40:00,700 --> 00:40:06,550
highlights of yellow ok this class is

00:40:02,859 --> 00:40:09,760
called reserve room and remember that it

00:40:06,550 --> 00:40:12,250
is instantiated inside of my

00:40:09,760 --> 00:40:15,310
reservations controller right so in my

00:40:12,250 --> 00:40:20,400
reserve method I instantiate reserve

00:40:15,310 --> 00:40:24,280
room and dispatch sends it down the bus

00:40:20,400 --> 00:40:27,430
and since when I instantiate that

00:40:24,280 --> 00:40:31,599
command automatically the handler code

00:40:27,430 --> 00:40:37,420
is launched inside of the handle method

00:40:31,599 --> 00:40:41,650
I then launch a new event room was

00:40:37,420 --> 00:40:44,020
reserved yeah that line is what I'm

00:40:41,650 --> 00:40:46,510
asking about unless I'm missing

00:40:44,020 --> 00:40:49,540
something I'm not sure where what event

00:40:46,510 --> 00:40:52,300
that method call event with the object

00:40:49,540 --> 00:40:58,060
room reserved event is a is a is a

00:40:52,300 --> 00:41:04,990
helper method okay just a shortcut and

00:40:58,060 --> 00:41:08,120
that basically creates a new event and

00:41:04,990 --> 00:41:10,100
then I've been to send two years I think

00:41:08,120 --> 00:41:11,960
it's difficult to see you know

00:41:10,100 --> 00:41:12,560
difficulty show so much code together so

00:41:11,960 --> 00:41:20,240
fast

00:41:12,560 --> 00:41:26,120
I might have to see it several times and

00:41:20,240 --> 00:41:32,720
write it very back right back there in

00:41:26,120 --> 00:41:35,630
the back right corner hey can you

00:41:32,720 --> 00:41:39,350
separate it for the the notation from

00:41:35,630 --> 00:41:42,200
the actual road so for example if you

00:41:39,350 --> 00:41:46,760
give it a name and then use it in a

00:41:42,200 --> 00:41:49,250
template so you're changing the road

00:41:46,760 --> 00:41:54,230
only in the controller note in that I am

00:41:49,250 --> 00:42:01,040
play not sure if I are you saying if I

00:41:54,230 --> 00:42:03,860
can you ask me if I can use the the

00:42:01,040 --> 00:42:12,710
alias command there's a way that I can

00:42:03,860 --> 00:42:15,680
use as and there's there's also an

00:42:12,710 --> 00:42:18,050
option to to the ass which creates an

00:42:15,680 --> 00:42:20,710
alias that I can use and in my

00:42:18,050 --> 00:42:31,540
stenciling is there a notation for it

00:42:20,710 --> 00:42:38,150
yeah that's as so I would pass that as

00:42:31,540 --> 00:42:43,040
its second parameter here for example so

00:42:38,150 --> 00:42:45,470
I could do request to get and then comma

00:42:43,040 --> 00:42:50,840
and then my second parameter would be as

00:42:45,470 --> 00:42:53,210
equals and then the aliasing double

00:42:50,840 --> 00:42:56,470
quotes and that would allow the front

00:42:53,210 --> 00:42:59,470
end guys to to use that in a template

00:42:56,470 --> 00:42:59,470
Thanks

00:43:18,640 --> 00:43:24,040
music framework is it's really good

00:43:21,250 --> 00:43:25,950
thing so I'm sorry can't hear using

00:43:24,040 --> 00:43:30,060
framework is a really good thing

00:43:25,950 --> 00:43:33,370
increase the speed of development but

00:43:30,060 --> 00:43:44,880
what's the penalty of the performance

00:43:33,370 --> 00:43:48,220
penalty of using this framework well

00:43:44,880 --> 00:43:51,670
every framework has some overhead I mean

00:43:48,220 --> 00:43:53,890
I'm not sure in terms of microseconds of

00:43:51,670 --> 00:43:56,140
execution if that's what you mean I mean

00:43:53,890 --> 00:43:59,620
obviously there's maybe a hundred

00:43:56,140 --> 00:44:02,710
microseconds or less that is required to

00:43:59,620 --> 00:44:06,280
load all of the classes and and and

00:44:02,710 --> 00:44:09,010
actually put the framework as I said

00:44:06,280 --> 00:44:10,900
their level five is a lot faster because

00:44:09,010 --> 00:44:12,040
you know now with route caching and

00:44:10,900 --> 00:44:15,850
pulling out some of the non-essential

00:44:12,040 --> 00:44:17,380
classes that helps it go faster does

00:44:15,850 --> 00:44:20,200
that help the answer your question I

00:44:17,380 --> 00:44:22,740
mean so the advantage of a framework is

00:44:20,200 --> 00:44:26,650
that it helps somebody very quickly

00:44:22,740 --> 00:44:30,970
create a web application when that web

00:44:26,650 --> 00:44:33,130
application grows then of course and of

00:44:30,970 --> 00:44:35,410
course if the if the use of that web

00:44:33,130 --> 00:44:38,260
application scales

00:44:35,410 --> 00:44:40,960
that's when frameworks show their their

00:44:38,260 --> 00:44:43,530
limitation right so many people say if I

00:44:40,960 --> 00:44:46,960
need a very high availability

00:44:43,530 --> 00:44:48,760
application to be run on you know

00:44:46,960 --> 00:44:50,110
without like a Facebook or something you

00:44:48,760 --> 00:44:52,200
know obviously a framework is not the

00:44:50,110 --> 00:44:58,180
right choice

00:44:52,200 --> 00:45:02,710
but I think that 99% of the applications

00:44:58,180 --> 00:45:05,470
don't have major issues with scalability

00:45:02,710 --> 00:45:07,810
because they tend to be used by very few

00:45:05,470 --> 00:45:09,760
people I mean so for every Facebook

00:45:07,810 --> 00:45:12,550
right there's you know a hundred

00:45:09,760 --> 00:45:17,320
thousand applications that are just run

00:45:12,550 --> 00:45:18,190
by six people or fifty people five

00:45:17,320 --> 00:45:20,950
hundred people

00:45:18,190 --> 00:45:23,380
five thousand does that answer your

00:45:20,950 --> 00:45:26,370
question it's it's not I mean you know

00:45:23,380 --> 00:45:30,090
again the framework or no framework is a

00:45:26,370 --> 00:45:30,090
long debate right

00:45:39,630 --> 00:45:44,280
has some anyone performance check the

00:45:42,000 --> 00:45:46,860
way that that gets cached in the roofs

00:45:44,280 --> 00:45:48,420
cuz does that mean in the cache fault

00:45:46,860 --> 00:45:51,510
every time the system and bootstraps

00:45:48,420 --> 00:45:53,610
it's got to base64 decode and uncie

00:45:51,510 --> 00:45:55,110
realize a string just to build an array

00:45:53,610 --> 00:45:58,530
wouldn't it be better to just cache that

00:45:55,110 --> 00:46:02,400
as native PHP code which like a lot cash

00:45:58,530 --> 00:46:06,870
would deal with them if they're okay if

00:46:02,400 --> 00:46:14,310
the routes file which is text needs to

00:46:06,870 --> 00:46:19,440
be parsed that's more slow than doing a

00:46:14,310 --> 00:46:22,680
base64 decode and uncivilized otherwise

00:46:19,440 --> 00:46:23,910
they wouldn't have done it yeah I don't

00:46:22,680 --> 00:46:25,470
have performance numbers on that but

00:46:23,910 --> 00:46:28,230
they say it could even be up to a

00:46:25,470 --> 00:46:30,150
hundred times faster really it depends

00:46:28,230 --> 00:46:32,280
on your on your use case because you

00:46:30,150 --> 00:46:34,280
know your again you're hitting that that

00:46:32,280 --> 00:46:38,190
routes file if your routes file has

00:46:34,280 --> 00:46:39,450
three hundred and fifty lines and

00:46:38,190 --> 00:46:41,340
hopefully you haven't used too many

00:46:39,450 --> 00:46:43,200
closures or anything like that but you

00:46:41,340 --> 00:46:47,700
know all of that code needs to be parsed

00:46:43,200 --> 00:46:50,190
and and in real time that's slow so by

00:46:47,700 --> 00:46:54,720
caching everything I reading it right

00:46:50,190 --> 00:46:56,490
into memory sure when you uncie realize

00:46:54,720 --> 00:46:58,350
that that will eventually turn into an

00:46:56,490 --> 00:46:59,460
array or an object or an array of

00:46:58,350 --> 00:47:01,620
objects or something wouldn't it be

00:46:59,460 --> 00:47:04,770
better to just make that file when you

00:47:01,620 --> 00:47:06,000
generate the array of objects as it's

00:47:04,770 --> 00:47:08,820
meant to be rather than going to the

00:47:06,000 --> 00:47:10,680
effort having to decode it a ton

00:47:08,820 --> 00:47:15,590
serialized it on every bootstrap

00:47:10,680 --> 00:47:15,590
I don't really know

00:47:20,599 --> 00:47:27,330
the read time for it's a good question I

00:47:25,770 --> 00:47:29,250
mean the read time for one line versus

00:47:27,330 --> 00:47:31,470
because it you're saying this should be

00:47:29,250 --> 00:47:33,150
an array so if it could be hundreds of

00:47:31,470 --> 00:47:36,170
page be five point five would opt out

00:47:33,150 --> 00:47:38,160
cash and sort all around anyway so I

00:47:36,170 --> 00:47:40,470
thought I think that we got one of these

00:47:38,160 --> 00:47:42,240
DC realizes it anyway right well the

00:47:40,470 --> 00:47:48,390
minimum requirements still five point

00:47:42,240 --> 00:47:55,380
four so I was one had someone does loves

00:47:48,390 --> 00:47:57,270
a neat way of storing I think that we

00:47:55,380 --> 00:47:59,160
need a little bit more time like I said

00:47:57,270 --> 00:48:02,070
five five did not have a beta

00:47:59,160 --> 00:48:04,560
it was just immediately released and and

00:48:02,070 --> 00:48:06,660
so now the community is update as you

00:48:04,560 --> 00:48:08,609
know everybody needs to upgrade their

00:48:06,660 --> 00:48:11,160
packages and make everything work with

00:48:08,609 --> 00:48:13,800
five but in the meantime they did a lot

00:48:11,160 --> 00:48:18,800
of work under the hood to make

00:48:13,800 --> 00:48:18,800

YouTube URL: https://www.youtube.com/watch?v=X3SxkS9iwhM


