Title: Marcello Duarte - Barely Enough Design
Publication date: 2015-04-02
Playlist: PHP UK Conference 2015
Description: 
	Test Driven Design really helps us learn about the design of our code and how to improve on it. It is also true that the more we know about design, the more our code can actually benefit from TDD. This talk will cover just enough to give you the design inspiration you need to appreciate TDD. We will see responsibility driven design, "Tell don't ask", the law of Demeter, Dependency Inversion and other very key design principles and how they change the way we look into coding and testing.
Captions: 
	00:00:00,000 --> 00:00:02,060
you

00:00:06,149 --> 00:00:15,520
thank you hello again nice to be back at

00:00:12,459 --> 00:00:21,189
PG UK and this time you're going to talk

00:00:15,520 --> 00:00:24,279
about design because we put the TDD bug

00:00:21,189 --> 00:00:26,769
into people and they go and try to do pt

00:00:24,279 --> 00:00:28,480
DD and can't really appreciate it ed if

00:00:26,769 --> 00:00:30,249
they don't understand the motivations

00:00:28,480 --> 00:00:31,989
why you doing TDD is to get good design

00:00:30,249 --> 00:00:34,930
is not to test anything stop talking

00:00:31,989 --> 00:00:36,790
about testing so let's talk about design

00:00:34,930 --> 00:00:39,149
so it can appreciate us so you thought i

00:00:36,790 --> 00:00:45,969
wasn't going to talk about today did you

00:00:39,149 --> 00:00:47,859
you fool so so this is me i work at a

00:00:45,969 --> 00:00:50,500
company called invita like thank you

00:00:47,859 --> 00:00:54,760
Karen for introducing I also contributes

00:00:50,500 --> 00:00:58,690
a little bit to PHP spec and I tweet at

00:00:54,760 --> 00:01:01,410
their handle so feel free to come talk

00:00:58,690 --> 00:01:05,260
on the owner webs internets and things

00:01:01,410 --> 00:01:07,870
so my talk today is about the

00:01:05,260 --> 00:01:13,030
motivations behind to the D the design

00:01:07,870 --> 00:01:15,340
motivations and understanding that some

00:01:13,030 --> 00:01:18,520
of the principles that would help us

00:01:15,340 --> 00:01:20,200
appreciate TDD and I want to touch a

00:01:18,520 --> 00:01:24,060
little bit on the responsibility driven

00:01:20,200 --> 00:01:28,979
process and how does that fit in with a

00:01:24,060 --> 00:01:31,030
barely enough design or a simplicity and

00:01:28,979 --> 00:01:33,640
how does that fit in the whole idea of

00:01:31,030 --> 00:01:35,710
thing and why doing focus on

00:01:33,640 --> 00:01:38,259
responsibility again simple design

00:01:35,710 --> 00:01:41,229
rather than more complex obtuse things

00:01:38,259 --> 00:01:43,930
in a bit of the evolution of thinking

00:01:41,229 --> 00:01:46,770
around that but with some code so don't

00:01:43,930 --> 00:01:51,159
despair you're going to see some code

00:01:46,770 --> 00:01:55,719
yeah so we start with a big picture we

00:01:51,159 --> 00:01:58,539
tend to go to big design up front maybe

00:01:55,719 --> 00:02:01,329
not so much today I don't think today

00:01:58,539 --> 00:02:02,649
when we're doing a project we have many

00:02:01,329 --> 00:02:04,960
people doing entity relationship

00:02:02,649 --> 00:02:08,170
diagrams do you do entity relationship

00:02:04,960 --> 00:02:12,560
diagrams any of you still some of you

00:02:08,170 --> 00:02:15,440
okay entity relationship diagrams and

00:02:12,560 --> 00:02:19,730
and that we once you have the entity

00:02:15,440 --> 00:02:21,440
then you dumped into some and automate

00:02:19,730 --> 00:02:23,360
some process and you create some there

00:02:21,440 --> 00:02:25,849
was something called Oracle forums does

00:02:23,360 --> 00:02:29,300
any of you work with that with you

00:02:25,849 --> 00:02:31,760
remember that you design the whole data

00:02:29,300 --> 00:02:33,470
model and then dump and then you have

00:02:31,760 --> 00:02:36,440
your application they call it rapid

00:02:33,470 --> 00:02:42,140
application development I call it rapid

00:02:36,440 --> 00:02:44,150
application disappointment so why why

00:02:42,140 --> 00:02:46,970
people do that they think are if you do

00:02:44,150 --> 00:02:50,000
the design properly in the beginning you

00:02:46,970 --> 00:02:52,100
are safe because later on things are

00:02:50,000 --> 00:02:53,330
going to get really difficult so if you

00:02:52,100 --> 00:02:56,959
understand everything you need right

00:02:53,330 --> 00:02:59,269
from the beginning you're safe you know

00:02:56,959 --> 00:03:00,920
it's hard to change things later it's

00:02:59,269 --> 00:03:05,019
better to understand what you need now

00:03:00,920 --> 00:03:07,849
so the developer with a waterfall bug

00:03:05,019 --> 00:03:11,049
infected the project manager will talk

00:03:07,849 --> 00:03:13,040
to him and say hey he is a some

00:03:11,049 --> 00:03:14,780
specification for you and he looked at

00:03:13,040 --> 00:03:17,150
that and say well you're not giving me

00:03:14,780 --> 00:03:18,260
the whole picture I know tomorrow you're

00:03:17,150 --> 00:03:20,600
going to change your mind I'm gonna give

00:03:18,260 --> 00:03:22,670
me something else no give me the whole

00:03:20,600 --> 00:03:23,690
picture I want the entire spec you're

00:03:22,670 --> 00:03:26,420
going to change your mind tomorrow

00:03:23,690 --> 00:03:27,590
that's the waterfall developer and the

00:03:26,420 --> 00:03:29,660
project management I don't know you know

00:03:27,590 --> 00:03:31,730
we have to adapt quickly because the

00:03:29,660 --> 00:03:33,519
business you know we have to strategic

00:03:31,730 --> 00:03:35,299
Owens no no I want the whole

00:03:33,519 --> 00:03:36,769
understanding I don't want you to change

00:03:35,299 --> 00:03:41,109
my mind I want to sit down and write my

00:03:36,769 --> 00:03:43,600
code so give me oh look there's a door

00:03:41,109 --> 00:03:47,570
look

00:03:43,600 --> 00:03:49,540
give me the whole picture give me the

00:03:47,570 --> 00:03:54,620
whole picture so that's the waterfall

00:03:49,540 --> 00:03:57,590
mentality we need to think about

00:03:54,620 --> 00:03:59,090
everything before developing otherwise

00:03:57,590 --> 00:04:00,920
something is going to come up a mountain

00:03:59,090 --> 00:04:04,880
so later on or do you think about that

00:04:00,920 --> 00:04:06,110
so we have to know everything before we

00:04:04,880 --> 00:04:09,320
need to make sure we didn't miss

00:04:06,110 --> 00:04:11,120
anything something's gonna come get

00:04:09,320 --> 00:04:14,420
through the cracks and we you know have

00:04:11,120 --> 00:04:16,850
to redo a lot of part of our models yeah

00:04:14,420 --> 00:04:19,340
does that resonate will remember hearing

00:04:16,850 --> 00:04:22,850
things like this yeah familiar with that

00:04:19,340 --> 00:04:24,770
okay why do you do big big up from da da

00:04:22,850 --> 00:04:26,930
this is just the way we work here you

00:04:24,770 --> 00:04:29,180
know just shut up and do the way we

00:04:26,930 --> 00:04:32,360
working there are many motivations why

00:04:29,180 --> 00:04:34,490
people do big design up front and what

00:04:32,360 --> 00:04:36,950
is the problem you know it's like very

00:04:34,490 --> 00:04:39,470
organized way of working you know you

00:04:36,950 --> 00:04:41,450
just think about everything talk of two

00:04:39,470 --> 00:04:42,920
people let's get the model right let's

00:04:41,450 --> 00:04:46,630
write our entity relationship diagram

00:04:42,920 --> 00:04:49,370
beautiful and then you know you can even

00:04:46,630 --> 00:04:51,800
create our active records for each of

00:04:49,370 --> 00:04:53,390
the tables and then in other

00:04:51,800 --> 00:04:56,720
applications basically done we just need

00:04:53,390 --> 00:05:00,620
to write a controllers it's very very

00:04:56,720 --> 00:05:03,110
simple why not use it okay and

00:05:00,620 --> 00:05:05,480
especially if you come from you know if

00:05:03,110 --> 00:05:06,980
you a procedure programmer before before

00:05:05,480 --> 00:05:08,450
you are like a object-oriented

00:05:06,980 --> 00:05:10,940
programming you're very comfortable with

00:05:08,450 --> 00:05:12,590
that it's very very comfortable to work

00:05:10,940 --> 00:05:14,750
with you know you have all the data

00:05:12,590 --> 00:05:17,030
available for you you know all the

00:05:14,750 --> 00:05:19,370
classes full of getters and setters open

00:05:17,030 --> 00:05:21,410
to you so how come to me all the data

00:05:19,370 --> 00:05:23,930
available to you get everywhere set

00:05:21,410 --> 00:05:25,310
everywhere they like that because you're

00:05:23,930 --> 00:05:27,590
familiar with you know global scope

00:05:25,310 --> 00:05:29,120
right remember when you were writing C

00:05:27,590 --> 00:05:31,130
programs when you have the main function

00:05:29,120 --> 00:05:33,830
you can access all these structures from

00:05:31,130 --> 00:05:36,560
whatever you like so that's good that's

00:05:33,830 --> 00:05:38,840
no I remember that is good I can use the

00:05:36,560 --> 00:05:40,220
same thing with doctrine I can just put

00:05:38,840 --> 00:05:41,810
Gators everywhere and I have the same

00:05:40,220 --> 00:05:43,040
procedure code I don't need to worry

00:05:41,810 --> 00:05:44,870
about his overall thing that they're

00:05:43,040 --> 00:05:46,580
writing about so they're very

00:05:44,870 --> 00:05:51,050
comfortable with that that data driven

00:05:46,580 --> 00:05:53,690
it's good but there are problems they

00:05:51,050 --> 00:05:56,210
know you have this open objects gasps

00:05:53,690 --> 00:05:56,900
I'm doing euro and put get everywhere

00:05:56,210 --> 00:05:58,639
get the

00:05:56,900 --> 00:06:00,740
to get that a bit a bit of this a little

00:05:58,639 --> 00:06:03,440
bit of that I mean get some for that

00:06:00,740 --> 00:06:07,280
some of that like it there is no secrecy

00:06:03,440 --> 00:06:10,520
no encapsulation the object is telling

00:06:07,280 --> 00:06:13,250
you everything you know your macro

00:06:10,520 --> 00:06:14,330
managing your objects you you know you

00:06:13,250 --> 00:06:16,220
need you need to know what the object

00:06:14,330 --> 00:06:18,680
having side and you decide for the

00:06:16,220 --> 00:06:21,650
object what he's going to do that's very

00:06:18,680 --> 00:06:24,770
very procedural very very old school

00:06:21,650 --> 00:06:26,330
yeah is there any problem with that one

00:06:24,770 --> 00:06:27,919
but it says look it's this is good

00:06:26,330 --> 00:06:31,370
masala why are you talking about so

00:06:27,919 --> 00:06:33,680
convenient some people thought about

00:06:31,370 --> 00:06:36,530
this that many old paper this is this

00:06:33,680 --> 00:06:37,850
one is from 1988 you know people talked

00:06:36,530 --> 00:06:40,580
about these things before this is not

00:06:37,850 --> 00:06:42,590
not new in this paper they came with

00:06:40,580 --> 00:06:45,229
reason they talked about the law of the

00:06:42,590 --> 00:06:47,600
meter some of you familiar with the law

00:06:45,229 --> 00:06:50,570
of Demeter I see the some heads going

00:06:47,600 --> 00:06:53,510
like this yes ok so the law of Demeter

00:06:50,570 --> 00:06:55,729
is very simple but this paper talks

00:06:53,510 --> 00:06:57,949
about in a very complicated way it goes

00:06:55,729 --> 00:07:00,050
like this for all classes see in all

00:06:57,949 --> 00:07:01,669
matters M attached to see objects with

00:07:00,050 --> 00:07:02,840
em since a message must be an instance

00:07:01,669 --> 00:07:05,120
of class associate with the following

00:07:02,840 --> 00:07:06,500
classes the argument classes of em or

00:07:05,120 --> 00:07:07,910
the instances variable classes of see

00:07:06,500 --> 00:07:09,440
you can you try to read that's why

00:07:07,910 --> 00:07:11,060
people didn't understand a lot the meter

00:07:09,440 --> 00:07:15,340
foot you know 20 years or something

00:07:11,060 --> 00:07:17,919
because they complicate it too much

00:07:15,340 --> 00:07:21,979
basically what I mean is that this is

00:07:17,919 --> 00:07:24,650
obscene that's what I mean why it's

00:07:21,979 --> 00:07:29,330
obscene because it's it hurts a very

00:07:24,650 --> 00:07:32,449
fundamental principle of design which is

00:07:29,330 --> 00:07:34,789
inappropriate intimacy you wouldn't put

00:07:32,449 --> 00:07:37,820
your head inside the valve mouth fly on

00:07:34,789 --> 00:07:40,070
new to the mouth of the lion to see what

00:07:37,820 --> 00:07:41,090
is inside that's what they're doing

00:07:40,070 --> 00:07:43,880
they're putting their heads inside with

00:07:41,090 --> 00:07:46,570
a lot of the mind lying lion's mouth you

00:07:43,880 --> 00:07:49,099
know get this get that get that

00:07:46,570 --> 00:07:50,990
inappropriate intimacy you are so

00:07:49,099 --> 00:07:52,639
intimate with the object let you know

00:07:50,990 --> 00:07:54,680
how the object get to the data and

00:07:52,639 --> 00:07:58,909
inside of the data inside of the data to

00:07:54,680 --> 00:08:01,400
get some behavior somewhere else okay so

00:07:58,909 --> 00:08:04,310
what's the problem with that the first

00:08:01,400 --> 00:08:06,289
thing is that it leads if you have gets

00:08:04,310 --> 00:08:09,249
everywhere the first thing is that you

00:08:06,289 --> 00:08:11,799
going to use the gets that's the problem

00:08:09,249 --> 00:08:14,139
have you put gets everywhere you're

00:08:11,799 --> 00:08:16,689
going to start writing your code based

00:08:14,139 --> 00:08:18,249
on structure the naming of your methods

00:08:16,689 --> 00:08:18,999
is going to be all based on structure

00:08:18,249 --> 00:08:21,129
you know you're going to forget

00:08:18,999 --> 00:08:22,809
completely about the domain methods and

00:08:21,129 --> 00:08:25,689
domain naming because you can just use

00:08:22,809 --> 00:08:29,769
the Gators that's the first problem

00:08:25,689 --> 00:08:31,689
second problem is fragility if you want

00:08:29,769 --> 00:08:33,909
to change something on for example in

00:08:31,689 --> 00:08:37,779
the ignite method if you want to change

00:08:33,909 --> 00:08:39,490
that what's going to happen everywhere

00:08:37,779 --> 00:08:41,430
else where you have get this get that

00:08:39,490 --> 00:08:44,829
get that all that code that is all

00:08:41,430 --> 00:08:47,709
uncontrollable you donk it's not

00:08:44,829 --> 00:08:52,149
encapsulated is available all that code

00:08:47,709 --> 00:08:54,269
is going to break it's not localized you

00:08:52,149 --> 00:08:57,100
know you have given a lot of people

00:08:54,269 --> 00:08:59,110
responsibility to deal with that so now

00:08:57,100 --> 00:09:00,970
if you change your mind about igniter

00:08:59,110 --> 00:09:02,500
how do you do ignite then you're going

00:09:00,970 --> 00:09:06,040
to have to change everywhere use code

00:09:02,500 --> 00:09:09,670
like this say its fragility let's go

00:09:06,040 --> 00:09:10,750
fragility also viscosity eat you know

00:09:09,670 --> 00:09:15,910
your project managers come to you and

00:09:10,750 --> 00:09:18,420
say hey can we do another sprint now now

00:09:15,910 --> 00:09:21,160
we need to do one spring top refactoring

00:09:18,420 --> 00:09:22,930
do you know the sprint of refactoring we

00:09:21,160 --> 00:09:25,839
have to stop everything now is a master

00:09:22,930 --> 00:09:27,759
and we have to clean everything but you

00:09:25,839 --> 00:09:30,069
know it's because it's so hard to do the

00:09:27,759 --> 00:09:31,930
right thing that's nice disk uses the

00:09:30,069 --> 00:09:33,790
code is becomes a viscous you want to do

00:09:31,930 --> 00:09:35,680
tests during development you can you

00:09:33,790 --> 00:09:36,910
cannot you want to do you know you want

00:09:35,680 --> 00:09:39,449
to do dependency injection you can't

00:09:36,910 --> 00:09:41,649
have everything is very sticky

00:09:39,449 --> 00:09:43,809
everything's glued together because

00:09:41,649 --> 00:09:48,399
you're using this data access direct

00:09:43,809 --> 00:09:50,350
access and disregard for encapsulation

00:09:48,399 --> 00:09:52,750
you're not using the even though you may

00:09:50,350 --> 00:09:55,959
have some methods based on the domain

00:09:52,750 --> 00:09:56,920
with good names and good good interfaces

00:09:55,959 --> 00:09:58,660
you're not using those interfaces

00:09:56,920 --> 00:10:00,850
because you can do directly can use the

00:09:58,660 --> 00:10:02,470
data directly so completely disregard

00:10:00,850 --> 00:10:06,610
encapsulation object-oriented you don't

00:10:02,470 --> 00:10:11,860
need any of that okay so all their

00:10:06,610 --> 00:10:15,279
complicated then the law of Demeter

00:10:11,860 --> 00:10:18,040
thing basically boils down to only talk

00:10:15,279 --> 00:10:19,449
to immediate friends don't go gettin

00:10:18,040 --> 00:10:23,490
gettin gettin gettin gettin gettin

00:10:19,449 --> 00:10:27,430
things and you know you put the data

00:10:23,490 --> 00:10:30,399
where the behavior is okay minimize

00:10:27,430 --> 00:10:32,230
interactions between objects so much

00:10:30,399 --> 00:10:33,880
easier if you want that behavior to be

00:10:32,230 --> 00:10:38,050
there that's where you access to be he

00:10:33,880 --> 00:10:39,940
would just bring the data there okay put

00:10:38,050 --> 00:10:42,100
the behavior and data together there's

00:10:39,940 --> 00:10:44,700
another name for that he appears in

00:10:42,100 --> 00:10:47,829
another paper around that time as well

00:10:44,700 --> 00:10:50,529
which is tell don't ask that's the name

00:10:47,829 --> 00:10:52,930
of the principal put the day to wear

00:10:50,529 --> 00:10:55,990
their behavior is and minimize

00:10:52,930 --> 00:10:58,380
interactions between objects okay so

00:10:55,990 --> 00:11:00,720
this is basically we're talking about

00:10:58,380 --> 00:11:02,980
things you can do to simplify the code

00:11:00,720 --> 00:11:06,070
there is a concept that we've been

00:11:02,980 --> 00:11:09,399
touching upon from the beginning of the

00:11:06,070 --> 00:11:11,769
class which is the enable enable of

00:11:09,399 --> 00:11:14,490
simplicity what is it the enable

00:11:11,769 --> 00:11:17,170
simplicity and what is the connection of

00:11:14,490 --> 00:11:22,810
simplicity and data-driven why doesn't

00:11:17,170 --> 00:11:23,950
even make things so complex so that they

00:11:22,810 --> 00:11:26,680
can't the concept is the concept of

00:11:23,950 --> 00:11:28,180
encapsulation this is Ron Jeffries he's

00:11:26,680 --> 00:11:30,610
one of the signatories of the agile

00:11:28,180 --> 00:11:32,800
manifesto he's also one of the founders

00:11:30,610 --> 00:11:35,050
of actually extreme programming he was

00:11:32,800 --> 00:11:38,440
in a community for a long long time he's

00:11:35,050 --> 00:11:42,579
a long long time programmer C++

00:11:38,440 --> 00:11:45,459
programmer so on the ward cunningham

00:11:42,579 --> 00:11:47,890
wiki he writes there were on a

00:11:45,459 --> 00:11:50,260
simplicity somewhere and simplicity that

00:11:47,890 --> 00:11:53,890
topic he says you know get it done in 10

00:11:50,260 --> 00:11:55,660
minutes i move on save all this big sort

00:11:53,890 --> 00:11:59,170
implementation from when the gold owners

00:11:55,660 --> 00:12:02,829
decided system is too slow so get it on

00:11:59,170 --> 00:12:05,470
and do the other other ideas that you

00:12:02,829 --> 00:12:07,329
have later on when the sponsors of the

00:12:05,470 --> 00:12:10,029
project saying that this is needed and

00:12:07,329 --> 00:12:12,390
then he but he doesn't end there he say

00:12:10,029 --> 00:12:15,640
encapsulation will save you

00:12:12,390 --> 00:12:17,949
encapsulation will save you if you write

00:12:15,640 --> 00:12:20,050
your own if you write your program with

00:12:17,949 --> 00:12:22,209
encapsulation in mind then you can

00:12:20,050 --> 00:12:24,519
change later on then you can you have

00:12:22,209 --> 00:12:26,980
the choice to change things later on

00:12:24,519 --> 00:12:29,500
it's not that this regard the future you

00:12:26,980 --> 00:12:31,089
have to write the code now thinking how

00:12:29,500 --> 00:12:35,050
can I write the code in a way that I can

00:12:31,089 --> 00:12:37,170
in the future and improve and add other

00:12:35,050 --> 00:12:41,290
pluggable elements

00:12:37,170 --> 00:12:46,660
okay this is possible because oo has in

00:12:41,290 --> 00:12:49,240
it a very fundamental principle which is

00:12:46,660 --> 00:12:52,000
the principal abstraction when the first

00:12:49,240 --> 00:12:53,770
year about abstraction and in my head

00:12:52,000 --> 00:12:57,160
when I hear abstractions are thinking

00:12:53,770 --> 00:13:00,130
I'm thinking about this you know this

00:12:57,160 --> 00:13:02,500
women because the women no broken down

00:13:00,130 --> 00:13:05,230
and did this for me this is the way they

00:13:02,500 --> 00:13:06,340
thought that comes to my mind what is

00:13:05,230 --> 00:13:09,940
why said why is this considered

00:13:06,340 --> 00:13:11,680
beautiful why in art they think it is

00:13:09,940 --> 00:13:15,400
something like this I always puzzled for

00:13:11,680 --> 00:13:18,970
many many years why this is no one of

00:13:15,400 --> 00:13:23,320
the biggest work of art of all time the

00:13:18,970 --> 00:13:25,960
castle you know what is because of doing

00:13:23,320 --> 00:13:28,300
here that is so beautiful why

00:13:25,960 --> 00:13:29,440
abstraction is so beautiful if you look

00:13:28,300 --> 00:13:31,480
at the dictionary there's something

00:13:29,440 --> 00:13:33,550
really nice in a definition of

00:13:31,480 --> 00:13:36,670
abstraction that really strikes up a

00:13:33,550 --> 00:13:41,230
bell inside of me abstraction is freedom

00:13:36,670 --> 00:13:42,610
from full representation completely know

00:13:41,230 --> 00:13:45,970
you're free you don't have to represent

00:13:42,610 --> 00:13:47,290
the whole thing you free the project

00:13:45,970 --> 00:13:51,420
management come to you and say I want

00:13:47,290 --> 00:13:54,250
you to create a print me report in XML

00:13:51,420 --> 00:13:57,570
you don't have to create a report in XML

00:13:54,250 --> 00:14:01,570
you have to create a report you're free

00:13:57,570 --> 00:14:04,950
it's free you just create a report free

00:14:01,570 --> 00:14:07,990
and then you attach an XML repair

00:14:04,950 --> 00:14:09,850
implementation no because you're using

00:14:07,990 --> 00:14:11,860
abstraction abstraction enable

00:14:09,850 --> 00:14:13,930
encapsulation abstraction and neighbor

00:14:11,860 --> 00:14:15,460
composition abstraction enable

00:14:13,930 --> 00:14:17,590
polymorphism without obstruction you

00:14:15,460 --> 00:14:20,620
have nothing of this so it's really

00:14:17,590 --> 00:14:22,930
really powerful an extra interface it's

00:14:20,620 --> 00:14:25,450
not more complication its last

00:14:22,930 --> 00:14:28,360
complication it would allow you to

00:14:25,450 --> 00:14:30,700
change your mind that's amazing it's a

00:14:28,360 --> 00:14:35,320
very very strong principled very very

00:14:30,700 --> 00:14:37,930
nice so for example let's get an example

00:14:35,320 --> 00:14:41,440
here so I'm doing I'm doing a I'm

00:14:37,930 --> 00:14:43,300
writing and rewriting phpunit for

00:14:41,440 --> 00:14:46,210
example everyone familiar with page per

00:14:43,300 --> 00:14:49,250
unit it's a testing framework is that's

00:14:46,210 --> 00:14:52,680
there are orders but this is one

00:14:49,250 --> 00:14:55,440
so I'm rewriting it so this is my first

00:14:52,680 --> 00:14:59,730
implementation simple I have test runner

00:14:55,440 --> 00:15:01,440
and I'm attaching to the runner the the

00:14:59,730 --> 00:15:03,750
full matter which is just going to print

00:15:01,440 --> 00:15:05,550
a dot if the desk bus is going to print

00:15:03,750 --> 00:15:07,980
laughs if the test fails that makes

00:15:05,550 --> 00:15:10,829
sense so you pass the test of the run

00:15:07,980 --> 00:15:13,170
method runs the method if it catches an

00:15:10,829 --> 00:15:17,250
exception and marks fails if it doesn't

00:15:13,170 --> 00:15:19,139
Danny Mac's pass yeah straightforward so

00:15:17,250 --> 00:15:21,259
I'm doing everything right here that mm

00:15:19,139 --> 00:15:25,550
anti I'm doing the dependency injection

00:15:21,259 --> 00:15:29,190
my code looks beautiful object oriented

00:15:25,550 --> 00:15:31,459
yeah no flowers what's wrong with this

00:15:29,190 --> 00:15:36,529
code is perfect looks I'm using

00:15:31,459 --> 00:15:42,029
exceptions I'm going oh oh it's nice

00:15:36,529 --> 00:15:43,620
okay but but and in this case my

00:15:42,029 --> 00:15:46,610
customers are the developers are going

00:15:43,620 --> 00:15:50,279
to use the code the customers they know

00:15:46,610 --> 00:15:52,889
they know everything they know

00:15:50,279 --> 00:15:54,810
everything and kebab say that all the

00:15:52,889 --> 00:15:57,149
customers Everon every night they go to

00:15:54,810 --> 00:16:00,029
get in this conference room and they

00:15:57,149 --> 00:16:02,370
they talk with the evil little minds and

00:16:00,029 --> 00:16:04,560
they talk about the things that you did

00:16:02,370 --> 00:16:06,870
in your code that is going to break in

00:16:04,560 --> 00:16:09,269
the future and it comes morrow and asked

00:16:06,870 --> 00:16:12,480
for that future that you can't implement

00:16:09,269 --> 00:16:14,130
they know they know what you cannot

00:16:12,480 --> 00:16:16,079
change in your code and they can come

00:16:14,130 --> 00:16:22,079
tomorrow and ask you to change is likely

00:16:16,079 --> 00:16:24,990
that part of your code no so in this

00:16:22,079 --> 00:16:28,110
case I have a special customer and he

00:16:24,990 --> 00:16:31,380
comes to me and say I want another

00:16:28,110 --> 00:16:33,569
formatter and a look at my code my code

00:16:31,380 --> 00:16:38,250
is a hard-coded the progress for matter

00:16:33,569 --> 00:16:41,910
as a dependency one more can do now what

00:16:38,250 --> 00:16:44,990
we're going to do now I know I know I

00:16:41,910 --> 00:16:46,949
just I just extend the progress for Mata

00:16:44,990 --> 00:16:48,829
inheritance for the way object

00:16:46,949 --> 00:16:51,930
orientation meeting hair that's right I

00:16:48,829 --> 00:16:55,259
just extended other progress mamata and

00:16:51,930 --> 00:16:57,240
create my nyan cat for matter and I'm

00:16:55,259 --> 00:16:59,370
good to go I just you know the pennies

00:16:57,240 --> 00:17:01,769
injection I need Jack the dependence and

00:16:59,370 --> 00:17:03,660
it's all good to go

00:17:01,769 --> 00:17:06,720
all problems so because i use dependency

00:17:03,660 --> 00:17:11,539
injection I'm safe I have beautiful code

00:17:06,720 --> 00:17:16,169
yeah sounds good so very logical

00:17:11,539 --> 00:17:19,860
remember remember for you to be free you

00:17:16,169 --> 00:17:21,299
need abstraction you're not free here

00:17:19,860 --> 00:17:25,770
because you don't have abstraction you

00:17:21,299 --> 00:17:28,799
have to be free you need to be free you

00:17:25,770 --> 00:17:34,380
need to be free so you need abstractions

00:17:28,799 --> 00:17:37,770
to be free okay so let's create an

00:17:34,380 --> 00:17:39,120
abstraction okay so what what format i'm

00:17:37,770 --> 00:17:41,159
passing here this time what will matter

00:17:39,120 --> 00:17:46,610
is this is a nyan cat of progress for

00:17:41,159 --> 00:17:50,010
matter hmm it's an abstract for matter

00:17:46,610 --> 00:17:53,730
i'm free i can whatever I want there now

00:17:50,010 --> 00:17:56,220
I can put whatever I want I can put an

00:17:53,730 --> 00:18:02,520
XML for matter i can put I don't know

00:17:56,220 --> 00:18:06,840
away you name it I can put a what a Ju

00:18:02,520 --> 00:18:09,690
date formatter free so that's why that's

00:18:06,840 --> 00:18:11,659
why abstraction is important that's why

00:18:09,690 --> 00:18:13,919
we needed a we need it there for

00:18:11,659 --> 00:18:17,820
encapsulation from composition for all

00:18:13,919 --> 00:18:19,889
the kind of things when do we abstract

00:18:17,820 --> 00:18:22,529
do we abstract everywhere now Marcello

00:18:19,889 --> 00:18:24,690
said obstruction is good so all my

00:18:22,529 --> 00:18:31,279
classes are going to implement an

00:18:24,690 --> 00:18:34,230
interface is that right no design is

00:18:31,279 --> 00:18:38,270
horrible you know writing code is nice

00:18:34,230 --> 00:18:38,270
because it just copy paste from the web

00:18:38,480 --> 00:18:43,950
but this line is not like that you can't

00:18:41,549 --> 00:18:45,570
copy paste design patterns you can't see

00:18:43,950 --> 00:18:47,730
can't even though you want so you can't

00:18:45,570 --> 00:18:49,880
you had to use your brain and that's a

00:18:47,730 --> 00:18:52,980
mass that's that's that's a pain in ass

00:18:49,880 --> 00:18:54,779
so you need to know things you need to

00:18:52,980 --> 00:18:56,159
understand ok I going to abstract roles

00:18:54,779 --> 00:18:57,690
that I know they can't change i'm going

00:18:56,159 --> 00:18:59,549
to look for things that can change in my

00:18:57,690 --> 00:19:03,059
code and i'm going to abstract rules

00:18:59,549 --> 00:19:05,010
like that ok so what is an interface an

00:19:03,059 --> 00:19:07,409
interface is a roll and a bunch of

00:19:05,010 --> 00:19:11,190
responsibilities ok so now you create an

00:19:07,409 --> 00:19:14,000
interface you're identifying a role an

00:19:11,190 --> 00:19:15,510
abstract role in your system and

00:19:14,000 --> 00:19:17,430
attached to their

00:19:15,510 --> 00:19:19,020
role is a bunch of responsibility that's

00:19:17,430 --> 00:19:22,430
what you define in a role a role is

00:19:19,020 --> 00:19:24,720
something that has responsibilities okay

00:19:22,430 --> 00:19:27,300
so that plays really well with a concept

00:19:24,720 --> 00:19:29,240
/ well you have all these objects that

00:19:27,300 --> 00:19:31,950
talking to each other all of them are

00:19:29,240 --> 00:19:34,830
identified roles in your system and they

00:19:31,950 --> 00:19:37,800
accomplish things through that interface

00:19:34,830 --> 00:19:40,350
you just asked the top one hey I want a

00:19:37,800 --> 00:19:41,700
nyan cat and then he's gonna talk to

00:19:40,350 --> 00:19:43,530
everybody there and then give you back

00:19:41,700 --> 00:19:44,690
any and get Nyan Cat Island and you

00:19:43,530 --> 00:19:47,010
don't even know what happened and

00:19:44,690 --> 00:19:49,350
interesting things that they don't even

00:19:47,010 --> 00:19:51,540
know what happens the classes don't know

00:19:49,350 --> 00:19:54,390
what's going to happen at runtime is the

00:19:51,540 --> 00:19:55,710
messaging the networking of message

00:19:54,390 --> 00:19:57,360
exchanges between the object that's

00:19:55,710 --> 00:19:59,030
going to give you the behavior that you

00:19:57,360 --> 00:20:02,370
want that's the beauty of a wall that

00:19:59,030 --> 00:20:05,220
predictability you that you have in

00:20:02,370 --> 00:20:06,570
procedure is gone you can read the

00:20:05,220 --> 00:20:10,170
procedural code and you can see what's

00:20:06,570 --> 00:20:12,930
going on you know no you don't know you

00:20:10,170 --> 00:20:14,640
know you just know at runtime what is

00:20:12,930 --> 00:20:17,840
what is the behavior that's going to

00:20:14,640 --> 00:20:20,760
happen when you plug everything together

00:20:17,840 --> 00:20:22,860
so when you when you when you look at

00:20:20,760 --> 00:20:24,540
your test hunter rather you know that

00:20:22,860 --> 00:20:25,680
you need a formatter but at runtime you

00:20:24,540 --> 00:20:27,510
don't know what format are you going to

00:20:25,680 --> 00:20:29,580
have only one time you know that which

00:20:27,510 --> 00:20:31,500
formatter you're going to have by

00:20:29,580 --> 00:20:34,230
looking at the code you 10 so that's the

00:20:31,500 --> 00:20:36,150
principle of super substitutability I

00:20:34,230 --> 00:20:39,270
have a problem with that word submitted

00:20:36,150 --> 00:20:41,610
suitability substitutability so the gun

00:20:39,270 --> 00:20:46,440
go for they lacked a lot is this concept

00:20:41,610 --> 00:20:48,930
of substitutability so that's when you

00:20:46,440 --> 00:20:50,850
decide to add an abstraction you decide

00:20:48,930 --> 00:20:54,570
to add an abstraction when you want a

00:20:50,850 --> 00:20:55,860
spot concepts that can't change but you

00:20:54,570 --> 00:20:58,020
have to make decisions you have to make

00:20:55,860 --> 00:20:59,930
decisions in the code and sometimes you

00:20:58,020 --> 00:21:03,780
have to think about should i do this now

00:20:59,930 --> 00:21:05,250
should i do this later and that's very

00:21:03,780 --> 00:21:07,470
tough that's that that's one of the

00:21:05,250 --> 00:21:10,950
things that you you gang you get used to

00:21:07,470 --> 00:21:14,760
when you get used to design it's a very

00:21:10,950 --> 00:21:19,020
nice concept by Preston Smith and when

00:21:14,760 --> 00:21:22,340
he it talks about decide later make the

00:21:19,020 --> 00:21:24,540
community at last responsible moments

00:21:22,340 --> 00:21:26,880
okay that's very very important for

00:21:24,540 --> 00:21:29,080
simplicity if you don't need to decide

00:21:26,880 --> 00:21:31,420
now don't decide now

00:21:29,080 --> 00:21:34,600
decide at the last responsible morning

00:21:31,420 --> 00:21:35,620
that doesn't mean that you were ignore

00:21:34,600 --> 00:21:37,870
things that you know he's going to come

00:21:35,620 --> 00:21:38,770
in at the end of the spring and if you

00:21:37,870 --> 00:21:41,560
know he's going to come it into the

00:21:38,770 --> 00:21:43,240
strange and it's now is the last

00:21:41,560 --> 00:21:44,380
responsible moment then what you're

00:21:43,240 --> 00:21:47,590
going to do now you're going to add

00:21:44,380 --> 00:21:49,600
abstraction at the last responsible

00:21:47,590 --> 00:21:52,090
moment you can start with the concrete

00:21:49,600 --> 00:21:54,730
implementation and I Sunnis become a

00:21:52,090 --> 00:22:00,250
problem or you foresee the problem then

00:21:54,730 --> 00:22:01,570
you can amend the design so but you need

00:22:00,250 --> 00:22:02,980
to think about these things when you're

00:22:01,570 --> 00:22:06,840
plugging things together you have to

00:22:02,980 --> 00:22:09,490
that's what design is design is a design

00:22:06,840 --> 00:22:13,210
so that it can commit later so that you

00:22:09,490 --> 00:22:16,180
your architecture is free ok so the

00:22:13,210 --> 00:22:18,310
freedom the agility that's these things

00:22:16,180 --> 00:22:20,340
come from the arrival community this

00:22:18,310 --> 00:22:23,710
gives you ability this gives you the

00:22:20,340 --> 00:22:25,780
chance to change your code and evolve

00:22:23,710 --> 00:22:29,350
your system around time that's what this

00:22:25,780 --> 00:22:31,510
is doing ok so that's this also that the

00:22:29,350 --> 00:22:34,000
fabric oh there are the elements of a

00:22:31,510 --> 00:22:35,950
wall when you look the things that you

00:22:34,000 --> 00:22:39,610
built in your system you're going to

00:22:35,950 --> 00:22:44,470
have two main concepts I like this idea

00:22:39,610 --> 00:22:47,110
is from the the growing object-oriented

00:22:44,470 --> 00:22:49,210
guided by test book if you haven't read

00:22:47,110 --> 00:22:51,850
this book as i recommend you you have a

00:22:49,210 --> 00:22:54,070
look at a very good book so let us talk

00:22:51,850 --> 00:22:55,570
about this to the kind of separating

00:22:54,070 --> 00:22:57,550
these two ideas that you can represent

00:22:55,570 --> 00:22:59,590
both with classes by the way you can

00:22:57,550 --> 00:23:01,150
represent objects with classes if you

00:22:59,590 --> 00:23:03,460
can also represent values with with

00:23:01,150 --> 00:23:05,920
glasses but they're objects they're

00:23:03,460 --> 00:23:08,590
quite special the objects are quite

00:23:05,920 --> 00:23:11,230
special because with objects they have

00:23:08,590 --> 00:23:15,190
identity they have state and they have

00:23:11,230 --> 00:23:17,860
behavior ok so if you you can if you if

00:23:15,190 --> 00:23:19,450
you in PHP you you have some method that

00:23:17,860 --> 00:23:21,490
allows you to get the idea of the object

00:23:19,450 --> 00:23:23,200
so you can compare objects to see if the

00:23:21,490 --> 00:23:25,330
same subjects because they have identity

00:23:23,200 --> 00:23:27,280
they had that thing in the memory they

00:23:25,330 --> 00:23:30,520
have an identity in a physical sense

00:23:27,280 --> 00:23:31,810
also they have an identity can be

00:23:30,520 --> 00:23:33,490
represented as an identity with

00:23:31,810 --> 00:23:35,410
something that can be persisted and you

00:23:33,490 --> 00:23:39,490
can recover late on time that's the

00:23:35,410 --> 00:23:41,850
concept of entities and the object can

00:23:39,490 --> 00:23:43,200
have state and they encapsulate

00:23:41,850 --> 00:23:45,510
so you can ask stuff for them which is

00:23:43,200 --> 00:23:49,350
the behavior so they know what to do

00:23:45,510 --> 00:23:52,549
with the behavior okay so entities have

00:23:49,350 --> 00:23:55,880
all of those things entities they have

00:23:52,549 --> 00:23:58,440
identities they have states but people

00:23:55,880 --> 00:24:01,169
strip away all of their behavior of the

00:23:58,440 --> 00:24:03,690
entities make them a bag of setters and

00:24:01,169 --> 00:24:06,480
getters and put the behavior in the

00:24:03,690 --> 00:24:09,120
controller I don't understand that this

00:24:06,480 --> 00:24:12,030
is the perfect place to put the behavior

00:24:09,120 --> 00:24:16,080
of domain objects okay so entities they

00:24:12,030 --> 00:24:18,600
have identities they have state and why

00:24:16,080 --> 00:24:20,809
not use them in your design this is a

00:24:18,600 --> 00:24:22,860
perfect place to use them in your design

00:24:20,809 --> 00:24:26,400
so let's talk about the process together

00:24:22,860 --> 00:24:27,870
to get responsibility driven design so

00:24:26,400 --> 00:24:29,730
we've been talking about the data driven

00:24:27,870 --> 00:24:31,710
design a lot putting it down data-driven

00:24:29,730 --> 00:24:35,010
is bed and we've given some some reasons

00:24:31,710 --> 00:24:38,429
why it's problematic so what is good

00:24:35,010 --> 00:24:40,289
about responsibility driven design by

00:24:38,429 --> 00:24:43,350
the way this is not just a new disease

00:24:40,289 --> 00:24:46,500
something very old again everything is

00:24:43,350 --> 00:24:49,100
being stowed in the past we just I don't

00:24:46,500 --> 00:24:52,770
know why we don't listen to these people

00:24:49,100 --> 00:24:54,600
that kind of a you know enlightenment of

00:24:52,770 --> 00:24:56,580
software development in the 80s and

00:24:54,600 --> 00:24:58,289
we're now recovering them we were being

00:24:56,580 --> 00:25:01,350
through a middle-aged of software

00:24:58,289 --> 00:25:04,740
development or something so the this is

00:25:01,350 --> 00:25:06,929
Rebecca where's broke Brook and she

00:25:04,740 --> 00:25:09,830
talks about the she's the for the first

00:25:06,929 --> 00:25:14,610
DD person responsibility driven design

00:25:09,830 --> 00:25:16,169
came came about 1988 or something so she

00:25:14,610 --> 00:25:17,669
says that right in the beginning of the

00:25:16,169 --> 00:25:19,890
paper the full benefit of a bowl can

00:25:17,669 --> 00:25:23,490
only be realized if encapsulation is

00:25:19,890 --> 00:25:25,440
maximized during the design process so

00:25:23,490 --> 00:25:29,340
you have to think of encapsulation when

00:25:25,440 --> 00:25:34,340
you're designing your your your your

00:25:29,340 --> 00:25:39,330
objects okay so and ward cunningham

00:25:34,340 --> 00:25:40,470
don't talk to me fit on a word now

00:25:39,330 --> 00:25:43,230
serious if you don't know this guy you

00:25:40,470 --> 00:25:45,270
have to read go back and read everything

00:25:43,230 --> 00:25:47,789
about what can here's the godfather of

00:25:45,270 --> 00:25:50,040
everything we know the guy who behind

00:25:47,789 --> 00:25:52,650
the design patterns extreme programming

00:25:50,040 --> 00:25:55,539
test driven development everything that

00:25:52,650 --> 00:26:00,970
you think someone else did he actually

00:25:55,539 --> 00:26:02,259
it say he created a his like em like I

00:26:00,970 --> 00:26:04,389
had to train some people in

00:26:02,259 --> 00:26:06,190
object-oriented programming and his

00:26:04,389 --> 00:26:09,789
students were all like coming from

00:26:06,190 --> 00:26:11,649
procedural school so he found a way of

00:26:09,789 --> 00:26:14,889
training them into object-oriented

00:26:11,649 --> 00:26:18,639
programming and this is the searcy cards

00:26:14,889 --> 00:26:20,919
yeah have used here see cards oh good

00:26:18,639 --> 00:26:24,970
it's good mostly vika hands but as

00:26:20,919 --> 00:26:27,940
someone that I guess cool so crc cards

00:26:24,970 --> 00:26:30,309
are very very good if you are learning

00:26:27,940 --> 00:26:33,340
to do responsibility for indesign once

00:26:30,309 --> 00:26:35,979
you do crc cards for a while you can

00:26:33,340 --> 00:26:37,809
ditch them you can just use tests this

00:26:35,979 --> 00:26:40,179
is to help you think the responsibility

00:26:37,809 --> 00:26:42,460
driven way okay so what is the process

00:26:40,179 --> 00:26:46,389
you identify scenarios think about the

00:26:42,460 --> 00:26:48,460
scenarios think about use cases just the

00:26:46,389 --> 00:26:50,409
same way you do in your normal process

00:26:48,460 --> 00:26:52,299
that doesn't change okay once you

00:26:50,409 --> 00:26:54,580
understand what you have to do what are

00:26:52,299 --> 00:26:57,809
you listening for in this case is not

00:26:54,580 --> 00:27:00,070
names and eject adjectives and kind of a

00:26:57,809 --> 00:27:02,470
modeling the real world thing you're

00:27:00,070 --> 00:27:05,649
listening to behaviors what is it that

00:27:02,470 --> 00:27:07,720
my system has to do that's what you your

00:27:05,649 --> 00:27:10,269
antennas are on my system has to do this

00:27:07,720 --> 00:27:12,519
this is the behavior so identify

00:27:10,269 --> 00:27:15,489
scenarios and start writing down

00:27:12,519 --> 00:27:16,989
responsibilities someone is writing down

00:27:15,489 --> 00:27:18,609
all the responsibilities on a board I

00:27:16,989 --> 00:27:19,809
have to do these have to do these I have

00:27:18,609 --> 00:27:21,580
to do it you don't have to do this for

00:27:19,809 --> 00:27:23,200
the whole system you do this for the

00:27:21,580 --> 00:27:26,080
beat of the system that you're working

00:27:23,200 --> 00:27:29,349
on that strange okay it's not big design

00:27:26,080 --> 00:27:31,090
up front okay small design just so the

00:27:29,349 --> 00:27:33,549
things that are working on think about

00:27:31,090 --> 00:27:35,229
responsibilities right and down once you

00:27:33,549 --> 00:27:37,690
have the responsibilities then you think

00:27:35,229 --> 00:27:39,879
about roles no other other way around

00:27:37,690 --> 00:27:42,159
don't start with the rose first and then

00:27:39,879 --> 00:27:43,809
put responsibilities to them okay you

00:27:42,159 --> 00:27:46,960
start thinking of the responsibilities

00:27:43,809 --> 00:27:48,700
first and if you go for the roles first

00:27:46,960 --> 00:27:50,619
whether you're gonna end up with loads

00:27:48,700 --> 00:27:52,210
of data bags you're going to have roles

00:27:50,619 --> 00:27:53,799
I have no responsibilities at all and

00:27:52,210 --> 00:27:57,309
you back to your entities with getters

00:27:53,799 --> 00:27:58,899
and setters forget about roles I think

00:27:57,309 --> 00:28:00,940
first of responsibilities once you have

00:27:58,899 --> 00:28:01,809
responsibilities then you find out what

00:28:00,940 --> 00:28:04,599
is the best place for these

00:28:01,809 --> 00:28:06,720
responsibilities then you start thinking

00:28:04,599 --> 00:28:08,550
about entities that would have behavior

00:28:06,720 --> 00:28:12,030
yeah things that

00:28:08,550 --> 00:28:16,500
it makes sense once you've done that

00:28:12,030 --> 00:28:18,600
then you in the middle of it and you're

00:28:16,500 --> 00:28:20,370
going to try okay I need some valacea

00:28:18,600 --> 00:28:22,830
need something else that some of it is

00:28:20,370 --> 00:28:24,840
actually going to be data bags but you

00:28:22,830 --> 00:28:27,750
can represent them as values more but

00:28:24,840 --> 00:28:30,390
more about that later once you done that

00:28:27,750 --> 00:28:31,890
exercise you have your Searcy what are

00:28:30,390 --> 00:28:36,300
you going to identify it is that your

00:28:31,890 --> 00:28:38,460
roles they become they may be doing too

00:28:36,300 --> 00:28:40,460
much they may be doing things that

00:28:38,460 --> 00:28:43,140
belong somewhere else in your system

00:28:40,460 --> 00:28:44,880
okay and how do you know that because

00:28:43,140 --> 00:28:48,050
they are transcending boundaries that if

00:28:44,880 --> 00:28:50,160
you think about your system has layers

00:28:48,050 --> 00:28:51,990
some of the things in your system of

00:28:50,160 --> 00:28:54,300
really the business this is what my

00:28:51,990 --> 00:28:56,550
business does this is a domain and this

00:28:54,300 --> 00:28:59,610
thing it's completely different this is

00:28:56,550 --> 00:29:00,720
this is my database this is my web so if

00:28:59,610 --> 00:29:04,800
you are dental find the boundaries of

00:29:00,720 --> 00:29:06,780
your system then you can attach adapters

00:29:04,800 --> 00:29:08,430
you can attach the abstractions between

00:29:06,780 --> 00:29:09,900
the roles and this is the process in

00:29:08,430 --> 00:29:11,820
which you find your collaborators and

00:29:09,900 --> 00:29:14,640
its really nice to do this with crc

00:29:11,820 --> 00:29:16,920
because you do that very very quickly so

00:29:14,640 --> 00:29:21,480
you you get a whiteboard if you don't

00:29:16,920 --> 00:29:23,280
have a whiteboard get a whiteboard if

00:29:21,480 --> 00:29:24,900
the managers put a whiteboard in the

00:29:23,280 --> 00:29:30,330
meeting room you take it back again if

00:29:24,900 --> 00:29:33,750
put back near where you work and defend

00:29:30,330 --> 00:29:37,890
it with your life whiteboard is almost

00:29:33,750 --> 00:29:40,020
as important to keyboard okay so you you

00:29:37,890 --> 00:29:42,690
put a list off I'm not sure if that's

00:29:40,020 --> 00:29:46,680
going to work so you put the list of you

00:29:42,690 --> 00:29:49,140
see the now it doesn't go back there so

00:29:46,680 --> 00:29:51,600
that's the least of your behaviors on

00:29:49,140 --> 00:29:53,550
the top everyone is someone is listening

00:29:51,600 --> 00:29:55,290
other behaviors and once you have all

00:29:53,550 --> 00:29:59,280
the behaviors use the right column to

00:29:55,290 --> 00:30:01,260
attach roles to it yeah now they have a

00:29:59,280 --> 00:30:03,360
nice place to go you thought about the

00:30:01,260 --> 00:30:06,990
behaviors they go to they go to a nice

00:30:03,360 --> 00:30:09,630
place so once you have that then you

00:30:06,990 --> 00:30:11,700
start thinking okay my region validator

00:30:09,630 --> 00:30:15,380
is doing too much I'm going to delegate

00:30:11,700 --> 00:30:15,380
some of these to my region to my

00:30:15,620 --> 00:30:21,830
relative position calculator whatever

00:30:18,870 --> 00:30:23,360
that is and you're delegating stuff

00:30:21,830 --> 00:30:24,830
imagining you imagining your boundaries

00:30:23,360 --> 00:30:26,059
okay this doesn't belong in a domain

00:30:24,830 --> 00:30:27,710
this is something the database is going

00:30:26,059 --> 00:30:32,149
to do I'm going to imagine the dream

00:30:27,710 --> 00:30:34,190
your boundaries ok so like it and then

00:30:32,149 --> 00:30:35,690
you end up with cars like the crc cards

00:30:34,190 --> 00:30:37,429
you hadn't the top you have the name of

00:30:35,690 --> 00:30:40,000
your role then you have responsibilities

00:30:37,429 --> 00:30:43,159
and then on the right side you have the

00:30:40,000 --> 00:30:44,929
collaborators so roles responsibilities

00:30:43,159 --> 00:30:47,179
collaborators this is the this is the

00:30:44,929 --> 00:30:53,059
fabric of object-oriented programming

00:30:47,179 --> 00:30:56,690
the fabric okay so someone wrote a blog

00:30:53,059 --> 00:31:00,080
post and say I know what TDD is I'm

00:30:56,690 --> 00:31:04,279
writing a code and I'm dreaming the

00:31:00,080 --> 00:31:05,899
objects and Uncle Bob said no no no no

00:31:04,279 --> 00:31:08,539
no you have to you have to you have to

00:31:05,899 --> 00:31:10,549
have the objects in your head what

00:31:08,539 --> 00:31:12,139
you're actually dreaming is the

00:31:10,549 --> 00:31:13,340
boundaries you're thinking the limits

00:31:12,139 --> 00:31:15,830
between the boundaries that's what

00:31:13,340 --> 00:31:18,470
that's what you have to focus on you

00:31:15,830 --> 00:31:19,820
have to have an idea what what are the

00:31:18,470 --> 00:31:22,220
boundaries of your system you have that

00:31:19,820 --> 00:31:23,840
that you have to know beforehand ok i

00:31:22,220 --> 00:31:27,470
have this layer this is my domain this

00:31:23,840 --> 00:31:29,840
is my persistence this is my UI this is

00:31:27,470 --> 00:31:31,610
you have to know that beforehand you

00:31:29,840 --> 00:31:34,159
dream your boundaries before hands and

00:31:31,610 --> 00:31:35,929
then everything fits in when once you

00:31:34,159 --> 00:31:37,639
once you understand the responsibility

00:31:35,929 --> 00:31:38,899
of your system so something like that

00:31:37,639 --> 00:31:41,840
this is called the dependency inversion

00:31:38,899 --> 00:31:45,200
principle have you heard about this yes

00:31:41,840 --> 00:31:48,019
oh this is so verra PHP community is

00:31:45,200 --> 00:31:50,720
this unbelievable ask that question five

00:31:48,019 --> 00:31:52,809
years ago and this is no hands so

00:31:50,720 --> 00:31:56,269
dependency inversion principle is that

00:31:52,809 --> 00:31:58,370
you have these higher level modules they

00:31:56,269 --> 00:32:01,250
cannot depend directly on the lower

00:31:58,370 --> 00:32:03,679
level implementations ok if they are in

00:32:01,250 --> 00:32:06,559
a lower level layer they don't depend

00:32:03,679 --> 00:32:09,679
directly on them they will depend on an

00:32:06,559 --> 00:32:11,899
abstraction yeah and the lower level

00:32:09,679 --> 00:32:13,279
module will implement the abstraction so

00:32:11,899 --> 00:32:16,490
that's how it that's how they talk

00:32:13,279 --> 00:32:19,610
together ok so basically your controller

00:32:16,490 --> 00:32:22,460
will depend on a repository interface

00:32:19,610 --> 00:32:24,919
not in a doctrine interface or anything

00:32:22,460 --> 00:32:30,130
and then the lower level we implement

00:32:24,919 --> 00:32:33,320
that ok are you desperate to see code on

00:32:30,130 --> 00:32:37,269
yeah ok this is

00:32:33,320 --> 00:32:43,279
this is some code so here you have a

00:32:37,269 --> 00:32:45,980
service that it's a looks to find out

00:32:43,279 --> 00:32:47,840
what is the competency dictionary of a

00:32:45,980 --> 00:32:49,190
certain learner this is a domain that

00:32:47,840 --> 00:32:51,380
I'm very familiar with I don't expect

00:32:49,190 --> 00:32:54,470
you to be familiar with because I work

00:32:51,380 --> 00:32:58,460
in a learning development department so

00:32:54,470 --> 00:33:00,799
I know that this is a you get to learner

00:32:58,460 --> 00:33:03,740
and then for that particular learner I

00:33:00,799 --> 00:33:05,269
have to find what is his dictionary of

00:33:03,740 --> 00:33:09,139
SKUs what is this cube that he needs as

00:33:05,269 --> 00:33:11,029
a learner okay so this is how the this

00:33:09,139 --> 00:33:15,080
that it looks very very simple you have

00:33:11,029 --> 00:33:17,899
a constructor that constructs that's all

00:33:15,080 --> 00:33:20,000
it does and then you have a method with

00:33:17,899 --> 00:33:21,500
the behavior and that behavior is

00:33:20,000 --> 00:33:25,039
pushing down to the lower level

00:33:21,500 --> 00:33:27,889
implementation how to do stuff so we

00:33:25,039 --> 00:33:30,230
have a service that's the competitive

00:33:27,889 --> 00:33:33,559
competitive finder who has a dependency

00:33:30,230 --> 00:33:35,899
on on a finder and as the finder please

00:33:33,559 --> 00:33:41,330
find this guy for me and the finder of

00:33:35,899 --> 00:33:42,740
course is an abstraction okay so that's

00:33:41,330 --> 00:33:43,820
the pentacene version you depend on an

00:33:42,740 --> 00:33:45,860
abstraction and you're going to have

00:33:43,820 --> 00:33:50,320
like a doctrine repository or something

00:33:45,860 --> 00:33:52,820
to implement that and your controller

00:33:50,320 --> 00:33:54,799
you get your service and eject your

00:33:52,820 --> 00:33:59,120
service and you have one line

00:33:54,799 --> 00:34:01,039
controllers yeah my mom doesn't believe

00:33:59,120 --> 00:34:05,269
me say mom I have one line controllers

00:34:01,039 --> 00:34:09,470
saying no you don't yes I do I have one

00:34:05,269 --> 00:34:10,909
language look ah yeah well like one line

00:34:09,470 --> 00:34:13,159
control that's all you need if you if

00:34:10,909 --> 00:34:14,659
you push the responsibilities down you

00:34:13,159 --> 00:34:16,339
end up with one line controllers you can

00:34:14,659 --> 00:34:19,730
show your mom she wouldn't believe you

00:34:16,339 --> 00:34:21,440
buddy yeah he pushed the

00:34:19,730 --> 00:34:25,849
responsibilities down responsibility

00:34:21,440 --> 00:34:28,149
driven and this is a this is the concept

00:34:25,849 --> 00:34:33,109
of ng an entity that doesn't look like a

00:34:28,149 --> 00:34:34,369
an open whatever with getters and

00:34:33,109 --> 00:34:37,280
setters you don't need the getters and

00:34:34,369 --> 00:34:40,929
setters you know if you need that's just

00:34:37,280 --> 00:34:42,950
beautiful solutions now for persisting

00:34:40,929 --> 00:34:46,040
positioning entities if that's your

00:34:42,950 --> 00:34:47,060
problem so you can create you create an

00:34:46,040 --> 00:34:49,100
entity in this

00:34:47,060 --> 00:34:50,480
is a name constructor you know i'm not

00:34:49,100 --> 00:34:54,410
using just a constructor museum named

00:34:50,480 --> 00:34:57,050
constructor i'm in this i use the skill

00:34:54,410 --> 00:34:59,290
and i'm gonna rate something i'm gonna

00:34:57,050 --> 00:35:03,350
raid someone his cue on a particular

00:34:59,290 --> 00:35:05,030
skill area so I i just called skew rates

00:35:03,350 --> 00:35:07,670
pass the skill pass the learner and

00:35:05,030 --> 00:35:10,190
passer rating and i save that into a

00:35:07,670 --> 00:35:11,960
list of events and i can completely

00:35:10,190 --> 00:35:13,760
forget about that because then the

00:35:11,960 --> 00:35:15,980
persistent layer will iterate through

00:35:13,760 --> 00:35:18,350
all the objects that needs to be

00:35:15,980 --> 00:35:21,380
persisted and we'll take care of that my

00:35:18,350 --> 00:35:23,330
entity knows nothing about that that's

00:35:21,380 --> 00:35:25,130
that's called even even so since there

00:35:23,330 --> 00:35:30,140
are all the solutions this is very very

00:35:25,130 --> 00:35:33,920
nice way of getting rid of another worry

00:35:30,140 --> 00:35:36,950
about persistence so you don't need yeah

00:35:33,920 --> 00:35:39,230
my cell you have a gator there yeah but

00:35:36,950 --> 00:35:41,330
you understand that this Gators is it's

00:35:39,230 --> 00:35:44,300
completely I'm not exposing the state of

00:35:41,330 --> 00:35:48,350
my object you with me I'm not exposing

00:35:44,300 --> 00:35:50,090
the state of my object I'm allowing to

00:35:48,350 --> 00:35:51,260
the positions layer to persist my object

00:35:50,090 --> 00:35:53,950
and that's really one of the

00:35:51,260 --> 00:35:56,240
responsibilities of my entity anyway

00:35:53,950 --> 00:36:02,210
okay any thought you're going to go with

00:35:56,240 --> 00:36:08,830
our TDD now tdg just then I'll let you

00:36:02,210 --> 00:36:13,160
go so where does TDD fit in all of this

00:36:08,830 --> 00:36:15,830
so once once you do crc for some time

00:36:13,160 --> 00:36:18,410
you appreciate what the process is to

00:36:15,830 --> 00:36:20,900
create responsibilities to create nice

00:36:18,410 --> 00:36:22,550
interfaces to create to push down the

00:36:20,900 --> 00:36:24,080
responsibility of your objects to tell

00:36:22,550 --> 00:36:28,820
how objects communicate with each other

00:36:24,080 --> 00:36:30,290
this is what TDD is about okay and if

00:36:28,820 --> 00:36:34,370
you do this for a while then you can

00:36:30,290 --> 00:36:35,480
appreciate it okay so what you're going

00:36:34,370 --> 00:36:37,820
to do you're going to use scenarios and

00:36:35,480 --> 00:36:40,100
examples to build your domain so anyone

00:36:37,820 --> 00:36:43,430
already using something similar to do

00:36:40,100 --> 00:36:45,560
acceptance testing or you know be hats

00:36:43,430 --> 00:36:48,650
or jerking something like that something

00:36:45,560 --> 00:36:50,660
similar okay so use your scenarios and

00:36:48,650 --> 00:36:52,580
to try and have conversations around the

00:36:50,660 --> 00:36:54,110
domain straight from the scenarios and

00:36:52,580 --> 00:36:55,940
you can start building understanding of

00:36:54,110 --> 00:36:58,420
the responsibilities related to your

00:36:55,940 --> 00:37:02,200
domain straight from the scenarios

00:36:58,420 --> 00:37:04,660
and then think about dream your

00:37:02,200 --> 00:37:06,819
boundaries once you have you have

00:37:04,660 --> 00:37:08,619
implemented your domain the next stage

00:37:06,819 --> 00:37:10,240
is to dream your boundaries understand

00:37:08,619 --> 00:37:11,470
where do you're going to have to invert

00:37:10,240 --> 00:37:14,170
dependencies where you're going to have

00:37:11,470 --> 00:37:16,270
to leave Elite abstractions in your

00:37:14,170 --> 00:37:21,069
design that's very important where the

00:37:16,270 --> 00:37:23,079
abstraction goes then with that

00:37:21,069 --> 00:37:25,000
understanding of design test driven

00:37:23,079 --> 00:37:27,400
design will become like second nature

00:37:25,000 --> 00:37:29,980
you can do that we just do with your

00:37:27,400 --> 00:37:33,579
tests you can describe things with your

00:37:29,980 --> 00:37:37,530
test right from the outer layer outside

00:37:33,579 --> 00:37:40,690
in all the way to the unit testing and

00:37:37,530 --> 00:37:43,150
it will be useful if you identify what's

00:37:40,690 --> 00:37:47,680
the right tool to use it what all stages

00:37:43,150 --> 00:37:49,500
which perspective so if you look for

00:37:47,680 --> 00:37:53,290
tools that helps you in the process of

00:37:49,500 --> 00:37:56,410
course the two is just going to make

00:37:53,290 --> 00:37:58,930
visible wear your limitations are the

00:37:56,410 --> 00:38:03,190
two is just a tool but look for tools

00:37:58,930 --> 00:38:04,869
that can help you in the process and so

00:38:03,190 --> 00:38:08,530
in conclusion what we what we talked

00:38:04,869 --> 00:38:11,910
about we talked about motivators behind

00:38:08,530 --> 00:38:14,020
design and distinction between

00:38:11,910 --> 00:38:16,119
data-driven and responsibilities in

00:38:14,020 --> 00:38:18,339
driven design and why dr. driven design

00:38:16,119 --> 00:38:19,450
actually takes you to more complex code

00:38:18,339 --> 00:38:21,430
even if you're not doing any

00:38:19,450 --> 00:38:22,690
relationship diagrams anymore you still

00:38:21,430 --> 00:38:25,990
doing big design up front if you're

00:38:22,690 --> 00:38:28,990
using open entities and get res

00:38:25,990 --> 00:38:31,839
everywhere and then we talked about the

00:38:28,990 --> 00:38:34,569
principles of simplicity and when to

00:38:31,839 --> 00:38:37,150
decide things when to you have to defer

00:38:34,569 --> 00:38:38,740
decisions and when you have to make

00:38:37,150 --> 00:38:43,420
decisions and why you make decisions

00:38:38,740 --> 00:38:45,880
such as adding an abstraction and then

00:38:43,420 --> 00:38:48,160
we talked about how do you go about then

00:38:45,880 --> 00:38:50,200
implementing a domain using the

00:38:48,160 --> 00:38:52,420
responsibility driven approach we talked

00:38:50,200 --> 00:38:55,510
about the CSC cards the Zen approach

00:38:52,420 --> 00:38:57,849
that you can use to that and then link

00:38:55,510 --> 00:38:59,500
that back to TDD what's going to happen

00:38:57,849 --> 00:39:01,210
is that once you have the CSC cards you

00:38:59,500 --> 00:39:03,940
can see wow I could have done that with

00:39:01,210 --> 00:39:06,579
my tests and then your understanding is

00:39:03,940 --> 00:39:07,750
going to fit in with TDD and you then

00:39:06,579 --> 00:39:11,150
next time you're not even going to need

00:39:07,750 --> 00:39:14,390
the CRC cards hopefully so

00:39:11,150 --> 00:39:17,570
me i'ma sell oh I work for you Vika I

00:39:14,390 --> 00:39:19,340
think I said that before do some stuff

00:39:17,570 --> 00:39:24,070
with which we spec and that's me on

00:39:19,340 --> 00:39:24,070
Twitter I appreciate your time thank you

00:39:30,380 --> 00:39:32,440

YouTube URL: https://www.youtube.com/watch?v=NQN72Big8ww


