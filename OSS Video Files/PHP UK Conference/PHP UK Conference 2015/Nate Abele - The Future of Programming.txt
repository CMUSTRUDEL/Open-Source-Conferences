Title: Nate Abele - The Future of Programming
Publication date: 2015-04-02
Playlist: PHP UK Conference 2015
Description: 
	"The most dangerous thought you can have as a creative person is to think you know what you’re doing." — Richard Hamming, The Art of Doing Science and Engineering
Captions: 
	00:00:00,000 --> 00:00:02,060
you

00:00:05,310 --> 00:00:09,269
oh yeah hi my name is Nathan does talk

00:00:08,100 --> 00:00:10,889
about the future and if there's one

00:00:09,269 --> 00:00:14,280
thing that's clear to me it's that

00:00:10,889 --> 00:00:15,779
there's no real clear vision of what the

00:00:14,280 --> 00:00:18,720
future is everybody kind of has their

00:00:15,779 --> 00:00:22,349
own ideas of what it is or should look

00:00:18,720 --> 00:00:25,169
like but if there's one person who said

00:00:22,349 --> 00:00:27,900
it best Shakespeare described the future

00:00:25,169 --> 00:00:29,220
as the undiscovered country and that's

00:00:27,900 --> 00:00:30,509
actually appropriate because countries

00:00:29,220 --> 00:00:31,980
are very big places and we have a lot of

00:00:30,509 --> 00:00:33,120
territory to cover I'm going to be

00:00:31,980 --> 00:00:35,660
moving kind of quickly because we only

00:00:33,120 --> 00:00:40,800
have about half an hour so to sum up

00:00:35,660 --> 00:00:41,850
that's it you can all you can go now no

00:00:40,800 --> 00:00:44,460
actually this isn't really to talk about

00:00:41,850 --> 00:00:46,830
languages although it is a talk somewhat

00:00:44,460 --> 00:00:51,540
about language primarily those to talk

00:00:46,830 --> 00:00:52,800
about ideas and I've been trying to

00:00:51,540 --> 00:00:54,870
think of the best way to sum up this

00:00:52,800 --> 00:00:56,370
talk and the best thing that I can come

00:00:54,870 --> 00:01:00,450
up with so far is a series of hand

00:00:56,370 --> 00:01:01,950
gestures specifically yeah and yeah well

00:01:00,450 --> 00:01:04,379
we spend most of our time as programmers

00:01:01,950 --> 00:01:06,960
kind of like thinking about things down

00:01:04,379 --> 00:01:09,150
here and I want to invite you to just

00:01:06,960 --> 00:01:10,530
take a little journey with me up here

00:01:09,150 --> 00:01:12,149
and when I say up here that's not like

00:01:10,530 --> 00:01:14,340
an elitist thing it doesn't have to do

00:01:12,149 --> 00:01:17,100
with like you know title or job function

00:01:14,340 --> 00:01:21,569
or any of that stuff it's more about the

00:01:17,100 --> 00:01:25,140
fact that we don't think critically

00:01:21,569 --> 00:01:27,179
enough I don't think about the work that

00:01:25,140 --> 00:01:29,999
we do as programmers and you know how we

00:01:27,179 --> 00:01:31,799
got where we are as opposed to just sort

00:01:29,999 --> 00:01:33,899
of like solving the immediate problem

00:01:31,799 --> 00:01:37,109
and I think this problem has become so

00:01:33,899 --> 00:01:39,240
pervasive that we've actually elevated

00:01:37,109 --> 00:01:41,909
these like will arcane technical details

00:01:39,240 --> 00:01:45,960
that we have to you know be in front of

00:01:41,909 --> 00:01:47,819
every day into like a high art and it's

00:01:45,960 --> 00:01:49,259
gotten really bad we're kind of like

00:01:47,819 --> 00:01:52,049
hitting local Maxima on the

00:01:49,259 --> 00:01:54,840
effectiveness of this approach and like

00:01:52,049 --> 00:01:56,700
seriously like it's cool that you can

00:01:54,840 --> 00:01:58,200
develop crazy fast muscle memory with

00:01:56,700 --> 00:02:01,590
him and all your you know plugins and

00:01:58,200 --> 00:02:05,039
everything but vim is a derivative of VI

00:02:01,590 --> 00:02:07,170
and VII was invented in 1978 and from

00:02:05,039 --> 00:02:09,030
that day to this our idea of what

00:02:07,170 --> 00:02:10,649
programming is has always just been you

00:02:09,030 --> 00:02:13,110
know writing code in a symbolic language

00:02:10,649 --> 00:02:16,709
in a text editor and that's just sort of

00:02:13,110 --> 00:02:17,909
one example it's sort of obvious it's

00:02:16,709 --> 00:02:18,640
always right in front of us but our

00:02:17,909 --> 00:02:20,590
industry is

00:02:18,640 --> 00:02:22,270
with like these things that just go

00:02:20,590 --> 00:02:24,540
unnoticed and unquestioned that are

00:02:22,270 --> 00:02:28,390
rooted in technologies from the 1970s

00:02:24,540 --> 00:02:30,040
and so I really think that in order to

00:02:28,390 --> 00:02:32,380
break out of this box we need to be able

00:02:30,040 --> 00:02:34,709
to sort of think about programming

00:02:32,380 --> 00:02:39,640
abstractly in terms of first principles

00:02:34,709 --> 00:02:41,790
so that we can really move forward I

00:02:39,640 --> 00:02:44,380
think part of the reason that we have

00:02:41,790 --> 00:02:46,840
this problem is that technology changes

00:02:44,380 --> 00:02:48,550
very quickly but our minds change very

00:02:46,840 --> 00:02:50,440
slowly like it's it's hard to really

00:02:48,550 --> 00:02:52,900
adopt like a genuinely new concept

00:02:50,440 --> 00:02:56,350
especially on the societal level so

00:02:52,900 --> 00:02:58,600
that's why all our our term terminology

00:02:56,350 --> 00:03:00,640
our metaphor is like you know come from

00:02:58,600 --> 00:03:04,570
publishing and architecture and filing

00:03:00,640 --> 00:03:06,370
cabinets and so we have to you know it

00:03:04,570 --> 00:03:09,280
takes a lot of effort and a lot of hard

00:03:06,370 --> 00:03:11,050
thinking to kind of move past that into

00:03:09,280 --> 00:03:13,989
a new way of thinking where we can

00:03:11,050 --> 00:03:19,180
really own that way of thinking on its

00:03:13,989 --> 00:03:20,620
own terms if that makes sense so I do

00:03:19,180 --> 00:03:22,959
software architecture at a consulting

00:03:20,620 --> 00:03:24,670
firm called ratify and this is not

00:03:22,959 --> 00:03:32,220
merely shameless self-promotion section

00:03:24,670 --> 00:03:34,780
material to the story I so I do yeah I

00:03:32,220 --> 00:03:37,690
do architecture and that basically means

00:03:34,780 --> 00:03:39,760
um finding excuses not to write code

00:03:37,690 --> 00:03:43,269
well thinking about you know difficult

00:03:39,760 --> 00:03:45,820
design problems and I thought I was I

00:03:43,269 --> 00:03:48,310
was pretty good at it you know I was the

00:03:45,820 --> 00:03:50,230
lead developer of cakephp for a while i

00:03:48,310 --> 00:03:52,360
created the lithium li three framework

00:03:50,230 --> 00:03:57,250
which is I felt like a little advanced

00:03:52,360 --> 00:03:59,140
for its time I'm also the lead developer

00:03:57,250 --> 00:04:01,660
of angular UI router how many people

00:03:59,140 --> 00:04:02,950
have used that just curious okay couple

00:04:01,660 --> 00:04:07,209
you so it's probably like in the top

00:04:02,950 --> 00:04:09,459
five libraries for angularjs so you know

00:04:07,209 --> 00:04:10,810
it's it's not it's not nothing but so

00:04:09,459 --> 00:04:14,170
you know I thought I kind of had this

00:04:10,810 --> 00:04:15,730
stuff I'll figure it out but um

00:04:14,170 --> 00:04:18,370
regardless there were kind of a number

00:04:15,730 --> 00:04:20,859
of things about programming that just

00:04:18,370 --> 00:04:22,539
felt wrong like just a little weird

00:04:20,859 --> 00:04:25,050
quirks and inefficiencies like a

00:04:22,539 --> 00:04:28,570
fundamental level that just bothered me

00:04:25,050 --> 00:04:30,370
so some time ago I sort of created for

00:04:28,570 --> 00:04:32,620
myself the opportunity to take a little

00:04:30,370 --> 00:04:34,000
hiatus I want to spend some time

00:04:32,620 --> 00:04:35,560
digging into like the history of

00:04:34,000 --> 00:04:37,780
computing how I got to where we are and

00:04:35,560 --> 00:04:42,970
kind of like why things are the way they

00:04:37,780 --> 00:04:46,120
are and by the end the overarching

00:04:42,970 --> 00:04:50,110
conclusion that i read i came to is that

00:04:46,120 --> 00:04:53,740
I have no idea what I'm doing that was

00:04:50,110 --> 00:04:55,180
sort of a depressing thought I realized

00:04:53,740 --> 00:04:57,460
that basically everything that had done

00:04:55,180 --> 00:04:59,710
in my career up to that point was not

00:04:57,460 --> 00:05:02,590
just useless but in a way kind of worse

00:04:59,710 --> 00:05:04,720
than useless and I mean don't get me

00:05:02,590 --> 00:05:06,580
wrong it was good in that you know the

00:05:04,720 --> 00:05:09,070
things that I created helped people do

00:05:06,580 --> 00:05:13,320
their jobs or you know taught people

00:05:09,070 --> 00:05:15,280
things or whatever and that's good but I

00:05:13,320 --> 00:05:17,169
don't feel like I was really doing

00:05:15,280 --> 00:05:21,760
anything to move the industry forward

00:05:17,169 --> 00:05:24,039
and in fact just the opposite I think my

00:05:21,760 --> 00:05:26,650
work has really helped to entrench and

00:05:24,039 --> 00:05:28,990
institutionalize some ideas that are

00:05:26,650 --> 00:05:30,820
holding us back now in the best case

00:05:28,990 --> 00:05:33,220
scenario my life is about a third over

00:05:30,820 --> 00:05:35,320
and I don't know about y'all but showing

00:05:33,220 --> 00:05:37,570
up and collecting a paycheck is just not

00:05:35,320 --> 00:05:40,570
good enough for me it's just doesn't cut

00:05:37,570 --> 00:05:42,580
it so I couldn't just keep doing the

00:05:40,570 --> 00:05:45,789
same old thing I had to like figure this

00:05:42,580 --> 00:05:48,010
stuff out there were a number of talks

00:05:45,789 --> 00:05:50,200
in one series of blog posts that I kind

00:05:48,010 --> 00:05:52,360
of kept coming back to and these will

00:05:50,200 --> 00:05:53,550
all be linked to elsewhere and I really

00:05:52,360 --> 00:05:56,979
really encourage you to check them out

00:05:53,550 --> 00:05:58,000
individually but they were all from very

00:05:56,979 --> 00:06:00,940
different people talking about very

00:05:58,000 --> 00:06:02,410
different things excuse me yet at the

00:06:00,940 --> 00:06:04,000
same time I couldn't help but feel like

00:06:02,410 --> 00:06:05,349
they were all sort of intrinsically

00:06:04,000 --> 00:06:09,599
connected in some way that I didn't

00:06:05,349 --> 00:06:13,690
quite understand yet so the first thing

00:06:09,599 --> 00:06:18,729
that I decided to tackle industry sacred

00:06:13,690 --> 00:06:20,800
cow number one design patterns the idea

00:06:18,729 --> 00:06:23,889
of design patterns Oh has always always

00:06:20,800 --> 00:06:26,349
kind of bothered me on this level I

00:06:23,889 --> 00:06:28,199
couldn't quite articulate but I found

00:06:26,349 --> 00:06:33,510
out that I actually wasn't alone in this

00:06:28,199 --> 00:06:33,510
so Alan Kay who you should all know of

00:06:33,810 --> 00:06:38,280
you know kind of was dismissing this

00:06:36,310 --> 00:06:42,099
idea of programming patterns out of hand

00:06:38,280 --> 00:06:43,719
with allusions to some other concept of

00:06:42,099 --> 00:06:44,610
programming juxtaposed against the

00:06:43,719 --> 00:06:50,919
programming that we know

00:06:44,610 --> 00:06:53,910
today and in his blog posts you know

00:06:50,919 --> 00:06:55,990
beyond design patterns Anthony Ferrara

00:06:53,910 --> 00:06:58,060
basically goes through all the common

00:06:55,990 --> 00:06:59,740
patterns that we use in PHP and

00:06:58,060 --> 00:07:01,120
basically reduces them all down to this

00:06:59,740 --> 00:07:04,350
one single responsibility of

00:07:01,120 --> 00:07:06,730
communication or more specifically

00:07:04,350 --> 00:07:10,810
modeling the flow of data through a

00:07:06,730 --> 00:07:12,520
system but why in oo design does it

00:07:10,810 --> 00:07:15,340
require you know 22 different things to

00:07:12,520 --> 00:07:17,020
model the same responsibility why do you

00:07:15,340 --> 00:07:20,200
know quote-unquote grown-up languages

00:07:17,020 --> 00:07:22,450
like Java have so many more patterns and

00:07:20,200 --> 00:07:24,760
and you know things like that and more

00:07:22,450 --> 00:07:28,090
structure than a language like PHP or

00:07:24,760 --> 00:07:32,050
particularly JavaScript which has far

00:07:28,090 --> 00:07:36,780
fewer and simpler patterns why indeed so

00:07:32,050 --> 00:07:39,639
story time about a year and a half ago I

00:07:36,780 --> 00:07:41,080
started working on a little tool looks

00:07:39,639 --> 00:07:43,150
kinda like this it's a little hard to

00:07:41,080 --> 00:07:46,090
read but you could sort of mouse over

00:07:43,150 --> 00:07:47,350
the things and it showed you how classes

00:07:46,090 --> 00:07:49,660
and systems in an application were

00:07:47,350 --> 00:07:51,760
connected and you could you know mouse

00:07:49,660 --> 00:07:53,620
over the little edges of the graph and

00:07:51,760 --> 00:07:56,979
it would show you the call traces that

00:07:53,620 --> 00:07:58,390
went back and forth and I was using this

00:07:56,979 --> 00:08:01,450
as a tool to try and understand a code

00:07:58,390 --> 00:08:05,140
base that that we had adopted from

00:08:01,450 --> 00:08:06,760
another development team in the classes

00:08:05,140 --> 00:08:09,880
were reasonably well structured but the

00:08:06,760 --> 00:08:11,470
system it was just too hard to think

00:08:09,880 --> 00:08:13,120
about and the original version of this

00:08:11,470 --> 00:08:14,650
graph looked an order of magnitude worse

00:08:13,120 --> 00:08:16,300
than this I had to write a bunch of

00:08:14,650 --> 00:08:18,250
configuration to say okay omit these

00:08:16,300 --> 00:08:19,840
things and you know take these classes

00:08:18,250 --> 00:08:21,610
and namespaces and group them into this

00:08:19,840 --> 00:08:22,900
thing called a database then take these

00:08:21,610 --> 00:08:24,789
other things and group them into a thing

00:08:22,900 --> 00:08:29,919
called a queue so it's cut way down from

00:08:24,789 --> 00:08:32,560
you know the actual version but I it was

00:08:29,919 --> 00:08:33,969
still really hard to tell what the

00:08:32,560 --> 00:08:35,589
meaningful connections were because then

00:08:33,969 --> 00:08:38,260
you'd have classes that were in two

00:08:35,589 --> 00:08:39,760
different places at once in and would be

00:08:38,260 --> 00:08:41,229
part of different systems in different

00:08:39,760 --> 00:08:46,690
contexts and they just became really

00:08:41,229 --> 00:08:48,550
hard to disambiguate and it just seemed

00:08:46,690 --> 00:08:50,110
harder than it should have been like the

00:08:48,550 --> 00:08:52,060
individual classes in the system were

00:08:50,110 --> 00:08:55,589
reasonably well organized but overall

00:08:52,060 --> 00:08:55,589
the system was just kind of a mess

00:08:55,779 --> 00:09:02,819
and an argument that I often hear is

00:08:58,470 --> 00:09:09,129
that TDD helps you with your design and

00:09:02,819 --> 00:09:10,749
I yes I suppose that's true but all the

00:09:09,129 --> 00:09:13,540
TDD in the world isn't going to save us

00:09:10,749 --> 00:09:15,579
from the fact that complex systems are

00:09:13,540 --> 00:09:17,680
very very easy to create an our current

00:09:15,579 --> 00:09:20,889
conception of what programming is are

00:09:17,680 --> 00:09:24,639
our tools set us up for failure because

00:09:20,889 --> 00:09:26,290
complexity is just the default so

00:09:24,639 --> 00:09:28,089
inevitably we sort of create a system

00:09:26,290 --> 00:09:30,999
that's more complex than we can easily

00:09:28,089 --> 00:09:32,860
understand and so we end up in the sort

00:09:30,999 --> 00:09:36,910
of adversarial relationship with our own

00:09:32,860 --> 00:09:38,740
creations and the weird thing is though

00:09:36,910 --> 00:09:41,680
that it just seems like that we're sort

00:09:38,740 --> 00:09:44,290
of fine with this I would argue that as

00:09:41,680 --> 00:09:48,850
a programming community in programming

00:09:44,290 --> 00:09:52,149
culture there's no intrinsic incentive

00:09:48,850 --> 00:09:53,889
to want to improve this because the

00:09:52,149 --> 00:09:56,829
culture self selects for complexity

00:09:53,889 --> 00:10:00,309
we're all sort of comfortable with it so

00:09:56,829 --> 00:10:01,839
I'm just a few examples of where this

00:10:00,309 --> 00:10:06,879
comes through we'll start with

00:10:01,839 --> 00:10:09,129
everybody's favorite mutable state so

00:10:06,879 --> 00:10:11,860
100 years before computers even existed

00:10:09,129 --> 00:10:14,139
the top experts in the field had already

00:10:11,860 --> 00:10:16,839
identified that state was hard to reason

00:10:14,139 --> 00:10:19,809
about in a hundred years things haven't

00:10:16,839 --> 00:10:22,300
really gotten any better and I think

00:10:19,809 --> 00:10:24,459
this is a big part of why a object

00:10:22,300 --> 00:10:26,470
oriented design encourages us to hide

00:10:24,459 --> 00:10:29,170
little pieces of state all over the

00:10:26,470 --> 00:10:30,879
application and we don't have like

00:10:29,170 --> 00:10:33,610
currently there are no good tools that

00:10:30,879 --> 00:10:36,509
exist for observing state and how state

00:10:33,610 --> 00:10:39,550
changes across an entire application

00:10:36,509 --> 00:10:42,759
there are no tools but there are ways of

00:10:39,550 --> 00:10:44,699
designing things so that gets into a

00:10:42,759 --> 00:10:47,079
little bit of what I want to talk about

00:10:44,699 --> 00:10:50,199
but even the tools that we have 40

00:10:47,079 --> 00:10:51,639
design don't really encourage us or

00:10:50,199 --> 00:10:53,579
point us in the right direction because

00:10:51,639 --> 00:10:55,959
they don't address this issue of state

00:10:53,579 --> 00:11:00,220
in a way that's helpful in the broad

00:10:55,959 --> 00:11:03,490
sense another thing that oo design does

00:11:00,220 --> 00:11:06,189
is it encourages boundaries that seem

00:11:03,490 --> 00:11:07,779
clean but actually aren't like let's say

00:11:06,189 --> 00:11:09,190
you have you know one component and

00:11:07,779 --> 00:11:10,360
another component and they need

00:11:09,190 --> 00:11:13,120
talk to each other and one you know

00:11:10,360 --> 00:11:14,830
maybe passes an object to another and

00:11:13,120 --> 00:11:16,540
that object only has one dependency but

00:11:14,830 --> 00:11:18,700
that dependency has this whole graph of

00:11:16,540 --> 00:11:20,500
objects that built up state over the

00:11:18,700 --> 00:11:22,660
course of the request so you're really

00:11:20,500 --> 00:11:24,340
not passing just that one object it's

00:11:22,660 --> 00:11:26,290
not really a clean boundary because you

00:11:24,340 --> 00:11:28,240
don't know what else is going on you

00:11:26,290 --> 00:11:29,110
know nested deeply within that tree and

00:11:28,240 --> 00:11:32,920
you don't know how it's going to impact

00:11:29,110 --> 00:11:34,510
the rest of the system and what happens

00:11:32,920 --> 00:11:36,190
when you have to move one of those

00:11:34,510 --> 00:11:38,290
components to a separate process or a

00:11:36,190 --> 00:11:40,120
separate machine or you're going to

00:11:38,290 --> 00:11:42,960
serialize all that state what if it has

00:11:40,120 --> 00:11:46,060
closures you know it kind of breaks down

00:11:42,960 --> 00:11:48,070
and a kind of more esoteric example of

00:11:46,060 --> 00:11:51,510
this that has nothing to do with oo

00:11:48,070 --> 00:11:54,490
design but programming in general is

00:11:51,510 --> 00:11:57,850
that there's really no clean separation

00:11:54,490 --> 00:11:59,710
between like the work that we do and the

00:11:57,850 --> 00:12:01,630
work that other people do that has to be

00:11:59,710 --> 00:12:03,430
incorporated in our work to like present

00:12:01,630 --> 00:12:05,140
a final artifact like have you ever

00:12:03,430 --> 00:12:07,390
presented a demo to like somebody else

00:12:05,140 --> 00:12:08,620
in the company or a client and it's

00:12:07,390 --> 00:12:10,480
really cool we worked really hard on it

00:12:08,620 --> 00:12:12,220
and they're like um that's great can you

00:12:10,480 --> 00:12:14,650
just change that copy there and you're

00:12:12,220 --> 00:12:16,330
like you change the freakin copy won't

00:12:14,650 --> 00:12:19,720
change the copy that's not a good use of

00:12:16,330 --> 00:12:21,790
my time and you know it's like you can

00:12:19,720 --> 00:12:24,220
do the cop change or you can like glom

00:12:21,790 --> 00:12:26,410
on a you know content management system

00:12:24,220 --> 00:12:28,240
and then you have to map between your

00:12:26,410 --> 00:12:31,450
thing the content management thing it's

00:12:28,240 --> 00:12:34,740
just a mess so there's no real good way

00:12:31,450 --> 00:12:37,510
of managing that let's talk about tools

00:12:34,740 --> 00:12:42,820
so to start with tool number one or

00:12:37,510 --> 00:12:45,100
number zero rather the CPU the computer

00:12:42,820 --> 00:12:46,900
architecture that we have today was

00:12:45,100 --> 00:12:49,450
designed by a guy named John bun women

00:12:46,900 --> 00:12:51,520
and it was basically a single channel

00:12:49,450 --> 00:12:53,980
between processor and ram and processor

00:12:51,520 --> 00:12:56,140
executes one instruction at a time in a

00:12:53,980 --> 00:13:00,790
linear fashion and this architecture was

00:12:56,140 --> 00:13:03,160
invented when Ram was a giant drum so

00:13:00,790 --> 00:13:07,390
this guy is john backus if you guys know

00:13:03,160 --> 00:13:10,720
what a BNF is he's the b and he he had a

00:13:07,390 --> 00:13:13,630
pretty scathing indictment of the von

00:13:10,720 --> 00:13:15,670
Neumann architecture and he cited all

00:13:13,630 --> 00:13:19,780
these really really serious deficiencies

00:13:15,670 --> 00:13:22,420
and he's got a point the the von Neumann

00:13:19,780 --> 00:13:24,910
architecture has become so ingrained

00:13:22,420 --> 00:13:27,490
that what do we have to do to parallel

00:13:24,910 --> 00:13:29,740
parallel eyes our software we run a

00:13:27,490 --> 00:13:31,510
computer inside of a computer we

00:13:29,740 --> 00:13:33,910
literally had to invent virtualization

00:13:31,510 --> 00:13:35,800
just to get real clean isolated

00:13:33,910 --> 00:13:40,060
boundaries between our different

00:13:35,800 --> 00:13:41,350
processes so then we parallelized them

00:13:40,060 --> 00:13:43,769
and that's great but how they talk to

00:13:41,350 --> 00:13:46,959
each other RPC that would be the

00:13:43,769 --> 00:13:50,050
object-oriented thing to do no we send

00:13:46,959 --> 00:13:51,790
messages with data that's it's like it

00:13:50,050 --> 00:13:53,110
just seems so obvious to me that like we

00:13:51,790 --> 00:13:54,399
all secretly want to be functional

00:13:53,110 --> 00:13:58,360
programmers but our tools that the

00:13:54,399 --> 00:14:00,070
machine level just suck so bad so um

00:13:58,360 --> 00:14:02,680
Alan Kay actually had a lot to say about

00:14:00,070 --> 00:14:06,100
this as well and so this is what it

00:14:02,680 --> 00:14:08,079
looks like when the machine and

00:14:06,100 --> 00:14:09,760
everything in our stack that sits on top

00:14:08,079 --> 00:14:12,190
of that is kind of working against us

00:14:09,760 --> 00:14:18,190
and working against you know or are

00:14:12,190 --> 00:14:20,620
being able to do good design but what

00:14:18,190 --> 00:14:23,230
about what about a different kind of

00:14:20,620 --> 00:14:27,790
environment where software can be more

00:14:23,230 --> 00:14:30,130
easily reasoned about Alan Kay obviously

00:14:27,790 --> 00:14:31,390
worked at park they were able to they

00:14:30,130 --> 00:14:34,029
basically had a playground where they

00:14:31,390 --> 00:14:36,190
kind of do whatever they wanted but just

00:14:34,029 --> 00:14:38,019
the idea that they could create an

00:14:36,190 --> 00:14:39,820
operating system of programming

00:14:38,019 --> 00:14:43,360
environment a set of applications in a

00:14:39,820 --> 00:14:48,519
UI layer in 10,000 lines of code that

00:14:43,360 --> 00:14:51,910
just seems insane to me in the 1960s no

00:14:48,519 --> 00:14:54,370
less so that's the computer another kind

00:14:51,910 --> 00:14:58,149
of tool that I want to talk about is a

00:14:54,370 --> 00:15:00,310
tool that we also don't have so this is

00:14:58,149 --> 00:15:02,620
my completely accurate highly scientific

00:15:00,310 --> 00:15:06,100
graph involving the various disciplines

00:15:02,620 --> 00:15:08,709
involved in creating software so you

00:15:06,100 --> 00:15:10,899
know you have this continuum of you know

00:15:08,709 --> 00:15:12,699
the mind where people like envision what

00:15:10,899 --> 00:15:14,319
it's going to be and then you have this

00:15:12,699 --> 00:15:16,480
other domain on the other end called

00:15:14,319 --> 00:15:22,300
math and physics or as I sometimes like

00:15:16,480 --> 00:15:23,350
to call it hard realities and so what's

00:15:22,300 --> 00:15:25,480
interesting about this is that

00:15:23,350 --> 00:15:27,699
programming is sort of like the original

00:15:25,480 --> 00:15:29,829
medium of thought like in a way that

00:15:27,699 --> 00:15:32,769
something like writing and philosophy in

00:15:29,829 --> 00:15:35,139
music and art can't really be because

00:15:32,769 --> 00:15:37,899
computers allow you to do simulation

00:15:35,139 --> 00:15:40,809
and when you can and that's like a

00:15:37,899 --> 00:15:42,970
really really powerful thing but there's

00:15:40,809 --> 00:15:46,199
this problem these two domains have this

00:15:42,970 --> 00:15:48,910
really dichotomous relationship

00:15:46,199 --> 00:15:50,739
specifically one is perfectly

00:15:48,910 --> 00:15:53,230
comfortable accepting ambiguities and

00:15:50,739 --> 00:15:58,269
contradictions whereas the other one is

00:15:53,230 --> 00:15:59,919
not so much so um you know I'm sure

00:15:58,269 --> 00:16:01,660
we've all had this conversation where

00:15:59,919 --> 00:16:03,429
it's like you know somebody from the

00:16:01,660 --> 00:16:05,350
business or your client comes in say I

00:16:03,429 --> 00:16:07,389
have this great idea we need to return

00:16:05,350 --> 00:16:09,160
API results in the shape of unicorn and

00:16:07,389 --> 00:16:10,839
then you have to explain to them well no

00:16:09,160 --> 00:16:12,339
you can't return a PR results in the

00:16:10,839 --> 00:16:14,499
shape of unicorn people have to parse

00:16:12,339 --> 00:16:16,029
them I mean well maybe you know PHP 8

00:16:14,499 --> 00:16:19,059
there's an open RFC on quantum

00:16:16,029 --> 00:16:20,739
superpositions we'll see but it's just

00:16:19,059 --> 00:16:22,689
you can't do that you can't reconcile

00:16:20,739 --> 00:16:24,369
that and a lot of times you end up

00:16:22,689 --> 00:16:27,540
having to deliver these really esoteric

00:16:24,369 --> 00:16:30,069
explanations that don't make sense to

00:16:27,540 --> 00:16:35,470
domain experts who aren't necessarily

00:16:30,069 --> 00:16:37,359
software experts so we don't have good

00:16:35,470 --> 00:16:40,149
tools for this kind of communication and

00:16:37,359 --> 00:16:42,730
this kind of reasoning you know if the

00:16:40,149 --> 00:16:44,679
business wants something done you know

00:16:42,730 --> 00:16:47,350
they have to send a program I go do it

00:16:44,679 --> 00:16:49,179
maybe the programmer comes and figures

00:16:47,350 --> 00:16:50,799
out that you can't do it for XY and Z

00:16:49,179 --> 00:16:52,899
and then you have to report that back

00:16:50,799 --> 00:16:57,549
well that's a very like long expensive

00:16:52,899 --> 00:17:00,519
feedback cycle and we also don't have

00:16:57,549 --> 00:17:02,459
just a tool for like being able to sit

00:17:00,519 --> 00:17:05,350
down with a non-expert programmer and

00:17:02,459 --> 00:17:07,089
you know explore system in a creative

00:17:05,350 --> 00:17:09,279
way just to figure out what's possible

00:17:07,089 --> 00:17:11,829
like we have very specific tools for

00:17:09,279 --> 00:17:14,139
that but no general tools so this is

00:17:11,829 --> 00:17:15,639
what a good tool looks like and we've

00:17:14,139 --> 00:17:19,149
definitely got half of this equation

00:17:15,639 --> 00:17:22,809
down we're super good at catering to

00:17:19,149 --> 00:17:25,630
computers not so good about catering to

00:17:22,809 --> 00:17:27,279
humans we don't really do tools they

00:17:25,630 --> 00:17:30,250
actually augment the way that the mind

00:17:27,279 --> 00:17:33,850
thinks about systems and here's another

00:17:30,250 --> 00:17:35,830
somewhat related example so let's say

00:17:33,850 --> 00:17:38,340
you're going to build a factory and I

00:17:35,830 --> 00:17:40,690
think factories are actually way better

00:17:38,340 --> 00:17:42,159
analogies for software than you know

00:17:40,690 --> 00:17:44,019
architecture or whatever because they

00:17:42,159 --> 00:17:46,360
actually have interconnected parts that

00:17:44,019 --> 00:17:48,490
do things so let's say you have this

00:17:46,360 --> 00:17:50,890
factory and you want to

00:17:48,490 --> 00:17:53,140
serve how it operates will you just turn

00:17:50,890 --> 00:17:54,880
it on right well I mean step one if

00:17:53,140 --> 00:17:56,020
you're a programmer is actually to cover

00:17:54,880 --> 00:18:01,000
everything up and turn all the lights

00:17:56,020 --> 00:18:03,250
off and then you know maybe we'll stick

00:18:01,000 --> 00:18:05,380
a thing in here where it's like okay

00:18:03,250 --> 00:18:08,170
we'll look at this one part of the thing

00:18:05,380 --> 00:18:11,620
and we'll call that logging that's a log

00:18:08,170 --> 00:18:14,080
entry and then we'll have another log

00:18:11,620 --> 00:18:17,230
entry maybe somewhere else and you know

00:18:14,080 --> 00:18:19,090
so on you get the gist but maybe if you

00:18:17,230 --> 00:18:21,040
want to you know step through debug the

00:18:19,090 --> 00:18:24,640
factory maybe that'll look something

00:18:21,040 --> 00:18:27,400
like this it's a problem this problem

00:18:24,640 --> 00:18:31,120
our systems that we create our by

00:18:27,400 --> 00:18:32,470
default not observable and if we already

00:18:31,120 --> 00:18:34,929
have a hard enough time thinking about

00:18:32,470 --> 00:18:39,309
things that are dynamic that seems like

00:18:34,929 --> 00:18:41,740
pre bad news so on I'm starting to feel

00:18:39,309 --> 00:18:44,650
kind of down while this stuff until I

00:18:41,740 --> 00:18:48,220
discovered this quote from Kent Beck who

00:18:44,650 --> 00:18:50,320
unwittingly saved me he gave me a frame

00:18:48,220 --> 00:18:53,260
of reference to think effectively about

00:18:50,320 --> 00:18:55,420
all these different problems so we're

00:18:53,260 --> 00:18:58,510
gonna keep coming back to this anyway

00:18:55,420 --> 00:19:01,120
the first kind of place where I felt

00:18:58,510 --> 00:19:03,610
like this principle like I was I was

00:19:01,120 --> 00:19:08,290
violating this principle was actually

00:19:03,610 --> 00:19:11,110
frameworks and I just begun to have this

00:19:08,290 --> 00:19:12,400
sneaking suspicion that frameworks

00:19:11,110 --> 00:19:17,380
tightly couple things that don't belong

00:19:12,400 --> 00:19:18,880
together specifically they couple a set

00:19:17,380 --> 00:19:21,309
of components in a set of design

00:19:18,880 --> 00:19:23,200
decisions well if the components are

00:19:21,309 --> 00:19:24,760
good this should work independently on

00:19:23,200 --> 00:19:27,100
their own independent of the design

00:19:24,760 --> 00:19:31,840
decisions and vice versa with the design

00:19:27,100 --> 00:19:34,630
decisions now there are frameworks that

00:19:31,840 --> 00:19:36,460
claim to do this there's only one I know

00:19:34,630 --> 00:19:38,620
that actually does it because of the

00:19:36,460 --> 00:19:41,350
aforementioned object-oriented dragging

00:19:38,620 --> 00:19:42,429
around of a lot of baggage problem we're

00:19:41,350 --> 00:19:45,970
not going to get into that cuz i don't

00:19:42,429 --> 00:19:48,880
wanna name names that's rude so this

00:19:45,970 --> 00:19:51,179
gets back to the idea about breaking out

00:19:48,880 --> 00:19:53,950
parts of the system that do the work

00:19:51,179 --> 00:19:56,910
from the parts that compose how the work

00:19:53,950 --> 00:20:00,550
is done in gary Bernhardt's talk

00:19:56,910 --> 00:20:02,150
boundaries he refers this idea as

00:20:00,550 --> 00:20:04,340
separating arranged

00:20:02,150 --> 00:20:07,520
from work and actually he gave this

00:20:04,340 --> 00:20:09,350
particular technique a name and by

00:20:07,520 --> 00:20:10,880
looking at a bunch of different emerging

00:20:09,350 --> 00:20:12,730
architectures you kind of distilled it

00:20:10,880 --> 00:20:15,950
down into this idea that he calls

00:20:12,730 --> 00:20:22,610
functional core imperative shell or 00

00:20:15,950 --> 00:20:24,080
or sorry photo like f aux so basically

00:20:22,610 --> 00:20:26,600
the idea is you have a bunch of

00:20:24,080 --> 00:20:28,700
immutable objects that have all your

00:20:26,600 --> 00:20:31,010
business logic and no dependencies and

00:20:28,700 --> 00:20:32,690
then you have this ring outside that has

00:20:31,010 --> 00:20:34,460
all the imperative stuff that you know

00:20:32,690 --> 00:20:36,740
touches things like networks and discs

00:20:34,460 --> 00:20:39,200
that fail and our slow and have to be

00:20:36,740 --> 00:20:41,960
mocked out but none of those things have

00:20:39,200 --> 00:20:44,480
any logic or at a minimum like very very

00:20:41,960 --> 00:20:46,310
tiny amount of logic so the great thing

00:20:44,480 --> 00:20:47,540
about that is it makes unit tests easy

00:20:46,310 --> 00:20:49,670
because you don't have to mock anything

00:20:47,540 --> 00:20:51,890
it makes integrate integration testing

00:20:49,670 --> 00:20:56,140
easy because there's only one or a very

00:20:51,890 --> 00:20:58,160
small number of code paths to test so

00:20:56,140 --> 00:20:59,720
and that gives you a very clean

00:20:58,160 --> 00:21:01,460
separation of like here's the things

00:20:59,720 --> 00:21:03,140
that are doing the work and here's the

00:21:01,460 --> 00:21:05,780
things that are stringing those things

00:21:03,140 --> 00:21:08,390
together so let's talk about language

00:21:05,780 --> 00:21:13,010
people tend to take for granted just how

00:21:08,390 --> 00:21:18,980
powerful a tool language can be not this

00:21:13,010 --> 00:21:22,850
guy so I kind of you know latched onto

00:21:18,980 --> 00:21:25,550
this idea particularly the way Brett

00:21:22,850 --> 00:21:28,760
Victor expresses it in a talk media for

00:21:25,550 --> 00:21:31,580
thinking the unthinkable so before the

00:21:28,760 --> 00:21:34,100
invention of algebraic notation in the

00:21:31,580 --> 00:21:36,050
1200s math was really really hard to

00:21:34,100 --> 00:21:38,510
think about because you had to read this

00:21:36,050 --> 00:21:40,580
to get this you had to like read all

00:21:38,510 --> 00:21:44,240
these lines and then kind of unpack this

00:21:40,580 --> 00:21:45,470
concept in your mind but when algebraic

00:21:44,240 --> 00:21:48,230
notation was invented you could just

00:21:45,470 --> 00:21:52,430
look ahead and say oh okay you know x

00:21:48,230 --> 00:21:55,310
squared plus 10x no big deal so people

00:21:52,430 --> 00:21:56,390
were trying to use a language to think

00:21:55,310 --> 00:21:58,910
about math that wasn't a good

00:21:56,390 --> 00:22:00,350
representation for it and this idea of

00:21:58,910 --> 00:22:03,440
representation i think is really key

00:22:00,350 --> 00:22:07,430
because it frames how we think about

00:22:03,440 --> 00:22:09,980
problems so my takeaway was basically oh

00:22:07,430 --> 00:22:15,050
okay so language is a user interface for

00:22:09,980 --> 00:22:15,850
ideas that's cool so I did you know

00:22:15,050 --> 00:22:19,120
combined

00:22:15,850 --> 00:22:22,809
my you know new learnings about how

00:22:19,120 --> 00:22:25,510
language works and my growing visceral

00:22:22,809 --> 00:22:27,429
aversion for declaring variables I did

00:22:25,510 --> 00:22:29,140
what any then you know took the next

00:22:27,429 --> 00:22:31,150
logical step that any reasonable person

00:22:29,140 --> 00:22:34,870
would do and started writing my own

00:22:31,150 --> 00:22:38,559
programming language and you know as you

00:22:34,870 --> 00:22:41,440
do right that's that's not weird so uh

00:22:38,559 --> 00:22:43,780
and then I was I happen to be while I

00:22:41,440 --> 00:22:46,919
was you know learning about parsers and

00:22:43,780 --> 00:22:49,299
lectures and trying to write one I

00:22:46,919 --> 00:22:51,700
happened upon this rich hippie talk

00:22:49,299 --> 00:22:55,570
called simple made easy where he was

00:22:51,700 --> 00:22:59,380
juxtaposed simple things versus complex

00:22:55,570 --> 00:23:01,240
things versus easy things which is like

00:22:59,380 --> 00:23:02,830
a different thing but a lot of times

00:23:01,240 --> 00:23:05,470
what's easy for us is actually very

00:23:02,830 --> 00:23:07,570
complex and we have to think harder to

00:23:05,470 --> 00:23:10,230
find the simple solution and one of the

00:23:07,570 --> 00:23:13,840
the juxtapositions that he made was

00:23:10,230 --> 00:23:16,650
syntax is complex and data is simple I

00:23:13,840 --> 00:23:21,190
was like wow that's really profound dude

00:23:16,650 --> 00:23:24,669
I thought huh data is better than syntax

00:23:21,190 --> 00:23:26,169
and language is basically a UI well

00:23:24,669 --> 00:23:27,760
that's all we do all day right we have a

00:23:26,169 --> 00:23:29,380
composition of data structures and a

00:23:27,760 --> 00:23:31,570
composition your user interfaces and

00:23:29,380 --> 00:23:33,940
time together with some process let's

00:23:31,570 --> 00:23:35,110
programming right and actually I want to

00:23:33,940 --> 00:23:37,870
sidebar real quickly here because

00:23:35,110 --> 00:23:38,890
there's just idea that I think is really

00:23:37,870 --> 00:23:42,970
bad that's been going around that

00:23:38,890 --> 00:23:44,650
programming is not math yeah but to the

00:23:42,970 --> 00:23:46,360
extent that it's not its programming his

00:23:44,650 --> 00:23:48,100
fault and it's not helping us because

00:23:46,360 --> 00:23:54,640
math is way freakin easier to reason

00:23:48,100 --> 00:23:57,840
about so on that note so I started

00:23:54,640 --> 00:24:00,429
thinking about how to you know represent

00:23:57,840 --> 00:24:01,659
programming in a different way and like

00:24:00,429 --> 00:24:03,309
how do you represent that visually

00:24:01,659 --> 00:24:05,770
because we have all these constructs

00:24:03,309 --> 00:24:07,990
that are so complex and then I started

00:24:05,770 --> 00:24:10,240
learning about this library called our

00:24:07,990 --> 00:24:12,309
xjs and they have this one cool thing

00:24:10,240 --> 00:24:15,780
that they do which is that they

00:24:12,309 --> 00:24:19,210
represent all these concepts in one way

00:24:15,780 --> 00:24:21,370
so again with the down here thing we're

00:24:19,210 --> 00:24:23,380
like so focused on the constructs of

00:24:21,370 --> 00:24:25,240
programming that we miss kind of the

00:24:23,380 --> 00:24:27,370
essence I feel like like if you think

00:24:25,240 --> 00:24:28,240
about an if block versus a where clause

00:24:27,370 --> 00:24:30,309
in SQL

00:24:28,240 --> 00:24:31,780
we're completely different constructs

00:24:30,309 --> 00:24:34,809
doing basically the same thing they're

00:24:31,780 --> 00:24:36,460
acting as filters on a set of data so we

00:24:34,809 --> 00:24:38,260
end up with this proliferation of

00:24:36,460 --> 00:24:40,120
different ways to do the same thing now

00:24:38,260 --> 00:24:41,770
if you're working down here the fact

00:24:40,120 --> 00:24:42,760
that you know those are two different

00:24:41,770 --> 00:24:44,440
things that's fine they're completely

00:24:42,760 --> 00:24:45,550
different languages but if you start

00:24:44,440 --> 00:24:47,710
thinking about up here it's like well

00:24:45,550 --> 00:24:52,090
why I just want a way to model the

00:24:47,710 --> 00:24:54,220
system so with all that in mind let's

00:24:52,090 --> 00:24:58,390
make it to do app it's everybody's

00:24:54,220 --> 00:25:01,059
favorite thing to do so this this

00:24:58,390 --> 00:25:03,309
particular example comes from a talk by

00:25:01,059 --> 00:25:05,770
one of the developers of a library clock

00:25:03,309 --> 00:25:08,980
ram to jas so this is what we're going

00:25:05,770 --> 00:25:10,620
to do with the set of tasks or yeah

00:25:08,980 --> 00:25:16,150
we're going to do the set of tasks and

00:25:10,620 --> 00:25:18,790
make program so this is again from his

00:25:16,150 --> 00:25:21,070
talk is the imperative code example of

00:25:18,790 --> 00:25:24,690
those three bullet points you don't have

00:25:21,070 --> 00:25:27,400
to read the whole thing it's a lot but

00:25:24,690 --> 00:25:30,370
translated into functional programming

00:25:27,400 --> 00:25:34,870
with good functional library looks more

00:25:30,370 --> 00:25:37,390
like that and it just seems really

00:25:34,870 --> 00:25:39,820
really clean and elegant to me and by

00:25:37,390 --> 00:25:42,309
building up its own vocabulary using

00:25:39,820 --> 00:25:44,620
functional compositions it can actually

00:25:42,309 --> 00:25:46,690
represent the things that the program is

00:25:44,620 --> 00:25:52,809
doing in a way that's fairly close to

00:25:46,690 --> 00:25:54,130
the list of bullet points and so we're

00:25:52,809 --> 00:25:56,400
getting pretty close to like a

00:25:54,130 --> 00:25:59,100
one-to-one representation here between

00:25:56,400 --> 00:26:01,179
you know there were the plain language

00:25:59,100 --> 00:26:04,809
requirements and what the code actually

00:26:01,179 --> 00:26:06,940
does and that got me really excited and

00:26:04,809 --> 00:26:09,210
I wanted to see how far you could take

00:26:06,940 --> 00:26:09,210
that idea

00:26:13,720 --> 00:26:17,710
so we could start by porting it des 6

00:26:16,120 --> 00:26:19,570
and moving a couple things around and

00:26:17,710 --> 00:26:22,000
taking a few liberties with ram does API

00:26:19,570 --> 00:26:24,490
to make some things implicit and it's a

00:26:22,000 --> 00:26:27,700
little bit more clean a little bit fewer

00:26:24,490 --> 00:26:29,380
you know characters and line noise or we

00:26:27,700 --> 00:26:31,750
could just go whole hog and just cheat

00:26:29,380 --> 00:26:33,760
and to start inventing syntax out thin

00:26:31,750 --> 00:26:36,010
air and then it almost reads exactly

00:26:33,760 --> 00:26:39,910
like it would in English just it says

00:26:36,010 --> 00:26:42,220
exactly what it's going to do that looks

00:26:39,910 --> 00:26:44,980
really interesting but let's get back to

00:26:42,220 --> 00:26:47,890
the idea of representations what if we

00:26:44,980 --> 00:26:50,050
have a representation that's completely

00:26:47,890 --> 00:26:52,060
different but makes a lot of sense to me

00:26:50,050 --> 00:26:54,580
and I just need to figure out how to

00:26:52,060 --> 00:26:56,530
make it make sense the computer well

00:26:54,580 --> 00:26:59,290
what about something like this it's just

00:26:56,530 --> 00:27:02,320
it's a visual way of saying exactly what

00:26:59,290 --> 00:27:04,510
you want to do so um I thought that idea

00:27:02,320 --> 00:27:09,060
was pretty interesting so I tried to

00:27:04,510 --> 00:27:10,900
make a thing so design and engineering

00:27:09,060 --> 00:27:13,540
this is really where it gets interesting

00:27:10,900 --> 00:27:16,360
for me so everything you saw there was a

00:27:13,540 --> 00:27:17,830
system of just a composition of data

00:27:16,360 --> 00:27:22,210
structures being rendered in a user

00:27:17,830 --> 00:27:23,320
interface and you know the I wrote a

00:27:22,210 --> 00:27:25,120
little system that can understand that

00:27:23,320 --> 00:27:26,830
but obviously it's just data I can

00:27:25,120 --> 00:27:30,760
export it to JSON but I can't really put

00:27:26,830 --> 00:27:31,840
it into production but I can generate

00:27:30,760 --> 00:27:35,080
something that can put it into

00:27:31,840 --> 00:27:36,760
production so I have my task list and

00:27:35,080 --> 00:27:39,190
have my little set of operations here

00:27:36,760 --> 00:27:42,160
and those decompose fairly simply to you

00:27:39,190 --> 00:27:46,210
know sequel queries and PHP operations

00:27:42,160 --> 00:27:48,340
and stuff and so we have a little code

00:27:46,210 --> 00:27:49,750
generator that works sorta like this and

00:27:48,340 --> 00:27:53,500
that's the really simple naive way of

00:27:49,750 --> 00:27:55,720
doing it however the really cool thing

00:27:53,500 --> 00:27:57,370
is because you have a system that's

00:27:55,720 --> 00:27:59,590
described in terms of data structures

00:27:57,370 --> 00:28:02,110
from end to end it's a single cohesive

00:27:59,590 --> 00:28:03,610
thing you can actually traverse across

00:28:02,110 --> 00:28:08,700
it and figure out how data is going to

00:28:03,610 --> 00:28:12,310
be used similar to the way like a

00:28:08,700 --> 00:28:15,610
optimizing compiler like walks in AST so

00:28:12,310 --> 00:28:19,650
you can actually generate much more you

00:28:15,610 --> 00:28:22,090
know performant code by create taking

00:28:19,650 --> 00:28:23,980
you know engineering problems and

00:28:22,090 --> 00:28:26,450
isolating them away from design problems

00:28:23,980 --> 00:28:28,670
so let's say like this one for example

00:28:26,450 --> 00:28:30,410
you know when you're when you're doing

00:28:28,670 --> 00:28:32,660
development and you're you know really

00:28:30,410 --> 00:28:34,550
going fast at some point you flip over

00:28:32,660 --> 00:28:36,230
to take an application or production

00:28:34,550 --> 00:28:37,940
then you have to do like all the stupid

00:28:36,230 --> 00:28:39,650
little performance optimizations like

00:28:37,940 --> 00:28:43,400
you know changing all of your select

00:28:39,650 --> 00:28:45,020
stars to select foo bar baz well that's

00:28:43,400 --> 00:28:46,570
like an individual unit of work that you

00:28:45,020 --> 00:28:49,310
have to do for every single application

00:28:46,570 --> 00:28:51,050
but if we can separate the design of

00:28:49,310 --> 00:28:53,210
applications in the way they're composed

00:28:51,050 --> 00:28:56,540
from all the engineering problems at

00:28:53,210 --> 00:28:59,300
least insofar as is possible we can

00:28:56,540 --> 00:29:02,000
solve the engineering problems in a more

00:28:59,300 --> 00:29:05,060
abstract way so that you only have to

00:29:02,000 --> 00:29:07,670
figure out a strategy for generating

00:29:05,060 --> 00:29:10,490
select foo bar baz once and then you're

00:29:07,670 --> 00:29:13,910
done forever and that's the same with

00:29:10,490 --> 00:29:16,250
any other kind of you know engineering

00:29:13,910 --> 00:29:17,840
or optimization problem you know you

00:29:16,250 --> 00:29:20,900
want to move logic from the client to

00:29:17,840 --> 00:29:22,730
the server or vice versa no big deal it

00:29:20,900 --> 00:29:25,520
affords this very easy way of shifting

00:29:22,730 --> 00:29:27,800
boundaries and shifting the way in which

00:29:25,520 --> 00:29:30,260
your application is run and it's there's

00:29:27,800 --> 00:29:35,840
really the the possibilities for that

00:29:30,260 --> 00:29:38,450
are really huge so one reaction I've

00:29:35,840 --> 00:29:40,520
gotten repeatedly after showing this to

00:29:38,450 --> 00:29:44,030
people is that man you're going to put

00:29:40,520 --> 00:29:48,200
us all out of work not cool but that's a

00:29:44,030 --> 00:29:50,600
very zero-sum way of thinking if you

00:29:48,200 --> 00:29:54,020
think about the world and you know

00:29:50,600 --> 00:29:56,150
everything around us sells ourselves our

00:29:54,020 --> 00:29:59,560
communities the weather the stock market

00:29:56,150 --> 00:30:02,720
the universe itself it's all systems and

00:29:59,560 --> 00:30:04,520
you know the key to understand the key

00:30:02,720 --> 00:30:06,890
to harnessing the power of systems is

00:30:04,520 --> 00:30:08,180
being able to understand them and to

00:30:06,890 --> 00:30:13,460
quote another well-known British

00:30:08,180 --> 00:30:16,610
philosopher that's our bag so yeah I

00:30:13,460 --> 00:30:20,150
think this idea that will be out of work

00:30:16,610 --> 00:30:22,340
ever is kind of silly because we have so

00:30:20,150 --> 00:30:24,590
many things to do there are so much

00:30:22,340 --> 00:30:26,840
bigger and better than what we're doing

00:30:24,590 --> 00:30:30,640
right now that we will never ever be

00:30:26,840 --> 00:30:30,640

YouTube URL: https://www.youtube.com/watch?v=tq7wKcwbUN8


