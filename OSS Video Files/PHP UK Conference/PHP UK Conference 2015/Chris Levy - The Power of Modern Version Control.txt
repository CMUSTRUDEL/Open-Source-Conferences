Title: Chris Levy - The Power of Modern Version Control
Publication date: 2015-04-02
Playlist: PHP UK Conference 2015
Description: 
	Version Control Systems have been around for a long time, however in the last decade advancements in VCS and other powerful tools have drastically increased the size of any community that can collaborate with ease. In this talk I will focus on the combination of Git and GitHub, demo some advanced tools available in Git, and clarify some details on contributing to Open Source using GitHub.

https://www.dropbox.com/s/gkylwcpghxsc41a/ModernVersionControl.odp
Captions: 
	00:00:00,000 --> 00:00:02,060
you

00:00:05,310 --> 00:00:10,840
my name is Chris levy as was said and

00:00:08,590 --> 00:00:14,260
today I'm going to talk to you about the

00:00:10,840 --> 00:00:18,460
power of modern version control with

00:00:14,260 --> 00:00:20,380
reference to git and github mostly and

00:00:18,460 --> 00:00:21,939
once we've talked about those two I'm

00:00:20,380 --> 00:00:25,919
going to talk to you about what i mean

00:00:21,939 --> 00:00:29,559
by the power of modern version control

00:00:25,919 --> 00:00:31,290
firstly a little bit about me Chris

00:00:29,559 --> 00:00:35,410
leave you obviously i'm on twitter at

00:00:31,290 --> 00:00:39,220
lavake I've worked with PHP for about 10

00:00:35,410 --> 00:00:42,130
years give or take originally I trained

00:00:39,220 --> 00:00:44,080
in Java a university because that's what

00:00:42,130 --> 00:00:48,700
I was interested in but i changed the

00:00:44,080 --> 00:00:50,440
PHP to get a job and I haven't done I

00:00:48,700 --> 00:00:53,710
haven't touched a single line of Java

00:00:50,440 --> 00:00:56,050
ever since currently I work with zend

00:00:53,710 --> 00:00:58,989
framework one and then framework to on

00:00:56,050 --> 00:01:01,870
different product projects bespoke work

00:00:58,989 --> 00:01:03,100
some products type stuff I've got

00:01:01,870 --> 00:01:05,710
experience in other frameworks to

00:01:03,100 --> 00:01:07,509
Symphony little bit symphony magento

00:01:05,710 --> 00:01:09,520
which I don't normally like to mention I

00:01:07,509 --> 00:01:12,970
could do a bit of work best work if you

00:01:09,520 --> 00:01:15,760
like and importantly for today I have

00:01:12,970 --> 00:01:18,400
made some small contributions to

00:01:15,760 --> 00:01:21,850
open-source small contributions but two

00:01:18,400 --> 00:01:23,560
big important projects same framework to

00:01:21,850 --> 00:01:28,240
I've got one pull request in their

00:01:23,560 --> 00:01:31,540
doctrine 20 DM the MongoDB 1 i've got

00:01:28,240 --> 00:01:33,970
two or three and most importantly PHP

00:01:31,540 --> 00:01:38,040
conference website where i can corrected

00:01:33,970 --> 00:01:38,040
my job before it went live

00:01:38,400 --> 00:01:44,770
it was my father it was wrong in Britain

00:01:41,910 --> 00:01:49,330
I'm also in github if you're interested

00:01:44,770 --> 00:01:50,410
and today's demos will are on there if

00:01:49,330 --> 00:01:52,270
you want to run through them yourselves

00:01:50,410 --> 00:01:58,330
it's just a script to run through and

00:01:52,270 --> 00:02:02,440
let's get on so firstly what do I mean

00:01:58,330 --> 00:02:05,170
by modern what's the modern part of the

00:02:02,440 --> 00:02:08,320
power of modern version control so if

00:02:05,170 --> 00:02:10,620
you go back 10 15 years ago something

00:02:08,320 --> 00:02:12,820
like that you were limited to

00:02:10,620 --> 00:02:16,150
centralized version control systems

00:02:12,820 --> 00:02:19,239
which had one main thing in common that

00:02:16,150 --> 00:02:22,180
they had one repository and because of

00:02:19,239 --> 00:02:23,650
that everyone who needed to talk to the

00:02:22,180 --> 00:02:26,980
repository had to do so over network

00:02:23,650 --> 00:02:29,400
connection that made things well it put

00:02:26,980 --> 00:02:34,060
a limit on the speed of operations likes

00:02:29,400 --> 00:02:37,480
branching and merging and an examples

00:02:34,060 --> 00:02:39,100
include CVS put your hands up if you've

00:02:37,480 --> 00:02:41,910
used you don't have to use it right now

00:02:39,100 --> 00:02:45,549
if you've used CVS in production

00:02:41,910 --> 00:02:50,890
excellent that is awesome it's up

00:02:45,549 --> 00:02:54,280
version that's all right great I'd say

00:02:50,890 --> 00:02:55,930
in the past it's fine this that that

00:02:54,280 --> 00:02:59,580
means you guys are the hardcore the old

00:02:55,930 --> 00:02:59,580
score in and you'll know what this means

00:03:00,420 --> 00:03:07,380
so back in the day everything well

00:03:05,019 --> 00:03:09,790
things were waterfall we had massive

00:03:07,380 --> 00:03:12,340
merges to do so when you did a feature

00:03:09,790 --> 00:03:14,860
you had to merge it in and conflicts

00:03:12,340 --> 00:03:21,820
were almost inevitable and this was

00:03:14,860 --> 00:03:23,590
quite rare so these days you might use

00:03:21,820 --> 00:03:26,320
what's called a distributed or

00:03:23,590 --> 00:03:29,829
decentralized version control system and

00:03:26,320 --> 00:03:32,160
the main difference as in the name is

00:03:29,829 --> 00:03:34,660
that these have multiple repositories

00:03:32,160 --> 00:03:36,459
every developer who's working on the

00:03:34,660 --> 00:03:37,480
code and has checked out in there

00:03:36,459 --> 00:03:39,610
working copy will have the run

00:03:37,480 --> 00:03:41,440
repository they might have one publicly

00:03:39,610 --> 00:03:43,420
available to other people and then there

00:03:41,440 --> 00:03:48,340
might be one that's used as a backup etc

00:03:43,420 --> 00:03:50,680
etc and because of that there's a lot of

00:03:48,340 --> 00:03:53,079
great benefit that comes from it

00:03:50,680 --> 00:03:56,079
it meant that a network require a

00:03:53,079 --> 00:03:57,549
network connection is only required when

00:03:56,079 --> 00:04:02,290
your repositories are talking to each

00:03:57,549 --> 00:04:04,989
other so sinking in terms of get you'll

00:04:02,290 --> 00:04:07,450
do a clone maybe or a push or a pull or

00:04:04,989 --> 00:04:10,409
a fetch but the snore mille day-to-day

00:04:07,450 --> 00:04:12,310
tasks like create branch doing a merge

00:04:10,409 --> 00:04:16,419
rebase we can talk about bit today

00:04:12,310 --> 00:04:18,759
commits that's about it don't require a

00:04:16,419 --> 00:04:22,590
network connection which means that they

00:04:18,759 --> 00:04:26,070
can meet much faster which is great and

00:04:22,590 --> 00:04:28,389
even more importantly for today

00:04:26,070 --> 00:04:30,460
distributed version control systems

00:04:28,389 --> 00:04:34,389
allow for a more complex collaboration

00:04:30,460 --> 00:04:37,000
model so emotive more disparate team can

00:04:34,389 --> 00:04:39,280
work together and it make this makes

00:04:37,000 --> 00:04:40,830
that possible without the team having

00:04:39,280 --> 00:04:44,470
all to be able to contact the same

00:04:40,830 --> 00:04:47,099
repository okay examples include arch

00:04:44,470 --> 00:04:50,740
which is really old has anyone used arch

00:04:47,099 --> 00:04:54,550
no didn't think so monotone didn't think

00:04:50,740 --> 00:05:01,030
so mercurial a bit more popular good and

00:04:54,550 --> 00:05:03,190
get go excellent right so let's talk

00:05:01,030 --> 00:05:06,280
about modern version control which today

00:05:03,190 --> 00:05:13,330
means get talked a bit a little bit

00:05:06,280 --> 00:05:16,840
about get yeah there we go a brief

00:05:13,330 --> 00:05:22,590
history so give me a shout shout out if

00:05:16,840 --> 00:05:22,590
you know who this is

00:05:23,950 --> 00:05:32,110
linus torvalds absolutely right thank

00:05:26,840 --> 00:05:36,280
you very much so Linus is famous for

00:05:32,110 --> 00:05:40,070
firstly creating the Linux kernel and

00:05:36,280 --> 00:05:43,340
possibly secondary so second riso for

00:05:40,070 --> 00:05:46,340
creating get and the two stories are

00:05:43,340 --> 00:05:48,830
intertwined the story of get goes that

00:05:46,340 --> 00:05:51,530
the Linux kernel development team which

00:05:48,830 --> 00:05:54,140
is just an immense team of developers

00:05:51,530 --> 00:05:57,680
who obviously who contribute to the

00:05:54,140 --> 00:06:00,410
Linux kernel statistics so there was a

00:05:57,680 --> 00:06:02,990
the Linux Foundation put out some stats

00:06:00,410 --> 00:06:06,790
a little while ago for linux kernel

00:06:02,990 --> 00:06:12,260
version 3.2 there were thirteen hundred

00:06:06,790 --> 00:06:13,940
contributors so that team was using as

00:06:12,260 --> 00:06:16,580
its version control system a system

00:06:13,940 --> 00:06:18,860
called bitkeeper which was distributed

00:06:16,580 --> 00:06:20,210
version control system and it was

00:06:18,860 --> 00:06:22,340
brilliant very fast if the excellent

00:06:20,210 --> 00:06:25,370
honest was very pleased and but it

00:06:22,340 --> 00:06:27,470
wasn't free unless you were working on

00:06:25,370 --> 00:06:29,530
the Linux kernel they had a deal where

00:06:27,470 --> 00:06:31,640
they could use it for free great and

00:06:29,530 --> 00:06:35,200
everyone was happy for a long long time

00:06:31,640 --> 00:06:39,140
until sadly all fell apart one day

00:06:35,200 --> 00:06:42,440
bitkeeper somehow accused one of the

00:06:39,140 --> 00:06:44,840
developers of reverse engineering pit

00:06:42,440 --> 00:06:46,520
keepers algorithms or all its code so

00:06:44,840 --> 00:06:49,360
the relationship broke down and they

00:06:46,520 --> 00:06:53,000
lost the ability to use people for free

00:06:49,360 --> 00:06:55,460
so an alternative had to be found so

00:06:53,000 --> 00:06:57,740
Linus and the team are looking for

00:06:55,460 --> 00:07:01,090
alternatives yet none are up to sketch

00:06:57,740 --> 00:07:05,720
nothing's up to scratch of the time and

00:07:01,090 --> 00:07:07,670
mostly because of performance and as I

00:07:05,720 --> 00:07:09,920
say that in the same stats that the

00:07:07,670 --> 00:07:12,230
Linux Foundation put out the Linux

00:07:09,920 --> 00:07:14,540
kernel itself if you were to clone the

00:07:12,230 --> 00:07:16,730
repository it's one point one and a half

00:07:14,540 --> 00:07:19,430
gigs one a half gigabytes and we're

00:07:16,730 --> 00:07:22,070
looking at 15 million lines of code so

00:07:19,430 --> 00:07:25,160
when patches are applied it needs to be

00:07:22,070 --> 00:07:27,020
really fast Linus did some benchmarks

00:07:25,160 --> 00:07:28,700
with various different virtual control

00:07:27,020 --> 00:07:31,400
systems and sometimes applying a single

00:07:28,700 --> 00:07:34,100
patch would take 30 seconds and you in

00:07:31,400 --> 00:07:36,050
one merge you might be applying hundreds

00:07:34,100 --> 00:07:37,400
of patches so that was just that was

00:07:36,050 --> 00:07:39,500
untenable so

00:07:37,400 --> 00:07:41,180
what to do you've got a whole team you

00:07:39,500 --> 00:07:43,850
see developers in your great c developer

00:07:41,180 --> 00:07:45,440
yourself obviously what he decided to do

00:07:43,850 --> 00:07:47,120
was create his own he's going to be

00:07:45,440 --> 00:07:49,430
everyone and make his own version

00:07:47,120 --> 00:07:51,669
control system and that is how get was

00:07:49,430 --> 00:07:54,820
created and incidentally both systems

00:07:51,669 --> 00:08:02,060
linux is named after Linus and so is get

00:07:54,820 --> 00:08:05,600
just so and during the development of

00:08:02,060 --> 00:08:09,380
get four main design criteria were

00:08:05,600 --> 00:08:11,630
adopted by by Linus himself the first

00:08:09,380 --> 00:08:14,389
and most amusing one is that they wanted

00:08:11,630 --> 00:08:17,030
or he wanted to ignore legacy more

00:08:14,389 --> 00:08:18,800
specifically he said when we don't know

00:08:17,030 --> 00:08:20,510
what we're going to do we're going to

00:08:18,800 --> 00:08:24,080
take what was done before and we're

00:08:20,510 --> 00:08:27,050
going to do the exact opposite thus a

00:08:24,080 --> 00:08:30,800
lot of previous legacy was destroyed

00:08:27,050 --> 00:08:32,089
okay and for good good results obviously

00:08:30,800 --> 00:08:34,130
a distributed workflow is required

00:08:32,089 --> 00:08:36,349
strong integrity we can't be losing code

00:08:34,130 --> 00:08:38,360
and high performance very important

00:08:36,349 --> 00:08:40,729
because of the size of the Linux kernel

00:08:38,360 --> 00:08:47,300
the complexity all those branches and

00:08:40,729 --> 00:08:49,940
all the patches okay right foundations a

00:08:47,300 --> 00:08:51,440
few things I just want to touch on

00:08:49,940 --> 00:08:55,220
before we get on to the really complex

00:08:51,440 --> 00:08:57,980
stuff what's important here so on this

00:08:55,220 --> 00:09:00,080
first part branches the things that you

00:08:57,980 --> 00:09:02,570
need to know our this office this

00:09:00,080 --> 00:09:06,980
diagram represents a very very small

00:09:02,570 --> 00:09:09,770
tree of God repository and get c0 c1 c2

00:09:06,980 --> 00:09:12,920
c3 and c4 of commits but what they

00:09:09,770 --> 00:09:16,459
really are are snapshots of your code so

00:09:12,920 --> 00:09:18,290
get stores its data or your code as in a

00:09:16,459 --> 00:09:22,730
snapshot of the code in its entirety

00:09:18,290 --> 00:09:25,420
with various optimizations so that it's

00:09:22,730 --> 00:09:27,770
not too big but that's important

00:09:25,420 --> 00:09:29,900
secondly the snapshot contains a

00:09:27,770 --> 00:09:32,600
reference to its parent so you can form

00:09:29,900 --> 00:09:34,339
a tree and thirdly the branches the

00:09:32,600 --> 00:09:36,110
branches you can see experiment

00:09:34,339 --> 00:09:38,480
hopefully you can see excuse me that the

00:09:36,110 --> 00:09:41,000
top one is experiment and the bottom one

00:09:38,480 --> 00:09:42,650
is master now the important thing to

00:09:41,000 --> 00:09:46,700
know about branches in get is that they

00:09:42,650 --> 00:09:49,610
are simply a pointer to a snapshot

00:09:46,700 --> 00:09:52,520
which makes them very light and it makes

00:09:49,610 --> 00:09:57,500
branch operations very very fast very

00:09:52,520 --> 00:10:00,380
fast okay the second part is remotes

00:09:57,500 --> 00:10:02,120
which isn't cut off too much good so

00:10:00,380 --> 00:10:05,840
really the only thing you need to know

00:10:02,120 --> 00:10:08,750
here is at the top we've got what is

00:10:05,840 --> 00:10:10,730
would be a remote so it's hosted on our

00:10:08,750 --> 00:10:12,950
company com it's just a repository that

00:10:10,730 --> 00:10:14,720
we use it's publicly available or

00:10:12,950 --> 00:10:17,030
perhaps on the intranet available to

00:10:14,720 --> 00:10:18,950
other people and then we've got my

00:10:17,030 --> 00:10:23,300
computer down here which is my working

00:10:18,950 --> 00:10:27,820
copy and it's a repository in itself but

00:10:23,300 --> 00:10:30,200
importantly you can see I've got as

00:10:27,820 --> 00:10:32,690
branches the top 1 i've got is called

00:10:30,200 --> 00:10:34,610
origin master and the bottom one is just

00:10:32,690 --> 00:10:36,830
master so i've got a local master branch

00:10:34,610 --> 00:10:39,650
and there's a remote i've got i know

00:10:36,830 --> 00:10:41,810
about the remote master branch and that

00:10:39,650 --> 00:10:46,760
allows me to do syncing and comparisons

00:10:41,810 --> 00:10:51,320
between the two repositories ok merge

00:10:46,760 --> 00:10:53,030
veces rebase so every so often you've

00:10:51,320 --> 00:10:55,370
done some brilliant work in a branch and

00:10:53,030 --> 00:10:57,650
you need to get it back into into the

00:10:55,370 --> 00:10:59,270
main threads into the main branches and

00:10:57,650 --> 00:11:03,620
you've got two options the first option

00:10:59,270 --> 00:11:07,490
is to merge well that's fine the first

00:11:03,620 --> 00:11:08,990
option is to merge and that's what you

00:11:07,490 --> 00:11:13,820
would have always had I guess no matter

00:11:08,990 --> 00:11:18,650
what you are using so the important

00:11:13,820 --> 00:11:21,230
thing to note here is we've got c3 and

00:11:18,650 --> 00:11:24,650
c4 this is from the previous slide but

00:11:21,230 --> 00:11:27,800
we're fine we've got changes in c3 that

00:11:24,650 --> 00:11:30,590
aren't in c4 and we've got changes as c4

00:11:27,800 --> 00:11:32,480
potentially that aren't in c3 we need to

00:11:30,590 --> 00:11:34,370
get them all in one place and with a

00:11:32,480 --> 00:11:36,800
merge what happens is the differences

00:11:34,370 --> 00:11:40,670
are calculated and everything ends up in

00:11:36,800 --> 00:11:41,900
a single new commit c5 and then the

00:11:40,670 --> 00:11:43,760
current branch which is master in this

00:11:41,900 --> 00:11:47,390
case just gets fast-forwarded and we're

00:11:43,760 --> 00:11:48,980
done which is great um so the important

00:11:47,390 --> 00:11:51,380
things to know it creates a single new

00:11:48,980 --> 00:11:53,000
snap snap shot and that once you're done

00:11:51,380 --> 00:11:55,310
your history is parallel you can still

00:11:53,000 --> 00:11:58,809
see that you had an experiment branch

00:11:55,310 --> 00:12:01,819
that you took your changes to get c5

00:11:58,809 --> 00:12:03,199
now your alternative in get and quite

00:12:01,819 --> 00:12:07,699
possibly other version control systems

00:12:03,199 --> 00:12:09,499
is to rebase and we'll talk about why

00:12:07,699 --> 00:12:12,170
potentially in a minute but the

00:12:09,499 --> 00:12:14,600
difference in operation you should be

00:12:12,170 --> 00:12:17,209
let's see from the diagram again we had

00:12:14,600 --> 00:12:19,040
the same situation c3 and c4 of diverge

00:12:17,209 --> 00:12:22,189
they're different and we want to get

00:12:19,040 --> 00:12:25,009
everything into this time into the

00:12:22,189 --> 00:12:26,269
experiment Brants it seems and with this

00:12:25,009 --> 00:12:30,170
time we're going to do a rebase so what

00:12:26,269 --> 00:12:33,230
happens is get will rewind your working

00:12:30,170 --> 00:12:36,230
copy back to the nearest common ancestor

00:12:33,230 --> 00:12:40,220
of the commits that you're merging so

00:12:36,230 --> 00:12:42,410
rebasing so in this case c3 and c4 have

00:12:40,220 --> 00:12:44,269
a common ancestor of c to the nearest

00:12:42,410 --> 00:12:46,610
common ancestor that is and then what

00:12:44,269 --> 00:12:48,829
happens is we rewind the experiment

00:12:46,610 --> 00:12:52,790
branch rather the master branch back to

00:12:48,829 --> 00:12:55,449
c 2 and then we go forward applying each

00:12:52,790 --> 00:12:58,309
commit that was in the branch one by one

00:12:55,449 --> 00:13:00,709
okay so if there were more kibitz in

00:12:58,309 --> 00:13:03,169
experiment which still have only see

00:13:00,709 --> 00:13:06,589
five here just one but we would have

00:13:03,169 --> 00:13:09,769
more commits in the rebase because each

00:13:06,589 --> 00:13:12,860
commit has done one by one a very

00:13:09,769 --> 00:13:15,230
important thing to note here is that c 3

00:13:12,860 --> 00:13:18,799
dash the dash is there for a reason that

00:13:15,230 --> 00:13:21,519
new c3 which had been applied to the

00:13:18,799 --> 00:13:24,199
current branch is has a different ID

00:13:21,519 --> 00:13:26,629
okay it's actually a new commit and the

00:13:24,199 --> 00:13:28,309
old c3 is well it's floating it's not

00:13:26,629 --> 00:13:31,519
been destroyed but it is floating around

00:13:28,309 --> 00:13:33,230
and difficult to access okay another

00:13:31,519 --> 00:13:34,970
thing that's very important is now your

00:13:33,230 --> 00:13:37,669
history is linear it looks like you've

00:13:34,970 --> 00:13:38,899
done everything in just do some work

00:13:37,669 --> 00:13:40,519
commit deuce and what can it do someone

00:13:38,899 --> 00:13:45,019
commits which is some would argue

00:13:40,519 --> 00:13:49,040
cleaner ok so when to rebase what you've

00:13:45,019 --> 00:13:51,649
got a choice who knows which one ok so

00:13:49,040 --> 00:13:53,299
if you're going to rebase probably the

00:13:51,649 --> 00:13:54,679
main reason is for cleaner history other

00:13:53,299 --> 00:13:56,149
people might ask you to rebase when

00:13:54,679 --> 00:13:57,739
you're collaborating with them because

00:13:56,149 --> 00:14:01,790
it's easier for them to see what you've

00:13:57,739 --> 00:14:04,369
done and another use case is if you're

00:14:01,790 --> 00:14:06,199
collaborating let's say you are

00:14:04,369 --> 00:14:08,299
contributing to zen framework to and

00:14:06,199 --> 00:14:10,639
you're doing some brilliant work and

00:14:08,299 --> 00:14:11,810
you've gone on holiday taking a couple

00:14:10,639 --> 00:14:15,410
of weeks out you come

00:14:11,810 --> 00:14:18,620
back you're the repository or

00:14:15,410 --> 00:14:20,360
contributing to probably has changed and

00:14:18,620 --> 00:14:21,890
you're going to need to make sure that

00:14:20,360 --> 00:14:23,960
you've got those changes so that you're

00:14:21,890 --> 00:14:26,360
still working on the current version of

00:14:23,960 --> 00:14:28,910
the repository okay and in order to do

00:14:26,360 --> 00:14:31,430
that you'll need to do a fetch rebase

00:14:28,910 --> 00:14:33,920
from origin master so not necessarily

00:14:31,430 --> 00:14:36,320
master but the idea is is that you bring

00:14:33,920 --> 00:14:38,330
down the changes from the remote but

00:14:36,320 --> 00:14:39,890
first you rewind yours you play all of

00:14:38,330 --> 00:14:42,620
theirs on top and then you replay yours

00:14:39,890 --> 00:14:44,450
on top of theirs so you've now picked

00:14:42,620 --> 00:14:47,450
your changes up and put them on the

00:14:44,450 --> 00:14:50,720
latest version rather than risking a

00:14:47,450 --> 00:14:52,160
dodgy merge next to perform advanced

00:14:50,720 --> 00:14:54,910
functions it's a good reason to rebase

00:14:52,160 --> 00:14:58,720
and we'll have a look at them later ah

00:14:54,910 --> 00:15:01,820
ok so now a couple of pitfalls first

00:14:58,720 --> 00:15:04,040
right be careful attempting to rebase

00:15:01,820 --> 00:15:07,910
commits from previous merges what does

00:15:04,040 --> 00:15:09,500
that mean what that means is so from

00:15:07,910 --> 00:15:13,010
previous merges let's say you've done

00:15:09,500 --> 00:15:14,510
some work you've merged it in in if

00:15:13,010 --> 00:15:17,210
you've done emerge and it there was

00:15:14,510 --> 00:15:19,310
conflicts ok which can happen you then

00:15:17,210 --> 00:15:21,710
keep carry on working and then you

00:15:19,310 --> 00:15:24,800
decide that you're not happy and you go

00:15:21,710 --> 00:15:27,260
back and you re base from before that

00:15:24,800 --> 00:15:29,540
point those conflicts that happen before

00:15:27,260 --> 00:15:31,670
will happen again because you're doing

00:15:29,540 --> 00:15:33,710
exactly the same thing again so be

00:15:31,670 --> 00:15:36,770
careful of that the next thing to be

00:15:33,710 --> 00:15:40,820
careful for oh I've gone too far back

00:15:36,770 --> 00:15:43,550
one please thank you do not rebase

00:15:40,820 --> 00:15:46,010
commits that you have pushed to a public

00:15:43,550 --> 00:15:47,870
repository that's from get sem knock on

00:15:46,010 --> 00:15:49,520
which you may or may not have heard of

00:15:47,870 --> 00:15:55,760
but that is the home of gets

00:15:49,520 --> 00:15:57,130
documentation so what that means is so

00:15:55,760 --> 00:15:59,930
let's say again you're collaborating

00:15:57,130 --> 00:16:02,120
you've done some work it's brilliant you

00:15:59,930 --> 00:16:05,360
push it up in order to get it poor at a

00:16:02,120 --> 00:16:06,560
pull request and it gets well let's say

00:16:05,360 --> 00:16:09,200
you've just pushed up to a repository

00:16:06,560 --> 00:16:11,180
that's available to others others are

00:16:09,200 --> 00:16:15,110
then using your commits quite happily

00:16:11,180 --> 00:16:17,180
and you then decide I'm not happy you go

00:16:15,110 --> 00:16:20,750
back Yuri base some of those commits and

00:16:17,180 --> 00:16:22,100
then you need to push again okay now

00:16:20,750 --> 00:16:24,830
from wheel point of view nothing's gone

00:16:22,100 --> 00:16:25,610
wrong but anyone else who's got those

00:16:24,830 --> 00:16:28,100
commits that

00:16:25,610 --> 00:16:30,050
you've now changed the IDs will have

00:16:28,100 --> 00:16:33,260
changed and when they do a fetch or a

00:16:30,050 --> 00:16:34,820
pull they're going to get merged the

00:16:33,260 --> 00:16:36,170
same changes that they've already got

00:16:34,820 --> 00:16:37,970
because then you commits are going to

00:16:36,170 --> 00:16:39,740
get merged into their code and it's

00:16:37,970 --> 00:16:40,850
going to create a new revision and then

00:16:39,740 --> 00:16:42,709
they're going to have to push that back

00:16:40,850 --> 00:16:45,140
up and then you're going to fetch that

00:16:42,709 --> 00:16:48,050
and then you're in an infinitely so

00:16:45,140 --> 00:16:50,029
watch out any commits that you have

00:16:48,050 --> 00:16:56,690
pushed to be public you should probably

00:16:50,029 --> 00:17:00,350
consider to be immutable okay work blows

00:16:56,690 --> 00:17:01,459
workflows so depending on the

00:17:00,350 --> 00:17:04,640
technologies that you've got your

00:17:01,459 --> 00:17:06,650
disposal and the size of your team and

00:17:04,640 --> 00:17:09,260
the distribution of your team your

00:17:06,650 --> 00:17:11,959
workflow will be different this is a

00:17:09,260 --> 00:17:14,179
very very simple workflow that my team

00:17:11,959 --> 00:17:15,559
currently uses because it's simple and

00:17:14,179 --> 00:17:19,720
we're all in the same room and we use

00:17:15,559 --> 00:17:21,620
subversion so again if it's a

00:17:19,720 --> 00:17:23,569
centralized version control system

00:17:21,620 --> 00:17:25,339
you're pretty much stuck with it you've

00:17:23,569 --> 00:17:27,439
got a shared repository all the

00:17:25,339 --> 00:17:29,600
developers check out and commit and

00:17:27,439 --> 00:17:32,980
communicate with it obviously over a

00:17:29,600 --> 00:17:35,840
network and it's all good it's all easy

00:17:32,980 --> 00:17:37,400
there's a couple of pitfalls it does

00:17:35,840 --> 00:17:38,570
mean that all the developers have to

00:17:37,400 --> 00:17:40,910
have write access to the repository

00:17:38,570 --> 00:17:41,900
which means if they really don't know

00:17:40,910 --> 00:17:44,270
what they're doing when you've given

00:17:41,900 --> 00:17:47,000
them too much access they can make

00:17:44,270 --> 00:17:48,169
mistakes but this is great for small

00:17:47,000 --> 00:17:52,090
teams because there's not a lot of

00:17:48,169 --> 00:17:56,330
management going on less you back one

00:17:52,090 --> 00:17:58,160
thank you so this one it's a bit more

00:17:56,330 --> 00:18:00,169
complicated and it's necessary

00:17:58,160 --> 00:18:02,570
potentially if you've got a distributed

00:18:00,169 --> 00:18:05,240
team or multiple teams collaborating on

00:18:02,570 --> 00:18:07,730
the same project which is why it's

00:18:05,240 --> 00:18:10,669
pretty much what is used for the Linux

00:18:07,730 --> 00:18:13,330
kernel in my I think so but it's a good

00:18:10,669 --> 00:18:15,710
analogy anyway so the difference is are

00:18:13,330 --> 00:18:18,799
the Blessid repository you can see which

00:18:15,710 --> 00:18:22,100
is blue is effectively what's life and

00:18:18,799 --> 00:18:24,650
only a subset of people that are

00:18:22,100 --> 00:18:26,660
contributing can actually change it all

00:18:24,650 --> 00:18:30,230
that's the people in red the integration

00:18:26,660 --> 00:18:33,169
manager is okay anyone else who wants to

00:18:30,230 --> 00:18:34,550
contribute can access the public

00:18:33,169 --> 00:18:36,860
repository no problem they can check it

00:18:34,550 --> 00:18:39,420
out but in order to make their changes

00:18:36,860 --> 00:18:42,300
go into it they have to make

00:18:39,420 --> 00:18:44,070
a public clone of their repository and

00:18:42,300 --> 00:18:45,330
flight patches to that and then they

00:18:44,070 --> 00:18:47,190
have to somehow communicate with the

00:18:45,330 --> 00:18:48,390
integration manager on the let's go it's

00:18:47,190 --> 00:18:51,480
done by our mailing list everything's

00:18:48,390 --> 00:18:53,760
email you JEP is plain text emails with

00:18:51,480 --> 00:18:55,380
headers and you say this is my public

00:18:53,760 --> 00:18:57,420
repository and this is the patch I want

00:18:55,380 --> 00:18:59,310
you to pull and then please look at it

00:18:57,420 --> 00:19:00,870
that's what they do so you'd email the

00:18:59,310 --> 00:19:03,810
integration manager and say please pull

00:19:00,870 --> 00:19:05,850
my patch and apply it to the Blessed

00:19:03,810 --> 00:19:07,560
velocity and then the great thing about

00:19:05,850 --> 00:19:10,260
that is the integration manager can say

00:19:07,560 --> 00:19:11,970
okay let's have a look it's rubbish get

00:19:10,260 --> 00:19:15,690
lost oh it's brilliant thank you very

00:19:11,970 --> 00:19:18,630
much okay so this makes the Blessed

00:19:15,690 --> 00:19:20,940
repository very secure very safe it also

00:19:18,630 --> 00:19:23,600
allows people to be in charge of it okay

00:19:20,940 --> 00:19:27,780
but anyone can potentially contribute

00:19:23,600 --> 00:19:28,920
this is how open source works okay let's

00:19:27,780 --> 00:19:30,780
just make sure I've got everything it's

00:19:28,920 --> 00:19:34,440
great for large distributed teams yeah

00:19:30,780 --> 00:19:37,880
that's fine okay this is going to get

00:19:34,440 --> 00:19:40,770
interesting clever stuff with get so

00:19:37,880 --> 00:19:45,660
first of all there are a couple of

00:19:40,770 --> 00:19:47,700
slides changing history so as we've said

00:19:45,660 --> 00:19:51,810
you can you can go back and change

00:19:47,700 --> 00:19:54,900
things okay but be careful with great

00:19:51,810 --> 00:19:55,980
power comes great responsibility various

00:19:54,900 --> 00:19:58,020
people in history have said that

00:19:55,980 --> 00:20:00,350
including a bullet right so I did

00:19:58,020 --> 00:20:05,160
actually look this up the first

00:20:00,350 --> 00:20:07,830
attributed the speaking of this quote

00:20:05,160 --> 00:20:09,780
was a French author called Voltaire I

00:20:07,830 --> 00:20:13,490
believe but also it's attributed to

00:20:09,780 --> 00:20:15,720
winston churchill and roosevelt

00:20:13,490 --> 00:20:18,420
spider-man's uncle been anyone's in that

00:20:15,720 --> 00:20:20,160
film he says that and Stanley it's

00:20:18,420 --> 00:20:22,770
attributed to because of that but it

00:20:20,160 --> 00:20:24,780
doesn't matter the point is just because

00:20:22,770 --> 00:20:29,130
you can do a thing does not mean you

00:20:24,780 --> 00:20:33,030
should do that thing necessarily okay so

00:20:29,130 --> 00:20:35,490
correcting back one bleats correcting

00:20:33,030 --> 00:20:37,440
the last commit okay this is very very

00:20:35,490 --> 00:20:39,690
easy there's the command just skip

00:20:37,440 --> 00:20:42,480
commit- months and then okay and all

00:20:39,690 --> 00:20:44,400
that will do is bring up whatever commit

00:20:42,480 --> 00:20:46,500
window you use or maybe it's just a text

00:20:44,400 --> 00:20:49,290
editor and what will be in there is the

00:20:46,500 --> 00:20:51,780
last commit that you committed and you

00:20:49,290 --> 00:20:52,630
can change it and then you can resubmit

00:20:51,780 --> 00:20:56,260
it

00:20:52,630 --> 00:20:59,380
and no one will ever know unless that

00:20:56,260 --> 00:21:01,810
commit was public in which case it would

00:20:59,380 --> 00:21:04,540
have a new ID and you're in an infinite

00:21:01,810 --> 00:21:06,040
loop so be careful okay the things that

00:21:04,540 --> 00:21:09,100
you can change for doing this are the

00:21:06,040 --> 00:21:11,260
message the files so well they're called

00:21:09,100 --> 00:21:12,940
objects and get and the code in those

00:21:11,260 --> 00:21:16,320
files okay so basically anything you can

00:21:12,940 --> 00:21:20,440
do in a commit say so more complicated

00:21:16,320 --> 00:21:23,140
is changing many commits so there are

00:21:20,440 --> 00:21:26,020
reasons to do this but I'm not here to

00:21:23,140 --> 00:21:28,150
judge it's up to you you might get told

00:21:26,020 --> 00:21:30,490
to do it in which case I'm sure there's

00:21:28,150 --> 00:21:32,350
a good reason and it's bit more

00:21:30,490 --> 00:21:35,230
complicated and it involves an

00:21:32,350 --> 00:21:37,180
interactive rebase so we talked about

00:21:35,230 --> 00:21:38,440
rebase in this case what you'll do is

00:21:37,180 --> 00:21:41,680
you'll rebased a lot of commits and

00:21:38,440 --> 00:21:43,000
you'll tell get I want to change these

00:21:41,680 --> 00:21:44,470
ones not all of them necessarily but

00:21:43,000 --> 00:21:45,640
just these ones and it will do the

00:21:44,470 --> 00:21:48,670
rebase and when it gets to one of those

00:21:45,640 --> 00:21:50,470
it will say what do you wanna do and you

00:21:48,670 --> 00:21:52,420
do it and then is what you want to do so

00:21:50,470 --> 00:21:54,940
that's what's going to happen and you

00:21:52,420 --> 00:22:00,310
can amend lots of things same as you can

00:21:54,940 --> 00:22:02,020
do in a commit amend but also be careful

00:22:00,310 --> 00:22:03,970
you can remove commits doing this so

00:22:02,020 --> 00:22:05,950
let's say you've committed a debug and

00:22:03,970 --> 00:22:08,350
you haven't done anything else you

00:22:05,950 --> 00:22:10,270
potentially could remove that commit you

00:22:08,350 --> 00:22:12,580
can reorder them within reason it's got

00:22:10,270 --> 00:22:14,320
to still make sense you can squash so

00:22:12,580 --> 00:22:16,240
that means combining commits and their

00:22:14,320 --> 00:22:19,660
messages together and you can split

00:22:16,240 --> 00:22:27,660
opposite of squash so this is where we

00:22:19,660 --> 00:22:35,710
get brave can we switch please this oh

00:22:27,660 --> 00:22:45,550
it's going to sleep is it back wonderful

00:22:35,710 --> 00:22:48,070
here we go wish me luck so my house

00:22:45,550 --> 00:22:51,760
because I'm doing the other one there we

00:22:48,070 --> 00:22:54,640
go so this might cut a little bit so

00:22:51,760 --> 00:22:57,100
we're going to do a rebase an

00:22:54,640 --> 00:22:59,350
interactive rebase and all I'm going to

00:22:57,100 --> 00:23:01,210
do is change them commit messages to a

00:22:59,350 --> 00:23:04,090
repository that I made especially for

00:23:01,210 --> 00:23:06,040
this that you can see on github so that

00:23:04,090 --> 00:23:09,370
says get K which shows me the history

00:23:06,040 --> 00:23:11,380
and you can't quite it but the important

00:23:09,370 --> 00:23:13,630
thing to note is if you see the top

00:23:11,380 --> 00:23:14,740
that's the commit messages and the

00:23:13,630 --> 00:23:16,480
important thing to note is that I've

00:23:14,740 --> 00:23:20,230
screwed some of them up on purpose you

00:23:16,480 --> 00:23:22,720
can see there's missing bits there no

00:23:20,230 --> 00:23:27,870
not great okay so what I want to do is I

00:23:22,720 --> 00:23:27,870
want to interactively rebase them to oh

00:23:29,370 --> 00:23:34,750
that's not good I need to see that I

00:23:32,280 --> 00:23:37,300
need to interactively rebase them in

00:23:34,750 --> 00:23:39,640
order to change the commit messages okay

00:23:37,300 --> 00:23:41,950
so the command of for some reason I'm

00:23:39,640 --> 00:23:45,310
testing it it works print so in order to

00:23:41,950 --> 00:23:49,300
rebase them I tell get that says git

00:23:45,310 --> 00:23:52,570
rebase interactive heads tilled six what

00:23:49,300 --> 00:23:55,720
head tilt six means the head is the most

00:23:52,570 --> 00:23:57,610
recent commit in your current branch

00:23:55,720 --> 00:24:00,100
whether it's actually where the branch

00:23:57,610 --> 00:24:02,830
pointer is and tilted six means minus

00:24:00,100 --> 00:24:06,700
six so come six commits back from their

00:24:02,830 --> 00:24:09,460
head and rebase all of those okay so

00:24:06,700 --> 00:24:12,120
let's wish me luck all this is going to

00:24:09,460 --> 00:24:15,070
be fun because they can't see it so

00:24:12,120 --> 00:24:18,330
there's my thing right so you can now

00:24:15,070 --> 00:24:20,740
see these are the six latest commits in

00:24:18,330 --> 00:24:22,690
well not in reverse order because you

00:24:20,740 --> 00:24:25,500
see them in reverse order on the history

00:24:22,690 --> 00:24:28,050
but these are in chronological order and

00:24:25,500 --> 00:24:30,400
what I'm going to do is change the

00:24:28,050 --> 00:24:33,160
commit message for that one and change

00:24:30,400 --> 00:24:35,440
the commit message for that one and here

00:24:33,160 --> 00:24:38,800
it shows me what my options are so pick

00:24:35,440 --> 00:24:41,860
means continue to use it reword which is

00:24:38,800 --> 00:24:44,710
what i'm going to do edit squash fix up

00:24:41,860 --> 00:24:46,540
exec play with those if you like but not

00:24:44,710 --> 00:24:49,060
on a repository that you're not afraid

00:24:46,540 --> 00:24:51,730
to destroy so in order to actually do

00:24:49,060 --> 00:24:54,670
things those all current lease a pic and

00:24:51,730 --> 00:24:56,920
i'm going to go one two three four

00:24:54,670 --> 00:24:58,600
putting our there that's an r4 reword

00:24:56,920 --> 00:25:00,400
then i'm gonna have to find my point to

00:24:58,600 --> 00:25:08,520
again and then i'm going to go one two

00:25:00,400 --> 00:25:12,040
three four are and then save saving exit

00:25:08,520 --> 00:25:13,630
brilliant so it's done son rebasing and

00:25:12,040 --> 00:25:15,520
now it's got to a commit that i've said

00:25:13,630 --> 00:25:18,280
i want to change and it's given me the

00:25:15,520 --> 00:25:20,240
commit window and it's saying what would

00:25:18,280 --> 00:25:22,280
you like to do please enter forgive me

00:25:20,240 --> 00:25:25,160
brilliant so if I'm if I'm completely

00:25:22,280 --> 00:25:32,870
honest I can't see it so what I'm going

00:25:25,160 --> 00:25:42,520
to do is that's a good plan let's try it

00:25:32,870 --> 00:25:45,530
oh you geniuses I'm under pressure

00:25:42,520 --> 00:25:48,890
rolled on right so that should be added

00:25:45,530 --> 00:25:51,140
and i'm going to use guess it's based on

00:25:48,890 --> 00:25:55,100
memory l okay so it used to just be ad

00:25:51,140 --> 00:25:56,450
save it brilliant come out a bit more

00:25:55,100 --> 00:26:02,020
rebasing and then we're back to another

00:25:56,450 --> 00:26:02,020
one this one I was probably oh who knows

00:26:02,770 --> 00:26:08,660
there we go bit of that right now it's

00:26:06,920 --> 00:26:11,270
carried on rebasing and it's told me

00:26:08,660 --> 00:26:13,670
it's finished fantastic so what I need

00:26:11,270 --> 00:26:16,460
to do now is look at the history again

00:26:13,670 --> 00:26:18,260
and tell you what I should do as you say

00:26:16,460 --> 00:26:21,280
all right so you can still see so you

00:26:18,260 --> 00:26:25,490
can see pretty much maybe I should just

00:26:21,280 --> 00:26:27,380
do that there we go now my commit

00:26:25,490 --> 00:26:29,600
messages make sense whereas previously

00:26:27,380 --> 00:26:31,600
they did not and my version control

00:26:29,600 --> 00:26:34,059
administrator Pat's me on the back and

00:26:31,600 --> 00:26:39,950
then slaps me because they were public

00:26:34,059 --> 00:26:43,280
no not really okay that is how you do an

00:26:39,950 --> 00:26:51,110
interactive rebase and let me just do a

00:26:43,280 --> 00:26:56,260
little bit of cleanup was bit of a

00:26:51,110 --> 00:26:56,260
preview looks ed that's life

00:27:01,049 --> 00:27:13,509
hmm preview there we go right back to

00:27:09,130 --> 00:27:17,139
the slides if you please thank you so

00:27:13,509 --> 00:27:22,059
much Oh debugging that was meant to be a

00:27:17,139 --> 00:27:25,570
surprise but I ruined it so get can help

00:27:22,059 --> 00:27:27,009
you to debug in a way so let's say

00:27:25,570 --> 00:27:29,500
you're in a situation where you've got a

00:27:27,009 --> 00:27:31,809
horrible horrible bug and the only thing

00:27:29,500 --> 00:27:34,240
you know about this bug is that a it's

00:27:31,809 --> 00:27:36,309
there and be held to replicate it so you

00:27:34,240 --> 00:27:37,750
you know you hit your your web page or

00:27:36,309 --> 00:27:39,639
you run your script and there's some

00:27:37,750 --> 00:27:43,360
horrible error and you know this is that

00:27:39,639 --> 00:27:45,850
bug okay it will help you find the

00:27:43,360 --> 00:27:50,200
commit where that bug was introduced by

00:27:45,850 --> 00:27:51,759
doing a binary search and bisect is a

00:27:50,200 --> 00:27:53,529
work for binary search i cain't and the

00:27:51,759 --> 00:27:55,539
idea is that it tests the minimum number

00:27:53,529 --> 00:27:57,580
of commits sister almost the quickest

00:27:55,539 --> 00:28:03,100
way to get there without a very lucky

00:27:57,580 --> 00:28:04,330
guess okay and next there is a demo so

00:28:03,100 --> 00:28:07,690
if we can switch back again if you

00:28:04,330 --> 00:28:11,259
please promise it's the last time ok so

00:28:07,690 --> 00:28:14,379
the debugging demo goes lastly d mother

00:28:11,259 --> 00:28:16,779
going I don't have to do any typing so

00:28:14,379 --> 00:28:20,080
don't worry too much it's a very similar

00:28:16,779 --> 00:28:21,519
repository almost the same the only

00:28:20,080 --> 00:28:25,600
thing you really need to know about it

00:28:21,519 --> 00:28:28,870
is that I've won I've broken it somehow

00:28:25,600 --> 00:28:32,009
I broken hello world and to can you see

00:28:28,870 --> 00:28:34,570
in yellow version 1.0 that is a tack

00:28:32,009 --> 00:28:37,000
okay and what that represents is a

00:28:34,570 --> 00:28:38,830
stable version of my character that's

00:28:37,000 --> 00:28:42,460
the last release and I know it works and

00:28:38,830 --> 00:28:54,610
somewhere between there and the head I

00:28:42,460 --> 00:28:56,049
have broken it ok there it

00:28:54,610 --> 00:28:59,070
is it any I don't actually have F

00:28:56,049 --> 00:29:02,260
buttons of my keyboard so I can't f4

00:28:59,070 --> 00:29:04,330
right so in this case testing it was a

00:29:02,260 --> 00:29:06,520
good idea you can see it doesn't work

00:29:04,330 --> 00:29:09,309
I've managed to break hello world pat on

00:29:06,520 --> 00:29:11,320
the back so in order to find where I

00:29:09,309 --> 00:29:14,530
broke it I need to tell get that I want

00:29:11,320 --> 00:29:16,510
to bisect and I'm going to start so get

00:29:14,530 --> 00:29:19,480
by sex star the next thing I need to

00:29:16,510 --> 00:29:21,280
tell get is that the right so the

00:29:19,480 --> 00:29:22,870
revision that we are where we are

00:29:21,280 --> 00:29:25,150
currently we're all working copy is

00:29:22,870 --> 00:29:28,600
currently is broken so we tell git

00:29:25,150 --> 00:29:31,690
bisect bad where we are now is bad we

00:29:28,600 --> 00:29:35,380
then need to tell get where hopefully

00:29:31,690 --> 00:29:37,870
the most recent good commit is okay you

00:29:35,380 --> 00:29:39,340
can either do that with a tag or to be

00:29:37,870 --> 00:29:40,780
on anything that describes a commit so

00:29:39,340 --> 00:29:42,370
one of those big long hashes you only

00:29:40,780 --> 00:29:44,679
need to use a little bit of it or a tag

00:29:42,370 --> 00:29:48,070
is good so I've used to tag so once I've

00:29:44,679 --> 00:29:50,679
told get this it tells me I'm bisecting

00:29:48,070 --> 00:29:51,940
six revisions and we only need really

00:29:50,679 --> 00:29:55,650
three steps in order to find your

00:29:51,940 --> 00:29:59,110
problem so now it's moved the repository

00:29:55,650 --> 00:30:01,450
way way back to a commit where the

00:29:59,110 --> 00:30:05,950
message was added w and what I need to

00:30:01,450 --> 00:30:08,679
do now is test still broken so my

00:30:05,950 --> 00:30:10,929
response is to tell get that that is

00:30:08,679 --> 00:30:15,340
broken where we are now is broken get by

00:30:10,929 --> 00:30:17,169
set bad and it moves me now so I was bad

00:30:15,340 --> 00:30:18,970
I know when someone's good what it's

00:30:17,169 --> 00:30:22,000
done is it's gone halfway that was bad

00:30:18,970 --> 00:30:24,040
so now it goes halfway back towards the

00:30:22,000 --> 00:30:28,690
good and that's how binary search works

00:30:24,040 --> 00:30:31,809
so at this point I test again bizarre

00:30:28,690 --> 00:30:36,250
not complete but working so I now tell

00:30:31,809 --> 00:30:38,429
get good okay and I carry on carry on

00:30:36,250 --> 00:30:41,140
okay it's moving me again a test again

00:30:38,429 --> 00:30:44,380
that's bad you can see that one's broken

00:30:41,140 --> 00:30:46,900
this one is good that's good and

00:30:44,380 --> 00:30:49,480
eventually not that eventually with a

00:30:46,900 --> 00:30:51,700
longer string it commits part it would

00:30:49,480 --> 00:30:54,160
be longer but I'm very lucky and I made

00:30:51,700 --> 00:30:57,130
a very small repository so now it's

00:30:54,160 --> 00:30:59,950
telling me we found it we know that

00:30:57,130 --> 00:31:03,610
commits 08 02 I'm not even going to do

00:30:59,950 --> 00:31:05,650
that is the one where the issue is

00:31:03,610 --> 00:31:06,970
introduced and it gives me the commit

00:31:05,650 --> 00:31:07,920
message which isn't really very useful

00:31:06,970 --> 00:31:11,760
so

00:31:07,920 --> 00:31:14,370
really the next thing to do ah that's

00:31:11,760 --> 00:31:16,500
their next thing to do is to reset the

00:31:14,370 --> 00:31:19,260
bisect so at the moment our working copy

00:31:16,500 --> 00:31:22,200
has been moved in order to find this

00:31:19,260 --> 00:31:23,820
commit we're at that commit there so I

00:31:22,200 --> 00:31:26,160
need to reset the bisector put us back

00:31:23,820 --> 00:31:28,650
on the head which is done switch back to

00:31:26,160 --> 00:31:31,410
head and the next thing I need to do is

00:31:28,650 --> 00:31:33,390
find out what the hell I did so get show

00:31:31,410 --> 00:31:35,700
will show you the changes in a commit

00:31:33,390 --> 00:31:37,110
and I'm using the hash wealth you don't

00:31:35,700 --> 00:31:38,570
need to use all of it so I've used just

00:31:37,110 --> 00:31:43,410
the first six which is should be enough

00:31:38,570 --> 00:31:45,960
and there it is so what have I done in

00:31:43,410 --> 00:31:48,180
red you can see echo hello it's all

00:31:45,960 --> 00:31:50,360
nicely encapsulated but in green about

00:31:48,180 --> 00:31:53,220
it space like I said I did but I've also

00:31:50,360 --> 00:31:55,200
removed the end quote and that's how I

00:31:53,220 --> 00:31:58,140
broke it and now I can fix it and get

00:31:55,200 --> 00:32:00,930
helped me thanks brilliant okay back to

00:31:58,140 --> 00:32:06,360
the slides please right that's how you

00:32:00,930 --> 00:32:10,080
do bug so enough about get let's talk

00:32:06,360 --> 00:32:12,410
about github which is also brilliant and

00:32:10,080 --> 00:32:15,420
allows you to do mass collaboration

00:32:12,410 --> 00:32:20,160
another brief history even briefer so

00:32:15,420 --> 00:32:22,590
github was founded by three people tom

00:32:20,160 --> 00:32:25,260
preston werner chris ran strath and pj

00:32:22,590 --> 00:32:27,360
hyatt mostly attributed to the first two

00:32:25,260 --> 00:32:30,480
in probably specifically tom preston

00:32:27,360 --> 00:32:31,980
Werner he's not there anymore but still

00:32:30,480 --> 00:32:34,800
he was one of the founders and the

00:32:31,980 --> 00:32:36,750
reason is just because he made the it's

00:32:34,800 --> 00:32:39,710
a ruby library that uses our line called

00:32:36,750 --> 00:32:43,770
grit and what that is is a ruby wrapper

00:32:39,710 --> 00:32:45,900
for get operation so grit can operate

00:32:43,770 --> 00:32:47,870
directly on get repositories so you

00:32:45,900 --> 00:32:50,220
don't need to go to the command line and

00:32:47,870 --> 00:32:52,680
said tom preston werner came up with the

00:32:50,220 --> 00:32:55,040
idea that it would be great as we're

00:32:52,680 --> 00:32:57,210
early adopters of get that we could

00:32:55,040 --> 00:32:59,310
anyone can host their get repository

00:32:57,210 --> 00:33:01,350
online but what if we could share them

00:32:59,310 --> 00:33:03,270
with people and perform operations and

00:33:01,350 --> 00:33:06,300
we could help each other and collaborate

00:33:03,270 --> 00:33:07,890
brilliant fantastic hold on everyone

00:33:06,300 --> 00:33:10,770
should be doing this so that's how get

00:33:07,890 --> 00:33:13,440
what hub was born it was launched in

00:33:10,770 --> 00:33:15,780
2008 and has grown immensely the number

00:33:13,440 --> 00:33:18,250
of repositories is just skyrocketed god

00:33:15,780 --> 00:33:22,460
knows how many they've got now

00:33:18,250 --> 00:33:24,530
next one so in back one there we go so

00:33:22,460 --> 00:33:26,300
github as we hopefully all know it

00:33:24,530 --> 00:33:29,210
provides a web interfacing to get for

00:33:26,300 --> 00:33:33,040
easy collaboration and that is provided

00:33:29,210 --> 00:33:37,940
by HTTP but grit is what is the crux ie

00:33:33,040 --> 00:33:41,240
you can actually do diffs directly and

00:33:37,940 --> 00:33:43,130
verges and etc it's very clever it also

00:33:41,240 --> 00:33:49,940
has integrated issue management and a

00:33:43,130 --> 00:33:52,760
wiki for a documentation okay public

00:33:49,940 --> 00:33:55,160
repositories are free this is good this

00:33:52,760 --> 00:33:57,380
encourages open-source private

00:33:55,160 --> 00:33:58,760
repositories are not free that's how

00:33:57,380 --> 00:34:01,670
they make money and how they keep the

00:33:58,760 --> 00:34:04,370
servers running incidentally if you are

00:34:01,670 --> 00:34:07,850
stuck with svn that's fair enough and

00:34:04,370 --> 00:34:09,140
you can use svn against github but the

00:34:07,850 --> 00:34:11,810
repository that you'll be talking to

00:34:09,140 --> 00:34:13,130
will still be a git repository so you

00:34:11,810 --> 00:34:18,440
can still talk to it like a test for you

00:34:13,130 --> 00:34:20,330
okay what's next the workflow so github

00:34:18,440 --> 00:34:22,970
is about massive collaboration so it's

00:34:20,330 --> 00:34:24,380
bound to have the something similar to

00:34:22,970 --> 00:34:26,450
the integration manager workflow of

00:34:24,380 --> 00:34:28,790
course but you're not stuck with it

00:34:26,450 --> 00:34:30,710
github allows you to control the

00:34:28,790 --> 00:34:33,440
permissions of your repositories so

00:34:30,710 --> 00:34:35,150
you're perfectly allowed to make a

00:34:33,440 --> 00:34:38,240
public repository that's completely open

00:34:35,150 --> 00:34:41,150
and they let everyone commit to it if

00:34:38,240 --> 00:34:42,680
you want not sure why but you can you're

00:34:41,150 --> 00:34:45,440
not forced Indian integration manager

00:34:42,680 --> 00:34:47,720
workflow and always gone off the bottom

00:34:45,440 --> 00:34:51,320
a little bit that's not a problem so but

00:34:47,720 --> 00:34:52,160
because of grit get hubs integration

00:34:51,320 --> 00:34:54,680
manager work further is slightly

00:34:52,160 --> 00:34:57,830
different hopefully you can see the blue

00:34:54,680 --> 00:35:00,050
lines they go from the developer public

00:34:57,830 --> 00:35:01,940
github repositories straight into the

00:35:00,050 --> 00:35:06,230
Blessed repository which is also on get

00:35:01,940 --> 00:35:09,890
up so the idea here is that the the

00:35:06,230 --> 00:35:12,200
developers in order to get there pull

00:35:09,890 --> 00:35:14,120
requests in there call pull requests in

00:35:12,200 --> 00:35:15,500
github as well but they don't have to

00:35:14,120 --> 00:35:17,540
email the integration manager anymore

00:35:15,500 --> 00:35:19,040
they just use github they make a pull

00:35:17,540 --> 00:35:20,780
request on there and the integration

00:35:19,040 --> 00:35:23,390
manager comes along and looks at their

00:35:20,780 --> 00:35:24,860
four requests that are waiting and deals

00:35:23,390 --> 00:35:26,750
with them which is brilliantly it cuts

00:35:24,860 --> 00:35:29,320
out the email and the to be honest the

00:35:26,750 --> 00:35:31,550
effort because if it wasn't this easy

00:35:29,320 --> 00:35:34,040
would I have done it

00:35:31,550 --> 00:35:35,240
probably not okay so the general

00:35:34,040 --> 00:35:36,530
procedure which we're going to go

00:35:35,240 --> 00:35:39,260
through in more detail so it's not an

00:35:36,530 --> 00:35:40,880
issue that's cut off is that you fork

00:35:39,260 --> 00:35:42,830
you find it possible you want to

00:35:40,880 --> 00:35:44,720
contribute to you must you for kit that

00:35:42,830 --> 00:35:46,130
creates well when we go too deep we'll

00:35:44,720 --> 00:35:48,650
go through in a minute it's like for

00:35:46,130 --> 00:35:50,540
clown branch code commit test push pull

00:35:48,650 --> 00:35:51,830
request it says at the bottom so let's

00:35:50,540 --> 00:35:55,520
go through that and a little bit more

00:35:51,830 --> 00:35:59,300
detail in a minute first you need to

00:35:55,520 --> 00:36:02,150
know this if you want to make a

00:35:59,300 --> 00:36:03,590
contribution to a big big open source

00:36:02,150 --> 00:36:06,230
project that a lot a lot of people are

00:36:03,590 --> 00:36:08,230
using it's very very likely that they've

00:36:06,230 --> 00:36:11,180
got guidelines I've got coding standards

00:36:08,230 --> 00:36:13,280
there's requirements for contribution

00:36:11,180 --> 00:36:15,410
and you need to know them because your

00:36:13,280 --> 00:36:17,570
pull request will not get accepted if

00:36:15,410 --> 00:36:20,540
you're failing in Travis or you haven't

00:36:17,570 --> 00:36:23,840
got your and young got your unit tests

00:36:20,540 --> 00:36:26,720
etc okay and if you want to contribute

00:36:23,840 --> 00:36:28,630
the same framework to read that one if

00:36:26,720 --> 00:36:33,190
you want to contribute to symfony2

00:36:28,630 --> 00:36:35,450
that's just an index to the various

00:36:33,190 --> 00:36:40,100
contra quirements files there's a lot of

00:36:35,450 --> 00:36:41,540
them and it's not that bad but you do

00:36:40,100 --> 00:36:43,780
need to jump through a few hoops quite

00:36:41,540 --> 00:36:47,540
rightly in order to contribute to these

00:36:43,780 --> 00:36:49,910
okay for now oh I'm just going to go

00:36:47,540 --> 00:36:51,890
through the workflow and try and point

00:36:49,910 --> 00:36:53,690
out any pitfalls it's not that

00:36:51,890 --> 00:36:55,610
complicated the workflow itself but the

00:36:53,690 --> 00:36:57,830
pitfalls are there and I'm going to try

00:36:55,610 --> 00:37:01,640
and clear them up now so the first stage

00:36:57,830 --> 00:37:02,960
is fork that's my github account so what

00:37:01,640 --> 00:37:06,560
you need to do is go to the repository

00:37:02,960 --> 00:37:08,210
that you want to fork not yours go to it

00:37:06,560 --> 00:37:10,550
and press fork and it will create a

00:37:08,210 --> 00:37:11,540
clone of it that you have full access to

00:37:10,550 --> 00:37:19,250
and you can do whatever you like with

00:37:11,540 --> 00:37:20,600
okay and is also public next is clone so

00:37:19,250 --> 00:37:22,550
you've now got your fork which is on

00:37:20,600 --> 00:37:24,620
github the next thing you need to do is

00:37:22,550 --> 00:37:26,630
change them coat and get hubs clever but

00:37:24,620 --> 00:37:28,430
it doesn't let you do that you need to

00:37:26,630 --> 00:37:30,050
clone your public repository downs

00:37:28,430 --> 00:37:34,130
you're into a working copy on a machine

00:37:30,050 --> 00:37:36,860
where you can change the code and the

00:37:34,130 --> 00:37:38,930
clever thing about this is certainly if

00:37:36,860 --> 00:37:40,100
you're using the window get have a

00:37:38,930 --> 00:37:42,920
written a windows client which is

00:37:40,100 --> 00:37:44,300
actually really really good I believe if

00:37:42,920 --> 00:37:47,900
you use that particular

00:37:44,300 --> 00:37:49,460
command it will automatically create the

00:37:47,900 --> 00:37:51,140
origin remote so that you don't have to

00:37:49,460 --> 00:37:53,300
set up yourself which is quite nice

00:37:51,140 --> 00:37:55,070
because it's not terribly complicated

00:37:53,300 --> 00:37:58,690
but it's just a nice step for them to

00:37:55,070 --> 00:38:04,280
have done for you so the next stage is

00:37:58,690 --> 00:38:05,630
branch so if you were to read symphonies

00:38:04,280 --> 00:38:07,760
and zend framework tubes and probably

00:38:05,630 --> 00:38:09,410
many others requirements for

00:38:07,760 --> 00:38:12,110
contribution you will see that they say

00:38:09,410 --> 00:38:15,260
please please work in a topic branch for

00:38:12,110 --> 00:38:17,570
your own sake a topic branch for those

00:38:15,260 --> 00:38:19,280
who wander where is you know essentially

00:38:17,570 --> 00:38:21,170
you just you've got your own master and

00:38:19,280 --> 00:38:23,480
you're going to do some work you branch

00:38:21,170 --> 00:38:26,660
do that work that's your topic branch

00:38:23,480 --> 00:38:28,880
you imagine back in when you're happy in

00:38:26,660 --> 00:38:30,290
this case part of what the main reason

00:38:28,880 --> 00:38:34,310
you're using a topic branches for good

00:38:30,290 --> 00:38:37,190
practice but also when you submit your

00:38:34,310 --> 00:38:38,720
pull request eventually if you were to

00:38:37,190 --> 00:38:41,180
submit against your master and you've

00:38:38,720 --> 00:38:43,280
done loads of stuff all the changes in

00:38:41,180 --> 00:38:46,210
your master will become part of the pull

00:38:43,280 --> 00:38:48,380
request and you cannot select them as in

00:38:46,210 --> 00:38:49,790
you you won't be able to say I only one

00:38:48,380 --> 00:38:51,290
that one another than that one it will

00:38:49,790 --> 00:38:54,470
be all of the changes it's just a diff

00:38:51,290 --> 00:38:56,690
ok so topic branch and then submit your

00:38:54,470 --> 00:38:58,340
topic branch for the pull request that's

00:38:56,690 --> 00:39:02,840
how you ring-fence just the changes you

00:38:58,340 --> 00:39:04,610
want to send importantly again if you

00:39:02,840 --> 00:39:06,920
read the docs you'll probably see in zen

00:39:04,610 --> 00:39:08,960
framework to particularly there's more

00:39:06,920 --> 00:39:13,010
than one branch that they might want you

00:39:08,960 --> 00:39:16,790
to contribute to Zen has a well it's got

00:39:13,010 --> 00:39:19,550
a master branch which is the current

00:39:16,790 --> 00:39:22,280
branch where fixes will go it's also got

00:39:19,550 --> 00:39:24,260
a branch called develop which is further

00:39:22,280 --> 00:39:26,150
in the works further in the future but

00:39:24,260 --> 00:39:28,640
it's it's a longer looking branch so the

00:39:26,150 --> 00:39:31,670
new features are going in there so that

00:39:28,640 --> 00:39:32,900
they can be more unstable and that's if

00:39:31,670 --> 00:39:34,430
you're writing a new feature you pull

00:39:32,900 --> 00:39:36,350
you on a target develop but if you're

00:39:34,430 --> 00:39:38,500
fixing something existing or just adding

00:39:36,350 --> 00:39:41,750
something small perhaps master okay

00:39:38,500 --> 00:39:43,420
that's how you check out with a

00:39:41,750 --> 00:39:45,890
particular branch if you need to know

00:39:43,420 --> 00:39:48,930
next

00:39:45,890 --> 00:39:52,110
thank you and code so once you've got

00:39:48,930 --> 00:39:56,520
your topic branch change the code fix

00:39:52,110 --> 00:39:59,040
things brilliant so as you're coding

00:39:56,520 --> 00:40:01,310
take note of the things that are in the

00:39:59,040 --> 00:40:03,780
documentation like your coding standards

00:40:01,310 --> 00:40:06,390
perhaps take note of the unit test if

00:40:03,780 --> 00:40:08,220
you if you do something that means that

00:40:06,390 --> 00:40:09,630
they need a new unit test or you do

00:40:08,220 --> 00:40:11,550
something that breaks the unit tests

00:40:09,630 --> 00:40:14,310
obviously you're responsible for making

00:40:11,550 --> 00:40:18,840
sure that the unit tests are enhanced or

00:40:14,310 --> 00:40:20,820
fixed also for documentation if you do

00:40:18,840 --> 00:40:23,100
something that changes the documentation

00:40:20,820 --> 00:40:25,410
or adds to the documentation they might

00:40:23,100 --> 00:40:28,050
not ask you to sort it out you should

00:40:25,410 --> 00:40:29,670
really you should really if Gary ugh

00:40:28,050 --> 00:40:34,710
were here you probably tell you that you

00:40:29,670 --> 00:40:38,160
must okay that's it so next probably

00:40:34,710 --> 00:40:40,560
commit that's not true commit should

00:40:38,160 --> 00:40:42,500
really be part of code as a good

00:40:40,560 --> 00:40:45,000
practice you should be committing often

00:40:42,500 --> 00:40:47,460
and that's a whole other talk that we've

00:40:45,000 --> 00:40:49,710
had lots of speakers have said the same

00:40:47,460 --> 00:40:53,730
thing and it because it's true but for

00:40:49,710 --> 00:40:58,290
this what I mean is make sure that your

00:40:53,730 --> 00:41:00,390
commits are clean and specifically

00:40:58,290 --> 00:41:03,360
because if your pull request is accepted

00:41:00,390 --> 00:41:06,300
yes anything that you've said in your

00:41:03,360 --> 00:41:08,930
messages is public so be careful and

00:41:06,300 --> 00:41:11,730
don't forget to put them in as well

00:41:08,930 --> 00:41:14,730
that's it for that one and the next

00:41:11,730 --> 00:41:16,980
thing is to test so once you're finished

00:41:14,730 --> 00:41:19,350
coding and committing which is one in

00:41:16,980 --> 00:41:20,700
the same you need to make sure that

00:41:19,350 --> 00:41:23,910
everything works obviously you need to

00:41:20,700 --> 00:41:25,230
run the unit tests that because the same

00:41:23,910 --> 00:41:29,990
framework to makes it very easy for you

00:41:25,230 --> 00:41:34,610
to just check them out run them but

00:41:29,990 --> 00:41:39,270
what's important here is that you test

00:41:34,610 --> 00:41:40,680
what is going to be pulled so let's say

00:41:39,270 --> 00:41:43,110
you were as we said earlier you're on

00:41:40,680 --> 00:41:44,010
holiday you did some changes and you

00:41:43,110 --> 00:41:46,140
went on holiday for a couple of weeks

00:41:44,010 --> 00:41:47,550
you then come back anything oh yeah I

00:41:46,140 --> 00:41:51,560
finished I'm going to make my pull

00:41:47,550 --> 00:41:54,840
request before you do that you must do a

00:41:51,560 --> 00:41:57,660
if I put it up there no git fetch minus

00:41:54,840 --> 00:41:58,920
minus rebase origin master probably just

00:41:57,660 --> 00:41:59,970
to rebase all the

00:41:58,920 --> 00:42:04,859
changes that have happened on your

00:41:59,970 --> 00:42:06,420
target branch to your working copy and

00:42:04,859 --> 00:42:11,430
then run the test there so that you're

00:42:06,420 --> 00:42:12,720
testing the current code oh yeah you

00:42:11,430 --> 00:42:14,010
also might want to make sure that no

00:42:12,720 --> 00:42:17,059
one's fixed the problem that you were

00:42:14,010 --> 00:42:19,530
fixing for you in the meantime okay and

00:42:17,059 --> 00:42:21,450
again check the coding standard so there

00:42:19,530 --> 00:42:27,059
you might want to run your code through

00:42:21,450 --> 00:42:30,420
lint or code sniffer because so Travis

00:42:27,059 --> 00:42:33,030
is a Travis yes Travis runs on github

00:42:30,420 --> 00:42:34,650
and if it fails you for trout sniffer or

00:42:33,030 --> 00:42:37,049
something your pull request is just

00:42:34,650 --> 00:42:38,760
going to get left alone until it's green

00:42:37,049 --> 00:42:40,109
okay and just for a small thing like

00:42:38,760 --> 00:42:42,030
that you don't really want to maintain

00:42:40,109 --> 00:42:44,450
it to have to prompt you just check the

00:42:42,030 --> 00:42:48,359
status yourself and make sure it's green

00:42:44,450 --> 00:42:52,980
check the documentation so after you've

00:42:48,359 --> 00:42:55,319
tested you can push so obviously the

00:42:52,980 --> 00:42:57,900
process of pushes you push to your fork

00:42:55,319 --> 00:43:00,210
which is available to you that is what

00:42:57,900 --> 00:43:03,089
it is that's all it is so push to your

00:43:00,210 --> 00:43:07,170
local changes to your remote repo on

00:43:03,089 --> 00:43:09,589
github and thats all is and then the

00:43:07,170 --> 00:43:14,369
next stage is hopefully the final stage

00:43:09,589 --> 00:43:17,339
well you might be asked to write a unit

00:43:14,369 --> 00:43:19,260
test that's fine so make sure again that

00:43:17,339 --> 00:43:21,030
you're submitting your unit there pull

00:43:19,260 --> 00:43:24,720
request against the correct branch so

00:43:21,030 --> 00:43:27,500
when you're ready you go to the

00:43:24,720 --> 00:43:29,790
repository that you're contributing to

00:43:27,500 --> 00:43:31,079
know you don't it's yours that's my

00:43:29,790 --> 00:43:32,520
fault so that's my fork of same

00:43:31,079 --> 00:43:34,049
framework to and I'm going to make a

00:43:32,520 --> 00:43:36,780
pull request so what I did do is press

00:43:34,049 --> 00:43:38,760
the green button to generate a diff okay

00:43:36,780 --> 00:43:42,960
the next screen will be choose a branch

00:43:38,760 --> 00:43:44,549
on the target repository and choose a

00:43:42,960 --> 00:43:46,170
branch on your repository and we will

00:43:44,549 --> 00:43:47,280
compare them and once they've been

00:43:46,170 --> 00:43:49,589
compared it will say would you like to

00:43:47,280 --> 00:43:51,420
make this into a pull request and you

00:43:49,589 --> 00:43:53,460
have to type shape well you have to

00:43:51,420 --> 00:43:54,900
press yes but you need a title you want

00:43:53,460 --> 00:43:57,030
a description you need to be descriptive

00:43:54,900 --> 00:43:58,619
what are you trying to achieve why have

00:43:57,030 --> 00:44:00,119
you tried to fit what if it's broken

00:43:58,619 --> 00:44:01,440
it's pretty easy but if you're trying to

00:44:00,119 --> 00:44:04,650
change something you will have to

00:44:01,440 --> 00:44:07,319
justify yourself and then you can submit

00:44:04,650 --> 00:44:10,049
your pull request but same things again

00:44:07,319 --> 00:44:11,220
check that CI passes because if it

00:44:10,049 --> 00:44:12,750
doesn't your pull request will sit there

00:44:11,220 --> 00:44:15,170
forever probably with no one

00:44:12,750 --> 00:44:17,610
making any comments except we doing and

00:44:15,170 --> 00:44:19,410
discuss with moderators once it's green

00:44:17,610 --> 00:44:21,150
and they'll maybe say what trying to do

00:44:19,410 --> 00:44:23,130
and maybe you can do a bit better maybe

00:44:21,150 --> 00:44:25,650
we could do this or maybe we should move

00:44:23,130 --> 00:44:29,010
it into this module instead and you

00:44:25,650 --> 00:44:30,750
might be asked to squash so this is one

00:44:29,010 --> 00:44:34,140
of the reasons why interactive rebates

00:44:30,750 --> 00:44:37,290
is useful I think it's symphony in their

00:44:34,140 --> 00:44:38,400
docs if you read them it says when you

00:44:37,290 --> 00:44:40,650
do your pull request we're probably

00:44:38,400 --> 00:44:42,000
going to ask you to squash so do it

00:44:40,650 --> 00:44:44,970
before you make your pull request and

00:44:42,000 --> 00:44:47,670
save yourself some time so what squash

00:44:44,970 --> 00:44:48,900
means is all the changes maybe you know

00:44:47,670 --> 00:44:50,190
you've been working well you've been

00:44:48,900 --> 00:44:53,160
doing a good commit strategy so you've

00:44:50,190 --> 00:44:56,310
got your topic branch 1020 commits what

00:44:53,160 --> 00:44:57,930
they want is one and all you met all

00:44:56,310 --> 00:44:59,940
your commit messages being the same I

00:44:57,930 --> 00:45:01,860
don't know why but that's what they want

00:44:59,940 --> 00:45:05,220
and it's their repository so no reason

00:45:01,860 --> 00:45:07,290
not to squash and you might be asked to

00:45:05,220 --> 00:45:10,410
write in your unit test by this guy I

00:45:07,290 --> 00:45:11,730
had to do that or at least make sure

00:45:10,410 --> 00:45:18,180
that the test coverage doesn't reduce

00:45:11,730 --> 00:45:19,440
which is possible okay so and what were

00:45:18,180 --> 00:45:21,870
you doing next we're going for you going

00:45:19,440 --> 00:45:24,300
to talk about the power the power so

00:45:21,870 --> 00:45:26,960
we've talked about get and we talked

00:45:24,300 --> 00:45:31,590
about github and why why why because

00:45:26,960 --> 00:45:36,210
they give us power and before we talk

00:45:31,590 --> 00:45:41,460
about that there's a quote given enough

00:45:36,210 --> 00:45:43,800
eyeballs all bugs are shallow said by

00:45:41,460 --> 00:45:46,170
eric raymond but it's actually called

00:45:43,800 --> 00:45:48,480
Linus's law I think Everett Raymond call

00:45:46,170 --> 00:45:52,050
it that in tribute to Linus Torvalds

00:45:48,480 --> 00:45:55,680
okay now it kind of makes sense but what

00:45:52,050 --> 00:45:57,720
it what it means is you've got some code

00:45:55,680 --> 00:45:59,250
because it you're using are necessarily

00:45:57,720 --> 00:46:01,260
code that you are not necessarily code

00:45:59,250 --> 00:46:03,480
that you maintain but any code that

00:46:01,260 --> 00:46:05,310
you're using the more people that are

00:46:03,480 --> 00:46:08,820
maintaining that code the more people

00:46:05,310 --> 00:46:11,970
that are using that code it will the

00:46:08,820 --> 00:46:14,820
more mature mature as in stable it will

00:46:11,970 --> 00:46:16,680
get quicker because anyone who finds a

00:46:14,820 --> 00:46:17,970
little problem hopefully we'll just fix

00:46:16,680 --> 00:46:19,950
it and then everyone's got the fix

00:46:17,970 --> 00:46:22,520
that's the beauty of open source yes

00:46:19,950 --> 00:46:22,520
thank you

00:46:23,310 --> 00:46:33,010
so but one that's it brilliant so so the

00:46:29,650 --> 00:46:34,240
power these days this isn't this isn't

00:46:33,010 --> 00:46:36,610
like something that happened last week

00:46:34,240 --> 00:46:38,170
this has been around for years but given

00:46:36,610 --> 00:46:39,580
that we now have distributed version

00:46:38,170 --> 00:46:42,360
control systems like git and mercurial

00:46:39,580 --> 00:46:45,070
which are both very very good and

00:46:42,360 --> 00:46:47,020
modular frameworks from modular systems

00:46:45,070 --> 00:46:48,940
really anywhere anything that where you

00:46:47,020 --> 00:46:50,560
can just say I've got a new dependency

00:46:48,940 --> 00:46:51,820
and I just want to use someone else's

00:46:50,560 --> 00:46:53,190
and it's brilliant and it works so I

00:46:51,820 --> 00:46:56,140
don't have the right one of my own

00:46:53,190 --> 00:46:58,900
symfony2 Zen framework to laravel i

00:46:56,140 --> 00:47:01,180
believe and bootstrap which is a seattle

00:46:58,900 --> 00:47:03,430
s framework if for the front end matt is

00:47:01,180 --> 00:47:06,070
a brilliant brilliant reusable piece of

00:47:03,430 --> 00:47:07,900
 and for the most part you might

00:47:06,070 --> 00:47:11,380
need a dependency manager like composer

00:47:07,900 --> 00:47:13,360
who's using composer well done lots of

00:47:11,380 --> 00:47:14,860
people Bauer anyone using Bauer that's

00:47:13,360 --> 00:47:18,220
composer for the front end brilliant

00:47:14,860 --> 00:47:20,050
lots you'll also need for these

00:47:18,220 --> 00:47:21,520
dependency managers somewhere for them

00:47:20,050 --> 00:47:24,190
to get the dependencies that's

00:47:21,520 --> 00:47:26,350
dependency repositories so github is a

00:47:24,190 --> 00:47:29,020
valuable one but packages is the default

00:47:26,350 --> 00:47:32,320
for a composer at least okay so we've

00:47:29,020 --> 00:47:40,140
got all these tools and what we can do

00:47:32,320 --> 00:47:44,380
now is click is actually easily reuse

00:47:40,140 --> 00:47:47,040
rather than reinvent so let's say 10 15

00:47:44,380 --> 00:47:51,190
years ago when we only had see VCS and

00:47:47,040 --> 00:47:52,720
we didn't have easy the easy ways to

00:47:51,190 --> 00:47:55,360
just install someone else's code and

00:47:52,720 --> 00:47:57,550
also an easy way to fix it and send it

00:47:55,360 --> 00:48:00,730
back we probably would have just written

00:47:57,550 --> 00:48:02,920
our own probably or even just get

00:48:00,730 --> 00:48:06,430
someone else's and then patch it locally

00:48:02,920 --> 00:48:09,730
and then maybe have a some weird version

00:48:06,430 --> 00:48:12,490
of the library so again because of the

00:48:09,730 --> 00:48:14,680
more people that are using the reuse

00:48:12,490 --> 00:48:15,790
code will be more mature because more

00:48:14,680 --> 00:48:22,530
people are using it more people are

00:48:15,790 --> 00:48:25,380
maintaining it so yeah all I'm saying is

00:48:22,530 --> 00:48:27,990
I'm sure we all do it already if you've

00:48:25,380 --> 00:48:30,150
got a problem you need to solve first

00:48:27,990 --> 00:48:33,440
look to see if it's already been solved

00:48:30,150 --> 00:48:37,200
and if it has fantastic if it hasn't

00:48:33,440 --> 00:48:39,510
maybe it's almost been solved maybe

00:48:37,200 --> 00:48:42,750
you've got a problem with assets and

00:48:39,510 --> 00:48:45,000
ascetic is brilliant so but it doesn't

00:48:42,750 --> 00:48:46,860
quite do what you want you can add your

00:48:45,000 --> 00:48:50,340
use case to it submit it back and

00:48:46,860 --> 00:48:52,260
everyone wins it's brilliant and but if

00:48:50,340 --> 00:48:54,450
it hasn't been solved at all maybe you

00:48:52,260 --> 00:48:56,310
could solve it but put your code out on

00:48:54,450 --> 00:48:58,710
open source and all of a sudden you've

00:48:56,310 --> 00:49:00,900
got what everyone who's committing to

00:48:58,710 --> 00:49:05,580
open source who cares about your module

00:49:00,900 --> 00:49:09,840
helping you to maintain it that is the

00:49:05,580 --> 00:49:14,480
power of modern version control okay so

00:49:09,840 --> 00:49:17,490
if you want to read anything back a bit

00:49:14,480 --> 00:49:20,340
that one thank you if you want to read

00:49:17,490 --> 00:49:22,770
anything more about why shed certainly

00:49:20,340 --> 00:49:24,540
things like commit strategy and so the

00:49:22,770 --> 00:49:26,280
the internals of get as well I talked a

00:49:24,540 --> 00:49:27,720
little bit about that if you want to

00:49:26,280 --> 00:49:29,820
learn about that you should definitely

00:49:27,720 --> 00:49:31,920
read Tong Preston Werner's blog post

00:49:29,820 --> 00:49:34,320
called the get parable brilliant

00:49:31,920 --> 00:49:37,950
brilliant stuff he basically describes

00:49:34,320 --> 00:49:41,370
how it works by telling you a story very

00:49:37,950 --> 00:49:45,480
clever and get am calm has a the main

00:49:41,370 --> 00:49:48,570
get a documentation get best practices

00:49:45,480 --> 00:49:50,700
has good lots of links in it they're

00:49:48,570 --> 00:49:53,100
clean commits is about to commit

00:49:50,700 --> 00:49:56,700
strategy github documentation coding

00:49:53,100 --> 00:49:58,230
standards this is a shame this is what I

00:49:56,700 --> 00:50:00,240
want you to read linus torvalds at the

00:49:58,230 --> 00:50:01,530
bottom the wikipedia link to one at

00:50:00,240 --> 00:50:03,720
linus torvalds my slides are available

00:50:01,530 --> 00:50:07,230
you can get nothing from there learn

00:50:03,720 --> 00:50:09,870
about Linus Torvalds because he is a man

00:50:07,230 --> 00:50:12,420
who doesn't work for a corporation he is

00:50:09,870 --> 00:50:13,830
a man who has no sponsors he's gets his

00:50:12,420 --> 00:50:17,520
money from the Linux corporation

00:50:13,830 --> 00:50:20,400
foundation rather and it means he can

00:50:17,520 --> 00:50:23,930
say what he likes and he really really

00:50:20,400 --> 00:50:27,770
really does so look up what he says Oh

00:50:23,930 --> 00:50:27,770
back one and

00:50:30,480 --> 00:50:35,820
yeah the last slide will go up and we go

00:50:33,900 --> 00:50:38,010
thank you very much so go forth to

00:50:35,820 --> 00:50:40,170
collaborate and please feedback not just

00:50:38,010 --> 00:50:42,030
to me feedback to all the talks that

00:50:40,170 --> 00:50:43,830
you've seen and the event and the

00:50:42,030 --> 00:50:53,940
socials because that's really useful

00:50:43,830 --> 00:50:56,970
feedback thank you very much that's for

00:50:53,940 --> 00:50:59,700
you to questions anyone well you don't

00:50:56,970 --> 00:51:04,880
have to last two each if there's no

00:50:59,700 --> 00:51:04,880
questions that's just fine any in there

00:51:06,710 --> 00:51:22,640
now it was completely covered over now

00:51:17,700 --> 00:51:22,640
we're good thank you very much Oh gone

00:51:23,000 --> 00:51:29,210
so normally when you when you do to get

00:51:26,250 --> 00:51:33,420
keep the pull request right yeah and

00:51:29,210 --> 00:51:37,410
what are these kind of the managers

00:51:33,420 --> 00:51:39,720
doing are they kind of rebasing this

00:51:37,410 --> 00:51:42,420
change to the to the third master or the

00:51:39,720 --> 00:51:45,359
normally so the question is what is the

00:51:42,420 --> 00:51:46,470
process of the pull request so the so

00:51:45,359 --> 00:51:49,950
you make your pull request is

00:51:46,470 --> 00:51:52,650
essentially and you're asking them to

00:51:49,950 --> 00:51:54,480
pull your changes so it's a diff that

00:51:52,650 --> 00:51:56,340
you want them to pull it's a patch okay

00:51:54,480 --> 00:51:58,020
if they accept it it's simply that it

00:51:56,340 --> 00:52:00,300
will just merge the changes into their

00:51:58,020 --> 00:52:03,000
posit ori and then they can make them

00:52:00,300 --> 00:52:05,810
life that's it and they'll code review

00:52:03,000 --> 00:52:10,220
it and discuss it with you good great

00:52:05,810 --> 00:52:10,220
thanks we got one more query quick

00:52:11,060 --> 00:52:16,140
thanks there's a PHP project called

00:52:13,890 --> 00:52:20,369
fabricator out in a few aware of that

00:52:16,140 --> 00:52:22,440
one I am NOT self hosts your your git

00:52:20,369 --> 00:52:23,790
repository I have my actually I was

00:52:22,440 --> 00:52:27,090
taught about that not two days ago guys

00:52:23,790 --> 00:52:29,040
used by a blended org mm-hmm that's the

00:52:27,090 --> 00:52:31,109
useful one to have a look at so yeah so

00:52:29,040 --> 00:52:34,859
what he said is that as an alternative

00:52:31,109 --> 00:52:37,290
to github private you can get this a PHP

00:52:34,859 --> 00:52:39,359
project called fabricator where you can

00:52:37,290 --> 00:52:41,369
basically host your own github is that

00:52:39,359 --> 00:52:43,050
correct yeah you can basically host your

00:52:41,369 --> 00:52:44,280
own github internally and it means your

00:52:43,050 --> 00:52:45,480
teams can collaborate over that

00:52:44,280 --> 00:52:49,430
which is a great idea thank you very

00:52:45,480 --> 00:52:49,430

YouTube URL: https://www.youtube.com/watch?v=EBxfXgUHVRI


