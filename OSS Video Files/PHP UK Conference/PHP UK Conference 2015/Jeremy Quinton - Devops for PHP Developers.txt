Title: Jeremy Quinton - Devops for PHP Developers
Publication date: 2015-04-02
Playlist: PHP UK Conference 2015
Description: 
	2014 is the 5 year anniversary after the idea of Devops was born. To paraphrase a quote from http://devopsdays.org/ "Back then we didn't know we were going to change the IT industry. Devops has gone from an underground, to a wide mainstream industry adopted idea." Incredibly even after 5 years we still donâ€™t have all the answers and in an industry that changes so rapidly it's important to grasp and understand the core concepts of what devops is about so that you can take your organisation or development team forward. My talk will dispel some myths, cover fundamental ideas and tools you can embrace, mainly from a developers perspective. Ideally I hope to inspire developers to implement devops practices correctly within their teams. Whether you are seasoned professional, or amateur, my talk should have something for everyone.

https://speakerdeck.com/jeremyquinton/devops-for-php-developers
Captions: 
	00:00:05,490 --> 00:00:11,289
just a quick bit about me I've been

00:00:08,049 --> 00:00:14,429
working with PHP since about 2003 but a

00:00:11,289 --> 00:00:16,720
lot of PHP web applications and websites

00:00:14,429 --> 00:00:19,599
websites that I've had to scale which

00:00:16,720 --> 00:00:21,610
has been fun I've done some operations

00:00:19,599 --> 00:00:23,290
work I've crossed over to the other side

00:00:21,610 --> 00:00:25,779
and built application infrastructures

00:00:23,290 --> 00:00:28,480
where is kind of where I learned a lot

00:00:25,779 --> 00:00:30,460
about DevOps I'm an open source

00:00:28,480 --> 00:00:32,290
enthusiast what does that mean I enjoy

00:00:30,460 --> 00:00:34,030
working with open source software and

00:00:32,290 --> 00:00:36,700
trying to contribute when I have the

00:00:34,030 --> 00:00:38,740
time and I'm a big fan of the DevOps

00:00:36,700 --> 00:00:42,040
cultural and professional movement which

00:00:38,740 --> 00:00:46,030
is what brings me out today so DevOps so

00:00:42,040 --> 00:00:49,690
2014 was the 5th 5th year anniversary of

00:00:46,030 --> 00:00:51,489
the idea that DevOps was born the idea

00:00:49,690 --> 00:00:53,410
was born because a couple of system

00:00:51,489 --> 00:00:55,480
administrators came together and they

00:00:53,410 --> 00:00:58,270
were facing some common challenges and

00:00:55,480 --> 00:01:00,700
problems at the time so they decided to

00:00:58,270 --> 00:01:04,509
organize a conference called DevOps days

00:01:00,700 --> 00:01:06,820
and that was in unfair in 2009 and in a

00:01:04,509 --> 00:01:10,240
lot of ways DevOps started out as an

00:01:06,820 --> 00:01:15,219
ideology it's the set of ideas and

00:01:10,240 --> 00:01:17,109
beliefs of a group and these set of

00:01:15,219 --> 00:01:18,759
ideas have sort of gained a lot of

00:01:17,109 --> 00:01:21,450
traction because a lot of people have

00:01:18,759 --> 00:01:23,799
heard of this term DevOps

00:01:21,450 --> 00:01:25,929
but in a lot of ways it's caused a lot

00:01:23,799 --> 00:01:29,439
of complaints and confusion about what

00:01:25,929 --> 00:01:30,969
DevOps actually is it's not like agile

00:01:29,439 --> 00:01:33,429
where we have a manifesto where it's

00:01:30,969 --> 00:01:34,869
clearly defined what DevOps is it means

00:01:33,429 --> 00:01:37,600
different things to different people

00:01:34,869 --> 00:01:39,759
so you know these things like DevOps

00:01:37,600 --> 00:01:45,549
tools these job titles like DevOps

00:01:39,759 --> 00:01:47,560
engineers so I did a predictive search

00:01:45,549 --> 00:01:49,889
on Google and I got some interesting

00:01:47,560 --> 00:01:49,889
results

00:01:52,260 --> 00:01:56,860
right it still DevOps for hipsters

00:01:54,790 --> 00:02:00,010
that's quite interesting probably should

00:01:56,860 --> 00:02:02,080
have grabbed my beard but quite

00:02:00,010 --> 00:02:04,900
intensely interesting ye the answer to

00:02:02,080 --> 00:02:07,479
all those questions is no all right so

00:02:04,900 --> 00:02:10,030
to try and explain DevOps in one side at

00:02:07,479 --> 00:02:13,480
a high level it's a night ideas of set

00:02:10,030 --> 00:02:16,360
of ideals new and old which is led to a

00:02:13,480 --> 00:02:18,400
common set of practices and patterns on

00:02:16,360 --> 00:02:20,500
the goal of my talk today is to share

00:02:18,400 --> 00:02:22,630
some of these ideas practices and

00:02:20,500 --> 00:02:24,670
patterns and a disclaimer for myself is

00:02:22,630 --> 00:02:26,410
that I'm looking at DevOps from a

00:02:24,670 --> 00:02:27,610
developer perspective if I was sitting

00:02:26,410 --> 00:02:28,840
in the audience what kind of things

00:02:27,610 --> 00:02:30,880
would I want to be hearing about

00:02:28,840 --> 00:02:32,140
I'm also keen to have discussion around

00:02:30,880 --> 00:02:33,970
these ideas and I'm yeah the whole

00:02:32,140 --> 00:02:35,530
weekend so if you want to come chat a

00:02:33,970 --> 00:02:39,010
bit more about DevOps for me and we can

00:02:35,530 --> 00:02:41,590
grab a beer and discuss these things for

00:02:39,010 --> 00:02:43,420
those that do you want a a definition

00:02:41,590 --> 00:02:46,060
there's a definition that was coined by

00:02:43,420 --> 00:02:47,980
Damien Edwards and John Willis which is

00:02:46,060 --> 00:02:50,830
the Kam's definition and the first buddy

00:02:47,980 --> 00:02:52,989
see which stands for culture people

00:02:50,830 --> 00:02:54,160
people are the essence of what DevOps is

00:02:52,989 --> 00:02:56,230
about it's the understanding that

00:02:54,160 --> 00:02:59,350
software is built by people for people

00:02:56,230 --> 00:03:01,510
and it steals a bit from agile where

00:02:59,350 --> 00:03:04,150
it's interactions and individuals over

00:03:01,510 --> 00:03:04,810
tools and process the second bit is

00:03:04,150 --> 00:03:07,930
automation

00:03:04,810 --> 00:03:10,060
DevOps a DevOps implementation relies

00:03:07,930 --> 00:03:11,049
heavily on automation and it's about

00:03:10,060 --> 00:03:13,540
automating everything

00:03:11,049 --> 00:03:14,920
it's about automating your builds

00:03:13,540 --> 00:03:17,410
automating your infrastructure

00:03:14,920 --> 00:03:18,790
automating your testing automating your

00:03:17,410 --> 00:03:22,360
deployment and I talked quite a bit

00:03:18,790 --> 00:03:24,250
about this day in its measurement the

00:03:22,360 --> 00:03:25,989
idea that around measurement is that we

00:03:24,250 --> 00:03:28,120
measure everything that's important to

00:03:25,989 --> 00:03:29,049
the business and those metrics and

00:03:28,120 --> 00:03:31,390
measurements are prominently displayed

00:03:29,049 --> 00:03:32,920
within the organization if you've ever

00:03:31,390 --> 00:03:35,350
been in a DevOps culture you'll see big

00:03:32,920 --> 00:03:36,970
dashboards up where is monitoring a

00:03:35,350 --> 00:03:38,920
matrix where people can you know have

00:03:36,970 --> 00:03:40,959
open communication about you know a lot

00:03:38,920 --> 00:03:43,060
of different things and then the last

00:03:40,959 --> 00:03:45,640
bit is sharing kind of like I'm sharing

00:03:43,060 --> 00:03:47,650
these ideas today but it's about sharing

00:03:45,640 --> 00:03:51,820
ideas sharing tools and sharing

00:03:47,650 --> 00:03:55,510
processes so why do we need EV ops

00:03:51,820 --> 00:03:57,100
anyway well the 2014 state of DevOps

00:03:55,510 --> 00:03:59,019
report was a report that was

00:03:57,100 --> 00:04:02,139
commissioned by thought works puppet

00:03:59,019 --> 00:04:03,519
labs and IT revolution press it was

00:04:02,139 --> 00:04:04,240
really interesting they surveyed

00:04:03,519 --> 00:04:06,340
something like nine

00:04:04,240 --> 00:04:07,510
thousand two hundred organizations it's

00:04:06,340 --> 00:04:09,990
the largest and most comprehensive

00:04:07,510 --> 00:04:12,610
DevOps study tonight

00:04:09,990 --> 00:04:15,010
so the first scientific study of the

00:04:12,610 --> 00:04:16,750
relationship between organizational

00:04:15,010 --> 00:04:19,270
performance IT performance and DevOps

00:04:16,750 --> 00:04:22,560
practices but the executive summary of

00:04:19,270 --> 00:04:24,910
the report had some interesting facts so

00:04:22,560 --> 00:04:26,920
strong IT performance is a competitive

00:04:24,910 --> 00:04:28,780
advantage although this is more that the

00:04:26,920 --> 00:04:30,640
business side of things but they found

00:04:28,780 --> 00:04:32,440
that people that were implementing their

00:04:30,640 --> 00:04:34,210
boss or twice as likely to you know

00:04:32,440 --> 00:04:38,020
increase the market share their

00:04:34,210 --> 00:04:39,760
profitability and productivity but the

00:04:38,020 --> 00:04:41,350
second point really caught my eye and

00:04:39,760 --> 00:04:43,300
that is there's a strong correlation

00:04:41,350 --> 00:04:45,070
between DevOps practices and IT

00:04:43,300 --> 00:04:46,420
performance and this is kind of key

00:04:45,070 --> 00:04:48,970
because people have been bashing on

00:04:46,420 --> 00:04:50,560
about what DevOps is about these DevOps

00:04:48,970 --> 00:04:52,420
ideas but now we actually have some

00:04:50,560 --> 00:04:55,810
proof that these practices and stuff

00:04:52,420 --> 00:04:57,400
actually have a direct correlation to

00:04:55,810 --> 00:04:59,740
your IT performance I've put the link up

00:04:57,400 --> 00:05:02,770
to the report it's definitely worth

00:04:59,740 --> 00:05:05,920
having a read and report also said that

00:05:02,770 --> 00:05:07,690
people that implement organizations that

00:05:05,920 --> 00:05:10,150
implement DevOps just keep on getting

00:05:07,690 --> 00:05:12,730
better and better and I saw a talk

00:05:10,150 --> 00:05:14,740
recently by Jane Kim for those of you

00:05:12,730 --> 00:05:16,960
that don't know anything he's the author

00:05:14,740 --> 00:05:19,690
of The Venus Project he's been studying

00:05:16,960 --> 00:05:21,340
high performance IT organizations for

00:05:19,690 --> 00:05:22,750
close on about 13 years but he said

00:05:21,340 --> 00:05:24,520
something in one of his talks that's

00:05:22,750 --> 00:05:25,750
really stuck with me and that's that the

00:05:24,520 --> 00:05:30,340
base just keep getting better and

00:05:25,750 --> 00:05:31,660
accelerating away from the herd so what

00:05:30,340 --> 00:05:33,520
this means is is that people that are

00:05:31,660 --> 00:05:35,110
doing DevOps practices those IT

00:05:33,520 --> 00:05:36,580
organizations are really able to move

00:05:35,110 --> 00:05:38,850
forward and pull away from the

00:05:36,580 --> 00:05:43,930
competition

00:05:38,850 --> 00:05:46,080
okay so I'll let you read that quite

00:05:43,930 --> 00:05:46,080
quickly

00:06:00,699 --> 00:06:05,090
so when I put this talk together I

00:06:03,050 --> 00:06:07,280
really struggled to put into my own

00:06:05,090 --> 00:06:10,189
words why DevOps is important and I

00:06:07,280 --> 00:06:12,919
stumbled along upon this quote and it

00:06:10,189 --> 00:06:14,900
really sums up things quite well because

00:06:12,919 --> 00:06:16,879
in a DevOps environment the developer

00:06:14,900 --> 00:06:18,800
mindset has to change there has to be an

00:06:16,879 --> 00:06:21,080
understanding from developers that

00:06:18,800 --> 00:06:23,659
software's the thing that exists after

00:06:21,080 --> 00:06:25,430
it has been written so your software

00:06:23,659 --> 00:06:28,340
needs to love some way on service

00:06:25,430 --> 00:06:30,189
somewhere once it's it's finished on

00:06:28,340 --> 00:06:32,210
your desktop is it actually finished

00:06:30,189 --> 00:06:33,800
developers need to change their mindset

00:06:32,210 --> 00:06:36,620
and start thinking about how are we

00:06:33,800 --> 00:06:38,090
going to deploy our code right how are

00:06:36,620 --> 00:06:41,060
we going to monitor the application in a

00:06:38,090 --> 00:06:42,229
production environment is this code

00:06:41,060 --> 00:06:44,120
going to work in a multi node

00:06:42,229 --> 00:06:45,560
environment the developer - it really

00:06:44,120 --> 00:06:48,169
has to change we have to start thinking

00:06:45,560 --> 00:06:51,650
about these operational things these

00:06:48,169 --> 00:06:53,449
infrastructure things okay so if you

00:06:51,650 --> 00:06:55,789
ever seen any talks on DevOps you're

00:06:53,449 --> 00:06:57,650
commonly hear about the silos within

00:06:55,789 --> 00:07:00,529
organization and the idea that we need

00:06:57,650 --> 00:07:03,139
to break these silos down but why okay

00:07:00,529 --> 00:07:06,409
because in a lot of organizations a

00:07:03,139 --> 00:07:08,750
company's separated by division of labor

00:07:06,409 --> 00:07:11,000
so what you have is a development team

00:07:08,750 --> 00:07:13,159
where I've made it a pair of developers

00:07:11,000 --> 00:07:14,719
QA s and testers and then you have

00:07:13,159 --> 00:07:17,180
another team which is an Operations team

00:07:14,719 --> 00:07:20,719
right and generally the development team

00:07:17,180 --> 00:07:23,270
strive for change right an Operations

00:07:20,719 --> 00:07:24,919
strive for ability so what you have is

00:07:23,270 --> 00:07:27,319
you have this misalignment which leads

00:07:24,919 --> 00:07:28,639
to conflict within organizations because

00:07:27,319 --> 00:07:30,529
developers want to get their changes

00:07:28,639 --> 00:07:33,680
live but operations are pushing back and

00:07:30,529 --> 00:07:35,900
saying no also development is measured

00:07:33,680 --> 00:07:42,289
on things like features where operations

00:07:35,900 --> 00:07:44,089
is measured on things like uptime so

00:07:42,289 --> 00:07:46,339
breaking down the silos so something

00:07:44,089 --> 00:07:48,889
that's key to the DevOps movement is

00:07:46,339 --> 00:07:51,589
that ideally no isolated silos exists in

00:07:48,889 --> 00:07:53,960
the software delivery delivery process

00:07:51,589 --> 00:07:56,449
right and a lot of people to try and

00:07:53,960 --> 00:07:59,240
solve this problem they form a DevOps

00:07:56,449 --> 00:08:01,310
team right which is quite an ironic way

00:07:59,240 --> 00:08:03,460
to solve the problem because essentially

00:08:01,310 --> 00:08:08,780
you end up creating a third

00:08:03,460 --> 00:08:11,270
right that yeah you end up creating the

00:08:08,780 --> 00:08:12,770
third silo you know so if we could

00:08:11,270 --> 00:08:15,110
create a DevOps team that would be great

00:08:12,770 --> 00:08:17,210
but that's not what DevOps is about it's

00:08:15,110 --> 00:08:21,379
not about creating a separate team

00:08:17,210 --> 00:08:23,150
between operations and developers the

00:08:21,379 --> 00:08:24,830
office of addresses the dysfunction that

00:08:23,150 --> 00:08:27,590
results from these organizational and

00:08:24,830 --> 00:08:30,080
these organizations composed of

00:08:27,590 --> 00:08:31,990
functional silos right and it proposes

00:08:30,080 --> 00:08:34,010
instead strategies to create better

00:08:31,990 --> 00:08:36,829
collaboration between functional silos

00:08:34,010 --> 00:08:38,719
or doing away with functional silos all

00:08:36,829 --> 00:08:40,940
together and creating cross-functional

00:08:38,719 --> 00:08:42,409
teams so what that means is developers

00:08:40,940 --> 00:08:44,000
and operations on two separate

00:08:42,409 --> 00:08:48,579
departments they're working closely

00:08:44,000 --> 00:08:51,230
closely together to solve problems also

00:08:48,579 --> 00:08:53,810
DevOps proposes shared responsibilities

00:08:51,230 --> 00:08:56,360
and incentives across teams so instead

00:08:53,810 --> 00:08:58,519
of rewarding developers for features and

00:08:56,360 --> 00:09:00,140
rewarding operations guys for uptime

00:08:58,519 --> 00:09:01,970
there's an understanding that everyone's

00:09:00,140 --> 00:09:03,980
working towards a common goal and that

00:09:01,970 --> 00:09:07,720
common goal is to ship software to our

00:09:03,980 --> 00:09:08,930
customers that has value for customers

00:09:07,720 --> 00:09:11,180
okay

00:09:08,930 --> 00:09:16,339
the other key thing to understand is

00:09:11,180 --> 00:09:20,930
that DevOps is a cultural shift okay so

00:09:16,339 --> 00:09:22,100
to explain culture culture is the

00:09:20,930 --> 00:09:23,959
behavior of humans within an

00:09:22,100 --> 00:09:26,720
organization and the meaning that people

00:09:23,959 --> 00:09:28,790
attach to those behaviors right and in

00:09:26,720 --> 00:09:30,529
the in the DevOps 2014 report they did

00:09:28,790 --> 00:09:33,500
something really interesting that tried

00:09:30,529 --> 00:09:36,140
to measure culture quantitive lee but

00:09:33,500 --> 00:09:38,089
they used topology of organizational

00:09:36,140 --> 00:09:40,010
culture developed by ron westrom who's

00:09:38,089 --> 00:09:42,620
or sociology just from america who

00:09:40,010 --> 00:09:45,410
breaks up behaviors and organizational

00:09:42,620 --> 00:09:47,089
culture into three different areas the

00:09:45,410 --> 00:09:49,430
first is pathological which is power

00:09:47,089 --> 00:09:51,350
orientated the second is bureaucratic

00:09:49,430 --> 00:09:52,940
which is rule orientated and the third

00:09:51,350 --> 00:09:55,430
is generative which is performance

00:09:52,940 --> 00:09:59,470
orientated okay so the first type of

00:09:55,430 --> 00:09:59,470
culture a lot of you might recognize

00:10:03,600 --> 00:10:11,100
so in a pathological culture there's

00:10:08,500 --> 00:10:13,240
very much a denver's us culture right

00:10:11,100 --> 00:10:15,240
developers and operations are at war

00:10:13,240 --> 00:10:17,440
with one another they don't play nicely

00:10:15,240 --> 00:10:18,519
developers are just lobbing untested

00:10:17,440 --> 00:10:20,920
code over the wall

00:10:18,519 --> 00:10:23,250
you know operations can deal with it now

00:10:20,920 --> 00:10:26,410
it's their problem

00:10:23,250 --> 00:10:27,670
you know the operations guy kind of like

00:10:26,410 --> 00:10:29,140
in the picture deploys the code

00:10:27,670 --> 00:10:30,850
production blows up and ends up getting

00:10:29,140 --> 00:10:35,170
five meanwhile it's the developers fault

00:10:30,850 --> 00:10:37,329
and not uncommon and you know in this

00:10:35,170 --> 00:10:40,390
environment there's actually really a

00:10:37,329 --> 00:10:41,829
human cost right people feel a lot of

00:10:40,390 --> 00:10:43,420
the time you feel helpless and trapped

00:10:41,829 --> 00:10:44,920
it's the kind of environment that if

00:10:43,420 --> 00:10:47,110
you've worked in you don't you know you

00:10:44,920 --> 00:10:51,010
don't get up and look forward to going

00:10:47,110 --> 00:10:52,930
to work the second type of environment

00:10:51,010 --> 00:10:56,260
is bureaucratic and rule orientated

00:10:52,930 --> 00:10:58,300
right so in this type of environment you

00:10:56,260 --> 00:11:00,730
can move along at sort of a predictable

00:10:58,300 --> 00:11:03,370
pace but the complexity within your

00:11:00,730 --> 00:11:06,010
environment is managed by process and

00:11:03,370 --> 00:11:07,990
centralized decision-making you know so

00:11:06,010 --> 00:11:09,490
before we do a release of software we

00:11:07,990 --> 00:11:13,410
kind of have to maybe get it signed off

00:11:09,490 --> 00:11:15,670
by someone in this type of environment

00:11:13,410 --> 00:11:16,990
there's sort of a steady throughput but

00:11:15,670 --> 00:11:19,420
like people aren't looking to innovate

00:11:16,990 --> 00:11:22,420
and sort of you know play with new ideas

00:11:19,420 --> 00:11:25,510
and try new things it's very

00:11:22,420 --> 00:11:28,149
bureaucratic essentially and in this

00:11:25,510 --> 00:11:29,860
type of environment people will

00:11:28,149 --> 00:11:31,829
generally feel frustrated and they don't

00:11:29,860 --> 00:11:34,510
feel empowered

00:11:31,829 --> 00:11:37,180
so the third type of culture which is

00:11:34,510 --> 00:11:39,940
generative is quite correlated to how a

00:11:37,180 --> 00:11:41,860
DevOps culture will be within our IT

00:11:39,940 --> 00:11:43,390
business right and the thing is is that

00:11:41,860 --> 00:11:45,940
there's strong collaboration between

00:11:43,390 --> 00:11:47,680
developers and operations to be ruse to

00:11:45,940 --> 00:11:49,779
reduce risk on things like deployment

00:11:47,680 --> 00:11:52,029
and solving the hard problems you know

00:11:49,779 --> 00:11:54,040
people are trying new ideas in it to you

00:11:52,029 --> 00:11:55,740
know innovating trying to you know solve

00:11:54,040 --> 00:11:58,149
the whole problems together

00:11:55,740 --> 00:11:59,949
and in this kind of environment people

00:11:58,149 --> 00:12:02,500
really feel empowered and like they can

00:11:59,949 --> 00:12:03,519
move forward and move a lot quicker but

00:12:02,500 --> 00:12:06,010
the thing I want you to take away from

00:12:03,519 --> 00:12:07,870
today's talk is that DevOps identifies

00:12:06,010 --> 00:12:09,670
that organic organizational culture is

00:12:07,870 --> 00:12:11,230
important and this culture is crucial to

00:12:09,670 --> 00:12:13,360
the to whether or not DevOps will

00:12:11,230 --> 00:12:15,610
succeed within it within any

00:12:13,360 --> 00:12:16,720
organization so the next time you hear

00:12:15,610 --> 00:12:17,740
the word DevOps

00:12:16,720 --> 00:12:19,689
think about the culture where you're

00:12:17,740 --> 00:12:21,339
working how you want to challenge change

00:12:19,689 --> 00:12:25,930
their culture and move your organization

00:12:21,339 --> 00:12:27,310
forward okay so the third thing I want

00:12:25,930 --> 00:12:31,389
to talk about is how do we increase

00:12:27,310 --> 00:12:33,279
collaboration between Devon opps okay

00:12:31,389 --> 00:12:36,160
this is a great quote from Patrick to

00:12:33,279 --> 00:12:39,040
wall who's the sort of the Godfather of

00:12:36,160 --> 00:12:40,449
DevOps who coined the phrase DevOps but

00:12:39,040 --> 00:12:42,250
what is remarkable is that even though

00:12:40,449 --> 00:12:44,620
agile actively seeks collaboration from

00:12:42,250 --> 00:12:46,449
all its stakeholders most agile projects

00:12:44,620 --> 00:12:49,810
have not extend themselves towards the

00:12:46,449 --> 00:12:51,639
operations people so what does this mean

00:12:49,810 --> 00:12:54,069
we end up in an environment which is

00:12:51,639 --> 00:12:56,050
commonly referred to as scrum fall right

00:12:54,069 --> 00:12:58,540
well you have an agile development team

00:12:56,050 --> 00:13:00,370
that have optimized themselves that are

00:12:58,540 --> 00:13:03,639
developing software in an agile way in

00:13:00,370 --> 00:13:05,079
increments but the process ends when

00:13:03,639 --> 00:13:06,939
they release the software to sort of

00:13:05,079 --> 00:13:09,279
test environments well sometimes as far

00:13:06,939 --> 00:13:11,410
as up as production and then what you

00:13:09,279 --> 00:13:12,970
have is a waterfall operations team that

00:13:11,410 --> 00:13:14,860
the first time they interact with the

00:13:12,970 --> 00:13:16,629
release is when that software needs to

00:13:14,860 --> 00:13:19,120
be deployed to production and what

00:13:16,629 --> 00:13:21,959
generally happens is is that you know

00:13:19,120 --> 00:13:24,309
the software can be of good quality but

00:13:21,959 --> 00:13:26,500
the developers have spent all the time

00:13:24,309 --> 00:13:28,209
in the schedule developing features

00:13:26,500 --> 00:13:30,250
because of time pressures now the

00:13:28,209 --> 00:13:31,779
software has to go alive there's quite a

00:13:30,250 --> 00:13:33,220
dependence and operations because

00:13:31,779 --> 00:13:35,230
they've not got to deploy the software

00:13:33,220 --> 00:13:38,740
and it again ends up causing more

00:13:35,230 --> 00:13:40,809
conflict so how do we change those

00:13:38,740 --> 00:13:42,819
changes and how do we solve this problem

00:13:40,809 --> 00:13:46,170
well the key idea within DevOps is to

00:13:42,819 --> 00:13:49,059
change your definition of done okay so

00:13:46,170 --> 00:13:52,019
at the end of each sprint we must have

00:13:49,059 --> 00:13:54,160
working in shippable code ok

00:13:52,019 --> 00:13:57,430
demonstrated in an environment that

00:13:54,160 --> 00:13:58,870
resembles production so the next time

00:13:57,430 --> 00:14:02,610
you start a new project and it's agile

00:13:58,870 --> 00:14:04,899
think about it at the end of sprint one

00:14:02,610 --> 00:14:06,910
you want to be able to deploy that

00:14:04,899 --> 00:14:09,100
software to an environment that

00:14:06,910 --> 00:14:11,439
resembles production because what this

00:14:09,100 --> 00:14:13,480
does is it starts to service your

00:14:11,439 --> 00:14:15,189
non-functional requirements you start to

00:14:13,480 --> 00:14:16,750
think about you know what version of PHP

00:14:15,189 --> 00:14:18,600
are you going to be using where your

00:14:16,750 --> 00:14:21,550
software is actually going to live

00:14:18,600 --> 00:14:23,019
secondly there's another practice which

00:14:21,550 --> 00:14:25,600
is make environments early in the

00:14:23,019 --> 00:14:28,149
development process what's key about

00:14:25,600 --> 00:14:30,760
this is that there's some great tools

00:14:28,149 --> 00:14:34,240
for this a lot of you have probably

00:14:30,760 --> 00:14:35,880
vagrants or things like docker right but

00:14:34,240 --> 00:14:37,660
the idea with making development

00:14:35,880 --> 00:14:39,220
environments early in the development

00:14:37,660 --> 00:14:43,270
process is that developers are

00:14:39,220 --> 00:14:45,160
developing locally on a environment that

00:14:43,270 --> 00:14:46,990
resembles the production environment and

00:14:45,160 --> 00:14:49,630
the reason for this is is that it

00:14:46,990 --> 00:14:53,110
reduces dev property so we're using the

00:14:49,630 --> 00:14:57,100
same version of PHP lately then as

00:14:53,110 --> 00:14:58,600
production but also it it solves that

00:14:57,100 --> 00:15:02,260
problem of oh well it works on my

00:14:58,600 --> 00:15:04,540
machine so the second thing is to make

00:15:02,260 --> 00:15:06,910
sure DevOps build code and environments

00:15:04,540 --> 00:15:09,370
at the same time kind of like our

00:15:06,910 --> 00:15:12,520
software evolves so should the

00:15:09,370 --> 00:15:14,410
environments that our code runs in so

00:15:12,520 --> 00:15:16,810
you know if you add messaging to your

00:15:14,410 --> 00:15:18,580
application you know don't just install

00:15:16,810 --> 00:15:20,290
the messaging queue locally on your your

00:15:18,580 --> 00:15:22,360
laptop also make sure that missing

00:15:20,290 --> 00:15:24,970
majors in queue is available in your

00:15:22,360 --> 00:15:26,890
environments all right and the way we do

00:15:24,970 --> 00:15:28,990
this with is with is with configuration

00:15:26,890 --> 00:15:30,580
management tools infrastructure is code

00:15:28,990 --> 00:15:32,410
otherwise known because a lot of our

00:15:30,580 --> 00:15:34,060
applications are running in virtualized

00:15:32,410 --> 00:15:36,490
environments I've put some cloud

00:15:34,060 --> 00:15:38,470
providers there amazon digitalocean and

00:15:36,490 --> 00:15:39,850
Rackspace but ideally what we were doing

00:15:38,470 --> 00:15:43,710
is we're using tools like chef and

00:15:39,850 --> 00:15:47,290
puppet and angel to manage the servers

00:15:43,710 --> 00:15:49,210
the virtualized infrastructure alright

00:15:47,290 --> 00:15:51,430
and what that allows us to do is it

00:15:49,210 --> 00:15:53,560
allows our environments to involve as

00:15:51,430 --> 00:15:56,020
our software evolves so we've got a

00:15:53,560 --> 00:15:57,670
version of environments and a version of

00:15:56,020 --> 00:16:00,190
software that are aligned with one

00:15:57,670 --> 00:16:02,320
another you know a lot of the time in a

00:16:00,190 --> 00:16:03,730
lot of organizations people aren't using

00:16:02,320 --> 00:16:05,470
these tools and they still have

00:16:03,730 --> 00:16:07,360
snowflake servers and you've got a

00:16:05,470 --> 00:16:08,980
system administrator logging in and

00:16:07,360 --> 00:16:11,650
creating these snowflakes where he's

00:16:08,980 --> 00:16:13,780
making changes and the environment where

00:16:11,650 --> 00:16:15,790
your code is being deployed to is

00:16:13,780 --> 00:16:17,320
continually changing and so you know

00:16:15,790 --> 00:16:19,990
it's trying to marry those two up and

00:16:17,320 --> 00:16:21,820
keep things you know the same so these

00:16:19,990 --> 00:16:23,680
tools enable more transparency at the

00:16:21,820 --> 00:16:25,840
infrastructure level and what this means

00:16:23,680 --> 00:16:27,760
is is this is where developers can come

00:16:25,840 --> 00:16:29,350
in and start to contribute to the

00:16:27,760 --> 00:16:33,880
environments that their code runs in

00:16:29,350 --> 00:16:35,470
because you can contribute to you know

00:16:33,880 --> 00:16:37,240
writing some chef scripts or puppet

00:16:35,470 --> 00:16:38,920
scripts and change your environment so

00:16:37,240 --> 00:16:41,110
if you want to upgrade the the version

00:16:38,920 --> 00:16:43,060
of PHP it doesn't become a tossed

00:16:41,110 --> 00:16:44,200
downstream by someone else you can

00:16:43,060 --> 00:16:46,030
actually make that change

00:16:44,200 --> 00:16:47,620
but the great the great thing about

00:16:46,030 --> 00:16:49,240
these tools that it also gets developers

00:16:47,620 --> 00:16:50,500
and operations people collaborating

00:16:49,240 --> 00:16:54,250
early in the software development

00:16:50,500 --> 00:16:56,680
process and so what's key is that key to

00:16:54,250 --> 00:16:58,420
understand is that you know there's a

00:16:56,680 --> 00:17:00,070
lot of these you know sis admins that

00:16:58,420 --> 00:17:02,110
come from a background with you know

00:17:00,070 --> 00:17:04,150
these tools didn't exist and the key

00:17:02,110 --> 00:17:07,120
here is that developers can help Susa

00:17:04,150 --> 00:17:08,530
admins learn to write code and - you

00:17:07,120 --> 00:17:10,420
know better manage infrastructure so

00:17:08,530 --> 00:17:12,010
that's a key area where developer and

00:17:10,420 --> 00:17:17,020
developers and operations can

00:17:12,010 --> 00:17:20,670
collaborate okay so create a common dev

00:17:17,020 --> 00:17:23,699
QA and production environment process

00:17:20,670 --> 00:17:26,110
there's a really neat tool called Packer

00:17:23,699 --> 00:17:27,880
so package is a tool for creating

00:17:26,110 --> 00:17:28,990
identical machine images for multiple

00:17:27,880 --> 00:17:31,960
platforms from a single source

00:17:28,990 --> 00:17:33,310
configuration so if you are using share

00:17:31,960 --> 00:17:35,740
for puppet or any of those tools in your

00:17:33,310 --> 00:17:37,840
environment you can use Packer to create

00:17:35,740 --> 00:17:40,930
a machine image and that image can be an

00:17:37,840 --> 00:17:43,060
ami that you can deploy in Amazon but

00:17:40,930 --> 00:17:44,460
then you can also generate a box file so

00:17:43,060 --> 00:17:46,810
that developers can use that environment

00:17:44,460 --> 00:17:48,880
for the development environment but they

00:17:46,810 --> 00:17:52,780
should be a common way that dev QA and

00:17:48,880 --> 00:17:54,760
production environments are created some

00:17:52,780 --> 00:17:56,520
other practices all that collaboration

00:17:54,760 --> 00:17:58,960
between development and operations

00:17:56,520 --> 00:18:02,110
starts before the development of

00:17:58,960 --> 00:18:03,940
software and while afterwards so that

00:18:02,110 --> 00:18:05,770
scrum full where I showed you where it

00:18:03,940 --> 00:18:07,900
was developers and then okay now we've

00:18:05,770 --> 00:18:10,210
got to push this live you know ideally

00:18:07,900 --> 00:18:11,770
you start collaborating at Sprint one so

00:18:10,210 --> 00:18:14,200
when you start building your software

00:18:11,770 --> 00:18:15,730
the operations guys are you know

00:18:14,200 --> 00:18:18,430
building the infrastructure and things

00:18:15,730 --> 00:18:19,810
are evolving together and also get

00:18:18,430 --> 00:18:21,760
operations and developers sitting

00:18:19,810 --> 00:18:24,040
together now it sounds really stupid or

00:18:21,760 --> 00:18:25,780
obvious but the idea is you start to

00:18:24,040 --> 00:18:28,390
foster relationships with your

00:18:25,780 --> 00:18:30,430
operations people and you can sit

00:18:28,390 --> 00:18:32,140
together and collaborate on different

00:18:30,430 --> 00:18:33,790
problems but also just some of the

00:18:32,140 --> 00:18:35,890
conversations that developers have at

00:18:33,790 --> 00:18:37,720
their days you know a lot of the time an

00:18:35,890 --> 00:18:39,370
Operations person will overhear that and

00:18:37,720 --> 00:18:41,050
come and ask and try and contribute to

00:18:39,370 --> 00:18:42,820
solving that problem and it gets the

00:18:41,050 --> 00:18:45,930
discussion and it starts this idea of

00:18:42,820 --> 00:18:48,430
open communication okay

00:18:45,930 --> 00:18:50,020
so I've talked about a couple of things

00:18:48,430 --> 00:18:51,790
I've talking about breaking down the

00:18:50,020 --> 00:18:54,010
silos I'm talking about understanding

00:18:51,790 --> 00:18:57,550
your culture I've spoken about how to

00:18:54,010 --> 00:18:58,060
get developers and operations working

00:18:57,550 --> 00:19:01,600
better

00:18:58,060 --> 00:19:04,360
you know what's the next key idea it's

00:19:01,600 --> 00:19:06,970
the idea of cycle time right and to

00:19:04,360 --> 00:19:08,260
easily explain cycle time it is how long

00:19:06,970 --> 00:19:10,390
does it take you to go from code

00:19:08,260 --> 00:19:12,520
committed to getting that code running

00:19:10,390 --> 00:19:13,470
in production and if I said that in

00:19:12,520 --> 00:19:16,630
another way

00:19:13,470 --> 00:19:18,820
if you had a critical bug fix and it was

00:19:16,630 --> 00:19:20,590
one line of code how long does it take

00:19:18,820 --> 00:19:22,360
you to get that code to production what

00:19:20,590 --> 00:19:24,970
if that credible critical bug fix is

00:19:22,360 --> 00:19:26,560
costing your business money right

00:19:24,970 --> 00:19:28,960
looking in from a business perspective

00:19:26,560 --> 00:19:30,490
this is a greatcoat or business really

00:19:28,960 --> 00:19:32,020
want from us as software developers is

00:19:30,490 --> 00:19:33,880
that we allow them to have an idea

00:19:32,020 --> 00:19:36,160
get the idea in the hands of our users

00:19:33,880 --> 00:19:38,020
figure out if the idea works and we

00:19:36,160 --> 00:19:41,740
actually understanding that we gained

00:19:38,020 --> 00:19:43,600
from this experiment in the DevOps 2013

00:19:41,740 --> 00:19:45,940
report it was something that really blew

00:19:43,600 --> 00:19:47,770
my mind there was a key finding and that

00:19:45,940 --> 00:19:50,260
was that high-performing organizations

00:19:47,770 --> 00:19:52,360
deploy code 30 times more often and

00:19:50,260 --> 00:19:55,090
8,000 times faster than their peers

00:19:52,360 --> 00:19:58,060
deploying multiple times a day versus an

00:19:55,090 --> 00:20:00,460
average of once a month secondly they

00:19:58,060 --> 00:20:02,830
have 50% fewer failures and restore

00:20:00,460 --> 00:20:06,190
services 12 times faster than their

00:20:02,830 --> 00:20:08,020
peers right but this generally isn't the

00:20:06,190 --> 00:20:10,450
reality for a lot of us as software

00:20:08,020 --> 00:20:12,430
developers right some problems dev and

00:20:10,450 --> 00:20:14,590
ops teams face is that cycle time is

00:20:12,430 --> 00:20:16,450
measured in weeks or months so we write

00:20:14,590 --> 00:20:18,280
code today but actually it only goes

00:20:16,450 --> 00:20:20,050
live two months for now and there's a

00:20:18,280 --> 00:20:21,670
real opportunity cost on that right

00:20:20,050 --> 00:20:22,750
because that software might be really

00:20:21,670 --> 00:20:24,700
valuable might be really valuable

00:20:22,750 --> 00:20:26,380
feature to the organization but that

00:20:24,700 --> 00:20:28,990
value only gets realized in two months

00:20:26,380 --> 00:20:30,850
time the second thing is we have

00:20:28,990 --> 00:20:33,370
problems with deployment it's not a

00:20:30,850 --> 00:20:34,990
reliable and repeatable process you know

00:20:33,370 --> 00:20:37,480
a lot of the times for people nowadays

00:20:34,990 --> 00:20:39,760
even in 2015 deployment is still manual

00:20:37,480 --> 00:20:44,230
you know doing a git clone or on a

00:20:39,760 --> 00:20:45,610
production server but the idea is that

00:20:44,230 --> 00:20:47,470
there are a lot of problems around

00:20:45,610 --> 00:20:50,050
deployment and deployment for a lot of

00:20:47,470 --> 00:20:51,760
people becomes a scary time because

00:20:50,050 --> 00:20:53,140
there's an element of risk involved so

00:20:51,760 --> 00:20:55,320
people are actually just scared to

00:20:53,140 --> 00:20:57,820
deploy code because things can go wrong

00:20:55,320 --> 00:21:00,010
and the third idea is that these various

00:20:57,820 --> 00:21:01,990
bottlenecks were within an organization

00:21:00,010 --> 00:21:03,850
so sometimes it's you know the

00:21:01,990 --> 00:21:06,160
responsibility of the senior developer

00:21:03,850 --> 00:21:08,770
to release the code or to release our

00:21:06,160 --> 00:21:11,230
code we're dependent on you know

00:21:08,770 --> 00:21:11,770
operations people or we maybe even have

00:21:11,230 --> 00:21:13,630
a release

00:21:11,770 --> 00:21:16,300
within our company that slow down the

00:21:13,630 --> 00:21:18,790
whole process so how do we solve these

00:21:16,300 --> 00:21:21,040
problems all right

00:21:18,790 --> 00:21:23,320
firstly one of the key key goals of

00:21:21,040 --> 00:21:25,720
DevOps is to increase flow reduce cycle

00:21:23,320 --> 00:21:27,340
time and shorten the feedback loop from

00:21:25,720 --> 00:21:29,350
the time that we write the software and

00:21:27,340 --> 00:21:32,080
get that software to production so to

00:21:29,350 --> 00:21:33,580
solve those problems a lot of the stuff

00:21:32,080 --> 00:21:36,550
that's been adopted within DevOps is

00:21:33,580 --> 00:21:42,520
continuous delivery okay how many people

00:21:36,550 --> 00:21:44,559
have read this book Wow okay more than

00:21:42,520 --> 00:21:45,970
that if you haven't read this book it's

00:21:44,559 --> 00:21:48,160
a book that every software developer

00:21:45,970 --> 00:21:50,980
should read and try and implement some

00:21:48,160 --> 00:21:52,150
of these practices so for those of you

00:21:50,980 --> 00:21:54,870
that don't know what continuous delivery

00:21:52,150 --> 00:21:57,130
is it's a design practice using software

00:21:54,870 --> 00:21:59,040
development to automating and improve

00:21:57,130 --> 00:22:01,270
the process of software developing

00:21:59,040 --> 00:22:03,070
software delivery you know using

00:22:01,270 --> 00:22:04,480
techniques like automated testing

00:22:03,070 --> 00:22:06,700
continuous integration and continuous

00:22:04,480 --> 00:22:09,429
deployment with the key goal that

00:22:06,700 --> 00:22:11,260
software can be it can be developed to a

00:22:09,429 --> 00:22:13,210
high standard and easily package and

00:22:11,260 --> 00:22:14,950
deploy to environments resulting in the

00:22:13,210 --> 00:22:17,170
ability to rapidly reliably and

00:22:14,950 --> 00:22:19,480
repeatedly push art enhancers and bug

00:22:17,170 --> 00:22:21,970
fixes to customers to customers at lower

00:22:19,480 --> 00:22:24,309
risk with many manual manual manual

00:22:21,970 --> 00:22:26,710
overhead all right I mean that's the

00:22:24,309 --> 00:22:28,090
definition taken off with Wikipedia but

00:22:26,710 --> 00:22:30,190
people practicing continuous delivery

00:22:28,090 --> 00:22:31,990
there's some key calls of goals of

00:22:30,190 --> 00:22:34,210
continuous delivery right and that is

00:22:31,990 --> 00:22:38,410
software is always in a releasable state

00:22:34,210 --> 00:22:40,330
throughout its lifecycle so it's making

00:22:38,410 --> 00:22:42,070
sure that our software is always in a

00:22:40,330 --> 00:22:43,420
releasable state and this is quite a

00:22:42,070 --> 00:22:46,630
paradigm shift for a lot of developers

00:22:43,420 --> 00:22:47,950
and a lot of people secondly a lot of

00:22:46,630 --> 00:22:50,470
people practicing continuous delivery

00:22:47,950 --> 00:22:52,600
say the only way to category we prove

00:22:50,470 --> 00:22:54,790
that software is production ready is to

00:22:52,600 --> 00:22:56,740
deploy it to production when you get

00:22:54,790 --> 00:22:58,360
real users on your software when you've

00:22:56,740 --> 00:23:00,280
got a thousand or ten thousand people

00:22:58,360 --> 00:23:02,260
actually using your software that's when

00:23:00,280 --> 00:23:07,450
you can say this software actually works

00:23:02,260 --> 00:23:08,860
and does what it's supposed to okay so

00:23:07,450 --> 00:23:11,590
this is quite a key slide in my

00:23:08,860 --> 00:23:13,210
presentation right so what's key to

00:23:11,590 --> 00:23:16,090
understand here is that when you choose

00:23:13,210 --> 00:23:17,740
small releases every big releases you

00:23:16,090 --> 00:23:20,050
get the same amount of functionality

00:23:17,740 --> 00:23:22,870
over time except the business can

00:23:20,050 --> 00:23:25,149
realize the value a lot quicker right so

00:23:22,870 --> 00:23:26,619
over yeah we're doing sort of these big

00:23:25,149 --> 00:23:29,109
releases where we've got a whole big

00:23:26,619 --> 00:23:31,869
feature set right but in the yellow but

00:23:29,109 --> 00:23:34,450
we're doing small releases over time

00:23:31,869 --> 00:23:36,129
right and that's kind of kind of key

00:23:34,450 --> 00:23:38,139
because there's benefits of the pointing

00:23:36,129 --> 00:23:40,509
more frequently right the first thing

00:23:38,139 --> 00:23:42,940
that smaller changes make it easier to

00:23:40,509 --> 00:23:45,249
identify problems so when you just

00:23:42,940 --> 00:23:46,779
deploy only one feature to production at

00:23:45,249 --> 00:23:49,029
a time and something goes wrong

00:23:46,779 --> 00:23:52,259
generally you can identify the problem a

00:23:49,029 --> 00:23:54,399
lot quicker or that also means is that a

00:23:52,259 --> 00:23:54,820
lot of the time instead of rolling the

00:23:54,399 --> 00:23:56,619
feature

00:23:54,820 --> 00:23:57,909
art and fixing it that's a lot of the

00:23:56,619 --> 00:23:59,769
time it's quicker just to fix the

00:23:57,909 --> 00:24:04,089
problem and roll forward just one step

00:23:59,769 --> 00:24:06,909
more right also the risk of deployment

00:24:04,089 --> 00:24:08,799
is reduced right the reason is you you

00:24:06,909 --> 00:24:11,099
the idea is is that because you're

00:24:08,799 --> 00:24:13,869
practicing deployment over and over

00:24:11,099 --> 00:24:16,299
right there's a big incentive to make

00:24:13,869 --> 00:24:19,119
sure that deployment works you know that

00:24:16,299 --> 00:24:22,749
notion of the things or painful do it

00:24:19,119 --> 00:24:25,869
more often and the process of fixing

00:24:22,749 --> 00:24:28,690
problems becomes optimized right so when

00:24:25,869 --> 00:24:31,899
things do go wrong we work out ways to

00:24:28,690 --> 00:24:33,609
quickly resolve those problems so those

00:24:31,899 --> 00:24:34,059
are some key ideas behind continuous

00:24:33,609 --> 00:24:36,549
delivery

00:24:34,059 --> 00:24:39,279
so eventually deployment becomes a

00:24:36,549 --> 00:24:40,690
non-event if it becomes even a boring

00:24:39,279 --> 00:24:42,729
straightforward process that actually

00:24:40,690 --> 00:24:44,919
feeds up frees up developers and

00:24:42,729 --> 00:24:47,169
operations teams to go about doing other

00:24:44,919 --> 00:24:48,789
things and doing other work and they can

00:24:47,169 --> 00:24:52,299
just deploy their code and not worry

00:24:48,789 --> 00:24:54,039
about it right so the move towards

00:24:52,299 --> 00:24:55,509
continuous delivery you need to

00:24:54,039 --> 00:24:57,509
understand a bit about continuous

00:24:55,509 --> 00:25:00,009
integration now continuous integration

00:24:57,509 --> 00:25:04,269
explained very simply is that every

00:25:00,009 --> 00:25:07,960
commit you do to your your code right

00:25:04,269 --> 00:25:10,419
triggers of a complete comprehensive set

00:25:07,960 --> 00:25:11,799
of tests that builds the application but

00:25:10,419 --> 00:25:15,369
the idea to with continuous integration

00:25:11,799 --> 00:25:18,309
is that we keep software in a workable

00:25:15,369 --> 00:25:20,589
state right and we create quality at the

00:25:18,309 --> 00:25:21,879
source so what that means with

00:25:20,589 --> 00:25:23,739
developers that are practicing

00:25:21,879 --> 00:25:25,629
continuous integration if they are

00:25:23,739 --> 00:25:27,460
looking to build quality software right

00:25:25,629 --> 00:25:30,159
and this is key because it helps build

00:25:27,460 --> 00:25:31,869
trust between operations and developers

00:25:30,159 --> 00:25:34,839
right and Trust is a big part about what

00:25:31,869 --> 00:25:36,999
DevOps is about because operators you

00:25:34,839 --> 00:25:38,860
can trust that developers are doing the

00:25:36,999 --> 00:25:41,890
right thing not only that

00:25:38,860 --> 00:25:44,260
equality is not only the the job of

00:25:41,890 --> 00:25:45,669
developers it's the job with of everyone

00:25:44,260 --> 00:25:47,890
in the team so everyone's looking to

00:25:45,669 --> 00:25:51,279
create quality software so it's a real

00:25:47,890 --> 00:25:51,460
cultural change within the team all

00:25:51,279 --> 00:25:53,380
right

00:25:51,460 --> 00:25:54,789
fix broken builds immediately so if you

00:25:53,380 --> 00:25:57,159
if you are practicing work in unison

00:25:54,789 --> 00:25:58,929
Gration the idea is of this is that you

00:25:57,159 --> 00:26:00,669
don't block other developers I've worked

00:25:58,929 --> 00:26:02,950
in a lot of environments where the bull

00:26:00,669 --> 00:26:04,870
guys read and like developers just don't

00:26:02,950 --> 00:26:06,309
react right and so I like to use the

00:26:04,870 --> 00:26:08,440
analogy of if you were sitting here

00:26:06,309 --> 00:26:09,490
right now and a fire alarm went off are

00:26:08,440 --> 00:26:10,539
we all just going to sit here and I'm

00:26:09,490 --> 00:26:12,190
going to Carole not talk now we're gonna

00:26:10,539 --> 00:26:13,389
run out the building right you react

00:26:12,190 --> 00:26:15,279
quickly and that's the idea with

00:26:13,389 --> 00:26:17,110
continuous integration don't block other

00:26:15,279 --> 00:26:18,580
developers you know when a build breaks

00:26:17,110 --> 00:26:21,580
it means your software is not in a

00:26:18,580 --> 00:26:23,710
workable state fix it inquire what went

00:26:21,580 --> 00:26:24,399
wrong put another test in place fix the

00:26:23,710 --> 00:26:26,080
broken test

00:26:24,399 --> 00:26:27,250
don't leave broken bulls you know

00:26:26,080 --> 00:26:28,600
they're forever because you actually are

00:26:27,250 --> 00:26:30,279
blocking other developers in because the

00:26:28,600 --> 00:26:33,639
worst thing you can actually do is check

00:26:30,279 --> 00:26:36,549
in on two broken code also keep your

00:26:33,639 --> 00:26:39,010
builds fast right get you want to get

00:26:36,549 --> 00:26:40,269
feedback sooner alright so what

00:26:39,010 --> 00:26:41,409
generally happens on projects is you

00:26:40,269 --> 00:26:44,139
started with a continuous integration

00:26:41,409 --> 00:26:46,330
and then three months later down the

00:26:44,139 --> 00:26:48,399
line you know the bulbs are taking ten

00:26:46,330 --> 00:26:50,139
or twenty minutes and then you know

00:26:48,399 --> 00:26:52,149
developers take longer and longer to get

00:26:50,139 --> 00:26:53,980
feedback you know by the time the bull

00:26:52,149 --> 00:26:56,019
breaks after 18 minutes the developers

00:26:53,980 --> 00:26:58,090
switch context context and now they've

00:26:56,019 --> 00:27:01,269
got to come back to to looking at the

00:26:58,090 --> 00:27:06,370
bull so the the key idea is my slides

00:27:01,269 --> 00:27:08,830
aren't I was back ok cool and you know

00:27:06,370 --> 00:27:10,889
the key idea is to keep your Bulls you

00:27:08,830 --> 00:27:12,250
know fast so you get feedback soon I'm

00:27:10,889 --> 00:27:14,200
all right

00:27:12,250 --> 00:27:16,779
automated acceptance testing is another

00:27:14,200 --> 00:27:18,429
key idea within the DevOps space but

00:27:16,779 --> 00:27:20,049
what to do with continuous delivery all

00:27:18,429 --> 00:27:21,880
right and that's because automated

00:27:20,049 --> 00:27:24,190
acceptance testing acts as your safety

00:27:21,880 --> 00:27:25,750
net when you deploy often if you can

00:27:24,190 --> 00:27:27,370
validate that your business critical

00:27:25,750 --> 00:27:30,669
features of your software work

00:27:27,370 --> 00:27:33,669
why can't you deploy it ok my software

00:27:30,669 --> 00:27:36,190
works let's ship it out all right and

00:27:33,669 --> 00:27:38,710
there's a guy from Google had a quote

00:27:36,190 --> 00:27:42,159
you know automated testing turns fear

00:27:38,710 --> 00:27:43,990
into boredom right and it's kind of true

00:27:42,159 --> 00:27:45,610
it gives developers so much confidence I

00:27:43,990 --> 00:27:46,450
worked in a high-traffic environment

00:27:45,610 --> 00:27:48,789
where website

00:27:46,450 --> 00:27:50,260
over a three month period it was kind of

00:27:48,789 --> 00:27:51,530
a campaign and we took thousands and

00:27:50,260 --> 00:27:53,810
thousands of pounds

00:27:51,530 --> 00:27:55,580
and we had an automated test suite that

00:27:53,810 --> 00:27:57,230
took 12 minutes to run and what it did

00:27:55,580 --> 00:27:58,100
was it tested all the critical parts of

00:27:57,230 --> 00:28:00,110
our application

00:27:58,100 --> 00:28:01,820
it tested could users register could

00:28:00,110 --> 00:28:03,110
they make a donation could they do

00:28:01,820 --> 00:28:05,000
certain things we really just care about

00:28:03,110 --> 00:28:06,620
the critical path and when we could

00:28:05,000 --> 00:28:08,510
validate in that 12 minutes that almost

00:28:06,620 --> 00:28:10,310
all our features were working it gives

00:28:08,510 --> 00:28:12,500
you great confidence to just shove your

00:28:10,310 --> 00:28:14,480
software but if you don't have automated

00:28:12,500 --> 00:28:16,940
tests you're kind of taking potshots in

00:28:14,480 --> 00:28:18,710
the dark so automated testing is very

00:28:16,940 --> 00:28:20,450
key but when we talk about automated

00:28:18,710 --> 00:28:22,460
testing in a devops environment it's not

00:28:20,450 --> 00:28:24,260
only about testing your software right

00:28:22,460 --> 00:28:25,940
it's about testing your your

00:28:24,260 --> 00:28:27,590
non-functional requirements - and

00:28:25,940 --> 00:28:29,150
non-functional requirements or things

00:28:27,590 --> 00:28:31,520
like capacity and performance and

00:28:29,150 --> 00:28:33,440
security but some tools in this space if

00:28:31,520 --> 00:28:35,540
you're using things like puppet and chef

00:28:33,440 --> 00:28:37,670
to configure your service I'm not sure

00:28:35,540 --> 00:28:39,260
if any of you have seen our spec but it

00:28:37,670 --> 00:28:41,540
allows you to write automated tests for

00:28:39,260 --> 00:28:43,220
your service and those are really really

00:28:41,540 --> 00:28:47,750
great tool so I put the get up link

00:28:43,220 --> 00:28:48,890
there you can check that out okay so the

00:28:47,750 --> 00:28:53,240
last thing I want to talk about is a

00:28:48,890 --> 00:28:56,090
deployment pipeline okay so a deployment

00:28:53,240 --> 00:28:57,980
pipeline is an automated implementation

00:28:56,090 --> 00:29:02,000
of your applications build deploy and

00:28:57,980 --> 00:29:03,410
testing and release process right the

00:29:02,000 --> 00:29:06,350
thing is with deployment pipelines

00:29:03,410 --> 00:29:07,790
they're obviously obviously sorry I mean

00:29:06,350 --> 00:29:09,410
to say a lot of the time they per spoke

00:29:07,790 --> 00:29:13,250
depending on the type of organization

00:29:09,410 --> 00:29:16,190
you work in but the rules that governor

00:29:13,250 --> 00:29:18,500
the the proponent pipeline you know

00:29:16,190 --> 00:29:19,730
don't vary right so you the deployment

00:29:18,500 --> 00:29:22,400
pipeline usually looks something like

00:29:19,730 --> 00:29:24,340
this you have a delivery team that are

00:29:22,400 --> 00:29:27,530
checking changes into version control

00:29:24,340 --> 00:29:30,200
right they're checking triggers your

00:29:27,530 --> 00:29:33,440
building unit tests and then developers

00:29:30,200 --> 00:29:34,940
get some feedback right but also then

00:29:33,440 --> 00:29:38,720
triggers of some automated acceptance

00:29:34,940 --> 00:29:41,270
tests and then again developers get some

00:29:38,720 --> 00:29:42,860
feedback the key idea is that as we go

00:29:41,270 --> 00:29:46,010
from left to right you can add more of

00:29:42,860 --> 00:29:47,210
these steps you know you pipeline will

00:29:46,010 --> 00:29:48,530
be depending on your type of

00:29:47,210 --> 00:29:50,810
organization and software you're

00:29:48,530 --> 00:29:52,400
building but they're ki-ki-ri-ki ideas

00:29:50,810 --> 00:29:54,740
you get more confidence as we go from

00:29:52,400 --> 00:29:56,630
left to right that you know our software

00:29:54,740 --> 00:29:57,830
is in a shippable state but obviously

00:29:56,630 --> 00:29:59,570
the test things like automated

00:29:57,830 --> 00:30:00,860
acceptance tests you know Jennie will

00:29:59,570 --> 00:30:02,990
take longer to run and you know just

00:30:00,860 --> 00:30:04,910
some basic unit tests that are running

00:30:02,990 --> 00:30:05,400
on your on your code base the idea at

00:30:04,910 --> 00:30:07,200
the end is

00:30:05,400 --> 00:30:09,960
we get approval and then we get we can

00:30:07,200 --> 00:30:11,309
push a release art right and so the idea

00:30:09,960 --> 00:30:13,770
is that at the end of a deployment

00:30:11,309 --> 00:30:15,390
pipeline we can do a release and what's

00:30:13,770 --> 00:30:16,620
really interesting is that a lot of

00:30:15,390 --> 00:30:18,390
developers will do continuous

00:30:16,620 --> 00:30:20,070
integration but they're only halfway

00:30:18,390 --> 00:30:22,350
there they don't build a deployment

00:30:20,070 --> 00:30:24,270
pipeline right and the reason they don't

00:30:22,350 --> 00:30:26,460
is because it's generally a resource

00:30:24,270 --> 00:30:29,130
intensive process it takes time to build

00:30:26,460 --> 00:30:30,720
at a plant department pipeline the key

00:30:29,130 --> 00:30:34,530
idea is this is where you get operations

00:30:30,720 --> 00:30:36,059
guys involved because they generally

00:30:34,530 --> 00:30:37,650
have you know a good understanding of

00:30:36,059 --> 00:30:40,050
how to deploy code and developers and

00:30:37,650 --> 00:30:42,690
operations can work together to build a

00:30:40,050 --> 00:30:45,360
deployment pipeline right so some tools

00:30:42,690 --> 00:30:47,309
in the PHP space sorry before I get to

00:30:45,360 --> 00:30:48,720
that some key objectives of a deployment

00:30:47,309 --> 00:30:50,670
pipeline right the first is

00:30:48,720 --> 00:30:52,830
collaboration because the deployment

00:30:50,670 --> 00:30:54,990
pipeline is visible you know the process

00:30:52,830 --> 00:30:56,490
of you know building and testing and

00:30:54,990 --> 00:30:58,020
releasing your software is visible to

00:30:56,490 --> 00:30:59,760
everyone or any developers and

00:30:58,020 --> 00:31:01,920
operations but potentially you know

00:30:59,760 --> 00:31:03,929
anyone within the organization right is

00:31:01,920 --> 00:31:05,790
that we get feedback is our software in

00:31:03,929 --> 00:31:07,170
a workable state is it in a broken state

00:31:05,790 --> 00:31:08,970
are the Bulls red okay there's something

00:31:07,170 --> 00:31:10,800
wrong with the software right and that

00:31:08,970 --> 00:31:12,000
free feedback starts of these

00:31:10,800 --> 00:31:14,280
discussions and gets people

00:31:12,000 --> 00:31:15,780
collaborating but ideally teams can

00:31:14,280 --> 00:31:17,429
deploy in release any version of this

00:31:15,780 --> 00:31:22,100
software to any environment at will

00:31:17,429 --> 00:31:25,800
through a fully automated process okay

00:31:22,100 --> 00:31:28,050
so some tools in this space I mean I've

00:31:25,800 --> 00:31:29,820
just literally cut and cut and pasted

00:31:28,050 --> 00:31:32,460
some tools onto the slide I think the

00:31:29,820 --> 00:31:35,100
key thing is is that as PHP developers

00:31:32,460 --> 00:31:37,050
we have great tools available to us to

00:31:35,100 --> 00:31:38,340
build a deployment pipeline all right if

00:31:37,050 --> 00:31:40,920
you don't have a deployment pipeline

00:31:38,340 --> 00:31:42,090
it's key that you invest time and you

00:31:40,920 --> 00:31:43,530
start thinking about building one

00:31:42,090 --> 00:31:45,390
because it allows you to go from code

00:31:43,530 --> 00:31:48,540
committed to being able to release that

00:31:45,390 --> 00:31:52,130
software to any environment it makes our

00:31:48,540 --> 00:31:54,270
lives as developers a lot easier right

00:31:52,130 --> 00:31:55,710
so I've spoken a lot about automated

00:31:54,270 --> 00:31:58,350
stuff the last thing is automated

00:31:55,710 --> 00:32:01,320
deployments right so the way to think of

00:31:58,350 --> 00:32:03,660
of automated deployment is as is to for

00:32:01,320 --> 00:32:05,550
humans is a two-step process right the

00:32:03,660 --> 00:32:07,200
first step is that you select an

00:32:05,550 --> 00:32:09,660
environment where we want our software

00:32:07,200 --> 00:32:11,280
to go and the second step is that we

00:32:09,660 --> 00:32:13,350
push a button to release the software to

00:32:11,280 --> 00:32:14,670
that environment all right so we don't

00:32:13,350 --> 00:32:17,280
have the bottleneck of somebody also

00:32:14,670 --> 00:32:18,029
that has the responsibility of deploying

00:32:17,280 --> 00:32:19,379
code

00:32:18,029 --> 00:32:21,809
actually if you're releasing small

00:32:19,379 --> 00:32:25,349
features anyone can push that red button

00:32:21,809 --> 00:32:26,489
I mean some you know big software

00:32:25,349 --> 00:32:27,779
companies like the googles and the

00:32:26,489 --> 00:32:29,879
Facebook you know developers on their

00:32:27,779 --> 00:32:32,159
first day you know do release but the

00:32:29,879 --> 00:32:33,840
idea if its automated essentially once

00:32:32,159 --> 00:32:35,509
you've built that feature you can just

00:32:33,840 --> 00:32:37,590
push a button and release it art

00:32:35,509 --> 00:32:39,059
deployment should never be a manual

00:32:37,590 --> 00:32:41,070
thing it should never be a thing where

00:32:39,059 --> 00:32:42,479
there's a step of you know steps that we

00:32:41,070 --> 00:32:44,580
need to do to deploy our software

00:32:42,479 --> 00:32:45,899
because you know because I think it

00:32:44,580 --> 00:32:47,729
might be familiar to developers what

00:32:45,899 --> 00:32:49,080
ends up happening is if you do a

00:32:47,729 --> 00:32:50,549
deployment and something doesn't go

00:32:49,080 --> 00:32:52,859
quite right so you quickly change the

00:32:50,549 --> 00:32:55,289
process right and then you only deploy

00:32:52,859 --> 00:32:56,820
again in the months time and then then

00:32:55,289 --> 00:32:58,080
the next person that deploys maybe

00:32:56,820 --> 00:32:59,489
doesn't know about that thing that you

00:32:58,080 --> 00:33:01,169
did and then the software you know sort

00:32:59,489 --> 00:33:03,029
of breaks again so it's key that you

00:33:01,169 --> 00:33:05,609
automate your deployments and this

00:33:03,029 --> 00:33:08,719
automates the automation but is where

00:33:05,609 --> 00:33:13,289
the a and the cams definition comes in

00:33:08,719 --> 00:33:15,779
okay so some tools for deployment I've

00:33:13,289 --> 00:33:18,089
got for PHP I've got Capistrano

00:33:15,779 --> 00:33:19,710
Rocketeer and deployer there are great

00:33:18,089 --> 00:33:21,059
tools I mean if you go onto get up and

00:33:19,710 --> 00:33:23,039
or if you just do a Google search for

00:33:21,059 --> 00:33:24,450
PHP diploma tools there's great tools

00:33:23,039 --> 00:33:26,489
out there that are built that can

00:33:24,450 --> 00:33:28,440
automate your deployments for you and so

00:33:26,489 --> 00:33:30,239
you should really be thinking about you

00:33:28,440 --> 00:33:32,940
know investing in some time in

00:33:30,239 --> 00:33:37,619
understanding these tools and using them

00:33:32,940 --> 00:33:38,609
to deploy your software okay so so the

00:33:37,619 --> 00:33:41,339
next thing I want to talk about is

00:33:38,609 --> 00:33:43,109
measurement so the idea from this

00:33:41,339 --> 00:33:45,359
picture is in a DevOps environment you

00:33:43,109 --> 00:33:47,580
can see that key metrics and monitoring

00:33:45,359 --> 00:33:49,619
stuff is to display to everyone right

00:33:47,580 --> 00:33:51,269
but the idea with monitoring that is

00:33:49,619 --> 00:33:53,759
that if you're moving you know you're

00:33:51,269 --> 00:33:55,679
releasing software often you want false

00:33:53,759 --> 00:33:59,159
feedback so you want monitoring in place

00:33:55,679 --> 00:34:02,070
so that when things do go wrong you can

00:33:59,159 --> 00:34:04,049
go you know look back at your your data

00:34:02,070 --> 00:34:06,509
that you have and work out you know what

00:34:04,049 --> 00:34:08,159
what went wrong so you want to be

00:34:06,509 --> 00:34:09,809
proactive about your monitoring not

00:34:08,159 --> 00:34:12,029
reactive so when something goes wrong it

00:34:09,809 --> 00:34:14,520
was like it would be great if we had you

00:34:12,029 --> 00:34:16,079
know what the memory usage on the on the

00:34:14,520 --> 00:34:18,200
server was that time you know be

00:34:16,079 --> 00:34:20,789
proactive about your monitoring you know

00:34:18,200 --> 00:34:22,289
ID monitoring the to the definition of

00:34:20,789 --> 00:34:24,569
done of new software features that's a

00:34:22,289 --> 00:34:26,250
key idea within DevOps you know Patrick

00:34:24,569 --> 00:34:27,539
the ball came up with this thing which

00:34:26,250 --> 00:34:30,779
didn't really catch on which was

00:34:27,539 --> 00:34:31,500
monitoring driven development which is

00:34:30,779 --> 00:34:32,970
you

00:34:31,500 --> 00:34:35,849
right the monitoring for the software

00:34:32,970 --> 00:34:37,619
before you develop it but you know don't

00:34:35,849 --> 00:34:39,359
think of monitoring as a toss that's

00:34:37,619 --> 00:34:41,609
something that happens downstream are

00:34:39,359 --> 00:34:43,320
you know someone else's in a job get

00:34:41,609 --> 00:34:45,359
involved you have the discussion with

00:34:43,320 --> 00:34:46,980
the UPS guy asking what he is monitoring

00:34:45,359 --> 00:34:48,599
you know and then you can look to

00:34:46,980 --> 00:34:49,470
improve on that the next thing is

00:34:48,599 --> 00:34:51,690
measurement right

00:34:49,470 --> 00:34:53,070
and in DevOps it's kind of really simple

00:34:51,690 --> 00:34:56,129
but you can't improve what you can't

00:34:53,070 --> 00:34:57,840
measure so you know if you deployment

00:34:56,129 --> 00:35:00,030
some manual and then you move to an

00:34:57,840 --> 00:35:01,140
automated deployment process you know

00:35:00,030 --> 00:35:02,609
you can measure that because you've gone

00:35:01,140 --> 00:35:04,800
from manual to automatic but then if you

00:35:02,609 --> 00:35:09,090
automated deployment process is taking

00:35:04,800 --> 00:35:10,619
you know 10 minutes you know the idea is

00:35:09,090 --> 00:35:12,450
is that you benchmark that and then look

00:35:10,619 --> 00:35:13,290
to measure and improve so maybe get it

00:35:12,450 --> 00:35:15,750
down to five minutes

00:35:13,290 --> 00:35:17,099
whatever it may be but the key idea is

00:35:15,750 --> 00:35:18,930
that measurements are shared not only

00:35:17,099 --> 00:35:21,720
between developers and Ops people but

00:35:18,930 --> 00:35:24,359
with the entire organization so that's

00:35:21,720 --> 00:35:26,070
really a key idea within a DevOps

00:35:24,359 --> 00:35:27,570
environment and you commonly see in the

00:35:26,070 --> 00:35:28,830
DevOps environment these dashboards

00:35:27,570 --> 00:35:30,540
where everyone can see what's going on

00:35:28,830 --> 00:35:32,880
and so when there's a massive spike on a

00:35:30,540 --> 00:35:34,380
graph you know people can see it can

00:35:32,880 --> 00:35:35,700
react to that and it's not like you know

00:35:34,380 --> 00:35:37,950
all your customers are burning you up

00:35:35,700 --> 00:35:39,089
and say hey you know your software is

00:35:37,950 --> 00:35:40,800
not working because that's the worst

00:35:39,089 --> 00:35:41,869
kind of position to be in is that we

00:35:40,800 --> 00:35:47,400
want to know about it before our

00:35:41,869 --> 00:35:50,910
customers do right and some tools for

00:35:47,400 --> 00:35:52,890
monitoring stuff I've chucked someone on

00:35:50,910 --> 00:35:55,080
this slide and a lot of these tools are

00:35:52,890 --> 00:35:56,790
open source you know for application

00:35:55,080 --> 00:35:59,339
metric things like stats D and graphite

00:35:56,790 --> 00:36:01,530
and you know monitoring and loading is

00:35:59,339 --> 00:36:03,330
sensors kind of wouldn't say the new kid

00:36:01,530 --> 00:36:06,030
on the block but it's kind of you know

00:36:03,330 --> 00:36:07,800
it's really a great tool you can write

00:36:06,030 --> 00:36:10,260
custom checks if it's written in Ruby

00:36:07,800 --> 00:36:12,119
but it's a really nice monitoring tool

00:36:10,260 --> 00:36:14,670
we're checking out you know log files

00:36:12,119 --> 00:36:17,040
from production you know a lot of the

00:36:14,670 --> 00:36:18,630
time we could Apple application logs but

00:36:17,040 --> 00:36:20,430
we can figure out so much about our

00:36:18,630 --> 00:36:22,589
application if we put if we have a way

00:36:20,430 --> 00:36:25,050
of viewing those application logs and so

00:36:22,589 --> 00:36:26,580
you know this the the the ALK stack

00:36:25,050 --> 00:36:27,180
which is logs that's a laxative search

00:36:26,580 --> 00:36:29,040
and Kabana

00:36:27,180 --> 00:36:30,990
so log stash will generally ship your

00:36:29,040 --> 00:36:32,670
logs to elasticsearch and keep on as a

00:36:30,990 --> 00:36:37,619
search interface and an interface to

00:36:32,670 --> 00:36:39,330
build metrics around your logs and I've

00:36:37,619 --> 00:36:41,550
chucked a gray log and Splunk on there

00:36:39,330 --> 00:36:43,440
those are I think paper tools but the

00:36:41,550 --> 00:36:44,910
idea is that they are great tools in the

00:36:43,440 --> 00:36:45,180
space and as developers we should be

00:36:44,910 --> 00:36:46,500
looking

00:36:45,180 --> 00:36:51,690
at these tools and working with our Ops

00:36:46,500 --> 00:36:52,980
guys to put some of these in place the

00:36:51,690 --> 00:36:55,829
last thing I wanted to talk about is

00:36:52,980 --> 00:36:57,890
sharing which is a key aspect of DevOps

00:36:55,829 --> 00:37:01,770
right and that's about sharing the pain

00:36:57,890 --> 00:37:04,079
all right and these are maybe quite

00:37:01,770 --> 00:37:05,700
controversial ideas for developers but

00:37:04,079 --> 00:37:08,040
that developers take more ownership and

00:37:05,700 --> 00:37:10,800
responsibility for their code this is a

00:37:08,040 --> 00:37:12,480
true story I recently spoke to a guy he

00:37:10,800 --> 00:37:13,859
was working in a company where they

00:37:12,480 --> 00:37:16,680
wanted to implement continuous delivery

00:37:13,859 --> 00:37:18,300
and they proposed these ideas to

00:37:16,680 --> 00:37:23,160
software developers and a lot of them

00:37:18,300 --> 00:37:25,500
left right which which kind of says a

00:37:23,160 --> 00:37:27,809
lot because you know what do they know

00:37:25,500 --> 00:37:29,309
about their code that we don't you know

00:37:27,809 --> 00:37:30,900
so that's good that was you know it's

00:37:29,309 --> 00:37:33,089
quite profound when you said that to me

00:37:30,900 --> 00:37:35,309
but also developers on call for

00:37:33,089 --> 00:37:36,869
production issues right I was a

00:37:35,309 --> 00:37:38,730
developer on a software project where

00:37:36,869 --> 00:37:40,650
one day someone said well you know can

00:37:38,730 --> 00:37:42,780
you go and call for the software right

00:37:40,650 --> 00:37:44,760
and then that got me thinking about okay

00:37:42,780 --> 00:37:47,849
cool so if something goes wrong it's my

00:37:44,760 --> 00:37:49,650
job to fix it but how do I fix it right

00:37:47,849 --> 00:37:51,780
and so what it gets you doing as a

00:37:49,650 --> 00:37:54,900
developer is you start to think about

00:37:51,780 --> 00:37:57,930
how operations people and other people

00:37:54,900 --> 00:38:00,030
can you know support your code and if

00:37:57,930 --> 00:38:01,740
you do decide to do this you start to

00:38:00,030 --> 00:38:04,619
build a common set of tools that

00:38:01,740 --> 00:38:08,430
developers and operations can use to

00:38:04,619 --> 00:38:09,960
support you know production you know

00:38:08,430 --> 00:38:12,210
fairly controversial for some developers

00:38:09,960 --> 00:38:14,609
but you know I think the key thing here

00:38:12,210 --> 00:38:17,190
is that it helps you build empathy for

00:38:14,609 --> 00:38:20,640
operations people and empathy is a big

00:38:17,190 --> 00:38:21,780
sort of thing you know people in in in

00:38:20,640 --> 00:38:23,640
the DevOps circles are talking about

00:38:21,780 --> 00:38:25,589
empathy a lot and and that's what it's

00:38:23,640 --> 00:38:27,960
you know come to is that you know just

00:38:25,589 --> 00:38:30,030
developers understanding that you know

00:38:27,960 --> 00:38:31,770
code that you write you know it's also

00:38:30,030 --> 00:38:33,299
your responsibility and it helps you

00:38:31,770 --> 00:38:37,349
develop empathy for those operations

00:38:33,299 --> 00:38:40,049
people and then blindness post-mortems

00:38:37,349 --> 00:38:42,869
right blameless post-mortems are a key

00:38:40,049 --> 00:38:44,910
idea within the DevOps space in that in

00:38:42,869 --> 00:38:46,530
that when things do go wrong don't look

00:38:44,910 --> 00:38:49,760
to always blame someone else and point a

00:38:46,530 --> 00:38:51,930
finger right I've done wanted to

00:38:49,760 --> 00:38:53,609
post-mortem things where ideally you

00:38:51,930 --> 00:38:55,559
come up with a timeline of events or

00:38:53,609 --> 00:38:57,329
what went wrong and you have an adult

00:38:55,559 --> 00:38:59,069
discussion about what went wrong

00:38:57,329 --> 00:39:01,019
what confirmations you can put in place

00:38:59,069 --> 00:39:03,569
to stop that happening again because

00:39:01,019 --> 00:39:05,400
that helps you improve but blamin spoke

00:39:03,569 --> 00:39:09,599
of Morton's are a key idea within DevOps

00:39:05,400 --> 00:39:12,420
too you know when things do go wrong you

00:39:09,599 --> 00:39:18,239
know look to to put measures in place to

00:39:12,420 --> 00:39:20,579
to fix things okay so the other bits

00:39:18,239 --> 00:39:30,719
about sharing that I wanted to mention

00:39:20,579 --> 00:39:34,499
allegedly their code quickly so that we

00:39:30,719 --> 00:39:35,940
popped up into my timeline recently but

00:39:34,499 --> 00:39:37,469
a key thing with source control within a

00:39:35,940 --> 00:39:38,969
DevOps environments is that a lot of the

00:39:37,469 --> 00:39:42,059
time when you think about your

00:39:38,969 --> 00:39:43,349
application code you think about just

00:39:42,059 --> 00:39:44,700
the code that should be in version

00:39:43,349 --> 00:39:47,880
control but there's a couple of other

00:39:44,700 --> 00:39:50,339
aspects all right these code and scripts

00:39:47,880 --> 00:39:53,279
for building for building the

00:39:50,339 --> 00:39:54,839
application so if you are you know using

00:39:53,279 --> 00:39:56,400
something like Jenkins those code and

00:39:54,839 --> 00:39:58,259
scripts are inside the application

00:39:56,400 --> 00:40:00,930
because that allows people to just share

00:39:58,259 --> 00:40:02,549
and work on that together you know code

00:40:00,930 --> 00:40:05,670
and scripts for testing that application

00:40:02,549 --> 00:40:07,229
should be part of your repo code and

00:40:05,670 --> 00:40:09,150
scripts will deploy in the application

00:40:07,229 --> 00:40:11,009
so whatever you're using to deploy the

00:40:09,150 --> 00:40:12,989
application a lot of the time can be

00:40:11,009 --> 00:40:15,059
made part of the repo which is key and

00:40:12,989 --> 00:40:16,979
then code and scripts for building

00:40:15,059 --> 00:40:18,089
environments for the application so if

00:40:16,979 --> 00:40:19,829
you're always in things like Scheffel

00:40:18,089 --> 00:40:21,479
puppet you are writing code those things

00:40:19,829 --> 00:40:24,150
should also be version but it also

00:40:21,479 --> 00:40:26,880
allows developers and operations people

00:40:24,150 --> 00:40:29,219
to contribute and share to and to use

00:40:26,880 --> 00:40:30,779
the common tool set for the you know the

00:40:29,219 --> 00:40:34,410
software delivery process and for the

00:40:30,779 --> 00:40:37,199
things that you're building okay I think

00:40:34,410 --> 00:40:38,369
I kind of was through that but in

00:40:37,199 --> 00:40:39,839
summary or what have I spoken about

00:40:38,369 --> 00:40:41,880
today I've spoken about why we need

00:40:39,839 --> 00:40:44,609
DevOps we've actually got some proof now

00:40:41,880 --> 00:40:47,190
that DevOps you know does increase IT

00:40:44,609 --> 00:40:49,289
performance you know there's a large you

00:40:47,190 --> 00:40:51,719
know scientific study I've spoken about

00:40:49,289 --> 00:40:53,849
breaking down these silos you know these

00:40:51,719 --> 00:40:58,430
you know cross-functional teams there's

00:40:53,849 --> 00:41:00,239
no division of labor I've spoken about

00:40:58,430 --> 00:41:01,890
organizational culture and why that's

00:41:00,239 --> 00:41:02,789
important you know or in the environment

00:41:01,890 --> 00:41:04,559
where everyone's just blaming one

00:41:02,789 --> 00:41:07,469
another or are you looking to work

00:41:04,559 --> 00:41:09,569
together and solve problems together you

00:41:07,469 --> 00:41:11,069
know but it's key when you think about

00:41:09,569 --> 00:41:13,380
DevOps to understand what your

00:41:11,069 --> 00:41:15,119
what your organizational culture is and

00:41:13,380 --> 00:41:17,999
how you move that that forward

00:41:15,119 --> 00:41:20,579
especially in larger organization larger

00:41:17,999 --> 00:41:22,199
organizations because you know culture

00:41:20,579 --> 00:41:24,359
in those organizations a lot of the time

00:41:22,199 --> 00:41:25,769
is pathological and bureaucratic and so

00:41:24,359 --> 00:41:27,589
you might not be able to get devops

00:41:25,769 --> 00:41:29,880
right in those type of environments I

00:41:27,589 --> 00:41:31,469
spoken about increasing collaboration

00:41:29,880 --> 00:41:33,630
between developers and operations and

00:41:31,469 --> 00:41:35,279
some of the ideas there I've spoken

00:41:33,630 --> 00:41:37,499
about cycle time and continuous delivery

00:41:35,279 --> 00:41:40,170
and white cycle time is a vital metric

00:41:37,499 --> 00:41:41,699
for you know most businesses I've spoken

00:41:40,170 --> 00:41:44,849
a bit about measurements and monitoring

00:41:41,699 --> 00:41:46,739
and sharing but I wanted to leave you

00:41:44,849 --> 00:41:49,140
with this parting thought right on the

00:41:46,739 --> 00:41:50,849
fifth anniversary of DevOps Patrick

00:41:49,140 --> 00:41:53,160
Dubois The Godfather say something right

00:41:50,849 --> 00:41:53,819
DevOps gave the industry a hint of what

00:41:53,160 --> 00:41:55,829
it could become

00:41:53,819 --> 00:42:01,289
it's not up to the industry to make it

00:41:55,829 --> 00:42:03,599
happen or stubbornly stay the same okay

00:42:01,289 --> 00:42:05,749
that's it really sorry thank you very

00:42:03,599 --> 00:42:05,749
much

00:42:13,410 --> 00:42:18,880
okay yes well alright what's the

00:42:16,660 --> 00:42:27,519
question time I guess you know take some

00:42:18,880 --> 00:42:29,229
questions yeah all right what's on your

00:42:27,519 --> 00:42:31,059
diagram where you had a deployment

00:42:29,229 --> 00:42:33,309
pipeline thought about getting feedback

00:42:31,059 --> 00:42:36,660
quickly what would you say is a good

00:42:33,309 --> 00:42:38,799
kind of time frame

00:42:36,660 --> 00:42:40,779
would you be happy with them or would

00:42:38,799 --> 00:42:45,549
you start saying it's getting too long

00:42:40,779 --> 00:42:46,749
now it's a really good question it

00:42:45,549 --> 00:42:48,190
obviously depends on the software you're

00:42:46,749 --> 00:42:51,970
building I think for me I want feedback

00:42:48,190 --> 00:42:53,559
as fast as I can so you know you want to

00:42:51,970 --> 00:42:55,239
try and you know shorten that feeble

00:42:53,559 --> 00:42:56,440
feedback loop I've been actually doing a

00:42:55,239 --> 00:42:58,269
lot of reading lately about how to

00:42:56,440 --> 00:43:00,279
shorten that you know a feedback loop I

00:42:58,269 --> 00:43:03,430
mean it's really hard to say I would say

00:43:00,279 --> 00:43:04,630
you know it really depends on the

00:43:03,430 --> 00:43:06,309
software application you've got a

00:43:04,630 --> 00:43:08,440
monolithic application that has got a

00:43:06,309 --> 00:43:10,690
lot of features you know it might be

00:43:08,440 --> 00:43:14,019
impossible to really make the short

00:43:10,690 --> 00:43:15,640
feedback loop but I guess because I've

00:43:14,019 --> 00:43:19,059
I've worked a lot in continuous

00:43:15,640 --> 00:43:21,849
integration environments you kind of

00:43:19,059 --> 00:43:23,380
just you know when the when you watch

00:43:21,849 --> 00:43:24,910
the bull drowning even if you just watch

00:43:23,380 --> 00:43:26,650
and you see like a taste standing there

00:43:24,910 --> 00:43:28,690
and you can visibly count all it's

00:43:26,650 --> 00:43:30,339
taking 1 2 seconds investigate why and

00:43:28,690 --> 00:43:32,529
try and you know shooting that feedback

00:43:30,339 --> 00:43:34,569
loop but to give an exact time

00:43:32,529 --> 00:43:36,039
measurement is now really really hard I

00:43:34,569 --> 00:43:37,809
think I didn't talk about it much but

00:43:36,039 --> 00:43:39,969
there's some key ideas in DevOps about

00:43:37,809 --> 00:43:41,559
you know making your balls faster so if

00:43:39,969 --> 00:43:43,660
you are using Jenkins like using things

00:43:41,559 --> 00:43:46,479
like multiple slaves so a paralyzation

00:43:43,660 --> 00:43:48,009
to to make builds foster a PHP doesn't

00:43:46,479 --> 00:43:51,729
have concurrency so I've played around

00:43:48,009 --> 00:43:55,779
with a parrot test which can run PHP

00:43:51,729 --> 00:43:59,349
unit tests in parallel I've had some you

00:43:55,779 --> 00:44:01,869
know some ones they are the key things

00:43:59,349 --> 00:44:05,229
other tools yeah I mean PHP doesn't have

00:44:01,869 --> 00:44:06,700
a concurrency model built in so but yeah

00:44:05,229 --> 00:44:07,960
is it a key challenge of trying to make

00:44:06,700 --> 00:44:09,789
you know trying to make you bold fast

00:44:07,960 --> 00:44:12,400
isn't isn't straightforward I think also

00:44:09,789 --> 00:44:13,509
monitor them graph them yeah I mean

00:44:12,400 --> 00:44:14,920
that's the other thing too yes so you

00:44:13,509 --> 00:44:16,599
can use something like you know stats to

00:44:14,920 --> 00:44:18,819
your graphite you can use timing metrics

00:44:16,599 --> 00:44:20,710
so I mean that's the other way to do it

00:44:18,819 --> 00:44:22,329
you have a timing metric to graph how

00:44:20,710 --> 00:44:24,309
long the bolt is taking and then as you

00:44:22,329 --> 00:44:25,480
start to see it go up look to sort of

00:44:24,309 --> 00:44:29,290
reduce the time

00:44:25,480 --> 00:44:30,490
the other room Aaron hey it's not really

00:44:29,290 --> 00:44:32,050
so much of a question of the comment you

00:44:30,490 --> 00:44:35,079
were talking one of the final slides

00:44:32,050 --> 00:44:36,520
about making sure you commit into

00:44:35,079 --> 00:44:39,130
version control the tests and scripts

00:44:36,520 --> 00:44:40,540
for deployment testing etc and you

00:44:39,130 --> 00:44:42,070
mentioned that about the application but

00:44:40,540 --> 00:44:44,530
one thing that you didn't do is that you

00:44:42,070 --> 00:44:46,270
also need to commit the tests and

00:44:44,530 --> 00:44:48,520
specifically the tests for your

00:44:46,270 --> 00:44:50,349
environment as well as the tests for

00:44:48,520 --> 00:44:53,829
your application yeah and that's really

00:44:50,349 --> 00:44:55,570
important because if you've got any food

00:44:53,829 --> 00:44:57,910
from an operation side point reply I am

00:44:55,570 --> 00:45:00,099
if you can test your environment before

00:44:57,910 --> 00:45:02,710
you putting the code into it it helps

00:45:00,099 --> 00:45:04,060
you it means you can change you can

00:45:02,710 --> 00:45:06,339
upgrade and you can prove the

00:45:04,060 --> 00:45:07,810
environment so you're in a better place

00:45:06,339 --> 00:45:09,640
before you run the application and the

00:45:07,810 --> 00:45:10,660
tests on your new environment and I

00:45:09,640 --> 00:45:12,640
thought that's important to feedback

00:45:10,660 --> 00:45:14,500
from from an Operations point of view as

00:45:12,640 --> 00:45:17,410
well yeah that's that's really key

00:45:14,500 --> 00:45:20,530
that's um yeah a good opinion I totally

00:45:17,410 --> 00:45:24,089
agree with that so it's kind of weird

00:45:20,530 --> 00:45:24,089
when someone else's that another room

00:45:25,200 --> 00:45:29,740
any more questions you got any more

00:45:29,320 --> 00:45:33,099
Aaron

00:45:29,740 --> 00:45:34,390
no none in here ok cool well I am you

00:45:33,099 --> 00:45:36,970
have the whole weekend so if you want to

00:45:34,390 --> 00:45:38,230
come grab me and ask me a question I'll

00:45:36,970 --> 00:45:40,210
be at the social tonight then we can

00:45:38,230 --> 00:45:41,680
discuss more about DevOps and some of

00:45:40,210 --> 00:45:44,339
these ideas thanks very much

00:45:41,680 --> 00:45:44,339
Thanks

00:45:47,710 --> 00:45:49,770

YouTube URL: https://www.youtube.com/watch?v=SL9FEDaXutE


