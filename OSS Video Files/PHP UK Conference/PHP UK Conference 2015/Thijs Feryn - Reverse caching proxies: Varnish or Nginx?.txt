Title: Thijs Feryn - Reverse caching proxies: Varnish or Nginx?
Publication date: 2015-04-02
Playlist: PHP UK Conference 2015
Description: 
	In a world full of scalability challenges, a reverse caching proxy has become an essential tool to protect your backend servers. This talk is dedicated to that and compares Varnish to Nginx as the two tools for the job. We'll be talking about setup, configuration, default behaviour, invalidation, monitoring and some advanced tricks such as ESI.

https://speakerdeck.com/thijsferyn/reverse-caching-proxies-varnish-or-nginx-phpuk15
Captions: 
	00:00:05,430 --> 00:00:11,050
I've done this before I've done this

00:00:07,510 --> 00:00:14,049
talk before and I'm comparing two

00:00:11,050 --> 00:00:17,980
technologies farces varnish versus nginx

00:00:14,049 --> 00:00:21,130
and I use the stereotype I used a sort

00:00:17,980 --> 00:00:21,609
of Phi King hat and a sort of Russian

00:00:21,130 --> 00:00:24,730
cap

00:00:21,609 --> 00:00:27,009
meaning that varnish was invented by

00:00:24,730 --> 00:00:29,949
Norwegians or a Danish guy working for a

00:00:27,009 --> 00:00:31,480
Norwegian company and nginx was

00:00:29,949 --> 00:00:33,760
developed by Russian people and I know

00:00:31,480 --> 00:00:36,250
stereotypes are tricky I have people

00:00:33,760 --> 00:00:37,420
saying to me or Vikings you really wear

00:00:36,250 --> 00:00:39,879
those hats or this is not a Viking

00:00:37,420 --> 00:00:41,980
anyway during the course of this talk

00:00:39,879 --> 00:00:44,739
when I refer to varnish you will see

00:00:41,980 --> 00:00:47,110
this on screen when I Weaver refer to

00:00:44,739 --> 00:00:49,809
nginx you will see this on screen so

00:00:47,110 --> 00:00:53,260
we're good on that okay let's do this

00:00:49,809 --> 00:00:56,289
hello everyone my name is pace that's

00:00:53,260 --> 00:00:57,489
how you pronounce this thing days I am a

00:00:56,289 --> 00:01:00,280
Belgian person that you're speaking

00:00:57,489 --> 00:01:02,230
Belgian person I am on Twitter any of

00:01:00,280 --> 00:01:05,050
you on Twitter if you heard of this yes

00:01:02,230 --> 00:01:07,300
I'm on there and if you want to you can

00:01:05,050 --> 00:01:08,939
heckle me asking questions or just have

00:01:07,300 --> 00:01:11,049
lovely interactions with me

00:01:08,939 --> 00:01:13,119
professionally I'm a Technical

00:01:11,049 --> 00:01:15,040
Evangelist it's not the same shirt I

00:01:13,119 --> 00:01:17,259
bought a different one I'm a Technical

00:01:15,040 --> 00:01:19,000
Evangelist at a web hosting company a

00:01:17,259 --> 00:01:21,790
Belgian web hosting company called comm

00:01:19,000 --> 00:01:22,840
Bell yes we do hosting no I'm not going

00:01:21,790 --> 00:01:25,450
to tell you that much about it

00:01:22,840 --> 00:01:28,930
the talk which would explain stuff we do

00:01:25,450 --> 00:01:31,720
in my spare time if any I'm involved

00:01:28,930 --> 00:01:33,009
with a small community called PHP

00:01:31,720 --> 00:01:34,149
Benelux who has ever heard of that

00:01:33,009 --> 00:01:36,659
please raise your hand

00:01:34,149 --> 00:01:38,920
and it's quite good who has attended

00:01:36,659 --> 00:01:42,490
comfort it's very nice still room for

00:01:38,920 --> 00:01:43,930
potential though so the hats I have to

00:01:42,490 --> 00:01:47,979
tell something there there's there's an

00:01:43,930 --> 00:01:50,049
addition to these hats being that we're

00:01:47,979 --> 00:01:52,270
in the UK right now right we have a

00:01:50,049 --> 00:01:53,770
different hat for that and I would like

00:01:52,270 --> 00:01:56,170
to use the opportunity to thank you for

00:01:53,770 --> 00:01:58,090
being in the UK again this is my twelfth

00:01:56,170 --> 00:01:59,619
talk in the UK and I always like being

00:01:58,090 --> 00:02:01,780
here I love the interaction with the

00:01:59,619 --> 00:02:03,460
crowd and I really really really hope we

00:02:01,780 --> 00:02:05,079
can interact in an interesting way if

00:02:03,460 --> 00:02:07,780
you feel the need to interrupt me please

00:02:05,079 --> 00:02:08,670
do so I don't mind and let's get the

00:02:07,780 --> 00:02:11,560
show going

00:02:08,670 --> 00:02:14,110
what's the reverse proxy it's a direct

00:02:11,560 --> 00:02:15,430
question it's not anything else what

00:02:14,110 --> 00:02:16,930
does a reverse proxy I would like to

00:02:15,430 --> 00:02:19,120
hear some definitions

00:02:16,930 --> 00:02:20,530
maybe we can do it like comedy shows

00:02:19,120 --> 00:02:26,019
where the people in the front rows get

00:02:20,530 --> 00:02:33,040
screwed over so knows what our reverse

00:02:26,019 --> 00:02:34,180
proxies people anyone yeah something

00:02:33,040 --> 00:02:36,670
like that and I'm gonna ask for three

00:02:34,180 --> 00:02:39,099
definitions I have an hour so even if we

00:02:36,670 --> 00:02:42,010
don't get through this slide I have an

00:02:39,099 --> 00:02:43,239
out so we have one anyone else I need

00:02:42,010 --> 00:02:45,480
something here right here

00:02:43,239 --> 00:02:49,239
what is a reverse proxy according to you

00:02:45,480 --> 00:02:50,739
know one of you who has never let's do

00:02:49,239 --> 00:02:53,049
this fair and square who has never heard

00:02:50,739 --> 00:02:55,150
or does not know what a reverse proxy is

00:02:53,049 --> 00:02:56,620
raise your hand please yes okay fair

00:02:55,150 --> 00:03:01,540
enough you didn't raise your hand

00:02:56,620 --> 00:03:03,069
did you know be shot there's only a

00:03:01,540 --> 00:03:06,849
couple of thousands of people who watch

00:03:03,069 --> 00:03:09,420
this video after no big a reverse / I

00:03:06,849 --> 00:03:12,340
will give you the answer a reverse proxy

00:03:09,420 --> 00:03:13,840
why would we use such a thing it is a

00:03:12,340 --> 00:03:16,420
machine we put in front of another

00:03:13,840 --> 00:03:19,299
machine to either hide the origin server

00:03:16,420 --> 00:03:21,970
or to do SSL termination to do load

00:03:19,299 --> 00:03:24,099
balancing caching and or compression and

00:03:21,970 --> 00:03:27,129
today will primarily focus on the

00:03:24,099 --> 00:03:29,919
caching bit why do we need caching and I

00:03:27,129 --> 00:03:31,540
can tell you a long story about how the

00:03:29,919 --> 00:03:35,109
internet evolved let's skip that

00:03:31,540 --> 00:03:36,519
nowadays the loads or the delays don't

00:03:35,109 --> 00:03:38,199
really happen at the client end as they

00:03:36,519 --> 00:03:39,940
used to when we had slow connections we

00:03:38,199 --> 00:03:44,010
have broadband now you do have that in

00:03:39,940 --> 00:03:46,629
the UK as well broadband yeah okay cool

00:03:44,010 --> 00:03:48,370
exactly but now because a lot of people

00:03:46,629 --> 00:03:50,440
have broadband and Internet has matured

00:03:48,370 --> 00:03:53,319
everyone uses it the loads at the server

00:03:50,440 --> 00:03:55,599
end and the goal here using a reverse

00:03:53,319 --> 00:03:57,579
caching proxy is to make sure our little

00:03:55,599 --> 00:03:59,199
project here is nicely protected that's

00:03:57,579 --> 00:04:00,840
the goal and when you're still in doubt

00:03:59,199 --> 00:04:04,209
there are people in the front row and

00:04:00,840 --> 00:04:06,400
anywhere in this room I always use this

00:04:04,209 --> 00:04:08,379
the story of Kevin and when you've seen

00:04:06,400 --> 00:04:11,739
this 90s blockbuster movie called The

00:04:08,379 --> 00:04:15,159
Bodyguard who has seen this move okay

00:04:11,739 --> 00:04:17,019
yeah cool so it is a story about Kevin

00:04:15,159 --> 00:04:19,359
Costner being I think his name is Frank

00:04:17,019 --> 00:04:21,220
farmer in the movie protecting the big

00:04:19,359 --> 00:04:23,620
star Whitney Euston by just standing in

00:04:21,220 --> 00:04:25,779
front of her and keeps her a stocky

00:04:23,620 --> 00:04:28,719
fence and that's exactly what varnish

00:04:25,779 --> 00:04:30,240
and nginx do they keep away Stocki

00:04:28,719 --> 00:04:32,699
traffic and make sure

00:04:30,240 --> 00:04:35,940
that Whitney being our web server our

00:04:32,699 --> 00:04:39,330
PHP application behaves as it should be

00:04:35,940 --> 00:04:41,610
behaved so even if you're still in doubt

00:04:39,330 --> 00:04:44,310
even if you don't get it just yet this

00:04:41,610 --> 00:04:46,500
is a sort of schematic overview the

00:04:44,310 --> 00:04:49,740
client being the browser wants to send

00:04:46,500 --> 00:04:51,240
traffic to the web server right but we

00:04:49,740 --> 00:04:53,250
want to make sure there's a mechanism in

00:04:51,240 --> 00:04:54,660
front of it that protects them without

00:04:53,250 --> 00:04:56,729
actually interfering with the actual

00:04:54,660 --> 00:04:58,349
traffic because the client still thinks

00:04:56,729 --> 00:05:00,090
he's talking to a web server which is

00:04:58,349 --> 00:05:00,780
not the case it's a proxy and on the

00:05:00,090 --> 00:05:02,729
other end

00:05:00,780 --> 00:05:04,770
the web server still thinks it's talking

00:05:02,729 --> 00:05:07,680
to a browser whereas it's talking to a

00:05:04,770 --> 00:05:10,020
sort of intermediary system and that's

00:05:07,680 --> 00:05:12,030
what we'll be focusing on an HTTP is the

00:05:10,020 --> 00:05:13,860
protocol we'll be using and I guess most

00:05:12,030 --> 00:05:16,949
of you being developers understand what

00:05:13,860 --> 00:05:20,789
HTTP is and what HTTP does and I'd like

00:05:16,949 --> 00:05:23,340
to tell you a story about browser cache

00:05:20,789 --> 00:05:26,220
who's been on the internet since like

00:05:23,340 --> 00:05:28,139
the late 90s the mid 90s and browser

00:05:26,220 --> 00:05:30,000
cache was a thing because everyone tried

00:05:28,139 --> 00:05:31,740
to flush it because we always wanted the

00:05:30,000 --> 00:05:33,930
most recent updates and why is this

00:05:31,740 --> 00:05:35,400
browser caching old things for me I

00:05:33,930 --> 00:05:38,250
didn't understand I didn't fully

00:05:35,400 --> 00:05:39,690
appreciate it now that I work at a web

00:05:38,250 --> 00:05:43,520
hosting company where we do all these

00:05:39,690 --> 00:05:46,320
sorts of things I started to appreciate

00:05:43,520 --> 00:05:48,270
cache control headers who uses cache

00:05:46,320 --> 00:05:52,889
control headers in his or her project

00:05:48,270 --> 00:05:54,810
nice so you have mature enough projects

00:05:52,889 --> 00:05:56,550
that you control the state of the cache

00:05:54,810 --> 00:05:58,949
yourself which is the probably the way

00:05:56,550 --> 00:06:03,990
to go and you have different syntaxes we

00:05:58,949 --> 00:06:05,930
have max age s max H we have expires we

00:06:03,990 --> 00:06:10,289
have all sorts of things but the problem

00:06:05,930 --> 00:06:12,270
with traditional browser cache is that

00:06:10,289 --> 00:06:13,800
you can flush the cache yourself there's

00:06:12,270 --> 00:06:15,960
multiple versions of the cache so

00:06:13,800 --> 00:06:18,090
putting the cache on the end of the user

00:06:15,960 --> 00:06:20,130
can be somewhat tricky so that's why we

00:06:18,090 --> 00:06:22,759
move it to the proxy level so the proxy

00:06:20,130 --> 00:06:25,469
as you've seen in the schematic overview

00:06:22,759 --> 00:06:27,300
tries to communicate between both ends

00:06:25,469 --> 00:06:29,250
but if it knows the response from the

00:06:27,300 --> 00:06:31,650
web server it will store it locally and

00:06:29,250 --> 00:06:33,330
make sure that all the next requests

00:06:31,650 --> 00:06:35,069
coming in don't really hit your back-end

00:06:33,330 --> 00:06:36,870
they just hit the proxy and the proxy

00:06:35,069 --> 00:06:38,880
gives a cached version how long does it

00:06:36,870 --> 00:06:40,889
cache it based on your cache control

00:06:38,880 --> 00:06:43,919
headers now there are some things that

00:06:40,889 --> 00:06:45,419
aren't really cacheable

00:06:43,919 --> 00:06:48,239
let's ask that as a sort of tricky

00:06:45,419 --> 00:06:55,649
question as well why our post put and

00:06:48,239 --> 00:06:57,179
deletes not cacheable anyone yes every

00:06:55,649 --> 00:07:00,269
time it's gonna be different there's

00:06:57,179 --> 00:07:02,819
this really fancy word idempotency right

00:07:00,269 --> 00:07:04,529
for people who do restful stuff well if

00:07:02,819 --> 00:07:06,269
there's a post to put or delete it

00:07:04,529 --> 00:07:08,879
should be the case that the reverse

00:07:06,269 --> 00:07:11,159
caching proxy does not cache it if

00:07:08,879 --> 00:07:13,259
there's cookies if there's cookies

00:07:11,159 --> 00:07:15,179
involved either cookies being sent from

00:07:13,259 --> 00:07:17,219
the client and/or setcookie instructions

00:07:15,179 --> 00:07:19,619
from the server and usually don't want

00:07:17,219 --> 00:07:21,689
to cache why because a cookie or a set

00:07:19,619 --> 00:07:23,879
cookie implies user specific data so

00:07:21,689 --> 00:07:25,949
that means the page as such is not

00:07:23,879 --> 00:07:28,859
really unique for you or unique and

00:07:25,949 --> 00:07:30,539
global in general but unique for you so

00:07:28,859 --> 00:07:32,129
you might not want to catch that might

00:07:30,539 --> 00:07:34,199
there will be exception you'll see that

00:07:32,129 --> 00:07:35,729
if there's authorization involved so

00:07:34,199 --> 00:07:37,049
that means if you have to login it's

00:07:35,729 --> 00:07:40,139
probably something that is not public

00:07:37,049 --> 00:07:42,089
and as such not cacheable or if the time

00:07:40,139 --> 00:07:44,219
to live so the cache control header or

00:07:42,089 --> 00:07:47,219
other mechanisms say that it shouldn't

00:07:44,219 --> 00:07:49,769
be cached so that meets our lovely

00:07:47,219 --> 00:07:51,779
serial typical contenders today on the

00:07:49,769 --> 00:07:54,029
one hand in the left corner we have

00:07:51,779 --> 00:07:55,439
varnish and the right corner we have our

00:07:54,029 --> 00:07:59,879
dear friends at nginx and let's start

00:07:55,439 --> 00:08:01,709
with varnish varnish cache is a project

00:07:59,879 --> 00:08:03,689
and open source project we'll be talking

00:08:01,709 --> 00:08:06,239
about free and open source software here

00:08:03,689 --> 00:08:08,879
invented by a Danish person called Paul

00:08:06,239 --> 00:08:11,489
Henning camp and he made that project as

00:08:08,879 --> 00:08:14,219
a tailored project for a Norwegian

00:08:11,489 --> 00:08:16,469
newspaper called veterans gun and he did

00:08:14,219 --> 00:08:17,969
it with the consulting company in

00:08:16,469 --> 00:08:20,999
Norwegian consulting company called red

00:08:17,969 --> 00:08:22,259
pill in pro it all evolved they turned

00:08:20,999 --> 00:08:24,389
it into varnish soft which is a

00:08:22,259 --> 00:08:26,219
commercial company offering premium

00:08:24,389 --> 00:08:28,889
support and and those sorts of things

00:08:26,219 --> 00:08:30,389
and it's a reverse proxy only just

00:08:28,889 --> 00:08:33,209
saying you'll see nginx does more than

00:08:30,389 --> 00:08:35,969
just reverse proxying started in 2005

00:08:33,209 --> 00:08:38,339
and you see that it evolved and last

00:08:35,969 --> 00:08:41,789
year they released varnish version for

00:08:38,339 --> 00:08:45,629
anyone using v4 already in this room are

00:08:41,789 --> 00:08:48,149
we liking this yes yeah okay good happy

00:08:45,629 --> 00:08:50,279
to know I like it as well and there have

00:08:48,149 --> 00:08:52,319
been some considerable changes I've done

00:08:50,279 --> 00:08:55,379
this talk a couple of times and this one

00:08:52,319 --> 00:08:57,270
focuses on varnish v4 I know if you see

00:08:55,379 --> 00:08:59,070
a message like Magento or true

00:08:57,270 --> 00:09:02,370
or wordpress everything is still focused

00:08:59,070 --> 00:09:04,620
on v3 which is okay this is v4 and

00:09:02,370 --> 00:09:06,750
you'll see engine eggs and again I could

00:09:04,620 --> 00:09:08,460
have added a Russian flag that kind of

00:09:06,750 --> 00:09:10,590
preferred since we're dealing with

00:09:08,460 --> 00:09:13,980
stereotypes that the Soviet flag and

00:09:10,590 --> 00:09:15,750
their motto is get a sink or get sunk

00:09:13,980 --> 00:09:18,020
which is nice do you see the battleship

00:09:15,750 --> 00:09:21,260
in the back in the back it's pretty cool

00:09:18,020 --> 00:09:24,420
it was invented by a guy called Igor

00:09:21,260 --> 00:09:26,490
Susu Air Force is of' my Russian is a

00:09:24,420 --> 00:09:30,480
bit flaky I guess and it started in 2002

00:09:26,490 --> 00:09:31,770
so pretty old project and if I think I

00:09:30,480 --> 00:09:33,510
should update these numbers I think it's

00:09:31,770 --> 00:09:36,300
more than 15% of the Internet these days

00:09:33,510 --> 00:09:38,670
and it was specifically built as a web

00:09:36,300 --> 00:09:40,770
server and as a proxy reverse caching

00:09:38,670 --> 00:09:43,620
proxy to deal with the CK 10 problem

00:09:40,770 --> 00:09:45,360
what do you do if you have ten thousand

00:09:43,620 --> 00:09:48,120
concurrent connections how do you handle

00:09:45,360 --> 00:09:49,560
this it's event-driven async all the

00:09:48,120 --> 00:09:51,480
fancy buzzwords everything on top of it

00:09:49,560 --> 00:09:53,700
and I checked and the most recent

00:09:51,480 --> 00:09:55,560
version is one seven ten okay

00:09:53,700 --> 00:09:58,230
let's install it let's install this

00:09:55,560 --> 00:10:00,390
software let's do this who's here using

00:09:58,230 --> 00:10:03,660
who's on Linux right who uses Linux for

00:10:00,390 --> 00:10:06,090
their server okay that's good anyone not

00:10:03,660 --> 00:10:07,980
using Linux we're not yet using it so

00:10:06,090 --> 00:10:10,650
cool we have clients who have Windows I

00:10:07,980 --> 00:10:12,480
is based setups using net and we've put

00:10:10,650 --> 00:10:14,310
a varnish on a small Linux box in front

00:10:12,480 --> 00:10:17,070
of it so it's all compatible we still

00:10:14,310 --> 00:10:20,700
speak HTTP who here using Linux is on

00:10:17,070 --> 00:10:23,370
Debian Ubuntu systems anyone on CentOS

00:10:20,700 --> 00:10:24,900
Red Hat so I'm more of a you know boom

00:10:23,370 --> 00:10:27,180
to Ghana guys so my examples will

00:10:24,900 --> 00:10:29,340
primarily be apt-get style installs

00:10:27,180 --> 00:10:31,410
there are plenty of documentation online

00:10:29,340 --> 00:10:33,210
on how to do this with what do you have

00:10:31,410 --> 00:10:35,430
yum and rpm and all those sorts of

00:10:33,210 --> 00:10:38,070
things so here we go this is how you do

00:10:35,430 --> 00:10:40,830
it in Ubuntu how you install varnish of

00:10:38,070 --> 00:10:43,560
course mine the icons and how you do it

00:10:40,830 --> 00:10:47,850
in deviant I've colored or color-coded

00:10:43,560 --> 00:10:50,130
two things the distro wheezy is the

00:10:47,850 --> 00:10:53,370
stable version of Debian Jessie's coming

00:10:50,130 --> 00:10:55,260
up apparently you topic is a Ubuntu one

00:10:53,370 --> 00:11:00,360
and you can choose you can add varnish

00:10:55,260 --> 00:11:01,170
3.0 or 4.0 I chose four when installing

00:11:00,360 --> 00:11:03,450
nginx

00:11:01,170 --> 00:11:05,100
there's also Debian channels there and

00:11:03,450 --> 00:11:07,920
it's also a matter of adding the right

00:11:05,100 --> 00:11:09,450
distro the key signing you can find the

00:11:07,920 --> 00:11:11,180
instructions here it's pretty easy

00:11:09,450 --> 00:11:14,480
register the channels apt

00:11:11,180 --> 00:11:15,040
get install varnish or nginx and you're

00:11:14,480 --> 00:11:17,870
good to go

00:11:15,040 --> 00:11:21,380
configuring it is requires a bit more

00:11:17,870 --> 00:11:23,600
detail if you use Ubuntu and Libyan

00:11:21,380 --> 00:11:26,810
systems as I do there's a file called

00:11:23,600 --> 00:11:28,430
etc' default varnish and this file

00:11:26,810 --> 00:11:30,500
contains all the startup options you

00:11:28,430 --> 00:11:33,380
need once you start varnish it will

00:11:30,500 --> 00:11:34,850
behave in such a way right here I

00:11:33,380 --> 00:11:36,710
mentioned that I bind to all IP

00:11:34,850 --> 00:11:38,540
addresses you see an empty empty spot

00:11:36,710 --> 00:11:40,100
right here and they listen on port 80

00:11:38,540 --> 00:11:42,680
which makes sense of course right that

00:11:40,100 --> 00:11:44,840
is the standard HTTP port there is an

00:11:42,680 --> 00:11:48,080
admin interface here an admin interface

00:11:44,840 --> 00:11:52,040
over telnet yes not as a sage telnet and

00:11:48,080 --> 00:11:53,570
encrypted talent on port 60 82 i've bind

00:11:52,040 --> 00:11:55,160
it to my local host but you can open it

00:11:53,570 --> 00:11:57,410
up as long as you firewall it in the

00:11:55,160 --> 00:12:00,110
correct way then there's this term

00:11:57,410 --> 00:12:02,300
called VCL and you see the extension

00:12:00,110 --> 00:12:04,100
here it stands for varnish configuration

00:12:02,300 --> 00:12:05,930
language and it's actually sort of

00:12:04,100 --> 00:12:09,020
domain-specific language that you can

00:12:05,930 --> 00:12:11,420
use to do caching policies and there's a

00:12:09,020 --> 00:12:13,130
file called EDC varnish default VCL and

00:12:11,420 --> 00:12:15,740
that's where all your policies are if

00:12:13,130 --> 00:12:18,560
you authenticate with the admin

00:12:15,740 --> 00:12:20,300
interface there is a secret file there's

00:12:18,560 --> 00:12:22,400
no user name password authentication it

00:12:20,300 --> 00:12:24,020
does a sort of a challenge where you use

00:12:22,400 --> 00:12:26,840
your when you get a sort of challenge

00:12:24,020 --> 00:12:28,610
and you use your secret key and you hash

00:12:26,840 --> 00:12:30,440
it in a specific way and you get access

00:12:28,610 --> 00:12:31,550
and the final one here and there's

00:12:30,440 --> 00:12:33,770
plenty more but these are just the

00:12:31,550 --> 00:12:35,180
default ones is which storage are we

00:12:33,770 --> 00:12:37,160
using malloc of course which means

00:12:35,180 --> 00:12:40,520
memory will store it in memory and we've

00:12:37,160 --> 00:12:41,810
assigned 256 megabytes in reality and

00:12:40,520 --> 00:12:44,780
production service you might want to

00:12:41,810 --> 00:12:47,660
increase that number when you're in the

00:12:44,780 --> 00:12:49,850
VCL file located in that location the

00:12:47,660 --> 00:12:51,800
minimum thing you need is just to define

00:12:49,850 --> 00:12:53,750
a back-end where is that webserver of

00:12:51,800 --> 00:12:55,820
ours located in this case it's on the

00:12:53,750 --> 00:12:58,930
same machine I used local hosts the

00:12:55,820 --> 00:13:01,910
loopback interface on port 8080 which is

00:12:58,930 --> 00:13:05,960
somewhat this described as the

00:13:01,910 --> 00:13:09,050
alternative HTTP port for nginx you see

00:13:05,960 --> 00:13:10,940
different icon for nginx it's like

00:13:09,050 --> 00:13:13,850
defining virtual hosts who's familiar

00:13:10,940 --> 00:13:16,430
with nginx who is not that familiar with

00:13:13,850 --> 00:13:17,780
nginx and for those keep your hands in

00:13:16,430 --> 00:13:19,580
the air for those who are not familiar

00:13:17,780 --> 00:13:22,400
with nginx are you familiar with Apache

00:13:19,580 --> 00:13:24,529
yes okay well you have virtual hosts in

00:13:22,400 --> 00:13:27,170
Apache as well this is quite similar

00:13:24,529 --> 00:13:29,149
it has the curly braces standard as you

00:13:27,170 --> 00:13:32,209
can see you define a server name a

00:13:29,149 --> 00:13:33,949
listening port and what we do here and

00:13:32,209 --> 00:13:36,170
this is kind of interesting this is

00:13:33,949 --> 00:13:37,819
where we refer to our back end we do use

00:13:36,170 --> 00:13:40,279
the proxy module which is built-in in

00:13:37,819 --> 00:13:42,680
nginx and we say pass it to the local

00:13:40,279 --> 00:13:46,160
host using the HTTP protocol on port

00:13:42,680 --> 00:13:49,279
8080 quite the same thing and when you

00:13:46,160 --> 00:13:51,110
do so store it in a named zone called

00:13:49,279 --> 00:13:52,699
proxy cache and something that is

00:13:51,110 --> 00:13:56,329
defined elsewhere and I'll show you and

00:13:52,699 --> 00:13:58,249
the caching key you use is the scheme

00:13:56,329 --> 00:14:01,009
these are all variables that is HTTP or

00:13:58,249 --> 00:14:04,069
HTTPS the host name the request URI

00:14:01,009 --> 00:14:06,579
if you cache Finglas and you get a 200

00:14:04,069 --> 00:14:08,420
or a trio to cache it for an hour and

00:14:06,579 --> 00:14:11,269
that's how it works

00:14:08,420 --> 00:14:14,089
in the main nginx configuration file you

00:14:11,269 --> 00:14:15,860
define that cache so you say proxy cache

00:14:14,089 --> 00:14:17,389
pop I will be storing this on the

00:14:15,860 --> 00:14:19,399
temporary file system which might be in

00:14:17,389 --> 00:14:20,839
RAM as well and I'll have two levels of

00:14:19,399 --> 00:14:22,999
hashing because it will be stored on

00:14:20,839 --> 00:14:26,600
disk but it will be optimized using the

00:14:22,999 --> 00:14:28,519
the operating system memory it's two

00:14:26,600 --> 00:14:30,559
levels so you'll have a directory a hash

00:14:28,519 --> 00:14:32,569
directory within and then another hash

00:14:30,559 --> 00:14:35,240
directory in that and we call it proxy

00:14:32,569 --> 00:14:36,800
cache it's ten megabytes big and if data

00:14:35,240 --> 00:14:38,930
is inactive we'll remove it from disk

00:14:36,800 --> 00:14:41,420
within five minutes so if within five

00:14:38,930 --> 00:14:43,459
minutes we don't use this information we

00:14:41,420 --> 00:14:44,959
remove it and it could be a maximum size

00:14:43,459 --> 00:14:47,389
of a gigabyte so that's how these things

00:14:44,959 --> 00:14:48,860
work if you're using this and you're

00:14:47,389 --> 00:14:50,329
still using Apache you need to change

00:14:48,860 --> 00:14:52,850
your Apache as well if it's hosted on

00:14:50,329 --> 00:14:54,500
the same machine that being said so if

00:14:52,850 --> 00:14:56,750
you're using Debian and Ubuntu style

00:14:54,500 --> 00:14:59,540
systems go to ports kampf change the

00:14:56,750 --> 00:15:02,470
ports and if you bind your ports to your

00:14:59,540 --> 00:15:05,569
virtual host please do those as well

00:15:02,470 --> 00:15:07,879
all right PHP it's what we do right I

00:15:05,569 --> 00:15:10,189
love these elephant kind of things but

00:15:07,879 --> 00:15:12,319
I'm it's really hard to understand why

00:15:10,189 --> 00:15:14,089
we use an elephant because if you look

00:15:12,319 --> 00:15:17,750
at the traits of an elephant and PHP are

00:15:14,089 --> 00:15:19,459
these similar are they think about it so

00:15:17,750 --> 00:15:21,499
if we use PHP because I'm gonna give you

00:15:19,459 --> 00:15:24,290
a couple of examples on how to use PHP

00:15:21,499 --> 00:15:26,149
we have a patchy the people still use

00:15:24,290 --> 00:15:28,370
Apache and how do we connect PHP with

00:15:26,149 --> 00:15:31,490
Apache who use our let's do a show of

00:15:28,370 --> 00:15:33,529
hands who uses mod p HP so I sometimes

00:15:31,490 --> 00:15:38,000
use it more PHP is actually embedding

00:15:33,529 --> 00:15:41,269
the PHP library as an Apache module

00:15:38,000 --> 00:15:44,870
so the PHP space is the Apache space who

00:15:41,269 --> 00:15:46,910
uses old-school fast CGI we still have

00:15:44,870 --> 00:15:48,560
lots of that at the office it's not that

00:15:46,910 --> 00:15:50,870
flexible it's not that perform it's very

00:15:48,560 --> 00:15:53,509
flexible I'm sorry very flexible but it

00:15:50,870 --> 00:15:56,060
doesn't perform that well and if you use

00:15:53,509 --> 00:15:58,069
the latest version of Apache 22.4

00:15:56,060 --> 00:15:59,990
there's a module called multi proxy F

00:15:58,069 --> 00:16:02,600
CGI and that allows you to do remote

00:15:59,990 --> 00:16:04,899
file CGI connections to let's say PHP

00:16:02,600 --> 00:16:07,339
fpm who's using PHP F p.m. in here oh

00:16:04,899 --> 00:16:09,800
that's nice I asked these questions

00:16:07,339 --> 00:16:12,350
every now and then and I see that there

00:16:09,800 --> 00:16:15,110
is a an increase in popularity regarding

00:16:12,350 --> 00:16:17,839
PHP F p.m. and you can store it behind

00:16:15,110 --> 00:16:20,089
either varnish or an engine X if you use

00:16:17,839 --> 00:16:23,899
nginx as the web server instead of

00:16:20,089 --> 00:16:26,990
Apache you can do a shortcut it does

00:16:23,899 --> 00:16:29,660
native file CGI proxy based on F p.m.

00:16:26,990 --> 00:16:31,939
and it is cacheable these results are

00:16:29,660 --> 00:16:34,910
cacheable remember the proxy pass syntax

00:16:31,939 --> 00:16:37,100
I showed you you can also do fast CGI

00:16:34,910 --> 00:16:39,470
caching so that means that you've both

00:16:37,100 --> 00:16:41,420
use nginx at the same time as a web

00:16:39,470 --> 00:16:43,730
server and as I reverse caching proxy

00:16:41,420 --> 00:16:46,160
what does it cache not the HTTP traffic

00:16:43,730 --> 00:16:49,490
because there's no HTTP traffic between

00:16:46,160 --> 00:16:52,220
the fpm note which listens on port 9000

00:16:49,490 --> 00:16:54,500
and the nginx know it carsick caches the

00:16:52,220 --> 00:16:56,509
fast cgi traffic which is slightly

00:16:54,500 --> 00:16:58,579
different but has very similar results

00:16:56,509 --> 00:17:01,160
it saves you note so you don't need to

00:16:58,579 --> 00:17:05,089
put varnish in front of nginx in front

00:17:01,160 --> 00:17:07,039
of PHP fpm you just use nginx PHP fpm

00:17:05,089 --> 00:17:09,289
you define your key as we did in a

00:17:07,039 --> 00:17:11,480
previous example we use the cache

00:17:09,289 --> 00:17:14,000
validity to define that it needs to be

00:17:11,480 --> 00:17:16,280
cached for an hour and we use a named

00:17:14,000 --> 00:17:18,140
zone that we can define so that's fairly

00:17:16,280 --> 00:17:20,480
interesting and if you look at this

00:17:18,140 --> 00:17:22,699
scheme you see that the client directly

00:17:20,480 --> 00:17:26,539
connects to nginx and nginx caches

00:17:22,699 --> 00:17:28,940
results sent to PHP FPN varnish is

00:17:26,539 --> 00:17:30,770
working on this feature but they're

00:17:28,940 --> 00:17:33,799
working on this feature for years I

00:17:30,770 --> 00:17:36,770
every year I go to this URL and see if

00:17:33,799 --> 00:17:38,240
it's evolved it has not evolved and

00:17:36,770 --> 00:17:41,600
nowadays people ask the question what

00:17:38,240 --> 00:17:45,140
about hh3m anyone interested in how to

00:17:41,600 --> 00:17:47,419
connect hh3m yeah yeah well you install

00:17:45,140 --> 00:17:49,669
it they have packages you can find it on

00:17:47,419 --> 00:17:51,440
the github page by fickas github.com

00:17:49,669 --> 00:17:53,450
slash facebook /

00:17:51,440 --> 00:17:55,490
hvm if I'm not mistaken and you can

00:17:53,450 --> 00:17:57,740
easily install it it comes with a server

00:17:55,490 --> 00:18:00,799
configuration file which looks like this

00:17:57,740 --> 00:18:03,620
by default so they use port 9000 as well

00:18:00,799 --> 00:18:05,929
and they communicate over fast CGI what

00:18:03,620 --> 00:18:08,389
you do is you install it you stop your

00:18:05,929 --> 00:18:10,460
PHP F p.m. you start your HH p.m. and

00:18:08,389 --> 00:18:13,279
you're good to go so essentially it's a

00:18:10,460 --> 00:18:16,820
drop-in replacement and supposedly much

00:18:13,279 --> 00:18:19,399
faster and the configuration file here

00:18:16,820 --> 00:18:22,879
in nginx is exactly the same it's a

00:18:19,399 --> 00:18:26,389
drop-in replacement but in previous

00:18:22,879 --> 00:18:28,220
releases so prior to version 3 they had

00:18:26,389 --> 00:18:31,159
the built-in web server using lip events

00:18:28,220 --> 00:18:34,370
all bells and whistles let's try to do

00:18:31,159 --> 00:18:35,659
an example and I read this I just marked

00:18:34,370 --> 00:18:39,559
the stuff that's interesting in yellow

00:18:35,659 --> 00:18:41,000
as of 3.00 we're going to ship a we were

00:18:39,559 --> 00:18:46,610
not going to ship the HTTP server

00:18:41,000 --> 00:18:48,409
anymore it's unmaintained and managing

00:18:46,610 --> 00:18:51,799
web server is not a core competency

00:18:48,409 --> 00:18:52,429
competency of the open source group that

00:18:51,799 --> 00:18:54,889
manages it

00:18:52,429 --> 00:18:58,639
we built fast cgi support just for this

00:18:54,889 --> 00:19:00,070
purpose so if you're using HD HPV hh3m

00:18:58,639 --> 00:19:03,080
we're planning to use it

00:19:00,070 --> 00:19:04,309
you saw CGI and then the next question

00:19:03,080 --> 00:19:06,049
what about nodejs

00:19:04,309 --> 00:19:08,990
since we're talking about hipster

00:19:06,049 --> 00:19:11,659
technology right what about nodejs how

00:19:08,990 --> 00:19:14,179
can you connect those you can stall it

00:19:11,659 --> 00:19:15,950
this way is how you install it and this

00:19:14,179 --> 00:19:18,440
is our little script what it does is you

00:19:15,950 --> 00:19:23,779
send the text and it echoes the result

00:19:18,440 --> 00:19:24,679
back and in nginx we can define a sort

00:19:23,779 --> 00:19:26,779
of mapping strategy

00:19:24,679 --> 00:19:31,039
it's just translating the variable so

00:19:26,779 --> 00:19:33,019
based on the HTTP upgrade variable it

00:19:31,039 --> 00:19:34,909
will give you a default value for this

00:19:33,019 --> 00:19:37,100
one being upgrades and if there's no

00:19:34,909 --> 00:19:39,559
value you just call it close so what it

00:19:37,100 --> 00:19:41,899
does here is you set a specific header

00:19:39,559 --> 00:19:43,039
to upgrade the connection and upgrading

00:19:41,899 --> 00:19:44,809
the connection allows you to do

00:19:43,039 --> 00:19:47,269
WebSockets because that's what a lot of

00:19:44,809 --> 00:19:50,750
people still do using nodejs so in

00:19:47,269 --> 00:19:54,320
essence you can put nginx in front of a

00:19:50,750 --> 00:19:55,669
large amount of of instances here it

00:19:54,320 --> 00:19:57,259
shouldn't be one instance you can define

00:19:55,669 --> 00:19:59,750
an upstream sort of load balancing

00:19:57,259 --> 00:20:00,799
strategy and have multiple nodejs

00:19:59,750 --> 00:20:03,590
instances why would that be useful

00:20:00,799 --> 00:20:04,820
because from what I've heard it's not a

00:20:03,590 --> 00:20:06,889
rumor it's just how

00:20:04,820 --> 00:20:08,960
I was informed no G has a single credit

00:20:06,889 --> 00:20:10,279
and if you have a multi-core machine you

00:20:08,960 --> 00:20:11,659
can't really use the power of the

00:20:10,279 --> 00:20:13,909
multiple course so what you can do is

00:20:11,659 --> 00:20:14,450
spawn perc or you have an instance of

00:20:13,909 --> 00:20:16,789
nodejs

00:20:14,450 --> 00:20:18,320
and just let nginx handle it it won't be

00:20:16,789 --> 00:20:19,730
cached and that's important we're

00:20:18,320 --> 00:20:20,980
talking about reverse proxies and

00:20:19,730 --> 00:20:24,110
caching as a part of this presentation

00:20:20,980 --> 00:20:26,269
but this one won't cash because we're

00:20:24,110 --> 00:20:27,889
talking about real-time traffic that's

00:20:26,269 --> 00:20:30,710
the goal of WebSockets having this sort

00:20:27,889 --> 00:20:33,049
of real-time communication and we're not

00:20:30,710 --> 00:20:34,250
gonna catch this varnish can do it as

00:20:33,049 --> 00:20:37,039
well

00:20:34,250 --> 00:20:40,429
this is VCL code so this is like the it

00:20:37,039 --> 00:20:43,509
has hooks where you can hook into so vcl

00:20:40,429 --> 00:20:46,039
reg V means when we receive the request

00:20:43,509 --> 00:20:48,169
we're gonna check it's a little bit

00:20:46,039 --> 00:20:49,879
object-oriented in the requests in the

00:20:48,169 --> 00:20:52,340
HTTP header is there an upgrade header

00:20:49,879 --> 00:20:54,919
if that upgrade header tilde which means

00:20:52,340 --> 00:20:57,259
regular expression looks like WebSocket

00:20:54,919 --> 00:20:58,460
then we're gonna return pipe which means

00:20:57,259 --> 00:21:00,289
we're not gonna cash it we're going to

00:20:58,460 --> 00:21:02,419
send it over directly to the web server

00:21:00,289 --> 00:21:04,519
and when we pipe it we upgrade the

00:21:02,419 --> 00:21:07,190
connection so we use the HTTP syntax to

00:21:04,519 --> 00:21:10,039
upgrade this so this is essentially the

00:21:07,190 --> 00:21:12,529
way how you can proxy WebSockets in no

00:21:10,039 --> 00:21:16,870
GS and there's a client in there as well

00:21:12,529 --> 00:21:19,070
and you send tests and it answers back I

00:21:16,870 --> 00:21:20,450
mentioned in the very beginning of this

00:21:19,070 --> 00:21:22,009
presentation that caching is a feature

00:21:20,450 --> 00:21:23,600
but you can do compression you can do

00:21:22,009 --> 00:21:25,370
load balancing you can do as a cell

00:21:23,600 --> 00:21:28,100
termination so all these features are

00:21:25,370 --> 00:21:30,769
possible and look at your own use case

00:21:28,100 --> 00:21:33,710
and see where this comes in handy out of

00:21:30,769 --> 00:21:34,970
the box so now we've we've skipped in or

00:21:33,710 --> 00:21:36,799
that we've done the intro we've

00:21:34,970 --> 00:21:38,360
discussed quite a bit I'm going to talk

00:21:36,799 --> 00:21:40,909
about the rules the out-of-the-box

00:21:38,360 --> 00:21:43,580
behavior let's talk about varnish first

00:21:40,909 --> 00:21:46,250
what will varnish noncash post delete

00:21:43,580 --> 00:21:48,980
put and methods at search what will it

00:21:46,250 --> 00:21:51,139
cache in terms of methods get and head

00:21:48,980 --> 00:21:53,659
those it will cache and that makes sense

00:21:51,139 --> 00:21:55,850
if it sees cookies or authentication

00:21:53,659 --> 00:21:58,190
headers coming in from the browser it

00:21:55,850 --> 00:22:00,080
will not cache if it sees setcookie

00:21:58,190 --> 00:22:01,519
headers being sent from the backend it

00:22:00,080 --> 00:22:03,919
will not cache by default you can

00:22:01,519 --> 00:22:07,549
override this of course starting a

00:22:03,919 --> 00:22:11,419
varnish v4 if it sees the no cash no

00:22:07,549 --> 00:22:12,679
store or private dialect of the cache

00:22:11,419 --> 00:22:15,470
control headers it won't cash either

00:22:12,679 --> 00:22:17,370
prior to that it would just stop caching

00:22:15,470 --> 00:22:18,990
if it sees a TTL it

00:22:17,370 --> 00:22:22,800
zero or lower than zero and it would

00:22:18,990 --> 00:22:25,710
ignore these kinds of terms as a for it

00:22:22,800 --> 00:22:30,540
no longer does and it respects it nginx

00:22:25,710 --> 00:22:32,370
wall not cash post delete and put and it

00:22:30,540 --> 00:22:35,730
will respect a no cash no store private

00:22:32,370 --> 00:22:37,590
syntax it won't cash the setcookie head

00:22:35,730 --> 00:22:39,660
explode at will cache cookies so if you

00:22:37,590 --> 00:22:43,140
have an incoming cookie nginx will cash

00:22:39,660 --> 00:22:44,940
it so mind that if the TTL is lower than

00:22:43,140 --> 00:22:48,270
zero or equals zero it won't cash it

00:22:44,940 --> 00:22:51,120
either and is there as a custom X Excel

00:22:48,270 --> 00:22:52,950
expires header set to zero it won't cash

00:22:51,120 --> 00:22:54,780
either and we've been talking about

00:22:52,950 --> 00:22:56,940
cookies for a while now so let's

00:22:54,780 --> 00:22:58,890
continue that conversation and for those

00:22:56,940 --> 00:23:00,150
who aren't aware cookies come into

00:22:58,890 --> 00:23:03,270
shapes and sorts

00:23:00,150 --> 00:23:05,970
we have browser-based cookies so if you

00:23:03,270 --> 00:23:08,790
haven't been to a website you won't have

00:23:05,970 --> 00:23:10,410
a cookie buy them and initially when the

00:23:08,790 --> 00:23:12,000
system the server wants you to set a

00:23:10,410 --> 00:23:14,730
cookie it will initiate the set-cookie

00:23:12,000 --> 00:23:16,200
header your browser will receive that

00:23:14,730 --> 00:23:17,910
cookie will store it in the cookie store

00:23:16,200 --> 00:23:20,910
of your browser and for every next

00:23:17,910 --> 00:23:23,070
request the cookie will be sent if we

00:23:20,910 --> 00:23:24,960
want to bypass or make sure that nginx

00:23:23,070 --> 00:23:27,420
respects this as well so not caching the

00:23:24,960 --> 00:23:29,400
cookies this is a trick you set a

00:23:27,420 --> 00:23:31,470
variable a bypass variable to zero and

00:23:29,400 --> 00:23:34,440
if there's an HTTP cookie so if there's

00:23:31,470 --> 00:23:36,900
an any random cookie set to bypass to

00:23:34,440 --> 00:23:38,850
one and the cache bypass or no cache

00:23:36,900 --> 00:23:41,160
will make sure this does not get cached

00:23:38,850 --> 00:23:43,740
the difference between bypass is that it

00:23:41,160 --> 00:23:45,270
will not use items stored in the cache

00:23:43,740 --> 00:23:47,880
it will go to the backend and the

00:23:45,270 --> 00:23:50,490
results could be cached whereas no cache

00:23:47,880 --> 00:23:52,710
instructs it not only to skip and bypass

00:23:50,490 --> 00:23:55,910
the cache but not store the results

00:23:52,710 --> 00:23:58,140
being returned monitoring and logging

00:23:55,910 --> 00:24:01,800
let's get into that how are we doing on

00:23:58,140 --> 00:24:03,390
time still get my counters off so no

00:24:01,800 --> 00:24:07,140
queue no clue how long I'm in this

00:24:03,390 --> 00:24:09,090
monitoring logging good old nginx has

00:24:07,140 --> 00:24:11,370
what we know as an access login an error

00:24:09,090 --> 00:24:14,220
look not that much tooling pretty basic

00:24:11,370 --> 00:24:16,080
and it has a default log format as you

00:24:14,220 --> 00:24:18,360
can see here remote address remote user

00:24:16,080 --> 00:24:20,460
you know yadda yadda but you can extend

00:24:18,360 --> 00:24:22,679
it and that is nice there's a variable

00:24:20,460 --> 00:24:24,450
called up screen Kasia status and you

00:24:22,679 --> 00:24:27,630
can add this to your logs and you can

00:24:24,450 --> 00:24:29,880
check out your logs too you can also set

00:24:27,630 --> 00:24:31,190
that your logs get flushed to disk every

00:24:29,880 --> 00:24:33,380
X amount of minutes because

00:24:31,190 --> 00:24:36,080
you use a rather large production system

00:24:33,380 --> 00:24:38,180
and store the disk your disk pool you

00:24:36,080 --> 00:24:39,770
discover run out of space and you'll be

00:24:38,180 --> 00:24:41,600
spending lots of i/o and maybe other

00:24:39,770 --> 00:24:44,450
resources on just doing the logging part

00:24:41,600 --> 00:24:46,280
besides the actual caching part though

00:24:44,450 --> 00:24:48,170
you can say flush it to disk every five

00:24:46,280 --> 00:24:50,450
minutes and store it in gzip format and

00:24:48,170 --> 00:24:53,680
it's possible and this upstream cache

00:24:50,450 --> 00:24:57,160
status variable can return any of these

00:24:53,680 --> 00:24:59,600
it's very verbose ear it could be miss

00:24:57,160 --> 00:25:02,180
where it means it wasn't stored in cache

00:24:59,600 --> 00:25:05,120
or bypass that you actually bypass the

00:25:02,180 --> 00:25:07,060
cache expired is yes it is in cache but

00:25:05,120 --> 00:25:10,310
it's no longer valid it's stale or

00:25:07,060 --> 00:25:12,260
updating means yes it was stale and I am

00:25:10,310 --> 00:25:14,390
currently connecting to the back-end to

00:25:12,260 --> 00:25:21,470
fetch that data so please wait while I'm

00:25:14,390 --> 00:25:23,360
updating stale if you use the use stale

00:25:21,470 --> 00:25:25,610
variable in or the configuration

00:25:23,360 --> 00:25:28,010
parameter within the config it will

00:25:25,610 --> 00:25:30,980
return this revalidate it means it does

00:25:28,010 --> 00:25:33,560
a sort of if non-match attack style

00:25:30,980 --> 00:25:36,560
check so you can see that or it could be

00:25:33,560 --> 00:25:38,600
a hit so any of those that being said

00:25:36,560 --> 00:25:40,370
just experimented with yours yourself

00:25:38,600 --> 00:25:41,270
you'll find these in the logs and I'll

00:25:40,370 --> 00:25:42,860
show you a trick at the end the

00:25:41,270 --> 00:25:44,960
presentation where you can actually have

00:25:42,860 --> 00:25:47,240
this in your response headers so you can

00:25:44,960 --> 00:25:48,830
use a tool like Firebug or any other

00:25:47,240 --> 00:25:51,670
tool you have in your browser to see the

00:25:48,830 --> 00:25:55,130
responses you can then validate this

00:25:51,670 --> 00:25:56,480
varnish has more tools and this is the

00:25:55,130 --> 00:25:58,280
goal of this presentation comparing the

00:25:56,480 --> 00:26:01,220
both tools and doing the pros and cons a

00:25:58,280 --> 00:26:02,990
definite pro a varnish is that they have

00:26:01,220 --> 00:26:05,510
lots of tooling that will give you great

00:26:02,990 --> 00:26:07,850
insight I'll start with varnish that it

00:26:05,510 --> 00:26:10,100
is a system it is a binary if you run it

00:26:07,850 --> 00:26:12,230
it continuously upgrades updates and

00:26:10,100 --> 00:26:15,590
shows you statistics and these are some

00:26:12,230 --> 00:26:16,940
of the statistics averages that you can

00:26:15,590 --> 00:26:19,160
see here average over the last ten

00:26:16,940 --> 00:26:21,980
seconds hundred seconds and thousand is

00:26:19,160 --> 00:26:23,600
the amount of time it took running in

00:26:21,980 --> 00:26:25,220
and you can see that you can see the

00:26:23,600 --> 00:26:25,820
number of hits the misses back-end

00:26:25,220 --> 00:26:28,100
connections

00:26:25,820 --> 00:26:30,070
reusing of existing connections there's

00:26:28,100 --> 00:26:32,270
a lot of stuff in there that you can use

00:26:30,070 --> 00:26:33,950
number of expired objects number of

00:26:32,270 --> 00:26:36,140
backends number of objects in your cache

00:26:33,950 --> 00:26:38,870
so if you care about the state of your

00:26:36,140 --> 00:26:40,310
varnish cache run this there are options

00:26:38,870 --> 00:26:42,110
that you can pass to it to only see

00:26:40,310 --> 00:26:45,110
certain amounts of pieces of information

00:26:42,110 --> 00:26:47,150
or even like vague

00:26:45,110 --> 00:26:48,920
configuration parameters that are not in

00:26:47,150 --> 00:26:51,110
here because you can only fit that much

00:26:48,920 --> 00:26:52,310
on screen and there's more in varnish

00:26:51,110 --> 00:26:54,290
and you can fit on this so you can

00:26:52,310 --> 00:26:56,780
fiddle with the parameters and display

00:26:54,290 --> 00:26:59,930
other settings as well I'm particularly

00:26:56,780 --> 00:27:02,180
fond of foreigners log I love this tool

00:26:59,930 --> 00:27:04,070
because it's an in-memory activity log

00:27:02,180 --> 00:27:05,720
so it's not stored on disk it just takes

00:27:04,070 --> 00:27:08,330
a snapshot of what passes through the

00:27:05,720 --> 00:27:10,490
cache and you can look into it and it's

00:27:08,330 --> 00:27:11,930
very very verbose it comes with a price

00:27:10,490 --> 00:27:13,340
to you if you run the varnish log

00:27:11,930 --> 00:27:15,740
without any filtering parameters on a

00:27:13,340 --> 00:27:17,060
very busy production system you won't be

00:27:15,740 --> 00:27:19,610
able to read this it will just flow by

00:27:17,060 --> 00:27:22,130
but it's very very very descriptive as

00:27:19,610 --> 00:27:25,730
you can see we started a request and it

00:27:22,130 --> 00:27:28,190
comes in and the request was from IP

00:27:25,730 --> 00:27:30,350
1010 10.1 this is a far a vagrant box on

00:27:28,190 --> 00:27:33,350
which I tested this and I do a get

00:27:30,350 --> 00:27:37,340
requests on the slash so on the home

00:27:33,350 --> 00:27:40,220
page and the host name I use the virtual

00:27:37,340 --> 00:27:42,350
host is farness v4 death I see some user

00:27:40,220 --> 00:27:43,940
agent information so this is just

00:27:42,350 --> 00:27:47,120
incoming headers that you can analyze

00:27:43,940 --> 00:27:48,590
and then all of the sudden you see VC

00:27:47,120 --> 00:27:50,150
I'll call VC I'll return and this is

00:27:48,590 --> 00:27:52,220
where it gets interesting this is where

00:27:50,150 --> 00:27:53,930
you can see what varnish is actually

00:27:52,220 --> 00:27:55,700
doing and this will always happen you

00:27:53,930 --> 00:27:57,320
will receive the request the browser

00:27:55,700 --> 00:27:59,960
will send you the request to the proxy

00:27:57,320 --> 00:28:02,270
and then I will make decisions and one

00:27:59,960 --> 00:28:04,030
of the decisions is I will hash this

00:28:02,270 --> 00:28:06,260
information and look it up in the cache

00:28:04,030 --> 00:28:08,300
that means if there's a cookie or an

00:28:06,260 --> 00:28:10,130
authorization header it won't do that

00:28:08,300 --> 00:28:13,640
will just pass to the backend but this

00:28:10,130 --> 00:28:16,940
means it is cacheable in theory not in

00:28:13,640 --> 00:28:18,680
practice and will continue and we get

00:28:16,940 --> 00:28:20,000
into the hashing part where we compose

00:28:18,680 --> 00:28:22,190
the hash and has just composed of the

00:28:20,000 --> 00:28:24,620
URL the host name or other parameter

00:28:22,190 --> 00:28:26,540
parameters it you pass to it and it

00:28:24,620 --> 00:28:28,300
actually found it in cut and cache it's

00:28:26,540 --> 00:28:30,650
looking it up and it says it's a hit

00:28:28,300 --> 00:28:32,480
what we're serving here comes from

00:28:30,650 --> 00:28:34,760
memory which is good so no back-end

00:28:32,480 --> 00:28:37,910
connection required and in the end we'll

00:28:34,760 --> 00:28:42,320
deliver it back so this is I think

00:28:37,910 --> 00:28:44,090
descriptive enough right and from the

00:28:42,320 --> 00:28:45,320
client part you can send these headers

00:28:44,090 --> 00:28:47,120
these are rest patters these are

00:28:45,320 --> 00:28:49,940
response headers that you send back just

00:28:47,120 --> 00:28:52,160
a minor remark on these tags these are

00:28:49,940 --> 00:28:55,730
tags that can you filter on so req means

00:28:52,160 --> 00:28:58,040
the requests incoming VCL is everything

00:28:55,730 --> 00:28:58,340
internal and then you have RESP is the

00:28:58,040 --> 00:29:01,009
wrist

00:28:58,340 --> 00:29:03,529
being sent back if you do back-end

00:29:01,009 --> 00:29:07,460
connections you'll see back-end requests

00:29:03,529 --> 00:29:10,159
back-end header and so on and so on as a

00:29:07,460 --> 00:29:12,590
varnish v4 they drastically optimized

00:29:10,159 --> 00:29:15,639
this binary it used to be quite crappy I

00:29:12,590 --> 00:29:17,599
have to admit that even I can say this

00:29:15,639 --> 00:29:19,609
face to the camera

00:29:17,599 --> 00:29:23,029
dear varnish people I didn't like your

00:29:19,609 --> 00:29:25,849
foreigners look to in varnish v3 because

00:29:23,029 --> 00:29:28,309
it didn't allow you to filter on tags so

00:29:25,849 --> 00:29:30,679
only display certain tags and filter on

00:29:28,309 --> 00:29:34,159
values you could pick either but not

00:29:30,679 --> 00:29:37,009
both which sucks this is an kudos

00:29:34,159 --> 00:29:39,019
varnish V 14 this is a very good

00:29:37,009 --> 00:29:40,999
optimisation and for that reason alone I

00:29:39,019 --> 00:29:42,679
would advise you to upgrade because it

00:29:40,999 --> 00:29:44,570
gives you insight they've added a small

00:29:42,679 --> 00:29:47,509
query language called the V as L

00:29:44,570 --> 00:29:48,589
language and it says I only want to see

00:29:47,509 --> 00:29:50,869
them I don't want to see all the

00:29:48,589 --> 00:29:54,049
information I only want to see the URLs

00:29:50,869 --> 00:29:56,419
of which the internal status the vcl

00:29:54,049 --> 00:29:58,460
calls that we use is hid so we're gonna

00:29:56,419 --> 00:30:00,049
see all the hits we can do the same

00:29:58,460 --> 00:30:01,719
thing and want to see all the misses so

00:30:00,049 --> 00:30:05,299
everything that goes to the backend or

00:30:01,719 --> 00:30:06,739
you want to see the URLs that require

00:30:05,299 --> 00:30:08,239
the back-end connection of which the

00:30:06,739 --> 00:30:10,190
back-end connection took more than two

00:30:08,239 --> 00:30:14,299
seconds which is very useful information

00:30:10,190 --> 00:30:17,749
or we want to have all the URLs which

00:30:14,299 --> 00:30:19,909
have a response status within the 400

00:30:17,749 --> 00:30:22,519
range so something that was the clients

00:30:19,909 --> 00:30:24,469
fault right and that we want to have a

00:30:22,519 --> 00:30:26,239
look at so there and this is just an

00:30:24,469 --> 00:30:29,210
example there's tons of possibilities

00:30:26,239 --> 00:30:31,700
here varnish top is another binary reuse

00:30:29,210 --> 00:30:33,200
it has similar behavior as varnish log

00:30:31,700 --> 00:30:35,299
but it does an incremental list it's

00:30:33,200 --> 00:30:38,509
like when you do top on Linux it shows

00:30:35,299 --> 00:30:40,460
you incremental data and it has query

00:30:38,509 --> 00:30:43,159
expressions - we want to see all the top

00:30:40,460 --> 00:30:44,629
URLs so you'll see a URL and you see a

00:30:43,159 --> 00:30:46,940
number next to it the amount of hits it

00:30:44,629 --> 00:30:49,669
gets or the amount of times it occurs

00:30:46,940 --> 00:30:52,549
the amount of hits on this URL the

00:30:49,669 --> 00:30:54,019
amount of misses on this URL the top

00:30:52,549 --> 00:30:55,820
response status as well as my top

00:30:54,019 --> 00:30:57,320
response status I really hope it's 200

00:30:55,820 --> 00:30:59,599
that is being at the top it says if it's

00:30:57,320 --> 00:31:01,909
503 or 500 you're in some kind of

00:30:59,599 --> 00:31:04,909
trouble and so on and so on well what

00:31:01,909 --> 00:31:06,109
are the top user agents I need to

00:31:04,909 --> 00:31:09,320
explain you something about the flow

00:31:06,109 --> 00:31:10,970
because this looks somewhat nice and we

00:31:09,320 --> 00:31:11,520
see we've talked about the hits and

00:31:10,970 --> 00:31:14,070
lookup

00:31:11,520 --> 00:31:16,320
and misses and delivers but varnish has

00:31:14,070 --> 00:31:18,830
a clear state machine and that will help

00:31:16,320 --> 00:31:21,570
you to understand the logic of things

00:31:18,830 --> 00:31:23,880
when a request starts it gets into

00:31:21,570 --> 00:31:25,380
receiving mode and all these hooks that

00:31:23,880 --> 00:31:26,760
you'll see that you've already seen in

00:31:25,380 --> 00:31:29,220
the VCL and that you'll continue to see

00:31:26,760 --> 00:31:31,740
throughout this presentation use

00:31:29,220 --> 00:31:34,710
keywords that match a certain state

00:31:31,740 --> 00:31:37,470
we start with receiving if we receive

00:31:34,710 --> 00:31:39,030
something we can either pipe that means

00:31:37,470 --> 00:31:40,620
sending it off to the backend without

00:31:39,030 --> 00:31:43,110
interfering with anything of the cache

00:31:40,620 --> 00:31:45,120
this is just a raw tcp/ip connection you

00:31:43,110 --> 00:31:47,310
send the data of no responsibilities

00:31:45,120 --> 00:31:49,470
that follow yes take a picture of that

00:31:47,310 --> 00:31:51,360
that's a really good idea the slides

00:31:49,470 --> 00:31:53,610
will be online and I'll try to do that

00:31:51,360 --> 00:31:56,220
today or tomorrow so you'll be able to

00:31:53,610 --> 00:31:58,200
see that so you can either pipe it and

00:31:56,220 --> 00:31:59,790
say I don't want anything to do with

00:31:58,200 --> 00:32:01,740
this caching thing or we can say we're

00:31:59,790 --> 00:32:03,510
gonna pass it along to the back end

00:32:01,740 --> 00:32:05,700
because we don't feel comfortable

00:32:03,510 --> 00:32:07,140
caching this why it could be a cookie it

00:32:05,700 --> 00:32:08,850
could be an authorization header could

00:32:07,140 --> 00:32:11,220
be any other reason that you program it

00:32:08,850 --> 00:32:13,170
in your vcl but when things are looking

00:32:11,220 --> 00:32:14,820
good and are cashable you're gonna use

00:32:13,170 --> 00:32:16,770
the hash method so we have States and

00:32:14,820 --> 00:32:18,510
state transitions happen two methods two

00:32:16,770 --> 00:32:21,300
actions one of those actions is hash

00:32:18,510 --> 00:32:23,010
when we hash it we're looking it up in

00:32:21,300 --> 00:32:27,690
cache and when we look it up it could be

00:32:23,010 --> 00:32:29,610
there be a hit a pause like do not even

00:32:27,690 --> 00:32:31,080
look if it's a hit or a miss we get into

00:32:29,610 --> 00:32:32,870
lookup State and say I don't care about

00:32:31,080 --> 00:32:35,280
this send it back to the back end or

00:32:32,870 --> 00:32:37,770
otherwise it could be a hit or miss if

00:32:35,280 --> 00:32:39,240
it's a hit we deliver and this is one of

00:32:37,770 --> 00:32:41,670
the states that always occur we always

00:32:39,240 --> 00:32:44,760
deliver or nearly always deliver and we

00:32:41,670 --> 00:32:46,680
receive if it's a miss we're gonna fetch

00:32:44,760 --> 00:32:48,960
it from the back end and we're gonna

00:32:46,680 --> 00:32:52,230
store it in cache and deliver it back so

00:32:48,960 --> 00:32:55,110
that is the flow and I hope this makes

00:32:52,230 --> 00:32:59,010
sense to you yes yeah we're still still

00:32:55,110 --> 00:33:02,430
with me some people feel sleepy no okay

00:32:59,010 --> 00:33:05,190
and that reflects in the varnish log

00:33:02,430 --> 00:33:07,080
output see we receive first we do a

00:33:05,190 --> 00:33:09,330
hashing operation then we reach the

00:33:07,080 --> 00:33:11,190
hashing state when we look it up it

00:33:09,330 --> 00:33:12,630
could be a hit and then we deliver it so

00:33:11,190 --> 00:33:14,850
that makes sense and that will give you

00:33:12,630 --> 00:33:17,070
if you use this the this nice little

00:33:14,850 --> 00:33:18,570
state diagram compared with this you

00:33:17,070 --> 00:33:21,440
will see okay this is what actually

00:33:18,570 --> 00:33:23,760
happened and that's the inside you need

00:33:21,440 --> 00:33:24,870
let's go over caching keys because doors

00:33:23,760 --> 00:33:27,270
are important as well

00:33:24,870 --> 00:33:28,920
this is the default caching strategy in

00:33:27,270 --> 00:33:30,870
varnish and that's again a piece of VCL

00:33:28,920 --> 00:33:32,790
we're going into the VCL a hashed state

00:33:30,870 --> 00:33:34,800
so that's actually composing the hash

00:33:32,790 --> 00:33:38,220
key that will return the object from

00:33:34,800 --> 00:33:41,550
cache we will always use the request URL

00:33:38,220 --> 00:33:44,309
as a key and we'll hash that in whatever

00:33:41,550 --> 00:33:47,430
mechanism it uses and if there's a host

00:33:44,309 --> 00:33:49,559
if we use virtual hosts as we mostly do

00:33:47,430 --> 00:33:51,720
right we use host names and not that

00:33:49,559 --> 00:33:54,030
much IP addresses use the host if we

00:33:51,720 --> 00:33:57,960
don't use it use the IP address and then

00:33:54,030 --> 00:34:00,300
we turn it and look it up in cash in

00:33:57,960 --> 00:34:02,309
nginx either if you use the proxy

00:34:00,300 --> 00:34:04,440
caching part which is proxying HTTP

00:34:02,309 --> 00:34:07,170
traffic or if you use the fast CGI cache

00:34:04,440 --> 00:34:08,790
key which is Fosse GI caching you can

00:34:07,170 --> 00:34:10,230
define it as such and I've showed you in

00:34:08,790 --> 00:34:11,850
previous examples at a virtual host

00:34:10,230 --> 00:34:15,360
level that you can define these things

00:34:11,850 --> 00:34:16,800
so this is the basic thing but here is

00:34:15,360 --> 00:34:18,419
where it gets interesting you can hash

00:34:16,800 --> 00:34:19,860
cookies I always thought or I told you

00:34:18,419 --> 00:34:21,750
numerous times that varnish does not

00:34:19,860 --> 00:34:24,270
cache cookies but sometimes you want it

00:34:21,750 --> 00:34:27,179
to be so websites or applications that

00:34:24,270 --> 00:34:29,580
let's say we use countries or languages

00:34:27,179 --> 00:34:31,020
those are pretty common things when the

00:34:29,580 --> 00:34:32,909
language of the country where you're

00:34:31,020 --> 00:34:34,379
entering is not reflected in the URL you

00:34:32,909 --> 00:34:36,120
need another way of storing that state

00:34:34,379 --> 00:34:37,860
and a country cookie let's say you go to

00:34:36,120 --> 00:34:39,419
a page you enter a splash page you

00:34:37,860 --> 00:34:40,620
select your country or language and it

00:34:39,419 --> 00:34:42,810
gets stored in a cookie and sometimes

00:34:40,620 --> 00:34:44,310
you want to use that cookie to actually

00:34:42,810 --> 00:34:46,770
show different versions different

00:34:44,310 --> 00:34:49,200
variants of a page based on the location

00:34:46,770 --> 00:34:51,780
where they're at in varnish we could use

00:34:49,200 --> 00:34:54,780
such a thing if there is a con if there

00:34:51,780 --> 00:34:57,270
so this is a long string with I think

00:34:54,780 --> 00:35:00,510
it's semicolon separated if there is a

00:34:57,270 --> 00:35:03,360
term called country within this means we

00:35:00,510 --> 00:35:05,040
can additionally use that to hash you're

00:35:03,360 --> 00:35:07,980
not seeing anything about URL or

00:35:05,040 --> 00:35:09,570
anything about hostname in here why

00:35:07,980 --> 00:35:11,580
because we're not doing a return

00:35:09,570 --> 00:35:14,070
statement if there's no return statement

00:35:11,580 --> 00:35:15,570
it will execute this and go to the

00:35:14,070 --> 00:35:17,790
default one and the default one I showed

00:35:15,570 --> 00:35:20,190
you use the URL use either the IP or the

00:35:17,790 --> 00:35:22,320
hostname so what we do here is we hash

00:35:20,190 --> 00:35:25,980
the data which is a function in varnish

00:35:22,320 --> 00:35:28,680
we do a regular expression substitution

00:35:25,980 --> 00:35:30,870
so we look at the cookie we define this

00:35:28,680 --> 00:35:32,850
pattern so anything before country and

00:35:30,870 --> 00:35:35,040
then this is the country and we replace

00:35:32,850 --> 00:35:38,770
it with one so what we essentially do if

00:35:35,040 --> 00:35:41,410
you have UK as the cookie value will

00:35:38,770 --> 00:35:44,590
just have to therm UK or Belgium or NL

00:35:41,410 --> 00:35:46,840
or de or fr whatever you want to do this

00:35:44,590 --> 00:35:49,210
is very flexible and nginx it's even

00:35:46,840 --> 00:35:52,510
simpler Varner's does not have that

00:35:49,210 --> 00:35:54,610
nginx does they register variables based

00:35:52,510 --> 00:35:56,920
on the cookie name so cookie underscore

00:35:54,610 --> 00:35:58,750
country is a variable and nginx that you

00:35:56,920 --> 00:36:01,900
can use just to address any other cookie

00:35:58,750 --> 00:36:04,540
and you can just define it as such if

00:36:01,900 --> 00:36:08,350
there is no country cookie that will be

00:36:04,540 --> 00:36:10,750
an empty string so no harm done right so

00:36:08,350 --> 00:36:12,640
if you ever want a hash cookies this is

00:36:10,750 --> 00:36:15,130
a way you can do it I have specific

00:36:12,640 --> 00:36:17,380
varnish presentations where we go in

00:36:15,130 --> 00:36:19,330
much bigger detail and their own line as

00:36:17,380 --> 00:36:21,160
well so I can I can give you the links

00:36:19,330 --> 00:36:24,370
to that and it digs deeper this is just

00:36:21,160 --> 00:36:25,420
an overview a general overview it's one

00:36:24,370 --> 00:36:27,490
of those sayings right what are the

00:36:25,420 --> 00:36:29,170
hardest things in computer science was

00:36:27,490 --> 00:36:31,420
naming things I guess that was one of

00:36:29,170 --> 00:36:33,610
them and cache purging is definitely one

00:36:31,420 --> 00:36:35,800
of them and off-by-one errors was

00:36:33,610 --> 00:36:37,540
definitely in that list too so but cache

00:36:35,800 --> 00:36:40,060
purging is kind of hard but there are

00:36:37,540 --> 00:36:42,640
mechanisms in both systems to do so

00:36:40,060 --> 00:36:44,920
after admit varnish is better at this it

00:36:42,640 --> 00:36:47,620
has a better syntax so what you can do

00:36:44,920 --> 00:36:49,840
in the beginning is say we'll invent

00:36:47,620 --> 00:36:51,580
some methods that will imply that a URL

00:36:49,840 --> 00:36:53,200
needs to be purged when you use get you

00:36:51,580 --> 00:36:55,420
retrieve it when you use post you change

00:36:53,200 --> 00:36:58,180
things the same thing with put delete

00:36:55,420 --> 00:37:00,520
but we invented the word purge here and

00:36:58,180 --> 00:37:02,560
when we see a purge coming in that means

00:37:00,520 --> 00:37:06,000
that very URL needs to be removed from

00:37:02,560 --> 00:37:08,830
cache and we return the purging method

00:37:06,000 --> 00:37:12,220
so we've gone from the cache and you can

00:37:08,830 --> 00:37:14,410
hook into your CMS and do a curl call to

00:37:12,220 --> 00:37:16,540
any other URL you want to get out of the

00:37:14,410 --> 00:37:18,460
cache use the purge term this is one of

00:37:16,540 --> 00:37:20,680
the ways of doing this it's essential

00:37:18,460 --> 00:37:21,820
it's really really important that you

00:37:20,680 --> 00:37:24,460
put return here because if you're not

00:37:21,820 --> 00:37:26,260
doing return it will continue in the

00:37:24,460 --> 00:37:28,510
flow and varnish will say this is not

00:37:26,260 --> 00:37:30,670
get or head and it will just bypass it

00:37:28,510 --> 00:37:32,110
so returning is essential another thing

00:37:30,670 --> 00:37:33,400
that might be important that I didn't

00:37:32,110 --> 00:37:35,590
mention here just for the sake of

00:37:33,400 --> 00:37:36,940
simplicity is you might want to protect

00:37:35,590 --> 00:37:38,470
this with an ACL because if I know

00:37:36,940 --> 00:37:40,330
there's a purge mat and on your website

00:37:38,470 --> 00:37:42,910
I'm sure as hell gonna use purge on

00:37:40,330 --> 00:37:46,240
every other page just to screw around so

00:37:42,910 --> 00:37:48,280
there's a CL syntax and varnish but

00:37:46,240 --> 00:37:50,530
varnish has improved this and now has a

00:37:48,280 --> 00:37:51,880
sort of banned syntax and the banning

00:37:50,530 --> 00:37:54,579
syntax is much more flexible

00:37:51,880 --> 00:37:56,769
it allows you to interact with certain

00:37:54,579 --> 00:37:59,440
variables in there so what we want here

00:37:56,769 --> 00:38:02,170
is if we use perch we're gonna make sure

00:37:59,440 --> 00:38:05,559
that everything is perch that matches

00:38:02,170 --> 00:38:07,480
the host and it matches the URL and then

00:38:05,559 --> 00:38:09,400
you're gonna return bands you're gonna

00:38:07,480 --> 00:38:12,910
stop sin means synthetic outputs that's

00:38:09,400 --> 00:38:16,150
stopping any connection returning HTML I

00:38:12,910 --> 00:38:18,700
guess but there's more flexibility if we

00:38:16,150 --> 00:38:21,190
replace that double equal sign with a

00:38:18,700 --> 00:38:23,049
tilde we can do certain matches we can

00:38:21,190 --> 00:38:24,579
say everything that starts with this URL

00:38:23,049 --> 00:38:26,529
pattern we won't go on everything that

00:38:24,579 --> 00:38:28,150
is below there needs to disappear as

00:38:26,529 --> 00:38:30,309
well and you can do a lot of

00:38:28,150 --> 00:38:32,319
combinations there so you're flexible

00:38:30,309 --> 00:38:35,319
enough not to just delete single URLs

00:38:32,319 --> 00:38:39,970
but patterns of of data stored in your

00:38:35,319 --> 00:38:42,160
cache how do you remove it good curl

00:38:39,970 --> 00:38:43,509
it's possible use purge or ban or the

00:38:42,160 --> 00:38:45,849
other word you're using but there's a

00:38:43,509 --> 00:38:48,069
powerful alternative and that's for new

00:38:45,849 --> 00:38:50,109
JDM and varnish ADM is a binary you have

00:38:48,069 --> 00:38:51,700
when you install varnish when you type

00:38:50,109 --> 00:38:53,410
it it makes that telnet connection to

00:38:51,700 --> 00:38:55,750
the administrative interface that I told

00:38:53,410 --> 00:38:57,579
you about it does that you can also tell

00:38:55,750 --> 00:38:59,970
NIT remote telnet or locally telling it

00:38:57,579 --> 00:39:03,009
to 6080 to and do the authentication

00:38:59,970 --> 00:39:05,289
thing and then you can say ban rec URL

00:39:03,009 --> 00:39:07,089
equal slash so let's remove it from the

00:39:05,289 --> 00:39:10,210
home page so you don't need to interfere

00:39:07,089 --> 00:39:12,700
with VCL there is a connection strategy

00:39:10,210 --> 00:39:16,750
you can connect over tcp/ip and issue

00:39:12,700 --> 00:39:18,609
that ban nginx on the other hand has a

00:39:16,750 --> 00:39:21,880
different strategy it stores things on

00:39:18,609 --> 00:39:25,359
disk so what you do is you use grep you

00:39:21,880 --> 00:39:27,069
look for the URL that you want in the

00:39:25,359 --> 00:39:29,470
location where you know your cache is

00:39:27,069 --> 00:39:33,579
stored and remove it that's a way of

00:39:29,470 --> 00:39:35,920
doing it there is a plugin a third-party

00:39:33,579 --> 00:39:38,920
plugin by a guy who names themselves

00:39:35,920 --> 00:39:40,150
frickle that has a module called nginx

00:39:38,920 --> 00:39:42,730
cache purge you need to compile that

00:39:40,150 --> 00:39:44,019
into nginx it's not enough to just put

00:39:42,730 --> 00:39:46,900
it there you need to compile it in and

00:39:44,019 --> 00:39:51,220
he has AF fast CGI or a proxy cache

00:39:46,900 --> 00:39:53,529
purging mechanism nginx also has a

00:39:51,220 --> 00:39:55,150
commercial module so nginx dot orc is

00:39:53,529 --> 00:39:57,819
the website but you have nginx comm as

00:39:55,150 --> 00:39:59,799
well and if you take the the commercial

00:39:57,819 --> 00:40:01,269
solution its built-in as well not in the

00:39:59,799 --> 00:40:04,780
open source version in the open source

00:40:01,269 --> 00:40:07,570
version you need this little thing

00:40:04,780 --> 00:40:10,300
and as you can see either fast CGI cash

00:40:07,570 --> 00:40:14,020
purge or if your proxying to a actual

00:40:10,300 --> 00:40:16,150
web server rather than PHP fpm use proxy

00:40:14,020 --> 00:40:21,760
cash purge and then you can do this

00:40:16,150 --> 00:40:24,430
purge the host name your page and it

00:40:21,760 --> 00:40:26,170
behaves in a similar way okay that being

00:40:24,430 --> 00:40:29,320
said let's go to load balancing everyone

00:40:26,170 --> 00:40:31,870
still with me everyone still somewhat

00:40:29,320 --> 00:40:34,360
awake right okay let's talk about load

00:40:31,870 --> 00:40:36,040
balancing for a minute let me go to this

00:40:34,360 --> 00:40:38,560
side of the room I haven't been giving

00:40:36,040 --> 00:40:40,990
you enough an attention right so varnish

00:40:38,560 --> 00:40:42,970
has this concept of health checks so you

00:40:40,990 --> 00:40:45,790
can register a probe as you can see here

00:40:42,970 --> 00:40:48,580
and you can define your expectancies we

00:40:45,790 --> 00:40:51,130
want to go to state as a PHP with an

00:40:48,580 --> 00:40:52,960
interval of 60 seconds if it's not

00:40:51,130 --> 00:40:55,330
responding within 0.3 seconds

00:40:52,960 --> 00:40:57,280
something's gone wrong we'll have to do

00:40:55,330 --> 00:40:58,800
that eight times to consider it healthy

00:40:57,280 --> 00:41:01,150
I guess and the threshold of tree

00:40:58,800 --> 00:41:03,820
initially we tried three times and the

00:41:01,150 --> 00:41:05,920
expected response is an HTTP 200 if that

00:41:03,820 --> 00:41:07,930
is not the case your backends that you

00:41:05,920 --> 00:41:09,880
can see there that is reference to this

00:41:07,930 --> 00:41:12,730
health check will be considered

00:41:09,880 --> 00:41:16,960
unhealthy and an unhealthy back-end is a

00:41:12,730 --> 00:41:19,630
bad back end okay and nginx you can do

00:41:16,960 --> 00:41:23,980
matches and define your expectancies

00:41:19,630 --> 00:41:25,990
here and do hell check there to go true

00:41:23,980 --> 00:41:27,910
if you have a set of instances linked

00:41:25,990 --> 00:41:29,650
that's the way to define this back-end

00:41:27,910 --> 00:41:32,770
is not healthy switch to the next one

00:41:29,650 --> 00:41:34,560
and in varnish we can map back ends we

00:41:32,770 --> 00:41:37,180
can have a whole load of backends and

00:41:34,560 --> 00:41:39,880
put them in a sort of group called

00:41:37,180 --> 00:41:41,620
directors and directors allow balancing

00:41:39,880 --> 00:41:45,340
true backends either round robin

00:41:41,620 --> 00:41:46,900
randomly based on hashes or in a

00:41:45,340 --> 00:41:48,250
master/slave way there are other ones

00:41:46,900 --> 00:41:51,430
more difficult ones that I'm not gonna

00:41:48,250 --> 00:41:53,290
mention this is the random back-end it's

00:41:51,430 --> 00:41:54,390
important when you do four so who has

00:41:53,290 --> 00:41:59,170
experience with varnish

00:41:54,390 --> 00:42:02,440
version three wait have you done v4

00:41:59,170 --> 00:42:04,990
already please please please pretty

00:42:02,440 --> 00:42:09,070
please mention VCO 4.0 or your script

00:42:04,990 --> 00:42:10,300
will not work they've changed the way so

00:42:09,070 --> 00:42:11,980
in previous editions that this was

00:42:10,300 --> 00:42:14,250
entirely different this is the new way

00:42:11,980 --> 00:42:17,320
you do load balancing and varnish you

00:42:14,250 --> 00:42:18,460
reference your backends we have let's

00:42:17,320 --> 00:42:20,859
say an engine extend an Apache

00:42:18,460 --> 00:42:22,829
we import the directors module because

00:42:20,859 --> 00:42:25,359
you need to import that these days and

00:42:22,829 --> 00:42:27,940
you hook into the initialization script

00:42:25,359 --> 00:42:32,130
and defines a directory of virtual

00:42:27,940 --> 00:42:34,660
director that does random random lookups

00:42:32,130 --> 00:42:35,980
you add the Apache back-end you add the

00:42:34,660 --> 00:42:38,740
nginx back in and you can add weights

00:42:35,980 --> 00:42:40,690
here so if you have a more powerful box

00:42:38,740 --> 00:42:41,890
let's say your your Apache is more

00:42:40,690 --> 00:42:43,809
powerful than your engine X you're gonna

00:42:41,890 --> 00:42:45,069
have give it a higher priority and then

00:42:43,809 --> 00:42:46,930
you instead of setting the back end

00:42:45,069 --> 00:42:49,240
you're gonna hint that the back end

00:42:46,930 --> 00:42:51,660
should be the back end of the director

00:42:49,240 --> 00:42:54,010
and then that way we'll just do random

00:42:51,660 --> 00:42:56,859
random lookups it'll select a random

00:42:54,010 --> 00:42:59,079
back end based on the weights we can do

00:42:56,859 --> 00:43:00,460
fallback as well so similar deal look

00:42:59,079 --> 00:43:02,470
look how it change it doesn't change

00:43:00,460 --> 00:43:04,780
that much you add them and it has a

00:43:02,470 --> 00:43:08,530
fallback mechanism so that means always

00:43:04,780 --> 00:43:12,790
use Apache first and if Apache fails use

00:43:08,530 --> 00:43:15,490
nginx master/slave setup very similar we

00:43:12,790 --> 00:43:19,059
can use IP hashing so we use a hash

00:43:15,490 --> 00:43:22,240
director and we say that our backends

00:43:19,059 --> 00:43:24,220
hint is this back-end and we use the

00:43:22,240 --> 00:43:26,200
client identity which stores the IP

00:43:24,220 --> 00:43:28,900
address of the client as a hash and that

00:43:26,200 --> 00:43:30,700
way you can do sticky IP if you don't

00:43:28,900 --> 00:43:33,010
have a session clustering mechanism in

00:43:30,700 --> 00:43:34,690
your PHP runtime you can make sure that

00:43:33,010 --> 00:43:36,700
a user always goes to the same back-end

00:43:34,690 --> 00:43:38,740
and in that way keep the sessions and

00:43:36,700 --> 00:43:40,809
texts and make sure that if you have a

00:43:38,740 --> 00:43:43,480
shopping cart let's say it's still there

00:43:40,809 --> 00:43:44,890
when up on the next visit you can do

00:43:43,480 --> 00:43:46,510
entirely different stuff here as well

00:43:44,890 --> 00:43:49,180
client identity you can override that

00:43:46,510 --> 00:43:51,520
you can distribute based on user agents

00:43:49,180 --> 00:43:55,500
let's say Internet Explorer let's send

00:43:51,520 --> 00:44:00,190
those to the slower back-end right maybe

00:43:55,500 --> 00:44:01,660
in an engine so you if you can do

00:44:00,190 --> 00:44:03,910
hashing based on the URL so if you do

00:44:01,660 --> 00:44:06,339
read you are l it will do hashing that

00:44:03,910 --> 00:44:08,710
way and in and that's fairly interesting

00:44:06,339 --> 00:44:11,859
because then you can separate based on

00:44:08,710 --> 00:44:13,569
on URLs and you can cache more let's say

00:44:11,859 --> 00:44:14,770
you put varnish is behind varnishes and

00:44:13,569 --> 00:44:16,930
that is something that is commonly done

00:44:14,770 --> 00:44:19,299
let's say you have a huge amount of data

00:44:16,930 --> 00:44:21,940
and it doesn't fit into one varnish

00:44:19,299 --> 00:44:23,230
let's say you have one terabyte of data

00:44:21,940 --> 00:44:25,359
that you want to be cached you want a

00:44:23,230 --> 00:44:28,720
cache and your varnishes have 32

00:44:25,359 --> 00:44:30,220
gigabytes of RAM problem right so what

00:44:28,720 --> 00:44:31,840
you can do is set up a bunch of foreign

00:44:30,220 --> 00:44:33,640
issues next to each other put an

00:44:31,840 --> 00:44:35,530
varnish in front of it and use a hash

00:44:33,640 --> 00:44:37,180
director or you can even put nginx in

00:44:35,530 --> 00:44:39,700
front of varnish and let it distribute

00:44:37,180 --> 00:44:42,190
the the request based on the URL so that

00:44:39,700 --> 00:44:43,660
URLs always go to the same machine and

00:44:42,190 --> 00:44:45,640
then you can horizontally scale your

00:44:43,660 --> 00:44:48,790
caches which is quite nice and quite

00:44:45,640 --> 00:44:50,380
useful this is how you do it in nginx

00:44:48,790 --> 00:44:52,420
you define an upstream as you can see

00:44:50,380 --> 00:44:54,190
here you mention all the backends you

00:44:52,420 --> 00:44:57,160
can add weights if you want to you can

00:44:54,190 --> 00:44:59,140
connect over UNIX sockets tcp/ip and you

00:44:57,160 --> 00:45:01,390
just reference the backend we call it

00:44:59,140 --> 00:45:01,540
backend reference it here you're good to

00:45:01,390 --> 00:45:05,080
go

00:45:01,540 --> 00:45:07,150
same deal applies to to PHP fpm if you

00:45:05,080 --> 00:45:09,520
have multiple PHP fpm instances you can

00:45:07,150 --> 00:45:11,350
do it in such a way you can do fallback

00:45:09,520 --> 00:45:14,160
as well define it in a similar way but

00:45:11,350 --> 00:45:18,250
add backup to your slave machines

00:45:14,160 --> 00:45:21,010
problem solve you can do IP hashing to

00:45:18,250 --> 00:45:25,350
just mentioned IP hash here and it will

00:45:21,010 --> 00:45:28,540
just send it based on the IP very useful

00:45:25,350 --> 00:45:30,580
okay we're still on board load balancing

00:45:28,540 --> 00:45:33,610
clear there are better load balancing

00:45:30,580 --> 00:45:35,260
solutions and nginx or varnish you H a

00:45:33,610 --> 00:45:36,820
proxy is a very good one you have if you

00:45:35,260 --> 00:45:38,920
have really expensive network equipment

00:45:36,820 --> 00:45:41,110
you can do your load balancing there

00:45:38,920 --> 00:45:43,000
another thing I particularly like our

00:45:41,110 --> 00:45:45,010
hit-and-miss markers let's say you're

00:45:43,000 --> 00:45:46,900
working on your project and you want to

00:45:45,010 --> 00:45:49,300
know is this piece of information coming

00:45:46,900 --> 00:45:50,740
from my cache or is it coming from the

00:45:49,300 --> 00:45:52,720
backend how do you know you can do

00:45:50,740 --> 00:45:54,730
varnish log but maybe it's not that

00:45:52,720 --> 00:45:55,990
useful or maybe you have so much traffic

00:45:54,730 --> 00:45:57,580
that you don't want to bother with

00:45:55,990 --> 00:45:59,200
varnish log and you just want to see it

00:45:57,580 --> 00:46:01,030
in a response header you can do that

00:45:59,200 --> 00:46:02,380
with a hit missed marker so when you

00:46:01,030 --> 00:46:03,850
hook into the delivering parts and the

00:46:02,380 --> 00:46:05,920
delivering part if you pay it close

00:46:03,850 --> 00:46:07,840
attention is the bottom part of the

00:46:05,920 --> 00:46:09,520
state diagram it's what always happens

00:46:07,840 --> 00:46:11,710
it's the last piece of the puzzle before

00:46:09,520 --> 00:46:13,630
the response is returned so if your

00:46:11,710 --> 00:46:16,000
objects that you're returning has more

00:46:13,630 --> 00:46:18,010
than zero hits it's a hit and then you

00:46:16,000 --> 00:46:20,680
say the response so what you're sending

00:46:18,010 --> 00:46:23,500
back to the user do an X cache header

00:46:20,680 --> 00:46:26,500
hit and at the under circumstance do a

00:46:23,500 --> 00:46:28,810
miss and that way you can use Firebug or

00:46:26,500 --> 00:46:34,060
any other tool to see if it was a hit or

00:46:28,810 --> 00:46:36,850
miss remember that upstream cache status

00:46:34,060 --> 00:46:38,590
variable that we looked to the logs you

00:46:36,850 --> 00:46:42,460
can just add a header that way within

00:46:38,590 --> 00:46:45,010
any tag a location block in nginx and it

00:46:42,460 --> 00:46:45,760
will be very verbose this is just hit or

00:46:45,010 --> 00:46:47,430
miss

00:46:45,760 --> 00:46:50,440
remember that it was hit miss stale

00:46:47,430 --> 00:46:54,220
revalidating updating and so on and so

00:46:50,440 --> 00:46:55,990
on how long do we want stuff to be

00:46:54,220 --> 00:46:57,280
cached is a very important question and

00:46:55,990 --> 00:46:59,200
there were a lot of discipline

00:46:57,280 --> 00:47:02,650
developers here right whose uses cache

00:46:59,200 --> 00:47:04,570
control within the application very

00:47:02,650 --> 00:47:06,910
disciplined people for those people who

00:47:04,570 --> 00:47:08,230
aren't that disciplined or work with

00:47:06,910 --> 00:47:10,480
legacy stuff that they don't want to

00:47:08,230 --> 00:47:12,910
refactor you can override the time tool

00:47:10,480 --> 00:47:15,250
if if you want to so this is the

00:47:12,910 --> 00:47:17,890
standard way of doing things so five

00:47:15,250 --> 00:47:20,200
seconds because it's as max-age right

00:47:17,890 --> 00:47:21,640
anyone familiar with these with the

00:47:20,200 --> 00:47:24,670
difference between max age and as max

00:47:21,640 --> 00:47:26,380
age for those who are not max age is

00:47:24,670 --> 00:47:29,560
defined for browsers how long should

00:47:26,380 --> 00:47:32,500
your browser cache it shared max H is

00:47:29,560 --> 00:47:35,109
for proxies so varnish will respect that

00:47:32,500 --> 00:47:37,450
one if that one is not there we'll go to

00:47:35,109 --> 00:47:43,060
max age if max age is not there it will

00:47:37,450 --> 00:47:46,600
take expires nginx doesn't read enough

00:47:43,060 --> 00:47:49,660
they'll take the max age but you can

00:47:46,600 --> 00:47:52,660
override it yourself and this is so

00:47:49,660 --> 00:47:55,330
furnish v3 people this is a change this

00:47:52,660 --> 00:47:57,700
used to be called vcl fetch it's no

00:47:55,330 --> 00:47:59,859
longer called vcl fetch it's called VCL

00:47:57,700 --> 00:48:02,290
back-end response and when your response

00:47:59,859 --> 00:48:06,730
comes back and your your your your whoa

00:48:02,290 --> 00:48:09,010
that's weird your URL starts with blah

00:48:06,730 --> 00:48:10,540
you'll override and say the back end

00:48:09,010 --> 00:48:12,520
responds the TTL wasn't the original

00:48:10,540 --> 00:48:15,220
cache control base value will override

00:48:12,520 --> 00:48:17,890
at 210 seconds and then in any other

00:48:15,220 --> 00:48:20,680
case it will be cached for an hour this

00:48:17,890 --> 00:48:22,810
has priority over any other header you

00:48:20,680 --> 00:48:24,730
sent so if you do it that way

00:48:22,810 --> 00:48:26,170
forget about your cache control headers

00:48:24,730 --> 00:48:28,359
if you don't have cache control headers

00:48:26,170 --> 00:48:31,420
and you want more control this might be

00:48:28,359 --> 00:48:35,710
a way and nginx you can define in here

00:48:31,420 --> 00:48:37,510
proxy cache pallet and your other URL to

00:48:35,710 --> 00:48:39,850
be here this is the exact replica from

00:48:37,510 --> 00:48:43,990
varnish to nginx see you were Al's that

00:48:39,850 --> 00:48:45,580
start with blah those are the ones we've

00:48:43,990 --> 00:48:47,470
reached the final so how much time do I

00:48:45,580 --> 00:48:48,820
still have 10 minutes brilliant this is

00:48:47,470 --> 00:48:50,680
the last chapter of this presentation

00:48:48,820 --> 00:48:53,560
I'll think we'll be bang on time each

00:48:50,680 --> 00:48:55,780
side includes who has used edge side

00:48:53,560 --> 00:48:58,890
includes before who is currently using

00:48:55,780 --> 00:49:00,769
edge side includes in production nice

00:48:58,890 --> 00:49:04,049
was never heard of feds recite includes

00:49:00,769 --> 00:49:06,210
this will blow your mind right like

00:49:04,049 --> 00:49:07,019
people who use excite include will it

00:49:06,210 --> 00:49:09,539
blow their minds

00:49:07,019 --> 00:49:12,329
please not yes or no yes this this is

00:49:09,539 --> 00:49:14,279
magic and I've chose so I have an

00:49:12,329 --> 00:49:16,319
iStockphoto account paid by the company

00:49:14,279 --> 00:49:19,740
ya know and then I add a picture and

00:49:16,319 --> 00:49:21,930
this is exactly the precisely defines

00:49:19,740 --> 00:49:24,390
what each side includes is about it's

00:49:21,930 --> 00:49:26,730
about chopping up your page into

00:49:24,390 --> 00:49:29,339
different puzzle pieces and having more

00:49:26,730 --> 00:49:31,079
control about puzzle pieces I'm gonna do

00:49:29,339 --> 00:49:34,130
something really bad now I'm gonna do

00:49:31,079 --> 00:49:38,250
something very PHP 3 and PHP forest I'll

00:49:34,130 --> 00:49:41,250
have a file per feature right we have a

00:49:38,250 --> 00:49:43,109
header dot PHP and a footer dot PHP and

00:49:41,250 --> 00:49:47,339
we have a menu maybe you can even have

00:49:43,109 --> 00:49:50,490
frames old-school frames right but when

00:49:47,339 --> 00:49:53,549
we rendered this it's one big page it's

00:49:50,490 --> 00:49:55,890
one big chunk of HTML and you can only

00:49:53,549 --> 00:49:57,119
add a single cache control header if you

00:49:55,890 --> 00:49:59,940
want it to be there for an hour it's

00:49:57,119 --> 00:50:02,609
there for an hour but let's say you want

00:49:59,940 --> 00:50:05,420
this to be cached for 10 seconds this

00:50:02,609 --> 00:50:08,009
for to your header which has welcome

00:50:05,420 --> 00:50:09,930
person X in it you don't want it to be

00:50:08,009 --> 00:50:12,119
cached because it has cookies and the

00:50:09,930 --> 00:50:13,589
footer wall 5 seconds is good enough how

00:50:12,119 --> 00:50:16,859
do you do that and the answer is quite

00:50:13,589 --> 00:50:20,579
clear right exercise includes this is

00:50:16,859 --> 00:50:23,430
bad right but it makes sense it's it's

00:50:20,579 --> 00:50:24,839
for the sake of this example I will not

00:50:23,430 --> 00:50:27,569
write this kind of code you will not

00:50:24,839 --> 00:50:29,640
write probably right all right no one no

00:50:27,569 --> 00:50:31,200
one is gonna write this kind of code but

00:50:29,640 --> 00:50:32,549
it shows you how it works you have this

00:50:31,200 --> 00:50:33,960
block that you're going to include and

00:50:32,549 --> 00:50:36,230
this block and this block in this block

00:50:33,960 --> 00:50:39,900
but what if see the difference what if

00:50:36,230 --> 00:50:41,309
we use tags that varnish understands

00:50:39,900 --> 00:50:44,400
funny to understand these tags these

00:50:41,309 --> 00:50:46,650
this is an actual standard in w3c which

00:50:44,400 --> 00:50:49,289
was if I'm not mistaken invented by the

00:50:46,650 --> 00:50:51,990
dear people at Akamai Akamai being one

00:50:49,289 --> 00:50:55,529
of the bigger CD ends in this world and

00:50:51,990 --> 00:50:57,890
they define a standard kind of like SSI

00:50:55,529 --> 00:51:02,190
who remembers SSI from back in the day

00:50:57,890 --> 00:51:04,079
old school people right it's similar you

00:51:02,190 --> 00:51:06,329
register these tags you mention a source

00:51:04,079 --> 00:51:08,730
and if you send this to a browser a

00:51:06,329 --> 00:51:12,059
browser will not understand this not

00:51:08,730 --> 00:51:13,260
byah byah long now by a mile even but

00:51:12,059 --> 00:51:15,120
varnish does I wanted see

00:51:13,260 --> 00:51:18,090
it will fetch these blocks and cash them

00:51:15,120 --> 00:51:20,040
separately in separate locations on the

00:51:18,090 --> 00:51:23,310
in either on the file system or in

00:51:20,040 --> 00:51:25,500
memory and it will respect the cache

00:51:23,310 --> 00:51:27,990
control header so if in this footer dot

00:51:25,500 --> 00:51:30,480
PHP you say five seconds it will respect

00:51:27,990 --> 00:51:32,700
that if it's two seconds it will respect

00:51:30,480 --> 00:51:35,130
that if the header is not cacheable it

00:51:32,700 --> 00:51:37,860
will respect that so that is very cool

00:51:35,130 --> 00:51:39,510
and that gives you fine control over all

00:51:37,860 --> 00:51:44,960
the little bits and pieces and content

00:51:39,510 --> 00:51:47,640
blocks this is a way of setting it up

00:51:44,960 --> 00:51:51,900
this is a way so when you receive a

00:51:47,640 --> 00:51:53,400
request will send a and this is a this

00:51:51,900 --> 00:51:55,110
is a symphony way of doing this I

00:51:53,400 --> 00:51:57,390
learned this from Fabian watching Fabian

00:51:55,110 --> 00:51:58,920
Patel see a talk about caching he said

00:51:57,390 --> 00:52:01,320
there's a surrogate capability header

00:51:58,920 --> 00:52:03,870
which isn't an official header and it

00:52:01,320 --> 00:52:06,210
says that it can handle eeeh side so you

00:52:03,870 --> 00:52:09,360
send a header to your back and saying

00:52:06,210 --> 00:52:12,020
look I am varnish I understand the si if

00:52:09,360 --> 00:52:14,730
you send me ESI I will understand and

00:52:12,020 --> 00:52:16,740
then in your code you will look for that

00:52:14,730 --> 00:52:19,020
header and when you look when you've

00:52:16,740 --> 00:52:21,600
looked for it you'll send ESI back but

00:52:19,020 --> 00:52:23,220
you add a response and you'll say okay

00:52:21,600 --> 00:52:25,350
you have surrogate capabilities well

00:52:23,220 --> 00:52:27,300
he'll I have circuit control and I'm

00:52:25,350 --> 00:52:28,980
gonna send you a piece of ESI so that

00:52:27,300 --> 00:52:32,370
way that two-way communication allows

00:52:28,980 --> 00:52:34,200
you to do ESI rendering you don't want

00:52:32,370 --> 00:52:35,970
these on all your pages or repeat the

00:52:34,200 --> 00:52:38,370
pages that don't have ESI text you don't

00:52:35,970 --> 00:52:40,890
want to spend CPU cycles and memory on

00:52:38,370 --> 00:52:45,600
that so only when there's communication

00:52:40,890 --> 00:52:49,080
in both ways and there is a way of doing

00:52:45,600 --> 00:52:51,030
this in engine X I haven't tried it but

00:52:49,080 --> 00:52:51,360
there's a trick don't write it down just

00:52:51,030 --> 00:52:53,460
yet

00:52:51,360 --> 00:52:56,700
wait wait wait is there is a better

00:52:53,460 --> 00:52:58,680
trick instead of using edge side include

00:52:56,700 --> 00:53:00,990
you can use all school server side

00:52:58,680 --> 00:53:03,450
includes and nginx and use include

00:53:00,990 --> 00:53:05,010
virtual like back in the day and then

00:53:03,450 --> 00:53:06,570
your necks will deal with this and nginx

00:53:05,010 --> 00:53:09,660
will look at the cache control headers

00:53:06,570 --> 00:53:13,860
and it will store it and it works it's a

00:53:09,660 --> 00:53:16,110
hack I admit it works and the only thing

00:53:13,860 --> 00:53:17,190
you need to do is set as is I on and

00:53:16,110 --> 00:53:18,870
you're good to go and you can put if

00:53:17,190 --> 00:53:21,750
blocks in there with URL matches or

00:53:18,870 --> 00:53:23,400
other matches and it will just work it's

00:53:21,750 --> 00:53:25,920
not exactly a drop-in replacement with

00:53:23,400 --> 00:53:26,820
asked developers we can make this sort

00:53:25,920 --> 00:53:28,410
of switch where

00:53:26,820 --> 00:53:31,740
check is it a varnish or an nginx and

00:53:28,410 --> 00:53:36,390
either render as his eye or ESI no

00:53:31,740 --> 00:53:38,430
matter what it's finalized with SSL is

00:53:36,390 --> 00:53:41,070
all support foreigners does not support

00:53:38,430 --> 00:53:43,530
as is though it's a political decision

00:53:41,070 --> 00:53:45,720
they can if they want to but they don't

00:53:43,530 --> 00:53:51,350
want to so cool having compass strongly

00:53:45,720 --> 00:53:54,060
against adding SSL support to varnish

00:53:51,350 --> 00:53:55,460
nginx does support and it has SPDY

00:53:54,060 --> 00:53:58,050
support as well

00:53:55,460 --> 00:54:01,740
so eventually let's say you have an

00:53:58,050 --> 00:54:03,480
e-commerce store right ecommerce and we

00:54:01,740 --> 00:54:05,070
want varnish in front of it but no one

00:54:03,480 --> 00:54:07,200
is ever gonna buy something unless we

00:54:05,070 --> 00:54:09,540
offer as a zel because we care about our

00:54:07,200 --> 00:54:11,550
privacy so in the end there are

00:54:09,540 --> 00:54:13,680
situations and we've had those where you

00:54:11,550 --> 00:54:16,890
put in nginx does the SSL termination

00:54:13,680 --> 00:54:19,170
maybe a bit of SPDY sends a request to

00:54:16,890 --> 00:54:20,760
varnish varnish sends it to nginx back

00:54:19,170 --> 00:54:24,030
to another nginx because that's the web

00:54:20,760 --> 00:54:27,630
server which sends it to PHP fpm and all

00:54:24,030 --> 00:54:30,780
the way back we have five more minutes

00:54:27,630 --> 00:54:33,780
nice so this is how you could do it it's

00:54:30,780 --> 00:54:35,970
a way we find your certificates and do

00:54:33,780 --> 00:54:39,480
the rest of the business there listen on

00:54:35,970 --> 00:54:41,220
443 good to go you can register port 80

00:54:39,480 --> 00:54:44,040
as well and then do a an automatic

00:54:41,220 --> 00:54:47,790
forwards to 443 if you want to enforce

00:54:44,040 --> 00:54:51,480
is as l this is the very end of this

00:54:47,790 --> 00:54:54,270
talk and now i'm gonna stand in the

00:54:51,480 --> 00:54:56,940
middle of the room and ask you if you

00:54:54,270 --> 00:55:02,070
think that varnish won the battle raise

00:54:56,940 --> 00:55:05,640
your hand if you feel that nginx has won

00:55:02,070 --> 00:55:08,670
the battle raise your hand see I have

00:55:05,640 --> 00:55:11,460
that every time everyone thinks nginx is

00:55:08,670 --> 00:55:13,560
more powerful than varnish but in the

00:55:11,460 --> 00:55:16,580
end it's a matter of using the right

00:55:13,560 --> 00:55:19,680
tool for the job and if nginx

00:55:16,580 --> 00:55:21,780
floats your boat then go for nginx but

00:55:19,680 --> 00:55:23,550
in a lot of cases we combine things like

00:55:21,780 --> 00:55:26,280
nginx is also excellent for dealing with

00:55:23,550 --> 00:55:28,020
static files will use nginx for that or

00:55:26,280 --> 00:55:31,230
we have a project where we don't need

00:55:28,020 --> 00:55:32,730
that much control over the flow because

00:55:31,230 --> 00:55:35,130
nginx doesn't really have that much of

00:55:32,730 --> 00:55:38,520
syntax deal with the caching res varnish

00:55:35,130 --> 00:55:40,300
has an entire third party language to

00:55:38,520 --> 00:55:42,910
deal with this so if you need more

00:55:40,300 --> 00:55:45,310
trol go for varnish if you wanted plain

00:55:42,910 --> 00:55:48,340
and simple and powerful go for nginx and

00:55:45,310 --> 00:55:51,870
in the end use the right tool for the

00:55:48,340 --> 00:55:51,870
job thank you

00:55:58,930 --> 00:56:06,710
and now I'm gonna ask you the cliche

00:56:01,310 --> 00:56:08,329
question any questions there's a mic

00:56:06,710 --> 00:56:15,829
there's a mic because we're recording

00:56:08,329 --> 00:56:17,630
this and I really hate Q&A but you can

00:56:15,829 --> 00:56:19,070
also approach me at the bar or anywhere

00:56:17,630 --> 00:56:20,960
else but if you have some formal

00:56:19,070 --> 00:56:24,500
questions I'd be happy to answer them

00:56:20,960 --> 00:56:28,250
hi there I'm can you extend your your

00:56:24,500 --> 00:56:32,300
cookie examples to add headers into the

00:56:28,250 --> 00:56:35,900
cache keys you can but they have to be

00:56:32,300 --> 00:56:39,200
request headers sure so you can do it so

00:56:35,900 --> 00:56:40,760
you can do a and varnish also supports I

00:56:39,200 --> 00:56:42,770
didn't explain that because it went a

00:56:40,760 --> 00:56:45,680
bit further than the normal but there's

00:56:42,770 --> 00:56:47,780
this HTTP header chord very and it

00:56:45,680 --> 00:56:49,369
respects very headers but you have to be

00:56:47,780 --> 00:56:52,130
careful with very headers because if you

00:56:49,369 --> 00:56:54,349
say very cookie who go nuts because it

00:56:52,130 --> 00:56:55,730
will use your Google Analytics style

00:56:54,349 --> 00:56:57,890
cookies as well things will go nuts but

00:56:55,730 --> 00:56:59,930
if you want a hash based on let's say

00:56:57,890 --> 00:57:01,880
people use the except language you

00:56:59,930 --> 00:57:04,060
detect the browser language you can do

00:57:01,880 --> 00:57:07,670
hash data and then the browser language

00:57:04,060 --> 00:57:09,319
which is a rectal HTTP don't accept that

00:57:07,670 --> 00:57:10,819
language I guess not sure you can

00:57:09,319 --> 00:57:12,170
definitely do that this was just an

00:57:10,819 --> 00:57:13,940
example with cookies but if you use

00:57:12,170 --> 00:57:16,460
other mechanisms to define state based

00:57:13,940 --> 00:57:17,990
on language location you can do all

00:57:16,460 --> 00:57:20,030
these sorts of things so yes the answer

00:57:17,990 --> 00:57:21,680
is yes you can hook into pretty much any

00:57:20,030 --> 00:57:24,890
of the response to build a custom cache

00:57:21,680 --> 00:57:26,300
key in engine requests not response yeah

00:57:24,890 --> 00:57:27,950
that's important because I figured yeah

00:57:26,300 --> 00:57:29,660
we can use a response header stupid it

00:57:27,950 --> 00:57:31,790
works based on request headers because

00:57:29,660 --> 00:57:34,430
it doesn't matter if you send the week

00:57:31,790 --> 00:57:35,990
or if she has hash based on responses it

00:57:34,430 --> 00:57:37,550
doesn't work it needs to make sure that

00:57:35,990 --> 00:57:39,140
every request that comes in and if you

00:57:37,550 --> 00:57:43,490
have a header there you can use it you

00:57:39,140 --> 00:57:46,010
can also cache let's say you use accept

00:57:43,490 --> 00:57:49,250
headers to return JSON instead of HTML

00:57:46,010 --> 00:57:50,450
if you don't vary on these headers the

00:57:49,250 --> 00:57:52,099
first one is gonna get it and you're

00:57:50,450 --> 00:57:55,730
gonna request something written in JSON

00:57:52,099 --> 00:57:58,220
and you expect HTML so yes you can use

00:57:55,730 --> 00:58:00,670
any other request header to Ferriero

00:57:58,220 --> 00:58:00,670
thank you

00:58:02,640 --> 00:58:11,099
I am you didn't mention performance - so

00:58:08,849 --> 00:58:13,109
you didn't make any comparisons is that

00:58:11,099 --> 00:58:15,960
I didn't make any comparisons because I

00:58:13,109 --> 00:58:18,510
will be perfectly honest with you we

00:58:15,960 --> 00:58:20,309
don't have that much traffic that we can

00:58:18,510 --> 00:58:22,410
actually see the difference they're both

00:58:20,309 --> 00:58:24,720
so powerful that we haven't reached the

00:58:22,410 --> 00:58:27,539
limits of it so in terms of performance

00:58:24,720 --> 00:58:29,160
everyone says they're on par and some

00:58:27,539 --> 00:58:31,710
people say well nginx is faster for

00:58:29,160 --> 00:58:34,829
static data but then varnish is faster

00:58:31,710 --> 00:58:36,900
for page cache so I can't give you those

00:58:34,829 --> 00:58:39,390
numbers because I don't have them and I

00:58:36,900 --> 00:58:41,539
don't want to blindly steal performance

00:58:39,390 --> 00:58:45,299
reports or benchmarks from other people

00:58:41,539 --> 00:58:47,130
without actually having tried them so we

00:58:45,299 --> 00:58:48,990
don't have that amount of traffic to see

00:58:47,130 --> 00:58:53,490
the difference but I can tell you that

00:58:48,990 --> 00:58:55,260
we've successfully removed a CDN for a

00:58:53,490 --> 00:58:57,980
one of our bigger clients that does a

00:58:55,260 --> 00:59:00,869
hundred thousand euros an hour on sales

00:58:57,980 --> 00:59:02,039
remove Akamai and put not that we have

00:59:00,869 --> 00:59:04,079
anything against Akamai

00:59:02,039 --> 00:59:05,940
this is recorded right but they only

00:59:04,079 --> 00:59:08,069
sold products in Belgium so they don't

00:59:05,940 --> 00:59:09,869
need this the distributed geo feature so

00:59:08,069 --> 00:59:11,730
we replaced it with varnish and to

00:59:09,869 --> 00:59:14,400
varnish servers was enough to do it and

00:59:11,730 --> 00:59:16,410
I've heard stories about one of the

00:59:14,400 --> 00:59:18,809
biggest news websites in the Netherlands

00:59:16,410 --> 00:59:20,400
that had 19 million unique visitors a

00:59:18,809 --> 00:59:22,680
day and they did it with two varnishes

00:59:20,400 --> 00:59:24,630
so we haven't yet reached a point where

00:59:22,680 --> 00:59:25,859
we've experienced the limitations of

00:59:24,630 --> 00:59:29,190
varnish as long as you give it enough

00:59:25,859 --> 00:59:32,279
memory and tune your your kernel and

00:59:29,190 --> 00:59:34,430
tuned the the trading settings enough so

00:59:32,279 --> 00:59:34,430

YouTube URL: https://www.youtube.com/watch?v=KldPhbWqy2U


