Title: Bastian Hoffmann - Bring your PHP application to the next level with React.JS
Publication date: 2015-04-02
Playlist: PHP UK Conference 2015
Description: 
	React.JS is a very powerful library for building user interfaces and the new, cool kid in the JavaScript world. But it is also very interesting for creating a fast, maintainable and interactive PHP application. In this talk I'll show what React is all about and how you can combine itâ€™s power with your PHP application, even if you have to render out HTML on the server side. The result will be a flexible, component based architecture that enables developers to take page elements, like a single "follow" button, and place it everywhere on the site without having to duplicate any PHP, JS, HTML, CSS or AJAX endpoints in the process.

https://speakerdeck.com/bastianhofmann/bring-your-php-application-to-the-next-level-with-react-dot-js
Captions: 
	00:00:05,360 --> 00:00:09,590
so my topic is bringing your PHP

00:00:08,030 --> 00:00:10,190
application to the next level with

00:00:09,590 --> 00:00:13,760
react.js

00:00:10,190 --> 00:00:16,610
who has heard of react.js before who has

00:00:13,760 --> 00:00:22,630
used it before who is used it for more

00:00:16,610 --> 00:00:26,360
than like a hello world example okay

00:00:22,630 --> 00:00:28,759
this talk is gonna be basically about

00:00:26,360 --> 00:00:31,460
web application architecture and with

00:00:28,759 --> 00:00:33,050
that I mean not like how many servers

00:00:31,460 --> 00:00:35,510
you have and how cells interact with

00:00:33,050 --> 00:00:37,040
each other and what kind of data bases

00:00:35,510 --> 00:00:39,140
you need and micro servers and all that

00:00:37,040 --> 00:00:42,469
but the application architecture of your

00:00:39,140 --> 00:00:43,940
PHP and web front-end application it's

00:00:42,469 --> 00:00:46,399
going to be a lot about code and

00:00:43,940 --> 00:00:48,050
component reuse so that you don't repeat

00:00:46,399 --> 00:00:50,570
yourself program everything again but

00:00:48,050 --> 00:00:53,179
actually can reuse stuff that you did

00:00:50,570 --> 00:00:56,000
somewhere elsewhere as well it's good a

00:00:53,179 --> 00:00:57,559
lot about enabling rapid development

00:00:56,000 --> 00:00:59,660
especially if your application grows

00:00:57,559 --> 00:01:02,749
larger and larger and more and more

00:00:59,660 --> 00:01:05,449
developers are joining the team and

00:01:02,749 --> 00:01:08,830
joining the company was working on code

00:01:05,449 --> 00:01:14,060
base was more like 10 developers on it

00:01:08,830 --> 00:01:16,250
yeah so this is like half maybe it

00:01:14,060 --> 00:01:17,990
regards of that it's hopefully very

00:01:16,250 --> 00:01:19,460
useful to you and if you it's going to

00:01:17,990 --> 00:01:22,340
give you a ideas about how to structure

00:01:19,460 --> 00:01:25,220
application and I'll explain this it was

00:01:22,340 --> 00:01:26,900
an example of PHP and react dress if you

00:01:25,220 --> 00:01:28,520
don't want to use rec chest if you're

00:01:26,900 --> 00:01:31,390
not using PHP probably most of you how

00:01:28,520 --> 00:01:34,700
using PHP since it's a PHP conference

00:01:31,390 --> 00:01:37,040
perfectly fine this is more about the

00:01:34,700 --> 00:01:39,580
concepts behind it and I kind of find

00:01:37,040 --> 00:01:42,200
also think that react dress is very cool

00:01:39,580 --> 00:01:44,690
usually a web application looks somehow

00:01:42,200 --> 00:01:46,850
like that you have some web server or

00:01:44,690 --> 00:01:48,200
web servers there you have some PHP code

00:01:46,850 --> 00:01:50,330
in the end there are some controllers

00:01:48,200 --> 00:01:52,160
putting out some HTML sending it to the

00:01:50,330 --> 00:01:54,830
browser in the browser there is some

00:01:52,160 --> 00:01:57,130
JavaScript running that is doing all

00:01:54,830 --> 00:02:00,020
kinds of Dom manipulations maybe doing

00:01:57,130 --> 00:02:03,580
additional Ajax requests to fetch data

00:02:00,020 --> 00:02:06,290
and doing kind of interactive stuff

00:02:03,580 --> 00:02:07,850
oftentimes though like for the users

00:02:06,290 --> 00:02:10,190
this is a lot like one big application

00:02:07,850 --> 00:02:12,140
oftentimes though architecture wise

00:02:10,190 --> 00:02:13,850
there's a big separation there are all

00:02:12,140 --> 00:02:16,940
kinds even different teams doing

00:02:13,850 --> 00:02:17,750
JavaScript and front-end stuff and teams

00:02:16,940 --> 00:02:21,770
doing back

00:02:17,750 --> 00:02:23,690
stuff and PHP stuff in turn that

00:02:21,770 --> 00:02:25,430
oftentimes leads to a lot of code

00:02:23,690 --> 00:02:27,740
duplication you need like templates in

00:02:25,430 --> 00:02:30,230
the back end like smarty or Twix or any

00:02:27,740 --> 00:02:32,390
kind of things or playing PHP templates

00:02:30,230 --> 00:02:34,670
you also need templates kind of in the

00:02:32,390 --> 00:02:35,390
front and somehow to render something on

00:02:34,670 --> 00:02:38,120
the fly

00:02:35,390 --> 00:02:41,959
you have validation rules on both sides

00:02:38,120 --> 00:02:43,850
and actually trying to map something

00:02:41,959 --> 00:02:45,350
that's happening in front and to stuff

00:02:43,850 --> 00:02:47,560
that happening is in the backend is kind

00:02:45,350 --> 00:02:50,330
of really hard in a lot of applications

00:02:47,560 --> 00:02:52,430
so this talk is going to be how to solve

00:02:50,330 --> 00:02:53,780
these problems before that a few words

00:02:52,430 --> 00:02:54,680
about me I work at a company called

00:02:53,780 --> 00:02:56,690
ResearchGate

00:02:54,680 --> 00:02:59,840
it's a social network for scientists and

00:02:56,690 --> 00:03:01,220
researchers based in Berlin Germany but

00:02:59,840 --> 00:03:02,959
the company is very international and

00:03:01,220 --> 00:03:04,610
also the audience international as a

00:03:02,959 --> 00:03:06,350
science it's all about getting

00:03:04,610 --> 00:03:06,860
researchers sharing their research with

00:03:06,350 --> 00:03:09,140
each other

00:03:06,860 --> 00:03:11,180
reviewing other's research having

00:03:09,140 --> 00:03:13,160
statistics or citations and everything

00:03:11,180 --> 00:03:15,290
if more questions will that we can talk

00:03:13,160 --> 00:03:17,780
about this in length at beers because I

00:03:15,290 --> 00:03:19,730
like talking about the idea of making

00:03:17,780 --> 00:03:21,830
science better as well the slides will

00:03:19,730 --> 00:03:23,450
be online on joined in and speaker Eric

00:03:21,830 --> 00:03:24,650
later on and also there's going to be

00:03:23,450 --> 00:03:27,350
recording on YouTube if you want a

00:03:24,650 --> 00:03:31,130
recent visit so application architecture

00:03:27,350 --> 00:03:33,200
as always there are many ways to go

00:03:31,130 --> 00:03:35,030
about application architecture and I'll

00:03:33,200 --> 00:03:37,160
just presenting one way that proved very

00:03:35,030 --> 00:03:39,500
successful for us

00:03:37,160 --> 00:03:41,230
when I joined research cage-like was

00:03:39,500 --> 00:03:44,180
three and a half years ago the

00:03:41,230 --> 00:03:47,720
application was kind of already a bit

00:03:44,180 --> 00:03:49,280
messy somewhere it looked like a basic

00:03:47,720 --> 00:03:50,930
replication we had some load balancers a

00:03:49,280 --> 00:03:53,780
lot of PHP servers and they were talking

00:03:50,930 --> 00:03:55,549
to databases and also some other micro

00:03:53,780 --> 00:03:58,340
services and things you didn't want to

00:03:55,549 --> 00:04:00,350
do in PHP anymore pretty simple so we

00:03:58,340 --> 00:04:03,140
are focusing on the web server PHP part

00:04:00,350 --> 00:04:04,910
the code was kind of like legacy at some

00:04:03,140 --> 00:04:07,310
point it was based on a self written ten

00:04:04,910 --> 00:04:12,019
year old framework like think about then

00:04:07,310 --> 00:04:12,440
framework one kind of wish it was MVC it

00:04:12,019 --> 00:04:15,709
had

00:04:12,440 --> 00:04:17,150
templates there would ever PHP templates

00:04:15,709 --> 00:04:19,840
with lots of lots of logic and

00:04:17,150 --> 00:04:24,970
occasionally database queries and then

00:04:19,840 --> 00:04:27,310
and it didn't have any kind of idea how

00:04:24,970 --> 00:04:29,740
to actually reuse components or real

00:04:27,310 --> 00:04:31,720
stuff you had on your page reusing was

00:04:29,740 --> 00:04:33,550
basically saying okay I'll copy some

00:04:31,720 --> 00:04:35,830
code from this controller place it in

00:04:33,550 --> 00:04:37,750
that controller and hopefully it won't

00:04:35,830 --> 00:04:39,790
divert that much and then you had of one

00:04:37,750 --> 00:04:41,980
recommendation component five different

00:04:39,790 --> 00:04:44,250
implementations if you need to change

00:04:41,980 --> 00:04:46,450
something that was kind of not nice

00:04:44,250 --> 00:04:48,370
there were also things that were done

00:04:46,450 --> 00:04:49,840
very nice there and really stable for

00:04:48,370 --> 00:04:51,700
example email sending us what's done

00:04:49,840 --> 00:04:53,740
awesomely but and it still leaves it

00:04:51,700 --> 00:04:55,389
like this is the same code as it is now

00:04:53,740 --> 00:04:57,700
so not everything was bad but some

00:04:55,389 --> 00:05:00,820
things we said together and said okay we

00:04:57,700 --> 00:05:03,550
have to do this better and the idea then

00:05:00,820 --> 00:05:07,510
was to instead of having like one

00:05:03,550 --> 00:05:10,210
controller per page and having these big

00:05:07,510 --> 00:05:12,639
PHP classes big templates to break it up

00:05:10,210 --> 00:05:14,440
and say okay we want to have very very

00:05:12,639 --> 00:05:16,240
small components instead of very big

00:05:14,440 --> 00:05:18,220
controllers and through these small

00:05:16,240 --> 00:05:21,010
components assemble all our pages and

00:05:18,220 --> 00:05:22,960
our application like this we started

00:05:21,010 --> 00:05:25,000
with that actually with the redesign of

00:05:22,960 --> 00:05:27,220
our profile pages that's what's looking

00:05:25,000 --> 00:05:28,690
like now and we sat down actually with

00:05:27,220 --> 00:05:30,430
the designs and mock-ups we got from our

00:05:28,690 --> 00:05:32,470
designers and said okay if you want to

00:05:30,430 --> 00:05:34,390
do very small components what actually

00:05:32,470 --> 00:05:35,860
can be identified of course there is

00:05:34,390 --> 00:05:38,200
this header bar here that could be one

00:05:35,860 --> 00:05:40,810
component do you have this header bar

00:05:38,200 --> 00:05:42,550
here with one component the left column

00:05:40,810 --> 00:05:44,169
could be one component the right column

00:05:42,550 --> 00:05:46,360
and then you can even dive down further

00:05:44,169 --> 00:05:48,250
you have this skills and expertise thing

00:05:46,360 --> 00:05:49,660
could be one component and could be

00:05:48,250 --> 00:05:52,570
reusable somewhere else and useful

00:05:49,660 --> 00:05:55,479
somewhere else and also maybe even this

00:05:52,570 --> 00:05:56,979
pill with this keyword PCR here could

00:05:55,479 --> 00:05:58,630
also be one component because I could

00:05:56,979 --> 00:06:03,580
use it somewhere so you can actually

00:05:58,630 --> 00:06:05,740
identify a lot of them and then you said

00:06:03,580 --> 00:06:07,210
okay we have component what actually are

00:06:05,740 --> 00:06:09,400
the properties these components should

00:06:07,210 --> 00:06:12,880
have this should be self-contained

00:06:09,400 --> 00:06:14,289
because we want to have them being able

00:06:12,880 --> 00:06:16,900
to implement them everywhere we need

00:06:14,289 --> 00:06:17,380
them and there should be reusable as

00:06:16,900 --> 00:06:20,979
well

00:06:17,380 --> 00:06:22,870
and they should be able to be address

00:06:20,979 --> 00:06:24,910
and run that separately which is like

00:06:22,870 --> 00:06:27,010
also a property of being reusable that

00:06:24,910 --> 00:06:29,169
means we can take any component and put

00:06:27,010 --> 00:06:32,320
it anywhere on the pages and it just

00:06:29,169 --> 00:06:33,580
works that also means the correct

00:06:32,320 --> 00:06:35,979
JavaScript has to be load

00:06:33,580 --> 00:06:37,330
and executed for it the correct template

00:06:35,979 --> 00:06:39,849
has to be lowered and executed for it

00:06:37,330 --> 00:06:41,949
the correct this SSB has to be loaded

00:06:39,849 --> 00:06:44,020
and executed for it and you don't wanna

00:06:41,949 --> 00:06:45,729
have like the 1 megabyte CSS file having

00:06:44,020 --> 00:06:48,729
all the CSS for all components in there

00:06:45,729 --> 00:06:50,080
and we wanted to share as much as logic

00:06:48,729 --> 00:06:52,180
and code between server and client to

00:06:50,080 --> 00:06:55,210
not duplicate our faults like templates

00:06:52,180 --> 00:06:56,860
for example validation rules entity

00:06:55,210 --> 00:06:58,030
marshalling and all kinds of other

00:06:56,860 --> 00:06:59,800
things you can think of and of course it

00:06:58,030 --> 00:07:02,139
need to be fast both in terms of

00:06:59,800 --> 00:07:04,150
scalability and performance but also in

00:07:02,139 --> 00:07:06,030
terms of development speed because

00:07:04,150 --> 00:07:10,139
people also cost a lot of money and

00:07:06,030 --> 00:07:14,560
usually much more than servers enter

00:07:10,139 --> 00:07:16,449
reactors to be fair we did not start

00:07:14,560 --> 00:07:18,250
with react yes because reactors was not

00:07:16,449 --> 00:07:20,319
out when we started we would base it on

00:07:18,250 --> 00:07:22,750
Yui because we were already using Yui

00:07:20,319 --> 00:07:26,379
and then we are gradually now switching

00:07:22,750 --> 00:07:28,240
over to react yes what is react it's a

00:07:26,379 --> 00:07:30,400
JavaScript library that is just

00:07:28,240 --> 00:07:34,000
dedicated for user interface handling

00:07:30,400 --> 00:07:36,490
which is so if you think MVC it's just

00:07:34,000 --> 00:07:38,770
there for other we for the view and it

00:07:36,490 --> 00:07:40,690
does this thing really really well it's

00:07:38,770 --> 00:07:42,099
mainly driven forward by Facebook at the

00:07:40,690 --> 00:07:43,930
moment but this open source there are

00:07:42,099 --> 00:07:46,900
open source contributions to it and it's

00:07:43,930 --> 00:07:51,250
already used by not a lot but some other

00:07:46,900 --> 00:07:52,779
projects in production successfully one

00:07:51,250 --> 00:07:54,789
key property which makes it really nice

00:07:52,779 --> 00:07:57,009
is that it operates on a virtual Dom

00:07:54,789 --> 00:07:59,349
like the Dom is the thing in the browser

00:07:57,009 --> 00:08:01,770
that is basically representing the HTML

00:07:59,349 --> 00:08:04,240
and making it accessible and renderable

00:08:01,770 --> 00:08:06,729
virtual Dom means that all operations

00:08:04,240 --> 00:08:08,169
I'm doing in react.js on the storm like

00:08:06,729 --> 00:08:09,940
changing something adding a new

00:08:08,169 --> 00:08:12,789
component removing a component somewhere

00:08:09,940 --> 00:08:14,379
is not done directly in the browser but

00:08:12,789 --> 00:08:16,300
it's done on this virtual Dom and then

00:08:14,379 --> 00:08:18,729
only the things in the Dom that changed

00:08:16,300 --> 00:08:21,039
so it differs both stage states only

00:08:18,729 --> 00:08:22,690
those things that are changing then are

00:08:21,039 --> 00:08:24,669
actually then also written into the

00:08:22,690 --> 00:08:26,259
browser to the dome that means the

00:08:24,669 --> 00:08:28,870
amount of repaints the browser have to

00:08:26,259 --> 00:08:34,479
do is much less and this is makes it

00:08:28,870 --> 00:08:36,969
really really fast and also it tries to

00:08:34,479 --> 00:08:38,890
enable the developers to actually do

00:08:36,969 --> 00:08:40,959
exactly what we wanted to do having very

00:08:38,890 --> 00:08:43,659
many small components that are

00:08:40,959 --> 00:08:45,750
independently reusable and can be

00:08:43,659 --> 00:08:49,690
assembled like you needed

00:08:45,750 --> 00:08:51,910
in coach my just show a few examples for

00:08:49,690 --> 00:08:53,200
those of you who have not done much more

00:08:51,910 --> 00:08:56,650
than react but these are basically hello

00:08:53,200 --> 00:08:58,690
world examples this is like the hello

00:08:56,650 --> 00:09:01,570
words you create a react component or

00:08:58,690 --> 00:09:03,490
react class each component has a render

00:09:01,570 --> 00:09:05,110
function which is basically what the HTM

00:09:03,490 --> 00:09:09,070
returns the HTML that should be visible

00:09:05,110 --> 00:09:10,990
you see here that HTML are like XML is

00:09:09,070 --> 00:09:12,760
kind of first class citizen in react

00:09:10,990 --> 00:09:14,740
that also works with JavaScript and

00:09:12,760 --> 00:09:17,890
really nicely and all the escaping is

00:09:14,740 --> 00:09:20,620
done automatically in here and I'm just

00:09:17,890 --> 00:09:22,930
printing out the property name here in

00:09:20,620 --> 00:09:25,000
the stiff and if I call react render for

00:09:22,930 --> 00:09:27,280
this hello message component and set the

00:09:25,000 --> 00:09:32,230
property name to John it will print out

00:09:27,280 --> 00:09:34,380
hello John a bit more complex here was a

00:09:32,230 --> 00:09:37,420
bit of interaction you have a

00:09:34,380 --> 00:09:39,340
small-timer component it basically shows

00:09:37,420 --> 00:09:41,950
you the second that were elapsed since

00:09:39,340 --> 00:09:44,770
the component started rendering this is

00:09:41,950 --> 00:09:47,440
the output second elapsed and then some

00:09:44,770 --> 00:09:50,380
seconds variable the initial state of

00:09:47,440 --> 00:09:52,930
the second variable is in return in this

00:09:50,380 --> 00:09:56,440
get initial state function so seconds at

00:09:52,930 --> 00:09:59,770
0 and then when the component is mounted

00:09:56,440 --> 00:10:01,480
into the Dom I create an interval that

00:09:59,770 --> 00:10:04,510
every second calls the stick function

00:10:01,480 --> 00:10:06,490
and the stick function just increments

00:10:04,510 --> 00:10:08,230
the seconds counter so every second it

00:10:06,490 --> 00:10:12,040
would increment and automatically the

00:10:08,230 --> 00:10:14,550
view will get updated through that you

00:10:12,040 --> 00:10:17,560
are already seeing here that something

00:10:14,550 --> 00:10:18,280
like intuitively kind of weird happens

00:10:17,560 --> 00:10:21,250
in react.js

00:10:18,280 --> 00:10:23,860
you have some kind of your template here

00:10:21,250 --> 00:10:25,930
like HTML and you're mixing up

00:10:23,860 --> 00:10:28,000
javascript code is it in the same file

00:10:25,930 --> 00:10:29,530
in the same class with functions at

00:10:28,000 --> 00:10:32,380
first it was revealed because I think

00:10:29,530 --> 00:10:34,930
hey separation of concerns mixing like

00:10:32,380 --> 00:10:37,660
template with view JavaScript logic

00:10:34,930 --> 00:10:38,920
logically isn't really right but if you

00:10:37,660 --> 00:10:42,040
use it more and more you see the

00:10:38,920 --> 00:10:44,680
exterior again genius idea because this

00:10:42,040 --> 00:10:46,240
view JavaScript logic is actually

00:10:44,680 --> 00:10:47,710
operating on the template anyway so you

00:10:46,240 --> 00:10:50,740
have it directly next to each other in a

00:10:47,710 --> 00:10:53,110
file and also it kind of forces you to

00:10:50,740 --> 00:10:54,730
have in your JavaScript view class your

00:10:53,110 --> 00:10:56,410
only view logic and no JavaScript

00:10:54,730 --> 00:10:58,350
business logic anymore because then the

00:10:56,410 --> 00:11:00,150
files would work that way too big

00:10:58,350 --> 00:11:02,250
you would not be able to handle that

00:11:00,150 --> 00:11:04,070
anymore so it forces you actually in a

00:11:02,250 --> 00:11:07,230
good direction of separation of concerns

00:11:04,070 --> 00:11:09,540
here is another example where I have my

00:11:07,230 --> 00:11:12,060
render function and I basically have a

00:11:09,540 --> 00:11:16,290
like closure here which creates a list

00:11:12,060 --> 00:11:18,990
item with the text and then I return a

00:11:16,290 --> 00:11:21,600
list and for each item that was passed

00:11:18,990 --> 00:11:23,400
into my component I'm creating one of

00:11:21,600 --> 00:11:25,470
these list items so you can have you

00:11:23,400 --> 00:11:27,270
call kind of functions there and if you

00:11:25,470 --> 00:11:31,410
see that in bigger examples this is

00:11:27,270 --> 00:11:33,870
really powerful and this is like my

00:11:31,410 --> 00:11:36,300
to-do list and if I want to render this

00:11:33,870 --> 00:11:39,330
to-do list I could put in the items in

00:11:36,300 --> 00:11:42,570
here these are just a few examples

00:11:39,330 --> 00:11:43,980
I won't go much deeper in details on

00:11:42,570 --> 00:11:45,690
react because you can just read up in

00:11:43,980 --> 00:11:47,640
the documentation which is pretty good

00:11:45,690 --> 00:11:50,070
and there's lots of examples in there as

00:11:47,640 --> 00:11:52,340
well I want to focus now more on

00:11:50,070 --> 00:11:54,000
actually what react means on

00:11:52,340 --> 00:11:56,310
architecture type of your web

00:11:54,000 --> 00:11:59,100
application because somewhere you have

00:11:56,310 --> 00:12:00,450
no these nice react classes and you can

00:11:59,100 --> 00:12:04,920
assemble them together but you need to

00:12:00,450 --> 00:12:06,960
get data in there how to do it the most

00:12:04,920 --> 00:12:09,180
naive approach is just saying okay I

00:12:06,960 --> 00:12:11,730
have my back end I have my page with a

00:12:09,180 --> 00:12:14,550
tree of react components these all need

00:12:11,730 --> 00:12:16,950
kind of like some data like the yellow

00:12:14,550 --> 00:12:19,350
and the red and the blue and green kind

00:12:16,950 --> 00:12:21,510
of data blob so what I'm gonna do is

00:12:19,350 --> 00:12:25,260
when I want to render this page with all

00:12:21,510 --> 00:12:28,050
of these components I fetch the data

00:12:25,260 --> 00:12:30,060
they need in the backend print out a bit

00:12:28,050 --> 00:12:31,560
of Jason and then pass this jason in

00:12:30,060 --> 00:12:34,890
through the parent component here and

00:12:31,560 --> 00:12:37,130
then it goes down through the whole tier

00:12:34,890 --> 00:12:40,170
3 and the data is passed down there

00:12:37,130 --> 00:12:41,550
awesome works well that is actually not

00:12:40,170 --> 00:12:44,010
really true representation of what

00:12:41,550 --> 00:12:47,490
happens because I'm passing all this

00:12:44,010 --> 00:12:49,440
data here into the parent component of

00:12:47,490 --> 00:12:51,540
this tree and the parent component

00:12:49,440 --> 00:12:53,790
passes all the data to its children it

00:12:51,540 --> 00:12:55,260
actually looks like this so the parent

00:12:53,790 --> 00:12:58,310
knows about all the data about the

00:12:55,260 --> 00:13:02,460
children because it has to pass it down

00:12:58,310 --> 00:13:04,260
that is kind of problematic because

00:13:02,460 --> 00:13:08,040
remember we wanted to have

00:13:04,260 --> 00:13:08,790
self-contained reusable components what

00:13:08,040 --> 00:13:10,850
happens now

00:13:08,790 --> 00:13:13,039
because all of the parents

00:13:10,850 --> 00:13:14,329
our parent component notes about all the

00:13:13,039 --> 00:13:15,769
data dependencies the children need

00:13:14,329 --> 00:13:18,679
because they need to pass it down is

00:13:15,769 --> 00:13:20,929
that if we remove this component here we

00:13:18,679 --> 00:13:23,569
also have to remember to remove the data

00:13:20,929 --> 00:13:25,939
dependencies here and here and also from

00:13:23,569 --> 00:13:27,759
the back end so also my back-end needs

00:13:25,939 --> 00:13:30,529
to know about the state of the tree

00:13:27,759 --> 00:13:32,959
so it's not really usable the same thing

00:13:30,529 --> 00:13:34,879
if I add a new component in here down

00:13:32,959 --> 00:13:37,549
here I have to remember ok I have to add

00:13:34,879 --> 00:13:40,309
this to my back-end PHP somewhere and I

00:13:37,549 --> 00:13:42,169
also have to add get the data down here

00:13:40,309 --> 00:13:44,689
so the other way around is also not

00:13:42,169 --> 00:13:47,029
really reusable and in verse if I say I

00:13:44,689 --> 00:13:48,410
have this component and I just want to

00:13:47,029 --> 00:13:50,869
use this component in another kind of

00:13:48,410 --> 00:13:54,109
tree also there I have maybe to even

00:13:50,869 --> 00:13:56,809
duplicate or kind of duplicated data

00:13:54,109 --> 00:13:58,699
fetching in my back-end and also all the

00:13:56,809 --> 00:14:00,470
parents of where I want to use it

00:13:58,699 --> 00:14:03,769
anyways I have to know it as well also

00:14:00,470 --> 00:14:06,769
this approach is kind of easily prone to

00:14:03,769 --> 00:14:09,379
over fetching or under fetching without

00:14:06,769 --> 00:14:12,049
fetching I mean that the PHP back-end

00:14:09,379 --> 00:14:13,339
maybe fetches much too many data either

00:14:12,049 --> 00:14:15,470
because I already removed some

00:14:13,339 --> 00:14:17,929
components change something or because

00:14:15,470 --> 00:14:19,579
because I don't use much some fields of

00:14:17,929 --> 00:14:21,139
some entities that I'm fetching anymore

00:14:19,579 --> 00:14:22,549
so you are doing national work than we

00:14:21,139 --> 00:14:23,779
actually need to and transport in much

00:14:22,549 --> 00:14:29,199
more data over the wire than you need to

00:14:23,779 --> 00:14:31,879
and with under fetching say hello for me

00:14:29,199 --> 00:14:34,309
it's like a misunderstanding I mean it's

00:14:31,879 --> 00:14:36,769
like even even worse because I may have

00:14:34,309 --> 00:14:39,409
added a component forgot to add some PHP

00:14:36,769 --> 00:14:40,970
logic to it and then I'm not fetching

00:14:39,409 --> 00:14:44,809
the data in the fields of entities that

00:14:40,970 --> 00:14:47,769
I really need what can we do there are

00:14:44,809 --> 00:14:50,179
several ways servers for example would

00:14:47,769 --> 00:14:52,519
especially like bad for really big

00:14:50,179 --> 00:14:55,100
applications because in small to do

00:14:52,519 --> 00:14:57,679
example fine I can oversee this if I

00:14:55,100 --> 00:14:58,759
have to our components somewhere nobody

00:14:57,679 --> 00:15:00,970
can oversee this anymore

00:14:58,759 --> 00:15:03,949
so solutions for that is for example

00:15:00,970 --> 00:15:07,220
design pattern for react applications

00:15:03,949 --> 00:15:11,479
called flux flux introduces data stores

00:15:07,220 --> 00:15:13,699
to react that means I have stole my PHP

00:15:11,479 --> 00:15:15,139
back-end and my PhD back-end is not

00:15:13,699 --> 00:15:16,609
putting the data to the component

00:15:15,139 --> 00:15:19,159
directly but it's putting all the data

00:15:16,609 --> 00:15:21,230
into data stores and my react components

00:15:19,159 --> 00:15:22,040
can then just get the data out of data

00:15:21,230 --> 00:15:24,260
stores

00:15:22,040 --> 00:15:26,570
so the parent component does not need to

00:15:24,260 --> 00:15:28,580
know anymore what each of these child

00:15:26,570 --> 00:15:31,670
components data depend on this is like a

00:15:28,580 --> 00:15:33,980
big step forward it has a downside that

00:15:31,670 --> 00:15:36,380
I can still very easily overrun enough

00:15:33,980 --> 00:15:38,480
edge and I still have to fetch the right

00:15:36,380 --> 00:15:42,560
data from the back end so it's not ideal

00:15:38,480 --> 00:15:45,410
yet for a lot of applications something

00:15:42,560 --> 00:15:47,660
very new introduced by Facebook on the

00:15:45,410 --> 00:15:50,180
react conference I think earlier in

00:15:47,660 --> 00:15:54,500
February or end of January is called

00:15:50,180 --> 00:15:57,680
graph QL graph QL means that each of

00:15:54,500 --> 00:16:00,320
these components directly say in a query

00:15:57,680 --> 00:16:03,050
language what data it needs like I put

00:16:00,320 --> 00:16:05,360
them the data each component needs into

00:16:03,050 --> 00:16:09,830
it directly in a specified language into

00:16:05,360 --> 00:16:12,080
my JavaScript component and then there

00:16:09,830 --> 00:16:13,430
is something around there that goes

00:16:12,080 --> 00:16:16,160
through all the components in the tree

00:16:13,430 --> 00:16:18,890
recursively fetches all the requirements

00:16:16,160 --> 00:16:21,080
they have and then batches is all

00:16:18,890 --> 00:16:22,550
together sends it to a server or the

00:16:21,080 --> 00:16:24,980
server batches is all together and

00:16:22,550 --> 00:16:26,690
direct fetches all the data very

00:16:24,980 --> 00:16:29,870
intelligently and then puts it in a

00:16:26,690 --> 00:16:31,880
central data store unfortunately this is

00:16:29,870 --> 00:16:33,650
so far just the concept inside of

00:16:31,880 --> 00:16:35,150
Facebook they have not received released

00:16:33,650 --> 00:16:38,930
it yet but it's going to be open source

00:16:35,150 --> 00:16:42,820
soon a very similar thing that we came

00:16:38,930 --> 00:16:47,090
up with is having all these dependencies

00:16:42,820 --> 00:16:49,880
not in JavaScript but in our PHP code we

00:16:47,090 --> 00:16:53,390
call that requirements how does it work

00:16:49,880 --> 00:16:54,650
we have our react front-end tree like I

00:16:53,390 --> 00:16:56,120
have my profile page I have a

00:16:54,650 --> 00:16:58,130
publication item in there the

00:16:56,120 --> 00:16:59,750
publication item has like a few

00:16:58,130 --> 00:17:02,150
publication component for each of their

00:16:59,750 --> 00:17:04,370
items in the list about me left Columbus

00:17:02,150 --> 00:17:05,990
imaged some menu and maybe some

00:17:04,370 --> 00:17:09,680
components that prints out the

00:17:05,990 --> 00:17:12,199
institution this is my reactors

00:17:09,680 --> 00:17:16,449
front-end componentry what I can do then

00:17:12,199 --> 00:17:20,209
is I can map this directly to PHP

00:17:16,449 --> 00:17:22,490
classes and small components in PHP so

00:17:20,209 --> 00:17:23,900
if our request comes in to fetch all

00:17:22,490 --> 00:17:25,490
this data for this component tree it

00:17:23,900 --> 00:17:27,730
goes to an endpoint full profile and

00:17:25,490 --> 00:17:30,320
there I have the same tree there and

00:17:27,730 --> 00:17:32,960
each of these PHP classes are

00:17:30,320 --> 00:17:35,160
responsible for fetching all the data

00:17:32,960 --> 00:17:39,030
the the corresponding form the

00:17:35,160 --> 00:17:42,060
component needs very similar to graph QL

00:17:39,030 --> 00:17:45,900
just like a way but differently where

00:17:42,060 --> 00:17:48,180
which sings atom it works the same way

00:17:45,900 --> 00:17:49,740
if I just have a subset of this

00:17:48,180 --> 00:17:51,180
component if I just have the left clam

00:17:49,740 --> 00:17:55,230
and want to place it somewhere else I

00:17:51,180 --> 00:17:57,510
can also say okay I'm having this small

00:17:55,230 --> 00:17:58,680
tree left home knows about its children

00:17:57,510 --> 00:18:02,190
somehow but doesn't know about these

00:17:58,680 --> 00:18:04,350
data dependencies and then I can request

00:18:02,190 --> 00:18:07,370
it the same way and has the same kind of

00:18:04,350 --> 00:18:12,210
small mini controllers in all my PHP

00:18:07,370 --> 00:18:15,600
application and then these control these

00:18:12,210 --> 00:18:17,490
small classes are I have I can add data

00:18:15,600 --> 00:18:19,170
dependence to it easily I can remove

00:18:17,490 --> 00:18:23,130
them it's just four there and I'm not

00:18:19,170 --> 00:18:24,630
influencing anything else remember we

00:18:23,130 --> 00:18:27,060
wanted to have really self-contained

00:18:24,630 --> 00:18:27,660
components so actually in our tree here

00:18:27,060 --> 00:18:31,260
in the backend

00:18:27,660 --> 00:18:33,360
each of these PHP component classes have

00:18:31,260 --> 00:18:35,310
to fetch all the data that is needed so

00:18:33,360 --> 00:18:37,380
what can happen is this big profile

00:18:35,310 --> 00:18:39,090
component needs kind of says okay I want

00:18:37,380 --> 00:18:40,650
to fetch an account the publication's

00:18:39,090 --> 00:18:42,030
component is also the account and maybe

00:18:40,650 --> 00:18:43,650
also some publications about me

00:18:42,030 --> 00:18:45,750
component also that's a query for the

00:18:43,650 --> 00:18:47,640
account and here I'm doing like single

00:18:45,750 --> 00:18:50,640
gets for all the publication item to my

00:18:47,640 --> 00:18:53,010
database and then I'm very quickly in a

00:18:50,640 --> 00:18:55,770
large application having hundreds of

00:18:53,010 --> 00:18:57,210
requests to our database which are

00:18:55,770 --> 00:18:59,550
really not optimal because they're

00:18:57,210 --> 00:19:03,060
either duplicated or I'm just instead of

00:18:59,550 --> 00:19:05,040
doing like one big inquiry or kind of

00:19:03,060 --> 00:19:09,350
other query I'm doing like single gates

00:19:05,040 --> 00:19:12,000
so that very clearly can get very slow

00:19:09,350 --> 00:19:13,920
which means that you actually should not

00:19:12,000 --> 00:19:15,960
have one of these computer components

00:19:13,920 --> 00:19:17,940
have fetched data directly so not doing

00:19:15,960 --> 00:19:19,590
like a query to an HTTP source or a

00:19:17,940 --> 00:19:23,100
database query directly because this is

00:19:19,590 --> 00:19:26,670
slow instead you can just require stuff

00:19:23,100 --> 00:19:28,380
and this is an idea actually also coming

00:19:26,670 --> 00:19:30,510
from Facebook and also influenced graph

00:19:28,380 --> 00:19:33,090
QL what I talked about earlier very

00:19:30,510 --> 00:19:34,890
quickly if you have sometimes isn't like

00:19:33,090 --> 00:19:37,410
slightly older talk from Q corn from

00:19:34,890 --> 00:19:39,030
2011 about the evolution of code is on a

00:19:37,410 --> 00:19:41,550
Facebook which is really interesting how

00:19:39,030 --> 00:19:45,480
they evolved and how they went from like

00:19:41,550 --> 00:19:46,860
a basic PHP files thing like very piece

00:19:45,480 --> 00:19:49,020
before II actually

00:19:46,860 --> 00:19:50,760
to a very sophisticated architecture of

00:19:49,020 --> 00:19:52,380
course was react and graphically and

00:19:50,760 --> 00:19:54,890
everything is already kind of outdated

00:19:52,380 --> 00:19:57,750
but it's still interesting to watch and

00:19:54,890 --> 00:20:00,660
the idea behind that is that you have

00:19:57,750 --> 00:20:02,370
something like a preparer fetching all

00:20:00,660 --> 00:20:05,940
the requirements from all the components

00:20:02,370 --> 00:20:08,790
you have fro your site so this is all

00:20:05,940 --> 00:20:11,309
PHP site what's happening here and there

00:20:08,790 --> 00:20:13,020
is a preparer and it asks all widgets or

00:20:11,309 --> 00:20:18,299
component or PHP classes however you

00:20:13,020 --> 00:20:20,400
call them hey what data do you need then

00:20:18,299 --> 00:20:22,919
it patches all these requirements

00:20:20,400 --> 00:20:25,740
together in an intelligent way so it

00:20:22,919 --> 00:20:27,720
removes supplications it patches calls

00:20:25,740 --> 00:20:29,580
together the instead of one HTTP call

00:20:27,720 --> 00:20:31,770
you just make two instead of ten each

00:20:29,580 --> 00:20:33,210
because you make one and so on and

00:20:31,770 --> 00:20:35,370
introduces caching all kinds of other

00:20:33,210 --> 00:20:38,280
optimizations and then it goes to some

00:20:35,370 --> 00:20:42,270
services or databases or anything and

00:20:38,280 --> 00:20:43,919
once all the data is there the preparer

00:20:42,270 --> 00:20:48,120
then distributes the data back to the

00:20:43,919 --> 00:20:50,460
components where they needed it in code

00:20:48,120 --> 00:20:52,799
it could not look like this at our PHP

00:20:50,460 --> 00:20:55,320
component classes just have a method

00:20:52,799 --> 00:20:58,140
that where calls could be collect which

00:20:55,320 --> 00:20:59,640
returns an array of requirements for

00:20:58,140 --> 00:21:01,169
example here we have required for an

00:20:59,640 --> 00:21:05,280
entity saying okay I want to have the

00:21:01,169 --> 00:21:07,830
account with this ID and the preparer

00:21:05,280 --> 00:21:09,630
goes over all classes that I have in my

00:21:07,830 --> 00:21:11,820
tree fetches all the requirements and

00:21:09,630 --> 00:21:13,500
for forcing and optimizations are what

00:21:11,820 --> 00:21:15,419
you can do very easily much of

00:21:13,500 --> 00:21:18,960
optimizations there you can cache stuff

00:21:15,419 --> 00:21:21,090
if even in the request centrally you can

00:21:18,960 --> 00:21:23,040
introduce stuff like multi gets instead

00:21:21,090 --> 00:21:24,809
of single gets for example for at work

00:21:23,040 --> 00:21:27,240
into the cache instead of just doing one

00:21:24,809 --> 00:21:29,190
request to memcache to fetch one key you

00:21:27,240 --> 00:21:31,590
can just fetch multiple keys advanced

00:21:29,190 --> 00:21:34,049
you can introduce stuff like futures

00:21:31,590 --> 00:21:35,880
where you say ok I'm starting an HTTP

00:21:34,049 --> 00:21:39,059
request which can be as in Kronus lee

00:21:35,880 --> 00:21:40,620
also in PHP with scroll or dust using

00:21:39,059 --> 00:21:42,540
socket communication or I'm just doing

00:21:40,620 --> 00:21:45,500
an as in Kronus Postgres query which is

00:21:42,540 --> 00:21:47,640
possible since PHP five six now yay and

00:21:45,500 --> 00:21:49,590
then I'm doing other things that are

00:21:47,640 --> 00:21:51,750
synchronous and in the end I'm waiting

00:21:49,590 --> 00:21:56,040
for these calls to finish and I'm much

00:21:51,750 --> 00:21:58,740
faster this way unfortunately in a lot

00:21:56,040 --> 00:22:00,060
of cases we actually have not that

00:21:58,740 --> 00:22:01,850
simple components

00:22:00,060 --> 00:22:04,710
because oftentimes we have data

00:22:01,850 --> 00:22:08,790
dependencies within one component one

00:22:04,710 --> 00:22:11,550
widget we can do that with callbacks and

00:22:08,790 --> 00:22:15,990
say we introduced callbacks there that

00:22:11,550 --> 00:22:18,570
means I am returning here some kind of a

00:22:15,990 --> 00:22:20,670
collection object with an array of my

00:22:18,570 --> 00:22:23,280
requirements that I have and once this

00:22:20,670 --> 00:22:24,600
is fulfilled this callback is executed

00:22:23,280 --> 00:22:27,630
which returns another set of

00:22:24,600 --> 00:22:30,690
requirements and if you imagine now this

00:22:27,630 --> 00:22:34,380
is actually as many stated stages your

00:22:30,690 --> 00:22:36,990
code looks like this because you have a

00:22:34,380 --> 00:22:39,870
callback hell so it works and we did

00:22:36,990 --> 00:22:42,660
fall on time until PHP 5.5 came out

00:22:39,870 --> 00:22:47,660
which introduced generators who has use

00:22:42,660 --> 00:22:50,190
generators before like 10 maybe

00:22:47,660 --> 00:22:54,000
generators is probably the most awesome

00:22:50,190 --> 00:22:57,600
feature ever in PHP 55 because it allows

00:22:54,000 --> 00:23:00,000
you to write very efficient shorthand

00:22:57,600 --> 00:23:01,950
iterators in a function so basically you

00:23:00,000 --> 00:23:04,290
can turn a function into an iterator

00:23:01,950 --> 00:23:06,390
that means the preparer calls this

00:23:04,290 --> 00:23:07,890
collect method and we get back an

00:23:06,390 --> 00:23:09,810
iterator and it can iterate over that

00:23:07,890 --> 00:23:11,520
and every time I have this yield

00:23:09,810 --> 00:23:15,900
statement basically the execution of the

00:23:11,520 --> 00:23:18,240
function stops it returns or yields this

00:23:15,900 --> 00:23:20,160
value back to the preparer the preparer

00:23:18,240 --> 00:23:22,680
can then just say okay I'm fulfilling

00:23:20,160 --> 00:23:24,860
everything and when everything is

00:23:22,680 --> 00:23:26,790
fulfilled all the data is there

00:23:24,860 --> 00:23:29,310
execution of the function starts here

00:23:26,790 --> 00:23:31,830
again and I can do other stuff also I

00:23:29,310 --> 00:23:35,970
can add any kind of PHP code in here as

00:23:31,830 --> 00:23:39,330
I want what we are seeing now is that

00:23:35,970 --> 00:23:41,730
for some reason we have also the service

00:23:39,330 --> 00:23:44,070
entity requirement thing which basically

00:23:41,730 --> 00:23:45,540
returns entity but we also have like

00:23:44,070 --> 00:23:48,690
service requirements which calls a

00:23:45,540 --> 00:23:50,850
service method at the service class and

00:23:48,690 --> 00:23:53,880
you see in here this looks kind of like

00:23:50,850 --> 00:23:56,490
a function name so we have the

00:23:53,880 --> 00:23:59,030
possibility to call functions at classes

00:23:56,490 --> 00:24:01,200
but I don't have any connection with

00:23:59,030 --> 00:24:03,750
introspection anymore we can say ok I

00:24:01,200 --> 00:24:05,490
can click on this name in my IDE and get

00:24:03,750 --> 00:24:07,950
exactly to the method I also come to any

00:24:05,490 --> 00:24:09,420
static is it calls analysis or anything

00:24:07,950 --> 00:24:12,230
kind of that I don't have any

00:24:09,420 --> 00:24:16,039
possibilities to autocomplete

00:24:12,230 --> 00:24:17,840
the properties of this method the

00:24:16,039 --> 00:24:20,749
arguments that I have there so this is

00:24:17,840 --> 00:24:23,809
kind of weird it is and we start about

00:24:20,749 --> 00:24:25,909
long about this and actually with trades

00:24:23,809 --> 00:24:31,460
there is a way you can trick the IDE to

00:24:25,909 --> 00:24:33,489
make to make this code much nicer and in

00:24:31,460 --> 00:24:37,039
the end it could look like this so

00:24:33,489 --> 00:24:39,109
instead of having like the method name

00:24:37,039 --> 00:24:42,649
hard-coded somewhere I can have just

00:24:39,109 --> 00:24:44,690
this weird get call study method at my

00:24:42,649 --> 00:24:48,320
service class and then I can just call

00:24:44,690 --> 00:24:50,090
get by ID on it what is happening in the

00:24:48,320 --> 00:24:52,639
background is that not the get by ID

00:24:50,090 --> 00:24:54,590
function is executed I still couldn't

00:24:52,639 --> 00:24:57,049
click on it go to the function there and

00:24:54,590 --> 00:24:58,850
also have introspection on the arguments

00:24:57,049 --> 00:25:01,639
and everything but the function is not

00:24:58,850 --> 00:25:04,639
really executed but what internally

00:25:01,639 --> 00:25:08,119
happens is just as the array is called

00:25:04,639 --> 00:25:10,159
with the class name and the method name

00:25:08,119 --> 00:25:12,019
and the arguments that I can later on

00:25:10,159 --> 00:25:13,970
use to call this method in the preparer

00:25:12,019 --> 00:25:16,279
after batching everything together the

00:25:13,970 --> 00:25:21,169
way it works is that this job service I

00:25:16,279 --> 00:25:25,639
think implements a trait which just has

00:25:21,169 --> 00:25:31,820
a static function get call that just

00:25:25,639 --> 00:25:33,470
returns some proxy object here and it's

00:25:31,820 --> 00:25:35,539
annotated with returning actually this

00:25:33,470 --> 00:25:37,549
and this is the key thing so the ID ID

00:25:35,539 --> 00:25:39,019
things okay when I call this cat call

00:25:37,549 --> 00:25:42,470
method I actually get an instant of job

00:25:39,019 --> 00:25:44,629
service back even if I don't and then

00:25:42,470 --> 00:25:46,580
allows me to autocomplete everything

00:25:44,629 --> 00:25:48,169
here and navigate there and have find

00:25:46,580 --> 00:25:50,659
usages and everything in there but it

00:25:48,169 --> 00:25:52,369
does actually it ends then returns some

00:25:50,659 --> 00:25:53,629
kind of a proxy object and this looks

00:25:52,369 --> 00:25:58,029
really Java saying service would come

00:25:53,629 --> 00:26:00,859
and factory proxy bingo and this proxy

00:25:58,029 --> 00:26:02,570
just as a magic call method so every

00:26:00,859 --> 00:26:04,519
time it is called it just returns the

00:26:02,570 --> 00:26:06,769
class name the method name the arguments

00:26:04,519 --> 00:26:08,059
that was cool and then I can the

00:26:06,769 --> 00:26:11,929
preparer can use that for batching

00:26:08,059 --> 00:26:15,139
everything together later on so you can

00:26:11,929 --> 00:26:16,999
have sine of this veered PHP kind of

00:26:15,139 --> 00:26:21,470
magic features to do something really

00:26:16,999 --> 00:26:22,970
useful but even then we have nowaday

00:26:21,470 --> 00:26:24,409
table dependencies whose in one richard

00:26:22,970 --> 00:26:26,140
we have these different stages we made

00:26:24,409 --> 00:26:29,960
it nice with generators and everything

00:26:26,140 --> 00:26:33,230
so in all of cases it's in more context

00:26:29,960 --> 00:26:36,530
because we have data dependencies even

00:26:33,230 --> 00:26:38,420
within some kind of between widgets like

00:26:36,530 --> 00:26:40,040
if I have my publication list for

00:26:38,420 --> 00:26:42,440
example I may be me doing a solo query

00:26:40,040 --> 00:26:44,870
for all the publications that start with

00:26:42,440 --> 00:26:46,880
so name or have a certain keyword I get

00:26:44,870 --> 00:26:48,890
some ideas back and then I want to have

00:26:46,880 --> 00:26:50,870
publication items exactly for these IDs

00:26:48,890 --> 00:26:53,180
you have these dependencies there and

00:26:50,870 --> 00:26:54,950
also we did not talk yet how I can

00:26:53,180 --> 00:26:58,760
assemble this tree of components

00:26:54,950 --> 00:27:01,120
actually on the PHP side like for some

00:26:58,760 --> 00:27:03,650
reason somehow I have to specify what

00:27:01,120 --> 00:27:07,940
children on the PHP side as well what

00:27:03,650 --> 00:27:09,980
should and profile actually has we are

00:27:07,940 --> 00:27:13,910
doing that with something called widget

00:27:09,980 --> 00:27:17,720
requirements so that means and pre-fills

00:27:13,910 --> 00:27:19,190
so that means that the profile component

00:27:17,720 --> 00:27:22,640
on the PHP that is actually requiring

00:27:19,190 --> 00:27:24,800
the publication component as a child and

00:27:22,640 --> 00:27:28,370
also the publication component thus then

00:27:24,800 --> 00:27:30,590
maybe it's magic and it's solar queries

00:27:28,370 --> 00:27:33,050
or something like this and then based on

00:27:30,590 --> 00:27:35,510
that it's requirement requiring a list

00:27:33,050 --> 00:27:39,050
of publication items and professors

00:27:35,510 --> 00:27:42,080
publication items with certain IDs and

00:27:39,050 --> 00:27:45,380
code for us it looks like this we have

00:27:42,080 --> 00:27:47,540
here a component that new is named

00:27:45,380 --> 00:27:49,910
publication keyword search and the

00:27:47,540 --> 00:27:52,910
collect method first says okay

00:27:49,910 --> 00:27:56,270
please preparer give me all publications

00:27:52,910 --> 00:27:58,790
with these keywords the preparer false

00:27:56,270 --> 00:27:59,990
will says and after that it says okay

00:27:58,790 --> 00:28:02,510
I'm gonna iterating over all this

00:27:59,990 --> 00:28:04,580
population and have a Richard or

00:28:02,510 --> 00:28:06,230
component requirements saying okay for

00:28:04,580 --> 00:28:08,720
each publication I want to have now a

00:28:06,230 --> 00:28:10,580
publication item component and it should

00:28:08,720 --> 00:28:15,590
be the publication atom component for

00:28:10,580 --> 00:28:18,890
this publication ID my publication item

00:28:15,590 --> 00:28:21,170
component in turn says okay I'm awaiting

00:28:18,890 --> 00:28:25,370
some publication ID because I needed an

00:28:21,170 --> 00:28:27,950
ID to be able to render this is

00:28:25,370 --> 00:28:29,390
prefilled through here but I also can

00:28:27,950 --> 00:28:31,700
just do a get request to the publication

00:28:29,390 --> 00:28:33,500
root component with ID 15 that's why

00:28:31,700 --> 00:28:35,750
it's called request data or requirement

00:28:33,500 --> 00:28:37,160
and say okay I want to have that if I

00:28:35,750 --> 00:28:37,850
just want to render this publication

00:28:37,160 --> 00:28:41,120
item in

00:28:37,850 --> 00:28:42,980
dependently and if i have that and say

00:28:41,120 --> 00:28:49,340
okay you please give me the publication

00:28:42,980 --> 00:28:51,910
because i need that so to sum it up how

00:28:49,340 --> 00:28:54,799
this actually works in the back end is

00:28:51,910 --> 00:28:56,390
first the request comes in for the

00:28:54,799 --> 00:28:58,220
profile component profile components is

00:28:56,390 --> 00:28:59,990
Oh fine I need some data and actually

00:28:58,220 --> 00:29:01,490
also I want to have like a publication

00:28:59,990 --> 00:29:03,110
component about me component left

00:29:01,490 --> 00:29:05,000
complement component institutional

00:29:03,110 --> 00:29:07,700
component as children so please also

00:29:05,000 --> 00:29:10,700
fetch the data for them so the preparer

00:29:07,700 --> 00:29:12,980
goes then okay it says ask us okay I

00:29:10,700 --> 00:29:14,390
have these new components these

00:29:12,980 --> 00:29:16,460
components tell me what you need it

00:29:14,390 --> 00:29:18,110
fulfills everything it also asked the

00:29:16,460 --> 00:29:19,970
profile component again you have

00:29:18,110 --> 00:29:21,919
actually need more data for some reason

00:29:19,970 --> 00:29:25,909
because there is this yield iterator in

00:29:21,919 --> 00:29:27,409
there then it for food solving asks all

00:29:25,909 --> 00:29:28,669
components again here's these components

00:29:27,409 --> 00:29:31,909
are already fine they have all the data

00:29:28,669 --> 00:29:34,760
left there are few more children add it

00:29:31,909 --> 00:29:36,770
to our tree about me component actually

00:29:34,760 --> 00:29:37,340
needs more data it's kind of more

00:29:36,770 --> 00:29:39,740
complex

00:29:37,340 --> 00:29:41,390
then our profile component is fine only

00:29:39,740 --> 00:29:44,360
my about me my image component need more

00:29:41,390 --> 00:29:45,710
data and in the next stage it of it

00:29:44,360 --> 00:29:47,299
fulfills everything again batches all

00:29:45,710 --> 00:29:49,460
together in the next stage it asks again

00:29:47,299 --> 00:29:51,860
hey about me component tool it's not

00:29:49,460 --> 00:29:55,159
certified in small data and at some

00:29:51,860 --> 00:29:58,460
point we are done because all components

00:29:55,159 --> 00:30:00,380
have all the data they need and then for

00:29:58,460 --> 00:30:05,120
somehow we have to get this data to

00:30:00,380 --> 00:30:07,250
react for that each of these components

00:30:05,120 --> 00:30:09,440
just implemented get data method whether

00:30:07,250 --> 00:30:11,900
saying okay this is the data we want to

00:30:09,440 --> 00:30:14,539
actually encode into J'son and put into

00:30:11,900 --> 00:30:16,789
react so some keys some well use some

00:30:14,539 --> 00:30:20,710
arrays and also the list of sub

00:30:16,789 --> 00:30:23,809
components we have here during rendering

00:30:20,710 --> 00:30:25,460
before really passing that to react the

00:30:23,809 --> 00:30:27,860
skate data method is called on every

00:30:25,460 --> 00:30:29,840
component in our tree and this is then

00:30:27,860 --> 00:30:32,210
resolved to like one big tree structure

00:30:29,840 --> 00:30:34,520
so we have here the sub components that

00:30:32,210 --> 00:30:36,230
I in here and if you look at the Jason

00:30:34,520 --> 00:30:38,419
that comes out of it each of the

00:30:36,230 --> 00:30:40,490
component has like a name which

00:30:38,419 --> 00:30:43,429
component actually is an ID which is

00:30:40,490 --> 00:30:47,090
unique because it's always good to have

00:30:43,429 --> 00:30:48,740
a unique ID yeah and some data and in

00:30:47,090 --> 00:30:50,090
there we have sub components also have

00:30:48,740 --> 00:30:54,100
ID and the component

00:30:50,090 --> 00:31:01,070
in some data and also rays of components

00:30:54,100 --> 00:31:04,370
in react it would then pass the path as

00:31:01,070 --> 00:31:08,570
properties into our class so I can use

00:31:04,370 --> 00:31:10,460
the key from here in here so this is my

00:31:08,570 --> 00:31:13,970
parent component that I'm referencing

00:31:10,460 --> 00:31:17,900
here I also can use a number and then

00:31:13,970 --> 00:31:19,940
can just include sub my sub component

00:31:17,900 --> 00:31:25,220
and then pass all properties of the sub

00:31:19,940 --> 00:31:26,899
component in here okay so this data sub

00:31:25,220 --> 00:31:28,789
component is and passed into this

00:31:26,899 --> 00:31:32,000
component and I don't have to reference

00:31:28,789 --> 00:31:33,950
a okay actually I want to pass like rule

00:31:32,000 --> 00:31:38,149
value into here this is all done

00:31:33,950 --> 00:31:43,309
automatically same thing with this array

00:31:38,149 --> 00:31:46,270
and list of components and this is like

00:31:43,309 --> 00:31:51,130
one of example for the sub component

00:31:46,270 --> 00:31:54,049
that works all very well if we just have

00:31:51,130 --> 00:31:58,130
put off Jason from our PHP application

00:31:54,049 --> 00:31:59,899
and user than in our front end but

00:31:58,130 --> 00:32:03,260
oftentimes what you also want to do is

00:31:59,899 --> 00:32:05,659
not just have this okay there is some

00:32:03,260 --> 00:32:07,279
blank page render then there's some Java

00:32:05,659 --> 00:32:10,610
Script doing a dress request and then

00:32:07,279 --> 00:32:11,980
actually only after that my application

00:32:10,610 --> 00:32:14,330
is going to be rendered you also

00:32:11,980 --> 00:32:16,940
oftentimes as a need for suicide to

00:32:14,330 --> 00:32:18,770
rendering be it for search engine

00:32:16,940 --> 00:32:20,090
optimization two reasons because a lot

00:32:18,770 --> 00:32:23,240
of search engines don't execute

00:32:20,090 --> 00:32:24,770
JavaScript some do but most don't be it

00:32:23,240 --> 00:32:28,039
just for better user experience that

00:32:24,770 --> 00:32:29,179
there's just content there earlier even

00:32:28,039 --> 00:32:30,710
if you just safe like hundred

00:32:29,179 --> 00:32:32,480
milliseconds two milliseconds it's still

00:32:30,710 --> 00:32:34,130
noticeable and people will engage better

00:32:32,480 --> 00:32:37,970
with your page if there is something

00:32:34,130 --> 00:32:40,659
visible there already and the nice thing

00:32:37,970 --> 00:32:42,799
is that react actually is very easily

00:32:40,659 --> 00:32:45,020
because it operates on a virtual Dom

00:32:42,799 --> 00:32:47,600
very easily be able to render something

00:32:45,020 --> 00:32:50,600
in the backend without a browser you can

00:32:47,600 --> 00:32:52,700
just include it in no chairs and put

00:32:50,600 --> 00:32:55,630
data in there and then it renders it to

00:32:52,700 --> 00:32:58,059
a string and you can just put it out so

00:32:55,630 --> 00:33:00,740
for our peeps free application that

00:32:58,059 --> 00:33:02,269
actually let leads to three different

00:33:00,740 --> 00:33:06,649
possible approaches that we

00:33:02,269 --> 00:33:10,219
I come up with first one is the v8

00:33:06,649 --> 00:33:13,009
extension for PHP yes there is a v8

00:33:10,219 --> 00:33:16,399
extension for PHP which binds the v8 C

00:33:13,009 --> 00:33:19,940
library and exposes the interface for

00:33:16,399 --> 00:33:21,259
PHP so what you can do then is as in the

00:33:19,940 --> 00:33:23,979
backend say I have this string of

00:33:21,259 --> 00:33:26,239
JavaScript please PLEASE v8 engine

00:33:23,979 --> 00:33:28,190
executed for me and the v8 engine is

00:33:26,239 --> 00:33:30,529
actually the one used in Chrome which is

00:33:28,190 --> 00:33:32,599
very fast and it's also way faster than

00:33:30,529 --> 00:33:35,149
you would expect it to be so the setup

00:33:32,599 --> 00:33:36,829
could be that the reakless comes into my

00:33:35,149 --> 00:33:39,469
PHP process I wanted to do server-side

00:33:36,829 --> 00:33:40,879
rendering I have my preparer and get all

00:33:39,469 --> 00:33:43,759
the data over there and in the end of a

00:33:40,879 --> 00:33:47,209
JSON array and then I'm assembling some

00:33:43,759 --> 00:33:49,779
JavaScript string there pass it to my v8

00:33:47,209 --> 00:33:52,129
library in there reactors running

00:33:49,779 --> 00:33:54,589
renderings it all on the back end I get

00:33:52,129 --> 00:33:59,359
back an HTML string and then I can just

00:33:54,589 --> 00:34:01,909
pass it to come out to the client again

00:33:59,359 --> 00:34:04,700
this is faster than you're expecting now

00:34:01,909 --> 00:34:07,789
the only downside of it is that because

00:34:04,700 --> 00:34:10,460
PHP is a shared nothing architecture or

00:34:07,789 --> 00:34:12,619
a request that for every request you're

00:34:10,460 --> 00:34:14,929
compiling the JavaScript and especially

00:34:12,619 --> 00:34:16,819
also the react library and you so you

00:34:14,929 --> 00:34:19,339
have some kind of overhead there if that

00:34:16,819 --> 00:34:21,529
is the bottleneck for you you can use

00:34:19,339 --> 00:34:23,569
some kind of other approach for example

00:34:21,529 --> 00:34:25,760
having like a small node.js proxy in

00:34:23,569 --> 00:34:28,129
front of your PHP application you can do

00:34:25,760 --> 00:34:29,690
just do this on localhost so you have an

00:34:28,129 --> 00:34:31,730
additional like network hope but it's on

00:34:29,690 --> 00:34:33,289
localhost so it shouldn't have met much

00:34:31,730 --> 00:34:35,750
delays and you can also scale it very

00:34:33,289 --> 00:34:38,299
well that means the request comes in the

00:34:35,750 --> 00:34:40,099
node ref proxy just follows it the PHP

00:34:38,299 --> 00:34:42,529
process does all the things fetches all

00:34:40,099 --> 00:34:45,470
the data and calls it into JSON passes

00:34:42,529 --> 00:34:47,450
it back to the node.js proxy and there

00:34:45,470 --> 00:34:50,029
are the responses then rendered through

00:34:47,450 --> 00:34:52,299
the reactor into HTML and if I just need

00:34:50,029 --> 00:34:54,740
Jason I just pass it back as well

00:34:52,299 --> 00:34:57,740
another approach would be to have a

00:34:54,740 --> 00:35:00,160
small service possibly also locally

00:34:57,740 --> 00:35:03,349
that's just running next to my PHP

00:35:00,160 --> 00:35:05,599
application which I'm calling there so

00:35:03,349 --> 00:35:07,609
so the request comes in in my PHP

00:35:05,599 --> 00:35:09,650
application I'm fetching Funes preparing

00:35:07,609 --> 00:35:13,549
stuff or fetching all the data then I

00:35:09,650 --> 00:35:15,890
have a JSON object I'm calling over HTTP

00:35:13,549 --> 00:35:17,300
over localhost most likely as

00:35:15,890 --> 00:35:19,250
or no gesture that's running their

00:35:17,300 --> 00:35:21,110
reactors running in there it's all pre

00:35:19,250 --> 00:35:22,880
compiled and everything and then it

00:35:21,110 --> 00:35:29,270
passes back HTML that I just passed back

00:35:22,880 --> 00:35:32,180
to the current from our experience these

00:35:29,270 --> 00:35:35,720
two approaches here are slightly faster

00:35:32,180 --> 00:35:37,700
than liber8 like v8 inside PHP because

00:35:35,720 --> 00:35:39,500
of the not needed recompilation of the

00:35:37,700 --> 00:35:42,260
req library but we're talking here about

00:35:39,500 --> 00:35:43,760
like 50 60 milliseconds depending on how

00:35:42,260 --> 00:35:45,980
large the pages are and how fast the

00:35:43,760 --> 00:35:48,980
service are if you want to do go this

00:35:45,980 --> 00:35:50,450
route please measure it because it could

00:35:48,980 --> 00:35:55,130
be different from your application for

00:35:50,450 --> 00:35:58,910
your application last now that I have

00:35:55,130 --> 00:36:00,710
all my components and in JavaScript we

00:35:58,910 --> 00:36:01,940
also have to think about how the browser

00:36:00,710 --> 00:36:04,670
is loading all these JavaScript

00:36:01,940 --> 00:36:07,280
components because we probably have

00:36:04,670 --> 00:36:10,400
every component in separate file which

00:36:07,280 --> 00:36:12,710
is kind of nice but for some somehow we

00:36:10,400 --> 00:36:14,840
have to bundle it otherwise our browser

00:36:12,710 --> 00:36:16,580
for if I have 200 components on one page

00:36:14,840 --> 00:36:17,870
and we want to render it not server side

00:36:16,580 --> 00:36:21,380
but also client side have all these

00:36:17,870 --> 00:36:22,640
interactions there we are doing 200 HTTP

00:36:21,380 --> 00:36:24,860
requests to fetch all these components

00:36:22,640 --> 00:36:28,370
plus additional CSS plus images and so

00:36:24,860 --> 00:36:30,140
on especially since not everyone is

00:36:28,370 --> 00:36:32,090
using HTTP 200 yet which would solve

00:36:30,140 --> 00:36:34,730
that with connection pooling everything

00:36:32,090 --> 00:36:39,550
this is what mean pages get very very

00:36:34,730 --> 00:36:41,900
slow there are lots of possibilities for

00:36:39,550 --> 00:36:44,450
how to do this and how to bundle a

00:36:41,900 --> 00:36:46,280
different JavaScript files together if

00:36:44,450 --> 00:36:48,500
it works for you find the solution that

00:36:46,280 --> 00:36:51,470
works for you like this browserify and

00:36:48,500 --> 00:36:54,860
why loader and you can just insert

00:36:51,470 --> 00:36:56,750
custom script text if you need it or you

00:36:54,860 --> 00:36:58,340
can use webpack which i quite like

00:36:56,750 --> 00:37:00,230
because it allows loading not only

00:36:58,340 --> 00:37:03,920
javascript but also all kinds of other

00:37:00,230 --> 00:37:06,680
assets like CSS and images and which for

00:37:03,920 --> 00:37:09,500
us because we have component specific

00:37:06,680 --> 00:37:10,880
CSS sometimes it's kind of nice that we

00:37:09,500 --> 00:37:14,180
can just bundle this together with there

00:37:10,880 --> 00:37:16,100
as well it has a bit of a small steep

00:37:14,180 --> 00:37:17,690
learning curve especially compared to

00:37:16,100 --> 00:37:23,410
other solutions like browserify for

00:37:17,690 --> 00:37:23,410
example but it is kind of nice so

00:37:23,510 --> 00:37:29,900
let's take a short break that was like a

00:37:26,510 --> 00:37:33,380
lot and also we have that many

00:37:29,900 --> 00:37:35,330
components on one page and I bet that

00:37:33,380 --> 00:37:37,100
some of you are thinking now that's kind

00:37:35,330 --> 00:37:38,150
of really nice and I have all the small

00:37:37,100 --> 00:37:39,920
components I couldn't put them at

00:37:38,150 --> 00:37:41,600
everywhere but doesn't it like make it

00:37:39,920 --> 00:37:43,210
really really hard and complicated to be

00:37:41,600 --> 00:37:47,840
back as something as we're not working

00:37:43,210 --> 00:37:50,950
it can be one solution are on that or

00:37:47,840 --> 00:37:54,380
for that that you should do anyways is

00:37:50,950 --> 00:37:56,150
take the time and create tooling to

00:37:54,380 --> 00:37:58,370
actually really debug your application

00:37:56,150 --> 00:37:59,600
regardless how is looking it's very good

00:37:58,370 --> 00:38:02,720
to have very good tooling to know

00:37:59,600 --> 00:38:05,000
exactly what's happening regardless if

00:38:02,720 --> 00:38:08,240
it's def or production on hand who's

00:38:05,000 --> 00:38:10,580
using symphony to who's using then

00:38:08,240 --> 00:38:13,370
framework to like okay this probably

00:38:10,580 --> 00:38:16,010
like to use to sort of the like combined

00:38:13,370 --> 00:38:17,630
to sort all or laravel or any kind of

00:38:16,010 --> 00:38:19,700
things most of these frameworks actually

00:38:17,630 --> 00:38:22,520
allow for example to have these debug

00:38:19,700 --> 00:38:23,810
toolbars in here which shows you lots of

00:38:22,520 --> 00:38:25,340
useful information about what's

00:38:23,810 --> 00:38:27,290
happening and of what was happening in

00:38:25,340 --> 00:38:29,540
the request like the amount how long it

00:38:27,290 --> 00:38:31,580
took the amount of memory it take maybe

00:38:29,540 --> 00:38:33,890
also which database queries were done

00:38:31,580 --> 00:38:37,280
during there and you can extend it what

00:38:33,890 --> 00:38:40,690
we did for example is and let me try to

00:38:37,280 --> 00:38:43,280
show live instead of green screen shots

00:38:40,690 --> 00:38:47,990
this is now the time where most talks

00:38:43,280 --> 00:38:54,440
can fail and live demos gave not

00:38:47,990 --> 00:38:56,750
hopefully it works so so let's make it a

00:38:54,440 --> 00:39:09,350
bit bigger so that you can actually see

00:38:56,750 --> 00:39:12,110
something okay okay so what we did is we

00:39:09,350 --> 00:39:17,720
extended this toolbar heavily for

00:39:12,110 --> 00:39:19,220
example here we for this page which is

00:39:17,720 --> 00:39:22,630
kind of really complicated has a lot of

00:39:19,220 --> 00:39:22,630
components in there lots of things

00:39:24,130 --> 00:39:30,920
okay I think this way is bad we have the

00:39:29,030 --> 00:39:32,240
possibility to say okay if you click on

00:39:30,920 --> 00:39:33,860
something on here we have a very

00:39:32,240 --> 00:39:35,990
detailed profile which shows you a list

00:39:33,860 --> 00:39:36,820
of all the components how long that took

00:39:35,990 --> 00:39:38,500
what they did

00:39:36,820 --> 00:39:40,810
what queries I did how long each of

00:39:38,500 --> 00:39:43,180
these queries took and if you don't like

00:39:40,810 --> 00:39:46,450
this listed thing we have even a more

00:39:43,180 --> 00:39:47,920
detailed we've already a more detailed

00:39:46,450 --> 00:39:49,840
listing with much more information in

00:39:47,920 --> 00:39:52,780
there it's like very specific to some of

00:39:49,840 --> 00:39:54,700
the things we are doing but also we

00:39:52,780 --> 00:39:56,110
built like a nice graph out of there so

00:39:54,700 --> 00:39:57,820
you actually see the whole component

00:39:56,110 --> 00:40:00,010
tree in one big graph and you have red

00:39:57,820 --> 00:40:06,010
dots where something was slow you can

00:40:00,010 --> 00:40:07,660
hover over it and see actually you can

00:40:06,010 --> 00:40:10,480
actually see okay this took 43

00:40:07,660 --> 00:40:12,400
milliseconds that was the actual call

00:40:10,480 --> 00:40:14,470
you may want to look into it it was for

00:40:12,400 --> 00:40:16,270
these user IDs who are the arguments and

00:40:14,470 --> 00:40:17,710
it was in which iteration of the

00:40:16,270 --> 00:40:19,650
preparer and all that so that makes it

00:40:17,710 --> 00:40:25,120
much more transparent what's happening

00:40:19,650 --> 00:40:26,860
the same thing is X close that we are

00:40:25,120 --> 00:40:29,650
logging of course all database queries

00:40:26,860 --> 00:40:31,510
how long they took or modally queries

00:40:29,650 --> 00:40:33,340
how long they took and he was for

00:40:31,510 --> 00:40:36,370
example materials kind of slow is 40

00:40:33,340 --> 00:40:39,100
milliseconds which is no not that good

00:40:36,370 --> 00:40:41,020
and of course we also have cycle and it

00:40:39,100 --> 00:40:43,150
points to this Timeline view that

00:40:41,020 --> 00:40:45,850
symphony 2 has why you also have a

00:40:43,150 --> 00:40:49,420
different view on what iteration what

00:40:45,850 --> 00:40:51,820
long and you can dive down into it plus

00:40:49,420 --> 00:40:55,620
a lot of other additions you I read it

00:40:51,820 --> 00:40:57,700
to it also what we are doing is we are

00:40:55,620 --> 00:40:59,230
like we are not only using as in

00:40:57,700 --> 00:41:00,880
development we are also using this in

00:40:59,230 --> 00:41:03,220
production of course when a developer

00:41:00,880 --> 00:41:05,440
uses a production side as I'm using at

00:41:03,220 --> 00:41:09,280
the moment here you can enable this

00:41:05,440 --> 00:41:11,650
toolbar but what we are also doing is

00:41:09,280 --> 00:41:13,690
for normal users and a small percentage

00:41:11,650 --> 00:41:16,450
of normal users we are also activating

00:41:13,690 --> 00:41:18,040
the data collection of that is used for

00:41:16,450 --> 00:41:19,060
this toolbar but we just are displaying

00:41:18,040 --> 00:41:22,000
the toolbar to the user

00:41:19,060 --> 00:41:23,950
of course these requests are kind of a

00:41:22,000 --> 00:41:25,420
bit slower because they have a low high

00:41:23,950 --> 00:41:26,920
our memory consumption because it

00:41:25,420 --> 00:41:28,900
collects a lot and saves a lot of data

00:41:26,920 --> 00:41:32,230
and because in the end it writes it back

00:41:28,900 --> 00:41:34,240
to some MongoDB database in our case but

00:41:32,230 --> 00:41:36,370
if you only do it for like oh one one

00:41:34,240 --> 00:41:37,870
percent of your requests it's still fine

00:41:36,370 --> 00:41:39,070
and you get lots of interesting

00:41:37,870 --> 00:41:41,500
information out of real-life

00:41:39,070 --> 00:41:43,540
user requests and also you can trick

00:41:41,500 --> 00:41:45,220
about a bit about it for example the

00:41:43,540 --> 00:41:48,760
writing of this profile for the database

00:41:45,220 --> 00:41:52,030
only in the shutdown Handler and

00:41:48,760 --> 00:41:54,930
so thinking about the debugging tooling

00:41:52,030 --> 00:41:56,830
is also something really worthwhile

00:41:54,930 --> 00:42:00,310
regardless if you're going this approach

00:41:56,830 --> 00:42:03,490
or not we saw that what other what

00:42:00,310 --> 00:42:05,320
benefits does such a component based

00:42:03,490 --> 00:42:06,970
architecture gives us with small

00:42:05,320 --> 00:42:08,920
components like assembler and reuse

00:42:06,970 --> 00:42:10,900
everywhere it actually enables the

00:42:08,920 --> 00:42:12,160
developer to only focus on something

00:42:10,900 --> 00:42:13,300
they are doing at the moment because

00:42:12,160 --> 00:42:15,040
each of these components is

00:42:13,300 --> 00:42:17,140
self-contained because each of these

00:42:15,040 --> 00:42:19,870
components can place everywhere if that

00:42:17,140 --> 00:42:21,910
components works I don't have to care

00:42:19,870 --> 00:42:23,740
all these my javascript is loaded

00:42:21,910 --> 00:42:25,630
everything is batch intelligent receipt

00:42:23,740 --> 00:42:26,800
of course I can still do stupid stuff

00:42:25,630 --> 00:42:30,220
but then it's contained to this

00:42:26,800 --> 00:42:32,320
component this also loads rapid

00:42:30,220 --> 00:42:33,760
prototyping so if I have some idea I

00:42:32,320 --> 00:42:35,380
want to test something I'm just doing

00:42:33,760 --> 00:42:37,000
like a very quick prototype of it it

00:42:35,380 --> 00:42:39,130
could be very happy it could not be nice

00:42:37,000 --> 00:42:42,400
but it's isolated in one component and

00:42:39,130 --> 00:42:44,320
then if it works out I can throw away

00:42:42,400 --> 00:42:46,270
the old stuff and do it in a new way in

00:42:44,320 --> 00:42:48,640
a clean way so actually that I actually

00:42:46,270 --> 00:42:49,840
want to keep it around it also makes it

00:42:48,640 --> 00:42:52,270
very easy to refactor through that

00:42:49,840 --> 00:42:56,080
because I can just everything is small

00:42:52,270 --> 00:42:58,360
and isolated it also yeah reusing of

00:42:56,080 --> 00:43:01,380
course is very easy also additional

00:42:58,360 --> 00:43:04,840
benefits are that error handling becomes

00:43:01,380 --> 00:43:07,540
fortunately much more convenient if I

00:43:04,840 --> 00:43:10,300
have this tree of components and for

00:43:07,540 --> 00:43:12,370
example the about me component needs

00:43:10,300 --> 00:43:13,690
some kind of data and an exception

00:43:12,370 --> 00:43:16,060
happens when the preparer fetches the

00:43:13,690 --> 00:43:18,820
data for this component in a usual

00:43:16,060 --> 00:43:20,860
approach we have one big controller if I

00:43:18,820 --> 00:43:23,290
don't wrap everything and try caches and

00:43:20,860 --> 00:43:27,250
handle this like specifically I just get

00:43:23,290 --> 00:43:30,190
a narrow page though probably for most

00:43:27,250 --> 00:43:33,430
users the page is still kind of fine if

00:43:30,190 --> 00:43:35,290
I just remove the about me component so

00:43:33,430 --> 00:43:36,850
of course it's not complete there but at

00:43:35,290 --> 00:43:39,280
least the user has more than an error

00:43:36,850 --> 00:43:41,350
page and I can handle this gracefully by

00:43:39,280 --> 00:43:42,730
just deactivating this component if

00:43:41,350 --> 00:43:46,900
there's an exception happens for

00:43:42,730 --> 00:43:49,270
fetching data of it similarly it

00:43:46,900 --> 00:43:53,020
suddenly makes a be testing much easier

00:43:49,270 --> 00:43:54,100
who is doing a/b testing that's not

00:43:53,020 --> 00:43:56,650
enough

00:43:54,100 --> 00:43:58,810
a bee testing is so important because

00:43:56,650 --> 00:44:01,090
you can draw if you started you can

00:43:58,810 --> 00:44:03,250
drive up conversion rates very quickly

00:44:01,090 --> 00:44:05,370
tremendously by like 10 20 percent and

00:44:03,250 --> 00:44:10,990
that end the end means money and

00:44:05,370 --> 00:44:13,030
engagement on your page yes the question

00:44:10,990 --> 00:44:17,410
was what does a be testing mean a be

00:44:13,030 --> 00:44:19,210
testing is basically I want to test two

00:44:17,410 --> 00:44:20,590
different kind of functionalities on a

00:44:19,210 --> 00:44:22,870
page against each other and see what

00:44:20,590 --> 00:44:25,150
converts better a simplest example is

00:44:22,870 --> 00:44:27,070
the buy button in a shopping cart

00:44:25,150 --> 00:44:28,780
what collide should have or what wording

00:44:27,070 --> 00:44:31,750
it should have if it's better if it has

00:44:28,780 --> 00:44:33,130
the green color or red color it could be

00:44:31,750 --> 00:44:34,390
a designing gut feeling but I could also

00:44:33,130 --> 00:44:37,600
can test it against each other so that

00:44:34,390 --> 00:44:39,340
50% of my users get the green button 50%

00:44:37,600 --> 00:44:41,230
of mom use get the red button and then I

00:44:39,340 --> 00:44:44,740
measure which version converts better

00:44:41,230 --> 00:44:48,010
and leads to more sales with this

00:44:44,740 --> 00:44:52,720
component based approach what I can do

00:44:48,010 --> 00:44:55,360
then is say okay I'm just having two

00:44:52,720 --> 00:44:59,350
versions of my component about me and

00:44:55,360 --> 00:45:01,240
about me about new me new and for 50% of

00:44:59,350 --> 00:45:03,820
the user I include about my component

00:45:01,240 --> 00:45:05,620
which is ID elated for the other 50% I

00:45:03,820 --> 00:45:07,900
include about my new component and then

00:45:05,620 --> 00:45:10,630
I measure it and in the end I just throw

00:45:07,900 --> 00:45:12,750
the compa the winning the losing

00:45:10,630 --> 00:45:15,220
component away not the winning one that

00:45:12,750 --> 00:45:18,670
interfered

00:45:15,220 --> 00:45:20,800
this also automatically allows through

00:45:18,670 --> 00:45:22,450
feature toggles like a future total

00:45:20,800 --> 00:45:24,460
would be your an a/b test total would be

00:45:22,450 --> 00:45:26,890
the way it also loads partial rollouts

00:45:24,460 --> 00:45:29,920
automatically because what also can do

00:45:26,890 --> 00:45:31,720
is I have this new component that I am

00:45:29,920 --> 00:45:34,930
developing which adds a new feature to

00:45:31,720 --> 00:45:36,640
my page then and I just activated for

00:45:34,930 --> 00:45:40,390
like 10% of my users and see how that

00:45:36,640 --> 00:45:42,820
behaves and if it scales if it actually

00:45:40,390 --> 00:45:47,740
converts better and also to prevent like

00:45:42,820 --> 00:45:50,890
arrows for happening also it makes it

00:45:47,740 --> 00:45:53,290
very easy to catch components who did

00:45:50,890 --> 00:45:57,670
see the nginx and varnish take off case

00:45:53,290 --> 00:46:00,490
earlier it's very powerful to make pages

00:45:57,670 --> 00:46:03,100
faster and much faster if I have this

00:46:00,490 --> 00:46:05,650
component based approach and also every

00:46:03,100 --> 00:46:07,220
every kind of component has its own like

00:46:05,650 --> 00:46:09,560
URL and can be rendered

00:46:07,220 --> 00:46:11,840
separately what I can do is instead of

00:46:09,560 --> 00:46:13,400
rendering the component like that is

00:46:11,840 --> 00:46:16,040
kind of slow and could be cached

00:46:13,400 --> 00:46:19,730
I'm just running an exercise include we

00:46:16,040 --> 00:46:21,680
see URL to this component return that to

00:46:19,730 --> 00:46:23,359
varnish varnish then we'll see with

00:46:21,680 --> 00:46:24,920
appropriate caching Harris or not then

00:46:23,359 --> 00:46:27,730
varnish we'll see hey there's nested

00:46:24,920 --> 00:46:31,790
included in there I'm gonna fetch that

00:46:27,730 --> 00:46:34,220
the response has then as also the HTML

00:46:31,790 --> 00:46:38,660
or Jason it needs the HTML it needs and

00:46:34,220 --> 00:46:40,190
as different caching headers so varnish

00:46:38,660 --> 00:46:41,960
can catch the longer next time the

00:46:40,190 --> 00:46:44,510
bottom components off anymore but comes

00:46:41,960 --> 00:46:45,369
out of the cache if you have a

00:46:44,510 --> 00:46:47,869
component-based architecture

00:46:45,369 --> 00:46:50,180
implementing that is probably like an

00:46:47,869 --> 00:46:53,359
hour of work or was for us and horror of

00:46:50,180 --> 00:46:55,460
work it also similarly allows very

00:46:53,359 --> 00:46:57,619
easily to load some of these components

00:46:55,460 --> 00:46:59,690
as in Kronus lee at least if you are not

00:46:57,619 --> 00:47:01,940
a crawler that means content that is not

00:46:59,690 --> 00:47:04,790
visible to the user at first page load

00:47:01,940 --> 00:47:06,619
or that is very slow or somewhere

00:47:04,790 --> 00:47:08,690
advertisement i can just load as in

00:47:06,619 --> 00:47:10,010
Kronus lee instead of rendering the

00:47:08,690 --> 00:47:12,290
component in the tree I just run a

00:47:10,010 --> 00:47:14,240
placeholder and then have learned a bit

00:47:12,290 --> 00:47:15,710
of JavaScript to do that that doesn't

00:47:14,240 --> 00:47:17,390
address requests later on fetches this

00:47:15,710 --> 00:47:20,300
component and renders it as an Cronus

00:47:17,390 --> 00:47:24,040
Lee into this placeholder and I can

00:47:20,300 --> 00:47:24,040
activate a deactivators as I want

00:47:24,250 --> 00:47:30,200
conclusion in the end the most important

00:47:28,730 --> 00:47:32,210
thing and probably most important get

00:47:30,200 --> 00:47:34,160
away you should take out of it is think

00:47:32,210 --> 00:47:38,210
about the architecture and think about

00:47:34,160 --> 00:47:42,380
it in a way that you constantly do that

00:47:38,210 --> 00:47:45,230
and if something is not nice and kind of

00:47:42,380 --> 00:47:47,869
a bit bad refactor it make it better

00:47:45,230 --> 00:47:49,490
continuously take like for each project

00:47:47,869 --> 00:47:50,990
you are doing for each new thing you are

00:47:49,490 --> 00:47:53,690
doing like maybe like 10% additional

00:47:50,990 --> 00:47:56,380
time it's not that much and make your

00:47:53,690 --> 00:48:01,250
architecture a bit nicer step by step

00:47:56,380 --> 00:48:03,080
and if you think about architecture be

00:48:01,250 --> 00:48:04,550
sure that you think about the

00:48:03,080 --> 00:48:06,680
architecture in a way that front-end and

00:48:04,550 --> 00:48:08,869
back-end is actually in PHP and

00:48:06,680 --> 00:48:12,800
JavaScript let's say both the same

00:48:08,869 --> 00:48:15,770
application so this was somehow you

00:48:12,800 --> 00:48:17,210
should make it not say okay I'm doing

00:48:15,770 --> 00:48:18,770
something very fancy in PHP I'm doing

00:48:17,210 --> 00:48:20,119
very something very fancy in JavaScript

00:48:18,770 --> 00:48:21,019
and then don't connect it at all because

00:48:20,119 --> 00:48:24,979
you end up at course

00:48:21,019 --> 00:48:26,419
application and whatever you do if you

00:48:24,979 --> 00:48:28,909
think about your architecture and want

00:48:26,419 --> 00:48:30,979
to reflect on something please don't sit

00:48:28,909 --> 00:48:33,380
down and rewrite everything in like a

00:48:30,979 --> 00:48:34,549
six month project and then introduce all

00:48:33,380 --> 00:48:36,409
the box you already fixed already

00:48:34,549 --> 00:48:41,449
and nobody's happy I don't do it in one

00:48:36,409 --> 00:48:43,069
go do it incrementally so if you like

00:48:41,449 --> 00:48:45,229
that talk or you didn't like this talk

00:48:43,069 --> 00:48:47,329
or have like kind of feedback for it

00:48:45,229 --> 00:48:49,249
please rate the store conjoint in this

00:48:47,329 --> 00:48:50,719
just like the croco this URL and also

00:48:49,249 --> 00:48:51,859
please take the time to rate all the

00:48:50,719 --> 00:48:53,179
other talks you have seen at this

00:48:51,859 --> 00:48:55,039
conference so far and you're gonna see

00:48:53,179 --> 00:48:57,649
tomorrow at join in because this helped

00:48:55,039 --> 00:48:59,959
great helps greatly as speakers to

00:48:57,649 --> 00:49:01,459
improve our talks and see what works and

00:48:59,959 --> 00:49:03,649
didn't worked what do you actually like

00:49:01,459 --> 00:49:05,449
it also helps the organizers see what is

00:49:03,649 --> 00:49:06,739
popular what should be who should be by

00:49:05,449 --> 00:49:08,209
the next year what topics should be

00:49:06,739 --> 00:49:09,979
invited next year what should we focus

00:49:08,209 --> 00:49:11,449
on and in the end it also helps you

00:49:09,979 --> 00:49:12,799
because you get better content and

00:49:11,449 --> 00:49:16,239
probably don't have to listen to this

00:49:12,799 --> 00:49:16,239
crazy German with this crazy accent

00:49:16,599 --> 00:49:19,959
thank you very much

00:49:26,200 --> 00:49:37,320
I think we have like a couple of minutes

00:49:29,560 --> 00:49:42,730
for questions left if you have any yes

00:49:37,320 --> 00:49:46,630
there's a microphone in the start you

00:49:42,730 --> 00:49:48,550
mentioned CSS being included there mmm

00:49:46,630 --> 00:49:52,810
how do you do the CSS do you have one

00:49:48,550 --> 00:49:55,030
CSS file for everything or a mix so we

00:49:52,810 --> 00:49:56,740
have like some basis as far with which

00:49:55,030 --> 00:49:58,900
has the basic rules that are used nearly

00:49:56,740 --> 00:50:01,510
everywhere for the basic grid layout and

00:49:58,900 --> 00:50:03,970
like basic buttons and everything and

00:50:01,510 --> 00:50:06,100
then we have specialized CSS for

00:50:03,970 --> 00:50:08,440
components where there's stuff that we

00:50:06,100 --> 00:50:10,960
just need for one or two components and

00:50:08,440 --> 00:50:12,820
what we do is we serve this basic CSS of

00:50:10,960 --> 00:50:16,510
whatever request just very early on the

00:50:12,820 --> 00:50:18,220
hat and then we basically bundle all the

00:50:16,510 --> 00:50:22,780
CSS which were packed together and

00:50:18,220 --> 00:50:30,660
suffered then if needed that in that

00:50:22,780 --> 00:50:30,660
works scales for us really well yes

00:50:34,110 --> 00:50:40,060
um you said when you started out that

00:50:38,170 --> 00:50:41,370
all of this wasn't like this and you've

00:50:40,060 --> 00:50:43,840
brought this in while you've been

00:50:41,370 --> 00:50:45,880
research data how did you go about

00:50:43,840 --> 00:50:47,350
implementing it did you draw a line and

00:50:45,880 --> 00:50:48,400
say okay we're going to start anew and

00:50:47,350 --> 00:50:50,860
we're going to start with this approach

00:50:48,400 --> 00:50:52,000
or did you start to like say okay here's

00:50:50,860 --> 00:50:54,010
an area that we can implement as a

00:50:52,000 --> 00:50:55,060
component let's start with that include

00:50:54,010 --> 00:50:57,070
the library and then kind of grow

00:50:55,060 --> 00:50:59,320
organically out from there yeah exactly

00:50:57,070 --> 00:51:00,850
about we started there was a project

00:50:59,320 --> 00:51:03,130
where we wanted to redesign the profile

00:51:00,850 --> 00:51:04,030
and said okay for this project we

00:51:03,130 --> 00:51:05,740
designed the profile we're actually

00:51:04,030 --> 00:51:07,900
taking like a bit of more time and in

00:51:05,740 --> 00:51:09,640
the end it was like probably 10 to 20%

00:51:07,900 --> 00:51:11,830
more they would actually actually

00:51:09,640 --> 00:51:13,660
excellent exactly needed for that and

00:51:11,830 --> 00:51:15,400
say okay we want to go on invest in that

00:51:13,660 --> 00:51:19,690
and try this component based approach

00:51:15,400 --> 00:51:23,110
out fix a few things and then it grew

00:51:19,690 --> 00:51:25,300
organically over like 1/2 years or so so

00:51:23,110 --> 00:51:26,980
now there's like 95% of our platform

00:51:25,300 --> 00:51:28,900
built in this way there's still some

00:51:26,980 --> 00:51:31,180
some kind of areas where it's not built

00:51:28,900 --> 00:51:33,940
this way is mostly like administration

00:51:31,180 --> 00:51:35,350
stuff that nobody has touched since then

00:51:33,940 --> 00:51:37,200
but every time somebody touches since

00:51:35,350 --> 00:51:39,240
and we are rebuilding in this way and

00:51:37,200 --> 00:51:41,430
now that we are introducing

00:51:39,240 --> 00:51:43,619
reactions to that and after earlier we

00:51:41,430 --> 00:51:45,150
started doing this why very similar

00:51:43,619 --> 00:51:47,250
approach but now we are switching to

00:51:45,150 --> 00:51:49,380
react us because it's even faster and

00:51:47,250 --> 00:51:51,450
nicer we are doing it the same way we

00:51:49,380 --> 00:51:53,400
had one project where we had our new

00:51:51,450 --> 00:51:56,010
publication page where we actually made

00:51:53,400 --> 00:51:57,390
the publication text in HTML and not

00:51:56,010 --> 00:51:58,950
have to download PDF anymore it's like a

00:51:57,390 --> 00:52:00,420
really awesome thing and really

00:51:58,950 --> 00:52:02,760
interactive to see citations and

00:52:00,420 --> 00:52:05,369
everything we did the same way the first

00:52:02,760 --> 00:52:06,960
thing we did was react we tried out then

00:52:05,369 --> 00:52:08,160
found some quirks some things that did

00:52:06,960 --> 00:52:09,570
not work for us especially the data

00:52:08,160 --> 00:52:11,070
store thing we did it wrong in the

00:52:09,570 --> 00:52:12,900
beginning we affected it and then now we

00:52:11,070 --> 00:52:15,840
are starting through everything we do

00:52:12,900 --> 00:52:21,000
new to refactor in that way and this

00:52:15,840 --> 00:52:22,770
worked out really well yeah sure um how

00:52:21,000 --> 00:52:23,880
did you find the introducing as just the

00:52:22,770 --> 00:52:26,100
starting component was there a

00:52:23,880 --> 00:52:27,750
performance overhead to dump all of this

00:52:26,100 --> 00:52:29,790
stuff and set it up initially that kind

00:52:27,750 --> 00:52:30,840
of faded off after you started

00:52:29,790 --> 00:52:31,710
implementing more and more things

00:52:30,840 --> 00:52:33,240
because you've obviously got two

00:52:31,710 --> 00:52:36,030
different styles of coding existing on

00:52:33,240 --> 00:52:38,880
the same page at the same time we didn't

00:52:36,030 --> 00:52:41,070
have a performance all that the overhead

00:52:38,880 --> 00:52:43,530
is more what is not so nice is that you

00:52:41,070 --> 00:52:47,490
have to do at some point some kind of

00:52:43,530 --> 00:52:49,920
weird kind of hacky things to be enable

00:52:47,490 --> 00:52:52,080
it that you have like both architectures

00:52:49,920 --> 00:52:54,960
in parallel and that can also mean that

00:52:52,080 --> 00:52:57,390
one page has like both style and you

00:52:54,960 --> 00:52:59,010
start things in there so that's also one

00:52:57,390 --> 00:53:00,990
of the reasons why we are not able to

00:52:59,010 --> 00:53:03,180
open source some stuff of that what we

00:53:00,990 --> 00:53:04,350
are doing yet because some stuff is

00:53:03,180 --> 00:53:05,820
already open source was because it's

00:53:04,350 --> 00:53:07,320
based on symfony components or then

00:53:05,820 --> 00:53:09,540
framework components but some of the

00:53:07,320 --> 00:53:12,750
stuff is so tied to the legislative

00:53:09,540 --> 00:53:15,480
doing it and we are hopefully like in a

00:53:12,750 --> 00:53:16,890
couple of months able to then extract

00:53:15,480 --> 00:53:18,660
and make it nice this is what stuff my

00:53:16,890 --> 00:53:21,390
second as well and then you could open

00:53:18,660 --> 00:53:23,280
source some of the things but the

00:53:21,390 --> 00:53:25,560
concept like a lot of these things that

00:53:23,280 --> 00:53:28,290
are not that hard to implement either

00:53:25,560 --> 00:53:30,150
like prove the most complex one is the

00:53:28,290 --> 00:53:30,660
preparer and the smart batching of data

00:53:30,150 --> 00:53:34,340
fetching

00:53:30,660 --> 00:53:34,340
but even that is not a rocket science

00:53:37,099 --> 00:53:44,039
there's one more question over there

00:53:39,210 --> 00:53:47,779
yeah hi did you consider any other

00:53:44,039 --> 00:53:50,460
JavaScript frameworks like angular

00:53:47,779 --> 00:53:54,630
backbone and was there reason why you

00:53:50,460 --> 00:53:56,549
chose react yes we as I said initially

00:53:54,630 --> 00:53:58,500
we started actually with why why that

00:53:56,549 --> 00:54:01,410
the only reason was because we were

00:53:58,500 --> 00:54:03,480
already using why why so that why we

00:54:01,410 --> 00:54:05,549
took it and you probably don't want to

00:54:03,480 --> 00:54:08,130
have too many frameworks in parallel on

00:54:05,549 --> 00:54:10,319
there now that we switch to react we

00:54:08,130 --> 00:54:13,500
also consider some other things the way

00:54:10,319 --> 00:54:15,960
the reason why we chose react was that

00:54:13,500 --> 00:54:19,140
it already enables this thing directly

00:54:15,960 --> 00:54:21,269
having the small components so there's

00:54:19,140 --> 00:54:24,599
the same philosophy behind it of is

00:54:21,269 --> 00:54:27,089
having small reusable components that in

00:54:24,599 --> 00:54:29,220
that worked very well for us which also

00:54:27,089 --> 00:54:31,609
may be like the reason why it probably

00:54:29,220 --> 00:54:34,140
works very well for us because our

00:54:31,609 --> 00:54:36,690
application is structured very similar

00:54:34,140 --> 00:54:38,430
to Facebook's like probably of course it

00:54:36,690 --> 00:54:40,710
will scale or anything like nobody has

00:54:38,430 --> 00:54:43,440
little scale as Facebook has or maybe

00:54:40,710 --> 00:54:43,890
Google but in terms of how pages look

00:54:43,440 --> 00:54:45,750
like

00:54:43,890 --> 00:54:47,940
look how complex they are and how many

00:54:45,750 --> 00:54:49,710
small components in widgets you have

00:54:47,940 --> 00:54:52,940
that you want to put somewhere else so

00:54:49,710 --> 00:54:54,960
it really worked very well for us there

00:54:52,940 --> 00:54:56,549
but it could be different for your

00:54:54,960 --> 00:55:01,339
application so if you do something as

00:54:56,549 --> 00:55:01,339
angular or something perfectly fine yeah

00:55:01,789 --> 00:55:08,549
okay nope yep to that question there

00:55:07,410 --> 00:55:10,559
would you consider something like

00:55:08,549 --> 00:55:12,720
polymer which seems to be built from the

00:55:10,559 --> 00:55:16,049
ground up to be web component based

00:55:12,720 --> 00:55:17,579
mm-hmm we looked at polymer polymer is

00:55:16,049 --> 00:55:19,740
really awesome and I really like web

00:55:17,579 --> 00:55:22,890
components and you see also that even on

00:55:19,740 --> 00:55:24,420
this HTML standard level it goes into

00:55:22,890 --> 00:55:27,960
that direction as well having small

00:55:24,420 --> 00:55:30,420
reusable components in the front-end the

00:55:27,960 --> 00:55:32,660
problem is Padma for us is it's so

00:55:30,420 --> 00:55:35,220
bleeding edge that it only works in the

00:55:32,660 --> 00:55:37,140
like news browser versions or they only

00:55:35,220 --> 00:55:40,019
say we are going to support newest IE

00:55:37,140 --> 00:55:42,930
news operators chrome news firefox but

00:55:40,019 --> 00:55:44,759
since we have lots of like customers

00:55:42,930 --> 00:55:46,319
around the world and users are on the

00:55:44,759 --> 00:55:47,180
world and a lot of people are actually

00:55:46,319 --> 00:55:49,040
using old

00:55:47,180 --> 00:55:50,510
institution university computers that

00:55:49,040 --> 00:55:53,240
they where they can't even install

00:55:50,510 --> 00:55:55,640
anything there and we have lots of users

00:55:53,240 --> 00:56:00,619
in China which also using kind of pirate

00:55:55,640 --> 00:56:04,550
copies with Windows XP with ie6 we want

00:56:00,619 --> 00:56:05,930
to at least support ie8 so that because

00:56:04,550 --> 00:56:08,450
of that unfortunate man was not an

00:56:05,930 --> 00:56:10,309
option for us but if you don't have this

00:56:08,450 --> 00:56:14,170
constrains Polly would probably be a

00:56:10,309 --> 00:56:17,030
very nice way to do it as well

00:56:14,170 --> 00:56:20,540
so I think I'm not allowed to do any

00:56:17,030 --> 00:56:25,849
more questions or yeah do we have like

00:56:20,540 --> 00:56:27,890
one more last one that's not a promise I

00:56:25,849 --> 00:56:29,089
was just wondering in once you reach the

00:56:27,890 --> 00:56:31,130
server ends day or everything is

00:56:29,089 --> 00:56:34,579
converted to these react components is

00:56:31,130 --> 00:56:36,619
there any other any templates or HTML

00:56:34,579 --> 00:56:38,630
actually being generated through PHP

00:56:36,619 --> 00:56:43,190
anymore or is all the actual HTML

00:56:38,630 --> 00:56:46,460
embedded inside react code no we don't

00:56:43,190 --> 00:56:48,859
have any HTML PHP anymore and like that

00:56:46,460 --> 00:56:50,480
like we have like this five percent or

00:56:48,859 --> 00:56:52,190
two percent of a platform that is still

00:56:50,480 --> 00:56:55,339
so old that we didn't touch that it's

00:56:52,190 --> 00:56:57,980
still like having HTML and PHP but even

00:56:55,339 --> 00:56:59,299
now we like all the stuff that is new or

00:56:57,980 --> 00:57:02,359
everything that's converted like it

00:56:59,299 --> 00:57:05,480
doesn't have any HTML PHP anymore which

00:57:02,359 --> 00:57:08,240
is a huge benefit for us it also makes

00:57:05,480 --> 00:57:11,470
means that hTML is cashable and anything

00:57:08,240 --> 00:57:11,470
like it is also very nice

00:57:17,350 --> 00:57:22,900
you're not using templates templates and

00:57:20,990 --> 00:57:25,610
like tweak your only template engines

00:57:22,900 --> 00:57:27,430
yeah no we're not using trig or any kind

00:57:25,610 --> 00:57:30,350
of template language for us react or

00:57:27,430 --> 00:57:32,360
like why why was masters as our template

00:57:30,350 --> 00:57:34,670
language it depends for new stuff react

00:57:32,360 --> 00:57:36,740
and then when we do want to do

00:57:34,670 --> 00:57:41,030
server-side rendering we are using this

00:57:36,740 --> 00:57:44,570
node proxy solution okay so what if you

00:57:41,030 --> 00:57:46,580
have some someone who's very good with

00:57:44,570 --> 00:57:49,220
HTML then you can't use them to design

00:57:46,580 --> 00:57:53,060
your pages you have to Holly Holly how

00:57:49,220 --> 00:57:55,820
do you they can't use pure that you use

00:57:53,060 --> 00:57:57,590
your components yeah yeah let's but this

00:57:55,820 --> 00:57:59,060
is like a benefit for us we want to have

00:57:57,590 --> 00:58:00,230
these components everywhere and use it

00:57:59,060 --> 00:58:01,640
everywhere we don't have the same

00:58:00,230 --> 00:58:03,950
architectural approach throughout the

00:58:01,640 --> 00:58:09,440
platform so this is actually wanted for

00:58:03,950 --> 00:58:12,740
us yeah so our like there is like 10

00:58:09,440 --> 00:58:14,750
minutes left until the keynote I will

00:58:12,740 --> 00:58:16,400
pack up I can answer questions I'm also

00:58:14,750 --> 00:58:19,070
gonna be at the social tonight so you

00:58:16,400 --> 00:58:22,220
can ask me much more things just find me

00:58:19,070 --> 00:58:25,280
talk to me grab my attention and if not

00:58:22,220 --> 00:58:27,490
like sent me an email or contact me on

00:58:25,280 --> 00:58:27,490

YouTube URL: https://www.youtube.com/watch?v=YYt9u4uUetU


