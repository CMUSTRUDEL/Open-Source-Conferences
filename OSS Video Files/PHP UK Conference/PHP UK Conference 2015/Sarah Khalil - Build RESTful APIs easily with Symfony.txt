Title: Sarah Khalil - Build RESTful APIs easily with Symfony
Publication date: 2015-04-02
Playlist: PHP UK Conference 2015
Description: 
	Let's build a nice REST API with all the recent helper we can find. First of all, we will take some time to see, in theory, what's asked to build a "good" Restful API. Then we'll see some code with the usage of : - FOSRestBundle to save time, a lot; - JMS serializer and its awesome features; - the HATEOAS project, very nice to unlock the third level of the Richardson maturity model; - And finally, a little bit of Guzzle to ease communication between applications (going further with the SOA architecture). The goal of that talk is to demystify all technologies in the "REST" galaxy.

https://speakerdeck.com/saro0h/php-uk-2015
Captions: 
	00:00:04,940 --> 00:00:14,519
hello everyone as I said I'm Sarah I'm

00:00:10,679 --> 00:00:18,510
going to talk about restful api and of

00:00:14,519 --> 00:00:19,590
course how to build it with Symphony Who

00:00:18,510 --> 00:00:22,500
am I

00:00:19,590 --> 00:00:26,820
first of all I work for centuries France

00:00:22,500 --> 00:00:32,510
and I'm a trainer a developer and of

00:00:26,820 --> 00:00:35,329
course I love to share who use Symphony

00:00:32,510 --> 00:00:42,660
Wow nice

00:00:35,329 --> 00:00:45,800
who knows rests ok why are you here some

00:00:42,660 --> 00:00:51,710
we're just going to do a little rounder

00:00:45,800 --> 00:00:55,199
with a rest so Reston's for

00:00:51,710 --> 00:00:57,660
representational state transfer it's not

00:00:55,199 --> 00:00:59,520
a standard it's an architecture as you

00:00:57,660 --> 00:01:02,570
may know it's most of the time

00:00:59,520 --> 00:01:08,490
associated to service-oriented

00:01:02,570 --> 00:01:13,970
architecture well not as SOA and it's

00:01:08,490 --> 00:01:18,509
about managing your resources there is

00:01:13,970 --> 00:01:22,220
six constraints of rest the first one is

00:01:18,509 --> 00:01:28,520
a client server it's about having a

00:01:22,220 --> 00:01:31,979
separation of concerns and a portability

00:01:28,520 --> 00:01:34,500
you have a client that consuming an API

00:01:31,979 --> 00:01:38,720
and you have your server that serves

00:01:34,500 --> 00:01:42,659
everything that you need with your API

00:01:38,720 --> 00:01:48,350
it's stateless because it relies on HTTP

00:01:42,659 --> 00:01:51,470
and you may know that it's better to

00:01:48,350 --> 00:01:53,880
handle the session on the client side

00:01:51,470 --> 00:02:00,450
because you need to be stateless on the

00:01:53,880 --> 00:02:02,369
server cache of course you have to think

00:02:00,450 --> 00:02:05,770
about that when you are building your

00:02:02,369 --> 00:02:11,320
API it's about avoiding

00:02:05,770 --> 00:02:16,180
useless requests layer system when you

00:02:11,320 --> 00:02:19,330
are asking for a resource you don't care

00:02:16,180 --> 00:02:25,200
what what's going on on the other side

00:02:19,330 --> 00:02:28,360
on the server side so you'll know how

00:02:25,200 --> 00:02:34,030
how it works behind you just ask for a

00:02:28,360 --> 00:02:36,280
resource uniform interface each resource

00:02:34,030 --> 00:02:39,959
has its identifier

00:02:36,280 --> 00:02:43,060
you know the URI each resource has its

00:02:39,959 --> 00:02:46,959
representation yeah we are going to see

00:02:43,060 --> 00:02:50,590
that after and it's about auto

00:02:46,959 --> 00:02:54,820
descripted messages let's take an

00:02:50,590 --> 00:02:59,290
example with Jason if you are you know

00:02:54,820 --> 00:03:02,230
receiving your resource in Jason you

00:02:59,290 --> 00:03:06,190
will have something saying that it's in

00:03:02,230 --> 00:03:08,560
Jason you know the content type and the

00:03:06,190 --> 00:03:12,850
last parts it's optional it's called on

00:03:08,560 --> 00:03:14,799
demand I never did that but you know

00:03:12,850 --> 00:03:19,690
it's a constraint so let's talk about

00:03:14,799 --> 00:03:24,480
that it's about more than asking for a

00:03:19,690 --> 00:03:33,370
resource it's about asking for some code

00:03:24,480 --> 00:03:39,190
to perform it on the client side as I

00:03:33,370 --> 00:03:43,630
said rest is about relying on HTTP so

00:03:39,190 --> 00:03:46,450
you know all these methods all these

00:03:43,630 --> 00:03:50,110
methods are there is two more but I

00:03:46,450 --> 00:03:55,630
didn't put them trace and connects never

00:03:50,110 --> 00:04:03,519
use them so it's about the RFC 2616 of

00:03:55,630 --> 00:04:07,269
course you all read that ok I'm going to

00:04:03,519 --> 00:04:09,340
show you how to use all of this stuff so

00:04:07,269 --> 00:04:12,310
there is a lot of tools

00:04:09,340 --> 00:04:18,760
it's about demystify all of these things

00:04:12,310 --> 00:04:19,510
and how to use them first of all the the

00:04:18,760 --> 00:04:22,510
symphony for

00:04:19,510 --> 00:04:26,050
Stucky I'm not going to explain what is

00:04:22,510 --> 00:04:29,460
Symphony you know that you have a

00:04:26,050 --> 00:04:33,610
request usually it looks like that you

00:04:29,460 --> 00:04:37,990
have the resource that you want the HTTP

00:04:33,610 --> 00:04:40,930
method the protocol some headers with

00:04:37,990 --> 00:04:45,130
Symphony it's about using these subjects

00:04:40,930 --> 00:04:47,470
you already know there is also the

00:04:45,130 --> 00:04:52,330
response usually it looks like that this

00:04:47,470 --> 00:04:57,340
time it's about having the protocol the

00:04:52,330 --> 00:05:01,300
HTTP cuts tell us some headers and maybe

00:04:57,340 --> 00:05:05,020
your response body and yeah you are

00:05:01,300 --> 00:05:12,670
using this subject on the HTTP

00:05:05,020 --> 00:05:15,670
foundation component or so API is you

00:05:12,670 --> 00:05:21,210
have to keep in mind that all of your

00:05:15,670 --> 00:05:25,060
rest ApS could be in JSON XML HTML

00:05:21,210 --> 00:05:28,300
whatever you want actually when you are

00:05:25,060 --> 00:05:31,510
building an API you have to think about

00:05:28,300 --> 00:05:36,280
the fact that it's done by developers to

00:05:31,510 --> 00:05:39,180
developers so you you have to keep in

00:05:36,280 --> 00:05:43,560
mind that when you are building an API

00:05:39,180 --> 00:05:52,240
you have to make sure that it's easy to

00:05:43,560 --> 00:05:55,840
to use you know this famous picture so

00:05:52,240 --> 00:06:00,430
yeah there is four levels to go through

00:05:55,840 --> 00:06:05,590
rest there is the levels error the swamp

00:06:00,430 --> 00:06:08,200
of box box stand for plain old XML and

00:06:05,590 --> 00:06:10,990
it's about asking for a resource but

00:06:08,200 --> 00:06:18,040
using always the same method and always

00:06:10,990 --> 00:06:21,250
using using the the same identifier when

00:06:18,040 --> 00:06:27,450
you go one step further this time you

00:06:21,250 --> 00:06:31,890
make sure that each resource as its

00:06:27,450 --> 00:06:34,920
URI but you're still using the same HTTP

00:06:31,890 --> 00:06:39,870
method most of the time it's past when

00:06:34,920 --> 00:06:44,280
you go on level 2 it's about you know

00:06:39,870 --> 00:06:49,560
having several resources having some

00:06:44,280 --> 00:06:52,370
methods to indentify it you know what

00:06:49,560 --> 00:06:58,170
you need to do with your resources and

00:06:52,370 --> 00:07:02,820
level 3 it's the the very high level

00:06:58,170 --> 00:07:04,590
it's not easy to to go on this level but

00:07:02,820 --> 00:07:08,550
you are going to see that there is a

00:07:04,590 --> 00:07:12,900
nice tool to go on the level 3 it's

00:07:08,550 --> 00:07:17,580
about hyper media and we know that as

00:07:12,900 --> 00:07:20,010
hey to us it was stands for hyper media

00:07:17,580 --> 00:07:24,360
as the enjoying of application states

00:07:20,010 --> 00:07:27,210
and it's about discovery this I have a

00:07:24,360 --> 00:07:30,240
problem with this work it's about

00:07:27,210 --> 00:07:34,800
discovering the resources that are

00:07:30,240 --> 00:07:40,530
available with your API how to be a lot

00:07:34,800 --> 00:07:41,490
of that first actually it's the second

00:07:40,530 --> 00:07:45,540
part of it

00:07:41,490 --> 00:07:50,220
DMS I realize abandoned and it's about

00:07:45,540 --> 00:07:59,880
how to work with your resources you can

00:07:50,220 --> 00:08:02,280
go on packages and check it out so the

00:07:59,880 --> 00:08:04,520
configuration it's about most of the

00:08:02,280 --> 00:08:08,250
time configuration with this bundle and

00:08:04,520 --> 00:08:13,490
you can do that in XML llamÃ³ and

00:08:08,250 --> 00:08:17,070
annotation here I put some annotations

00:08:13,490 --> 00:08:21,140
because when I build my API I used the

00:08:17,070 --> 00:08:27,210
annotation actually but it's up to you

00:08:21,140 --> 00:08:31,280
and it's about serialize properties the

00:08:27,210 --> 00:08:34,860
way you want the usage is really easy

00:08:31,280 --> 00:08:40,380
here you can see a controller with an

00:08:34,860 --> 00:08:41,340
action and I have objects with two

00:08:40,380 --> 00:08:46,099
purposes

00:08:41,340 --> 00:08:46,099
and I'm using the service JMS Eliza

00:08:46,100 --> 00:08:53,760
sorry and called on the method sterilize

00:08:50,730 --> 00:08:54,240
my objects in Jason because I love you

00:08:53,760 --> 00:08:58,140
Jason

00:08:54,240 --> 00:09:01,440
and yeah I reach them my response as

00:08:58,140 --> 00:09:06,200
usual without forgetting the content

00:09:01,440 --> 00:09:06,200
type and here is the result

00:09:19,320 --> 00:09:31,970
sorry I can't hear oh yeah it's about

00:09:28,889 --> 00:09:37,110
using you know all the configuration you

00:09:31,970 --> 00:09:39,120
you put on your object let's take an

00:09:37,110 --> 00:09:42,870
example here with the exclusion policy

00:09:39,120 --> 00:09:46,949
if you use the JSON encode you don't go

00:09:42,870 --> 00:09:51,149
through all your you know configuration

00:09:46,949 --> 00:09:59,579
with JMS so you have to go through the

00:09:51,149 --> 00:10:05,240
service ok a best practice here it's

00:09:59,579 --> 00:10:07,110
about always exclude all of the

00:10:05,240 --> 00:10:11,730
properties that you want to sell your

00:10:07,110 --> 00:10:14,040
lies why am i doing saying new that it's

00:10:11,730 --> 00:10:16,110
basically because here this object

00:10:14,040 --> 00:10:19,290
doesn't exist in your application in

00:10:16,110 --> 00:10:22,410
mind too but most of the time you have

00:10:19,290 --> 00:10:25,500
relations you could have a user with

00:10:22,410 --> 00:10:29,040
address an address with the country and

00:10:25,500 --> 00:10:31,350
so on if you don't choose the exclusion

00:10:29,040 --> 00:10:36,029
policy when you are going to call the

00:10:31,350 --> 00:10:38,639
serialized method on the service you are

00:10:36,029 --> 00:10:41,880
going to actually sell your lies all the

00:10:38,639 --> 00:10:46,920
graph of your object and it could be

00:10:41,880 --> 00:10:51,089
very very very long so yeah keep in mind

00:10:46,920 --> 00:10:54,690
that's it's using visitor pattern it's

00:10:51,089 --> 00:11:00,569
all about object graph and yeah when you

00:10:54,690 --> 00:11:04,800
have relations X to many or things like

00:11:00,569 --> 00:11:10,350
that you have to use the expression

00:11:04,800 --> 00:11:12,449
strategy if you have special needs I

00:11:10,350 --> 00:11:17,459
told you right before that it's about

00:11:12,449 --> 00:11:22,380
just put some annotations or

00:11:17,459 --> 00:11:25,139
configuration if the configuration all

00:11:22,380 --> 00:11:27,510
of the stuff I showed you before is not

00:11:25,139 --> 00:11:30,000
enough for you you could use this a

00:11:27,510 --> 00:11:32,399
laser Handler and it's about

00:11:30,000 --> 00:11:37,019
implementing this interface

00:11:32,399 --> 00:11:39,480
subscribing handler interface when you

00:11:37,019 --> 00:11:42,800
are declaring your service just don't

00:11:39,480 --> 00:11:46,230
forget to tag it with the JMS aerolizer

00:11:42,800 --> 00:11:55,230
subscribing handler and that's it

00:11:46,230 --> 00:11:57,209
it will work so here is an example I

00:11:55,230 --> 00:11:59,819
have my handler

00:11:57,209 --> 00:12:03,839
the first method I have to implement is

00:11:59,819 --> 00:12:09,240
the static function get subscribing

00:12:03,839 --> 00:12:12,839
methods and in this you have an array of

00:12:09,240 --> 00:12:15,509
array and the first thing is the

00:12:12,839 --> 00:12:18,420
direction could be civilization or

00:12:15,509 --> 00:12:23,279
disagree realization the format you want

00:12:18,420 --> 00:12:26,519
to use actually to have the type so the

00:12:23,279 --> 00:12:31,079
object that you want to serialize and of

00:12:26,519 --> 00:12:36,660
course the method that you will call on

00:12:31,079 --> 00:12:40,470
the on the on one direction on the other

00:12:36,660 --> 00:12:44,990
one so you you implement that and then

00:12:40,470 --> 00:12:49,559
you just implement those two method

00:12:44,990 --> 00:12:51,779
according of of what you did here here

00:12:49,559 --> 00:12:55,199
you can see that I put methods I realize

00:12:51,779 --> 00:13:02,160
method this area lies here I have both

00:12:55,199 --> 00:13:07,639
methods and yeah sterilization is about

00:13:02,160 --> 00:13:10,740
getting an object and put it in an array

00:13:07,639 --> 00:13:14,279
and on the other side is about getting

00:13:10,740 --> 00:13:19,199
here data an array and return and

00:13:14,279 --> 00:13:22,050
objects so you can implement the the

00:13:19,199 --> 00:13:27,870
logic that you want the way you want so

00:13:22,050 --> 00:13:30,540
it's really nice you could use also even

00:13:27,870 --> 00:13:33,329
subscriber to the right before it's

00:13:30,540 --> 00:13:38,030
about handler now it's about hooking on

00:13:33,329 --> 00:13:40,610
an event there is four

00:13:38,030 --> 00:13:42,650
events you have personalized for

00:13:40,610 --> 00:13:46,220
sterilized and the same thing for the

00:13:42,650 --> 00:13:48,530
desolation and it's really easy you just

00:13:46,220 --> 00:13:51,950
have to implement the event subscriber

00:13:48,530 --> 00:13:58,370
interface here you can note that it's on

00:13:51,950 --> 00:14:01,220
the JMS namespace so you you would guess

00:13:58,370 --> 00:14:04,840
that it's actually using the event

00:14:01,220 --> 00:14:08,030
dispatcher of JMS not of symphony and

00:14:04,840 --> 00:14:11,720
yeah when you declare your service you

00:14:08,030 --> 00:14:16,400
just tag it with the name the type of

00:14:11,720 --> 00:14:19,040
the direction the format method and just

00:14:16,400 --> 00:14:24,100
implement the logic that you want in

00:14:19,040 --> 00:14:29,180
your listener here on post I realize

00:14:24,100 --> 00:14:34,490
it's about I put an example of adding

00:14:29,180 --> 00:14:37,930
data in your Jason you could of course

00:14:34,490 --> 00:14:44,450
change the the way your Jason is

00:14:37,930 --> 00:14:47,690
returned here it's about just adding one

00:14:44,450 --> 00:14:50,660
one more element in your Jason called

00:14:47,690 --> 00:14:55,280
new element in Jason and your

00:14:50,660 --> 00:14:58,790
information there is all the other

00:14:55,280 --> 00:15:02,770
features I won't talk about them because

00:14:58,790 --> 00:15:08,230
I don't have the whole afternoon so you

00:15:02,770 --> 00:15:14,260
have serialization group if you want to

00:15:08,230 --> 00:15:17,810
you know serve your resource one way on

00:15:14,260 --> 00:15:21,820
you know need on sapphire and let's say

00:15:17,810 --> 00:15:25,190
slash users and you want slash users

00:15:21,820 --> 00:15:32,240
another end of identifiers you could

00:15:25,190 --> 00:15:34,490
call a group so yeah and you have also

00:15:32,240 --> 00:15:39,850
the versioning if you are using

00:15:34,490 --> 00:15:43,880
versioning in your your API you could

00:15:39,850 --> 00:15:44,270
you know expose your resource one way or

00:15:43,880 --> 00:15:50,390
another

00:15:44,270 --> 00:15:52,560
according to the to the version you you

00:15:50,390 --> 00:15:56,260
asked for

00:15:52,560 --> 00:15:59,140
okay now let's talk about the famous

00:15:56,260 --> 00:16:05,620
phosphorus bundle and it's about setting

00:15:59,140 --> 00:16:08,100
up your Symphony application here is the

00:16:05,620 --> 00:16:12,900
package in packages so go check it out

00:16:08,100 --> 00:16:21,250
here you can see that there is a lot of

00:16:12,900 --> 00:16:24,100
dependencies and it's not for to begin

00:16:21,250 --> 00:16:27,850
it's actually about returning a view or

00:16:24,100 --> 00:16:31,990
data you know at the beginning I showed

00:16:27,850 --> 00:16:35,250
you with JMS I realized you know you

00:16:31,990 --> 00:16:38,440
call the service you call the cellulite

00:16:35,250 --> 00:16:43,270
method and you return a response this

00:16:38,440 --> 00:16:47,350
time is about returning an array or view

00:16:43,270 --> 00:16:49,570
as you may do that in symphony you know

00:16:47,350 --> 00:16:52,900
when you don't return a response you

00:16:49,570 --> 00:16:57,480
just return the array when you are doing

00:16:52,900 --> 00:17:01,020
that actually you are using the view

00:16:57,480 --> 00:17:06,900
here in the sense your framework extra

00:17:01,020 --> 00:17:11,170
bundle so it relies on this pot so you

00:17:06,900 --> 00:17:14,949
have to make sure that you disable it on

00:17:11,170 --> 00:17:18,670
sense of framework extra to use it in

00:17:14,949 --> 00:17:21,010
first rest and actually it's the add

00:17:18,670 --> 00:17:26,530
view I'm going to show you that right

00:17:21,010 --> 00:17:29,050
here it's really it's actually kind of

00:17:26,530 --> 00:17:35,110
the same thing when you do add some

00:17:29,050 --> 00:17:38,560
place with Symphony okay with phosphorus

00:17:35,110 --> 00:17:44,020
you have a content type negotiation pot

00:17:38,560 --> 00:17:48,610
and it's about it's about on one side

00:17:44,020 --> 00:17:51,550
when you are requesting a resource make

00:17:48,610 --> 00:17:54,820
sure that there is a priority of media

00:17:51,550 --> 00:17:58,750
types that you that your application is

00:17:54,820 --> 00:18:01,840
ready to get it's about using the header

00:17:58,750 --> 00:18:04,280
accepts and on the response it's about

00:18:01,840 --> 00:18:06,260
putting the content type

00:18:04,280 --> 00:18:09,950
and it's the media type of the response

00:18:06,260 --> 00:18:13,520
would be Jason PNG hmm

00:18:09,950 --> 00:18:16,040
whatever you want it's all about

00:18:13,520 --> 00:18:21,680
configuration so here is the

00:18:16,040 --> 00:18:27,700
configuration of how to handle the way

00:18:21,680 --> 00:18:27,700
your application is going to you know

00:18:28,480 --> 00:18:37,100
try to to serve or receive and in here

00:18:34,300 --> 00:18:40,160
on your request let's say you have the

00:18:37,100 --> 00:18:46,220
accept adder with text Jason as the

00:18:40,160 --> 00:18:50,720
first priority then anything else then

00:18:46,220 --> 00:18:54,680
text HTML so when you are requesting

00:18:50,720 --> 00:18:59,120
that you are calling a resource let's

00:18:54,680 --> 00:19:01,780
say slash users and in here in your

00:18:59,120 --> 00:19:06,670
configuration you say okay

00:19:01,780 --> 00:19:09,590
the priority is Jason and if I can't

00:19:06,670 --> 00:19:16,640
serve you Jason I'm going to fall back

00:19:09,590 --> 00:19:17,770
on HTML a cool feature the request body

00:19:16,640 --> 00:19:23,450
converter

00:19:17,770 --> 00:19:27,200
it's about decoding you know request

00:19:23,450 --> 00:19:35,440
body that you would receive a second

00:19:27,200 --> 00:19:41,180
example you want to post new users I

00:19:35,440 --> 00:19:44,030
don't want to you know handle JSON than

00:19:41,180 --> 00:19:49,160
an array I want to just manipulate

00:19:44,030 --> 00:19:51,770
objects and I just use the here the

00:19:49,160 --> 00:19:55,550
annotation @param converter on your

00:19:51,770 --> 00:19:58,670
action you put the the name of the

00:19:55,550 --> 00:20:01,670
object that you want to get and use the

00:19:58,670 --> 00:20:04,240
converter for forests request body and

00:20:01,670 --> 00:20:08,510
as you can see here I type into my

00:20:04,240 --> 00:20:12,320
argument I will receive a post object

00:20:08,510 --> 00:20:17,449
according to the JSON the XML D whatever

00:20:12,320 --> 00:20:21,529
you got from the request don't forget to

00:20:17,449 --> 00:20:25,219
in a ballot on forests with since your

00:20:21,529 --> 00:20:28,389
framework extra to so easy buddy

00:20:25,219 --> 00:20:31,219
converter in a vulture

00:20:28,389 --> 00:20:33,439
there is also validation of course it

00:20:31,219 --> 00:20:37,249
works with the validator component if

00:20:33,439 --> 00:20:39,529
you don't have it it won't work first of

00:20:37,249 --> 00:20:45,649
all you have to enable it in your

00:20:39,529 --> 00:20:48,639
configuration and you know put the

00:20:45,649 --> 00:20:51,979
special configuration validation error

00:20:48,639 --> 00:20:57,289
arguments and it's about putting the

00:20:51,979 --> 00:21:02,599
name of the objects you are going to get

00:20:57,289 --> 00:21:08,649
with all the errors you got and you go

00:21:02,599 --> 00:21:11,119
here on the pull the put posts action I

00:21:08,649 --> 00:21:14,239
got a constraint violation list

00:21:11,119 --> 00:21:18,079
interface and it's called validation

00:21:14,239 --> 00:21:20,389
errors because I put that in my

00:21:18,079 --> 00:21:23,659
configuration so if you want to change

00:21:20,389 --> 00:21:25,909
it of course you could put blah blah and

00:21:23,659 --> 00:21:27,919
on yeah on your action of course you

00:21:25,909 --> 00:21:29,499
will have to change it to blah blah

00:21:27,919 --> 00:21:36,829
right there

00:21:29,499 --> 00:21:39,859
then in your in your action you handle

00:21:36,829 --> 00:21:44,379
all the you know all the things you want

00:21:39,859 --> 00:21:51,079
to with your constraint violation list

00:21:44,379 --> 00:21:52,909
it's easy the param feature you may know

00:21:51,079 --> 00:21:56,449
that with Symphony you don't have

00:21:52,909 --> 00:22:00,379
anything to to handle you know query

00:21:56,449 --> 00:22:04,219
parameters query parameter is what you

00:22:00,379 --> 00:22:06,769
can see up there with the sorts equals

00:22:04,219 --> 00:22:10,369
to desk and in here with the special

00:22:06,769 --> 00:22:14,719
annotation add query param you just you

00:22:10,369 --> 00:22:18,139
can put actually requirements so it's

00:22:14,719 --> 00:22:23,299
the same thing as you would have with

00:22:18,139 --> 00:22:26,479
the place orders and in here I allow I

00:22:23,299 --> 00:22:30,450
don't allow actually that the source is

00:22:26,479 --> 00:22:35,540
not provided when I request this with

00:22:30,450 --> 00:22:39,360
resource there is a default to ask if

00:22:35,540 --> 00:22:42,660
there is nothing and the description you

00:22:39,360 --> 00:22:44,760
will see that it's really important when

00:22:42,660 --> 00:22:48,080
you will do some documentation around

00:22:44,760 --> 00:22:52,140
your API you have also the request

00:22:48,080 --> 00:22:55,590
parameter this time is about getting the

00:22:52,140 --> 00:23:01,110
request request so the post the the

00:22:55,590 --> 00:23:04,050
global dollar underscore post and once

00:23:01,110 --> 00:23:09,710
again you can validate it validates it

00:23:04,050 --> 00:23:09,710
with the requirements here asking for

00:23:10,760 --> 00:23:25,020
only letters and if the requirements is

00:23:17,160 --> 00:23:29,400
not enough you with a regex you could

00:23:25,020 --> 00:23:31,890
ask for your special constraints so

00:23:29,400 --> 00:23:35,280
isn't in symphony you may know that you

00:23:31,890 --> 00:23:37,980
can construct your own constraints for

00:23:35,280 --> 00:23:42,150
your validation here you just put the

00:23:37,980 --> 00:23:46,580
ads and the namespace to your constraint

00:23:42,150 --> 00:23:51,000
class and in here you can see that I get

00:23:46,580 --> 00:23:52,290
param fetcher arguments and it's because

00:23:51,000 --> 00:23:55,110
in my configuration

00:23:52,290 --> 00:23:59,880
I put phosphorus param fetcher listener

00:23:55,110 --> 00:24:03,150
to true I have something else with the

00:23:59,880 --> 00:24:05,880
configuration should you write before

00:24:03,150 --> 00:24:10,110
that you can put true here I put force

00:24:05,880 --> 00:24:11,790
and actually I'm getting directly the

00:24:10,110 --> 00:24:15,840
query param

00:24:11,790 --> 00:24:20,180
I got from a request and in here you can

00:24:15,840 --> 00:24:23,640
see that I could access directly to page

00:24:20,180 --> 00:24:28,040
the Herer and link don't forget about

00:24:23,640 --> 00:24:34,830
that it's very important you could bind

00:24:28,040 --> 00:24:40,410
exceptions to http code status so let's

00:24:34,830 --> 00:24:42,600
say your application returns 404 with

00:24:40,410 --> 00:24:43,570
this configuration you are asking for

00:24:42,600 --> 00:24:47,800
stressed

00:24:43,570 --> 00:24:51,610
to return actually a resource not found

00:24:47,800 --> 00:24:58,300
exception and you could useful for are

00:24:51,610 --> 00:25:02,280
the constant you can also use the

00:24:58,300 --> 00:25:05,350
wrapper very nice actually if let's say

00:25:02,280 --> 00:25:09,790
your consumer wants to get always the

00:25:05,350 --> 00:25:14,310
same you know the same Jason let's say

00:25:09,790 --> 00:25:18,760
code message and I don't know the date

00:25:14,310 --> 00:25:22,810
order that time with the wrapper you

00:25:18,760 --> 00:25:25,120
make sure that you know by implementing

00:25:22,810 --> 00:25:27,610
this you make sure that you reach on

00:25:25,120 --> 00:25:28,750
always the same JSON on the same XML or

00:25:27,610 --> 00:25:31,720
something like that

00:25:28,750 --> 00:25:37,270
because remember it's about sterilizing

00:25:31,720 --> 00:25:39,850
all the time and you know sterilizing an

00:25:37,270 --> 00:25:42,040
exception on another could be quite

00:25:39,850 --> 00:25:45,940
different and you know your consumer

00:25:42,040 --> 00:25:49,560
could be you know have some troubles

00:25:45,940 --> 00:25:54,730
because the Jason would be different so

00:25:49,560 --> 00:25:58,420
really nice feature there is also other

00:25:54,730 --> 00:26:01,560
features I won't talk about but you know

00:25:58,420 --> 00:26:07,050
if you have any question just ask me

00:26:01,560 --> 00:26:09,970
there is automatic generation of roots I

00:26:07,050 --> 00:26:14,010
don't choose it but you know it exists

00:26:09,970 --> 00:26:16,660
and it's more about constant consistency

00:26:14,010 --> 00:26:19,240
but of course if you don't want to use

00:26:16,660 --> 00:26:25,090
generation it's up to you you have also

00:26:19,240 --> 00:26:29,130
general version a URL when I say by URL

00:26:25,090 --> 00:26:34,540
let's say you have you know in your URL

00:26:29,130 --> 00:26:38,760
v1 v2 v3 or whatever you could do that

00:26:34,540 --> 00:26:42,820
with mime type for stress helps you to

00:26:38,760 --> 00:26:47,380
handle that I don't have any opinion on

00:26:42,820 --> 00:26:51,340
how to handle the versioning so yeah

00:26:47,380 --> 00:26:54,850
just know that you can handle it by one

00:26:51,340 --> 00:26:57,220
way or another and yeah of course take a

00:26:54,850 --> 00:27:01,890
look at the documentation now it's on

00:26:57,220 --> 00:27:01,890
symphony that come so go check it out

00:27:02,220 --> 00:27:08,250
okay

00:27:04,530 --> 00:27:14,740
let's talk about bazinga hateoas

00:27:08,250 --> 00:27:16,929
bundle so yeah it's about on looking in

00:27:14,740 --> 00:27:19,480
the third level actually the fourth

00:27:16,929 --> 00:27:22,750
because there is a levels are the level

00:27:19,480 --> 00:27:24,760
three of your rich-ass and the model I

00:27:22,750 --> 00:27:27,100
told you that it's not quite easy to

00:27:24,760 --> 00:27:29,169
unlock it but you will see that's with

00:27:27,100 --> 00:27:33,070
the bazinga hey Torres bundle it's

00:27:29,169 --> 00:27:37,120
really easy on packages it's on version

00:27:33,070 --> 00:27:40,030
zero that 4.0 it's quite stable actually

00:27:37,120 --> 00:27:44,409
I used it for my api's and it works well

00:27:40,030 --> 00:27:47,710
so no worries about that I told you that

00:27:44,409 --> 00:27:50,020
hate OS stands for Hyper media as the

00:27:47,710 --> 00:27:53,200
enjoying of application states so it's

00:27:50,020 --> 00:27:56,020
about linking resources so let's second

00:27:53,200 --> 00:27:59,470
as an example you have a big API with

00:27:56,020 --> 00:28:02,350
many resources but you have to make sure

00:27:59,470 --> 00:28:06,490
that you know remember keep in mind that

00:28:02,350 --> 00:28:09,610
you are building API is for developers

00:28:06,490 --> 00:28:15,549
and it's really nice to have a way to

00:28:09,610 --> 00:28:25,409
discover the next resources or and so on

00:28:15,549 --> 00:28:29,380
so it's about self-discovery a quick

00:28:25,409 --> 00:28:32,940
let's talk about hjl and json api maybe

00:28:29,380 --> 00:28:39,130
you you heard about them its

00:28:32,940 --> 00:28:41,710
specifications they are you know quite

00:28:39,130 --> 00:28:46,350
good on the one part or the other

00:28:41,710 --> 00:28:49,059
and yeah har stands for hypertext

00:28:46,350 --> 00:28:53,710
application language and it's about

00:28:49,059 --> 00:28:56,320
three main word links it's about

00:28:53,710 --> 00:28:59,049
relations so let's say you have a

00:28:56,320 --> 00:29:02,530
resource and you want to display all the

00:28:59,049 --> 00:29:04,720
relations of your objects you have the

00:29:02,530 --> 00:29:08,649
underscore embedded if you want to you

00:29:04,720 --> 00:29:11,629
know serve some related resources and

00:29:08,649 --> 00:29:16,019
you have this self

00:29:11,629 --> 00:29:20,460
it's basically the URL of the current

00:29:16,019 --> 00:29:25,940
resource go check your specification

00:29:20,460 --> 00:29:28,590
it's quite nice so dissing API is about

00:29:25,940 --> 00:29:31,769
quite the same thing but the main

00:29:28,590 --> 00:29:35,850
difference is the wording you have the

00:29:31,769 --> 00:29:38,879
meta you have more informations let's

00:29:35,850 --> 00:29:41,429
take an example with the pagination you

00:29:38,879 --> 00:29:45,029
have the word links it's about relations

00:29:41,429 --> 00:29:48,720
and you have links for resources that

00:29:45,029 --> 00:29:52,559
are linked and it's actually the

00:29:48,720 --> 00:29:55,769
underscore embedded on a Chia there is

00:29:52,559 --> 00:30:00,769
another difference between them in a GL

00:29:55,769 --> 00:30:06,559
it's about you know taking resources and

00:30:00,769 --> 00:30:11,609
embed them and have several levels of

00:30:06,559 --> 00:30:14,519
embed with JSON API it's about having on

00:30:11,609 --> 00:30:16,919
bed but quite differently because it's

00:30:14,519 --> 00:30:20,159
not about having several levels is

00:30:16,919 --> 00:30:23,159
having one level with the metal links

00:30:20,159 --> 00:30:28,379
and links again there is specification

00:30:23,159 --> 00:30:31,100
so go check it out remember what I'm

00:30:28,379 --> 00:30:34,619
talking about the bazinga haters vandal

00:30:31,100 --> 00:30:37,320
there is of course configuration so you

00:30:34,619 --> 00:30:39,419
could use annotation XML and yeah Mel

00:30:37,320 --> 00:30:42,299
it's up to you I'm going to show you how

00:30:39,419 --> 00:30:45,450
to how to use annotation actually

00:30:42,299 --> 00:30:49,379
because I love annotations and it relies

00:30:45,450 --> 00:30:54,690
on expression language so it works only

00:30:49,379 --> 00:31:00,720
since symphony 2.4 and it looks like

00:30:54,690 --> 00:31:04,769
this let's take a here an example I told

00:31:00,720 --> 00:31:08,970
you that I want to expose the special

00:31:04,769 --> 00:31:12,989
world self and self is the current

00:31:08,970 --> 00:31:15,899
resource and in here I just put you know

00:31:12,989 --> 00:31:20,309
the special world self here I have the

00:31:15,899 --> 00:31:23,580
Ashraf and Ashraf uses the other

00:31:20,309 --> 00:31:24,210
annotation hey 2's fruit and it's about

00:31:23,580 --> 00:31:27,390
you know

00:31:24,210 --> 00:31:29,880
raising your roots and yeah I have a

00:31:27,390 --> 00:31:34,590
root called having a name get

00:31:29,880 --> 00:31:39,630
notification I want it absolute and if I

00:31:34,590 --> 00:31:43,020
have parameters I put two example to to

00:31:39,630 --> 00:31:46,890
show you that it's very powerful here

00:31:43,020 --> 00:31:50,640
map are my first parameter is ID so I

00:31:46,890 --> 00:31:54,510
use a special expand on my current

00:31:50,640 --> 00:31:59,940
objects I call the method get' ID and I

00:31:54,510 --> 00:32:03,630
also have the user UUID and here I could

00:31:59,940 --> 00:32:06,240
call any service here it's very security

00:32:03,630 --> 00:32:10,320
that context I call the method get token

00:32:06,240 --> 00:32:13,820
get user and get your ID as I get my

00:32:10,320 --> 00:32:17,130
user for from my security context so

00:32:13,820 --> 00:32:20,220
think about the fact that here you could

00:32:17,130 --> 00:32:23,610
call any services you want so that in

00:32:20,220 --> 00:32:26,370
mind the results looks like this I have

00:32:23,610 --> 00:32:30,270
my object here I'm exposing exposing

00:32:26,370 --> 00:32:34,710
only my ID here you see the ID 1 and I

00:32:30,270 --> 00:32:41,550
have the underscore links self and my

00:32:34,710 --> 00:32:42,630
beautiful URL you could also embed

00:32:41,550 --> 00:32:47,270
things

00:32:42,630 --> 00:32:52,050
remember the embed is about exposing

00:32:47,270 --> 00:32:58,160
more information on your resource so

00:32:52,050 --> 00:33:01,500
here I use the relation I put some word

00:32:58,160 --> 00:33:10,140
because on my resource I'm going to have

00:33:01,500 --> 00:33:15,360
the activity and yeah on the embed so

00:33:10,140 --> 00:33:19,100
I'm just exposing the activity so on my

00:33:15,360 --> 00:33:22,710
object I call the method get activity I

00:33:19,100 --> 00:33:24,630
exclude this embed so I'm not going to

00:33:22,710 --> 00:33:30,390
have it in my chest on like salmon or

00:33:24,630 --> 00:33:33,660
whatever if the activity is now and yeah

00:33:30,390 --> 00:33:36,240
I have also the URL to it

00:33:33,660 --> 00:33:38,480
if I want to because remember it's about

00:33:36,240 --> 00:33:42,690
disco

00:33:38,480 --> 00:33:46,650
the rest of your API so you have the URL

00:33:42,690 --> 00:33:52,350
to your activity and in here it's slash

00:33:46,650 --> 00:33:55,770
activity here is concatenation object

00:33:52,350 --> 00:34:01,530
yet activity gated and the result looks

00:33:55,770 --> 00:34:05,429
like this I have the embed the activity

00:34:01,530 --> 00:34:11,210
and of course all the information I have

00:34:05,429 --> 00:34:11,210
in my ecstasy the links and

00:34:12,649 --> 00:34:22,619
representation you know if you want to I

00:34:18,859 --> 00:34:25,590
told you that there is meta links linked

00:34:22,619 --> 00:34:28,200
and and so on you could have anything

00:34:25,590 --> 00:34:30,540
you want actually and with bazinga it's

00:34:28,200 --> 00:34:33,179
about choosing a representation and a

00:34:30,540 --> 00:34:39,780
representation is basically just an

00:34:33,179 --> 00:34:44,609
objects so it's just about decorating

00:34:39,780 --> 00:34:50,119
your resource and yeah you may know that

00:34:44,609 --> 00:34:52,950
in the bundle there is already some

00:34:50,119 --> 00:34:59,160
classes to help you with that or I put

00:34:52,950 --> 00:35:01,350
the example with the pagination and of

00:34:59,160 --> 00:35:03,210
course there is many more so we'll check

00:35:01,350 --> 00:35:08,070
it out before constructing your own

00:35:03,210 --> 00:35:10,400
class and your own objects the result

00:35:08,070 --> 00:35:14,790
here when I'm using the paginate see the

00:35:10,400 --> 00:35:18,240
representation I get those information

00:35:14,790 --> 00:35:23,790
so the page the current page the limits

00:35:18,240 --> 00:35:26,850
pages total links the first page the

00:35:23,790 --> 00:35:29,790
last page the next page and yeah

00:35:26,850 --> 00:35:32,310
remember it's about discovering the rest

00:35:29,790 --> 00:35:35,160
of your API so here you help the

00:35:32,310 --> 00:35:39,990
consumer of your API to go through all

00:35:35,160 --> 00:35:46,050
the you know all the collection of your

00:35:39,990 --> 00:35:48,750
objects I told you that yeah you could

00:35:46,050 --> 00:35:52,790
have any representation you want it's up

00:35:48,750 --> 00:35:52,790
to you it's up to what you want to be

00:35:53,210 --> 00:35:59,400
you could have a class with the

00:35:55,650 --> 00:36:06,450
properties you want and you just let

00:35:59,400 --> 00:36:10,070
this I realize or do its job yeah I'm

00:36:06,450 --> 00:36:15,860
going to talk a little bit about ghazal

00:36:10,070 --> 00:36:19,350
because you know you may have it's my

00:36:15,860 --> 00:36:23,870
experience you could have a big

00:36:19,350 --> 00:36:26,700
application with some of with a lot of

00:36:23,870 --> 00:36:30,360
services when I say services

00:36:26,700 --> 00:36:38,640
I say api's and you could have this kind

00:36:30,360 --> 00:36:41,970
of architecture you have a client asking

00:36:38,640 --> 00:36:44,670
for resources on a front end a front end

00:36:41,970 --> 00:36:47,040
asking for resources on the service one

00:36:44,670 --> 00:36:50,550
the service one could ask for resources

00:36:47,040 --> 00:36:54,660
on the servers two three four and so on

00:36:50,550 --> 00:36:57,390
and of course your client could be

00:36:54,660 --> 00:37:01,800
directly asking for resources on the

00:36:57,390 --> 00:37:07,080
services so to handle that it's really

00:37:01,800 --> 00:37:09,810
easy by using ghazal most of the time I

00:37:07,080 --> 00:37:12,930
use the mist service development ghazal

00:37:09,810 --> 00:37:18,900
bundle and it offers you actually some

00:37:12,930 --> 00:37:21,900
services to build endpoints and yeah you

00:37:18,900 --> 00:37:25,740
just call it and you could put you could

00:37:21,900 --> 00:37:29,550
call the request or post of food and so

00:37:25,740 --> 00:37:32,580
on so it provides you h2n HTTP clients

00:37:29,550 --> 00:37:36,900
could you do request response

00:37:32,580 --> 00:37:43,830
it handles HTTP of course and there is

00:37:36,900 --> 00:37:47,670
an error management security I thought

00:37:43,830 --> 00:37:53,330
about that you know on the plane coming

00:37:47,670 --> 00:37:56,670
here when I submitted my talk I didn't

00:37:53,330 --> 00:37:59,700
put anything on security but you know

00:37:56,670 --> 00:38:01,590
it's really important because yeah you

00:37:59,700 --> 00:38:03,990
may have services that are only

00:38:01,590 --> 00:38:06,320
accessible to some users

00:38:03,990 --> 00:38:11,130
are you could have authorization or

00:38:06,320 --> 00:38:14,970
authentication so everything is done of

00:38:11,130 --> 00:38:19,280
course on symphony so there is no such

00:38:14,970 --> 00:38:24,840
thing in the bundle I showed you and

00:38:19,280 --> 00:38:29,100
about authentication I here put some

00:38:24,840 --> 00:38:32,270
links on how to to do that actually and

00:38:29,100 --> 00:38:34,680
most of the time it's about doing

00:38:32,270 --> 00:38:37,440
authentication through the special

00:38:34,680 --> 00:38:40,770
header authorization you could put your

00:38:37,440 --> 00:38:43,380
access token coming from you know any

00:38:40,770 --> 00:38:47,940
way you want let's say you use Facebook

00:38:43,380 --> 00:38:53,100
or Google or whatever you want and it's

00:38:47,940 --> 00:38:56,910
about using your Authenticator there is

00:38:53,100 --> 00:38:59,700
a very nice simple proton ticket so that

00:38:56,910 --> 00:39:02,880
you could use you just have several

00:38:59,700 --> 00:39:05,550
methods to implement and you just you

00:39:02,880 --> 00:39:08,490
know parse the header get the access

00:39:05,550 --> 00:39:11,730
token you could I don't know who call

00:39:08,490 --> 00:39:15,600
any external services to validate the

00:39:11,730 --> 00:39:19,800
access token or get the user actually

00:39:15,600 --> 00:39:25,020
you just have then to instantiate the

00:39:19,800 --> 00:39:31,350
user and yeah put that in in the token

00:39:25,020 --> 00:39:38,640
and and so on make it setlist remember

00:39:31,350 --> 00:39:41,430
it's about HTTP and you know all this

00:39:38,640 --> 00:39:46,680
session saying could be have to be

00:39:41,430 --> 00:39:50,369
actually handled on the client side the

00:39:46,680 --> 00:39:53,910
authorization doesn't change you could

00:39:50,369 --> 00:39:56,850
use as usual the famous access control

00:39:53,910 --> 00:40:00,030
or they has gone granted you could do

00:39:56,850 --> 00:40:05,180
that in your templates use your voter as

00:40:00,030 --> 00:40:08,369
usual or ACL it doesn't change actually

00:40:05,180 --> 00:40:11,190
I told you in the constraints of rest

00:40:08,369 --> 00:40:15,600
that you have to keep in mind the cache

00:40:11,190 --> 00:40:17,050
part to avoid useless requests there is

00:40:15,600 --> 00:40:21,520
nice bundle

00:40:17,050 --> 00:40:23,380
you know go check it out yeah I won't

00:40:21,520 --> 00:40:26,470
talk about this but it's about

00:40:23,380 --> 00:40:31,420
configuring the cash instead of doing

00:40:26,470 --> 00:40:35,350
this in your in your action let's say so

00:40:31,420 --> 00:40:41,790
go check it out and see if it's answers

00:40:35,350 --> 00:40:47,860
to your problems one last one last thing

00:40:41,790 --> 00:40:51,910
the documentation the name you name your

00:40:47,860 --> 00:40:54,690
API dog bundle it's really easy so it

00:40:51,910 --> 00:40:59,320
looks like that when it's enable and

00:40:54,690 --> 00:41:01,390
actually you just put some configuration

00:40:59,320 --> 00:41:06,340
let's say a notation because I like that

00:41:01,390 --> 00:41:10,300
and yeah when you display the this

00:41:06,340 --> 00:41:13,660
special route slash API slash duck you

00:41:10,300 --> 00:41:20,290
have this kind of output and yeah it's

00:41:13,660 --> 00:41:25,330
really nice there is many tools as I

00:41:20,290 --> 00:41:28,690
said pick what you need you know use

00:41:25,330 --> 00:41:32,440
them wisely don't try to you know

00:41:28,690 --> 00:41:36,330
integrate what all of the things that I

00:41:32,440 --> 00:41:41,080
showed you it's most of the time about

00:41:36,330 --> 00:41:43,360
answering two problems and remember API

00:41:41,080 --> 00:41:47,670
is all run by developers to developers

00:41:43,360 --> 00:41:47,670
so thank you

00:41:55,910 --> 00:42:00,360
we've plenty of time for some questions

00:41:58,110 --> 00:42:02,790
if anyone has any questions but their

00:42:00,360 --> 00:42:05,000
hand up and just keep it up we'll come

00:42:02,790 --> 00:42:05,000
to you

00:42:17,630 --> 00:42:21,450
thank you

00:42:19,470 --> 00:42:24,180
you mentioned before the exception

00:42:21,450 --> 00:42:27,540
handler in there in order to capture and

00:42:24,180 --> 00:42:30,210
respond the HTTP status code how does

00:42:27,540 --> 00:42:32,849
that work with versioning of the API so

00:42:30,210 --> 00:42:34,710
if you are changing your response from

00:42:32,849 --> 00:42:39,599
one version to another and you have just

00:42:34,710 --> 00:42:43,410
only one wrapper of you actually doesn't

00:42:39,599 --> 00:42:51,180
exist there is nothing for that but you

00:42:43,410 --> 00:42:57,000
know I would say I would say that it

00:42:51,180 --> 00:43:00,960
could be kind of weird actually to my

00:42:57,000 --> 00:43:04,980
point of view I would say yeah

00:43:00,960 --> 00:43:09,230
one way to expose the exceptions in one

00:43:04,980 --> 00:43:14,040
version and the other one why not yeah

00:43:09,230 --> 00:43:16,920
but yeah there is nothing there is

00:43:14,040 --> 00:43:19,380
nothing to do with that here with your

00:43:16,920 --> 00:43:22,950
wrapper you just in implement the method

00:43:19,380 --> 00:43:25,940
and you have nothing for that but you

00:43:22,950 --> 00:43:28,109
can of course open an issue on no the

00:43:25,940 --> 00:43:30,410
repository remember it's open source

00:43:28,109 --> 00:43:30,410
zone

00:43:35,760 --> 00:43:51,119
no more questions okay can we have a

00:43:39,210 --> 00:43:55,340
round of applause for Sarah please yeah

00:43:51,119 --> 00:44:00,060
okay I have one more thing actually

00:43:55,340 --> 00:44:04,770
there is no more display can I have I

00:44:00,060 --> 00:44:07,369
have one more slide about references to

00:44:04,770 --> 00:44:12,840
have some you know things to see watch

00:44:07,369 --> 00:44:16,230
read yeah hear the symphony arrests

00:44:12,840 --> 00:44:19,470
edition that integrates all of the

00:44:16,230 --> 00:44:25,020
things that I showed you before there is

00:44:19,470 --> 00:44:30,470
of course the sum of some video the

00:44:25,020 --> 00:44:33,840
first one is from Lucas and William a

00:44:30,470 --> 00:44:35,850
very famous guys the first one works a

00:44:33,840 --> 00:44:40,250
lot on phosphorus the second one on

00:44:35,850 --> 00:44:43,890
buzzing hey toys bundle there is another

00:44:40,250 --> 00:44:48,170
video very nice on best practices for

00:44:43,890 --> 00:44:51,960
developers when building a REST API

00:44:48,170 --> 00:44:55,230
application it's there is no that much

00:44:51,960 --> 00:44:59,520
of code but it's about how to design all

00:44:55,230 --> 00:45:04,730
of your API and the last link is the

00:44:59,520 --> 00:45:08,250
JSON LG LG stands for link data its

00:45:04,730 --> 00:45:12,980
specification go check it out it's

00:45:08,250 --> 00:45:12,980
really interesting and that's it

00:45:21,720 --> 00:45:23,780

YouTube URL: https://www.youtube.com/watch?v=MPQrNuwdpMU


