Title: Gabriela D’Ávila - Database Wizardry for Legacy Applications
Publication date: 2015-04-02
Playlist: PHP UK Conference 2015
Description: 
	In my experience, one of the major bottlenecks in building an Application lies in the database. This crucial piece of your app is also the most difficult to alter. If you have high availability software, how do you improve from spaghetti code without being able to do major changes to its database? You may refactor your spaghetti into beautiful, hexagonally layered lasagne, but if your database sucks, your data sucks. In this talk you will learn how to improve your legacy application by discovering the benefits of NoSQL to consolidate your data, and how tools like MapReduce can increase your project performance.

http://www.slideshare.net/gabidavila/database-wizardry-for-legacy-applications
Captions: 
	00:00:00,000 --> 00:00:02,060
you

00:00:05,310 --> 00:00:14,309
good afternoon folks today we will talk

00:00:09,600 --> 00:00:19,560
about a problem that I see too many too

00:00:14,309 --> 00:00:23,210
many times that when we start working

00:00:19,560 --> 00:00:26,699
and we go to conventions and people say

00:00:23,210 --> 00:00:29,220
how can i do that for my my system for

00:00:26,699 --> 00:00:32,669
my database and people say you don't

00:00:29,220 --> 00:00:36,540
have to talk about your database if you

00:00:32,669 --> 00:00:39,210
have a good layer of your model but for

00:00:36,540 --> 00:00:41,880
me that is just a way of dodging the

00:00:39,210 --> 00:00:46,140
real problem and I want to talk to you

00:00:41,880 --> 00:00:51,840
about some some problems I face while

00:00:46,140 --> 00:00:57,420
working and some possible solutions but

00:00:51,840 --> 00:01:01,620
first who i am i am from far away i'm

00:00:57,420 --> 00:01:04,320
brazilian i am majoring digital game

00:01:01,620 --> 00:01:06,810
development but I don't work with it i'm

00:01:04,320 --> 00:01:10,920
a senior software engineering I company

00:01:06,810 --> 00:01:15,329
called skup we are a social network

00:01:10,920 --> 00:01:21,659
aggregator focusing on customer services

00:01:15,329 --> 00:01:25,679
for companies I love Legos I really love

00:01:21,659 --> 00:01:31,079
them I have almost 25,000 pieces of

00:01:25,679 --> 00:01:35,340
flavors those are some of them I don't

00:01:31,079 --> 00:01:38,639
have this one yet I have the Volkswagen

00:01:35,340 --> 00:01:40,889
vintage the simsons house and the Darth

00:01:38,639 --> 00:01:44,939
Vader the Deaf result is also because

00:01:40,889 --> 00:01:50,100
he's like he has a flashlight bewteen so

00:01:44,939 --> 00:01:52,649
it's nice when you power goes out yeah

00:01:50,100 --> 00:01:58,049
but now that I established my nuts

00:01:52,649 --> 00:02:00,119
awesome creations what you're going to

00:01:58,049 --> 00:02:02,130
express on this talk you're going to

00:02:00,119 --> 00:02:04,409
need to learn to raise your options

00:02:02,130 --> 00:02:07,079
because these are like this application

00:02:04,409 --> 00:02:10,590
they're usually something's coupled into

00:02:07,079 --> 00:02:12,990
it you can't take a decision by yourself

00:02:10,590 --> 00:02:15,900
you need to take care of stick to talk

00:02:12,990 --> 00:02:18,510
to stakeholders and even sometimes if

00:02:15,900 --> 00:02:19,080
you're on owner of the company it didn't

00:02:18,510 --> 00:02:23,880
depend on your

00:02:19,080 --> 00:02:28,290
sighs you see my definition of spaghetti

00:02:23,880 --> 00:02:35,190
code versus legacy code and some real

00:02:28,290 --> 00:02:38,490
life examples but first I want to talk

00:02:35,190 --> 00:02:42,140
about respect not about people respect

00:02:38,490 --> 00:02:45,480
but about the application itself but if

00:02:42,140 --> 00:02:47,220
the application is too old and it's

00:02:45,480 --> 00:02:53,910
still running it's because there is a

00:02:47,220 --> 00:02:57,180
reason for it usually is money what you

00:02:53,910 --> 00:03:00,300
do this money in some way sometimes

00:02:57,180 --> 00:03:02,640
applications making the company a lot of

00:03:00,300 --> 00:03:05,520
money and sometimes is making the

00:03:02,640 --> 00:03:08,270
company don't lose money and they don't

00:03:05,520 --> 00:03:13,500
wanna don't wanna change stuff like that

00:03:08,270 --> 00:03:17,310
because they are afraid of it I had a

00:03:13,500 --> 00:03:19,050
case I work in an application that it

00:03:17,310 --> 00:03:24,300
was really the most years I've ever seen

00:03:19,050 --> 00:03:27,510
in my life and it was a high of a la vie

00:03:24,300 --> 00:03:37,140
availability application we can do other

00:03:27,510 --> 00:03:39,840
tables all the time you couldn't do like

00:03:37,140 --> 00:03:42,540
I say creating new features on the fly

00:03:39,840 --> 00:03:46,260
and we have all we have to do it's like

00:03:42,540 --> 00:03:48,630
keep that going and it was like you have

00:03:46,260 --> 00:03:52,560
a sequel and have HTML on the same file

00:03:48,630 --> 00:03:54,780
so it was not really at all but as I

00:03:52,560 --> 00:04:03,209
said it was getting a lot of money for

00:03:54,780 --> 00:04:05,400
the company but why why does show I

00:04:03,209 --> 00:04:10,620
think there is some legacy applications

00:04:05,400 --> 00:04:12,690
that falls into the the pink zone for

00:04:10,620 --> 00:04:14,250
instance magento from easel I guess

00:04:12,690 --> 00:04:18,030
application it doesn't change its

00:04:14,250 --> 00:04:20,910
architectural while and you can extend

00:04:18,030 --> 00:04:24,740
and create a few features you work if

00:04:20,910 --> 00:04:28,200
you can work with it and you have the

00:04:24,740 --> 00:04:31,880
green area kids there is like that

00:04:28,200 --> 00:04:34,550
application work it was a spaghetti zone

00:04:31,880 --> 00:04:36,770
the amino area it's all I call the Chum

00:04:34,550 --> 00:04:42,020
programa crazies on because you got like

00:04:36,770 --> 00:04:45,380
this too much stuff to handle it so how

00:04:42,020 --> 00:04:48,410
they can be different like us

00:04:45,380 --> 00:04:51,500
applications may be no longer supported

00:04:48,410 --> 00:04:53,870
may have a development freeze and

00:04:51,500 --> 00:04:59,590
usually you have all technology like

00:04:53,870 --> 00:05:02,150
peach before PHP 5.2 and my sequel 5.1

00:04:59,590 --> 00:05:04,760
spaghetti code you have a tango

00:05:02,150 --> 00:05:07,820
structure you may have going to

00:05:04,760 --> 00:05:10,520
technology and you have too many bugs to

00:05:07,820 --> 00:05:12,830
track because when you fix something you

00:05:10,520 --> 00:05:15,290
broke break another it's always that you

00:05:12,830 --> 00:05:17,570
don't have tdd you can implement Edd and

00:05:15,290 --> 00:05:21,320
I spaghetti code particularly possible

00:05:17,570 --> 00:05:24,140
and i never saw a crappy application

00:05:21,320 --> 00:05:27,140
with a good database design but I have

00:05:24,140 --> 00:05:31,250
sought some good applications if a bad

00:05:27,140 --> 00:05:34,580
database design sometimes it happens so

00:05:31,250 --> 00:05:39,560
how do you optimize your database wait

00:05:34,580 --> 00:05:43,070
10 years that was a ella and creator he

00:05:39,560 --> 00:05:45,370
said that in nineteen eighty because he

00:05:43,070 --> 00:05:48,530
said at the time that a leg was too

00:05:45,370 --> 00:05:52,490
ahead of its time that computers weren't

00:05:48,530 --> 00:05:55,210
good enough to run it so people would

00:05:52,490 --> 00:06:00,050
have to wait to see the powerful

00:05:55,210 --> 00:06:03,860
language and that has to do with the

00:06:00,050 --> 00:06:07,490
more smooth though it basically says

00:06:03,860 --> 00:06:12,770
that every year you have the you double

00:06:07,490 --> 00:06:15,530
the capacity of processors so can have a

00:06:12,770 --> 00:06:17,840
vertical scaling and for some people

00:06:15,530 --> 00:06:19,970
just vertically scaling at your database

00:06:17,840 --> 00:06:22,430
it's good enough because you may have

00:06:19,970 --> 00:06:26,200
known that much of data throughput and

00:06:22,430 --> 00:06:30,050
you might not have that much of

00:06:26,200 --> 00:06:34,520
concurrency on your database so that may

00:06:30,050 --> 00:06:36,770
work for you but in other cases you may

00:06:34,520 --> 00:06:40,790
need to look for more horizontally

00:06:36,770 --> 00:06:43,220
solution my first tip it was I don't

00:06:40,790 --> 00:06:45,650
know if it was on the talk before and I

00:06:43,220 --> 00:06:48,130
agree you have to learn to

00:06:45,650 --> 00:06:51,350
the structures of the database correctly

00:06:48,130 --> 00:06:53,479
every database give you tools to use my

00:06:51,350 --> 00:06:58,610
sequel for instance you have my eyes on

00:06:53,479 --> 00:07:02,750
that reads really fast and post tributes

00:06:58,610 --> 00:07:06,500
can store no sequel and search into JSON

00:07:02,750 --> 00:07:09,289
fields but since are looking down at

00:07:06,500 --> 00:07:12,740
documents may want to use MongoDB or

00:07:09,289 --> 00:07:17,449
couchdb even auto in Microsoft have good

00:07:12,740 --> 00:07:20,389
tools to database but one thing I see a

00:07:17,449 --> 00:07:25,130
lot is people using the structures in a

00:07:20,389 --> 00:07:27,350
way that the were not meant to be like

00:07:25,130 --> 00:07:29,600
for instance when you start a song and

00:07:27,350 --> 00:07:32,270
cereal I Zuri's and objects in the

00:07:29,600 --> 00:07:35,330
database usually when you do that you're

00:07:32,270 --> 00:07:39,289
starting a key key valley manor you're

00:07:35,330 --> 00:07:45,320
not going to search on the field thus do

00:07:39,289 --> 00:07:48,560
you know this table I get it like they

00:07:45,320 --> 00:07:52,340
do that it's an open source project you

00:07:48,560 --> 00:07:56,120
can make stuff too much complicated it's

00:07:52,340 --> 00:07:58,880
WordPress but they are not going to use

00:07:56,120 --> 00:08:01,310
that because they are not searching on

00:07:58,880 --> 00:08:05,659
the text field they are searching the

00:08:01,310 --> 00:08:11,900
option name column so just for key value

00:08:05,659 --> 00:08:16,610
store storage but text feuds are issue

00:08:11,900 --> 00:08:20,780
as the database stores for each field of

00:08:16,610 --> 00:08:27,860
file it's hard to get hard to read from

00:08:20,780 --> 00:08:31,370
the disk it's not that performative yeah

00:08:27,860 --> 00:08:35,419
I have another example that's something

00:08:31,370 --> 00:08:38,719
my slide that's okay this is a binary

00:08:35,419 --> 00:08:42,099
tree it's from that system I said that I

00:08:38,719 --> 00:08:46,420
work for we had a binary tree there and

00:08:42,099 --> 00:08:49,279
you have the user ID you have the

00:08:46,420 --> 00:08:51,670
ascending path to the root this what it

00:08:49,279 --> 00:08:56,540
is what they call materialized path and

00:08:51,670 --> 00:08:59,170
this is storing the text field so the

00:08:56,540 --> 00:09:01,700
assigning path is a text field

00:08:59,170 --> 00:09:03,710
you have a problem with size limit

00:09:01,700 --> 00:09:06,710
because if you have a huge tree you only

00:09:03,710 --> 00:09:09,500
have four megabytes to start on my

00:09:06,710 --> 00:09:12,070
sequel you have a low performance

00:09:09,500 --> 00:09:16,150
research because you need to do like and

00:09:12,070 --> 00:09:19,430
you don't want to do that on text fields

00:09:16,150 --> 00:09:22,850
although you can have an index on text

00:09:19,430 --> 00:09:25,820
field but if you are using i nodi be the

00:09:22,850 --> 00:09:30,200
length is limited we need to to tell how

00:09:25,820 --> 00:09:32,480
much how many bytes to search into that

00:09:30,200 --> 00:09:35,270
text field unless you are using my eyes

00:09:32,480 --> 00:09:40,460
on that doesn't need that it's full text

00:09:35,270 --> 00:09:43,910
search this database at the time was on

00:09:40,460 --> 00:09:47,420
my Seco 5.5 you didn't have de mexico

00:09:43,910 --> 00:09:51,110
5.6 yet this is the graphical

00:09:47,420 --> 00:09:54,310
representation of that binary tree and

00:09:51,110 --> 00:09:59,180
one of the problems was I want to know

00:09:54,310 --> 00:10:04,690
where did the number one is on the

00:09:59,180 --> 00:10:07,520
ascending path who has it in his network

00:10:04,690 --> 00:10:12,170
you would need to de like to do that

00:10:07,520 --> 00:10:16,760
search the problem is it took 16 seconds

00:10:12,170 --> 00:10:19,490
to the death search and it was am I you

00:10:16,760 --> 00:10:22,070
know to be table because we had

00:10:19,490 --> 00:10:29,210
transactions I couldn't do what my see

00:10:22,070 --> 00:10:32,480
my eyes on there so this the the web

00:10:29,210 --> 00:10:37,970
page that had this information took the

00:10:32,480 --> 00:10:40,790
website three hours after we you could

00:10:37,970 --> 00:10:43,640
go up the application game and three

00:10:40,790 --> 00:10:48,380
hours later it was now again because we

00:10:43,640 --> 00:10:50,300
had 5000 simultaneous 5,000 people

00:10:48,380 --> 00:10:53,150
accessing some attention simultaneously

00:10:50,300 --> 00:10:57,200
the application so 5,000 people doing

00:10:53,150 --> 00:11:00,020
quite of 16 seconds and doing her fresh

00:10:57,200 --> 00:11:04,130
because it's it's not going to show them

00:11:00,020 --> 00:11:06,850
it's going to be slow but I could do I

00:11:04,130 --> 00:11:09,650
did something that was pretty simple I

00:11:06,850 --> 00:11:12,110
added another filter because I was

00:11:09,650 --> 00:11:15,500
always going to show four levels

00:11:12,110 --> 00:11:19,279
three so I would say to the quad to the

00:11:15,500 --> 00:11:24,529
database which levels I wanted and if

00:11:19,279 --> 00:11:32,540
that I went from 16 seconds 2.3 I can

00:11:24,529 --> 00:11:41,230
show you that wait a moment so this is

00:11:32,540 --> 00:11:44,300
the first query I'm sorry oh thank you

00:11:41,230 --> 00:11:47,240
so this is the first query can you read

00:11:44,300 --> 00:11:55,870
it let me see there's a presentation

00:11:47,240 --> 00:11:55,870
mode okay

00:12:04,089 --> 00:12:14,690
um this is a better server I change it

00:12:11,079 --> 00:12:27,500
at the time it was taking 60 sack lose

00:12:14,690 --> 00:12:29,839
Moore's law and this one actually the

00:12:27,500 --> 00:12:33,680
one was it is inverted it took point you

00:12:29,839 --> 00:12:37,839
and this one is to running I should have

00:12:33,680 --> 00:12:48,860
run the one first we get the results and

00:12:37,839 --> 00:12:51,680
13 seconds it's after that it was 15 1

00:12:48,860 --> 00:12:55,870
times faster just because I added

00:12:51,680 --> 00:12:59,930
another filter so sometimes you may have

00:12:55,870 --> 00:13:02,420
you may have a way of improving your

00:12:59,930 --> 00:13:04,970
database performance just looking on in

00:13:02,420 --> 00:13:09,410
your business logic it was what I did

00:13:04,970 --> 00:13:12,589
but there is better ways to store Yuriko

00:13:09,410 --> 00:13:15,889
data if are using a relational database

00:13:12,589 --> 00:13:19,490
you have the adjacent list is the same

00:13:15,889 --> 00:13:23,240
data instead of watching rolls I have

00:13:19,490 --> 00:13:26,269
seven and for each row I say who is the

00:13:23,240 --> 00:13:28,069
left note who is the right note the

00:13:26,269 --> 00:13:31,069
problem is to make that search now you

00:13:28,069 --> 00:13:36,290
have to have a lotta in their joints if

00:13:31,069 --> 00:13:39,620
you want to want to do that but I think

00:13:36,290 --> 00:13:45,199
it's too better than the like on the

00:13:39,620 --> 00:13:49,100
text field if we will know if you can

00:13:45,199 --> 00:13:51,860
use another tool to do your job you can

00:13:49,100 --> 00:13:53,779
use new for Jay Michelle knows better of

00:13:51,860 --> 00:13:55,850
new friday but this would be the

00:13:53,779 --> 00:14:01,069
graphical representation of this thing

00:13:55,850 --> 00:14:03,829
that I started new for Jay so what's to

00:14:01,069 --> 00:14:07,189
learn if use the right structures you

00:14:03,829 --> 00:14:09,890
probably won't have much problems if for

00:14:07,189 --> 00:14:11,779
instance if you want to star money you

00:14:09,890 --> 00:14:13,819
use decimal you don't use float Oh

00:14:11,779 --> 00:14:15,740
double because it can change if you

00:14:13,819 --> 00:14:20,330
change your server because of

00:14:15,740 --> 00:14:22,910
what floating-point avoids like in

00:14:20,330 --> 00:14:27,140
statements please like statements on

00:14:22,910 --> 00:14:31,780
text field because they can't be indexed

00:14:27,140 --> 00:14:34,130
in a fast way for from the database

00:14:31,780 --> 00:14:36,470
review your query sometimes the problem

00:14:34,130 --> 00:14:39,370
can be easier than doing some changes

00:14:36,470 --> 00:14:42,290
that you think it was needed and

00:14:39,370 --> 00:14:44,240
different tools have a trade-off since I

00:14:42,290 --> 00:14:46,730
was talking about new for J you will

00:14:44,240 --> 00:14:48,830
have to learn how to meeting a service

00:14:46,730 --> 00:14:51,230
like that you have to have someone your

00:14:48,830 --> 00:14:53,870
team you can that I don't know what

00:14:51,230 --> 00:14:55,870
develops or even yourself but you would

00:14:53,870 --> 00:14:58,580
have another responsibility to add your

00:14:55,870 --> 00:15:01,970
application so this is one thing you

00:14:58,580 --> 00:15:05,420
need to Joyce think about it can I take

00:15:01,970 --> 00:15:09,050
care of that later if you don't you have

00:15:05,420 --> 00:15:11,960
to like use the adjacent table it's the

00:15:09,050 --> 00:15:15,800
same infrastructure but you won't have

00:15:11,960 --> 00:15:18,830
tried on all responsibility I have

00:15:15,800 --> 00:15:22,510
another query this one is from the same

00:15:18,830 --> 00:15:26,270
application but this one is about money

00:15:22,510 --> 00:15:28,700
transactions so every time someone

00:15:26,270 --> 00:15:32,030
bought something someone would win

00:15:28,700 --> 00:15:34,970
something because of that and it's like

00:15:32,030 --> 00:15:37,370
affiliate program and when you'd mess

00:15:34,970 --> 00:15:41,480
with people's money they want to see

00:15:37,370 --> 00:15:44,120
everything that's going on this would

00:15:41,480 --> 00:15:45,980
take the application down as the other

00:15:44,120 --> 00:15:49,690
one but this one was the more critical

00:15:45,980 --> 00:15:55,130
and I was given two days to solve it

00:15:49,690 --> 00:15:56,900
this is the quarry how long does that

00:15:55,130 --> 00:15:58,760
quite takes it shouldn't take that long

00:15:56,900 --> 00:16:02,420
because they only have two inner joints

00:15:58,760 --> 00:16:06,710
and although do you have this the fewer

00:16:02,420 --> 00:16:09,080
using text this is a for sure the guy

00:16:06,710 --> 00:16:12,680
who did it didn't know about dimensional

00:16:09,080 --> 00:16:16,280
tables and as I said I couldn't do on

00:16:12,680 --> 00:16:19,940
other table because other tables in my

00:16:16,280 --> 00:16:22,460
sequel locks the the table and turns

00:16:19,940 --> 00:16:24,470
that you had we had like five

00:16:22,460 --> 00:16:28,400
transactions per second I couldn't do

00:16:24,470 --> 00:16:31,280
that so

00:16:28,400 --> 00:16:34,730
that query takes eight million eight

00:16:31,280 --> 00:16:38,110
seconds to run I can show you after and

00:16:34,730 --> 00:16:41,870
I don't want to show you something first

00:16:38,110 --> 00:16:44,330
so as I said you have a foreign key

00:16:41,870 --> 00:16:46,820
primary key relationship you have a

00:16:44,330 --> 00:16:52,460
valid viewed as a fury and this view

00:16:46,820 --> 00:16:56,180
this field is in the accent you have a

00:16:52,460 --> 00:17:00,890
order by using date time and this field

00:16:56,180 --> 00:17:03,800
is indexing in a descending manner but I

00:17:00,890 --> 00:17:12,050
have something to tell you this is for

00:17:03,800 --> 00:17:14,000
my circle documentation descending the

00:17:12,050 --> 00:17:16,850
instruction of being the same in outer

00:17:14,000 --> 00:17:18,560
table its parts but ignored which means

00:17:16,850 --> 00:17:25,480
my secret doesn't have a descending

00:17:18,560 --> 00:17:28,520
index yeah I felt like that but worse I

00:17:25,480 --> 00:17:33,320
was very angry because I had two days to

00:17:28,520 --> 00:17:35,840
solve it and the advantages of a working

00:17:33,320 --> 00:17:38,060
of different companies that we have its

00:17:35,840 --> 00:17:43,240
I worked a lot of different database I

00:17:38,060 --> 00:17:46,850
work of fun Firebird and Oracle and

00:17:43,240 --> 00:17:49,760
sequel server and Portuguese they all

00:17:46,850 --> 00:17:52,940
have the same thing in excess even

00:17:49,760 --> 00:17:54,790
though you have a sending index the

00:17:52,940 --> 00:17:59,000
database was intelligent enough to

00:17:54,790 --> 00:18:03,110
reverse it and do the search for you but

00:17:59,000 --> 00:18:07,090
it's not what it's not the way in my

00:18:03,110 --> 00:18:11,390
sick of 5.6 when I was trying to

00:18:07,090 --> 00:18:15,620
replicate the problem to show you after

00:18:11,390 --> 00:18:17,990
i left there was already Mexico 5.6 we

00:18:15,620 --> 00:18:20,690
had upgraded the server but we already

00:18:17,990 --> 00:18:23,930
had solved the problem another way we

00:18:20,690 --> 00:18:27,710
didn't know that but this the the index

00:18:23,930 --> 00:18:29,870
is a little bit faster now in my secret

00:18:27,710 --> 00:18:32,330
so that credit that to create second was

00:18:29,870 --> 00:18:35,810
taking to you I was like what they

00:18:32,330 --> 00:18:38,710
weren't significant line because it was

00:18:35,810 --> 00:18:41,289
more slow again but

00:18:38,710 --> 00:18:44,190
we decided to do something we decided to

00:18:41,289 --> 00:18:47,440
cash that query but I could cash in

00:18:44,190 --> 00:18:50,260
right it's 4x for instance because every

00:18:47,440 --> 00:18:51,909
user have a different query and I

00:18:50,260 --> 00:18:55,029
couldn't use man cash for the same

00:18:51,909 --> 00:18:56,950
reason so where I would start something

00:18:55,029 --> 00:19:01,690
like that that would need to head up ii

00:18:56,950 --> 00:19:04,090
dated all the time he decided to use a

00:19:01,690 --> 00:19:07,240
document database to store the table

00:19:04,090 --> 00:19:09,690
just as a helical to be able to read

00:19:07,240 --> 00:19:13,600
from it instead of ringing for my sequel

00:19:09,690 --> 00:19:17,590
we did the same query this is the

00:19:13,600 --> 00:19:21,279
query Mongol someone have the data range

00:19:17,590 --> 00:19:27,580
you have the search with Dean and the

00:19:21,279 --> 00:19:29,860
users it takes 35 milliseconds now I was

00:19:27,580 --> 00:19:33,309
told the 35 milliseconds and it's

00:19:29,860 --> 00:19:34,929
low performance that there is queries

00:19:33,309 --> 00:19:40,740
that take three milliseconds to run

00:19:34,929 --> 00:19:43,649
there and I am NOT among go engineer I

00:19:40,740 --> 00:19:46,330
did that installation by myself so

00:19:43,649 --> 00:19:48,399
getting from eight seconds to 25 minutes

00:19:46,330 --> 00:19:53,140
I wasn't angry all was were really

00:19:48,399 --> 00:19:56,020
really happy so again this is the my

00:19:53,140 --> 00:19:58,510
psychic re this is the cranny

00:19:56,020 --> 00:20:00,990
they're pretty much similar they're

00:19:58,510 --> 00:20:03,909
pretty much the same the index 0

00:20:00,990 --> 00:20:09,130
works in understanding manner it works

00:20:03,909 --> 00:20:11,470
and on my sigil idiot I needed the the

00:20:09,130 --> 00:20:19,950
newest transactions I needed to be

00:20:11,470 --> 00:20:23,970
descended so my what is still learn now

00:20:19,950 --> 00:20:26,200
my psycho has 40 index the same indexes

00:20:23,970 --> 00:20:28,419
sometimes you need to use another two to

00:20:26,200 --> 00:20:30,490
solve your problem and as I said there

00:20:28,419 --> 00:20:33,570
is a trade-off there I want to show you

00:20:30,490 --> 00:20:33,570
something again

00:20:38,260 --> 00:20:40,260
Oh

00:21:02,499 --> 00:21:15,200
this is that query I show you show you

00:21:06,049 --> 00:21:20,110
before let's see i was told i should do

00:21:15,200 --> 00:21:20,110
a dance right now enjoyed the car run I

00:21:21,220 --> 00:21:33,049
hope it takes last time yeah done 13

00:21:28,340 --> 00:21:40,070
seconds and what I want to show you is

00:21:33,049 --> 00:21:43,159
this when I found the the query on the

00:21:40,070 --> 00:21:48,200
database it was using a the primary key

00:21:43,159 --> 00:21:50,119
as or the by field and usually the

00:21:48,200 --> 00:21:52,789
primary key it's a good index because

00:21:50,119 --> 00:21:56,470
it's always in the exit and you can

00:21:52,789 --> 00:22:00,259
search it for it in a very fast way but

00:21:56,470 --> 00:22:03,590
in my secret documentation says that the

00:22:00,259 --> 00:22:05,749
primary key works in mysterious ways it

00:22:03,590 --> 00:22:10,909
does explain how by order by by this

00:22:05,749 --> 00:22:12,860
index it's not simple as as they should

00:22:10,909 --> 00:22:16,269
and if you do an explain it's going to

00:22:12,860 --> 00:22:19,419
show you the same same information so

00:22:16,269 --> 00:22:19,419
ascending order

00:22:24,740 --> 00:22:30,170
this is server was 16 gigabytes of run i

00:22:28,110 --> 00:22:36,930
have read me eight million records

00:22:30,170 --> 00:22:39,650
unstable touching in 13 seconds I'm

00:22:36,930 --> 00:22:50,880
afraid of running the dead sending now

00:22:39,650 --> 00:23:06,390
it's going to take like 60 seconds or I

00:22:50,880 --> 00:23:10,230
could be trolled in last time Oh what's

00:23:06,390 --> 00:23:15,110
the same time I think the first time see

00:23:10,230 --> 00:23:15,110
I have quite a catch disabled

00:23:25,840 --> 00:23:35,289
yeah it took more time okay i'm sad now

00:23:33,120 --> 00:23:38,230
but at the time it took less than one

00:23:35,289 --> 00:23:45,760
second to run it and i want to show you

00:23:38,230 --> 00:23:48,480
that when i ran if they transaction it

00:23:45,760 --> 00:23:48,480
was this one

00:23:56,110 --> 00:24:21,299
oh yeah not good but that's okay 13

00:24:12,760 --> 00:24:21,299
seconds okay yeah I apologize for that

00:24:29,640 --> 00:24:38,080
so we came from a 13-second to a

00:24:34,530 --> 00:24:42,280
35-minute second search on another

00:24:38,080 --> 00:24:45,660
database how did we do that there is

00:24:42,280 --> 00:24:49,030
choice as I said before you have your

00:24:45,660 --> 00:24:52,840
like ass application that may have been

00:24:49,030 --> 00:24:54,820
well organized as as I was a code again

00:24:52,840 --> 00:24:59,950
like magento it's not the perfect

00:24:54,820 --> 00:25:03,130
application but really organized and you

00:24:59,950 --> 00:25:06,790
can have the spaghetti code if you do

00:25:03,130 --> 00:25:08,710
the passive aversion it's not it would

00:25:06,790 --> 00:25:12,600
be like that you have an application and

00:25:08,710 --> 00:25:22,240
you have your data oh my god I'm sorry

00:25:12,600 --> 00:25:25,179
nobody told me why is that and you would

00:25:22,240 --> 00:25:27,130
need to use two tables for that you need

00:25:25,179 --> 00:25:29,799
your you have your already transactions

00:25:27,130 --> 00:25:32,020
table yeah nothing for our table for you

00:25:29,799 --> 00:25:35,559
to know what transactions are painting

00:25:32,020 --> 00:25:39,130
from synchronized so your data go to the

00:25:35,559 --> 00:25:43,179
transaction table go to your trigger it

00:25:39,130 --> 00:25:46,120
it triggers an event on the database

00:25:43,179 --> 00:25:50,280
that store that data in another table

00:25:46,120 --> 00:25:53,980
and you have a cron job taking that and

00:25:50,280 --> 00:25:57,160
put into but again I had two days

00:25:53,980 --> 00:25:58,929
to do that it was the fastest way and it

00:25:57,160 --> 00:26:03,040
stills the way that is working at you

00:25:58,929 --> 00:26:07,030
today there but if you have a good

00:26:03,040 --> 00:26:09,100
application that's just old you can do

00:26:07,030 --> 00:26:13,520
stuff like

00:26:09,100 --> 00:26:17,780
you can have your data saving to my

00:26:13,520 --> 00:26:22,130
sequel send it to rabbitmq for instance

00:26:17,780 --> 00:26:30,470
and saving to that would be nice

00:26:22,130 --> 00:26:34,730
because you would have most the most

00:26:30,470 --> 00:26:37,429
recent records would be on the and

00:26:34,730 --> 00:26:41,570
the other would depend on how much the

00:26:37,429 --> 00:26:44,090
the the cron job took to run you don't

00:26:41,570 --> 00:26:46,789
want to do con job running twice at the

00:26:44,090 --> 00:26:51,440
same time and the trade-off maybe a

00:26:46,789 --> 00:26:53,539
little better at this case but if you

00:26:51,440 --> 00:26:56,330
have like several places on the

00:26:53,539 --> 00:26:58,909
application doing inserts and updates

00:26:56,330 --> 00:27:03,500
you can do you can't do this unless you

00:26:58,909 --> 00:27:09,650
like trying to map every place of it and

00:27:03,500 --> 00:27:11,780
add a line to send it to the queue the

00:27:09,650 --> 00:27:15,620
best solution may not be the textbook

00:27:11,780 --> 00:27:19,190
solution the solution that is bias is

00:27:15,620 --> 00:27:21,400
the solution is working for you and that

00:27:19,190 --> 00:27:24,770
fancy solution may be overkill because

00:27:21,400 --> 00:27:26,570
this stuff it's not cheap either you

00:27:24,770 --> 00:27:30,169
need an infrastructure to make that work

00:27:26,570 --> 00:27:32,120
in the first application it's old but

00:27:30,169 --> 00:27:33,980
it's small and you don't have a lot of

00:27:32,120 --> 00:27:36,500
people to take care of it help you with

00:27:33,980 --> 00:27:38,840
that you may just go through the easy

00:27:36,500 --> 00:27:49,039
path there is a simple cron job that

00:27:38,840 --> 00:27:50,330
anyone can set up another another thing

00:27:49,039 --> 00:27:53,030
that I wanted to share I don't know if

00:27:50,330 --> 00:27:56,000
you saw the book about database in

00:27:53,030 --> 00:27:59,780
factoring it's one of those marching

00:27:56,000 --> 00:28:01,429
follow series and it says that she for

00:27:59,780 --> 00:28:05,000
you to make a change in your database

00:28:01,429 --> 00:28:06,890
like get a field from one table putting

00:28:05,000 --> 00:28:09,320
another you will have a two-year

00:28:06,890 --> 00:28:12,049
deprecation period like in two year they

00:28:09,320 --> 00:28:14,510
can do a new application that's why I

00:28:12,049 --> 00:28:17,360
say that the textbook solution maybe not

00:28:14,510 --> 00:28:19,340
the best solution for you

00:28:17,360 --> 00:28:22,940
this thing is one thing that I learned

00:28:19,340 --> 00:28:28,429
and we I am tried to implement on the

00:28:22,940 --> 00:28:32,960
company but it works as I said before I

00:28:28,429 --> 00:28:35,420
couldn't change I had some some problems

00:28:32,960 --> 00:28:41,360
we falter tables because I had a lot of

00:28:35,420 --> 00:28:43,340
data only it and usually the the other

00:28:41,360 --> 00:28:45,470
speaker that was before me sad if you

00:28:43,340 --> 00:28:47,870
have a text view the document adjacent

00:28:45,470 --> 00:28:51,290
you feel to start saving another table

00:28:47,870 --> 00:28:53,690
that's usually a good advice because if

00:28:51,290 --> 00:28:56,780
you have to do another table what Mexico

00:28:53,690 --> 00:28:59,510
does it block the table copies the table

00:28:56,780 --> 00:29:04,700
from the old to the new one if the new

00:28:59,510 --> 00:29:06,980
fields or new indexes but if you want to

00:29:04,700 --> 00:29:09,500
do that if you want that table to be

00:29:06,980 --> 00:29:15,230
searchable you will probably use

00:29:09,500 --> 00:29:17,840
something like elastic search or you're

00:29:15,230 --> 00:29:24,049
going to start the the document part on

00:29:17,840 --> 00:29:27,140
a no sequel database you can get it

00:29:24,049 --> 00:29:29,870
directly from the database so you would

00:29:27,140 --> 00:29:33,470
have your application saving the data on

00:29:29,870 --> 00:29:36,650
the any relational database at all and

00:29:33,470 --> 00:29:38,780
use one of the servers the services to

00:29:36,650 --> 00:29:41,990
search on it probably a lot of people

00:29:38,780 --> 00:29:45,490
uses elastic research at my my job use

00:29:41,990 --> 00:29:48,890
cloud search but the same it's a solar

00:29:45,490 --> 00:29:51,919
implementation for amazon it works the

00:29:48,890 --> 00:30:01,280
same way and one thing that i was

00:29:51,919 --> 00:30:03,679
looking district was that you can you

00:30:01,280 --> 00:30:10,840
can't skip the database part at all you

00:30:03,679 --> 00:30:10,840
don't need it to store your documents

00:30:11,480 --> 00:30:19,250
you can it's working I don't know you

00:30:17,210 --> 00:30:21,710
can keep the database part at all you

00:30:19,250 --> 00:30:25,850
don't need it all to start this kind of

00:30:21,710 --> 00:30:29,270
data and search for it I can start in on

00:30:25,850 --> 00:30:31,490
a text file since a text field in my

00:30:29,270 --> 00:30:35,060
secrets a text file why did the text

00:30:31,490 --> 00:30:41,210
file can be in or anywhere else it is

00:30:35,060 --> 00:30:45,500
the same thing in a low level so for

00:30:41,210 --> 00:30:48,140
instance if your I get those because I

00:30:45,500 --> 00:30:53,110
would social media so usually my

00:30:48,140 --> 00:30:57,230
documents are feeds twitter facebook on

00:30:53,110 --> 00:31:00,680
RSS feed you can use the application to

00:30:57,230 --> 00:31:04,040
gather data save the data and a bucket

00:31:00,680 --> 00:31:08,510
the bucket is a CDN content delivery

00:31:04,040 --> 00:31:12,440
network inside amazon and use the same

00:31:08,510 --> 00:31:15,260
infrastructure to get that text into

00:31:12,440 --> 00:31:18,430
your search in your code search but you

00:31:15,260 --> 00:31:22,040
can use that in rock space or any other

00:31:18,430 --> 00:31:23,690
like yeah kamiya other CD ends and make

00:31:22,040 --> 00:31:27,350
a logic search search for the file that

00:31:23,690 --> 00:31:30,170
you because actually it all imports to

00:31:27,350 --> 00:31:37,700
them the document not how you get the

00:31:30,170 --> 00:31:40,750
documents and this kind of works I have

00:31:37,700 --> 00:31:40,750
another demo here

00:31:48,590 --> 00:31:54,450
so this is a little demo that I made

00:31:51,890 --> 00:31:56,880
someone has an easy twitter handle that

00:31:54,450 --> 00:32:01,230
what is your twitter username someone

00:31:56,880 --> 00:32:06,480
please just say anyone just same here

00:32:01,230 --> 00:32:15,179
three days a name oh I'm maxing I

00:32:06,480 --> 00:32:28,500
already have an oxy here let's see he is

00:32:15,179 --> 00:32:39,590
already in here what's yours am ah da is

00:32:28,500 --> 00:32:39,590
that ok let me try mine mine is not here

00:32:43,790 --> 00:32:54,299
no it's local its running local and

00:32:52,020 --> 00:33:06,870
saving to the cloud so there's gonna be

00:32:54,299 --> 00:33:10,260
a little slowly go first Wi-Fi ok i'm

00:33:06,870 --> 00:33:14,250
using opera because I'm mad at Google so

00:33:10,260 --> 00:33:18,350
don't judge me I don't remember what my

00:33:14,250 --> 00:33:18,350
last tweet was let me see

00:33:21,690 --> 00:33:38,669
a pitch be brewing londa just gonna show

00:33:28,399 --> 00:33:40,590
search bailando here same to it I didn't

00:33:38,669 --> 00:33:45,090
pass through any database at all i just

00:33:40,590 --> 00:33:47,789
saved the the test text file into amazon

00:33:45,090 --> 00:33:51,210
s3 and culture she got it from it and

00:33:47,789 --> 00:33:53,519
index it you'll make the search so you

00:33:51,210 --> 00:33:57,179
can use it the same idea you can get

00:33:53,519 --> 00:34:00,629
those documents out of your table so you

00:33:57,179 --> 00:34:04,440
gain performance and you can even like

00:34:00,629 --> 00:34:06,570
save disk space sometimes because at our

00:34:04,440 --> 00:34:11,550
case for instance or disk is the most

00:34:06,570 --> 00:34:12,990
expensive part of the server and this is

00:34:11,550 --> 00:34:16,500
a good way of doing because we already

00:34:12,990 --> 00:34:18,839
have the data in the exit on the cloud

00:34:16,500 --> 00:34:21,869
search but before we would have to

00:34:18,839 --> 00:34:24,569
search into code search get it from the

00:34:21,869 --> 00:34:26,310
database put on the code search get the

00:34:24,569 --> 00:34:28,919
called search ID and go back to the

00:34:26,310 --> 00:34:32,609
database to get the data it's not too

00:34:28,919 --> 00:34:34,619
many steps and you can decrease your

00:34:32,609 --> 00:34:41,540
concurrency know that are the database

00:34:34,619 --> 00:34:41,540
with that time and

00:34:47,390 --> 00:34:53,360
let me go back to the presentation here

00:34:57,800 --> 00:35:03,960
you can add an extra layer for search

00:35:01,350 --> 00:35:06,540
purposes so if we're going to do full

00:35:03,960 --> 00:35:09,030
text search I usually say anything that

00:35:06,540 --> 00:35:11,580
I user types in you shouldn't be

00:35:09,030 --> 00:35:14,250
starring in a database if it is a text

00:35:11,580 --> 00:35:15,690
textview shouldn't be on the relation

00:35:14,250 --> 00:35:18,120
other way these codes are not going to

00:35:15,690 --> 00:35:21,090
do a inner join for that field you're

00:35:18,120 --> 00:35:23,730
not going to relate anything that that

00:35:21,090 --> 00:35:26,040
field you're just gonna need it because

00:35:23,730 --> 00:35:28,890
you need to retrieve it but you don't

00:35:26,040 --> 00:35:32,670
have them the NSD actual necessity of

00:35:28,890 --> 00:35:34,820
these data being there and it can be a

00:35:32,670 --> 00:35:43,080
you just save a life when you have

00:35:34,820 --> 00:35:46,140
tables with billions of records and try

00:35:43,080 --> 00:35:48,750
to use text files CDMS are usually

00:35:46,140 --> 00:35:51,390
shipped cheaper and you have elastic

00:35:48,750 --> 00:35:54,000
search you could try to integrate you

00:35:51,390 --> 00:35:56,570
into it's not that hard usually do you

00:35:54,000 --> 00:36:00,030
have good api's I will share my

00:35:56,570 --> 00:36:05,070
demonstration on github if 10 if or not

00:36:00,030 --> 00:36:10,590
anyone else want to see it and to finish

00:36:05,070 --> 00:36:14,330
it always analyze your trade off and the

00:36:10,590 --> 00:36:18,660
structures need to be used correctly

00:36:14,330 --> 00:36:21,810
because it is where you get your data

00:36:18,660 --> 00:36:24,720
consistency is simple solutions can be

00:36:21,810 --> 00:36:27,780
the perfect ones you don't need to do

00:36:24,720 --> 00:36:30,150
fancy but at my life solution was a

00:36:27,780 --> 00:36:34,430
little fancy but because i found it also

00:36:30,150 --> 00:36:34,430
when I found out I wanted to share and

00:36:34,490 --> 00:36:39,090
try sometimes to look in your business

00:36:37,230 --> 00:36:41,010
logics much of your problems sometimes

00:36:39,090 --> 00:36:43,080
because you don't understand how your

00:36:41,010 --> 00:36:45,030
business works and you do stuff without

00:36:43,080 --> 00:36:49,280
knowing how you're doing if it is the

00:36:45,030 --> 00:36:54,090
right way I would like you to please

00:36:49,280 --> 00:36:55,500
give a feedback in joining for me but

00:36:54,090 --> 00:36:58,350
this is my twitter handle i want to

00:36:55,500 --> 00:37:01,020
thank you digitalocean for giving me the

00:36:58,350 --> 00:37:07,280
server for doing this

00:37:01,020 --> 00:37:07,280

YouTube URL: https://www.youtube.com/watch?v=85E0hNWKIi0


