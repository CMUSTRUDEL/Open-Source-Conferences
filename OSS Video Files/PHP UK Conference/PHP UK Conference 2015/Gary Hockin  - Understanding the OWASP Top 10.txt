Title: Gary Hockin  - Understanding the OWASP Top 10
Publication date: 2015-04-02
Playlist: PHP UK Conference 2015
Description: 
	Every year the OWASP community releases a Top 10 List of what it considers are the most critical web application security flaws. Join us as we step through the current OWASP Top 10 vulnerabilities, explaining what they are and how they can affect your PHP application. We'll take a quickfire look at all 10 security concerns complete with examples and best practices. You'll leave the talk with a basic understanding of each flaw giving you a great grounding to audit your own applications and an impetus to learn more about website security.

http://hock.in/owasp-phpuk15
Captions: 
	00:00:05,320 --> 00:00:12,430
so my name is Gary Hakan and I work for

00:00:09,130 --> 00:00:15,160
Rove we're a web development company

00:00:12,430 --> 00:00:17,290
based in the US um if you listen to the

00:00:15,160 --> 00:00:19,900
dev Hal podcast you may have heard ad

00:00:17,290 --> 00:00:23,860
Fink ler mercilessly mocking us as we

00:00:19,900 --> 00:00:25,450
sponsor that yeah I work for roll from

00:00:23,860 --> 00:00:26,880
the PHP developer for fifteen years you

00:00:25,450 --> 00:00:29,529
don't need to know any more about me oh

00:00:26,880 --> 00:00:31,980
yeah I forgot that's a picture of me

00:00:29,529 --> 00:00:35,110
dressed as Elvis for no apparent reason

00:00:31,980 --> 00:00:39,370
so we're here today we're going to talk

00:00:35,110 --> 00:00:41,500
about Oh wasp it's the open web

00:00:39,370 --> 00:00:45,660
application security project and it's

00:00:41,500 --> 00:00:49,690
like an open source organization for web

00:00:45,660 --> 00:00:52,030
application vulnerabilities so cut your

00:00:49,690 --> 00:00:55,329
hands who here has heard of a wasp

00:00:52,030 --> 00:00:56,829
before this talk superb I can't really

00:00:55,329 --> 00:00:59,260
see you guys in the back so I'm just

00:00:56,829 --> 00:01:00,640
gonna guess but yeah that's a good show

00:00:59,260 --> 00:01:02,920
of hands there's still a few people who

00:01:00,640 --> 00:01:04,449
haven't heard about was so for the

00:01:02,920 --> 00:01:06,520
people who have heared of all wasp and

00:01:04,449 --> 00:01:07,899
have looked at the vulnerabilities they

00:01:06,520 --> 00:01:09,909
should be a really good refresher for

00:01:07,899 --> 00:01:12,310
you guys it's going to be very brief

00:01:09,909 --> 00:01:15,870
very basic run through the the current

00:01:12,310 --> 00:01:19,360
top ten or whilst periodically release

00:01:15,870 --> 00:01:23,400
top ten list of vulnerabilities the last

00:01:19,360 --> 00:01:25,510
one was from 2013 and they take

00:01:23,400 --> 00:01:27,909
vulnerabilities that they find in the in

00:01:25,510 --> 00:01:29,860
the wild in real applications not just

00:01:27,909 --> 00:01:31,180
PHP applications you know they take all

00:01:29,860 --> 00:01:33,220
applications that are running on

00:01:31,180 --> 00:01:35,799
websites and they collect the data into

00:01:33,220 --> 00:01:39,100
what they think at the most 10 the 10

00:01:35,799 --> 00:01:41,080
most prevalent and severe so these

00:01:39,100 --> 00:01:43,060
things are rated not only on how often

00:01:41,080 --> 00:01:44,470
they're found in the wild but also how

00:01:43,060 --> 00:01:45,940
severe they are and there's a

00:01:44,470 --> 00:01:50,140
combination of both that puts them into

00:01:45,940 --> 00:01:52,270
this top 10 order so we've got 10 things

00:01:50,140 --> 00:01:55,150
to get through in an hour so I guess you

00:01:52,270 --> 00:01:58,150
should get started number 10 is

00:01:55,150 --> 00:02:00,340
unvalidated redirects and forwards and

00:01:58,150 --> 00:02:02,380
there are a couple of moments in this

00:02:00,340 --> 00:02:05,650
where the name of the vulnerability is

00:02:02,380 --> 00:02:07,600
like not immediately obvious about what

00:02:05,650 --> 00:02:10,149
that's talking about there's a couple of

00:02:07,600 --> 00:02:12,189
moments where you think well what does

00:02:10,149 --> 00:02:13,689
it actually really mean so the whole

00:02:12,189 --> 00:02:15,219
point of going through this is hopefully

00:02:13,689 --> 00:02:17,349
everybody can understand all of the

00:02:15,219 --> 00:02:18,140
vulnerabilities how they happen why they

00:02:17,349 --> 00:02:22,550
happen and how to

00:02:18,140 --> 00:02:25,060
come to them apologize so the website

00:02:22,550 --> 00:02:27,430
we're going to look at today which has

00:02:25,060 --> 00:02:29,900
tremendous amounts of vulnerabilities is

00:02:27,430 --> 00:02:31,130
reynold industries website as anyone

00:02:29,900 --> 00:02:34,270
does everyone here the reynold

00:02:31,130 --> 00:02:36,709
industries show hands everyone anyone

00:02:34,270 --> 00:02:38,450
excellent so at least some of you will

00:02:36,709 --> 00:02:41,240
understand the humor in this slide deck

00:02:38,450 --> 00:02:42,920
now if you haven't it's from the the it

00:02:41,240 --> 00:02:45,020
crowd on channel 4 the comedy on channel

00:02:42,920 --> 00:02:46,340
4 so we're gonna look at the Reynold

00:02:45,020 --> 00:02:48,170
Industries website and we're going to

00:02:46,340 --> 00:02:51,040
look at how the vulnerabilities would

00:02:48,170 --> 00:02:55,580
affect a kind of sued or real world

00:02:51,040 --> 00:02:59,209
website so we're looking at unvalidated

00:02:55,580 --> 00:03:00,680
redirects and forwards now many of us

00:02:59,209 --> 00:03:03,620
will have seen a page like this in the

00:03:00,680 --> 00:03:05,450
wild on the internet and you know it's

00:03:03,620 --> 00:03:08,120
literally just saying oh I want to look

00:03:05,450 --> 00:03:10,970
at a news post and the item ID of that

00:03:08,120 --> 00:03:12,709
news post is three zero zero four and at

00:03:10,970 --> 00:03:15,140
the bottom you can see it says log in to

00:03:12,709 --> 00:03:16,640
comment if I want to comment on this

00:03:15,140 --> 00:03:18,640
post I need to be logged in to the

00:03:16,640 --> 00:03:22,190
website for obvious reasons

00:03:18,640 --> 00:03:24,650
but because I can log in to this website

00:03:22,190 --> 00:03:26,209
from multiple places typically what

00:03:24,650 --> 00:03:29,180
you'll do is you'll log in to the

00:03:26,209 --> 00:03:31,010
website and then you'll be taken back to

00:03:29,180 --> 00:03:33,260
where you came from in order for you to

00:03:31,010 --> 00:03:34,760
quickly and easily comment you know it's

00:03:33,260 --> 00:03:35,870
a kind of standard thing right you don't

00:03:34,760 --> 00:03:37,549
want to have to go back to the homepage

00:03:35,870 --> 00:03:41,170
and navigate right back to where you

00:03:37,549 --> 00:03:43,220
were in order to do the validated action

00:03:41,170 --> 00:03:46,040
but the pertinent piece of information

00:03:43,220 --> 00:03:48,260
here is in how the login form handles

00:03:46,040 --> 00:03:50,900
that redirect back to where you came if

00:03:48,260 --> 00:03:52,910
you look here you can see that there's a

00:03:50,900 --> 00:03:55,370
redirect parameter in the login form to

00:03:52,910 --> 00:03:57,530
say log me in and when I've actually

00:03:55,370 --> 00:03:59,930
successfully logged in send me back to

00:03:57,530 --> 00:04:02,660
this page please and this is where the

00:03:59,930 --> 00:04:04,459
problem is because in this instance we

00:04:02,660 --> 00:04:05,900
have the full URL of the page that we

00:04:04,459 --> 00:04:11,030
need to get redirected to once we've

00:04:05,900 --> 00:04:12,799
successfully logged in now yeah sending

00:04:11,030 --> 00:04:15,230
out an email to an entire team of people

00:04:12,799 --> 00:04:16,549
who works in an organization is fairly

00:04:15,230 --> 00:04:18,440
trivial right

00:04:16,549 --> 00:04:22,130
you can try numerous combinations team

00:04:18,440 --> 00:04:23,750
at staff at users at and you can get an

00:04:22,130 --> 00:04:25,789
email out to everybody in an

00:04:23,750 --> 00:04:27,890
organization and in this instance we say

00:04:25,789 --> 00:04:29,510
oh click on please click on this link to

00:04:27,890 --> 00:04:31,280
go to our corporate website to see some

00:04:29,510 --> 00:04:34,259
new amazing content

00:04:31,280 --> 00:04:35,849
but if we look at how that link is

00:04:34,259 --> 00:04:36,870
formatted you can see that it's taken us

00:04:35,849 --> 00:04:38,819
to the login page

00:04:36,870 --> 00:04:41,689
but with a redirect outside of the

00:04:38,819 --> 00:04:45,090
domain so we're actually going to login

00:04:41,689 --> 00:04:47,969
successfully and be redirected to a URL

00:04:45,090 --> 00:04:50,639
outside of our organization so now we

00:04:47,969 --> 00:04:52,080
log in and we go oh my username and

00:04:50,639 --> 00:04:54,449
password is fail I must have mistyped

00:04:52,080 --> 00:04:56,639
the password or I must have you know put

00:04:54,449 --> 00:04:59,430
a space that I had caps lock on so then

00:04:56,639 --> 00:05:00,659
you log in again but the the observant

00:04:59,430 --> 00:05:02,340
people will notice that you're not

00:05:00,659 --> 00:05:04,500
logging into the Reynold Industries

00:05:02,340 --> 00:05:07,020
website anymore you're logging into the

00:05:04,500 --> 00:05:10,289
north eclectic or calm web site who will

00:05:07,020 --> 00:05:11,789
then have in your credentials but once

00:05:10,289 --> 00:05:14,039
you've actually logged in here whether

00:05:11,789 --> 00:05:15,599
it's valid or not they then redirect you

00:05:14,039 --> 00:05:18,300
back to the web site so the only way you

00:05:15,599 --> 00:05:20,009
know that you've been had would be oh I

00:05:18,300 --> 00:05:21,479
thought I'd put my correct password in

00:05:20,009 --> 00:05:23,729
but I hadn't so I had to log in again

00:05:21,479 --> 00:05:26,279
and you get redirected back to a page

00:05:23,729 --> 00:05:29,729
that you wouldn't expect but we can all

00:05:26,279 --> 00:05:32,669
see how how huge a security floor that

00:05:29,729 --> 00:05:34,800
can be to redirect people anywhere from

00:05:32,669 --> 00:05:36,449
your website by having mechanisms where

00:05:34,800 --> 00:05:38,430
you have a parameter that says redirect

00:05:36,449 --> 00:05:42,389
can be dangerous in all sorts of ways

00:05:38,430 --> 00:05:44,219
not just this thankfully the the

00:05:42,389 --> 00:05:47,190
solution is really really easy and

00:05:44,219 --> 00:05:50,430
that's to just whitelist the urls that

00:05:47,190 --> 00:05:51,930
can be redirected to yeah frameworks

00:05:50,430 --> 00:05:53,639
with Reuters make this like really

00:05:51,930 --> 00:05:55,620
trivial because you can just pass the

00:05:53,639 --> 00:05:58,349
route name that you want to redirect to

00:05:55,620 --> 00:06:01,080
in the URL instead of an actual URL in

00:05:58,349 --> 00:06:02,520
the query string so things like

00:06:01,080 --> 00:06:04,169
frameworks make this really easy if

00:06:02,520 --> 00:06:06,690
you're not even using a framework just

00:06:04,169 --> 00:06:10,080
have in an array of key value pairs a

00:06:06,690 --> 00:06:12,120
name to URL works as well you can then

00:06:10,080 --> 00:06:13,680
pass the key and then look up the URL

00:06:12,120 --> 00:06:16,080
once the read you know once you need to

00:06:13,680 --> 00:06:19,020
perform the redirect so it's really

00:06:16,080 --> 00:06:21,810
really easy thing to actually mitigate

00:06:19,020 --> 00:06:24,020
but it is amazing it's surprising how

00:06:21,810 --> 00:06:26,460
how much you will see this in the wild

00:06:24,020 --> 00:06:30,259
so we're going to try and do this after

00:06:26,460 --> 00:06:35,039
every section there any questions on and

00:06:30,259 --> 00:06:37,740
validated redirects and forwards please

00:06:35,039 --> 00:06:39,930
and I can repeat if you want to do you

00:06:37,740 --> 00:06:42,599
think appending the website domain name

00:06:39,930 --> 00:06:44,699
to the beginning of the URL you get in

00:06:42,599 --> 00:06:47,639
the parameter is a good way to deal with

00:06:44,699 --> 00:06:49,619
that the question is do do you think

00:06:47,639 --> 00:06:52,430
that a pen so not pass in the domain

00:06:49,619 --> 00:06:54,779
name but append in that in the cord um

00:06:52,430 --> 00:06:56,580
yeah I guess it would work for me I

00:06:54,779 --> 00:06:58,680
would always just say make a whitelist

00:06:56,580 --> 00:07:00,360
I mean I think that making a whitelist

00:06:58,680 --> 00:07:01,740
you're opening yourself up to things

00:07:00,360 --> 00:07:03,539
that you're not thinking about at the

00:07:01,740 --> 00:07:05,639
time that you do in it whereas with a

00:07:03,539 --> 00:07:07,169
whitelist it's easy you have these the

00:07:05,639 --> 00:07:08,789
only URLs you can redirect to and

00:07:07,169 --> 00:07:11,849
anything else you just can't call that

00:07:08,789 --> 00:07:13,800
it may be painful to do that to create a

00:07:11,849 --> 00:07:16,199
whitelist of every you know URL in your

00:07:13,800 --> 00:07:18,389
website but I think that's the like only

00:07:16,199 --> 00:07:21,059
way that you can really guarantee the

00:07:18,389 --> 00:07:22,110
safety as I say for if you're using a

00:07:21,059 --> 00:07:24,180
framework it makes it really easy

00:07:22,110 --> 00:07:29,180
because you already have roots defined

00:07:24,180 --> 00:07:29,180
for these URLs so any more questions

00:07:30,409 --> 00:07:37,229
just yeah if you're on a website and

00:07:34,020 --> 00:07:39,330
there's a timeout and you have to ask

00:07:37,229 --> 00:07:41,129
the user to log in again you want to

00:07:39,330 --> 00:07:43,680
take them back to where they were on the

00:07:41,129 --> 00:07:46,409
website so you think you should

00:07:43,680 --> 00:07:49,439
whitelist every page on your website yes

00:07:46,409 --> 00:07:50,639
yeah it's painful I know but yes I am

00:07:49,439 --> 00:07:52,740
saying you should wipe the list every

00:07:50,639 --> 00:07:54,240
page in your website I mean if you use

00:07:52,740 --> 00:07:56,159
in any kind of framework to repeat the

00:07:54,240 --> 00:07:58,409
point you're already you already have a

00:07:56,159 --> 00:08:00,389
list of and if you use in a Rooter you

00:07:58,409 --> 00:08:02,580
already have a list of roots that kind

00:08:00,389 --> 00:08:04,620
of reflect the entry points into your

00:08:02,580 --> 00:08:06,180
website anyway so you have that list

00:08:04,620 --> 00:08:14,360
defined that you can use as your

00:08:06,180 --> 00:08:18,870
whitelist anyway anymore also quite the

00:08:14,360 --> 00:08:21,899
understand why is this dangerous if you

00:08:18,870 --> 00:08:24,930
can trick someone to click a URL they

00:08:21,899 --> 00:08:29,729
can just give you their malicious the

00:08:24,930 --> 00:08:31,919
first place no it's because you can read

00:08:29,729 --> 00:08:33,479
up so it's this this is this is the

00:08:31,919 --> 00:08:36,389
point whether it's dangerous right

00:08:33,479 --> 00:08:38,819
so I'm actually saying this as HDP it

00:08:36,389 --> 00:08:39,930
should be HTTP obviously but this is the

00:08:38,819 --> 00:08:42,569
point where it's dangerous because you

00:08:39,930 --> 00:08:44,639
have your login form and it looks like

00:08:42,569 --> 00:08:46,470
the right organ form the URL is correct

00:08:44,639 --> 00:08:48,850
it sits on the run on the code at UK

00:08:46,470 --> 00:08:51,040
domain even if this was HTTPS

00:08:48,850 --> 00:08:52,420
it would it would validate you have the

00:08:51,040 --> 00:08:54,430
padlock you'd have the certificate

00:08:52,420 --> 00:08:56,649
saying this is the correct website but

00:08:54,430 --> 00:08:59,800
but you see there after an equal sign

00:08:56,649 --> 00:09:02,649
you see it's not the checker come if you

00:08:59,800 --> 00:09:03,940
could just go to http a trade oh no do

00:09:02,649 --> 00:09:06,819
you think I could come do it directly

00:09:03,940 --> 00:09:08,079
but if so if we pull this up in Safari

00:09:06,819 --> 00:09:11,410
you wouldn't see the query string

00:09:08,079 --> 00:09:14,079
parameters you usually don't see the

00:09:11,410 --> 00:09:16,750
privileges in some browsers now modern

00:09:14,079 --> 00:09:18,279
browsers mobile browsers Safari I think

00:09:16,750 --> 00:09:19,420
even chrome is coming to the point where

00:09:18,279 --> 00:09:20,949
they literally would just show the

00:09:19,420 --> 00:09:24,370
domain name that you're on in that in

00:09:20,949 --> 00:09:27,370
the URL bar that's why it's dangerous

00:09:24,370 --> 00:09:29,290
because you don't see it's dangerous

00:09:27,370 --> 00:09:32,139
because you can move people

00:09:29,290 --> 00:09:34,630
so attackers can move people from

00:09:32,139 --> 00:09:36,550
outside of your your domain name to

00:09:34,630 --> 00:09:41,589
their own domain name with massive ease

00:09:36,550 --> 00:09:43,329
that's why it's dangerous yeah we don't

00:09:41,589 --> 00:09:44,440
got time sorry Frank but catch me at the

00:09:43,329 --> 00:09:49,569
end because otherwise you'll run out of

00:09:44,440 --> 00:09:51,149
time so the next vulnerability is number

00:09:49,569 --> 00:09:54,040
nine using components with known

00:09:51,149 --> 00:09:55,240
vulnerabilities so I'm hoping most of

00:09:54,040 --> 00:09:58,630
the people in the room will recognize

00:09:55,240 --> 00:10:02,439
this website now is anyone here not

00:09:58,630 --> 00:10:04,509
heard of composer is anyone I guess

00:10:02,439 --> 00:10:07,600
anyone who isn't hasn't got the guts to

00:10:04,509 --> 00:10:09,189
put their hand up but yeah it is 2015 we

00:10:07,600 --> 00:10:11,410
do have composer now that helps us to

00:10:09,189 --> 00:10:13,300
pull in dependencies and you know

00:10:11,410 --> 00:10:16,180
there's a loads of amazing packages out

00:10:13,300 --> 00:10:18,670
there fly system in the front row you're

00:10:16,180 --> 00:10:20,199
amongst others so we don't want to be

00:10:18,670 --> 00:10:22,750
reinventing the wheel what we want to be

00:10:20,199 --> 00:10:24,610
doing is bringing in well-written

00:10:22,750 --> 00:10:27,029
packages from external sources

00:10:24,610 --> 00:10:29,860
so yeah composer has been amazing right

00:10:27,029 --> 00:10:32,470
you should all everybody in this room

00:10:29,860 --> 00:10:34,930
when you see Geordi should thank him

00:10:32,470 --> 00:10:36,519
profusely for putting the effort and the

00:10:34,930 --> 00:10:42,310
time in to help us get this problem

00:10:36,519 --> 00:10:46,630
solved it's it's epic sorry wrong slide

00:10:42,310 --> 00:10:48,519
it's epic it still has a small downside

00:10:46,630 --> 00:10:51,310
which actually when you think about it

00:10:48,519 --> 00:10:53,709
is more than a small downside it can be

00:10:51,310 --> 00:10:55,899
really really bad sometimes because what

00:10:53,709 --> 00:10:57,579
it's done is it's introduced a culture

00:10:55,899 --> 00:10:59,319
of grabbing code from everywhere without

00:10:57,579 --> 00:11:02,290
really thinking about what you do in

00:10:59,319 --> 00:11:04,149
because it's trivialized the job of

00:11:02,290 --> 00:11:08,320
bringing code from external sources and

00:11:04,149 --> 00:11:09,759
things like PS r2 has meant that we can

00:11:08,320 --> 00:11:12,040
autoload things from all over the place

00:11:09,759 --> 00:11:13,959
which means we can have we have in a

00:11:12,040 --> 00:11:18,819
golden period of bringing in code from

00:11:13,959 --> 00:11:22,329
everywhere it's kind of scary is that

00:11:18,819 --> 00:11:24,699
you need to make sure that you are up to

00:11:22,329 --> 00:11:26,709
date on every dependency that you have

00:11:24,699 --> 00:11:28,329
and up to date on any security

00:11:26,709 --> 00:11:30,130
vulnerabilities and any dependencies

00:11:28,329 --> 00:11:34,149
that you have and that's where the scary

00:11:30,130 --> 00:11:36,910
point is this is an example Josh Josh is

00:11:34,149 --> 00:11:39,399
caught guys slim framework this was a

00:11:36,910 --> 00:11:41,740
major vulnerability in the Rooter of

00:11:39,399 --> 00:11:43,029
slim where it was it could evolve some

00:11:41,740 --> 00:11:46,000
things that were coming in via the route

00:11:43,029 --> 00:11:47,380
so really really serious and I want to

00:11:46,000 --> 00:11:49,690
make a point that this was handled

00:11:47,380 --> 00:11:52,060
beautifully and perfectly at the time it

00:11:49,690 --> 00:11:53,500
was fixed really quickly it was you know

00:11:52,060 --> 00:11:55,000
not made public until it was fixed

00:11:53,500 --> 00:11:57,699
everyone was encouraged to upgrade this

00:11:55,000 --> 00:11:59,259
happened on May the 13th I have the

00:11:57,699 --> 00:12:00,940
actual date that I applied this patch to

00:11:59,259 --> 00:12:03,120
my live production system which was

00:12:00,940 --> 00:12:06,430
August the 20th 2013

00:12:03,120 --> 00:12:09,519
so May June July I went three months

00:12:06,430 --> 00:12:11,079
with this on multiple busy production

00:12:09,519 --> 00:12:12,750
servers with this vulnerability because

00:12:11,079 --> 00:12:17,050
I wasn't keeping up to date with the

00:12:12,750 --> 00:12:18,880
dependencies of my project but then you

00:12:17,050 --> 00:12:20,860
have to think that what composer also

00:12:18,880 --> 00:12:23,529
does it allows you to seamlessly install

00:12:20,860 --> 00:12:25,180
dependencies it seamlessly install

00:12:23,529 --> 00:12:26,800
libraries but it also allows those

00:12:25,180 --> 00:12:29,199
libraries to seamlessly install their

00:12:26,800 --> 00:12:30,130
dependencies and those libraries to

00:12:29,199 --> 00:12:32,290
seamless you know it's an

00:12:30,130 --> 00:12:34,630
ever-increasing list of things you could

00:12:32,290 --> 00:12:36,730
be pulling in so you need to think about

00:12:34,630 --> 00:12:39,040
not just oh I have these four libraries

00:12:36,730 --> 00:12:40,630
that I depend on you need to understand

00:12:39,040 --> 00:12:42,880
that they may depend on libraries that

00:12:40,630 --> 00:12:44,920
will get pulled into and you need to

00:12:42,880 --> 00:12:47,589
keep up to date on this stuff I should

00:12:44,920 --> 00:12:49,839
have added a slide that introduces row

00:12:47,589 --> 00:12:51,790
of security the security advisor which

00:12:49,839 --> 00:12:53,170
is a composer package that actually

00:12:51,790 --> 00:12:55,079
blocks you from installed in any

00:12:53,170 --> 00:12:58,389
packages that have known vulnerabilities

00:12:55,079 --> 00:13:00,279
I'll tweet about it after this so if you

00:12:58,389 --> 00:13:02,470
want to link to that it's literally one

00:13:00,279 --> 00:13:04,360
line in your composer and it allows you

00:13:02,470 --> 00:13:06,240
to to be you know fairly comfortable and

00:13:04,360 --> 00:13:12,490
confident with what you're pulling down

00:13:06,240 --> 00:13:14,710
so any questions on known security

00:13:12,490 --> 00:13:21,550
vulnerabilities or unknown skills yeah

00:13:14,710 --> 00:13:22,779
please oh it's on fire you mentioned

00:13:21,550 --> 00:13:24,730
about keeping your dependencies up to

00:13:22,779 --> 00:13:25,899
date unit dependencies dependencies what

00:13:24,730 --> 00:13:27,580
would be your recommendation for

00:13:25,899 --> 00:13:29,080
versioning your dependencies in your

00:13:27,580 --> 00:13:30,850
composer file would you use a major

00:13:29,080 --> 00:13:32,680
version like a one star or would you

00:13:30,850 --> 00:13:33,550
didn't use a tilde or how would you

00:13:32,680 --> 00:13:35,560
tackle that problem

00:13:33,550 --> 00:13:37,330
I tend to use a tilde I tend to lock

00:13:35,560 --> 00:13:40,390
myself onto the newest version of a

00:13:37,330 --> 00:13:42,520
major version of any package so Zen

00:13:40,390 --> 00:13:45,820
framework tilde to any the newest

00:13:42,520 --> 00:13:48,720
version of any subtree of two am using

00:13:45,820 --> 00:13:52,180
Samba I guess that's each to their own

00:13:48,720 --> 00:13:54,640
to be honest I tend to work in projects

00:13:52,180 --> 00:13:56,170
where I can pull down breaking changes

00:13:54,640 --> 00:13:57,790
from projects and fix them fairly easily

00:13:56,170 --> 00:13:59,529
because I'm in event an environment

00:13:57,790 --> 00:14:01,360
where I can do that not everyone can

00:13:59,529 --> 00:14:04,300
so yeah you need to find something that

00:14:01,360 --> 00:14:07,630
works for you sadly I can't give you a a

00:14:04,300 --> 00:14:09,940
golden bullet there but anything else we

00:14:07,630 --> 00:14:11,770
do Oh quick yeah by checking when you're

00:14:09,940 --> 00:14:13,510
installing I guess you should also set

00:14:11,770 --> 00:14:20,200
up a cron job where you check every day

00:14:13,510 --> 00:14:21,550
if a new vulnerability is yeah yes yes I

00:14:20,200 --> 00:14:22,779
don't know if a cron job is the answer

00:14:21,550 --> 00:14:26,730
I'd need to sit down and think about

00:14:22,779 --> 00:14:29,230
that but you should have you should have

00:14:26,730 --> 00:14:31,750
any kind of mechanism you can to

00:14:29,230 --> 00:14:33,880
subscribe to things like securing a

00:14:31,750 --> 00:14:37,060
secure PHP Twitter feed a newsletter

00:14:33,880 --> 00:14:38,650
will publicize when these things have to

00:14:37,060 --> 00:14:43,240
when these terrible security flaws are

00:14:38,650 --> 00:14:45,190
found yes you you need to have a process

00:14:43,240 --> 00:14:47,800
in place whereby you get access to this

00:14:45,190 --> 00:14:51,610
information as quickly as you can write

00:14:47,800 --> 00:14:53,440
one quick one because we are a system

00:14:51,610 --> 00:14:55,180
about Drupal there's a the update module

00:14:53,440 --> 00:14:57,190
that tells you when your modules come

00:14:55,180 --> 00:14:59,020
out of date and the security updates is

00:14:57,190 --> 00:15:00,640
there anything for composer that will

00:14:59,020 --> 00:15:03,640
tell you what you've got installed what

00:15:00,640 --> 00:15:04,900
the latest one is and there's yeah sorry

00:15:03,640 --> 00:15:06,220
I get your question I'm just trying to

00:15:04,900 --> 00:15:08,440
get some pace because we're behind but

00:15:06,220 --> 00:15:11,050
yes there are resources out there since

00:15:08,440 --> 00:15:12,790
your labs have something which is what

00:15:11,050 --> 00:15:17,020
roles security advisories package is

00:15:12,790 --> 00:15:18,420
based on I don't know of anything I

00:15:17,020 --> 00:15:21,010
don't know of anything that is like

00:15:18,420 --> 00:15:23,800
comprehensive and really up to date and

00:15:21,010 --> 00:15:25,240
and fast-paced so somebody should

00:15:23,800 --> 00:15:27,640
probably start that project who's in

00:15:25,240 --> 00:15:28,760
this room but we do need something like

00:15:27,640 --> 00:15:30,630
that yes it's

00:15:28,760 --> 00:15:32,370
unfortunately some of these have really

00:15:30,630 --> 00:15:34,260
simple answers and some of them don't

00:15:32,370 --> 00:15:36,330
and this is one where you need to like

00:15:34,260 --> 00:15:37,560
make up make up change the process and

00:15:36,330 --> 00:15:39,720
the way you think when you work

00:15:37,560 --> 00:15:40,950
I don't blindly pull any dependencies

00:15:39,720 --> 00:15:43,980
into my projects anymore without

00:15:40,950 --> 00:15:45,750
researching them at least cursory or

00:15:43,980 --> 00:15:48,030
depend on packages which have good

00:15:45,750 --> 00:15:49,980
reputations like the League of

00:15:48,030 --> 00:15:51,480
Extraordinary packages or you know

00:15:49,980 --> 00:15:53,160
something along those lines because at

00:15:51,480 --> 00:15:56,400
least you know that there's some key way

00:15:53,160 --> 00:16:00,680
in place in those packages so number

00:15:56,400 --> 00:16:03,300
eight is cross-site request forgery CSRF

00:16:00,680 --> 00:16:05,040
and yeah we we can you know we can do

00:16:03,300 --> 00:16:06,900
some horrible things on our web sites

00:16:05,040 --> 00:16:09,060
because the security wise because

00:16:06,900 --> 00:16:11,460
cookies because cookies get sent to

00:16:09,060 --> 00:16:13,710
every request you make to the domain

00:16:11,460 --> 00:16:16,320
that the cookie that the cookie has been

00:16:13,710 --> 00:16:20,370
sat on regardless of where that request

00:16:16,320 --> 00:16:21,870
is being originating from so I hope

00:16:20,370 --> 00:16:23,400
everybody you know if you don't have a

00:16:21,870 --> 00:16:25,440
rudimentary knowledge of cookies you

00:16:23,400 --> 00:16:27,420
probably should try and at least get

00:16:25,440 --> 00:16:30,450
some basic knowledge on how cookies

00:16:27,420 --> 00:16:31,890
working HTTP because you know you you

00:16:30,450 --> 00:16:34,770
really do need to know that knowledge to

00:16:31,890 --> 00:16:37,800
understand these vulnerabilities so

00:16:34,770 --> 00:16:39,270
here's a great example of CSRF we logged

00:16:37,800 --> 00:16:40,650
in the only thing you need to know here

00:16:39,270 --> 00:16:42,930
is that were actually logged into our

00:16:40,650 --> 00:16:44,220
web site and because we use in sessions

00:16:42,930 --> 00:16:46,530
to mean that we don't have to log into

00:16:44,220 --> 00:16:48,780
every single page we have a cookie set

00:16:46,530 --> 00:16:53,430
which has our session ID pretty typical

00:16:48,780 --> 00:16:55,920
PHP stuff so let's say you really really

00:16:53,430 --> 00:16:57,900
like sort of David Hasselhoff like cat

00:16:55,920 --> 00:17:00,270
does yeah so let's say you're like a

00:16:57,900 --> 00:17:03,990
massive fan of the Hoff and he massive

00:17:00,270 --> 00:17:07,709
fans are often cat yeah you're on yeah

00:17:03,990 --> 00:17:08,400
come on you could admit that here we're

00:17:07,709 --> 00:17:09,780
all friends

00:17:08,400 --> 00:17:11,910
oh yeah there's another one excellent

00:17:09,780 --> 00:17:13,439
unless say that like you really like the

00:17:11,910 --> 00:17:15,720
Hoff so much that you wanted like

00:17:13,439 --> 00:17:18,720
download his hit single jump in my car

00:17:15,720 --> 00:17:20,400
and a friend of mine has told me you can

00:17:18,720 --> 00:17:22,290
use these like torrent things apparently

00:17:20,400 --> 00:17:25,439
to like find things on the internet that

00:17:22,290 --> 00:17:27,990
are a bit shady I don't know myself but

00:17:25,439 --> 00:17:29,550
apparently you can do this so you you

00:17:27,990 --> 00:17:31,740
hit Google then you go jump in my car

00:17:29,550 --> 00:17:34,020
torrent and then you see all these lists

00:17:31,740 --> 00:17:35,820
of things and then my friend says that

00:17:34,020 --> 00:17:38,340
these are the kind of pages you go to if

00:17:35,820 --> 00:17:39,990
you click on these links in Google and

00:17:38,340 --> 00:17:41,490
you're like oh what do I click download

00:17:39,990 --> 00:17:42,120
here whoa I've got virus is on my

00:17:41,490 --> 00:17:45,420
computer what

00:17:42,120 --> 00:17:47,340
going on pop-ups pop-ups oh but the most

00:17:45,420 --> 00:17:50,040
impertinent piece of information here is

00:17:47,340 --> 00:17:52,170
this broken image this broken image

00:17:50,040 --> 00:17:54,510
which you wouldn't look twice at is what

00:17:52,170 --> 00:17:57,480
is actually performing this EOS CSRF

00:17:54,510 --> 00:18:00,450
attack on your website so if we look at

00:17:57,480 --> 00:18:00,900
the URL oh yes money money money money

00:18:00,450 --> 00:18:03,090
money

00:18:00,900 --> 00:18:05,070
if you look at the URL that that is

00:18:03,090 --> 00:18:07,170
linking to I mean this would be an

00:18:05,070 --> 00:18:08,520
absolute horrible joke of a security

00:18:07,170 --> 00:18:10,860
vulnerability but I've simplified it

00:18:08,520 --> 00:18:13,110
greatly obviously just so that we can

00:18:10,860 --> 00:18:15,030
get through this so we've got the

00:18:13,110 --> 00:18:18,120
payroll subdomain and we've got a

00:18:15,030 --> 00:18:21,150
transfer route and we have from Maurice

00:18:18,120 --> 00:18:24,450
Moss with a to sort code to account and

00:18:21,150 --> 00:18:26,910
a thousand dollars and this request is

00:18:24,450 --> 00:18:29,580
what was being embedded in that page as

00:18:26,910 --> 00:18:30,960
an image so as you know as you guys all

00:18:29,580 --> 00:18:33,000
know that would just be handled as any

00:18:30,960 --> 00:18:34,290
other HTTP request from your browser it

00:18:33,000 --> 00:18:37,170
would just be a hitch typically request

00:18:34,290 --> 00:18:39,690
to this URL and if you have no

00:18:37,170 --> 00:18:42,059
protection in place this will just serve

00:18:39,690 --> 00:18:43,890
the results page saying oh yes you're

00:18:42,059 --> 00:18:45,360
logged in and you want to transfer some

00:18:43,890 --> 00:18:48,059
money using the payroll system and

00:18:45,360 --> 00:18:50,190
you've given me valid parameters to do

00:18:48,059 --> 00:18:52,380
that so I'm just going to give you the

00:18:50,190 --> 00:18:53,970
transfer successful page which would

00:18:52,380 --> 00:18:55,320
return as a broken image because it's

00:18:53,970 --> 00:18:59,610
the wrong line type your browser can't

00:18:55,320 --> 00:19:01,800
show a HTML page as an image so there's

00:18:59,610 --> 00:19:03,660
you know this is a very very simple

00:19:01,800 --> 00:19:05,190
example just to try and get the point

00:19:03,660 --> 00:19:06,660
across but there are multiple places

00:19:05,190 --> 00:19:08,340
where you you know real world

00:19:06,660 --> 00:19:11,160
applications could be vulnerable to this

00:19:08,340 --> 00:19:13,940
kind of attack and there's some fairly

00:19:11,160 --> 00:19:16,740
easy and simple ways to mitigate this

00:19:13,940 --> 00:19:18,770
yeah this is a rubbish solution use post

00:19:16,740 --> 00:19:21,210
because anyone can construct post

00:19:18,770 --> 00:19:23,850
requests in the same way as they can you

00:19:21,210 --> 00:19:26,280
know sophisticated or even simpleton

00:19:23,850 --> 00:19:28,140
attacker could use some JavaScript to

00:19:26,280 --> 00:19:31,170
post a form on them you know on the on

00:19:28,140 --> 00:19:34,200
the page so using post will at least

00:19:31,170 --> 00:19:36,179
skim off a layer of script kiddies who

00:19:34,200 --> 00:19:38,880
then get bored with trying to work out

00:19:36,179 --> 00:19:40,890
how to solve that ya require and user

00:19:38,880 --> 00:19:43,460
interaction if you do in something

00:19:40,890 --> 00:19:46,080
that's transferring money about actually

00:19:43,460 --> 00:19:48,720
expect in a user to at least click a box

00:19:46,080 --> 00:19:50,790
or to enter their password again or to

00:19:48,720 --> 00:19:53,790
just do something to confirm that this

00:19:50,790 --> 00:19:55,890
is a real request and a real action

00:19:53,790 --> 00:19:59,070
obviously helps

00:19:55,890 --> 00:20:02,520
we can use things like CSRF tokens which

00:19:59,070 --> 00:20:05,220
are their hashes that are put into

00:20:02,520 --> 00:20:07,110
hidden elements in a form and then

00:20:05,220 --> 00:20:08,580
they're checked for the other end so

00:20:07,110 --> 00:20:10,200
there's a hidden element in the form

00:20:08,580 --> 00:20:12,179
with just a hash just a random hash

00:20:10,200 --> 00:20:14,040
which we've stored in the session when

00:20:12,179 --> 00:20:16,080
we generated the form and then we come

00:20:14,040 --> 00:20:17,880
when we come to process the form we can

00:20:16,080 --> 00:20:19,950
compare the session value to the posted

00:20:17,880 --> 00:20:21,540
values and say oh yes this has come from

00:20:19,950 --> 00:20:25,880
a form that was generated on our site

00:20:21,540 --> 00:20:25,880
because we know this token is exists

00:20:27,410 --> 00:20:30,210
yeah

00:20:28,590 --> 00:20:32,340
don't use sticky logins for anything

00:20:30,210 --> 00:20:34,950
that's like critical you notice things

00:20:32,340 --> 00:20:37,260
like banks have really really hashed

00:20:34,950 --> 00:20:39,750
timeout values on their logins you know

00:20:37,260 --> 00:20:41,040
you you log in and you take a phone call

00:20:39,750 --> 00:20:42,330
and when you put the phone down you're

00:20:41,040 --> 00:20:44,549
already been logged out of your bank

00:20:42,330 --> 00:20:45,990
because they wanted mitigate this as

00:20:44,549 --> 00:20:48,240
much as possible with really really

00:20:45,990 --> 00:20:50,610
short timeouts on the on the sessions on

00:20:48,240 --> 00:20:53,280
the login basically if the users not

00:20:50,610 --> 00:20:55,760
logged into your site then you're not

00:20:53,280 --> 00:20:58,049
open to this vulnerability at all

00:20:55,760 --> 00:21:01,110
as an aside does anyone want to guess

00:20:58,049 --> 00:21:02,669
what this URL does can you see this at

00:21:01,110 --> 00:21:05,610
the back and all this inside monitors I

00:21:02,669 --> 00:21:09,929
can't see you any guesses just shout out

00:21:05,610 --> 00:21:11,490
don't need the microphone one-click

00:21:09,929 --> 00:21:14,450
checkout it's a good guess it's good but

00:21:11,490 --> 00:21:18,360
it's not right what was the other choke

00:21:14,450 --> 00:21:20,370
add to add to basket absolutely so this

00:21:18,360 --> 00:21:25,260
URL will we'll put an item in your

00:21:20,370 --> 00:21:28,380
Amazon shopping cart and there are

00:21:25,260 --> 00:21:29,580
certain authors none that I know at this

00:21:28,380 --> 00:21:31,020
conference but there are certain

00:21:29,580 --> 00:21:34,110
technical authors when you go to their

00:21:31,020 --> 00:21:35,640
website to look at their book oh that

00:21:34,110 --> 00:21:36,840
looks like an interesting book and then

00:21:35,640 --> 00:21:38,520
the next time you go to Amazon you're

00:21:36,840 --> 00:21:40,110
like how the hell did that book that I

00:21:38,520 --> 00:21:42,600
looked at on their website get into my

00:21:40,110 --> 00:21:44,700
shopping cart and it's because they're

00:21:42,600 --> 00:21:47,400
using something like this to actually

00:21:44,700 --> 00:21:50,160
put the item in your shopping cart when

00:21:47,400 --> 00:21:51,960
you visit their website now Amazon are

00:21:50,160 --> 00:21:58,460
aware of this and they call it a feature

00:21:51,960 --> 00:22:01,140
not a bug so you know it's all good yeah

00:21:58,460 --> 00:22:03,480
I've actually checked out before with

00:22:01,140 --> 00:22:05,940
and received an unwanted item because I

00:22:03,480 --> 00:22:08,280
just one click checked out as clean and

00:22:05,940 --> 00:22:09,180
sad and oh why if I got this book that I

00:22:08,280 --> 00:22:11,370
didn't order so

00:22:09,180 --> 00:22:12,810
yeah be careful if it's good enough

00:22:11,370 --> 00:22:16,260
ramus no it's good enough for you guys

00:22:12,810 --> 00:22:18,740
as well so you know maybe and maybe some

00:22:16,260 --> 00:22:23,000
of these can be wanted vulnerabilities

00:22:18,740 --> 00:22:23,000
so there any questions on CSRF

00:22:23,330 --> 00:22:29,670
SuperDuper because we are run out of

00:22:27,180 --> 00:22:34,580
time so seven and four I've lumped

00:22:29,670 --> 00:22:34,580
together um excuse me

00:22:35,630 --> 00:22:42,390
dry mouth somebody kept me up till 2:00

00:22:37,920 --> 00:22:43,590
a.m. here and so seven and four I've

00:22:42,390 --> 00:22:45,330
lumped together because for me they're

00:22:43,590 --> 00:22:46,980
two sides of the same coin and because

00:22:45,330 --> 00:22:50,280
I'm running out of time it's easier for

00:22:46,980 --> 00:22:51,930
me to cover two things in one so sorry

00:22:50,280 --> 00:22:53,970
missing function level access control

00:22:51,930 --> 00:22:56,130
and unsecure direct object references

00:22:53,970 --> 00:22:57,750
and these are pretty easy for me to

00:22:56,130 --> 00:23:00,930
demonstrate so we'll get through this

00:22:57,750 --> 00:23:02,820
fairly quickly yeah I've just gone to

00:23:00,930 --> 00:23:05,250
delete news dot PHP and I've given a

00:23:02,820 --> 00:23:06,870
news ID of 147 and the system hasn't

00:23:05,250 --> 00:23:08,580
checked whether I'm allowed to delete

00:23:06,870 --> 00:23:10,350
that news like them or who I am or where

00:23:08,580 --> 00:23:11,970
I come from or anything at all it's just

00:23:10,350 --> 00:23:17,070
gone yeah okay you can delete that news

00:23:11,970 --> 00:23:19,080
item you know pretty bad things but they

00:23:17,070 --> 00:23:22,490
must be fairly prevalent for a while I

00:23:19,080 --> 00:23:22,490
mean let's remember that all was put

00:23:22,850 --> 00:23:26,250
sorry

00:23:24,120 --> 00:23:27,810
Oh was put in secure direct object

00:23:26,250 --> 00:23:30,270
references at number four in their list

00:23:27,810 --> 00:23:33,150
so this doesn't must be out there in the

00:23:30,270 --> 00:23:35,340
wild yeah oops

00:23:33,150 --> 00:23:37,230
when somebody's deleted all of your news

00:23:35,340 --> 00:23:38,670
posts and you know everything's and

00:23:37,230 --> 00:23:41,520
there's no content on your website and

00:23:38,670 --> 00:23:44,100
you're like what the hell's happened use

00:23:41,520 --> 00:23:46,620
a consistent and unavoidable access

00:23:44,100 --> 00:23:48,990
control layer yeah it's fairly

00:23:46,620 --> 00:23:51,060
self-explanatory here make sure that

00:23:48,990 --> 00:23:52,650
your check in every single request that

00:23:51,060 --> 00:23:58,020
the person who's doing something should

00:23:52,650 --> 00:24:00,650
be allowed to do those things so that

00:23:58,020 --> 00:24:02,820
was like direct function access this is

00:24:00,650 --> 00:24:05,190
I've even forgotten the name of it again

00:24:02,820 --> 00:24:06,660
myself because it's in missing function

00:24:05,190 --> 00:24:09,020
level access control was that one this

00:24:06,660 --> 00:24:13,500
is Institute direct object reference

00:24:09,020 --> 00:24:15,150
excuse me so this is me being able to

00:24:13,500 --> 00:24:17,070
access emails that I shouldn't be able

00:24:15,150 --> 00:24:18,840
to access so this isn't a function where

00:24:17,070 --> 00:24:20,160
I'm actually doing something this is

00:24:18,840 --> 00:24:22,140
just getting access to something I

00:24:20,160 --> 00:24:23,100
shouldn't really be allowed to see so

00:24:22,140 --> 00:24:25,260
I've just put

00:24:23,100 --> 00:24:27,539
and a message ID into the into the ID

00:24:25,260 --> 00:24:28,980
parameter of the query string and found

00:24:27,539 --> 00:24:30,919
some email that I shouldn't be able to

00:24:28,980 --> 00:24:33,630
read again

00:24:30,919 --> 00:24:35,039
oops pretty self-explanatory user

00:24:33,630 --> 00:24:38,700
consistent and unavoidable access

00:24:35,039 --> 00:24:40,710
control layer secure all the things

00:24:38,700 --> 00:24:42,419
frameworks should make this fairly easy

00:24:40,710 --> 00:24:44,429
if you develop in on frameworks then

00:24:42,419 --> 00:24:45,990
there's multiple points that you can

00:24:44,429 --> 00:24:47,250
hook into the dispatch process to

00:24:45,990 --> 00:24:48,450
actually be able to do this fairly

00:24:47,250 --> 00:24:50,490
straightforward

00:24:48,450 --> 00:24:53,309
yeah I'm standing right from the slide

00:24:50,490 --> 00:24:55,409
sorry it makes it fairly easy because

00:24:53,309 --> 00:25:00,049
you can do something on every request to

00:24:55,409 --> 00:25:05,340
check these things any questions on

00:25:00,049 --> 00:25:07,830
crazy badly designed I see a lot of

00:25:05,340 --> 00:25:10,799
frameworks but Isis control basically on

00:25:07,830 --> 00:25:13,010
the routine layer as default and if you

00:25:10,799 --> 00:25:15,840
think about api's and import and export

00:25:13,010 --> 00:25:18,809
you actually always want to also put

00:25:15,840 --> 00:25:21,679
access control at a lower level yes but

00:25:18,809 --> 00:25:24,179
again you always have to do both of them

00:25:21,679 --> 00:25:25,919
so the question was the parity solution

00:25:24,179 --> 00:25:28,650
the question was about where to where

00:25:25,919 --> 00:25:30,150
should we put our access control as far

00:25:28,650 --> 00:25:32,520
as I'm concerned I don't really care as

00:25:30,150 --> 00:25:33,150
long as you're doing it which is the

00:25:32,520 --> 00:25:35,039
short answer

00:25:33,150 --> 00:25:39,450
to be honest it's kind of out the scope

00:25:35,039 --> 00:25:41,309
of this talk really but yes we tend to

00:25:39,450 --> 00:25:43,110
do it both at the root level and at the

00:25:41,309 --> 00:25:45,240
controller level when I work as I were

00:25:43,110 --> 00:25:47,190
pretty much all of my time on xym

00:25:45,240 --> 00:25:49,470
framework two I tend to do it in two

00:25:47,190 --> 00:25:52,890
places I don't think there's a problem

00:25:49,470 --> 00:25:55,140
with check-in security things too much

00:25:52,890 --> 00:25:57,000
in an application yeah we're doing it

00:25:55,140 --> 00:25:57,570
twice you know brilliant you've got two

00:25:57,000 --> 00:26:01,020
layers of

00:25:57,570 --> 00:26:02,909
oops is that you can avoid so both I

00:26:01,020 --> 00:26:05,100
would suggest but it's again it's to do

00:26:02,909 --> 00:26:07,080
with your own business needs you know if

00:26:05,100 --> 00:26:08,700
you can take the performance hit of

00:26:07,080 --> 00:26:11,220
check-in things twice some people can

00:26:08,700 --> 00:26:14,669
some people can't yep horses for courses

00:26:11,220 --> 00:26:18,840
I would say which is a wriggling way of

00:26:14,669 --> 00:26:20,520
saying I don't know so sensitive data

00:26:18,840 --> 00:26:23,280
exposure how we'd all the time

00:26:20,520 --> 00:26:24,900
cool we're only up to number six and

00:26:23,280 --> 00:26:31,500
obviously they get more severe as we get

00:26:24,900 --> 00:26:33,270
going so so sensitive data exposure the

00:26:31,500 --> 00:26:37,350
question here is what about this

00:26:33,270 --> 00:26:43,840
checkout form makes it secure

00:26:37,350 --> 00:26:46,900
any guesses is it the is it the the

00:26:43,840 --> 00:26:52,450
beautiful gifts of padlocks that makes

00:26:46,900 --> 00:26:54,250
this farm secure yeah no yeah the answer

00:26:52,450 --> 00:26:56,080
obviously shout that was nothing oh and

00:26:54,250 --> 00:26:59,160
I just realized that I called the URL by

00:26:56,080 --> 00:27:01,780
 so I apologize if I if I did anyone

00:26:59,160 --> 00:27:04,960
yeah probably sure to change that but

00:27:01,780 --> 00:27:07,059
it's fine it's ray

00:27:04,960 --> 00:27:10,179
yeah not even a picture of Douglas

00:27:07,059 --> 00:27:12,130
random makes that forum secure obviously

00:27:10,179 --> 00:27:16,750
there's so many things wrong yeah it's

00:27:12,130 --> 00:27:19,510
not loaded in HD yes you know yeah it

00:27:16,750 --> 00:27:21,580
ain't good if you're not loading so

00:27:19,510 --> 00:27:23,919
maybe that form was submitted to HTTPS

00:27:21,580 --> 00:27:25,419
maybe it was loaded over HTTP but when

00:27:23,919 --> 00:27:28,030
we look at you know the actual form

00:27:25,419 --> 00:27:31,059
definition it's submitted into HTTPS so

00:27:28,030 --> 00:27:32,710
that's okay right well no because if

00:27:31,059 --> 00:27:35,110
you're loading your form over HTTP

00:27:32,710 --> 00:27:36,940
you're already too late because the form

00:27:35,110 --> 00:27:38,770
can be compromised JavaScript can be

00:27:36,940 --> 00:27:39,970
added that is actually changing the

00:27:38,770 --> 00:27:42,790
place that this did that has been

00:27:39,970 --> 00:27:45,330
submitted to you know anything that

00:27:42,790 --> 00:27:49,360
happened if your if your actual form is

00:27:45,330 --> 00:27:53,650
not being loaded over HTTPS then all

00:27:49,360 --> 00:27:56,110
better off even if you have your form in

00:27:53,650 --> 00:27:58,360
a I frame that is you know if you're

00:27:56,110 --> 00:28:01,840
from 1994 and you load in your form up

00:27:58,360 --> 00:28:03,970
in an iframe but the parent page is HTTP

00:28:01,840 --> 00:28:05,710
you've lost again because you can

00:28:03,970 --> 00:28:07,870
compromise the parent page you can then

00:28:05,710 --> 00:28:11,530
descend down the Dom into the iframe

00:28:07,870 --> 00:28:13,150
until whatever you want if the page that

00:28:11,530 --> 00:28:14,950
the person is clicking on to check out

00:28:13,150 --> 00:28:17,620
is being lorded over HTTP you've already

00:28:14,950 --> 00:28:20,500
lost so basically the answer is if you

00:28:17,620 --> 00:28:23,020
doin anything like this everything needs

00:28:20,500 --> 00:28:25,980
to be HTTPS the whole subdomain or the

00:28:23,020 --> 00:28:32,049
whole your whole process needs to be

00:28:25,980 --> 00:28:35,169
HTTPS if you need to store if you do

00:28:32,049 --> 00:28:37,290
need to store secure sensitive personal

00:28:35,169 --> 00:28:40,000
information of which he password is

00:28:37,290 --> 00:28:42,160
personal information people tend to use

00:28:40,000 --> 00:28:46,660
the same password on a billion websites

00:28:42,160 --> 00:28:49,150
so you have a duty of care even if the

00:28:46,660 --> 00:28:50,590
passwords your store in our you know for

00:28:49,150 --> 00:28:52,870
fairly trivial pieces

00:28:50,590 --> 00:28:54,400
of data you know they can only get

00:28:52,870 --> 00:28:56,049
something that you think oh it doesn't

00:28:54,400 --> 00:28:58,150
matter I just order in clear text

00:28:56,049 --> 00:28:59,590
because nobody's gonna want to get hold

00:28:58,150 --> 00:29:00,850
of my password list because there's

00:28:59,590 --> 00:29:02,679
nothing they can do with it well they

00:29:00,850 --> 00:29:04,210
can they can probably login to that

00:29:02,679 --> 00:29:06,429
person's email if they've used the same

00:29:04,210 --> 00:29:09,150
password in multiple places so you have

00:29:06,429 --> 00:29:11,380
a duty of care to store a password as

00:29:09,150 --> 00:29:12,730
personal information as the same way you

00:29:11,380 --> 00:29:16,000
would every other piece of personal

00:29:12,730 --> 00:29:20,080
information so use password hash it's

00:29:16,000 --> 00:29:22,630
built into PHP five five any takers five

00:29:20,080 --> 00:29:24,549
five yeah it's built into PHP five five

00:29:22,630 --> 00:29:29,140
so if you use in PHP five five you have

00:29:24,549 --> 00:29:31,000
this method I should say function you

00:29:29,140 --> 00:29:32,919
have this function if you don't there's

00:29:31,000 --> 00:29:36,100
a compatibility library on github just

00:29:32,919 --> 00:29:38,080
look at I think it's under is e Marcel's

00:29:36,100 --> 00:29:39,610
account so you'll easily find it if you

00:29:38,080 --> 00:29:43,299
do password underscore hash compact

00:29:39,610 --> 00:29:45,549
library you'll find it yeah don't store

00:29:43,299 --> 00:29:47,230
sensitive data at all there's some

00:29:45,549 --> 00:29:48,700
really good services now that will

00:29:47,230 --> 00:29:51,520
actually take care of this problem for

00:29:48,700 --> 00:29:53,409
you there's good services which have API

00:29:51,520 --> 00:29:56,470
is for logging users in and for handling

00:29:53,409 --> 00:29:58,480
the storage of you know software service

00:29:56,470 --> 00:30:01,179
for shopping carts and for all of this

00:29:58,480 --> 00:30:03,610
stuff and if you can get away with not

00:30:01,179 --> 00:30:05,770
storing this data at all that's a win

00:30:03,610 --> 00:30:07,390
that's a big win because then you don't

00:30:05,770 --> 00:30:09,520
actually have to worry about this and

00:30:07,390 --> 00:30:12,490
don't forget if you do expose this

00:30:09,520 --> 00:30:16,029
personal data if you get hacked and

00:30:12,490 --> 00:30:17,830
personal data is exposed unless you're a

00:30:16,029 --> 00:30:19,600
huge company that can be something that

00:30:17,830 --> 00:30:22,539
your company will never recover from so

00:30:19,600 --> 00:30:24,010
yeah if you can get away from that and

00:30:22,539 --> 00:30:27,640
blame someone else if there's a problem

00:30:24,010 --> 00:30:30,880
it's all good I tend to think that if

00:30:27,640 --> 00:30:33,309
I'm gonna store sensitive information I

00:30:30,880 --> 00:30:35,940
would personally want to ask someone

00:30:33,309 --> 00:30:38,309
who's much smarter than me to help me

00:30:35,940 --> 00:30:40,270
because I'm not an expert in this stuff

00:30:38,309 --> 00:30:43,240
there are people out there who are

00:30:40,270 --> 00:30:45,120
experts Anthony here is like his blog is

00:30:43,240 --> 00:30:48,429
the de facto read for me when I want to

00:30:45,120 --> 00:30:50,350
keep up to date on this kind of stuff so

00:30:48,429 --> 00:30:51,909
ya hire an expert if you will go into be

00:30:50,350 --> 00:30:55,480
storing credit card details you need to

00:30:51,909 --> 00:30:57,100
be considering this stuff yeah you know

00:30:55,480 --> 00:30:59,140
security you're a developer you're not a

00:30:57,100 --> 00:31:00,970
security expert maybe some of you are

00:30:59,140 --> 00:31:02,740
security experts great you know you're

00:31:00,970 --> 00:31:04,480
okay but most of us are developers and

00:31:02,740 --> 00:31:07,780
do we really want to worry

00:31:04,480 --> 00:31:09,460
about this stuff no so and that's not me

00:31:07,780 --> 00:31:11,320
saying incoming higher roles because we

00:31:09,460 --> 00:31:12,970
don't really need that kind of business

00:31:11,320 --> 00:31:15,910
but you should definitely look to hire

00:31:12,970 --> 00:31:17,230
people to help you out to this yeah

00:31:15,910 --> 00:31:19,690
there's one really big piece of

00:31:17,230 --> 00:31:21,580
information and that I think if you just

00:31:19,690 --> 00:31:24,309
take one thing away from this talk it

00:31:21,580 --> 00:31:25,900
would be it will be this line and try

00:31:24,309 --> 00:31:27,250
not to store like naked pictures of

00:31:25,900 --> 00:31:30,460
yourselves on a cloud server you don't

00:31:27,250 --> 00:31:32,380
control especially if you're a celebrity

00:31:30,460 --> 00:31:38,620
apparently that that's not a good thing

00:31:32,380 --> 00:31:43,900
to do either so are there any questions

00:31:38,620 --> 00:31:46,140
on sensitive data exposure yeah it's

00:31:43,900 --> 00:31:49,140
pretty straightforward one really right

00:31:46,140 --> 00:31:49,140
cool

00:31:52,020 --> 00:31:55,929
security Mis configuration number five

00:31:54,130 --> 00:31:58,690
this kind of these some of these in you

00:31:55,929 --> 00:32:02,919
know interlock quite nicely as I just

00:31:58,690 --> 00:32:05,530
said I'm not a ops guy I'm not even a

00:32:02,919 --> 00:32:07,600
DevOps guy so yeah server miss

00:32:05,530 --> 00:32:10,720
configuration would be something that I

00:32:07,600 --> 00:32:13,390
would definitely look to try and get

00:32:10,720 --> 00:32:14,410
someone to fix that stuff for me we you

00:32:13,390 --> 00:32:16,960
know whether you have Ops guys

00:32:14,410 --> 00:32:19,360
internally or whether you hire someone

00:32:16,960 --> 00:32:20,980
like the amazing sponsor of this

00:32:19,360 --> 00:32:23,169
conference and junior to take care of

00:32:20,980 --> 00:32:24,730
you know platform and service to get

00:32:23,169 --> 00:32:27,580
make sure this stuff is done for you

00:32:24,730 --> 00:32:30,400
again it's good to get some professional

00:32:27,580 --> 00:32:31,660
help here hopefully you know some people

00:32:30,400 --> 00:32:33,370
will be working in a place where you

00:32:31,660 --> 00:32:34,270
have ops departments who can take care

00:32:33,370 --> 00:32:37,750
of this stuff for you

00:32:34,270 --> 00:32:39,610
two thumbs up to those guys there's so

00:32:37,750 --> 00:32:41,890
many things you know that you can get

00:32:39,610 --> 00:32:44,110
wrong like it just exposing information

00:32:41,890 --> 00:32:46,929
you don't want to expose in PHP versions

00:32:44,110 --> 00:32:49,960
and headers or nginx versions keeping

00:32:46,929 --> 00:32:52,270
your software up-to-date having things

00:32:49,960 --> 00:32:54,460
like your my sequel database exposed to

00:32:52,270 --> 00:32:56,020
the world having default username and

00:32:54,460 --> 00:32:57,280
passwords that you haven't changed that

00:32:56,020 --> 00:33:00,070
allows someone to get in you know this

00:32:57,280 --> 00:33:03,330
there's just this million billion things

00:33:00,070 --> 00:33:05,049
that you need to worry about that yeah

00:33:03,330 --> 00:33:06,910
somebody who does this for a living

00:33:05,049 --> 00:33:08,740
should be able to do this fairly easily

00:33:06,910 --> 00:33:10,660
and trivially whereas for someone like

00:33:08,740 --> 00:33:15,159
me I wouldn't know where to start

00:33:10,660 --> 00:33:17,500
so say in that there are some security

00:33:15,159 --> 00:33:20,470
misconfigurations that

00:33:17,500 --> 00:33:23,050
are the problem of the developer so this

00:33:20,470 --> 00:33:25,300
should be a fairly familiar screen to

00:33:23,050 --> 00:33:28,450
anyone who uses them from work to their

00:33:25,300 --> 00:33:31,090
similar screens in symphony the similar

00:33:28,450 --> 00:33:34,450
screens in slim in that artisanal

00:33:31,090 --> 00:33:35,590
framework whatever that one is yeah

00:33:34,450 --> 00:33:38,200
what's happened here is the in

00:33:35,590 --> 00:33:40,030
production we've managed to generate an

00:33:38,200 --> 00:33:41,860
exception in this instance we've had an

00:33:40,030 --> 00:33:43,630
exception because I can't actually

00:33:41,860 --> 00:33:45,250
render the template that I should be in

00:33:43,630 --> 00:33:47,650
Zefram work too but it's this

00:33:45,250 --> 00:33:49,150
information here that's killing us this

00:33:47,650 --> 00:33:51,730
whole stack trace of how our application

00:33:49,150 --> 00:33:53,680
is running is visible to any potential

00:33:51,730 --> 00:33:55,570
attacker and it's giving out really cool

00:33:53,680 --> 00:33:57,460
information for them like physically

00:33:55,570 --> 00:33:59,860
where the files are located on the on

00:33:57,460 --> 00:34:01,840
the file system you know they can infer

00:33:59,860 --> 00:34:04,300
that this is a unix-like system they can

00:34:01,840 --> 00:34:05,650
infer lots of information and that I

00:34:04,300 --> 00:34:07,210
wouldn't be smart enough to infer from

00:34:05,650 --> 00:34:09,129
that that people will look into attack

00:34:07,210 --> 00:34:12,250
you will this is like a goldmine for

00:34:09,129 --> 00:34:14,560
them so we we're developers but the

00:34:12,250 --> 00:34:16,810
chord is our problem so we definitely

00:34:14,560 --> 00:34:18,760
need to make sure that things like full

00:34:16,810 --> 00:34:21,310
stack traces and exception handling in

00:34:18,760 --> 00:34:29,820
production masks as much information as

00:34:21,310 --> 00:34:29,820
we can any questions cool

00:34:34,119 --> 00:34:43,460
so we get into the kind of the brunt of

00:34:38,840 --> 00:34:46,010
it now cross-site script in XSS anyone

00:34:43,460 --> 00:34:48,440
here has not heard of cross-site

00:34:46,010 --> 00:34:53,350
scripting someone must be brave enough

00:34:48,440 --> 00:34:55,700
come on No excellent SuperDuper

00:34:53,350 --> 00:34:57,710
yeah cross-site scripting is kind of

00:34:55,700 --> 00:34:59,780
just the Golden Rule is escape all the

00:34:57,710 --> 00:35:08,780
user input all of the time never ever

00:34:59,780 --> 00:35:10,730
ever know oh you can yes yes yes yes

00:35:08,780 --> 00:35:13,010
it's a very valid point and I do cover

00:35:10,730 --> 00:35:15,650
that in a few slides time but yes I'm

00:35:13,010 --> 00:35:18,800
using a simplified version here yes

00:35:15,650 --> 00:35:20,660
escape all in all day to this input

00:35:18,800 --> 00:35:22,490
interact from whatever source not just

00:35:20,660 --> 00:35:25,430
users any data that's coming into your

00:35:22,490 --> 00:35:26,510
app escape it when you output it this is

00:35:25,430 --> 00:35:28,610
talking about when you're actually

00:35:26,510 --> 00:35:32,660
putting things into the HTML to be

00:35:28,610 --> 00:35:34,730
rendered in the browser so really really

00:35:32,660 --> 00:35:36,650
simple this is kind of the this is

00:35:34,730 --> 00:35:39,310
literally the hello world of cross-site

00:35:36,650 --> 00:35:42,440
scripting so we've got a search box and

00:35:39,310 --> 00:35:45,650
we add some funky JavaScript in there

00:35:42,440 --> 00:35:48,500
and then we've managed to put a pop-up

00:35:45,650 --> 00:35:50,180
box on top of the website you know we've

00:35:48,500 --> 00:35:52,660
put the script tag in and the alert has

00:35:50,180 --> 00:35:58,160
happened and we can say we are

00:35:52,660 --> 00:36:00,260
definitely in leet hackers this is an

00:35:58,160 --> 00:36:01,880
actual photograph that the Daily Mail

00:36:00,260 --> 00:36:03,980
ran on their website when they were

00:36:01,880 --> 00:36:06,380
talking about something being hacked so

00:36:03,980 --> 00:36:07,910
this is what all hackers look like every

00:36:06,380 --> 00:36:11,510
hacker I've ever seen has always worn a

00:36:07,910 --> 00:36:14,270
tie and a balaclava so yeah it's all

00:36:11,510 --> 00:36:16,130
good right you know it doesn't seem so

00:36:14,270 --> 00:36:19,250
trivial all we've managed to do is in

00:36:16,130 --> 00:36:20,780
our own browser make an alert box pop up

00:36:19,250 --> 00:36:24,410
using JavaScript you know what's the

00:36:20,780 --> 00:36:27,850
harm of that really well what if we put

00:36:24,410 --> 00:36:27,850
this code into the search box

00:36:29,540 --> 00:36:35,040
so what's gonna happen now any guesses

00:36:32,540 --> 00:36:36,900
surely everyone can infer this right

00:36:35,040 --> 00:36:39,290
we're gonna get a pop-up and the lid

00:36:36,900 --> 00:36:43,170
popped up onto the screen that's got

00:36:39,290 --> 00:36:48,359
cookie equals and a serialize string

00:36:43,170 --> 00:36:50,430
containing our cookie data yeah again

00:36:48,359 --> 00:36:51,839
what we Daniel we've actually managed to

00:36:50,430 --> 00:36:54,210
tinker with a website to make a pop-up

00:36:51,839 --> 00:36:55,710
appear on our own browser not somebody

00:36:54,210 --> 00:36:57,599
you know this is literally just our own

00:36:55,710 --> 00:36:59,490
browser and we're tinkering and we've

00:36:57,599 --> 00:37:02,060
managed to get some fairly sensitive

00:36:59,490 --> 00:37:07,170
information to appear on our own browser

00:37:02,060 --> 00:37:09,240
great well what happens if we run put

00:37:07,170 --> 00:37:10,500
this into the oh I don't know why

00:37:09,240 --> 00:37:12,780
there's an anchor around that sorry oh

00:37:10,500 --> 00:37:14,099
yeah cool so what happens if we manage

00:37:12,780 --> 00:37:15,930
to put this on one of our on a website

00:37:14,099 --> 00:37:17,970
that we control so what we're going to

00:37:15,930 --> 00:37:19,320
do here is we're actually going to try

00:37:17,970 --> 00:37:21,000
and get someone to click through to a

00:37:19,320 --> 00:37:22,380
URL I'll split that out because

00:37:21,000 --> 00:37:24,150
obviously is really difficult to read

00:37:22,380 --> 00:37:26,490
when it's packed up so we've got an

00:37:24,150 --> 00:37:28,410
anchor at the top and we've got an

00:37:26,490 --> 00:37:30,000
anchor at the bottom and we just saying

00:37:28,410 --> 00:37:31,440
click here if you want to see some

00:37:30,000 --> 00:37:34,109
videos of cats falling off tables

00:37:31,440 --> 00:37:35,849
because that is well known in the

00:37:34,109 --> 00:37:37,890
industry to be like the best clickbait

00:37:35,849 --> 00:37:42,390
you can do cats falling off tables and

00:37:37,890 --> 00:37:44,220
videos so what we done well we've linked

00:37:42,390 --> 00:37:46,050
the actual link goes to the search page

00:37:44,220 --> 00:37:48,089
on our Reynold Industries website and

00:37:46,050 --> 00:37:50,280
the search term is some JavaScript again

00:37:48,089 --> 00:37:53,310
but what this is actually doing is it's

00:37:50,280 --> 00:37:55,020
navigating us to my nasty site comm

00:37:53,310 --> 00:37:56,790
where the query string parameter of

00:37:55,020 --> 00:38:00,210
cookie equals and our string of C

00:37:56,790 --> 00:38:02,730
realized cookie data so now we're not

00:38:00,210 --> 00:38:05,070
just put in the sensitive cookie data on

00:38:02,730 --> 00:38:10,260
our own screen it's actually going to a

00:38:05,070 --> 00:38:12,030
third-party domain when we get there we

00:38:10,260 --> 00:38:13,560
just say error and they're like oh the

00:38:12,030 --> 00:38:15,359
cat's fallen off the table they must be

00:38:13,560 --> 00:38:17,250
so popular that their website is down or

00:38:15,359 --> 00:38:20,010
something I'll come back later and see

00:38:17,250 --> 00:38:22,200
some cats falling off the table but yeah

00:38:20,010 --> 00:38:24,750
because if you look in the URL you can

00:38:22,200 --> 00:38:27,599
see that we've now hit this website with

00:38:24,750 --> 00:38:29,880
PHP session ID blah blah blah our cookie

00:38:27,599 --> 00:38:32,190
data has been turned into a string it is

00:38:29,880 --> 00:38:35,190
a string anyway and sent to this

00:38:32,190 --> 00:38:37,010
third-party website yeah sorry I

00:38:35,190 --> 00:38:41,190
couldn't resist

00:38:37,010 --> 00:38:42,080
cleeshay yeah so now we've got a

00:38:41,190 --> 00:38:46,390
third-party

00:38:42,080 --> 00:38:49,640
Scyther is is actually able to capture

00:38:46,390 --> 00:38:52,130
the is actually able to capture the

00:38:49,640 --> 00:38:55,820
cookie data from an XSS vulnerability

00:38:52,130 --> 00:38:58,460
and they searched for the reason for

00:38:55,820 --> 00:39:02,390
that is because when we actually show

00:38:58,460 --> 00:39:05,840
the search results page which here know

00:39:02,390 --> 00:39:07,220
here what we're actually doing is under

00:39:05,840 --> 00:39:10,070
that pop-up which I probably should have

00:39:07,220 --> 00:39:11,990
shown you is search results for and then

00:39:10,070 --> 00:39:14,540
we're echoing back out the string that

00:39:11,990 --> 00:39:16,310
was put in into the search box and we're

00:39:14,540 --> 00:39:18,290
just equina tout raw we're not escaping

00:39:16,310 --> 00:39:21,590
it so when that gets echoed into the

00:39:18,290 --> 00:39:23,000
HTML it's actually an escaped JavaScript

00:39:21,590 --> 00:39:25,070
which gets run by the browser that's

00:39:23,000 --> 00:39:27,710
where the vulnerability lies here we're

00:39:25,070 --> 00:39:30,200
actually allowing users to enter

00:39:27,710 --> 00:39:32,630
something into our system and putting it

00:39:30,200 --> 00:39:34,670
back on to the hichy ml and escaped and

00:39:32,630 --> 00:39:39,740
unfiltered and unchecked that's where

00:39:34,670 --> 00:39:41,870
the vulnerability is sorry I like that

00:39:39,740 --> 00:39:49,340
picture I wanted to see it again it's

00:39:41,870 --> 00:39:50,900
all good so yeah you need to escape data

00:39:49,340 --> 00:39:52,310
that's coming into your application that

00:39:50,900 --> 00:39:53,650
you're actually displaying out when

00:39:52,310 --> 00:39:57,400
you're displaying it out onto the screen

00:39:53,650 --> 00:39:59,960
so there's two kind of sides this coin

00:39:57,400 --> 00:40:01,370
number one will cover the other side of

00:39:59,960 --> 00:40:03,080
this coin which is filtering the input

00:40:01,370 --> 00:40:04,490
when it comes in but you still need to

00:40:03,080 --> 00:40:06,170
be escaping it when you're actually

00:40:04,490 --> 00:40:09,770
putting it on to your hitch the malian

00:40:06,170 --> 00:40:11,090
to your page whitelist allowable

00:40:09,770 --> 00:40:12,890
characters rather than trying to black

00:40:11,090 --> 00:40:15,980
kind of work out by blacklisting things

00:40:12,890 --> 00:40:18,370
is like difficult white listings a lot

00:40:15,980 --> 00:40:20,330
easier you could always miss something

00:40:18,370 --> 00:40:22,010
when you're using a blacklist that

00:40:20,330 --> 00:40:24,560
somebody can be really clever and craft

00:40:22,010 --> 00:40:26,240
using HTML entities and all this other

00:40:24,560 --> 00:40:29,540
stuff that actually gives you unexpected

00:40:26,240 --> 00:40:31,610
things there's like tons of really good

00:40:29,540 --> 00:40:33,530
escape in libraries out there but going

00:40:31,610 --> 00:40:35,450
back to like the composer equals bad

00:40:33,530 --> 00:40:37,190
slide obviously don't pull them in

00:40:35,450 --> 00:40:41,630
blindly but there are really good

00:40:37,190 --> 00:40:43,520
escaping libraries out there so if I can

00:40:41,630 --> 00:40:49,210
remember the key to price this is one of

00:40:43,520 --> 00:40:49,210
my favorite exercise attacks of all time

00:40:51,040 --> 00:40:57,070
does anyone know what key to press to

00:40:53,150 --> 00:40:57,070
get key not to play a video

00:40:57,960 --> 00:41:11,020
no-oh-oh we had it then we don't have

00:41:01,480 --> 00:41:12,910
sound do we sorry so this is who is who

00:41:11,020 --> 00:41:15,220
dot is which is a whois lookup service

00:41:12,910 --> 00:41:16,330
for domain names and you should be able

00:41:15,220 --> 00:41:18,430
to see at the top of the screen there

00:41:16,330 --> 00:41:20,050
the the the this is actually playing the

00:41:18,430 --> 00:41:24,820
Harlem shake on my laptop what you can't

00:41:20,050 --> 00:41:26,440
hear does that help no so you can now

00:41:24,820 --> 00:41:28,360
see that this website is doing some

00:41:26,440 --> 00:41:30,490
funky dance into the Harlem shake

00:41:28,360 --> 00:41:32,080
oh look we've got Rick Astley never

00:41:30,490 --> 00:41:37,570
gonna give you up in the in the actual

00:41:32,080 --> 00:41:42,130
record as well yeah pretty cool this was

00:41:37,570 --> 00:41:43,960
life like ages and the reason that that

00:41:42,130 --> 00:41:46,960
worked is because this clever guy Jamie

00:41:43,960 --> 00:41:51,970
Hankins doc quarry UK and in his DNS

00:41:46,960 --> 00:41:54,430
records put some JavaScript so when you

00:41:51,970 --> 00:41:57,040
went to who dot is DNS Jim Hanken record

00:41:54,430 --> 00:41:58,780
at UK they weren't escape in this

00:41:57,040 --> 00:42:01,390
because they weren't seeing this as user

00:41:58,780 --> 00:42:02,890
input so what was happening was they

00:42:01,390 --> 00:42:04,960
were just showing this on the on the

00:42:02,890 --> 00:42:06,790
screen unchecked and then people going

00:42:04,960 --> 00:42:09,960
oh look your your website plays the

00:42:06,790 --> 00:42:12,370
Harlem shake and dances for us so yeah

00:42:09,960 --> 00:42:15,280
so this goes back to what cats point

00:42:12,370 --> 00:42:19,060
earlier it's not just about like where

00:42:15,280 --> 00:42:20,710
you can think oh oh yeah this is a this

00:42:19,060 --> 00:42:22,960
is a box or somebody can put some data I

00:42:20,710 --> 00:42:26,050
need to make sure I escaped that I've

00:42:22,960 --> 00:42:27,760
actually managed to annoy a few friends

00:42:26,050 --> 00:42:29,620
of mine who run a company that will run

00:42:27,760 --> 00:42:31,390
in a Facebook game by putting some

00:42:29,620 --> 00:42:33,550
JavaScript into some of my Facebook data

00:42:31,390 --> 00:42:35,440
and they were query in the Facebook API

00:42:33,550 --> 00:42:37,830
and pulling the data back to display on

00:42:35,440 --> 00:42:41,110
their site and they weren't filtering it

00:42:37,830 --> 00:42:42,970
Facebook were it was fine but when they

00:42:41,110 --> 00:42:44,230
were pulling directly from the API they

00:42:42,970 --> 00:42:45,820
were just blasting it on the screen it's

00:42:44,230 --> 00:42:51,040
coming from Facebook it'll be fine

00:42:45,820 --> 00:42:53,680
yeah it won't be fine as Jamie Hankins

00:42:51,040 --> 00:42:55,060
has proven to us all it's pretty cool if

00:42:53,680 --> 00:42:56,980
you can get you know this was just a bit

00:42:55,060 --> 00:42:59,260
of fun and this was fixed quickly and

00:42:56,980 --> 00:43:00,820
you know nobody was really hurt they

00:42:59,260 --> 00:43:04,330
maybe had a bit of egg on their face the

00:43:00,820 --> 00:43:06,820
the the DNS lookup companies who had

00:43:04,330 --> 00:43:09,630
this on their site but yeah you could do

00:43:06,820 --> 00:43:13,960
some pretty bad things with that

00:43:09,630 --> 00:43:18,940
so what we'll be talking about before I

00:43:13,960 --> 00:43:22,030
got sidetracked oh yeah we were saying

00:43:18,940 --> 00:43:24,130
that we've managed to use XSS - was

00:43:22,030 --> 00:43:27,390
there any questions on exercise before

00:43:24,130 --> 00:43:31,030
we move on

00:43:27,390 --> 00:43:32,470
excellent either I'm really scary to

00:43:31,030 --> 00:43:35,460
talk to or I'm explaining this stuff

00:43:32,470 --> 00:43:37,960
really well so thank you

00:43:35,460 --> 00:43:40,000
yeah we've we've managed to saw in the

00:43:37,960 --> 00:43:43,000
last XSS attack we managed to redirect

00:43:40,000 --> 00:43:46,690
the user to a website and capture their

00:43:43,000 --> 00:43:48,130
PHP session ID but what can we really do

00:43:46,690 --> 00:43:49,510
with that well if you've got broken

00:43:48,130 --> 00:43:51,640
authentication and session management

00:43:49,510 --> 00:43:53,410
that's where these session IDs that you

00:43:51,640 --> 00:44:00,280
can capture maliciously come into play

00:43:53,410 --> 00:44:02,080
so some websites are using PHP now still

00:44:00,280 --> 00:44:04,000
allow you to really do the most basic

00:44:02,080 --> 00:44:05,410
way of using the session ID that you've

00:44:04,000 --> 00:44:09,640
captured just pass it in as a query

00:44:05,410 --> 00:44:12,640
string yeah kind of reflect back to

00:44:09,640 --> 00:44:14,320
number 5 which is like in you know badly

00:44:12,640 --> 00:44:16,390
configured servers because if your PHP

00:44:14,320 --> 00:44:20,440
version if your PHP configuration is

00:44:16,390 --> 00:44:21,820
left in you and pass in PHP session IDs

00:44:20,440 --> 00:44:24,070
in the query string that's you know

00:44:21,820 --> 00:44:26,440
probably not the best thing in the world

00:44:24,070 --> 00:44:30,400
you should be doing you can turn that

00:44:26,440 --> 00:44:34,000
off so say in PHP any session use only

00:44:30,400 --> 00:44:37,480
cookies I think that this is turned off

00:44:34,000 --> 00:44:40,090
by default from 5 3 onwards I think

00:44:37,480 --> 00:44:42,190
don't quote me but you should probably

00:44:40,090 --> 00:44:43,570
check that that just gives that doesn't

00:44:42,190 --> 00:44:46,900
you know turning this off doesn't

00:44:43,570 --> 00:44:49,120
protect you people can still spoof

00:44:46,900 --> 00:44:51,190
sessions using using these cookies but

00:44:49,120 --> 00:44:53,800
it just gets rid of a whole layer of

00:44:51,190 --> 00:44:55,840
people that aren't professionals they're

00:44:53,800 --> 00:44:59,920
just toying around it just discourages

00:44:55,840 --> 00:45:03,130
that lot how do we actually make sure

00:44:59,920 --> 00:45:05,440
that our session is secure well this is

00:45:03,130 --> 00:45:07,810
one where there's not really a solid

00:45:05,440 --> 00:45:10,690
answer this is one way you need to to

00:45:07,810 --> 00:45:12,130
kind of design your system around the

00:45:10,690 --> 00:45:13,540
security of your session you need to

00:45:12,130 --> 00:45:15,760
keep it as a first-class citizen in your

00:45:13,540 --> 00:45:17,160
mind and think you know I need to make

00:45:15,760 --> 00:45:19,600
sure whether my sessions are secure

00:45:17,160 --> 00:45:22,120
session regeneration is one of the ways

00:45:19,600 --> 00:45:23,200
you can do that so regenerating the

00:45:22,120 --> 00:45:25,829
session ID

00:45:23,200 --> 00:45:28,329
every time that there's a change of

00:45:25,829 --> 00:45:30,670
there's an elevation or reduction of the

00:45:28,329 --> 00:45:34,000
security level of your user so if a user

00:45:30,670 --> 00:45:36,280
logs in regenerate the session ID if the

00:45:34,000 --> 00:45:38,290
user requests additional privileges

00:45:36,280 --> 00:45:40,390
somehow if you have a system where you

00:45:38,290 --> 00:45:42,130
log in and you can get your normal

00:45:40,390 --> 00:45:43,980
privileges but if you're an admin you

00:45:42,130 --> 00:45:47,290
need to further elevate your privileges

00:45:43,980 --> 00:45:49,180
regenerate your session ID then if a

00:45:47,290 --> 00:45:50,740
user logs out to regenerate the session

00:45:49,180 --> 00:45:52,270
ID so what we're trying to do is make

00:45:50,740 --> 00:45:55,720
sure that if these session IDs are

00:45:52,270 --> 00:45:58,299
captured that they're not any use to

00:45:55,720 --> 00:46:01,240
people after as short a time as possible

00:45:58,299 --> 00:46:02,530
basically yeah does that make sense I

00:46:01,240 --> 00:46:04,630
don't know if I explained that very well

00:46:02,530 --> 00:46:07,089
so regenerating the session ID basically

00:46:04,630 --> 00:46:08,470
means that the session ID is that the

00:46:07,089 --> 00:46:10,270
old one that's been captured is no

00:46:08,470 --> 00:46:12,220
longer valid and a new session ID is

00:46:10,270 --> 00:46:15,339
generated and sent with the next

00:46:12,220 --> 00:46:16,809
response in the cookie so you can mean

00:46:15,339 --> 00:46:18,609
that those captured session IDs are

00:46:16,809 --> 00:46:21,730
actually no use to anyone after a period

00:46:18,609 --> 00:46:23,740
you know a short period of time again as

00:46:21,730 --> 00:46:26,380
we covered earlier like password

00:46:23,740 --> 00:46:28,329
confirmation for important things stop

00:46:26,380 --> 00:46:29,799
this from happening because even though

00:46:28,329 --> 00:46:32,740
I've managed to actually capture a

00:46:29,799 --> 00:46:34,390
session ID and craft the request that

00:46:32,740 --> 00:46:37,210
makes me be logged in as you in the

00:46:34,390 --> 00:46:39,190
system I don't know your password so if

00:46:37,210 --> 00:46:41,650
I want to do something critical

00:46:39,190 --> 00:46:43,390
I need your password to be able to do it

00:46:41,650 --> 00:46:48,280
then actually you're captured session

00:46:43,390 --> 00:46:50,079
isn't that valuable to me this like some

00:46:48,280 --> 00:46:52,059
libraries out there that will secure

00:46:50,079 --> 00:46:54,640
your sessions I think these are fairly

00:46:52,059 --> 00:46:57,040
outdated but they do exist so you can do

00:46:54,640 --> 00:46:59,260
something like look at the IP address

00:46:57,040 --> 00:47:02,020
that started the session and store that

00:46:59,260 --> 00:47:03,910
in the session and then compare that to

00:47:02,020 --> 00:47:06,369
every other IP address that requests

00:47:03,910 --> 00:47:08,230
that session and this is kind of you

00:47:06,369 --> 00:47:09,910
know this kind of worked really well you

00:47:08,230 --> 00:47:11,440
could create a hash from like the user

00:47:09,910 --> 00:47:12,579
agent on the IP address so you could

00:47:11,440 --> 00:47:14,859
check that they were on the same browser

00:47:12,579 --> 00:47:18,430
on the same IP address so that you can't

00:47:14,859 --> 00:47:19,990
the hijacked session would be denied you

00:47:18,430 --> 00:47:22,030
know with the advent of people on mobile

00:47:19,990 --> 00:47:23,740
devices more and more and more where IP

00:47:22,030 --> 00:47:26,400
address has changed much more frequently

00:47:23,740 --> 00:47:28,869
now than they did in the past this is

00:47:26,400 --> 00:47:31,440
it's not as elegant a solution as I

00:47:28,869 --> 00:47:31,440
would like but

00:47:32,740 --> 00:47:36,190
it works to some extent it gives you a

00:47:34,600 --> 00:47:39,100
bit of extra you know layer of

00:47:36,190 --> 00:47:41,860
protection and there's some session

00:47:39,100 --> 00:47:43,240
handlers of libraries out there that

00:47:41,860 --> 00:47:46,030
will do this kind of thing for use and

00:47:43,240 --> 00:47:49,660
session does it Symphony component h-2b

00:47:46,030 --> 00:47:51,550
validation session does it all right doc

00:47:49,660 --> 00:47:53,080
session does it well which is a nice

00:47:51,550 --> 00:47:55,350
standalone library with very few

00:47:53,080 --> 00:47:57,910
dependencies or no dependencies I think

00:47:55,350 --> 00:47:59,020
sir math is an old session handler

00:47:57,910 --> 00:48:00,360
probably does it if you're into that

00:47:59,020 --> 00:48:02,650
kind of thing

00:48:00,360 --> 00:48:04,210
there's tons of libraries out that you

00:48:02,650 --> 00:48:05,470
don't need to code this yourself and it

00:48:04,210 --> 00:48:07,720
is no it's an added layer of protection

00:48:05,470 --> 00:48:10,090
but for me there's only one way to make

00:48:07,720 --> 00:48:16,450
sure that you're pretty much covered all

00:48:10,090 --> 00:48:18,460
bases which is HTTP by default there's a

00:48:16,450 --> 00:48:21,520
setting that says cookies should only be

00:48:18,460 --> 00:48:24,040
sent over HTTP so you can stop cookies

00:48:21,520 --> 00:48:28,180
being sent through unsafe HTTP requests

00:48:24,040 --> 00:48:31,780
that's a PHP any set in there's a HTTP

00:48:28,180 --> 00:48:33,610
only cookies which actually means that

00:48:31,780 --> 00:48:36,460
cookies can only be sent over HTTP

00:48:33,610 --> 00:48:38,109
requests CSRF as we've already discussed

00:48:36,460 --> 00:48:39,280
so a form field to check that the

00:48:38,109 --> 00:48:42,490
request is coming from the right place

00:48:39,280 --> 00:48:44,080
in the first place credential entry so

00:48:42,490 --> 00:48:45,730
enter in a password whenever you do

00:48:44,080 --> 00:48:48,369
anything that is particularly vulnerable

00:48:45,730 --> 00:48:50,260
and then session regeneration you know

00:48:48,369 --> 00:48:52,390
you need to take this as a package and

00:48:50,260 --> 00:48:54,700
pretty much implement as much of that as

00:48:52,390 --> 00:48:55,810
you feel is appropriate for the level of

00:48:54,700 --> 00:49:00,960
security that you need in your

00:48:55,810 --> 00:49:07,119
application so there any questions on

00:49:00,960 --> 00:49:11,920
session management superb and we're

00:49:07,119 --> 00:49:16,090
looking okay for time too so so number

00:49:11,920 --> 00:49:22,560
one no guesses for no no points for

00:49:16,090 --> 00:49:22,560
guessing this yeah injection

00:49:25,070 --> 00:49:31,110
Injection has anyone here been a victim

00:49:29,100 --> 00:49:33,570
of some kind of injection attack like

00:49:31,110 --> 00:49:38,550
sequel injection or is the most common

00:49:33,570 --> 00:49:39,990
we would see you yeah brave souls for

00:49:38,550 --> 00:49:41,720
the hands up I'll put my hand up yeah

00:49:39,990 --> 00:49:43,860
absolutely

00:49:41,720 --> 00:49:45,240
I'm betting there's some people in the

00:49:43,860 --> 00:49:50,070
room who haven't put their hands up who

00:49:45,240 --> 00:49:51,810
have been who have been susceptible to

00:49:50,070 --> 00:49:54,120
this attack but probably don't know it

00:49:51,810 --> 00:49:55,530
yet and these are really really easy

00:49:54,120 --> 00:49:57,810
mistakes to make i made these mistakes

00:49:55,530 --> 00:49:59,190
tons of times which is why i am standing

00:49:57,810 --> 00:50:02,580
up here talking to you about it because

00:49:59,190 --> 00:50:05,060
i've been an compromised incredibly

00:50:02,580 --> 00:50:07,350
badly in the past by this kind of thing

00:50:05,060 --> 00:50:09,450
filter all the things all of the time so

00:50:07,350 --> 00:50:11,040
this is the other end of the escape all

00:50:09,450 --> 00:50:13,110
your output every time your output into

00:50:11,040 --> 00:50:14,430
the browser escape everything every time

00:50:13,110 --> 00:50:18,450
you bring in things into your

00:50:14,430 --> 00:50:20,610
application filter it so filter input

00:50:18,450 --> 00:50:22,620
escape output is like mantra that you

00:50:20,610 --> 00:50:23,850
should be living by when you work in

00:50:22,620 --> 00:50:26,430
with you know with these kind of things

00:50:23,850 --> 00:50:29,130
so filter all the input all the time so

00:50:26,430 --> 00:50:30,780
here's a really really basic 101 intro

00:50:29,130 --> 00:50:32,390
into injection which i'm hoping you know

00:50:30,780 --> 00:50:35,400
most people will know but a refresher

00:50:32,390 --> 00:50:38,580
won't hurt so we've got a news page

00:50:35,400 --> 00:50:40,230
which says yeah news show me some news

00:50:38,580 --> 00:50:43,230
and the news ideas fourteen or nine

00:50:40,230 --> 00:50:46,560
pretty simple stuff but once when i

00:50:43,230 --> 00:50:48,960
craft the URL that says load me the news

00:50:46,560 --> 00:50:51,570
page and bring me the news idea of drop

00:50:48,960 --> 00:50:53,400
table news little bobby tables right

00:50:51,570 --> 00:50:56,870
everyone knows everyone knows little

00:50:53,400 --> 00:51:00,030
bobby tables surely yeah this is how he

00:50:56,870 --> 00:51:02,910
this is how my code worked when i got

00:51:00,030 --> 00:51:04,560
compromised by an injection attack this

00:51:02,910 --> 00:51:06,240
is actually i actually had access to the

00:51:04,560 --> 00:51:08,160
code and i pulled in the actual code

00:51:06,240 --> 00:51:08,790
that i used at the time and this is what

00:51:08,160 --> 00:51:11,270
i was doing

00:51:08,790 --> 00:51:15,990
so let's start from news or ID equals ID

00:51:11,270 --> 00:51:18,390
run the query yeah fidella heritable

00:51:15,990 --> 00:51:19,860
news does not exist what how can

00:51:18,390 --> 00:51:22,050
terrible news not exist because

00:51:19,860 --> 00:51:27,060
obviously I've just run some sequel that

00:51:22,050 --> 00:51:29,610
and has dropped my table news it's a

00:51:27,060 --> 00:51:31,320
pretty basic example but then how can

00:51:29,610 --> 00:51:34,350
this be used for compromising while

00:51:31,320 --> 00:51:36,630
crafting URLs like this username equals

00:51:34,350 --> 00:51:41,160
I must and password equals one

00:51:36,630 --> 00:51:44,130
quote space or one equals one so that

00:51:41,160 --> 00:51:45,990
will get passed in as usually in

00:51:44,130 --> 00:51:46,770
gozaimasu and password equals one all

00:51:45,990 --> 00:51:49,620
one equals one

00:51:46,770 --> 00:51:51,320
well one equals one is always true so

00:51:49,620 --> 00:51:54,360
what that actually means is that we

00:51:51,320 --> 00:51:56,310
evaluate the query as this if you were

00:51:54,360 --> 00:51:59,910
using my really bad code from my earlier

00:51:56,310 --> 00:52:02,130
example and we end up getting logged in

00:51:59,910 --> 00:52:04,770
as the lowest numbered user in a table

00:52:02,130 --> 00:52:06,240
in most cases depending on your table

00:52:04,770 --> 00:52:08,310
setup it could be slightly different but

00:52:06,240 --> 00:52:10,440
in most default cases in the

00:52:08,310 --> 00:52:12,270
vulnerability I had it was the lowest

00:52:10,440 --> 00:52:14,580
numbered user that was being returned

00:52:12,270 --> 00:52:16,320
because one equals one evaluates always

00:52:14,580 --> 00:52:18,630
is true therefore it was pulling the

00:52:16,320 --> 00:52:20,490
whole record set and my code was picking

00:52:18,630 --> 00:52:22,080
the first result from that record set

00:52:20,490 --> 00:52:25,140
and saying oh that's the user that's

00:52:22,080 --> 00:52:26,910
logged in so now I'm logged in as the

00:52:25,140 --> 00:52:28,500
lowest user generally the lowest user

00:52:26,910 --> 00:52:31,230
will be the developer who's developed

00:52:28,500 --> 00:52:32,400
the the system right because we always

00:52:31,230 --> 00:52:34,710
create our own accounts when we're

00:52:32,400 --> 00:52:37,740
testing and generally the developers

00:52:34,710 --> 00:52:39,060
will have maximum permissions because we

00:52:37,740 --> 00:52:40,350
like to have the maximum permissions

00:52:39,060 --> 00:52:43,080
even when we finished working in a

00:52:40,350 --> 00:52:44,700
system for when those pesky people do

00:52:43,080 --> 00:52:47,040
something wrong and we have to fix it so

00:52:44,700 --> 00:52:49,230
this is a vulnerability that effectively

00:52:47,040 --> 00:52:51,660
lets anyone log into your website as the

00:52:49,230 --> 00:52:55,880
lowest numbered user which is why it's

00:52:51,660 --> 00:52:59,100
number one in the in the OWASP top 10

00:52:55,880 --> 00:53:00,900
you really have to think about filter in

00:52:59,100 --> 00:53:03,180
every single piece of data that comes

00:53:00,900 --> 00:53:06,810
into your application all of the time no

00:53:03,180 --> 00:53:09,780
exceptions no excuses there's some

00:53:06,810 --> 00:53:12,420
there's some basic filtering built into

00:53:09,780 --> 00:53:14,820
a PHP so filter var username

00:53:12,420 --> 00:53:16,250
filter sanitize email this would pretty

00:53:14,820 --> 00:53:21,020
much solve that problem out of the box

00:53:16,250 --> 00:53:23,400
built into PHP it's there for us to use

00:53:21,020 --> 00:53:29,550
the second point is to use parameterize

00:53:23,400 --> 00:53:32,010
queries as a five point for my sequel

00:53:29,550 --> 00:53:35,070
underscore star cui functions with

00:53:32,010 --> 00:53:37,800
deprecated v for anyone we take us five

00:53:35,070 --> 00:53:39,420
four so the actual way that I was

00:53:37,800 --> 00:53:41,460
running that sequel query is deprecated

00:53:39,420 --> 00:53:42,960
as of PHP 7 it's gonna be removed

00:53:41,460 --> 00:53:48,630
entirely so you won't be able to

00:53:42,960 --> 00:53:50,370
basically run by 5 oh ok thank you yeah

00:53:48,630 --> 00:53:52,530
apparently has a 5/5 is

00:53:50,370 --> 00:53:54,330
being removed entirely so we now use

00:53:52,530 --> 00:53:56,790
things like parameterize queries so I'm

00:53:54,330 --> 00:53:58,530
using PDO here and what I'm doing is

00:53:56,790 --> 00:54:00,510
saying I want to have a token

00:53:58,530 --> 00:54:02,940
substitution to build my query rather

00:54:00,510 --> 00:54:04,980
than concatenate in a string so that

00:54:02,940 --> 00:54:06,570
means even if I haven't filtered my

00:54:04,980 --> 00:54:09,150
input which I have in the slide before

00:54:06,570 --> 00:54:10,560
you know we we're kind of mitigate in

00:54:09,150 --> 00:54:12,960
this concatenate in a string that's

00:54:10,560 --> 00:54:14,910
doing things that we don't expect anyone

00:54:12,960 --> 00:54:19,550
notice the security vulnerability in

00:54:14,910 --> 00:54:23,190
this in this slide come on don't be shy

00:54:19,550 --> 00:54:26,580
nobody don't we

00:54:23,190 --> 00:54:28,050
yeah please shout yes so we're accessing

00:54:26,580 --> 00:54:33,960
the password directly without filtering

00:54:28,050 --> 00:54:35,610
it the password in get yes we're

00:54:33,960 --> 00:54:37,530
accessing it with accessing it directly

00:54:35,610 --> 00:54:39,690
we're not filtering the input here we're

00:54:37,530 --> 00:54:41,040
taking it directly from get but

00:54:39,690 --> 00:54:43,530
obviously you should be hash in your

00:54:41,040 --> 00:54:44,700
passwords anyway not that I would say

00:54:43,530 --> 00:54:45,750
you shouldn't filter that you know

00:54:44,700 --> 00:54:47,190
filter the passwords but if you're

00:54:45,750 --> 00:54:50,040
hashing it it gets rid of this anyway

00:54:47,190 --> 00:54:53,970
you know hash is a inherently secure to

00:54:50,040 --> 00:54:56,190
to put into database password hash

00:54:53,970 --> 00:54:57,540
compat library yeah we've come around in

00:54:56,190 --> 00:54:59,400
a big circle again so many of these

00:54:57,540 --> 00:55:00,900
things are dependent on each other that

00:54:59,400 --> 00:55:04,380
it kind of works it all out once you get

00:55:00,900 --> 00:55:05,760
into working in this way there's some

00:55:04,380 --> 00:55:07,530
really cool filter libraries out there

00:55:05,760 --> 00:55:10,280
that can help you to do this because

00:55:07,530 --> 00:55:14,780
because obviously right in filters for

00:55:10,280 --> 00:55:17,250
for for data there's so many common data

00:55:14,780 --> 00:55:18,570
designs that you want to use you know

00:55:17,250 --> 00:55:21,270
email addresses are gonna be the same

00:55:18,570 --> 00:55:22,950
post codes in the UK we can filter these

00:55:21,270 --> 00:55:24,330
things really rigidly because we know

00:55:22,950 --> 00:55:26,190
what character set should be in a

00:55:24,330 --> 00:55:27,990
postcode we know what character set

00:55:26,190 --> 00:55:30,210
should be in a telephone number so

00:55:27,990 --> 00:55:32,400
there's tons of filtering libraries that

00:55:30,210 --> 00:55:33,570
give you access to these patterns that

00:55:32,400 --> 00:55:35,190
mean you don't have to worry about

00:55:33,570 --> 00:55:38,220
writing a regular expression for a UK

00:55:35,190 --> 00:55:39,330
postcode because y'all alright nobody

00:55:38,220 --> 00:55:41,330
wants to be right in regular expressions

00:55:39,330 --> 00:55:44,190
on someone's solved that problem for you

00:55:41,330 --> 00:55:45,840
so we've got things like then filter yes

00:55:44,190 --> 00:55:49,140
I always put the send libraries first

00:55:45,840 --> 00:55:51,110
because I'm a Zen framework I or a

00:55:49,140 --> 00:55:53,790
filter is really good for this and

00:55:51,110 --> 00:55:58,590
there's some artisanal filtering library

00:55:53,790 --> 00:56:00,150
I think if that's your thing there's

00:55:58,590 --> 00:56:02,450
some really cool filtering libraries out

00:56:00,150 --> 00:56:04,320
there that allow you to build filters

00:56:02,450 --> 00:56:07,970
programmatically using fluid

00:56:04,320 --> 00:56:09,990
two fishes you know have a look around

00:56:07,970 --> 00:56:15,750
there's tens of filter libraries out

00:56:09,990 --> 00:56:19,490
there any questions on injection no yep

00:56:15,750 --> 00:56:19,490
shout or do we have

00:56:20,660 --> 00:56:30,240
what about modsecurity I don't know what

00:56:29,340 --> 00:56:38,820
you mean I'm sorry

00:56:30,240 --> 00:56:40,410
oh okay so so bill so you're talking

00:56:38,820 --> 00:56:41,850
about so the question is what about mod

00:56:40,410 --> 00:56:44,880
security which apparently is an Apache

00:56:41,850 --> 00:56:46,350
module to to kind of it takes care of

00:56:44,880 --> 00:56:48,210
some of this stuff before it even hits

00:56:46,350 --> 00:56:51,920
your application right yes

00:56:48,210 --> 00:56:54,150
so yeah great I haven't used it myself

00:56:51,920 --> 00:56:55,590
sorry I can't really see it because the

00:56:54,150 --> 00:56:58,020
light I haven't really used it myself

00:56:55,590 --> 00:57:02,010
but I'd be interested to to learn if you

00:56:58,020 --> 00:57:04,770
know I if it was me personally I think

00:57:02,010 --> 00:57:07,530
that most of these problems you can

00:57:04,770 --> 00:57:09,030
handle at the code level because when

00:57:07,530 --> 00:57:12,110
you get into I'm in a way of working

00:57:09,030 --> 00:57:15,630
personally where I escape all output

00:57:12,110 --> 00:57:18,090
biometric hose and filter all input in

00:57:15,630 --> 00:57:20,220
fact the way that I get input from my

00:57:18,090 --> 00:57:23,100
Zen framework applications is I don't

00:57:20,220 --> 00:57:24,780
use the default methods to get it I've

00:57:23,100 --> 00:57:27,570
written my own methods the ticks and

00:57:24,780 --> 00:57:30,870
filters as a parameter so I can only get

00:57:27,570 --> 00:57:34,020
data from post and GATT and from

00:57:30,870 --> 00:57:36,450
whatever else put whatever by using a

00:57:34,020 --> 00:57:39,600
method that I filter it so I don't think

00:57:36,450 --> 00:57:41,850
that I would need personally to have

00:57:39,600 --> 00:57:43,470
some layer before my application because

00:57:41,850 --> 00:57:46,590
I think that if you get into a habit of

00:57:43,470 --> 00:57:49,320
code in defensively you should be fine

00:57:46,590 --> 00:57:52,050
but with that said I wouldn't I would

00:57:49,320 --> 00:57:56,790
not have any problem with Arden as an

00:57:52,050 --> 00:58:00,630
extra layer on top yeah I would be

00:57:56,790 --> 00:58:02,640
scared to to put my the security of my

00:58:00,630 --> 00:58:05,130
website in the hands of a module that I

00:58:02,640 --> 00:58:07,470
didn't fully understand would be my own

00:58:05,130 --> 00:58:09,420
personal worry basically so I would

00:58:07,470 --> 00:58:10,890
still be filtering anyway even though

00:58:09,420 --> 00:58:12,870
this was in place I would still be like

00:58:10,890 --> 00:58:14,430
oh I'm gonna filter anyway so then it

00:58:12,870 --> 00:58:17,550
doesn't really solve any problems for me

00:58:14,430 --> 00:58:27,130
but extra layer security always good

00:58:17,550 --> 00:58:30,340
okay any more questions shoot yes it's a

00:58:27,130 --> 00:58:32,349
good question um and I probably should

00:58:30,340 --> 00:58:33,490
have had a slide on that because I can't

00:58:32,349 --> 00:58:36,010
for the life of me remember the name of

00:58:33,490 --> 00:58:38,700
it there's a Google there's a Google

00:58:36,010 --> 00:58:41,770
project called

00:58:38,700 --> 00:58:46,060
something weird which I can't remember

00:58:41,770 --> 00:58:47,950
in fact I have it installed on my

00:58:46,060 --> 00:58:52,390
machine now I'll tweet about it after

00:58:47,950 --> 00:58:53,890
this yeah shoot do you know the name it

00:58:52,390 --> 00:58:55,960
so the course re the question was is

00:58:53,890 --> 00:58:58,060
there any automated way to test against

00:58:55,960 --> 00:59:00,790
these vulnerabilities and Google do have

00:58:58,060 --> 00:59:03,550
a like a pen testing tool that allows

00:59:00,790 --> 00:59:06,310
you to run this against your application

00:59:03,550 --> 00:59:09,880
and it will spider up and go down and

00:59:06,310 --> 00:59:10,869
look for easy vulnerabilities so yes but

00:59:09,880 --> 00:59:13,330
I don't know the name of it off the top

00:59:10,869 --> 00:59:14,859
of my head sorry I will put up the tweet

00:59:13,330 --> 00:59:17,230
afterwards when I find it on my machine

00:59:14,859 --> 00:59:18,760
or just come up to me afterwards because

00:59:17,230 --> 00:59:21,070
it's on my laptop so I can find it

00:59:18,760 --> 00:59:27,460
do we have time for any more questions

00:59:21,070 --> 00:59:32,619
yeah shoot yes I was 2013

00:59:27,460 --> 00:59:34,599
yes well yeah so the question is oh it's

00:59:32,619 --> 00:59:35,290
this is from 2013 and it feels like it's

00:59:34,599 --> 00:59:37,540
out of date

00:59:35,290 --> 00:59:39,130
Oh wasp can constantly monitor this

00:59:37,540 --> 00:59:41,320
stuff but they only put out a new list

00:59:39,130 --> 00:59:42,970
when there's sufficient change in the

00:59:41,320 --> 00:59:45,339
vulnerabilities that they feel like they

00:59:42,970 --> 00:59:47,770
need to update their top ten what this

00:59:45,339 --> 00:59:49,930
tells me is that these vulnerabilities

00:59:47,770 --> 00:59:51,520
haven't changed since 2013 right they're

00:59:49,930 --> 00:59:53,440
still available in millions of websites

00:59:51,520 --> 00:59:56,740
and millions of web applications around

00:59:53,440 --> 00:59:58,300
the world so yes it may seem like it's

00:59:56,740 --> 00:59:59,890
out of date but that's only because they

00:59:58,300 --> 01:00:02,589
haven't felt the need to update this

00:59:59,890 --> 01:00:05,710
list really um you can look on the OWASP

01:00:02,589 --> 01:00:07,330
website there's like a floating list

01:00:05,710 --> 01:00:10,570
some of these may have changed from the

01:00:07,330 --> 01:00:11,859
actual published versions but there's

01:00:10,570 --> 01:00:13,080
nothing in the top two and the orders

01:00:11,859 --> 01:00:17,550
may have changed but they're the same

01:00:13,080 --> 01:00:17,550
vulnerabilities anymore

01:00:20,600 --> 01:00:25,350
the piece of software is cruises app

01:00:22,800 --> 01:00:27,090
attack proxy okay that's one piece of

01:00:25,350 --> 01:00:28,920
software zap attack proxy thank you very

01:00:27,090 --> 01:00:32,910
much that's the Google I know okay I

01:00:28,920 --> 01:00:34,970
found a different one Qualis is another

01:00:32,910 --> 01:00:36,500
piece of software thank you very much

01:00:34,970 --> 01:00:42,300
Nick

01:00:36,500 --> 01:00:44,700
nikto ni ke T oh there we go

01:00:42,300 --> 01:00:47,280
I should really blog on these things and

01:00:44,700 --> 01:00:48,630
try them out so I will thank you I think

01:00:47,280 --> 01:00:51,690
we got time for one more here and or not

01:00:48,630 --> 01:00:53,790
no I'm sorry we're out of time and

01:00:51,690 --> 01:00:55,859
please please please please please rate

01:00:53,790 --> 01:00:58,080
my talk and everyone else's talk on

01:00:55,859 --> 01:01:00,060
joined in and we really really really

01:00:58,080 --> 01:01:02,280
like the feedback and if you want to

01:01:00,060 --> 01:01:04,380
talk more about these things there's be

01:01:02,280 --> 01:01:05,550
a later find me I'm always like to talk

01:01:04,380 --> 01:01:15,720
about this stuff so thank you very much

01:01:05,550 --> 01:01:17,970
indeed thank you we have a short break

01:01:15,720 --> 01:01:19,230
now with coffee and cakes available down

01:01:17,970 --> 01:01:22,410
in the King George if you want to head

01:01:19,230 --> 01:01:26,730
down there and we'll be back here with

01:01:22,410 --> 01:01:30,770
Kieran talking about why your test suite

01:01:26,730 --> 01:01:30,770

YouTube URL: https://www.youtube.com/watch?v=qMkiZ3Ehv5M


